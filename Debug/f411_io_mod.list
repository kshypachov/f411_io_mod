
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022c54  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005b60  08032df8  08032df8  00023df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08038958  08038958  0002a7e8  2**0
                  CONTENTS
  4 .ARM          00000008  08038958  08038958  00029958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08038960  08038960  0002a7e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08038960  08038960  00029960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08038968  08038968  00029968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000007e8  20000000  0803896c  0002a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017b70  200007e8  08039154  0002a7e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20018358  08039154  0002b358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002a7e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00055102  00000000  00000000  0002a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e2b  00000000  00000000  0007f91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0002658b  00000000  00000000  00086745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d68  00000000  00000000  000accd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002df9  00000000  00000000  000afa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f826  00000000  00000000  000b2831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042c3b  00000000  00000000  000d2057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8772  00000000  00000000  00114c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001bd404  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b808  00000000  00000000  001bd448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001c8c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200007e8 	.word	0x200007e8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08032ddc 	.word	0x08032ddc

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200007ec 	.word	0x200007ec
 80101dc:	08032ddc 	.word	0x08032ddc

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <EthBegin>:

void EthResetEnd(void){
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
}

void EthBegin(void * param){
 80110dc:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 80110de:	2200      	movs	r2, #0
 80110e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110e4:	4801      	ldr	r0, [pc, #4]	@ (80110ec <EthBegin+0x10>)
 80110e6:	f003 feb0 	bl	8014e4a <HAL_GPIO_WritePin>
}
 80110ea:	bd08      	pop	{r3, pc}
 80110ec:	40020400 	.word	0x40020400

080110f0 <EthEnd>:

void EthEnd(void * param){
 80110f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80110f2:	2201      	movs	r2, #1
 80110f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110f8:	4801      	ldr	r0, [pc, #4]	@ (8011100 <EthEnd+0x10>)
 80110fa:	f003 fea6 	bl	8014e4a <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 80110fe:	bd08      	pop	{r3, pc}
 8011100:	40020400 	.word	0x40020400

08011104 <FlashBegin>:
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}

void FlashBegin(void){
 8011104:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8011106:	2200      	movs	r2, #0
 8011108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801110c:	4801      	ldr	r0, [pc, #4]	@ (8011114 <FlashBegin+0x10>)
 801110e:	f003 fe9c 	bl	8014e4a <HAL_GPIO_WritePin>
}
 8011112:	bd08      	pop	{r3, pc}
 8011114:	40020000 	.word	0x40020000

08011118 <FlashEnd>:

void FlashEnd(void){
 8011118:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 801111a:	2201      	movs	r2, #1
 801111c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011120:	4801      	ldr	r0, [pc, #4]	@ (8011128 <FlashEnd+0x10>)
 8011122:	f003 fe92 	bl	8014e4a <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 8011126:	bd08      	pop	{r3, pc}
 8011128:	40020000 	.word	0x40020000

0801112c <StartIOTask>:
{
 801112c:	b510      	push	{r4, lr}
 801112e:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 8011130:	4b48      	ldr	r3, [pc, #288]	@ (8011254 <StartIOTask+0x128>)
 8011132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011136:	900c      	str	r0, [sp, #48]	@ 0x30
 8011138:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 801113c:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 8011140:	f103 0408 	add.w	r4, r3, #8
 8011144:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011148:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 801114c:	3314      	adds	r3, #20
 801114e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011152:	9007      	str	r0, [sp, #28]
 8011154:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8011158:	ab04      	add	r3, sp, #16
 801115a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801115e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 8011162:	e06f      	b.n	8011244 <StartIOTask+0x118>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011164:	2300      	movs	r3, #0
 8011166:	461a      	mov	r2, r3
 8011168:	a901      	add	r1, sp, #4
 801116a:	483b      	ldr	r0, [pc, #236]	@ (8011258 <StartIOTask+0x12c>)
 801116c:	6800      	ldr	r0, [r0, #0]
 801116e:	f005 fee6 	bl	8016f3e <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011172:	2400      	movs	r4, #0
 8011174:	e00e      	b.n	8011194 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011176:	2200      	movs	r2, #0
 8011178:	ab0e      	add	r3, sp, #56	@ 0x38
 801117a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801117e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011182:	ab0e      	add	r3, sp, #56	@ 0x38
 8011184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011188:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801118c:	f003 fe5d 	bl	8014e4a <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011190:	3401      	adds	r4, #1
 8011192:	b2e4      	uxtb	r4, r4
 8011194:	2c02      	cmp	r4, #2
 8011196:	d85b      	bhi.n	8011250 <StartIOTask+0x124>
		     if (pinOutputs_w[i]) {
 8011198:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801119c:	446b      	add	r3, sp
 801119e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0e7      	beq.n	8011176 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 80111a6:	2201      	movs	r2, #1
 80111a8:	ab0e      	add	r3, sp, #56	@ 0x38
 80111aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80111ae:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 80111b2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111b8:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111bc:	f003 fe45 	bl	8014e4a <HAL_GPIO_WritePin>
 80111c0:	e7e6      	b.n	8011190 <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80111c2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111c4:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80111c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111cc:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 80111d0:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111d4:	f003 fe32 	bl	8014e3c <HAL_GPIO_ReadPin>
 80111d8:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80111dc:	446b      	add	r3, sp
 80111de:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80111e2:	3401      	adds	r4, #1
 80111e4:	b2e4      	uxtb	r4, r4
 80111e6:	2c02      	cmp	r4, #2
 80111e8:	d9eb      	bls.n	80111c2 <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 80111ea:	4c1c      	ldr	r4, [pc, #112]	@ (801125c <StartIOTask+0x130>)
 80111ec:	6820      	ldr	r0, [r4, #0]
 80111ee:	f005 fef4 	bl	8016fda <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 80111f2:	2300      	movs	r3, #0
 80111f4:	461a      	mov	r2, r3
 80111f6:	a902      	add	r1, sp, #8
 80111f8:	6820      	ldr	r0, [r4, #0]
 80111fa:	f005 fe5e 	bl	8016eba <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 80111fe:	2400      	movs	r4, #0
 8011200:	e011      	b.n	8011226 <StartIOTask+0xfa>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 8011202:	ab0e      	add	r3, sp, #56	@ 0x38
 8011204:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011208:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801120c:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 8011210:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8011214:	f003 fe12 	bl	8014e3c <HAL_GPIO_ReadPin>
 8011218:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801121c:	446b      	add	r3, sp
 801121e:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011222:	3401      	adds	r4, #1
 8011224:	b2e4      	uxtb	r4, r4
 8011226:	2c02      	cmp	r4, #2
 8011228:	d9eb      	bls.n	8011202 <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 801122a:	4c0d      	ldr	r4, [pc, #52]	@ (8011260 <StartIOTask+0x134>)
 801122c:	6820      	ldr	r0, [r4, #0]
 801122e:	f005 fed4 	bl	8016fda <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 8011232:	2300      	movs	r3, #0
 8011234:	461a      	mov	r2, r3
 8011236:	a903      	add	r1, sp, #12
 8011238:	6820      	ldr	r0, [r4, #0]
 801123a:	f005 fe3e 	bl	8016eba <osMessageQueuePut>
    osDelay(1);
 801123e:	2001      	movs	r0, #1
 8011240:	f005 fd43 	bl	8016cca <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8011244:	4b04      	ldr	r3, [pc, #16]	@ (8011258 <StartIOTask+0x12c>)
 8011246:	6818      	ldr	r0, [r3, #0]
 8011248:	f005 feba 	bl	8016fc0 <osMessageQueueGetCount>
 801124c:	2800      	cmp	r0, #0
 801124e:	d189      	bne.n	8011164 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011250:	2400      	movs	r4, #0
 8011252:	e7c8      	b.n	80111e6 <StartIOTask+0xba>
 8011254:	08032df8 	.word	0x08032df8
 8011258:	20000814 	.word	0x20000814
 801125c:	20000818 	.word	0x20000818
 8011260:	2000081c 	.word	0x2000081c

08011264 <add_log_mess_to_q>:
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}

void add_log_mess_to_q(struct log_message mess){
 8011264:	b084      	sub	sp, #16
 8011266:	b508      	push	{r3, lr}
 8011268:	f10d 0c08 	add.w	ip, sp, #8
 801126c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011270:	2300      	movs	r3, #0
 8011272:	461a      	mov	r2, r3
 8011274:	4661      	mov	r1, ip
 8011276:	4804      	ldr	r0, [pc, #16]	@ (8011288 <add_log_mess_to_q+0x24>)
 8011278:	6800      	ldr	r0, [r0, #0]
 801127a:	f005 fe1e 	bl	8016eba <osMessageQueuePut>

}
 801127e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011282:	b004      	add	sp, #16
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	2000080c 	.word	0x2000080c

0801128c <StartDisplayTask>:
{
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	b08a      	sub	sp, #40	@ 0x28
	osDelay(1000);//
 8011290:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011294:	f005 fd19 	bl	8016cca <osDelay>
	SSD1306_Init (); // initialise the display
 8011298:	f005 fbb0 	bl	80169fc <SSD1306_Init>
	osDelay(100);//
 801129c:	2064      	movs	r0, #100	@ 0x64
 801129e:	f005 fd14 	bl	8016cca <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80112a2:	2100      	movs	r1, #0
 80112a4:	2001      	movs	r0, #1
 80112a6:	f005 fb0d 	bl	80168c4 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80112aa:	2000      	movs	r0, #0
 80112ac:	f005 face 	bl	801684c <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112b0:	4c48      	ldr	r4, [pc, #288]	@ (80113d4 <StartDisplayTask+0x148>)
 80112b2:	2201      	movs	r2, #1
 80112b4:	4621      	mov	r1, r4
 80112b6:	4848      	ldr	r0, [pc, #288]	@ (80113d8 <StartDisplayTask+0x14c>)
 80112b8:	f005 fb58 	bl	801696c <SSD1306_Puts>
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112bc:	2201      	movs	r2, #1
 80112be:	4621      	mov	r1, r4
 80112c0:	4846      	ldr	r0, [pc, #280]	@ (80113dc <StartDisplayTask+0x150>)
 80112c2:	f005 fb53 	bl	801696c <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112c6:	210b      	movs	r1, #11
 80112c8:	2001      	movs	r0, #1
 80112ca:	f005 fafb 	bl	80168c4 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112ce:	2201      	movs	r2, #1
 80112d0:	4621      	mov	r1, r4
 80112d2:	4843      	ldr	r0, [pc, #268]	@ (80113e0 <StartDisplayTask+0x154>)
 80112d4:	f005 fb4a 	bl	801696c <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112d8:	2116      	movs	r1, #22
 80112da:	2001      	movs	r0, #1
 80112dc:	f005 faf2 	bl	80168c4 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112e0:	2201      	movs	r2, #1
 80112e2:	4621      	mov	r1, r4
 80112e4:	483f      	ldr	r0, [pc, #252]	@ (80113e4 <StartDisplayTask+0x158>)
 80112e6:	f005 fb41 	bl	801696c <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80112ea:	2121      	movs	r1, #33	@ 0x21
 80112ec:	2001      	movs	r0, #1
 80112ee:	f005 fae9 	bl	80168c4 <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 80112f2:	4b3d      	ldr	r3, [pc, #244]	@ (80113e8 <StartDisplayTask+0x15c>)
 80112f4:	6859      	ldr	r1, [r3, #4]
 80112f6:	780a      	ldrb	r2, [r1, #0]
 80112f8:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 80112fa:	7888      	ldrb	r0, [r1, #2]
 80112fc:	78cd      	ldrb	r5, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 80112fe:	790e      	ldrb	r6, [r1, #4]
 8011300:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011302:	9103      	str	r1, [sp, #12]
 8011304:	9602      	str	r6, [sp, #8]
 8011306:	9501      	str	r5, [sp, #4]
 8011308:	9000      	str	r0, [sp, #0]
 801130a:	4938      	ldr	r1, [pc, #224]	@ (80113ec <StartDisplayTask+0x160>)
 801130c:	a805      	add	r0, sp, #20
 801130e:	f018 f825 	bl	802935c <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011312:	2201      	movs	r2, #1
 8011314:	4621      	mov	r1, r4
 8011316:	a805      	add	r0, sp, #20
 8011318:	f005 fb28 	bl	801696c <SSD1306_Puts>
    SSD1306_UpdateScreen();
 801131c:	f005 fc18 	bl	8016b50 <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 8011320:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011324:	f007 f83c 	bl	80183a0 <vTaskDelay>
    int i=0;
 8011328:	2500      	movs	r5, #0
 801132a:	e003      	b.n	8011334 <StartDisplayTask+0xa8>
		osDelay(1000);
 801132c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011330:	f005 fccb 	bl	8016cca <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 8011334:	2100      	movs	r1, #0
 8011336:	2001      	movs	r0, #1
 8011338:	f005 fac4 	bl	80168c4 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 801133c:	2000      	movs	r0, #0
 801133e:	f005 fa85 	bl	801684c <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011342:	4c24      	ldr	r4, [pc, #144]	@ (80113d4 <StartDisplayTask+0x148>)
 8011344:	2201      	movs	r2, #1
 8011346:	4621      	mov	r1, r4
 8011348:	4829      	ldr	r0, [pc, #164]	@ (80113f0 <StartDisplayTask+0x164>)
 801134a:	f005 fb0f 	bl	801696c <SSD1306_Puts>
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 801134e:	4b26      	ldr	r3, [pc, #152]	@ (80113e8 <StartDisplayTask+0x15c>)
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011354:	0e13      	lsrs	r3, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 8011356:	9301      	str	r3, [sp, #4]
 8011358:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011362:	b2d2      	uxtb	r2, r2
 8011364:	4923      	ldr	r1, [pc, #140]	@ (80113f4 <StartDisplayTask+0x168>)
 8011366:	a805      	add	r0, sp, #20
 8011368:	f017 fff8 	bl	802935c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801136c:	2201      	movs	r2, #1
 801136e:	4621      	mov	r1, r4
 8011370:	a805      	add	r0, sp, #20
 8011372:	f005 fafb 	bl	801696c <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 8011376:	210a      	movs	r1, #10
 8011378:	2001      	movs	r0, #1
 801137a:	f005 faa3 	bl	80168c4 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 801137e:	2201      	movs	r2, #1
 8011380:	4621      	mov	r1, r4
 8011382:	481d      	ldr	r0, [pc, #116]	@ (80113f8 <StartDisplayTask+0x16c>)
 8011384:	f005 faf2 	bl	801696c <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 8011388:	3501      	adds	r5, #1
 801138a:	462a      	mov	r2, r5
 801138c:	491b      	ldr	r1, [pc, #108]	@ (80113fc <StartDisplayTask+0x170>)
 801138e:	a805      	add	r0, sp, #20
 8011390:	f017 ffe4 	bl	802935c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011394:	2201      	movs	r2, #1
 8011396:	4621      	mov	r1, r4
 8011398:	a805      	add	r0, sp, #20
 801139a:	f005 fae7 	bl	801696c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 801139e:	f005 fbd7 	bl	8016b50 <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 80113a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113a6:	2201      	movs	r2, #1
 80113a8:	2178      	movs	r1, #120	@ 0x78
 80113aa:	4815      	ldr	r0, [pc, #84]	@ (8011400 <StartDisplayTask+0x174>)
 80113ac:	f004 f898 	bl	80154e0 <HAL_I2C_IsDeviceReady>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d0bb      	beq.n	801132c <StartDisplayTask+0xa0>
			HAL_I2C_DeInit(&hi2c1);
 80113b4:	4812      	ldr	r0, [pc, #72]	@ (8011400 <StartDisplayTask+0x174>)
 80113b6:	f003 ffbd 	bl	8015334 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 80113ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113be:	f006 ffef 	bl	80183a0 <vTaskDelay>
			MX_I2C1_Init();
 80113c2:	f000 fbc9 	bl	8011b58 <MX_I2C1_Init>
			vTaskDelay(1000);
 80113c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113ca:	f006 ffe9 	bl	80183a0 <vTaskDelay>
			SSD1306_Init ();
 80113ce:	f005 fb15 	bl	80169fc <SSD1306_Init>
 80113d2:	e7e6      	b.n	80113a2 <StartDisplayTask+0x116>
 80113d4:	20000088 	.word	0x20000088
 80113d8:	08033074 	.word	0x08033074
 80113dc:	08033080 	.word	0x08033080
 80113e0:	0803308c 	.word	0x0803308c
 80113e4:	08033098 	.word	0x08033098
 80113e8:	20000834 	.word	0x20000834
 80113ec:	080330a0 	.word	0x080330a0
 80113f0:	080330c0 	.word	0x080330c0
 80113f4:	080330c4 	.word	0x080330c4
 80113f8:	080330d4 	.word	0x080330d4
 80113fc:	080379f0 	.word	0x080379f0
 8011400:	2000083c 	.word	0x2000083c

08011404 <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011404:	b508      	push	{r3, lr}
	switch (param_type) {
 8011406:	2901      	cmp	r1, #1
 8011408:	d014      	beq.n	8011434 <RW_parameters_from_queue+0x30>
 801140a:	2902      	cmp	r1, #2
 801140c:	d01a      	beq.n	8011444 <RW_parameters_from_queue+0x40>
 801140e:	b101      	cbz	r1, 8011412 <RW_parameters_from_queue+0xe>
}
 8011410:	bd08      	pop	{r3, pc}
			if (direction == S_READ){
 8011412:	b14a      	cbz	r2, 8011428 <RW_parameters_from_queue+0x24>
			}else if (direction == S_WRITE){
 8011414:	2a01      	cmp	r2, #1
 8011416:	d1fb      	bne.n	8011410 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(mqttQHandle, pr);
 8011418:	2302      	movs	r3, #2
 801141a:	2200      	movs	r2, #0
 801141c:	4601      	mov	r1, r0
 801141e:	4812      	ldr	r0, [pc, #72]	@ (8011468 <RW_parameters_from_queue+0x64>)
 8011420:	6800      	ldr	r0, [r0, #0]
 8011422:	f005 ffb1 	bl	8017388 <xQueueGenericSend>
 8011426:	e7f3      	b.n	8011410 <RW_parameters_from_queue+0xc>
				xQueuePeek(mqttQHandle, pr, 0);
 8011428:	4601      	mov	r1, r0
 801142a:	4b0f      	ldr	r3, [pc, #60]	@ (8011468 <RW_parameters_from_queue+0x64>)
 801142c:	6818      	ldr	r0, [r3, #0]
 801142e:	f006 fabe 	bl	80179ae <xQueuePeek>
 8011432:	e7ed      	b.n	8011410 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011434:	2a00      	cmp	r2, #0
 8011436:	d1eb      	bne.n	8011410 <RW_parameters_from_queue+0xc>
				xQueuePeek(inputReadQHandle, input, 0);
 8011438:	4601      	mov	r1, r0
 801143a:	4b0c      	ldr	r3, [pc, #48]	@ (801146c <RW_parameters_from_queue+0x68>)
 801143c:	6818      	ldr	r0, [r3, #0]
 801143e:	f006 fab6 	bl	80179ae <xQueuePeek>
 8011442:	e7e5      	b.n	8011410 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011444:	b14a      	cbz	r2, 801145a <RW_parameters_from_queue+0x56>
			}else if(direction == S_WRITE){
 8011446:	2a01      	cmp	r2, #1
 8011448:	d1e2      	bne.n	8011410 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(outputWriteQHandle, output);
 801144a:	2302      	movs	r3, #2
 801144c:	2200      	movs	r2, #0
 801144e:	4601      	mov	r1, r0
 8011450:	4807      	ldr	r0, [pc, #28]	@ (8011470 <RW_parameters_from_queue+0x6c>)
 8011452:	6800      	ldr	r0, [r0, #0]
 8011454:	f005 ff98 	bl	8017388 <xQueueGenericSend>
}
 8011458:	e7da      	b.n	8011410 <RW_parameters_from_queue+0xc>
				xQueuePeek(outputReadQHandle, output, 0);
 801145a:	4601      	mov	r1, r0
 801145c:	4b05      	ldr	r3, [pc, #20]	@ (8011474 <RW_parameters_from_queue+0x70>)
 801145e:	6818      	ldr	r0, [r3, #0]
 8011460:	f006 faa5 	bl	80179ae <xQueuePeek>
 8011464:	e7d4      	b.n	8011410 <RW_parameters_from_queue+0xc>
 8011466:	bf00      	nop
 8011468:	20000810 	.word	0x20000810
 801146c:	2000081c 	.word	0x2000081c
 8011470:	20000814 	.word	0x20000814
 8011474:	20000818 	.word	0x20000818

08011478 <StartSettingsTask>:
{
 8011478:	b510      	push	{r4, lr}
 801147a:	b0b4      	sub	sp, #208	@ 0xd0
	size_t  f_size = 0;
 801147c:	2300      	movs	r3, #0
 801147e:	9333      	str	r3, [sp, #204]	@ 0xcc
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 8011480:	4b3b      	ldr	r3, [pc, #236]	@ (8011570 <StartSettingsTask+0xf8>)
 8011482:	4a3c      	ldr	r2, [pc, #240]	@ (8011574 <StartSettingsTask+0xfc>)
 8011484:	493c      	ldr	r1, [pc, #240]	@ (8011578 <StartSettingsTask+0x100>)
 8011486:	483d      	ldr	r0, [pc, #244]	@ (801157c <StartSettingsTask+0x104>)
 8011488:	f003 f872 	bl	8014570 <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 801148c:	493c      	ldr	r1, [pc, #240]	@ (8011580 <StartSettingsTask+0x108>)
 801148e:	483d      	ldr	r0, [pc, #244]	@ (8011584 <StartSettingsTask+0x10c>)
 8011490:	f008 f84e 	bl	8019530 <lfs_fs_ll_init>
 8011494:	2800      	cmp	r0, #0
 8011496:	db31      	blt.n	80114fc <StartSettingsTask+0x84>
  mg_fs_lfs_mkdir("/web");
 8011498:	483b      	ldr	r0, [pc, #236]	@ (8011588 <StartSettingsTask+0x110>)
 801149a:	f008 f83d 	bl	8019518 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 801149e:	4c3b      	ldr	r4, [pc, #236]	@ (801158c <StartSettingsTask+0x114>)
 80114a0:	4620      	mov	r0, r4
 80114a2:	f008 f82d 	bl	8019500 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 80114a6:	483a      	ldr	r0, [pc, #232]	@ (8011590 <StartSettingsTask+0x118>)
 80114a8:	f008 f82a 	bl	8019500 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 80114ac:	4620      	mov	r0, r4
 80114ae:	f008 f833 	bl	8019518 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 80114b2:	4838      	ldr	r0, [pc, #224]	@ (8011594 <StartSettingsTask+0x11c>)
 80114b4:	f008 f830 	bl	8019518 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 80114b8:	4837      	ldr	r0, [pc, #220]	@ (8011598 <StartSettingsTask+0x120>)
 80114ba:	f008 f82d 	bl	8019518 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 80114be:	4837      	ldr	r0, [pc, #220]	@ (801159c <StartSettingsTask+0x124>)
 80114c0:	f008 f82a 	bl	8019518 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 80114c4:	2200      	movs	r2, #0
 80114c6:	a933      	add	r1, sp, #204	@ 0xcc
 80114c8:	4835      	ldr	r0, [pc, #212]	@ (80115a0 <StartSettingsTask+0x128>)
 80114ca:	f007 ff6d 	bl	80193a8 <mg_fs_lfs_status>
 80114ce:	b1c0      	cbz	r0, 8011502 <StartSettingsTask+0x8a>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 80114d0:	2101      	movs	r1, #1
 80114d2:	4833      	ldr	r0, [pc, #204]	@ (80115a0 <StartSettingsTask+0x128>)
 80114d4:	f007 ffa6 	bl	8019424 <mg_fs_lfs_open>
 80114d8:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 80114da:	22c6      	movs	r2, #198	@ 0xc6
 80114dc:	a901      	add	r1, sp, #4
 80114de:	f007 ffd1 	bl	8019484 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 80114e2:	4620      	mov	r0, r4
 80114e4:	f007 ffc2 	bl	801946c <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 80114e8:	2200      	movs	r2, #0
 80114ea:	f88d 2004 	strb.w	r2, [sp, #4]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80114ee:	2302      	movs	r3, #2
 80114f0:	a901      	add	r1, sp, #4
 80114f2:	482c      	ldr	r0, [pc, #176]	@ (80115a4 <StartSettingsTask+0x12c>)
 80114f4:	6800      	ldr	r0, [r0, #0]
 80114f6:	f005 ff47 	bl	8017388 <xQueueGenericSend>
 80114fa:	e013      	b.n	8011524 <StartSettingsTask+0xac>
	  HAL_NVIC_SystemReset(); //TODO fo Release uncomment
 80114fc:	f003 fb2e 	bl	8014b5c <HAL_NVIC_SystemReset>
 8011500:	e7ca      	b.n	8011498 <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 8011502:	22c6      	movs	r2, #198	@ 0xc6
 8011504:	2100      	movs	r1, #0
 8011506:	a801      	add	r0, sp, #4
 8011508:	f018 faea 	bl	8029ae0 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 801150c:	2302      	movs	r3, #2
 801150e:	2200      	movs	r2, #0
 8011510:	a901      	add	r1, sp, #4
 8011512:	4824      	ldr	r0, [pc, #144]	@ (80115a4 <StartSettingsTask+0x12c>)
 8011514:	6800      	ldr	r0, [r0, #0]
 8011516:	f005 ff37 	bl	8017388 <xQueueGenericSend>
 801151a:	e003      	b.n	8011524 <StartSettingsTask+0xac>
	  osDelay(1000);
 801151c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011520:	f005 fbd3 	bl	8016cca <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 8011524:	2200      	movs	r2, #0
 8011526:	a901      	add	r1, sp, #4
 8011528:	4b1e      	ldr	r3, [pc, #120]	@ (80115a4 <StartSettingsTask+0x12c>)
 801152a:	6818      	ldr	r0, [r3, #0]
 801152c:	f006 fa3f 	bl	80179ae <xQueuePeek>
	  if(mqtt_config.save){
 8011530:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d0f1      	beq.n	801151c <StartSettingsTask+0xa4>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 8011538:	4c19      	ldr	r4, [pc, #100]	@ (80115a0 <StartSettingsTask+0x128>)
 801153a:	4620      	mov	r0, r4
 801153c:	f007 ffe0 	bl	8019500 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 8011540:	2102      	movs	r1, #2
 8011542:	4620      	mov	r0, r4
 8011544:	f007 ff6e 	bl	8019424 <mg_fs_lfs_open>
 8011548:	4604      	mov	r4, r0
 801154a:	2800      	cmp	r0, #0
 801154c:	d0e6      	beq.n	801151c <StartSettingsTask+0xa4>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801154e:	22c6      	movs	r2, #198	@ 0xc6
 8011550:	a901      	add	r1, sp, #4
 8011552:	f007 ffa3 	bl	801949c <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 8011556:	4620      	mov	r0, r4
 8011558:	f007 ff88 	bl	801946c <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 801155c:	2200      	movs	r2, #0
 801155e:	f88d 2004 	strb.w	r2, [sp, #4]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011562:	2302      	movs	r3, #2
 8011564:	a901      	add	r1, sp, #4
 8011566:	480f      	ldr	r0, [pc, #60]	@ (80115a4 <StartSettingsTask+0x12c>)
 8011568:	6800      	ldr	r0, [r0, #0]
 801156a:	f005 ff0d 	bl	8017388 <xQueueGenericSend>
 801156e:	e7d5      	b.n	801151c <StartSettingsTask+0xa4>
 8011570:	080116fd 	.word	0x080116fd
 8011574:	08011721 	.word	0x08011721
 8011578:	08011119 	.word	0x08011119
 801157c:	08011105 	.word	0x08011105
 8011580:	0801174d 	.word	0x0801174d
 8011584:	08011739 	.word	0x08011739
 8011588:	080330d8 	.word	0x080330d8
 801158c:	080330e0 	.word	0x080330e0
 8011590:	080330ec 	.word	0x080330ec
 8011594:	080330fc 	.word	0x080330fc
 8011598:	08033108 	.word	0x08033108
 801159c:	08033110 	.word	0x08033110
 80115a0:	08033118 	.word	0x08033118
 80115a4:	20000810 	.word	0x20000810

080115a8 <StartLoggingTask>:
{
 80115a8:	b530      	push	{r4, r5, lr}
 80115aa:	b0d1      	sub	sp, #324	@ 0x144
	osDelay(2000);
 80115ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80115b0:	f005 fb8b 	bl	8016cca <osDelay>
	reg_logging_fn(add_log_mess_to_q);
 80115b4:	483c      	ldr	r0, [pc, #240]	@ (80116a8 <StartLoggingTask+0x100>)
 80115b6:	f000 fb57 	bl	8011c68 <reg_logging_fn>
	logger_set_level(L_INFO);
 80115ba:	2001      	movs	r0, #1
 80115bc:	f000 fb5a 	bl	8011c74 <logger_set_level>
	logging(L_INFO, "Device started...");
 80115c0:	493a      	ldr	r1, [pc, #232]	@ (80116ac <StartLoggingTask+0x104>)
 80115c2:	2001      	movs	r0, #1
 80115c4:	f000 fb5c 	bl	8011c80 <logging>
	uint32_t count = 2000;
 80115c8:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 80115cc:	e048      	b.n	8011660 <StartLoggingTask+0xb8>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 80115ce:	2300      	movs	r3, #0
 80115d0:	461a      	mov	r2, r3
 80115d2:	a907      	add	r1, sp, #28
 80115d4:	4836      	ldr	r0, [pc, #216]	@ (80116b0 <StartLoggingTask+0x108>)
 80115d6:	6800      	ldr	r0, [r0, #0]
 80115d8:	f005 fcb1 	bl	8016f3e <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 80115dc:	2102      	movs	r1, #2
 80115de:	4835      	ldr	r0, [pc, #212]	@ (80116b4 <StartLoggingTask+0x10c>)
 80115e0:	f007 ff20 	bl	8019424 <mg_fs_lfs_open>
 80115e4:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 80115e6:	f89d 211d 	ldrb.w	r2, [sp, #285]	@ 0x11d
 80115ea:	f10d 011d 	add.w	r1, sp, #29
 80115ee:	f007 ff55 	bl	801949c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 80115f2:	4628      	mov	r0, r5
 80115f4:	f007 ff3a 	bl	801946c <mg_fs_lfs_close>
 80115f8:	e038      	b.n	801166c <StartLoggingTask+0xc4>
    	vPortGetHeapStats(&heap_status);
 80115fa:	a848      	add	r0, sp, #288	@ 0x120
 80115fc:	f007 fe2c 	bl	8019258 <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8011600:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8011602:	9304      	str	r3, [sp, #16]
 8011604:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 8011606:	9303      	str	r3, [sp, #12]
 8011608:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 801160a:	9302      	str	r3, [sp, #8]
 801160c:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 801160e:	9301      	str	r3, [sp, #4]
 8011610:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 8011612:	9300      	str	r3, [sp, #0]
 8011614:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8011616:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8011618:	4927      	ldr	r1, [pc, #156]	@ (80116b8 <StartLoggingTask+0x110>)
 801161a:	2001      	movs	r0, #1
 801161c:	f000 fb30 	bl	8011c80 <logging>
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011620:	4c26      	ldr	r4, [pc, #152]	@ (80116bc <StartLoggingTask+0x114>)
 8011622:	6863      	ldr	r3, [r4, #4]
 8011624:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011626:	0e13      	lsrs	r3, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8011628:	9301      	str	r3, [sp, #4]
 801162a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801162e:	9300      	str	r3, [sp, #0]
 8011630:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011634:	b2d2      	uxtb	r2, r2
 8011636:	4922      	ldr	r1, [pc, #136]	@ (80116c0 <StartLoggingTask+0x118>)
 8011638:	2001      	movs	r0, #1
 801163a:	f000 fb21 	bl	8011c80 <logging>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 801163e:	6861      	ldr	r1, [r4, #4]
 8011640:	780a      	ldrb	r2, [r1, #0]
 8011642:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011644:	7888      	ldrb	r0, [r1, #2]
 8011646:	78cc      	ldrb	r4, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011648:	790d      	ldrb	r5, [r1, #4]
 801164a:	7949      	ldrb	r1, [r1, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 801164c:	9103      	str	r1, [sp, #12]
 801164e:	9502      	str	r5, [sp, #8]
 8011650:	9401      	str	r4, [sp, #4]
 8011652:	9000      	str	r0, [sp, #0]
 8011654:	491b      	ldr	r1, [pc, #108]	@ (80116c4 <StartLoggingTask+0x11c>)
 8011656:	2001      	movs	r0, #1
 8011658:	f000 fb12 	bl	8011c80 <logging>
    	count = 0;
 801165c:	2400      	movs	r4, #0
    count ++;
 801165e:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011660:	4b13      	ldr	r3, [pc, #76]	@ (80116b0 <StartLoggingTask+0x108>)
 8011662:	6818      	ldr	r0, [r3, #0]
 8011664:	f005 fcac 	bl	8016fc0 <osMessageQueueGetCount>
 8011668:	2800      	cmp	r0, #0
 801166a:	d1b0      	bne.n	80115ce <StartLoggingTask+0x26>
    osDelay(500);
 801166c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011670:	f005 fb2b 	bl	8016cca <osDelay>
    if (count == 2000){
 8011674:	f5b4 6ffa 	cmp.w	r4, #2000	@ 0x7d0
 8011678:	d1f1      	bne.n	801165e <StartLoggingTask+0xb6>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 801167a:	2200      	movs	r2, #0
 801167c:	a94f      	add	r1, sp, #316	@ 0x13c
 801167e:	480d      	ldr	r0, [pc, #52]	@ (80116b4 <StartLoggingTask+0x10c>)
 8011680:	f007 fe92 	bl	80193a8 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011684:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8011686:	f24c 3350 	movw	r3, #50000	@ 0xc350
 801168a:	429a      	cmp	r2, r3
 801168c:	d9b5      	bls.n	80115fa <StartLoggingTask+0x52>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 801168e:	4c0e      	ldr	r4, [pc, #56]	@ (80116c8 <StartLoggingTask+0x120>)
 8011690:	4620      	mov	r0, r4
 8011692:	f007 ff35 	bl	8019500 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 8011696:	4621      	mov	r1, r4
 8011698:	4806      	ldr	r0, [pc, #24]	@ (80116b4 <StartLoggingTask+0x10c>)
 801169a:	f007 ff25 	bl	80194e8 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 801169e:	490b      	ldr	r1, [pc, #44]	@ (80116cc <StartLoggingTask+0x124>)
 80116a0:	2001      	movs	r0, #1
 80116a2:	f000 faed 	bl	8011c80 <logging>
 80116a6:	e7a8      	b.n	80115fa <StartLoggingTask+0x52>
 80116a8:	08011265 	.word	0x08011265
 80116ac:	0803312c 	.word	0x0803312c
 80116b0:	2000080c 	.word	0x2000080c
 80116b4:	08033140 	.word	0x08033140
 80116b8:	08033174 	.word	0x08033174
 80116bc:	20000834 	.word	0x20000834
 80116c0:	08033208 	.word	0x08033208
 80116c4:	08033224 	.word	0x08033224
 80116c8:	08033150 	.word	0x08033150
 80116cc:	08033160 	.word	0x08033160

080116d0 <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 80116d0:	b500      	push	{lr}
 80116d2:	b087      	sub	sp, #28
 80116d4:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 80116d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80116dc:	9300      	str	r3, [sp, #0]
 80116de:	2301      	movs	r3, #1
 80116e0:	f10d 0217 	add.w	r2, sp, #23
 80116e4:	f10d 010f 	add.w	r1, sp, #15
 80116e8:	4803      	ldr	r0, [pc, #12]	@ (80116f8 <EthTxn+0x28>)
 80116ea:	f004 fd4c 	bl	8016186 <HAL_SPI_TransmitReceive>
}
 80116ee:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80116f2:	b007      	add	sp, #28
 80116f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80116f8:	20000894 	.word	0x20000894

080116fc <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 80116fc:	b500      	push	{lr}
 80116fe:	b083      	sub	sp, #12
 8011700:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011708:	2201      	movs	r2, #1
 801170a:	f10d 0107 	add.w	r1, sp, #7
 801170e:	4803      	ldr	r0, [pc, #12]	@ (801171c <FlashSPIsendByte+0x20>)
 8011710:	f004 fc57 	bl	8015fc2 <HAL_SPI_Transmit>
}
 8011714:	b003      	add	sp, #12
 8011716:	f85d fb04 	ldr.w	pc, [sp], #4
 801171a:	bf00      	nop
 801171c:	200008ec 	.word	0x200008ec

08011720 <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 8011720:	b508      	push	{r3, lr}
 8011722:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011724:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011728:	4601      	mov	r1, r0
 801172a:	4802      	ldr	r0, [pc, #8]	@ (8011734 <FlashSPIrecvBuff+0x14>)
 801172c:	f004 fe55 	bl	80163da <HAL_SPI_Receive>
}
 8011730:	bd08      	pop	{r3, pc}
 8011732:	bf00      	nop
 8011734:	200008ec 	.word	0x200008ec

08011738 <FS_Lock>:
void FS_Lock(void * param){
 8011738:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 801173a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801173e:	4b02      	ldr	r3, [pc, #8]	@ (8011748 <FS_Lock+0x10>)
 8011740:	6818      	ldr	r0, [r3, #0]
 8011742:	f005 fb19 	bl	8016d78 <osMutexAcquire>
}
 8011746:	bd08      	pop	{r3, pc}
 8011748:	20000804 	.word	0x20000804

0801174c <FS_Unlock>:
void FS_Unlock(void * param){
 801174c:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 801174e:	4b02      	ldr	r3, [pc, #8]	@ (8011758 <FS_Unlock+0xc>)
 8011750:	6818      	ldr	r0, [r3, #0]
 8011752:	f005 fb40 	bl	8016dd6 <osMutexRelease>
}
 8011756:	bd08      	pop	{r3, pc}
 8011758:	20000804 	.word	0x20000804

0801175c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 801175c:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 801175e:	4829      	ldr	r0, [pc, #164]	@ (8011804 <MX_FREERTOS_Init+0xa8>)
 8011760:	f005 fac1 	bl	8016ce6 <osMutexNew>
 8011764:	4b28      	ldr	r3, [pc, #160]	@ (8011808 <MX_FREERTOS_Init+0xac>)
 8011766:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 8011768:	4828      	ldr	r0, [pc, #160]	@ (801180c <MX_FREERTOS_Init+0xb0>)
 801176a:	f005 fabc 	bl	8016ce6 <osMutexNew>
 801176e:	4b28      	ldr	r3, [pc, #160]	@ (8011810 <MX_FREERTOS_Init+0xb4>)
 8011770:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 8011772:	4a28      	ldr	r2, [pc, #160]	@ (8011814 <MX_FREERTOS_Init+0xb8>)
 8011774:	2103      	movs	r1, #3
 8011776:	2001      	movs	r0, #1
 8011778:	f005 fb54 	bl	8016e24 <osMessageQueueNew>
 801177c:	4b26      	ldr	r3, [pc, #152]	@ (8011818 <MX_FREERTOS_Init+0xbc>)
 801177e:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8011780:	4a26      	ldr	r2, [pc, #152]	@ (801181c <MX_FREERTOS_Init+0xc0>)
 8011782:	2103      	movs	r1, #3
 8011784:	2001      	movs	r0, #1
 8011786:	f005 fb4d 	bl	8016e24 <osMessageQueueNew>
 801178a:	4b25      	ldr	r3, [pc, #148]	@ (8011820 <MX_FREERTOS_Init+0xc4>)
 801178c:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 801178e:	4a25      	ldr	r2, [pc, #148]	@ (8011824 <MX_FREERTOS_Init+0xc8>)
 8011790:	2103      	movs	r1, #3
 8011792:	2001      	movs	r0, #1
 8011794:	f005 fb46 	bl	8016e24 <osMessageQueueNew>
 8011798:	4b23      	ldr	r3, [pc, #140]	@ (8011828 <MX_FREERTOS_Init+0xcc>)
 801179a:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 801179c:	4a23      	ldr	r2, [pc, #140]	@ (801182c <MX_FREERTOS_Init+0xd0>)
 801179e:	21c6      	movs	r1, #198	@ 0xc6
 80117a0:	2001      	movs	r0, #1
 80117a2:	f005 fb3f 	bl	8016e24 <osMessageQueueNew>
 80117a6:	4b22      	ldr	r3, [pc, #136]	@ (8011830 <MX_FREERTOS_Init+0xd4>)
 80117a8:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 80117aa:	4a22      	ldr	r2, [pc, #136]	@ (8011834 <MX_FREERTOS_Init+0xd8>)
 80117ac:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80117b0:	200f      	movs	r0, #15
 80117b2:	f005 fb37 	bl	8016e24 <osMessageQueueNew>
 80117b6:	4b20      	ldr	r3, [pc, #128]	@ (8011838 <MX_FREERTOS_Init+0xdc>)
 80117b8:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 80117ba:	4a20      	ldr	r2, [pc, #128]	@ (801183c <MX_FREERTOS_Init+0xe0>)
 80117bc:	2100      	movs	r1, #0
 80117be:	4820      	ldr	r0, [pc, #128]	@ (8011840 <MX_FREERTOS_Init+0xe4>)
 80117c0:	f005 fa24 	bl	8016c0c <osThreadNew>
 80117c4:	4b1f      	ldr	r3, [pc, #124]	@ (8011844 <MX_FREERTOS_Init+0xe8>)
 80117c6:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 80117c8:	4a1f      	ldr	r2, [pc, #124]	@ (8011848 <MX_FREERTOS_Init+0xec>)
 80117ca:	2100      	movs	r1, #0
 80117cc:	481f      	ldr	r0, [pc, #124]	@ (801184c <MX_FREERTOS_Init+0xf0>)
 80117ce:	f005 fa1d 	bl	8016c0c <osThreadNew>
 80117d2:	4b1f      	ldr	r3, [pc, #124]	@ (8011850 <MX_FREERTOS_Init+0xf4>)
 80117d4:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 80117d6:	4a1f      	ldr	r2, [pc, #124]	@ (8011854 <MX_FREERTOS_Init+0xf8>)
 80117d8:	2100      	movs	r1, #0
 80117da:	481f      	ldr	r0, [pc, #124]	@ (8011858 <MX_FREERTOS_Init+0xfc>)
 80117dc:	f005 fa16 	bl	8016c0c <osThreadNew>
 80117e0:	4b1e      	ldr	r3, [pc, #120]	@ (801185c <MX_FREERTOS_Init+0x100>)
 80117e2:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 80117e4:	4a1e      	ldr	r2, [pc, #120]	@ (8011860 <MX_FREERTOS_Init+0x104>)
 80117e6:	2100      	movs	r1, #0
 80117e8:	481e      	ldr	r0, [pc, #120]	@ (8011864 <MX_FREERTOS_Init+0x108>)
 80117ea:	f005 fa0f 	bl	8016c0c <osThreadNew>
 80117ee:	4b1e      	ldr	r3, [pc, #120]	@ (8011868 <MX_FREERTOS_Init+0x10c>)
 80117f0:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 80117f2:	4a1e      	ldr	r2, [pc, #120]	@ (801186c <MX_FREERTOS_Init+0x110>)
 80117f4:	2100      	movs	r1, #0
 80117f6:	481e      	ldr	r0, [pc, #120]	@ (8011870 <MX_FREERTOS_Init+0x114>)
 80117f8:	f005 fa08 	bl	8016c0c <osThreadNew>
 80117fc:	4b1d      	ldr	r3, [pc, #116]	@ (8011874 <MX_FREERTOS_Init+0x118>)
 80117fe:	6018      	str	r0, [r3, #0]
}
 8011800:	bd08      	pop	{r3, pc}
 8011802:	bf00      	nop
 8011804:	08033328 	.word	0x08033328
 8011808:	20000808 	.word	0x20000808
 801180c:	08033318 	.word	0x08033318
 8011810:	20000804 	.word	0x20000804
 8011814:	08033398 	.word	0x08033398
 8011818:	2000081c 	.word	0x2000081c
 801181c:	08033380 	.word	0x08033380
 8011820:	20000818 	.word	0x20000818
 8011824:	08033368 	.word	0x08033368
 8011828:	20000814 	.word	0x20000814
 801182c:	08033350 	.word	0x08033350
 8011830:	20000810 	.word	0x20000810
 8011834:	08033338 	.word	0x08033338
 8011838:	2000080c 	.word	0x2000080c
 801183c:	08033440 	.word	0x08033440
 8011840:	080118a1 	.word	0x080118a1
 8011844:	20000830 	.word	0x20000830
 8011848:	0803341c 	.word	0x0803341c
 801184c:	0801112d 	.word	0x0801112d
 8011850:	2000082c 	.word	0x2000082c
 8011854:	080333f8 	.word	0x080333f8
 8011858:	0801128d 	.word	0x0801128d
 801185c:	20000828 	.word	0x20000828
 8011860:	080333d4 	.word	0x080333d4
 8011864:	08011479 	.word	0x08011479
 8011868:	20000824 	.word	0x20000824
 801186c:	080333b0 	.word	0x080333b0
 8011870:	080115a9 	.word	0x080115a9
 8011874:	20000820 	.word	0x20000820

08011878 <EthResetBegin>:
void EthResetBegin(void){
 8011878:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 801187a:	2200      	movs	r2, #0
 801187c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011880:	4801      	ldr	r0, [pc, #4]	@ (8011888 <EthResetBegin+0x10>)
 8011882:	f003 fae2 	bl	8014e4a <HAL_GPIO_WritePin>
}
 8011886:	bd08      	pop	{r3, pc}
 8011888:	40020000 	.word	0x40020000

0801188c <EthResetEnd>:
void EthResetEnd(void){
 801188c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 801188e:	2201      	movs	r2, #1
 8011890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011894:	4801      	ldr	r0, [pc, #4]	@ (801189c <EthResetEnd+0x10>)
 8011896:	f003 fad8 	bl	8014e4a <HAL_GPIO_WritePin>
}
 801189a:	bd08      	pop	{r3, pc}
 801189c:	40020000 	.word	0x40020000

080118a0 <StartEthTask>:
{
 80118a0:	b530      	push	{r4, r5, lr}
 80118a2:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 80118a4:	ad22      	add	r5, sp, #136	@ 0x88
 80118a6:	4b5d      	ldr	r3, [pc, #372]	@ (8011a1c <StartEthTask+0x17c>)
 80118a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80118aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 80118ae:	ac02      	add	r4, sp, #8
 80118b0:	2280      	movs	r2, #128	@ 0x80
 80118b2:	2100      	movs	r1, #0
 80118b4:	4620      	mov	r0, r4
 80118b6:	f018 f913 	bl	8029ae0 <memset>
 80118ba:	2340      	movs	r3, #64	@ 0x40
 80118bc:	f88d 3008 	strb.w	r3, [sp, #8]
 80118c0:	2322      	movs	r3, #34	@ 0x22
 80118c2:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 80118c6:	4b56      	ldr	r3, [pc, #344]	@ (8011a20 <StartEthTask+0x180>)
 80118c8:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 80118ca:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 80118ce:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 80118d0:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 80118d4:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 80118d6:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 80118da:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 80118dc:	f88d 300d 	strb.w	r3, [sp, #13]
 80118e0:	2301      	movs	r3, #1
 80118e2:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 80118e6:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80118ea:	4b4e      	ldr	r3, [pc, #312]	@ (8011a24 <StartEthTask+0x184>)
 80118ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80118ee:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 80118f0:	4b4d      	ldr	r3, [pc, #308]	@ (8011a28 <StartEthTask+0x188>)
 80118f2:	a858      	add	r0, sp, #352	@ 0x160
 80118f4:	6018      	str	r0, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 80118f6:	605c      	str	r4, [r3, #4]
  mg_mgr_init(&mgr);        // Mongoose event manager
 80118f8:	f00f f8c8 	bl	8020a8c <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 80118fc:	4b4b      	ldr	r3, [pc, #300]	@ (8011a2c <StartEthTask+0x18c>)
 80118fe:	2203      	movs	r2, #3
 8011900:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011902:	f001 fc1f 	bl	8013144 <dash_hdl>
 8011906:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011908:	e00f      	b.n	801192a <StartEthTask+0x8a>
	  EthResetBegin();
 801190a:	f7ff ffb5 	bl	8011878 <EthResetBegin>
	  osDelay(500);
 801190e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011912:	f005 f9da 	bl	8016cca <osDelay>
	  EthResetEnd();
 8011916:	f7ff ffb9 	bl	801188c <EthResetEnd>
	  osDelay(2000);
 801191a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 801191e:	f005 f9d4 	bl	8016cca <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011922:	a902      	add	r1, sp, #8
 8011924:	a858      	add	r0, sp, #352	@ 0x160
 8011926:	f014 fafd 	bl	8025f24 <mg_tcpip_init>
  while(mif.mtu == 0){
 801192a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801192e:	2b00      	cmp	r3, #0
 8011930:	d0eb      	beq.n	801190a <StartEthTask+0x6a>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011932:	2106      	movs	r1, #6
 8011934:	a802      	add	r0, sp, #8
 8011936:	f002 f827 	bl	8013988 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 801193a:	483d      	ldr	r0, [pc, #244]	@ (8011a30 <StartEthTask+0x190>)
 801193c:	f001 fc06 	bl	801314c <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011940:	4b39      	ldr	r3, [pc, #228]	@ (8011a28 <StartEthTask+0x188>)
 8011942:	4622      	mov	r2, r4
 8011944:	493b      	ldr	r1, [pc, #236]	@ (8011a34 <StartEthTask+0x194>)
 8011946:	a858      	add	r0, sp, #352	@ 0x160
 8011948:	f012 fd1a 	bl	8024380 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 801194c:	e006      	b.n	801195c <StartEthTask+0xbc>
    mg_mgr_poll(&mgr, 1);
 801194e:	2101      	movs	r1, #1
 8011950:	a858      	add	r0, sp, #352	@ 0x160
 8011952:	f015 f881 	bl	8026a58 <mg_mgr_poll>
    osDelay(1);
 8011956:	2001      	movs	r0, #1
 8011958:	f005 f9b7 	bl	8016cca <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 801195c:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011960:	2b03      	cmp	r3, #3
 8011962:	d1f4      	bne.n	801194e <StartEthTask+0xae>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011964:	4b30      	ldr	r3, [pc, #192]	@ (8011a28 <StartEthTask+0x188>)
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801196a:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 801196c:	9301      	str	r3, [sp, #4]
 801196e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011972:	9300      	str	r3, [sp, #0]
 8011974:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011978:	b2d2      	uxtb	r2, r2
 801197a:	492f      	ldr	r1, [pc, #188]	@ (8011a38 <StartEthTask+0x198>)
 801197c:	2001      	movs	r0, #1
 801197e:	f000 f97f 	bl	8011c80 <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011982:	2200      	movs	r2, #0
 8011984:	4611      	mov	r1, r2
 8011986:	a826      	add	r0, sp, #152	@ 0x98
 8011988:	f7ff fd3c 	bl	8011404 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 801198c:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011990:	b1d3      	cbz	r3, 80119c8 <StartEthTask+0x128>
	  logging(L_INFO, "MQTT function enabled.");
 8011992:	492a      	ldr	r1, [pc, #168]	@ (8011a3c <StartEthTask+0x19c>)
 8011994:	2001      	movs	r0, #1
 8011996:	f000 f973 	bl	8011c80 <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 801199a:	4b25      	ldr	r3, [pc, #148]	@ (8011a30 <StartEthTask+0x190>)
 801199c:	9301      	str	r3, [sp, #4]
 801199e:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 80119a2:	9300      	str	r3, [sp, #0]
 80119a4:	ab47      	add	r3, sp, #284	@ 0x11c
 80119a6:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 80119aa:	a902      	add	r1, sp, #8
 80119ac:	a858      	add	r0, sp, #352	@ 0x160
 80119ae:	f001 ff29 	bl	8013804 <mqtt_init>
  start_sntp(&mgr);
 80119b2:	a858      	add	r0, sp, #352	@ 0x160
 80119b4:	f002 fbbe 	bl	8014134 <start_sntp>
  ssdp_start_server(&mgr, &mif);
 80119b8:	a902      	add	r1, sp, #8
 80119ba:	a858      	add	r0, sp, #352	@ 0x160
 80119bc:	f002 fd86 	bl	80144cc <ssdp_start_server>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 80119c0:	f006 fbe0 	bl	8018184 <xTaskGetTickCount>
 80119c4:	4605      	mov	r5, r0
 80119c6:	e008      	b.n	80119da <StartEthTask+0x13a>
	  logging(L_INFO, "MQTT function disabled");
 80119c8:	491d      	ldr	r1, [pc, #116]	@ (8011a40 <StartEthTask+0x1a0>)
 80119ca:	2001      	movs	r0, #1
 80119cc:	f000 f958 	bl	8011c80 <logging>
 80119d0:	e7ef      	b.n	80119b2 <StartEthTask+0x112>
      osDelay(1);
 80119d2:	2001      	movs	r0, #1
 80119d4:	f005 f979 	bl	8016cca <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 80119d8:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 80119da:	f006 fbd3 	bl	8018184 <xTaskGetTickCount>
 80119de:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 80119e0:	1b41      	subs	r1, r0, r5
 80119e2:	a858      	add	r0, sp, #352	@ 0x160
 80119e4:	f015 f838 	bl	8026a58 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 80119e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80119ea:	68db      	ldr	r3, [r3, #12]
 80119ec:	a802      	add	r0, sp, #8
 80119ee:	4798      	blx	r3
 80119f0:	2800      	cmp	r0, #0
 80119f2:	d1ee      	bne.n	80119d2 <StartEthTask+0x132>
    	  EthResetBegin(); //enable reset state w5500
 80119f4:	f7ff ff40 	bl	8011878 <EthResetBegin>
    	  osDelay(100);
 80119f8:	2064      	movs	r0, #100	@ 0x64
 80119fa:	f005 f966 	bl	8016cca <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 80119fe:	f7ff ff45 	bl	801188c <EthResetEnd>
    	  osDelay(3000);
 8011a02:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011a06:	f005 f960 	bl	8016cca <osDelay>
    	  mif.driver->init(&mif);
 8011a0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	a802      	add	r0, sp, #8
 8011a10:	4798      	blx	r3
    	  osDelay(7000);
 8011a12:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011a16:	f005 f958 	bl	8016cca <osDelay>
 8011a1a:	e7e5      	b.n	80119e8 <StartEthTask+0x148>
 8011a1c:	08032e14 	.word	0x08032e14
 8011a20:	1fff7a00 	.word	0x1fff7a00
 8011a24:	20000094 	.word	0x20000094
 8011a28:	20000834 	.word	0x20000834
 8011a2c:	200000a8 	.word	0x200000a8
 8011a30:	08011405 	.word	0x08011405
 8011a34:	0803324c 	.word	0x0803324c
 8011a38:	08033208 	.word	0x08033208
 8011a3c:	08033260 	.word	0x08033260
 8011a40:	08033278 	.word	0x08033278

08011a44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a48:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a4a:	2400      	movs	r4, #0
 8011a4c:	9403      	str	r4, [sp, #12]
 8011a4e:	9404      	str	r4, [sp, #16]
 8011a50:	9405      	str	r4, [sp, #20]
 8011a52:	9406      	str	r4, [sp, #24]
 8011a54:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011a56:	9400      	str	r4, [sp, #0]
 8011a58:	4b3c      	ldr	r3, [pc, #240]	@ (8011b4c <MX_GPIO_Init+0x108>)
 8011a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8011a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a64:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8011a68:	9200      	str	r2, [sp, #0]
 8011a6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011a6c:	9401      	str	r4, [sp, #4]
 8011a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a70:	f042 0201 	orr.w	r2, r2, #1
 8011a74:	631a      	str	r2, [r3, #48]	@ 0x30
 8011a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a78:	f002 0201 	and.w	r2, r2, #1
 8011a7c:	9201      	str	r2, [sp, #4]
 8011a7e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011a80:	9402      	str	r4, [sp, #8]
 8011a82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a84:	f042 0202 	orr.w	r2, r2, #2
 8011a88:	631a      	str	r2, [r3, #48]	@ 0x30
 8011a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a8c:	f003 0302 	and.w	r3, r3, #2
 8011a90:	9302      	str	r3, [sp, #8]
 8011a92:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011a94:	4e2e      	ldr	r6, [pc, #184]	@ (8011b50 <MX_GPIO_Init+0x10c>)
 8011a96:	4622      	mov	r2, r4
 8011a98:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	f003 f9d4 	bl	8014e4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8011aa2:	4d2c      	ldr	r5, [pc, #176]	@ (8011b54 <MX_GPIO_Init+0x110>)
 8011aa4:	4622      	mov	r2, r4
 8011aa6:	2107      	movs	r1, #7
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	f003 f9ce 	bl	8014e4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011aae:	2201      	movs	r2, #1
 8011ab0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011ab4:	4628      	mov	r0, r5
 8011ab6:	f003 f9c8 	bl	8014e4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011aba:	2201      	movs	r2, #1
 8011abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	f003 f9c2 	bl	8014e4a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8011ac6:	f04f 0907 	mov.w	r9, #7
 8011aca:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011ace:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011ad0:	f04f 0802 	mov.w	r8, #2
 8011ad4:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ad8:	a903      	add	r1, sp, #12
 8011ada:	4630      	mov	r0, r6
 8011adc:	f003 f842 	bl	8014b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8011ae0:	23e0      	movs	r3, #224	@ 0xe0
 8011ae2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011ae4:	2701      	movs	r7, #1
 8011ae6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ae8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011aea:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011aec:	a903      	add	r1, sp, #12
 8011aee:	4630      	mov	r0, r6
 8011af0:	f003 f838 	bl	8014b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8011af4:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011af8:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011afa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011afc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011afe:	a903      	add	r1, sp, #12
 8011b00:	4628      	mov	r0, r5
 8011b02:	f003 f82f 	bl	8014b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8011b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011b0a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011b0c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b0e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011b10:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8011b14:	a903      	add	r1, sp, #12
 8011b16:	4628      	mov	r0, r5
 8011b18:	f003 f824 	bl	8014b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8011b1c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8011b20:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011b22:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b24:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011b26:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b2a:	a903      	add	r1, sp, #12
 8011b2c:	4630      	mov	r0, r6
 8011b2e:	f003 f819 	bl	8014b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8011b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011b36:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011b38:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b3a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8011b3c:	a903      	add	r1, sp, #12
 8011b3e:	4628      	mov	r0, r5
 8011b40:	f003 f810 	bl	8014b64 <HAL_GPIO_Init>

}
 8011b44:	b009      	add	sp, #36	@ 0x24
 8011b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b4a:	bf00      	nop
 8011b4c:	40023800 	.word	0x40023800
 8011b50:	40020000 	.word	0x40020000
 8011b54:	40020400 	.word	0x40020400

08011b58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8011b58:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011b5a:	480b      	ldr	r0, [pc, #44]	@ (8011b88 <MX_I2C1_Init+0x30>)
 8011b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8011b8c <MX_I2C1_Init+0x34>)
 8011b5e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8011b60:	4b0b      	ldr	r3, [pc, #44]	@ (8011b90 <MX_I2C1_Init+0x38>)
 8011b62:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011b64:	2300      	movs	r3, #0
 8011b66:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011b68:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011b6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011b6e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011b70:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011b72:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011b74:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011b76:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011b78:	f003 fafe 	bl	8015178 <HAL_I2C_Init>
 8011b7c:	b900      	cbnz	r0, 8011b80 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011b7e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011b80:	f000 f928 	bl	8011dd4 <Error_Handler>
}
 8011b84:	e7fb      	b.n	8011b7e <MX_I2C1_Init+0x26>
 8011b86:	bf00      	nop
 8011b88:	2000083c 	.word	0x2000083c
 8011b8c:	40005400 	.word	0x40005400
 8011b90:	00030d40 	.word	0x00030d40

08011b94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011b94:	b530      	push	{r4, r5, lr}
 8011b96:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b98:	2300      	movs	r3, #0
 8011b9a:	9303      	str	r3, [sp, #12]
 8011b9c:	9304      	str	r3, [sp, #16]
 8011b9e:	9305      	str	r3, [sp, #20]
 8011ba0:	9306      	str	r3, [sp, #24]
 8011ba2:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8011ba4:	6802      	ldr	r2, [r0, #0]
 8011ba6:	4b15      	ldr	r3, [pc, #84]	@ (8011bfc <HAL_I2C_MspInit+0x68>)
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d001      	beq.n	8011bb0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8011bac:	b009      	add	sp, #36	@ 0x24
 8011bae:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011bb0:	2500      	movs	r5, #0
 8011bb2:	9501      	str	r5, [sp, #4]
 8011bb4:	4c12      	ldr	r4, [pc, #72]	@ (8011c00 <HAL_I2C_MspInit+0x6c>)
 8011bb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011bb8:	f043 0302 	orr.w	r3, r3, #2
 8011bbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8011bbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011bc0:	f003 0302 	and.w	r3, r3, #2
 8011bc4:	9301      	str	r3, [sp, #4]
 8011bc6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011bc8:	23c0      	movs	r3, #192	@ 0xc0
 8011bca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011bcc:	2312      	movs	r3, #18
 8011bce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011bd4:	2303      	movs	r3, #3
 8011bd6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011bd8:	2304      	movs	r3, #4
 8011bda:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011bdc:	a903      	add	r1, sp, #12
 8011bde:	4809      	ldr	r0, [pc, #36]	@ (8011c04 <HAL_I2C_MspInit+0x70>)
 8011be0:	f002 ffc0 	bl	8014b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011be4:	9502      	str	r5, [sp, #8]
 8011be6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011be8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011bec:	6423      	str	r3, [r4, #64]	@ 0x40
 8011bee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011bf4:	9302      	str	r3, [sp, #8]
 8011bf6:	9b02      	ldr	r3, [sp, #8]
}
 8011bf8:	e7d8      	b.n	8011bac <HAL_I2C_MspInit+0x18>
 8011bfa:	bf00      	nop
 8011bfc:	40005400 	.word	0x40005400
 8011c00:	40023800 	.word	0x40023800
 8011c04:	40020400 	.word	0x40020400

08011c08 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8011c08:	6802      	ldr	r2, [r0, #0]
 8011c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8011c34 <HAL_I2C_MspDeInit+0x2c>)
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d000      	beq.n	8011c12 <HAL_I2C_MspDeInit+0xa>
 8011c10:	4770      	bx	lr
{
 8011c12:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8011c14:	4a08      	ldr	r2, [pc, #32]	@ (8011c38 <HAL_I2C_MspDeInit+0x30>)
 8011c16:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011c18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011c1c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8011c1e:	4c07      	ldr	r4, [pc, #28]	@ (8011c3c <HAL_I2C_MspDeInit+0x34>)
 8011c20:	2140      	movs	r1, #64	@ 0x40
 8011c22:	4620      	mov	r0, r4
 8011c24:	f003 f882 	bl	8014d2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8011c28:	2180      	movs	r1, #128	@ 0x80
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	f003 f87e 	bl	8014d2c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8011c30:	bd10      	pop	{r4, pc}
 8011c32:	bf00      	nop
 8011c34:	40005400 	.word	0x40005400
 8011c38:	40023800 	.word	0x40023800
 8011c3c:	40020400 	.word	0x40020400

08011c40 <proto>:
#define time_ms_now() mg_now()

logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 8011c40:	b084      	sub	sp, #16
 8011c42:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011c46:	b004      	add	sp, #16
 8011c48:	4770      	bx	lr

08011c4a <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 8011c4a:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8011c4c:	fb01 f400 	mul.w	r4, r1, r0
 8011c50:	4620      	mov	r0, r4
 8011c52:	f007 fa41 	bl	80190d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8011c56:	4605      	mov	r5, r0
 8011c58:	b118      	cbz	r0, 8011c62 <mg_calloc+0x18>
 8011c5a:	4622      	mov	r2, r4
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	f017 ff3f 	bl	8029ae0 <memset>
  return p;
}
 8011c62:	4628      	mov	r0, r5
 8011c64:	bd38      	pop	{r3, r4, r5, pc}
	...

08011c68 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 8011c68:	b108      	cbz	r0, 8011c6e <reg_logging_fn+0x6>
		_send_log_mess = fn;
 8011c6a:	4a01      	ldr	r2, [pc, #4]	@ (8011c70 <reg_logging_fn+0x8>)
 8011c6c:	6010      	str	r0, [r2, #0]
	}
}
 8011c6e:	4770      	bx	lr
 8011c70:	20000000 	.word	0x20000000

08011c74 <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 8011c74:	4b01      	ldr	r3, [pc, #4]	@ (8011c7c <logger_set_level+0x8>)
 8011c76:	7018      	strb	r0, [r3, #0]
}
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	20000890 	.word	0x20000890

08011c80 <logging>:

void logging(logging_level_t level, const char *format, ...){
 8011c80:	b40e      	push	{r1, r2, r3}
 8011c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c84:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 8011c88:	4b44      	ldr	r3, [pc, #272]	@ (8011d9c <logging+0x11c>)
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	4283      	cmp	r3, r0
 8011c8e:	d905      	bls.n	8011c9c <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 8011c90:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 8011c94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011c98:	b003      	add	sp, #12
 8011c9a:	4770      	bx	lr
 8011c9c:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8011c9e:	2101      	movs	r1, #1
 8011ca0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8011ca4:	f7ff ffd1 	bl	8011c4a <mg_calloc>
    if (!tmp_buf){
 8011ca8:	4605      	mov	r5, r0
 8011caa:	2800      	cmp	r0, #0
 8011cac:	d0f0      	beq.n	8011c90 <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 8011cae:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011cb2:	2100      	movs	r1, #0
 8011cb4:	a85b      	add	r0, sp, #364	@ 0x16c
 8011cb6:	f017 ff13 	bl	8029ae0 <memset>
    mess.log_level = level;
 8011cba:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 8011cbe:	f014 ff5f 	bl	8026b80 <mg_now>
 8011cc2:	f7fe fc7b 	bl	80105bc <__aeabi_ul2d>
 8011cc6:	4606      	mov	r6, r0
 8011cc8:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 8011cca:	2200      	movs	r2, #0
 8011ccc:	4b34      	ldr	r3, [pc, #208]	@ (8011da0 <logging+0x120>)
 8011cce:	f7fe fdd5 	bl	801087c <__aeabi_ddiv>
 8011cd2:	f7ff f86d 	bl	8010db0 <__aeabi_d2lz>
 8011cd6:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 8011cda:	a94f      	add	r1, sp, #316	@ 0x13c
 8011cdc:	a858      	add	r0, sp, #352	@ 0x160
 8011cde:	f017 ff95 	bl	8029c0c <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 8011ce2:	ab4f      	add	r3, sp, #316	@ 0x13c
 8011ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8011da4 <logging+0x124>)
 8011ce6:	2140      	movs	r1, #64	@ 0x40
 8011ce8:	a83f      	add	r0, sp, #252	@ 0xfc
 8011cea:	f018 fda1 	bl	802a830 <strftime>
 8011cee:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 8011cf0:	4630      	mov	r0, r6
 8011cf2:	4639      	mov	r1, r7
 8011cf4:	f7fe ff48 	bl	8010b88 <__aeabi_d2iz>
 8011cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8011da8 <logging+0x128>)
 8011cfa:	fb82 3200 	smull	r3, r2, r2, r0
 8011cfe:	17c3      	asrs	r3, r0, #31
 8011d00:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8011d04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011d08:	fb02 0313 	mls	r3, r2, r3, r0
 8011d0c:	4a27      	ldr	r2, [pc, #156]	@ (8011dac <logging+0x12c>)
 8011d0e:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 8011d12:	a83f      	add	r0, sp, #252	@ 0xfc
 8011d14:	4420      	add	r0, r4
 8011d16:	f017 f9b9 	bl	802908c <snprintf>
 8011d1a:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 8011d1c:	1c63      	adds	r3, r4, #1
 8011d1e:	2220      	movs	r2, #32
 8011d20:	a93f      	add	r1, sp, #252	@ 0xfc
 8011d22:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 8011d24:	2200      	movs	r2, #0
 8011d26:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 8011d28:	aba2      	add	r3, sp, #648	@ 0x288
 8011d2a:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8011d2c:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 8011d30:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 8011d32:	21fd      	movs	r1, #253	@ 0xfd
 8011d34:	4630      	mov	r0, r6
 8011d36:	f017 fc71 	bl	802961c <vsnprintf>
 8011d3a:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 8011d3c:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 8011d40:	9601      	str	r6, [sp, #4]
 8011d42:	4b1b      	ldr	r3, [pc, #108]	@ (8011db0 <logging+0x130>)
 8011d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d48:	9300      	str	r3, [sp, #0]
 8011d4a:	ab3f      	add	r3, sp, #252	@ 0xfc
 8011d4c:	4a19      	ldr	r2, [pc, #100]	@ (8011db4 <logging+0x134>)
 8011d4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d52:	4628      	mov	r0, r5
 8011d54:	f017 f99a 	bl	802908c <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 8011d58:	2cf5      	cmp	r4, #245	@ 0xf5
 8011d5a:	d81b      	bhi.n	8011d94 <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	f7fe fa9f 	bl	80102a0 <strlen>
 8011d62:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 8011d66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011d6a:	4629      	mov	r1, r5
 8011d6c:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 8011d70:	f017 fefd 	bl	8029b6e <strncpy>
    if (_send_log_mess) {
 8011d74:	4b10      	ldr	r3, [pc, #64]	@ (8011db8 <logging+0x138>)
 8011d76:	681e      	ldr	r6, [r3, #0]
 8011d78:	b146      	cbz	r6, 8011d8c <logging+0x10c>
        _send_log_mess(mess);
 8011d7a:	ac5b      	add	r4, sp, #364	@ 0x16c
 8011d7c:	22f2      	movs	r2, #242	@ 0xf2
 8011d7e:	a95f      	add	r1, sp, #380	@ 0x17c
 8011d80:	4668      	mov	r0, sp
 8011d82:	f019 f8e9 	bl	802af58 <memcpy>
 8011d86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011d8a:	47b0      	blx	r6
    free(tmp_buf);
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f007 fa25 	bl	80191dc <vPortFree>
 8011d92:	e77d      	b.n	8011c90 <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 8011d94:	23f6      	movs	r3, #246	@ 0xf6
 8011d96:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 8011d9a:	e7e4      	b.n	8011d66 <logging+0xe6>
 8011d9c:	20000890 	.word	0x20000890
 8011da0:	408f4000 	.word	0x408f4000
 8011da4:	08033464 	.word	0x08033464
 8011da8:	10624dd3 	.word	0x10624dd3
 8011dac:	08033478 	.word	0x08033478
 8011db0:	20000004 	.word	0x20000004
 8011db4:	08033480 	.word	0x08033480
 8011db8:	20000000 	.word	0x20000000

08011dbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011dbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8011dbe:	6802      	ldr	r2, [r0, #0]
 8011dc0:	4b03      	ldr	r3, [pc, #12]	@ (8011dd0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d000      	beq.n	8011dc8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8011dc6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8011dc8:	f002 fe28 	bl	8014a1c <HAL_IncTick>
}
 8011dcc:	e7fb      	b.n	8011dc6 <HAL_TIM_PeriodElapsedCallback+0xa>
 8011dce:	bf00      	nop
 8011dd0:	40014000 	.word	0x40014000

08011dd4 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011dd4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011dd6:	e7fe      	b.n	8011dd6 <Error_Handler+0x2>

08011dd8 <SystemClock_Config>:
{
 8011dd8:	b500      	push	{lr}
 8011dda:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011ddc:	2230      	movs	r2, #48	@ 0x30
 8011dde:	2100      	movs	r1, #0
 8011de0:	a808      	add	r0, sp, #32
 8011de2:	f017 fe7d 	bl	8029ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011de6:	2300      	movs	r3, #0
 8011de8:	9303      	str	r3, [sp, #12]
 8011dea:	9304      	str	r3, [sp, #16]
 8011dec:	9305      	str	r3, [sp, #20]
 8011dee:	9306      	str	r3, [sp, #24]
 8011df0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011df2:	9301      	str	r3, [sp, #4]
 8011df4:	4a1f      	ldr	r2, [pc, #124]	@ (8011e74 <SystemClock_Config+0x9c>)
 8011df6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8011df8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8011dfc:	6411      	str	r1, [r2, #64]	@ 0x40
 8011dfe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8011e00:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8011e04:	9201      	str	r2, [sp, #4]
 8011e06:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011e08:	9302      	str	r3, [sp, #8]
 8011e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8011e78 <SystemClock_Config+0xa0>)
 8011e0c:	681a      	ldr	r2, [r3, #0]
 8011e0e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8011e12:	601a      	str	r2, [r3, #0]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011e1a:	9302      	str	r3, [sp, #8]
 8011e1c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8011e1e:	2301      	movs	r3, #1
 8011e20:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011e22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8011e26:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011e28:	2202      	movs	r2, #2
 8011e2a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011e2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011e30:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8011e32:	2304      	movs	r3, #4
 8011e34:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8011e36:	2164      	movs	r1, #100	@ 0x64
 8011e38:	9111      	str	r1, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011e3a:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8011e3c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011e3e:	a808      	add	r0, sp, #32
 8011e40:	f003 fc18 	bl	8015674 <HAL_RCC_OscConfig>
 8011e44:	b988      	cbnz	r0, 8011e6a <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011e46:	230f      	movs	r3, #15
 8011e48:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011e4a:	2302      	movs	r3, #2
 8011e4c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8011e52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011e56:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8011e58:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8011e5a:	2103      	movs	r1, #3
 8011e5c:	a803      	add	r0, sp, #12
 8011e5e:	f003 fe73 	bl	8015b48 <HAL_RCC_ClockConfig>
 8011e62:	b920      	cbnz	r0, 8011e6e <SystemClock_Config+0x96>
}
 8011e64:	b015      	add	sp, #84	@ 0x54
 8011e66:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8011e6a:	f7ff ffb3 	bl	8011dd4 <Error_Handler>
    Error_Handler();
 8011e6e:	f7ff ffb1 	bl	8011dd4 <Error_Handler>
 8011e72:	bf00      	nop
 8011e74:	40023800 	.word	0x40023800
 8011e78:	40007000 	.word	0x40007000

08011e7c <main>:
{
 8011e7c:	b500      	push	{lr}
 8011e7e:	b083      	sub	sp, #12
 8011e80:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 8011e82:	4b10      	ldr	r3, [pc, #64]	@ (8011ec4 <main+0x48>)
 8011e84:	4a10      	ldr	r2, [pc, #64]	@ (8011ec8 <main+0x4c>)
 8011e86:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8011e88:	b662      	cpsie	i
	volatile int i = 1000000;
 8011e8a:	4b10      	ldr	r3, [pc, #64]	@ (8011ecc <main+0x50>)
 8011e8c:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8011e8e:	e002      	b.n	8011e96 <main+0x1a>
		i--;
 8011e90:	9b01      	ldr	r3, [sp, #4]
 8011e92:	3b01      	subs	r3, #1
 8011e94:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8011e96:	9b01      	ldr	r3, [sp, #4]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	dcf9      	bgt.n	8011e90 <main+0x14>
  HAL_Init();
 8011e9c:	f002 fda4 	bl	80149e8 <HAL_Init>
  SystemClock_Config();
 8011ea0:	f7ff ff9a 	bl	8011dd8 <SystemClock_Config>
  MX_GPIO_Init();
 8011ea4:	f7ff fdce 	bl	8011a44 <MX_GPIO_Init>
  MX_SPI2_Init();
 8011ea8:	f000 f834 	bl	8011f14 <MX_SPI2_Init>
  MX_I2C1_Init();
 8011eac:	f7ff fe54 	bl	8011b58 <MX_I2C1_Init>
  MX_SPI1_Init();
 8011eb0:	f000 f80e 	bl	8011ed0 <MX_SPI1_Init>
  osKernelInitialize();
 8011eb4:	f004 fe7c 	bl	8016bb0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8011eb8:	f7ff fc50 	bl	801175c <MX_FREERTOS_Init>
  osKernelStart();
 8011ebc:	f004 fe8a 	bl	8016bd4 <osKernelStart>
  while (1)
 8011ec0:	e7fe      	b.n	8011ec0 <main+0x44>
 8011ec2:	bf00      	nop
 8011ec4:	e000ed00 	.word	0xe000ed00
 8011ec8:	08010000 	.word	0x08010000
 8011ecc:	000f4240 	.word	0x000f4240

08011ed0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8011ed0:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8011ed2:	480e      	ldr	r0, [pc, #56]	@ (8011f0c <MX_SPI1_Init+0x3c>)
 8011ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8011f10 <MX_SPI1_Init+0x40>)
 8011ed6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8011ed8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8011edc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011ee2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011ee4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011ee6:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011eec:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8011eee:	2208      	movs	r2, #8
 8011ef0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011ef2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8011ef4:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011ef6:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8011ef8:	230a      	movs	r3, #10
 8011efa:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8011efc:	f004 f802 	bl	8015f04 <HAL_SPI_Init>
 8011f00:	b900      	cbnz	r0, 8011f04 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8011f02:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011f04:	f7ff ff66 	bl	8011dd4 <Error_Handler>
}
 8011f08:	e7fb      	b.n	8011f02 <MX_SPI1_Init+0x32>
 8011f0a:	bf00      	nop
 8011f0c:	200008ec 	.word	0x200008ec
 8011f10:	40013000 	.word	0x40013000

08011f14 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8011f14:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8011f16:	480d      	ldr	r0, [pc, #52]	@ (8011f4c <MX_SPI2_Init+0x38>)
 8011f18:	4b0d      	ldr	r3, [pc, #52]	@ (8011f50 <MX_SPI2_Init+0x3c>)
 8011f1a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8011f1c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8011f20:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8011f22:	2300      	movs	r3, #0
 8011f24:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8011f26:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011f28:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011f2a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8011f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f30:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011f32:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011f34:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011f36:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011f38:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8011f3a:	230a      	movs	r3, #10
 8011f3c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8011f3e:	f003 ffe1 	bl	8015f04 <HAL_SPI_Init>
 8011f42:	b900      	cbnz	r0, 8011f46 <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8011f44:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011f46:	f7ff ff45 	bl	8011dd4 <Error_Handler>
}
 8011f4a:	e7fb      	b.n	8011f44 <MX_SPI2_Init+0x30>
 8011f4c:	20000894 	.word	0x20000894
 8011f50:	40003800 	.word	0x40003800

08011f54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011f54:	b500      	push	{lr}
 8011f56:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f58:	2300      	movs	r3, #0
 8011f5a:	9305      	str	r3, [sp, #20]
 8011f5c:	9306      	str	r3, [sp, #24]
 8011f5e:	9307      	str	r3, [sp, #28]
 8011f60:	9308      	str	r3, [sp, #32]
 8011f62:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 8011f64:	6803      	ldr	r3, [r0, #0]
 8011f66:	4a28      	ldr	r2, [pc, #160]	@ (8012008 <HAL_SPI_MspInit+0xb4>)
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	d005      	beq.n	8011f78 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8011f6c:	4a27      	ldr	r2, [pc, #156]	@ (801200c <HAL_SPI_MspInit+0xb8>)
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	d025      	beq.n	8011fbe <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8011f72:	b00b      	add	sp, #44	@ 0x2c
 8011f74:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8011f78:	2100      	movs	r1, #0
 8011f7a:	9101      	str	r1, [sp, #4]
 8011f7c:	4b24      	ldr	r3, [pc, #144]	@ (8012010 <HAL_SPI_MspInit+0xbc>)
 8011f7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011f84:	645a      	str	r2, [r3, #68]	@ 0x44
 8011f86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f88:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8011f8c:	9201      	str	r2, [sp, #4]
 8011f8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011f90:	9102      	str	r1, [sp, #8]
 8011f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011f94:	f042 0202 	orr.w	r2, r2, #2
 8011f98:	631a      	str	r2, [r3, #48]	@ 0x30
 8011f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f9c:	f003 0302 	and.w	r3, r3, #2
 8011fa0:	9302      	str	r3, [sp, #8]
 8011fa2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8011fa4:	2338      	movs	r3, #56	@ 0x38
 8011fa6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fa8:	2302      	movs	r3, #2
 8011faa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011fac:	2303      	movs	r3, #3
 8011fae:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011fb0:	2305      	movs	r3, #5
 8011fb2:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011fb4:	a905      	add	r1, sp, #20
 8011fb6:	4817      	ldr	r0, [pc, #92]	@ (8012014 <HAL_SPI_MspInit+0xc0>)
 8011fb8:	f002 fdd4 	bl	8014b64 <HAL_GPIO_Init>
 8011fbc:	e7d9      	b.n	8011f72 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8011fbe:	2100      	movs	r1, #0
 8011fc0:	9103      	str	r1, [sp, #12]
 8011fc2:	4b13      	ldr	r3, [pc, #76]	@ (8012010 <HAL_SPI_MspInit+0xbc>)
 8011fc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011fc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011fca:	641a      	str	r2, [r3, #64]	@ 0x40
 8011fcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011fce:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8011fd2:	9203      	str	r2, [sp, #12]
 8011fd4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011fd6:	9104      	str	r1, [sp, #16]
 8011fd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011fda:	f042 0202 	orr.w	r2, r2, #2
 8011fde:	631a      	str	r2, [r3, #48]	@ 0x30
 8011fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fe2:	f003 0302 	and.w	r3, r3, #2
 8011fe6:	9304      	str	r3, [sp, #16]
 8011fe8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8011fea:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8011fee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ff0:	2302      	movs	r3, #2
 8011ff2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ff4:	2303      	movs	r3, #3
 8011ff6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011ff8:	2305      	movs	r3, #5
 8011ffa:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011ffc:	a905      	add	r1, sp, #20
 8011ffe:	4805      	ldr	r0, [pc, #20]	@ (8012014 <HAL_SPI_MspInit+0xc0>)
 8012000:	f002 fdb0 	bl	8014b64 <HAL_GPIO_Init>
}
 8012004:	e7b5      	b.n	8011f72 <HAL_SPI_MspInit+0x1e>
 8012006:	bf00      	nop
 8012008:	40013000 	.word	0x40013000
 801200c:	40003800 	.word	0x40003800
 8012010:	40023800 	.word	0x40023800
 8012014:	40020400 	.word	0x40020400

08012018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012018:	b500      	push	{lr}
 801201a:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801201c:	2200      	movs	r2, #0
 801201e:	9200      	str	r2, [sp, #0]
 8012020:	4b0d      	ldr	r3, [pc, #52]	@ (8012058 <HAL_MspInit+0x40>)
 8012022:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012024:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8012028:	6459      	str	r1, [r3, #68]	@ 0x44
 801202a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 801202c:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8012030:	9100      	str	r1, [sp, #0]
 8012032:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012034:	9201      	str	r2, [sp, #4]
 8012036:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8012038:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 801203c:	6419      	str	r1, [r3, #64]	@ 0x40
 801203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012044:	9301      	str	r3, [sp, #4]
 8012046:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8012048:	210f      	movs	r1, #15
 801204a:	f06f 0001 	mvn.w	r0, #1
 801204e:	f002 fd71 	bl	8014b34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012052:	b003      	add	sp, #12
 8012054:	f85d fb04 	ldr.w	pc, [sp], #4
 8012058:	40023800 	.word	0x40023800

0801205c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801205c:	b530      	push	{r4, r5, lr}
 801205e:	b089      	sub	sp, #36	@ 0x24
 8012060:	4605      	mov	r5, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8012062:	2400      	movs	r4, #0
 8012064:	9401      	str	r4, [sp, #4]
 8012066:	4b1d      	ldr	r3, [pc, #116]	@ (80120dc <HAL_InitTick+0x80>)
 8012068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801206a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801206e:	645a      	str	r2, [r3, #68]	@ 0x44
 8012070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012076:	9301      	str	r3, [sp, #4]
 8012078:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801207a:	a902      	add	r1, sp, #8
 801207c:	a803      	add	r0, sp, #12
 801207e:	f003 fe39 	bl	8015cf4 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8012082:	f003 fe27 	bl	8015cd4 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012086:	4a16      	ldr	r2, [pc, #88]	@ (80120e0 <HAL_InitTick+0x84>)
 8012088:	fba2 2300 	umull	r2, r3, r2, r0
 801208c:	0c9b      	lsrs	r3, r3, #18
 801208e:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8012090:	4814      	ldr	r0, [pc, #80]	@ (80120e4 <HAL_InitTick+0x88>)
 8012092:	4a15      	ldr	r2, [pc, #84]	@ (80120e8 <HAL_InitTick+0x8c>)
 8012094:	6002      	str	r2, [r0, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8012096:	f240 32e7 	movw	r2, #999	@ 0x3e7
 801209a:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 801209c:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 801209e:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80120a0:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80120a2:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80120a4:	f004 fba4 	bl	80167f0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80120a8:	4604      	mov	r4, r0
 80120aa:	b110      	cbz	r0, 80120b2 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80120ac:	4620      	mov	r0, r4
 80120ae:	b009      	add	sp, #36	@ 0x24
 80120b0:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 80120b2:	480c      	ldr	r0, [pc, #48]	@ (80120e4 <HAL_InitTick+0x88>)
 80120b4:	f004 fa56 	bl	8016564 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80120b8:	4604      	mov	r4, r0
 80120ba:	2800      	cmp	r0, #0
 80120bc:	d1f6      	bne.n	80120ac <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80120be:	2018      	movs	r0, #24
 80120c0:	f002 fd48 	bl	8014b54 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80120c4:	2d0f      	cmp	r5, #15
 80120c6:	d901      	bls.n	80120cc <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80120c8:	2401      	movs	r4, #1
 80120ca:	e7ef      	b.n	80120ac <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80120cc:	2200      	movs	r2, #0
 80120ce:	4629      	mov	r1, r5
 80120d0:	2018      	movs	r0, #24
 80120d2:	f002 fd2f 	bl	8014b34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80120d6:	4b05      	ldr	r3, [pc, #20]	@ (80120ec <HAL_InitTick+0x90>)
 80120d8:	601d      	str	r5, [r3, #0]
 80120da:	e7e7      	b.n	80120ac <HAL_InitTick+0x50>
 80120dc:	40023800 	.word	0x40023800
 80120e0:	431bde83 	.word	0x431bde83
 80120e4:	20000944 	.word	0x20000944
 80120e8:	40014000 	.word	0x40014000
 80120ec:	20000084 	.word	0x20000084

080120f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80120f0:	e7fe      	b.n	80120f0 <NMI_Handler>

080120f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80120f2:	e7fe      	b.n	80120f2 <HardFault_Handler>

080120f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80120f4:	e7fe      	b.n	80120f4 <MemManage_Handler>

080120f6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80120f6:	e7fe      	b.n	80120f6 <BusFault_Handler>

080120f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80120f8:	e7fe      	b.n	80120f8 <UsageFault_Handler>

080120fa <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80120fa:	4770      	bx	lr

080120fc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80120fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80120fe:	4802      	ldr	r0, [pc, #8]	@ (8012108 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8012100:	f004 fa70 	bl	80165e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8012104:	bd08      	pop	{r3, pc}
 8012106:	bf00      	nop
 8012108:	20000944 	.word	0x20000944

0801210c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 801210c:	2001      	movs	r0, #1
 801210e:	4770      	bx	lr

08012110 <_kill>:

int _kill(int pid, int sig)
{
 8012110:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012112:	f018 fee9 	bl	802aee8 <__errno>
 8012116:	2316      	movs	r3, #22
 8012118:	6003      	str	r3, [r0, #0]
  return -1;
}
 801211a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801211e:	bd08      	pop	{r3, pc}

08012120 <_exit>:

void _exit (int status)
{
 8012120:	b508      	push	{r3, lr}
  _kill(status, -1);
 8012122:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012126:	f7ff fff3 	bl	8012110 <_kill>
  while (1) {}    /* Make sure we hang here */
 801212a:	e7fe      	b.n	801212a <_exit+0xa>

0801212c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801212c:	b570      	push	{r4, r5, r6, lr}
 801212e:	460c      	mov	r4, r1
 8012130:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012132:	2500      	movs	r5, #0
 8012134:	e006      	b.n	8012144 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8012136:	f3af 8000 	nop.w
 801213a:	4621      	mov	r1, r4
 801213c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012140:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8012142:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012144:	42b5      	cmp	r5, r6
 8012146:	dbf6      	blt.n	8012136 <_read+0xa>
  }

  return len;
}
 8012148:	4630      	mov	r0, r6
 801214a:	bd70      	pop	{r4, r5, r6, pc}

0801214c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801214c:	b570      	push	{r4, r5, r6, lr}
 801214e:	460c      	mov	r4, r1
 8012150:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012152:	2500      	movs	r5, #0
 8012154:	e004      	b.n	8012160 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8012156:	f814 0b01 	ldrb.w	r0, [r4], #1
 801215a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801215e:	3501      	adds	r5, #1
 8012160:	42b5      	cmp	r5, r6
 8012162:	dbf8      	blt.n	8012156 <_write+0xa>
  }
  return len;
}
 8012164:	4630      	mov	r0, r6
 8012166:	bd70      	pop	{r4, r5, r6, pc}

08012168 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8012168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801216c:	4770      	bx	lr

0801216e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 801216e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012172:	604b      	str	r3, [r1, #4]
  return 0;
}
 8012174:	2000      	movs	r0, #0
 8012176:	4770      	bx	lr

08012178 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8012178:	2001      	movs	r0, #1
 801217a:	4770      	bx	lr

0801217c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 801217c:	2000      	movs	r0, #0
 801217e:	4770      	bx	lr

08012180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012180:	b510      	push	{r4, lr}
 8012182:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012184:	4a0c      	ldr	r2, [pc, #48]	@ (80121b8 <_sbrk+0x38>)
 8012186:	490d      	ldr	r1, [pc, #52]	@ (80121bc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012188:	480d      	ldr	r0, [pc, #52]	@ (80121c0 <_sbrk+0x40>)
 801218a:	6800      	ldr	r0, [r0, #0]
 801218c:	b140      	cbz	r0, 80121a0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801218e:	480c      	ldr	r0, [pc, #48]	@ (80121c0 <_sbrk+0x40>)
 8012190:	6800      	ldr	r0, [r0, #0]
 8012192:	4403      	add	r3, r0
 8012194:	1a52      	subs	r2, r2, r1
 8012196:	4293      	cmp	r3, r2
 8012198:	d806      	bhi.n	80121a8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 801219a:	4a09      	ldr	r2, [pc, #36]	@ (80121c0 <_sbrk+0x40>)
 801219c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 801219e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80121a0:	4807      	ldr	r0, [pc, #28]	@ (80121c0 <_sbrk+0x40>)
 80121a2:	4c08      	ldr	r4, [pc, #32]	@ (80121c4 <_sbrk+0x44>)
 80121a4:	6004      	str	r4, [r0, #0]
 80121a6:	e7f2      	b.n	801218e <_sbrk+0xe>
    errno = ENOMEM;
 80121a8:	f018 fe9e 	bl	802aee8 <__errno>
 80121ac:	230c      	movs	r3, #12
 80121ae:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80121b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80121b4:	e7f3      	b.n	801219e <_sbrk+0x1e>
 80121b6:	bf00      	nop
 80121b8:	20020000 	.word	0x20020000
 80121bc:	00000800 	.word	0x00000800
 80121c0:	20000990 	.word	0x20000990
 80121c4:	20018358 	.word	0x20018358

080121c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80121c8:	4a03      	ldr	r2, [pc, #12]	@ (80121d8 <SystemInit+0x10>)
 80121ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80121ce:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80121d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80121d6:	4770      	bx	lr
 80121d8:	e000ed00 	.word	0xe000ed00

080121dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80121dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012214 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80121e0:	f7ff fff2 	bl	80121c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80121e4:	480c      	ldr	r0, [pc, #48]	@ (8012218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80121e6:	490d      	ldr	r1, [pc, #52]	@ (801221c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80121e8:	4a0d      	ldr	r2, [pc, #52]	@ (8012220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80121ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80121ec:	e002      	b.n	80121f4 <LoopCopyDataInit>

080121ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80121ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80121f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80121f2:	3304      	adds	r3, #4

080121f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80121f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80121f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80121f8:	d3f9      	bcc.n	80121ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80121fa:	4a0a      	ldr	r2, [pc, #40]	@ (8012224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80121fc:	4c0a      	ldr	r4, [pc, #40]	@ (8012228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80121fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012200:	e001      	b.n	8012206 <LoopFillZerobss>

08012202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012204:	3204      	adds	r2, #4

08012206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012208:	d3fb      	bcc.n	8012202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801220a:	f018 fe7b 	bl	802af04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801220e:	f7ff fe35 	bl	8011e7c <main>
  bx  lr    
 8012212:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8012214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8012218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801221c:	200007e8 	.word	0x200007e8
  ldr r2, =_sidata
 8012220:	0803896c 	.word	0x0803896c
  ldr r2, =_sbss
 8012224:	200007e8 	.word	0x200007e8
  ldr r4, =_ebss
 8012228:	20018358 	.word	0x20018358

0801222c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801222c:	e7fe      	b.n	801222c <ADC_IRQHandler>
	...

08012230 <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 8012230:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 8012232:	4b03      	ldr	r3, [pc, #12]	@ (8012240 <handle_OPTIONS_method+0x10>)
 8012234:	4a03      	ldr	r2, [pc, #12]	@ (8012244 <handle_OPTIONS_method+0x14>)
 8012236:	21c8      	movs	r1, #200	@ 0xc8
 8012238:	f00f f93c 	bl	80214b4 <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 801223c:	bd08      	pop	{r3, pc}
 801223e:	bf00      	nop
 8012240:	08037350 	.word	0x08037350
 8012244:	080334c4 	.word	0x080334c4

08012248 <handle_firmware_activate>:
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
	}
}

static void handle_firmware_activate(struct mg_connection *c, struct mg_http_message *hm){
 8012248:	b570      	push	{r4, r5, r6, lr}
 801224a:	b088      	sub	sp, #32
 801224c:	4606      	mov	r6, r0
 801224e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012250:	ad04      	add	r5, sp, #16
 8012252:	4927      	ldr	r1, [pc, #156]	@ (80122f0 <handle_firmware_activate+0xa8>)
 8012254:	4628      	mov	r0, r5
 8012256:	f00f fa0f 	bl	8021678 <mg_str_s>
 801225a:	2300      	movs	r3, #0
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012262:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012266:	f00f fbbb 	bl	80219e0 <mg_match>
 801226a:	b1a8      	cbz	r0, 8012298 <handle_firmware_activate+0x50>
		size_t  size;

		if (mg_fs_lfs.st("/firmware.bin", &size, NULL)){ //Check if file exist
 801226c:	4b21      	ldr	r3, [pc, #132]	@ (80122f4 <handle_firmware_activate+0xac>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	2200      	movs	r2, #0
 8012272:	a903      	add	r1, sp, #12
 8012274:	4820      	ldr	r0, [pc, #128]	@ (80122f8 <handle_firmware_activate+0xb0>)
 8012276:	4798      	blx	r3
 8012278:	b138      	cbz	r0, 801228a <handle_firmware_activate+0x42>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 801227a:	4b20      	ldr	r3, [pc, #128]	@ (80122fc <handle_firmware_activate+0xb4>)
 801227c:	4a20      	ldr	r2, [pc, #128]	@ (8012300 <handle_firmware_activate+0xb8>)
 801227e:	21c8      	movs	r1, #200	@ 0xc8
 8012280:	4630      	mov	r0, r6
 8012282:	f00f f917 	bl	80214b4 <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");

	}
}
 8012286:	b008      	add	sp, #32
 8012288:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 200, headers, //TODO delete for release,
 801228a:	4b1e      	ldr	r3, [pc, #120]	@ (8012304 <handle_firmware_activate+0xbc>)
 801228c:	4a1c      	ldr	r2, [pc, #112]	@ (8012300 <handle_firmware_activate+0xb8>)
 801228e:	21c8      	movs	r1, #200	@ 0xc8
 8012290:	4630      	mov	r0, r6
 8012292:	f00f f90f 	bl	80214b4 <mg_http_reply>
 8012296:	e7f6      	b.n	8012286 <handle_firmware_activate+0x3e>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012298:	ad06      	add	r5, sp, #24
 801229a:	491b      	ldr	r1, [pc, #108]	@ (8012308 <handle_firmware_activate+0xc0>)
 801229c:	4628      	mov	r0, r5
 801229e:	f00f f9eb 	bl	8021678 <mg_str_s>
 80122a2:	2300      	movs	r3, #0
 80122a4:	9300      	str	r3, [sp, #0]
 80122a6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80122aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80122ae:	f00f fb97 	bl	80219e0 <mg_match>
 80122b2:	b1a0      	cbz	r0, 80122de <handle_firmware_activate+0x96>
	    if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 80122b4:	4b0f      	ldr	r3, [pc, #60]	@ (80122f4 <handle_firmware_activate+0xac>)
 80122b6:	69db      	ldr	r3, [r3, #28]
 80122b8:	490f      	ldr	r1, [pc, #60]	@ (80122f8 <handle_firmware_activate+0xb0>)
 80122ba:	4814      	ldr	r0, [pc, #80]	@ (801230c <handle_firmware_activate+0xc4>)
 80122bc:	4798      	blx	r3
 80122be:	b130      	cbz	r0, 80122ce <handle_firmware_activate+0x86>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80122c0:	4b0e      	ldr	r3, [pc, #56]	@ (80122fc <handle_firmware_activate+0xb4>)
 80122c2:	4a0f      	ldr	r2, [pc, #60]	@ (8012300 <handle_firmware_activate+0xb8>)
 80122c4:	21c8      	movs	r1, #200	@ 0xc8
 80122c6:	4630      	mov	r0, r6
 80122c8:	f00f f8f4 	bl	80214b4 <mg_http_reply>
 80122cc:	e7db      	b.n	8012286 <handle_firmware_activate+0x3e>
			mg_http_reply(c, 500, headers, //TODO delete for release,
 80122ce:	4b10      	ldr	r3, [pc, #64]	@ (8012310 <handle_firmware_activate+0xc8>)
 80122d0:	4a0b      	ldr	r2, [pc, #44]	@ (8012300 <handle_firmware_activate+0xb8>)
 80122d2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80122d6:	4630      	mov	r0, r6
 80122d8:	f00f f8ec 	bl	80214b4 <mg_http_reply>
 80122dc:	e7d3      	b.n	8012286 <handle_firmware_activate+0x3e>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80122de:	4b0d      	ldr	r3, [pc, #52]	@ (8012314 <handle_firmware_activate+0xcc>)
 80122e0:	4a07      	ldr	r2, [pc, #28]	@ (8012300 <handle_firmware_activate+0xb8>)
 80122e2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80122e6:	4630      	mov	r0, r6
 80122e8:	f00f f8e4 	bl	80214b4 <mg_http_reply>
}
 80122ec:	e7cb      	b.n	8012286 <handle_firmware_activate+0x3e>
 80122ee:	bf00      	nop
 80122f0:	08033564 	.word	0x08033564
 80122f4:	2000001c 	.word	0x2000001c
 80122f8:	080330ec 	.word	0x080330ec
 80122fc:	08033568 	.word	0x08033568
 8012300:	080335a0 	.word	0x080335a0
 8012304:	08033610 	.word	0x08033610
 8012308:	0803364c 	.word	0x0803364c
 801230c:	08033654 	.word	0x08033654
 8012310:	0803366c 	.word	0x0803366c
 8012314:	080336b0 	.word	0x080336b0

08012318 <handle_firmware_deactivate>:

static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 8012318:	b570      	push	{r4, r5, r6, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	4605      	mov	r5, r0
 801231e:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012320:	ae02      	add	r6, sp, #8
 8012322:	4914      	ldr	r1, [pc, #80]	@ (8012374 <handle_firmware_deactivate+0x5c>)
 8012324:	4630      	mov	r0, r6
 8012326:	f00f f9a7 	bl	8021678 <mg_str_s>
 801232a:	2300      	movs	r3, #0
 801232c:	9300      	str	r3, [sp, #0]
 801232e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012332:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012336:	f00f fb53 	bl	80219e0 <mg_match>
 801233a:	b198      	cbz	r0, 8012364 <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 801233c:	4b0e      	ldr	r3, [pc, #56]	@ (8012378 <handle_firmware_deactivate+0x60>)
 801233e:	6a1b      	ldr	r3, [r3, #32]
 8012340:	480e      	ldr	r0, [pc, #56]	@ (801237c <handle_firmware_deactivate+0x64>)
 8012342:	4798      	blx	r3
 8012344:	b138      	cbz	r0, 8012356 <handle_firmware_deactivate+0x3e>

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012346:	4b0e      	ldr	r3, [pc, #56]	@ (8012380 <handle_firmware_deactivate+0x68>)
 8012348:	4a0e      	ldr	r2, [pc, #56]	@ (8012384 <handle_firmware_deactivate+0x6c>)
 801234a:	21c8      	movs	r1, #200	@ 0xc8
 801234c:	4628      	mov	r0, r5
 801234e:	f00f f8b1 	bl	80214b4 <mg_http_reply>
				}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 8012352:	b004      	add	sp, #16
 8012354:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8012356:	4b0c      	ldr	r3, [pc, #48]	@ (8012388 <handle_firmware_deactivate+0x70>)
 8012358:	4a0a      	ldr	r2, [pc, #40]	@ (8012384 <handle_firmware_deactivate+0x6c>)
 801235a:	21c8      	movs	r1, #200	@ 0xc8
 801235c:	4628      	mov	r0, r5
 801235e:	f00f f8a9 	bl	80214b4 <mg_http_reply>
 8012362:	e7f6      	b.n	8012352 <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012364:	4b09      	ldr	r3, [pc, #36]	@ (801238c <handle_firmware_deactivate+0x74>)
 8012366:	4a07      	ldr	r2, [pc, #28]	@ (8012384 <handle_firmware_deactivate+0x6c>)
 8012368:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801236c:	4628      	mov	r0, r5
 801236e:	f00f f8a1 	bl	80214b4 <mg_http_reply>
}
 8012372:	e7ee      	b.n	8012352 <handle_firmware_deactivate+0x3a>
 8012374:	0803364c 	.word	0x0803364c
 8012378:	2000001c 	.word	0x2000001c
 801237c:	080330ec 	.word	0x080330ec
 8012380:	08033708 	.word	0x08033708
 8012384:	080335a0 	.word	0x080335a0
 8012388:	08033744 	.word	0x08033744
 801238c:	08033788 	.word	0x08033788

08012390 <handle_web_files_remove>:

static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 8012390:	b570      	push	{r4, r5, r6, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	4605      	mov	r5, r0
 8012396:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012398:	ae02      	add	r6, sp, #8
 801239a:	4912      	ldr	r1, [pc, #72]	@ (80123e4 <handle_web_files_remove+0x54>)
 801239c:	4630      	mov	r0, r6
 801239e:	f00f f96b 	bl	8021678 <mg_str_s>
 80123a2:	2300      	movs	r3, #0
 80123a4:	9300      	str	r3, [sp, #0]
 80123a6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80123aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80123ae:	f00f fb17 	bl	80219e0 <mg_match>
 80123b2:	b178      	cbz	r0, 80123d4 <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 80123b4:	4e0c      	ldr	r6, [pc, #48]	@ (80123e8 <handle_web_files_remove+0x58>)
 80123b6:	6a33      	ldr	r3, [r6, #32]
 80123b8:	4c0c      	ldr	r4, [pc, #48]	@ (80123ec <handle_web_files_remove+0x5c>)
 80123ba:	4620      	mov	r0, r4
 80123bc:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 80123be:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80123c0:	4620      	mov	r0, r4
 80123c2:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 80123c4:	4b0a      	ldr	r3, [pc, #40]	@ (80123f0 <handle_web_files_remove+0x60>)
 80123c6:	4a0b      	ldr	r2, [pc, #44]	@ (80123f4 <handle_web_files_remove+0x64>)
 80123c8:	21c8      	movs	r1, #200	@ 0xc8
 80123ca:	4628      	mov	r0, r5
 80123cc:	f00f f872 	bl	80214b4 <mg_http_reply>
			    "{\"status\":\"success\",\"message\":\"All web interface files are deleted\"}\r\n");
    }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
    }
}
 80123d0:	b004      	add	sp, #16
 80123d2:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80123d4:	4b08      	ldr	r3, [pc, #32]	@ (80123f8 <handle_web_files_remove+0x68>)
 80123d6:	4a07      	ldr	r2, [pc, #28]	@ (80123f4 <handle_web_files_remove+0x64>)
 80123d8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80123dc:	4628      	mov	r0, r5
 80123de:	f00f f869 	bl	80214b4 <mg_http_reply>
}
 80123e2:	e7f5      	b.n	80123d0 <handle_web_files_remove+0x40>
 80123e4:	0803364c 	.word	0x0803364c
 80123e8:	2000001c 	.word	0x2000001c
 80123ec:	080330d8 	.word	0x080330d8
 80123f0:	080337d8 	.word	0x080337d8
 80123f4:	080335a0 	.word	0x080335a0
 80123f8:	08033788 	.word	0x08033788

080123fc <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 80123fc:	b510      	push	{r4, lr}
 80123fe:	b090      	sub	sp, #64	@ 0x40
 8012400:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 8012402:	a809      	add	r0, sp, #36	@ 0x24
 8012404:	f006 ff28 	bl	8019258 <vPortGetHeapStats>
	logging(1, "Start execute API RAM status");
 8012408:	490c      	ldr	r1, [pc, #48]	@ (801243c <handle_ram_status_get+0x40>)
 801240a:	2001      	movs	r0, #1
 801240c:	f7ff fc38 	bl	8011c80 <logging>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 8012410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012412:	9306      	str	r3, [sp, #24]
 8012414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012416:	9305      	str	r3, [sp, #20]
 8012418:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801241a:	9304      	str	r3, [sp, #16]
 801241c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801241e:	9303      	str	r3, [sp, #12]
 8012420:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012422:	9302      	str	r3, [sp, #8]
 8012424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012426:	9301      	str	r3, [sp, #4]
 8012428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801242a:	9300      	str	r3, [sp, #0]
 801242c:	4b04      	ldr	r3, [pc, #16]	@ (8012440 <handle_ram_status_get+0x44>)
 801242e:	4a05      	ldr	r2, [pc, #20]	@ (8012444 <handle_ram_status_get+0x48>)
 8012430:	21c8      	movs	r1, #200	@ 0xc8
 8012432:	4620      	mov	r0, r4
 8012434:	f00f f83e 	bl	80214b4 <mg_http_reply>
}
 8012438:	b010      	add	sp, #64	@ 0x40
 801243a:	bd10      	pop	{r4, pc}
 801243c:	08033820 	.word	0x08033820
 8012440:	08033840 	.word	0x08033840
 8012444:	08033944 	.word	0x08033944

08012448 <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8012448:	b5f0      	push	{r4, r5, r6, r7, lr}
 801244a:	b091      	sub	sp, #68	@ 0x44
 801244c:	4606      	mov	r6, r0
 801244e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012450:	ad0c      	add	r5, sp, #48	@ 0x30
 8012452:	494b      	ldr	r1, [pc, #300]	@ (8012580 <handle_io_status_get+0x138>)
 8012454:	4628      	mov	r0, r5
 8012456:	f00f f90f 	bl	8021678 <mg_str_s>
 801245a:	2300      	movs	r3, #0
 801245c:	9300      	str	r3, [sp, #0]
 801245e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012462:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012466:	f00f fabb 	bl	80219e0 <mg_match>
 801246a:	b328      	cbz	r0, 80124b8 <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 801246c:	4c45      	ldr	r4, [pc, #276]	@ (8012584 <handle_io_status_get+0x13c>)
 801246e:	6823      	ldr	r3, [r4, #0]
 8012470:	2200      	movs	r2, #0
 8012472:	2101      	movs	r1, #1
 8012474:	a80a      	add	r0, sp, #40	@ 0x28
 8012476:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 8012478:	6823      	ldr	r3, [r4, #0]
 801247a:	2200      	movs	r2, #0
 801247c:	2102      	movs	r1, #2
 801247e:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 8012482:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 8012484:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012488:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 801248c:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 8012490:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 8012494:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 8012498:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 801249c:	9505      	str	r5, [sp, #20]
 801249e:	9404      	str	r4, [sp, #16]
 80124a0:	9003      	str	r0, [sp, #12]
 80124a2:	9102      	str	r1, [sp, #8]
 80124a4:	9201      	str	r2, [sp, #4]
 80124a6:	9300      	str	r3, [sp, #0]
 80124a8:	4b37      	ldr	r3, [pc, #220]	@ (8012588 <handle_io_status_get+0x140>)
 80124aa:	4a38      	ldr	r2, [pc, #224]	@ (801258c <handle_io_status_get+0x144>)
 80124ac:	21c8      	movs	r1, #200	@ 0xc8
 80124ae:	4630      	mov	r0, r6
 80124b0:	f00f f800 	bl	80214b4 <mg_http_reply>
}
 80124b4:	b011      	add	sp, #68	@ 0x44
 80124b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80124b8:	ad0e      	add	r5, sp, #56	@ 0x38
 80124ba:	4935      	ldr	r1, [pc, #212]	@ (8012590 <handle_io_status_get+0x148>)
 80124bc:	4628      	mov	r0, r5
 80124be:	f00f f8db 	bl	8021678 <mg_str_s>
 80124c2:	2300      	movs	r3, #0
 80124c4:	9300      	str	r3, [sp, #0]
 80124c6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80124ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80124ce:	f00f fa87 	bl	80219e0 <mg_match>
 80124d2:	2800      	cmp	r0, #0
 80124d4:	d04b      	beq.n	801256e <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 80124d6:	ab08      	add	r3, sp, #32
 80124d8:	4a2e      	ldr	r2, [pc, #184]	@ (8012594 <handle_io_status_get+0x14c>)
 80124da:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80124de:	c903      	ldmia	r1, {r0, r1}
 80124e0:	f00e f8ae 	bl	8020640 <mg_json_get_num>
 80124e4:	2800      	cmp	r0, #0
 80124e6:	d03a      	beq.n	801255e <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 80124e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80124ea:	4a2b      	ldr	r2, [pc, #172]	@ (8012598 <handle_io_status_get+0x150>)
 80124ec:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80124f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80124f4:	f00e f8a4 	bl	8020640 <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 80124f8:	2800      	cmp	r0, #0
 80124fa:	d030      	beq.n	801255e <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 80124fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012500:	f7fe fb6a 	bl	8010bd8 <__aeabi_d2uiz>
 8012504:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 8012506:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801250a:	f7fe fb65 	bl	8010bd8 <__aeabi_d2uiz>
 801250e:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8012510:	1e63      	subs	r3, r4, #1
 8012512:	b2db      	uxtb	r3, r3
 8012514:	2b02      	cmp	r3, #2
 8012516:	d801      	bhi.n	801251c <handle_io_status_get+0xd4>
 8012518:	2d01      	cmp	r5, #1
 801251a:	d907      	bls.n	801252c <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 801251c:	4b1f      	ldr	r3, [pc, #124]	@ (801259c <handle_io_status_get+0x154>)
 801251e:	4a1b      	ldr	r2, [pc, #108]	@ (801258c <handle_io_status_get+0x144>)
 8012520:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012524:	4630      	mov	r0, r6
 8012526:	f00e ffc5 	bl	80214b4 <mg_http_reply>
 801252a:	e7c3      	b.n	80124b4 <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 801252c:	4f15      	ldr	r7, [pc, #84]	@ (8012584 <handle_io_status_get+0x13c>)
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	2200      	movs	r2, #0
 8012532:	2102      	movs	r1, #2
 8012534:	a807      	add	r0, sp, #28
 8012536:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 8012538:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 801253c:	446b      	add	r3, sp
 801253e:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	2201      	movs	r2, #1
 8012546:	2102      	movs	r1, #2
 8012548:	a807      	add	r0, sp, #28
 801254a:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 801254c:	9501      	str	r5, [sp, #4]
 801254e:	9400      	str	r4, [sp, #0]
 8012550:	4b13      	ldr	r3, [pc, #76]	@ (80125a0 <handle_io_status_get+0x158>)
 8012552:	4a0e      	ldr	r2, [pc, #56]	@ (801258c <handle_io_status_get+0x144>)
 8012554:	21c8      	movs	r1, #200	@ 0xc8
 8012556:	4630      	mov	r0, r6
 8012558:	f00e ffac 	bl	80214b4 <mg_http_reply>
 801255c:	e7aa      	b.n	80124b4 <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 801255e:	4b11      	ldr	r3, [pc, #68]	@ (80125a4 <handle_io_status_get+0x15c>)
 8012560:	4a0a      	ldr	r2, [pc, #40]	@ (801258c <handle_io_status_get+0x144>)
 8012562:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012566:	4630      	mov	r0, r6
 8012568:	f00e ffa4 	bl	80214b4 <mg_http_reply>
 801256c:	e7a2      	b.n	80124b4 <handle_io_status_get+0x6c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801256e:	4b0e      	ldr	r3, [pc, #56]	@ (80125a8 <handle_io_status_get+0x160>)
 8012570:	4a06      	ldr	r2, [pc, #24]	@ (801258c <handle_io_status_get+0x144>)
 8012572:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012576:	4630      	mov	r0, r6
 8012578:	f00e ff9c 	bl	80214b4 <mg_http_reply>
}
 801257c:	e79a      	b.n	80124b4 <handle_io_status_get+0x6c>
 801257e:	bf00      	nop
 8012580:	08033564 	.word	0x08033564
 8012584:	20000994 	.word	0x20000994
 8012588:	08033988 	.word	0x08033988
 801258c:	080335a0 	.word	0x080335a0
 8012590:	0803364c 	.word	0x0803364c
 8012594:	080339bc 	.word	0x080339bc
 8012598:	080339c8 	.word	0x080339c8
 801259c:	08033a08 	.word	0x08033a08
 80125a0:	080339d0 	.word	0x080339d0
 80125a4:	08033a44 	.word	0x08033a44
 80125a8:	08033a80 	.word	0x08033a80

080125ac <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 80125ac:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80125ae:	fb01 f400 	mul.w	r4, r1, r0
 80125b2:	4620      	mov	r0, r4
 80125b4:	f006 fd90 	bl	80190d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80125b8:	4605      	mov	r5, r0
 80125ba:	b118      	cbz	r0, 80125c4 <mg_calloc+0x18>
 80125bc:	4622      	mov	r2, r4
 80125be:	2100      	movs	r1, #0
 80125c0:	f017 fa8e 	bl	8029ae0 <memset>
}
 80125c4:	4628      	mov	r0, r5
 80125c6:	bd38      	pop	{r3, r4, r5, pc}

080125c8 <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 80125c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125ca:	b08b      	sub	sp, #44	@ 0x2c
 80125cc:	4606      	mov	r6, r0
 80125ce:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80125d0:	ad06      	add	r5, sp, #24
 80125d2:	4984      	ldr	r1, [pc, #528]	@ (80127e4 <handle_mqtt_conf+0x21c>)
 80125d4:	4628      	mov	r0, r5
 80125d6:	f00f f84f 	bl	8021678 <mg_str_s>
 80125da:	2300      	movs	r3, #0
 80125dc:	9300      	str	r3, [sp, #0]
 80125de:	e895 000c 	ldmia.w	r5, {r2, r3}
 80125e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80125e6:	f00f f9fb 	bl	80219e0 <mg_match>
 80125ea:	2800      	cmp	r0, #0
 80125ec:	d03b      	beq.n	8012666 <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 80125ee:	21c6      	movs	r1, #198	@ 0xc6
 80125f0:	2001      	movs	r0, #1
 80125f2:	f7ff ffdb 	bl	80125ac <mg_calloc>
		if (mqtt_config == NULL) {
 80125f6:	4605      	mov	r5, r0
 80125f8:	b340      	cbz	r0, 801264c <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 80125fa:	4b7b      	ldr	r3, [pc, #492]	@ (80127e8 <handle_mqtt_conf+0x220>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	2200      	movs	r2, #0
 8012600:	4611      	mov	r1, r2
 8012602:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8012604:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 8012608:	4638      	mov	r0, r7
 801260a:	f7fd fe49 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 801260e:	b2c4      	uxtb	r4, r0
 8012610:	4622      	mov	r2, r4
 8012612:	212a      	movs	r1, #42	@ 0x2a
 8012614:	4638      	mov	r0, r7
 8012616:	f017 fa63 	bl	8029ae0 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 801261a:	442c      	add	r4, r5
 801261c:	2300      	movs	r3, #0
 801261e:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8012622:	786b      	ldrb	r3, [r5, #1]
 8012624:	b1eb      	cbz	r3, 8012662 <handle_mqtt_conf+0x9a>
 8012626:	4b71      	ldr	r3, [pc, #452]	@ (80127ec <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 8012628:	1caa      	adds	r2, r5, #2
 801262a:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 801262e:	9703      	str	r7, [sp, #12]
 8012630:	9102      	str	r1, [sp, #8]
 8012632:	9201      	str	r2, [sp, #4]
 8012634:	9300      	str	r3, [sp, #0]
 8012636:	4b6e      	ldr	r3, [pc, #440]	@ (80127f0 <handle_mqtt_conf+0x228>)
 8012638:	4a6e      	ldr	r2, [pc, #440]	@ (80127f4 <handle_mqtt_conf+0x22c>)
 801263a:	21c8      	movs	r1, #200	@ 0xc8
 801263c:	4630      	mov	r0, r6
 801263e:	f00e ff39 	bl	80214b4 <mg_http_reply>
		free(mqtt_config);
 8012642:	4628      	mov	r0, r5
 8012644:	f006 fdca 	bl	80191dc <vPortFree>
}
 8012648:	b00b      	add	sp, #44	@ 0x2c
 801264a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 801264c:	4b6a      	ldr	r3, [pc, #424]	@ (80127f8 <handle_mqtt_conf+0x230>)
 801264e:	4a69      	ldr	r2, [pc, #420]	@ (80127f4 <handle_mqtt_conf+0x22c>)
 8012650:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8012654:	4630      	mov	r0, r6
 8012656:	f00e ff2d 	bl	80214b4 <mg_http_reply>
			free(mqtt_config);
 801265a:	4628      	mov	r0, r5
 801265c:	f006 fdbe 	bl	80191dc <vPortFree>
			return;
 8012660:	e7f2      	b.n	8012648 <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8012662:	4b66      	ldr	r3, [pc, #408]	@ (80127fc <handle_mqtt_conf+0x234>)
 8012664:	e7e0      	b.n	8012628 <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8012666:	ad08      	add	r5, sp, #32
 8012668:	4965      	ldr	r1, [pc, #404]	@ (8012800 <handle_mqtt_conf+0x238>)
 801266a:	4628      	mov	r0, r5
 801266c:	f00f f804 	bl	8021678 <mg_str_s>
 8012670:	2300      	movs	r3, #0
 8012672:	9300      	str	r3, [sp, #0]
 8012674:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012678:	e894 0003 	ldmia.w	r4, {r0, r1}
 801267c:	f00f f9b0 	bl	80219e0 <mg_match>
 8012680:	2800      	cmp	r0, #0
 8012682:	f000 80a7 	beq.w	80127d4 <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8012686:	21c6      	movs	r1, #198	@ 0xc6
 8012688:	2001      	movs	r0, #1
 801268a:	f7ff ff8f 	bl	80125ac <mg_calloc>
		if (mqtt_config == NULL) {
 801268e:	4605      	mov	r5, r0
 8012690:	b310      	cbz	r0, 80126d8 <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8012692:	ab05      	add	r3, sp, #20
 8012694:	4a5b      	ldr	r2, [pc, #364]	@ (8012804 <handle_mqtt_conf+0x23c>)
 8012696:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801269a:	c903      	ldmia	r1, {r0, r1}
 801269c:	f00d fd66 	bl	802016c <mg_json_get>
 80126a0:	2800      	cmp	r0, #0
 80126a2:	db24      	blt.n	80126ee <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 80126a4:	1c6b      	adds	r3, r5, #1
 80126a6:	4a58      	ldr	r2, [pc, #352]	@ (8012808 <handle_mqtt_conf+0x240>)
 80126a8:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 80126ac:	e897 0003 	ldmia.w	r7, {r0, r1}
 80126b0:	f00d ffec 	bl	802068c <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 80126b4:	4a55      	ldr	r2, [pc, #340]	@ (801280c <handle_mqtt_conf+0x244>)
 80126b6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80126ba:	f00f ffcd 	bl	8022658 <mg_json_get_str>
 80126be:	4607      	mov	r7, r0
 80126c0:	b328      	cbz	r0, 801270e <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 80126c2:	f014 fc79 	bl	8026fb8 <is_valid_mqtt_url>
 80126c6:	4603      	mov	r3, r0
 80126c8:	b1e0      	cbz	r0, 8012704 <handle_mqtt_conf+0x13c>
					switch (err) {
 80126ca:	3304      	adds	r3, #4
 80126cc:	2b03      	cmp	r3, #3
 80126ce:	d879      	bhi.n	80127c4 <handle_mqtt_conf+0x1fc>
 80126d0:	e8df f003 	tbb	[pc, r3]
 80126d4:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 80126d8:	4b47      	ldr	r3, [pc, #284]	@ (80127f8 <handle_mqtt_conf+0x230>)
 80126da:	4a46      	ldr	r2, [pc, #280]	@ (80127f4 <handle_mqtt_conf+0x22c>)
 80126dc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80126e0:	4630      	mov	r0, r6
 80126e2:	f00e fee7 	bl	80214b4 <mg_http_reply>
			free(mqtt_config);
 80126e6:	4628      	mov	r0, r5
 80126e8:	f006 fd78 	bl	80191dc <vPortFree>
			return;
 80126ec:	e7ac      	b.n	8012648 <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80126ee:	4b48      	ldr	r3, [pc, #288]	@ (8012810 <handle_mqtt_conf+0x248>)
 80126f0:	4a40      	ldr	r2, [pc, #256]	@ (80127f4 <handle_mqtt_conf+0x22c>)
 80126f2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80126f6:	4630      	mov	r0, r6
 80126f8:	f00e fedc 	bl	80214b4 <mg_http_reply>
		free(mqtt_config);
 80126fc:	4628      	mov	r0, r5
 80126fe:	f006 fd6d 	bl	80191dc <vPortFree>
 8012702:	e7a1      	b.n	8012648 <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8012704:	227f      	movs	r2, #127	@ 0x7f
 8012706:	4639      	mov	r1, r7
 8012708:	1ca8      	adds	r0, r5, #2
 801270a:	f017 fa30 	bl	8029b6e <strncpy>
			free(broker);
 801270e:	4638      	mov	r0, r7
 8012710:	f006 fd64 	bl	80191dc <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8012714:	4a3f      	ldr	r2, [pc, #252]	@ (8012814 <handle_mqtt_conf+0x24c>)
 8012716:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 801271a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801271e:	f00f ff9b 	bl	8022658 <mg_json_get_str>
 8012722:	4607      	mov	r7, r0
 8012724:	b128      	cbz	r0, 8012732 <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 8012726:	2220      	movs	r2, #32
 8012728:	4601      	mov	r1, r0
 801272a:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 801272e:	f017 fa1e 	bl	8029b6e <strncpy>
			free(username);
 8012732:	4638      	mov	r0, r7
 8012734:	f006 fd52 	bl	80191dc <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8012738:	4a37      	ldr	r2, [pc, #220]	@ (8012818 <handle_mqtt_conf+0x250>)
 801273a:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 801273e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012742:	f00f ff89 	bl	8022658 <mg_json_get_str>
 8012746:	4604      	mov	r4, r0
 8012748:	b128      	cbz	r0, 8012756 <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 801274a:	2220      	movs	r2, #32
 801274c:	4601      	mov	r1, r0
 801274e:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 8012752:	f017 fa0c 	bl	8029b6e <strncpy>
			free(password);
 8012756:	4620      	mov	r0, r4
 8012758:	f006 fd40 	bl	80191dc <vPortFree>
			mqtt_config->save = 1;
 801275c:	2201      	movs	r2, #1
 801275e:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8012760:	4b21      	ldr	r3, [pc, #132]	@ (80127e8 <handle_mqtt_conf+0x220>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	2100      	movs	r1, #0
 8012766:	4628      	mov	r0, r5
 8012768:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 801276a:	4b2c      	ldr	r3, [pc, #176]	@ (801281c <handle_mqtt_conf+0x254>)
 801276c:	4a21      	ldr	r2, [pc, #132]	@ (80127f4 <handle_mqtt_conf+0x22c>)
 801276e:	21c8      	movs	r1, #200	@ 0xc8
 8012770:	4630      	mov	r0, r6
 8012772:	f00e fe9f 	bl	80214b4 <mg_http_reply>
 8012776:	e7c1      	b.n	80126fc <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012778:	4b29      	ldr	r3, [pc, #164]	@ (8012820 <handle_mqtt_conf+0x258>)
 801277a:	4a1e      	ldr	r2, [pc, #120]	@ (80127f4 <handle_mqtt_conf+0x22c>)
 801277c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012780:	4630      	mov	r0, r6
 8012782:	f00e fe97 	bl	80214b4 <mg_http_reply>
					free(broker);
 8012786:	4638      	mov	r0, r7
 8012788:	f006 fd28 	bl	80191dc <vPortFree>
					free(mqtt_config);
 801278c:	4628      	mov	r0, r5
 801278e:	f006 fd25 	bl	80191dc <vPortFree>
					return;
 8012792:	e759      	b.n	8012648 <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012794:	4b23      	ldr	r3, [pc, #140]	@ (8012824 <handle_mqtt_conf+0x25c>)
 8012796:	4a17      	ldr	r2, [pc, #92]	@ (80127f4 <handle_mqtt_conf+0x22c>)
 8012798:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801279c:	4630      	mov	r0, r6
 801279e:	f00e fe89 	bl	80214b4 <mg_http_reply>
							break;
 80127a2:	e7f0      	b.n	8012786 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80127a4:	4b20      	ldr	r3, [pc, #128]	@ (8012828 <handle_mqtt_conf+0x260>)
 80127a6:	4a13      	ldr	r2, [pc, #76]	@ (80127f4 <handle_mqtt_conf+0x22c>)
 80127a8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80127ac:	4630      	mov	r0, r6
 80127ae:	f00e fe81 	bl	80214b4 <mg_http_reply>
							break;
 80127b2:	e7e8      	b.n	8012786 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80127b4:	4b1d      	ldr	r3, [pc, #116]	@ (801282c <handle_mqtt_conf+0x264>)
 80127b6:	4a0f      	ldr	r2, [pc, #60]	@ (80127f4 <handle_mqtt_conf+0x22c>)
 80127b8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80127bc:	4630      	mov	r0, r6
 80127be:	f00e fe79 	bl	80214b4 <mg_http_reply>
							break;
 80127c2:	e7e0      	b.n	8012786 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80127c4:	4b1a      	ldr	r3, [pc, #104]	@ (8012830 <handle_mqtt_conf+0x268>)
 80127c6:	4a0b      	ldr	r2, [pc, #44]	@ (80127f4 <handle_mqtt_conf+0x22c>)
 80127c8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80127cc:	4630      	mov	r0, r6
 80127ce:	f00e fe71 	bl	80214b4 <mg_http_reply>
							break;
 80127d2:	e7d8      	b.n	8012786 <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80127d4:	4b17      	ldr	r3, [pc, #92]	@ (8012834 <handle_mqtt_conf+0x26c>)
 80127d6:	4a07      	ldr	r2, [pc, #28]	@ (80127f4 <handle_mqtt_conf+0x22c>)
 80127d8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80127dc:	4630      	mov	r0, r6
 80127de:	f00e fe69 	bl	80214b4 <mg_http_reply>
 80127e2:	e731      	b.n	8012648 <handle_mqtt_conf+0x80>
 80127e4:	08033564 	.word	0x08033564
 80127e8:	20000994 	.word	0x20000994
 80127ec:	08033ad4 	.word	0x08033ad4
 80127f0:	08033b20 	.word	0x08033b20
 80127f4:	080335a0 	.word	0x080335a0
 80127f8:	08033ae4 	.word	0x08033ae4
 80127fc:	08033adc 	.word	0x08033adc
 8012800:	0803364c 	.word	0x0803364c
 8012804:	08033b68 	.word	0x08033b68
 8012808:	08033b9c 	.word	0x08033b9c
 801280c:	08033ba8 	.word	0x08033ba8
 8012810:	08033b6c 	.word	0x08033b6c
 8012814:	08033cf0 	.word	0x08033cf0
 8012818:	08033cfc 	.word	0x08033cfc
 801281c:	08033d08 	.word	0x08033d08
 8012820:	08033bb4 	.word	0x08033bb4
 8012824:	08033bf8 	.word	0x08033bf8
 8012828:	08033c44 	.word	0x08033c44
 801282c:	08033c84 	.word	0x08033c84
 8012830:	08033cbc 	.word	0x08033cbc
 8012834:	08033a80 	.word	0x08033a80

08012838 <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8012838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283c:	b0c7      	sub	sp, #284	@ 0x11c
 801283e:	4681      	mov	r9, r0
 8012840:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8012842:	2272      	movs	r2, #114	@ 0x72
 8012844:	498e      	ldr	r1, [pc, #568]	@ (8012a80 <handle_dev_status+0x248>)
 8012846:	a827      	add	r0, sp, #156	@ 0x9c
 8012848:	f018 fb86 	bl	802af58 <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 801284c:	2101      	movs	r1, #1
 801284e:	201e      	movs	r0, #30
 8012850:	f7ff feac 	bl	80125ac <mg_calloc>
 8012854:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8012856:	2101      	movs	r1, #1
 8012858:	202e      	movs	r0, #46	@ 0x2e
 801285a:	f7ff fea7 	bl	80125ac <mg_calloc>
 801285e:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8012860:	2101      	movs	r1, #1
 8012862:	202e      	movs	r0, #46	@ 0x2e
 8012864:	f7ff fea2 	bl	80125ac <mg_calloc>
 8012868:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 801286a:	2101      	movs	r1, #1
 801286c:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8012870:	f7ff fe9c 	bl	80125ac <mg_calloc>
 8012874:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8012876:	2101      	movs	r1, #1
 8012878:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801287c:	f7ff fe96 	bl	80125ac <mg_calloc>
 8012880:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 8012882:	2e00      	cmp	r6, #0
 8012884:	f000 80e3 	beq.w	8012a4e <handle_dev_status+0x216>
 8012888:	2f00      	cmp	r7, #0
 801288a:	f000 80e0 	beq.w	8012a4e <handle_dev_status+0x216>
 801288e:	f1b8 0f00 	cmp.w	r8, #0
 8012892:	f000 80dc 	beq.w	8012a4e <handle_dev_status+0x216>
 8012896:	2c00      	cmp	r4, #0
 8012898:	f000 80d9 	beq.w	8012a4e <handle_dev_status+0x216>
 801289c:	2800      	cmp	r0, #0
 801289e:	f000 80d6 	beq.w	8012a4e <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 80128a2:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 80128a6:	4977      	ldr	r1, [pc, #476]	@ (8012a84 <handle_dev_status+0x24c>)
 80128a8:	4658      	mov	r0, fp
 80128aa:	f00e fee5 	bl	8021678 <mg_str_s>
 80128ae:	2300      	movs	r3, #0
 80128b0:	9300      	str	r3, [sp, #0]
 80128b2:	e89b 000c 	ldmia.w	fp, {r2, r3}
 80128b6:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80128ba:	f00f f891 	bl	80219e0 <mg_match>
 80128be:	2800      	cmp	r0, #0
 80128c0:	f000 80bd 	beq.w	8012a3e <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 80128c4:	f000 ff98 	bl	80137f8 <get_mqtt_connection>
			if(!mqtt_connection){
 80128c8:	4682      	mov	sl, r0
 80128ca:	b358      	cbz	r0, 8012924 <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 80128cc:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80128d0:	f013 0f20 	tst.w	r3, #32
 80128d4:	d12c      	bne.n	8012930 <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 80128d6:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 80128da:	f013 0f20 	tst.w	r3, #32
 80128de:	d02d      	beq.n	801293c <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 80128e0:	221e      	movs	r2, #30
 80128e2:	4969      	ldr	r1, [pc, #420]	@ (8012a88 <handle_dev_status+0x250>)
 80128e4:	4630      	mov	r0, r6
 80128e6:	f017 f942 	bl	8029b6e <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 80128ea:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 8012ab0 <handle_dev_status+0x278>
 80128ee:	f10a 0308 	add.w	r3, sl, #8
 80128f2:	9300      	str	r3, [sp, #0]
 80128f4:	465b      	mov	r3, fp
 80128f6:	4a65      	ldr	r2, [pc, #404]	@ (8012a8c <handle_dev_status+0x254>)
 80128f8:	212e      	movs	r1, #46	@ 0x2e
 80128fa:	4640      	mov	r0, r8
 80128fc:	f00e f8dc 	bl	8020ab8 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8012900:	f10a 031c 	add.w	r3, sl, #28
 8012904:	9300      	str	r3, [sp, #0]
 8012906:	465b      	mov	r3, fp
 8012908:	4a60      	ldr	r2, [pc, #384]	@ (8012a8c <handle_dev_status+0x254>)
 801290a:	212e      	movs	r1, #46	@ 0x2e
 801290c:	4638      	mov	r0, r7
 801290e:	f00e f8d3 	bl	8020ab8 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 8012912:	4620      	mov	r0, r4
 8012914:	f7fd fcc4 	bl	80102a0 <strlen>
 8012918:	4b5d      	ldr	r3, [pc, #372]	@ (8012a90 <handle_dev_status+0x258>)
 801291a:	881b      	ldrh	r3, [r3, #0]
 801291c:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 801291e:	f04f 0a01 	mov.w	sl, #1
 8012922:	e028      	b.n	8012976 <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 8012924:	221e      	movs	r2, #30
 8012926:	495b      	ldr	r1, [pc, #364]	@ (8012a94 <handle_dev_status+0x25c>)
 8012928:	4630      	mov	r0, r6
 801292a:	f017 f920 	bl	8029b6e <strncpy>
 801292e:	e7f0      	b.n	8012912 <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8012930:	221e      	movs	r2, #30
 8012932:	4959      	ldr	r1, [pc, #356]	@ (8012a98 <handle_dev_status+0x260>)
 8012934:	4630      	mov	r0, r6
 8012936:	f017 f91a 	bl	8029b6e <strncpy>
 801293a:	e7d6      	b.n	80128ea <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 801293c:	221e      	movs	r2, #30
 801293e:	4957      	ldr	r1, [pc, #348]	@ (8012a9c <handle_dev_status+0x264>)
 8012940:	4630      	mov	r0, r6
 8012942:	f017 f914 	bl	8029b6e <strncpy>
 8012946:	e7d0      	b.n	80128ea <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8012948:	fa5f f38a 	uxtb.w	r3, sl
 801294c:	2201      	movs	r2, #1
 801294e:	2180      	movs	r1, #128	@ 0x80
 8012950:	a807      	add	r0, sp, #28
 8012952:	f001 fb41 	bl	8013fd8 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8012956:	a907      	add	r1, sp, #28
 8012958:	4620      	mov	r0, r4
 801295a:	f017 f8c9 	bl	8029af0 <strcat>
				strcat(pub_topics_str, "\", \"");
 801295e:	4620      	mov	r0, r4
 8012960:	f7fd fc9e 	bl	80102a0 <strlen>
 8012964:	4603      	mov	r3, r0
 8012966:	1821      	adds	r1, r4, r0
 8012968:	4a4d      	ldr	r2, [pc, #308]	@ (8012aa0 <handle_dev_status+0x268>)
 801296a:	6810      	ldr	r0, [r2, #0]
 801296c:	50e0      	str	r0, [r4, r3]
 801296e:	7913      	ldrb	r3, [r2, #4]
 8012970:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8012972:	f10a 0a01 	add.w	sl, sl, #1
 8012976:	f1ba 0f03 	cmp.w	sl, #3
 801297a:	dde5      	ble.n	8012948 <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 801297c:	f04f 0a01 	mov.w	sl, #1
 8012980:	e007      	b.n	8012992 <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 8012982:	4620      	mov	r0, r4
 8012984:	f7fd fc8c 	bl	80102a0 <strlen>
 8012988:	4b41      	ldr	r3, [pc, #260]	@ (8012a90 <handle_dev_status+0x258>)
 801298a:	881b      	ldrh	r3, [r3, #0]
 801298c:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 801298e:	f10a 0a01 	add.w	sl, sl, #1
 8012992:	f1ba 0f03 	cmp.w	sl, #3
 8012996:	dc18      	bgt.n	80129ca <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8012998:	fa5f f38a 	uxtb.w	r3, sl
 801299c:	2202      	movs	r2, #2
 801299e:	2180      	movs	r1, #128	@ 0x80
 80129a0:	a807      	add	r0, sp, #28
 80129a2:	f001 fb19 	bl	8013fd8 <generate_status_topik>
				strcat(pub_topics_str, topic);
 80129a6:	a907      	add	r1, sp, #28
 80129a8:	4620      	mov	r0, r4
 80129aa:	f017 f8a1 	bl	8029af0 <strcat>
				if (i < OUTPUTS_COUNT) {
 80129ae:	f1ba 0f02 	cmp.w	sl, #2
 80129b2:	dce6      	bgt.n	8012982 <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 80129b4:	4620      	mov	r0, r4
 80129b6:	f7fd fc73 	bl	80102a0 <strlen>
 80129ba:	4603      	mov	r3, r0
 80129bc:	1821      	adds	r1, r4, r0
 80129be:	4a38      	ldr	r2, [pc, #224]	@ (8012aa0 <handle_dev_status+0x268>)
 80129c0:	6810      	ldr	r0, [r2, #0]
 80129c2:	50e0      	str	r0, [r4, r3]
 80129c4:	7913      	ldrb	r3, [r2, #4]
 80129c6:	710b      	strb	r3, [r1, #4]
 80129c8:	e7e1      	b.n	801298e <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 80129ca:	4628      	mov	r0, r5
 80129cc:	f7fd fc68 	bl	80102a0 <strlen>
 80129d0:	4b2f      	ldr	r3, [pc, #188]	@ (8012a90 <handle_dev_status+0x258>)
 80129d2:	881b      	ldrh	r3, [r3, #0]
 80129d4:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80129d6:	f04f 0a01 	mov.w	sl, #1
 80129da:	e007      	b.n	80129ec <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 80129dc:	4628      	mov	r0, r5
 80129de:	f7fd fc5f 	bl	80102a0 <strlen>
 80129e2:	4b2b      	ldr	r3, [pc, #172]	@ (8012a90 <handle_dev_status+0x258>)
 80129e4:	881b      	ldrh	r3, [r3, #0]
 80129e6:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80129e8:	f10a 0a01 	add.w	sl, sl, #1
 80129ec:	f1ba 0f03 	cmp.w	sl, #3
 80129f0:	dc18      	bgt.n	8012a24 <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 80129f2:	fa5f f38a 	uxtb.w	r3, sl
 80129f6:	2202      	movs	r2, #2
 80129f8:	2180      	movs	r1, #128	@ 0x80
 80129fa:	a807      	add	r0, sp, #28
 80129fc:	f001 fad4 	bl	8013fa8 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8012a00:	a907      	add	r1, sp, #28
 8012a02:	4628      	mov	r0, r5
 8012a04:	f017 f874 	bl	8029af0 <strcat>
				if (i < OUTPUTS_COUNT) {
 8012a08:	f1ba 0f02 	cmp.w	sl, #2
 8012a0c:	dce6      	bgt.n	80129dc <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 8012a0e:	4628      	mov	r0, r5
 8012a10:	f7fd fc46 	bl	80102a0 <strlen>
 8012a14:	4603      	mov	r3, r0
 8012a16:	1829      	adds	r1, r5, r0
 8012a18:	4a21      	ldr	r2, [pc, #132]	@ (8012aa0 <handle_dev_status+0x268>)
 8012a1a:	6810      	ldr	r0, [r2, #0]
 8012a1c:	50e8      	str	r0, [r5, r3]
 8012a1e:	7913      	ldrb	r3, [r2, #4]
 8012a20:	710b      	strb	r3, [r1, #4]
 8012a22:	e7e1      	b.n	80129e8 <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012a24:	9504      	str	r5, [sp, #16]
 8012a26:	9403      	str	r4, [sp, #12]
 8012a28:	9702      	str	r7, [sp, #8]
 8012a2a:	f8cd 8004 	str.w	r8, [sp, #4]
 8012a2e:	9600      	str	r6, [sp, #0]
 8012a30:	ab27      	add	r3, sp, #156	@ 0x9c
 8012a32:	4a1c      	ldr	r2, [pc, #112]	@ (8012aa4 <handle_dev_status+0x26c>)
 8012a34:	21c8      	movs	r1, #200	@ 0xc8
 8012a36:	4648      	mov	r0, r9
 8012a38:	f00e fd3c 	bl	80214b4 <mg_http_reply>
 8012a3c:	e00e      	b.n	8012a5c <handle_dev_status+0x224>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8012a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8012aa8 <handle_dev_status+0x270>)
 8012a40:	4a18      	ldr	r2, [pc, #96]	@ (8012aa4 <handle_dev_status+0x26c>)
 8012a42:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012a46:	4648      	mov	r0, r9
 8012a48:	f00e fd34 	bl	80214b4 <mg_http_reply>
 8012a4c:	e006      	b.n	8012a5c <handle_dev_status+0x224>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012a4e:	4b17      	ldr	r3, [pc, #92]	@ (8012aac <handle_dev_status+0x274>)
 8012a50:	4a14      	ldr	r2, [pc, #80]	@ (8012aa4 <handle_dev_status+0x26c>)
 8012a52:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012a56:	4648      	mov	r0, r9
 8012a58:	f00e fd2c 	bl	80214b4 <mg_http_reply>
	free(mqtt_status_str);
 8012a5c:	4630      	mov	r0, r6
 8012a5e:	f006 fbbd 	bl	80191dc <vPortFree>
	free(mqtt_server_addr);
 8012a62:	4638      	mov	r0, r7
 8012a64:	f006 fbba 	bl	80191dc <vPortFree>
	free(mqtt_local_addr);
 8012a68:	4640      	mov	r0, r8
 8012a6a:	f006 fbb7 	bl	80191dc <vPortFree>
	free(pub_topics_str);
 8012a6e:	4620      	mov	r0, r4
 8012a70:	f006 fbb4 	bl	80191dc <vPortFree>
	free(subscr_topics_str);
 8012a74:	4628      	mov	r0, r5
 8012a76:	f006 fbb1 	bl	80191dc <vPortFree>
}
 8012a7a:	b047      	add	sp, #284	@ 0x11c
 8012a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a80:	08033db0 	.word	0x08033db0
 8012a84:	08033564 	.word	0x08033564
 8012a88:	08033d50 	.word	0x08033d50
 8012a8c:	08033d64 	.word	0x08033d64
 8012a90:	08033d68 	.word	0x08033d68
 8012a94:	080374e0 	.word	0x080374e0
 8012a98:	08033d44 	.word	0x08033d44
 8012a9c:	08033d58 	.word	0x08033d58
 8012aa0:	08033d6c 	.word	0x08033d6c
 8012aa4:	080335a0 	.word	0x080335a0
 8012aa8:	08033a80 	.word	0x08033a80
 8012aac:	08033d74 	.word	0x08033d74
 8012ab0:	08023215 	.word	0x08023215

08012ab4 <handle_fs_get_log>:
  }
}

// function for show logging
// function for show logging
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8012ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ab6:	b08d      	sub	sp, #52	@ 0x34
 8012ab8:	4607      	mov	r7, r0
 8012aba:	460c      	mov	r4, r1
 8012abc:	4615      	mov	r5, r2

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012abe:	ae08      	add	r6, sp, #32
 8012ac0:	4923      	ldr	r1, [pc, #140]	@ (8012b50 <handle_fs_get_log+0x9c>)
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	f00e fdd8 	bl	8021678 <mg_str_s>
 8012ac8:	2300      	movs	r3, #0
 8012aca:	9300      	str	r3, [sp, #0]
 8012acc:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012ad0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012ad4:	f00e ff84 	bl	80219e0 <mg_match>
 8012ad8:	b318      	cbz	r0, 8012b22 <handle_fs_get_log+0x6e>

		struct mg_http_serve_opts opts = {
 8012ada:	2300      	movs	r3, #0
 8012adc:	9302      	str	r3, [sp, #8]
 8012ade:	9303      	str	r3, [sp, #12]
 8012ae0:	9304      	str	r3, [sp, #16]
 8012ae2:	9305      	str	r3, [sp, #20]
 8012ae4:	9306      	str	r3, [sp, #24]
 8012ae6:	9307      	str	r3, [sp, #28]
 8012ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8012b54 <handle_fs_get_log+0xa0>)
 8012aea:	9302      	str	r3, [sp, #8]
 8012aec:	4b1a      	ldr	r3, [pc, #104]	@ (8012b58 <handle_fs_get_log+0xa4>)
 8012aee:	9307      	str	r3, [sp, #28]
			.root_dir = "/log",
			.fs = &mg_fs_lfs
		};

		switch (number) {
 8012af0:	b145      	cbz	r5, 8012b04 <handle_fs_get_log+0x50>
 8012af2:	2d01      	cmp	r5, #1
 8012af4:	d00e      	beq.n	8012b14 <handle_fs_get_log+0x60>
				break;
			case 1:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
				break;
			default:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8012af6:	ab02      	add	r3, sp, #8
 8012af8:	4a18      	ldr	r2, [pc, #96]	@ (8012b5c <handle_fs_get_log+0xa8>)
 8012afa:	4621      	mov	r1, r4
 8012afc:	4638      	mov	r0, r7
 8012afe:	f00f f92b 	bl	8021d58 <mg_http_serve_file>
				break;
 8012b02:	e005      	b.n	8012b10 <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8012b04:	ab02      	add	r3, sp, #8
 8012b06:	4a15      	ldr	r2, [pc, #84]	@ (8012b5c <handle_fs_get_log+0xa8>)
 8012b08:	4621      	mov	r1, r4
 8012b0a:	4638      	mov	r0, r7
 8012b0c:	f00f f924 	bl	8021d58 <mg_http_serve_file>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}
}
 8012b10:	b00d      	add	sp, #52	@ 0x34
 8012b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8012b14:	ab02      	add	r3, sp, #8
 8012b16:	4a12      	ldr	r2, [pc, #72]	@ (8012b60 <handle_fs_get_log+0xac>)
 8012b18:	4621      	mov	r1, r4
 8012b1a:	4638      	mov	r0, r7
 8012b1c:	f00f f91c 	bl	8021d58 <mg_http_serve_file>
				break;
 8012b20:	e7f6      	b.n	8012b10 <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012b22:	ad0a      	add	r5, sp, #40	@ 0x28
 8012b24:	490f      	ldr	r1, [pc, #60]	@ (8012b64 <handle_fs_get_log+0xb0>)
 8012b26:	4628      	mov	r0, r5
 8012b28:	f00e fda6 	bl	8021678 <mg_str_s>
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	9300      	str	r3, [sp, #0]
 8012b30:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012b34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012b38:	f00e ff52 	bl	80219e0 <mg_match>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	d1e7      	bne.n	8012b10 <handle_fs_get_log+0x5c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012b40:	4b09      	ldr	r3, [pc, #36]	@ (8012b68 <handle_fs_get_log+0xb4>)
 8012b42:	4a0a      	ldr	r2, [pc, #40]	@ (8012b6c <handle_fs_get_log+0xb8>)
 8012b44:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012b48:	4638      	mov	r0, r7
 8012b4a:	f00e fcb3 	bl	80214b4 <mg_http_reply>
}
 8012b4e:	e7df      	b.n	8012b10 <handle_fs_get_log+0x5c>
 8012b50:	08033564 	.word	0x08033564
 8012b54:	08033110 	.word	0x08033110
 8012b58:	2000001c 	.word	0x2000001c
 8012b5c:	08033140 	.word	0x08033140
 8012b60:	08033150 	.word	0x08033150
 8012b64:	0803364c 	.word	0x0803364c
 8012b68:	080336b0 	.word	0x080336b0
 8012b6c:	080335a0 	.word	0x080335a0

08012b70 <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8012b70:	b570      	push	{r4, r5, r6, lr}
 8012b72:	b086      	sub	sp, #24
 8012b74:	4605      	mov	r5, r0
 8012b76:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012b78:	ae04      	add	r6, sp, #16
 8012b7a:	4915      	ldr	r1, [pc, #84]	@ (8012bd0 <handle_restart_mcu+0x60>)
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f00e fd7b 	bl	8021678 <mg_str_s>
 8012b82:	2300      	movs	r3, #0
 8012b84:	9300      	str	r3, [sp, #0]
 8012b86:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012b8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012b8e:	f00e ff27 	bl	80219e0 <mg_match>
 8012b92:	b1a0      	cbz	r0, 8012bbe <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 8012b94:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 05 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 8012b96:	6818      	ldr	r0, [r3, #0]
 8012b98:	2300      	movs	r3, #0
 8012b9a:	9302      	str	r3, [sp, #8]
 8012b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8012bd4 <handle_restart_mcu+0x64>)
 8012b9e:	9301      	str	r3, [sp, #4]
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	9300      	str	r3, [sp, #0]
 8012ba4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8012ba8:	2300      	movs	r3, #0
 8012baa:	f00f fe47 	bl	802283c <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8012bae:	4b0a      	ldr	r3, [pc, #40]	@ (8012bd8 <handle_restart_mcu+0x68>)
 8012bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8012bdc <handle_restart_mcu+0x6c>)
 8012bb2:	21c8      	movs	r1, #200	@ 0xc8
 8012bb4:	4628      	mov	r0, r5
 8012bb6:	f00e fc7d 	bl	80214b4 <mg_http_reply>
}
 8012bba:	b006      	add	sp, #24
 8012bbc:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012bbe:	4b08      	ldr	r3, [pc, #32]	@ (8012be0 <handle_restart_mcu+0x70>)
 8012bc0:	4a06      	ldr	r2, [pc, #24]	@ (8012bdc <handle_restart_mcu+0x6c>)
 8012bc2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012bc6:	4628      	mov	r0, r5
 8012bc8:	f00e fc74 	bl	80214b4 <mg_http_reply>
}
 8012bcc:	e7f5      	b.n	8012bba <handle_restart_mcu+0x4a>
 8012bce:	bf00      	nop
 8012bd0:	0803364c 	.word	0x0803364c
 8012bd4:	08014b5d 	.word	0x08014b5d
 8012bd8:	08033e24 	.word	0x08033e24
 8012bdc:	080335a0 	.word	0x080335a0
 8012be0:	08033788 	.word	0x08033788

08012be4 <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 8012be4:	b570      	push	{r4, r5, r6, lr}
 8012be6:	b0a4      	sub	sp, #144	@ 0x90
 8012be8:	4605      	mov	r5, r0
 8012bea:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012bec:	ae22      	add	r6, sp, #136	@ 0x88
 8012bee:	491a      	ldr	r1, [pc, #104]	@ (8012c58 <handle_firmware_upload+0x74>)
 8012bf0:	4630      	mov	r0, r6
 8012bf2:	f00e fd41 	bl	8021678 <mg_str_s>
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	9300      	str	r3, [sp, #0]
 8012bfa:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012bfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012c02:	f00e feed 	bl	80219e0 <mg_match>
 8012c06:	b1f0      	cbz	r0, 8012c46 <handle_firmware_upload+0x62>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8012c08:	2380      	movs	r3, #128	@ 0x80
 8012c0a:	aa02      	add	r2, sp, #8
 8012c0c:	4913      	ldr	r1, [pc, #76]	@ (8012c5c <handle_firmware_upload+0x78>)
 8012c0e:	f104 0010 	add.w	r0, r4, #16
 8012c12:	f00f fbb0 	bl	8022376 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 8012c16:	4912      	ldr	r1, [pc, #72]	@ (8012c60 <handle_firmware_upload+0x7c>)
 8012c18:	a802      	add	r0, sp, #8
 8012c1a:	f7fd fae1 	bl	80101e0 <strcmp>
 8012c1e:	b940      	cbnz	r0, 8012c32 <handle_firmware_upload+0x4e>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 8012c20:	4b10      	ldr	r3, [pc, #64]	@ (8012c64 <handle_firmware_upload+0x80>)
 8012c22:	9300      	str	r3, [sp, #0]
 8012c24:	4b10      	ldr	r3, [pc, #64]	@ (8012c68 <handle_firmware_upload+0x84>)
 8012c26:	4a11      	ldr	r2, [pc, #68]	@ (8012c6c <handle_firmware_upload+0x88>)
 8012c28:	4621      	mov	r1, r4
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	f011 f89c 	bl	8023d68 <mg_http_upload>
 8012c30:	e010      	b.n	8012c54 <handle_firmware_upload+0x70>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8012c32:	4b0b      	ldr	r3, [pc, #44]	@ (8012c60 <handle_firmware_upload+0x7c>)
 8012c34:	9300      	str	r3, [sp, #0]
 8012c36:	4b0e      	ldr	r3, [pc, #56]	@ (8012c70 <handle_firmware_upload+0x8c>)
 8012c38:	4a0e      	ldr	r2, [pc, #56]	@ (8012c74 <handle_firmware_upload+0x90>)
 8012c3a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012c3e:	4628      	mov	r0, r5
 8012c40:	f00e fc38 	bl	80214b4 <mg_http_reply>
 8012c44:	e006      	b.n	8012c54 <handle_firmware_upload+0x70>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012c46:	4b0c      	ldr	r3, [pc, #48]	@ (8012c78 <handle_firmware_upload+0x94>)
 8012c48:	4a0a      	ldr	r2, [pc, #40]	@ (8012c74 <handle_firmware_upload+0x90>)
 8012c4a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012c4e:	4628      	mov	r0, r5
 8012c50:	f00e fc30 	bl	80214b4 <mg_http_reply>
}
 8012c54:	b024      	add	sp, #144	@ 0x90
 8012c56:	bd70      	pop	{r4, r5, r6, pc}
 8012c58:	0803364c 	.word	0x0803364c
 8012c5c:	0803743c 	.word	0x0803743c
 8012c60:	08033e58 	.word	0x08033e58
 8012c64:	00030d40 	.word	0x00030d40
 8012c68:	080330e0 	.word	0x080330e0
 8012c6c:	2000001c 	.word	0x2000001c
 8012c70:	08033e68 	.word	0x08033e68
 8012c74:	080335a0 	.word	0x080335a0
 8012c78:	08033788 	.word	0x08033788

08012c7c <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 8012c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c7e:	b097      	sub	sp, #92	@ 0x5c
 8012c80:	4604      	mov	r4, r0
 8012c82:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 8012c84:	2101      	movs	r1, #1
 8012c86:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8012c8a:	f7ff fc8f 	bl	80125ac <mg_calloc>
	if (buff == NULL){
 8012c8e:	4605      	mov	r5, r0
 8012c90:	b150      	cbz	r0, 8012ca8 <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8012c92:	2201      	movs	r2, #1
 8012c94:	4621      	mov	r1, r4
 8012c96:	4828      	ldr	r0, [pc, #160]	@ (8012d38 <calc_file_md5sum+0xbc>)
 8012c98:	f00d f97f 	bl	801ff9a <mg_fs_open>
	if (fd==NULL){
 8012c9c:	4604      	mov	r4, r0
 8012c9e:	b140      	cbz	r0, 8012cb2 <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8012ca0:	4668      	mov	r0, sp
 8012ca2:	f00d fd89 	bl	80207b8 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8012ca6:	e010      	b.n	8012cca <calc_file_md5sum+0x4e>
		free(buff);
 8012ca8:	f006 fa98 	bl	80191dc <vPortFree>
		return -1;
 8012cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012cb0:	e040      	b.n	8012d34 <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 8012cb2:	f00d f98b 	bl	801ffcc <mg_fs_close>
		free(buff);
 8012cb6:	4628      	mov	r0, r5
 8012cb8:	f006 fa90 	bl	80191dc <vPortFree>
		return -2;
 8012cbc:	f06f 0001 	mvn.w	r0, #1
 8012cc0:	e038      	b.n	8012d34 <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8012cc2:	4629      	mov	r1, r5
 8012cc4:	4668      	mov	r0, sp
 8012cc6:	f00d fd8d 	bl	80207e4 <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8012cca:	4b1b      	ldr	r3, [pc, #108]	@ (8012d38 <calc_file_md5sum+0xbc>)
 8012ccc:	691b      	ldr	r3, [r3, #16]
 8012cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012cd2:	4629      	mov	r1, r5
 8012cd4:	6820      	ldr	r0, [r4, #0]
 8012cd6:	4798      	blx	r3
 8012cd8:	4602      	mov	r2, r0
 8012cda:	2800      	cmp	r0, #0
 8012cdc:	d1f1      	bne.n	8012cc2 <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 8012cde:	4620      	mov	r0, r4
 8012ce0:	f00d f974 	bl	801ffcc <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 8012ce4:	2101      	movs	r1, #1
 8012ce6:	2010      	movs	r0, #16
 8012ce8:	f7ff fc60 	bl	80125ac <mg_calloc>
	if (digest == NULL){
 8012cec:	4607      	mov	r7, r0
 8012cee:	b128      	cbz	r0, 8012cfc <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 8012cf0:	4601      	mov	r1, r0
 8012cf2:	4668      	mov	r0, sp
 8012cf4:	f00d fdcd 	bl	8020892 <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 8012cf8:	2400      	movs	r4, #0
 8012cfa:	e012      	b.n	8012d22 <calc_file_md5sum+0xa6>
		free(buff);
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	f006 fa6d 	bl	80191dc <vPortFree>
		free(digest);
 8012d02:	4638      	mov	r0, r7
 8012d04:	f006 fa6a 	bl	80191dc <vPortFree>
		return -1;
 8012d08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d0c:	e012      	b.n	8012d34 <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 8012d0e:	0061      	lsls	r1, r4, #1
 8012d10:	5d3b      	ldrb	r3, [r7, r4]
 8012d12:	4a0a      	ldr	r2, [pc, #40]	@ (8012d3c <calc_file_md5sum+0xc0>)
 8012d14:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 8012d18:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 8012d1c:	f016 f9b6 	bl	802908c <snprintf>
	for (int i = 0; i < 16; ++i) {
 8012d20:	3401      	adds	r4, #1
 8012d22:	2c0f      	cmp	r4, #15
 8012d24:	ddf3      	ble.n	8012d0e <calc_file_md5sum+0x92>
	free(buff);
 8012d26:	4628      	mov	r0, r5
 8012d28:	f006 fa58 	bl	80191dc <vPortFree>
	free(digest);
 8012d2c:	4638      	mov	r0, r7
 8012d2e:	f006 fa55 	bl	80191dc <vPortFree>
	return 0;
 8012d32:	2000      	movs	r0, #0
}
 8012d34:	b017      	add	sp, #92	@ 0x5c
 8012d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d38:	2000001c 	.word	0x2000001c
 8012d3c:	08033eb4 	.word	0x08033eb4

08012d40 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 8012d40:	b570      	push	{r4, r5, r6, lr}
 8012d42:	b084      	sub	sp, #16
 8012d44:	4605      	mov	r5, r0
 8012d46:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012d48:	ae02      	add	r6, sp, #8
 8012d4a:	4919      	ldr	r1, [pc, #100]	@ (8012db0 <handle_firmware_md5+0x70>)
 8012d4c:	4630      	mov	r0, r6
 8012d4e:	f00e fc93 	bl	8021678 <mg_str_s>
 8012d52:	2300      	movs	r3, #0
 8012d54:	9300      	str	r3, [sp, #0]
 8012d56:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012d5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012d5e:	f00e fe3f 	bl	80219e0 <mg_match>
 8012d62:	b1e8      	cbz	r0, 8012da0 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8012d64:	2101      	movs	r1, #1
 8012d66:	2021      	movs	r0, #33	@ 0x21
 8012d68:	f7ff fc20 	bl	80125ac <mg_calloc>
 8012d6c:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8012d6e:	4601      	mov	r1, r0
 8012d70:	4810      	ldr	r0, [pc, #64]	@ (8012db4 <handle_firmware_md5+0x74>)
 8012d72:	f7ff ff83 	bl	8012c7c <calc_file_md5sum>
 8012d76:	b958      	cbnz	r0, 8012d90 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012d78:	9400      	str	r4, [sp, #0]
 8012d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8012db8 <handle_firmware_md5+0x78>)
 8012d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8012dbc <handle_firmware_md5+0x7c>)
 8012d7e:	21c8      	movs	r1, #200	@ 0xc8
 8012d80:	4628      	mov	r0, r5
 8012d82:	f00e fb97 	bl	80214b4 <mg_http_reply>
		free(md5_str);
 8012d86:	4620      	mov	r0, r4
 8012d88:	f006 fa28 	bl	80191dc <vPortFree>
}
 8012d8c:	b004      	add	sp, #16
 8012d8e:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8012d90:	4b0b      	ldr	r3, [pc, #44]	@ (8012dc0 <handle_firmware_md5+0x80>)
 8012d92:	4a0a      	ldr	r2, [pc, #40]	@ (8012dbc <handle_firmware_md5+0x7c>)
 8012d94:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012d98:	4628      	mov	r0, r5
 8012d9a:	f00e fb8b 	bl	80214b4 <mg_http_reply>
 8012d9e:	e7f2      	b.n	8012d86 <handle_firmware_md5+0x46>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012da0:	4b08      	ldr	r3, [pc, #32]	@ (8012dc4 <handle_firmware_md5+0x84>)
 8012da2:	4a06      	ldr	r2, [pc, #24]	@ (8012dbc <handle_firmware_md5+0x7c>)
 8012da4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012da8:	4628      	mov	r0, r5
 8012daa:	f00e fb83 	bl	80214b4 <mg_http_reply>
}
 8012dae:	e7ed      	b.n	8012d8c <handle_firmware_md5+0x4c>
 8012db0:	08033564 	.word	0x08033564
 8012db4:	08033654 	.word	0x08033654
 8012db8:	08033ebc 	.word	0x08033ebc
 8012dbc:	080335a0 	.word	0x080335a0
 8012dc0:	08033ee0 	.word	0x08033ee0
 8012dc4:	08033f20 	.word	0x08033f20

08012dc8 <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 8012dc8:	b570      	push	{r4, r5, r6, lr}
 8012dca:	b0c4      	sub	sp, #272	@ 0x110
 8012dcc:	4606      	mov	r6, r0
 8012dce:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012dd0:	ad42      	add	r5, sp, #264	@ 0x108
 8012dd2:	4920      	ldr	r1, [pc, #128]	@ (8012e54 <handle_fs_mkdir+0x8c>)
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	f00e fc4f 	bl	8021678 <mg_str_s>
 8012dda:	2300      	movs	r3, #0
 8012ddc:	9300      	str	r3, [sp, #0]
 8012dde:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012de2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012de6:	f00e fdfb 	bl	80219e0 <mg_match>
 8012dea:	b350      	cbz	r0, 8012e42 <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 8012dec:	237b      	movs	r3, #123	@ 0x7b
 8012dee:	aa23      	add	r2, sp, #140	@ 0x8c
 8012df0:	4919      	ldr	r1, [pc, #100]	@ (8012e58 <handle_fs_mkdir+0x90>)
 8012df2:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8012df6:	f00f fabe 	bl	8022376 <mg_http_get_var>
 8012dfa:	2800      	cmp	r0, #0
 8012dfc:	dd19      	ble.n	8012e32 <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 8012dfe:	ab23      	add	r3, sp, #140	@ 0x8c
 8012e00:	4a16      	ldr	r2, [pc, #88]	@ (8012e5c <handle_fs_mkdir+0x94>)
 8012e02:	2180      	movs	r1, #128	@ 0x80
 8012e04:	a803      	add	r0, sp, #12
 8012e06:	f016 f941 	bl	802908c <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 8012e0a:	4b15      	ldr	r3, [pc, #84]	@ (8012e60 <handle_fs_mkdir+0x98>)
 8012e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e0e:	a803      	add	r0, sp, #12
 8012e10:	4798      	blx	r3
 8012e12:	b130      	cbz	r0, 8012e22 <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 8012e14:	4b13      	ldr	r3, [pc, #76]	@ (8012e64 <handle_fs_mkdir+0x9c>)
 8012e16:	4a14      	ldr	r2, [pc, #80]	@ (8012e68 <handle_fs_mkdir+0xa0>)
 8012e18:	21c8      	movs	r1, #200	@ 0xc8
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	f00e fb4a 	bl	80214b4 <mg_http_reply>
 8012e20:	e016      	b.n	8012e50 <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 8012e22:	4b12      	ldr	r3, [pc, #72]	@ (8012e6c <handle_fs_mkdir+0xa4>)
 8012e24:	4a10      	ldr	r2, [pc, #64]	@ (8012e68 <handle_fs_mkdir+0xa0>)
 8012e26:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	f00e fb42 	bl	80214b4 <mg_http_reply>
 8012e30:	e00e      	b.n	8012e50 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012e32:	4b0f      	ldr	r3, [pc, #60]	@ (8012e70 <handle_fs_mkdir+0xa8>)
 8012e34:	4a0c      	ldr	r2, [pc, #48]	@ (8012e68 <handle_fs_mkdir+0xa0>)
 8012e36:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	f00e fb3a 	bl	80214b4 <mg_http_reply>
 8012e40:	e006      	b.n	8012e50 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012e42:	4b0c      	ldr	r3, [pc, #48]	@ (8012e74 <handle_fs_mkdir+0xac>)
 8012e44:	4a08      	ldr	r2, [pc, #32]	@ (8012e68 <handle_fs_mkdir+0xa0>)
 8012e46:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012e4a:	4630      	mov	r0, r6
 8012e4c:	f00e fb32 	bl	80214b4 <mg_http_reply>
}
 8012e50:	b044      	add	sp, #272	@ 0x110
 8012e52:	bd70      	pop	{r4, r5, r6, pc}
 8012e54:	0803364c 	.word	0x0803364c
 8012e58:	08033f70 	.word	0x08033f70
 8012e5c:	08033f78 	.word	0x08033f78
 8012e60:	2000001c 	.word	0x2000001c
 8012e64:	08033f80 	.word	0x08033f80
 8012e68:	080335a0 	.word	0x080335a0
 8012e6c:	08033fb4 	.word	0x08033fb4
 8012e70:	08033ff0 	.word	0x08033ff0
 8012e74:	08033788 	.word	0x08033788

08012e78 <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 8012e78:	290b      	cmp	r1, #11
 8012e7a:	d000      	beq.n	8012e7e <dashboard+0x6>
 8012e7c:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 8012e7e:	b570      	push	{r4, r5, r6, lr}
 8012e80:	b0a6      	sub	sp, #152	@ 0x98
 8012e82:	4605      	mov	r5, r0
 8012e84:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8012e86:	ae08      	add	r6, sp, #32
 8012e88:	499c      	ldr	r1, [pc, #624]	@ (80130fc <dashboard+0x284>)
 8012e8a:	4630      	mov	r0, r6
 8012e8c:	f00e fbf4 	bl	8021678 <mg_str_s>
 8012e90:	2300      	movs	r3, #0
 8012e92:	9300      	str	r3, [sp, #0]
 8012e94:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012e98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012e9c:	f00e fda0 	bl	80219e0 <mg_match>
 8012ea0:	b120      	cbz	r0, 8012eac <dashboard+0x34>
            	handle_OPTIONS_method(c);
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	f7ff f9c4 	bl	8012230 <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 8012ea8:	b026      	add	sp, #152	@ 0x98
 8012eaa:	bd70      	pop	{r4, r5, r6, pc}
        }else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8012eac:	ae0a      	add	r6, sp, #40	@ 0x28
 8012eae:	4994      	ldr	r1, [pc, #592]	@ (8013100 <dashboard+0x288>)
 8012eb0:	4630      	mov	r0, r6
 8012eb2:	f00e fbe1 	bl	8021678 <mg_str_s>
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	9300      	str	r3, [sp, #0]
 8012eba:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012ebe:	f104 0108 	add.w	r1, r4, #8
 8012ec2:	c903      	ldmia	r1, {r0, r1}
 8012ec4:	f00e fd8c 	bl	80219e0 <mg_match>
 8012ec8:	b118      	cbz	r0, 8012ed2 <dashboard+0x5a>
			handle_ram_status_get(c);
 8012eca:	4628      	mov	r0, r5
 8012ecc:	f7ff fa96 	bl	80123fc <handle_ram_status_get>
 8012ed0:	e7ea      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8012ed2:	ae0c      	add	r6, sp, #48	@ 0x30
 8012ed4:	498b      	ldr	r1, [pc, #556]	@ (8013104 <dashboard+0x28c>)
 8012ed6:	4630      	mov	r0, r6
 8012ed8:	f00e fbce 	bl	8021678 <mg_str_s>
 8012edc:	2300      	movs	r3, #0
 8012ede:	9300      	str	r3, [sp, #0]
 8012ee0:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012ee4:	f104 0108 	add.w	r1, r4, #8
 8012ee8:	c903      	ldmia	r1, {r0, r1}
 8012eea:	f00e fd79 	bl	80219e0 <mg_match>
 8012eee:	b120      	cbz	r0, 8012efa <dashboard+0x82>
			handle_io_status_get(c, hm);
 8012ef0:	4621      	mov	r1, r4
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	f7ff faa8 	bl	8012448 <handle_io_status_get>
 8012ef8:	e7d6      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8012efa:	ae0e      	add	r6, sp, #56	@ 0x38
 8012efc:	4982      	ldr	r1, [pc, #520]	@ (8013108 <dashboard+0x290>)
 8012efe:	4630      	mov	r0, r6
 8012f00:	f00e fbba 	bl	8021678 <mg_str_s>
 8012f04:	2300      	movs	r3, #0
 8012f06:	9300      	str	r3, [sp, #0]
 8012f08:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012f0c:	f104 0108 	add.w	r1, r4, #8
 8012f10:	c903      	ldmia	r1, {r0, r1}
 8012f12:	f00e fd65 	bl	80219e0 <mg_match>
 8012f16:	b120      	cbz	r0, 8012f22 <dashboard+0xaa>
			handle_mqtt_conf(c, hm);
 8012f18:	4621      	mov	r1, r4
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	f7ff fb54 	bl	80125c8 <handle_mqtt_conf>
 8012f20:	e7c2      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8012f22:	ae10      	add	r6, sp, #64	@ 0x40
 8012f24:	4979      	ldr	r1, [pc, #484]	@ (801310c <dashboard+0x294>)
 8012f26:	4630      	mov	r0, r6
 8012f28:	f00e fba6 	bl	8021678 <mg_str_s>
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	9300      	str	r3, [sp, #0]
 8012f30:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012f34:	f104 0108 	add.w	r1, r4, #8
 8012f38:	c903      	ldmia	r1, {r0, r1}
 8012f3a:	f00e fd51 	bl	80219e0 <mg_match>
 8012f3e:	b120      	cbz	r0, 8012f4a <dashboard+0xd2>
			handle_dev_status(c, hm);
 8012f40:	4621      	mov	r1, r4
 8012f42:	4628      	mov	r0, r5
 8012f44:	f7ff fc78 	bl	8012838 <handle_dev_status>
 8012f48:	e7ae      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8012f4a:	ae12      	add	r6, sp, #72	@ 0x48
 8012f4c:	4970      	ldr	r1, [pc, #448]	@ (8013110 <dashboard+0x298>)
 8012f4e:	4630      	mov	r0, r6
 8012f50:	f00e fb92 	bl	8021678 <mg_str_s>
 8012f54:	2300      	movs	r3, #0
 8012f56:	9300      	str	r3, [sp, #0]
 8012f58:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012f5c:	f104 0108 	add.w	r1, r4, #8
 8012f60:	c903      	ldmia	r1, {r0, r1}
 8012f62:	f00e fd3d 	bl	80219e0 <mg_match>
 8012f66:	b128      	cbz	r0, 8012f74 <dashboard+0xfc>
			handle_fs_get_log(c, hm, 0);
 8012f68:	2200      	movs	r2, #0
 8012f6a:	4621      	mov	r1, r4
 8012f6c:	4628      	mov	r0, r5
 8012f6e:	f7ff fda1 	bl	8012ab4 <handle_fs_get_log>
 8012f72:	e799      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8012f74:	ae14      	add	r6, sp, #80	@ 0x50
 8012f76:	4967      	ldr	r1, [pc, #412]	@ (8013114 <dashboard+0x29c>)
 8012f78:	4630      	mov	r0, r6
 8012f7a:	f00e fb7d 	bl	8021678 <mg_str_s>
 8012f7e:	2300      	movs	r3, #0
 8012f80:	9300      	str	r3, [sp, #0]
 8012f82:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012f86:	f104 0108 	add.w	r1, r4, #8
 8012f8a:	c903      	ldmia	r1, {r0, r1}
 8012f8c:	f00e fd28 	bl	80219e0 <mg_match>
 8012f90:	b128      	cbz	r0, 8012f9e <dashboard+0x126>
			handle_fs_get_log(c, hm, 1);
 8012f92:	2201      	movs	r2, #1
 8012f94:	4621      	mov	r1, r4
 8012f96:	4628      	mov	r0, r5
 8012f98:	f7ff fd8c 	bl	8012ab4 <handle_fs_get_log>
 8012f9c:	e784      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8012f9e:	ae16      	add	r6, sp, #88	@ 0x58
 8012fa0:	495d      	ldr	r1, [pc, #372]	@ (8013118 <dashboard+0x2a0>)
 8012fa2:	4630      	mov	r0, r6
 8012fa4:	f00e fb68 	bl	8021678 <mg_str_s>
 8012fa8:	2300      	movs	r3, #0
 8012faa:	9300      	str	r3, [sp, #0]
 8012fac:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012fb0:	f104 0108 	add.w	r1, r4, #8
 8012fb4:	c903      	ldmia	r1, {r0, r1}
 8012fb6:	f00e fd13 	bl	80219e0 <mg_match>
 8012fba:	b120      	cbz	r0, 8012fc6 <dashboard+0x14e>
			handle_restart_mcu(c, hm);
 8012fbc:	4621      	mov	r1, r4
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	f7ff fdd6 	bl	8012b70 <handle_restart_mcu>
 8012fc4:	e770      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8012fc6:	ae18      	add	r6, sp, #96	@ 0x60
 8012fc8:	4954      	ldr	r1, [pc, #336]	@ (801311c <dashboard+0x2a4>)
 8012fca:	4630      	mov	r0, r6
 8012fcc:	f00e fb54 	bl	8021678 <mg_str_s>
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	9300      	str	r3, [sp, #0]
 8012fd4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012fd8:	68e1      	ldr	r1, [r4, #12]
 8012fda:	68a0      	ldr	r0, [r4, #8]
 8012fdc:	f00e fd00 	bl	80219e0 <mg_match>
 8012fe0:	b120      	cbz	r0, 8012fec <dashboard+0x174>
			handle_firmware_upload(c, hm);
 8012fe2:	4621      	mov	r1, r4
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	f7ff fdfd 	bl	8012be4 <handle_firmware_upload>
 8012fea:	e75d      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8012fec:	ae1a      	add	r6, sp, #104	@ 0x68
 8012fee:	494c      	ldr	r1, [pc, #304]	@ (8013120 <dashboard+0x2a8>)
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	f00e fb41 	bl	8021678 <mg_str_s>
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	9300      	str	r3, [sp, #0]
 8012ffa:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012ffe:	68e1      	ldr	r1, [r4, #12]
 8013000:	68a0      	ldr	r0, [r4, #8]
 8013002:	f00e fced 	bl	80219e0 <mg_match>
 8013006:	b120      	cbz	r0, 8013012 <dashboard+0x19a>
			handle_firmware_md5(c, hm);
 8013008:	4621      	mov	r1, r4
 801300a:	4628      	mov	r0, r5
 801300c:	f7ff fe98 	bl	8012d40 <handle_firmware_md5>
 8013010:	e74a      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/activate_and_reboot"), NULL)){
 8013012:	ae1c      	add	r6, sp, #112	@ 0x70
 8013014:	4943      	ldr	r1, [pc, #268]	@ (8013124 <dashboard+0x2ac>)
 8013016:	4630      	mov	r0, r6
 8013018:	f00e fb2e 	bl	8021678 <mg_str_s>
 801301c:	2300      	movs	r3, #0
 801301e:	9300      	str	r3, [sp, #0]
 8013020:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013024:	68e1      	ldr	r1, [r4, #12]
 8013026:	68a0      	ldr	r0, [r4, #8]
 8013028:	f00e fcda 	bl	80219e0 <mg_match>
 801302c:	b120      	cbz	r0, 8013038 <dashboard+0x1c0>
			handle_firmware_activate(c, hm);
 801302e:	4621      	mov	r1, r4
 8013030:	4628      	mov	r0, r5
 8013032:	f7ff f909 	bl	8012248 <handle_firmware_activate>
 8013036:	e737      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8013038:	ae1e      	add	r6, sp, #120	@ 0x78
 801303a:	493b      	ldr	r1, [pc, #236]	@ (8013128 <dashboard+0x2b0>)
 801303c:	4630      	mov	r0, r6
 801303e:	f00e fb1b 	bl	8021678 <mg_str_s>
 8013042:	2300      	movs	r3, #0
 8013044:	9300      	str	r3, [sp, #0]
 8013046:	e896 000c 	ldmia.w	r6, {r2, r3}
 801304a:	68e1      	ldr	r1, [r4, #12]
 801304c:	68a0      	ldr	r0, [r4, #8]
 801304e:	f00e fcc7 	bl	80219e0 <mg_match>
 8013052:	b120      	cbz	r0, 801305e <dashboard+0x1e6>
			handle_firmware_deactivate(c, hm);
 8013054:	4621      	mov	r1, r4
 8013056:	4628      	mov	r0, r5
 8013058:	f7ff f95e 	bl	8012318 <handle_firmware_deactivate>
 801305c:	e724      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 801305e:	ae20      	add	r6, sp, #128	@ 0x80
 8013060:	4932      	ldr	r1, [pc, #200]	@ (801312c <dashboard+0x2b4>)
 8013062:	4630      	mov	r0, r6
 8013064:	f00e fb08 	bl	8021678 <mg_str_s>
 8013068:	2300      	movs	r3, #0
 801306a:	9300      	str	r3, [sp, #0]
 801306c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013070:	68e1      	ldr	r1, [r4, #12]
 8013072:	68a0      	ldr	r0, [r4, #8]
 8013074:	f00e fcb4 	bl	80219e0 <mg_match>
 8013078:	b120      	cbz	r0, 8013084 <dashboard+0x20c>
			 handle_web_files_remove(c, hm);
 801307a:	4621      	mov	r1, r4
 801307c:	4628      	mov	r0, r5
 801307e:	f7ff f987 	bl	8012390 <handle_web_files_remove>
 8013082:	e711      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8013084:	ae22      	add	r6, sp, #136	@ 0x88
 8013086:	492a      	ldr	r1, [pc, #168]	@ (8013130 <dashboard+0x2b8>)
 8013088:	4630      	mov	r0, r6
 801308a:	f00e faf5 	bl	8021678 <mg_str_s>
 801308e:	2300      	movs	r3, #0
 8013090:	9300      	str	r3, [sp, #0]
 8013092:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013096:	68e1      	ldr	r1, [r4, #12]
 8013098:	68a0      	ldr	r0, [r4, #8]
 801309a:	f00e fca1 	bl	80219e0 <mg_match>
 801309e:	b140      	cbz	r0, 80130b2 <dashboard+0x23a>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 80130a0:	4b24      	ldr	r3, [pc, #144]	@ (8013134 <dashboard+0x2bc>)
 80130a2:	9300      	str	r3, [sp, #0]
 80130a4:	4b24      	ldr	r3, [pc, #144]	@ (8013138 <dashboard+0x2c0>)
 80130a6:	4a25      	ldr	r2, [pc, #148]	@ (801313c <dashboard+0x2c4>)
 80130a8:	4621      	mov	r1, r4
 80130aa:	4628      	mov	r0, r5
 80130ac:	f010 fe5c 	bl	8023d68 <mg_http_upload>
 80130b0:	e6fa      	b.n	8012ea8 <dashboard+0x30>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 80130b2:	ae24      	add	r6, sp, #144	@ 0x90
 80130b4:	4922      	ldr	r1, [pc, #136]	@ (8013140 <dashboard+0x2c8>)
 80130b6:	4630      	mov	r0, r6
 80130b8:	f00e fade 	bl	8021678 <mg_str_s>
 80130bc:	2300      	movs	r3, #0
 80130be:	9300      	str	r3, [sp, #0]
 80130c0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80130c4:	68e1      	ldr	r1, [r4, #12]
 80130c6:	68a0      	ldr	r0, [r4, #8]
 80130c8:	f00e fc8a 	bl	80219e0 <mg_match>
 80130cc:	b120      	cbz	r0, 80130d8 <dashboard+0x260>
			 handle_fs_mkdir(c, hm);
 80130ce:	4621      	mov	r1, r4
 80130d0:	4628      	mov	r0, r5
 80130d2:	f7ff fe79 	bl	8012dc8 <handle_fs_mkdir>
 80130d6:	e6e7      	b.n	8012ea8 <dashboard+0x30>
			struct mg_http_serve_opts opts = {
 80130d8:	2300      	movs	r3, #0
 80130da:	9302      	str	r3, [sp, #8]
 80130dc:	9303      	str	r3, [sp, #12]
 80130de:	9304      	str	r3, [sp, #16]
 80130e0:	9305      	str	r3, [sp, #20]
 80130e2:	9306      	str	r3, [sp, #24]
 80130e4:	9307      	str	r3, [sp, #28]
 80130e6:	4b14      	ldr	r3, [pc, #80]	@ (8013138 <dashboard+0x2c0>)
 80130e8:	9302      	str	r3, [sp, #8]
 80130ea:	4b14      	ldr	r3, [pc, #80]	@ (801313c <dashboard+0x2c4>)
 80130ec:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 80130ee:	aa02      	add	r2, sp, #8
 80130f0:	4621      	mov	r1, r4
 80130f2:	4628      	mov	r0, r5
 80130f4:	f010 fd52 	bl	8023b9c <mg_http_serve_dir>
}
 80130f8:	e6d6      	b.n	8012ea8 <dashboard+0x30>
 80130fa:	bf00      	nop
 80130fc:	0803402c 	.word	0x0803402c
 8013100:	08034034 	.word	0x08034034
 8013104:	08034044 	.word	0x08034044
 8013108:	08034054 	.word	0x08034054
 801310c:	08034068 	.word	0x08034068
 8013110:	0803407c 	.word	0x0803407c
 8013114:	0803408c 	.word	0x0803408c
 8013118:	080340a0 	.word	0x080340a0
 801311c:	080340b4 	.word	0x080340b4
 8013120:	080340cc 	.word	0x080340cc
 8013124:	080340e0 	.word	0x080340e0
 8013128:	08034104 	.word	0x08034104
 801312c:	08034120 	.word	0x08034120
 8013130:	0803413c 	.word	0x0803413c
 8013134:	0016e360 	.word	0x0016e360
 8013138:	080330d8 	.word	0x080330d8
 801313c:	2000001c 	.word	0x2000001c
 8013140:	08034158 	.word	0x08034158

08013144 <dash_hdl>:

void * dash_hdl (void){
	return &dashboard;
}
 8013144:	4800      	ldr	r0, [pc, #0]	@ (8013148 <dash_hdl+0x4>)
 8013146:	4770      	bx	lr
 8013148:	08012e79 	.word	0x08012e79

0801314c <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 801314c:	4b01      	ldr	r3, [pc, #4]	@ (8013154 <reg_parameter_handler+0x8>)
 801314e:	6018      	str	r0, [r3, #0]
}
 8013150:	4770      	bx	lr
 8013152:	bf00      	nop
 8013154:	20000994 	.word	0x20000994

08013158 <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 8013158:	4b1a      	ldr	r3, [pc, #104]	@ (80131c4 <_ZL18mqtt_timer_handlerPv+0x6c>)
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	b103      	cbz	r3, 8013160 <_ZL18mqtt_timer_handlerPv+0x8>
 801315e:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 8013160:	b530      	push	{r4, r5, lr}
 8013162:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 8013164:	4918      	ldr	r1, [pc, #96]	@ (80131c8 <_ZL18mqtt_timer_handlerPv+0x70>)
 8013166:	2001      	movs	r0, #1
 8013168:	f7fe fd8a 	bl	8011c80 <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 801316c:	4c17      	ldr	r4, [pc, #92]	@ (80131cc <_ZL18mqtt_timer_handlerPv+0x74>)
 801316e:	2240      	movs	r2, #64	@ 0x40
 8013170:	2100      	movs	r1, #0
 8013172:	4620      	mov	r0, r4
 8013174:	f016 fcb4 	bl	8029ae0 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8013178:	ad02      	add	r5, sp, #8
 801317a:	4b15      	ldr	r3, [pc, #84]	@ (80131d0 <_ZL18mqtt_timer_handlerPv+0x78>)
 801317c:	6819      	ldr	r1, [r3, #0]
 801317e:	4628      	mov	r0, r5
 8013180:	f00e fa7a 	bl	8021678 <mg_str_s>
 8013184:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013188:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 801318c:	4b11      	ldr	r3, [pc, #68]	@ (80131d4 <_ZL18mqtt_timer_handlerPv+0x7c>)
 801318e:	6819      	ldr	r1, [r3, #0]
 8013190:	4628      	mov	r0, r5
 8013192:	f00e fa71 	bl	8021678 <mg_str_s>
 8013196:	f104 0308 	add.w	r3, r4, #8
 801319a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801319e:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 80131a2:	233c      	movs	r3, #60	@ 0x3c
 80131a4:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 80131a6:	2300      	movs	r3, #0
 80131a8:	9300      	str	r3, [sp, #0]
 80131aa:	4b0b      	ldr	r3, [pc, #44]	@ (80131d8 <_ZL18mqtt_timer_handlerPv+0x80>)
 80131ac:	4622      	mov	r2, r4
 80131ae:	490b      	ldr	r1, [pc, #44]	@ (80131dc <_ZL18mqtt_timer_handlerPv+0x84>)
 80131b0:	6809      	ldr	r1, [r1, #0]
 80131b2:	480b      	ldr	r0, [pc, #44]	@ (80131e0 <_ZL18mqtt_timer_handlerPv+0x88>)
 80131b4:	6800      	ldr	r0, [r0, #0]
 80131b6:	f012 fe97 	bl	8025ee8 <mg_mqtt_connect>
 80131ba:	4b02      	ldr	r3, [pc, #8]	@ (80131c4 <_ZL18mqtt_timer_handlerPv+0x6c>)
 80131bc:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 80131be:	b005      	add	sp, #20
 80131c0:	bd30      	pop	{r4, r5, pc}
 80131c2:	bf00      	nop
 80131c4:	200009b8 	.word	0x200009b8
 80131c8:	08034174 	.word	0x08034174
 80131cc:	200009bc 	.word	0x200009bc
 80131d0:	20000a10 	.word	0x20000a10
 80131d4:	20000a0c 	.word	0x20000a0c
 80131d8:	08013735 	.word	0x08013735
 80131dc:	20000a14 	.word	0x20000a14
 80131e0:	20000a00 	.word	0x20000a00

080131e4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 80131e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131e8:	b085      	sub	sp, #20
 80131ea:	4681      	mov	r9, r0
 80131ec:	4688      	mov	r8, r1
 80131ee:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 80131f0:	4c2a      	ldr	r4, [pc, #168]	@ (801329c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 80131f2:	f100 0308 	add.w	r3, r0, #8
 80131f6:	9300      	str	r3, [sp, #0]
 80131f8:	4b29      	ldr	r3, [pc, #164]	@ (80132a0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 80131fa:	4a2a      	ldr	r2, [pc, #168]	@ (80132a4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 80131fc:	2128      	movs	r1, #40	@ 0x28
 80131fe:	6820      	ldr	r0, [r4, #0]
 8013200:	f00d fc5a 	bl	8020ab8 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8013204:	6824      	ldr	r4, [r4, #0]
 8013206:	4620      	mov	r0, r4
 8013208:	f7fd f84a 	bl	80102a0 <strlen>
 801320c:	4601      	mov	r1, r0
 801320e:	4620      	mov	r0, r4
 8013210:	f000 fbe0 	bl	80139d4 <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 8013214:	2600      	movs	r6, #0
 8013216:	e03b      	b.n	8013290 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 8013218:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 801321c:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 8013220:	791d      	ldrb	r5, [r3, #4]
 8013222:	4f21      	ldr	r7, [pc, #132]	@ (80132a8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 8013224:	462b      	mov	r3, r5
 8013226:	4622      	mov	r2, r4
 8013228:	2180      	movs	r1, #128	@ 0x80
 801322a:	6838      	ldr	r0, [r7, #0]
 801322c:	f000 fbf0 	bl	8013a10 <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8013230:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80132b4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 8013234:	462b      	mov	r3, r5
 8013236:	4622      	mov	r2, r4
 8013238:	f44f 7116 	mov.w	r1, #600	@ 0x258
 801323c:	f8db 0000 	ldr.w	r0, [fp]
 8013240:	f000 fc96 	bl	8013b70 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8013244:	4d19      	ldr	r5, [pc, #100]	@ (80132ac <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 8013246:	ac02      	add	r4, sp, #8
 8013248:	6839      	ldr	r1, [r7, #0]
 801324a:	4620      	mov	r0, r4
 801324c:	f00e fa14 	bl	8021678 <mg_str_s>
 8013250:	f105 0318 	add.w	r3, r5, #24
 8013254:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013258:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 801325c:	f8db 1000 	ldr.w	r1, [fp]
 8013260:	4620      	mov	r0, r4
 8013262:	f00e fa09 	bl	8021678 <mg_str_s>
 8013266:	f105 0320 	add.w	r3, r5, #32
 801326a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801326e:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8013272:	2401      	movs	r4, #1
 8013274:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8013278:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 801327c:	4629      	mov	r1, r5
 801327e:	4648      	mov	r0, r9
 8013280:	f011 fb98 	bl	80249b4 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8013284:	683a      	ldr	r2, [r7, #0]
 8013286:	490a      	ldr	r1, [pc, #40]	@ (80132b0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 8013288:	4620      	mov	r0, r4
 801328a:	f7fe fcf9 	bl	8011c80 <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 801328e:	4426      	add	r6, r4
 8013290:	4556      	cmp	r6, sl
 8013292:	d3c1      	bcc.n	8013218 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 8013294:	b005      	add	sp, #20
 8013296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801329a:	bf00      	nop
 801329c:	200009b4 	.word	0x200009b4
 80132a0:	080231f9 	.word	0x080231f9
 80132a4:	08033d64 	.word	0x08033d64
 80132a8:	20000a08 	.word	0x20000a08
 80132ac:	200009bc 	.word	0x200009bc
 80132b0:	08034194 	.word	0x08034194
 80132b4:	20000a04 	.word	0x20000a04

080132b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 80132b8:	b570      	push	{r4, r5, r6, lr}
 80132ba:	b084      	sub	sp, #16
	int relay_number = 0;  // Переменная для хранения номера реле
 80132bc:	2300      	movs	r3, #0
 80132be:	9301      	str	r3, [sp, #4]
    const char *topic = mess->topic.buf;
 80132c0:	6805      	ldr	r5, [r0, #0]
    const char *message = mess->data.buf;
 80132c2:	6886      	ldr	r6, [r0, #8]
    if(message == NULL || topic == NULL){
 80132c4:	b326      	cbz	r6, 8013310 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
 80132c6:	4604      	mov	r4, r0
 80132c8:	b315      	cbz	r5, 8013310 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 80132ca:	4b71      	ldr	r3, [pc, #452]	@ (8013490 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2200      	movs	r2, #0
 80132d0:	2102      	movs	r1, #2
 80132d2:	a803      	add	r0, sp, #12
 80132d4:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 80132d6:	9b03      	ldr	r3, [sp, #12]
 80132d8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80132dc:	0c1b      	lsrs	r3, r3, #16
 80132de:	f88d 300a 	strb.w	r3, [sp, #10]
    const char *switch_position = strstr(topic, "switch");
 80132e2:	496c      	ldr	r1, [pc, #432]	@ (8013494 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1dc>)
 80132e4:	4628      	mov	r0, r5
 80132e6:	f016 fc7b 	bl	8029be0 <strstr>
    if (switch_position != NULL) {
 80132ea:	2800      	cmp	r0, #0
 80132ec:	f000 80ba 	beq.w	8013464 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ac>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 80132f0:	aa01      	add	r2, sp, #4
 80132f2:	4969      	ldr	r1, [pc, #420]	@ (8013498 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e0>)
 80132f4:	f016 f852 	bl	802939c <sscanf>
 80132f8:	2801      	cmp	r0, #1
 80132fa:	d018      	beq.n	801332e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x76>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 80132fc:	4b67      	ldr	r3, [pc, #412]	@ (801349c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2b00      	cmp	r3, #0
 8013302:	f300 80a5 	bgt.w	8013450 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x198>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 8013306:	4966      	ldr	r1, [pc, #408]	@ (80134a0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e8>)
 8013308:	2003      	movs	r0, #3
 801330a:	f7fe fcb9 	bl	8011c80 <logging>
 801330e:	e0b2      	b.n	8013476 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8013310:	4b62      	ldr	r3, [pc, #392]	@ (801349c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	2b00      	cmp	r3, #0
 8013316:	f340 80ae 	ble.w	8013476 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
 801331a:	4b62      	ldr	r3, [pc, #392]	@ (80134a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 801331c:	2292      	movs	r2, #146	@ 0x92
 801331e:	4962      	ldr	r1, [pc, #392]	@ (80134a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013320:	2001      	movs	r0, #1
 8013322:	f00f ffe1 	bl	80232e8 <mg_log_prefix>
 8013326:	4861      	ldr	r0, [pc, #388]	@ (80134ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 8013328:	f00e f870 	bl	802140c <mg_log>
    	return;
 801332c:	e0a3      	b.n	8013476 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 801332e:	4b5b      	ldr	r3, [pc, #364]	@ (801349c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2b01      	cmp	r3, #1
 8013334:	dc18      	bgt.n	8013368 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb0>
    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 8013336:	462b      	mov	r3, r5
 8013338:	9a01      	ldr	r2, [sp, #4]
 801333a:	495d      	ldr	r1, [pc, #372]	@ (80134b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 801333c:	2001      	movs	r0, #1
 801333e:	f7fe fc9f 	bl	8011c80 <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 8013342:	9d01      	ldr	r5, [sp, #4]
 8013344:	1e6b      	subs	r3, r5, #1
 8013346:	2b02      	cmp	r3, #2
 8013348:	d81a      	bhi.n	8013380 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc8>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 801334a:	68e4      	ldr	r4, [r4, #12]
 801334c:	2c02      	cmp	r4, #2
 801334e:	d02e      	beq.n	80133ae <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf6>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8013350:	2c03      	cmp	r4, #3
 8013352:	d04f      	beq.n	80133f4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x13c>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 8013354:	4b51      	ldr	r3, [pc, #324]	@ (801349c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	2b00      	cmp	r3, #0
 801335a:	dc6e      	bgt.n	801343a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x182>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 801335c:	4632      	mov	r2, r6
 801335e:	4955      	ldr	r1, [pc, #340]	@ (80134b4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8013360:	2003      	movs	r0, #3
 8013362:	f7fe fc8d 	bl	8011c80 <logging>
 8013366:	e086      	b.n	8013476 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8013368:	4b4e      	ldr	r3, [pc, #312]	@ (80134a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 801336a:	229f      	movs	r2, #159	@ 0x9f
 801336c:	494e      	ldr	r1, [pc, #312]	@ (80134a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 801336e:	2002      	movs	r0, #2
 8013370:	f00f ffba 	bl	80232e8 <mg_log_prefix>
 8013374:	462a      	mov	r2, r5
 8013376:	9901      	ldr	r1, [sp, #4]
 8013378:	484f      	ldr	r0, [pc, #316]	@ (80134b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x200>)
 801337a:	f00e f847 	bl	802140c <mg_log>
 801337e:	e7da      	b.n	8013336 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x7e>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8013380:	4b46      	ldr	r3, [pc, #280]	@ (801349c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	2b00      	cmp	r3, #0
 8013386:	dc06      	bgt.n	8013396 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xde>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 8013388:	9b01      	ldr	r3, [sp, #4]
 801338a:	2203      	movs	r2, #3
 801338c:	494b      	ldr	r1, [pc, #300]	@ (80134bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 801338e:	4610      	mov	r0, r2
 8013390:	f7fe fc76 	bl	8011c80 <logging>
    			return;
 8013394:	e06f      	b.n	8013476 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8013396:	4b43      	ldr	r3, [pc, #268]	@ (80134a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013398:	22a4      	movs	r2, #164	@ 0xa4
 801339a:	4943      	ldr	r1, [pc, #268]	@ (80134a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 801339c:	2001      	movs	r0, #1
 801339e:	f00f ffa3 	bl	80232e8 <mg_log_prefix>
 80133a2:	9a01      	ldr	r2, [sp, #4]
 80133a4:	2103      	movs	r1, #3
 80133a6:	4845      	ldr	r0, [pc, #276]	@ (80134bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 80133a8:	f00e f830 	bl	802140c <mg_log>
 80133ac:	e7ec      	b.n	8013388 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd0>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 80133ae:	2202      	movs	r2, #2
 80133b0:	4943      	ldr	r1, [pc, #268]	@ (80134c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x208>)
 80133b2:	4630      	mov	r0, r6
 80133b4:	f016 fbc9 	bl	8029b4a <strncmp>
 80133b8:	2800      	cmp	r0, #0
 80133ba:	d1c9      	bne.n	8013350 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x98>
				sw_w[relay_number-1] = 1;
 80133bc:	f105 030f 	add.w	r3, r5, #15
 80133c0:	446b      	add	r3, sp
 80133c2:	2201      	movs	r2, #1
 80133c4:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 80133c8:	4b34      	ldr	r3, [pc, #208]	@ (801349c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	4293      	cmp	r3, r2
 80133ce:	dc06      	bgt.n	80133de <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x126>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 80133d0:	4b2f      	ldr	r3, [pc, #188]	@ (8013490 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	2201      	movs	r2, #1
 80133d6:	2102      	movs	r1, #2
 80133d8:	a802      	add	r0, sp, #8
 80133da:	4798      	blx	r3
 80133dc:	e04b      	b.n	8013476 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 80133de:	4b31      	ldr	r3, [pc, #196]	@ (80134a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80133e0:	22ae      	movs	r2, #174	@ 0xae
 80133e2:	4931      	ldr	r1, [pc, #196]	@ (80134a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80133e4:	2002      	movs	r0, #2
 80133e6:	f00f ff7f 	bl	80232e8 <mg_log_prefix>
 80133ea:	9901      	ldr	r1, [sp, #4]
 80133ec:	4835      	ldr	r0, [pc, #212]	@ (80134c4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>)
 80133ee:	f00e f80d 	bl	802140c <mg_log>
 80133f2:	e7ed      	b.n	80133d0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x118>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 80133f4:	2203      	movs	r2, #3
 80133f6:	4934      	ldr	r1, [pc, #208]	@ (80134c8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>)
 80133f8:	4630      	mov	r0, r6
 80133fa:	f016 fba6 	bl	8029b4a <strncmp>
 80133fe:	2800      	cmp	r0, #0
 8013400:	d1a8      	bne.n	8013354 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x9c>
				sw_w[relay_number-1] = 0;
 8013402:	f105 030f 	add.w	r3, r5, #15
 8013406:	446b      	add	r3, sp
 8013408:	2200      	movs	r2, #0
 801340a:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 801340e:	4b23      	ldr	r3, [pc, #140]	@ (801349c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	2b01      	cmp	r3, #1
 8013414:	dc06      	bgt.n	8013424 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x16c>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8013416:	4b1e      	ldr	r3, [pc, #120]	@ (8013490 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	2201      	movs	r2, #1
 801341c:	2102      	movs	r1, #2
 801341e:	a802      	add	r0, sp, #8
 8013420:	4798      	blx	r3
 8013422:	e028      	b.n	8013476 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8013424:	4b1f      	ldr	r3, [pc, #124]	@ (80134a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013426:	22b2      	movs	r2, #178	@ 0xb2
 8013428:	491f      	ldr	r1, [pc, #124]	@ (80134a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 801342a:	2002      	movs	r0, #2
 801342c:	f00f ff5c 	bl	80232e8 <mg_log_prefix>
 8013430:	9901      	ldr	r1, [sp, #4]
 8013432:	4826      	ldr	r0, [pc, #152]	@ (80134cc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x214>)
 8013434:	f00d ffea 	bl	802140c <mg_log>
 8013438:	e7ed      	b.n	8013416 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x15e>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 801343a:	4b1a      	ldr	r3, [pc, #104]	@ (80134a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 801343c:	22b6      	movs	r2, #182	@ 0xb6
 801343e:	491a      	ldr	r1, [pc, #104]	@ (80134a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013440:	2001      	movs	r0, #1
 8013442:	f00f ff51 	bl	80232e8 <mg_log_prefix>
 8013446:	4631      	mov	r1, r6
 8013448:	481a      	ldr	r0, [pc, #104]	@ (80134b4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 801344a:	f00d ffdf 	bl	802140c <mg_log>
 801344e:	e785      	b.n	801335c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xa4>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8013450:	4b14      	ldr	r3, [pc, #80]	@ (80134a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8013452:	22bb      	movs	r2, #187	@ 0xbb
 8013454:	4914      	ldr	r1, [pc, #80]	@ (80134a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013456:	2001      	movs	r0, #1
 8013458:	f00f ff46 	bl	80232e8 <mg_log_prefix>
 801345c:	481c      	ldr	r0, [pc, #112]	@ (80134d0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>)
 801345e:	f00d ffd5 	bl	802140c <mg_log>
 8013462:	e750      	b.n	8013306 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x4e>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8013464:	4b0d      	ldr	r3, [pc, #52]	@ (801349c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	dc06      	bgt.n	801347a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c2>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 801346c:	462a      	mov	r2, r5
 801346e:	4919      	ldr	r1, [pc, #100]	@ (80134d4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 8013470:	2003      	movs	r0, #3
 8013472:	f7fe fc05 	bl	8011c80 <logging>
}
 8013476:	b004      	add	sp, #16
 8013478:	bd70      	pop	{r4, r5, r6, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 801347a:	4b0a      	ldr	r3, [pc, #40]	@ (80134a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 801347c:	22bf      	movs	r2, #191	@ 0xbf
 801347e:	490a      	ldr	r1, [pc, #40]	@ (80134a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8013480:	2001      	movs	r0, #1
 8013482:	f00f ff31 	bl	80232e8 <mg_log_prefix>
 8013486:	4629      	mov	r1, r5
 8013488:	4812      	ldr	r0, [pc, #72]	@ (80134d4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 801348a:	f00d ffbf 	bl	802140c <mg_log>
 801348e:	e7ed      	b.n	801346c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1b4>
 8013490:	200009a0 	.word	0x200009a0
 8013494:	08034228 	.word	0x08034228
 8013498:	08034230 	.word	0x08034230
 801349c:	200000a8 	.word	0x200000a8
 80134a0:	08034384 	.word	0x08034384
 80134a4:	080341b8 	.word	0x080341b8
 80134a8:	080341d8 	.word	0x080341d8
 80134ac:	08034204 	.word	0x08034204
 80134b0:	08034268 	.word	0x08034268
 80134b4:	08034310 	.word	0x08034310
 80134b8:	0803423c 	.word	0x0803423c
 80134bc:	08034290 	.word	0x08034290
 80134c0:	080342e0 	.word	0x080342e0
 80134c4:	080342e4 	.word	0x080342e4
 80134c8:	080342f8 	.word	0x080342f8
 80134cc:	080342fc 	.word	0x080342fc
 80134d0:	0803434c 	.word	0x0803434c
 80134d4:	080343bc 	.word	0x080343bc

080134d8 <_ZL9my_callocjj>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 80134d8:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80134da:	fb01 f400 	mul.w	r4, r1, r0
 80134de:	4620      	mov	r0, r4
 80134e0:	f005 fdfa 	bl	80190d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80134e4:	4605      	mov	r5, r0
 80134e6:	b118      	cbz	r0, 80134f0 <_ZL9my_callocjj+0x18>
 80134e8:	4622      	mov	r2, r4
 80134ea:	2100      	movs	r1, #0
 80134ec:	f016 faf8 	bl	8029ae0 <memset>
  return p;
}
 80134f0:	4628      	mov	r0, r5
 80134f2:	bd38      	pop	{r3, r4, r5, pc}

080134f4 <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 80134f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134f8:	b087      	sub	sp, #28
 80134fa:	4607      	mov	r7, r0
 80134fc:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 80134fe:	4d58      	ldr	r5, [pc, #352]	@ (8013660 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 8013500:	682b      	ldr	r3, [r5, #0]
 8013502:	2200      	movs	r2, #0
 8013504:	2101      	movs	r1, #1
 8013506:	a804      	add	r0, sp, #16
 8013508:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 801350a:	682b      	ldr	r3, [r5, #0]
 801350c:	2200      	movs	r2, #0
 801350e:	2102      	movs	r1, #2
 8013510:	f10d 0013 	add.w	r0, sp, #19
 8013514:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8013516:	2203      	movs	r2, #3
 8013518:	4952      	ldr	r1, [pc, #328]	@ (8013664 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 801351a:	a804      	add	r0, sp, #16
 801351c:	f016 fa4c 	bl	80299b8 <memcmp>
 8013520:	b948      	cbnz	r0, 8013536 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8013522:	2203      	movs	r2, #3
 8013524:	4950      	ldr	r1, [pc, #320]	@ (8013668 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 8013526:	f10d 0013 	add.w	r0, sp, #19
 801352a:	f016 fa45 	bl	80299b8 <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 801352e:	b910      	cbnz	r0, 8013536 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8013530:	2c00      	cmp	r4, #0
 8013532:	f000 8091 	beq.w	8013658 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 8013536:	4b4b      	ldr	r3, [pc, #300]	@ (8013664 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8013538:	aa06      	add	r2, sp, #24
 801353a:	e912 0003 	ldmdb	r2, {r0, r1}
 801353e:	6018      	str	r0, [r3, #0]
 8013540:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8013542:	2101      	movs	r1, #1
 8013544:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013548:	f7ff ffc6 	bl	80134d8 <_ZL9my_callocjj>
 801354c:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 801354e:	2101      	movs	r1, #1
 8013550:	2080      	movs	r0, #128	@ 0x80
 8013552:	f7ff ffc1 	bl	80134d8 <_ZL9my_callocjj>
 8013556:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 8013558:	2200      	movs	r2, #0
 801355a:	e038      	b.n	80135ce <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 801355c:	f102 0801 	add.w	r8, r2, #1
 8013560:	fa5f f888 	uxtb.w	r8, r8
 8013564:	f102 0318 	add.w	r3, r2, #24
 8013568:	eb0d 0203 	add.w	r2, sp, r3
 801356c:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8013570:	9300      	str	r3, [sp, #0]
 8013572:	4643      	mov	r3, r8
 8013574:	2201      	movs	r2, #1
 8013576:	f44f 7116 	mov.w	r1, #600	@ 0x258
 801357a:	4630      	mov	r0, r6
 801357c:	f000 fcec 	bl	8013f58 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8013580:	4643      	mov	r3, r8
 8013582:	2201      	movs	r2, #1
 8013584:	2180      	movs	r1, #128	@ 0x80
 8013586:	4628      	mov	r0, r5
 8013588:	f000 fd26 	bl	8013fd8 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 801358c:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 801366c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8013590:	ac02      	add	r4, sp, #8
 8013592:	4629      	mov	r1, r5
 8013594:	4620      	mov	r0, r4
 8013596:	f00e f86f 	bl	8021678 <mg_str_s>
 801359a:	f109 0318 	add.w	r3, r9, #24
 801359e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80135a2:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 80135a6:	4631      	mov	r1, r6
 80135a8:	4620      	mov	r0, r4
 80135aa:	f00e f865 	bl	8021678 <mg_str_s>
 80135ae:	f109 0320 	add.w	r3, r9, #32
 80135b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80135b6:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 80135ba:	2300      	movs	r3, #0
 80135bc:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 80135c0:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 80135c4:	4649      	mov	r1, r9
 80135c6:	4638      	mov	r0, r7
 80135c8:	f011 f9f4 	bl	80249b4 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 80135cc:	4642      	mov	r2, r8
 80135ce:	2a02      	cmp	r2, #2
 80135d0:	d9c4      	bls.n	801355c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 80135d2:	2200      	movs	r2, #0
 80135d4:	e038      	b.n	8013648 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 80135d6:	f102 0801 	add.w	r8, r2, #1
 80135da:	fa5f f888 	uxtb.w	r8, r8
 80135de:	f102 0318 	add.w	r3, r2, #24
 80135e2:	eb0d 0203 	add.w	r2, sp, r3
 80135e6:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 80135ea:	9300      	str	r3, [sp, #0]
 80135ec:	4643      	mov	r3, r8
 80135ee:	2202      	movs	r2, #2
 80135f0:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80135f4:	4630      	mov	r0, r6
 80135f6:	f000 fcaf 	bl	8013f58 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 80135fa:	4643      	mov	r3, r8
 80135fc:	2202      	movs	r2, #2
 80135fe:	2180      	movs	r1, #128	@ 0x80
 8013600:	4628      	mov	r0, r5
 8013602:	f000 fce9 	bl	8013fd8 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8013606:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 801366c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 801360a:	ac02      	add	r4, sp, #8
 801360c:	4629      	mov	r1, r5
 801360e:	4620      	mov	r0, r4
 8013610:	f00e f832 	bl	8021678 <mg_str_s>
 8013614:	f109 0318 	add.w	r3, r9, #24
 8013618:	e894 0003 	ldmia.w	r4, {r0, r1}
 801361c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8013620:	4631      	mov	r1, r6
 8013622:	4620      	mov	r0, r4
 8013624:	f00e f828 	bl	8021678 <mg_str_s>
 8013628:	f109 0320 	add.w	r3, r9, #32
 801362c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013630:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8013634:	2300      	movs	r3, #0
 8013636:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 801363a:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 801363e:	4649      	mov	r1, r9
 8013640:	4638      	mov	r0, r7
 8013642:	f011 f9b7 	bl	80249b4 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8013646:	4642      	mov	r2, r8
 8013648:	2a02      	cmp	r2, #2
 801364a:	d9c4      	bls.n	80135d6 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 801364c:	4630      	mov	r0, r6
 801364e:	f005 fdc5 	bl	80191dc <vPortFree>
		free(topik);
 8013652:	4628      	mov	r0, r5
 8013654:	f005 fdc2 	bl	80191dc <vPortFree>
}
 8013658:	b007      	add	sp, #28
 801365a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801365e:	bf00      	nop
 8013660:	200009a0 	.word	0x200009a0
 8013664:	20000998 	.word	0x20000998
 8013668:	2000099b 	.word	0x2000099b
 801366c:	200009bc 	.word	0x200009bc

08013670 <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8013670:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 8013672:	4b05      	ldr	r3, [pc, #20]	@ (8013688 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 8013674:	6818      	ldr	r0, [r3, #0]
 8013676:	b110      	cbz	r0, 801367e <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8013678:	4b04      	ldr	r3, [pc, #16]	@ (801368c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 801367a:	781b      	ldrb	r3, [r3, #0]
 801367c:	b903      	cbnz	r3, 8013680 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
		mqtt_send_io_status(mqtt_conn, 0);
	}
}
 801367e:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 8013680:	2100      	movs	r1, #0
 8013682:	f7ff ff37 	bl	80134f4 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8013686:	e7fa      	b.n	801367e <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8013688:	200009b8 	.word	0x200009b8
 801368c:	200009a4 	.word	0x200009a4

08013690 <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8013690:	b508      	push	{r3, lr}
	if(is_registered){
 8013692:	4b05      	ldr	r3, [pc, #20]	@ (80136a8 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	b903      	cbnz	r3, 801369a <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 8013698:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 801369a:	2101      	movs	r1, #1
 801369c:	4b03      	ldr	r3, [pc, #12]	@ (80136ac <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 801369e:	6818      	ldr	r0, [r3, #0]
 80136a0:	f7ff ff28 	bl	80134f4 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 80136a4:	e7f8      	b.n	8013698 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 80136a6:	bf00      	nop
 80136a8:	200009a4 	.word	0x200009a4
 80136ac:	200009b8 	.word	0x200009b8

080136b0 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 80136b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b4:	b083      	sub	sp, #12
 80136b6:	4681      	mov	r9, r0
 80136b8:	460d      	mov	r5, r1
 80136ba:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 80136bc:	2400      	movs	r4, #0
 80136be:	e000      	b.n	80136c2 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 80136c0:	3401      	adds	r4, #1
 80136c2:	42b4      	cmp	r4, r6
 80136c4:	d22e      	bcs.n	8013724 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 80136c6:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 80136ca:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80136ce:	2b02      	cmp	r3, #2
 80136d0:	d1f6      	bne.n	80136c0 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80136d2:	2101      	movs	r1, #1
 80136d4:	2080      	movs	r0, #128	@ 0x80
 80136d6:	f7ff feff 	bl	80134d8 <_ZL9my_callocjj>
 80136da:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 80136dc:	f898 3004 	ldrb.w	r3, [r8, #4]
 80136e0:	2202      	movs	r2, #2
 80136e2:	2180      	movs	r1, #128	@ 0x80
 80136e4:	f000 fc60 	bl	8013fa8 <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 80136e8:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8013730 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 80136ec:	f04f 0b01 	mov.w	fp, #1
 80136f0:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 80136f4:	46ea      	mov	sl, sp
 80136f6:	4639      	mov	r1, r7
 80136f8:	4650      	mov	r0, sl
 80136fa:	f00d ffbd 	bl	8021678 <mg_str_s>
 80136fe:	f108 0318 	add.w	r3, r8, #24
 8013702:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8013706:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 801370a:	4641      	mov	r1, r8
 801370c:	4648      	mov	r0, r9
 801370e:	f011 f903 	bl	8024918 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 8013712:	463a      	mov	r2, r7
 8013714:	4905      	ldr	r1, [pc, #20]	@ (801372c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 8013716:	4658      	mov	r0, fp
 8013718:	f7fe fab2 	bl	8011c80 <logging>
			free(topik);
 801371c:	4638      	mov	r0, r7
 801371e:	f005 fd5d 	bl	80191dc <vPortFree>
 8013722:	e7cd      	b.n	80136c0 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 8013724:	b003      	add	sp, #12
 8013726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801372a:	bf00      	nop
 801372c:	080343ec 	.word	0x080343ec
 8013730:	200009bc 	.word	0x200009bc

08013734 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 8013734:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 8013736:	2910      	cmp	r1, #16
 8013738:	d031      	beq.n	801379e <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x6a>
 801373a:	4605      	mov	r5, r0
 801373c:	2911      	cmp	r1, #17
 801373e:	d002      	beq.n	8013746 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x12>
 8013740:	2909      	cmp	r1, #9
 8013742:	d03a      	beq.n	80137ba <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x86>
}
 8013744:	bd70      	pop	{r4, r5, r6, pc}
		MG_DEBUG(("MQTT_open_connection"));
 8013746:	4b22      	ldr	r3, [pc, #136]	@ (80137d0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2b02      	cmp	r3, #2
 801374c:	dc1d      	bgt.n	801378a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x56>
		logging(L_INFO, "MQTT Open connection");
 801374e:	4921      	ldr	r1, [pc, #132]	@ (80137d4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 8013750:	2001      	movs	r0, #1
 8013752:	f7fe fa95 	bl	8011c80 <logging>
		mqtt_conn = conn;
 8013756:	4b20      	ldr	r3, [pc, #128]	@ (80137d8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8013758:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 801375a:	4b20      	ldr	r3, [pc, #128]	@ (80137dc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 801375c:	781b      	ldrb	r3, [r3, #0]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d1f0      	bne.n	8013744 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8013762:	4e1f      	ldr	r6, [pc, #124]	@ (80137e0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 8013764:	2206      	movs	r2, #6
 8013766:	4631      	mov	r1, r6
 8013768:	4628      	mov	r0, r5
 801376a:	f7ff fd3b 	bl	80131e4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 801376e:	4c1a      	ldr	r4, [pc, #104]	@ (80137d8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8013770:	2101      	movs	r1, #1
 8013772:	6820      	ldr	r0, [r4, #0]
 8013774:	f7ff febe 	bl	80134f4 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8013778:	2206      	movs	r2, #6
 801377a:	4631      	mov	r1, r6
 801377c:	6820      	ldr	r0, [r4, #0]
 801377e:	f7ff ff97 	bl	80136b0 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8013782:	4b16      	ldr	r3, [pc, #88]	@ (80137dc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8013784:	2201      	movs	r2, #1
 8013786:	701a      	strb	r2, [r3, #0]
 8013788:	e7dc      	b.n	8013744 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		MG_DEBUG(("MQTT_open_connection"));
 801378a:	4b16      	ldr	r3, [pc, #88]	@ (80137e4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 801378c:	22cd      	movs	r2, #205	@ 0xcd
 801378e:	4916      	ldr	r1, [pc, #88]	@ (80137e8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 8013790:	2003      	movs	r0, #3
 8013792:	f00f fda9 	bl	80232e8 <mg_log_prefix>
 8013796:	4815      	ldr	r0, [pc, #84]	@ (80137ec <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 8013798:	f00d fe38 	bl	802140c <mg_log>
 801379c:	e7d7      	b.n	801374e <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x1a>
 801379e:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 80137a0:	4913      	ldr	r1, [pc, #76]	@ (80137f0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 80137a2:	2001      	movs	r0, #1
 80137a4:	f7fe fa6c 	bl	8011c80 <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 80137a8:	4620      	mov	r0, r4
 80137aa:	f7ff fd85 	bl	80132b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 80137ae:	2100      	movs	r1, #0
 80137b0:	4b09      	ldr	r3, [pc, #36]	@ (80137d8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80137b2:	6818      	ldr	r0, [r3, #0]
 80137b4:	f7ff fe9e 	bl	80134f4 <_ZL19mqtt_send_io_statusP13mg_connectionb>
 80137b8:	e7c4      	b.n	8013744 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		logging(L_INFO, "MQTT Close connection");
 80137ba:	490e      	ldr	r1, [pc, #56]	@ (80137f4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 80137bc:	2001      	movs	r0, #1
 80137be:	f7fe fa5f 	bl	8011c80 <logging>
		mqtt_conn     = NULL;
 80137c2:	2300      	movs	r3, #0
 80137c4:	4a04      	ldr	r2, [pc, #16]	@ (80137d8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80137c6:	6013      	str	r3, [r2, #0]
		is_registered = false;
 80137c8:	4a04      	ldr	r2, [pc, #16]	@ (80137dc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 80137ca:	7013      	strb	r3, [r2, #0]
}
 80137cc:	e7ba      	b.n	8013744 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
 80137ce:	bf00      	nop
 80137d0:	200000a8 	.word	0x200000a8
 80137d4:	08034434 	.word	0x08034434
 80137d8:	200009b8 	.word	0x200009b8
 80137dc:	200009a4 	.word	0x200009a4
 80137e0:	20000044 	.word	0x20000044
 80137e4:	08034408 	.word	0x08034408
 80137e8:	080341d8 	.word	0x080341d8
 80137ec:	0803441c 	.word	0x0803441c
 80137f0:	0803444c 	.word	0x0803444c
 80137f4:	08034470 	.word	0x08034470

080137f8 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 80137f8:	4b01      	ldr	r3, [pc, #4]	@ (8013800 <get_mqtt_connection+0x8>)
 80137fa:	6818      	ldr	r0, [r3, #0]
 80137fc:	4770      	bx	lr
 80137fe:	bf00      	nop
 8013800:	200009b8 	.word	0x200009b8

08013804 <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 8013804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013808:	b086      	sub	sp, #24
 801380a:	4606      	mov	r6, r0
 801380c:	460c      	mov	r4, r1
 801380e:	4691      	mov	r9, r2
 8013810:	461d      	mov	r5, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 8013812:	2101      	movs	r1, #1
 8013814:	2080      	movs	r0, #128	@ 0x80
 8013816:	f7ff fe5f 	bl	80134d8 <_ZL9my_callocjj>
 801381a:	f8df a148 	ldr.w	sl, [pc, #328]	@ 8013964 <mqtt_init+0x160>
 801381e:	f8ca 0000 	str.w	r0, [sl]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 8013822:	2101      	movs	r1, #1
 8013824:	2021      	movs	r0, #33	@ 0x21
 8013826:	f7ff fe57 	bl	80134d8 <_ZL9my_callocjj>
 801382a:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8013968 <mqtt_init+0x164>
 801382e:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 8013832:	2101      	movs	r1, #1
 8013834:	2021      	movs	r0, #33	@ 0x21
 8013836:	f7ff fe4f 	bl	80134d8 <_ZL9my_callocjj>
 801383a:	4f3b      	ldr	r7, [pc, #236]	@ (8013928 <mqtt_init+0x124>)
 801383c:	6038      	str	r0, [r7, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 801383e:	2101      	movs	r1, #1
 8013840:	2080      	movs	r0, #128	@ 0x80
 8013842:	f7ff fe49 	bl	80134d8 <_ZL9my_callocjj>
 8013846:	4b39      	ldr	r3, [pc, #228]	@ (801392c <mqtt_init+0x128>)
 8013848:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 801384a:	2101      	movs	r1, #1
 801384c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013850:	f7ff fe42 	bl	80134d8 <_ZL9my_callocjj>
 8013854:	4b36      	ldr	r3, [pc, #216]	@ (8013930 <mqtt_init+0x12c>)
 8013856:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 8013858:	2101      	movs	r1, #1
 801385a:	2028      	movs	r0, #40	@ 0x28
 801385c:	f7ff fe3c 	bl	80134d8 <_ZL9my_callocjj>
 8013860:	4b34      	ldr	r3, [pc, #208]	@ (8013934 <mqtt_init+0x130>)
 8013862:	6018      	str	r0, [r3, #0]
	r_w_parameter   = fn;
 8013864:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013866:	4b34      	ldr	r3, [pc, #208]	@ (8013938 <mqtt_init+0x134>)
 8013868:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 801386a:	f8da a000 	ldr.w	sl, [sl]
 801386e:	4649      	mov	r1, r9
 8013870:	4650      	mov	r0, sl
 8013872:	f017 fb3f 	bl	802aef4 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 8013876:	f8d8 9000 	ldr.w	r9, [r8]
 801387a:	4629      	mov	r1, r5
 801387c:	4648      	mov	r0, r9
 801387e:	f017 fb39 	bl	802aef4 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 8013882:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013884:	6838      	ldr	r0, [r7, #0]
 8013886:	f017 fb35 	bl	802aef4 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 801388a:	464b      	mov	r3, r9
 801388c:	4652      	mov	r2, sl
 801388e:	492b      	ldr	r1, [pc, #172]	@ (801393c <mqtt_init+0x138>)
 8013890:	2001      	movs	r0, #1
 8013892:	f7fe f9f5 	bl	8011c80 <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 8013896:	4d2a      	ldr	r5, [pc, #168]	@ (8013940 <mqtt_init+0x13c>)
 8013898:	602e      	str	r6, [r5, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 801389a:	4b2a      	ldr	r3, [pc, #168]	@ (8013944 <mqtt_init+0x140>)
 801389c:	601c      	str	r4, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 801389e:	2106      	movs	r1, #6
 80138a0:	4620      	mov	r0, r4
 80138a2:	f000 f871 	bl	8013988 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 80138a6:	4e28      	ldr	r6, [pc, #160]	@ (8013948 <mqtt_init+0x144>)
 80138a8:	ac04      	add	r4, sp, #16
 80138aa:	f8d8 1000 	ldr.w	r1, [r8]
 80138ae:	4620      	mov	r0, r4
 80138b0:	f00d fee2 	bl	8021678 <mg_str_s>
 80138b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80138b8:	e886 0003 	stmia.w	r6, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 80138bc:	6839      	ldr	r1, [r7, #0]
 80138be:	4620      	mov	r0, r4
 80138c0:	f00d feda 	bl	8021678 <mg_str_s>
 80138c4:	f106 0308 	add.w	r3, r6, #8
 80138c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80138cc:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 80138d0:	233c      	movs	r3, #60	@ 0x3c
 80138d2:	8573      	strh	r3, [r6, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 80138d4:	2400      	movs	r4, #0
 80138d6:	9402      	str	r4, [sp, #8]
 80138d8:	4b1c      	ldr	r3, [pc, #112]	@ (801394c <mqtt_init+0x148>)
 80138da:	9301      	str	r3, [sp, #4]
 80138dc:	2303      	movs	r3, #3
 80138de:	9300      	str	r3, [sp, #0]
 80138e0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80138e4:	2300      	movs	r3, #0
 80138e6:	6828      	ldr	r0, [r5, #0]
 80138e8:	f00e ffa8 	bl	802283c <mg_timer_add>
 80138ec:	4b18      	ldr	r3, [pc, #96]	@ (8013950 <mqtt_init+0x14c>)
 80138ee:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 80138f0:	9402      	str	r4, [sp, #8]
 80138f2:	4b18      	ldr	r3, [pc, #96]	@ (8013954 <mqtt_init+0x150>)
 80138f4:	9301      	str	r3, [sp, #4]
 80138f6:	2601      	movs	r6, #1
 80138f8:	9600      	str	r6, [sp, #0]
 80138fa:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80138fe:	2300      	movs	r3, #0
 8013900:	6828      	ldr	r0, [r5, #0]
 8013902:	f00e ff9b 	bl	802283c <mg_timer_add>
 8013906:	4b14      	ldr	r3, [pc, #80]	@ (8013958 <mqtt_init+0x154>)
 8013908:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 801390a:	9402      	str	r4, [sp, #8]
 801390c:	4b13      	ldr	r3, [pc, #76]	@ (801395c <mqtt_init+0x158>)
 801390e:	9301      	str	r3, [sp, #4]
 8013910:	9600      	str	r6, [sp, #0]
 8013912:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8013916:	2300      	movs	r3, #0
 8013918:	6828      	ldr	r0, [r5, #0]
 801391a:	f00e ff8f 	bl	802283c <mg_timer_add>
 801391e:	4b10      	ldr	r3, [pc, #64]	@ (8013960 <mqtt_init+0x15c>)
 8013920:	6018      	str	r0, [r3, #0]

}
 8013922:	b006      	add	sp, #24
 8013924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013928:	20000a0c 	.word	0x20000a0c
 801392c:	20000a08 	.word	0x20000a08
 8013930:	20000a04 	.word	0x20000a04
 8013934:	200009b4 	.word	0x200009b4
 8013938:	200009a0 	.word	0x200009a0
 801393c:	08034488 	.word	0x08034488
 8013940:	20000a00 	.word	0x20000a00
 8013944:	200009fc 	.word	0x200009fc
 8013948:	200009bc 	.word	0x200009bc
 801394c:	08013159 	.word	0x08013159
 8013950:	200009b0 	.word	0x200009b0
 8013954:	08013691 	.word	0x08013691
 8013958:	200009ac 	.word	0x200009ac
 801395c:	08013671 	.word	0x08013671
 8013960:	200009a8 	.word	0x200009a8
 8013964:	20000a14 	.word	0x20000a14
 8013968:	20000a10 	.word	0x20000a10

0801396c <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 801396c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801396e:	fb01 f400 	mul.w	r4, r1, r0
 8013972:	4620      	mov	r0, r4
 8013974:	f005 fbb0 	bl	80190d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8013978:	4605      	mov	r5, r0
 801397a:	b118      	cbz	r0, 8013984 <_ZL9my_callocjj+0x18>
 801397c:	4622      	mov	r2, r4
 801397e:	2100      	movs	r1, #0
 8013980:	f016 f8ae 	bl	8029ae0 <memset>
}
 8013984:	4628      	mov	r0, r5
 8013986:	bd38      	pop	{r3, r4, r5, pc}

08013988 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8013988:	b570      	push	{r4, r5, r6, lr}
 801398a:	4606      	mov	r6, r0
 801398c:	460d      	mov	r5, r1

	if ( unical_id){
 801398e:	4b0f      	ldr	r3, [pc, #60]	@ (80139cc <set_device_id+0x44>)
 8013990:	6818      	ldr	r0, [r3, #0]
 8013992:	b108      	cbz	r0, 8013998 <set_device_id+0x10>
		free(unical_id);
 8013994:	f005 fc22 	bl	80191dc <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8013998:	0068      	lsls	r0, r5, #1
 801399a:	2101      	movs	r1, #1
 801399c:	4408      	add	r0, r1
 801399e:	f7ff ffe5 	bl	801396c <_ZL9my_callocjj>
 80139a2:	4b0a      	ldr	r3, [pc, #40]	@ (80139cc <set_device_id+0x44>)
 80139a4:	6018      	str	r0, [r3, #0]


	if (unical_id){
 80139a6:	b108      	cbz	r0, 80139ac <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 80139a8:	2400      	movs	r4, #0
 80139aa:	e00b      	b.n	80139c4 <set_device_id+0x3c>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80139ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80139b0:	e00b      	b.n	80139ca <set_device_id+0x42>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 80139b2:	4b06      	ldr	r3, [pc, #24]	@ (80139cc <set_device_id+0x44>)
 80139b4:	6818      	ldr	r0, [r3, #0]
 80139b6:	5d32      	ldrb	r2, [r6, r4]
 80139b8:	4905      	ldr	r1, [pc, #20]	@ (80139d0 <set_device_id+0x48>)
 80139ba:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80139be:	f015 fccd 	bl	802935c <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 80139c2:	3401      	adds	r4, #1
 80139c4:	42ac      	cmp	r4, r5
 80139c6:	d3f4      	bcc.n	80139b2 <set_device_id+0x2a>
	}

	return NO_ERR; // Успешно
 80139c8:	2000      	movs	r0, #0
}
 80139ca:	bd70      	pop	{r4, r5, r6, pc}
 80139cc:	20000a1c 	.word	0x20000a1c
 80139d0:	080344b4 	.word	0x080344b4

080139d4 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 80139d4:	b538      	push	{r3, r4, r5, lr}
 80139d6:	4605      	mov	r5, r0
 80139d8:	460c      	mov	r4, r1

	if(dev_conf_ip){
 80139da:	4b0c      	ldr	r3, [pc, #48]	@ (8013a0c <set_device_conf_ip+0x38>)
 80139dc:	6818      	ldr	r0, [r3, #0]
 80139de:	b108      	cbz	r0, 80139e4 <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 80139e0:	f005 fbfc 	bl	80191dc <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 80139e4:	2101      	movs	r1, #1
 80139e6:	1860      	adds	r0, r4, r1
 80139e8:	f7ff ffc0 	bl	801396c <_ZL9my_callocjj>
 80139ec:	4b07      	ldr	r3, [pc, #28]	@ (8013a0c <set_device_conf_ip+0x38>)
 80139ee:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 80139f0:	b140      	cbz	r0, 8013a04 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 80139f2:	4622      	mov	r2, r4
 80139f4:	4629      	mov	r1, r5
 80139f6:	f016 f8ba 	bl	8029b6e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 80139fa:	4b04      	ldr	r3, [pc, #16]	@ (8013a0c <set_device_conf_ip+0x38>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	2000      	movs	r0, #0
 8013a00:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 8013a02:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8013a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a08:	e7fb      	b.n	8013a02 <set_device_conf_ip+0x2e>
 8013a0a:	bf00      	nop
 8013a0c:	20000a18 	.word	0x20000a18

08013a10 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 8013a10:	b500      	push	{lr}
 8013a12:	b087      	sub	sp, #28

	strcpy(buff, "");
 8013a14:	f04f 0c00 	mov.w	ip, #0
 8013a18:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8013a1c:	3a01      	subs	r2, #1
 8013a1e:	2a07      	cmp	r2, #7
 8013a20:	f200 8087 	bhi.w	8013b32 <get_config_topik_string+0x122>
 8013a24:	e8df f002 	tbb	[pc, r2]
 8013a28:	45251604 	.word	0x45251604
 8013a2c:	55756535 	.word	0x55756535
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 8013a30:	9304      	str	r3, [sp, #16]
 8013a32:	4b41      	ldr	r3, [pc, #260]	@ (8013b38 <get_config_topik_string+0x128>)
 8013a34:	9303      	str	r3, [sp, #12]
 8013a36:	4b41      	ldr	r3, [pc, #260]	@ (8013b3c <get_config_topik_string+0x12c>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	9302      	str	r3, [sp, #8]
 8013a3c:	4b40      	ldr	r3, [pc, #256]	@ (8013b40 <get_config_topik_string+0x130>)
 8013a3e:	9301      	str	r3, [sp, #4]
 8013a40:	4b40      	ldr	r3, [pc, #256]	@ (8013b44 <get_config_topik_string+0x134>)
 8013a42:	9300      	str	r3, [sp, #0]
 8013a44:	4b40      	ldr	r3, [pc, #256]	@ (8013b48 <get_config_topik_string+0x138>)
 8013a46:	4a41      	ldr	r2, [pc, #260]	@ (8013b4c <get_config_topik_string+0x13c>)
 8013a48:	f015 fb20 	bl	802908c <snprintf>
			return -1;
			break;
	}


	return 0;
 8013a4c:	2000      	movs	r0, #0
}
 8013a4e:	b007      	add	sp, #28
 8013a50:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 8013a54:	9304      	str	r3, [sp, #16]
 8013a56:	4b3e      	ldr	r3, [pc, #248]	@ (8013b50 <get_config_topik_string+0x140>)
 8013a58:	9303      	str	r3, [sp, #12]
 8013a5a:	4a38      	ldr	r2, [pc, #224]	@ (8013b3c <get_config_topik_string+0x12c>)
 8013a5c:	6812      	ldr	r2, [r2, #0]
 8013a5e:	9202      	str	r2, [sp, #8]
 8013a60:	4a37      	ldr	r2, [pc, #220]	@ (8013b40 <get_config_topik_string+0x130>)
 8013a62:	9201      	str	r2, [sp, #4]
 8013a64:	9300      	str	r3, [sp, #0]
 8013a66:	4b38      	ldr	r3, [pc, #224]	@ (8013b48 <get_config_topik_string+0x138>)
 8013a68:	4a38      	ldr	r2, [pc, #224]	@ (8013b4c <get_config_topik_string+0x13c>)
 8013a6a:	f015 fb0f 	bl	802908c <snprintf>
	return 0;
 8013a6e:	2000      	movs	r0, #0
			break;
 8013a70:	e7ed      	b.n	8013a4e <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 8013a72:	9304      	str	r3, [sp, #16]
 8013a74:	4b37      	ldr	r3, [pc, #220]	@ (8013b54 <get_config_topik_string+0x144>)
 8013a76:	9303      	str	r3, [sp, #12]
 8013a78:	4b30      	ldr	r3, [pc, #192]	@ (8013b3c <get_config_topik_string+0x12c>)
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	9302      	str	r3, [sp, #8]
 8013a7e:	4b30      	ldr	r3, [pc, #192]	@ (8013b40 <get_config_topik_string+0x130>)
 8013a80:	9301      	str	r3, [sp, #4]
 8013a82:	4b35      	ldr	r3, [pc, #212]	@ (8013b58 <get_config_topik_string+0x148>)
 8013a84:	9300      	str	r3, [sp, #0]
 8013a86:	4b30      	ldr	r3, [pc, #192]	@ (8013b48 <get_config_topik_string+0x138>)
 8013a88:	4a30      	ldr	r2, [pc, #192]	@ (8013b4c <get_config_topik_string+0x13c>)
 8013a8a:	f015 faff 	bl	802908c <snprintf>
	return 0;
 8013a8e:	2000      	movs	r0, #0
			break;
 8013a90:	e7dd      	b.n	8013a4e <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8013a92:	9304      	str	r3, [sp, #16]
 8013a94:	4b31      	ldr	r3, [pc, #196]	@ (8013b5c <get_config_topik_string+0x14c>)
 8013a96:	9303      	str	r3, [sp, #12]
 8013a98:	4b28      	ldr	r3, [pc, #160]	@ (8013b3c <get_config_topik_string+0x12c>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	9302      	str	r3, [sp, #8]
 8013a9e:	4b28      	ldr	r3, [pc, #160]	@ (8013b40 <get_config_topik_string+0x130>)
 8013aa0:	9301      	str	r3, [sp, #4]
 8013aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8013b58 <get_config_topik_string+0x148>)
 8013aa4:	9300      	str	r3, [sp, #0]
 8013aa6:	4b28      	ldr	r3, [pc, #160]	@ (8013b48 <get_config_topik_string+0x138>)
 8013aa8:	4a28      	ldr	r2, [pc, #160]	@ (8013b4c <get_config_topik_string+0x13c>)
 8013aaa:	f015 faef 	bl	802908c <snprintf>
	return 0;
 8013aae:	2000      	movs	r0, #0
			break;
 8013ab0:	e7cd      	b.n	8013a4e <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8013ab2:	9304      	str	r3, [sp, #16]
 8013ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8013b60 <get_config_topik_string+0x150>)
 8013ab6:	9303      	str	r3, [sp, #12]
 8013ab8:	4b20      	ldr	r3, [pc, #128]	@ (8013b3c <get_config_topik_string+0x12c>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	9302      	str	r3, [sp, #8]
 8013abe:	4b20      	ldr	r3, [pc, #128]	@ (8013b40 <get_config_topik_string+0x130>)
 8013ac0:	9301      	str	r3, [sp, #4]
 8013ac2:	4b25      	ldr	r3, [pc, #148]	@ (8013b58 <get_config_topik_string+0x148>)
 8013ac4:	9300      	str	r3, [sp, #0]
 8013ac6:	4b20      	ldr	r3, [pc, #128]	@ (8013b48 <get_config_topik_string+0x138>)
 8013ac8:	4a20      	ldr	r2, [pc, #128]	@ (8013b4c <get_config_topik_string+0x13c>)
 8013aca:	f015 fadf 	bl	802908c <snprintf>
	return 0;
 8013ace:	2000      	movs	r0, #0
			break;
 8013ad0:	e7bd      	b.n	8013a4e <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 8013ad2:	9304      	str	r3, [sp, #16]
 8013ad4:	4b23      	ldr	r3, [pc, #140]	@ (8013b64 <get_config_topik_string+0x154>)
 8013ad6:	9303      	str	r3, [sp, #12]
 8013ad8:	4b18      	ldr	r3, [pc, #96]	@ (8013b3c <get_config_topik_string+0x12c>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	9302      	str	r3, [sp, #8]
 8013ade:	4b18      	ldr	r3, [pc, #96]	@ (8013b40 <get_config_topik_string+0x130>)
 8013ae0:	9301      	str	r3, [sp, #4]
 8013ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8013b58 <get_config_topik_string+0x148>)
 8013ae4:	9300      	str	r3, [sp, #0]
 8013ae6:	4b18      	ldr	r3, [pc, #96]	@ (8013b48 <get_config_topik_string+0x138>)
 8013ae8:	4a18      	ldr	r2, [pc, #96]	@ (8013b4c <get_config_topik_string+0x13c>)
 8013aea:	f015 facf 	bl	802908c <snprintf>
	return 0;
 8013aee:	2000      	movs	r0, #0
			break;
 8013af0:	e7ad      	b.n	8013a4e <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 8013af2:	9304      	str	r3, [sp, #16]
 8013af4:	4b1c      	ldr	r3, [pc, #112]	@ (8013b68 <get_config_topik_string+0x158>)
 8013af6:	9303      	str	r3, [sp, #12]
 8013af8:	4b10      	ldr	r3, [pc, #64]	@ (8013b3c <get_config_topik_string+0x12c>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	9302      	str	r3, [sp, #8]
 8013afe:	4b10      	ldr	r3, [pc, #64]	@ (8013b40 <get_config_topik_string+0x130>)
 8013b00:	9301      	str	r3, [sp, #4]
 8013b02:	4b15      	ldr	r3, [pc, #84]	@ (8013b58 <get_config_topik_string+0x148>)
 8013b04:	9300      	str	r3, [sp, #0]
 8013b06:	4b10      	ldr	r3, [pc, #64]	@ (8013b48 <get_config_topik_string+0x138>)
 8013b08:	4a10      	ldr	r2, [pc, #64]	@ (8013b4c <get_config_topik_string+0x13c>)
 8013b0a:	f015 fabf 	bl	802908c <snprintf>
	return 0;
 8013b0e:	2000      	movs	r0, #0
			break;
 8013b10:	e79d      	b.n	8013a4e <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 8013b12:	9304      	str	r3, [sp, #16]
 8013b14:	4b15      	ldr	r3, [pc, #84]	@ (8013b6c <get_config_topik_string+0x15c>)
 8013b16:	9303      	str	r3, [sp, #12]
 8013b18:	4b08      	ldr	r3, [pc, #32]	@ (8013b3c <get_config_topik_string+0x12c>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	9302      	str	r3, [sp, #8]
 8013b1e:	4b08      	ldr	r3, [pc, #32]	@ (8013b40 <get_config_topik_string+0x130>)
 8013b20:	9301      	str	r3, [sp, #4]
 8013b22:	4b0d      	ldr	r3, [pc, #52]	@ (8013b58 <get_config_topik_string+0x148>)
 8013b24:	9300      	str	r3, [sp, #0]
 8013b26:	4b08      	ldr	r3, [pc, #32]	@ (8013b48 <get_config_topik_string+0x138>)
 8013b28:	4a08      	ldr	r2, [pc, #32]	@ (8013b4c <get_config_topik_string+0x13c>)
 8013b2a:	f015 faaf 	bl	802908c <snprintf>
	return 0;
 8013b2e:	2000      	movs	r0, #0
			break;
 8013b30:	e78d      	b.n	8013a4e <get_config_topik_string+0x3e>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8013b32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013b36:	e78a      	b.n	8013a4e <get_config_topik_string+0x3e>
 8013b38:	080344d4 	.word	0x080344d4
 8013b3c:	20000a1c 	.word	0x20000a1c
 8013b40:	080344dc 	.word	0x080344dc
 8013b44:	080344e4 	.word	0x080344e4
 8013b48:	20000074 	.word	0x20000074
 8013b4c:	080344bc 	.word	0x080344bc
 8013b50:	08034228 	.word	0x08034228
 8013b54:	080344f4 	.word	0x080344f4
 8013b58:	080344fc 	.word	0x080344fc
 8013b5c:	08034504 	.word	0x08034504
 8013b60:	0803450c 	.word	0x0803450c
 8013b64:	08034514 	.word	0x08034514
 8013b68:	08034524 	.word	0x08034524
 8013b6c:	08034534 	.word	0x08034534

08013b70 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 8013b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b74:	b099      	sub	sp, #100	@ 0x64
 8013b76:	9017      	str	r0, [sp, #92]	@ 0x5c
 8013b78:	460d      	mov	r5, r1
 8013b7a:	4617      	mov	r7, r2
 8013b7c:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 8013b7e:	460a      	mov	r2, r1
 8013b80:	2100      	movs	r1, #0
 8013b82:	f015 ffad 	bl	8029ae0 <memset>

	switch (payload_type) {
 8013b86:	1e7a      	subs	r2, r7, #1
 8013b88:	2a07      	cmp	r2, #7
 8013b8a:	f200 81ba 	bhi.w	8013f02 <get_config_payload_string+0x392>
 8013b8e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013b92:	0008      	.short	0x0008
 8013b94:	00a10043 	.word	0x00a10043
 8013b98:	00c500ea 	.word	0x00c500ea
 8013b9c:	0193016e 	.word	0x0193016e
 8013ba0:	0149      	.short	0x0149

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013ba2:	2101      	movs	r1, #1
 8013ba4:	2080      	movs	r0, #128	@ 0x80
 8013ba6:	f7ff fee1 	bl	801396c <_ZL9my_callocjj>
 8013baa:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8013bac:	9400      	str	r4, [sp, #0]
 8013bae:	4b80      	ldr	r3, [pc, #512]	@ (8013db0 <get_config_payload_string+0x240>)
 8013bb0:	4a80      	ldr	r2, [pc, #512]	@ (8013db4 <get_config_payload_string+0x244>)
 8013bb2:	2180      	movs	r1, #128	@ 0x80
 8013bb4:	f015 fa6a 	bl	802908c <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8013bb8:	4b7f      	ldr	r3, [pc, #508]	@ (8013db8 <get_config_payload_string+0x248>)
 8013bba:	681a      	ldr	r2, [r3, #0]
 8013bbc:	4b7f      	ldr	r3, [pc, #508]	@ (8013dbc <get_config_payload_string+0x24c>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	9314      	str	r3, [sp, #80]	@ 0x50
 8013bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8013dc0 <get_config_payload_string+0x250>)
 8013bc4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8013dc4 <get_config_payload_string+0x254>)
 8013bc8:	9312      	str	r3, [sp, #72]	@ 0x48
 8013bca:	4b7f      	ldr	r3, [pc, #508]	@ (8013dc8 <get_config_payload_string+0x258>)
 8013bcc:	9311      	str	r3, [sp, #68]	@ 0x44
 8013bce:	4b7f      	ldr	r3, [pc, #508]	@ (8013dcc <get_config_payload_string+0x25c>)
 8013bd0:	9310      	str	r3, [sp, #64]	@ 0x40
 8013bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8013dd0 <get_config_payload_string+0x260>)
 8013bd4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013bd6:	920e      	str	r2, [sp, #56]	@ 0x38
 8013bd8:	4b7e      	ldr	r3, [pc, #504]	@ (8013dd4 <get_config_payload_string+0x264>)
 8013bda:	930d      	str	r3, [sp, #52]	@ 0x34
 8013bdc:	497e      	ldr	r1, [pc, #504]	@ (8013dd8 <get_config_payload_string+0x268>)
 8013bde:	910c      	str	r1, [sp, #48]	@ 0x30
 8013be0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013be2:	497e      	ldr	r1, [pc, #504]	@ (8013ddc <get_config_payload_string+0x26c>)
 8013be4:	910a      	str	r1, [sp, #40]	@ 0x28
 8013be6:	9209      	str	r2, [sp, #36]	@ 0x24
 8013be8:	9308      	str	r3, [sp, #32]
 8013bea:	9707      	str	r7, [sp, #28]
 8013bec:	487c      	ldr	r0, [pc, #496]	@ (8013de0 <get_config_payload_string+0x270>)
 8013bee:	9006      	str	r0, [sp, #24]
 8013bf0:	9405      	str	r4, [sp, #20]
 8013bf2:	9104      	str	r1, [sp, #16]
 8013bf4:	9403      	str	r4, [sp, #12]
 8013bf6:	9102      	str	r1, [sp, #8]
 8013bf8:	9201      	str	r2, [sp, #4]
 8013bfa:	9300      	str	r3, [sp, #0]
 8013bfc:	4b79      	ldr	r3, [pc, #484]	@ (8013de4 <get_config_payload_string+0x274>)
 8013bfe:	4a7a      	ldr	r2, [pc, #488]	@ (8013de8 <get_config_payload_string+0x278>)
 8013c00:	4629      	mov	r1, r5
 8013c02:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013c04:	f015 fa42 	bl	802908c <snprintf>
 8013c08:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8013c0a:	4638      	mov	r0, r7
 8013c0c:	f005 fae6 	bl	80191dc <vPortFree>

			return len;
 8013c10:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 8013c12:	b019      	add	sp, #100	@ 0x64
 8013c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013c18:	2101      	movs	r1, #1
 8013c1a:	2080      	movs	r0, #128	@ 0x80
 8013c1c:	f7ff fea6 	bl	801396c <_ZL9my_callocjj>
 8013c20:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013c22:	2101      	movs	r1, #1
 8013c24:	2080      	movs	r0, #128	@ 0x80
 8013c26:	f7ff fea1 	bl	801396c <_ZL9my_callocjj>
 8013c2a:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8013c2c:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 8013e20 <get_config_payload_string+0x2b0>
 8013c30:	9400      	str	r4, [sp, #0]
 8013c32:	464b      	mov	r3, r9
 8013c34:	4a6d      	ldr	r2, [pc, #436]	@ (8013dec <get_config_payload_string+0x27c>)
 8013c36:	2180      	movs	r1, #128	@ 0x80
 8013c38:	4638      	mov	r0, r7
 8013c3a:	f015 fa27 	bl	802908c <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8013c3e:	f8df a194 	ldr.w	sl, [pc, #404]	@ 8013dd4 <get_config_payload_string+0x264>
 8013c42:	4e65      	ldr	r6, [pc, #404]	@ (8013dd8 <get_config_payload_string+0x268>)
 8013c44:	9602      	str	r6, [sp, #8]
 8013c46:	9701      	str	r7, [sp, #4]
 8013c48:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8013db8 <get_config_payload_string+0x248>
 8013c4c:	f8db 3000 	ldr.w	r3, [fp]
 8013c50:	9300      	str	r3, [sp, #0]
 8013c52:	4653      	mov	r3, sl
 8013c54:	4a66      	ldr	r2, [pc, #408]	@ (8013df0 <get_config_payload_string+0x280>)
 8013c56:	2180      	movs	r1, #128	@ 0x80
 8013c58:	4640      	mov	r0, r8
 8013c5a:	f015 fa17 	bl	802908c <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8013c5e:	9400      	str	r4, [sp, #0]
 8013c60:	4b64      	ldr	r3, [pc, #400]	@ (8013df4 <get_config_payload_string+0x284>)
 8013c62:	4a54      	ldr	r2, [pc, #336]	@ (8013db4 <get_config_payload_string+0x244>)
 8013c64:	2180      	movs	r1, #128	@ 0x80
 8013c66:	4638      	mov	r0, r7
 8013c68:	f015 fa10 	bl	802908c <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8013c6c:	f8db 3000 	ldr.w	r3, [fp]
 8013c70:	4a52      	ldr	r2, [pc, #328]	@ (8013dbc <get_config_payload_string+0x24c>)
 8013c72:	6812      	ldr	r2, [r2, #0]
 8013c74:	9214      	str	r2, [sp, #80]	@ 0x50
 8013c76:	4a52      	ldr	r2, [pc, #328]	@ (8013dc0 <get_config_payload_string+0x250>)
 8013c78:	9213      	str	r2, [sp, #76]	@ 0x4c
 8013c7a:	4a52      	ldr	r2, [pc, #328]	@ (8013dc4 <get_config_payload_string+0x254>)
 8013c7c:	9212      	str	r2, [sp, #72]	@ 0x48
 8013c7e:	4a52      	ldr	r2, [pc, #328]	@ (8013dc8 <get_config_payload_string+0x258>)
 8013c80:	9211      	str	r2, [sp, #68]	@ 0x44
 8013c82:	4a52      	ldr	r2, [pc, #328]	@ (8013dcc <get_config_payload_string+0x25c>)
 8013c84:	9210      	str	r2, [sp, #64]	@ 0x40
 8013c86:	4a52      	ldr	r2, [pc, #328]	@ (8013dd0 <get_config_payload_string+0x260>)
 8013c88:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013c8a:	930e      	str	r3, [sp, #56]	@ 0x38
 8013c8c:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8013c90:	960c      	str	r6, [sp, #48]	@ 0x30
 8013c92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013c94:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8013c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c9a:	f8cd a020 	str.w	sl, [sp, #32]
 8013c9e:	9707      	str	r7, [sp, #28]
 8013ca0:	f8cd 8018 	str.w	r8, [sp, #24]
 8013ca4:	9405      	str	r4, [sp, #20]
 8013ca6:	f8cd 9010 	str.w	r9, [sp, #16]
 8013caa:	9403      	str	r4, [sp, #12]
 8013cac:	f8cd 9008 	str.w	r9, [sp, #8]
 8013cb0:	9301      	str	r3, [sp, #4]
 8013cb2:	f8cd a000 	str.w	sl, [sp]
 8013cb6:	464b      	mov	r3, r9
 8013cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8013de8 <get_config_payload_string+0x278>)
 8013cba:	4629      	mov	r1, r5
 8013cbc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013cbe:	f015 f9e5 	bl	802908c <snprintf>
 8013cc2:	4604      	mov	r4, r0
			free(name);
 8013cc4:	4638      	mov	r0, r7
 8013cc6:	f005 fa89 	bl	80191dc <vPortFree>
			free(com_topik);
 8013cca:	4640      	mov	r0, r8
 8013ccc:	f005 fa86 	bl	80191dc <vPortFree>
			return len;
 8013cd0:	b2e0      	uxtb	r0, r4
 8013cd2:	e79e      	b.n	8013c12 <get_config_payload_string+0xa2>
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8013cd4:	4b38      	ldr	r3, [pc, #224]	@ (8013db8 <get_config_payload_string+0x248>)
 8013cd6:	6819      	ldr	r1, [r3, #0]
 8013cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8013dd4 <get_config_payload_string+0x264>)
 8013cda:	4a47      	ldr	r2, [pc, #284]	@ (8013df8 <get_config_payload_string+0x288>)
 8013cdc:	4837      	ldr	r0, [pc, #220]	@ (8013dbc <get_config_payload_string+0x24c>)
 8013cde:	6800      	ldr	r0, [r0, #0]
 8013ce0:	9010      	str	r0, [sp, #64]	@ 0x40
 8013ce2:	4837      	ldr	r0, [pc, #220]	@ (8013dc0 <get_config_payload_string+0x250>)
 8013ce4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013ce6:	4837      	ldr	r0, [pc, #220]	@ (8013dc4 <get_config_payload_string+0x254>)
 8013ce8:	900e      	str	r0, [sp, #56]	@ 0x38
 8013cea:	4837      	ldr	r0, [pc, #220]	@ (8013dc8 <get_config_payload_string+0x258>)
 8013cec:	900d      	str	r0, [sp, #52]	@ 0x34
 8013cee:	4837      	ldr	r0, [pc, #220]	@ (8013dcc <get_config_payload_string+0x25c>)
 8013cf0:	900c      	str	r0, [sp, #48]	@ 0x30
 8013cf2:	4837      	ldr	r0, [pc, #220]	@ (8013dd0 <get_config_payload_string+0x260>)
 8013cf4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013cf6:	910a      	str	r1, [sp, #40]	@ 0x28
 8013cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8013cfa:	4840      	ldr	r0, [pc, #256]	@ (8013dfc <get_config_payload_string+0x28c>)
 8013cfc:	9008      	str	r0, [sp, #32]
 8013cfe:	9207      	str	r2, [sp, #28]
 8013d00:	9106      	str	r1, [sp, #24]
 8013d02:	9305      	str	r3, [sp, #20]
 8013d04:	483e      	ldr	r0, [pc, #248]	@ (8013e00 <get_config_payload_string+0x290>)
 8013d06:	9004      	str	r0, [sp, #16]
 8013d08:	483e      	ldr	r0, [pc, #248]	@ (8013e04 <get_config_payload_string+0x294>)
 8013d0a:	9003      	str	r0, [sp, #12]
 8013d0c:	9202      	str	r2, [sp, #8]
 8013d0e:	483e      	ldr	r0, [pc, #248]	@ (8013e08 <get_config_payload_string+0x298>)
 8013d10:	9001      	str	r0, [sp, #4]
 8013d12:	9100      	str	r1, [sp, #0]
 8013d14:	4934      	ldr	r1, [pc, #208]	@ (8013de8 <get_config_payload_string+0x278>)
 8013d16:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013d18:	f015 fb20 	bl	802935c <sprintf>
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8013d1c:	4b26      	ldr	r3, [pc, #152]	@ (8013db8 <get_config_payload_string+0x248>)
 8013d1e:	6819      	ldr	r1, [r3, #0]
 8013d20:	4b2c      	ldr	r3, [pc, #176]	@ (8013dd4 <get_config_payload_string+0x264>)
 8013d22:	4a3a      	ldr	r2, [pc, #232]	@ (8013e0c <get_config_payload_string+0x29c>)
 8013d24:	4825      	ldr	r0, [pc, #148]	@ (8013dbc <get_config_payload_string+0x24c>)
 8013d26:	6800      	ldr	r0, [r0, #0]
 8013d28:	9010      	str	r0, [sp, #64]	@ 0x40
 8013d2a:	4825      	ldr	r0, [pc, #148]	@ (8013dc0 <get_config_payload_string+0x250>)
 8013d2c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013d2e:	4825      	ldr	r0, [pc, #148]	@ (8013dc4 <get_config_payload_string+0x254>)
 8013d30:	900e      	str	r0, [sp, #56]	@ 0x38
 8013d32:	4825      	ldr	r0, [pc, #148]	@ (8013dc8 <get_config_payload_string+0x258>)
 8013d34:	900d      	str	r0, [sp, #52]	@ 0x34
 8013d36:	4825      	ldr	r0, [pc, #148]	@ (8013dcc <get_config_payload_string+0x25c>)
 8013d38:	900c      	str	r0, [sp, #48]	@ 0x30
 8013d3a:	4825      	ldr	r0, [pc, #148]	@ (8013dd0 <get_config_payload_string+0x260>)
 8013d3c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013d3e:	910a      	str	r1, [sp, #40]	@ 0x28
 8013d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d42:	4833      	ldr	r0, [pc, #204]	@ (8013e10 <get_config_payload_string+0x2a0>)
 8013d44:	9008      	str	r0, [sp, #32]
 8013d46:	9207      	str	r2, [sp, #28]
 8013d48:	9106      	str	r1, [sp, #24]
 8013d4a:	9305      	str	r3, [sp, #20]
 8013d4c:	4831      	ldr	r0, [pc, #196]	@ (8013e14 <get_config_payload_string+0x2a4>)
 8013d4e:	9004      	str	r0, [sp, #16]
 8013d50:	4823      	ldr	r0, [pc, #140]	@ (8013de0 <get_config_payload_string+0x270>)
 8013d52:	9003      	str	r0, [sp, #12]
 8013d54:	9202      	str	r2, [sp, #8]
 8013d56:	482c      	ldr	r0, [pc, #176]	@ (8013e08 <get_config_payload_string+0x298>)
 8013d58:	9001      	str	r0, [sp, #4]
 8013d5a:	9100      	str	r1, [sp, #0]
 8013d5c:	4922      	ldr	r1, [pc, #136]	@ (8013de8 <get_config_payload_string+0x278>)
 8013d5e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013d60:	f015 fafc 	bl	802935c <sprintf>
			break;
 8013d64:	e7da      	b.n	8013d1c <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8013d66:	4b14      	ldr	r3, [pc, #80]	@ (8013db8 <get_config_payload_string+0x248>)
 8013d68:	6819      	ldr	r1, [r3, #0]
 8013d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8013dd4 <get_config_payload_string+0x264>)
 8013d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8013de4 <get_config_payload_string+0x274>)
 8013d6e:	4813      	ldr	r0, [pc, #76]	@ (8013dbc <get_config_payload_string+0x24c>)
 8013d70:	6800      	ldr	r0, [r0, #0]
 8013d72:	9010      	str	r0, [sp, #64]	@ 0x40
 8013d74:	4812      	ldr	r0, [pc, #72]	@ (8013dc0 <get_config_payload_string+0x250>)
 8013d76:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013d78:	4812      	ldr	r0, [pc, #72]	@ (8013dc4 <get_config_payload_string+0x254>)
 8013d7a:	900e      	str	r0, [sp, #56]	@ 0x38
 8013d7c:	4812      	ldr	r0, [pc, #72]	@ (8013dc8 <get_config_payload_string+0x258>)
 8013d7e:	900d      	str	r0, [sp, #52]	@ 0x34
 8013d80:	4812      	ldr	r0, [pc, #72]	@ (8013dcc <get_config_payload_string+0x25c>)
 8013d82:	900c      	str	r0, [sp, #48]	@ 0x30
 8013d84:	4812      	ldr	r0, [pc, #72]	@ (8013dd0 <get_config_payload_string+0x260>)
 8013d86:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013d88:	910a      	str	r1, [sp, #40]	@ 0x28
 8013d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d8c:	4822      	ldr	r0, [pc, #136]	@ (8013e18 <get_config_payload_string+0x2a8>)
 8013d8e:	9008      	str	r0, [sp, #32]
 8013d90:	9207      	str	r2, [sp, #28]
 8013d92:	9106      	str	r1, [sp, #24]
 8013d94:	9305      	str	r3, [sp, #20]
 8013d96:	4821      	ldr	r0, [pc, #132]	@ (8013e1c <get_config_payload_string+0x2ac>)
 8013d98:	9004      	str	r0, [sp, #16]
 8013d9a:	4811      	ldr	r0, [pc, #68]	@ (8013de0 <get_config_payload_string+0x270>)
 8013d9c:	9003      	str	r0, [sp, #12]
 8013d9e:	9202      	str	r2, [sp, #8]
 8013da0:	4819      	ldr	r0, [pc, #100]	@ (8013e08 <get_config_payload_string+0x298>)
 8013da2:	9001      	str	r0, [sp, #4]
 8013da4:	9100      	str	r1, [sp, #0]
 8013da6:	4910      	ldr	r1, [pc, #64]	@ (8013de8 <get_config_payload_string+0x278>)
 8013da8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013daa:	f015 fad7 	bl	802935c <sprintf>
			break;
 8013dae:	e7b5      	b.n	8013d1c <get_config_payload_string+0x1ac>
 8013db0:	0803453c 	.word	0x0803453c
 8013db4:	08034548 	.word	0x08034548
 8013db8:	20000a1c 	.word	0x20000a1c
 8013dbc:	20000a18 	.word	0x20000a18
 8013dc0:	08034550 	.word	0x08034550
 8013dc4:	08034554 	.word	0x08034554
 8013dc8:	08034558 	.word	0x08034558
 8013dcc:	08034568 	.word	0x08034568
 8013dd0:	0803457c 	.word	0x0803457c
 8013dd4:	080344dc 	.word	0x080344dc
 8013dd8:	08033984 	.word	0x08033984
 8013ddc:	080344d4 	.word	0x080344d4
 8013de0:	080369b0 	.word	0x080369b0
 8013de4:	0803450c 	.word	0x0803450c
 8013de8:	080346e0 	.word	0x080346e0
 8013dec:	08034588 	.word	0x08034588
 8013df0:	080346b8 	.word	0x080346b8
 8013df4:	08034590 	.word	0x08034590
 8013df8:	080344f4 	.word	0x080344f4
 8013dfc:	080345a4 	.word	0x080345a4
 8013e00:	080345a8 	.word	0x080345a8
 8013e04:	080345b8 	.word	0x080345b8
 8013e08:	080345dc 	.word	0x080345dc
 8013e0c:	08034504 	.word	0x08034504
 8013e10:	080345e4 	.word	0x080345e4
 8013e14:	080345e8 	.word	0x080345e8
 8013e18:	080345f8 	.word	0x080345f8
 8013e1c:	080345fc 	.word	0x080345fc
 8013e20:	08034228 	.word	0x08034228
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8013e24:	4b38      	ldr	r3, [pc, #224]	@ (8013f08 <get_config_payload_string+0x398>)
 8013e26:	6819      	ldr	r1, [r3, #0]
 8013e28:	4b38      	ldr	r3, [pc, #224]	@ (8013f0c <get_config_payload_string+0x39c>)
 8013e2a:	4a39      	ldr	r2, [pc, #228]	@ (8013f10 <get_config_payload_string+0x3a0>)
 8013e2c:	4839      	ldr	r0, [pc, #228]	@ (8013f14 <get_config_payload_string+0x3a4>)
 8013e2e:	6800      	ldr	r0, [r0, #0]
 8013e30:	9010      	str	r0, [sp, #64]	@ 0x40
 8013e32:	4839      	ldr	r0, [pc, #228]	@ (8013f18 <get_config_payload_string+0x3a8>)
 8013e34:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013e36:	4839      	ldr	r0, [pc, #228]	@ (8013f1c <get_config_payload_string+0x3ac>)
 8013e38:	900e      	str	r0, [sp, #56]	@ 0x38
 8013e3a:	4839      	ldr	r0, [pc, #228]	@ (8013f20 <get_config_payload_string+0x3b0>)
 8013e3c:	900d      	str	r0, [sp, #52]	@ 0x34
 8013e3e:	4839      	ldr	r0, [pc, #228]	@ (8013f24 <get_config_payload_string+0x3b4>)
 8013e40:	900c      	str	r0, [sp, #48]	@ 0x30
 8013e42:	4839      	ldr	r0, [pc, #228]	@ (8013f28 <get_config_payload_string+0x3b8>)
 8013e44:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013e46:	910a      	str	r1, [sp, #40]	@ 0x28
 8013e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e4a:	4838      	ldr	r0, [pc, #224]	@ (8013f2c <get_config_payload_string+0x3bc>)
 8013e4c:	9008      	str	r0, [sp, #32]
 8013e4e:	9207      	str	r2, [sp, #28]
 8013e50:	9106      	str	r1, [sp, #24]
 8013e52:	9305      	str	r3, [sp, #20]
 8013e54:	4836      	ldr	r0, [pc, #216]	@ (8013f30 <get_config_payload_string+0x3c0>)
 8013e56:	9004      	str	r0, [sp, #16]
 8013e58:	4836      	ldr	r0, [pc, #216]	@ (8013f34 <get_config_payload_string+0x3c4>)
 8013e5a:	9003      	str	r0, [sp, #12]
 8013e5c:	9202      	str	r2, [sp, #8]
 8013e5e:	4836      	ldr	r0, [pc, #216]	@ (8013f38 <get_config_payload_string+0x3c8>)
 8013e60:	9001      	str	r0, [sp, #4]
 8013e62:	9100      	str	r1, [sp, #0]
 8013e64:	4935      	ldr	r1, [pc, #212]	@ (8013f3c <get_config_payload_string+0x3cc>)
 8013e66:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013e68:	f015 fa78 	bl	802935c <sprintf>
			break;
 8013e6c:	e756      	b.n	8013d1c <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8013e6e:	4b26      	ldr	r3, [pc, #152]	@ (8013f08 <get_config_payload_string+0x398>)
 8013e70:	6819      	ldr	r1, [r3, #0]
 8013e72:	4b26      	ldr	r3, [pc, #152]	@ (8013f0c <get_config_payload_string+0x39c>)
 8013e74:	4a32      	ldr	r2, [pc, #200]	@ (8013f40 <get_config_payload_string+0x3d0>)
 8013e76:	4827      	ldr	r0, [pc, #156]	@ (8013f14 <get_config_payload_string+0x3a4>)
 8013e78:	6800      	ldr	r0, [r0, #0]
 8013e7a:	9010      	str	r0, [sp, #64]	@ 0x40
 8013e7c:	4826      	ldr	r0, [pc, #152]	@ (8013f18 <get_config_payload_string+0x3a8>)
 8013e7e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013e80:	4826      	ldr	r0, [pc, #152]	@ (8013f1c <get_config_payload_string+0x3ac>)
 8013e82:	900e      	str	r0, [sp, #56]	@ 0x38
 8013e84:	4826      	ldr	r0, [pc, #152]	@ (8013f20 <get_config_payload_string+0x3b0>)
 8013e86:	900d      	str	r0, [sp, #52]	@ 0x34
 8013e88:	4826      	ldr	r0, [pc, #152]	@ (8013f24 <get_config_payload_string+0x3b4>)
 8013e8a:	900c      	str	r0, [sp, #48]	@ 0x30
 8013e8c:	4826      	ldr	r0, [pc, #152]	@ (8013f28 <get_config_payload_string+0x3b8>)
 8013e8e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013e90:	910a      	str	r1, [sp, #40]	@ 0x28
 8013e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e94:	482b      	ldr	r0, [pc, #172]	@ (8013f44 <get_config_payload_string+0x3d4>)
 8013e96:	9008      	str	r0, [sp, #32]
 8013e98:	9207      	str	r2, [sp, #28]
 8013e9a:	9106      	str	r1, [sp, #24]
 8013e9c:	9305      	str	r3, [sp, #20]
 8013e9e:	482a      	ldr	r0, [pc, #168]	@ (8013f48 <get_config_payload_string+0x3d8>)
 8013ea0:	9004      	str	r0, [sp, #16]
 8013ea2:	4824      	ldr	r0, [pc, #144]	@ (8013f34 <get_config_payload_string+0x3c4>)
 8013ea4:	9003      	str	r0, [sp, #12]
 8013ea6:	9202      	str	r2, [sp, #8]
 8013ea8:	4823      	ldr	r0, [pc, #140]	@ (8013f38 <get_config_payload_string+0x3c8>)
 8013eaa:	9001      	str	r0, [sp, #4]
 8013eac:	9100      	str	r1, [sp, #0]
 8013eae:	4923      	ldr	r1, [pc, #140]	@ (8013f3c <get_config_payload_string+0x3cc>)
 8013eb0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013eb2:	f015 fa53 	bl	802935c <sprintf>
			break;
 8013eb6:	e731      	b.n	8013d1c <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8013eb8:	4b13      	ldr	r3, [pc, #76]	@ (8013f08 <get_config_payload_string+0x398>)
 8013eba:	6819      	ldr	r1, [r3, #0]
 8013ebc:	4b13      	ldr	r3, [pc, #76]	@ (8013f0c <get_config_payload_string+0x39c>)
 8013ebe:	4a23      	ldr	r2, [pc, #140]	@ (8013f4c <get_config_payload_string+0x3dc>)
 8013ec0:	4814      	ldr	r0, [pc, #80]	@ (8013f14 <get_config_payload_string+0x3a4>)
 8013ec2:	6800      	ldr	r0, [r0, #0]
 8013ec4:	9010      	str	r0, [sp, #64]	@ 0x40
 8013ec6:	4814      	ldr	r0, [pc, #80]	@ (8013f18 <get_config_payload_string+0x3a8>)
 8013ec8:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013eca:	4814      	ldr	r0, [pc, #80]	@ (8013f1c <get_config_payload_string+0x3ac>)
 8013ecc:	900e      	str	r0, [sp, #56]	@ 0x38
 8013ece:	4814      	ldr	r0, [pc, #80]	@ (8013f20 <get_config_payload_string+0x3b0>)
 8013ed0:	900d      	str	r0, [sp, #52]	@ 0x34
 8013ed2:	4814      	ldr	r0, [pc, #80]	@ (8013f24 <get_config_payload_string+0x3b4>)
 8013ed4:	900c      	str	r0, [sp, #48]	@ 0x30
 8013ed6:	4814      	ldr	r0, [pc, #80]	@ (8013f28 <get_config_payload_string+0x3b8>)
 8013ed8:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013eda:	910a      	str	r1, [sp, #40]	@ 0x28
 8013edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ede:	481c      	ldr	r0, [pc, #112]	@ (8013f50 <get_config_payload_string+0x3e0>)
 8013ee0:	9008      	str	r0, [sp, #32]
 8013ee2:	9207      	str	r2, [sp, #28]
 8013ee4:	9106      	str	r1, [sp, #24]
 8013ee6:	9305      	str	r3, [sp, #20]
 8013ee8:	481a      	ldr	r0, [pc, #104]	@ (8013f54 <get_config_payload_string+0x3e4>)
 8013eea:	9004      	str	r0, [sp, #16]
 8013eec:	4811      	ldr	r0, [pc, #68]	@ (8013f34 <get_config_payload_string+0x3c4>)
 8013eee:	9003      	str	r0, [sp, #12]
 8013ef0:	9202      	str	r2, [sp, #8]
 8013ef2:	4811      	ldr	r0, [pc, #68]	@ (8013f38 <get_config_payload_string+0x3c8>)
 8013ef4:	9001      	str	r0, [sp, #4]
 8013ef6:	9100      	str	r1, [sp, #0]
 8013ef8:	4910      	ldr	r1, [pc, #64]	@ (8013f3c <get_config_payload_string+0x3cc>)
 8013efa:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013efc:	f015 fa2e 	bl	802935c <sprintf>
			break;
 8013f00:	e70c      	b.n	8013d1c <get_config_payload_string+0x1ac>
	switch (payload_type) {
 8013f02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f06:	e684      	b.n	8013c12 <get_config_payload_string+0xa2>
 8013f08:	20000a1c 	.word	0x20000a1c
 8013f0c:	080344dc 	.word	0x080344dc
 8013f10:	08034514 	.word	0x08034514
 8013f14:	20000a18 	.word	0x20000a18
 8013f18:	08034550 	.word	0x08034550
 8013f1c:	08034554 	.word	0x08034554
 8013f20:	08034558 	.word	0x08034558
 8013f24:	08034568 	.word	0x08034568
 8013f28:	0803457c 	.word	0x0803457c
 8013f2c:	08034620 	.word	0x08034620
 8013f30:	08034624 	.word	0x08034624
 8013f34:	080369b0 	.word	0x080369b0
 8013f38:	080345dc 	.word	0x080345dc
 8013f3c:	080346e0 	.word	0x080346e0
 8013f40:	08034524 	.word	0x08034524
 8013f44:	08034644 	.word	0x08034644
 8013f48:	08034648 	.word	0x08034648
 8013f4c:	08034534 	.word	0x08034534
 8013f50:	08034674 	.word	0x08034674
 8013f54:	08034678 	.word	0x08034678

08013f58 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8013f58:	b530      	push	{r4, r5, lr}
 8013f5a:	b083      	sub	sp, #12
 8013f5c:	461c      	mov	r4, r3
 8013f5e:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 8013f62:	2a01      	cmp	r2, #1
 8013f64:	d00b      	beq.n	8013f7e <gen_bin_sensor_status_payload_JSON+0x26>
 8013f66:	2a02      	cmp	r2, #2
 8013f68:	d10b      	bne.n	8013f82 <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 8013f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8013f94 <gen_bin_sensor_status_payload_JSON+0x3c>)
			break;
		default:
			break;
	}

	if (state){
 8013f6c:	b15d      	cbz	r5, 8013f86 <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 8013f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8013f98 <gen_bin_sensor_status_payload_JSON+0x40>)
 8013f70:	9201      	str	r2, [sp, #4]
 8013f72:	9400      	str	r4, [sp, #0]
 8013f74:	4a09      	ldr	r2, [pc, #36]	@ (8013f9c <gen_bin_sensor_status_payload_JSON+0x44>)
 8013f76:	f015 f889 	bl	802908c <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 8013f7a:	b003      	add	sp, #12
 8013f7c:	bd30      	pop	{r4, r5, pc}
			sens_name = (char *)component_input;
 8013f7e:	4b08      	ldr	r3, [pc, #32]	@ (8013fa0 <gen_bin_sensor_status_payload_JSON+0x48>)
 8013f80:	e7f4      	b.n	8013f6c <gen_bin_sensor_status_payload_JSON+0x14>
	switch (sensor_type) {
 8013f82:	2300      	movs	r3, #0
 8013f84:	e7f2      	b.n	8013f6c <gen_bin_sensor_status_payload_JSON+0x14>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8013f86:	4a07      	ldr	r2, [pc, #28]	@ (8013fa4 <gen_bin_sensor_status_payload_JSON+0x4c>)
 8013f88:	9201      	str	r2, [sp, #4]
 8013f8a:	9400      	str	r4, [sp, #0]
 8013f8c:	4a03      	ldr	r2, [pc, #12]	@ (8013f9c <gen_bin_sensor_status_payload_JSON+0x44>)
 8013f8e:	f015 f87d 	bl	802908c <snprintf>
 8013f92:	e7f2      	b.n	8013f7a <gen_bin_sensor_status_payload_JSON+0x22>
 8013f94:	08034228 	.word	0x08034228
 8013f98:	080342e0 	.word	0x080342e0
 8013f9c:	080346a8 	.word	0x080346a8
 8013fa0:	080344d4 	.word	0x080344d4
 8013fa4:	080342f8 	.word	0x080342f8

08013fa8 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8013fa8:	b500      	push	{lr}
 8013faa:	b085      	sub	sp, #20

	switch(sensor_type){

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8013fac:	9302      	str	r3, [sp, #8]
 8013fae:	4b06      	ldr	r3, [pc, #24]	@ (8013fc8 <generate_comand_topik_for_subscrabe+0x20>)
 8013fb0:	9301      	str	r3, [sp, #4]
 8013fb2:	4b06      	ldr	r3, [pc, #24]	@ (8013fcc <generate_comand_topik_for_subscrabe+0x24>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	9300      	str	r3, [sp, #0]
 8013fb8:	4b05      	ldr	r3, [pc, #20]	@ (8013fd0 <generate_comand_topik_for_subscrabe+0x28>)
 8013fba:	4a06      	ldr	r2, [pc, #24]	@ (8013fd4 <generate_comand_topik_for_subscrabe+0x2c>)
 8013fbc:	f015 f866 	bl	802908c <snprintf>
			break;
	}
}
 8013fc0:	b005      	add	sp, #20
 8013fc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8013fc6:	bf00      	nop
 8013fc8:	08034228 	.word	0x08034228
 8013fcc:	20000a1c 	.word	0x20000a1c
 8013fd0:	080344dc 	.word	0x080344dc
 8013fd4:	08034684 	.word	0x08034684

08013fd8 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8013fd8:	b500      	push	{lr}
 8013fda:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 8013fdc:	f04f 0c00 	mov.w	ip, #0
 8013fe0:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 8013fe4:	2a01      	cmp	r2, #1
 8013fe6:	d006      	beq.n	8013ff6 <generate_status_topik+0x1e>
 8013fe8:	2a02      	cmp	r2, #2
 8013fea:	d00f      	beq.n	801400c <generate_status_topik+0x34>
 8013fec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 8013ff0:	b005      	add	sp, #20
 8013ff2:	f85d fb04 	ldr.w	pc, [sp], #4
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8013ff6:	9302      	str	r3, [sp, #8]
 8013ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8014024 <generate_status_topik+0x4c>)
 8013ffa:	9301      	str	r3, [sp, #4]
 8013ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8014028 <generate_status_topik+0x50>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	9300      	str	r3, [sp, #0]
 8014002:	4b0a      	ldr	r3, [pc, #40]	@ (801402c <generate_status_topik+0x54>)
 8014004:	4a0a      	ldr	r2, [pc, #40]	@ (8014030 <generate_status_topik+0x58>)
 8014006:	f015 f841 	bl	802908c <snprintf>
 801400a:	e7f1      	b.n	8013ff0 <generate_status_topik+0x18>
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 801400c:	9302      	str	r3, [sp, #8]
 801400e:	4b09      	ldr	r3, [pc, #36]	@ (8014034 <generate_status_topik+0x5c>)
 8014010:	9301      	str	r3, [sp, #4]
 8014012:	4b05      	ldr	r3, [pc, #20]	@ (8014028 <generate_status_topik+0x50>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	9300      	str	r3, [sp, #0]
 8014018:	4b04      	ldr	r3, [pc, #16]	@ (801402c <generate_status_topik+0x54>)
 801401a:	4a05      	ldr	r2, [pc, #20]	@ (8014030 <generate_status_topik+0x58>)
 801401c:	f015 f836 	bl	802908c <snprintf>
 8014020:	e7e6      	b.n	8013ff0 <generate_status_topik+0x18>
 8014022:	bf00      	nop
 8014024:	080344d4 	.word	0x080344d4
 8014028:	20000a1c 	.word	0x20000a1c
 801402c:	080344dc 	.word	0x080344dc
 8014030:	08034694 	.word	0x08034694
 8014034:	08034228 	.word	0x08034228

08014038 <timer_fn>:
  }
  (void) c;
}


void timer_fn(void *arg) {
 8014038:	b508      	push	{r3, lr}
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 801403a:	4b08      	ldr	r3, [pc, #32]	@ (801405c <timer_fn+0x24>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	b12b      	cbz	r3, 801404c <timer_fn+0x14>
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8014040:	4b06      	ldr	r3, [pc, #24]	@ (801405c <timer_fn+0x24>)
 8014042:	6818      	ldr	r0, [r3, #0]
 8014044:	b108      	cbz	r0, 801404a <timer_fn+0x12>
 8014046:	f012 fe5f 	bl	8026d08 <mg_sntp_request>
}
 801404a:	bd08      	pop	{r3, pc}
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 801404c:	4a04      	ldr	r2, [pc, #16]	@ (8014060 <timer_fn+0x28>)
 801404e:	4619      	mov	r1, r3
 8014050:	f012 ff2c 	bl	8026eac <mg_sntp_connect>
 8014054:	4b01      	ldr	r3, [pc, #4]	@ (801405c <timer_fn+0x24>)
 8014056:	6018      	str	r0, [r3, #0]
 8014058:	e7f2      	b.n	8014040 <timer_fn+0x8>
 801405a:	bf00      	nop
 801405c:	20000a20 	.word	0x20000a20
 8014060:	08014065 	.word	0x08014065

08014064 <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 8014064:	b570      	push	{r4, r5, r6, lr}
  if (ev == MG_EV_SNTP_TIME) {
 8014066:	2912      	cmp	r1, #18
 8014068:	d002      	beq.n	8014070 <sfn+0xc>
  } else if (ev == MG_EV_CLOSE) {
 801406a:	2909      	cmp	r1, #9
 801406c:	d046      	beq.n	80140fc <sfn+0x98>
}
 801406e:	bd70      	pop	{r4, r5, r6, pc}
 8014070:	4614      	mov	r4, r2
	  logging(L_INFO, "Response from NTP server received");
 8014072:	4926      	ldr	r1, [pc, #152]	@ (801410c <sfn+0xa8>)
 8014074:	2001      	movs	r0, #1
 8014076:	f7fd fe03 	bl	8011c80 <logging>
    uint64_t curtime = mg_now();
 801407a:	f012 fd81 	bl	8026b80 <mg_now>
 801407e:	4606      	mov	r6, r0
 8014080:	460d      	mov	r5, r1
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8014082:	4b23      	ldr	r3, [pc, #140]	@ (8014110 <sfn+0xac>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2b01      	cmp	r3, #1
 8014088:	dc20      	bgt.n	80140cc <sfn+0x68>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 801408a:	4632      	mov	r2, r6
 801408c:	462b      	mov	r3, r5
 801408e:	4921      	ldr	r1, [pc, #132]	@ (8014114 <sfn+0xb0>)
 8014090:	2001      	movs	r0, #1
 8014092:	f7fd fdf5 	bl	8011c80 <logging>
      uint64_t t = *(uint64_t *) ev_data;
 8014096:	6825      	ldr	r5, [r4, #0]
 8014098:	6864      	ldr	r4, [r4, #4]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 801409a:	f00f f920 	bl	80232de <mg_millis>
 801409e:	1a28      	subs	r0, r5, r0
 80140a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80140a4:	f04f 0300 	mov.w	r3, #0
 80140a8:	eb64 0101 	sbc.w	r1, r4, r1
 80140ac:	f7fc fe54 	bl	8010d58 <__aeabi_uldivmod>
 80140b0:	4b19      	ldr	r3, [pc, #100]	@ (8014118 <sfn+0xb4>)
 80140b2:	e9c3 0100 	strd	r0, r1, [r3]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 80140b6:	4b16      	ldr	r3, [pc, #88]	@ (8014110 <sfn+0xac>)
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	2b01      	cmp	r3, #1
 80140bc:	dc12      	bgt.n	80140e4 <sfn+0x80>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 80140be:	462a      	mov	r2, r5
 80140c0:	4623      	mov	r3, r4
 80140c2:	4916      	ldr	r1, [pc, #88]	@ (801411c <sfn+0xb8>)
 80140c4:	2001      	movs	r0, #1
 80140c6:	f7fd fddb 	bl	8011c80 <logging>
 80140ca:	e7d0      	b.n	801406e <sfn+0xa>
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 80140cc:	4b14      	ldr	r3, [pc, #80]	@ (8014120 <sfn+0xbc>)
 80140ce:	221b      	movs	r2, #27
 80140d0:	4914      	ldr	r1, [pc, #80]	@ (8014124 <sfn+0xc0>)
 80140d2:	2002      	movs	r0, #2
 80140d4:	f00f f908 	bl	80232e8 <mg_log_prefix>
 80140d8:	4632      	mov	r2, r6
 80140da:	462b      	mov	r3, r5
 80140dc:	480d      	ldr	r0, [pc, #52]	@ (8014114 <sfn+0xb0>)
 80140de:	f00d f995 	bl	802140c <mg_log>
 80140e2:	e7d2      	b.n	801408a <sfn+0x26>
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 80140e4:	4b0e      	ldr	r3, [pc, #56]	@ (8014120 <sfn+0xbc>)
 80140e6:	2221      	movs	r2, #33	@ 0x21
 80140e8:	490e      	ldr	r1, [pc, #56]	@ (8014124 <sfn+0xc0>)
 80140ea:	2002      	movs	r0, #2
 80140ec:	f00f f8fc 	bl	80232e8 <mg_log_prefix>
 80140f0:	462a      	mov	r2, r5
 80140f2:	4623      	mov	r3, r4
 80140f4:	480c      	ldr	r0, [pc, #48]	@ (8014128 <sfn+0xc4>)
 80140f6:	f00d f989 	bl	802140c <mg_log>
 80140fa:	e7e0      	b.n	80140be <sfn+0x5a>
	  logging(L_INFO, "NTP connection is closed");
 80140fc:	490b      	ldr	r1, [pc, #44]	@ (801412c <sfn+0xc8>)
 80140fe:	2001      	movs	r0, #1
 8014100:	f7fd fdbe 	bl	8011c80 <logging>
    s_sntp_conn = NULL;
 8014104:	4b0a      	ldr	r3, [pc, #40]	@ (8014130 <sfn+0xcc>)
 8014106:	2200      	movs	r2, #0
 8014108:	601a      	str	r2, [r3, #0]
}
 801410a:	e7b0      	b.n	801406e <sfn+0xa>
 801410c:	08034860 	.word	0x08034860
 8014110:	200000a8 	.word	0x200000a8
 8014114:	080348a4 	.word	0x080348a4
 8014118:	20000a28 	.word	0x20000a28
 801411c:	080348fc 	.word	0x080348fc
 8014120:	08034958 	.word	0x08034958
 8014124:	08034884 	.word	0x08034884
 8014128:	080348d8 	.word	0x080348d8
 801412c:	08034920 	.word	0x08034920
 8014130:	20000a20 	.word	0x20000a20

08014134 <start_sntp>:

void start_sntp(void *arg){
 8014134:	b530      	push	{r4, r5, lr}
 8014136:	b085      	sub	sp, #20
 8014138:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 801413a:	490d      	ldr	r1, [pc, #52]	@ (8014170 <start_sntp+0x3c>)
 801413c:	2001      	movs	r0, #1
 801413e:	f7fd fd9f 	bl	8011c80 <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 8014142:	9402      	str	r4, [sp, #8]
 8014144:	4d0b      	ldr	r5, [pc, #44]	@ (8014174 <start_sntp+0x40>)
 8014146:	9501      	str	r5, [sp, #4]
 8014148:	2300      	movs	r3, #0
 801414a:	9300      	str	r3, [sp, #0]
 801414c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8014150:	2300      	movs	r3, #0
 8014152:	4620      	mov	r0, r4
 8014154:	f00e fb72 	bl	802283c <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 8014158:	9402      	str	r4, [sp, #8]
 801415a:	9501      	str	r5, [sp, #4]
 801415c:	2301      	movs	r3, #1
 801415e:	9300      	str	r3, [sp, #0]
 8014160:	4a05      	ldr	r2, [pc, #20]	@ (8014178 <start_sntp+0x44>)
 8014162:	2300      	movs	r3, #0
 8014164:	4620      	mov	r0, r4
 8014166:	f00e fb69 	bl	802283c <mg_timer_add>

}
 801416a:	b005      	add	sp, #20
 801416c:	bd30      	pop	{r4, r5, pc}
 801416e:	bf00      	nop
 8014170:	0803493c 	.word	0x0803493c
 8014174:	08014039 	.word	0x08014039
 8014178:	00107ac0 	.word	0x00107ac0

0801417c <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 801417c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801417e:	fb01 f400 	mul.w	r4, r1, r0
 8014182:	4620      	mov	r0, r4
 8014184:	f004 ffa8 	bl	80190d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8014188:	4605      	mov	r5, r0
 801418a:	b118      	cbz	r0, 8014194 <my_calloc+0x18>
 801418c:	4622      	mov	r2, r4
 801418e:	2100      	movs	r1, #0
 8014190:	f015 fca6 	bl	8029ae0 <memset>
}
 8014194:	4628      	mov	r0, r5
 8014196:	bd38      	pop	{r3, r4, r5, pc}

08014198 <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 8014198:	b570      	push	{r4, r5, r6, lr}
 801419a:	b088      	sub	sp, #32
 801419c:	4605      	mov	r5, r0
 801419e:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 80141a0:	4917      	ldr	r1, [pc, #92]	@ (8014200 <dev_description_handler+0x68>)
 80141a2:	2000      	movs	r0, #0
 80141a4:	f7fd fd6c 	bl	8011c80 <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80141a8:	ae06      	add	r6, sp, #24
 80141aa:	4916      	ldr	r1, [pc, #88]	@ (8014204 <dev_description_handler+0x6c>)
 80141ac:	4630      	mov	r0, r6
 80141ae:	f00d fa63 	bl	8021678 <mg_str_s>
 80141b2:	2300      	movs	r3, #0
 80141b4:	9300      	str	r3, [sp, #0]
 80141b6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80141ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80141be:	f00d fc0f 	bl	80219e0 <mg_match>
 80141c2:	b1a8      	cbz	r0, 80141f0 <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 80141c4:	4b10      	ldr	r3, [pc, #64]	@ (8014208 <dev_description_handler+0x70>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	9305      	str	r3, [sp, #20]
 80141ca:	4b10      	ldr	r3, [pc, #64]	@ (801420c <dev_description_handler+0x74>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	9304      	str	r3, [sp, #16]
 80141d0:	4b0f      	ldr	r3, [pc, #60]	@ (8014210 <dev_description_handler+0x78>)
 80141d2:	9303      	str	r3, [sp, #12]
 80141d4:	4b0f      	ldr	r3, [pc, #60]	@ (8014214 <dev_description_handler+0x7c>)
 80141d6:	9302      	str	r3, [sp, #8]
 80141d8:	4b0f      	ldr	r3, [pc, #60]	@ (8014218 <dev_description_handler+0x80>)
 80141da:	9301      	str	r3, [sp, #4]
 80141dc:	4b0f      	ldr	r3, [pc, #60]	@ (801421c <dev_description_handler+0x84>)
 80141de:	9300      	str	r3, [sp, #0]
 80141e0:	4b0f      	ldr	r3, [pc, #60]	@ (8014220 <dev_description_handler+0x88>)
 80141e2:	4a10      	ldr	r2, [pc, #64]	@ (8014224 <dev_description_handler+0x8c>)
 80141e4:	21c8      	movs	r1, #200	@ 0xc8
 80141e6:	4628      	mov	r0, r5
 80141e8:	f00d f964 	bl	80214b4 <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 80141ec:	b008      	add	sp, #32
 80141ee:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 80141f0:	4b0d      	ldr	r3, [pc, #52]	@ (8014228 <dev_description_handler+0x90>)
 80141f2:	4a0c      	ldr	r2, [pc, #48]	@ (8014224 <dev_description_handler+0x8c>)
 80141f4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80141f8:	4628      	mov	r0, r5
 80141fa:	f00d f95b 	bl	80214b4 <mg_http_reply>
}
 80141fe:	e7f5      	b.n	80141ec <dev_description_handler+0x54>
 8014200:	0803495c 	.word	0x0803495c
 8014204:	08033564 	.word	0x08033564
 8014208:	20000a3c 	.word	0x20000a3c
 801420c:	20000a44 	.word	0x20000a44
 8014210:	08034550 	.word	0x08034550
 8014214:	08034568 	.word	0x08034568
 8014218:	08034558 	.word	0x08034558
 801421c:	0803457c 	.word	0x0803457c
 8014220:	08034c64 	.word	0x08034c64
 8014224:	08033984 	.word	0x08033984
 8014228:	080336b0 	.word	0x080336b0

0801422c <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 801422c:	b510      	push	{r4, lr}
 801422e:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 8014230:	4905      	ldr	r1, [pc, #20]	@ (8014248 <dev_404_handler+0x1c>)
 8014232:	2000      	movs	r0, #0
 8014234:	f7fd fd24 	bl	8011c80 <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 8014238:	4b04      	ldr	r3, [pc, #16]	@ (801424c <dev_404_handler+0x20>)
 801423a:	4a05      	ldr	r2, [pc, #20]	@ (8014250 <dev_404_handler+0x24>)
 801423c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8014240:	4620      	mov	r0, r4
 8014242:	f00d f937 	bl	80214b4 <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 8014246:	bd10      	pop	{r4, pc}
 8014248:	0803497c 	.word	0x0803497c
 801424c:	08034994 	.word	0x08034994
 8014250:	08033984 	.word	0x08033984

08014254 <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 8014254:	290b      	cmp	r1, #11
 8014256:	d000      	beq.n	801425a <ssdp_web_handler+0x6>
 8014258:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 801425a:	b570      	push	{r4, r5, r6, lr}
 801425c:	b086      	sub	sp, #24
 801425e:	4605      	mov	r5, r0
 8014260:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 8014262:	4917      	ldr	r1, [pc, #92]	@ (80142c0 <ssdp_web_handler+0x6c>)
 8014264:	2000      	movs	r0, #0
 8014266:	f7fd fd0b 	bl	8011c80 <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 801426a:	ae02      	add	r6, sp, #8
 801426c:	4915      	ldr	r1, [pc, #84]	@ (80142c4 <ssdp_web_handler+0x70>)
 801426e:	4630      	mov	r0, r6
 8014270:	f00d fa02 	bl	8021678 <mg_str_s>
 8014274:	2300      	movs	r3, #0
 8014276:	9300      	str	r3, [sp, #0]
 8014278:	e896 000c 	ldmia.w	r6, {r2, r3}
 801427c:	f104 0108 	add.w	r1, r4, #8
 8014280:	c903      	ldmia	r1, {r0, r1}
 8014282:	f00d fbad 	bl	80219e0 <mg_match>
 8014286:	b128      	cbz	r0, 8014294 <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 8014288:	4621      	mov	r1, r4
 801428a:	4628      	mov	r0, r5
 801428c:	f7ff ff84 	bl	8014198 <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 8014290:	b006      	add	sp, #24
 8014292:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8014294:	ae04      	add	r6, sp, #16
 8014296:	490c      	ldr	r1, [pc, #48]	@ (80142c8 <ssdp_web_handler+0x74>)
 8014298:	4630      	mov	r0, r6
 801429a:	f00d f9ed 	bl	8021678 <mg_str_s>
 801429e:	2300      	movs	r3, #0
 80142a0:	9300      	str	r3, [sp, #0]
 80142a2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80142a6:	f104 0108 	add.w	r1, r4, #8
 80142aa:	c903      	ldmia	r1, {r0, r1}
 80142ac:	f00d fb98 	bl	80219e0 <mg_match>
 80142b0:	2800      	cmp	r0, #0
 80142b2:	d0ed      	beq.n	8014290 <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 80142b4:	4621      	mov	r1, r4
 80142b6:	4628      	mov	r0, r5
 80142b8:	f7ff ffb8 	bl	801422c <dev_404_handler>
}
 80142bc:	e7e8      	b.n	8014290 <ssdp_web_handler+0x3c>
 80142be:	bf00      	nop
 80142c0:	080349c0 	.word	0x080349c0
 80142c4:	080349e8 	.word	0x080349e8
 80142c8:	08034a00 	.word	0x08034a00

080142cc <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 80142cc:	b510      	push	{r4, lr}
 80142ce:	b084      	sub	sp, #16
 80142d0:	4602      	mov	r2, r0
 80142d2:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 80142d4:	0e14      	lsrs	r4, r2, #24
 80142d6:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 80142da:	0c11      	lsrs	r1, r2, #16
 80142dc:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 80142e0:	0a13      	lsrs	r3, r2, #8
 80142e2:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 80142e6:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 80142ea:	9401      	str	r4, [sp, #4]
 80142ec:	b2c9      	uxtb	r1, r1
 80142ee:	9100      	str	r1, [sp, #0]
 80142f0:	b2db      	uxtb	r3, r3
 80142f2:	b2d2      	uxtb	r2, r2
 80142f4:	4902      	ldr	r1, [pc, #8]	@ (8014300 <ip_to_string+0x34>)
 80142f6:	f015 f831 	bl	802935c <sprintf>
}
 80142fa:	b004      	add	sp, #16
 80142fc:	bd10      	pop	{r4, pc}
 80142fe:	bf00      	nop
 8014300:	08034a04 	.word	0x08034a04

08014304 <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 8014304:	b570      	push	{r4, r5, r6, lr}
 8014306:	b084      	sub	sp, #16
 8014308:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 801430a:	491e      	ldr	r1, [pc, #120]	@ (8014384 <send_ssdp_notify+0x80>)
 801430c:	2000      	movs	r0, #0
 801430e:	f7fd fcb7 	bl	8011c80 <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 8014312:	4b1d      	ldr	r3, [pc, #116]	@ (8014388 <send_ssdp_notify+0x84>)
 8014314:	6818      	ldr	r0, [r3, #0]
 8014316:	f7fb ffc3 	bl	80102a0 <strlen>
 801431a:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 801431c:	2101      	movs	r1, #1
 801431e:	f200 1039 	addw	r0, r0, #313	@ 0x139
 8014322:	f7ff ff2b 	bl	801417c <my_calloc>
 8014326:	4a19      	ldr	r2, [pc, #100]	@ (801438c <send_ssdp_notify+0x88>)
 8014328:	6010      	str	r0, [r2, #0]
	if (!buff) {
 801432a:	b330      	cbz	r0, 801437a <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 801432c:	4b18      	ldr	r3, [pc, #96]	@ (8014390 <send_ssdp_notify+0x8c>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	4d18      	ldr	r5, [pc, #96]	@ (8014394 <send_ssdp_notify+0x90>)
 8014332:	6829      	ldr	r1, [r5, #0]
 8014334:	6898      	ldr	r0, [r3, #8]
 8014336:	f7ff ffc9 	bl	80142cc <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 801433a:	4b13      	ldr	r3, [pc, #76]	@ (8014388 <send_ssdp_notify+0x84>)
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	9302      	str	r3, [sp, #8]
 8014340:	4b15      	ldr	r3, [pc, #84]	@ (8014398 <send_ssdp_notify+0x94>)
 8014342:	9301      	str	r3, [sp, #4]
 8014344:	682b      	ldr	r3, [r5, #0]
 8014346:	9300      	str	r3, [sp, #0]
 8014348:	4b14      	ldr	r3, [pc, #80]	@ (801439c <send_ssdp_notify+0x98>)
 801434a:	4a15      	ldr	r2, [pc, #84]	@ (80143a0 <send_ssdp_notify+0x9c>)
 801434c:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 8014350:	480e      	ldr	r0, [pc, #56]	@ (801438c <send_ssdp_notify+0x88>)
 8014352:	6800      	ldr	r0, [r0, #0]
 8014354:	f014 fe9a 	bl	802908c <snprintf>
    if (udp_conn != NULL) {
 8014358:	b14e      	cbz	r6, 801436e <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 801435a:	4b0c      	ldr	r3, [pc, #48]	@ (801438c <send_ssdp_notify+0x88>)
 801435c:	681c      	ldr	r4, [r3, #0]
 801435e:	4620      	mov	r0, r4
 8014360:	f7fb ff9e 	bl	80102a0 <strlen>
 8014364:	4602      	mov	r2, r0
 8014366:	4621      	mov	r1, r4
 8014368:	4630      	mov	r0, r6
 801436a:	f010 f871 	bl	8024450 <mg_send>
    free(buff);
 801436e:	4b07      	ldr	r3, [pc, #28]	@ (801438c <send_ssdp_notify+0x88>)
 8014370:	6818      	ldr	r0, [r3, #0]
 8014372:	f004 ff33 	bl	80191dc <vPortFree>
}
 8014376:	b004      	add	sp, #16
 8014378:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 801437a:	490a      	ldr	r1, [pc, #40]	@ (80143a4 <send_ssdp_notify+0xa0>)
 801437c:	2003      	movs	r0, #3
 801437e:	f7fd fc7f 	bl	8011c80 <logging>
		return; //TODO add log
 8014382:	e7f8      	b.n	8014376 <send_ssdp_notify+0x72>
 8014384:	08034a10 	.word	0x08034a10
 8014388:	20000a44 	.word	0x20000a44
 801438c:	20000a40 	.word	0x20000a40
 8014390:	20000a34 	.word	0x20000a34
 8014394:	20000a3c 	.word	0x20000a3c
 8014398:	08034a60 	.word	0x08034a60
 801439c:	08034a58 	.word	0x08034a58
 80143a0:	08034b6c 	.word	0x08034b6c
 80143a4:	08034a28 	.word	0x08034a28

080143a8 <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 80143a8:	2907      	cmp	r1, #7
 80143aa:	d000      	beq.n	80143ae <ssdp_listener_handler+0x6>
 80143ac:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 80143ae:	b570      	push	{r4, r5, r6, lr}
 80143b0:	b088      	sub	sp, #32
 80143b2:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 80143b4:	491a      	ldr	r1, [pc, #104]	@ (8014420 <ssdp_listener_handler+0x78>)
 80143b6:	2000      	movs	r0, #0
 80143b8:	f7fd fc62 	bl	8011c80 <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 80143bc:	4b19      	ldr	r3, [pc, #100]	@ (8014424 <ssdp_listener_handler+0x7c>)
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	ad02      	add	r5, sp, #8
 80143c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80143c4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80143c6:	4628      	mov	r0, r5
 80143c8:	f00d f962 	bl	8021690 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 80143cc:	ae04      	add	r6, sp, #16
 80143ce:	4916      	ldr	r1, [pc, #88]	@ (8014428 <ssdp_listener_handler+0x80>)
 80143d0:	4630      	mov	r0, r6
 80143d2:	f00d f951 	bl	8021678 <mg_str_s>
 80143d6:	2300      	movs	r3, #0
 80143d8:	9300      	str	r3, [sp, #0]
 80143da:	e896 000c 	ldmia.w	r6, {r2, r3}
 80143de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80143e2:	f00d fafd 	bl	80219e0 <mg_match>
 80143e6:	b918      	cbnz	r0, 80143f0 <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 80143e8:	2300      	movs	r3, #0
 80143ea:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 80143ec:	b008      	add	sp, #32
 80143ee:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 80143f0:	ad06      	add	r5, sp, #24
 80143f2:	490e      	ldr	r1, [pc, #56]	@ (801442c <ssdp_listener_handler+0x84>)
 80143f4:	4628      	mov	r0, r5
 80143f6:	f00d f93f 	bl	8021678 <mg_str_s>
 80143fa:	2300      	movs	r3, #0
 80143fc:	9300      	str	r3, [sp, #0]
 80143fe:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014402:	a902      	add	r1, sp, #8
 8014404:	c903      	ldmia	r1, {r0, r1}
 8014406:	f00d faeb 	bl	80219e0 <mg_match>
 801440a:	2800      	cmp	r0, #0
 801440c:	d0ec      	beq.n	80143e8 <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 801440e:	4908      	ldr	r1, [pc, #32]	@ (8014430 <ssdp_listener_handler+0x88>)
 8014410:	2000      	movs	r0, #0
 8014412:	f7fd fc35 	bl	8011c80 <logging>
			send_ssdp_notify(udp_listen_conn);
 8014416:	4b03      	ldr	r3, [pc, #12]	@ (8014424 <ssdp_listener_handler+0x7c>)
 8014418:	6818      	ldr	r0, [r3, #0]
 801441a:	f7ff ff73 	bl	8014304 <send_ssdp_notify>
 801441e:	e7e3      	b.n	80143e8 <ssdp_listener_handler+0x40>
 8014420:	08034a68 	.word	0x08034a68
 8014424:	20000a30 	.word	0x20000a30
 8014428:	08034a9c 	.word	0x08034a9c
 801442c:	08034aa8 	.word	0x08034aa8
 8014430:	08034ab8 	.word	0x08034ab8

08014434 <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 8014434:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 8014436:	490c      	ldr	r1, [pc, #48]	@ (8014468 <ssdp_timer_handler+0x34>)
 8014438:	2000      	movs	r0, #0
 801443a:	f7fd fc21 	bl	8011c80 <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 801443e:	2300      	movs	r3, #0
 8014440:	461a      	mov	r2, r3
 8014442:	490a      	ldr	r1, [pc, #40]	@ (801446c <ssdp_timer_handler+0x38>)
 8014444:	480a      	ldr	r0, [pc, #40]	@ (8014470 <ssdp_timer_handler+0x3c>)
 8014446:	6800      	ldr	r0, [r0, #0]
 8014448:	f011 fcd6 	bl	8025df8 <mg_connect>
	if (conn == NULL){
 801444c:	b130      	cbz	r0, 801445c <ssdp_timer_handler+0x28>
 801444e:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 8014450:	f7ff ff58 	bl	8014304 <send_ssdp_notify>
	mg_close_conn(conn);
 8014454:	4620      	mov	r0, r4
 8014456:	f00f feb9 	bl	80241cc <mg_close_conn>
}
 801445a:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 801445c:	4905      	ldr	r1, [pc, #20]	@ (8014474 <ssdp_timer_handler+0x40>)
 801445e:	2003      	movs	r0, #3
 8014460:	f7fd fc0e 	bl	8011c80 <logging>
		return ;
 8014464:	e7f9      	b.n	801445a <ssdp_timer_handler+0x26>
 8014466:	bf00      	nop
 8014468:	08034ae8 	.word	0x08034ae8
 801446c:	08034e08 	.word	0x08034e08
 8014470:	20000a38 	.word	0x20000a38
 8014474:	08034b00 	.word	0x08034b00

08014478 <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 8014478:	b570      	push	{r4, r5, r6, lr}
 801447a:	4606      	mov	r6, r0
 801447c:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 801447e:	4910      	ldr	r1, [pc, #64]	@ (80144c0 <ssdp_set_id+0x48>)
 8014480:	2000      	movs	r0, #0
 8014482:	f7fd fbfd 	bl	8011c80 <logging>
	if (id && (id_len > 0)){
 8014486:	b1d6      	cbz	r6, 80144be <ssdp_set_id+0x46>
 8014488:	b1cd      	cbz	r5, 80144be <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 801448a:	4b0e      	ldr	r3, [pc, #56]	@ (80144c4 <ssdp_set_id+0x4c>)
 801448c:	6818      	ldr	r0, [r3, #0]
 801448e:	b108      	cbz	r0, 8014494 <ssdp_set_id+0x1c>
 8014490:	f004 fea4 	bl	80191dc <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8014494:	0068      	lsls	r0, r5, #1
 8014496:	2101      	movs	r1, #1
 8014498:	4408      	add	r0, r1
 801449a:	f7ff fe6f 	bl	801417c <my_calloc>
 801449e:	4b09      	ldr	r3, [pc, #36]	@ (80144c4 <ssdp_set_id+0x4c>)
 80144a0:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 80144a2:	b160      	cbz	r0, 80144be <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 80144a4:	2400      	movs	r4, #0
 80144a6:	e008      	b.n	80144ba <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 80144a8:	4b06      	ldr	r3, [pc, #24]	@ (80144c4 <ssdp_set_id+0x4c>)
 80144aa:	6818      	ldr	r0, [r3, #0]
 80144ac:	5d32      	ldrb	r2, [r6, r4]
 80144ae:	4906      	ldr	r1, [pc, #24]	@ (80144c8 <ssdp_set_id+0x50>)
 80144b0:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80144b4:	f014 ff52 	bl	802935c <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 80144b8:	3401      	adds	r4, #1
 80144ba:	42a5      	cmp	r5, r4
 80144bc:	d8f4      	bhi.n	80144a8 <ssdp_set_id+0x30>
}
 80144be:	bd70      	pop	{r4, r5, r6, pc}
 80144c0:	08034b28 	.word	0x08034b28
 80144c4:	20000a44 	.word	0x20000a44
 80144c8:	080344b4 	.word	0x080344b4

080144cc <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 80144cc:	b530      	push	{r4, r5, lr}
 80144ce:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 80144d0:	4b18      	ldr	r3, [pc, #96]	@ (8014534 <ssdp_start_server+0x68>)
 80144d2:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 80144d4:	4b18      	ldr	r3, [pc, #96]	@ (8014538 <ssdp_start_server+0x6c>)
 80144d6:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 80144d8:	2101      	movs	r1, #1
 80144da:	2028      	movs	r0, #40	@ 0x28
 80144dc:	f7ff fe4e 	bl	801417c <my_calloc>
 80144e0:	4b16      	ldr	r3, [pc, #88]	@ (801453c <ssdp_start_server+0x70>)
 80144e2:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 80144e4:	b318      	cbz	r0, 801452e <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 80144e6:	4d14      	ldr	r5, [pc, #80]	@ (8014538 <ssdp_start_server+0x6c>)
 80144e8:	2106      	movs	r1, #6
 80144ea:	6828      	ldr	r0, [r5, #0]
 80144ec:	f7ff ffc4 	bl	8014478 <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 80144f0:	4913      	ldr	r1, [pc, #76]	@ (8014540 <ssdp_start_server+0x74>)
 80144f2:	2001      	movs	r0, #1
 80144f4:	f7fd fbc4 	bl	8011c80 <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 80144f8:	4c0e      	ldr	r4, [pc, #56]	@ (8014534 <ssdp_start_server+0x68>)
 80144fa:	2300      	movs	r3, #0
 80144fc:	9302      	str	r3, [sp, #8]
 80144fe:	4b11      	ldr	r3, [pc, #68]	@ (8014544 <ssdp_start_server+0x78>)
 8014500:	9301      	str	r3, [sp, #4]
 8014502:	2303      	movs	r3, #3
 8014504:	9300      	str	r3, [sp, #0]
 8014506:	f64e 2260 	movw	r2, #60000	@ 0xea60
 801450a:	2300      	movs	r3, #0
 801450c:	6820      	ldr	r0, [r4, #0]
 801450e:	f00e f995 	bl	802283c <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 8014512:	682b      	ldr	r3, [r5, #0]
 8014514:	4a0c      	ldr	r2, [pc, #48]	@ (8014548 <ssdp_start_server+0x7c>)
 8014516:	490d      	ldr	r1, [pc, #52]	@ (801454c <ssdp_start_server+0x80>)
 8014518:	6820      	ldr	r0, [r4, #0]
 801451a:	f00f ff31 	bl	8024380 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 801451e:	682b      	ldr	r3, [r5, #0]
 8014520:	4a0b      	ldr	r2, [pc, #44]	@ (8014550 <ssdp_start_server+0x84>)
 8014522:	490c      	ldr	r1, [pc, #48]	@ (8014554 <ssdp_start_server+0x88>)
 8014524:	6820      	ldr	r0, [r4, #0]
 8014526:	f00f fea7 	bl	8024278 <mg_listen>
 801452a:	4b0b      	ldr	r3, [pc, #44]	@ (8014558 <ssdp_start_server+0x8c>)
 801452c:	6018      	str	r0, [r3, #0]
}
 801452e:	b005      	add	sp, #20
 8014530:	bd30      	pop	{r4, r5, pc}
 8014532:	bf00      	nop
 8014534:	20000a38 	.word	0x20000a38
 8014538:	20000a34 	.word	0x20000a34
 801453c:	20000a3c 	.word	0x20000a3c
 8014540:	08034b3c 	.word	0x08034b3c
 8014544:	08014435 	.word	0x08014435
 8014548:	08014255 	.word	0x08014255
 801454c:	08034b54 	.word	0x08034b54
 8014550:	080143a9 	.word	0x080143a9
 8014554:	08034e08 	.word	0x08034e08
 8014558:	20000a30 	.word	0x20000a30

0801455c <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 801455c:	4770      	bx	lr
	...

08014560 <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8014560:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 8014562:	4b02      	ldr	r3, [pc, #8]	@ (801456c <sFLASH_SPI_ReadBuffer+0xc>)
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	4798      	blx	r3
}
 8014568:	bd08      	pop	{r3, pc}
 801456a:	bf00      	nop
 801456c:	20000a88 	.word	0x20000a88

08014570 <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 8014570:	b410      	push	{r4}
	if (chip_select){
 8014572:	b158      	cbz	r0, 801458c <SPI_flash_reg_cb+0x1c>
 8014574:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 8014576:	4809      	ldr	r0, [pc, #36]	@ (801459c <SPI_flash_reg_cb+0x2c>)
 8014578:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 801457a:	b159      	cbz	r1, 8014594 <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 801457c:	4807      	ldr	r0, [pc, #28]	@ (801459c <SPI_flash_reg_cb+0x2c>)
 801457e:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 8014580:	4906      	ldr	r1, [pc, #24]	@ (801459c <SPI_flash_reg_cb+0x2c>)
 8014582:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 8014584:	608b      	str	r3, [r1, #8]
}
 8014586:	f85d 4b04 	ldr.w	r4, [sp], #4
 801458a:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 801458c:	4803      	ldr	r0, [pc, #12]	@ (801459c <SPI_flash_reg_cb+0x2c>)
 801458e:	4c04      	ldr	r4, [pc, #16]	@ (80145a0 <SPI_flash_reg_cb+0x30>)
 8014590:	60c4      	str	r4, [r0, #12]
 8014592:	e7f2      	b.n	801457a <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 8014594:	4901      	ldr	r1, [pc, #4]	@ (801459c <SPI_flash_reg_cb+0x2c>)
 8014596:	4802      	ldr	r0, [pc, #8]	@ (80145a0 <SPI_flash_reg_cb+0x30>)
 8014598:	6108      	str	r0, [r1, #16]
 801459a:	e7f1      	b.n	8014580 <SPI_flash_reg_cb+0x10>
 801459c:	20000a88 	.word	0x20000a88
 80145a0:	0801455d 	.word	0x0801455d

080145a4 <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 80145a4:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 80145a6:	4b02      	ldr	r3, [pc, #8]	@ (80145b0 <sFLASH_CS_LOW+0xc>)
 80145a8:	68db      	ldr	r3, [r3, #12]
 80145aa:	4798      	blx	r3
}
 80145ac:	bd08      	pop	{r3, pc}
 80145ae:	bf00      	nop
 80145b0:	20000a88 	.word	0x20000a88

080145b4 <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 80145b4:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 80145b6:	4b02      	ldr	r3, [pc, #8]	@ (80145c0 <sFLASH_CS_HIGH+0xc>)
 80145b8:	691b      	ldr	r3, [r3, #16]
 80145ba:	4798      	blx	r3
}
 80145bc:	bd08      	pop	{r3, pc}
 80145be:	bf00      	nop
 80145c0:	20000a88 	.word	0x20000a88

080145c4 <sFLASH_ReadByte>:
{
 80145c4:	b500      	push	{lr}
 80145c6:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 80145c8:	4b05      	ldr	r3, [pc, #20]	@ (80145e0 <sFLASH_ReadByte+0x1c>)
 80145ca:	685b      	ldr	r3, [r3, #4]
 80145cc:	2101      	movs	r1, #1
 80145ce:	f10d 0007 	add.w	r0, sp, #7
 80145d2:	4798      	blx	r3
}
 80145d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80145d8:	b003      	add	sp, #12
 80145da:	f85d fb04 	ldr.w	pc, [sp], #4
 80145de:	bf00      	nop
 80145e0:	20000a88 	.word	0x20000a88

080145e4 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 80145e4:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 80145e6:	4b02      	ldr	r3, [pc, #8]	@ (80145f0 <sFLASH_SendByte+0xc>)
 80145e8:	689b      	ldr	r3, [r3, #8]
 80145ea:	4798      	blx	r3
}
 80145ec:	bd08      	pop	{r3, pc}
 80145ee:	bf00      	nop
 80145f0:	20000a88 	.word	0x20000a88

080145f4 <sFLASH_Reset>:
void sFLASH_Reset(void){
 80145f4:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 80145f6:	f7ff ffd5 	bl	80145a4 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 80145fa:	2066      	movs	r0, #102	@ 0x66
 80145fc:	f7ff fff2 	bl	80145e4 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8014600:	2099      	movs	r0, #153	@ 0x99
 8014602:	f7ff ffef 	bl	80145e4 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8014606:	f7ff ffd5 	bl	80145b4 <sFLASH_CS_HIGH>
}
 801460a:	bd08      	pop	{r3, pc}

0801460c <sFLASH_Init>:
void sFLASH_Init(void){
 801460c:	b508      	push	{r3, lr}
    HAL_Delay(100);
 801460e:	2064      	movs	r0, #100	@ 0x64
 8014610:	f000 fa16 	bl	8014a40 <HAL_Delay>
    sFLASH_Reset();
 8014614:	f7ff ffee 	bl	80145f4 <sFLASH_Reset>
    HAL_Delay(100);
 8014618:	2064      	movs	r0, #100	@ 0x64
 801461a:	f000 fa11 	bl	8014a40 <HAL_Delay>
    HAL_Delay(100);
 801461e:	2064      	movs	r0, #100	@ 0x64
 8014620:	f000 fa0e 	bl	8014a40 <HAL_Delay>
}
 8014624:	bd08      	pop	{r3, pc}

08014626 <sFLASH_ReadBuffer>:
{
 8014626:	b570      	push	{r4, r5, r6, lr}
 8014628:	4606      	mov	r6, r0
 801462a:	460c      	mov	r4, r1
 801462c:	4615      	mov	r5, r2
  sFLASH_CS_LOW();
 801462e:	f7ff ffb9 	bl	80145a4 <sFLASH_CS_LOW>
  if (NumByteToRead > 16){
 8014632:	2d10      	cmp	r5, #16
 8014634:	d917      	bls.n	8014666 <sFLASH_ReadBuffer+0x40>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 8014636:	200b      	movs	r0, #11
 8014638:	f7ff ffd4 	bl	80145e4 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 801463c:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8014640:	f7ff ffd0 	bl	80145e4 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 8014644:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8014648:	f7ff ffcc 	bl	80145e4 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 801464c:	b2e0      	uxtb	r0, r4
 801464e:	f7ff ffc9 	bl	80145e4 <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 8014652:	2000      	movs	r0, #0
 8014654:	f7ff ffc6 	bl	80145e4 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8014658:	4629      	mov	r1, r5
 801465a:	4630      	mov	r0, r6
 801465c:	f7ff ff80 	bl	8014560 <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 8014660:	f7ff ffa8 	bl	80145b4 <sFLASH_CS_HIGH>
}
 8014664:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 8014666:	2003      	movs	r0, #3
 8014668:	f7ff ffbc 	bl	80145e4 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 801466c:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8014670:	f7ff ffb8 	bl	80145e4 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8014674:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8014678:	f7ff ffb4 	bl	80145e4 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 801467c:	b2e0      	uxtb	r0, r4
 801467e:	f7ff ffb1 	bl	80145e4 <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 8014682:	e004      	b.n	801468e <sFLASH_ReadBuffer+0x68>
		  *pBuffer = sFLASH_ReadByte();
 8014684:	f7ff ff9e 	bl	80145c4 <sFLASH_ReadByte>
 8014688:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 801468c:	4625      	mov	r5, r4
 801468e:	1e6b      	subs	r3, r5, #1
 8014690:	b29c      	uxth	r4, r3
 8014692:	2d00      	cmp	r5, #0
 8014694:	d1f6      	bne.n	8014684 <sFLASH_ReadBuffer+0x5e>
 8014696:	e7e3      	b.n	8014660 <sFLASH_ReadBuffer+0x3a>

08014698 <sFLASH_ReadID>:
{
 8014698:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 801469a:	f7ff ff83 	bl	80145a4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 801469e:	f7ff ff89 	bl	80145b4 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80146a2:	f7ff ff7f 	bl	80145a4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80146a6:	f7ff ff85 	bl	80145b4 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80146aa:	f7ff ff7b 	bl	80145a4 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 80146ae:	209f      	movs	r0, #159	@ 0x9f
 80146b0:	f7ff ff98 	bl	80145e4 <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 80146b4:	f7ff ff86 	bl	80145c4 <sFLASH_ReadByte>
 80146b8:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 80146ba:	f7ff ff83 	bl	80145c4 <sFLASH_ReadByte>
 80146be:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 80146c0:	f7ff ff80 	bl	80145c4 <sFLASH_ReadByte>
 80146c4:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 80146c6:	f7ff ff75 	bl	80145b4 <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80146ca:	0224      	lsls	r4, r4, #8
 80146cc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 80146d0:	ea44 0005 	orr.w	r0, r4, r5
 80146d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080146d8 <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 80146d8:	b538      	push	{r3, r4, r5, lr}
 80146da:	4605      	mov	r5, r0
	sFLASH_Init();
 80146dc:	f7ff ff96 	bl	801460c <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 80146e0:	f7ff ffda 	bl	8014698 <sFLASH_ReadID>
	switch (flash_id) {
 80146e4:	4b52      	ldr	r3, [pc, #328]	@ (8014830 <sFLASH_GetInfo+0x158>)
 80146e6:	4298      	cmp	r0, r3
 80146e8:	f000 8085 	beq.w	80147f6 <sFLASH_GetInfo+0x11e>
 80146ec:	f0c0 809c 	bcc.w	8014828 <sFLASH_GetInfo+0x150>
 80146f0:	4b50      	ldr	r3, [pc, #320]	@ (8014834 <sFLASH_GetInfo+0x15c>)
 80146f2:	4298      	cmp	r0, r3
 80146f4:	f200 8098 	bhi.w	8014828 <sFLASH_GetInfo+0x150>
 80146f8:	3b03      	subs	r3, #3
 80146fa:	4298      	cmp	r0, r3
 80146fc:	f0c0 8094 	bcc.w	8014828 <sFLASH_GetInfo+0x150>
 8014700:	4b4d      	ldr	r3, [pc, #308]	@ (8014838 <sFLASH_GetInfo+0x160>)
 8014702:	4403      	add	r3, r0
 8014704:	2b03      	cmp	r3, #3
 8014706:	f200 808f 	bhi.w	8014828 <sFLASH_GetInfo+0x150>
 801470a:	e8df f003 	tbb	[pc, r3]
 801470e:	2b02      	.short	0x2b02
 8014710:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8014712:	4c4a      	ldr	r4, [pc, #296]	@ (801483c <sFLASH_GetInfo+0x164>)
 8014714:	4b4a      	ldr	r3, [pc, #296]	@ (8014840 <sFLASH_GetInfo+0x168>)
 8014716:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8014718:	2301      	movs	r3, #1
 801471a:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 801471c:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801471e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014722:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8014724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014728:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 801472a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801472e:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q16", sizeof(flash_info.model_name) - 1);
 8014730:	2231      	movs	r2, #49	@ 0x31
 8014732:	4944      	ldr	r1, [pc, #272]	@ (8014844 <sFLASH_GetInfo+0x16c>)
 8014734:	f104 000e 	add.w	r0, r4, #14
 8014738:	f015 fa19 	bl	8029b6e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 801473c:	2300      	movs	r3, #0
 801473e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 8014742:	46ac      	mov	ip, r5
 8014744:	4c3d      	ldr	r4, [pc, #244]	@ (801483c <sFLASH_GetInfo+0x164>)
 8014746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014748:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801474c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801474e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014754:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014758:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801475c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8014760:	4628      	mov	r0, r5
 8014762:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8014764:	4c35      	ldr	r4, [pc, #212]	@ (801483c <sFLASH_GetInfo+0x164>)
 8014766:	4b38      	ldr	r3, [pc, #224]	@ (8014848 <sFLASH_GetInfo+0x170>)
 8014768:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 801476a:	2301      	movs	r3, #1
 801476c:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 801476e:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8014770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014774:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8014776:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801477a:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 801477c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014780:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q32", sizeof(flash_info.model_name) - 1);
 8014782:	2231      	movs	r2, #49	@ 0x31
 8014784:	4931      	ldr	r1, [pc, #196]	@ (801484c <sFLASH_GetInfo+0x174>)
 8014786:	f104 000e 	add.w	r0, r4, #14
 801478a:	f015 f9f0 	bl	8029b6e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 801478e:	2300      	movs	r3, #0
 8014790:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8014794:	e7d5      	b.n	8014742 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8014796:	4c29      	ldr	r4, [pc, #164]	@ (801483c <sFLASH_GetInfo+0x164>)
 8014798:	4b2d      	ldr	r3, [pc, #180]	@ (8014850 <sFLASH_GetInfo+0x178>)
 801479a:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 801479c:	2301      	movs	r3, #1
 801479e:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80147a0:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80147a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80147a6:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80147a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80147ac:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 80147ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80147b2:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q64", sizeof(flash_info.model_name) - 1);
 80147b4:	2231      	movs	r2, #49	@ 0x31
 80147b6:	4927      	ldr	r1, [pc, #156]	@ (8014854 <sFLASH_GetInfo+0x17c>)
 80147b8:	f104 000e 	add.w	r0, r4, #14
 80147bc:	f015 f9d7 	bl	8029b6e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80147c0:	2300      	movs	r3, #0
 80147c2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 80147c6:	e7bc      	b.n	8014742 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 80147c8:	4c1c      	ldr	r4, [pc, #112]	@ (801483c <sFLASH_GetInfo+0x164>)
 80147ca:	4b1a      	ldr	r3, [pc, #104]	@ (8014834 <sFLASH_GetInfo+0x15c>)
 80147cc:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80147ce:	2301      	movs	r3, #1
 80147d0:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80147d2:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80147d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80147d8:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80147da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80147de:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 80147e0:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q128", sizeof(flash_info.model_name) - 1);
 80147e2:	2231      	movs	r2, #49	@ 0x31
 80147e4:	491c      	ldr	r1, [pc, #112]	@ (8014858 <sFLASH_GetInfo+0x180>)
 80147e6:	f104 000e 	add.w	r0, r4, #14
 80147ea:	f015 f9c0 	bl	8029b6e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80147ee:	2300      	movs	r3, #0
 80147f0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 80147f4:	e7a5      	b.n	8014742 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 80147f6:	4c11      	ldr	r4, [pc, #68]	@ (801483c <sFLASH_GetInfo+0x164>)
 80147f8:	4b0d      	ldr	r3, [pc, #52]	@ (8014830 <sFLASH_GetInfo+0x158>)
 80147fa:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80147fc:	2301      	movs	r3, #1
 80147fe:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8014800:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8014802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014806:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8014808:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801480c:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 801480e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014812:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 8014814:	2231      	movs	r2, #49	@ 0x31
 8014816:	4911      	ldr	r1, [pc, #68]	@ (801485c <sFLASH_GetInfo+0x184>)
 8014818:	f104 000e 	add.w	r0, r4, #14
 801481c:	f015 f9a7 	bl	8029b6e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8014820:	2300      	movs	r3, #0
 8014822:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8014826:	e78c      	b.n	8014742 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8014828:	4b04      	ldr	r3, [pc, #16]	@ (801483c <sFLASH_GetInfo+0x164>)
 801482a:	2200      	movs	r2, #0
 801482c:	601a      	str	r2, [r3, #0]
			break;
 801482e:	e788      	b.n	8014742 <sFLASH_GetInfo+0x6a>
 8014830:	00c22016 	.word	0x00c22016
 8014834:	00ef4018 	.word	0x00ef4018
 8014838:	ff10bfeb 	.word	0xff10bfeb
 801483c:	20000a48 	.word	0x20000a48
 8014840:	00ef4015 	.word	0x00ef4015
 8014844:	08034e24 	.word	0x08034e24
 8014848:	00ef4016 	.word	0x00ef4016
 801484c:	08034e2c 	.word	0x08034e2c
 8014850:	00ef4017 	.word	0x00ef4017
 8014854:	08034e34 	.word	0x08034e34
 8014858:	08034e3c 	.word	0x08034e3c
 801485c:	08034e44 	.word	0x08034e44

08014860 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8014860:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8014862:	f7ff fe9f 	bl	80145a4 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8014866:	2006      	movs	r0, #6
 8014868:	f7ff febc 	bl	80145e4 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801486c:	f7ff fea2 	bl	80145b4 <sFLASH_CS_HIGH>
}
 8014870:	bd08      	pop	{r3, pc}
	...

08014874 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8014874:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 8014876:	4d09      	ldr	r5, [pc, #36]	@ (801489c <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 8014878:	f7ff fe94 	bl	80145a4 <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 801487c:	2005      	movs	r0, #5
 801487e:	f7ff feb1 	bl	80145e4 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8014882:	f7ff fe9f 	bl	80145c4 <sFLASH_ReadByte>
 8014886:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 8014888:	f7ff fe94 	bl	80145b4 <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 801488c:	462b      	mov	r3, r5
 801488e:	3d01      	subs	r5, #1
 8014890:	b113      	cbz	r3, 8014898 <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8014892:	f014 0f01 	tst.w	r4, #1
 8014896:	d1ef      	bne.n	8014878 <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 8014898:	bd38      	pop	{r3, r4, r5, pc}
 801489a:	bf00      	nop
 801489c:	000186a0 	.word	0x000186a0

080148a0 <sFLASH_EraseSector>:
{
 80148a0:	b510      	push	{r4, lr}
 80148a2:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 80148a4:	f7ff ffdc 	bl	8014860 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 80148a8:	f7ff fe7c 	bl	80145a4 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 80148ac:	2020      	movs	r0, #32
 80148ae:	f7ff fe99 	bl	80145e4 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 80148b2:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80148b6:	f7ff fe95 	bl	80145e4 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 80148ba:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80148be:	f7ff fe91 	bl	80145e4 <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 80148c2:	b2e0      	uxtb	r0, r4
 80148c4:	f7ff fe8e 	bl	80145e4 <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 80148c8:	f7ff fe74 	bl	80145b4 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 80148cc:	f7ff ffd2 	bl	8014874 <sFLASH_WaitForWriteEnd>
}
 80148d0:	bd10      	pop	{r4, pc}

080148d2 <sFLASH_WritePage>:
{
 80148d2:	b570      	push	{r4, r5, r6, lr}
 80148d4:	4606      	mov	r6, r0
 80148d6:	460c      	mov	r4, r1
 80148d8:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 80148da:	f7ff ffc1 	bl	8014860 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 80148de:	f7ff fe61 	bl	80145a4 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 80148e2:	2002      	movs	r0, #2
 80148e4:	f7ff fe7e 	bl	80145e4 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 80148e8:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80148ec:	f7ff fe7a 	bl	80145e4 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 80148f0:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80148f4:	f7ff fe76 	bl	80145e4 <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 80148f8:	b2e0      	uxtb	r0, r4
 80148fa:	f7ff fe73 	bl	80145e4 <sFLASH_SendByte>
  while (NumByteToWrite--)
 80148fe:	e004      	b.n	801490a <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 8014900:	f816 0b01 	ldrb.w	r0, [r6], #1
 8014904:	f7ff fe6e 	bl	80145e4 <sFLASH_SendByte>
  while (NumByteToWrite--)
 8014908:	4625      	mov	r5, r4
 801490a:	1e6b      	subs	r3, r5, #1
 801490c:	b29c      	uxth	r4, r3
 801490e:	2d00      	cmp	r5, #0
 8014910:	d1f6      	bne.n	8014900 <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 8014912:	f7ff fe4f 	bl	80145b4 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8014916:	f7ff ffad 	bl	8014874 <sFLASH_WaitForWriteEnd>
}
 801491a:	bd70      	pop	{r4, r5, r6, pc}

0801491c <sFLASH_WriteBuffer>:
{
 801491c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014920:	4605      	mov	r5, r0
 8014922:	460c      	mov	r4, r1
 8014924:	4617      	mov	r7, r2
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8014926:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8014928:	0a11      	lsrs	r1, r2, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 801492a:	b9d3      	cbnz	r3, 8014962 <sFLASH_WriteBuffer+0x46>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 801492c:	b971      	cbnz	r1, 801494c <sFLASH_WriteBuffer+0x30>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801492e:	4621      	mov	r1, r4
 8014930:	f7ff ffcf 	bl	80148d2 <sFLASH_WritePage>
 8014934:	e013      	b.n	801495e <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8014936:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801493a:	4621      	mov	r1, r4
 801493c:	4628      	mov	r0, r5
 801493e:	f7ff ffc8 	bl	80148d2 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8014942:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 8014946:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 801494a:	4631      	mov	r1, r6
 801494c:	1e4b      	subs	r3, r1, #1
 801494e:	b2de      	uxtb	r6, r3
 8014950:	2900      	cmp	r1, #0
 8014952:	d1f0      	bne.n	8014936 <sFLASH_WriteBuffer+0x1a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8014954:	b2fa      	uxtb	r2, r7
 8014956:	4621      	mov	r1, r4
 8014958:	4628      	mov	r0, r5
 801495a:	f7ff ffba 	bl	80148d2 <sFLASH_WritePage>
}
 801495e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014962:	f1c3 0800 	rsb	r8, r3, #0
 8014966:	fa5f f888 	uxtb.w	r8, r8
 801496a:	b2d2      	uxtb	r2, r2
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 801496c:	b9a1      	cbnz	r1, 8014998 <sFLASH_WriteBuffer+0x7c>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 801496e:	4590      	cmp	r8, r2
 8014970:	d20d      	bcs.n	801498e <sFLASH_WriteBuffer+0x72>
        temp = NumOfSingle - count;
 8014972:	4413      	add	r3, r2
 8014974:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8014976:	4642      	mov	r2, r8
 8014978:	4621      	mov	r1, r4
 801497a:	f7ff ffaa 	bl	80148d2 <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 801497e:	4632      	mov	r2, r6
 8014980:	eb08 0104 	add.w	r1, r8, r4
 8014984:	eb05 0008 	add.w	r0, r5, r8
 8014988:	f7ff ffa3 	bl	80148d2 <sFLASH_WritePage>
 801498c:	e7e7      	b.n	801495e <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801498e:	463a      	mov	r2, r7
 8014990:	4621      	mov	r1, r4
 8014992:	f7ff ff9e 	bl	80148d2 <sFLASH_WritePage>
 8014996:	e7e2      	b.n	801495e <sFLASH_WriteBuffer+0x42>
      NumByteToWrite -= count;
 8014998:	eba7 0708 	sub.w	r7, r7, r8
 801499c:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80149a0:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80149a4:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 80149a6:	4642      	mov	r2, r8
 80149a8:	4621      	mov	r1, r4
 80149aa:	f7ff ff92 	bl	80148d2 <sFLASH_WritePage>
      WriteAddr +=  count;
 80149ae:	4444      	add	r4, r8
      pBuffer += count;
 80149b0:	4445      	add	r5, r8
      while (NumOfPage--)
 80149b2:	e00a      	b.n	80149ca <sFLASH_WriteBuffer+0xae>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80149b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80149b8:	4621      	mov	r1, r4
 80149ba:	4628      	mov	r0, r5
 80149bc:	f7ff ff89 	bl	80148d2 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80149c0:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 80149c4:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 80149c8:	4646      	mov	r6, r8
 80149ca:	1e73      	subs	r3, r6, #1
 80149cc:	fa5f f883 	uxtb.w	r8, r3
 80149d0:	2e00      	cmp	r6, #0
 80149d2:	d1ef      	bne.n	80149b4 <sFLASH_WriteBuffer+0x98>
      if (NumOfSingle != 0)
 80149d4:	2f00      	cmp	r7, #0
 80149d6:	d0c2      	beq.n	801495e <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80149d8:	fa5f f289 	uxtb.w	r2, r9
 80149dc:	4621      	mov	r1, r4
 80149de:	4628      	mov	r0, r5
 80149e0:	f7ff ff77 	bl	80148d2 <sFLASH_WritePage>
}
 80149e4:	e7bb      	b.n	801495e <sFLASH_WriteBuffer+0x42>
	...

080149e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80149e8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80149ea:	4b0b      	ldr	r3, [pc, #44]	@ (8014a18 <HAL_Init+0x30>)
 80149ec:	681a      	ldr	r2, [r3, #0]
 80149ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80149f2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80149f4:	681a      	ldr	r2, [r3, #0]
 80149f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80149fa:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80149fc:	681a      	ldr	r2, [r3, #0]
 80149fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014a02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8014a04:	2003      	movs	r0, #3
 8014a06:	f000 f883 	bl	8014b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8014a0a:	200f      	movs	r0, #15
 8014a0c:	f7fd fb26 	bl	801205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8014a10:	f7fd fb02 	bl	8012018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8014a14:	2000      	movs	r0, #0
 8014a16:	bd08      	pop	{r3, pc}
 8014a18:	40023c00 	.word	0x40023c00

08014a1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8014a1c:	4a03      	ldr	r2, [pc, #12]	@ (8014a2c <HAL_IncTick+0x10>)
 8014a1e:	6811      	ldr	r1, [r2, #0]
 8014a20:	4b03      	ldr	r3, [pc, #12]	@ (8014a30 <HAL_IncTick+0x14>)
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	440b      	add	r3, r1
 8014a26:	6013      	str	r3, [r2, #0]
}
 8014a28:	4770      	bx	lr
 8014a2a:	bf00      	nop
 8014a2c:	20000a9c 	.word	0x20000a9c
 8014a30:	20000082 	.word	0x20000082

08014a34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8014a34:	4b01      	ldr	r3, [pc, #4]	@ (8014a3c <HAL_GetTick+0x8>)
 8014a36:	6818      	ldr	r0, [r3, #0]
}
 8014a38:	4770      	bx	lr
 8014a3a:	bf00      	nop
 8014a3c:	20000a9c 	.word	0x20000a9c

08014a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8014a40:	b538      	push	{r3, r4, r5, lr}
 8014a42:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8014a44:	f7ff fff6 	bl	8014a34 <HAL_GetTick>
 8014a48:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8014a4a:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8014a4e:	d002      	beq.n	8014a56 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8014a50:	4b04      	ldr	r3, [pc, #16]	@ (8014a64 <HAL_Delay+0x24>)
 8014a52:	781b      	ldrb	r3, [r3, #0]
 8014a54:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8014a56:	f7ff ffed 	bl	8014a34 <HAL_GetTick>
 8014a5a:	1b40      	subs	r0, r0, r5
 8014a5c:	42a0      	cmp	r0, r4
 8014a5e:	d3fa      	bcc.n	8014a56 <HAL_Delay+0x16>
  {
  }
}
 8014a60:	bd38      	pop	{r3, r4, r5, pc}
 8014a62:	bf00      	nop
 8014a64:	20000082 	.word	0x20000082

08014a68 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	db07      	blt.n	8014a7c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014a6c:	f000 021f 	and.w	r2, r0, #31
 8014a70:	0940      	lsrs	r0, r0, #5
 8014a72:	2301      	movs	r3, #1
 8014a74:	4093      	lsls	r3, r2
 8014a76:	4a02      	ldr	r2, [pc, #8]	@ (8014a80 <__NVIC_EnableIRQ+0x18>)
 8014a78:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8014a7c:	4770      	bx	lr
 8014a7e:	bf00      	nop
 8014a80:	e000e100 	.word	0xe000e100

08014a84 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8014a84:	2800      	cmp	r0, #0
 8014a86:	db08      	blt.n	8014a9a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014a88:	0109      	lsls	r1, r1, #4
 8014a8a:	b2c9      	uxtb	r1, r1
 8014a8c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8014a90:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8014a94:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8014a98:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014a9a:	f000 000f 	and.w	r0, r0, #15
 8014a9e:	0109      	lsls	r1, r1, #4
 8014aa0:	b2c9      	uxtb	r1, r1
 8014aa2:	4b01      	ldr	r3, [pc, #4]	@ (8014aa8 <__NVIC_SetPriority+0x24>)
 8014aa4:	5419      	strb	r1, [r3, r0]
  }
}
 8014aa6:	4770      	bx	lr
 8014aa8:	e000ed14 	.word	0xe000ed14

08014aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014aac:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014aae:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8014ab2:	f1c0 0c07 	rsb	ip, r0, #7
 8014ab6:	f1bc 0f04 	cmp.w	ip, #4
 8014aba:	bf28      	it	cs
 8014abc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014ac0:	1d03      	adds	r3, r0, #4
 8014ac2:	2b06      	cmp	r3, #6
 8014ac4:	d90f      	bls.n	8014ae6 <NVIC_EncodePriority+0x3a>
 8014ac6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014ac8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8014acc:	fa0e f00c 	lsl.w	r0, lr, ip
 8014ad0:	ea21 0100 	bic.w	r1, r1, r0
 8014ad4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8014ad6:	fa0e fe03 	lsl.w	lr, lr, r3
 8014ada:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8014ade:	ea41 0002 	orr.w	r0, r1, r2
 8014ae2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	e7ee      	b.n	8014ac8 <NVIC_EncodePriority+0x1c>
	...

08014aec <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8014aec:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8014af0:	4905      	ldr	r1, [pc, #20]	@ (8014b08 <__NVIC_SystemReset+0x1c>)
 8014af2:	68ca      	ldr	r2, [r1, #12]
 8014af4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8014af8:	4b04      	ldr	r3, [pc, #16]	@ (8014b0c <__NVIC_SystemReset+0x20>)
 8014afa:	4313      	orrs	r3, r2
 8014afc:	60cb      	str	r3, [r1, #12]
 8014afe:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8014b02:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8014b04:	e7fd      	b.n	8014b02 <__NVIC_SystemReset+0x16>
 8014b06:	bf00      	nop
 8014b08:	e000ed00 	.word	0xe000ed00
 8014b0c:	05fa0004 	.word	0x05fa0004

08014b10 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014b10:	4a07      	ldr	r2, [pc, #28]	@ (8014b30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8014b12:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8014b14:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8014b18:	041b      	lsls	r3, r3, #16
 8014b1a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014b1c:	0200      	lsls	r0, r0, #8
 8014b1e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8014b22:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8014b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8014b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8014b2c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8014b2e:	4770      	bx	lr
 8014b30:	e000ed00 	.word	0xe000ed00

08014b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8014b34:	b510      	push	{r4, lr}
 8014b36:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014b38:	4b05      	ldr	r3, [pc, #20]	@ (8014b50 <HAL_NVIC_SetPriority+0x1c>)
 8014b3a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014b3c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8014b40:	f7ff ffb4 	bl	8014aac <NVIC_EncodePriority>
 8014b44:	4601      	mov	r1, r0
 8014b46:	4620      	mov	r0, r4
 8014b48:	f7ff ff9c 	bl	8014a84 <__NVIC_SetPriority>
}
 8014b4c:	bd10      	pop	{r4, pc}
 8014b4e:	bf00      	nop
 8014b50:	e000ed00 	.word	0xe000ed00

08014b54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014b54:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014b56:	f7ff ff87 	bl	8014a68 <__NVIC_EnableIRQ>
}
 8014b5a:	bd08      	pop	{r3, pc}

08014b5c <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8014b5c:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 8014b5e:	f7ff ffc5 	bl	8014aec <__NVIC_SystemReset>
	...

08014b64 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8014b64:	2300      	movs	r3, #0
 8014b66:	2b0f      	cmp	r3, #15
 8014b68:	f200 80d7 	bhi.w	8014d1a <HAL_GPIO_Init+0x1b6>
{
 8014b6c:	b570      	push	{r4, r5, r6, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	e065      	b.n	8014c3e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8014b72:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8014b74:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8014b78:	2403      	movs	r4, #3
 8014b7a:	fa04 f40e 	lsl.w	r4, r4, lr
 8014b7e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8014b82:	68cc      	ldr	r4, [r1, #12]
 8014b84:	fa04 f40e 	lsl.w	r4, r4, lr
 8014b88:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8014b8a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014b8c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014b8e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8014b92:	684a      	ldr	r2, [r1, #4]
 8014b94:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8014b98:	409a      	lsls	r2, r3
 8014b9a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8014b9c:	6042      	str	r2, [r0, #4]
 8014b9e:	e05c      	b.n	8014c5a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8014ba0:	08dc      	lsrs	r4, r3, #3
 8014ba2:	3408      	adds	r4, #8
 8014ba4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8014ba8:	f003 0507 	and.w	r5, r3, #7
 8014bac:	00ad      	lsls	r5, r5, #2
 8014bae:	f04f 0e0f 	mov.w	lr, #15
 8014bb2:	fa0e fe05 	lsl.w	lr, lr, r5
 8014bb6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8014bba:	690a      	ldr	r2, [r1, #16]
 8014bbc:	40aa      	lsls	r2, r5
 8014bbe:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8014bc2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8014bc6:	e05c      	b.n	8014c82 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8014bc8:	2204      	movs	r2, #4
 8014bca:	e000      	b.n	8014bce <HAL_GPIO_Init+0x6a>
 8014bcc:	2200      	movs	r2, #0
 8014bce:	fa02 f20e 	lsl.w	r2, r2, lr
 8014bd2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8014bd4:	3402      	adds	r4, #2
 8014bd6:	4d51      	ldr	r5, [pc, #324]	@ (8014d1c <HAL_GPIO_Init+0x1b8>)
 8014bd8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8014bdc:	4a50      	ldr	r2, [pc, #320]	@ (8014d20 <HAL_GPIO_Init+0x1bc>)
 8014bde:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8014be0:	ea6f 020c 	mvn.w	r2, ip
 8014be4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8014be8:	684e      	ldr	r6, [r1, #4]
 8014bea:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8014bee:	d001      	beq.n	8014bf4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8014bf0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8014bf4:	4c4a      	ldr	r4, [pc, #296]	@ (8014d20 <HAL_GPIO_Init+0x1bc>)
 8014bf6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8014bf8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8014bfa:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8014bfe:	684e      	ldr	r6, [r1, #4]
 8014c00:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8014c04:	d001      	beq.n	8014c0a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8014c06:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8014c0a:	4c45      	ldr	r4, [pc, #276]	@ (8014d20 <HAL_GPIO_Init+0x1bc>)
 8014c0c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8014c0e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8014c10:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8014c14:	684e      	ldr	r6, [r1, #4]
 8014c16:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8014c1a:	d001      	beq.n	8014c20 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8014c1c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8014c20:	4c3f      	ldr	r4, [pc, #252]	@ (8014d20 <HAL_GPIO_Init+0x1bc>)
 8014c22:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8014c24:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8014c26:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8014c28:	684d      	ldr	r5, [r1, #4]
 8014c2a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8014c2e:	d001      	beq.n	8014c34 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8014c30:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8014c34:	4c3a      	ldr	r4, [pc, #232]	@ (8014d20 <HAL_GPIO_Init+0x1bc>)
 8014c36:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8014c38:	3301      	adds	r3, #1
 8014c3a:	2b0f      	cmp	r3, #15
 8014c3c:	d86b      	bhi.n	8014d16 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8014c3e:	2201      	movs	r2, #1
 8014c40:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8014c42:	680c      	ldr	r4, [r1, #0]
 8014c44:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8014c48:	ea32 0404 	bics.w	r4, r2, r4
 8014c4c:	d1f4      	bne.n	8014c38 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8014c4e:	684c      	ldr	r4, [r1, #4]
 8014c50:	f004 0403 	and.w	r4, r4, #3
 8014c54:	3c01      	subs	r4, #1
 8014c56:	2c01      	cmp	r4, #1
 8014c58:	d98b      	bls.n	8014b72 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8014c5a:	684a      	ldr	r2, [r1, #4]
 8014c5c:	f002 0203 	and.w	r2, r2, #3
 8014c60:	2a03      	cmp	r2, #3
 8014c62:	d009      	beq.n	8014c78 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8014c64:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8014c66:	005d      	lsls	r5, r3, #1
 8014c68:	2203      	movs	r2, #3
 8014c6a:	40aa      	lsls	r2, r5
 8014c6c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8014c70:	688a      	ldr	r2, [r1, #8]
 8014c72:	40aa      	lsls	r2, r5
 8014c74:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8014c76:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8014c78:	684a      	ldr	r2, [r1, #4]
 8014c7a:	f002 0203 	and.w	r2, r2, #3
 8014c7e:	2a02      	cmp	r2, #2
 8014c80:	d08e      	beq.n	8014ba0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8014c82:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8014c84:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8014c88:	2203      	movs	r2, #3
 8014c8a:	fa02 f20e 	lsl.w	r2, r2, lr
 8014c8e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8014c92:	684a      	ldr	r2, [r1, #4]
 8014c94:	f002 0203 	and.w	r2, r2, #3
 8014c98:	fa02 f20e 	lsl.w	r2, r2, lr
 8014c9c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8014c9e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8014ca0:	684a      	ldr	r2, [r1, #4]
 8014ca2:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8014ca6:	d0c7      	beq.n	8014c38 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014ca8:	2200      	movs	r2, #0
 8014caa:	9201      	str	r2, [sp, #4]
 8014cac:	4a1d      	ldr	r2, [pc, #116]	@ (8014d24 <HAL_GPIO_Init+0x1c0>)
 8014cae:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8014cb0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8014cb4:	6454      	str	r4, [r2, #68]	@ 0x44
 8014cb6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8014cb8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8014cbc:	9201      	str	r2, [sp, #4]
 8014cbe:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8014cc0:	089c      	lsrs	r4, r3, #2
 8014cc2:	1ca5      	adds	r5, r4, #2
 8014cc4:	4a15      	ldr	r2, [pc, #84]	@ (8014d1c <HAL_GPIO_Init+0x1b8>)
 8014cc6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8014cca:	f003 0e03 	and.w	lr, r3, #3
 8014cce:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8014cd2:	220f      	movs	r2, #15
 8014cd4:	fa02 f20e 	lsl.w	r2, r2, lr
 8014cd8:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8014cdc:	4a12      	ldr	r2, [pc, #72]	@ (8014d28 <HAL_GPIO_Init+0x1c4>)
 8014cde:	4290      	cmp	r0, r2
 8014ce0:	f43f af74 	beq.w	8014bcc <HAL_GPIO_Init+0x68>
 8014ce4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8014ce8:	4290      	cmp	r0, r2
 8014cea:	d00e      	beq.n	8014d0a <HAL_GPIO_Init+0x1a6>
 8014cec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8014cf0:	4290      	cmp	r0, r2
 8014cf2:	d00c      	beq.n	8014d0e <HAL_GPIO_Init+0x1aa>
 8014cf4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8014cf8:	4290      	cmp	r0, r2
 8014cfa:	d00a      	beq.n	8014d12 <HAL_GPIO_Init+0x1ae>
 8014cfc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8014d00:	4290      	cmp	r0, r2
 8014d02:	f43f af61 	beq.w	8014bc8 <HAL_GPIO_Init+0x64>
 8014d06:	2207      	movs	r2, #7
 8014d08:	e761      	b.n	8014bce <HAL_GPIO_Init+0x6a>
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	e75f      	b.n	8014bce <HAL_GPIO_Init+0x6a>
 8014d0e:	2202      	movs	r2, #2
 8014d10:	e75d      	b.n	8014bce <HAL_GPIO_Init+0x6a>
 8014d12:	2203      	movs	r2, #3
 8014d14:	e75b      	b.n	8014bce <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8014d16:	b002      	add	sp, #8
 8014d18:	bd70      	pop	{r4, r5, r6, pc}
 8014d1a:	4770      	bx	lr
 8014d1c:	40013800 	.word	0x40013800
 8014d20:	40013c00 	.word	0x40013c00
 8014d24:	40023800 	.word	0x40023800
 8014d28:	40020000 	.word	0x40020000

08014d2c <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	2b0f      	cmp	r3, #15
 8014d30:	d87c      	bhi.n	8014e2c <HAL_GPIO_DeInit+0x100>
{
 8014d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d34:	e02d      	b.n	8014d92 <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8014d36:	2504      	movs	r5, #4
 8014d38:	e000      	b.n	8014d3c <HAL_GPIO_DeInit+0x10>
 8014d3a:	2500      	movs	r5, #0
 8014d3c:	fa05 f50c 	lsl.w	r5, r5, ip
 8014d40:	42a5      	cmp	r5, r4
 8014d42:	d057      	beq.n	8014df4 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8014d44:	6804      	ldr	r4, [r0, #0]
 8014d46:	005d      	lsls	r5, r3, #1
 8014d48:	f04f 0c03 	mov.w	ip, #3
 8014d4c:	fa0c fc05 	lsl.w	ip, ip, r5
 8014d50:	ea24 040c 	bic.w	r4, r4, ip
 8014d54:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8014d56:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8014d5a:	f10e 0e08 	add.w	lr, lr, #8
 8014d5e:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8014d62:	f003 0607 	and.w	r6, r3, #7
 8014d66:	00b6      	lsls	r6, r6, #2
 8014d68:	250f      	movs	r5, #15
 8014d6a:	40b5      	lsls	r5, r6
 8014d6c:	ea24 0405 	bic.w	r4, r4, r5
 8014d70:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8014d74:	68c4      	ldr	r4, [r0, #12]
 8014d76:	ea24 040c 	bic.w	r4, r4, ip
 8014d7a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014d7c:	6844      	ldr	r4, [r0, #4]
 8014d7e:	ea24 0202 	bic.w	r2, r4, r2
 8014d82:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8014d84:	6882      	ldr	r2, [r0, #8]
 8014d86:	ea22 020c 	bic.w	r2, r2, ip
 8014d8a:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8014d8c:	3301      	adds	r3, #1
 8014d8e:	2b0f      	cmp	r3, #15
 8014d90:	d84b      	bhi.n	8014e2a <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8014d92:	2201      	movs	r2, #1
 8014d94:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8014d96:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8014d9a:	ea32 0401 	bics.w	r4, r2, r1
 8014d9e:	d1f5      	bne.n	8014d8c <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8014da0:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8014da4:	f10e 0502 	add.w	r5, lr, #2
 8014da8:	4c21      	ldr	r4, [pc, #132]	@ (8014e30 <HAL_GPIO_DeInit+0x104>)
 8014daa:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8014dae:	f003 0c03 	and.w	ip, r3, #3
 8014db2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8014db6:	250f      	movs	r5, #15
 8014db8:	fa05 f70c 	lsl.w	r7, r5, ip
 8014dbc:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8014dbe:	4d1d      	ldr	r5, [pc, #116]	@ (8014e34 <HAL_GPIO_DeInit+0x108>)
 8014dc0:	42a8      	cmp	r0, r5
 8014dc2:	d0ba      	beq.n	8014d3a <HAL_GPIO_DeInit+0xe>
 8014dc4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8014dc8:	42a8      	cmp	r0, r5
 8014dca:	d00d      	beq.n	8014de8 <HAL_GPIO_DeInit+0xbc>
 8014dcc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8014dd0:	42a8      	cmp	r0, r5
 8014dd2:	d00b      	beq.n	8014dec <HAL_GPIO_DeInit+0xc0>
 8014dd4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8014dd8:	42a8      	cmp	r0, r5
 8014dda:	d009      	beq.n	8014df0 <HAL_GPIO_DeInit+0xc4>
 8014ddc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8014de0:	42a8      	cmp	r0, r5
 8014de2:	d0a8      	beq.n	8014d36 <HAL_GPIO_DeInit+0xa>
 8014de4:	2507      	movs	r5, #7
 8014de6:	e7a9      	b.n	8014d3c <HAL_GPIO_DeInit+0x10>
 8014de8:	2501      	movs	r5, #1
 8014dea:	e7a7      	b.n	8014d3c <HAL_GPIO_DeInit+0x10>
 8014dec:	2502      	movs	r5, #2
 8014dee:	e7a5      	b.n	8014d3c <HAL_GPIO_DeInit+0x10>
 8014df0:	2503      	movs	r5, #3
 8014df2:	e7a3      	b.n	8014d3c <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8014df4:	4c10      	ldr	r4, [pc, #64]	@ (8014e38 <HAL_GPIO_DeInit+0x10c>)
 8014df6:	6825      	ldr	r5, [r4, #0]
 8014df8:	ea25 0506 	bic.w	r5, r5, r6
 8014dfc:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8014dfe:	6865      	ldr	r5, [r4, #4]
 8014e00:	ea25 0506 	bic.w	r5, r5, r6
 8014e04:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8014e06:	68e5      	ldr	r5, [r4, #12]
 8014e08:	ea25 0506 	bic.w	r5, r5, r6
 8014e0c:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8014e0e:	68a5      	ldr	r5, [r4, #8]
 8014e10:	ea25 0506 	bic.w	r5, r5, r6
 8014e14:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8014e16:	4e06      	ldr	r6, [pc, #24]	@ (8014e30 <HAL_GPIO_DeInit+0x104>)
 8014e18:	f10e 0402 	add.w	r4, lr, #2
 8014e1c:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8014e20:	ea25 0507 	bic.w	r5, r5, r7
 8014e24:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8014e28:	e78c      	b.n	8014d44 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8014e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e2c:	4770      	bx	lr
 8014e2e:	bf00      	nop
 8014e30:	40013800 	.word	0x40013800
 8014e34:	40020000 	.word	0x40020000
 8014e38:	40013c00 	.word	0x40013c00

08014e3c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8014e3c:	6903      	ldr	r3, [r0, #16]
 8014e3e:	4219      	tst	r1, r3
 8014e40:	d001      	beq.n	8014e46 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8014e42:	2001      	movs	r0, #1
 8014e44:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8014e46:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8014e48:	4770      	bx	lr

08014e4a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8014e4a:	b10a      	cbz	r2, 8014e50 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8014e4c:	6181      	str	r1, [r0, #24]
 8014e4e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8014e50:	0409      	lsls	r1, r1, #16
 8014e52:	6181      	str	r1, [r0, #24]
  }
}
 8014e54:	4770      	bx	lr

08014e56 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014e56:	6803      	ldr	r3, [r0, #0]
 8014e58:	695a      	ldr	r2, [r3, #20]
 8014e5a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8014e5e:	d101      	bne.n	8014e64 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8014e60:	2000      	movs	r0, #0
}
 8014e62:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014e64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8014e68:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8014e6e:	2220      	movs	r2, #32
 8014e70:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014e74:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8014e78:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8014e7a:	f042 0204 	orr.w	r2, r2, #4
 8014e7e:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8014e80:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8014e84:	2001      	movs	r0, #1
 8014e86:	4770      	bx	lr

08014e88 <I2C_WaitOnFlagUntilTimeout>:
{
 8014e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e8c:	4606      	mov	r6, r0
 8014e8e:	460c      	mov	r4, r1
 8014e90:	4617      	mov	r7, r2
 8014e92:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014e94:	e03b      	b.n	8014f0e <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014e96:	f7ff fdcd 	bl	8014a34 <HAL_GetTick>
 8014e9a:	9b06      	ldr	r3, [sp, #24]
 8014e9c:	1ac0      	subs	r0, r0, r3
 8014e9e:	4540      	cmp	r0, r8
 8014ea0:	d802      	bhi.n	8014ea8 <I2C_WaitOnFlagUntilTimeout+0x20>
 8014ea2:	f1b8 0f00 	cmp.w	r8, #0
 8014ea6:	d132      	bne.n	8014f0e <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8014ea8:	2d01      	cmp	r5, #1
 8014eaa:	d018      	beq.n	8014ede <I2C_WaitOnFlagUntilTimeout+0x56>
 8014eac:	6833      	ldr	r3, [r6, #0]
 8014eae:	699b      	ldr	r3, [r3, #24]
 8014eb0:	ea24 0303 	bic.w	r3, r4, r3
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	fab3 f383 	clz	r3, r3
 8014eba:	095b      	lsrs	r3, r3, #5
 8014ebc:	429f      	cmp	r7, r3
 8014ebe:	d126      	bne.n	8014f0e <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8014ec4:	2220      	movs	r2, #32
 8014ec6:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8014eca:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8014ece:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8014ed0:	f042 0220 	orr.w	r2, r2, #32
 8014ed4:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8014ed6:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8014eda:	2001      	movs	r0, #1
 8014edc:	e027      	b.n	8014f2e <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8014ede:	6833      	ldr	r3, [r6, #0]
 8014ee0:	695b      	ldr	r3, [r3, #20]
 8014ee2:	ea24 0303 	bic.w	r3, r4, r3
 8014ee6:	b29b      	uxth	r3, r3
 8014ee8:	fab3 f383 	clz	r3, r3
 8014eec:	095b      	lsrs	r3, r3, #5
 8014eee:	e7e5      	b.n	8014ebc <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014ef0:	6833      	ldr	r3, [r6, #0]
 8014ef2:	695b      	ldr	r3, [r3, #20]
 8014ef4:	ea24 0c03 	bic.w	ip, r4, r3
 8014ef8:	fa1f fc8c 	uxth.w	ip, ip
 8014efc:	fabc fc8c 	clz	ip, ip
 8014f00:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014f04:	4567      	cmp	r7, ip
 8014f06:	d111      	bne.n	8014f2c <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8014f08:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8014f0c:	d1c3      	bne.n	8014e96 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014f0e:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8014f12:	2d01      	cmp	r5, #1
 8014f14:	d0ec      	beq.n	8014ef0 <I2C_WaitOnFlagUntilTimeout+0x68>
 8014f16:	6833      	ldr	r3, [r6, #0]
 8014f18:	699b      	ldr	r3, [r3, #24]
 8014f1a:	ea24 0c03 	bic.w	ip, r4, r3
 8014f1e:	fa1f fc8c 	uxth.w	ip, ip
 8014f22:	fabc fc8c 	clz	ip, ip
 8014f26:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014f2a:	e7eb      	b.n	8014f04 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8014f2c:	2000      	movs	r0, #0
}
 8014f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8014f32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f36:	4605      	mov	r5, r0
 8014f38:	460e      	mov	r6, r1
 8014f3a:	4690      	mov	r8, r2
 8014f3c:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8014f3e:	e053      	b.n	8014fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014f40:	681a      	ldr	r2, [r3, #0]
 8014f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014f46:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f48:	682b      	ldr	r3, [r5, #0]
 8014f4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8014f4e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8014f50:	2300      	movs	r3, #0
 8014f52:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014f54:	2220      	movs	r2, #32
 8014f56:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014f5a:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8014f5e:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8014f60:	f042 0204 	orr.w	r2, r2, #4
 8014f64:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8014f66:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8014f6a:	2001      	movs	r0, #1
 8014f6c:	e04a      	b.n	8015004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014f6e:	f7ff fd61 	bl	8014a34 <HAL_GetTick>
 8014f72:	eba0 0009 	sub.w	r0, r0, r9
 8014f76:	4540      	cmp	r0, r8
 8014f78:	d802      	bhi.n	8014f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8014f7a:	f1b8 0f00 	cmp.w	r8, #0
 8014f7e:	d133      	bne.n	8014fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8014f80:	2f01      	cmp	r7, #1
 8014f82:	d017      	beq.n	8014fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8014f84:	682b      	ldr	r3, [r5, #0]
 8014f86:	699b      	ldr	r3, [r3, #24]
 8014f88:	ea26 0303 	bic.w	r3, r6, r3
 8014f8c:	b29b      	uxth	r3, r3
 8014f8e:	3b00      	subs	r3, #0
 8014f90:	bf18      	it	ne
 8014f92:	2301      	movne	r3, #1
 8014f94:	b343      	cbz	r3, 8014fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8014f96:	2300      	movs	r3, #0
 8014f98:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8014f9a:	2220      	movs	r2, #32
 8014f9c:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014fa0:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014fa4:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8014fa6:	f042 0220 	orr.w	r2, r2, #32
 8014faa:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8014fac:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8014fb0:	2001      	movs	r0, #1
 8014fb2:	e027      	b.n	8015004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8014fb4:	682b      	ldr	r3, [r5, #0]
 8014fb6:	695b      	ldr	r3, [r3, #20]
 8014fb8:	ea26 0303 	bic.w	r3, r6, r3
 8014fbc:	b29b      	uxth	r3, r3
 8014fbe:	3b00      	subs	r3, #0
 8014fc0:	bf18      	it	ne
 8014fc2:	2301      	movne	r3, #1
 8014fc4:	e7e6      	b.n	8014f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8014fc6:	682b      	ldr	r3, [r5, #0]
 8014fc8:	699c      	ldr	r4, [r3, #24]
 8014fca:	ea26 0404 	bic.w	r4, r6, r4
 8014fce:	b2a4      	uxth	r4, r4
 8014fd0:	3c00      	subs	r4, #0
 8014fd2:	bf18      	it	ne
 8014fd4:	2401      	movne	r4, #1
 8014fd6:	b1a4      	cbz	r4, 8015002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014fd8:	682b      	ldr	r3, [r5, #0]
 8014fda:	695a      	ldr	r2, [r3, #20]
 8014fdc:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8014fe0:	d1ae      	bne.n	8014f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8014fe2:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8014fe6:	d1c2      	bne.n	8014f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8014fe8:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8014fec:	2f01      	cmp	r7, #1
 8014fee:	d1ea      	bne.n	8014fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8014ff0:	682b      	ldr	r3, [r5, #0]
 8014ff2:	695c      	ldr	r4, [r3, #20]
 8014ff4:	ea26 0404 	bic.w	r4, r6, r4
 8014ff8:	b2a4      	uxth	r4, r4
 8014ffa:	3c00      	subs	r4, #0
 8014ffc:	bf18      	it	ne
 8014ffe:	2401      	movne	r4, #1
 8015000:	e7e9      	b.n	8014fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8015002:	2000      	movs	r0, #0
}
 8015004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015008 <I2C_MasterRequestWrite>:
{
 8015008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801500a:	b083      	sub	sp, #12
 801500c:	4604      	mov	r4, r0
 801500e:	460d      	mov	r5, r1
 8015010:	4616      	mov	r6, r2
 8015012:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8015014:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8015016:	2b08      	cmp	r3, #8
 8015018:	d00d      	beq.n	8015036 <I2C_MasterRequestWrite+0x2e>
 801501a:	2b01      	cmp	r3, #1
 801501c:	d00b      	beq.n	8015036 <I2C_MasterRequestWrite+0x2e>
 801501e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8015022:	d008      	beq.n	8015036 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8015024:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015026:	2b12      	cmp	r3, #18
 8015028:	d10a      	bne.n	8015040 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801502a:	6802      	ldr	r2, [r0, #0]
 801502c:	6813      	ldr	r3, [r2, #0]
 801502e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015032:	6013      	str	r3, [r2, #0]
 8015034:	e004      	b.n	8015040 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015036:	6822      	ldr	r2, [r4, #0]
 8015038:	6813      	ldr	r3, [r2, #0]
 801503a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801503e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8015040:	9700      	str	r7, [sp, #0]
 8015042:	4633      	mov	r3, r6
 8015044:	2200      	movs	r2, #0
 8015046:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801504a:	4620      	mov	r0, r4
 801504c:	f7ff ff1c 	bl	8014e88 <I2C_WaitOnFlagUntilTimeout>
 8015050:	b980      	cbnz	r0, 8015074 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015052:	6923      	ldr	r3, [r4, #16]
 8015054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015058:	d116      	bne.n	8015088 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801505a:	6823      	ldr	r3, [r4, #0]
 801505c:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8015060:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8015062:	463b      	mov	r3, r7
 8015064:	4632      	mov	r2, r6
 8015066:	4913      	ldr	r1, [pc, #76]	@ (80150b4 <I2C_MasterRequestWrite+0xac>)
 8015068:	4620      	mov	r0, r4
 801506a:	f7ff ff62 	bl	8014f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801506e:	b9f8      	cbnz	r0, 80150b0 <I2C_MasterRequestWrite+0xa8>
}
 8015070:	b003      	add	sp, #12
 8015072:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8015074:	6823      	ldr	r3, [r4, #0]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801507c:	d002      	beq.n	8015084 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801507e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015082:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8015084:	2003      	movs	r0, #3
 8015086:	e7f3      	b.n	8015070 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8015088:	11eb      	asrs	r3, r5, #7
 801508a:	6822      	ldr	r2, [r4, #0]
 801508c:	f003 0306 	and.w	r3, r3, #6
 8015090:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8015094:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8015096:	463b      	mov	r3, r7
 8015098:	4632      	mov	r2, r6
 801509a:	4907      	ldr	r1, [pc, #28]	@ (80150b8 <I2C_MasterRequestWrite+0xb0>)
 801509c:	4620      	mov	r0, r4
 801509e:	f7ff ff48 	bl	8014f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80150a2:	b918      	cbnz	r0, 80150ac <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80150a4:	6823      	ldr	r3, [r4, #0]
 80150a6:	b2ed      	uxtb	r5, r5
 80150a8:	611d      	str	r5, [r3, #16]
 80150aa:	e7da      	b.n	8015062 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 80150ac:	2001      	movs	r0, #1
 80150ae:	e7df      	b.n	8015070 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 80150b0:	2001      	movs	r0, #1
 80150b2:	e7dd      	b.n	8015070 <I2C_MasterRequestWrite+0x68>
 80150b4:	00010002 	.word	0x00010002
 80150b8:	00010008 	.word	0x00010008

080150bc <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80150bc:	b570      	push	{r4, r5, r6, lr}
 80150be:	4604      	mov	r4, r0
 80150c0:	460d      	mov	r5, r1
 80150c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80150c4:	6823      	ldr	r3, [r4, #0]
 80150c6:	695b      	ldr	r3, [r3, #20]
 80150c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80150cc:	d121      	bne.n	8015112 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80150ce:	4620      	mov	r0, r4
 80150d0:	f7ff fec1 	bl	8014e56 <I2C_IsAcknowledgeFailed>
 80150d4:	b9f8      	cbnz	r0, 8015116 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80150d6:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80150da:	d0f3      	beq.n	80150c4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80150dc:	f7ff fcaa 	bl	8014a34 <HAL_GetTick>
 80150e0:	1b80      	subs	r0, r0, r6
 80150e2:	42a8      	cmp	r0, r5
 80150e4:	d801      	bhi.n	80150ea <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80150e6:	2d00      	cmp	r5, #0
 80150e8:	d1ec      	bne.n	80150c4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80150ea:	6823      	ldr	r3, [r4, #0]
 80150ec:	695b      	ldr	r3, [r3, #20]
 80150ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80150f2:	d1e7      	bne.n	80150c4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80150f4:	2300      	movs	r3, #0
 80150f6:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80150f8:	2220      	movs	r2, #32
 80150fa:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80150fe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8015102:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8015104:	f042 0220 	orr.w	r2, r2, #32
 8015108:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 801510a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 801510e:	2001      	movs	r0, #1
 8015110:	e000      	b.n	8015114 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8015112:	2000      	movs	r0, #0
}
 8015114:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8015116:	2001      	movs	r0, #1
 8015118:	e7fc      	b.n	8015114 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

0801511a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 801511a:	b570      	push	{r4, r5, r6, lr}
 801511c:	4604      	mov	r4, r0
 801511e:	460d      	mov	r5, r1
 8015120:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8015122:	6823      	ldr	r3, [r4, #0]
 8015124:	695b      	ldr	r3, [r3, #20]
 8015126:	f013 0f04 	tst.w	r3, #4
 801512a:	d121      	bne.n	8015170 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801512c:	4620      	mov	r0, r4
 801512e:	f7ff fe92 	bl	8014e56 <I2C_IsAcknowledgeFailed>
 8015132:	b9f8      	cbnz	r0, 8015174 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8015134:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8015138:	d0f3      	beq.n	8015122 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801513a:	f7ff fc7b 	bl	8014a34 <HAL_GetTick>
 801513e:	1b80      	subs	r0, r0, r6
 8015140:	42a8      	cmp	r0, r5
 8015142:	d801      	bhi.n	8015148 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8015144:	2d00      	cmp	r5, #0
 8015146:	d1ec      	bne.n	8015122 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8015148:	6823      	ldr	r3, [r4, #0]
 801514a:	695b      	ldr	r3, [r3, #20]
 801514c:	f013 0f04 	tst.w	r3, #4
 8015150:	d1e7      	bne.n	8015122 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8015152:	2300      	movs	r3, #0
 8015154:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8015156:	2220      	movs	r2, #32
 8015158:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801515c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8015160:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8015162:	f042 0220 	orr.w	r2, r2, #32
 8015166:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8015168:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 801516c:	2001      	movs	r0, #1
 801516e:	e000      	b.n	8015172 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8015170:	2000      	movs	r0, #0
}
 8015172:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8015174:	2001      	movs	r0, #1
 8015176:	e7fc      	b.n	8015172 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08015178 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8015178:	2800      	cmp	r0, #0
 801517a:	f000 80cc 	beq.w	8015316 <HAL_I2C_Init+0x19e>
{
 801517e:	b570      	push	{r4, r5, r6, lr}
 8015180:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015182:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8015186:	2b00      	cmp	r3, #0
 8015188:	d077      	beq.n	801527a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 801518a:	2324      	movs	r3, #36	@ 0x24
 801518c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8015190:	6822      	ldr	r2, [r4, #0]
 8015192:	6813      	ldr	r3, [r2, #0]
 8015194:	f023 0301 	bic.w	r3, r3, #1
 8015198:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801519a:	6822      	ldr	r2, [r4, #0]
 801519c:	6813      	ldr	r3, [r2, #0]
 801519e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80151a2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80151a4:	6822      	ldr	r2, [r4, #0]
 80151a6:	6813      	ldr	r3, [r2, #0]
 80151a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80151ac:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80151ae:	f000 fd81 	bl	8015cb4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80151b2:	6862      	ldr	r2, [r4, #4]
 80151b4:	4b5a      	ldr	r3, [pc, #360]	@ (8015320 <HAL_I2C_Init+0x1a8>)
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d864      	bhi.n	8015284 <HAL_I2C_Init+0x10c>
 80151ba:	4b5a      	ldr	r3, [pc, #360]	@ (8015324 <HAL_I2C_Init+0x1ac>)
 80151bc:	4298      	cmp	r0, r3
 80151be:	bf8c      	ite	hi
 80151c0:	2300      	movhi	r3, #0
 80151c2:	2301      	movls	r3, #1
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	f040 80a8 	bne.w	801531a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80151ca:	4957      	ldr	r1, [pc, #348]	@ (8015328 <HAL_I2C_Init+0x1b0>)
 80151cc:	fba1 3100 	umull	r3, r1, r1, r0
 80151d0:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80151d2:	6825      	ldr	r5, [r4, #0]
 80151d4:	686a      	ldr	r2, [r5, #4]
 80151d6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80151da:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80151de:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80151e0:	6821      	ldr	r1, [r4, #0]
 80151e2:	6a0a      	ldr	r2, [r1, #32]
 80151e4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80151e8:	6866      	ldr	r6, [r4, #4]
 80151ea:	4d4d      	ldr	r5, [pc, #308]	@ (8015320 <HAL_I2C_Init+0x1a8>)
 80151ec:	42ae      	cmp	r6, r5
 80151ee:	d84f      	bhi.n	8015290 <HAL_I2C_Init+0x118>
 80151f0:	3301      	adds	r3, #1
 80151f2:	4313      	orrs	r3, r2
 80151f4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80151f6:	6821      	ldr	r1, [r4, #0]
 80151f8:	69ca      	ldr	r2, [r1, #28]
 80151fa:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80151fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8015202:	6865      	ldr	r5, [r4, #4]
 8015204:	4b46      	ldr	r3, [pc, #280]	@ (8015320 <HAL_I2C_Init+0x1a8>)
 8015206:	429d      	cmp	r5, r3
 8015208:	d84c      	bhi.n	80152a4 <HAL_I2C_Init+0x12c>
 801520a:	1e43      	subs	r3, r0, #1
 801520c:	006d      	lsls	r5, r5, #1
 801520e:	fbb3 f3f5 	udiv	r3, r3, r5
 8015212:	3301      	adds	r3, #1
 8015214:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8015218:	4203      	tst	r3, r0
 801521a:	d078      	beq.n	801530e <HAL_I2C_Init+0x196>
 801521c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015220:	431a      	orrs	r2, r3
 8015222:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8015224:	6821      	ldr	r1, [r4, #0]
 8015226:	680b      	ldr	r3, [r1, #0]
 8015228:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801522c:	69e2      	ldr	r2, [r4, #28]
 801522e:	6a20      	ldr	r0, [r4, #32]
 8015230:	4302      	orrs	r2, r0
 8015232:	4313      	orrs	r3, r2
 8015234:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8015236:	6821      	ldr	r1, [r4, #0]
 8015238:	688b      	ldr	r3, [r1, #8]
 801523a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 801523e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8015242:	6922      	ldr	r2, [r4, #16]
 8015244:	68e0      	ldr	r0, [r4, #12]
 8015246:	4302      	orrs	r2, r0
 8015248:	4313      	orrs	r3, r2
 801524a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801524c:	6821      	ldr	r1, [r4, #0]
 801524e:	68cb      	ldr	r3, [r1, #12]
 8015250:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8015254:	6962      	ldr	r2, [r4, #20]
 8015256:	69a0      	ldr	r0, [r4, #24]
 8015258:	4302      	orrs	r2, r0
 801525a:	4313      	orrs	r3, r2
 801525c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 801525e:	6822      	ldr	r2, [r4, #0]
 8015260:	6813      	ldr	r3, [r2, #0]
 8015262:	f043 0301 	orr.w	r3, r3, #1
 8015266:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015268:	2000      	movs	r0, #0
 801526a:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801526c:	2320      	movs	r3, #32
 801526e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8015272:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015274:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8015278:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 801527a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 801527e:	f7fc fc89 	bl	8011b94 <HAL_I2C_MspInit>
 8015282:	e782      	b.n	801518a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8015284:	4b29      	ldr	r3, [pc, #164]	@ (801532c <HAL_I2C_Init+0x1b4>)
 8015286:	4298      	cmp	r0, r3
 8015288:	bf8c      	ite	hi
 801528a:	2300      	movhi	r3, #0
 801528c:	2301      	movls	r3, #1
 801528e:	e799      	b.n	80151c4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8015290:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8015294:	fb05 f303 	mul.w	r3, r5, r3
 8015298:	4d25      	ldr	r5, [pc, #148]	@ (8015330 <HAL_I2C_Init+0x1b8>)
 801529a:	fba5 5303 	umull	r5, r3, r5, r3
 801529e:	099b      	lsrs	r3, r3, #6
 80152a0:	3301      	adds	r3, #1
 80152a2:	e7a6      	b.n	80151f2 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80152a4:	68a6      	ldr	r6, [r4, #8]
 80152a6:	b9be      	cbnz	r6, 80152d8 <HAL_I2C_Init+0x160>
 80152a8:	1e43      	subs	r3, r0, #1
 80152aa:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80152ae:	fbb3 f3fc 	udiv	r3, r3, ip
 80152b2:	3301      	adds	r3, #1
 80152b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80152b8:	fab3 f383 	clz	r3, r3
 80152bc:	095b      	lsrs	r3, r3, #5
 80152be:	bb43      	cbnz	r3, 8015312 <HAL_I2C_Init+0x19a>
 80152c0:	b9c6      	cbnz	r6, 80152f4 <HAL_I2C_Init+0x17c>
 80152c2:	1e43      	subs	r3, r0, #1
 80152c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80152c8:	fbb3 f3f5 	udiv	r3, r3, r5
 80152cc:	3301      	adds	r3, #1
 80152ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80152d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80152d6:	e7a3      	b.n	8015220 <HAL_I2C_Init+0xa8>
 80152d8:	1e43      	subs	r3, r0, #1
 80152da:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80152de:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80152e2:	fbb3 f3fc 	udiv	r3, r3, ip
 80152e6:	3301      	adds	r3, #1
 80152e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80152ec:	fab3 f383 	clz	r3, r3
 80152f0:	095b      	lsrs	r3, r3, #5
 80152f2:	e7e4      	b.n	80152be <HAL_I2C_Init+0x146>
 80152f4:	1e43      	subs	r3, r0, #1
 80152f6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80152fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80152fe:	fbb3 f3f5 	udiv	r3, r3, r5
 8015302:	3301      	adds	r3, #1
 8015304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015308:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801530c:	e788      	b.n	8015220 <HAL_I2C_Init+0xa8>
 801530e:	2304      	movs	r3, #4
 8015310:	e786      	b.n	8015220 <HAL_I2C_Init+0xa8>
 8015312:	2301      	movs	r3, #1
 8015314:	e784      	b.n	8015220 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8015316:	2001      	movs	r0, #1
}
 8015318:	4770      	bx	lr
    return HAL_ERROR;
 801531a:	2001      	movs	r0, #1
 801531c:	e7ac      	b.n	8015278 <HAL_I2C_Init+0x100>
 801531e:	bf00      	nop
 8015320:	000186a0 	.word	0x000186a0
 8015324:	001e847f 	.word	0x001e847f
 8015328:	431bde83 	.word	0x431bde83
 801532c:	003d08ff 	.word	0x003d08ff
 8015330:	10624dd3 	.word	0x10624dd3

08015334 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8015334:	b1a8      	cbz	r0, 8015362 <HAL_I2C_DeInit+0x2e>
{
 8015336:	b510      	push	{r4, lr}
 8015338:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 801533a:	2324      	movs	r3, #36	@ 0x24
 801533c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8015340:	6802      	ldr	r2, [r0, #0]
 8015342:	6813      	ldr	r3, [r2, #0]
 8015344:	f023 0301 	bic.w	r3, r3, #1
 8015348:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 801534a:	f7fc fc5d 	bl	8011c08 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801534e:	2000      	movs	r0, #0
 8015350:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8015352:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8015356:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8015358:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 801535c:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8015360:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8015362:	2001      	movs	r0, #1
}
 8015364:	4770      	bx	lr
	...

08015368 <HAL_I2C_Master_Transmit>:
{
 8015368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801536c:	b085      	sub	sp, #20
 801536e:	4604      	mov	r4, r0
 8015370:	460f      	mov	r7, r1
 8015372:	4691      	mov	r9, r2
 8015374:	4698      	mov	r8, r3
 8015376:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8015378:	f7ff fb5c 	bl	8014a34 <HAL_GetTick>
 801537c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 801537e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8015382:	b2c0      	uxtb	r0, r0
 8015384:	2820      	cmp	r0, #32
 8015386:	d004      	beq.n	8015392 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8015388:	2702      	movs	r7, #2
}
 801538a:	4638      	mov	r0, r7
 801538c:	b005      	add	sp, #20
 801538e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8015392:	9500      	str	r5, [sp, #0]
 8015394:	2319      	movs	r3, #25
 8015396:	2201      	movs	r2, #1
 8015398:	494f      	ldr	r1, [pc, #316]	@ (80154d8 <HAL_I2C_Master_Transmit+0x170>)
 801539a:	4620      	mov	r0, r4
 801539c:	f7ff fd74 	bl	8014e88 <I2C_WaitOnFlagUntilTimeout>
 80153a0:	2800      	cmp	r0, #0
 80153a2:	f040 8092 	bne.w	80154ca <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 80153a6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80153aa:	2b01      	cmp	r3, #1
 80153ac:	f000 808f 	beq.w	80154ce <HAL_I2C_Master_Transmit+0x166>
 80153b0:	2301      	movs	r3, #1
 80153b2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80153b6:	6823      	ldr	r3, [r4, #0]
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	f012 0f01 	tst.w	r2, #1
 80153be:	d103      	bne.n	80153c8 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80153c0:	681a      	ldr	r2, [r3, #0]
 80153c2:	f042 0201 	orr.w	r2, r2, #1
 80153c6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80153c8:	6822      	ldr	r2, [r4, #0]
 80153ca:	6813      	ldr	r3, [r2, #0]
 80153cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80153d0:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80153d2:	2321      	movs	r3, #33	@ 0x21
 80153d4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80153d8:	2310      	movs	r3, #16
 80153da:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80153de:	2300      	movs	r3, #0
 80153e0:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80153e2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80153e6:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80153ea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80153ec:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80153ee:	4b3b      	ldr	r3, [pc, #236]	@ (80154dc <HAL_I2C_Master_Transmit+0x174>)
 80153f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80153f2:	462b      	mov	r3, r5
 80153f4:	4632      	mov	r2, r6
 80153f6:	4639      	mov	r1, r7
 80153f8:	4620      	mov	r0, r4
 80153fa:	f7ff fe05 	bl	8015008 <I2C_MasterRequestWrite>
 80153fe:	4607      	mov	r7, r0
 8015400:	2800      	cmp	r0, #0
 8015402:	d166      	bne.n	80154d2 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015404:	2300      	movs	r3, #0
 8015406:	9303      	str	r3, [sp, #12]
 8015408:	6823      	ldr	r3, [r4, #0]
 801540a:	695a      	ldr	r2, [r3, #20]
 801540c:	9203      	str	r2, [sp, #12]
 801540e:	699b      	ldr	r3, [r3, #24]
 8015410:	9303      	str	r3, [sp, #12]
 8015412:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8015414:	e011      	b.n	801543a <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8015416:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015418:	2b04      	cmp	r3, #4
 801541a:	d001      	beq.n	8015420 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 801541c:	2701      	movs	r7, #1
 801541e:	e7b4      	b.n	801538a <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015420:	6822      	ldr	r2, [r4, #0]
 8015422:	6813      	ldr	r3, [r2, #0]
 8015424:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8015428:	6013      	str	r3, [r2, #0]
 801542a:	e7f7      	b.n	801541c <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801542c:	462a      	mov	r2, r5
 801542e:	4631      	mov	r1, r6
 8015430:	4620      	mov	r0, r4
 8015432:	f7ff fe72 	bl	801511a <I2C_WaitOnBTFFlagUntilTimeout>
 8015436:	2800      	cmp	r0, #0
 8015438:	d12e      	bne.n	8015498 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 801543a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 801543c:	2b00      	cmp	r3, #0
 801543e:	d036      	beq.n	80154ae <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015440:	462a      	mov	r2, r5
 8015442:	4631      	mov	r1, r6
 8015444:	4620      	mov	r0, r4
 8015446:	f7ff fe39 	bl	80150bc <I2C_WaitOnTXEFlagUntilTimeout>
 801544a:	2800      	cmp	r0, #0
 801544c:	d1e3      	bne.n	8015416 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801544e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015450:	6823      	ldr	r3, [r4, #0]
 8015452:	7812      	ldrb	r2, [r2, #0]
 8015454:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8015456:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8015458:	1c43      	adds	r3, r0, #1
 801545a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 801545c:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 801545e:	b289      	uxth	r1, r1
 8015460:	3901      	subs	r1, #1
 8015462:	b289      	uxth	r1, r1
 8015464:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8015466:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8015468:	3b01      	subs	r3, #1
 801546a:	b29b      	uxth	r3, r3
 801546c:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801546e:	6822      	ldr	r2, [r4, #0]
 8015470:	6951      	ldr	r1, [r2, #20]
 8015472:	f011 0f04 	tst.w	r1, #4
 8015476:	d0d9      	beq.n	801542c <HAL_I2C_Master_Transmit+0xc4>
 8015478:	2b00      	cmp	r3, #0
 801547a:	d0d7      	beq.n	801542c <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801547c:	7843      	ldrb	r3, [r0, #1]
 801547e:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8015480:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015482:	3301      	adds	r3, #1
 8015484:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8015486:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8015488:	b29b      	uxth	r3, r3
 801548a:	3b01      	subs	r3, #1
 801548c:	b29b      	uxth	r3, r3
 801548e:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8015490:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8015492:	3b01      	subs	r3, #1
 8015494:	8523      	strh	r3, [r4, #40]	@ 0x28
 8015496:	e7c9      	b.n	801542c <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8015498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801549a:	2b04      	cmp	r3, #4
 801549c:	d001      	beq.n	80154a2 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 801549e:	2701      	movs	r7, #1
 80154a0:	e773      	b.n	801538a <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80154a2:	6822      	ldr	r2, [r4, #0]
 80154a4:	6813      	ldr	r3, [r2, #0]
 80154a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80154aa:	6013      	str	r3, [r2, #0]
 80154ac:	e7f7      	b.n	801549e <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80154ae:	6822      	ldr	r2, [r4, #0]
 80154b0:	6813      	ldr	r3, [r2, #0]
 80154b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80154b6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80154b8:	2320      	movs	r3, #32
 80154ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80154be:	2300      	movs	r3, #0
 80154c0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80154c4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80154c8:	e75f      	b.n	801538a <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80154ca:	2702      	movs	r7, #2
 80154cc:	e75d      	b.n	801538a <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 80154ce:	2702      	movs	r7, #2
 80154d0:	e75b      	b.n	801538a <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 80154d2:	2701      	movs	r7, #1
 80154d4:	e759      	b.n	801538a <HAL_I2C_Master_Transmit+0x22>
 80154d6:	bf00      	nop
 80154d8:	00100002 	.word	0x00100002
 80154dc:	ffff0000 	.word	0xffff0000

080154e0 <HAL_I2C_IsDeviceReady>:
{
 80154e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154e4:	b085      	sub	sp, #20
 80154e6:	4604      	mov	r4, r0
 80154e8:	4688      	mov	r8, r1
 80154ea:	4691      	mov	r9, r2
 80154ec:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80154ee:	f7ff faa1 	bl	8014a34 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80154f2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80154f6:	b2db      	uxtb	r3, r3
 80154f8:	2b20      	cmp	r3, #32
 80154fa:	d003      	beq.n	8015504 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80154fc:	2002      	movs	r0, #2
}
 80154fe:	b005      	add	sp, #20
 8015500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015504:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8015506:	9000      	str	r0, [sp, #0]
 8015508:	2319      	movs	r3, #25
 801550a:	2201      	movs	r2, #1
 801550c:	4957      	ldr	r1, [pc, #348]	@ (801566c <HAL_I2C_IsDeviceReady+0x18c>)
 801550e:	4620      	mov	r0, r4
 8015510:	f7ff fcba 	bl	8014e88 <I2C_WaitOnFlagUntilTimeout>
 8015514:	2800      	cmp	r0, #0
 8015516:	f040 80a0 	bne.w	801565a <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 801551a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 801551e:	2b01      	cmp	r3, #1
 8015520:	f000 809d 	beq.w	801565e <HAL_I2C_IsDeviceReady+0x17e>
 8015524:	2301      	movs	r3, #1
 8015526:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801552a:	6823      	ldr	r3, [r4, #0]
 801552c:	681a      	ldr	r2, [r3, #0]
 801552e:	f012 0f01 	tst.w	r2, #1
 8015532:	d103      	bne.n	801553c <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8015534:	681a      	ldr	r2, [r3, #0]
 8015536:	f042 0201 	orr.w	r2, r2, #1
 801553a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801553c:	6822      	ldr	r2, [r4, #0]
 801553e:	6813      	ldr	r3, [r2, #0]
 8015540:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015544:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8015546:	2324      	movs	r3, #36	@ 0x24
 8015548:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801554c:	2700      	movs	r7, #0
 801554e:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015550:	4b47      	ldr	r3, [pc, #284]	@ (8015670 <HAL_I2C_IsDeviceReady+0x190>)
 8015552:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015554:	e040      	b.n	80155d8 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8015556:	6823      	ldr	r3, [r4, #0]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801555e:	d002      	beq.n	8015566 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8015560:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015564:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8015566:	2003      	movs	r0, #3
 8015568:	e7c9      	b.n	80154fe <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 801556a:	23a0      	movs	r3, #160	@ 0xa0
 801556c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8015570:	6822      	ldr	r2, [r4, #0]
 8015572:	6953      	ldr	r3, [r2, #20]
 8015574:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8015578:	6952      	ldr	r2, [r2, #20]
 801557a:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801557e:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 8015582:	fa5f fc8c 	uxtb.w	ip, ip
 8015586:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 801558a:	d009      	beq.n	80155a0 <HAL_I2C_IsDeviceReady+0xc0>
 801558c:	b943      	cbnz	r3, 80155a0 <HAL_I2C_IsDeviceReady+0xc0>
 801558e:	b93a      	cbnz	r2, 80155a0 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015590:	f7ff fa50 	bl	8014a34 <HAL_GetTick>
 8015594:	1b80      	subs	r0, r0, r6
 8015596:	42a8      	cmp	r0, r5
 8015598:	d8e7      	bhi.n	801556a <HAL_I2C_IsDeviceReady+0x8a>
 801559a:	2d00      	cmp	r5, #0
 801559c:	d1e8      	bne.n	8015570 <HAL_I2C_IsDeviceReady+0x90>
 801559e:	e7e4      	b.n	801556a <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 80155a0:	2320      	movs	r3, #32
 80155a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80155a6:	6823      	ldr	r3, [r4, #0]
 80155a8:	695a      	ldr	r2, [r3, #20]
 80155aa:	f012 0f02 	tst.w	r2, #2
 80155ae:	d131      	bne.n	8015614 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80155b0:	681a      	ldr	r2, [r3, #0]
 80155b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80155b6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80155b8:	6823      	ldr	r3, [r4, #0]
 80155ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80155be:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80155c0:	9600      	str	r6, [sp, #0]
 80155c2:	2319      	movs	r3, #25
 80155c4:	2201      	movs	r2, #1
 80155c6:	4929      	ldr	r1, [pc, #164]	@ (801566c <HAL_I2C_IsDeviceReady+0x18c>)
 80155c8:	4620      	mov	r0, r4
 80155ca:	f7ff fc5d 	bl	8014e88 <I2C_WaitOnFlagUntilTimeout>
 80155ce:	2800      	cmp	r0, #0
 80155d0:	d149      	bne.n	8015666 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 80155d2:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80155d4:	454f      	cmp	r7, r9
 80155d6:	d238      	bcs.n	801564a <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80155d8:	6822      	ldr	r2, [r4, #0]
 80155da:	6813      	ldr	r3, [r2, #0]
 80155dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80155e0:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80155e2:	9600      	str	r6, [sp, #0]
 80155e4:	462b      	mov	r3, r5
 80155e6:	2200      	movs	r2, #0
 80155e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80155ec:	4620      	mov	r0, r4
 80155ee:	f7ff fc4b 	bl	8014e88 <I2C_WaitOnFlagUntilTimeout>
 80155f2:	2800      	cmp	r0, #0
 80155f4:	d1af      	bne.n	8015556 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80155f6:	6823      	ldr	r3, [r4, #0]
 80155f8:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 80155fc:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80155fe:	f7ff fa19 	bl	8014a34 <HAL_GetTick>
 8015602:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8015604:	6822      	ldr	r2, [r4, #0]
 8015606:	6953      	ldr	r3, [r2, #20]
 8015608:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801560c:	6952      	ldr	r2, [r2, #20]
 801560e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8015612:	e7b4      	b.n	801557e <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015614:	681a      	ldr	r2, [r3, #0]
 8015616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801561a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801561c:	2300      	movs	r3, #0
 801561e:	9303      	str	r3, [sp, #12]
 8015620:	6823      	ldr	r3, [r4, #0]
 8015622:	695a      	ldr	r2, [r3, #20]
 8015624:	9203      	str	r2, [sp, #12]
 8015626:	699b      	ldr	r3, [r3, #24]
 8015628:	9303      	str	r3, [sp, #12]
 801562a:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801562c:	9600      	str	r6, [sp, #0]
 801562e:	2319      	movs	r3, #25
 8015630:	2201      	movs	r2, #1
 8015632:	490e      	ldr	r1, [pc, #56]	@ (801566c <HAL_I2C_IsDeviceReady+0x18c>)
 8015634:	4620      	mov	r0, r4
 8015636:	f7ff fc27 	bl	8014e88 <I2C_WaitOnFlagUntilTimeout>
 801563a:	b990      	cbnz	r0, 8015662 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 801563c:	2320      	movs	r3, #32
 801563e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 8015642:	2300      	movs	r3, #0
 8015644:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 8015648:	e759      	b.n	80154fe <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 801564a:	2320      	movs	r3, #32
 801564c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8015650:	2300      	movs	r3, #0
 8015652:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8015656:	2001      	movs	r0, #1
 8015658:	e751      	b.n	80154fe <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 801565a:	2002      	movs	r0, #2
 801565c:	e74f      	b.n	80154fe <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 801565e:	2002      	movs	r0, #2
 8015660:	e74d      	b.n	80154fe <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8015662:	2001      	movs	r0, #1
 8015664:	e74b      	b.n	80154fe <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8015666:	2001      	movs	r0, #1
 8015668:	e749      	b.n	80154fe <HAL_I2C_IsDeviceReady+0x1e>
 801566a:	bf00      	nop
 801566c:	00100002 	.word	0x00100002
 8015670:	ffff0000 	.word	0xffff0000

08015674 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8015674:	2800      	cmp	r0, #0
 8015676:	f000 81e0 	beq.w	8015a3a <HAL_RCC_OscConfig+0x3c6>
{
 801567a:	b570      	push	{r4, r5, r6, lr}
 801567c:	b082      	sub	sp, #8
 801567e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015680:	6803      	ldr	r3, [r0, #0]
 8015682:	f013 0f01 	tst.w	r3, #1
 8015686:	d03b      	beq.n	8015700 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8015688:	4b9f      	ldr	r3, [pc, #636]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 801568a:	689b      	ldr	r3, [r3, #8]
 801568c:	f003 030c 	and.w	r3, r3, #12
 8015690:	2b04      	cmp	r3, #4
 8015692:	d02c      	beq.n	80156ee <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015694:	4b9c      	ldr	r3, [pc, #624]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 8015696:	689b      	ldr	r3, [r3, #8]
 8015698:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 801569c:	2b08      	cmp	r3, #8
 801569e:	d021      	beq.n	80156e4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80156a0:	6863      	ldr	r3, [r4, #4]
 80156a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80156a6:	d04f      	beq.n	8015748 <HAL_RCC_OscConfig+0xd4>
 80156a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80156ac:	d052      	beq.n	8015754 <HAL_RCC_OscConfig+0xe0>
 80156ae:	4b96      	ldr	r3, [pc, #600]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 80156b0:	681a      	ldr	r2, [r3, #0]
 80156b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80156b6:	601a      	str	r2, [r3, #0]
 80156b8:	681a      	ldr	r2, [r3, #0]
 80156ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80156be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80156c0:	6863      	ldr	r3, [r4, #4]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d050      	beq.n	8015768 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80156c6:	f7ff f9b5 	bl	8014a34 <HAL_GetTick>
 80156ca:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80156cc:	4b8e      	ldr	r3, [pc, #568]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80156d4:	d114      	bne.n	8015700 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80156d6:	f7ff f9ad 	bl	8014a34 <HAL_GetTick>
 80156da:	1b40      	subs	r0, r0, r5
 80156dc:	2864      	cmp	r0, #100	@ 0x64
 80156de:	d9f5      	bls.n	80156cc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80156e0:	2003      	movs	r0, #3
 80156e2:	e1b1      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80156e4:	4b88      	ldr	r3, [pc, #544]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 80156e6:	685b      	ldr	r3, [r3, #4]
 80156e8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80156ec:	d0d8      	beq.n	80156a0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80156ee:	4b86      	ldr	r3, [pc, #536]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80156f6:	d003      	beq.n	8015700 <HAL_RCC_OscConfig+0x8c>
 80156f8:	6863      	ldr	r3, [r4, #4]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	f000 819f 	beq.w	8015a3e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015700:	6823      	ldr	r3, [r4, #0]
 8015702:	f013 0f02 	tst.w	r3, #2
 8015706:	d054      	beq.n	80157b2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8015708:	4b7f      	ldr	r3, [pc, #508]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 801570a:	689b      	ldr	r3, [r3, #8]
 801570c:	f013 0f0c 	tst.w	r3, #12
 8015710:	d03e      	beq.n	8015790 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015712:	4b7d      	ldr	r3, [pc, #500]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 8015714:	689b      	ldr	r3, [r3, #8]
 8015716:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801571a:	2b08      	cmp	r3, #8
 801571c:	d033      	beq.n	8015786 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801571e:	68e3      	ldr	r3, [r4, #12]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d068      	beq.n	80157f6 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015724:	4b79      	ldr	r3, [pc, #484]	@ (801590c <HAL_RCC_OscConfig+0x298>)
 8015726:	2201      	movs	r2, #1
 8015728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801572a:	f7ff f983 	bl	8014a34 <HAL_GetTick>
 801572e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015730:	4b75      	ldr	r3, [pc, #468]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	f013 0f02 	tst.w	r3, #2
 8015738:	d154      	bne.n	80157e4 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801573a:	f7ff f97b 	bl	8014a34 <HAL_GetTick>
 801573e:	1b40      	subs	r0, r0, r5
 8015740:	2802      	cmp	r0, #2
 8015742:	d9f5      	bls.n	8015730 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8015744:	2003      	movs	r0, #3
 8015746:	e17f      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015748:	4a6f      	ldr	r2, [pc, #444]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 801574a:	6813      	ldr	r3, [r2, #0]
 801574c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015750:	6013      	str	r3, [r2, #0]
 8015752:	e7b5      	b.n	80156c0 <HAL_RCC_OscConfig+0x4c>
 8015754:	4b6c      	ldr	r3, [pc, #432]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 8015756:	681a      	ldr	r2, [r3, #0]
 8015758:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801575c:	601a      	str	r2, [r3, #0]
 801575e:	681a      	ldr	r2, [r3, #0]
 8015760:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8015764:	601a      	str	r2, [r3, #0]
 8015766:	e7ab      	b.n	80156c0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8015768:	f7ff f964 	bl	8014a34 <HAL_GetTick>
 801576c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801576e:	4b66      	ldr	r3, [pc, #408]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8015776:	d0c3      	beq.n	8015700 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8015778:	f7ff f95c 	bl	8014a34 <HAL_GetTick>
 801577c:	1b40      	subs	r0, r0, r5
 801577e:	2864      	cmp	r0, #100	@ 0x64
 8015780:	d9f5      	bls.n	801576e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8015782:	2003      	movs	r0, #3
 8015784:	e160      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015786:	4b60      	ldr	r3, [pc, #384]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 8015788:	685b      	ldr	r3, [r3, #4]
 801578a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 801578e:	d1c6      	bne.n	801571e <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015790:	4b5d      	ldr	r3, [pc, #372]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	f013 0f02 	tst.w	r3, #2
 8015798:	d003      	beq.n	80157a2 <HAL_RCC_OscConfig+0x12e>
 801579a:	68e3      	ldr	r3, [r4, #12]
 801579c:	2b01      	cmp	r3, #1
 801579e:	f040 8150 	bne.w	8015a42 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80157a2:	4a59      	ldr	r2, [pc, #356]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 80157a4:	6813      	ldr	r3, [r2, #0]
 80157a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80157aa:	6921      	ldr	r1, [r4, #16]
 80157ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80157b0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80157b2:	6823      	ldr	r3, [r4, #0]
 80157b4:	f013 0f08 	tst.w	r3, #8
 80157b8:	d042      	beq.n	8015840 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80157ba:	6963      	ldr	r3, [r4, #20]
 80157bc:	b36b      	cbz	r3, 801581a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80157be:	4b53      	ldr	r3, [pc, #332]	@ (801590c <HAL_RCC_OscConfig+0x298>)
 80157c0:	2201      	movs	r2, #1
 80157c2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80157c6:	f7ff f935 	bl	8014a34 <HAL_GetTick>
 80157ca:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80157cc:	4b4e      	ldr	r3, [pc, #312]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 80157ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80157d0:	f013 0f02 	tst.w	r3, #2
 80157d4:	d134      	bne.n	8015840 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80157d6:	f7ff f92d 	bl	8014a34 <HAL_GetTick>
 80157da:	1b40      	subs	r0, r0, r5
 80157dc:	2802      	cmp	r0, #2
 80157de:	d9f5      	bls.n	80157cc <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80157e0:	2003      	movs	r0, #3
 80157e2:	e131      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80157e4:	4a48      	ldr	r2, [pc, #288]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 80157e6:	6813      	ldr	r3, [r2, #0]
 80157e8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80157ec:	6921      	ldr	r1, [r4, #16]
 80157ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80157f2:	6013      	str	r3, [r2, #0]
 80157f4:	e7dd      	b.n	80157b2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80157f6:	4b45      	ldr	r3, [pc, #276]	@ (801590c <HAL_RCC_OscConfig+0x298>)
 80157f8:	2200      	movs	r2, #0
 80157fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80157fc:	f7ff f91a 	bl	8014a34 <HAL_GetTick>
 8015800:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015802:	4b41      	ldr	r3, [pc, #260]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	f013 0f02 	tst.w	r3, #2
 801580a:	d0d2      	beq.n	80157b2 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801580c:	f7ff f912 	bl	8014a34 <HAL_GetTick>
 8015810:	1b40      	subs	r0, r0, r5
 8015812:	2802      	cmp	r0, #2
 8015814:	d9f5      	bls.n	8015802 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8015816:	2003      	movs	r0, #3
 8015818:	e116      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801581a:	4b3c      	ldr	r3, [pc, #240]	@ (801590c <HAL_RCC_OscConfig+0x298>)
 801581c:	2200      	movs	r2, #0
 801581e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015822:	f7ff f907 	bl	8014a34 <HAL_GetTick>
 8015826:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015828:	4b37      	ldr	r3, [pc, #220]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 801582a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801582c:	f013 0f02 	tst.w	r3, #2
 8015830:	d006      	beq.n	8015840 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015832:	f7ff f8ff 	bl	8014a34 <HAL_GetTick>
 8015836:	1b40      	subs	r0, r0, r5
 8015838:	2802      	cmp	r0, #2
 801583a:	d9f5      	bls.n	8015828 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 801583c:	2003      	movs	r0, #3
 801583e:	e103      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015840:	6823      	ldr	r3, [r4, #0]
 8015842:	f013 0f04 	tst.w	r3, #4
 8015846:	d077      	beq.n	8015938 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015848:	4b2f      	ldr	r3, [pc, #188]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 801584a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801584c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8015850:	d133      	bne.n	80158ba <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015852:	2300      	movs	r3, #0
 8015854:	9301      	str	r3, [sp, #4]
 8015856:	4b2c      	ldr	r3, [pc, #176]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 8015858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801585a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 801585e:	641a      	str	r2, [r3, #64]	@ 0x40
 8015860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8015866:	9301      	str	r3, [sp, #4]
 8015868:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 801586a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801586c:	4b28      	ldr	r3, [pc, #160]	@ (8015910 <HAL_RCC_OscConfig+0x29c>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8015874:	d023      	beq.n	80158be <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015876:	68a3      	ldr	r3, [r4, #8]
 8015878:	2b01      	cmp	r3, #1
 801587a:	d034      	beq.n	80158e6 <HAL_RCC_OscConfig+0x272>
 801587c:	2b05      	cmp	r3, #5
 801587e:	d038      	beq.n	80158f2 <HAL_RCC_OscConfig+0x27e>
 8015880:	4b21      	ldr	r3, [pc, #132]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 8015882:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015884:	f022 0201 	bic.w	r2, r2, #1
 8015888:	671a      	str	r2, [r3, #112]	@ 0x70
 801588a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801588c:	f022 0204 	bic.w	r2, r2, #4
 8015890:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8015892:	68a3      	ldr	r3, [r4, #8]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d03d      	beq.n	8015914 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015898:	f7ff f8cc 	bl	8014a34 <HAL_GetTick>
 801589c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801589e:	4b1a      	ldr	r3, [pc, #104]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 80158a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158a2:	f013 0f02 	tst.w	r3, #2
 80158a6:	d146      	bne.n	8015936 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80158a8:	f7ff f8c4 	bl	8014a34 <HAL_GetTick>
 80158ac:	1b80      	subs	r0, r0, r6
 80158ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80158b2:	4298      	cmp	r0, r3
 80158b4:	d9f3      	bls.n	801589e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80158b6:	2003      	movs	r0, #3
 80158b8:	e0c6      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80158ba:	2500      	movs	r5, #0
 80158bc:	e7d6      	b.n	801586c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80158be:	4a14      	ldr	r2, [pc, #80]	@ (8015910 <HAL_RCC_OscConfig+0x29c>)
 80158c0:	6813      	ldr	r3, [r2, #0]
 80158c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80158c6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80158c8:	f7ff f8b4 	bl	8014a34 <HAL_GetTick>
 80158cc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80158ce:	4b10      	ldr	r3, [pc, #64]	@ (8015910 <HAL_RCC_OscConfig+0x29c>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80158d6:	d1ce      	bne.n	8015876 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80158d8:	f7ff f8ac 	bl	8014a34 <HAL_GetTick>
 80158dc:	1b80      	subs	r0, r0, r6
 80158de:	2802      	cmp	r0, #2
 80158e0:	d9f5      	bls.n	80158ce <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80158e2:	2003      	movs	r0, #3
 80158e4:	e0b0      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80158e6:	4a08      	ldr	r2, [pc, #32]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 80158e8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80158ea:	f043 0301 	orr.w	r3, r3, #1
 80158ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80158f0:	e7cf      	b.n	8015892 <HAL_RCC_OscConfig+0x21e>
 80158f2:	4b05      	ldr	r3, [pc, #20]	@ (8015908 <HAL_RCC_OscConfig+0x294>)
 80158f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80158f6:	f042 0204 	orr.w	r2, r2, #4
 80158fa:	671a      	str	r2, [r3, #112]	@ 0x70
 80158fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80158fe:	f042 0201 	orr.w	r2, r2, #1
 8015902:	671a      	str	r2, [r3, #112]	@ 0x70
 8015904:	e7c5      	b.n	8015892 <HAL_RCC_OscConfig+0x21e>
 8015906:	bf00      	nop
 8015908:	40023800 	.word	0x40023800
 801590c:	42470000 	.word	0x42470000
 8015910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015914:	f7ff f88e 	bl	8014a34 <HAL_GetTick>
 8015918:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801591a:	4b52      	ldr	r3, [pc, #328]	@ (8015a64 <HAL_RCC_OscConfig+0x3f0>)
 801591c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801591e:	f013 0f02 	tst.w	r3, #2
 8015922:	d008      	beq.n	8015936 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015924:	f7ff f886 	bl	8014a34 <HAL_GetTick>
 8015928:	1b80      	subs	r0, r0, r6
 801592a:	f241 3388 	movw	r3, #5000	@ 0x1388
 801592e:	4298      	cmp	r0, r3
 8015930:	d9f3      	bls.n	801591a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8015932:	2003      	movs	r0, #3
 8015934:	e088      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8015936:	b9ed      	cbnz	r5, 8015974 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015938:	69a3      	ldr	r3, [r4, #24]
 801593a:	2b00      	cmp	r3, #0
 801593c:	f000 8083 	beq.w	8015a46 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8015940:	4a48      	ldr	r2, [pc, #288]	@ (8015a64 <HAL_RCC_OscConfig+0x3f0>)
 8015942:	6892      	ldr	r2, [r2, #8]
 8015944:	f002 020c 	and.w	r2, r2, #12
 8015948:	2a08      	cmp	r2, #8
 801594a:	d051      	beq.n	80159f0 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801594c:	2b02      	cmp	r3, #2
 801594e:	d017      	beq.n	8015980 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015950:	4b45      	ldr	r3, [pc, #276]	@ (8015a68 <HAL_RCC_OscConfig+0x3f4>)
 8015952:	2200      	movs	r2, #0
 8015954:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015956:	f7ff f86d 	bl	8014a34 <HAL_GetTick>
 801595a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801595c:	4b41      	ldr	r3, [pc, #260]	@ (8015a64 <HAL_RCC_OscConfig+0x3f0>)
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8015964:	d042      	beq.n	80159ec <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015966:	f7ff f865 	bl	8014a34 <HAL_GetTick>
 801596a:	1b00      	subs	r0, r0, r4
 801596c:	2802      	cmp	r0, #2
 801596e:	d9f5      	bls.n	801595c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8015970:	2003      	movs	r0, #3
 8015972:	e069      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8015974:	4a3b      	ldr	r2, [pc, #236]	@ (8015a64 <HAL_RCC_OscConfig+0x3f0>)
 8015976:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015978:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801597c:	6413      	str	r3, [r2, #64]	@ 0x40
 801597e:	e7db      	b.n	8015938 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8015980:	4b39      	ldr	r3, [pc, #228]	@ (8015a68 <HAL_RCC_OscConfig+0x3f4>)
 8015982:	2200      	movs	r2, #0
 8015984:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8015986:	f7ff f855 	bl	8014a34 <HAL_GetTick>
 801598a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801598c:	4b35      	ldr	r3, [pc, #212]	@ (8015a64 <HAL_RCC_OscConfig+0x3f0>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8015994:	d006      	beq.n	80159a4 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015996:	f7ff f84d 	bl	8014a34 <HAL_GetTick>
 801599a:	1b40      	subs	r0, r0, r5
 801599c:	2802      	cmp	r0, #2
 801599e:	d9f5      	bls.n	801598c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80159a0:	2003      	movs	r0, #3
 80159a2:	e051      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80159a4:	69e3      	ldr	r3, [r4, #28]
 80159a6:	6a22      	ldr	r2, [r4, #32]
 80159a8:	4313      	orrs	r3, r2
 80159aa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80159ac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80159b0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80159b2:	0852      	lsrs	r2, r2, #1
 80159b4:	3a01      	subs	r2, #1
 80159b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80159ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80159bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80159c0:	4a28      	ldr	r2, [pc, #160]	@ (8015a64 <HAL_RCC_OscConfig+0x3f0>)
 80159c2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80159c4:	4b28      	ldr	r3, [pc, #160]	@ (8015a68 <HAL_RCC_OscConfig+0x3f4>)
 80159c6:	2201      	movs	r2, #1
 80159c8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80159ca:	f7ff f833 	bl	8014a34 <HAL_GetTick>
 80159ce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80159d0:	4b24      	ldr	r3, [pc, #144]	@ (8015a64 <HAL_RCC_OscConfig+0x3f0>)
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80159d8:	d106      	bne.n	80159e8 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80159da:	f7ff f82b 	bl	8014a34 <HAL_GetTick>
 80159de:	1b00      	subs	r0, r0, r4
 80159e0:	2802      	cmp	r0, #2
 80159e2:	d9f5      	bls.n	80159d0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80159e4:	2003      	movs	r0, #3
 80159e6:	e02f      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80159e8:	2000      	movs	r0, #0
 80159ea:	e02d      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
 80159ec:	2000      	movs	r0, #0
 80159ee:	e02b      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80159f0:	2b01      	cmp	r3, #1
 80159f2:	d02b      	beq.n	8015a4c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80159f4:	4b1b      	ldr	r3, [pc, #108]	@ (8015a64 <HAL_RCC_OscConfig+0x3f0>)
 80159f6:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80159f8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80159fc:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80159fe:	4291      	cmp	r1, r2
 8015a00:	d126      	bne.n	8015a50 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8015a02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8015a06:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015a08:	428a      	cmp	r2, r1
 8015a0a:	d123      	bne.n	8015a54 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8015a0c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8015a0e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8015a12:	401a      	ands	r2, r3
 8015a14:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8015a18:	d11e      	bne.n	8015a58 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8015a1a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8015a1e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8015a20:	0852      	lsrs	r2, r2, #1
 8015a22:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8015a24:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8015a28:	d118      	bne.n	8015a5c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8015a2a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8015a2e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8015a30:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8015a34:	d114      	bne.n	8015a60 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8015a36:	2000      	movs	r0, #0
 8015a38:	e006      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8015a3a:	2001      	movs	r0, #1
}
 8015a3c:	4770      	bx	lr
        return HAL_ERROR;
 8015a3e:	2001      	movs	r0, #1
 8015a40:	e002      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8015a42:	2001      	movs	r0, #1
 8015a44:	e000      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8015a46:	2000      	movs	r0, #0
}
 8015a48:	b002      	add	sp, #8
 8015a4a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8015a4c:	2001      	movs	r0, #1
 8015a4e:	e7fb      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8015a50:	2001      	movs	r0, #1
 8015a52:	e7f9      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
 8015a54:	2001      	movs	r0, #1
 8015a56:	e7f7      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
 8015a58:	2001      	movs	r0, #1
 8015a5a:	e7f5      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
 8015a5c:	2001      	movs	r0, #1
 8015a5e:	e7f3      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
 8015a60:	2001      	movs	r0, #1
 8015a62:	e7f1      	b.n	8015a48 <HAL_RCC_OscConfig+0x3d4>
 8015a64:	40023800 	.word	0x40023800
 8015a68:	42470000 	.word	0x42470000

08015a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015a6c:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8015a6e:	4b33      	ldr	r3, [pc, #204]	@ (8015b3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8015a70:	689b      	ldr	r3, [r3, #8]
 8015a72:	f003 030c 	and.w	r3, r3, #12
 8015a76:	2b04      	cmp	r3, #4
 8015a78:	d05b      	beq.n	8015b32 <HAL_RCC_GetSysClockFreq+0xc6>
 8015a7a:	2b08      	cmp	r3, #8
 8015a7c:	d15b      	bne.n	8015b36 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8015a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8015b3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8015a80:	685a      	ldr	r2, [r3, #4]
 8015a82:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015a86:	685b      	ldr	r3, [r3, #4]
 8015a88:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8015a8c:	d02c      	beq.n	8015ae8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8015b3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8015a90:	6858      	ldr	r0, [r3, #4]
 8015a92:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8015a96:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8015a9a:	ebbc 0c00 	subs.w	ip, ip, r0
 8015a9e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8015aa2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8015aa6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8015aaa:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8015aae:	ebb1 010c 	subs.w	r1, r1, ip
 8015ab2:	eb63 030e 	sbc.w	r3, r3, lr
 8015ab6:	00db      	lsls	r3, r3, #3
 8015ab8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015abc:	00c9      	lsls	r1, r1, #3
 8015abe:	eb11 0c00 	adds.w	ip, r1, r0
 8015ac2:	f143 0300 	adc.w	r3, r3, #0
 8015ac6:	0259      	lsls	r1, r3, #9
 8015ac8:	2300      	movs	r3, #0
 8015aca:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8015ace:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8015ad2:	f7fb f941 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8015ad6:	4b19      	ldr	r3, [pc, #100]	@ (8015b3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8015ad8:	685b      	ldr	r3, [r3, #4]
 8015ada:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8015ade:	3301      	adds	r3, #1
 8015ae0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8015ae2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8015ae6:	e027      	b.n	8015b38 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015ae8:	4b14      	ldr	r3, [pc, #80]	@ (8015b3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8015aea:	6858      	ldr	r0, [r3, #4]
 8015aec:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8015af0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8015af4:	ebbc 0c00 	subs.w	ip, ip, r0
 8015af8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8015afc:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8015b00:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8015b04:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8015b08:	ebb1 010c 	subs.w	r1, r1, ip
 8015b0c:	eb63 030e 	sbc.w	r3, r3, lr
 8015b10:	00db      	lsls	r3, r3, #3
 8015b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015b16:	00c9      	lsls	r1, r1, #3
 8015b18:	eb11 0c00 	adds.w	ip, r1, r0
 8015b1c:	f143 0300 	adc.w	r3, r3, #0
 8015b20:	0299      	lsls	r1, r3, #10
 8015b22:	2300      	movs	r3, #0
 8015b24:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8015b28:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8015b2c:	f7fb f914 	bl	8010d58 <__aeabi_uldivmod>
 8015b30:	e7d1      	b.n	8015ad6 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8015b32:	4803      	ldr	r0, [pc, #12]	@ (8015b40 <HAL_RCC_GetSysClockFreq+0xd4>)
 8015b34:	e000      	b.n	8015b38 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8015b36:	4803      	ldr	r0, [pc, #12]	@ (8015b44 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8015b38:	bd08      	pop	{r3, pc}
 8015b3a:	bf00      	nop
 8015b3c:	40023800 	.word	0x40023800
 8015b40:	007a1200 	.word	0x007a1200
 8015b44:	00f42400 	.word	0x00f42400

08015b48 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	f000 809b 	beq.w	8015c84 <HAL_RCC_ClockConfig+0x13c>
{
 8015b4e:	b570      	push	{r4, r5, r6, lr}
 8015b50:	460d      	mov	r5, r1
 8015b52:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8015b54:	4b4f      	ldr	r3, [pc, #316]	@ (8015c94 <HAL_RCC_ClockConfig+0x14c>)
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	f003 0307 	and.w	r3, r3, #7
 8015b5c:	428b      	cmp	r3, r1
 8015b5e:	d208      	bcs.n	8015b72 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015b60:	b2cb      	uxtb	r3, r1
 8015b62:	4a4c      	ldr	r2, [pc, #304]	@ (8015c94 <HAL_RCC_ClockConfig+0x14c>)
 8015b64:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015b66:	6813      	ldr	r3, [r2, #0]
 8015b68:	f003 0307 	and.w	r3, r3, #7
 8015b6c:	428b      	cmp	r3, r1
 8015b6e:	f040 808b 	bne.w	8015c88 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015b72:	6823      	ldr	r3, [r4, #0]
 8015b74:	f013 0f02 	tst.w	r3, #2
 8015b78:	d017      	beq.n	8015baa <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015b7a:	f013 0f04 	tst.w	r3, #4
 8015b7e:	d004      	beq.n	8015b8a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8015b80:	4a45      	ldr	r2, [pc, #276]	@ (8015c98 <HAL_RCC_ClockConfig+0x150>)
 8015b82:	6893      	ldr	r3, [r2, #8]
 8015b84:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8015b88:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015b8a:	6823      	ldr	r3, [r4, #0]
 8015b8c:	f013 0f08 	tst.w	r3, #8
 8015b90:	d004      	beq.n	8015b9c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8015b92:	4a41      	ldr	r2, [pc, #260]	@ (8015c98 <HAL_RCC_ClockConfig+0x150>)
 8015b94:	6893      	ldr	r3, [r2, #8]
 8015b96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8015b9a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015b9c:	4a3e      	ldr	r2, [pc, #248]	@ (8015c98 <HAL_RCC_ClockConfig+0x150>)
 8015b9e:	6893      	ldr	r3, [r2, #8]
 8015ba0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8015ba4:	68a1      	ldr	r1, [r4, #8]
 8015ba6:	430b      	orrs	r3, r1
 8015ba8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015baa:	6823      	ldr	r3, [r4, #0]
 8015bac:	f013 0f01 	tst.w	r3, #1
 8015bb0:	d032      	beq.n	8015c18 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015bb2:	6863      	ldr	r3, [r4, #4]
 8015bb4:	2b01      	cmp	r3, #1
 8015bb6:	d021      	beq.n	8015bfc <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8015bb8:	1e9a      	subs	r2, r3, #2
 8015bba:	2a01      	cmp	r2, #1
 8015bbc:	d925      	bls.n	8015c0a <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015bbe:	4a36      	ldr	r2, [pc, #216]	@ (8015c98 <HAL_RCC_ClockConfig+0x150>)
 8015bc0:	6812      	ldr	r2, [r2, #0]
 8015bc2:	f012 0f02 	tst.w	r2, #2
 8015bc6:	d061      	beq.n	8015c8c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015bc8:	4933      	ldr	r1, [pc, #204]	@ (8015c98 <HAL_RCC_ClockConfig+0x150>)
 8015bca:	688a      	ldr	r2, [r1, #8]
 8015bcc:	f022 0203 	bic.w	r2, r2, #3
 8015bd0:	4313      	orrs	r3, r2
 8015bd2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8015bd4:	f7fe ff2e 	bl	8014a34 <HAL_GetTick>
 8015bd8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015bda:	4b2f      	ldr	r3, [pc, #188]	@ (8015c98 <HAL_RCC_ClockConfig+0x150>)
 8015bdc:	689b      	ldr	r3, [r3, #8]
 8015bde:	f003 030c 	and.w	r3, r3, #12
 8015be2:	6862      	ldr	r2, [r4, #4]
 8015be4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8015be8:	d016      	beq.n	8015c18 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015bea:	f7fe ff23 	bl	8014a34 <HAL_GetTick>
 8015bee:	1b80      	subs	r0, r0, r6
 8015bf0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015bf4:	4298      	cmp	r0, r3
 8015bf6:	d9f0      	bls.n	8015bda <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8015bf8:	2003      	movs	r0, #3
 8015bfa:	e042      	b.n	8015c82 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015bfc:	4a26      	ldr	r2, [pc, #152]	@ (8015c98 <HAL_RCC_ClockConfig+0x150>)
 8015bfe:	6812      	ldr	r2, [r2, #0]
 8015c00:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8015c04:	d1e0      	bne.n	8015bc8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8015c06:	2001      	movs	r0, #1
 8015c08:	e03b      	b.n	8015c82 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015c0a:	4a23      	ldr	r2, [pc, #140]	@ (8015c98 <HAL_RCC_ClockConfig+0x150>)
 8015c0c:	6812      	ldr	r2, [r2, #0]
 8015c0e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8015c12:	d1d9      	bne.n	8015bc8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8015c14:	2001      	movs	r0, #1
 8015c16:	e034      	b.n	8015c82 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8015c18:	4b1e      	ldr	r3, [pc, #120]	@ (8015c94 <HAL_RCC_ClockConfig+0x14c>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	f003 0307 	and.w	r3, r3, #7
 8015c20:	42ab      	cmp	r3, r5
 8015c22:	d907      	bls.n	8015c34 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015c24:	b2ea      	uxtb	r2, r5
 8015c26:	4b1b      	ldr	r3, [pc, #108]	@ (8015c94 <HAL_RCC_ClockConfig+0x14c>)
 8015c28:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	f003 0307 	and.w	r3, r3, #7
 8015c30:	42ab      	cmp	r3, r5
 8015c32:	d12d      	bne.n	8015c90 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015c34:	6823      	ldr	r3, [r4, #0]
 8015c36:	f013 0f04 	tst.w	r3, #4
 8015c3a:	d006      	beq.n	8015c4a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015c3c:	4a16      	ldr	r2, [pc, #88]	@ (8015c98 <HAL_RCC_ClockConfig+0x150>)
 8015c3e:	6893      	ldr	r3, [r2, #8]
 8015c40:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8015c44:	68e1      	ldr	r1, [r4, #12]
 8015c46:	430b      	orrs	r3, r1
 8015c48:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015c4a:	6823      	ldr	r3, [r4, #0]
 8015c4c:	f013 0f08 	tst.w	r3, #8
 8015c50:	d007      	beq.n	8015c62 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8015c52:	4a11      	ldr	r2, [pc, #68]	@ (8015c98 <HAL_RCC_ClockConfig+0x150>)
 8015c54:	6893      	ldr	r3, [r2, #8]
 8015c56:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8015c5a:	6921      	ldr	r1, [r4, #16]
 8015c5c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8015c60:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8015c62:	f7ff ff03 	bl	8015a6c <HAL_RCC_GetSysClockFreq>
 8015c66:	4b0c      	ldr	r3, [pc, #48]	@ (8015c98 <HAL_RCC_ClockConfig+0x150>)
 8015c68:	689b      	ldr	r3, [r3, #8]
 8015c6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8015c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8015c9c <HAL_RCC_ClockConfig+0x154>)
 8015c70:	5cd3      	ldrb	r3, [r2, r3]
 8015c72:	40d8      	lsrs	r0, r3
 8015c74:	4b0a      	ldr	r3, [pc, #40]	@ (8015ca0 <HAL_RCC_ClockConfig+0x158>)
 8015c76:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8015c78:	4b0a      	ldr	r3, [pc, #40]	@ (8015ca4 <HAL_RCC_ClockConfig+0x15c>)
 8015c7a:	6818      	ldr	r0, [r3, #0]
 8015c7c:	f7fc f9ee 	bl	801205c <HAL_InitTick>
  return HAL_OK;
 8015c80:	2000      	movs	r0, #0
}
 8015c82:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8015c84:	2001      	movs	r0, #1
}
 8015c86:	4770      	bx	lr
      return HAL_ERROR;
 8015c88:	2001      	movs	r0, #1
 8015c8a:	e7fa      	b.n	8015c82 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8015c8c:	2001      	movs	r0, #1
 8015c8e:	e7f8      	b.n	8015c82 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8015c90:	2001      	movs	r0, #1
 8015c92:	e7f6      	b.n	8015c82 <HAL_RCC_ClockConfig+0x13a>
 8015c94:	40023c00 	.word	0x40023c00
 8015c98:	40023800 	.word	0x40023800
 8015c9c:	080334b4 	.word	0x080334b4
 8015ca0:	20000018 	.word	0x20000018
 8015ca4:	20000084 	.word	0x20000084

08015ca8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8015ca8:	4b01      	ldr	r3, [pc, #4]	@ (8015cb0 <HAL_RCC_GetHCLKFreq+0x8>)
 8015caa:	6818      	ldr	r0, [r3, #0]
 8015cac:	4770      	bx	lr
 8015cae:	bf00      	nop
 8015cb0:	20000018 	.word	0x20000018

08015cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015cb4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015cb6:	f7ff fff7 	bl	8015ca8 <HAL_RCC_GetHCLKFreq>
 8015cba:	4b04      	ldr	r3, [pc, #16]	@ (8015ccc <HAL_RCC_GetPCLK1Freq+0x18>)
 8015cbc:	689b      	ldr	r3, [r3, #8]
 8015cbe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8015cc2:	4a03      	ldr	r2, [pc, #12]	@ (8015cd0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8015cc4:	5cd3      	ldrb	r3, [r2, r3]
}
 8015cc6:	40d8      	lsrs	r0, r3
 8015cc8:	bd08      	pop	{r3, pc}
 8015cca:	bf00      	nop
 8015ccc:	40023800 	.word	0x40023800
 8015cd0:	080334ac 	.word	0x080334ac

08015cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015cd4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015cd6:	f7ff ffe7 	bl	8015ca8 <HAL_RCC_GetHCLKFreq>
 8015cda:	4b04      	ldr	r3, [pc, #16]	@ (8015cec <HAL_RCC_GetPCLK2Freq+0x18>)
 8015cdc:	689b      	ldr	r3, [r3, #8]
 8015cde:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8015ce2:	4a03      	ldr	r2, [pc, #12]	@ (8015cf0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8015ce4:	5cd3      	ldrb	r3, [r2, r3]
}
 8015ce6:	40d8      	lsrs	r0, r3
 8015ce8:	bd08      	pop	{r3, pc}
 8015cea:	bf00      	nop
 8015cec:	40023800 	.word	0x40023800
 8015cf0:	080334ac 	.word	0x080334ac

08015cf4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8015cf4:	230f      	movs	r3, #15
 8015cf6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8015cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8015d28 <HAL_RCC_GetClockConfig+0x34>)
 8015cfa:	689a      	ldr	r2, [r3, #8]
 8015cfc:	f002 0203 	and.w	r2, r2, #3
 8015d00:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8015d02:	689a      	ldr	r2, [r3, #8]
 8015d04:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8015d08:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8015d0a:	689a      	ldr	r2, [r3, #8]
 8015d0c:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8015d10:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8015d12:	689b      	ldr	r3, [r3, #8]
 8015d14:	08db      	lsrs	r3, r3, #3
 8015d16:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8015d1a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8015d1c:	4b03      	ldr	r3, [pc, #12]	@ (8015d2c <HAL_RCC_GetClockConfig+0x38>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	f003 0307 	and.w	r3, r3, #7
 8015d24:	600b      	str	r3, [r1, #0]
}
 8015d26:	4770      	bx	lr
 8015d28:	40023800 	.word	0x40023800
 8015d2c:	40023c00 	.word	0x40023c00

08015d30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8015d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d34:	b082      	sub	sp, #8
 8015d36:	4605      	mov	r5, r0
 8015d38:	4688      	mov	r8, r1
 8015d3a:	4617      	mov	r7, r2
 8015d3c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8015d3e:	f7fe fe79 	bl	8014a34 <HAL_GetTick>
 8015d42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015d44:	1a1b      	subs	r3, r3, r0
 8015d46:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8015d4a:	f7fe fe73 	bl	8014a34 <HAL_GetTick>
 8015d4e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8015d50:	4b28      	ldr	r3, [pc, #160]	@ (8015df4 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8015d58:	fb09 f303 	mul.w	r3, r9, r3
 8015d5c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015d5e:	682b      	ldr	r3, [r5, #0]
 8015d60:	689c      	ldr	r4, [r3, #8]
 8015d62:	ea38 0404 	bics.w	r4, r8, r4
 8015d66:	bf0c      	ite	eq
 8015d68:	2301      	moveq	r3, #1
 8015d6a:	2300      	movne	r3, #0
 8015d6c:	42bb      	cmp	r3, r7
 8015d6e:	d03d      	beq.n	8015dec <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8015d70:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8015d74:	d0f3      	beq.n	8015d5e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8015d76:	f7fe fe5d 	bl	8014a34 <HAL_GetTick>
 8015d7a:	eba0 000a 	sub.w	r0, r0, sl
 8015d7e:	4548      	cmp	r0, r9
 8015d80:	d207      	bcs.n	8015d92 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8015d82:	9a01      	ldr	r2, [sp, #4]
 8015d84:	b102      	cbz	r2, 8015d88 <SPI_WaitFlagStateUntilTimeout+0x58>
 8015d86:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8015d88:	9b01      	ldr	r3, [sp, #4]
 8015d8a:	3b01      	subs	r3, #1
 8015d8c:	9301      	str	r3, [sp, #4]
 8015d8e:	4691      	mov	r9, r2
 8015d90:	e7e5      	b.n	8015d5e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015d92:	682a      	ldr	r2, [r5, #0]
 8015d94:	6853      	ldr	r3, [r2, #4]
 8015d96:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8015d9a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015d9c:	686b      	ldr	r3, [r5, #4]
 8015d9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8015da2:	d00b      	beq.n	8015dbc <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015da4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8015da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015daa:	d014      	beq.n	8015dd6 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8015dac:	2301      	movs	r3, #1
 8015dae:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8015db2:	2300      	movs	r3, #0
 8015db4:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8015db8:	2003      	movs	r0, #3
 8015dba:	e018      	b.n	8015dee <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015dbc:	68ab      	ldr	r3, [r5, #8]
 8015dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015dc2:	d002      	beq.n	8015dca <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015dc8:	d1ec      	bne.n	8015da4 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8015dca:	682a      	ldr	r2, [r5, #0]
 8015dcc:	6813      	ldr	r3, [r2, #0]
 8015dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015dd2:	6013      	str	r3, [r2, #0]
 8015dd4:	e7e6      	b.n	8015da4 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8015dd6:	682a      	ldr	r2, [r5, #0]
 8015dd8:	6813      	ldr	r3, [r2, #0]
 8015dda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8015dde:	6013      	str	r3, [r2, #0]
 8015de0:	682a      	ldr	r2, [r5, #0]
 8015de2:	6813      	ldr	r3, [r2, #0]
 8015de4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015de8:	6013      	str	r3, [r2, #0]
 8015dea:	e7df      	b.n	8015dac <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8015dec:	2000      	movs	r0, #0
}
 8015dee:	b002      	add	sp, #8
 8015df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015df4:	20000018 	.word	0x20000018

08015df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8015df8:	b570      	push	{r4, r5, r6, lr}
 8015dfa:	b084      	sub	sp, #16
 8015dfc:	4604      	mov	r4, r0
 8015dfe:	460d      	mov	r5, r1
 8015e00:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8015e02:	9200      	str	r2, [sp, #0]
 8015e04:	460b      	mov	r3, r1
 8015e06:	2201      	movs	r2, #1
 8015e08:	2102      	movs	r1, #2
 8015e0a:	f7ff ff91 	bl	8015d30 <SPI_WaitFlagStateUntilTimeout>
 8015e0e:	b9d0      	cbnz	r0, 8015e46 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8015e10:	4b17      	ldr	r3, [pc, #92]	@ (8015e70 <SPI_EndRxTxTransaction+0x78>)
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	4a17      	ldr	r2, [pc, #92]	@ (8015e74 <SPI_EndRxTxTransaction+0x7c>)
 8015e16:	fba2 2303 	umull	r2, r3, r2, r3
 8015e1a:	0d5b      	lsrs	r3, r3, #21
 8015e1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015e20:	fb02 f303 	mul.w	r3, r2, r3
 8015e24:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015e26:	6863      	ldr	r3, [r4, #4]
 8015e28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8015e2c:	d011      	beq.n	8015e52 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8015e2e:	9b03      	ldr	r3, [sp, #12]
 8015e30:	b13b      	cbz	r3, 8015e42 <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8015e32:	9b03      	ldr	r3, [sp, #12]
 8015e34:	3b01      	subs	r3, #1
 8015e36:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8015e38:	6823      	ldr	r3, [r4, #0]
 8015e3a:	689b      	ldr	r3, [r3, #8]
 8015e3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015e40:	d1f5      	bne.n	8015e2e <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8015e42:	b004      	add	sp, #16
 8015e44:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015e46:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015e48:	f043 0320 	orr.w	r3, r3, #32
 8015e4c:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8015e4e:	2003      	movs	r0, #3
 8015e50:	e7f7      	b.n	8015e42 <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015e52:	9600      	str	r6, [sp, #0]
 8015e54:	462b      	mov	r3, r5
 8015e56:	2200      	movs	r2, #0
 8015e58:	2180      	movs	r1, #128	@ 0x80
 8015e5a:	4620      	mov	r0, r4
 8015e5c:	f7ff ff68 	bl	8015d30 <SPI_WaitFlagStateUntilTimeout>
 8015e60:	2800      	cmp	r0, #0
 8015e62:	d0ee      	beq.n	8015e42 <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015e64:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015e66:	f043 0320 	orr.w	r3, r3, #32
 8015e6a:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8015e6c:	2003      	movs	r0, #3
 8015e6e:	e7e8      	b.n	8015e42 <SPI_EndRxTxTransaction+0x4a>
 8015e70:	20000018 	.word	0x20000018
 8015e74:	165e9f81 	.word	0x165e9f81

08015e78 <SPI_EndRxTransaction>:
{
 8015e78:	b510      	push	{r4, lr}
 8015e7a:	b082      	sub	sp, #8
 8015e7c:	4604      	mov	r4, r0
 8015e7e:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015e80:	6841      	ldr	r1, [r0, #4]
 8015e82:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8015e86:	d014      	beq.n	8015eb2 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015e88:	6861      	ldr	r1, [r4, #4]
 8015e8a:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8015e8e:	d12a      	bne.n	8015ee6 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8015e90:	68a1      	ldr	r1, [r4, #8]
 8015e92:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015e96:	d019      	beq.n	8015ecc <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015e98:	9200      	str	r2, [sp, #0]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	2180      	movs	r1, #128	@ 0x80
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	f7ff ff46 	bl	8015d30 <SPI_WaitFlagStateUntilTimeout>
 8015ea4:	b330      	cbz	r0, 8015ef4 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015ea6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015ea8:	f043 0320 	orr.w	r3, r3, #32
 8015eac:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8015eae:	2003      	movs	r0, #3
 8015eb0:	e020      	b.n	8015ef4 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015eb2:	6881      	ldr	r1, [r0, #8]
 8015eb4:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8015eb8:	d002      	beq.n	8015ec0 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015eba:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015ebe:	d1e3      	bne.n	8015e88 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8015ec0:	6820      	ldr	r0, [r4, #0]
 8015ec2:	6801      	ldr	r1, [r0, #0]
 8015ec4:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8015ec8:	6001      	str	r1, [r0, #0]
 8015eca:	e7dd      	b.n	8015e88 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8015ecc:	9200      	str	r2, [sp, #0]
 8015ece:	2200      	movs	r2, #0
 8015ed0:	2101      	movs	r1, #1
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	f7ff ff2c 	bl	8015d30 <SPI_WaitFlagStateUntilTimeout>
 8015ed8:	b160      	cbz	r0, 8015ef4 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015eda:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015edc:	f043 0320 	orr.w	r3, r3, #32
 8015ee0:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8015ee2:	2003      	movs	r0, #3
 8015ee4:	e006      	b.n	8015ef4 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8015ee6:	9200      	str	r2, [sp, #0]
 8015ee8:	2200      	movs	r2, #0
 8015eea:	2101      	movs	r1, #1
 8015eec:	4620      	mov	r0, r4
 8015eee:	f7ff ff1f 	bl	8015d30 <SPI_WaitFlagStateUntilTimeout>
 8015ef2:	b908      	cbnz	r0, 8015ef8 <SPI_EndRxTransaction+0x80>
}
 8015ef4:	b002      	add	sp, #8
 8015ef6:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015ef8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015efa:	f043 0320 	orr.w	r3, r3, #32
 8015efe:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8015f00:	2003      	movs	r0, #3
 8015f02:	e7f7      	b.n	8015ef4 <SPI_EndRxTransaction+0x7c>

08015f04 <HAL_SPI_Init>:
  if (hspi == NULL)
 8015f04:	2800      	cmp	r0, #0
 8015f06:	d05a      	beq.n	8015fbe <HAL_SPI_Init+0xba>
{
 8015f08:	b510      	push	{r4, lr}
 8015f0a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8015f0c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015f0e:	b933      	cbnz	r3, 8015f1e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015f10:	6843      	ldr	r3, [r0, #4]
 8015f12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8015f16:	d005      	beq.n	8015f24 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8015f18:	2300      	movs	r3, #0
 8015f1a:	61c3      	str	r3, [r0, #28]
 8015f1c:	e002      	b.n	8015f24 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8015f22:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015f24:	2300      	movs	r3, #0
 8015f26:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8015f28:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d040      	beq.n	8015fb2 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8015f30:	2302      	movs	r3, #2
 8015f32:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8015f36:	6822      	ldr	r2, [r4, #0]
 8015f38:	6813      	ldr	r3, [r2, #0]
 8015f3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015f3e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8015f40:	6863      	ldr	r3, [r4, #4]
 8015f42:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8015f46:	68a2      	ldr	r2, [r4, #8]
 8015f48:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8015f4c:	4313      	orrs	r3, r2
 8015f4e:	68e2      	ldr	r2, [r4, #12]
 8015f50:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8015f54:	4313      	orrs	r3, r2
 8015f56:	6922      	ldr	r2, [r4, #16]
 8015f58:	f002 0202 	and.w	r2, r2, #2
 8015f5c:	4313      	orrs	r3, r2
 8015f5e:	6962      	ldr	r2, [r4, #20]
 8015f60:	f002 0201 	and.w	r2, r2, #1
 8015f64:	4313      	orrs	r3, r2
 8015f66:	69a2      	ldr	r2, [r4, #24]
 8015f68:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8015f6c:	4313      	orrs	r3, r2
 8015f6e:	69e2      	ldr	r2, [r4, #28]
 8015f70:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8015f74:	4313      	orrs	r3, r2
 8015f76:	6a22      	ldr	r2, [r4, #32]
 8015f78:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8015f7c:	4313      	orrs	r3, r2
 8015f7e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8015f80:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8015f84:	6821      	ldr	r1, [r4, #0]
 8015f86:	4313      	orrs	r3, r2
 8015f88:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8015f8a:	8b63      	ldrh	r3, [r4, #26]
 8015f8c:	f003 0304 	and.w	r3, r3, #4
 8015f90:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015f92:	f002 0210 	and.w	r2, r2, #16
 8015f96:	6821      	ldr	r1, [r4, #0]
 8015f98:	4313      	orrs	r3, r2
 8015f9a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8015f9c:	6822      	ldr	r2, [r4, #0]
 8015f9e:	69d3      	ldr	r3, [r2, #28]
 8015fa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015fa4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8015fa6:	2000      	movs	r0, #0
 8015fa8:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8015faa:	2301      	movs	r3, #1
 8015fac:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8015fb0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8015fb2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	f7fb ffcc 	bl	8011f54 <HAL_SPI_MspInit>
 8015fbc:	e7b8      	b.n	8015f30 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8015fbe:	2001      	movs	r0, #1
}
 8015fc0:	4770      	bx	lr

08015fc2 <HAL_SPI_Transmit>:
{
 8015fc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fc6:	b083      	sub	sp, #12
 8015fc8:	4604      	mov	r4, r0
 8015fca:	4689      	mov	r9, r1
 8015fcc:	4690      	mov	r8, r2
 8015fce:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8015fd0:	f7fe fd30 	bl	8014a34 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8015fd4:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8015fd8:	b2f6      	uxtb	r6, r6
 8015fda:	2e01      	cmp	r6, #1
 8015fdc:	f040 80cc 	bne.w	8016178 <HAL_SPI_Transmit+0x1b6>
 8015fe0:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8015fe2:	f1b9 0f00 	cmp.w	r9, #0
 8015fe6:	f000 80c8 	beq.w	801617a <HAL_SPI_Transmit+0x1b8>
 8015fea:	f1b8 0f00 	cmp.w	r8, #0
 8015fee:	f000 80c4 	beq.w	801617a <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8015ff2:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8015ff6:	2b01      	cmp	r3, #1
 8015ff8:	f000 80c3 	beq.w	8016182 <HAL_SPI_Transmit+0x1c0>
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8016002:	2303      	movs	r3, #3
 8016004:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016008:	2300      	movs	r3, #0
 801600a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801600c:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8016010:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8016014:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8016018:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 801601a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 801601c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 801601e:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8016020:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016022:	68a3      	ldr	r3, [r4, #8]
 8016024:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016028:	d01e      	beq.n	8016068 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801602a:	6823      	ldr	r3, [r4, #0]
 801602c:	681a      	ldr	r2, [r3, #0]
 801602e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8016032:	d103      	bne.n	801603c <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8016034:	681a      	ldr	r2, [r3, #0]
 8016036:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801603a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801603c:	68e3      	ldr	r3, [r4, #12]
 801603e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016042:	d01c      	beq.n	801607e <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016044:	6863      	ldr	r3, [r4, #4]
 8016046:	b113      	cbz	r3, 801604e <HAL_SPI_Transmit+0x8c>
 8016048:	f1b8 0f01 	cmp.w	r8, #1
 801604c:	d15f      	bne.n	801610e <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801604e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016050:	6823      	ldr	r3, [r4, #0]
 8016052:	7812      	ldrb	r2, [r2, #0]
 8016054:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016056:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016058:	3301      	adds	r3, #1
 801605a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 801605c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801605e:	b29b      	uxth	r3, r3
 8016060:	3b01      	subs	r3, #1
 8016062:	b29b      	uxth	r3, r3
 8016064:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8016066:	e052      	b.n	801610e <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8016068:	6822      	ldr	r2, [r4, #0]
 801606a:	6813      	ldr	r3, [r2, #0]
 801606c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016070:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8016072:	6822      	ldr	r2, [r4, #0]
 8016074:	6813      	ldr	r3, [r2, #0]
 8016076:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801607a:	6013      	str	r3, [r2, #0]
 801607c:	e7d5      	b.n	801602a <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801607e:	6863      	ldr	r3, [r4, #4]
 8016080:	b113      	cbz	r3, 8016088 <HAL_SPI_Transmit+0xc6>
 8016082:	f1b8 0f01 	cmp.w	r8, #1
 8016086:	d115      	bne.n	80160b4 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8016088:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801608a:	6823      	ldr	r3, [r4, #0]
 801608c:	8812      	ldrh	r2, [r2, #0]
 801608e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016090:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016092:	3302      	adds	r3, #2
 8016094:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8016096:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016098:	b29b      	uxth	r3, r3
 801609a:	3b01      	subs	r3, #1
 801609c:	b29b      	uxth	r3, r3
 801609e:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80160a0:	e008      	b.n	80160b4 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80160a2:	f7fe fcc7 	bl	8014a34 <HAL_GetTick>
 80160a6:	1bc0      	subs	r0, r0, r7
 80160a8:	42a8      	cmp	r0, r5
 80160aa:	d302      	bcc.n	80160b2 <HAL_SPI_Transmit+0xf0>
 80160ac:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80160b0:	d115      	bne.n	80160de <HAL_SPI_Transmit+0x11c>
 80160b2:	b1a5      	cbz	r5, 80160de <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 80160b4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d042      	beq.n	8016142 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80160bc:	6823      	ldr	r3, [r4, #0]
 80160be:	689a      	ldr	r2, [r3, #8]
 80160c0:	f012 0f02 	tst.w	r2, #2
 80160c4:	d0ed      	beq.n	80160a2 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80160c6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80160c8:	8812      	ldrh	r2, [r2, #0]
 80160ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80160cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160ce:	3302      	adds	r3, #2
 80160d0:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80160d2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80160d4:	b29b      	uxth	r3, r3
 80160d6:	3b01      	subs	r3, #1
 80160d8:	b29b      	uxth	r3, r3
 80160da:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80160dc:	e7ea      	b.n	80160b4 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 80160de:	2301      	movs	r3, #1
 80160e0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80160e4:	2300      	movs	r3, #0
 80160e6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80160ea:	2603      	movs	r6, #3
 80160ec:	e045      	b.n	801617a <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80160ee:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80160f0:	7812      	ldrb	r2, [r2, #0]
 80160f2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80160f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160f6:	3301      	adds	r3, #1
 80160f8:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80160fa:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 80160fe:	fa1f fc8c 	uxth.w	ip, ip
 8016102:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8016106:	fa1f fc8c 	uxth.w	ip, ip
 801610a:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 801610e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016110:	b29b      	uxth	r3, r3
 8016112:	b1b3      	cbz	r3, 8016142 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016114:	6823      	ldr	r3, [r4, #0]
 8016116:	689a      	ldr	r2, [r3, #8]
 8016118:	f012 0f02 	tst.w	r2, #2
 801611c:	d1e7      	bne.n	80160ee <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801611e:	f7fe fc89 	bl	8014a34 <HAL_GetTick>
 8016122:	1bc0      	subs	r0, r0, r7
 8016124:	42a8      	cmp	r0, r5
 8016126:	d302      	bcc.n	801612e <HAL_SPI_Transmit+0x16c>
 8016128:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801612c:	d101      	bne.n	8016132 <HAL_SPI_Transmit+0x170>
 801612e:	2d00      	cmp	r5, #0
 8016130:	d1ed      	bne.n	801610e <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 8016132:	2301      	movs	r3, #1
 8016134:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8016138:	2300      	movs	r3, #0
 801613a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 801613e:	2603      	movs	r6, #3
 8016140:	e01b      	b.n	801617a <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016142:	463a      	mov	r2, r7
 8016144:	4629      	mov	r1, r5
 8016146:	4620      	mov	r0, r4
 8016148:	f7ff fe56 	bl	8015df8 <SPI_EndRxTxTransaction>
 801614c:	b108      	cbz	r0, 8016152 <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801614e:	2320      	movs	r3, #32
 8016150:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016152:	68a3      	ldr	r3, [r4, #8]
 8016154:	b933      	cbnz	r3, 8016164 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016156:	9301      	str	r3, [sp, #4]
 8016158:	6823      	ldr	r3, [r4, #0]
 801615a:	68da      	ldr	r2, [r3, #12]
 801615c:	9201      	str	r2, [sp, #4]
 801615e:	689b      	ldr	r3, [r3, #8]
 8016160:	9301      	str	r3, [sp, #4]
 8016162:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8016164:	2301      	movs	r3, #1
 8016166:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 801616a:	2300      	movs	r3, #0
 801616c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016170:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016172:	b913      	cbnz	r3, 801617a <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 8016174:	2600      	movs	r6, #0
 8016176:	e000      	b.n	801617a <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8016178:	2602      	movs	r6, #2
}
 801617a:	4630      	mov	r0, r6
 801617c:	b003      	add	sp, #12
 801617e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8016182:	2602      	movs	r6, #2
 8016184:	e7f9      	b.n	801617a <HAL_SPI_Transmit+0x1b8>

08016186 <HAL_SPI_TransmitReceive>:
{
 8016186:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801618a:	b083      	sub	sp, #12
 801618c:	4604      	mov	r4, r0
 801618e:	4688      	mov	r8, r1
 8016190:	4691      	mov	r9, r2
 8016192:	461f      	mov	r7, r3
 8016194:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8016196:	f7fe fc4d 	bl	8014a34 <HAL_GetTick>
 801619a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 801619c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80161a0:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80161a2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80161a4:	2b01      	cmp	r3, #1
 80161a6:	d00a      	beq.n	80161be <HAL_SPI_TransmitReceive+0x38>
 80161a8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80161ac:	f040 8105 	bne.w	80163ba <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80161b0:	68a2      	ldr	r2, [r4, #8]
 80161b2:	2a00      	cmp	r2, #0
 80161b4:	f040 8105 	bne.w	80163c2 <HAL_SPI_TransmitReceive+0x23c>
 80161b8:	2b04      	cmp	r3, #4
 80161ba:	f040 8104 	bne.w	80163c6 <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80161be:	f1b8 0f00 	cmp.w	r8, #0
 80161c2:	f000 8102 	beq.w	80163ca <HAL_SPI_TransmitReceive+0x244>
 80161c6:	f1b9 0f00 	cmp.w	r9, #0
 80161ca:	f000 8100 	beq.w	80163ce <HAL_SPI_TransmitReceive+0x248>
 80161ce:	2f00      	cmp	r7, #0
 80161d0:	f000 80ff 	beq.w	80163d2 <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 80161d4:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80161d8:	2b01      	cmp	r3, #1
 80161da:	f000 80fc 	beq.w	80163d6 <HAL_SPI_TransmitReceive+0x250>
 80161de:	2301      	movs	r3, #1
 80161e0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80161e4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80161e8:	b2db      	uxtb	r3, r3
 80161ea:	2b04      	cmp	r3, #4
 80161ec:	d002      	beq.n	80161f4 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80161ee:	2305      	movs	r3, #5
 80161f0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80161f4:	2300      	movs	r3, #0
 80161f6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80161f8:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80161fc:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80161fe:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8016200:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8016204:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8016206:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8016208:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 801620a:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801620c:	6823      	ldr	r3, [r4, #0]
 801620e:	681a      	ldr	r2, [r3, #0]
 8016210:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8016214:	d103      	bne.n	801621e <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8016216:	681a      	ldr	r2, [r3, #0]
 8016218:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801621c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801621e:	68e3      	ldr	r3, [r4, #12]
 8016220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016224:	d011      	beq.n	801624a <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016226:	6863      	ldr	r3, [r4, #4]
 8016228:	b10b      	cbz	r3, 801622e <HAL_SPI_TransmitReceive+0xa8>
 801622a:	2f01      	cmp	r7, #1
 801622c:	d10b      	bne.n	8016246 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801622e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016230:	6823      	ldr	r3, [r4, #0]
 8016232:	7812      	ldrb	r2, [r2, #0]
 8016234:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016236:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016238:	3301      	adds	r3, #1
 801623a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 801623c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801623e:	b29b      	uxth	r3, r3
 8016240:	3b01      	subs	r3, #1
 8016242:	b29b      	uxth	r3, r3
 8016244:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8016246:	2701      	movs	r7, #1
 8016248:	e071      	b.n	801632e <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801624a:	6863      	ldr	r3, [r4, #4]
 801624c:	b10b      	cbz	r3, 8016252 <HAL_SPI_TransmitReceive+0xcc>
 801624e:	2f01      	cmp	r7, #1
 8016250:	d10b      	bne.n	801626a <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8016252:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016254:	6823      	ldr	r3, [r4, #0]
 8016256:	8812      	ldrh	r2, [r2, #0]
 8016258:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801625a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801625c:	3302      	adds	r3, #2
 801625e:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8016260:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016262:	b29b      	uxth	r3, r3
 8016264:	3b01      	subs	r3, #1
 8016266:	b29b      	uxth	r3, r3
 8016268:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 801626a:	2701      	movs	r7, #1
 801626c:	e01b      	b.n	80162a6 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801626e:	6823      	ldr	r3, [r4, #0]
 8016270:	689a      	ldr	r2, [r3, #8]
 8016272:	f012 0f01 	tst.w	r2, #1
 8016276:	d00e      	beq.n	8016296 <HAL_SPI_TransmitReceive+0x110>
 8016278:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801627a:	b292      	uxth	r2, r2
 801627c:	b15a      	cbz	r2, 8016296 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801627e:	68da      	ldr	r2, [r3, #12]
 8016280:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016282:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016284:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016286:	3302      	adds	r3, #2
 8016288:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 801628a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801628c:	b29b      	uxth	r3, r3
 801628e:	3b01      	subs	r3, #1
 8016290:	b29b      	uxth	r3, r3
 8016292:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8016294:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8016296:	f7fe fbcd 	bl	8014a34 <HAL_GetTick>
 801629a:	1b80      	subs	r0, r0, r6
 801629c:	42a8      	cmp	r0, r5
 801629e:	d302      	bcc.n	80162a6 <HAL_SPI_TransmitReceive+0x120>
 80162a0:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80162a4:	d11e      	bne.n	80162e4 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80162a6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80162a8:	b29b      	uxth	r3, r3
 80162aa:	b91b      	cbnz	r3, 80162b4 <HAL_SPI_TransmitReceive+0x12e>
 80162ac:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d062      	beq.n	801637a <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80162b4:	6823      	ldr	r3, [r4, #0]
 80162b6:	689a      	ldr	r2, [r3, #8]
 80162b8:	f012 0f02 	tst.w	r2, #2
 80162bc:	d0d7      	beq.n	801626e <HAL_SPI_TransmitReceive+0xe8>
 80162be:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80162c0:	b292      	uxth	r2, r2
 80162c2:	2a00      	cmp	r2, #0
 80162c4:	d0d3      	beq.n	801626e <HAL_SPI_TransmitReceive+0xe8>
 80162c6:	2f00      	cmp	r7, #0
 80162c8:	d0d1      	beq.n	801626e <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80162ca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80162cc:	8812      	ldrh	r2, [r2, #0]
 80162ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80162d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80162d2:	3302      	adds	r3, #2
 80162d4:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80162d6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80162d8:	b29b      	uxth	r3, r3
 80162da:	3b01      	subs	r3, #1
 80162dc:	b29b      	uxth	r3, r3
 80162de:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80162e0:	2700      	movs	r7, #0
 80162e2:	e7c4      	b.n	801626e <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 80162e4:	2301      	movs	r3, #1
 80162e6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80162ea:	2300      	movs	r3, #0
 80162ec:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 80162f0:	2003      	movs	r0, #3
 80162f2:	e063      	b.n	80163bc <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80162f4:	6823      	ldr	r3, [r4, #0]
 80162f6:	689a      	ldr	r2, [r3, #8]
 80162f8:	f012 0f01 	tst.w	r2, #1
 80162fc:	d00e      	beq.n	801631c <HAL_SPI_TransmitReceive+0x196>
 80162fe:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8016300:	b292      	uxth	r2, r2
 8016302:	b15a      	cbz	r2, 801631c <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8016304:	68da      	ldr	r2, [r3, #12]
 8016306:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016308:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801630a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801630c:	3301      	adds	r3, #1
 801630e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8016310:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016312:	b29b      	uxth	r3, r3
 8016314:	3b01      	subs	r3, #1
 8016316:	b29b      	uxth	r3, r3
 8016318:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 801631a:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801631c:	f7fe fb8a 	bl	8014a34 <HAL_GetTick>
 8016320:	1b83      	subs	r3, r0, r6
 8016322:	42ab      	cmp	r3, r5
 8016324:	d302      	bcc.n	801632c <HAL_SPI_TransmitReceive+0x1a6>
 8016326:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801632a:	d11e      	bne.n	801636a <HAL_SPI_TransmitReceive+0x1e4>
 801632c:	b1ed      	cbz	r5, 801636a <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801632e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016330:	b29b      	uxth	r3, r3
 8016332:	b913      	cbnz	r3, 801633a <HAL_SPI_TransmitReceive+0x1b4>
 8016334:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8016336:	b29b      	uxth	r3, r3
 8016338:	b1fb      	cbz	r3, 801637a <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801633a:	6823      	ldr	r3, [r4, #0]
 801633c:	689a      	ldr	r2, [r3, #8]
 801633e:	f012 0f02 	tst.w	r2, #2
 8016342:	d0d7      	beq.n	80162f4 <HAL_SPI_TransmitReceive+0x16e>
 8016344:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016346:	b292      	uxth	r2, r2
 8016348:	2a00      	cmp	r2, #0
 801634a:	d0d3      	beq.n	80162f4 <HAL_SPI_TransmitReceive+0x16e>
 801634c:	2f00      	cmp	r7, #0
 801634e:	d0d1      	beq.n	80162f4 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8016350:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016352:	7812      	ldrb	r2, [r2, #0]
 8016354:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8016356:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016358:	3301      	adds	r3, #1
 801635a:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 801635c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801635e:	b29b      	uxth	r3, r3
 8016360:	3b01      	subs	r3, #1
 8016362:	b29b      	uxth	r3, r3
 8016364:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8016366:	2700      	movs	r7, #0
 8016368:	e7c4      	b.n	80162f4 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 801636a:	2301      	movs	r3, #1
 801636c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8016370:	2300      	movs	r3, #0
 8016372:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8016376:	2003      	movs	r0, #3
 8016378:	e020      	b.n	80163bc <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801637a:	4632      	mov	r2, r6
 801637c:	4629      	mov	r1, r5
 801637e:	4620      	mov	r0, r4
 8016380:	f7ff fd3a 	bl	8015df8 <SPI_EndRxTxTransaction>
 8016384:	b990      	cbnz	r0, 80163ac <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016386:	68a3      	ldr	r3, [r4, #8]
 8016388:	b933      	cbnz	r3, 8016398 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801638a:	9301      	str	r3, [sp, #4]
 801638c:	6823      	ldr	r3, [r4, #0]
 801638e:	68da      	ldr	r2, [r3, #12]
 8016390:	9201      	str	r2, [sp, #4]
 8016392:	689b      	ldr	r3, [r3, #8]
 8016394:	9301      	str	r3, [sp, #4]
 8016396:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8016398:	2301      	movs	r3, #1
 801639a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 801639e:	2300      	movs	r3, #0
 80163a0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80163a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80163a6:	b14b      	cbz	r3, 80163bc <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 80163a8:	2001      	movs	r0, #1
 80163aa:	e007      	b.n	80163bc <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80163ac:	2320      	movs	r3, #32
 80163ae:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80163b0:	2300      	movs	r3, #0
 80163b2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80163b6:	2001      	movs	r0, #1
 80163b8:	e000      	b.n	80163bc <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 80163ba:	2002      	movs	r0, #2
}
 80163bc:	b003      	add	sp, #12
 80163be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80163c2:	2002      	movs	r0, #2
 80163c4:	e7fa      	b.n	80163bc <HAL_SPI_TransmitReceive+0x236>
 80163c6:	2002      	movs	r0, #2
 80163c8:	e7f8      	b.n	80163bc <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 80163ca:	2001      	movs	r0, #1
 80163cc:	e7f6      	b.n	80163bc <HAL_SPI_TransmitReceive+0x236>
 80163ce:	2001      	movs	r0, #1
 80163d0:	e7f4      	b.n	80163bc <HAL_SPI_TransmitReceive+0x236>
 80163d2:	2001      	movs	r0, #1
 80163d4:	e7f2      	b.n	80163bc <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 80163d6:	2002      	movs	r0, #2
 80163d8:	e7f0      	b.n	80163bc <HAL_SPI_TransmitReceive+0x236>

080163da <HAL_SPI_Receive>:
{
 80163da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163de:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 80163e0:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 80163e4:	b2f6      	uxtb	r6, r6
 80163e6:	2e01      	cmp	r6, #1
 80163e8:	f040 80b4 	bne.w	8016554 <HAL_SPI_Receive+0x17a>
 80163ec:	4604      	mov	r4, r0
 80163ee:	4689      	mov	r9, r1
 80163f0:	4690      	mov	r8, r2
 80163f2:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80163f4:	6843      	ldr	r3, [r0, #4]
 80163f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80163fa:	d101      	bne.n	8016400 <HAL_SPI_Receive+0x26>
 80163fc:	6883      	ldr	r3, [r0, #8]
 80163fe:	b393      	cbz	r3, 8016466 <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 8016400:	f7fe fb18 	bl	8014a34 <HAL_GetTick>
 8016404:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8016406:	f1b9 0f00 	cmp.w	r9, #0
 801640a:	f000 80a4 	beq.w	8016556 <HAL_SPI_Receive+0x17c>
 801640e:	f1b8 0f00 	cmp.w	r8, #0
 8016412:	f000 80a0 	beq.w	8016556 <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 8016416:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 801641a:	2b01      	cmp	r3, #1
 801641c:	f000 809f 	beq.w	801655e <HAL_SPI_Receive+0x184>
 8016420:	2301      	movs	r3, #1
 8016422:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8016426:	2304      	movs	r3, #4
 8016428:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801642c:	2300      	movs	r3, #0
 801642e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8016430:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8016434:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8016438:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801643c:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 801643e:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8016440:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8016442:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8016444:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016446:	68a3      	ldr	r3, [r4, #8]
 8016448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801644c:	d015      	beq.n	801647a <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801644e:	6823      	ldr	r3, [r4, #0]
 8016450:	681a      	ldr	r2, [r3, #0]
 8016452:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8016456:	d103      	bne.n	8016460 <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 8016458:	681a      	ldr	r2, [r3, #0]
 801645a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801645e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8016460:	68e3      	ldr	r3, [r4, #12]
 8016462:	b1f3      	cbz	r3, 80164a2 <HAL_SPI_Receive+0xc8>
 8016464:	e043      	b.n	80164ee <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8016466:	2304      	movs	r3, #4
 8016468:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801646c:	9500      	str	r5, [sp, #0]
 801646e:	4613      	mov	r3, r2
 8016470:	460a      	mov	r2, r1
 8016472:	f7ff fe88 	bl	8016186 <HAL_SPI_TransmitReceive>
 8016476:	4606      	mov	r6, r0
 8016478:	e06d      	b.n	8016556 <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 801647a:	6822      	ldr	r2, [r4, #0]
 801647c:	6813      	ldr	r3, [r2, #0]
 801647e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016482:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8016484:	6822      	ldr	r2, [r4, #0]
 8016486:	6813      	ldr	r3, [r2, #0]
 8016488:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801648c:	6013      	str	r3, [r2, #0]
 801648e:	e7de      	b.n	801644e <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016490:	f7fe fad0 	bl	8014a34 <HAL_GetTick>
 8016494:	1bc0      	subs	r0, r0, r7
 8016496:	42a8      	cmp	r0, r5
 8016498:	d302      	bcc.n	80164a0 <HAL_SPI_Receive+0xc6>
 801649a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801649e:	d115      	bne.n	80164cc <HAL_SPI_Receive+0xf2>
 80164a0:	b1a5      	cbz	r5, 80164cc <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 80164a2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80164a4:	b29b      	uxth	r3, r3
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d042      	beq.n	8016530 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80164aa:	6823      	ldr	r3, [r4, #0]
 80164ac:	689a      	ldr	r2, [r3, #8]
 80164ae:	f012 0f01 	tst.w	r2, #1
 80164b2:	d0ed      	beq.n	8016490 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80164b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80164b6:	7b1b      	ldrb	r3, [r3, #12]
 80164b8:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80164ba:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80164bc:	3301      	adds	r3, #1
 80164be:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80164c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80164c2:	b29b      	uxth	r3, r3
 80164c4:	3b01      	subs	r3, #1
 80164c6:	b29b      	uxth	r3, r3
 80164c8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80164ca:	e7ea      	b.n	80164a2 <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 80164cc:	2301      	movs	r3, #1
 80164ce:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80164d2:	2300      	movs	r3, #0
 80164d4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80164d8:	2603      	movs	r6, #3
 80164da:	e03c      	b.n	8016556 <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80164dc:	f7fe faaa 	bl	8014a34 <HAL_GetTick>
 80164e0:	1bc0      	subs	r0, r0, r7
 80164e2:	42a8      	cmp	r0, r5
 80164e4:	d302      	bcc.n	80164ec <HAL_SPI_Receive+0x112>
 80164e6:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80164ea:	d119      	bne.n	8016520 <HAL_SPI_Receive+0x146>
 80164ec:	b1c5      	cbz	r5, 8016520 <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 80164ee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80164f0:	b29b      	uxth	r3, r3
 80164f2:	b1eb      	cbz	r3, 8016530 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80164f4:	6823      	ldr	r3, [r4, #0]
 80164f6:	689a      	ldr	r2, [r3, #8]
 80164f8:	f012 0f01 	tst.w	r2, #1
 80164fc:	d0ee      	beq.n	80164dc <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80164fe:	68da      	ldr	r2, [r3, #12]
 8016500:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016502:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016504:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016506:	3302      	adds	r3, #2
 8016508:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 801650a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 801650e:	fa1f fc8c 	uxth.w	ip, ip
 8016512:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8016516:	fa1f fc8c 	uxth.w	ip, ip
 801651a:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 801651e:	e7e6      	b.n	80164ee <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8016520:	2301      	movs	r3, #1
 8016522:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8016526:	2300      	movs	r3, #0
 8016528:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 801652c:	2603      	movs	r6, #3
 801652e:	e012      	b.n	8016556 <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016530:	463a      	mov	r2, r7
 8016532:	4629      	mov	r1, r5
 8016534:	4620      	mov	r0, r4
 8016536:	f7ff fc9f 	bl	8015e78 <SPI_EndRxTransaction>
 801653a:	b108      	cbz	r0, 8016540 <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801653c:	2320      	movs	r3, #32
 801653e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8016540:	2301      	movs	r3, #1
 8016542:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8016546:	2300      	movs	r3, #0
 8016548:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801654c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801654e:	b913      	cbnz	r3, 8016556 <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 8016550:	2600      	movs	r6, #0
 8016552:	e000      	b.n	8016556 <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 8016554:	2602      	movs	r6, #2
}
 8016556:	4630      	mov	r0, r6
 8016558:	b003      	add	sp, #12
 801655a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 801655e:	2602      	movs	r6, #2
 8016560:	e7f9      	b.n	8016556 <HAL_SPI_Receive+0x17c>

08016562 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8016562:	4770      	bx	lr

08016564 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016564:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8016568:	b2db      	uxtb	r3, r3
 801656a:	2b01      	cmp	r3, #1
 801656c:	d12f      	bne.n	80165ce <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801656e:	2302      	movs	r3, #2
 8016570:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016574:	6802      	ldr	r2, [r0, #0]
 8016576:	68d3      	ldr	r3, [r2, #12]
 8016578:	f043 0301 	orr.w	r3, r3, #1
 801657c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801657e:	6803      	ldr	r3, [r0, #0]
 8016580:	4a15      	ldr	r2, [pc, #84]	@ (80165d8 <HAL_TIM_Base_Start_IT+0x74>)
 8016582:	4293      	cmp	r3, r2
 8016584:	d018      	beq.n	80165b8 <HAL_TIM_Base_Start_IT+0x54>
 8016586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801658a:	d015      	beq.n	80165b8 <HAL_TIM_Base_Start_IT+0x54>
 801658c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8016590:	4293      	cmp	r3, r2
 8016592:	d011      	beq.n	80165b8 <HAL_TIM_Base_Start_IT+0x54>
 8016594:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016598:	4293      	cmp	r3, r2
 801659a:	d00d      	beq.n	80165b8 <HAL_TIM_Base_Start_IT+0x54>
 801659c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80165a0:	4293      	cmp	r3, r2
 80165a2:	d009      	beq.n	80165b8 <HAL_TIM_Base_Start_IT+0x54>
 80165a4:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80165a8:	4293      	cmp	r3, r2
 80165aa:	d005      	beq.n	80165b8 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80165ac:	681a      	ldr	r2, [r3, #0]
 80165ae:	f042 0201 	orr.w	r2, r2, #1
 80165b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80165b4:	2000      	movs	r0, #0
 80165b6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80165b8:	689a      	ldr	r2, [r3, #8]
 80165ba:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80165be:	2a06      	cmp	r2, #6
 80165c0:	d007      	beq.n	80165d2 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 80165c2:	681a      	ldr	r2, [r3, #0]
 80165c4:	f042 0201 	orr.w	r2, r2, #1
 80165c8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80165ca:	2000      	movs	r0, #0
 80165cc:	4770      	bx	lr
    return HAL_ERROR;
 80165ce:	2001      	movs	r0, #1
 80165d0:	4770      	bx	lr
  return HAL_OK;
 80165d2:	2000      	movs	r0, #0
}
 80165d4:	4770      	bx	lr
 80165d6:	bf00      	nop
 80165d8:	40010000 	.word	0x40010000

080165dc <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80165dc:	4770      	bx	lr

080165de <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80165de:	4770      	bx	lr

080165e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80165e0:	4770      	bx	lr

080165e2 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80165e2:	4770      	bx	lr

080165e4 <HAL_TIM_IRQHandler>:
{
 80165e4:	b570      	push	{r4, r5, r6, lr}
 80165e6:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80165e8:	6803      	ldr	r3, [r0, #0]
 80165ea:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80165ec:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80165ee:	f015 0f02 	tst.w	r5, #2
 80165f2:	d010      	beq.n	8016616 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80165f4:	f016 0f02 	tst.w	r6, #2
 80165f8:	d00d      	beq.n	8016616 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80165fa:	f06f 0202 	mvn.w	r2, #2
 80165fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016600:	2301      	movs	r3, #1
 8016602:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016604:	6803      	ldr	r3, [r0, #0]
 8016606:	699b      	ldr	r3, [r3, #24]
 8016608:	f013 0f03 	tst.w	r3, #3
 801660c:	d05e      	beq.n	80166cc <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 801660e:	f7ff ffe6 	bl	80165de <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016612:	2300      	movs	r3, #0
 8016614:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8016616:	f015 0f04 	tst.w	r5, #4
 801661a:	d012      	beq.n	8016642 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801661c:	f016 0f04 	tst.w	r6, #4
 8016620:	d00f      	beq.n	8016642 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8016622:	6823      	ldr	r3, [r4, #0]
 8016624:	f06f 0204 	mvn.w	r2, #4
 8016628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801662a:	2302      	movs	r3, #2
 801662c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801662e:	6823      	ldr	r3, [r4, #0]
 8016630:	699b      	ldr	r3, [r3, #24]
 8016632:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8016636:	d04f      	beq.n	80166d8 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8016638:	4620      	mov	r0, r4
 801663a:	f7ff ffd0 	bl	80165de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801663e:	2300      	movs	r3, #0
 8016640:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8016642:	f015 0f08 	tst.w	r5, #8
 8016646:	d012      	beq.n	801666e <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8016648:	f016 0f08 	tst.w	r6, #8
 801664c:	d00f      	beq.n	801666e <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801664e:	6823      	ldr	r3, [r4, #0]
 8016650:	f06f 0208 	mvn.w	r2, #8
 8016654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016656:	2304      	movs	r3, #4
 8016658:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801665a:	6823      	ldr	r3, [r4, #0]
 801665c:	69db      	ldr	r3, [r3, #28]
 801665e:	f013 0f03 	tst.w	r3, #3
 8016662:	d040      	beq.n	80166e6 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8016664:	4620      	mov	r0, r4
 8016666:	f7ff ffba 	bl	80165de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801666a:	2300      	movs	r3, #0
 801666c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801666e:	f015 0f10 	tst.w	r5, #16
 8016672:	d012      	beq.n	801669a <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016674:	f016 0f10 	tst.w	r6, #16
 8016678:	d00f      	beq.n	801669a <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801667a:	6823      	ldr	r3, [r4, #0]
 801667c:	f06f 0210 	mvn.w	r2, #16
 8016680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016682:	2308      	movs	r3, #8
 8016684:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016686:	6823      	ldr	r3, [r4, #0]
 8016688:	69db      	ldr	r3, [r3, #28]
 801668a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 801668e:	d031      	beq.n	80166f4 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8016690:	4620      	mov	r0, r4
 8016692:	f7ff ffa4 	bl	80165de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016696:	2300      	movs	r3, #0
 8016698:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801669a:	f015 0f01 	tst.w	r5, #1
 801669e:	d002      	beq.n	80166a6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80166a0:	f016 0f01 	tst.w	r6, #1
 80166a4:	d12d      	bne.n	8016702 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80166a6:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80166aa:	d002      	beq.n	80166b2 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80166ac:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80166b0:	d12f      	bne.n	8016712 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80166b2:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80166b6:	d002      	beq.n	80166be <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80166b8:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80166bc:	d131      	bne.n	8016722 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80166be:	f015 0f20 	tst.w	r5, #32
 80166c2:	d002      	beq.n	80166ca <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80166c4:	f016 0f20 	tst.w	r6, #32
 80166c8:	d133      	bne.n	8016732 <HAL_TIM_IRQHandler+0x14e>
}
 80166ca:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80166cc:	f7ff ff86 	bl	80165dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80166d0:	4620      	mov	r0, r4
 80166d2:	f7ff ff85 	bl	80165e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80166d6:	e79c      	b.n	8016612 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80166d8:	4620      	mov	r0, r4
 80166da:	f7ff ff7f 	bl	80165dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80166de:	4620      	mov	r0, r4
 80166e0:	f7ff ff7e 	bl	80165e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80166e4:	e7ab      	b.n	801663e <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80166e6:	4620      	mov	r0, r4
 80166e8:	f7ff ff78 	bl	80165dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80166ec:	4620      	mov	r0, r4
 80166ee:	f7ff ff77 	bl	80165e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80166f2:	e7ba      	b.n	801666a <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80166f4:	4620      	mov	r0, r4
 80166f6:	f7ff ff71 	bl	80165dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80166fa:	4620      	mov	r0, r4
 80166fc:	f7ff ff70 	bl	80165e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8016700:	e7c9      	b.n	8016696 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8016702:	6823      	ldr	r3, [r4, #0]
 8016704:	f06f 0201 	mvn.w	r2, #1
 8016708:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801670a:	4620      	mov	r0, r4
 801670c:	f7fb fb56 	bl	8011dbc <HAL_TIM_PeriodElapsedCallback>
 8016710:	e7c9      	b.n	80166a6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8016712:	6823      	ldr	r3, [r4, #0]
 8016714:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8016718:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801671a:	4620      	mov	r0, r4
 801671c:	f000 f895 	bl	801684a <HAL_TIMEx_BreakCallback>
 8016720:	e7c7      	b.n	80166b2 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016722:	6823      	ldr	r3, [r4, #0]
 8016724:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016728:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801672a:	4620      	mov	r0, r4
 801672c:	f7ff ff59 	bl	80165e2 <HAL_TIM_TriggerCallback>
 8016730:	e7c5      	b.n	80166be <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016732:	6823      	ldr	r3, [r4, #0]
 8016734:	f06f 0220 	mvn.w	r2, #32
 8016738:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 801673a:	4620      	mov	r0, r4
 801673c:	f000 f884 	bl	8016848 <HAL_TIMEx_CommutCallback>
}
 8016740:	e7c3      	b.n	80166ca <HAL_TIM_IRQHandler+0xe6>
	...

08016744 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016744:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016746:	4a29      	ldr	r2, [pc, #164]	@ (80167ec <TIM_Base_SetConfig+0xa8>)
 8016748:	4290      	cmp	r0, r2
 801674a:	d00e      	beq.n	801676a <TIM_Base_SetConfig+0x26>
 801674c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8016750:	d00b      	beq.n	801676a <TIM_Base_SetConfig+0x26>
 8016752:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8016756:	4290      	cmp	r0, r2
 8016758:	d007      	beq.n	801676a <TIM_Base_SetConfig+0x26>
 801675a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801675e:	4290      	cmp	r0, r2
 8016760:	d003      	beq.n	801676a <TIM_Base_SetConfig+0x26>
 8016762:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016766:	4290      	cmp	r0, r2
 8016768:	d103      	bne.n	8016772 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801676a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 801676e:	684a      	ldr	r2, [r1, #4]
 8016770:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016772:	4a1e      	ldr	r2, [pc, #120]	@ (80167ec <TIM_Base_SetConfig+0xa8>)
 8016774:	4290      	cmp	r0, r2
 8016776:	d01a      	beq.n	80167ae <TIM_Base_SetConfig+0x6a>
 8016778:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801677c:	d017      	beq.n	80167ae <TIM_Base_SetConfig+0x6a>
 801677e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8016782:	4290      	cmp	r0, r2
 8016784:	d013      	beq.n	80167ae <TIM_Base_SetConfig+0x6a>
 8016786:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801678a:	4290      	cmp	r0, r2
 801678c:	d00f      	beq.n	80167ae <TIM_Base_SetConfig+0x6a>
 801678e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016792:	4290      	cmp	r0, r2
 8016794:	d00b      	beq.n	80167ae <TIM_Base_SetConfig+0x6a>
 8016796:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 801679a:	4290      	cmp	r0, r2
 801679c:	d007      	beq.n	80167ae <TIM_Base_SetConfig+0x6a>
 801679e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80167a2:	4290      	cmp	r0, r2
 80167a4:	d003      	beq.n	80167ae <TIM_Base_SetConfig+0x6a>
 80167a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80167aa:	4290      	cmp	r0, r2
 80167ac:	d103      	bne.n	80167b6 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80167ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80167b2:	68ca      	ldr	r2, [r1, #12]
 80167b4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80167b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80167ba:	694a      	ldr	r2, [r1, #20]
 80167bc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80167be:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80167c0:	688b      	ldr	r3, [r1, #8]
 80167c2:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80167c4:	680b      	ldr	r3, [r1, #0]
 80167c6:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80167c8:	4b08      	ldr	r3, [pc, #32]	@ (80167ec <TIM_Base_SetConfig+0xa8>)
 80167ca:	4298      	cmp	r0, r3
 80167cc:	d00a      	beq.n	80167e4 <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80167ce:	2301      	movs	r3, #1
 80167d0:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80167d2:	6903      	ldr	r3, [r0, #16]
 80167d4:	f013 0f01 	tst.w	r3, #1
 80167d8:	d003      	beq.n	80167e2 <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80167da:	6903      	ldr	r3, [r0, #16]
 80167dc:	f023 0301 	bic.w	r3, r3, #1
 80167e0:	6103      	str	r3, [r0, #16]
  }
}
 80167e2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80167e4:	690b      	ldr	r3, [r1, #16]
 80167e6:	6303      	str	r3, [r0, #48]	@ 0x30
 80167e8:	e7f1      	b.n	80167ce <TIM_Base_SetConfig+0x8a>
 80167ea:	bf00      	nop
 80167ec:	40010000 	.word	0x40010000

080167f0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80167f0:	b340      	cbz	r0, 8016844 <HAL_TIM_Base_Init+0x54>
{
 80167f2:	b510      	push	{r4, lr}
 80167f4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80167f6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80167fa:	b1f3      	cbz	r3, 801683a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80167fc:	2302      	movs	r3, #2
 80167fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016802:	4621      	mov	r1, r4
 8016804:	f851 0b04 	ldr.w	r0, [r1], #4
 8016808:	f7ff ff9c 	bl	8016744 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801680c:	2301      	movs	r3, #1
 801680e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016812:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8016816:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 801681a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 801681e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016822:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801682a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801682e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8016832:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8016836:	2000      	movs	r0, #0
}
 8016838:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 801683a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 801683e:	f7ff fe90 	bl	8016562 <HAL_TIM_Base_MspInit>
 8016842:	e7db      	b.n	80167fc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8016844:	2001      	movs	r0, #1
}
 8016846:	4770      	bx	lr

08016848 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8016848:	4770      	bx	lr

0801684a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801684a:	4770      	bx	lr

0801684c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 801684c:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 801684e:	b930      	cbnz	r0, 801685e <SSD1306_Fill+0x12>
 8016850:	2100      	movs	r1, #0
 8016852:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8016856:	4803      	ldr	r0, [pc, #12]	@ (8016864 <SSD1306_Fill+0x18>)
 8016858:	f013 f942 	bl	8029ae0 <memset>
}
 801685c:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 801685e:	21ff      	movs	r1, #255	@ 0xff
 8016860:	e7f7      	b.n	8016852 <SSD1306_Fill+0x6>
 8016862:	bf00      	nop
 8016864:	20000aa8 	.word	0x20000aa8

08016868 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8016868:	287f      	cmp	r0, #127	@ 0x7f
 801686a:	d825      	bhi.n	80168b8 <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 801686c:	293f      	cmp	r1, #63	@ 0x3f
 801686e:	d823      	bhi.n	80168b8 <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8016870:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8016872:	4b12      	ldr	r3, [pc, #72]	@ (80168bc <SSD1306_DrawPixel+0x54>)
 8016874:	791b      	ldrb	r3, [r3, #4]
 8016876:	b113      	cbz	r3, 801687e <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 8016878:	fab2 f282 	clz	r2, r2
 801687c:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 801687e:	2a01      	cmp	r2, #1
 8016880:	d00f      	beq.n	80168a2 <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8016882:	08cb      	lsrs	r3, r1, #3
 8016884:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8016888:	4c0d      	ldr	r4, [pc, #52]	@ (80168c0 <SSD1306_DrawPixel+0x58>)
 801688a:	5c22      	ldrb	r2, [r4, r0]
 801688c:	f001 0107 	and.w	r1, r1, #7
 8016890:	2301      	movs	r3, #1
 8016892:	408b      	lsls	r3, r1
 8016894:	43db      	mvns	r3, r3
 8016896:	b25b      	sxtb	r3, r3
 8016898:	4013      	ands	r3, r2
 801689a:	5423      	strb	r3, [r4, r0]
	}
}
 801689c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168a0:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80168a2:	08cb      	lsrs	r3, r1, #3
 80168a4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80168a8:	4c05      	ldr	r4, [pc, #20]	@ (80168c0 <SSD1306_DrawPixel+0x58>)
 80168aa:	5c23      	ldrb	r3, [r4, r0]
 80168ac:	f001 0107 	and.w	r1, r1, #7
 80168b0:	408a      	lsls	r2, r1
 80168b2:	4313      	orrs	r3, r2
 80168b4:	5423      	strb	r3, [r4, r0]
 80168b6:	e7f1      	b.n	801689c <SSD1306_DrawPixel+0x34>
 80168b8:	4770      	bx	lr
 80168ba:	bf00      	nop
 80168bc:	20000aa0 	.word	0x20000aa0
 80168c0:	20000aa8 	.word	0x20000aa8

080168c4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80168c4:	4b01      	ldr	r3, [pc, #4]	@ (80168cc <SSD1306_GotoXY+0x8>)
 80168c6:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80168c8:	8059      	strh	r1, [r3, #2]
}
 80168ca:	4770      	bx	lr
 80168cc:	20000aa0 	.word	0x20000aa0

080168d0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80168d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168d4:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80168d6:	4b24      	ldr	r3, [pc, #144]	@ (8016968 <SSD1306_Putc+0x98>)
 80168d8:	881b      	ldrh	r3, [r3, #0]
 80168da:	780a      	ldrb	r2, [r1, #0]
 80168dc:	4413      	add	r3, r2
	if (
 80168de:	2b7f      	cmp	r3, #127	@ 0x7f
 80168e0:	dc3e      	bgt.n	8016960 <SSD1306_Putc+0x90>
 80168e2:	4681      	mov	r9, r0
 80168e4:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80168e6:	4b20      	ldr	r3, [pc, #128]	@ (8016968 <SSD1306_Putc+0x98>)
 80168e8:	885b      	ldrh	r3, [r3, #2]
 80168ea:	784a      	ldrb	r2, [r1, #1]
 80168ec:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80168ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80168f0:	dc38      	bgt.n	8016964 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80168f2:	2600      	movs	r6, #0
 80168f4:	e020      	b.n	8016938 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80168f6:	4b1c      	ldr	r3, [pc, #112]	@ (8016968 <SSD1306_Putc+0x98>)
 80168f8:	8818      	ldrh	r0, [r3, #0]
 80168fa:	8859      	ldrh	r1, [r3, #2]
 80168fc:	4431      	add	r1, r6
 80168fe:	4420      	add	r0, r4
 8016900:	fab8 f288 	clz	r2, r8
 8016904:	0952      	lsrs	r2, r2, #5
 8016906:	b289      	uxth	r1, r1
 8016908:	b280      	uxth	r0, r0
 801690a:	f7ff ffad 	bl	8016868 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 801690e:	3401      	adds	r4, #1
 8016910:	782b      	ldrb	r3, [r5, #0]
 8016912:	42a3      	cmp	r3, r4
 8016914:	d90f      	bls.n	8016936 <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 8016916:	fa07 f304 	lsl.w	r3, r7, r4
 801691a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 801691e:	d0ea      	beq.n	80168f6 <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8016920:	4b11      	ldr	r3, [pc, #68]	@ (8016968 <SSD1306_Putc+0x98>)
 8016922:	8818      	ldrh	r0, [r3, #0]
 8016924:	8859      	ldrh	r1, [r3, #2]
 8016926:	4431      	add	r1, r6
 8016928:	4420      	add	r0, r4
 801692a:	4642      	mov	r2, r8
 801692c:	b289      	uxth	r1, r1
 801692e:	b280      	uxth	r0, r0
 8016930:	f7ff ff9a 	bl	8016868 <SSD1306_DrawPixel>
 8016934:	e7eb      	b.n	801690e <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8016936:	3601      	adds	r6, #1
 8016938:	786a      	ldrb	r2, [r5, #1]
 801693a:	42b2      	cmp	r2, r6
 801693c:	d908      	bls.n	8016950 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 801693e:	6869      	ldr	r1, [r5, #4]
 8016940:	f1a9 0320 	sub.w	r3, r9, #32
 8016944:	fb02 6303 	mla	r3, r2, r3, r6
 8016948:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 801694c:	2400      	movs	r4, #0
 801694e:	e7df      	b.n	8016910 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8016950:	4a05      	ldr	r2, [pc, #20]	@ (8016968 <SSD1306_Putc+0x98>)
 8016952:	8813      	ldrh	r3, [r2, #0]
 8016954:	7829      	ldrb	r1, [r5, #0]
 8016956:	440b      	add	r3, r1
 8016958:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 801695a:	4648      	mov	r0, r9
}
 801695c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8016960:	2000      	movs	r0, #0
 8016962:	e7fb      	b.n	801695c <SSD1306_Putc+0x8c>
 8016964:	2000      	movs	r0, #0
 8016966:	e7f9      	b.n	801695c <SSD1306_Putc+0x8c>
 8016968:	20000aa0 	.word	0x20000aa0

0801696c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 801696c:	b570      	push	{r4, r5, r6, lr}
 801696e:	4604      	mov	r4, r0
 8016970:	460e      	mov	r6, r1
 8016972:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8016974:	e000      	b.n	8016978 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 8016976:	3401      	adds	r4, #1
	while (*str) {
 8016978:	7820      	ldrb	r0, [r4, #0]
 801697a:	b138      	cbz	r0, 801698c <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 801697c:	462a      	mov	r2, r5
 801697e:	4631      	mov	r1, r6
 8016980:	f7ff ffa6 	bl	80168d0 <SSD1306_Putc>
 8016984:	4603      	mov	r3, r0
 8016986:	7820      	ldrb	r0, [r4, #0]
 8016988:	4283      	cmp	r3, r0
 801698a:	d0f4      	beq.n	8016976 <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 801698c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016990 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8016990:	b500      	push	{lr}
 8016992:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 8016994:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8016998:	f04f 0c00 	mov.w	ip, #0
 801699c:	e009      	b.n	80169b2 <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 801699e:	f10c 0e01 	add.w	lr, ip, #1
 80169a2:	f812 100c 	ldrb.w	r1, [r2, ip]
 80169a6:	f10d 0c08 	add.w	ip, sp, #8
 80169aa:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 80169ae:	fa5f fc8e 	uxtb.w	ip, lr
 80169b2:	459c      	cmp	ip, r3
 80169b4:	d3f3      	bcc.n	801699e <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80169b6:	3301      	adds	r3, #1
 80169b8:	220a      	movs	r2, #10
 80169ba:	9200      	str	r2, [sp, #0]
 80169bc:	b29b      	uxth	r3, r3
 80169be:	aa02      	add	r2, sp, #8
 80169c0:	4601      	mov	r1, r0
 80169c2:	4803      	ldr	r0, [pc, #12]	@ (80169d0 <ssd1306_I2C_WriteMulti+0x40>)
 80169c4:	f7fe fcd0 	bl	8015368 <HAL_I2C_Master_Transmit>
}
 80169c8:	b043      	add	sp, #268	@ 0x10c
 80169ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80169ce:	bf00      	nop
 80169d0:	2000083c 	.word	0x2000083c

080169d4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80169d4:	b500      	push	{lr}
 80169d6:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 80169d8:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 80169dc:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80169e0:	230a      	movs	r3, #10
 80169e2:	9300      	str	r3, [sp, #0]
 80169e4:	2302      	movs	r3, #2
 80169e6:	aa03      	add	r2, sp, #12
 80169e8:	4601      	mov	r1, r0
 80169ea:	4803      	ldr	r0, [pc, #12]	@ (80169f8 <ssd1306_I2C_Write+0x24>)
 80169ec:	f7fe fcbc 	bl	8015368 <HAL_I2C_Master_Transmit>
}
 80169f0:	b005      	add	sp, #20
 80169f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80169f6:	bf00      	nop
 80169f8:	2000083c 	.word	0x2000083c

080169fc <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80169fc:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80169fe:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8016a02:	2201      	movs	r2, #1
 8016a04:	2178      	movs	r1, #120	@ 0x78
 8016a06:	4850      	ldr	r0, [pc, #320]	@ (8016b48 <SSD1306_Init+0x14c>)
 8016a08:	f7fe fd6a 	bl	80154e0 <HAL_I2C_IsDeviceReady>
 8016a0c:	2800      	cmp	r0, #0
 8016a0e:	f040 8099 	bne.w	8016b44 <SSD1306_Init+0x148>
	uint32_t p = 2500;
 8016a12:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8016a16:	e000      	b.n	8016a1a <SSD1306_Init+0x1e>
		p--;
 8016a18:	3b01      	subs	r3, #1
	while(p>0)
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d1fc      	bne.n	8016a18 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8016a1e:	22ae      	movs	r2, #174	@ 0xae
 8016a20:	2100      	movs	r1, #0
 8016a22:	2078      	movs	r0, #120	@ 0x78
 8016a24:	f7ff ffd6 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8016a28:	2220      	movs	r2, #32
 8016a2a:	2100      	movs	r1, #0
 8016a2c:	2078      	movs	r0, #120	@ 0x78
 8016a2e:	f7ff ffd1 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8016a32:	2210      	movs	r2, #16
 8016a34:	2100      	movs	r1, #0
 8016a36:	2078      	movs	r0, #120	@ 0x78
 8016a38:	f7ff ffcc 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8016a3c:	22b0      	movs	r2, #176	@ 0xb0
 8016a3e:	2100      	movs	r1, #0
 8016a40:	2078      	movs	r0, #120	@ 0x78
 8016a42:	f7ff ffc7 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8016a46:	22c8      	movs	r2, #200	@ 0xc8
 8016a48:	2100      	movs	r1, #0
 8016a4a:	2078      	movs	r0, #120	@ 0x78
 8016a4c:	f7ff ffc2 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8016a50:	2200      	movs	r2, #0
 8016a52:	4611      	mov	r1, r2
 8016a54:	2078      	movs	r0, #120	@ 0x78
 8016a56:	f7ff ffbd 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8016a5a:	2210      	movs	r2, #16
 8016a5c:	2100      	movs	r1, #0
 8016a5e:	2078      	movs	r0, #120	@ 0x78
 8016a60:	f7ff ffb8 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8016a64:	2240      	movs	r2, #64	@ 0x40
 8016a66:	2100      	movs	r1, #0
 8016a68:	2078      	movs	r0, #120	@ 0x78
 8016a6a:	f7ff ffb3 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8016a6e:	2281      	movs	r2, #129	@ 0x81
 8016a70:	2100      	movs	r1, #0
 8016a72:	2078      	movs	r0, #120	@ 0x78
 8016a74:	f7ff ffae 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8016a78:	22ff      	movs	r2, #255	@ 0xff
 8016a7a:	2100      	movs	r1, #0
 8016a7c:	2078      	movs	r0, #120	@ 0x78
 8016a7e:	f7ff ffa9 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8016a82:	22a1      	movs	r2, #161	@ 0xa1
 8016a84:	2100      	movs	r1, #0
 8016a86:	2078      	movs	r0, #120	@ 0x78
 8016a88:	f7ff ffa4 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8016a8c:	22a6      	movs	r2, #166	@ 0xa6
 8016a8e:	2100      	movs	r1, #0
 8016a90:	2078      	movs	r0, #120	@ 0x78
 8016a92:	f7ff ff9f 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8016a96:	22a8      	movs	r2, #168	@ 0xa8
 8016a98:	2100      	movs	r1, #0
 8016a9a:	2078      	movs	r0, #120	@ 0x78
 8016a9c:	f7ff ff9a 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8016aa0:	223f      	movs	r2, #63	@ 0x3f
 8016aa2:	2100      	movs	r1, #0
 8016aa4:	2078      	movs	r0, #120	@ 0x78
 8016aa6:	f7ff ff95 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8016aaa:	22a4      	movs	r2, #164	@ 0xa4
 8016aac:	2100      	movs	r1, #0
 8016aae:	2078      	movs	r0, #120	@ 0x78
 8016ab0:	f7ff ff90 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8016ab4:	22d3      	movs	r2, #211	@ 0xd3
 8016ab6:	2100      	movs	r1, #0
 8016ab8:	2078      	movs	r0, #120	@ 0x78
 8016aba:	f7ff ff8b 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8016abe:	2200      	movs	r2, #0
 8016ac0:	4611      	mov	r1, r2
 8016ac2:	2078      	movs	r0, #120	@ 0x78
 8016ac4:	f7ff ff86 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8016ac8:	22d5      	movs	r2, #213	@ 0xd5
 8016aca:	2100      	movs	r1, #0
 8016acc:	2078      	movs	r0, #120	@ 0x78
 8016ace:	f7ff ff81 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8016ad2:	22f0      	movs	r2, #240	@ 0xf0
 8016ad4:	2100      	movs	r1, #0
 8016ad6:	2078      	movs	r0, #120	@ 0x78
 8016ad8:	f7ff ff7c 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8016adc:	22d9      	movs	r2, #217	@ 0xd9
 8016ade:	2100      	movs	r1, #0
 8016ae0:	2078      	movs	r0, #120	@ 0x78
 8016ae2:	f7ff ff77 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8016ae6:	2222      	movs	r2, #34	@ 0x22
 8016ae8:	2100      	movs	r1, #0
 8016aea:	2078      	movs	r0, #120	@ 0x78
 8016aec:	f7ff ff72 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8016af0:	22da      	movs	r2, #218	@ 0xda
 8016af2:	2100      	movs	r1, #0
 8016af4:	2078      	movs	r0, #120	@ 0x78
 8016af6:	f7ff ff6d 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8016afa:	2212      	movs	r2, #18
 8016afc:	2100      	movs	r1, #0
 8016afe:	2078      	movs	r0, #120	@ 0x78
 8016b00:	f7ff ff68 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8016b04:	22db      	movs	r2, #219	@ 0xdb
 8016b06:	2100      	movs	r1, #0
 8016b08:	2078      	movs	r0, #120	@ 0x78
 8016b0a:	f7ff ff63 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8016b0e:	2220      	movs	r2, #32
 8016b10:	2100      	movs	r1, #0
 8016b12:	2078      	movs	r0, #120	@ 0x78
 8016b14:	f7ff ff5e 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8016b18:	228d      	movs	r2, #141	@ 0x8d
 8016b1a:	2100      	movs	r1, #0
 8016b1c:	2078      	movs	r0, #120	@ 0x78
 8016b1e:	f7ff ff59 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8016b22:	2214      	movs	r2, #20
 8016b24:	2100      	movs	r1, #0
 8016b26:	2078      	movs	r0, #120	@ 0x78
 8016b28:	f7ff ff54 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8016b2c:	22af      	movs	r2, #175	@ 0xaf
 8016b2e:	2100      	movs	r1, #0
 8016b30:	2078      	movs	r0, #120	@ 0x78
 8016b32:	f7ff ff4f 	bl	80169d4 <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 8016b36:	4b05      	ldr	r3, [pc, #20]	@ (8016b4c <SSD1306_Init+0x150>)
 8016b38:	2200      	movs	r2, #0
 8016b3a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8016b3c:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8016b3e:	2001      	movs	r0, #1
 8016b40:	7158      	strb	r0, [r3, #5]
}
 8016b42:	bd08      	pop	{r3, pc}
		return 0;
 8016b44:	2000      	movs	r0, #0
 8016b46:	e7fc      	b.n	8016b42 <SSD1306_Init+0x146>
 8016b48:	2000083c 	.word	0x2000083c
 8016b4c:	20000aa0 	.word	0x20000aa0

08016b50 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8016b50:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 8016b52:	2400      	movs	r4, #0
 8016b54:	e01a      	b.n	8016b8c <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8016b56:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 8016b5a:	b2d2      	uxtb	r2, r2
 8016b5c:	2100      	movs	r1, #0
 8016b5e:	2078      	movs	r0, #120	@ 0x78
 8016b60:	f7ff ff38 	bl	80169d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8016b64:	2200      	movs	r2, #0
 8016b66:	4611      	mov	r1, r2
 8016b68:	2078      	movs	r0, #120	@ 0x78
 8016b6a:	f7ff ff33 	bl	80169d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8016b6e:	2210      	movs	r2, #16
 8016b70:	2100      	movs	r1, #0
 8016b72:	2078      	movs	r0, #120	@ 0x78
 8016b74:	f7ff ff2e 	bl	80169d4 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8016b78:	2380      	movs	r3, #128	@ 0x80
 8016b7a:	4a06      	ldr	r2, [pc, #24]	@ (8016b94 <SSD1306_UpdateScreen+0x44>)
 8016b7c:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8016b80:	2140      	movs	r1, #64	@ 0x40
 8016b82:	2078      	movs	r0, #120	@ 0x78
 8016b84:	f7ff ff04 	bl	8016990 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8016b88:	3401      	adds	r4, #1
 8016b8a:	b2e4      	uxtb	r4, r4
 8016b8c:	2c07      	cmp	r4, #7
 8016b8e:	d9e2      	bls.n	8016b56 <SSD1306_UpdateScreen+0x6>
}
 8016b90:	bd10      	pop	{r4, pc}
 8016b92:	bf00      	nop
 8016b94:	20000aa8 	.word	0x20000aa8

08016b98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016b98:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8016b9a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8016b9e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016ba0:	f001 fd4a 	bl	8018638 <xTaskGetSchedulerState>
 8016ba4:	2801      	cmp	r0, #1
 8016ba6:	d100      	bne.n	8016baa <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8016ba8:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8016baa:	f002 f94b 	bl	8018e44 <xPortSysTickHandler>
}
 8016bae:	e7fb      	b.n	8016ba8 <SysTick_Handler+0x10>

08016bb0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016bb0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8016bb4:	b92b      	cbnz	r3, 8016bc2 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8016bb6:	4b06      	ldr	r3, [pc, #24]	@ (8016bd0 <osKernelInitialize+0x20>)
 8016bb8:	6818      	ldr	r0, [r3, #0]
 8016bba:	b928      	cbnz	r0, 8016bc8 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016bbc:	2201      	movs	r2, #1
 8016bbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016bc0:	4770      	bx	lr
    stat = osErrorISR;
 8016bc2:	f06f 0005 	mvn.w	r0, #5
 8016bc6:	4770      	bx	lr
    } else {
      stat = osError;
 8016bc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8016bcc:	4770      	bx	lr
 8016bce:	bf00      	nop
 8016bd0:	200017a8 	.word	0x200017a8

08016bd4 <osKernelStart>:
 8016bd4:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8016bd8:	b973      	cbnz	r3, 8016bf8 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8016bda:	4b0a      	ldr	r3, [pc, #40]	@ (8016c04 <osKernelStart+0x30>)
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	2b01      	cmp	r3, #1
 8016be0:	d10d      	bne.n	8016bfe <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8016be2:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016be4:	2400      	movs	r4, #0
 8016be6:	4b08      	ldr	r3, [pc, #32]	@ (8016c08 <osKernelStart+0x34>)
 8016be8:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016bea:	4b06      	ldr	r3, [pc, #24]	@ (8016c04 <osKernelStart+0x30>)
 8016bec:	2202      	movs	r2, #2
 8016bee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016bf0:	f001 fa6a 	bl	80180c8 <vTaskStartScheduler>
      stat = osOK;
 8016bf4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8016bf6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8016bf8:	f06f 0005 	mvn.w	r0, #5
 8016bfc:	4770      	bx	lr
      stat = osError;
 8016bfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8016c02:	4770      	bx	lr
 8016c04:	200017a8 	.word	0x200017a8
 8016c08:	e000ed00 	.word	0xe000ed00

08016c0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c0e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016c10:	2400      	movs	r4, #0
 8016c12:	9405      	str	r4, [sp, #20]
 8016c14:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8016c18:	bb7c      	cbnz	r4, 8016c7a <osThreadNew+0x6e>
 8016c1a:	b370      	cbz	r0, 8016c7a <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8016c1c:	b32a      	cbz	r2, 8016c6a <osThreadNew+0x5e>
      if (attr->name != NULL) {
 8016c1e:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8016c20:	6993      	ldr	r3, [r2, #24]
 8016c22:	b903      	cbnz	r3, 8016c26 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8016c24:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016c26:	1e5c      	subs	r4, r3, #1
 8016c28:	2c37      	cmp	r4, #55	@ 0x37
 8016c2a:	d84a      	bhi.n	8016cc2 <osThreadNew+0xb6>
 8016c2c:	6854      	ldr	r4, [r2, #4]
 8016c2e:	f014 0f01 	tst.w	r4, #1
 8016c32:	d148      	bne.n	8016cc6 <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8016c34:	6956      	ldr	r6, [r2, #20]
 8016c36:	b176      	cbz	r6, 8016c56 <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016c38:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016c3c:	6894      	ldr	r4, [r2, #8]
 8016c3e:	b134      	cbz	r4, 8016c4e <osThreadNew+0x42>
 8016c40:	68d7      	ldr	r7, [r2, #12]
 8016c42:	f5b7 7fc0 	cmp.w	r7, #384	@ 0x180
 8016c46:	d302      	bcc.n	8016c4e <osThreadNew+0x42>
 8016c48:	6917      	ldr	r7, [r2, #16]
 8016c4a:	b107      	cbz	r7, 8016c4e <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016c4c:	b9c6      	cbnz	r6, 8016c80 <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016c4e:	b12c      	cbz	r4, 8016c5c <osThreadNew+0x50>
    mem  = -1;
 8016c50:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016c54:	e00e      	b.n	8016c74 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8016c56:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8016c5a:	e7ef      	b.n	8016c3c <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016c5c:	68d4      	ldr	r4, [r2, #12]
 8016c5e:	b98c      	cbnz	r4, 8016c84 <osThreadNew+0x78>
 8016c60:	6914      	ldr	r4, [r2, #16]
 8016c62:	b194      	cbz	r4, 8016c8a <osThreadNew+0x7e>
    mem  = -1;
 8016c64:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016c68:	e004      	b.n	8016c74 <osThreadNew+0x68>
    name = NULL;
 8016c6a:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8016c6c:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8016c6e:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8016c70:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 8016c74:	2c01      	cmp	r4, #1
 8016c76:	d00a      	beq.n	8016c8e <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8016c78:	b1ac      	cbz	r4, 8016ca6 <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016c7a:	9805      	ldr	r0, [sp, #20]
}
 8016c7c:	b007      	add	sp, #28
 8016c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8016c80:	2401      	movs	r4, #1
 8016c82:	e7f7      	b.n	8016c74 <osThreadNew+0x68>
    mem  = -1;
 8016c84:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016c88:	e7f4      	b.n	8016c74 <osThreadNew+0x68>
          mem = 0;
 8016c8a:	2400      	movs	r4, #0
 8016c8c:	e7f2      	b.n	8016c74 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016c8e:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016c90:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016c92:	9202      	str	r2, [sp, #8]
 8016c94:	9401      	str	r4, [sp, #4]
 8016c96:	9300      	str	r3, [sp, #0]
 8016c98:	460b      	mov	r3, r1
 8016c9a:	4662      	mov	r2, ip
 8016c9c:	4629      	mov	r1, r5
 8016c9e:	f001 f9a3 	bl	8017fe8 <xTaskCreateStatic>
 8016ca2:	9005      	str	r0, [sp, #20]
 8016ca4:	e7e9      	b.n	8016c7a <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016ca6:	aa05      	add	r2, sp, #20
 8016ca8:	9201      	str	r2, [sp, #4]
 8016caa:	9300      	str	r3, [sp, #0]
 8016cac:	460b      	mov	r3, r1
 8016cae:	fa1f f28c 	uxth.w	r2, ip
 8016cb2:	4629      	mov	r1, r5
 8016cb4:	f001 f9d5 	bl	8018062 <xTaskCreate>
 8016cb8:	2801      	cmp	r0, #1
 8016cba:	d0de      	beq.n	8016c7a <osThreadNew+0x6e>
            hTask = NULL;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	9305      	str	r3, [sp, #20]
 8016cc0:	e7db      	b.n	8016c7a <osThreadNew+0x6e>
        return (NULL);
 8016cc2:	2000      	movs	r0, #0
 8016cc4:	e7da      	b.n	8016c7c <osThreadNew+0x70>
 8016cc6:	2000      	movs	r0, #0
 8016cc8:	e7d8      	b.n	8016c7c <osThreadNew+0x70>

08016cca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016cca:	b508      	push	{r3, lr}
 8016ccc:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8016cd0:	b933      	cbnz	r3, 8016ce0 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8016cd2:	b908      	cbnz	r0, 8016cd8 <osDelay+0xe>
    stat = osOK;
 8016cd4:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8016cd6:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8016cd8:	f001 fb62 	bl	80183a0 <vTaskDelay>
    stat = osOK;
 8016cdc:	2000      	movs	r0, #0
 8016cde:	e7fa      	b.n	8016cd6 <osDelay+0xc>
    stat = osErrorISR;
 8016ce0:	f06f 0005 	mvn.w	r0, #5
 8016ce4:	e7f7      	b.n	8016cd6 <osDelay+0xc>

08016ce6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8016ce6:	b570      	push	{r4, r5, r6, lr}
 8016ce8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d13c      	bne.n	8016d6a <osMutexNew+0x84>
 8016cf0:	4604      	mov	r4, r0
    if (attr != NULL) {
 8016cf2:	b100      	cbz	r0, 8016cf6 <osMutexNew+0x10>
      type = attr->attr_bits;
 8016cf4:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8016cf6:	f013 0601 	ands.w	r6, r3, #1
 8016cfa:	d000      	beq.n	8016cfe <osMutexNew+0x18>
      rmtx = 1U;
 8016cfc:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8016cfe:	f013 0f08 	tst.w	r3, #8
 8016d02:	d135      	bne.n	8016d70 <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 8016d04:	b344      	cbz	r4, 8016d58 <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8016d06:	68a1      	ldr	r1, [r4, #8]
 8016d08:	b111      	cbz	r1, 8016d10 <osMutexNew+0x2a>
 8016d0a:	68e3      	ldr	r3, [r4, #12]
 8016d0c:	2b4f      	cmp	r3, #79	@ 0x4f
 8016d0e:	d818      	bhi.n	8016d42 <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016d10:	b191      	cbz	r1, 8016d38 <osMutexNew+0x52>
      mem = -1;
 8016d12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8016d16:	bb6b      	cbnz	r3, 8016d74 <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8016d18:	b316      	cbz	r6, 8016d60 <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8016d1a:	2004      	movs	r0, #4
 8016d1c:	f000 fc04 	bl	8017528 <xQueueCreateMutex>
 8016d20:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8016d22:	b31d      	cbz	r5, 8016d6c <osMutexNew+0x86>
        if (attr != NULL) {
 8016d24:	b104      	cbz	r4, 8016d28 <osMutexNew+0x42>
          name = attr->name;
 8016d26:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8016d28:	4621      	mov	r1, r4
 8016d2a:	4628      	mov	r0, r5
 8016d2c:	f000 ff64 	bl	8017bf8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8016d30:	b1e6      	cbz	r6, 8016d6c <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8016d32:	f045 0501 	orr.w	r5, r5, #1
 8016d36:	e019      	b.n	8016d6c <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016d38:	68e3      	ldr	r3, [r4, #12]
 8016d3a:	b17b      	cbz	r3, 8016d5c <osMutexNew+0x76>
      mem = -1;
 8016d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016d40:	e7e9      	b.n	8016d16 <osMutexNew+0x30>
          if (rmtx != 0U) {
 8016d42:	b126      	cbz	r6, 8016d4e <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8016d44:	2004      	movs	r0, #4
 8016d46:	f000 fbfa 	bl	801753e <xQueueCreateMutexStatic>
 8016d4a:	4605      	mov	r5, r0
 8016d4c:	e7e9      	b.n	8016d22 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8016d4e:	2001      	movs	r0, #1
 8016d50:	f000 fbf5 	bl	801753e <xQueueCreateMutexStatic>
 8016d54:	4605      	mov	r5, r0
 8016d56:	e7e4      	b.n	8016d22 <osMutexNew+0x3c>
        mem = 0;
 8016d58:	2300      	movs	r3, #0
 8016d5a:	e7dc      	b.n	8016d16 <osMutexNew+0x30>
            mem = 0;
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	e7da      	b.n	8016d16 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8016d60:	2001      	movs	r0, #1
 8016d62:	f000 fbe1 	bl	8017528 <xQueueCreateMutex>
 8016d66:	4605      	mov	r5, r0
 8016d68:	e7db      	b.n	8016d22 <osMutexNew+0x3c>
  hMutex = NULL;
 8016d6a:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8016d6c:	4628      	mov	r0, r5
 8016d6e:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8016d70:	2500      	movs	r5, #0
 8016d72:	e7fb      	b.n	8016d6c <osMutexNew+0x86>
 8016d74:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8016d76:	e7f9      	b.n	8016d6c <osMutexNew+0x86>

08016d78 <osMutexAcquire>:
 8016d78:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8016d7c:	b9da      	cbnz	r2, 8016db6 <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8016d7e:	b510      	push	{r4, lr}
 8016d80:	4603      	mov	r3, r0
 8016d82:	460c      	mov	r4, r1
 8016d84:	f020 0001 	bic.w	r0, r0, #1
 8016d88:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8016d8c:	2b01      	cmp	r3, #1
 8016d8e:	d915      	bls.n	8016dbc <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8016d90:	b141      	cbz	r1, 8016da4 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8016d92:	4621      	mov	r1, r4
 8016d94:	f000 fdeb 	bl	801796e <xQueueTakeMutexRecursive>
 8016d98:	2801      	cmp	r0, #1
 8016d9a:	d012      	beq.n	8016dc2 <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8016d9c:	b19c      	cbz	r4, 8016dc6 <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8016d9e:	f06f 0001 	mvn.w	r0, #1
 8016da2:	e00f      	b.n	8016dc4 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8016da4:	4621      	mov	r1, r4
 8016da6:	f000 fd0f 	bl	80177c8 <xQueueSemaphoreTake>
 8016daa:	2801      	cmp	r0, #1
 8016dac:	d00e      	beq.n	8016dcc <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8016dae:	b17c      	cbz	r4, 8016dd0 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8016db0:	f06f 0001 	mvn.w	r0, #1
 8016db4:	e006      	b.n	8016dc4 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8016db6:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8016dba:	4770      	bx	lr
    stat = osErrorParameter;
 8016dbc:	f06f 0003 	mvn.w	r0, #3
 8016dc0:	e000      	b.n	8016dc4 <osMutexAcquire+0x4c>
  stat = osOK;
 8016dc2:	2000      	movs	r0, #0
}
 8016dc4:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8016dc6:	f06f 0002 	mvn.w	r0, #2
 8016dca:	e7fb      	b.n	8016dc4 <osMutexAcquire+0x4c>
  stat = osOK;
 8016dcc:	2000      	movs	r0, #0
 8016dce:	e7f9      	b.n	8016dc4 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8016dd0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8016dd4:	e7f6      	b.n	8016dc4 <osMutexAcquire+0x4c>

08016dd6 <osMutexRelease>:
 8016dd6:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8016dda:	b9ba      	cbnz	r2, 8016e0c <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8016ddc:	b508      	push	{r3, lr}
 8016dde:	4603      	mov	r3, r0
 8016de0:	f020 0001 	bic.w	r0, r0, #1
 8016de4:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8016de8:	2b01      	cmp	r3, #1
 8016dea:	d912      	bls.n	8016e12 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8016dec:	b129      	cbz	r1, 8016dfa <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8016dee:	f000 fbb5 	bl	801755c <xQueueGiveMutexRecursive>
 8016df2:	2801      	cmp	r0, #1
 8016df4:	d110      	bne.n	8016e18 <osMutexRelease+0x42>
  stat = osOK;
 8016df6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8016df8:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	461a      	mov	r2, r3
 8016dfe:	4619      	mov	r1, r3
 8016e00:	f000 fac2 	bl	8017388 <xQueueGenericSend>
 8016e04:	2801      	cmp	r0, #1
 8016e06:	d10a      	bne.n	8016e1e <osMutexRelease+0x48>
  stat = osOK;
 8016e08:	2000      	movs	r0, #0
 8016e0a:	e7f5      	b.n	8016df8 <osMutexRelease+0x22>
    stat = osErrorISR;
 8016e0c:	f06f 0005 	mvn.w	r0, #5
}
 8016e10:	4770      	bx	lr
    stat = osErrorParameter;
 8016e12:	f06f 0003 	mvn.w	r0, #3
 8016e16:	e7ef      	b.n	8016df8 <osMutexRelease+0x22>
        stat = osErrorResource;
 8016e18:	f06f 0002 	mvn.w	r0, #2
 8016e1c:	e7ec      	b.n	8016df8 <osMutexRelease+0x22>
        stat = osErrorResource;
 8016e1e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8016e22:	e7e9      	b.n	8016df8 <osMutexRelease+0x22>

08016e24 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8016e24:	b570      	push	{r4, r5, r6, lr}
 8016e26:	b082      	sub	sp, #8
 8016e28:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d13a      	bne.n	8016ea6 <osMessageQueueNew+0x82>
 8016e30:	4614      	mov	r4, r2
 8016e32:	2800      	cmp	r0, #0
 8016e34:	d03b      	beq.n	8016eae <osMessageQueueNew+0x8a>
 8016e36:	2900      	cmp	r1, #0
 8016e38:	d03b      	beq.n	8016eb2 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 8016e3a:	b36a      	cbz	r2, 8016e98 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016e3c:	6893      	ldr	r3, [r2, #8]
 8016e3e:	b14b      	cbz	r3, 8016e54 <osMessageQueueNew+0x30>
 8016e40:	68d2      	ldr	r2, [r2, #12]
 8016e42:	2a4f      	cmp	r2, #79	@ 0x4f
 8016e44:	d906      	bls.n	8016e54 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016e46:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016e48:	b122      	cbz	r2, 8016e54 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016e4a:	fb01 f500 	mul.w	r5, r1, r0
 8016e4e:	6966      	ldr	r6, [r4, #20]
 8016e50:	42ae      	cmp	r6, r5
 8016e52:	d21b      	bcs.n	8016e8c <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8016e54:	b173      	cbz	r3, 8016e74 <osMessageQueueNew+0x50>
    mem = -1;
 8016e56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8016e5a:	bb63      	cbnz	r3, 8016eb6 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	f000 fa6f 	bl	8017340 <xQueueGenericCreate>
 8016e62:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8016e64:	b305      	cbz	r5, 8016ea8 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8016e66:	b104      	cbz	r4, 8016e6a <osMessageQueueNew+0x46>
        name = attr->name;
 8016e68:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8016e6a:	4621      	mov	r1, r4
 8016e6c:	4628      	mov	r0, r5
 8016e6e:	f000 fec3 	bl	8017bf8 <vQueueAddToRegistry>
 8016e72:	e019      	b.n	8016ea8 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8016e74:	68e3      	ldr	r3, [r4, #12]
 8016e76:	b98b      	cbnz	r3, 8016e9c <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8016e78:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8016e7a:	b113      	cbz	r3, 8016e82 <osMessageQueueNew+0x5e>
    mem = -1;
 8016e7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016e80:	e7eb      	b.n	8016e5a <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8016e82:	6963      	ldr	r3, [r4, #20]
 8016e84:	b16b      	cbz	r3, 8016ea2 <osMessageQueueNew+0x7e>
    mem = -1;
 8016e86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016e8a:	e7e6      	b.n	8016e5a <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8016e8c:	2500      	movs	r5, #0
 8016e8e:	9500      	str	r5, [sp, #0]
 8016e90:	f000 fa0c 	bl	80172ac <xQueueGenericCreateStatic>
 8016e94:	4605      	mov	r5, r0
 8016e96:	e7e5      	b.n	8016e64 <osMessageQueueNew+0x40>
      mem = 0;
 8016e98:	2300      	movs	r3, #0
 8016e9a:	e7de      	b.n	8016e5a <osMessageQueueNew+0x36>
    mem = -1;
 8016e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016ea0:	e7db      	b.n	8016e5a <osMessageQueueNew+0x36>
          mem = 0;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	e7d9      	b.n	8016e5a <osMessageQueueNew+0x36>
  hQueue = NULL;
 8016ea6:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8016ea8:	4628      	mov	r0, r5
 8016eaa:	b002      	add	sp, #8
 8016eac:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8016eae:	2500      	movs	r5, #0
 8016eb0:	e7fa      	b.n	8016ea8 <osMessageQueueNew+0x84>
 8016eb2:	2500      	movs	r5, #0
 8016eb4:	e7f8      	b.n	8016ea8 <osMessageQueueNew+0x84>
 8016eb6:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8016eb8:	e7f6      	b.n	8016ea8 <osMessageQueueNew+0x84>

08016eba <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8016eba:	b510      	push	{r4, lr}
 8016ebc:	b082      	sub	sp, #8
 8016ebe:	461c      	mov	r4, r3
 8016ec0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8016ec4:	b1c3      	cbz	r3, 8016ef8 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016ec6:	b318      	cbz	r0, 8016f10 <osMessageQueuePut+0x56>
 8016ec8:	b329      	cbz	r1, 8016f16 <osMessageQueuePut+0x5c>
 8016eca:	bb3c      	cbnz	r4, 8016f1c <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8016ecc:	2300      	movs	r3, #0
 8016ece:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8016ed0:	aa01      	add	r2, sp, #4
 8016ed2:	f000 fb63 	bl	801759c <xQueueGenericSendFromISR>
 8016ed6:	2801      	cmp	r0, #1
 8016ed8:	d123      	bne.n	8016f22 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8016eda:	9801      	ldr	r0, [sp, #4]
 8016edc:	b150      	cbz	r0, 8016ef4 <osMessageQueuePut+0x3a>
 8016ede:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8016ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016ee6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8016eea:	f3bf 8f4f 	dsb	sy
 8016eee:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8016ef2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8016ef4:	b002      	add	sp, #8
 8016ef6:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016ef8:	b1b0      	cbz	r0, 8016f28 <osMessageQueuePut+0x6e>
 8016efa:	b1c1      	cbz	r1, 8016f2e <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016efc:	2300      	movs	r3, #0
 8016efe:	4622      	mov	r2, r4
 8016f00:	f000 fa42 	bl	8017388 <xQueueGenericSend>
 8016f04:	2801      	cmp	r0, #1
 8016f06:	d015      	beq.n	8016f34 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8016f08:	b1b4      	cbz	r4, 8016f38 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8016f0a:	f06f 0001 	mvn.w	r0, #1
 8016f0e:	e7f1      	b.n	8016ef4 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8016f10:	f06f 0003 	mvn.w	r0, #3
 8016f14:	e7ee      	b.n	8016ef4 <osMessageQueuePut+0x3a>
 8016f16:	f06f 0003 	mvn.w	r0, #3
 8016f1a:	e7eb      	b.n	8016ef4 <osMessageQueuePut+0x3a>
 8016f1c:	f06f 0003 	mvn.w	r0, #3
 8016f20:	e7e8      	b.n	8016ef4 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8016f22:	f06f 0002 	mvn.w	r0, #2
 8016f26:	e7e5      	b.n	8016ef4 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8016f28:	f06f 0003 	mvn.w	r0, #3
 8016f2c:	e7e2      	b.n	8016ef4 <osMessageQueuePut+0x3a>
 8016f2e:	f06f 0003 	mvn.w	r0, #3
 8016f32:	e7df      	b.n	8016ef4 <osMessageQueuePut+0x3a>
  stat = osOK;
 8016f34:	2000      	movs	r0, #0
 8016f36:	e7dd      	b.n	8016ef4 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 8016f38:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8016f3c:	e7da      	b.n	8016ef4 <osMessageQueuePut+0x3a>

08016f3e <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8016f3e:	b510      	push	{r4, lr}
 8016f40:	b082      	sub	sp, #8
 8016f42:	461c      	mov	r4, r3
 8016f44:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8016f48:	b1c3      	cbz	r3, 8016f7c <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016f4a:	b310      	cbz	r0, 8016f92 <osMessageQueueGet+0x54>
 8016f4c:	b321      	cbz	r1, 8016f98 <osMessageQueueGet+0x5a>
 8016f4e:	bb34      	cbnz	r4, 8016f9e <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8016f50:	2300      	movs	r3, #0
 8016f52:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8016f54:	aa01      	add	r2, sp, #4
 8016f56:	f000 fdd9 	bl	8017b0c <xQueueReceiveFromISR>
 8016f5a:	2801      	cmp	r0, #1
 8016f5c:	d122      	bne.n	8016fa4 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8016f5e:	9801      	ldr	r0, [sp, #4]
 8016f60:	b150      	cbz	r0, 8016f78 <osMessageQueueGet+0x3a>
 8016f62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8016f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016f6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8016f6e:	f3bf 8f4f 	dsb	sy
 8016f72:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8016f76:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8016f78:	b002      	add	sp, #8
 8016f7a:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016f7c:	b1a8      	cbz	r0, 8016faa <osMessageQueueGet+0x6c>
 8016f7e:	b1b9      	cbz	r1, 8016fb0 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016f80:	4622      	mov	r2, r4
 8016f82:	f000 fb72 	bl	801766a <xQueueReceive>
 8016f86:	2801      	cmp	r0, #1
 8016f88:	d015      	beq.n	8016fb6 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8016f8a:	b1b4      	cbz	r4, 8016fba <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8016f8c:	f06f 0001 	mvn.w	r0, #1
 8016f90:	e7f2      	b.n	8016f78 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8016f92:	f06f 0003 	mvn.w	r0, #3
 8016f96:	e7ef      	b.n	8016f78 <osMessageQueueGet+0x3a>
 8016f98:	f06f 0003 	mvn.w	r0, #3
 8016f9c:	e7ec      	b.n	8016f78 <osMessageQueueGet+0x3a>
 8016f9e:	f06f 0003 	mvn.w	r0, #3
 8016fa2:	e7e9      	b.n	8016f78 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8016fa4:	f06f 0002 	mvn.w	r0, #2
 8016fa8:	e7e6      	b.n	8016f78 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8016faa:	f06f 0003 	mvn.w	r0, #3
 8016fae:	e7e3      	b.n	8016f78 <osMessageQueueGet+0x3a>
 8016fb0:	f06f 0003 	mvn.w	r0, #3
 8016fb4:	e7e0      	b.n	8016f78 <osMessageQueueGet+0x3a>
  stat = osOK;
 8016fb6:	2000      	movs	r0, #0
 8016fb8:	e7de      	b.n	8016f78 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8016fba:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8016fbe:	e7db      	b.n	8016f78 <osMessageQueueGet+0x3a>

08016fc0 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8016fc0:	b148      	cbz	r0, 8016fd6 <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8016fc2:	b508      	push	{r3, lr}
 8016fc4:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8016fc8:	b112      	cbz	r2, 8016fd0 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8016fca:	f000 fe09 	bl	8017be0 <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8016fce:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8016fd0:	f000 fdf3 	bl	8017bba <uxQueueMessagesWaiting>
 8016fd4:	e7fb      	b.n	8016fce <osMessageQueueGetCount+0xe>
    count = 0U;
 8016fd6:	2000      	movs	r0, #0
}
 8016fd8:	4770      	bx	lr

08016fda <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8016fda:	b508      	push	{r3, lr}
 8016fdc:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8016fe0:	b92b      	cbnz	r3, 8016fee <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8016fe2:	b138      	cbz	r0, 8016ff4 <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8016fe4:	2100      	movs	r1, #0
 8016fe6:	f000 f90e 	bl	8017206 <xQueueGenericReset>
    stat = osOK;
 8016fea:	2000      	movs	r0, #0
  }

  return (stat);
}
 8016fec:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8016fee:	f06f 0005 	mvn.w	r0, #5
 8016ff2:	e7fb      	b.n	8016fec <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 8016ff4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8016ff8:	e7f8      	b.n	8016fec <osMessageQueueReset+0x12>
	...

08016ffc <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016ffc:	4b03      	ldr	r3, [pc, #12]	@ (801700c <vApplicationGetIdleTaskMemory+0x10>)
 8016ffe:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017000:	4b03      	ldr	r3, [pc, #12]	@ (8017010 <vApplicationGetIdleTaskMemory+0x14>)
 8017002:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017004:	2380      	movs	r3, #128	@ 0x80
 8017006:	6013      	str	r3, [r2, #0]
}
 8017008:	4770      	bx	lr
 801700a:	bf00      	nop
 801700c:	20001628 	.word	0x20001628
 8017010:	20001428 	.word	0x20001428

08017014 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017014:	4b03      	ldr	r3, [pc, #12]	@ (8017024 <vApplicationGetTimerTaskMemory+0x10>)
 8017016:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017018:	4b03      	ldr	r3, [pc, #12]	@ (8017028 <vApplicationGetTimerTaskMemory+0x14>)
 801701a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801701c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017020:	6013      	str	r3, [r2, #0]
}
 8017022:	4770      	bx	lr
 8017024:	200012a8 	.word	0x200012a8
 8017028:	20000ea8 	.word	0x20000ea8

0801702c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801702c:	f100 0308 	add.w	r3, r0, #8
 8017030:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017032:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017036:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017038:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801703a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801703c:	2300      	movs	r3, #0
 801703e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017040:	4770      	bx	lr

08017042 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017042:	2300      	movs	r3, #0
 8017044:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017046:	4770      	bx	lr

08017048 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8017048:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801704a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801704c:	689a      	ldr	r2, [r3, #8]
 801704e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017050:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017052:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017054:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8017056:	6803      	ldr	r3, [r0, #0]
 8017058:	3301      	adds	r3, #1
 801705a:	6003      	str	r3, [r0, #0]
}
 801705c:	4770      	bx	lr

0801705e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801705e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017060:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017062:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017066:	d011      	beq.n	801708c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017068:	f100 0308 	add.w	r3, r0, #8
 801706c:	461c      	mov	r4, r3
 801706e:	685b      	ldr	r3, [r3, #4]
 8017070:	681a      	ldr	r2, [r3, #0]
 8017072:	42aa      	cmp	r2, r5
 8017074:	d9fa      	bls.n	801706c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017076:	6863      	ldr	r3, [r4, #4]
 8017078:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801707a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801707c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801707e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017080:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8017082:	6803      	ldr	r3, [r0, #0]
 8017084:	3301      	adds	r3, #1
 8017086:	6003      	str	r3, [r0, #0]
}
 8017088:	bc30      	pop	{r4, r5}
 801708a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 801708c:	6904      	ldr	r4, [r0, #16]
 801708e:	e7f2      	b.n	8017076 <vListInsert+0x18>

08017090 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017090:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017092:	6841      	ldr	r1, [r0, #4]
 8017094:	6882      	ldr	r2, [r0, #8]
 8017096:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017098:	6841      	ldr	r1, [r0, #4]
 801709a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801709c:	685a      	ldr	r2, [r3, #4]
 801709e:	4282      	cmp	r2, r0
 80170a0:	d006      	beq.n	80170b0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80170a2:	2200      	movs	r2, #0
 80170a4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80170a6:	681a      	ldr	r2, [r3, #0]
 80170a8:	3a01      	subs	r2, #1
 80170aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80170ac:	6818      	ldr	r0, [r3, #0]
}
 80170ae:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80170b0:	6882      	ldr	r2, [r0, #8]
 80170b2:	605a      	str	r2, [r3, #4]
 80170b4:	e7f5      	b.n	80170a2 <uxListRemove+0x12>

080170b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80170b6:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80170b8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80170ba:	b118      	cbz	r0, 80170c4 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80170bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80170be:	6818      	ldr	r0, [r3, #0]
 80170c0:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80170c4:	4770      	bx	lr

080170c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80170c6:	b510      	push	{r4, lr}
 80170c8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80170ca:	f001 fe4b 	bl	8018d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80170ce:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80170d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80170d2:	429a      	cmp	r2, r3
 80170d4:	d004      	beq.n	80170e0 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80170d6:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80170d8:	f001 fe66 	bl	8018da8 <vPortExitCritical>

	return xReturn;
}
 80170dc:	4620      	mov	r0, r4
 80170de:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80170e0:	2401      	movs	r4, #1
 80170e2:	e7f9      	b.n	80170d8 <prvIsQueueFull+0x12>

080170e4 <prvIsQueueEmpty>:
{
 80170e4:	b510      	push	{r4, lr}
 80170e6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80170e8:	f001 fe3c 	bl	8018d64 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80170ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80170ee:	b923      	cbnz	r3, 80170fa <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80170f0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80170f2:	f001 fe59 	bl	8018da8 <vPortExitCritical>
}
 80170f6:	4620      	mov	r0, r4
 80170f8:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80170fa:	2400      	movs	r4, #0
 80170fc:	e7f9      	b.n	80170f2 <prvIsQueueEmpty+0xe>

080170fe <prvCopyDataToQueue>:
{
 80170fe:	b570      	push	{r4, r5, r6, lr}
 8017100:	4604      	mov	r4, r0
 8017102:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017104:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017106:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8017108:	b95a      	cbnz	r2, 8017122 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801710a:	6803      	ldr	r3, [r0, #0]
 801710c:	b11b      	cbz	r3, 8017116 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 801710e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017110:	3601      	adds	r6, #1
 8017112:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8017114:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017116:	6880      	ldr	r0, [r0, #8]
 8017118:	f001 faea 	bl	80186f0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801711c:	2300      	movs	r3, #0
 801711e:	60a3      	str	r3, [r4, #8]
 8017120:	e7f6      	b.n	8017110 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8017122:	b96d      	cbnz	r5, 8017140 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017124:	6840      	ldr	r0, [r0, #4]
 8017126:	f013 ff17 	bl	802af58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801712a:	6863      	ldr	r3, [r4, #4]
 801712c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801712e:	4413      	add	r3, r2
 8017130:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017132:	68a2      	ldr	r2, [r4, #8]
 8017134:	4293      	cmp	r3, r2
 8017136:	d319      	bcc.n	801716c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017138:	6823      	ldr	r3, [r4, #0]
 801713a:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 801713c:	4628      	mov	r0, r5
 801713e:	e7e7      	b.n	8017110 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017140:	68c0      	ldr	r0, [r0, #12]
 8017142:	f013 ff09 	bl	802af58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017146:	68e3      	ldr	r3, [r4, #12]
 8017148:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801714a:	4251      	negs	r1, r2
 801714c:	1a9b      	subs	r3, r3, r2
 801714e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017150:	6822      	ldr	r2, [r4, #0]
 8017152:	4293      	cmp	r3, r2
 8017154:	d202      	bcs.n	801715c <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017156:	68a3      	ldr	r3, [r4, #8]
 8017158:	440b      	add	r3, r1
 801715a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801715c:	2d02      	cmp	r5, #2
 801715e:	d001      	beq.n	8017164 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8017160:	2000      	movs	r0, #0
 8017162:	e7d5      	b.n	8017110 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017164:	b126      	cbz	r6, 8017170 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8017166:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8017168:	2000      	movs	r0, #0
 801716a:	e7d1      	b.n	8017110 <prvCopyDataToQueue+0x12>
 801716c:	4628      	mov	r0, r5
 801716e:	e7cf      	b.n	8017110 <prvCopyDataToQueue+0x12>
 8017170:	2000      	movs	r0, #0
 8017172:	e7cd      	b.n	8017110 <prvCopyDataToQueue+0x12>

08017174 <prvCopyDataFromQueue>:
{
 8017174:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017176:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8017178:	b16a      	cbz	r2, 8017196 <prvCopyDataFromQueue+0x22>
{
 801717a:	b510      	push	{r4, lr}
 801717c:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801717e:	68d9      	ldr	r1, [r3, #12]
 8017180:	4411      	add	r1, r2
 8017182:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017184:	689c      	ldr	r4, [r3, #8]
 8017186:	42a1      	cmp	r1, r4
 8017188:	d301      	bcc.n	801718e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801718a:	6819      	ldr	r1, [r3, #0]
 801718c:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801718e:	68d9      	ldr	r1, [r3, #12]
 8017190:	f013 fee2 	bl	802af58 <memcpy>
}
 8017194:	bd10      	pop	{r4, pc}
 8017196:	4770      	bx	lr

08017198 <prvUnlockQueue>:
{
 8017198:	b538      	push	{r3, r4, r5, lr}
 801719a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 801719c:	f001 fde2 	bl	8018d64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80171a0:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 80171a4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80171a6:	e001      	b.n	80171ac <prvUnlockQueue+0x14>
			--cTxLock;
 80171a8:	3c01      	subs	r4, #1
 80171aa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80171ac:	2c00      	cmp	r4, #0
 80171ae:	dd0a      	ble.n	80171c6 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80171b0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80171b2:	b143      	cbz	r3, 80171c6 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80171b4:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80171b8:	f001 f99e 	bl	80184f8 <xTaskRemoveFromEventList>
 80171bc:	2800      	cmp	r0, #0
 80171be:	d0f3      	beq.n	80171a8 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80171c0:	f001 fa2e 	bl	8018620 <vTaskMissedYield>
 80171c4:	e7f0      	b.n	80171a8 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80171c6:	23ff      	movs	r3, #255	@ 0xff
 80171c8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80171cc:	f001 fdec 	bl	8018da8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80171d0:	f001 fdc8 	bl	8018d64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80171d4:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 80171d8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80171da:	e001      	b.n	80171e0 <prvUnlockQueue+0x48>
				--cRxLock;
 80171dc:	3c01      	subs	r4, #1
 80171de:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80171e0:	2c00      	cmp	r4, #0
 80171e2:	dd0a      	ble.n	80171fa <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80171e4:	692b      	ldr	r3, [r5, #16]
 80171e6:	b143      	cbz	r3, 80171fa <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80171e8:	f105 0010 	add.w	r0, r5, #16
 80171ec:	f001 f984 	bl	80184f8 <xTaskRemoveFromEventList>
 80171f0:	2800      	cmp	r0, #0
 80171f2:	d0f3      	beq.n	80171dc <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80171f4:	f001 fa14 	bl	8018620 <vTaskMissedYield>
 80171f8:	e7f0      	b.n	80171dc <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80171fa:	23ff      	movs	r3, #255	@ 0xff
 80171fc:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8017200:	f001 fdd2 	bl	8018da8 <vPortExitCritical>
}
 8017204:	bd38      	pop	{r3, r4, r5, pc}

08017206 <xQueueGenericReset>:
{
 8017206:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8017208:	b1e0      	cbz	r0, 8017244 <xQueueGenericReset+0x3e>
 801720a:	460d      	mov	r5, r1
 801720c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801720e:	f001 fda9 	bl	8018d64 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017212:	6823      	ldr	r3, [r4, #0]
 8017214:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8017216:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8017218:	fb01 3002 	mla	r0, r1, r2, r3
 801721c:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801721e:	2000      	movs	r0, #0
 8017220:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017222:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017224:	3a01      	subs	r2, #1
 8017226:	fb02 3301 	mla	r3, r2, r1, r3
 801722a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801722c:	23ff      	movs	r3, #255	@ 0xff
 801722e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017232:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8017236:	b9fd      	cbnz	r5, 8017278 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017238:	6923      	ldr	r3, [r4, #16]
 801723a:	b963      	cbnz	r3, 8017256 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 801723c:	f001 fdb4 	bl	8018da8 <vPortExitCritical>
}
 8017240:	2001      	movs	r0, #1
 8017242:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017248:	f383 8811 	msr	BASEPRI, r3
 801724c:	f3bf 8f6f 	isb	sy
 8017250:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8017254:	e7fe      	b.n	8017254 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017256:	f104 0010 	add.w	r0, r4, #16
 801725a:	f001 f94d 	bl	80184f8 <xTaskRemoveFromEventList>
 801725e:	2800      	cmp	r0, #0
 8017260:	d0ec      	beq.n	801723c <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8017262:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801726a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801726e:	f3bf 8f4f 	dsb	sy
 8017272:	f3bf 8f6f 	isb	sy
 8017276:	e7e1      	b.n	801723c <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017278:	f104 0010 	add.w	r0, r4, #16
 801727c:	f7ff fed6 	bl	801702c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017280:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017284:	f7ff fed2 	bl	801702c <vListInitialise>
 8017288:	e7d8      	b.n	801723c <xQueueGenericReset+0x36>

0801728a <prvInitialiseNewQueue>:
{
 801728a:	b538      	push	{r3, r4, r5, lr}
 801728c:	461d      	mov	r5, r3
 801728e:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8017290:	460b      	mov	r3, r1
 8017292:	b949      	cbnz	r1, 80172a8 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017294:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8017296:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017298:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801729a:	2101      	movs	r1, #1
 801729c:	4620      	mov	r0, r4
 801729e:	f7ff ffb2 	bl	8017206 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80172a2:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 80172a6:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80172a8:	6022      	str	r2, [r4, #0]
 80172aa:	e7f4      	b.n	8017296 <prvInitialiseNewQueue+0xc>

080172ac <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80172ac:	b940      	cbnz	r0, 80172c0 <xQueueGenericCreateStatic+0x14>
 80172ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172b2:	f383 8811 	msr	BASEPRI, r3
 80172b6:	f3bf 8f6f 	isb	sy
 80172ba:	f3bf 8f4f 	dsb	sy
 80172be:	e7fe      	b.n	80172be <xQueueGenericCreateStatic+0x12>
	{
 80172c0:	b510      	push	{r4, lr}
 80172c2:	b084      	sub	sp, #16
 80172c4:	461c      	mov	r4, r3
 80172c6:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 80172c8:	b153      	cbz	r3, 80172e0 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80172ca:	b192      	cbz	r2, 80172f2 <xQueueGenericCreateStatic+0x46>
 80172cc:	b989      	cbnz	r1, 80172f2 <xQueueGenericCreateStatic+0x46>
 80172ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172d2:	f383 8811 	msr	BASEPRI, r3
 80172d6:	f3bf 8f6f 	isb	sy
 80172da:	f3bf 8f4f 	dsb	sy
 80172de:	e7fe      	b.n	80172de <xQueueGenericCreateStatic+0x32>
 80172e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172e4:	f383 8811 	msr	BASEPRI, r3
 80172e8:	f3bf 8f6f 	isb	sy
 80172ec:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80172f0:	e7fe      	b.n	80172f0 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80172f2:	b16a      	cbz	r2, 8017310 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80172f4:	2350      	movs	r3, #80	@ 0x50
 80172f6:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80172f8:	9b03      	ldr	r3, [sp, #12]
 80172fa:	2b50      	cmp	r3, #80	@ 0x50
 80172fc:	d013      	beq.n	8017326 <xQueueGenericCreateStatic+0x7a>
 80172fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017302:	f383 8811 	msr	BASEPRI, r3
 8017306:	f3bf 8f6f 	isb	sy
 801730a:	f3bf 8f4f 	dsb	sy
 801730e:	e7fe      	b.n	801730e <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017310:	2900      	cmp	r1, #0
 8017312:	d0ef      	beq.n	80172f4 <xQueueGenericCreateStatic+0x48>
 8017314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017318:	f383 8811 	msr	BASEPRI, r3
 801731c:	f3bf 8f6f 	isb	sy
 8017320:	f3bf 8f4f 	dsb	sy
 8017324:	e7fe      	b.n	8017324 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017326:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017328:	2301      	movs	r3, #1
 801732a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801732e:	9400      	str	r4, [sp, #0]
 8017330:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8017334:	4660      	mov	r0, ip
 8017336:	f7ff ffa8 	bl	801728a <prvInitialiseNewQueue>
	}
 801733a:	4620      	mov	r0, r4
 801733c:	b004      	add	sp, #16
 801733e:	bd10      	pop	{r4, pc}

08017340 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017340:	b940      	cbnz	r0, 8017354 <xQueueGenericCreate+0x14>
 8017342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017346:	f383 8811 	msr	BASEPRI, r3
 801734a:	f3bf 8f6f 	isb	sy
 801734e:	f3bf 8f4f 	dsb	sy
 8017352:	e7fe      	b.n	8017352 <xQueueGenericCreate+0x12>
	{
 8017354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017356:	b083      	sub	sp, #12
 8017358:	460d      	mov	r5, r1
 801735a:	4614      	mov	r4, r2
 801735c:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801735e:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017362:	3050      	adds	r0, #80	@ 0x50
 8017364:	f001 feb8 	bl	80190d8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8017368:	4607      	mov	r7, r0
 801736a:	b150      	cbz	r0, 8017382 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801736c:	2300      	movs	r3, #0
 801736e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017372:	9000      	str	r0, [sp, #0]
 8017374:	4623      	mov	r3, r4
 8017376:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 801737a:	4629      	mov	r1, r5
 801737c:	4630      	mov	r0, r6
 801737e:	f7ff ff84 	bl	801728a <prvInitialiseNewQueue>
	}
 8017382:	4638      	mov	r0, r7
 8017384:	b003      	add	sp, #12
 8017386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017388 <xQueueGenericSend>:
{
 8017388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801738a:	b085      	sub	sp, #20
 801738c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 801738e:	b188      	cbz	r0, 80173b4 <xQueueGenericSend+0x2c>
 8017390:	460f      	mov	r7, r1
 8017392:	461d      	mov	r5, r3
 8017394:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017396:	b1b1      	cbz	r1, 80173c6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017398:	2d02      	cmp	r5, #2
 801739a:	d120      	bne.n	80173de <xQueueGenericSend+0x56>
 801739c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801739e:	2b01      	cmp	r3, #1
 80173a0:	d01d      	beq.n	80173de <xQueueGenericSend+0x56>
 80173a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173a6:	f383 8811 	msr	BASEPRI, r3
 80173aa:	f3bf 8f6f 	isb	sy
 80173ae:	f3bf 8f4f 	dsb	sy
 80173b2:	e7fe      	b.n	80173b2 <xQueueGenericSend+0x2a>
 80173b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173b8:	f383 8811 	msr	BASEPRI, r3
 80173bc:	f3bf 8f6f 	isb	sy
 80173c0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80173c4:	e7fe      	b.n	80173c4 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80173c6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d0e5      	beq.n	8017398 <xQueueGenericSend+0x10>
 80173cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173d0:	f383 8811 	msr	BASEPRI, r3
 80173d4:	f3bf 8f6f 	isb	sy
 80173d8:	f3bf 8f4f 	dsb	sy
 80173dc:	e7fe      	b.n	80173dc <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80173de:	f001 f92b 	bl	8018638 <xTaskGetSchedulerState>
 80173e2:	4606      	mov	r6, r0
 80173e4:	b958      	cbnz	r0, 80173fe <xQueueGenericSend+0x76>
 80173e6:	9b01      	ldr	r3, [sp, #4]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d048      	beq.n	801747e <xQueueGenericSend+0xf6>
 80173ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173f0:	f383 8811 	msr	BASEPRI, r3
 80173f4:	f3bf 8f6f 	isb	sy
 80173f8:	f3bf 8f4f 	dsb	sy
 80173fc:	e7fe      	b.n	80173fc <xQueueGenericSend+0x74>
 80173fe:	2600      	movs	r6, #0
 8017400:	e03d      	b.n	801747e <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017402:	462a      	mov	r2, r5
 8017404:	4639      	mov	r1, r7
 8017406:	4620      	mov	r0, r4
 8017408:	f7ff fe79 	bl	80170fe <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801740c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801740e:	b97b      	cbnz	r3, 8017430 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8017410:	b148      	cbz	r0, 8017426 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8017412:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801741a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801741e:	f3bf 8f4f 	dsb	sy
 8017422:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8017426:	f001 fcbf 	bl	8018da8 <vPortExitCritical>
				return pdPASS;
 801742a:	2001      	movs	r0, #1
}
 801742c:	b005      	add	sp, #20
 801742e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017430:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017434:	f001 f860 	bl	80184f8 <xTaskRemoveFromEventList>
 8017438:	2800      	cmp	r0, #0
 801743a:	d0f4      	beq.n	8017426 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 801743c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017444:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017448:	f3bf 8f4f 	dsb	sy
 801744c:	f3bf 8f6f 	isb	sy
 8017450:	e7e9      	b.n	8017426 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8017452:	f001 fca9 	bl	8018da8 <vPortExitCritical>
					return errQUEUE_FULL;
 8017456:	2000      	movs	r0, #0
 8017458:	e7e8      	b.n	801742c <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801745a:	a802      	add	r0, sp, #8
 801745c:	f001 f892 	bl	8018584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017460:	2601      	movs	r6, #1
 8017462:	e019      	b.n	8017498 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8017464:	2300      	movs	r3, #0
 8017466:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801746a:	e021      	b.n	80174b0 <xQueueGenericSend+0x128>
 801746c:	2300      	movs	r3, #0
 801746e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8017472:	e023      	b.n	80174bc <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8017474:	4620      	mov	r0, r4
 8017476:	f7ff fe8f 	bl	8017198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801747a:	f000 ff15 	bl	80182a8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 801747e:	f001 fc71 	bl	8018d64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017482:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8017484:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017486:	429a      	cmp	r2, r3
 8017488:	d3bb      	bcc.n	8017402 <xQueueGenericSend+0x7a>
 801748a:	2d02      	cmp	r5, #2
 801748c:	d0b9      	beq.n	8017402 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801748e:	9b01      	ldr	r3, [sp, #4]
 8017490:	2b00      	cmp	r3, #0
 8017492:	d0de      	beq.n	8017452 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8017494:	2e00      	cmp	r6, #0
 8017496:	d0e0      	beq.n	801745a <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8017498:	f001 fc86 	bl	8018da8 <vPortExitCritical>
		vTaskSuspendAll();
 801749c:	f000 fe6a 	bl	8018174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80174a0:	f001 fc60 	bl	8018d64 <vPortEnterCritical>
 80174a4:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80174a8:	b252      	sxtb	r2, r2
 80174aa:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80174ae:	d0d9      	beq.n	8017464 <xQueueGenericSend+0xdc>
 80174b0:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80174b4:	b252      	sxtb	r2, r2
 80174b6:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80174ba:	d0d7      	beq.n	801746c <xQueueGenericSend+0xe4>
 80174bc:	f001 fc74 	bl	8018da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80174c0:	a901      	add	r1, sp, #4
 80174c2:	a802      	add	r0, sp, #8
 80174c4:	f001 f86a 	bl	801859c <xTaskCheckForTimeOut>
 80174c8:	b9d8      	cbnz	r0, 8017502 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80174ca:	4620      	mov	r0, r4
 80174cc:	f7ff fdfb 	bl	80170c6 <prvIsQueueFull>
 80174d0:	2800      	cmp	r0, #0
 80174d2:	d0cf      	beq.n	8017474 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80174d4:	9901      	ldr	r1, [sp, #4]
 80174d6:	f104 0010 	add.w	r0, r4, #16
 80174da:	f000 ffd9 	bl	8018490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80174de:	4620      	mov	r0, r4
 80174e0:	f7ff fe5a 	bl	8017198 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80174e4:	f000 fee0 	bl	80182a8 <xTaskResumeAll>
 80174e8:	2800      	cmp	r0, #0
 80174ea:	d1c8      	bne.n	801747e <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80174ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80174f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80174f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80174f8:	f3bf 8f4f 	dsb	sy
 80174fc:	f3bf 8f6f 	isb	sy
 8017500:	e7bd      	b.n	801747e <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8017502:	4620      	mov	r0, r4
 8017504:	f7ff fe48 	bl	8017198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017508:	f000 fece 	bl	80182a8 <xTaskResumeAll>
			return errQUEUE_FULL;
 801750c:	2000      	movs	r0, #0
 801750e:	e78d      	b.n	801742c <xQueueGenericSend+0xa4>

08017510 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8017510:	b148      	cbz	r0, 8017526 <prvInitialiseMutex+0x16>
	{
 8017512:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8017514:	2100      	movs	r1, #0
 8017516:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8017518:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801751a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801751c:	460b      	mov	r3, r1
 801751e:	460a      	mov	r2, r1
 8017520:	f7ff ff32 	bl	8017388 <xQueueGenericSend>
	}
 8017524:	bd08      	pop	{r3, pc}
 8017526:	4770      	bx	lr

08017528 <xQueueCreateMutex>:
	{
 8017528:	b510      	push	{r4, lr}
 801752a:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801752c:	2100      	movs	r1, #0
 801752e:	2001      	movs	r0, #1
 8017530:	f7ff ff06 	bl	8017340 <xQueueGenericCreate>
 8017534:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8017536:	f7ff ffeb 	bl	8017510 <prvInitialiseMutex>
	}
 801753a:	4620      	mov	r0, r4
 801753c:	bd10      	pop	{r4, pc}

0801753e <xQueueCreateMutexStatic>:
	{
 801753e:	b510      	push	{r4, lr}
 8017540:	b082      	sub	sp, #8
 8017542:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8017544:	9000      	str	r0, [sp, #0]
 8017546:	2200      	movs	r2, #0
 8017548:	4611      	mov	r1, r2
 801754a:	2001      	movs	r0, #1
 801754c:	f7ff feae 	bl	80172ac <xQueueGenericCreateStatic>
 8017550:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8017552:	f7ff ffdd 	bl	8017510 <prvInitialiseMutex>
	}
 8017556:	4620      	mov	r0, r4
 8017558:	b002      	add	sp, #8
 801755a:	bd10      	pop	{r4, pc}

0801755c <xQueueGiveMutexRecursive>:
	{
 801755c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 801755e:	b138      	cbz	r0, 8017570 <xQueueGiveMutexRecursive+0x14>
 8017560:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8017562:	6885      	ldr	r5, [r0, #8]
 8017564:	f001 f862 	bl	801862c <xTaskGetCurrentTaskHandle>
 8017568:	4285      	cmp	r5, r0
 801756a:	d00a      	beq.n	8017582 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 801756c:	2000      	movs	r0, #0
	}
 801756e:	bd38      	pop	{r3, r4, r5, pc}
 8017570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017574:	f383 8811 	msr	BASEPRI, r3
 8017578:	f3bf 8f6f 	isb	sy
 801757c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8017580:	e7fe      	b.n	8017580 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8017582:	68e3      	ldr	r3, [r4, #12]
 8017584:	3b01      	subs	r3, #1
 8017586:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8017588:	b10b      	cbz	r3, 801758e <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 801758a:	2001      	movs	r0, #1
		return xReturn;
 801758c:	e7ef      	b.n	801756e <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801758e:	461a      	mov	r2, r3
 8017590:	4619      	mov	r1, r3
 8017592:	4620      	mov	r0, r4
 8017594:	f7ff fef8 	bl	8017388 <xQueueGenericSend>
			xReturn = pdPASS;
 8017598:	2001      	movs	r0, #1
 801759a:	e7e8      	b.n	801756e <xQueueGiveMutexRecursive+0x12>

0801759c <xQueueGenericSendFromISR>:
{
 801759c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80175a0:	b190      	cbz	r0, 80175c8 <xQueueGenericSendFromISR+0x2c>
 80175a2:	460f      	mov	r7, r1
 80175a4:	4616      	mov	r6, r2
 80175a6:	461c      	mov	r4, r3
 80175a8:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80175aa:	b1b1      	cbz	r1, 80175da <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80175ac:	2c02      	cmp	r4, #2
 80175ae:	d120      	bne.n	80175f2 <xQueueGenericSendFromISR+0x56>
 80175b0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80175b2:	2b01      	cmp	r3, #1
 80175b4:	d01d      	beq.n	80175f2 <xQueueGenericSendFromISR+0x56>
 80175b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175ba:	f383 8811 	msr	BASEPRI, r3
 80175be:	f3bf 8f6f 	isb	sy
 80175c2:	f3bf 8f4f 	dsb	sy
 80175c6:	e7fe      	b.n	80175c6 <xQueueGenericSendFromISR+0x2a>
 80175c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175cc:	f383 8811 	msr	BASEPRI, r3
 80175d0:	f3bf 8f6f 	isb	sy
 80175d4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80175d8:	e7fe      	b.n	80175d8 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80175da:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d0e5      	beq.n	80175ac <xQueueGenericSendFromISR+0x10>
 80175e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175e4:	f383 8811 	msr	BASEPRI, r3
 80175e8:	f3bf 8f6f 	isb	sy
 80175ec:	f3bf 8f4f 	dsb	sy
 80175f0:	e7fe      	b.n	80175f0 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80175f2:	f001 fcdd 	bl	8018fb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80175f6:	f3ef 8811 	mrs	r8, BASEPRI
 80175fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175fe:	f383 8811 	msr	BASEPRI, r3
 8017602:	f3bf 8f6f 	isb	sy
 8017606:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801760a:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 801760c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801760e:	429a      	cmp	r2, r3
 8017610:	d306      	bcc.n	8017620 <xQueueGenericSendFromISR+0x84>
 8017612:	2c02      	cmp	r4, #2
 8017614:	d004      	beq.n	8017620 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8017616:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017618:	f388 8811 	msr	BASEPRI, r8
}
 801761c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8017620:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8017624:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017628:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801762a:	4622      	mov	r2, r4
 801762c:	4639      	mov	r1, r7
 801762e:	4628      	mov	r0, r5
 8017630:	f7ff fd65 	bl	80170fe <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8017634:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8017638:	d006      	beq.n	8017648 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801763a:	f109 0301 	add.w	r3, r9, #1
 801763e:	b25b      	sxtb	r3, r3
 8017640:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8017644:	2001      	movs	r0, #1
 8017646:	e7e7      	b.n	8017618 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017648:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801764a:	b90b      	cbnz	r3, 8017650 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 801764c:	2001      	movs	r0, #1
 801764e:	e7e3      	b.n	8017618 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017650:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8017654:	f000 ff50 	bl	80184f8 <xTaskRemoveFromEventList>
 8017658:	b118      	cbz	r0, 8017662 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 801765a:	b126      	cbz	r6, 8017666 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801765c:	2001      	movs	r0, #1
 801765e:	6030      	str	r0, [r6, #0]
 8017660:	e7da      	b.n	8017618 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8017662:	2001      	movs	r0, #1
 8017664:	e7d8      	b.n	8017618 <xQueueGenericSendFromISR+0x7c>
 8017666:	2001      	movs	r0, #1
 8017668:	e7d6      	b.n	8017618 <xQueueGenericSendFromISR+0x7c>

0801766a <xQueueReceive>:
{
 801766a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801766c:	b085      	sub	sp, #20
 801766e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8017670:	b190      	cbz	r0, 8017698 <xQueueReceive+0x2e>
 8017672:	460f      	mov	r7, r1
 8017674:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017676:	b1c1      	cbz	r1, 80176aa <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017678:	f000 ffde 	bl	8018638 <xTaskGetSchedulerState>
 801767c:	4606      	mov	r6, r0
 801767e:	bb00      	cbnz	r0, 80176c2 <xQueueReceive+0x58>
 8017680:	9b01      	ldr	r3, [sp, #4]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d05e      	beq.n	8017744 <xQueueReceive+0xda>
	__asm volatile
 8017686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801768a:	f383 8811 	msr	BASEPRI, r3
 801768e:	f3bf 8f6f 	isb	sy
 8017692:	f3bf 8f4f 	dsb	sy
 8017696:	e7fe      	b.n	8017696 <xQueueReceive+0x2c>
 8017698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801769c:	f383 8811 	msr	BASEPRI, r3
 80176a0:	f3bf 8f6f 	isb	sy
 80176a4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80176a8:	e7fe      	b.n	80176a8 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80176aa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d0e3      	beq.n	8017678 <xQueueReceive+0xe>
 80176b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176b4:	f383 8811 	msr	BASEPRI, r3
 80176b8:	f3bf 8f6f 	isb	sy
 80176bc:	f3bf 8f4f 	dsb	sy
 80176c0:	e7fe      	b.n	80176c0 <xQueueReceive+0x56>
 80176c2:	2600      	movs	r6, #0
 80176c4:	e03e      	b.n	8017744 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80176c6:	4639      	mov	r1, r7
 80176c8:	4620      	mov	r0, r4
 80176ca:	f7ff fd53 	bl	8017174 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80176ce:	3d01      	subs	r5, #1
 80176d0:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80176d2:	6923      	ldr	r3, [r4, #16]
 80176d4:	b923      	cbnz	r3, 80176e0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80176d6:	f001 fb67 	bl	8018da8 <vPortExitCritical>
				return pdPASS;
 80176da:	2001      	movs	r0, #1
}
 80176dc:	b005      	add	sp, #20
 80176de:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80176e0:	f104 0010 	add.w	r0, r4, #16
 80176e4:	f000 ff08 	bl	80184f8 <xTaskRemoveFromEventList>
 80176e8:	2800      	cmp	r0, #0
 80176ea:	d0f4      	beq.n	80176d6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80176ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80176f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80176f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80176f8:	f3bf 8f4f 	dsb	sy
 80176fc:	f3bf 8f6f 	isb	sy
 8017700:	e7e9      	b.n	80176d6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8017702:	f001 fb51 	bl	8018da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8017706:	2000      	movs	r0, #0
 8017708:	e7e8      	b.n	80176dc <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801770a:	a802      	add	r0, sp, #8
 801770c:	f000 ff3a 	bl	8018584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017710:	2601      	movs	r6, #1
 8017712:	e021      	b.n	8017758 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8017714:	2300      	movs	r3, #0
 8017716:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801771a:	e029      	b.n	8017770 <xQueueReceive+0x106>
 801771c:	2300      	movs	r3, #0
 801771e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8017722:	e02b      	b.n	801777c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8017724:	4620      	mov	r0, r4
 8017726:	f7ff fd37 	bl	8017198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801772a:	f000 fdbd 	bl	80182a8 <xTaskResumeAll>
 801772e:	e009      	b.n	8017744 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8017730:	4620      	mov	r0, r4
 8017732:	f7ff fd31 	bl	8017198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017736:	f000 fdb7 	bl	80182a8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801773a:	4620      	mov	r0, r4
 801773c:	f7ff fcd2 	bl	80170e4 <prvIsQueueEmpty>
 8017740:	2800      	cmp	r0, #0
 8017742:	d13f      	bne.n	80177c4 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8017744:	f001 fb0e 	bl	8018d64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017748:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801774a:	2d00      	cmp	r5, #0
 801774c:	d1bb      	bne.n	80176c6 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801774e:	9b01      	ldr	r3, [sp, #4]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d0d6      	beq.n	8017702 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8017754:	2e00      	cmp	r6, #0
 8017756:	d0d8      	beq.n	801770a <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8017758:	f001 fb26 	bl	8018da8 <vPortExitCritical>
		vTaskSuspendAll();
 801775c:	f000 fd0a 	bl	8018174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017760:	f001 fb00 	bl	8018d64 <vPortEnterCritical>
 8017764:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017768:	b25b      	sxtb	r3, r3
 801776a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801776e:	d0d1      	beq.n	8017714 <xQueueReceive+0xaa>
 8017770:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8017774:	b25b      	sxtb	r3, r3
 8017776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801777a:	d0cf      	beq.n	801771c <xQueueReceive+0xb2>
 801777c:	f001 fb14 	bl	8018da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017780:	a901      	add	r1, sp, #4
 8017782:	a802      	add	r0, sp, #8
 8017784:	f000 ff0a 	bl	801859c <xTaskCheckForTimeOut>
 8017788:	2800      	cmp	r0, #0
 801778a:	d1d1      	bne.n	8017730 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801778c:	4620      	mov	r0, r4
 801778e:	f7ff fca9 	bl	80170e4 <prvIsQueueEmpty>
 8017792:	2800      	cmp	r0, #0
 8017794:	d0c6      	beq.n	8017724 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017796:	9901      	ldr	r1, [sp, #4]
 8017798:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801779c:	f000 fe78 	bl	8018490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80177a0:	4620      	mov	r0, r4
 80177a2:	f7ff fcf9 	bl	8017198 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80177a6:	f000 fd7f 	bl	80182a8 <xTaskResumeAll>
 80177aa:	2800      	cmp	r0, #0
 80177ac:	d1ca      	bne.n	8017744 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80177ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80177b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80177b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80177ba:	f3bf 8f4f 	dsb	sy
 80177be:	f3bf 8f6f 	isb	sy
 80177c2:	e7bf      	b.n	8017744 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80177c4:	2000      	movs	r0, #0
 80177c6:	e789      	b.n	80176dc <xQueueReceive+0x72>

080177c8 <xQueueSemaphoreTake>:
{
 80177c8:	b570      	push	{r4, r5, r6, lr}
 80177ca:	b084      	sub	sp, #16
 80177cc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80177ce:	b158      	cbz	r0, 80177e8 <xQueueSemaphoreTake+0x20>
 80177d0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80177d2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80177d4:	b18b      	cbz	r3, 80177fa <xQueueSemaphoreTake+0x32>
 80177d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177da:	f383 8811 	msr	BASEPRI, r3
 80177de:	f3bf 8f6f 	isb	sy
 80177e2:	f3bf 8f4f 	dsb	sy
 80177e6:	e7fe      	b.n	80177e6 <xQueueSemaphoreTake+0x1e>
 80177e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177ec:	f383 8811 	msr	BASEPRI, r3
 80177f0:	f3bf 8f6f 	isb	sy
 80177f4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80177f8:	e7fe      	b.n	80177f8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80177fa:	f000 ff1d 	bl	8018638 <xTaskGetSchedulerState>
 80177fe:	4605      	mov	r5, r0
 8017800:	b950      	cbnz	r0, 8017818 <xQueueSemaphoreTake+0x50>
 8017802:	9b01      	ldr	r3, [sp, #4]
 8017804:	b15b      	cbz	r3, 801781e <xQueueSemaphoreTake+0x56>
 8017806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801780a:	f383 8811 	msr	BASEPRI, r3
 801780e:	f3bf 8f6f 	isb	sy
 8017812:	f3bf 8f4f 	dsb	sy
 8017816:	e7fe      	b.n	8017816 <xQueueSemaphoreTake+0x4e>
 8017818:	2600      	movs	r6, #0
 801781a:	4635      	mov	r5, r6
 801781c:	e055      	b.n	80178ca <xQueueSemaphoreTake+0x102>
 801781e:	4606      	mov	r6, r0
 8017820:	e053      	b.n	80178ca <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017822:	3b01      	subs	r3, #1
 8017824:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017826:	6823      	ldr	r3, [r4, #0]
 8017828:	b13b      	cbz	r3, 801783a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801782a:	6923      	ldr	r3, [r4, #16]
 801782c:	b94b      	cbnz	r3, 8017842 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 801782e:	f001 fabb 	bl	8018da8 <vPortExitCritical>
				return pdPASS;
 8017832:	2601      	movs	r6, #1
}
 8017834:	4630      	mov	r0, r6
 8017836:	b004      	add	sp, #16
 8017838:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801783a:	f000 fff1 	bl	8018820 <pvTaskIncrementMutexHeldCount>
 801783e:	60a0      	str	r0, [r4, #8]
 8017840:	e7f3      	b.n	801782a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017842:	f104 0010 	add.w	r0, r4, #16
 8017846:	f000 fe57 	bl	80184f8 <xTaskRemoveFromEventList>
 801784a:	2800      	cmp	r0, #0
 801784c:	d0ef      	beq.n	801782e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 801784e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017856:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801785a:	f3bf 8f4f 	dsb	sy
 801785e:	f3bf 8f6f 	isb	sy
 8017862:	e7e4      	b.n	801782e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017864:	b146      	cbz	r6, 8017878 <xQueueSemaphoreTake+0xb0>
 8017866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801786a:	f383 8811 	msr	BASEPRI, r3
 801786e:	f3bf 8f6f 	isb	sy
 8017872:	f3bf 8f4f 	dsb	sy
 8017876:	e7fe      	b.n	8017876 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8017878:	f001 fa96 	bl	8018da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801787c:	e7da      	b.n	8017834 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801787e:	a802      	add	r0, sp, #8
 8017880:	f000 fe80 	bl	8018584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017884:	2501      	movs	r5, #1
 8017886:	e02a      	b.n	80178de <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8017888:	2300      	movs	r3, #0
 801788a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801788e:	e032      	b.n	80178f6 <xQueueSemaphoreTake+0x12e>
 8017890:	2300      	movs	r3, #0
 8017892:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8017896:	e034      	b.n	8017902 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8017898:	f001 fa64 	bl	8018d64 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801789c:	68a0      	ldr	r0, [r4, #8]
 801789e:	f000 fedb 	bl	8018658 <xTaskPriorityInherit>
 80178a2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80178a4:	f001 fa80 	bl	8018da8 <vPortExitCritical>
 80178a8:	e03b      	b.n	8017922 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 80178aa:	4620      	mov	r0, r4
 80178ac:	f7ff fc74 	bl	8017198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80178b0:	f000 fcfa 	bl	80182a8 <xTaskResumeAll>
 80178b4:	e009      	b.n	80178ca <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 80178b6:	4620      	mov	r0, r4
 80178b8:	f7ff fc6e 	bl	8017198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80178bc:	f000 fcf4 	bl	80182a8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80178c0:	4620      	mov	r0, r4
 80178c2:	f7ff fc0f 	bl	80170e4 <prvIsQueueEmpty>
 80178c6:	2800      	cmp	r0, #0
 80178c8:	d142      	bne.n	8017950 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 80178ca:	f001 fa4b 	bl	8018d64 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80178ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d1a6      	bne.n	8017822 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80178d4:	9b01      	ldr	r3, [sp, #4]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d0c4      	beq.n	8017864 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 80178da:	2d00      	cmp	r5, #0
 80178dc:	d0cf      	beq.n	801787e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 80178de:	f001 fa63 	bl	8018da8 <vPortExitCritical>
		vTaskSuspendAll();
 80178e2:	f000 fc47 	bl	8018174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80178e6:	f001 fa3d 	bl	8018d64 <vPortEnterCritical>
 80178ea:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80178ee:	b25b      	sxtb	r3, r3
 80178f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80178f4:	d0c8      	beq.n	8017888 <xQueueSemaphoreTake+0xc0>
 80178f6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80178fa:	b25b      	sxtb	r3, r3
 80178fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017900:	d0c6      	beq.n	8017890 <xQueueSemaphoreTake+0xc8>
 8017902:	f001 fa51 	bl	8018da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017906:	a901      	add	r1, sp, #4
 8017908:	a802      	add	r0, sp, #8
 801790a:	f000 fe47 	bl	801859c <xTaskCheckForTimeOut>
 801790e:	2800      	cmp	r0, #0
 8017910:	d1d1      	bne.n	80178b6 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017912:	4620      	mov	r0, r4
 8017914:	f7ff fbe6 	bl	80170e4 <prvIsQueueEmpty>
 8017918:	2800      	cmp	r0, #0
 801791a:	d0c6      	beq.n	80178aa <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801791c:	6823      	ldr	r3, [r4, #0]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d0ba      	beq.n	8017898 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017922:	9901      	ldr	r1, [sp, #4]
 8017924:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017928:	f000 fdb2 	bl	8018490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801792c:	4620      	mov	r0, r4
 801792e:	f7ff fc33 	bl	8017198 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017932:	f000 fcb9 	bl	80182a8 <xTaskResumeAll>
 8017936:	2800      	cmp	r0, #0
 8017938:	d1c7      	bne.n	80178ca <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 801793a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801793e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017942:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017946:	f3bf 8f4f 	dsb	sy
 801794a:	f3bf 8f6f 	isb	sy
 801794e:	e7bc      	b.n	80178ca <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8017950:	b90e      	cbnz	r6, 8017956 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8017952:	2600      	movs	r6, #0
 8017954:	e76e      	b.n	8017834 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8017956:	f001 fa05 	bl	8018d64 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801795a:	4620      	mov	r0, r4
 801795c:	f7ff fbab 	bl	80170b6 <prvGetDisinheritPriorityAfterTimeout>
 8017960:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017962:	68a0      	ldr	r0, [r4, #8]
 8017964:	f000 ff0c 	bl	8018780 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8017968:	f001 fa1e 	bl	8018da8 <vPortExitCritical>
 801796c:	e7f1      	b.n	8017952 <xQueueSemaphoreTake+0x18a>

0801796e <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 801796e:	b180      	cbz	r0, 8017992 <xQueueTakeMutexRecursive+0x24>
	{
 8017970:	b570      	push	{r4, r5, r6, lr}
 8017972:	460c      	mov	r4, r1
 8017974:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8017976:	6886      	ldr	r6, [r0, #8]
 8017978:	f000 fe58 	bl	801862c <xTaskGetCurrentTaskHandle>
 801797c:	4286      	cmp	r6, r0
 801797e:	d011      	beq.n	80179a4 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8017980:	4621      	mov	r1, r4
 8017982:	4628      	mov	r0, r5
 8017984:	f7ff ff20 	bl	80177c8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8017988:	b180      	cbz	r0, 80179ac <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801798a:	68eb      	ldr	r3, [r5, #12]
 801798c:	3301      	adds	r3, #1
 801798e:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8017990:	e00c      	b.n	80179ac <xQueueTakeMutexRecursive+0x3e>
 8017992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017996:	f383 8811 	msr	BASEPRI, r3
 801799a:	f3bf 8f6f 	isb	sy
 801799e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80179a2:	e7fe      	b.n	80179a2 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80179a4:	68eb      	ldr	r3, [r5, #12]
 80179a6:	3301      	adds	r3, #1
 80179a8:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 80179aa:	2001      	movs	r0, #1
	}
 80179ac:	bd70      	pop	{r4, r5, r6, pc}

080179ae <xQueuePeek>:
{
 80179ae:	b570      	push	{r4, r5, r6, lr}
 80179b0:	b084      	sub	sp, #16
 80179b2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80179b4:	b190      	cbz	r0, 80179dc <xQueuePeek+0x2e>
 80179b6:	460e      	mov	r6, r1
 80179b8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80179ba:	b1c1      	cbz	r1, 80179ee <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80179bc:	f000 fe3c 	bl	8018638 <xTaskGetSchedulerState>
 80179c0:	4605      	mov	r5, r0
 80179c2:	bb00      	cbnz	r0, 8017a06 <xQueuePeek+0x58>
 80179c4:	9b01      	ldr	r3, [sp, #4]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d05e      	beq.n	8017a88 <xQueuePeek+0xda>
 80179ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179ce:	f383 8811 	msr	BASEPRI, r3
 80179d2:	f3bf 8f6f 	isb	sy
 80179d6:	f3bf 8f4f 	dsb	sy
 80179da:	e7fe      	b.n	80179da <xQueuePeek+0x2c>
 80179dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179e0:	f383 8811 	msr	BASEPRI, r3
 80179e4:	f3bf 8f6f 	isb	sy
 80179e8:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80179ec:	e7fe      	b.n	80179ec <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80179ee:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d0e3      	beq.n	80179bc <xQueuePeek+0xe>
 80179f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179f8:	f383 8811 	msr	BASEPRI, r3
 80179fc:	f3bf 8f6f 	isb	sy
 8017a00:	f3bf 8f4f 	dsb	sy
 8017a04:	e7fe      	b.n	8017a04 <xQueuePeek+0x56>
 8017a06:	2500      	movs	r5, #0
 8017a08:	e03e      	b.n	8017a88 <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8017a0a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017a0c:	4631      	mov	r1, r6
 8017a0e:	4620      	mov	r0, r4
 8017a10:	f7ff fbb0 	bl	8017174 <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8017a14:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017a16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017a18:	b923      	cbnz	r3, 8017a24 <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 8017a1a:	f001 f9c5 	bl	8018da8 <vPortExitCritical>
				return pdPASS;
 8017a1e:	2001      	movs	r0, #1
}
 8017a20:	b004      	add	sp, #16
 8017a22:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017a24:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017a28:	f000 fd66 	bl	80184f8 <xTaskRemoveFromEventList>
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	d0f4      	beq.n	8017a1a <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8017a30:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017a34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017a38:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017a3c:	f3bf 8f4f 	dsb	sy
 8017a40:	f3bf 8f6f 	isb	sy
 8017a44:	e7e9      	b.n	8017a1a <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 8017a46:	f001 f9af 	bl	8018da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8017a4a:	2000      	movs	r0, #0
 8017a4c:	e7e8      	b.n	8017a20 <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017a4e:	a802      	add	r0, sp, #8
 8017a50:	f000 fd98 	bl	8018584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017a54:	2501      	movs	r5, #1
 8017a56:	e021      	b.n	8017a9c <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 8017a58:	2300      	movs	r3, #0
 8017a5a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017a5e:	e029      	b.n	8017ab4 <xQueuePeek+0x106>
 8017a60:	2300      	movs	r3, #0
 8017a62:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8017a66:	e02b      	b.n	8017ac0 <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 8017a68:	4620      	mov	r0, r4
 8017a6a:	f7ff fb95 	bl	8017198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017a6e:	f000 fc1b 	bl	80182a8 <xTaskResumeAll>
 8017a72:	e009      	b.n	8017a88 <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 8017a74:	4620      	mov	r0, r4
 8017a76:	f7ff fb8f 	bl	8017198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017a7a:	f000 fc15 	bl	80182a8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017a7e:	4620      	mov	r0, r4
 8017a80:	f7ff fb30 	bl	80170e4 <prvIsQueueEmpty>
 8017a84:	2800      	cmp	r0, #0
 8017a86:	d13f      	bne.n	8017b08 <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 8017a88:	f001 f96c 	bl	8018d64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017a8c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d1bb      	bne.n	8017a0a <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8017a92:	9b01      	ldr	r3, [sp, #4]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d0d6      	beq.n	8017a46 <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8017a98:	2d00      	cmp	r5, #0
 8017a9a:	d0d8      	beq.n	8017a4e <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 8017a9c:	f001 f984 	bl	8018da8 <vPortExitCritical>
		vTaskSuspendAll();
 8017aa0:	f000 fb68 	bl	8018174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017aa4:	f001 f95e 	bl	8018d64 <vPortEnterCritical>
 8017aa8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017aac:	b25b      	sxtb	r3, r3
 8017aae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017ab2:	d0d1      	beq.n	8017a58 <xQueuePeek+0xaa>
 8017ab4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8017ab8:	b25b      	sxtb	r3, r3
 8017aba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017abe:	d0cf      	beq.n	8017a60 <xQueuePeek+0xb2>
 8017ac0:	f001 f972 	bl	8018da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017ac4:	a901      	add	r1, sp, #4
 8017ac6:	a802      	add	r0, sp, #8
 8017ac8:	f000 fd68 	bl	801859c <xTaskCheckForTimeOut>
 8017acc:	2800      	cmp	r0, #0
 8017ace:	d1d1      	bne.n	8017a74 <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	f7ff fb07 	bl	80170e4 <prvIsQueueEmpty>
 8017ad6:	2800      	cmp	r0, #0
 8017ad8:	d0c6      	beq.n	8017a68 <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017ada:	9901      	ldr	r1, [sp, #4]
 8017adc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017ae0:	f000 fcd6 	bl	8018490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017ae4:	4620      	mov	r0, r4
 8017ae6:	f7ff fb57 	bl	8017198 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017aea:	f000 fbdd 	bl	80182a8 <xTaskResumeAll>
 8017aee:	2800      	cmp	r0, #0
 8017af0:	d1ca      	bne.n	8017a88 <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 8017af2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017afa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017afe:	f3bf 8f4f 	dsb	sy
 8017b02:	f3bf 8f6f 	isb	sy
 8017b06:	e7bf      	b.n	8017a88 <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 8017b08:	2000      	movs	r0, #0
 8017b0a:	e789      	b.n	8017a20 <xQueuePeek+0x72>

08017b0c <xQueueReceiveFromISR>:
{
 8017b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8017b10:	b1b0      	cbz	r0, 8017b40 <xQueueReceiveFromISR+0x34>
 8017b12:	460d      	mov	r5, r1
 8017b14:	4690      	mov	r8, r2
 8017b16:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017b18:	b1d9      	cbz	r1, 8017b52 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017b1a:	f001 fa49 	bl	8018fb0 <vPortValidateInterruptPriority>
	__asm volatile
 8017b1e:	f3ef 8711 	mrs	r7, BASEPRI
 8017b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b26:	f383 8811 	msr	BASEPRI, r3
 8017b2a:	f3bf 8f6f 	isb	sy
 8017b2e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017b32:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017b34:	b9ce      	cbnz	r6, 8017b6a <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8017b36:	2000      	movs	r0, #0
	__asm volatile
 8017b38:	f387 8811 	msr	BASEPRI, r7
}
 8017b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8017b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b44:	f383 8811 	msr	BASEPRI, r3
 8017b48:	f3bf 8f6f 	isb	sy
 8017b4c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8017b50:	e7fe      	b.n	8017b50 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017b52:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d0e0      	beq.n	8017b1a <xQueueReceiveFromISR+0xe>
 8017b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b5c:	f383 8811 	msr	BASEPRI, r3
 8017b60:	f3bf 8f6f 	isb	sy
 8017b64:	f3bf 8f4f 	dsb	sy
 8017b68:	e7fe      	b.n	8017b68 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8017b6a:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8017b6e:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017b72:	4629      	mov	r1, r5
 8017b74:	4620      	mov	r0, r4
 8017b76:	f7ff fafd 	bl	8017174 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017b7a:	1e73      	subs	r3, r6, #1
 8017b7c:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8017b7e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8017b82:	d006      	beq.n	8017b92 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017b84:	f109 0301 	add.w	r3, r9, #1
 8017b88:	b25b      	sxtb	r3, r3
 8017b8a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8017b8e:	2001      	movs	r0, #1
 8017b90:	e7d2      	b.n	8017b38 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017b92:	6923      	ldr	r3, [r4, #16]
 8017b94:	b90b      	cbnz	r3, 8017b9a <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8017b96:	2001      	movs	r0, #1
 8017b98:	e7ce      	b.n	8017b38 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017b9a:	f104 0010 	add.w	r0, r4, #16
 8017b9e:	f000 fcab 	bl	80184f8 <xTaskRemoveFromEventList>
 8017ba2:	b130      	cbz	r0, 8017bb2 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8017ba4:	f1b8 0f00 	cmp.w	r8, #0
 8017ba8:	d005      	beq.n	8017bb6 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017baa:	2001      	movs	r0, #1
 8017bac:	f8c8 0000 	str.w	r0, [r8]
 8017bb0:	e7c2      	b.n	8017b38 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8017bb2:	2001      	movs	r0, #1
 8017bb4:	e7c0      	b.n	8017b38 <xQueueReceiveFromISR+0x2c>
 8017bb6:	2001      	movs	r0, #1
 8017bb8:	e7be      	b.n	8017b38 <xQueueReceiveFromISR+0x2c>

08017bba <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8017bba:	b140      	cbz	r0, 8017bce <uxQueueMessagesWaiting+0x14>
{
 8017bbc:	b510      	push	{r4, lr}
 8017bbe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8017bc0:	f001 f8d0 	bl	8018d64 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8017bc4:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8017bc6:	f001 f8ef 	bl	8018da8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8017bca:	4620      	mov	r0, r4
 8017bcc:	bd10      	pop	{r4, pc}
 8017bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017bd2:	f383 8811 	msr	BASEPRI, r3
 8017bd6:	f3bf 8f6f 	isb	sy
 8017bda:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8017bde:	e7fe      	b.n	8017bde <uxQueueMessagesWaiting+0x24>

08017be0 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8017be0:	b108      	cbz	r0, 8017be6 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8017be2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8017be4:	4770      	bx	lr
 8017be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017bea:	f383 8811 	msr	BASEPRI, r3
 8017bee:	f3bf 8f6f 	isb	sy
 8017bf2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8017bf6:	e7fe      	b.n	8017bf6 <uxQueueMessagesWaitingFromISR+0x16>

08017bf8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	2b07      	cmp	r3, #7
 8017bfc:	d80c      	bhi.n	8017c18 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017bfe:	4a07      	ldr	r2, [pc, #28]	@ (8017c1c <vQueueAddToRegistry+0x24>)
 8017c00:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8017c04:	b10a      	cbz	r2, 8017c0a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017c06:	3301      	adds	r3, #1
 8017c08:	e7f7      	b.n	8017bfa <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017c0a:	4a04      	ldr	r2, [pc, #16]	@ (8017c1c <vQueueAddToRegistry+0x24>)
 8017c0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017c10:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017c14:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017c16:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017c18:	4770      	bx	lr
 8017c1a:	bf00      	nop
 8017c1c:	200017ac 	.word	0x200017ac

08017c20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017c20:	b570      	push	{r4, r5, r6, lr}
 8017c22:	4604      	mov	r4, r0
 8017c24:	460d      	mov	r5, r1
 8017c26:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017c28:	f001 f89c 	bl	8018d64 <vPortEnterCritical>
 8017c2c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017c30:	b25b      	sxtb	r3, r3
 8017c32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017c36:	d00d      	beq.n	8017c54 <vQueueWaitForMessageRestricted+0x34>
 8017c38:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8017c3c:	b25b      	sxtb	r3, r3
 8017c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017c42:	d00b      	beq.n	8017c5c <vQueueWaitForMessageRestricted+0x3c>
 8017c44:	f001 f8b0 	bl	8018da8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017c48:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017c4a:	b15b      	cbz	r3, 8017c64 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017c4c:	4620      	mov	r0, r4
 8017c4e:	f7ff faa3 	bl	8017198 <prvUnlockQueue>
	}
 8017c52:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8017c54:	2300      	movs	r3, #0
 8017c56:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017c5a:	e7ed      	b.n	8017c38 <vQueueWaitForMessageRestricted+0x18>
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8017c62:	e7ef      	b.n	8017c44 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017c64:	4632      	mov	r2, r6
 8017c66:	4629      	mov	r1, r5
 8017c68:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017c6c:	f000 fc28 	bl	80184c0 <vTaskPlaceOnEventListRestricted>
 8017c70:	e7ec      	b.n	8017c4c <vQueueWaitForMessageRestricted+0x2c>
	...

08017c74 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017c74:	4b08      	ldr	r3, [pc, #32]	@ (8017c98 <prvResetNextTaskUnblockTime+0x24>)
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	b923      	cbnz	r3, 8017c86 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017c7c:	4b07      	ldr	r3, [pc, #28]	@ (8017c9c <prvResetNextTaskUnblockTime+0x28>)
 8017c7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017c82:	601a      	str	r2, [r3, #0]
 8017c84:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c86:	4b04      	ldr	r3, [pc, #16]	@ (8017c98 <prvResetNextTaskUnblockTime+0x24>)
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	68db      	ldr	r3, [r3, #12]
 8017c8c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017c8e:	685a      	ldr	r2, [r3, #4]
 8017c90:	4b02      	ldr	r3, [pc, #8]	@ (8017c9c <prvResetNextTaskUnblockTime+0x28>)
 8017c92:	601a      	str	r2, [r3, #0]
	}
}
 8017c94:	4770      	bx	lr
 8017c96:	bf00      	nop
 8017c98:	2000185c 	.word	0x2000185c
 8017c9c:	200017f4 	.word	0x200017f4

08017ca0 <prvInitialiseNewTask>:
{
 8017ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ca4:	4680      	mov	r8, r0
 8017ca6:	460d      	mov	r5, r1
 8017ca8:	4617      	mov	r7, r2
 8017caa:	4699      	mov	r9, r3
 8017cac:	9e08      	ldr	r6, [sp, #32]
 8017cae:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8017cb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017cb4:	0092      	lsls	r2, r2, #2
 8017cb6:	21a5      	movs	r1, #165	@ 0xa5
 8017cb8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017cba:	f011 ff11 	bl	8029ae0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017cbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017cc0:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8017cc4:	3a01      	subs	r2, #1
 8017cc6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017cca:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8017cce:	2d00      	cmp	r5, #0
 8017cd0:	d061      	beq.n	8017d96 <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017cd2:	f04f 0c00 	mov.w	ip, #0
 8017cd6:	f1bc 0f0f 	cmp.w	ip, #15
 8017cda:	d809      	bhi.n	8017cf0 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017cdc:	f815 300c 	ldrb.w	r3, [r5, ip]
 8017ce0:	eb04 020c 	add.w	r2, r4, ip
 8017ce4:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8017ce8:	b113      	cbz	r3, 8017cf0 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017cea:	f10c 0c01 	add.w	ip, ip, #1
 8017cee:	e7f2      	b.n	8017cd6 <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017cf6:	2e37      	cmp	r6, #55	@ 0x37
 8017cf8:	d900      	bls.n	8017cfc <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017cfa:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8017cfc:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8017cfe:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017d00:	2500      	movs	r5, #0
 8017d02:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017d04:	1d20      	adds	r0, r4, #4
 8017d06:	f7ff f99c 	bl	8017042 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017d0a:	f104 0018 	add.w	r0, r4, #24
 8017d0e:	f7ff f998 	bl	8017042 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017d12:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d14:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8017d18:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017d1a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8017d1c:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017d20:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017d24:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8017d28:	4629      	mov	r1, r5
 8017d2a:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017d2e:	f011 fed7 	bl	8029ae0 <memset>
 8017d32:	4b1b      	ldr	r3, [pc, #108]	@ (8017da0 <prvInitialiseNewTask+0x100>)
 8017d34:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8017d36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017d3a:	6622      	str	r2, [r4, #96]	@ 0x60
 8017d3c:	33d0      	adds	r3, #208	@ 0xd0
 8017d3e:	6663      	str	r3, [r4, #100]	@ 0x64
 8017d40:	2201      	movs	r2, #1
 8017d42:	2300      	movs	r3, #0
 8017d44:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 8017d48:	f243 330e 	movw	r3, #13070	@ 0x330e
 8017d4c:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 8017d50:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 8017d54:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 8017d58:	f241 2334 	movw	r3, #4660	@ 0x1234
 8017d5c:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 8017d60:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 8017d64:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 8017d68:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 8017d6c:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8017d70:	2305      	movs	r3, #5
 8017d72:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 8017d76:	230b      	movs	r3, #11
 8017d78:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017d7c:	464a      	mov	r2, r9
 8017d7e:	4641      	mov	r1, r8
 8017d80:	4638      	mov	r0, r7
 8017d82:	f000 ffc3 	bl	8018d0c <pxPortInitialiseStack>
 8017d86:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8017d88:	f1ba 0f00 	cmp.w	sl, #0
 8017d8c:	d001      	beq.n	8017d92 <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017d8e:	f8ca 4000 	str.w	r4, [sl]
}
 8017d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017d96:	2300      	movs	r3, #0
 8017d98:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8017d9c:	e7ab      	b.n	8017cf6 <prvInitialiseNewTask+0x56>
 8017d9e:	bf00      	nop
 8017da0:	20018024 	.word	0x20018024

08017da4 <prvInitialiseTaskLists>:
{
 8017da4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017da6:	2400      	movs	r4, #0
 8017da8:	e007      	b.n	8017dba <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017daa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8017dae:	0093      	lsls	r3, r2, #2
 8017db0:	480e      	ldr	r0, [pc, #56]	@ (8017dec <prvInitialiseTaskLists+0x48>)
 8017db2:	4418      	add	r0, r3
 8017db4:	f7ff f93a 	bl	801702c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017db8:	3401      	adds	r4, #1
 8017dba:	2c37      	cmp	r4, #55	@ 0x37
 8017dbc:	d9f5      	bls.n	8017daa <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8017dbe:	4d0c      	ldr	r5, [pc, #48]	@ (8017df0 <prvInitialiseTaskLists+0x4c>)
 8017dc0:	4628      	mov	r0, r5
 8017dc2:	f7ff f933 	bl	801702c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017dc6:	4c0b      	ldr	r4, [pc, #44]	@ (8017df4 <prvInitialiseTaskLists+0x50>)
 8017dc8:	4620      	mov	r0, r4
 8017dca:	f7ff f92f 	bl	801702c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017dce:	480a      	ldr	r0, [pc, #40]	@ (8017df8 <prvInitialiseTaskLists+0x54>)
 8017dd0:	f7ff f92c 	bl	801702c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8017dd4:	4809      	ldr	r0, [pc, #36]	@ (8017dfc <prvInitialiseTaskLists+0x58>)
 8017dd6:	f7ff f929 	bl	801702c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8017dda:	4809      	ldr	r0, [pc, #36]	@ (8017e00 <prvInitialiseTaskLists+0x5c>)
 8017ddc:	f7ff f926 	bl	801702c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8017de0:	4b08      	ldr	r3, [pc, #32]	@ (8017e04 <prvInitialiseTaskLists+0x60>)
 8017de2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017de4:	4b08      	ldr	r3, [pc, #32]	@ (8017e08 <prvInitialiseTaskLists+0x64>)
 8017de6:	601c      	str	r4, [r3, #0]
}
 8017de8:	bd38      	pop	{r3, r4, r5, pc}
 8017dea:	bf00      	nop
 8017dec:	20001888 	.word	0x20001888
 8017df0:	20001874 	.word	0x20001874
 8017df4:	20001860 	.word	0x20001860
 8017df8:	20001844 	.word	0x20001844
 8017dfc:	20001830 	.word	0x20001830
 8017e00:	20001818 	.word	0x20001818
 8017e04:	2000185c 	.word	0x2000185c
 8017e08:	20001858 	.word	0x20001858

08017e0c <prvAddNewTaskToReadyList>:
{
 8017e0c:	b510      	push	{r4, lr}
 8017e0e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8017e10:	f000 ffa8 	bl	8018d64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8017e14:	4a22      	ldr	r2, [pc, #136]	@ (8017ea0 <prvAddNewTaskToReadyList+0x94>)
 8017e16:	6813      	ldr	r3, [r2, #0]
 8017e18:	3301      	adds	r3, #1
 8017e1a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017e1c:	4b21      	ldr	r3, [pc, #132]	@ (8017ea4 <prvAddNewTaskToReadyList+0x98>)
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	b15b      	cbz	r3, 8017e3a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8017e22:	4b21      	ldr	r3, [pc, #132]	@ (8017ea8 <prvAddNewTaskToReadyList+0x9c>)
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	b96b      	cbnz	r3, 8017e44 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017e28:	4b1e      	ldr	r3, [pc, #120]	@ (8017ea4 <prvAddNewTaskToReadyList+0x98>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017e2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8017e30:	429a      	cmp	r2, r3
 8017e32:	d807      	bhi.n	8017e44 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8017e34:	4b1b      	ldr	r3, [pc, #108]	@ (8017ea4 <prvAddNewTaskToReadyList+0x98>)
 8017e36:	601c      	str	r4, [r3, #0]
 8017e38:	e004      	b.n	8017e44 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8017e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8017ea4 <prvAddNewTaskToReadyList+0x98>)
 8017e3c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017e3e:	6813      	ldr	r3, [r2, #0]
 8017e40:	2b01      	cmp	r3, #1
 8017e42:	d029      	beq.n	8017e98 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8017e44:	4a19      	ldr	r2, [pc, #100]	@ (8017eac <prvAddNewTaskToReadyList+0xa0>)
 8017e46:	6813      	ldr	r3, [r2, #0]
 8017e48:	3301      	adds	r3, #1
 8017e4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017e4c:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8017e4e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017e50:	4b17      	ldr	r3, [pc, #92]	@ (8017eb0 <prvAddNewTaskToReadyList+0xa4>)
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	4298      	cmp	r0, r3
 8017e56:	d901      	bls.n	8017e5c <prvAddNewTaskToReadyList+0x50>
 8017e58:	4b15      	ldr	r3, [pc, #84]	@ (8017eb0 <prvAddNewTaskToReadyList+0xa4>)
 8017e5a:	6018      	str	r0, [r3, #0]
 8017e5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017e60:	1d21      	adds	r1, r4, #4
 8017e62:	4b14      	ldr	r3, [pc, #80]	@ (8017eb4 <prvAddNewTaskToReadyList+0xa8>)
 8017e64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017e68:	f7ff f8ee 	bl	8017048 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8017e6c:	f000 ff9c 	bl	8018da8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8017e70:	4b0d      	ldr	r3, [pc, #52]	@ (8017ea8 <prvAddNewTaskToReadyList+0x9c>)
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	b17b      	cbz	r3, 8017e96 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017e76:	4b0b      	ldr	r3, [pc, #44]	@ (8017ea4 <prvAddNewTaskToReadyList+0x98>)
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017e7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8017e7e:	429a      	cmp	r2, r3
 8017e80:	d209      	bcs.n	8017e96 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8017e82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017e8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017e8e:	f3bf 8f4f 	dsb	sy
 8017e92:	f3bf 8f6f 	isb	sy
}
 8017e96:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8017e98:	f7ff ff84 	bl	8017da4 <prvInitialiseTaskLists>
 8017e9c:	e7d2      	b.n	8017e44 <prvAddNewTaskToReadyList+0x38>
 8017e9e:	bf00      	nop
 8017ea0:	20001814 	.word	0x20001814
 8017ea4:	20001ce8 	.word	0x20001ce8
 8017ea8:	20001808 	.word	0x20001808
 8017eac:	200017f8 	.word	0x200017f8
 8017eb0:	2000180c 	.word	0x2000180c
 8017eb4:	20001888 	.word	0x20001888

08017eb8 <prvDeleteTCB>:
	{
 8017eb8:	b510      	push	{r4, lr}
 8017eba:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017ebc:	3058      	adds	r0, #88	@ 0x58
 8017ebe:	f012 ffb1 	bl	802ae24 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017ec2:	f894 317d 	ldrb.w	r3, [r4, #381]	@ 0x17d
 8017ec6:	b163      	cbz	r3, 8017ee2 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017ec8:	2b01      	cmp	r3, #1
 8017eca:	d011      	beq.n	8017ef0 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017ecc:	2b02      	cmp	r3, #2
 8017ece:	d00e      	beq.n	8017eee <prvDeleteTCB+0x36>
 8017ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ed4:	f383 8811 	msr	BASEPRI, r3
 8017ed8:	f3bf 8f6f 	isb	sy
 8017edc:	f3bf 8f4f 	dsb	sy
 8017ee0:	e7fe      	b.n	8017ee0 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8017ee2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017ee4:	f001 f97a 	bl	80191dc <vPortFree>
				vPortFree( pxTCB );
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f001 f977 	bl	80191dc <vPortFree>
	}
 8017eee:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8017ef0:	4620      	mov	r0, r4
 8017ef2:	f001 f973 	bl	80191dc <vPortFree>
 8017ef6:	e7fa      	b.n	8017eee <prvDeleteTCB+0x36>

08017ef8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8017f38 <prvCheckTasksWaitingTermination+0x40>)
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	b1d3      	cbz	r3, 8017f34 <prvCheckTasksWaitingTermination+0x3c>
{
 8017efe:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8017f00:	f000 ff30 	bl	8018d64 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f04:	4b0d      	ldr	r3, [pc, #52]	@ (8017f3c <prvCheckTasksWaitingTermination+0x44>)
 8017f06:	68db      	ldr	r3, [r3, #12]
 8017f08:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017f0a:	1d20      	adds	r0, r4, #4
 8017f0c:	f7ff f8c0 	bl	8017090 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017f10:	4a0b      	ldr	r2, [pc, #44]	@ (8017f40 <prvCheckTasksWaitingTermination+0x48>)
 8017f12:	6813      	ldr	r3, [r2, #0]
 8017f14:	3b01      	subs	r3, #1
 8017f16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017f18:	4a07      	ldr	r2, [pc, #28]	@ (8017f38 <prvCheckTasksWaitingTermination+0x40>)
 8017f1a:	6813      	ldr	r3, [r2, #0]
 8017f1c:	3b01      	subs	r3, #1
 8017f1e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8017f20:	f000 ff42 	bl	8018da8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8017f24:	4620      	mov	r0, r4
 8017f26:	f7ff ffc7 	bl	8017eb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017f2a:	4b03      	ldr	r3, [pc, #12]	@ (8017f38 <prvCheckTasksWaitingTermination+0x40>)
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d1e6      	bne.n	8017f00 <prvCheckTasksWaitingTermination+0x8>
}
 8017f32:	bd10      	pop	{r4, pc}
 8017f34:	4770      	bx	lr
 8017f36:	bf00      	nop
 8017f38:	2000182c 	.word	0x2000182c
 8017f3c:	20001830 	.word	0x20001830
 8017f40:	20001814 	.word	0x20001814

08017f44 <prvIdleTask>:
{
 8017f44:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8017f46:	f7ff ffd7 	bl	8017ef8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017f4a:	4b07      	ldr	r3, [pc, #28]	@ (8017f68 <prvIdleTask+0x24>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	2b01      	cmp	r3, #1
 8017f50:	d9f9      	bls.n	8017f46 <prvIdleTask+0x2>
				taskYIELD();
 8017f52:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017f5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017f5e:	f3bf 8f4f 	dsb	sy
 8017f62:	f3bf 8f6f 	isb	sy
 8017f66:	e7ee      	b.n	8017f46 <prvIdleTask+0x2>
 8017f68:	20001888 	.word	0x20001888

08017f6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017f6c:	b570      	push	{r4, r5, r6, lr}
 8017f6e:	4604      	mov	r4, r0
 8017f70:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017f72:	4b17      	ldr	r3, [pc, #92]	@ (8017fd0 <prvAddCurrentTaskToDelayedList+0x64>)
 8017f74:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017f76:	4b17      	ldr	r3, [pc, #92]	@ (8017fd4 <prvAddCurrentTaskToDelayedList+0x68>)
 8017f78:	6818      	ldr	r0, [r3, #0]
 8017f7a:	3004      	adds	r0, #4
 8017f7c:	f7ff f888 	bl	8017090 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017f80:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8017f84:	d00d      	beq.n	8017fa2 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017f86:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017f88:	4b12      	ldr	r3, [pc, #72]	@ (8017fd4 <prvAddCurrentTaskToDelayedList+0x68>)
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8017f8e:	42a6      	cmp	r6, r4
 8017f90:	d910      	bls.n	8017fb4 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f92:	4b11      	ldr	r3, [pc, #68]	@ (8017fd8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8017f94:	6818      	ldr	r0, [r3, #0]
 8017f96:	4b0f      	ldr	r3, [pc, #60]	@ (8017fd4 <prvAddCurrentTaskToDelayedList+0x68>)
 8017f98:	6819      	ldr	r1, [r3, #0]
 8017f9a:	3104      	adds	r1, #4
 8017f9c:	f7ff f85f 	bl	801705e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017fa0:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017fa2:	2d00      	cmp	r5, #0
 8017fa4:	d0ef      	beq.n	8017f86 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8017fd4 <prvAddCurrentTaskToDelayedList+0x68>)
 8017fa8:	6819      	ldr	r1, [r3, #0]
 8017faa:	3104      	adds	r1, #4
 8017fac:	480b      	ldr	r0, [pc, #44]	@ (8017fdc <prvAddCurrentTaskToDelayedList+0x70>)
 8017fae:	f7ff f84b 	bl	8017048 <vListInsertEnd>
 8017fb2:	e7f5      	b.n	8017fa0 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8017fe0 <prvAddCurrentTaskToDelayedList+0x74>)
 8017fb6:	6818      	ldr	r0, [r3, #0]
 8017fb8:	4b06      	ldr	r3, [pc, #24]	@ (8017fd4 <prvAddCurrentTaskToDelayedList+0x68>)
 8017fba:	6819      	ldr	r1, [r3, #0]
 8017fbc:	3104      	adds	r1, #4
 8017fbe:	f7ff f84e 	bl	801705e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017fc2:	4b08      	ldr	r3, [pc, #32]	@ (8017fe4 <prvAddCurrentTaskToDelayedList+0x78>)
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	42a3      	cmp	r3, r4
 8017fc8:	d9ea      	bls.n	8017fa0 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8017fca:	4b06      	ldr	r3, [pc, #24]	@ (8017fe4 <prvAddCurrentTaskToDelayedList+0x78>)
 8017fcc:	601c      	str	r4, [r3, #0]
}
 8017fce:	e7e7      	b.n	8017fa0 <prvAddCurrentTaskToDelayedList+0x34>
 8017fd0:	20001810 	.word	0x20001810
 8017fd4:	20001ce8 	.word	0x20001ce8
 8017fd8:	20001858 	.word	0x20001858
 8017fdc:	20001818 	.word	0x20001818
 8017fe0:	2000185c 	.word	0x2000185c
 8017fe4:	200017f4 	.word	0x200017f4

08017fe8 <xTaskCreateStatic>:
	{
 8017fe8:	b530      	push	{r4, r5, lr}
 8017fea:	b087      	sub	sp, #28
 8017fec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8017fee:	b18c      	cbz	r4, 8018014 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8017ff0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8017ff2:	b1c5      	cbz	r5, 8018026 <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8017ff4:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 8017ff8:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017ffa:	9d04      	ldr	r5, [sp, #16]
 8017ffc:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 8018000:	d01a      	beq.n	8018038 <xTaskCreateStatic+0x50>
 8018002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018006:	f383 8811 	msr	BASEPRI, r3
 801800a:	f3bf 8f6f 	isb	sy
 801800e:	f3bf 8f4f 	dsb	sy
 8018012:	e7fe      	b.n	8018012 <xTaskCreateStatic+0x2a>
 8018014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018018:	f383 8811 	msr	BASEPRI, r3
 801801c:	f3bf 8f6f 	isb	sy
 8018020:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8018024:	e7fe      	b.n	8018024 <xTaskCreateStatic+0x3c>
 8018026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801802a:	f383 8811 	msr	BASEPRI, r3
 801802e:	f3bf 8f6f 	isb	sy
 8018032:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8018036:	e7fe      	b.n	8018036 <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018038:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801803a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801803c:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801803e:	2402      	movs	r4, #2
 8018040:	f885 417d 	strb.w	r4, [r5, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018044:	2400      	movs	r4, #0
 8018046:	9403      	str	r4, [sp, #12]
 8018048:	9502      	str	r5, [sp, #8]
 801804a:	ac05      	add	r4, sp, #20
 801804c:	9401      	str	r4, [sp, #4]
 801804e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018050:	9400      	str	r4, [sp, #0]
 8018052:	f7ff fe25 	bl	8017ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018056:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8018058:	f7ff fed8 	bl	8017e0c <prvAddNewTaskToReadyList>
	}
 801805c:	9805      	ldr	r0, [sp, #20]
 801805e:	b007      	add	sp, #28
 8018060:	bd30      	pop	{r4, r5, pc}

08018062 <xTaskCreate>:
	{
 8018062:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018066:	b085      	sub	sp, #20
 8018068:	4607      	mov	r7, r0
 801806a:	4688      	mov	r8, r1
 801806c:	4614      	mov	r4, r2
 801806e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018070:	0090      	lsls	r0, r2, #2
 8018072:	f001 f831 	bl	80190d8 <pvPortMalloc>
			if( pxStack != NULL )
 8018076:	b310      	cbz	r0, 80180be <xTaskCreate+0x5c>
 8018078:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801807a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801807e:	f001 f82b 	bl	80190d8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8018082:	4605      	mov	r5, r0
 8018084:	b1a8      	cbz	r0, 80180b2 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8018086:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801808a:	2300      	movs	r3, #0
 801808c:	f880 317d 	strb.w	r3, [r0, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018090:	9303      	str	r3, [sp, #12]
 8018092:	9002      	str	r0, [sp, #8]
 8018094:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018096:	9301      	str	r3, [sp, #4]
 8018098:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801809a:	9300      	str	r3, [sp, #0]
 801809c:	4633      	mov	r3, r6
 801809e:	4622      	mov	r2, r4
 80180a0:	4641      	mov	r1, r8
 80180a2:	4638      	mov	r0, r7
 80180a4:	f7ff fdfc 	bl	8017ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80180a8:	4628      	mov	r0, r5
 80180aa:	f7ff feaf 	bl	8017e0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80180ae:	2001      	movs	r0, #1
 80180b0:	e007      	b.n	80180c2 <xTaskCreate+0x60>
					vPortFree( pxStack );
 80180b2:	4648      	mov	r0, r9
 80180b4:	f001 f892 	bl	80191dc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80180b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80180bc:	e001      	b.n	80180c2 <xTaskCreate+0x60>
 80180be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 80180c2:	b005      	add	sp, #20
 80180c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080180c8 <vTaskStartScheduler>:
{
 80180c8:	b510      	push	{r4, lr}
 80180ca:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80180cc:	2400      	movs	r4, #0
 80180ce:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80180d0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80180d2:	aa07      	add	r2, sp, #28
 80180d4:	a906      	add	r1, sp, #24
 80180d6:	a805      	add	r0, sp, #20
 80180d8:	f7fe ff90 	bl	8016ffc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80180dc:	9b05      	ldr	r3, [sp, #20]
 80180de:	9302      	str	r3, [sp, #8]
 80180e0:	9b06      	ldr	r3, [sp, #24]
 80180e2:	9301      	str	r3, [sp, #4]
 80180e4:	9400      	str	r4, [sp, #0]
 80180e6:	4623      	mov	r3, r4
 80180e8:	9a07      	ldr	r2, [sp, #28]
 80180ea:	491a      	ldr	r1, [pc, #104]	@ (8018154 <vTaskStartScheduler+0x8c>)
 80180ec:	481a      	ldr	r0, [pc, #104]	@ (8018158 <vTaskStartScheduler+0x90>)
 80180ee:	f7ff ff7b 	bl	8017fe8 <xTaskCreateStatic>
 80180f2:	4b1a      	ldr	r3, [pc, #104]	@ (801815c <vTaskStartScheduler+0x94>)
 80180f4:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80180f6:	b1e8      	cbz	r0, 8018134 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 80180f8:	f000 fc0c 	bl	8018914 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80180fc:	2801      	cmp	r0, #1
 80180fe:	d11a      	bne.n	8018136 <vTaskStartScheduler+0x6e>
 8018100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018104:	f383 8811 	msr	BASEPRI, r3
 8018108:	f3bf 8f6f 	isb	sy
 801810c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018110:	4b13      	ldr	r3, [pc, #76]	@ (8018160 <vTaskStartScheduler+0x98>)
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	3358      	adds	r3, #88	@ 0x58
 8018116:	4a13      	ldr	r2, [pc, #76]	@ (8018164 <vTaskStartScheduler+0x9c>)
 8018118:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 801811a:	4b13      	ldr	r3, [pc, #76]	@ (8018168 <vTaskStartScheduler+0xa0>)
 801811c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018120:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018122:	4b12      	ldr	r3, [pc, #72]	@ (801816c <vTaskStartScheduler+0xa4>)
 8018124:	2201      	movs	r2, #1
 8018126:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018128:	4b11      	ldr	r3, [pc, #68]	@ (8018170 <vTaskStartScheduler+0xa8>)
 801812a:	2200      	movs	r2, #0
 801812c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 801812e:	f000 feb3 	bl	8018e98 <xPortStartScheduler>
 8018132:	e003      	b.n	801813c <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 8018134:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018136:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801813a:	d001      	beq.n	8018140 <vTaskStartScheduler+0x78>
}
 801813c:	b008      	add	sp, #32
 801813e:	bd10      	pop	{r4, pc}
 8018140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018144:	f383 8811 	msr	BASEPRI, r3
 8018148:	f3bf 8f6f 	isb	sy
 801814c:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018150:	e7fe      	b.n	8018150 <vTaskStartScheduler+0x88>
 8018152:	bf00      	nop
 8018154:	080355b8 	.word	0x080355b8
 8018158:	08017f45 	.word	0x08017f45
 801815c:	200017f0 	.word	0x200017f0
 8018160:	20001ce8 	.word	0x20001ce8
 8018164:	20000254 	.word	0x20000254
 8018168:	200017f4 	.word	0x200017f4
 801816c:	20001808 	.word	0x20001808
 8018170:	20001810 	.word	0x20001810

08018174 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8018174:	4a02      	ldr	r2, [pc, #8]	@ (8018180 <vTaskSuspendAll+0xc>)
 8018176:	6813      	ldr	r3, [r2, #0]
 8018178:	3301      	adds	r3, #1
 801817a:	6013      	str	r3, [r2, #0]
}
 801817c:	4770      	bx	lr
 801817e:	bf00      	nop
 8018180:	200017ec 	.word	0x200017ec

08018184 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8018184:	4b01      	ldr	r3, [pc, #4]	@ (801818c <xTaskGetTickCount+0x8>)
 8018186:	6818      	ldr	r0, [r3, #0]
}
 8018188:	4770      	bx	lr
 801818a:	bf00      	nop
 801818c:	20001810 	.word	0x20001810

08018190 <xTaskIncrementTick>:
{
 8018190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018192:	4b3a      	ldr	r3, [pc, #232]	@ (801827c <xTaskIncrementTick+0xec>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d169      	bne.n	801826e <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801819a:	4b39      	ldr	r3, [pc, #228]	@ (8018280 <xTaskIncrementTick+0xf0>)
 801819c:	681d      	ldr	r5, [r3, #0]
 801819e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80181a0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80181a2:	b9c5      	cbnz	r5, 80181d6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80181a4:	4b37      	ldr	r3, [pc, #220]	@ (8018284 <xTaskIncrementTick+0xf4>)
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	b143      	cbz	r3, 80181be <xTaskIncrementTick+0x2e>
 80181ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181b0:	f383 8811 	msr	BASEPRI, r3
 80181b4:	f3bf 8f6f 	isb	sy
 80181b8:	f3bf 8f4f 	dsb	sy
 80181bc:	e7fe      	b.n	80181bc <xTaskIncrementTick+0x2c>
 80181be:	4a31      	ldr	r2, [pc, #196]	@ (8018284 <xTaskIncrementTick+0xf4>)
 80181c0:	6811      	ldr	r1, [r2, #0]
 80181c2:	4b31      	ldr	r3, [pc, #196]	@ (8018288 <xTaskIncrementTick+0xf8>)
 80181c4:	6818      	ldr	r0, [r3, #0]
 80181c6:	6010      	str	r0, [r2, #0]
 80181c8:	6019      	str	r1, [r3, #0]
 80181ca:	4a30      	ldr	r2, [pc, #192]	@ (801828c <xTaskIncrementTick+0xfc>)
 80181cc:	6813      	ldr	r3, [r2, #0]
 80181ce:	3301      	adds	r3, #1
 80181d0:	6013      	str	r3, [r2, #0]
 80181d2:	f7ff fd4f 	bl	8017c74 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80181d6:	4b2e      	ldr	r3, [pc, #184]	@ (8018290 <xTaskIncrementTick+0x100>)
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	42ab      	cmp	r3, r5
 80181dc:	d93d      	bls.n	801825a <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80181de:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80181e0:	4b2c      	ldr	r3, [pc, #176]	@ (8018294 <xTaskIncrementTick+0x104>)
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80181e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80181ea:	009a      	lsls	r2, r3, #2
 80181ec:	4b2a      	ldr	r3, [pc, #168]	@ (8018298 <xTaskIncrementTick+0x108>)
 80181ee:	589b      	ldr	r3, [r3, r2]
 80181f0:	2b01      	cmp	r3, #1
 80181f2:	d900      	bls.n	80181f6 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80181f4:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80181f6:	4b29      	ldr	r3, [pc, #164]	@ (801829c <xTaskIncrementTick+0x10c>)
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d03c      	beq.n	8018278 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 80181fe:	2701      	movs	r7, #1
	return xSwitchRequired;
 8018200:	e03a      	b.n	8018278 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8018202:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018204:	4b1f      	ldr	r3, [pc, #124]	@ (8018284 <xTaskIncrementTick+0xf4>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	b343      	cbz	r3, 801825e <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801820c:	4b1d      	ldr	r3, [pc, #116]	@ (8018284 <xTaskIncrementTick+0xf4>)
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	68db      	ldr	r3, [r3, #12]
 8018212:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018214:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8018216:	429d      	cmp	r5, r3
 8018218:	d326      	bcc.n	8018268 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801821a:	1d26      	adds	r6, r4, #4
 801821c:	4630      	mov	r0, r6
 801821e:	f7fe ff37 	bl	8017090 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018222:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8018224:	b11b      	cbz	r3, 801822e <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018226:	f104 0018 	add.w	r0, r4, #24
 801822a:	f7fe ff31 	bl	8017090 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801822e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8018230:	4a1b      	ldr	r2, [pc, #108]	@ (80182a0 <xTaskIncrementTick+0x110>)
 8018232:	6812      	ldr	r2, [r2, #0]
 8018234:	4293      	cmp	r3, r2
 8018236:	d901      	bls.n	801823c <xTaskIncrementTick+0xac>
 8018238:	4a19      	ldr	r2, [pc, #100]	@ (80182a0 <xTaskIncrementTick+0x110>)
 801823a:	6013      	str	r3, [r2, #0]
 801823c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018240:	009a      	lsls	r2, r3, #2
 8018242:	4631      	mov	r1, r6
 8018244:	4814      	ldr	r0, [pc, #80]	@ (8018298 <xTaskIncrementTick+0x108>)
 8018246:	4410      	add	r0, r2
 8018248:	f7fe fefe 	bl	8017048 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801824c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801824e:	4b11      	ldr	r3, [pc, #68]	@ (8018294 <xTaskIncrementTick+0x104>)
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018254:	429a      	cmp	r2, r3
 8018256:	d2d4      	bcs.n	8018202 <xTaskIncrementTick+0x72>
 8018258:	e7d4      	b.n	8018204 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 801825a:	2700      	movs	r7, #0
 801825c:	e7d2      	b.n	8018204 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801825e:	4b0c      	ldr	r3, [pc, #48]	@ (8018290 <xTaskIncrementTick+0x100>)
 8018260:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018264:	601a      	str	r2, [r3, #0]
					break;
 8018266:	e7bb      	b.n	80181e0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8018268:	4a09      	ldr	r2, [pc, #36]	@ (8018290 <xTaskIncrementTick+0x100>)
 801826a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801826c:	e7b8      	b.n	80181e0 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 801826e:	4a0d      	ldr	r2, [pc, #52]	@ (80182a4 <xTaskIncrementTick+0x114>)
 8018270:	6813      	ldr	r3, [r2, #0]
 8018272:	3301      	adds	r3, #1
 8018274:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8018276:	2700      	movs	r7, #0
}
 8018278:	4638      	mov	r0, r7
 801827a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801827c:	200017ec 	.word	0x200017ec
 8018280:	20001810 	.word	0x20001810
 8018284:	2000185c 	.word	0x2000185c
 8018288:	20001858 	.word	0x20001858
 801828c:	200017fc 	.word	0x200017fc
 8018290:	200017f4 	.word	0x200017f4
 8018294:	20001ce8 	.word	0x20001ce8
 8018298:	20001888 	.word	0x20001888
 801829c:	20001800 	.word	0x20001800
 80182a0:	2000180c 	.word	0x2000180c
 80182a4:	20001804 	.word	0x20001804

080182a8 <xTaskResumeAll>:
{
 80182a8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80182aa:	4b35      	ldr	r3, [pc, #212]	@ (8018380 <xTaskResumeAll+0xd8>)
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	b943      	cbnz	r3, 80182c2 <xTaskResumeAll+0x1a>
 80182b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80182b4:	f383 8811 	msr	BASEPRI, r3
 80182b8:	f3bf 8f6f 	isb	sy
 80182bc:	f3bf 8f4f 	dsb	sy
 80182c0:	e7fe      	b.n	80182c0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80182c2:	f000 fd4f 	bl	8018d64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80182c6:	4b2e      	ldr	r3, [pc, #184]	@ (8018380 <xTaskResumeAll+0xd8>)
 80182c8:	681a      	ldr	r2, [r3, #0]
 80182ca:	3a01      	subs	r2, #1
 80182cc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d14f      	bne.n	8018374 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80182d4:	4b2b      	ldr	r3, [pc, #172]	@ (8018384 <xTaskResumeAll+0xdc>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	b90b      	cbnz	r3, 80182de <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80182da:	2400      	movs	r4, #0
 80182dc:	e04b      	b.n	8018376 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80182de:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80182e0:	4b29      	ldr	r3, [pc, #164]	@ (8018388 <xTaskResumeAll+0xe0>)
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	b31b      	cbz	r3, 801832e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80182e6:	4b28      	ldr	r3, [pc, #160]	@ (8018388 <xTaskResumeAll+0xe0>)
 80182e8:	68db      	ldr	r3, [r3, #12]
 80182ea:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80182ec:	f104 0018 	add.w	r0, r4, #24
 80182f0:	f7fe fece 	bl	8017090 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80182f4:	1d25      	adds	r5, r4, #4
 80182f6:	4628      	mov	r0, r5
 80182f8:	f7fe feca 	bl	8017090 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80182fc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80182fe:	4b23      	ldr	r3, [pc, #140]	@ (801838c <xTaskResumeAll+0xe4>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	4298      	cmp	r0, r3
 8018304:	d901      	bls.n	801830a <xTaskResumeAll+0x62>
 8018306:	4b21      	ldr	r3, [pc, #132]	@ (801838c <xTaskResumeAll+0xe4>)
 8018308:	6018      	str	r0, [r3, #0]
 801830a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801830e:	4629      	mov	r1, r5
 8018310:	4b1f      	ldr	r3, [pc, #124]	@ (8018390 <xTaskResumeAll+0xe8>)
 8018312:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018316:	f7fe fe97 	bl	8017048 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801831a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801831c:	4b1d      	ldr	r3, [pc, #116]	@ (8018394 <xTaskResumeAll+0xec>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018322:	429a      	cmp	r2, r3
 8018324:	d3dc      	bcc.n	80182e0 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8018326:	4b1c      	ldr	r3, [pc, #112]	@ (8018398 <xTaskResumeAll+0xf0>)
 8018328:	2201      	movs	r2, #1
 801832a:	601a      	str	r2, [r3, #0]
 801832c:	e7d8      	b.n	80182e0 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 801832e:	b10c      	cbz	r4, 8018334 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8018330:	f7ff fca0 	bl	8017c74 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018334:	4b19      	ldr	r3, [pc, #100]	@ (801839c <xTaskResumeAll+0xf4>)
 8018336:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8018338:	b984      	cbnz	r4, 801835c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 801833a:	4b17      	ldr	r3, [pc, #92]	@ (8018398 <xTaskResumeAll+0xf0>)
 801833c:	681c      	ldr	r4, [r3, #0]
 801833e:	b1d4      	cbz	r4, 8018376 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8018340:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018348:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801834c:	f3bf 8f4f 	dsb	sy
 8018350:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8018354:	2401      	movs	r4, #1
 8018356:	e00e      	b.n	8018376 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018358:	3c01      	subs	r4, #1
 801835a:	d007      	beq.n	801836c <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 801835c:	f7ff ff18 	bl	8018190 <xTaskIncrementTick>
 8018360:	2800      	cmp	r0, #0
 8018362:	d0f9      	beq.n	8018358 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8018364:	4b0c      	ldr	r3, [pc, #48]	@ (8018398 <xTaskResumeAll+0xf0>)
 8018366:	2201      	movs	r2, #1
 8018368:	601a      	str	r2, [r3, #0]
 801836a:	e7f5      	b.n	8018358 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 801836c:	4b0b      	ldr	r3, [pc, #44]	@ (801839c <xTaskResumeAll+0xf4>)
 801836e:	2200      	movs	r2, #0
 8018370:	601a      	str	r2, [r3, #0]
 8018372:	e7e2      	b.n	801833a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8018374:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8018376:	f000 fd17 	bl	8018da8 <vPortExitCritical>
}
 801837a:	4620      	mov	r0, r4
 801837c:	bd38      	pop	{r3, r4, r5, pc}
 801837e:	bf00      	nop
 8018380:	200017ec 	.word	0x200017ec
 8018384:	20001814 	.word	0x20001814
 8018388:	20001844 	.word	0x20001844
 801838c:	2000180c 	.word	0x2000180c
 8018390:	20001888 	.word	0x20001888
 8018394:	20001ce8 	.word	0x20001ce8
 8018398:	20001800 	.word	0x20001800
 801839c:	20001804 	.word	0x20001804

080183a0 <vTaskDelay>:
	{
 80183a0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80183a2:	b1a8      	cbz	r0, 80183d0 <vTaskDelay+0x30>
 80183a4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80183a6:	4b10      	ldr	r3, [pc, #64]	@ (80183e8 <vTaskDelay+0x48>)
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	b143      	cbz	r3, 80183be <vTaskDelay+0x1e>
 80183ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183b0:	f383 8811 	msr	BASEPRI, r3
 80183b4:	f3bf 8f6f 	isb	sy
 80183b8:	f3bf 8f4f 	dsb	sy
 80183bc:	e7fe      	b.n	80183bc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80183be:	f7ff fed9 	bl	8018174 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80183c2:	2100      	movs	r1, #0
 80183c4:	4620      	mov	r0, r4
 80183c6:	f7ff fdd1 	bl	8017f6c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80183ca:	f7ff ff6d 	bl	80182a8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80183ce:	b948      	cbnz	r0, 80183e4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80183d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80183d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80183d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80183dc:	f3bf 8f4f 	dsb	sy
 80183e0:	f3bf 8f6f 	isb	sy
	}
 80183e4:	bd10      	pop	{r4, pc}
 80183e6:	bf00      	nop
 80183e8:	200017ec 	.word	0x200017ec

080183ec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80183ec:	4b22      	ldr	r3, [pc, #136]	@ (8018478 <vTaskSwitchContext+0x8c>)
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	b11b      	cbz	r3, 80183fa <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80183f2:	4b22      	ldr	r3, [pc, #136]	@ (801847c <vTaskSwitchContext+0x90>)
 80183f4:	2201      	movs	r2, #1
 80183f6:	601a      	str	r2, [r3, #0]
 80183f8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80183fa:	4b20      	ldr	r3, [pc, #128]	@ (801847c <vTaskSwitchContext+0x90>)
 80183fc:	2200      	movs	r2, #0
 80183fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018400:	4b1f      	ldr	r3, [pc, #124]	@ (8018480 <vTaskSwitchContext+0x94>)
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8018408:	008a      	lsls	r2, r1, #2
 801840a:	491e      	ldr	r1, [pc, #120]	@ (8018484 <vTaskSwitchContext+0x98>)
 801840c:	588a      	ldr	r2, [r1, r2]
 801840e:	b95a      	cbnz	r2, 8018428 <vTaskSwitchContext+0x3c>
 8018410:	b10b      	cbz	r3, 8018416 <vTaskSwitchContext+0x2a>
 8018412:	3b01      	subs	r3, #1
 8018414:	e7f6      	b.n	8018404 <vTaskSwitchContext+0x18>
 8018416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801841a:	f383 8811 	msr	BASEPRI, r3
 801841e:	f3bf 8f6f 	isb	sy
 8018422:	f3bf 8f4f 	dsb	sy
 8018426:	e7fe      	b.n	8018426 <vTaskSwitchContext+0x3a>
 8018428:	4608      	mov	r0, r1
 801842a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801842e:	008a      	lsls	r2, r1, #2
 8018430:	4402      	add	r2, r0
 8018432:	6851      	ldr	r1, [r2, #4]
 8018434:	6849      	ldr	r1, [r1, #4]
 8018436:	6051      	str	r1, [r2, #4]
 8018438:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801843c:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8018440:	3208      	adds	r2, #8
 8018442:	4402      	add	r2, r0
 8018444:	4291      	cmp	r1, r2
 8018446:	d00f      	beq.n	8018468 <vTaskSwitchContext+0x7c>
 8018448:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801844c:	0091      	lsls	r1, r2, #2
 801844e:	4a0d      	ldr	r2, [pc, #52]	@ (8018484 <vTaskSwitchContext+0x98>)
 8018450:	440a      	add	r2, r1
 8018452:	6852      	ldr	r2, [r2, #4]
 8018454:	68d1      	ldr	r1, [r2, #12]
 8018456:	4a0c      	ldr	r2, [pc, #48]	@ (8018488 <vTaskSwitchContext+0x9c>)
 8018458:	6011      	str	r1, [r2, #0]
 801845a:	4909      	ldr	r1, [pc, #36]	@ (8018480 <vTaskSwitchContext+0x94>)
 801845c:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801845e:	6813      	ldr	r3, [r2, #0]
 8018460:	3358      	adds	r3, #88	@ 0x58
 8018462:	4a0a      	ldr	r2, [pc, #40]	@ (801848c <vTaskSwitchContext+0xa0>)
 8018464:	6013      	str	r3, [r2, #0]
}
 8018466:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018468:	6848      	ldr	r0, [r1, #4]
 801846a:	4662      	mov	r2, ip
 801846c:	0091      	lsls	r1, r2, #2
 801846e:	4a05      	ldr	r2, [pc, #20]	@ (8018484 <vTaskSwitchContext+0x98>)
 8018470:	440a      	add	r2, r1
 8018472:	6050      	str	r0, [r2, #4]
 8018474:	e7e8      	b.n	8018448 <vTaskSwitchContext+0x5c>
 8018476:	bf00      	nop
 8018478:	200017ec 	.word	0x200017ec
 801847c:	20001800 	.word	0x20001800
 8018480:	2000180c 	.word	0x2000180c
 8018484:	20001888 	.word	0x20001888
 8018488:	20001ce8 	.word	0x20001ce8
 801848c:	20000254 	.word	0x20000254

08018490 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8018490:	b158      	cbz	r0, 80184aa <vTaskPlaceOnEventList+0x1a>
{
 8018492:	b510      	push	{r4, lr}
 8018494:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018496:	4a09      	ldr	r2, [pc, #36]	@ (80184bc <vTaskPlaceOnEventList+0x2c>)
 8018498:	6811      	ldr	r1, [r2, #0]
 801849a:	3118      	adds	r1, #24
 801849c:	f7fe fddf 	bl	801705e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80184a0:	2101      	movs	r1, #1
 80184a2:	4620      	mov	r0, r4
 80184a4:	f7ff fd62 	bl	8017f6c <prvAddCurrentTaskToDelayedList>
}
 80184a8:	bd10      	pop	{r4, pc}
 80184aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80184ae:	f383 8811 	msr	BASEPRI, r3
 80184b2:	f3bf 8f6f 	isb	sy
 80184b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80184ba:	e7fe      	b.n	80184ba <vTaskPlaceOnEventList+0x2a>
 80184bc:	20001ce8 	.word	0x20001ce8

080184c0 <vTaskPlaceOnEventListRestricted>:
	{
 80184c0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80184c2:	b170      	cbz	r0, 80184e2 <vTaskPlaceOnEventListRestricted+0x22>
 80184c4:	460d      	mov	r5, r1
 80184c6:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80184c8:	4a0a      	ldr	r2, [pc, #40]	@ (80184f4 <vTaskPlaceOnEventListRestricted+0x34>)
 80184ca:	6811      	ldr	r1, [r2, #0]
 80184cc:	3118      	adds	r1, #24
 80184ce:	f7fe fdbb 	bl	8017048 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80184d2:	b10c      	cbz	r4, 80184d8 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80184d4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80184d8:	4621      	mov	r1, r4
 80184da:	4628      	mov	r0, r5
 80184dc:	f7ff fd46 	bl	8017f6c <prvAddCurrentTaskToDelayedList>
	}
 80184e0:	bd38      	pop	{r3, r4, r5, pc}
 80184e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80184e6:	f383 8811 	msr	BASEPRI, r3
 80184ea:	f3bf 8f6f 	isb	sy
 80184ee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80184f2:	e7fe      	b.n	80184f2 <vTaskPlaceOnEventListRestricted+0x32>
 80184f4:	20001ce8 	.word	0x20001ce8

080184f8 <xTaskRemoveFromEventList>:
{
 80184f8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184fa:	68c3      	ldr	r3, [r0, #12]
 80184fc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80184fe:	b324      	cbz	r4, 801854a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018500:	f104 0518 	add.w	r5, r4, #24
 8018504:	4628      	mov	r0, r5
 8018506:	f7fe fdc3 	bl	8017090 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801850a:	4b18      	ldr	r3, [pc, #96]	@ (801856c <xTaskRemoveFromEventList+0x74>)
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	bb2b      	cbnz	r3, 801855c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018510:	1d25      	adds	r5, r4, #4
 8018512:	4628      	mov	r0, r5
 8018514:	f7fe fdbc 	bl	8017090 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018518:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801851a:	4b15      	ldr	r3, [pc, #84]	@ (8018570 <xTaskRemoveFromEventList+0x78>)
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	4298      	cmp	r0, r3
 8018520:	d901      	bls.n	8018526 <xTaskRemoveFromEventList+0x2e>
 8018522:	4b13      	ldr	r3, [pc, #76]	@ (8018570 <xTaskRemoveFromEventList+0x78>)
 8018524:	6018      	str	r0, [r3, #0]
 8018526:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801852a:	4629      	mov	r1, r5
 801852c:	4b11      	ldr	r3, [pc, #68]	@ (8018574 <xTaskRemoveFromEventList+0x7c>)
 801852e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018532:	f7fe fd89 	bl	8017048 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018536:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018538:	4b0f      	ldr	r3, [pc, #60]	@ (8018578 <xTaskRemoveFromEventList+0x80>)
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801853e:	429a      	cmp	r2, r3
 8018540:	d911      	bls.n	8018566 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8018542:	2001      	movs	r0, #1
 8018544:	4b0d      	ldr	r3, [pc, #52]	@ (801857c <xTaskRemoveFromEventList+0x84>)
 8018546:	6018      	str	r0, [r3, #0]
}
 8018548:	bd38      	pop	{r3, r4, r5, pc}
 801854a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801854e:	f383 8811 	msr	BASEPRI, r3
 8018552:	f3bf 8f6f 	isb	sy
 8018556:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 801855a:	e7fe      	b.n	801855a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801855c:	4629      	mov	r1, r5
 801855e:	4808      	ldr	r0, [pc, #32]	@ (8018580 <xTaskRemoveFromEventList+0x88>)
 8018560:	f7fe fd72 	bl	8017048 <vListInsertEnd>
 8018564:	e7e7      	b.n	8018536 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8018566:	2000      	movs	r0, #0
	return xReturn;
 8018568:	e7ee      	b.n	8018548 <xTaskRemoveFromEventList+0x50>
 801856a:	bf00      	nop
 801856c:	200017ec 	.word	0x200017ec
 8018570:	2000180c 	.word	0x2000180c
 8018574:	20001888 	.word	0x20001888
 8018578:	20001ce8 	.word	0x20001ce8
 801857c:	20001800 	.word	0x20001800
 8018580:	20001844 	.word	0x20001844

08018584 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018584:	4b03      	ldr	r3, [pc, #12]	@ (8018594 <vTaskInternalSetTimeOutState+0x10>)
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801858a:	4b03      	ldr	r3, [pc, #12]	@ (8018598 <vTaskInternalSetTimeOutState+0x14>)
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	6043      	str	r3, [r0, #4]
}
 8018590:	4770      	bx	lr
 8018592:	bf00      	nop
 8018594:	200017fc 	.word	0x200017fc
 8018598:	20001810 	.word	0x20001810

0801859c <xTaskCheckForTimeOut>:
{
 801859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 801859e:	b1c8      	cbz	r0, 80185d4 <xTaskCheckForTimeOut+0x38>
 80185a0:	460c      	mov	r4, r1
 80185a2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80185a4:	b1f9      	cbz	r1, 80185e6 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80185a6:	f000 fbdd 	bl	8018d64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80185aa:	4b1b      	ldr	r3, [pc, #108]	@ (8018618 <xTaskCheckForTimeOut+0x7c>)
 80185ac:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80185ae:	686b      	ldr	r3, [r5, #4]
 80185b0:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80185b2:	6822      	ldr	r2, [r4, #0]
 80185b4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80185b8:	d026      	beq.n	8018608 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80185ba:	4e18      	ldr	r6, [pc, #96]	@ (801861c <xTaskCheckForTimeOut+0x80>)
 80185bc:	6836      	ldr	r6, [r6, #0]
 80185be:	682f      	ldr	r7, [r5, #0]
 80185c0:	42b7      	cmp	r7, r6
 80185c2:	d001      	beq.n	80185c8 <xTaskCheckForTimeOut+0x2c>
 80185c4:	428b      	cmp	r3, r1
 80185c6:	d924      	bls.n	8018612 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80185c8:	4282      	cmp	r2, r0
 80185ca:	d815      	bhi.n	80185f8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80185cc:	2300      	movs	r3, #0
 80185ce:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80185d0:	2401      	movs	r4, #1
 80185d2:	e01a      	b.n	801860a <xTaskCheckForTimeOut+0x6e>
 80185d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185d8:	f383 8811 	msr	BASEPRI, r3
 80185dc:	f3bf 8f6f 	isb	sy
 80185e0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80185e4:	e7fe      	b.n	80185e4 <xTaskCheckForTimeOut+0x48>
 80185e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185ea:	f383 8811 	msr	BASEPRI, r3
 80185ee:	f3bf 8f6f 	isb	sy
 80185f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80185f6:	e7fe      	b.n	80185f6 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80185f8:	1a5b      	subs	r3, r3, r1
 80185fa:	4413      	add	r3, r2
 80185fc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80185fe:	4628      	mov	r0, r5
 8018600:	f7ff ffc0 	bl	8018584 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018604:	2400      	movs	r4, #0
 8018606:	e000      	b.n	801860a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8018608:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801860a:	f000 fbcd 	bl	8018da8 <vPortExitCritical>
}
 801860e:	4620      	mov	r0, r4
 8018610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8018612:	2401      	movs	r4, #1
 8018614:	e7f9      	b.n	801860a <xTaskCheckForTimeOut+0x6e>
 8018616:	bf00      	nop
 8018618:	20001810 	.word	0x20001810
 801861c:	200017fc 	.word	0x200017fc

08018620 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8018620:	4b01      	ldr	r3, [pc, #4]	@ (8018628 <vTaskMissedYield+0x8>)
 8018622:	2201      	movs	r2, #1
 8018624:	601a      	str	r2, [r3, #0]
}
 8018626:	4770      	bx	lr
 8018628:	20001800 	.word	0x20001800

0801862c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 801862c:	4b01      	ldr	r3, [pc, #4]	@ (8018634 <xTaskGetCurrentTaskHandle+0x8>)
 801862e:	6818      	ldr	r0, [r3, #0]
	}
 8018630:	4770      	bx	lr
 8018632:	bf00      	nop
 8018634:	20001ce8 	.word	0x20001ce8

08018638 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8018638:	4b05      	ldr	r3, [pc, #20]	@ (8018650 <xTaskGetSchedulerState+0x18>)
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	b133      	cbz	r3, 801864c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801863e:	4b05      	ldr	r3, [pc, #20]	@ (8018654 <xTaskGetSchedulerState+0x1c>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	b10b      	cbz	r3, 8018648 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8018644:	2000      	movs	r0, #0
	}
 8018646:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8018648:	2002      	movs	r0, #2
 801864a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801864c:	2001      	movs	r0, #1
 801864e:	4770      	bx	lr
 8018650:	20001808 	.word	0x20001808
 8018654:	200017ec 	.word	0x200017ec

08018658 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8018658:	2800      	cmp	r0, #0
 801865a:	d03e      	beq.n	80186da <xTaskPriorityInherit+0x82>
	{
 801865c:	b538      	push	{r3, r4, r5, lr}
 801865e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018660:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018662:	4a20      	ldr	r2, [pc, #128]	@ (80186e4 <xTaskPriorityInherit+0x8c>)
 8018664:	6812      	ldr	r2, [r2, #0]
 8018666:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8018668:	4293      	cmp	r3, r2
 801866a:	d22e      	bcs.n	80186ca <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801866c:	6982      	ldr	r2, [r0, #24]
 801866e:	2a00      	cmp	r2, #0
 8018670:	db05      	blt.n	801867e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018672:	4a1c      	ldr	r2, [pc, #112]	@ (80186e4 <xTaskPriorityInherit+0x8c>)
 8018674:	6812      	ldr	r2, [r2, #0]
 8018676:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8018678:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801867c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801867e:	6961      	ldr	r1, [r4, #20]
 8018680:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018684:	4a18      	ldr	r2, [pc, #96]	@ (80186e8 <xTaskPriorityInherit+0x90>)
 8018686:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801868a:	4299      	cmp	r1, r3
 801868c:	d005      	beq.n	801869a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801868e:	4b15      	ldr	r3, [pc, #84]	@ (80186e4 <xTaskPriorityInherit+0x8c>)
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018694:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8018696:	2001      	movs	r0, #1
	}
 8018698:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801869a:	1d25      	adds	r5, r4, #4
 801869c:	4628      	mov	r0, r5
 801869e:	f7fe fcf7 	bl	8017090 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80186a2:	4b10      	ldr	r3, [pc, #64]	@ (80186e4 <xTaskPriorityInherit+0x8c>)
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80186a8:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80186aa:	4b10      	ldr	r3, [pc, #64]	@ (80186ec <xTaskPriorityInherit+0x94>)
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	4298      	cmp	r0, r3
 80186b0:	d901      	bls.n	80186b6 <xTaskPriorityInherit+0x5e>
 80186b2:	4b0e      	ldr	r3, [pc, #56]	@ (80186ec <xTaskPriorityInherit+0x94>)
 80186b4:	6018      	str	r0, [r3, #0]
 80186b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80186ba:	4629      	mov	r1, r5
 80186bc:	4b0a      	ldr	r3, [pc, #40]	@ (80186e8 <xTaskPriorityInherit+0x90>)
 80186be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80186c2:	f7fe fcc1 	bl	8017048 <vListInsertEnd>
				xReturn = pdTRUE;
 80186c6:	2001      	movs	r0, #1
 80186c8:	e7e6      	b.n	8018698 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80186ca:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80186cc:	4b05      	ldr	r3, [pc, #20]	@ (80186e4 <xTaskPriorityInherit+0x8c>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186d2:	429a      	cmp	r2, r3
 80186d4:	d303      	bcc.n	80186de <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 80186d6:	2000      	movs	r0, #0
 80186d8:	e7de      	b.n	8018698 <xTaskPriorityInherit+0x40>
 80186da:	2000      	movs	r0, #0
	}
 80186dc:	4770      	bx	lr
					xReturn = pdTRUE;
 80186de:	2001      	movs	r0, #1
		return xReturn;
 80186e0:	e7da      	b.n	8018698 <xTaskPriorityInherit+0x40>
 80186e2:	bf00      	nop
 80186e4:	20001ce8 	.word	0x20001ce8
 80186e8:	20001888 	.word	0x20001888
 80186ec:	2000180c 	.word	0x2000180c

080186f0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80186f0:	2800      	cmp	r0, #0
 80186f2:	d03b      	beq.n	801876c <xTaskPriorityDisinherit+0x7c>
	{
 80186f4:	b538      	push	{r3, r4, r5, lr}
 80186f6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80186f8:	4b1e      	ldr	r3, [pc, #120]	@ (8018774 <xTaskPriorityDisinherit+0x84>)
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	4283      	cmp	r3, r0
 80186fe:	d008      	beq.n	8018712 <xTaskPriorityDisinherit+0x22>
 8018700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018704:	f383 8811 	msr	BASEPRI, r3
 8018708:	f3bf 8f6f 	isb	sy
 801870c:	f3bf 8f4f 	dsb	sy
 8018710:	e7fe      	b.n	8018710 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8018712:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8018714:	b943      	cbnz	r3, 8018728 <xTaskPriorityDisinherit+0x38>
 8018716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801871a:	f383 8811 	msr	BASEPRI, r3
 801871e:	f3bf 8f6f 	isb	sy
 8018722:	f3bf 8f4f 	dsb	sy
 8018726:	e7fe      	b.n	8018726 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8018728:	3b01      	subs	r3, #1
 801872a:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801872c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801872e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8018730:	4291      	cmp	r1, r2
 8018732:	d01d      	beq.n	8018770 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018734:	b10b      	cbz	r3, 801873a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8018736:	2000      	movs	r0, #0
	}
 8018738:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801873a:	1d05      	adds	r5, r0, #4
 801873c:	4628      	mov	r0, r5
 801873e:	f7fe fca7 	bl	8017090 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018742:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8018744:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018746:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 801874a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801874c:	4b0a      	ldr	r3, [pc, #40]	@ (8018778 <xTaskPriorityDisinherit+0x88>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	4298      	cmp	r0, r3
 8018752:	d901      	bls.n	8018758 <xTaskPriorityDisinherit+0x68>
 8018754:	4b08      	ldr	r3, [pc, #32]	@ (8018778 <xTaskPriorityDisinherit+0x88>)
 8018756:	6018      	str	r0, [r3, #0]
 8018758:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801875c:	4629      	mov	r1, r5
 801875e:	4b07      	ldr	r3, [pc, #28]	@ (801877c <xTaskPriorityDisinherit+0x8c>)
 8018760:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018764:	f7fe fc70 	bl	8017048 <vListInsertEnd>
					xReturn = pdTRUE;
 8018768:	2001      	movs	r0, #1
 801876a:	e7e5      	b.n	8018738 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 801876c:	2000      	movs	r0, #0
	}
 801876e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8018770:	2000      	movs	r0, #0
 8018772:	e7e1      	b.n	8018738 <xTaskPriorityDisinherit+0x48>
 8018774:	20001ce8 	.word	0x20001ce8
 8018778:	2000180c 	.word	0x2000180c
 801877c:	20001888 	.word	0x20001888

08018780 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8018780:	2800      	cmp	r0, #0
 8018782:	d046      	beq.n	8018812 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8018784:	b538      	push	{r3, r4, r5, lr}
 8018786:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8018788:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801878a:	b943      	cbnz	r3, 801879e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801878c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018790:	f383 8811 	msr	BASEPRI, r3
 8018794:	f3bf 8f6f 	isb	sy
 8018798:	f3bf 8f4f 	dsb	sy
 801879c:	e7fe      	b.n	801879c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801879e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80187a0:	428a      	cmp	r2, r1
 80187a2:	d200      	bcs.n	80187a6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80187a4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 80187a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80187a8:	4291      	cmp	r1, r2
 80187aa:	d001      	beq.n	80187b0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80187ac:	2b01      	cmp	r3, #1
 80187ae:	d000      	beq.n	80187b2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80187b0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80187b2:	4b18      	ldr	r3, [pc, #96]	@ (8018814 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	42a3      	cmp	r3, r4
 80187b8:	d022      	beq.n	8018800 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80187ba:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80187bc:	69a3      	ldr	r3, [r4, #24]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	db02      	blt.n	80187c8 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80187c2:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80187c6:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80187c8:	6962      	ldr	r2, [r4, #20]
 80187ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80187ce:	4b12      	ldr	r3, [pc, #72]	@ (8018818 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80187d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80187d4:	429a      	cmp	r2, r3
 80187d6:	d1eb      	bne.n	80187b0 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80187d8:	1d25      	adds	r5, r4, #4
 80187da:	4628      	mov	r0, r5
 80187dc:	f7fe fc58 	bl	8017090 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80187e0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80187e2:	4b0e      	ldr	r3, [pc, #56]	@ (801881c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	4298      	cmp	r0, r3
 80187e8:	d901      	bls.n	80187ee <vTaskPriorityDisinheritAfterTimeout+0x6e>
 80187ea:	4b0c      	ldr	r3, [pc, #48]	@ (801881c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80187ec:	6018      	str	r0, [r3, #0]
 80187ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80187f2:	4629      	mov	r1, r5
 80187f4:	4b08      	ldr	r3, [pc, #32]	@ (8018818 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80187f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80187fa:	f7fe fc25 	bl	8017048 <vListInsertEnd>
	}
 80187fe:	e7d7      	b.n	80187b0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8018800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018804:	f383 8811 	msr	BASEPRI, r3
 8018808:	f3bf 8f6f 	isb	sy
 801880c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8018810:	e7fe      	b.n	8018810 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8018812:	4770      	bx	lr
 8018814:	20001ce8 	.word	0x20001ce8
 8018818:	20001888 	.word	0x20001888
 801881c:	2000180c 	.word	0x2000180c

08018820 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8018820:	4b05      	ldr	r3, [pc, #20]	@ (8018838 <pvTaskIncrementMutexHeldCount+0x18>)
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	b123      	cbz	r3, 8018830 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8018826:	4b04      	ldr	r3, [pc, #16]	@ (8018838 <pvTaskIncrementMutexHeldCount+0x18>)
 8018828:	681a      	ldr	r2, [r3, #0]
 801882a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801882c:	3301      	adds	r3, #1
 801882e:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 8018830:	4b01      	ldr	r3, [pc, #4]	@ (8018838 <pvTaskIncrementMutexHeldCount+0x18>)
 8018832:	6818      	ldr	r0, [r3, #0]
	}
 8018834:	4770      	bx	lr
 8018836:	bf00      	nop
 8018838:	20001ce8 	.word	0x20001ce8

0801883c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801883c:	4b06      	ldr	r3, [pc, #24]	@ (8018858 <prvGetNextExpireTime+0x1c>)
 801883e:	681a      	ldr	r2, [r3, #0]
 8018840:	6813      	ldr	r3, [r2, #0]
 8018842:	b92b      	cbnz	r3, 8018850 <prvGetNextExpireTime+0x14>
 8018844:	2301      	movs	r3, #1
 8018846:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018848:	b923      	cbnz	r3, 8018854 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801884a:	68d3      	ldr	r3, [r2, #12]
 801884c:	6818      	ldr	r0, [r3, #0]
 801884e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018850:	2300      	movs	r3, #0
 8018852:	e7f8      	b.n	8018846 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018854:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8018856:	4770      	bx	lr
 8018858:	20001dec 	.word	0x20001dec

0801885c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801885c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801885e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018860:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018862:	4291      	cmp	r1, r2
 8018864:	d80c      	bhi.n	8018880 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018866:	1ad2      	subs	r2, r2, r3
 8018868:	6983      	ldr	r3, [r0, #24]
 801886a:	429a      	cmp	r2, r3
 801886c:	d301      	bcc.n	8018872 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801886e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8018870:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018872:	1d01      	adds	r1, r0, #4
 8018874:	4b09      	ldr	r3, [pc, #36]	@ (801889c <prvInsertTimerInActiveList+0x40>)
 8018876:	6818      	ldr	r0, [r3, #0]
 8018878:	f7fe fbf1 	bl	801705e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801887c:	2000      	movs	r0, #0
 801887e:	e7f7      	b.n	8018870 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018880:	429a      	cmp	r2, r3
 8018882:	d201      	bcs.n	8018888 <prvInsertTimerInActiveList+0x2c>
 8018884:	4299      	cmp	r1, r3
 8018886:	d206      	bcs.n	8018896 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018888:	1d01      	adds	r1, r0, #4
 801888a:	4b05      	ldr	r3, [pc, #20]	@ (80188a0 <prvInsertTimerInActiveList+0x44>)
 801888c:	6818      	ldr	r0, [r3, #0]
 801888e:	f7fe fbe6 	bl	801705e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8018892:	2000      	movs	r0, #0
 8018894:	e7ec      	b.n	8018870 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8018896:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8018898:	e7ea      	b.n	8018870 <prvInsertTimerInActiveList+0x14>
 801889a:	bf00      	nop
 801889c:	20001de8 	.word	0x20001de8
 80188a0:	20001dec 	.word	0x20001dec

080188a4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80188a4:	b530      	push	{r4, r5, lr}
 80188a6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80188a8:	f000 fa5c 	bl	8018d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80188ac:	4b11      	ldr	r3, [pc, #68]	@ (80188f4 <prvCheckForValidListAndQueue+0x50>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	b11b      	cbz	r3, 80188ba <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80188b2:	f000 fa79 	bl	8018da8 <vPortExitCritical>
}
 80188b6:	b003      	add	sp, #12
 80188b8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80188ba:	4d0f      	ldr	r5, [pc, #60]	@ (80188f8 <prvCheckForValidListAndQueue+0x54>)
 80188bc:	4628      	mov	r0, r5
 80188be:	f7fe fbb5 	bl	801702c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80188c2:	4c0e      	ldr	r4, [pc, #56]	@ (80188fc <prvCheckForValidListAndQueue+0x58>)
 80188c4:	4620      	mov	r0, r4
 80188c6:	f7fe fbb1 	bl	801702c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80188ca:	4b0d      	ldr	r3, [pc, #52]	@ (8018900 <prvCheckForValidListAndQueue+0x5c>)
 80188cc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80188ce:	4b0d      	ldr	r3, [pc, #52]	@ (8018904 <prvCheckForValidListAndQueue+0x60>)
 80188d0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80188d2:	2300      	movs	r3, #0
 80188d4:	9300      	str	r3, [sp, #0]
 80188d6:	4b0c      	ldr	r3, [pc, #48]	@ (8018908 <prvCheckForValidListAndQueue+0x64>)
 80188d8:	4a0c      	ldr	r2, [pc, #48]	@ (801890c <prvCheckForValidListAndQueue+0x68>)
 80188da:	2110      	movs	r1, #16
 80188dc:	200a      	movs	r0, #10
 80188de:	f7fe fce5 	bl	80172ac <xQueueGenericCreateStatic>
 80188e2:	4b04      	ldr	r3, [pc, #16]	@ (80188f4 <prvCheckForValidListAndQueue+0x50>)
 80188e4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80188e6:	2800      	cmp	r0, #0
 80188e8:	d0e3      	beq.n	80188b2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80188ea:	4909      	ldr	r1, [pc, #36]	@ (8018910 <prvCheckForValidListAndQueue+0x6c>)
 80188ec:	f7ff f984 	bl	8017bf8 <vQueueAddToRegistry>
 80188f0:	e7df      	b.n	80188b2 <prvCheckForValidListAndQueue+0xe>
 80188f2:	bf00      	nop
 80188f4:	20001de4 	.word	0x20001de4
 80188f8:	20001e04 	.word	0x20001e04
 80188fc:	20001df0 	.word	0x20001df0
 8018900:	20001dec 	.word	0x20001dec
 8018904:	20001de8 	.word	0x20001de8
 8018908:	20001cec 	.word	0x20001cec
 801890c:	20001d3c 	.word	0x20001d3c
 8018910:	080355c0 	.word	0x080355c0

08018914 <xTimerCreateTimerTask>:
{
 8018914:	b510      	push	{r4, lr}
 8018916:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8018918:	f7ff ffc4 	bl	80188a4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801891c:	4b12      	ldr	r3, [pc, #72]	@ (8018968 <xTimerCreateTimerTask+0x54>)
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	b1cb      	cbz	r3, 8018956 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018922:	2400      	movs	r4, #0
 8018924:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018926:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018928:	aa07      	add	r2, sp, #28
 801892a:	a906      	add	r1, sp, #24
 801892c:	a805      	add	r0, sp, #20
 801892e:	f7fe fb71 	bl	8017014 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018932:	9b05      	ldr	r3, [sp, #20]
 8018934:	9302      	str	r3, [sp, #8]
 8018936:	9b06      	ldr	r3, [sp, #24]
 8018938:	9301      	str	r3, [sp, #4]
 801893a:	2302      	movs	r3, #2
 801893c:	9300      	str	r3, [sp, #0]
 801893e:	4623      	mov	r3, r4
 8018940:	9a07      	ldr	r2, [sp, #28]
 8018942:	490a      	ldr	r1, [pc, #40]	@ (801896c <xTimerCreateTimerTask+0x58>)
 8018944:	480a      	ldr	r0, [pc, #40]	@ (8018970 <xTimerCreateTimerTask+0x5c>)
 8018946:	f7ff fb4f 	bl	8017fe8 <xTaskCreateStatic>
 801894a:	4b0a      	ldr	r3, [pc, #40]	@ (8018974 <xTimerCreateTimerTask+0x60>)
 801894c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801894e:	b110      	cbz	r0, 8018956 <xTimerCreateTimerTask+0x42>
}
 8018950:	2001      	movs	r0, #1
 8018952:	b008      	add	sp, #32
 8018954:	bd10      	pop	{r4, pc}
 8018956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801895a:	f383 8811 	msr	BASEPRI, r3
 801895e:	f3bf 8f6f 	isb	sy
 8018962:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8018966:	e7fe      	b.n	8018966 <xTimerCreateTimerTask+0x52>
 8018968:	20001de4 	.word	0x20001de4
 801896c:	080355c8 	.word	0x080355c8
 8018970:	08018c79 	.word	0x08018c79
 8018974:	20001de0 	.word	0x20001de0

08018978 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8018978:	b1b8      	cbz	r0, 80189aa <xTimerGenericCommand+0x32>
 801897a:	469c      	mov	ip, r3
 801897c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 801897e:	4818      	ldr	r0, [pc, #96]	@ (80189e0 <xTimerGenericCommand+0x68>)
 8018980:	6800      	ldr	r0, [r0, #0]
 8018982:	b358      	cbz	r0, 80189dc <xTimerGenericCommand+0x64>
{
 8018984:	b500      	push	{lr}
 8018986:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8018988:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801898a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801898c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801898e:	2905      	cmp	r1, #5
 8018990:	dc1c      	bgt.n	80189cc <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018992:	f7ff fe51 	bl	8018638 <xTaskGetSchedulerState>
 8018996:	2802      	cmp	r0, #2
 8018998:	d010      	beq.n	80189bc <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801899a:	2300      	movs	r3, #0
 801899c:	461a      	mov	r2, r3
 801899e:	4669      	mov	r1, sp
 80189a0:	480f      	ldr	r0, [pc, #60]	@ (80189e0 <xTimerGenericCommand+0x68>)
 80189a2:	6800      	ldr	r0, [r0, #0]
 80189a4:	f7fe fcf0 	bl	8017388 <xQueueGenericSend>
 80189a8:	e015      	b.n	80189d6 <xTimerGenericCommand+0x5e>
 80189aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189ae:	f383 8811 	msr	BASEPRI, r3
 80189b2:	f3bf 8f6f 	isb	sy
 80189b6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80189ba:	e7fe      	b.n	80189ba <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80189bc:	2300      	movs	r3, #0
 80189be:	9a06      	ldr	r2, [sp, #24]
 80189c0:	4669      	mov	r1, sp
 80189c2:	4807      	ldr	r0, [pc, #28]	@ (80189e0 <xTimerGenericCommand+0x68>)
 80189c4:	6800      	ldr	r0, [r0, #0]
 80189c6:	f7fe fcdf 	bl	8017388 <xQueueGenericSend>
 80189ca:	e004      	b.n	80189d6 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80189cc:	2300      	movs	r3, #0
 80189ce:	4662      	mov	r2, ip
 80189d0:	4669      	mov	r1, sp
 80189d2:	f7fe fde3 	bl	801759c <xQueueGenericSendFromISR>
}
 80189d6:	b005      	add	sp, #20
 80189d8:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 80189dc:	2000      	movs	r0, #0
}
 80189de:	4770      	bx	lr
 80189e0:	20001de4 	.word	0x20001de4

080189e4 <prvSwitchTimerLists>:
{
 80189e4:	b570      	push	{r4, r5, r6, lr}
 80189e6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80189e8:	4b1b      	ldr	r3, [pc, #108]	@ (8018a58 <prvSwitchTimerLists+0x74>)
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	681a      	ldr	r2, [r3, #0]
 80189ee:	b362      	cbz	r2, 8018a4a <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80189f0:	68db      	ldr	r3, [r3, #12]
 80189f2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80189f4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80189f6:	1d25      	adds	r5, r4, #4
 80189f8:	4628      	mov	r0, r5
 80189fa:	f7fe fb49 	bl	8017090 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80189fe:	6a23      	ldr	r3, [r4, #32]
 8018a00:	4620      	mov	r0, r4
 8018a02:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018a04:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018a08:	f013 0f04 	tst.w	r3, #4
 8018a0c:	d0ec      	beq.n	80189e8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018a0e:	69a3      	ldr	r3, [r4, #24]
 8018a10:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8018a12:	429e      	cmp	r6, r3
 8018a14:	d207      	bcs.n	8018a26 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018a16:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018a18:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018a1a:	4629      	mov	r1, r5
 8018a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8018a58 <prvSwitchTimerLists+0x74>)
 8018a1e:	6818      	ldr	r0, [r3, #0]
 8018a20:	f7fe fb1d 	bl	801705e <vListInsert>
 8018a24:	e7e0      	b.n	80189e8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018a26:	2100      	movs	r1, #0
 8018a28:	9100      	str	r1, [sp, #0]
 8018a2a:	460b      	mov	r3, r1
 8018a2c:	4632      	mov	r2, r6
 8018a2e:	4620      	mov	r0, r4
 8018a30:	f7ff ffa2 	bl	8018978 <xTimerGenericCommand>
				configASSERT( xResult );
 8018a34:	2800      	cmp	r0, #0
 8018a36:	d1d7      	bne.n	80189e8 <prvSwitchTimerLists+0x4>
 8018a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a3c:	f383 8811 	msr	BASEPRI, r3
 8018a40:	f3bf 8f6f 	isb	sy
 8018a44:	f3bf 8f4f 	dsb	sy
 8018a48:	e7fe      	b.n	8018a48 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8018a4a:	4a04      	ldr	r2, [pc, #16]	@ (8018a5c <prvSwitchTimerLists+0x78>)
 8018a4c:	6810      	ldr	r0, [r2, #0]
 8018a4e:	4902      	ldr	r1, [pc, #8]	@ (8018a58 <prvSwitchTimerLists+0x74>)
 8018a50:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8018a52:	6013      	str	r3, [r2, #0]
}
 8018a54:	b002      	add	sp, #8
 8018a56:	bd70      	pop	{r4, r5, r6, pc}
 8018a58:	20001dec 	.word	0x20001dec
 8018a5c:	20001de8 	.word	0x20001de8

08018a60 <prvSampleTimeNow>:
{
 8018a60:	b538      	push	{r3, r4, r5, lr}
 8018a62:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8018a64:	f7ff fb8e 	bl	8018184 <xTaskGetTickCount>
 8018a68:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8018a6a:	4b07      	ldr	r3, [pc, #28]	@ (8018a88 <prvSampleTimeNow+0x28>)
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	4283      	cmp	r3, r0
 8018a70:	d805      	bhi.n	8018a7e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8018a72:	2300      	movs	r3, #0
 8018a74:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8018a76:	4b04      	ldr	r3, [pc, #16]	@ (8018a88 <prvSampleTimeNow+0x28>)
 8018a78:	601c      	str	r4, [r3, #0]
}
 8018a7a:	4620      	mov	r0, r4
 8018a7c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8018a7e:	f7ff ffb1 	bl	80189e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018a82:	2301      	movs	r3, #1
 8018a84:	602b      	str	r3, [r5, #0]
 8018a86:	e7f6      	b.n	8018a76 <prvSampleTimeNow+0x16>
 8018a88:	20001ddc 	.word	0x20001ddc

08018a8c <prvProcessExpiredTimer>:
{
 8018a8c:	b570      	push	{r4, r5, r6, lr}
 8018a8e:	b082      	sub	sp, #8
 8018a90:	4606      	mov	r6, r0
 8018a92:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a94:	4917      	ldr	r1, [pc, #92]	@ (8018af4 <prvProcessExpiredTimer+0x68>)
 8018a96:	6809      	ldr	r1, [r1, #0]
 8018a98:	68c9      	ldr	r1, [r1, #12]
 8018a9a:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018a9c:	1d20      	adds	r0, r4, #4
 8018a9e:	f7fe faf7 	bl	8017090 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018aa2:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8018aa6:	f01c 0f04 	tst.w	ip, #4
 8018aaa:	d108      	bne.n	8018abe <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018aac:	f02c 0c01 	bic.w	ip, ip, #1
 8018ab0:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018ab4:	6a23      	ldr	r3, [r4, #32]
 8018ab6:	4620      	mov	r0, r4
 8018ab8:	4798      	blx	r3
}
 8018aba:	b002      	add	sp, #8
 8018abc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018abe:	69a1      	ldr	r1, [r4, #24]
 8018ac0:	4633      	mov	r3, r6
 8018ac2:	462a      	mov	r2, r5
 8018ac4:	4431      	add	r1, r6
 8018ac6:	4620      	mov	r0, r4
 8018ac8:	f7ff fec8 	bl	801885c <prvInsertTimerInActiveList>
 8018acc:	2800      	cmp	r0, #0
 8018ace:	d0f1      	beq.n	8018ab4 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018ad0:	2100      	movs	r1, #0
 8018ad2:	9100      	str	r1, [sp, #0]
 8018ad4:	460b      	mov	r3, r1
 8018ad6:	4632      	mov	r2, r6
 8018ad8:	4620      	mov	r0, r4
 8018ada:	f7ff ff4d 	bl	8018978 <xTimerGenericCommand>
			configASSERT( xResult );
 8018ade:	2800      	cmp	r0, #0
 8018ae0:	d1e8      	bne.n	8018ab4 <prvProcessExpiredTimer+0x28>
 8018ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ae6:	f383 8811 	msr	BASEPRI, r3
 8018aea:	f3bf 8f6f 	isb	sy
 8018aee:	f3bf 8f4f 	dsb	sy
 8018af2:	e7fe      	b.n	8018af2 <prvProcessExpiredTimer+0x66>
 8018af4:	20001dec 	.word	0x20001dec

08018af8 <prvProcessTimerOrBlockTask>:
{
 8018af8:	b570      	push	{r4, r5, r6, lr}
 8018afa:	b082      	sub	sp, #8
 8018afc:	4606      	mov	r6, r0
 8018afe:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8018b00:	f7ff fb38 	bl	8018174 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018b04:	a801      	add	r0, sp, #4
 8018b06:	f7ff ffab 	bl	8018a60 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8018b0a:	9b01      	ldr	r3, [sp, #4]
 8018b0c:	bb33      	cbnz	r3, 8018b5c <prvProcessTimerOrBlockTask+0x64>
 8018b0e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018b10:	b9e4      	cbnz	r4, 8018b4c <prvProcessTimerOrBlockTask+0x54>
 8018b12:	42b0      	cmp	r0, r6
 8018b14:	d213      	bcs.n	8018b3e <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018b16:	4622      	mov	r2, r4
 8018b18:	1b71      	subs	r1, r6, r5
 8018b1a:	4b12      	ldr	r3, [pc, #72]	@ (8018b64 <prvProcessTimerOrBlockTask+0x6c>)
 8018b1c:	6818      	ldr	r0, [r3, #0]
 8018b1e:	f7ff f87f 	bl	8017c20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018b22:	f7ff fbc1 	bl	80182a8 <xTaskResumeAll>
 8018b26:	b9d8      	cbnz	r0, 8018b60 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8018b28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018b2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018b30:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018b34:	f3bf 8f4f 	dsb	sy
 8018b38:	f3bf 8f6f 	isb	sy
 8018b3c:	e010      	b.n	8018b60 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8018b3e:	f7ff fbb3 	bl	80182a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018b42:	4629      	mov	r1, r5
 8018b44:	4630      	mov	r0, r6
 8018b46:	f7ff ffa1 	bl	8018a8c <prvProcessExpiredTimer>
 8018b4a:	e009      	b.n	8018b60 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018b4c:	4a06      	ldr	r2, [pc, #24]	@ (8018b68 <prvProcessTimerOrBlockTask+0x70>)
 8018b4e:	6812      	ldr	r2, [r2, #0]
 8018b50:	6812      	ldr	r2, [r2, #0]
 8018b52:	b90a      	cbnz	r2, 8018b58 <prvProcessTimerOrBlockTask+0x60>
 8018b54:	2401      	movs	r4, #1
 8018b56:	e7de      	b.n	8018b16 <prvProcessTimerOrBlockTask+0x1e>
 8018b58:	461c      	mov	r4, r3
 8018b5a:	e7dc      	b.n	8018b16 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8018b5c:	f7ff fba4 	bl	80182a8 <xTaskResumeAll>
}
 8018b60:	b002      	add	sp, #8
 8018b62:	bd70      	pop	{r4, r5, r6, pc}
 8018b64:	20001de4 	.word	0x20001de4
 8018b68:	20001de8 	.word	0x20001de8

08018b6c <prvProcessReceivedCommands>:
{
 8018b6c:	b510      	push	{r4, lr}
 8018b6e:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018b70:	e002      	b.n	8018b78 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018b72:	9b04      	ldr	r3, [sp, #16]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	da0f      	bge.n	8018b98 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018b78:	2200      	movs	r2, #0
 8018b7a:	a904      	add	r1, sp, #16
 8018b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8018c74 <prvProcessReceivedCommands+0x108>)
 8018b7e:	6818      	ldr	r0, [r3, #0]
 8018b80:	f7fe fd73 	bl	801766a <xQueueReceive>
 8018b84:	2800      	cmp	r0, #0
 8018b86:	d073      	beq.n	8018c70 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018b88:	9b04      	ldr	r3, [sp, #16]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	daf1      	bge.n	8018b72 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018b8e:	9907      	ldr	r1, [sp, #28]
 8018b90:	9806      	ldr	r0, [sp, #24]
 8018b92:	9b05      	ldr	r3, [sp, #20]
 8018b94:	4798      	blx	r3
 8018b96:	e7ec      	b.n	8018b72 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018b98:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018b9a:	6963      	ldr	r3, [r4, #20]
 8018b9c:	b113      	cbz	r3, 8018ba4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018b9e:	1d20      	adds	r0, r4, #4
 8018ba0:	f7fe fa76 	bl	8017090 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018ba4:	a803      	add	r0, sp, #12
 8018ba6:	f7ff ff5b 	bl	8018a60 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8018baa:	9b04      	ldr	r3, [sp, #16]
 8018bac:	2b09      	cmp	r3, #9
 8018bae:	d8e3      	bhi.n	8018b78 <prvProcessReceivedCommands+0xc>
 8018bb0:	e8df f003 	tbb	[pc, r3]
 8018bb4:	30050505 	.word	0x30050505
 8018bb8:	05055037 	.word	0x05055037
 8018bbc:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018bbe:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018bc2:	f043 0301 	orr.w	r3, r3, #1
 8018bc6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018bca:	9b05      	ldr	r3, [sp, #20]
 8018bcc:	69a1      	ldr	r1, [r4, #24]
 8018bce:	4602      	mov	r2, r0
 8018bd0:	4419      	add	r1, r3
 8018bd2:	4620      	mov	r0, r4
 8018bd4:	f7ff fe42 	bl	801885c <prvInsertTimerInActiveList>
 8018bd8:	2800      	cmp	r0, #0
 8018bda:	d0cd      	beq.n	8018b78 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018bdc:	6a23      	ldr	r3, [r4, #32]
 8018bde:	4620      	mov	r0, r4
 8018be0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018be2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018be6:	f013 0f04 	tst.w	r3, #4
 8018bea:	d0c5      	beq.n	8018b78 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018bec:	69a2      	ldr	r2, [r4, #24]
 8018bee:	2100      	movs	r1, #0
 8018bf0:	9100      	str	r1, [sp, #0]
 8018bf2:	460b      	mov	r3, r1
 8018bf4:	9805      	ldr	r0, [sp, #20]
 8018bf6:	4402      	add	r2, r0
 8018bf8:	4620      	mov	r0, r4
 8018bfa:	f7ff febd 	bl	8018978 <xTimerGenericCommand>
							configASSERT( xResult );
 8018bfe:	2800      	cmp	r0, #0
 8018c00:	d1ba      	bne.n	8018b78 <prvProcessReceivedCommands+0xc>
 8018c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c06:	f383 8811 	msr	BASEPRI, r3
 8018c0a:	f3bf 8f6f 	isb	sy
 8018c0e:	f3bf 8f4f 	dsb	sy
 8018c12:	e7fe      	b.n	8018c12 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018c14:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018c18:	f023 0301 	bic.w	r3, r3, #1
 8018c1c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8018c20:	e7aa      	b.n	8018b78 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018c22:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018c26:	f043 0301 	orr.w	r3, r3, #1
 8018c2a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018c2e:	9905      	ldr	r1, [sp, #20]
 8018c30:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018c32:	b131      	cbz	r1, 8018c42 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018c34:	4603      	mov	r3, r0
 8018c36:	4602      	mov	r2, r0
 8018c38:	4401      	add	r1, r0
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	f7ff fe0e 	bl	801885c <prvInsertTimerInActiveList>
					break;
 8018c40:	e79a      	b.n	8018b78 <prvProcessReceivedCommands+0xc>
 8018c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c46:	f383 8811 	msr	BASEPRI, r3
 8018c4a:	f3bf 8f6f 	isb	sy
 8018c4e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018c52:	e7fe      	b.n	8018c52 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018c54:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018c58:	f013 0f02 	tst.w	r3, #2
 8018c5c:	d004      	beq.n	8018c68 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018c5e:	f023 0301 	bic.w	r3, r3, #1
 8018c62:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8018c66:	e787      	b.n	8018b78 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8018c68:	4620      	mov	r0, r4
 8018c6a:	f000 fab7 	bl	80191dc <vPortFree>
 8018c6e:	e783      	b.n	8018b78 <prvProcessReceivedCommands+0xc>
}
 8018c70:	b008      	add	sp, #32
 8018c72:	bd10      	pop	{r4, pc}
 8018c74:	20001de4 	.word	0x20001de4

08018c78 <prvTimerTask>:
{
 8018c78:	b500      	push	{lr}
 8018c7a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018c7c:	a801      	add	r0, sp, #4
 8018c7e:	f7ff fddd 	bl	801883c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018c82:	9901      	ldr	r1, [sp, #4]
 8018c84:	f7ff ff38 	bl	8018af8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8018c88:	f7ff ff70 	bl	8018b6c <prvProcessReceivedCommands>
	for( ;; )
 8018c8c:	e7f6      	b.n	8018c7c <prvTimerTask+0x4>
	...

08018c90 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018c90:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8018c92:	2300      	movs	r3, #0
 8018c94:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018c96:	4b0d      	ldr	r3, [pc, #52]	@ (8018ccc <prvTaskExitError+0x3c>)
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018c9e:	d008      	beq.n	8018cb2 <prvTaskExitError+0x22>
 8018ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ca4:	f383 8811 	msr	BASEPRI, r3
 8018ca8:	f3bf 8f6f 	isb	sy
 8018cac:	f3bf 8f4f 	dsb	sy
 8018cb0:	e7fe      	b.n	8018cb0 <prvTaskExitError+0x20>
 8018cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cb6:	f383 8811 	msr	BASEPRI, r3
 8018cba:	f3bf 8f6f 	isb	sy
 8018cbe:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018cc2:	9b01      	ldr	r3, [sp, #4]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d0fc      	beq.n	8018cc2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018cc8:	b002      	add	sp, #8
 8018cca:	4770      	bx	lr
 8018ccc:	20000090 	.word	0x20000090

08018cd0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018cd0:	4808      	ldr	r0, [pc, #32]	@ (8018cf4 <prvPortStartFirstTask+0x24>)
 8018cd2:	6800      	ldr	r0, [r0, #0]
 8018cd4:	6800      	ldr	r0, [r0, #0]
 8018cd6:	f380 8808 	msr	MSP, r0
 8018cda:	f04f 0000 	mov.w	r0, #0
 8018cde:	f380 8814 	msr	CONTROL, r0
 8018ce2:	b662      	cpsie	i
 8018ce4:	b661      	cpsie	f
 8018ce6:	f3bf 8f4f 	dsb	sy
 8018cea:	f3bf 8f6f 	isb	sy
 8018cee:	df00      	svc	0
 8018cf0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018cf2:	0000      	.short	0x0000
 8018cf4:	e000ed08 	.word	0xe000ed08

08018cf8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018cf8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8018d08 <vPortEnableVFP+0x10>
 8018cfc:	6801      	ldr	r1, [r0, #0]
 8018cfe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8018d02:	6001      	str	r1, [r0, #0]
 8018d04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018d06:	0000      	.short	0x0000
 8018d08:	e000ed88 	.word	0xe000ed88

08018d0c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018d0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8018d10:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018d14:	f021 0101 	bic.w	r1, r1, #1
 8018d18:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018d1c:	4b05      	ldr	r3, [pc, #20]	@ (8018d34 <pxPortInitialiseStack+0x28>)
 8018d1e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018d22:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018d26:	f06f 0302 	mvn.w	r3, #2
 8018d2a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8018d2e:	3844      	subs	r0, #68	@ 0x44
 8018d30:	4770      	bx	lr
 8018d32:	bf00      	nop
 8018d34:	08018c91 	.word	0x08018c91
	...

08018d40 <SVC_Handler>:
	__asm volatile (
 8018d40:	4b07      	ldr	r3, [pc, #28]	@ (8018d60 <pxCurrentTCBConst2>)
 8018d42:	6819      	ldr	r1, [r3, #0]
 8018d44:	6808      	ldr	r0, [r1, #0]
 8018d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d4a:	f380 8809 	msr	PSP, r0
 8018d4e:	f3bf 8f6f 	isb	sy
 8018d52:	f04f 0000 	mov.w	r0, #0
 8018d56:	f380 8811 	msr	BASEPRI, r0
 8018d5a:	4770      	bx	lr
 8018d5c:	f3af 8000 	nop.w

08018d60 <pxCurrentTCBConst2>:
 8018d60:	20001ce8 	.word	0x20001ce8

08018d64 <vPortEnterCritical>:
 8018d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d68:	f383 8811 	msr	BASEPRI, r3
 8018d6c:	f3bf 8f6f 	isb	sy
 8018d70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8018d74:	4a0b      	ldr	r2, [pc, #44]	@ (8018da4 <vPortEnterCritical+0x40>)
 8018d76:	6813      	ldr	r3, [r2, #0]
 8018d78:	3301      	adds	r3, #1
 8018d7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8018d7c:	2b01      	cmp	r3, #1
 8018d7e:	d000      	beq.n	8018d82 <vPortEnterCritical+0x1e>
}
 8018d80:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018d82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018d86:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8018d8a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8018d8e:	d0f7      	beq.n	8018d80 <vPortEnterCritical+0x1c>
 8018d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d94:	f383 8811 	msr	BASEPRI, r3
 8018d98:	f3bf 8f6f 	isb	sy
 8018d9c:	f3bf 8f4f 	dsb	sy
 8018da0:	e7fe      	b.n	8018da0 <vPortEnterCritical+0x3c>
 8018da2:	bf00      	nop
 8018da4:	20000090 	.word	0x20000090

08018da8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8018da8:	4b09      	ldr	r3, [pc, #36]	@ (8018dd0 <vPortExitCritical+0x28>)
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	b943      	cbnz	r3, 8018dc0 <vPortExitCritical+0x18>
 8018dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018db2:	f383 8811 	msr	BASEPRI, r3
 8018db6:	f3bf 8f6f 	isb	sy
 8018dba:	f3bf 8f4f 	dsb	sy
 8018dbe:	e7fe      	b.n	8018dbe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8018dc0:	3b01      	subs	r3, #1
 8018dc2:	4a03      	ldr	r2, [pc, #12]	@ (8018dd0 <vPortExitCritical+0x28>)
 8018dc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018dc6:	b90b      	cbnz	r3, 8018dcc <vPortExitCritical+0x24>
	__asm volatile
 8018dc8:	f383 8811 	msr	BASEPRI, r3
}
 8018dcc:	4770      	bx	lr
 8018dce:	bf00      	nop
 8018dd0:	20000090 	.word	0x20000090
	...

08018de0 <PendSV_Handler>:
	__asm volatile
 8018de0:	f3ef 8009 	mrs	r0, PSP
 8018de4:	f3bf 8f6f 	isb	sy
 8018de8:	4b15      	ldr	r3, [pc, #84]	@ (8018e40 <pxCurrentTCBConst>)
 8018dea:	681a      	ldr	r2, [r3, #0]
 8018dec:	f01e 0f10 	tst.w	lr, #16
 8018df0:	bf08      	it	eq
 8018df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dfa:	6010      	str	r0, [r2, #0]
 8018dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018e00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8018e04:	f380 8811 	msr	BASEPRI, r0
 8018e08:	f3bf 8f4f 	dsb	sy
 8018e0c:	f3bf 8f6f 	isb	sy
 8018e10:	f7ff faec 	bl	80183ec <vTaskSwitchContext>
 8018e14:	f04f 0000 	mov.w	r0, #0
 8018e18:	f380 8811 	msr	BASEPRI, r0
 8018e1c:	bc09      	pop	{r0, r3}
 8018e1e:	6819      	ldr	r1, [r3, #0]
 8018e20:	6808      	ldr	r0, [r1, #0]
 8018e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e26:	f01e 0f10 	tst.w	lr, #16
 8018e2a:	bf08      	it	eq
 8018e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018e30:	f380 8809 	msr	PSP, r0
 8018e34:	f3bf 8f6f 	isb	sy
 8018e38:	4770      	bx	lr
 8018e3a:	bf00      	nop
 8018e3c:	f3af 8000 	nop.w

08018e40 <pxCurrentTCBConst>:
 8018e40:	20001ce8 	.word	0x20001ce8

08018e44 <xPortSysTickHandler>:
{
 8018e44:	b508      	push	{r3, lr}
	__asm volatile
 8018e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e4a:	f383 8811 	msr	BASEPRI, r3
 8018e4e:	f3bf 8f6f 	isb	sy
 8018e52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8018e56:	f7ff f99b 	bl	8018190 <xTaskIncrementTick>
 8018e5a:	b128      	cbz	r0, 8018e68 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018e5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018e64:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8018e68:	2300      	movs	r3, #0
 8018e6a:	f383 8811 	msr	BASEPRI, r3
}
 8018e6e:	bd08      	pop	{r3, pc}

08018e70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018e70:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8018e74:	2300      	movs	r3, #0
 8018e76:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018e78:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018e7a:	4b05      	ldr	r3, [pc, #20]	@ (8018e90 <vPortSetupTimerInterrupt+0x20>)
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	4905      	ldr	r1, [pc, #20]	@ (8018e94 <vPortSetupTimerInterrupt+0x24>)
 8018e80:	fba1 1303 	umull	r1, r3, r1, r3
 8018e84:	099b      	lsrs	r3, r3, #6
 8018e86:	3b01      	subs	r3, #1
 8018e88:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018e8a:	2307      	movs	r3, #7
 8018e8c:	6113      	str	r3, [r2, #16]
}
 8018e8e:	4770      	bx	lr
 8018e90:	20000018 	.word	0x20000018
 8018e94:	10624dd3 	.word	0x10624dd3

08018e98 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018e98:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018e9c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8018ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8018f98 <xPortStartScheduler+0x100>)
 8018ea2:	429a      	cmp	r2, r3
 8018ea4:	d01c      	beq.n	8018ee0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018ea6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018eaa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8018eae:	4b3b      	ldr	r3, [pc, #236]	@ (8018f9c <xPortStartScheduler+0x104>)
 8018eb0:	429a      	cmp	r2, r3
 8018eb2:	d01e      	beq.n	8018ef2 <xPortStartScheduler+0x5a>
{
 8018eb4:	b530      	push	{r4, r5, lr}
 8018eb6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018eb8:	4b39      	ldr	r3, [pc, #228]	@ (8018fa0 <xPortStartScheduler+0x108>)
 8018eba:	781a      	ldrb	r2, [r3, #0]
 8018ebc:	b2d2      	uxtb	r2, r2
 8018ebe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018ec0:	22ff      	movs	r2, #255	@ 0xff
 8018ec2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018ec4:	781b      	ldrb	r3, [r3, #0]
 8018ec6:	b2db      	uxtb	r3, r3
 8018ec8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018ecc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018ed0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8018ed4:	4a33      	ldr	r2, [pc, #204]	@ (8018fa4 <xPortStartScheduler+0x10c>)
 8018ed6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018ed8:	4b33      	ldr	r3, [pc, #204]	@ (8018fa8 <xPortStartScheduler+0x110>)
 8018eda:	2207      	movs	r2, #7
 8018edc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018ede:	e01b      	b.n	8018f18 <xPortStartScheduler+0x80>
	__asm volatile
 8018ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ee4:	f383 8811 	msr	BASEPRI, r3
 8018ee8:	f3bf 8f6f 	isb	sy
 8018eec:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018ef0:	e7fe      	b.n	8018ef0 <xPortStartScheduler+0x58>
 8018ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ef6:	f383 8811 	msr	BASEPRI, r3
 8018efa:	f3bf 8f6f 	isb	sy
 8018efe:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018f02:	e7fe      	b.n	8018f02 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8018f04:	4a28      	ldr	r2, [pc, #160]	@ (8018fa8 <xPortStartScheduler+0x110>)
 8018f06:	6813      	ldr	r3, [r2, #0]
 8018f08:	3b01      	subs	r3, #1
 8018f0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018f0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018f10:	005b      	lsls	r3, r3, #1
 8018f12:	b2db      	uxtb	r3, r3
 8018f14:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018f18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018f1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018f20:	d1f0      	bne.n	8018f04 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018f22:	4b21      	ldr	r3, [pc, #132]	@ (8018fa8 <xPortStartScheduler+0x110>)
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	2b03      	cmp	r3, #3
 8018f28:	d008      	beq.n	8018f3c <xPortStartScheduler+0xa4>
 8018f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f2e:	f383 8811 	msr	BASEPRI, r3
 8018f32:	f3bf 8f6f 	isb	sy
 8018f36:	f3bf 8f4f 	dsb	sy
 8018f3a:	e7fe      	b.n	8018f3a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018f3c:	021b      	lsls	r3, r3, #8
 8018f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8018fa8 <xPortStartScheduler+0x110>)
 8018f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018f42:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018f46:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018f48:	9b01      	ldr	r3, [sp, #4]
 8018f4a:	b2db      	uxtb	r3, r3
 8018f4c:	4a14      	ldr	r2, [pc, #80]	@ (8018fa0 <xPortStartScheduler+0x108>)
 8018f4e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018f50:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8018f54:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8018f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018f5c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018f60:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8018f64:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8018f68:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8018f6c:	f7ff ff80 	bl	8018e70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8018f70:	2500      	movs	r5, #0
 8018f72:	4b0e      	ldr	r3, [pc, #56]	@ (8018fac <xPortStartScheduler+0x114>)
 8018f74:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8018f76:	f7ff febf 	bl	8018cf8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018f7a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8018f7e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8018f82:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8018f86:	f7ff fea3 	bl	8018cd0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8018f8a:	f7ff fa2f 	bl	80183ec <vTaskSwitchContext>
	prvTaskExitError();
 8018f8e:	f7ff fe7f 	bl	8018c90 <prvTaskExitError>
}
 8018f92:	4628      	mov	r0, r5
 8018f94:	b003      	add	sp, #12
 8018f96:	bd30      	pop	{r4, r5, pc}
 8018f98:	410fc271 	.word	0x410fc271
 8018f9c:	410fc270 	.word	0x410fc270
 8018fa0:	e000e400 	.word	0xe000e400
 8018fa4:	20001e1c 	.word	0x20001e1c
 8018fa8:	20001e18 	.word	0x20001e18
 8018fac:	20000090 	.word	0x20000090

08018fb0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018fb0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018fb4:	2b0f      	cmp	r3, #15
 8018fb6:	d90f      	bls.n	8018fd8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018fb8:	4a11      	ldr	r2, [pc, #68]	@ (8019000 <vPortValidateInterruptPriority+0x50>)
 8018fba:	5c9b      	ldrb	r3, [r3, r2]
 8018fbc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018fbe:	4a11      	ldr	r2, [pc, #68]	@ (8019004 <vPortValidateInterruptPriority+0x54>)
 8018fc0:	7812      	ldrb	r2, [r2, #0]
 8018fc2:	429a      	cmp	r2, r3
 8018fc4:	d908      	bls.n	8018fd8 <vPortValidateInterruptPriority+0x28>
 8018fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fca:	f383 8811 	msr	BASEPRI, r3
 8018fce:	f3bf 8f6f 	isb	sy
 8018fd2:	f3bf 8f4f 	dsb	sy
 8018fd6:	e7fe      	b.n	8018fd6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018fd8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018fdc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8018fe0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018fe4:	4a08      	ldr	r2, [pc, #32]	@ (8019008 <vPortValidateInterruptPriority+0x58>)
 8018fe6:	6812      	ldr	r2, [r2, #0]
 8018fe8:	4293      	cmp	r3, r2
 8018fea:	d908      	bls.n	8018ffe <vPortValidateInterruptPriority+0x4e>
 8018fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ff0:	f383 8811 	msr	BASEPRI, r3
 8018ff4:	f3bf 8f6f 	isb	sy
 8018ff8:	f3bf 8f4f 	dsb	sy
 8018ffc:	e7fe      	b.n	8018ffc <vPortValidateInterruptPriority+0x4c>
	}
 8018ffe:	4770      	bx	lr
 8019000:	e000e3f0 	.word	0xe000e3f0
 8019004:	20001e1c 	.word	0x20001e1c
 8019008:	20001e18 	.word	0x20001e18

0801900c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801900c:	4a12      	ldr	r2, [pc, #72]	@ (8019058 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801900e:	f012 0f07 	tst.w	r2, #7
 8019012:	d01f      	beq.n	8019054 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019014:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019016:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801901a:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 801901e:	33f8      	adds	r3, #248	@ 0xf8
 8019020:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019022:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019024:	480d      	ldr	r0, [pc, #52]	@ (801905c <prvHeapInit+0x50>)
 8019026:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019028:	2100      	movs	r1, #0
 801902a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801902c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801902e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019030:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8019034:	480a      	ldr	r0, [pc, #40]	@ (8019060 <prvHeapInit+0x54>)
 8019036:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8019038:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801903a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801903c:	1a99      	subs	r1, r3, r2
 801903e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019040:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019042:	4b08      	ldr	r3, [pc, #32]	@ (8019064 <prvHeapInit+0x58>)
 8019044:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019046:	4b08      	ldr	r3, [pc, #32]	@ (8019068 <prvHeapInit+0x5c>)
 8019048:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801904a:	4b08      	ldr	r3, [pc, #32]	@ (801906c <prvHeapInit+0x60>)
 801904c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8019050:	601a      	str	r2, [r3, #0]
}
 8019052:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019054:	4b06      	ldr	r3, [pc, #24]	@ (8019070 <prvHeapInit+0x64>)
 8019056:	e7e5      	b.n	8019024 <prvHeapInit+0x18>
 8019058:	20001e40 	.word	0x20001e40
 801905c:	20001e38 	.word	0x20001e38
 8019060:	20001e34 	.word	0x20001e34
 8019064:	20001e2c 	.word	0x20001e2c
 8019068:	20001e30 	.word	0x20001e30
 801906c:	20001e20 	.word	0x20001e20
 8019070:	000160f8 	.word	0x000160f8

08019074 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019074:	4b16      	ldr	r3, [pc, #88]	@ (80190d0 <prvInsertBlockIntoFreeList+0x5c>)
 8019076:	461a      	mov	r2, r3
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	4283      	cmp	r3, r0
 801907c:	d3fb      	bcc.n	8019076 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801907e:	6851      	ldr	r1, [r2, #4]
 8019080:	eb02 0c01 	add.w	ip, r2, r1
 8019084:	4584      	cmp	ip, r0
 8019086:	d009      	beq.n	801909c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019088:	6841      	ldr	r1, [r0, #4]
 801908a:	eb00 0c01 	add.w	ip, r0, r1
 801908e:	4563      	cmp	r3, ip
 8019090:	d009      	beq.n	80190a6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019092:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019094:	4290      	cmp	r0, r2
 8019096:	d019      	beq.n	80190cc <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019098:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 801909a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801909c:	6840      	ldr	r0, [r0, #4]
 801909e:	4401      	add	r1, r0
 80190a0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80190a2:	4610      	mov	r0, r2
 80190a4:	e7f0      	b.n	8019088 <prvInsertBlockIntoFreeList+0x14>
{
 80190a6:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80190a8:	4c0a      	ldr	r4, [pc, #40]	@ (80190d4 <prvInsertBlockIntoFreeList+0x60>)
 80190aa:	6824      	ldr	r4, [r4, #0]
 80190ac:	42a3      	cmp	r3, r4
 80190ae:	d00b      	beq.n	80190c8 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80190b0:	685b      	ldr	r3, [r3, #4]
 80190b2:	4419      	add	r1, r3
 80190b4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80190b6:	6813      	ldr	r3, [r2, #0]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80190bc:	4290      	cmp	r0, r2
 80190be:	d000      	beq.n	80190c2 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80190c0:	6010      	str	r0, [r2, #0]
	}
}
 80190c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190c6:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80190c8:	6004      	str	r4, [r0, #0]
 80190ca:	e7f7      	b.n	80190bc <prvInsertBlockIntoFreeList+0x48>
 80190cc:	4770      	bx	lr
 80190ce:	bf00      	nop
 80190d0:	20001e38 	.word	0x20001e38
 80190d4:	20001e34 	.word	0x20001e34

080190d8 <pvPortMalloc>:
{
 80190d8:	b538      	push	{r3, r4, r5, lr}
 80190da:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80190dc:	f7ff f84a 	bl	8018174 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80190e0:	4b38      	ldr	r3, [pc, #224]	@ (80191c4 <pvPortMalloc+0xec>)
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	b1b3      	cbz	r3, 8019114 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80190e6:	4b38      	ldr	r3, [pc, #224]	@ (80191c8 <pvPortMalloc+0xf0>)
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	421c      	tst	r4, r3
 80190ec:	d150      	bne.n	8019190 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 80190ee:	2c00      	cmp	r4, #0
 80190f0:	d050      	beq.n	8019194 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 80190f2:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80190f6:	f014 0f07 	tst.w	r4, #7
 80190fa:	d002      	beq.n	8019102 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80190fc:	f022 0207 	bic.w	r2, r2, #7
 8019100:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019102:	2a00      	cmp	r2, #0
 8019104:	d055      	beq.n	80191b2 <pvPortMalloc+0xda>
 8019106:	4b31      	ldr	r3, [pc, #196]	@ (80191cc <pvPortMalloc+0xf4>)
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	4293      	cmp	r3, r2
 801910c:	d353      	bcc.n	80191b6 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 801910e:	4930      	ldr	r1, [pc, #192]	@ (80191d0 <pvPortMalloc+0xf8>)
 8019110:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019112:	e004      	b.n	801911e <pvPortMalloc+0x46>
			prvHeapInit();
 8019114:	f7ff ff7a 	bl	801900c <prvHeapInit>
 8019118:	e7e5      	b.n	80190e6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 801911a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801911c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801911e:	6863      	ldr	r3, [r4, #4]
 8019120:	4293      	cmp	r3, r2
 8019122:	d202      	bcs.n	801912a <pvPortMalloc+0x52>
 8019124:	6823      	ldr	r3, [r4, #0]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d1f7      	bne.n	801911a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 801912a:	4b26      	ldr	r3, [pc, #152]	@ (80191c4 <pvPortMalloc+0xec>)
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	42a3      	cmp	r3, r4
 8019130:	d043      	beq.n	80191ba <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019132:	680d      	ldr	r5, [r1, #0]
 8019134:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019136:	6823      	ldr	r3, [r4, #0]
 8019138:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801913a:	6863      	ldr	r3, [r4, #4]
 801913c:	1a9b      	subs	r3, r3, r2
 801913e:	2b10      	cmp	r3, #16
 8019140:	d910      	bls.n	8019164 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019142:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019144:	f010 0f07 	tst.w	r0, #7
 8019148:	d008      	beq.n	801915c <pvPortMalloc+0x84>
 801914a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801914e:	f383 8811 	msr	BASEPRI, r3
 8019152:	f3bf 8f6f 	isb	sy
 8019156:	f3bf 8f4f 	dsb	sy
 801915a:	e7fe      	b.n	801915a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801915c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801915e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019160:	f7ff ff88 	bl	8019074 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019164:	6862      	ldr	r2, [r4, #4]
 8019166:	4919      	ldr	r1, [pc, #100]	@ (80191cc <pvPortMalloc+0xf4>)
 8019168:	680b      	ldr	r3, [r1, #0]
 801916a:	1a9b      	subs	r3, r3, r2
 801916c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801916e:	4919      	ldr	r1, [pc, #100]	@ (80191d4 <pvPortMalloc+0xfc>)
 8019170:	6809      	ldr	r1, [r1, #0]
 8019172:	428b      	cmp	r3, r1
 8019174:	d201      	bcs.n	801917a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019176:	4917      	ldr	r1, [pc, #92]	@ (80191d4 <pvPortMalloc+0xfc>)
 8019178:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801917a:	4b13      	ldr	r3, [pc, #76]	@ (80191c8 <pvPortMalloc+0xf0>)
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	4313      	orrs	r3, r2
 8019180:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019182:	2300      	movs	r3, #0
 8019184:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8019186:	4a14      	ldr	r2, [pc, #80]	@ (80191d8 <pvPortMalloc+0x100>)
 8019188:	6813      	ldr	r3, [r2, #0]
 801918a:	3301      	adds	r3, #1
 801918c:	6013      	str	r3, [r2, #0]
 801918e:	e002      	b.n	8019196 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8019190:	2500      	movs	r5, #0
 8019192:	e000      	b.n	8019196 <pvPortMalloc+0xbe>
 8019194:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8019196:	f7ff f887 	bl	80182a8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801919a:	f015 0f07 	tst.w	r5, #7
 801919e:	d00e      	beq.n	80191be <pvPortMalloc+0xe6>
 80191a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191a4:	f383 8811 	msr	BASEPRI, r3
 80191a8:	f3bf 8f6f 	isb	sy
 80191ac:	f3bf 8f4f 	dsb	sy
 80191b0:	e7fe      	b.n	80191b0 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 80191b2:	2500      	movs	r5, #0
 80191b4:	e7ef      	b.n	8019196 <pvPortMalloc+0xbe>
 80191b6:	2500      	movs	r5, #0
 80191b8:	e7ed      	b.n	8019196 <pvPortMalloc+0xbe>
 80191ba:	2500      	movs	r5, #0
 80191bc:	e7eb      	b.n	8019196 <pvPortMalloc+0xbe>
}
 80191be:	4628      	mov	r0, r5
 80191c0:	bd38      	pop	{r3, r4, r5, pc}
 80191c2:	bf00      	nop
 80191c4:	20001e34 	.word	0x20001e34
 80191c8:	20001e20 	.word	0x20001e20
 80191cc:	20001e30 	.word	0x20001e30
 80191d0:	20001e38 	.word	0x20001e38
 80191d4:	20001e2c 	.word	0x20001e2c
 80191d8:	20001e28 	.word	0x20001e28

080191dc <vPortFree>:
	if( pv != NULL )
 80191dc:	2800      	cmp	r0, #0
 80191de:	d034      	beq.n	801924a <vPortFree+0x6e>
{
 80191e0:	b538      	push	{r3, r4, r5, lr}
 80191e2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80191e4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80191e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80191ec:	4a17      	ldr	r2, [pc, #92]	@ (801924c <vPortFree+0x70>)
 80191ee:	6812      	ldr	r2, [r2, #0]
 80191f0:	4213      	tst	r3, r2
 80191f2:	d108      	bne.n	8019206 <vPortFree+0x2a>
 80191f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191f8:	f383 8811 	msr	BASEPRI, r3
 80191fc:	f3bf 8f6f 	isb	sy
 8019200:	f3bf 8f4f 	dsb	sy
 8019204:	e7fe      	b.n	8019204 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019206:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801920a:	b141      	cbz	r1, 801921e <vPortFree+0x42>
 801920c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019210:	f383 8811 	msr	BASEPRI, r3
 8019214:	f3bf 8f6f 	isb	sy
 8019218:	f3bf 8f4f 	dsb	sy
 801921c:	e7fe      	b.n	801921c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801921e:	ea23 0302 	bic.w	r3, r3, r2
 8019222:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8019226:	f7fe ffa5 	bl	8018174 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801922a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801922e:	4a08      	ldr	r2, [pc, #32]	@ (8019250 <vPortFree+0x74>)
 8019230:	6813      	ldr	r3, [r2, #0]
 8019232:	440b      	add	r3, r1
 8019234:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019236:	4628      	mov	r0, r5
 8019238:	f7ff ff1c 	bl	8019074 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801923c:	4a05      	ldr	r2, [pc, #20]	@ (8019254 <vPortFree+0x78>)
 801923e:	6813      	ldr	r3, [r2, #0]
 8019240:	3301      	adds	r3, #1
 8019242:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8019244:	f7ff f830 	bl	80182a8 <xTaskResumeAll>
}
 8019248:	bd38      	pop	{r3, r4, r5, pc}
 801924a:	4770      	bx	lr
 801924c:	20001e20 	.word	0x20001e20
 8019250:	20001e30 	.word	0x20001e30
 8019254:	20001e24 	.word	0x20001e24

08019258 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 8019258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801925a:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 801925c:	f7fe ff8a 	bl	8018174 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 8019260:	4b17      	ldr	r3, [pc, #92]	@ (80192c0 <vPortGetHeapStats+0x68>)
 8019262:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 8019264:	b193      	cbz	r3, 801928c <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 8019266:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801926a:	2500      	movs	r5, #0
 801926c:	462c      	mov	r4, r5
 801926e:	e004      	b.n	801927a <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 8019270:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 8019272:	4a14      	ldr	r2, [pc, #80]	@ (80192c4 <vPortGetHeapStats+0x6c>)
 8019274:	6812      	ldr	r2, [r2, #0]
 8019276:	429a      	cmp	r2, r3
 8019278:	d00c      	beq.n	8019294 <vPortGetHeapStats+0x3c>
				xBlocks++;
 801927a:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 801927c:	685a      	ldr	r2, [r3, #4]
 801927e:	42aa      	cmp	r2, r5
 8019280:	d900      	bls.n	8019284 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 8019282:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 8019284:	42b2      	cmp	r2, r6
 8019286:	d2f3      	bcs.n	8019270 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 8019288:	4616      	mov	r6, r2
 801928a:	e7f1      	b.n	8019270 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801928c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019290:	2500      	movs	r5, #0
 8019292:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 8019294:	f7ff f808 	bl	80182a8 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 8019298:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801929a:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801929c:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 801929e:	f7ff fd61 	bl	8018d64 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 80192a2:	4b09      	ldr	r3, [pc, #36]	@ (80192c8 <vPortGetHeapStats+0x70>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 80192a8:	4b08      	ldr	r3, [pc, #32]	@ (80192cc <vPortGetHeapStats+0x74>)
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 80192ae:	4b08      	ldr	r3, [pc, #32]	@ (80192d0 <vPortGetHeapStats+0x78>)
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 80192b4:	4b07      	ldr	r3, [pc, #28]	@ (80192d4 <vPortGetHeapStats+0x7c>)
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80192ba:	f7ff fd75 	bl	8018da8 <vPortExitCritical>
}
 80192be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192c0:	20001e38 	.word	0x20001e38
 80192c4:	20001e34 	.word	0x20001e34
 80192c8:	20001e30 	.word	0x20001e30
 80192cc:	20001e28 	.word	0x20001e28
 80192d0:	20001e24 	.word	0x20001e24
 80192d4:	20001e2c 	.word	0x20001e2c

080192d8 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 80192d8:	2000      	movs	r0, #0
 80192da:	4770      	bx	lr

080192dc <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 80192dc:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80192de:	fb01 f400 	mul.w	r4, r1, r0
 80192e2:	4620      	mov	r0, r4
 80192e4:	f7ff fef8 	bl	80190d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80192e8:	4605      	mov	r5, r0
 80192ea:	b118      	cbz	r0, 80192f4 <mg_calloc+0x18>
 80192ec:	4622      	mov	r2, r4
 80192ee:	2100      	movs	r1, #0
 80192f0:	f010 fbf6 	bl	8029ae0 <memset>
}
 80192f4:	4628      	mov	r0, r5
 80192f6:	bd38      	pop	{r3, r4, r5, pc}

080192f8 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 80192f8:	b508      	push	{r3, lr}
 80192fa:	4684      	mov	ip, r0
 80192fc:	4618      	mov	r0, r3
	assert(block < c->block_count);
 80192fe:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 8019302:	428b      	cmp	r3, r1
 8019304:	d90a      	bls.n	801931c <block_device_read+0x24>
 8019306:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 8019308:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801930c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019310:	fb01 e103 	mla	r1, r1, r3, lr
 8019314:	f7fb f987 	bl	8014626 <sFLASH_ReadBuffer>
}
 8019318:	2000      	movs	r0, #0
 801931a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801931c:	4b03      	ldr	r3, [pc, #12]	@ (801932c <block_device_read+0x34>)
 801931e:	4a04      	ldr	r2, [pc, #16]	@ (8019330 <block_device_read+0x38>)
 8019320:	f240 1111 	movw	r1, #273	@ 0x111
 8019324:	4803      	ldr	r0, [pc, #12]	@ (8019334 <block_device_read+0x3c>)
 8019326:	f00d fe89 	bl	802703c <__assert_func>
 801932a:	bf00      	nop
 801932c:	080355d0 	.word	0x080355d0
 8019330:	0803564c 	.word	0x0803564c
 8019334:	080355e8 	.word	0x080355e8

08019338 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 8019338:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 801933a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801933c:	428b      	cmp	r3, r1
 801933e:	d906      	bls.n	801934e <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 8019340:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8019342:	fb01 f000 	mul.w	r0, r1, r0
 8019346:	f7fb faab 	bl	80148a0 <sFLASH_EraseSector>
}
 801934a:	2000      	movs	r0, #0
 801934c:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801934e:	4b03      	ldr	r3, [pc, #12]	@ (801935c <block_device_erase+0x24>)
 8019350:	4a03      	ldr	r2, [pc, #12]	@ (8019360 <block_device_erase+0x28>)
 8019352:	f240 1119 	movw	r1, #281	@ 0x119
 8019356:	4803      	ldr	r0, [pc, #12]	@ (8019364 <block_device_erase+0x2c>)
 8019358:	f00d fe70 	bl	802703c <__assert_func>
 801935c:	080355d0 	.word	0x080355d0
 8019360:	08035638 	.word	0x08035638
 8019364:	080355e8 	.word	0x080355e8

08019368 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 8019368:	b508      	push	{r3, lr}
 801936a:	4684      	mov	ip, r0
 801936c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801936e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 8019372:	428b      	cmp	r3, r1
 8019374:	d90a      	bls.n	801938c <block_device_prog+0x24>
 8019376:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 8019378:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801937c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019380:	fb01 e103 	mla	r1, r1, r3, lr
 8019384:	f7fb faca 	bl	801491c <sFLASH_WriteBuffer>
}
 8019388:	2000      	movs	r0, #0
 801938a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801938c:	4b03      	ldr	r3, [pc, #12]	@ (801939c <block_device_prog+0x34>)
 801938e:	4a04      	ldr	r2, [pc, #16]	@ (80193a0 <block_device_prog+0x38>)
 8019390:	f240 1121 	movw	r1, #289	@ 0x121
 8019394:	4803      	ldr	r0, [pc, #12]	@ (80193a4 <block_device_prog+0x3c>)
 8019396:	f00d fe51 	bl	802703c <__assert_func>
 801939a:	bf00      	nop
 801939c:	080355d0 	.word	0x080355d0
 80193a0:	08035624 	.word	0x08035624
 80193a4:	080355e8 	.word	0x080355e8

080193a8 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 80193a8:	b530      	push	{r4, r5, lr}
 80193aa:	b0c3      	sub	sp, #268	@ 0x10c
 80193ac:	460d      	mov	r5, r1
 80193ae:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 80193b0:	466a      	mov	r2, sp
 80193b2:	4601      	mov	r1, r0
 80193b4:	480b      	ldr	r0, [pc, #44]	@ (80193e4 <mg_fs_lfs_status+0x3c>)
 80193b6:	f004 fd85 	bl	801dec4 <lfs_stat>
 80193ba:	b110      	cbz	r0, 80193c2 <mg_fs_lfs_status+0x1a>
    return 0;
 80193bc:	2000      	movs	r0, #0
}
 80193be:	b043      	add	sp, #268	@ 0x10c
 80193c0:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 80193c2:	b10d      	cbz	r5, 80193c8 <mg_fs_lfs_status+0x20>
 80193c4:	9b01      	ldr	r3, [sp, #4]
 80193c6:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 80193c8:	b11c      	cbz	r4, 80193d2 <mg_fs_lfs_status+0x2a>
 80193ca:	2200      	movs	r2, #0
 80193cc:	2300      	movs	r3, #0
 80193ce:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 80193d2:	f89d 3000 	ldrb.w	r3, [sp]
 80193d6:	2b02      	cmp	r3, #2
 80193d8:	d001      	beq.n	80193de <mg_fs_lfs_status+0x36>
 80193da:	2001      	movs	r0, #1
 80193dc:	e7ef      	b.n	80193be <mg_fs_lfs_status+0x16>
 80193de:	2004      	movs	r0, #4
 80193e0:	e7ed      	b.n	80193be <mg_fs_lfs_status+0x16>
 80193e2:	bf00      	nop
 80193e4:	20017f94 	.word	0x20017f94

080193e8 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 80193e8:	b530      	push	{r4, r5, lr}
 80193ea:	b0d1      	sub	sp, #324	@ 0x144
 80193ec:	460d      	mov	r5, r1
 80193ee:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 80193f0:	4602      	mov	r2, r0
 80193f2:	a901      	add	r1, sp, #4
 80193f4:	480a      	ldr	r0, [pc, #40]	@ (8019420 <mg_fs_lfs_list+0x38>)
 80193f6:	f004 fe8b 	bl	801e110 <lfs_dir_open>
 80193fa:	b120      	cbz	r0, 8019406 <mg_fs_lfs_list+0x1e>
}
 80193fc:	b051      	add	sp, #324	@ 0x144
 80193fe:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 8019400:	4621      	mov	r1, r4
 8019402:	a810      	add	r0, sp, #64	@ 0x40
 8019404:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 8019406:	aa0e      	add	r2, sp, #56	@ 0x38
 8019408:	a901      	add	r1, sp, #4
 801940a:	4805      	ldr	r0, [pc, #20]	@ (8019420 <mg_fs_lfs_list+0x38>)
 801940c:	f004 febb 	bl	801e186 <lfs_dir_read>
 8019410:	2800      	cmp	r0, #0
 8019412:	dcf5      	bgt.n	8019400 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 8019414:	a901      	add	r1, sp, #4
 8019416:	4802      	ldr	r0, [pc, #8]	@ (8019420 <mg_fs_lfs_list+0x38>)
 8019418:	f004 fea2 	bl	801e160 <lfs_dir_close>
}
 801941c:	e7ee      	b.n	80193fc <mg_fs_lfs_list+0x14>
 801941e:	bf00      	nop
 8019420:	20017f94 	.word	0x20017f94

08019424 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 8019424:	b570      	push	{r4, r5, r6, lr}
 8019426:	4605      	mov	r5, r0
 8019428:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801942a:	2054      	movs	r0, #84	@ 0x54
 801942c:	f7ff fe54 	bl	80190d8 <pvPortMalloc>
    if (fd == NULL) return NULL;
 8019430:	4606      	mov	r6, r0
 8019432:	b188      	cbz	r0, 8019458 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 8019434:	f014 0301 	ands.w	r3, r4, #1
 8019438:	d000      	beq.n	801943c <mg_fs_lfs_open+0x18>
 801943a:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801943c:	f014 0f02 	tst.w	r4, #2
 8019440:	d003      	beq.n	801944a <mg_fs_lfs_open+0x26>
 8019442:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 8019446:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801944a:	462a      	mov	r2, r5
 801944c:	4631      	mov	r1, r6
 801944e:	4806      	ldr	r0, [pc, #24]	@ (8019468 <mg_fs_lfs_open+0x44>)
 8019450:	f004 fd4e 	bl	801def0 <lfs_file_open>
 8019454:	2800      	cmp	r0, #0
 8019456:	db01      	blt.n	801945c <mg_fs_lfs_open+0x38>
}
 8019458:	4630      	mov	r0, r6
 801945a:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 801945c:	4630      	mov	r0, r6
 801945e:	f7ff febd 	bl	80191dc <vPortFree>
        return NULL;
 8019462:	2600      	movs	r6, #0
 8019464:	e7f8      	b.n	8019458 <mg_fs_lfs_open+0x34>
 8019466:	bf00      	nop
 8019468:	20017f94 	.word	0x20017f94

0801946c <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 801946c:	b510      	push	{r4, lr}
 801946e:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 8019470:	4601      	mov	r1, r0
 8019472:	4803      	ldr	r0, [pc, #12]	@ (8019480 <mg_fs_lfs_close+0x14>)
 8019474:	f004 fd68 	bl	801df48 <lfs_file_close>
    free(file);
 8019478:	4620      	mov	r0, r4
 801947a:	f7ff feaf 	bl	80191dc <vPortFree>
}
 801947e:	bd10      	pop	{r4, pc}
 8019480:	20017f94 	.word	0x20017f94

08019484 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 8019484:	b508      	push	{r3, lr}
 8019486:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 8019488:	460a      	mov	r2, r1
 801948a:	4601      	mov	r1, r0
 801948c:	4802      	ldr	r0, [pc, #8]	@ (8019498 <mg_fs_lfs_read+0x14>)
 801948e:	f004 fd81 	bl	801df94 <lfs_file_read>
}
 8019492:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8019496:	bd08      	pop	{r3, pc}
 8019498:	20017f94 	.word	0x20017f94

0801949c <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801949c:	b508      	push	{r3, lr}
 801949e:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 80194a0:	460a      	mov	r2, r1
 80194a2:	4601      	mov	r1, r0
 80194a4:	4802      	ldr	r0, [pc, #8]	@ (80194b0 <mg_fs_lfs_write+0x14>)
 80194a6:	f004 fda1 	bl	801dfec <lfs_file_write>
}
 80194aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80194ae:	bd08      	pop	{r3, pc}
 80194b0:	20017f94 	.word	0x20017f94

080194b4 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 80194b4:	b510      	push	{r4, lr}
 80194b6:	4604      	mov	r4, r0
 80194b8:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 80194ba:	2300      	movs	r3, #0
 80194bc:	4601      	mov	r1, r0
 80194be:	4809      	ldr	r0, [pc, #36]	@ (80194e4 <mg_fs_lfs_seek+0x30>)
 80194c0:	f004 fdc0 	bl	801e044 <lfs_file_seek>
 80194c4:	2800      	cmp	r0, #0
 80194c6:	db06      	blt.n	80194d6 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 80194c8:	4621      	mov	r1, r4
 80194ca:	4806      	ldr	r0, [pc, #24]	@ (80194e4 <mg_fs_lfs_seek+0x30>)
 80194cc:	f004 fde6 	bl	801e09c <lfs_file_tell>
     if (pos < 0) {
 80194d0:	2800      	cmp	r0, #0
 80194d2:	db03      	blt.n	80194dc <mg_fs_lfs_seek+0x28>
}
 80194d4:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 80194d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80194da:	e7fb      	b.n	80194d4 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 80194dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80194e0:	e7f8      	b.n	80194d4 <mg_fs_lfs_seek+0x20>
 80194e2:	bf00      	nop
 80194e4:	20017f94 	.word	0x20017f94

080194e8 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 80194e8:	b508      	push	{r3, lr}
 80194ea:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 80194ec:	4601      	mov	r1, r0
 80194ee:	4803      	ldr	r0, [pc, #12]	@ (80194fc <mg_fs_lfs_rename+0x14>)
 80194f0:	f004 fcd3 	bl	801de9a <lfs_rename>
}
 80194f4:	fab0 f080 	clz	r0, r0
 80194f8:	0940      	lsrs	r0, r0, #5
 80194fa:	bd08      	pop	{r3, pc}
 80194fc:	20017f94 	.word	0x20017f94

08019500 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 8019500:	b508      	push	{r3, lr}
 8019502:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 8019504:	4803      	ldr	r0, [pc, #12]	@ (8019514 <mg_fs_lfs_remove+0x14>)
 8019506:	f004 fcb5 	bl	801de74 <lfs_remove>
}
 801950a:	fab0 f080 	clz	r0, r0
 801950e:	0940      	lsrs	r0, r0, #5
 8019510:	bd08      	pop	{r3, pc}
 8019512:	bf00      	nop
 8019514:	20017f94 	.word	0x20017f94

08019518 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 8019518:	b508      	push	{r3, lr}
 801951a:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 801951c:	4803      	ldr	r0, [pc, #12]	@ (801952c <mg_fs_lfs_mkdir+0x14>)
 801951e:	f004 fde3 	bl	801e0e8 <lfs_mkdir>
}
 8019522:	fab0 f080 	clz	r0, r0
 8019526:	0940      	lsrs	r0, r0, #5
 8019528:	bd08      	pop	{r3, pc}
 801952a:	bf00      	nop
 801952c:	20017f94 	.word	0x20017f94

08019530 <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 8019530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019534:	b090      	sub	sp, #64	@ 0x40
 8019536:	4680      	mov	r8, r0
 8019538:	460f      	mov	r7, r1
	flash_info = sFLASH_GetInfo();
 801953a:	4668      	mov	r0, sp
 801953c:	f7fb f8cc 	bl	80146d8 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 8019540:	9b00      	ldr	r3, [sp, #0]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d04b      	beq.n	80195de <lfs_fs_ll_init+0xae>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 8019546:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 801954a:	4621      	mov	r1, r4
 801954c:	2001      	movs	r0, #1
 801954e:	f7ff fec5 	bl	80192dc <mg_calloc>
 8019552:	4605      	mov	r5, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 8019554:	4621      	mov	r1, r4
 8019556:	2001      	movs	r0, #1
 8019558:	f7ff fec0 	bl	80192dc <mg_calloc>
 801955c:	4606      	mov	r6, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801955e:	4621      	mov	r1, r4
 8019560:	2001      	movs	r0, #1
 8019562:	f7ff febb 	bl	80192dc <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 8019566:	b345      	cbz	r5, 80195ba <lfs_fs_ll_init+0x8a>
	cfg.read_size         = flash_info.read_size;
 8019568:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801956c:	491d      	ldr	r1, [pc, #116]	@ (80195e4 <lfs_fs_ll_init+0xb4>)
 801956e:	61cb      	str	r3, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 8019570:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019574:	620b      	str	r3, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 8019576:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801957a:	624b      	str	r3, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801957c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019580:	628b      	str	r3, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 8019582:	634c      	str	r4, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 8019584:	630c      	str	r4, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 8019586:	63cd      	str	r5, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 8019588:	640e      	str	r6, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801958a:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 801958c:	4b16      	ldr	r3, [pc, #88]	@ (80195e8 <lfs_fs_ll_init+0xb8>)
 801958e:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 8019590:	4b16      	ldr	r3, [pc, #88]	@ (80195ec <lfs_fs_ll_init+0xbc>)
 8019592:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 8019594:	4b16      	ldr	r3, [pc, #88]	@ (80195f0 <lfs_fs_ll_init+0xc0>)
 8019596:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 8019598:	4b16      	ldr	r3, [pc, #88]	@ (80195f4 <lfs_fs_ll_init+0xc4>)
 801959a:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 801959c:	f8c1 8014 	str.w	r8, [r1, #20]
	cfg.unlock	= unlock;
 80195a0:	618f      	str	r7, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 80195a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80195a6:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 80195a8:	4813      	ldr	r0, [pc, #76]	@ (80195f8 <lfs_fs_ll_init+0xc8>)
 80195aa:	f004 fc50 	bl	801de4e <lfs_mount>
 80195ae:	2800      	cmp	r0, #0
 80195b0:	db0a      	blt.n	80195c8 <lfs_fs_ll_init+0x98>
	return 0;
 80195b2:	2000      	movs	r0, #0
}
 80195b4:	b010      	add	sp, #64	@ 0x40
 80195b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 80195ba:	2e00      	cmp	r6, #0
 80195bc:	d1d4      	bne.n	8019568 <lfs_fs_ll_init+0x38>
 80195be:	2800      	cmp	r0, #0
 80195c0:	d1d2      	bne.n	8019568 <lfs_fs_ll_init+0x38>
		return -2;
 80195c2:	f06f 0001 	mvn.w	r0, #1
 80195c6:	e7f5      	b.n	80195b4 <lfs_fs_ll_init+0x84>
    	lfs_format(&lfs, &cfg);
 80195c8:	4d06      	ldr	r5, [pc, #24]	@ (80195e4 <lfs_fs_ll_init+0xb4>)
 80195ca:	4c0b      	ldr	r4, [pc, #44]	@ (80195f8 <lfs_fs_ll_init+0xc8>)
 80195cc:	4629      	mov	r1, r5
 80195ce:	4620      	mov	r0, r4
 80195d0:	f004 fc2a 	bl	801de28 <lfs_format>
    	return lfs_mount(&lfs, &cfg);
 80195d4:	4629      	mov	r1, r5
 80195d6:	4620      	mov	r0, r4
 80195d8:	f004 fc39 	bl	801de4e <lfs_mount>
 80195dc:	e7ea      	b.n	80195b4 <lfs_fs_ll_init+0x84>
	if (flash_info.flash_id == 0x0) return -1;
 80195de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80195e2:	e7e7      	b.n	80195b4 <lfs_fs_ll_init+0x84>
 80195e4:	20017f38 	.word	0x20017f38
 80195e8:	080192f9 	.word	0x080192f9
 80195ec:	08019369 	.word	0x08019369
 80195f0:	08019339 	.word	0x08019339
 80195f4:	080192d9 	.word	0x080192d9
 80195f8:	20017f94 	.word	0x20017f94

080195fc <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80195fc:	6803      	ldr	r3, [r0, #0]
 80195fe:	680a      	ldr	r2, [r1, #0]
 8019600:	4293      	cmp	r3, r2
 8019602:	d004      	beq.n	801960e <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8019604:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8019606:	428b      	cmp	r3, r1
 8019608:	d015      	beq.n	8019636 <lfs_pair_issync+0x3a>
 801960a:	2000      	movs	r0, #0
 801960c:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 801960e:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8019610:	6844      	ldr	r4, [r0, #4]
 8019612:	684d      	ldr	r5, [r1, #4]
 8019614:	42ac      	cmp	r4, r5
 8019616:	d00a      	beq.n	801962e <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8019618:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801961a:	428b      	cmp	r3, r1
 801961c:	d002      	beq.n	8019624 <lfs_pair_issync+0x28>
 801961e:	2000      	movs	r0, #0
}
 8019620:	bc30      	pop	{r4, r5}
 8019622:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8019624:	6843      	ldr	r3, [r0, #4]
 8019626:	429a      	cmp	r2, r3
 8019628:	d003      	beq.n	8019632 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801962a:	2000      	movs	r0, #0
 801962c:	e7f8      	b.n	8019620 <lfs_pair_issync+0x24>
 801962e:	2001      	movs	r0, #1
 8019630:	e7f6      	b.n	8019620 <lfs_pair_issync+0x24>
 8019632:	2001      	movs	r0, #1
 8019634:	e7f4      	b.n	8019620 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8019636:	6843      	ldr	r3, [r0, #4]
 8019638:	429a      	cmp	r2, r3
 801963a:	d001      	beq.n	8019640 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801963c:	2000      	movs	r0, #0
 801963e:	4770      	bx	lr
 8019640:	2001      	movs	r0, #1
}
 8019642:	4770      	bx	lr

08019644 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 8019644:	2300      	movs	r3, #0
 8019646:	2b02      	cmp	r3, #2
 8019648:	dc0d      	bgt.n	8019666 <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801964a:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801964c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8019650:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8019654:	4062      	eors	r2, r4
 8019656:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 801965a:	3301      	adds	r3, #1
 801965c:	2b02      	cmp	r3, #2
 801965e:	ddf5      	ble.n	801964c <lfs_gstate_xor+0x8>
    }
}
 8019660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019664:	4770      	bx	lr
 8019666:	4770      	bx	lr

08019668 <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8019668:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801966a:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801966c:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 8019670:	d00f      	beq.n	8019692 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8019672:	6843      	ldr	r3, [r0, #4]
 8019674:	680a      	ldr	r2, [r1, #0]
 8019676:	4293      	cmp	r3, r2
 8019678:	d00d      	beq.n	8019696 <lfs_gstate_hasmovehere+0x2e>
 801967a:	6880      	ldr	r0, [r0, #8]
 801967c:	6849      	ldr	r1, [r1, #4]
 801967e:	4288      	cmp	r0, r1
 8019680:	d00b      	beq.n	801969a <lfs_gstate_hasmovehere+0x32>
 8019682:	428b      	cmp	r3, r1
 8019684:	d00b      	beq.n	801969e <lfs_gstate_hasmovehere+0x36>
 8019686:	4282      	cmp	r2, r0
 8019688:	d001      	beq.n	801968e <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801968a:	2000      	movs	r0, #0
}
 801968c:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801968e:	2001      	movs	r0, #1
 8019690:	4770      	bx	lr
 8019692:	2000      	movs	r0, #0
 8019694:	4770      	bx	lr
 8019696:	2001      	movs	r0, #1
 8019698:	4770      	bx	lr
 801969a:	2001      	movs	r0, #1
 801969c:	4770      	bx	lr
 801969e:	2001      	movs	r0, #1
 80196a0:	4770      	bx	lr

080196a2 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80196a2:	b082      	sub	sp, #8
 80196a4:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80196a6:	ab01      	add	r3, sp, #4
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	b11b      	cbz	r3, 80196b4 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 80196ac:	428b      	cmp	r3, r1
 80196ae:	d1fb      	bne.n	80196a8 <lfs_mlist_isopen+0x6>
            return true;
 80196b0:	2001      	movs	r0, #1
 80196b2:	e000      	b.n	80196b6 <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 80196b4:	2000      	movs	r0, #0
}
 80196b6:	b002      	add	sp, #8
 80196b8:	4770      	bx	lr

080196ba <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80196ba:	3028      	adds	r0, #40	@ 0x28
 80196bc:	e000      	b.n	80196c0 <lfs_mlist_remove+0x6>
 80196be:	4618      	mov	r0, r3
 80196c0:	6803      	ldr	r3, [r0, #0]
 80196c2:	b123      	cbz	r3, 80196ce <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 80196c4:	428b      	cmp	r3, r1
 80196c6:	d1fa      	bne.n	80196be <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	6003      	str	r3, [r0, #0]
            break;
 80196cc:	4770      	bx	lr
        }
    }
}
 80196ce:	4770      	bx	lr

080196d0 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 80196d0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80196d2:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 80196d4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80196d6:	4770      	bx	lr

080196d8 <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 80196d8:	4800      	ldr	r0, [pc, #0]	@ (80196dc <lfs_fs_disk_version+0x4>)
 80196da:	4770      	bx	lr
 80196dc:	00020001 	.word	0x00020001

080196e0 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 80196e0:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 80196e2:	f7ff fff9 	bl	80196d8 <lfs_fs_disk_version>

}
 80196e6:	0c00      	lsrs	r0, r0, #16
 80196e8:	bd08      	pop	{r3, pc}

080196ea <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 80196ea:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 80196ec:	f7ff fff4 	bl	80196d8 <lfs_fs_disk_version>
}
 80196f0:	b280      	uxth	r0, r0
 80196f2:	bd08      	pop	{r3, pc}

080196f4 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 80196f4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80196f6:	6603      	str	r3, [r0, #96]	@ 0x60
}
 80196f8:	4770      	bx	lr

080196fa <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80196fa:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 80196fc:	2200      	movs	r2, #0
 80196fe:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 8019700:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 8019702:	f7ff fff7 	bl	80196f4 <lfs_alloc_ckpoint>
}
 8019706:	bd08      	pop	{r3, pc}

08019708 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 8019708:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801970a:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 801970c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801970e:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 8019710:	fbb1 f2f3 	udiv	r2, r1, r3
 8019714:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 8019718:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801971a:	428b      	cmp	r3, r1
 801971c:	d90d      	bls.n	801973a <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801971e:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 8019720:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 8019722:	08c8      	lsrs	r0, r1, #3
 8019724:	5c23      	ldrb	r3, [r4, r0]
 8019726:	f001 0107 	and.w	r1, r1, #7
 801972a:	2201      	movs	r2, #1
 801972c:	408a      	lsls	r2, r1
 801972e:	4313      	orrs	r3, r2
 8019730:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 8019732:	2000      	movs	r0, #0
 8019734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019738:	4770      	bx	lr
 801973a:	2000      	movs	r0, #0
 801973c:	4770      	bx	lr
	...

08019740 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8019740:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8019742:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8019746:	d01c      	beq.n	8019782 <lfs_dir_traverse_filter+0x42>
 8019748:	4a19      	ldr	r2, [pc, #100]	@ (80197b0 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801974a:	6803      	ldr	r3, [r0, #0]
 801974c:	ea83 0401 	eor.w	r4, r3, r1
 8019750:	4214      	tst	r4, r2
 8019752:	d018      	beq.n	8019786 <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8019754:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 8019758:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801975c:	d013      	beq.n	8019786 <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801975e:	4c14      	ldr	r4, [pc, #80]	@ (80197b0 <lfs_dir_traverse_filter+0x70>)
 8019760:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8019762:	4a14      	ldr	r2, [pc, #80]	@ (80197b4 <lfs_dir_traverse_filter+0x74>)
 8019764:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8019766:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801976a:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801976e:	4294      	cmp	r4, r2
 8019770:	d009      	beq.n	8019786 <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 8019772:	0d0a      	lsrs	r2, r1, #20
 8019774:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8019778:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801977c:	d009      	beq.n	8019792 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801977e:	2000      	movs	r0, #0
 8019780:	e004      	b.n	801978c <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8019782:	4a0d      	ldr	r2, [pc, #52]	@ (80197b8 <lfs_dir_traverse_filter+0x78>)
 8019784:	e7e1      	b.n	801974a <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8019786:	2300      	movs	r3, #0
 8019788:	6003      	str	r3, [r0, #0]
        return true;
 801978a:	2001      	movs	r0, #1
}
 801978c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019790:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 8019792:	f3c1 2189 	ubfx	r1, r1, #10, #10
 8019796:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801979a:	428c      	cmp	r4, r1
 801979c:	d305      	bcc.n	80197aa <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801979e:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80197a0:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 80197a4:	6003      	str	r3, [r0, #0]
    return false;
 80197a6:	2000      	movs	r0, #0
 80197a8:	e7f0      	b.n	801978c <lfs_dir_traverse_filter+0x4c>
 80197aa:	2000      	movs	r0, #0
 80197ac:	e7ee      	b.n	801978c <lfs_dir_traverse_filter+0x4c>
 80197ae:	bf00      	nop
 80197b0:	7ffffc00 	.word	0x7ffffc00
 80197b4:	000ffc00 	.word	0x000ffc00
 80197b8:	700ffc00 	.word	0x700ffc00

080197bc <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 80197bc:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80197c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80197c4:	bf08      	it	eq
 80197c6:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 80197c8:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80197cc:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80197ce:	6803      	ldr	r3, [r0, #0]
 80197d0:	440b      	add	r3, r1
 80197d2:	6003      	str	r3, [r0, #0]
    return 0;
}
 80197d4:	2000      	movs	r0, #0
 80197d6:	4770      	bx	lr

080197d8 <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80197d8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80197da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80197dc:	2b00      	cmp	r3, #0
 80197de:	dd0b      	ble.n	80197f8 <lfs_dir_needsrelocation+0x20>
 80197e0:	688a      	ldr	r2, [r1, #8]
 80197e2:	3201      	adds	r2, #1
 80197e4:	3301      	adds	r3, #1
 80197e6:	f043 0301 	orr.w	r3, r3, #1
 80197ea:	fbb2 f1f3 	udiv	r1, r2, r3
 80197ee:	fb03 2211 	mls	r2, r3, r1, r2
 80197f2:	b11a      	cbz	r2, 80197fc <lfs_dir_needsrelocation+0x24>
 80197f4:	2000      	movs	r0, #0
 80197f6:	4770      	bx	lr
 80197f8:	2000      	movs	r0, #0
 80197fa:	4770      	bx	lr
 80197fc:	2001      	movs	r0, #1
}
 80197fe:	4770      	bx	lr

08019800 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 8019800:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8019802:	f7ff ff5a 	bl	80196ba <lfs_mlist_remove>

    return 0;
}
 8019806:	2000      	movs	r0, #0
 8019808:	bd08      	pop	{r3, pc}

0801980a <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 801980a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801980c:	4770      	bx	lr

0801980e <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801980e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8019810:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8019814:	d101      	bne.n	801981a <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 8019816:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 8019818:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 801981a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801981c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801981e:	4298      	cmp	r0, r3
 8019820:	bf38      	it	cc
 8019822:	4618      	movcc	r0, r3
 8019824:	4770      	bx	lr

08019826 <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8019826:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019828:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 801982c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8019830:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8019832:	4770      	bx	lr

08019834 <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8019834:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8019836:	4b13      	ldr	r3, [pc, #76]	@ (8019884 <lfs_fs_prepmove+0x50>)
 8019838:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801983a:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801983c:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 8019840:	4561      	cmp	r1, ip
 8019842:	d017      	beq.n	8019874 <lfs_fs_prepmove+0x40>
 8019844:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 8019848:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 801984c:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8019850:	ea43 030c 	orr.w	r3, r3, ip
 8019854:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8019856:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801985a:	4299      	cmp	r1, r3
 801985c:	d00d      	beq.n	801987a <lfs_fs_prepmove+0x46>
 801985e:	6813      	ldr	r3, [r2, #0]
 8019860:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8019862:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8019866:	4299      	cmp	r1, r3
 8019868:	d009      	beq.n	801987e <lfs_fs_prepmove+0x4a>
 801986a:	6853      	ldr	r3, [r2, #4]
 801986c:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801986e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019872:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8019874:	f04f 0c00 	mov.w	ip, #0
 8019878:	e7ea      	b.n	8019850 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801987a:	2300      	movs	r3, #0
 801987c:	e7f0      	b.n	8019860 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801987e:	2300      	movs	r3, #0
 8019880:	e7f4      	b.n	801986c <lfs_fs_prepmove+0x38>
 8019882:	bf00      	nop
 8019884:	800003ff 	.word	0x800003ff

08019888 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 8019888:	6803      	ldr	r3, [r0, #0]
 801988a:	3301      	adds	r3, #1
 801988c:	6003      	str	r3, [r0, #0]
    return 0;
}
 801988e:	2000      	movs	r0, #0
 8019890:	4770      	bx	lr
	...

08019894 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8019894:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 8019896:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8019898:	428b      	cmp	r3, r1
 801989a:	d905      	bls.n	80198a8 <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801989c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801989e:	68c3      	ldr	r3, [r0, #12]
 80198a0:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 80198a2:	2800      	cmp	r0, #0
 80198a4:	dc07      	bgt.n	80198b6 <lfs_bd_erase+0x22>
}
 80198a6:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 80198a8:	4b06      	ldr	r3, [pc, #24]	@ (80198c4 <lfs_bd_erase+0x30>)
 80198aa:	4a07      	ldr	r2, [pc, #28]	@ (80198c8 <lfs_bd_erase+0x34>)
 80198ac:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80198b0:	4806      	ldr	r0, [pc, #24]	@ (80198cc <lfs_bd_erase+0x38>)
 80198b2:	f00d fbc3 	bl	802703c <__assert_func>
    LFS_ASSERT(err <= 0);
 80198b6:	4b06      	ldr	r3, [pc, #24]	@ (80198d0 <lfs_bd_erase+0x3c>)
 80198b8:	4a03      	ldr	r2, [pc, #12]	@ (80198c8 <lfs_bd_erase+0x34>)
 80198ba:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80198be:	4803      	ldr	r0, [pc, #12]	@ (80198cc <lfs_bd_erase+0x38>)
 80198c0:	f00d fbbc 	bl	802703c <__assert_func>
 80198c4:	0803574c 	.word	0x0803574c
 80198c8:	080363ac 	.word	0x080363ac
 80198cc:	08035660 	.word	0x08035660
 80198d0:	08035690 	.word	0x08035690

080198d4 <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 80198d4:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 80198d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 80198d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 80198dc:	b90a      	cbnz	r2, 80198e2 <lfs_fs_preporphans+0xe>
 80198de:	2900      	cmp	r1, #0
 80198e0:	db12      	blt.n	8019908 <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 80198e2:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 80198e6:	d901      	bls.n	80198ec <lfs_fs_preporphans+0x18>
 80198e8:	2900      	cmp	r1, #0
 80198ea:	dc14      	bgt.n	8019916 <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 80198ec:	4419      	add	r1, r3
 80198ee:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80198f0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 80198f4:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 80198f8:	3900      	subs	r1, #0
 80198fa:	bf18      	it	ne
 80198fc:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80198fe:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 8019902:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8019904:	2000      	movs	r0, #0
 8019906:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8019908:	4b06      	ldr	r3, [pc, #24]	@ (8019924 <lfs_fs_preporphans+0x50>)
 801990a:	4a07      	ldr	r2, [pc, #28]	@ (8019928 <lfs_fs_preporphans+0x54>)
 801990c:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 8019910:	4806      	ldr	r0, [pc, #24]	@ (801992c <lfs_fs_preporphans+0x58>)
 8019912:	f00d fb93 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8019916:	4b06      	ldr	r3, [pc, #24]	@ (8019930 <lfs_fs_preporphans+0x5c>)
 8019918:	4a03      	ldr	r2, [pc, #12]	@ (8019928 <lfs_fs_preporphans+0x54>)
 801991a:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801991e:	4803      	ldr	r0, [pc, #12]	@ (801992c <lfs_fs_preporphans+0x58>)
 8019920:	f00d fb8c 	bl	802703c <__assert_func>
 8019924:	0803569c 	.word	0x0803569c
 8019928:	0803637c 	.word	0x0803637c
 801992c:	08035660 	.word	0x08035660
 8019930:	080356d4 	.word	0x080356d4

08019934 <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8019934:	b510      	push	{r4, lr}
 8019936:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8019938:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801993a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801993c:	21ff      	movs	r1, #255	@ 0xff
 801993e:	68e0      	ldr	r0, [r4, #12]
 8019940:	f010 f8ce 	bl	8029ae0 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8019944:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019948:	6023      	str	r3, [r4, #0]
}
 801994a:	bd10      	pop	{r4, pc}

0801994c <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 801994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 801994e:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8019950:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8019952:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 8019954:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 8019956:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 801995a:	42bd      	cmp	r5, r7
 801995c:	d312      	bcc.n	8019984 <lfs_ctz_index+0x38>
 801995e:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8019960:	3801      	subs	r0, #1
 8019962:	f7f7 fa11 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8019966:	1c84      	adds	r4, r0, #2
 8019968:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801996c:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 8019970:	fb04 5517 	mls	r5, r4, r7, r5
 8019974:	4620      	mov	r0, r4
 8019976:	f7f7 fa07 	bl	8010d88 <__popcountsi2>
 801997a:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801997e:	6035      	str	r5, [r6, #0]
    return i;
 8019980:	4620      	mov	r0, r4
}
 8019982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8019984:	2000      	movs	r0, #0
 8019986:	e7fc      	b.n	8019982 <lfs_ctz_index+0x36>

08019988 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 8019988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801998c:	b087      	sub	sp, #28
 801998e:	4615      	mov	r5, r2
 8019990:	469b      	mov	fp, r3
 8019992:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8019994:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8019996:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801999a:	eb04 020a 	add.w	r2, r4, sl
 801999e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80199a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199a2:	429a      	cmp	r2, r3
 80199a4:	f200 80d0 	bhi.w	8019b48 <lfs_bd_read+0x1c0>
 80199a8:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 80199aa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	f000 80c7 	beq.w	8019b40 <lfs_bd_read+0x1b8>
 80199b2:	42bb      	cmp	r3, r7
 80199b4:	f240 80cb 	bls.w	8019b4e <lfs_bd_read+0x1c6>
 80199b8:	9003      	str	r0, [sp, #12]
 80199ba:	e084      	b.n	8019ac6 <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 80199bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80199c0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80199c4:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 80199c6:	42a1      	cmp	r1, r4
 80199c8:	d91e      	bls.n	8019a08 <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 80199ca:	42a3      	cmp	r3, r4
 80199cc:	d905      	bls.n	80199da <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 80199ce:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 80199d0:	4553      	cmp	r3, sl
 80199d2:	bf28      	it	cs
 80199d4:	4653      	movcs	r3, sl
 80199d6:	4698      	mov	r8, r3
 80199d8:	e081      	b.n	8019ade <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80199da:	1b19      	subs	r1, r3, r4
 80199dc:	eb02 0801 	add.w	r8, r2, r1
 80199e0:	45d0      	cmp	r8, sl
 80199e2:	bf28      	it	cs
 80199e4:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80199e6:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80199ea:	1ae3      	subs	r3, r4, r3
 80199ec:	4642      	mov	r2, r8
 80199ee:	4419      	add	r1, r3
 80199f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80199f2:	f011 fab1 	bl	802af58 <memcpy>
                data += diff;
 80199f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80199f8:	4443      	add	r3, r8
 80199fa:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 80199fc:	4444      	add	r4, r8
                size -= diff;
 80199fe:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 8019a02:	e060      	b.n	8019ac6 <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 8019a04:	46d0      	mov	r8, sl
 8019a06:	e06a      	b.n	8019ade <lfs_bd_read+0x156>
 8019a08:	46d0      	mov	r8, sl
 8019a0a:	e068      	b.n	8019ade <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 8019a0c:	686b      	ldr	r3, [r5, #4]
 8019a0e:	68aa      	ldr	r2, [r5, #8]
 8019a10:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 8019a12:	42a1      	cmp	r1, r4
 8019a14:	d966      	bls.n	8019ae4 <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 8019a16:	42a3      	cmp	r3, r4
 8019a18:	d904      	bls.n	8019a24 <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 8019a1a:	1b1b      	subs	r3, r3, r4
 8019a1c:	4598      	cmp	r8, r3
 8019a1e:	bf28      	it	cs
 8019a20:	4698      	movcs	r8, r3
 8019a22:	e05f      	b.n	8019ae4 <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8019a24:	1b19      	subs	r1, r3, r4
 8019a26:	440a      	add	r2, r1
 8019a28:	4590      	cmp	r8, r2
 8019a2a:	bf28      	it	cs
 8019a2c:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8019a2e:	68e9      	ldr	r1, [r5, #12]
 8019a30:	1ae3      	subs	r3, r4, r3
 8019a32:	4642      	mov	r2, r8
 8019a34:	4419      	add	r1, r3
 8019a36:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8019a38:	f011 fa8e 	bl	802af58 <memcpy>
                data += diff;
 8019a3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019a3e:	4443      	add	r3, r8
 8019a40:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 8019a42:	4444      	add	r4, r8
                size -= diff;
 8019a44:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 8019a48:	e03d      	b.n	8019ac6 <lfs_bd_read+0x13e>
            data += diff;
 8019a4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019a4c:	9b04      	ldr	r3, [sp, #16]
 8019a4e:	441a      	add	r2, r3
 8019a50:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 8019a52:	441c      	add	r4, r3
            size -= diff;
 8019a54:	9b05      	ldr	r3, [sp, #20]
 8019a56:	eba3 0308 	sub.w	r3, r3, r8
 8019a5a:	449a      	add	sl, r3
            continue;
 8019a5c:	e033      	b.n	8019ac6 <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8019a5e:	9b03      	ldr	r3, [sp, #12]
 8019a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a62:	b10b      	cbz	r3, 8019a68 <lfs_bd_read+0xe0>
 8019a64:	42bb      	cmp	r3, r7
 8019a66:	d95f      	bls.n	8019b28 <lfs_bd_read+0x1a0>
        rcache->block = block;
 8019a68:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8019a6a:	9e03      	ldr	r6, [sp, #12]
 8019a6c:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 8019a6e:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 8019a70:	fbb4 f3f2 	udiv	r3, r4, r2
 8019a74:	fb02 4313 	mls	r3, r2, r3, r4
 8019a78:	1ae2      	subs	r2, r4, r3
 8019a7a:	606a      	str	r2, [r5, #4]
                lfs_min(
 8019a7c:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8019a80:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 8019a84:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 8019a88:	4401      	add	r1, r0
 8019a8a:	3901      	subs	r1, #1
    return a - (a % alignment);
 8019a8c:	fbb1 fef0 	udiv	lr, r1, r0
 8019a90:	fb00 101e 	mls	r0, r0, lr, r1
 8019a94:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 8019a96:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 8019a9a:	1b1b      	subs	r3, r3, r4
 8019a9c:	4288      	cmp	r0, r1
 8019a9e:	bf94      	ite	ls
 8019aa0:	181b      	addls	r3, r3, r0
 8019aa2:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 8019aa4:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 8019aa8:	428b      	cmp	r3, r1
 8019aaa:	bf28      	it	cs
 8019aac:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 8019aae:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8019ab0:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 8019ab2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8019ab6:	9300      	str	r3, [sp, #0]
 8019ab8:	68eb      	ldr	r3, [r5, #12]
 8019aba:	4639      	mov	r1, r7
 8019abc:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 8019abe:	1e03      	subs	r3, r0, #0
 8019ac0:	dc38      	bgt.n	8019b34 <lfs_bd_read+0x1ac>
        if (err) {
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d146      	bne.n	8019b54 <lfs_bd_read+0x1cc>
    while (size > 0) {
 8019ac6:	f1ba 0f00 	cmp.w	sl, #0
 8019aca:	d03b      	beq.n	8019b44 <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 8019acc:	f1b9 0f00 	cmp.w	r9, #0
 8019ad0:	d098      	beq.n	8019a04 <lfs_bd_read+0x7c>
 8019ad2:	f8d9 3000 	ldr.w	r3, [r9]
 8019ad6:	42bb      	cmp	r3, r7
 8019ad8:	f43f af70 	beq.w	80199bc <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 8019adc:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 8019ade:	682b      	ldr	r3, [r5, #0]
 8019ae0:	42bb      	cmp	r3, r7
 8019ae2:	d093      	beq.n	8019a0c <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8019ae4:	45da      	cmp	sl, fp
 8019ae6:	d3ba      	bcc.n	8019a5e <lfs_bd_read+0xd6>
 8019ae8:	9b03      	ldr	r3, [sp, #12]
 8019aea:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8019aec:	69c2      	ldr	r2, [r0, #28]
 8019aee:	fbb4 f3f2 	udiv	r3, r4, r2
 8019af2:	fb02 4313 	mls	r3, r2, r3, r4
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d1b1      	bne.n	8019a5e <lfs_bd_read+0xd6>
 8019afa:	4552      	cmp	r2, sl
 8019afc:	d8af      	bhi.n	8019a5e <lfs_bd_read+0xd6>
    return a - (a % alignment);
 8019afe:	fbb8 f3f2 	udiv	r3, r8, r2
 8019b02:	fb02 8313 	mls	r3, r2, r3, r8
 8019b06:	9305      	str	r3, [sp, #20]
 8019b08:	eba8 0203 	sub.w	r2, r8, r3
 8019b0c:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8019b0e:	6842      	ldr	r2, [r0, #4]
 8019b10:	4616      	mov	r6, r2
 8019b12:	9304      	str	r3, [sp, #16]
 8019b14:	9300      	str	r3, [sp, #0]
 8019b16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019b18:	4622      	mov	r2, r4
 8019b1a:	4639      	mov	r1, r7
 8019b1c:	47b0      	blx	r6
            if (err) {
 8019b1e:	2800      	cmp	r0, #0
 8019b20:	d093      	beq.n	8019a4a <lfs_bd_read+0xc2>
}
 8019b22:	b007      	add	sp, #28
 8019b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8019b28:	4b0b      	ldr	r3, [pc, #44]	@ (8019b58 <lfs_bd_read+0x1d0>)
 8019b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8019b5c <lfs_bd_read+0x1d4>)
 8019b2c:	216b      	movs	r1, #107	@ 0x6b
 8019b2e:	480c      	ldr	r0, [pc, #48]	@ (8019b60 <lfs_bd_read+0x1d8>)
 8019b30:	f00d fa84 	bl	802703c <__assert_func>
        LFS_ASSERT(err <= 0);
 8019b34:	4b0b      	ldr	r3, [pc, #44]	@ (8019b64 <lfs_bd_read+0x1dc>)
 8019b36:	4a09      	ldr	r2, [pc, #36]	@ (8019b5c <lfs_bd_read+0x1d4>)
 8019b38:	2176      	movs	r1, #118	@ 0x76
 8019b3a:	4809      	ldr	r0, [pc, #36]	@ (8019b60 <lfs_bd_read+0x1d8>)
 8019b3c:	f00d fa7e 	bl	802703c <__assert_func>
 8019b40:	9003      	str	r0, [sp, #12]
 8019b42:	e7c0      	b.n	8019ac6 <lfs_bd_read+0x13e>
    return 0;
 8019b44:	2000      	movs	r0, #0
 8019b46:	e7ec      	b.n	8019b22 <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 8019b48:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 8019b4c:	e7e9      	b.n	8019b22 <lfs_bd_read+0x19a>
 8019b4e:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 8019b52:	e7e6      	b.n	8019b22 <lfs_bd_read+0x19a>
 8019b54:	4618      	mov	r0, r3
 8019b56:	e7e4      	b.n	8019b22 <lfs_bd_read+0x19a>
 8019b58:	0803570c 	.word	0x0803570c
 8019b5c:	080363d4 	.word	0x080363d4
 8019b60:	08035660 	.word	0x08035660
 8019b64:	08035690 	.word	0x08035690

08019b68 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8019b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b6c:	b089      	sub	sp, #36	@ 0x24
 8019b6e:	4607      	mov	r7, r0
 8019b70:	468a      	mov	sl, r1
 8019b72:	4690      	mov	r8, r2
 8019b74:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 8019b76:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 8019b78:	690b      	ldr	r3, [r1, #16]
 8019b7a:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8019b7c:	303c      	adds	r0, #60	@ 0x3c
 8019b7e:	f7ff fd73 	bl	8019668 <lfs_gstate_hasmovehere>
 8019b82:	2800      	cmp	r0, #0
 8019b84:	f000 808d 	beq.w	8019ca2 <lfs_dir_getslice+0x13a>
    return (tag & 0x000ffc00) >> 10;
 8019b88:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	f000 808a 	beq.w	8019ca6 <lfs_dir_getslice+0x13e>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8019b92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 8019b94:	f3c2 238f 	ubfx	r3, r2, #10, #16
 8019b98:	f3c2 2289 	ubfx	r2, r2, #10, #10
 8019b9c:	f3cb 218f 	ubfx	r1, fp, #10, #16
 8019ba0:	f3cb 2089 	ubfx	r0, fp, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8019ba4:	404b      	eors	r3, r1
 8019ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	f000 8085 	beq.w	8019cba <lfs_dir_getslice+0x152>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 8019bb0:	4282      	cmp	r2, r0
 8019bb2:	d37a      	bcc.n	8019caa <lfs_dir_getslice+0x142>
    lfs_stag_t gdiff = 0;
 8019bb4:	2600      	movs	r6, #0
 8019bb6:	e006      	b.n	8019bc6 <lfs_dir_getslice+0x5e>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8019bb8:	9605      	str	r6, [sp, #20]
 8019bba:	ebab 0306 	sub.w	r3, fp, r6
 8019bbe:	4063      	eors	r3, r4
 8019bc0:	ea13 0f08 	tst.w	r3, r8
 8019bc4:	d048      	beq.n	8019c58 <lfs_dir_getslice+0xf0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8019bc6:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8019bc8:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8019bcc:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8019bd0:	bf14      	ite	ne
 8019bd2:	4623      	movne	r3, r4
 8019bd4:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 8019bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8019bda:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8019bdc:	3308      	adds	r3, #8
 8019bde:	42ab      	cmp	r3, r5
 8019be0:	d865      	bhi.n	8019cae <lfs_dir_getslice+0x146>
        off -= lfs_tag_dsize(ntag);
 8019be2:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 8019be4:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 8019be8:	2304      	movs	r3, #4
 8019bea:	9303      	str	r3, [sp, #12]
 8019bec:	a907      	add	r1, sp, #28
 8019bee:	9102      	str	r1, [sp, #8]
 8019bf0:	9501      	str	r5, [sp, #4]
 8019bf2:	9200      	str	r2, [sp, #0]
 8019bf4:	463a      	mov	r2, r7
 8019bf6:	2100      	movs	r1, #0
 8019bf8:	4638      	mov	r0, r7
 8019bfa:	f7ff fec5 	bl	8019988 <lfs_bd_read>
        if (err) {
 8019bfe:	4603      	mov	r3, r0
 8019c00:	2800      	cmp	r0, #0
 8019c02:	d156      	bne.n	8019cb2 <lfs_dir_getslice+0x14a>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8019c04:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8019c06:	ba1b      	rev	r3, r3
 8019c08:	4063      	eors	r3, r4
 8019c0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019c0e:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 8019c10:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d0cf      	beq.n	8019bb8 <lfs_dir_getslice+0x50>
    return (tag & 0x70000000) >> 20;
 8019c18:	0d23      	lsrs	r3, r4, #20
 8019c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 8019c1e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8019c22:	d1c9      	bne.n	8019bb8 <lfs_dir_getslice+0x50>
    return (tag & 0x000ffc00) >> 10;
 8019c24:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8019c28:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 8019c2c:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8019c30:	4584      	cmp	ip, r0
 8019c32:	d3c1      	bcc.n	8019bb8 <lfs_dir_getslice+0x50>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8019c34:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8019c38:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8019c3c:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 8019c40:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8019c44:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8019c48:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8019c4c:	42a2      	cmp	r2, r4
 8019c4e:	d037      	beq.n	8019cc0 <lfs_dir_getslice+0x158>
    return (int8_t)lfs_tag_chunk(tag);
 8019c50:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8019c52:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 8019c56:	e7af      	b.n	8019bb8 <lfs_dir_getslice+0x50>
            if (lfs_tag_isdelete(tag)) {
 8019c58:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8019c5c:	d033      	beq.n	8019cc6 <lfs_dir_getslice+0x15e>
    return tag & 0x000003ff;
 8019c5e:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 8019c62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019c64:	429e      	cmp	r6, r3
 8019c66:	bf28      	it	cs
 8019c68:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8019c6a:	f8da 2000 	ldr.w	r2, [sl]
 8019c6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019c70:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 8019c72:	9603      	str	r6, [sp, #12]
 8019c74:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8019c76:	9102      	str	r1, [sp, #8]
 8019c78:	3304      	adds	r3, #4
 8019c7a:	9301      	str	r3, [sp, #4]
 8019c7c:	9200      	str	r2, [sp, #0]
 8019c7e:	4633      	mov	r3, r6
 8019c80:	463a      	mov	r2, r7
 8019c82:	2100      	movs	r1, #0
 8019c84:	4638      	mov	r0, r7
 8019c86:	f7ff fe7f 	bl	8019988 <lfs_bd_read>
            if (err) {
 8019c8a:	4603      	mov	r3, r0
 8019c8c:	b988      	cbnz	r0, 8019cb2 <lfs_dir_getslice+0x14a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8019c8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019c90:	1b9a      	subs	r2, r3, r6
 8019c92:	2100      	movs	r1, #0
 8019c94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019c96:	1998      	adds	r0, r3, r6
 8019c98:	f00f ff22 	bl	8029ae0 <memset>
            return tag + gdiff;
 8019c9c:	9b05      	ldr	r3, [sp, #20]
 8019c9e:	4423      	add	r3, r4
 8019ca0:	e007      	b.n	8019cb2 <lfs_dir_getslice+0x14a>
    lfs_stag_t gdiff = 0;
 8019ca2:	2600      	movs	r6, #0
 8019ca4:	e78f      	b.n	8019bc6 <lfs_dir_getslice+0x5e>
 8019ca6:	2600      	movs	r6, #0
 8019ca8:	e78d      	b.n	8019bc6 <lfs_dir_getslice+0x5e>
            gdiff -= LFS_MKTAG(0, 1, 0);
 8019caa:	4e08      	ldr	r6, [pc, #32]	@ (8019ccc <lfs_dir_getslice+0x164>)
 8019cac:	e78b      	b.n	8019bc6 <lfs_dir_getslice+0x5e>
    return LFS_ERR_NOENT;
 8019cae:	f06f 0301 	mvn.w	r3, #1
}
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	b009      	add	sp, #36	@ 0x24
 8019cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 8019cba:	f06f 0301 	mvn.w	r3, #1
 8019cbe:	e7f8      	b.n	8019cb2 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 8019cc0:	f06f 0301 	mvn.w	r3, #1
 8019cc4:	e7f5      	b.n	8019cb2 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 8019cc6:	f06f 0301 	mvn.w	r3, #1
 8019cca:	e7f2      	b.n	8019cb2 <lfs_dir_getslice+0x14a>
 8019ccc:	fffffc00 	.word	0xfffffc00

08019cd0 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8019cd0:	b510      	push	{r4, lr}
 8019cd2:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 8019cd4:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 8019cd8:	9402      	str	r4, [sp, #8]
 8019cda:	9c06      	ldr	r4, [sp, #24]
 8019cdc:	9401      	str	r4, [sp, #4]
 8019cde:	2400      	movs	r4, #0
 8019ce0:	9400      	str	r4, [sp, #0]
 8019ce2:	f7ff ff41 	bl	8019b68 <lfs_dir_getslice>
}
 8019ce6:	b004      	add	sp, #16
 8019ce8:	bd10      	pop	{r4, pc}
	...

08019cec <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 8019cec:	b510      	push	{r4, lr}
 8019cee:	b086      	sub	sp, #24
 8019cf0:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8019cf2:	ab03      	add	r3, sp, #12
 8019cf4:	9300      	str	r3, [sp, #0]
 8019cf6:	4b09      	ldr	r3, [pc, #36]	@ (8019d1c <lfs_dir_getgstate+0x30>)
 8019cf8:	4a09      	ldr	r2, [pc, #36]	@ (8019d20 <lfs_dir_getgstate+0x34>)
 8019cfa:	f7ff ffe9 	bl	8019cd0 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 8019cfe:	2800      	cmp	r0, #0
 8019d00:	da04      	bge.n	8019d0c <lfs_dir_getgstate+0x20>
 8019d02:	f110 0f02 	cmn.w	r0, #2
 8019d06:	d106      	bne.n	8019d16 <lfs_dir_getgstate+0x2a>
    return 0;
 8019d08:	2000      	movs	r0, #0
 8019d0a:	e004      	b.n	8019d16 <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 8019d0c:	a903      	add	r1, sp, #12
 8019d0e:	4620      	mov	r0, r4
 8019d10:	f7ff fc98 	bl	8019644 <lfs_gstate_xor>
    return 0;
 8019d14:	2000      	movs	r0, #0
}
 8019d16:	b006      	add	sp, #24
 8019d18:	bd10      	pop	{r4, pc}
 8019d1a:	bf00      	nop
 8019d1c:	7ff0000c 	.word	0x7ff0000c
 8019d20:	7ff00000 	.word	0x7ff00000

08019d24 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 8019d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d28:	b089      	sub	sp, #36	@ 0x24
 8019d2a:	461c      	mov	r4, r3
 8019d2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019d2e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8019d30:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 8019d32:	b923      	cbnz	r3, 8019d3e <lfs_ctz_traverse+0x1a>
        return 0;
 8019d34:	2300      	movs	r3, #0
}
 8019d36:	4618      	mov	r0, r3
 8019d38:	b009      	add	sp, #36	@ 0x24
 8019d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d3e:	4680      	mov	r8, r0
 8019d40:	4689      	mov	r9, r1
 8019d42:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8019d44:	3b01      	subs	r3, #1
 8019d46:	9307      	str	r3, [sp, #28]
 8019d48:	a907      	add	r1, sp, #28
 8019d4a:	f7ff fdff 	bl	801994c <lfs_ctz_index>
 8019d4e:	4605      	mov	r5, r0
        int err = cb(data, head);
 8019d50:	4621      	mov	r1, r4
 8019d52:	4638      	mov	r0, r7
 8019d54:	47b0      	blx	r6
        if (err) {
 8019d56:	4603      	mov	r3, r0
 8019d58:	2800      	cmp	r0, #0
 8019d5a:	d1ec      	bne.n	8019d36 <lfs_ctz_traverse+0x12>
        if (index == 0) {
 8019d5c:	2d00      	cmp	r5, #0
 8019d5e:	d0ea      	beq.n	8019d36 <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 8019d60:	f005 0b01 	and.w	fp, r5, #1
 8019d64:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 8019d68:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8019d6a:	9303      	str	r3, [sp, #12]
 8019d6c:	aa05      	add	r2, sp, #20
 8019d6e:	9202      	str	r2, [sp, #8]
 8019d70:	2200      	movs	r2, #0
 8019d72:	9201      	str	r2, [sp, #4]
 8019d74:	9400      	str	r4, [sp, #0]
 8019d76:	4652      	mov	r2, sl
 8019d78:	4649      	mov	r1, r9
 8019d7a:	4640      	mov	r0, r8
 8019d7c:	f7ff fe04 	bl	8019988 <lfs_bd_read>
        if (err) {
 8019d80:	4604      	mov	r4, r0
 8019d82:	b9c8      	cbnz	r0, 8019db8 <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 8019d84:	43eb      	mvns	r3, r5
 8019d86:	f003 0301 	and.w	r3, r3, #1
 8019d8a:	42a3      	cmp	r3, r4
 8019d8c:	dd0b      	ble.n	8019da6 <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 8019d8e:	ab08      	add	r3, sp, #32
 8019d90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019d94:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8019d98:	4638      	mov	r0, r7
 8019d9a:	47b0      	blx	r6
            if (err) {
 8019d9c:	4603      	mov	r3, r0
 8019d9e:	2800      	cmp	r0, #0
 8019da0:	d1c9      	bne.n	8019d36 <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 8019da2:	3401      	adds	r4, #1
 8019da4:	e7ee      	b.n	8019d84 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 8019da6:	aa08      	add	r2, sp, #32
 8019da8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019dac:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 8019db0:	f1ab 0b02 	sub.w	fp, fp, #2
 8019db4:	445d      	add	r5, fp
    while (true) {
 8019db6:	e7cb      	b.n	8019d50 <lfs_ctz_traverse+0x2c>
            return err;
 8019db8:	4603      	mov	r3, r0
 8019dba:	e7bc      	b.n	8019d36 <lfs_ctz_traverse+0x12>

08019dbc <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 8019dbc:	b530      	push	{r4, r5, lr}
 8019dbe:	b087      	sub	sp, #28
 8019dc0:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 8019dc2:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8019dc4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8019dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 8019dc8:	6811      	ldr	r1, [r2, #0]
 8019dca:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8019dcc:	2508      	movs	r5, #8
 8019dce:	9503      	str	r5, [sp, #12]
 8019dd0:	ad04      	add	r5, sp, #16
 8019dd2:	9502      	str	r5, [sp, #8]
 8019dd4:	9201      	str	r2, [sp, #4]
 8019dd6:	9100      	str	r1, [sp, #0]
 8019dd8:	4602      	mov	r2, r0
 8019dda:	f100 0110 	add.w	r1, r0, #16
 8019dde:	f7ff fdd3 	bl	8019988 <lfs_bd_read>
    if (err) {
 8019de2:	4603      	mov	r3, r0
 8019de4:	b978      	cbnz	r0, 8019e06 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8019de6:	9a04      	ldr	r2, [sp, #16]
 8019de8:	6861      	ldr	r1, [r4, #4]
 8019dea:	4291      	cmp	r1, r2
 8019dec:	d008      	beq.n	8019e00 <lfs_fs_parent_match+0x44>
 8019dee:	9d05      	ldr	r5, [sp, #20]
 8019df0:	68a0      	ldr	r0, [r4, #8]
 8019df2:	4285      	cmp	r5, r0
 8019df4:	d004      	beq.n	8019e00 <lfs_fs_parent_match+0x44>
 8019df6:	4282      	cmp	r2, r0
 8019df8:	d002      	beq.n	8019e00 <lfs_fs_parent_match+0x44>
 8019dfa:	42a9      	cmp	r1, r5
 8019dfc:	d000      	beq.n	8019e00 <lfs_fs_parent_match+0x44>
 8019dfe:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8019e00:	3b00      	subs	r3, #0
 8019e02:	bf18      	it	ne
 8019e04:	2301      	movne	r3, #1
}
 8019e06:	4618      	mov	r0, r3
 8019e08:	b007      	add	sp, #28
 8019e0a:	bd30      	pop	{r4, r5, pc}

08019e0c <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8019e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e10:	b0af      	sub	sp, #188	@ 0xbc
 8019e12:	9007      	str	r0, [sp, #28]
 8019e14:	460e      	mov	r6, r1
 8019e16:	4617      	mov	r7, r2
 8019e18:	461c      	mov	r4, r3
 8019e1a:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 8019e1e:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 8019e22:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 8019e26:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 8019e2a:	9304      	str	r3, [sp, #16]
 8019e2c:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 8019e30:	9305      	str	r3, [sp, #20]
 8019e32:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 8019e36:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 8019e38:	2500      	movs	r5, #0
 8019e3a:	950d      	str	r5, [sp, #52]	@ 0x34
 8019e3c:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 8019e3e:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8019e42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019e46:	bf14      	ite	ne
 8019e48:	46a1      	movne	r9, r4
 8019e4a:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 8019e4e:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8019e52:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8019e56:	44b9      	add	r9, r7
 8019e58:	68f3      	ldr	r3, [r6, #12]
 8019e5a:	4599      	cmp	r9, r3
 8019e5c:	d35e      	bcc.n	8019f1c <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 8019e5e:	f1bb 0f00 	cmp.w	fp, #0
 8019e62:	f340 80fa 	ble.w	801a05a <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 8019e66:	f8d8 3000 	ldr.w	r3, [r8]
 8019e6a:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 8019e6c:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 8019e70:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 8019e74:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8019e78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019e7a:	4ba9      	ldr	r3, [pc, #676]	@ (801a120 <lfs_dir_traverse+0x314>)
 8019e7c:	ea0a 0303 	and.w	r3, sl, r3
 8019e80:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8019e82:	404a      	eors	r2, r1
 8019e84:	401a      	ands	r2, r3
 8019e86:	d1da      	bne.n	8019e3e <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 8019e88:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	f000 8116 	beq.w	801a0be <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8019e92:	2d02      	cmp	r5, #2
 8019e94:	d862      	bhi.n	8019f5c <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 8019e96:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 8019e9a:	a82e      	add	r0, sp, #184	@ 0xb8
 8019e9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8019ea0:	f843 6c78 	str.w	r6, [r3, #-120]
 8019ea4:	f843 7c74 	str.w	r7, [r3, #-116]
 8019ea8:	f843 4c70 	str.w	r4, [r3, #-112]
 8019eac:	f843 8c6c 	str.w	r8, [r3, #-108]
 8019eb0:	f843 bc68 	str.w	fp, [r3, #-104]
 8019eb4:	f843 ac64 	str.w	sl, [r3, #-100]
 8019eb8:	983b      	ldr	r0, [sp, #236]	@ 0xec
 8019eba:	f843 0c60 	str.w	r0, [r3, #-96]
 8019ebe:	9804      	ldr	r0, [sp, #16]
 8019ec0:	f823 0c5c 	strh.w	r0, [r3, #-92]
 8019ec4:	9805      	ldr	r0, [sp, #20]
 8019ec6:	f823 0c5a 	strh.w	r0, [r3, #-90]
 8019eca:	9806      	ldr	r0, [sp, #24]
 8019ecc:	f823 0c58 	strh.w	r0, [r3, #-88]
 8019ed0:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 8019ed2:	f843 0c54 	str.w	r0, [r3, #-84]
 8019ed6:	9840      	ldr	r0, [sp, #256]	@ 0x100
 8019ed8:	f843 0c50 	str.w	r0, [r3, #-80]
 8019edc:	f843 1c4c 	str.w	r1, [r3, #-76]
 8019ee0:	f843 9c48 	str.w	r9, [r3, #-72]
 8019ee4:	3b44      	subs	r3, #68	@ 0x44
 8019ee6:	a90d      	add	r1, sp, #52	@ 0x34
 8019ee8:	c903      	ldmia	r1, {r0, r1}
 8019eea:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 8019eee:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 8019ef2:	009b      	lsls	r3, r3, #2
 8019ef4:	3328      	adds	r3, #40	@ 0x28
 8019ef6:	a910      	add	r1, sp, #64	@ 0x40
 8019ef8:	440b      	add	r3, r1
 8019efa:	3304      	adds	r3, #4
 8019efc:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 8019efe:	3501      	adds	r5, #1
                ttag = 0;
 8019f00:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 8019f02:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 8019f04:	4b87      	ldr	r3, [pc, #540]	@ (801a124 <lfs_dir_traverse+0x318>)
 8019f06:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 8019f08:	2300      	movs	r3, #0
 8019f0a:	9306      	str	r3, [sp, #24]
                end = 0;
 8019f0c:	9305      	str	r3, [sp, #20]
                begin = 0;
 8019f0e:	9304      	str	r3, [sp, #16]
 8019f10:	e795      	b.n	8019e3e <lfs_dir_traverse+0x32>
 8019f12:	9d08      	ldr	r5, [sp, #32]
 8019f14:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8019f16:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8019f18:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019f1a:	e790      	b.n	8019e3e <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 8019f1c:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 8019f1e:	2304      	movs	r3, #4
 8019f20:	9303      	str	r3, [sp, #12]
 8019f22:	a90f      	add	r1, sp, #60	@ 0x3c
 8019f24:	9102      	str	r1, [sp, #8]
 8019f26:	f8cd 9004 	str.w	r9, [sp, #4]
 8019f2a:	9200      	str	r2, [sp, #0]
 8019f2c:	9a07      	ldr	r2, [sp, #28]
 8019f2e:	2100      	movs	r1, #0
 8019f30:	4610      	mov	r0, r2
 8019f32:	f7ff fd29 	bl	8019988 <lfs_bd_read>
                if (err) {
 8019f36:	4603      	mov	r3, r0
 8019f38:	2800      	cmp	r0, #0
 8019f3a:	f040 80ec 	bne.w	801a116 <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8019f3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 8019f40:	ba1b      	rev	r3, r3
 8019f42:	4063      	eors	r3, r4
 8019f44:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 8019f48:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 8019f4a:	6833      	ldr	r3, [r6, #0]
 8019f4c:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 8019f4e:	f109 0304 	add.w	r3, r9, #4
 8019f52:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 8019f54:	464f      	mov	r7, r9
                buffer = &disk;
 8019f56:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 8019f5a:	e78d      	b.n	8019e78 <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8019f5c:	4b72      	ldr	r3, [pc, #456]	@ (801a128 <lfs_dir_traverse+0x31c>)
 8019f5e:	4a73      	ldr	r2, [pc, #460]	@ (801a12c <lfs_dir_traverse+0x320>)
 8019f60:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8019f64:	4872      	ldr	r0, [pc, #456]	@ (801a130 <lfs_dir_traverse+0x324>)
 8019f66:	f00d f869 	bl	802703c <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 8019f6a:	4b6e      	ldr	r3, [pc, #440]	@ (801a124 <lfs_dir_traverse+0x318>)
 8019f6c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8019f6e:	429a      	cmp	r2, r3
 8019f70:	f43f af65 	beq.w	8019e3e <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 8019f74:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 8019f78:	aa2e      	add	r2, sp, #184	@ 0xb8
 8019f7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019f7e:	223c      	movs	r2, #60	@ 0x3c
 8019f80:	2100      	movs	r1, #0
 8019f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f84:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 8019f88:	f00f fdaa 	bl	8029ae0 <memset>
 8019f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f8e:	f843 6c78 	str.w	r6, [r3, #-120]
 8019f92:	f843 7c74 	str.w	r7, [r3, #-116]
 8019f96:	f843 4c70 	str.w	r4, [r3, #-112]
 8019f9a:	f843 8c6c 	str.w	r8, [r3, #-108]
 8019f9e:	f843 bc68 	str.w	fp, [r3, #-104]
 8019fa2:	f843 ac64 	str.w	sl, [r3, #-100]
 8019fa6:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8019fa8:	f843 2c60 	str.w	r2, [r3, #-96]
 8019fac:	9a04      	ldr	r2, [sp, #16]
 8019fae:	f823 2c5c 	strh.w	r2, [r3, #-92]
 8019fb2:	9a05      	ldr	r2, [sp, #20]
 8019fb4:	f823 2c5a 	strh.w	r2, [r3, #-90]
 8019fb8:	9906      	ldr	r1, [sp, #24]
 8019fba:	f823 1c58 	strh.w	r1, [r3, #-88]
 8019fbe:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8019fc0:	f843 2c54 	str.w	r2, [r3, #-84]
 8019fc4:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8019fc6:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 8019fca:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 8019fcc:	9b08      	ldr	r3, [sp, #32]
 8019fce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8019fd2:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 8019fd4:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 8019fd8:	1c50      	adds	r0, r2, #1
 8019fda:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 8019fdc:	1a9b      	subs	r3, r3, r2
 8019fde:	fa11 f383 	uxtah	r3, r1, r3
 8019fe2:	b21b      	sxth	r3, r3
 8019fe4:	9306      	str	r3, [sp, #24]
            dir = buffer;
 8019fe6:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8019fe8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8019fec:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8019fee:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801a134 <lfs_dir_traverse+0x328>
            attrcount = 0;
 8019ff2:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 8019ff6:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 8019ff8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 8019ffc:	465f      	mov	r7, fp
 8019ffe:	e71e      	b.n	8019e3e <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801a000:	2300      	movs	r3, #0
 801a002:	9508      	str	r5, [sp, #32]
 801a004:	9609      	str	r6, [sp, #36]	@ 0x24
 801a006:	970a      	str	r7, [sp, #40]	@ 0x28
 801a008:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a00a:	461c      	mov	r4, r3
 801a00c:	9d06      	ldr	r5, [sp, #24]
 801a00e:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 801a010:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801a012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 801a014:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801a018:	4294      	cmp	r4, r2
 801a01a:	d219      	bcs.n	801a050 <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801a01c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801a020:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 801a024:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 801a028:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 801a02c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801a030:	442b      	add	r3, r5
 801a032:	029b      	lsls	r3, r3, #10
 801a034:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 801a038:	6891      	ldr	r1, [r2, #8]
 801a03a:	6852      	ldr	r2, [r2, #4]
 801a03c:	4319      	orrs	r1, r3
 801a03e:	4638      	mov	r0, r7
 801a040:	47b0      	blx	r6
                if (res < 0) {
 801a042:	2800      	cmp	r0, #0
 801a044:	db66      	blt.n	801a114 <lfs_dir_traverse+0x308>
                if (res) {
 801a046:	2800      	cmp	r0, #0
 801a048:	f47f af63 	bne.w	8019f12 <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801a04c:	3401      	adds	r4, #1
 801a04e:	e7e0      	b.n	801a012 <lfs_dir_traverse+0x206>
 801a050:	9d08      	ldr	r5, [sp, #32]
 801a052:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801a054:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801a056:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a058:	e6f1      	b.n	8019e3e <lfs_dir_traverse+0x32>
                res = 0;
 801a05a:	2300      	movs	r3, #0
    if (sp > 0) {
 801a05c:	2d00      	cmp	r5, #0
 801a05e:	d05a      	beq.n	801a116 <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801a060:	3d01      	subs	r5, #1
 801a062:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801a066:	aa2e      	add	r2, sp, #184	@ 0xb8
 801a068:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a06c:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801a070:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801a074:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801a078:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801a07c:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801a080:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801a084:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801a088:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801a08a:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801a08e:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801a090:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801a094:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801a096:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801a09a:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801a09c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801a0a0:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801a0a2:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801a0a6:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801a0a8:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801a0ac:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801a0ae:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801a0b2:	aa0d      	add	r2, sp, #52	@ 0x34
 801a0b4:	3b44      	subs	r3, #68	@ 0x44
 801a0b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a0ba:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801a0be:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801a0c2:	b153      	cbz	r3, 801a0da <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801a0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a0c6:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801a0ca:	9a04      	ldr	r2, [sp, #16]
 801a0cc:	429a      	cmp	r2, r3
 801a0ce:	f63f aeb6 	bhi.w	8019e3e <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801a0d2:	9a05      	ldr	r2, [sp, #20]
 801a0d4:	429a      	cmp	r2, r3
 801a0d6:	f67f aeb2 	bls.w	8019e3e <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801a0da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a0dc:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801a0de:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	f43f aeab 	beq.w	8019e3e <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801a0e8:	f240 1201 	movw	r2, #257	@ 0x101
 801a0ec:	4293      	cmp	r3, r2
 801a0ee:	f43f af3c 	beq.w	8019f6a <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801a0f2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801a0f6:	d083      	beq.n	801a000 <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801a0f8:	464a      	mov	r2, r9
 801a0fa:	9b08      	ldr	r3, [sp, #32]
 801a0fc:	9906      	ldr	r1, [sp, #24]
 801a0fe:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801a102:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801a104:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801a106:	4798      	blx	r3
            if (res < 0) {
 801a108:	1e03      	subs	r3, r0, #0
 801a10a:	db04      	blt.n	801a116 <lfs_dir_traverse+0x30a>
            if (res) {
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	f43f ae96 	beq.w	8019e3e <lfs_dir_traverse+0x32>
 801a112:	e7a3      	b.n	801a05c <lfs_dir_traverse+0x250>
 801a114:	4603      	mov	r3, r0
}
 801a116:	4618      	mov	r0, r3
 801a118:	b02f      	add	sp, #188	@ 0xbc
 801a11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a11e:	bf00      	nop
 801a120:	7ff00000 	.word	0x7ff00000
 801a124:	08019741 	.word	0x08019741
 801a128:	0803573c 	.word	0x0803573c
 801a12c:	0803634c 	.word	0x0803634c
 801a130:	08035660 	.word	0x08035660
 801a134:	600ffc00 	.word	0x600ffc00

0801a138 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a13c:	b087      	sub	sp, #28
 801a13e:	4606      	mov	r6, r0
 801a140:	468a      	mov	sl, r1
 801a142:	4617      	mov	r7, r2
 801a144:	461c      	mov	r4, r3
 801a146:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801a14a:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801a14e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801a150:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801a154:	eb05 0208 	add.w	r2, r5, r8
 801a158:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801a15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a15c:	429a      	cmp	r2, r3
 801a15e:	d94d      	bls.n	801a1fc <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801a160:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801a164:	e076      	b.n	801a254 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	68ba      	ldr	r2, [r7, #8]
 801a16a:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801a16c:	42a9      	cmp	r1, r5
 801a16e:	d91c      	bls.n	801a1aa <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801a170:	42ab      	cmp	r3, r5
 801a172:	d904      	bls.n	801a17e <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801a174:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801a176:	4543      	cmp	r3, r8
 801a178:	bf28      	it	cs
 801a17a:	4643      	movcs	r3, r8
 801a17c:	e048      	b.n	801a210 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801a17e:	1b59      	subs	r1, r3, r5
 801a180:	440a      	add	r2, r1
 801a182:	4542      	cmp	r2, r8
 801a184:	bf28      	it	cs
 801a186:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801a188:	68f9      	ldr	r1, [r7, #12]
 801a18a:	1aeb      	subs	r3, r5, r3
 801a18c:	9205      	str	r2, [sp, #20]
 801a18e:	4419      	add	r1, r3
 801a190:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801a192:	f010 fee1 	bl	802af58 <memcpy>
                data += diff;
 801a196:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801a198:	9b05      	ldr	r3, [sp, #20]
 801a19a:	4419      	add	r1, r3
 801a19c:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801a19e:	441d      	add	r5, r3
                size -= diff;
 801a1a0:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801a1a4:	e02a      	b.n	801a1fc <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801a1a6:	4643      	mov	r3, r8
 801a1a8:	e032      	b.n	801a210 <lfs_dir_getread+0xd8>
 801a1aa:	4643      	mov	r3, r8
 801a1ac:	e030      	b.n	801a210 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801a1ae:	f06f 0301 	mvn.w	r3, #1
 801a1b2:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801a1b4:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801a1b6:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801a1b8:	fbb5 f2f3 	udiv	r2, r5, r3
 801a1bc:	fb03 5212 	mls	r2, r3, r2, r5
 801a1c0:	1aaa      	subs	r2, r5, r2
 801a1c2:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801a1c4:	eb05 030b 	add.w	r3, r5, fp
 801a1c8:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801a1ca:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801a1cc:	4403      	add	r3, r0
 801a1ce:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801a1d0:	fbb3 fcf0 	udiv	ip, r3, r0
 801a1d4:	fb00 301c 	mls	r0, r0, ip, r3
 801a1d8:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801a1da:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801a1dc:	428b      	cmp	r3, r1
 801a1de:	bf28      	it	cs
 801a1e0:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801a1e2:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801a1e4:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801a1e6:	9302      	str	r3, [sp, #8]
 801a1e8:	9101      	str	r1, [sp, #4]
 801a1ea:	9200      	str	r2, [sp, #0]
 801a1ec:	464b      	mov	r3, r9
 801a1ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a1f0:	4651      	mov	r1, sl
 801a1f2:	4630      	mov	r0, r6
 801a1f4:	f7ff fcb8 	bl	8019b68 <lfs_dir_getslice>
        if (err < 0) {
 801a1f8:	2800      	cmp	r0, #0
 801a1fa:	db2b      	blt.n	801a254 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801a1fc:	f1b8 0f00 	cmp.w	r8, #0
 801a200:	d027      	beq.n	801a252 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801a202:	2f00      	cmp	r7, #0
 801a204:	d0cf      	beq.n	801a1a6 <lfs_dir_getread+0x6e>
 801a206:	683b      	ldr	r3, [r7, #0]
 801a208:	f113 0f02 	cmn.w	r3, #2
 801a20c:	d0ab      	beq.n	801a166 <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801a20e:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801a210:	6822      	ldr	r2, [r4, #0]
 801a212:	f112 0f02 	cmn.w	r2, #2
 801a216:	d1ca      	bne.n	801a1ae <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801a218:	6862      	ldr	r2, [r4, #4]
 801a21a:	68a1      	ldr	r1, [r4, #8]
 801a21c:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801a21e:	42a8      	cmp	r0, r5
 801a220:	d9c5      	bls.n	801a1ae <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801a222:	42aa      	cmp	r2, r5
 801a224:	d8c3      	bhi.n	801a1ae <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801a226:	1b50      	subs	r0, r2, r5
 801a228:	4401      	add	r1, r0
 801a22a:	4608      	mov	r0, r1
 801a22c:	4299      	cmp	r1, r3
 801a22e:	bf28      	it	cs
 801a230:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801a232:	68e3      	ldr	r3, [r4, #12]
 801a234:	1aa9      	subs	r1, r5, r2
 801a236:	9005      	str	r0, [sp, #20]
 801a238:	4602      	mov	r2, r0
 801a23a:	4419      	add	r1, r3
 801a23c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801a23e:	f010 fe8b 	bl	802af58 <memcpy>
                data += diff;
 801a242:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801a244:	9b05      	ldr	r3, [sp, #20]
 801a246:	4419      	add	r1, r3
 801a248:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801a24a:	441d      	add	r5, r3
                size -= diff;
 801a24c:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801a250:	e7d4      	b.n	801a1fc <lfs_dir_getread+0xc4>
    return 0;
 801a252:	2000      	movs	r0, #0
}
 801a254:	b007      	add	sp, #28
 801a256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a25a <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801a25a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a25e:	b089      	sub	sp, #36	@ 0x24
 801a260:	4682      	mov	sl, r0
 801a262:	4689      	mov	r9, r1
 801a264:	9205      	str	r2, [sp, #20]
 801a266:	461f      	mov	r7, r3
 801a268:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801a26c:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801a270:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801a272:	2400      	movs	r4, #0
 801a274:	e002      	b.n	801a27c <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801a276:	2301      	movs	r3, #1
 801a278:	e023      	b.n	801a2c2 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801a27a:	442c      	add	r4, r5
 801a27c:	42b4      	cmp	r4, r6
 801a27e:	d21f      	bcs.n	801a2c0 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801a280:	1b35      	subs	r5, r6, r4
 801a282:	2d08      	cmp	r5, #8
 801a284:	bf28      	it	cs
 801a286:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801a288:	9503      	str	r5, [sp, #12]
 801a28a:	ab06      	add	r3, sp, #24
 801a28c:	9302      	str	r3, [sp, #8]
 801a28e:	eb04 0308 	add.w	r3, r4, r8
 801a292:	9301      	str	r3, [sp, #4]
 801a294:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a296:	9300      	str	r3, [sp, #0]
 801a298:	1b3b      	subs	r3, r7, r4
 801a29a:	9a05      	ldr	r2, [sp, #20]
 801a29c:	4649      	mov	r1, r9
 801a29e:	4650      	mov	r0, sl
 801a2a0:	f7ff fb72 	bl	8019988 <lfs_bd_read>
        if (err) {
 801a2a4:	4603      	mov	r3, r0
 801a2a6:	b960      	cbnz	r0, 801a2c2 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801a2a8:	462a      	mov	r2, r5
 801a2aa:	eb0b 0104 	add.w	r1, fp, r4
 801a2ae:	a806      	add	r0, sp, #24
 801a2b0:	f00f fb82 	bl	80299b8 <memcmp>
        if (res) {
 801a2b4:	2800      	cmp	r0, #0
 801a2b6:	d0e0      	beq.n	801a27a <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801a2b8:	2800      	cmp	r0, #0
 801a2ba:	dbdc      	blt.n	801a276 <lfs_bd_cmp+0x1c>
 801a2bc:	2302      	movs	r3, #2
 801a2be:	e000      	b.n	801a2c2 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801a2c0:	2300      	movs	r3, #0
}
 801a2c2:	4618      	mov	r0, r3
 801a2c4:	b009      	add	sp, #36	@ 0x24
 801a2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a2cc <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801a2cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a2d0:	b085      	sub	sp, #20
 801a2d2:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801a2d4:	6809      	ldr	r1, [r1, #0]
 801a2d6:	f111 0f03 	cmn.w	r1, #3
 801a2da:	d83f      	bhi.n	801a35c <lfs_bd_flush+0x90>
 801a2dc:	4607      	mov	r7, r0
 801a2de:	4691      	mov	r9, r2
 801a2e0:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801a2e2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a2e4:	4299      	cmp	r1, r3
 801a2e6:	d22d      	bcs.n	801a344 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801a2e8:	68a5      	ldr	r5, [r4, #8]
 801a2ea:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801a2ec:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801a2ee:	4415      	add	r5, r2
 801a2f0:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801a2f2:	fbb5 f3f2 	udiv	r3, r5, r2
 801a2f6:	fb02 5313 	mls	r3, r2, r3, r5
 801a2fa:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801a2fc:	6885      	ldr	r5, [r0, #8]
 801a2fe:	9600      	str	r6, [sp, #0]
 801a300:	68e3      	ldr	r3, [r4, #12]
 801a302:	6862      	ldr	r2, [r4, #4]
 801a304:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801a306:	1e05      	subs	r5, r0, #0
 801a308:	dc22      	bgt.n	801a350 <lfs_bd_flush+0x84>
        if (err) {
 801a30a:	bb45      	cbnz	r5, 801a35e <lfs_bd_flush+0x92>
        if (validate) {
 801a30c:	f1b8 0f00 	cmp.w	r8, #0
 801a310:	d013      	beq.n	801a33a <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801a312:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a316:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801a31a:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801a31c:	9603      	str	r6, [sp, #12]
 801a31e:	9302      	str	r3, [sp, #8]
 801a320:	6863      	ldr	r3, [r4, #4]
 801a322:	9301      	str	r3, [sp, #4]
 801a324:	6823      	ldr	r3, [r4, #0]
 801a326:	9300      	str	r3, [sp, #0]
 801a328:	4633      	mov	r3, r6
 801a32a:	464a      	mov	r2, r9
 801a32c:	2100      	movs	r1, #0
 801a32e:	4638      	mov	r0, r7
 801a330:	f7ff ff93 	bl	801a25a <lfs_bd_cmp>
            if (res < 0) {
 801a334:	2800      	cmp	r0, #0
 801a336:	db16      	blt.n	801a366 <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801a338:	b9b8      	cbnz	r0, 801a36a <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801a33a:	4621      	mov	r1, r4
 801a33c:	4638      	mov	r0, r7
 801a33e:	f7ff faf9 	bl	8019934 <lfs_cache_zero>
 801a342:	e00c      	b.n	801a35e <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801a344:	4b0a      	ldr	r3, [pc, #40]	@ (801a370 <lfs_bd_flush+0xa4>)
 801a346:	4a0b      	ldr	r2, [pc, #44]	@ (801a374 <lfs_bd_flush+0xa8>)
 801a348:	21b3      	movs	r1, #179	@ 0xb3
 801a34a:	480b      	ldr	r0, [pc, #44]	@ (801a378 <lfs_bd_flush+0xac>)
 801a34c:	f00c fe76 	bl	802703c <__assert_func>
        LFS_ASSERT(err <= 0);
 801a350:	4b0a      	ldr	r3, [pc, #40]	@ (801a37c <lfs_bd_flush+0xb0>)
 801a352:	4a08      	ldr	r2, [pc, #32]	@ (801a374 <lfs_bd_flush+0xa8>)
 801a354:	21b7      	movs	r1, #183	@ 0xb7
 801a356:	4808      	ldr	r0, [pc, #32]	@ (801a378 <lfs_bd_flush+0xac>)
 801a358:	f00c fe70 	bl	802703c <__assert_func>
    return 0;
 801a35c:	2500      	movs	r5, #0
}
 801a35e:	4628      	mov	r0, r5
 801a360:	b005      	add	sp, #20
 801a362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801a366:	4605      	mov	r5, r0
 801a368:	e7f9      	b.n	801a35e <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801a36a:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801a36e:	e7f6      	b.n	801a35e <lfs_bd_flush+0x92>
 801a370:	08035744 	.word	0x08035744
 801a374:	08036390 	.word	0x08036390
 801a378:	08035660 	.word	0x08035660
 801a37c:	08035690 	.word	0x08035690

0801a380 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a384:	b083      	sub	sp, #12
 801a386:	4607      	mov	r7, r0
 801a388:	460c      	mov	r4, r1
 801a38a:	9201      	str	r2, [sp, #4]
 801a38c:	469b      	mov	fp, r3
 801a38e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a390:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801a392:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801a396:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801a39a:	f116 0f02 	cmn.w	r6, #2
 801a39e:	d002      	beq.n	801a3a6 <lfs_bd_prog+0x26>
 801a3a0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a3a2:	42b3      	cmp	r3, r6
 801a3a4:	d90b      	bls.n	801a3be <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801a3a6:	eb05 0308 	add.w	r3, r5, r8
 801a3aa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a3ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801a3ae:	4293      	cmp	r3, r2
 801a3b0:	d919      	bls.n	801a3e6 <lfs_bd_prog+0x66>
 801a3b2:	4b2b      	ldr	r3, [pc, #172]	@ (801a460 <lfs_bd_prog+0xe0>)
 801a3b4:	4a2b      	ldr	r2, [pc, #172]	@ (801a464 <lfs_bd_prog+0xe4>)
 801a3b6:	21e9      	movs	r1, #233	@ 0xe9
 801a3b8:	482b      	ldr	r0, [pc, #172]	@ (801a468 <lfs_bd_prog+0xe8>)
 801a3ba:	f00c fe3f 	bl	802703c <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801a3be:	4b2b      	ldr	r3, [pc, #172]	@ (801a46c <lfs_bd_prog+0xec>)
 801a3c0:	4a28      	ldr	r2, [pc, #160]	@ (801a464 <lfs_bd_prog+0xe4>)
 801a3c2:	21e8      	movs	r1, #232	@ 0xe8
 801a3c4:	4828      	ldr	r0, [pc, #160]	@ (801a468 <lfs_bd_prog+0xe8>)
 801a3c6:	f00c fe39 	bl	802703c <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801a3ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a3ce:	d13c      	bne.n	801a44a <lfs_bd_prog+0xca>
        pcache->block = block;
 801a3d0:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801a3d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a3d4:	6a1a      	ldr	r2, [r3, #32]
 801a3d6:	fbb5 f3f2 	udiv	r3, r5, r2
 801a3da:	fb02 5313 	mls	r3, r2, r3, r5
 801a3de:	1aeb      	subs	r3, r5, r3
 801a3e0:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801a3e2:	2300      	movs	r3, #0
 801a3e4:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801a3e6:	f1b8 0f00 	cmp.w	r8, #0
 801a3ea:	d035      	beq.n	801a458 <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801a3ec:	6823      	ldr	r3, [r4, #0]
 801a3ee:	42b3      	cmp	r3, r6
 801a3f0:	d1eb      	bne.n	801a3ca <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801a3f2:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801a3f4:	42aa      	cmp	r2, r5
 801a3f6:	d8e8      	bhi.n	801a3ca <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801a3f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a3fa:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801a3fc:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801a3fe:	42a8      	cmp	r0, r5
 801a400:	d9e3      	bls.n	801a3ca <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801a402:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801a404:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801a408:	45c1      	cmp	r9, r8
 801a40a:	bf28      	it	cs
 801a40c:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801a40e:	68e3      	ldr	r3, [r4, #12]
 801a410:	1aa8      	subs	r0, r5, r2
 801a412:	464a      	mov	r2, r9
 801a414:	4651      	mov	r1, sl
 801a416:	4418      	add	r0, r3
 801a418:	f010 fd9e 	bl	802af58 <memcpy>
            data += diff;
 801a41c:	44ca      	add	sl, r9
            off += diff;
 801a41e:	444d      	add	r5, r9
            size -= diff;
 801a420:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801a424:	68a2      	ldr	r2, [r4, #8]
 801a426:	6863      	ldr	r3, [r4, #4]
 801a428:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801a42a:	4293      	cmp	r3, r2
 801a42c:	bf38      	it	cc
 801a42e:	4613      	movcc	r3, r2
 801a430:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801a432:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a434:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801a436:	429a      	cmp	r2, r3
 801a438:	d1d5      	bne.n	801a3e6 <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801a43a:	465b      	mov	r3, fp
 801a43c:	9a01      	ldr	r2, [sp, #4]
 801a43e:	4621      	mov	r1, r4
 801a440:	4638      	mov	r0, r7
 801a442:	f7ff ff43 	bl	801a2cc <lfs_bd_flush>
                if (err) {
 801a446:	b940      	cbnz	r0, 801a45a <lfs_bd_prog+0xda>
 801a448:	e7cd      	b.n	801a3e6 <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801a44a:	4b09      	ldr	r3, [pc, #36]	@ (801a470 <lfs_bd_prog+0xf0>)
 801a44c:	4a05      	ldr	r2, [pc, #20]	@ (801a464 <lfs_bd_prog+0xe4>)
 801a44e:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801a452:	4805      	ldr	r0, [pc, #20]	@ (801a468 <lfs_bd_prog+0xe8>)
 801a454:	f00c fdf2 	bl	802703c <__assert_func>
    return 0;
 801a458:	2000      	movs	r0, #0
}
 801a45a:	b003      	add	sp, #12
 801a45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a460:	080357a0 	.word	0x080357a0
 801a464:	080363a0 	.word	0x080363a0
 801a468:	08035660 	.word	0x08035660
 801a46c:	08035768 	.word	0x08035768
 801a470:	080357c4 	.word	0x080357c4

0801a474 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801a474:	b538      	push	{r3, r4, r5, lr}
 801a476:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801a478:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a47c:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801a47e:	f7ff ff25 	bl	801a2cc <lfs_bd_flush>
    if (err) {
 801a482:	4603      	mov	r3, r0
 801a484:	b920      	cbnz	r0, 801a490 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801a486:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801a488:	6903      	ldr	r3, [r0, #16]
 801a48a:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801a48c:	1e03      	subs	r3, r0, #0
 801a48e:	dc01      	bgt.n	801a494 <lfs_bd_sync+0x20>
}
 801a490:	4618      	mov	r0, r3
 801a492:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801a494:	4b02      	ldr	r3, [pc, #8]	@ (801a4a0 <lfs_bd_sync+0x2c>)
 801a496:	4a03      	ldr	r2, [pc, #12]	@ (801a4a4 <lfs_bd_sync+0x30>)
 801a498:	21dd      	movs	r1, #221	@ 0xdd
 801a49a:	4803      	ldr	r0, [pc, #12]	@ (801a4a8 <lfs_bd_sync+0x34>)
 801a49c:	f00c fdce 	bl	802703c <__assert_func>
 801a4a0:	08035690 	.word	0x08035690
 801a4a4:	08036340 	.word	0x08036340
 801a4a8:	08035660 	.word	0x08035660

0801a4ac <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801a4ac:	b570      	push	{r4, r5, r6, lr}
 801a4ae:	b084      	sub	sp, #16
 801a4b0:	4604      	mov	r4, r0
 801a4b2:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801a4b4:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801a4b6:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801a4b8:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801a4bc:	42ab      	cmp	r3, r5
 801a4be:	bf28      	it	cs
 801a4c0:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801a4c2:	6812      	ldr	r2, [r2, #0]
 801a4c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801a4c8:	9303      	str	r3, [sp, #12]
 801a4ca:	6866      	ldr	r6, [r4, #4]
 801a4cc:	9602      	str	r6, [sp, #8]
 801a4ce:	9101      	str	r1, [sp, #4]
 801a4d0:	9200      	str	r2, [sp, #0]
 801a4d2:	4602      	mov	r2, r0
 801a4d4:	2100      	movs	r1, #0
 801a4d6:	f7ff fec0 	bl	801a25a <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801a4da:	b920      	cbnz	r0, 801a4e6 <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801a4dc:	68a3      	ldr	r3, [r4, #8]
 801a4de:	42ab      	cmp	r3, r5
 801a4e0:	d001      	beq.n	801a4e6 <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801a4e2:	d202      	bcs.n	801a4ea <lfs_dir_find_match+0x3e>
 801a4e4:	2001      	movs	r0, #1
}
 801a4e6:	b004      	add	sp, #16
 801a4e8:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801a4ea:	2002      	movs	r0, #2
 801a4ec:	e7fb      	b.n	801a4e6 <lfs_dir_find_match+0x3a>

0801a4ee <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801a4ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a4f2:	b089      	sub	sp, #36	@ 0x24
 801a4f4:	9305      	str	r3, [sp, #20]
 801a4f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801a4f8:	b953      	cbnz	r3, 801a510 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801a4fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a4fe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a500:	6013      	str	r3, [r2, #0]
        *off = 0;
 801a502:	2300      	movs	r3, #0
 801a504:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a506:	6013      	str	r3, [r2, #0]
}
 801a508:	4618      	mov	r0, r3
 801a50a:	b009      	add	sp, #36	@ 0x24
 801a50c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a510:	4607      	mov	r7, r0
 801a512:	4688      	mov	r8, r1
 801a514:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801a516:	3b01      	subs	r3, #1
 801a518:	9307      	str	r3, [sp, #28]
 801a51a:	a907      	add	r1, sp, #28
 801a51c:	f7ff fa16 	bl	801994c <lfs_ctz_index>
 801a520:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801a522:	a911      	add	r1, sp, #68	@ 0x44
 801a524:	4638      	mov	r0, r7
 801a526:	f7ff fa11 	bl	801994c <lfs_ctz_index>
 801a52a:	4606      	mov	r6, r0
    while (current > target) {
 801a52c:	42b5      	cmp	r5, r6
 801a52e:	d91f      	bls.n	801a570 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801a530:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801a532:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801a536:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801a53a:	fa95 f3a5 	rbit	r3, r5
 801a53e:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801a542:	429c      	cmp	r4, r3
 801a544:	bf28      	it	cs
 801a546:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801a548:	2304      	movs	r3, #4
 801a54a:	9303      	str	r3, [sp, #12]
 801a54c:	aa05      	add	r2, sp, #20
 801a54e:	9202      	str	r2, [sp, #8]
 801a550:	00a2      	lsls	r2, r4, #2
 801a552:	9201      	str	r2, [sp, #4]
 801a554:	9a05      	ldr	r2, [sp, #20]
 801a556:	9200      	str	r2, [sp, #0]
 801a558:	464a      	mov	r2, r9
 801a55a:	4641      	mov	r1, r8
 801a55c:	4638      	mov	r0, r7
 801a55e:	f7ff fa13 	bl	8019988 <lfs_bd_read>
        if (err) {
 801a562:	4603      	mov	r3, r0
 801a564:	2800      	cmp	r0, #0
 801a566:	d1cf      	bne.n	801a508 <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801a568:	2301      	movs	r3, #1
 801a56a:	40a3      	lsls	r3, r4
 801a56c:	1aed      	subs	r5, r5, r3
 801a56e:	e7dd      	b.n	801a52c <lfs_ctz_find+0x3e>
    *block = head;
 801a570:	9b05      	ldr	r3, [sp, #20]
 801a572:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a574:	6013      	str	r3, [r2, #0]
    *off = pos;
 801a576:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a578:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a57a:	6013      	str	r3, [r2, #0]
    return 0;
 801a57c:	2300      	movs	r3, #0
 801a57e:	e7c3      	b.n	801a508 <lfs_ctz_find+0x1a>

0801a580 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801a580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a584:	b087      	sub	sp, #28
 801a586:	460c      	mov	r4, r1
 801a588:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801a58a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801a58c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a58e:	4291      	cmp	r1, r2
 801a590:	d272      	bcs.n	801a678 <lfs_file_flushedread+0xf8>
 801a592:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801a594:	eba2 0901 	sub.w	r9, r2, r1
 801a598:	4599      	cmp	r9, r3
 801a59a:	bf28      	it	cs
 801a59c:	4699      	movcs	r9, r3
    nsize = size;
 801a59e:	464e      	mov	r6, r9
    while (nsize > 0) {
 801a5a0:	e037      	b.n	801a612 <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801a5a2:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801a5a6:	d041      	beq.n	801a62c <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801a5a8:	f06f 0301 	mvn.w	r3, #1
 801a5ac:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801a5ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a5b0:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801a5b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a5b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801a5b8:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801a5ba:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801a5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5c0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801a5c2:	1a9d      	subs	r5, r3, r2
 801a5c4:	42b5      	cmp	r5, r6
 801a5c6:	bf28      	it	cs
 801a5c8:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801a5ca:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a5cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801a5d0:	d041      	beq.n	801a656 <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801a5d2:	88a1      	ldrh	r1, [r4, #4]
 801a5d4:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801a5d6:	9505      	str	r5, [sp, #20]
 801a5d8:	9704      	str	r7, [sp, #16]
 801a5da:	9203      	str	r2, [sp, #12]
 801a5dc:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801a5e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801a5e4:	9102      	str	r1, [sp, #8]
 801a5e6:	4a27      	ldr	r2, [pc, #156]	@ (801a684 <lfs_file_flushedread+0x104>)
 801a5e8:	9201      	str	r2, [sp, #4]
 801a5ea:	9300      	str	r3, [sp, #0]
 801a5ec:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801a5f0:	2200      	movs	r2, #0
 801a5f2:	f104 0108 	add.w	r1, r4, #8
 801a5f6:	4640      	mov	r0, r8
 801a5f8:	f7ff fd9e 	bl	801a138 <lfs_dir_getread>
            if (err) {
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	2800      	cmp	r0, #0
 801a600:	d13b      	bne.n	801a67a <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801a602:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a604:	442b      	add	r3, r5
 801a606:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801a608:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801a60a:	442b      	add	r3, r5
 801a60c:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801a60e:	442f      	add	r7, r5
        nsize -= diff;
 801a610:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801a612:	2e00      	cmp	r6, #0
 801a614:	d02e      	beq.n	801a674 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801a616:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a618:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801a61c:	d0c1      	beq.n	801a5a2 <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801a61e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801a620:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801a624:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801a626:	4291      	cmp	r1, r2
 801a628:	d1c7      	bne.n	801a5ba <lfs_file_flushedread+0x3a>
 801a62a:	e7ba      	b.n	801a5a2 <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801a62c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801a630:	9303      	str	r3, [sp, #12]
 801a632:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801a636:	9302      	str	r3, [sp, #8]
 801a638:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a63a:	9301      	str	r3, [sp, #4]
 801a63c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801a63e:	9300      	str	r3, [sp, #0]
 801a640:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a642:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801a646:	2100      	movs	r1, #0
 801a648:	4640      	mov	r0, r8
 801a64a:	f7ff ff50 	bl	801a4ee <lfs_ctz_find>
                if (err) {
 801a64e:	4603      	mov	r3, r0
 801a650:	2800      	cmp	r0, #0
 801a652:	d0ae      	beq.n	801a5b2 <lfs_file_flushedread+0x32>
 801a654:	e011      	b.n	801a67a <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801a656:	9503      	str	r5, [sp, #12]
 801a658:	9702      	str	r7, [sp, #8]
 801a65a:	9201      	str	r2, [sp, #4]
 801a65c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801a65e:	9200      	str	r2, [sp, #0]
 801a660:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801a664:	2100      	movs	r1, #0
 801a666:	4640      	mov	r0, r8
 801a668:	f7ff f98e 	bl	8019988 <lfs_bd_read>
            if (err) {
 801a66c:	4603      	mov	r3, r0
 801a66e:	2800      	cmp	r0, #0
 801a670:	d0c7      	beq.n	801a602 <lfs_file_flushedread+0x82>
 801a672:	e002      	b.n	801a67a <lfs_file_flushedread+0xfa>
    return size;
 801a674:	464b      	mov	r3, r9
 801a676:	e000      	b.n	801a67a <lfs_file_flushedread+0xfa>
        return 0;
 801a678:	2300      	movs	r3, #0
}
 801a67a:	4618      	mov	r0, r3
 801a67c:	b007      	add	sp, #28
 801a67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a682:	bf00      	nop
 801a684:	fff7fc00 	.word	0xfff7fc00

0801a688 <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a68c:	b089      	sub	sp, #36	@ 0x24
 801a68e:	4683      	mov	fp, r0
 801a690:	468a      	mov	sl, r1
 801a692:	9205      	str	r2, [sp, #20]
 801a694:	4698      	mov	r8, r3
 801a696:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801a69a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a69c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801a69e:	2400      	movs	r4, #0
 801a6a0:	e006      	b.n	801a6b0 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801a6a2:	462a      	mov	r2, r5
 801a6a4:	a906      	add	r1, sp, #24
 801a6a6:	6838      	ldr	r0, [r7, #0]
 801a6a8:	f003 fd82 	bl	801e1b0 <lfs_crc>
 801a6ac:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801a6ae:	442c      	add	r4, r5
 801a6b0:	42b4      	cmp	r4, r6
 801a6b2:	d216      	bcs.n	801a6e2 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801a6b4:	1b35      	subs	r5, r6, r4
 801a6b6:	2d08      	cmp	r5, #8
 801a6b8:	bf28      	it	cs
 801a6ba:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801a6bc:	9503      	str	r5, [sp, #12]
 801a6be:	ab06      	add	r3, sp, #24
 801a6c0:	9302      	str	r3, [sp, #8]
 801a6c2:	eb04 0309 	add.w	r3, r4, r9
 801a6c6:	9301      	str	r3, [sp, #4]
 801a6c8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a6ca:	9300      	str	r3, [sp, #0]
 801a6cc:	eba8 0304 	sub.w	r3, r8, r4
 801a6d0:	9a05      	ldr	r2, [sp, #20]
 801a6d2:	4651      	mov	r1, sl
 801a6d4:	4658      	mov	r0, fp
 801a6d6:	f7ff f957 	bl	8019988 <lfs_bd_read>
        if (err) {
 801a6da:	4603      	mov	r3, r0
 801a6dc:	2800      	cmp	r0, #0
 801a6de:	d0e0      	beq.n	801a6a2 <lfs_bd_crc+0x1a>
 801a6e0:	e000      	b.n	801a6e4 <lfs_bd_crc+0x5c>
    return 0;
 801a6e2:	2300      	movs	r3, #0
}
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	b009      	add	sp, #36	@ 0x24
 801a6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a6ec <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801a6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6f0:	b097      	sub	sp, #92	@ 0x5c
 801a6f2:	4605      	mov	r5, r0
 801a6f4:	460e      	mov	r6, r1
 801a6f6:	4617      	mov	r7, r2
 801a6f8:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801a6fa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a6fc:	b13b      	cbz	r3, 801a70e <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801a6fe:	6812      	ldr	r2, [r2, #0]
 801a700:	4293      	cmp	r3, r2
 801a702:	f240 825a 	bls.w	801abba <lfs_dir_fetchmatch+0x4ce>
 801a706:	687a      	ldr	r2, [r7, #4]
 801a708:	4293      	cmp	r3, r2
 801a70a:	f240 8259 	bls.w	801abc0 <lfs_dir_fetchmatch+0x4d4>
    uint32_t revs[2] = {0, 0};
 801a70e:	2400      	movs	r4, #0
 801a710:	9412      	str	r4, [sp, #72]	@ 0x48
 801a712:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801a714:	46a0      	mov	r8, r4
 801a716:	e010      	b.n	801a73a <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801a718:	f118 0301 	adds.w	r3, r8, #1
 801a71c:	f003 0301 	and.w	r3, r3, #1
 801a720:	bf48      	it	mi
 801a722:	425b      	negmi	r3, r3
 801a724:	a916      	add	r1, sp, #88	@ 0x58
 801a726:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a72a:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801a72e:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801a730:	2a00      	cmp	r2, #0
 801a732:	dd00      	ble.n	801a736 <lfs_dir_fetchmatch+0x4a>
            r = i;
 801a734:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801a736:	f108 0801 	add.w	r8, r8, #1
 801a73a:	f1b8 0f01 	cmp.w	r8, #1
 801a73e:	dc1d      	bgt.n	801a77c <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801a740:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801a744:	ab12      	add	r3, sp, #72	@ 0x48
 801a746:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801a74a:	2304      	movs	r3, #4
 801a74c:	9303      	str	r3, [sp, #12]
 801a74e:	9202      	str	r2, [sp, #8]
 801a750:	2100      	movs	r1, #0
 801a752:	9101      	str	r1, [sp, #4]
 801a754:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801a758:	9200      	str	r2, [sp, #0]
 801a75a:	462a      	mov	r2, r5
 801a75c:	4628      	mov	r0, r5
 801a75e:	f7ff f913 	bl	8019988 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801a762:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801a766:	eb0d 0903 	add.w	r9, sp, r3
 801a76a:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801a76e:	4683      	mov	fp, r0
 801a770:	2800      	cmp	r0, #0
 801a772:	d0d1      	beq.n	801a718 <lfs_dir_fetchmatch+0x2c>
 801a774:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a778:	d0dd      	beq.n	801a736 <lfs_dir_fetchmatch+0x4a>
 801a77a:	e21a      	b.n	801abb2 <lfs_dir_fetchmatch+0x4c6>
    dir->pair[0] = pair[(r+0)%2];
 801a77c:	2c00      	cmp	r4, #0
 801a77e:	f004 0301 	and.w	r3, r4, #1
 801a782:	bfb8      	it	lt
 801a784:	425b      	neglt	r3, r3
 801a786:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801a78a:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801a78c:	f114 0c01 	adds.w	ip, r4, #1
 801a790:	f00c 0c01 	and.w	ip, ip, #1
 801a794:	bf48      	it	mi
 801a796:	f1cc 0c00 	rsbmi	ip, ip, #0
 801a79a:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801a79e:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801a7a0:	aa16      	add	r2, sp, #88	@ 0x58
 801a7a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a7a6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801a7aa:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801a7ac:	2400      	movs	r4, #0
 801a7ae:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801a7b0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801a7b4:	f8cd c01c 	str.w	ip, [sp, #28]
 801a7b8:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801a7ba:	f1b9 0f01 	cmp.w	r9, #1
 801a7be:	f300 81eb 	bgt.w	801ab98 <lfs_dir_fetchmatch+0x4ac>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801a7c2:	4a90      	ldr	r2, [pc, #576]	@ (801aa04 <lfs_dir_fetchmatch+0x318>)
 801a7c4:	ab0e      	add	r3, sp, #56	@ 0x38
 801a7c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a7ca:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801a7ce:	2204      	movs	r2, #4
 801a7d0:	f106 0108 	add.w	r1, r6, #8
 801a7d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a7d8:	f003 fcea 	bl	801e1b0 <lfs_crc>
 801a7dc:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801a7de:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	461c      	mov	r4, r3
 801a7e6:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801a7e8:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801a7ea:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801a7ee:	461f      	mov	r7, r3
 801a7f0:	e110      	b.n	801aa14 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801a7f2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a7f6:	d101      	bne.n	801a7fc <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	e01e      	b.n	801a83a <lfs_dir_fetchmatch+0x14e>
                return err;
 801a7fc:	4683      	mov	fp, r0
 801a7fe:	e1d8      	b.n	801abb2 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x78000000) >> 20;
 801a800:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801a804:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801a808:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801a80c:	bf14      	ite	ne
 801a80e:	2300      	movne	r3, #0
 801a810:	2301      	moveq	r3, #1
                break;
 801a812:	e012      	b.n	801a83a <lfs_dir_fetchmatch+0x14e>
                err = lfs_bd_read(lfs,
 801a814:	2204      	movs	r2, #4
 801a816:	9203      	str	r2, [sp, #12]
 801a818:	aa0d      	add	r2, sp, #52	@ 0x34
 801a81a:	9202      	str	r2, [sp, #8]
 801a81c:	1d22      	adds	r2, r4, #4
 801a81e:	9201      	str	r2, [sp, #4]
 801a820:	6832      	ldr	r2, [r6, #0]
 801a822:	9200      	str	r2, [sp, #0]
 801a824:	462a      	mov	r2, r5
 801a826:	2100      	movs	r1, #0
 801a828:	4628      	mov	r0, r5
 801a82a:	f7ff f8ad 	bl	8019988 <lfs_bd_read>
                if (err) {
 801a82e:	bb80      	cbnz	r0, 801a892 <lfs_dir_fetchmatch+0x1a6>
                if (crc != dcrc) {
 801a830:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a832:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a834:	429a      	cmp	r2, r3
 801a836:	d031      	beq.n	801a89c <lfs_dir_fetchmatch+0x1b0>
        bool maybeerased = false;
 801a838:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801a83a:	68f2      	ldr	r2, [r6, #12]
 801a83c:	2a00      	cmp	r2, #0
 801a83e:	f000 8165 	beq.w	801ab0c <lfs_dir_fetchmatch+0x420>
        dir->erased = false;
 801a842:	2100      	movs	r1, #0
 801a844:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801a846:	b153      	cbz	r3, 801a85e <lfs_dir_fetchmatch+0x172>
 801a848:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801a84a:	6a01      	ldr	r1, [r0, #32]
 801a84c:	fbb2 f3f1 	udiv	r3, r2, r1
 801a850:	fb01 2313 	mls	r3, r1, r3, r2
 801a854:	b91b      	cbnz	r3, 801a85e <lfs_dir_fetchmatch+0x172>
            if (hasfcrc) {
 801a856:	9b08      	ldr	r3, [sp, #32]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	f040 8165 	bne.w	801ab28 <lfs_dir_fetchmatch+0x43c>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801a85e:	4631      	mov	r1, r6
 801a860:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801a864:	f7fe ff00 	bl	8019668 <lfs_gstate_hasmovehere>
 801a868:	2800      	cmp	r0, #0
 801a86a:	f000 817d 	beq.w	801ab68 <lfs_dir_fetchmatch+0x47c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801a86e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801a870:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801a874:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801a878:	429a      	cmp	r2, r3
 801a87a:	f000 8173 	beq.w	801ab64 <lfs_dir_fetchmatch+0x478>
            } else if (besttag != -1 &&
 801a87e:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801a882:	f000 8171 	beq.w	801ab68 <lfs_dir_fetchmatch+0x47c>
 801a886:	429a      	cmp	r2, r3
 801a888:	f240 816e 	bls.w	801ab68 <lfs_dir_fetchmatch+0x47c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801a88c:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801a890:	e16a      	b.n	801ab68 <lfs_dir_fetchmatch+0x47c>
                    if (err == LFS_ERR_CORRUPT) {
 801a892:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a896:	d0cf      	beq.n	801a838 <lfs_dir_fetchmatch+0x14c>
                    return err;
 801a898:	4683      	mov	fp, r0
 801a89a:	e18a      	b.n	801abb2 <lfs_dir_fetchmatch+0x4c6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801a89c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a89e:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801a8a2:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801a8a6:	2204      	movs	r2, #4
 801a8a8:	a90b      	add	r1, sp, #44	@ 0x2c
 801a8aa:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801a8ac:	f003 fc80 	bl	801e1b0 <lfs_crc>
 801a8b0:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801a8b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801a8b4:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a8b8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801a8bc:	bf08      	it	eq
 801a8be:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801a8c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a8c4:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801a8c6:	4423      	add	r3, r4
 801a8c8:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801a8ca:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801a8ce:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801a8d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a8d2:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801a8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a8d6:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801a8d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8da:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801a8dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a8e0:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801a8e2:	f8dd b018 	ldr.w	fp, [sp, #24]
 801a8e6:	e095      	b.n	801aa14 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801a8e8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a8ec:	d101      	bne.n	801a8f2 <lfs_dir_fetchmatch+0x206>
        bool maybeerased = false;
 801a8ee:	2300      	movs	r3, #0
 801a8f0:	e7a3      	b.n	801a83a <lfs_dir_fetchmatch+0x14e>
                return err;
 801a8f2:	4683      	mov	fp, r0
 801a8f4:	e15d      	b.n	801abb2 <lfs_dir_fetchmatch+0x4c6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801a8f6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801a8fa:	d021      	beq.n	801a940 <lfs_dir_fetchmatch+0x254>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801a8fc:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801a900:	d046      	beq.n	801a990 <lfs_dir_fetchmatch+0x2a4>
    return (tag & 0x7ff00000) >> 20;
 801a902:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801a906:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801a90a:	429a      	cmp	r2, r3
 801a90c:	f040 80e3 	bne.w	801aad6 <lfs_dir_fetchmatch+0x3ea>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801a910:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801a912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801a914:	2208      	movs	r2, #8
 801a916:	9203      	str	r2, [sp, #12]
 801a918:	aa10      	add	r2, sp, #64	@ 0x40
 801a91a:	9202      	str	r2, [sp, #8]
 801a91c:	f8cd 8004 	str.w	r8, [sp, #4]
 801a920:	6832      	ldr	r2, [r6, #0]
 801a922:	9200      	str	r2, [sp, #0]
 801a924:	462a      	mov	r2, r5
 801a926:	2100      	movs	r1, #0
 801a928:	4628      	mov	r0, r5
 801a92a:	f7ff f82d 	bl	8019988 <lfs_bd_read>
                if (err) {
 801a92e:	2800      	cmp	r0, #0
 801a930:	d04a      	beq.n	801a9c8 <lfs_dir_fetchmatch+0x2dc>
                    if (err == LFS_ERR_CORRUPT) {
 801a932:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a936:	f000 80e7 	beq.w	801ab08 <lfs_dir_fetchmatch+0x41c>
                hasfcrc = true;
 801a93a:	2301      	movs	r3, #1
 801a93c:	9308      	str	r3, [sp, #32]
 801a93e:	e0ca      	b.n	801aad6 <lfs_dir_fetchmatch+0x3ea>
    return (int8_t)lfs_tag_chunk(tag);
 801a940:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801a942:	fa17 f280 	uxtah	r2, r7, r0
 801a946:	b297      	uxth	r7, r2
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801a948:	9a06      	ldr	r2, [sp, #24]
 801a94a:	4611      	mov	r1, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801a94c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801a950:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801a954:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801a958:	f022 0203 	bic.w	r2, r2, #3
 801a95c:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801a960:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801a964:	4293      	cmp	r3, r2
 801a966:	d00f      	beq.n	801a988 <lfs_dir_fetchmatch+0x29c>
                } else if (tempbesttag != -1 &&
 801a968:	9a06      	ldr	r2, [sp, #24]
 801a96a:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801a96e:	f000 80b2 	beq.w	801aad6 <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
 801a972:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801a976:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801a97a:	429a      	cmp	r2, r3
 801a97c:	f0c0 80ab 	bcc.w	801aad6 <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801a980:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801a984:	9306      	str	r3, [sp, #24]
 801a986:	e0a6      	b.n	801aad6 <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag |= 0x80000000;
 801a988:	f041 4300 	orr.w	r3, r1, #2147483648	@ 0x80000000
 801a98c:	9306      	str	r3, [sp, #24]
 801a98e:	e0a2      	b.n	801aad6 <lfs_dir_fetchmatch+0x3ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801a990:	f000 0301 	and.w	r3, r0, #1
 801a994:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801a996:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801a998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801a99a:	2208      	movs	r2, #8
 801a99c:	9203      	str	r2, [sp, #12]
 801a99e:	aa0e      	add	r2, sp, #56	@ 0x38
 801a9a0:	9202      	str	r2, [sp, #8]
 801a9a2:	f8cd 8004 	str.w	r8, [sp, #4]
 801a9a6:	6832      	ldr	r2, [r6, #0]
 801a9a8:	9200      	str	r2, [sp, #0]
 801a9aa:	462a      	mov	r2, r5
 801a9ac:	2100      	movs	r1, #0
 801a9ae:	4628      	mov	r0, r5
 801a9b0:	f7fe ffea 	bl	8019988 <lfs_bd_read>
                if (err) {
 801a9b4:	2800      	cmp	r0, #0
 801a9b6:	f000 808e 	beq.w	801aad6 <lfs_dir_fetchmatch+0x3ea>
                    if (err == LFS_ERR_CORRUPT) {
 801a9ba:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a9be:	d101      	bne.n	801a9c4 <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 801a9c0:	2300      	movs	r3, #0
 801a9c2:	e73a      	b.n	801a83a <lfs_dir_fetchmatch+0x14e>
                    return err;
 801a9c4:	4683      	mov	fp, r0
 801a9c6:	e0f4      	b.n	801abb2 <lfs_dir_fetchmatch+0x4c6>
                hasfcrc = true;
 801a9c8:	2301      	movs	r3, #1
 801a9ca:	9308      	str	r3, [sp, #32]
 801a9cc:	e083      	b.n	801aad6 <lfs_dir_fetchmatch+0x3ea>
                    if (res == LFS_ERR_CORRUPT) {
 801a9ce:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801a9d2:	d101      	bne.n	801a9d8 <lfs_dir_fetchmatch+0x2ec>
        bool maybeerased = false;
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	e730      	b.n	801a83a <lfs_dir_fetchmatch+0x14e>
                    return res;
 801a9d8:	4683      	mov	fp, r0
 801a9da:	e0ea      	b.n	801abb2 <lfs_dir_fetchmatch+0x4c6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801a9dc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a9de:	9b06      	ldr	r3, [sp, #24]
 801a9e0:	469c      	mov	ip, r3
 801a9e2:	ea82 0103 	eor.w	r1, r2, r3
 801a9e6:	4b08      	ldr	r3, [pc, #32]	@ (801aa08 <lfs_dir_fetchmatch+0x31c>)
 801a9e8:	400b      	ands	r3, r1
 801a9ea:	b17b      	cbz	r3, 801aa0c <lfs_dir_fetchmatch+0x320>
                } else if (res == LFS_CMP_GT &&
 801a9ec:	2802      	cmp	r0, #2
 801a9ee:	d110      	bne.n	801aa12 <lfs_dir_fetchmatch+0x326>
    return (tag & 0x000ffc00) >> 10;
 801a9f0:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801a9f4:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801a9f8:	459c      	cmp	ip, r3
 801a9fa:	d30a      	bcc.n	801aa12 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag | 0x80000000;
 801a9fc:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801aa00:	9306      	str	r3, [sp, #24]
 801aa02:	e006      	b.n	801aa12 <lfs_dir_fetchmatch+0x326>
 801aa04:	08032e24 	.word	0x08032e24
 801aa08:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801aa0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aa10:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801aa12:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801aa14:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801aa18:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801aa1c:	bf14      	ite	ne
 801aa1e:	4643      	movne	r3, r8
 801aa20:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801aa24:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801aa28:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801aa2a:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801aa2c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801aa2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801aa30:	2204      	movs	r2, #4
 801aa32:	9203      	str	r2, [sp, #12]
 801aa34:	aa0c      	add	r2, sp, #48	@ 0x30
 801aa36:	9202      	str	r2, [sp, #8]
 801aa38:	9401      	str	r4, [sp, #4]
 801aa3a:	6832      	ldr	r2, [r6, #0]
 801aa3c:	9200      	str	r2, [sp, #0]
 801aa3e:	462a      	mov	r2, r5
 801aa40:	2100      	movs	r1, #0
 801aa42:	4628      	mov	r0, r5
 801aa44:	f7fe ffa0 	bl	8019988 <lfs_bd_read>
            if (err) {
 801aa48:	2800      	cmp	r0, #0
 801aa4a:	f47f aed2 	bne.w	801a7f2 <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801aa4e:	2204      	movs	r2, #4
 801aa50:	a90c      	add	r1, sp, #48	@ 0x30
 801aa52:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801aa54:	f003 fbac 	bl	801e1b0 <lfs_crc>
 801aa58:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801aa5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801aa5c:	ba1b      	rev	r3, r3
 801aa5e:	ea88 0a03 	eor.w	sl, r8, r3
 801aa62:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801aa66:	f1ba 0f00 	cmp.w	sl, #0
 801aa6a:	f6ff aec9 	blt.w	801a800 <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801aa6e:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801aa72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801aa76:	bf14      	ite	ne
 801aa78:	4652      	movne	r2, sl
 801aa7a:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801aa7e:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801aa82:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801aa84:	4421      	add	r1, r4
 801aa86:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801aa88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa8a:	4299      	cmp	r1, r3
 801aa8c:	d83a      	bhi.n	801ab04 <lfs_dir_fetchmatch+0x418>
    return (tag & 0x78000000) >> 20;
 801aa8e:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801aa92:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801aa96:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801aa9a:	f43f aebb 	beq.w	801a814 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801aa9e:	f104 0804 	add.w	r8, r4, #4
 801aaa2:	a90b      	add	r1, sp, #44	@ 0x2c
 801aaa4:	9103      	str	r1, [sp, #12]
 801aaa6:	9202      	str	r2, [sp, #8]
 801aaa8:	f8cd 8004 	str.w	r8, [sp, #4]
 801aaac:	6832      	ldr	r2, [r6, #0]
 801aaae:	9200      	str	r2, [sp, #0]
 801aab0:	462a      	mov	r2, r5
 801aab2:	2100      	movs	r1, #0
 801aab4:	4628      	mov	r0, r5
 801aab6:	f7ff fde7 	bl	801a688 <lfs_bd_crc>
            if (err) {
 801aaba:	2800      	cmp	r0, #0
 801aabc:	f47f af14 	bne.w	801a8e8 <lfs_dir_fetchmatch+0x1fc>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801aac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801aac2:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801aac4:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801aac8:	f47f af15 	bne.w	801a8f6 <lfs_dir_fetchmatch+0x20a>
    return (tag & 0x000ffc00) >> 10;
 801aacc:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801aad0:	429f      	cmp	r7, r3
 801aad2:	d800      	bhi.n	801aad6 <lfs_dir_fetchmatch+0x3ea>
                    tempcount = lfs_tag_id(tag) + 1;
 801aad4:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801aad6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801aad8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801aada:	404b      	eors	r3, r1
 801aadc:	9a05      	ldr	r2, [sp, #20]
 801aade:	4213      	tst	r3, r2
 801aae0:	d197      	bne.n	801aa12 <lfs_dir_fetchmatch+0x326>
                        dir->pair[0], off+sizeof(tag)});
 801aae2:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801aae4:	9314      	str	r3, [sp, #80]	@ 0x50
 801aae6:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801aaea:	aa14      	add	r2, sp, #80	@ 0x50
 801aaec:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801aaee:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801aaf0:	4798      	blx	r3
                if (res < 0) {
 801aaf2:	2800      	cmp	r0, #0
 801aaf4:	f6ff af6b 	blt.w	801a9ce <lfs_dir_fetchmatch+0x2e2>
                if (res == LFS_CMP_EQ) {
 801aaf8:	2800      	cmp	r0, #0
 801aafa:	f47f af6f 	bne.w	801a9dc <lfs_dir_fetchmatch+0x2f0>
                    tempbesttag = tag;
 801aafe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ab00:	9306      	str	r3, [sp, #24]
 801ab02:	e786      	b.n	801aa12 <lfs_dir_fetchmatch+0x326>
        bool maybeerased = false;
 801ab04:	2300      	movs	r3, #0
 801ab06:	e698      	b.n	801a83a <lfs_dir_fetchmatch+0x14e>
 801ab08:	2300      	movs	r3, #0
 801ab0a:	e696      	b.n	801a83a <lfs_dir_fetchmatch+0x14e>
    lfs_block_t t = pair[0];
 801ab0c:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801ab0e:	6872      	ldr	r2, [r6, #4]
 801ab10:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801ab12:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801ab14:	aa16      	add	r2, sp, #88	@ 0x58
 801ab16:	9b07      	ldr	r3, [sp, #28]
 801ab18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ab1c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801ab20:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801ab22:	f109 0901 	add.w	r9, r9, #1
 801ab26:	e648      	b.n	801a7ba <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801ab28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ab2c:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801ab2e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801ab30:	a90d      	add	r1, sp, #52	@ 0x34
 801ab32:	9103      	str	r1, [sp, #12]
 801ab34:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ab36:	9102      	str	r1, [sp, #8]
 801ab38:	9201      	str	r2, [sp, #4]
 801ab3a:	6832      	ldr	r2, [r6, #0]
 801ab3c:	9200      	str	r2, [sp, #0]
 801ab3e:	462a      	mov	r2, r5
 801ab40:	2100      	movs	r1, #0
 801ab42:	4628      	mov	r0, r5
 801ab44:	f7ff fda0 	bl	801a688 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801ab48:	b120      	cbz	r0, 801ab54 <lfs_dir_fetchmatch+0x468>
 801ab4a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801ab4e:	d001      	beq.n	801ab54 <lfs_dir_fetchmatch+0x468>
                    return err;
 801ab50:	4683      	mov	fp, r0
 801ab52:	e02e      	b.n	801abb2 <lfs_dir_fetchmatch+0x4c6>
                dir->erased = (fcrc_ == fcrc.crc);
 801ab54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ab56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ab58:	4293      	cmp	r3, r2
 801ab5a:	bf14      	ite	ne
 801ab5c:	2300      	movne	r3, #0
 801ab5e:	2301      	moveq	r3, #1
 801ab60:	75b3      	strb	r3, [r6, #22]
 801ab62:	e67c      	b.n	801a85e <lfs_dir_fetchmatch+0x172>
                besttag |= 0x80000000;
 801ab64:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801ab68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ab6a:	b13b      	cbz	r3, 801ab7c <lfs_dir_fetchmatch+0x490>
    return (tag & 0x000ffc00) >> 10;
 801ab6c:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801ab70:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801ab72:	4293      	cmp	r3, r2
 801ab74:	bf28      	it	cs
 801ab76:	4613      	movcs	r3, r2
 801ab78:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ab7a:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801ab7c:	f1bb 0f00 	cmp.w	fp, #0
 801ab80:	da17      	bge.n	801abb2 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x000ffc00) >> 10;
 801ab82:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801ab86:	8ab2      	ldrh	r2, [r6, #20]
 801ab88:	429a      	cmp	r2, r3
 801ab8a:	d902      	bls.n	801ab92 <lfs_dir_fetchmatch+0x4a6>
            return LFS_ERR_NOENT;
 801ab8c:	f06f 0b01 	mvn.w	fp, #1
 801ab90:	e00f      	b.n	801abb2 <lfs_dir_fetchmatch+0x4c6>
            return 0;
 801ab92:	f04f 0b00 	mov.w	fp, #0
 801ab96:	e00c      	b.n	801abb2 <lfs_dir_fetchmatch+0x4c6>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801ab98:	4b0b      	ldr	r3, [pc, #44]	@ (801abc8 <lfs_dir_fetchmatch+0x4dc>)
 801ab9a:	9301      	str	r3, [sp, #4]
 801ab9c:	6873      	ldr	r3, [r6, #4]
 801ab9e:	9300      	str	r3, [sp, #0]
 801aba0:	6833      	ldr	r3, [r6, #0]
 801aba2:	f240 5259 	movw	r2, #1369	@ 0x559
 801aba6:	4909      	ldr	r1, [pc, #36]	@ (801abcc <lfs_dir_fetchmatch+0x4e0>)
 801aba8:	4809      	ldr	r0, [pc, #36]	@ (801abd0 <lfs_dir_fetchmatch+0x4e4>)
 801abaa:	f00c fa7b 	bl	80270a4 <printf>
    return LFS_ERR_CORRUPT;
 801abae:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801abb2:	4658      	mov	r0, fp
 801abb4:	b017      	add	sp, #92	@ 0x5c
 801abb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801abba:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801abbe:	e7f8      	b.n	801abb2 <lfs_dir_fetchmatch+0x4c6>
 801abc0:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801abc4:	e7f5      	b.n	801abb2 <lfs_dir_fetchmatch+0x4c6>
 801abc6:	bf00      	nop
 801abc8:	08033984 	.word	0x08033984
 801abcc:	08035660 	.word	0x08035660
 801abd0:	080357e8 	.word	0x080357e8

0801abd4 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801abd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abd8:	b08a      	sub	sp, #40	@ 0x28
 801abda:	4681      	mov	r9, r0
 801abdc:	4688      	mov	r8, r1
 801abde:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801abe0:	2300      	movs	r3, #0
 801abe2:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801abe4:	2501      	movs	r5, #1
 801abe6:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801abe8:	4a29      	ldr	r2, [pc, #164]	@ (801ac90 <lfs_fs_parent+0xbc>)
 801abea:	ab05      	add	r3, sp, #20
 801abec:	e892 0003 	ldmia.w	r2, {r0, r1}
 801abf0:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801abf4:	46aa      	mov	sl, r5
    while (!lfs_pair_isnull(parent->tail)) {
 801abf6:	e03a      	b.n	801ac6e <lfs_fs_parent+0x9a>
            LFS_WARN("Cycle detected in tail list");
 801abf8:	4b26      	ldr	r3, [pc, #152]	@ (801ac94 <lfs_fs_parent+0xc0>)
 801abfa:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801abfe:	4926      	ldr	r1, [pc, #152]	@ (801ac98 <lfs_fs_parent+0xc4>)
 801ac00:	4826      	ldr	r0, [pc, #152]	@ (801ac9c <lfs_fs_parent+0xc8>)
 801ac02:	f00c fa4f 	bl	80270a4 <printf>
            return LFS_ERR_CORRUPT;
 801ac06:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801ac0a:	e03c      	b.n	801ac86 <lfs_fs_parent+0xb2>
            tortoise[0] = parent->tail[0];
 801ac0c:	9705      	str	r7, [sp, #20]
            tortoise[1] = parent->tail[1];
 801ac0e:	69e3      	ldr	r3, [r4, #28]
 801ac10:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 801ac12:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801ac16:	2500      	movs	r5, #0
 801ac18:	e00d      	b.n	801ac36 <lfs_fs_parent+0x62>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ac1a:	2301      	movs	r3, #1
 801ac1c:	e000      	b.n	801ac20 <lfs_fs_parent+0x4c>
 801ac1e:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 801ac20:	bb7b      	cbnz	r3, 801ac82 <lfs_fs_parent+0xae>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801ac22:	f104 0618 	add.w	r6, r4, #24
 801ac26:	a905      	add	r1, sp, #20
 801ac28:	4630      	mov	r0, r6
 801ac2a:	f7fe fce7 	bl	80195fc <lfs_pair_issync>
 801ac2e:	2800      	cmp	r0, #0
 801ac30:	d1e2      	bne.n	801abf8 <lfs_fs_parent+0x24>
        if (tortoise_i == tortoise_period) {
 801ac32:	4555      	cmp	r5, sl
 801ac34:	d0ea      	beq.n	801ac0c <lfs_fs_parent+0x38>
        tortoise_i += 1;
 801ac36:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801ac38:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801ac3c:	f8d8 3000 	ldr.w	r3, [r8]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801ac40:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801ac42:	f8d8 3004 	ldr.w	r3, [r8, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801ac46:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801ac48:	ab07      	add	r3, sp, #28
 801ac4a:	9303      	str	r3, [sp, #12]
 801ac4c:	4b14      	ldr	r3, [pc, #80]	@ (801aca0 <lfs_fs_parent+0xcc>)
 801ac4e:	9302      	str	r3, [sp, #8]
 801ac50:	2300      	movs	r3, #0
 801ac52:	9301      	str	r3, [sp, #4]
 801ac54:	4b13      	ldr	r3, [pc, #76]	@ (801aca4 <lfs_fs_parent+0xd0>)
 801ac56:	9300      	str	r3, [sp, #0]
 801ac58:	4b13      	ldr	r3, [pc, #76]	@ (801aca8 <lfs_fs_parent+0xd4>)
 801ac5a:	4632      	mov	r2, r6
 801ac5c:	4621      	mov	r1, r4
 801ac5e:	4648      	mov	r0, r9
 801ac60:	f7ff fd44 	bl	801a6ec <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801ac64:	4603      	mov	r3, r0
 801ac66:	b110      	cbz	r0, 801ac6e <lfs_fs_parent+0x9a>
 801ac68:	f110 0f02 	cmn.w	r0, #2
 801ac6c:	d10b      	bne.n	801ac86 <lfs_fs_parent+0xb2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ac6e:	69a7      	ldr	r7, [r4, #24]
 801ac70:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801ac74:	d0d3      	beq.n	801ac1e <lfs_fs_parent+0x4a>
 801ac76:	69e3      	ldr	r3, [r4, #28]
 801ac78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ac7c:	d0cd      	beq.n	801ac1a <lfs_fs_parent+0x46>
 801ac7e:	2300      	movs	r3, #0
 801ac80:	e7ce      	b.n	801ac20 <lfs_fs_parent+0x4c>
    return LFS_ERR_NOENT;
 801ac82:	f06f 0301 	mvn.w	r3, #1
}
 801ac86:	4618      	mov	r0, r3
 801ac88:	b00a      	add	sp, #40	@ 0x28
 801ac8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac8e:	bf00      	nop
 801ac90:	08032e24 	.word	0x08032e24
 801ac94:	08033984 	.word	0x08033984
 801ac98:	08035660 	.word	0x08035660
 801ac9c:	08035820 	.word	0x08035820
 801aca0:	08019dbd 	.word	0x08019dbd
 801aca4:	20000008 	.word	0x20000008
 801aca8:	7ff003ff 	.word	0x7ff003ff

0801acac <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801acac:	b500      	push	{lr}
 801acae:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801acb0:	2300      	movs	r3, #0
 801acb2:	9303      	str	r3, [sp, #12]
 801acb4:	9302      	str	r3, [sp, #8]
 801acb6:	9301      	str	r3, [sp, #4]
 801acb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801acbc:	9300      	str	r3, [sp, #0]
 801acbe:	f7ff fd15 	bl	801a6ec <lfs_dir_fetchmatch>
}
 801acc2:	b005      	add	sp, #20
 801acc4:	f85d fb04 	ldr.w	pc, [sp], #4

0801acc8 <lfs_fs_traverse_>:
        bool includeorphans) {
 801acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801accc:	b093      	sub	sp, #76	@ 0x4c
 801acce:	4606      	mov	r6, r0
 801acd0:	460f      	mov	r7, r1
 801acd2:	4690      	mov	r8, r2
 801acd4:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801acd6:	2220      	movs	r2, #32
 801acd8:	2100      	movs	r1, #0
 801acda:	a80a      	add	r0, sp, #40	@ 0x28
 801acdc:	f00e ff00 	bl	8029ae0 <memset>
 801ace0:	2501      	movs	r5, #1
 801ace2:	9511      	str	r5, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801ace4:	4a62      	ldr	r2, [pc, #392]	@ (801ae70 <lfs_fs_traverse_+0x1a8>)
 801ace6:	ab08      	add	r3, sp, #32
 801ace8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801acec:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801acf0:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801acf2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801acf4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801acf8:	f000 8081 	beq.w	801adfe <lfs_fs_traverse_+0x136>
 801acfc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801acfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ad02:	d07a      	beq.n	801adfa <lfs_fs_traverse_+0x132>
 801ad04:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	d17b      	bne.n	801ae02 <lfs_fs_traverse_+0x13a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801ad0a:	a908      	add	r1, sp, #32
 801ad0c:	a810      	add	r0, sp, #64	@ 0x40
 801ad0e:	f7fe fc75 	bl	80195fc <lfs_pair_issync>
 801ad12:	b988      	cbnz	r0, 801ad38 <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801ad14:	4555      	cmp	r5, sl
 801ad16:	d019      	beq.n	801ad4c <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801ad18:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 801ad1a:	2400      	movs	r4, #0
 801ad1c:	2c01      	cmp	r4, #1
 801ad1e:	dc1c      	bgt.n	801ad5a <lfs_fs_traverse_+0x92>
            int err = cb(data, dir.tail[i]);
 801ad20:	1da3      	adds	r3, r4, #6
 801ad22:	aa12      	add	r2, sp, #72	@ 0x48
 801ad24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ad28:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801ad2c:	4640      	mov	r0, r8
 801ad2e:	47b8      	blx	r7
            if (err) {
 801ad30:	4603      	mov	r3, r0
 801ad32:	b9f8      	cbnz	r0, 801ad74 <lfs_fs_traverse_+0xac>
        for (int i = 0; i < 2; i++) {
 801ad34:	3401      	adds	r4, #1
 801ad36:	e7f1      	b.n	801ad1c <lfs_fs_traverse_+0x54>
            LFS_WARN("Cycle detected in tail list");
 801ad38:	4b4e      	ldr	r3, [pc, #312]	@ (801ae74 <lfs_fs_traverse_+0x1ac>)
 801ad3a:	f241 2222 	movw	r2, #4642	@ 0x1222
 801ad3e:	494e      	ldr	r1, [pc, #312]	@ (801ae78 <lfs_fs_traverse_+0x1b0>)
 801ad40:	484e      	ldr	r0, [pc, #312]	@ (801ae7c <lfs_fs_traverse_+0x1b4>)
 801ad42:	f00c f9af 	bl	80270a4 <printf>
            return LFS_ERR_CORRUPT;
 801ad46:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801ad4a:	e013      	b.n	801ad74 <lfs_fs_traverse_+0xac>
            tortoise[0] = dir.tail[0];
 801ad4c:	9408      	str	r4, [sp, #32]
            tortoise[1] = dir.tail[1];
 801ad4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ad50:	9309      	str	r3, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801ad52:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801ad56:	2500      	movs	r5, #0
 801ad58:	e7de      	b.n	801ad18 <lfs_fs_traverse_+0x50>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801ad5a:	aa10      	add	r2, sp, #64	@ 0x40
 801ad5c:	a90a      	add	r1, sp, #40	@ 0x28
 801ad5e:	4630      	mov	r0, r6
 801ad60:	f7ff ffa4 	bl	801acac <lfs_dir_fetch>
        if (err) {
 801ad64:	9005      	str	r0, [sp, #20]
 801ad66:	2800      	cmp	r0, #0
 801ad68:	d17f      	bne.n	801ae6a <lfs_fs_traverse_+0x1a2>
        for (uint16_t id = 0; id < dir.count; id++) {
 801ad6a:	2400      	movs	r4, #0
 801ad6c:	e016      	b.n	801ad9c <lfs_fs_traverse_+0xd4>
                if (tag == LFS_ERR_NOENT) {
 801ad6e:	f113 0f02 	cmn.w	r3, #2
 801ad72:	d011      	beq.n	801ad98 <lfs_fs_traverse_+0xd0>
}
 801ad74:	4618      	mov	r0, r3
 801ad76:	b013      	add	sp, #76	@ 0x4c
 801ad78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801ad7c:	f8cd 8008 	str.w	r8, [sp, #8]
 801ad80:	9701      	str	r7, [sp, #4]
 801ad82:	9b07      	ldr	r3, [sp, #28]
 801ad84:	9300      	str	r3, [sp, #0]
 801ad86:	9b06      	ldr	r3, [sp, #24]
 801ad88:	4632      	mov	r2, r6
 801ad8a:	2100      	movs	r1, #0
 801ad8c:	4630      	mov	r0, r6
 801ad8e:	f7fe ffc9 	bl	8019d24 <lfs_ctz_traverse>
                if (err) {
 801ad92:	4603      	mov	r3, r0
 801ad94:	2800      	cmp	r0, #0
 801ad96:	d1ed      	bne.n	801ad74 <lfs_fs_traverse_+0xac>
        for (uint16_t id = 0; id < dir.count; id++) {
 801ad98:	3401      	adds	r4, #1
 801ad9a:	b2a4      	uxth	r4, r4
 801ad9c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801ada0:	42a3      	cmp	r3, r4
 801ada2:	d9a6      	bls.n	801acf2 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801ada4:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801ada6:	aa06      	add	r2, sp, #24
 801ada8:	9200      	str	r2, [sp, #0]
 801adaa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801adae:	f043 0308 	orr.w	r3, r3, #8
 801adb2:	4a33      	ldr	r2, [pc, #204]	@ (801ae80 <lfs_fs_traverse_+0x1b8>)
 801adb4:	a90a      	add	r1, sp, #40	@ 0x28
 801adb6:	4630      	mov	r0, r6
 801adb8:	f7fe ff8a 	bl	8019cd0 <lfs_dir_get>
            if (tag < 0) {
 801adbc:	1e03      	subs	r3, r0, #0
 801adbe:	dbd6      	blt.n	801ad6e <lfs_fs_traverse_+0xa6>
    return (tag & 0x7ff00000) >> 20;
 801adc0:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801adc4:	f240 2202 	movw	r2, #514	@ 0x202
 801adc8:	4293      	cmp	r3, r2
 801adca:	d0d7      	beq.n	801ad7c <lfs_fs_traverse_+0xb4>
            } else if (includeorphans &&
 801adcc:	f1b9 0f00 	cmp.w	r9, #0
 801add0:	d0e2      	beq.n	801ad98 <lfs_fs_traverse_+0xd0>
 801add2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801add6:	d1df      	bne.n	801ad98 <lfs_fs_traverse_+0xd0>
                for (int i = 0; i < 2; i++) {
 801add8:	f8dd b014 	ldr.w	fp, [sp, #20]
 801addc:	e001      	b.n	801ade2 <lfs_fs_traverse_+0x11a>
 801adde:	f10b 0b01 	add.w	fp, fp, #1
 801ade2:	f1bb 0f01 	cmp.w	fp, #1
 801ade6:	dcd7      	bgt.n	801ad98 <lfs_fs_traverse_+0xd0>
                    err = cb(data, (&ctz.head)[i]);
 801ade8:	ab06      	add	r3, sp, #24
 801adea:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801adee:	4640      	mov	r0, r8
 801adf0:	47b8      	blx	r7
                    if (err) {
 801adf2:	4603      	mov	r3, r0
 801adf4:	2800      	cmp	r0, #0
 801adf6:	d0f2      	beq.n	801adde <lfs_fs_traverse_+0x116>
 801adf8:	e7bc      	b.n	801ad74 <lfs_fs_traverse_+0xac>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801adfa:	2301      	movs	r3, #1
 801adfc:	e783      	b.n	801ad06 <lfs_fs_traverse_+0x3e>
 801adfe:	2301      	movs	r3, #1
 801ae00:	e781      	b.n	801ad06 <lfs_fs_traverse_+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801ae02:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801ae04:	e00f      	b.n	801ae26 <lfs_fs_traverse_+0x15e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801ae06:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ae08:	f8cd 8008 	str.w	r8, [sp, #8]
 801ae0c:	9701      	str	r7, [sp, #4]
 801ae0e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801ae10:	9200      	str	r2, [sp, #0]
 801ae12:	4632      	mov	r2, r6
 801ae14:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801ae18:	4630      	mov	r0, r6
 801ae1a:	f7fe ff83 	bl	8019d24 <lfs_ctz_traverse>
            if (err) {
 801ae1e:	4603      	mov	r3, r0
 801ae20:	b158      	cbz	r0, 801ae3a <lfs_fs_traverse_+0x172>
 801ae22:	e7a7      	b.n	801ad74 <lfs_fs_traverse_+0xac>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801ae24:	6824      	ldr	r4, [r4, #0]
 801ae26:	b1f4      	cbz	r4, 801ae66 <lfs_fs_traverse_+0x19e>
        if (f->type != LFS_TYPE_REG) {
 801ae28:	79a3      	ldrb	r3, [r4, #6]
 801ae2a:	2b01      	cmp	r3, #1
 801ae2c:	d1fa      	bne.n	801ae24 <lfs_fs_traverse_+0x15c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801ae2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ae30:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801ae34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ae38:	d0e5      	beq.n	801ae06 <lfs_fs_traverse_+0x13e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801ae3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ae3c:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801ae40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ae44:	d1ee      	bne.n	801ae24 <lfs_fs_traverse_+0x15c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801ae46:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801ae48:	f8cd 8008 	str.w	r8, [sp, #8]
 801ae4c:	9701      	str	r7, [sp, #4]
 801ae4e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801ae50:	9200      	str	r2, [sp, #0]
 801ae52:	4632      	mov	r2, r6
 801ae54:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801ae58:	4630      	mov	r0, r6
 801ae5a:	f7fe ff63 	bl	8019d24 <lfs_ctz_traverse>
            if (err) {
 801ae5e:	4603      	mov	r3, r0
 801ae60:	2800      	cmp	r0, #0
 801ae62:	d0df      	beq.n	801ae24 <lfs_fs_traverse_+0x15c>
 801ae64:	e786      	b.n	801ad74 <lfs_fs_traverse_+0xac>
    return 0;
 801ae66:	2300      	movs	r3, #0
 801ae68:	e784      	b.n	801ad74 <lfs_fs_traverse_+0xac>
            return err;
 801ae6a:	9b05      	ldr	r3, [sp, #20]
 801ae6c:	e782      	b.n	801ad74 <lfs_fs_traverse_+0xac>
 801ae6e:	bf00      	nop
 801ae70:	08032e24 	.word	0x08032e24
 801ae74:	08033984 	.word	0x08033984
 801ae78:	08035660 	.word	0x08035660
 801ae7c:	08035820 	.word	0x08035820
 801ae80:	700ffc00 	.word	0x700ffc00

0801ae84 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801ae84:	b538      	push	{r3, r4, r5, lr}
 801ae86:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801ae88:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801ae8a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801ae8c:	4413      	add	r3, r2
            % lfs->block_count;
 801ae8e:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801ae90:	fbb3 f1f2 	udiv	r1, r3, r2
 801ae94:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801ae98:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801ae9a:	2100      	movs	r1, #0
 801ae9c:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801ae9e:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801aea0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801aea2:	00db      	lsls	r3, r3, #3
 801aea4:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801aea6:	4283      	cmp	r3, r0
 801aea8:	bf28      	it	cs
 801aeaa:	4603      	movcs	r3, r0
 801aeac:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801aeae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801aeb0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801aeb2:	f00e fe15 	bl	8029ae0 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801aeb6:	2301      	movs	r3, #1
 801aeb8:	4622      	mov	r2, r4
 801aeba:	4906      	ldr	r1, [pc, #24]	@ (801aed4 <lfs_alloc_scan+0x50>)
 801aebc:	4620      	mov	r0, r4
 801aebe:	f7ff ff03 	bl	801acc8 <lfs_fs_traverse_>
    if (err) {
 801aec2:	4605      	mov	r5, r0
 801aec4:	b908      	cbnz	r0, 801aeca <lfs_alloc_scan+0x46>
}
 801aec6:	4628      	mov	r0, r5
 801aec8:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801aeca:	4620      	mov	r0, r4
 801aecc:	f7fe fc15 	bl	80196fa <lfs_alloc_drop>
        return err;
 801aed0:	e7f9      	b.n	801aec6 <lfs_alloc_scan+0x42>
 801aed2:	bf00      	nop
 801aed4:	08019709 	.word	0x08019709

0801aed8 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801aed8:	b530      	push	{r4, r5, lr}
 801aeda:	b083      	sub	sp, #12
 801aedc:	4604      	mov	r4, r0
 801aede:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801aee0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801aee2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801aee4:	4293      	cmp	r3, r2
 801aee6:	d22b      	bcs.n	801af40 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801aee8:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801aeea:	08da      	lsrs	r2, r3, #3
 801aeec:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801aeee:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801aef2:	40ca      	lsrs	r2, r1
 801aef4:	f012 0f01 	tst.w	r2, #1
 801aef8:	d005      	beq.n	801af06 <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801aefa:	3301      	adds	r3, #1
 801aefc:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801aefe:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801af00:	3b01      	subs	r3, #1
 801af02:	6623      	str	r3, [r4, #96]	@ 0x60
 801af04:	e7ec      	b.n	801aee0 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801af06:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801af08:	4413      	add	r3, r2
                        % lfs->block_count;
 801af0a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801af0c:	fbb3 f1f2 	udiv	r1, r3, r2
 801af10:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801af14:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801af16:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801af18:	3301      	adds	r3, #1
 801af1a:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801af1c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801af1e:	3a01      	subs	r2, #1
 801af20:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801af22:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801af24:	4293      	cmp	r3, r2
 801af26:	d225      	bcs.n	801af74 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801af28:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801af2a:	08da      	lsrs	r2, r3, #3
 801af2c:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801af2e:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801af32:	fa22 f303 	lsr.w	r3, r2, r3
 801af36:	f013 0f01 	tst.w	r3, #1
 801af3a:	d1ec      	bne.n	801af16 <lfs_alloc+0x3e>
                        return 0;
 801af3c:	2000      	movs	r0, #0
 801af3e:	e01a      	b.n	801af76 <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801af40:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801af42:	b12a      	cbz	r2, 801af50 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801af44:	4620      	mov	r0, r4
 801af46:	f7ff ff9d 	bl	801ae84 <lfs_alloc_scan>
        if(err) {
 801af4a:	2800      	cmp	r0, #0
 801af4c:	d0c8      	beq.n	801aee0 <lfs_alloc+0x8>
 801af4e:	e012      	b.n	801af76 <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801af50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801af52:	4413      	add	r3, r2
 801af54:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801af56:	fbb3 f1f2 	udiv	r1, r3, r2
 801af5a:	4808      	ldr	r0, [pc, #32]	@ (801af7c <lfs_alloc+0xa4>)
 801af5c:	9000      	str	r0, [sp, #0]
 801af5e:	fb02 3311 	mls	r3, r2, r1, r3
 801af62:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801af66:	4906      	ldr	r1, [pc, #24]	@ (801af80 <lfs_alloc+0xa8>)
 801af68:	4806      	ldr	r0, [pc, #24]	@ (801af84 <lfs_alloc+0xac>)
 801af6a:	f00c f89b 	bl	80270a4 <printf>
            return LFS_ERR_NOSPC;
 801af6e:	f06f 001b 	mvn.w	r0, #27
 801af72:	e000      	b.n	801af76 <lfs_alloc+0x9e>
                        return 0;
 801af74:	2000      	movs	r0, #0
}
 801af76:	b003      	add	sp, #12
 801af78:	bd30      	pop	{r4, r5, pc}
 801af7a:	bf00      	nop
 801af7c:	08033984 	.word	0x08033984
 801af80:	08035660 	.word	0x08035660
 801af84:	0803584c 	.word	0x0803584c

0801af88 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801af88:	b570      	push	{r4, r5, r6, lr}
 801af8a:	b084      	sub	sp, #16
 801af8c:	4606      	mov	r6, r0
 801af8e:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801af90:	2500      	movs	r5, #0
 801af92:	2d01      	cmp	r5, #1
 801af94:	dc0d      	bgt.n	801afb2 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801af96:	3501      	adds	r5, #1
 801af98:	f005 0101 	and.w	r1, r5, #1
 801af9c:	bf48      	it	mi
 801af9e:	4249      	negmi	r1, r1
 801afa0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801afa4:	4630      	mov	r0, r6
 801afa6:	f7ff ff97 	bl	801aed8 <lfs_alloc>
        if (err) {
 801afaa:	4603      	mov	r3, r0
 801afac:	2800      	cmp	r0, #0
 801afae:	d0f0      	beq.n	801af92 <lfs_dir_alloc+0xa>
 801afb0:	e02d      	b.n	801b00e <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801afb2:	2100      	movs	r1, #0
 801afb4:	4622      	mov	r2, r4
 801afb6:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801afba:	2304      	movs	r3, #4
 801afbc:	9303      	str	r3, [sp, #12]
 801afbe:	9202      	str	r2, [sp, #8]
 801afc0:	9101      	str	r1, [sp, #4]
 801afc2:	6822      	ldr	r2, [r4, #0]
 801afc4:	9200      	str	r2, [sp, #0]
 801afc6:	4632      	mov	r2, r6
 801afc8:	4630      	mov	r0, r6
 801afca:	f7fe fcdd 	bl	8019988 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801afce:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801afd0:	4603      	mov	r3, r0
 801afd2:	b110      	cbz	r0, 801afda <lfs_dir_alloc+0x52>
 801afd4:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801afd8:	d119      	bne.n	801b00e <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801afda:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801afdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afde:	2b00      	cmp	r3, #0
 801afe0:	dd0a      	ble.n	801aff8 <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801afe2:	3301      	adds	r3, #1
 801afe4:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801afe8:	1853      	adds	r3, r2, r1
 801afea:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801afec:	fbb3 f2f1 	udiv	r2, r3, r1
 801aff0:	fb01 3212 	mls	r2, r1, r2, r3
 801aff4:	1a9b      	subs	r3, r3, r2
 801aff6:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801aff8:	2304      	movs	r3, #4
 801affa:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801affc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b000:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801b002:	2300      	movs	r3, #0
 801b004:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801b006:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801b008:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801b00a:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801b00c:	75e3      	strb	r3, [r4, #23]
}
 801b00e:	4618      	mov	r0, r3
 801b010:	b004      	add	sp, #16
 801b012:	bd70      	pop	{r4, r5, r6, pc}

0801b014 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801b014:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b016:	b089      	sub	sp, #36	@ 0x24
 801b018:	4605      	mov	r5, r0
 801b01a:	460e      	mov	r6, r1
 801b01c:	e053      	b.n	801b0c6 <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801b01e:	2201      	movs	r2, #1
 801b020:	9203      	str	r2, [sp, #12]
 801b022:	f10d 021b 	add.w	r2, sp, #27
 801b026:	9202      	str	r2, [sp, #8]
 801b028:	9401      	str	r4, [sp, #4]
 801b02a:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801b02c:	9200      	str	r2, [sp, #0]
 801b02e:	1b1b      	subs	r3, r3, r4
 801b030:	462a      	mov	r2, r5
 801b032:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801b036:	4628      	mov	r0, r5
 801b038:	f7fe fca6 	bl	8019988 <lfs_bd_read>
                if (err) {
 801b03c:	2800      	cmp	r0, #0
 801b03e:	d152      	bne.n	801b0e6 <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801b040:	2301      	movs	r3, #1
 801b042:	9303      	str	r3, [sp, #12]
 801b044:	f10d 021b 	add.w	r2, sp, #27
 801b048:	9202      	str	r2, [sp, #8]
 801b04a:	9401      	str	r4, [sp, #4]
 801b04c:	9a07      	ldr	r2, [sp, #28]
 801b04e:	9200      	str	r2, [sp, #0]
 801b050:	462a      	mov	r2, r5
 801b052:	f105 0110 	add.w	r1, r5, #16
 801b056:	4628      	mov	r0, r5
 801b058:	f7ff f992 	bl	801a380 <lfs_bd_prog>
            if (err) {
 801b05c:	bb20      	cbnz	r0, 801b0a8 <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801b05e:	3401      	adds	r4, #1
 801b060:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801b062:	42a3      	cmp	r3, r4
 801b064:	d945      	bls.n	801b0f2 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801b066:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801b068:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801b06c:	d0d7      	beq.n	801b01e <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801b06e:	88b2      	ldrh	r2, [r6, #4]
 801b070:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801b072:	2101      	movs	r1, #1
 801b074:	9105      	str	r1, [sp, #20]
 801b076:	f10d 011b 	add.w	r1, sp, #27
 801b07a:	9104      	str	r1, [sp, #16]
 801b07c:	9403      	str	r4, [sp, #12]
 801b07e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801b082:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801b086:	9202      	str	r2, [sp, #8]
 801b088:	4a27      	ldr	r2, [pc, #156]	@ (801b128 <lfs_file_relocate+0x114>)
 801b08a:	9201      	str	r2, [sp, #4]
 801b08c:	1b1b      	subs	r3, r3, r4
 801b08e:	9300      	str	r3, [sp, #0]
 801b090:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801b094:	2200      	movs	r2, #0
 801b096:	f106 0108 	add.w	r1, r6, #8
 801b09a:	4628      	mov	r0, r5
 801b09c:	f7ff f84c 	bl	801a138 <lfs_dir_getread>
                if (err) {
 801b0a0:	2800      	cmp	r0, #0
 801b0a2:	d0cd      	beq.n	801b040 <lfs_file_relocate+0x2c>
                    return err;
 801b0a4:	4607      	mov	r7, r0
 801b0a6:	e03b      	b.n	801b120 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801b0a8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b0ac:	d11d      	bne.n	801b0ea <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801b0ae:	4b1f      	ldr	r3, [pc, #124]	@ (801b12c <lfs_file_relocate+0x118>)
 801b0b0:	9300      	str	r3, [sp, #0]
 801b0b2:	9b07      	ldr	r3, [sp, #28]
 801b0b4:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801b0b8:	491d      	ldr	r1, [pc, #116]	@ (801b130 <lfs_file_relocate+0x11c>)
 801b0ba:	481e      	ldr	r0, [pc, #120]	@ (801b134 <lfs_file_relocate+0x120>)
 801b0bc:	f00b fff2 	bl	80270a4 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801b0c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b0c4:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801b0c6:	a907      	add	r1, sp, #28
 801b0c8:	4628      	mov	r0, r5
 801b0ca:	f7ff ff05 	bl	801aed8 <lfs_alloc>
        if (err) {
 801b0ce:	4607      	mov	r7, r0
 801b0d0:	bb30      	cbnz	r0, 801b120 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801b0d2:	9907      	ldr	r1, [sp, #28]
 801b0d4:	4628      	mov	r0, r5
 801b0d6:	f7fe fbdd 	bl	8019894 <lfs_bd_erase>
        if (err) {
 801b0da:	4607      	mov	r7, r0
 801b0dc:	b138      	cbz	r0, 801b0ee <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801b0de:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b0e2:	d0e4      	beq.n	801b0ae <lfs_file_relocate+0x9a>
 801b0e4:	e01c      	b.n	801b120 <lfs_file_relocate+0x10c>
                    return err;
 801b0e6:	4607      	mov	r7, r0
 801b0e8:	e01a      	b.n	801b120 <lfs_file_relocate+0x10c>
                return err;
 801b0ea:	4607      	mov	r7, r0
 801b0ec:	e018      	b.n	801b120 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801b0ee:	2400      	movs	r4, #0
 801b0f0:	e7b6      	b.n	801b060 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801b0f2:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801b0f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b0f6:	69e9      	ldr	r1, [r5, #28]
 801b0f8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801b0fa:	f00f ff2d 	bl	802af58 <memcpy>
        file->cache.block = lfs->pcache.block;
 801b0fe:	692b      	ldr	r3, [r5, #16]
 801b100:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801b102:	696b      	ldr	r3, [r5, #20]
 801b104:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801b106:	69ab      	ldr	r3, [r5, #24]
 801b108:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801b10a:	f105 0110 	add.w	r1, r5, #16
 801b10e:	4628      	mov	r0, r5
 801b110:	f7fe fc10 	bl	8019934 <lfs_cache_zero>
        file->block = nblock;
 801b114:	9b07      	ldr	r3, [sp, #28]
 801b116:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801b118:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801b11a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b11e:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801b120:	4638      	mov	r0, r7
 801b122:	b009      	add	sp, #36	@ 0x24
 801b124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b126:	bf00      	nop
 801b128:	fff7fc00 	.word	0xfff7fc00
 801b12c:	08033984 	.word	0x08033984
 801b130:	08035660 	.word	0x08035660
 801b134:	08035878 	.word	0x08035878

0801b138 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801b138:	b538      	push	{r3, r4, r5, lr}
 801b13a:	4605      	mov	r5, r0
 801b13c:	460c      	mov	r4, r1
    file->off = file->pos;
 801b13e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801b140:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801b142:	f7fe fad7 	bl	80196f4 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801b146:	4621      	mov	r1, r4
 801b148:	4628      	mov	r0, r5
 801b14a:	f7ff ff63 	bl	801b014 <lfs_file_relocate>
    if (err) {
 801b14e:	b918      	cbnz	r0, 801b158 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801b150:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b152:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801b156:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801b158:	bd38      	pop	{r3, r4, r5, pc}
	...

0801b15c <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801b15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b160:	b08b      	sub	sp, #44	@ 0x2c
 801b162:	4605      	mov	r5, r0
 801b164:	460f      	mov	r7, r1
 801b166:	4616      	mov	r6, r2
 801b168:	9305      	str	r3, [sp, #20]
 801b16a:	e04d      	b.n	801b208 <lfs_ctz_extend+0xac>
            if (size == 0) {
 801b16c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d032      	beq.n	801b1d8 <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801b172:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b174:	3b01      	subs	r3, #1
 801b176:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801b178:	a908      	add	r1, sp, #32
 801b17a:	4628      	mov	r0, r5
 801b17c:	f7fe fbe6 	bl	801994c <lfs_ctz_index>
            noff = noff + 1;
 801b180:	9b08      	ldr	r3, [sp, #32]
 801b182:	3301      	adds	r3, #1
 801b184:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801b186:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801b188:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801b18a:	4293      	cmp	r3, r2
 801b18c:	d05b      	beq.n	801b246 <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801b18e:	2400      	movs	r4, #0
 801b190:	46b9      	mov	r9, r7
 801b192:	9f05      	ldr	r7, [sp, #20]
 801b194:	9b08      	ldr	r3, [sp, #32]
 801b196:	42a3      	cmp	r3, r4
 801b198:	d94a      	bls.n	801b230 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801b19a:	2201      	movs	r2, #1
 801b19c:	9203      	str	r2, [sp, #12]
 801b19e:	aa09      	add	r2, sp, #36	@ 0x24
 801b1a0:	9202      	str	r2, [sp, #8]
 801b1a2:	9401      	str	r4, [sp, #4]
 801b1a4:	9700      	str	r7, [sp, #0]
 801b1a6:	1b1b      	subs	r3, r3, r4
 801b1a8:	4632      	mov	r2, r6
 801b1aa:	2100      	movs	r1, #0
 801b1ac:	4628      	mov	r0, r5
 801b1ae:	f7fe fbeb 	bl	8019988 <lfs_bd_read>
                    if (err) {
 801b1b2:	4603      	mov	r3, r0
 801b1b4:	2800      	cmp	r0, #0
 801b1b6:	d139      	bne.n	801b22c <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801b1b8:	2301      	movs	r3, #1
 801b1ba:	9303      	str	r3, [sp, #12]
 801b1bc:	aa09      	add	r2, sp, #36	@ 0x24
 801b1be:	9202      	str	r2, [sp, #8]
 801b1c0:	9401      	str	r4, [sp, #4]
 801b1c2:	9a07      	ldr	r2, [sp, #28]
 801b1c4:	9200      	str	r2, [sp, #0]
 801b1c6:	4632      	mov	r2, r6
 801b1c8:	4649      	mov	r1, r9
 801b1ca:	4628      	mov	r0, r5
 801b1cc:	f7ff f8d8 	bl	801a380 <lfs_bd_prog>
                    if (err) {
 801b1d0:	4603      	mov	r3, r0
 801b1d2:	b948      	cbnz	r0, 801b1e8 <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801b1d4:	3401      	adds	r4, #1
 801b1d6:	e7dd      	b.n	801b194 <lfs_ctz_extend+0x38>
                *block = nblock;
 801b1d8:	4682      	mov	sl, r0
 801b1da:	9b07      	ldr	r3, [sp, #28]
 801b1dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b1de:	6013      	str	r3, [r2, #0]
                *off = 0;
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b1e4:	6013      	str	r3, [r2, #0]
                return 0;
 801b1e6:	e02a      	b.n	801b23e <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801b1e8:	464f      	mov	r7, r9
 801b1ea:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b1ee:	d11d      	bne.n	801b22c <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801b1f0:	4b36      	ldr	r3, [pc, #216]	@ (801b2cc <lfs_ctz_extend+0x170>)
 801b1f2:	9300      	str	r3, [sp, #0]
 801b1f4:	9b07      	ldr	r3, [sp, #28]
 801b1f6:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801b1fa:	4935      	ldr	r1, [pc, #212]	@ (801b2d0 <lfs_ctz_extend+0x174>)
 801b1fc:	4835      	ldr	r0, [pc, #212]	@ (801b2d4 <lfs_ctz_extend+0x178>)
 801b1fe:	f00b ff51 	bl	80270a4 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801b202:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b206:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801b208:	a907      	add	r1, sp, #28
 801b20a:	4628      	mov	r0, r5
 801b20c:	f7ff fe64 	bl	801aed8 <lfs_alloc>
        if (err) {
 801b210:	2800      	cmp	r0, #0
 801b212:	d159      	bne.n	801b2c8 <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801b214:	9907      	ldr	r1, [sp, #28]
 801b216:	4628      	mov	r0, r5
 801b218:	f7fe fb3c 	bl	8019894 <lfs_bd_erase>
            if (err) {
 801b21c:	4680      	mov	r8, r0
 801b21e:	2800      	cmp	r0, #0
 801b220:	d0a4      	beq.n	801b16c <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801b222:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b226:	d0e3      	beq.n	801b1f0 <lfs_ctz_extend+0x94>
 801b228:	4682      	mov	sl, r0
 801b22a:	e008      	b.n	801b23e <lfs_ctz_extend+0xe2>
                        return err;
 801b22c:	469a      	mov	sl, r3
 801b22e:	e006      	b.n	801b23e <lfs_ctz_extend+0xe2>
                *block = nblock;
 801b230:	46c2      	mov	sl, r8
 801b232:	9b07      	ldr	r3, [sp, #28]
 801b234:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b236:	6013      	str	r3, [r2, #0]
                *off = noff;
 801b238:	9b08      	ldr	r3, [sp, #32]
 801b23a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b23c:	6013      	str	r3, [r2, #0]
}
 801b23e:	4650      	mov	r0, sl
 801b240:	b00b      	add	sp, #44	@ 0x2c
 801b242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801b246:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801b248:	fa90 f9a0 	rbit	r9, r0
 801b24c:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801b250:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801b254:	9b05      	ldr	r3, [sp, #20]
 801b256:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801b258:	2400      	movs	r4, #0
 801b25a:	46ab      	mov	fp, r5
 801b25c:	e006      	b.n	801b26c <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801b25e:	465d      	mov	r5, fp
 801b260:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b264:	d0c4      	beq.n	801b1f0 <lfs_ctz_extend+0x94>
                    return err;
 801b266:	4682      	mov	sl, r0
 801b268:	e7e9      	b.n	801b23e <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801b26a:	3401      	adds	r4, #1
 801b26c:	4554      	cmp	r4, sl
 801b26e:	d221      	bcs.n	801b2b4 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801b270:	00a5      	lsls	r5, r4, #2
 801b272:	2304      	movs	r3, #4
 801b274:	9303      	str	r3, [sp, #12]
 801b276:	ab09      	add	r3, sp, #36	@ 0x24
 801b278:	9302      	str	r3, [sp, #8]
 801b27a:	9501      	str	r5, [sp, #4]
 801b27c:	9b07      	ldr	r3, [sp, #28]
 801b27e:	9300      	str	r3, [sp, #0]
 801b280:	2301      	movs	r3, #1
 801b282:	4632      	mov	r2, r6
 801b284:	4639      	mov	r1, r7
 801b286:	4658      	mov	r0, fp
 801b288:	f7ff f87a 	bl	801a380 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801b28c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801b28e:	2800      	cmp	r0, #0
 801b290:	d1e5      	bne.n	801b25e <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801b292:	454c      	cmp	r4, r9
 801b294:	d0e9      	beq.n	801b26a <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801b296:	2304      	movs	r3, #4
 801b298:	9303      	str	r3, [sp, #12]
 801b29a:	a909      	add	r1, sp, #36	@ 0x24
 801b29c:	9102      	str	r1, [sp, #8]
 801b29e:	9501      	str	r5, [sp, #4]
 801b2a0:	9200      	str	r2, [sp, #0]
 801b2a2:	4632      	mov	r2, r6
 801b2a4:	2100      	movs	r1, #0
 801b2a6:	4658      	mov	r0, fp
 801b2a8:	f7fe fb6e 	bl	8019988 <lfs_bd_read>
                    if (err) {
 801b2ac:	2800      	cmp	r0, #0
 801b2ae:	d0dc      	beq.n	801b26a <lfs_ctz_extend+0x10e>
                        return err;
 801b2b0:	4682      	mov	sl, r0
 801b2b2:	e7c4      	b.n	801b23e <lfs_ctz_extend+0xe2>
            *block = nblock;
 801b2b4:	46d1      	mov	r9, sl
 801b2b6:	46c2      	mov	sl, r8
 801b2b8:	9b07      	ldr	r3, [sp, #28]
 801b2ba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b2bc:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801b2be:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801b2c2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b2c4:	6019      	str	r1, [r3, #0]
            return 0;
 801b2c6:	e7ba      	b.n	801b23e <lfs_ctz_extend+0xe2>
 801b2c8:	4682      	mov	sl, r0
 801b2ca:	e7b8      	b.n	801b23e <lfs_ctz_extend+0xe2>
 801b2cc:	08033984 	.word	0x08033984
 801b2d0:	08035660 	.word	0x08035660
 801b2d4:	08035878 	.word	0x08035878

0801b2d8 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801b2d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b2dc:	b087      	sub	sp, #28
 801b2de:	4605      	mov	r5, r0
 801b2e0:	460c      	mov	r4, r1
 801b2e2:	4617      	mov	r7, r2
 801b2e4:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801b2e6:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b2e8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801b2ec:	d008      	beq.n	801b300 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801b2ee:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801b2f0:	444b      	add	r3, r9
 801b2f2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801b2f4:	4293      	cmp	r3, r2
 801b2f6:	bf38      	it	cc
 801b2f8:	4613      	movcc	r3, r2
 801b2fa:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801b2fc:	429a      	cmp	r2, r3
 801b2fe:	d32d      	bcc.n	801b35c <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801b300:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801b302:	f1b8 0f00 	cmp.w	r8, #0
 801b306:	f000 8094 	beq.w	801b432 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801b30a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b30c:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801b310:	d004      	beq.n	801b31c <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801b312:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801b314:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801b316:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801b318:	4288      	cmp	r0, r1
 801b31a:	d150      	bne.n	801b3be <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801b31c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801b320:	d144      	bne.n	801b3ac <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801b322:	b90a      	cbnz	r2, 801b328 <lfs_file_flushedwrite+0x50>
 801b324:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b326:	bb1b      	cbnz	r3, 801b370 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801b328:	4628      	mov	r0, r5
 801b32a:	f7fe f9e3 	bl	80196f4 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801b32e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801b332:	9302      	str	r3, [sp, #8]
 801b334:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801b338:	9301      	str	r3, [sp, #4]
 801b33a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b33c:	9300      	str	r3, [sp, #0]
 801b33e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801b340:	462a      	mov	r2, r5
 801b342:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801b346:	4628      	mov	r0, r5
 801b348:	f7ff ff08 	bl	801b15c <lfs_ctz_extend>
                if (err) {
 801b34c:	4601      	mov	r1, r0
 801b34e:	2800      	cmp	r0, #0
 801b350:	d031      	beq.n	801b3b6 <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801b352:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b354:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b358:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801b35a:	e059      	b.n	801b410 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801b35c:	f7ff feec 	bl	801b138 <lfs_file_outline>
        if (err) {
 801b360:	4601      	mov	r1, r0
 801b362:	2800      	cmp	r0, #0
 801b364:	d0cc      	beq.n	801b300 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801b366:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b368:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b36c:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801b36e:	e04f      	b.n	801b410 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801b370:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801b374:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801b376:	2100      	movs	r1, #0
 801b378:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801b37a:	a805      	add	r0, sp, #20
 801b37c:	9003      	str	r0, [sp, #12]
 801b37e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801b382:	9002      	str	r0, [sp, #8]
 801b384:	3b01      	subs	r3, #1
 801b386:	9301      	str	r3, [sp, #4]
 801b388:	9200      	str	r2, [sp, #0]
 801b38a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b38c:	4632      	mov	r2, r6
 801b38e:	4628      	mov	r0, r5
 801b390:	f7ff f8ad 	bl	801a4ee <lfs_ctz_find>
                    if (err) {
 801b394:	4601      	mov	r1, r0
 801b396:	b920      	cbnz	r0, 801b3a2 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801b398:	4631      	mov	r1, r6
 801b39a:	4628      	mov	r0, r5
 801b39c:	f7fe faca 	bl	8019934 <lfs_cache_zero>
 801b3a0:	e7c2      	b.n	801b328 <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801b3a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b3a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b3a8:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801b3aa:	e031      	b.n	801b410 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801b3ac:	f06f 0301 	mvn.w	r3, #1
 801b3b0:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801b3b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b3b4:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801b3b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b3b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b3bc:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801b3be:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801b3c0:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801b3c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b3c4:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801b3c6:	4546      	cmp	r6, r8
 801b3c8:	bf28      	it	cs
 801b3ca:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801b3cc:	9603      	str	r6, [sp, #12]
 801b3ce:	9702      	str	r7, [sp, #8]
 801b3d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b3d2:	9301      	str	r3, [sp, #4]
 801b3d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801b3d6:	9300      	str	r3, [sp, #0]
 801b3d8:	2301      	movs	r3, #1
 801b3da:	462a      	mov	r2, r5
 801b3dc:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801b3e0:	4628      	mov	r0, r5
 801b3e2:	f7fe ffcd 	bl	801a380 <lfs_bd_prog>
            if (err) {
 801b3e6:	4601      	mov	r1, r0
 801b3e8:	b1b0      	cbz	r0, 801b418 <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801b3ea:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b3ee:	d10b      	bne.n	801b408 <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801b3f0:	4621      	mov	r1, r4
 801b3f2:	4628      	mov	r0, r5
 801b3f4:	f7ff fe0e 	bl	801b014 <lfs_file_relocate>
            if (err) {
 801b3f8:	4601      	mov	r1, r0
 801b3fa:	2800      	cmp	r0, #0
 801b3fc:	d0e6      	beq.n	801b3cc <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801b3fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b400:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b404:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801b406:	e003      	b.n	801b410 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801b408:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b40a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b40e:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801b410:	4608      	mov	r0, r1
 801b412:	b007      	add	sp, #28
 801b414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801b418:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b41a:	4433      	add	r3, r6
 801b41c:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801b41e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b420:	4433      	add	r3, r6
 801b422:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801b424:	4437      	add	r7, r6
        nsize -= diff;
 801b426:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801b42a:	4628      	mov	r0, r5
 801b42c:	f7fe f962 	bl	80196f4 <lfs_alloc_ckpoint>
 801b430:	e767      	b.n	801b302 <lfs_file_flushedwrite+0x2a>
    return size;
 801b432:	4649      	mov	r1, r9
 801b434:	e7ec      	b.n	801b410 <lfs_file_flushedwrite+0x138>
	...

0801b438 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801b438:	b570      	push	{r4, r5, r6, lr}
 801b43a:	b098      	sub	sp, #96	@ 0x60
 801b43c:	4605      	mov	r5, r0
 801b43e:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801b440:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b442:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801b446:	d008      	beq.n	801b45a <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801b448:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801b44c:	d102      	bne.n	801b454 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801b44e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b452:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801b454:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801b458:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801b45a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b45c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b460:	d068      	beq.n	801b534 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801b462:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801b464:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801b468:	d151      	bne.n	801b50e <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801b46a:	2254      	movs	r2, #84	@ 0x54
 801b46c:	2100      	movs	r1, #0
 801b46e:	a803      	add	r0, sp, #12
 801b470:	f00e fb36 	bl	8029ae0 <memset>
                .ctz.head = file->ctz.head,
 801b474:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801b476:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801b478:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801b47a:	930e      	str	r3, [sp, #56]	@ 0x38
 801b47c:	2301      	movs	r3, #1
 801b47e:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801b480:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801b482:	9310      	str	r3, [sp, #64]	@ 0x40
 801b484:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801b488:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801b48c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801b490:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b494:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801b496:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801b498:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801b49a:	429a      	cmp	r2, r3
 801b49c:	d21a      	bcs.n	801b4d4 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801b49e:	2301      	movs	r3, #1
 801b4a0:	f10d 020b 	add.w	r2, sp, #11
 801b4a4:	a903      	add	r1, sp, #12
 801b4a6:	4628      	mov	r0, r5
 801b4a8:	f7ff f86a 	bl	801a580 <lfs_file_flushedread>
                if (res < 0) {
 801b4ac:	1e03      	subs	r3, r0, #0
 801b4ae:	db42      	blt.n	801b536 <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801b4b0:	2301      	movs	r3, #1
 801b4b2:	f10d 020b 	add.w	r2, sp, #11
 801b4b6:	4621      	mov	r1, r4
 801b4b8:	4628      	mov	r0, r5
 801b4ba:	f7ff ff0d 	bl	801b2d8 <lfs_file_flushedwrite>
                if (res < 0) {
 801b4be:	1e03      	subs	r3, r0, #0
 801b4c0:	db39      	blt.n	801b536 <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801b4c2:	682b      	ldr	r3, [r5, #0]
 801b4c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b4c8:	d0e5      	beq.n	801b496 <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801b4ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b4ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b4d0:	602b      	str	r3, [r5, #0]
}
 801b4d2:	e7e0      	b.n	801b496 <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801b4d4:	2301      	movs	r3, #1
 801b4d6:	462a      	mov	r2, r5
 801b4d8:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801b4dc:	4628      	mov	r0, r5
 801b4de:	f7fe fef5 	bl	801a2cc <lfs_bd_flush>
                if (err) {
 801b4e2:	4603      	mov	r3, r0
 801b4e4:	b1c0      	cbz	r0, 801b518 <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801b4e6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b4ea:	d124      	bne.n	801b536 <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801b4ec:	4b13      	ldr	r3, [pc, #76]	@ (801b53c <lfs_file_flush+0x104>)
 801b4ee:	9300      	str	r3, [sp, #0]
 801b4f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801b4f2:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801b4f6:	4912      	ldr	r1, [pc, #72]	@ (801b540 <lfs_file_flush+0x108>)
 801b4f8:	4812      	ldr	r0, [pc, #72]	@ (801b544 <lfs_file_flush+0x10c>)
 801b4fa:	f00b fdd3 	bl	80270a4 <printf>
                err = lfs_file_relocate(lfs, file);
 801b4fe:	4621      	mov	r1, r4
 801b500:	4628      	mov	r0, r5
 801b502:	f7ff fd87 	bl	801b014 <lfs_file_relocate>
                if (err) {
 801b506:	4603      	mov	r3, r0
 801b508:	2800      	cmp	r0, #0
 801b50a:	d0e3      	beq.n	801b4d4 <lfs_file_flush+0x9c>
 801b50c:	e013      	b.n	801b536 <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801b50e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801b510:	42b3      	cmp	r3, r6
 801b512:	bf38      	it	cc
 801b514:	4633      	movcc	r3, r6
 801b516:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801b518:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801b51a:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801b51c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b51e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801b520:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b522:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801b526:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801b528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b52c:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801b52e:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801b530:	2300      	movs	r3, #0
 801b532:	e000      	b.n	801b536 <lfs_file_flush+0xfe>
 801b534:	2300      	movs	r3, #0
}
 801b536:	4618      	mov	r0, r3
 801b538:	b018      	add	sp, #96	@ 0x60
 801b53a:	bd70      	pop	{r4, r5, r6, pc}
 801b53c:	08033984 	.word	0x08033984
 801b540:	08035660 	.word	0x08035660
 801b544:	08035878 	.word	0x08035878

0801b548 <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801b548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b54a:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801b54c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b54e:	f013 0f01 	tst.w	r3, #1
 801b552:	d00f      	beq.n	801b574 <lfs_file_read_+0x2c>
 801b554:	4605      	mov	r5, r0
 801b556:	460c      	mov	r4, r1
 801b558:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801b55a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b55e:	d002      	beq.n	801b566 <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801b560:	f7ff ff6a 	bl	801b438 <lfs_file_flush>
        if (err) {
 801b564:	b928      	cbnz	r0, 801b572 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801b566:	463b      	mov	r3, r7
 801b568:	4632      	mov	r2, r6
 801b56a:	4621      	mov	r1, r4
 801b56c:	4628      	mov	r0, r5
 801b56e:	f7ff f807 	bl	801a580 <lfs_file_flushedread>
}
 801b572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801b574:	4b03      	ldr	r3, [pc, #12]	@ (801b584 <lfs_file_read_+0x3c>)
 801b576:	4a04      	ldr	r2, [pc, #16]	@ (801b588 <lfs_file_read_+0x40>)
 801b578:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801b57c:	4803      	ldr	r0, [pc, #12]	@ (801b58c <lfs_file_read_+0x44>)
 801b57e:	f00b fd5d 	bl	802703c <__assert_func>
 801b582:	bf00      	nop
 801b584:	0803589c 	.word	0x0803589c
 801b588:	080362d4 	.word	0x080362d4
 801b58c:	08035660 	.word	0x08035660

0801b590 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801b590:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b592:	b083      	sub	sp, #12
 801b594:	4606      	mov	r6, r0
 801b596:	460d      	mov	r5, r1
 801b598:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801b59a:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801b59c:	b123      	cbz	r3, 801b5a8 <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801b59e:	2b01      	cmp	r3, #1
 801b5a0:	d021      	beq.n	801b5e6 <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801b5a2:	2b02      	cmp	r3, #2
 801b5a4:	d023      	beq.n	801b5ee <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801b5a6:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801b5a8:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801b5aa:	42a3      	cmp	r3, r4
 801b5ac:	d339      	bcc.n	801b622 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801b5ae:	42bc      	cmp	r4, r7
 801b5b0:	d023      	beq.n	801b5fa <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801b5b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801b5b4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b5b8:	d10c      	bne.n	801b5d4 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801b5ba:	9701      	str	r7, [sp, #4]
 801b5bc:	a901      	add	r1, sp, #4
 801b5be:	4630      	mov	r0, r6
 801b5c0:	f7fe f9c4 	bl	801994c <lfs_ctz_index>
 801b5c4:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801b5c6:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801b5c8:	4669      	mov	r1, sp
 801b5ca:	4630      	mov	r0, r6
 801b5cc:	f7fe f9be 	bl	801994c <lfs_ctz_index>
        if (oindex == nindex
 801b5d0:	4287      	cmp	r7, r0
 801b5d2:	d014      	beq.n	801b5fe <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801b5d4:	4629      	mov	r1, r5
 801b5d6:	4630      	mov	r0, r6
 801b5d8:	f7ff ff2e 	bl	801b438 <lfs_file_flush>
    if (err) {
 801b5dc:	b908      	cbnz	r0, 801b5e2 <lfs_file_seek_+0x52>
    file->pos = npos;
 801b5de:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801b5e0:	4620      	mov	r0, r4
}
 801b5e2:	b003      	add	sp, #12
 801b5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801b5e6:	42e7      	cmn	r7, r4
 801b5e8:	d415      	bmi.n	801b616 <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801b5ea:	443c      	add	r4, r7
 801b5ec:	e7dc      	b.n	801b5a8 <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801b5ee:	f7fe f90e 	bl	801980e <lfs_file_size_>
        if (res < 0) {
 801b5f2:	1900      	adds	r0, r0, r4
 801b5f4:	d412      	bmi.n	801b61c <lfs_file_seek_+0x8c>
            npos = res;
 801b5f6:	4604      	mov	r4, r0
 801b5f8:	e7d6      	b.n	801b5a8 <lfs_file_seek_+0x18>
        return npos;
 801b5fa:	4620      	mov	r0, r4
 801b5fc:	e7f1      	b.n	801b5e2 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801b5fe:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801b600:	9a00      	ldr	r2, [sp, #0]
 801b602:	4293      	cmp	r3, r2
 801b604:	d8e6      	bhi.n	801b5d4 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801b606:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801b608:	440b      	add	r3, r1
 801b60a:	429a      	cmp	r2, r3
 801b60c:	d2e2      	bcs.n	801b5d4 <lfs_file_seek_+0x44>
            file->pos = npos;
 801b60e:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801b610:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801b612:	4620      	mov	r0, r4
 801b614:	e7e5      	b.n	801b5e2 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801b616:	f06f 0015 	mvn.w	r0, #21
 801b61a:	e7e2      	b.n	801b5e2 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801b61c:	f06f 0015 	mvn.w	r0, #21
 801b620:	e7df      	b.n	801b5e2 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801b622:	f06f 0015 	mvn.w	r0, #21
 801b626:	e7dc      	b.n	801b5e2 <lfs_file_seek_+0x52>

0801b628 <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b62c:	b082      	sub	sp, #8
 801b62e:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801b630:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b632:	f013 0f02 	tst.w	r3, #2
 801b636:	d02a      	beq.n	801b68e <lfs_file_write_+0x66>
 801b638:	4605      	mov	r5, r0
 801b63a:	460c      	mov	r4, r1
 801b63c:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801b63e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801b642:	d12b      	bne.n	801b69c <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801b644:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b646:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801b64a:	d004      	beq.n	801b656 <lfs_file_write_+0x2e>
 801b64c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b64e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b650:	4291      	cmp	r1, r2
 801b652:	d200      	bcs.n	801b656 <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801b654:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801b656:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801b658:	19f1      	adds	r1, r6, r7
 801b65a:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801b65c:	4291      	cmp	r1, r2
 801b65e:	d831      	bhi.n	801b6c4 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801b660:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b664:	d11f      	bne.n	801b6a6 <lfs_file_write_+0x7e>
 801b666:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801b668:	429e      	cmp	r6, r3
 801b66a:	d91c      	bls.n	801b6a6 <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801b66c:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801b66e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b670:	428e      	cmp	r6, r1
 801b672:	d918      	bls.n	801b6a6 <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801b674:	2300      	movs	r3, #0
 801b676:	f88d 3007 	strb.w	r3, [sp, #7]
 801b67a:	2301      	movs	r3, #1
 801b67c:	f10d 0207 	add.w	r2, sp, #7
 801b680:	4621      	mov	r1, r4
 801b682:	4628      	mov	r0, r5
 801b684:	f7ff fe28 	bl	801b2d8 <lfs_file_flushedwrite>
            if (res < 0) {
 801b688:	2800      	cmp	r0, #0
 801b68a:	daf0      	bge.n	801b66e <lfs_file_write_+0x46>
 801b68c:	e017      	b.n	801b6be <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801b68e:	4b0f      	ldr	r3, [pc, #60]	@ (801b6cc <lfs_file_write_+0xa4>)
 801b690:	4a0f      	ldr	r2, [pc, #60]	@ (801b6d0 <lfs_file_write_+0xa8>)
 801b692:	f640 6126 	movw	r1, #3622	@ 0xe26
 801b696:	480f      	ldr	r0, [pc, #60]	@ (801b6d4 <lfs_file_write_+0xac>)
 801b698:	f00b fcd0 	bl	802703c <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801b69c:	f7ff fecc 	bl	801b438 <lfs_file_flush>
        if (err) {
 801b6a0:	2800      	cmp	r0, #0
 801b6a2:	d0cf      	beq.n	801b644 <lfs_file_write_+0x1c>
 801b6a4:	e00b      	b.n	801b6be <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801b6a6:	463b      	mov	r3, r7
 801b6a8:	4642      	mov	r2, r8
 801b6aa:	4621      	mov	r1, r4
 801b6ac:	4628      	mov	r0, r5
 801b6ae:	f7ff fe13 	bl	801b2d8 <lfs_file_flushedwrite>
    if (nsize < 0) {
 801b6b2:	2800      	cmp	r0, #0
 801b6b4:	db03      	blt.n	801b6be <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801b6b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b6b8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801b6bc:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801b6be:	b002      	add	sp, #8
 801b6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801b6c4:	f06f 001a 	mvn.w	r0, #26
 801b6c8:	e7f9      	b.n	801b6be <lfs_file_write_+0x96>
 801b6ca:	bf00      	nop
 801b6cc:	080358cc 	.word	0x080358cc
 801b6d0:	080362b4 	.word	0x080362b4
 801b6d4:	08035660 	.word	0x08035660

0801b6d8 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801b6d8:	b500      	push	{lr}
 801b6da:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801b6dc:	2300      	movs	r3, #0
 801b6de:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801b6e0:	aa01      	add	r2, sp, #4
 801b6e2:	4904      	ldr	r1, [pc, #16]	@ (801b6f4 <lfs_fs_size_+0x1c>)
 801b6e4:	f7ff faf0 	bl	801acc8 <lfs_fs_traverse_>
    if (err) {
 801b6e8:	b900      	cbnz	r0, 801b6ec <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801b6ea:	9801      	ldr	r0, [sp, #4]
}
 801b6ec:	b003      	add	sp, #12
 801b6ee:	f85d fb04 	ldr.w	pc, [sp], #4
 801b6f2:	bf00      	nop
 801b6f4:	08019889 	.word	0x08019889

0801b6f8 <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801b6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6fc:	b082      	sub	sp, #8
 801b6fe:	4680      	mov	r8, r0
 801b700:	460e      	mov	r6, r1
 801b702:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801b704:	2300      	movs	r3, #0
 801b706:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801b708:	2501      	movs	r5, #1
 801b70a:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801b70c:	4b27      	ldr	r3, [pc, #156]	@ (801b7ac <lfs_fs_pred+0xb4>)
 801b70e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b712:	ab02      	add	r3, sp, #8
 801b714:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801b718:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801b71a:	69a7      	ldr	r7, [r4, #24]
 801b71c:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801b720:	d035      	beq.n	801b78e <lfs_fs_pred+0x96>
 801b722:	69e3      	ldr	r3, [r4, #28]
 801b724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b728:	d02f      	beq.n	801b78a <lfs_fs_pred+0x92>
 801b72a:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 801b72c:	bb8b      	cbnz	r3, 801b792 <lfs_fs_pred+0x9a>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801b72e:	f104 0a18 	add.w	sl, r4, #24
 801b732:	4669      	mov	r1, sp
 801b734:	4650      	mov	r0, sl
 801b736:	f7fd ff61 	bl	80195fc <lfs_pair_issync>
 801b73a:	b9a8      	cbnz	r0, 801b768 <lfs_fs_pred+0x70>
        if (tortoise_i == tortoise_period) {
 801b73c:	454d      	cmp	r5, r9
 801b73e:	d01d      	beq.n	801b77c <lfs_fs_pred+0x84>
        tortoise_i += 1;
 801b740:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801b742:	6833      	ldr	r3, [r6, #0]
 801b744:	42bb      	cmp	r3, r7
 801b746:	d027      	beq.n	801b798 <lfs_fs_pred+0xa0>
 801b748:	69e1      	ldr	r1, [r4, #28]
 801b74a:	6872      	ldr	r2, [r6, #4]
 801b74c:	4291      	cmp	r1, r2
 801b74e:	d027      	beq.n	801b7a0 <lfs_fs_pred+0xa8>
 801b750:	42ba      	cmp	r2, r7
 801b752:	d027      	beq.n	801b7a4 <lfs_fs_pred+0xac>
 801b754:	4299      	cmp	r1, r3
 801b756:	d027      	beq.n	801b7a8 <lfs_fs_pred+0xb0>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801b758:	4652      	mov	r2, sl
 801b75a:	4621      	mov	r1, r4
 801b75c:	4640      	mov	r0, r8
 801b75e:	f7ff faa5 	bl	801acac <lfs_dir_fetch>
        if (err) {
 801b762:	2800      	cmp	r0, #0
 801b764:	d0d9      	beq.n	801b71a <lfs_fs_pred+0x22>
 801b766:	e018      	b.n	801b79a <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801b768:	4b11      	ldr	r3, [pc, #68]	@ (801b7b0 <lfs_fs_pred+0xb8>)
 801b76a:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801b76e:	4911      	ldr	r1, [pc, #68]	@ (801b7b4 <lfs_fs_pred+0xbc>)
 801b770:	4811      	ldr	r0, [pc, #68]	@ (801b7b8 <lfs_fs_pred+0xc0>)
 801b772:	f00b fc97 	bl	80270a4 <printf>
            return LFS_ERR_CORRUPT;
 801b776:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b77a:	e00e      	b.n	801b79a <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801b77c:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801b77e:	69e3      	ldr	r3, [r4, #28]
 801b780:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 801b782:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801b786:	2500      	movs	r5, #0
 801b788:	e7da      	b.n	801b740 <lfs_fs_pred+0x48>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801b78a:	2301      	movs	r3, #1
 801b78c:	e7ce      	b.n	801b72c <lfs_fs_pred+0x34>
 801b78e:	2301      	movs	r3, #1
 801b790:	e7cc      	b.n	801b72c <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 801b792:	f06f 0001 	mvn.w	r0, #1
 801b796:	e000      	b.n	801b79a <lfs_fs_pred+0xa2>
            return 0;
 801b798:	2000      	movs	r0, #0
}
 801b79a:	b002      	add	sp, #8
 801b79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 801b7a0:	2000      	movs	r0, #0
 801b7a2:	e7fa      	b.n	801b79a <lfs_fs_pred+0xa2>
 801b7a4:	2000      	movs	r0, #0
 801b7a6:	e7f8      	b.n	801b79a <lfs_fs_pred+0xa2>
 801b7a8:	2000      	movs	r0, #0
 801b7aa:	e7f6      	b.n	801b79a <lfs_fs_pred+0xa2>
 801b7ac:	08032e24 	.word	0x08032e24
 801b7b0:	08033984 	.word	0x08033984
 801b7b4:	08035660 	.word	0x08035660
 801b7b8:	08035820 	.word	0x08035820

0801b7bc <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801b7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7be:	b085      	sub	sp, #20
 801b7c0:	460c      	mov	r4, r1
 801b7c2:	4616      	mov	r6, r2
 801b7c4:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801b7c6:	9303      	str	r3, [sp, #12]
 801b7c8:	9202      	str	r2, [sp, #8]
 801b7ca:	684b      	ldr	r3, [r1, #4]
 801b7cc:	9301      	str	r3, [sp, #4]
 801b7ce:	680b      	ldr	r3, [r1, #0]
 801b7d0:	9300      	str	r3, [sp, #0]
 801b7d2:	2300      	movs	r3, #0
 801b7d4:	4602      	mov	r2, r0
 801b7d6:	f100 0110 	add.w	r1, r0, #16
 801b7da:	f7fe fdd1 	bl	801a380 <lfs_bd_prog>
    if (err) {
 801b7de:	4607      	mov	r7, r0
 801b7e0:	b110      	cbz	r0, 801b7e8 <lfs_dir_commitprog+0x2c>
}
 801b7e2:	4638      	mov	r0, r7
 801b7e4:	b005      	add	sp, #20
 801b7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801b7e8:	462a      	mov	r2, r5
 801b7ea:	4631      	mov	r1, r6
 801b7ec:	68e0      	ldr	r0, [r4, #12]
 801b7ee:	f002 fcdf 	bl	801e1b0 <lfs_crc>
 801b7f2:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801b7f4:	6863      	ldr	r3, [r4, #4]
 801b7f6:	442b      	add	r3, r5
 801b7f8:	6063      	str	r3, [r4, #4]
    return 0;
 801b7fa:	e7f2      	b.n	801b7e2 <lfs_dir_commitprog+0x26>

0801b7fc <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b800:	b087      	sub	sp, #28
 801b802:	4614      	mov	r4, r2
 801b804:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b806:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b80a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b80e:	bf14      	ite	ne
 801b810:	4690      	movne	r8, r2
 801b812:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801b816:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b81a:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801b81e:	684b      	ldr	r3, [r1, #4]
 801b820:	444b      	add	r3, r9
 801b822:	694a      	ldr	r2, [r1, #20]
 801b824:	4293      	cmp	r3, r2
 801b826:	d841      	bhi.n	801b8ac <lfs_dir_commitattr+0xb0>
 801b828:	4605      	mov	r5, r0
 801b82a:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801b82c:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801b830:	688b      	ldr	r3, [r1, #8]
 801b832:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801b836:	ba1b      	rev	r3, r3
 801b838:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801b83a:	2304      	movs	r3, #4
 801b83c:	aa05      	add	r2, sp, #20
 801b83e:	f7ff ffbd 	bl	801b7bc <lfs_dir_commitprog>
    if (err) {
 801b842:	4682      	mov	sl, r0
 801b844:	bb60      	cbnz	r0, 801b8a0 <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801b846:	2c00      	cmp	r4, #0
 801b848:	da21      	bge.n	801b88e <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801b84a:	2400      	movs	r4, #0
 801b84c:	4544      	cmp	r4, r8
 801b84e:	d225      	bcs.n	801b89c <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801b850:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801b854:	6839      	ldr	r1, [r7, #0]
 801b856:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801b858:	2001      	movs	r0, #1
 801b85a:	9003      	str	r0, [sp, #12]
 801b85c:	f10d 0013 	add.w	r0, sp, #19
 801b860:	9002      	str	r0, [sp, #8]
 801b862:	4422      	add	r2, r4
 801b864:	9201      	str	r2, [sp, #4]
 801b866:	9100      	str	r1, [sp, #0]
 801b868:	3b04      	subs	r3, #4
 801b86a:	462a      	mov	r2, r5
 801b86c:	2100      	movs	r1, #0
 801b86e:	4628      	mov	r0, r5
 801b870:	f7fe f88a 	bl	8019988 <lfs_bd_read>
            if (err) {
 801b874:	4603      	mov	r3, r0
 801b876:	b9b8      	cbnz	r0, 801b8a8 <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801b878:	2301      	movs	r3, #1
 801b87a:	f10d 0213 	add.w	r2, sp, #19
 801b87e:	4631      	mov	r1, r6
 801b880:	4628      	mov	r0, r5
 801b882:	f7ff ff9b 	bl	801b7bc <lfs_dir_commitprog>
            if (err) {
 801b886:	4603      	mov	r3, r0
 801b888:	b970      	cbnz	r0, 801b8a8 <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801b88a:	3401      	adds	r4, #1
 801b88c:	e7de      	b.n	801b84c <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801b88e:	4643      	mov	r3, r8
 801b890:	463a      	mov	r2, r7
 801b892:	4631      	mov	r1, r6
 801b894:	4628      	mov	r0, r5
 801b896:	f7ff ff91 	bl	801b7bc <lfs_dir_commitprog>
        if (err) {
 801b89a:	b950      	cbnz	r0, 801b8b2 <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801b89c:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801b8a0:	4650      	mov	r0, sl
 801b8a2:	b007      	add	sp, #28
 801b8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801b8a8:	469a      	mov	sl, r3
 801b8aa:	e7f9      	b.n	801b8a0 <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801b8ac:	f06f 0a1b 	mvn.w	sl, #27
 801b8b0:	e7f6      	b.n	801b8a0 <lfs_dir_commitattr+0xa4>
            return err;
 801b8b2:	4682      	mov	sl, r0
 801b8b4:	e7f4      	b.n	801b8a0 <lfs_dir_commitattr+0xa4>

0801b8b6 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801b8b6:	b508      	push	{r3, lr}
 801b8b8:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801b8ba:	460a      	mov	r2, r1
 801b8bc:	6841      	ldr	r1, [r0, #4]
 801b8be:	6800      	ldr	r0, [r0, #0]
 801b8c0:	f7ff ff9c 	bl	801b7fc <lfs_dir_commitattr>
}
 801b8c4:	bd08      	pop	{r3, pc}
	...

0801b8c8 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801b8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8cc:	b08b      	sub	sp, #44	@ 0x2c
 801b8ce:	4607      	mov	r7, r0
 801b8d0:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801b8d2:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801b8d4:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801b8d6:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801b8d8:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801b8da:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801b8dc:	428b      	cmp	r3, r1
 801b8de:	bf94      	ite	ls
 801b8e0:	eb02 0803 	addls.w	r8, r2, r3
 801b8e4:	eb02 0801 	addhi.w	r8, r2, r1
 801b8e8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801b8ec:	fbb8 f3f2 	udiv	r3, r8, r2
 801b8f0:	fb02 8313 	mls	r3, r2, r3, r8
 801b8f4:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801b8fc:	469b      	mov	fp, r3
    while (commit->off < end) {
 801b8fe:	e03c      	b.n	801b97a <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801b900:	2201      	movs	r2, #1
 801b902:	9203      	str	r2, [sp, #12]
 801b904:	f10d 021b 	add.w	r2, sp, #27
 801b908:	9202      	str	r2, [sp, #8]
 801b90a:	9401      	str	r4, [sp, #4]
 801b90c:	6832      	ldr	r2, [r6, #0]
 801b90e:	9200      	str	r2, [sp, #0]
 801b910:	463a      	mov	r2, r7
 801b912:	2100      	movs	r1, #0
 801b914:	4638      	mov	r0, r7
 801b916:	f7fe f837 	bl	8019988 <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801b91a:	4603      	mov	r3, r0
 801b91c:	b118      	cbz	r0, 801b926 <lfs_dir_commitcrc+0x5e>
 801b91e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b922:	f040 80c0 	bne.w	801baa6 <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801b926:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b928:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801b92a:	9307      	str	r3, [sp, #28]
 801b92c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b930:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801b932:	aa08      	add	r2, sp, #32
 801b934:	9203      	str	r2, [sp, #12]
 801b936:	9302      	str	r3, [sp, #8]
 801b938:	9401      	str	r4, [sp, #4]
 801b93a:	6832      	ldr	r2, [r6, #0]
 801b93c:	9200      	str	r2, [sp, #0]
 801b93e:	463a      	mov	r2, r7
 801b940:	2100      	movs	r1, #0
 801b942:	4638      	mov	r0, r7
 801b944:	f7fe fea0 	bl	801a688 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801b948:	4603      	mov	r3, r0
 801b94a:	b118      	cbz	r0, 801b954 <lfs_dir_commitcrc+0x8c>
 801b94c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b950:	f040 80a9 	bne.w	801baa6 <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801b954:	ab07      	add	r3, sp, #28
 801b956:	4a59      	ldr	r2, [pc, #356]	@ (801babc <lfs_dir_commitcrc+0x1f4>)
 801b958:	4631      	mov	r1, r6
 801b95a:	4638      	mov	r0, r7
 801b95c:	f7ff ff4e 	bl	801b7fc <lfs_dir_commitattr>
                if (err) {
 801b960:	4603      	mov	r3, r0
 801b962:	b348      	cbz	r0, 801b9b8 <lfs_dir_commitcrc+0xf0>
 801b964:	e09f      	b.n	801baa6 <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801b966:	2300      	movs	r3, #0
 801b968:	463a      	mov	r2, r7
 801b96a:	4651      	mov	r1, sl
 801b96c:	4638      	mov	r0, r7
 801b96e:	f7fe fd81 	bl	801a474 <lfs_bd_sync>
            if (err) {
 801b972:	4603      	mov	r3, r0
 801b974:	2800      	cmp	r0, #0
 801b976:	f040 8096 	bne.w	801baa6 <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801b97a:	6874      	ldr	r4, [r6, #4]
 801b97c:	4544      	cmp	r4, r8
 801b97e:	d268      	bcs.n	801ba52 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801b980:	eba8 0304 	sub.w	r3, r8, r4
 801b984:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801b986:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801b98a:	4293      	cmp	r3, r2
 801b98c:	bf94      	ite	ls
 801b98e:	18e4      	addls	r4, r4, r3
 801b990:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801b992:	3404      	adds	r4, #4
        if (noff < end) {
 801b994:	4544      	cmp	r4, r8
 801b996:	d204      	bcs.n	801b9a2 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801b998:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801b99c:	429c      	cmp	r4, r3
 801b99e:	bf28      	it	cs
 801b9a0:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801b9a2:	23ff      	movs	r3, #255	@ 0xff
 801b9a4:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801b9a8:	4544      	cmp	r4, r8
 801b9aa:	d305      	bcc.n	801b9b8 <lfs_dir_commitcrc+0xf0>
 801b9ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b9ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b9b0:	6a1b      	ldr	r3, [r3, #32]
 801b9b2:	1ad2      	subs	r2, r2, r3
 801b9b4:	42a2      	cmp	r2, r4
 801b9b6:	d2a3      	bcs.n	801b900 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801b9b8:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801b9bc:	43d2      	mvns	r2, r2
 801b9be:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801b9c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801b9c6:	6873      	ldr	r3, [r6, #4]
 801b9c8:	1ae5      	subs	r5, r4, r3
 801b9ca:	3d04      	subs	r5, #4
 801b9cc:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801b9d0:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801b9d4:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801b9d8:	68b3      	ldr	r3, [r6, #8]
 801b9da:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801b9dc:	ba1b      	rev	r3, r3
 801b9de:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801b9e0:	f10d 091c 	add.w	r9, sp, #28
 801b9e4:	2204      	movs	r2, #4
 801b9e6:	4649      	mov	r1, r9
 801b9e8:	68f0      	ldr	r0, [r6, #12]
 801b9ea:	f002 fbe1 	bl	801e1b0 <lfs_crc>
 801b9ee:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801b9f0:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801b9f2:	f107 0a10 	add.w	sl, r7, #16
 801b9f6:	2308      	movs	r3, #8
 801b9f8:	9303      	str	r3, [sp, #12]
 801b9fa:	f8cd 9008 	str.w	r9, [sp, #8]
 801b9fe:	6873      	ldr	r3, [r6, #4]
 801ba00:	9301      	str	r3, [sp, #4]
 801ba02:	6833      	ldr	r3, [r6, #0]
 801ba04:	9300      	str	r3, [sp, #0]
 801ba06:	2300      	movs	r3, #0
 801ba08:	463a      	mov	r2, r7
 801ba0a:	4651      	mov	r1, sl
 801ba0c:	4638      	mov	r0, r7
 801ba0e:	f7fe fcb7 	bl	801a380 <lfs_bd_prog>
        if (err) {
 801ba12:	4603      	mov	r3, r0
 801ba14:	2800      	cmp	r0, #0
 801ba16:	d146      	bne.n	801baa6 <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801ba18:	f1bb 0f00 	cmp.w	fp, #0
 801ba1c:	d104      	bne.n	801ba28 <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801ba1e:	6873      	ldr	r3, [r6, #4]
 801ba20:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801ba24:	68f3      	ldr	r3, [r6, #12]
 801ba26:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801ba28:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801ba2a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801ba2e:	43db      	mvns	r3, r3
 801ba30:	061b      	lsls	r3, r3, #24
 801ba32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801ba36:	406b      	eors	r3, r5
 801ba38:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801ba3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ba3e:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801ba40:	4544      	cmp	r4, r8
 801ba42:	d290      	bcs.n	801b966 <lfs_dir_commitcrc+0x9e>
 801ba44:	697b      	ldr	r3, [r7, #20]
 801ba46:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801ba48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801ba4a:	4413      	add	r3, r2
 801ba4c:	42a3      	cmp	r3, r4
 801ba4e:	d894      	bhi.n	801b97a <lfs_dir_commitcrc+0xb2>
 801ba50:	e789      	b.n	801b966 <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801ba52:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801ba54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ba58:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801ba5a:	aa09      	add	r2, sp, #36	@ 0x24
 801ba5c:	9203      	str	r2, [sp, #12]
 801ba5e:	ebab 0203 	sub.w	r2, fp, r3
 801ba62:	9202      	str	r2, [sp, #8]
 801ba64:	9301      	str	r3, [sp, #4]
 801ba66:	6833      	ldr	r3, [r6, #0]
 801ba68:	9300      	str	r3, [sp, #0]
 801ba6a:	f10b 0304 	add.w	r3, fp, #4
 801ba6e:	463a      	mov	r2, r7
 801ba70:	2100      	movs	r1, #0
 801ba72:	4638      	mov	r0, r7
 801ba74:	f7fe fe08 	bl	801a688 <lfs_bd_crc>
    if (err) {
 801ba78:	4603      	mov	r3, r0
 801ba7a:	b9a0      	cbnz	r0, 801baa6 <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801ba7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba7e:	9a05      	ldr	r2, [sp, #20]
 801ba80:	4293      	cmp	r3, r2
 801ba82:	d114      	bne.n	801baae <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801ba84:	ab09      	add	r3, sp, #36	@ 0x24
 801ba86:	9303      	str	r3, [sp, #12]
 801ba88:	2304      	movs	r3, #4
 801ba8a:	9302      	str	r3, [sp, #8]
 801ba8c:	f8cd b004 	str.w	fp, [sp, #4]
 801ba90:	6832      	ldr	r2, [r6, #0]
 801ba92:	9200      	str	r2, [sp, #0]
 801ba94:	463a      	mov	r2, r7
 801ba96:	2100      	movs	r1, #0
 801ba98:	4638      	mov	r0, r7
 801ba9a:	f7fe fdf5 	bl	801a688 <lfs_bd_crc>
    if (err) {
 801ba9e:	4603      	mov	r3, r0
 801baa0:	b908      	cbnz	r0, 801baa6 <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801baa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801baa4:	b932      	cbnz	r2, 801bab4 <lfs_dir_commitcrc+0x1ec>
}
 801baa6:	4618      	mov	r0, r3
 801baa8:	b00b      	add	sp, #44	@ 0x2c
 801baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801baae:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801bab2:	e7f8      	b.n	801baa6 <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801bab4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801bab8:	e7f5      	b.n	801baa6 <lfs_dir_commitcrc+0x1de>
 801baba:	bf00      	nop
 801babc:	5ffffc08 	.word	0x5ffffc08

0801bac0 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bac4:	b09b      	sub	sp, #108	@ 0x6c
 801bac6:	4605      	mov	r5, r0
 801bac8:	460c      	mov	r4, r1
 801baca:	4616      	mov	r6, r2
 801bacc:	461f      	mov	r7, r3
 801bace:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801bad2:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801bad6:	f7fd fe7f 	bl	80197d8 <lfs_dir_needsrelocation>
    dir->rev += 1;
 801bada:	68a3      	ldr	r3, [r4, #8]
 801badc:	3301      	adds	r3, #1
 801bade:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801bae0:	4681      	mov	r9, r0
 801bae2:	2800      	cmp	r0, #0
 801bae4:	d034      	beq.n	801bb50 <lfs_dir_compact+0x90>
 801bae6:	2300      	movs	r3, #0
 801bae8:	9314      	str	r3, [sp, #80]	@ 0x50
 801baea:	2301      	movs	r3, #1
 801baec:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801baee:	6823      	ldr	r3, [r4, #0]
 801baf0:	b373      	cbz	r3, 801bb50 <lfs_dir_compact+0x90>
 801baf2:	6862      	ldr	r2, [r4, #4]
 801baf4:	2a01      	cmp	r2, #1
 801baf6:	d02b      	beq.n	801bb50 <lfs_dir_compact+0x90>
 801baf8:	2b01      	cmp	r3, #1
 801bafa:	d029      	beq.n	801bb50 <lfs_dir_compact+0x90>
 801bafc:	b342      	cbz	r2, 801bb50 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801bafe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bb02:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801bb04:	f1b9 0f00 	cmp.w	r9, #0
 801bb08:	f000 810d 	beq.w	801bd26 <lfs_dir_compact+0x266>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801bb0c:	2300      	movs	r3, #0
 801bb0e:	9318      	str	r3, [sp, #96]	@ 0x60
 801bb10:	2301      	movs	r3, #1
 801bb12:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801bb14:	6823      	ldr	r3, [r4, #0]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	f000 810f 	beq.w	801bd3a <lfs_dir_compact+0x27a>
 801bb1c:	6862      	ldr	r2, [r4, #4]
 801bb1e:	2a01      	cmp	r2, #1
 801bb20:	f000 810b 	beq.w	801bd3a <lfs_dir_compact+0x27a>
 801bb24:	2b01      	cmp	r3, #1
 801bb26:	f000 8108 	beq.w	801bd3a <lfs_dir_compact+0x27a>
 801bb2a:	2a00      	cmp	r2, #0
 801bb2c:	f000 8105 	beq.w	801bd3a <lfs_dir_compact+0x27a>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801bb30:	1d21      	adds	r1, r4, #4
 801bb32:	4628      	mov	r0, r5
 801bb34:	f7ff f9d0 	bl	801aed8 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801bb38:	4603      	mov	r3, r0
 801bb3a:	b330      	cbz	r0, 801bb8a <lfs_dir_compact+0xca>
 801bb3c:	f110 0f1c 	cmn.w	r0, #28
 801bb40:	d11f      	bne.n	801bb82 <lfs_dir_compact+0xc2>
 801bb42:	f1b9 0f00 	cmp.w	r9, #0
 801bb46:	d01c      	beq.n	801bb82 <lfs_dir_compact+0xc2>
        relocated = true;
 801bb48:	46cb      	mov	fp, r9
        tired = false;
 801bb4a:	f04f 0900 	mov.w	r9, #0
 801bb4e:	e001      	b.n	801bb54 <lfs_dir_compact+0x94>
    bool relocated = false;
 801bb50:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801bb54:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801bb56:	930e      	str	r3, [sp, #56]	@ 0x38
 801bb58:	2300      	movs	r3, #0
 801bb5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bb5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bb60:	9210      	str	r2, [sp, #64]	@ 0x40
 801bb62:	9211      	str	r2, [sp, #68]	@ 0x44
 801bb64:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801bb66:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801bb68:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801bb6a:	b19b      	cbz	r3, 801bb94 <lfs_dir_compact+0xd4>
 801bb6c:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801bb6e:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801bb70:	6861      	ldr	r1, [r4, #4]
 801bb72:	4628      	mov	r0, r5
 801bb74:	f7fd fe8e 	bl	8019894 <lfs_bd_erase>
            if (err) {
 801bb78:	4603      	mov	r3, r0
 801bb7a:	b170      	cbz	r0, 801bb9a <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801bb7c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bb80:	d0bd      	beq.n	801bafe <lfs_dir_compact+0x3e>
}
 801bb82:	4618      	mov	r0, r3
 801bb84:	b01b      	add	sp, #108	@ 0x6c
 801bb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801bb8a:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801bb8e:	f04f 0b01 	mov.w	fp, #1
 801bb92:	e7df      	b.n	801bb54 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801bb94:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801bb96:	3b08      	subs	r3, #8
 801bb98:	e7e9      	b.n	801bb6e <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801bb9a:	2304      	movs	r3, #4
 801bb9c:	f104 0208 	add.w	r2, r4, #8
 801bba0:	a90e      	add	r1, sp, #56	@ 0x38
 801bba2:	4628      	mov	r0, r5
 801bba4:	f7ff fe0a 	bl	801b7bc <lfs_dir_commitprog>
            if (err) {
 801bba8:	4603      	mov	r3, r0
 801bbaa:	b118      	cbz	r0, 801bbb4 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801bbac:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bbb0:	d1e7      	bne.n	801bb82 <lfs_dir_compact+0xc2>
 801bbb2:	e7a4      	b.n	801bafe <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801bbb4:	9516      	str	r5, [sp, #88]	@ 0x58
 801bbb6:	ab0e      	add	r3, sp, #56	@ 0x38
 801bbb8:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801bbba:	ab16      	add	r3, sp, #88	@ 0x58
 801bbbc:	9308      	str	r3, [sp, #32]
 801bbbe:	4b65      	ldr	r3, [pc, #404]	@ (801bd54 <lfs_dir_compact+0x294>)
 801bbc0:	9307      	str	r3, [sp, #28]
 801bbc2:	f1c8 0300 	rsb	r3, r8, #0
 801bbc6:	b21b      	sxth	r3, r3
 801bbc8:	9306      	str	r3, [sp, #24]
 801bbca:	f8cd a014 	str.w	sl, [sp, #20]
 801bbce:	f8cd 8010 	str.w	r8, [sp, #16]
 801bbd2:	2200      	movs	r2, #0
 801bbd4:	9203      	str	r2, [sp, #12]
 801bbd6:	4b60      	ldr	r3, [pc, #384]	@ (801bd58 <lfs_dir_compact+0x298>)
 801bbd8:	9302      	str	r3, [sp, #8]
 801bbda:	9701      	str	r7, [sp, #4]
 801bbdc:	9600      	str	r6, [sp, #0]
 801bbde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bbe2:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801bbe4:	4628      	mov	r0, r5
 801bbe6:	f7fe f911 	bl	8019e0c <lfs_dir_traverse>
            if (err) {
 801bbea:	4603      	mov	r3, r0
 801bbec:	b118      	cbz	r0, 801bbf6 <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801bbee:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bbf2:	d1c6      	bne.n	801bb82 <lfs_dir_compact+0xc2>
 801bbf4:	e783      	b.n	801bafe <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801bbf6:	69a2      	ldr	r2, [r4, #24]
 801bbf8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801bbfc:	d02c      	beq.n	801bc58 <lfs_dir_compact+0x198>
 801bbfe:	69e2      	ldr	r2, [r4, #28]
 801bc00:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801bc04:	d026      	beq.n	801bc54 <lfs_dir_compact+0x194>
            if (!lfs_pair_isnull(dir->tail)) {
 801bc06:	f013 0f01 	tst.w	r3, #1
 801bc0a:	d027      	beq.n	801bc5c <lfs_dir_compact+0x19c>
            lfs_gstate_t delta = {0};
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bc10:	930c      	str	r3, [sp, #48]	@ 0x30
 801bc12:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801bc14:	f1bb 0f00 	cmp.w	fp, #0
 801bc18:	d033      	beq.n	801bc82 <lfs_dir_compact+0x1c2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801bc1a:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801bc1e:	a80b      	add	r0, sp, #44	@ 0x2c
 801bc20:	f7fd fd10 	bl	8019644 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801bc24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bc26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801bc2a:	f023 0303 	bic.w	r3, r3, #3
 801bc2e:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801bc30:	aa0b      	add	r2, sp, #44	@ 0x2c
 801bc32:	4621      	mov	r1, r4
 801bc34:	4628      	mov	r0, r5
 801bc36:	f7fe f859 	bl	8019cec <lfs_dir_getgstate>
            if (err) {
 801bc3a:	4603      	mov	r3, r0
 801bc3c:	2800      	cmp	r0, #0
 801bc3e:	d1a0      	bne.n	801bb82 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 801bc40:	2b02      	cmp	r3, #2
 801bc42:	dc29      	bgt.n	801bc98 <lfs_dir_compact+0x1d8>
        if (((uint32_t*)a)[i] != 0) {
 801bc44:	aa1a      	add	r2, sp, #104	@ 0x68
 801bc46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801bc4a:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801bc4e:	bb92      	cbnz	r2, 801bcb6 <lfs_dir_compact+0x1f6>
    for (int i = 0; i < 3; i++) {
 801bc50:	3301      	adds	r3, #1
 801bc52:	e7f5      	b.n	801bc40 <lfs_dir_compact+0x180>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801bc54:	2301      	movs	r3, #1
 801bc56:	e7d6      	b.n	801bc06 <lfs_dir_compact+0x146>
 801bc58:	2301      	movs	r3, #1
 801bc5a:	e7d4      	b.n	801bc06 <lfs_dir_compact+0x146>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801bc5c:	7de2      	ldrb	r2, [r4, #23]
 801bc5e:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801bc62:	f104 0318 	add.w	r3, r4, #24
 801bc66:	493d      	ldr	r1, [pc, #244]	@ (801bd5c <lfs_dir_compact+0x29c>)
 801bc68:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801bc6c:	a90e      	add	r1, sp, #56	@ 0x38
 801bc6e:	4628      	mov	r0, r5
 801bc70:	f7ff fdc4 	bl	801b7fc <lfs_dir_commitattr>
                if (err) {
 801bc74:	4603      	mov	r3, r0
 801bc76:	2800      	cmp	r0, #0
 801bc78:	d0c8      	beq.n	801bc0c <lfs_dir_compact+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 801bc7a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bc7e:	d180      	bne.n	801bb82 <lfs_dir_compact+0xc2>
 801bc80:	e73d      	b.n	801bafe <lfs_dir_compact+0x3e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801bc82:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801bc86:	a80b      	add	r0, sp, #44	@ 0x2c
 801bc88:	f7fd fcdc 	bl	8019644 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801bc8c:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801bc90:	a80b      	add	r0, sp, #44	@ 0x2c
 801bc92:	f7fd fcd7 	bl	8019644 <lfs_gstate_xor>
 801bc96:	e7c0      	b.n	801bc1a <lfs_dir_compact+0x15a>
    return true;
 801bc98:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801bc9a:	b973      	cbnz	r3, 801bcba <lfs_dir_compact+0x1fa>
                err = lfs_dir_commitattr(lfs, &commit,
 801bc9c:	ab0b      	add	r3, sp, #44	@ 0x2c
 801bc9e:	4a30      	ldr	r2, [pc, #192]	@ (801bd60 <lfs_dir_compact+0x2a0>)
 801bca0:	a90e      	add	r1, sp, #56	@ 0x38
 801bca2:	4628      	mov	r0, r5
 801bca4:	f7ff fdaa 	bl	801b7fc <lfs_dir_commitattr>
                if (err) {
 801bca8:	4603      	mov	r3, r0
 801bcaa:	b130      	cbz	r0, 801bcba <lfs_dir_compact+0x1fa>
                    if (err == LFS_ERR_CORRUPT) {
 801bcac:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bcb0:	f47f af67 	bne.w	801bb82 <lfs_dir_compact+0xc2>
 801bcb4:	e723      	b.n	801bafe <lfs_dir_compact+0x3e>
            return false;
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	e7ef      	b.n	801bc9a <lfs_dir_compact+0x1da>
            err = lfs_dir_commitcrc(lfs, &commit);
 801bcba:	a90e      	add	r1, sp, #56	@ 0x38
 801bcbc:	4628      	mov	r0, r5
 801bcbe:	f7ff fe03 	bl	801b8c8 <lfs_dir_commitcrc>
            if (err) {
 801bcc2:	4603      	mov	r3, r0
 801bcc4:	b120      	cbz	r0, 801bcd0 <lfs_dir_compact+0x210>
                if (err == LFS_ERR_CORRUPT) {
 801bcc6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bcca:	f47f af5a 	bne.w	801bb82 <lfs_dir_compact+0xc2>
 801bcce:	e716      	b.n	801bafe <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801bcd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bcd2:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801bcd4:	6a12      	ldr	r2, [r2, #32]
 801bcd6:	fbb3 f1f2 	udiv	r1, r3, r2
 801bcda:	fb02 3311 	mls	r3, r2, r1, r3
 801bcde:	b9db      	cbnz	r3, 801bd18 <lfs_dir_compact+0x258>
    lfs_block_t t = pair[0];
 801bce0:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801bce2:	6862      	ldr	r2, [r4, #4]
 801bce4:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801bce6:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801bce8:	ebaa 0808 	sub.w	r8, sl, r8
 801bcec:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801bcf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bcf2:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801bcf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bcf6:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801bcf8:	2200      	movs	r2, #0
 801bcfa:	64aa      	str	r2, [r5, #72]	@ 0x48
 801bcfc:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801bcfe:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801bd00:	f1bb 0f00 	cmp.w	fp, #0
 801bd04:	d106      	bne.n	801bd14 <lfs_dir_compact+0x254>
                lfs->gdisk = lfs->gstate;
 801bd06:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801bd0a:	3530      	adds	r5, #48	@ 0x30
 801bd0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801bd10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801bd14:	465b      	mov	r3, fp
 801bd16:	e734      	b.n	801bb82 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801bd18:	4b12      	ldr	r3, [pc, #72]	@ (801bd64 <lfs_dir_compact+0x2a4>)
 801bd1a:	4a13      	ldr	r2, [pc, #76]	@ (801bd68 <lfs_dir_compact+0x2a8>)
 801bd1c:	f640 0106 	movw	r1, #2054	@ 0x806
 801bd20:	4812      	ldr	r0, [pc, #72]	@ (801bd6c <lfs_dir_compact+0x2ac>)
 801bd22:	f00b f98b 	bl	802703c <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801bd26:	4b12      	ldr	r3, [pc, #72]	@ (801bd70 <lfs_dir_compact+0x2b0>)
 801bd28:	9300      	str	r3, [sp, #0]
 801bd2a:	6863      	ldr	r3, [r4, #4]
 801bd2c:	f640 0218 	movw	r2, #2072	@ 0x818
 801bd30:	490e      	ldr	r1, [pc, #56]	@ (801bd6c <lfs_dir_compact+0x2ac>)
 801bd32:	4810      	ldr	r0, [pc, #64]	@ (801bd74 <lfs_dir_compact+0x2b4>)
 801bd34:	f00b f9b6 	bl	80270a4 <printf>
 801bd38:	e6e8      	b.n	801bb0c <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801bd3a:	4b0d      	ldr	r3, [pc, #52]	@ (801bd70 <lfs_dir_compact+0x2b0>)
 801bd3c:	9300      	str	r3, [sp, #0]
 801bd3e:	6863      	ldr	r3, [r4, #4]
 801bd40:	f640 021d 	movw	r2, #2077	@ 0x81d
 801bd44:	4909      	ldr	r1, [pc, #36]	@ (801bd6c <lfs_dir_compact+0x2ac>)
 801bd46:	480c      	ldr	r0, [pc, #48]	@ (801bd78 <lfs_dir_compact+0x2b8>)
 801bd48:	f00b f9ac 	bl	80270a4 <printf>
            return LFS_ERR_NOSPC;
 801bd4c:	f06f 031b 	mvn.w	r3, #27
 801bd50:	e717      	b.n	801bb82 <lfs_dir_compact+0xc2>
 801bd52:	bf00      	nop
 801bd54:	0801b8b7 	.word	0x0801b8b7
 801bd58:	400ffc00 	.word	0x400ffc00
 801bd5c:	000ffc08 	.word	0x000ffc08
 801bd60:	7ffffc0c 	.word	0x7ffffc0c
 801bd64:	080358fc 	.word	0x080358fc
 801bd68:	08036330 	.word	0x08036330
 801bd6c:	08035660 	.word	0x08035660
 801bd70:	08033984 	.word	0x08033984
 801bd74:	08035878 	.word	0x08035878
 801bd78:	08035924 	.word	0x08035924

0801bd7c <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801bd7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd80:	b08d      	sub	sp, #52	@ 0x34
 801bd82:	4605      	mov	r5, r0
 801bd84:	460c      	mov	r4, r1
 801bd86:	4691      	mov	r9, r2
 801bd88:	461e      	mov	r6, r3
 801bd8a:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801bd8e:	a904      	add	r1, sp, #16
 801bd90:	f7ff f8fa 	bl	801af88 <lfs_dir_alloc>
    if (err) {
 801bd94:	4607      	mov	r7, r0
 801bd96:	b118      	cbz	r0, 801bda0 <lfs_dir_split+0x24>
}
 801bd98:	4638      	mov	r0, r7
 801bd9a:	b00d      	add	sp, #52	@ 0x34
 801bd9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801bda0:	7de3      	ldrb	r3, [r4, #23]
 801bda2:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801bda6:	69a3      	ldr	r3, [r4, #24]
 801bda8:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801bdaa:	69e3      	ldr	r3, [r4, #28]
 801bdac:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801bdae:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801bdb2:	9302      	str	r3, [sp, #8]
 801bdb4:	f8cd 8004 	str.w	r8, [sp, #4]
 801bdb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bdba:	9300      	str	r3, [sp, #0]
 801bdbc:	4633      	mov	r3, r6
 801bdbe:	464a      	mov	r2, r9
 801bdc0:	a904      	add	r1, sp, #16
 801bdc2:	4628      	mov	r0, r5
 801bdc4:	f7ff fe7c 	bl	801bac0 <lfs_dir_compact>
    if (res < 0) {
 801bdc8:	2800      	cmp	r0, #0
 801bdca:	db17      	blt.n	801bdfc <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801bdcc:	9904      	ldr	r1, [sp, #16]
 801bdce:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801bdd0:	9a05      	ldr	r2, [sp, #20]
 801bdd2:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801bdd4:	2301      	movs	r3, #1
 801bdd6:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801bdd8:	6823      	ldr	r3, [r4, #0]
 801bdda:	6a28      	ldr	r0, [r5, #32]
 801bddc:	4283      	cmp	r3, r0
 801bdde:	d007      	beq.n	801bdf0 <lfs_dir_split+0x74>
 801bde0:	6866      	ldr	r6, [r4, #4]
 801bde2:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801bde4:	42a6      	cmp	r6, r4
 801bde6:	d003      	beq.n	801bdf0 <lfs_dir_split+0x74>
 801bde8:	42a3      	cmp	r3, r4
 801bdea:	d001      	beq.n	801bdf0 <lfs_dir_split+0x74>
 801bdec:	42b0      	cmp	r0, r6
 801bdee:	d1d3      	bne.n	801bd98 <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801bdf0:	f1b8 0f00 	cmp.w	r8, #0
 801bdf4:	d1d0      	bne.n	801bd98 <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801bdf6:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801bdf8:	626a      	str	r2, [r5, #36]	@ 0x24
 801bdfa:	e7cd      	b.n	801bd98 <lfs_dir_split+0x1c>
        return res;
 801bdfc:	4607      	mov	r7, r0
 801bdfe:	e7cb      	b.n	801bd98 <lfs_dir_split+0x1c>

0801be00 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be04:	b091      	sub	sp, #68	@ 0x44
 801be06:	4607      	mov	r7, r0
 801be08:	4615      	mov	r5, r2
 801be0a:	4699      	mov	r9, r3
 801be0c:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801be10:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801be14:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801be18:	910b      	str	r1, [sp, #44]	@ 0x2c
 801be1a:	e04c      	b.n	801beb6 <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801be1c:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801be1e:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801be20:	4403      	add	r3, r0
 801be22:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801be24:	fbb3 f1f0 	udiv	r1, r3, r0
 801be28:	fb00 3111 	mls	r1, r0, r1, r3
 801be2c:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801be2e:	4293      	cmp	r3, r2
 801be30:	bf28      	it	cs
 801be32:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801be34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801be36:	429a      	cmp	r2, r3
 801be38:	d92d      	bls.n	801be96 <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801be3a:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801be3e:	eba6 0804 	sub.w	r8, r6, r4
 801be42:	f1b8 0f01 	cmp.w	r8, #1
 801be46:	d926      	bls.n	801be96 <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801be48:	2200      	movs	r2, #0
 801be4a:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801be4c:	b2a1      	uxth	r1, r4
 801be4e:	ab0d      	add	r3, sp, #52	@ 0x34
 801be50:	9308      	str	r3, [sp, #32]
 801be52:	4b4d      	ldr	r3, [pc, #308]	@ (801bf88 <lfs_dir_splittingcompact+0x188>)
 801be54:	9307      	str	r3, [sp, #28]
 801be56:	424b      	negs	r3, r1
 801be58:	b21b      	sxth	r3, r3
 801be5a:	9306      	str	r3, [sp, #24]
 801be5c:	9605      	str	r6, [sp, #20]
 801be5e:	9104      	str	r1, [sp, #16]
 801be60:	9203      	str	r2, [sp, #12]
 801be62:	4b4a      	ldr	r3, [pc, #296]	@ (801bf8c <lfs_dir_splittingcompact+0x18c>)
 801be64:	9302      	str	r3, [sp, #8]
 801be66:	f8cd 9004 	str.w	r9, [sp, #4]
 801be6a:	9500      	str	r5, [sp, #0]
 801be6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801be70:	4651      	mov	r1, sl
 801be72:	4638      	mov	r0, r7
 801be74:	f7fd ffca 	bl	8019e0c <lfs_dir_traverse>
            if (err) {
 801be78:	4603      	mov	r3, r0
 801be7a:	2800      	cmp	r0, #0
 801be7c:	d15b      	bne.n	801bf36 <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801be7e:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801be82:	d8da      	bhi.n	801be3a <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801be84:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801be86:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801be88:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801be8c:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801be8e:	2800      	cmp	r0, #0
 801be90:	d0c4      	beq.n	801be1c <lfs_dir_splittingcompact+0x1c>
 801be92:	0843      	lsrs	r3, r0, #1
 801be94:	e7c3      	b.n	801be1e <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801be96:	455c      	cmp	r4, fp
 801be98:	d022      	beq.n	801bee0 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801be9a:	b2a4      	uxth	r4, r4
 801be9c:	9602      	str	r6, [sp, #8]
 801be9e:	9401      	str	r4, [sp, #4]
 801bea0:	f8cd a000 	str.w	sl, [sp]
 801bea4:	464b      	mov	r3, r9
 801bea6:	462a      	mov	r2, r5
 801bea8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801beaa:	4638      	mov	r0, r7
 801beac:	f7ff ff66 	bl	801bd7c <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801beb0:	4603      	mov	r3, r0
 801beb2:	b910      	cbnz	r0, 801beba <lfs_dir_splittingcompact+0xba>
            end = split;
 801beb4:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801beb6:	465c      	mov	r4, fp
        while (end - split > 1) {
 801beb8:	e7c1      	b.n	801be3e <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801beba:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801bebe:	f110 0f1c 	cmn.w	r0, #28
 801bec2:	d138      	bne.n	801bf36 <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801bec4:	4b32      	ldr	r3, [pc, #200]	@ (801bf90 <lfs_dir_splittingcompact+0x190>)
 801bec6:	9301      	str	r3, [sp, #4]
 801bec8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801becc:	9300      	str	r3, [sp, #0]
 801bece:	f8d8 3000 	ldr.w	r3, [r8]
 801bed2:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801bed6:	492f      	ldr	r1, [pc, #188]	@ (801bf94 <lfs_dir_splittingcompact+0x194>)
 801bed8:	482f      	ldr	r0, [pc, #188]	@ (801bf98 <lfs_dir_splittingcompact+0x198>)
 801beda:	f00b f8e3 	bl	80270a4 <printf>
            break;
 801bede:	e001      	b.n	801bee4 <lfs_dir_splittingcompact+0xe4>
 801bee0:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801bee4:	4641      	mov	r1, r8
 801bee6:	4638      	mov	r0, r7
 801bee8:	f7fd fc76 	bl	80197d8 <lfs_dir_needsrelocation>
 801beec:	b1b8      	cbz	r0, 801bf1e <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801beee:	2300      	movs	r3, #0
 801bef0:	930e      	str	r3, [sp, #56]	@ 0x38
 801bef2:	2301      	movs	r3, #1
 801bef4:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801bef6:	f8d8 2000 	ldr.w	r2, [r8]
 801befa:	b132      	cbz	r2, 801bf0a <lfs_dir_splittingcompact+0x10a>
 801befc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bf00:	2b01      	cmp	r3, #1
 801bf02:	d002      	beq.n	801bf0a <lfs_dir_splittingcompact+0x10a>
 801bf04:	2a01      	cmp	r2, #1
 801bf06:	d000      	beq.n	801bf0a <lfs_dir_splittingcompact+0x10a>
 801bf08:	b94b      	cbnz	r3, 801bf1e <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801bf0a:	4638      	mov	r0, r7
 801bf0c:	f7ff fbe4 	bl	801b6d8 <lfs_fs_size_>
        if (size < 0) {
 801bf10:	1e03      	subs	r3, r0, #0
 801bf12:	db10      	blt.n	801bf36 <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801bf14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801bf16:	1ad3      	subs	r3, r2, r3
 801bf18:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801bf1c:	d80f      	bhi.n	801bf3e <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801bf1e:	9602      	str	r6, [sp, #8]
 801bf20:	f8cd b004 	str.w	fp, [sp, #4]
 801bf24:	f8cd a000 	str.w	sl, [sp]
 801bf28:	464b      	mov	r3, r9
 801bf2a:	462a      	mov	r2, r5
 801bf2c:	4641      	mov	r1, r8
 801bf2e:	4638      	mov	r0, r7
 801bf30:	f7ff fdc6 	bl	801bac0 <lfs_dir_compact>
 801bf34:	4603      	mov	r3, r0
}
 801bf36:	4618      	mov	r0, r3
 801bf38:	b011      	add	sp, #68	@ 0x44
 801bf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801bf3e:	4b14      	ldr	r3, [pc, #80]	@ (801bf90 <lfs_dir_splittingcompact+0x190>)
 801bf40:	9300      	str	r3, [sp, #0]
 801bf42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bf46:	f640 0286 	movw	r2, #2182	@ 0x886
 801bf4a:	4912      	ldr	r1, [pc, #72]	@ (801bf94 <lfs_dir_splittingcompact+0x194>)
 801bf4c:	4813      	ldr	r0, [pc, #76]	@ (801bf9c <lfs_dir_splittingcompact+0x19c>)
 801bf4e:	f00b f8a9 	bl	80270a4 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801bf52:	9602      	str	r6, [sp, #8]
 801bf54:	f8cd b004 	str.w	fp, [sp, #4]
 801bf58:	f8cd a000 	str.w	sl, [sp]
 801bf5c:	464b      	mov	r3, r9
 801bf5e:	462a      	mov	r2, r5
 801bf60:	4641      	mov	r1, r8
 801bf62:	4638      	mov	r0, r7
 801bf64:	f7ff ff0a 	bl	801bd7c <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801bf68:	4603      	mov	r3, r0
 801bf6a:	b150      	cbz	r0, 801bf82 <lfs_dir_splittingcompact+0x182>
 801bf6c:	f110 0f1c 	cmn.w	r0, #28
 801bf70:	d1e1      	bne.n	801bf36 <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801bf72:	4b07      	ldr	r3, [pc, #28]	@ (801bf90 <lfs_dir_splittingcompact+0x190>)
 801bf74:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801bf78:	4906      	ldr	r1, [pc, #24]	@ (801bf94 <lfs_dir_splittingcompact+0x194>)
 801bf7a:	4809      	ldr	r0, [pc, #36]	@ (801bfa0 <lfs_dir_splittingcompact+0x1a0>)
 801bf7c:	f00b f892 	bl	80270a4 <printf>
 801bf80:	e7cd      	b.n	801bf1e <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801bf82:	2601      	movs	r6, #1
 801bf84:	e7cb      	b.n	801bf1e <lfs_dir_splittingcompact+0x11e>
 801bf86:	bf00      	nop
 801bf88:	080197bd 	.word	0x080197bd
 801bf8c:	400ffc00 	.word	0x400ffc00
 801bf90:	08033984 	.word	0x08033984
 801bf94:	08035660 	.word	0x08035660
 801bf98:	0803595c 	.word	0x0803595c
 801bf9c:	0803598c 	.word	0x0803598c
 801bfa0:	080359bc 	.word	0x080359bc

0801bfa4 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfa8:	b09b      	sub	sp, #108	@ 0x6c
 801bfaa:	4607      	mov	r7, r0
 801bfac:	460e      	mov	r6, r1
 801bfae:	4691      	mov	r9, r2
 801bfb0:	461d      	mov	r5, r3
 801bfb2:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801bfb6:	2300      	movs	r3, #0
    bool hasdelete = false;
 801bfb8:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801bfba:	e003      	b.n	801bfc4 <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801bfbc:	8ab2      	ldrh	r2, [r6, #20]
 801bfbe:	3201      	adds	r2, #1
 801bfc0:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801bfc2:	3301      	adds	r3, #1
 801bfc4:	4543      	cmp	r3, r8
 801bfc6:	da2d      	bge.n	801c024 <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801bfc8:	00d8      	lsls	r0, r3, #3
 801bfca:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801bfce:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801bfd2:	0d11      	lsrs	r1, r2, #20
 801bfd4:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801bfd8:	f240 4e01 	movw	lr, #1025	@ 0x401
 801bfdc:	4572      	cmp	r2, lr
 801bfde:	d0ed      	beq.n	801bfbc <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801bfe0:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801bfe4:	4572      	cmp	r2, lr
 801bfe6:	d00f      	beq.n	801c008 <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801bfe8:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801bfec:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801bff0:	d1e7      	bne.n	801bfc2 <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801bff2:	6862      	ldr	r2, [r4, #4]
 801bff4:	6812      	ldr	r2, [r2, #0]
 801bff6:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801bff8:	6862      	ldr	r2, [r4, #4]
 801bffa:	6852      	ldr	r2, [r2, #4]
 801bffc:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801bffe:	582a      	ldr	r2, [r5, r0]
 801c000:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801c004:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801c006:	e7dc      	b.n	801bfc2 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801c008:	8ab2      	ldrh	r2, [r6, #20]
 801c00a:	b122      	cbz	r2, 801c016 <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801c00c:	3a01      	subs	r2, #1
 801c00e:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801c010:	f04f 0c01 	mov.w	ip, #1
 801c014:	e7d5      	b.n	801bfc2 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801c016:	4ba0      	ldr	r3, [pc, #640]	@ (801c298 <lfs_dir_relocatingcommit+0x2f4>)
 801c018:	4aa0      	ldr	r2, [pc, #640]	@ (801c29c <lfs_dir_relocatingcommit+0x2f8>)
 801c01a:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801c01e:	48a0      	ldr	r0, [pc, #640]	@ (801c2a0 <lfs_dir_relocatingcommit+0x2fc>)
 801c020:	f00b f80c 	bl	802703c <__assert_func>
    if (hasdelete && dir->count == 0) {
 801c024:	f1bc 0f00 	cmp.w	ip, #0
 801c028:	d01b      	beq.n	801c062 <lfs_dir_relocatingcommit+0xbe>
 801c02a:	8ab3      	ldrh	r3, [r6, #20]
 801c02c:	b9cb      	cbnz	r3, 801c062 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801c02e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c030:	b15b      	cbz	r3, 801c04a <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801c032:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801c034:	4631      	mov	r1, r6
 801c036:	4638      	mov	r0, r7
 801c038:	f7ff fb5e 	bl	801b6f8 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801c03c:	4682      	mov	sl, r0
 801c03e:	b158      	cbz	r0, 801c058 <lfs_dir_relocatingcommit+0xb4>
 801c040:	f110 0f02 	cmn.w	r0, #2
 801c044:	f040 8159 	bne.w	801c2fa <lfs_dir_relocatingcommit+0x356>
 801c048:	e00b      	b.n	801c062 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801c04a:	4b96      	ldr	r3, [pc, #600]	@ (801c2a4 <lfs_dir_relocatingcommit+0x300>)
 801c04c:	4a93      	ldr	r2, [pc, #588]	@ (801c29c <lfs_dir_relocatingcommit+0x2f8>)
 801c04e:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801c052:	4893      	ldr	r0, [pc, #588]	@ (801c2a0 <lfs_dir_relocatingcommit+0x2fc>)
 801c054:	f00a fff2 	bl	802703c <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801c058:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c05a:	7ddb      	ldrb	r3, [r3, #23]
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	f040 80bf 	bne.w	801c1e0 <lfs_dir_relocatingcommit+0x23c>
    if (dir->erased) {
 801c062:	7db4      	ldrb	r4, [r6, #22]
 801c064:	2c00      	cmp	r4, #0
 801c066:	d02e      	beq.n	801c0c6 <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801c068:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801c06a:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801c06c:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801c06e:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801c070:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801c072:	9212      	str	r2, [sp, #72]	@ 0x48
 801c074:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c078:	9213      	str	r2, [sp, #76]	@ 0x4c
 801c07a:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801c07c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c07e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801c080:	2b00      	cmp	r3, #0
 801c082:	d03c      	beq.n	801c0fe <lfs_dir_relocatingcommit+0x15a>
 801c084:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801c086:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801c088:	9718      	str	r7, [sp, #96]	@ 0x60
 801c08a:	ab10      	add	r3, sp, #64	@ 0x40
 801c08c:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801c08e:	ab18      	add	r3, sp, #96	@ 0x60
 801c090:	9308      	str	r3, [sp, #32]
 801c092:	4b85      	ldr	r3, [pc, #532]	@ (801c2a8 <lfs_dir_relocatingcommit+0x304>)
 801c094:	9307      	str	r3, [sp, #28]
 801c096:	2300      	movs	r3, #0
 801c098:	9306      	str	r3, [sp, #24]
 801c09a:	9305      	str	r3, [sp, #20]
 801c09c:	9304      	str	r3, [sp, #16]
 801c09e:	9303      	str	r3, [sp, #12]
 801c0a0:	9302      	str	r3, [sp, #8]
 801c0a2:	f8cd 8004 	str.w	r8, [sp, #4]
 801c0a6:	9500      	str	r5, [sp, #0]
 801c0a8:	6933      	ldr	r3, [r6, #16]
 801c0aa:	68f2      	ldr	r2, [r6, #12]
 801c0ac:	4631      	mov	r1, r6
 801c0ae:	4638      	mov	r0, r7
 801c0b0:	f7fd feac 	bl	8019e0c <lfs_dir_traverse>
        if (err) {
 801c0b4:	4682      	mov	sl, r0
 801c0b6:	b328      	cbz	r0, 801c104 <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801c0b8:	f110 0f1c 	cmn.w	r0, #28
 801c0bc:	d003      	beq.n	801c0c6 <lfs_dir_relocatingcommit+0x122>
 801c0be:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c0c2:	f040 811a 	bne.w	801c2fa <lfs_dir_relocatingcommit+0x356>
    rcache->block = LFS_BLOCK_NULL;
 801c0c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c0ca:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801c0cc:	8ab3      	ldrh	r3, [r6, #20]
 801c0ce:	9302      	str	r3, [sp, #8]
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	9301      	str	r3, [sp, #4]
 801c0d4:	9600      	str	r6, [sp, #0]
 801c0d6:	4643      	mov	r3, r8
 801c0d8:	462a      	mov	r2, r5
 801c0da:	4631      	mov	r1, r6
 801c0dc:	4638      	mov	r0, r7
 801c0de:	f7ff fe8f 	bl	801be00 <lfs_dir_splittingcompact>
    if (state < 0) {
 801c0e2:	1e01      	subs	r1, r0, #0
 801c0e4:	f2c0 8106 	blt.w	801c2f4 <lfs_dir_relocatingcommit+0x350>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801c0e8:	f8d9 b000 	ldr.w	fp, [r9]
 801c0ec:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801c0f0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801c0f4:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801c0f6:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801c0f8:	4692      	mov	sl, r2
 801c0fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c0fc:	e0db      	b.n	801c2b6 <lfs_dir_relocatingcommit+0x312>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801c0fe:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801c100:	3b08      	subs	r3, #8
 801c102:	e7c0      	b.n	801c086 <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801c104:	2300      	movs	r3, #0
 801c106:	930d      	str	r3, [sp, #52]	@ 0x34
 801c108:	930e      	str	r3, [sp, #56]	@ 0x38
 801c10a:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801c10c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801c110:	a80d      	add	r0, sp, #52	@ 0x34
 801c112:	f7fd fa97 	bl	8019644 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801c116:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801c11a:	a80d      	add	r0, sp, #52	@ 0x34
 801c11c:	f7fd fa92 	bl	8019644 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801c120:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801c124:	a80d      	add	r0, sp, #52	@ 0x34
 801c126:	f7fd fa8d 	bl	8019644 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801c12a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c12c:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801c130:	f023 0303 	bic.w	r3, r3, #3
 801c134:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801c136:	e001      	b.n	801c13c <lfs_dir_relocatingcommit+0x198>
 801c138:	f10a 0a01 	add.w	sl, sl, #1
 801c13c:	f1ba 0f02 	cmp.w	sl, #2
 801c140:	dc07      	bgt.n	801c152 <lfs_dir_relocatingcommit+0x1ae>
        if (((uint32_t*)a)[i] != 0) {
 801c142:	ab1a      	add	r3, sp, #104	@ 0x68
 801c144:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801c148:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d0f3      	beq.n	801c138 <lfs_dir_relocatingcommit+0x194>
            return false;
 801c150:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801c152:	b9c4      	cbnz	r4, 801c186 <lfs_dir_relocatingcommit+0x1e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801c154:	aa0d      	add	r2, sp, #52	@ 0x34
 801c156:	4631      	mov	r1, r6
 801c158:	4638      	mov	r0, r7
 801c15a:	f7fd fdc7 	bl	8019cec <lfs_dir_getgstate>
            if (err) {
 801c15e:	4682      	mov	sl, r0
 801c160:	2800      	cmp	r0, #0
 801c162:	f040 80ca 	bne.w	801c2fa <lfs_dir_relocatingcommit+0x356>
            err = lfs_dir_commitattr(lfs, &commit,
 801c166:	ab0d      	add	r3, sp, #52	@ 0x34
 801c168:	4a50      	ldr	r2, [pc, #320]	@ (801c2ac <lfs_dir_relocatingcommit+0x308>)
 801c16a:	a910      	add	r1, sp, #64	@ 0x40
 801c16c:	4638      	mov	r0, r7
 801c16e:	f7ff fb45 	bl	801b7fc <lfs_dir_commitattr>
            if (err) {
 801c172:	4682      	mov	sl, r0
 801c174:	b138      	cbz	r0, 801c186 <lfs_dir_relocatingcommit+0x1e2>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801c176:	f110 0f1c 	cmn.w	r0, #28
 801c17a:	d0a4      	beq.n	801c0c6 <lfs_dir_relocatingcommit+0x122>
 801c17c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c180:	f040 80bb 	bne.w	801c2fa <lfs_dir_relocatingcommit+0x356>
 801c184:	e79f      	b.n	801c0c6 <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801c186:	a910      	add	r1, sp, #64	@ 0x40
 801c188:	4638      	mov	r0, r7
 801c18a:	f7ff fb9d 	bl	801b8c8 <lfs_dir_commitcrc>
        if (err) {
 801c18e:	4682      	mov	sl, r0
 801c190:	b138      	cbz	r0, 801c1a2 <lfs_dir_relocatingcommit+0x1fe>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801c192:	f110 0f1c 	cmn.w	r0, #28
 801c196:	d096      	beq.n	801c0c6 <lfs_dir_relocatingcommit+0x122>
 801c198:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c19c:	f040 80ad 	bne.w	801c2fa <lfs_dir_relocatingcommit+0x356>
 801c1a0:	e791      	b.n	801c0c6 <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801c1a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c1a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c1a6:	6a11      	ldr	r1, [r2, #32]
 801c1a8:	fbb3 f2f1 	udiv	r2, r3, r1
 801c1ac:	fb01 3212 	mls	r2, r1, r2, r3
 801c1b0:	b97a      	cbnz	r2, 801c1d2 <lfs_dir_relocatingcommit+0x22e>
        dir->off = commit.off;
 801c1b2:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801c1b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c1b6:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801c1b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801c1bc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801c1c0:	ca07      	ldmia	r2, {r0, r1, r2}
 801c1c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801c1c6:	2200      	movs	r2, #0
 801c1c8:	64ba      	str	r2, [r7, #72]	@ 0x48
 801c1ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801c1cc:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801c1ce:	4651      	mov	r1, sl
 801c1d0:	e78a      	b.n	801c0e8 <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801c1d2:	4b37      	ldr	r3, [pc, #220]	@ (801c2b0 <lfs_dir_relocatingcommit+0x30c>)
 801c1d4:	4a31      	ldr	r2, [pc, #196]	@ (801c29c <lfs_dir_relocatingcommit+0x2f8>)
 801c1d6:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801c1da:	4831      	ldr	r0, [pc, #196]	@ (801c2a0 <lfs_dir_relocatingcommit+0x2fc>)
 801c1dc:	f00a ff2e 	bl	802703c <__assert_func>
            state = LFS_OK_DROPPED;
 801c1e0:	2102      	movs	r1, #2
 801c1e2:	e781      	b.n	801c0e8 <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801c1e4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801c1e8:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801c1ec:	4584      	cmp	ip, r0
 801c1ee:	d10e      	bne.n	801c20e <lfs_dir_relocatingcommit+0x26a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801c1f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c1f4:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801c1f6:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801c1f8:	3301      	adds	r3, #1
 801c1fa:	4543      	cmp	r3, r8
 801c1fc:	da34      	bge.n	801c268 <lfs_dir_relocatingcommit+0x2c4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801c1fe:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801c202:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801c206:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801c20a:	4282      	cmp	r2, r0
 801c20c:	d0ea      	beq.n	801c1e4 <lfs_dir_relocatingcommit+0x240>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801c20e:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801c212:	4282      	cmp	r2, r0
 801c214:	d011      	beq.n	801c23a <lfs_dir_relocatingcommit+0x296>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801c216:	f240 4001 	movw	r0, #1025	@ 0x401
 801c21a:	4282      	cmp	r2, r0
 801c21c:	d1ec      	bne.n	801c1f8 <lfs_dir_relocatingcommit+0x254>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801c21e:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801c220:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801c224:	428a      	cmp	r2, r1
 801c226:	d3e7      	bcc.n	801c1f8 <lfs_dir_relocatingcommit+0x254>
                        d->id += 1;
 801c228:	3201      	adds	r2, #1
 801c22a:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801c22c:	79a2      	ldrb	r2, [r4, #6]
 801c22e:	2a02      	cmp	r2, #2
 801c230:	d1e2      	bne.n	801c1f8 <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos += 1;
 801c232:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801c234:	3201      	adds	r2, #1
 801c236:	62a2      	str	r2, [r4, #40]	@ 0x28
 801c238:	e7de      	b.n	801c1f8 <lfs_dir_relocatingcommit+0x254>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801c23a:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801c23c:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801c240:	4560      	cmp	r0, ip
 801c242:	d9e8      	bls.n	801c216 <lfs_dir_relocatingcommit+0x272>
                        d->id -= 1;
 801c244:	3801      	subs	r0, #1
 801c246:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801c248:	79a2      	ldrb	r2, [r4, #6]
 801c24a:	2a02      	cmp	r2, #2
 801c24c:	d1d4      	bne.n	801c1f8 <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos -= 1;
 801c24e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801c250:	3a01      	subs	r2, #1
 801c252:	62a2      	str	r2, [r4, #40]	@ 0x28
 801c254:	e7d0      	b.n	801c1f8 <lfs_dir_relocatingcommit+0x254>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801c256:	f104 0220 	add.w	r2, r4, #32
 801c25a:	f104 0108 	add.w	r1, r4, #8
 801c25e:	4638      	mov	r0, r7
 801c260:	f7fe fd24 	bl	801acac <lfs_dir_fetch>
                if (err) {
 801c264:	2800      	cmp	r0, #0
 801c266:	d147      	bne.n	801c2f8 <lfs_dir_relocatingcommit+0x354>
            while (d->id >= d->m.count && d->m.split) {
 801c268:	88a3      	ldrh	r3, [r4, #4]
 801c26a:	8ba1      	ldrh	r1, [r4, #28]
 801c26c:	428b      	cmp	r3, r1
 801c26e:	d321      	bcc.n	801c2b4 <lfs_dir_relocatingcommit+0x310>
 801c270:	7fe2      	ldrb	r2, [r4, #31]
 801c272:	b1fa      	cbz	r2, 801c2b4 <lfs_dir_relocatingcommit+0x310>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c274:	6a22      	ldr	r2, [r4, #32]
 801c276:	6a38      	ldr	r0, [r7, #32]
 801c278:	4282      	cmp	r2, r0
 801c27a:	d0ec      	beq.n	801c256 <lfs_dir_relocatingcommit+0x2b2>
 801c27c:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801c280:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801c284:	45e6      	cmp	lr, ip
 801c286:	d0e6      	beq.n	801c256 <lfs_dir_relocatingcommit+0x2b2>
 801c288:	4562      	cmp	r2, ip
 801c28a:	d0e4      	beq.n	801c256 <lfs_dir_relocatingcommit+0x2b2>
 801c28c:	4570      	cmp	r0, lr
 801c28e:	d0e2      	beq.n	801c256 <lfs_dir_relocatingcommit+0x2b2>
                    d->id -= d->m.count;
 801c290:	1a5b      	subs	r3, r3, r1
 801c292:	80a3      	strh	r3, [r4, #4]
 801c294:	e7df      	b.n	801c256 <lfs_dir_relocatingcommit+0x2b2>
 801c296:	bf00      	nop
 801c298:	080359e8 	.word	0x080359e8
 801c29c:	08036360 	.word	0x08036360
 801c2a0:	08035660 	.word	0x08035660
 801c2a4:	080359f8 	.word	0x080359f8
 801c2a8:	0801b8b7 	.word	0x0801b8b7
 801c2ac:	7ffffc0c 	.word	0x7ffffc0c
 801c2b0:	080358fc 	.word	0x080358fc
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801c2b4:	6824      	ldr	r4, [r4, #0]
 801c2b6:	b1d4      	cbz	r4, 801c2ee <lfs_dir_relocatingcommit+0x34a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c2b8:	68a3      	ldr	r3, [r4, #8]
 801c2ba:	459b      	cmp	fp, r3
 801c2bc:	d006      	beq.n	801c2cc <lfs_dir_relocatingcommit+0x328>
 801c2be:	68e2      	ldr	r2, [r4, #12]
 801c2c0:	4592      	cmp	sl, r2
 801c2c2:	d003      	beq.n	801c2cc <lfs_dir_relocatingcommit+0x328>
 801c2c4:	459a      	cmp	sl, r3
 801c2c6:	d001      	beq.n	801c2cc <lfs_dir_relocatingcommit+0x328>
 801c2c8:	4593      	cmp	fp, r2
 801c2ca:	d1f3      	bne.n	801c2b4 <lfs_dir_relocatingcommit+0x310>
            d->m = *dir;
 801c2cc:	f104 0c08 	add.w	ip, r4, #8
 801c2d0:	46b6      	mov	lr, r6
 801c2d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c2d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c2da:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801c2de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801c2e2:	f104 0308 	add.w	r3, r4, #8
 801c2e6:	454b      	cmp	r3, r9
 801c2e8:	d0be      	beq.n	801c268 <lfs_dir_relocatingcommit+0x2c4>
                for (int i = 0; i < attrcount; i++) {
 801c2ea:	2300      	movs	r3, #0
 801c2ec:	e785      	b.n	801c1fa <lfs_dir_relocatingcommit+0x256>
    return state;
 801c2ee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c2f0:	468a      	mov	sl, r1
 801c2f2:	e002      	b.n	801c2fa <lfs_dir_relocatingcommit+0x356>
        return state;
 801c2f4:	468a      	mov	sl, r1
 801c2f6:	e000      	b.n	801c2fa <lfs_dir_relocatingcommit+0x356>
 801c2f8:	4682      	mov	sl, r0
}
 801c2fa:	4650      	mov	r0, sl
 801c2fc:	b01b      	add	sp, #108	@ 0x6c
 801c2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c302:	bf00      	nop

0801c304 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801c304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c308:	b0a3      	sub	sp, #140	@ 0x8c
 801c30a:	4605      	mov	r5, r0
 801c30c:	460e      	mov	r6, r1
 801c30e:	4690      	mov	r8, r2
 801c310:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c312:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801c314:	e003      	b.n	801c31e <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801c316:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801c318:	2b01      	cmp	r3, #1
 801c31a:	d012      	beq.n	801c342 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c31c:	6824      	ldr	r4, [r4, #0]
 801c31e:	b34c      	cbz	r4, 801c374 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801c320:	f104 0108 	add.w	r1, r4, #8
 801c324:	42b1      	cmp	r1, r6
 801c326:	d0f9      	beq.n	801c31c <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c328:	68a1      	ldr	r1, [r4, #8]
 801c32a:	6833      	ldr	r3, [r6, #0]
 801c32c:	428b      	cmp	r3, r1
 801c32e:	d0f2      	beq.n	801c316 <lfs_dir_orphaningcommit+0x12>
 801c330:	68e0      	ldr	r0, [r4, #12]
 801c332:	6872      	ldr	r2, [r6, #4]
 801c334:	4282      	cmp	r2, r0
 801c336:	d0ee      	beq.n	801c316 <lfs_dir_orphaningcommit+0x12>
 801c338:	428a      	cmp	r2, r1
 801c33a:	d0ec      	beq.n	801c316 <lfs_dir_orphaningcommit+0x12>
 801c33c:	4298      	cmp	r0, r3
 801c33e:	d1ed      	bne.n	801c31c <lfs_dir_orphaningcommit+0x18>
 801c340:	e7e9      	b.n	801c316 <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801c342:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c344:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c348:	d0e8      	beq.n	801c31c <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801c34a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c34c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c34e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801c350:	429a      	cmp	r2, r3
 801c352:	d9e3      	bls.n	801c31c <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801c354:	4621      	mov	r1, r4
 801c356:	4628      	mov	r0, r5
 801c358:	f7fe feee 	bl	801b138 <lfs_file_outline>
            if (err) {
 801c35c:	4607      	mov	r7, r0
 801c35e:	2800      	cmp	r0, #0
 801c360:	f040 81bc 	bne.w	801c6dc <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801c364:	4621      	mov	r1, r4
 801c366:	4628      	mov	r0, r5
 801c368:	f7ff f866 	bl	801b438 <lfs_file_flush>
            if (err) {
 801c36c:	4607      	mov	r7, r0
 801c36e:	2800      	cmp	r0, #0
 801c370:	d0d4      	beq.n	801c31c <lfs_dir_orphaningcommit+0x18>
 801c372:	e1b3      	b.n	801c6dc <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801c374:	6833      	ldr	r3, [r6, #0]
 801c376:	9316      	str	r3, [sp, #88]	@ 0x58
 801c378:	6873      	ldr	r3, [r6, #4]
 801c37a:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801c37c:	ac0e      	add	r4, sp, #56	@ 0x38
 801c37e:	4637      	mov	r7, r6
 801c380:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801c382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c384:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801c388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801c38c:	ab06      	add	r3, sp, #24
 801c38e:	9301      	str	r3, [sp, #4]
 801c390:	f8cd 9000 	str.w	r9, [sp]
 801c394:	4643      	mov	r3, r8
 801c396:	4632      	mov	r2, r6
 801c398:	a90e      	add	r1, sp, #56	@ 0x38
 801c39a:	4628      	mov	r0, r5
 801c39c:	f7ff fe02 	bl	801bfa4 <lfs_dir_relocatingcommit>
    if (state < 0) {
 801c3a0:	1e07      	subs	r7, r0, #0
 801c3a2:	f2c0 819b 	blt.w	801c6dc <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c3a6:	6833      	ldr	r3, [r6, #0]
 801c3a8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c3aa:	429a      	cmp	r2, r3
 801c3ac:	d007      	beq.n	801c3be <lfs_dir_orphaningcommit+0xba>
 801c3ae:	6870      	ldr	r0, [r6, #4]
 801c3b0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c3b2:	4281      	cmp	r1, r0
 801c3b4:	d003      	beq.n	801c3be <lfs_dir_orphaningcommit+0xba>
 801c3b6:	4299      	cmp	r1, r3
 801c3b8:	d001      	beq.n	801c3be <lfs_dir_orphaningcommit+0xba>
 801c3ba:	4290      	cmp	r0, r2
 801c3bc:	d109      	bne.n	801c3d2 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801c3be:	4634      	mov	r4, r6
 801c3c0:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801c3c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c3c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c3ca:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801c3ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801c3d2:	2f02      	cmp	r7, #2
 801c3d4:	d001      	beq.n	801c3da <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801c3d6:	2600      	movs	r6, #0
 801c3d8:	e0b8      	b.n	801c54c <lfs_dir_orphaningcommit+0x248>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801c3da:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801c3de:	4631      	mov	r1, r6
 801c3e0:	4628      	mov	r0, r5
 801c3e2:	f7fd fc83 	bl	8019cec <lfs_dir_getgstate>
        if (err) {
 801c3e6:	4607      	mov	r7, r0
 801c3e8:	2800      	cmp	r0, #0
 801c3ea:	f040 8177 	bne.w	801c6dc <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801c3ee:	9b06      	ldr	r3, [sp, #24]
 801c3f0:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801c3f2:	9b07      	ldr	r3, [sp, #28]
 801c3f4:	9317      	str	r3, [sp, #92]	@ 0x5c
        lfs_pair_tole32(dir->tail);
 801c3f6:	f106 0118 	add.w	r1, r6, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801c3fa:	7df2      	ldrb	r2, [r6, #23]
 801c3fc:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801c400:	4ba2      	ldr	r3, [pc, #648]	@ (801c68c <lfs_dir_orphaningcommit+0x388>)
 801c402:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801c406:	9318      	str	r3, [sp, #96]	@ 0x60
 801c408:	9119      	str	r1, [sp, #100]	@ 0x64
 801c40a:	2300      	movs	r3, #0
 801c40c:	9301      	str	r3, [sp, #4]
 801c40e:	2301      	movs	r3, #1
 801c410:	9300      	str	r3, [sp, #0]
 801c412:	ab18      	add	r3, sp, #96	@ 0x60
 801c414:	aa16      	add	r2, sp, #88	@ 0x58
 801c416:	a906      	add	r1, sp, #24
 801c418:	4628      	mov	r0, r5
 801c41a:	f7ff fdc3 	bl	801bfa4 <lfs_dir_relocatingcommit>
        if (state < 0) {
 801c41e:	1e07      	subs	r7, r0, #0
 801c420:	f2c0 815c 	blt.w	801c6dc <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801c424:	ac0e      	add	r4, sp, #56	@ 0x38
 801c426:	ae06      	add	r6, sp, #24
 801c428:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c42a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c42c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801c430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c434:	e7cf      	b.n	801c3d6 <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801c436:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c438:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801c43a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c43c:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801c43e:	799a      	ldrb	r2, [r3, #6]
 801c440:	2a02      	cmp	r2, #2
 801c442:	d00d      	beq.n	801c460 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	b1db      	cbz	r3, 801c480 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c448:	689a      	ldr	r2, [r3, #8]
 801c44a:	4291      	cmp	r1, r2
 801c44c:	d0f3      	beq.n	801c436 <lfs_dir_orphaningcommit+0x132>
 801c44e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801c450:	68dc      	ldr	r4, [r3, #12]
 801c452:	4284      	cmp	r4, r0
 801c454:	d0ef      	beq.n	801c436 <lfs_dir_orphaningcommit+0x132>
 801c456:	428c      	cmp	r4, r1
 801c458:	d0ed      	beq.n	801c436 <lfs_dir_orphaningcommit+0x132>
 801c45a:	4290      	cmp	r0, r2
 801c45c:	d1ef      	bne.n	801c43e <lfs_dir_orphaningcommit+0x13a>
 801c45e:	e7ea      	b.n	801c436 <lfs_dir_orphaningcommit+0x132>
 801c460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c462:	428a      	cmp	r2, r1
 801c464:	d007      	beq.n	801c476 <lfs_dir_orphaningcommit+0x172>
 801c466:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801c468:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801c46a:	42a0      	cmp	r0, r4
 801c46c:	d003      	beq.n	801c476 <lfs_dir_orphaningcommit+0x172>
 801c46e:	4288      	cmp	r0, r1
 801c470:	d001      	beq.n	801c476 <lfs_dir_orphaningcommit+0x172>
 801c472:	4294      	cmp	r4, r2
 801c474:	d1e6      	bne.n	801c444 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801c476:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c478:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801c47a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c47c:	631a      	str	r2, [r3, #48]	@ 0x30
 801c47e:	e7e1      	b.n	801c444 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801c480:	aa06      	add	r2, sp, #24
 801c482:	a916      	add	r1, sp, #88	@ 0x58
 801c484:	4628      	mov	r0, r5
 801c486:	f7fe fba5 	bl	801abd4 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801c48a:	1e04      	subs	r4, r0, #0
 801c48c:	f280 8082 	bge.w	801c594 <lfs_dir_orphaningcommit+0x290>
 801c490:	f114 0f02 	cmn.w	r4, #2
 801c494:	f040 8128 	bne.w	801c6e8 <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801c498:	f114 0802 	adds.w	r8, r4, #2
 801c49c:	bf18      	it	ne
 801c49e:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801c4a2:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801c4a4:	aa06      	add	r2, sp, #24
 801c4a6:	a916      	add	r1, sp, #88	@ 0x58
 801c4a8:	4628      	mov	r0, r5
 801c4aa:	f7ff f925 	bl	801b6f8 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801c4ae:	4603      	mov	r3, r0
 801c4b0:	b118      	cbz	r0, 801c4ba <lfs_dir_orphaningcommit+0x1b6>
 801c4b2:	f110 0f02 	cmn.w	r0, #2
 801c4b6:	f040 8119 	bne.w	801c6ec <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801c4ba:	f114 0f02 	cmn.w	r4, #2
 801c4be:	f000 80d6 	beq.w	801c66e <lfs_dir_orphaningcommit+0x36a>
 801c4c2:	f113 0f02 	cmn.w	r3, #2
 801c4c6:	f000 80cb 	beq.w	801c660 <lfs_dir_orphaningcommit+0x35c>
    return lfs_tag_size(a->tag);
 801c4ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801c4cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	f040 80d1 	bne.w	801c678 <lfs_dir_orphaningcommit+0x374>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801c4d6:	a906      	add	r1, sp, #24
 801c4d8:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801c4dc:	f7fd f8c4 	bl	8019668 <lfs_gstate_hasmovehere>
 801c4e0:	2800      	cmp	r0, #0
 801c4e2:	f040 80e1 	bne.w	801c6a8 <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801c4e6:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801c4ea:	9b06      	ldr	r3, [sp, #24]
 801c4ec:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801c4ee:	9b07      	ldr	r3, [sp, #28]
 801c4f0:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801c4f2:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801c4f6:	429c      	cmp	r4, r3
 801c4f8:	f000 80ec 	beq.w	801c6d4 <lfs_dir_orphaningcommit+0x3d0>
 801c4fc:	02a3      	lsls	r3, r4, #10
 801c4fe:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801c502:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801c506:	931e      	str	r3, [sp, #120]	@ 0x78
 801c508:	2100      	movs	r1, #0
 801c50a:	911f      	str	r1, [sp, #124]	@ 0x7c
 801c50c:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801c510:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801c514:	4b5d      	ldr	r3, [pc, #372]	@ (801c68c <lfs_dir_orphaningcommit+0x388>)
 801c516:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801c51a:	9320      	str	r3, [sp, #128]	@ 0x80
 801c51c:	ab0e      	add	r3, sp, #56	@ 0x38
 801c51e:	9321      	str	r3, [sp, #132]	@ 0x84
 801c520:	9101      	str	r1, [sp, #4]
 801c522:	2302      	movs	r3, #2
 801c524:	9300      	str	r3, [sp, #0]
 801c526:	ab1e      	add	r3, sp, #120	@ 0x78
 801c528:	aa16      	add	r2, sp, #88	@ 0x58
 801c52a:	a906      	add	r1, sp, #24
 801c52c:	4628      	mov	r0, r5
 801c52e:	f7ff fd39 	bl	801bfa4 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801c532:	1e07      	subs	r7, r0, #0
 801c534:	f2c0 80d2 	blt.w	801c6dc <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801c538:	ac0e      	add	r4, sp, #56	@ 0x38
 801c53a:	f10d 0c18 	add.w	ip, sp, #24
 801c53e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c544:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801c548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801c54c:	2f01      	cmp	r7, #1
 801c54e:	f040 80c3 	bne.w	801c6d8 <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801c552:	4b4f      	ldr	r3, [pc, #316]	@ (801c690 <lfs_dir_orphaningcommit+0x38c>)
 801c554:	9303      	str	r3, [sp, #12]
 801c556:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c558:	9302      	str	r3, [sp, #8]
 801c55a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c55c:	9301      	str	r3, [sp, #4]
 801c55e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c560:	9300      	str	r3, [sp, #0]
 801c562:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c564:	f640 128c 	movw	r2, #2444	@ 0x98c
 801c568:	494a      	ldr	r1, [pc, #296]	@ (801c694 <lfs_dir_orphaningcommit+0x390>)
 801c56a:	484b      	ldr	r0, [pc, #300]	@ (801c698 <lfs_dir_orphaningcommit+0x394>)
 801c56c:	f00a fd9a 	bl	80270a4 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c570:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801c572:	6a2b      	ldr	r3, [r5, #32]
 801c574:	428b      	cmp	r3, r1
 801c576:	d007      	beq.n	801c588 <lfs_dir_orphaningcommit+0x284>
 801c578:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801c57a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801c57c:	4282      	cmp	r2, r0
 801c57e:	d003      	beq.n	801c588 <lfs_dir_orphaningcommit+0x284>
 801c580:	428a      	cmp	r2, r1
 801c582:	d001      	beq.n	801c588 <lfs_dir_orphaningcommit+0x284>
 801c584:	4298      	cmp	r0, r3
 801c586:	d103      	bne.n	801c590 <lfs_dir_orphaningcommit+0x28c>
            lfs->root[0] = ldir.pair[0];
 801c588:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c58a:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801c58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c58e:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801c590:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801c592:	e758      	b.n	801c446 <lfs_dir_orphaningcommit+0x142>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801c594:	f114 0802 	adds.w	r8, r4, #2
 801c598:	bf18      	it	ne
 801c59a:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801c59e:	2101      	movs	r1, #1
 801c5a0:	4628      	mov	r0, r5
 801c5a2:	f7fd f997 	bl	80198d4 <lfs_fs_preporphans>
            if (err) {
 801c5a6:	4607      	mov	r7, r0
 801c5a8:	2800      	cmp	r0, #0
 801c5aa:	f040 8097 	bne.w	801c6dc <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801c5ae:	a906      	add	r1, sp, #24
 801c5b0:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801c5b4:	f7fd f858 	bl	8019668 <lfs_gstate_hasmovehere>
 801c5b8:	2800      	cmp	r0, #0
 801c5ba:	d131      	bne.n	801c620 <lfs_dir_orphaningcommit+0x31c>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801c5bc:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801c5be:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801c5c2:	9b06      	ldr	r3, [sp, #24]
 801c5c4:	9304      	str	r3, [sp, #16]
 801c5c6:	9b07      	ldr	r3, [sp, #28]
 801c5c8:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801c5ca:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801c5ce:	429f      	cmp	r7, r3
 801c5d0:	d044      	beq.n	801c65c <lfs_dir_orphaningcommit+0x358>
 801c5d2:	02bb      	lsls	r3, r7, #10
 801c5d4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801c5d8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801c5dc:	931a      	str	r3, [sp, #104]	@ 0x68
 801c5de:	2300      	movs	r3, #0
 801c5e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c5e2:	921c      	str	r2, [sp, #112]	@ 0x70
 801c5e4:	aa0e      	add	r2, sp, #56	@ 0x38
 801c5e6:	921d      	str	r2, [sp, #116]	@ 0x74
 801c5e8:	9301      	str	r3, [sp, #4]
 801c5ea:	2302      	movs	r3, #2
 801c5ec:	9300      	str	r3, [sp, #0]
 801c5ee:	ab1a      	add	r3, sp, #104	@ 0x68
 801c5f0:	aa04      	add	r2, sp, #16
 801c5f2:	a906      	add	r1, sp, #24
 801c5f4:	4628      	mov	r0, r5
 801c5f6:	f7ff fcd5 	bl	801bfa4 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801c5fa:	1e07      	subs	r7, r0, #0
 801c5fc:	db6e      	blt.n	801c6dc <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801c5fe:	2f01      	cmp	r7, #1
 801c600:	f47f af50 	bne.w	801c4a4 <lfs_dir_orphaningcommit+0x1a0>
                lpair[0] = ppair[0];
 801c604:	9b04      	ldr	r3, [sp, #16]
 801c606:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801c608:	9b05      	ldr	r3, [sp, #20]
 801c60a:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801c60c:	ac0e      	add	r4, sp, #56	@ 0x38
 801c60e:	ae06      	add	r6, sp, #24
 801c610:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c614:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801c618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801c61c:	2601      	movs	r6, #1
 801c61e:	e795      	b.n	801c54c <lfs_dir_orphaningcommit+0x248>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801c620:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801c622:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801c626:	4b1a      	ldr	r3, [pc, #104]	@ (801c690 <lfs_dir_orphaningcommit+0x38c>)
 801c628:	9302      	str	r3, [sp, #8]
 801c62a:	9701      	str	r7, [sp, #4]
 801c62c:	9b07      	ldr	r3, [sp, #28]
 801c62e:	9300      	str	r3, [sp, #0]
 801c630:	9b06      	ldr	r3, [sp, #24]
 801c632:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801c636:	4917      	ldr	r1, [pc, #92]	@ (801c694 <lfs_dir_orphaningcommit+0x390>)
 801c638:	4818      	ldr	r0, [pc, #96]	@ (801c69c <lfs_dir_orphaningcommit+0x398>)
 801c63a:	f00a fd33 	bl	80270a4 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801c63e:	2200      	movs	r2, #0
 801c640:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801c644:	4628      	mov	r0, r5
 801c646:	f7fd f8f5 	bl	8019834 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801c64a:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801c64e:	42bb      	cmp	r3, r7
 801c650:	d902      	bls.n	801c658 <lfs_dir_orphaningcommit+0x354>
                    tag -= LFS_MKTAG(0, 1, 0);
 801c652:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801c656:	e7b4      	b.n	801c5c2 <lfs_dir_orphaningcommit+0x2be>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801c658:	4622      	mov	r2, r4
 801c65a:	e7b2      	b.n	801c5c2 <lfs_dir_orphaningcommit+0x2be>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801c65c:	2300      	movs	r3, #0
 801c65e:	e7bd      	b.n	801c5dc <lfs_dir_orphaningcommit+0x2d8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801c660:	4b0f      	ldr	r3, [pc, #60]	@ (801c6a0 <lfs_dir_orphaningcommit+0x39c>)
 801c662:	4a10      	ldr	r2, [pc, #64]	@ (801c6a4 <lfs_dir_orphaningcommit+0x3a0>)
 801c664:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801c668:	480a      	ldr	r0, [pc, #40]	@ (801c694 <lfs_dir_orphaningcommit+0x390>)
 801c66a:	f00a fce7 	bl	802703c <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801c66e:	f113 0f02 	cmn.w	r3, #2
 801c672:	f47f af2a 	bne.w	801c4ca <lfs_dir_orphaningcommit+0x1c6>
 801c676:	e769      	b.n	801c54c <lfs_dir_orphaningcommit+0x248>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801c678:	f1c8 0100 	rsb	r1, r8, #0
 801c67c:	4628      	mov	r0, r5
 801c67e:	f7fd f929 	bl	80198d4 <lfs_fs_preporphans>
                if (err) {
 801c682:	4607      	mov	r7, r0
 801c684:	2800      	cmp	r0, #0
 801c686:	f43f af26 	beq.w	801c4d6 <lfs_dir_orphaningcommit+0x1d2>
 801c68a:	e027      	b.n	801c6dc <lfs_dir_orphaningcommit+0x3d8>
 801c68c:	000ffc08 	.word	0x000ffc08
 801c690:	08033984 	.word	0x08033984
 801c694:	08035660 	.word	0x08035660
 801c698:	08035a00 	.word	0x08035a00
 801c69c:	08035a3c 	.word	0x08035a3c
 801c6a0:	08035a80 	.word	0x08035a80
 801c6a4:	080363bc 	.word	0x080363bc
                moveid = lfs_tag_id(lfs->gstate.tag);
 801c6a8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801c6aa:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801c6ae:	4b10      	ldr	r3, [pc, #64]	@ (801c6f0 <lfs_dir_orphaningcommit+0x3ec>)
 801c6b0:	9302      	str	r3, [sp, #8]
 801c6b2:	9401      	str	r4, [sp, #4]
 801c6b4:	9b07      	ldr	r3, [sp, #28]
 801c6b6:	9300      	str	r3, [sp, #0]
 801c6b8:	9b06      	ldr	r3, [sp, #24]
 801c6ba:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801c6be:	490d      	ldr	r1, [pc, #52]	@ (801c6f4 <lfs_dir_orphaningcommit+0x3f0>)
 801c6c0:	480d      	ldr	r0, [pc, #52]	@ (801c6f8 <lfs_dir_orphaningcommit+0x3f4>)
 801c6c2:	f00a fcef 	bl	80270a4 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801c6c6:	2200      	movs	r2, #0
 801c6c8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801c6cc:	4628      	mov	r0, r5
 801c6ce:	f7fd f8b1 	bl	8019834 <lfs_fs_prepmove>
 801c6d2:	e70a      	b.n	801c4ea <lfs_dir_orphaningcommit+0x1e6>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801c6d4:	2300      	movs	r3, #0
 801c6d6:	e716      	b.n	801c506 <lfs_dir_orphaningcommit+0x202>
    return orphans ? LFS_OK_ORPHANED : 0;
 801c6d8:	b926      	cbnz	r6, 801c6e4 <lfs_dir_orphaningcommit+0x3e0>
 801c6da:	2700      	movs	r7, #0
}
 801c6dc:	4638      	mov	r0, r7
 801c6de:	b023      	add	sp, #140	@ 0x8c
 801c6e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801c6e4:	2703      	movs	r7, #3
 801c6e6:	e7f9      	b.n	801c6dc <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801c6e8:	4627      	mov	r7, r4
 801c6ea:	e7f7      	b.n	801c6dc <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801c6ec:	4607      	mov	r7, r0
 801c6ee:	e7f5      	b.n	801c6dc <lfs_dir_orphaningcommit+0x3d8>
 801c6f0:	08033984 	.word	0x08033984
 801c6f4:	08035660 	.word	0x08035660
 801c6f8:	08035a3c 	.word	0x08035a3c

0801c6fc <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801c6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c700:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801c702:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801c704:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801c708:	2b00      	cmp	r3, #0
 801c70a:	f000 80ea 	beq.w	801c8e2 <lfs_fs_deorphan+0x1e6>
 801c70e:	4605      	mov	r5, r0
 801c710:	460f      	mov	r7, r1
    int pass = 0;
 801c712:	2600      	movs	r6, #0
    while (pass < 2) {
 801c714:	2e01      	cmp	r6, #1
 801c716:	f300 80db 	bgt.w	801c8d0 <lfs_fs_deorphan+0x1d4>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801c71a:	2220      	movs	r2, #32
 801c71c:	2100      	movs	r1, #0
 801c71e:	a806      	add	r0, sp, #24
 801c720:	f00d f9de 	bl	8029ae0 <memset>
 801c724:	2301      	movs	r3, #1
 801c726:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801c72a:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801c72c:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 801c730:	e0bd      	b.n	801c8ae <lfs_fs_deorphan+0x1b2>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801c732:	aa16      	add	r2, sp, #88	@ 0x58
 801c734:	a90c      	add	r1, sp, #48	@ 0x30
 801c736:	4628      	mov	r0, r5
 801c738:	f7fe fa4c 	bl	801abd4 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801c73c:	1e04      	subs	r4, r0, #0
 801c73e:	db39      	blt.n	801c7b4 <lfs_fs_deorphan+0xb8>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801c740:	b916      	cbnz	r6, 801c748 <lfs_fs_deorphan+0x4c>
 801c742:	f114 0f02 	cmn.w	r4, #2
 801c746:	d139      	bne.n	801c7bc <lfs_fs_deorphan+0xc0>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801c748:	2e01      	cmp	r6, #1
 801c74a:	f040 80a4 	bne.w	801c896 <lfs_fs_deorphan+0x19a>
 801c74e:	f114 0f02 	cmn.w	r4, #2
 801c752:	f040 80a0 	bne.w	801c896 <lfs_fs_deorphan+0x19a>
 801c756:	2f00      	cmp	r7, #0
 801c758:	f000 809d 	beq.w	801c896 <lfs_fs_deorphan+0x19a>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801c75c:	4b63      	ldr	r3, [pc, #396]	@ (801c8ec <lfs_fs_deorphan+0x1f0>)
 801c75e:	9301      	str	r3, [sp, #4]
 801c760:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c762:	9300      	str	r3, [sp, #0]
 801c764:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c766:	f241 329c 	movw	r2, #5020	@ 0x139c
 801c76a:	4961      	ldr	r1, [pc, #388]	@ (801c8f0 <lfs_fs_deorphan+0x1f4>)
 801c76c:	4861      	ldr	r0, [pc, #388]	@ (801c8f4 <lfs_fs_deorphan+0x1f8>)
 801c76e:	f00a fc99 	bl	80270a4 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801c772:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801c776:	a90e      	add	r1, sp, #56	@ 0x38
 801c778:	4628      	mov	r0, r5
 801c77a:	f7fd fab7 	bl	8019cec <lfs_dir_getgstate>
                    if (err) {
 801c77e:	4604      	mov	r4, r0
 801c780:	2800      	cmp	r0, #0
 801c782:	f040 80af 	bne.w	801c8e4 <lfs_fs_deorphan+0x1e8>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801c786:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801c78a:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801c78e:	4b5a      	ldr	r3, [pc, #360]	@ (801c8f8 <lfs_fs_deorphan+0x1fc>)
 801c790:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801c794:	9322      	str	r3, [sp, #136]	@ 0x88
 801c796:	ab14      	add	r3, sp, #80	@ 0x50
 801c798:	9323      	str	r3, [sp, #140]	@ 0x8c
 801c79a:	2301      	movs	r3, #1
 801c79c:	aa22      	add	r2, sp, #136	@ 0x88
 801c79e:	a906      	add	r1, sp, #24
 801c7a0:	4628      	mov	r0, r5
 801c7a2:	f7ff fdaf 	bl	801c304 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801c7a6:	1e04      	subs	r4, r0, #0
 801c7a8:	f2c0 809c 	blt.w	801c8e4 <lfs_fs_deorphan+0x1e8>
                    if (state == LFS_OK_ORPHANED) {
 801c7ac:	2c03      	cmp	r4, #3
 801c7ae:	d17e      	bne.n	801c8ae <lfs_fs_deorphan+0x1b2>
                        moreorphans = true;
 801c7b0:	46b8      	mov	r8, r7
                    continue;
 801c7b2:	e07c      	b.n	801c8ae <lfs_fs_deorphan+0x1b2>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801c7b4:	f114 0f02 	cmn.w	r4, #2
 801c7b8:	d0c2      	beq.n	801c740 <lfs_fs_deorphan+0x44>
 801c7ba:	e093      	b.n	801c8e4 <lfs_fs_deorphan+0x1e8>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801c7bc:	ab04      	add	r3, sp, #16
 801c7be:	9300      	str	r3, [sp, #0]
 801c7c0:	4623      	mov	r3, r4
 801c7c2:	4a4e      	ldr	r2, [pc, #312]	@ (801c8fc <lfs_fs_deorphan+0x200>)
 801c7c4:	a916      	add	r1, sp, #88	@ 0x58
 801c7c6:	4628      	mov	r0, r5
 801c7c8:	f7fd fa82 	bl	8019cd0 <lfs_dir_get>
                    if (state < 0) {
 801c7cc:	2800      	cmp	r0, #0
 801c7ce:	db50      	blt.n	801c872 <lfs_fs_deorphan+0x176>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801c7d0:	a90c      	add	r1, sp, #48	@ 0x30
 801c7d2:	a804      	add	r0, sp, #16
 801c7d4:	f7fc ff12 	bl	80195fc <lfs_pair_issync>
 801c7d8:	2800      	cmp	r0, #0
 801c7da:	d1b5      	bne.n	801c748 <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 801c7dc:	4b43      	ldr	r3, [pc, #268]	@ (801c8ec <lfs_fs_deorphan+0x1f0>)
 801c7de:	9303      	str	r3, [sp, #12]
 801c7e0:	9b05      	ldr	r3, [sp, #20]
 801c7e2:	9302      	str	r3, [sp, #8]
 801c7e4:	9b04      	ldr	r3, [sp, #16]
 801c7e6:	9301      	str	r3, [sp, #4]
 801c7e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c7ea:	9300      	str	r3, [sp, #0]
 801c7ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c7ee:	f241 3271 	movw	r2, #4977	@ 0x1371
 801c7f2:	493f      	ldr	r1, [pc, #252]	@ (801c8f0 <lfs_fs_deorphan+0x1f4>)
 801c7f4:	4842      	ldr	r0, [pc, #264]	@ (801c900 <lfs_fs_deorphan+0x204>)
 801c7f6:	f00a fc55 	bl	80270a4 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801c7fa:	a906      	add	r1, sp, #24
 801c7fc:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801c800:	f7fc ff32 	bl	8019668 <lfs_gstate_hasmovehere>
 801c804:	b9a0      	cbnz	r0, 801c830 <lfs_fs_deorphan+0x134>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801c806:	2300      	movs	r3, #0
 801c808:	931e      	str	r3, [sp, #120]	@ 0x78
 801c80a:	2300      	movs	r3, #0
 801c80c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c80e:	4b3d      	ldr	r3, [pc, #244]	@ (801c904 <lfs_fs_deorphan+0x208>)
 801c810:	9320      	str	r3, [sp, #128]	@ 0x80
 801c812:	ab04      	add	r3, sp, #16
 801c814:	9321      	str	r3, [sp, #132]	@ 0x84
 801c816:	2302      	movs	r3, #2
 801c818:	aa1e      	add	r2, sp, #120	@ 0x78
 801c81a:	a906      	add	r1, sp, #24
 801c81c:	4628      	mov	r0, r5
 801c81e:	f7ff fd71 	bl	801c304 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801c822:	1e04      	subs	r4, r0, #0
 801c824:	db5e      	blt.n	801c8e4 <lfs_fs_deorphan+0x1e8>
                        if (state == LFS_OK_ORPHANED) {
 801c826:	2c03      	cmp	r4, #3
 801c828:	d141      	bne.n	801c8ae <lfs_fs_deorphan+0x1b2>
                            moreorphans = true;
 801c82a:	f04f 0801 	mov.w	r8, #1
                        continue;
 801c82e:	e03e      	b.n	801c8ae <lfs_fs_deorphan+0x1b2>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801c830:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801c832:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801c836:	4b2d      	ldr	r3, [pc, #180]	@ (801c8ec <lfs_fs_deorphan+0x1f0>)
 801c838:	9302      	str	r3, [sp, #8]
 801c83a:	9401      	str	r4, [sp, #4]
 801c83c:	9b07      	ldr	r3, [sp, #28]
 801c83e:	9300      	str	r3, [sp, #0]
 801c840:	9b06      	ldr	r3, [sp, #24]
 801c842:	f241 327c 	movw	r2, #4988	@ 0x137c
 801c846:	492a      	ldr	r1, [pc, #168]	@ (801c8f0 <lfs_fs_deorphan+0x1f4>)
 801c848:	482f      	ldr	r0, [pc, #188]	@ (801c908 <lfs_fs_deorphan+0x20c>)
 801c84a:	f00a fc2b 	bl	80270a4 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801c84e:	2200      	movs	r2, #0
 801c850:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801c854:	4628      	mov	r0, r5
 801c856:	f7fc ffed 	bl	8019834 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801c85a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801c85e:	429c      	cmp	r4, r3
 801c860:	d005      	beq.n	801c86e <lfs_fs_deorphan+0x172>
 801c862:	02a3      	lsls	r3, r4, #10
 801c864:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801c868:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801c86c:	e7cc      	b.n	801c808 <lfs_fs_deorphan+0x10c>
 801c86e:	2300      	movs	r3, #0
 801c870:	e7ca      	b.n	801c808 <lfs_fs_deorphan+0x10c>
                        return state;
 801c872:	4604      	mov	r4, r0
 801c874:	e036      	b.n	801c8e4 <lfs_fs_deorphan+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c876:	2301      	movs	r3, #1
 801c878:	e000      	b.n	801c87c <lfs_fs_deorphan+0x180>
 801c87a:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 801c87c:	bb0b      	cbnz	r3, 801c8c2 <lfs_fs_deorphan+0x1c6>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801c87e:	aa0c      	add	r2, sp, #48	@ 0x30
 801c880:	a90e      	add	r1, sp, #56	@ 0x38
 801c882:	4628      	mov	r0, r5
 801c884:	f7fe fa12 	bl	801acac <lfs_dir_fetch>
            if (err) {
 801c888:	4604      	mov	r4, r0
 801c88a:	bb58      	cbnz	r0, 801c8e4 <lfs_fs_deorphan+0x1e8>
            if (!pdir.split) {
 801c88c:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801c890:	2b00      	cmp	r3, #0
 801c892:	f43f af4e 	beq.w	801c732 <lfs_fs_deorphan+0x36>
            pdir = dir;
 801c896:	f10d 0c18 	add.w	ip, sp, #24
 801c89a:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801c89e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c8a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c8a6:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801c8aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c8ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c8b4:	d0e1      	beq.n	801c87a <lfs_fs_deorphan+0x17e>
 801c8b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c8b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c8bc:	d0db      	beq.n	801c876 <lfs_fs_deorphan+0x17a>
 801c8be:	2300      	movs	r3, #0
 801c8c0:	e7dc      	b.n	801c87c <lfs_fs_deorphan+0x180>
        pass = moreorphans ? 0 : pass+1;
 801c8c2:	f1b8 0f00 	cmp.w	r8, #0
 801c8c6:	d101      	bne.n	801c8cc <lfs_fs_deorphan+0x1d0>
 801c8c8:	3601      	adds	r6, #1
 801c8ca:	e723      	b.n	801c714 <lfs_fs_deorphan+0x18>
 801c8cc:	2600      	movs	r6, #0
 801c8ce:	e721      	b.n	801c714 <lfs_fs_deorphan+0x18>
    return lfs_tag_size(a->tag) & 0x1ff;
 801c8d0:	f895 1030 	ldrb.w	r1, [r5, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801c8d4:	4249      	negs	r1, r1
 801c8d6:	b249      	sxtb	r1, r1
 801c8d8:	4628      	mov	r0, r5
 801c8da:	f7fc fffb 	bl	80198d4 <lfs_fs_preporphans>
 801c8de:	4604      	mov	r4, r0
 801c8e0:	e000      	b.n	801c8e4 <lfs_fs_deorphan+0x1e8>
        return 0;
 801c8e2:	2400      	movs	r4, #0
}
 801c8e4:	4620      	mov	r0, r4
 801c8e6:	b024      	add	sp, #144	@ 0x90
 801c8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8ec:	08033984 	.word	0x08033984
 801c8f0:	08035660 	.word	0x08035660
 801c8f4:	08035b34 	.word	0x08035b34
 801c8f8:	000ffc08 	.word	0x000ffc08
 801c8fc:	7ffffc00 	.word	0x7ffffc00
 801c900:	08035aa8 	.word	0x08035aa8
 801c904:	600ffc08 	.word	0x600ffc08
 801c908:	08035aec 	.word	0x08035aec

0801c90c <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801c90c:	b510      	push	{r4, lr}
 801c90e:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801c910:	f7ff fcf8 	bl	801c304 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801c914:	2800      	cmp	r0, #0
 801c916:	db00      	blt.n	801c91a <lfs_dir_commit+0xe>
    if (orphans) {
 801c918:	b900      	cbnz	r0, 801c91c <lfs_dir_commit+0x10>
}
 801c91a:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801c91c:	2100      	movs	r1, #0
 801c91e:	4620      	mov	r0, r4
 801c920:	f7ff feec 	bl	801c6fc <lfs_fs_deorphan>
        if (err) {
 801c924:	e7f9      	b.n	801c91a <lfs_dir_commit+0xe>
	...

0801c928 <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801c928:	b530      	push	{r4, r5, lr}
 801c92a:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801c92c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801c92e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801c932:	d103      	bne.n	801c93c <lfs_fs_desuperblock+0x14>
        return 0;
 801c934:	2500      	movs	r5, #0
}
 801c936:	4628      	mov	r0, r5
 801c938:	b013      	add	sp, #76	@ 0x4c
 801c93a:	bd30      	pop	{r4, r5, pc}
 801c93c:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801c93e:	4b1a      	ldr	r3, [pc, #104]	@ (801c9a8 <lfs_fs_desuperblock+0x80>)
 801c940:	9301      	str	r3, [sp, #4]
 801c942:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801c944:	9300      	str	r3, [sp, #0]
 801c946:	6a03      	ldr	r3, [r0, #32]
 801c948:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801c94c:	4917      	ldr	r1, [pc, #92]	@ (801c9ac <lfs_fs_desuperblock+0x84>)
 801c94e:	4818      	ldr	r0, [pc, #96]	@ (801c9b0 <lfs_fs_desuperblock+0x88>)
 801c950:	f00a fba8 	bl	80270a4 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801c954:	f104 0220 	add.w	r2, r4, #32
 801c958:	a908      	add	r1, sp, #32
 801c95a:	4620      	mov	r0, r4
 801c95c:	f7fe f9a6 	bl	801acac <lfs_dir_fetch>
    if (err) {
 801c960:	4605      	mov	r5, r0
 801c962:	2800      	cmp	r0, #0
 801c964:	d1e7      	bne.n	801c936 <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801c966:	4620      	mov	r0, r4
 801c968:	f7fc feb6 	bl	80196d8 <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801c96c:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801c96e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801c970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801c972:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801c974:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801c976:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801c978:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801c97a:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801c97c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801c97e:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801c980:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801c982:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801c984:	4b0b      	ldr	r3, [pc, #44]	@ (801c9b4 <lfs_fs_desuperblock+0x8c>)
 801c986:	9310      	str	r3, [sp, #64]	@ 0x40
 801c988:	ab02      	add	r3, sp, #8
 801c98a:	9311      	str	r3, [sp, #68]	@ 0x44
 801c98c:	2301      	movs	r3, #1
 801c98e:	aa10      	add	r2, sp, #64	@ 0x40
 801c990:	a908      	add	r1, sp, #32
 801c992:	4620      	mov	r0, r4
 801c994:	f7ff ffba 	bl	801c90c <lfs_dir_commit>
    if (err) {
 801c998:	4605      	mov	r5, r0
 801c99a:	2800      	cmp	r0, #0
 801c99c:	d1cb      	bne.n	801c936 <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801c99e:	2100      	movs	r1, #0
 801c9a0:	4620      	mov	r0, r4
 801c9a2:	f7fc ff40 	bl	8019826 <lfs_fs_prepsuperblock>
    return 0;
 801c9a6:	e7c6      	b.n	801c936 <lfs_fs_desuperblock+0xe>
 801c9a8:	08033984 	.word	0x08033984
 801c9ac:	08035660 	.word	0x08035660
 801c9b0:	08035b64 	.word	0x08035b64
 801c9b4:	20100018 	.word	0x20100018

0801c9b8 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801c9b8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801c9ba:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801c9bc:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801c9c0:	d101      	bne.n	801c9c6 <lfs_fs_demove+0xe>
        return 0;
 801c9c2:	2000      	movs	r0, #0
}
 801c9c4:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801c9c6:	b530      	push	{r4, r5, lr}
 801c9c8:	b08f      	sub	sp, #60	@ 0x3c
 801c9ca:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801c9cc:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801c9d0:	4a1d      	ldr	r2, [pc, #116]	@ (801ca48 <lfs_fs_demove+0x90>)
 801c9d2:	9202      	str	r2, [sp, #8]
 801c9d4:	9301      	str	r3, [sp, #4]
 801c9d6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801c9d8:	9300      	str	r3, [sp, #0]
 801c9da:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801c9dc:	f241 3224 	movw	r2, #4900	@ 0x1324
 801c9e0:	491a      	ldr	r1, [pc, #104]	@ (801ca4c <lfs_fs_demove+0x94>)
 801c9e2:	481b      	ldr	r0, [pc, #108]	@ (801ca50 <lfs_fs_demove+0x98>)
 801c9e4:	f00a fb5e 	bl	80270a4 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801c9e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801c9ea:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801c9ee:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801c9f2:	4293      	cmp	r3, r2
 801c9f4:	d108      	bne.n	801ca08 <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801c9f6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801c9fa:	a904      	add	r1, sp, #16
 801c9fc:	4620      	mov	r0, r4
 801c9fe:	f7fe f955 	bl	801acac <lfs_dir_fetch>
    if (err) {
 801ca02:	b140      	cbz	r0, 801ca16 <lfs_fs_demove+0x5e>
}
 801ca04:	b00f      	add	sp, #60	@ 0x3c
 801ca06:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801ca08:	4b12      	ldr	r3, [pc, #72]	@ (801ca54 <lfs_fs_demove+0x9c>)
 801ca0a:	4a13      	ldr	r2, [pc, #76]	@ (801ca58 <lfs_fs_demove+0xa0>)
 801ca0c:	f241 312b 	movw	r1, #4907	@ 0x132b
 801ca10:	480e      	ldr	r0, [pc, #56]	@ (801ca4c <lfs_fs_demove+0x94>)
 801ca12:	f00a fb13 	bl	802703c <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801ca16:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801ca18:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801ca1c:	2200      	movs	r2, #0
 801ca1e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801ca22:	4620      	mov	r0, r4
 801ca24:	f7fc ff06 	bl	8019834 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801ca28:	02ab      	lsls	r3, r5, #10
 801ca2a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801ca2e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801ca32:	930c      	str	r3, [sp, #48]	@ 0x30
 801ca34:	2300      	movs	r3, #0
 801ca36:	930d      	str	r3, [sp, #52]	@ 0x34
 801ca38:	2301      	movs	r3, #1
 801ca3a:	aa0c      	add	r2, sp, #48	@ 0x30
 801ca3c:	a904      	add	r1, sp, #16
 801ca3e:	4620      	mov	r0, r4
 801ca40:	f7ff ff64 	bl	801c90c <lfs_dir_commit>
    if (err) {
 801ca44:	e7de      	b.n	801ca04 <lfs_fs_demove+0x4c>
 801ca46:	bf00      	nop
 801ca48:	08033984 	.word	0x08033984
 801ca4c:	08035660 	.word	0x08035660
 801ca50:	08035b98 	.word	0x08035b98
 801ca54:	08035bcc 	.word	0x08035bcc
 801ca58:	08036320 	.word	0x08036320

0801ca5c <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801ca5c:	b510      	push	{r4, lr}
 801ca5e:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801ca60:	f7ff ff62 	bl	801c928 <lfs_fs_desuperblock>
    if (err) {
 801ca64:	4603      	mov	r3, r0
 801ca66:	b108      	cbz	r0, 801ca6c <lfs_fs_forceconsistency+0x10>
}
 801ca68:	4618      	mov	r0, r3
 801ca6a:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801ca6c:	4620      	mov	r0, r4
 801ca6e:	f7ff ffa3 	bl	801c9b8 <lfs_fs_demove>
    if (err) {
 801ca72:	4603      	mov	r3, r0
 801ca74:	2800      	cmp	r0, #0
 801ca76:	d1f7      	bne.n	801ca68 <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801ca78:	2101      	movs	r1, #1
 801ca7a:	4620      	mov	r0, r4
 801ca7c:	f7ff fe3e 	bl	801c6fc <lfs_fs_deorphan>
 801ca80:	4603      	mov	r3, r0
    if (err) {
 801ca82:	e7f1      	b.n	801ca68 <lfs_fs_forceconsistency+0xc>

0801ca84 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801ca84:	b570      	push	{r4, r5, r6, lr}
 801ca86:	b082      	sub	sp, #8
 801ca88:	4605      	mov	r5, r0
 801ca8a:	460e      	mov	r6, r1
 801ca8c:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801ca8e:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801ca92:	4621      	mov	r1, r4
 801ca94:	f7fd f92a 	bl	8019cec <lfs_dir_getgstate>
    if (err) {
 801ca98:	b108      	cbz	r0, 801ca9e <lfs_dir_drop+0x1a>
}
 801ca9a:	b002      	add	sp, #8
 801ca9c:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 801ca9e:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801caa2:	7de2      	ldrb	r2, [r4, #23]
 801caa4:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801caa8:	4b05      	ldr	r3, [pc, #20]	@ (801cac0 <lfs_dir_drop+0x3c>)
 801caaa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801caae:	9300      	str	r3, [sp, #0]
 801cab0:	9101      	str	r1, [sp, #4]
 801cab2:	2301      	movs	r3, #1
 801cab4:	466a      	mov	r2, sp
 801cab6:	4631      	mov	r1, r6
 801cab8:	4628      	mov	r0, r5
 801caba:	f7ff ff27 	bl	801c90c <lfs_dir_commit>
    if (err) {
 801cabe:	e7ec      	b.n	801ca9a <lfs_dir_drop+0x16>
 801cac0:	000ffc08 	.word	0x000ffc08

0801cac4 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801cac4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801cac6:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801caca:	d001      	beq.n	801cad0 <lfs_file_sync_+0xc>
        return 0;
 801cacc:	2000      	movs	r0, #0
}
 801cace:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801cad0:	b530      	push	{r4, r5, lr}
 801cad2:	b087      	sub	sp, #28
 801cad4:	4605      	mov	r5, r0
 801cad6:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801cad8:	f7fe fcae 	bl	801b438 <lfs_file_flush>
    if (err) {
 801cadc:	2800      	cmp	r0, #0
 801cade:	d136      	bne.n	801cb4e <lfs_file_sync_+0x8a>
    if ((file->flags & LFS_F_DIRTY) &&
 801cae0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cae2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801cae6:	d036      	beq.n	801cb56 <lfs_file_sync_+0x92>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cae8:	68a2      	ldr	r2, [r4, #8]
 801caea:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801caee:	d036      	beq.n	801cb5e <lfs_file_sync_+0x9a>
 801caf0:	68e2      	ldr	r2, [r4, #12]
 801caf2:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801caf6:	d030      	beq.n	801cb5a <lfs_file_sync_+0x96>
 801caf8:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 801cafa:	f012 0f01 	tst.w	r2, #1
 801cafe:	d12a      	bne.n	801cb56 <lfs_file_sync_+0x92>
        if (!(file->flags & LFS_F_INLINE)) {
 801cb00:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cb04:	d02d      	beq.n	801cb62 <lfs_file_sync_+0x9e>
        if (file->flags & LFS_F_INLINE) {
 801cb06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cb08:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cb0c:	d033      	beq.n	801cb76 <lfs_file_sync_+0xb2>
            buffer = file->cache.buffer;
 801cb0e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801cb10:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801cb12:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801cb16:	88a3      	ldrh	r3, [r4, #4]
 801cb18:	029b      	lsls	r3, r3, #10
 801cb1a:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801cb1e:	4302      	orrs	r2, r0
 801cb20:	9202      	str	r2, [sp, #8]
 801cb22:	9103      	str	r1, [sp, #12]
 801cb24:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801cb26:	6891      	ldr	r1, [r2, #8]
 801cb28:	430b      	orrs	r3, r1
 801cb2a:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801cb2e:	9304      	str	r3, [sp, #16]
 801cb30:	6853      	ldr	r3, [r2, #4]
 801cb32:	9305      	str	r3, [sp, #20]
 801cb34:	2302      	movs	r3, #2
 801cb36:	aa02      	add	r2, sp, #8
 801cb38:	f104 0108 	add.w	r1, r4, #8
 801cb3c:	4628      	mov	r0, r5
 801cb3e:	f7ff fee5 	bl	801c90c <lfs_dir_commit>
        if (err) {
 801cb42:	bb20      	cbnz	r0, 801cb8e <lfs_file_sync_+0xca>
        file->flags &= ~LFS_F_DIRTY;
 801cb44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cb46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801cb4a:	6323      	str	r3, [r4, #48]	@ 0x30
 801cb4c:	e003      	b.n	801cb56 <lfs_file_sync_+0x92>
        file->flags |= LFS_F_ERRED;
 801cb4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cb50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cb54:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801cb56:	b007      	add	sp, #28
 801cb58:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cb5a:	2201      	movs	r2, #1
 801cb5c:	e7cd      	b.n	801cafa <lfs_file_sync_+0x36>
 801cb5e:	2201      	movs	r2, #1
 801cb60:	e7cb      	b.n	801cafa <lfs_file_sync_+0x36>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801cb62:	2300      	movs	r3, #0
 801cb64:	462a      	mov	r2, r5
 801cb66:	f105 0110 	add.w	r1, r5, #16
 801cb6a:	4628      	mov	r0, r5
 801cb6c:	f7fd fc82 	bl	801a474 <lfs_bd_sync>
            if (err) {
 801cb70:	2800      	cmp	r0, #0
 801cb72:	d0c8      	beq.n	801cb06 <lfs_file_sync_+0x42>
 801cb74:	e7ef      	b.n	801cb56 <lfs_file_sync_+0x92>
            ctz = file->ctz;
 801cb76:	466b      	mov	r3, sp
 801cb78:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801cb7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cb80:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801cb84:	2008      	movs	r0, #8
            buffer = &ctz;
 801cb86:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801cb88:	f240 2202 	movw	r2, #514	@ 0x202
 801cb8c:	e7c3      	b.n	801cb16 <lfs_file_sync_+0x52>
            file->flags |= LFS_F_ERRED;
 801cb8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cb90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cb94:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801cb96:	e7de      	b.n	801cb56 <lfs_file_sync_+0x92>

0801cb98 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801cb98:	b510      	push	{r4, lr}
 801cb9a:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801cb9c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801cb9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cba0:	b13b      	cbz	r3, 801cbb2 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801cba2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801cba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cba6:	b143      	cbz	r3, 801cbba <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801cba8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801cbaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cbac:	b14b      	cbz	r3, 801cbc2 <lfs_deinit+0x2a>
}
 801cbae:	2000      	movs	r0, #0
 801cbb0:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801cbb2:	68c0      	ldr	r0, [r0, #12]
 801cbb4:	f7fc fb12 	bl	80191dc <vPortFree>
#else
    (void)p;
#endif
}
 801cbb8:	e7f3      	b.n	801cba2 <lfs_deinit+0xa>
    free(p);
 801cbba:	69e0      	ldr	r0, [r4, #28]
 801cbbc:	f7fc fb0e 	bl	80191dc <vPortFree>
}
 801cbc0:	e7f2      	b.n	801cba8 <lfs_deinit+0x10>
    free(p);
 801cbc2:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801cbc4:	f7fc fb0a 	bl	80191dc <vPortFree>
}
 801cbc8:	e7f1      	b.n	801cbae <lfs_deinit+0x16>
	...

0801cbcc <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801cbcc:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801cbce:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801cbd0:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801cbd2:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801cbd4:	69cb      	ldr	r3, [r1, #28]
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	f000 80b1 	beq.w	801cd3e <lfs_init+0x172>
 801cbdc:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801cbde:	6a0a      	ldr	r2, [r1, #32]
 801cbe0:	2a00      	cmp	r2, #0
 801cbe2:	f000 80b3 	beq.w	801cd4c <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801cbe6:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801cbe8:	2800      	cmp	r0, #0
 801cbea:	f000 80b6 	beq.w	801cd5a <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801cbee:	fbb0 fcf3 	udiv	ip, r0, r3
 801cbf2:	fb03 031c 	mls	r3, r3, ip, r0
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	f040 80b6 	bne.w	801cd68 <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801cbfc:	fbb0 f3f2 	udiv	r3, r0, r2
 801cc00:	fb02 0313 	mls	r3, r2, r3, r0
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	f040 80b6 	bne.w	801cd76 <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801cc0a:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801cc0c:	fbb2 f3f0 	udiv	r3, r2, r0
 801cc10:	fb00 2313 	mls	r3, r0, r3, r2
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	f040 80b5 	bne.w	801cd84 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801cc1a:	2a7f      	cmp	r2, #127	@ 0x7f
 801cc1c:	f240 80b9 	bls.w	801cd92 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801cc20:	f1a2 0c08 	sub.w	ip, r2, #8
 801cc24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cc28:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801cc2c:	3b01      	subs	r3, #1
 801cc2e:	fab3 f383 	clz	r3, r3
 801cc32:	f1c3 0320 	rsb	r3, r3, #32
 801cc36:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801cc3a:	f0c0 80b1 	bcc.w	801cda0 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801cc3e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	f000 80b4 	beq.w	801cdae <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801cc46:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801cc48:	b11b      	cbz	r3, 801cc52 <lfs_init+0x86>
 801cc4a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801cc4e:	f0c0 80b5 	bcc.w	801cdbc <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801cc52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cc56:	d002      	beq.n	801cc5e <lfs_init+0x92>
 801cc58:	429a      	cmp	r2, r3
 801cc5a:	f0c0 80b6 	bcc.w	801cdca <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801cc5e:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	f000 80b9 	beq.w	801cdd8 <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801cc66:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801cc68:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801cc6a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	f000 80bf 	beq.w	801cdf0 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801cc72:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801cc74:	4621      	mov	r1, r4
 801cc76:	4620      	mov	r0, r4
 801cc78:	f7fc fe5c 	bl	8019934 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801cc7c:	f104 0110 	add.w	r1, r4, #16
 801cc80:	4620      	mov	r0, r4
 801cc82:	f7fc fe57 	bl	8019934 <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801cc86:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801cc88:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801cc8a:	2800      	cmp	r0, #0
 801cc8c:	f000 80b8 	beq.w	801ce00 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801cc90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	f000 80bb 	beq.w	801ce0e <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801cc98:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801cc9a:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801cc9c:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801cc9e:	2bff      	cmp	r3, #255	@ 0xff
 801cca0:	f200 80bc 	bhi.w	801ce1c <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801cca4:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801cca6:	b90b      	cbnz	r3, 801ccac <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801cca8:	23ff      	movs	r3, #255	@ 0xff
 801ccaa:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801ccac:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	f2c0 80bb 	blt.w	801ce2a <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801ccb4:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801ccb6:	b913      	cbnz	r3, 801ccbe <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801ccb8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ccbc:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801ccbe:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801ccc0:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801ccc4:	428b      	cmp	r3, r1
 801ccc6:	f200 80b7 	bhi.w	801ce38 <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801ccca:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801cccc:	b913      	cbnz	r3, 801ccd4 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801ccce:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801ccd2:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801ccd4:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801ccd6:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801ccd8:	4288      	cmp	r0, r1
 801ccda:	f200 80b4 	bhi.w	801ce46 <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ccde:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801cce0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cce4:	d003      	beq.n	801ccee <lfs_init+0x122>
 801cce6:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801cce8:	42ab      	cmp	r3, r5
 801ccea:	f200 80b3 	bhi.w	801ce54 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ccee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ccf2:	d003      	beq.n	801ccfc <lfs_init+0x130>
 801ccf4:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801ccf6:	42ab      	cmp	r3, r5
 801ccf8:	f200 80b3 	bhi.w	801ce62 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ccfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cd00:	d006      	beq.n	801cd10 <lfs_init+0x144>
 801cd02:	2800      	cmp	r0, #0
 801cd04:	f000 80b4 	beq.w	801ce70 <lfs_init+0x2a4>
 801cd08:	08c1      	lsrs	r1, r0, #3
 801cd0a:	428b      	cmp	r3, r1
 801cd0c:	f200 80b2 	bhi.w	801ce74 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801cd10:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801cd12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cd16:	f000 80b4 	beq.w	801ce82 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	f040 80b3 	bne.w	801ce86 <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801cd20:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801cd22:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801cd24:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	f000 80be 	beq.w	801cea8 <lfs_init+0x2dc>
 801cd2c:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801cd2e:	4283      	cmp	r3, r0
 801cd30:	bf28      	it	cs
 801cd32:	4603      	movcs	r3, r0
 801cd34:	428b      	cmp	r3, r1
 801cd36:	bf28      	it	cs
 801cd38:	460b      	movcs	r3, r1
 801cd3a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801cd3c:	e0a3      	b.n	801ce86 <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801cd3e:	4b5c      	ldr	r3, [pc, #368]	@ (801ceb0 <lfs_init+0x2e4>)
 801cd40:	4a5c      	ldr	r2, [pc, #368]	@ (801ceb4 <lfs_init+0x2e8>)
 801cd42:	f241 0152 	movw	r1, #4178	@ 0x1052
 801cd46:	485c      	ldr	r0, [pc, #368]	@ (801ceb8 <lfs_init+0x2ec>)
 801cd48:	f00a f978 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801cd4c:	4b5b      	ldr	r3, [pc, #364]	@ (801cebc <lfs_init+0x2f0>)
 801cd4e:	4a59      	ldr	r2, [pc, #356]	@ (801ceb4 <lfs_init+0x2e8>)
 801cd50:	f241 0153 	movw	r1, #4179	@ 0x1053
 801cd54:	4858      	ldr	r0, [pc, #352]	@ (801ceb8 <lfs_init+0x2ec>)
 801cd56:	f00a f971 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801cd5a:	4b59      	ldr	r3, [pc, #356]	@ (801cec0 <lfs_init+0x2f4>)
 801cd5c:	4a55      	ldr	r2, [pc, #340]	@ (801ceb4 <lfs_init+0x2e8>)
 801cd5e:	f241 0154 	movw	r1, #4180	@ 0x1054
 801cd62:	4855      	ldr	r0, [pc, #340]	@ (801ceb8 <lfs_init+0x2ec>)
 801cd64:	f00a f96a 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801cd68:	4b56      	ldr	r3, [pc, #344]	@ (801cec4 <lfs_init+0x2f8>)
 801cd6a:	4a52      	ldr	r2, [pc, #328]	@ (801ceb4 <lfs_init+0x2e8>)
 801cd6c:	f241 0158 	movw	r1, #4184	@ 0x1058
 801cd70:	4851      	ldr	r0, [pc, #324]	@ (801ceb8 <lfs_init+0x2ec>)
 801cd72:	f00a f963 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801cd76:	4b54      	ldr	r3, [pc, #336]	@ (801cec8 <lfs_init+0x2fc>)
 801cd78:	4a4e      	ldr	r2, [pc, #312]	@ (801ceb4 <lfs_init+0x2e8>)
 801cd7a:	f241 0159 	movw	r1, #4185	@ 0x1059
 801cd7e:	484e      	ldr	r0, [pc, #312]	@ (801ceb8 <lfs_init+0x2ec>)
 801cd80:	f00a f95c 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801cd84:	4b51      	ldr	r3, [pc, #324]	@ (801cecc <lfs_init+0x300>)
 801cd86:	4a4b      	ldr	r2, [pc, #300]	@ (801ceb4 <lfs_init+0x2e8>)
 801cd88:	f241 015a 	movw	r1, #4186	@ 0x105a
 801cd8c:	484a      	ldr	r0, [pc, #296]	@ (801ceb8 <lfs_init+0x2ec>)
 801cd8e:	f00a f955 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801cd92:	4b4f      	ldr	r3, [pc, #316]	@ (801ced0 <lfs_init+0x304>)
 801cd94:	4a47      	ldr	r2, [pc, #284]	@ (801ceb4 <lfs_init+0x2e8>)
 801cd96:	f241 015d 	movw	r1, #4189	@ 0x105d
 801cd9a:	4847      	ldr	r0, [pc, #284]	@ (801ceb8 <lfs_init+0x2ec>)
 801cd9c:	f00a f94e 	bl	802703c <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801cda0:	4b4c      	ldr	r3, [pc, #304]	@ (801ced4 <lfs_init+0x308>)
 801cda2:	4a44      	ldr	r2, [pc, #272]	@ (801ceb4 <lfs_init+0x2e8>)
 801cda4:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801cda8:	4843      	ldr	r0, [pc, #268]	@ (801ceb8 <lfs_init+0x2ec>)
 801cdaa:	f00a f947 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801cdae:	4b4a      	ldr	r3, [pc, #296]	@ (801ced8 <lfs_init+0x30c>)
 801cdb0:	4a40      	ldr	r2, [pc, #256]	@ (801ceb4 <lfs_init+0x2e8>)
 801cdb2:	f241 0169 	movw	r1, #4201	@ 0x1069
 801cdb6:	4840      	ldr	r0, [pc, #256]	@ (801ceb8 <lfs_init+0x2ec>)
 801cdb8:	f00a f940 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801cdbc:	4b47      	ldr	r3, [pc, #284]	@ (801cedc <lfs_init+0x310>)
 801cdbe:	4a3d      	ldr	r2, [pc, #244]	@ (801ceb4 <lfs_init+0x2e8>)
 801cdc0:	f241 016f 	movw	r1, #4207	@ 0x106f
 801cdc4:	483c      	ldr	r0, [pc, #240]	@ (801ceb8 <lfs_init+0x2ec>)
 801cdc6:	f00a f939 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801cdca:	4b45      	ldr	r3, [pc, #276]	@ (801cee0 <lfs_init+0x314>)
 801cdcc:	4a39      	ldr	r2, [pc, #228]	@ (801ceb4 <lfs_init+0x2e8>)
 801cdce:	f241 0171 	movw	r1, #4209	@ 0x1071
 801cdd2:	4839      	ldr	r0, [pc, #228]	@ (801ceb8 <lfs_init+0x2ec>)
 801cdd4:	f00a f932 	bl	802703c <__assert_func>
    return malloc(size);
 801cdd8:	f7fc f97e 	bl	80190d8 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801cddc:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801cdde:	2800      	cmp	r0, #0
 801cde0:	f47f af42 	bne.w	801cc68 <lfs_init+0x9c>
    lfs_deinit(lfs);
 801cde4:	4620      	mov	r0, r4
 801cde6:	f7ff fed7 	bl	801cb98 <lfs_deinit>
    return err;
 801cdea:	f06f 000b 	mvn.w	r0, #11
 801cdee:	e05a      	b.n	801cea6 <lfs_init+0x2da>
 801cdf0:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801cdf2:	f7fc f971 	bl	80190d8 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801cdf6:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801cdf8:	2800      	cmp	r0, #0
 801cdfa:	f47f af3b 	bne.w	801cc74 <lfs_init+0xa8>
 801cdfe:	e7f1      	b.n	801cde4 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801ce00:	4b38      	ldr	r3, [pc, #224]	@ (801cee4 <lfs_init+0x318>)
 801ce02:	4a2c      	ldr	r2, [pc, #176]	@ (801ceb4 <lfs_init+0x2e8>)
 801ce04:	f241 0190 	movw	r1, #4240	@ 0x1090
 801ce08:	482b      	ldr	r0, [pc, #172]	@ (801ceb8 <lfs_init+0x2ec>)
 801ce0a:	f00a f917 	bl	802703c <__assert_func>
 801ce0e:	f7fc f963 	bl	80190d8 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801ce12:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801ce14:	2800      	cmp	r0, #0
 801ce16:	f47f af40 	bne.w	801cc9a <lfs_init+0xce>
 801ce1a:	e7e3      	b.n	801cde4 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801ce1c:	4b32      	ldr	r3, [pc, #200]	@ (801cee8 <lfs_init+0x31c>)
 801ce1e:	4a25      	ldr	r2, [pc, #148]	@ (801ceb4 <lfs_init+0x2e8>)
 801ce20:	f241 019c 	movw	r1, #4252	@ 0x109c
 801ce24:	4824      	ldr	r0, [pc, #144]	@ (801ceb8 <lfs_init+0x2ec>)
 801ce26:	f00a f909 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801ce2a:	4b30      	ldr	r3, [pc, #192]	@ (801ceec <lfs_init+0x320>)
 801ce2c:	4a21      	ldr	r2, [pc, #132]	@ (801ceb4 <lfs_init+0x2e8>)
 801ce2e:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801ce32:	4821      	ldr	r0, [pc, #132]	@ (801ceb8 <lfs_init+0x2ec>)
 801ce34:	f00a f902 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801ce38:	4b2d      	ldr	r3, [pc, #180]	@ (801cef0 <lfs_init+0x324>)
 801ce3a:	4a1e      	ldr	r2, [pc, #120]	@ (801ceb4 <lfs_init+0x2e8>)
 801ce3c:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801ce40:	481d      	ldr	r0, [pc, #116]	@ (801ceb8 <lfs_init+0x2ec>)
 801ce42:	f00a f8fb 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801ce46:	4b2b      	ldr	r3, [pc, #172]	@ (801cef4 <lfs_init+0x328>)
 801ce48:	4a1a      	ldr	r2, [pc, #104]	@ (801ceb4 <lfs_init+0x2e8>)
 801ce4a:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801ce4e:	481a      	ldr	r0, [pc, #104]	@ (801ceb8 <lfs_init+0x2ec>)
 801ce50:	f00a f8f4 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ce54:	4b28      	ldr	r3, [pc, #160]	@ (801cef8 <lfs_init+0x32c>)
 801ce56:	4a17      	ldr	r2, [pc, #92]	@ (801ceb4 <lfs_init+0x2e8>)
 801ce58:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801ce5c:	4816      	ldr	r0, [pc, #88]	@ (801ceb8 <lfs_init+0x2ec>)
 801ce5e:	f00a f8ed 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ce62:	4b26      	ldr	r3, [pc, #152]	@ (801cefc <lfs_init+0x330>)
 801ce64:	4a13      	ldr	r2, [pc, #76]	@ (801ceb4 <lfs_init+0x2e8>)
 801ce66:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801ce6a:	4813      	ldr	r0, [pc, #76]	@ (801ceb8 <lfs_init+0x2ec>)
 801ce6c:	f00a f8e6 	bl	802703c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ce70:	08c9      	lsrs	r1, r1, #3
 801ce72:	e74a      	b.n	801cd0a <lfs_init+0x13e>
 801ce74:	4b22      	ldr	r3, [pc, #136]	@ (801cf00 <lfs_init+0x334>)
 801ce76:	4a0f      	ldr	r2, [pc, #60]	@ (801ceb4 <lfs_init+0x2e8>)
 801ce78:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801ce7c:	480e      	ldr	r0, [pc, #56]	@ (801ceb8 <lfs_init+0x2ec>)
 801ce7e:	f00a f8dd 	bl	802703c <__assert_func>
        lfs->inline_max = 0;
 801ce82:	2300      	movs	r3, #0
 801ce84:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801ce86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ce8a:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801ce8c:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801ce8e:	2000      	movs	r0, #0
 801ce90:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801ce92:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801ce94:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801ce96:	6420      	str	r0, [r4, #64]	@ 0x40
 801ce98:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801ce9a:	6320      	str	r0, [r4, #48]	@ 0x30
 801ce9c:	6360      	str	r0, [r4, #52]	@ 0x34
 801ce9e:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801cea0:	64a0      	str	r0, [r4, #72]	@ 0x48
 801cea2:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801cea4:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801cea6:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801cea8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801ceaa:	08db      	lsrs	r3, r3, #3
 801ceac:	e73f      	b.n	801cd2e <lfs_init+0x162>
 801ceae:	bf00      	nop
 801ceb0:	08035c00 	.word	0x08035c00
 801ceb4:	080363e0 	.word	0x080363e0
 801ceb8:	08035660 	.word	0x08035660
 801cebc:	08035c1c 	.word	0x08035c1c
 801cec0:	08035c38 	.word	0x08035c38
 801cec4:	08035c54 	.word	0x08035c54
 801cec8:	08035c84 	.word	0x08035c84
 801cecc:	08035cb4 	.word	0x08035cb4
 801ced0:	08035ce8 	.word	0x08035ce8
 801ced4:	08035d04 	.word	0x08035d04
 801ced8:	08035d50 	.word	0x08035d50
 801cedc:	08035d6c 	.word	0x08035d6c
 801cee0:	08035dc0 	.word	0x08035dc0
 801cee4:	08035e20 	.word	0x08035e20
 801cee8:	08035e40 	.word	0x08035e40
 801ceec:	08035e5c 	.word	0x08035e5c
 801cef0:	08035e80 	.word	0x08035e80
 801cef4:	08035e9c 	.word	0x08035e9c
 801cef8:	08035ecc 	.word	0x08035ecc
 801cefc:	08035f24 	.word	0x08035f24
 801cf00:	08035f74 	.word	0x08035f74

0801cf04 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801cf04:	b570      	push	{r4, r5, r6, lr}
 801cf06:	b096      	sub	sp, #88	@ 0x58
 801cf08:	4604      	mov	r4, r0
 801cf0a:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801cf0c:	f7ff fe5e 	bl	801cbcc <lfs_init>
        if (err) {
 801cf10:	4606      	mov	r6, r0
 801cf12:	b9f0      	cbnz	r0, 801cf52 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801cf14:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801cf16:	b1fb      	cbz	r3, 801cf58 <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801cf18:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801cf1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cf1c:	2100      	movs	r1, #0
 801cf1e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801cf20:	f00c fdde 	bl	8029ae0 <memset>
        lfs->lookahead.start = 0;
 801cf24:	2200      	movs	r2, #0
 801cf26:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801cf28:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801cf2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cf2c:	00db      	lsls	r3, r3, #3
 801cf2e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801cf30:	428b      	cmp	r3, r1
 801cf32:	bf28      	it	cs
 801cf34:	460b      	movcs	r3, r1
 801cf36:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801cf38:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801cf3a:	4620      	mov	r0, r4
 801cf3c:	f7fc fbda 	bl	80196f4 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801cf40:	a906      	add	r1, sp, #24
 801cf42:	4620      	mov	r0, r4
 801cf44:	f7fe f820 	bl	801af88 <lfs_dir_alloc>
        if (err) {
 801cf48:	4606      	mov	r6, r0
 801cf4a:	b160      	cbz	r0, 801cf66 <lfs_format_+0x62>
    lfs_deinit(lfs);
 801cf4c:	4620      	mov	r0, r4
 801cf4e:	f7ff fe23 	bl	801cb98 <lfs_deinit>
}
 801cf52:	4630      	mov	r0, r6
 801cf54:	b016      	add	sp, #88	@ 0x58
 801cf56:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801cf58:	4b20      	ldr	r3, [pc, #128]	@ (801cfdc <lfs_format_+0xd8>)
 801cf5a:	4a21      	ldr	r2, [pc, #132]	@ (801cfe0 <lfs_format_+0xdc>)
 801cf5c:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801cf60:	4820      	ldr	r0, [pc, #128]	@ (801cfe4 <lfs_format_+0xe0>)
 801cf62:	f00a f86b 	bl	802703c <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801cf66:	4620      	mov	r0, r4
 801cf68:	f7fc fbb6 	bl	80196d8 <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801cf6c:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801cf6e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801cf70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801cf72:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801cf74:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801cf76:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801cf78:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801cf7a:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801cf7c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801cf7e:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801cf80:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801cf82:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801cf84:	4b18      	ldr	r3, [pc, #96]	@ (801cfe8 <lfs_format_+0xe4>)
 801cf86:	930e      	str	r3, [sp, #56]	@ 0x38
 801cf88:	2300      	movs	r3, #0
 801cf8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cf8c:	4b17      	ldr	r3, [pc, #92]	@ (801cfec <lfs_format_+0xe8>)
 801cf8e:	9310      	str	r3, [sp, #64]	@ 0x40
 801cf90:	4b17      	ldr	r3, [pc, #92]	@ (801cff0 <lfs_format_+0xec>)
 801cf92:	9311      	str	r3, [sp, #68]	@ 0x44
 801cf94:	4b17      	ldr	r3, [pc, #92]	@ (801cff4 <lfs_format_+0xf0>)
 801cf96:	9312      	str	r3, [sp, #72]	@ 0x48
 801cf98:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801cf9c:	2303      	movs	r3, #3
 801cf9e:	aa0e      	add	r2, sp, #56	@ 0x38
 801cfa0:	a906      	add	r1, sp, #24
 801cfa2:	4620      	mov	r0, r4
 801cfa4:	f7ff fcb2 	bl	801c90c <lfs_dir_commit>
        if (err) {
 801cfa8:	4606      	mov	r6, r0
 801cfaa:	2800      	cmp	r0, #0
 801cfac:	d1ce      	bne.n	801cf4c <lfs_format_+0x48>
        root.erased = false;
 801cfae:	2200      	movs	r2, #0
 801cfb0:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801cfb4:	4613      	mov	r3, r2
 801cfb6:	a906      	add	r1, sp, #24
 801cfb8:	4620      	mov	r0, r4
 801cfba:	f7ff fca7 	bl	801c90c <lfs_dir_commit>
        if (err) {
 801cfbe:	4606      	mov	r6, r0
 801cfc0:	2800      	cmp	r0, #0
 801cfc2:	d1c3      	bne.n	801cf4c <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801cfc4:	2300      	movs	r3, #0
 801cfc6:	9314      	str	r3, [sp, #80]	@ 0x50
 801cfc8:	2301      	movs	r3, #1
 801cfca:	9315      	str	r3, [sp, #84]	@ 0x54
 801cfcc:	aa14      	add	r2, sp, #80	@ 0x50
 801cfce:	a906      	add	r1, sp, #24
 801cfd0:	4620      	mov	r0, r4
 801cfd2:	f7fd fe6b 	bl	801acac <lfs_dir_fetch>
 801cfd6:	4606      	mov	r6, r0
        if (err) {
 801cfd8:	e7b8      	b.n	801cf4c <lfs_format_+0x48>
 801cfda:	bf00      	nop
 801cfdc:	08036004 	.word	0x08036004
 801cfe0:	080363ec 	.word	0x080363ec
 801cfe4:	08035660 	.word	0x08035660
 801cfe8:	40100000 	.word	0x40100000
 801cfec:	0ff00008 	.word	0x0ff00008
 801cff0:	0803601c 	.word	0x0803601c
 801cff4:	20100018 	.word	0x20100018

0801cff8 <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801cff8:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801cffa:	f7ff fdcd 	bl	801cb98 <lfs_deinit>
}
 801cffe:	bd08      	pop	{r3, pc}

0801d000 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801d000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d004:	b09b      	sub	sp, #108	@ 0x6c
 801d006:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801d008:	f7ff fde0 	bl	801cbcc <lfs_init>
    if (err) {
 801d00c:	9005      	str	r0, [sp, #20]
 801d00e:	b9d8      	cbnz	r0, 801d048 <lfs_mount_+0x48>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801d010:	2220      	movs	r2, #32
 801d012:	2100      	movs	r1, #0
 801d014:	a80f      	add	r0, sp, #60	@ 0x3c
 801d016:	f00c fd63 	bl	8029ae0 <memset>
 801d01a:	2501      	movs	r5, #1
 801d01c:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801d01e:	4aa1      	ldr	r2, [pc, #644]	@ (801d2a4 <lfs_mount_+0x2a4>)
 801d020:	ab0d      	add	r3, sp, #52	@ 0x34
 801d022:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d026:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801d02a:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 801d02c:	e073      	b.n	801d116 <lfs_mount_+0x116>
            LFS_WARN("Cycle detected in tail list");
 801d02e:	4b9e      	ldr	r3, [pc, #632]	@ (801d2a8 <lfs_mount_+0x2a8>)
 801d030:	f241 123d 	movw	r2, #4413	@ 0x113d
 801d034:	499d      	ldr	r1, [pc, #628]	@ (801d2ac <lfs_mount_+0x2ac>)
 801d036:	489e      	ldr	r0, [pc, #632]	@ (801d2b0 <lfs_mount_+0x2b0>)
 801d038:	f00a f834 	bl	80270a4 <printf>
            err = LFS_ERR_CORRUPT;
 801d03c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d040:	9305      	str	r3, [sp, #20]
    lfs_unmount_(lfs);
 801d042:	4620      	mov	r0, r4
 801d044:	f7ff ffd8 	bl	801cff8 <lfs_unmount_>
}
 801d048:	9805      	ldr	r0, [sp, #20]
 801d04a:	b01b      	add	sp, #108	@ 0x6c
 801d04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 801d050:	970d      	str	r7, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801d052:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d054:	930e      	str	r3, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801d056:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 801d058:	2500      	movs	r5, #0
 801d05a:	e075      	b.n	801d148 <lfs_mount_+0x148>
                LFS_ERROR("Invalid version "
 801d05c:	4620      	mov	r0, r4
 801d05e:	f7fc fb44 	bl	80196ea <lfs_fs_disk_version_minor>
 801d062:	4b91      	ldr	r3, [pc, #580]	@ (801d2a8 <lfs_mount_+0x2a8>)
 801d064:	9303      	str	r3, [sp, #12]
 801d066:	9002      	str	r0, [sp, #8]
 801d068:	f8cd 9004 	str.w	r9, [sp, #4]
 801d06c:	b2bf      	uxth	r7, r7
 801d06e:	9700      	str	r7, [sp, #0]
 801d070:	4643      	mov	r3, r8
 801d072:	f241 126b 	movw	r2, #4459	@ 0x116b
 801d076:	498d      	ldr	r1, [pc, #564]	@ (801d2ac <lfs_mount_+0x2ac>)
 801d078:	488e      	ldr	r0, [pc, #568]	@ (801d2b4 <lfs_mount_+0x2b4>)
 801d07a:	f00a f813 	bl	80270a4 <printf>
                err = LFS_ERR_INVAL;
 801d07e:	f06f 0315 	mvn.w	r3, #21
 801d082:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801d084:	e7dd      	b.n	801d042 <lfs_mount_+0x42>
                LFS_DEBUG("Found older minor version "
 801d086:	4b88      	ldr	r3, [pc, #544]	@ (801d2a8 <lfs_mount_+0x2a8>)
 801d088:	9303      	str	r3, [sp, #12]
 801d08a:	9002      	str	r0, [sp, #8]
 801d08c:	f8cd 9004 	str.w	r9, [sp, #4]
 801d090:	b2bf      	uxth	r7, r7
 801d092:	9700      	str	r7, [sp, #0]
 801d094:	4643      	mov	r3, r8
 801d096:	f241 127a 	movw	r2, #4474	@ 0x117a
 801d09a:	4984      	ldr	r1, [pc, #528]	@ (801d2ac <lfs_mount_+0x2ac>)
 801d09c:	4886      	ldr	r0, [pc, #536]	@ (801d2b8 <lfs_mount_+0x2b8>)
 801d09e:	f00a f801 	bl	80270a4 <printf>
                needssuperblock = true;
 801d0a2:	2301      	movs	r3, #1
 801d0a4:	9304      	str	r3, [sp, #16]
 801d0a6:	e08f      	b.n	801d1c8 <lfs_mount_+0x1c8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801d0a8:	497f      	ldr	r1, [pc, #508]	@ (801d2a8 <lfs_mount_+0x2a8>)
 801d0aa:	9101      	str	r1, [sp, #4]
 801d0ac:	9200      	str	r2, [sp, #0]
 801d0ae:	f241 1289 	movw	r2, #4489	@ 0x1189
 801d0b2:	497e      	ldr	r1, [pc, #504]	@ (801d2ac <lfs_mount_+0x2ac>)
 801d0b4:	4881      	ldr	r0, [pc, #516]	@ (801d2bc <lfs_mount_+0x2bc>)
 801d0b6:	f009 fff5 	bl	80270a4 <printf>
                    err = LFS_ERR_INVAL;
 801d0ba:	f06f 0315 	mvn.w	r3, #21
 801d0be:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801d0c0:	e7bf      	b.n	801d042 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801d0c2:	4979      	ldr	r1, [pc, #484]	@ (801d2a8 <lfs_mount_+0x2a8>)
 801d0c4:	9101      	str	r1, [sp, #4]
 801d0c6:	9200      	str	r2, [sp, #0]
 801d0c8:	f241 1294 	movw	r2, #4500	@ 0x1194
 801d0cc:	4977      	ldr	r1, [pc, #476]	@ (801d2ac <lfs_mount_+0x2ac>)
 801d0ce:	487c      	ldr	r0, [pc, #496]	@ (801d2c0 <lfs_mount_+0x2c0>)
 801d0d0:	f009 ffe8 	bl	80270a4 <printf>
                    err = LFS_ERR_INVAL;
 801d0d4:	f06f 0315 	mvn.w	r3, #21
 801d0d8:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801d0da:	e7b2      	b.n	801d042 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801d0dc:	4972      	ldr	r1, [pc, #456]	@ (801d2a8 <lfs_mount_+0x2a8>)
 801d0de:	9101      	str	r1, [sp, #4]
 801d0e0:	9200      	str	r2, [sp, #0]
 801d0e2:	f241 129f 	movw	r2, #4511	@ 0x119f
 801d0e6:	4971      	ldr	r1, [pc, #452]	@ (801d2ac <lfs_mount_+0x2ac>)
 801d0e8:	4876      	ldr	r0, [pc, #472]	@ (801d2c4 <lfs_mount_+0x2c4>)
 801d0ea:	f009 ffdb 	bl	80270a4 <printf>
                    err = LFS_ERR_INVAL;
 801d0ee:	f06f 0315 	mvn.w	r3, #21
 801d0f2:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801d0f4:	e7a5      	b.n	801d042 <lfs_mount_+0x42>
            lfs->block_count = superblock.block_count;
 801d0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0f8:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 801d0fa:	9b08      	ldr	r3, [sp, #32]
 801d0fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801d0fe:	4293      	cmp	r3, r2
 801d100:	f040 8096 	bne.w	801d230 <lfs_mount_+0x230>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801d104:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801d108:	a90f      	add	r1, sp, #60	@ 0x3c
 801d10a:	4620      	mov	r0, r4
 801d10c:	f7fc fdee 	bl	8019cec <lfs_dir_getgstate>
        if (err) {
 801d110:	2800      	cmp	r0, #0
 801d112:	f040 809e 	bne.w	801d252 <lfs_mount_+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d116:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801d118:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801d11c:	f000 809d 	beq.w	801d25a <lfs_mount_+0x25a>
 801d120:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d126:	f000 8096 	beq.w	801d256 <lfs_mount_+0x256>
 801d12a:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 801d12c:	f013 0301 	ands.w	r3, r3, #1
 801d130:	f040 8095 	bne.w	801d25e <lfs_mount_+0x25e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801d134:	a90d      	add	r1, sp, #52	@ 0x34
 801d136:	a815      	add	r0, sp, #84	@ 0x54
 801d138:	f7fc fa60 	bl	80195fc <lfs_pair_issync>
 801d13c:	9004      	str	r0, [sp, #16]
 801d13e:	2800      	cmp	r0, #0
 801d140:	f47f af75 	bne.w	801d02e <lfs_mount_+0x2e>
        if (tortoise_i == tortoise_period) {
 801d144:	42b5      	cmp	r5, r6
 801d146:	d083      	beq.n	801d050 <lfs_mount_+0x50>
        tortoise_i += 1;
 801d148:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801d14a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801d14c:	4b5e      	ldr	r3, [pc, #376]	@ (801d2c8 <lfs_mount_+0x2c8>)
 801d14e:	9318      	str	r3, [sp, #96]	@ 0x60
 801d150:	2308      	movs	r3, #8
 801d152:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801d154:	ab17      	add	r3, sp, #92	@ 0x5c
 801d156:	9303      	str	r3, [sp, #12]
 801d158:	4b5c      	ldr	r3, [pc, #368]	@ (801d2cc <lfs_mount_+0x2cc>)
 801d15a:	9302      	str	r3, [sp, #8]
 801d15c:	2300      	movs	r3, #0
 801d15e:	9301      	str	r3, [sp, #4]
 801d160:	4b5b      	ldr	r3, [pc, #364]	@ (801d2d0 <lfs_mount_+0x2d0>)
 801d162:	9300      	str	r3, [sp, #0]
 801d164:	4b5b      	ldr	r3, [pc, #364]	@ (801d2d4 <lfs_mount_+0x2d4>)
 801d166:	aa15      	add	r2, sp, #84	@ 0x54
 801d168:	a90f      	add	r1, sp, #60	@ 0x3c
 801d16a:	4620      	mov	r0, r4
 801d16c:	f7fd fabe 	bl	801a6ec <lfs_dir_fetchmatch>
        if (tag < 0) {
 801d170:	2800      	cmp	r0, #0
 801d172:	db6c      	blt.n	801d24e <lfs_mount_+0x24e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801d174:	2800      	cmp	r0, #0
 801d176:	d0c5      	beq.n	801d104 <lfs_mount_+0x104>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801d178:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801d17c:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801d180:	d0c0      	beq.n	801d104 <lfs_mount_+0x104>
            lfs->root[0] = dir.pair[0];
 801d182:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d184:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 801d186:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d188:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801d18a:	ab07      	add	r3, sp, #28
 801d18c:	9300      	str	r3, [sp, #0]
 801d18e:	4b52      	ldr	r3, [pc, #328]	@ (801d2d8 <lfs_mount_+0x2d8>)
 801d190:	4a50      	ldr	r2, [pc, #320]	@ (801d2d4 <lfs_mount_+0x2d4>)
 801d192:	a90f      	add	r1, sp, #60	@ 0x3c
 801d194:	4620      	mov	r0, r4
 801d196:	f7fc fd9b 	bl	8019cd0 <lfs_dir_get>
            if (tag < 0) {
 801d19a:	2800      	cmp	r0, #0
 801d19c:	db55      	blt.n	801d24a <lfs_mount_+0x24a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801d19e:	9f07      	ldr	r7, [sp, #28]
 801d1a0:	ea4f 4817 	mov.w	r8, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801d1a4:	fa1f fa87 	uxth.w	sl, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 801d1a8:	4620      	mov	r0, r4
 801d1aa:	f7fc fa99 	bl	80196e0 <lfs_fs_disk_version_major>
 801d1ae:	4681      	mov	r9, r0
 801d1b0:	4540      	cmp	r0, r8
 801d1b2:	f47f af53 	bne.w	801d05c <lfs_mount_+0x5c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801d1b6:	4620      	mov	r0, r4
 801d1b8:	f7fc fa97 	bl	80196ea <lfs_fs_disk_version_minor>
 801d1bc:	4550      	cmp	r0, sl
 801d1be:	f4ff af4d 	bcc.w	801d05c <lfs_mount_+0x5c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801d1c2:	4550      	cmp	r0, sl
 801d1c4:	f63f af5f 	bhi.w	801d086 <lfs_mount_+0x86>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801d1c8:	9904      	ldr	r1, [sp, #16]
 801d1ca:	4620      	mov	r0, r4
 801d1cc:	f7fc fb2b 	bl	8019826 <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 801d1d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d1d2:	b123      	cbz	r3, 801d1de <lfs_mount_+0x1de>
                if (superblock.name_max > lfs->name_max) {
 801d1d4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801d1d6:	4293      	cmp	r3, r2
 801d1d8:	f63f af66 	bhi.w	801d0a8 <lfs_mount_+0xa8>
                lfs->name_max = superblock.name_max;
 801d1dc:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 801d1de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d1e0:	b123      	cbz	r3, 801d1ec <lfs_mount_+0x1ec>
                if (superblock.file_max > lfs->file_max) {
 801d1e2:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801d1e4:	4293      	cmp	r3, r2
 801d1e6:	f63f af6c 	bhi.w	801d0c2 <lfs_mount_+0xc2>
                lfs->file_max = superblock.file_max;
 801d1ea:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 801d1ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d1ee:	b14b      	cbz	r3, 801d204 <lfs_mount_+0x204>
                if (superblock.attr_max > lfs->attr_max) {
 801d1f0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801d1f2:	4293      	cmp	r3, r2
 801d1f4:	f63f af72 	bhi.w	801d0dc <lfs_mount_+0xdc>
                lfs->attr_max = superblock.attr_max;
 801d1f8:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801d1fa:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801d1fc:	4293      	cmp	r3, r2
 801d1fe:	bf28      	it	cs
 801d200:	4613      	movcs	r3, r2
 801d202:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 801d204:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801d206:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801d208:	2900      	cmp	r1, #0
 801d20a:	f43f af74 	beq.w	801d0f6 <lfs_mount_+0xf6>
                    && superblock.block_count != lfs->cfg->block_count) {
 801d20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d210:	4299      	cmp	r1, r3
 801d212:	f43f af70 	beq.w	801d0f6 <lfs_mount_+0xf6>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801d216:	4a24      	ldr	r2, [pc, #144]	@ (801d2a8 <lfs_mount_+0x2a8>)
 801d218:	9201      	str	r2, [sp, #4]
 801d21a:	9100      	str	r1, [sp, #0]
 801d21c:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801d220:	4922      	ldr	r1, [pc, #136]	@ (801d2ac <lfs_mount_+0x2ac>)
 801d222:	482e      	ldr	r0, [pc, #184]	@ (801d2dc <lfs_mount_+0x2dc>)
 801d224:	f009 ff3e 	bl	80270a4 <printf>
                err = LFS_ERR_INVAL;
 801d228:	f06f 0315 	mvn.w	r3, #21
 801d22c:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801d22e:	e708      	b.n	801d042 <lfs_mount_+0x42>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801d230:	491d      	ldr	r1, [pc, #116]	@ (801d2a8 <lfs_mount_+0x2a8>)
 801d232:	9101      	str	r1, [sp, #4]
 801d234:	9200      	str	r2, [sp, #0]
 801d236:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801d23a:	491c      	ldr	r1, [pc, #112]	@ (801d2ac <lfs_mount_+0x2ac>)
 801d23c:	4828      	ldr	r0, [pc, #160]	@ (801d2e0 <lfs_mount_+0x2e0>)
 801d23e:	f009 ff31 	bl	80270a4 <printf>
                err = LFS_ERR_INVAL;
 801d242:	f06f 0315 	mvn.w	r3, #21
 801d246:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801d248:	e6fb      	b.n	801d042 <lfs_mount_+0x42>
                err = tag;
 801d24a:	9005      	str	r0, [sp, #20]
 801d24c:	e6f9      	b.n	801d042 <lfs_mount_+0x42>
            err = tag;
 801d24e:	9005      	str	r0, [sp, #20]
 801d250:	e6f7      	b.n	801d042 <lfs_mount_+0x42>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801d252:	9005      	str	r0, [sp, #20]
 801d254:	e6f5      	b.n	801d042 <lfs_mount_+0x42>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d256:	2301      	movs	r3, #1
 801d258:	e768      	b.n	801d12c <lfs_mount_+0x12c>
 801d25a:	2301      	movs	r3, #1
 801d25c:	e766      	b.n	801d12c <lfs_mount_+0x12c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801d25e:	f104 0030 	add.w	r0, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 801d262:	9a05      	ldr	r2, [sp, #20]
 801d264:	2a02      	cmp	r2, #2
 801d266:	dc05      	bgt.n	801d274 <lfs_mount_+0x274>
        if (((uint32_t*)a)[i] != 0) {
 801d268:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801d26c:	b909      	cbnz	r1, 801d272 <lfs_mount_+0x272>
    for (int i = 0; i < 3; i++) {
 801d26e:	3201      	adds	r2, #1
 801d270:	e7f8      	b.n	801d264 <lfs_mount_+0x264>
            return false;
 801d272:	2300      	movs	r3, #0
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801d274:	b3b3      	cbz	r3, 801d2e4 <lfs_mount_+0x2e4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801d276:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d278:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801d27c:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801d27e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801d282:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801d286:	ca07      	ldmia	r2, {r0, r1, r2}
 801d288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801d28c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801d28e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801d290:	fbb3 f1f2 	udiv	r1, r3, r2
 801d294:	fb02 3311 	mls	r3, r2, r1, r3
 801d298:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801d29a:	4620      	mov	r0, r4
 801d29c:	f7fc fa2d 	bl	80196fa <lfs_alloc_drop>
    return 0;
 801d2a0:	e6d2      	b.n	801d048 <lfs_mount_+0x48>
 801d2a2:	bf00      	nop
 801d2a4:	08032e24 	.word	0x08032e24
 801d2a8:	08033984 	.word	0x08033984
 801d2ac:	08035660 	.word	0x08035660
 801d2b0:	08035820 	.word	0x08035820
 801d2b4:	08036028 	.word	0x08036028
 801d2b8:	08036060 	.word	0x08036060
 801d2bc:	080360a0 	.word	0x080360a0
 801d2c0:	080360d4 	.word	0x080360d4
 801d2c4:	08036108 	.word	0x08036108
 801d2c8:	0803601c 	.word	0x0803601c
 801d2cc:	0801a4ad 	.word	0x0801a4ad
 801d2d0:	0ff00008 	.word	0x0ff00008
 801d2d4:	7ffffc00 	.word	0x7ffffc00
 801d2d8:	20100018 	.word	0x20100018
 801d2dc:	0803613c 	.word	0x0803613c
 801d2e0:	08036170 	.word	0x08036170
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 801d2e4:	4b06      	ldr	r3, [pc, #24]	@ (801d300 <lfs_mount_+0x300>)
 801d2e6:	9302      	str	r3, [sp, #8]
 801d2e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d2ea:	9301      	str	r3, [sp, #4]
 801d2ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d2ee:	9300      	str	r3, [sp, #0]
 801d2f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d2f2:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 801d2f6:	4903      	ldr	r1, [pc, #12]	@ (801d304 <lfs_mount_+0x304>)
 801d2f8:	4803      	ldr	r0, [pc, #12]	@ (801d308 <lfs_mount_+0x308>)
 801d2fa:	f009 fed3 	bl	80270a4 <printf>
 801d2fe:	e7ba      	b.n	801d276 <lfs_mount_+0x276>
 801d300:	08033984 	.word	0x08033984
 801d304:	08035660 	.word	0x08035660
 801d308:	080361a0 	.word	0x080361a0

0801d30c <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801d30c:	b570      	push	{r4, r5, r6, lr}
 801d30e:	4606      	mov	r6, r0
 801d310:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 801d312:	f7ff fbd7 	bl	801cac4 <lfs_file_sync_>
 801d316:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801d318:	4621      	mov	r1, r4
 801d31a:	4630      	mov	r0, r6
 801d31c:	f7fc f9cd 	bl	80196ba <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 801d320:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	b10b      	cbz	r3, 801d32a <lfs_file_close_+0x1e>
}
 801d326:	4628      	mov	r0, r5
 801d328:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 801d32a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801d32c:	f7fb ff56 	bl	80191dc <vPortFree>
    return err;
 801d330:	e7f9      	b.n	801d326 <lfs_file_close_+0x1a>
	...

0801d334 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 801d334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d338:	b08d      	sub	sp, #52	@ 0x34
 801d33a:	4682      	mov	sl, r0
 801d33c:	4688      	mov	r8, r1
 801d33e:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 801d340:	6812      	ldr	r2, [r2, #0]
 801d342:	9205      	str	r2, [sp, #20]
    if (id) {
 801d344:	9306      	str	r3, [sp, #24]
 801d346:	b11b      	cbz	r3, 801d350 <lfs_dir_find+0x1c>
 801d348:	461a      	mov	r2, r3
        *id = 0x3ff;
 801d34a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d34e:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 801d350:	f8da 3020 	ldr.w	r3, [sl, #32]
 801d354:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 801d358:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801d35c:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801d360:	4e4d      	ldr	r6, [pc, #308]	@ (801d498 <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 801d362:	4d4e      	ldr	r5, [pc, #312]	@ (801d49c <lfs_dir_find+0x168>)
 801d364:	4629      	mov	r1, r5
 801d366:	9f05      	ldr	r7, [sp, #20]
 801d368:	4638      	mov	r0, r7
 801d36a:	f00c fc29 	bl	8029bc0 <strspn>
 801d36e:	4604      	mov	r4, r0
 801d370:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 801d374:	4629      	mov	r1, r5
 801d376:	4648      	mov	r0, r9
 801d378:	f00c fbd6 	bl	8029b28 <strcspn>
 801d37c:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801d37e:	2801      	cmp	r0, #1
 801d380:	d00a      	beq.n	801d398 <lfs_dir_find+0x64>
 801d382:	2d02      	cmp	r5, #2
 801d384:	d00c      	beq.n	801d3a0 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 801d386:	eb09 0305 	add.w	r3, r9, r5
 801d38a:	9305      	str	r3, [sp, #20]
 801d38c:	469b      	mov	fp, r3
        int depth = 1;
 801d38e:	2701      	movs	r7, #1
 801d390:	e013      	b.n	801d3ba <lfs_dir_find+0x86>
 801d392:	46b2      	mov	sl, r6
 801d394:	4606      	mov	r6, r0
 801d396:	e7e4      	b.n	801d362 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801d398:	5d3b      	ldrb	r3, [r7, r4]
 801d39a:	2b2e      	cmp	r3, #46	@ 0x2e
 801d39c:	d1f1      	bne.n	801d382 <lfs_dir_find+0x4e>
 801d39e:	e006      	b.n	801d3ae <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801d3a0:	2202      	movs	r2, #2
 801d3a2:	493f      	ldr	r1, [pc, #252]	@ (801d4a0 <lfs_dir_find+0x16c>)
 801d3a4:	4648      	mov	r0, r9
 801d3a6:	f00c fb07 	bl	80299b8 <memcmp>
 801d3aa:	2800      	cmp	r0, #0
 801d3ac:	d1eb      	bne.n	801d386 <lfs_dir_find+0x52>
            name += namelen;
 801d3ae:	eb09 0305 	add.w	r3, r9, r5
 801d3b2:	9305      	str	r3, [sp, #20]
            goto nextname;
 801d3b4:	e7d5      	b.n	801d362 <lfs_dir_find+0x2e>
                depth += 1;
 801d3b6:	3701      	adds	r7, #1
            suffix += sufflen;
 801d3b8:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 801d3ba:	4c38      	ldr	r4, [pc, #224]	@ (801d49c <lfs_dir_find+0x168>)
 801d3bc:	4621      	mov	r1, r4
 801d3be:	4658      	mov	r0, fp
 801d3c0:	f00c fbfe 	bl	8029bc0 <strspn>
 801d3c4:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 801d3c6:	4621      	mov	r1, r4
 801d3c8:	4658      	mov	r0, fp
 801d3ca:	f00c fbad 	bl	8029b28 <strcspn>
            if (sufflen == 0) {
 801d3ce:	4604      	mov	r4, r0
 801d3d0:	b170      	cbz	r0, 801d3f0 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801d3d2:	2802      	cmp	r0, #2
 801d3d4:	d1ef      	bne.n	801d3b6 <lfs_dir_find+0x82>
 801d3d6:	2202      	movs	r2, #2
 801d3d8:	4931      	ldr	r1, [pc, #196]	@ (801d4a0 <lfs_dir_find+0x16c>)
 801d3da:	4658      	mov	r0, fp
 801d3dc:	f00c faec 	bl	80299b8 <memcmp>
 801d3e0:	2800      	cmp	r0, #0
 801d3e2:	d1e8      	bne.n	801d3b6 <lfs_dir_find+0x82>
                if (depth == 0) {
 801d3e4:	3f01      	subs	r7, #1
 801d3e6:	d1e7      	bne.n	801d3b8 <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 801d3e8:	eb0b 0304 	add.w	r3, fp, r4
 801d3ec:	9305      	str	r3, [sp, #20]
                    goto nextname;
 801d3ee:	e7b8      	b.n	801d362 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 801d3f0:	f899 3000 	ldrb.w	r3, [r9]
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d04a      	beq.n	801d48e <lfs_dir_find+0x15a>
        *path = name;
 801d3f8:	9b07      	ldr	r3, [sp, #28]
 801d3fa:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 801d3fe:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801d402:	2b02      	cmp	r3, #2
 801d404:	d13f      	bne.n	801d486 <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 801d406:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 801d40a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d40e:	429e      	cmp	r6, r3
 801d410:	d102      	bne.n	801d418 <lfs_dir_find+0xe4>
 801d412:	464c      	mov	r4, r9
 801d414:	4656      	mov	r6, sl
 801d416:	e029      	b.n	801d46c <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801d418:	02b6      	lsls	r6, r6, #10
 801d41a:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801d41e:	9300      	str	r3, [sp, #0]
 801d420:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 801d424:	f043 0308 	orr.w	r3, r3, #8
 801d428:	4a1e      	ldr	r2, [pc, #120]	@ (801d4a4 <lfs_dir_find+0x170>)
 801d42a:	4641      	mov	r1, r8
 801d42c:	4650      	mov	r0, sl
 801d42e:	f7fc fc4f 	bl	8019cd0 <lfs_dir_get>
            if (res < 0) {
 801d432:	1e06      	subs	r6, r0, #0
 801d434:	db2b      	blt.n	801d48e <lfs_dir_find+0x15a>
 801d436:	464c      	mov	r4, r9
 801d438:	4656      	mov	r6, sl
 801d43a:	e017      	b.n	801d46c <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801d43c:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801d43e:	9609      	str	r6, [sp, #36]	@ 0x24
 801d440:	940a      	str	r4, [sp, #40]	@ 0x28
 801d442:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801d444:	aa09      	add	r2, sp, #36	@ 0x24
 801d446:	9203      	str	r2, [sp, #12]
 801d448:	4a17      	ldr	r2, [pc, #92]	@ (801d4a8 <lfs_dir_find+0x174>)
 801d44a:	9202      	str	r2, [sp, #8]
 801d44c:	9301      	str	r3, [sp, #4]
 801d44e:	9500      	str	r5, [sp, #0]
 801d450:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801d454:	463a      	mov	r2, r7
 801d456:	4641      	mov	r1, r8
 801d458:	4630      	mov	r0, r6
 801d45a:	f7fd f947 	bl	801a6ec <lfs_dir_fetchmatch>
            if (tag < 0) {
 801d45e:	2800      	cmp	r0, #0
 801d460:	db14      	blt.n	801d48c <lfs_dir_find+0x158>
            if (tag) {
 801d462:	2800      	cmp	r0, #0
 801d464:	d195      	bne.n	801d392 <lfs_dir_find+0x5e>
            if (!dir->split) {
 801d466:	f898 3017 	ldrb.w	r3, [r8, #23]
 801d46a:	b14b      	cbz	r3, 801d480 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801d46c:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 801d470:	212f      	movs	r1, #47	@ 0x2f
 801d472:	4620      	mov	r0, r4
 801d474:	f00c fb4b 	bl	8029b0e <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801d478:	2800      	cmp	r0, #0
 801d47a:	d0df      	beq.n	801d43c <lfs_dir_find+0x108>
 801d47c:	2300      	movs	r3, #0
 801d47e:	e7de      	b.n	801d43e <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 801d480:	f06f 0601 	mvn.w	r6, #1
 801d484:	e003      	b.n	801d48e <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 801d486:	f06f 0613 	mvn.w	r6, #19
 801d48a:	e000      	b.n	801d48e <lfs_dir_find+0x15a>
 801d48c:	4606      	mov	r6, r0
}
 801d48e:	4630      	mov	r0, r6
 801d490:	b00d      	add	sp, #52	@ 0x34
 801d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d496:	bf00      	nop
 801d498:	002ffc00 	.word	0x002ffc00
 801d49c:	080369f4 	.word	0x080369f4
 801d4a0:	080361d8 	.word	0x080361d8
 801d4a4:	700ffc00 	.word	0x700ffc00
 801d4a8:	0801a4ad 	.word	0x0801a4ad

0801d4ac <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 801d4ac:	b570      	push	{r4, r5, r6, lr}
 801d4ae:	b09a      	sub	sp, #104	@ 0x68
 801d4b0:	4604      	mov	r4, r0
 801d4b2:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 801d4b4:	f7ff fad2 	bl	801ca5c <lfs_fs_forceconsistency>
    if (err) {
 801d4b8:	4603      	mov	r3, r0
 801d4ba:	b110      	cbz	r0, 801d4c2 <lfs_remove_+0x16>
}
 801d4bc:	4618      	mov	r0, r3
 801d4be:	b01a      	add	sp, #104	@ 0x68
 801d4c0:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801d4c2:	2300      	movs	r3, #0
 801d4c4:	aa03      	add	r2, sp, #12
 801d4c6:	a910      	add	r1, sp, #64	@ 0x40
 801d4c8:	4620      	mov	r0, r4
 801d4ca:	f7ff ff33 	bl	801d334 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801d4ce:	1e03      	subs	r3, r0, #0
 801d4d0:	dbf4      	blt.n	801d4bc <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 801d4d2:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801d4d6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801d4da:	4295      	cmp	r5, r2
 801d4dc:	d031      	beq.n	801d542 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 801d4de:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801d4e0:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 801d4e2:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801d4e6:	2e02      	cmp	r6, #2
 801d4e8:	d02e      	beq.n	801d548 <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 801d4ea:	02ad      	lsls	r5, r5, #10
 801d4ec:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 801d4f0:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 801d4f4:	9518      	str	r5, [sp, #96]	@ 0x60
 801d4f6:	2300      	movs	r3, #0
 801d4f8:	9319      	str	r3, [sp, #100]	@ 0x64
 801d4fa:	2301      	movs	r3, #1
 801d4fc:	aa18      	add	r2, sp, #96	@ 0x60
 801d4fe:	a910      	add	r1, sp, #64	@ 0x40
 801d500:	4620      	mov	r0, r4
 801d502:	f7ff fa03 	bl	801c90c <lfs_dir_commit>
    if (err) {
 801d506:	4603      	mov	r3, r0
 801d508:	2800      	cmp	r0, #0
 801d50a:	d142      	bne.n	801d592 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 801d50c:	9a06      	ldr	r2, [sp, #24]
 801d50e:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801d510:	2e02      	cmp	r6, #2
 801d512:	d1d3      	bne.n	801d4bc <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 801d514:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801d518:	4620      	mov	r0, r4
 801d51a:	f7fc f9db 	bl	80198d4 <lfs_fs_preporphans>
        if (err) {
 801d51e:	4603      	mov	r3, r0
 801d520:	2800      	cmp	r0, #0
 801d522:	d1cb      	bne.n	801d4bc <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801d524:	aa10      	add	r2, sp, #64	@ 0x40
 801d526:	a908      	add	r1, sp, #32
 801d528:	4620      	mov	r0, r4
 801d52a:	f7fe f8e5 	bl	801b6f8 <lfs_fs_pred>
        if (err) {
 801d52e:	4603      	mov	r3, r0
 801d530:	2800      	cmp	r0, #0
 801d532:	d1c3      	bne.n	801d4bc <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801d534:	aa08      	add	r2, sp, #32
 801d536:	a910      	add	r1, sp, #64	@ 0x40
 801d538:	4620      	mov	r0, r4
 801d53a:	f7ff faa3 	bl	801ca84 <lfs_dir_drop>
 801d53e:	4603      	mov	r3, r0
        if (err) {
 801d540:	e7bc      	b.n	801d4bc <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801d542:	f06f 0315 	mvn.w	r3, #21
 801d546:	e7b9      	b.n	801d4bc <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801d548:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801d54a:	aa04      	add	r2, sp, #16
 801d54c:	9200      	str	r2, [sp, #0]
 801d54e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801d552:	f043 0308 	orr.w	r3, r3, #8
 801d556:	4a10      	ldr	r2, [pc, #64]	@ (801d598 <lfs_remove_+0xec>)
 801d558:	a910      	add	r1, sp, #64	@ 0x40
 801d55a:	4620      	mov	r0, r4
 801d55c:	f7fc fbb8 	bl	8019cd0 <lfs_dir_get>
        if (res < 0) {
 801d560:	1e03      	subs	r3, r0, #0
 801d562:	dbab      	blt.n	801d4bc <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801d564:	aa04      	add	r2, sp, #16
 801d566:	a908      	add	r1, sp, #32
 801d568:	4620      	mov	r0, r4
 801d56a:	f7fd fb9f 	bl	801acac <lfs_dir_fetch>
        if (err) {
 801d56e:	4603      	mov	r3, r0
 801d570:	2800      	cmp	r0, #0
 801d572:	d1a3      	bne.n	801d4bc <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801d574:	2101      	movs	r1, #1
 801d576:	4620      	mov	r0, r4
 801d578:	f7fc f9ac 	bl	80198d4 <lfs_fs_preporphans>
        if (err) {
 801d57c:	4603      	mov	r3, r0
 801d57e:	2800      	cmp	r0, #0
 801d580:	d19c      	bne.n	801d4bc <lfs_remove_+0x10>
        dir.type = 0;
 801d582:	2300      	movs	r3, #0
 801d584:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 801d588:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 801d58c:	ab06      	add	r3, sp, #24
 801d58e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d590:	e7ab      	b.n	801d4ea <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 801d592:	9a06      	ldr	r2, [sp, #24]
 801d594:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 801d596:	e791      	b.n	801d4bc <lfs_remove_+0x10>
 801d598:	700ffc00 	.word	0x700ffc00

0801d59c <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801d59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d59e:	b087      	sub	sp, #28
 801d5a0:	4607      	mov	r7, r0
 801d5a2:	460d      	mov	r5, r1
 801d5a4:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801d5a6:	f101 0608 	add.w	r6, r1, #8
 801d5aa:	2300      	movs	r3, #0
 801d5ac:	aa03      	add	r2, sp, #12
 801d5ae:	4631      	mov	r1, r6
 801d5b0:	f7ff fec0 	bl	801d334 <lfs_dir_find>
    if (tag < 0) {
 801d5b4:	1e04      	subs	r4, r0, #0
 801d5b6:	db14      	blt.n	801d5e2 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 801d5b8:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801d5bc:	2b02      	cmp	r3, #2
 801d5be:	d130      	bne.n	801d622 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 801d5c0:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 801d5c4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d5c8:	429c      	cmp	r4, r3
 801d5ca:	d10d      	bne.n	801d5e8 <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 801d5cc:	6a3b      	ldr	r3, [r7, #32]
 801d5ce:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 801d5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5d2:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801d5d4:	aa04      	add	r2, sp, #16
 801d5d6:	4631      	mov	r1, r6
 801d5d8:	4638      	mov	r0, r7
 801d5da:	f7fd fb67 	bl	801acac <lfs_dir_fetch>
    if (err) {
 801d5de:	4604      	mov	r4, r0
 801d5e0:	b188      	cbz	r0, 801d606 <lfs_dir_open_+0x6a>
}
 801d5e2:	4620      	mov	r0, r4
 801d5e4:	b007      	add	sp, #28
 801d5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801d5e8:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801d5ea:	ab04      	add	r3, sp, #16
 801d5ec:	9300      	str	r3, [sp, #0]
 801d5ee:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 801d5f2:	f043 0308 	orr.w	r3, r3, #8
 801d5f6:	4a0c      	ldr	r2, [pc, #48]	@ (801d628 <lfs_dir_open_+0x8c>)
 801d5f8:	4631      	mov	r1, r6
 801d5fa:	4638      	mov	r0, r7
 801d5fc:	f7fc fb68 	bl	8019cd0 <lfs_dir_get>
        if (res < 0) {
 801d600:	1e04      	subs	r4, r0, #0
 801d602:	dae7      	bge.n	801d5d4 <lfs_dir_open_+0x38>
 801d604:	e7ed      	b.n	801d5e2 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 801d606:	68ab      	ldr	r3, [r5, #8]
 801d608:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 801d60a:	68eb      	ldr	r3, [r5, #12]
 801d60c:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 801d60e:	2300      	movs	r3, #0
 801d610:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 801d612:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 801d614:	2302      	movs	r3, #2
 801d616:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801d618:	4629      	mov	r1, r5
 801d61a:	4638      	mov	r0, r7
 801d61c:	f7fc f858 	bl	80196d0 <lfs_mlist_append>
    return 0;
 801d620:	e7df      	b.n	801d5e2 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 801d622:	f06f 0413 	mvn.w	r4, #19
 801d626:	e7dc      	b.n	801d5e2 <lfs_dir_open_+0x46>
 801d628:	700ffc00 	.word	0x700ffc00

0801d62c <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d630:	b0ad      	sub	sp, #180	@ 0xb4
 801d632:	4604      	mov	r4, r0
 801d634:	9103      	str	r1, [sp, #12]
 801d636:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 801d638:	f7ff fa10 	bl	801ca5c <lfs_fs_forceconsistency>
    if (err) {
 801d63c:	4606      	mov	r6, r0
 801d63e:	b118      	cbz	r0, 801d648 <lfs_rename_+0x1c>
}
 801d640:	4630      	mov	r0, r6
 801d642:	b02d      	add	sp, #180	@ 0xb4
 801d644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 801d648:	2300      	movs	r3, #0
 801d64a:	aa03      	add	r2, sp, #12
 801d64c:	a922      	add	r1, sp, #136	@ 0x88
 801d64e:	4620      	mov	r0, r4
 801d650:	f7ff fe70 	bl	801d334 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801d654:	2800      	cmp	r0, #0
 801d656:	f2c0 809e 	blt.w	801d796 <lfs_rename_+0x16a>
 801d65a:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 801d65c:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801d660:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d664:	429d      	cmp	r5, r3
 801d666:	f000 8094 	beq.w	801d792 <lfs_rename_+0x166>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 801d66a:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 801d66e:	aa02      	add	r2, sp, #8
 801d670:	a91a      	add	r1, sp, #104	@ 0x68
 801d672:	4620      	mov	r0, r4
 801d674:	f7ff fe5e 	bl	801d334 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801d678:	f1b0 0900 	subs.w	r9, r0, #0
 801d67c:	f2c0 808d 	blt.w	801d79a <lfs_rename_+0x16e>
    return (tag & 0x000ffc00) >> 10;
 801d680:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801d684:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d688:	429a      	cmp	r2, r3
 801d68a:	f000 8086 	beq.w	801d79a <lfs_rename_+0x16e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d68e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d690:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d692:	429a      	cmp	r2, r3
 801d694:	d008      	beq.n	801d6a8 <lfs_rename_+0x7c>
 801d696:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801d698:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801d69a:	4281      	cmp	r1, r0
 801d69c:	d004      	beq.n	801d6a8 <lfs_rename_+0x7c>
 801d69e:	4299      	cmp	r1, r3
 801d6a0:	d002      	beq.n	801d6a8 <lfs_rename_+0x7c>
 801d6a2:	4290      	cmp	r0, r2
 801d6a4:	d000      	beq.n	801d6a8 <lfs_rename_+0x7c>
 801d6a6:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 801d6a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d6aa:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 801d6ac:	f119 0f02 	cmn.w	r9, #2
 801d6b0:	f000 8085 	beq.w	801d7be <lfs_rename_+0x192>
    return (tag & 0x7ff00000) >> 20;
 801d6b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801d6b8:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801d6bc:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 801d6c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	f040 808a 	bne.w	801d7de <lfs_rename_+0x1b2>
    } else if (samepair && newid == newoldid) {
 801d6ca:	b91e      	cbnz	r6, 801d6d4 <lfs_rename_+0xa8>
 801d6cc:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801d6d0:	42ab      	cmp	r3, r5
 801d6d2:	d0b5      	beq.n	801d640 <lfs_rename_+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801d6d4:	2a02      	cmp	r2, #2
 801d6d6:	f000 808a 	beq.w	801d7ee <lfs_rename_+0x1c2>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801d6da:	46aa      	mov	sl, r5
    if (!samepair) {
 801d6dc:	b126      	cbz	r6, 801d6e8 <lfs_rename_+0xbc>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 801d6de:	aa22      	add	r2, sp, #136	@ 0x88
 801d6e0:	4651      	mov	r1, sl
 801d6e2:	4620      	mov	r0, r4
 801d6e4:	f7fc f8a6 	bl	8019834 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801d6e8:	f119 0f02 	cmn.w	r9, #2
 801d6ec:	f000 80b4 	beq.w	801d858 <lfs_rename_+0x22c>
 801d6f0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801d6f4:	029b      	lsls	r3, r3, #10
 801d6f6:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801d6fa:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d6fe:	9305      	str	r3, [sp, #20]
 801d700:	2200      	movs	r2, #0
 801d702:	9206      	str	r2, [sp, #24]
 801d704:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 801d708:	02bf      	lsls	r7, r7, #10
 801d70a:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 801d70e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d712:	9307      	str	r3, [sp, #28]
 801d714:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801d716:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801d71a:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 801d71e:	f8dd b008 	ldr.w	fp, [sp, #8]
 801d722:	4658      	mov	r0, fp
 801d724:	f7f2 fdbc 	bl	80102a0 <strlen>
 801d728:	ea48 0000 	orr.w	r0, r8, r0
 801d72c:	9009      	str	r0, [sp, #36]	@ 0x24
 801d72e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801d732:	432f      	orrs	r7, r5
 801d734:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 801d738:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 801d73c:	970b      	str	r7, [sp, #44]	@ 0x2c
 801d73e:	ab22      	add	r3, sp, #136	@ 0x88
 801d740:	930c      	str	r3, [sp, #48]	@ 0x30
 801d742:	2e00      	cmp	r6, #0
 801d744:	f040 808a 	bne.w	801d85c <lfs_rename_+0x230>
 801d748:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 801d74c:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 801d750:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d754:	930d      	str	r3, [sp, #52]	@ 0x34
 801d756:	2300      	movs	r3, #0
 801d758:	930e      	str	r3, [sp, #56]	@ 0x38
 801d75a:	2305      	movs	r3, #5
 801d75c:	aa05      	add	r2, sp, #20
 801d75e:	a91a      	add	r1, sp, #104	@ 0x68
 801d760:	4620      	mov	r0, r4
 801d762:	f7ff f8d3 	bl	801c90c <lfs_dir_commit>
    if (err) {
 801d766:	4607      	mov	r7, r0
 801d768:	2800      	cmp	r0, #0
 801d76a:	d179      	bne.n	801d860 <lfs_rename_+0x234>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801d76c:	b126      	cbz	r6, 801d778 <lfs_rename_+0x14c>
    return lfs_tag_type1(a->tag);
 801d76e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801d770:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801d772:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801d776:	d177      	bne.n	801d868 <lfs_rename_+0x23c>
    lfs->mlist = prevdir.next;
 801d778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d77a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 801d77c:	f119 0f02 	cmn.w	r9, #2
 801d780:	f000 80a9 	beq.w	801d8d6 <lfs_rename_+0x2aa>
    return (tag & 0x7ff00000) >> 20;
 801d784:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801d788:	2802      	cmp	r0, #2
 801d78a:	f000 8088 	beq.w	801d89e <lfs_rename_+0x272>
    return 0;
 801d78e:	463e      	mov	r6, r7
 801d790:	e756      	b.n	801d640 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801d792:	f06f 0015 	mvn.w	r0, #21
 801d796:	4606      	mov	r6, r0
 801d798:	e752      	b.n	801d640 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801d79a:	f119 0f02 	cmn.w	r9, #2
 801d79e:	d106      	bne.n	801d7ae <lfs_rename_+0x182>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801d7a0:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 801d7a4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d7a8:	429a      	cmp	r2, r3
 801d7aa:	f47f af70 	bne.w	801d68e <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801d7ae:	f1b9 0f00 	cmp.w	r9, #0
 801d7b2:	db02      	blt.n	801d7ba <lfs_rename_+0x18e>
 801d7b4:	f06f 0615 	mvn.w	r6, #21
 801d7b8:	e742      	b.n	801d640 <lfs_rename_+0x14>
 801d7ba:	464e      	mov	r6, r9
 801d7bc:	e740      	b.n	801d640 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 801d7be:	9802      	ldr	r0, [sp, #8]
 801d7c0:	f7f2 fd6e 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801d7c4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801d7c6:	4283      	cmp	r3, r0
 801d7c8:	f0c0 8082 	bcc.w	801d8d0 <lfs_rename_+0x2a4>
        if (samepair && newid <= newoldid) {
 801d7cc:	2e00      	cmp	r6, #0
 801d7ce:	d141      	bne.n	801d854 <lfs_rename_+0x228>
 801d7d0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801d7d4:	42ab      	cmp	r3, r5
 801d7d6:	d83b      	bhi.n	801d850 <lfs_rename_+0x224>
            newoldid += 1;
 801d7d8:	f105 0a01 	add.w	sl, r5, #1
 801d7dc:	e77e      	b.n	801d6dc <lfs_rename_+0xb0>
                : LFS_ERR_NOTDIR;
 801d7de:	2a02      	cmp	r2, #2
 801d7e0:	d002      	beq.n	801d7e8 <lfs_rename_+0x1bc>
 801d7e2:	f06f 0613 	mvn.w	r6, #19
 801d7e6:	e72b      	b.n	801d640 <lfs_rename_+0x14>
 801d7e8:	f06f 0614 	mvn.w	r6, #20
 801d7ec:	e728      	b.n	801d640 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 801d7ee:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801d7f2:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801d7f4:	aa05      	add	r2, sp, #20
 801d7f6:	9200      	str	r2, [sp, #0]
 801d7f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801d7fc:	f043 0308 	orr.w	r3, r3, #8
 801d800:	4a36      	ldr	r2, [pc, #216]	@ (801d8dc <lfs_rename_+0x2b0>)
 801d802:	a91a      	add	r1, sp, #104	@ 0x68
 801d804:	4620      	mov	r0, r4
 801d806:	f7fc fa63 	bl	8019cd0 <lfs_dir_get>
        if (res < 0) {
 801d80a:	2800      	cmp	r0, #0
 801d80c:	db1a      	blt.n	801d844 <lfs_rename_+0x218>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801d80e:	aa05      	add	r2, sp, #20
 801d810:	a911      	add	r1, sp, #68	@ 0x44
 801d812:	4620      	mov	r0, r4
 801d814:	f7fd fa4a 	bl	801acac <lfs_dir_fetch>
        if (err) {
 801d818:	b9b0      	cbnz	r0, 801d848 <lfs_rename_+0x21c>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 801d81a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d81c:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 801d820:	d002      	beq.n	801d828 <lfs_rename_+0x1fc>
            return LFS_ERR_NOTEMPTY;
 801d822:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 801d826:	e70b      	b.n	801d640 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 801d828:	2101      	movs	r1, #1
 801d82a:	4620      	mov	r0, r4
 801d82c:	f7fc f852 	bl	80198d4 <lfs_fs_preporphans>
        if (err) {
 801d830:	b960      	cbnz	r0, 801d84c <lfs_rename_+0x220>
        prevdir.type = 0;
 801d832:	2300      	movs	r3, #0
 801d834:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 801d838:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 801d83c:	ab0f      	add	r3, sp, #60	@ 0x3c
 801d83e:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 801d840:	46aa      	mov	sl, r5
 801d842:	e74b      	b.n	801d6dc <lfs_rename_+0xb0>
            return (int)res;
 801d844:	4606      	mov	r6, r0
 801d846:	e6fb      	b.n	801d640 <lfs_rename_+0x14>
            return err;
 801d848:	4606      	mov	r6, r0
 801d84a:	e6f9      	b.n	801d640 <lfs_rename_+0x14>
            return err;
 801d84c:	4606      	mov	r6, r0
 801d84e:	e6f7      	b.n	801d640 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801d850:	46aa      	mov	sl, r5
 801d852:	e743      	b.n	801d6dc <lfs_rename_+0xb0>
 801d854:	46aa      	mov	sl, r5
 801d856:	e742      	b.n	801d6de <lfs_rename_+0xb2>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801d858:	2300      	movs	r3, #0
 801d85a:	e750      	b.n	801d6fe <lfs_rename_+0xd2>
 801d85c:	2300      	movs	r3, #0
 801d85e:	e779      	b.n	801d754 <lfs_rename_+0x128>
        lfs->mlist = prevdir.next;
 801d860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d862:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 801d864:	4606      	mov	r6, r0
 801d866:	e6eb      	b.n	801d640 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801d868:	2200      	movs	r2, #0
 801d86a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801d86e:	4620      	mov	r0, r4
 801d870:	f7fb ffe0 	bl	8019834 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 801d874:	02ab      	lsls	r3, r5, #10
 801d876:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801d87a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d87e:	932a      	str	r3, [sp, #168]	@ 0xa8
 801d880:	2300      	movs	r3, #0
 801d882:	932b      	str	r3, [sp, #172]	@ 0xac
 801d884:	2301      	movs	r3, #1
 801d886:	aa2a      	add	r2, sp, #168	@ 0xa8
 801d888:	a922      	add	r1, sp, #136	@ 0x88
 801d88a:	4620      	mov	r0, r4
 801d88c:	f7ff f83e 	bl	801c90c <lfs_dir_commit>
        if (err) {
 801d890:	4606      	mov	r6, r0
 801d892:	2800      	cmp	r0, #0
 801d894:	f43f af70 	beq.w	801d778 <lfs_rename_+0x14c>
            lfs->mlist = prevdir.next;
 801d898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d89a:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 801d89c:	e6d0      	b.n	801d640 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 801d89e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801d8a2:	4620      	mov	r0, r4
 801d8a4:	f7fc f816 	bl	80198d4 <lfs_fs_preporphans>
        if (err) {
 801d8a8:	4606      	mov	r6, r0
 801d8aa:	2800      	cmp	r0, #0
 801d8ac:	f47f aec8 	bne.w	801d640 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 801d8b0:	aa1a      	add	r2, sp, #104	@ 0x68
 801d8b2:	a911      	add	r1, sp, #68	@ 0x44
 801d8b4:	4620      	mov	r0, r4
 801d8b6:	f7fd ff1f 	bl	801b6f8 <lfs_fs_pred>
        if (err) {
 801d8ba:	4606      	mov	r6, r0
 801d8bc:	2800      	cmp	r0, #0
 801d8be:	f47f aebf 	bne.w	801d640 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 801d8c2:	aa11      	add	r2, sp, #68	@ 0x44
 801d8c4:	a91a      	add	r1, sp, #104	@ 0x68
 801d8c6:	4620      	mov	r0, r4
 801d8c8:	f7ff f8dc 	bl	801ca84 <lfs_dir_drop>
 801d8cc:	4606      	mov	r6, r0
        if (err) {
 801d8ce:	e6b7      	b.n	801d640 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 801d8d0:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801d8d4:	e6b4      	b.n	801d640 <lfs_rename_+0x14>
    return 0;
 801d8d6:	463e      	mov	r6, r7
 801d8d8:	e6b2      	b.n	801d640 <lfs_rename_+0x14>
 801d8da:	bf00      	nop
 801d8dc:	700ffc00 	.word	0x700ffc00

0801d8e0 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 801d8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d8e4:	b08b      	sub	sp, #44	@ 0x2c
 801d8e6:	4607      	mov	r7, r0
 801d8e8:	460c      	mov	r4, r1
 801d8ea:	9203      	str	r2, [sp, #12]
 801d8ec:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801d8ee:	f013 0f02 	tst.w	r3, #2
 801d8f2:	d005      	beq.n	801d900 <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 801d8f4:	f7ff f8b2 	bl	801ca5c <lfs_fs_forceconsistency>
        if (err) {
 801d8f8:	4606      	mov	r6, r0
 801d8fa:	2800      	cmp	r0, #0
 801d8fc:	f040 8109 	bne.w	801db12 <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 801d900:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d902:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 801d904:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 801d906:	2300      	movs	r3, #0
 801d908:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 801d90a:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801d90c:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 801d90e:	f104 0808 	add.w	r8, r4, #8
 801d912:	1d23      	adds	r3, r4, #4
 801d914:	aa03      	add	r2, sp, #12
 801d916:	4641      	mov	r1, r8
 801d918:	4638      	mov	r0, r7
 801d91a:	f7ff fd0b 	bl	801d334 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 801d91e:	1e06      	subs	r6, r0, #0
 801d920:	da09      	bge.n	801d936 <lfs_file_opencfg_+0x56>
 801d922:	f116 0f02 	cmn.w	r6, #2
 801d926:	f040 80ec 	bne.w	801db02 <lfs_file_opencfg_+0x222>
 801d92a:	88a2      	ldrh	r2, [r4, #4]
 801d92c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d930:	429a      	cmp	r2, r3
 801d932:	f000 80e6 	beq.w	801db02 <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 801d936:	2301      	movs	r3, #1
 801d938:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801d93a:	4621      	mov	r1, r4
 801d93c:	4638      	mov	r0, r7
 801d93e:	f7fb fec7 	bl	80196d0 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 801d942:	f116 0f02 	cmn.w	r6, #2
 801d946:	d019      	beq.n	801d97c <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 801d948:	f415 7f00 	tst.w	r5, #512	@ 0x200
 801d94c:	f040 80d7 	bne.w	801dafe <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 801d950:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801d954:	2e01      	cmp	r6, #1
 801d956:	f040 80e0 	bne.w	801db1a <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 801d95a:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801d95e:	d042      	beq.n	801d9e6 <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801d960:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 801d964:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801d968:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 801d96c:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 801d970:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d976:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801d978:	2500      	movs	r5, #0
 801d97a:	e064      	b.n	801da46 <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 801d97c:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801d980:	f000 80bf 	beq.w	801db02 <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 801d984:	9d03      	ldr	r5, [sp, #12]
 801d986:	4628      	mov	r0, r5
 801d988:	f7f2 fc8a 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801d98c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d98e:	4283      	cmp	r3, r0
 801d990:	d202      	bcs.n	801d998 <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 801d992:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801d996:	e0b4      	b.n	801db02 <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801d998:	88a3      	ldrh	r3, [r4, #4]
 801d99a:	029b      	lsls	r3, r3, #10
 801d99c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801d9a0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801d9a4:	9204      	str	r2, [sp, #16]
 801d9a6:	2200      	movs	r2, #0
 801d9a8:	9205      	str	r2, [sp, #20]
 801d9aa:	4318      	orrs	r0, r3
 801d9ac:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801d9b0:	9006      	str	r0, [sp, #24]
 801d9b2:	9507      	str	r5, [sp, #28]
 801d9b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801d9b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d9bc:	9308      	str	r3, [sp, #32]
 801d9be:	9209      	str	r2, [sp, #36]	@ 0x24
 801d9c0:	2303      	movs	r3, #3
 801d9c2:	aa04      	add	r2, sp, #16
 801d9c4:	4641      	mov	r1, r8
 801d9c6:	4638      	mov	r0, r7
 801d9c8:	f7fe ffa0 	bl	801c90c <lfs_dir_commit>
 801d9cc:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801d9ce:	f110 0f1c 	cmn.w	r0, #28
 801d9d2:	d005      	beq.n	801d9e0 <lfs_file_opencfg_+0x100>
        if (err) {
 801d9d4:	2800      	cmp	r0, #0
 801d9d6:	f040 8094 	bne.w	801db02 <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 801d9da:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 801db30 <lfs_file_opencfg_+0x250>
 801d9de:	e7cb      	b.n	801d978 <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801d9e0:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 801d9e4:	e08d      	b.n	801db02 <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801d9e6:	88a3      	ldrh	r3, [r4, #4]
 801d9e8:	029b      	lsls	r3, r3, #10
 801d9ea:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801d9ee:	9200      	str	r2, [sp, #0]
 801d9f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801d9f4:	f043 0308 	orr.w	r3, r3, #8
 801d9f8:	4a4b      	ldr	r2, [pc, #300]	@ (801db28 <lfs_file_opencfg_+0x248>)
 801d9fa:	4641      	mov	r1, r8
 801d9fc:	4638      	mov	r0, r7
 801d9fe:	f7fc f967 	bl	8019cd0 <lfs_dir_get>
        if (tag < 0) {
 801da02:	f1b0 0900 	subs.w	r9, r0, #0
 801da06:	dab7      	bge.n	801d978 <lfs_file_opencfg_+0x98>
            err = tag;
 801da08:	464e      	mov	r6, r9
 801da0a:	e07a      	b.n	801db02 <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 801da0c:	685b      	ldr	r3, [r3, #4]
 801da0e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801da12:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801da16:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 801da1a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 801da1e:	88a3      	ldrh	r3, [r4, #4]
 801da20:	029b      	lsls	r3, r3, #10
 801da22:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801da26:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801da28:	6849      	ldr	r1, [r1, #4]
 801da2a:	9100      	str	r1, [sp, #0]
 801da2c:	4313      	orrs	r3, r2
 801da2e:	4a3f      	ldr	r2, [pc, #252]	@ (801db2c <lfs_file_opencfg_+0x24c>)
 801da30:	4641      	mov	r1, r8
 801da32:	4638      	mov	r0, r7
 801da34:	f7fc f94c 	bl	8019cd0 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 801da38:	1e06      	subs	r6, r0, #0
 801da3a:	da0c      	bge.n	801da56 <lfs_file_opencfg_+0x176>
 801da3c:	f116 0f02 	cmn.w	r6, #2
 801da40:	d009      	beq.n	801da56 <lfs_file_opencfg_+0x176>
 801da42:	e05e      	b.n	801db02 <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801da44:	3501      	adds	r5, #1
 801da46:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801da48:	689a      	ldr	r2, [r3, #8]
 801da4a:	42aa      	cmp	r2, r5
 801da4c:	d915      	bls.n	801da7a <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 801da4e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801da50:	f012 0f01 	tst.w	r2, #1
 801da54:	d1da      	bne.n	801da0c <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801da56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801da58:	f013 0f02 	tst.w	r3, #2
 801da5c:	d0f2      	beq.n	801da44 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801da5e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801da60:	6852      	ldr	r2, [r2, #4]
 801da62:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801da66:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801da6a:	6891      	ldr	r1, [r2, #8]
 801da6c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801da6e:	4291      	cmp	r1, r2
 801da70:	d856      	bhi.n	801db20 <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 801da72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801da76:	6323      	str	r3, [r4, #48]	@ 0x30
 801da78:	e7e4      	b.n	801da44 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	b16b      	cbz	r3, 801da9a <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 801da7e:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 801da80:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801da84:	4638      	mov	r0, r7
 801da86:	f7fb ff55 	bl	8019934 <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 801da8a:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801da8e:	f240 2301 	movw	r3, #513	@ 0x201
 801da92:	429a      	cmp	r2, r3
 801da94:	d00b      	beq.n	801daae <lfs_file_opencfg_+0x1ce>
    return 0;
 801da96:	2600      	movs	r6, #0
 801da98:	e03b      	b.n	801db12 <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801da9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 801da9c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801da9e:	f7fb fb1b 	bl	80190d8 <pvPortMalloc>
 801daa2:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 801daa4:	2800      	cmp	r0, #0
 801daa6:	d1eb      	bne.n	801da80 <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 801daa8:	f06f 060b 	mvn.w	r6, #11
 801daac:	e029      	b.n	801db02 <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 801daae:	f06f 0101 	mvn.w	r1, #1
 801dab2:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 801dab4:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 801dab8:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 801daba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dabc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801dac0:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 801dac2:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 801dac4:	2300      	movs	r3, #0
 801dac6:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 801dac8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801daca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dacc:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 801dace:	b90a      	cbnz	r2, 801dad4 <lfs_file_opencfg_+0x1f4>
    return 0;
 801dad0:	2600      	movs	r6, #0
 801dad2:	e01e      	b.n	801db12 <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 801dad4:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 801dad6:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801dada:	4293      	cmp	r3, r2
 801dadc:	bf28      	it	cs
 801dade:	4613      	movcs	r3, r2
 801dae0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 801dae4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801dae6:	9200      	str	r2, [sp, #0]
 801dae8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801daec:	4a0e      	ldr	r2, [pc, #56]	@ (801db28 <lfs_file_opencfg_+0x248>)
 801daee:	4641      	mov	r1, r8
 801daf0:	4638      	mov	r0, r7
 801daf2:	f7fc f8ed 	bl	8019cd0 <lfs_dir_get>
            if (res < 0) {
 801daf6:	1e06      	subs	r6, r0, #0
 801daf8:	db03      	blt.n	801db02 <lfs_file_opencfg_+0x222>
    return 0;
 801dafa:	2600      	movs	r6, #0
 801dafc:	e009      	b.n	801db12 <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 801dafe:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 801db02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801db04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801db08:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 801db0a:	4621      	mov	r1, r4
 801db0c:	4638      	mov	r0, r7
 801db0e:	f7ff fbfd 	bl	801d30c <lfs_file_close_>
}
 801db12:	4630      	mov	r0, r6
 801db14:	b00b      	add	sp, #44	@ 0x2c
 801db16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 801db1a:	f06f 0614 	mvn.w	r6, #20
 801db1e:	e7f0      	b.n	801db02 <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 801db20:	f06f 061b 	mvn.w	r6, #27
 801db24:	e7ed      	b.n	801db02 <lfs_file_opencfg_+0x222>
 801db26:	bf00      	nop
 801db28:	700ffc00 	.word	0x700ffc00
 801db2c:	7ffffc00 	.word	0x7ffffc00
 801db30:	20100000 	.word	0x20100000

0801db34 <lfs_file_open_>:
        const char *path, int flags) {
 801db34:	b510      	push	{r4, lr}
 801db36:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 801db38:	4c02      	ldr	r4, [pc, #8]	@ (801db44 <lfs_file_open_+0x10>)
 801db3a:	9400      	str	r4, [sp, #0]
 801db3c:	f7ff fed0 	bl	801d8e0 <lfs_file_opencfg_>
}
 801db40:	b002      	add	sp, #8
 801db42:	bd10      	pop	{r4, pc}
 801db44:	08036304 	.word	0x08036304

0801db48 <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 801db48:	b530      	push	{r4, r5, lr}
 801db4a:	b0ab      	sub	sp, #172	@ 0xac
 801db4c:	4604      	mov	r4, r0
 801db4e:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 801db50:	f7fe ff84 	bl	801ca5c <lfs_fs_forceconsistency>
    if (err) {
 801db54:	4603      	mov	r3, r0
 801db56:	b110      	cbz	r0, 801db5e <lfs_mkdir_+0x16>
}
 801db58:	4618      	mov	r0, r3
 801db5a:	b02b      	add	sp, #172	@ 0xac
 801db5c:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 801db5e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801db60:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801db62:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 801db66:	aa01      	add	r2, sp, #4
 801db68:	a91e      	add	r1, sp, #120	@ 0x78
 801db6a:	4620      	mov	r0, r4
 801db6c:	f7ff fbe2 	bl	801d334 <lfs_dir_find>
 801db70:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 801db72:	f110 0f02 	cmn.w	r0, #2
 801db76:	d12f      	bne.n	801dbd8 <lfs_mkdir_+0x90>
 801db78:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 801db7c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801db80:	4291      	cmp	r1, r2
 801db82:	d029      	beq.n	801dbd8 <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 801db84:	9801      	ldr	r0, [sp, #4]
 801db86:	f7f2 fb8b 	bl	80102a0 <strlen>
 801db8a:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 801db8c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801db8e:	4283      	cmp	r3, r0
 801db90:	f0c0 8089 	bcc.w	801dca6 <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 801db94:	4620      	mov	r0, r4
 801db96:	f7fb fdad 	bl	80196f4 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 801db9a:	a913      	add	r1, sp, #76	@ 0x4c
 801db9c:	4620      	mov	r0, r4
 801db9e:	f7fd f9f3 	bl	801af88 <lfs_dir_alloc>
    if (err) {
 801dba2:	4603      	mov	r3, r0
 801dba4:	2800      	cmp	r0, #0
 801dba6:	d1d7      	bne.n	801db58 <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 801dba8:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801dbac:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 801dbb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801dbb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801dbb8:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801dbbc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 801dbc0:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 801dbc4:	b16b      	cbz	r3, 801dbe2 <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 801dbc6:	aa11      	add	r2, sp, #68	@ 0x44
 801dbc8:	a90b      	add	r1, sp, #44	@ 0x2c
 801dbca:	4620      	mov	r0, r4
 801dbcc:	f7fd f86e 	bl	801acac <lfs_dir_fetch>
        if (err) {
 801dbd0:	4603      	mov	r3, r0
 801dbd2:	2800      	cmp	r0, #0
 801dbd4:	d0f4      	beq.n	801dbc0 <lfs_mkdir_+0x78>
 801dbd6:	e7bf      	b.n	801db58 <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	dbbd      	blt.n	801db58 <lfs_mkdir_+0x10>
 801dbdc:	f06f 0310 	mvn.w	r3, #16
 801dbe0:	e7ba      	b.n	801db58 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 801dbe2:	4b32      	ldr	r3, [pc, #200]	@ (801dcac <lfs_mkdir_+0x164>)
 801dbe4:	9326      	str	r3, [sp, #152]	@ 0x98
 801dbe6:	ab11      	add	r3, sp, #68	@ 0x44
 801dbe8:	9327      	str	r3, [sp, #156]	@ 0x9c
 801dbea:	2301      	movs	r3, #1
 801dbec:	aa26      	add	r2, sp, #152	@ 0x98
 801dbee:	a913      	add	r1, sp, #76	@ 0x4c
 801dbf0:	4620      	mov	r0, r4
 801dbf2:	f7fe fe8b 	bl	801c90c <lfs_dir_commit>
    if (err) {
 801dbf6:	4603      	mov	r3, r0
 801dbf8:	2800      	cmp	r0, #0
 801dbfa:	d1ad      	bne.n	801db58 <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 801dbfc:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801dc00:	bb33      	cbnz	r3, 801dc50 <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801dc02:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 801dc06:	029b      	lsls	r3, r3, #10
 801dc08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801dc0c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801dc10:	9203      	str	r2, [sp, #12]
 801dc12:	2200      	movs	r2, #0
 801dc14:	9204      	str	r2, [sp, #16]
 801dc16:	431d      	orrs	r5, r3
 801dc18:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801dc1c:	9505      	str	r5, [sp, #20]
 801dc1e:	9a01      	ldr	r2, [sp, #4]
 801dc20:	9206      	str	r2, [sp, #24]
 801dc22:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801dc26:	f043 0308 	orr.w	r3, r3, #8
 801dc2a:	9307      	str	r3, [sp, #28]
 801dc2c:	ab13      	add	r3, sp, #76	@ 0x4c
 801dc2e:	9308      	str	r3, [sp, #32]
 801dc30:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801dc34:	2b00      	cmp	r3, #0
 801dc36:	d134      	bne.n	801dca2 <lfs_mkdir_+0x15a>
 801dc38:	4b1c      	ldr	r3, [pc, #112]	@ (801dcac <lfs_mkdir_+0x164>)
 801dc3a:	9309      	str	r3, [sp, #36]	@ 0x24
 801dc3c:	ab13      	add	r3, sp, #76	@ 0x4c
 801dc3e:	930a      	str	r3, [sp, #40]	@ 0x28
 801dc40:	2304      	movs	r3, #4
 801dc42:	aa03      	add	r2, sp, #12
 801dc44:	a91e      	add	r1, sp, #120	@ 0x78
 801dc46:	4620      	mov	r0, r4
 801dc48:	f7fe fe60 	bl	801c90c <lfs_dir_commit>
 801dc4c:	4603      	mov	r3, r0
    if (err) {
 801dc4e:	e783      	b.n	801db58 <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801dc50:	2101      	movs	r1, #1
 801dc52:	4620      	mov	r0, r4
 801dc54:	f7fb fe3e 	bl	80198d4 <lfs_fs_preporphans>
        if (err) {
 801dc58:	4603      	mov	r3, r0
 801dc5a:	2800      	cmp	r0, #0
 801dc5c:	f47f af7c 	bne.w	801db58 <lfs_mkdir_+0x10>
        cwd.type = 0;
 801dc60:	2300      	movs	r3, #0
 801dc62:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 801dc66:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 801dc6a:	ab1c      	add	r3, sp, #112	@ 0x70
 801dc6c:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801dc6e:	4b0f      	ldr	r3, [pc, #60]	@ (801dcac <lfs_mkdir_+0x164>)
 801dc70:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dc72:	ab13      	add	r3, sp, #76	@ 0x4c
 801dc74:	9329      	str	r3, [sp, #164]	@ 0xa4
 801dc76:	2301      	movs	r3, #1
 801dc78:	aa28      	add	r2, sp, #160	@ 0xa0
 801dc7a:	a90b      	add	r1, sp, #44	@ 0x2c
 801dc7c:	4620      	mov	r0, r4
 801dc7e:	f7fe fe45 	bl	801c90c <lfs_dir_commit>
        if (err) {
 801dc82:	4603      	mov	r3, r0
 801dc84:	b110      	cbz	r0, 801dc8c <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 801dc86:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801dc88:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 801dc8a:	e765      	b.n	801db58 <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 801dc8c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dc8e:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 801dc90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801dc94:	4620      	mov	r0, r4
 801dc96:	f7fb fe1d 	bl	80198d4 <lfs_fs_preporphans>
        if (err) {
 801dc9a:	4603      	mov	r3, r0
 801dc9c:	2800      	cmp	r0, #0
 801dc9e:	d0b0      	beq.n	801dc02 <lfs_mkdir_+0xba>
 801dca0:	e75a      	b.n	801db58 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801dca2:	2300      	movs	r3, #0
 801dca4:	e7c9      	b.n	801dc3a <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 801dca6:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 801dcaa:	e755      	b.n	801db58 <lfs_mkdir_+0x10>
 801dcac:	600ffc08 	.word	0x600ffc08

0801dcb0 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 801dcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcb2:	b085      	sub	sp, #20
 801dcb4:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 801dcb6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801dcba:	429a      	cmp	r2, r3
 801dcbc:	d02b      	beq.n	801dd16 <lfs_dir_getinfo+0x66>
 801dcbe:	4604      	mov	r4, r0
 801dcc0:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801dcc2:	0297      	lsls	r7, r2, #10
 801dcc4:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801dcc6:	3301      	adds	r3, #1
 801dcc8:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801dccc:	9100      	str	r1, [sp, #0]
 801dcce:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801dcd2:	4a19      	ldr	r2, [pc, #100]	@ (801dd38 <lfs_dir_getinfo+0x88>)
 801dcd4:	4631      	mov	r1, r6
 801dcd6:	f7fb fffb 	bl	8019cd0 <lfs_dir_get>
    if (tag < 0) {
 801dcda:	2800      	cmp	r0, #0
 801dcdc:	db21      	blt.n	801dd22 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801dcde:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 801dce2:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801dce4:	ab02      	add	r3, sp, #8
 801dce6:	9300      	str	r3, [sp, #0]
 801dce8:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 801dcec:	f043 0308 	orr.w	r3, r3, #8
 801dcf0:	4a12      	ldr	r2, [pc, #72]	@ (801dd3c <lfs_dir_getinfo+0x8c>)
 801dcf2:	4631      	mov	r1, r6
 801dcf4:	4620      	mov	r0, r4
 801dcf6:	f7fb ffeb 	bl	8019cd0 <lfs_dir_get>
    if (tag < 0) {
 801dcfa:	2800      	cmp	r0, #0
 801dcfc:	db11      	blt.n	801dd22 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801dcfe:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801dd02:	f240 2202 	movw	r2, #514	@ 0x202
 801dd06:	4293      	cmp	r3, r2
 801dd08:	d00d      	beq.n	801dd26 <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801dd0a:	f240 2201 	movw	r2, #513	@ 0x201
 801dd0e:	4293      	cmp	r3, r2
 801dd10:	d00d      	beq.n	801dd2e <lfs_dir_getinfo+0x7e>
    return 0;
 801dd12:	2000      	movs	r0, #0
 801dd14:	e005      	b.n	801dd22 <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 801dd16:	4b0a      	ldr	r3, [pc, #40]	@ (801dd40 <lfs_dir_getinfo+0x90>)
 801dd18:	881b      	ldrh	r3, [r3, #0]
 801dd1a:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 801dd1c:	2302      	movs	r3, #2
 801dd1e:	702b      	strb	r3, [r5, #0]
        return 0;
 801dd20:	2000      	movs	r0, #0
}
 801dd22:	b005      	add	sp, #20
 801dd24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 801dd26:	9b03      	ldr	r3, [sp, #12]
 801dd28:	606b      	str	r3, [r5, #4]
    return 0;
 801dd2a:	2000      	movs	r0, #0
 801dd2c:	e7f9      	b.n	801dd22 <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 801dd2e:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 801dd32:	6068      	str	r0, [r5, #4]
    return 0;
 801dd34:	2000      	movs	r0, #0
 801dd36:	e7f4      	b.n	801dd22 <lfs_dir_getinfo+0x72>
 801dd38:	780ffc00 	.word	0x780ffc00
 801dd3c:	700ffc00 	.word	0x700ffc00
 801dd40:	080369f4 	.word	0x080369f4

0801dd44 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801dd44:	b530      	push	{r4, r5, lr}
 801dd46:	b08b      	sub	sp, #44	@ 0x2c
 801dd48:	4604      	mov	r4, r0
 801dd4a:	9101      	str	r1, [sp, #4]
 801dd4c:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801dd4e:	2300      	movs	r3, #0
 801dd50:	aa01      	add	r2, sp, #4
 801dd52:	a902      	add	r1, sp, #8
 801dd54:	f7ff faee 	bl	801d334 <lfs_dir_find>
    if (tag < 0) {
 801dd58:	2800      	cmp	r0, #0
 801dd5a:	db06      	blt.n	801dd6a <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 801dd5c:	462b      	mov	r3, r5
 801dd5e:	f3c0 2289 	ubfx	r2, r0, #10, #10
 801dd62:	a902      	add	r1, sp, #8
 801dd64:	4620      	mov	r0, r4
 801dd66:	f7ff ffa3 	bl	801dcb0 <lfs_dir_getinfo>
}
 801dd6a:	b00b      	add	sp, #44	@ 0x2c
 801dd6c:	bd30      	pop	{r4, r5, pc}
	...

0801dd70 <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801dd70:	b570      	push	{r4, r5, r6, lr}
 801dd72:	4605      	mov	r5, r0
 801dd74:	460c      	mov	r4, r1
 801dd76:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 801dd78:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801dd7c:	2100      	movs	r1, #0
 801dd7e:	4630      	mov	r0, r6
 801dd80:	f00b feae 	bl	8029ae0 <memset>
    if (dir->pos == 0) {
 801dd84:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801dd86:	b183      	cbz	r3, 801ddaa <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 801dd88:	2b01      	cmp	r3, #1
 801dd8a:	d11f      	bne.n	801ddcc <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 801dd8c:	4633      	mov	r3, r6
 801dd8e:	2202      	movs	r2, #2
 801dd90:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 801dd94:	4a22      	ldr	r2, [pc, #136]	@ (801de20 <lfs_dir_read_+0xb0>)
 801dd96:	8811      	ldrh	r1, [r2, #0]
 801dd98:	7892      	ldrb	r2, [r2, #2]
 801dd9a:	8131      	strh	r1, [r6, #8]
 801dd9c:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801dd9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801dda0:	3301      	adds	r3, #1
 801dda2:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801dda4:	f04f 0c01 	mov.w	ip, #1
 801dda8:	e034      	b.n	801de14 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 801ddaa:	2302      	movs	r3, #2
 801ddac:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 801ddae:	4b1d      	ldr	r3, [pc, #116]	@ (801de24 <lfs_dir_read_+0xb4>)
 801ddb0:	881b      	ldrh	r3, [r3, #0]
 801ddb2:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 801ddb4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ddb6:	3301      	adds	r3, #1
 801ddb8:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801ddba:	f04f 0c01 	mov.w	ip, #1
 801ddbe:	e029      	b.n	801de14 <lfs_dir_read_+0xa4>
        dir->id += 1;
 801ddc0:	88a1      	ldrh	r1, [r4, #4]
 801ddc2:	3101      	adds	r1, #1
 801ddc4:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 801ddc6:	f11c 0f02 	cmn.w	ip, #2
 801ddca:	d11e      	bne.n	801de0a <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 801ddcc:	88a3      	ldrh	r3, [r4, #4]
 801ddce:	8ba1      	ldrh	r1, [r4, #28]
 801ddd0:	428b      	cmp	r3, r1
 801ddd2:	d10c      	bne.n	801ddee <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 801ddd4:	7fe3      	ldrb	r3, [r4, #31]
 801ddd6:	b1fb      	cbz	r3, 801de18 <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801ddd8:	f104 0220 	add.w	r2, r4, #32
 801dddc:	f104 0108 	add.w	r1, r4, #8
 801dde0:	4628      	mov	r0, r5
 801dde2:	f7fc ff63 	bl	801acac <lfs_dir_fetch>
            if (err) {
 801dde6:	4684      	mov	ip, r0
 801dde8:	b9a0      	cbnz	r0, 801de14 <lfs_dir_read_+0xa4>
            dir->id = 0;
 801ddea:	2300      	movs	r3, #0
 801ddec:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801ddee:	4633      	mov	r3, r6
 801ddf0:	88a2      	ldrh	r2, [r4, #4]
 801ddf2:	f104 0108 	add.w	r1, r4, #8
 801ddf6:	4628      	mov	r0, r5
 801ddf8:	f7ff ff5a 	bl	801dcb0 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 801ddfc:	4684      	mov	ip, r0
 801ddfe:	2800      	cmp	r0, #0
 801de00:	d0de      	beq.n	801ddc0 <lfs_dir_read_+0x50>
 801de02:	f110 0f02 	cmn.w	r0, #2
 801de06:	d0db      	beq.n	801ddc0 <lfs_dir_read_+0x50>
 801de08:	e004      	b.n	801de14 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 801de0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801de0c:	3301      	adds	r3, #1
 801de0e:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 801de10:	f04f 0c01 	mov.w	ip, #1
}
 801de14:	4660      	mov	r0, ip
 801de16:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 801de18:	f04f 0c00 	mov.w	ip, #0
 801de1c:	e7fa      	b.n	801de14 <lfs_dir_read_+0xa4>
 801de1e:	bf00      	nop
 801de20:	080361d8 	.word	0x080361d8
 801de24:	0803313c 	.word	0x0803313c

0801de28 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 801de28:	b570      	push	{r4, r5, r6, lr}
 801de2a:	4605      	mov	r5, r0
 801de2c:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801de2e:	694b      	ldr	r3, [r1, #20]
 801de30:	4608      	mov	r0, r1
 801de32:	4798      	blx	r3
    if (err) {
 801de34:	4606      	mov	r6, r0
 801de36:	b108      	cbz	r0, 801de3c <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801de38:	4630      	mov	r0, r6
 801de3a:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 801de3c:	4621      	mov	r1, r4
 801de3e:	4628      	mov	r0, r5
 801de40:	f7ff f860 	bl	801cf04 <lfs_format_>
 801de44:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801de46:	69a3      	ldr	r3, [r4, #24]
 801de48:	4620      	mov	r0, r4
 801de4a:	4798      	blx	r3
    return err;
 801de4c:	e7f4      	b.n	801de38 <lfs_format+0x10>

0801de4e <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 801de4e:	b570      	push	{r4, r5, r6, lr}
 801de50:	4605      	mov	r5, r0
 801de52:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801de54:	694b      	ldr	r3, [r1, #20]
 801de56:	4608      	mov	r0, r1
 801de58:	4798      	blx	r3
    if (err) {
 801de5a:	4606      	mov	r6, r0
 801de5c:	b108      	cbz	r0, 801de62 <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801de5e:	4630      	mov	r0, r6
 801de60:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 801de62:	4621      	mov	r1, r4
 801de64:	4628      	mov	r0, r5
 801de66:	f7ff f8cb 	bl	801d000 <lfs_mount_>
 801de6a:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801de6c:	69a3      	ldr	r3, [r4, #24]
 801de6e:	4620      	mov	r0, r4
 801de70:	4798      	blx	r3
    return err;
 801de72:	e7f4      	b.n	801de5e <lfs_mount+0x10>

0801de74 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 801de74:	b570      	push	{r4, r5, r6, lr}
 801de76:	4604      	mov	r4, r0
 801de78:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801de7a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801de7c:	6943      	ldr	r3, [r0, #20]
 801de7e:	4798      	blx	r3
    if (err) {
 801de80:	4606      	mov	r6, r0
 801de82:	b108      	cbz	r0, 801de88 <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801de84:	4630      	mov	r0, r6
 801de86:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 801de88:	4629      	mov	r1, r5
 801de8a:	4620      	mov	r0, r4
 801de8c:	f7ff fb0e 	bl	801d4ac <lfs_remove_>
 801de90:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801de92:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801de94:	6983      	ldr	r3, [r0, #24]
 801de96:	4798      	blx	r3
    return err;
 801de98:	e7f4      	b.n	801de84 <lfs_remove+0x10>

0801de9a <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801de9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de9c:	4604      	mov	r4, r0
 801de9e:	460d      	mov	r5, r1
 801dea0:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801dea2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801dea4:	6943      	ldr	r3, [r0, #20]
 801dea6:	4798      	blx	r3
    if (err) {
 801dea8:	4607      	mov	r7, r0
 801deaa:	b108      	cbz	r0, 801deb0 <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801deac:	4638      	mov	r0, r7
 801deae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 801deb0:	4632      	mov	r2, r6
 801deb2:	4629      	mov	r1, r5
 801deb4:	4620      	mov	r0, r4
 801deb6:	f7ff fbb9 	bl	801d62c <lfs_rename_>
 801deba:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801debc:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801debe:	6983      	ldr	r3, [r0, #24]
 801dec0:	4798      	blx	r3
    return err;
 801dec2:	e7f3      	b.n	801deac <lfs_rename+0x12>

0801dec4 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801dec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dec6:	4604      	mov	r4, r0
 801dec8:	460d      	mov	r5, r1
 801deca:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801decc:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801dece:	6943      	ldr	r3, [r0, #20]
 801ded0:	4798      	blx	r3
    if (err) {
 801ded2:	4607      	mov	r7, r0
 801ded4:	b108      	cbz	r0, 801deda <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801ded6:	4638      	mov	r0, r7
 801ded8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 801deda:	4632      	mov	r2, r6
 801dedc:	4629      	mov	r1, r5
 801dede:	4620      	mov	r0, r4
 801dee0:	f7ff ff30 	bl	801dd44 <lfs_stat_>
 801dee4:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801dee6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801dee8:	6983      	ldr	r3, [r0, #24]
 801deea:	4798      	blx	r3
    return err;
 801deec:	e7f3      	b.n	801ded6 <lfs_stat+0x12>
	...

0801def0 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801def0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801def4:	4604      	mov	r4, r0
 801def6:	460d      	mov	r5, r1
 801def8:	4616      	mov	r6, r2
 801defa:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801defc:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801defe:	6942      	ldr	r2, [r0, #20]
 801df00:	4790      	blx	r2
    if (err) {
 801df02:	4607      	mov	r7, r0
 801df04:	b110      	cbz	r0, 801df0c <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801df06:	4638      	mov	r0, r7
 801df08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801df0c:	4629      	mov	r1, r5
 801df0e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801df10:	f7fb fbc7 	bl	80196a2 <lfs_mlist_isopen>
 801df14:	b950      	cbnz	r0, 801df2c <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 801df16:	4643      	mov	r3, r8
 801df18:	4632      	mov	r2, r6
 801df1a:	4629      	mov	r1, r5
 801df1c:	4620      	mov	r0, r4
 801df1e:	f7ff fe09 	bl	801db34 <lfs_file_open_>
 801df22:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801df24:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801df26:	6983      	ldr	r3, [r0, #24]
 801df28:	4798      	blx	r3
    return err;
 801df2a:	e7ec      	b.n	801df06 <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801df2c:	4b03      	ldr	r3, [pc, #12]	@ (801df3c <lfs_file_open+0x4c>)
 801df2e:	4a04      	ldr	r2, [pc, #16]	@ (801df40 <lfs_file_open+0x50>)
 801df30:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801df34:	4803      	ldr	r0, [pc, #12]	@ (801df44 <lfs_file_open+0x54>)
 801df36:	f009 f881 	bl	802703c <__assert_func>
 801df3a:	bf00      	nop
 801df3c:	080361dc 	.word	0x080361dc
 801df40:	08036310 	.word	0x08036310
 801df44:	08035660 	.word	0x08035660

0801df48 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801df48:	b570      	push	{r4, r5, r6, lr}
 801df4a:	4604      	mov	r4, r0
 801df4c:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801df4e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801df50:	6943      	ldr	r3, [r0, #20]
 801df52:	4798      	blx	r3
    if (err) {
 801df54:	4606      	mov	r6, r0
 801df56:	b108      	cbz	r0, 801df5c <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801df58:	4630      	mov	r0, r6
 801df5a:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801df5c:	4629      	mov	r1, r5
 801df5e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801df60:	f7fb fb9f 	bl	80196a2 <lfs_mlist_isopen>
 801df64:	b140      	cbz	r0, 801df78 <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 801df66:	4629      	mov	r1, r5
 801df68:	4620      	mov	r0, r4
 801df6a:	f7ff f9cf 	bl	801d30c <lfs_file_close_>
 801df6e:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801df70:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801df72:	6983      	ldr	r3, [r0, #24]
 801df74:	4798      	blx	r3
    return err;
 801df76:	e7ef      	b.n	801df58 <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801df78:	4b03      	ldr	r3, [pc, #12]	@ (801df88 <lfs_file_close+0x40>)
 801df7a:	4a04      	ldr	r2, [pc, #16]	@ (801df8c <lfs_file_close+0x44>)
 801df7c:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 801df80:	4803      	ldr	r0, [pc, #12]	@ (801df90 <lfs_file_close+0x48>)
 801df82:	f009 f85b 	bl	802703c <__assert_func>
 801df86:	bf00      	nop
 801df88:	08036214 	.word	0x08036214
 801df8c:	080362f4 	.word	0x080362f4
 801df90:	08035660 	.word	0x08035660

0801df94 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801df94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df98:	4604      	mov	r4, r0
 801df9a:	460d      	mov	r5, r1
 801df9c:	4616      	mov	r6, r2
 801df9e:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801dfa0:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801dfa2:	6942      	ldr	r2, [r0, #20]
 801dfa4:	4790      	blx	r2
    if (err) {
 801dfa6:	4607      	mov	r7, r0
 801dfa8:	b110      	cbz	r0, 801dfb0 <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801dfaa:	4638      	mov	r0, r7
 801dfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801dfb0:	4629      	mov	r1, r5
 801dfb2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801dfb4:	f7fb fb75 	bl	80196a2 <lfs_mlist_isopen>
 801dfb8:	b150      	cbz	r0, 801dfd0 <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801dfba:	4643      	mov	r3, r8
 801dfbc:	4632      	mov	r2, r6
 801dfbe:	4629      	mov	r1, r5
 801dfc0:	4620      	mov	r0, r4
 801dfc2:	f7fd fac1 	bl	801b548 <lfs_file_read_>
 801dfc6:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801dfc8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801dfca:	6983      	ldr	r3, [r0, #24]
 801dfcc:	4798      	blx	r3
    return res;
 801dfce:	e7ec      	b.n	801dfaa <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801dfd0:	4b03      	ldr	r3, [pc, #12]	@ (801dfe0 <lfs_file_read+0x4c>)
 801dfd2:	4a04      	ldr	r2, [pc, #16]	@ (801dfe4 <lfs_file_read+0x50>)
 801dfd4:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801dfd8:	4803      	ldr	r0, [pc, #12]	@ (801dfe8 <lfs_file_read+0x54>)
 801dfda:	f009 f82f 	bl	802703c <__assert_func>
 801dfde:	bf00      	nop
 801dfe0:	08036214 	.word	0x08036214
 801dfe4:	080362e4 	.word	0x080362e4
 801dfe8:	08035660 	.word	0x08035660

0801dfec <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801dfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dff0:	4604      	mov	r4, r0
 801dff2:	460d      	mov	r5, r1
 801dff4:	4616      	mov	r6, r2
 801dff6:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801dff8:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801dffa:	6942      	ldr	r2, [r0, #20]
 801dffc:	4790      	blx	r2
    if (err) {
 801dffe:	4607      	mov	r7, r0
 801e000:	b110      	cbz	r0, 801e008 <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801e002:	4638      	mov	r0, r7
 801e004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e008:	4629      	mov	r1, r5
 801e00a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e00c:	f7fb fb49 	bl	80196a2 <lfs_mlist_isopen>
 801e010:	b150      	cbz	r0, 801e028 <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 801e012:	4643      	mov	r3, r8
 801e014:	4632      	mov	r2, r6
 801e016:	4629      	mov	r1, r5
 801e018:	4620      	mov	r0, r4
 801e01a:	f7fd fb05 	bl	801b628 <lfs_file_write_>
 801e01e:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801e020:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e022:	6983      	ldr	r3, [r0, #24]
 801e024:	4798      	blx	r3
    return res;
 801e026:	e7ec      	b.n	801e002 <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e028:	4b03      	ldr	r3, [pc, #12]	@ (801e038 <lfs_file_write+0x4c>)
 801e02a:	4a04      	ldr	r2, [pc, #16]	@ (801e03c <lfs_file_write+0x50>)
 801e02c:	f641 0105 	movw	r1, #6149	@ 0x1805
 801e030:	4803      	ldr	r0, [pc, #12]	@ (801e040 <lfs_file_write+0x54>)
 801e032:	f009 f803 	bl	802703c <__assert_func>
 801e036:	bf00      	nop
 801e038:	08036214 	.word	0x08036214
 801e03c:	080362c4 	.word	0x080362c4
 801e040:	08035660 	.word	0x08035660

0801e044 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801e044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e048:	4604      	mov	r4, r0
 801e04a:	460d      	mov	r5, r1
 801e04c:	4616      	mov	r6, r2
 801e04e:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801e050:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e052:	6942      	ldr	r2, [r0, #20]
 801e054:	4790      	blx	r2
    if (err) {
 801e056:	4607      	mov	r7, r0
 801e058:	b110      	cbz	r0, 801e060 <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801e05a:	4638      	mov	r0, r7
 801e05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e060:	4629      	mov	r1, r5
 801e062:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e064:	f7fb fb1d 	bl	80196a2 <lfs_mlist_isopen>
 801e068:	b150      	cbz	r0, 801e080 <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 801e06a:	4643      	mov	r3, r8
 801e06c:	4632      	mov	r2, r6
 801e06e:	4629      	mov	r1, r5
 801e070:	4620      	mov	r0, r4
 801e072:	f7fd fa8d 	bl	801b590 <lfs_file_seek_>
 801e076:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801e078:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e07a:	6983      	ldr	r3, [r0, #24]
 801e07c:	4798      	blx	r3
    return res;
 801e07e:	e7ec      	b.n	801e05a <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e080:	4b03      	ldr	r3, [pc, #12]	@ (801e090 <lfs_file_seek+0x4c>)
 801e082:	4a04      	ldr	r2, [pc, #16]	@ (801e094 <lfs_file_seek+0x50>)
 801e084:	f641 0117 	movw	r1, #6167	@ 0x1817
 801e088:	4803      	ldr	r0, [pc, #12]	@ (801e098 <lfs_file_seek+0x54>)
 801e08a:	f008 ffd7 	bl	802703c <__assert_func>
 801e08e:	bf00      	nop
 801e090:	08036214 	.word	0x08036214
 801e094:	080362a4 	.word	0x080362a4
 801e098:	08035660 	.word	0x08035660

0801e09c <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 801e09c:	b570      	push	{r4, r5, r6, lr}
 801e09e:	4604      	mov	r4, r0
 801e0a0:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801e0a2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e0a4:	6943      	ldr	r3, [r0, #20]
 801e0a6:	4798      	blx	r3
    if (err) {
 801e0a8:	4606      	mov	r6, r0
 801e0aa:	b108      	cbz	r0, 801e0b0 <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801e0ac:	4630      	mov	r0, r6
 801e0ae:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e0b0:	4629      	mov	r1, r5
 801e0b2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e0b4:	f7fb faf5 	bl	80196a2 <lfs_mlist_isopen>
 801e0b8:	b140      	cbz	r0, 801e0cc <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 801e0ba:	4629      	mov	r1, r5
 801e0bc:	4620      	mov	r0, r4
 801e0be:	f7fb fba4 	bl	801980a <lfs_file_tell_>
 801e0c2:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801e0c4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e0c6:	6983      	ldr	r3, [r0, #24]
 801e0c8:	4798      	blx	r3
    return res;
 801e0ca:	e7ef      	b.n	801e0ac <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801e0cc:	4b03      	ldr	r3, [pc, #12]	@ (801e0dc <lfs_file_tell+0x40>)
 801e0ce:	4a04      	ldr	r2, [pc, #16]	@ (801e0e0 <lfs_file_tell+0x44>)
 801e0d0:	f641 0138 	movw	r1, #6200	@ 0x1838
 801e0d4:	4803      	ldr	r0, [pc, #12]	@ (801e0e4 <lfs_file_tell+0x48>)
 801e0d6:	f008 ffb1 	bl	802703c <__assert_func>
 801e0da:	bf00      	nop
 801e0dc:	08036214 	.word	0x08036214
 801e0e0:	08036294 	.word	0x08036294
 801e0e4:	08035660 	.word	0x08035660

0801e0e8 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801e0e8:	b570      	push	{r4, r5, r6, lr}
 801e0ea:	4604      	mov	r4, r0
 801e0ec:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801e0ee:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e0f0:	6943      	ldr	r3, [r0, #20]
 801e0f2:	4798      	blx	r3
    if (err) {
 801e0f4:	4606      	mov	r6, r0
 801e0f6:	b108      	cbz	r0, 801e0fc <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e0f8:	4630      	mov	r0, r6
 801e0fa:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 801e0fc:	4629      	mov	r1, r5
 801e0fe:	4620      	mov	r0, r4
 801e100:	f7ff fd22 	bl	801db48 <lfs_mkdir_>
 801e104:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801e106:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e108:	6983      	ldr	r3, [r0, #24]
 801e10a:	4798      	blx	r3
    return err;
 801e10c:	e7f4      	b.n	801e0f8 <lfs_mkdir+0x10>
	...

0801e110 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801e110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e112:	4604      	mov	r4, r0
 801e114:	460f      	mov	r7, r1
 801e116:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 801e118:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e11a:	6943      	ldr	r3, [r0, #20]
 801e11c:	4798      	blx	r3
    if (err) {
 801e11e:	4606      	mov	r6, r0
 801e120:	b108      	cbz	r0, 801e126 <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e122:	4630      	mov	r0, r6
 801e124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801e126:	4639      	mov	r1, r7
 801e128:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801e12a:	f7fb faba 	bl	80196a2 <lfs_mlist_isopen>
 801e12e:	b948      	cbnz	r0, 801e144 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 801e130:	462a      	mov	r2, r5
 801e132:	4639      	mov	r1, r7
 801e134:	4620      	mov	r0, r4
 801e136:	f7ff fa31 	bl	801d59c <lfs_dir_open_>
 801e13a:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801e13c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e13e:	6983      	ldr	r3, [r0, #24]
 801e140:	4798      	blx	r3
    return err;
 801e142:	e7ee      	b.n	801e122 <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801e144:	4b03      	ldr	r3, [pc, #12]	@ (801e154 <lfs_dir_open+0x44>)
 801e146:	4a04      	ldr	r2, [pc, #16]	@ (801e158 <lfs_dir_open+0x48>)
 801e148:	f641 0174 	movw	r1, #6260	@ 0x1874
 801e14c:	4803      	ldr	r0, [pc, #12]	@ (801e15c <lfs_dir_open+0x4c>)
 801e14e:	f008 ff75 	bl	802703c <__assert_func>
 801e152:	bf00      	nop
 801e154:	0803624c 	.word	0x0803624c
 801e158:	08036284 	.word	0x08036284
 801e15c:	08035660 	.word	0x08035660

0801e160 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 801e160:	b570      	push	{r4, r5, r6, lr}
 801e162:	4604      	mov	r4, r0
 801e164:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801e166:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e168:	6943      	ldr	r3, [r0, #20]
 801e16a:	4798      	blx	r3
    if (err) {
 801e16c:	4606      	mov	r6, r0
 801e16e:	b108      	cbz	r0, 801e174 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e170:	4630      	mov	r0, r6
 801e172:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 801e174:	4629      	mov	r1, r5
 801e176:	4620      	mov	r0, r4
 801e178:	f7fb fb42 	bl	8019800 <lfs_dir_close_>
 801e17c:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801e17e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e180:	6983      	ldr	r3, [r0, #24]
 801e182:	4798      	blx	r3
    return err;
 801e184:	e7f4      	b.n	801e170 <lfs_dir_close+0x10>

0801e186 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801e186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e188:	4604      	mov	r4, r0
 801e18a:	460d      	mov	r5, r1
 801e18c:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801e18e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801e190:	6943      	ldr	r3, [r0, #20]
 801e192:	4798      	blx	r3
    if (err) {
 801e194:	4607      	mov	r7, r0
 801e196:	b108      	cbz	r0, 801e19c <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801e198:	4638      	mov	r0, r7
 801e19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 801e19c:	4632      	mov	r2, r6
 801e19e:	4629      	mov	r1, r5
 801e1a0:	4620      	mov	r0, r4
 801e1a2:	f7ff fde5 	bl	801dd70 <lfs_dir_read_>
 801e1a6:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801e1a8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801e1aa:	6983      	ldr	r3, [r0, #24]
 801e1ac:	4798      	blx	r3
    return err;
 801e1ae:	e7f3      	b.n	801e198 <lfs_dir_read+0x12>

0801e1b0 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 801e1b0:	f04f 0c00 	mov.w	ip, #0
 801e1b4:	4594      	cmp	ip, r2
 801e1b6:	d218      	bcs.n	801e1ea <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 801e1b8:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 801e1ba:	f811 300c 	ldrb.w	r3, [r1, ip]
 801e1be:	ea83 0e00 	eor.w	lr, r3, r0
 801e1c2:	f00e 0e0f 	and.w	lr, lr, #15
 801e1c6:	4c09      	ldr	r4, [pc, #36]	@ (801e1ec <lfs_crc+0x3c>)
 801e1c8:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 801e1cc:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 801e1d0:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 801e1d4:	f003 030f 	and.w	r3, r3, #15
 801e1d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801e1dc:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 801e1e0:	f10c 0c01 	add.w	ip, ip, #1
 801e1e4:	4594      	cmp	ip, r2
 801e1e6:	d3e8      	bcc.n	801e1ba <lfs_crc+0xa>
    }

    return crc;
}
 801e1e8:	bd30      	pop	{r4, r5, pc}
 801e1ea:	4770      	bx	lr
 801e1ec:	080363f8 	.word	0x080363f8

0801e1f0 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 801e1f0:	3830      	subs	r0, #48	@ 0x30
}
 801e1f2:	2809      	cmp	r0, #9
 801e1f4:	bf8c      	ite	hi
 801e1f6:	2000      	movhi	r0, #0
 801e1f8:	2001      	movls	r0, #1
 801e1fa:	4770      	bx	lr

0801e1fc <addexp>:

static int addexp(char *buf, int e, int sign) {
 801e1fc:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 801e1fe:	2365      	movs	r3, #101	@ 0x65
 801e200:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 801e202:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 801e204:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 801e208:	dc2c      	bgt.n	801e264 <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 801e20a:	2909      	cmp	r1, #9
 801e20c:	dc03      	bgt.n	801e216 <addexp+0x1a>
 801e20e:	2330      	movs	r3, #48	@ 0x30
 801e210:	7083      	strb	r3, [r0, #2]
 801e212:	2303      	movs	r3, #3
 801e214:	e000      	b.n	801e218 <addexp+0x1c>
  buf[n++] = (char) sign;
 801e216:	2302      	movs	r3, #2
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 801e218:	2963      	cmp	r1, #99	@ 0x63
 801e21a:	dd0d      	ble.n	801e238 <addexp+0x3c>
 801e21c:	4812      	ldr	r0, [pc, #72]	@ (801e268 <addexp+0x6c>)
 801e21e:	fb80 2001 	smull	r2, r0, r0, r1
 801e222:	17ca      	asrs	r2, r1, #31
 801e224:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 801e228:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801e22c:	f80c 0003 	strb.w	r0, [ip, r3]
 801e230:	2064      	movs	r0, #100	@ 0x64
 801e232:	fb00 1112 	mls	r1, r0, r2, r1
 801e236:	3301      	adds	r3, #1
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 801e238:	2909      	cmp	r1, #9
 801e23a:	dd0e      	ble.n	801e25a <addexp+0x5e>
 801e23c:	480b      	ldr	r0, [pc, #44]	@ (801e26c <addexp+0x70>)
 801e23e:	fb80 2001 	smull	r2, r0, r0, r1
 801e242:	17ca      	asrs	r2, r1, #31
 801e244:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 801e248:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801e24c:	f80c 0003 	strb.w	r0, [ip, r3]
 801e250:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e254:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 801e258:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 801e25a:	1c58      	adds	r0, r3, #1
 801e25c:	3130      	adds	r1, #48	@ 0x30
 801e25e:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 801e262:	4770      	bx	lr
  if (e > 400) return 0;
 801e264:	2000      	movs	r0, #0
}
 801e266:	4770      	bx	lr
 801e268:	51eb851f 	.word	0x51eb851f
 801e26c:	66666667 	.word	0x66666667

0801e270 <xisinf>:

static int xisinf(double x) {
 801e270:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 801e274:	4611      	mov	r1, r2
 801e276:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e27a:	4a05      	ldr	r2, [pc, #20]	@ (801e290 <xisinf+0x20>)
 801e27c:	4293      	cmp	r3, r2
 801e27e:	d001      	beq.n	801e284 <xisinf+0x14>
 801e280:	2000      	movs	r0, #0
 801e282:	4770      	bx	lr
 801e284:	b109      	cbz	r1, 801e28a <xisinf+0x1a>
 801e286:	2000      	movs	r0, #0
 801e288:	4770      	bx	lr
 801e28a:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 801e28c:	4770      	bx	lr
 801e28e:	bf00      	nop
 801e290:	7ff00000 	.word	0x7ff00000

0801e294 <xisnan>:

static int xisnan(double x) {
 801e294:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 801e298:	4602      	mov	r2, r0
 801e29a:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 801e29e:	2a00      	cmp	r2, #0
 801e2a0:	bf18      	it	ne
 801e2a2:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 801e2a4:	4b02      	ldr	r3, [pc, #8]	@ (801e2b0 <xisnan+0x1c>)
 801e2a6:	4298      	cmp	r0, r3
 801e2a8:	bf94      	ite	ls
 801e2aa:	2000      	movls	r0, #0
 801e2ac:	2001      	movhi	r0, #1
 801e2ae:	4770      	bx	lr
 801e2b0:	7ff00000 	.word	0x7ff00000

0801e2b4 <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 801e2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2b8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801e2bc:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 801e2c0:	4694      	mov	ip, r2
 801e2c2:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801e2c4:	b15c      	cbz	r4, 801e2de <mg_lld+0x2a>
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	db01      	blt.n	801e2ce <mg_lld+0x1a>
  size_t s = 0, n, i;
 801e2ca:	2500      	movs	r5, #0
 801e2cc:	e008      	b.n	801e2e0 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801e2ce:	242d      	movs	r4, #45	@ 0x2d
 801e2d0:	7004      	strb	r4, [r0, #0]
 801e2d2:	f1d2 0c00 	rsbs	ip, r2, #0
 801e2d6:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 801e2da:	2501      	movs	r5, #1
 801e2dc:	e000      	b.n	801e2e0 <mg_lld+0x2c>
  size_t s = 0, n, i;
 801e2de:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 801e2e0:	b909      	cbnz	r1, 801e2e6 <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801e2e2:	2400      	movs	r4, #0
 801e2e4:	e02f      	b.n	801e346 <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 801e2e6:	2400      	movs	r4, #0
 801e2e8:	ea5c 010e 	orrs.w	r1, ip, lr
 801e2ec:	d05a      	beq.n	801e3a4 <mg_lld+0xf0>
 801e2ee:	f00c 060f 	and.w	r6, ip, #15
 801e2f2:	1929      	adds	r1, r5, r4
 801e2f4:	4f38      	ldr	r7, [pc, #224]	@ (801e3d8 <mg_lld+0x124>)
 801e2f6:	5dbe      	ldrb	r6, [r7, r6]
 801e2f8:	5446      	strb	r6, [r0, r1]
 801e2fa:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 801e2fe:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 801e302:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801e306:	3401      	adds	r4, #1
 801e308:	e7ee      	b.n	801e2e8 <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801e30a:	2601      	movs	r6, #1
 801e30c:	e022      	b.n	801e354 <mg_lld+0xa0>
 801e30e:	4421      	add	r1, r4
 801e310:	4f32      	ldr	r7, [pc, #200]	@ (801e3dc <mg_lld+0x128>)
 801e312:	fba7 4801 	umull	r4, r8, r7, r1
 801e316:	f028 0403 	bic.w	r4, r8, #3
 801e31a:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 801e31e:	1b09      	subs	r1, r1, r4
 801e320:	ebbc 0101 	subs.w	r1, ip, r1
 801e324:	f16e 0e00 	sbc.w	lr, lr, #0
 801e328:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 801e32c:	fb01 f404 	mul.w	r4, r1, r4
 801e330:	fb07 440e 	mla	r4, r7, lr, r4
 801e334:	fba1 1707 	umull	r1, r7, r1, r7
 801e338:	443c      	add	r4, r7
 801e33a:	0849      	lsrs	r1, r1, #1
 801e33c:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 801e340:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 801e344:	4634      	mov	r4, r6
 801e346:	ea5c 010e 	orrs.w	r1, ip, lr
 801e34a:	d02b      	beq.n	801e3a4 <mg_lld+0xf0>
 801e34c:	2600      	movs	r6, #0
 801e34e:	eb1c 010e 	adds.w	r1, ip, lr
 801e352:	d2da      	bcs.n	801e30a <mg_lld+0x56>
 801e354:	4431      	add	r1, r6
 801e356:	4f21      	ldr	r7, [pc, #132]	@ (801e3dc <mg_lld+0x128>)
 801e358:	fba7 6801 	umull	r6, r8, r7, r1
 801e35c:	f028 0603 	bic.w	r6, r8, #3
 801e360:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 801e364:	1b89      	subs	r1, r1, r6
 801e366:	ebbc 0101 	subs.w	r1, ip, r1
 801e36a:	f16e 0800 	sbc.w	r8, lr, #0
 801e36e:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 801e372:	fb01 f606 	mul.w	r6, r1, r6
 801e376:	fb07 6608 	mla	r6, r7, r8, r6
 801e37a:	fba1 1707 	umull	r1, r7, r1, r7
 801e37e:	443e      	add	r6, r7
 801e380:	0849      	lsrs	r1, r1, #1
 801e382:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 801e386:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801e38a:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 801e38e:	1c66      	adds	r6, r4, #1
 801e390:	442c      	add	r4, r5
 801e392:	4f11      	ldr	r7, [pc, #68]	@ (801e3d8 <mg_lld+0x124>)
 801e394:	5c79      	ldrb	r1, [r7, r1]
 801e396:	5501      	strb	r1, [r0, r4]
 801e398:	2400      	movs	r4, #0
 801e39a:	eb1c 010e 	adds.w	r1, ip, lr
 801e39e:	d3b6      	bcc.n	801e30e <mg_lld+0x5a>
 801e3a0:	2401      	movs	r4, #1
 801e3a2:	e7b4      	b.n	801e30e <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 801e3a4:	2600      	movs	r6, #0
 801e3a6:	e00c      	b.n	801e3c2 <mg_lld+0x10e>
    char t = buf[s + i];
 801e3a8:	19af      	adds	r7, r5, r6
 801e3aa:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 801e3ae:	1929      	adds	r1, r5, r4
 801e3b0:	1b89      	subs	r1, r1, r6
 801e3b2:	3901      	subs	r1, #1
 801e3b4:	f810 e001 	ldrb.w	lr, [r0, r1]
 801e3b8:	f800 e007 	strb.w	lr, [r0, r7]
 801e3bc:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 801e3c0:	3601      	adds	r6, #1
 801e3c2:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 801e3c6:	d3ef      	bcc.n	801e3a8 <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 801e3c8:	4313      	orrs	r3, r2
 801e3ca:	d102      	bne.n	801e3d2 <mg_lld+0x11e>
 801e3cc:	2330      	movs	r3, #48	@ 0x30
 801e3ce:	5503      	strb	r3, [r0, r4]
 801e3d0:	3401      	adds	r4, #1
  return n + s;
}
 801e3d2:	1928      	adds	r0, r5, r4
 801e3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3d8:	08036438 	.word	0x08036438
 801e3dc:	cccccccd 	.word	0xcccccccd

0801e3e0 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 801e3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3e4:	4680      	mov	r8, r0
 801e3e6:	460f      	mov	r7, r1
 801e3e8:	4616      	mov	r6, r2
 801e3ea:	461d      	mov	r5, r3
  size_t i = 0;
 801e3ec:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 801e3ee:	e002      	b.n	801e3f6 <scpy+0x16>
 801e3f0:	3401      	adds	r4, #1
 801e3f2:	4639      	mov	r1, r7
 801e3f4:	47c0      	blx	r8
 801e3f6:	42ac      	cmp	r4, r5
 801e3f8:	d202      	bcs.n	801e400 <scpy+0x20>
 801e3fa:	5d30      	ldrb	r0, [r6, r4]
 801e3fc:	2800      	cmp	r0, #0
 801e3fe:	d1f7      	bne.n	801e3f0 <scpy+0x10>
  return i;
}
 801e400:	4620      	mov	r0, r4
 801e402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e406 <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 801e406:	2000      	movs	r0, #0
 801e408:	4770      	bx	lr

0801e40a <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 801e40a:	4770      	bx	lr

0801e40c <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 801e40c:	2000      	movs	r0, #0
 801e40e:	4770      	bx	lr

0801e410 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 801e410:	4770      	bx	lr

0801e412 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801e412:	2000      	movs	r0, #0
 801e414:	4770      	bx	lr

0801e416 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801e416:	2000      	movs	r0, #0
 801e418:	4770      	bx	lr

0801e41a <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 801e41a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e41e:	4770      	bx	lr

0801e420 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 801e420:	2000      	movs	r0, #0
 801e422:	4770      	bx	lr

0801e424 <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 801e424:	2000      	movs	r0, #0
 801e426:	4770      	bx	lr

0801e428 <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 801e428:	2000      	movs	r0, #0
 801e42a:	4770      	bx	lr

0801e42c <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 801e42c:	b530      	push	{r4, r5, lr}
 801e42e:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 801e430:	4614      	mov	r4, r2
 801e432:	b94a      	cbnz	r2, 801e448 <mg_ncasecmp+0x1c>
  int diff = 0;
 801e434:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 801e436:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801e438:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 801e43c:	1a18      	subs	r0, r3, r0
 801e43e:	d1fa      	bne.n	801e436 <mg_ncasecmp+0xa>
 801e440:	2a00      	cmp	r2, #0
 801e442:	d0f8      	beq.n	801e436 <mg_ncasecmp+0xa>
 801e444:	3c01      	subs	r4, #1
 801e446:	d0f6      	beq.n	801e436 <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 801e448:	f89e 2000 	ldrb.w	r2, [lr]
 801e44c:	f10e 0e01 	add.w	lr, lr, #1
 801e450:	4613      	mov	r3, r2
 801e452:	f891 c000 	ldrb.w	ip, [r1]
 801e456:	3101      	adds	r1, #1
 801e458:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 801e45a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801e45e:	2d19      	cmp	r5, #25
 801e460:	d801      	bhi.n	801e466 <mg_ncasecmp+0x3a>
 801e462:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801e466:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 801e46a:	2d19      	cmp	r5, #25
 801e46c:	d8e6      	bhi.n	801e43c <mg_ncasecmp+0x10>
 801e46e:	e7e3      	b.n	801e438 <mg_ncasecmp+0xc>

0801e470 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801e470:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801e474:	2b09      	cmp	r3, #9
 801e476:	d908      	bls.n	801e48a <isx+0x1a>
 801e478:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801e47c:	2b05      	cmp	r3, #5
 801e47e:	d906      	bls.n	801e48e <isx+0x1e>
         (c >= 'A' && c <= 'F');
 801e480:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801e482:	2805      	cmp	r0, #5
 801e484:	d805      	bhi.n	801e492 <isx+0x22>
 801e486:	2001      	movs	r0, #1
 801e488:	4770      	bx	lr
 801e48a:	2001      	movs	r0, #1
 801e48c:	4770      	bx	lr
 801e48e:	2001      	movs	r0, #1
 801e490:	4770      	bx	lr
 801e492:	2000      	movs	r0, #0
}
 801e494:	4770      	bx	lr

0801e496 <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 801e496:	280a      	cmp	r0, #10
 801e498:	d007      	beq.n	801e4aa <isok+0x14>
 801e49a:	280d      	cmp	r0, #13
 801e49c:	d007      	beq.n	801e4ae <isok+0x18>
 801e49e:	2809      	cmp	r0, #9
 801e4a0:	d007      	beq.n	801e4b2 <isok+0x1c>
 801e4a2:	281f      	cmp	r0, #31
 801e4a4:	d907      	bls.n	801e4b6 <isok+0x20>
 801e4a6:	2001      	movs	r0, #1
 801e4a8:	4770      	bx	lr
 801e4aa:	2001      	movs	r0, #1
 801e4ac:	4770      	bx	lr
 801e4ae:	2001      	movs	r0, #1
 801e4b0:	4770      	bx	lr
 801e4b2:	2001      	movs	r0, #1
 801e4b4:	4770      	bx	lr
 801e4b6:	2000      	movs	r0, #0
}
 801e4b8:	4770      	bx	lr

0801e4ba <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 801e4ba:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 801e4be:	2880      	cmp	r0, #128	@ 0x80
 801e4c0:	bf14      	ite	ne
 801e4c2:	2000      	movne	r0, #0
 801e4c4:	2001      	moveq	r0, #1
 801e4c6:	4770      	bx	lr

0801e4c8 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 801e4c8:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 801e4ca:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 801e4cc:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801e4ce:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 801e4d2:	b2db      	uxtb	r3, r3
 801e4d4:	2b5c      	cmp	r3, #92	@ 0x5c
 801e4d6:	d936      	bls.n	801e546 <clen+0x7e>
 801e4d8:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801e4da:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 801e4de:	2bc0      	cmp	r3, #192	@ 0xc0
 801e4e0:	d009      	beq.n	801e4f6 <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801e4e2:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 801e4e6:	2be0      	cmp	r3, #224	@ 0xe0
 801e4e8:	d00e      	beq.n	801e508 <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801e4ea:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801e4ee:	2df0      	cmp	r5, #240	@ 0xf0
 801e4f0:	d018      	beq.n	801e524 <clen+0x5c>
    return 4;
  return 0;
 801e4f2:	2000      	movs	r0, #0
}
 801e4f4:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801e4f6:	2e01      	cmp	r6, #1
 801e4f8:	ddf3      	ble.n	801e4e2 <clen+0x1a>
 801e4fa:	7840      	ldrb	r0, [r0, #1]
 801e4fc:	f7ff ffdd 	bl	801e4ba <vcb>
 801e500:	2800      	cmp	r0, #0
 801e502:	d0ee      	beq.n	801e4e2 <clen+0x1a>
 801e504:	2002      	movs	r0, #2
 801e506:	e7f5      	b.n	801e4f4 <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801e508:	2e02      	cmp	r6, #2
 801e50a:	ddee      	ble.n	801e4ea <clen+0x22>
 801e50c:	7860      	ldrb	r0, [r4, #1]
 801e50e:	f7ff ffd4 	bl	801e4ba <vcb>
 801e512:	2800      	cmp	r0, #0
 801e514:	d0e9      	beq.n	801e4ea <clen+0x22>
 801e516:	78a0      	ldrb	r0, [r4, #2]
 801e518:	f7ff ffcf 	bl	801e4ba <vcb>
 801e51c:	2800      	cmp	r0, #0
 801e51e:	d0e4      	beq.n	801e4ea <clen+0x22>
 801e520:	2003      	movs	r0, #3
 801e522:	e7e7      	b.n	801e4f4 <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801e524:	2e03      	cmp	r6, #3
 801e526:	dd10      	ble.n	801e54a <clen+0x82>
 801e528:	7860      	ldrb	r0, [r4, #1]
 801e52a:	f7ff ffc6 	bl	801e4ba <vcb>
 801e52e:	b170      	cbz	r0, 801e54e <clen+0x86>
 801e530:	78a0      	ldrb	r0, [r4, #2]
 801e532:	f7ff ffc2 	bl	801e4ba <vcb>
 801e536:	b160      	cbz	r0, 801e552 <clen+0x8a>
 801e538:	78e0      	ldrb	r0, [r4, #3]
 801e53a:	f7ff ffbe 	bl	801e4ba <vcb>
 801e53e:	2800      	cmp	r0, #0
 801e540:	d0d8      	beq.n	801e4f4 <clen+0x2c>
    return 4;
 801e542:	2004      	movs	r0, #4
 801e544:	e7d6      	b.n	801e4f4 <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801e546:	2001      	movs	r0, #1
 801e548:	e7d4      	b.n	801e4f4 <clen+0x2c>
  return 0;
 801e54a:	2000      	movs	r0, #0
 801e54c:	e7d2      	b.n	801e4f4 <clen+0x2c>
 801e54e:	2000      	movs	r0, #0
 801e550:	e7d0      	b.n	801e4f4 <clen+0x2c>
 801e552:	2000      	movs	r0, #0
 801e554:	e7ce      	b.n	801e4f4 <clen+0x2c>

0801e556 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 801e556:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 801e558:	e003      	b.n	801e562 <skiptorn+0xc>
 801e55a:	3001      	adds	r0, #1
 801e55c:	6853      	ldr	r3, [r2, #4]
 801e55e:	3301      	adds	r3, #1
 801e560:	6053      	str	r3, [r2, #4]
 801e562:	4288      	cmp	r0, r1
 801e564:	d204      	bcs.n	801e570 <skiptorn+0x1a>
 801e566:	7803      	ldrb	r3, [r0, #0]
 801e568:	2b0a      	cmp	r3, #10
 801e56a:	d001      	beq.n	801e570 <skiptorn+0x1a>
 801e56c:	2b0d      	cmp	r3, #13
 801e56e:	d1f4      	bne.n	801e55a <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801e570:	4288      	cmp	r0, r1
 801e572:	d212      	bcs.n	801e59a <skiptorn+0x44>
 801e574:	7803      	ldrb	r3, [r0, #0]
 801e576:	2b0d      	cmp	r3, #13
 801e578:	d008      	beq.n	801e58c <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801e57a:	2b0d      	cmp	r3, #13
 801e57c:	d00b      	beq.n	801e596 <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801e57e:	4288      	cmp	r0, r1
 801e580:	d20d      	bcs.n	801e59e <skiptorn+0x48>
 801e582:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e586:	2b0a      	cmp	r3, #10
 801e588:	d10b      	bne.n	801e5a2 <skiptorn+0x4c>
  return s;
}
 801e58a:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801e58c:	7842      	ldrb	r2, [r0, #1]
 801e58e:	2a0a      	cmp	r2, #10
 801e590:	d0f3      	beq.n	801e57a <skiptorn+0x24>
 801e592:	2000      	movs	r0, #0
 801e594:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801e596:	3001      	adds	r0, #1
 801e598:	e7f1      	b.n	801e57e <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801e59a:	2000      	movs	r0, #0
 801e59c:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801e59e:	2000      	movs	r0, #0
 801e5a0:	4770      	bx	lr
 801e5a2:	2000      	movs	r0, #0
 801e5a4:	e7f1      	b.n	801e58a <skiptorn+0x34>

0801e5a6 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 801e5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5aa:	b084      	sub	sp, #16
 801e5ac:	4604      	mov	r4, r0
 801e5ae:	460d      	mov	r5, r1
 801e5b0:	4690      	mov	r8, r2
 801e5b2:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 801e5b4:	2600      	movs	r6, #0
 801e5b6:	e04d      	b.n	801e654 <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801e5b8:	7863      	ldrb	r3, [r4, #1]
 801e5ba:	2b0a      	cmp	r3, #10
 801e5bc:	d158      	bne.n	801e670 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 801e5be:	2001      	movs	r0, #1
 801e5c0:	e01e      	b.n	801e600 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801e5c2:	4414      	add	r4, r2
 801e5c4:	9b01      	ldr	r3, [sp, #4]
 801e5c6:	4413      	add	r3, r2
 801e5c8:	9301      	str	r3, [sp, #4]
 801e5ca:	42ac      	cmp	r4, r5
 801e5cc:	d209      	bcs.n	801e5e2 <mg_http_parse_headers+0x3c>
 801e5ce:	7823      	ldrb	r3, [r4, #0]
 801e5d0:	2b3a      	cmp	r3, #58	@ 0x3a
 801e5d2:	d006      	beq.n	801e5e2 <mg_http_parse_headers+0x3c>
 801e5d4:	4629      	mov	r1, r5
 801e5d6:	4620      	mov	r0, r4
 801e5d8:	f7ff ff76 	bl	801e4c8 <clen>
 801e5dc:	4602      	mov	r2, r0
 801e5de:	2800      	cmp	r0, #0
 801e5e0:	d1ef      	bne.n	801e5c2 <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 801e5e2:	9b01      	ldr	r3, [sp, #4]
 801e5e4:	b15b      	cbz	r3, 801e5fe <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 801e5e6:	42ac      	cmp	r4, r5
 801e5e8:	d209      	bcs.n	801e5fe <mg_http_parse_headers+0x58>
 801e5ea:	4629      	mov	r1, r5
 801e5ec:	4620      	mov	r0, r4
 801e5ee:	f7ff ff6b 	bl	801e4c8 <clen>
 801e5f2:	b120      	cbz	r0, 801e5fe <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 801e5f4:	4620      	mov	r0, r4
 801e5f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e5fa:	2b3a      	cmp	r3, #58	@ 0x3a
 801e5fc:	d004      	beq.n	801e608 <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 801e5fe:	2000      	movs	r0, #0
}
 801e600:	b004      	add	sp, #16
 801e602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 801e606:	3001      	adds	r0, #1
 801e608:	42a8      	cmp	r0, r5
 801e60a:	d204      	bcs.n	801e616 <mg_http_parse_headers+0x70>
 801e60c:	7803      	ldrb	r3, [r0, #0]
 801e60e:	2b20      	cmp	r3, #32
 801e610:	d0f9      	beq.n	801e606 <mg_http_parse_headers+0x60>
 801e612:	2b09      	cmp	r3, #9
 801e614:	d0f7      	beq.n	801e606 <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 801e616:	aa02      	add	r2, sp, #8
 801e618:	4629      	mov	r1, r5
 801e61a:	f7ff ff9c 	bl	801e556 <skiptorn>
 801e61e:	4604      	mov	r4, r0
 801e620:	b908      	cbnz	r0, 801e626 <mg_http_parse_headers+0x80>
 801e622:	e7ec      	b.n	801e5fe <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 801e624:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 801e626:	9803      	ldr	r0, [sp, #12]
 801e628:	b130      	cbz	r0, 801e638 <mg_http_parse_headers+0x92>
 801e62a:	3801      	subs	r0, #1
 801e62c:	9b02      	ldr	r3, [sp, #8]
 801e62e:	5c1b      	ldrb	r3, [r3, r0]
 801e630:	2b20      	cmp	r3, #32
 801e632:	d0f7      	beq.n	801e624 <mg_http_parse_headers+0x7e>
 801e634:	2b09      	cmp	r3, #9
 801e636:	d0f5      	beq.n	801e624 <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 801e638:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 801e63c:	466a      	mov	r2, sp
 801e63e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e642:	e883 0003 	stmia.w	r3, {r0, r1}
 801e646:	3308      	adds	r3, #8
 801e648:	aa04      	add	r2, sp, #16
 801e64a:	e912 0003 	ldmdb	r2, {r0, r1}
 801e64e:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 801e652:	3601      	adds	r6, #1
 801e654:	42be      	cmp	r6, r7
 801e656:	d20d      	bcs.n	801e674 <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 801e658:	2300      	movs	r3, #0
 801e65a:	9300      	str	r3, [sp, #0]
 801e65c:	9301      	str	r3, [sp, #4]
 801e65e:	9302      	str	r3, [sp, #8]
 801e660:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 801e662:	42ac      	cmp	r4, r5
 801e664:	d2cb      	bcs.n	801e5fe <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801e666:	7823      	ldrb	r3, [r4, #0]
 801e668:	2b0a      	cmp	r3, #10
 801e66a:	d0a8      	beq.n	801e5be <mg_http_parse_headers+0x18>
 801e66c:	2b0d      	cmp	r3, #13
 801e66e:	d0a3      	beq.n	801e5b8 <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 801e670:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801e672:	e7aa      	b.n	801e5ca <mg_http_parse_headers+0x24>
  return true;
 801e674:	2001      	movs	r0, #1
 801e676:	e7c3      	b.n	801e600 <mg_http_parse_headers+0x5a>

0801e678 <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 801e678:	3864      	subs	r0, #100	@ 0x64
 801e67a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 801e67e:	4298      	cmp	r0, r3
 801e680:	f200 8272 	bhi.w	801eb68 <mg_http_status_code_str+0x4f0>
 801e684:	e8df f010 	tbh	[pc, r0, lsl #1]
 801e688:	027201f4 	.word	0x027201f4
 801e68c:	027001f6 	.word	0x027001f6
 801e690:	02700270 	.word	0x02700270
 801e694:	02700270 	.word	0x02700270
 801e698:	02700270 	.word	0x02700270
 801e69c:	02700270 	.word	0x02700270
 801e6a0:	02700270 	.word	0x02700270
 801e6a4:	02700270 	.word	0x02700270
 801e6a8:	02700270 	.word	0x02700270
 801e6ac:	02700270 	.word	0x02700270
 801e6b0:	02700270 	.word	0x02700270
 801e6b4:	02700270 	.word	0x02700270
 801e6b8:	02700270 	.word	0x02700270
 801e6bc:	02700270 	.word	0x02700270
 801e6c0:	02700270 	.word	0x02700270
 801e6c4:	02700270 	.word	0x02700270
 801e6c8:	02700270 	.word	0x02700270
 801e6cc:	02700270 	.word	0x02700270
 801e6d0:	02700270 	.word	0x02700270
 801e6d4:	02700270 	.word	0x02700270
 801e6d8:	02700270 	.word	0x02700270
 801e6dc:	02700270 	.word	0x02700270
 801e6e0:	02700270 	.word	0x02700270
 801e6e4:	02700270 	.word	0x02700270
 801e6e8:	02700270 	.word	0x02700270
 801e6ec:	02700270 	.word	0x02700270
 801e6f0:	02700270 	.word	0x02700270
 801e6f4:	02700270 	.word	0x02700270
 801e6f8:	02700270 	.word	0x02700270
 801e6fc:	02700270 	.word	0x02700270
 801e700:	02700270 	.word	0x02700270
 801e704:	02700270 	.word	0x02700270
 801e708:	02700270 	.word	0x02700270
 801e70c:	02700270 	.word	0x02700270
 801e710:	02700270 	.word	0x02700270
 801e714:	02700270 	.word	0x02700270
 801e718:	02700270 	.word	0x02700270
 801e71c:	02700270 	.word	0x02700270
 801e720:	02700270 	.word	0x02700270
 801e724:	02700270 	.word	0x02700270
 801e728:	02700270 	.word	0x02700270
 801e72c:	02700270 	.word	0x02700270
 801e730:	02700270 	.word	0x02700270
 801e734:	02700270 	.word	0x02700270
 801e738:	02700270 	.word	0x02700270
 801e73c:	02700270 	.word	0x02700270
 801e740:	02700270 	.word	0x02700270
 801e744:	02700270 	.word	0x02700270
 801e748:	02700270 	.word	0x02700270
 801e74c:	02700270 	.word	0x02700270
 801e750:	01fa01f8 	.word	0x01fa01f8
 801e754:	01fe01fc 	.word	0x01fe01fc
 801e758:	02020200 	.word	0x02020200
 801e75c:	02060204 	.word	0x02060204
 801e760:	02700208 	.word	0x02700208
 801e764:	02700270 	.word	0x02700270
 801e768:	02700270 	.word	0x02700270
 801e76c:	02700270 	.word	0x02700270
 801e770:	02700270 	.word	0x02700270
 801e774:	02700270 	.word	0x02700270
 801e778:	02700270 	.word	0x02700270
 801e77c:	02700270 	.word	0x02700270
 801e780:	02700270 	.word	0x02700270
 801e784:	0270020a 	.word	0x0270020a
 801e788:	02700270 	.word	0x02700270
 801e78c:	02700270 	.word	0x02700270
 801e790:	02700270 	.word	0x02700270
 801e794:	02700270 	.word	0x02700270
 801e798:	02700270 	.word	0x02700270
 801e79c:	02700270 	.word	0x02700270
 801e7a0:	02700270 	.word	0x02700270
 801e7a4:	02700270 	.word	0x02700270
 801e7a8:	02700270 	.word	0x02700270
 801e7ac:	02700270 	.word	0x02700270
 801e7b0:	02700270 	.word	0x02700270
 801e7b4:	02700270 	.word	0x02700270
 801e7b8:	02700270 	.word	0x02700270
 801e7bc:	02700270 	.word	0x02700270
 801e7c0:	02700270 	.word	0x02700270
 801e7c4:	02700270 	.word	0x02700270
 801e7c8:	02700270 	.word	0x02700270
 801e7cc:	02700270 	.word	0x02700270
 801e7d0:	02700270 	.word	0x02700270
 801e7d4:	02700270 	.word	0x02700270
 801e7d8:	02700270 	.word	0x02700270
 801e7dc:	02700270 	.word	0x02700270
 801e7e0:	02700270 	.word	0x02700270
 801e7e4:	02700270 	.word	0x02700270
 801e7e8:	02700270 	.word	0x02700270
 801e7ec:	02700270 	.word	0x02700270
 801e7f0:	02700270 	.word	0x02700270
 801e7f4:	02700270 	.word	0x02700270
 801e7f8:	02700270 	.word	0x02700270
 801e7fc:	02700270 	.word	0x02700270
 801e800:	02700270 	.word	0x02700270
 801e804:	02700270 	.word	0x02700270
 801e808:	02700270 	.word	0x02700270
 801e80c:	02700270 	.word	0x02700270
 801e810:	02700270 	.word	0x02700270
 801e814:	02700270 	.word	0x02700270
 801e818:	020e020c 	.word	0x020e020c
 801e81c:	02120210 	.word	0x02120210
 801e820:	02160214 	.word	0x02160214
 801e824:	02180270 	.word	0x02180270
 801e828:	0270021a 	.word	0x0270021a
 801e82c:	02700270 	.word	0x02700270
 801e830:	02700270 	.word	0x02700270
 801e834:	02700270 	.word	0x02700270
 801e838:	02700270 	.word	0x02700270
 801e83c:	02700270 	.word	0x02700270
 801e840:	02700270 	.word	0x02700270
 801e844:	02700270 	.word	0x02700270
 801e848:	02700270 	.word	0x02700270
 801e84c:	02700270 	.word	0x02700270
 801e850:	02700270 	.word	0x02700270
 801e854:	02700270 	.word	0x02700270
 801e858:	02700270 	.word	0x02700270
 801e85c:	02700270 	.word	0x02700270
 801e860:	02700270 	.word	0x02700270
 801e864:	02700270 	.word	0x02700270
 801e868:	02700270 	.word	0x02700270
 801e86c:	02700270 	.word	0x02700270
 801e870:	02700270 	.word	0x02700270
 801e874:	02700270 	.word	0x02700270
 801e878:	02700270 	.word	0x02700270
 801e87c:	02700270 	.word	0x02700270
 801e880:	02700270 	.word	0x02700270
 801e884:	02700270 	.word	0x02700270
 801e888:	02700270 	.word	0x02700270
 801e88c:	02700270 	.word	0x02700270
 801e890:	02700270 	.word	0x02700270
 801e894:	02700270 	.word	0x02700270
 801e898:	02700270 	.word	0x02700270
 801e89c:	02700270 	.word	0x02700270
 801e8a0:	02700270 	.word	0x02700270
 801e8a4:	02700270 	.word	0x02700270
 801e8a8:	02700270 	.word	0x02700270
 801e8ac:	02700270 	.word	0x02700270
 801e8b0:	02700270 	.word	0x02700270
 801e8b4:	02700270 	.word	0x02700270
 801e8b8:	02700270 	.word	0x02700270
 801e8bc:	02700270 	.word	0x02700270
 801e8c0:	02700270 	.word	0x02700270
 801e8c4:	02700270 	.word	0x02700270
 801e8c8:	02700270 	.word	0x02700270
 801e8cc:	02700270 	.word	0x02700270
 801e8d0:	02700270 	.word	0x02700270
 801e8d4:	02700270 	.word	0x02700270
 801e8d8:	02700270 	.word	0x02700270
 801e8dc:	02700270 	.word	0x02700270
 801e8e0:	021e021c 	.word	0x021e021c
 801e8e4:	02220220 	.word	0x02220220
 801e8e8:	02260224 	.word	0x02260224
 801e8ec:	022a0228 	.word	0x022a0228
 801e8f0:	022e022c 	.word	0x022e022c
 801e8f4:	02320230 	.word	0x02320230
 801e8f8:	02360234 	.word	0x02360234
 801e8fc:	023a0238 	.word	0x023a0238
 801e900:	023e023c 	.word	0x023e023c
 801e904:	02700240 	.word	0x02700240
 801e908:	02420270 	.word	0x02420270
 801e90c:	02460244 	.word	0x02460244
 801e910:	02700248 	.word	0x02700248
 801e914:	0270024a 	.word	0x0270024a
 801e918:	024e024c 	.word	0x024e024c
 801e91c:	02500270 	.word	0x02500270
 801e920:	02700270 	.word	0x02700270
 801e924:	02700270 	.word	0x02700270
 801e928:	02700270 	.word	0x02700270
 801e92c:	02700270 	.word	0x02700270
 801e930:	02700270 	.word	0x02700270
 801e934:	02700270 	.word	0x02700270
 801e938:	02700252 	.word	0x02700252
 801e93c:	02700270 	.word	0x02700270
 801e940:	02700270 	.word	0x02700270
 801e944:	02540270 	.word	0x02540270
 801e948:	02700270 	.word	0x02700270
 801e94c:	02700270 	.word	0x02700270
 801e950:	02700270 	.word	0x02700270
 801e954:	02700270 	.word	0x02700270
 801e958:	02700270 	.word	0x02700270
 801e95c:	02700270 	.word	0x02700270
 801e960:	02700270 	.word	0x02700270
 801e964:	02700270 	.word	0x02700270
 801e968:	02700270 	.word	0x02700270
 801e96c:	02700270 	.word	0x02700270
 801e970:	02700270 	.word	0x02700270
 801e974:	02700270 	.word	0x02700270
 801e978:	02700270 	.word	0x02700270
 801e97c:	02700270 	.word	0x02700270
 801e980:	02700270 	.word	0x02700270
 801e984:	02700270 	.word	0x02700270
 801e988:	02700270 	.word	0x02700270
 801e98c:	02700270 	.word	0x02700270
 801e990:	02700270 	.word	0x02700270
 801e994:	02700270 	.word	0x02700270
 801e998:	02700270 	.word	0x02700270
 801e99c:	02700270 	.word	0x02700270
 801e9a0:	02700270 	.word	0x02700270
 801e9a4:	02560270 	.word	0x02560270
 801e9a8:	025a0258 	.word	0x025a0258
 801e9ac:	025e025c 	.word	0x025e025c
 801e9b0:	02620260 	.word	0x02620260
 801e9b4:	02660264 	.word	0x02660264
 801e9b8:	02700268 	.word	0x02700268
 801e9bc:	026c026a 	.word	0x026c026a
 801e9c0:	02700270 	.word	0x02700270
 801e9c4:	02700270 	.word	0x02700270
 801e9c8:	02700270 	.word	0x02700270
 801e9cc:	02700270 	.word	0x02700270
 801e9d0:	02700270 	.word	0x02700270
 801e9d4:	02700270 	.word	0x02700270
 801e9d8:	02700270 	.word	0x02700270
 801e9dc:	02700270 	.word	0x02700270
 801e9e0:	02700270 	.word	0x02700270
 801e9e4:	02700270 	.word	0x02700270
 801e9e8:	02700270 	.word	0x02700270
 801e9ec:	02700270 	.word	0x02700270
 801e9f0:	02700270 	.word	0x02700270
 801e9f4:	02700270 	.word	0x02700270
 801e9f8:	02700270 	.word	0x02700270
 801e9fc:	02700270 	.word	0x02700270
 801ea00:	02700270 	.word	0x02700270
 801ea04:	02700270 	.word	0x02700270
 801ea08:	02700270 	.word	0x02700270
 801ea0c:	02700270 	.word	0x02700270
 801ea10:	02700270 	.word	0x02700270
 801ea14:	02700270 	.word	0x02700270
 801ea18:	02700270 	.word	0x02700270
 801ea1c:	02700270 	.word	0x02700270
 801ea20:	02700270 	.word	0x02700270
 801ea24:	02700270 	.word	0x02700270
 801ea28:	02700270 	.word	0x02700270
 801ea2c:	02700270 	.word	0x02700270
 801ea30:	02700270 	.word	0x02700270
 801ea34:	02700270 	.word	0x02700270
 801ea38:	02700270 	.word	0x02700270
 801ea3c:	02700270 	.word	0x02700270
 801ea40:	02700270 	.word	0x02700270
 801ea44:	02700270 	.word	0x02700270
 801ea48:	02700270 	.word	0x02700270
 801ea4c:	02700270 	.word	0x02700270
 801ea50:	02700270 	.word	0x02700270
 801ea54:	02700270 	.word	0x02700270
 801ea58:	02700270 	.word	0x02700270
 801ea5c:	02700270 	.word	0x02700270
 801ea60:	02700270 	.word	0x02700270
 801ea64:	02700270 	.word	0x02700270
 801ea68:	02700270 	.word	0x02700270
 801ea6c:	026e0270 	.word	0x026e0270
 801ea70:	483f      	ldr	r0, [pc, #252]	@ (801eb70 <mg_http_status_code_str+0x4f8>)
 801ea72:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 801ea74:	483f      	ldr	r0, [pc, #252]	@ (801eb74 <mg_http_status_code_str+0x4fc>)
 801ea76:	4770      	bx	lr
    case 200: return "OK";
 801ea78:	483f      	ldr	r0, [pc, #252]	@ (801eb78 <mg_http_status_code_str+0x500>)
 801ea7a:	4770      	bx	lr
    case 201: return "Created";
 801ea7c:	483f      	ldr	r0, [pc, #252]	@ (801eb7c <mg_http_status_code_str+0x504>)
 801ea7e:	4770      	bx	lr
    case 202: return "Accepted";
 801ea80:	483f      	ldr	r0, [pc, #252]	@ (801eb80 <mg_http_status_code_str+0x508>)
 801ea82:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 801ea84:	483f      	ldr	r0, [pc, #252]	@ (801eb84 <mg_http_status_code_str+0x50c>)
 801ea86:	4770      	bx	lr
    case 204: return "No Content";
 801ea88:	483f      	ldr	r0, [pc, #252]	@ (801eb88 <mg_http_status_code_str+0x510>)
 801ea8a:	4770      	bx	lr
    case 205: return "Reset Content";
 801ea8c:	483f      	ldr	r0, [pc, #252]	@ (801eb8c <mg_http_status_code_str+0x514>)
 801ea8e:	4770      	bx	lr
    case 206: return "Partial Content";
 801ea90:	483f      	ldr	r0, [pc, #252]	@ (801eb90 <mg_http_status_code_str+0x518>)
 801ea92:	4770      	bx	lr
    case 207: return "Multi-Status";
 801ea94:	483f      	ldr	r0, [pc, #252]	@ (801eb94 <mg_http_status_code_str+0x51c>)
 801ea96:	4770      	bx	lr
    case 208: return "Already Reported";
 801ea98:	483f      	ldr	r0, [pc, #252]	@ (801eb98 <mg_http_status_code_str+0x520>)
 801ea9a:	4770      	bx	lr
    case 226: return "IM Used";
 801ea9c:	483f      	ldr	r0, [pc, #252]	@ (801eb9c <mg_http_status_code_str+0x524>)
 801ea9e:	4770      	bx	lr
    case 300: return "Multiple Choices";
 801eaa0:	483f      	ldr	r0, [pc, #252]	@ (801eba0 <mg_http_status_code_str+0x528>)
 801eaa2:	4770      	bx	lr
    case 301: return "Moved Permanently";
 801eaa4:	483f      	ldr	r0, [pc, #252]	@ (801eba4 <mg_http_status_code_str+0x52c>)
 801eaa6:	4770      	bx	lr
    case 302: return "Found";
 801eaa8:	483f      	ldr	r0, [pc, #252]	@ (801eba8 <mg_http_status_code_str+0x530>)
 801eaaa:	4770      	bx	lr
    case 303: return "See Other";
 801eaac:	483f      	ldr	r0, [pc, #252]	@ (801ebac <mg_http_status_code_str+0x534>)
 801eaae:	4770      	bx	lr
    case 304: return "Not Modified";
 801eab0:	483f      	ldr	r0, [pc, #252]	@ (801ebb0 <mg_http_status_code_str+0x538>)
 801eab2:	4770      	bx	lr
    case 305: return "Use Proxy";
 801eab4:	483f      	ldr	r0, [pc, #252]	@ (801ebb4 <mg_http_status_code_str+0x53c>)
 801eab6:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 801eab8:	483f      	ldr	r0, [pc, #252]	@ (801ebb8 <mg_http_status_code_str+0x540>)
 801eaba:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 801eabc:	483f      	ldr	r0, [pc, #252]	@ (801ebbc <mg_http_status_code_str+0x544>)
 801eabe:	4770      	bx	lr
    case 400: return "Bad Request";
 801eac0:	483f      	ldr	r0, [pc, #252]	@ (801ebc0 <mg_http_status_code_str+0x548>)
 801eac2:	4770      	bx	lr
    case 401: return "Unauthorized";
 801eac4:	483f      	ldr	r0, [pc, #252]	@ (801ebc4 <mg_http_status_code_str+0x54c>)
 801eac6:	4770      	bx	lr
    case 402: return "Payment Required";
 801eac8:	483f      	ldr	r0, [pc, #252]	@ (801ebc8 <mg_http_status_code_str+0x550>)
 801eaca:	4770      	bx	lr
    case 403: return "Forbidden";
 801eacc:	483f      	ldr	r0, [pc, #252]	@ (801ebcc <mg_http_status_code_str+0x554>)
 801eace:	4770      	bx	lr
    case 404: return "Not Found";
 801ead0:	483f      	ldr	r0, [pc, #252]	@ (801ebd0 <mg_http_status_code_str+0x558>)
 801ead2:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 801ead4:	483f      	ldr	r0, [pc, #252]	@ (801ebd4 <mg_http_status_code_str+0x55c>)
 801ead6:	4770      	bx	lr
    case 406: return "Not Acceptable";
 801ead8:	483f      	ldr	r0, [pc, #252]	@ (801ebd8 <mg_http_status_code_str+0x560>)
 801eada:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 801eadc:	483f      	ldr	r0, [pc, #252]	@ (801ebdc <mg_http_status_code_str+0x564>)
 801eade:	4770      	bx	lr
    case 408: return "Request Timeout";
 801eae0:	483f      	ldr	r0, [pc, #252]	@ (801ebe0 <mg_http_status_code_str+0x568>)
 801eae2:	4770      	bx	lr
    case 409: return "Conflict";
 801eae4:	483f      	ldr	r0, [pc, #252]	@ (801ebe4 <mg_http_status_code_str+0x56c>)
 801eae6:	4770      	bx	lr
    case 410: return "Gone";
 801eae8:	483f      	ldr	r0, [pc, #252]	@ (801ebe8 <mg_http_status_code_str+0x570>)
 801eaea:	4770      	bx	lr
    case 411: return "Length Required";
 801eaec:	483f      	ldr	r0, [pc, #252]	@ (801ebec <mg_http_status_code_str+0x574>)
 801eaee:	4770      	bx	lr
    case 412: return "Precondition Failed";
 801eaf0:	483f      	ldr	r0, [pc, #252]	@ (801ebf0 <mg_http_status_code_str+0x578>)
 801eaf2:	4770      	bx	lr
    case 413: return "Payload Too Large";
 801eaf4:	483f      	ldr	r0, [pc, #252]	@ (801ebf4 <mg_http_status_code_str+0x57c>)
 801eaf6:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 801eaf8:	483f      	ldr	r0, [pc, #252]	@ (801ebf8 <mg_http_status_code_str+0x580>)
 801eafa:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 801eafc:	483f      	ldr	r0, [pc, #252]	@ (801ebfc <mg_http_status_code_str+0x584>)
 801eafe:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 801eb00:	483f      	ldr	r0, [pc, #252]	@ (801ec00 <mg_http_status_code_str+0x588>)
 801eb02:	4770      	bx	lr
    case 417: return "Expectation Failed";
 801eb04:	483f      	ldr	r0, [pc, #252]	@ (801ec04 <mg_http_status_code_str+0x58c>)
 801eb06:	4770      	bx	lr
    case 418: return "I'm a teapot";
 801eb08:	483f      	ldr	r0, [pc, #252]	@ (801ec08 <mg_http_status_code_str+0x590>)
 801eb0a:	4770      	bx	lr
    case 421: return "Misdirected Request";
 801eb0c:	483f      	ldr	r0, [pc, #252]	@ (801ec0c <mg_http_status_code_str+0x594>)
 801eb0e:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 801eb10:	483f      	ldr	r0, [pc, #252]	@ (801ec10 <mg_http_status_code_str+0x598>)
 801eb12:	4770      	bx	lr
    case 423: return "Locked";
 801eb14:	483f      	ldr	r0, [pc, #252]	@ (801ec14 <mg_http_status_code_str+0x59c>)
 801eb16:	4770      	bx	lr
    case 424: return "Failed Dependency";
 801eb18:	483f      	ldr	r0, [pc, #252]	@ (801ec18 <mg_http_status_code_str+0x5a0>)
 801eb1a:	4770      	bx	lr
    case 426: return "Upgrade Required";
 801eb1c:	483f      	ldr	r0, [pc, #252]	@ (801ec1c <mg_http_status_code_str+0x5a4>)
 801eb1e:	4770      	bx	lr
    case 428: return "Precondition Required";
 801eb20:	483f      	ldr	r0, [pc, #252]	@ (801ec20 <mg_http_status_code_str+0x5a8>)
 801eb22:	4770      	bx	lr
    case 429: return "Too Many Requests";
 801eb24:	483f      	ldr	r0, [pc, #252]	@ (801ec24 <mg_http_status_code_str+0x5ac>)
 801eb26:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 801eb28:	483f      	ldr	r0, [pc, #252]	@ (801ec28 <mg_http_status_code_str+0x5b0>)
 801eb2a:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 801eb2c:	483f      	ldr	r0, [pc, #252]	@ (801ec2c <mg_http_status_code_str+0x5b4>)
 801eb2e:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 801eb30:	483f      	ldr	r0, [pc, #252]	@ (801ec30 <mg_http_status_code_str+0x5b8>)
 801eb32:	4770      	bx	lr
    case 499: return "Client Closed Request";
 801eb34:	483f      	ldr	r0, [pc, #252]	@ (801ec34 <mg_http_status_code_str+0x5bc>)
 801eb36:	4770      	bx	lr
    case 500: return "Internal Server Error";
 801eb38:	483f      	ldr	r0, [pc, #252]	@ (801ec38 <mg_http_status_code_str+0x5c0>)
 801eb3a:	4770      	bx	lr
    case 501: return "Not Implemented";
 801eb3c:	483f      	ldr	r0, [pc, #252]	@ (801ec3c <mg_http_status_code_str+0x5c4>)
 801eb3e:	4770      	bx	lr
    case 502: return "Bad Gateway";
 801eb40:	483f      	ldr	r0, [pc, #252]	@ (801ec40 <mg_http_status_code_str+0x5c8>)
 801eb42:	4770      	bx	lr
    case 503: return "Service Unavailable";
 801eb44:	483f      	ldr	r0, [pc, #252]	@ (801ec44 <mg_http_status_code_str+0x5cc>)
 801eb46:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 801eb48:	483f      	ldr	r0, [pc, #252]	@ (801ec48 <mg_http_status_code_str+0x5d0>)
 801eb4a:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 801eb4c:	483f      	ldr	r0, [pc, #252]	@ (801ec4c <mg_http_status_code_str+0x5d4>)
 801eb4e:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 801eb50:	483f      	ldr	r0, [pc, #252]	@ (801ec50 <mg_http_status_code_str+0x5d8>)
 801eb52:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 801eb54:	483f      	ldr	r0, [pc, #252]	@ (801ec54 <mg_http_status_code_str+0x5dc>)
 801eb56:	4770      	bx	lr
    case 508: return "Loop Detected";
 801eb58:	483f      	ldr	r0, [pc, #252]	@ (801ec58 <mg_http_status_code_str+0x5e0>)
 801eb5a:	4770      	bx	lr
    case 510: return "Not Extended";
 801eb5c:	483f      	ldr	r0, [pc, #252]	@ (801ec5c <mg_http_status_code_str+0x5e4>)
 801eb5e:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 801eb60:	483f      	ldr	r0, [pc, #252]	@ (801ec60 <mg_http_status_code_str+0x5e8>)
 801eb62:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 801eb64:	483f      	ldr	r0, [pc, #252]	@ (801ec64 <mg_http_status_code_str+0x5ec>)
 801eb66:	4770      	bx	lr
    default: return "";
 801eb68:	483f      	ldr	r0, [pc, #252]	@ (801ec68 <mg_http_status_code_str+0x5f0>)
 801eb6a:	4770      	bx	lr
    case 101: return "Switching Protocols";
 801eb6c:	483f      	ldr	r0, [pc, #252]	@ (801ec6c <mg_http_status_code_str+0x5f4>)
  }
}
 801eb6e:	4770      	bx	lr
 801eb70:	0803644c 	.word	0x0803644c
 801eb74:	0803646c 	.word	0x0803646c
 801eb78:	08036478 	.word	0x08036478
 801eb7c:	0803647c 	.word	0x0803647c
 801eb80:	08036484 	.word	0x08036484
 801eb84:	08036490 	.word	0x08036490
 801eb88:	080364b0 	.word	0x080364b0
 801eb8c:	080364bc 	.word	0x080364bc
 801eb90:	080364cc 	.word	0x080364cc
 801eb94:	080364dc 	.word	0x080364dc
 801eb98:	080364ec 	.word	0x080364ec
 801eb9c:	08036500 	.word	0x08036500
 801eba0:	08036508 	.word	0x08036508
 801eba4:	0803651c 	.word	0x0803651c
 801eba8:	080365c0 	.word	0x080365c0
 801ebac:	08036530 	.word	0x08036530
 801ebb0:	0803653c 	.word	0x0803653c
 801ebb4:	0803654c 	.word	0x0803654c
 801ebb8:	08036558 	.word	0x08036558
 801ebbc:	0803656c 	.word	0x0803656c
 801ebc0:	08036580 	.word	0x08036580
 801ebc4:	0803658c 	.word	0x0803658c
 801ebc8:	0803659c 	.word	0x0803659c
 801ebcc:	080365b0 	.word	0x080365b0
 801ebd0:	080365bc 	.word	0x080365bc
 801ebd4:	080365c8 	.word	0x080365c8
 801ebd8:	080365dc 	.word	0x080365dc
 801ebdc:	080365ec 	.word	0x080365ec
 801ebe0:	0803660c 	.word	0x0803660c
 801ebe4:	0803661c 	.word	0x0803661c
 801ebe8:	08036628 	.word	0x08036628
 801ebec:	08036630 	.word	0x08036630
 801ebf0:	08036640 	.word	0x08036640
 801ebf4:	08036654 	.word	0x08036654
 801ebf8:	08036668 	.word	0x08036668
 801ebfc:	08036680 	.word	0x08036680
 801ec00:	08036698 	.word	0x08036698
 801ec04:	080366b8 	.word	0x080366b8
 801ec08:	080366cc 	.word	0x080366cc
 801ec0c:	080366dc 	.word	0x080366dc
 801ec10:	080366f0 	.word	0x080366f0
 801ec14:	08036708 	.word	0x08036708
 801ec18:	08036710 	.word	0x08036710
 801ec1c:	08036724 	.word	0x08036724
 801ec20:	08036738 	.word	0x08036738
 801ec24:	08036750 	.word	0x08036750
 801ec28:	08036764 	.word	0x08036764
 801ec2c:	08036784 	.word	0x08036784
 801ec30:	080367a8 	.word	0x080367a8
 801ec34:	080367c8 	.word	0x080367c8
 801ec38:	080367e0 	.word	0x080367e0
 801ec3c:	080367f8 	.word	0x080367f8
 801ec40:	08036808 	.word	0x08036808
 801ec44:	08036814 	.word	0x08036814
 801ec48:	08036828 	.word	0x08036828
 801ec4c:	08036838 	.word	0x08036838
 801ec50:	08036854 	.word	0x08036854
 801ec54:	0803686c 	.word	0x0803686c
 801ec58:	08036884 	.word	0x08036884
 801ec5c:	08036894 	.word	0x08036894
 801ec60:	080368a4 	.word	0x080368a4
 801ec64:	080368c4 	.word	0x080368c4
 801ec68:	08033984 	.word	0x08033984
 801ec6c:	08036458 	.word	0x08036458

0801ec70 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 801ec70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 801ec74:	2b09      	cmp	r3, #9
 801ec76:	d91c      	bls.n	801ecb2 <mg_is_url_safe+0x42>
 801ec78:	285f      	cmp	r0, #95	@ 0x5f
 801ec7a:	d01c      	beq.n	801ecb6 <mg_is_url_safe+0x46>
 801ec7c:	dc0d      	bgt.n	801ec9a <mg_is_url_safe+0x2a>
 801ec7e:	282e      	cmp	r0, #46	@ 0x2e
 801ec80:	d01b      	beq.n	801ecba <mg_is_url_safe+0x4a>
 801ec82:	dd04      	ble.n	801ec8e <mg_is_url_safe+0x1e>
 801ec84:	3841      	subs	r0, #65	@ 0x41
 801ec86:	2819      	cmp	r0, #25
 801ec88:	d805      	bhi.n	801ec96 <mg_is_url_safe+0x26>
 801ec8a:	2001      	movs	r0, #1
 801ec8c:	4770      	bx	lr
 801ec8e:	282d      	cmp	r0, #45	@ 0x2d
 801ec90:	d115      	bne.n	801ecbe <mg_is_url_safe+0x4e>
 801ec92:	2001      	movs	r0, #1
 801ec94:	4770      	bx	lr
 801ec96:	2000      	movs	r0, #0
 801ec98:	4770      	bx	lr
 801ec9a:	287a      	cmp	r0, #122	@ 0x7a
 801ec9c:	dd03      	ble.n	801eca6 <mg_is_url_safe+0x36>
 801ec9e:	287e      	cmp	r0, #126	@ 0x7e
 801eca0:	d10f      	bne.n	801ecc2 <mg_is_url_safe+0x52>
 801eca2:	2001      	movs	r0, #1
 801eca4:	4770      	bx	lr
 801eca6:	2861      	cmp	r0, #97	@ 0x61
 801eca8:	da01      	bge.n	801ecae <mg_is_url_safe+0x3e>
 801ecaa:	2000      	movs	r0, #0
 801ecac:	4770      	bx	lr
 801ecae:	2001      	movs	r0, #1
 801ecb0:	4770      	bx	lr
 801ecb2:	2001      	movs	r0, #1
 801ecb4:	4770      	bx	lr
 801ecb6:	2001      	movs	r0, #1
 801ecb8:	4770      	bx	lr
 801ecba:	2001      	movs	r0, #1
 801ecbc:	4770      	bx	lr
 801ecbe:	2000      	movs	r0, #0
 801ecc0:	4770      	bx	lr
 801ecc2:	2000      	movs	r0, #0
}
 801ecc4:	4770      	bx	lr

0801ecc6 <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801ecc6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801ecca:	2b09      	cmp	r3, #9
 801eccc:	d908      	bls.n	801ece0 <is_hex_digit+0x1a>
 801ecce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ecd2:	2b05      	cmp	r3, #5
 801ecd4:	d906      	bls.n	801ece4 <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 801ecd6:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801ecd8:	2805      	cmp	r0, #5
 801ecda:	d805      	bhi.n	801ece8 <is_hex_digit+0x22>
 801ecdc:	2001      	movs	r0, #1
 801ecde:	4770      	bx	lr
 801ece0:	2001      	movs	r0, #1
 801ece2:	4770      	bx	lr
 801ece4:	2001      	movs	r0, #1
 801ece6:	4770      	bx	lr
 801ece8:	2000      	movs	r0, #0
}
 801ecea:	4770      	bx	lr

0801ecec <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 801ecec:	b129      	cbz	r1, 801ecfa <roundup+0xe>
 801ecee:	4408      	add	r0, r1
 801ecf0:	3801      	subs	r0, #1
 801ecf2:	fbb0 f0f1 	udiv	r0, r0, r1
 801ecf6:	fb01 f000 	mul.w	r0, r1, r0
}
 801ecfa:	4770      	bx	lr

0801ecfc <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 801ecfc:	b108      	cbz	r0, 801ed02 <escapeseq+0x6>
 801ecfe:	4802      	ldr	r0, [pc, #8]	@ (801ed08 <escapeseq+0xc>)
 801ed00:	4770      	bx	lr
 801ed02:	4802      	ldr	r0, [pc, #8]	@ (801ed0c <escapeseq+0x10>)
}
 801ed04:	4770      	bx	lr
 801ed06:	bf00      	nop
 801ed08:	080368e4 	.word	0x080368e4
 801ed0c:	080368ec 	.word	0x080368ec

0801ed10 <json_esc>:

static char json_esc(int c, int esc) {
 801ed10:	b570      	push	{r4, r5, r6, lr}
 801ed12:	4604      	mov	r4, r0
 801ed14:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 801ed16:	4608      	mov	r0, r1
 801ed18:	f7ff fff0 	bl	801ecfc <escapeseq>
 801ed1c:	4606      	mov	r6, r0
 801ed1e:	fab5 f085 	clz	r0, r5
 801ed22:	0940      	lsrs	r0, r0, #5
 801ed24:	f7ff ffea 	bl	801ecfc <escapeseq>
 801ed28:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 801ed2a:	4633      	mov	r3, r6
 801ed2c:	e000      	b.n	801ed30 <json_esc+0x20>
 801ed2e:	3301      	adds	r3, #1
 801ed30:	7818      	ldrb	r0, [r3, #0]
 801ed32:	b118      	cbz	r0, 801ed3c <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 801ed34:	42a0      	cmp	r0, r4
 801ed36:	d1fa      	bne.n	801ed2e <json_esc+0x1e>
 801ed38:	1b9b      	subs	r3, r3, r6
 801ed3a:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 801ed3c:	bd70      	pop	{r4, r5, r6, pc}

0801ed3e <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 801ed3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed42:	4607      	mov	r7, r0
 801ed44:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 801ed46:	2400      	movs	r4, #0
 801ed48:	e003      	b.n	801ed52 <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 801ed4a:	b1d5      	cbz	r5, 801ed82 <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 801ed4c:	2d22      	cmp	r5, #34	@ 0x22
 801ed4e:	d015      	beq.n	801ed7c <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 801ed50:	3401      	adds	r4, #1
 801ed52:	42b4      	cmp	r4, r6
 801ed54:	da10      	bge.n	801ed78 <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 801ed56:	4623      	mov	r3, r4
 801ed58:	5d3d      	ldrb	r5, [r7, r4]
 801ed5a:	2d5c      	cmp	r5, #92	@ 0x5c
 801ed5c:	d1f5      	bne.n	801ed4a <mg_pass_string+0xc>
 801ed5e:	f104 0801 	add.w	r8, r4, #1
 801ed62:	45b0      	cmp	r8, r6
 801ed64:	daf1      	bge.n	801ed4a <mg_pass_string+0xc>
 801ed66:	443b      	add	r3, r7
 801ed68:	2101      	movs	r1, #1
 801ed6a:	7858      	ldrb	r0, [r3, #1]
 801ed6c:	f7ff ffd0 	bl	801ed10 <json_esc>
 801ed70:	2800      	cmp	r0, #0
 801ed72:	d0ea      	beq.n	801ed4a <mg_pass_string+0xc>
      i++;
 801ed74:	4644      	mov	r4, r8
 801ed76:	e7eb      	b.n	801ed50 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 801ed78:	f06f 0401 	mvn.w	r4, #1
}
 801ed7c:	4620      	mov	r0, r4
 801ed7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 801ed82:	f06f 0401 	mvn.w	r4, #1
 801ed86:	e7f9      	b.n	801ed7c <mg_pass_string+0x3e>

0801ed88 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 801ed88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed8c:	ed2d 8b02 	vpush	{d8}
 801ed90:	b085      	sub	sp, #20
 801ed92:	4681      	mov	r9, r0
 801ed94:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 801ed96:	f1b1 0800 	subs.w	r8, r1, #0
 801ed9a:	dd49      	ble.n	801ee30 <mg_atod+0xa8>
 801ed9c:	7803      	ldrb	r3, [r0, #0]
 801ed9e:	2b2d      	cmp	r3, #45	@ 0x2d
 801eda0:	d04c      	beq.n	801ee3c <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 801eda2:	2b2b      	cmp	r3, #43	@ 0x2b
 801eda4:	d04e      	beq.n	801ee44 <mg_atod+0xbc>
  int i = 0, sign = 1;
 801eda6:	f04f 0a01 	mov.w	sl, #1
 801edaa:	2400      	movs	r4, #0
 801edac:	e043      	b.n	801ee36 <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 801edae:	2200      	movs	r2, #0
 801edb0:	4b71      	ldr	r3, [pc, #452]	@ (801ef78 <mg_atod+0x1f0>)
 801edb2:	4630      	mov	r0, r6
 801edb4:	4639      	mov	r1, r7
 801edb6:	f7f1 fc37 	bl	8010628 <__aeabi_dmul>
 801edba:	4606      	mov	r6, r0
 801edbc:	460f      	mov	r7, r1
    d += p[i] - '0';
 801edbe:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 801edc2:	f7f1 fbc7 	bl	8010554 <__aeabi_i2d>
 801edc6:	4632      	mov	r2, r6
 801edc8:	463b      	mov	r3, r7
 801edca:	f7f1 fa77 	bl	80102bc <__adddf3>
 801edce:	4606      	mov	r6, r0
 801edd0:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801edd2:	3401      	adds	r4, #1
 801edd4:	4544      	cmp	r4, r8
 801edd6:	da05      	bge.n	801ede4 <mg_atod+0x5c>
 801edd8:	f819 5004 	ldrb.w	r5, [r9, r4]
 801eddc:	2d2f      	cmp	r5, #47	@ 0x2f
 801edde:	d901      	bls.n	801ede4 <mg_atod+0x5c>
 801ede0:	2d39      	cmp	r5, #57	@ 0x39
 801ede2:	d9e4      	bls.n	801edae <mg_atod+0x26>
  }
  d *= sign;
 801ede4:	4650      	mov	r0, sl
 801ede6:	f7f1 fbb5 	bl	8010554 <__aeabi_i2d>
 801edea:	4602      	mov	r2, r0
 801edec:	460b      	mov	r3, r1
 801edee:	ec43 2b18 	vmov	d8, r2, r3
 801edf2:	4632      	mov	r2, r6
 801edf4:	463b      	mov	r3, r7
 801edf6:	f7f1 fc17 	bl	8010628 <__aeabi_dmul>
 801edfa:	4606      	mov	r6, r0
 801edfc:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 801edfe:	4544      	cmp	r4, r8
 801ee00:	da03      	bge.n	801ee0a <mg_atod+0x82>
 801ee02:	f819 3004 	ldrb.w	r3, [r9, r4]
 801ee06:	2b2e      	cmp	r3, #46	@ 0x2e
 801ee08:	d020      	beq.n	801ee4c <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 801ee0a:	4544      	cmp	r4, r8
 801ee0c:	f280 80a1 	bge.w	801ef52 <mg_atod+0x1ca>
 801ee10:	f819 3004 	ldrb.w	r3, [r9, r4]
 801ee14:	2b65      	cmp	r3, #101	@ 0x65
 801ee16:	d002      	beq.n	801ee1e <mg_atod+0x96>
 801ee18:	2b45      	cmp	r3, #69	@ 0x45
 801ee1a:	f040 809a 	bne.w	801ef52 <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 801ee1e:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 801ee20:	4598      	cmp	r8, r3
 801ee22:	dd58      	ble.n	801eed6 <mg_atod+0x14e>
 801ee24:	f819 2003 	ldrb.w	r2, [r9, r3]
 801ee28:	2a2d      	cmp	r2, #45	@ 0x2d
 801ee2a:	d051      	beq.n	801eed0 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 801ee2c:	2200      	movs	r2, #0
 801ee2e:	e053      	b.n	801eed8 <mg_atod+0x150>
  int i = 0, sign = 1;
 801ee30:	f04f 0a01 	mov.w	sl, #1
 801ee34:	2400      	movs	r4, #0
    i++;
 801ee36:	2600      	movs	r6, #0
 801ee38:	2700      	movs	r7, #0
 801ee3a:	e7cb      	b.n	801edd4 <mg_atod+0x4c>
    sign = -1, i++;
 801ee3c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801ee40:	2401      	movs	r4, #1
 801ee42:	e7f8      	b.n	801ee36 <mg_atod+0xae>
  int i = 0, sign = 1;
 801ee44:	f04f 0a01 	mov.w	sl, #1
    i++;
 801ee48:	4654      	mov	r4, sl
 801ee4a:	e7f4      	b.n	801ee36 <mg_atod+0xae>
    i++;
 801ee4c:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 801ee4e:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 801ee52:	e9db ab00 	ldrd	sl, fp, [fp]
 801ee56:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 801ef70 <mg_atod+0x1e8>
 801ee5a:	ec53 2b17 	vmov	r2, r3, d7
 801ee5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ee62:	464f      	mov	r7, r9
 801ee64:	4645      	mov	r5, r8
 801ee66:	4690      	mov	r8, r2
 801ee68:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801ee6a:	e017      	b.n	801ee9c <mg_atod+0x114>
      frac += base * (p[i] - '0');
 801ee6c:	3830      	subs	r0, #48	@ 0x30
 801ee6e:	f7f1 fb71 	bl	8010554 <__aeabi_i2d>
 801ee72:	4652      	mov	r2, sl
 801ee74:	465b      	mov	r3, fp
 801ee76:	f7f1 fbd7 	bl	8010628 <__aeabi_dmul>
 801ee7a:	4602      	mov	r2, r0
 801ee7c:	460b      	mov	r3, r1
 801ee7e:	4640      	mov	r0, r8
 801ee80:	4649      	mov	r1, r9
 801ee82:	f7f1 fa1b 	bl	80102bc <__adddf3>
 801ee86:	4680      	mov	r8, r0
 801ee88:	4689      	mov	r9, r1
      base /= 10.0;
 801ee8a:	2200      	movs	r2, #0
 801ee8c:	4b3a      	ldr	r3, [pc, #232]	@ (801ef78 <mg_atod+0x1f0>)
 801ee8e:	4650      	mov	r0, sl
 801ee90:	4659      	mov	r1, fp
 801ee92:	f7f1 fcf3 	bl	801087c <__aeabi_ddiv>
 801ee96:	4682      	mov	sl, r0
 801ee98:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801ee9a:	3401      	adds	r4, #1
 801ee9c:	42ac      	cmp	r4, r5
 801ee9e:	da04      	bge.n	801eeaa <mg_atod+0x122>
 801eea0:	5d38      	ldrb	r0, [r7, r4]
 801eea2:	282f      	cmp	r0, #47	@ 0x2f
 801eea4:	d901      	bls.n	801eeaa <mg_atod+0x122>
 801eea6:	2839      	cmp	r0, #57	@ 0x39
 801eea8:	d9e0      	bls.n	801ee6c <mg_atod+0xe4>
    d += frac * sign;
 801eeaa:	4642      	mov	r2, r8
 801eeac:	464b      	mov	r3, r9
 801eeae:	46b9      	mov	r9, r7
 801eeb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801eeb4:	46a8      	mov	r8, r5
 801eeb6:	ec51 0b18 	vmov	r0, r1, d8
 801eeba:	f7f1 fbb5 	bl	8010628 <__aeabi_dmul>
 801eebe:	4602      	mov	r2, r0
 801eec0:	460b      	mov	r3, r1
 801eec2:	4630      	mov	r0, r6
 801eec4:	4639      	mov	r1, r7
 801eec6:	f7f1 f9f9 	bl	80102bc <__adddf3>
 801eeca:	4606      	mov	r6, r0
 801eecc:	460f      	mov	r7, r1
 801eece:	e79c      	b.n	801ee0a <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 801eed0:	1ca3      	adds	r3, r4, #2
 801eed2:	2201      	movs	r2, #1
 801eed4:	e000      	b.n	801eed8 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 801eed6:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 801eed8:	4543      	cmp	r3, r8
 801eeda:	da03      	bge.n	801eee4 <mg_atod+0x15c>
 801eedc:	f819 1003 	ldrb.w	r1, [r9, r3]
 801eee0:	292b      	cmp	r1, #43	@ 0x2b
 801eee2:	d013      	beq.n	801ef0c <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 801eee4:	461c      	mov	r4, r3
 801eee6:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 801eee8:	4544      	cmp	r4, r8
 801eeea:	da11      	bge.n	801ef10 <mg_atod+0x188>
 801eeec:	f819 3004 	ldrb.w	r3, [r9, r4]
 801eef0:	2b2f      	cmp	r3, #47	@ 0x2f
 801eef2:	d90d      	bls.n	801ef10 <mg_atod+0x188>
 801eef4:	2b39      	cmp	r3, #57	@ 0x39
 801eef6:	d80b      	bhi.n	801ef10 <mg_atod+0x188>
 801eef8:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 801eefc:	da08      	bge.n	801ef10 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 801eefe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801ef02:	3401      	adds	r4, #1
 801ef04:	3b30      	subs	r3, #48	@ 0x30
 801ef06:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801ef0a:	e7ed      	b.n	801eee8 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 801ef0c:	3301      	adds	r3, #1
 801ef0e:	e7e9      	b.n	801eee4 <mg_atod+0x15c>
    if (minus) exp = -exp;
 801ef10:	b102      	cbz	r2, 801ef14 <mg_atod+0x18c>
 801ef12:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 801ef14:	f04f 0800 	mov.w	r8, #0
 801ef18:	e009      	b.n	801ef2e <mg_atod+0x1a6>
 801ef1a:	2200      	movs	r2, #0
 801ef1c:	4b16      	ldr	r3, [pc, #88]	@ (801ef78 <mg_atod+0x1f0>)
 801ef1e:	4630      	mov	r0, r6
 801ef20:	4639      	mov	r1, r7
 801ef22:	f7f1 fb81 	bl	8010628 <__aeabi_dmul>
 801ef26:	4606      	mov	r6, r0
 801ef28:	460f      	mov	r7, r1
 801ef2a:	f108 0801 	add.w	r8, r8, #1
 801ef2e:	45a8      	cmp	r8, r5
 801ef30:	dbf3      	blt.n	801ef1a <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 801ef32:	f04f 0800 	mov.w	r8, #0
 801ef36:	e009      	b.n	801ef4c <mg_atod+0x1c4>
 801ef38:	2200      	movs	r2, #0
 801ef3a:	4b0f      	ldr	r3, [pc, #60]	@ (801ef78 <mg_atod+0x1f0>)
 801ef3c:	4630      	mov	r0, r6
 801ef3e:	4639      	mov	r1, r7
 801ef40:	f7f1 fc9c 	bl	801087c <__aeabi_ddiv>
 801ef44:	4606      	mov	r6, r0
 801ef46:	460f      	mov	r7, r1
 801ef48:	f108 0801 	add.w	r8, r8, #1
 801ef4c:	426b      	negs	r3, r5
 801ef4e:	4543      	cmp	r3, r8
 801ef50:	dcf2      	bgt.n	801ef38 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 801ef52:	9b01      	ldr	r3, [sp, #4]
 801ef54:	b103      	cbz	r3, 801ef58 <mg_atod+0x1d0>
 801ef56:	601c      	str	r4, [r3, #0]
  return d;
}
 801ef58:	ec47 6b10 	vmov	d0, r6, r7
 801ef5c:	b005      	add	sp, #20
 801ef5e:	ecbd 8b02 	vpop	{d8}
 801ef62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef66:	bf00      	nop
 801ef68:	9999999a 	.word	0x9999999a
 801ef6c:	3fb99999 	.word	0x3fb99999
	...
 801ef78:	40240000 	.word	0x40240000

0801ef7c <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 801ef7c:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 801ef7e:	4b03      	ldr	r3, [pc, #12]	@ (801ef8c <logc+0x10>)
 801ef80:	681b      	ldr	r3, [r3, #0]
 801ef82:	4a03      	ldr	r2, [pc, #12]	@ (801ef90 <logc+0x14>)
 801ef84:	6811      	ldr	r1, [r2, #0]
 801ef86:	4798      	blx	r3
}
 801ef88:	bd08      	pop	{r3, pc}
 801ef8a:	bf00      	nop
 801ef8c:	200000a4 	.word	0x200000a4
 801ef90:	20018020 	.word	0x20018020

0801ef94 <logs>:

static void logs(const char *buf, size_t len) {
 801ef94:	b570      	push	{r4, r5, r6, lr}
 801ef96:	4606      	mov	r6, r0
 801ef98:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 801ef9a:	2400      	movs	r4, #0
 801ef9c:	e003      	b.n	801efa6 <logs+0x12>
 801ef9e:	5d30      	ldrb	r0, [r6, r4]
 801efa0:	f7ff ffec 	bl	801ef7c <logc>
 801efa4:	3401      	adds	r4, #1
 801efa6:	42ac      	cmp	r4, r5
 801efa8:	d3f9      	bcc.n	801ef9e <logs+0xa>
}
 801efaa:	bd70      	pop	{r4, r5, r6, pc}

0801efac <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 801efac:	2809      	cmp	r0, #9
 801efae:	d803      	bhi.n	801efb8 <nibble+0xc>
 801efb0:	b2c0      	uxtb	r0, r0
 801efb2:	3030      	adds	r0, #48	@ 0x30
 801efb4:	b2c0      	uxtb	r0, r0
 801efb6:	4770      	bx	lr
 801efb8:	b2c0      	uxtb	r0, r0
 801efba:	3057      	adds	r0, #87	@ 0x57
 801efbc:	b2c0      	uxtb	r0, r0
}
 801efbe:	4770      	bx	lr

0801efc0 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 801efc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efc4:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 801efc6:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 801efc8:	6883      	ldr	r3, [r0, #8]
 801efca:	68c2      	ldr	r2, [r0, #12]
 801efcc:	4053      	eors	r3, r2
 801efce:	4033      	ands	r3, r6
 801efd0:	4053      	eors	r3, r2
 801efd2:	f8d1 a000 	ldr.w	sl, [r1]
 801efd6:	4453      	add	r3, sl
 801efd8:	6802      	ldr	r2, [r0, #0]
 801efda:	4413      	add	r3, r2
 801efdc:	4ae0      	ldr	r2, [pc, #896]	@ (801f360 <mg_md5_transform+0x3a0>)
 801efde:	441a      	add	r2, r3
 801efe0:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 801efe4:	6883      	ldr	r3, [r0, #8]
 801efe6:	ea86 0503 	eor.w	r5, r6, r3
 801efea:	4015      	ands	r5, r2
 801efec:	405d      	eors	r5, r3
 801efee:	684b      	ldr	r3, [r1, #4]
 801eff0:	9301      	str	r3, [sp, #4]
 801eff2:	441d      	add	r5, r3
 801eff4:	68c4      	ldr	r4, [r0, #12]
 801eff6:	4425      	add	r5, r4
 801eff8:	4bda      	ldr	r3, [pc, #872]	@ (801f364 <mg_md5_transform+0x3a4>)
 801effa:	442b      	add	r3, r5
 801effc:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 801f000:	ea86 0502 	eor.w	r5, r6, r2
 801f004:	401d      	ands	r5, r3
 801f006:	960b      	str	r6, [sp, #44]	@ 0x2c
 801f008:	4075      	eors	r5, r6
 801f00a:	688c      	ldr	r4, [r1, #8]
 801f00c:	4425      	add	r5, r4
 801f00e:	6886      	ldr	r6, [r0, #8]
 801f010:	4435      	add	r5, r6
 801f012:	4ed5      	ldr	r6, [pc, #852]	@ (801f368 <mg_md5_transform+0x3a8>)
 801f014:	442e      	add	r6, r5
 801f016:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 801f01a:	ea82 0703 	eor.w	r7, r2, r3
 801f01e:	ea07 070c 	and.w	r7, r7, ip
 801f022:	4057      	eors	r7, r2
 801f024:	68cd      	ldr	r5, [r1, #12]
 801f026:	950a      	str	r5, [sp, #40]	@ 0x28
 801f028:	442f      	add	r7, r5
 801f02a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f02c:	4437      	add	r7, r6
 801f02e:	4dcf      	ldr	r5, [pc, #828]	@ (801f36c <mg_md5_transform+0x3ac>)
 801f030:	443d      	add	r5, r7
 801f032:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 801f036:	ea83 070c 	eor.w	r7, r3, ip
 801f03a:	402f      	ands	r7, r5
 801f03c:	405f      	eors	r7, r3
 801f03e:	690e      	ldr	r6, [r1, #16]
 801f040:	9602      	str	r6, [sp, #8]
 801f042:	4437      	add	r7, r6
 801f044:	4417      	add	r7, r2
 801f046:	4aca      	ldr	r2, [pc, #808]	@ (801f370 <mg_md5_transform+0x3b0>)
 801f048:	443a      	add	r2, r7
 801f04a:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 801f04e:	ea8c 0705 	eor.w	r7, ip, r5
 801f052:	4017      	ands	r7, r2
 801f054:	ea87 070c 	eor.w	r7, r7, ip
 801f058:	694e      	ldr	r6, [r1, #20]
 801f05a:	9603      	str	r6, [sp, #12]
 801f05c:	4437      	add	r7, r6
 801f05e:	441f      	add	r7, r3
 801f060:	4bc4      	ldr	r3, [pc, #784]	@ (801f374 <mg_md5_transform+0x3b4>)
 801f062:	443b      	add	r3, r7
 801f064:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 801f068:	ea85 0702 	eor.w	r7, r5, r2
 801f06c:	401f      	ands	r7, r3
 801f06e:	406f      	eors	r7, r5
 801f070:	698e      	ldr	r6, [r1, #24]
 801f072:	9604      	str	r6, [sp, #16]
 801f074:	4437      	add	r7, r6
 801f076:	eb0c 0607 	add.w	r6, ip, r7
 801f07a:	4fbf      	ldr	r7, [pc, #764]	@ (801f378 <mg_md5_transform+0x3b8>)
 801f07c:	4437      	add	r7, r6
 801f07e:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 801f082:	ea82 0603 	eor.w	r6, r2, r3
 801f086:	ea06 060c 	and.w	r6, r6, ip
 801f08a:	4056      	eors	r6, r2
 801f08c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 801f090:	444e      	add	r6, r9
 801f092:	4435      	add	r5, r6
 801f094:	4fb9      	ldr	r7, [pc, #740]	@ (801f37c <mg_md5_transform+0x3bc>)
 801f096:	442f      	add	r7, r5
 801f098:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 801f09c:	ea83 050c 	eor.w	r5, r3, ip
 801f0a0:	403d      	ands	r5, r7
 801f0a2:	405d      	eors	r5, r3
 801f0a4:	6a0e      	ldr	r6, [r1, #32]
 801f0a6:	9605      	str	r6, [sp, #20]
 801f0a8:	4435      	add	r5, r6
 801f0aa:	442a      	add	r2, r5
 801f0ac:	4eb4      	ldr	r6, [pc, #720]	@ (801f380 <mg_md5_transform+0x3c0>)
 801f0ae:	4416      	add	r6, r2
 801f0b0:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 801f0b4:	ea8c 0207 	eor.w	r2, ip, r7
 801f0b8:	4032      	ands	r2, r6
 801f0ba:	ea82 020c 	eor.w	r2, r2, ip
 801f0be:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 801f0c0:	9506      	str	r5, [sp, #24]
 801f0c2:	442a      	add	r2, r5
 801f0c4:	4413      	add	r3, r2
 801f0c6:	4daf      	ldr	r5, [pc, #700]	@ (801f384 <mg_md5_transform+0x3c4>)
 801f0c8:	441d      	add	r5, r3
 801f0ca:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 801f0ce:	ea87 0306 	eor.w	r3, r7, r6
 801f0d2:	402b      	ands	r3, r5
 801f0d4:	407b      	eors	r3, r7
 801f0d6:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 801f0d8:	9207      	str	r2, [sp, #28]
 801f0da:	4413      	add	r3, r2
 801f0dc:	4463      	add	r3, ip
 801f0de:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 801f0e2:	3b4f      	subs	r3, #79	@ 0x4f
 801f0e4:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 801f0e8:	ea86 0c05 	eor.w	ip, r6, r5
 801f0ec:	ea0c 0c03 	and.w	ip, ip, r3
 801f0f0:	ea8c 0c06 	eor.w	ip, ip, r6
 801f0f4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801f0f6:	9208      	str	r2, [sp, #32]
 801f0f8:	4494      	add	ip, r2
 801f0fa:	4467      	add	r7, ip
 801f0fc:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 801f3a8 <mg_md5_transform+0x3e8>
 801f100:	44be      	add	lr, r7
 801f102:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 801f106:	ea85 0c03 	eor.w	ip, r5, r3
 801f10a:	ea0c 0c0e 	and.w	ip, ip, lr
 801f10e:	ea8c 0c05 	eor.w	ip, ip, r5
 801f112:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 801f114:	44bc      	add	ip, r7
 801f116:	4466      	add	r6, ip
 801f118:	f8df c290 	ldr.w	ip, [pc, #656]	@ 801f3ac <mg_md5_transform+0x3ec>
 801f11c:	44b4      	add	ip, r6
 801f11e:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 801f122:	ea83 080e 	eor.w	r8, r3, lr
 801f126:	ea08 080c 	and.w	r8, r8, ip
 801f12a:	ea88 0803 	eor.w	r8, r8, r3
 801f12e:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 801f130:	44b0      	add	r8, r6
 801f132:	44a8      	add	r8, r5
 801f134:	4d94      	ldr	r5, [pc, #592]	@ (801f388 <mg_md5_transform+0x3c8>)
 801f136:	4445      	add	r5, r8
 801f138:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 801f13c:	ea8e 0b0c 	eor.w	fp, lr, ip
 801f140:	ea0b 0b05 	and.w	fp, fp, r5
 801f144:	ea8b 0b0e 	eor.w	fp, fp, lr
 801f148:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 801f14c:	44c3      	add	fp, r8
 801f14e:	449b      	add	fp, r3
 801f150:	4b8e      	ldr	r3, [pc, #568]	@ (801f38c <mg_md5_transform+0x3cc>)
 801f152:	445b      	add	r3, fp
 801f154:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 801f158:	ea8c 0b05 	eor.w	fp, ip, r5
 801f15c:	ea0b 0b03 	and.w	fp, fp, r3
 801f160:	ea8b 0b0c 	eor.w	fp, fp, ip
 801f164:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 801f166:	9109      	str	r1, [sp, #36]	@ 0x24
 801f168:	448b      	add	fp, r1
 801f16a:	44f3      	add	fp, lr
 801f16c:	f8df e240 	ldr.w	lr, [pc, #576]	@ 801f3b0 <mg_md5_transform+0x3f0>
 801f170:	44de      	add	lr, fp
 801f172:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 801f176:	ea83 0b0e 	eor.w	fp, r3, lr
 801f17a:	ea0b 0b05 	and.w	fp, fp, r5
 801f17e:	ea8b 0b03 	eor.w	fp, fp, r3
 801f182:	9a01      	ldr	r2, [sp, #4]
 801f184:	4493      	add	fp, r2
 801f186:	44e3      	add	fp, ip
 801f188:	f8df c228 	ldr.w	ip, [pc, #552]	@ 801f3b4 <mg_md5_transform+0x3f4>
 801f18c:	44dc      	add	ip, fp
 801f18e:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 801f192:	ea8e 0b0c 	eor.w	fp, lr, ip
 801f196:	ea0b 0b03 	and.w	fp, fp, r3
 801f19a:	ea8b 0b0e 	eor.w	fp, fp, lr
 801f19e:	9a04      	ldr	r2, [sp, #16]
 801f1a0:	4493      	add	fp, r2
 801f1a2:	44ab      	add	fp, r5
 801f1a4:	4d7a      	ldr	r5, [pc, #488]	@ (801f390 <mg_md5_transform+0x3d0>)
 801f1a6:	445d      	add	r5, fp
 801f1a8:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 801f1ac:	ea8c 0b05 	eor.w	fp, ip, r5
 801f1b0:	ea0b 0b0e 	and.w	fp, fp, lr
 801f1b4:	ea8b 0b0c 	eor.w	fp, fp, ip
 801f1b8:	9908      	ldr	r1, [sp, #32]
 801f1ba:	448b      	add	fp, r1
 801f1bc:	445b      	add	r3, fp
 801f1be:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 801f3b8 <mg_md5_transform+0x3f8>
 801f1c2:	449b      	add	fp, r3
 801f1c4:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 801f1c8:	ea85 030b 	eor.w	r3, r5, fp
 801f1cc:	ea03 030c 	and.w	r3, r3, ip
 801f1d0:	406b      	eors	r3, r5
 801f1d2:	4453      	add	r3, sl
 801f1d4:	4473      	add	r3, lr
 801f1d6:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 801f3bc <mg_md5_transform+0x3fc>
 801f1da:	449e      	add	lr, r3
 801f1dc:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 801f1e0:	ea8b 030e 	eor.w	r3, fp, lr
 801f1e4:	402b      	ands	r3, r5
 801f1e6:	ea83 030b 	eor.w	r3, r3, fp
 801f1ea:	9a03      	ldr	r2, [sp, #12]
 801f1ec:	4413      	add	r3, r2
 801f1ee:	449c      	add	ip, r3
 801f1f0:	4b68      	ldr	r3, [pc, #416]	@ (801f394 <mg_md5_transform+0x3d4>)
 801f1f2:	4463      	add	r3, ip
 801f1f4:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 801f1f8:	ea8e 0c03 	eor.w	ip, lr, r3
 801f1fc:	ea0c 0c0b 	and.w	ip, ip, fp
 801f200:	ea8c 0c0e 	eor.w	ip, ip, lr
 801f204:	9a07      	ldr	r2, [sp, #28]
 801f206:	4494      	add	ip, r2
 801f208:	4465      	add	r5, ip
 801f20a:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 801f3c0 <mg_md5_transform+0x400>
 801f20e:	44ac      	add	ip, r5
 801f210:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 801f214:	ea83 050c 	eor.w	r5, r3, ip
 801f218:	ea05 050e 	and.w	r5, r5, lr
 801f21c:	405d      	eors	r5, r3
 801f21e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f220:	440d      	add	r5, r1
 801f222:	445d      	add	r5, fp
 801f224:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 801f3c4 <mg_md5_transform+0x404>
 801f228:	44ab      	add	fp, r5
 801f22a:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 801f22e:	ea8c 050b 	eor.w	r5, ip, fp
 801f232:	401d      	ands	r5, r3
 801f234:	ea85 050c 	eor.w	r5, r5, ip
 801f238:	9a02      	ldr	r2, [sp, #8]
 801f23a:	4415      	add	r5, r2
 801f23c:	44ae      	add	lr, r5
 801f23e:	4d56      	ldr	r5, [pc, #344]	@ (801f398 <mg_md5_transform+0x3d8>)
 801f240:	4475      	add	r5, lr
 801f242:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 801f246:	ea8b 0e05 	eor.w	lr, fp, r5
 801f24a:	ea0e 0e0c 	and.w	lr, lr, ip
 801f24e:	ea8e 0e0b 	eor.w	lr, lr, fp
 801f252:	9906      	ldr	r1, [sp, #24]
 801f254:	448e      	add	lr, r1
 801f256:	4473      	add	r3, lr
 801f258:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 801f3c8 <mg_md5_transform+0x408>
 801f25c:	449e      	add	lr, r3
 801f25e:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 801f262:	ea85 030e 	eor.w	r3, r5, lr
 801f266:	ea03 030b 	and.w	r3, r3, fp
 801f26a:	406b      	eors	r3, r5
 801f26c:	4443      	add	r3, r8
 801f26e:	4463      	add	r3, ip
 801f270:	f8df c158 	ldr.w	ip, [pc, #344]	@ 801f3cc <mg_md5_transform+0x40c>
 801f274:	449c      	add	ip, r3
 801f276:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 801f27a:	ea8e 030c 	eor.w	r3, lr, ip
 801f27e:	402b      	ands	r3, r5
 801f280:	ea83 030e 	eor.w	r3, r3, lr
 801f284:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f286:	4413      	add	r3, r2
 801f288:	449b      	add	fp, r3
 801f28a:	4b44      	ldr	r3, [pc, #272]	@ (801f39c <mg_md5_transform+0x3dc>)
 801f28c:	445b      	add	r3, fp
 801f28e:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 801f292:	ea8c 0b03 	eor.w	fp, ip, r3
 801f296:	ea0b 0b0e 	and.w	fp, fp, lr
 801f29a:	ea8b 0b0c 	eor.w	fp, fp, ip
 801f29e:	9905      	ldr	r1, [sp, #20]
 801f2a0:	448b      	add	fp, r1
 801f2a2:	445d      	add	r5, fp
 801f2a4:	f8df b128 	ldr.w	fp, [pc, #296]	@ 801f3d0 <mg_md5_transform+0x410>
 801f2a8:	44ab      	add	fp, r5
 801f2aa:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 801f2ae:	ea83 050b 	eor.w	r5, r3, fp
 801f2b2:	ea05 050c 	and.w	r5, r5, ip
 801f2b6:	405d      	eors	r5, r3
 801f2b8:	4435      	add	r5, r6
 801f2ba:	4475      	add	r5, lr
 801f2bc:	f8df e114 	ldr.w	lr, [pc, #276]	@ 801f3d4 <mg_md5_transform+0x414>
 801f2c0:	44ae      	add	lr, r5
 801f2c2:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 801f2c6:	ea8b 050e 	eor.w	r5, fp, lr
 801f2ca:	401d      	ands	r5, r3
 801f2cc:	ea85 050b 	eor.w	r5, r5, fp
 801f2d0:	4425      	add	r5, r4
 801f2d2:	44ac      	add	ip, r5
 801f2d4:	4d32      	ldr	r5, [pc, #200]	@ (801f3a0 <mg_md5_transform+0x3e0>)
 801f2d6:	4465      	add	r5, ip
 801f2d8:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 801f2dc:	ea8e 0c05 	eor.w	ip, lr, r5
 801f2e0:	ea0c 0c0b 	and.w	ip, ip, fp
 801f2e4:	ea8c 0c0e 	eor.w	ip, ip, lr
 801f2e8:	44cc      	add	ip, r9
 801f2ea:	4463      	add	r3, ip
 801f2ec:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 801f3d8 <mg_md5_transform+0x418>
 801f2f0:	449c      	add	ip, r3
 801f2f2:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 801f2f6:	ea85 030c 	eor.w	r3, r5, ip
 801f2fa:	ea03 030e 	and.w	r3, r3, lr
 801f2fe:	406b      	eors	r3, r5
 801f300:	443b      	add	r3, r7
 801f302:	445b      	add	r3, fp
 801f304:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 801f3dc <mg_md5_transform+0x41c>
 801f308:	449b      	add	fp, r3
 801f30a:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 801f30e:	ea8c 030b 	eor.w	r3, ip, fp
 801f312:	406b      	eors	r3, r5
 801f314:	9a03      	ldr	r2, [sp, #12]
 801f316:	4413      	add	r3, r2
 801f318:	4473      	add	r3, lr
 801f31a:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 801f31e:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 801f322:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 801f326:	ea8b 0e03 	eor.w	lr, fp, r3
 801f32a:	ea8e 0e0c 	eor.w	lr, lr, ip
 801f32e:	448e      	add	lr, r1
 801f330:	44ae      	add	lr, r5
 801f332:	4d1c      	ldr	r5, [pc, #112]	@ (801f3a4 <mg_md5_transform+0x3e4>)
 801f334:	4475      	add	r5, lr
 801f336:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 801f33a:	ea83 0e05 	eor.w	lr, r3, r5
 801f33e:	ea8e 0e0b 	eor.w	lr, lr, fp
 801f342:	9908      	ldr	r1, [sp, #32]
 801f344:	448e      	add	lr, r1
 801f346:	44f4      	add	ip, lr
 801f348:	f8df e094 	ldr.w	lr, [pc, #148]	@ 801f3e0 <mg_md5_transform+0x420>
 801f34c:	44e6      	add	lr, ip
 801f34e:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 801f352:	ea85 0c0e 	eor.w	ip, r5, lr
 801f356:	ea8c 0c03 	eor.w	ip, ip, r3
 801f35a:	44c4      	add	ip, r8
 801f35c:	44e3      	add	fp, ip
 801f35e:	e041      	b.n	801f3e4 <mg_md5_transform+0x424>
 801f360:	d76aa478 	.word	0xd76aa478
 801f364:	e8c7b756 	.word	0xe8c7b756
 801f368:	242070db 	.word	0x242070db
 801f36c:	c1bdceee 	.word	0xc1bdceee
 801f370:	f57c0faf 	.word	0xf57c0faf
 801f374:	4787c62a 	.word	0x4787c62a
 801f378:	a8304613 	.word	0xa8304613
 801f37c:	fd469501 	.word	0xfd469501
 801f380:	698098d8 	.word	0x698098d8
 801f384:	8b44f7af 	.word	0x8b44f7af
 801f388:	fd987193 	.word	0xfd987193
 801f38c:	a679438e 	.word	0xa679438e
 801f390:	c040b340 	.word	0xc040b340
 801f394:	d62f105d 	.word	0xd62f105d
 801f398:	e7d3fbc8 	.word	0xe7d3fbc8
 801f39c:	f4d50d87 	.word	0xf4d50d87
 801f3a0:	fcefa3f8 	.word	0xfcefa3f8
 801f3a4:	8771f681 	.word	0x8771f681
 801f3a8:	895cd7be 	.word	0x895cd7be
 801f3ac:	6b901122 	.word	0x6b901122
 801f3b0:	49b40821 	.word	0x49b40821
 801f3b4:	f61e2562 	.word	0xf61e2562
 801f3b8:	265e5a51 	.word	0x265e5a51
 801f3bc:	e9b6c7aa 	.word	0xe9b6c7aa
 801f3c0:	02441453 	.word	0x02441453
 801f3c4:	d8a1e681 	.word	0xd8a1e681
 801f3c8:	21e1cde6 	.word	0x21e1cde6
 801f3cc:	c33707d6 	.word	0xc33707d6
 801f3d0:	455a14ed 	.word	0x455a14ed
 801f3d4:	a9e3e905 	.word	0xa9e3e905
 801f3d8:	676f02d9 	.word	0x676f02d9
 801f3dc:	8d2a4c8a 	.word	0x8d2a4c8a
 801f3e0:	6d9d6122 	.word	0x6d9d6122
 801f3e4:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 801f6ac <mg_md5_transform+0x6ec>
 801f3e8:	44dc      	add	ip, fp
 801f3ea:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 801f3ee:	ea8e 0b0c 	eor.w	fp, lr, ip
 801f3f2:	ea8b 0b05 	eor.w	fp, fp, r5
 801f3f6:	9a01      	ldr	r2, [sp, #4]
 801f3f8:	4493      	add	fp, r2
 801f3fa:	449b      	add	fp, r3
 801f3fc:	4b99      	ldr	r3, [pc, #612]	@ (801f664 <mg_md5_transform+0x6a4>)
 801f3fe:	445b      	add	r3, fp
 801f400:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 801f404:	ea8c 0b03 	eor.w	fp, ip, r3
 801f408:	ea8b 0b0e 	eor.w	fp, fp, lr
 801f40c:	9a02      	ldr	r2, [sp, #8]
 801f40e:	4493      	add	fp, r2
 801f410:	445d      	add	r5, fp
 801f412:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 801f6b0 <mg_md5_transform+0x6f0>
 801f416:	44ab      	add	fp, r5
 801f418:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 801f41c:	ea83 050b 	eor.w	r5, r3, fp
 801f420:	ea85 050c 	eor.w	r5, r5, ip
 801f424:	444d      	add	r5, r9
 801f426:	44ae      	add	lr, r5
 801f428:	4d8f      	ldr	r5, [pc, #572]	@ (801f668 <mg_md5_transform+0x6a8>)
 801f42a:	4475      	add	r5, lr
 801f42c:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 801f430:	ea8b 0e05 	eor.w	lr, fp, r5
 801f434:	ea8e 0e03 	eor.w	lr, lr, r3
 801f438:	9a07      	ldr	r2, [sp, #28]
 801f43a:	4496      	add	lr, r2
 801f43c:	44e6      	add	lr, ip
 801f43e:	f8df c274 	ldr.w	ip, [pc, #628]	@ 801f6b4 <mg_md5_transform+0x6f4>
 801f442:	44f4      	add	ip, lr
 801f444:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 801f448:	ea85 0e0c 	eor.w	lr, r5, ip
 801f44c:	ea8e 0e0b 	eor.w	lr, lr, fp
 801f450:	44b6      	add	lr, r6
 801f452:	4473      	add	r3, lr
 801f454:	f8df e260 	ldr.w	lr, [pc, #608]	@ 801f6b8 <mg_md5_transform+0x6f8>
 801f458:	449e      	add	lr, r3
 801f45a:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 801f45e:	ea8c 030e 	eor.w	r3, ip, lr
 801f462:	406b      	eors	r3, r5
 801f464:	4453      	add	r3, sl
 801f466:	449b      	add	fp, r3
 801f468:	4b80      	ldr	r3, [pc, #512]	@ (801f66c <mg_md5_transform+0x6ac>)
 801f46a:	445b      	add	r3, fp
 801f46c:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 801f470:	ea8e 0b03 	eor.w	fp, lr, r3
 801f474:	ea8b 0b0c 	eor.w	fp, fp, ip
 801f478:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f47a:	4493      	add	fp, r2
 801f47c:	445d      	add	r5, fp
 801f47e:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 801f6bc <mg_md5_transform+0x6fc>
 801f482:	44ab      	add	fp, r5
 801f484:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 801f488:	ea83 050b 	eor.w	r5, r3, fp
 801f48c:	ea85 050e 	eor.w	r5, r5, lr
 801f490:	9904      	ldr	r1, [sp, #16]
 801f492:	440d      	add	r5, r1
 801f494:	4465      	add	r5, ip
 801f496:	f8df c228 	ldr.w	ip, [pc, #552]	@ 801f6c0 <mg_md5_transform+0x700>
 801f49a:	44ac      	add	ip, r5
 801f49c:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 801f4a0:	ea8b 050c 	eor.w	r5, fp, ip
 801f4a4:	405d      	eors	r5, r3
 801f4a6:	9906      	ldr	r1, [sp, #24]
 801f4a8:	440d      	add	r5, r1
 801f4aa:	44ae      	add	lr, r5
 801f4ac:	4d70      	ldr	r5, [pc, #448]	@ (801f670 <mg_md5_transform+0x6b0>)
 801f4ae:	4475      	add	r5, lr
 801f4b0:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 801f4b4:	ea8c 0e05 	eor.w	lr, ip, r5
 801f4b8:	ea8e 0e0b 	eor.w	lr, lr, fp
 801f4bc:	44be      	add	lr, r7
 801f4be:	4473      	add	r3, lr
 801f4c0:	f8df e200 	ldr.w	lr, [pc, #512]	@ 801f6c4 <mg_md5_transform+0x704>
 801f4c4:	449e      	add	lr, r3
 801f4c6:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 801f4ca:	ea85 030e 	eor.w	r3, r5, lr
 801f4ce:	ea83 030c 	eor.w	r3, r3, ip
 801f4d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f4d4:	440b      	add	r3, r1
 801f4d6:	445b      	add	r3, fp
 801f4d8:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 801f6c8 <mg_md5_transform+0x708>
 801f4dc:	449b      	add	fp, r3
 801f4de:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 801f4e2:	ea8e 030b 	eor.w	r3, lr, fp
 801f4e6:	406b      	eors	r3, r5
 801f4e8:	940a      	str	r4, [sp, #40]	@ 0x28
 801f4ea:	4423      	add	r3, r4
 801f4ec:	449c      	add	ip, r3
 801f4ee:	4b61      	ldr	r3, [pc, #388]	@ (801f674 <mg_md5_transform+0x6b4>)
 801f4f0:	4463      	add	r3, ip
 801f4f2:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 801f4f6:	ea63 0c0e 	orn	ip, r3, lr
 801f4fa:	ea8c 0c0b 	eor.w	ip, ip, fp
 801f4fe:	44e2      	add	sl, ip
 801f500:	44aa      	add	sl, r5
 801f502:	4d5d      	ldr	r5, [pc, #372]	@ (801f678 <mg_md5_transform+0x6b8>)
 801f504:	4455      	add	r5, sl
 801f506:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 801f50a:	ea65 0c0b 	orn	ip, r5, fp
 801f50e:	ea8c 0c03 	eor.w	ip, ip, r3
 801f512:	44e1      	add	r9, ip
 801f514:	44f1      	add	r9, lr
 801f516:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 801f6cc <mg_md5_transform+0x70c>
 801f51a:	44cc      	add	ip, r9
 801f51c:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 801f520:	ea6c 0e03 	orn	lr, ip, r3
 801f524:	ea8e 0e05 	eor.w	lr, lr, r5
 801f528:	44f0      	add	r8, lr
 801f52a:	44d8      	add	r8, fp
 801f52c:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 801f6d0 <mg_md5_transform+0x710>
 801f530:	44c6      	add	lr, r8
 801f532:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 801f536:	ea6e 0805 	orn	r8, lr, r5
 801f53a:	ea88 080c 	eor.w	r8, r8, ip
 801f53e:	9c03      	ldr	r4, [sp, #12]
 801f540:	44a0      	add	r8, r4
 801f542:	4498      	add	r8, r3
 801f544:	4b4d      	ldr	r3, [pc, #308]	@ (801f67c <mg_md5_transform+0x6bc>)
 801f546:	4443      	add	r3, r8
 801f548:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 801f54c:	ea63 080c 	orn	r8, r3, ip
 801f550:	ea88 080e 	eor.w	r8, r8, lr
 801f554:	4447      	add	r7, r8
 801f556:	442f      	add	r7, r5
 801f558:	4d49      	ldr	r5, [pc, #292]	@ (801f680 <mg_md5_transform+0x6c0>)
 801f55a:	443d      	add	r5, r7
 801f55c:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 801f560:	ea65 070e 	orn	r7, r5, lr
 801f564:	405f      	eors	r7, r3
 801f566:	4417      	add	r7, r2
 801f568:	44bc      	add	ip, r7
 801f56a:	4f46      	ldr	r7, [pc, #280]	@ (801f684 <mg_md5_transform+0x6c4>)
 801f56c:	4467      	add	r7, ip
 801f56e:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 801f572:	ea67 0c03 	orn	ip, r7, r3
 801f576:	ea8c 0c05 	eor.w	ip, ip, r5
 801f57a:	9a07      	ldr	r2, [sp, #28]
 801f57c:	4462      	add	r2, ip
 801f57e:	4472      	add	r2, lr
 801f580:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 801f584:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 801f588:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 801f58c:	ea62 0c05 	orn	ip, r2, r5
 801f590:	ea8c 0c07 	eor.w	ip, ip, r7
 801f594:	9c01      	ldr	r4, [sp, #4]
 801f596:	44a4      	add	ip, r4
 801f598:	449c      	add	ip, r3
 801f59a:	4b3b      	ldr	r3, [pc, #236]	@ (801f688 <mg_md5_transform+0x6c8>)
 801f59c:	4463      	add	r3, ip
 801f59e:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 801f5a2:	ea63 0c07 	orn	ip, r3, r7
 801f5a6:	ea8c 0c02 	eor.w	ip, ip, r2
 801f5aa:	9905      	ldr	r1, [sp, #20]
 801f5ac:	448c      	add	ip, r1
 801f5ae:	44ac      	add	ip, r5
 801f5b0:	4d36      	ldr	r5, [pc, #216]	@ (801f68c <mg_md5_transform+0x6cc>)
 801f5b2:	4465      	add	r5, ip
 801f5b4:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 801f5b8:	ea65 0c02 	orn	ip, r5, r2
 801f5bc:	ea8c 0c03 	eor.w	ip, ip, r3
 801f5c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f5c2:	4461      	add	r1, ip
 801f5c4:	440f      	add	r7, r1
 801f5c6:	4932      	ldr	r1, [pc, #200]	@ (801f690 <mg_md5_transform+0x6d0>)
 801f5c8:	4439      	add	r1, r7
 801f5ca:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 801f5ce:	ea61 0703 	orn	r7, r1, r3
 801f5d2:	406f      	eors	r7, r5
 801f5d4:	9c04      	ldr	r4, [sp, #16]
 801f5d6:	4427      	add	r7, r4
 801f5d8:	4417      	add	r7, r2
 801f5da:	4a2e      	ldr	r2, [pc, #184]	@ (801f694 <mg_md5_transform+0x6d4>)
 801f5dc:	443a      	add	r2, r7
 801f5de:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 801f5e2:	ea62 0705 	orn	r7, r2, r5
 801f5e6:	404f      	eors	r7, r1
 801f5e8:	443e      	add	r6, r7
 801f5ea:	4433      	add	r3, r6
 801f5ec:	4e2a      	ldr	r6, [pc, #168]	@ (801f698 <mg_md5_transform+0x6d8>)
 801f5ee:	441e      	add	r6, r3
 801f5f0:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 801f5f4:	ea66 0301 	orn	r3, r6, r1
 801f5f8:	4053      	eors	r3, r2
 801f5fa:	9f02      	ldr	r7, [sp, #8]
 801f5fc:	443b      	add	r3, r7
 801f5fe:	441d      	add	r5, r3
 801f600:	4b26      	ldr	r3, [pc, #152]	@ (801f69c <mg_md5_transform+0x6dc>)
 801f602:	442b      	add	r3, r5
 801f604:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 801f608:	ea63 0502 	orn	r5, r3, r2
 801f60c:	4075      	eors	r5, r6
 801f60e:	9f08      	ldr	r7, [sp, #32]
 801f610:	443d      	add	r5, r7
 801f612:	440d      	add	r5, r1
 801f614:	4922      	ldr	r1, [pc, #136]	@ (801f6a0 <mg_md5_transform+0x6e0>)
 801f616:	4429      	add	r1, r5
 801f618:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 801f61c:	ea61 0506 	orn	r5, r1, r6
 801f620:	405d      	eors	r5, r3
 801f622:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f624:	4425      	add	r5, r4
 801f626:	442a      	add	r2, r5
 801f628:	4d1e      	ldr	r5, [pc, #120]	@ (801f6a4 <mg_md5_transform+0x6e4>)
 801f62a:	4415      	add	r5, r2
 801f62c:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 801f630:	ea65 0203 	orn	r2, r5, r3
 801f634:	404a      	eors	r2, r1
 801f636:	9c06      	ldr	r4, [sp, #24]
 801f638:	4422      	add	r2, r4
 801f63a:	4432      	add	r2, r6
 801f63c:	4e1a      	ldr	r6, [pc, #104]	@ (801f6a8 <mg_md5_transform+0x6e8>)
 801f63e:	4416      	add	r6, r2
 801f640:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 801f644:	6802      	ldr	r2, [r0, #0]
 801f646:	4413      	add	r3, r2
 801f648:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 801f64a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f64c:	4434      	add	r4, r6
 801f64e:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 801f650:	6883      	ldr	r3, [r0, #8]
 801f652:	441d      	add	r5, r3
 801f654:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 801f656:	68c3      	ldr	r3, [r0, #12]
 801f658:	4419      	add	r1, r3
 801f65a:	60c1      	str	r1, [r0, #12]
}
 801f65c:	b00d      	add	sp, #52	@ 0x34
 801f65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f662:	bf00      	nop
 801f664:	a4beea44 	.word	0xa4beea44
 801f668:	f6bb4b60 	.word	0xf6bb4b60
 801f66c:	eaa127fa 	.word	0xeaa127fa
 801f670:	d9d4d039 	.word	0xd9d4d039
 801f674:	c4ac5665 	.word	0xc4ac5665
 801f678:	f4292244 	.word	0xf4292244
 801f67c:	fc93a039 	.word	0xfc93a039
 801f680:	655b59c3 	.word	0x655b59c3
 801f684:	8f0ccc92 	.word	0x8f0ccc92
 801f688:	85845dd1 	.word	0x85845dd1
 801f68c:	6fa87e4f 	.word	0x6fa87e4f
 801f690:	fe2ce6e0 	.word	0xfe2ce6e0
 801f694:	a3014314 	.word	0xa3014314
 801f698:	4e0811a1 	.word	0x4e0811a1
 801f69c:	f7537e82 	.word	0xf7537e82
 801f6a0:	bd3af235 	.word	0xbd3af235
 801f6a4:	2ad7d2bb 	.word	0x2ad7d2bb
 801f6a8:	eb86d391 	.word	0xeb86d391
 801f6ac:	fde5380c 	.word	0xfde5380c
 801f6b0:	4bdecfa9 	.word	0x4bdecfa9
 801f6b4:	bebfbc70 	.word	0xbebfbc70
 801f6b8:	289b7ec6 	.word	0x289b7ec6
 801f6bc:	d4ef3085 	.word	0xd4ef3085
 801f6c0:	04881d05 	.word	0x04881d05
 801f6c4:	e6db99e5 	.word	0xe6db99e5
 801f6c8:	1fa27cf8 	.word	0x1fa27cf8
 801f6cc:	432aff97 	.word	0x432aff97
 801f6d0:	ab9423a7 	.word	0xab9423a7

0801f6d4 <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 801f6d4:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 801f6d6:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 801f6d8:	3001      	adds	r0, #1
 801f6da:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 801f6dc:	2a7f      	cmp	r2, #127	@ 0x7f
 801f6de:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 801f6e2:	d8f9      	bhi.n	801f6d8 <varint_size+0x4>
  return bytes_needed;
}
 801f6e4:	4770      	bx	lr

0801f6e6 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 801f6e6:	b500      	push	{lr}
 801f6e8:	4686      	mov	lr, r0
  size_t len = 0;
 801f6ea:	2300      	movs	r3, #0
 801f6ec:	e007      	b.n	801f6fe <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 801f6ee:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 801f6f2:	1c58      	adds	r0, r3, #1
 801f6f4:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 801f6f8:	2a7f      	cmp	r2, #127	@ 0x7f
 801f6fa:	d907      	bls.n	801f70c <encode_varint+0x26>
    buf[len++] = b;
 801f6fc:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 801f6fe:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 801f702:	460a      	mov	r2, r1
 801f704:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 801f706:	2a7f      	cmp	r2, #127	@ 0x7f
 801f708:	d9f3      	bls.n	801f6f2 <encode_varint+0xc>
 801f70a:	e7f0      	b.n	801f6ee <encode_varint+0x8>

  return len;
}
 801f70c:	f85d fb04 	ldr.w	pc, [sp], #4

0801f710 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 801f710:	2300      	movs	r3, #0
 801f712:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 801f714:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 801f718:	2b03      	cmp	r3, #3
 801f71a:	d81d      	bhi.n	801f758 <decode_varint+0x48>
 801f71c:	428b      	cmp	r3, r1
 801f71e:	d219      	bcs.n	801f754 <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 801f720:	b530      	push	{r4, r5, lr}
 801f722:	e003      	b.n	801f72c <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 801f724:	1c58      	adds	r0, r3, #1
 801f726:	e012      	b.n	801f74e <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 801f728:	428b      	cmp	r3, r1
 801f72a:	d211      	bcs.n	801f750 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 801f72c:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 801f730:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 801f734:	6815      	ldr	r5, [r2, #0]
 801f736:	fb0c 5404 	mla	r4, ip, r4, r5
 801f73a:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 801f73c:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 801f740:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 801f744:	d0ee      	beq.n	801f724 <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 801f746:	3301      	adds	r3, #1
 801f748:	2b03      	cmp	r3, #3
 801f74a:	d9ed      	bls.n	801f728 <decode_varint+0x18>
  }

  return 0;
 801f74c:	2000      	movs	r0, #0
}
 801f74e:	bd30      	pop	{r4, r5, pc}
  return 0;
 801f750:	2000      	movs	r0, #0
 801f752:	e7fc      	b.n	801f74e <decode_varint+0x3e>
 801f754:	2000      	movs	r0, #0
 801f756:	4770      	bx	lr
 801f758:	2000      	movs	r0, #0
}
 801f75a:	4770      	bx	lr

0801f75c <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 801f75c:	2300      	movs	r3, #0
 801f75e:	2b1a      	cmp	r3, #26
 801f760:	d80b      	bhi.n	801f77a <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 801f762:	4a07      	ldr	r2, [pc, #28]	@ (801f780 <mqtt_prop_type_by_id+0x24>)
 801f764:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801f768:	4282      	cmp	r2, r0
 801f76a:	d001      	beq.n	801f770 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 801f76c:	3301      	adds	r3, #1
 801f76e:	e7f6      	b.n	801f75e <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 801f770:	4a03      	ldr	r2, [pc, #12]	@ (801f780 <mqtt_prop_type_by_id+0x24>)
 801f772:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f776:	7858      	ldrb	r0, [r3, #1]
 801f778:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 801f77a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 801f77e:	4770      	bx	lr
 801f780:	08037c64 	.word	0x08037c64

0801f784 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 801f784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f788:	4606      	mov	r6, r0
 801f78a:	4688      	mov	r8, r1
  size_t i, size = 0;
 801f78c:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 801f78e:	462c      	mov	r4, r5
 801f790:	e005      	b.n	801f79e <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 801f792:	697d      	ldr	r5, [r7, #20]
 801f794:	68fb      	ldr	r3, [r7, #12]
 801f796:	441d      	add	r5, r3
 801f798:	444d      	add	r5, r9
 801f79a:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 801f79c:	3401      	adds	r4, #1
 801f79e:	4544      	cmp	r4, r8
 801f7a0:	d231      	bcs.n	801f806 <get_properties_length+0x82>
    size++;  // identifier
 801f7a2:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801f7a6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801f7aa:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 801f7ae:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 801f7b2:	f7ff ffd3 	bl	801f75c <mqtt_prop_type_by_id>
 801f7b6:	2806      	cmp	r0, #6
 801f7b8:	d824      	bhi.n	801f804 <get_properties_length+0x80>
 801f7ba:	a301      	add	r3, pc, #4	@ (adr r3, 801f7c0 <get_properties_length+0x3c>)
 801f7bc:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 801f7c0:	0801f801 	.word	0x0801f801
 801f7c4:	0801f7dd 	.word	0x0801f7dd
 801f7c8:	0801f793 	.word	0x0801f793
 801f7cc:	0801f7e5 	.word	0x0801f7e5
 801f7d0:	0801f7ed 	.word	0x0801f7ed
 801f7d4:	0801f7f9 	.word	0x0801f7f9
 801f7d8:	0801f7fd 	.word	0x0801f7fd
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801f7dc:	697d      	ldr	r5, [r7, #20]
 801f7de:	444d      	add	r5, r9
 801f7e0:	3502      	adds	r5, #2
        break;
 801f7e2:	e7db      	b.n	801f79c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801f7e4:	697d      	ldr	r5, [r7, #20]
 801f7e6:	444d      	add	r5, r9
 801f7e8:	3502      	adds	r5, #2
        break;
 801f7ea:	e7d7      	b.n	801f79c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 801f7ec:	6878      	ldr	r0, [r7, #4]
 801f7ee:	f7ff ff71 	bl	801f6d4 <varint_size>
 801f7f2:	eb00 0509 	add.w	r5, r0, r9
        break;
 801f7f6:	e7d1      	b.n	801f79c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 801f7f8:	3505      	adds	r5, #5
        break;
 801f7fa:	e7cf      	b.n	801f79c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 801f7fc:	3503      	adds	r5, #3
        break;
 801f7fe:	e7cd      	b.n	801f79c <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 801f800:	3502      	adds	r5, #2
        break;
 801f802:	e7cb      	b.n	801f79c <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801f804:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 801f806:	4628      	mov	r0, r5
 801f808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801f80c <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 801f80c:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 801f80e:	f7ff ffb9 	bl	801f784 <get_properties_length>
 801f812:	4604      	mov	r4, r0
  size += varint_size(size);
 801f814:	f7ff ff5e 	bl	801f6d4 <varint_size>
  return size;
}
 801f818:	4420      	add	r0, r4
 801f81a:	bd10      	pop	{r4, pc}

0801f81c <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 801f81c:	b410      	push	{r4}
 801f81e:	b085      	sub	sp, #20
 801f820:	466b      	mov	r3, sp
 801f822:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 801f826:	2300      	movs	r3, #0
 801f828:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 801f82a:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 801f82c:	9901      	ldr	r1, [sp, #4]
 801f82e:	4299      	cmp	r1, r3
 801f830:	d92c      	bls.n	801f88c <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 801f832:	9c00      	ldr	r4, [sp, #0]
 801f834:	5ce1      	ldrb	r1, [r4, r3]
 801f836:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 801f83a:	b2c0      	uxtb	r0, r0
 801f83c:	2809      	cmp	r0, #9
 801f83e:	d812      	bhi.n	801f866 <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 801f840:	f10c 0010 	add.w	r0, ip, #16
 801f844:	4468      	add	r0, sp
 801f846:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 801f84a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801f84e:	3930      	subs	r1, #48	@ 0x30
 801f850:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 801f854:	29ff      	cmp	r1, #255	@ 0xff
 801f856:	dc28      	bgt.n	801f8aa <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 801f858:	f10c 0010 	add.w	r0, ip, #16
 801f85c:	4468      	add	r0, sp
 801f85e:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 801f862:	3301      	adds	r3, #1
 801f864:	e7e2      	b.n	801f82c <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 801f866:	292e      	cmp	r1, #46	@ 0x2e
 801f868:	d121      	bne.n	801f8ae <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 801f86a:	f1bc 0f02 	cmp.w	ip, #2
 801f86e:	d820      	bhi.n	801f8b2 <mg_aton4+0x96>
 801f870:	b923      	cbnz	r3, 801f87c <mg_aton4+0x60>
 801f872:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 801f874:	b005      	add	sp, #20
 801f876:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f87a:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 801f87c:	441c      	add	r4, r3
 801f87e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801f882:	292e      	cmp	r1, #46	@ 0x2e
 801f884:	d017      	beq.n	801f8b6 <mg_aton4+0x9a>
      num_dots++;
 801f886:	f10c 0c01 	add.w	ip, ip, #1
 801f88a:	e7ea      	b.n	801f862 <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 801f88c:	f1bc 0f03 	cmp.w	ip, #3
 801f890:	d113      	bne.n	801f8ba <mg_aton4+0x9e>
 801f892:	9900      	ldr	r1, [sp, #0]
 801f894:	4419      	add	r1, r3
 801f896:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 801f89a:	2b2e      	cmp	r3, #46	@ 0x2e
 801f89c:	d00f      	beq.n	801f8be <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 801f89e:	9b03      	ldr	r3, [sp, #12]
 801f8a0:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 801f8a2:	2300      	movs	r3, #0
 801f8a4:	74d3      	strb	r3, [r2, #19]
  return true;
 801f8a6:	2001      	movs	r0, #1
 801f8a8:	e7e4      	b.n	801f874 <mg_aton4+0x58>
      if (octet > 255) return false;
 801f8aa:	2000      	movs	r0, #0
 801f8ac:	e7e2      	b.n	801f874 <mg_aton4+0x58>
      return false;
 801f8ae:	2000      	movs	r0, #0
 801f8b0:	e7e0      	b.n	801f874 <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 801f8b2:	2000      	movs	r0, #0
 801f8b4:	e7de      	b.n	801f874 <mg_aton4+0x58>
 801f8b6:	2000      	movs	r0, #0
 801f8b8:	e7dc      	b.n	801f874 <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 801f8ba:	2000      	movs	r0, #0
 801f8bc:	e7da      	b.n	801f874 <mg_aton4+0x58>
 801f8be:	2000      	movs	r0, #0
 801f8c0:	e7d8      	b.n	801f874 <mg_aton4+0x58>

0801f8c2 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 801f8c2:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 801f8c4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801f8c6:	b103      	cbz	r3, 801f8ca <mg_tcpip_call+0x8>
 801f8c8:	4798      	blx	r3
}
 801f8ca:	bd08      	pop	{r3, pc}

0801f8cc <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 801f8cc:	2300      	movs	r3, #0
 801f8ce:	e005      	b.n	801f8dc <csumup+0x10>
 801f8d0:	f811 c003 	ldrb.w	ip, [r1, r3]
 801f8d4:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 801f8d8:	4460      	add	r0, ip
 801f8da:	3301      	adds	r3, #1
 801f8dc:	4293      	cmp	r3, r2
 801f8de:	d205      	bcs.n	801f8ec <csumup+0x20>
 801f8e0:	f013 0f01 	tst.w	r3, #1
 801f8e4:	d0f4      	beq.n	801f8d0 <csumup+0x4>
 801f8e6:	f811 c003 	ldrb.w	ip, [r1, r3]
 801f8ea:	e7f5      	b.n	801f8d8 <csumup+0xc>
  return sum;
}
 801f8ec:	4770      	bx	lr

0801f8ee <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 801f8ee:	b538      	push	{r3, r4, r5, lr}
 801f8f0:	4604      	mov	r4, r0
 801f8f2:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 801f8f4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f8f6:	685b      	ldr	r3, [r3, #4]
 801f8f8:	4602      	mov	r2, r0
 801f8fa:	6940      	ldr	r0, [r0, #20]
 801f8fc:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 801f8fe:	4285      	cmp	r5, r0
 801f900:	d000      	beq.n	801f904 <ether_output+0x16>
  return n;
}
 801f902:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 801f904:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801f906:	3301      	adds	r3, #1
 801f908:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 801f90a:	e7fa      	b.n	801f902 <ether_output+0x14>

0801f90c <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 801f90c:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 801f910:	f013 0f28 	tst.w	r3, #40	@ 0x28
 801f914:	d106      	bne.n	801f924 <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 801f916:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 801f918:	b132      	cbz	r2, 801f928 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 801f91a:	f013 0f90 	tst.w	r3, #144	@ 0x90
 801f91e:	d005      	beq.n	801f92c <can_write+0x20>
 801f920:	2000      	movs	r0, #0
 801f922:	4770      	bx	lr
 801f924:	2000      	movs	r0, #0
 801f926:	4770      	bx	lr
 801f928:	2000      	movs	r0, #0
 801f92a:	4770      	bx	lr
 801f92c:	2001      	movs	r0, #1
}
 801f92e:	4770      	bx	lr

0801f930 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 801f930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f934:	4607      	mov	r7, r0
 801f936:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 801f938:	6811      	ldr	r1, [r2, #0]
 801f93a:	1d0b      	adds	r3, r1, #4
 801f93c:	6013      	str	r3, [r2, #0]
 801f93e:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 801f942:	f101 0308 	add.w	r3, r1, #8
 801f946:	6013      	str	r3, [r2, #0]
 801f948:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 801f94c:	2400      	movs	r4, #0
 801f94e:	e00e      	b.n	801f96e <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 801f950:	f818 3004 	ldrb.w	r3, [r8, r4]
 801f954:	091b      	lsrs	r3, r3, #4
 801f956:	4d09      	ldr	r5, [pc, #36]	@ (801f97c <mg_print_hex+0x4c>)
 801f958:	4631      	mov	r1, r6
 801f95a:	5ce8      	ldrb	r0, [r5, r3]
 801f95c:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 801f95e:	f818 3004 	ldrb.w	r3, [r8, r4]
 801f962:	f003 030f 	and.w	r3, r3, #15
 801f966:	4631      	mov	r1, r6
 801f968:	5ce8      	ldrb	r0, [r5, r3]
 801f96a:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 801f96c:	3401      	adds	r4, #1
 801f96e:	454c      	cmp	r4, r9
 801f970:	d3ee      	bcc.n	801f950 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 801f972:	ea4f 0049 	mov.w	r0, r9, lsl #1
 801f976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f97a:	bf00      	nop
 801f97c:	08036438 	.word	0x08036438

0801f980 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 801f980:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801f984:	b2db      	uxtb	r3, r3
 801f986:	2b19      	cmp	r3, #25
 801f988:	d800      	bhi.n	801f98c <mg_tolc+0xc>
 801f98a:	3020      	adds	r0, #32
}
 801f98c:	4770      	bx	lr

0801f98e <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 801f98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f992:	b082      	sub	sp, #8
 801f994:	4605      	mov	r5, r0
 801f996:	9e08      	ldr	r6, [sp, #32]
 801f998:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 801f99a:	0a10      	lsrs	r0, r2, #8
 801f99c:	f88d 0004 	strb.w	r0, [sp, #4]
 801f9a0:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 801f9a4:	00c9      	lsls	r1, r1, #3
 801f9a6:	b249      	sxtb	r1, r1
 801f9a8:	4698      	mov	r8, r3
 801f9aa:	b143      	cbz	r3, 801f9be <w5500_txn+0x30>
 801f9ac:	2304      	movs	r3, #4
 801f9ae:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 801f9b0:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 801f9b4:	686b      	ldr	r3, [r5, #4]
 801f9b6:	6828      	ldr	r0, [r5, #0]
 801f9b8:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 801f9ba:	2400      	movs	r4, #0
 801f9bc:	e00a      	b.n	801f9d4 <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 801f9be:	2300      	movs	r3, #0
 801f9c0:	e7f5      	b.n	801f9ae <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 801f9c2:	68eb      	ldr	r3, [r5, #12]
 801f9c4:	f104 0208 	add.w	r2, r4, #8
 801f9c8:	446a      	add	r2, sp
 801f9ca:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 801f9ce:	6828      	ldr	r0, [r5, #0]
 801f9d0:	4798      	blx	r3
 801f9d2:	3401      	adds	r4, #1
 801f9d4:	2c02      	cmp	r4, #2
 801f9d6:	d9f4      	bls.n	801f9c2 <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 801f9d8:	2400      	movs	r4, #0
 801f9da:	e000      	b.n	801f9de <w5500_txn+0x50>
 801f9dc:	3401      	adds	r4, #1
 801f9de:	42bc      	cmp	r4, r7
 801f9e0:	d208      	bcs.n	801f9f4 <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 801f9e2:	68eb      	ldr	r3, [r5, #12]
 801f9e4:	5d31      	ldrb	r1, [r6, r4]
 801f9e6:	6828      	ldr	r0, [r5, #0]
 801f9e8:	4798      	blx	r3
    if (!wr) p[i] = r;
 801f9ea:	f1b8 0f00 	cmp.w	r8, #0
 801f9ee:	d1f5      	bne.n	801f9dc <w5500_txn+0x4e>
 801f9f0:	5530      	strb	r0, [r6, r4]
 801f9f2:	e7f3      	b.n	801f9dc <w5500_txn+0x4e>
  }
  s->end(s->spi);
 801f9f4:	68ab      	ldr	r3, [r5, #8]
 801f9f6:	6828      	ldr	r0, [r5, #0]
 801f9f8:	4798      	blx	r3
}
 801f9fa:	b002      	add	sp, #8
 801f9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801fa00 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 801fa00:	b510      	push	{r4, lr}
 801fa02:	b082      	sub	sp, #8
 801fa04:	9c04      	ldr	r4, [sp, #16]
 801fa06:	9401      	str	r4, [sp, #4]
 801fa08:	9300      	str	r3, [sp, #0]
 801fa0a:	2301      	movs	r3, #1
 801fa0c:	f7ff ffbf 	bl	801f98e <w5500_txn>
 801fa10:	b002      	add	sp, #8
 801fa12:	bd10      	pop	{r4, pc}

0801fa14 <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 801fa14:	b500      	push	{lr}
 801fa16:	b085      	sub	sp, #20
 801fa18:	f88d 300f 	strb.w	r3, [sp, #15]
 801fa1c:	2301      	movs	r3, #1
 801fa1e:	9300      	str	r3, [sp, #0]
 801fa20:	f10d 030f 	add.w	r3, sp, #15
 801fa24:	f7ff ffec 	bl	801fa00 <w5500_wn>
 801fa28:	b005      	add	sp, #20
 801fa2a:	f85d fb04 	ldr.w	pc, [sp], #4

0801fa2e <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 801fa2e:	b500      	push	{lr}
 801fa30:	b085      	sub	sp, #20
 801fa32:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 801fa36:	f88d c00c 	strb.w	ip, [sp, #12]
 801fa3a:	f88d 300d 	strb.w	r3, [sp, #13]
 801fa3e:	2302      	movs	r3, #2
 801fa40:	9300      	str	r3, [sp, #0]
 801fa42:	ab03      	add	r3, sp, #12
 801fa44:	f7ff ffdc 	bl	801fa00 <w5500_wn>
 801fa48:	b005      	add	sp, #20
 801fa4a:	f85d fb04 	ldr.w	pc, [sp], #4

0801fa4e <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 801fa4e:	b510      	push	{r4, lr}
 801fa50:	b082      	sub	sp, #8
 801fa52:	9c04      	ldr	r4, [sp, #16]
 801fa54:	9401      	str	r4, [sp, #4]
 801fa56:	9300      	str	r3, [sp, #0]
 801fa58:	2300      	movs	r3, #0
 801fa5a:	f7ff ff98 	bl	801f98e <w5500_txn>
 801fa5e:	b002      	add	sp, #8
 801fa60:	bd10      	pop	{r4, pc}

0801fa62 <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 801fa62:	b500      	push	{lr}
 801fa64:	b085      	sub	sp, #20
 801fa66:	2300      	movs	r3, #0
 801fa68:	f88d 300f 	strb.w	r3, [sp, #15]
 801fa6c:	2301      	movs	r3, #1
 801fa6e:	9300      	str	r3, [sp, #0]
 801fa70:	f10d 030f 	add.w	r3, sp, #15
 801fa74:	f7ff ffeb 	bl	801fa4e <w5500_rn>
 801fa78:	f89d 000f 	ldrb.w	r0, [sp, #15]
 801fa7c:	b005      	add	sp, #20
 801fa7e:	f85d fb04 	ldr.w	pc, [sp], #4

0801fa82 <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 801fa82:	b500      	push	{lr}
 801fa84:	b085      	sub	sp, #20
 801fa86:	2300      	movs	r3, #0
 801fa88:	f8ad 300c 	strh.w	r3, [sp, #12]
 801fa8c:	2302      	movs	r3, #2
 801fa8e:	9300      	str	r3, [sp, #0]
 801fa90:	ab03      	add	r3, sp, #12
 801fa92:	f7ff ffdc 	bl	801fa4e <w5500_rn>
 801fa96:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801fa9a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801fa9e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 801faa2:	b005      	add	sp, #20
 801faa4:	f85d fb04 	ldr.w	pc, [sp], #4

0801faa8 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 801faa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801faac:	b083      	sub	sp, #12
 801faae:	4606      	mov	r6, r0
 801fab0:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 801fab2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 801fab4:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 801fab6:	4604      	mov	r4, r0
 801fab8:	2226      	movs	r2, #38	@ 0x26
 801faba:	2101      	movs	r1, #1
 801fabc:	4628      	mov	r0, r5
 801fabe:	f7ff ffe0 	bl	801fa82 <w5500_r2>
 801fac2:	4284      	cmp	r4, r0
 801fac4:	d3f7      	bcc.n	801fab6 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 801fac6:	b91c      	cbnz	r4, 801fad0 <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 801fac8:	4620      	mov	r0, r4
 801faca:	b003      	add	sp, #12
 801facc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 801fad0:	2228      	movs	r2, #40	@ 0x28
 801fad2:	2101      	movs	r1, #1
 801fad4:	4628      	mov	r0, r5
 801fad6:	f7ff ffd4 	bl	801fa82 <w5500_r2>
 801fada:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 801fadc:	4602      	mov	r2, r0
 801fade:	2103      	movs	r1, #3
 801fae0:	4628      	mov	r0, r5
 801fae2:	f7ff ffce 	bl	801fa82 <w5500_r2>
 801fae6:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 801fae8:	fa1f f188 	uxth.w	r1, r8
 801faec:	3102      	adds	r1, #2
 801faee:	4288      	cmp	r0, r1
 801faf0:	dc0e      	bgt.n	801fb10 <w5500_rx+0x68>
 801faf2:	2801      	cmp	r0, #1
 801faf4:	d801      	bhi.n	801fafa <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 801faf6:	2400      	movs	r4, #0
 801faf8:	e00b      	b.n	801fb12 <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 801fafa:	1e84      	subs	r4, r0, #2
 801fafc:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 801fafe:	1cba      	adds	r2, r7, #2
 801fb00:	9400      	str	r4, [sp, #0]
 801fb02:	4633      	mov	r3, r6
 801fb04:	b292      	uxth	r2, r2
 801fb06:	2103      	movs	r1, #3
 801fb08:	4628      	mov	r0, r5
 801fb0a:	f7ff ffa0 	bl	801fa4e <w5500_rn>
 801fb0e:	e000      	b.n	801fb12 <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 801fb10:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 801fb12:	eb07 0309 	add.w	r3, r7, r9
 801fb16:	b29b      	uxth	r3, r3
 801fb18:	2228      	movs	r2, #40	@ 0x28
 801fb1a:	2101      	movs	r1, #1
 801fb1c:	4628      	mov	r0, r5
 801fb1e:	f7ff ff86 	bl	801fa2e <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 801fb22:	2340      	movs	r3, #64	@ 0x40
 801fb24:	2201      	movs	r2, #1
 801fb26:	4611      	mov	r1, r2
 801fb28:	4628      	mov	r0, r5
 801fb2a:	f7ff ff73 	bl	801fa14 <w5500_w1>
 801fb2e:	e7cb      	b.n	801fac8 <w5500_rx+0x20>

0801fb30 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 801fb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb34:	b082      	sub	sp, #8
 801fb36:	4680      	mov	r8, r0
 801fb38:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 801fb3a:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 801fb3c:	b28f      	uxth	r7, r1
 801fb3e:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 801fb40:	e004      	b.n	801fb4c <w5500_tx+0x1c>
 801fb42:	2220      	movs	r2, #32
 801fb44:	2101      	movs	r1, #1
 801fb46:	4630      	mov	r0, r6
 801fb48:	f7ff ff9b 	bl	801fa82 <w5500_r2>
 801fb4c:	42b8      	cmp	r0, r7
 801fb4e:	d3f8      	bcc.n	801fb42 <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 801fb50:	2224      	movs	r2, #36	@ 0x24
 801fb52:	2101      	movs	r1, #1
 801fb54:	4630      	mov	r0, r6
 801fb56:	f7ff ff94 	bl	801fa82 <w5500_r2>
 801fb5a:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 801fb5c:	b2ad      	uxth	r5, r5
 801fb5e:	9500      	str	r5, [sp, #0]
 801fb60:	4643      	mov	r3, r8
 801fb62:	4602      	mov	r2, r0
 801fb64:	2102      	movs	r1, #2
 801fb66:	4630      	mov	r0, r6
 801fb68:	f7ff ff4a 	bl	801fa00 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 801fb6c:	193b      	adds	r3, r7, r4
 801fb6e:	b29b      	uxth	r3, r3
 801fb70:	2224      	movs	r2, #36	@ 0x24
 801fb72:	2101      	movs	r1, #1
 801fb74:	4630      	mov	r0, r6
 801fb76:	f7ff ff5a 	bl	801fa2e <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 801fb7a:	2320      	movs	r3, #32
 801fb7c:	2201      	movs	r2, #1
 801fb7e:	4611      	mov	r1, r2
 801fb80:	4630      	mov	r0, r6
 801fb82:	f7ff ff47 	bl	801fa14 <w5500_w1>
  for (i = 0; i < 40; i++) {
 801fb86:	2400      	movs	r4, #0
 801fb88:	e004      	b.n	801fb94 <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 801fb8a:	f015 0f18 	tst.w	r5, #24
 801fb8e:	d116      	bne.n	801fbbe <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 801fb90:	3401      	adds	r4, #1
 801fb92:	b2a4      	uxth	r4, r4
 801fb94:	2c27      	cmp	r4, #39	@ 0x27
 801fb96:	d812      	bhi.n	801fbbe <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 801fb98:	2202      	movs	r2, #2
 801fb9a:	2101      	movs	r1, #1
 801fb9c:	4630      	mov	r0, r6
 801fb9e:	f7ff ff60 	bl	801fa62 <w5500_r1>
    if (ir == 0) continue;
 801fba2:	4605      	mov	r5, r0
 801fba4:	2800      	cmp	r0, #0
 801fba6:	d0f3      	beq.n	801fb90 <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 801fba8:	4603      	mov	r3, r0
 801fbaa:	2202      	movs	r2, #2
 801fbac:	2101      	movs	r1, #1
 801fbae:	4630      	mov	r0, r6
 801fbb0:	f7ff ff30 	bl	801fa14 <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 801fbb4:	f015 0f08 	tst.w	r5, #8
 801fbb8:	d0e7      	beq.n	801fb8a <w5500_tx+0x5a>
 801fbba:	2700      	movs	r7, #0
 801fbbc:	e7e5      	b.n	801fb8a <w5500_tx+0x5a>
  }
  return len;
}
 801fbbe:	4638      	mov	r0, r7
 801fbc0:	b002      	add	sp, #8
 801fbc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801fbc6 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 801fbc6:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 801fbc8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 801fbca:	68a3      	ldr	r3, [r4, #8]
 801fbcc:	6820      	ldr	r0, [r4, #0]
 801fbce:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 801fbd0:	2380      	movs	r3, #128	@ 0x80
 801fbd2:	2200      	movs	r2, #0
 801fbd4:	4611      	mov	r1, r2
 801fbd6:	4620      	mov	r0, r4
 801fbd8:	f7ff ff1c 	bl	801fa14 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 801fbdc:	2300      	movs	r3, #0
 801fbde:	222e      	movs	r2, #46	@ 0x2e
 801fbe0:	4619      	mov	r1, r3
 801fbe2:	4620      	mov	r0, r4
 801fbe4:	f7ff ff16 	bl	801fa14 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 801fbe8:	23f8      	movs	r3, #248	@ 0xf8
 801fbea:	222e      	movs	r2, #46	@ 0x2e
 801fbec:	2100      	movs	r1, #0
 801fbee:	4620      	mov	r0, r4
 801fbf0:	f7ff ff10 	bl	801fa14 <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 801fbf4:	2310      	movs	r3, #16
 801fbf6:	221e      	movs	r2, #30
 801fbf8:	2101      	movs	r1, #1
 801fbfa:	4620      	mov	r0, r4
 801fbfc:	f7ff ff0a 	bl	801fa14 <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 801fc00:	2310      	movs	r3, #16
 801fc02:	221f      	movs	r2, #31
 801fc04:	2101      	movs	r1, #1
 801fc06:	4620      	mov	r0, r4
 801fc08:	f7ff ff04 	bl	801fa14 <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 801fc0c:	2304      	movs	r3, #4
 801fc0e:	2200      	movs	r2, #0
 801fc10:	2101      	movs	r1, #1
 801fc12:	4620      	mov	r0, r4
 801fc14:	f7ff fefe 	bl	801fa14 <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 801fc18:	2301      	movs	r3, #1
 801fc1a:	461a      	mov	r2, r3
 801fc1c:	4619      	mov	r1, r3
 801fc1e:	4620      	mov	r0, r4
 801fc20:	f7ff fef8 	bl	801fa14 <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 801fc24:	2203      	movs	r2, #3
 801fc26:	2101      	movs	r1, #1
 801fc28:	4620      	mov	r0, r4
 801fc2a:	f7ff ff1a 	bl	801fa62 <w5500_r1>
}
 801fc2e:	2842      	cmp	r0, #66	@ 0x42
 801fc30:	bf14      	ite	ne
 801fc32:	2000      	movne	r0, #0
 801fc34:	2001      	moveq	r0, #1
 801fc36:	bd10      	pop	{r4, pc}

0801fc38 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 801fc38:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 801fc3a:	222e      	movs	r2, #46	@ 0x2e
 801fc3c:	2100      	movs	r1, #0
 801fc3e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801fc40:	f7ff ff0f 	bl	801fa62 <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 801fc44:	f000 0001 	and.w	r0, r0, #1
 801fc48:	bd08      	pop	{r3, pc}

0801fc4a <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 801fc4a:	b508      	push	{r3, lr}
 801fc4c:	4602      	mov	r2, r0
 801fc4e:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 801fc50:	e000      	b.n	801fc54 <mg_dns_free+0xa>
 801fc52:	461a      	mov	r2, r3
 801fc54:	6813      	ldr	r3, [r2, #0]
 801fc56:	4283      	cmp	r3, r0
 801fc58:	d1fb      	bne.n	801fc52 <mg_dns_free+0x8>
 801fc5a:	6803      	ldr	r3, [r0, #0]
 801fc5c:	6013      	str	r3, [r2, #0]
  free(d);
 801fc5e:	f7f9 fabd 	bl	80191dc <vPortFree>
}
 801fc62:	bd08      	pop	{r3, pc}

0801fc64 <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 801fc64:	b082      	sub	sp, #8
 801fc66:	ab02      	add	r3, sp, #8
 801fc68:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 801fc6c:	b111      	cbz	r1, 801fc74 <mg_atone+0x10>
 801fc6e:	2000      	movs	r0, #0
}
 801fc70:	b002      	add	sp, #8
 801fc72:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 801fc74:	6011      	str	r1, [r2, #0]
 801fc76:	6051      	str	r1, [r2, #4]
 801fc78:	6091      	str	r1, [r2, #8]
 801fc7a:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 801fc7c:	74d1      	strb	r1, [r2, #19]
  return true;
 801fc7e:	2001      	movs	r0, #1
 801fc80:	e7f6      	b.n	801fc70 <mg_atone+0xc>

0801fc82 <urlparse>:
static struct url urlparse(const char *url) {
 801fc82:	b510      	push	{r4, lr}
 801fc84:	b088      	sub	sp, #32
 801fc86:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 801fc88:	2200      	movs	r2, #0
 801fc8a:	9201      	str	r2, [sp, #4]
 801fc8c:	9202      	str	r2, [sp, #8]
 801fc8e:	9203      	str	r2, [sp, #12]
 801fc90:	9204      	str	r2, [sp, #16]
 801fc92:	9205      	str	r2, [sp, #20]
 801fc94:	9206      	str	r2, [sp, #24]
 801fc96:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 801fc98:	e00f      	b.n	801fcba <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 801fc9a:	b19a      	cbz	r2, 801fcc4 <urlparse+0x42>
 801fc9c:	9804      	ldr	r0, [sp, #16]
 801fc9e:	b988      	cbnz	r0, 801fcc4 <urlparse+0x42>
 801fca0:	1888      	adds	r0, r1, r2
 801fca2:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 801fca6:	282f      	cmp	r0, #47	@ 0x2f
 801fca8:	d10c      	bne.n	801fcc4 <urlparse+0x42>
      u.host = i + 1;
 801fcaa:	1c53      	adds	r3, r2, #1
 801fcac:	9304      	str	r3, [sp, #16]
      u.port = 0;
 801fcae:	2300      	movs	r3, #0
 801fcb0:	9305      	str	r3, [sp, #20]
 801fcb2:	e001      	b.n	801fcb8 <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 801fcb4:	2300      	movs	r3, #0
 801fcb6:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 801fcb8:	3201      	adds	r2, #1
 801fcba:	5c8b      	ldrb	r3, [r1, r2]
 801fcbc:	2b00      	cmp	r3, #0
 801fcbe:	d02c      	beq.n	801fd1a <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 801fcc0:	2b2f      	cmp	r3, #47	@ 0x2f
 801fcc2:	d0ea      	beq.n	801fc9a <urlparse+0x18>
    } else if (url[i] == ']') {
 801fcc4:	2b5d      	cmp	r3, #93	@ 0x5d
 801fcc6:	d0f5      	beq.n	801fcb4 <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 801fcc8:	2b3a      	cmp	r3, #58	@ 0x3a
 801fcca:	d00b      	beq.n	801fce4 <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 801fccc:	2b40      	cmp	r3, #64	@ 0x40
 801fcce:	d012      	beq.n	801fcf6 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 801fcd0:	2b2f      	cmp	r3, #47	@ 0x2f
 801fcd2:	d1f1      	bne.n	801fcb8 <urlparse+0x36>
 801fcd4:	9b04      	ldr	r3, [sp, #16]
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	d0ee      	beq.n	801fcb8 <urlparse+0x36>
 801fcda:	9b06      	ldr	r3, [sp, #24]
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	d1eb      	bne.n	801fcb8 <urlparse+0x36>
      u.uri = i;
 801fce0:	9206      	str	r2, [sp, #24]
 801fce2:	e7e9      	b.n	801fcb8 <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 801fce4:	9805      	ldr	r0, [sp, #20]
 801fce6:	2800      	cmp	r0, #0
 801fce8:	d1f0      	bne.n	801fccc <urlparse+0x4a>
 801fcea:	9806      	ldr	r0, [sp, #24]
 801fcec:	2800      	cmp	r0, #0
 801fcee:	d1ed      	bne.n	801fccc <urlparse+0x4a>
      u.port = i + 1;
 801fcf0:	1c53      	adds	r3, r2, #1
 801fcf2:	9305      	str	r3, [sp, #20]
 801fcf4:	e7e0      	b.n	801fcb8 <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 801fcf6:	9802      	ldr	r0, [sp, #8]
 801fcf8:	2800      	cmp	r0, #0
 801fcfa:	d1e9      	bne.n	801fcd0 <urlparse+0x4e>
 801fcfc:	9803      	ldr	r0, [sp, #12]
 801fcfe:	2800      	cmp	r0, #0
 801fd00:	d1e6      	bne.n	801fcd0 <urlparse+0x4e>
 801fd02:	9806      	ldr	r0, [sp, #24]
 801fd04:	2800      	cmp	r0, #0
 801fd06:	d1e3      	bne.n	801fcd0 <urlparse+0x4e>
      u.user = u.host;
 801fd08:	9b04      	ldr	r3, [sp, #16]
 801fd0a:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 801fd0c:	9b05      	ldr	r3, [sp, #20]
 801fd0e:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 801fd10:	1c53      	adds	r3, r2, #1
 801fd12:	9304      	str	r3, [sp, #16]
      u.port = 0;
 801fd14:	2300      	movs	r3, #0
 801fd16:	9305      	str	r3, [sp, #20]
 801fd18:	e7ce      	b.n	801fcb8 <urlparse+0x36>
  u.end = i;
 801fd1a:	9207      	str	r2, [sp, #28]
  return u;
 801fd1c:	46a4      	mov	ip, r4
 801fd1e:	f10d 0e04 	add.w	lr, sp, #4
 801fd22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801fd26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801fd2a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801fd2e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 801fd32:	4620      	mov	r0, r4
 801fd34:	b008      	add	sp, #32
 801fd36:	bd10      	pop	{r4, pc}

0801fd38 <mg_dns_parse_name_depth>:
                                      int depth) {
 801fd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd3c:	b085      	sub	sp, #20
 801fd3e:	4681      	mov	r9, r0
 801fd40:	4688      	mov	r8, r1
 801fd42:	4693      	mov	fp, r2
 801fd44:	469a      	mov	sl, r3
 801fd46:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801fd48:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 801fd4a:	b11f      	cbz	r7, 801fd54 <mg_dns_parse_name_depth+0x1c>
 801fd4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fd4e:	b90b      	cbnz	r3, 801fd54 <mg_dns_parse_name_depth+0x1c>
 801fd50:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 801fd54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fd56:	2b05      	cmp	r3, #5
 801fd58:	dc4f      	bgt.n	801fdfa <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 801fd5a:	2600      	movs	r6, #0
 801fd5c:	e02f      	b.n	801fdbe <mg_dns_parse_name_depth+0x86>
      i++;
 801fd5e:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 801fd60:	2f00      	cmp	r7, #0
 801fd62:	d04b      	beq.n	801fdfc <mg_dns_parse_name_depth+0xc4>
 801fd64:	3f01      	subs	r7, #1
 801fd66:	2300      	movs	r3, #0
 801fd68:	f80a 3007 	strb.w	r3, [sl, r7]
 801fd6c:	e046      	b.n	801fdfc <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 801fd6e:	0222      	lsls	r2, r4, #8
 801fd70:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 801fd74:	f819 3001 	ldrb.w	r3, [r9, r1]
 801fd78:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 801fd7a:	1c53      	adds	r3, r2, #1
 801fd7c:	4543      	cmp	r3, r8
 801fd7e:	d203      	bcs.n	801fd88 <mg_dns_parse_name_depth+0x50>
 801fd80:	f819 3002 	ldrb.w	r3, [r9, r2]
 801fd84:	2b3f      	cmp	r3, #63	@ 0x3f
 801fd86:	d901      	bls.n	801fd8c <mg_dns_parse_name_depth+0x54>
      i += 2;
 801fd88:	3602      	adds	r6, #2
      break;
 801fd8a:	e7e9      	b.n	801fd60 <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 801fd8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fd8e:	3301      	adds	r3, #1
 801fd90:	9302      	str	r3, [sp, #8]
 801fd92:	9501      	str	r5, [sp, #4]
 801fd94:	9700      	str	r7, [sp, #0]
 801fd96:	4653      	mov	r3, sl
 801fd98:	4641      	mov	r1, r8
 801fd9a:	4648      	mov	r0, r9
 801fd9c:	f7ff ffcc 	bl	801fd38 <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 801fda0:	2800      	cmp	r0, #0
 801fda2:	d1f1      	bne.n	801fd88 <mg_dns_parse_name_depth+0x50>
        return 0;
 801fda4:	4606      	mov	r6, r0
 801fda6:	e029      	b.n	801fdfc <mg_dns_parse_name_depth+0xc4>
 801fda8:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 801fdaa:	1905      	adds	r5, r0, r4
 801fdac:	42bd      	cmp	r5, r7
 801fdae:	d31e      	bcc.n	801fdee <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 801fdb0:	4426      	add	r6, r4
 801fdb2:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 801fdb4:	42bd      	cmp	r5, r7
 801fdb6:	d202      	bcs.n	801fdbe <mg_dns_parse_name_depth+0x86>
 801fdb8:	2300      	movs	r3, #0
 801fdba:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 801fdbe:	eb06 030b 	add.w	r3, r6, fp
 801fdc2:	1c59      	adds	r1, r3, #1
 801fdc4:	4541      	cmp	r1, r8
 801fdc6:	d2cb      	bcs.n	801fd60 <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 801fdc8:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 801fdcc:	2c00      	cmp	r4, #0
 801fdce:	d0c6      	beq.n	801fd5e <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 801fdd0:	2c3f      	cmp	r4, #63	@ 0x3f
 801fdd2:	d8cc      	bhi.n	801fd6e <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 801fdd4:	4423      	add	r3, r4
 801fdd6:	3301      	adds	r3, #1
 801fdd8:	4543      	cmp	r3, r8
 801fdda:	d213      	bcs.n	801fe04 <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 801fddc:	2d00      	cmp	r5, #0
 801fdde:	d0e3      	beq.n	801fda8 <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 801fde0:	42bd      	cmp	r5, r7
 801fde2:	d202      	bcs.n	801fdea <mg_dns_parse_name_depth+0xb2>
 801fde4:	232e      	movs	r3, #46	@ 0x2e
 801fde6:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 801fdea:	1c68      	adds	r0, r5, #1
 801fdec:	e7dd      	b.n	801fdaa <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 801fdee:	4622      	mov	r2, r4
 801fdf0:	4449      	add	r1, r9
 801fdf2:	4450      	add	r0, sl
 801fdf4:	f00b f8b0 	bl	802af58 <memcpy>
 801fdf8:	e7da      	b.n	801fdb0 <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 801fdfa:	2600      	movs	r6, #0
}
 801fdfc:	4630      	mov	r0, r6
 801fdfe:	b005      	add	sp, #20
 801fe00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 801fe04:	2600      	movs	r6, #0
 801fe06:	e7f9      	b.n	801fdfc <mg_dns_parse_name_depth+0xc4>

0801fe08 <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 801fe08:	b510      	push	{r4, lr}
 801fe0a:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 801fe0c:	2400      	movs	r4, #0
 801fe0e:	9402      	str	r4, [sp, #8]
 801fe10:	9401      	str	r4, [sp, #4]
 801fe12:	9c06      	ldr	r4, [sp, #24]
 801fe14:	9400      	str	r4, [sp, #0]
 801fe16:	f7ff ff8f 	bl	801fd38 <mg_dns_parse_name_depth>
}
 801fe1a:	b004      	add	sp, #16
 801fe1c:	bd10      	pop	{r4, pc}

0801fe1e <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801fe1e:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801fe20:	fb01 f400 	mul.w	r4, r1, r0
 801fe24:	4620      	mov	r0, r4
 801fe26:	f7f9 f957 	bl	80190d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801fe2a:	4605      	mov	r5, r0
 801fe2c:	b118      	cbz	r0, 801fe36 <mg_calloc+0x18>
 801fe2e:	4622      	mov	r2, r4
 801fe30:	2100      	movs	r1, #0
 801fe32:	f009 fe55 	bl	8029ae0 <memset>
}
 801fe36:	4628      	mov	r0, r5
 801fe38:	bd38      	pop	{r3, r4, r5, pc}

0801fe3a <getpeer>:
                                     bool lsn) {
 801fe3a:	b570      	push	{r4, r5, r6, lr}
 801fe3c:	460d      	mov	r5, r1
 801fe3e:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 801fe40:	6804      	ldr	r4, [r0, #0]
 801fe42:	e000      	b.n	801fe46 <getpeer+0xc>
 801fe44:	6824      	ldr	r4, [r4, #0]
 801fe46:	b364      	cbz	r4, 801fea2 <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 801fe48:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 801fe4c:	f013 0f10 	tst.w	r3, #16
 801fe50:	d008      	beq.n	801fe64 <getpeer+0x2a>
 801fe52:	69a8      	ldr	r0, [r5, #24]
 801fe54:	b130      	cbz	r0, 801fe64 <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 801fe56:	2204      	movs	r2, #4
 801fe58:	f104 011c 	add.w	r1, r4, #28
 801fe5c:	300e      	adds	r0, #14
 801fe5e:	f009 fdab 	bl	80299b8 <memcmp>
    if (c->is_arplooking && pkt->arp &&
 801fe62:	b1f0      	cbz	r0, 801fea2 <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801fe64:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 801fe68:	f013 0301 	ands.w	r3, r3, #1
 801fe6c:	d005      	beq.n	801fe7a <getpeer+0x40>
 801fe6e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 801fe70:	b11a      	cbz	r2, 801fe7a <getpeer+0x40>
 801fe72:	8b21      	ldrh	r1, [r4, #24]
 801fe74:	8852      	ldrh	r2, [r2, #2]
 801fe76:	4291      	cmp	r1, r2
 801fe78:	d013      	beq.n	801fea2 <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d1e2      	bne.n	801fe44 <getpeer+0xa>
 801fe7e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	d0df      	beq.n	801fe44 <getpeer+0xa>
 801fe84:	8b21      	ldrh	r1, [r4, #24]
 801fe86:	885a      	ldrh	r2, [r3, #2]
 801fe88:	4291      	cmp	r1, r2
 801fe8a:	d1db      	bne.n	801fe44 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801fe8c:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 801fe90:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801fe94:	42b2      	cmp	r2, r6
 801fe96:	d1d5      	bne.n	801fe44 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801fe98:	b91e      	cbnz	r6, 801fea2 <getpeer+0x68>
 801fe9a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801fe9c:	881b      	ldrh	r3, [r3, #0]
 801fe9e:	429a      	cmp	r2, r3
 801fea0:	d1d0      	bne.n	801fe44 <getpeer+0xa>
}
 801fea2:	4620      	mov	r0, r4
 801fea4:	bd70      	pop	{r4, r5, r6, pc}

0801fea6 <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 801fea6:	b508      	push	{r3, lr}
  putchar(c);
 801fea8:	f009 f874 	bl	8028f94 <putchar>
}
 801feac:	bd08      	pop	{r3, pc}

0801feae <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 801feae:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 801feb2:	6802      	ldr	r2, [r0, #0]
 801feb4:	6883      	ldr	r3, [r0, #8]
}
 801feb6:	58d0      	ldr	r0, [r2, r3]
 801feb8:	4770      	bx	lr

0801feba <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 801feba:	b570      	push	{r4, r5, r6, lr}
 801febc:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 801febe:	6843      	ldr	r3, [r0, #4]
 801fec0:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 801fec4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801fec6:	e000      	b.n	801feca <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 801fec8:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 801feca:	b139      	cbz	r1, 801fedc <mg_resolve_cancel+0x22>
    tmp = d->next;
 801fecc:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 801fece:	684b      	ldr	r3, [r1, #4]
 801fed0:	42ab      	cmp	r3, r5
 801fed2:	d1f9      	bne.n	801fec8 <mg_resolve_cancel+0xe>
 801fed4:	4630      	mov	r0, r6
 801fed6:	f7ff feb8 	bl	801fc4a <mg_dns_free>
 801feda:	e7f5      	b.n	801fec8 <mg_resolve_cancel+0xe>
}
 801fedc:	bd70      	pop	{r4, r5, r6, pc}

0801fede <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 801fede:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fee0:	b083      	sub	sp, #12
 801fee2:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 801fee4:	1886      	adds	r6, r0, r2
 801fee6:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 801fee8:	f04f 0c00 	mov.w	ip, #0
 801feec:	f8c4 c000 	str.w	ip, [r4]
 801fef0:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 801fef4:	290b      	cmp	r1, #11
 801fef6:	d934      	bls.n	801ff62 <mg_dns_parse_rr+0x84>
 801fef8:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 801fefa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801fefe:	d833      	bhi.n	801ff68 <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 801ff00:	42be      	cmp	r6, r7
 801ff02:	d301      	bcc.n	801ff08 <mg_dns_parse_rr+0x2a>
 801ff04:	2000      	movs	r0, #0
 801ff06:	e02d      	b.n	801ff64 <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 801ff08:	4663      	mov	r3, ip
 801ff0a:	f8cd c000 	str.w	ip, [sp]
 801ff0e:	f7ff ff7b 	bl	801fe08 <mg_dns_parse_name>
 801ff12:	b283      	uxth	r3, r0
 801ff14:	8023      	strh	r3, [r4, #0]
 801ff16:	b34b      	cbz	r3, 801ff6c <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 801ff18:	3304      	adds	r3, #4
 801ff1a:	441e      	add	r6, r3
  if (s > e) return 0;
 801ff1c:	42b7      	cmp	r7, r6
 801ff1e:	d327      	bcc.n	801ff70 <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 801ff20:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 801ff24:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 801ff28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ff2c:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 801ff2e:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 801ff32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ff36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ff3a:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 801ff3c:	b975      	cbnz	r5, 801ff5c <mg_dns_parse_rr+0x7e>
  s += 6;
 801ff3e:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 801ff40:	429f      	cmp	r7, r3
 801ff42:	d317      	bcc.n	801ff74 <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 801ff44:	7931      	ldrb	r1, [r6, #4]
 801ff46:	7972      	ldrb	r2, [r6, #5]
 801ff48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801ff4c:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 801ff4e:	4413      	add	r3, r2
 801ff50:	42bb      	cmp	r3, r7
 801ff52:	d811      	bhi.n	801ff78 <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 801ff54:	fa12 f080 	uxtah	r0, r2, r0
 801ff58:	300a      	adds	r0, #10
 801ff5a:	e003      	b.n	801ff64 <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 801ff5c:	b280      	uxth	r0, r0
 801ff5e:	3004      	adds	r0, #4
 801ff60:	e000      	b.n	801ff64 <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 801ff62:	2000      	movs	r0, #0
}
 801ff64:	b003      	add	sp, #12
 801ff66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 801ff68:	2000      	movs	r0, #0
 801ff6a:	e7fb      	b.n	801ff64 <mg_dns_parse_rr+0x86>
    return 0;
 801ff6c:	2000      	movs	r0, #0
 801ff6e:	e7f9      	b.n	801ff64 <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 801ff70:	2000      	movs	r0, #0
 801ff72:	e7f7      	b.n	801ff64 <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 801ff74:	2000      	movs	r0, #0
 801ff76:	e7f5      	b.n	801ff64 <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 801ff78:	2000      	movs	r0, #0
 801ff7a:	e7f3      	b.n	801ff64 <mg_dns_parse_rr+0x86>

0801ff7c <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 801ff7c:	b570      	push	{r4, r5, r6, lr}
 801ff7e:	4604      	mov	r4, r0
 801ff80:	460d      	mov	r5, r1
 801ff82:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 801ff84:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 801ff88:	b103      	cbz	r3, 801ff8c <mg_call+0x10>
 801ff8a:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 801ff8c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801ff8e:	b11b      	cbz	r3, 801ff98 <mg_call+0x1c>
 801ff90:	4632      	mov	r2, r6
 801ff92:	4629      	mov	r1, r5
 801ff94:	4620      	mov	r0, r4
 801ff96:	4798      	blx	r3
}
 801ff98:	bd70      	pop	{r4, r5, r6, pc}

0801ff9a <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 801ff9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff9c:	4604      	mov	r4, r0
 801ff9e:	460d      	mov	r5, r1
 801ffa0:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 801ffa2:	2108      	movs	r1, #8
 801ffa4:	2001      	movs	r0, #1
 801ffa6:	f7ff ff3a 	bl	801fe1e <mg_calloc>
  if (fd != NULL) {
 801ffaa:	4607      	mov	r7, r0
 801ffac:	b138      	cbz	r0, 801ffbe <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 801ffae:	68a3      	ldr	r3, [r4, #8]
 801ffb0:	4631      	mov	r1, r6
 801ffb2:	4628      	mov	r0, r5
 801ffb4:	4798      	blx	r3
 801ffb6:	4605      	mov	r5, r0
 801ffb8:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 801ffba:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 801ffbc:	b108      	cbz	r0, 801ffc2 <mg_fs_open+0x28>
}
 801ffbe:	4638      	mov	r0, r7
 801ffc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 801ffc2:	4638      	mov	r0, r7
 801ffc4:	f7f9 f90a 	bl	80191dc <vPortFree>
      fd = NULL;
 801ffc8:	462f      	mov	r7, r5
  return fd;
 801ffca:	e7f8      	b.n	801ffbe <mg_fs_open+0x24>

0801ffcc <mg_fs_close>:
  if (fd != NULL) {
 801ffcc:	b148      	cbz	r0, 801ffe2 <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 801ffce:	b510      	push	{r4, lr}
 801ffd0:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 801ffd2:	6843      	ldr	r3, [r0, #4]
 801ffd4:	68db      	ldr	r3, [r3, #12]
 801ffd6:	6800      	ldr	r0, [r0, #0]
 801ffd8:	4798      	blx	r3
    free(fd);
 801ffda:	4620      	mov	r0, r4
 801ffdc:	f7f9 f8fe 	bl	80191dc <vPortFree>
}
 801ffe0:	bd10      	pop	{r4, pc}
 801ffe2:	4770      	bx	lr

0801ffe4 <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 801ffe4:	b510      	push	{r4, lr}
 801ffe6:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 801ffe8:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801ffec:	f7ff ffee 	bl	801ffcc <mg_fs_close>
  c->pfn_data = NULL;
 801fff0:	2200      	movs	r2, #0
 801fff2:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 801fff6:	4b05      	ldr	r3, [pc, #20]	@ (802000c <restore_http_cb+0x28>)
 801fff8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 801fffc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8020000:	f362 13c7 	bfi	r3, r2, #7, #1
 8020004:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8020008:	bd10      	pop	{r4, pc}
 802000a:	bf00      	nop
 802000c:	0802356d 	.word	0x0802356d

08020010 <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8020010:	b470      	push	{r4, r5, r6}
 8020012:	b083      	sub	sp, #12
 8020014:	ab02      	add	r3, sp, #8
 8020016:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 802001a:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 802001c:	e000      	b.n	8020020 <mg_to_size_t+0x10>
 802001e:	3301      	adds	r3, #1
 8020020:	9c01      	ldr	r4, [sp, #4]
 8020022:	429c      	cmp	r4, r3
 8020024:	d905      	bls.n	8020032 <mg_to_size_t+0x22>
 8020026:	9900      	ldr	r1, [sp, #0]
 8020028:	5cc9      	ldrb	r1, [r1, r3]
 802002a:	2920      	cmp	r1, #32
 802002c:	d0f7      	beq.n	802001e <mg_to_size_t+0xe>
 802002e:	2909      	cmp	r1, #9
 8020030:	d0f5      	beq.n	802001e <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 8020032:	429c      	cmp	r4, r3
 8020034:	d906      	bls.n	8020044 <mg_to_size_t+0x34>
 8020036:	9900      	ldr	r1, [sp, #0]
 8020038:	5cc9      	ldrb	r1, [r1, r3]
 802003a:	292d      	cmp	r1, #45	@ 0x2d
 802003c:	d02c      	beq.n	8020098 <mg_to_size_t+0x88>
 802003e:	2500      	movs	r5, #0
 8020040:	4628      	mov	r0, r5
 8020042:	e001      	b.n	8020048 <mg_to_size_t+0x38>
 8020044:	2500      	movs	r5, #0
 8020046:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8020048:	429c      	cmp	r4, r3
 802004a:	d917      	bls.n	802007c <mg_to_size_t+0x6c>
 802004c:	9900      	ldr	r1, [sp, #0]
 802004e:	5cc9      	ldrb	r1, [r1, r3]
 8020050:	292f      	cmp	r1, #47	@ 0x2f
 8020052:	d913      	bls.n	802007c <mg_to_size_t+0x6c>
 8020054:	2939      	cmp	r1, #57	@ 0x39
 8020056:	d811      	bhi.n	802007c <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 8020058:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 802005a:	4e15      	ldr	r6, [pc, #84]	@ (80200b0 <mg_to_size_t+0xa0>)
 802005c:	42b0      	cmp	r0, r6
 802005e:	d81d      	bhi.n	802009c <mg_to_size_t+0x8c>
    result *= 10;
 8020060:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020064:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 8020068:	43ce      	mvns	r6, r1
 802006a:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 802006e:	d317      	bcc.n	80200a0 <mg_to_size_t+0x90>
    result += digit;
 8020070:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 8020074:	3301      	adds	r3, #1
 8020076:	3501      	adds	r5, #1
 8020078:	e7e6      	b.n	8020048 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 802007a:	3301      	adds	r3, #1
 802007c:	429c      	cmp	r4, r3
 802007e:	d905      	bls.n	802008c <mg_to_size_t+0x7c>
 8020080:	9900      	ldr	r1, [sp, #0]
 8020082:	5cc9      	ldrb	r1, [r1, r3]
 8020084:	2920      	cmp	r1, #32
 8020086:	d0f8      	beq.n	802007a <mg_to_size_t+0x6a>
 8020088:	2909      	cmp	r1, #9
 802008a:	d0f6      	beq.n	802007a <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 802008c:	b155      	cbz	r5, 80200a4 <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 802008e:	429c      	cmp	r4, r3
 8020090:	d10c      	bne.n	80200ac <mg_to_size_t+0x9c>
  *val = (size_t) result;
 8020092:	6010      	str	r0, [r2, #0]
  return true;
 8020094:	2001      	movs	r0, #1
 8020096:	e006      	b.n	80200a6 <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 8020098:	2000      	movs	r0, #0
 802009a:	e004      	b.n	80200a6 <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 802009c:	2000      	movs	r0, #0
 802009e:	e002      	b.n	80200a6 <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 80200a0:	2000      	movs	r0, #0
 80200a2:	e000      	b.n	80200a6 <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 80200a4:	2000      	movs	r0, #0
}
 80200a6:	b003      	add	sp, #12
 80200a8:	bc70      	pop	{r4, r5, r6}
 80200aa:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 80200ac:	2000      	movs	r0, #0
 80200ae:	e7fa      	b.n	80200a6 <mg_to_size_t+0x96>
 80200b0:	19999999 	.word	0x19999999

080200b4 <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 80200b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200b6:	4606      	mov	r6, r0
 80200b8:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 80200ba:	2400      	movs	r4, #0
 80200bc:	e007      	b.n	80200ce <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 80200be:	1933      	adds	r3, r6, r4
 80200c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80200c4:	2b0a      	cmp	r3, #10
 80200c6:	d10d      	bne.n	80200e4 <mg_http_get_request_len+0x30>
      return (int) i + 1;
 80200c8:	1c60      	adds	r0, r4, #1
 80200ca:	e01b      	b.n	8020104 <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 80200cc:	3401      	adds	r4, #1
 80200ce:	42bc      	cmp	r4, r7
 80200d0:	d217      	bcs.n	8020102 <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 80200d2:	5d35      	ldrb	r5, [r6, r4]
 80200d4:	4628      	mov	r0, r5
 80200d6:	f7fe f9de 	bl	801e496 <isok>
 80200da:	b1a0      	cbz	r0, 8020106 <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 80200dc:	2c00      	cmp	r4, #0
 80200de:	d0f5      	beq.n	80200cc <mg_http_get_request_len+0x18>
 80200e0:	2d0a      	cmp	r5, #10
 80200e2:	d0ec      	beq.n	80200be <mg_http_get_request_len+0xa>
 80200e4:	2c03      	cmp	r4, #3
 80200e6:	d9f1      	bls.n	80200cc <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 80200e8:	2d0a      	cmp	r5, #10
 80200ea:	d1ef      	bne.n	80200cc <mg_http_get_request_len+0x18>
 80200ec:	1933      	adds	r3, r6, r4
 80200ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80200f2:	2b0d      	cmp	r3, #13
 80200f4:	d1ea      	bne.n	80200cc <mg_http_get_request_len+0x18>
 80200f6:	1933      	adds	r3, r6, r4
 80200f8:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80200fc:	2b0a      	cmp	r3, #10
 80200fe:	d1e5      	bne.n	80200cc <mg_http_get_request_len+0x18>
 8020100:	e7e2      	b.n	80200c8 <mg_http_get_request_len+0x14>
  return 0;
 8020102:	2000      	movs	r0, #0
}
 8020104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 8020106:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802010a:	e7fb      	b.n	8020104 <mg_http_get_request_len+0x50>

0802010c <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 802010c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020110:	4605      	mov	r5, r0
 8020112:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8020114:	4608      	mov	r0, r1
 8020116:	f7f0 f8c3 	bl	80102a0 <strlen>
 802011a:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 802011c:	2400      	movs	r4, #0
 802011e:	e000      	b.n	8020122 <mg_http_get_header+0x16>
 8020120:	3401      	adds	r4, #1
 8020122:	2c1d      	cmp	r4, #29
 8020124:	d819      	bhi.n	802015a <mg_http_get_header+0x4e>
 8020126:	1ca3      	adds	r3, r4, #2
 8020128:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 802012c:	685a      	ldr	r2, [r3, #4]
 802012e:	b17a      	cbz	r2, 8020150 <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8020130:	0123      	lsls	r3, r4, #4
 8020132:	3328      	adds	r3, #40	@ 0x28
 8020134:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8020138:	42b2      	cmp	r2, r6
 802013a:	d1f1      	bne.n	8020120 <mg_http_get_header+0x14>
 802013c:	1ca3      	adds	r3, r4, #2
 802013e:	011b      	lsls	r3, r3, #4
 8020140:	4632      	mov	r2, r6
 8020142:	4639      	mov	r1, r7
 8020144:	58e8      	ldr	r0, [r5, r3]
 8020146:	f7fe f971 	bl	801e42c <mg_ncasecmp>
 802014a:	2800      	cmp	r0, #0
 802014c:	d1e8      	bne.n	8020120 <mg_http_get_header+0x14>
 802014e:	e001      	b.n	8020154 <mg_http_get_header+0x48>
  return NULL;
 8020150:	f04f 0800 	mov.w	r8, #0
}
 8020154:	4640      	mov	r0, r8
 8020156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 802015a:	f04f 0800 	mov.w	r8, #0
 802015e:	e7f9      	b.n	8020154 <mg_http_get_header+0x48>

08020160 <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 8020160:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 8020162:	6880      	ldr	r0, [r0, #8]
 8020164:	f006 ff88 	bl	8027078 <atoi>
}
 8020168:	bd08      	pop	{r3, pc}
	...

0802016c <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 802016c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020170:	b095      	sub	sp, #84	@ 0x54
 8020172:	ac08      	add	r4, sp, #32
 8020174:	e884 0003 	stmia.w	r4, {r0, r1}
 8020178:	9202      	str	r2, [sp, #8]
  const char *s = json.buf;
 802017a:	4606      	mov	r6, r0
  int len = (int) json.len;
 802017c:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 802017e:	469a      	mov	sl, r3
 8020180:	b113      	cbz	r3, 8020188 <mg_json_get+0x1c>
 8020182:	2300      	movs	r3, #0
 8020184:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 8020188:	9b02      	ldr	r3, [sp, #8]
 802018a:	781b      	ldrb	r3, [r3, #0]
 802018c:	2b24      	cmp	r3, #36	@ 0x24
 802018e:	f040 8232 	bne.w	80205f6 <mg_json_get+0x48a>
  int ci = -1, ei = -1;  // Current and expected index in array
 8020192:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020196:	9303      	str	r3, [sp, #12]
 8020198:	9301      	str	r3, [sp, #4]
  int pos = 1;           // Current position in `path`
 802019a:	2301      	movs	r3, #1
 802019c:	9304      	str	r3, [sp, #16]
  int ed = 0;            // Expected depth
 802019e:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 80201a2:	465f      	mov	r7, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 80201a4:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 80201a8:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 80201aa:	465b      	mov	r3, fp
 80201ac:	f8cd a018 	str.w	sl, [sp, #24]
 80201b0:	e190      	b.n	80204d4 <mg_json_get+0x368>
        if (depth == ed) j = i;
 80201b2:	455f      	cmp	r7, fp
 80201b4:	d029      	beq.n	802020a <mg_json_get+0x9e>
        if (c == '{') {
 80201b6:	2d7b      	cmp	r5, #123	@ 0x7b
 80201b8:	d029      	beq.n	802020e <mg_json_get+0xa2>
        } else if (c == '[') {
 80201ba:	2d5b      	cmp	r5, #91	@ 0x5b
 80201bc:	d047      	beq.n	802024e <mg_json_get+0xe2>
        } else if (c == ']' && depth > 0) {  // Empty array
 80201be:	2d5d      	cmp	r5, #93	@ 0x5d
 80201c0:	d07a      	beq.n	80202b8 <mg_json_get+0x14c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 80201c2:	2d74      	cmp	r5, #116	@ 0x74
 80201c4:	f000 80a4 	beq.w	8020310 <mg_json_get+0x1a4>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 80201c8:	2d6e      	cmp	r5, #110	@ 0x6e
 80201ca:	f000 80b0 	beq.w	802032e <mg_json_get+0x1c2>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 80201ce:	2d66      	cmp	r5, #102	@ 0x66
 80201d0:	f000 80bc 	beq.w	802034c <mg_json_get+0x1e0>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 80201d4:	2d2d      	cmp	r5, #45	@ 0x2d
 80201d6:	d005      	beq.n	80201e4 <mg_json_get+0x78>
 80201d8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80201dc:	b2db      	uxtb	r3, r3
 80201de:	2b09      	cmp	r3, #9
 80201e0:	f200 80c3 	bhi.w	802036a <mg_json_get+0x1fe>
          int numlen = 0;
 80201e4:	2300      	movs	r3, #0
 80201e6:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 80201e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80201ea:	eba8 0104 	sub.w	r1, r8, r4
 80201ee:	4648      	mov	r0, r9
 80201f0:	f7fe fdca 	bl	801ed88 <mg_atod>
          i += numlen - 1;
 80201f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80201f6:	3b01      	subs	r3, #1
 80201f8:	441c      	add	r4, r3
        MG_CHECKRET('V');
 80201fa:	455f      	cmp	r7, fp
 80201fc:	f000 80c6 	beq.w	802038c <mg_json_get+0x220>
        if (depth == ed && ei >= 0) ci++;
 8020200:	455f      	cmp	r7, fp
 8020202:	f000 80da 	beq.w	80203ba <mg_json_get+0x24e>
        expecting = S_COMMA_OR_EOO;
 8020206:	2303      	movs	r3, #3
 8020208:	e163      	b.n	80204d2 <mg_json_get+0x366>
        if (depth == ed) j = i;
 802020a:	9405      	str	r4, [sp, #20]
 802020c:	e7d3      	b.n	80201b6 <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802020e:	2f1d      	cmp	r7, #29
 8020210:	f300 81f4 	bgt.w	80205fc <mg_json_get+0x490>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8020214:	455f      	cmp	r7, fp
 8020216:	d007      	beq.n	8020228 <mg_json_get+0xbc>
          nesting[depth++] = c;
 8020218:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802021c:	446b      	add	r3, sp
 802021e:	f803 5c20 	strb.w	r5, [r3, #-32]
 8020222:	3701      	adds	r7, #1
          expecting = S_KEY;
 8020224:	2301      	movs	r3, #1
          break;
 8020226:	e154      	b.n	80204d2 <mg_json_get+0x366>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8020228:	9b02      	ldr	r3, [sp, #8]
 802022a:	9a04      	ldr	r2, [sp, #16]
 802022c:	5c9b      	ldrb	r3, [r3, r2]
 802022e:	2b2e      	cmp	r3, #46	@ 0x2e
 8020230:	d1f2      	bne.n	8020218 <mg_json_get+0xac>
 8020232:	9b01      	ldr	r3, [sp, #4]
 8020234:	9a03      	ldr	r2, [sp, #12]
 8020236:	4293      	cmp	r3, r2
 8020238:	d1ee      	bne.n	8020218 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 802023a:	f10b 0b01 	add.w	fp, fp, #1
 802023e:	9b04      	ldr	r3, [sp, #16]
 8020240:	3301      	adds	r3, #1
 8020242:	9304      	str	r3, [sp, #16]
 8020244:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020248:	9303      	str	r3, [sp, #12]
 802024a:	9301      	str	r3, [sp, #4]
 802024c:	e7e4      	b.n	8020218 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802024e:	2f1d      	cmp	r7, #29
 8020250:	f300 81d7 	bgt.w	8020602 <mg_json_get+0x496>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8020254:	455f      	cmp	r7, fp
 8020256:	d006      	beq.n	8020266 <mg_json_get+0xfa>
          nesting[depth++] = c;
 8020258:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 802025c:	446a      	add	r2, sp
 802025e:	f802 5c20 	strb.w	r5, [r2, #-32]
 8020262:	3701      	adds	r7, #1
          break;
 8020264:	e135      	b.n	80204d2 <mg_json_get+0x366>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8020266:	9a02      	ldr	r2, [sp, #8]
 8020268:	9904      	ldr	r1, [sp, #16]
 802026a:	5c52      	ldrb	r2, [r2, r1]
 802026c:	2a5b      	cmp	r2, #91	@ 0x5b
 802026e:	d1f3      	bne.n	8020258 <mg_json_get+0xec>
 8020270:	9a01      	ldr	r2, [sp, #4]
 8020272:	9903      	ldr	r1, [sp, #12]
 8020274:	428a      	cmp	r2, r1
 8020276:	d1ef      	bne.n	8020258 <mg_json_get+0xec>
            ed++, pos++, ci = 0;
 8020278:	f10b 0b01 	add.w	fp, fp, #1
 802027c:	9804      	ldr	r0, [sp, #16]
 802027e:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8020280:	2100      	movs	r1, #0
 8020282:	f8dd c008 	ldr.w	ip, [sp, #8]
 8020286:	e005      	b.n	8020294 <mg_json_get+0x128>
              ei *= 10;
 8020288:	eb01 0181 	add.w	r1, r1, r1, lsl #2
              ei += path[pos] - '0';
 802028c:	3a30      	subs	r2, #48	@ 0x30
 802028e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8020292:	3001      	adds	r0, #1
 8020294:	f81c 2000 	ldrb.w	r2, [ip, r0]
 8020298:	2a5d      	cmp	r2, #93	@ 0x5d
 802029a:	d001      	beq.n	80202a0 <mg_json_get+0x134>
 802029c:	2a00      	cmp	r2, #0
 802029e:	d1f3      	bne.n	8020288 <mg_json_get+0x11c>
            if (path[pos] != 0) pos++;
 80202a0:	9004      	str	r0, [sp, #16]
 80202a2:	9103      	str	r1, [sp, #12]
 80202a4:	b12a      	cbz	r2, 80202b2 <mg_json_get+0x146>
 80202a6:	4602      	mov	r2, r0
 80202a8:	3201      	adds	r2, #1
 80202aa:	9204      	str	r2, [sp, #16]
            ed++, pos++, ci = 0;
 80202ac:	2200      	movs	r2, #0
 80202ae:	9201      	str	r2, [sp, #4]
 80202b0:	e7d2      	b.n	8020258 <mg_json_get+0xec>
 80202b2:	2200      	movs	r2, #0
 80202b4:	9201      	str	r2, [sp, #4]
 80202b6:	e7cf      	b.n	8020258 <mg_json_get+0xec>
        } else if (c == ']' && depth > 0) {  // Empty array
 80202b8:	2f00      	cmp	r7, #0
 80202ba:	dd82      	ble.n	80201c2 <mg_json_get+0x56>
          MG_EOO(']');
 80202bc:	455f      	cmp	r7, fp
 80202be:	d020      	beq.n	8020302 <mg_json_get+0x196>
 80202c0:	3f01      	subs	r7, #1
 80202c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80202c6:	446b      	add	r3, sp
 80202c8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80202cc:	3302      	adds	r3, #2
 80202ce:	429d      	cmp	r5, r3
 80202d0:	f040 819a 	bne.w	8020608 <mg_json_get+0x49c>
 80202d4:	455f      	cmp	r7, fp
 80202d6:	d190      	bne.n	80201fa <mg_json_get+0x8e>
 80202d8:	9b02      	ldr	r3, [sp, #8]
 80202da:	9a04      	ldr	r2, [sp, #16]
 80202dc:	5c9b      	ldrb	r3, [r3, r2]
 80202de:	2b00      	cmp	r3, #0
 80202e0:	d18b      	bne.n	80201fa <mg_json_get+0x8e>
 80202e2:	9b01      	ldr	r3, [sp, #4]
 80202e4:	9a03      	ldr	r2, [sp, #12]
 80202e6:	4293      	cmp	r3, r2
 80202e8:	d187      	bne.n	80201fa <mg_json_get+0x8e>
 80202ea:	f8dd a018 	ldr.w	sl, [sp, #24]
 80202ee:	f1ba 0f00 	cmp.w	sl, #0
 80202f2:	d004      	beq.n	80202fe <mg_json_get+0x192>
 80202f4:	9b05      	ldr	r3, [sp, #20]
 80202f6:	1ae3      	subs	r3, r4, r3
 80202f8:	3301      	adds	r3, #1
 80202fa:	f8ca 3000 	str.w	r3, [sl]
 80202fe:	9d05      	ldr	r5, [sp, #20]
 8020300:	e175      	b.n	80205ee <mg_json_get+0x482>
 8020302:	9b01      	ldr	r3, [sp, #4]
 8020304:	9a03      	ldr	r2, [sp, #12]
 8020306:	4293      	cmp	r3, r2
 8020308:	d0da      	beq.n	80202c0 <mg_json_get+0x154>
 802030a:	f06f 0502 	mvn.w	r5, #2
 802030e:	e16e      	b.n	80205ee <mg_json_get+0x482>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8020310:	1ce3      	adds	r3, r4, #3
 8020312:	9307      	str	r3, [sp, #28]
 8020314:	4543      	cmp	r3, r8
 8020316:	f6bf af57 	bge.w	80201c8 <mg_json_get+0x5c>
 802031a:	2204      	movs	r2, #4
 802031c:	49a3      	ldr	r1, [pc, #652]	@ (80205ac <mg_json_get+0x440>)
 802031e:	4648      	mov	r0, r9
 8020320:	f009 fb4a 	bl	80299b8 <memcmp>
 8020324:	2800      	cmp	r0, #0
 8020326:	f47f af4f 	bne.w	80201c8 <mg_json_get+0x5c>
          i += 3;
 802032a:	9c07      	ldr	r4, [sp, #28]
 802032c:	e765      	b.n	80201fa <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 802032e:	1ce3      	adds	r3, r4, #3
 8020330:	9307      	str	r3, [sp, #28]
 8020332:	4543      	cmp	r3, r8
 8020334:	f6bf af4b 	bge.w	80201ce <mg_json_get+0x62>
 8020338:	2204      	movs	r2, #4
 802033a:	499d      	ldr	r1, [pc, #628]	@ (80205b0 <mg_json_get+0x444>)
 802033c:	4648      	mov	r0, r9
 802033e:	f009 fb3b 	bl	80299b8 <memcmp>
 8020342:	2800      	cmp	r0, #0
 8020344:	f47f af43 	bne.w	80201ce <mg_json_get+0x62>
          i += 3;
 8020348:	9c07      	ldr	r4, [sp, #28]
 802034a:	e756      	b.n	80201fa <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 802034c:	1d23      	adds	r3, r4, #4
 802034e:	9307      	str	r3, [sp, #28]
 8020350:	4543      	cmp	r3, r8
 8020352:	f6bf af3f 	bge.w	80201d4 <mg_json_get+0x68>
 8020356:	2205      	movs	r2, #5
 8020358:	4996      	ldr	r1, [pc, #600]	@ (80205b4 <mg_json_get+0x448>)
 802035a:	4648      	mov	r0, r9
 802035c:	f009 fb2c 	bl	80299b8 <memcmp>
 8020360:	2800      	cmp	r0, #0
 8020362:	f47f af37 	bne.w	80201d4 <mg_json_get+0x68>
          i += 4;
 8020366:	9c07      	ldr	r4, [sp, #28]
 8020368:	e747      	b.n	80201fa <mg_json_get+0x8e>
        } else if (c == '"') {
 802036a:	2d22      	cmp	r5, #34	@ 0x22
 802036c:	f040 814f 	bne.w	802060e <mg_json_get+0x4a2>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8020370:	f10a 0001 	add.w	r0, sl, #1
 8020374:	eba8 0104 	sub.w	r1, r8, r4
 8020378:	3901      	subs	r1, #1
 802037a:	4430      	add	r0, r6
 802037c:	f7fe fcdf 	bl	801ed3e <mg_pass_string>
          if (n < 0) return n;
 8020380:	1e05      	subs	r5, r0, #0
 8020382:	f2c0 8134 	blt.w	80205ee <mg_json_get+0x482>
          i += n + 1;
 8020386:	3501      	adds	r5, #1
 8020388:	442c      	add	r4, r5
 802038a:	e736      	b.n	80201fa <mg_json_get+0x8e>
        MG_CHECKRET('V');
 802038c:	9b02      	ldr	r3, [sp, #8]
 802038e:	9a04      	ldr	r2, [sp, #16]
 8020390:	5c9b      	ldrb	r3, [r3, r2]
 8020392:	2b00      	cmp	r3, #0
 8020394:	f47f af34 	bne.w	8020200 <mg_json_get+0x94>
 8020398:	9b01      	ldr	r3, [sp, #4]
 802039a:	9a03      	ldr	r2, [sp, #12]
 802039c:	4293      	cmp	r3, r2
 802039e:	f47f af2f 	bne.w	8020200 <mg_json_get+0x94>
 80203a2:	f8dd a018 	ldr.w	sl, [sp, #24]
 80203a6:	f1ba 0f00 	cmp.w	sl, #0
 80203aa:	d004      	beq.n	80203b6 <mg_json_get+0x24a>
 80203ac:	9b05      	ldr	r3, [sp, #20]
 80203ae:	1ae3      	subs	r3, r4, r3
 80203b0:	3301      	adds	r3, #1
 80203b2:	f8ca 3000 	str.w	r3, [sl]
 80203b6:	9d05      	ldr	r5, [sp, #20]
 80203b8:	e119      	b.n	80205ee <mg_json_get+0x482>
        if (depth == ed && ei >= 0) ci++;
 80203ba:	9b03      	ldr	r3, [sp, #12]
 80203bc:	2b00      	cmp	r3, #0
 80203be:	f2c0 8110 	blt.w	80205e2 <mg_json_get+0x476>
 80203c2:	9b01      	ldr	r3, [sp, #4]
 80203c4:	3301      	adds	r3, #1
 80203c6:	9301      	str	r3, [sp, #4]
        expecting = S_COMMA_OR_EOO;
 80203c8:	2303      	movs	r3, #3
 80203ca:	e082      	b.n	80204d2 <mg_json_get+0x366>
        if (c == '"') {
 80203cc:	2d22      	cmp	r5, #34	@ 0x22
 80203ce:	d014      	beq.n	80203fa <mg_json_get+0x28e>
        } else if (c == '}') {  // Empty object
 80203d0:	2d7d      	cmp	r5, #125	@ 0x7d
 80203d2:	f040 8125 	bne.w	8020620 <mg_json_get+0x4b4>
          MG_EOO('}');
 80203d6:	455f      	cmp	r7, fp
 80203d8:	d053      	beq.n	8020482 <mg_json_get+0x316>
 80203da:	3f01      	subs	r7, #1
 80203dc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80203e0:	446b      	add	r3, sp
 80203e2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80203e6:	3302      	adds	r3, #2
 80203e8:	429d      	cmp	r5, r3
 80203ea:	f040 811c 	bne.w	8020626 <mg_json_get+0x4ba>
 80203ee:	455f      	cmp	r7, fp
 80203f0:	d04e      	beq.n	8020490 <mg_json_get+0x324>
          if (depth == ed && ei >= 0) ci++;
 80203f2:	455f      	cmp	r7, fp
 80203f4:	d061      	beq.n	80204ba <mg_json_get+0x34e>
          expecting = S_COMMA_OR_EOO;
 80203f6:	2303      	movs	r3, #3
 80203f8:	e06b      	b.n	80204d2 <mg_json_get+0x366>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80203fa:	f104 0901 	add.w	r9, r4, #1
 80203fe:	44b1      	add	r9, r6
 8020400:	eba8 0104 	sub.w	r1, r8, r4
 8020404:	3901      	subs	r1, #1
 8020406:	4648      	mov	r0, r9
 8020408:	f7fe fc99 	bl	801ed3e <mg_pass_string>
          if (n < 0) return n;
 802040c:	1e05      	subs	r5, r0, #0
 802040e:	f2c0 80ee 	blt.w	80205ee <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8020412:	1c63      	adds	r3, r4, #1
 8020414:	442b      	add	r3, r5
 8020416:	4543      	cmp	r3, r8
 8020418:	f280 80fc 	bge.w	8020614 <mg_json_get+0x4a8>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 802041c:	455f      	cmp	r7, fp
 802041e:	f2c0 80fc 	blt.w	802061a <mg_json_get+0x4ae>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8020422:	d005      	beq.n	8020430 <mg_json_get+0x2c4>
          if (depth == ed && path[pos - 1] == '.' &&
 8020424:	455f      	cmp	r7, fp
 8020426:	d00d      	beq.n	8020444 <mg_json_get+0x2d8>
          i += n + 1;
 8020428:	3501      	adds	r5, #1
 802042a:	442c      	add	r4, r5
          expecting = S_COLON;
 802042c:	2302      	movs	r3, #2
 802042e:	e050      	b.n	80204d2 <mg_json_get+0x366>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8020430:	9b02      	ldr	r3, [sp, #8]
 8020432:	9a04      	ldr	r2, [sp, #16]
 8020434:	4413      	add	r3, r2
 8020436:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802043a:	2b2e      	cmp	r3, #46	@ 0x2e
 802043c:	d0f2      	beq.n	8020424 <mg_json_get+0x2b8>
 802043e:	f06f 0502 	mvn.w	r5, #2
 8020442:	e0d4      	b.n	80205ee <mg_json_get+0x482>
          if (depth == ed && path[pos - 1] == '.' &&
 8020444:	9b02      	ldr	r3, [sp, #8]
 8020446:	9a04      	ldr	r2, [sp, #16]
 8020448:	4413      	add	r3, r2
 802044a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802044e:	2b2e      	cmp	r3, #46	@ 0x2e
 8020450:	d1ea      	bne.n	8020428 <mg_json_get+0x2bc>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8020452:	462a      	mov	r2, r5
 8020454:	9b02      	ldr	r3, [sp, #8]
 8020456:	9904      	ldr	r1, [sp, #16]
 8020458:	1859      	adds	r1, r3, r1
 802045a:	4648      	mov	r0, r9
 802045c:	f009 fb75 	bl	8029b4a <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 8020460:	2800      	cmp	r0, #0
 8020462:	d1e1      	bne.n	8020428 <mg_json_get+0x2bc>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8020464:	9904      	ldr	r1, [sp, #16]
 8020466:	194b      	adds	r3, r1, r5
 8020468:	9a02      	ldr	r2, [sp, #8]
 802046a:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 802046c:	b12a      	cbz	r2, 802047a <mg_json_get+0x30e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802046e:	2a2e      	cmp	r2, #46	@ 0x2e
 8020470:	d005      	beq.n	802047e <mg_json_get+0x312>
 8020472:	2a5b      	cmp	r2, #91	@ 0x5b
 8020474:	d1d8      	bne.n	8020428 <mg_json_get+0x2bc>
            pos += n;
 8020476:	9304      	str	r3, [sp, #16]
 8020478:	e7d6      	b.n	8020428 <mg_json_get+0x2bc>
 802047a:	9304      	str	r3, [sp, #16]
 802047c:	e7d4      	b.n	8020428 <mg_json_get+0x2bc>
 802047e:	9304      	str	r3, [sp, #16]
 8020480:	e7d2      	b.n	8020428 <mg_json_get+0x2bc>
          MG_EOO('}');
 8020482:	9b01      	ldr	r3, [sp, #4]
 8020484:	9a03      	ldr	r2, [sp, #12]
 8020486:	4293      	cmp	r3, r2
 8020488:	d0a7      	beq.n	80203da <mg_json_get+0x26e>
 802048a:	f06f 0502 	mvn.w	r5, #2
 802048e:	e0ae      	b.n	80205ee <mg_json_get+0x482>
 8020490:	9b02      	ldr	r3, [sp, #8]
 8020492:	9a04      	ldr	r2, [sp, #16]
 8020494:	5c9b      	ldrb	r3, [r3, r2]
 8020496:	2b00      	cmp	r3, #0
 8020498:	d1ab      	bne.n	80203f2 <mg_json_get+0x286>
 802049a:	9b01      	ldr	r3, [sp, #4]
 802049c:	9a03      	ldr	r2, [sp, #12]
 802049e:	4293      	cmp	r3, r2
 80204a0:	d1a7      	bne.n	80203f2 <mg_json_get+0x286>
 80204a2:	f8dd a018 	ldr.w	sl, [sp, #24]
 80204a6:	f1ba 0f00 	cmp.w	sl, #0
 80204aa:	d004      	beq.n	80204b6 <mg_json_get+0x34a>
 80204ac:	9b05      	ldr	r3, [sp, #20]
 80204ae:	1ae3      	subs	r3, r4, r3
 80204b0:	3301      	adds	r3, #1
 80204b2:	f8ca 3000 	str.w	r3, [sl]
 80204b6:	9d05      	ldr	r5, [sp, #20]
 80204b8:	e099      	b.n	80205ee <mg_json_get+0x482>
          if (depth == ed && ei >= 0) ci++;
 80204ba:	9b03      	ldr	r3, [sp, #12]
 80204bc:	2b00      	cmp	r3, #0
 80204be:	f2c0 8092 	blt.w	80205e6 <mg_json_get+0x47a>
 80204c2:	9b01      	ldr	r3, [sp, #4]
 80204c4:	3301      	adds	r3, #1
 80204c6:	9301      	str	r3, [sp, #4]
          expecting = S_COMMA_OR_EOO;
 80204c8:	2303      	movs	r3, #3
 80204ca:	e002      	b.n	80204d2 <mg_json_get+0x366>
        if (c == ':') {
 80204cc:	2d3a      	cmp	r5, #58	@ 0x3a
 80204ce:	d11d      	bne.n	802050c <mg_json_get+0x3a0>
          expecting = S_VALUE;
 80204d0:	2300      	movs	r3, #0
  for (i = 0; i < len; i++) {
 80204d2:	3401      	adds	r4, #1
 80204d4:	4544      	cmp	r4, r8
 80204d6:	f280 8088 	bge.w	80205ea <mg_json_get+0x47e>
    unsigned char c = ((unsigned char *) s)[i];
 80204da:	46a2      	mov	sl, r4
 80204dc:	eb06 0904 	add.w	r9, r6, r4
 80204e0:	5d35      	ldrb	r5, [r6, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 80204e2:	2d20      	cmp	r5, #32
 80204e4:	d0f5      	beq.n	80204d2 <mg_json_get+0x366>
 80204e6:	2d09      	cmp	r5, #9
 80204e8:	d0f3      	beq.n	80204d2 <mg_json_get+0x366>
 80204ea:	2d0a      	cmp	r5, #10
 80204ec:	d0f1      	beq.n	80204d2 <mg_json_get+0x366>
 80204ee:	2d0d      	cmp	r5, #13
 80204f0:	d0ef      	beq.n	80204d2 <mg_json_get+0x366>
    switch (expecting) {
 80204f2:	2b03      	cmp	r3, #3
 80204f4:	d8ed      	bhi.n	80204d2 <mg_json_get+0x366>
 80204f6:	a201      	add	r2, pc, #4	@ (adr r2, 80204fc <mg_json_get+0x390>)
 80204f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80204fc:	080201b3 	.word	0x080201b3
 8020500:	080203cd 	.word	0x080203cd
 8020504:	080204cd 	.word	0x080204cd
 8020508:	08020513 	.word	0x08020513
          return MG_JSON_INVALID;
 802050c:	f06f 0501 	mvn.w	r5, #1
 8020510:	e06d      	b.n	80205ee <mg_json_get+0x482>
        if (depth <= 0) {
 8020512:	2f00      	cmp	r7, #0
 8020514:	f340 808a 	ble.w	802062c <mg_json_get+0x4c0>
        } else if (c == ',') {
 8020518:	2d2c      	cmp	r5, #44	@ 0x2c
 802051a:	d01e      	beq.n	802055a <mg_json_get+0x3ee>
        } else if (c == ']' || c == '}') {
 802051c:	2d5d      	cmp	r5, #93	@ 0x5d
 802051e:	d002      	beq.n	8020526 <mg_json_get+0x3ba>
 8020520:	2d7d      	cmp	r5, #125	@ 0x7d
 8020522:	f040 8086 	bne.w	8020632 <mg_json_get+0x4c6>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8020526:	455f      	cmp	r7, fp
 8020528:	d021      	beq.n	802056e <mg_json_get+0x402>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 802052a:	455f      	cmp	r7, fp
 802052c:	d02b      	beq.n	8020586 <mg_json_get+0x41a>
          MG_EOO('O');
 802052e:	455f      	cmp	r7, fp
 8020530:	d035      	beq.n	802059e <mg_json_get+0x432>
 8020532:	3f01      	subs	r7, #1
 8020534:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8020538:	446a      	add	r2, sp
 802053a:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 802053e:	3202      	adds	r2, #2
 8020540:	4295      	cmp	r5, r2
 8020542:	d179      	bne.n	8020638 <mg_json_get+0x4cc>
 8020544:	455f      	cmp	r7, fp
 8020546:	d037      	beq.n	80205b8 <mg_json_get+0x44c>
          if (depth == ed && ei >= 0) ci++;
 8020548:	455f      	cmp	r7, fp
 802054a:	d1c2      	bne.n	80204d2 <mg_json_get+0x366>
 802054c:	9a03      	ldr	r2, [sp, #12]
 802054e:	2a00      	cmp	r2, #0
 8020550:	dbbf      	blt.n	80204d2 <mg_json_get+0x366>
 8020552:	9a01      	ldr	r2, [sp, #4]
 8020554:	3201      	adds	r2, #1
 8020556:	9201      	str	r2, [sp, #4]
 8020558:	e7bb      	b.n	80204d2 <mg_json_get+0x366>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 802055a:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 802055e:	446b      	add	r3, sp
 8020560:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8020564:	2b7b      	cmp	r3, #123	@ 0x7b
 8020566:	bf14      	ite	ne
 8020568:	2300      	movne	r3, #0
 802056a:	2301      	moveq	r3, #1
 802056c:	e7b1      	b.n	80204d2 <mg_json_get+0x366>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 802056e:	2d7d      	cmp	r5, #125	@ 0x7d
 8020570:	d1db      	bne.n	802052a <mg_json_get+0x3be>
 8020572:	9a02      	ldr	r2, [sp, #8]
 8020574:	9904      	ldr	r1, [sp, #16]
 8020576:	440a      	add	r2, r1
 8020578:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 802057c:	2a2e      	cmp	r2, #46	@ 0x2e
 802057e:	d1d4      	bne.n	802052a <mg_json_get+0x3be>
            return MG_JSON_NOT_FOUND;
 8020580:	f06f 0502 	mvn.w	r5, #2
 8020584:	e033      	b.n	80205ee <mg_json_get+0x482>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8020586:	2d5d      	cmp	r5, #93	@ 0x5d
 8020588:	d1d1      	bne.n	802052e <mg_json_get+0x3c2>
 802058a:	9a02      	ldr	r2, [sp, #8]
 802058c:	9904      	ldr	r1, [sp, #16]
 802058e:	440a      	add	r2, r1
 8020590:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8020594:	2a2c      	cmp	r2, #44	@ 0x2c
 8020596:	d1ca      	bne.n	802052e <mg_json_get+0x3c2>
            return MG_JSON_NOT_FOUND;
 8020598:	f06f 0502 	mvn.w	r5, #2
 802059c:	e027      	b.n	80205ee <mg_json_get+0x482>
          MG_EOO('O');
 802059e:	9a01      	ldr	r2, [sp, #4]
 80205a0:	9903      	ldr	r1, [sp, #12]
 80205a2:	428a      	cmp	r2, r1
 80205a4:	d0c5      	beq.n	8020532 <mg_json_get+0x3c6>
 80205a6:	f06f 0502 	mvn.w	r5, #2
 80205aa:	e020      	b.n	80205ee <mg_json_get+0x482>
 80205ac:	08033ad4 	.word	0x08033ad4
 80205b0:	080368f4 	.word	0x080368f4
 80205b4:	08033adc 	.word	0x08033adc
 80205b8:	9a02      	ldr	r2, [sp, #8]
 80205ba:	9904      	ldr	r1, [sp, #16]
 80205bc:	5c52      	ldrb	r2, [r2, r1]
 80205be:	2a00      	cmp	r2, #0
 80205c0:	d1c2      	bne.n	8020548 <mg_json_get+0x3dc>
 80205c2:	9a01      	ldr	r2, [sp, #4]
 80205c4:	9903      	ldr	r1, [sp, #12]
 80205c6:	428a      	cmp	r2, r1
 80205c8:	d1be      	bne.n	8020548 <mg_json_get+0x3dc>
 80205ca:	f8dd a018 	ldr.w	sl, [sp, #24]
 80205ce:	f1ba 0f00 	cmp.w	sl, #0
 80205d2:	d004      	beq.n	80205de <mg_json_get+0x472>
 80205d4:	9b05      	ldr	r3, [sp, #20]
 80205d6:	1ae3      	subs	r3, r4, r3
 80205d8:	3301      	adds	r3, #1
 80205da:	f8ca 3000 	str.w	r3, [sl]
 80205de:	9d05      	ldr	r5, [sp, #20]
 80205e0:	e005      	b.n	80205ee <mg_json_get+0x482>
        expecting = S_COMMA_OR_EOO;
 80205e2:	2303      	movs	r3, #3
 80205e4:	e775      	b.n	80204d2 <mg_json_get+0x366>
          expecting = S_COMMA_OR_EOO;
 80205e6:	2303      	movs	r3, #3
 80205e8:	e773      	b.n	80204d2 <mg_json_get+0x366>
  return MG_JSON_NOT_FOUND;
 80205ea:	f06f 0502 	mvn.w	r5, #2
}
 80205ee:	4628      	mov	r0, r5
 80205f0:	b015      	add	sp, #84	@ 0x54
 80205f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 80205f6:	f06f 0501 	mvn.w	r5, #1
 80205fa:	e7f8      	b.n	80205ee <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80205fc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8020600:	e7f5      	b.n	80205ee <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8020602:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8020606:	e7f2      	b.n	80205ee <mg_json_get+0x482>
          MG_EOO(']');
 8020608:	f06f 0501 	mvn.w	r5, #1
 802060c:	e7ef      	b.n	80205ee <mg_json_get+0x482>
          return MG_JSON_INVALID;
 802060e:	f06f 0501 	mvn.w	r5, #1
 8020612:	e7ec      	b.n	80205ee <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8020614:	f06f 0502 	mvn.w	r5, #2
 8020618:	e7e9      	b.n	80205ee <mg_json_get+0x482>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 802061a:	f06f 0502 	mvn.w	r5, #2
 802061e:	e7e6      	b.n	80205ee <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8020620:	f06f 0501 	mvn.w	r5, #1
 8020624:	e7e3      	b.n	80205ee <mg_json_get+0x482>
          MG_EOO('}');
 8020626:	f06f 0501 	mvn.w	r5, #1
 802062a:	e7e0      	b.n	80205ee <mg_json_get+0x482>
          return MG_JSON_INVALID;
 802062c:	f06f 0501 	mvn.w	r5, #1
 8020630:	e7dd      	b.n	80205ee <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8020632:	f06f 0501 	mvn.w	r5, #1
 8020636:	e7da      	b.n	80205ee <mg_json_get+0x482>
          MG_EOO('O');
 8020638:	f06f 0501 	mvn.w	r5, #1
 802063c:	e7d7      	b.n	80205ee <mg_json_get+0x482>
 802063e:	bf00      	nop

08020640 <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8020640:	b510      	push	{r4, lr}
 8020642:	b084      	sub	sp, #16
 8020644:	46ec      	mov	ip, sp
 8020646:	e88c 0003 	stmia.w	ip, {r0, r1}
 802064a:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 802064c:	ab03      	add	r3, sp, #12
 802064e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8020652:	f7ff fd8b 	bl	802016c <mg_json_get>
 8020656:	1e02      	subs	r2, r0, #0
 8020658:	db11      	blt.n	802067e <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 802065a:	9b00      	ldr	r3, [sp, #0]
 802065c:	1898      	adds	r0, r3, r2
 802065e:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8020660:	2a2d      	cmp	r2, #45	@ 0x2d
 8020662:	d003      	beq.n	802066c <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8020664:	3a30      	subs	r2, #48	@ 0x30
 8020666:	b2d2      	uxtb	r2, r2
 8020668:	2a09      	cmp	r2, #9
 802066a:	d80b      	bhi.n	8020684 <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 802066c:	b164      	cbz	r4, 8020688 <mg_json_get_num+0x48>
 802066e:	2200      	movs	r2, #0
 8020670:	9903      	ldr	r1, [sp, #12]
 8020672:	f7fe fb89 	bl	801ed88 <mg_atod>
 8020676:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 802067a:	2001      	movs	r0, #1
 802067c:	e000      	b.n	8020680 <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 802067e:	2000      	movs	r0, #0
}
 8020680:	b004      	add	sp, #16
 8020682:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 8020684:	2000      	movs	r0, #0
 8020686:	e7fb      	b.n	8020680 <mg_json_get_num+0x40>
    found = 1;
 8020688:	2001      	movs	r0, #1
 802068a:	e7f9      	b.n	8020680 <mg_json_get_num+0x40>

0802068c <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 802068c:	b510      	push	{r4, lr}
 802068e:	b082      	sub	sp, #8
 8020690:	46ec      	mov	ip, sp
 8020692:	e88c 0003 	stmia.w	ip, {r0, r1}
 8020696:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 8020698:	2300      	movs	r3, #0
 802069a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802069e:	f7ff fd65 	bl	802016c <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 80206a2:	2800      	cmp	r0, #0
 80206a4:	db0f      	blt.n	80206c6 <mg_json_get_bool+0x3a>
 80206a6:	9b00      	ldr	r3, [sp, #0]
 80206a8:	5c1b      	ldrb	r3, [r3, r0]
 80206aa:	2b74      	cmp	r3, #116	@ 0x74
 80206ac:	d003      	beq.n	80206b6 <mg_json_get_bool+0x2a>
 80206ae:	2b66      	cmp	r3, #102	@ 0x66
 80206b0:	d001      	beq.n	80206b6 <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 80206b2:	2000      	movs	r0, #0
 80206b4:	e008      	b.n	80206c8 <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 80206b6:	b14c      	cbz	r4, 80206cc <mg_json_get_bool+0x40>
 80206b8:	2b74      	cmp	r3, #116	@ 0x74
 80206ba:	bf14      	ite	ne
 80206bc:	2300      	movne	r3, #0
 80206be:	2301      	moveq	r3, #1
 80206c0:	7023      	strb	r3, [r4, #0]
    found = 1;
 80206c2:	2001      	movs	r0, #1
 80206c4:	e000      	b.n	80206c8 <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 80206c6:	2000      	movs	r0, #0
}
 80206c8:	b002      	add	sp, #8
 80206ca:	bd10      	pop	{r4, pc}
    found = 1;
 80206cc:	2001      	movs	r0, #1
 80206ce:	e7fb      	b.n	80206c8 <mg_json_get_bool+0x3c>

080206d0 <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 80206d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80206d2:	b085      	sub	sp, #20
 80206d4:	4606      	mov	r6, r0
 80206d6:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 80206d8:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 80206da:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 80206dc:	e038      	b.n	8020750 <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 80206de:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80206e2:	f7fe fc63 	bl	801efac <nibble>
 80206e6:	f7fe fc49 	bl	801ef7c <logc>
 80206ea:	f3c5 2003 	ubfx	r0, r5, #8, #4
 80206ee:	f7fe fc5d 	bl	801efac <nibble>
 80206f2:	f7fe fc43 	bl	801ef7c <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80206f6:	f3c5 1003 	ubfx	r0, r5, #4, #4
 80206fa:	f7fe fc57 	bl	801efac <nibble>
 80206fe:	f7fe fc3d 	bl	801ef7c <logc>
 8020702:	2030      	movs	r0, #48	@ 0x30
 8020704:	f7fe fc3a 	bl	801ef7c <logc>
 8020708:	2103      	movs	r1, #3
 802070a:	4829      	ldr	r0, [pc, #164]	@ (80207b0 <mg_hexdump+0xe0>)
 802070c:	f7fe fc42 	bl	801ef94 <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8020710:	5d70      	ldrb	r0, [r6, r5]
 8020712:	0900      	lsrs	r0, r0, #4
 8020714:	f7fe fc4a 	bl	801efac <nibble>
 8020718:	f7fe fc30 	bl	801ef7c <logc>
 802071c:	5d70      	ldrb	r0, [r6, r5]
 802071e:	f000 000f 	and.w	r0, r0, #15
 8020722:	f7fe fc43 	bl	801efac <nibble>
 8020726:	f7fe fc29 	bl	801ef7c <logc>
    logc(' ');                                         // Space after hex number
 802072a:	2020      	movs	r0, #32
 802072c:	f7fe fc26 	bl	801ef7c <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8020730:	5d72      	ldrb	r2, [r6, r5]
 8020732:	f1a2 0320 	sub.w	r3, r2, #32
 8020736:	b2db      	uxtb	r3, r3
 8020738:	2b5e      	cmp	r3, #94	@ 0x5e
 802073a:	d900      	bls.n	802073e <mg_hexdump+0x6e>
 802073c:	222e      	movs	r2, #46	@ 0x2e
 802073e:	1c63      	adds	r3, r4, #1
 8020740:	f104 0110 	add.w	r1, r4, #16
 8020744:	eb0d 0401 	add.w	r4, sp, r1
 8020748:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 802074c:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 802074e:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 8020750:	42bd      	cmp	r5, r7
 8020752:	d21e      	bcs.n	8020792 <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 8020754:	f015 0f0f 	tst.w	r5, #15
 8020758:	d1da      	bne.n	8020710 <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 802075a:	2d00      	cmp	r5, #0
 802075c:	d0bf      	beq.n	80206de <mg_hexdump+0xe>
 802075e:	2102      	movs	r1, #2
 8020760:	4814      	ldr	r0, [pc, #80]	@ (80207b4 <mg_hexdump+0xe4>)
 8020762:	f7fe fc17 	bl	801ef94 <logs>
 8020766:	2110      	movs	r1, #16
 8020768:	4668      	mov	r0, sp
 802076a:	f7fe fc13 	bl	801ef94 <logs>
 802076e:	200a      	movs	r0, #10
 8020770:	f7fe fc04 	bl	801ef7c <logc>
 8020774:	2400      	movs	r4, #0
 8020776:	e7b2      	b.n	80206de <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8020778:	2103      	movs	r1, #3
 802077a:	480d      	ldr	r0, [pc, #52]	@ (80207b0 <mg_hexdump+0xe0>)
 802077c:	f7fe fc0a 	bl	801ef94 <logs>
 8020780:	1c63      	adds	r3, r4, #1
 8020782:	f104 0210 	add.w	r2, r4, #16
 8020786:	eb0d 0402 	add.w	r4, sp, r2
 802078a:	2220      	movs	r2, #32
 802078c:	f804 2c10 	strb.w	r2, [r4, #-16]
 8020790:	b2dc      	uxtb	r4, r3
 8020792:	2c0f      	cmp	r4, #15
 8020794:	d9f0      	bls.n	8020778 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8020796:	2102      	movs	r1, #2
 8020798:	4806      	ldr	r0, [pc, #24]	@ (80207b4 <mg_hexdump+0xe4>)
 802079a:	f7fe fbfb 	bl	801ef94 <logs>
 802079e:	2110      	movs	r1, #16
 80207a0:	4668      	mov	r0, sp
 80207a2:	f7fe fbf7 	bl	801ef94 <logs>
 80207a6:	200a      	movs	r0, #10
 80207a8:	f7fe fbe8 	bl	801ef7c <logc>
}
 80207ac:	b005      	add	sp, #20
 80207ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80207b0:	08036900 	.word	0x08036900
 80207b4:	080368fc 	.word	0x080368fc

080207b8 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 80207b8:	4b09      	ldr	r3, [pc, #36]	@ (80207e0 <mg_md5_init+0x28>)
 80207ba:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 80207bc:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 80207c0:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 80207c2:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 80207c6:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 80207ca:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 80207ce:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 80207d0:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 80207d4:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 80207d6:	2300      	movs	r3, #0
 80207d8:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 80207da:	6143      	str	r3, [r0, #20]
}
 80207dc:	4770      	bx	lr
 80207de:	bf00      	nop
 80207e0:	67452301 	.word	0x67452301

080207e4 <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 80207e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80207e8:	4606      	mov	r6, r0
 80207ea:	460c      	mov	r4, r1
 80207ec:	4615      	mov	r5, r2
  t = ctx->bits[0];
 80207ee:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 80207f0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80207f4:	6102      	str	r2, [r0, #16]
 80207f6:	429a      	cmp	r2, r3
 80207f8:	d202      	bcs.n	8020800 <mg_md5_update+0x1c>
 80207fa:	6942      	ldr	r2, [r0, #20]
 80207fc:	3201      	adds	r2, #1
 80207fe:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 8020800:	6972      	ldr	r2, [r6, #20]
 8020802:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 8020806:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 8020808:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 802080c:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 8020810:	d035      	beq.n	802087e <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 8020812:	f106 0918 	add.w	r9, r6, #24
 8020816:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 802081a:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 802081e:	4545      	cmp	r5, r8
 8020820:	d30b      	bcc.n	802083a <mg_md5_update+0x56>
    memcpy(p, buf, t);
 8020822:	4642      	mov	r2, r8
 8020824:	4621      	mov	r1, r4
 8020826:	f00a fb97 	bl	802af58 <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802082a:	4649      	mov	r1, r9
 802082c:	4630      	mov	r0, r6
 802082e:	f7fe fbc7 	bl	801efc0 <mg_md5_transform>
    buf += t;
 8020832:	4444      	add	r4, r8
    len -= t;
 8020834:	3f40      	subs	r7, #64	@ 0x40
 8020836:	443d      	add	r5, r7
 8020838:	e021      	b.n	802087e <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 802083a:	462a      	mov	r2, r5
 802083c:	4621      	mov	r1, r4
 802083e:	f00a fb8b 	bl	802af58 <memcpy>
      return;
 8020842:	e024      	b.n	802088e <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 8020844:	f106 0118 	add.w	r1, r6, #24
 8020848:	4623      	mov	r3, r4
 802084a:	468c      	mov	ip, r1
 802084c:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 8020850:	681f      	ldr	r7, [r3, #0]
 8020852:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8020856:	6898      	ldr	r0, [r3, #8]
 8020858:	68da      	ldr	r2, [r3, #12]
 802085a:	f8cc 7000 	str.w	r7, [ip]
 802085e:	f8cc e004 	str.w	lr, [ip, #4]
 8020862:	f8cc 0008 	str.w	r0, [ip, #8]
 8020866:	f8cc 200c 	str.w	r2, [ip, #12]
 802086a:	3310      	adds	r3, #16
 802086c:	f10c 0c10 	add.w	ip, ip, #16
 8020870:	4543      	cmp	r3, r8
 8020872:	d1ed      	bne.n	8020850 <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8020874:	4630      	mov	r0, r6
 8020876:	f7fe fba3 	bl	801efc0 <mg_md5_transform>
    buf += 64;
 802087a:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 802087c:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 802087e:	2d3f      	cmp	r5, #63	@ 0x3f
 8020880:	d8e0      	bhi.n	8020844 <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 8020882:	462a      	mov	r2, r5
 8020884:	4621      	mov	r1, r4
 8020886:	f106 0018 	add.w	r0, r6, #24
 802088a:	f00a fb65 	bl	802af58 <memcpy>
}
 802088e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08020892 <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 8020892:	b570      	push	{r4, r5, r6, lr}
 8020894:	4604      	mov	r4, r0
 8020896:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 8020898:	6903      	ldr	r3, [r0, #16]
 802089a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 802089e:	f100 0618 	add.w	r6, r0, #24
 80208a2:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 80208a4:	3001      	adds	r0, #1
 80208a6:	2280      	movs	r2, #128	@ 0x80
 80208a8:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 80208aa:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 80208ae:	2a07      	cmp	r2, #7
 80208b0:	d821      	bhi.n	80208f6 <mg_md5_final+0x64>
    memset(p, 0, count);
 80208b2:	2100      	movs	r1, #0
 80208b4:	f009 f914 	bl	8029ae0 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80208b8:	4631      	mov	r1, r6
 80208ba:	4620      	mov	r0, r4
 80208bc:	f7fe fb80 	bl	801efc0 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 80208c0:	2238      	movs	r2, #56	@ 0x38
 80208c2:	2100      	movs	r1, #0
 80208c4:	4630      	mov	r0, r6
 80208c6:	f009 f90b 	bl	8029ae0 <memset>
  a[14] = ctx->bits[0];
 80208ca:	6923      	ldr	r3, [r4, #16]
 80208cc:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 80208ce:	6963      	ldr	r3, [r4, #20]
 80208d0:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80208d2:	4631      	mov	r1, r6
 80208d4:	4620      	mov	r0, r4
 80208d6:	f7fe fb73 	bl	801efc0 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 80208da:	6820      	ldr	r0, [r4, #0]
 80208dc:	6861      	ldr	r1, [r4, #4]
 80208de:	68a2      	ldr	r2, [r4, #8]
 80208e0:	68e3      	ldr	r3, [r4, #12]
 80208e2:	6028      	str	r0, [r5, #0]
 80208e4:	6069      	str	r1, [r5, #4]
 80208e6:	60aa      	str	r2, [r5, #8]
 80208e8:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 80208ea:	2258      	movs	r2, #88	@ 0x58
 80208ec:	2100      	movs	r1, #0
 80208ee:	4620      	mov	r0, r4
 80208f0:	f009 f8f6 	bl	8029ae0 <memset>
}
 80208f4:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 80208f6:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 80208fa:	2100      	movs	r1, #0
 80208fc:	f009 f8f0 	bl	8029ae0 <memset>
 8020900:	e7e3      	b.n	80208ca <mg_md5_final+0x38>

08020902 <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 8020902:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020906:	4604      	mov	r4, r0
 8020908:	460d      	mov	r5, r1
 802090a:	4617      	mov	r7, r2
 802090c:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 802090e:	2228      	movs	r2, #40	@ 0x28
 8020910:	2100      	movs	r1, #0
 8020912:	4618      	mov	r0, r3
 8020914:	f009 f8e4 	bl	8029ae0 <memset>
  m->dgram.buf = (char *) buf;
 8020918:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 802091a:	2d01      	cmp	r5, #1
 802091c:	f240 8088 	bls.w	8020a30 <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8020920:	7820      	ldrb	r0, [r4, #0]
 8020922:	0900      	lsrs	r0, r0, #4
 8020924:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 8020926:	46a4      	mov	ip, r4
 8020928:	f81c 9b01 	ldrb.w	r9, [ip], #1
 802092c:	f3c9 0941 	ubfx	r9, r9, #1, #2
 8020930:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 8020934:	2300      	movs	r3, #0
 8020936:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 8020938:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 802093a:	ebac 0e04 	sub.w	lr, ip, r4
 802093e:	45ae      	cmp	lr, r5
 8020940:	d211      	bcs.n	8020966 <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 8020942:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8020946:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 802094a:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 802094e:	fa0e fe08 	lsl.w	lr, lr, r8
 8020952:	4471      	add	r1, lr
    len_len++;
 8020954:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 8020956:	f012 0f80 	tst.w	r2, #128	@ 0x80
 802095a:	d004      	beq.n	8020966 <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 802095c:	2b03      	cmp	r3, #3
 802095e:	d9ec      	bls.n	802093a <mg_mqtt_parse+0x38>
 8020960:	2002      	movs	r0, #2
}
 8020962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 8020966:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 802096a:	f012 0f80 	tst.w	r2, #128	@ 0x80
 802096e:	d161      	bne.n	8020a34 <mg_mqtt_parse+0x132>
 8020970:	4425      	add	r5, r4
 8020972:	4545      	cmp	r5, r8
 8020974:	d360      	bcc.n	8020a38 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 8020976:	eba8 0304 	sub.w	r3, r8, r4
 802097a:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 802097c:	2803      	cmp	r0, #3
 802097e:	d01c      	beq.n	80209ba <mg_mqtt_parse+0xb8>
 8020980:	d80a      	bhi.n	8020998 <mg_mqtt_parse+0x96>
 8020982:	2802      	cmp	r0, #2
 8020984:	d106      	bne.n	8020994 <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 8020986:	2901      	cmp	r1, #1
 8020988:	dd5a      	ble.n	8020a40 <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 802098a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802098e:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 8020990:	2000      	movs	r0, #0
      break;
 8020992:	e7e6      	b.n	8020962 <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8020994:	2000      	movs	r0, #0
 8020996:	e7e4      	b.n	8020962 <mg_mqtt_parse+0x60>
 8020998:	3804      	subs	r0, #4
 802099a:	b2c0      	uxtb	r0, r0
 802099c:	2807      	cmp	r0, #7
 802099e:	d84d      	bhi.n	8020a3c <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 80209a0:	f10c 0302 	add.w	r3, ip, #2
 80209a4:	4543      	cmp	r3, r8
 80209a6:	d84d      	bhi.n	8020a44 <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80209a8:	f89c 2000 	ldrb.w	r2, [ip]
 80209ac:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80209b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80209b4:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 80209b6:	2000      	movs	r0, #0
      break;
 80209b8:	e7d3      	b.n	8020962 <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 80209ba:	f10c 0202 	add.w	r2, ip, #2
 80209be:	4542      	cmp	r2, r8
 80209c0:	d842      	bhi.n	8020a48 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80209c2:	f89c 1000 	ldrb.w	r1, [ip]
 80209c6:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80209ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80209ce:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 80209d0:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 80209d2:	3302      	adds	r3, #2
 80209d4:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 80209d8:	45a8      	cmp	r8, r5
 80209da:	d337      	bcc.n	8020a4c <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 80209dc:	f1b9 0f00 	cmp.w	r9, #0
 80209e0:	d008      	beq.n	80209f4 <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 80209e2:	1caa      	adds	r2, r5, #2
 80209e4:	4542      	cmp	r2, r8
 80209e6:	d833      	bhi.n	8020a50 <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80209e8:	7829      	ldrb	r1, [r5, #0]
 80209ea:	786b      	ldrb	r3, [r5, #1]
 80209ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80209f0:	8333      	strh	r3, [r6, #24]
        p += 2;
 80209f2:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 80209f4:	4545      	cmp	r5, r8
 80209f6:	d82d      	bhi.n	8020a54 <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 80209f8:	2f05      	cmp	r7, #5
 80209fa:	d007      	beq.n	8020a0c <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 80209fc:	4545      	cmp	r5, r8
 80209fe:	d82d      	bhi.n	8020a5c <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 8020a00:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 8020a02:	eba8 0505 	sub.w	r5, r8, r5
 8020a06:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 8020a08:	2000      	movs	r0, #0
      break;
 8020a0a:	e7aa      	b.n	8020962 <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 8020a0c:	1cab      	adds	r3, r5, #2
 8020a0e:	4543      	cmp	r3, r8
 8020a10:	d2f4      	bcs.n	80209fc <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 8020a12:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 8020a16:	eba8 0105 	sub.w	r1, r8, r5
 8020a1a:	4628      	mov	r0, r5
 8020a1c:	f7fe fe78 	bl	801f710 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 8020a20:	b1d0      	cbz	r0, 8020a58 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 8020a22:	182b      	adds	r3, r5, r0
 8020a24:	1b1b      	subs	r3, r3, r4
 8020a26:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 8020a28:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8020a2a:	4403      	add	r3, r0
 8020a2c:	441d      	add	r5, r3
 8020a2e:	e7e5      	b.n	80209fc <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 8020a30:	2001      	movs	r0, #1
 8020a32:	e796      	b.n	8020962 <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8020a34:	2001      	movs	r0, #1
 8020a36:	e794      	b.n	8020962 <mg_mqtt_parse+0x60>
 8020a38:	2001      	movs	r0, #1
 8020a3a:	e792      	b.n	8020962 <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8020a3c:	2000      	movs	r0, #0
 8020a3e:	e790      	b.n	8020962 <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 8020a40:	2002      	movs	r0, #2
 8020a42:	e78e      	b.n	8020962 <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8020a44:	2002      	movs	r0, #2
 8020a46:	e78c      	b.n	8020962 <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8020a48:	2002      	movs	r0, #2
 8020a4a:	e78a      	b.n	8020962 <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8020a4c:	2002      	movs	r0, #2
 8020a4e:	e788      	b.n	8020962 <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 8020a50:	2002      	movs	r0, #2
 8020a52:	e786      	b.n	8020962 <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8020a54:	2002      	movs	r0, #2
 8020a56:	e784      	b.n	8020962 <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 8020a58:	2002      	movs	r0, #2
 8020a5a:	e782      	b.n	8020962 <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8020a5c:	2002      	movs	r0, #2
 8020a5e:	e780      	b.n	8020962 <mg_mqtt_parse+0x60>

08020a60 <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8020a60:	b510      	push	{r4, lr}
 8020a62:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8020a64:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8020a66:	31b0      	adds	r1, #176	@ 0xb0
 8020a68:	2001      	movs	r0, #1
 8020a6a:	f7ff f9d8 	bl	801fe1e <mg_calloc>
  if (c != NULL) {
 8020a6e:	4603      	mov	r3, r0
 8020a70:	b148      	cbz	r0, 8020a86 <mg_alloc_conn+0x26>
    c->mgr = mgr;
 8020a72:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 8020a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8020a78:	6742      	str	r2, [r0, #116]	@ 0x74
 8020a7a:	6442      	str	r2, [r0, #68]	@ 0x44
 8020a7c:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 8020a7e:	69e2      	ldr	r2, [r4, #28]
 8020a80:	3201      	adds	r2, #1
 8020a82:	61e2      	str	r2, [r4, #28]
 8020a84:	6342      	str	r2, [r0, #52]	@ 0x34
}
 8020a86:	4618      	mov	r0, r3
 8020a88:	bd10      	pop	{r4, pc}
	...

08020a8c <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 8020a8c:	b510      	push	{r4, lr}
 8020a8e:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 8020a90:	2248      	movs	r2, #72	@ 0x48
 8020a92:	2100      	movs	r1, #0
 8020a94:	f009 f824 	bl	8029ae0 <memset>
  mgr->epoll_fd = -1;
 8020a98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020a9c:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 8020a9e:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8020aa0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8020aa4:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8020aa6:	4b02      	ldr	r3, [pc, #8]	@ (8020ab0 <mg_mgr_init+0x24>)
 8020aa8:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8020aaa:	4b02      	ldr	r3, [pc, #8]	@ (8020ab4 <mg_mgr_init+0x28>)
 8020aac:	60e3      	str	r3, [r4, #12]
}
 8020aae:	bd10      	pop	{r4, pc}
 8020ab0:	08036904 	.word	0x08036904
 8020ab4:	08036918 	.word	0x08036918

08020ab8 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8020ab8:	b40c      	push	{r2, r3}
 8020aba:	b500      	push	{lr}
 8020abc:	b083      	sub	sp, #12
 8020abe:	ab04      	add	r3, sp, #16
 8020ac0:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8020ac4:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8020ac6:	ab01      	add	r3, sp, #4
 8020ac8:	f000 fcde 	bl	8021488 <mg_vsnprintf>
}
 8020acc:	b003      	add	sp, #12
 8020ace:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ad2:	b002      	add	sp, #8
 8020ad4:	4770      	bx	lr
	...

08020ad8 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8020ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020adc:	b093      	sub	sp, #76	@ 0x4c
 8020ade:	9005      	str	r0, [sp, #20]
 8020ae0:	9106      	str	r1, [sp, #24]
 8020ae2:	ec51 0b10 	vmov	r0, r1, d0
 8020ae6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8020aea:	4690      	mov	r8, r2
 8020aec:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8020aee:	2200      	movs	r2, #0
 8020af0:	2300      	movs	r3, #0
 8020af2:	f7f0 f801 	bl	8010af8 <__aeabi_dcmpeq>
 8020af6:	b9c8      	cbnz	r0, 8020b2c <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8020af8:	ed9d 0b02 	vldr	d0, [sp, #8]
 8020afc:	f7fd fbb8 	bl	801e270 <xisinf>
 8020b00:	b9d8      	cbnz	r0, 8020b3a <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8020b02:	ed9d 0b02 	vldr	d0, [sp, #8]
 8020b06:	f7fd fbc5 	bl	801e294 <xisnan>
 8020b0a:	4606      	mov	r6, r0
 8020b0c:	bb28      	cbnz	r0, 8020b5a <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8020b0e:	2200      	movs	r2, #0
 8020b10:	2300      	movs	r3, #0
 8020b12:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8020b16:	4620      	mov	r0, r4
 8020b18:	4629      	mov	r1, r5
 8020b1a:	f7ef fff7 	bl	8010b0c <__aeabi_dcmplt>
 8020b1e:	bb18      	cbnz	r0, 8020b68 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 8020b20:	4637      	mov	r7, r6
  mul = 1.0;
 8020b22:	2400      	movs	r4, #0
 8020b24:	4dba      	ldr	r5, [pc, #744]	@ (8020e10 <mg_dtoa+0x338>)
 8020b26:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8020b2a:	e02f      	b.n	8020b8c <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8020b2c:	4bb9      	ldr	r3, [pc, #740]	@ (8020e14 <mg_dtoa+0x33c>)
 8020b2e:	4aba      	ldr	r2, [pc, #744]	@ (8020e18 <mg_dtoa+0x340>)
 8020b30:	9906      	ldr	r1, [sp, #24]
 8020b32:	9805      	ldr	r0, [sp, #20]
 8020b34:	f7ff ffc0 	bl	8020ab8 <mg_snprintf>
 8020b38:	e1d3      	b.n	8020ee2 <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8020b3a:	2200      	movs	r2, #0
 8020b3c:	2300      	movs	r3, #0
 8020b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020b42:	f7f0 f801 	bl	8010b48 <__aeabi_dcmpgt>
 8020b46:	b130      	cbz	r0, 8020b56 <mg_dtoa+0x7e>
 8020b48:	4bb4      	ldr	r3, [pc, #720]	@ (8020e1c <mg_dtoa+0x344>)
 8020b4a:	4ab3      	ldr	r2, [pc, #716]	@ (8020e18 <mg_dtoa+0x340>)
 8020b4c:	9906      	ldr	r1, [sp, #24]
 8020b4e:	9805      	ldr	r0, [sp, #20]
 8020b50:	f7ff ffb2 	bl	8020ab8 <mg_snprintf>
 8020b54:	e1c5      	b.n	8020ee2 <mg_dtoa+0x40a>
 8020b56:	4bb2      	ldr	r3, [pc, #712]	@ (8020e20 <mg_dtoa+0x348>)
 8020b58:	e7f7      	b.n	8020b4a <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8020b5a:	4bb2      	ldr	r3, [pc, #712]	@ (8020e24 <mg_dtoa+0x34c>)
 8020b5c:	4aae      	ldr	r2, [pc, #696]	@ (8020e18 <mg_dtoa+0x340>)
 8020b5e:	9906      	ldr	r1, [sp, #24]
 8020b60:	9805      	ldr	r0, [sp, #20]
 8020b62:	f7ff ffa9 	bl	8020ab8 <mg_snprintf>
 8020b66:	e1bc      	b.n	8020ee2 <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8020b68:	4622      	mov	r2, r4
 8020b6a:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8020b6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020b72:	232d      	movs	r3, #45	@ 0x2d
 8020b74:	f88d 3020 	strb.w	r3, [sp, #32]
 8020b78:	2701      	movs	r7, #1
 8020b7a:	e7d2      	b.n	8020b22 <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8020b7c:	2200      	movs	r2, #0
 8020b7e:	4baa      	ldr	r3, [pc, #680]	@ (8020e28 <mg_dtoa+0x350>)
 8020b80:	4620      	mov	r0, r4
 8020b82:	4629      	mov	r1, r5
 8020b84:	f7ef fd50 	bl	8010628 <__aeabi_dmul>
 8020b88:	4604      	mov	r4, r0
 8020b8a:	460d      	mov	r5, r1
 8020b8c:	2200      	movs	r2, #0
 8020b8e:	4ba6      	ldr	r3, [pc, #664]	@ (8020e28 <mg_dtoa+0x350>)
 8020b90:	4650      	mov	r0, sl
 8020b92:	4659      	mov	r1, fp
 8020b94:	f7ef ffce 	bl	8010b34 <__aeabi_dcmpge>
 8020b98:	b1b0      	cbz	r0, 8020bc8 <mg_dtoa+0xf0>
 8020b9a:	4622      	mov	r2, r4
 8020b9c:	462b      	mov	r3, r5
 8020b9e:	4650      	mov	r0, sl
 8020ba0:	4659      	mov	r1, fp
 8020ba2:	f7ef fe6b 	bl	801087c <__aeabi_ddiv>
 8020ba6:	2200      	movs	r2, #0
 8020ba8:	4b9f      	ldr	r3, [pc, #636]	@ (8020e28 <mg_dtoa+0x350>)
 8020baa:	f7ef ffc3 	bl	8010b34 <__aeabi_dcmpge>
 8020bae:	2800      	cmp	r0, #0
 8020bb0:	d1e4      	bne.n	8020b7c <mg_dtoa+0xa4>
 8020bb2:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8020bb6:	e007      	b.n	8020bc8 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8020bb8:	2200      	movs	r2, #0
 8020bba:	4b9b      	ldr	r3, [pc, #620]	@ (8020e28 <mg_dtoa+0x350>)
 8020bbc:	4620      	mov	r0, r4
 8020bbe:	4629      	mov	r1, r5
 8020bc0:	f7ef fe5c 	bl	801087c <__aeabi_ddiv>
 8020bc4:	4604      	mov	r4, r0
 8020bc6:	460d      	mov	r5, r1
 8020bc8:	2200      	movs	r2, #0
 8020bca:	4b91      	ldr	r3, [pc, #580]	@ (8020e10 <mg_dtoa+0x338>)
 8020bcc:	4650      	mov	r0, sl
 8020bce:	4659      	mov	r1, fp
 8020bd0:	f7ef ffa6 	bl	8010b20 <__aeabi_dcmple>
 8020bd4:	b158      	cbz	r0, 8020bee <mg_dtoa+0x116>
 8020bd6:	4622      	mov	r2, r4
 8020bd8:	462b      	mov	r3, r5
 8020bda:	4650      	mov	r0, sl
 8020bdc:	4659      	mov	r1, fp
 8020bde:	f7ef fe4d 	bl	801087c <__aeabi_ddiv>
 8020be2:	2200      	movs	r2, #0
 8020be4:	4b8a      	ldr	r3, [pc, #552]	@ (8020e10 <mg_dtoa+0x338>)
 8020be6:	f7ef ff9b 	bl	8010b20 <__aeabi_dcmple>
 8020bea:	2800      	cmp	r0, #0
 8020bec:	d1e4      	bne.n	8020bb8 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8020bee:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8020bf2:	2200      	movs	r2, #0
 8020bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8020e2c <mg_dtoa+0x354>)
 8020bf6:	4620      	mov	r0, r4
 8020bf8:	4629      	mov	r1, r5
 8020bfa:	f7ef fd15 	bl	8010628 <__aeabi_dmul>
 8020bfe:	4634      	mov	r4, r6
 8020c00:	e004      	b.n	8020c0c <mg_dtoa+0x134>
 8020c02:	2200      	movs	r2, #0
 8020c04:	4b88      	ldr	r3, [pc, #544]	@ (8020e28 <mg_dtoa+0x350>)
 8020c06:	f7ef fe39 	bl	801087c <__aeabi_ddiv>
 8020c0a:	3401      	adds	r4, #1
 8020c0c:	4544      	cmp	r4, r8
 8020c0e:	dbf8      	blt.n	8020c02 <mg_dtoa+0x12a>
  d += t;
 8020c10:	4602      	mov	r2, r0
 8020c12:	460b      	mov	r3, r1
 8020c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020c18:	f7ef fb50 	bl	80102bc <__adddf3>
 8020c1c:	4682      	mov	sl, r0
 8020c1e:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 8020c20:	46b1      	mov	r9, r6
  mul = 1.0;
 8020c22:	2400      	movs	r4, #0
 8020c24:	4d7a      	ldr	r5, [pc, #488]	@ (8020e10 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8020c26:	e009      	b.n	8020c3c <mg_dtoa+0x164>
 8020c28:	2200      	movs	r2, #0
 8020c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8020e28 <mg_dtoa+0x350>)
 8020c2c:	4620      	mov	r0, r4
 8020c2e:	4629      	mov	r1, r5
 8020c30:	f7ef fcfa 	bl	8010628 <__aeabi_dmul>
 8020c34:	4604      	mov	r4, r0
 8020c36:	460d      	mov	r5, r1
 8020c38:	f109 0901 	add.w	r9, r9, #1
 8020c3c:	2200      	movs	r2, #0
 8020c3e:	4b7a      	ldr	r3, [pc, #488]	@ (8020e28 <mg_dtoa+0x350>)
 8020c40:	4650      	mov	r0, sl
 8020c42:	4659      	mov	r1, fp
 8020c44:	f7ef ff76 	bl	8010b34 <__aeabi_dcmpge>
 8020c48:	b1b0      	cbz	r0, 8020c78 <mg_dtoa+0x1a0>
 8020c4a:	4622      	mov	r2, r4
 8020c4c:	462b      	mov	r3, r5
 8020c4e:	4650      	mov	r0, sl
 8020c50:	4659      	mov	r1, fp
 8020c52:	f7ef fe13 	bl	801087c <__aeabi_ddiv>
 8020c56:	2200      	movs	r2, #0
 8020c58:	4b73      	ldr	r3, [pc, #460]	@ (8020e28 <mg_dtoa+0x350>)
 8020c5a:	f7ef ff6b 	bl	8010b34 <__aeabi_dcmpge>
 8020c5e:	2800      	cmp	r0, #0
 8020c60:	d1e2      	bne.n	8020c28 <mg_dtoa+0x150>
 8020c62:	e009      	b.n	8020c78 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8020c64:	2200      	movs	r2, #0
 8020c66:	4b70      	ldr	r3, [pc, #448]	@ (8020e28 <mg_dtoa+0x350>)
 8020c68:	4620      	mov	r0, r4
 8020c6a:	4629      	mov	r1, r5
 8020c6c:	f7ef fe06 	bl	801087c <__aeabi_ddiv>
 8020c70:	4604      	mov	r4, r0
 8020c72:	460d      	mov	r5, r1
 8020c74:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8020c78:	2200      	movs	r2, #0
 8020c7a:	4b65      	ldr	r3, [pc, #404]	@ (8020e10 <mg_dtoa+0x338>)
 8020c7c:	4650      	mov	r0, sl
 8020c7e:	4659      	mov	r1, fp
 8020c80:	f7ef ff44 	bl	8010b0c <__aeabi_dcmplt>
 8020c84:	b158      	cbz	r0, 8020c9e <mg_dtoa+0x1c6>
 8020c86:	4622      	mov	r2, r4
 8020c88:	462b      	mov	r3, r5
 8020c8a:	4650      	mov	r0, sl
 8020c8c:	4659      	mov	r1, fp
 8020c8e:	f7ef fdf5 	bl	801087c <__aeabi_ddiv>
 8020c92:	2200      	movs	r2, #0
 8020c94:	4b5e      	ldr	r3, [pc, #376]	@ (8020e10 <mg_dtoa+0x338>)
 8020c96:	f7ef ff39 	bl	8010b0c <__aeabi_dcmplt>
 8020c9a:	2800      	cmp	r0, #0
 8020c9c:	d1e2      	bne.n	8020c64 <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 8020c9e:	45c1      	cmp	r9, r8
 8020ca0:	db02      	blt.n	8020ca8 <mg_dtoa+0x1d0>
 8020ca2:	f1b8 0f01 	cmp.w	r8, #1
 8020ca6:	dc25      	bgt.n	8020cf4 <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 8020ca8:	f1c8 0300 	rsb	r3, r8, #0
 8020cac:	454b      	cmp	r3, r9
 8020cae:	db5e      	blt.n	8020d6e <mg_dtoa+0x296>
 8020cb0:	f1b8 0f01 	cmp.w	r8, #1
 8020cb4:	dd5b      	ble.n	8020d6e <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8020cb6:	4622      	mov	r2, r4
 8020cb8:	462b      	mov	r3, r5
 8020cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020cbe:	f7ef fddd 	bl	801087c <__aeabi_ddiv>
 8020cc2:	ad08      	add	r5, sp, #32
 8020cc4:	9b07      	ldr	r3, [sp, #28]
 8020cc6:	4642      	mov	r2, r8
 8020cc8:	ec41 0b10 	vmov	d0, r0, r1
 8020ccc:	2128      	movs	r1, #40	@ 0x28
 8020cce:	4628      	mov	r0, r5
 8020cd0:	f7ff ff02 	bl	8020ad8 <mg_dtoa>
 8020cd4:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 8020cd6:	1838      	adds	r0, r7, r0
 8020cd8:	222d      	movs	r2, #45	@ 0x2d
 8020cda:	f1c9 0100 	rsb	r1, r9, #0
 8020cde:	4428      	add	r0, r5
 8020ce0:	f7fd fa8c 	bl	801e1fc <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8020ce4:	9500      	str	r5, [sp, #0]
 8020ce6:	1823      	adds	r3, r4, r0
 8020ce8:	4a51      	ldr	r2, [pc, #324]	@ (8020e30 <mg_dtoa+0x358>)
 8020cea:	9906      	ldr	r1, [sp, #24]
 8020cec:	9805      	ldr	r0, [sp, #20]
 8020cee:	f7ff fee3 	bl	8020ab8 <mg_snprintf>
 8020cf2:	e0f6      	b.n	8020ee2 <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8020cf4:	4622      	mov	r2, r4
 8020cf6:	462b      	mov	r3, r5
 8020cf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020cfc:	f7ef fdbe 	bl	801087c <__aeabi_ddiv>
 8020d00:	ad08      	add	r5, sp, #32
 8020d02:	9b07      	ldr	r3, [sp, #28]
 8020d04:	4642      	mov	r2, r8
 8020d06:	ec41 0b10 	vmov	d0, r0, r1
 8020d0a:	2128      	movs	r1, #40	@ 0x28
 8020d0c:	4628      	mov	r0, r5
 8020d0e:	f7ff fee3 	bl	8020ad8 <mg_dtoa>
 8020d12:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 8020d14:	1838      	adds	r0, r7, r0
 8020d16:	222b      	movs	r2, #43	@ 0x2b
 8020d18:	4649      	mov	r1, r9
 8020d1a:	4428      	add	r0, r5
 8020d1c:	f7fd fa6e 	bl	801e1fc <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8020d20:	9500      	str	r5, [sp, #0]
 8020d22:	1823      	adds	r3, r4, r0
 8020d24:	4a42      	ldr	r2, [pc, #264]	@ (8020e30 <mg_dtoa+0x358>)
 8020d26:	9906      	ldr	r1, [sp, #24]
 8020d28:	9805      	ldr	r0, [sp, #20]
 8020d2a:	f7ff fec5 	bl	8020ab8 <mg_snprintf>
 8020d2e:	e0d8      	b.n	8020ee2 <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8020d30:	3601      	adds	r6, #1
 8020d32:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8020d36:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8020d3a:	eb0d 0902 	add.w	r9, sp, r2
 8020d3e:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8020d42:	f7ef fc07 	bl	8010554 <__aeabi_i2d>
 8020d46:	4622      	mov	r2, r4
 8020d48:	462b      	mov	r3, r5
 8020d4a:	f7ef fc6d 	bl	8010628 <__aeabi_dmul>
 8020d4e:	4602      	mov	r2, r0
 8020d50:	460b      	mov	r3, r1
 8020d52:	4650      	mov	r0, sl
 8020d54:	4659      	mov	r1, fp
 8020d56:	f7ef faaf 	bl	80102b8 <__aeabi_dsub>
 8020d5a:	4682      	mov	sl, r0
 8020d5c:	468b      	mov	fp, r1
      t /= 10.0;
 8020d5e:	2200      	movs	r2, #0
 8020d60:	4b31      	ldr	r3, [pc, #196]	@ (8020e28 <mg_dtoa+0x350>)
 8020d62:	4620      	mov	r0, r4
 8020d64:	4629      	mov	r1, r5
 8020d66:	f7ef fd89 	bl	801087c <__aeabi_ddiv>
 8020d6a:	4604      	mov	r4, r0
 8020d6c:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8020d6e:	2200      	movs	r2, #0
 8020d70:	4b27      	ldr	r3, [pc, #156]	@ (8020e10 <mg_dtoa+0x338>)
 8020d72:	4620      	mov	r0, r4
 8020d74:	4629      	mov	r1, r5
 8020d76:	f7ef fedd 	bl	8010b34 <__aeabi_dcmpge>
 8020d7a:	b188      	cbz	r0, 8020da0 <mg_dtoa+0x2c8>
 8020d7c:	eb07 0906 	add.w	r9, r7, r6
 8020d80:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8020d84:	dc0c      	bgt.n	8020da0 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 8020d86:	4622      	mov	r2, r4
 8020d88:	462b      	mov	r3, r5
 8020d8a:	4650      	mov	r0, sl
 8020d8c:	4659      	mov	r1, fp
 8020d8e:	f7ef fd75 	bl	801087c <__aeabi_ddiv>
 8020d92:	f7ef fef9 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8020d96:	2e00      	cmp	r6, #0
 8020d98:	dcca      	bgt.n	8020d30 <mg_dtoa+0x258>
 8020d9a:	2800      	cmp	r0, #0
 8020d9c:	dcc8      	bgt.n	8020d30 <mg_dtoa+0x258>
 8020d9e:	e7d0      	b.n	8020d42 <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 8020da0:	b9ce      	cbnz	r6, 8020dd6 <mg_dtoa+0x2fe>
 8020da2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8020da6:	446b      	add	r3, sp
 8020da8:	2230      	movs	r2, #48	@ 0x30
 8020daa:	f803 2c28 	strb.w	r2, [r3, #-40]
 8020dae:	3701      	adds	r7, #1
 8020db0:	e011      	b.n	8020dd6 <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8020db2:	f106 0901 	add.w	r9, r6, #1
 8020db6:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 8020dba:	eb0d 0603 	add.w	r6, sp, r3
 8020dbe:	2330      	movs	r3, #48	@ 0x30
 8020dc0:	f806 3c28 	strb.w	r3, [r6, #-40]
 8020dc4:	2200      	movs	r2, #0
 8020dc6:	4b18      	ldr	r3, [pc, #96]	@ (8020e28 <mg_dtoa+0x350>)
 8020dc8:	4620      	mov	r0, r4
 8020dca:	4629      	mov	r1, r5
 8020dcc:	f7ef fd56 	bl	801087c <__aeabi_ddiv>
 8020dd0:	4604      	mov	r4, r0
 8020dd2:	460d      	mov	r5, r1
 8020dd4:	464e      	mov	r6, r9
 8020dd6:	2200      	movs	r2, #0
 8020dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8020e10 <mg_dtoa+0x338>)
 8020dda:	4620      	mov	r0, r4
 8020ddc:	4629      	mov	r1, r5
 8020dde:	f7ef fea9 	bl	8010b34 <__aeabi_dcmpge>
 8020de2:	b110      	cbz	r0, 8020dea <mg_dtoa+0x312>
 8020de4:	19f3      	adds	r3, r6, r7
 8020de6:	2b27      	cmp	r3, #39	@ 0x27
 8020de8:	dde3      	ble.n	8020db2 <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8020dea:	19f3      	adds	r3, r6, r7
 8020dec:	2b27      	cmp	r3, #39	@ 0x27
 8020dee:	dc05      	bgt.n	8020dfc <mg_dtoa+0x324>
 8020df0:	3701      	adds	r7, #1
 8020df2:	3348      	adds	r3, #72	@ 0x48
 8020df4:	446b      	add	r3, sp
 8020df6:	222e      	movs	r2, #46	@ 0x2e
 8020df8:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8020dfc:	a502      	add	r5, pc, #8	@ (adr r5, 8020e08 <mg_dtoa+0x330>)
 8020dfe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8020e02:	e03e      	b.n	8020e82 <mg_dtoa+0x3aa>
 8020e04:	f3af 8000 	nop.w
 8020e08:	9999999a 	.word	0x9999999a
 8020e0c:	3fb99999 	.word	0x3fb99999
 8020e10:	3ff00000 	.word	0x3ff00000
 8020e14:	08035c50 	.word	0x08035c50
 8020e18:	080374ec 	.word	0x080374ec
 8020e1c:	08036938 	.word	0x08036938
 8020e20:	0803693c 	.word	0x0803693c
 8020e24:	08036944 	.word	0x08036944
 8020e28:	40240000 	.word	0x40240000
 8020e2c:	40140000 	.word	0x40140000
 8020e30:	08036948 	.word	0x08036948
      int ch = (int) (d / t);
 8020e34:	4622      	mov	r2, r4
 8020e36:	462b      	mov	r3, r5
 8020e38:	4650      	mov	r0, sl
 8020e3a:	4659      	mov	r1, fp
 8020e3c:	f7ef fd1e 	bl	801087c <__aeabi_ddiv>
 8020e40:	f7ef fea2 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 8020e44:	3601      	adds	r6, #1
 8020e46:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8020e4a:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8020e4e:	eb0d 0902 	add.w	r9, sp, r2
 8020e52:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8020e56:	f7ef fb7d 	bl	8010554 <__aeabi_i2d>
 8020e5a:	4622      	mov	r2, r4
 8020e5c:	462b      	mov	r3, r5
 8020e5e:	f7ef fbe3 	bl	8010628 <__aeabi_dmul>
 8020e62:	4602      	mov	r2, r0
 8020e64:	460b      	mov	r3, r1
 8020e66:	4650      	mov	r0, sl
 8020e68:	4659      	mov	r1, fp
 8020e6a:	f7ef fa25 	bl	80102b8 <__aeabi_dsub>
 8020e6e:	4682      	mov	sl, r0
 8020e70:	468b      	mov	fp, r1
      t /= 10.0;
 8020e72:	2200      	movs	r2, #0
 8020e74:	4b1d      	ldr	r3, [pc, #116]	@ (8020eec <mg_dtoa+0x414>)
 8020e76:	4620      	mov	r0, r4
 8020e78:	4629      	mov	r1, r5
 8020e7a:	f7ef fcff 	bl	801087c <__aeabi_ddiv>
 8020e7e:	4604      	mov	r4, r0
 8020e80:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8020e82:	eb07 0906 	add.w	r9, r7, r6
 8020e86:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8020e8a:	dc03      	bgt.n	8020e94 <mg_dtoa+0x3bc>
 8020e8c:	4546      	cmp	r6, r8
 8020e8e:	dbd1      	blt.n	8020e34 <mg_dtoa+0x35c>
 8020e90:	9a07      	ldr	r2, [sp, #28]
 8020e92:	e000      	b.n	8020e96 <mg_dtoa+0x3be>
 8020e94:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8020e96:	b152      	cbz	r2, 8020eae <mg_dtoa+0x3d6>
 8020e98:	2e00      	cmp	r6, #0
 8020e9a:	dd08      	ble.n	8020eae <mg_dtoa+0x3d6>
 8020e9c:	19bb      	adds	r3, r7, r6
 8020e9e:	3347      	adds	r3, #71	@ 0x47
 8020ea0:	446b      	add	r3, sp
 8020ea2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8020ea6:	2b30      	cmp	r3, #48	@ 0x30
 8020ea8:	d101      	bne.n	8020eae <mg_dtoa+0x3d6>
 8020eaa:	3e01      	subs	r6, #1
 8020eac:	e7f3      	b.n	8020e96 <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8020eae:	2e00      	cmp	r6, #0
 8020eb0:	dd06      	ble.n	8020ec0 <mg_dtoa+0x3e8>
 8020eb2:	19bb      	adds	r3, r7, r6
 8020eb4:	3347      	adds	r3, #71	@ 0x47
 8020eb6:	446b      	add	r3, sp
 8020eb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8020ebc:	2b2e      	cmp	r3, #46	@ 0x2e
 8020ebe:	d013      	beq.n	8020ee8 <mg_dtoa+0x410>
  n += s;
 8020ec0:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8020ec2:	2f27      	cmp	r7, #39	@ 0x27
 8020ec4:	dd00      	ble.n	8020ec8 <mg_dtoa+0x3f0>
 8020ec6:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 8020ec8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8020ecc:	eb0d 0703 	add.w	r7, sp, r3
 8020ed0:	2300      	movs	r3, #0
 8020ed2:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8020ed6:	ab08      	add	r3, sp, #32
 8020ed8:	4a05      	ldr	r2, [pc, #20]	@ (8020ef0 <mg_dtoa+0x418>)
 8020eda:	9906      	ldr	r1, [sp, #24]
 8020edc:	9805      	ldr	r0, [sp, #20]
 8020ede:	f7ff fdeb 	bl	8020ab8 <mg_snprintf>
}
 8020ee2:	b013      	add	sp, #76	@ 0x4c
 8020ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8020ee8:	3e01      	subs	r6, #1
 8020eea:	e7e9      	b.n	8020ec0 <mg_dtoa+0x3e8>
 8020eec:	40240000 	.word	0x40240000
 8020ef0:	080374ec 	.word	0x080374ec

08020ef4 <mg_vxprintf>:
                   va_list *ap) {
 8020ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ef8:	b093      	sub	sp, #76	@ 0x4c
 8020efa:	4681      	mov	r9, r0
 8020efc:	468a      	mov	sl, r1
 8020efe:	4693      	mov	fp, r2
 8020f00:	9303      	str	r3, [sp, #12]
  size_t i = 0, n = 0;
 8020f02:	2700      	movs	r7, #0
 8020f04:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 8020f06:	e1bc      	b.n	8021282 <mg_vxprintf+0x38e>
      char pad = ' ', minus = 0, c = fmt[++i];
 8020f08:	2320      	movs	r3, #32
 8020f0a:	f88d 301f 	strb.w	r3, [sp, #31]
 8020f0e:	1c66      	adds	r6, r4, #1
 8020f10:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 8020f14:	2d23      	cmp	r5, #35	@ 0x23
 8020f16:	d00c      	beq.n	8020f32 <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8020f18:	2300      	movs	r3, #0
 8020f1a:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 8020f1c:	2d2d      	cmp	r5, #45	@ 0x2d
 8020f1e:	d10e      	bne.n	8020f3e <mg_vxprintf+0x4a>
 8020f20:	3601      	adds	r6, #1
 8020f22:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020f26:	2301      	movs	r3, #1
 8020f28:	9304      	str	r3, [sp, #16]
      if (c == '0') pad = '0', c = fmt[++i];
 8020f2a:	2d30      	cmp	r5, #48	@ 0x30
 8020f2c:	d00a      	beq.n	8020f44 <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 8020f2e:	2400      	movs	r4, #0
 8020f30:	e017      	b.n	8020f62 <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 8020f32:	1ca6      	adds	r6, r4, #2
 8020f34:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020f38:	2301      	movs	r3, #1
 8020f3a:	9302      	str	r3, [sp, #8]
 8020f3c:	e7ee      	b.n	8020f1c <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 8020f3e:	2300      	movs	r3, #0
 8020f40:	9304      	str	r3, [sp, #16]
 8020f42:	e7f2      	b.n	8020f2a <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 8020f44:	2330      	movs	r3, #48	@ 0x30
 8020f46:	f88d 301f 	strb.w	r3, [sp, #31]
 8020f4a:	3601      	adds	r6, #1
 8020f4c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020f50:	e7ed      	b.n	8020f2e <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8020f52:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8020f56:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8020f5a:	3c30      	subs	r4, #48	@ 0x30
 8020f5c:	3601      	adds	r6, #1
 8020f5e:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020f62:	4628      	mov	r0, r5
 8020f64:	f7fd f944 	bl	801e1f0 <is_digit>
 8020f68:	4601      	mov	r1, r0
 8020f6a:	2800      	cmp	r0, #0
 8020f6c:	d1f1      	bne.n	8020f52 <mg_vxprintf+0x5e>
      if (c == '.') {
 8020f6e:	2d2e      	cmp	r5, #46	@ 0x2e
 8020f70:	d002      	beq.n	8020f78 <mg_vxprintf+0x84>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8020f72:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8020f76:	e026      	b.n	8020fc6 <mg_vxprintf+0xd2>
        c = fmt[++i];
 8020f78:	1c73      	adds	r3, r6, #1
 8020f7a:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 8020f7e:	2d2a      	cmp	r5, #42	@ 0x2a
 8020f80:	d119      	bne.n	8020fb6 <mg_vxprintf+0xc2>
          pr = (size_t) va_arg(*ap, int);
 8020f82:	9803      	ldr	r0, [sp, #12]
 8020f84:	6803      	ldr	r3, [r0, #0]
 8020f86:	1d1a      	adds	r2, r3, #4
 8020f88:	6002      	str	r2, [r0, #0]
 8020f8a:	f8d3 8000 	ldr.w	r8, [r3]
          c = fmt[++i];
 8020f8e:	3602      	adds	r6, #2
 8020f90:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020f94:	e017      	b.n	8020fc6 <mg_vxprintf+0xd2>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8020f96:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8020f9a:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 8020f9e:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 8020fa2:	3601      	adds	r6, #1
 8020fa4:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020fa8:	4628      	mov	r0, r5
 8020faa:	f7fd f921 	bl	801e1f0 <is_digit>
 8020fae:	2800      	cmp	r0, #0
 8020fb0:	d1f1      	bne.n	8020f96 <mg_vxprintf+0xa2>
 8020fb2:	9905      	ldr	r1, [sp, #20]
 8020fb4:	e007      	b.n	8020fc6 <mg_vxprintf+0xd2>
          pr = 0;
 8020fb6:	f04f 0800 	mov.w	r8, #0
 8020fba:	461e      	mov	r6, r3
 8020fbc:	9005      	str	r0, [sp, #20]
 8020fbe:	e7f3      	b.n	8020fa8 <mg_vxprintf+0xb4>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8020fc0:	3601      	adds	r6, #1
 8020fc2:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8020fc6:	2d68      	cmp	r5, #104	@ 0x68
 8020fc8:	d0fa      	beq.n	8020fc0 <mg_vxprintf+0xcc>
      if (c == 'l') {
 8020fca:	2d6c      	cmp	r5, #108	@ 0x6c
 8020fcc:	d05f      	beq.n	802108e <mg_vxprintf+0x19a>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8020fce:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 8020fd0:	2d70      	cmp	r5, #112	@ 0x70
 8020fd2:	d069      	beq.n	80210a8 <mg_vxprintf+0x1b4>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8020fd4:	2d64      	cmp	r5, #100	@ 0x64
 8020fd6:	d06a      	beq.n	80210ae <mg_vxprintf+0x1ba>
 8020fd8:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 8020fdc:	2b53      	cmp	r3, #83	@ 0x53
 8020fde:	f200 81bc 	bhi.w	802135a <mg_vxprintf+0x466>
 8020fe2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8020fe6:	01b5      	.short	0x01b5
 8020fe8:	01ba01ba 	.word	0x01ba01ba
 8020fec:	01ba01ba 	.word	0x01ba01ba
 8020ff0:	01ba01ba 	.word	0x01ba01ba
 8020ff4:	01ba01ba 	.word	0x01ba01ba
 8020ff8:	01ba01ba 	.word	0x01ba01ba
 8020ffc:	01ba01ba 	.word	0x01ba01ba
 8021000:	01ba01ba 	.word	0x01ba01ba
 8021004:	01ba01ba 	.word	0x01ba01ba
 8021008:	01ba01ba 	.word	0x01ba01ba
 802100c:	01ba01ba 	.word	0x01ba01ba
 8021010:	01ba01ba 	.word	0x01ba01ba
 8021014:	01ba01ba 	.word	0x01ba01ba
 8021018:	01ba01ba 	.word	0x01ba01ba
 802101c:	01ba01ba 	.word	0x01ba01ba
 8021020:	01ba01ba 	.word	0x01ba01ba
 8021024:	01ba01ba 	.word	0x01ba01ba
 8021028:	01ba01ba 	.word	0x01ba01ba
 802102c:	01ba01ba 	.word	0x01ba01ba
 8021030:	01ba01ba 	.word	0x01ba01ba
 8021034:	014101ba 	.word	0x014101ba
 8021038:	01ba01ba 	.word	0x01ba01ba
 802103c:	01ba01ba 	.word	0x01ba01ba
 8021040:	01ba01ba 	.word	0x01ba01ba
 8021044:	01ba01ba 	.word	0x01ba01ba
 8021048:	01ba01ba 	.word	0x01ba01ba
 802104c:	01ba0065 	.word	0x01ba0065
 8021050:	01ba01ba 	.word	0x01ba01ba
 8021054:	01ba01ba 	.word	0x01ba01ba
 8021058:	01ba01ba 	.word	0x01ba01ba
 802105c:	01ba01ba 	.word	0x01ba01ba
 8021060:	016801ba 	.word	0x016801ba
 8021064:	01ba01ba 	.word	0x01ba01ba
 8021068:	00650065 	.word	0x00650065
 802106c:	01ba01ba 	.word	0x01ba01ba
 8021070:	01ba01ba 	.word	0x01ba01ba
 8021074:	015a01ba 	.word	0x015a01ba
 8021078:	01ba01ba 	.word	0x01ba01ba
 802107c:	01ba0065 	.word	0x01ba0065
 8021080:	017101ba 	.word	0x017101ba
 8021084:	006501ba 	.word	0x006501ba
 8021088:	01ba01ba 	.word	0x01ba01ba
 802108c:	008d      	.short	0x008d
        is_long++, c = fmt[++i];
 802108e:	1c73      	adds	r3, r6, #1
 8021090:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 8021094:	2d6c      	cmp	r5, #108	@ 0x6c
 8021096:	d002      	beq.n	802109e <mg_vxprintf+0x1aa>
        is_long++, c = fmt[++i];
 8021098:	461e      	mov	r6, r3
 802109a:	2201      	movs	r2, #1
 802109c:	e798      	b.n	8020fd0 <mg_vxprintf+0xdc>
        if (c == 'l') is_long++, c = fmt[++i];
 802109e:	3602      	adds	r6, #2
 80210a0:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80210a4:	2202      	movs	r2, #2
 80210a6:	e793      	b.n	8020fd0 <mg_vxprintf+0xdc>
      if (c == 'p') x = 1, is_long = 1;
 80210a8:	2201      	movs	r2, #1
 80210aa:	9202      	str	r2, [sp, #8]
 80210ac:	e792      	b.n	8020fd4 <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80210ae:	2101      	movs	r1, #1
 80210b0:	2d58      	cmp	r5, #88	@ 0x58
 80210b2:	d027      	beq.n	8021104 <mg_vxprintf+0x210>
 80210b4:	2d70      	cmp	r5, #112	@ 0x70
 80210b6:	d021      	beq.n	80210fc <mg_vxprintf+0x208>
 80210b8:	2300      	movs	r3, #0
 80210ba:	4618      	mov	r0, r3
        size_t xl = x ? 2 : 0;
 80210bc:	9b02      	ldr	r3, [sp, #8]
 80210be:	b10b      	cbz	r3, 80210c4 <mg_vxprintf+0x1d0>
 80210c0:	2302      	movs	r3, #2
 80210c2:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 80210c4:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 80210c8:	b2db      	uxtb	r3, r3
 80210ca:	2b01      	cmp	r3, #1
 80210cc:	d91c      	bls.n	8021108 <mg_vxprintf+0x214>
        } else if (is_long == 2) {
 80210ce:	2a02      	cmp	r2, #2
 80210d0:	d037      	beq.n	8021142 <mg_vxprintf+0x24e>
        } else if (is_long == 1) {
 80210d2:	2a01      	cmp	r2, #1
 80210d4:	d046      	beq.n	8021164 <mg_vxprintf+0x270>
          int v = va_arg(*ap, int);
 80210d6:	9b03      	ldr	r3, [sp, #12]
 80210d8:	f8d3 c000 	ldr.w	ip, [r3]
 80210dc:	f10c 0204 	add.w	r2, ip, #4
 80210e0:	601a      	str	r2, [r3, #0]
 80210e2:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 80210e6:	2d64      	cmp	r5, #100	@ 0x64
 80210e8:	d052      	beq.n	8021190 <mg_vxprintf+0x29c>
 80210ea:	461a      	mov	r2, r3
 80210ec:	2300      	movs	r3, #0
 80210ee:	9001      	str	r0, [sp, #4]
 80210f0:	9100      	str	r1, [sp, #0]
 80210f2:	a808      	add	r0, sp, #32
 80210f4:	f7fd f8de 	bl	801e2b4 <mg_lld>
 80210f8:	4605      	mov	r5, r0
 80210fa:	e01c      	b.n	8021136 <mg_vxprintf+0x242>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80210fc:	2301      	movs	r3, #1
 80210fe:	e7dc      	b.n	80210ba <mg_vxprintf+0x1c6>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8021100:	2301      	movs	r3, #1
 8021102:	e7da      	b.n	80210ba <mg_vxprintf+0x1c6>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8021104:	2301      	movs	r3, #1
 8021106:	e7d8      	b.n	80210ba <mg_vxprintf+0x1c6>
          double v = va_arg(*ap, double);
 8021108:	9903      	ldr	r1, [sp, #12]
 802110a:	680b      	ldr	r3, [r1, #0]
 802110c:	3307      	adds	r3, #7
 802110e:	f023 0307 	bic.w	r3, r3, #7
 8021112:	f103 0208 	add.w	r2, r3, #8
 8021116:	600a      	str	r2, [r1, #0]
 8021118:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 802111c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8021120:	d00c      	beq.n	802113c <mg_vxprintf+0x248>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8021122:	2d67      	cmp	r5, #103	@ 0x67
 8021124:	bf14      	ite	ne
 8021126:	2300      	movne	r3, #0
 8021128:	2301      	moveq	r3, #1
 802112a:	4642      	mov	r2, r8
 802112c:	2128      	movs	r1, #40	@ 0x28
 802112e:	a808      	add	r0, sp, #32
 8021130:	f7ff fcd2 	bl	8020ad8 <mg_dtoa>
 8021134:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 8021136:	2300      	movs	r3, #0
 8021138:	9a02      	ldr	r2, [sp, #8]
 802113a:	e02e      	b.n	802119a <mg_vxprintf+0x2a6>
          if (pr == ~0U) pr = 6;
 802113c:	f04f 0806 	mov.w	r8, #6
 8021140:	e7ef      	b.n	8021122 <mg_vxprintf+0x22e>
          int64_t v = va_arg(*ap, int64_t);
 8021142:	9d03      	ldr	r5, [sp, #12]
 8021144:	682b      	ldr	r3, [r5, #0]
 8021146:	3307      	adds	r3, #7
 8021148:	f023 0307 	bic.w	r3, r3, #7
 802114c:	f103 0208 	add.w	r2, r3, #8
 8021150:	602a      	str	r2, [r5, #0]
 8021152:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 8021156:	9001      	str	r0, [sp, #4]
 8021158:	9100      	str	r1, [sp, #0]
 802115a:	a808      	add	r0, sp, #32
 802115c:	f7fd f8aa 	bl	801e2b4 <mg_lld>
 8021160:	4605      	mov	r5, r0
 8021162:	e7e8      	b.n	8021136 <mg_vxprintf+0x242>
          long v = va_arg(*ap, long);
 8021164:	9b03      	ldr	r3, [sp, #12]
 8021166:	f8d3 c000 	ldr.w	ip, [r3]
 802116a:	f10c 0204 	add.w	r2, ip, #4
 802116e:	601a      	str	r2, [r3, #0]
 8021170:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8021174:	2d64      	cmp	r5, #100	@ 0x64
 8021176:	d008      	beq.n	802118a <mg_vxprintf+0x296>
 8021178:	461a      	mov	r2, r3
 802117a:	2300      	movs	r3, #0
 802117c:	9001      	str	r0, [sp, #4]
 802117e:	9100      	str	r1, [sp, #0]
 8021180:	a808      	add	r0, sp, #32
 8021182:	f7fd f897 	bl	801e2b4 <mg_lld>
 8021186:	4605      	mov	r5, r0
 8021188:	e7d5      	b.n	8021136 <mg_vxprintf+0x242>
 802118a:	461a      	mov	r2, r3
 802118c:	17db      	asrs	r3, r3, #31
 802118e:	e7f5      	b.n	802117c <mg_vxprintf+0x288>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8021190:	461a      	mov	r2, r3
 8021192:	17db      	asrs	r3, r3, #31
 8021194:	e7ab      	b.n	80210ee <mg_vxprintf+0x1fa>
        for (j = 0; j < xl && w > 0; j++) w--;
 8021196:	3c01      	subs	r4, #1
 8021198:	3301      	adds	r3, #1
 802119a:	4293      	cmp	r3, r2
 802119c:	d225      	bcs.n	80211ea <mg_vxprintf+0x2f6>
 802119e:	2c00      	cmp	r4, #0
 80211a0:	d1f9      	bne.n	8021196 <mg_vxprintf+0x2a2>
 80211a2:	46a0      	mov	r8, r4
 80211a4:	9605      	str	r6, [sp, #20]
 80211a6:	9e04      	ldr	r6, [sp, #16]
 80211a8:	e009      	b.n	80211be <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 80211aa:	2301      	movs	r3, #1
 80211ac:	f10d 021f 	add.w	r2, sp, #31
 80211b0:	4651      	mov	r1, sl
 80211b2:	4648      	mov	r0, r9
 80211b4:	f7fd f914 	bl	801e3e0 <scpy>
 80211b8:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80211ba:	f108 0801 	add.w	r8, r8, #1
 80211be:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80211c2:	2b20      	cmp	r3, #32
 80211c4:	d106      	bne.n	80211d4 <mg_vxprintf+0x2e0>
 80211c6:	b92e      	cbnz	r6, 80211d4 <mg_vxprintf+0x2e0>
 80211c8:	42a5      	cmp	r5, r4
 80211ca:	d203      	bcs.n	80211d4 <mg_vxprintf+0x2e0>
 80211cc:	eb08 0305 	add.w	r3, r8, r5
 80211d0:	42a3      	cmp	r3, r4
 80211d2:	d3ea      	bcc.n	80211aa <mg_vxprintf+0x2b6>
        n += scpy(out, param, (char *) "0x", xl);
 80211d4:	9e05      	ldr	r6, [sp, #20]
 80211d6:	9b02      	ldr	r3, [sp, #8]
 80211d8:	4a6b      	ldr	r2, [pc, #428]	@ (8021388 <mg_vxprintf+0x494>)
 80211da:	4651      	mov	r1, sl
 80211dc:	4648      	mov	r0, r9
 80211de:	f7fd f8ff 	bl	801e3e0 <scpy>
 80211e2:	eb07 0800 	add.w	r8, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80211e6:	2700      	movs	r7, #0
 80211e8:	e00d      	b.n	8021206 <mg_vxprintf+0x312>
 80211ea:	f04f 0800 	mov.w	r8, #0
 80211ee:	9605      	str	r6, [sp, #20]
 80211f0:	9e04      	ldr	r6, [sp, #16]
 80211f2:	e7e4      	b.n	80211be <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 80211f4:	2301      	movs	r3, #1
 80211f6:	f10d 021f 	add.w	r2, sp, #31
 80211fa:	4651      	mov	r1, sl
 80211fc:	4648      	mov	r0, r9
 80211fe:	f7fd f8ef 	bl	801e3e0 <scpy>
 8021202:	4480      	add	r8, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8021204:	3701      	adds	r7, #1
 8021206:	f89d 301f 	ldrb.w	r3, [sp, #31]
 802120a:	2b30      	cmp	r3, #48	@ 0x30
 802120c:	d104      	bne.n	8021218 <mg_vxprintf+0x324>
 802120e:	42a5      	cmp	r5, r4
 8021210:	d202      	bcs.n	8021218 <mg_vxprintf+0x324>
 8021212:	197b      	adds	r3, r7, r5
 8021214:	42a3      	cmp	r3, r4
 8021216:	d3ed      	bcc.n	80211f4 <mg_vxprintf+0x300>
        n += scpy(out, param, tmp, k);
 8021218:	462b      	mov	r3, r5
 802121a:	aa08      	add	r2, sp, #32
 802121c:	4651      	mov	r1, sl
 802121e:	4648      	mov	r0, r9
 8021220:	f7fd f8de 	bl	801e3e0 <scpy>
 8021224:	eb08 0700 	add.w	r7, r8, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8021228:	f04f 0800 	mov.w	r8, #0
 802122c:	9602      	str	r6, [sp, #8]
 802122e:	9e04      	ldr	r6, [sp, #16]
 8021230:	e009      	b.n	8021246 <mg_vxprintf+0x352>
          n += scpy(out, param, &pad, 1);
 8021232:	2301      	movs	r3, #1
 8021234:	f10d 021f 	add.w	r2, sp, #31
 8021238:	4651      	mov	r1, sl
 802123a:	4648      	mov	r0, r9
 802123c:	f7fd f8d0 	bl	801e3e0 <scpy>
 8021240:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8021242:	f108 0801 	add.w	r8, r8, #1
 8021246:	f89d 301f 	ldrb.w	r3, [sp, #31]
 802124a:	2b20      	cmp	r3, #32
 802124c:	f040 808d 	bne.w	802136a <mg_vxprintf+0x476>
 8021250:	2e00      	cmp	r6, #0
 8021252:	f000 808c 	beq.w	802136e <mg_vxprintf+0x47a>
 8021256:	42a5      	cmp	r5, r4
 8021258:	f080 808b 	bcs.w	8021372 <mg_vxprintf+0x47e>
 802125c:	eb08 0305 	add.w	r3, r8, r5
 8021260:	42a3      	cmp	r3, r4
 8021262:	d3e6      	bcc.n	8021232 <mg_vxprintf+0x33e>
 8021264:	9e02      	ldr	r6, [sp, #8]
 8021266:	e00b      	b.n	8021280 <mg_vxprintf+0x38c>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8021268:	9903      	ldr	r1, [sp, #12]
 802126a:	680b      	ldr	r3, [r1, #0]
 802126c:	1d1a      	adds	r2, r3, #4
 802126e:	600a      	str	r2, [r1, #0]
 8021270:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 8021272:	9a03      	ldr	r2, [sp, #12]
 8021274:	4651      	mov	r1, sl
 8021276:	4648      	mov	r0, r9
 8021278:	47a0      	blx	r4
 802127a:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 802127c:	2d6d      	cmp	r5, #109	@ 0x6d
 802127e:	d015      	beq.n	80212ac <mg_vxprintf+0x3b8>
      i++;
 8021280:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 8021282:	f81b 0004 	ldrb.w	r0, [fp, r4]
 8021286:	2800      	cmp	r0, #0
 8021288:	d079      	beq.n	802137e <mg_vxprintf+0x48a>
    if (fmt[i] == '%') {
 802128a:	2825      	cmp	r0, #37	@ 0x25
 802128c:	f43f ae3c 	beq.w	8020f08 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 8021290:	4651      	mov	r1, sl
 8021292:	47c8      	blx	r9
 8021294:	3701      	adds	r7, #1
 8021296:	3401      	adds	r4, #1
 8021298:	e7f3      	b.n	8021282 <mg_vxprintf+0x38e>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 802129a:	9903      	ldr	r1, [sp, #12]
 802129c:	680b      	ldr	r3, [r1, #0]
 802129e:	1d1a      	adds	r2, r3, #4
 80212a0:	600a      	str	r2, [r1, #0]
 80212a2:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 80212a4:	4651      	mov	r1, sl
 80212a6:	2022      	movs	r0, #34	@ 0x22
 80212a8:	47c8      	blx	r9
 80212aa:	e7e2      	b.n	8021272 <mg_vxprintf+0x37e>
        if (c == 'm') n += 2, out('"', param);
 80212ac:	3702      	adds	r7, #2
 80212ae:	4651      	mov	r1, sl
 80212b0:	2022      	movs	r0, #34	@ 0x22
 80212b2:	47c8      	blx	r9
 80212b4:	e7e4      	b.n	8021280 <mg_vxprintf+0x38c>
        int ch = va_arg(*ap, int);
 80212b6:	9903      	ldr	r1, [sp, #12]
 80212b8:	680b      	ldr	r3, [r1, #0]
 80212ba:	1d1a      	adds	r2, r3, #4
 80212bc:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 80212be:	4651      	mov	r1, sl
 80212c0:	7818      	ldrb	r0, [r3, #0]
 80212c2:	47c8      	blx	r9
        n++;
 80212c4:	3701      	adds	r7, #1
 80212c6:	e7db      	b.n	8021280 <mg_vxprintf+0x38c>
        char *p = va_arg(*ap, char *);
 80212c8:	9903      	ldr	r1, [sp, #12]
 80212ca:	680b      	ldr	r3, [r1, #0]
 80212cc:	1d1a      	adds	r2, r3, #4
 80212ce:	600a      	str	r2, [r1, #0]
 80212d0:	681b      	ldr	r3, [r3, #0]
 80212d2:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80212d4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80212d8:	d003      	beq.n	80212e2 <mg_vxprintf+0x3ee>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80212da:	2500      	movs	r5, #0
 80212dc:	9605      	str	r6, [sp, #20]
 80212de:	9e04      	ldr	r6, [sp, #16]
 80212e0:	e011      	b.n	8021306 <mg_vxprintf+0x412>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80212e2:	4618      	mov	r0, r3
 80212e4:	b11b      	cbz	r3, 80212ee <mg_vxprintf+0x3fa>
 80212e6:	f7ee ffdb 	bl	80102a0 <strlen>
 80212ea:	4680      	mov	r8, r0
 80212ec:	e7f5      	b.n	80212da <mg_vxprintf+0x3e6>
 80212ee:	f04f 0800 	mov.w	r8, #0
 80212f2:	e7f2      	b.n	80212da <mg_vxprintf+0x3e6>
          n += scpy(out, param, &pad, 1);
 80212f4:	2301      	movs	r3, #1
 80212f6:	f10d 021f 	add.w	r2, sp, #31
 80212fa:	4651      	mov	r1, sl
 80212fc:	4648      	mov	r0, r9
 80212fe:	f7fd f86f 	bl	801e3e0 <scpy>
 8021302:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8021304:	3501      	adds	r5, #1
 8021306:	b92e      	cbnz	r6, 8021314 <mg_vxprintf+0x420>
 8021308:	4544      	cmp	r4, r8
 802130a:	d903      	bls.n	8021314 <mg_vxprintf+0x420>
 802130c:	eb05 0308 	add.w	r3, r5, r8
 8021310:	42a3      	cmp	r3, r4
 8021312:	d3ef      	bcc.n	80212f4 <mg_vxprintf+0x400>
        n += scpy(out, param, p, pr);
 8021314:	9e05      	ldr	r6, [sp, #20]
 8021316:	4643      	mov	r3, r8
 8021318:	9a02      	ldr	r2, [sp, #8]
 802131a:	4651      	mov	r1, sl
 802131c:	4648      	mov	r0, r9
 802131e:	f7fd f85f 	bl	801e3e0 <scpy>
 8021322:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8021324:	2500      	movs	r5, #0
 8021326:	9602      	str	r6, [sp, #8]
 8021328:	9e04      	ldr	r6, [sp, #16]
 802132a:	e008      	b.n	802133e <mg_vxprintf+0x44a>
          n += scpy(out, param, &pad, 1);
 802132c:	2301      	movs	r3, #1
 802132e:	f10d 021f 	add.w	r2, sp, #31
 8021332:	4651      	mov	r1, sl
 8021334:	4648      	mov	r0, r9
 8021336:	f7fd f853 	bl	801e3e0 <scpy>
 802133a:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 802133c:	3501      	adds	r5, #1
 802133e:	b1d6      	cbz	r6, 8021376 <mg_vxprintf+0x482>
 8021340:	4544      	cmp	r4, r8
 8021342:	d91a      	bls.n	802137a <mg_vxprintf+0x486>
 8021344:	eb05 0308 	add.w	r3, r5, r8
 8021348:	42a3      	cmp	r3, r4
 802134a:	d3ef      	bcc.n	802132c <mg_vxprintf+0x438>
 802134c:	9e02      	ldr	r6, [sp, #8]
 802134e:	e797      	b.n	8021280 <mg_vxprintf+0x38c>
        out('%', param);
 8021350:	4651      	mov	r1, sl
 8021352:	2025      	movs	r0, #37	@ 0x25
 8021354:	47c8      	blx	r9
        n++;
 8021356:	3701      	adds	r7, #1
 8021358:	e792      	b.n	8021280 <mg_vxprintf+0x38c>
        out('%', param);
 802135a:	4651      	mov	r1, sl
 802135c:	2025      	movs	r0, #37	@ 0x25
 802135e:	47c8      	blx	r9
        out(c, param);
 8021360:	4651      	mov	r1, sl
 8021362:	4628      	mov	r0, r5
 8021364:	47c8      	blx	r9
        n += 2;
 8021366:	3702      	adds	r7, #2
 8021368:	e78a      	b.n	8021280 <mg_vxprintf+0x38c>
 802136a:	9e02      	ldr	r6, [sp, #8]
 802136c:	e788      	b.n	8021280 <mg_vxprintf+0x38c>
 802136e:	9e02      	ldr	r6, [sp, #8]
 8021370:	e786      	b.n	8021280 <mg_vxprintf+0x38c>
 8021372:	9e02      	ldr	r6, [sp, #8]
 8021374:	e784      	b.n	8021280 <mg_vxprintf+0x38c>
 8021376:	9e02      	ldr	r6, [sp, #8]
 8021378:	e782      	b.n	8021280 <mg_vxprintf+0x38c>
 802137a:	9e02      	ldr	r6, [sp, #8]
 802137c:	e780      	b.n	8021280 <mg_vxprintf+0x38c>
}
 802137e:	4638      	mov	r0, r7
 8021380:	b013      	add	sp, #76	@ 0x4c
 8021382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021386:	bf00      	nop
 8021388:	08036950 	.word	0x08036950

0802138c <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 802138c:	b40c      	push	{r2, r3}
 802138e:	b500      	push	{lr}
 8021390:	b083      	sub	sp, #12
 8021392:	ab04      	add	r3, sp, #16
 8021394:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8021398:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 802139a:	ab01      	add	r3, sp, #4
 802139c:	f7ff fdaa 	bl	8020ef4 <mg_vxprintf>
}
 80213a0:	b003      	add	sp, #12
 80213a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80213a6:	b002      	add	sp, #8
 80213a8:	4770      	bx	lr
	...

080213ac <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 80213ac:	b530      	push	{r4, r5, lr}
 80213ae:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 80213b0:	7853      	ldrb	r3, [r2, #1]
 80213b2:	7894      	ldrb	r4, [r2, #2]
 80213b4:	78d5      	ldrb	r5, [r2, #3]
 80213b6:	9502      	str	r5, [sp, #8]
 80213b8:	9401      	str	r4, [sp, #4]
 80213ba:	9300      	str	r3, [sp, #0]
 80213bc:	7813      	ldrb	r3, [r2, #0]
 80213be:	4a02      	ldr	r2, [pc, #8]	@ (80213c8 <print_ip4+0x1c>)
 80213c0:	f7ff ffe4 	bl	802138c <mg_xprintf>
}
 80213c4:	b005      	add	sp, #20
 80213c6:	bd30      	pop	{r4, r5, pc}
 80213c8:	08036954 	.word	0x08036954

080213cc <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 80213cc:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 80213ce:	6813      	ldr	r3, [r2, #0]
 80213d0:	1d1c      	adds	r4, r3, #4
 80213d2:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 80213d4:	681a      	ldr	r2, [r3, #0]
 80213d6:	f7ff ffe9 	bl	80213ac <print_ip4>
}
 80213da:	bd10      	pop	{r4, pc}

080213dc <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 80213dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80213de:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 80213e0:	6813      	ldr	r3, [r2, #0]
 80213e2:	1d1c      	adds	r4, r3, #4
 80213e4:	6014      	str	r4, [r2, #0]
 80213e6:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80213e8:	7813      	ldrb	r3, [r2, #0]
 80213ea:	7854      	ldrb	r4, [r2, #1]
 80213ec:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 80213ee:	78d6      	ldrb	r6, [r2, #3]
 80213f0:	7917      	ldrb	r7, [r2, #4]
 80213f2:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80213f4:	9204      	str	r2, [sp, #16]
 80213f6:	9703      	str	r7, [sp, #12]
 80213f8:	9602      	str	r6, [sp, #8]
 80213fa:	9501      	str	r5, [sp, #4]
 80213fc:	9400      	str	r4, [sp, #0]
 80213fe:	4a02      	ldr	r2, [pc, #8]	@ (8021408 <mg_print_mac+0x2c>)
 8021400:	f7ff ffc4 	bl	802138c <mg_xprintf>
}
 8021404:	b007      	add	sp, #28
 8021406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021408:	08036960 	.word	0x08036960

0802140c <mg_log>:
void mg_log(const char *fmt, ...) {
 802140c:	b40f      	push	{r0, r1, r2, r3}
 802140e:	b500      	push	{lr}
 8021410:	b083      	sub	sp, #12
 8021412:	ab04      	add	r3, sp, #16
 8021414:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8021418:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 802141a:	ab01      	add	r3, sp, #4
 802141c:	4907      	ldr	r1, [pc, #28]	@ (802143c <mg_log+0x30>)
 802141e:	6809      	ldr	r1, [r1, #0]
 8021420:	4807      	ldr	r0, [pc, #28]	@ (8021440 <mg_log+0x34>)
 8021422:	6800      	ldr	r0, [r0, #0]
 8021424:	f7ff fd66 	bl	8020ef4 <mg_vxprintf>
  logs("\r\n", 2);
 8021428:	2102      	movs	r1, #2
 802142a:	4806      	ldr	r0, [pc, #24]	@ (8021444 <mg_log+0x38>)
 802142c:	f7fd fdb2 	bl	801ef94 <logs>
}
 8021430:	b003      	add	sp, #12
 8021432:	f85d eb04 	ldr.w	lr, [sp], #4
 8021436:	b004      	add	sp, #16
 8021438:	4770      	bx	lr
 802143a:	bf00      	nop
 802143c:	20018020 	.word	0x20018020
 8021440:	200000a4 	.word	0x200000a4
 8021444:	08037350 	.word	0x08037350

08021448 <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8021448:	b538      	push	{r3, r4, r5, lr}
 802144a:	4604      	mov	r4, r0
 802144c:	4613      	mov	r3, r2
  size_t old = c->send.len;
 802144e:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8021450:	460a      	mov	r2, r1
 8021452:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 8021456:	4803      	ldr	r0, [pc, #12]	@ (8021464 <mg_vprintf+0x1c>)
 8021458:	f7ff fd4c 	bl	8020ef4 <mg_vxprintf>
  return c->send.len - old;
 802145c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 802145e:	1b40      	subs	r0, r0, r5
 8021460:	bd38      	pop	{r3, r4, r5, pc}
 8021462:	bf00      	nop
 8021464:	080241b7 	.word	0x080241b7

08021468 <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8021468:	b40e      	push	{r1, r2, r3}
 802146a:	b500      	push	{lr}
 802146c:	b082      	sub	sp, #8
 802146e:	ab03      	add	r3, sp, #12
 8021470:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 8021474:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 8021476:	aa01      	add	r2, sp, #4
 8021478:	f7ff ffe6 	bl	8021448 <mg_vprintf>
}
 802147c:	b002      	add	sp, #8
 802147e:	f85d eb04 	ldr.w	lr, [sp], #4
 8021482:	b003      	add	sp, #12
 8021484:	4770      	bx	lr
	...

08021488 <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8021488:	b530      	push	{r4, r5, lr}
 802148a:	b085      	sub	sp, #20
 802148c:	4605      	mov	r5, r0
 802148e:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8021490:	9000      	str	r0, [sp, #0]
 8021492:	9101      	str	r1, [sp, #4]
 8021494:	2100      	movs	r1, #0
 8021496:	9102      	str	r1, [sp, #8]
 8021498:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 802149a:	4669      	mov	r1, sp
 802149c:	4804      	ldr	r0, [pc, #16]	@ (80214b0 <mg_vsnprintf+0x28>)
 802149e:	f7ff fd29 	bl	8020ef4 <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 80214a2:	4284      	cmp	r4, r0
 80214a4:	d901      	bls.n	80214aa <mg_vsnprintf+0x22>
 80214a6:	2300      	movs	r3, #0
 80214a8:	542b      	strb	r3, [r5, r0]
}
 80214aa:	b005      	add	sp, #20
 80214ac:	bd30      	pop	{r4, r5, pc}
 80214ae:	bf00      	nop
 80214b0:	080241c1 	.word	0x080241c1

080214b4 <mg_http_reply>:
                   const char *fmt, ...) {
 80214b4:	b408      	push	{r3}
 80214b6:	b570      	push	{r4, r5, r6, lr}
 80214b8:	b085      	sub	sp, #20
 80214ba:	4604      	mov	r4, r0
 80214bc:	460e      	mov	r6, r1
 80214be:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80214c0:	4608      	mov	r0, r1
 80214c2:	f7fd f8d9 	bl	801e678 <mg_http_status_code_str>
 80214c6:	4603      	mov	r3, r0
 80214c8:	b1ed      	cbz	r5, 8021506 <mg_http_reply+0x52>
 80214ca:	9500      	str	r5, [sp, #0]
 80214cc:	4632      	mov	r2, r6
 80214ce:	4916      	ldr	r1, [pc, #88]	@ (8021528 <mg_http_reply+0x74>)
 80214d0:	4620      	mov	r0, r4
 80214d2:	f7ff ffc9 	bl	8021468 <mg_printf>
  len = c->send.len;
 80214d6:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 80214d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80214da:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 80214dc:	ab03      	add	r3, sp, #12
 80214de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80214e0:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 80214e4:	4811      	ldr	r0, [pc, #68]	@ (802152c <mg_http_reply+0x78>)
 80214e6:	f7ff fd05 	bl	8020ef4 <mg_vxprintf>
  if (c->send.len > 16) {
 80214ea:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80214ec:	2b10      	cmp	r3, #16
 80214ee:	d80c      	bhi.n	802150a <mg_http_reply+0x56>
  c->is_resp = 0;
 80214f0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80214f4:	f36f 13c7 	bfc	r3, #7, #1
 80214f8:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80214fc:	b005      	add	sp, #20
 80214fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021502:	b001      	add	sp, #4
 8021504:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8021506:	4d0a      	ldr	r5, [pc, #40]	@ (8021530 <mg_http_reply+0x7c>)
 8021508:	e7df      	b.n	80214ca <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 802150a:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 802150c:	f1a5 000f 	sub.w	r0, r5, #15
 8021510:	1b5b      	subs	r3, r3, r5
 8021512:	4a08      	ldr	r2, [pc, #32]	@ (8021534 <mg_http_reply+0x80>)
 8021514:	210b      	movs	r1, #11
 8021516:	4430      	add	r0, r6
 8021518:	f7ff face 	bl	8020ab8 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 802151c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 802151e:	4405      	add	r5, r0
 8021520:	3d0f      	subs	r5, #15
 8021522:	2220      	movs	r2, #32
 8021524:	555a      	strb	r2, [r3, r5]
 8021526:	e7e3      	b.n	80214f0 <mg_http_reply+0x3c>
 8021528:	08036980 	.word	0x08036980
 802152c:	080241b7 	.word	0x080241b7
 8021530:	08033984 	.word	0x08033984
 8021534:	080369b4 	.word	0x080369b4

08021538 <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8021538:	b510      	push	{r4, lr}
 802153a:	b084      	sub	sp, #16
 802153c:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 802153e:	9202      	str	r2, [sp, #8]
 8021540:	2300      	movs	r3, #0
 8021542:	9303      	str	r3, [sp, #12]
 8021544:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8021548:	e9cd 2300 	strd	r2, r3, [sp]
 802154c:	4a02      	ldr	r2, [pc, #8]	@ (8021558 <mg_http_etag+0x20>)
 802154e:	f7ff fab3 	bl	8020ab8 <mg_snprintf>
}
 8021552:	4620      	mov	r0, r4
 8021554:	b004      	add	sp, #16
 8021556:	bd10      	pop	{r4, pc}
 8021558:	080369bc 	.word	0x080369bc

0802155c <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 802155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021560:	b083      	sub	sp, #12
 8021562:	4607      	mov	r7, r0
 8021564:	4689      	mov	r9, r1
 8021566:	4692      	mov	sl, r2
 8021568:	4698      	mov	r8, r3
  size_t i, n = 0;
 802156a:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 802156c:	462c      	mov	r4, r5
 802156e:	e00c      	b.n	802158a <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8021570:	f8cd b004 	str.w	fp, [sp, #4]
 8021574:	2301      	movs	r3, #1
 8021576:	9300      	str	r3, [sp, #0]
 8021578:	4b16      	ldr	r3, [pc, #88]	@ (80215d4 <mg_url_encode+0x78>)
 802157a:	4a17      	ldr	r2, [pc, #92]	@ (80215d8 <mg_url_encode+0x7c>)
 802157c:	2104      	movs	r1, #4
 802157e:	eb0a 0005 	add.w	r0, sl, r5
 8021582:	f7ff fa99 	bl	8020ab8 <mg_snprintf>
      n += 3;
 8021586:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 8021588:	3401      	adds	r4, #1
 802158a:	454c      	cmp	r4, r9
 802158c:	d20e      	bcs.n	80215ac <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 802158e:	eb07 0b04 	add.w	fp, r7, r4
 8021592:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 8021594:	1d2b      	adds	r3, r5, #4
 8021596:	4543      	cmp	r3, r8
 8021598:	d216      	bcs.n	80215c8 <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 802159a:	4630      	mov	r0, r6
 802159c:	f7fd fb68 	bl	801ec70 <mg_is_url_safe>
 80215a0:	2800      	cmp	r0, #0
 80215a2:	d0e5      	beq.n	8021570 <mg_url_encode+0x14>
      buf[n++] = s[i];
 80215a4:	f80a 6005 	strb.w	r6, [sl, r5]
 80215a8:	3501      	adds	r5, #1
 80215aa:	e7ed      	b.n	8021588 <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 80215ac:	f1b8 0f00 	cmp.w	r8, #0
 80215b0:	d00b      	beq.n	80215ca <mg_url_encode+0x6e>
 80215b2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80215b6:	45a8      	cmp	r8, r5
 80215b8:	d902      	bls.n	80215c0 <mg_url_encode+0x64>
 80215ba:	2300      	movs	r3, #0
 80215bc:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 80215c0:	2300      	movs	r3, #0
 80215c2:	f80a 3008 	strb.w	r3, [sl, r8]
 80215c6:	e000      	b.n	80215ca <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 80215c8:	2500      	movs	r5, #0
}
 80215ca:	4628      	mov	r0, r5
 80215cc:	b003      	add	sp, #12
 80215ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215d2:	bf00      	nop
 80215d4:	0801f931 	.word	0x0801f931
 80215d8:	080369c8 	.word	0x080369c8

080215dc <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 80215dc:	b510      	push	{r4, lr}
 80215de:	b084      	sub	sp, #16
 80215e0:	4602      	mov	r2, r0
 80215e2:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 80215e4:	2400      	movs	r4, #0
 80215e6:	9400      	str	r4, [sp, #0]
 80215e8:	9401      	str	r4, [sp, #4]
 80215ea:	9402      	str	r4, [sp, #8]
 80215ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80215f0:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 80215f2:	4669      	mov	r1, sp
 80215f4:	4802      	ldr	r0, [pc, #8]	@ (8021600 <mg_vmprintf+0x24>)
 80215f6:	f7ff fc7d 	bl	8020ef4 <mg_vxprintf>
}
 80215fa:	9800      	ldr	r0, [sp, #0]
 80215fc:	b004      	add	sp, #16
 80215fe:	bd10      	pop	{r4, pc}
 8021600:	080241b7 	.word	0x080241b7

08021604 <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 8021604:	b40f      	push	{r0, r1, r2, r3}
 8021606:	b500      	push	{lr}
 8021608:	b083      	sub	sp, #12
 802160a:	ab04      	add	r3, sp, #16
 802160c:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 8021610:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 8021612:	a901      	add	r1, sp, #4
 8021614:	f7ff ffe2 	bl	80215dc <mg_vmprintf>
}
 8021618:	b003      	add	sp, #12
 802161a:	f85d eb04 	ldr.w	lr, [sp], #4
 802161e:	b004      	add	sp, #16
 8021620:	4770      	bx	lr

08021622 <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8021622:	b538      	push	{r3, r4, r5, lr}
 8021624:	4604      	mov	r4, r0
 8021626:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 8021628:	6882      	ldr	r2, [r0, #8]
 802162a:	68c3      	ldr	r3, [r0, #12]
 802162c:	429a      	cmp	r2, r3
 802162e:	d107      	bne.n	8021640 <mg_queue_next+0x1e>
  size_t len = 0;
 8021630:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8021632:	b125      	cbz	r5, 802163e <mg_queue_next+0x1c>
 8021634:	6823      	ldr	r3, [r4, #0]
 8021636:	68a2      	ldr	r2, [r4, #8]
 8021638:	3204      	adds	r2, #4
 802163a:	4413      	add	r3, r2
 802163c:	602b      	str	r3, [r5, #0]
}
 802163e:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 8021640:	f7fe fc35 	bl	801feae <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 8021644:	2800      	cmp	r0, #0
 8021646:	d1f4      	bne.n	8021632 <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 8021648:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 802164a:	68e2      	ldr	r2, [r4, #12]
 802164c:	68a3      	ldr	r3, [r4, #8]
 802164e:	429a      	cmp	r2, r3
 8021650:	d9ef      	bls.n	8021632 <mg_queue_next+0x10>
 8021652:	4620      	mov	r0, r4
 8021654:	f7fe fc2b 	bl	801feae <mg_queue_read_len>
 8021658:	e7eb      	b.n	8021632 <mg_queue_next+0x10>

0802165a <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 802165a:	6883      	ldr	r3, [r0, #8]
 802165c:	440b      	add	r3, r1
 802165e:	3304      	adds	r3, #4
 8021660:	6083      	str	r3, [r0, #8]
}
 8021662:	4770      	bx	lr

08021664 <mg_http_serve_ssi>:
                       const char *fullpath) {
 8021664:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8021666:	4b03      	ldr	r3, [pc, #12]	@ (8021674 <mg_http_serve_ssi+0x10>)
 8021668:	2200      	movs	r2, #0
 802166a:	f240 11f5 	movw	r1, #501	@ 0x1f5
 802166e:	f7ff ff21 	bl	80214b4 <mg_http_reply>
}
 8021672:	bd08      	pop	{r3, pc}
 8021674:	080369d0 	.word	0x080369d0

08021678 <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 8021678:	b510      	push	{r4, lr}
 802167a:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 802167c:	6001      	str	r1, [r0, #0]
 802167e:	b129      	cbz	r1, 802168c <mg_str_s+0x14>
 8021680:	4608      	mov	r0, r1
 8021682:	f7ee fe0d 	bl	80102a0 <strlen>
 8021686:	6060      	str	r0, [r4, #4]
}
 8021688:	4620      	mov	r0, r4
 802168a:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 802168c:	2000      	movs	r0, #0
 802168e:	e7fa      	b.n	8021686 <mg_str_s+0xe>

08021690 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 8021690:	6001      	str	r1, [r0, #0]
 8021692:	6042      	str	r2, [r0, #4]
}
 8021694:	4770      	bx	lr

08021696 <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 8021696:	b530      	push	{r4, r5, lr}
 8021698:	b085      	sub	sp, #20
 802169a:	466b      	mov	r3, sp
 802169c:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 80216a0:	290d      	cmp	r1, #13
 80216a2:	d930      	bls.n	8021706 <mg_v4mapped+0x70>
 80216a4:	4614      	mov	r4, r2
 80216a6:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 80216a8:	4601      	mov	r1, r0
 80216aa:	7802      	ldrb	r2, [r0, #0]
 80216ac:	2a3a      	cmp	r2, #58	@ 0x3a
 80216ae:	d12d      	bne.n	802170c <mg_v4mapped+0x76>
 80216b0:	7842      	ldrb	r2, [r0, #1]
 80216b2:	2a3a      	cmp	r2, #58	@ 0x3a
 80216b4:	d12c      	bne.n	8021710 <mg_v4mapped+0x7a>
 80216b6:	7982      	ldrb	r2, [r0, #6]
 80216b8:	2a3a      	cmp	r2, #58	@ 0x3a
 80216ba:	d12b      	bne.n	8021714 <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 80216bc:	2202      	movs	r2, #2
 80216be:	e000      	b.n	80216c2 <mg_v4mapped+0x2c>
 80216c0:	3201      	adds	r2, #1
 80216c2:	2a05      	cmp	r2, #5
 80216c4:	dc06      	bgt.n	80216d4 <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 80216c6:	5c88      	ldrb	r0, [r1, r2]
 80216c8:	2866      	cmp	r0, #102	@ 0x66
 80216ca:	d0f9      	beq.n	80216c0 <mg_v4mapped+0x2a>
 80216cc:	2846      	cmp	r0, #70	@ 0x46
 80216ce:	d0f7      	beq.n	80216c0 <mg_v4mapped+0x2a>
 80216d0:	2000      	movs	r0, #0
 80216d2:	e019      	b.n	8021708 <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 80216d4:	ad02      	add	r5, sp, #8
 80216d6:	1fda      	subs	r2, r3, #7
 80216d8:	3107      	adds	r1, #7
 80216da:	4628      	mov	r0, r5
 80216dc:	f7ff ffd8 	bl	8021690 <mg_str_n>
 80216e0:	4622      	mov	r2, r4
 80216e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80216e6:	f7fe f899 	bl	801f81c <mg_aton4>
 80216ea:	b168      	cbz	r0, 8021708 <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 80216ec:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 80216ee:	2300      	movs	r3, #0
 80216f0:	6023      	str	r3, [r4, #0]
 80216f2:	6063      	str	r3, [r4, #4]
 80216f4:	60a3      	str	r3, [r4, #8]
 80216f6:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 80216f8:	23ff      	movs	r3, #255	@ 0xff
 80216fa:	72e3      	strb	r3, [r4, #11]
 80216fc:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 80216fe:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 8021700:	2301      	movs	r3, #1
 8021702:	74e3      	strb	r3, [r4, #19]
  return true;
 8021704:	e000      	b.n	8021708 <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 8021706:	2000      	movs	r0, #0
}
 8021708:	b005      	add	sp, #20
 802170a:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 802170c:	2000      	movs	r0, #0
 802170e:	e7fb      	b.n	8021708 <mg_v4mapped+0x72>
 8021710:	2000      	movs	r0, #0
 8021712:	e7f9      	b.n	8021708 <mg_v4mapped+0x72>
 8021714:	2000      	movs	r0, #0
 8021716:	e7f7      	b.n	8021708 <mg_v4mapped+0x72>

08021718 <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 8021718:	b530      	push	{r4, r5, lr}
 802171a:	b083      	sub	sp, #12
 802171c:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 802171e:	6803      	ldr	r3, [r0, #0]
 8021720:	6842      	ldr	r2, [r0, #4]
 8021722:	441a      	add	r2, r3
 8021724:	466d      	mov	r5, sp
 8021726:	1a52      	subs	r2, r2, r1
 8021728:	4628      	mov	r0, r5
 802172a:	f7ff ffb1 	bl	8021690 <mg_str_n>
 802172e:	3408      	adds	r4, #8
 8021730:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021734:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8021738:	b003      	add	sp, #12
 802173a:	bd30      	pop	{r4, r5, pc}

0802173c <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 802173c:	b084      	sub	sp, #16
 802173e:	f10d 0c10 	add.w	ip, sp, #16
 8021742:	e90c 0003 	stmdb	ip, {r0, r1}
 8021746:	4669      	mov	r1, sp
 8021748:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 802174c:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 802174e:	9a03      	ldr	r2, [sp, #12]
 8021750:	429a      	cmp	r2, r3
 8021752:	d90b      	bls.n	802176c <mg_strcmp+0x30>
 8021754:	9901      	ldr	r1, [sp, #4]
 8021756:	4299      	cmp	r1, r3
 8021758:	d908      	bls.n	802176c <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 802175a:	9a02      	ldr	r2, [sp, #8]
 802175c:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 802175e:	9a00      	ldr	r2, [sp, #0]
 8021760:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 8021762:	4291      	cmp	r1, r2
 8021764:	db09      	blt.n	802177a <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 8021766:	dc0c      	bgt.n	8021782 <mg_strcmp+0x46>
    i++;
 8021768:	3301      	adds	r3, #1
 802176a:	e7f0      	b.n	802174e <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 802176c:	429a      	cmp	r2, r3
 802176e:	d80a      	bhi.n	8021786 <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 8021770:	9a01      	ldr	r2, [sp, #4]
 8021772:	429a      	cmp	r2, r3
 8021774:	d809      	bhi.n	802178a <mg_strcmp+0x4e>
  return 0;
 8021776:	2000      	movs	r0, #0
 8021778:	e001      	b.n	802177e <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 802177a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 802177e:	b004      	add	sp, #16
 8021780:	4770      	bx	lr
    if (c1 > c2) return 1;
 8021782:	2001      	movs	r0, #1
 8021784:	e7fb      	b.n	802177e <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 8021786:	2001      	movs	r0, #1
 8021788:	e7f9      	b.n	802177e <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 802178a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802178e:	e7f6      	b.n	802177e <mg_strcmp+0x42>

08021790 <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8021790:	b530      	push	{r4, r5, lr}
 8021792:	b085      	sub	sp, #20
 8021794:	ac04      	add	r4, sp, #16
 8021796:	e904 0003 	stmdb	r4, {r0, r1}
 802179a:	4669      	mov	r1, sp
 802179c:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80217a0:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 80217a2:	9b03      	ldr	r3, [sp, #12]
 80217a4:	42a3      	cmp	r3, r4
 80217a6:	d910      	bls.n	80217ca <mg_strcasecmp+0x3a>
 80217a8:	9a01      	ldr	r2, [sp, #4]
 80217aa:	42a2      	cmp	r2, r4
 80217ac:	d90d      	bls.n	80217ca <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 80217ae:	9b02      	ldr	r3, [sp, #8]
 80217b0:	5d18      	ldrb	r0, [r3, r4]
 80217b2:	f7fe f8e5 	bl	801f980 <mg_tolc>
 80217b6:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 80217b8:	9b00      	ldr	r3, [sp, #0]
 80217ba:	5d18      	ldrb	r0, [r3, r4]
 80217bc:	f7fe f8e0 	bl	801f980 <mg_tolc>
    if (c1 < c2) return -1;
 80217c0:	4285      	cmp	r5, r0
 80217c2:	db09      	blt.n	80217d8 <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 80217c4:	dc0c      	bgt.n	80217e0 <mg_strcasecmp+0x50>
    i++;
 80217c6:	3401      	adds	r4, #1
 80217c8:	e7eb      	b.n	80217a2 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 80217ca:	42a3      	cmp	r3, r4
 80217cc:	d80a      	bhi.n	80217e4 <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 80217ce:	9b01      	ldr	r3, [sp, #4]
 80217d0:	42a3      	cmp	r3, r4
 80217d2:	d809      	bhi.n	80217e8 <mg_strcasecmp+0x58>
  return 0;
 80217d4:	2000      	movs	r0, #0
 80217d6:	e001      	b.n	80217dc <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 80217d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80217dc:	b005      	add	sp, #20
 80217de:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 80217e0:	2001      	movs	r0, #1
 80217e2:	e7fb      	b.n	80217dc <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 80217e4:	2001      	movs	r0, #1
 80217e6:	e7f9      	b.n	80217dc <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 80217e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80217ec:	e7f6      	b.n	80217dc <mg_strcasecmp+0x4c>
	...

080217f0 <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 80217f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80217f4:	b086      	sub	sp, #24
 80217f6:	4604      	mov	r4, r0
 80217f8:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 80217fa:	f7fe fc5b 	bl	80200b4 <mg_http_get_request_len>
 80217fe:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8021800:	b1d4      	cbz	r4, 8021838 <mg_http_parse+0x48>
 8021802:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 8021804:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8021808:	2100      	movs	r1, #0
 802180a:	4630      	mov	r0, r6
 802180c:	f008 f968 	bl	8029ae0 <memset>
  if (req_len <= 0) return req_len;
 8021810:	2f00      	cmp	r7, #0
 8021812:	f340 808d 	ble.w	8021930 <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 8021816:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 802181a:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 802181e:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8021822:	46b8      	mov	r8, r7
 8021824:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8021828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802182c:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 8021830:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 8021834:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8021836:	e005      	b.n	8021844 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8021838:	4625      	mov	r5, r4
 802183a:	e7e3      	b.n	8021804 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 802183c:	4414      	add	r4, r2
 802183e:	6873      	ldr	r3, [r6, #4]
 8021840:	4413      	add	r3, r2
 8021842:	6073      	str	r3, [r6, #4]
 8021844:	42ac      	cmp	r4, r5
 8021846:	d208      	bcs.n	802185a <mg_http_parse+0x6a>
 8021848:	4629      	mov	r1, r5
 802184a:	4620      	mov	r0, r4
 802184c:	f7fc fe3c 	bl	801e4c8 <clen>
 8021850:	4602      	mov	r2, r0
 8021852:	2800      	cmp	r0, #0
 8021854:	d1f2      	bne.n	802183c <mg_http_parse+0x4c>
 8021856:	e000      	b.n	802185a <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8021858:	3401      	adds	r4, #1
 802185a:	42ac      	cmp	r4, r5
 802185c:	d202      	bcs.n	8021864 <mg_http_parse+0x74>
 802185e:	7823      	ldrb	r3, [r4, #0]
 8021860:	2b20      	cmp	r3, #32
 8021862:	d0f9      	beq.n	8021858 <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 8021864:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8021866:	e003      	b.n	8021870 <mg_http_parse+0x80>
 8021868:	4414      	add	r4, r2
 802186a:	68f3      	ldr	r3, [r6, #12]
 802186c:	4413      	add	r3, r2
 802186e:	60f3      	str	r3, [r6, #12]
 8021870:	42ac      	cmp	r4, r5
 8021872:	d208      	bcs.n	8021886 <mg_http_parse+0x96>
 8021874:	4629      	mov	r1, r5
 8021876:	4620      	mov	r0, r4
 8021878:	f7fc fe26 	bl	801e4c8 <clen>
 802187c:	4602      	mov	r2, r0
 802187e:	2800      	cmp	r0, #0
 8021880:	d1f2      	bne.n	8021868 <mg_http_parse+0x78>
 8021882:	e000      	b.n	8021886 <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8021884:	3401      	adds	r4, #1
 8021886:	42ac      	cmp	r4, r5
 8021888:	d202      	bcs.n	8021890 <mg_http_parse+0xa0>
 802188a:	7823      	ldrb	r3, [r4, #0]
 802188c:	2b20      	cmp	r3, #32
 802188e:	d0f9      	beq.n	8021884 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8021890:	f106 0218 	add.w	r2, r6, #24
 8021894:	4629      	mov	r1, r5
 8021896:	4620      	mov	r0, r4
 8021898:	f7fc fe5d 	bl	801e556 <skiptorn>
 802189c:	4682      	mov	sl, r0
 802189e:	2800      	cmp	r0, #0
 80218a0:	f000 8082 	beq.w	80219a8 <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 80218a4:	f8d6 9008 	ldr.w	r9, [r6, #8]
 80218a8:	68f4      	ldr	r4, [r6, #12]
 80218aa:	4622      	mov	r2, r4
 80218ac:	213f      	movs	r1, #63	@ 0x3f
 80218ae:	4648      	mov	r0, r9
 80218b0:	f7ee fca6 	bl	8010200 <memchr>
 80218b4:	b138      	cbz	r0, 80218c6 <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 80218b6:	1c42      	adds	r2, r0, #1
 80218b8:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 80218ba:	444c      	add	r4, r9
 80218bc:	1aa4      	subs	r4, r4, r2
 80218be:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 80218c0:	eba0 0309 	sub.w	r3, r0, r9
 80218c4:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 80218c6:	6873      	ldr	r3, [r6, #4]
 80218c8:	2b00      	cmp	r3, #0
 80218ca:	d06f      	beq.n	80219ac <mg_http_parse+0x1bc>
 80218cc:	68f3      	ldr	r3, [r6, #12]
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	d06f      	beq.n	80219b2 <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 80218d2:	231e      	movs	r3, #30
 80218d4:	f106 0220 	add.w	r2, r6, #32
 80218d8:	4629      	mov	r1, r5
 80218da:	4650      	mov	r0, sl
 80218dc:	f7fc fe63 	bl	801e5a6 <mg_http_parse_headers>
 80218e0:	2800      	cmp	r0, #0
 80218e2:	d069      	beq.n	80219b8 <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80218e4:	4939      	ldr	r1, [pc, #228]	@ (80219cc <mg_http_parse+0x1dc>)
 80218e6:	4630      	mov	r0, r6
 80218e8:	f7fe fc10 	bl	802010c <mg_http_get_header>
 80218ec:	b160      	cbz	r0, 8021908 <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80218ee:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 80218f2:	e9d0 0100 	ldrd	r0, r1, [r0]
 80218f6:	f7fe fb8b 	bl	8020010 <mg_to_size_t>
 80218fa:	2800      	cmp	r0, #0
 80218fc:	d05f      	beq.n	80219be <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 80218fe:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8021902:	4443      	add	r3, r8
 8021904:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8021908:	2205      	movs	r2, #5
 802190a:	4931      	ldr	r1, [pc, #196]	@ (80219d0 <mg_http_parse+0x1e0>)
 802190c:	6830      	ldr	r0, [r6, #0]
 802190e:	f7fc fd8d 	bl	801e42c <mg_ncasecmp>
 8021912:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8021914:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8021918:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802191c:	d00c      	beq.n	8021938 <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 802191e:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8021922:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8021926:	d029      	beq.n	802197c <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8021928:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 802192c:	4598      	cmp	r8, r3
 802192e:	d849      	bhi.n	80219c4 <mg_http_parse+0x1d4>
}
 8021930:	4638      	mov	r0, r7
 8021932:	b006      	add	sp, #24
 8021934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8021938:	2800      	cmp	r0, #0
 802193a:	d0f0      	beq.n	802191e <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 802193c:	466d      	mov	r5, sp
 802193e:	4925      	ldr	r1, [pc, #148]	@ (80219d4 <mg_http_parse+0x1e4>)
 8021940:	4628      	mov	r0, r5
 8021942:	f7ff fe99 	bl	8021678 <mg_str_s>
 8021946:	e895 000c 	ldmia.w	r5, {r2, r3}
 802194a:	e896 0003 	ldmia.w	r6, {r0, r1}
 802194e:	f7ff ff1f 	bl	8021790 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8021952:	2800      	cmp	r0, #0
 8021954:	d0e3      	beq.n	802191e <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8021956:	ad02      	add	r5, sp, #8
 8021958:	491f      	ldr	r1, [pc, #124]	@ (80219d8 <mg_http_parse+0x1e8>)
 802195a:	4628      	mov	r0, r5
 802195c:	f7ff fe8c 	bl	8021678 <mg_str_s>
 8021960:	e895 000c 	ldmia.w	r5, {r2, r3}
 8021964:	e896 0003 	ldmia.w	r6, {r0, r1}
 8021968:	f7ff ff12 	bl	8021790 <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 802196c:	2800      	cmp	r0, #0
 802196e:	d0d6      	beq.n	802191e <mg_http_parse+0x12e>
    hm->body.len = 0;
 8021970:	2300      	movs	r3, #0
 8021972:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8021976:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 802197a:	e7d0      	b.n	802191e <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 802197c:	2c00      	cmp	r4, #0
 802197e:	d1d3      	bne.n	8021928 <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8021980:	ac04      	add	r4, sp, #16
 8021982:	4916      	ldr	r1, [pc, #88]	@ (80219dc <mg_http_parse+0x1ec>)
 8021984:	4620      	mov	r0, r4
 8021986:	f7ff fe77 	bl	8021678 <mg_str_s>
 802198a:	e894 000c 	ldmia.w	r4, {r2, r3}
 802198e:	f106 0108 	add.w	r1, r6, #8
 8021992:	c903      	ldmia	r1, {r0, r1}
 8021994:	f7ff fefc 	bl	8021790 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8021998:	2800      	cmp	r0, #0
 802199a:	d1c5      	bne.n	8021928 <mg_http_parse+0x138>
    hm->body.len = 0;
 802199c:	2300      	movs	r3, #0
 802199e:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80219a2:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 80219a6:	e7bf      	b.n	8021928 <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 80219a8:	2700      	movs	r7, #0
 80219aa:	e7c1      	b.n	8021930 <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 80219ac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80219b0:	e7be      	b.n	8021930 <mg_http_parse+0x140>
 80219b2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80219b6:	e7bb      	b.n	8021930 <mg_http_parse+0x140>
    return -1;  // error when parsing
 80219b8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80219bc:	e7b8      	b.n	8021930 <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80219be:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80219c2:	e7b5      	b.n	8021930 <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 80219c4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80219c8:	e7b2      	b.n	8021930 <mg_http_parse+0x140>
 80219ca:	bf00      	nop
 80219cc:	080369e0 	.word	0x080369e0
 80219d0:	080369f0 	.word	0x080369f0
 80219d4:	080369f8 	.word	0x080369f8
 80219d8:	0803364c 	.word	0x0803364c
 80219dc:	080369fc 	.word	0x080369fc

080219e0 <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 80219e0:	b530      	push	{r4, r5, lr}
 80219e2:	b085      	sub	sp, #20
 80219e4:	ac04      	add	r4, sp, #16
 80219e6:	e904 0003 	stmdb	r4, {r0, r1}
 80219ea:	4669      	mov	r1, sp
 80219ec:	e881 000c 	stmia.w	r1, {r2, r3}
 80219f0:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 80219f2:	b110      	cbz	r0, 80219fa <mg_match+0x1a>
 80219f4:	2300      	movs	r3, #0
 80219f6:	6003      	str	r3, [r0, #0]
 80219f8:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 80219fa:	2400      	movs	r4, #0
 80219fc:	46a4      	mov	ip, r4
 80219fe:	4621      	mov	r1, r4
 8021a00:	4623      	mov	r3, r4
 8021a02:	e028      	b.n	8021a56 <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8021a04:	9a02      	ldr	r2, [sp, #8]
 8021a06:	440a      	add	r2, r1
 8021a08:	6002      	str	r2, [r0, #0]
 8021a0a:	2201      	movs	r2, #1
 8021a0c:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8021a0e:	2200      	movs	r2, #0
 8021a10:	6082      	str	r2, [r0, #8]
 8021a12:	60c2      	str	r2, [r0, #12]
 8021a14:	3008      	adds	r0, #8
      i++, j++;
 8021a16:	3301      	adds	r3, #1
 8021a18:	3101      	adds	r1, #1
 8021a1a:	e01c      	b.n	8021a56 <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8021a1c:	429a      	cmp	r2, r3
 8021a1e:	d905      	bls.n	8021a2c <mg_match+0x4c>
 8021a20:	9a00      	ldr	r2, [sp, #0]
 8021a22:	5cd2      	ldrb	r2, [r2, r3]
 8021a24:	2a2a      	cmp	r2, #42	@ 0x2a
 8021a26:	d045      	beq.n	8021ab4 <mg_match+0xd4>
 8021a28:	2a23      	cmp	r2, #35	@ 0x23
 8021a2a:	d043      	beq.n	8021ab4 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8021a2c:	2c00      	cmp	r4, #0
 8021a2e:	d065      	beq.n	8021afc <mg_match+0x11c>
 8021a30:	9b03      	ldr	r3, [sp, #12]
 8021a32:	42a3      	cmp	r3, r4
 8021a34:	d365      	bcc.n	8021b02 <mg_match+0x122>
 8021a36:	9b00      	ldr	r3, [sp, #0]
 8021a38:	f813 300c 	ldrb.w	r3, [r3, ip]
 8021a3c:	2b23      	cmp	r3, #35	@ 0x23
 8021a3e:	d003      	beq.n	8021a48 <mg_match+0x68>
 8021a40:	9b02      	ldr	r3, [sp, #8]
 8021a42:	5c5b      	ldrb	r3, [r3, r1]
 8021a44:	2b2f      	cmp	r3, #47	@ 0x2f
 8021a46:	d05e      	beq.n	8021b06 <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021a48:	2800      	cmp	r0, #0
 8021a4a:	d046      	beq.n	8021ada <mg_match+0xfa>
 8021a4c:	6803      	ldr	r3, [r0, #0]
 8021a4e:	2b00      	cmp	r3, #0
 8021a50:	d03c      	beq.n	8021acc <mg_match+0xec>
      i = ni, j = nj;
 8021a52:	4621      	mov	r1, r4
 8021a54:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 8021a56:	9a01      	ldr	r2, [sp, #4]
 8021a58:	429a      	cmp	r2, r3
 8021a5a:	d802      	bhi.n	8021a62 <mg_match+0x82>
 8021a5c:	9d03      	ldr	r5, [sp, #12]
 8021a5e:	428d      	cmp	r5, r1
 8021a60:	d941      	bls.n	8021ae6 <mg_match+0x106>
    if (i < p.len && j < s.len &&
 8021a62:	429a      	cmp	r2, r3
 8021a64:	d9da      	bls.n	8021a1c <mg_match+0x3c>
 8021a66:	9d03      	ldr	r5, [sp, #12]
 8021a68:	428d      	cmp	r5, r1
 8021a6a:	d9d7      	bls.n	8021a1c <mg_match+0x3c>
        (p.buf[i] == '?' ||
 8021a6c:	9d00      	ldr	r5, [sp, #0]
 8021a6e:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 8021a72:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8021a76:	d009      	beq.n	8021a8c <mg_match+0xac>
        (p.buf[i] == '?' ||
 8021a78:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 8021a7c:	d0ce      	beq.n	8021a1c <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8021a7e:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 8021a82:	d0cb      	beq.n	8021a1c <mg_match+0x3c>
 8021a84:	9d02      	ldr	r5, [sp, #8]
 8021a86:	5c6d      	ldrb	r5, [r5, r1]
 8021a88:	45ae      	cmp	lr, r5
 8021a8a:	d1c7      	bne.n	8021a1c <mg_match+0x3c>
      if (caps == NULL) {
 8021a8c:	2800      	cmp	r0, #0
 8021a8e:	d0c2      	beq.n	8021a16 <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 8021a90:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8021a94:	d0b6      	beq.n	8021a04 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 8021a96:	6802      	ldr	r2, [r0, #0]
 8021a98:	2a00      	cmp	r2, #0
 8021a9a:	d0bc      	beq.n	8021a16 <mg_match+0x36>
 8021a9c:	6845      	ldr	r5, [r0, #4]
 8021a9e:	2d00      	cmp	r5, #0
 8021aa0:	d1b9      	bne.n	8021a16 <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8021aa2:	9d02      	ldr	r5, [sp, #8]
 8021aa4:	440d      	add	r5, r1
 8021aa6:	1aad      	subs	r5, r5, r2
 8021aa8:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8021aaa:	2200      	movs	r2, #0
 8021aac:	60c2      	str	r2, [r0, #12]
 8021aae:	6082      	str	r2, [r0, #8]
 8021ab0:	3008      	adds	r0, #8
 8021ab2:	e7b0      	b.n	8021a16 <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8021ab4:	b108      	cbz	r0, 8021aba <mg_match+0xda>
 8021ab6:	6802      	ldr	r2, [r0, #0]
 8021ab8:	b11a      	cbz	r2, 8021ac2 <mg_match+0xe2>
      ni = i++, nj = j + 1;
 8021aba:	1c4c      	adds	r4, r1, #1
 8021abc:	469c      	mov	ip, r3
 8021abe:	3301      	adds	r3, #1
 8021ac0:	e7c9      	b.n	8021a56 <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8021ac2:	6042      	str	r2, [r0, #4]
 8021ac4:	9a02      	ldr	r2, [sp, #8]
 8021ac6:	440a      	add	r2, r1
 8021ac8:	6002      	str	r2, [r0, #0]
 8021aca:	e7f6      	b.n	8021aba <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021acc:	6843      	ldr	r3, [r0, #4]
 8021ace:	b93b      	cbnz	r3, 8021ae0 <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 8021ad0:	3808      	subs	r0, #8
 8021ad2:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 8021ad4:	4621      	mov	r1, r4
 8021ad6:	4663      	mov	r3, ip
 8021ad8:	e7bd      	b.n	8021a56 <mg_match+0x76>
 8021ada:	4621      	mov	r1, r4
 8021adc:	4663      	mov	r3, ip
 8021ade:	e7ba      	b.n	8021a56 <mg_match+0x76>
 8021ae0:	4621      	mov	r1, r4
 8021ae2:	4663      	mov	r3, ip
 8021ae4:	e7b7      	b.n	8021a56 <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 8021ae6:	b180      	cbz	r0, 8021b0a <mg_match+0x12a>
 8021ae8:	6803      	ldr	r3, [r0, #0]
 8021aea:	b183      	cbz	r3, 8021b0e <mg_match+0x12e>
 8021aec:	6842      	ldr	r2, [r0, #4]
 8021aee:	b982      	cbnz	r2, 8021b12 <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8021af0:	9a02      	ldr	r2, [sp, #8]
 8021af2:	440a      	add	r2, r1
 8021af4:	1ad3      	subs	r3, r2, r3
 8021af6:	6043      	str	r3, [r0, #4]
  return true;
 8021af8:	2001      	movs	r0, #1
 8021afa:	e000      	b.n	8021afe <mg_match+0x11e>
      return false;
 8021afc:	2000      	movs	r0, #0
}
 8021afe:	b005      	add	sp, #20
 8021b00:	bd30      	pop	{r4, r5, pc}
      return false;
 8021b02:	2000      	movs	r0, #0
 8021b04:	e7fb      	b.n	8021afe <mg_match+0x11e>
 8021b06:	2000      	movs	r0, #0
 8021b08:	e7f9      	b.n	8021afe <mg_match+0x11e>
  return true;
 8021b0a:	2001      	movs	r0, #1
 8021b0c:	e7f7      	b.n	8021afe <mg_match+0x11e>
 8021b0e:	2001      	movs	r0, #1
 8021b10:	e7f5      	b.n	8021afe <mg_match+0x11e>
 8021b12:	2001      	movs	r0, #1
 8021b14:	e7f3      	b.n	8021afe <mg_match+0x11e>

08021b16 <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8021b16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021b1a:	b085      	sub	sp, #20
 8021b1c:	ac04      	add	r4, sp, #16
 8021b1e:	e904 0003 	stmdb	r4, {r0, r1}
 8021b22:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 8021b26:	b379      	cbz	r1, 8021b88 <mg_span+0x72>
 8021b28:	4690      	mov	r8, r2
 8021b2a:	461f      	mov	r7, r3
 8021b2c:	460d      	mov	r5, r1
 8021b2e:	9e02      	ldr	r6, [sp, #8]
 8021b30:	b366      	cbz	r6, 8021b8c <mg_span+0x76>
    size_t len = 0;
 8021b32:	2400      	movs	r4, #0
 8021b34:	e000      	b.n	8021b38 <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8021b36:	3401      	adds	r4, #1
 8021b38:	42a5      	cmp	r5, r4
 8021b3a:	d902      	bls.n	8021b42 <mg_span+0x2c>
 8021b3c:	5d31      	ldrb	r1, [r6, r4]
 8021b3e:	4281      	cmp	r1, r0
 8021b40:	d1f9      	bne.n	8021b36 <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8021b42:	f1b8 0f00 	cmp.w	r8, #0
 8021b46:	d009      	beq.n	8021b5c <mg_span+0x46>
 8021b48:	46e9      	mov	r9, sp
 8021b4a:	4622      	mov	r2, r4
 8021b4c:	4631      	mov	r1, r6
 8021b4e:	4648      	mov	r0, r9
 8021b50:	f7ff fd9e 	bl	8021690 <mg_str_n>
 8021b54:	e899 0003 	ldmia.w	r9, {r0, r1}
 8021b58:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8021b5c:	b187      	cbz	r7, 8021b80 <mg_span+0x6a>
 8021b5e:	46e8      	mov	r8, sp
 8021b60:	1b2a      	subs	r2, r5, r4
 8021b62:	1931      	adds	r1, r6, r4
 8021b64:	4640      	mov	r0, r8
 8021b66:	f7ff fd93 	bl	8021690 <mg_str_n>
 8021b6a:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021b6e:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8021b72:	42a5      	cmp	r5, r4
 8021b74:	d904      	bls.n	8021b80 <mg_span+0x6a>
 8021b76:	4603      	mov	r3, r0
 8021b78:	3301      	adds	r3, #1
 8021b7a:	603b      	str	r3, [r7, #0]
 8021b7c:	1e4b      	subs	r3, r1, #1
 8021b7e:	607b      	str	r3, [r7, #4]
    return true;
 8021b80:	2001      	movs	r0, #1
}
 8021b82:	b005      	add	sp, #20
 8021b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 8021b88:	2000      	movs	r0, #0
 8021b8a:	e7fa      	b.n	8021b82 <mg_span+0x6c>
 8021b8c:	2000      	movs	r0, #0
 8021b8e:	e7f8      	b.n	8021b82 <mg_span+0x6c>

08021b90 <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8021b90:	b082      	sub	sp, #8
 8021b92:	b510      	push	{r4, lr}
 8021b94:	b08a      	sub	sp, #40	@ 0x28
 8021b96:	4604      	mov	r4, r0
 8021b98:	f10d 0c08 	add.w	ip, sp, #8
 8021b9c:	e88c 0006 	stmia.w	ip, {r1, r2}
 8021ba0:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8021ba2:	2200      	movs	r2, #0
 8021ba4:	4611      	mov	r1, r2
 8021ba6:	f7ff fd73 	bl	8021690 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8021baa:	ab02      	add	r3, sp, #8
 8021bac:	2226      	movs	r2, #38	@ 0x26
 8021bae:	9200      	str	r2, [sp, #0]
 8021bb0:	aa08      	add	r2, sp, #32
 8021bb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021bb6:	f7ff ffae 	bl	8021b16 <mg_span>
 8021bba:	b1c8      	cbz	r0, 8021bf0 <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8021bbc:	233d      	movs	r3, #61	@ 0x3d
 8021bbe:	9300      	str	r3, [sp, #0]
 8021bc0:	ab04      	add	r3, sp, #16
 8021bc2:	aa06      	add	r2, sp, #24
 8021bc4:	a90a      	add	r1, sp, #40	@ 0x28
 8021bc6:	e911 0003 	ldmdb	r1, {r0, r1}
 8021bca:	f7ff ffa4 	bl	8021b16 <mg_span>
 8021bce:	2800      	cmp	r0, #0
 8021bd0:	d0eb      	beq.n	8021baa <mg_http_var+0x1a>
 8021bd2:	9a07      	ldr	r2, [sp, #28]
 8021bd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021bd6:	4293      	cmp	r3, r2
 8021bd8:	d1e7      	bne.n	8021baa <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8021bda:	9906      	ldr	r1, [sp, #24]
 8021bdc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021bde:	f7fc fc25 	bl	801e42c <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8021be2:	2800      	cmp	r0, #0
 8021be4:	d1e1      	bne.n	8021baa <mg_http_var+0x1a>
      result = v;
 8021be6:	ab04      	add	r3, sp, #16
 8021be8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021bec:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8021bf0:	4620      	mov	r0, r4
 8021bf2:	b00a      	add	sp, #40	@ 0x28
 8021bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021bf8:	b002      	add	sp, #8
 8021bfa:	4770      	bx	lr

08021bfc <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8021bfc:	b530      	push	{r4, r5, lr}
 8021bfe:	b08d      	sub	sp, #52	@ 0x34
 8021c00:	4604      	mov	r4, r0
 8021c02:	a802      	add	r0, sp, #8
 8021c04:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 8021c08:	4619      	mov	r1, r3
 8021c0a:	a804      	add	r0, sp, #16
 8021c0c:	f7ff fd34 	bl	8021678 <mg_str_s>
  size_t i = 0;
 8021c10:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8021c12:	e000      	b.n	8021c16 <guess_content_type+0x1a>
 8021c14:	3301      	adds	r3, #1
 8021c16:	9803      	ldr	r0, [sp, #12]
 8021c18:	4298      	cmp	r0, r3
 8021c1a:	d906      	bls.n	8021c2a <guess_content_type+0x2e>
 8021c1c:	1ac1      	subs	r1, r0, r3
 8021c1e:	9a02      	ldr	r2, [sp, #8]
 8021c20:	440a      	add	r2, r1
 8021c22:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8021c26:	2a2e      	cmp	r2, #46	@ 0x2e
 8021c28:	d1f4      	bne.n	8021c14 <guess_content_type+0x18>
  path.buf += path.len - i;
 8021c2a:	1ac0      	subs	r0, r0, r3
 8021c2c:	9a02      	ldr	r2, [sp, #8]
 8021c2e:	4402      	add	r2, r0
 8021c30:	9202      	str	r2, [sp, #8]
  path.len = i;
 8021c32:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 8021c34:	ab04      	add	r3, sp, #16
 8021c36:	222c      	movs	r2, #44	@ 0x2c
 8021c38:	9200      	str	r2, [sp, #0]
 8021c3a:	aa0a      	add	r2, sp, #40	@ 0x28
 8021c3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021c40:	f7ff ff69 	bl	8021b16 <mg_span>
 8021c44:	b1c0      	cbz	r0, 8021c78 <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 8021c46:	233d      	movs	r3, #61	@ 0x3d
 8021c48:	9300      	str	r3, [sp, #0]
 8021c4a:	ab06      	add	r3, sp, #24
 8021c4c:	aa08      	add	r2, sp, #32
 8021c4e:	a90c      	add	r1, sp, #48	@ 0x30
 8021c50:	e911 0003 	ldmdb	r1, {r0, r1}
 8021c54:	f7ff ff5f 	bl	8021b16 <mg_span>
 8021c58:	2800      	cmp	r0, #0
 8021c5a:	d0eb      	beq.n	8021c34 <guess_content_type+0x38>
 8021c5c:	ab08      	add	r3, sp, #32
 8021c5e:	cb0c      	ldmia	r3, {r2, r3}
 8021c60:	a902      	add	r1, sp, #8
 8021c62:	c903      	ldmia	r1, {r0, r1}
 8021c64:	f7ff fd6a 	bl	802173c <mg_strcmp>
 8021c68:	2800      	cmp	r0, #0
 8021c6a:	d1e3      	bne.n	8021c34 <guess_content_type+0x38>
 8021c6c:	ab06      	add	r3, sp, #24
 8021c6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021c72:	e884 0003 	stmia.w	r4, {r0, r1}
 8021c76:	e01c      	b.n	8021cb2 <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8021c78:	2500      	movs	r5, #0
 8021c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8021cb8 <guess_content_type+0xbc>)
 8021c7c:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8021c80:	b19b      	cbz	r3, 8021caa <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8021c82:	4b0d      	ldr	r3, [pc, #52]	@ (8021cb8 <guess_content_type+0xbc>)
 8021c84:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8021c88:	cb0c      	ldmia	r3, {r2, r3}
 8021c8a:	a902      	add	r1, sp, #8
 8021c8c:	c903      	ldmia	r1, {r0, r1}
 8021c8e:	f7ff fd55 	bl	802173c <mg_strcmp>
 8021c92:	b108      	cbz	r0, 8021c98 <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8021c94:	3502      	adds	r5, #2
 8021c96:	e7f0      	b.n	8021c7a <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8021c98:	3501      	adds	r5, #1
 8021c9a:	4b07      	ldr	r3, [pc, #28]	@ (8021cb8 <guess_content_type+0xbc>)
 8021c9c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8021ca0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021ca4:	e884 0003 	stmia.w	r4, {r0, r1}
 8021ca8:	e003      	b.n	8021cb2 <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 8021caa:	4904      	ldr	r1, [pc, #16]	@ (8021cbc <guess_content_type+0xc0>)
 8021cac:	4620      	mov	r0, r4
 8021cae:	f7ff fce3 	bl	8021678 <mg_str_s>
}
 8021cb2:	4620      	mov	r0, r4
 8021cb4:	b00d      	add	sp, #52	@ 0x34
 8021cb6:	bd30      	pop	{r4, r5, pc}
 8021cb8:	08037ec4 	.word	0x08037ec4
 8021cbc:	08036a00 	.word	0x08036a00

08021cc0 <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8021cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021cc2:	b087      	sub	sp, #28
 8021cc4:	4604      	mov	r4, r0
 8021cc6:	460e      	mov	r6, r1
 8021cc8:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 8021cca:	2500      	movs	r5, #0
 8021ccc:	1da8      	adds	r0, r5, #6
 8021cce:	6863      	ldr	r3, [r4, #4]
 8021cd0:	4298      	cmp	r0, r3
 8021cd2:	d23c      	bcs.n	8021d4e <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8021cd4:	6821      	ldr	r1, [r4, #0]
 8021cd6:	1b5b      	subs	r3, r3, r5
 8021cd8:	1f9a      	subs	r2, r3, #6
 8021cda:	4401      	add	r1, r0
 8021cdc:	a804      	add	r0, sp, #16
 8021cde:	f7ff fcd7 	bl	8021690 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8021ce2:	6820      	ldr	r0, [r4, #0]
 8021ce4:	2206      	movs	r2, #6
 8021ce6:	491b      	ldr	r1, [pc, #108]	@ (8021d54 <getrange+0x94>)
 8021ce8:	4428      	add	r0, r5
 8021cea:	f007 fe65 	bl	80299b8 <memcmp>
 8021cee:	b108      	cbz	r0, 8021cf4 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 8021cf0:	3501      	adds	r5, #1
 8021cf2:	e7eb      	b.n	8021ccc <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 8021cf4:	ab04      	add	r3, sp, #16
 8021cf6:	222d      	movs	r2, #45	@ 0x2d
 8021cf8:	9200      	str	r2, [sp, #0]
 8021cfa:	aa02      	add	r2, sp, #8
 8021cfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021d00:	f7ff ff09 	bl	8021b16 <mg_span>
 8021d04:	b1c0      	cbz	r0, 8021d38 <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 8021d06:	4632      	mov	r2, r6
 8021d08:	ab02      	add	r3, sp, #8
 8021d0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021d0e:	f7fe f97f 	bl	8020010 <mg_to_size_t>
 8021d12:	b928      	cbnz	r0, 8021d20 <getrange+0x60>
  size_t i, numparsed = 0;
 8021d14:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8021d16:	9b05      	ldr	r3, [sp, #20]
 8021d18:	b923      	cbnz	r3, 8021d24 <getrange+0x64>
}
 8021d1a:	4620      	mov	r0, r4
 8021d1c:	b007      	add	sp, #28
 8021d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 8021d20:	2401      	movs	r4, #1
 8021d22:	e7f8      	b.n	8021d16 <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8021d24:	463a      	mov	r2, r7
 8021d26:	ab06      	add	r3, sp, #24
 8021d28:	e913 0003 	ldmdb	r3, {r0, r1}
 8021d2c:	f7fe f970 	bl	8020010 <mg_to_size_t>
 8021d30:	2800      	cmp	r0, #0
 8021d32:	d0f2      	beq.n	8021d1a <getrange+0x5a>
 8021d34:	3401      	adds	r4, #1
 8021d36:	e7f0      	b.n	8021d1a <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8021d38:	4632      	mov	r2, r6
 8021d3a:	ab06      	add	r3, sp, #24
 8021d3c:	e913 0003 	ldmdb	r3, {r0, r1}
 8021d40:	f7fe f966 	bl	8020010 <mg_to_size_t>
 8021d44:	b908      	cbnz	r0, 8021d4a <getrange+0x8a>
  size_t i, numparsed = 0;
 8021d46:	2400      	movs	r4, #0
 8021d48:	e7e7      	b.n	8021d1a <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8021d4a:	2401      	movs	r4, #1
    break;
 8021d4c:	e7e5      	b.n	8021d1a <getrange+0x5a>
  size_t i, numparsed = 0;
 8021d4e:	2400      	movs	r4, #0
 8021d50:	e7e3      	b.n	8021d1a <getrange+0x5a>
 8021d52:	bf00      	nop
 8021d54:	08036a1c 	.word	0x08036a1c

08021d58 <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 8021d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d5c:	b0e7      	sub	sp, #412	@ 0x19c
 8021d5e:	4607      	mov	r7, r0
 8021d60:	4688      	mov	r8, r1
 8021d62:	4614      	mov	r4, r2
 8021d64:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8021d66:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8021d6a:	f1b9 0f00 	cmp.w	r9, #0
 8021d6e:	d036      	beq.n	8021dde <mg_http_serve_file+0x86>
  size_t size = 0;
 8021d70:	2300      	movs	r3, #0
 8021d72:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 8021d74:	2200      	movs	r2, #0
 8021d76:	2300      	movs	r3, #0
 8021d78:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8021d7c:	ae5e      	add	r6, sp, #376	@ 0x178
 8021d7e:	4621      	mov	r1, r4
 8021d80:	4630      	mov	r0, r6
 8021d82:	f7ff fc79 	bl	8021678 <mg_str_s>
 8021d86:	68eb      	ldr	r3, [r5, #12]
 8021d88:	e896 0006 	ldmia.w	r6, {r1, r2}
 8021d8c:	a828      	add	r0, sp, #160	@ 0xa0
 8021d8e:	f7ff ff35 	bl	8021bfc <guess_content_type>
  if (path != NULL) {
 8021d92:	2c00      	cmp	r4, #0
 8021d94:	d053      	beq.n	8021e3e <mg_http_serve_file+0xe6>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8021d96:	4995      	ldr	r1, [pc, #596]	@ (8021fec <mg_http_serve_file+0x294>)
 8021d98:	4640      	mov	r0, r8
 8021d9a:	f7fe f9b7 	bl	802010c <mg_http_get_header>
    if (ae != NULL) {
 8021d9e:	4606      	mov	r6, r0
 8021da0:	2800      	cmp	r0, #0
 8021da2:	d042      	beq.n	8021e2a <mg_http_serve_file+0xd2>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8021da4:	6802      	ldr	r2, [r0, #0]
 8021da6:	6841      	ldr	r1, [r0, #4]
 8021da8:	4891      	ldr	r0, [pc, #580]	@ (8021ff0 <mg_http_serve_file+0x298>)
 8021daa:	f7ff fc2b 	bl	8021604 <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8021dae:	4683      	mov	fp, r0
 8021db0:	b1d8      	cbz	r0, 8021dea <mg_http_serve_file+0x92>
 8021db2:	4990      	ldr	r1, [pc, #576]	@ (8021ff4 <mg_http_serve_file+0x29c>)
 8021db4:	f007 ff14 	bl	8029be0 <strstr>
 8021db8:	4606      	mov	r6, r0
 8021dba:	b1d0      	cbz	r0, 8021df2 <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8021dbc:	4623      	mov	r3, r4
 8021dbe:	4a8e      	ldr	r2, [pc, #568]	@ (8021ff8 <mg_http_serve_file+0x2a0>)
 8021dc0:	2180      	movs	r1, #128	@ 0x80
 8021dc2:	a82e      	add	r0, sp, #184	@ 0xb8
 8021dc4:	f7fe fe78 	bl	8020ab8 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8021dc8:	2201      	movs	r2, #1
 8021dca:	a92e      	add	r1, sp, #184	@ 0xb8
 8021dcc:	4648      	mov	r0, r9
 8021dce:	f7fe f8e4 	bl	801ff9a <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 8021dd2:	4606      	mov	r6, r0
 8021dd4:	b130      	cbz	r0, 8021de4 <mg_http_serve_file+0x8c>
 8021dd6:	f04f 0a01 	mov.w	sl, #1
 8021dda:	ac2e      	add	r4, sp, #184	@ 0xb8
 8021ddc:	e00b      	b.n	8021df6 <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8021dde:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 8022020 <mg_http_serve_file+0x2c8>
 8021de2:	e7c5      	b.n	8021d70 <mg_http_serve_file+0x18>
  bool gzip = false;
 8021de4:	f04f 0a00 	mov.w	sl, #0
 8021de8:	e005      	b.n	8021df6 <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 8021dea:	4606      	mov	r6, r0
  bool gzip = false;
 8021dec:	f04f 0a00 	mov.w	sl, #0
 8021df0:	e001      	b.n	8021df6 <mg_http_serve_file+0x9e>
 8021df2:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 8021df6:	4658      	mov	r0, fp
 8021df8:	f7f7 f9f0 	bl	80191dc <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8021dfc:	b1c6      	cbz	r6, 8021e30 <mg_http_serve_file+0xd8>
  if (fd == NULL && opts->page404 != NULL) {
 8021dfe:	b316      	cbz	r6, 8021e46 <mg_http_serve_file+0xee>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8021e00:	f8d9 3000 	ldr.w	r3, [r9]
 8021e04:	aa2a      	add	r2, sp, #168	@ 0xa8
 8021e06:	a92d      	add	r1, sp, #180	@ 0xb4
 8021e08:	4620      	mov	r0, r4
 8021e0a:	4798      	blx	r3
 8021e0c:	2800      	cmp	r0, #0
 8021e0e:	d137      	bne.n	8021e80 <mg_http_serve_file+0x128>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8021e10:	4b7a      	ldr	r3, [pc, #488]	@ (8021ffc <mg_http_serve_file+0x2a4>)
 8021e12:	68aa      	ldr	r2, [r5, #8]
 8021e14:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8021e18:	4638      	mov	r0, r7
 8021e1a:	f7ff fb4b 	bl	80214b4 <mg_http_reply>
    mg_fs_close(fd);
 8021e1e:	4630      	mov	r0, r6
 8021e20:	f7fe f8d4 	bl	801ffcc <mg_fs_close>
}
 8021e24:	b067      	add	sp, #412	@ 0x19c
 8021e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 8021e2a:	f04f 0a00 	mov.w	sl, #0
 8021e2e:	e7e5      	b.n	8021dfc <mg_http_serve_file+0xa4>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8021e30:	2201      	movs	r2, #1
 8021e32:	4621      	mov	r1, r4
 8021e34:	4648      	mov	r0, r9
 8021e36:	f7fe f8b0 	bl	801ff9a <mg_fs_open>
 8021e3a:	4606      	mov	r6, r0
 8021e3c:	e7df      	b.n	8021dfe <mg_http_serve_file+0xa6>
  struct mg_fd *fd = NULL;
 8021e3e:	4626      	mov	r6, r4
  bool gzip = false;
 8021e40:	f04f 0a00 	mov.w	sl, #0
 8021e44:	e7db      	b.n	8021dfe <mg_http_serve_file+0xa6>
  if (fd == NULL && opts->page404 != NULL) {
 8021e46:	6929      	ldr	r1, [r5, #16]
 8021e48:	b1b9      	cbz	r1, 8021e7a <mg_http_serve_file+0x122>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8021e4a:	2201      	movs	r2, #1
 8021e4c:	4648      	mov	r0, r9
 8021e4e:	f7fe f8a4 	bl	801ff9a <mg_fs_open>
 8021e52:	4606      	mov	r6, r0
    path = opts->page404;
 8021e54:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8021e56:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 8021e5a:	4621      	mov	r1, r4
 8021e5c:	4658      	mov	r0, fp
 8021e5e:	f7ff fc0b 	bl	8021678 <mg_str_s>
 8021e62:	68eb      	ldr	r3, [r5, #12]
 8021e64:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8021e68:	a80a      	add	r0, sp, #40	@ 0x28
 8021e6a:	f7ff fec7 	bl	8021bfc <guess_content_type>
 8021e6e:	ab28      	add	r3, sp, #160	@ 0xa0
 8021e70:	aa0a      	add	r2, sp, #40	@ 0x28
 8021e72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021e76:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8021e7a:	2e00      	cmp	r6, #0
 8021e7c:	d1c0      	bne.n	8021e00 <mg_http_serve_file+0xa8>
 8021e7e:	e7c7      	b.n	8021e10 <mg_http_serve_file+0xb8>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8021e80:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8021e84:	e9cd 2300 	strd	r2, r3, [sp]
 8021e88:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8021e8a:	2140      	movs	r1, #64	@ 0x40
 8021e8c:	a84e      	add	r0, sp, #312	@ 0x138
 8021e8e:	f7ff fb53 	bl	8021538 <mg_http_etag>
 8021e92:	b190      	cbz	r0, 8021eba <mg_http_serve_file+0x162>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8021e94:	495a      	ldr	r1, [pc, #360]	@ (8022000 <mg_http_serve_file+0x2a8>)
 8021e96:	4640      	mov	r0, r8
 8021e98:	f7fe f938 	bl	802010c <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8021e9c:	4604      	mov	r4, r0
 8021e9e:	b160      	cbz	r0, 8021eba <mg_http_serve_file+0x162>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8021ea0:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 8021ea4:	a94e      	add	r1, sp, #312	@ 0x138
 8021ea6:	4658      	mov	r0, fp
 8021ea8:	f7ff fbe6 	bl	8021678 <mg_str_s>
 8021eac:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8021eb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8021eb4:	f7ff fc6c 	bl	8021790 <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8021eb8:	b340      	cbz	r0, 8021f0c <mg_http_serve_file+0x1b4>
    size_t r1 = 0, r2 = 0, cl = size;
 8021eba:	f04f 0b00 	mov.w	fp, #0
 8021ebe:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8021ec2:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8021ec6:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8021ec8:	494e      	ldr	r1, [pc, #312]	@ (8022004 <mg_http_serve_file+0x2ac>)
 8021eca:	4640      	mov	r0, r8
 8021ecc:	f7fe f91e 	bl	802010c <mg_http_get_header>
    range[0] = '\0';
 8021ed0:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8021ed4:	2800      	cmp	r0, #0
 8021ed6:	d040      	beq.n	8021f5a <mg_http_serve_file+0x202>
 8021ed8:	aa0e      	add	r2, sp, #56	@ 0x38
 8021eda:	a90d      	add	r1, sp, #52	@ 0x34
 8021edc:	f7ff fef0 	bl	8021cc0 <getrange>
 8021ee0:	2800      	cmp	r0, #0
 8021ee2:	dd70      	ble.n	8021fc6 <mg_http_serve_file+0x26e>
      if (n == 1) r2 = cl - 1;
 8021ee4:	2801      	cmp	r0, #1
 8021ee6:	d01c      	beq.n	8021f22 <mg_http_serve_file+0x1ca>
      if (r1 > r2 || r2 >= cl) {
 8021ee8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021eea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021eec:	429a      	cmp	r2, r3
 8021eee:	d801      	bhi.n	8021ef4 <mg_http_serve_file+0x19c>
 8021ef0:	42a3      	cmp	r3, r4
 8021ef2:	d319      	bcc.n	8021f28 <mg_http_serve_file+0x1d0>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8021ef4:	2400      	movs	r4, #0
 8021ef6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8021ef8:	9300      	str	r3, [sp, #0]
 8021efa:	9401      	str	r4, [sp, #4]
 8021efc:	4a42      	ldr	r2, [pc, #264]	@ (8022008 <mg_http_serve_file+0x2b0>)
 8021efe:	2164      	movs	r1, #100	@ 0x64
 8021f00:	a80f      	add	r0, sp, #60	@ 0x3c
 8021f02:	f7fe fdd9 	bl	8020ab8 <mg_snprintf>
        status = 416;
 8021f06:	f44f 79d0 	mov.w	r9, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8021f0a:	e028      	b.n	8021f5e <mg_http_serve_file+0x206>
    mg_fs_close(fd);
 8021f0c:	4630      	mov	r0, r6
 8021f0e:	f7fe f85d 	bl	801ffcc <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8021f12:	4b3e      	ldr	r3, [pc, #248]	@ (802200c <mg_http_serve_file+0x2b4>)
 8021f14:	68aa      	ldr	r2, [r5, #8]
 8021f16:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8021f1a:	4638      	mov	r0, r7
 8021f1c:	f7ff faca 	bl	80214b4 <mg_http_reply>
 8021f20:	e780      	b.n	8021e24 <mg_http_serve_file+0xcc>
      if (n == 1) r2 = cl - 1;
 8021f22:	1e63      	subs	r3, r4, #1
 8021f24:	930e      	str	r3, [sp, #56]	@ 0x38
 8021f26:	e7df      	b.n	8021ee8 <mg_http_serve_file+0x190>
        cl = r2 - r1 + 1;
 8021f28:	1a9b      	subs	r3, r3, r2
 8021f2a:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8021f2c:	1911      	adds	r1, r2, r4
 8021f2e:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 8021f30:	2300      	movs	r3, #0
 8021f32:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8021f34:	9004      	str	r0, [sp, #16]
 8021f36:	9305      	str	r3, [sp, #20]
 8021f38:	9102      	str	r1, [sp, #8]
 8021f3a:	9303      	str	r3, [sp, #12]
 8021f3c:	9200      	str	r2, [sp, #0]
 8021f3e:	9301      	str	r3, [sp, #4]
 8021f40:	4a33      	ldr	r2, [pc, #204]	@ (8022010 <mg_http_serve_file+0x2b8>)
 8021f42:	2164      	movs	r1, #100	@ 0x64
 8021f44:	a80f      	add	r0, sp, #60	@ 0x3c
 8021f46:	f7fe fdb7 	bl	8020ab8 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8021f4a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8021f4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021f50:	6830      	ldr	r0, [r6, #0]
 8021f52:	4798      	blx	r3
        status = 206;
 8021f54:	f04f 09ce 	mov.w	r9, #206	@ 0xce
 8021f58:	e001      	b.n	8021f5e <mg_http_serve_file+0x206>
    int n, status = 200;
 8021f5a:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
    mg_printf(c,
 8021f5e:	4648      	mov	r0, r9
 8021f60:	f7fc fb8a 	bl	801e678 <mg_http_status_code_str>
 8021f64:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8021f66:	9929      	ldr	r1, [sp, #164]	@ 0xa4
    mg_printf(c,
 8021f68:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8021f6a:	46a4      	mov	ip, r4
 8021f6c:	f1ba 0f00 	cmp.w	sl, #0
 8021f70:	d02c      	beq.n	8021fcc <mg_http_serve_file+0x274>
 8021f72:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 8022024 <mg_http_serve_file+0x2cc>
              range, opts->extra_headers ? opts->extra_headers : "");
 8021f76:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 8021f78:	b35a      	cbz	r2, 8021fd2 <mg_http_serve_file+0x27a>
 8021f7a:	9208      	str	r2, [sp, #32]
 8021f7c:	aa0f      	add	r2, sp, #60	@ 0x3c
 8021f7e:	9207      	str	r2, [sp, #28]
 8021f80:	f8cd e018 	str.w	lr, [sp, #24]
 8021f84:	f8cd c010 	str.w	ip, [sp, #16]
 8021f88:	2200      	movs	r2, #0
 8021f8a:	9205      	str	r2, [sp, #20]
 8021f8c:	aa4e      	add	r2, sp, #312	@ 0x138
 8021f8e:	9202      	str	r2, [sp, #8]
 8021f90:	9001      	str	r0, [sp, #4]
 8021f92:	9100      	str	r1, [sp, #0]
 8021f94:	464a      	mov	r2, r9
 8021f96:	491f      	ldr	r1, [pc, #124]	@ (8022014 <mg_http_serve_file+0x2bc>)
 8021f98:	4638      	mov	r0, r7
 8021f9a:	f7ff fa65 	bl	8021468 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8021f9e:	ad64      	add	r5, sp, #400	@ 0x190
 8021fa0:	491d      	ldr	r1, [pc, #116]	@ (8022018 <mg_http_serve_file+0x2c0>)
 8021fa2:	4628      	mov	r0, r5
 8021fa4:	f7ff fb68 	bl	8021678 <mg_str_s>
 8021fa8:	e895 000c 	ldmia.w	r5, {r2, r3}
 8021fac:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021fb0:	f7ff fbee 	bl	8021790 <mg_strcasecmp>
 8021fb4:	b178      	cbz	r0, 8021fd6 <mg_http_serve_file+0x27e>
      c->pfn = static_cb;
 8021fb6:	4b19      	ldr	r3, [pc, #100]	@ (802201c <mg_http_serve_file+0x2c4>)
 8021fb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      c->pfn_data = fd;
 8021fbc:	f8c7 6084 	str.w	r6, [r7, #132]	@ 0x84
      *clp = cl;
 8021fc0:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
}
 8021fc4:	e72e      	b.n	8021e24 <mg_http_serve_file+0xcc>
    int n, status = 200;
 8021fc6:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 8021fca:	e7c8      	b.n	8021f5e <mg_http_serve_file+0x206>
    mg_printf(c,
 8021fcc:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 802200c <mg_http_serve_file+0x2b4>
 8021fd0:	e7d1      	b.n	8021f76 <mg_http_serve_file+0x21e>
 8021fd2:	4a0e      	ldr	r2, [pc, #56]	@ (802200c <mg_http_serve_file+0x2b4>)
 8021fd4:	e7d1      	b.n	8021f7a <mg_http_serve_file+0x222>
      c->is_resp = 0;
 8021fd6:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8021fda:	f36f 13c7 	bfc	r3, #7, #1
 8021fde:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_fs_close(fd);
 8021fe2:	4630      	mov	r0, r6
 8021fe4:	f7fd fff2 	bl	801ffcc <mg_fs_close>
 8021fe8:	e71c      	b.n	8021e24 <mg_http_serve_file+0xcc>
 8021fea:	bf00      	nop
 8021fec:	08036a40 	.word	0x08036a40
 8021ff0:	08036948 	.word	0x08036948
 8021ff4:	08037dd8 	.word	0x08037dd8
 8021ff8:	08036a50 	.word	0x08036a50
 8021ffc:	08036a58 	.word	0x08036a58
 8022000:	08036a64 	.word	0x08036a64
 8022004:	08036a74 	.word	0x08036a74
 8022008:	08036a7c 	.word	0x08036a7c
 802200c:	08033984 	.word	0x08033984
 8022010:	08036a9c 	.word	0x08036a9c
 8022014:	08036ac4 	.word	0x08036ac4
 8022018:	08036b14 	.word	0x08036b14
 802201c:	0802400d 	.word	0x0802400d
 8022020:	200000ac 	.word	0x200000ac
 8022024:	08036a24 	.word	0x08036a24

08022028 <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8022028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802202c:	b083      	sub	sp, #12
 802202e:	ac02      	add	r4, sp, #8
 8022030:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8022034:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8022036:	3901      	subs	r1, #1
 8022038:	2907      	cmp	r1, #7
 802203a:	f200 8128 	bhi.w	802228e <mg_str_to_num+0x266>
 802203e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8022042:	0008      	.short	0x0008
 8022044:	01260020 	.word	0x01260020
 8022048:	0126000c 	.word	0x0126000c
 802204c:	01260126 	.word	0x01260126
 8022050:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8022052:	20ff      	movs	r0, #255	@ 0xff
 8022054:	f04f 0e00 	mov.w	lr, #0
 8022058:	e003      	b.n	8022062 <mg_str_to_num+0x3a>
 802205a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802205e:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 8022062:	b9e2      	cbnz	r2, 802209e <mg_str_to_num+0x76>
 8022064:	9901      	ldr	r1, [sp, #4]
 8022066:	2901      	cmp	r1, #1
 8022068:	d926      	bls.n	80220b8 <mg_str_to_num+0x90>
    if (str.buf[i] == '0') {
 802206a:	9a00      	ldr	r2, [sp, #0]
 802206c:	7811      	ldrb	r1, [r2, #0]
 802206e:	2930      	cmp	r1, #48	@ 0x30
 8022070:	d00c      	beq.n	802208c <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 8022072:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 8022076:	220a      	movs	r2, #10
 8022078:	e013      	b.n	80220a2 <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 802207a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802207e:	4686      	mov	lr, r0
 8022080:	e7ef      	b.n	8022062 <mg_str_to_num+0x3a>
 8022082:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8022086:	f04f 0e00 	mov.w	lr, #0
 802208a:	e7ea      	b.n	8022062 <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 802208c:	7852      	ldrb	r2, [r2, #1]
 802208e:	2a62      	cmp	r2, #98	@ 0x62
 8022090:	d015      	beq.n	80220be <mg_str_to_num+0x96>
 8022092:	2a78      	cmp	r2, #120	@ 0x78
 8022094:	d017      	beq.n	80220c6 <mg_str_to_num+0x9e>
      i++;
 8022096:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 802209a:	220a      	movs	r2, #10
 802209c:	e001      	b.n	80220a2 <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 802209e:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 80220a2:	2a0a      	cmp	r2, #10
 80220a4:	d044      	beq.n	8022130 <mg_str_to_num+0x108>
 80220a6:	2a10      	cmp	r2, #16
 80220a8:	f000 80d4 	beq.w	8022254 <mg_str_to_num+0x22c>
 80220ac:	2a02      	cmp	r2, #2
 80220ae:	d00e      	beq.n	80220ce <mg_str_to_num+0xa6>
 80220b0:	2000      	movs	r0, #0
}
 80220b2:	b003      	add	sp, #12
 80220b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i = 0, ndigits = 0;
 80220b8:	f04f 0c00 	mov.w	ip, #0
 80220bc:	e7f1      	b.n	80220a2 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 80220be:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80220c2:	4662      	mov	r2, ip
 80220c4:	e7ed      	b.n	80220a2 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 80220c6:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80220ca:	2210      	movs	r2, #16
 80220cc:	e7e9      	b.n	80220a2 <mg_str_to_num+0x7a>
  switch (base) {
 80220ce:	2200      	movs	r2, #0
 80220d0:	4611      	mov	r1, r2
 80220d2:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 80220d4:	9d01      	ldr	r5, [sp, #4]
 80220d6:	4565      	cmp	r5, ip
 80220d8:	f240 80c0 	bls.w	802225c <mg_str_to_num+0x234>
 80220dc:	9d00      	ldr	r5, [sp, #0]
 80220de:	f815 600c 	ldrb.w	r6, [r5, ip]
 80220e2:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 80220e6:	b2ff      	uxtb	r7, r7
 80220e8:	2f01      	cmp	r7, #1
 80220ea:	f200 80b7 	bhi.w	802225c <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 80220ee:	3e30      	subs	r6, #48	@ 0x30
 80220f0:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 80220f4:	ea4f 0950 	mov.w	r9, r0, lsr #1
 80220f8:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 80220fc:	ea4f 075e 	mov.w	r7, lr, lsr #1
 8022100:	4591      	cmp	r9, r2
 8022102:	418f      	sbcs	r7, r1
 8022104:	f0c0 80c5 	bcc.w	8022292 <mg_str_to_num+0x26a>
        result *= 2;
 8022108:	1892      	adds	r2, r2, r2
 802210a:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 802210c:	ebb0 0a06 	subs.w	sl, r0, r6
 8022110:	eb6e 0708 	sbc.w	r7, lr, r8
 8022114:	4592      	cmp	sl, r2
 8022116:	418f      	sbcs	r7, r1
 8022118:	f0c0 80bd 	bcc.w	8022296 <mg_str_to_num+0x26e>
        result += digit;
 802211c:	18b2      	adds	r2, r6, r2
 802211e:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 8022122:	f10c 0c01 	add.w	ip, ip, #1
 8022126:	3401      	adds	r4, #1
 8022128:	e7d4      	b.n	80220d4 <mg_str_to_num+0xac>
        if (result > max / 10) return false;  // Overflow
 802212a:	f04f 0901 	mov.w	r9, #1
 802212e:	e017      	b.n	8022160 <mg_str_to_num+0x138>
  switch (base) {
 8022130:	2200      	movs	r2, #0
 8022132:	4611      	mov	r1, r2
 8022134:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8022136:	9d01      	ldr	r5, [sp, #4]
 8022138:	4565      	cmp	r5, ip
 802213a:	f240 808f 	bls.w	802225c <mg_str_to_num+0x234>
 802213e:	9d00      	ldr	r5, [sp, #0]
 8022140:	f815 700c 	ldrb.w	r7, [r5, ip]
 8022144:	2f2f      	cmp	r7, #47	@ 0x2f
 8022146:	f240 8089 	bls.w	802225c <mg_str_to_num+0x234>
 802214a:	2f39      	cmp	r7, #57	@ 0x39
 802214c:	f200 8086 	bhi.w	802225c <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8022150:	3f30      	subs	r7, #48	@ 0x30
 8022152:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 8022156:	f04f 0900 	mov.w	r9, #0
 802215a:	eb10 060e 	adds.w	r6, r0, lr
 802215e:	d2e4      	bcs.n	802212a <mg_str_to_num+0x102>
 8022160:	444e      	add	r6, r9
 8022162:	4d54      	ldr	r5, [pc, #336]	@ (80222b4 <mg_str_to_num+0x28c>)
 8022164:	fba5 9b06 	umull	r9, fp, r5, r6
 8022168:	f02b 0903 	bic.w	r9, fp, #3
 802216c:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 8022170:	eba6 0609 	sub.w	r6, r6, r9
 8022174:	1b86      	subs	r6, r0, r6
 8022176:	f16e 0b00 	sbc.w	fp, lr, #0
 802217a:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 802217e:	fb09 f906 	mul.w	r9, r9, r6
 8022182:	fb05 990b 	mla	r9, r5, fp, r9
 8022186:	fba6 6a05 	umull	r6, sl, r6, r5
 802218a:	44d1      	add	r9, sl
 802218c:	0876      	lsrs	r6, r6, #1
 802218e:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 8022192:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8022196:	4296      	cmp	r6, r2
 8022198:	eb79 0901 	sbcs.w	r9, r9, r1
 802219c:	d37d      	bcc.n	802229a <mg_str_to_num+0x272>
        result *= 10;
 802219e:	ea4f 0981 	mov.w	r9, r1, lsl #2
 80221a2:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 80221a6:	0096      	lsls	r6, r2, #2
 80221a8:	18b2      	adds	r2, r6, r2
 80221aa:	eb41 0909 	adc.w	r9, r1, r9
 80221ae:	1892      	adds	r2, r2, r2
 80221b0:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 80221b4:	ebb0 0a07 	subs.w	sl, r0, r7
 80221b8:	eb6e 0108 	sbc.w	r1, lr, r8
 80221bc:	4592      	cmp	sl, r2
 80221be:	eb71 0109 	sbcs.w	r1, r1, r9
 80221c2:	d36c      	bcc.n	802229e <mg_str_to_num+0x276>
        result += digit;
 80221c4:	18ba      	adds	r2, r7, r2
 80221c6:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 80221ca:	f10c 0c01 	add.w	ip, ip, #1
 80221ce:	3401      	adds	r4, #1
 80221d0:	e7b1      	b.n	8022136 <mg_str_to_num+0x10e>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80221d2:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 80221d6:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80221d8:	2f05      	cmp	r7, #5
 80221da:	d832      	bhi.n	8022242 <mg_str_to_num+0x21a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80221dc:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80221de:	46b0      	mov	r8, r6
 80221e0:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 80221e2:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80221e6:	bf08      	it	eq
 80221e8:	f1b8 3fff 	cmpeq.w	r8, #4294967295	@ 0xffffffff
 80221ec:	d036      	beq.n	802225c <mg_str_to_num+0x234>
        if (result > max / 16) return false;  // Overflow
 80221ee:	ea4f 1910 	mov.w	r9, r0, lsr #4
 80221f2:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 80221f6:	ea4f 171e 	mov.w	r7, lr, lsr #4
 80221fa:	4591      	cmp	r9, r2
 80221fc:	418f      	sbcs	r7, r1
 80221fe:	d350      	bcc.n	80222a2 <mg_str_to_num+0x27a>
        result *= 16;
 8022200:	0109      	lsls	r1, r1, #4
 8022202:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8022206:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 8022208:	ebb0 0908 	subs.w	r9, r0, r8
 802220c:	eb6e 0706 	sbc.w	r7, lr, r6
 8022210:	4591      	cmp	r9, r2
 8022212:	418f      	sbcs	r7, r1
 8022214:	d347      	bcc.n	80222a6 <mg_str_to_num+0x27e>
        result += digit;
 8022216:	eb18 0202 	adds.w	r2, r8, r2
 802221a:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 802221e:	f10c 0c01 	add.w	ip, ip, #1
 8022222:	3401      	adds	r4, #1
      while (i < str.len) {
 8022224:	9d01      	ldr	r5, [sp, #4]
 8022226:	4565      	cmp	r5, ip
 8022228:	d918      	bls.n	802225c <mg_str_to_num+0x234>
        char c = str.buf[i];
 802222a:	9d00      	ldr	r5, [sp, #0]
 802222c:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8022230:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8022234:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8022236:	2f09      	cmp	r7, #9
 8022238:	d8cb      	bhi.n	80221d2 <mg_str_to_num+0x1aa>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 802223a:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 802223c:	46b0      	mov	r8, r6
 802223e:	17f6      	asrs	r6, r6, #31
 8022240:	e7cf      	b.n	80221e2 <mg_str_to_num+0x1ba>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8022242:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 8022246:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 8022248:	2f05      	cmp	r7, #5
 802224a:	d807      	bhi.n	802225c <mg_str_to_num+0x234>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 802224c:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 802224e:	46b0      	mov	r8, r6
 8022250:	17f6      	asrs	r6, r6, #31
 8022252:	e7c6      	b.n	80221e2 <mg_str_to_num+0x1ba>
  switch (base) {
 8022254:	2200      	movs	r2, #0
 8022256:	4611      	mov	r1, r2
 8022258:	4614      	mov	r4, r2
 802225a:	e7e3      	b.n	8022224 <mg_str_to_num+0x1fc>
  if (ndigits == 0) return false;
 802225c:	b32c      	cbz	r4, 80222aa <mg_str_to_num+0x282>
  if (i != str.len) return false;
 802225e:	9801      	ldr	r0, [sp, #4]
 8022260:	4560      	cmp	r0, ip
 8022262:	d124      	bne.n	80222ae <mg_str_to_num+0x286>
  if (val_len == 1) {
 8022264:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8022266:	2801      	cmp	r0, #1
 8022268:	d009      	beq.n	802227e <mg_str_to_num+0x256>
  } else if (val_len == 2) {
 802226a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802226c:	2802      	cmp	r0, #2
 802226e:	d008      	beq.n	8022282 <mg_str_to_num+0x25a>
  } else if (val_len == 4) {
 8022270:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8022272:	2804      	cmp	r0, #4
 8022274:	d008      	beq.n	8022288 <mg_str_to_num+0x260>
    *((uint64_t *) val) = (uint64_t) result;
 8022276:	601a      	str	r2, [r3, #0]
 8022278:	6059      	str	r1, [r3, #4]
  return true;
 802227a:	2001      	movs	r0, #1
 802227c:	e719      	b.n	80220b2 <mg_str_to_num+0x8a>
    *((uint8_t *) val) = (uint8_t) result;
 802227e:	701a      	strb	r2, [r3, #0]
 8022280:	e717      	b.n	80220b2 <mg_str_to_num+0x8a>
    *((uint16_t *) val) = (uint16_t) result;
 8022282:	801a      	strh	r2, [r3, #0]
  return true;
 8022284:	2001      	movs	r0, #1
 8022286:	e714      	b.n	80220b2 <mg_str_to_num+0x8a>
    *((uint32_t *) val) = (uint32_t) result;
 8022288:	601a      	str	r2, [r3, #0]
  return true;
 802228a:	2001      	movs	r0, #1
 802228c:	e711      	b.n	80220b2 <mg_str_to_num+0x8a>
  switch (base) {
 802228e:	2000      	movs	r0, #0
 8022290:	e70f      	b.n	80220b2 <mg_str_to_num+0x8a>
        if (result > max / 2) return false;  // Overflow
 8022292:	2000      	movs	r0, #0
 8022294:	e70d      	b.n	80220b2 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8022296:	2000      	movs	r0, #0
 8022298:	e70b      	b.n	80220b2 <mg_str_to_num+0x8a>
        if (result > max / 10) return false;  // Overflow
 802229a:	2000      	movs	r0, #0
 802229c:	e709      	b.n	80220b2 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 802229e:	2000      	movs	r0, #0
 80222a0:	e707      	b.n	80220b2 <mg_str_to_num+0x8a>
        if (result > max / 16) return false;  // Overflow
 80222a2:	2000      	movs	r0, #0
 80222a4:	e705      	b.n	80220b2 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 80222a6:	2000      	movs	r0, #0
 80222a8:	e703      	b.n	80220b2 <mg_str_to_num+0x8a>
  if (ndigits == 0) return false;
 80222aa:	2000      	movs	r0, #0
 80222ac:	e701      	b.n	80220b2 <mg_str_to_num+0x8a>
  if (i != str.len) return false;
 80222ae:	2000      	movs	r0, #0
 80222b0:	e6ff      	b.n	80220b2 <mg_str_to_num+0x8a>
 80222b2:	bf00      	nop
 80222b4:	cccccccd 	.word	0xcccccccd

080222b8 <mg_url_decode>:
                  int is_form_url_encoded) {
 80222b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222bc:	b087      	sub	sp, #28
 80222be:	4606      	mov	r6, r0
 80222c0:	460f      	mov	r7, r1
 80222c2:	4693      	mov	fp, r2
 80222c4:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80222c6:	2400      	movs	r4, #0
 80222c8:	4623      	mov	r3, r4
 80222ca:	e027      	b.n	802231c <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 80222cc:	f103 0802 	add.w	r8, r3, #2
 80222d0:	45b8      	cmp	r8, r7
 80222d2:	d241      	bcs.n	8022358 <mg_url_decode+0xa0>
 80222d4:	3301      	adds	r3, #1
 80222d6:	18f2      	adds	r2, r6, r3
 80222d8:	9203      	str	r2, [sp, #12]
 80222da:	5cf0      	ldrb	r0, [r6, r3]
 80222dc:	f7fc f8c8 	bl	801e470 <isx>
 80222e0:	2800      	cmp	r0, #0
 80222e2:	d03c      	beq.n	802235e <mg_url_decode+0xa6>
 80222e4:	f816 0008 	ldrb.w	r0, [r6, r8]
 80222e8:	f7fc f8c2 	bl	801e470 <isx>
 80222ec:	2800      	cmp	r0, #0
 80222ee:	d039      	beq.n	8022364 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 80222f0:	f10d 0a10 	add.w	sl, sp, #16
 80222f4:	2202      	movs	r2, #2
 80222f6:	9903      	ldr	r1, [sp, #12]
 80222f8:	4650      	mov	r0, sl
 80222fa:	f7ff f9c9 	bl	8021690 <mg_str_n>
 80222fe:	2301      	movs	r3, #1
 8022300:	9300      	str	r3, [sp, #0]
 8022302:	eb0b 0304 	add.w	r3, fp, r4
 8022306:	2210      	movs	r2, #16
 8022308:	e89a 0003 	ldmia.w	sl, {r0, r1}
 802230c:	f7ff fe8c 	bl	8022028 <mg_str_to_num>
        i += 2;
 8022310:	4643      	mov	r3, r8
 8022312:	e001      	b.n	8022318 <mg_url_decode+0x60>
      dst[j] = src[i];
 8022314:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8022318:	3301      	adds	r3, #1
 802231a:	462c      	mov	r4, r5
 802231c:	42bb      	cmp	r3, r7
 802231e:	d20e      	bcs.n	802233e <mg_url_decode+0x86>
 8022320:	1c65      	adds	r5, r4, #1
 8022322:	454d      	cmp	r5, r9
 8022324:	d20b      	bcs.n	802233e <mg_url_decode+0x86>
    if (src[i] == '%') {
 8022326:	5cf2      	ldrb	r2, [r6, r3]
 8022328:	2a25      	cmp	r2, #37	@ 0x25
 802232a:	d0cf      	beq.n	80222cc <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 802232c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802232e:	2900      	cmp	r1, #0
 8022330:	d0f0      	beq.n	8022314 <mg_url_decode+0x5c>
 8022332:	2a2b      	cmp	r2, #43	@ 0x2b
 8022334:	d1ee      	bne.n	8022314 <mg_url_decode+0x5c>
      dst[j] = ' ';
 8022336:	2220      	movs	r2, #32
 8022338:	f80b 2004 	strb.w	r2, [fp, r4]
 802233c:	e7ec      	b.n	8022318 <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 802233e:	454c      	cmp	r4, r9
 8022340:	d202      	bcs.n	8022348 <mg_url_decode+0x90>
 8022342:	2200      	movs	r2, #0
 8022344:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8022348:	42bb      	cmp	r3, r7
 802234a:	d30e      	bcc.n	802236a <mg_url_decode+0xb2>
 802234c:	454c      	cmp	r4, r9
 802234e:	d20f      	bcs.n	8022370 <mg_url_decode+0xb8>
 8022350:	4620      	mov	r0, r4
}
 8022352:	b007      	add	sp, #28
 8022354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 8022358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802235c:	e7f9      	b.n	8022352 <mg_url_decode+0x9a>
 802235e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022362:	e7f6      	b.n	8022352 <mg_url_decode+0x9a>
 8022364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022368:	e7f3      	b.n	8022352 <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 802236a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802236e:	e7f0      	b.n	8022352 <mg_url_decode+0x9a>
 8022370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022374:	e7ed      	b.n	8022352 <mg_url_decode+0x9a>

08022376 <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 8022376:	b352      	cbz	r2, 80223ce <mg_http_get_var+0x58>
                    size_t dst_len) {
 8022378:	b570      	push	{r4, r5, r6, lr}
 802237a:	b086      	sub	sp, #24
 802237c:	4604      	mov	r4, r0
 802237e:	461d      	mov	r5, r3
 8022380:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 8022382:	b10b      	cbz	r3, 8022388 <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8022384:	2300      	movs	r3, #0
 8022386:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 8022388:	b325      	cbz	r5, 80223d4 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 802238a:	6823      	ldr	r3, [r4, #0]
 802238c:	b32b      	cbz	r3, 80223da <mg_http_get_var+0x64>
 802238e:	b339      	cbz	r1, 80223e0 <mg_http_get_var+0x6a>
 8022390:	6863      	ldr	r3, [r4, #4]
 8022392:	b343      	cbz	r3, 80223e6 <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8022394:	a804      	add	r0, sp, #16
 8022396:	f7ff f96f 	bl	8021678 <mg_str_s>
 802239a:	9b05      	ldr	r3, [sp, #20]
 802239c:	9300      	str	r3, [sp, #0]
 802239e:	9b04      	ldr	r3, [sp, #16]
 80223a0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80223a4:	a802      	add	r0, sp, #8
 80223a6:	f7ff fbf3 	bl	8021b90 <mg_http_var>
    if (v.buf == NULL) {
 80223aa:	9802      	ldr	r0, [sp, #8]
 80223ac:	b158      	cbz	r0, 80223c6 <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 80223ae:	2301      	movs	r3, #1
 80223b0:	9300      	str	r3, [sp, #0]
 80223b2:	462b      	mov	r3, r5
 80223b4:	4632      	mov	r2, r6
 80223b6:	9903      	ldr	r1, [sp, #12]
 80223b8:	f7ff ff7e 	bl	80222b8 <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 80223bc:	2800      	cmp	r0, #0
 80223be:	da04      	bge.n	80223ca <mg_http_get_var+0x54>
 80223c0:	f06f 0002 	mvn.w	r0, #2
 80223c4:	e001      	b.n	80223ca <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 80223c6:	f06f 0003 	mvn.w	r0, #3
}
 80223ca:	b006      	add	sp, #24
 80223cc:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 80223ce:	f06f 0001 	mvn.w	r0, #1
}
 80223d2:	4770      	bx	lr
    len = -2;  // Bad destination
 80223d4:	f06f 0001 	mvn.w	r0, #1
 80223d8:	e7f7      	b.n	80223ca <mg_http_get_var+0x54>
    len = -1;  // Bad source
 80223da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80223de:	e7f4      	b.n	80223ca <mg_http_get_var+0x54>
 80223e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80223e4:	e7f1      	b.n	80223ca <mg_http_get_var+0x54>
 80223e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 80223ea:	e7ee      	b.n	80223ca <mg_http_get_var+0x54>

080223ec <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 80223ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80223f0:	b0ae      	sub	sp, #184	@ 0xb8
 80223f2:	4604      	mov	r4, r0
 80223f4:	460d      	mov	r5, r1
 80223f6:	4616      	mov	r6, r2
 80223f8:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80223fa:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80223fe:	f1b8 0f00 	cmp.w	r8, #0
 8022402:	d04f      	beq.n	80224a4 <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 8022404:	942a      	str	r4, [sp, #168]	@ 0xa8
 8022406:	952b      	str	r5, [sp, #172]	@ 0xac
 8022408:	962c      	str	r6, [sp, #176]	@ 0xb0
 802240a:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 802240c:	2300      	movs	r3, #0
 802240e:	9300      	str	r3, [sp, #0]
 8022410:	2380      	movs	r3, #128	@ 0x80
 8022412:	aa07      	add	r2, sp, #28
 8022414:	68e9      	ldr	r1, [r5, #12]
 8022416:	68a8      	ldr	r0, [r5, #8]
 8022418:	f7ff ff4e 	bl	80222b8 <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 802241c:	1e02      	subs	r2, r0, #0
 802241e:	dd44      	ble.n	80224aa <listdir+0xbe>
 8022420:	a907      	add	r1, sp, #28
 8022422:	a805      	add	r0, sp, #20
 8022424:	f7ff f934 	bl	8021690 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8022428:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 802242a:	2a00      	cmp	r2, #0
 802242c:	d044      	beq.n	80224b8 <listdir+0xcc>
 802242e:	4923      	ldr	r1, [pc, #140]	@ (80224bc <listdir+0xd0>)
 8022430:	4620      	mov	r0, r4
 8022432:	f7ff f819 	bl	8021468 <mg_printf>
  off = c->send.len;  // Start of body
 8022436:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8022438:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 802243a:	9b05      	ldr	r3, [sp, #20]
 802243c:	9303      	str	r3, [sp, #12]
 802243e:	9202      	str	r2, [sp, #8]
 8022440:	491f      	ldr	r1, [pc, #124]	@ (80224c0 <listdir+0xd4>)
 8022442:	9101      	str	r1, [sp, #4]
 8022444:	491f      	ldr	r1, [pc, #124]	@ (80224c4 <listdir+0xd8>)
 8022446:	9100      	str	r1, [sp, #0]
 8022448:	491f      	ldr	r1, [pc, #124]	@ (80224c8 <listdir+0xdc>)
 802244a:	4620      	mov	r0, r4
 802244c:	f7ff f80c 	bl	8021468 <mg_printf>
  mg_printf(c, "%s",
 8022450:	4a1e      	ldr	r2, [pc, #120]	@ (80224cc <listdir+0xe0>)
 8022452:	491f      	ldr	r1, [pc, #124]	@ (80224d0 <listdir+0xe4>)
 8022454:	4620      	mov	r0, r4
 8022456:	f7ff f807 	bl	8021468 <mg_printf>
  fs->ls(dir, printdirentry, &d);
 802245a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802245e:	aa2a      	add	r2, sp, #168	@ 0xa8
 8022460:	491c      	ldr	r1, [pc, #112]	@ (80224d4 <listdir+0xe8>)
 8022462:	4638      	mov	r0, r7
 8022464:	4798      	blx	r3
  mg_printf(c,
 8022466:	4a1c      	ldr	r2, [pc, #112]	@ (80224d8 <listdir+0xec>)
 8022468:	491c      	ldr	r1, [pc, #112]	@ (80224dc <listdir+0xf0>)
 802246a:	4620      	mov	r0, r4
 802246c:	f7fe fffc 	bl	8021468 <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8022470:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8022472:	1b5b      	subs	r3, r3, r5
 8022474:	4a1a      	ldr	r2, [pc, #104]	@ (80224e0 <listdir+0xf4>)
 8022476:	210a      	movs	r1, #10
 8022478:	a827      	add	r0, sp, #156	@ 0x9c
 802247a:	f7fe fb1d 	bl	8020ab8 <mg_snprintf>
 802247e:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 8022480:	280a      	cmp	r0, #10
 8022482:	d900      	bls.n	8022486 <listdir+0x9a>
 8022484:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 8022486:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8022488:	3d0c      	subs	r5, #12
 802248a:	a927      	add	r1, sp, #156	@ 0x9c
 802248c:	4428      	add	r0, r5
 802248e:	f008 fd63 	bl	802af58 <memcpy>
  c->is_resp = 0;                          // Mark response end
 8022492:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8022496:	f36f 13c7 	bfc	r3, #7, #1
 802249a:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 802249e:	b02e      	add	sp, #184	@ 0xb8
 80224a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80224a4:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 80224e8 <listdir+0xfc>
 80224a8:	e7ac      	b.n	8022404 <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 80224aa:	ab05      	add	r3, sp, #20
 80224ac:	3508      	adds	r5, #8
 80224ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80224b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80224b6:	e7b7      	b.n	8022428 <listdir+0x3c>
  mg_printf(c,
 80224b8:	4a0a      	ldr	r2, [pc, #40]	@ (80224e4 <listdir+0xf8>)
 80224ba:	e7b8      	b.n	802242e <listdir+0x42>
 80224bc:	08036b1c 	.word	0x08036b1c
 80224c0:	08036cfc 	.word	0x08036cfc
 80224c4:	08036ec0 	.word	0x08036ec0
 80224c8:	08036b74 	.word	0x08036b74
 80224cc:	08037088 	.word	0x08037088
 80224d0:	080374ec 	.word	0x080374ec
 80224d4:	08023c1d 	.word	0x08023c1d
 80224d8:	08034a58 	.word	0x08034a58
 80224dc:	080370d8 	.word	0x080370d8
 80224e0:	0803779c 	.word	0x0803779c
 80224e4:	08033984 	.word	0x08033984
 80224e8:	200000ac 	.word	0x200000ac

080224ec <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 80224ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80224f0:	b087      	sub	sp, #28
 80224f2:	461f      	mov	r7, r3
  int i = 0, n = 0;
 80224f4:	2300      	movs	r3, #0
 80224f6:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 80224f8:	2902      	cmp	r1, #2
 80224fa:	dd42      	ble.n	8022582 <skip_chunk+0x96>
 80224fc:	4606      	mov	r6, r0
 80224fe:	460d      	mov	r5, r1
 8022500:	4690      	mov	r8, r2
  int i = 0, n = 0;
 8022502:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 8022504:	42ac      	cmp	r4, r5
 8022506:	da05      	bge.n	8022514 <skip_chunk+0x28>
 8022508:	5d30      	ldrb	r0, [r6, r4]
 802250a:	f7fc fbdc 	bl	801ecc6 <is_hex_digit>
 802250e:	b108      	cbz	r0, 8022514 <skip_chunk+0x28>
 8022510:	3401      	adds	r4, #1
 8022512:	e7f7      	b.n	8022504 <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 8022514:	2c00      	cmp	r4, #0
 8022516:	d036      	beq.n	8022586 <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8022518:	2c08      	cmp	r4, #8
 802251a:	dc37      	bgt.n	802258c <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 802251c:	42ac      	cmp	r4, r5
 802251e:	da38      	bge.n	8022592 <skip_chunk+0xa6>
 8022520:	4622      	mov	r2, r4
 8022522:	5d33      	ldrb	r3, [r6, r4]
 8022524:	2b0d      	cmp	r3, #13
 8022526:	d137      	bne.n	8022598 <skip_chunk+0xac>
 8022528:	1933      	adds	r3, r6, r4
 802252a:	785b      	ldrb	r3, [r3, #1]
 802252c:	2b0a      	cmp	r3, #10
 802252e:	d136      	bne.n	802259e <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8022530:	f10d 0910 	add.w	r9, sp, #16
 8022534:	4631      	mov	r1, r6
 8022536:	4648      	mov	r0, r9
 8022538:	f7ff f8aa 	bl	8021690 <mg_str_n>
 802253c:	2304      	movs	r3, #4
 802253e:	9300      	str	r3, [sp, #0]
 8022540:	ab03      	add	r3, sp, #12
 8022542:	2210      	movs	r2, #16
 8022544:	e899 0003 	ldmia.w	r9, {r0, r1}
 8022548:	f7ff fd6e 	bl	8022028 <mg_str_to_num>
 802254c:	b350      	cbz	r0, 80225a4 <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 802254e:	9b03      	ldr	r3, [sp, #12]
 8022550:	2b00      	cmp	r3, #0
 8022552:	db2a      	blt.n	80225aa <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8022554:	1b2d      	subs	r5, r5, r4
 8022556:	3d03      	subs	r5, #3
 8022558:	42ab      	cmp	r3, r5
 802255a:	da29      	bge.n	80225b0 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 802255c:	4423      	add	r3, r4
 802255e:	18f2      	adds	r2, r6, r3
 8022560:	7892      	ldrb	r2, [r2, #2]
 8022562:	2a0d      	cmp	r2, #13
 8022564:	d126      	bne.n	80225b4 <skip_chunk+0xc8>
 8022566:	441e      	add	r6, r3
 8022568:	78f3      	ldrb	r3, [r6, #3]
 802256a:	2b0a      	cmp	r3, #10
 802256c:	d125      	bne.n	80225ba <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 802256e:	3402      	adds	r4, #2
 8022570:	f8c8 4000 	str.w	r4, [r8]
 8022574:	9b03      	ldr	r3, [sp, #12]
 8022576:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 8022578:	441c      	add	r4, r3
 802257a:	1ca0      	adds	r0, r4, #2
}
 802257c:	b007      	add	sp, #28
 802257e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 8022582:	2000      	movs	r0, #0
 8022584:	e7fa      	b.n	802257c <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 8022586:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802258a:	e7f7      	b.n	802257c <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 802258c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022590:	e7f4      	b.n	802257c <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8022592:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022596:	e7f1      	b.n	802257c <skip_chunk+0x90>
 8022598:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802259c:	e7ee      	b.n	802257c <skip_chunk+0x90>
 802259e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80225a2:	e7eb      	b.n	802257c <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 80225a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80225a8:	e7e8      	b.n	802257c <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80225aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80225ae:	e7e5      	b.n	802257c <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80225b0:	2000      	movs	r0, #0
 80225b2:	e7e3      	b.n	802257c <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 80225b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80225b8:	e7e0      	b.n	802257c <skip_chunk+0x90>
 80225ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80225be:	e7dd      	b.n	802257c <skip_chunk+0x90>

080225c0 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 80225c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80225c4:	b086      	sub	sp, #24
 80225c6:	ac02      	add	r4, sp, #8
 80225c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80225cc:	4617      	mov	r7, r2
 80225ce:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 80225d0:	2400      	movs	r4, #0
 80225d2:	4621      	mov	r1, r4
 80225d4:	e01c      	b.n	8022610 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 80225d6:	f101 0805 	add.w	r8, r1, #5
 80225da:	45a8      	cmp	r8, r5
 80225dc:	d221      	bcs.n	8022622 <mg_json_unescape+0x62>
 80225de:	185a      	adds	r2, r3, r1
 80225e0:	7852      	ldrb	r2, [r2, #1]
 80225e2:	2a75      	cmp	r2, #117	@ 0x75
 80225e4:	d11d      	bne.n	8022622 <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 80225e6:	3102      	adds	r1, #2
 80225e8:	ad04      	add	r5, sp, #16
 80225ea:	2204      	movs	r2, #4
 80225ec:	4419      	add	r1, r3
 80225ee:	4628      	mov	r0, r5
 80225f0:	f7ff f84e 	bl	8021690 <mg_str_n>
 80225f4:	2301      	movs	r3, #1
 80225f6:	9300      	str	r3, [sp, #0]
 80225f8:	193b      	adds	r3, r7, r4
 80225fa:	2210      	movs	r2, #16
 80225fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8022600:	f7ff fd12 	bl	8022028 <mg_str_to_num>
 8022604:	b308      	cbz	r0, 802264a <mg_json_unescape+0x8a>
      i += 5;
 8022606:	4641      	mov	r1, r8
 8022608:	e000      	b.n	802260c <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 802260a:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 802260c:	3101      	adds	r1, #1
 802260e:	3401      	adds	r4, #1
 8022610:	9d03      	ldr	r5, [sp, #12]
 8022612:	428d      	cmp	r5, r1
 8022614:	d914      	bls.n	8022640 <mg_json_unescape+0x80>
 8022616:	42b4      	cmp	r4, r6
 8022618:	d212      	bcs.n	8022640 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 802261a:	9b02      	ldr	r3, [sp, #8]
 802261c:	5c58      	ldrb	r0, [r3, r1]
 802261e:	285c      	cmp	r0, #92	@ 0x5c
 8022620:	d0d9      	beq.n	80225d6 <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8022622:	285c      	cmp	r0, #92	@ 0x5c
 8022624:	d1f1      	bne.n	802260a <mg_json_unescape+0x4a>
 8022626:	f101 0801 	add.w	r8, r1, #1
 802262a:	45a8      	cmp	r8, r5
 802262c:	d2ed      	bcs.n	802260a <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 802262e:	2100      	movs	r1, #0
 8022630:	f813 0008 	ldrb.w	r0, [r3, r8]
 8022634:	f7fc fb6c 	bl	801ed10 <json_esc>
      if (c == 0) return false;
 8022638:	b150      	cbz	r0, 8022650 <mg_json_unescape+0x90>
      to[j] = c;
 802263a:	5538      	strb	r0, [r7, r4]
      i++;
 802263c:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 802263e:	e7e5      	b.n	802260c <mg_json_unescape+0x4c>
  if (j >= n) return false;
 8022640:	42b4      	cmp	r4, r6
 8022642:	d207      	bcs.n	8022654 <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 8022644:	2300      	movs	r3, #0
 8022646:	553b      	strb	r3, [r7, r4]
  return true;
 8022648:	2001      	movs	r0, #1
}
 802264a:	b006      	add	sp, #24
 802264c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 8022650:	2000      	movs	r0, #0
 8022652:	e7fa      	b.n	802264a <mg_json_unescape+0x8a>
  if (j >= n) return false;
 8022654:	2000      	movs	r0, #0
 8022656:	e7f8      	b.n	802264a <mg_json_unescape+0x8a>

08022658 <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 8022658:	b5f0      	push	{r4, r5, r6, r7, lr}
 802265a:	b087      	sub	sp, #28
 802265c:	46ec      	mov	ip, sp
 802265e:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 8022662:	2300      	movs	r3, #0
 8022664:	9303      	str	r3, [sp, #12]
 8022666:	ab03      	add	r3, sp, #12
 8022668:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802266c:	f7fd fd7e 	bl	802016c <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 8022670:	1e04      	subs	r4, r0, #0
 8022672:	db25      	blt.n	80226c0 <mg_json_get_str+0x68>
 8022674:	9903      	ldr	r1, [sp, #12]
 8022676:	2901      	cmp	r1, #1
 8022678:	dd24      	ble.n	80226c4 <mg_json_get_str+0x6c>
 802267a:	9e00      	ldr	r6, [sp, #0]
 802267c:	5d33      	ldrb	r3, [r6, r4]
 802267e:	2b22      	cmp	r3, #34	@ 0x22
 8022680:	d003      	beq.n	802268a <mg_json_get_str+0x32>
  char *result = NULL;
 8022682:	2500      	movs	r5, #0
}
 8022684:	4628      	mov	r0, r5
 8022686:	b007      	add	sp, #28
 8022688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 802268a:	2001      	movs	r0, #1
 802268c:	f7fd fbc7 	bl	801fe1e <mg_calloc>
 8022690:	4605      	mov	r5, r0
 8022692:	2800      	cmp	r0, #0
 8022694:	d0f6      	beq.n	8022684 <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 8022696:	1c61      	adds	r1, r4, #1
 8022698:	9f03      	ldr	r7, [sp, #12]
 802269a:	ac04      	add	r4, sp, #16
 802269c:	1eba      	subs	r2, r7, #2
 802269e:	4431      	add	r1, r6
 80226a0:	4620      	mov	r0, r4
 80226a2:	f7fe fff5 	bl	8021690 <mg_str_n>
 80226a6:	463b      	mov	r3, r7
 80226a8:	462a      	mov	r2, r5
 80226aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80226ae:	f7ff ff87 	bl	80225c0 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 80226b2:	2800      	cmp	r0, #0
 80226b4:	d1e6      	bne.n	8022684 <mg_json_get_str+0x2c>
      free(result);
 80226b6:	4628      	mov	r0, r5
 80226b8:	f7f6 fd90 	bl	80191dc <vPortFree>
      result = NULL;
 80226bc:	2500      	movs	r5, #0
 80226be:	e7e1      	b.n	8022684 <mg_json_get_str+0x2c>
  char *result = NULL;
 80226c0:	2500      	movs	r5, #0
 80226c2:	e7df      	b.n	8022684 <mg_json_get_str+0x2c>
 80226c4:	2500      	movs	r5, #0
 80226c6:	e7dd      	b.n	8022684 <mg_json_get_str+0x2c>

080226c8 <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 80226c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80226cc:	b08a      	sub	sp, #40	@ 0x28
 80226ce:	ab02      	add	r3, sp, #8
 80226d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80226d4:	4617      	mov	r7, r2
  addr->scope_id = 0;
 80226d6:	2300      	movs	r3, #0
 80226d8:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 80226da:	2902      	cmp	r1, #2
 80226dc:	d904      	bls.n	80226e8 <mg_aton6+0x20>
 80226de:	460b      	mov	r3, r1
 80226e0:	4602      	mov	r2, r0
 80226e2:	7801      	ldrb	r1, [r0, #0]
 80226e4:	295b      	cmp	r1, #91	@ 0x5b
 80226e6:	d00f      	beq.n	8022708 <mg_aton6+0x40>
  if (mg_v4mapped(str, addr)) return true;
 80226e8:	463a      	mov	r2, r7
 80226ea:	ab02      	add	r3, sp, #8
 80226ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80226f0:	f7fe ffd1 	bl	8021696 <mg_v4mapped>
 80226f4:	4680      	mov	r8, r0
 80226f6:	2800      	cmp	r0, #0
 80226f8:	f040 8087 	bne.w	802280a <mg_aton6+0x142>
  size_t i, j = 0, n = 0, dc = 42;
 80226fc:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 8022700:	2600      	movs	r6, #0
 8022702:	4635      	mov	r5, r6
  for (i = 0; i < str.len; i++) {
 8022704:	4634      	mov	r4, r6
 8022706:	e020      	b.n	802274a <mg_aton6+0x82>
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8022708:	3201      	adds	r2, #1
 802270a:	9202      	str	r2, [sp, #8]
 802270c:	3b02      	subs	r3, #2
 802270e:	9303      	str	r3, [sp, #12]
 8022710:	e7ea      	b.n	80226e8 <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 8022712:	2300      	movs	r3, #0
 8022714:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 8022716:	1ceb      	adds	r3, r5, #3
 8022718:	42a3      	cmp	r3, r4
 802271a:	d376      	bcc.n	802280a <mg_aton6+0x142>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 802271c:	1b62      	subs	r2, r4, r5
 802271e:	f10d 0a18 	add.w	sl, sp, #24
 8022722:	3201      	adds	r2, #1
 8022724:	4429      	add	r1, r5
 8022726:	4650      	mov	r0, sl
 8022728:	f7fe ffb2 	bl	8021690 <mg_str_n>
 802272c:	2304      	movs	r3, #4
 802272e:	9300      	str	r3, [sp, #0]
 8022730:	ab05      	add	r3, sp, #20
 8022732:	2210      	movs	r2, #16
 8022734:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8022738:	f7ff fc76 	bl	8022028 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 802273c:	9b05      	ldr	r3, [sp, #20]
 802273e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8022742:	55ba      	strb	r2, [r7, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 8022744:	1c72      	adds	r2, r6, #1
 8022746:	54bb      	strb	r3, [r7, r2]
  for (i = 0; i < str.len; i++) {
 8022748:	3401      	adds	r4, #1
 802274a:	9803      	ldr	r0, [sp, #12]
 802274c:	42a0      	cmp	r0, r4
 802274e:	d941      	bls.n	80227d4 <mg_aton6+0x10c>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8022750:	9902      	ldr	r1, [sp, #8]
 8022752:	5d0a      	ldrb	r2, [r1, r4]
 8022754:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8022758:	b2db      	uxtb	r3, r3
 802275a:	2b09      	cmp	r3, #9
 802275c:	d9d9      	bls.n	8022712 <mg_aton6+0x4a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 802275e:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 8022762:	b2db      	uxtb	r3, r3
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8022764:	2b05      	cmp	r3, #5
 8022766:	d9d4      	bls.n	8022712 <mg_aton6+0x4a>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8022768:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 802276c:	b2db      	uxtb	r3, r3
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 802276e:	2b05      	cmp	r3, #5
 8022770:	d9cf      	bls.n	8022712 <mg_aton6+0x4a>
    } else if (str.buf[i] == ':') {
 8022772:	2a3a      	cmp	r2, #58	@ 0x3a
 8022774:	d119      	bne.n	80227aa <mg_aton6+0xe2>
      j = i + 1;
 8022776:	1c65      	adds	r5, r4, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 8022778:	b12c      	cbz	r4, 8022786 <mg_aton6+0xbe>
 802277a:	190b      	adds	r3, r1, r4
 802277c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022780:	2b3a      	cmp	r3, #58	@ 0x3a
 8022782:	d007      	beq.n	8022794 <mg_aton6+0xcc>
        n += 2;
 8022784:	3602      	adds	r6, #2
      if (n > 14) return false;
 8022786:	2e0e      	cmp	r6, #14
 8022788:	d83f      	bhi.n	802280a <mg_aton6+0x142>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 802278a:	1c73      	adds	r3, r6, #1
 802278c:	2200      	movs	r2, #0
 802278e:	54fa      	strb	r2, [r7, r3]
 8022790:	55ba      	strb	r2, [r7, r6]
 8022792:	e7d9      	b.n	8022748 <mg_aton6+0x80>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8022794:	2c01      	cmp	r4, #1
 8022796:	d906      	bls.n	80227a6 <mg_aton6+0xde>
 8022798:	4421      	add	r1, r4
 802279a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 802279e:	2b3a      	cmp	r3, #58	@ 0x3a
 80227a0:	d033      	beq.n	802280a <mg_aton6+0x142>
        dc = n;  // Double colon
 80227a2:	46b1      	mov	r9, r6
 80227a4:	e7ef      	b.n	8022786 <mg_aton6+0xbe>
 80227a6:	46b1      	mov	r9, r6
 80227a8:	e7ed      	b.n	8022786 <mg_aton6+0xbe>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 80227aa:	2a25      	cmp	r2, #37	@ 0x25
 80227ac:	d12d      	bne.n	802280a <mg_aton6+0x142>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 80227ae:	1c63      	adds	r3, r4, #1
 80227b0:	1b02      	subs	r2, r0, r4
 80227b2:	ac08      	add	r4, sp, #32
 80227b4:	3a01      	subs	r2, #1
 80227b6:	4419      	add	r1, r3
 80227b8:	4620      	mov	r0, r4
 80227ba:	f7fe ff69 	bl	8021690 <mg_str_n>
 80227be:	2301      	movs	r3, #1
 80227c0:	9300      	str	r3, [sp, #0]
 80227c2:	f107 0312 	add.w	r3, r7, #18
 80227c6:	220a      	movs	r2, #10
 80227c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80227cc:	f7ff fc2c 	bl	8022028 <mg_str_to_num>
 80227d0:	4680      	mov	r8, r0
 80227d2:	e01a      	b.n	802280a <mg_aton6+0x142>
  if (n < 14 && dc == 42) return false;
 80227d4:	2e0d      	cmp	r6, #13
 80227d6:	d814      	bhi.n	8022802 <mg_aton6+0x13a>
 80227d8:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 80227dc:	d015      	beq.n	802280a <mg_aton6+0x142>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 80227de:	eba9 0006 	sub.w	r0, r9, r6
 80227e2:	300e      	adds	r0, #14
 80227e4:	eb07 0409 	add.w	r4, r7, r9
 80227e8:	eba6 0209 	sub.w	r2, r6, r9
 80227ec:	3202      	adds	r2, #2
 80227ee:	4621      	mov	r1, r4
 80227f0:	4438      	add	r0, r7
 80227f2:	f007 f95b 	bl	8029aac <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 80227f6:	f1c6 020e 	rsb	r2, r6, #14
 80227fa:	2100      	movs	r1, #0
 80227fc:	4620      	mov	r0, r4
 80227fe:	f007 f96f 	bl	8029ae0 <memset>
  addr->is_ip6 = true;
 8022802:	f04f 0801 	mov.w	r8, #1
 8022806:	f887 8013 	strb.w	r8, [r7, #19]
}
 802280a:	4640      	mov	r0, r8
 802280c:	b00a      	add	sp, #40	@ 0x28
 802280e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08022812 <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 8022812:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8022814:	2400      	movs	r4, #0
 8022816:	600c      	str	r4, [r1, #0]
 8022818:	e9c1 2302 	strd	r2, r3, [r1, #8]
 802281c:	2200      	movs	r2, #0
 802281e:	2300      	movs	r3, #0
 8022820:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8022824:	9b01      	ldr	r3, [sp, #4]
 8022826:	618b      	str	r3, [r1, #24]
 8022828:	9b02      	ldr	r3, [sp, #8]
 802282a:	61cb      	str	r3, [r1, #28]
 802282c:	9b03      	ldr	r3, [sp, #12]
 802282e:	620b      	str	r3, [r1, #32]
 8022830:	6803      	ldr	r3, [r0, #0]
 8022832:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 8022834:	6001      	str	r1, [r0, #0]
}
 8022836:	f85d 4b04 	ldr.w	r4, [sp], #4
 802283a:	4770      	bx	lr

0802283c <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 802283c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802283e:	b085      	sub	sp, #20
 8022840:	4604      	mov	r4, r0
 8022842:	4616      	mov	r6, r2
 8022844:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8022846:	2128      	movs	r1, #40	@ 0x28
 8022848:	2001      	movs	r0, #1
 802284a:	f7fd fae8 	bl	801fe1e <mg_calloc>
  if (t != NULL) {
 802284e:	4607      	mov	r7, r0
 8022850:	b180      	cbz	r0, 8022874 <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8022852:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022854:	9302      	str	r3, [sp, #8]
 8022856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022858:	9301      	str	r3, [sp, #4]
 802285a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802285c:	9300      	str	r3, [sp, #0]
 802285e:	4632      	mov	r2, r6
 8022860:	462b      	mov	r3, r5
 8022862:	4601      	mov	r1, r0
 8022864:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8022868:	f7ff ffd3 	bl	8022812 <mg_timer_init>
    t->id = mgr->timerid++;
 802286c:	6a23      	ldr	r3, [r4, #32]
 802286e:	1c5a      	adds	r2, r3, #1
 8022870:	6222      	str	r2, [r4, #32]
 8022872:	603b      	str	r3, [r7, #0]
}
 8022874:	4638      	mov	r0, r7
 8022876:	b005      	add	sp, #20
 8022878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802287a:	0000      	movs	r0, r0
 802287c:	0000      	movs	r0, r0
	...

08022880 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8022880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022884:	4698      	mov	r8, r3
 8022886:	9906      	ldr	r1, [sp, #24]
 8022888:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 802288a:	188e      	adds	r6, r1, r2
 802288c:	eb43 0504 	adc.w	r5, r3, r4
 8022890:	6847      	ldr	r7, [r0, #4]
 8022892:	6803      	ldr	r3, [r0, #0]
 8022894:	429e      	cmp	r6, r3
 8022896:	eb75 0707 	sbcs.w	r7, r5, r7
 802289a:	d203      	bcs.n	80228a4 <mg_timer_expired+0x24>
 802289c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80228e0 <mg_timer_expired+0x60>
 80228a0:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 80228a4:	6847      	ldr	r7, [r0, #4]
 80228a6:	6803      	ldr	r3, [r0, #0]
 80228a8:	431f      	orrs	r7, r3
 80228aa:	d101      	bne.n	80228b0 <mg_timer_expired+0x30>
 80228ac:	6006      	str	r6, [r0, #0]
 80228ae:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 80228b0:	6807      	ldr	r7, [r0, #0]
 80228b2:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80228b6:	42b9      	cmp	r1, r7
 80228b8:	eb74 0e0c 	sbcs.w	lr, r4, ip
 80228bc:	d30e      	bcc.n	80228dc <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80228be:	1bc9      	subs	r1, r1, r7
 80228c0:	eb64 040c 	sbc.w	r4, r4, ip
 80228c4:	428a      	cmp	r2, r1
 80228c6:	eb78 0404 	sbcs.w	r4, r8, r4
 80228ca:	d302      	bcc.n	80228d2 <mg_timer_expired+0x52>
 80228cc:	18be      	adds	r6, r7, r2
 80228ce:	eb4c 0508 	adc.w	r5, ip, r8
 80228d2:	6006      	str	r6, [r0, #0]
 80228d4:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 80228d6:	2001      	movs	r0, #1
}
 80228d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 80228dc:	2000      	movs	r0, #0
 80228de:	e7fb      	b.n	80228d8 <mg_timer_expired+0x58>
	...

080228e8 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 80228e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80228ec:	b082      	sub	sp, #8
 80228ee:	4617      	mov	r7, r2
 80228f0:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 80228f2:	6804      	ldr	r4, [r0, #0]
 80228f4:	e019      	b.n	802292a <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80228f6:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 80228f8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80228fc:	9700      	str	r7, [sp, #0]
 80228fe:	9601      	str	r6, [sp, #4]
 8022900:	f104 0010 	add.w	r0, r4, #16
 8022904:	f7ff ffbc 	bl	8022880 <mg_timer_expired>
    tmp = t->next;
 8022908:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 802290c:	b905      	cbnz	r5, 8022910 <mg_timer_poll+0x28>
 802290e:	b158      	cbz	r0, 8022928 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8022910:	69a3      	ldr	r3, [r4, #24]
 8022912:	f003 0305 	and.w	r3, r3, #5
 8022916:	2b04      	cmp	r3, #4
 8022918:	d002      	beq.n	8022920 <mg_timer_poll+0x38>
      t->fn(t->arg);
 802291a:	69e3      	ldr	r3, [r4, #28]
 802291c:	6a20      	ldr	r0, [r4, #32]
 802291e:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 8022920:	69a1      	ldr	r1, [r4, #24]
 8022922:	f041 0104 	orr.w	r1, r1, #4
 8022926:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8022928:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 802292a:	b164      	cbz	r4, 8022946 <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 802292c:	6923      	ldr	r3, [r4, #16]
 802292e:	6962      	ldr	r2, [r4, #20]
 8022930:	4313      	orrs	r3, r2
 8022932:	d1e0      	bne.n	80228f6 <mg_timer_poll+0xe>
 8022934:	69a3      	ldr	r3, [r4, #24]
 8022936:	f003 0306 	and.w	r3, r3, #6
 802293a:	2b02      	cmp	r3, #2
 802293c:	d001      	beq.n	8022942 <mg_timer_poll+0x5a>
 802293e:	2500      	movs	r5, #0
 8022940:	e7da      	b.n	80228f8 <mg_timer_poll+0x10>
 8022942:	2501      	movs	r5, #1
 8022944:	e7d8      	b.n	80228f8 <mg_timer_poll+0x10>
}
 8022946:	b002      	add	sp, #8
 8022948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802294c <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 802294c:	b118      	cbz	r0, 8022956 <mg_tls_recv+0xa>
 802294e:	b121      	cbz	r1, 802295a <mg_tls_recv+0xe>
 8022950:	b92a      	cbnz	r2, 802295e <mg_tls_recv+0x12>
 8022952:	2000      	movs	r0, #0
 8022954:	4770      	bx	lr
 8022956:	2000      	movs	r0, #0
 8022958:	4770      	bx	lr
 802295a:	2000      	movs	r0, #0
 802295c:	4770      	bx	lr
 802295e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8022962:	4770      	bx	lr

08022964 <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8022964:	b118      	cbz	r0, 802296e <mg_tls_send+0xa>
 8022966:	b121      	cbz	r1, 8022972 <mg_tls_send+0xe>
 8022968:	b92a      	cbnz	r2, 8022976 <mg_tls_send+0x12>
 802296a:	2000      	movs	r0, #0
 802296c:	4770      	bx	lr
 802296e:	2000      	movs	r0, #0
 8022970:	4770      	bx	lr
 8022972:	2000      	movs	r0, #0
 8022974:	4770      	bx	lr
 8022976:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 802297a:	4770      	bx	lr

0802297c <mg_tls_pending>:
}
 802297c:	2000      	movs	r0, #0
 802297e:	4770      	bx	lr

08022980 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 8022980:	b510      	push	{r4, lr}
 8022982:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8022984:	2204      	movs	r2, #4
 8022986:	4918      	ldr	r1, [pc, #96]	@ (80229e8 <mg_url_is_ssl+0x68>)
 8022988:	f007 f8df 	bl	8029b4a <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802298c:	b1f8      	cbz	r0, 80229ce <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 802298e:	2206      	movs	r2, #6
 8022990:	4916      	ldr	r1, [pc, #88]	@ (80229ec <mg_url_is_ssl+0x6c>)
 8022992:	4620      	mov	r0, r4
 8022994:	f007 f8d9 	bl	8029b4a <strncmp>
 8022998:	b1d8      	cbz	r0, 80229d2 <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 802299a:	2206      	movs	r2, #6
 802299c:	4914      	ldr	r1, [pc, #80]	@ (80229f0 <mg_url_is_ssl+0x70>)
 802299e:	4620      	mov	r0, r4
 80229a0:	f007 f8d3 	bl	8029b4a <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80229a4:	b1b8      	cbz	r0, 80229d6 <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80229a6:	2204      	movs	r2, #4
 80229a8:	4912      	ldr	r1, [pc, #72]	@ (80229f4 <mg_url_is_ssl+0x74>)
 80229aa:	4620      	mov	r0, r4
 80229ac:	f007 f8cd 	bl	8029b4a <strncmp>
 80229b0:	b198      	cbz	r0, 80229da <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80229b2:	2204      	movs	r2, #4
 80229b4:	4910      	ldr	r1, [pc, #64]	@ (80229f8 <mg_url_is_ssl+0x78>)
 80229b6:	4620      	mov	r0, r4
 80229b8:	f007 f8c7 	bl	8029b4a <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80229bc:	b178      	cbz	r0, 80229de <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80229be:	2205      	movs	r2, #5
 80229c0:	490e      	ldr	r1, [pc, #56]	@ (80229fc <mg_url_is_ssl+0x7c>)
 80229c2:	4620      	mov	r0, r4
 80229c4:	f007 f8c1 	bl	8029b4a <strncmp>
 80229c8:	b958      	cbnz	r0, 80229e2 <mg_url_is_ssl+0x62>
 80229ca:	2001      	movs	r0, #1
 80229cc:	e000      	b.n	80229d0 <mg_url_is_ssl+0x50>
 80229ce:	2001      	movs	r0, #1
}
 80229d0:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80229d2:	2001      	movs	r0, #1
 80229d4:	e7fc      	b.n	80229d0 <mg_url_is_ssl+0x50>
 80229d6:	2001      	movs	r0, #1
 80229d8:	e7fa      	b.n	80229d0 <mg_url_is_ssl+0x50>
 80229da:	2001      	movs	r0, #1
 80229dc:	e7f8      	b.n	80229d0 <mg_url_is_ssl+0x50>
 80229de:	2001      	movs	r0, #1
 80229e0:	e7f6      	b.n	80229d0 <mg_url_is_ssl+0x50>
 80229e2:	2000      	movs	r0, #0
 80229e4:	e7f4      	b.n	80229d0 <mg_url_is_ssl+0x50>
 80229e6:	bf00      	nop
 80229e8:	0803714c 	.word	0x0803714c
 80229ec:	08037154 	.word	0x08037154
 80229f0:	0803715c 	.word	0x0803715c
 80229f4:	08037164 	.word	0x08037164
 80229f8:	0803716c 	.word	0x0803716c
 80229fc:	08037174 	.word	0x08037174

08022a00 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 8022a00:	b530      	push	{r4, r5, lr}
 8022a02:	b089      	sub	sp, #36	@ 0x24
 8022a04:	4604      	mov	r4, r0
 8022a06:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 8022a08:	a801      	add	r0, sp, #4
 8022a0a:	f7fd f93a 	bl	801fc82 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8022a0e:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 8022a10:	b152      	cbz	r2, 8022a28 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 8022a12:	9b04      	ldr	r3, [sp, #16]
 8022a14:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 8022a16:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 8022a18:	9904      	ldr	r1, [sp, #16]
 8022a1a:	4429      	add	r1, r5
 8022a1c:	4620      	mov	r0, r4
 8022a1e:	f7fe fe37 	bl	8021690 <mg_str_n>
}
 8022a22:	4620      	mov	r0, r4
 8022a24:	b009      	add	sp, #36	@ 0x24
 8022a26:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 8022a28:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 8022a2a:	b112      	cbz	r2, 8022a32 <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 8022a2c:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 8022a2e:	1ad2      	subs	r2, r2, r3
 8022a30:	e7f2      	b.n	8022a18 <mg_url_host+0x18>
 8022a32:	9a07      	ldr	r2, [sp, #28]
 8022a34:	9b04      	ldr	r3, [sp, #16]
 8022a36:	1ad2      	subs	r2, r2, r3
 8022a38:	e7ee      	b.n	8022a18 <mg_url_host+0x18>
	...

08022a3c <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 8022a3c:	b530      	push	{r4, r5, lr}
 8022a3e:	b089      	sub	sp, #36	@ 0x24
 8022a40:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 8022a42:	4601      	mov	r1, r0
 8022a44:	a801      	add	r0, sp, #4
 8022a46:	f7fd f91c 	bl	801fc82 <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8022a4a:	2205      	movs	r2, #5
 8022a4c:	491d      	ldr	r1, [pc, #116]	@ (8022ac4 <mg_url_port+0x88>)
 8022a4e:	4620      	mov	r0, r4
 8022a50:	f007 f87b 	bl	8029b4a <strncmp>
 8022a54:	b138      	cbz	r0, 8022a66 <mg_url_port+0x2a>
 8022a56:	2203      	movs	r2, #3
 8022a58:	491b      	ldr	r1, [pc, #108]	@ (8022ac8 <mg_url_port+0x8c>)
 8022a5a:	4620      	mov	r0, r4
 8022a5c:	f007 f875 	bl	8029b4a <strncmp>
 8022a60:	b188      	cbz	r0, 8022a86 <mg_url_port+0x4a>
  unsigned short port = 0;
 8022a62:	2500      	movs	r5, #0
 8022a64:	e000      	b.n	8022a68 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8022a66:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8022a68:	2204      	movs	r2, #4
 8022a6a:	4918      	ldr	r1, [pc, #96]	@ (8022acc <mg_url_port+0x90>)
 8022a6c:	4620      	mov	r0, r4
 8022a6e:	f007 f86c 	bl	8029b4a <strncmp>
 8022a72:	b150      	cbz	r0, 8022a8a <mg_url_port+0x4e>
 8022a74:	2206      	movs	r2, #6
 8022a76:	4916      	ldr	r1, [pc, #88]	@ (8022ad0 <mg_url_port+0x94>)
 8022a78:	4620      	mov	r0, r4
 8022a7a:	f007 f866 	bl	8029b4a <strncmp>
 8022a7e:	b930      	cbnz	r0, 8022a8e <mg_url_port+0x52>
    port = 443;
 8022a80:	f240 15bb 	movw	r5, #443	@ 0x1bb
 8022a84:	e003      	b.n	8022a8e <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8022a86:	2550      	movs	r5, #80	@ 0x50
 8022a88:	e7ee      	b.n	8022a68 <mg_url_port+0x2c>
    port = 443;
 8022a8a:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8022a8e:	2205      	movs	r2, #5
 8022a90:	4910      	ldr	r1, [pc, #64]	@ (8022ad4 <mg_url_port+0x98>)
 8022a92:	4620      	mov	r0, r4
 8022a94:	f007 f859 	bl	8029b4a <strncmp>
 8022a98:	b908      	cbnz	r0, 8022a9e <mg_url_port+0x62>
 8022a9a:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8022a9e:	2206      	movs	r2, #6
 8022aa0:	490d      	ldr	r1, [pc, #52]	@ (8022ad8 <mg_url_port+0x9c>)
 8022aa2:	4620      	mov	r0, r4
 8022aa4:	f007 f851 	bl	8029b4a <strncmp>
 8022aa8:	b908      	cbnz	r0, 8022aae <mg_url_port+0x72>
 8022aaa:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8022aae:	9805      	ldr	r0, [sp, #20]
 8022ab0:	b910      	cbnz	r0, 8022ab8 <mg_url_port+0x7c>
}
 8022ab2:	4628      	mov	r0, r5
 8022ab4:	b009      	add	sp, #36	@ 0x24
 8022ab6:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8022ab8:	4420      	add	r0, r4
 8022aba:	f004 fadd 	bl	8027078 <atoi>
 8022abe:	b285      	uxth	r5, r0
 8022ac0:	e7f7      	b.n	8022ab2 <mg_url_port+0x76>
 8022ac2:	bf00      	nop
 8022ac4:	0803717c 	.word	0x0803717c
 8022ac8:	08037184 	.word	0x08037184
 8022acc:	0803714c 	.word	0x0803714c
 8022ad0:	08037154 	.word	0x08037154
 8022ad4:	08037188 	.word	0x08037188
 8022ad8:	0803715c 	.word	0x0803715c

08022adc <mg_bzero>:
  if (buf != NULL) {
 8022adc:	4603      	mov	r3, r0
 8022ade:	b920      	cbnz	r0, 8022aea <mg_bzero+0xe>
 8022ae0:	4770      	bx	lr
    while (len--) *buf++ = 0;
 8022ae2:	2100      	movs	r1, #0
 8022ae4:	f803 1b01 	strb.w	r1, [r3], #1
 8022ae8:	4611      	mov	r1, r2
 8022aea:	1e4a      	subs	r2, r1, #1
 8022aec:	2900      	cmp	r1, #0
 8022aee:	d1f8      	bne.n	8022ae2 <mg_bzero+0x6>
}
 8022af0:	4770      	bx	lr

08022af2 <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8022af2:	b538      	push	{r3, r4, r5, lr}
 8022af4:	4605      	mov	r5, r0
 8022af6:	4608      	mov	r0, r1
 8022af8:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 8022afa:	68aa      	ldr	r2, [r5, #8]
 8022afc:	428a      	cmp	r2, r1
 8022afe:	d200      	bcs.n	8022b02 <mg_iobuf_del+0x10>
 8022b00:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 8022b02:	1903      	adds	r3, r0, r4
 8022b04:	429a      	cmp	r2, r3
 8022b06:	d200      	bcs.n	8022b0a <mg_iobuf_del+0x18>
 8022b08:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8022b0a:	682b      	ldr	r3, [r5, #0]
 8022b0c:	b133      	cbz	r3, 8022b1c <mg_iobuf_del+0x2a>
 8022b0e:	1901      	adds	r1, r0, r4
 8022b10:	1a12      	subs	r2, r2, r0
 8022b12:	1b12      	subs	r2, r2, r4
 8022b14:	4419      	add	r1, r3
 8022b16:	4418      	add	r0, r3
 8022b18:	f006 ffc8 	bl	8029aac <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8022b1c:	682b      	ldr	r3, [r5, #0]
 8022b1e:	b12b      	cbz	r3, 8022b2c <mg_iobuf_del+0x3a>
 8022b20:	68a8      	ldr	r0, [r5, #8]
 8022b22:	1b00      	subs	r0, r0, r4
 8022b24:	4621      	mov	r1, r4
 8022b26:	4418      	add	r0, r3
 8022b28:	f7ff ffd8 	bl	8022adc <mg_bzero>
  io->len -= len;
 8022b2c:	68ab      	ldr	r3, [r5, #8]
 8022b2e:	1b1b      	subs	r3, r3, r4
 8022b30:	60ab      	str	r3, [r5, #8]
}
 8022b32:	4620      	mov	r0, r4
 8022b34:	bd38      	pop	{r3, r4, r5, pc}

08022b36 <mg_random>:
void mg_random(void *buf, size_t len) {
 8022b36:	b538      	push	{r3, r4, r5, lr}
 8022b38:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 8022b3a:	e006      	b.n	8022b4a <mg_random+0x14>
 8022b3c:	f006 fa8a 	bl	8029054 <rand>
 8022b40:	4623      	mov	r3, r4
 8022b42:	f803 0b01 	strb.w	r0, [r3], #1
 8022b46:	461c      	mov	r4, r3
 8022b48:	4629      	mov	r1, r5
 8022b4a:	1e4d      	subs	r5, r1, #1
 8022b4c:	2900      	cmp	r1, #0
 8022b4e:	d1f5      	bne.n	8022b3c <mg_random+0x6>
}
 8022b50:	bd38      	pop	{r3, r4, r5, pc}
	...

08022b54 <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 8022b54:	b570      	push	{r4, r5, r6, lr}
 8022b56:	4604      	mov	r4, r0
 8022b58:	460d      	mov	r5, r1
  mg_random(buf, len);
 8022b5a:	f7ff ffec 	bl	8022b36 <mg_random>
  for (i = 0; i < len; i++) {
 8022b5e:	2100      	movs	r1, #0
 8022b60:	e00a      	b.n	8022b78 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8022b62:	2b33      	cmp	r3, #51	@ 0x33
 8022b64:	d802      	bhi.n	8022b6c <mg_random_str+0x18>
 8022b66:	3327      	adds	r3, #39	@ 0x27
 8022b68:	b2db      	uxtb	r3, r3
 8022b6a:	e003      	b.n	8022b74 <mg_random_str+0x20>
 8022b6c:	3b04      	subs	r3, #4
 8022b6e:	b2db      	uxtb	r3, r3
 8022b70:	e000      	b.n	8022b74 <mg_random_str+0x20>
 8022b72:	2300      	movs	r3, #0
 8022b74:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 8022b76:	3101      	adds	r1, #1
 8022b78:	42a9      	cmp	r1, r5
 8022b7a:	d213      	bcs.n	8022ba4 <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8022b7c:	1860      	adds	r0, r4, r1
 8022b7e:	5c63      	ldrb	r3, [r4, r1]
 8022b80:	085a      	lsrs	r2, r3, #1
 8022b82:	4e09      	ldr	r6, [pc, #36]	@ (8022ba8 <mg_random_str+0x54>)
 8022b84:	fba6 6202 	umull	r6, r2, r6, r2
 8022b88:	0912      	lsrs	r2, r2, #4
 8022b8a:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8022b8e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8022b92:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8022b94:	1e6a      	subs	r2, r5, #1
 8022b96:	428a      	cmp	r2, r1
 8022b98:	d0eb      	beq.n	8022b72 <mg_random_str+0x1e>
 8022b9a:	2b19      	cmp	r3, #25
 8022b9c:	d8e1      	bhi.n	8022b62 <mg_random_str+0xe>
 8022b9e:	3361      	adds	r3, #97	@ 0x61
 8022ba0:	b2db      	uxtb	r3, r3
 8022ba2:	e7e7      	b.n	8022b74 <mg_random_str+0x20>
}
 8022ba4:	4620      	mov	r0, r4
 8022ba6:	bd70      	pop	{r4, r5, r6, pc}
 8022ba8:	84210843 	.word	0x84210843

08022bac <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 8022bac:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 8022bae:	2300      	movs	r3, #0
 8022bb0:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8022bb2:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8022bb4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8022bb8:	021b      	lsls	r3, r3, #8
 8022bba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8022bbe:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8022bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 8022bc6:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8022bca:	b002      	add	sp, #8
 8022bcc:	4770      	bx	lr
	...

08022bd0 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8022bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022bd2:	b085      	sub	sp, #20
 8022bd4:	466c      	mov	r4, sp
 8022bd6:	e884 0003 	stmia.w	r4, {r0, r1}
 8022bda:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 8022bdc:	480b      	ldr	r0, [pc, #44]	@ (8022c0c <mg_atonl+0x3c>)
 8022bde:	f7ff ffe5 	bl	8022bac <mg_ntohl>
 8022be2:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8022be4:	ae02      	add	r6, sp, #8
 8022be6:	490a      	ldr	r1, [pc, #40]	@ (8022c10 <mg_atonl+0x40>)
 8022be8:	4630      	mov	r0, r6
 8022bea:	f7fe fd45 	bl	8021678 <mg_str_s>
 8022bee:	e896 000c 	ldmia.w	r6, {r2, r3}
 8022bf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8022bf6:	f7fe fdcb 	bl	8021790 <mg_strcasecmp>
 8022bfa:	b928      	cbnz	r0, 8022c08 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 8022bfc:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 8022bfe:	2300      	movs	r3, #0
 8022c00:	74eb      	strb	r3, [r5, #19]
  return true;
 8022c02:	2001      	movs	r0, #1
}
 8022c04:	b005      	add	sp, #20
 8022c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8022c08:	2000      	movs	r0, #0
 8022c0a:	e7fb      	b.n	8022c04 <mg_atonl+0x34>
 8022c0c:	7f000001 	.word	0x7f000001
 8022c10:	08037190 	.word	0x08037190

08022c14 <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 8022c14:	b510      	push	{r4, lr}
 8022c16:	b082      	sub	sp, #8
 8022c18:	466b      	mov	r3, sp
 8022c1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8022c1e:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8022c20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8022c24:	f7fd f81e 	bl	801fc64 <mg_atone>
 8022c28:	b110      	cbz	r0, 8022c30 <mg_aton+0x1c>
 8022c2a:	2001      	movs	r0, #1
}
 8022c2c:	b002      	add	sp, #8
 8022c2e:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8022c30:	4622      	mov	r2, r4
 8022c32:	ab02      	add	r3, sp, #8
 8022c34:	e913 0003 	ldmdb	r3, {r0, r1}
 8022c38:	f7ff ffca 	bl	8022bd0 <mg_atonl>
 8022c3c:	b108      	cbz	r0, 8022c42 <mg_aton+0x2e>
 8022c3e:	2001      	movs	r0, #1
 8022c40:	e7f4      	b.n	8022c2c <mg_aton+0x18>
 8022c42:	4622      	mov	r2, r4
 8022c44:	ab02      	add	r3, sp, #8
 8022c46:	e913 0003 	ldmdb	r3, {r0, r1}
 8022c4a:	f7fc fde7 	bl	801f81c <mg_aton4>
 8022c4e:	b108      	cbz	r0, 8022c54 <mg_aton+0x40>
 8022c50:	2001      	movs	r0, #1
 8022c52:	e7eb      	b.n	8022c2c <mg_aton+0x18>
         mg_aton6(str, addr);
 8022c54:	4622      	mov	r2, r4
 8022c56:	ab02      	add	r3, sp, #8
 8022c58:	e913 0003 	ldmdb	r3, {r0, r1}
 8022c5c:	f7ff fd34 	bl	80226c8 <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8022c60:	2800      	cmp	r0, #0
 8022c62:	d0e3      	beq.n	8022c2c <mg_aton+0x18>
 8022c64:	2001      	movs	r0, #1
 8022c66:	e7e1      	b.n	8022c2c <mg_aton+0x18>

08022c68 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 8022c68:	b570      	push	{r4, r5, r6, lr}
 8022c6a:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8022c6c:	6800      	ldr	r0, [r0, #0]
 8022c6e:	f7ff ff9d 	bl	8022bac <mg_ntohl>
 8022c72:	4606      	mov	r6, r0
 8022c74:	6860      	ldr	r0, [r4, #4]
 8022c76:	f7ff ff99 	bl	8022bac <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 8022c7a:	b12e      	cbz	r6, 8022c88 <gettimestamp+0x20>
 8022c7c:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 8022c80:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 8022c84:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8022c88:	0ef5      	lsrs	r5, r6, #27
 8022c8a:	0174      	lsls	r4, r6, #5
 8022c8c:	1ba4      	subs	r4, r4, r6
 8022c8e:	f165 0500 	sbc.w	r5, r5, #0
 8022c92:	00ad      	lsls	r5, r5, #2
 8022c94:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 8022c98:	00a4      	lsls	r4, r4, #2
 8022c9a:	19a4      	adds	r4, r4, r6
 8022c9c:	f145 0500 	adc.w	r5, r5, #0
 8022ca0:	00ed      	lsls	r5, r5, #3
 8022ca2:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 8022ca6:	00e4      	lsls	r4, r4, #3
 8022ca8:	f7ed fc44 	bl	8010534 <__aeabi_ui2d>
 8022cac:	a309      	add	r3, pc, #36	@ (adr r3, 8022cd4 <gettimestamp+0x6c>)
 8022cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cb2:	f7ed fde3 	bl	801087c <__aeabi_ddiv>
 8022cb6:	2200      	movs	r2, #0
 8022cb8:	4b05      	ldr	r3, [pc, #20]	@ (8022cd0 <gettimestamp+0x68>)
 8022cba:	f7ed fcb5 	bl	8010628 <__aeabi_dmul>
 8022cbe:	f7ee f877 	bl	8010db0 <__aeabi_d2lz>
 8022cc2:	1820      	adds	r0, r4, r0
}
 8022cc4:	eb45 0101 	adc.w	r1, r5, r1
 8022cc8:	bd70      	pop	{r4, r5, r6, pc}
 8022cca:	bf00      	nop
 8022ccc:	f3af 8000 	nop.w
 8022cd0:	408f4000 	.word	0x408f4000
 8022cd4:	ffe00000 	.word	0xffe00000
 8022cd8:	41efffff 	.word	0x41efffff

08022cdc <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 8022cdc:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 8022cde:	2300      	movs	r3, #0
 8022ce0:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8022ce4:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8022ce8:	b2c3      	uxtb	r3, r0
 8022cea:	021b      	lsls	r3, r3, #8
}
 8022cec:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 8022cf0:	b002      	add	sp, #8
 8022cf2:	4770      	bx	lr

08022cf4 <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 8022cf4:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8022cf6:	e001      	b.n	8022cfc <csumfin+0x8>
 8022cf8:	fa13 f080 	uxtah	r0, r3, r0
 8022cfc:	0c03      	lsrs	r3, r0, #16
 8022cfe:	d1fb      	bne.n	8022cf8 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 8022d00:	43c0      	mvns	r0, r0
 8022d02:	b280      	uxth	r0, r0
 8022d04:	f7ff ffea 	bl	8022cdc <mg_ntohs>
}
 8022d08:	bd08      	pop	{r3, pc}

08022d0a <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 8022d0a:	b508      	push	{r3, lr}
 8022d0c:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 8022d0e:	4601      	mov	r1, r0
 8022d10:	2000      	movs	r0, #0
 8022d12:	f7fc fddb 	bl	801f8cc <csumup>
  return csumfin(sum);
 8022d16:	f7ff ffed 	bl	8022cf4 <csumfin>
}
 8022d1a:	bd08      	pop	{r3, pc}

08022d1c <tx_ip>:
                        size_t plen) {
 8022d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d1e:	4617      	mov	r7, r2
 8022d20:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8022d22:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8022d24:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8022d26:	680b      	ldr	r3, [r1, #0]
 8022d28:	f845 3b0e 	str.w	r3, [r5], #14
 8022d2c:	888b      	ldrh	r3, [r1, #4]
 8022d2e:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8022d30:	6803      	ldr	r3, [r0, #0]
 8022d32:	f8c4 3006 	str.w	r3, [r4, #6]
 8022d36:	8883      	ldrh	r3, [r0, #4]
 8022d38:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 8022d3a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8022d3e:	f7ff ffcd 	bl	8022cdc <mg_ntohs>
 8022d42:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 8022d44:	2100      	movs	r1, #0
 8022d46:	f8c4 100e 	str.w	r1, [r4, #14]
 8022d4a:	6069      	str	r1, [r5, #4]
 8022d4c:	60a9      	str	r1, [r5, #8]
 8022d4e:	60e9      	str	r1, [r5, #12]
 8022d50:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 8022d52:	2345      	movs	r3, #69	@ 0x45
 8022d54:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 8022d56:	2340      	movs	r3, #64	@ 0x40
 8022d58:	7523      	strb	r3, [r4, #20]
 8022d5a:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8022d5c:	9807      	ldr	r0, [sp, #28]
 8022d5e:	3014      	adds	r0, #20
 8022d60:	b280      	uxth	r0, r0
 8022d62:	f7ff ffbb 	bl	8022cdc <mg_ntohs>
 8022d66:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 8022d68:	2340      	movs	r3, #64	@ 0x40
 8022d6a:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 8022d6c:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 8022d6e:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 8022d72:	9b06      	ldr	r3, [sp, #24]
 8022d74:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8022d78:	2114      	movs	r1, #20
 8022d7a:	4628      	mov	r0, r5
 8022d7c:	f7ff ffc5 	bl	8022d0a <ipcsum>
 8022d80:	8320      	strh	r0, [r4, #24]
}
 8022d82:	4628      	mov	r0, r5
 8022d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022d86 <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8022d86:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8022d88:	781b      	ldrb	r3, [r3, #0]
 8022d8a:	2b08      	cmp	r3, #8
 8022d8c:	d000      	beq.n	8022d90 <rx_icmp+0xa>
 8022d8e:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8022d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022d94:	b083      	sub	sp, #12
 8022d96:	4605      	mov	r5, r0
 8022d98:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8022d9a:	69ca      	ldr	r2, [r1, #28]
 8022d9c:	b11a      	cbz	r2, 8022da6 <rx_icmp+0x20>
 8022d9e:	6911      	ldr	r1, [r2, #16]
 8022da0:	6883      	ldr	r3, [r0, #8]
 8022da2:	4299      	cmp	r1, r3
 8022da4:	d002      	beq.n	8022dac <rx_icmp+0x26>
}
 8022da6:	b003      	add	sp, #12
 8022da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8022dac:	6986      	ldr	r6, [r0, #24]
 8022dae:	3e26      	subs	r6, #38	@ 0x26
 8022db0:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 8022db2:	428e      	cmp	r6, r1
 8022db4:	d300      	bcc.n	8022db8 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8022db6:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8022db8:	6921      	ldr	r1, [r4, #16]
 8022dba:	f106 0804 	add.w	r8, r6, #4
 8022dbe:	f8cd 8004 	str.w	r8, [sp, #4]
 8022dc2:	68d2      	ldr	r2, [r2, #12]
 8022dc4:	9200      	str	r2, [sp, #0]
 8022dc6:	2201      	movs	r2, #1
 8022dc8:	3106      	adds	r1, #6
 8022dca:	4628      	mov	r0, r5
 8022dcc:	f7ff ffa6 	bl	8022d1c <tx_ip>
 8022dd0:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8022dd2:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8022dd6:	2300      	movs	r3, #0
 8022dd8:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 8022dda:	4632      	mov	r2, r6
 8022ddc:	68a1      	ldr	r1, [r4, #8]
 8022dde:	3018      	adds	r0, #24
 8022de0:	f008 f8ba 	bl	802af58 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8022de4:	4641      	mov	r1, r8
 8022de6:	4648      	mov	r0, r9
 8022de8:	f7ff ff8f 	bl	8022d0a <ipcsum>
 8022dec:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 8022dee:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 8022df2:	4628      	mov	r0, r5
 8022df4:	f7fc fd7b 	bl	801f8ee <ether_output>
}
 8022df8:	e7d5      	b.n	8022da6 <rx_icmp+0x20>

08022dfa <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8022dfa:	b538      	push	{r3, r4, r5, lr}
 8022dfc:	4605      	mov	r5, r0
 8022dfe:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8022e00:	6a09      	ldr	r1, [r1, #32]
 8022e02:	798b      	ldrb	r3, [r1, #6]
 8022e04:	2b01      	cmp	r3, #1
 8022e06:	d00e      	beq.n	8022e26 <rx_ip6+0x2c>
 8022e08:	2b3a      	cmp	r3, #58	@ 0x3a
 8022e0a:	d00c      	beq.n	8022e26 <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 8022e0c:	2b11      	cmp	r3, #17
 8022e0e:	d110      	bne.n	8022e32 <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8022e10:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8022e14:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8022e16:	68e3      	ldr	r3, [r4, #12]
 8022e18:	2b07      	cmp	r3, #7
 8022e1a:	d90a      	bls.n	8022e32 <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 8022e1c:	3130      	adds	r1, #48	@ 0x30
 8022e1e:	4620      	mov	r0, r4
 8022e20:	f7fe fc7a 	bl	8021718 <mkpay>
 8022e24:	e005      	b.n	8022e32 <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8022e26:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8022e2a:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8022e2c:	68e3      	ldr	r3, [r4, #12]
 8022e2e:	2b03      	cmp	r3, #3
 8022e30:	d800      	bhi.n	8022e34 <rx_ip6+0x3a>
}
 8022e32:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 8022e34:	312c      	adds	r1, #44	@ 0x2c
 8022e36:	4620      	mov	r0, r4
 8022e38:	f7fe fc6e 	bl	8021718 <mkpay>
    rx_icmp(ifp, pkt);
 8022e3c:	4621      	mov	r1, r4
 8022e3e:	4628      	mov	r0, r5
 8022e40:	f7ff ffa1 	bl	8022d86 <rx_icmp>
 8022e44:	e7f5      	b.n	8022e32 <rx_ip6+0x38>

08022e46 <tx_udp>:
                   const void *buf, size_t len) {
 8022e46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022e4a:	b083      	sub	sp, #12
 8022e4c:	4606      	mov	r6, r0
 8022e4e:	4698      	mov	r8, r3
 8022e50:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8022e52:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8022e54:	f105 0308 	add.w	r3, r5, #8
 8022e58:	9301      	str	r3, [sp, #4]
 8022e5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022e5c:	9300      	str	r3, [sp, #0]
 8022e5e:	4613      	mov	r3, r2
 8022e60:	2211      	movs	r2, #17
 8022e62:	f7ff ff5b 	bl	8022d1c <tx_ip>
 8022e66:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 8022e68:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 8022e6c:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 8022e70:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8022e74:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8022e76:	f105 0008 	add.w	r0, r5, #8
 8022e7a:	b280      	uxth	r0, r0
 8022e7c:	f7ff ff2e 	bl	8022cdc <mg_ntohs>
 8022e80:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 8022e82:	2000      	movs	r0, #0
 8022e84:	76a0      	strb	r0, [r4, #26]
 8022e86:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8022e88:	2208      	movs	r2, #8
 8022e8a:	4649      	mov	r1, r9
 8022e8c:	f7fc fd1e 	bl	801f8cc <csumup>
  cs = csumup(cs, buf, len);
 8022e90:	462a      	mov	r2, r5
 8022e92:	4639      	mov	r1, r7
 8022e94:	f7fc fd1a 	bl	801f8cc <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8022e98:	2204      	movs	r2, #4
 8022e9a:	f104 010c 	add.w	r1, r4, #12
 8022e9e:	f7fc fd15 	bl	801f8cc <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8022ea2:	2204      	movs	r2, #4
 8022ea4:	f104 0110 	add.w	r1, r4, #16
 8022ea8:	f7fc fd10 	bl	801f8cc <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8022eac:	7a63      	ldrb	r3, [r4, #9]
 8022eae:	442b      	add	r3, r5
 8022eb0:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 8022eb2:	3008      	adds	r0, #8
 8022eb4:	f7ff ff1e 	bl	8022cf4 <csumfin>
 8022eb8:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 8022eba:	462a      	mov	r2, r5
 8022ebc:	4639      	mov	r1, r7
 8022ebe:	f104 001c 	add.w	r0, r4, #28
 8022ec2:	f006 fdf3 	bl	8029aac <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8022ec6:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 8022eca:	4630      	mov	r0, r6
 8022ecc:	f7fc fd0f 	bl	801f8ee <ether_output>
}
 8022ed0:	b003      	add	sp, #12
 8022ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08022ed6 <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8022ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ed8:	4605      	mov	r5, r0
 8022eda:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8022edc:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8022ede:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 8022ee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022ee4:	f846 3b0e 	str.w	r3, [r6], #14
 8022ee8:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8022eea:	6803      	ldr	r3, [r0, #0]
 8022eec:	f8c4 3006 	str.w	r3, [r4, #6]
 8022ef0:	8883      	ldrh	r3, [r0, #4]
 8022ef2:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 8022ef4:	f640 0006 	movw	r0, #2054	@ 0x806
 8022ef8:	f7ff fef0 	bl	8022cdc <mg_ntohs>
 8022efc:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 8022efe:	2300      	movs	r3, #0
 8022f00:	f8c4 300e 	str.w	r3, [r4, #14]
 8022f04:	6073      	str	r3, [r6, #4]
 8022f06:	60b3      	str	r3, [r6, #8]
 8022f08:	60f3      	str	r3, [r6, #12]
 8022f0a:	6133      	str	r3, [r6, #16]
 8022f0c:	6173      	str	r3, [r6, #20]
 8022f0e:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8022f10:	2001      	movs	r0, #1
 8022f12:	f7ff fee3 	bl	8022cdc <mg_ntohs>
 8022f16:	4606      	mov	r6, r0
 8022f18:	81e0      	strh	r0, [r4, #14]
 8022f1a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8022f1e:	f7ff fedd 	bl	8022cdc <mg_ntohs>
 8022f22:	8220      	strh	r0, [r4, #16]
 8022f24:	2306      	movs	r3, #6
 8022f26:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 8022f28:	2304      	movs	r3, #4
 8022f2a:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8022f2c:	82a6      	strh	r6, [r4, #20]
 8022f2e:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 8022f32:	68ab      	ldr	r3, [r5, #8]
 8022f34:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8022f36:	682b      	ldr	r3, [r5, #0]
 8022f38:	f8c4 3016 	str.w	r3, [r4, #22]
 8022f3c:	88ab      	ldrh	r3, [r5, #4]
 8022f3e:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 8022f40:	212a      	movs	r1, #42	@ 0x2a
 8022f42:	4628      	mov	r0, r5
 8022f44:	f7fc fcd3 	bl	801f8ee <ether_output>
}
 8022f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022f4a <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 8022f4a:	b510      	push	{r4, lr}
 8022f4c:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 8022f4e:	4608      	mov	r0, r1
 8022f50:	f7ff fd74 	bl	8022a3c <mg_url_port>
 8022f54:	f7ff fec2 	bl	8022cdc <mg_ntohs>
 8022f58:	8320      	strh	r0, [r4, #24]
}
 8022f5a:	2001      	movs	r0, #1
 8022f5c:	bd10      	pop	{r4, pc}
	...

08022f60 <tx_dhcp>:
                    bool ciaddr) {
 8022f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f64:	b0c8      	sub	sp, #288	@ 0x120
 8022f66:	4604      	mov	r4, r0
 8022f68:	460e      	mov	r6, r1
 8022f6a:	4615      	mov	r5, r2
 8022f6c:	4698      	mov	r8, r3
 8022f6e:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8022f72:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8022f76:	4917      	ldr	r1, [pc, #92]	@ (8022fd4 <tx_dhcp+0x74>)
 8022f78:	a804      	add	r0, sp, #16
 8022f7a:	f007 ffed 	bl	802af58 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8022f7e:	4816      	ldr	r0, [pc, #88]	@ (8022fd8 <tx_dhcp+0x78>)
 8022f80:	f7ff fe14 	bl	8022bac <mg_ntohl>
 8022f84:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8022f86:	6820      	ldr	r0, [r4, #0]
 8022f88:	900b      	str	r0, [sp, #44]	@ 0x2c
 8022f8a:	88a3      	ldrh	r3, [r4, #4]
 8022f8c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8022f90:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8022f94:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 8022f96:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8022f98:	994e      	ldr	r1, [sp, #312]	@ 0x138
 8022f9a:	a840      	add	r0, sp, #256	@ 0x100
 8022f9c:	f007 ffdc 	bl	802af58 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8022fa0:	b107      	cbz	r7, 8022fa4 <tx_dhcp+0x44>
 8022fa2:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8022fa4:	2044      	movs	r0, #68	@ 0x44
 8022fa6:	f7ff fe99 	bl	8022cdc <mg_ntohs>
 8022faa:	4607      	mov	r7, r0
 8022fac:	2043      	movs	r0, #67	@ 0x43
 8022fae:	f7ff fe95 	bl	8022cdc <mg_ntohs>
 8022fb2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8022fb6:	9303      	str	r3, [sp, #12]
 8022fb8:	ab04      	add	r3, sp, #16
 8022fba:	9302      	str	r3, [sp, #8]
 8022fbc:	9001      	str	r0, [sp, #4]
 8022fbe:	f8cd 8000 	str.w	r8, [sp]
 8022fc2:	463b      	mov	r3, r7
 8022fc4:	462a      	mov	r2, r5
 8022fc6:	4631      	mov	r1, r6
 8022fc8:	4620      	mov	r0, r4
 8022fca:	f7ff ff3c 	bl	8022e46 <tx_udp>
}
 8022fce:	b048      	add	sp, #288	@ 0x120
 8022fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022fd4:	08032e2c 	.word	0x08032e2c
 8022fd8:	63825363 	.word	0x63825363

08022fdc <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8022fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022fe0:	b0d0      	sub	sp, #320	@ 0x140
 8022fe2:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 8022fe4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8022fe6:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8022fea:	6809      	ldr	r1, [r1, #0]
 8022fec:	686a      	ldr	r2, [r5, #4]
 8022fee:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8022ff2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8022ff6:	4543      	cmp	r3, r8
 8022ff8:	d827      	bhi.n	802304a <rx_dhcp_server+0x6e>
 8022ffa:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8022ffc:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8023000:	495e      	ldr	r1, [pc, #376]	@ (802317c <rx_dhcp_server+0x1a0>)
 8023002:	a80c      	add	r0, sp, #48	@ 0x30
 8023004:	f007 ffa8 	bl	802af58 <memcpy>
  res.yiaddr = ifp->ip;
 8023008:	68b3      	ldr	r3, [r6, #8]
 802300a:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 802300c:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8023010:	3301      	adds	r3, #1
 8023012:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 8023016:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8023018:	e002      	b.n	8023020 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 802301a:	7863      	ldrb	r3, [r4, #1]
 802301c:	3302      	adds	r3, #2
 802301e:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8023020:	1c63      	adds	r3, r4, #1
 8023022:	4543      	cmp	r3, r8
 8023024:	d20c      	bcs.n	8023040 <rx_dhcp_server+0x64>
 8023026:	7823      	ldrb	r3, [r4, #0]
 8023028:	2bff      	cmp	r3, #255	@ 0xff
 802302a:	d009      	beq.n	8023040 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 802302c:	2b35      	cmp	r3, #53	@ 0x35
 802302e:	d1f4      	bne.n	802301a <rx_dhcp_server+0x3e>
 8023030:	7863      	ldrb	r3, [r4, #1]
 8023032:	2b01      	cmp	r3, #1
 8023034:	d1f1      	bne.n	802301a <rx_dhcp_server+0x3e>
 8023036:	1ca3      	adds	r3, r4, #2
 8023038:	4543      	cmp	r3, r8
 802303a:	d2ee      	bcs.n	802301a <rx_dhcp_server+0x3e>
      op = p[2];
 802303c:	78a7      	ldrb	r7, [r4, #2]
 802303e:	e7ec      	b.n	802301a <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8023040:	2f01      	cmp	r7, #1
 8023042:	f000 808a 	beq.w	802315a <rx_dhcp_server+0x17e>
 8023046:	2f03      	cmp	r7, #3
 8023048:	d002      	beq.n	8023050 <rx_dhcp_server+0x74>
}
 802304a:	b050      	add	sp, #320	@ 0x140
 802304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8023050:	2205      	movs	r2, #5
    uint8_t opts[] = {
 8023052:	2335      	movs	r3, #53	@ 0x35
 8023054:	f88d 3014 	strb.w	r3, [sp, #20]
 8023058:	2301      	movs	r3, #1
 802305a:	f88d 3015 	strb.w	r3, [sp, #21]
 802305e:	f88d 2016 	strb.w	r2, [sp, #22]
 8023062:	f88d 3017 	strb.w	r3, [sp, #23]
 8023066:	2204      	movs	r2, #4
 8023068:	f88d 2018 	strb.w	r2, [sp, #24]
 802306c:	2300      	movs	r3, #0
 802306e:	f88d 3019 	strb.w	r3, [sp, #25]
 8023072:	f88d 301a 	strb.w	r3, [sp, #26]
 8023076:	f88d 301b 	strb.w	r3, [sp, #27]
 802307a:	f88d 301c 	strb.w	r3, [sp, #28]
 802307e:	2136      	movs	r1, #54	@ 0x36
 8023080:	f88d 101d 	strb.w	r1, [sp, #29]
 8023084:	f88d 201e 	strb.w	r2, [sp, #30]
 8023088:	f88d 301f 	strb.w	r3, [sp, #31]
 802308c:	f88d 3020 	strb.w	r3, [sp, #32]
 8023090:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8023094:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8023098:	230c      	movs	r3, #12
 802309a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 802309e:	2303      	movs	r3, #3
 80230a0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80230a4:	236d      	movs	r3, #109	@ 0x6d
 80230a6:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 80230aa:	2369      	movs	r3, #105	@ 0x69
 80230ac:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 80230b0:	2370      	movs	r3, #112	@ 0x70
 80230b2:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 80230b6:	2333      	movs	r3, #51	@ 0x33
 80230b8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80230bc:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 80230c0:	23ff      	movs	r3, #255	@ 0xff
 80230c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80230c6:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 80230ca:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80230ce:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 80230d2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 80230d6:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 80230da:	f8de 001c 	ldr.w	r0, [lr, #28]
 80230de:	9013      	str	r0, [sp, #76]	@ 0x4c
 80230e0:	f8be 3020 	ldrh.w	r3, [lr, #32]
 80230e4:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 80230e8:	68f3      	ldr	r3, [r6, #12]
 80230ea:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 80230ee:	68b3      	ldr	r3, [r6, #8]
 80230f0:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 80230f4:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 80230f8:	ac05      	add	r4, sp, #20
 80230fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80230fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8023100:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8023104:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8023108:	f82c 2b02 	strh.w	r2, [ip], #2
 802310c:	0c12      	lsrs	r2, r2, #16
 802310e:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 8023112:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 8023116:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 8023118:	f8de 3004 	ldr.w	r3, [lr, #4]
 802311c:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 802311e:	7fb3      	ldrb	r3, [r6, #30]
 8023120:	b9eb      	cbnz	r3, 802315e <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8023122:	692c      	ldr	r4, [r5, #16]
 8023124:	3406      	adds	r4, #6
 8023126:	f8d6 8008 	ldr.w	r8, [r6, #8]
 802312a:	2043      	movs	r0, #67	@ 0x43
 802312c:	f7ff fdd6 	bl	8022cdc <mg_ntohs>
 8023130:	4605      	mov	r5, r0
 8023132:	2f01      	cmp	r7, #1
 8023134:	d01e      	beq.n	8023174 <rx_dhcp_server+0x198>
 8023136:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8023138:	2044      	movs	r0, #68	@ 0x44
 802313a:	f7ff fdcf 	bl	8022cdc <mg_ntohs>
 802313e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8023142:	9303      	str	r3, [sp, #12]
 8023144:	ab0c      	add	r3, sp, #48	@ 0x30
 8023146:	9302      	str	r3, [sp, #8]
 8023148:	9001      	str	r0, [sp, #4]
 802314a:	9700      	str	r7, [sp, #0]
 802314c:	462b      	mov	r3, r5
 802314e:	4642      	mov	r2, r8
 8023150:	4621      	mov	r1, r4
 8023152:	4630      	mov	r0, r6
 8023154:	f7ff fe77 	bl	8022e46 <tx_udp>
 8023158:	e777      	b.n	802304a <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 802315a:	2202      	movs	r2, #2
 802315c:	e779      	b.n	8023052 <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 802315e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023160:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8023162:	692b      	ldr	r3, [r5, #16]
 8023164:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8023168:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 802316c:	895b      	ldrh	r3, [r3, #10]
 802316e:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8023172:	e7d6      	b.n	8023122 <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8023174:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8023178:	e7de      	b.n	8023138 <rx_dhcp_server+0x15c>
 802317a:	bf00      	nop
 802317c:	08032f3c 	.word	0x08032f3c

08023180 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8023180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023184:	b08b      	sub	sp, #44	@ 0x2c
 8023186:	4605      	mov	r5, r0
 8023188:	9108      	str	r1, [sp, #32]
 802318a:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 802318c:	8810      	ldrh	r0, [r2, #0]
 802318e:	f7ff fda5 	bl	8022cdc <mg_ntohs>
 8023192:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8023194:	8860      	ldrh	r0, [r4, #2]
 8023196:	f7ff fda1 	bl	8022cdc <mg_ntohs>
 802319a:	4606      	mov	r6, r0
 802319c:	88a0      	ldrh	r0, [r4, #4]
 802319e:	f7ff fd9d 	bl	8022cdc <mg_ntohs>
 80231a2:	4607      	mov	r7, r0
 80231a4:	88e0      	ldrh	r0, [r4, #6]
 80231a6:	f7ff fd99 	bl	8022cdc <mg_ntohs>
 80231aa:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80231ac:	8920      	ldrh	r0, [r4, #8]
 80231ae:	f7ff fd95 	bl	8022cdc <mg_ntohs>
 80231b2:	4681      	mov	r9, r0
 80231b4:	8960      	ldrh	r0, [r4, #10]
 80231b6:	f7ff fd91 	bl	8022cdc <mg_ntohs>
 80231ba:	4682      	mov	sl, r0
 80231bc:	89a0      	ldrh	r0, [r4, #12]
 80231be:	f7ff fd8d 	bl	8022cdc <mg_ntohs>
 80231c2:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 80231c4:	89e0      	ldrh	r0, [r4, #14]
 80231c6:	f7ff fd89 	bl	8022cdc <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80231ca:	9006      	str	r0, [sp, #24]
 80231cc:	f8cd b014 	str.w	fp, [sp, #20]
 80231d0:	f8cd a010 	str.w	sl, [sp, #16]
 80231d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80231d8:	f8cd 8008 	str.w	r8, [sp, #8]
 80231dc:	9701      	str	r7, [sp, #4]
 80231de:	9600      	str	r6, [sp, #0]
 80231e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231e2:	4a04      	ldr	r2, [pc, #16]	@ (80231f4 <print_ip6+0x74>)
 80231e4:	9908      	ldr	r1, [sp, #32]
 80231e6:	4628      	mov	r0, r5
 80231e8:	f7fe f8d0 	bl	802138c <mg_xprintf>
}
 80231ec:	b00b      	add	sp, #44	@ 0x2c
 80231ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231f2:	bf00      	nop
 80231f4:	0803719c 	.word	0x0803719c

080231f8 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 80231f8:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 80231fa:	6813      	ldr	r3, [r2, #0]
 80231fc:	1d1c      	adds	r4, r3, #4
 80231fe:	6014      	str	r4, [r2, #0]
 8023200:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8023202:	7cd3      	ldrb	r3, [r2, #19]
 8023204:	b913      	cbnz	r3, 802320c <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8023206:	f7fe f8d1 	bl	80213ac <print_ip4>
}
 802320a:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 802320c:	f7ff ffb8 	bl	8023180 <print_ip6>
 8023210:	e7fb      	b.n	802320a <mg_print_ip+0x12>
	...

08023214 <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8023214:	b570      	push	{r4, r5, r6, lr}
 8023216:	b082      	sub	sp, #8
 8023218:	4604      	mov	r4, r0
 802321a:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 802321c:	6813      	ldr	r3, [r2, #0]
 802321e:	1d19      	adds	r1, r3, #4
 8023220:	6011      	str	r1, [r2, #0]
 8023222:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8023224:	8a30      	ldrh	r0, [r6, #16]
 8023226:	f7ff fd59 	bl	8022cdc <mg_ntohs>
 802322a:	9001      	str	r0, [sp, #4]
 802322c:	9600      	str	r6, [sp, #0]
 802322e:	4b04      	ldr	r3, [pc, #16]	@ (8023240 <mg_print_ip_port+0x2c>)
 8023230:	4a04      	ldr	r2, [pc, #16]	@ (8023244 <mg_print_ip_port+0x30>)
 8023232:	4629      	mov	r1, r5
 8023234:	4620      	mov	r0, r4
 8023236:	f7fe f8a9 	bl	802138c <mg_xprintf>
}
 802323a:	b002      	add	sp, #8
 802323c:	bd70      	pop	{r4, r5, r6, pc}
 802323e:	bf00      	nop
 8023240:	080231f9 	.word	0x080231f9
 8023244:	080371b8 	.word	0x080371b8

08023248 <mg_crc32>:
  crc = ~crc;
 8023248:	43c0      	mvns	r0, r0
  while (len--) {
 802324a:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 802324e:	b1e2      	cbz	r2, 802328a <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8023250:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 8023252:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8023256:	ea83 0200 	eor.w	r2, r3, r0
 802325a:	f002 020f 	and.w	r2, r2, #15
 802325e:	4c0c      	ldr	r4, [pc, #48]	@ (8023290 <mg_crc32+0x48>)
 8023260:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023264:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8023268:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 802326c:	f003 030f 	and.w	r3, r3, #15
 8023270:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8023274:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 8023278:	4662      	mov	r2, ip
 802327a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802327e:	2a00      	cmp	r2, #0
 8023280:	d1e7      	bne.n	8023252 <mg_crc32+0xa>
}
 8023282:	43c0      	mvns	r0, r0
 8023284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023288:	4770      	bx	lr
 802328a:	43c0      	mvns	r0, r0
 802328c:	4770      	bx	lr
 802328e:	bf00      	nop
 8023290:	08037a4c 	.word	0x08037a4c

08023294 <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 8023294:	b082      	sub	sp, #8
 8023296:	ab02      	add	r3, sp, #8
 8023298:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 802329c:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 802329e:	7803      	ldrb	r3, [r0, #0]
 80232a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80232a2:	d106      	bne.n	80232b2 <mg_path_is_sane+0x1e>
 80232a4:	7843      	ldrb	r3, [r0, #1]
 80232a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80232a8:	d103      	bne.n	80232b2 <mg_path_is_sane+0x1e>
 80232aa:	2000      	movs	r0, #0
 80232ac:	e015      	b.n	80232da <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 80232ae:	3201      	adds	r2, #1
 80232b0:	3901      	subs	r1, #1
 80232b2:	7813      	ldrb	r3, [r2, #0]
 80232b4:	b183      	cbz	r3, 80232d8 <mg_path_is_sane+0x44>
 80232b6:	b169      	cbz	r1, 80232d4 <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 80232b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80232ba:	d001      	beq.n	80232c0 <mg_path_is_sane+0x2c>
 80232bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80232be:	d1f6      	bne.n	80232ae <mg_path_is_sane+0x1a>
 80232c0:	2901      	cmp	r1, #1
 80232c2:	d9f4      	bls.n	80232ae <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 80232c4:	7853      	ldrb	r3, [r2, #1]
 80232c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80232c8:	d1f1      	bne.n	80232ae <mg_path_is_sane+0x1a>
 80232ca:	7893      	ldrb	r3, [r2, #2]
 80232cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80232ce:	d1ee      	bne.n	80232ae <mg_path_is_sane+0x1a>
 80232d0:	2000      	movs	r0, #0
 80232d2:	e002      	b.n	80232da <mg_path_is_sane+0x46>
  return true;
 80232d4:	2001      	movs	r0, #1
 80232d6:	e000      	b.n	80232da <mg_path_is_sane+0x46>
 80232d8:	2001      	movs	r0, #1
}
 80232da:	b002      	add	sp, #8
 80232dc:	4770      	bx	lr

080232de <mg_millis>:
uint64_t mg_millis(void) {
 80232de:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 80232e0:	f7f4 ff50 	bl	8018184 <xTaskGetTickCount>
}
 80232e4:	2100      	movs	r1, #0
 80232e6:	bd08      	pop	{r3, pc}

080232e8 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 80232e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80232ec:	b092      	sub	sp, #72	@ 0x48
 80232ee:	4605      	mov	r5, r0
 80232f0:	460c      	mov	r4, r1
 80232f2:	4616      	mov	r6, r2
 80232f4:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 80232f6:	212f      	movs	r1, #47	@ 0x2f
 80232f8:	4620      	mov	r0, r4
 80232fa:	f006 fc4b 	bl	8029b94 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 80232fe:	4680      	mov	r8, r0
 8023300:	b1a8      	cbz	r0, 802332e <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8023302:	f7ff ffec 	bl	80232de <mg_millis>
 8023306:	f1b8 0f00 	cmp.w	r8, #0
 802330a:	d001      	beq.n	8023310 <mg_log_prefix+0x28>
 802330c:	f108 0401 	add.w	r4, r8, #1
 8023310:	9705      	str	r7, [sp, #20]
 8023312:	9604      	str	r6, [sp, #16]
 8023314:	9403      	str	r4, [sp, #12]
 8023316:	9502      	str	r5, [sp, #8]
 8023318:	9000      	str	r0, [sp, #0]
 802331a:	9101      	str	r1, [sp, #4]
 802331c:	4a0f      	ldr	r2, [pc, #60]	@ (802335c <mg_log_prefix+0x74>)
 802331e:	2129      	movs	r1, #41	@ 0x29
 8023320:	a807      	add	r0, sp, #28
 8023322:	f7fd fbc9 	bl	8020ab8 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8023326:	2827      	cmp	r0, #39	@ 0x27
 8023328:	d90e      	bls.n	8023348 <mg_log_prefix+0x60>
 802332a:	2027      	movs	r0, #39	@ 0x27
 802332c:	e00c      	b.n	8023348 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 802332e:	215c      	movs	r1, #92	@ 0x5c
 8023330:	4620      	mov	r0, r4
 8023332:	f006 fc2f 	bl	8029b94 <strrchr>
 8023336:	4680      	mov	r8, r0
 8023338:	e7e3      	b.n	8023302 <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 802333a:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 802333e:	446b      	add	r3, sp
 8023340:	2220      	movs	r2, #32
 8023342:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8023346:	3001      	adds	r0, #1
 8023348:	2828      	cmp	r0, #40	@ 0x28
 802334a:	d9f6      	bls.n	802333a <mg_log_prefix+0x52>
  logs(buf, n - 1);
 802334c:	1e41      	subs	r1, r0, #1
 802334e:	a807      	add	r0, sp, #28
 8023350:	f7fb fe20 	bl	801ef94 <logs>
}
 8023354:	b012      	add	sp, #72	@ 0x48
 8023356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802335a:	bf00      	nop
 802335c:	080371c0 	.word	0x080371c0

08023360 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8023360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023364:	b084      	sub	sp, #16
 8023366:	4605      	mov	r5, r0
 8023368:	460e      	mov	r6, r1
 802336a:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 802336c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8023370:	2100      	movs	r1, #0
 8023372:	4640      	mov	r0, r8
 8023374:	f006 fbb4 	bl	8029ae0 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8023378:	2e0b      	cmp	r6, #11
 802337a:	f240 808b 	bls.w	8023494 <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802337e:	88a8      	ldrh	r0, [r5, #4]
 8023380:	f7ff fcac 	bl	8022cdc <mg_ntohs>
 8023384:	2801      	cmp	r0, #1
 8023386:	f200 8089 	bhi.w	802349c <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 802338a:	88e8      	ldrh	r0, [r5, #6]
 802338c:	f7ff fca6 	bl	8022cdc <mg_ntohs>
 8023390:	4604      	mov	r4, r0
 8023392:	4681      	mov	r9, r0
  if (num_answers > 10) {
 8023394:	280a      	cmp	r0, #10
 8023396:	d905      	bls.n	80233a4 <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8023398:	4b43      	ldr	r3, [pc, #268]	@ (80234a8 <mg_dns_parse+0x148>)
 802339a:	681b      	ldr	r3, [r3, #0]
 802339c:	2b02      	cmp	r3, #2
 802339e:	dc1a      	bgt.n	80233d6 <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 80233a0:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 80233a4:	8828      	ldrh	r0, [r5, #0]
 80233a6:	f7ff fc99 	bl	8022cdc <mg_ntohs>
 80233aa:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 80233ae:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80233b0:	2700      	movs	r7, #0
 80233b2:	88a8      	ldrh	r0, [r5, #4]
 80233b4:	f7ff fc92 	bl	8022cdc <mg_ntohs>
 80233b8:	42b8      	cmp	r0, r7
 80233ba:	d91a      	bls.n	80233f2 <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80233bc:	ab02      	add	r3, sp, #8
 80233be:	9300      	str	r3, [sp, #0]
 80233c0:	2301      	movs	r3, #1
 80233c2:	4622      	mov	r2, r4
 80233c4:	4631      	mov	r1, r6
 80233c6:	4628      	mov	r0, r5
 80233c8:	f7fc fd89 	bl	801fede <mg_dns_parse_rr>
 80233cc:	2800      	cmp	r0, #0
 80233ce:	d067      	beq.n	80234a0 <mg_dns_parse+0x140>
    ofs += n;
 80233d0:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80233d2:	3701      	adds	r7, #1
 80233d4:	e7ed      	b.n	80233b2 <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80233d6:	4b35      	ldr	r3, [pc, #212]	@ (80234ac <mg_dns_parse+0x14c>)
 80233d8:	f240 4293 	movw	r2, #1171	@ 0x493
 80233dc:	4934      	ldr	r1, [pc, #208]	@ (80234b0 <mg_dns_parse+0x150>)
 80233de:	2003      	movs	r0, #3
 80233e0:	f7ff ff82 	bl	80232e8 <mg_log_prefix>
 80233e4:	4621      	mov	r1, r4
 80233e6:	4833      	ldr	r0, [pc, #204]	@ (80234b4 <mg_dns_parse+0x154>)
 80233e8:	f7fe f810 	bl	802140c <mg_log>
    num_answers = 10;  // Sanity cap
 80233ec:	f04f 090a 	mov.w	r9, #10
 80233f0:	e7d8      	b.n	80233a4 <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 80233f2:	2700      	movs	r7, #0
 80233f4:	e013      	b.n	802341e <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80233f6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80233fa:	2a01      	cmp	r2, #1
 80233fc:	d12a      	bne.n	8023454 <mg_dns_parse+0xf4>
 80233fe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8023402:	2a01      	cmp	r2, #1
 8023404:	d126      	bne.n	8023454 <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 8023406:	2300      	movs	r3, #0
 8023408:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 802340c:	3c04      	subs	r4, #4
 802340e:	592b      	ldr	r3, [r5, r4]
 8023410:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 8023414:	2001      	movs	r0, #1
 8023416:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802341a:	e03c      	b.n	8023496 <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 802341c:	3701      	adds	r7, #1
 802341e:	454f      	cmp	r7, r9
 8023420:	d236      	bcs.n	8023490 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8023422:	ab02      	add	r3, sp, #8
 8023424:	9300      	str	r3, [sp, #0]
 8023426:	2300      	movs	r3, #0
 8023428:	4622      	mov	r2, r4
 802342a:	4631      	mov	r1, r6
 802342c:	4628      	mov	r0, r5
 802342e:	f7fc fd56 	bl	801fede <mg_dns_parse_rr>
 8023432:	4682      	mov	sl, r0
 8023434:	b3b0      	cbz	r0, 80234a4 <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8023436:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802343a:	9300      	str	r3, [sp, #0]
 802343c:	f108 0318 	add.w	r3, r8, #24
 8023440:	4622      	mov	r2, r4
 8023442:	4631      	mov	r1, r6
 8023444:	4628      	mov	r0, r5
 8023446:	f7fc fcdf 	bl	801fe08 <mg_dns_parse_name>
    ofs += n;
 802344a:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 802344c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8023450:	2b04      	cmp	r3, #4
 8023452:	d0d0      	beq.n	80233f6 <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8023454:	2b10      	cmp	r3, #16
 8023456:	d1e1      	bne.n	802341c <mg_dns_parse+0xbc>
 8023458:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802345c:	2b1c      	cmp	r3, #28
 802345e:	d1dd      	bne.n	802341c <mg_dns_parse+0xbc>
 8023460:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8023464:	2b01      	cmp	r3, #1
 8023466:	d1d9      	bne.n	802341c <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 8023468:	2001      	movs	r0, #1
 802346a:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 802346e:	3c10      	subs	r4, #16
 8023470:	192b      	adds	r3, r5, r4
 8023472:	592c      	ldr	r4, [r5, r4]
 8023474:	6859      	ldr	r1, [r3, #4]
 8023476:	689a      	ldr	r2, [r3, #8]
 8023478:	68db      	ldr	r3, [r3, #12]
 802347a:	f8c8 4004 	str.w	r4, [r8, #4]
 802347e:	f8c8 1008 	str.w	r1, [r8, #8]
 8023482:	f8c8 200c 	str.w	r2, [r8, #12]
 8023486:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 802348a:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802348e:	e002      	b.n	8023496 <mg_dns_parse+0x136>
  return true;
 8023490:	2001      	movs	r0, #1
 8023492:	e000      	b.n	8023496 <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8023494:	2000      	movs	r0, #0
}
 8023496:	b004      	add	sp, #16
 8023498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802349c:	2000      	movs	r0, #0
 802349e:	e7fa      	b.n	8023496 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80234a0:	2000      	movs	r0, #0
 80234a2:	e7f8      	b.n	8023496 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80234a4:	2000      	movs	r0, #0
 80234a6:	e7f6      	b.n	8023496 <mg_dns_parse+0x136>
 80234a8:	200000a8 	.word	0x200000a8
 80234ac:	08037c4c 	.word	0x08037c4c
 80234b0:	080371d4 	.word	0x080371d4
 80234b4:	08037204 	.word	0x08037204

080234b8 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80234b8:	b40e      	push	{r1, r2, r3}
 80234ba:	b510      	push	{r4, lr}
 80234bc:	b093      	sub	sp, #76	@ 0x4c
 80234be:	4604      	mov	r4, r0
 80234c0:	ab15      	add	r3, sp, #84	@ 0x54
 80234c2:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80234c6:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80234c8:	ab01      	add	r3, sp, #4
 80234ca:	2140      	movs	r1, #64	@ 0x40
 80234cc:	a802      	add	r0, sp, #8
 80234ce:	f7fd ffdb 	bl	8021488 <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80234d2:	4b11      	ldr	r3, [pc, #68]	@ (8023518 <mg_error+0x60>)
 80234d4:	681b      	ldr	r3, [r3, #0]
 80234d6:	2b00      	cmp	r3, #0
 80234d8:	dc0f      	bgt.n	80234fa <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80234da:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80234de:	f043 0320 	orr.w	r3, r3, #32
 80234e2:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 80234e6:	aa02      	add	r2, sp, #8
 80234e8:	2100      	movs	r1, #0
 80234ea:	4620      	mov	r0, r4
 80234ec:	f7fc fd46 	bl	801ff7c <mg_call>
}
 80234f0:	b013      	add	sp, #76	@ 0x4c
 80234f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80234f6:	b003      	add	sp, #12
 80234f8:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80234fa:	4b08      	ldr	r3, [pc, #32]	@ (802351c <mg_error+0x64>)
 80234fc:	f240 5253 	movw	r2, #1363	@ 0x553
 8023500:	4907      	ldr	r1, [pc, #28]	@ (8023520 <mg_error+0x68>)
 8023502:	2001      	movs	r0, #1
 8023504:	f7ff fef0 	bl	80232e8 <mg_log_prefix>
 8023508:	ab02      	add	r3, sp, #8
 802350a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802350c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802350e:	4805      	ldr	r0, [pc, #20]	@ (8023524 <mg_error+0x6c>)
 8023510:	f7fd ff7c 	bl	802140c <mg_log>
 8023514:	e7e1      	b.n	80234da <mg_error+0x22>
 8023516:	bf00      	nop
 8023518:	200000a8 	.word	0x200000a8
 802351c:	08037c28 	.word	0x08037c28
 8023520:	080371d4 	.word	0x080371d4
 8023524:	08037230 	.word	0x08037230

08023528 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 8023528:	b570      	push	{r4, r5, r6, lr}
 802352a:	b082      	sub	sp, #8
 802352c:	4606      	mov	r6, r0
 802352e:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8023530:	6809      	ldr	r1, [r1, #0]
 8023532:	68a5      	ldr	r5, [r4, #8]
 8023534:	6862      	ldr	r2, [r4, #4]
 8023536:	1b52      	subs	r2, r2, r5
 8023538:	4429      	add	r1, r5
 802353a:	f7ff fa07 	bl	802294c <mg_tls_recv>
 802353e:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 8023540:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8023544:	d003      	beq.n	802354e <handle_tls_recv+0x26>
  } else if (n > 0) {
 8023546:	2800      	cmp	r0, #0
 8023548:	dc06      	bgt.n	8023558 <handle_tls_recv+0x30>
}
 802354a:	b002      	add	sp, #8
 802354c:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 802354e:	4906      	ldr	r1, [pc, #24]	@ (8023568 <handle_tls_recv+0x40>)
 8023550:	4630      	mov	r0, r6
 8023552:	f7ff ffb1 	bl	80234b8 <mg_error>
 8023556:	e7f8      	b.n	802354a <handle_tls_recv+0x22>
    io->len += (size_t) n;
 8023558:	4405      	add	r5, r0
 802355a:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 802355c:	aa01      	add	r2, sp, #4
 802355e:	2107      	movs	r1, #7
 8023560:	4630      	mov	r0, r6
 8023562:	f7fc fd0b 	bl	801ff7c <mg_call>
}
 8023566:	e7f0      	b.n	802354a <handle_tls_recv+0x22>
 8023568:	0803723c 	.word	0x0803723c

0802356c <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 802356c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023570:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8023574:	4607      	mov	r7, r0
 8023576:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8023578:	2907      	cmp	r1, #7
 802357a:	f000 80e3 	beq.w	8023744 <http_cb+0x1d8>
 802357e:	2909      	cmp	r1, #9
 8023580:	f000 814a 	beq.w	8023818 <http_cb+0x2ac>
 8023584:	2902      	cmp	r1, #2
 8023586:	f040 80d9 	bne.w	802373c <http_cb+0x1d0>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 802358a:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 802358e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8023592:	f023 030b 	bic.w	r3, r3, #11
 8023596:	04db      	lsls	r3, r3, #19
 8023598:	0cdb      	lsrs	r3, r3, #19
 802359a:	2b04      	cmp	r3, #4
 802359c:	f040 80ce 	bne.w	802373c <http_cb+0x1d0>
       c->recv.len > 0)) {  // see #2796
 80235a0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80235a2:	2b00      	cmp	r3, #0
 80235a4:	f000 80ca 	beq.w	802373c <http_cb+0x1d0>
 80235a8:	f04f 0900 	mov.w	r9, #0
 80235ac:	e0cc      	b.n	8023748 <http_cb+0x1dc>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 80235ae:	4b9f      	ldr	r3, [pc, #636]	@ (802382c <http_cb+0x2c0>)
 80235b0:	681b      	ldr	r3, [r3, #0]
 80235b2:	2b00      	cmp	r3, #0
 80235b4:	dc11      	bgt.n	80235da <http_cb+0x6e>
        c->is_draining = 1;
 80235b6:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80235ba:	f043 0310 	orr.w	r3, r3, #16
 80235be:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 80235c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80235c4:	eba3 0109 	sub.w	r1, r3, r9
 80235c8:	2910      	cmp	r1, #16
 80235ca:	bf28      	it	cs
 80235cc:	2110      	movcs	r1, #16
 80235ce:	4620      	mov	r0, r4
 80235d0:	f7fd f87e 	bl	80206d0 <mg_hexdump>
        c->recv.len = 0;
 80235d4:	2300      	movs	r3, #0
 80235d6:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 80235d8:	e0b0      	b.n	802373c <http_cb+0x1d0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 80235da:	4b95      	ldr	r3, [pc, #596]	@ (8023830 <http_cb+0x2c4>)
 80235dc:	f640 42a3 	movw	r2, #3235	@ 0xca3
 80235e0:	4994      	ldr	r1, [pc, #592]	@ (8023834 <http_cb+0x2c8>)
 80235e2:	2001      	movs	r0, #1
 80235e4:	f7ff fe80 	bl	80232e8 <mg_log_prefix>
 80235e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80235ea:	4893      	ldr	r0, [pc, #588]	@ (8023838 <http_cb+0x2cc>)
 80235ec:	f7fd ff0e 	bl	802140c <mg_log>
 80235f0:	e7e1      	b.n	80235b6 <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 80235f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80235f4:	eba3 0309 	sub.w	r3, r3, r9
 80235f8:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 80235fa:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 80235fc:	9986      	ldr	r1, [sp, #536]	@ 0x218
 80235fe:	1a52      	subs	r2, r2, r1
 8023600:	1a9b      	subs	r3, r3, r2
 8023602:	9383      	str	r3, [sp, #524]	@ 0x20c
 8023604:	e0bf      	b.n	8023786 <http_cb+0x21a>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8023606:	ad88      	add	r5, sp, #544	@ 0x220
 8023608:	498c      	ldr	r1, [pc, #560]	@ (802383c <http_cb+0x2d0>)
 802360a:	4628      	mov	r0, r5
 802360c:	f7fe f834 	bl	8021678 <mg_str_s>
 8023610:	e895 000c 	ldmia.w	r5, {r2, r3}
 8023614:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023618:	f7fe f8ba 	bl	8021790 <mg_strcasecmp>
 802361c:	4604      	mov	r4, r0
 802361e:	b950      	cbnz	r0, 8023636 <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 8023620:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8023622:	eb08 0309 	add.w	r3, r8, r9
 8023626:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8023628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802362a:	eba3 0309 	sub.w	r3, r3, r9
 802362e:	eba3 0b08 	sub.w	fp, r3, r8
 8023632:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8023634:	e04a      	b.n	80236cc <http_cb+0x160>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8023636:	4982      	ldr	r1, [pc, #520]	@ (8023840 <http_cb+0x2d4>)
 8023638:	4638      	mov	r0, r7
 802363a:	f7ff ff3d 	bl	80234b8 <mg_error>
          return;
 802363e:	e07d      	b.n	802373c <http_cb+0x1d0>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8023640:	2205      	movs	r2, #5
 8023642:	4980      	ldr	r1, [pc, #512]	@ (8023844 <http_cb+0x2d8>)
 8023644:	9802      	ldr	r0, [sp, #8]
 8023646:	f7fa fef1 	bl	801e42c <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 802364a:	2800      	cmp	r0, #0
 802364c:	d032      	beq.n	80236b4 <http_cb+0x148>
 802364e:	ac8a      	add	r4, sp, #552	@ 0x228
 8023650:	497d      	ldr	r1, [pc, #500]	@ (8023848 <http_cb+0x2dc>)
 8023652:	4620      	mov	r0, r4
 8023654:	f7fe f810 	bl	8021678 <mg_str_s>
 8023658:	a902      	add	r1, sp, #8
 802365a:	e894 000c 	ldmia.w	r4, {r2, r3}
 802365e:	c903      	ldmia	r1, {r0, r1}
 8023660:	f7fe f896 	bl	8021790 <mg_strcasecmp>
 8023664:	b9c0      	cbnz	r0, 8023698 <http_cb+0x12c>
          ofs += (size_t) n;  // this request has been processed
 8023666:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 8023668:	4a78      	ldr	r2, [pc, #480]	@ (802384c <http_cb+0x2e0>)
 802366a:	4613      	mov	r3, r2
 802366c:	f240 119b 	movw	r1, #411	@ 0x19b
 8023670:	4638      	mov	r0, r7
 8023672:	f7fd ff1f 	bl	80214b4 <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8023676:	4b6d      	ldr	r3, [pc, #436]	@ (802382c <http_cb+0x2c0>)
 8023678:	681b      	ldr	r3, [r3, #0]
 802367a:	2b00      	cmp	r3, #0
 802367c:	f340 8092 	ble.w	80237a4 <http_cb+0x238>
 8023680:	4b6b      	ldr	r3, [pc, #428]	@ (8023830 <http_cb+0x2c4>)
 8023682:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8023686:	496b      	ldr	r1, [pc, #428]	@ (8023834 <http_cb+0x2c8>)
 8023688:	2001      	movs	r0, #1
 802368a:	f7ff fe2d 	bl	80232e8 <mg_log_prefix>
 802368e:	4970      	ldr	r1, [pc, #448]	@ (8023850 <http_cb+0x2e4>)
 8023690:	4870      	ldr	r0, [pc, #448]	@ (8023854 <http_cb+0x2e8>)
 8023692:	f7fd febb 	bl	802140c <mg_log>
      if (is_chunked) {
 8023696:	e085      	b.n	80237a4 <http_cb+0x238>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8023698:	ac8c      	add	r4, sp, #560	@ 0x230
 802369a:	496f      	ldr	r1, [pc, #444]	@ (8023858 <http_cb+0x2ec>)
 802369c:	4620      	mov	r0, r4
 802369e:	f7fd ffeb 	bl	8021678 <mg_str_s>
 80236a2:	a902      	add	r1, sp, #8
 80236a4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80236a8:	c903      	ldmia	r1, {r0, r1}
 80236aa:	f7fe f871 	bl	8021790 <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 80236ae:	2800      	cmp	r0, #0
 80236b0:	d178      	bne.n	80237a4 <http_cb+0x238>
 80236b2:	e7d8      	b.n	8023666 <http_cb+0xfa>
          int status = mg_http_status(&hm);
 80236b4:	a802      	add	r0, sp, #8
 80236b6:	f7fc fd53 	bl	8020160 <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 80236ba:	28c7      	cmp	r0, #199	@ 0xc7
 80236bc:	dd72      	ble.n	80237a4 <http_cb+0x238>
 80236be:	28cc      	cmp	r0, #204	@ 0xcc
 80236c0:	d070      	beq.n	80237a4 <http_cb+0x238>
 80236c2:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 80236c6:	d1cf      	bne.n	8023668 <http_cb+0xfc>
 80236c8:	e06c      	b.n	80237a4 <http_cb+0x238>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 80236ca:	4406      	add	r6, r0
 80236cc:	ab01      	add	r3, sp, #4
 80236ce:	466a      	mov	r2, sp
 80236d0:	ebab 0106 	sub.w	r1, fp, r6
 80236d4:	19a8      	adds	r0, r5, r6
 80236d6:	f7fe ff09 	bl	80224ec <skip_chunk>
 80236da:	2800      	cmp	r0, #0
 80236dc:	dd02      	ble.n	80236e4 <http_cb+0x178>
 80236de:	9b01      	ldr	r3, [sp, #4]
 80236e0:	2b00      	cmp	r3, #0
 80236e2:	d1f2      	bne.n	80236ca <http_cb+0x15e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 80236e4:	b338      	cbz	r0, 8023736 <http_cb+0x1ca>
        if (cl < 0) {
 80236e6:	2800      	cmp	r0, #0
 80236e8:	db21      	blt.n	802372e <http_cb+0x1c2>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 80236ea:	2300      	movs	r3, #0
 80236ec:	9383      	str	r3, [sp, #524]	@ 0x20c
 80236ee:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 80236f2:	ab01      	add	r3, sp, #4
 80236f4:	466a      	mov	r2, sp
 80236f6:	ebab 0104 	sub.w	r1, fp, r4
 80236fa:	1928      	adds	r0, r5, r4
 80236fc:	f7fe fef6 	bl	80224ec <skip_chunk>
 8023700:	1e06      	subs	r6, r0, #0
 8023702:	dd11      	ble.n	8023728 <http_cb+0x1bc>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8023704:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 8023706:	9900      	ldr	r1, [sp, #0]
 8023708:	4421      	add	r1, r4
 802370a:	9a01      	ldr	r2, [sp, #4]
 802370c:	4429      	add	r1, r5
 802370e:	4428      	add	r0, r5
 8023710:	f006 f9cc 	bl	8029aac <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8023714:	4434      	add	r4, r6
 8023716:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8023718:	9b01      	ldr	r3, [sp, #4]
 802371a:	441a      	add	r2, r3
 802371c:	9283      	str	r2, [sp, #524]	@ 0x20c
 802371e:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 8023720:	441a      	add	r2, r3
 8023722:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 8023724:	2b00      	cmp	r3, #0
 8023726:	d1e4      	bne.n	80236f2 <http_cb+0x186>
        ofs += (size_t) (n + o);
 8023728:	4444      	add	r4, r8
 802372a:	44a1      	add	r9, r4
 802372c:	e044      	b.n	80237b8 <http_cb+0x24c>
          mg_error(c, "Invalid chunk");
 802372e:	494b      	ldr	r1, [pc, #300]	@ (802385c <http_cb+0x2f0>)
 8023730:	4638      	mov	r0, r7
 8023732:	f7ff fec1 	bl	80234b8 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8023736:	f1b9 0f00 	cmp.w	r9, #0
 802373a:	d170      	bne.n	802381e <http_cb+0x2b2>
}
 802373c:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 8023740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023744:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8023748:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 802374c:	2b00      	cmp	r3, #0
 802374e:	dbf2      	blt.n	8023736 <http_cb+0x1ca>
 8023750:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8023752:	4549      	cmp	r1, r9
 8023754:	d9ef      	bls.n	8023736 <http_cb+0x1ca>
      const char *buf = (char *) c->recv.buf + ofs;
 8023756:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8023758:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 802375a:	aa02      	add	r2, sp, #8
 802375c:	eba1 0109 	sub.w	r1, r1, r9
 8023760:	4620      	mov	r0, r4
 8023762:	f7fe f845 	bl	80217f0 <mg_http_parse>
      if (n < 0) {
 8023766:	f1b0 0800 	subs.w	r8, r0, #0
 802376a:	f6ff af20 	blt.w	80235ae <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 802376e:	f1b8 0f00 	cmp.w	r8, #0
 8023772:	d0e0      	beq.n	8023736 <http_cb+0x1ca>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8023774:	aa02      	add	r2, sp, #8
 8023776:	210a      	movs	r1, #10
 8023778:	4638      	mov	r0, r7
 802377a:	f7fc fbff 	bl	801ff7c <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 802377e:	f1ba 0f09 	cmp.w	sl, #9
 8023782:	f43f af36 	beq.w	80235f2 <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8023786:	4936      	ldr	r1, [pc, #216]	@ (8023860 <http_cb+0x2f4>)
 8023788:	a802      	add	r0, sp, #8
 802378a:	f7fc fcbf 	bl	802010c <mg_http_get_header>
 802378e:	4604      	mov	r4, r0
 8023790:	2800      	cmp	r0, #0
 8023792:	f47f af38 	bne.w	8023606 <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8023796:	4933      	ldr	r1, [pc, #204]	@ (8023864 <http_cb+0x2f8>)
 8023798:	a802      	add	r0, sp, #8
 802379a:	f7fc fcb7 	bl	802010c <mg_http_get_header>
 802379e:	2800      	cmp	r0, #0
 80237a0:	f43f af4e 	beq.w	8023640 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 80237a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80237a6:	eba3 0309 	sub.w	r3, r3, r9
 80237aa:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 80237ae:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 80237b0:	429a      	cmp	r2, r3
 80237b2:	d8c0      	bhi.n	8023736 <http_cb+0x1ca>
        ofs += (size_t) n + hm.body.len;
 80237b4:	4490      	add	r8, r2
 80237b6:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 80237b8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80237bc:	f013 0f04 	tst.w	r3, #4
 80237c0:	d005      	beq.n	80237ce <http_cb+0x262>
 80237c2:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80237c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80237ca:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 80237ce:	aa02      	add	r2, sp, #8
 80237d0:	210b      	movs	r1, #11
 80237d2:	4638      	mov	r0, r7
 80237d4:	f7fc fbd2 	bl	801ff7c <mg_call>
      if (c->is_accepted) {
 80237d8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80237dc:	f013 0f04 	tst.w	r3, #4
 80237e0:	d0b2      	beq.n	8023748 <http_cb+0x1dc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 80237e2:	4921      	ldr	r1, [pc, #132]	@ (8023868 <http_cb+0x2fc>)
 80237e4:	a802      	add	r0, sp, #8
 80237e6:	f7fc fc91 	bl	802010c <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 80237ea:	4605      	mov	r5, r0
 80237ec:	2800      	cmp	r0, #0
 80237ee:	d0ab      	beq.n	8023748 <http_cb+0x1dc>
 80237f0:	ac8e      	add	r4, sp, #568	@ 0x238
 80237f2:	491e      	ldr	r1, [pc, #120]	@ (802386c <http_cb+0x300>)
 80237f4:	4620      	mov	r0, r4
 80237f6:	f7fd ff3f 	bl	8021678 <mg_str_s>
 80237fa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80237fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8023802:	f7fd ffc5 	bl	8021790 <mg_strcasecmp>
 8023806:	2800      	cmp	r0, #0
 8023808:	d19e      	bne.n	8023748 <http_cb+0x1dc>
          c->is_draining = 1;  // honor "Connection: close"
 802380a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 802380e:	f043 0310 	orr.w	r3, r3, #16
 8023812:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 8023816:	e78e      	b.n	8023736 <http_cb+0x1ca>
 8023818:	f04f 0900 	mov.w	r9, #0
 802381c:	e794      	b.n	8023748 <http_cb+0x1dc>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 802381e:	464a      	mov	r2, r9
 8023820:	2100      	movs	r1, #0
 8023822:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8023826:	f7ff f964 	bl	8022af2 <mg_iobuf_del>
 802382a:	e787      	b.n	802373c <http_cb+0x1d0>
 802382c:	200000a8 	.word	0x200000a8
 8023830:	08037c20 	.word	0x08037c20
 8023834:	080371d4 	.word	0x080371d4
 8023838:	0803724c 	.word	0x0803724c
 802383c:	08037264 	.word	0x08037264
 8023840:	0803726c 	.word	0x0803726c
 8023844:	080369f0 	.word	0x080369f0
 8023848:	0803364c 	.word	0x0803364c
 802384c:	08033984 	.word	0x08033984
 8023850:	08037298 	.word	0x08037298
 8023854:	080374ec 	.word	0x080374ec
 8023858:	080369f8 	.word	0x080369f8
 802385c:	080372bc 	.word	0x080372bc
 8023860:	08037274 	.word	0x08037274
 8023864:	08037288 	.word	0x08037288
 8023868:	080372cc 	.word	0x080372cc
 802386c:	080372d8 	.word	0x080372d8

08023870 <uri_to_path2>:
                        char *path, size_t path_size) {
 8023870:	b082      	sub	sp, #8
 8023872:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023876:	b086      	sub	sp, #24
 8023878:	4681      	mov	r9, r0
 802387a:	460e      	mov	r6, r1
 802387c:	4690      	mov	r8, r2
 802387e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023880:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8023882:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8023884:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023886:	9300      	str	r3, [sp, #0]
 8023888:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802388a:	4a6f      	ldr	r2, [pc, #444]	@ (8023a48 <uri_to_path2+0x1d8>)
 802388c:	4639      	mov	r1, r7
 802388e:	4628      	mov	r0, r5
 8023890:	f7fd f912 	bl	8020ab8 <mg_snprintf>
  if (n + 2 >= path_size) {
 8023894:	1c83      	adds	r3, r0, #2
 8023896:	42bb      	cmp	r3, r7
 8023898:	d227      	bcs.n	80238ea <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 802389a:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 802389e:	2300      	movs	r3, #0
 80238a0:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 80238a4:	b150      	cbz	r0, 80238bc <uri_to_path2+0x4c>
 80238a6:	182b      	adds	r3, r5, r0
 80238a8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80238ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80238ae:	d005      	beq.n	80238bc <uri_to_path2+0x4c>
 80238b0:	1c43      	adds	r3, r0, #1
 80238b2:	222f      	movs	r2, #47	@ 0x2f
 80238b4:	542a      	strb	r2, [r5, r0]
 80238b6:	2200      	movs	r2, #0
 80238b8:	54ea      	strb	r2, [r5, r3]
 80238ba:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 80238bc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80238be:	68f1      	ldr	r1, [r6, #12]
 80238c0:	428c      	cmp	r4, r1
 80238c2:	d31c      	bcc.n	80238fe <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 80238c4:	2300      	movs	r3, #0
 80238c6:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 80238ca:	ac02      	add	r4, sp, #8
 80238cc:	463a      	mov	r2, r7
 80238ce:	4629      	mov	r1, r5
 80238d0:	4620      	mov	r0, r4
 80238d2:	f7fd fedd 	bl	8021690 <mg_str_n>
 80238d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80238da:	f7ff fcdb 	bl	8023294 <mg_path_is_sane>
 80238de:	b1c0      	cbz	r0, 8023912 <uri_to_path2+0xa2>
  n = strlen(path);
 80238e0:	4628      	mov	r0, r5
 80238e2:	f7ec fcdd 	bl	80102a0 <strlen>
 80238e6:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 80238e8:	e020      	b.n	802392c <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 80238ea:	4b58      	ldr	r3, [pc, #352]	@ (8023a4c <uri_to_path2+0x1dc>)
 80238ec:	4a58      	ldr	r2, [pc, #352]	@ (8023a50 <uri_to_path2+0x1e0>)
 80238ee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80238f2:	4648      	mov	r0, r9
 80238f4:	f7fd fdde 	bl	80214b4 <mg_http_reply>
    return -1;
 80238f8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80238fc:	e046      	b.n	802398c <uri_to_path2+0x11c>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 80238fe:	2300      	movs	r3, #0
 8023900:	9300      	str	r3, [sp, #0]
 8023902:	1a3b      	subs	r3, r7, r0
 8023904:	182a      	adds	r2, r5, r0
 8023906:	1b09      	subs	r1, r1, r4
 8023908:	68b0      	ldr	r0, [r6, #8]
 802390a:	4420      	add	r0, r4
 802390c:	f7fe fcd4 	bl	80222b8 <mg_url_decode>
 8023910:	e7d8      	b.n	80238c4 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 8023912:	4b50      	ldr	r3, [pc, #320]	@ (8023a54 <uri_to_path2+0x1e4>)
 8023914:	4a4e      	ldr	r2, [pc, #312]	@ (8023a50 <uri_to_path2+0x1e0>)
 8023916:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802391a:	4648      	mov	r0, r9
 802391c:	f7fd fdca 	bl	80214b4 <mg_http_reply>
    return -1;
 8023920:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8023924:	e032      	b.n	802398c <uri_to_path2+0x11c>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8023926:	2200      	movs	r2, #0
 8023928:	54ea      	strb	r2, [r5, r3]
 802392a:	461c      	mov	r4, r3
 802392c:	2c01      	cmp	r4, #1
 802392e:	d905      	bls.n	802393c <uri_to_path2+0xcc>
 8023930:	1e63      	subs	r3, r4, #1
 8023932:	f815 c003 	ldrb.w	ip, [r5, r3]
 8023936:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 802393a:	d0f4      	beq.n	8023926 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 802393c:	f10d 0a10 	add.w	sl, sp, #16
 8023940:	4945      	ldr	r1, [pc, #276]	@ (8023a58 <uri_to_path2+0x1e8>)
 8023942:	4650      	mov	r0, sl
 8023944:	f7fd fe98 	bl	8021678 <mg_str_s>
 8023948:	e89a 000c 	ldmia.w	sl, {r2, r3}
 802394c:	f106 0108 	add.w	r1, r6, #8
 8023950:	c903      	ldmia	r1, {r0, r1}
 8023952:	f7fd fef3 	bl	802173c <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 8023956:	b1f8      	cbz	r0, 8023998 <uri_to_path2+0x128>
 8023958:	f8d8 3000 	ldr.w	r3, [r8]
 802395c:	2200      	movs	r2, #0
 802395e:	4611      	mov	r1, r2
 8023960:	4628      	mov	r0, r5
 8023962:	4798      	blx	r3
 8023964:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8023966:	4b3d      	ldr	r3, [pc, #244]	@ (8023a5c <uri_to_path2+0x1ec>)
 8023968:	681b      	ldr	r3, [r3, #0]
 802396a:	2b03      	cmp	r3, #3
 802396c:	dc17      	bgt.n	802399e <uri_to_path2+0x12e>
  if (flags == 0) {
 802396e:	f1ba 0f00 	cmp.w	sl, #0
 8023972:	d00b      	beq.n	802398c <uri_to_path2+0x11c>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8023974:	f01a 0104 	ands.w	r1, sl, #4
 8023978:	d007      	beq.n	802398a <uri_to_path2+0x11a>
 802397a:	68f2      	ldr	r2, [r6, #12]
 802397c:	b12a      	cbz	r2, 802398a <uri_to_path2+0x11a>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 802397e:	68b3      	ldr	r3, [r6, #8]
 8023980:	1898      	adds	r0, r3, r2
 8023982:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8023986:	282f      	cmp	r0, #47	@ 0x2f
 8023988:	d11b      	bne.n	80239c2 <uri_to_path2+0x152>
  } else if (flags & MG_FS_DIR) {
 802398a:	bb39      	cbnz	r1, 80239dc <uri_to_path2+0x16c>
}
 802398c:	4650      	mov	r0, sl
 802398e:	b006      	add	sp, #24
 8023990:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023994:	b002      	add	sp, #8
 8023996:	4770      	bx	lr
                                               : fs->st(path, NULL, NULL);
 8023998:	f04f 0a04 	mov.w	sl, #4
 802399c:	e7e3      	b.n	8023966 <uri_to_path2+0xf6>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 802399e:	4b30      	ldr	r3, [pc, #192]	@ (8023a60 <uri_to_path2+0x1f0>)
 80239a0:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 80239a4:	492f      	ldr	r1, [pc, #188]	@ (8023a64 <uri_to_path2+0x1f4>)
 80239a6:	2004      	movs	r0, #4
 80239a8:	f7ff fc9e 	bl	80232e8 <mg_log_prefix>
 80239ac:	f8cd a004 	str.w	sl, [sp, #4]
 80239b0:	9500      	str	r5, [sp, #0]
 80239b2:	68b3      	ldr	r3, [r6, #8]
 80239b4:	68f2      	ldr	r2, [r6, #12]
 80239b6:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 80239ba:	482b      	ldr	r0, [pc, #172]	@ (8023a68 <uri_to_path2+0x1f8>)
 80239bc:	f7fd fd26 	bl	802140c <mg_log>
 80239c0:	e7d5      	b.n	802396e <uri_to_path2+0xfe>
    mg_printf(c,
 80239c2:	492a      	ldr	r1, [pc, #168]	@ (8023a6c <uri_to_path2+0x1fc>)
 80239c4:	4648      	mov	r0, r9
 80239c6:	f7fd fd4f 	bl	8021468 <mg_printf>
    c->is_resp = 0;
 80239ca:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 80239ce:	f36f 13c7 	bfc	r3, #7, #1
 80239d2:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 80239d6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80239da:	e7d7      	b.n	802398c <uri_to_path2+0x11c>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80239dc:	192e      	adds	r6, r5, r4
 80239de:	1b3f      	subs	r7, r7, r4
 80239e0:	4a23      	ldr	r2, [pc, #140]	@ (8023a70 <uri_to_path2+0x200>)
 80239e2:	4639      	mov	r1, r7
 80239e4:	4630      	mov	r0, r6
 80239e6:	f7fd f867 	bl	8020ab8 <mg_snprintf>
 80239ea:	b130      	cbz	r0, 80239fa <uri_to_path2+0x18a>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80239ec:	f8d8 3000 	ldr.w	r3, [r8]
 80239f0:	2200      	movs	r2, #0
 80239f2:	4611      	mov	r1, r2
 80239f4:	4628      	mov	r0, r5
 80239f6:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80239f8:	bb08      	cbnz	r0, 8023a3e <uri_to_path2+0x1ce>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80239fa:	4a1e      	ldr	r2, [pc, #120]	@ (8023a74 <uri_to_path2+0x204>)
 80239fc:	4639      	mov	r1, r7
 80239fe:	4630      	mov	r0, r6
 8023a00:	f7fd f85a 	bl	8020ab8 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8023a04:	b130      	cbz	r0, 8023a14 <uri_to_path2+0x1a4>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8023a06:	f8d8 3000 	ldr.w	r3, [r8]
 8023a0a:	2200      	movs	r2, #0
 8023a0c:	4611      	mov	r1, r2
 8023a0e:	4628      	mov	r0, r5
 8023a10:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8023a12:	b9b0      	cbnz	r0, 8023a42 <uri_to_path2+0x1d2>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8023a14:	4a18      	ldr	r2, [pc, #96]	@ (8023a78 <uri_to_path2+0x208>)
 8023a16:	4639      	mov	r1, r7
 8023a18:	4630      	mov	r0, r6
 8023a1a:	f7fd f84d 	bl	8020ab8 <mg_snprintf>
 8023a1e:	b158      	cbz	r0, 8023a38 <uri_to_path2+0x1c8>
                (tmp = fs->st(path, NULL, NULL)) !=
 8023a20:	f8d8 3000 	ldr.w	r3, [r8]
 8023a24:	2200      	movs	r2, #0
 8023a26:	4611      	mov	r1, r2
 8023a28:	4628      	mov	r0, r5
 8023a2a:	4798      	blx	r3
                    0 &&
 8023a2c:	b120      	cbz	r0, 8023a38 <uri_to_path2+0x1c8>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8023a2e:	340b      	adds	r4, #11
 8023a30:	2200      	movs	r2, #0
 8023a32:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 8023a34:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8023a36:	e7a9      	b.n	802398c <uri_to_path2+0x11c>
      path[n] = '\0';  // Remove appended index file name
 8023a38:	2300      	movs	r3, #0
 8023a3a:	7033      	strb	r3, [r6, #0]
 8023a3c:	e7a6      	b.n	802398c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8023a3e:	4682      	mov	sl, r0
 8023a40:	e7a4      	b.n	802398c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8023a42:	4682      	mov	sl, r0
 8023a44:	e7a2      	b.n	802398c <uri_to_path2+0x11c>
 8023a46:	bf00      	nop
 8023a48:	08036948 	.word	0x08036948
 8023a4c:	080372e0 	.word	0x080372e0
 8023a50:	08033984 	.word	0x08033984
 8023a54:	080372f4 	.word	0x080372f4
 8023a58:	080369f4 	.word	0x080369f4
 8023a5c:	200000a8 	.word	0x200000a8
 8023a60:	08037c10 	.word	0x08037c10
 8023a64:	080371d4 	.word	0x080371d4
 8023a68:	08037304 	.word	0x08037304
 8023a6c:	08037318 	.word	0x08037318
 8023a70:	08037354 	.word	0x08037354
 8023a74:	08037360 	.word	0x08037360
 8023a78:	08037370 	.word	0x08037370

08023a7c <uri_to_path>:
                       size_t path_size) {
 8023a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a80:	b096      	sub	sp, #88	@ 0x58
 8023a82:	4606      	mov	r6, r0
 8023a84:	460d      	mov	r5, r1
 8023a86:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8023a88:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8023a8c:	f1b8 0f00 	cmp.w	r8, #0
 8023a90:	d069      	beq.n	8023b66 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8023a92:	6811      	ldr	r1, [r2, #0]
 8023a94:	a80c      	add	r0, sp, #48	@ 0x30
 8023a96:	f7fd fdef 	bl	8021678 <mg_str_s>
 8023a9a:	2300      	movs	r3, #0
 8023a9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8023a9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023aa0:	ab08      	add	r3, sp, #32
 8023aa2:	aa0a      	add	r2, sp, #40	@ 0x28
 8023aa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023aa8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 8023aac:	ab0c      	add	r3, sp, #48	@ 0x30
 8023aae:	222c      	movs	r2, #44	@ 0x2c
 8023ab0:	9200      	str	r2, [sp, #0]
 8023ab2:	aa0e      	add	r2, sp, #56	@ 0x38
 8023ab4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023ab8:	f7fe f82d 	bl	8021b16 <mg_span>
 8023abc:	2800      	cmp	r0, #0
 8023abe:	d055      	beq.n	8023b6c <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8023ac0:	233d      	movs	r3, #61	@ 0x3d
 8023ac2:	9300      	str	r3, [sp, #0]
 8023ac4:	ab10      	add	r3, sp, #64	@ 0x40
 8023ac6:	aa12      	add	r2, sp, #72	@ 0x48
 8023ac8:	ac0e      	add	r4, sp, #56	@ 0x38
 8023aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023ace:	f7fe f822 	bl	8021b16 <mg_span>
 8023ad2:	b978      	cbnz	r0, 8023af4 <uri_to_path+0x78>
 8023ad4:	ab12      	add	r3, sp, #72	@ 0x48
 8023ad6:	e9d4 0100 	ldrd	r0, r1, [r4]
 8023ada:	e883 0003 	stmia.w	r3, {r0, r1}
 8023ade:	ac06      	add	r4, sp, #24
 8023ae0:	2200      	movs	r2, #0
 8023ae2:	4611      	mov	r1, r2
 8023ae4:	4620      	mov	r0, r4
 8023ae6:	f7fd fdd3 	bl	8021690 <mg_str_n>
 8023aea:	ab10      	add	r3, sp, #64	@ 0x40
 8023aec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023af0:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8023af4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023af6:	b9c3      	cbnz	r3, 8023b2a <uri_to_path+0xae>
 8023af8:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 8023afc:	ac12      	add	r4, sp, #72	@ 0x48
 8023afe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023b02:	e889 0003 	stmia.w	r9, {r0, r1}
 8023b06:	f10d 0a18 	add.w	sl, sp, #24
 8023b0a:	4922      	ldr	r1, [pc, #136]	@ (8023b94 <uri_to_path+0x118>)
 8023b0c:	4650      	mov	r0, sl
 8023b0e:	f7fd fdb3 	bl	8021678 <mg_str_s>
 8023b12:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8023b16:	e884 0003 	stmia.w	r4, {r0, r1}
 8023b1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8023b1c:	e883 0003 	stmia.w	r3, {r0, r1}
 8023b20:	ab08      	add	r3, sp, #32
 8023b22:	e899 0003 	ldmia.w	r9, {r0, r1}
 8023b26:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8023b2a:	68eb      	ldr	r3, [r5, #12]
 8023b2c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023b2e:	4293      	cmp	r3, r2
 8023b30:	d3bc      	bcc.n	8023aac <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8023b32:	ac14      	add	r4, sp, #80	@ 0x50
 8023b34:	68a9      	ldr	r1, [r5, #8]
 8023b36:	4620      	mov	r0, r4
 8023b38:	f7fd fdaa 	bl	8021690 <mg_str_n>
 8023b3c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8023b40:	a912      	add	r1, sp, #72	@ 0x48
 8023b42:	c903      	ldmia	r1, {r0, r1}
 8023b44:	f7fd fdfa 	bl	802173c <mg_strcmp>
 8023b48:	2800      	cmp	r0, #0
 8023b4a:	d1af      	bne.n	8023aac <uri_to_path+0x30>
    u = k, p = v;
 8023b4c:	ab0a      	add	r3, sp, #40	@ 0x28
 8023b4e:	aa12      	add	r2, sp, #72	@ 0x48
 8023b50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023b54:	e883 0003 	stmia.w	r3, {r0, r1}
 8023b58:	ab08      	add	r3, sp, #32
 8023b5a:	aa10      	add	r2, sp, #64	@ 0x40
 8023b5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023b60:	e883 0003 	stmia.w	r3, {r0, r1}
 8023b64:	e7a2      	b.n	8023aac <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8023b66:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 8023b98 <uri_to_path+0x11c>
 8023b6a:	e792      	b.n	8023a92 <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8023b6c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023b6e:	9304      	str	r3, [sp, #16]
 8023b70:	9703      	str	r7, [sp, #12]
 8023b72:	ab01      	add	r3, sp, #4
 8023b74:	aa08      	add	r2, sp, #32
 8023b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023b7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8023b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023b80:	9300      	str	r3, [sp, #0]
 8023b82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023b84:	4642      	mov	r2, r8
 8023b86:	4629      	mov	r1, r5
 8023b88:	4630      	mov	r0, r6
 8023b8a:	f7ff fe71 	bl	8023870 <uri_to_path2>
}
 8023b8e:	b016      	add	sp, #88	@ 0x58
 8023b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b94:	080369f4 	.word	0x080369f4
 8023b98:	200000ac 	.word	0x200000ac

08023b9c <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 8023b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023ba0:	b0a7      	sub	sp, #156	@ 0x9c
 8023ba2:	4607      	mov	r7, r0
 8023ba4:	460e      	mov	r6, r1
 8023ba6:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 8023ba8:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8023bac:	2380      	movs	r3, #128	@ 0x80
 8023bae:	9300      	str	r3, [sp, #0]
 8023bb0:	ab02      	add	r3, sp, #8
 8023bb2:	f7ff ff63 	bl	8023a7c <uri_to_path>
  if (flags < 0) {
 8023bb6:	2800      	cmp	r0, #0
 8023bb8:	db20      	blt.n	8023bfc <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 8023bba:	f010 0f04 	tst.w	r0, #4
 8023bbe:	d120      	bne.n	8023c02 <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8023bc0:	b1b0      	cbz	r0, 8023bf0 <mg_http_serve_dir+0x54>
 8023bc2:	f1b8 0f00 	cmp.w	r8, #0
 8023bc6:	d013      	beq.n	8023bf0 <mg_http_serve_dir+0x54>
 8023bc8:	ac22      	add	r4, sp, #136	@ 0x88
 8023bca:	a902      	add	r1, sp, #8
 8023bcc:	4620      	mov	r0, r4
 8023bce:	f7fd fd53 	bl	8021678 <mg_str_s>
 8023bd2:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 8023bd6:	4641      	mov	r1, r8
 8023bd8:	4648      	mov	r0, r9
 8023bda:	f7fd fd4d 	bl	8021678 <mg_str_s>
 8023bde:	2300      	movs	r3, #0
 8023be0:	9300      	str	r3, [sp, #0]
 8023be2:	e899 000c 	ldmia.w	r9, {r2, r3}
 8023be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023bea:	f7fd fef9 	bl	80219e0 <mg_match>
 8023bee:	b978      	cbnz	r0, 8023c10 <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 8023bf0:	462b      	mov	r3, r5
 8023bf2:	aa02      	add	r2, sp, #8
 8023bf4:	4631      	mov	r1, r6
 8023bf6:	4638      	mov	r0, r7
 8023bf8:	f7fe f8ae 	bl	8021d58 <mg_http_serve_file>
}
 8023bfc:	b027      	add	sp, #156	@ 0x9c
 8023bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 8023c02:	ab02      	add	r3, sp, #8
 8023c04:	462a      	mov	r2, r5
 8023c06:	4631      	mov	r1, r6
 8023c08:	4638      	mov	r0, r7
 8023c0a:	f7fe fbef 	bl	80223ec <listdir>
 8023c0e:	e7f5      	b.n	8023bfc <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8023c10:	aa02      	add	r2, sp, #8
 8023c12:	6829      	ldr	r1, [r5, #0]
 8023c14:	4638      	mov	r0, r7
 8023c16:	f7fd fd25 	bl	8021664 <mg_http_serve_ssi>
 8023c1a:	e7ef      	b.n	8023bfc <mg_http_serve_dir+0x60>

08023c1c <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 8023c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c1e:	b0c3      	sub	sp, #268	@ 0x10c
 8023c20:	4605      	mov	r5, r0
 8023c22:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8023c24:	688b      	ldr	r3, [r1, #8]
 8023c26:	695e      	ldr	r6, [r3, #20]
 8023c28:	b1b6      	cbz	r6, 8023c58 <printdirentry+0x3c>
  size_t size = 0;
 8023c2a:	2300      	movs	r3, #0
 8023c2c:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 8023c2e:	2200      	movs	r2, #0
 8023c30:	2300      	movs	r3, #0
 8023c32:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8023c36:	9501      	str	r5, [sp, #4]
 8023c38:	232f      	movs	r3, #47	@ 0x2f
 8023c3a:	9300      	str	r3, [sp, #0]
 8023c3c:	68e3      	ldr	r3, [r4, #12]
 8023c3e:	4a3c      	ldr	r2, [pc, #240]	@ (8023d30 <printdirentry+0x114>)
 8023c40:	2180      	movs	r1, #128	@ 0x80
 8023c42:	a81e      	add	r0, sp, #120	@ 0x78
 8023c44:	f7fc ff38 	bl	8020ab8 <mg_snprintf>
 8023c48:	2880      	cmp	r0, #128	@ 0x80
 8023c4a:	d913      	bls.n	8023c74 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 8023c4c:	4b39      	ldr	r3, [pc, #228]	@ (8023d34 <printdirentry+0x118>)
 8023c4e:	681b      	ldr	r3, [r3, #0]
 8023c50:	2b00      	cmp	r3, #0
 8023c52:	dc03      	bgt.n	8023c5c <printdirentry+0x40>
}
 8023c54:	b043      	add	sp, #268	@ 0x10c
 8023c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8023c58:	4e37      	ldr	r6, [pc, #220]	@ (8023d38 <printdirentry+0x11c>)
 8023c5a:	e7e6      	b.n	8023c2a <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 8023c5c:	4b37      	ldr	r3, [pc, #220]	@ (8023d3c <printdirentry+0x120>)
 8023c5e:	f640 3248 	movw	r2, #2888	@ 0xb48
 8023c62:	4937      	ldr	r1, [pc, #220]	@ (8023d40 <printdirentry+0x124>)
 8023c64:	2001      	movs	r0, #1
 8023c66:	f7ff fb3f 	bl	80232e8 <mg_log_prefix>
 8023c6a:	4629      	mov	r1, r5
 8023c6c:	4835      	ldr	r0, [pc, #212]	@ (8023d44 <printdirentry+0x128>)
 8023c6e:	f7fd fbcd 	bl	802140c <mg_log>
 8023c72:	e7ef      	b.n	8023c54 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8023c74:	6833      	ldr	r3, [r6, #0]
 8023c76:	aa3e      	add	r2, sp, #248	@ 0xf8
 8023c78:	a941      	add	r1, sp, #260	@ 0x104
 8023c7a:	a81e      	add	r0, sp, #120	@ 0x78
 8023c7c:	4798      	blx	r3
 8023c7e:	b9a8      	cbnz	r0, 8023cac <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8023c80:	4b2c      	ldr	r3, [pc, #176]	@ (8023d34 <printdirentry+0x118>)
 8023c82:	681b      	ldr	r3, [r3, #0]
 8023c84:	2b00      	cmp	r3, #0
 8023c86:	dde5      	ble.n	8023c54 <printdirentry+0x38>
 8023c88:	4b2c      	ldr	r3, [pc, #176]	@ (8023d3c <printdirentry+0x120>)
 8023c8a:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8023c8e:	492c      	ldr	r1, [pc, #176]	@ (8023d40 <printdirentry+0x124>)
 8023c90:	2001      	movs	r0, #1
 8023c92:	f7ff fb29 	bl	80232e8 <mg_log_prefix>
 8023c96:	6823      	ldr	r3, [r4, #0]
 8023c98:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8023c9a:	f007 f925 	bl	802aee8 <__errno>
 8023c9e:	6803      	ldr	r3, [r0, #0]
 8023ca0:	aa1e      	add	r2, sp, #120	@ 0x78
 8023ca2:	4621      	mov	r1, r4
 8023ca4:	4828      	ldr	r0, [pc, #160]	@ (8023d48 <printdirentry+0x12c>)
 8023ca6:	f7fd fbb1 	bl	802140c <mg_log>
 8023caa:	e7d3      	b.n	8023c54 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8023cac:	f010 0604 	ands.w	r6, r0, #4
 8023cb0:	d02d      	beq.n	8023d0e <printdirentry+0xf2>
 8023cb2:	4f26      	ldr	r7, [pc, #152]	@ (8023d4c <printdirentry+0x130>)
    if (flags & MG_FS_DIR) {
 8023cb4:	2e00      	cmp	r6, #0
 8023cb6:	d02c      	beq.n	8023d12 <printdirentry+0xf6>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 8023cb8:	4b25      	ldr	r3, [pc, #148]	@ (8023d50 <printdirentry+0x134>)
 8023cba:	4a26      	ldr	r2, [pc, #152]	@ (8023d54 <printdirentry+0x138>)
 8023cbc:	2128      	movs	r1, #40	@ 0x28
 8023cbe:	a814      	add	r0, sp, #80	@ 0x50
 8023cc0:	f7fc fefa 	bl	8020ab8 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8023cc4:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8023cc6:	4a24      	ldr	r2, [pc, #144]	@ (8023d58 <printdirentry+0x13c>)
 8023cc8:	2128      	movs	r1, #40	@ 0x28
 8023cca:	eb0d 0001 	add.w	r0, sp, r1
 8023cce:	f7fc fef3 	bl	8020ab8 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8023cd2:	4628      	mov	r0, r5
 8023cd4:	f7ec fae4 	bl	80102a0 <strlen>
 8023cd8:	4601      	mov	r1, r0
 8023cda:	2380      	movs	r3, #128	@ 0x80
 8023cdc:	aa1e      	add	r2, sp, #120	@ 0x78
 8023cde:	4628      	mov	r0, r5
 8023ce0:	f7fd fc3c 	bl	802155c <mg_url_encode>
 8023ce4:	4602      	mov	r2, r0
    mg_printf(d->c,
 8023ce6:	6820      	ldr	r0, [r4, #0]
 8023ce8:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8023cea:	b9e6      	cbnz	r6, 8023d26 <printdirentry+0x10a>
 8023cec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023cee:	2400      	movs	r4, #0
 8023cf0:	ae14      	add	r6, sp, #80	@ 0x50
 8023cf2:	9608      	str	r6, [sp, #32]
 8023cf4:	9306      	str	r3, [sp, #24]
 8023cf6:	9407      	str	r4, [sp, #28]
 8023cf8:	ab0a      	add	r3, sp, #40	@ 0x28
 8023cfa:	9304      	str	r3, [sp, #16]
 8023cfc:	9103      	str	r1, [sp, #12]
 8023cfe:	9702      	str	r7, [sp, #8]
 8023d00:	9501      	str	r5, [sp, #4]
 8023d02:	9700      	str	r7, [sp, #0]
 8023d04:	ab1e      	add	r3, sp, #120	@ 0x78
 8023d06:	4915      	ldr	r1, [pc, #84]	@ (8023d5c <printdirentry+0x140>)
 8023d08:	f7fd fbae 	bl	8021468 <mg_printf>
}
 8023d0c:	e7a2      	b.n	8023c54 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8023d0e:	4f14      	ldr	r7, [pc, #80]	@ (8023d60 <printdirentry+0x144>)
 8023d10:	e7d0      	b.n	8023cb4 <printdirentry+0x98>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8023d12:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023d14:	9300      	str	r3, [sp, #0]
 8023d16:	2300      	movs	r3, #0
 8023d18:	9301      	str	r3, [sp, #4]
 8023d1a:	4a12      	ldr	r2, [pc, #72]	@ (8023d64 <printdirentry+0x148>)
 8023d1c:	2128      	movs	r1, #40	@ 0x28
 8023d1e:	a814      	add	r0, sp, #80	@ 0x50
 8023d20:	f7fc feca 	bl	8020ab8 <mg_snprintf>
 8023d24:	e7ce      	b.n	8023cc4 <printdirentry+0xa8>
    mg_printf(d->c,
 8023d26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023d2a:	461c      	mov	r4, r3
 8023d2c:	e7e0      	b.n	8023cf0 <printdirentry+0xd4>
 8023d2e:	bf00      	nop
 8023d30:	08037380 	.word	0x08037380
 8023d34:	200000a8 	.word	0x200000a8
 8023d38:	200000ac 	.word	0x200000ac
 8023d3c:	08037c00 	.word	0x08037c00
 8023d40:	080371d4 	.word	0x080371d4
 8023d44:	08037388 	.word	0x08037388
 8023d48:	08037398 	.word	0x08037398
 8023d4c:	080369f4 	.word	0x080369f4
 8023d50:	080373ac 	.word	0x080373ac
 8023d54:	080374ec 	.word	0x080374ec
 8023d58:	0803779c 	.word	0x0803779c
 8023d5c:	080373bc 	.word	0x080373bc
 8023d60:	08033984 	.word	0x08033984
 8023d64:	080373b4 	.word	0x080373b4

08023d68 <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8023d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023d6c:	b0ca      	sub	sp, #296	@ 0x128
 8023d6e:	4607      	mov	r7, r0
 8023d70:	460d      	mov	r5, r1
 8023d72:	4616      	mov	r6, r2
 8023d74:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8023d76:	2330      	movs	r3, #48	@ 0x30
 8023d78:	9343      	str	r3, [sp, #268]	@ 0x10c
 8023d7a:	2400      	movs	r4, #0
 8023d7c:	9444      	str	r4, [sp, #272]	@ 0x110
 8023d7e:	9445      	str	r4, [sp, #276]	@ 0x114
 8023d80:	9446      	str	r4, [sp, #280]	@ 0x118
 8023d82:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8023d84:	f101 0a10 	add.w	sl, r1, #16
 8023d88:	2314      	movs	r3, #20
 8023d8a:	aa43      	add	r2, sp, #268	@ 0x10c
 8023d8c:	4964      	ldr	r1, [pc, #400]	@ (8023f20 <mg_http_upload+0x1b8>)
 8023d8e:	4650      	mov	r0, sl
 8023d90:	f7fe faf1 	bl	8022376 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8023d94:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 8023d98:	2380      	movs	r3, #128	@ 0x80
 8023d9a:	464a      	mov	r2, r9
 8023d9c:	4961      	ldr	r1, [pc, #388]	@ (8023f24 <mg_http_upload+0x1bc>)
 8023d9e:	4650      	mov	r0, sl
 8023da0:	f7fe fae9 	bl	8022376 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8023da4:	4622      	mov	r2, r4
 8023da6:	4621      	mov	r1, r4
 8023da8:	a843      	add	r0, sp, #268	@ 0x10c
 8023daa:	f005 fa1f 	bl	80291ec <strtol>
 8023dae:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8023db0:	f8cd 9004 	str.w	r9, [sp, #4]
 8023db4:	232f      	movs	r3, #47	@ 0x2f
 8023db6:	9300      	str	r3, [sp, #0]
 8023db8:	4643      	mov	r3, r8
 8023dba:	4a5b      	ldr	r2, [pc, #364]	@ (8023f28 <mg_http_upload+0x1c0>)
 8023dbc:	2180      	movs	r1, #128	@ 0x80
 8023dbe:	a803      	add	r0, sp, #12
 8023dc0:	f7fc fe7a 	bl	8020ab8 <mg_snprintf>
  if (hm->body.len == 0) {
 8023dc4:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 8023dc8:	f1b8 0f00 	cmp.w	r8, #0
 8023dcc:	d047      	beq.n	8023e5e <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 8023dce:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8023dd2:	2b00      	cmp	r3, #0
 8023dd4:	d04c      	beq.n	8023e70 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8023dd6:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 8023dda:	a923      	add	r1, sp, #140	@ 0x8c
 8023ddc:	4648      	mov	r0, r9
 8023dde:	f7fd fc4b 	bl	8021678 <mg_str_s>
 8023de2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8023de6:	f7ff fa55 	bl	8023294 <mg_path_is_sane>
 8023dea:	2800      	cmp	r0, #0
 8023dec:	d04a      	beq.n	8023e84 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 8023dee:	2c00      	cmp	r4, #0
 8023df0:	db54      	blt.n	8023e9c <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8023df2:	44a0      	add	r8, r4
 8023df4:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 8023df6:	4598      	cmp	r8, r3
 8023df8:	d85a      	bhi.n	8023eb0 <mg_http_upload+0x148>
    size_t current_size = 0;
 8023dfa:	2300      	movs	r3, #0
 8023dfc:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8023dfe:	4b4b      	ldr	r3, [pc, #300]	@ (8023f2c <mg_http_upload+0x1c4>)
 8023e00:	681b      	ldr	r3, [r3, #0]
 8023e02:	2b02      	cmp	r3, #2
 8023e04:	dc61      	bgt.n	8023eca <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8023e06:	b914      	cbnz	r4, 8023e0e <mg_http_upload+0xa6>
 8023e08:	6a33      	ldr	r3, [r6, #32]
 8023e0a:	a803      	add	r0, sp, #12
 8023e0c:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8023e0e:	6833      	ldr	r3, [r6, #0]
 8023e10:	2200      	movs	r2, #0
 8023e12:	a902      	add	r1, sp, #8
 8023e14:	a803      	add	r0, sp, #12
 8023e16:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8023e18:	2c00      	cmp	r4, #0
 8023e1a:	dd02      	ble.n	8023e22 <mg_http_upload+0xba>
 8023e1c:	9b02      	ldr	r3, [sp, #8]
 8023e1e:	429c      	cmp	r4, r3
 8023e20:	d162      	bne.n	8023ee8 <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8023e22:	2202      	movs	r2, #2
 8023e24:	a903      	add	r1, sp, #12
 8023e26:	4630      	mov	r0, r6
 8023e28:	f7fc f8b7 	bl	801ff9a <mg_fs_open>
 8023e2c:	4680      	mov	r8, r0
 8023e2e:	2800      	cmp	r0, #0
 8023e30:	d066      	beq.n	8023f00 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8023e32:	6973      	ldr	r3, [r6, #20]
 8023e34:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8023e38:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 8023e3c:	6800      	ldr	r0, [r0, #0]
 8023e3e:	4798      	blx	r3
 8023e40:	4404      	add	r4, r0
      mg_fs_close(fd);
 8023e42:	4640      	mov	r0, r8
 8023e44:	f7fc f8c2 	bl	801ffcc <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 8023e48:	9400      	str	r4, [sp, #0]
 8023e4a:	4b39      	ldr	r3, [pc, #228]	@ (8023f30 <mg_http_upload+0x1c8>)
 8023e4c:	4a39      	ldr	r2, [pc, #228]	@ (8023f34 <mg_http_upload+0x1cc>)
 8023e4e:	21c8      	movs	r1, #200	@ 0xc8
 8023e50:	4638      	mov	r0, r7
 8023e52:	f7fd fb2f 	bl	80214b4 <mg_http_reply>
}
 8023e56:	4620      	mov	r0, r4
 8023e58:	b04a      	add	sp, #296	@ 0x128
 8023e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8023e5e:	2400      	movs	r4, #0
 8023e60:	9400      	str	r4, [sp, #0]
 8023e62:	4b33      	ldr	r3, [pc, #204]	@ (8023f30 <mg_http_upload+0x1c8>)
 8023e64:	4a33      	ldr	r2, [pc, #204]	@ (8023f34 <mg_http_upload+0x1cc>)
 8023e66:	21c8      	movs	r1, #200	@ 0xc8
 8023e68:	4638      	mov	r0, r7
 8023e6a:	f7fd fb23 	bl	80214b4 <mg_http_reply>
 8023e6e:	e7f2      	b.n	8023e56 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 8023e70:	4b31      	ldr	r3, [pc, #196]	@ (8023f38 <mg_http_upload+0x1d0>)
 8023e72:	4a32      	ldr	r2, [pc, #200]	@ (8023f3c <mg_http_upload+0x1d4>)
 8023e74:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023e78:	4638      	mov	r0, r7
 8023e7a:	f7fd fb1b 	bl	80214b4 <mg_http_reply>
    res = -1;
 8023e7e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8023e82:	e7e8      	b.n	8023e56 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8023e84:	ab23      	add	r3, sp, #140	@ 0x8c
 8023e86:	9300      	str	r3, [sp, #0]
 8023e88:	4b2d      	ldr	r3, [pc, #180]	@ (8023f40 <mg_http_upload+0x1d8>)
 8023e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8023f3c <mg_http_upload+0x1d4>)
 8023e8c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023e90:	4638      	mov	r0, r7
 8023e92:	f7fd fb0f 	bl	80214b4 <mg_http_reply>
    res = -2;
 8023e96:	f06f 0401 	mvn.w	r4, #1
 8023e9a:	e7dc      	b.n	8023e56 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 8023e9c:	4b29      	ldr	r3, [pc, #164]	@ (8023f44 <mg_http_upload+0x1dc>)
 8023e9e:	4a27      	ldr	r2, [pc, #156]	@ (8023f3c <mg_http_upload+0x1d4>)
 8023ea0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023ea4:	4638      	mov	r0, r7
 8023ea6:	f7fd fb05 	bl	80214b4 <mg_http_reply>
    res = -3;
 8023eaa:	f06f 0402 	mvn.w	r4, #2
 8023eae:	e7d2      	b.n	8023e56 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8023eb0:	9301      	str	r3, [sp, #4]
 8023eb2:	ab03      	add	r3, sp, #12
 8023eb4:	9300      	str	r3, [sp, #0]
 8023eb6:	4b24      	ldr	r3, [pc, #144]	@ (8023f48 <mg_http_upload+0x1e0>)
 8023eb8:	4a20      	ldr	r2, [pc, #128]	@ (8023f3c <mg_http_upload+0x1d4>)
 8023eba:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023ebe:	4638      	mov	r0, r7
 8023ec0:	f7fd faf8 	bl	80214b4 <mg_http_reply>
    res = -4;
 8023ec4:	f06f 0403 	mvn.w	r4, #3
 8023ec8:	e7c5      	b.n	8023e56 <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8023eca:	4b20      	ldr	r3, [pc, #128]	@ (8023f4c <mg_http_upload+0x1e4>)
 8023ecc:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8023ed0:	491f      	ldr	r1, [pc, #124]	@ (8023f50 <mg_http_upload+0x1e8>)
 8023ed2:	2003      	movs	r0, #3
 8023ed4:	f7ff fa08 	bl	80232e8 <mg_log_prefix>
 8023ed8:	4623      	mov	r3, r4
 8023eda:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8023ede:	a903      	add	r1, sp, #12
 8023ee0:	481c      	ldr	r0, [pc, #112]	@ (8023f54 <mg_http_upload+0x1ec>)
 8023ee2:	f7fd fa93 	bl	802140c <mg_log>
 8023ee6:	e78e      	b.n	8023e06 <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8023ee8:	ab03      	add	r3, sp, #12
 8023eea:	9300      	str	r3, [sp, #0]
 8023eec:	4b1a      	ldr	r3, [pc, #104]	@ (8023f58 <mg_http_upload+0x1f0>)
 8023eee:	4a13      	ldr	r2, [pc, #76]	@ (8023f3c <mg_http_upload+0x1d4>)
 8023ef0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023ef4:	4638      	mov	r0, r7
 8023ef6:	f7fd fadd 	bl	80214b4 <mg_http_reply>
      res = -5;
 8023efa:	f06f 0404 	mvn.w	r4, #4
 8023efe:	e7aa      	b.n	8023e56 <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8023f00:	f006 fff2 	bl	802aee8 <__errno>
 8023f04:	6803      	ldr	r3, [r0, #0]
 8023f06:	9301      	str	r3, [sp, #4]
 8023f08:	ab03      	add	r3, sp, #12
 8023f0a:	9300      	str	r3, [sp, #0]
 8023f0c:	4b13      	ldr	r3, [pc, #76]	@ (8023f5c <mg_http_upload+0x1f4>)
 8023f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8023f3c <mg_http_upload+0x1d4>)
 8023f10:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023f14:	4638      	mov	r0, r7
 8023f16:	f7fd facd 	bl	80214b4 <mg_http_reply>
      res = -6;
 8023f1a:	f06f 0405 	mvn.w	r4, #5
 8023f1e:	e79a      	b.n	8023e56 <mg_http_upload+0xee>
 8023f20:	08037414 	.word	0x08037414
 8023f24:	0803743c 	.word	0x0803743c
 8023f28:	08037380 	.word	0x08037380
 8023f2c:	200000a8 	.word	0x200000a8
 8023f30:	0803741c 	.word	0x0803741c
 8023f34:	080335a0 	.word	0x080335a0
 8023f38:	08037420 	.word	0x08037420
 8023f3c:	08033984 	.word	0x08033984
 8023f40:	08037430 	.word	0x08037430
 8023f44:	08037444 	.word	0x08037444
 8023f48:	08037454 	.word	0x08037454
 8023f4c:	08037bf0 	.word	0x08037bf0
 8023f50:	080371d4 	.word	0x080371d4
 8023f54:	08037470 	.word	0x08037470
 8023f58:	08037488 	.word	0x08037488
 8023f5c:	0803749c 	.word	0x0803749c

08023f60 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8023f60:	b570      	push	{r4, r5, r6, lr}
 8023f62:	b082      	sub	sp, #8
 8023f64:	4604      	mov	r4, r0
 8023f66:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 8023f68:	68e1      	ldr	r1, [r4, #12]
 8023f6a:	f7fa febf 	bl	801ecec <roundup>
  if (new_size == 0) {
 8023f6e:	b130      	cbz	r0, 8023f7e <mg_iobuf_resize+0x1e>
 8023f70:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 8023f72:	6863      	ldr	r3, [r4, #4]
 8023f74:	4283      	cmp	r3, r0
 8023f76:	d10f      	bne.n	8023f98 <mg_iobuf_resize+0x38>
  int ok = 1;
 8023f78:	2001      	movs	r0, #1
}
 8023f7a:	b002      	add	sp, #8
 8023f7c:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 8023f7e:	6861      	ldr	r1, [r4, #4]
 8023f80:	6820      	ldr	r0, [r4, #0]
 8023f82:	f7fe fdab 	bl	8022adc <mg_bzero>
    free(io->buf);
 8023f86:	6820      	ldr	r0, [r4, #0]
 8023f88:	f7f5 f928 	bl	80191dc <vPortFree>
    io->buf = NULL;
 8023f8c:	2300      	movs	r3, #0
 8023f8e:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 8023f90:	6063      	str	r3, [r4, #4]
 8023f92:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 8023f94:	2001      	movs	r0, #1
 8023f96:	e7f0      	b.n	8023f7a <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 8023f98:	4601      	mov	r1, r0
 8023f9a:	2001      	movs	r0, #1
 8023f9c:	f7fb ff3f 	bl	801fe1e <mg_calloc>
    if (p != NULL) {
 8023fa0:	4606      	mov	r6, r0
 8023fa2:	b198      	cbz	r0, 8023fcc <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 8023fa4:	68a2      	ldr	r2, [r4, #8]
 8023fa6:	42aa      	cmp	r2, r5
 8023fa8:	bf28      	it	cs
 8023faa:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8023fac:	b11a      	cbz	r2, 8023fb6 <mg_iobuf_resize+0x56>
 8023fae:	6821      	ldr	r1, [r4, #0]
 8023fb0:	b109      	cbz	r1, 8023fb6 <mg_iobuf_resize+0x56>
 8023fb2:	f005 fd7b 	bl	8029aac <memmove>
      mg_bzero(io->buf, io->size);
 8023fb6:	6861      	ldr	r1, [r4, #4]
 8023fb8:	6820      	ldr	r0, [r4, #0]
 8023fba:	f7fe fd8f 	bl	8022adc <mg_bzero>
      free(io->buf);
 8023fbe:	6820      	ldr	r0, [r4, #0]
 8023fc0:	f7f5 f90c 	bl	80191dc <vPortFree>
      io->buf = (unsigned char *) p;
 8023fc4:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 8023fc6:	6065      	str	r5, [r4, #4]
  int ok = 1;
 8023fc8:	2001      	movs	r0, #1
 8023fca:	e7d6      	b.n	8023f7a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8023fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8023ffc <mg_iobuf_resize+0x9c>)
 8023fce:	681b      	ldr	r3, [r3, #0]
 8023fd0:	2b00      	cmp	r3, #0
 8023fd2:	dc01      	bgt.n	8023fd8 <mg_iobuf_resize+0x78>
      ok = 0;
 8023fd4:	2000      	movs	r0, #0
  return ok;
 8023fd6:	e7d0      	b.n	8023f7a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8023fd8:	4b09      	ldr	r3, [pc, #36]	@ (8024000 <mg_iobuf_resize+0xa0>)
 8023fda:	f640 5244 	movw	r2, #3396	@ 0xd44
 8023fde:	4909      	ldr	r1, [pc, #36]	@ (8024004 <mg_iobuf_resize+0xa4>)
 8023fe0:	2001      	movs	r0, #1
 8023fe2:	f7ff f981 	bl	80232e8 <mg_log_prefix>
 8023fe6:	2600      	movs	r6, #0
 8023fe8:	9500      	str	r5, [sp, #0]
 8023fea:	9601      	str	r6, [sp, #4]
 8023fec:	6862      	ldr	r2, [r4, #4]
 8023fee:	4633      	mov	r3, r6
 8023ff0:	4805      	ldr	r0, [pc, #20]	@ (8024008 <mg_iobuf_resize+0xa8>)
 8023ff2:	f7fd fa0b 	bl	802140c <mg_log>
      ok = 0;
 8023ff6:	4630      	mov	r0, r6
 8023ff8:	e7bf      	b.n	8023f7a <mg_iobuf_resize+0x1a>
 8023ffa:	bf00      	nop
 8023ffc:	200000a8 	.word	0x200000a8
 8024000:	08037be0 	.word	0x08037be0
 8024004:	080371d4 	.word	0x080371d4
 8024008:	080374ac 	.word	0x080374ac

0802400c <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 802400c:	b538      	push	{r3, r4, r5, lr}
 802400e:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8024010:	2908      	cmp	r1, #8
 8024012:	d004      	beq.n	802401e <static_cb+0x12>
 8024014:	2902      	cmp	r1, #2
 8024016:	d002      	beq.n	802401e <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 8024018:	2909      	cmp	r1, #9
 802401a:	d02b      	beq.n	8024074 <static_cb+0x68>
}
 802401c:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 802401e:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8024022:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8024024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024028:	d31d      	bcc.n	8024066 <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 802402a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 802402c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802402e:	4299      	cmp	r1, r3
 8024030:	d2f4      	bcs.n	802401c <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8024032:	1a5b      	subs	r3, r3, r1
 8024034:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8024038:	429a      	cmp	r2, r3
 802403a:	d300      	bcc.n	802403e <static_cb+0x32>
 802403c:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 802403e:	686b      	ldr	r3, [r5, #4]
 8024040:	691b      	ldr	r3, [r3, #16]
 8024042:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8024044:	4401      	add	r1, r0
 8024046:	6828      	ldr	r0, [r5, #0]
 8024048:	4798      	blx	r3
    c->send.len += n;
 802404a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802404c:	4403      	add	r3, r0
 802404e:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 8024050:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8024054:	1a1b      	subs	r3, r3, r0
 8024056:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 802405a:	2800      	cmp	r0, #0
 802405c:	d1de      	bne.n	802401c <static_cb+0x10>
 802405e:	4620      	mov	r0, r4
 8024060:	f7fb ffc0 	bl	801ffe4 <restore_http_cb>
 8024064:	e7da      	b.n	802401c <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8024066:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802406a:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 802406e:	f7ff ff77 	bl	8023f60 <mg_iobuf_resize>
 8024072:	e7da      	b.n	802402a <static_cb+0x1e>
    restore_http_cb(c);
 8024074:	f7fb ffb6 	bl	801ffe4 <restore_http_cb>
  (void) ev_data;
 8024078:	e7d0      	b.n	802401c <static_cb+0x10>

0802407a <mg_iobuf_add>:
                    size_t len) {
 802407a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802407e:	4604      	mov	r4, r0
 8024080:	460f      	mov	r7, r1
 8024082:	4690      	mov	r8, r2
 8024084:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 8024086:	6880      	ldr	r0, [r0, #8]
 8024088:	68e1      	ldr	r1, [r4, #12]
 802408a:	4418      	add	r0, r3
 802408c:	f7fa fe2e 	bl	801ecec <roundup>
 8024090:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8024092:	4601      	mov	r1, r0
 8024094:	4620      	mov	r0, r4
 8024096:	f7ff ff63 	bl	8023f60 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 802409a:	6863      	ldr	r3, [r4, #4]
 802409c:	42b3      	cmp	r3, r6
 802409e:	d000      	beq.n	80240a2 <mg_iobuf_add+0x28>
 80240a0:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 80240a2:	68a2      	ldr	r2, [r4, #8]
 80240a4:	42ba      	cmp	r2, r7
 80240a6:	d812      	bhi.n	80240ce <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 80240a8:	f1b8 0f00 	cmp.w	r8, #0
 80240ac:	d005      	beq.n	80240ba <mg_iobuf_add+0x40>
 80240ae:	6820      	ldr	r0, [r4, #0]
 80240b0:	462a      	mov	r2, r5
 80240b2:	4641      	mov	r1, r8
 80240b4:	4438      	add	r0, r7
 80240b6:	f005 fcf9 	bl	8029aac <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 80240ba:	68a3      	ldr	r3, [r4, #8]
 80240bc:	42bb      	cmp	r3, r7
 80240be:	d200      	bcs.n	80240c2 <mg_iobuf_add+0x48>
 80240c0:	60a7      	str	r7, [r4, #8]
  io->len += len;
 80240c2:	68a3      	ldr	r3, [r4, #8]
 80240c4:	442b      	add	r3, r5
 80240c6:	60a3      	str	r3, [r4, #8]
}
 80240c8:	4628      	mov	r0, r5
 80240ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 80240ce:	6823      	ldr	r3, [r4, #0]
 80240d0:	19e8      	adds	r0, r5, r7
 80240d2:	1bd2      	subs	r2, r2, r7
 80240d4:	19d9      	adds	r1, r3, r7
 80240d6:	4418      	add	r0, r3
 80240d8:	f005 fce8 	bl	8029aac <memmove>
 80240dc:	e7e4      	b.n	80240a8 <mg_iobuf_add+0x2e>

080240de <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 80240de:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 80240e0:	2100      	movs	r1, #0
 80240e2:	f7ff ff3d 	bl	8023f60 <mg_iobuf_resize>
}
 80240e6:	bd08      	pop	{r3, pc}

080240e8 <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80240e8:	b538      	push	{r3, r4, r5, lr}
 80240ea:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 80240ec:	2201      	movs	r2, #1
 80240ee:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80240f0:	f7fb fea3 	bl	801fe3a <getpeer>
  if (c == NULL) {
 80240f4:	b368      	cbz	r0, 8024152 <rx_udp+0x6a>
 80240f6:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 80240f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80240fa:	881b      	ldrh	r3, [r3, #0]
 80240fc:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 80240fe:	69e3      	ldr	r3, [r4, #28]
 8024100:	68db      	ldr	r3, [r3, #12]
 8024102:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8024104:	6923      	ldr	r3, [r4, #16]
 8024106:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802410a:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 802410e:	895b      	ldrh	r3, [r3, #10]
 8024110:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8024114:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8024116:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 802411a:	d21b      	bcs.n	8024154 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802411c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802411e:	1ad2      	subs	r2, r2, r3
 8024120:	68e1      	ldr	r1, [r4, #12]
 8024122:	428a      	cmp	r2, r1
 8024124:	d204      	bcs.n	8024130 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8024126:	4419      	add	r1, r3
 8024128:	3038      	adds	r0, #56	@ 0x38
 802412a:	f7ff ff19 	bl	8023f60 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802412e:	b1a8      	cbz	r0, 802415c <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8024130:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8024132:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8024134:	68e2      	ldr	r2, [r4, #12]
 8024136:	68a1      	ldr	r1, [r4, #8]
 8024138:	4418      	add	r0, r3
 802413a:	f006 ff0d 	bl	802af58 <memcpy>
      c->recv.len += pkt->pay.len;
 802413e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8024140:	4622      	mov	r2, r4
 8024142:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 8024146:	440b      	add	r3, r1
 8024148:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802414a:	2107      	movs	r1, #7
 802414c:	4628      	mov	r0, r5
 802414e:	f7fb ff15 	bl	801ff7c <mg_call>
}
 8024152:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 8024154:	4904      	ldr	r1, [pc, #16]	@ (8024168 <rx_udp+0x80>)
 8024156:	f7ff f9af 	bl	80234b8 <mg_error>
 802415a:	e7fa      	b.n	8024152 <rx_udp+0x6a>
      mg_error(c, "oom");
 802415c:	4903      	ldr	r1, [pc, #12]	@ (802416c <rx_udp+0x84>)
 802415e:	4628      	mov	r0, r5
 8024160:	f7ff f9aa 	bl	80234b8 <mg_error>
 8024164:	e7f5      	b.n	8024152 <rx_udp+0x6a>
 8024166:	bf00      	nop
 8024168:	080374b8 	.word	0x080374b8
 802416c:	080374d4 	.word	0x080374d4

08024170 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8024170:	b538      	push	{r3, r4, r5, lr}
 8024172:	4605      	mov	r5, r0
 8024174:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8024176:	b122      	cbz	r2, 8024182 <mg_pfn_iobuf_private+0x12>
 8024178:	6889      	ldr	r1, [r1, #8]
 802417a:	3102      	adds	r1, #2
 802417c:	6863      	ldr	r3, [r4, #4]
 802417e:	4299      	cmp	r1, r3
 8024180:	d80d      	bhi.n	802419e <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 8024182:	68a3      	ldr	r3, [r4, #8]
 8024184:	1c99      	adds	r1, r3, #2
 8024186:	6862      	ldr	r2, [r4, #4]
 8024188:	4291      	cmp	r1, r2
 802418a:	d80c      	bhi.n	80241a6 <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 802418c:	6822      	ldr	r2, [r4, #0]
 802418e:	1c59      	adds	r1, r3, #1
 8024190:	60a1      	str	r1, [r4, #8]
 8024192:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 8024194:	6822      	ldr	r2, [r4, #0]
 8024196:	68a3      	ldr	r3, [r4, #8]
 8024198:	2100      	movs	r1, #0
 802419a:	54d1      	strb	r1, [r2, r3]
}
 802419c:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 802419e:	4620      	mov	r0, r4
 80241a0:	f7ff fede 	bl	8023f60 <mg_iobuf_resize>
 80241a4:	e7ed      	b.n	8024182 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 80241a6:	4293      	cmp	r3, r2
 80241a8:	d2f8      	bcs.n	802419c <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 80241aa:	6822      	ldr	r2, [r4, #0]
 80241ac:	1c59      	adds	r1, r3, #1
 80241ae:	60a1      	str	r1, [r4, #8]
 80241b0:	2100      	movs	r1, #0
 80241b2:	54d1      	strb	r1, [r2, r3]
}
 80241b4:	e7f2      	b.n	802419c <mg_pfn_iobuf_private+0x2c>

080241b6 <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 80241b6:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 80241b8:	2201      	movs	r2, #1
 80241ba:	f7ff ffd9 	bl	8024170 <mg_pfn_iobuf_private>
}
 80241be:	bd08      	pop	{r3, pc}

080241c0 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 80241c0:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 80241c2:	2200      	movs	r2, #0
 80241c4:	f7ff ffd4 	bl	8024170 <mg_pfn_iobuf_private>
}
 80241c8:	bd08      	pop	{r3, pc}
	...

080241cc <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 80241cc:	b510      	push	{r4, lr}
 80241ce:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 80241d0:	f7fb fe73 	bl	801feba <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80241d4:	6862      	ldr	r2, [r4, #4]
 80241d6:	e000      	b.n	80241da <mg_close_conn+0xe>
 80241d8:	461a      	mov	r2, r3
 80241da:	6813      	ldr	r3, [r2, #0]
 80241dc:	42a3      	cmp	r3, r4
 80241de:	d1fb      	bne.n	80241d8 <mg_close_conn+0xc>
 80241e0:	6823      	ldr	r3, [r4, #0]
 80241e2:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80241e4:	6863      	ldr	r3, [r4, #4]
 80241e6:	689a      	ldr	r2, [r3, #8]
 80241e8:	42a2      	cmp	r2, r4
 80241ea:	d020      	beq.n	802422e <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80241ec:	6863      	ldr	r3, [r4, #4]
 80241ee:	691a      	ldr	r2, [r3, #16]
 80241f0:	42a2      	cmp	r2, r4
 80241f2:	d01f      	beq.n	8024234 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 80241f4:	2200      	movs	r2, #0
 80241f6:	2109      	movs	r1, #9
 80241f8:	4620      	mov	r0, r4
 80241fa:	f7fb febf 	bl	801ff7c <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 80241fe:	4b15      	ldr	r3, [pc, #84]	@ (8024254 <mg_close_conn+0x88>)
 8024200:	681b      	ldr	r3, [r3, #0]
 8024202:	2b02      	cmp	r3, #2
 8024204:	dc19      	bgt.n	802423a <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 8024206:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 802420a:	f7ff ff68 	bl	80240de <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 802420e:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8024212:	f7ff ff64 	bl	80240de <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8024216:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802421a:	f7ff ff60 	bl	80240de <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 802421e:	21b0      	movs	r1, #176	@ 0xb0
 8024220:	4620      	mov	r0, r4
 8024222:	f7fe fc5b 	bl	8022adc <mg_bzero>
  free(c);
 8024226:	4620      	mov	r0, r4
 8024228:	f7f4 ffd8 	bl	80191dc <vPortFree>
}
 802422c:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 802422e:	2200      	movs	r2, #0
 8024230:	609a      	str	r2, [r3, #8]
 8024232:	e7db      	b.n	80241ec <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8024234:	2200      	movs	r2, #0
 8024236:	611a      	str	r2, [r3, #16]
 8024238:	e7dc      	b.n	80241f4 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802423a:	4b07      	ldr	r3, [pc, #28]	@ (8024258 <mg_close_conn+0x8c>)
 802423c:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 8024240:	4906      	ldr	r1, [pc, #24]	@ (802425c <mg_close_conn+0x90>)
 8024242:	2003      	movs	r0, #3
 8024244:	f7ff f850 	bl	80232e8 <mg_log_prefix>
 8024248:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802424a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802424c:	4804      	ldr	r0, [pc, #16]	@ (8024260 <mg_close_conn+0x94>)
 802424e:	f7fd f8dd 	bl	802140c <mg_log>
 8024252:	e7d8      	b.n	8024206 <mg_close_conn+0x3a>
 8024254:	200000a8 	.word	0x200000a8
 8024258:	08037bbc 	.word	0x08037bbc
 802425c:	080371d4 	.word	0x080371d4
 8024260:	080374d8 	.word	0x080374d8

08024264 <close_conn>:
static void close_conn(struct mg_connection *c) {
 8024264:	b510      	push	{r4, lr}
 8024266:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8024268:	30d0      	adds	r0, #208	@ 0xd0
 802426a:	f7ff ff38 	bl	80240de <mg_iobuf_free>
  mg_close_conn(c);
 802426e:	4620      	mov	r0, r4
 8024270:	f7ff ffac 	bl	80241cc <mg_close_conn>
}
 8024274:	bd10      	pop	{r4, pc}
	...

08024278 <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 8024278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802427c:	4606      	mov	r6, r0
 802427e:	460d      	mov	r5, r1
 8024280:	4690      	mov	r8, r2
 8024282:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8024284:	f7fc fbec 	bl	8020a60 <mg_alloc_conn>
 8024288:	4604      	mov	r4, r0
 802428a:	2800      	cmp	r0, #0
 802428c:	d03f      	beq.n	802430e <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 802428e:	4629      	mov	r1, r5
 8024290:	f7fe fe5b 	bl	8022f4a <mg_open_listener>
 8024294:	2800      	cmp	r0, #0
 8024296:	d04d      	beq.n	8024334 <mg_listen+0xbc>
    c->is_listening = 1;
 8024298:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802429c:	f043 0301 	orr.w	r3, r3, #1
 80242a0:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 80242a4:	2204      	movs	r2, #4
 80242a6:	492f      	ldr	r1, [pc, #188]	@ (8024364 <mg_listen+0xec>)
 80242a8:	4628      	mov	r0, r5
 80242aa:	f005 fc4e 	bl	8029b4a <strncmp>
 80242ae:	fab0 f080 	clz	r0, r0
 80242b2:	0940      	lsrs	r0, r0, #5
 80242b4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80242b8:	f360 0300 	bfi	r3, r0, #0, #1
 80242bc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80242c0:	6833      	ldr	r3, [r6, #0]
 80242c2:	6023      	str	r3, [r4, #0]
 80242c4:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 80242c6:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 80242ca:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 80242cc:	2200      	movs	r2, #0
 80242ce:	2101      	movs	r1, #1
 80242d0:	4620      	mov	r0, r4
 80242d2:	f7fb fe53 	bl	801ff7c <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 80242d6:	4628      	mov	r0, r5
 80242d8:	f7fe fb52 	bl	8022980 <mg_url_is_ssl>
 80242dc:	b128      	cbz	r0, 80242ea <mg_listen+0x72>
 80242de:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80242e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80242e6:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 80242ea:	4b1f      	ldr	r3, [pc, #124]	@ (8024368 <mg_listen+0xf0>)
 80242ec:	681b      	ldr	r3, [r3, #0]
 80242ee:	2b02      	cmp	r3, #2
 80242f0:	dd11      	ble.n	8024316 <mg_listen+0x9e>
 80242f2:	4b1e      	ldr	r3, [pc, #120]	@ (802436c <mg_listen+0xf4>)
 80242f4:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 80242f8:	491d      	ldr	r1, [pc, #116]	@ (8024370 <mg_listen+0xf8>)
 80242fa:	2003      	movs	r0, #3
 80242fc:	f7fe fff4 	bl	80232e8 <mg_log_prefix>
 8024300:	462b      	mov	r3, r5
 8024302:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8024304:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024306:	481b      	ldr	r0, [pc, #108]	@ (8024374 <mg_listen+0xfc>)
 8024308:	f7fd f880 	bl	802140c <mg_log>
  return c;
 802430c:	e003      	b.n	8024316 <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 802430e:	4b16      	ldr	r3, [pc, #88]	@ (8024368 <mg_listen+0xf0>)
 8024310:	681b      	ldr	r3, [r3, #0]
 8024312:	2b00      	cmp	r3, #0
 8024314:	dc02      	bgt.n	802431c <mg_listen+0xa4>
}
 8024316:	4620      	mov	r0, r4
 8024318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 802431c:	4b13      	ldr	r3, [pc, #76]	@ (802436c <mg_listen+0xf4>)
 802431e:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 8024322:	4913      	ldr	r1, [pc, #76]	@ (8024370 <mg_listen+0xf8>)
 8024324:	2001      	movs	r0, #1
 8024326:	f7fe ffdf 	bl	80232e8 <mg_log_prefix>
 802432a:	4629      	mov	r1, r5
 802432c:	4812      	ldr	r0, [pc, #72]	@ (8024378 <mg_listen+0x100>)
 802432e:	f7fd f86d 	bl	802140c <mg_log>
 8024332:	e7f0      	b.n	8024316 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8024334:	4b0c      	ldr	r3, [pc, #48]	@ (8024368 <mg_listen+0xf0>)
 8024336:	681b      	ldr	r3, [r3, #0]
 8024338:	2b00      	cmp	r3, #0
 802433a:	dc04      	bgt.n	8024346 <mg_listen+0xce>
    free(c);
 802433c:	4620      	mov	r0, r4
 802433e:	f7f4 ff4d 	bl	80191dc <vPortFree>
    c = NULL;
 8024342:	2400      	movs	r4, #0
 8024344:	e7e7      	b.n	8024316 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8024346:	4b09      	ldr	r3, [pc, #36]	@ (802436c <mg_listen+0xf4>)
 8024348:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 802434c:	4908      	ldr	r1, [pc, #32]	@ (8024370 <mg_listen+0xf8>)
 802434e:	2001      	movs	r0, #1
 8024350:	f7fe ffca 	bl	80232e8 <mg_log_prefix>
 8024354:	f006 fdc8 	bl	802aee8 <__errno>
 8024358:	6802      	ldr	r2, [r0, #0]
 802435a:	4629      	mov	r1, r5
 802435c:	4807      	ldr	r0, [pc, #28]	@ (802437c <mg_listen+0x104>)
 802435e:	f7fd f855 	bl	802140c <mg_log>
 8024362:	e7eb      	b.n	802433c <mg_listen+0xc4>
 8024364:	08037508 	.word	0x08037508
 8024368:	200000a8 	.word	0x200000a8
 802436c:	08037ba4 	.word	0x08037ba4
 8024370:	080371d4 	.word	0x080371d4
 8024374:	08037230 	.word	0x08037230
 8024378:	080374e8 	.word	0x080374e8
 802437c:	080374f0 	.word	0x080374f0

08024380 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 8024380:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8024382:	f7ff ff79 	bl	8024278 <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 8024386:	b110      	cbz	r0, 802438e <mg_http_listen+0xe>
 8024388:	4b01      	ldr	r3, [pc, #4]	@ (8024390 <mg_http_listen+0x10>)
 802438a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 802438e:	bd08      	pop	{r3, pc}
 8024390:	0802356d 	.word	0x0802356d

08024394 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 8024394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024398:	4605      	mov	r5, r0
 802439a:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802439c:	6843      	ldr	r3, [r0, #4]
 802439e:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 80243a0:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 80243a4:	f013 0301 	ands.w	r3, r3, #1
 80243a8:	d02c      	beq.n	8024404 <trim_len+0x70>
 80243aa:	2608      	movs	r6, #8
  size_t max_headers_len =
 80243ac:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 80243b0:	bb53      	cbnz	r3, 8024408 <trim_len+0x74>
 80243b2:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 80243b4:	eb08 0304 	add.w	r3, r8, r4
 80243b8:	69ba      	ldr	r2, [r7, #24]
 80243ba:	4293      	cmp	r3, r2
 80243bc:	d901      	bls.n	80243c2 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 80243be:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 80243c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80243c6:	42b3      	cmp	r3, r6
 80243c8:	d205      	bcs.n	80243d6 <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80243ca:	4b1c      	ldr	r3, [pc, #112]	@ (802443c <trim_len+0xa8>)
 80243cc:	681b      	ldr	r3, [r3, #0]
 80243ce:	2b00      	cmp	r3, #0
 80243d0:	dc1c      	bgt.n	802440c <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 80243d2:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 80243d6:	eb04 0308 	add.w	r3, r4, r8
 80243da:	3b0e      	subs	r3, #14
 80243dc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80243e0:	4293      	cmp	r3, r2
 80243e2:	d90c      	bls.n	80243fe <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 80243e4:	eba2 0208 	sub.w	r2, r2, r8
 80243e8:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 80243ec:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80243f0:	f013 0f01 	tst.w	r3, #1
 80243f4:	d003      	beq.n	80243fe <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 80243f6:	4b11      	ldr	r3, [pc, #68]	@ (802443c <trim_len+0xa8>)
 80243f8:	681b      	ldr	r3, [r3, #0]
 80243fa:	2b00      	cmp	r3, #0
 80243fc:	dc12      	bgt.n	8024424 <trim_len+0x90>
}
 80243fe:	4620      	mov	r0, r4
 8024400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8024404:	263c      	movs	r6, #60	@ 0x3c
 8024406:	e7d1      	b.n	80243ac <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8024408:	2644      	movs	r6, #68	@ 0x44
 802440a:	e7d3      	b.n	80243b4 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802440c:	4b0c      	ldr	r3, [pc, #48]	@ (8024440 <trim_len+0xac>)
 802440e:	f241 528c 	movw	r2, #5516	@ 0x158c
 8024412:	490c      	ldr	r1, [pc, #48]	@ (8024444 <trim_len+0xb0>)
 8024414:	2001      	movs	r0, #1
 8024416:	f7fe ff67 	bl	80232e8 <mg_log_prefix>
 802441a:	4631      	mov	r1, r6
 802441c:	480a      	ldr	r0, [pc, #40]	@ (8024448 <trim_len+0xb4>)
 802441e:	f7fc fff5 	bl	802140c <mg_log>
 8024422:	e7d6      	b.n	80243d2 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8024424:	4b06      	ldr	r3, [pc, #24]	@ (8024440 <trim_len+0xac>)
 8024426:	f241 5293 	movw	r2, #5523	@ 0x1593
 802442a:	4906      	ldr	r1, [pc, #24]	@ (8024444 <trim_len+0xb0>)
 802442c:	2001      	movs	r0, #1
 802442e:	f7fe ff5b 	bl	80232e8 <mg_log_prefix>
 8024432:	4806      	ldr	r0, [pc, #24]	@ (802444c <trim_len+0xb8>)
 8024434:	f7fc ffea 	bl	802140c <mg_log>
 8024438:	e7e1      	b.n	80243fe <trim_len+0x6a>
 802443a:	bf00      	nop
 802443c:	200000a8 	.word	0x200000a8
 8024440:	08037b98 	.word	0x08037b98
 8024444:	080371d4 	.word	0x080371d4
 8024448:	08037510 	.word	0x08037510
 802444c:	0803753c 	.word	0x0803753c

08024450 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8024450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024452:	b085      	sub	sp, #20
 8024454:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8024456:	6843      	ldr	r3, [r0, #4]
 8024458:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802445a:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 802445c:	68ab      	ldr	r3, [r5, #8]
 802445e:	b123      	cbz	r3, 802446a <mg_send+0x1a>
 8024460:	460e      	mov	r6, r1
 8024462:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8024466:	2b03      	cmp	r3, #3
 8024468:	d006      	beq.n	8024478 <mg_send+0x28>
    mg_error(c, "net down");
 802446a:	4913      	ldr	r1, [pc, #76]	@ (80244b8 <mg_send+0x68>)
 802446c:	4620      	mov	r0, r4
 802446e:	f7ff f823 	bl	80234b8 <mg_error>
  bool res = false;
 8024472:	2000      	movs	r0, #0
}
 8024474:	b005      	add	sp, #20
 8024476:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 8024478:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 802447c:	f013 0f01 	tst.w	r3, #1
 8024480:	d010      	beq.n	80244a4 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 8024482:	4611      	mov	r1, r2
 8024484:	f7ff ff86 	bl	8024394 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8024488:	68aa      	ldr	r2, [r5, #8]
 802448a:	9003      	str	r0, [sp, #12]
 802448c:	9602      	str	r6, [sp, #8]
 802448e:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8024490:	9301      	str	r3, [sp, #4]
 8024492:	9700      	str	r7, [sp, #0]
 8024494:	8b23      	ldrh	r3, [r4, #24]
 8024496:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 802449a:	4628      	mov	r0, r5
 802449c:	f7fe fcd3 	bl	8022e46 <tx_udp>
    res = true;
 80244a0:	2001      	movs	r0, #1
 80244a2:	e7e7      	b.n	8024474 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 80244a4:	4613      	mov	r3, r2
 80244a6:	460a      	mov	r2, r1
 80244a8:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80244aa:	3048      	adds	r0, #72	@ 0x48
 80244ac:	f7ff fde5 	bl	802407a <mg_iobuf_add>
 80244b0:	3800      	subs	r0, #0
 80244b2:	bf18      	it	ne
 80244b4:	2001      	movne	r0, #1
 80244b6:	e7dd      	b.n	8024474 <mg_send+0x24>
 80244b8:	08037568 	.word	0x08037568

080244bc <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 80244bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80244be:	b0c5      	sub	sp, #276	@ 0x114
 80244c0:	4606      	mov	r6, r0
 80244c2:	460d      	mov	r5, r1
 80244c4:	4614      	mov	r4, r2
 80244c6:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 80244c8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80244cc:	2100      	movs	r1, #0
 80244ce:	a801      	add	r0, sp, #4
 80244d0:	f005 fb06 	bl	8029ae0 <memset>
  pkt.header.txnid = mg_htons(txnid);
 80244d4:	4620      	mov	r0, r4
 80244d6:	f7fe fc01 	bl	8022cdc <mg_ntohs>
 80244da:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 80244de:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80244e2:	f7fe fbfb 	bl	8022cdc <mg_ntohs>
 80244e6:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 80244ea:	2001      	movs	r0, #1
 80244ec:	f7fe fbf6 	bl	8022cdc <mg_ntohs>
 80244f0:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80244f4:	f04f 0c00 	mov.w	ip, #0
 80244f8:	4664      	mov	r4, ip
 80244fa:	e015      	b.n	8024528 <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 80244fc:	eba4 020c 	sub.w	r2, r4, ip
 8024500:	ab01      	add	r3, sp, #4
 8024502:	4463      	add	r3, ip
 8024504:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8024506:	f10c 0309 	add.w	r3, ip, #9
 802450a:	aa01      	add	r2, sp, #4
 802450c:	18d0      	adds	r0, r2, r3
 802450e:	6829      	ldr	r1, [r5, #0]
 8024510:	eba4 020c 	sub.w	r2, r4, ip
 8024514:	4461      	add	r1, ip
 8024516:	3004      	adds	r0, #4
 8024518:	f006 fd1e 	bl	802af58 <memcpy>
      n = i + 1;
 802451c:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 8024520:	686a      	ldr	r2, [r5, #4]
 8024522:	42a2      	cmp	r2, r4
 8024524:	d90a      	bls.n	802453c <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8024526:	3401      	adds	r4, #1
 8024528:	2cfa      	cmp	r4, #250	@ 0xfa
 802452a:	d807      	bhi.n	802453c <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 802452c:	682b      	ldr	r3, [r5, #0]
 802452e:	5d1a      	ldrb	r2, [r3, r4]
 8024530:	2a2e      	cmp	r2, #46	@ 0x2e
 8024532:	d0e3      	beq.n	80244fc <mg_dns_send+0x40>
 8024534:	686b      	ldr	r3, [r5, #4]
 8024536:	42a3      	cmp	r3, r4
 8024538:	d8f2      	bhi.n	8024520 <mg_dns_send+0x64>
 802453a:	e7df      	b.n	80244fc <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 802453c:	f10c 0308 	add.w	r3, ip, #8
 8024540:	aa01      	add	r2, sp, #4
 8024542:	4413      	add	r3, r2
 8024544:	4a0a      	ldr	r2, [pc, #40]	@ (8024570 <mg_dns_send+0xb4>)
 8024546:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 802454a:	6058      	str	r0, [r3, #4]
 802454c:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 8024550:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8024552:	b12f      	cbz	r7, 8024560 <mg_dns_send+0xa4>
 8024554:	f10c 0302 	add.w	r3, ip, #2
 8024558:	aa01      	add	r2, sp, #4
 802455a:	4413      	add	r3, r2
 802455c:	221c      	movs	r2, #28
 802455e:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8024560:	f10c 0211 	add.w	r2, ip, #17
 8024564:	a901      	add	r1, sp, #4
 8024566:	4630      	mov	r0, r6
 8024568:	f7ff ff72 	bl	8024450 <mg_send>
}
 802456c:	b045      	add	sp, #276	@ 0x114
 802456e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024570:	08032e2c 	.word	0x08032e2c

08024574 <mg_mqtt_send_header>:
                         uint32_t len) {
 8024574:	b500      	push	{lr}
 8024576:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8024578:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 802457c:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8024580:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 8024584:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8024588:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 802458a:	2b7f      	cmp	r3, #127	@ 0x7f
 802458c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8024590:	d90e      	bls.n	80245b0 <mg_mqtt_send_header+0x3c>
 8024592:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8024596:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 802459a:	f10d 0105 	add.w	r1, sp, #5
 802459e:	428a      	cmp	r2, r1
 80245a0:	d3f0      	bcc.n	8024584 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 80245a2:	4669      	mov	r1, sp
 80245a4:	1a52      	subs	r2, r2, r1
 80245a6:	f7ff ff53 	bl	8024450 <mg_send>
}
 80245aa:	b003      	add	sp, #12
 80245ac:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 80245b0:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 80245b2:	e7f6      	b.n	80245a2 <mg_mqtt_send_header+0x2e>

080245b4 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 80245b4:	b500      	push	{lr}
 80245b6:	b083      	sub	sp, #12
 80245b8:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 80245ba:	2204      	movs	r2, #4
 80245bc:	eb0d 0102 	add.w	r1, sp, r2
 80245c0:	f7ff ff46 	bl	8024450 <mg_send>
}
 80245c4:	b003      	add	sp, #12
 80245c6:	f85d fb04 	ldr.w	pc, [sp], #4

080245ca <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 80245ca:	b500      	push	{lr}
 80245cc:	b083      	sub	sp, #12
 80245ce:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 80245d2:	2202      	movs	r2, #2
 80245d4:	f10d 0106 	add.w	r1, sp, #6
 80245d8:	f7ff ff3a 	bl	8024450 <mg_send>
}
 80245dc:	b003      	add	sp, #12
 80245de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080245e4 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 80245e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80245e8:	b083      	sub	sp, #12
 80245ea:	4606      	mov	r6, r0
 80245ec:	460f      	mov	r7, r1
 80245ee:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 80245f0:	4611      	mov	r1, r2
 80245f2:	4638      	mov	r0, r7
 80245f4:	f7fb f8c6 	bl	801f784 <get_properties_length>
 80245f8:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 80245fa:	2500      	movs	r5, #0
 80245fc:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 80245fe:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 8024600:	4668      	mov	r0, sp
 8024602:	f7fb f870 	bl	801f6e6 <encode_varint>
 8024606:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 8024608:	4669      	mov	r1, sp
 802460a:	4630      	mov	r0, r6
 802460c:	f7ff ff20 	bl	8024450 <mg_send>
  for (i = 0; i < nprops; i++) {
 8024610:	e018      	b.n	8024644 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8024612:	89a0      	ldrh	r0, [r4, #12]
 8024614:	f7fe fb62 	bl	8022cdc <mg_ntohs>
 8024618:	4601      	mov	r1, r0
 802461a:	4630      	mov	r0, r6
 802461c:	f7ff ffd5 	bl	80245ca <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 8024620:	68e2      	ldr	r2, [r4, #12]
 8024622:	68a1      	ldr	r1, [r4, #8]
 8024624:	4630      	mov	r0, r6
 8024626:	f7ff ff13 	bl	8024450 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 802462a:	8aa0      	ldrh	r0, [r4, #20]
 802462c:	f7fe fb56 	bl	8022cdc <mg_ntohs>
 8024630:	4601      	mov	r1, r0
 8024632:	4630      	mov	r0, r6
 8024634:	f7ff ffc9 	bl	80245ca <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8024638:	6962      	ldr	r2, [r4, #20]
 802463a:	6921      	ldr	r1, [r4, #16]
 802463c:	4630      	mov	r0, r6
 802463e:	f7ff ff07 	bl	8024450 <mg_send>
  for (i = 0; i < nprops; i++) {
 8024642:	3501      	adds	r5, #1
 8024644:	454d      	cmp	r5, r9
 8024646:	d25b      	bcs.n	8024700 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8024648:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 802464c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8024650:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8024654:	2201      	movs	r2, #1
 8024656:	4621      	mov	r1, r4
 8024658:	4630      	mov	r0, r6
 802465a:	f7ff fef9 	bl	8024450 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802465e:	f817 0008 	ldrb.w	r0, [r7, r8]
 8024662:	f7fb f87b 	bl	801f75c <mqtt_prop_type_by_id>
 8024666:	2806      	cmp	r0, #6
 8024668:	d8eb      	bhi.n	8024642 <mg_send_mqtt_properties+0x5e>
 802466a:	a301      	add	r3, pc, #4	@ (adr r3, 8024670 <mg_send_mqtt_properties+0x8c>)
 802466c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8024670:	0802468d 	.word	0x0802468d
 8024674:	080246b9 	.word	0x080246b9
 8024678:	08024613 	.word	0x08024613
 802467c:	080246d3 	.word	0x080246d3
 8024680:	080246ed 	.word	0x080246ed
 8024684:	080246a9 	.word	0x080246a9
 8024688:	08024699 	.word	0x08024699
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 802468c:	2201      	movs	r2, #1
 802468e:	1d21      	adds	r1, r4, #4
 8024690:	4630      	mov	r0, r6
 8024692:	f7ff fedd 	bl	8024450 <mg_send>
        break;
 8024696:	e7d4      	b.n	8024642 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8024698:	88a0      	ldrh	r0, [r4, #4]
 802469a:	f7fe fb1f 	bl	8022cdc <mg_ntohs>
 802469e:	4601      	mov	r1, r0
 80246a0:	4630      	mov	r0, r6
 80246a2:	f7ff ff92 	bl	80245ca <mg_send_u16>
        break;
 80246a6:	e7cc      	b.n	8024642 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 80246a8:	6860      	ldr	r0, [r4, #4]
 80246aa:	f7fe fa7f 	bl	8022bac <mg_ntohl>
 80246ae:	4601      	mov	r1, r0
 80246b0:	4630      	mov	r0, r6
 80246b2:	f7ff ff7f 	bl	80245b4 <mg_send_u32>
        break;
 80246b6:	e7c4      	b.n	8024642 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80246b8:	8aa0      	ldrh	r0, [r4, #20]
 80246ba:	f7fe fb0f 	bl	8022cdc <mg_ntohs>
 80246be:	4601      	mov	r1, r0
 80246c0:	4630      	mov	r0, r6
 80246c2:	f7ff ff82 	bl	80245ca <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80246c6:	6962      	ldr	r2, [r4, #20]
 80246c8:	6921      	ldr	r1, [r4, #16]
 80246ca:	4630      	mov	r0, r6
 80246cc:	f7ff fec0 	bl	8024450 <mg_send>
        break;
 80246d0:	e7b7      	b.n	8024642 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80246d2:	8aa0      	ldrh	r0, [r4, #20]
 80246d4:	f7fe fb02 	bl	8022cdc <mg_ntohs>
 80246d8:	4601      	mov	r1, r0
 80246da:	4630      	mov	r0, r6
 80246dc:	f7ff ff75 	bl	80245ca <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80246e0:	6962      	ldr	r2, [r4, #20]
 80246e2:	6921      	ldr	r1, [r4, #16]
 80246e4:	4630      	mov	r0, r6
 80246e6:	f7ff feb3 	bl	8024450 <mg_send>
        break;
 80246ea:	e7aa      	b.n	8024642 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 80246ec:	6861      	ldr	r1, [r4, #4]
 80246ee:	a801      	add	r0, sp, #4
 80246f0:	f7fa fff9 	bl	801f6e6 <encode_varint>
 80246f4:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 80246f6:	a901      	add	r1, sp, #4
 80246f8:	4630      	mov	r0, r6
 80246fa:	f7ff fea9 	bl	8024450 <mg_send>
        break;
 80246fe:	e7a0      	b.n	8024642 <mg_send_mqtt_properties+0x5e>
}
 8024700:	b003      	add	sp, #12
 8024702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024706:	bf00      	nop

08024708 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8024708:	b5f0      	push	{r4, r5, r6, r7, lr}
 802470a:	b08b      	sub	sp, #44	@ 0x2c
 802470c:	4605      	mov	r5, r0
 802470e:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 8024710:	ab02      	add	r3, sp, #8
 8024712:	f101 0210 	add.w	r2, r1, #16
 8024716:	e892 0003 	ldmia.w	r2, {r0, r1}
 802471a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 802471e:	2300      	movs	r3, #0
 8024720:	f88d 3000 	strb.w	r3, [sp]
 8024724:	2204      	movs	r2, #4
 8024726:	f88d 2001 	strb.w	r2, [sp, #1]
 802472a:	224d      	movs	r2, #77	@ 0x4d
 802472c:	f88d 2002 	strb.w	r2, [sp, #2]
 8024730:	2251      	movs	r2, #81	@ 0x51
 8024732:	f88d 2003 	strb.w	r2, [sp, #3]
 8024736:	2254      	movs	r2, #84	@ 0x54
 8024738:	f88d 2004 	strb.w	r2, [sp, #4]
 802473c:	f88d 2005 	strb.w	r2, [sp, #5]
 8024740:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8024744:	f88d 2006 	strb.w	r2, [sp, #6]
 8024748:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 802474c:	2900      	cmp	r1, #0
 802474e:	f000 809f 	beq.w	8024890 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8024752:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8024756:	b913      	cbnz	r3, 802475e <mg_mqtt_login+0x56>
 8024758:	2304      	movs	r3, #4
 802475a:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 802475e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8024762:	2b05      	cmp	r3, #5
 8024764:	bf14      	ite	ne
 8024766:	2300      	movne	r3, #0
 8024768:	2301      	moveq	r3, #1
 802476a:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 802476e:	f363 0282 	bfi	r2, r3, #2, #1
 8024772:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8024776:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 802477a:	00d2      	lsls	r2, r2, #3
 802477c:	f002 0218 	and.w	r2, r2, #24
 8024780:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 8024784:	6863      	ldr	r3, [r4, #4]
 8024786:	2b00      	cmp	r3, #0
 8024788:	f000 808e 	beq.w	80248a8 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 802478c:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 802478e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8024792:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 8024796:	68e2      	ldr	r2, [r4, #12]
 8024798:	b13a      	cbz	r2, 80247aa <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 802479a:	441a      	add	r2, r3
 802479c:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 802479e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80247a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80247a6:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 80247aa:	69e2      	ldr	r2, [r4, #28]
 80247ac:	b14a      	cbz	r2, 80247c2 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 80247ae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80247b0:	440a      	add	r2, r1
 80247b2:	441a      	add	r2, r3
 80247b4:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 80247b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80247ba:	f042 0204 	orr.w	r2, r2, #4
 80247be:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 80247c2:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 80247c6:	b90a      	cbnz	r2, 80247cc <mg_mqtt_login+0xc4>
 80247c8:	9a03      	ldr	r2, [sp, #12]
 80247ca:	b92a      	cbnz	r2, 80247d8 <mg_mqtt_login+0xd0>
 80247cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80247d0:	f042 0202 	orr.w	r2, r2, #2
 80247d4:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 80247d8:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 80247dc:	b12a      	cbz	r2, 80247ea <mg_mqtt_login+0xe2>
 80247de:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80247e2:	f042 0220 	orr.w	r2, r2, #32
 80247e6:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 80247ea:	9f03      	ldr	r7, [sp, #12]
 80247ec:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 80247ee:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80247f2:	f013 0f04 	tst.w	r3, #4
 80247f6:	d159      	bne.n	80248ac <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 80247f8:	4633      	mov	r3, r6
 80247fa:	2200      	movs	r2, #0
 80247fc:	2101      	movs	r1, #1
 80247fe:	4628      	mov	r0, r5
 8024800:	f7ff feb8 	bl	8024574 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8024804:	2208      	movs	r2, #8
 8024806:	4669      	mov	r1, sp
 8024808:	4628      	mov	r0, r5
 802480a:	f7ff fe21 	bl	8024450 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 802480e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8024810:	f7fe fa64 	bl	8022cdc <mg_ntohs>
 8024814:	4601      	mov	r1, r0
 8024816:	4628      	mov	r0, r5
 8024818:	f7ff fed7 	bl	80245ca <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802481c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8024820:	f013 0f04 	tst.w	r3, #4
 8024824:	d152      	bne.n	80248cc <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8024826:	b2b8      	uxth	r0, r7
 8024828:	f7fe fa58 	bl	8022cdc <mg_ntohs>
 802482c:	4601      	mov	r1, r0
 802482e:	4628      	mov	r0, r5
 8024830:	f7ff fecb 	bl	80245ca <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8024834:	463a      	mov	r2, r7
 8024836:	9902      	ldr	r1, [sp, #8]
 8024838:	4628      	mov	r0, r5
 802483a:	f7ff fe09 	bl	8024450 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 802483e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8024842:	f013 0f04 	tst.w	r3, #4
 8024846:	d01c      	beq.n	8024882 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 8024848:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 802484c:	f013 0f04 	tst.w	r3, #4
 8024850:	d142      	bne.n	80248d8 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8024852:	8ba0      	ldrh	r0, [r4, #28]
 8024854:	f7fe fa42 	bl	8022cdc <mg_ntohs>
 8024858:	4601      	mov	r1, r0
 802485a:	4628      	mov	r0, r5
 802485c:	f7ff feb5 	bl	80245ca <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8024860:	69e2      	ldr	r2, [r4, #28]
 8024862:	69a1      	ldr	r1, [r4, #24]
 8024864:	4628      	mov	r0, r5
 8024866:	f7ff fdf3 	bl	8024450 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 802486a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 802486c:	f7fe fa36 	bl	8022cdc <mg_ntohs>
 8024870:	4601      	mov	r1, r0
 8024872:	4628      	mov	r0, r5
 8024874:	f7ff fea9 	bl	80245ca <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8024878:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802487a:	6a21      	ldr	r1, [r4, #32]
 802487c:	4628      	mov	r0, r5
 802487e:	f7ff fde7 	bl	8024450 <mg_send>
  if (opts->user.len > 0) {
 8024882:	6860      	ldr	r0, [r4, #4]
 8024884:	bb70      	cbnz	r0, 80248e4 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 8024886:	68e0      	ldr	r0, [r4, #12]
 8024888:	2800      	cmp	r0, #0
 802488a:	d138      	bne.n	80248fe <mg_mqtt_login+0x1f6>
}
 802488c:	b00b      	add	sp, #44	@ 0x2c
 802488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 8024890:	2114      	movs	r1, #20
 8024892:	a804      	add	r0, sp, #16
 8024894:	f7fe f95e 	bl	8022b54 <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 8024898:	2300      	movs	r3, #0
 802489a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 802489e:	a904      	add	r1, sp, #16
 80248a0:	a802      	add	r0, sp, #8
 80248a2:	f7fc fee9 	bl	8021678 <mg_str_s>
 80248a6:	e754      	b.n	8024752 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 80248a8:	230c      	movs	r3, #12
 80248aa:	e774      	b.n	8024796 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 80248ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80248ae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80248b0:	f7fa ffac 	bl	801f80c <get_props_size>
 80248b4:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 80248b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80248ba:	f013 0f04 	tst.w	r3, #4
 80248be:	d09b      	beq.n	80247f8 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 80248c0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80248c2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80248c4:	f7fa ffa2 	bl	801f80c <get_props_size>
 80248c8:	4406      	add	r6, r0
 80248ca:	e795      	b.n	80247f8 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80248cc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80248ce:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80248d0:	4628      	mov	r0, r5
 80248d2:	f7ff fe87 	bl	80245e4 <mg_send_mqtt_properties>
 80248d6:	e7a6      	b.n	8024826 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 80248d8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80248da:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80248dc:	4628      	mov	r0, r5
 80248de:	f7ff fe81 	bl	80245e4 <mg_send_mqtt_properties>
 80248e2:	e7b6      	b.n	8024852 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 80248e4:	b280      	uxth	r0, r0
 80248e6:	f7fe f9f9 	bl	8022cdc <mg_ntohs>
 80248ea:	4601      	mov	r1, r0
 80248ec:	4628      	mov	r0, r5
 80248ee:	f7ff fe6c 	bl	80245ca <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 80248f2:	6862      	ldr	r2, [r4, #4]
 80248f4:	6821      	ldr	r1, [r4, #0]
 80248f6:	4628      	mov	r0, r5
 80248f8:	f7ff fdaa 	bl	8024450 <mg_send>
 80248fc:	e7c3      	b.n	8024886 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 80248fe:	b280      	uxth	r0, r0
 8024900:	f7fe f9ec 	bl	8022cdc <mg_ntohs>
 8024904:	4601      	mov	r1, r0
 8024906:	4628      	mov	r0, r5
 8024908:	f7ff fe5f 	bl	80245ca <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 802490c:	68e2      	ldr	r2, [r4, #12]
 802490e:	68a1      	ldr	r1, [r4, #8]
 8024910:	4628      	mov	r0, r5
 8024912:	f7ff fd9d 	bl	8024450 <mg_send>
}
 8024916:	e7b9      	b.n	802488c <mg_mqtt_login+0x184>

08024918 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8024918:	b530      	push	{r4, r5, lr}
 802491a:	b083      	sub	sp, #12
 802491c:	4604      	mov	r4, r0
 802491e:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 8024920:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8024924:	f003 0303 	and.w	r3, r3, #3
 8024928:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802492c:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8024930:	f013 0f04 	tst.w	r3, #4
 8024934:	d133      	bne.n	802499e <mg_mqtt_sub+0x86>
 8024936:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8024938:	69eb      	ldr	r3, [r5, #28]
 802493a:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 802493c:	3305      	adds	r3, #5
 802493e:	2202      	movs	r2, #2
 8024940:	2108      	movs	r1, #8
 8024942:	4620      	mov	r0, r4
 8024944:	f7ff fe16 	bl	8024574 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8024948:	6862      	ldr	r2, [r4, #4]
 802494a:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 802494c:	3301      	adds	r3, #1
 802494e:	b29b      	uxth	r3, r3
 8024950:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8024952:	b91b      	cbnz	r3, 802495c <mg_mqtt_sub+0x44>
 8024954:	6862      	ldr	r2, [r4, #4]
 8024956:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8024958:	3301      	adds	r3, #1
 802495a:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 802495c:	6863      	ldr	r3, [r4, #4]
 802495e:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8024960:	f7fe f9bc 	bl	8022cdc <mg_ntohs>
 8024964:	4601      	mov	r1, r0
 8024966:	4620      	mov	r0, r4
 8024968:	f7ff fe2f 	bl	80245ca <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802496c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024970:	f013 0f04 	tst.w	r3, #4
 8024974:	d118      	bne.n	80249a8 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8024976:	8ba8      	ldrh	r0, [r5, #28]
 8024978:	f7fe f9b0 	bl	8022cdc <mg_ntohs>
 802497c:	4601      	mov	r1, r0
 802497e:	4620      	mov	r0, r4
 8024980:	f7ff fe23 	bl	80245ca <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8024984:	69ea      	ldr	r2, [r5, #28]
 8024986:	69a9      	ldr	r1, [r5, #24]
 8024988:	4620      	mov	r0, r4
 802498a:	f7ff fd61 	bl	8024450 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 802498e:	2201      	movs	r2, #1
 8024990:	f10d 0107 	add.w	r1, sp, #7
 8024994:	4620      	mov	r0, r4
 8024996:	f7ff fd5b 	bl	8024450 <mg_send>
}
 802499a:	b003      	add	sp, #12
 802499c:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802499e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80249a0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80249a2:	f7fa ff33 	bl	801f80c <get_props_size>
 80249a6:	e7c7      	b.n	8024938 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80249a8:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80249aa:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 80249ac:	4620      	mov	r0, r4
 80249ae:	f7ff fe19 	bl	80245e4 <mg_send_mqtt_properties>
 80249b2:	e7e0      	b.n	8024976 <mg_mqtt_sub+0x5e>

080249b4 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80249b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249b8:	b083      	sub	sp, #12
 80249ba:	4605      	mov	r5, r0
 80249bc:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 80249be:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 80249c2:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80249c6:	005b      	lsls	r3, r3, #1
 80249c8:	f003 0306 	and.w	r3, r3, #6
 80249cc:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 80249d0:	2a00      	cmp	r2, #0
 80249d2:	d057      	beq.n	8024a84 <mg_mqtt_pub+0xd0>
 80249d4:	2201      	movs	r2, #1
 80249d6:	ea43 0a02 	orr.w	sl, r3, r2
 80249da:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 80249dc:	69e7      	ldr	r7, [r4, #28]
 80249de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80249e0:	441f      	add	r7, r3
 80249e2:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 80249e6:	4b3a      	ldr	r3, [pc, #232]	@ (8024ad0 <mg_mqtt_pub+0x11c>)
 80249e8:	681b      	ldr	r3, [r3, #0]
 80249ea:	2b02      	cmp	r3, #2
 80249ec:	dc4c      	bgt.n	8024a88 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 80249ee:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 80249f2:	f1bb 0f00 	cmp.w	fp, #0
 80249f6:	d001      	beq.n	80249fc <mg_mqtt_pub+0x48>
 80249f8:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 80249fc:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8024a00:	f013 0f04 	tst.w	r3, #4
 8024a04:	d152      	bne.n	8024aac <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8024a06:	f1bb 0f00 	cmp.w	fp, #0
 8024a0a:	d004      	beq.n	8024a16 <mg_mqtt_pub+0x62>
 8024a0c:	f1b8 0f00 	cmp.w	r8, #0
 8024a10:	d001      	beq.n	8024a16 <mg_mqtt_pub+0x62>
 8024a12:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8024a16:	464b      	mov	r3, r9
 8024a18:	4632      	mov	r2, r6
 8024a1a:	2103      	movs	r1, #3
 8024a1c:	4628      	mov	r0, r5
 8024a1e:	f7ff fda9 	bl	8024574 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8024a22:	8ba0      	ldrh	r0, [r4, #28]
 8024a24:	f7fe f95a 	bl	8022cdc <mg_ntohs>
 8024a28:	4601      	mov	r1, r0
 8024a2a:	4628      	mov	r0, r5
 8024a2c:	f7ff fdcd 	bl	80245ca <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8024a30:	69e2      	ldr	r2, [r4, #28]
 8024a32:	69a1      	ldr	r1, [r4, #24]
 8024a34:	4628      	mov	r0, r5
 8024a36:	f7ff fd0b 	bl	8024450 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 8024a3a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8024a3e:	b1b3      	cbz	r3, 8024a6e <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 8024a40:	f1b8 0f00 	cmp.w	r8, #0
 8024a44:	d10c      	bne.n	8024a60 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8024a46:	686a      	ldr	r2, [r5, #4]
 8024a48:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8024a4a:	3301      	adds	r3, #1
 8024a4c:	b29b      	uxth	r3, r3
 8024a4e:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8024a50:	b91b      	cbnz	r3, 8024a5a <mg_mqtt_pub+0xa6>
 8024a52:	686a      	ldr	r2, [r5, #4]
 8024a54:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8024a56:	3301      	adds	r3, #1
 8024a58:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 8024a5a:	686b      	ldr	r3, [r5, #4]
 8024a5c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8024a60:	4640      	mov	r0, r8
 8024a62:	f7fe f93b 	bl	8022cdc <mg_ntohs>
 8024a66:	4601      	mov	r1, r0
 8024a68:	4628      	mov	r0, r5
 8024a6a:	f7ff fdae 	bl	80245ca <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8024a6e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8024a72:	f013 0f04 	tst.w	r3, #4
 8024a76:	d11f      	bne.n	8024ab8 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8024a78:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8024a7a:	bb1a      	cbnz	r2, 8024ac4 <mg_mqtt_pub+0x110>
}
 8024a7c:	4640      	mov	r0, r8
 8024a7e:	b003      	add	sp, #12
 8024a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8024a84:	2200      	movs	r2, #0
 8024a86:	e7a6      	b.n	80249d6 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8024a88:	4b12      	ldr	r3, [pc, #72]	@ (8024ad4 <mg_mqtt_pub+0x120>)
 8024a8a:	f241 123c 	movw	r2, #4412	@ 0x113c
 8024a8e:	4912      	ldr	r1, [pc, #72]	@ (8024ad8 <mg_mqtt_pub+0x124>)
 8024a90:	2003      	movs	r0, #3
 8024a92:	f7fe fc29 	bl	80232e8 <mg_log_prefix>
 8024a96:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8024a98:	6a22      	ldr	r2, [r4, #32]
 8024a9a:	9201      	str	r2, [sp, #4]
 8024a9c:	9300      	str	r3, [sp, #0]
 8024a9e:	69a3      	ldr	r3, [r4, #24]
 8024aa0:	69e2      	ldr	r2, [r4, #28]
 8024aa2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8024aa4:	480d      	ldr	r0, [pc, #52]	@ (8024adc <mg_mqtt_pub+0x128>)
 8024aa6:	f7fc fcb1 	bl	802140c <mg_log>
 8024aaa:	e7a0      	b.n	80249ee <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 8024aac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024aae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8024ab0:	f7fa feac 	bl	801f80c <get_props_size>
 8024ab4:	4481      	add	r9, r0
 8024ab6:	e7a6      	b.n	8024a06 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8024ab8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8024aba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8024abc:	4628      	mov	r0, r5
 8024abe:	f7ff fd91 	bl	80245e4 <mg_send_mqtt_properties>
 8024ac2:	e7d9      	b.n	8024a78 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8024ac4:	6a21      	ldr	r1, [r4, #32]
 8024ac6:	4628      	mov	r0, r5
 8024ac8:	f7ff fcc2 	bl	8024450 <mg_send>
 8024acc:	e7d6      	b.n	8024a7c <mg_mqtt_pub+0xc8>
 8024ace:	bf00      	nop
 8024ad0:	200000a8 	.word	0x200000a8
 8024ad4:	08037bd4 	.word	0x08037bd4
 8024ad8:	080371d4 	.word	0x080371d4
 8024adc:	08037574 	.word	0x08037574

08024ae0 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8024ae0:	b530      	push	{r4, r5, lr}
 8024ae2:	b08f      	sub	sp, #60	@ 0x3c
 8024ae4:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 8024ae6:	2907      	cmp	r1, #7
 8024ae8:	f000 808f 	beq.w	8024c0a <mqtt_cb+0x12a>
}
 8024aec:	b00f      	add	sp, #60	@ 0x3c
 8024aee:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8024af0:	2204      	movs	r2, #4
 8024af2:	e091      	b.n	8024c18 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8024af4:	4b73      	ldr	r3, [pc, #460]	@ (8024cc4 <mqtt_cb+0x1e4>)
 8024af6:	681b      	ldr	r3, [r3, #0]
 8024af8:	2b00      	cmp	r3, #0
 8024afa:	dc06      	bgt.n	8024b0a <mqtt_cb+0x2a>
        c->is_closing = 1;
 8024afc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024b00:	f043 0320 	orr.w	r3, r3, #32
 8024b04:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 8024b08:	e7f0      	b.n	8024aec <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8024b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8024cc8 <mqtt_cb+0x1e8>)
 8024b0c:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 8024b10:	496e      	ldr	r1, [pc, #440]	@ (8024ccc <mqtt_cb+0x1ec>)
 8024b12:	2001      	movs	r0, #1
 8024b14:	f7fe fbe8 	bl	80232e8 <mg_log_prefix>
 8024b18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024b1a:	486d      	ldr	r0, [pc, #436]	@ (8024cd0 <mqtt_cb+0x1f0>)
 8024b1c:	f7fc fc76 	bl	802140c <mg_log>
 8024b20:	e7ec      	b.n	8024afc <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8024b22:	4b69      	ldr	r3, [pc, #420]	@ (8024cc8 <mqtt_cb+0x1e8>)
 8024b24:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 8024b28:	4968      	ldr	r1, [pc, #416]	@ (8024ccc <mqtt_cb+0x1ec>)
 8024b2a:	2004      	movs	r0, #4
 8024b2c:	f7fe fbdc 	bl	80232e8 <mg_log_prefix>
 8024b30:	9b06      	ldr	r3, [sp, #24]
 8024b32:	9301      	str	r3, [sp, #4]
 8024b34:	9b07      	ldr	r3, [sp, #28]
 8024b36:	9300      	str	r3, [sp, #0]
 8024b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b3a:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 8024b3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024b40:	4864      	ldr	r0, [pc, #400]	@ (8024cd4 <mqtt_cb+0x1f4>)
 8024b42:	f7fc fc63 	bl	802140c <mg_log>
 8024b46:	e077      	b.n	8024c38 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8024b48:	aa0b      	add	r2, sp, #44	@ 0x2c
 8024b4a:	2111      	movs	r1, #17
 8024b4c:	4620      	mov	r0, r4
 8024b4e:	f7fb fa15 	bl	801ff7c <mg_call>
            if (mm.ack == 0) {
 8024b52:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8024b56:	b97b      	cbnz	r3, 8024b78 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 8024b58:	4b5a      	ldr	r3, [pc, #360]	@ (8024cc4 <mqtt_cb+0x1e4>)
 8024b5a:	681b      	ldr	r3, [r3, #0]
 8024b5c:	2b02      	cmp	r3, #2
 8024b5e:	dd49      	ble.n	8024bf4 <mqtt_cb+0x114>
 8024b60:	4b59      	ldr	r3, [pc, #356]	@ (8024cc8 <mqtt_cb+0x1e8>)
 8024b62:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 8024b66:	4959      	ldr	r1, [pc, #356]	@ (8024ccc <mqtt_cb+0x1ec>)
 8024b68:	2003      	movs	r0, #3
 8024b6a:	f7fe fbbd 	bl	80232e8 <mg_log_prefix>
 8024b6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024b70:	4859      	ldr	r0, [pc, #356]	@ (8024cd8 <mqtt_cb+0x1f8>)
 8024b72:	f7fc fc4b 	bl	802140c <mg_log>
 8024b76:	e03d      	b.n	8024bf4 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8024b78:	4b52      	ldr	r3, [pc, #328]	@ (8024cc4 <mqtt_cb+0x1e4>)
 8024b7a:	681b      	ldr	r3, [r3, #0]
 8024b7c:	2b00      	cmp	r3, #0
 8024b7e:	dc06      	bgt.n	8024b8e <mqtt_cb+0xae>
              c->is_closing = 1;
 8024b80:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024b84:	f043 0320 	orr.w	r3, r3, #32
 8024b88:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8024b8c:	e032      	b.n	8024bf4 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8024b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8024cc8 <mqtt_cb+0x1e8>)
 8024b90:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 8024b94:	494d      	ldr	r1, [pc, #308]	@ (8024ccc <mqtt_cb+0x1ec>)
 8024b96:	2001      	movs	r0, #1
 8024b98:	f7fe fba6 	bl	80232e8 <mg_log_prefix>
 8024b9c:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 8024ba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024ba2:	484e      	ldr	r0, [pc, #312]	@ (8024cdc <mqtt_cb+0x1fc>)
 8024ba4:	f7fc fc32 	bl	802140c <mg_log>
 8024ba8:	e7ea      	b.n	8024b80 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 8024baa:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 8024bae:	b1e5      	cbz	r5, 8024bea <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 8024bb0:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8024bb4:	f7fe f892 	bl	8022cdc <mg_ntohs>
 8024bb8:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8024bbc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024bc0:	f013 0f04 	tst.w	r3, #4
 8024bc4:	d14a      	bne.n	8024c5c <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 8024bc6:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 8024bc8:	2d02      	cmp	r5, #2
 8024bca:	d049      	beq.n	8024c60 <mqtt_cb+0x180>
 8024bcc:	2104      	movs	r1, #4
 8024bce:	2200      	movs	r2, #0
 8024bd0:	4620      	mov	r0, r4
 8024bd2:	f7ff fccf 	bl	8024574 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 8024bd6:	2202      	movs	r2, #2
 8024bd8:	a903      	add	r1, sp, #12
 8024bda:	4620      	mov	r0, r4
 8024bdc:	f7ff fc38 	bl	8024450 <mg_send>
              if (c->is_mqtt5) {
 8024be0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024be4:	f013 0f04 	tst.w	r3, #4
 8024be8:	d13c      	bne.n	8024c64 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 8024bea:	aa04      	add	r2, sp, #16
 8024bec:	2110      	movs	r1, #16
 8024bee:	4620      	mov	r0, r4
 8024bf0:	f7fb f9c4 	bl	801ff7c <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8024bf4:	aa04      	add	r2, sp, #16
 8024bf6:	210f      	movs	r1, #15
 8024bf8:	4620      	mov	r0, r4
 8024bfa:	f7fb f9bf 	bl	801ff7c <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 8024bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024c00:	2100      	movs	r1, #0
 8024c02:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8024c06:	f7fd ff74 	bl	8022af2 <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8024c0a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024c0e:	f013 0f04 	tst.w	r3, #4
 8024c12:	f43f af6d 	beq.w	8024af0 <mqtt_cb+0x10>
 8024c16:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8024c18:	ab04      	add	r3, sp, #16
 8024c1a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8024c1c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8024c1e:	f7fb fe70 	bl	8020902 <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 8024c22:	2802      	cmp	r0, #2
 8024c24:	f43f af66 	beq.w	8024af4 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 8024c28:	2800      	cmp	r0, #0
 8024c2a:	f47f af5f 	bne.w	8024aec <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8024c2e:	4b25      	ldr	r3, [pc, #148]	@ (8024cc4 <mqtt_cb+0x1e4>)
 8024c30:	681b      	ldr	r3, [r3, #0]
 8024c32:	2b03      	cmp	r3, #3
 8024c34:	f73f af75 	bgt.w	8024b22 <mqtt_cb+0x42>
        switch (mm.cmd) {
 8024c38:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8024c3c:	3b02      	subs	r3, #2
 8024c3e:	2b04      	cmp	r3, #4
 8024c40:	d8d8      	bhi.n	8024bf4 <mqtt_cb+0x114>
 8024c42:	a201      	add	r2, pc, #4	@ (adr r2, 8024c48 <mqtt_cb+0x168>)
 8024c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024c48:	08024b49 	.word	0x08024b49
 8024c4c:	08024bab 	.word	0x08024bab
 8024c50:	08024bf5 	.word	0x08024bf5
 8024c54:	08024c79 	.word	0x08024c79
 8024c58:	08024c9f 	.word	0x08024c9f
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8024c5c:	2304      	movs	r3, #4
 8024c5e:	e7b3      	b.n	8024bc8 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 8024c60:	2105      	movs	r1, #5
 8024c62:	e7b4      	b.n	8024bce <mqtt_cb+0xee>
                uint16_t zero = 0;
 8024c64:	2300      	movs	r3, #0
 8024c66:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 8024c6a:	2202      	movs	r2, #2
 8024c6c:	f10d 010e 	add.w	r1, sp, #14
 8024c70:	4620      	mov	r0, r4
 8024c72:	f7ff fbed 	bl	8024450 <mg_send>
 8024c76:	e7b8      	b.n	8024bea <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 8024c78:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8024c7c:	f7fe f82e 	bl	8022cdc <mg_ntohs>
 8024c80:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8024c84:	2302      	movs	r3, #2
 8024c86:	461a      	mov	r2, r3
 8024c88:	2106      	movs	r1, #6
 8024c8a:	4620      	mov	r0, r4
 8024c8c:	f7ff fc72 	bl	8024574 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8024c90:	2202      	movs	r2, #2
 8024c92:	f10d 010e 	add.w	r1, sp, #14
 8024c96:	4620      	mov	r0, r4
 8024c98:	f7ff fbda 	bl	8024450 <mg_send>
            break;
 8024c9c:	e7aa      	b.n	8024bf4 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 8024c9e:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8024ca2:	f7fe f81b 	bl	8022cdc <mg_ntohs>
 8024ca6:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 8024caa:	2302      	movs	r3, #2
 8024cac:	2200      	movs	r2, #0
 8024cae:	2107      	movs	r1, #7
 8024cb0:	4620      	mov	r0, r4
 8024cb2:	f7ff fc5f 	bl	8024574 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8024cb6:	2202      	movs	r2, #2
 8024cb8:	f10d 010e 	add.w	r1, sp, #14
 8024cbc:	4620      	mov	r0, r4
 8024cbe:	f7ff fbc7 	bl	8024450 <mg_send>
            break;
 8024cc2:	e797      	b.n	8024bf4 <mqtt_cb+0x114>
 8024cc4:	200000a8 	.word	0x200000a8
 8024cc8:	08037bcc 	.word	0x08037bcc
 8024ccc:	080371d4 	.word	0x080371d4
 8024cd0:	0803758c 	.word	0x0803758c
 8024cd4:	080375a8 	.word	0x080375a8
 8024cd8:	080375c8 	.word	0x080375c8
 8024cdc:	080375d8 	.word	0x080375d8

08024ce0 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8024ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024ce4:	b088      	sub	sp, #32
 8024ce6:	4605      	mov	r5, r0
 8024ce8:	469a      	mov	sl, r3
 8024cea:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8024cec:	f107 0614 	add.w	r6, r7, #20
 8024cf0:	9601      	str	r6, [sp, #4]
 8024cf2:	9200      	str	r2, [sp, #0]
 8024cf4:	6883      	ldr	r3, [r0, #8]
 8024cf6:	2206      	movs	r2, #6
 8024cf8:	f7fe f810 	bl	8022d1c <tx_ip>
 8024cfc:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8024cfe:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 8024d02:	2200      	movs	r2, #0
 8024d04:	6142      	str	r2, [r0, #20]
 8024d06:	6182      	str	r2, [r0, #24]
 8024d08:	61c2      	str	r2, [r0, #28]
 8024d0a:	6202      	str	r2, [r0, #32]
 8024d0c:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8024d0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024d10:	b10b      	cbz	r3, 8024d16 <tx_tcp+0x36>
 8024d12:	2f00      	cmp	r7, #0
 8024d14:	d147      	bne.n	8024da6 <tx_tcp+0xc6>
  tcp->sport = sport;
 8024d16:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8024d1a:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 8024d1c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8024d20:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 8024d22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024d24:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 8024d26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d28:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 8024d2a:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 8024d2e:	f241 7070 	movw	r0, #6000	@ 0x1770
 8024d32:	f7fd ffd3 	bl	8022cdc <mg_ntohs>
 8024d36:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8024d38:	2350      	movs	r3, #80	@ 0x50
 8024d3a:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8024d3e:	b2bb      	uxth	r3, r7
 8024d40:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8024d42:	2000      	movs	r0, #0
 8024d44:	f88d 001c 	strb.w	r0, [sp, #28]
 8024d48:	7a62      	ldrb	r2, [r4, #9]
 8024d4a:	f88d 201d 	strb.w	r2, [sp, #29]
 8024d4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8024d52:	f88d 201e 	strb.w	r2, [sp, #30]
 8024d56:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 8024d5a:	b2b2      	uxth	r2, r6
 8024d5c:	4649      	mov	r1, r9
 8024d5e:	f7fa fdb5 	bl	801f8cc <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8024d62:	f104 060c 	add.w	r6, r4, #12
 8024d66:	2204      	movs	r2, #4
 8024d68:	4631      	mov	r1, r6
 8024d6a:	f7fa fdaf 	bl	801f8cc <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8024d6e:	f104 0810 	add.w	r8, r4, #16
 8024d72:	2204      	movs	r2, #4
 8024d74:	4641      	mov	r1, r8
 8024d76:	f7fa fda9 	bl	801f8cc <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8024d7a:	2204      	movs	r2, #4
 8024d7c:	a907      	add	r1, sp, #28
 8024d7e:	f7fa fda5 	bl	801f8cc <csumup>
  tcp->csum = csumfin(cs);
 8024d82:	f7fd ffb7 	bl	8022cf4 <csumfin>
 8024d86:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8024d88:	4b18      	ldr	r3, [pc, #96]	@ (8024dec <tx_tcp+0x10c>)
 8024d8a:	681b      	ldr	r3, [r3, #0]
 8024d8c:	2b03      	cmp	r3, #3
 8024d8e:	dc10      	bgt.n	8024db2 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8024d90:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8024d94:	696b      	ldr	r3, [r5, #20]
 8024d96:	1ac9      	subs	r1, r1, r3
 8024d98:	4439      	add	r1, r7
 8024d9a:	4628      	mov	r0, r5
 8024d9c:	f7fa fda7 	bl	801f8ee <ether_output>
}
 8024da0:	b008      	add	sp, #32
 8024da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8024da6:	463a      	mov	r2, r7
 8024da8:	4619      	mov	r1, r3
 8024daa:	3028      	adds	r0, #40	@ 0x28
 8024dac:	f004 fe7e 	bl	8029aac <memmove>
 8024db0:	e7b1      	b.n	8024d16 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8024db2:	4b0f      	ldr	r3, [pc, #60]	@ (8024df0 <tx_tcp+0x110>)
 8024db4:	f241 5254 	movw	r2, #5460	@ 0x1554
 8024db8:	490e      	ldr	r1, [pc, #56]	@ (8024df4 <tx_tcp+0x114>)
 8024dba:	2004      	movs	r0, #4
 8024dbc:	f7fe fa94 	bl	80232e8 <mg_log_prefix>
 8024dc0:	8aa0      	ldrh	r0, [r4, #20]
 8024dc2:	f7fd ff8b 	bl	8022cdc <mg_ntohs>
 8024dc6:	4681      	mov	r9, r0
 8024dc8:	8ae0      	ldrh	r0, [r4, #22]
 8024dca:	f7fd ff87 	bl	8022cdc <mg_ntohs>
 8024dce:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8024dd2:	4909      	ldr	r1, [pc, #36]	@ (8024df8 <tx_tcp+0x118>)
 8024dd4:	9704      	str	r7, [sp, #16]
 8024dd6:	9303      	str	r3, [sp, #12]
 8024dd8:	9002      	str	r0, [sp, #8]
 8024dda:	f8cd 8004 	str.w	r8, [sp, #4]
 8024dde:	9100      	str	r1, [sp, #0]
 8024de0:	464b      	mov	r3, r9
 8024de2:	4632      	mov	r2, r6
 8024de4:	4805      	ldr	r0, [pc, #20]	@ (8024dfc <tx_tcp+0x11c>)
 8024de6:	f7fc fb11 	bl	802140c <mg_log>
 8024dea:	e7d1      	b.n	8024d90 <tx_tcp+0xb0>
 8024dec:	200000a8 	.word	0x200000a8
 8024df0:	08037b90 	.word	0x08037b90
 8024df4:	080371d4 	.word	0x080371d4
 8024df8:	080213cd 	.word	0x080213cd
 8024dfc:	080375f8 	.word	0x080375f8

08024e00 <send_syn>:
static void send_syn(struct mg_connection *c) {
 8024e00:	b530      	push	{r4, r5, lr}
 8024e02:	b087      	sub	sp, #28
 8024e04:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8024e06:	8b05      	ldrh	r5, [r0, #24]
 8024e08:	4628      	mov	r0, r5
 8024e0a:	f7fd ff67 	bl	8022cdc <mg_ntohs>
 8024e0e:	f7fd fecd 	bl	8022bac <mg_ntohl>
 8024e12:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8024e14:	6863      	ldr	r3, [r4, #4]
 8024e16:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8024e18:	2300      	movs	r3, #0
 8024e1a:	9305      	str	r3, [sp, #20]
 8024e1c:	9304      	str	r3, [sp, #16]
 8024e1e:	9303      	str	r3, [sp, #12]
 8024e20:	9202      	str	r2, [sp, #8]
 8024e22:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8024e24:	9301      	str	r3, [sp, #4]
 8024e26:	9500      	str	r5, [sp, #0]
 8024e28:	2302      	movs	r3, #2
 8024e2a:	69e2      	ldr	r2, [r4, #28]
 8024e2c:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8024e30:	f7ff ff56 	bl	8024ce0 <tx_tcp>
}
 8024e34:	b007      	add	sp, #28
 8024e36:	bd30      	pop	{r4, r5, pc}

08024e38 <tx_tcp_pkt>:
                         size_t len) {
 8024e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e3c:	b087      	sub	sp, #28
 8024e3e:	4605      	mov	r5, r0
 8024e40:	4617      	mov	r7, r2
 8024e42:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8024e44:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8024e46:	7b5c      	ldrb	r4, [r3, #13]
 8024e48:	f014 0403 	ands.w	r4, r4, #3
 8024e4c:	bf18      	it	ne
 8024e4e:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8024e50:	690e      	ldr	r6, [r1, #16]
 8024e52:	3606      	adds	r6, #6
 8024e54:	69ca      	ldr	r2, [r1, #28]
 8024e56:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8024e5a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8024e5e:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8024e62:	6858      	ldr	r0, [r3, #4]
 8024e64:	f7fd fea2 	bl	8022bac <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8024e68:	4420      	add	r0, r4
 8024e6a:	f7fd fe9f 	bl	8022bac <mg_ntohl>
 8024e6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024e70:	9305      	str	r3, [sp, #20]
 8024e72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024e74:	9304      	str	r3, [sp, #16]
 8024e76:	9003      	str	r0, [sp, #12]
 8024e78:	f8cd 8008 	str.w	r8, [sp, #8]
 8024e7c:	f8cd b004 	str.w	fp, [sp, #4]
 8024e80:	f8cd a000 	str.w	sl, [sp]
 8024e84:	463b      	mov	r3, r7
 8024e86:	464a      	mov	r2, r9
 8024e88:	4631      	mov	r1, r6
 8024e8a:	4628      	mov	r0, r5
 8024e8c:	f7ff ff28 	bl	8024ce0 <tx_tcp>
}
 8024e90:	b007      	add	sp, #28
 8024e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024e98 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 8024e98:	b530      	push	{r4, r5, lr}
 8024e9a:	b083      	sub	sp, #12
 8024e9c:	4604      	mov	r4, r0
 8024e9e:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8024ea0:	6843      	ldr	r3, [r0, #4]
 8024ea2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8024ea4:	2901      	cmp	r1, #1
 8024ea6:	d01a      	beq.n	8024ede <settmout+0x46>
 8024ea8:	2903      	cmp	r1, #3
 8024eaa:	d01a      	beq.n	8024ee2 <settmout+0x4a>
 8024eac:	2904      	cmp	r1, #4
 8024eae:	d01b      	beq.n	8024ee8 <settmout+0x50>
 8024eb0:	2902      	cmp	r1, #2
 8024eb2:	d012      	beq.n	8024eda <settmout+0x42>
 8024eb4:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
  s->timer = ifp->now + n;
 8024eb8:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8024eba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8024ebc:	185b      	adds	r3, r3, r1
 8024ebe:	f142 0200 	adc.w	r2, r2, #0
 8024ec2:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8024ec6:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 8024eca:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8024ece:	4b10      	ldr	r3, [pc, #64]	@ (8024f10 <settmout+0x78>)
 8024ed0:	681b      	ldr	r3, [r3, #0]
 8024ed2:	2b03      	cmp	r3, #3
 8024ed4:	dc0b      	bgt.n	8024eee <settmout+0x56>
}
 8024ed6:	b003      	add	sp, #12
 8024ed8:	bd30      	pop	{r4, r5, pc}
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8024eda:	2364      	movs	r3, #100	@ 0x64
 8024edc:	e7ec      	b.n	8024eb8 <settmout+0x20>
 8024ede:	2396      	movs	r3, #150	@ 0x96
 8024ee0:	e7ea      	b.n	8024eb8 <settmout+0x20>
 8024ee2:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8024ee6:	e7e7      	b.n	8024eb8 <settmout+0x20>
 8024ee8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8024eec:	e7e4      	b.n	8024eb8 <settmout+0x20>
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8024eee:	4b09      	ldr	r3, [pc, #36]	@ (8024f14 <settmout+0x7c>)
 8024ef0:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 8024ef4:	4908      	ldr	r1, [pc, #32]	@ (8024f18 <settmout+0x80>)
 8024ef6:	2004      	movs	r0, #4
 8024ef8:	f7fe f9f6 	bl	80232e8 <mg_log_prefix>
 8024efc:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 8024f00:	e9cd 2300 	strd	r2, r3, [sp]
 8024f04:	462a      	mov	r2, r5
 8024f06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024f08:	4804      	ldr	r0, [pc, #16]	@ (8024f1c <settmout+0x84>)
 8024f0a:	f7fc fa7f 	bl	802140c <mg_log>
}
 8024f0e:	e7e2      	b.n	8024ed6 <settmout+0x3e>
 8024f10:	200000a8 	.word	0x200000a8
 8024f14:	08037b84 	.word	0x08037b84
 8024f18:	080371d4 	.word	0x080371d4
 8024f1c:	0803761c 	.word	0x0803761c

08024f20 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8024f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f24:	b089      	sub	sp, #36	@ 0x24
 8024f26:	4604      	mov	r4, r0
 8024f28:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8024f2a:	6843      	ldr	r3, [r0, #4]
 8024f2c:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 8024f2e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 8024f32:	4611      	mov	r1, r2
 8024f34:	f7ff fa2e 	bl	8024394 <trim_len>
 8024f38:	4605      	mov	r5, r0
  if (c->is_udp) {
 8024f3a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8024f3e:	f013 0f01 	tst.w	r3, #1
 8024f42:	d010      	beq.n	8024f66 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8024f44:	68ba      	ldr	r2, [r7, #8]
 8024f46:	9003      	str	r0, [sp, #12]
 8024f48:	9602      	str	r6, [sp, #8]
 8024f4a:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8024f4c:	9301      	str	r3, [sp, #4]
 8024f4e:	f8cd 8000 	str.w	r8, [sp]
 8024f52:	8b23      	ldrh	r3, [r4, #24]
 8024f54:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8024f58:	4638      	mov	r0, r7
 8024f5a:	f7fd ff74 	bl	8022e46 <tx_udp>
  return (long) len;
 8024f5e:	4628      	mov	r0, r5
}
 8024f60:	b009      	add	sp, #36	@ 0x24
 8024f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8024f66:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8024f6a:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8024f6e:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8024f72:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8024f76:	f7fd fe19 	bl	8022bac <mg_ntohl>
 8024f7a:	9007      	str	r0, [sp, #28]
 8024f7c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8024f80:	f7fd fe14 	bl	8022bac <mg_ntohl>
 8024f84:	9505      	str	r5, [sp, #20]
 8024f86:	9604      	str	r6, [sp, #16]
 8024f88:	9003      	str	r0, [sp, #12]
 8024f8a:	9b07      	ldr	r3, [sp, #28]
 8024f8c:	9302      	str	r3, [sp, #8]
 8024f8e:	f8cd b004 	str.w	fp, [sp, #4]
 8024f92:	f8cd a000 	str.w	sl, [sp]
 8024f96:	2318      	movs	r3, #24
 8024f98:	4642      	mov	r2, r8
 8024f9a:	4649      	mov	r1, r9
 8024f9c:	4638      	mov	r0, r7
 8024f9e:	f7ff fe9f 	bl	8024ce0 <tx_tcp>
    if (sent == 0) {
 8024fa2:	b180      	cbz	r0, 8024fc6 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 8024fa4:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8024fa8:	d010      	beq.n	8024fcc <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 8024faa:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8024fae:	442b      	add	r3, r5
 8024fb0:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8024fb4:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8024fb8:	2b01      	cmp	r3, #1
 8024fba:	d1d0      	bne.n	8024f5e <mg_io_send+0x3e>
 8024fbc:	2100      	movs	r1, #0
 8024fbe:	4620      	mov	r0, r4
 8024fc0:	f7ff ff6a 	bl	8024e98 <settmout>
 8024fc4:	e7cb      	b.n	8024f5e <mg_io_send+0x3e>
      return MG_IO_WAIT;
 8024fc6:	f06f 0001 	mvn.w	r0, #1
 8024fca:	e7c9      	b.n	8024f60 <mg_io_send+0x40>
      return MG_IO_ERR;
 8024fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024fd0:	e7c6      	b.n	8024f60 <mg_io_send+0x40>
	...

08024fd4 <write_conn>:
static void write_conn(struct mg_connection *c) {
 8024fd4:	b510      	push	{r4, lr}
 8024fd6:	b082      	sub	sp, #8
 8024fd8:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8024fda:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 8024fde:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8024fe2:	d00b      	beq.n	8024ffc <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8024fe4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8024fe6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8024fe8:	f7fd fcbc 	bl	8022964 <mg_tls_send>
 8024fec:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 8024fee:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8024ff2:	d008      	beq.n	8025006 <write_conn+0x32>
  } else if (len > 0) {
 8024ff4:	2800      	cmp	r0, #0
 8024ff6:	dc0b      	bgt.n	8025010 <write_conn+0x3c>
}
 8024ff8:	b002      	add	sp, #8
 8024ffa:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 8024ffc:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8024ffe:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8025000:	f7ff ff8e 	bl	8024f20 <mg_io_send>
 8025004:	e7f2      	b.n	8024fec <write_conn+0x18>
    mg_error(c, "tx err");
 8025006:	4908      	ldr	r1, [pc, #32]	@ (8025028 <write_conn+0x54>)
 8025008:	4620      	mov	r0, r4
 802500a:	f7fe fa55 	bl	80234b8 <mg_error>
 802500e:	e7f3      	b.n	8024ff8 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8025010:	4602      	mov	r2, r0
 8025012:	2100      	movs	r1, #0
 8025014:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8025018:	f7fd fd6b 	bl	8022af2 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 802501c:	aa01      	add	r2, sp, #4
 802501e:	2108      	movs	r1, #8
 8025020:	4620      	mov	r0, r4
 8025022:	f7fa ffab 	bl	801ff7c <mg_call>
}
 8025026:	e7e7      	b.n	8024ff8 <write_conn+0x24>
 8025028:	0803762c 	.word	0x0803762c

0802502c <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 802502c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8025030:	f240 1221 	movw	r2, #289	@ 0x121
 8025034:	421a      	tst	r2, r3
 8025036:	d000      	beq.n	802503a <init_closure+0xe>
 8025038:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 802503a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802503e:	b086      	sub	sp, #24
 8025040:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8025042:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 8025044:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8025046:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 802504a:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 802504e:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 8025052:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 8025056:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 802505a:	f7fd fda7 	bl	8022bac <mg_ntohl>
 802505e:	4605      	mov	r5, r0
 8025060:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8025064:	f7fd fda2 	bl	8022bac <mg_ntohl>
 8025068:	2300      	movs	r3, #0
 802506a:	9305      	str	r3, [sp, #20]
 802506c:	9304      	str	r3, [sp, #16]
 802506e:	9003      	str	r0, [sp, #12]
 8025070:	9502      	str	r5, [sp, #8]
 8025072:	f8cd a004 	str.w	sl, [sp, #4]
 8025076:	f8cd 9000 	str.w	r9, [sp]
 802507a:	2311      	movs	r3, #17
 802507c:	4642      	mov	r2, r8
 802507e:	4639      	mov	r1, r7
 8025080:	4630      	mov	r0, r6
 8025082:	f7ff fe2d 	bl	8024ce0 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8025086:	2104      	movs	r1, #4
 8025088:	4620      	mov	r0, r4
 802508a:	f7ff ff05 	bl	8024e98 <settmout>
}
 802508e:	b006      	add	sp, #24
 8025090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08025094 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 8025094:	b530      	push	{r4, r5, lr}
 8025096:	b085      	sub	sp, #20
 8025098:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802509a:	6843      	ldr	r3, [r0, #4]
 802509c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802509e:	69c3      	ldr	r3, [r0, #28]
 80250a0:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 80250a2:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80250a6:	f36f 03c3 	bfc	r3, #3, #1
 80250aa:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 80250ae:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 80250b2:	2b00      	cmp	r3, #0
 80250b4:	db03      	blt.n	80250be <mg_connect_resolved+0x2a>
 80250b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80250ba:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 80250be:	68ab      	ldr	r3, [r5, #8]
 80250c0:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 80250c2:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 80250c6:	1c43      	adds	r3, r0, #1
 80250c8:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 80250cc:	f7fd fe06 	bl	8022cdc <mg_ntohs>
 80250d0:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 80250d2:	4b51      	ldr	r3, [pc, #324]	@ (8025218 <mg_connect_resolved+0x184>)
 80250d4:	681b      	ldr	r3, [r3, #0]
 80250d6:	2b02      	cmp	r3, #2
 80250d8:	dc36      	bgt.n	8025148 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 80250da:	2200      	movs	r2, #0
 80250dc:	2103      	movs	r1, #3
 80250de:	4620      	mov	r0, r4
 80250e0:	f7fa ff4c 	bl	801ff7c <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 80250e4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80250e8:	f013 0301 	ands.w	r3, r3, #1
 80250ec:	d009      	beq.n	8025102 <mg_connect_resolved+0x6e>
 80250ee:	9903      	ldr	r1, [sp, #12]
 80250f0:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 80250f4:	d03b      	beq.n	802516e <mg_connect_resolved+0xda>
 80250f6:	68aa      	ldr	r2, [r5, #8]
 80250f8:	68e8      	ldr	r0, [r5, #12]
 80250fa:	ea62 0200 	orn	r2, r2, r0
 80250fe:	4291      	cmp	r1, r2
 8025100:	d035      	beq.n	802516e <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8025102:	68aa      	ldr	r2, [r5, #8]
 8025104:	2a00      	cmp	r2, #0
 8025106:	d046      	beq.n	8025196 <mg_connect_resolved+0x102>
 8025108:	9903      	ldr	r1, [sp, #12]
 802510a:	68e8      	ldr	r0, [r5, #12]
 802510c:	404a      	eors	r2, r1
 802510e:	4202      	tst	r2, r0
 8025110:	d141      	bne.n	8025196 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8025112:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8025114:	4291      	cmp	r1, r2
 8025116:	d03e      	beq.n	8025196 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8025118:	4b3f      	ldr	r3, [pc, #252]	@ (8025218 <mg_connect_resolved+0x184>)
 802511a:	681b      	ldr	r3, [r3, #0]
 802511c:	2b02      	cmp	r3, #2
 802511e:	dc2e      	bgt.n	802517e <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 8025120:	9903      	ldr	r1, [sp, #12]
 8025122:	4628      	mov	r0, r5
 8025124:	f7fd fed7 	bl	8022ed6 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8025128:	2102      	movs	r1, #2
 802512a:	4620      	mov	r0, r4
 802512c:	f7ff feb4 	bl	8024e98 <settmout>
    c->is_arplooking = 1;
 8025130:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8025134:	f043 0310 	orr.w	r3, r3, #16
 8025138:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 802513c:	b2db      	uxtb	r3, r3
 802513e:	f043 0320 	orr.w	r3, r3, #32
 8025142:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 8025146:	e018      	b.n	802517a <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8025148:	4b34      	ldr	r3, [pc, #208]	@ (802521c <mg_connect_resolved+0x188>)
 802514a:	f241 724f 	movw	r2, #5967	@ 0x174f
 802514e:	4934      	ldr	r1, [pc, #208]	@ (8025220 <mg_connect_resolved+0x18c>)
 8025150:	2003      	movs	r0, #3
 8025152:	f7fe f8c9 	bl	80232e8 <mg_log_prefix>
 8025156:	4a33      	ldr	r2, [pc, #204]	@ (8025224 <mg_connect_resolved+0x190>)
 8025158:	f104 031c 	add.w	r3, r4, #28
 802515c:	9301      	str	r3, [sp, #4]
 802515e:	9200      	str	r2, [sp, #0]
 8025160:	f104 0308 	add.w	r3, r4, #8
 8025164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025166:	4830      	ldr	r0, [pc, #192]	@ (8025228 <mg_connect_resolved+0x194>)
 8025168:	f7fc f950 	bl	802140c <mg_log>
 802516c:	e7b5      	b.n	80250da <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 802516e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025172:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8025176:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 802517a:	b005      	add	sp, #20
 802517c:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 802517e:	4b27      	ldr	r3, [pc, #156]	@ (802521c <mg_connect_resolved+0x188>)
 8025180:	f241 7258 	movw	r2, #5976	@ 0x1758
 8025184:	4926      	ldr	r1, [pc, #152]	@ (8025220 <mg_connect_resolved+0x18c>)
 8025186:	2003      	movs	r0, #3
 8025188:	f7fe f8ae 	bl	80232e8 <mg_log_prefix>
 802518c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802518e:	4827      	ldr	r0, [pc, #156]	@ (802522c <mg_connect_resolved+0x198>)
 8025190:	f7fc f93c 	bl	802140c <mg_log>
 8025194:	e7c4      	b.n	8025120 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8025196:	f89d 200c 	ldrb.w	r2, [sp, #12]
 802519a:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 802519e:	2ae0      	cmp	r2, #224	@ 0xe0
 80251a0:	d00e      	beq.n	80251c0 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 80251a2:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 80251a6:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 80251aa:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 80251ae:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 80251b2:	b31b      	cbz	r3, 80251fc <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 80251b4:	2200      	movs	r2, #0
 80251b6:	2104      	movs	r1, #4
 80251b8:	4620      	mov	r0, r4
 80251ba:	f7fa fedf 	bl	801ff7c <mg_call>
 80251be:	e7dc      	b.n	802517a <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 80251c0:	4b1b      	ldr	r3, [pc, #108]	@ (8025230 <mg_connect_resolved+0x19c>)
 80251c2:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80251c6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80251ca:	0c1b      	lsrs	r3, r3, #16
 80251cc:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 80251d0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80251d4:	b2db      	uxtb	r3, r3
 80251d6:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 80251da:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 80251de:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 80251e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80251e6:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 80251ea:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 80251ee:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 80251f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80251f6:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 80251fa:	e7be      	b.n	802517a <mg_connect_resolved+0xe6>
      send_syn(c);
 80251fc:	4620      	mov	r0, r4
 80251fe:	f7ff fdff 	bl	8024e00 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8025202:	2103      	movs	r1, #3
 8025204:	4620      	mov	r0, r4
 8025206:	f7ff fe47 	bl	8024e98 <settmout>
      c->is_connecting = 1;
 802520a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802520e:	f043 0320 	orr.w	r3, r3, #32
 8025212:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 8025216:	e7b0      	b.n	802517a <mg_connect_resolved+0xe6>
 8025218:	200000a8 	.word	0x200000a8
 802521c:	08037b60 	.word	0x08037b60
 8025220:	080371d4 	.word	0x080371d4
 8025224:	08023215 	.word	0x08023215
 8025228:	08037634 	.word	0x08037634
 802522c:	08037644 	.word	0x08037644
 8025230:	08032e2c 	.word	0x08032e2c

08025234 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8025234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025236:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8025238:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 802523a:	2902      	cmp	r1, #2
 802523c:	d009      	beq.n	8025252 <dns_cb+0x1e>
 802523e:	4604      	mov	r4, r0
 8025240:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 8025244:	2907      	cmp	r1, #7
 8025246:	d016      	beq.n	8025276 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 8025248:	2909      	cmp	r1, #9
 802524a:	f000 809a 	beq.w	8025382 <dns_cb+0x14e>
}
 802524e:	b049      	add	sp, #292	@ 0x124
 8025250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 8025252:	6816      	ldr	r6, [r2, #0]
 8025254:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 8025256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025258:	e000      	b.n	802525c <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 802525a:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 802525c:	2b00      	cmp	r3, #0
 802525e:	d0f6      	beq.n	802524e <dns_cb+0x1a>
      tmp = d->next;
 8025260:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8025262:	6899      	ldr	r1, [r3, #8]
 8025264:	68da      	ldr	r2, [r3, #12]
 8025266:	42b1      	cmp	r1, r6
 8025268:	41aa      	sbcs	r2, r5
 802526a:	d2f6      	bcs.n	802525a <dns_cb+0x26>
 802526c:	494c      	ldr	r1, [pc, #304]	@ (80253a0 <dns_cb+0x16c>)
 802526e:	6858      	ldr	r0, [r3, #4]
 8025270:	f7fe f922 	bl	80234b8 <mg_error>
 8025274:	e7f1      	b.n	802525a <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8025276:	aa02      	add	r2, sp, #8
 8025278:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802527a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802527c:	f7fe f870 	bl	8023360 <mg_dns_parse>
 8025280:	b9c8      	cbnz	r0, 80252b6 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 8025282:	4b48      	ldr	r3, [pc, #288]	@ (80253a4 <dns_cb+0x170>)
 8025284:	681b      	ldr	r3, [r3, #0]
 8025286:	2b00      	cmp	r3, #0
 8025288:	dc0a      	bgt.n	80252a0 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 802528a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802528c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802528e:	f7fb fa1f 	bl	80206d0 <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8025292:	4b44      	ldr	r3, [pc, #272]	@ (80253a4 <dns_cb+0x170>)
 8025294:	681b      	ldr	r3, [r3, #0]
 8025296:	2b00      	cmp	r3, #0
 8025298:	dc68      	bgt.n	802536c <dns_cb+0x138>
    c->recv.len = 0;
 802529a:	2300      	movs	r3, #0
 802529c:	6423      	str	r3, [r4, #64]	@ 0x40
 802529e:	e7d6      	b.n	802524e <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 80252a0:	4b41      	ldr	r3, [pc, #260]	@ (80253a8 <dns_cb+0x174>)
 80252a2:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 80252a6:	4941      	ldr	r1, [pc, #260]	@ (80253ac <dns_cb+0x178>)
 80252a8:	2001      	movs	r0, #1
 80252aa:	f7fe f81d 	bl	80232e8 <mg_log_prefix>
 80252ae:	4840      	ldr	r0, [pc, #256]	@ (80253b0 <dns_cb+0x17c>)
 80252b0:	f7fc f8ac 	bl	802140c <mg_log>
 80252b4:	e7e9      	b.n	802528a <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 80252b6:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 80252b8:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 80252ba:	e008      	b.n	80252ce <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 80252bc:	6868      	ldr	r0, [r5, #4]
 80252be:	f7ff fee9 	bl	8025094 <mg_connect_resolved>
        mg_dns_free(head, d);
 80252c2:	4629      	mov	r1, r5
 80252c4:	4630      	mov	r0, r6
 80252c6:	f7fa fcc0 	bl	801fc4a <mg_dns_free>
        resolved = 1;
 80252ca:	2101      	movs	r1, #1
 80252cc:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 80252ce:	2d00      	cmp	r5, #0
 80252d0:	d049      	beq.n	8025366 <dns_cb+0x132>
        tmp = d->next;
 80252d2:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 80252d4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80252d8:	8a2b      	ldrh	r3, [r5, #16]
 80252da:	429a      	cmp	r2, r3
 80252dc:	d1f6      	bne.n	80252cc <dns_cb+0x98>
        if (d->c->is_resolving) {
 80252de:	6868      	ldr	r0, [r5, #4]
 80252e0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80252e4:	f013 0f08 	tst.w	r3, #8
 80252e8:	d02c      	beq.n	8025344 <dns_cb+0x110>
          if (dm.resolved) {
 80252ea:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80252ee:	b323      	cbz	r3, 802533a <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 80252f0:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80252f2:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 80252f6:	686b      	ldr	r3, [r5, #4]
 80252f8:	f103 0c1c 	add.w	ip, r3, #28
 80252fc:	f10d 0e0c 	add.w	lr, sp, #12
 8025300:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8025304:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8025308:	f8de 3000 	ldr.w	r3, [lr]
 802530c:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 8025310:	4b24      	ldr	r3, [pc, #144]	@ (80253a4 <dns_cb+0x170>)
 8025312:	681b      	ldr	r3, [r3, #0]
 8025314:	2b02      	cmp	r3, #2
 8025316:	ddd1      	ble.n	80252bc <dns_cb+0x88>
 8025318:	4b23      	ldr	r3, [pc, #140]	@ (80253a8 <dns_cb+0x174>)
 802531a:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 802531e:	4923      	ldr	r1, [pc, #140]	@ (80253ac <dns_cb+0x178>)
 8025320:	2003      	movs	r0, #3
 8025322:	f7fd ffe1 	bl	80232e8 <mg_log_prefix>
 8025326:	686b      	ldr	r3, [r5, #4]
 8025328:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802532a:	331c      	adds	r3, #28
 802532c:	9300      	str	r3, [sp, #0]
 802532e:	4b21      	ldr	r3, [pc, #132]	@ (80253b4 <dns_cb+0x180>)
 8025330:	aa08      	add	r2, sp, #32
 8025332:	4821      	ldr	r0, [pc, #132]	@ (80253b8 <dns_cb+0x184>)
 8025334:	f7fc f86a 	bl	802140c <mg_log>
 8025338:	e7c0      	b.n	80252bc <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 802533a:	aa08      	add	r2, sp, #32
 802533c:	491f      	ldr	r1, [pc, #124]	@ (80253bc <dns_cb+0x188>)
 802533e:	f7fe f8bb 	bl	80234b8 <mg_error>
 8025342:	e7be      	b.n	80252c2 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 8025344:	4b17      	ldr	r3, [pc, #92]	@ (80253a4 <dns_cb+0x170>)
 8025346:	681b      	ldr	r3, [r3, #0]
 8025348:	2b00      	cmp	r3, #0
 802534a:	ddba      	ble.n	80252c2 <dns_cb+0x8e>
 802534c:	4b16      	ldr	r3, [pc, #88]	@ (80253a8 <dns_cb+0x174>)
 802534e:	f240 42da 	movw	r2, #1242	@ 0x4da
 8025352:	4916      	ldr	r1, [pc, #88]	@ (80253ac <dns_cb+0x178>)
 8025354:	2001      	movs	r0, #1
 8025356:	f7fd ffc7 	bl	80232e8 <mg_log_prefix>
 802535a:	686b      	ldr	r3, [r5, #4]
 802535c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802535e:	4818      	ldr	r0, [pc, #96]	@ (80253c0 <dns_cb+0x18c>)
 8025360:	f7fc f854 	bl	802140c <mg_log>
 8025364:	e7ad      	b.n	80252c2 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8025366:	2900      	cmp	r1, #0
 8025368:	d197      	bne.n	802529a <dns_cb+0x66>
 802536a:	e792      	b.n	8025292 <dns_cb+0x5e>
 802536c:	4b0e      	ldr	r3, [pc, #56]	@ (80253a8 <dns_cb+0x174>)
 802536e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8025372:	490e      	ldr	r1, [pc, #56]	@ (80253ac <dns_cb+0x178>)
 8025374:	2001      	movs	r0, #1
 8025376:	f7fd ffb7 	bl	80232e8 <mg_log_prefix>
 802537a:	4812      	ldr	r0, [pc, #72]	@ (80253c4 <dns_cb+0x190>)
 802537c:	f7fc f846 	bl	802140c <mg_log>
 8025380:	e78b      	b.n	802529a <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 8025382:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8025384:	2c00      	cmp	r4, #0
 8025386:	f43f af62 	beq.w	802524e <dns_cb+0x1a>
      tmp = d->next;
 802538a:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 802538c:	490e      	ldr	r1, [pc, #56]	@ (80253c8 <dns_cb+0x194>)
 802538e:	6860      	ldr	r0, [r4, #4]
 8025390:	f7fe f892 	bl	80234b8 <mg_error>
      mg_dns_free(head, d);
 8025394:	4621      	mov	r1, r4
 8025396:	4630      	mov	r0, r6
 8025398:	f7fa fc57 	bl	801fc4a <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 802539c:	462c      	mov	r4, r5
 802539e:	e7f1      	b.n	8025384 <dns_cb+0x150>
 80253a0:	08037658 	.word	0x08037658
 80253a4:	200000a8 	.word	0x200000a8
 80253a8:	08037c34 	.word	0x08037c34
 80253ac:	080371d4 	.word	0x080371d4
 80253b0:	08037664 	.word	0x08037664
 80253b4:	080231f9 	.word	0x080231f9
 80253b8:	08037680 	.word	0x08037680
 80253bc:	08037690 	.word	0x08037690
 80253c0:	080376a8 	.word	0x080376a8
 80253c4:	080376c0 	.word	0x080376c0
 80253c8:	080376d0 	.word	0x080376d0

080253cc <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 80253cc:	b510      	push	{r4, lr}
 80253ce:	b086      	sub	sp, #24
 80253d0:	4604      	mov	r4, r0
  uint8_t opts[] = {
 80253d2:	4a12      	ldr	r2, [pc, #72]	@ (802541c <tx_dhcp_discover+0x50>)
 80253d4:	ab04      	add	r3, sp, #16
 80253d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80253da:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 80253de:	2200      	movs	r2, #0
 80253e0:	9202      	str	r2, [sp, #8]
 80253e2:	2108      	movs	r1, #8
 80253e4:	9101      	str	r1, [sp, #4]
 80253e6:	9300      	str	r3, [sp, #0]
 80253e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80253ec:	490c      	ldr	r1, [pc, #48]	@ (8025420 <tx_dhcp_discover+0x54>)
 80253ee:	4620      	mov	r0, r4
 80253f0:	f7fd fdb6 	bl	8022f60 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 80253f4:	4b0b      	ldr	r3, [pc, #44]	@ (8025424 <tx_dhcp_discover+0x58>)
 80253f6:	681b      	ldr	r3, [r3, #0]
 80253f8:	2b02      	cmp	r3, #2
 80253fa:	dc01      	bgt.n	8025400 <tx_dhcp_discover+0x34>
}
 80253fc:	b006      	add	sp, #24
 80253fe:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8025400:	4b09      	ldr	r3, [pc, #36]	@ (8025428 <tx_dhcp_discover+0x5c>)
 8025402:	f241 4270 	movw	r2, #5232	@ 0x1470
 8025406:	4909      	ldr	r1, [pc, #36]	@ (802542c <tx_dhcp_discover+0x60>)
 8025408:	2003      	movs	r0, #3
 802540a:	f7fd ff6d 	bl	80232e8 <mg_log_prefix>
 802540e:	4622      	mov	r2, r4
 8025410:	4907      	ldr	r1, [pc, #28]	@ (8025430 <tx_dhcp_discover+0x64>)
 8025412:	4808      	ldr	r0, [pc, #32]	@ (8025434 <tx_dhcp_discover+0x68>)
 8025414:	f7fb fffa 	bl	802140c <mg_log>
}
 8025418:	e7f0      	b.n	80253fc <tx_dhcp_discover+0x30>
 802541a:	bf00      	nop
 802541c:	080376fc 	.word	0x080376fc
 8025420:	08037c5c 	.word	0x08037c5c
 8025424:	200000a8 	.word	0x200000a8
 8025428:	08037b30 	.word	0x08037b30
 802542c:	080371d4 	.word	0x080371d4
 8025430:	080213dd 	.word	0x080213dd
 8025434:	080376dc 	.word	0x080376dc

08025438 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 8025438:	b510      	push	{r4, lr}
 802543a:	b086      	sub	sp, #24
  uint8_t opts[] = {
 802543c:	4c0d      	ldr	r4, [pc, #52]	@ (8025474 <tx_dhcp_request_re+0x3c>)
 802543e:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8025440:	2401      	movs	r4, #1
 8025442:	9402      	str	r4, [sp, #8]
 8025444:	2404      	movs	r4, #4
 8025446:	9401      	str	r4, [sp, #4]
 8025448:	ac05      	add	r4, sp, #20
 802544a:	9400      	str	r4, [sp, #0]
 802544c:	f7fd fd88 	bl	8022f60 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8025450:	4b09      	ldr	r3, [pc, #36]	@ (8025478 <tx_dhcp_request_re+0x40>)
 8025452:	681b      	ldr	r3, [r3, #0]
 8025454:	2b02      	cmp	r3, #2
 8025456:	dc01      	bgt.n	802545c <tx_dhcp_request_re+0x24>
}
 8025458:	b006      	add	sp, #24
 802545a:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 802545c:	4b07      	ldr	r3, [pc, #28]	@ (802547c <tx_dhcp_request_re+0x44>)
 802545e:	f241 4266 	movw	r2, #5222	@ 0x1466
 8025462:	4907      	ldr	r1, [pc, #28]	@ (8025480 <tx_dhcp_request_re+0x48>)
 8025464:	2003      	movs	r0, #3
 8025466:	f7fd ff3f 	bl	80232e8 <mg_log_prefix>
 802546a:	4806      	ldr	r0, [pc, #24]	@ (8025484 <tx_dhcp_request_re+0x4c>)
 802546c:	f7fb ffce 	bl	802140c <mg_log>
}
 8025470:	e7f2      	b.n	8025458 <tx_dhcp_request_re+0x20>
 8025472:	bf00      	nop
 8025474:	ff030135 	.word	0xff030135
 8025478:	200000a8 	.word	0x200000a8
 802547c:	08037b0c 	.word	0x08037b0c
 8025480:	080371d4 	.word	0x080371d4
 8025484:	08037708 	.word	0x08037708

08025488 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025488:	b5f0      	push	{r4, r5, r6, r7, lr}
 802548a:	b083      	sub	sp, #12
 802548c:	4604      	mov	r4, r0
 802548e:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8025490:	698e      	ldr	r6, [r1, #24]
 8025492:	88f7      	ldrh	r7, [r6, #6]
 8025494:	2001      	movs	r0, #1
 8025496:	f7fd fc21 	bl	8022cdc <mg_ntohs>
 802549a:	4287      	cmp	r7, r0
 802549c:	d006      	beq.n	80254ac <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 802549e:	2002      	movs	r0, #2
 80254a0:	f7fd fc1c 	bl	8022cdc <mg_ntohs>
 80254a4:	4287      	cmp	r7, r0
 80254a6:	d05a      	beq.n	802555e <rx_arp+0xd6>
}
 80254a8:	b003      	add	sp, #12
 80254aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80254ac:	69b2      	ldr	r2, [r6, #24]
 80254ae:	68a3      	ldr	r3, [r4, #8]
 80254b0:	429a      	cmp	r2, r3
 80254b2:	d1f4      	bne.n	802549e <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 80254b4:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 80254b6:	692b      	ldr	r3, [r5, #16]
 80254b8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80254bc:	6032      	str	r2, [r6, #0]
 80254be:	895b      	ldrh	r3, [r3, #10]
 80254c0:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80254c2:	6823      	ldr	r3, [r4, #0]
 80254c4:	f8c6 3006 	str.w	r3, [r6, #6]
 80254c8:	88a3      	ldrh	r3, [r4, #4]
 80254ca:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 80254cc:	f640 0006 	movw	r0, #2054	@ 0x806
 80254d0:	f7fd fc04 	bl	8022cdc <mg_ntohs>
 80254d4:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 80254d6:	69ab      	ldr	r3, [r5, #24]
 80254d8:	6818      	ldr	r0, [r3, #0]
 80254da:	6859      	ldr	r1, [r3, #4]
 80254dc:	689a      	ldr	r2, [r3, #8]
 80254de:	68df      	ldr	r7, [r3, #12]
 80254e0:	f8c6 000e 	str.w	r0, [r6, #14]
 80254e4:	f8c6 1012 	str.w	r1, [r6, #18]
 80254e8:	f8c6 2016 	str.w	r2, [r6, #22]
 80254ec:	f8c6 701a 	str.w	r7, [r6, #26]
 80254f0:	6918      	ldr	r0, [r3, #16]
 80254f2:	6959      	ldr	r1, [r3, #20]
 80254f4:	699a      	ldr	r2, [r3, #24]
 80254f6:	f8c6 001e 	str.w	r0, [r6, #30]
 80254fa:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 80254fe:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 8025502:	2002      	movs	r0, #2
 8025504:	f7fd fbea 	bl	8022cdc <mg_ntohs>
 8025508:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 802550a:	69ab      	ldr	r3, [r5, #24]
 802550c:	689a      	ldr	r2, [r3, #8]
 802550e:	6232      	str	r2, [r6, #32]
 8025510:	899b      	ldrh	r3, [r3, #12]
 8025512:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8025514:	6823      	ldr	r3, [r4, #0]
 8025516:	f8c6 3016 	str.w	r3, [r6, #22]
 802551a:	88a3      	ldrh	r3, [r4, #4]
 802551c:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 802551e:	69ab      	ldr	r3, [r5, #24]
 8025520:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8025524:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 8025528:	68a3      	ldr	r3, [r4, #8]
 802552a:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 802552c:	4b32      	ldr	r3, [pc, #200]	@ (80255f8 <rx_arp+0x170>)
 802552e:	681b      	ldr	r3, [r3, #0]
 8025530:	2b02      	cmp	r3, #2
 8025532:	dc04      	bgt.n	802553e <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 8025534:	212a      	movs	r1, #42	@ 0x2a
 8025536:	4620      	mov	r0, r4
 8025538:	f7fa f9d9 	bl	801f8ee <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802553c:	e7b4      	b.n	80254a8 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 802553e:	4b2f      	ldr	r3, [pc, #188]	@ (80255fc <rx_arp+0x174>)
 8025540:	f241 4292 	movw	r2, #5266	@ 0x1492
 8025544:	492e      	ldr	r1, [pc, #184]	@ (8025600 <rx_arp+0x178>)
 8025546:	2003      	movs	r0, #3
 8025548:	f7fd fece 	bl	80232e8 <mg_log_prefix>
 802554c:	9400      	str	r4, [sp, #0]
 802554e:	4b2d      	ldr	r3, [pc, #180]	@ (8025604 <rx_arp+0x17c>)
 8025550:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 8025554:	492c      	ldr	r1, [pc, #176]	@ (8025608 <rx_arp+0x180>)
 8025556:	482d      	ldr	r0, [pc, #180]	@ (802560c <rx_arp+0x184>)
 8025558:	f7fb ff58 	bl	802140c <mg_log>
 802555c:	e7ea      	b.n	8025534 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 802555e:	2206      	movs	r2, #6
 8025560:	4621      	mov	r1, r4
 8025562:	f106 0012 	add.w	r0, r6, #18
 8025566:	f004 fa27 	bl	80299b8 <memcmp>
 802556a:	2800      	cmp	r0, #0
 802556c:	d19c      	bne.n	80254a8 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 802556e:	f8d6 200e 	ldr.w	r2, [r6, #14]
 8025572:	6923      	ldr	r3, [r4, #16]
 8025574:	429a      	cmp	r2, r3
 8025576:	d026      	beq.n	80255c6 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8025578:	2200      	movs	r2, #0
 802557a:	4629      	mov	r1, r5
 802557c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 802557e:	f7fa fc5c 	bl	801fe3a <getpeer>
      if (c != NULL && c->is_arplooking) {
 8025582:	4604      	mov	r4, r0
 8025584:	2800      	cmp	r0, #0
 8025586:	d08f      	beq.n	80254a8 <rx_arp+0x20>
 8025588:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 802558c:	f013 0f10 	tst.w	r3, #16
 8025590:	d08a      	beq.n	80254a8 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8025592:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 8025596:	68b3      	ldr	r3, [r6, #8]
 8025598:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 802559c:	89b3      	ldrh	r3, [r6, #12]
 802559e:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 80255a2:	4b15      	ldr	r3, [pc, #84]	@ (80255f8 <rx_arp+0x170>)
 80255a4:	681b      	ldr	r3, [r3, #0]
 80255a6:	2b02      	cmp	r3, #2
 80255a8:	dc14      	bgt.n	80255d4 <rx_arp+0x14c>
        c->is_arplooking = 0;
 80255aa:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80255ae:	f36f 1304 	bfc	r3, #4, #1
 80255b2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 80255b6:	4620      	mov	r0, r4
 80255b8:	f7ff fc22 	bl	8024e00 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 80255bc:	2103      	movs	r1, #3
 80255be:	4620      	mov	r0, r4
 80255c0:	f7ff fc6a 	bl	8024e98 <settmout>
 80255c4:	e770      	b.n	80254a8 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 80255c6:	68b3      	ldr	r3, [r6, #8]
 80255c8:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 80255cc:	89b3      	ldrh	r3, [r6, #12]
 80255ce:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80255d2:	e769      	b.n	80254a8 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 80255d4:	4b09      	ldr	r3, [pc, #36]	@ (80255fc <rx_arp+0x174>)
 80255d6:	f241 429f 	movw	r2, #5279	@ 0x149f
 80255da:	4909      	ldr	r1, [pc, #36]	@ (8025600 <rx_arp+0x178>)
 80255dc:	2003      	movs	r0, #3
 80255de:	f7fd fe83 	bl	80232e8 <mg_log_prefix>
 80255e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80255e4:	9501      	str	r5, [sp, #4]
 80255e6:	4b07      	ldr	r3, [pc, #28]	@ (8025604 <rx_arp+0x17c>)
 80255e8:	9300      	str	r3, [sp, #0]
 80255ea:	f104 031c 	add.w	r3, r4, #28
 80255ee:	4a06      	ldr	r2, [pc, #24]	@ (8025608 <rx_arp+0x180>)
 80255f0:	4807      	ldr	r0, [pc, #28]	@ (8025610 <rx_arp+0x188>)
 80255f2:	f7fb ff0b 	bl	802140c <mg_log>
 80255f6:	e7d8      	b.n	80255aa <rx_arp+0x122>
 80255f8:	200000a8 	.word	0x200000a8
 80255fc:	08037af8 	.word	0x08037af8
 8025600:	080371d4 	.word	0x080371d4
 8025604:	080213dd 	.word	0x080213dd
 8025608:	080213cd 	.word	0x080213cd
 802560c:	08037718 	.word	0x08037718
 8025610:	08037730 	.word	0x08037730

08025614 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 8025614:	b570      	push	{r4, r5, r6, lr}
 8025616:	b08c      	sub	sp, #48	@ 0x30
 8025618:	4686      	mov	lr, r0
 802561a:	460d      	mov	r5, r1
 802561c:	4616      	mov	r6, r2
  uint8_t opts[] = {
 802561e:	f10d 0c14 	add.w	ip, sp, #20
 8025622:	4c22      	ldr	r4, [pc, #136]	@ (80256ac <tx_dhcp_request_sel+0x98>)
 8025624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025626:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802562a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802562e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8025632:	f82c 2b02 	strh.w	r2, [ip], #2
 8025636:	0c12      	lsrs	r2, r2, #16
 8025638:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 802563c:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 8025640:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 8025642:	f89e 301f 	ldrb.w	r3, [lr, #31]
 8025646:	b323      	cbz	r3, 8025692 <tx_dhcp_request_sel+0x7e>
 8025648:	2306      	movs	r3, #6
 802564a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 802564e:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 8025650:	f89e 2020 	ldrb.w	r2, [lr, #32]
 8025654:	b132      	cbz	r2, 8025664 <tx_dhcp_request_sel+0x50>
 8025656:	1c5a      	adds	r2, r3, #1
 8025658:	3348      	adds	r3, #72	@ 0x48
 802565a:	446b      	add	r3, sp
 802565c:	212a      	movs	r1, #42	@ 0x2a
 802565e:	f803 1c1c 	strb.w	r1, [r3, #-28]
 8025662:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 8025664:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8025668:	441a      	add	r2, r3
 802566a:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 802566e:	2200      	movs	r2, #0
 8025670:	9202      	str	r2, [sp, #8]
 8025672:	3319      	adds	r3, #25
 8025674:	9301      	str	r3, [sp, #4]
 8025676:	ab05      	add	r3, sp, #20
 8025678:	9300      	str	r3, [sp, #0]
 802567a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802567e:	490c      	ldr	r1, [pc, #48]	@ (80256b0 <tx_dhcp_request_sel+0x9c>)
 8025680:	4670      	mov	r0, lr
 8025682:	f7fd fc6d 	bl	8022f60 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8025686:	4b0b      	ldr	r3, [pc, #44]	@ (80256b4 <tx_dhcp_request_sel+0xa0>)
 8025688:	681b      	ldr	r3, [r3, #0]
 802568a:	2b02      	cmp	r3, #2
 802568c:	dc03      	bgt.n	8025696 <tx_dhcp_request_sel+0x82>
}
 802568e:	b00c      	add	sp, #48	@ 0x30
 8025690:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 8025692:	2300      	movs	r3, #0
 8025694:	e7dc      	b.n	8025650 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 8025696:	4b08      	ldr	r3, [pc, #32]	@ (80256b8 <tx_dhcp_request_sel+0xa4>)
 8025698:	f241 425b 	movw	r2, #5211	@ 0x145b
 802569c:	4907      	ldr	r1, [pc, #28]	@ (80256bc <tx_dhcp_request_sel+0xa8>)
 802569e:	2003      	movs	r0, #3
 80256a0:	f7fd fe22 	bl	80232e8 <mg_log_prefix>
 80256a4:	4806      	ldr	r0, [pc, #24]	@ (80256c0 <tx_dhcp_request_sel+0xac>)
 80256a6:	f7fb feb1 	bl	802140c <mg_log>
}
 80256aa:	e7f0      	b.n	802568e <tx_dhcp_request_sel+0x7a>
 80256ac:	08033058 	.word	0x08033058
 80256b0:	08037c5c 	.word	0x08037c5c
 80256b4:	200000a8 	.word	0x200000a8
 80256b8:	08037acc 	.word	0x08037acc
 80256bc:	080371d4 	.word	0x080371d4
 80256c0:	08037708 	.word	0x08037708

080256c4 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 80256c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256c8:	b089      	sub	sp, #36	@ 0x24
 80256ca:	4604      	mov	r4, r0
 80256cc:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 80256ce:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80256d2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80256d6:	d049      	beq.n	802576c <read_conn+0xa8>
 80256d8:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 80256dc:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 80256de:	6878      	ldr	r0, [r7, #4]
 80256e0:	f7fd fa64 	bl	8022bac <mg_ntohl>
 80256e4:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80256e6:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 80256e8:	7b7b      	ldrb	r3, [r7, #13]
 80256ea:	f013 0f01 	tst.w	r3, #1
 80256ee:	d053      	beq.n	8025798 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 80256f0:	68eb      	ldr	r3, [r5, #12]
 80256f2:	4403      	add	r3, r0
 80256f4:	3301      	adds	r3, #1
 80256f6:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 80256fa:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80256fe:	f013 0f10 	tst.w	r3, #16
 8025702:	d003      	beq.n	802570c <read_conn+0x48>
 8025704:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8025708:	2b04      	cmp	r3, #4
 802570a:	d032      	beq.n	8025772 <read_conn+0xae>
      c->is_draining = 1;
 802570c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8025710:	f043 0310 	orr.w	r3, r3, #16
 8025714:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 8025718:	2104      	movs	r1, #4
 802571a:	4620      	mov	r0, r4
 802571c:	f7ff fbbc 	bl	8024e98 <settmout>
      flags |= TH_FIN;
 8025720:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 8025724:	6863      	ldr	r3, [r4, #4]
 8025726:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8025728:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 802572c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8025730:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8025734:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8025738:	f7fd fa38 	bl	8022bac <mg_ntohl>
 802573c:	4605      	mov	r5, r0
 802573e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8025742:	f7fd fa33 	bl	8022bac <mg_ntohl>
 8025746:	2300      	movs	r3, #0
 8025748:	9305      	str	r3, [sp, #20]
 802574a:	4b9b      	ldr	r3, [pc, #620]	@ (80259b8 <read_conn+0x2f4>)
 802574c:	9304      	str	r3, [sp, #16]
 802574e:	9003      	str	r0, [sp, #12]
 8025750:	9502      	str	r5, [sp, #8]
 8025752:	f8cd a004 	str.w	sl, [sp, #4]
 8025756:	f8cd 9000 	str.w	r9, [sp]
 802575a:	465b      	mov	r3, fp
 802575c:	4632      	mov	r2, r6
 802575e:	4641      	mov	r1, r8
 8025760:	4638      	mov	r0, r7
 8025762:	f7ff fabd 	bl	8024ce0 <tx_tcp>
}
 8025766:	b009      	add	sp, #36	@ 0x24
 8025768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 802576c:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 8025770:	e7b4      	b.n	80256dc <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8025772:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 8025776:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8025778:	6898      	ldr	r0, [r3, #8]
 802577a:	f7fd fa17 	bl	8022bac <mg_ntohl>
 802577e:	4287      	cmp	r7, r0
 8025780:	d004      	beq.n	802578c <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8025782:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8025786:	f04f 0b10 	mov.w	fp, #16
 802578a:	e7cb      	b.n	8025724 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 802578c:	3701      	adds	r7, #1
 802578e:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8025792:	f04f 0b10 	mov.w	fp, #16
 8025796:	e7c5      	b.n	8025724 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 8025798:	68eb      	ldr	r3, [r5, #12]
 802579a:	2b00      	cmp	r3, #0
 802579c:	d0e3      	beq.n	8025766 <read_conn+0xa2>
  } else if (seq != s->ack) {
 802579e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80257a2:	4282      	cmp	r2, r0
 80257a4:	d046      	beq.n	8025834 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 80257a6:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 80257a8:	42aa      	cmp	r2, r5
 80257aa:	d025      	beq.n	80257f8 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 80257ac:	4b83      	ldr	r3, [pc, #524]	@ (80259bc <read_conn+0x2f8>)
 80257ae:	681b      	ldr	r3, [r3, #0]
 80257b0:	2b03      	cmp	r3, #3
 80257b2:	dc30      	bgt.n	8025816 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 80257b4:	6863      	ldr	r3, [r4, #4]
 80257b6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 80257b8:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80257bc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 80257c0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 80257c4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80257c8:	f7fd f9f0 	bl	8022bac <mg_ntohl>
 80257cc:	4605      	mov	r5, r0
 80257ce:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80257d2:	f7fd f9eb 	bl	8022bac <mg_ntohl>
 80257d6:	2300      	movs	r3, #0
 80257d8:	9305      	str	r3, [sp, #20]
 80257da:	4b77      	ldr	r3, [pc, #476]	@ (80259b8 <read_conn+0x2f4>)
 80257dc:	9304      	str	r3, [sp, #16]
 80257de:	9003      	str	r0, [sp, #12]
 80257e0:	9502      	str	r5, [sp, #8]
 80257e2:	f8cd a004 	str.w	sl, [sp, #4]
 80257e6:	f8cd 9000 	str.w	r9, [sp]
 80257ea:	2310      	movs	r3, #16
 80257ec:	4632      	mov	r2, r6
 80257ee:	4641      	mov	r1, r8
 80257f0:	4638      	mov	r0, r7
 80257f2:	f7ff fa75 	bl	8024ce0 <tx_tcp>
 80257f6:	e7b6      	b.n	8025766 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 80257f8:	4b70      	ldr	r3, [pc, #448]	@ (80259bc <read_conn+0x2f8>)
 80257fa:	681b      	ldr	r3, [r3, #0]
 80257fc:	2b03      	cmp	r3, #3
 80257fe:	ddb2      	ble.n	8025766 <read_conn+0xa2>
 8025800:	4b6f      	ldr	r3, [pc, #444]	@ (80259c0 <read_conn+0x2fc>)
 8025802:	f241 52da 	movw	r2, #5594	@ 0x15da
 8025806:	496f      	ldr	r1, [pc, #444]	@ (80259c4 <read_conn+0x300>)
 8025808:	2004      	movs	r0, #4
 802580a:	f7fd fd6d 	bl	80232e8 <mg_log_prefix>
 802580e:	486e      	ldr	r0, [pc, #440]	@ (80259c8 <read_conn+0x304>)
 8025810:	f7fb fdfc 	bl	802140c <mg_log>
 8025814:	e7a7      	b.n	8025766 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8025816:	4b6a      	ldr	r3, [pc, #424]	@ (80259c0 <read_conn+0x2fc>)
 8025818:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 802581c:	4969      	ldr	r1, [pc, #420]	@ (80259c4 <read_conn+0x300>)
 802581e:	2004      	movs	r0, #4
 8025820:	f7fd fd62 	bl	80232e8 <mg_log_prefix>
 8025824:	462b      	mov	r3, r5
 8025826:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 802582a:	4641      	mov	r1, r8
 802582c:	4867      	ldr	r0, [pc, #412]	@ (80259cc <read_conn+0x308>)
 802582e:	f7fb fded 	bl	802140c <mg_log>
 8025832:	e7bf      	b.n	80257b4 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 8025834:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8025838:	f8d9 1008 	ldr.w	r1, [r9, #8]
 802583c:	1a52      	subs	r2, r2, r1
 802583e:	4293      	cmp	r3, r2
 8025840:	d905      	bls.n	802584e <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8025842:	4419      	add	r1, r3
 8025844:	4648      	mov	r0, r9
 8025846:	f7fe fb8b 	bl	8023f60 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 802584a:	2800      	cmp	r0, #0
 802584c:	d05c      	beq.n	8025908 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 802584e:	f8d9 0000 	ldr.w	r0, [r9]
 8025852:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8025856:	68ea      	ldr	r2, [r5, #12]
 8025858:	68a9      	ldr	r1, [r5, #8]
 802585a:	4418      	add	r0, r3
 802585c:	f005 fb7c 	bl	802af58 <memcpy>
    io->len += pkt->pay.len;
 8025860:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8025864:	68ea      	ldr	r2, [r5, #12]
 8025866:	4413      	add	r3, r2
 8025868:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 802586c:	4b53      	ldr	r3, [pc, #332]	@ (80259bc <read_conn+0x2f8>)
 802586e:	681b      	ldr	r3, [r3, #0]
 8025870:	2b03      	cmp	r3, #3
 8025872:	dc4e      	bgt.n	8025912 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8025874:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8025876:	6858      	ldr	r0, [r3, #4]
 8025878:	f7fd f998 	bl	8022bac <mg_ntohl>
 802587c:	68eb      	ldr	r3, [r5, #12]
 802587e:	4418      	add	r0, r3
 8025880:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 8025884:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8025888:	68ea      	ldr	r2, [r5, #12]
 802588a:	4413      	add	r3, r2
 802588c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8025890:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8025894:	4293      	cmp	r3, r2
 8025896:	d95e      	bls.n	8025956 <read_conn+0x292>
 8025898:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 802589c:	4298      	cmp	r0, r3
 802589e:	d05a      	beq.n	8025956 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 80258a0:	4b46      	ldr	r3, [pc, #280]	@ (80259bc <read_conn+0x2f8>)
 80258a2:	681b      	ldr	r3, [r3, #0]
 80258a4:	2b03      	cmp	r3, #3
 80258a6:	dc48      	bgt.n	802593a <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 80258a8:	6863      	ldr	r3, [r4, #4]
 80258aa:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 80258ae:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80258b2:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 80258b6:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 80258ba:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80258be:	f7fd f975 	bl	8022bac <mg_ntohl>
 80258c2:	9007      	str	r0, [sp, #28]
 80258c4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80258c8:	f7fd f970 	bl	8022bac <mg_ntohl>
 80258cc:	2700      	movs	r7, #0
 80258ce:	9705      	str	r7, [sp, #20]
 80258d0:	9704      	str	r7, [sp, #16]
 80258d2:	9003      	str	r0, [sp, #12]
 80258d4:	9b07      	ldr	r3, [sp, #28]
 80258d6:	9302      	str	r3, [sp, #8]
 80258d8:	f8cd b004 	str.w	fp, [sp, #4]
 80258dc:	f8cd a000 	str.w	sl, [sp]
 80258e0:	2310      	movs	r3, #16
 80258e2:	4632      	mov	r2, r6
 80258e4:	4641      	mov	r1, r8
 80258e6:	4648      	mov	r0, r9
 80258e8:	f7ff f9fa 	bl	8024ce0 <tx_tcp>
      s->unacked = 0;
 80258ec:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 80258f0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80258f4:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 80258f8:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80258fc:	b37b      	cbz	r3, 802595e <read_conn+0x29a>
 80258fe:	4639      	mov	r1, r7
 8025900:	4620      	mov	r0, r4
 8025902:	f7ff fac9 	bl	8024e98 <settmout>
 8025906:	e02a      	b.n	802595e <read_conn+0x29a>
    mg_error(c, "oom");
 8025908:	4931      	ldr	r1, [pc, #196]	@ (80259d0 <read_conn+0x30c>)
 802590a:	4620      	mov	r0, r4
 802590c:	f7fd fdd4 	bl	80234b8 <mg_error>
 8025910:	e729      	b.n	8025766 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8025912:	4b2b      	ldr	r3, [pc, #172]	@ (80259c0 <read_conn+0x2fc>)
 8025914:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 8025918:	492a      	ldr	r1, [pc, #168]	@ (80259c4 <read_conn+0x300>)
 802591a:	2004      	movs	r0, #4
 802591c:	f7fd fce4 	bl	80232e8 <mg_log_prefix>
 8025920:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8025922:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8025924:	6858      	ldr	r0, [r3, #4]
 8025926:	f7fd f941 	bl	8022bac <mg_ntohl>
 802592a:	4602      	mov	r2, r0
 802592c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8025930:	4639      	mov	r1, r7
 8025932:	4828      	ldr	r0, [pc, #160]	@ (80259d4 <read_conn+0x310>)
 8025934:	f7fb fd6a 	bl	802140c <mg_log>
 8025938:	e79c      	b.n	8025874 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 802593a:	4b21      	ldr	r3, [pc, #132]	@ (80259c0 <read_conn+0x2fc>)
 802593c:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 8025940:	4920      	ldr	r1, [pc, #128]	@ (80259c4 <read_conn+0x300>)
 8025942:	2004      	movs	r0, #4
 8025944:	f7fd fcd0 	bl	80232e8 <mg_log_prefix>
 8025948:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 802594c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802594e:	4822      	ldr	r0, [pc, #136]	@ (80259d8 <read_conn+0x314>)
 8025950:	f7fb fd5c 	bl	802140c <mg_log>
 8025954:	e7a8      	b.n	80258a8 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8025956:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802595a:	2b01      	cmp	r3, #1
 802595c:	d11b      	bne.n	8025996 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 802595e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8025962:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8025966:	2ac0      	cmp	r2, #192	@ 0xc0
 8025968:	f43f aefd 	beq.w	8025766 <read_conn+0xa2>
    } else if (c->is_tls) {
 802596c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8025970:	d01b      	beq.n	80259aa <read_conn+0x2e6>
      io = &c->recv;
 8025972:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 8025976:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8025978:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802597a:	1a5b      	subs	r3, r3, r1
 802597c:	68ea      	ldr	r2, [r5, #12]
 802597e:	4293      	cmp	r3, r2
 8025980:	d204      	bcs.n	802598c <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8025982:	4411      	add	r1, r2
 8025984:	4630      	mov	r0, r6
 8025986:	f7fe faeb 	bl	8023f60 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 802598a:	b148      	cbz	r0, 80259a0 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 802598c:	4631      	mov	r1, r6
 802598e:	4620      	mov	r0, r4
 8025990:	f7fd fdca 	bl	8023528 <handle_tls_recv>
 8025994:	e6e7      	b.n	8025766 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8025996:	2101      	movs	r1, #1
 8025998:	4620      	mov	r0, r4
 802599a:	f7ff fa7d 	bl	8024e98 <settmout>
 802599e:	e7de      	b.n	802595e <read_conn+0x29a>
        mg_error(c, "oom");
 80259a0:	490b      	ldr	r1, [pc, #44]	@ (80259d0 <read_conn+0x30c>)
 80259a2:	4620      	mov	r0, r4
 80259a4:	f7fd fd88 	bl	80234b8 <mg_error>
 80259a8:	e6dd      	b.n	8025766 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 80259aa:	f105 020c 	add.w	r2, r5, #12
 80259ae:	2107      	movs	r1, #7
 80259b0:	4620      	mov	r0, r4
 80259b2:	f7fa fae3 	bl	801ff7c <mg_call>
}
 80259b6:	e6d6      	b.n	8025766 <read_conn+0xa2>
 80259b8:	08033984 	.word	0x08033984
 80259bc:	200000a8 	.word	0x200000a8
 80259c0:	08037ac0 	.word	0x08037ac0
 80259c4:	080371d4 	.word	0x080371d4
 80259c8:	0803774c 	.word	0x0803774c
 80259cc:	08037764 	.word	0x08037764
 80259d0:	080374d4 	.word	0x080374d4
 80259d4:	0803777c 	.word	0x0803777c
 80259d8:	08037790 	.word	0x08037790

080259dc <accept_conn>:
                                         struct pkt *pkt) {
 80259dc:	b570      	push	{r4, r5, r6, lr}
 80259de:	4605      	mov	r5, r0
 80259e0:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 80259e2:	6840      	ldr	r0, [r0, #4]
 80259e4:	f7fb f83c 	bl	8020a60 <mg_alloc_conn>
  if (c == NULL) {
 80259e8:	4604      	mov	r4, r0
 80259ea:	2800      	cmp	r0, #0
 80259ec:	d058      	beq.n	8025aa0 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 80259ee:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80259f0:	6898      	ldr	r0, [r3, #8]
 80259f2:	f7fd f8db 	bl	8022bac <mg_ntohl>
 80259f6:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 80259fa:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80259fc:	6858      	ldr	r0, [r3, #4]
 80259fe:	f7fd f8d5 	bl	8022bac <mg_ntohl>
 8025a02:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8025a06:	6933      	ldr	r3, [r6, #16]
 8025a08:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8025a0c:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8025a10:	895b      	ldrh	r3, [r3, #10]
 8025a12:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8025a16:	2100      	movs	r1, #0
 8025a18:	4620      	mov	r0, r4
 8025a1a:	f7ff fa3d 	bl	8024e98 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8025a1e:	69f3      	ldr	r3, [r6, #28]
 8025a20:	68db      	ldr	r3, [r3, #12]
 8025a22:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 8025a24:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8025a26:	881b      	ldrh	r3, [r3, #0]
 8025a28:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8025a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8025adc <accept_conn+0x100>)
 8025a2c:	681b      	ldr	r3, [r3, #0]
 8025a2e:	2b02      	cmp	r3, #2
 8025a30:	dc45      	bgt.n	8025abe <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8025a32:	686b      	ldr	r3, [r5, #4]
 8025a34:	681b      	ldr	r3, [r3, #0]
 8025a36:	6023      	str	r3, [r4, #0]
 8025a38:	686b      	ldr	r3, [r5, #4]
 8025a3a:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 8025a3c:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8025a40:	f043 0304 	orr.w	r3, r3, #4
 8025a44:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8025a48:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8025a4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8025a50:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 8025a54:	f363 02c3 	bfi	r2, r3, #3, #1
 8025a58:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 8025a5c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8025a60:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 8025a64:	f104 0608 	add.w	r6, r4, #8
 8025a68:	f105 0c08 	add.w	ip, r5, #8
 8025a6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8025a70:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8025a72:	f8dc 3000 	ldr.w	r3, [ip]
 8025a76:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 8025a78:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8025a7c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 8025a80:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8025a82:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8025a84:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8025a86:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 8025a88:	2200      	movs	r2, #0
 8025a8a:	2101      	movs	r1, #1
 8025a8c:	4620      	mov	r0, r4
 8025a8e:	f7fa fa75 	bl	801ff7c <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8025a92:	2200      	movs	r2, #0
 8025a94:	2105      	movs	r1, #5
 8025a96:	4620      	mov	r0, r4
 8025a98:	f7fa fa70 	bl	801ff7c <mg_call>
}
 8025a9c:	4620      	mov	r0, r4
 8025a9e:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 8025aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8025adc <accept_conn+0x100>)
 8025aa2:	681b      	ldr	r3, [r3, #0]
 8025aa4:	2b00      	cmp	r3, #0
 8025aa6:	ddf9      	ble.n	8025a9c <accept_conn+0xc0>
 8025aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8025ae0 <accept_conn+0x104>)
 8025aaa:	f241 5268 	movw	r2, #5480	@ 0x1568
 8025aae:	490d      	ldr	r1, [pc, #52]	@ (8025ae4 <accept_conn+0x108>)
 8025ab0:	2001      	movs	r0, #1
 8025ab2:	f7fd fc19 	bl	80232e8 <mg_log_prefix>
 8025ab6:	480c      	ldr	r0, [pc, #48]	@ (8025ae8 <accept_conn+0x10c>)
 8025ab8:	f7fb fca8 	bl	802140c <mg_log>
    return NULL;
 8025abc:	e7ee      	b.n	8025a9c <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8025abe:	4b08      	ldr	r3, [pc, #32]	@ (8025ae0 <accept_conn+0x104>)
 8025ac0:	f241 5271 	movw	r2, #5489	@ 0x1571
 8025ac4:	4907      	ldr	r1, [pc, #28]	@ (8025ae4 <accept_conn+0x108>)
 8025ac6:	2003      	movs	r0, #3
 8025ac8:	f7fd fc0e 	bl	80232e8 <mg_log_prefix>
 8025acc:	f104 031c 	add.w	r3, r4, #28
 8025ad0:	4a06      	ldr	r2, [pc, #24]	@ (8025aec <accept_conn+0x110>)
 8025ad2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025ad4:	4806      	ldr	r0, [pc, #24]	@ (8025af0 <accept_conn+0x114>)
 8025ad6:	f7fb fc99 	bl	802140c <mg_log>
 8025ada:	e7aa      	b.n	8025a32 <accept_conn+0x56>
 8025adc:	200000a8 	.word	0x200000a8
 8025ae0:	08037ab4 	.word	0x08037ab4
 8025ae4:	080371d4 	.word	0x080371d4
 8025ae8:	080377fc 	.word	0x080377fc
 8025aec:	08023215 	.word	0x08023215
 8025af0:	080377a0 	.word	0x080377a0

08025af4 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025af8:	b083      	sub	sp, #12
 8025afa:	4606      	mov	r6, r0
 8025afc:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8025afe:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 8025b00:	2200      	movs	r2, #0
 8025b02:	4638      	mov	r0, r7
 8025b04:	f7fa f999 	bl	801fe3a <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8025b08:	4605      	mov	r5, r0
 8025b0a:	b380      	cbz	r0, 8025b6e <rx_tcp+0x7a>
 8025b0c:	f100 08b0 	add.w	r8, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8025b10:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8025b14:	f013 0f20 	tst.w	r3, #32
 8025b18:	d02b      	beq.n	8025b72 <rx_tcp+0x7e>
 8025b1a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025b1c:	7b5a      	ldrb	r2, [r3, #13]
 8025b1e:	2a12      	cmp	r2, #18
 8025b20:	d126      	bne.n	8025b70 <rx_tcp+0x7c>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8025b22:	6898      	ldr	r0, [r3, #8]
 8025b24:	f7fd f842 	bl	8022bac <mg_ntohl>
 8025b28:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 8025b2c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025b2e:	6858      	ldr	r0, [r3, #4]
 8025b30:	f7fd f83c 	bl	8022bac <mg_ntohl>
 8025b34:	3001      	adds	r0, #1
 8025b36:	f8c8 0004 	str.w	r0, [r8, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 8025b3a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025b3c:	689b      	ldr	r3, [r3, #8]
 8025b3e:	2700      	movs	r7, #0
 8025b40:	9701      	str	r7, [sp, #4]
 8025b42:	9700      	str	r7, [sp, #0]
 8025b44:	2210      	movs	r2, #16
 8025b46:	4621      	mov	r1, r4
 8025b48:	4630      	mov	r0, r6
 8025b4a:	f7ff f975 	bl	8024e38 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 8025b4e:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8025b52:	f367 1345 	bfi	r3, r7, #5, #1
 8025b56:	f885 30ac 	strb.w	r3, [r5, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 8025b5a:	4639      	mov	r1, r7
 8025b5c:	4628      	mov	r0, r5
 8025b5e:	f7ff f99b 	bl	8024e98 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8025b62:	463a      	mov	r2, r7
 8025b64:	2104      	movs	r1, #4
 8025b66:	4628      	mov	r0, r5
 8025b68:	f7fa fa08 	bl	801ff7c <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 8025b6c:	e01b      	b.n	8025ba6 <rx_tcp+0xb2>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8025b6e:	4680      	mov	r8, r0
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8025b70:	b385      	cbz	r5, 8025bd4 <rx_tcp+0xe0>
 8025b72:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8025b76:	f013 0f20 	tst.w	r3, #32
 8025b7a:	d004      	beq.n	8025b86 <rx_tcp+0x92>
 8025b7c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025b7e:	7b5a      	ldrb	r2, [r3, #13]
 8025b80:	2a10      	cmp	r2, #16
 8025b82:	d113      	bne.n	8025bac <rx_tcp+0xb8>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8025b84:	b335      	cbz	r5, 8025bd4 <rx_tcp+0xe0>
 8025b86:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025b88:	7b5b      	ldrb	r3, [r3, #13]
 8025b8a:	f013 0f04 	tst.w	r3, #4
 8025b8e:	d117      	bne.n	8025bc0 <rx_tcp+0xcc>
  } else if (c != NULL) {
 8025b90:	b305      	cbz	r5, 8025bd4 <rx_tcp+0xe0>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8025b92:	2300      	movs	r3, #0
 8025b94:	f888 301f 	strb.w	r3, [r8, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8025b98:	f898 301e 	ldrb.w	r3, [r8, #30]
 8025b9c:	b1ab      	cbz	r3, 8025bca <rx_tcp+0xd6>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 8025b9e:	4621      	mov	r1, r4
 8025ba0:	4628      	mov	r0, r5
 8025ba2:	f7ff fd8f 	bl	80256c4 <read_conn>
}
 8025ba6:	b003      	add	sp, #12
 8025ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8025bac:	689b      	ldr	r3, [r3, #8]
 8025bae:	2200      	movs	r2, #0
 8025bb0:	9201      	str	r2, [sp, #4]
 8025bb2:	9200      	str	r2, [sp, #0]
 8025bb4:	2214      	movs	r2, #20
 8025bb6:	4621      	mov	r1, r4
 8025bb8:	4630      	mov	r0, r6
 8025bba:	f7ff f93d 	bl	8024e38 <tx_tcp_pkt>
 8025bbe:	e7f2      	b.n	8025ba6 <rx_tcp+0xb2>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8025bc0:	4934      	ldr	r1, [pc, #208]	@ (8025c94 <rx_tcp+0x1a0>)
 8025bc2:	4628      	mov	r0, r5
 8025bc4:	f7fd fc78 	bl	80234b8 <mg_error>
 8025bc8:	e7ed      	b.n	8025ba6 <rx_tcp+0xb2>
      settmout(c,
 8025bca:	2100      	movs	r1, #0
 8025bcc:	4628      	mov	r0, r5
 8025bce:	f7ff f963 	bl	8024e98 <settmout>
 8025bd2:	e7e4      	b.n	8025b9e <rx_tcp+0xaa>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8025bd4:	2201      	movs	r2, #1
 8025bd6:	4621      	mov	r1, r4
 8025bd8:	4638      	mov	r0, r7
 8025bda:	f7fa f92e 	bl	801fe3a <getpeer>
 8025bde:	4607      	mov	r7, r0
 8025be0:	b168      	cbz	r0, 8025bfe <rx_tcp+0x10a>
  } else if (pkt->tcp->flags & TH_RST) {
 8025be2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8025be4:	7b6b      	ldrb	r3, [r5, #13]
 8025be6:	f013 0f04 	tst.w	r3, #4
 8025bea:	d013      	beq.n	8025c14 <rx_tcp+0x120>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8025bec:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8025bf0:	f013 0f04 	tst.w	r3, #4
 8025bf4:	d0d7      	beq.n	8025ba6 <rx_tcp+0xb2>
 8025bf6:	4927      	ldr	r1, [pc, #156]	@ (8025c94 <rx_tcp+0x1a0>)
 8025bf8:	f7fd fc5e 	bl	80234b8 <mg_error>
 8025bfc:	e7d3      	b.n	8025ba6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8025bfe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025c00:	689b      	ldr	r3, [r3, #8]
 8025c02:	2200      	movs	r2, #0
 8025c04:	9201      	str	r2, [sp, #4]
 8025c06:	9200      	str	r2, [sp, #0]
 8025c08:	2214      	movs	r2, #20
 8025c0a:	4621      	mov	r1, r4
 8025c0c:	4630      	mov	r0, r6
 8025c0e:	f7ff f913 	bl	8024e38 <tx_tcp_pkt>
 8025c12:	e7c8      	b.n	8025ba6 <rx_tcp+0xb2>
  } else if (pkt->tcp->flags & TH_SYN) {
 8025c14:	f013 0f02 	tst.w	r3, #2
 8025c18:	d11d      	bne.n	8025c56 <rx_tcp+0x162>
  } else if (pkt->tcp->flags & TH_FIN) {
 8025c1a:	f013 0f01 	tst.w	r3, #1
 8025c1e:	d129      	bne.n	8025c74 <rx_tcp+0x180>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8025c20:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8025c24:	4648      	mov	r0, r9
 8025c26:	f7fc ffc1 	bl	8022bac <mg_ntohl>
 8025c2a:	4680      	mov	r8, r0
 8025c2c:	8828      	ldrh	r0, [r5, #0]
 8025c2e:	f7fd f855 	bl	8022cdc <mg_ntohs>
 8025c32:	1c43      	adds	r3, r0, #1
 8025c34:	4598      	cmp	r8, r3
 8025c36:	d027      	beq.n	8025c88 <rx_tcp+0x194>
  } else if (!c->is_accepted) {  // no peer
 8025c38:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8025c3c:	f013 0f04 	tst.w	r3, #4
 8025c40:	d1b1      	bne.n	8025ba6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8025c42:	2300      	movs	r3, #0
 8025c44:	9301      	str	r3, [sp, #4]
 8025c46:	9300      	str	r3, [sp, #0]
 8025c48:	464b      	mov	r3, r9
 8025c4a:	2214      	movs	r2, #20
 8025c4c:	4621      	mov	r1, r4
 8025c4e:	4630      	mov	r0, r6
 8025c50:	f7ff f8f2 	bl	8024e38 <tx_tcp_pkt>
}
 8025c54:	e7a7      	b.n	8025ba6 <rx_tcp+0xb2>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 8025c56:	8828      	ldrh	r0, [r5, #0]
 8025c58:	f7fd f840 	bl	8022cdc <mg_ntohs>
 8025c5c:	f7fc ffa6 	bl	8022bac <mg_ntohl>
 8025c60:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8025c62:	2200      	movs	r2, #0
 8025c64:	9201      	str	r2, [sp, #4]
 8025c66:	9200      	str	r2, [sp, #0]
 8025c68:	2212      	movs	r2, #18
 8025c6a:	4621      	mov	r1, r4
 8025c6c:	4630      	mov	r0, r6
 8025c6e:	f7ff f8e3 	bl	8024e38 <tx_tcp_pkt>
 8025c72:	e798      	b.n	8025ba6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8025c74:	68ab      	ldr	r3, [r5, #8]
 8025c76:	2200      	movs	r2, #0
 8025c78:	9201      	str	r2, [sp, #4]
 8025c7a:	9200      	str	r2, [sp, #0]
 8025c7c:	2211      	movs	r2, #17
 8025c7e:	4621      	mov	r1, r4
 8025c80:	4630      	mov	r0, r6
 8025c82:	f7ff f8d9 	bl	8024e38 <tx_tcp_pkt>
 8025c86:	e78e      	b.n	8025ba6 <rx_tcp+0xb2>
    accept_conn(c, pkt);
 8025c88:	4621      	mov	r1, r4
 8025c8a:	4638      	mov	r0, r7
 8025c8c:	f7ff fea6 	bl	80259dc <accept_conn>
 8025c90:	e789      	b.n	8025ba6 <rx_tcp+0xb2>
 8025c92:	bf00      	nop
 8025c94:	080377b0 	.word	0x080377b0

08025c98 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 8025c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c9c:	b082      	sub	sp, #8
 8025c9e:	4604      	mov	r4, r0
 8025ca0:	4688      	mov	r8, r1
 8025ca2:	4617      	mov	r7, r2
 8025ca4:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 8025ca6:	6819      	ldr	r1, [r3, #0]
 8025ca8:	2900      	cmp	r1, #0
 8025caa:	d037      	beq.n	8025d1c <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 8025cac:	685b      	ldr	r3, [r3, #4]
 8025cae:	2b00      	cmp	r3, #0
 8025cb0:	d038      	beq.n	8025d24 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 8025cb2:	686b      	ldr	r3, [r5, #4]
 8025cb4:	2b00      	cmp	r3, #0
 8025cb6:	d040      	beq.n	8025d3a <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8025cb8:	2118      	movs	r1, #24
 8025cba:	2001      	movs	r0, #1
 8025cbc:	f7fa f8af 	bl	801fe1e <mg_calloc>
 8025cc0:	4606      	mov	r6, r0
 8025cc2:	2800      	cmp	r0, #0
 8025cc4:	d03e      	beq.n	8025d44 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8025cc6:	6863      	ldr	r3, [r4, #4]
 8025cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8025cca:	2b00      	cmp	r3, #0
 8025ccc:	d03f      	beq.n	8025d4e <mg_sendnsreq+0xb6>
 8025cce:	8a1b      	ldrh	r3, [r3, #16]
 8025cd0:	3301      	adds	r3, #1
 8025cd2:	b29b      	uxth	r3, r3
 8025cd4:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8025cd6:	6863      	ldr	r3, [r4, #4]
 8025cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025cda:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 8025cdc:	6863      	ldr	r3, [r4, #4]
 8025cde:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8025ce0:	f7fd fafd 	bl	80232de <mg_millis>
 8025ce4:	19c0      	adds	r0, r0, r7
 8025ce6:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 8025cea:	60b0      	str	r0, [r6, #8]
 8025cec:	60f1      	str	r1, [r6, #12]
    d->c = c;
 8025cee:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 8025cf0:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8025cf4:	f043 0308 	orr.w	r3, r3, #8
 8025cf8:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8025cfc:	4b21      	ldr	r3, [pc, #132]	@ (8025d84 <mg_sendnsreq+0xec>)
 8025cfe:	681b      	ldr	r3, [r3, #0]
 8025d00:	2b03      	cmp	r3, #3
 8025d02:	dc26      	bgt.n	8025d52 <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8025d04:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8025d08:	8a32      	ldrh	r2, [r6, #16]
 8025d0a:	4641      	mov	r1, r8
 8025d0c:	6868      	ldr	r0, [r5, #4]
 8025d0e:	f7fe fbd5 	bl	80244bc <mg_dns_send>
 8025d12:	2800      	cmp	r0, #0
 8025d14:	d031      	beq.n	8025d7a <mg_sendnsreq+0xe2>
}
 8025d16:	b002      	add	sp, #8
 8025d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8025d1c:	491a      	ldr	r1, [pc, #104]	@ (8025d88 <mg_sendnsreq+0xf0>)
 8025d1e:	f7fd fbcb 	bl	80234b8 <mg_error>
 8025d22:	e7c6      	b.n	8025cb2 <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8025d24:	461a      	mov	r2, r3
 8025d26:	6840      	ldr	r0, [r0, #4]
 8025d28:	f000 f866 	bl	8025df8 <mg_connect>
 8025d2c:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 8025d2e:	2800      	cmp	r0, #0
 8025d30:	d0bf      	beq.n	8025cb2 <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 8025d32:	4b16      	ldr	r3, [pc, #88]	@ (8025d8c <mg_sendnsreq+0xf4>)
 8025d34:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8025d38:	e7bb      	b.n	8025cb2 <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 8025d3a:	4915      	ldr	r1, [pc, #84]	@ (8025d90 <mg_sendnsreq+0xf8>)
 8025d3c:	4620      	mov	r0, r4
 8025d3e:	f7fd fbbb 	bl	80234b8 <mg_error>
 8025d42:	e7e8      	b.n	8025d16 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 8025d44:	4913      	ldr	r1, [pc, #76]	@ (8025d94 <mg_sendnsreq+0xfc>)
 8025d46:	4620      	mov	r0, r4
 8025d48:	f7fd fbb6 	bl	80234b8 <mg_error>
 8025d4c:	e7e3      	b.n	8025d16 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8025d4e:	2301      	movs	r3, #1
 8025d50:	e7c0      	b.n	8025cd4 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8025d52:	4b11      	ldr	r3, [pc, #68]	@ (8025d98 <mg_sendnsreq+0x100>)
 8025d54:	f240 521e 	movw	r2, #1310	@ 0x51e
 8025d58:	4910      	ldr	r1, [pc, #64]	@ (8025d9c <mg_sendnsreq+0x104>)
 8025d5a:	2004      	movs	r0, #4
 8025d5c:	f7fd fac4 	bl	80232e8 <mg_log_prefix>
 8025d60:	8a33      	ldrh	r3, [r6, #16]
 8025d62:	9301      	str	r3, [sp, #4]
 8025d64:	682b      	ldr	r3, [r5, #0]
 8025d66:	9300      	str	r3, [sp, #0]
 8025d68:	f8d8 3000 	ldr.w	r3, [r8]
 8025d6c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8025d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025d72:	480b      	ldr	r0, [pc, #44]	@ (8025da0 <mg_sendnsreq+0x108>)
 8025d74:	f7fb fb4a 	bl	802140c <mg_log>
 8025d78:	e7c4      	b.n	8025d04 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 8025d7a:	490a      	ldr	r1, [pc, #40]	@ (8025da4 <mg_sendnsreq+0x10c>)
 8025d7c:	6868      	ldr	r0, [r5, #4]
 8025d7e:	f7fd fb9b 	bl	80234b8 <mg_error>
}
 8025d82:	e7c8      	b.n	8025d16 <mg_sendnsreq+0x7e>
 8025d84:	200000a8 	.word	0x200000a8
 8025d88:	080377bc 	.word	0x080377bc
 8025d8c:	08025235 	.word	0x08025235
 8025d90:	080377e8 	.word	0x080377e8
 8025d94:	080377f4 	.word	0x080377f4
 8025d98:	08037c3c 	.word	0x08037c3c
 8025d9c:	080371d4 	.word	0x080371d4
 8025da0:	08037800 	.word	0x08037800
 8025da4:	08037824 	.word	0x08037824

08025da8 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 8025da8:	b570      	push	{r4, r5, r6, lr}
 8025daa:	b084      	sub	sp, #16
 8025dac:	4604      	mov	r4, r0
 8025dae:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 8025db0:	ad02      	add	r5, sp, #8
 8025db2:	4628      	mov	r0, r5
 8025db4:	f7fc fe24 	bl	8022a00 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8025db8:	4630      	mov	r0, r6
 8025dba:	f7fc fe3f 	bl	8022a3c <mg_url_port>
 8025dbe:	f7fc ff8d 	bl	8022cdc <mg_ntohs>
 8025dc2:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8025dc4:	f104 021c 	add.w	r2, r4, #28
 8025dc8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025dcc:	f7fc ff22 	bl	8022c14 <mg_aton>
 8025dd0:	b960      	cbnz	r0, 8025dec <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8025dd2:	6862      	ldr	r2, [r4, #4]
 8025dd4:	7e11      	ldrb	r1, [r2, #24]
 8025dd6:	b169      	cbz	r1, 8025df4 <mg_resolve+0x4c>
 8025dd8:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8025ddc:	6952      	ldr	r2, [r2, #20]
 8025dde:	9100      	str	r1, [sp, #0]
 8025de0:	a902      	add	r1, sp, #8
 8025de2:	4620      	mov	r0, r4
 8025de4:	f7ff ff58 	bl	8025c98 <mg_sendnsreq>
}
 8025de8:	b004      	add	sp, #16
 8025dea:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 8025dec:	4620      	mov	r0, r4
 8025dee:	f7ff f951 	bl	8025094 <mg_connect_resolved>
 8025df2:	e7f9      	b.n	8025de8 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8025df4:	1d13      	adds	r3, r2, #4
 8025df6:	e7f1      	b.n	8025ddc <mg_resolve+0x34>

08025df8 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 8025df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 8025dfc:	b129      	cbz	r1, 8025e0a <mg_connect+0x12>
 8025dfe:	4680      	mov	r8, r0
 8025e00:	4617      	mov	r7, r2
 8025e02:	461e      	mov	r6, r3
 8025e04:	460d      	mov	r5, r1
 8025e06:	780b      	ldrb	r3, [r1, #0]
 8025e08:	b99b      	cbnz	r3, 8025e32 <mg_connect+0x3a>
    MG_ERROR(("null url"));
 8025e0a:	4b30      	ldr	r3, [pc, #192]	@ (8025ecc <mg_connect+0xd4>)
 8025e0c:	681b      	ldr	r3, [r3, #0]
 8025e0e:	2b00      	cmp	r3, #0
 8025e10:	dc03      	bgt.n	8025e1a <mg_connect+0x22>
  struct mg_connection *c = NULL;
 8025e12:	2400      	movs	r4, #0
}
 8025e14:	4620      	mov	r0, r4
 8025e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 8025e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8025ed0 <mg_connect+0xd8>)
 8025e1c:	f241 22be 	movw	r2, #4798	@ 0x12be
 8025e20:	492c      	ldr	r1, [pc, #176]	@ (8025ed4 <mg_connect+0xdc>)
 8025e22:	2001      	movs	r0, #1
 8025e24:	f7fd fa60 	bl	80232e8 <mg_log_prefix>
 8025e28:	482b      	ldr	r0, [pc, #172]	@ (8025ed8 <mg_connect+0xe0>)
 8025e2a:	f7fb faef 	bl	802140c <mg_log>
  struct mg_connection *c = NULL;
 8025e2e:	2400      	movs	r4, #0
 8025e30:	e7f0      	b.n	8025e14 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8025e32:	f7fa fe15 	bl	8020a60 <mg_alloc_conn>
 8025e36:	4604      	mov	r4, r0
 8025e38:	b358      	cbz	r0, 8025e92 <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8025e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8025e3e:	6003      	str	r3, [r0, #0]
 8025e40:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8025e44:	2204      	movs	r2, #4
 8025e46:	4925      	ldr	r1, [pc, #148]	@ (8025edc <mg_connect+0xe4>)
 8025e48:	4628      	mov	r0, r5
 8025e4a:	f003 fe7e 	bl	8029b4a <strncmp>
 8025e4e:	fab0 f080 	clz	r0, r0
 8025e52:	0940      	lsrs	r0, r0, #5
 8025e54:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8025e58:	f360 0300 	bfi	r3, r0, #0, #1
 8025e5c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8025e60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025e64:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 8025e66:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 8025e68:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8025e6c:	f043 0302 	orr.w	r3, r3, #2
 8025e70:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 8025e74:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8025e76:	4b15      	ldr	r3, [pc, #84]	@ (8025ecc <mg_connect+0xd4>)
 8025e78:	681b      	ldr	r3, [r3, #0]
 8025e7a:	2b02      	cmp	r3, #2
 8025e7c:	dc18      	bgt.n	8025eb0 <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 8025e7e:	462a      	mov	r2, r5
 8025e80:	2101      	movs	r1, #1
 8025e82:	4620      	mov	r0, r4
 8025e84:	f7fa f87a 	bl	801ff7c <mg_call>
    mg_resolve(c, url);
 8025e88:	4629      	mov	r1, r5
 8025e8a:	4620      	mov	r0, r4
 8025e8c:	f7ff ff8c 	bl	8025da8 <mg_resolve>
 8025e90:	e7c0      	b.n	8025e14 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 8025e92:	4b0e      	ldr	r3, [pc, #56]	@ (8025ecc <mg_connect+0xd4>)
 8025e94:	681b      	ldr	r3, [r3, #0]
 8025e96:	2b00      	cmp	r3, #0
 8025e98:	ddbc      	ble.n	8025e14 <mg_connect+0x1c>
 8025e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8025ed0 <mg_connect+0xd8>)
 8025e9c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8025ea0:	490c      	ldr	r1, [pc, #48]	@ (8025ed4 <mg_connect+0xdc>)
 8025ea2:	2001      	movs	r0, #1
 8025ea4:	f7fd fa20 	bl	80232e8 <mg_log_prefix>
 8025ea8:	480d      	ldr	r0, [pc, #52]	@ (8025ee0 <mg_connect+0xe8>)
 8025eaa:	f7fb faaf 	bl	802140c <mg_log>
 8025eae:	e7b1      	b.n	8025e14 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8025eb0:	4b07      	ldr	r3, [pc, #28]	@ (8025ed0 <mg_connect+0xd8>)
 8025eb2:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 8025eb6:	4907      	ldr	r1, [pc, #28]	@ (8025ed4 <mg_connect+0xdc>)
 8025eb8:	2003      	movs	r0, #3
 8025eba:	f7fd fa15 	bl	80232e8 <mg_log_prefix>
 8025ebe:	462b      	mov	r3, r5
 8025ec0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8025ec2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025ec4:	4807      	ldr	r0, [pc, #28]	@ (8025ee4 <mg_connect+0xec>)
 8025ec6:	f7fb faa1 	bl	802140c <mg_log>
 8025eca:	e7d8      	b.n	8025e7e <mg_connect+0x86>
 8025ecc:	200000a8 	.word	0x200000a8
 8025ed0:	08037bb0 	.word	0x08037bb0
 8025ed4:	080371d4 	.word	0x080371d4
 8025ed8:	08037830 	.word	0x08037830
 8025edc:	08037508 	.word	0x08037508
 8025ee0:	080377fc 	.word	0x080377fc
 8025ee4:	08037230 	.word	0x08037230

08025ee8 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 8025ee8:	b530      	push	{r4, r5, lr}
 8025eea:	b091      	sub	sp, #68	@ 0x44
 8025eec:	4614      	mov	r4, r2
 8025eee:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8025ef0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025ef2:	f7ff ff81 	bl	8025df8 <mg_connect>
  if (c != NULL) {
 8025ef6:	4605      	mov	r5, r0
 8025ef8:	b160      	cbz	r0, 8025f14 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 8025efa:	2240      	movs	r2, #64	@ 0x40
 8025efc:	2100      	movs	r1, #0
 8025efe:	4668      	mov	r0, sp
 8025f00:	f003 fdee 	bl	8029ae0 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8025f04:	b14c      	cbz	r4, 8025f1a <mg_mqtt_connect+0x32>
 8025f06:	4621      	mov	r1, r4
 8025f08:	4628      	mov	r0, r5
 8025f0a:	f7fe fbfd 	bl	8024708 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 8025f0e:	4b04      	ldr	r3, [pc, #16]	@ (8025f20 <mg_mqtt_connect+0x38>)
 8025f10:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 8025f14:	4628      	mov	r0, r5
 8025f16:	b011      	add	sp, #68	@ 0x44
 8025f18:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8025f1a:	466c      	mov	r4, sp
 8025f1c:	e7f3      	b.n	8025f06 <mg_mqtt_connect+0x1e>
 8025f1e:	bf00      	nop
 8025f20:	08024ae1 	.word	0x08024ae1

08025f24 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8025f24:	b538      	push	{r3, r4, r5, lr}
 8025f26:	4605      	mov	r5, r0
 8025f28:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8025f2a:	680b      	ldr	r3, [r1, #0]
 8025f2c:	b90b      	cbnz	r3, 8025f32 <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8025f2e:	888b      	ldrh	r3, [r1, #4]
 8025f30:	b1a3      	cbz	r3, 8025f5c <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8025f32:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8025f34:	681b      	ldr	r3, [r3, #0]
 8025f36:	b34b      	cbz	r3, 8025f8c <mg_tcpip_init+0x68>
 8025f38:	4620      	mov	r0, r4
 8025f3a:	4798      	blx	r3
 8025f3c:	bb30      	cbnz	r0, 8025f8c <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 8025f3e:	4b3b      	ldr	r3, [pc, #236]	@ (802602c <mg_tcpip_init+0x108>)
 8025f40:	681b      	ldr	r3, [r3, #0]
 8025f42:	2b00      	cmp	r3, #0
 8025f44:	dd5f      	ble.n	8026006 <mg_tcpip_init+0xe2>
 8025f46:	4b3a      	ldr	r3, [pc, #232]	@ (8026030 <mg_tcpip_init+0x10c>)
 8025f48:	f241 7223 	movw	r2, #5923	@ 0x1723
 8025f4c:	4939      	ldr	r1, [pc, #228]	@ (8026034 <mg_tcpip_init+0x110>)
 8025f4e:	2001      	movs	r0, #1
 8025f50:	f7fd f9ca 	bl	80232e8 <mg_log_prefix>
 8025f54:	4838      	ldr	r0, [pc, #224]	@ (8026038 <mg_tcpip_init+0x114>)
 8025f56:	f7fb fa59 	bl	802140c <mg_log>
 8025f5a:	e054      	b.n	8026006 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 8025f5c:	4608      	mov	r0, r1
 8025f5e:	2302      	movs	r3, #2
 8025f60:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8025f64:	2105      	movs	r1, #5
 8025f66:	f7fc fde6 	bl	8022b36 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 8025f6a:	4b30      	ldr	r3, [pc, #192]	@ (802602c <mg_tcpip_init+0x108>)
 8025f6c:	681b      	ldr	r3, [r3, #0]
 8025f6e:	2b01      	cmp	r3, #1
 8025f70:	dddf      	ble.n	8025f32 <mg_tcpip_init+0xe>
 8025f72:	4b2f      	ldr	r3, [pc, #188]	@ (8026030 <mg_tcpip_init+0x10c>)
 8025f74:	f241 721f 	movw	r2, #5919	@ 0x171f
 8025f78:	492e      	ldr	r1, [pc, #184]	@ (8026034 <mg_tcpip_init+0x110>)
 8025f7a:	2002      	movs	r0, #2
 8025f7c:	f7fd f9b4 	bl	80232e8 <mg_log_prefix>
 8025f80:	4622      	mov	r2, r4
 8025f82:	492e      	ldr	r1, [pc, #184]	@ (802603c <mg_tcpip_init+0x118>)
 8025f84:	482e      	ldr	r0, [pc, #184]	@ (8026040 <mg_tcpip_init+0x11c>)
 8025f86:	f7fb fa41 	bl	802140c <mg_log>
 8025f8a:	e7d2      	b.n	8025f32 <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8025f8c:	f240 6104 	movw	r1, #1540	@ 0x604
 8025f90:	2001      	movs	r0, #1
 8025f92:	f7f9 ff44 	bl	801fe1e <mg_calloc>
 8025f96:	6160      	str	r0, [r4, #20]
 8025f98:	f240 6304 	movw	r3, #1540	@ 0x604
 8025f9c:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 8025f9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8025fa0:	b92b      	cbnz	r3, 8025fae <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8025fa2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8025fa4:	689b      	ldr	r3, [r3, #8]
 8025fa6:	b37b      	cbz	r3, 8026008 <mg_tcpip_init+0xe4>
 8025fa8:	f240 6304 	movw	r3, #1540	@ 0x604
 8025fac:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8025fae:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8025fb0:	2001      	movs	r0, #1
 8025fb2:	f7f9 ff34 	bl	801fe1e <mg_calloc>
 8025fb6:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8025fb8:	f7fd f991 	bl	80232de <mg_millis>
 8025fbc:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 8025fc0:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 8025fc2:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8025fc4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8025fc8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 8025fcc:	2330      	movs	r3, #48	@ 0x30
 8025fce:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8025fd0:	68a3      	ldr	r3, [r4, #8]
 8025fd2:	b90b      	cbnz	r3, 8025fd8 <mg_tcpip_init+0xb4>
 8025fd4:	2301      	movs	r3, #1
 8025fd6:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 8025fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025fdc:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8025fe0:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8025fe4:	2102      	movs	r1, #2
 8025fe6:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8025fea:	f7fc fda4 	bl	8022b36 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8025fee:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8025ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8025ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8025ffa:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8025ffe:	6963      	ldr	r3, [r4, #20]
 8026000:	b12b      	cbz	r3, 802600e <mg_tcpip_init+0xea>
 8026002:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8026004:	b11b      	cbz	r3, 802600e <mg_tcpip_init+0xea>
}
 8026006:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8026008:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 802600c:	e7ce      	b.n	8025fac <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802600e:	4b07      	ldr	r3, [pc, #28]	@ (802602c <mg_tcpip_init+0x108>)
 8026010:	681b      	ldr	r3, [r3, #0]
 8026012:	2b00      	cmp	r3, #0
 8026014:	ddf7      	ble.n	8026006 <mg_tcpip_init+0xe2>
 8026016:	4b06      	ldr	r3, [pc, #24]	@ (8026030 <mg_tcpip_init+0x10c>)
 8026018:	f241 7234 	movw	r2, #5940	@ 0x1734
 802601c:	4905      	ldr	r1, [pc, #20]	@ (8026034 <mg_tcpip_init+0x110>)
 802601e:	2001      	movs	r0, #1
 8026020:	f7fd f962 	bl	80232e8 <mg_log_prefix>
 8026024:	4807      	ldr	r0, [pc, #28]	@ (8026044 <mg_tcpip_init+0x120>)
 8026026:	f7fb f9f1 	bl	802140c <mg_log>
}
 802602a:	e7ec      	b.n	8026006 <mg_tcpip_init+0xe2>
 802602c:	200000a8 	.word	0x200000a8
 8026030:	08037b74 	.word	0x08037b74
 8026034:	080371d4 	.word	0x080371d4
 8026038:	08037860 	.word	0x08037860
 802603c:	080213dd 	.word	0x080213dd
 8026040:	0803783c 	.word	0x0803783c
 8026044:	080377fc 	.word	0x080377fc

08026048 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 8026048:	b510      	push	{r4, lr}
 802604a:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 802604c:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 8026050:	2b03      	cmp	r3, #3
 8026052:	d011      	beq.n	8026078 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8026054:	2b01      	cmp	r3, #1
 8026056:	d04f      	beq.n	80260f8 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8026058:	b9f3      	cbnz	r3, 8026098 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 802605a:	4b31      	ldr	r3, [pc, #196]	@ (8026120 <onstatechange+0xd8>)
 802605c:	681b      	ldr	r3, [r3, #0]
 802605e:	2b00      	cmp	r3, #0
 8026060:	dd1a      	ble.n	8026098 <onstatechange+0x50>
 8026062:	4b30      	ldr	r3, [pc, #192]	@ (8026124 <onstatechange+0xdc>)
 8026064:	f241 4209 	movw	r2, #5129	@ 0x1409
 8026068:	492f      	ldr	r1, [pc, #188]	@ (8026128 <onstatechange+0xe0>)
 802606a:	2001      	movs	r0, #1
 802606c:	f7fd f93c 	bl	80232e8 <mg_log_prefix>
 8026070:	482e      	ldr	r0, [pc, #184]	@ (802612c <onstatechange+0xe4>)
 8026072:	f7fb f9cb 	bl	802140c <mg_log>
 8026076:	e00f      	b.n	8026098 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8026078:	4b29      	ldr	r3, [pc, #164]	@ (8026120 <onstatechange+0xd8>)
 802607a:	681b      	ldr	r3, [r3, #0]
 802607c:	2b01      	cmp	r3, #1
 802607e:	dc12      	bgt.n	80260a6 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8026080:	4b27      	ldr	r3, [pc, #156]	@ (8026120 <onstatechange+0xd8>)
 8026082:	681b      	ldr	r3, [r3, #0]
 8026084:	2b01      	cmp	r3, #1
 8026086:	dc1c      	bgt.n	80260c2 <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8026088:	4b25      	ldr	r3, [pc, #148]	@ (8026120 <onstatechange+0xd8>)
 802608a:	681b      	ldr	r3, [r3, #0]
 802608c:	2b01      	cmp	r3, #1
 802608e:	dc26      	bgt.n	80260de <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 8026090:	6921      	ldr	r1, [r4, #16]
 8026092:	4620      	mov	r0, r4
 8026094:	f7fc ff1f 	bl	8022ed6 <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8026098:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 802609c:	2100      	movs	r1, #0
 802609e:	4620      	mov	r0, r4
 80260a0:	f7f9 fc0f 	bl	801f8c2 <mg_tcpip_call>
}
 80260a4:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 80260a6:	4b1f      	ldr	r3, [pc, #124]	@ (8026124 <onstatechange+0xdc>)
 80260a8:	f241 4201 	movw	r2, #5121	@ 0x1401
 80260ac:	491e      	ldr	r1, [pc, #120]	@ (8026128 <onstatechange+0xe0>)
 80260ae:	2002      	movs	r0, #2
 80260b0:	f7fd f91a 	bl	80232e8 <mg_log_prefix>
 80260b4:	f104 0208 	add.w	r2, r4, #8
 80260b8:	491d      	ldr	r1, [pc, #116]	@ (8026130 <onstatechange+0xe8>)
 80260ba:	481e      	ldr	r0, [pc, #120]	@ (8026134 <onstatechange+0xec>)
 80260bc:	f7fb f9a6 	bl	802140c <mg_log>
 80260c0:	e7de      	b.n	8026080 <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 80260c2:	4b18      	ldr	r3, [pc, #96]	@ (8026124 <onstatechange+0xdc>)
 80260c4:	f241 4202 	movw	r2, #5122	@ 0x1402
 80260c8:	4917      	ldr	r1, [pc, #92]	@ (8026128 <onstatechange+0xe0>)
 80260ca:	2002      	movs	r0, #2
 80260cc:	f7fd f90c 	bl	80232e8 <mg_log_prefix>
 80260d0:	f104 0210 	add.w	r2, r4, #16
 80260d4:	4916      	ldr	r1, [pc, #88]	@ (8026130 <onstatechange+0xe8>)
 80260d6:	4818      	ldr	r0, [pc, #96]	@ (8026138 <onstatechange+0xf0>)
 80260d8:	f7fb f998 	bl	802140c <mg_log>
 80260dc:	e7d4      	b.n	8026088 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 80260de:	4b11      	ldr	r3, [pc, #68]	@ (8026124 <onstatechange+0xdc>)
 80260e0:	f241 4203 	movw	r2, #5123	@ 0x1403
 80260e4:	4910      	ldr	r1, [pc, #64]	@ (8026128 <onstatechange+0xe0>)
 80260e6:	2002      	movs	r0, #2
 80260e8:	f7fd f8fe 	bl	80232e8 <mg_log_prefix>
 80260ec:	4622      	mov	r2, r4
 80260ee:	4913      	ldr	r1, [pc, #76]	@ (802613c <onstatechange+0xf4>)
 80260f0:	4813      	ldr	r0, [pc, #76]	@ (8026140 <onstatechange+0xf8>)
 80260f2:	f7fb f98b 	bl	802140c <mg_log>
 80260f6:	e7cb      	b.n	8026090 <onstatechange+0x48>
    MG_ERROR(("Link up"));
 80260f8:	4b09      	ldr	r3, [pc, #36]	@ (8026120 <onstatechange+0xd8>)
 80260fa:	681b      	ldr	r3, [r3, #0]
 80260fc:	2b00      	cmp	r3, #0
 80260fe:	dc04      	bgt.n	802610a <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 8026100:	f7fd f8ed 	bl	80232de <mg_millis>
 8026104:	f002 ff9c 	bl	8029040 <srand>
 8026108:	e7c6      	b.n	8026098 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 802610a:	4b06      	ldr	r3, [pc, #24]	@ (8026124 <onstatechange+0xdc>)
 802610c:	f241 4206 	movw	r2, #5126	@ 0x1406
 8026110:	4905      	ldr	r1, [pc, #20]	@ (8026128 <onstatechange+0xe0>)
 8026112:	2001      	movs	r0, #1
 8026114:	f7fd f8e8 	bl	80232e8 <mg_log_prefix>
 8026118:	480a      	ldr	r0, [pc, #40]	@ (8026144 <onstatechange+0xfc>)
 802611a:	f7fb f977 	bl	802140c <mg_log>
 802611e:	e7ef      	b.n	8026100 <onstatechange+0xb8>
 8026120:	200000a8 	.word	0x200000a8
 8026124:	08037b20 	.word	0x08037b20
 8026128:	080371d4 	.word	0x080371d4
 802612c:	080378ac 	.word	0x080378ac
 8026130:	080213cd 	.word	0x080213cd
 8026134:	08037874 	.word	0x08037874
 8026138:	08037884 	.word	0x08037884
 802613c:	080213dd 	.word	0x080213dd
 8026140:	08037894 	.word	0x08037894
 8026144:	080378a4 	.word	0x080378a4

08026148 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802614c:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 802614e:	2300      	movs	r3, #0
 8026150:	9305      	str	r3, [sp, #20]
 8026152:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 8026154:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 8026158:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802615c:	680e      	ldr	r6, [r1, #0]
 802615e:	684b      	ldr	r3, [r1, #4]
 8026160:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8026162:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 8026166:	42b3      	cmp	r3, r6
 8026168:	d87b      	bhi.n	8026262 <rx_dhcp_client+0x11a>
 802616a:	4605      	mov	r5, r0
 802616c:	460f      	mov	r7, r1
 802616e:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8026172:	2204      	movs	r2, #4
 8026174:	1c81      	adds	r1, r0, #2
 8026176:	eb08 0002 	add.w	r0, r8, r2
 802617a:	f003 fc1d 	bl	80299b8 <memcmp>
 802617e:	2800      	cmp	r0, #0
 8026180:	d16f      	bne.n	8026262 <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 8026182:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8026186:	4648      	mov	r0, r9
 8026188:	f8cd 9004 	str.w	r9, [sp, #4]
 802618c:	f8cd 9000 	str.w	r9, [sp]
 8026190:	46cb      	mov	fp, r9
 8026192:	e026      	b.n	80261e2 <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8026194:	7862      	ldrb	r2, [r4, #1]
 8026196:	2a04      	cmp	r2, #4
 8026198:	d12b      	bne.n	80261f2 <rx_dhcp_client+0xaa>
 802619a:	1da2      	adds	r2, r4, #6
 802619c:	42b2      	cmp	r2, r6
 802619e:	d228      	bcs.n	80261f2 <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 80261a0:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80261a4:	9301      	str	r3, [sp, #4]
 80261a6:	e019      	b.n	80261dc <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 80261a8:	7862      	ldrb	r2, [r4, #1]
 80261aa:	2a04      	cmp	r2, #4
 80261ac:	d123      	bne.n	80261f6 <rx_dhcp_client+0xae>
 80261ae:	1da2      	adds	r2, r4, #6
 80261b0:	42b2      	cmp	r2, r6
 80261b2:	d220      	bcs.n	80261f6 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 80261b4:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 80261b8:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80261bc:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 80261be:	e00d      	b.n	80261dc <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80261c0:	7862      	ldrb	r2, [r4, #1]
 80261c2:	2a04      	cmp	r2, #4
 80261c4:	d11b      	bne.n	80261fe <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 80261c6:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80261c8:	42b2      	cmp	r2, r6
 80261ca:	d218      	bcs.n	80261fe <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 80261cc:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80261d0:	9305      	str	r3, [sp, #20]
 80261d2:	e003      	b.n	80261dc <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80261d4:	2b33      	cmp	r3, #51	@ 0x33
 80261d6:	d022      	beq.n	802621e <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80261d8:	2b35      	cmp	r3, #53	@ 0x35
 80261da:	d02b      	beq.n	8026234 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 80261dc:	7863      	ldrb	r3, [r4, #1]
 80261de:	3302      	adds	r3, #2
 80261e0:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 80261e2:	1c63      	adds	r3, r4, #1
 80261e4:	42b3      	cmp	r3, r6
 80261e6:	d22e      	bcs.n	8026246 <rx_dhcp_client+0xfe>
 80261e8:	7823      	ldrb	r3, [r4, #0]
 80261ea:	2bff      	cmp	r3, #255	@ 0xff
 80261ec:	d02b      	beq.n	8026246 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 80261ee:	2b01      	cmp	r3, #1
 80261f0:	d0d0      	beq.n	8026194 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 80261f2:	2b03      	cmp	r3, #3
 80261f4:	d0d8      	beq.n	80261a8 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80261f6:	7fea      	ldrb	r2, [r5, #31]
 80261f8:	b10a      	cbz	r2, 80261fe <rx_dhcp_client+0xb6>
 80261fa:	2b06      	cmp	r3, #6
 80261fc:	d0e0      	beq.n	80261c0 <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 80261fe:	f895 2020 	ldrb.w	r2, [r5, #32]
 8026202:	2a00      	cmp	r2, #0
 8026204:	d0e6      	beq.n	80261d4 <rx_dhcp_client+0x8c>
 8026206:	2b2a      	cmp	r3, #42	@ 0x2a
 8026208:	d1e4      	bne.n	80261d4 <rx_dhcp_client+0x8c>
 802620a:	7862      	ldrb	r2, [r4, #1]
 802620c:	2a04      	cmp	r2, #4
 802620e:	d1e1      	bne.n	80261d4 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 8026210:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8026212:	42b2      	cmp	r2, r6
 8026214:	d2de      	bcs.n	80261d4 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 8026216:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802621a:	9304      	str	r3, [sp, #16]
 802621c:	e7de      	b.n	80261dc <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802621e:	7862      	ldrb	r2, [r4, #1]
 8026220:	2a04      	cmp	r2, #4
 8026222:	d1d9      	bne.n	80261d8 <rx_dhcp_client+0x90>
 8026224:	1da2      	adds	r2, r4, #6
 8026226:	42b2      	cmp	r2, r6
 8026228:	d2d6      	bcs.n	80261d8 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 802622a:	f8d4 0002 	ldr.w	r0, [r4, #2]
 802622e:	f7fc fcbd 	bl	8022bac <mg_ntohl>
 8026232:	e7d3      	b.n	80261dc <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8026234:	7863      	ldrb	r3, [r4, #1]
 8026236:	2b01      	cmp	r3, #1
 8026238:	d1d0      	bne.n	80261dc <rx_dhcp_client+0x94>
 802623a:	1da3      	adds	r3, r4, #6
 802623c:	42b3      	cmp	r3, r6
 802623e:	d2cd      	bcs.n	80261dc <rx_dhcp_client+0x94>
      msgtype = p[2];
 8026240:	f894 9002 	ldrb.w	r9, [r4, #2]
 8026244:	e7ca      	b.n	80261dc <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8026246:	f1b9 0f06 	cmp.w	r9, #6
 802624a:	d00d      	beq.n	8026268 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802624c:	f1b9 0f02 	cmp.w	r9, #2
 8026250:	d013      	beq.n	802627a <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 8026252:	f1b9 0f05 	cmp.w	r9, #5
 8026256:	d028      	beq.n	80262aa <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 8026258:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802625c:	4553      	cmp	r3, sl
 802625e:	f040 80b4 	bne.w	80263ca <rx_dhcp_client+0x282>
}
 8026262:	b007      	add	sp, #28
 8026264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8026268:	68ab      	ldr	r3, [r5, #8]
 802626a:	455b      	cmp	r3, fp
 802626c:	d1ee      	bne.n	802624c <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 802626e:	2301      	movs	r3, #1
 8026270:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8026274:	2300      	movs	r3, #0
 8026276:	60ab      	str	r3, [r5, #8]
 8026278:	e7ee      	b.n	8026258 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802627a:	f1ba 0f01 	cmp.w	sl, #1
 802627e:	d1e8      	bne.n	8026252 <rx_dhcp_client+0x10a>
 8026280:	f1bb 0f00 	cmp.w	fp, #0
 8026284:	d0e5      	beq.n	8026252 <rx_dhcp_client+0x10a>
 8026286:	9b00      	ldr	r3, [sp, #0]
 8026288:	2b00      	cmp	r3, #0
 802628a:	d0e2      	beq.n	8026252 <rx_dhcp_client+0x10a>
 802628c:	2800      	cmp	r0, #0
 802628e:	d0e0      	beq.n	8026252 <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8026290:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 8026294:	b90a      	cbnz	r2, 802629a <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8026296:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 8026298:	68da      	ldr	r2, [r3, #12]
 802629a:	4659      	mov	r1, fp
 802629c:	4628      	mov	r0, r5
 802629e:	f7ff f9b9 	bl	8025614 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 80262a2:	2302      	movs	r3, #2
 80262a4:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 80262a8:	e7d6      	b.n	8026258 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80262aa:	f1ba 0f02 	cmp.w	sl, #2
 80262ae:	d02a      	beq.n	8026306 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 80262b0:	f1ba 0f03 	cmp.w	sl, #3
 80262b4:	d1d0      	bne.n	8026258 <rx_dhcp_client+0x110>
 80262b6:	68ab      	ldr	r3, [r5, #8]
 80262b8:	455b      	cmp	r3, fp
 80262ba:	d1cd      	bne.n	8026258 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 80262bc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80262be:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80262c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80262c4:	4604      	mov	r4, r0
 80262c6:	fb00 f202 	mul.w	r2, r0, r2
 80262ca:	189b      	adds	r3, r3, r2
 80262cc:	f141 0100 	adc.w	r1, r1, #0
 80262d0:	662b      	str	r3, [r5, #96]	@ 0x60
 80262d2:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80262d4:	4b3f      	ldr	r3, [pc, #252]	@ (80263d4 <rx_dhcp_client+0x28c>)
 80262d6:	681b      	ldr	r3, [r3, #0]
 80262d8:	2b01      	cmp	r3, #1
 80262da:	ddbd      	ble.n	8026258 <rx_dhcp_client+0x110>
 80262dc:	4b3e      	ldr	r3, [pc, #248]	@ (80263d8 <rx_dhcp_client+0x290>)
 80262de:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 80262e2:	493e      	ldr	r1, [pc, #248]	@ (80263dc <rx_dhcp_client+0x294>)
 80262e4:	2002      	movs	r0, #2
 80262e6:	f7fc ffff 	bl	80232e8 <mg_log_prefix>
 80262ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80262ee:	2300      	movs	r3, #0
 80262f0:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 80262f4:	f7ea fd30 	bl	8010d58 <__aeabi_uldivmod>
 80262f8:	4602      	mov	r2, r0
 80262fa:	460b      	mov	r3, r1
 80262fc:	4621      	mov	r1, r4
 80262fe:	4838      	ldr	r0, [pc, #224]	@ (80263e0 <rx_dhcp_client+0x298>)
 8026300:	f7fb f884 	bl	802140c <mg_log>
 8026304:	e7a8      	b.n	8026258 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8026306:	f1bb 0f00 	cmp.w	fp, #0
 802630a:	d0d1      	beq.n	80262b0 <rx_dhcp_client+0x168>
 802630c:	9b00      	ldr	r3, [sp, #0]
 802630e:	2b00      	cmp	r3, #0
 8026310:	d0ce      	beq.n	80262b0 <rx_dhcp_client+0x168>
 8026312:	4604      	mov	r4, r0
 8026314:	2800      	cmp	r0, #0
 8026316:	d0cb      	beq.n	80262b0 <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 8026318:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802631a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802631c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8026320:	fb00 f202 	mul.w	r2, r0, r2
 8026324:	189b      	adds	r3, r3, r2
 8026326:	f141 0100 	adc.w	r1, r1, #0
 802632a:	662b      	str	r3, [r5, #96]	@ 0x60
 802632c:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802632e:	4b29      	ldr	r3, [pc, #164]	@ (80263d4 <rx_dhcp_client+0x28c>)
 8026330:	681b      	ldr	r3, [r3, #0]
 8026332:	2b01      	cmp	r3, #1
 8026334:	dc2e      	bgt.n	8026394 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8026336:	693b      	ldr	r3, [r7, #16]
 8026338:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802633c:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 8026340:	895b      	ldrh	r3, [r3, #10]
 8026342:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8026346:	f8c5 b008 	str.w	fp, [r5, #8]
 802634a:	9b00      	ldr	r3, [sp, #0]
 802634c:	612b      	str	r3, [r5, #16]
 802634e:	9b01      	ldr	r3, [sp, #4]
 8026350:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 8026352:	2303      	movs	r3, #3
 8026354:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 8026358:	2108      	movs	r1, #8
 802635a:	eb0d 0001 	add.w	r0, sp, r1
 802635e:	f7fc fbea 	bl	8022b36 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8026362:	9c02      	ldr	r4, [sp, #8]
 8026364:	f7fc ffbb 	bl	80232de <mg_millis>
 8026368:	4420      	add	r0, r4
 802636a:	f002 fe69 	bl	8029040 <srand>
      if (ifp->enable_req_dns && dns != 0)
 802636e:	7feb      	ldrb	r3, [r5, #31]
 8026370:	b10b      	cbz	r3, 8026376 <rx_dhcp_client+0x22e>
 8026372:	9b05      	ldr	r3, [sp, #20]
 8026374:	bb1b      	cbnz	r3, 80263be <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 8026376:	f895 3020 	ldrb.w	r3, [r5, #32]
 802637a:	2b00      	cmp	r3, #0
 802637c:	f43f af6c 	beq.w	8026258 <rx_dhcp_client+0x110>
 8026380:	9b04      	ldr	r3, [sp, #16]
 8026382:	2b00      	cmp	r3, #0
 8026384:	f43f af68 	beq.w	8026258 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8026388:	aa04      	add	r2, sp, #16
 802638a:	2102      	movs	r1, #2
 802638c:	4628      	mov	r0, r5
 802638e:	f7f9 fa98 	bl	801f8c2 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8026392:	e761      	b.n	8026258 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8026394:	4b10      	ldr	r3, [pc, #64]	@ (80263d8 <rx_dhcp_client+0x290>)
 8026396:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 802639a:	4910      	ldr	r1, [pc, #64]	@ (80263dc <rx_dhcp_client+0x294>)
 802639c:	2002      	movs	r0, #2
 802639e:	f7fc ffa3 	bl	80232e8 <mg_log_prefix>
 80263a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80263a6:	2300      	movs	r3, #0
 80263a8:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 80263ac:	f7ea fcd4 	bl	8010d58 <__aeabi_uldivmod>
 80263b0:	4602      	mov	r2, r0
 80263b2:	460b      	mov	r3, r1
 80263b4:	4621      	mov	r1, r4
 80263b6:	480a      	ldr	r0, [pc, #40]	@ (80263e0 <rx_dhcp_client+0x298>)
 80263b8:	f7fb f828 	bl	802140c <mg_log>
 80263bc:	e7bb      	b.n	8026336 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 80263be:	aa05      	add	r2, sp, #20
 80263c0:	2101      	movs	r1, #1
 80263c2:	4628      	mov	r0, r5
 80263c4:	f7f9 fa7d 	bl	801f8c2 <mg_tcpip_call>
 80263c8:	e7d5      	b.n	8026376 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 80263ca:	4628      	mov	r0, r5
 80263cc:	f7ff fe3c 	bl	8026048 <onstatechange>
 80263d0:	e747      	b.n	8026262 <rx_dhcp_client+0x11a>
 80263d2:	bf00      	nop
 80263d4:	200000a8 	.word	0x200000a8
 80263d8:	08037ae0 	.word	0x08037ae0
 80263dc:	080371d4 	.word	0x080371d4
 80263e0:	080378b8 	.word	0x080378b8

080263e4 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80263e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80263e8:	b084      	sub	sp, #16
 80263ea:	4605      	mov	r5, r0
 80263ec:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 80263ee:	69c9      	ldr	r1, [r1, #28]
 80263f0:	88cb      	ldrh	r3, [r1, #6]
 80263f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80263f6:	b29b      	uxth	r3, r3
 80263f8:	b1c3      	cbz	r3, 802642c <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 80263fa:	7a4b      	ldrb	r3, [r1, #9]
 80263fc:	2b11      	cmp	r3, #17
 80263fe:	d00e      	beq.n	802641e <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8026400:	7a4b      	ldrb	r3, [r1, #9]
 8026402:	2b06      	cmp	r3, #6
 8026404:	d00f      	beq.n	8026426 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8026406:	2200      	movs	r2, #0
 8026408:	4621      	mov	r1, r4
 802640a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 802640c:	f7f9 fd15 	bl	801fe3a <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 8026410:	b110      	cbz	r0, 8026418 <rx_ip+0x34>
 8026412:	4963      	ldr	r1, [pc, #396]	@ (80265a0 <rx_ip+0x1bc>)
 8026414:	f7fd f850 	bl	80234b8 <mg_error>
}
 8026418:	b004      	add	sp, #16
 802641a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802641e:	f101 0314 	add.w	r3, r1, #20
 8026422:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8026424:	e7ec      	b.n	8026400 <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8026426:	3114      	adds	r1, #20
 8026428:	62a1      	str	r1, [r4, #40]	@ 0x28
 802642a:	e7ec      	b.n	8026406 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 802642c:	7a4b      	ldrb	r3, [r1, #9]
 802642e:	2b01      	cmp	r3, #1
 8026430:	d024      	beq.n	802647c <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 8026432:	2b11      	cmp	r3, #17
 8026434:	d031      	beq.n	802649a <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 8026436:	2b06      	cmp	r3, #6
 8026438:	d1ee      	bne.n	8026418 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 802643a:	f101 0314 	add.w	r3, r1, #20
 802643e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8026440:	68e3      	ldr	r3, [r4, #12]
 8026442:	2b13      	cmp	r3, #19
 8026444:	d9e8      	bls.n	8026418 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 8026446:	3128      	adds	r1, #40	@ 0x28
 8026448:	4620      	mov	r0, r4
 802644a:	f7fb f965 	bl	8021718 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 802644e:	69e3      	ldr	r3, [r4, #28]
 8026450:	8858      	ldrh	r0, [r3, #2]
 8026452:	f7fc fc43 	bl	8022cdc <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8026456:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8026458:	7b1b      	ldrb	r3, [r3, #12]
 802645a:	091b      	lsrs	r3, r3, #4
 802645c:	3305      	adds	r3, #5
 802645e:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8026460:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8026464:	d301      	bcc.n	802646a <rx_ip+0x86>
 8026466:	1a80      	subs	r0, r0, r2
 8026468:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802646a:	4b4e      	ldr	r3, [pc, #312]	@ (80265a4 <rx_ip+0x1c0>)
 802646c:	681b      	ldr	r3, [r3, #0]
 802646e:	2b03      	cmp	r3, #3
 8026470:	dc74      	bgt.n	802655c <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 8026472:	4621      	mov	r1, r4
 8026474:	4628      	mov	r0, r5
 8026476:	f7ff fb3d 	bl	8025af4 <rx_tcp>
 802647a:	e7cd      	b.n	8026418 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 802647c:	f101 0314 	add.w	r3, r1, #20
 8026480:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8026482:	68e3      	ldr	r3, [r4, #12]
 8026484:	2b03      	cmp	r3, #3
 8026486:	d9c7      	bls.n	8026418 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 8026488:	3118      	adds	r1, #24
 802648a:	4620      	mov	r0, r4
 802648c:	f7fb f944 	bl	8021718 <mkpay>
    rx_icmp(ifp, pkt);
 8026490:	4621      	mov	r1, r4
 8026492:	4628      	mov	r0, r5
 8026494:	f7fc fc77 	bl	8022d86 <rx_icmp>
 8026498:	e7be      	b.n	8026418 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 802649a:	f101 0314 	add.w	r3, r1, #20
 802649e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 80264a0:	68e3      	ldr	r3, [r4, #12]
 80264a2:	2b07      	cmp	r3, #7
 80264a4:	d9b8      	bls.n	8026418 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 80264a6:	311c      	adds	r1, #28
 80264a8:	4620      	mov	r0, r4
 80264aa:	f7fb f935 	bl	8021718 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80264ae:	4b3d      	ldr	r3, [pc, #244]	@ (80265a4 <rx_ip+0x1c0>)
 80264b0:	681b      	ldr	r3, [r3, #0]
 80264b2:	2b03      	cmp	r3, #3
 80264b4:	dc16      	bgt.n	80264e4 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 80264b6:	7f2b      	ldrb	r3, [r5, #28]
 80264b8:	b133      	cbz	r3, 80264c8 <rx_ip+0xe4>
 80264ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80264bc:	8877      	ldrh	r7, [r6, #2]
 80264be:	2044      	movs	r0, #68	@ 0x44
 80264c0:	f7fc fc0c 	bl	8022cdc <mg_ntohs>
 80264c4:	4287      	cmp	r7, r0
 80264c6:	d02f      	beq.n	8026528 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 80264c8:	7f6b      	ldrb	r3, [r5, #29]
 80264ca:	b133      	cbz	r3, 80264da <rx_ip+0xf6>
 80264cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80264ce:	8877      	ldrh	r7, [r6, #2]
 80264d0:	2043      	movs	r0, #67	@ 0x43
 80264d2:	f7fc fc03 	bl	8022cdc <mg_ntohs>
 80264d6:	4287      	cmp	r7, r0
 80264d8:	d033      	beq.n	8026542 <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 80264da:	4621      	mov	r1, r4
 80264dc:	4628      	mov	r0, r5
 80264de:	f7fd fe03 	bl	80240e8 <rx_udp>
 80264e2:	e799      	b.n	8026418 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80264e4:	4b30      	ldr	r3, [pc, #192]	@ (80265a8 <rx_ip+0x1c4>)
 80264e6:	f241 6255 	movw	r2, #5717	@ 0x1655
 80264ea:	4930      	ldr	r1, [pc, #192]	@ (80265ac <rx_ip+0x1c8>)
 80264ec:	2004      	movs	r0, #4
 80264ee:	f7fc fefb 	bl	80232e8 <mg_log_prefix>
 80264f2:	69e7      	ldr	r7, [r4, #28]
 80264f4:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 80264f8:	f8b8 0000 	ldrh.w	r0, [r8]
 80264fc:	f7fc fbee 	bl	8022cdc <mg_ntohs>
 8026500:	4606      	mov	r6, r0
 8026502:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8026506:	f7fc fbe9 	bl	8022cdc <mg_ntohs>
 802650a:	68e3      	ldr	r3, [r4, #12]
 802650c:	4928      	ldr	r1, [pc, #160]	@ (80265b0 <rx_ip+0x1cc>)
 802650e:	9303      	str	r3, [sp, #12]
 8026510:	9002      	str	r0, [sp, #8]
 8026512:	f107 0310 	add.w	r3, r7, #16
 8026516:	9301      	str	r3, [sp, #4]
 8026518:	9100      	str	r1, [sp, #0]
 802651a:	4633      	mov	r3, r6
 802651c:	f107 020c 	add.w	r2, r7, #12
 8026520:	4824      	ldr	r0, [pc, #144]	@ (80265b4 <rx_ip+0x1d0>)
 8026522:	f7fa ff73 	bl	802140c <mg_log>
 8026526:	e7c6      	b.n	80264b6 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8026528:	f106 0308 	add.w	r3, r6, #8
 802652c:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 802652e:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 8026532:	4620      	mov	r0, r4
 8026534:	f7fb f8f0 	bl	8021718 <mkpay>
      rx_dhcp_client(ifp, pkt);
 8026538:	4621      	mov	r1, r4
 802653a:	4628      	mov	r0, r5
 802653c:	f7ff fe04 	bl	8026148 <rx_dhcp_client>
 8026540:	e76a      	b.n	8026418 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8026542:	f106 0308 	add.w	r3, r6, #8
 8026546:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8026548:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 802654c:	4620      	mov	r0, r4
 802654e:	f7fb f8e3 	bl	8021718 <mkpay>
      rx_dhcp_server(ifp, pkt);
 8026552:	4621      	mov	r1, r4
 8026554:	4628      	mov	r0, r5
 8026556:	f7fc fd41 	bl	8022fdc <rx_dhcp_server>
 802655a:	e75d      	b.n	8026418 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802655c:	4b12      	ldr	r3, [pc, #72]	@ (80265a8 <rx_ip+0x1c4>)
 802655e:	f241 626a 	movw	r2, #5738	@ 0x166a
 8026562:	4912      	ldr	r1, [pc, #72]	@ (80265ac <rx_ip+0x1c8>)
 8026564:	2004      	movs	r0, #4
 8026566:	f7fc febf 	bl	80232e8 <mg_log_prefix>
 802656a:	69e7      	ldr	r7, [r4, #28]
 802656c:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8026570:	f8b8 0000 	ldrh.w	r0, [r8]
 8026574:	f7fc fbb2 	bl	8022cdc <mg_ntohs>
 8026578:	4606      	mov	r6, r0
 802657a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802657e:	f7fc fbad 	bl	8022cdc <mg_ntohs>
 8026582:	68e3      	ldr	r3, [r4, #12]
 8026584:	490a      	ldr	r1, [pc, #40]	@ (80265b0 <rx_ip+0x1cc>)
 8026586:	9303      	str	r3, [sp, #12]
 8026588:	9002      	str	r0, [sp, #8]
 802658a:	f107 0310 	add.w	r3, r7, #16
 802658e:	9301      	str	r3, [sp, #4]
 8026590:	9100      	str	r1, [sp, #0]
 8026592:	4633      	mov	r3, r6
 8026594:	f107 020c 	add.w	r2, r7, #12
 8026598:	4807      	ldr	r0, [pc, #28]	@ (80265b8 <rx_ip+0x1d4>)
 802659a:	f7fa ff37 	bl	802140c <mg_log>
 802659e:	e768      	b.n	8026472 <rx_ip+0x8e>
 80265a0:	080378d0 	.word	0x080378d0
 80265a4:	200000a8 	.word	0x200000a8
 80265a8:	08037af0 	.word	0x08037af0
 80265ac:	080371d4 	.word	0x080371d4
 80265b0:	080213cd 	.word	0x080213cd
 80265b4:	080378ec 	.word	0x080378ec
 80265b8:	08037908 	.word	0x08037908

080265bc <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 80265bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80265c0:	b08e      	sub	sp, #56	@ 0x38
 80265c2:	4606      	mov	r6, r0
 80265c4:	460c      	mov	r4, r1
 80265c6:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 80265c8:	2234      	movs	r2, #52	@ 0x34
 80265ca:	2100      	movs	r1, #0
 80265cc:	a801      	add	r0, sp, #4
 80265ce:	f003 fa87 	bl	8029ae0 <memset>
  pkt.raw.buf = (char *) buf;
 80265d2:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 80265d4:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 80265d6:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 80265d8:	2d0d      	cmp	r5, #13
 80265da:	d93f      	bls.n	802665c <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 80265dc:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 80265e0:	b15b      	cbz	r3, 80265fa <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 80265e2:	2206      	movs	r2, #6
 80265e4:	4631      	mov	r1, r6
 80265e6:	4620      	mov	r0, r4
 80265e8:	f003 f9e6 	bl	80299b8 <memcmp>
  if (ifp->enable_mac_check &&
 80265ec:	b128      	cbz	r0, 80265fa <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 80265ee:	2206      	movs	r2, #6
 80265f0:	4945      	ldr	r1, [pc, #276]	@ (8026708 <mg_tcpip_rx+0x14c>)
 80265f2:	4620      	mov	r0, r4
 80265f4:	f003 f9e0 	bl	80299b8 <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 80265f8:	bb80      	cbnz	r0, 802665c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 80265fa:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 80265fe:	b18b      	cbz	r3, 8026624 <mg_tcpip_rx+0x68>
 8026600:	2d04      	cmp	r5, #4
 8026602:	d92e      	bls.n	8026662 <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 8026604:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8026608:	4642      	mov	r2, r8
 802660a:	4621      	mov	r1, r4
 802660c:	2000      	movs	r0, #0
 802660e:	f7fc fe1b 	bl	8023248 <mg_crc32>
 8026612:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8026614:	2204      	movs	r2, #4
 8026616:	4669      	mov	r1, sp
 8026618:	eb04 0008 	add.w	r0, r4, r8
 802661c:	f003 f9cc 	bl	80299b8 <memcmp>
 8026620:	b108      	cbz	r0, 8026626 <mg_tcpip_rx+0x6a>
 8026622:	e01b      	b.n	802665c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 8026624:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 8026626:	89a7      	ldrh	r7, [r4, #12]
 8026628:	f640 0006 	movw	r0, #2054	@ 0x806
 802662c:	f7fc fb56 	bl	8022cdc <mg_ntohs>
 8026630:	4287      	cmp	r7, r0
 8026632:	d018      	beq.n	8026666 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8026634:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8026638:	f7fc fb50 	bl	8022cdc <mg_ntohs>
 802663c:	4287      	cmp	r7, r0
 802663e:	d01b      	beq.n	8026678 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8026640:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8026644:	f7fc fb4a 	bl	8022cdc <mg_ntohs>
 8026648:	4287      	cmp	r7, r0
 802664a:	d028      	beq.n	802669e <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 802664c:	4b2f      	ldr	r3, [pc, #188]	@ (802670c <mg_tcpip_rx+0x150>)
 802664e:	681b      	ldr	r3, [r3, #0]
 8026650:	2b02      	cmp	r3, #2
 8026652:	dc41      	bgt.n	80266d8 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8026654:	4b2d      	ldr	r3, [pc, #180]	@ (802670c <mg_tcpip_rx+0x150>)
 8026656:	681b      	ldr	r3, [r3, #0]
 8026658:	2b03      	cmp	r3, #3
 802665a:	dc4d      	bgt.n	80266f8 <mg_tcpip_rx+0x13c>
}
 802665c:	b00e      	add	sp, #56	@ 0x38
 802665e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 8026662:	46a8      	mov	r8, r5
 8026664:	e7df      	b.n	8026626 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8026666:	340e      	adds	r4, #14
 8026668:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 802666a:	2d29      	cmp	r5, #41	@ 0x29
 802666c:	d9f6      	bls.n	802665c <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 802666e:	a901      	add	r1, sp, #4
 8026670:	4630      	mov	r0, r6
 8026672:	f7fe ff09 	bl	8025488 <rx_arp>
 8026676:	e7f1      	b.n	802665c <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8026678:	f104 030e 	add.w	r3, r4, #14
 802667c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802667e:	2d35      	cmp	r5, #53	@ 0x35
 8026680:	d9ec      	bls.n	802665c <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8026682:	7ba3      	ldrb	r3, [r4, #14]
 8026684:	091b      	lsrs	r3, r3, #4
 8026686:	2b06      	cmp	r3, #6
 8026688:	d1e8      	bne.n	802665c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 802668a:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 802668e:	a801      	add	r0, sp, #4
 8026690:	f7fb f842 	bl	8021718 <mkpay>
    rx_ip6(ifp, &pkt);
 8026694:	a901      	add	r1, sp, #4
 8026696:	4630      	mov	r0, r6
 8026698:	f7fc fbaf 	bl	8022dfa <rx_ip6>
 802669c:	e7de      	b.n	802665c <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 802669e:	f104 030e 	add.w	r3, r4, #14
 80266a2:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80266a4:	2d21      	cmp	r5, #33	@ 0x21
 80266a6:	d9d9      	bls.n	802665c <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 80266a8:	8a20      	ldrh	r0, [r4, #16]
 80266aa:	f7fc fb17 	bl	8022cdc <mg_ntohs>
 80266ae:	300e      	adds	r0, #14
 80266b0:	42a8      	cmp	r0, r5
 80266b2:	d200      	bcs.n	80266b6 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 80266b4:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80266b6:	9b02      	ldr	r3, [sp, #8]
 80266b8:	2b21      	cmp	r3, #33	@ 0x21
 80266ba:	d9cf      	bls.n	802665c <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 80266bc:	7ba3      	ldrb	r3, [r4, #14]
 80266be:	091b      	lsrs	r3, r3, #4
 80266c0:	2b04      	cmp	r3, #4
 80266c2:	d1cb      	bne.n	802665c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 80266c4:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 80266c8:	a801      	add	r0, sp, #4
 80266ca:	f7fb f825 	bl	8021718 <mkpay>
    rx_ip(ifp, &pkt);
 80266ce:	a901      	add	r1, sp, #4
 80266d0:	4630      	mov	r0, r6
 80266d2:	f7ff fe87 	bl	80263e4 <rx_ip>
 80266d6:	e7c1      	b.n	802665c <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 80266d8:	4b0d      	ldr	r3, [pc, #52]	@ (8026710 <mg_tcpip_rx+0x154>)
 80266da:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 80266de:	490d      	ldr	r1, [pc, #52]	@ (8026714 <mg_tcpip_rx+0x158>)
 80266e0:	2003      	movs	r0, #3
 80266e2:	f7fc fe01 	bl	80232e8 <mg_log_prefix>
 80266e6:	9b05      	ldr	r3, [sp, #20]
 80266e8:	8998      	ldrh	r0, [r3, #12]
 80266ea:	f7fc faf7 	bl	8022cdc <mg_ntohs>
 80266ee:	4601      	mov	r1, r0
 80266f0:	4809      	ldr	r0, [pc, #36]	@ (8026718 <mg_tcpip_rx+0x15c>)
 80266f2:	f7fa fe8b 	bl	802140c <mg_log>
 80266f6:	e7ad      	b.n	8026654 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 80266f8:	4641      	mov	r1, r8
 80266fa:	2920      	cmp	r1, #32
 80266fc:	bf28      	it	cs
 80266fe:	2120      	movcs	r1, #32
 8026700:	4620      	mov	r0, r4
 8026702:	f7f9 ffe5 	bl	80206d0 <mg_hexdump>
 8026706:	e7a9      	b.n	802665c <mg_tcpip_rx+0xa0>
 8026708:	08037c5c 	.word	0x08037c5c
 802670c:	200000a8 	.word	0x200000a8
 8026710:	08037b00 	.word	0x08037b00
 8026714:	080371d4 	.word	0x080371d4
 8026718:	08037924 	.word	0x08037924

0802671c <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 802671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026720:	b08b      	sub	sp, #44	@ 0x2c
 8026722:	4605      	mov	r5, r0
 8026724:	4616      	mov	r6, r2
 8026726:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8026728:	9200      	str	r2, [sp, #0]
 802672a:	9301      	str	r3, [sp, #4]
 802672c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8026730:	2300      	movs	r3, #0
 8026732:	3058      	adds	r0, #88	@ 0x58
 8026734:	f7fc f8a4 	bl	8022880 <mg_timer_expired>
  ifp->now = now;
 8026738:	652e      	str	r6, [r5, #80]	@ 0x50
 802673a:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 802673c:	4604      	mov	r4, r0
 802673e:	b318      	cbz	r0, 8026788 <mg_tcpip_poll+0x6c>
 8026740:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8026742:	68db      	ldr	r3, [r3, #12]
 8026744:	b303      	cbz	r3, 8026788 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 8026746:	4628      	mov	r0, r5
 8026748:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 802674a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802674e:	3b00      	subs	r3, #0
 8026750:	bf18      	it	ne
 8026752:	2301      	movne	r3, #1
    if (up != current) {
 8026754:	4298      	cmp	r0, r3
 8026756:	d010      	beq.n	802677a <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8026758:	b120      	cbz	r0, 8026764 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 802675a:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802675c:	2b00      	cmp	r3, #0
 802675e:	d06e      	beq.n	802683e <mg_tcpip_poll+0x122>
 8026760:	2301      	movs	r3, #1
 8026762:	e000      	b.n	8026766 <mg_tcpip_poll+0x4a>
 8026764:	2300      	movs	r3, #0
 8026766:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 802676a:	b918      	cbnz	r0, 8026774 <mg_tcpip_poll+0x58>
 802676c:	7f2b      	ldrb	r3, [r5, #28]
 802676e:	b10b      	cbz	r3, 8026774 <mg_tcpip_poll+0x58>
 8026770:	2300      	movs	r3, #0
 8026772:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8026774:	4628      	mov	r0, r5
 8026776:	f7ff fc67 	bl	8026048 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802677a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802677e:	b91b      	cbnz	r3, 8026788 <mg_tcpip_poll+0x6c>
 8026780:	4ba8      	ldr	r3, [pc, #672]	@ (8026a24 <mg_tcpip_poll+0x308>)
 8026782:	681b      	ldr	r3, [r3, #0]
 8026784:	2b00      	cmp	r3, #0
 8026786:	dc5c      	bgt.n	8026842 <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8026788:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802678c:	2b00      	cmp	r3, #0
 802678e:	f000 8146 	beq.w	8026a1e <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8026792:	2b01      	cmp	r3, #1
 8026794:	d060      	beq.n	8026858 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8026796:	2c00      	cmp	r4, #0
 8026798:	d05f      	beq.n	802685a <mg_tcpip_poll+0x13e>
 802679a:	2b03      	cmp	r3, #3
 802679c:	d15d      	bne.n	802685a <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 802679e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 80267a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 80267a2:	ea52 0103 	orrs.w	r1, r2, r3
 80267a6:	d058      	beq.n	802685a <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 80267a8:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80267aa:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80267ac:	4290      	cmp	r0, r2
 80267ae:	eb71 0403 	sbcs.w	r4, r1, r3
 80267b2:	d262      	bcs.n	802687a <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80267b4:	4c9c      	ldr	r4, [pc, #624]	@ (8026a28 <mg_tcpip_poll+0x30c>)
 80267b6:	1904      	adds	r4, r0, r4
 80267b8:	f141 0c00 	adc.w	ip, r1, #0
 80267bc:	42a2      	cmp	r2, r4
 80267be:	eb73 030c 	sbcs.w	r3, r3, ip
 80267c2:	d24a      	bcs.n	802685a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 80267c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80267c8:	2300      	movs	r3, #0
 80267ca:	f7ea fac5 	bl	8010d58 <__aeabi_uldivmod>
 80267ce:	4602      	mov	r2, r0
 80267d0:	2000      	movs	r0, #0
 80267d2:	1853      	adds	r3, r2, r1
 80267d4:	d25a      	bcs.n	802688c <mg_tcpip_poll+0x170>
 80267d6:	4403      	add	r3, r0
 80267d8:	4894      	ldr	r0, [pc, #592]	@ (8026a2c <mg_tcpip_poll+0x310>)
 80267da:	fba0 4003 	umull	r4, r0, r0, r3
 80267de:	08c0      	lsrs	r0, r0, #3
 80267e0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80267e4:	1a1b      	subs	r3, r3, r0
 80267e6:	1ad3      	subs	r3, r2, r3
 80267e8:	f161 0c00 	sbc.w	ip, r1, #0
 80267ec:	4c90      	ldr	r4, [pc, #576]	@ (8026a30 <mg_tcpip_poll+0x314>)
 80267ee:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 80267f2:	fb03 f000 	mul.w	r0, r3, r0
 80267f6:	fb04 000c 	mla	r0, r4, ip, r0
 80267fa:	fba3 3404 	umull	r3, r4, r3, r4
 80267fe:	4420      	add	r0, r4
 8026800:	089b      	lsrs	r3, r3, #2
 8026802:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 8026806:	0880      	lsrs	r0, r0, #2
 8026808:	0104      	lsls	r4, r0, #4
 802680a:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 802680e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8026812:	ebbc 0c03 	subs.w	ip, ip, r3
 8026816:	eb64 0300 	sbc.w	r3, r4, r0
 802681a:	009b      	lsls	r3, r3, #2
 802681c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8026820:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8026824:	1a12      	subs	r2, r2, r0
 8026826:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 802682a:	430a      	orrs	r2, r1
 802682c:	d115      	bne.n	802685a <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 802682e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026832:	68aa      	ldr	r2, [r5, #8]
 8026834:	497f      	ldr	r1, [pc, #508]	@ (8026a34 <mg_tcpip_poll+0x318>)
 8026836:	4628      	mov	r0, r5
 8026838:	f7fe fdfe 	bl	8025438 <tx_dhcp_request_re>
 802683c:	e00d      	b.n	802685a <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802683e:	2303      	movs	r3, #3
 8026840:	e791      	b.n	8026766 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8026842:	4b7d      	ldr	r3, [pc, #500]	@ (8026a38 <mg_tcpip_poll+0x31c>)
 8026844:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8026848:	497c      	ldr	r1, [pc, #496]	@ (8026a3c <mg_tcpip_poll+0x320>)
 802684a:	2001      	movs	r0, #1
 802684c:	f7fc fd4c 	bl	80232e8 <mg_log_prefix>
 8026850:	487b      	ldr	r0, [pc, #492]	@ (8026a40 <mg_tcpip_poll+0x324>)
 8026852:	f7fa fddb 	bl	802140c <mg_log>
 8026856:	e797      	b.n	8026788 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8026858:	b95c      	cbnz	r4, 8026872 <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 802685a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802685c:	689b      	ldr	r3, [r3, #8]
 802685e:	b1fb      	cbz	r3, 80268a0 <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8026860:	462a      	mov	r2, r5
 8026862:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8026864:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8026866:	4798      	blx	r3
    if (len > 0) {
 8026868:	4602      	mov	r2, r0
 802686a:	b988      	cbnz	r0, 8026890 <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 802686c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802686e:	681c      	ldr	r4, [r3, #0]
 8026870:	e0a3      	b.n	80269ba <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8026872:	4628      	mov	r0, r5
 8026874:	f7fe fdaa 	bl	80253cc <tx_dhcp_discover>
 8026878:	e7ef      	b.n	802685a <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 802687a:	2301      	movs	r3, #1
 802687c:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8026880:	2300      	movs	r3, #0
 8026882:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8026884:	4628      	mov	r0, r5
 8026886:	f7ff fbdf 	bl	8026048 <onstatechange>
 802688a:	e7e6      	b.n	802685a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 802688c:	2001      	movs	r0, #1
 802688e:	e7a2      	b.n	80267d6 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 8026890:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8026892:	3301      	adds	r3, #1
 8026894:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8026896:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8026898:	4628      	mov	r0, r5
 802689a:	f7ff fe8f 	bl	80265bc <mg_tcpip_rx>
 802689e:	e7e5      	b.n	802686c <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 80268a0:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 80268a4:	a909      	add	r1, sp, #36	@ 0x24
 80268a6:	4620      	mov	r0, r4
 80268a8:	f7fa febb 	bl	8021622 <mg_queue_next>
    if (len > 0) {
 80268ac:	4680      	mov	r8, r0
 80268ae:	2800      	cmp	r0, #0
 80268b0:	d0dc      	beq.n	802686c <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 80268b2:	4602      	mov	r2, r0
 80268b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80268b6:	4628      	mov	r0, r5
 80268b8:	f7ff fe80 	bl	80265bc <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 80268bc:	4641      	mov	r1, r8
 80268be:	4620      	mov	r0, r4
 80268c0:	f7fa fecb 	bl	802165a <mg_queue_del>
 80268c4:	e7d2      	b.n	802686c <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 80268c6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 80268ca:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80268ce:	4291      	cmp	r1, r2
 80268d0:	f000 8088 	beq.w	80269e4 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 80268d4:	4b53      	ldr	r3, [pc, #332]	@ (8026a24 <mg_tcpip_poll+0x308>)
 80268d6:	681b      	ldr	r3, [r3, #0]
 80268d8:	2b03      	cmp	r3, #3
 80268da:	dc23      	bgt.n	8026924 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80268dc:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 80268e0:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 80268e4:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 80268e8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80268ec:	f7fc f95e 	bl	8022bac <mg_ntohl>
 80268f0:	9007      	str	r0, [sp, #28]
 80268f2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80268f6:	f7fc f959 	bl	8022bac <mg_ntohl>
 80268fa:	2300      	movs	r3, #0
 80268fc:	9305      	str	r3, [sp, #20]
 80268fe:	9304      	str	r3, [sp, #16]
 8026900:	9003      	str	r0, [sp, #12]
 8026902:	9b07      	ldr	r3, [sp, #28]
 8026904:	9302      	str	r3, [sp, #8]
 8026906:	f8cd b004 	str.w	fp, [sp, #4]
 802690a:	f8cd a000 	str.w	sl, [sp]
 802690e:	2310      	movs	r3, #16
 8026910:	4642      	mov	r2, r8
 8026912:	4649      	mov	r1, r9
 8026914:	4628      	mov	r0, r5
 8026916:	f7fe f9e3 	bl	8024ce0 <tx_tcp>
        s->acked = s->ack;
 802691a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 802691e:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8026922:	e045      	b.n	80269b0 <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8026924:	4b44      	ldr	r3, [pc, #272]	@ (8026a38 <mg_tcpip_poll+0x31c>)
 8026926:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 802692a:	4944      	ldr	r1, [pc, #272]	@ (8026a3c <mg_tcpip_poll+0x320>)
 802692c:	2004      	movs	r0, #4
 802692e:	f7fc fcdb 	bl	80232e8 <mg_log_prefix>
 8026932:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8026936:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 802693a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802693c:	4841      	ldr	r0, [pc, #260]	@ (8026a44 <mg_tcpip_poll+0x328>)
 802693e:	f7fa fd65 	bl	802140c <mg_log>
 8026942:	e7cb      	b.n	80268dc <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 8026944:	4940      	ldr	r1, [pc, #256]	@ (8026a48 <mg_tcpip_poll+0x32c>)
 8026946:	4620      	mov	r0, r4
 8026948:	f7fc fdb6 	bl	80234b8 <mg_error>
 802694c:	e030      	b.n	80269b0 <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 802694e:	493f      	ldr	r1, [pc, #252]	@ (8026a4c <mg_tcpip_poll+0x330>)
 8026950:	4620      	mov	r0, r4
 8026952:	f7fc fdb1 	bl	80234b8 <mg_error>
 8026956:	e02b      	b.n	80269b0 <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 8026958:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802695c:	f043 0320 	orr.w	r3, r3, #32
 8026960:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 8026964:	e028      	b.n	80269b8 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 8026966:	493a      	ldr	r1, [pc, #232]	@ (8026a50 <mg_tcpip_poll+0x334>)
 8026968:	4620      	mov	r0, r4
 802696a:	f7fc fda5 	bl	80234b8 <mg_error>
 802696e:	e01f      	b.n	80269b0 <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8026970:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8026974:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8026978:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 802697c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8026980:	3801      	subs	r0, #1
 8026982:	f7fc f913 	bl	8022bac <mg_ntohl>
 8026986:	9007      	str	r0, [sp, #28]
 8026988:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 802698c:	f7fc f90e 	bl	8022bac <mg_ntohl>
 8026990:	2300      	movs	r3, #0
 8026992:	9305      	str	r3, [sp, #20]
 8026994:	9304      	str	r3, [sp, #16]
 8026996:	9003      	str	r0, [sp, #12]
 8026998:	9b07      	ldr	r3, [sp, #28]
 802699a:	9302      	str	r3, [sp, #8]
 802699c:	f8cd b004 	str.w	fp, [sp, #4]
 80269a0:	f8cd a000 	str.w	sl, [sp]
 80269a4:	2310      	movs	r3, #16
 80269a6:	4642      	mov	r2, r8
 80269a8:	4649      	mov	r1, r9
 80269aa:	4628      	mov	r0, r5
 80269ac:	f7fe f998 	bl	8024ce0 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 80269b0:	2100      	movs	r1, #0
 80269b2:	4620      	mov	r0, r4
 80269b4:	f7fe fa70 	bl	8024e98 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80269b8:	6824      	ldr	r4, [r4, #0]
 80269ba:	b384      	cbz	r4, 8026a1e <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 80269bc:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 80269c0:	f240 1209 	movw	r2, #265	@ 0x109
 80269c4:	421a      	tst	r2, r3
 80269c6:	d1f7      	bne.n	80269b8 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80269c8:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 80269cc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 80269d0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 80269d4:	42b2      	cmp	r2, r6
 80269d6:	41bb      	sbcs	r3, r7
 80269d8:	d2ee      	bcs.n	80269b8 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 80269da:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80269de:	2b01      	cmp	r3, #1
 80269e0:	f43f af71 	beq.w	80268c6 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 80269e4:	2b02      	cmp	r3, #2
 80269e6:	d0ad      	beq.n	8026944 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 80269e8:	2b03      	cmp	r3, #3
 80269ea:	d0b0      	beq.n	802694e <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 80269ec:	2b04      	cmp	r3, #4
 80269ee:	d0b3      	beq.n	8026958 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 80269f0:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 80269f4:	1c5a      	adds	r2, r3, #1
 80269f6:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 80269fa:	2b02      	cmp	r3, #2
 80269fc:	d8b3      	bhi.n	8026966 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 80269fe:	4b09      	ldr	r3, [pc, #36]	@ (8026a24 <mg_tcpip_poll+0x308>)
 8026a00:	681b      	ldr	r3, [r3, #0]
 8026a02:	2b03      	cmp	r3, #3
 8026a04:	ddb4      	ble.n	8026970 <mg_tcpip_poll+0x254>
 8026a06:	4b0c      	ldr	r3, [pc, #48]	@ (8026a38 <mg_tcpip_poll+0x31c>)
 8026a08:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8026a0c:	490b      	ldr	r1, [pc, #44]	@ (8026a3c <mg_tcpip_poll+0x320>)
 8026a0e:	2004      	movs	r0, #4
 8026a10:	f7fc fc6a 	bl	80232e8 <mg_log_prefix>
 8026a14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026a16:	480f      	ldr	r0, [pc, #60]	@ (8026a54 <mg_tcpip_poll+0x338>)
 8026a18:	f7fa fcf8 	bl	802140c <mg_log>
 8026a1c:	e7a8      	b.n	8026970 <mg_tcpip_poll+0x254>
}
 8026a1e:	b00b      	add	sp, #44	@ 0x2c
 8026a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a24:	200000a8 	.word	0x200000a8
 8026a28:	001b7740 	.word	0x001b7740
 8026a2c:	88888889 	.word	0x88888889
 8026a30:	eeeeeeef 	.word	0xeeeeeeef
 8026a34:	08037c5c 	.word	0x08037c5c
 8026a38:	08037b44 	.word	0x08037b44
 8026a3c:	080371d4 	.word	0x080371d4
 8026a40:	08037938 	.word	0x08037938
 8026a44:	08037948 	.word	0x08037948
 8026a48:	08037958 	.word	0x08037958
 8026a4c:	08037964 	.word	0x08037964
 8026a50:	0803797c 	.word	0x0803797c
 8026a54:	08037978 	.word	0x08037978

08026a58 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8026a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026a5a:	b087      	sub	sp, #28
 8026a5c:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 8026a5e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 8026a60:	f7fc fc3d 	bl	80232de <mg_millis>
 8026a64:	4602      	mov	r2, r0
 8026a66:	460b      	mov	r3, r1
 8026a68:	9004      	str	r0, [sp, #16]
 8026a6a:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 8026a6c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8026a70:	f7fb ff3a 	bl	80228e8 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8026a74:	2d00      	cmp	r5, #0
 8026a76:	d078      	beq.n	8026b6a <mg_mgr_poll+0x112>
 8026a78:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8026a7a:	2b00      	cmp	r3, #0
 8026a7c:	d075      	beq.n	8026b6a <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 8026a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026a82:	4628      	mov	r0, r5
 8026a84:	f7ff fe4a 	bl	802671c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8026a88:	6824      	ldr	r4, [r4, #0]
 8026a8a:	e040      	b.n	8026b0e <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8026a8c:	4b38      	ldr	r3, [pc, #224]	@ (8026b70 <mg_mgr_poll+0x118>)
 8026a8e:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8026a92:	4938      	ldr	r1, [pc, #224]	@ (8026b74 <mg_mgr_poll+0x11c>)
 8026a94:	2004      	movs	r0, #4
 8026a96:	f7fc fc27 	bl	80232e8 <mg_log_prefix>
 8026a9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026a9c:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 8026aa0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8026aa4:	d019      	beq.n	8026ada <mg_mgr_poll+0x82>
 8026aa6:	2254      	movs	r2, #84	@ 0x54
 8026aa8:	f010 0f20 	tst.w	r0, #32
 8026aac:	d017      	beq.n	8026ade <mg_mgr_poll+0x86>
 8026aae:	2343      	movs	r3, #67	@ 0x43
 8026ab0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8026ab4:	d115      	bne.n	8026ae2 <mg_mgr_poll+0x8a>
 8026ab6:	2668      	movs	r6, #104	@ 0x68
 8026ab8:	f010 0f08 	tst.w	r0, #8
 8026abc:	d013      	beq.n	8026ae6 <mg_mgr_poll+0x8e>
 8026abe:	2752      	movs	r7, #82	@ 0x52
 8026ac0:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 8026ac4:	f010 0f20 	tst.w	r0, #32
 8026ac8:	d00f      	beq.n	8026aea <mg_mgr_poll+0x92>
 8026aca:	2043      	movs	r0, #67	@ 0x43
 8026acc:	9002      	str	r0, [sp, #8]
 8026ace:	9701      	str	r7, [sp, #4]
 8026ad0:	9600      	str	r6, [sp, #0]
 8026ad2:	4829      	ldr	r0, [pc, #164]	@ (8026b78 <mg_mgr_poll+0x120>)
 8026ad4:	f7fa fc9a 	bl	802140c <mg_log>
 8026ad8:	e024      	b.n	8026b24 <mg_mgr_poll+0xcc>
 8026ada:	2274      	movs	r2, #116	@ 0x74
 8026adc:	e7e4      	b.n	8026aa8 <mg_mgr_poll+0x50>
 8026ade:	2363      	movs	r3, #99	@ 0x63
 8026ae0:	e7e6      	b.n	8026ab0 <mg_mgr_poll+0x58>
 8026ae2:	2648      	movs	r6, #72	@ 0x48
 8026ae4:	e7e8      	b.n	8026ab8 <mg_mgr_poll+0x60>
 8026ae6:	2772      	movs	r7, #114	@ 0x72
 8026ae8:	e7ea      	b.n	8026ac0 <mg_mgr_poll+0x68>
 8026aea:	2063      	movs	r0, #99	@ 0x63
 8026aec:	e7ee      	b.n	8026acc <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 8026aee:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 8026af2:	4620      	mov	r0, r4
 8026af4:	f7fc fd18 	bl	8023528 <handle_tls_recv>
 8026af8:	e01e      	b.n	8026b38 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 8026afa:	4620      	mov	r0, r4
 8026afc:	f7fe fa6a 	bl	8024fd4 <write_conn>
 8026b00:	e01f      	b.n	8026b42 <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 8026b02:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026b06:	f013 0f20 	tst.w	r3, #32
 8026b0a:	d12a      	bne.n	8026b62 <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8026b0c:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 8026b0e:	b364      	cbz	r4, 8026b6a <mg_mgr_poll+0x112>
    tmp = c->next;
 8026b10:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 8026b12:	aa04      	add	r2, sp, #16
 8026b14:	2102      	movs	r1, #2
 8026b16:	4620      	mov	r0, r4
 8026b18:	f7f9 fa30 	bl	801ff7c <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8026b1c:	4b17      	ldr	r3, [pc, #92]	@ (8026b7c <mg_mgr_poll+0x124>)
 8026b1e:	681b      	ldr	r3, [r3, #0]
 8026b20:	2b03      	cmp	r3, #3
 8026b22:	dcb3      	bgt.n	8026a8c <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 8026b24:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8026b28:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8026b2c:	d004      	beq.n	8026b38 <mg_mgr_poll+0xe0>
 8026b2e:	4620      	mov	r0, r4
 8026b30:	f7fb ff24 	bl	802297c <mg_tls_pending>
 8026b34:	2800      	cmp	r0, #0
 8026b36:	d1da      	bne.n	8026aee <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 8026b38:	4620      	mov	r0, r4
 8026b3a:	f7f8 fee7 	bl	801f90c <can_write>
 8026b3e:	2800      	cmp	r0, #0
 8026b40:	d1db      	bne.n	8026afa <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8026b42:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026b46:	f013 0f10 	tst.w	r3, #16
 8026b4a:	d0da      	beq.n	8026b02 <mg_mgr_poll+0xaa>
 8026b4c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8026b4e:	2b00      	cmp	r3, #0
 8026b50:	d1d7      	bne.n	8026b02 <mg_mgr_poll+0xaa>
 8026b52:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8026b56:	2b04      	cmp	r3, #4
 8026b58:	d0d3      	beq.n	8026b02 <mg_mgr_poll+0xaa>
      init_closure(c);
 8026b5a:	4620      	mov	r0, r4
 8026b5c:	f7fe fa66 	bl	802502c <init_closure>
 8026b60:	e7cf      	b.n	8026b02 <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 8026b62:	4620      	mov	r0, r4
 8026b64:	f7fd fb7e 	bl	8024264 <close_conn>
 8026b68:	e7d0      	b.n	8026b0c <mg_mgr_poll+0xb4>
}
 8026b6a:	b007      	add	sp, #28
 8026b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026b6e:	bf00      	nop
 8026b70:	08037b54 	.word	0x08037b54
 8026b74:	080371d4 	.word	0x080371d4
 8026b78:	08037988 	.word	0x08037988
 8026b7c:	200000a8 	.word	0x200000a8

08026b80 <mg_now>:
uint64_t mg_now(void) {
 8026b80:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 8026b82:	f7fc fbac 	bl	80232de <mg_millis>
 8026b86:	4a03      	ldr	r2, [pc, #12]	@ (8026b94 <mg_now+0x14>)
 8026b88:	6813      	ldr	r3, [r2, #0]
 8026b8a:	6852      	ldr	r2, [r2, #4]
 8026b8c:	18c0      	adds	r0, r0, r3
}
 8026b8e:	eb42 0101 	adc.w	r1, r2, r1
 8026b92:	bd08      	pop	{r3, pc}
 8026b94:	20018018 	.word	0x20018018

08026b98 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8026b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026b9c:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 8026b9e:	460a      	mov	r2, r1
 8026ba0:	b129      	cbz	r1, 8026bae <mg_sntp_parse+0x16>
 8026ba2:	7801      	ldrb	r1, [r0, #0]
 8026ba4:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8026ba8:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 8026bac:	e001      	b.n	8026bb2 <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 8026bae:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8026bb0:	461d      	mov	r5, r3
  if (len < 48) {
 8026bb2:	2a2f      	cmp	r2, #47	@ 0x2f
 8026bb4:	d817      	bhi.n	8026be6 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 8026bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8026ce4 <mg_sntp_parse+0x14c>)
 8026bb8:	681b      	ldr	r3, [r3, #0]
 8026bba:	2b00      	cmp	r3, #0
 8026bbc:	dc04      	bgt.n	8026bc8 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 8026bbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026bc2:	4601      	mov	r1, r0
}
 8026bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 8026bc8:	4b47      	ldr	r3, [pc, #284]	@ (8026ce8 <mg_sntp_parse+0x150>)
 8026bca:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 8026bce:	4947      	ldr	r1, [pc, #284]	@ (8026cec <mg_sntp_parse+0x154>)
 8026bd0:	2001      	movs	r0, #1
 8026bd2:	f7fc fb89 	bl	80232e8 <mg_log_prefix>
 8026bd6:	4946      	ldr	r1, [pc, #280]	@ (8026cf0 <mg_sntp_parse+0x158>)
 8026bd8:	4846      	ldr	r0, [pc, #280]	@ (8026cf4 <mg_sntp_parse+0x15c>)
 8026bda:	f7fa fc17 	bl	802140c <mg_log>
  int64_t epoch_milliseconds = -1;
 8026bde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026be2:	4601      	mov	r1, r0
 8026be4:	e7ee      	b.n	8026bc4 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 8026be6:	3b04      	subs	r3, #4
 8026be8:	2b01      	cmp	r3, #1
 8026bea:	d916      	bls.n	8026c1a <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 8026bec:	4b3d      	ldr	r3, [pc, #244]	@ (8026ce4 <mg_sntp_parse+0x14c>)
 8026bee:	681b      	ldr	r3, [r3, #0]
 8026bf0:	2b00      	cmp	r3, #0
 8026bf2:	dc03      	bgt.n	8026bfc <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 8026bf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026bf8:	4601      	mov	r1, r0
 8026bfa:	e7e3      	b.n	8026bc4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 8026bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8026ce8 <mg_sntp_parse+0x150>)
 8026bfe:	f641 4210 	movw	r2, #7184	@ 0x1c10
 8026c02:	493a      	ldr	r1, [pc, #232]	@ (8026cec <mg_sntp_parse+0x154>)
 8026c04:	2001      	movs	r0, #1
 8026c06:	f7fc fb6f 	bl	80232e8 <mg_log_prefix>
 8026c0a:	493b      	ldr	r1, [pc, #236]	@ (8026cf8 <mg_sntp_parse+0x160>)
 8026c0c:	4839      	ldr	r0, [pc, #228]	@ (8026cf4 <mg_sntp_parse+0x15c>)
 8026c0e:	f7fa fbfd 	bl	802140c <mg_log>
  int64_t epoch_milliseconds = -1;
 8026c12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026c16:	4601      	mov	r1, r0
 8026c18:	e7d4      	b.n	8026bc4 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 8026c1a:	7863      	ldrb	r3, [r4, #1]
 8026c1c:	b9b3      	cbnz	r3, 8026c4c <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8026c1e:	4b31      	ldr	r3, [pc, #196]	@ (8026ce4 <mg_sntp_parse+0x14c>)
 8026c20:	681b      	ldr	r3, [r3, #0]
 8026c22:	2b00      	cmp	r3, #0
 8026c24:	dc03      	bgt.n	8026c2e <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 8026c26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026c2a:	4601      	mov	r1, r0
 8026c2c:	e7ca      	b.n	8026bc4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8026c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8026ce8 <mg_sntp_parse+0x150>)
 8026c30:	f641 4212 	movw	r2, #7186	@ 0x1c12
 8026c34:	492d      	ldr	r1, [pc, #180]	@ (8026cec <mg_sntp_parse+0x154>)
 8026c36:	2001      	movs	r0, #1
 8026c38:	f7fc fb56 	bl	80232e8 <mg_log_prefix>
 8026c3c:	492f      	ldr	r1, [pc, #188]	@ (8026cfc <mg_sntp_parse+0x164>)
 8026c3e:	482d      	ldr	r0, [pc, #180]	@ (8026cf4 <mg_sntp_parse+0x15c>)
 8026c40:	f7fa fbe4 	bl	802140c <mg_log>
  int64_t epoch_milliseconds = -1;
 8026c44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026c48:	4601      	mov	r1, r0
 8026c4a:	e7bb      	b.n	8026bc4 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 8026c4c:	1eeb      	subs	r3, r5, #3
 8026c4e:	2b01      	cmp	r3, #1
 8026c50:	d907      	bls.n	8026c62 <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 8026c52:	4b24      	ldr	r3, [pc, #144]	@ (8026ce4 <mg_sntp_parse+0x14c>)
 8026c54:	681b      	ldr	r3, [r3, #0]
 8026c56:	2b00      	cmp	r3, #0
 8026c58:	dc35      	bgt.n	8026cc6 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 8026c5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026c5e:	4601      	mov	r1, r0
  return epoch_milliseconds;
 8026c60:	e7b0      	b.n	8026bc4 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8026c62:	f104 0018 	add.w	r0, r4, #24
 8026c66:	f7fb ffff 	bl	8022c68 <gettimestamp>
 8026c6a:	4606      	mov	r6, r0
 8026c6c:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 8026c6e:	f104 0020 	add.w	r0, r4, #32
 8026c72:	f7fb fff9 	bl	8022c68 <gettimestamp>
 8026c76:	4680      	mov	r8, r0
 8026c78:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 8026c7a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8026c7e:	f7fb fff3 	bl	8022c68 <gettimestamp>
 8026c82:	4607      	mov	r7, r0
 8026c84:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 8026c86:	f7fc fb2a 	bl	80232de <mg_millis>
 8026c8a:	4605      	mov	r5, r0
 8026c8c:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 8026c8e:	1b86      	subs	r6, r0, r6
 8026c90:	eb61 020a 	sbc.w	r2, r1, sl
 8026c94:	ebb7 0808 	subs.w	r8, r7, r8
 8026c98:	eb64 0909 	sbc.w	r9, r4, r9
 8026c9c:	ebb6 0608 	subs.w	r6, r6, r8
 8026ca0:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 8026ca4:	0fd3      	lsrs	r3, r2, #31
 8026ca6:	199b      	adds	r3, r3, r6
 8026ca8:	f142 0200 	adc.w	r2, r2, #0
 8026cac:	085b      	lsrs	r3, r3, #1
 8026cae:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8026cb2:	19d8      	adds	r0, r3, r7
 8026cb4:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 8026cb8:	1b45      	subs	r5, r0, r5
 8026cba:	eb61 030c 	sbc.w	r3, r1, ip
 8026cbe:	4a10      	ldr	r2, [pc, #64]	@ (8026d00 <mg_sntp_parse+0x168>)
 8026cc0:	6015      	str	r5, [r2, #0]
 8026cc2:	6053      	str	r3, [r2, #4]
 8026cc4:	e77e      	b.n	8026bc4 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 8026cc6:	4b08      	ldr	r3, [pc, #32]	@ (8026ce8 <mg_sntp_parse+0x150>)
 8026cc8:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 8026ccc:	4907      	ldr	r1, [pc, #28]	@ (8026cec <mg_sntp_parse+0x154>)
 8026cce:	2001      	movs	r0, #1
 8026cd0:	f7fc fb0a 	bl	80232e8 <mg_log_prefix>
 8026cd4:	4629      	mov	r1, r5
 8026cd6:	480b      	ldr	r0, [pc, #44]	@ (8026d04 <mg_sntp_parse+0x16c>)
 8026cd8:	f7fa fb98 	bl	802140c <mg_log>
  int64_t epoch_milliseconds = -1;
 8026cdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026ce0:	4601      	mov	r1, r0
 8026ce2:	e76f      	b.n	8026bc4 <mg_sntp_parse+0x2c>
 8026ce4:	200000a8 	.word	0x200000a8
 8026ce8:	08037aa4 	.word	0x08037aa4
 8026cec:	080371d4 	.word	0x080371d4
 8026cf0:	0803799c 	.word	0x0803799c
 8026cf4:	080374ec 	.word	0x080374ec
 8026cf8:	080379ac 	.word	0x080379ac
 8026cfc:	080379c0 	.word	0x080379c0
 8026d00:	20018018 	.word	0x20018018
 8026d04:	080379dc 	.word	0x080379dc

08026d08 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 8026d08:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8026d0c:	b08c      	sub	sp, #48	@ 0x30
 8026d0e:	4604      	mov	r4, r0
  if (c->is_resolving) {
 8026d10:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8026d14:	f013 0f08 	tst.w	r3, #8
 8026d18:	d012      	beq.n	8026d40 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 8026d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8026dc8 <mg_sntp_request+0xc0>)
 8026d1c:	681b      	ldr	r3, [r3, #0]
 8026d1e:	2b00      	cmp	r3, #0
 8026d20:	dc02      	bgt.n	8026d28 <mg_sntp_request+0x20>
}
 8026d22:	b00c      	add	sp, #48	@ 0x30
 8026d24:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 8026d28:	4b28      	ldr	r3, [pc, #160]	@ (8026dcc <mg_sntp_request+0xc4>)
 8026d2a:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 8026d2e:	4928      	ldr	r1, [pc, #160]	@ (8026dd0 <mg_sntp_request+0xc8>)
 8026d30:	2001      	movs	r0, #1
 8026d32:	f7fc fad9 	bl	80232e8 <mg_log_prefix>
 8026d36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026d38:	4826      	ldr	r0, [pc, #152]	@ (8026dd4 <mg_sntp_request+0xcc>)
 8026d3a:	f7fa fb67 	bl	802140c <mg_log>
 8026d3e:	e7f0      	b.n	8026d22 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8026d40:	f7fc facd 	bl	80232de <mg_millis>
 8026d44:	4606      	mov	r6, r0
 8026d46:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 8026d48:	2100      	movs	r1, #0
 8026d4a:	9100      	str	r1, [sp, #0]
 8026d4c:	222c      	movs	r2, #44	@ 0x2c
 8026d4e:	a801      	add	r0, sp, #4
 8026d50:	f002 fec6 	bl	8029ae0 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8026d54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8026d58:	2300      	movs	r3, #0
 8026d5a:	4630      	mov	r0, r6
 8026d5c:	4629      	mov	r1, r5
 8026d5e:	f7e9 ffab 	bl	8010cb8 <__aeabi_ldivmod>
 8026d62:	4610      	mov	r0, r2
 8026d64:	4619      	mov	r1, r3
 8026d66:	f7e9 fc31 	bl	80105cc <__aeabi_l2d>
 8026d6a:	2200      	movs	r2, #0
 8026d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8026dd8 <mg_sntp_request+0xd0>)
 8026d6e:	f7e9 fd85 	bl	801087c <__aeabi_ddiv>
 8026d72:	a313      	add	r3, pc, #76	@ (adr r3, 8026dc0 <mg_sntp_request+0xb8>)
 8026d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026d78:	f7e9 fc56 	bl	8010628 <__aeabi_dmul>
 8026d7c:	4680      	mov	r8, r0
 8026d7e:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8026d80:	2323      	movs	r3, #35	@ 0x23
 8026d82:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8026d86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8026d8a:	2300      	movs	r3, #0
 8026d8c:	4630      	mov	r0, r6
 8026d8e:	4629      	mov	r1, r5
 8026d90:	f7e9 ff92 	bl	8010cb8 <__aeabi_ldivmod>
 8026d94:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 8026d98:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 8026d9c:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 8026da0:	f7fb ff04 	bl	8022bac <mg_ntohl>
 8026da4:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 8026da6:	4640      	mov	r0, r8
 8026da8:	4649      	mov	r1, r9
 8026daa:	f7e9 ff15 	bl	8010bd8 <__aeabi_d2uiz>
 8026dae:	f7fb fefd 	bl	8022bac <mg_ntohl>
 8026db2:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 8026db4:	2230      	movs	r2, #48	@ 0x30
 8026db6:	4669      	mov	r1, sp
 8026db8:	4620      	mov	r0, r4
 8026dba:	f7fd fb49 	bl	8024450 <mg_send>
}
 8026dbe:	e7b0      	b.n	8026d22 <mg_sntp_request+0x1a>
 8026dc0:	ffe00000 	.word	0xffe00000
 8026dc4:	41efffff 	.word	0x41efffff
 8026dc8:	200000a8 	.word	0x200000a8
 8026dcc:	08037a94 	.word	0x08037a94
 8026dd0:	080371d4 	.word	0x080371d4
 8026dd4:	080379f4 	.word	0x080379f4
 8026dd8:	408f4000 	.word	0x408f4000

08026ddc <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 8026ddc:	b570      	push	{r4, r5, r6, lr}
 8026dde:	b082      	sub	sp, #8
 8026de0:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 8026de2:	3901      	subs	r1, #1
 8026de4:	2906      	cmp	r1, #6
 8026de6:	d810      	bhi.n	8026e0a <sntp_cb+0x2e>
 8026de8:	e8df f001 	tbb	[pc, r1]
 8026dec:	110f4604 	.word	0x110f4604
 8026df0:	0f0f      	.short	0x0f0f
 8026df2:	14          	.byte	0x14
 8026df3:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 8026df4:	f7fc fa73 	bl	80232de <mg_millis>
 8026df8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8026dfc:	18c0      	adds	r0, r0, r3
 8026dfe:	f141 0100 	adc.w	r1, r1, #0
 8026e02:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8026e06:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 8026e0a:	b002      	add	sp, #8
 8026e0c:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 8026e0e:	f7ff ff7b 	bl	8026d08 <mg_sntp_request>
 8026e12:	e7fa      	b.n	8026e0a <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8026e14:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8026e16:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8026e18:	f7ff febe 	bl	8026b98 <mg_sntp_parse>
 8026e1c:	4605      	mov	r5, r0
 8026e1e:	460e      	mov	r6, r1
 8026e20:	9000      	str	r0, [sp, #0]
 8026e22:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 8026e24:	2801      	cmp	r0, #1
 8026e26:	f171 0300 	sbcs.w	r3, r1, #0
 8026e2a:	da06      	bge.n	8026e3a <sntp_cb+0x5e>
    c->is_closing = 1;
 8026e2c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026e30:	f043 0320 	orr.w	r3, r3, #32
 8026e34:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8026e38:	e7e7      	b.n	8026e0a <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 8026e3a:	f7fc fa50 	bl	80232de <mg_millis>
 8026e3e:	1a2d      	subs	r5, r5, r0
 8026e40:	eb66 0601 	sbc.w	r6, r6, r1
 8026e44:	4b14      	ldr	r3, [pc, #80]	@ (8026e98 <sntp_cb+0xbc>)
 8026e46:	601d      	str	r5, [r3, #0]
 8026e48:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 8026e4a:	466a      	mov	r2, sp
 8026e4c:	2112      	movs	r1, #18
 8026e4e:	4620      	mov	r0, r4
 8026e50:	f7f9 f894 	bl	801ff7c <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8026e54:	4b11      	ldr	r3, [pc, #68]	@ (8026e9c <sntp_cb+0xc0>)
 8026e56:	681b      	ldr	r3, [r3, #0]
 8026e58:	2b02      	cmp	r3, #2
 8026e5a:	dde7      	ble.n	8026e2c <sntp_cb+0x50>
 8026e5c:	4b10      	ldr	r3, [pc, #64]	@ (8026ea0 <sntp_cb+0xc4>)
 8026e5e:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8026e62:	4910      	ldr	r1, [pc, #64]	@ (8026ea4 <sntp_cb+0xc8>)
 8026e64:	2003      	movs	r0, #3
 8026e66:	f7fc fa3f 	bl	80232e8 <mg_log_prefix>
 8026e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026e6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026e70:	480d      	ldr	r0, [pc, #52]	@ (8026ea8 <sntp_cb+0xcc>)
 8026e72:	f7fa facb 	bl	802140c <mg_log>
 8026e76:	e7d9      	b.n	8026e2c <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8026e78:	f7fc fa31 	bl	80232de <mg_millis>
 8026e7c:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8026e80:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8026e84:	4282      	cmp	r2, r0
 8026e86:	418b      	sbcs	r3, r1
 8026e88:	d2bf      	bcs.n	8026e0a <sntp_cb+0x2e>
 8026e8a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026e8e:	f043 0320 	orr.w	r3, r3, #32
 8026e92:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8026e96:	e7b8      	b.n	8026e0a <sntp_cb+0x2e>
 8026e98:	20018018 	.word	0x20018018
 8026e9c:	200000a8 	.word	0x200000a8
 8026ea0:	08037a8c 	.word	0x08037a8c
 8026ea4:	080371d4 	.word	0x080371d4
 8026ea8:	08037a0c 	.word	0x08037a0c

08026eac <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 8026eac:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 8026eae:	460d      	mov	r5, r1
 8026eb0:	b169      	cbz	r1, 8026ece <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 8026eb2:	4629      	mov	r1, r5
 8026eb4:	f7fe ffa0 	bl	8025df8 <mg_connect>
 8026eb8:	4604      	mov	r4, r0
 8026eba:	b130      	cbz	r0, 8026eca <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 8026ebc:	4b05      	ldr	r3, [pc, #20]	@ (8026ed4 <mg_sntp_connect+0x28>)
 8026ebe:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 8026ec2:	462a      	mov	r2, r5
 8026ec4:	2101      	movs	r1, #1
 8026ec6:	f7ff ff89 	bl	8026ddc <sntp_cb>
}
 8026eca:	4620      	mov	r0, r4
 8026ecc:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 8026ece:	4d02      	ldr	r5, [pc, #8]	@ (8026ed8 <mg_sntp_connect+0x2c>)
 8026ed0:	e7ef      	b.n	8026eb2 <mg_sntp_connect+0x6>
 8026ed2:	bf00      	nop
 8026ed4:	08026ddd 	.word	0x08026ddd
 8026ed8:	08037a30 	.word	0x08037a30

08026edc <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 8026edc:	b508      	push	{r3, lr}
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 8026ede:	2207      	movs	r2, #7
 8026ee0:	4903      	ldr	r1, [pc, #12]	@ (8026ef0 <has_mqtt_prefix+0x14>)
 8026ee2:	f002 fe32 	bl	8029b4a <strncmp>
}
 8026ee6:	fab0 f080 	clz	r0, r0
 8026eea:	0940      	lsrs	r0, r0, #5
 8026eec:	bd08      	pop	{r3, pc}
 8026eee:	bf00      	nop
 8026ef0:	080380ac 	.word	0x080380ac

08026ef4 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8026ef4:	b570      	push	{r4, r5, r6, lr}
 8026ef6:	4604      	mov	r4, r0
    int dot_count = 0;
    int is_ip_format = 1;

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8026ef8:	2200      	movs	r2, #0
    int dot_count = 0;
 8026efa:	4610      	mov	r0, r2
    for (int i = 0; host[i] != '\0'; i++) {
 8026efc:	e001      	b.n	8026f02 <is_valid_ip_or_domain+0xe>
        if (host[i] == '.') {
            dot_count++;
 8026efe:	3001      	adds	r0, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8026f00:	3201      	adds	r2, #1
 8026f02:	5ca3      	ldrb	r3, [r4, r2]
 8026f04:	b143      	cbz	r3, 8026f18 <is_valid_ip_or_domain+0x24>
        if (host[i] == '.') {
 8026f06:	2b2e      	cmp	r3, #46	@ 0x2e
 8026f08:	d0f9      	beq.n	8026efe <is_valid_ip_or_domain+0xa>
        } else if (!isdigit(host[i])) {
 8026f0a:	491d      	ldr	r1, [pc, #116]	@ (8026f80 <is_valid_ip_or_domain+0x8c>)
 8026f0c:	5ccb      	ldrb	r3, [r1, r3]
 8026f0e:	f013 0f04 	tst.w	r3, #4
 8026f12:	d1f5      	bne.n	8026f00 <is_valid_ip_or_domain+0xc>
            is_ip_format = 0;
 8026f14:	2500      	movs	r5, #0
 8026f16:	e000      	b.n	8026f1a <is_valid_ip_or_domain+0x26>
    int is_ip_format = 1;
 8026f18:	2501      	movs	r5, #1
            break;
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 8026f1a:	b335      	cbz	r5, 8026f6a <is_valid_ip_or_domain+0x76>
 8026f1c:	2803      	cmp	r0, #3
 8026f1e:	d013      	beq.n	8026f48 <is_valid_ip_or_domain+0x54>
 8026f20:	2200      	movs	r2, #0
 8026f22:	4615      	mov	r5, r2
 8026f24:	e014      	b.n	8026f50 <is_valid_ip_or_domain+0x5c>
        int octet;
        const char *ptr = host;

        for (int i = 0; i < 4; i++) {
 8026f26:	3601      	adds	r6, #1
 8026f28:	2e03      	cmp	r6, #3
 8026f2a:	dc24      	bgt.n	8026f76 <is_valid_ip_or_domain+0x82>
            octet = atoi(ptr);
 8026f2c:	4620      	mov	r0, r4
 8026f2e:	f000 f8a3 	bl	8027078 <atoi>
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8026f32:	28ff      	cmp	r0, #255	@ 0xff
 8026f34:	d821      	bhi.n	8026f7a <is_valid_ip_or_domain+0x86>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 8026f36:	212e      	movs	r1, #46	@ 0x2e
 8026f38:	4620      	mov	r0, r4
 8026f3a:	f002 fde8 	bl	8029b0e <strchr>
            if (ptr != NULL) ptr++;
 8026f3e:	4604      	mov	r4, r0
 8026f40:	2800      	cmp	r0, #0
 8026f42:	d0f0      	beq.n	8026f26 <is_valid_ip_or_domain+0x32>
 8026f44:	3401      	adds	r4, #1
 8026f46:	e7ee      	b.n	8026f26 <is_valid_ip_or_domain+0x32>
        for (int i = 0; i < 4; i++) {
 8026f48:	2600      	movs	r6, #0
 8026f4a:	e7ed      	b.n	8026f28 <is_valid_ip_or_domain+0x34>

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
    for (int i = 0; host[i] != '\0'; i++) {
        if (host[i] == '.') {
            dot_count++;
 8026f4c:	3501      	adds	r5, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8026f4e:	3201      	adds	r2, #1
 8026f50:	5ca3      	ldrb	r3, [r4, r2]
 8026f52:	b163      	cbz	r3, 8026f6e <is_valid_ip_or_domain+0x7a>
        if (host[i] == '.') {
 8026f54:	2b2e      	cmp	r3, #46	@ 0x2e
 8026f56:	d0f9      	beq.n	8026f4c <is_valid_ip_or_domain+0x58>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 8026f58:	4909      	ldr	r1, [pc, #36]	@ (8026f80 <is_valid_ip_or_domain+0x8c>)
 8026f5a:	5cc9      	ldrb	r1, [r1, r3]
 8026f5c:	f011 0f07 	tst.w	r1, #7
 8026f60:	d1f5      	bne.n	8026f4e <is_valid_ip_or_domain+0x5a>
 8026f62:	2b2d      	cmp	r3, #45	@ 0x2d
 8026f64:	d0f3      	beq.n	8026f4e <is_valid_ip_or_domain+0x5a>
            return 0;  // Некорректный символ для доменного имени
 8026f66:	2500      	movs	r5, #0
 8026f68:	e005      	b.n	8026f76 <is_valid_ip_or_domain+0x82>
 8026f6a:	462a      	mov	r2, r5
 8026f6c:	e7f0      	b.n	8026f50 <is_valid_ip_or_domain+0x5c>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 8026f6e:	2d00      	cmp	r5, #0
 8026f70:	bfd4      	ite	le
 8026f72:	2500      	movle	r5, #0
 8026f74:	2501      	movgt	r5, #1
}
 8026f76:	4628      	mov	r0, r5
 8026f78:	bd70      	pop	{r4, r5, r6, pc}
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8026f7a:	2500      	movs	r5, #0
 8026f7c:	e7fb      	b.n	8026f76 <is_valid_ip_or_domain+0x82>
 8026f7e:	bf00      	nop
 8026f80:	0803854d 	.word	0x0803854d

08026f84 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8026f84:	b510      	push	{r4, lr}
 8026f86:	4604      	mov	r4, r0
    int port = atoi(port_str);
 8026f88:	f000 f876 	bl	8027078 <atoi>
    if (port < 1 || port > MAX_PORT) {
 8026f8c:	3801      	subs	r0, #1
 8026f8e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8026f92:	4298      	cmp	r0, r3
 8026f94:	d80a      	bhi.n	8026fac <is_valid_port+0x28>
        return 0; // Порт вне диапазона
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
 8026f96:	7823      	ldrb	r3, [r4, #0]
 8026f98:	b133      	cbz	r3, 8026fa8 <is_valid_port+0x24>
        if (!isdigit(*port_str)) {
 8026f9a:	4a06      	ldr	r2, [pc, #24]	@ (8026fb4 <is_valid_port+0x30>)
 8026f9c:	5cd3      	ldrb	r3, [r2, r3]
 8026f9e:	f013 0f04 	tst.w	r3, #4
 8026fa2:	d005      	beq.n	8026fb0 <is_valid_port+0x2c>
            return 0;
        }
        port_str++;
 8026fa4:	3401      	adds	r4, #1
 8026fa6:	e7f6      	b.n	8026f96 <is_valid_port+0x12>
    }
    return 1;
 8026fa8:	2001      	movs	r0, #1
 8026faa:	e000      	b.n	8026fae <is_valid_port+0x2a>
        return 0; // Порт вне диапазона
 8026fac:	2000      	movs	r0, #0
}
 8026fae:	bd10      	pop	{r4, pc}
            return 0;
 8026fb0:	2000      	movs	r0, #0
 8026fb2:	e7fc      	b.n	8026fae <is_valid_port+0x2a>
 8026fb4:	0803854d 	.word	0x0803854d

08026fb8 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 8026fb8:	b570      	push	{r4, r5, r6, lr}
 8026fba:	b0c0      	sub	sp, #256	@ 0x100
 8026fbc:	4604      	mov	r4, r0
    if (!has_mqtt_prefix(url)) {
 8026fbe:	f7ff ff8d 	bl	8026edc <has_mqtt_prefix>
 8026fc2:	b1d0      	cbz	r0, 8026ffa <is_valid_mqtt_url+0x42>
        printf("Error: URL does not start with 'mqtt://'\n");
        return -1;
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8026fc4:	3407      	adds	r4, #7
    const char *colon = strchr(host_start, ':');
 8026fc6:	213a      	movs	r1, #58	@ 0x3a
 8026fc8:	4620      	mov	r0, r4
 8026fca:	f002 fda0 	bl	8029b0e <strchr>
    if (!colon) {
 8026fce:	4606      	mov	r6, r0
 8026fd0:	b1c8      	cbz	r0, 8027006 <is_valid_mqtt_url+0x4e>
        return -2;
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 8026fd2:	1b05      	subs	r5, r0, r4
 8026fd4:	462a      	mov	r2, r5
 8026fd6:	4621      	mov	r1, r4
 8026fd8:	4668      	mov	r0, sp
 8026fda:	f002 fdc8 	bl	8029b6e <strncpy>
    host[colon - host_start] = '\0';
 8026fde:	2300      	movs	r3, #0
 8026fe0:	f80d 3005 	strb.w	r3, [sp, r5]

    if (!is_valid_ip_or_domain(host)) {
 8026fe4:	4668      	mov	r0, sp
 8026fe6:	f7ff ff85 	bl	8026ef4 <is_valid_ip_or_domain>
 8026fea:	b190      	cbz	r0, 8027012 <is_valid_mqtt_url+0x5a>
        return -3;
    }

    // Проверить порт
    const char *port_str = colon + 1;
    if (!is_valid_port(port_str)) {
 8026fec:	1c70      	adds	r0, r6, #1
 8026fee:	f7ff ffc9 	bl	8026f84 <is_valid_port>
 8026ff2:	b1a0      	cbz	r0, 802701e <is_valid_mqtt_url+0x66>
        printf("Error: Invalid port number\n");
        return -4;
    }

    return 0; // URL прошел все проверки
 8026ff4:	2000      	movs	r0, #0
}
 8026ff6:	b040      	add	sp, #256	@ 0x100
 8026ff8:	bd70      	pop	{r4, r5, r6, pc}
        printf("Error: URL does not start with 'mqtt://'\n");
 8026ffa:	480c      	ldr	r0, [pc, #48]	@ (802702c <is_valid_mqtt_url+0x74>)
 8026ffc:	f002 f818 	bl	8029030 <puts>
        return -1;
 8027000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8027004:	e7f7      	b.n	8026ff6 <is_valid_mqtt_url+0x3e>
        printf("Error: URL does not contain a port separator ':'\n");
 8027006:	480a      	ldr	r0, [pc, #40]	@ (8027030 <is_valid_mqtt_url+0x78>)
 8027008:	f002 f812 	bl	8029030 <puts>
        return -2;
 802700c:	f06f 0001 	mvn.w	r0, #1
 8027010:	e7f1      	b.n	8026ff6 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid domain or IP address\n");
 8027012:	4808      	ldr	r0, [pc, #32]	@ (8027034 <is_valid_mqtt_url+0x7c>)
 8027014:	f002 f80c 	bl	8029030 <puts>
        return -3;
 8027018:	f06f 0002 	mvn.w	r0, #2
 802701c:	e7eb      	b.n	8026ff6 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid port number\n");
 802701e:	4806      	ldr	r0, [pc, #24]	@ (8027038 <is_valid_mqtt_url+0x80>)
 8027020:	f002 f806 	bl	8029030 <puts>
        return -4;
 8027024:	f06f 0003 	mvn.w	r0, #3
 8027028:	e7e5      	b.n	8026ff6 <is_valid_mqtt_url+0x3e>
 802702a:	bf00      	nop
 802702c:	080380b4 	.word	0x080380b4
 8027030:	080380e0 	.word	0x080380e0
 8027034:	08038114 	.word	0x08038114
 8027038:	08038138 	.word	0x08038138

0802703c <__assert_func>:
 802703c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802703e:	4614      	mov	r4, r2
 8027040:	461a      	mov	r2, r3
 8027042:	4b09      	ldr	r3, [pc, #36]	@ (8027068 <__assert_func+0x2c>)
 8027044:	681b      	ldr	r3, [r3, #0]
 8027046:	4605      	mov	r5, r0
 8027048:	68d8      	ldr	r0, [r3, #12]
 802704a:	b954      	cbnz	r4, 8027062 <__assert_func+0x26>
 802704c:	4b07      	ldr	r3, [pc, #28]	@ (802706c <__assert_func+0x30>)
 802704e:	461c      	mov	r4, r3
 8027050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027054:	9100      	str	r1, [sp, #0]
 8027056:	462b      	mov	r3, r5
 8027058:	4905      	ldr	r1, [pc, #20]	@ (8027070 <__assert_func+0x34>)
 802705a:	f000 f811 	bl	8027080 <fiprintf>
 802705e:	f003 ffdf 	bl	802b020 <abort>
 8027062:	4b04      	ldr	r3, [pc, #16]	@ (8027074 <__assert_func+0x38>)
 8027064:	e7f4      	b.n	8027050 <__assert_func+0x14>
 8027066:	bf00      	nop
 8027068:	20000254 	.word	0x20000254
 802706c:	0803818e 	.word	0x0803818e
 8027070:	08038160 	.word	0x08038160
 8027074:	08038153 	.word	0x08038153

08027078 <atoi>:
 8027078:	220a      	movs	r2, #10
 802707a:	2100      	movs	r1, #0
 802707c:	f002 b8b6 	b.w	80291ec <strtol>

08027080 <fiprintf>:
 8027080:	b40e      	push	{r1, r2, r3}
 8027082:	b503      	push	{r0, r1, lr}
 8027084:	4601      	mov	r1, r0
 8027086:	ab03      	add	r3, sp, #12
 8027088:	4805      	ldr	r0, [pc, #20]	@ (80270a0 <fiprintf+0x20>)
 802708a:	f853 2b04 	ldr.w	r2, [r3], #4
 802708e:	6800      	ldr	r0, [r0, #0]
 8027090:	9301      	str	r3, [sp, #4]
 8027092:	f001 fab7 	bl	8028604 <_vfiprintf_r>
 8027096:	b002      	add	sp, #8
 8027098:	f85d eb04 	ldr.w	lr, [sp], #4
 802709c:	b003      	add	sp, #12
 802709e:	4770      	bx	lr
 80270a0:	20000254 	.word	0x20000254

080270a4 <printf>:
 80270a4:	b40f      	push	{r0, r1, r2, r3}
 80270a6:	b507      	push	{r0, r1, r2, lr}
 80270a8:	4906      	ldr	r1, [pc, #24]	@ (80270c4 <printf+0x20>)
 80270aa:	ab04      	add	r3, sp, #16
 80270ac:	6808      	ldr	r0, [r1, #0]
 80270ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80270b2:	6881      	ldr	r1, [r0, #8]
 80270b4:	9301      	str	r3, [sp, #4]
 80270b6:	f000 f807 	bl	80270c8 <_vfprintf_r>
 80270ba:	b003      	add	sp, #12
 80270bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80270c0:	b004      	add	sp, #16
 80270c2:	4770      	bx	lr
 80270c4:	20000254 	.word	0x20000254

080270c8 <_vfprintf_r>:
 80270c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270cc:	b0d3      	sub	sp, #332	@ 0x14c
 80270ce:	468b      	mov	fp, r1
 80270d0:	4690      	mov	r8, r2
 80270d2:	461c      	mov	r4, r3
 80270d4:	461e      	mov	r6, r3
 80270d6:	9003      	str	r0, [sp, #12]
 80270d8:	f003 fe90 	bl	802adfc <_localeconv_r>
 80270dc:	6803      	ldr	r3, [r0, #0]
 80270de:	9316      	str	r3, [sp, #88]	@ 0x58
 80270e0:	4618      	mov	r0, r3
 80270e2:	f7e9 f8dd 	bl	80102a0 <strlen>
 80270e6:	9b03      	ldr	r3, [sp, #12]
 80270e8:	900d      	str	r0, [sp, #52]	@ 0x34
 80270ea:	b123      	cbz	r3, 80270f6 <_vfprintf_r+0x2e>
 80270ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80270ee:	b913      	cbnz	r3, 80270f6 <_vfprintf_r+0x2e>
 80270f0:	9803      	ldr	r0, [sp, #12]
 80270f2:	f002 fa4f 	bl	8029594 <__sinit>
 80270f6:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80270fa:	07da      	lsls	r2, r3, #31
 80270fc:	d407      	bmi.n	802710e <_vfprintf_r+0x46>
 80270fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8027102:	059b      	lsls	r3, r3, #22
 8027104:	d403      	bmi.n	802710e <_vfprintf_r+0x46>
 8027106:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802710a:	f003 ff22 	bl	802af52 <__retarget_lock_acquire_recursive>
 802710e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8027112:	049f      	lsls	r7, r3, #18
 8027114:	d409      	bmi.n	802712a <_vfprintf_r+0x62>
 8027116:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802711a:	f8ab 300c 	strh.w	r3, [fp, #12]
 802711e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8027122:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8027126:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 802712a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802712e:	071d      	lsls	r5, r3, #28
 8027130:	d502      	bpl.n	8027138 <_vfprintf_r+0x70>
 8027132:	f8db 3010 	ldr.w	r3, [fp, #16]
 8027136:	b9c3      	cbnz	r3, 802716a <_vfprintf_r+0xa2>
 8027138:	9803      	ldr	r0, [sp, #12]
 802713a:	4659      	mov	r1, fp
 802713c:	f002 fbe6 	bl	802990c <__swsetup_r>
 8027140:	b198      	cbz	r0, 802716a <_vfprintf_r+0xa2>
 8027142:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8027146:	07d8      	lsls	r0, r3, #31
 8027148:	d506      	bpl.n	8027158 <_vfprintf_r+0x90>
 802714a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802714e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027150:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8027152:	b053      	add	sp, #332	@ 0x14c
 8027154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027158:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802715c:	0599      	lsls	r1, r3, #22
 802715e:	d4f4      	bmi.n	802714a <_vfprintf_r+0x82>
 8027160:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8027164:	f003 fef7 	bl	802af56 <__retarget_lock_release_recursive>
 8027168:	e7ef      	b.n	802714a <_vfprintf_r+0x82>
 802716a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802716e:	f003 021a 	and.w	r2, r3, #26
 8027172:	2a0a      	cmp	r2, #10
 8027174:	d116      	bne.n	80271a4 <_vfprintf_r+0xdc>
 8027176:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 802717a:	2a00      	cmp	r2, #0
 802717c:	db12      	blt.n	80271a4 <_vfprintf_r+0xdc>
 802717e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 8027182:	07d2      	lsls	r2, r2, #31
 8027184:	d405      	bmi.n	8027192 <_vfprintf_r+0xca>
 8027186:	059b      	lsls	r3, r3, #22
 8027188:	d403      	bmi.n	8027192 <_vfprintf_r+0xca>
 802718a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802718e:	f003 fee2 	bl	802af56 <__retarget_lock_release_recursive>
 8027192:	9803      	ldr	r0, [sp, #12]
 8027194:	4623      	mov	r3, r4
 8027196:	4642      	mov	r2, r8
 8027198:	4659      	mov	r1, fp
 802719a:	b053      	add	sp, #332	@ 0x14c
 802719c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271a0:	f001 b9be 	b.w	8028520 <__sbprintf>
 80271a4:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 80273f0 <_vfprintf_r+0x328>
 80271a8:	2300      	movs	r3, #0
 80271aa:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 80271ae:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80271b2:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 80271b6:	ac29      	add	r4, sp, #164	@ 0xa4
 80271b8:	9426      	str	r4, [sp, #152]	@ 0x98
 80271ba:	9304      	str	r3, [sp, #16]
 80271bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80271be:	9312      	str	r3, [sp, #72]	@ 0x48
 80271c0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80271c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80271c4:	4643      	mov	r3, r8
 80271c6:	461d      	mov	r5, r3
 80271c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80271cc:	b10a      	cbz	r2, 80271d2 <_vfprintf_r+0x10a>
 80271ce:	2a25      	cmp	r2, #37	@ 0x25
 80271d0:	d1f9      	bne.n	80271c6 <_vfprintf_r+0xfe>
 80271d2:	ebb5 0708 	subs.w	r7, r5, r8
 80271d6:	d00d      	beq.n	80271f4 <_vfprintf_r+0x12c>
 80271d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80271da:	443b      	add	r3, r7
 80271dc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80271de:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80271e0:	3301      	adds	r3, #1
 80271e2:	2b07      	cmp	r3, #7
 80271e4:	e9c4 8700 	strd	r8, r7, [r4]
 80271e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80271ea:	dc75      	bgt.n	80272d8 <_vfprintf_r+0x210>
 80271ec:	3408      	adds	r4, #8
 80271ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80271f0:	443b      	add	r3, r7
 80271f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80271f4:	782b      	ldrb	r3, [r5, #0]
 80271f6:	2b00      	cmp	r3, #0
 80271f8:	f001 814f 	beq.w	802849a <_vfprintf_r+0x13d2>
 80271fc:	2200      	movs	r2, #0
 80271fe:	1c6b      	adds	r3, r5, #1
 8027200:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8027204:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8027208:	920e      	str	r2, [sp, #56]	@ 0x38
 802720a:	4615      	mov	r5, r2
 802720c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027210:	9206      	str	r2, [sp, #24]
 8027212:	930c      	str	r3, [sp, #48]	@ 0x30
 8027214:	9b06      	ldr	r3, [sp, #24]
 8027216:	3b20      	subs	r3, #32
 8027218:	2b5a      	cmp	r3, #90	@ 0x5a
 802721a:	f200 85aa 	bhi.w	8027d72 <_vfprintf_r+0xcaa>
 802721e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8027222:	009d      	.short	0x009d
 8027224:	05a805a8 	.word	0x05a805a8
 8027228:	05a800a5 	.word	0x05a800a5
 802722c:	05a805a8 	.word	0x05a805a8
 8027230:	05a80085 	.word	0x05a80085
 8027234:	00a805a8 	.word	0x00a805a8
 8027238:	05a800b2 	.word	0x05a800b2
 802723c:	00b400af 	.word	0x00b400af
 8027240:	00ce05a8 	.word	0x00ce05a8
 8027244:	00d100d1 	.word	0x00d100d1
 8027248:	00d100d1 	.word	0x00d100d1
 802724c:	00d100d1 	.word	0x00d100d1
 8027250:	00d100d1 	.word	0x00d100d1
 8027254:	05a800d1 	.word	0x05a800d1
 8027258:	05a805a8 	.word	0x05a805a8
 802725c:	05a805a8 	.word	0x05a805a8
 8027260:	05a805a8 	.word	0x05a805a8
 8027264:	05a80146 	.word	0x05a80146
 8027268:	011a0107 	.word	0x011a0107
 802726c:	01460146 	.word	0x01460146
 8027270:	05a80146 	.word	0x05a80146
 8027274:	05a805a8 	.word	0x05a805a8
 8027278:	00e205a8 	.word	0x00e205a8
 802727c:	05a805a8 	.word	0x05a805a8
 8027280:	05a804a3 	.word	0x05a804a3
 8027284:	05a805a8 	.word	0x05a805a8
 8027288:	05a804ed 	.word	0x05a804ed
 802728c:	05a8050e 	.word	0x05a8050e
 8027290:	053005a8 	.word	0x053005a8
 8027294:	05a805a8 	.word	0x05a805a8
 8027298:	05a805a8 	.word	0x05a805a8
 802729c:	05a805a8 	.word	0x05a805a8
 80272a0:	05a805a8 	.word	0x05a805a8
 80272a4:	05a80146 	.word	0x05a80146
 80272a8:	011c0107 	.word	0x011c0107
 80272ac:	01460146 	.word	0x01460146
 80272b0:	00ed0146 	.word	0x00ed0146
 80272b4:	0101011c 	.word	0x0101011c
 80272b8:	00fa05a8 	.word	0x00fa05a8
 80272bc:	048705a8 	.word	0x048705a8
 80272c0:	04dc04a5 	.word	0x04dc04a5
 80272c4:	05a80101 	.word	0x05a80101
 80272c8:	009b04ed 	.word	0x009b04ed
 80272cc:	05a80510 	.word	0x05a80510
 80272d0:	006505a8 	.word	0x006505a8
 80272d4:	009b05a8 	.word	0x009b05a8
 80272d8:	9803      	ldr	r0, [sp, #12]
 80272da:	aa26      	add	r2, sp, #152	@ 0x98
 80272dc:	4659      	mov	r1, fp
 80272de:	f001 f95f 	bl	80285a0 <__sprint_r>
 80272e2:	2800      	cmp	r0, #0
 80272e4:	f040 814d 	bne.w	8027582 <_vfprintf_r+0x4ba>
 80272e8:	ac29      	add	r4, sp, #164	@ 0xa4
 80272ea:	e780      	b.n	80271ee <_vfprintf_r+0x126>
 80272ec:	4b42      	ldr	r3, [pc, #264]	@ (80273f8 <_vfprintf_r+0x330>)
 80272ee:	9319      	str	r3, [sp, #100]	@ 0x64
 80272f0:	f015 0320 	ands.w	r3, r5, #32
 80272f4:	f000 84c8 	beq.w	8027c88 <_vfprintf_r+0xbc0>
 80272f8:	3607      	adds	r6, #7
 80272fa:	f026 0307 	bic.w	r3, r6, #7
 80272fe:	461a      	mov	r2, r3
 8027300:	685f      	ldr	r7, [r3, #4]
 8027302:	f852 6b08 	ldr.w	r6, [r2], #8
 8027306:	9207      	str	r2, [sp, #28]
 8027308:	07eb      	lsls	r3, r5, #31
 802730a:	d50a      	bpl.n	8027322 <_vfprintf_r+0x25a>
 802730c:	ea56 0307 	orrs.w	r3, r6, r7
 8027310:	d007      	beq.n	8027322 <_vfprintf_r+0x25a>
 8027312:	2330      	movs	r3, #48	@ 0x30
 8027314:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8027318:	9b06      	ldr	r3, [sp, #24]
 802731a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802731e:	f045 0502 	orr.w	r5, r5, #2
 8027322:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8027326:	2302      	movs	r3, #2
 8027328:	f000 bc2e 	b.w	8027b88 <_vfprintf_r+0xac0>
 802732c:	9803      	ldr	r0, [sp, #12]
 802732e:	f003 fd65 	bl	802adfc <_localeconv_r>
 8027332:	6843      	ldr	r3, [r0, #4]
 8027334:	9317      	str	r3, [sp, #92]	@ 0x5c
 8027336:	4618      	mov	r0, r3
 8027338:	f7e8 ffb2 	bl	80102a0 <strlen>
 802733c:	9012      	str	r0, [sp, #72]	@ 0x48
 802733e:	9803      	ldr	r0, [sp, #12]
 8027340:	f003 fd5c 	bl	802adfc <_localeconv_r>
 8027344:	6883      	ldr	r3, [r0, #8]
 8027346:	9309      	str	r3, [sp, #36]	@ 0x24
 8027348:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802734a:	b12b      	cbz	r3, 8027358 <_vfprintf_r+0x290>
 802734c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802734e:	b11b      	cbz	r3, 8027358 <_vfprintf_r+0x290>
 8027350:	781b      	ldrb	r3, [r3, #0]
 8027352:	b10b      	cbz	r3, 8027358 <_vfprintf_r+0x290>
 8027354:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8027358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802735a:	e757      	b.n	802720c <_vfprintf_r+0x144>
 802735c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8027360:	2b00      	cmp	r3, #0
 8027362:	d1f9      	bne.n	8027358 <_vfprintf_r+0x290>
 8027364:	2320      	movs	r3, #32
 8027366:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802736a:	e7f5      	b.n	8027358 <_vfprintf_r+0x290>
 802736c:	f045 0501 	orr.w	r5, r5, #1
 8027370:	e7f2      	b.n	8027358 <_vfprintf_r+0x290>
 8027372:	f856 3b04 	ldr.w	r3, [r6], #4
 8027376:	930e      	str	r3, [sp, #56]	@ 0x38
 8027378:	2b00      	cmp	r3, #0
 802737a:	daed      	bge.n	8027358 <_vfprintf_r+0x290>
 802737c:	425b      	negs	r3, r3
 802737e:	930e      	str	r3, [sp, #56]	@ 0x38
 8027380:	f045 0504 	orr.w	r5, r5, #4
 8027384:	e7e8      	b.n	8027358 <_vfprintf_r+0x290>
 8027386:	232b      	movs	r3, #43	@ 0x2b
 8027388:	e7ed      	b.n	8027366 <_vfprintf_r+0x29e>
 802738a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802738c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027390:	9206      	str	r2, [sp, #24]
 8027392:	2a2a      	cmp	r2, #42	@ 0x2a
 8027394:	d10f      	bne.n	80273b6 <_vfprintf_r+0x2ee>
 8027396:	f856 2b04 	ldr.w	r2, [r6], #4
 802739a:	930c      	str	r3, [sp, #48]	@ 0x30
 802739c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 80273a0:	e7da      	b.n	8027358 <_vfprintf_r+0x290>
 80273a2:	fb01 2909 	mla	r9, r1, r9, r2
 80273a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80273aa:	9206      	str	r2, [sp, #24]
 80273ac:	9a06      	ldr	r2, [sp, #24]
 80273ae:	3a30      	subs	r2, #48	@ 0x30
 80273b0:	2a09      	cmp	r2, #9
 80273b2:	d9f6      	bls.n	80273a2 <_vfprintf_r+0x2da>
 80273b4:	e72d      	b.n	8027212 <_vfprintf_r+0x14a>
 80273b6:	f04f 0900 	mov.w	r9, #0
 80273ba:	210a      	movs	r1, #10
 80273bc:	e7f6      	b.n	80273ac <_vfprintf_r+0x2e4>
 80273be:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80273c2:	e7c9      	b.n	8027358 <_vfprintf_r+0x290>
 80273c4:	2200      	movs	r2, #0
 80273c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80273c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80273ca:	210a      	movs	r1, #10
 80273cc:	9a06      	ldr	r2, [sp, #24]
 80273ce:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80273d0:	3a30      	subs	r2, #48	@ 0x30
 80273d2:	fb01 2200 	mla	r2, r1, r0, r2
 80273d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80273d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80273dc:	9206      	str	r2, [sp, #24]
 80273de:	3a30      	subs	r2, #48	@ 0x30
 80273e0:	2a09      	cmp	r2, #9
 80273e2:	d9f3      	bls.n	80273cc <_vfprintf_r+0x304>
 80273e4:	e715      	b.n	8027212 <_vfprintf_r+0x14a>
 80273e6:	f045 0508 	orr.w	r5, r5, #8
 80273ea:	e7b5      	b.n	8027358 <_vfprintf_r+0x290>
 80273ec:	f3af 8000 	nop.w
	...
 80273f8:	0803819f 	.word	0x0803819f
 80273fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80273fe:	781b      	ldrb	r3, [r3, #0]
 8027400:	2b68      	cmp	r3, #104	@ 0x68
 8027402:	bf01      	itttt	eq
 8027404:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8027406:	3301      	addeq	r3, #1
 8027408:	930c      	streq	r3, [sp, #48]	@ 0x30
 802740a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802740e:	bf18      	it	ne
 8027410:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8027414:	e7a0      	b.n	8027358 <_vfprintf_r+0x290>
 8027416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027418:	781b      	ldrb	r3, [r3, #0]
 802741a:	2b6c      	cmp	r3, #108	@ 0x6c
 802741c:	d105      	bne.n	802742a <_vfprintf_r+0x362>
 802741e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027420:	3301      	adds	r3, #1
 8027422:	930c      	str	r3, [sp, #48]	@ 0x30
 8027424:	f045 0520 	orr.w	r5, r5, #32
 8027428:	e796      	b.n	8027358 <_vfprintf_r+0x290>
 802742a:	f045 0510 	orr.w	r5, r5, #16
 802742e:	e793      	b.n	8027358 <_vfprintf_r+0x290>
 8027430:	4632      	mov	r2, r6
 8027432:	f852 3b04 	ldr.w	r3, [r2], #4
 8027436:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802743a:	2300      	movs	r3, #0
 802743c:	9207      	str	r2, [sp, #28]
 802743e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8027442:	469a      	mov	sl, r3
 8027444:	f04f 0901 	mov.w	r9, #1
 8027448:	9310      	str	r3, [sp, #64]	@ 0x40
 802744a:	461f      	mov	r7, r3
 802744c:	9308      	str	r3, [sp, #32]
 802744e:	461e      	mov	r6, r3
 8027450:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8027454:	e1da      	b.n	802780c <_vfprintf_r+0x744>
 8027456:	f045 0510 	orr.w	r5, r5, #16
 802745a:	06af      	lsls	r7, r5, #26
 802745c:	d512      	bpl.n	8027484 <_vfprintf_r+0x3bc>
 802745e:	3607      	adds	r6, #7
 8027460:	f026 0307 	bic.w	r3, r6, #7
 8027464:	461a      	mov	r2, r3
 8027466:	685f      	ldr	r7, [r3, #4]
 8027468:	f852 6b08 	ldr.w	r6, [r2], #8
 802746c:	9207      	str	r2, [sp, #28]
 802746e:	2f00      	cmp	r7, #0
 8027470:	da06      	bge.n	8027480 <_vfprintf_r+0x3b8>
 8027472:	4276      	negs	r6, r6
 8027474:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8027478:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802747c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8027480:	2301      	movs	r3, #1
 8027482:	e384      	b.n	8027b8e <_vfprintf_r+0xac6>
 8027484:	4633      	mov	r3, r6
 8027486:	06ee      	lsls	r6, r5, #27
 8027488:	f853 7b04 	ldr.w	r7, [r3], #4
 802748c:	9307      	str	r3, [sp, #28]
 802748e:	d502      	bpl.n	8027496 <_vfprintf_r+0x3ce>
 8027490:	463e      	mov	r6, r7
 8027492:	17ff      	asrs	r7, r7, #31
 8027494:	e7eb      	b.n	802746e <_vfprintf_r+0x3a6>
 8027496:	0668      	lsls	r0, r5, #25
 8027498:	d503      	bpl.n	80274a2 <_vfprintf_r+0x3da>
 802749a:	b23e      	sxth	r6, r7
 802749c:	f347 37c0 	sbfx	r7, r7, #15, #1
 80274a0:	e7e5      	b.n	802746e <_vfprintf_r+0x3a6>
 80274a2:	05a9      	lsls	r1, r5, #22
 80274a4:	d5f4      	bpl.n	8027490 <_vfprintf_r+0x3c8>
 80274a6:	b27e      	sxtb	r6, r7
 80274a8:	f347 17c0 	sbfx	r7, r7, #7, #1
 80274ac:	e7df      	b.n	802746e <_vfprintf_r+0x3a6>
 80274ae:	3607      	adds	r6, #7
 80274b0:	f026 0307 	bic.w	r3, r6, #7
 80274b4:	ecb3 7b02 	vldmia	r3!, {d7}
 80274b8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80274bc:	9307      	str	r3, [sp, #28]
 80274be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80274c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80274c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80274c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80274c8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80274ca:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80274ce:	4b85      	ldr	r3, [pc, #532]	@ (80276e4 <_vfprintf_r+0x61c>)
 80274d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80274d4:	f7e9 fb42 	bl	8010b5c <__aeabi_dcmpun>
 80274d8:	bb10      	cbnz	r0, 8027520 <_vfprintf_r+0x458>
 80274da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80274de:	4b81      	ldr	r3, [pc, #516]	@ (80276e4 <_vfprintf_r+0x61c>)
 80274e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80274e4:	f7e9 fb1c 	bl	8010b20 <__aeabi_dcmple>
 80274e8:	b9d0      	cbnz	r0, 8027520 <_vfprintf_r+0x458>
 80274ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80274ee:	2200      	movs	r2, #0
 80274f0:	2300      	movs	r3, #0
 80274f2:	f7e9 fb0b 	bl	8010b0c <__aeabi_dcmplt>
 80274f6:	b110      	cbz	r0, 80274fe <_vfprintf_r+0x436>
 80274f8:	232d      	movs	r3, #45	@ 0x2d
 80274fa:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80274fe:	4a7a      	ldr	r2, [pc, #488]	@ (80276e8 <_vfprintf_r+0x620>)
 8027500:	4b7a      	ldr	r3, [pc, #488]	@ (80276ec <_vfprintf_r+0x624>)
 8027502:	9906      	ldr	r1, [sp, #24]
 8027504:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8027508:	2947      	cmp	r1, #71	@ 0x47
 802750a:	bfd4      	ite	le
 802750c:	4690      	movle	r8, r2
 802750e:	4698      	movgt	r8, r3
 8027510:	f04f 0a00 	mov.w	sl, #0
 8027514:	f04f 0903 	mov.w	r9, #3
 8027518:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802751c:	f000 bff8 	b.w	8028510 <_vfprintf_r+0x1448>
 8027520:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8027524:	4610      	mov	r0, r2
 8027526:	4619      	mov	r1, r3
 8027528:	f7e9 fb18 	bl	8010b5c <__aeabi_dcmpun>
 802752c:	4682      	mov	sl, r0
 802752e:	b140      	cbz	r0, 8027542 <_vfprintf_r+0x47a>
 8027530:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027532:	4a6f      	ldr	r2, [pc, #444]	@ (80276f0 <_vfprintf_r+0x628>)
 8027534:	2b00      	cmp	r3, #0
 8027536:	bfbc      	itt	lt
 8027538:	232d      	movlt	r3, #45	@ 0x2d
 802753a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802753e:	4b6d      	ldr	r3, [pc, #436]	@ (80276f4 <_vfprintf_r+0x62c>)
 8027540:	e7df      	b.n	8027502 <_vfprintf_r+0x43a>
 8027542:	9b06      	ldr	r3, [sp, #24]
 8027544:	2b61      	cmp	r3, #97	@ 0x61
 8027546:	d02e      	beq.n	80275a6 <_vfprintf_r+0x4de>
 8027548:	2b41      	cmp	r3, #65	@ 0x41
 802754a:	d12e      	bne.n	80275aa <_vfprintf_r+0x4e2>
 802754c:	2358      	movs	r3, #88	@ 0x58
 802754e:	2230      	movs	r2, #48	@ 0x30
 8027550:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8027554:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8027558:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802755c:	f045 0502 	orr.w	r5, r5, #2
 8027560:	f340 80ae 	ble.w	80276c0 <_vfprintf_r+0x5f8>
 8027564:	9803      	ldr	r0, [sp, #12]
 8027566:	f109 0101 	add.w	r1, r9, #1
 802756a:	f004 fd0f 	bl	802bf8c <_malloc_r>
 802756e:	4680      	mov	r8, r0
 8027570:	2800      	cmp	r0, #0
 8027572:	f040 80aa 	bne.w	80276ca <_vfprintf_r+0x602>
 8027576:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802757a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802757e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8027582:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8027586:	07d9      	lsls	r1, r3, #31
 8027588:	d407      	bmi.n	802759a <_vfprintf_r+0x4d2>
 802758a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802758e:	059a      	lsls	r2, r3, #22
 8027590:	d403      	bmi.n	802759a <_vfprintf_r+0x4d2>
 8027592:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8027596:	f003 fcde 	bl	802af56 <__retarget_lock_release_recursive>
 802759a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802759e:	065b      	lsls	r3, r3, #25
 80275a0:	f57f add6 	bpl.w	8027150 <_vfprintf_r+0x88>
 80275a4:	e5d1      	b.n	802714a <_vfprintf_r+0x82>
 80275a6:	2378      	movs	r3, #120	@ 0x78
 80275a8:	e7d1      	b.n	802754e <_vfprintf_r+0x486>
 80275aa:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80275ae:	f000 808e 	beq.w	80276ce <_vfprintf_r+0x606>
 80275b2:	9b06      	ldr	r3, [sp, #24]
 80275b4:	f023 0320 	bic.w	r3, r3, #32
 80275b8:	2b47      	cmp	r3, #71	@ 0x47
 80275ba:	d105      	bne.n	80275c8 <_vfprintf_r+0x500>
 80275bc:	f1b9 0f00 	cmp.w	r9, #0
 80275c0:	d102      	bne.n	80275c8 <_vfprintf_r+0x500>
 80275c2:	46ca      	mov	sl, r9
 80275c4:	f04f 0901 	mov.w	r9, #1
 80275c8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80275cc:	9311      	str	r3, [sp, #68]	@ 0x44
 80275ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80275d0:	2b00      	cmp	r3, #0
 80275d2:	da7f      	bge.n	80276d4 <_vfprintf_r+0x60c>
 80275d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80275d6:	9314      	str	r3, [sp, #80]	@ 0x50
 80275d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80275da:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80275de:	9315      	str	r3, [sp, #84]	@ 0x54
 80275e0:	232d      	movs	r3, #45	@ 0x2d
 80275e2:	931c      	str	r3, [sp, #112]	@ 0x70
 80275e4:	9b06      	ldr	r3, [sp, #24]
 80275e6:	f023 0320 	bic.w	r3, r3, #32
 80275ea:	2b41      	cmp	r3, #65	@ 0x41
 80275ec:	9308      	str	r3, [sp, #32]
 80275ee:	f040 81e7 	bne.w	80279c0 <_vfprintf_r+0x8f8>
 80275f2:	a820      	add	r0, sp, #128	@ 0x80
 80275f4:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80275f8:	f003 fcd2 	bl	802afa0 <frexp>
 80275fc:	2200      	movs	r2, #0
 80275fe:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8027602:	ec51 0b10 	vmov	r0, r1, d0
 8027606:	f7e9 f80f 	bl	8010628 <__aeabi_dmul>
 802760a:	4602      	mov	r2, r0
 802760c:	460b      	mov	r3, r1
 802760e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8027612:	2200      	movs	r2, #0
 8027614:	2300      	movs	r3, #0
 8027616:	f7e9 fa6f 	bl	8010af8 <__aeabi_dcmpeq>
 802761a:	b108      	cbz	r0, 8027620 <_vfprintf_r+0x558>
 802761c:	2301      	movs	r3, #1
 802761e:	9320      	str	r3, [sp, #128]	@ 0x80
 8027620:	4a35      	ldr	r2, [pc, #212]	@ (80276f8 <_vfprintf_r+0x630>)
 8027622:	4b36      	ldr	r3, [pc, #216]	@ (80276fc <_vfprintf_r+0x634>)
 8027624:	9906      	ldr	r1, [sp, #24]
 8027626:	2961      	cmp	r1, #97	@ 0x61
 8027628:	bf18      	it	ne
 802762a:	461a      	movne	r2, r3
 802762c:	9210      	str	r2, [sp, #64]	@ 0x40
 802762e:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 8027632:	4646      	mov	r6, r8
 8027634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027638:	4b31      	ldr	r3, [pc, #196]	@ (8027700 <_vfprintf_r+0x638>)
 802763a:	2200      	movs	r2, #0
 802763c:	f7e8 fff4 	bl	8010628 <__aeabi_dmul>
 8027640:	4602      	mov	r2, r0
 8027642:	460b      	mov	r3, r1
 8027644:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8027648:	f7e9 fa9e 	bl	8010b88 <__aeabi_d2iz>
 802764c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802764e:	f7e8 ff81 	bl	8010554 <__aeabi_i2d>
 8027652:	4602      	mov	r2, r0
 8027654:	460b      	mov	r3, r1
 8027656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802765a:	f7e8 fe2d 	bl	80102b8 <__aeabi_dsub>
 802765e:	4602      	mov	r2, r0
 8027660:	460b      	mov	r3, r1
 8027662:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8027666:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027668:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802766a:	5c9b      	ldrb	r3, [r3, r2]
 802766c:	f806 3b01 	strb.w	r3, [r6], #1
 8027670:	1c7a      	adds	r2, r7, #1
 8027672:	d006      	beq.n	8027682 <_vfprintf_r+0x5ba>
 8027674:	1e7b      	subs	r3, r7, #1
 8027676:	931d      	str	r3, [sp, #116]	@ 0x74
 8027678:	2200      	movs	r2, #0
 802767a:	2300      	movs	r3, #0
 802767c:	f7e9 fa3c 	bl	8010af8 <__aeabi_dcmpeq>
 8027680:	b370      	cbz	r0, 80276e0 <_vfprintf_r+0x618>
 8027682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027686:	4b1f      	ldr	r3, [pc, #124]	@ (8027704 <_vfprintf_r+0x63c>)
 8027688:	2200      	movs	r2, #0
 802768a:	f7e9 fa5d 	bl	8010b48 <__aeabi_dcmpgt>
 802768e:	2800      	cmp	r0, #0
 8027690:	d13a      	bne.n	8027708 <_vfprintf_r+0x640>
 8027692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027696:	4b1b      	ldr	r3, [pc, #108]	@ (8027704 <_vfprintf_r+0x63c>)
 8027698:	2200      	movs	r2, #0
 802769a:	f7e9 fa2d 	bl	8010af8 <__aeabi_dcmpeq>
 802769e:	b110      	cbz	r0, 80276a6 <_vfprintf_r+0x5de>
 80276a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80276a2:	07db      	lsls	r3, r3, #31
 80276a4:	d430      	bmi.n	8027708 <_vfprintf_r+0x640>
 80276a6:	4633      	mov	r3, r6
 80276a8:	19f1      	adds	r1, r6, r7
 80276aa:	2030      	movs	r0, #48	@ 0x30
 80276ac:	1aca      	subs	r2, r1, r3
 80276ae:	2a00      	cmp	r2, #0
 80276b0:	f280 8183 	bge.w	80279ba <_vfprintf_r+0x8f2>
 80276b4:	1c7b      	adds	r3, r7, #1
 80276b6:	3701      	adds	r7, #1
 80276b8:	bfb8      	it	lt
 80276ba:	2300      	movlt	r3, #0
 80276bc:	441e      	add	r6, r3
 80276be:	e037      	b.n	8027730 <_vfprintf_r+0x668>
 80276c0:	f04f 0a00 	mov.w	sl, #0
 80276c4:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 80276c8:	e77e      	b.n	80275c8 <_vfprintf_r+0x500>
 80276ca:	4682      	mov	sl, r0
 80276cc:	e77c      	b.n	80275c8 <_vfprintf_r+0x500>
 80276ce:	f04f 0906 	mov.w	r9, #6
 80276d2:	e779      	b.n	80275c8 <_vfprintf_r+0x500>
 80276d4:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 80276d8:	2300      	movs	r3, #0
 80276da:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80276de:	e780      	b.n	80275e2 <_vfprintf_r+0x51a>
 80276e0:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80276e2:	e7a7      	b.n	8027634 <_vfprintf_r+0x56c>
 80276e4:	7fefffff 	.word	0x7fefffff
 80276e8:	0803818f 	.word	0x0803818f
 80276ec:	08038193 	.word	0x08038193
 80276f0:	08038197 	.word	0x08038197
 80276f4:	0803819b 	.word	0x0803819b
 80276f8:	0803819f 	.word	0x0803819f
 80276fc:	080381b0 	.word	0x080381b0
 8027700:	40300000 	.word	0x40300000
 8027704:	3fe00000 	.word	0x3fe00000
 8027708:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802770a:	9624      	str	r6, [sp, #144]	@ 0x90
 802770c:	7bd9      	ldrb	r1, [r3, #15]
 802770e:	2030      	movs	r0, #48	@ 0x30
 8027710:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8027712:	1e53      	subs	r3, r2, #1
 8027714:	9324      	str	r3, [sp, #144]	@ 0x90
 8027716:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802771a:	428b      	cmp	r3, r1
 802771c:	f000 814a 	beq.w	80279b4 <_vfprintf_r+0x8ec>
 8027720:	2b39      	cmp	r3, #57	@ 0x39
 8027722:	bf0b      	itete	eq
 8027724:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8027726:	3301      	addne	r3, #1
 8027728:	7a9b      	ldrbeq	r3, [r3, #10]
 802772a:	b2db      	uxtbne	r3, r3
 802772c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8027730:	eba6 0308 	sub.w	r3, r6, r8
 8027734:	9304      	str	r3, [sp, #16]
 8027736:	9b08      	ldr	r3, [sp, #32]
 8027738:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802773a:	2b47      	cmp	r3, #71	@ 0x47
 802773c:	f040 8189 	bne.w	8027a52 <_vfprintf_r+0x98a>
 8027740:	1cf1      	adds	r1, r6, #3
 8027742:	db02      	blt.n	802774a <_vfprintf_r+0x682>
 8027744:	45b1      	cmp	r9, r6
 8027746:	f280 81a7 	bge.w	8027a98 <_vfprintf_r+0x9d0>
 802774a:	9b06      	ldr	r3, [sp, #24]
 802774c:	3b02      	subs	r3, #2
 802774e:	9306      	str	r3, [sp, #24]
 8027750:	9906      	ldr	r1, [sp, #24]
 8027752:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8027756:	f021 0120 	bic.w	r1, r1, #32
 802775a:	2941      	cmp	r1, #65	@ 0x41
 802775c:	bf08      	it	eq
 802775e:	320f      	addeq	r2, #15
 8027760:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8027764:	bf06      	itte	eq
 8027766:	b2d2      	uxtbeq	r2, r2
 8027768:	2101      	moveq	r1, #1
 802776a:	2100      	movne	r1, #0
 802776c:	2b00      	cmp	r3, #0
 802776e:	9320      	str	r3, [sp, #128]	@ 0x80
 8027770:	bfb8      	it	lt
 8027772:	f1c6 0301 	rsblt	r3, r6, #1
 8027776:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802777a:	bfb4      	ite	lt
 802777c:	222d      	movlt	r2, #45	@ 0x2d
 802777e:	222b      	movge	r2, #43	@ 0x2b
 8027780:	2b09      	cmp	r3, #9
 8027782:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8027786:	f340 817a 	ble.w	8027a7e <_vfprintf_r+0x9b6>
 802778a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802778e:	270a      	movs	r7, #10
 8027790:	4602      	mov	r2, r0
 8027792:	fbb3 f6f7 	udiv	r6, r3, r7
 8027796:	fb07 3116 	mls	r1, r7, r6, r3
 802779a:	3130      	adds	r1, #48	@ 0x30
 802779c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80277a0:	4619      	mov	r1, r3
 80277a2:	2963      	cmp	r1, #99	@ 0x63
 80277a4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 80277a8:	4633      	mov	r3, r6
 80277aa:	dcf1      	bgt.n	8027790 <_vfprintf_r+0x6c8>
 80277ac:	3330      	adds	r3, #48	@ 0x30
 80277ae:	1e91      	subs	r1, r2, #2
 80277b0:	f800 3c01 	strb.w	r3, [r0, #-1]
 80277b4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 80277b8:	460b      	mov	r3, r1
 80277ba:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80277be:	4283      	cmp	r3, r0
 80277c0:	f0c0 8158 	bcc.w	8027a74 <_vfprintf_r+0x9ac>
 80277c4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 80277c8:	1a9b      	subs	r3, r3, r2
 80277ca:	4281      	cmp	r1, r0
 80277cc:	bf88      	it	hi
 80277ce:	2300      	movhi	r3, #0
 80277d0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 80277d4:	441a      	add	r2, r3
 80277d6:	ab22      	add	r3, sp, #136	@ 0x88
 80277d8:	1ad3      	subs	r3, r2, r3
 80277da:	9a04      	ldr	r2, [sp, #16]
 80277dc:	9318      	str	r3, [sp, #96]	@ 0x60
 80277de:	2a01      	cmp	r2, #1
 80277e0:	eb03 0902 	add.w	r9, r3, r2
 80277e4:	dc01      	bgt.n	80277ea <_vfprintf_r+0x722>
 80277e6:	07ea      	lsls	r2, r5, #31
 80277e8:	d501      	bpl.n	80277ee <_vfprintf_r+0x726>
 80277ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80277ec:	4499      	add	r9, r3
 80277ee:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80277f2:	2700      	movs	r7, #0
 80277f4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80277f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80277fa:	9708      	str	r7, [sp, #32]
 80277fc:	463e      	mov	r6, r7
 80277fe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027800:	2b00      	cmp	r3, #0
 8027802:	f040 8191 	bne.w	8027b28 <_vfprintf_r+0xa60>
 8027806:	2300      	movs	r3, #0
 8027808:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802780a:	9310      	str	r3, [sp, #64]	@ 0x40
 802780c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802780e:	454b      	cmp	r3, r9
 8027810:	bfb8      	it	lt
 8027812:	464b      	movlt	r3, r9
 8027814:	9311      	str	r3, [sp, #68]	@ 0x44
 8027816:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802781a:	b113      	cbz	r3, 8027822 <_vfprintf_r+0x75a>
 802781c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802781e:	3301      	adds	r3, #1
 8027820:	9311      	str	r3, [sp, #68]	@ 0x44
 8027822:	f015 0302 	ands.w	r3, r5, #2
 8027826:	931c      	str	r3, [sp, #112]	@ 0x70
 8027828:	bf1e      	ittt	ne
 802782a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802782c:	3302      	addne	r3, #2
 802782e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8027830:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8027834:	931d      	str	r3, [sp, #116]	@ 0x74
 8027836:	d122      	bne.n	802787e <_vfprintf_r+0x7b6>
 8027838:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802783a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802783c:	1a9b      	subs	r3, r3, r2
 802783e:	2b00      	cmp	r3, #0
 8027840:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027842:	dd1c      	ble.n	802787e <_vfprintf_r+0x7b6>
 8027844:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8027846:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802784a:	2810      	cmp	r0, #16
 802784c:	489f      	ldr	r0, [pc, #636]	@ (8027acc <_vfprintf_r+0xa04>)
 802784e:	6020      	str	r0, [r4, #0]
 8027850:	f102 0201 	add.w	r2, r2, #1
 8027854:	f104 0108 	add.w	r1, r4, #8
 8027858:	f300 8297 	bgt.w	8027d8a <_vfprintf_r+0xcc2>
 802785c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802785e:	6060      	str	r0, [r4, #4]
 8027860:	4403      	add	r3, r0
 8027862:	2a07      	cmp	r2, #7
 8027864:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8027868:	f340 82a4 	ble.w	8027db4 <_vfprintf_r+0xcec>
 802786c:	9803      	ldr	r0, [sp, #12]
 802786e:	aa26      	add	r2, sp, #152	@ 0x98
 8027870:	4659      	mov	r1, fp
 8027872:	f000 fe95 	bl	80285a0 <__sprint_r>
 8027876:	2800      	cmp	r0, #0
 8027878:	f040 85ed 	bne.w	8028456 <_vfprintf_r+0x138e>
 802787c:	ac29      	add	r4, sp, #164	@ 0xa4
 802787e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8027882:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027884:	b16a      	cbz	r2, 80278a2 <_vfprintf_r+0x7da>
 8027886:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802788a:	6022      	str	r2, [r4, #0]
 802788c:	2201      	movs	r2, #1
 802788e:	4413      	add	r3, r2
 8027890:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027892:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027894:	6062      	str	r2, [r4, #4]
 8027896:	4413      	add	r3, r2
 8027898:	2b07      	cmp	r3, #7
 802789a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802789c:	f300 828c 	bgt.w	8027db8 <_vfprintf_r+0xcf0>
 80278a0:	3408      	adds	r4, #8
 80278a2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80278a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80278a6:	b162      	cbz	r2, 80278c2 <_vfprintf_r+0x7fa>
 80278a8:	aa1f      	add	r2, sp, #124	@ 0x7c
 80278aa:	6022      	str	r2, [r4, #0]
 80278ac:	2202      	movs	r2, #2
 80278ae:	4413      	add	r3, r2
 80278b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80278b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80278b4:	6062      	str	r2, [r4, #4]
 80278b6:	3301      	adds	r3, #1
 80278b8:	2b07      	cmp	r3, #7
 80278ba:	9327      	str	r3, [sp, #156]	@ 0x9c
 80278bc:	f300 8286 	bgt.w	8027dcc <_vfprintf_r+0xd04>
 80278c0:	3408      	adds	r4, #8
 80278c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80278c4:	2b80      	cmp	r3, #128	@ 0x80
 80278c6:	d122      	bne.n	802790e <_vfprintf_r+0x846>
 80278c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80278ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80278cc:	1a9b      	subs	r3, r3, r2
 80278ce:	2b00      	cmp	r3, #0
 80278d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80278d2:	dd1c      	ble.n	802790e <_vfprintf_r+0x846>
 80278d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80278d6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80278da:	2810      	cmp	r0, #16
 80278dc:	487c      	ldr	r0, [pc, #496]	@ (8027ad0 <_vfprintf_r+0xa08>)
 80278de:	6020      	str	r0, [r4, #0]
 80278e0:	f102 0201 	add.w	r2, r2, #1
 80278e4:	f104 0108 	add.w	r1, r4, #8
 80278e8:	f300 827a 	bgt.w	8027de0 <_vfprintf_r+0xd18>
 80278ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80278ee:	6060      	str	r0, [r4, #4]
 80278f0:	4403      	add	r3, r0
 80278f2:	2a07      	cmp	r2, #7
 80278f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80278f8:	f340 8287 	ble.w	8027e0a <_vfprintf_r+0xd42>
 80278fc:	9803      	ldr	r0, [sp, #12]
 80278fe:	aa26      	add	r2, sp, #152	@ 0x98
 8027900:	4659      	mov	r1, fp
 8027902:	f000 fe4d 	bl	80285a0 <__sprint_r>
 8027906:	2800      	cmp	r0, #0
 8027908:	f040 85a5 	bne.w	8028456 <_vfprintf_r+0x138e>
 802790c:	ac29      	add	r4, sp, #164	@ 0xa4
 802790e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027910:	eba3 0309 	sub.w	r3, r3, r9
 8027914:	2b00      	cmp	r3, #0
 8027916:	9310      	str	r3, [sp, #64]	@ 0x40
 8027918:	dd1c      	ble.n	8027954 <_vfprintf_r+0x88c>
 802791a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802791c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8027920:	2810      	cmp	r0, #16
 8027922:	486b      	ldr	r0, [pc, #428]	@ (8027ad0 <_vfprintf_r+0xa08>)
 8027924:	6020      	str	r0, [r4, #0]
 8027926:	f102 0201 	add.w	r2, r2, #1
 802792a:	f104 0108 	add.w	r1, r4, #8
 802792e:	f300 826e 	bgt.w	8027e0e <_vfprintf_r+0xd46>
 8027932:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8027934:	6060      	str	r0, [r4, #4]
 8027936:	4403      	add	r3, r0
 8027938:	2a07      	cmp	r2, #7
 802793a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802793e:	f340 827b 	ble.w	8027e38 <_vfprintf_r+0xd70>
 8027942:	9803      	ldr	r0, [sp, #12]
 8027944:	aa26      	add	r2, sp, #152	@ 0x98
 8027946:	4659      	mov	r1, fp
 8027948:	f000 fe2a 	bl	80285a0 <__sprint_r>
 802794c:	2800      	cmp	r0, #0
 802794e:	f040 8582 	bne.w	8028456 <_vfprintf_r+0x138e>
 8027952:	ac29      	add	r4, sp, #164	@ 0xa4
 8027954:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027956:	9310      	str	r3, [sp, #64]	@ 0x40
 8027958:	05e8      	lsls	r0, r5, #23
 802795a:	f100 8273 	bmi.w	8027e44 <_vfprintf_r+0xd7c>
 802795e:	444b      	add	r3, r9
 8027960:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027962:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027964:	3301      	adds	r3, #1
 8027966:	2b07      	cmp	r3, #7
 8027968:	e9c4 8900 	strd	r8, r9, [r4]
 802796c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802796e:	f300 82af 	bgt.w	8027ed0 <_vfprintf_r+0xe08>
 8027972:	3408      	adds	r4, #8
 8027974:	0768      	lsls	r0, r5, #29
 8027976:	f100 8550 	bmi.w	802841a <_vfprintf_r+0x1352>
 802797a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802797e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8027980:	428a      	cmp	r2, r1
 8027982:	bfac      	ite	ge
 8027984:	189b      	addge	r3, r3, r2
 8027986:	185b      	addlt	r3, r3, r1
 8027988:	930f      	str	r3, [sp, #60]	@ 0x3c
 802798a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802798c:	b13b      	cbz	r3, 802799e <_vfprintf_r+0x8d6>
 802798e:	9803      	ldr	r0, [sp, #12]
 8027990:	aa26      	add	r2, sp, #152	@ 0x98
 8027992:	4659      	mov	r1, fp
 8027994:	f000 fe04 	bl	80285a0 <__sprint_r>
 8027998:	2800      	cmp	r0, #0
 802799a:	f040 855c 	bne.w	8028456 <_vfprintf_r+0x138e>
 802799e:	2300      	movs	r3, #0
 80279a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80279a2:	f1ba 0f00 	cmp.w	sl, #0
 80279a6:	f040 8572 	bne.w	802848e <_vfprintf_r+0x13c6>
 80279aa:	9e07      	ldr	r6, [sp, #28]
 80279ac:	ac29      	add	r4, sp, #164	@ 0xa4
 80279ae:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80279b2:	e407      	b.n	80271c4 <_vfprintf_r+0xfc>
 80279b4:	f802 0c01 	strb.w	r0, [r2, #-1]
 80279b8:	e6aa      	b.n	8027710 <_vfprintf_r+0x648>
 80279ba:	f803 0b01 	strb.w	r0, [r3], #1
 80279be:	e675      	b.n	80276ac <_vfprintf_r+0x5e4>
 80279c0:	9b08      	ldr	r3, [sp, #32]
 80279c2:	2b46      	cmp	r3, #70	@ 0x46
 80279c4:	d005      	beq.n	80279d2 <_vfprintf_r+0x90a>
 80279c6:	2b45      	cmp	r3, #69	@ 0x45
 80279c8:	d11a      	bne.n	8027a00 <_vfprintf_r+0x938>
 80279ca:	f109 0601 	add.w	r6, r9, #1
 80279ce:	2102      	movs	r1, #2
 80279d0:	e001      	b.n	80279d6 <_vfprintf_r+0x90e>
 80279d2:	464e      	mov	r6, r9
 80279d4:	2103      	movs	r1, #3
 80279d6:	ab24      	add	r3, sp, #144	@ 0x90
 80279d8:	9301      	str	r3, [sp, #4]
 80279da:	ab21      	add	r3, sp, #132	@ 0x84
 80279dc:	9300      	str	r3, [sp, #0]
 80279de:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80279e2:	ab20      	add	r3, sp, #128	@ 0x80
 80279e4:	9803      	ldr	r0, [sp, #12]
 80279e6:	4632      	mov	r2, r6
 80279e8:	f003 fbb6 	bl	802b158 <_dtoa_r>
 80279ec:	9b08      	ldr	r3, [sp, #32]
 80279ee:	2b47      	cmp	r3, #71	@ 0x47
 80279f0:	4680      	mov	r8, r0
 80279f2:	d119      	bne.n	8027a28 <_vfprintf_r+0x960>
 80279f4:	07e8      	lsls	r0, r5, #31
 80279f6:	d405      	bmi.n	8027a04 <_vfprintf_r+0x93c>
 80279f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80279fa:	eba3 0308 	sub.w	r3, r3, r8
 80279fe:	e699      	b.n	8027734 <_vfprintf_r+0x66c>
 8027a00:	464e      	mov	r6, r9
 8027a02:	e7e4      	b.n	80279ce <_vfprintf_r+0x906>
 8027a04:	eb08 0706 	add.w	r7, r8, r6
 8027a08:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8027a0c:	2200      	movs	r2, #0
 8027a0e:	2300      	movs	r3, #0
 8027a10:	f7e9 f872 	bl	8010af8 <__aeabi_dcmpeq>
 8027a14:	b100      	cbz	r0, 8027a18 <_vfprintf_r+0x950>
 8027a16:	9724      	str	r7, [sp, #144]	@ 0x90
 8027a18:	2230      	movs	r2, #48	@ 0x30
 8027a1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027a1c:	429f      	cmp	r7, r3
 8027a1e:	d9eb      	bls.n	80279f8 <_vfprintf_r+0x930>
 8027a20:	1c59      	adds	r1, r3, #1
 8027a22:	9124      	str	r1, [sp, #144]	@ 0x90
 8027a24:	701a      	strb	r2, [r3, #0]
 8027a26:	e7f8      	b.n	8027a1a <_vfprintf_r+0x952>
 8027a28:	9b08      	ldr	r3, [sp, #32]
 8027a2a:	2b46      	cmp	r3, #70	@ 0x46
 8027a2c:	eb00 0706 	add.w	r7, r0, r6
 8027a30:	d1ea      	bne.n	8027a08 <_vfprintf_r+0x940>
 8027a32:	7803      	ldrb	r3, [r0, #0]
 8027a34:	2b30      	cmp	r3, #48	@ 0x30
 8027a36:	d109      	bne.n	8027a4c <_vfprintf_r+0x984>
 8027a38:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8027a3c:	2200      	movs	r2, #0
 8027a3e:	2300      	movs	r3, #0
 8027a40:	f7e9 f85a 	bl	8010af8 <__aeabi_dcmpeq>
 8027a44:	b910      	cbnz	r0, 8027a4c <_vfprintf_r+0x984>
 8027a46:	f1c6 0601 	rsb	r6, r6, #1
 8027a4a:	9620      	str	r6, [sp, #128]	@ 0x80
 8027a4c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027a4e:	441f      	add	r7, r3
 8027a50:	e7da      	b.n	8027a08 <_vfprintf_r+0x940>
 8027a52:	9b08      	ldr	r3, [sp, #32]
 8027a54:	2b46      	cmp	r3, #70	@ 0x46
 8027a56:	f47f ae7b 	bne.w	8027750 <_vfprintf_r+0x688>
 8027a5a:	f005 0301 	and.w	r3, r5, #1
 8027a5e:	2e00      	cmp	r6, #0
 8027a60:	ea43 0309 	orr.w	r3, r3, r9
 8027a64:	dd25      	ble.n	8027ab2 <_vfprintf_r+0x9ea>
 8027a66:	b37b      	cbz	r3, 8027ac8 <_vfprintf_r+0xa00>
 8027a68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027a6a:	18f3      	adds	r3, r6, r3
 8027a6c:	4499      	add	r9, r3
 8027a6e:	2366      	movs	r3, #102	@ 0x66
 8027a70:	9306      	str	r3, [sp, #24]
 8027a72:	e033      	b.n	8027adc <_vfprintf_r+0xa14>
 8027a74:	f813 7b01 	ldrb.w	r7, [r3], #1
 8027a78:	f806 7f01 	strb.w	r7, [r6, #1]!
 8027a7c:	e69f      	b.n	80277be <_vfprintf_r+0x6f6>
 8027a7e:	b941      	cbnz	r1, 8027a92 <_vfprintf_r+0x9ca>
 8027a80:	2230      	movs	r2, #48	@ 0x30
 8027a82:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8027a86:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8027a8a:	3330      	adds	r3, #48	@ 0x30
 8027a8c:	f802 3b01 	strb.w	r3, [r2], #1
 8027a90:	e6a1      	b.n	80277d6 <_vfprintf_r+0x70e>
 8027a92:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8027a96:	e7f8      	b.n	8027a8a <_vfprintf_r+0x9c2>
 8027a98:	9b04      	ldr	r3, [sp, #16]
 8027a9a:	42b3      	cmp	r3, r6
 8027a9c:	dd0d      	ble.n	8027aba <_vfprintf_r+0x9f2>
 8027a9e:	9b04      	ldr	r3, [sp, #16]
 8027aa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027aa2:	2e00      	cmp	r6, #0
 8027aa4:	eb03 0902 	add.w	r9, r3, r2
 8027aa8:	dc0c      	bgt.n	8027ac4 <_vfprintf_r+0x9fc>
 8027aaa:	f1c6 0301 	rsb	r3, r6, #1
 8027aae:	4499      	add	r9, r3
 8027ab0:	e008      	b.n	8027ac4 <_vfprintf_r+0x9fc>
 8027ab2:	b17b      	cbz	r3, 8027ad4 <_vfprintf_r+0xa0c>
 8027ab4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027ab6:	3301      	adds	r3, #1
 8027ab8:	e7d8      	b.n	8027a6c <_vfprintf_r+0x9a4>
 8027aba:	07eb      	lsls	r3, r5, #31
 8027abc:	d521      	bpl.n	8027b02 <_vfprintf_r+0xa3a>
 8027abe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027ac0:	eb06 0903 	add.w	r9, r6, r3
 8027ac4:	2367      	movs	r3, #103	@ 0x67
 8027ac6:	e7d3      	b.n	8027a70 <_vfprintf_r+0x9a8>
 8027ac8:	46b1      	mov	r9, r6
 8027aca:	e7d0      	b.n	8027a6e <_vfprintf_r+0x9a6>
 8027acc:	080381d3 	.word	0x080381d3
 8027ad0:	080381c3 	.word	0x080381c3
 8027ad4:	2366      	movs	r3, #102	@ 0x66
 8027ad6:	9306      	str	r3, [sp, #24]
 8027ad8:	f04f 0901 	mov.w	r9, #1
 8027adc:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8027ae0:	9308      	str	r3, [sp, #32]
 8027ae2:	d01f      	beq.n	8027b24 <_vfprintf_r+0xa5c>
 8027ae4:	2700      	movs	r7, #0
 8027ae6:	2e00      	cmp	r6, #0
 8027ae8:	9708      	str	r7, [sp, #32]
 8027aea:	f77f ae88 	ble.w	80277fe <_vfprintf_r+0x736>
 8027aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027af0:	781b      	ldrb	r3, [r3, #0]
 8027af2:	2bff      	cmp	r3, #255	@ 0xff
 8027af4:	d107      	bne.n	8027b06 <_vfprintf_r+0xa3e>
 8027af6:	9b08      	ldr	r3, [sp, #32]
 8027af8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8027afa:	443b      	add	r3, r7
 8027afc:	fb02 9903 	mla	r9, r2, r3, r9
 8027b00:	e67d      	b.n	80277fe <_vfprintf_r+0x736>
 8027b02:	46b1      	mov	r9, r6
 8027b04:	e7de      	b.n	8027ac4 <_vfprintf_r+0x9fc>
 8027b06:	42b3      	cmp	r3, r6
 8027b08:	daf5      	bge.n	8027af6 <_vfprintf_r+0xa2e>
 8027b0a:	1af6      	subs	r6, r6, r3
 8027b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027b0e:	785b      	ldrb	r3, [r3, #1]
 8027b10:	b133      	cbz	r3, 8027b20 <_vfprintf_r+0xa58>
 8027b12:	9b08      	ldr	r3, [sp, #32]
 8027b14:	3301      	adds	r3, #1
 8027b16:	9308      	str	r3, [sp, #32]
 8027b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027b1a:	3301      	adds	r3, #1
 8027b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8027b1e:	e7e6      	b.n	8027aee <_vfprintf_r+0xa26>
 8027b20:	3701      	adds	r7, #1
 8027b22:	e7e4      	b.n	8027aee <_vfprintf_r+0xa26>
 8027b24:	9f08      	ldr	r7, [sp, #32]
 8027b26:	e66a      	b.n	80277fe <_vfprintf_r+0x736>
 8027b28:	232d      	movs	r3, #45	@ 0x2d
 8027b2a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8027b2e:	e66a      	b.n	8027806 <_vfprintf_r+0x73e>
 8027b30:	06af      	lsls	r7, r5, #26
 8027b32:	d507      	bpl.n	8027b44 <_vfprintf_r+0xa7c>
 8027b34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027b36:	6833      	ldr	r3, [r6, #0]
 8027b38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8027b3a:	17d2      	asrs	r2, r2, #31
 8027b3c:	e9c3 1200 	strd	r1, r2, [r3]
 8027b40:	3604      	adds	r6, #4
 8027b42:	e734      	b.n	80279ae <_vfprintf_r+0x8e6>
 8027b44:	06e8      	lsls	r0, r5, #27
 8027b46:	d503      	bpl.n	8027b50 <_vfprintf_r+0xa88>
 8027b48:	6833      	ldr	r3, [r6, #0]
 8027b4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027b4c:	601a      	str	r2, [r3, #0]
 8027b4e:	e7f7      	b.n	8027b40 <_vfprintf_r+0xa78>
 8027b50:	0669      	lsls	r1, r5, #25
 8027b52:	d503      	bpl.n	8027b5c <_vfprintf_r+0xa94>
 8027b54:	6833      	ldr	r3, [r6, #0]
 8027b56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027b58:	801a      	strh	r2, [r3, #0]
 8027b5a:	e7f1      	b.n	8027b40 <_vfprintf_r+0xa78>
 8027b5c:	05aa      	lsls	r2, r5, #22
 8027b5e:	d5f3      	bpl.n	8027b48 <_vfprintf_r+0xa80>
 8027b60:	6833      	ldr	r3, [r6, #0]
 8027b62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027b64:	701a      	strb	r2, [r3, #0]
 8027b66:	e7eb      	b.n	8027b40 <_vfprintf_r+0xa78>
 8027b68:	f045 0510 	orr.w	r5, r5, #16
 8027b6c:	f015 0320 	ands.w	r3, r5, #32
 8027b70:	d020      	beq.n	8027bb4 <_vfprintf_r+0xaec>
 8027b72:	3607      	adds	r6, #7
 8027b74:	f026 0307 	bic.w	r3, r6, #7
 8027b78:	461a      	mov	r2, r3
 8027b7a:	685f      	ldr	r7, [r3, #4]
 8027b7c:	f852 6b08 	ldr.w	r6, [r2], #8
 8027b80:	9207      	str	r2, [sp, #28]
 8027b82:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8027b86:	2300      	movs	r3, #0
 8027b88:	2200      	movs	r2, #0
 8027b8a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8027b8e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8027b92:	f000 8491 	beq.w	80284b8 <_vfprintf_r+0x13f0>
 8027b96:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8027b9a:	9208      	str	r2, [sp, #32]
 8027b9c:	ea56 0207 	orrs.w	r2, r6, r7
 8027ba0:	f040 848f 	bne.w	80284c2 <_vfprintf_r+0x13fa>
 8027ba4:	f1b9 0f00 	cmp.w	r9, #0
 8027ba8:	f000 80db 	beq.w	8027d62 <_vfprintf_r+0xc9a>
 8027bac:	2b01      	cmp	r3, #1
 8027bae:	f040 848b 	bne.w	80284c8 <_vfprintf_r+0x1400>
 8027bb2:	e083      	b.n	8027cbc <_vfprintf_r+0xbf4>
 8027bb4:	4632      	mov	r2, r6
 8027bb6:	f015 0710 	ands.w	r7, r5, #16
 8027bba:	f852 6b04 	ldr.w	r6, [r2], #4
 8027bbe:	9207      	str	r2, [sp, #28]
 8027bc0:	d001      	beq.n	8027bc6 <_vfprintf_r+0xafe>
 8027bc2:	461f      	mov	r7, r3
 8027bc4:	e7dd      	b.n	8027b82 <_vfprintf_r+0xaba>
 8027bc6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8027bca:	d001      	beq.n	8027bd0 <_vfprintf_r+0xb08>
 8027bcc:	b2b6      	uxth	r6, r6
 8027bce:	e7d8      	b.n	8027b82 <_vfprintf_r+0xaba>
 8027bd0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8027bd4:	d0d5      	beq.n	8027b82 <_vfprintf_r+0xaba>
 8027bd6:	b2f6      	uxtb	r6, r6
 8027bd8:	e7f3      	b.n	8027bc2 <_vfprintf_r+0xafa>
 8027bda:	4633      	mov	r3, r6
 8027bdc:	2278      	movs	r2, #120	@ 0x78
 8027bde:	f853 6b04 	ldr.w	r6, [r3], #4
 8027be2:	9307      	str	r3, [sp, #28]
 8027be4:	f647 0330 	movw	r3, #30768	@ 0x7830
 8027be8:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8027bec:	4b93      	ldr	r3, [pc, #588]	@ (8027e3c <_vfprintf_r+0xd74>)
 8027bee:	9319      	str	r3, [sp, #100]	@ 0x64
 8027bf0:	2700      	movs	r7, #0
 8027bf2:	f045 0502 	orr.w	r5, r5, #2
 8027bf6:	2302      	movs	r3, #2
 8027bf8:	9206      	str	r2, [sp, #24]
 8027bfa:	e7c5      	b.n	8027b88 <_vfprintf_r+0xac0>
 8027bfc:	4633      	mov	r3, r6
 8027bfe:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8027c02:	f853 8b04 	ldr.w	r8, [r3], #4
 8027c06:	9307      	str	r3, [sp, #28]
 8027c08:	f04f 0600 	mov.w	r6, #0
 8027c0c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8027c10:	d00f      	beq.n	8027c32 <_vfprintf_r+0xb6a>
 8027c12:	464a      	mov	r2, r9
 8027c14:	4631      	mov	r1, r6
 8027c16:	4640      	mov	r0, r8
 8027c18:	f7e8 faf2 	bl	8010200 <memchr>
 8027c1c:	4682      	mov	sl, r0
 8027c1e:	2800      	cmp	r0, #0
 8027c20:	f43f ac7a 	beq.w	8027518 <_vfprintf_r+0x450>
 8027c24:	eba0 0908 	sub.w	r9, r0, r8
 8027c28:	46b2      	mov	sl, r6
 8027c2a:	9610      	str	r6, [sp, #64]	@ 0x40
 8027c2c:	4637      	mov	r7, r6
 8027c2e:	9608      	str	r6, [sp, #32]
 8027c30:	e5ec      	b.n	802780c <_vfprintf_r+0x744>
 8027c32:	4640      	mov	r0, r8
 8027c34:	f7e8 fb34 	bl	80102a0 <strlen>
 8027c38:	46b2      	mov	sl, r6
 8027c3a:	4681      	mov	r9, r0
 8027c3c:	e46c      	b.n	8027518 <_vfprintf_r+0x450>
 8027c3e:	f045 0510 	orr.w	r5, r5, #16
 8027c42:	f015 0320 	ands.w	r3, r5, #32
 8027c46:	d009      	beq.n	8027c5c <_vfprintf_r+0xb94>
 8027c48:	3607      	adds	r6, #7
 8027c4a:	f026 0307 	bic.w	r3, r6, #7
 8027c4e:	461a      	mov	r2, r3
 8027c50:	685f      	ldr	r7, [r3, #4]
 8027c52:	f852 6b08 	ldr.w	r6, [r2], #8
 8027c56:	9207      	str	r2, [sp, #28]
 8027c58:	2301      	movs	r3, #1
 8027c5a:	e795      	b.n	8027b88 <_vfprintf_r+0xac0>
 8027c5c:	4632      	mov	r2, r6
 8027c5e:	f015 0710 	ands.w	r7, r5, #16
 8027c62:	f852 6b04 	ldr.w	r6, [r2], #4
 8027c66:	9207      	str	r2, [sp, #28]
 8027c68:	d001      	beq.n	8027c6e <_vfprintf_r+0xba6>
 8027c6a:	461f      	mov	r7, r3
 8027c6c:	e7f4      	b.n	8027c58 <_vfprintf_r+0xb90>
 8027c6e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8027c72:	d001      	beq.n	8027c78 <_vfprintf_r+0xbb0>
 8027c74:	b2b6      	uxth	r6, r6
 8027c76:	e7ef      	b.n	8027c58 <_vfprintf_r+0xb90>
 8027c78:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8027c7c:	d0ec      	beq.n	8027c58 <_vfprintf_r+0xb90>
 8027c7e:	b2f6      	uxtb	r6, r6
 8027c80:	e7f3      	b.n	8027c6a <_vfprintf_r+0xba2>
 8027c82:	4b6f      	ldr	r3, [pc, #444]	@ (8027e40 <_vfprintf_r+0xd78>)
 8027c84:	f7ff bb33 	b.w	80272ee <_vfprintf_r+0x226>
 8027c88:	4632      	mov	r2, r6
 8027c8a:	f015 0710 	ands.w	r7, r5, #16
 8027c8e:	f852 6b04 	ldr.w	r6, [r2], #4
 8027c92:	9207      	str	r2, [sp, #28]
 8027c94:	d002      	beq.n	8027c9c <_vfprintf_r+0xbd4>
 8027c96:	461f      	mov	r7, r3
 8027c98:	f7ff bb36 	b.w	8027308 <_vfprintf_r+0x240>
 8027c9c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8027ca0:	d002      	beq.n	8027ca8 <_vfprintf_r+0xbe0>
 8027ca2:	b2b6      	uxth	r6, r6
 8027ca4:	f7ff bb30 	b.w	8027308 <_vfprintf_r+0x240>
 8027ca8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8027cac:	f43f ab2c 	beq.w	8027308 <_vfprintf_r+0x240>
 8027cb0:	b2f6      	uxtb	r6, r6
 8027cb2:	e7f0      	b.n	8027c96 <_vfprintf_r+0xbce>
 8027cb4:	2e0a      	cmp	r6, #10
 8027cb6:	f177 0300 	sbcs.w	r3, r7, #0
 8027cba:	d207      	bcs.n	8027ccc <_vfprintf_r+0xc04>
 8027cbc:	3630      	adds	r6, #48	@ 0x30
 8027cbe:	b2f6      	uxtb	r6, r6
 8027cc0:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8027cc4:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 8027cc8:	f000 bc1a 	b.w	8028500 <_vfprintf_r+0x1438>
 8027ccc:	2300      	movs	r3, #0
 8027cce:	9304      	str	r3, [sp, #16]
 8027cd0:	9b08      	ldr	r3, [sp, #32]
 8027cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8027cd6:	ad52      	add	r5, sp, #328	@ 0x148
 8027cd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8027cda:	220a      	movs	r2, #10
 8027cdc:	2300      	movs	r3, #0
 8027cde:	4630      	mov	r0, r6
 8027ce0:	4639      	mov	r1, r7
 8027ce2:	f7e9 f839 	bl	8010d58 <__aeabi_uldivmod>
 8027ce6:	9b04      	ldr	r3, [sp, #16]
 8027ce8:	9011      	str	r0, [sp, #68]	@ 0x44
 8027cea:	3301      	adds	r3, #1
 8027cec:	9304      	str	r3, [sp, #16]
 8027cee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027cf0:	3230      	adds	r2, #48	@ 0x30
 8027cf2:	468a      	mov	sl, r1
 8027cf4:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 8027cf8:	f805 2c01 	strb.w	r2, [r5, #-1]
 8027cfc:	b1d3      	cbz	r3, 8027d34 <_vfprintf_r+0xc6c>
 8027cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d00:	9a04      	ldr	r2, [sp, #16]
 8027d02:	781b      	ldrb	r3, [r3, #0]
 8027d04:	429a      	cmp	r2, r3
 8027d06:	d115      	bne.n	8027d34 <_vfprintf_r+0xc6c>
 8027d08:	2aff      	cmp	r2, #255	@ 0xff
 8027d0a:	d013      	beq.n	8027d34 <_vfprintf_r+0xc6c>
 8027d0c:	2e0a      	cmp	r6, #10
 8027d0e:	f177 0300 	sbcs.w	r3, r7, #0
 8027d12:	d30f      	bcc.n	8027d34 <_vfprintf_r+0xc6c>
 8027d14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027d16:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8027d18:	eba8 0803 	sub.w	r8, r8, r3
 8027d1c:	461a      	mov	r2, r3
 8027d1e:	4640      	mov	r0, r8
 8027d20:	f001 ff25 	bl	8029b6e <strncpy>
 8027d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d26:	785b      	ldrb	r3, [r3, #1]
 8027d28:	b11b      	cbz	r3, 8027d32 <_vfprintf_r+0xc6a>
 8027d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d2c:	3301      	adds	r3, #1
 8027d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8027d30:	2300      	movs	r3, #0
 8027d32:	9304      	str	r3, [sp, #16]
 8027d34:	2e0a      	cmp	r6, #10
 8027d36:	f177 0700 	sbcs.w	r7, r7, #0
 8027d3a:	f0c0 83e1 	bcc.w	8028500 <_vfprintf_r+0x1438>
 8027d3e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8027d40:	4657      	mov	r7, sl
 8027d42:	4645      	mov	r5, r8
 8027d44:	e7c9      	b.n	8027cda <_vfprintf_r+0xc12>
 8027d46:	f006 030f 	and.w	r3, r6, #15
 8027d4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8027d4c:	0936      	lsrs	r6, r6, #4
 8027d4e:	5cd3      	ldrb	r3, [r2, r3]
 8027d50:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8027d54:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8027d58:	093f      	lsrs	r7, r7, #4
 8027d5a:	ea56 0307 	orrs.w	r3, r6, r7
 8027d5e:	d1f2      	bne.n	8027d46 <_vfprintf_r+0xc7e>
 8027d60:	e3ce      	b.n	8028500 <_vfprintf_r+0x1438>
 8027d62:	b91b      	cbnz	r3, 8027d6c <_vfprintf_r+0xca4>
 8027d64:	07ed      	lsls	r5, r5, #31
 8027d66:	d501      	bpl.n	8027d6c <_vfprintf_r+0xca4>
 8027d68:	2630      	movs	r6, #48	@ 0x30
 8027d6a:	e7a9      	b.n	8027cc0 <_vfprintf_r+0xbf8>
 8027d6c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8027d70:	e3c6      	b.n	8028500 <_vfprintf_r+0x1438>
 8027d72:	9b06      	ldr	r3, [sp, #24]
 8027d74:	2b00      	cmp	r3, #0
 8027d76:	f000 8390 	beq.w	802849a <_vfprintf_r+0x13d2>
 8027d7a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8027d7e:	2300      	movs	r3, #0
 8027d80:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8027d84:	9607      	str	r6, [sp, #28]
 8027d86:	f7ff bb5c 	b.w	8027442 <_vfprintf_r+0x37a>
 8027d8a:	2010      	movs	r0, #16
 8027d8c:	4403      	add	r3, r0
 8027d8e:	2a07      	cmp	r2, #7
 8027d90:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8027d94:	6060      	str	r0, [r4, #4]
 8027d96:	dd08      	ble.n	8027daa <_vfprintf_r+0xce2>
 8027d98:	9803      	ldr	r0, [sp, #12]
 8027d9a:	aa26      	add	r2, sp, #152	@ 0x98
 8027d9c:	4659      	mov	r1, fp
 8027d9e:	f000 fbff 	bl	80285a0 <__sprint_r>
 8027da2:	2800      	cmp	r0, #0
 8027da4:	f040 8357 	bne.w	8028456 <_vfprintf_r+0x138e>
 8027da8:	a929      	add	r1, sp, #164	@ 0xa4
 8027daa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027dac:	3b10      	subs	r3, #16
 8027dae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027db0:	460c      	mov	r4, r1
 8027db2:	e547      	b.n	8027844 <_vfprintf_r+0x77c>
 8027db4:	460c      	mov	r4, r1
 8027db6:	e562      	b.n	802787e <_vfprintf_r+0x7b6>
 8027db8:	9803      	ldr	r0, [sp, #12]
 8027dba:	aa26      	add	r2, sp, #152	@ 0x98
 8027dbc:	4659      	mov	r1, fp
 8027dbe:	f000 fbef 	bl	80285a0 <__sprint_r>
 8027dc2:	2800      	cmp	r0, #0
 8027dc4:	f040 8347 	bne.w	8028456 <_vfprintf_r+0x138e>
 8027dc8:	ac29      	add	r4, sp, #164	@ 0xa4
 8027dca:	e56a      	b.n	80278a2 <_vfprintf_r+0x7da>
 8027dcc:	9803      	ldr	r0, [sp, #12]
 8027dce:	aa26      	add	r2, sp, #152	@ 0x98
 8027dd0:	4659      	mov	r1, fp
 8027dd2:	f000 fbe5 	bl	80285a0 <__sprint_r>
 8027dd6:	2800      	cmp	r0, #0
 8027dd8:	f040 833d 	bne.w	8028456 <_vfprintf_r+0x138e>
 8027ddc:	ac29      	add	r4, sp, #164	@ 0xa4
 8027dde:	e570      	b.n	80278c2 <_vfprintf_r+0x7fa>
 8027de0:	2010      	movs	r0, #16
 8027de2:	4403      	add	r3, r0
 8027de4:	2a07      	cmp	r2, #7
 8027de6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8027dea:	6060      	str	r0, [r4, #4]
 8027dec:	dd08      	ble.n	8027e00 <_vfprintf_r+0xd38>
 8027dee:	9803      	ldr	r0, [sp, #12]
 8027df0:	aa26      	add	r2, sp, #152	@ 0x98
 8027df2:	4659      	mov	r1, fp
 8027df4:	f000 fbd4 	bl	80285a0 <__sprint_r>
 8027df8:	2800      	cmp	r0, #0
 8027dfa:	f040 832c 	bne.w	8028456 <_vfprintf_r+0x138e>
 8027dfe:	a929      	add	r1, sp, #164	@ 0xa4
 8027e00:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027e02:	3b10      	subs	r3, #16
 8027e04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027e06:	460c      	mov	r4, r1
 8027e08:	e564      	b.n	80278d4 <_vfprintf_r+0x80c>
 8027e0a:	460c      	mov	r4, r1
 8027e0c:	e57f      	b.n	802790e <_vfprintf_r+0x846>
 8027e0e:	2010      	movs	r0, #16
 8027e10:	4403      	add	r3, r0
 8027e12:	2a07      	cmp	r2, #7
 8027e14:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8027e18:	6060      	str	r0, [r4, #4]
 8027e1a:	dd08      	ble.n	8027e2e <_vfprintf_r+0xd66>
 8027e1c:	9803      	ldr	r0, [sp, #12]
 8027e1e:	aa26      	add	r2, sp, #152	@ 0x98
 8027e20:	4659      	mov	r1, fp
 8027e22:	f000 fbbd 	bl	80285a0 <__sprint_r>
 8027e26:	2800      	cmp	r0, #0
 8027e28:	f040 8315 	bne.w	8028456 <_vfprintf_r+0x138e>
 8027e2c:	a929      	add	r1, sp, #164	@ 0xa4
 8027e2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027e30:	3b10      	subs	r3, #16
 8027e32:	9310      	str	r3, [sp, #64]	@ 0x40
 8027e34:	460c      	mov	r4, r1
 8027e36:	e570      	b.n	802791a <_vfprintf_r+0x852>
 8027e38:	460c      	mov	r4, r1
 8027e3a:	e58b      	b.n	8027954 <_vfprintf_r+0x88c>
 8027e3c:	0803819f 	.word	0x0803819f
 8027e40:	080381b0 	.word	0x080381b0
 8027e44:	9b06      	ldr	r3, [sp, #24]
 8027e46:	2b65      	cmp	r3, #101	@ 0x65
 8027e48:	f340 8245 	ble.w	80282d6 <_vfprintf_r+0x120e>
 8027e4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8027e50:	2200      	movs	r2, #0
 8027e52:	2300      	movs	r3, #0
 8027e54:	f7e8 fe50 	bl	8010af8 <__aeabi_dcmpeq>
 8027e58:	2800      	cmp	r0, #0
 8027e5a:	d06a      	beq.n	8027f32 <_vfprintf_r+0xe6a>
 8027e5c:	4b73      	ldr	r3, [pc, #460]	@ (802802c <_vfprintf_r+0xf64>)
 8027e5e:	6023      	str	r3, [r4, #0]
 8027e60:	2301      	movs	r3, #1
 8027e62:	6063      	str	r3, [r4, #4]
 8027e64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027e66:	3301      	adds	r3, #1
 8027e68:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027e6a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027e6c:	3301      	adds	r3, #1
 8027e6e:	2b07      	cmp	r3, #7
 8027e70:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027e72:	dc37      	bgt.n	8027ee4 <_vfprintf_r+0xe1c>
 8027e74:	3408      	adds	r4, #8
 8027e76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027e78:	9a04      	ldr	r2, [sp, #16]
 8027e7a:	4293      	cmp	r3, r2
 8027e7c:	db02      	blt.n	8027e84 <_vfprintf_r+0xdbc>
 8027e7e:	07e9      	lsls	r1, r5, #31
 8027e80:	f57f ad78 	bpl.w	8027974 <_vfprintf_r+0x8ac>
 8027e84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027e86:	6023      	str	r3, [r4, #0]
 8027e88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027e8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027e8c:	6063      	str	r3, [r4, #4]
 8027e8e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027e90:	4413      	add	r3, r2
 8027e92:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027e94:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027e96:	3301      	adds	r3, #1
 8027e98:	2b07      	cmp	r3, #7
 8027e9a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027e9c:	dc2c      	bgt.n	8027ef8 <_vfprintf_r+0xe30>
 8027e9e:	3408      	adds	r4, #8
 8027ea0:	9b04      	ldr	r3, [sp, #16]
 8027ea2:	1e5e      	subs	r6, r3, #1
 8027ea4:	2e00      	cmp	r6, #0
 8027ea6:	f77f ad65 	ble.w	8027974 <_vfprintf_r+0x8ac>
 8027eaa:	4f61      	ldr	r7, [pc, #388]	@ (8028030 <_vfprintf_r+0xf68>)
 8027eac:	f04f 0810 	mov.w	r8, #16
 8027eb0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8027eb4:	2e10      	cmp	r6, #16
 8027eb6:	f103 0301 	add.w	r3, r3, #1
 8027eba:	f104 0108 	add.w	r1, r4, #8
 8027ebe:	6027      	str	r7, [r4, #0]
 8027ec0:	dc24      	bgt.n	8027f0c <_vfprintf_r+0xe44>
 8027ec2:	6066      	str	r6, [r4, #4]
 8027ec4:	2b07      	cmp	r3, #7
 8027ec6:	4416      	add	r6, r2
 8027ec8:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8027ecc:	f340 82a2 	ble.w	8028414 <_vfprintf_r+0x134c>
 8027ed0:	9803      	ldr	r0, [sp, #12]
 8027ed2:	aa26      	add	r2, sp, #152	@ 0x98
 8027ed4:	4659      	mov	r1, fp
 8027ed6:	f000 fb63 	bl	80285a0 <__sprint_r>
 8027eda:	2800      	cmp	r0, #0
 8027edc:	f040 82bb 	bne.w	8028456 <_vfprintf_r+0x138e>
 8027ee0:	ac29      	add	r4, sp, #164	@ 0xa4
 8027ee2:	e547      	b.n	8027974 <_vfprintf_r+0x8ac>
 8027ee4:	9803      	ldr	r0, [sp, #12]
 8027ee6:	aa26      	add	r2, sp, #152	@ 0x98
 8027ee8:	4659      	mov	r1, fp
 8027eea:	f000 fb59 	bl	80285a0 <__sprint_r>
 8027eee:	2800      	cmp	r0, #0
 8027ef0:	f040 82b1 	bne.w	8028456 <_vfprintf_r+0x138e>
 8027ef4:	ac29      	add	r4, sp, #164	@ 0xa4
 8027ef6:	e7be      	b.n	8027e76 <_vfprintf_r+0xdae>
 8027ef8:	9803      	ldr	r0, [sp, #12]
 8027efa:	aa26      	add	r2, sp, #152	@ 0x98
 8027efc:	4659      	mov	r1, fp
 8027efe:	f000 fb4f 	bl	80285a0 <__sprint_r>
 8027f02:	2800      	cmp	r0, #0
 8027f04:	f040 82a7 	bne.w	8028456 <_vfprintf_r+0x138e>
 8027f08:	ac29      	add	r4, sp, #164	@ 0xa4
 8027f0a:	e7c9      	b.n	8027ea0 <_vfprintf_r+0xdd8>
 8027f0c:	3210      	adds	r2, #16
 8027f0e:	2b07      	cmp	r3, #7
 8027f10:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8027f14:	f8c4 8004 	str.w	r8, [r4, #4]
 8027f18:	dd08      	ble.n	8027f2c <_vfprintf_r+0xe64>
 8027f1a:	9803      	ldr	r0, [sp, #12]
 8027f1c:	aa26      	add	r2, sp, #152	@ 0x98
 8027f1e:	4659      	mov	r1, fp
 8027f20:	f000 fb3e 	bl	80285a0 <__sprint_r>
 8027f24:	2800      	cmp	r0, #0
 8027f26:	f040 8296 	bne.w	8028456 <_vfprintf_r+0x138e>
 8027f2a:	a929      	add	r1, sp, #164	@ 0xa4
 8027f2c:	3e10      	subs	r6, #16
 8027f2e:	460c      	mov	r4, r1
 8027f30:	e7be      	b.n	8027eb0 <_vfprintf_r+0xde8>
 8027f32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f34:	2b00      	cmp	r3, #0
 8027f36:	dc7d      	bgt.n	8028034 <_vfprintf_r+0xf6c>
 8027f38:	4b3c      	ldr	r3, [pc, #240]	@ (802802c <_vfprintf_r+0xf64>)
 8027f3a:	6023      	str	r3, [r4, #0]
 8027f3c:	2301      	movs	r3, #1
 8027f3e:	6063      	str	r3, [r4, #4]
 8027f40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027f42:	3301      	adds	r3, #1
 8027f44:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027f46:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027f48:	3301      	adds	r3, #1
 8027f4a:	2b07      	cmp	r3, #7
 8027f4c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027f4e:	dc46      	bgt.n	8027fde <_vfprintf_r+0xf16>
 8027f50:	3408      	adds	r4, #8
 8027f52:	9904      	ldr	r1, [sp, #16]
 8027f54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f56:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8027f58:	430b      	orrs	r3, r1
 8027f5a:	f005 0101 	and.w	r1, r5, #1
 8027f5e:	430b      	orrs	r3, r1
 8027f60:	f43f ad08 	beq.w	8027974 <_vfprintf_r+0x8ac>
 8027f64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027f66:	6023      	str	r3, [r4, #0]
 8027f68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027f6a:	6063      	str	r3, [r4, #4]
 8027f6c:	441a      	add	r2, r3
 8027f6e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027f70:	9228      	str	r2, [sp, #160]	@ 0xa0
 8027f72:	3301      	adds	r3, #1
 8027f74:	2b07      	cmp	r3, #7
 8027f76:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027f78:	dc3b      	bgt.n	8027ff2 <_vfprintf_r+0xf2a>
 8027f7a:	f104 0308 	add.w	r3, r4, #8
 8027f7e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8027f80:	2e00      	cmp	r6, #0
 8027f82:	da1b      	bge.n	8027fbc <_vfprintf_r+0xef4>
 8027f84:	4f2a      	ldr	r7, [pc, #168]	@ (8028030 <_vfprintf_r+0xf68>)
 8027f86:	4276      	negs	r6, r6
 8027f88:	461a      	mov	r2, r3
 8027f8a:	2410      	movs	r4, #16
 8027f8c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8027f90:	2e10      	cmp	r6, #16
 8027f92:	f101 0101 	add.w	r1, r1, #1
 8027f96:	f103 0308 	add.w	r3, r3, #8
 8027f9a:	6017      	str	r7, [r2, #0]
 8027f9c:	dc33      	bgt.n	8028006 <_vfprintf_r+0xf3e>
 8027f9e:	6056      	str	r6, [r2, #4]
 8027fa0:	2907      	cmp	r1, #7
 8027fa2:	4406      	add	r6, r0
 8027fa4:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8027fa8:	dd08      	ble.n	8027fbc <_vfprintf_r+0xef4>
 8027faa:	9803      	ldr	r0, [sp, #12]
 8027fac:	aa26      	add	r2, sp, #152	@ 0x98
 8027fae:	4659      	mov	r1, fp
 8027fb0:	f000 faf6 	bl	80285a0 <__sprint_r>
 8027fb4:	2800      	cmp	r0, #0
 8027fb6:	f040 824e 	bne.w	8028456 <_vfprintf_r+0x138e>
 8027fba:	ab29      	add	r3, sp, #164	@ 0xa4
 8027fbc:	9a04      	ldr	r2, [sp, #16]
 8027fbe:	9904      	ldr	r1, [sp, #16]
 8027fc0:	605a      	str	r2, [r3, #4]
 8027fc2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8027fc4:	f8c3 8000 	str.w	r8, [r3]
 8027fc8:	440a      	add	r2, r1
 8027fca:	9228      	str	r2, [sp, #160]	@ 0xa0
 8027fcc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8027fce:	3201      	adds	r2, #1
 8027fd0:	2a07      	cmp	r2, #7
 8027fd2:	9227      	str	r2, [sp, #156]	@ 0x9c
 8027fd4:	f73f af7c 	bgt.w	8027ed0 <_vfprintf_r+0xe08>
 8027fd8:	f103 0408 	add.w	r4, r3, #8
 8027fdc:	e4ca      	b.n	8027974 <_vfprintf_r+0x8ac>
 8027fde:	9803      	ldr	r0, [sp, #12]
 8027fe0:	aa26      	add	r2, sp, #152	@ 0x98
 8027fe2:	4659      	mov	r1, fp
 8027fe4:	f000 fadc 	bl	80285a0 <__sprint_r>
 8027fe8:	2800      	cmp	r0, #0
 8027fea:	f040 8234 	bne.w	8028456 <_vfprintf_r+0x138e>
 8027fee:	ac29      	add	r4, sp, #164	@ 0xa4
 8027ff0:	e7af      	b.n	8027f52 <_vfprintf_r+0xe8a>
 8027ff2:	9803      	ldr	r0, [sp, #12]
 8027ff4:	aa26      	add	r2, sp, #152	@ 0x98
 8027ff6:	4659      	mov	r1, fp
 8027ff8:	f000 fad2 	bl	80285a0 <__sprint_r>
 8027ffc:	2800      	cmp	r0, #0
 8027ffe:	f040 822a 	bne.w	8028456 <_vfprintf_r+0x138e>
 8028002:	ab29      	add	r3, sp, #164	@ 0xa4
 8028004:	e7bb      	b.n	8027f7e <_vfprintf_r+0xeb6>
 8028006:	3010      	adds	r0, #16
 8028008:	2907      	cmp	r1, #7
 802800a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802800e:	6054      	str	r4, [r2, #4]
 8028010:	dd08      	ble.n	8028024 <_vfprintf_r+0xf5c>
 8028012:	9803      	ldr	r0, [sp, #12]
 8028014:	aa26      	add	r2, sp, #152	@ 0x98
 8028016:	4659      	mov	r1, fp
 8028018:	f000 fac2 	bl	80285a0 <__sprint_r>
 802801c:	2800      	cmp	r0, #0
 802801e:	f040 821a 	bne.w	8028456 <_vfprintf_r+0x138e>
 8028022:	ab29      	add	r3, sp, #164	@ 0xa4
 8028024:	3e10      	subs	r6, #16
 8028026:	461a      	mov	r2, r3
 8028028:	e7b0      	b.n	8027f8c <_vfprintf_r+0xec4>
 802802a:	bf00      	nop
 802802c:	080381c1 	.word	0x080381c1
 8028030:	080381c3 	.word	0x080381c3
 8028034:	9b04      	ldr	r3, [sp, #16]
 8028036:	4443      	add	r3, r8
 8028038:	9313      	str	r3, [sp, #76]	@ 0x4c
 802803a:	9b04      	ldr	r3, [sp, #16]
 802803c:	42b3      	cmp	r3, r6
 802803e:	bfa8      	it	ge
 8028040:	4633      	movge	r3, r6
 8028042:	2b00      	cmp	r3, #0
 8028044:	4699      	mov	r9, r3
 8028046:	dd0b      	ble.n	8028060 <_vfprintf_r+0xf98>
 8028048:	e9c4 8300 	strd	r8, r3, [r4]
 802804c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802804e:	444b      	add	r3, r9
 8028050:	9328      	str	r3, [sp, #160]	@ 0xa0
 8028052:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028054:	3301      	adds	r3, #1
 8028056:	2b07      	cmp	r3, #7
 8028058:	9327      	str	r3, [sp, #156]	@ 0x9c
 802805a:	f300 8089 	bgt.w	8028170 <_vfprintf_r+0x10a8>
 802805e:	3408      	adds	r4, #8
 8028060:	f1b9 0f00 	cmp.w	r9, #0
 8028064:	bfac      	ite	ge
 8028066:	eba6 0309 	subge.w	r3, r6, r9
 802806a:	4633      	movlt	r3, r6
 802806c:	2b00      	cmp	r3, #0
 802806e:	9306      	str	r3, [sp, #24]
 8028070:	dd1c      	ble.n	80280ac <_vfprintf_r+0xfe4>
 8028072:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 80283d8 <_vfprintf_r+0x1310>
 8028076:	9806      	ldr	r0, [sp, #24]
 8028078:	f8c4 9000 	str.w	r9, [r4]
 802807c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8028080:	2810      	cmp	r0, #16
 8028082:	f102 0201 	add.w	r2, r2, #1
 8028086:	f104 0108 	add.w	r1, r4, #8
 802808a:	dc7b      	bgt.n	8028184 <_vfprintf_r+0x10bc>
 802808c:	4403      	add	r3, r0
 802808e:	2a07      	cmp	r2, #7
 8028090:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8028094:	6060      	str	r0, [r4, #4]
 8028096:	f340 808a 	ble.w	80281ae <_vfprintf_r+0x10e6>
 802809a:	9803      	ldr	r0, [sp, #12]
 802809c:	aa26      	add	r2, sp, #152	@ 0x98
 802809e:	4659      	mov	r1, fp
 80280a0:	f000 fa7e 	bl	80285a0 <__sprint_r>
 80280a4:	2800      	cmp	r0, #0
 80280a6:	f040 81d6 	bne.w	8028456 <_vfprintf_r+0x138e>
 80280aa:	ac29      	add	r4, sp, #164	@ 0xa4
 80280ac:	056a      	lsls	r2, r5, #21
 80280ae:	44b0      	add	r8, r6
 80280b0:	d508      	bpl.n	80280c4 <_vfprintf_r+0xffc>
 80280b2:	9b08      	ldr	r3, [sp, #32]
 80280b4:	2b00      	cmp	r3, #0
 80280b6:	d17c      	bne.n	80281b2 <_vfprintf_r+0x10ea>
 80280b8:	2f00      	cmp	r7, #0
 80280ba:	d17c      	bne.n	80281b6 <_vfprintf_r+0x10ee>
 80280bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80280be:	4598      	cmp	r8, r3
 80280c0:	bf28      	it	cs
 80280c2:	4698      	movcs	r8, r3
 80280c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80280c6:	9a04      	ldr	r2, [sp, #16]
 80280c8:	4293      	cmp	r3, r2
 80280ca:	db01      	blt.n	80280d0 <_vfprintf_r+0x1008>
 80280cc:	07eb      	lsls	r3, r5, #31
 80280ce:	d50e      	bpl.n	80280ee <_vfprintf_r+0x1026>
 80280d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80280d2:	6023      	str	r3, [r4, #0]
 80280d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80280d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80280d8:	6063      	str	r3, [r4, #4]
 80280da:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80280dc:	4413      	add	r3, r2
 80280de:	9328      	str	r3, [sp, #160]	@ 0xa0
 80280e0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80280e2:	3301      	adds	r3, #1
 80280e4:	2b07      	cmp	r3, #7
 80280e6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80280e8:	f300 80e1 	bgt.w	80282ae <_vfprintf_r+0x11e6>
 80280ec:	3408      	adds	r4, #8
 80280ee:	9b04      	ldr	r3, [sp, #16]
 80280f0:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 80280f2:	1bdf      	subs	r7, r3, r7
 80280f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80280f6:	eba3 0308 	sub.w	r3, r3, r8
 80280fa:	429f      	cmp	r7, r3
 80280fc:	bfa8      	it	ge
 80280fe:	461f      	movge	r7, r3
 8028100:	2f00      	cmp	r7, #0
 8028102:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028104:	dd0a      	ble.n	802811c <_vfprintf_r+0x1054>
 8028106:	443b      	add	r3, r7
 8028108:	9328      	str	r3, [sp, #160]	@ 0xa0
 802810a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802810c:	3301      	adds	r3, #1
 802810e:	2b07      	cmp	r3, #7
 8028110:	e9c4 8700 	strd	r8, r7, [r4]
 8028114:	9327      	str	r3, [sp, #156]	@ 0x9c
 8028116:	f300 80d4 	bgt.w	80282c2 <_vfprintf_r+0x11fa>
 802811a:	3408      	adds	r4, #8
 802811c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802811e:	9b04      	ldr	r3, [sp, #16]
 8028120:	2f00      	cmp	r7, #0
 8028122:	eba3 0606 	sub.w	r6, r3, r6
 8028126:	bfa8      	it	ge
 8028128:	1bf6      	subge	r6, r6, r7
 802812a:	2e00      	cmp	r6, #0
 802812c:	f77f ac22 	ble.w	8027974 <_vfprintf_r+0x8ac>
 8028130:	4fa9      	ldr	r7, [pc, #676]	@ (80283d8 <_vfprintf_r+0x1310>)
 8028132:	f04f 0810 	mov.w	r8, #16
 8028136:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802813a:	2e10      	cmp	r6, #16
 802813c:	f103 0301 	add.w	r3, r3, #1
 8028140:	f104 0108 	add.w	r1, r4, #8
 8028144:	6027      	str	r7, [r4, #0]
 8028146:	f77f aebc 	ble.w	8027ec2 <_vfprintf_r+0xdfa>
 802814a:	3210      	adds	r2, #16
 802814c:	2b07      	cmp	r3, #7
 802814e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8028152:	f8c4 8004 	str.w	r8, [r4, #4]
 8028156:	dd08      	ble.n	802816a <_vfprintf_r+0x10a2>
 8028158:	9803      	ldr	r0, [sp, #12]
 802815a:	aa26      	add	r2, sp, #152	@ 0x98
 802815c:	4659      	mov	r1, fp
 802815e:	f000 fa1f 	bl	80285a0 <__sprint_r>
 8028162:	2800      	cmp	r0, #0
 8028164:	f040 8177 	bne.w	8028456 <_vfprintf_r+0x138e>
 8028168:	a929      	add	r1, sp, #164	@ 0xa4
 802816a:	3e10      	subs	r6, #16
 802816c:	460c      	mov	r4, r1
 802816e:	e7e2      	b.n	8028136 <_vfprintf_r+0x106e>
 8028170:	9803      	ldr	r0, [sp, #12]
 8028172:	aa26      	add	r2, sp, #152	@ 0x98
 8028174:	4659      	mov	r1, fp
 8028176:	f000 fa13 	bl	80285a0 <__sprint_r>
 802817a:	2800      	cmp	r0, #0
 802817c:	f040 816b 	bne.w	8028456 <_vfprintf_r+0x138e>
 8028180:	ac29      	add	r4, sp, #164	@ 0xa4
 8028182:	e76d      	b.n	8028060 <_vfprintf_r+0xf98>
 8028184:	2010      	movs	r0, #16
 8028186:	4403      	add	r3, r0
 8028188:	2a07      	cmp	r2, #7
 802818a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802818e:	6060      	str	r0, [r4, #4]
 8028190:	dd08      	ble.n	80281a4 <_vfprintf_r+0x10dc>
 8028192:	9803      	ldr	r0, [sp, #12]
 8028194:	aa26      	add	r2, sp, #152	@ 0x98
 8028196:	4659      	mov	r1, fp
 8028198:	f000 fa02 	bl	80285a0 <__sprint_r>
 802819c:	2800      	cmp	r0, #0
 802819e:	f040 815a 	bne.w	8028456 <_vfprintf_r+0x138e>
 80281a2:	a929      	add	r1, sp, #164	@ 0xa4
 80281a4:	9b06      	ldr	r3, [sp, #24]
 80281a6:	3b10      	subs	r3, #16
 80281a8:	9306      	str	r3, [sp, #24]
 80281aa:	460c      	mov	r4, r1
 80281ac:	e763      	b.n	8028076 <_vfprintf_r+0xfae>
 80281ae:	460c      	mov	r4, r1
 80281b0:	e77c      	b.n	80280ac <_vfprintf_r+0xfe4>
 80281b2:	2f00      	cmp	r7, #0
 80281b4:	d04b      	beq.n	802824e <_vfprintf_r+0x1186>
 80281b6:	3f01      	subs	r7, #1
 80281b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80281ba:	6023      	str	r3, [r4, #0]
 80281bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80281be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80281c0:	6063      	str	r3, [r4, #4]
 80281c2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80281c4:	4413      	add	r3, r2
 80281c6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80281c8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80281ca:	3301      	adds	r3, #1
 80281cc:	2b07      	cmp	r3, #7
 80281ce:	9327      	str	r3, [sp, #156]	@ 0x9c
 80281d0:	dc44      	bgt.n	802825c <_vfprintf_r+0x1194>
 80281d2:	3408      	adds	r4, #8
 80281d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80281d6:	f893 9000 	ldrb.w	r9, [r3]
 80281da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80281dc:	eba3 0308 	sub.w	r3, r3, r8
 80281e0:	4599      	cmp	r9, r3
 80281e2:	bfa8      	it	ge
 80281e4:	4699      	movge	r9, r3
 80281e6:	f1b9 0f00 	cmp.w	r9, #0
 80281ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80281ec:	dd09      	ble.n	8028202 <_vfprintf_r+0x113a>
 80281ee:	444b      	add	r3, r9
 80281f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80281f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80281f4:	3301      	adds	r3, #1
 80281f6:	2b07      	cmp	r3, #7
 80281f8:	e9c4 8900 	strd	r8, r9, [r4]
 80281fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80281fe:	dc37      	bgt.n	8028270 <_vfprintf_r+0x11a8>
 8028200:	3408      	adds	r4, #8
 8028202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028204:	781e      	ldrb	r6, [r3, #0]
 8028206:	f1b9 0f00 	cmp.w	r9, #0
 802820a:	bfa8      	it	ge
 802820c:	eba6 0609 	subge.w	r6, r6, r9
 8028210:	2e00      	cmp	r6, #0
 8028212:	dd18      	ble.n	8028246 <_vfprintf_r+0x117e>
 8028214:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8028218:	486f      	ldr	r0, [pc, #444]	@ (80283d8 <_vfprintf_r+0x1310>)
 802821a:	6020      	str	r0, [r4, #0]
 802821c:	2e10      	cmp	r6, #16
 802821e:	f103 0301 	add.w	r3, r3, #1
 8028222:	f104 0108 	add.w	r1, r4, #8
 8028226:	dc2d      	bgt.n	8028284 <_vfprintf_r+0x11bc>
 8028228:	6066      	str	r6, [r4, #4]
 802822a:	2b07      	cmp	r3, #7
 802822c:	4416      	add	r6, r2
 802822e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8028232:	dd3a      	ble.n	80282aa <_vfprintf_r+0x11e2>
 8028234:	9803      	ldr	r0, [sp, #12]
 8028236:	aa26      	add	r2, sp, #152	@ 0x98
 8028238:	4659      	mov	r1, fp
 802823a:	f000 f9b1 	bl	80285a0 <__sprint_r>
 802823e:	2800      	cmp	r0, #0
 8028240:	f040 8109 	bne.w	8028456 <_vfprintf_r+0x138e>
 8028244:	ac29      	add	r4, sp, #164	@ 0xa4
 8028246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028248:	781b      	ldrb	r3, [r3, #0]
 802824a:	4498      	add	r8, r3
 802824c:	e731      	b.n	80280b2 <_vfprintf_r+0xfea>
 802824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028250:	3b01      	subs	r3, #1
 8028252:	9309      	str	r3, [sp, #36]	@ 0x24
 8028254:	9b08      	ldr	r3, [sp, #32]
 8028256:	3b01      	subs	r3, #1
 8028258:	9308      	str	r3, [sp, #32]
 802825a:	e7ad      	b.n	80281b8 <_vfprintf_r+0x10f0>
 802825c:	9803      	ldr	r0, [sp, #12]
 802825e:	aa26      	add	r2, sp, #152	@ 0x98
 8028260:	4659      	mov	r1, fp
 8028262:	f000 f99d 	bl	80285a0 <__sprint_r>
 8028266:	2800      	cmp	r0, #0
 8028268:	f040 80f5 	bne.w	8028456 <_vfprintf_r+0x138e>
 802826c:	ac29      	add	r4, sp, #164	@ 0xa4
 802826e:	e7b1      	b.n	80281d4 <_vfprintf_r+0x110c>
 8028270:	9803      	ldr	r0, [sp, #12]
 8028272:	aa26      	add	r2, sp, #152	@ 0x98
 8028274:	4659      	mov	r1, fp
 8028276:	f000 f993 	bl	80285a0 <__sprint_r>
 802827a:	2800      	cmp	r0, #0
 802827c:	f040 80eb 	bne.w	8028456 <_vfprintf_r+0x138e>
 8028280:	ac29      	add	r4, sp, #164	@ 0xa4
 8028282:	e7be      	b.n	8028202 <_vfprintf_r+0x113a>
 8028284:	2010      	movs	r0, #16
 8028286:	4402      	add	r2, r0
 8028288:	2b07      	cmp	r3, #7
 802828a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802828e:	6060      	str	r0, [r4, #4]
 8028290:	dd08      	ble.n	80282a4 <_vfprintf_r+0x11dc>
 8028292:	9803      	ldr	r0, [sp, #12]
 8028294:	aa26      	add	r2, sp, #152	@ 0x98
 8028296:	4659      	mov	r1, fp
 8028298:	f000 f982 	bl	80285a0 <__sprint_r>
 802829c:	2800      	cmp	r0, #0
 802829e:	f040 80da 	bne.w	8028456 <_vfprintf_r+0x138e>
 80282a2:	a929      	add	r1, sp, #164	@ 0xa4
 80282a4:	3e10      	subs	r6, #16
 80282a6:	460c      	mov	r4, r1
 80282a8:	e7b4      	b.n	8028214 <_vfprintf_r+0x114c>
 80282aa:	460c      	mov	r4, r1
 80282ac:	e7cb      	b.n	8028246 <_vfprintf_r+0x117e>
 80282ae:	9803      	ldr	r0, [sp, #12]
 80282b0:	aa26      	add	r2, sp, #152	@ 0x98
 80282b2:	4659      	mov	r1, fp
 80282b4:	f000 f974 	bl	80285a0 <__sprint_r>
 80282b8:	2800      	cmp	r0, #0
 80282ba:	f040 80cc 	bne.w	8028456 <_vfprintf_r+0x138e>
 80282be:	ac29      	add	r4, sp, #164	@ 0xa4
 80282c0:	e715      	b.n	80280ee <_vfprintf_r+0x1026>
 80282c2:	9803      	ldr	r0, [sp, #12]
 80282c4:	aa26      	add	r2, sp, #152	@ 0x98
 80282c6:	4659      	mov	r1, fp
 80282c8:	f000 f96a 	bl	80285a0 <__sprint_r>
 80282cc:	2800      	cmp	r0, #0
 80282ce:	f040 80c2 	bne.w	8028456 <_vfprintf_r+0x138e>
 80282d2:	ac29      	add	r4, sp, #164	@ 0xa4
 80282d4:	e722      	b.n	802811c <_vfprintf_r+0x1054>
 80282d6:	9904      	ldr	r1, [sp, #16]
 80282d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80282da:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80282dc:	2901      	cmp	r1, #1
 80282de:	f103 0301 	add.w	r3, r3, #1
 80282e2:	f102 0201 	add.w	r2, r2, #1
 80282e6:	f104 0608 	add.w	r6, r4, #8
 80282ea:	dc02      	bgt.n	80282f2 <_vfprintf_r+0x122a>
 80282ec:	07ef      	lsls	r7, r5, #31
 80282ee:	f140 8086 	bpl.w	80283fe <_vfprintf_r+0x1336>
 80282f2:	2101      	movs	r1, #1
 80282f4:	2a07      	cmp	r2, #7
 80282f6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80282fa:	f8c4 8000 	str.w	r8, [r4]
 80282fe:	6061      	str	r1, [r4, #4]
 8028300:	dd08      	ble.n	8028314 <_vfprintf_r+0x124c>
 8028302:	9803      	ldr	r0, [sp, #12]
 8028304:	aa26      	add	r2, sp, #152	@ 0x98
 8028306:	4659      	mov	r1, fp
 8028308:	f000 f94a 	bl	80285a0 <__sprint_r>
 802830c:	2800      	cmp	r0, #0
 802830e:	f040 80a2 	bne.w	8028456 <_vfprintf_r+0x138e>
 8028312:	ae29      	add	r6, sp, #164	@ 0xa4
 8028314:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8028316:	6033      	str	r3, [r6, #0]
 8028318:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802831a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802831c:	6073      	str	r3, [r6, #4]
 802831e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028320:	4413      	add	r3, r2
 8028322:	9328      	str	r3, [sp, #160]	@ 0xa0
 8028324:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028326:	3301      	adds	r3, #1
 8028328:	2b07      	cmp	r3, #7
 802832a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802832c:	dc33      	bgt.n	8028396 <_vfprintf_r+0x12ce>
 802832e:	3608      	adds	r6, #8
 8028330:	9b04      	ldr	r3, [sp, #16]
 8028332:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8028336:	1e5c      	subs	r4, r3, #1
 8028338:	2200      	movs	r2, #0
 802833a:	2300      	movs	r3, #0
 802833c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 8028340:	f7e8 fbda 	bl	8010af8 <__aeabi_dcmpeq>
 8028344:	2800      	cmp	r0, #0
 8028346:	d12f      	bne.n	80283a8 <_vfprintf_r+0x12e0>
 8028348:	f108 0201 	add.w	r2, r8, #1
 802834c:	e9c6 2400 	strd	r2, r4, [r6]
 8028350:	9a04      	ldr	r2, [sp, #16]
 8028352:	f109 0301 	add.w	r3, r9, #1
 8028356:	3f01      	subs	r7, #1
 8028358:	4417      	add	r7, r2
 802835a:	2b07      	cmp	r3, #7
 802835c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8028360:	dd56      	ble.n	8028410 <_vfprintf_r+0x1348>
 8028362:	9803      	ldr	r0, [sp, #12]
 8028364:	aa26      	add	r2, sp, #152	@ 0x98
 8028366:	4659      	mov	r1, fp
 8028368:	f000 f91a 	bl	80285a0 <__sprint_r>
 802836c:	2800      	cmp	r0, #0
 802836e:	d172      	bne.n	8028456 <_vfprintf_r+0x138e>
 8028370:	ae29      	add	r6, sp, #164	@ 0xa4
 8028372:	ab22      	add	r3, sp, #136	@ 0x88
 8028374:	6033      	str	r3, [r6, #0]
 8028376:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028378:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802837a:	6073      	str	r3, [r6, #4]
 802837c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802837e:	4413      	add	r3, r2
 8028380:	9328      	str	r3, [sp, #160]	@ 0xa0
 8028382:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028384:	3301      	adds	r3, #1
 8028386:	2b07      	cmp	r3, #7
 8028388:	9327      	str	r3, [sp, #156]	@ 0x9c
 802838a:	f73f ada1 	bgt.w	8027ed0 <_vfprintf_r+0xe08>
 802838e:	f106 0408 	add.w	r4, r6, #8
 8028392:	f7ff baef 	b.w	8027974 <_vfprintf_r+0x8ac>
 8028396:	9803      	ldr	r0, [sp, #12]
 8028398:	aa26      	add	r2, sp, #152	@ 0x98
 802839a:	4659      	mov	r1, fp
 802839c:	f000 f900 	bl	80285a0 <__sprint_r>
 80283a0:	2800      	cmp	r0, #0
 80283a2:	d158      	bne.n	8028456 <_vfprintf_r+0x138e>
 80283a4:	ae29      	add	r6, sp, #164	@ 0xa4
 80283a6:	e7c3      	b.n	8028330 <_vfprintf_r+0x1268>
 80283a8:	9b04      	ldr	r3, [sp, #16]
 80283aa:	2b01      	cmp	r3, #1
 80283ac:	dde1      	ble.n	8028372 <_vfprintf_r+0x12aa>
 80283ae:	4f0a      	ldr	r7, [pc, #40]	@ (80283d8 <_vfprintf_r+0x1310>)
 80283b0:	f04f 0810 	mov.w	r8, #16
 80283b4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80283b8:	2c10      	cmp	r4, #16
 80283ba:	f103 0301 	add.w	r3, r3, #1
 80283be:	f106 0108 	add.w	r1, r6, #8
 80283c2:	6037      	str	r7, [r6, #0]
 80283c4:	dc0a      	bgt.n	80283dc <_vfprintf_r+0x1314>
 80283c6:	6074      	str	r4, [r6, #4]
 80283c8:	2b07      	cmp	r3, #7
 80283ca:	4414      	add	r4, r2
 80283cc:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 80283d0:	dcc7      	bgt.n	8028362 <_vfprintf_r+0x129a>
 80283d2:	460e      	mov	r6, r1
 80283d4:	e7cd      	b.n	8028372 <_vfprintf_r+0x12aa>
 80283d6:	bf00      	nop
 80283d8:	080381c3 	.word	0x080381c3
 80283dc:	3210      	adds	r2, #16
 80283de:	2b07      	cmp	r3, #7
 80283e0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80283e4:	f8c6 8004 	str.w	r8, [r6, #4]
 80283e8:	dd06      	ble.n	80283f8 <_vfprintf_r+0x1330>
 80283ea:	9803      	ldr	r0, [sp, #12]
 80283ec:	aa26      	add	r2, sp, #152	@ 0x98
 80283ee:	4659      	mov	r1, fp
 80283f0:	f000 f8d6 	bl	80285a0 <__sprint_r>
 80283f4:	bb78      	cbnz	r0, 8028456 <_vfprintf_r+0x138e>
 80283f6:	a929      	add	r1, sp, #164	@ 0xa4
 80283f8:	3c10      	subs	r4, #16
 80283fa:	460e      	mov	r6, r1
 80283fc:	e7da      	b.n	80283b4 <_vfprintf_r+0x12ec>
 80283fe:	2101      	movs	r1, #1
 8028400:	2a07      	cmp	r2, #7
 8028402:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8028406:	f8c4 8000 	str.w	r8, [r4]
 802840a:	6061      	str	r1, [r4, #4]
 802840c:	ddb1      	ble.n	8028372 <_vfprintf_r+0x12aa>
 802840e:	e7a8      	b.n	8028362 <_vfprintf_r+0x129a>
 8028410:	3608      	adds	r6, #8
 8028412:	e7ae      	b.n	8028372 <_vfprintf_r+0x12aa>
 8028414:	460c      	mov	r4, r1
 8028416:	f7ff baad 	b.w	8027974 <_vfprintf_r+0x8ac>
 802841a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802841c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802841e:	1a9d      	subs	r5, r3, r2
 8028420:	2d00      	cmp	r5, #0
 8028422:	f77f aaaa 	ble.w	802797a <_vfprintf_r+0x8b2>
 8028426:	4e3d      	ldr	r6, [pc, #244]	@ (802851c <_vfprintf_r+0x1454>)
 8028428:	2710      	movs	r7, #16
 802842a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802842e:	2d10      	cmp	r5, #16
 8028430:	f103 0301 	add.w	r3, r3, #1
 8028434:	6026      	str	r6, [r4, #0]
 8028436:	dc18      	bgt.n	802846a <_vfprintf_r+0x13a2>
 8028438:	6065      	str	r5, [r4, #4]
 802843a:	2b07      	cmp	r3, #7
 802843c:	4415      	add	r5, r2
 802843e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 8028442:	f77f aa9a 	ble.w	802797a <_vfprintf_r+0x8b2>
 8028446:	9803      	ldr	r0, [sp, #12]
 8028448:	aa26      	add	r2, sp, #152	@ 0x98
 802844a:	4659      	mov	r1, fp
 802844c:	f000 f8a8 	bl	80285a0 <__sprint_r>
 8028450:	2800      	cmp	r0, #0
 8028452:	f43f aa92 	beq.w	802797a <_vfprintf_r+0x8b2>
 8028456:	f1ba 0f00 	cmp.w	sl, #0
 802845a:	f43f a892 	beq.w	8027582 <_vfprintf_r+0x4ba>
 802845e:	9803      	ldr	r0, [sp, #12]
 8028460:	4651      	mov	r1, sl
 8028462:	f003 fc7b 	bl	802bd5c <_free_r>
 8028466:	f7ff b88c 	b.w	8027582 <_vfprintf_r+0x4ba>
 802846a:	3210      	adds	r2, #16
 802846c:	2b07      	cmp	r3, #7
 802846e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8028472:	6067      	str	r7, [r4, #4]
 8028474:	dc02      	bgt.n	802847c <_vfprintf_r+0x13b4>
 8028476:	3408      	adds	r4, #8
 8028478:	3d10      	subs	r5, #16
 802847a:	e7d6      	b.n	802842a <_vfprintf_r+0x1362>
 802847c:	9803      	ldr	r0, [sp, #12]
 802847e:	aa26      	add	r2, sp, #152	@ 0x98
 8028480:	4659      	mov	r1, fp
 8028482:	f000 f88d 	bl	80285a0 <__sprint_r>
 8028486:	2800      	cmp	r0, #0
 8028488:	d1e5      	bne.n	8028456 <_vfprintf_r+0x138e>
 802848a:	ac29      	add	r4, sp, #164	@ 0xa4
 802848c:	e7f4      	b.n	8028478 <_vfprintf_r+0x13b0>
 802848e:	9803      	ldr	r0, [sp, #12]
 8028490:	4651      	mov	r1, sl
 8028492:	f003 fc63 	bl	802bd5c <_free_r>
 8028496:	f7ff ba88 	b.w	80279aa <_vfprintf_r+0x8e2>
 802849a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802849c:	b91b      	cbnz	r3, 80284a6 <_vfprintf_r+0x13de>
 802849e:	2300      	movs	r3, #0
 80284a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80284a2:	f7ff b86e 	b.w	8027582 <_vfprintf_r+0x4ba>
 80284a6:	9803      	ldr	r0, [sp, #12]
 80284a8:	aa26      	add	r2, sp, #152	@ 0x98
 80284aa:	4659      	mov	r1, fp
 80284ac:	f000 f878 	bl	80285a0 <__sprint_r>
 80284b0:	2800      	cmp	r0, #0
 80284b2:	d0f4      	beq.n	802849e <_vfprintf_r+0x13d6>
 80284b4:	f7ff b865 	b.w	8027582 <_vfprintf_r+0x4ba>
 80284b8:	ea56 0207 	orrs.w	r2, r6, r7
 80284bc:	9508      	str	r5, [sp, #32]
 80284be:	f43f ab75 	beq.w	8027bac <_vfprintf_r+0xae4>
 80284c2:	2b01      	cmp	r3, #1
 80284c4:	f43f abf6 	beq.w	8027cb4 <_vfprintf_r+0xbec>
 80284c8:	2b02      	cmp	r3, #2
 80284ca:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 80284ce:	f43f ac3a 	beq.w	8027d46 <_vfprintf_r+0xc7e>
 80284d2:	f006 0307 	and.w	r3, r6, #7
 80284d6:	08f6      	lsrs	r6, r6, #3
 80284d8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80284dc:	08ff      	lsrs	r7, r7, #3
 80284de:	3330      	adds	r3, #48	@ 0x30
 80284e0:	ea56 0107 	orrs.w	r1, r6, r7
 80284e4:	4642      	mov	r2, r8
 80284e6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80284ea:	d1f2      	bne.n	80284d2 <_vfprintf_r+0x140a>
 80284ec:	9908      	ldr	r1, [sp, #32]
 80284ee:	07ce      	lsls	r6, r1, #31
 80284f0:	d506      	bpl.n	8028500 <_vfprintf_r+0x1438>
 80284f2:	2b30      	cmp	r3, #48	@ 0x30
 80284f4:	d004      	beq.n	8028500 <_vfprintf_r+0x1438>
 80284f6:	2330      	movs	r3, #48	@ 0x30
 80284f8:	f808 3c01 	strb.w	r3, [r8, #-1]
 80284fc:	f1a2 0802 	sub.w	r8, r2, #2
 8028500:	ab52      	add	r3, sp, #328	@ 0x148
 8028502:	9d08      	ldr	r5, [sp, #32]
 8028504:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8028508:	f04f 0a00 	mov.w	sl, #0
 802850c:	eba3 0908 	sub.w	r9, r3, r8
 8028510:	4657      	mov	r7, sl
 8028512:	f8cd a020 	str.w	sl, [sp, #32]
 8028516:	4656      	mov	r6, sl
 8028518:	f7ff b978 	b.w	802780c <_vfprintf_r+0x744>
 802851c:	080381d3 	.word	0x080381d3

08028520 <__sbprintf>:
 8028520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028522:	461f      	mov	r7, r3
 8028524:	898b      	ldrh	r3, [r1, #12]
 8028526:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802852a:	f023 0302 	bic.w	r3, r3, #2
 802852e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8028532:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8028534:	9319      	str	r3, [sp, #100]	@ 0x64
 8028536:	89cb      	ldrh	r3, [r1, #14]
 8028538:	f8ad 300e 	strh.w	r3, [sp, #14]
 802853c:	69cb      	ldr	r3, [r1, #28]
 802853e:	9307      	str	r3, [sp, #28]
 8028540:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8028542:	9309      	str	r3, [sp, #36]	@ 0x24
 8028544:	ab1a      	add	r3, sp, #104	@ 0x68
 8028546:	9300      	str	r3, [sp, #0]
 8028548:	9304      	str	r3, [sp, #16]
 802854a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802854e:	4615      	mov	r5, r2
 8028550:	4606      	mov	r6, r0
 8028552:	9302      	str	r3, [sp, #8]
 8028554:	9305      	str	r3, [sp, #20]
 8028556:	a816      	add	r0, sp, #88	@ 0x58
 8028558:	2300      	movs	r3, #0
 802855a:	460c      	mov	r4, r1
 802855c:	9306      	str	r3, [sp, #24]
 802855e:	f002 fcf5 	bl	802af4c <__retarget_lock_init_recursive>
 8028562:	462a      	mov	r2, r5
 8028564:	463b      	mov	r3, r7
 8028566:	4669      	mov	r1, sp
 8028568:	4630      	mov	r0, r6
 802856a:	f7fe fdad 	bl	80270c8 <_vfprintf_r>
 802856e:	1e05      	subs	r5, r0, #0
 8028570:	db07      	blt.n	8028582 <__sbprintf+0x62>
 8028572:	4669      	mov	r1, sp
 8028574:	4630      	mov	r0, r6
 8028576:	f000 fecb 	bl	8029310 <_fflush_r>
 802857a:	2800      	cmp	r0, #0
 802857c:	bf18      	it	ne
 802857e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8028582:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8028586:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8028588:	065b      	lsls	r3, r3, #25
 802858a:	bf42      	ittt	mi
 802858c:	89a3      	ldrhmi	r3, [r4, #12]
 802858e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8028592:	81a3      	strhmi	r3, [r4, #12]
 8028594:	f002 fcdb 	bl	802af4e <__retarget_lock_close_recursive>
 8028598:	4628      	mov	r0, r5
 802859a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802859e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080285a0 <__sprint_r>:
 80285a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80285a4:	6893      	ldr	r3, [r2, #8]
 80285a6:	4680      	mov	r8, r0
 80285a8:	460e      	mov	r6, r1
 80285aa:	4614      	mov	r4, r2
 80285ac:	b343      	cbz	r3, 8028600 <__sprint_r+0x60>
 80285ae:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80285b0:	049d      	lsls	r5, r3, #18
 80285b2:	d522      	bpl.n	80285fa <__sprint_r+0x5a>
 80285b4:	6815      	ldr	r5, [r2, #0]
 80285b6:	68a0      	ldr	r0, [r4, #8]
 80285b8:	3508      	adds	r5, #8
 80285ba:	b928      	cbnz	r0, 80285c8 <__sprint_r+0x28>
 80285bc:	2300      	movs	r3, #0
 80285be:	60a3      	str	r3, [r4, #8]
 80285c0:	2300      	movs	r3, #0
 80285c2:	6063      	str	r3, [r4, #4]
 80285c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80285c8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 80285cc:	f04f 0900 	mov.w	r9, #0
 80285d0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 80285d4:	45ca      	cmp	sl, r9
 80285d6:	dc05      	bgt.n	80285e4 <__sprint_r+0x44>
 80285d8:	68a3      	ldr	r3, [r4, #8]
 80285da:	f027 0703 	bic.w	r7, r7, #3
 80285de:	1bdb      	subs	r3, r3, r7
 80285e0:	60a3      	str	r3, [r4, #8]
 80285e2:	e7e8      	b.n	80285b6 <__sprint_r+0x16>
 80285e4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80285e8:	4632      	mov	r2, r6
 80285ea:	4640      	mov	r0, r8
 80285ec:	f001 fa35 	bl	8029a5a <_fputwc_r>
 80285f0:	1c43      	adds	r3, r0, #1
 80285f2:	d0e3      	beq.n	80285bc <__sprint_r+0x1c>
 80285f4:	f109 0901 	add.w	r9, r9, #1
 80285f8:	e7ec      	b.n	80285d4 <__sprint_r+0x34>
 80285fa:	f001 f81d 	bl	8029638 <__sfvwrite_r>
 80285fe:	e7dd      	b.n	80285bc <__sprint_r+0x1c>
 8028600:	4618      	mov	r0, r3
 8028602:	e7dd      	b.n	80285c0 <__sprint_r+0x20>

08028604 <_vfiprintf_r>:
 8028604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028608:	b0bb      	sub	sp, #236	@ 0xec
 802860a:	460f      	mov	r7, r1
 802860c:	4693      	mov	fp, r2
 802860e:	461c      	mov	r4, r3
 8028610:	461d      	mov	r5, r3
 8028612:	9000      	str	r0, [sp, #0]
 8028614:	b118      	cbz	r0, 802861e <_vfiprintf_r+0x1a>
 8028616:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8028618:	b90b      	cbnz	r3, 802861e <_vfiprintf_r+0x1a>
 802861a:	f000 ffbb 	bl	8029594 <__sinit>
 802861e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028620:	07db      	lsls	r3, r3, #31
 8028622:	d405      	bmi.n	8028630 <_vfiprintf_r+0x2c>
 8028624:	89bb      	ldrh	r3, [r7, #12]
 8028626:	059e      	lsls	r6, r3, #22
 8028628:	d402      	bmi.n	8028630 <_vfiprintf_r+0x2c>
 802862a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802862c:	f002 fc91 	bl	802af52 <__retarget_lock_acquire_recursive>
 8028630:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8028634:	0498      	lsls	r0, r3, #18
 8028636:	d406      	bmi.n	8028646 <_vfiprintf_r+0x42>
 8028638:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802863c:	81bb      	strh	r3, [r7, #12]
 802863e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028640:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8028644:	667b      	str	r3, [r7, #100]	@ 0x64
 8028646:	89bb      	ldrh	r3, [r7, #12]
 8028648:	0719      	lsls	r1, r3, #28
 802864a:	d501      	bpl.n	8028650 <_vfiprintf_r+0x4c>
 802864c:	693b      	ldr	r3, [r7, #16]
 802864e:	b9ab      	cbnz	r3, 802867c <_vfiprintf_r+0x78>
 8028650:	9800      	ldr	r0, [sp, #0]
 8028652:	4639      	mov	r1, r7
 8028654:	f001 f95a 	bl	802990c <__swsetup_r>
 8028658:	b180      	cbz	r0, 802867c <_vfiprintf_r+0x78>
 802865a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802865c:	07da      	lsls	r2, r3, #31
 802865e:	d506      	bpl.n	802866e <_vfiprintf_r+0x6a>
 8028660:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028664:	9303      	str	r3, [sp, #12]
 8028666:	9803      	ldr	r0, [sp, #12]
 8028668:	b03b      	add	sp, #236	@ 0xec
 802866a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802866e:	89bb      	ldrh	r3, [r7, #12]
 8028670:	059b      	lsls	r3, r3, #22
 8028672:	d4f5      	bmi.n	8028660 <_vfiprintf_r+0x5c>
 8028674:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028676:	f002 fc6e 	bl	802af56 <__retarget_lock_release_recursive>
 802867a:	e7f1      	b.n	8028660 <_vfiprintf_r+0x5c>
 802867c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8028680:	f003 021a 	and.w	r2, r3, #26
 8028684:	2a0a      	cmp	r2, #10
 8028686:	d114      	bne.n	80286b2 <_vfiprintf_r+0xae>
 8028688:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802868c:	2a00      	cmp	r2, #0
 802868e:	db10      	blt.n	80286b2 <_vfiprintf_r+0xae>
 8028690:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8028692:	07d6      	lsls	r6, r2, #31
 8028694:	d404      	bmi.n	80286a0 <_vfiprintf_r+0x9c>
 8028696:	059d      	lsls	r5, r3, #22
 8028698:	d402      	bmi.n	80286a0 <_vfiprintf_r+0x9c>
 802869a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802869c:	f002 fc5b 	bl	802af56 <__retarget_lock_release_recursive>
 80286a0:	9800      	ldr	r0, [sp, #0]
 80286a2:	4623      	mov	r3, r4
 80286a4:	465a      	mov	r2, fp
 80286a6:	4639      	mov	r1, r7
 80286a8:	b03b      	add	sp, #236	@ 0xec
 80286aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286ae:	f000 bc31 	b.w	8028f14 <__sbprintf>
 80286b2:	2300      	movs	r3, #0
 80286b4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 80286b8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80286bc:	ae11      	add	r6, sp, #68	@ 0x44
 80286be:	960e      	str	r6, [sp, #56]	@ 0x38
 80286c0:	9307      	str	r3, [sp, #28]
 80286c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80286c4:	9303      	str	r3, [sp, #12]
 80286c6:	465b      	mov	r3, fp
 80286c8:	461c      	mov	r4, r3
 80286ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80286ce:	b10a      	cbz	r2, 80286d4 <_vfiprintf_r+0xd0>
 80286d0:	2a25      	cmp	r2, #37	@ 0x25
 80286d2:	d1f9      	bne.n	80286c8 <_vfiprintf_r+0xc4>
 80286d4:	ebb4 080b 	subs.w	r8, r4, fp
 80286d8:	d00d      	beq.n	80286f6 <_vfiprintf_r+0xf2>
 80286da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80286dc:	4443      	add	r3, r8
 80286de:	9310      	str	r3, [sp, #64]	@ 0x40
 80286e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80286e2:	3301      	adds	r3, #1
 80286e4:	2b07      	cmp	r3, #7
 80286e6:	e9c6 b800 	strd	fp, r8, [r6]
 80286ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80286ec:	dc75      	bgt.n	80287da <_vfiprintf_r+0x1d6>
 80286ee:	3608      	adds	r6, #8
 80286f0:	9b03      	ldr	r3, [sp, #12]
 80286f2:	4443      	add	r3, r8
 80286f4:	9303      	str	r3, [sp, #12]
 80286f6:	7823      	ldrb	r3, [r4, #0]
 80286f8:	2b00      	cmp	r3, #0
 80286fa:	f000 83cd 	beq.w	8028e98 <_vfiprintf_r+0x894>
 80286fe:	2300      	movs	r3, #0
 8028700:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8028704:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8028708:	3401      	adds	r4, #1
 802870a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802870e:	469a      	mov	sl, r3
 8028710:	46a3      	mov	fp, r4
 8028712:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8028716:	f1a3 0220 	sub.w	r2, r3, #32
 802871a:	2a5a      	cmp	r2, #90	@ 0x5a
 802871c:	f200 8316 	bhi.w	8028d4c <_vfiprintf_r+0x748>
 8028720:	e8df f012 	tbh	[pc, r2, lsl #1]
 8028724:	0314009a 	.word	0x0314009a
 8028728:	00a20314 	.word	0x00a20314
 802872c:	03140314 	.word	0x03140314
 8028730:	00820314 	.word	0x00820314
 8028734:	03140314 	.word	0x03140314
 8028738:	00af00a5 	.word	0x00af00a5
 802873c:	00ac0314 	.word	0x00ac0314
 8028740:	031400b1 	.word	0x031400b1
 8028744:	00d000cd 	.word	0x00d000cd
 8028748:	00d000d0 	.word	0x00d000d0
 802874c:	00d000d0 	.word	0x00d000d0
 8028750:	00d000d0 	.word	0x00d000d0
 8028754:	00d000d0 	.word	0x00d000d0
 8028758:	03140314 	.word	0x03140314
 802875c:	03140314 	.word	0x03140314
 8028760:	03140314 	.word	0x03140314
 8028764:	03140314 	.word	0x03140314
 8028768:	00f70314 	.word	0x00f70314
 802876c:	03140104 	.word	0x03140104
 8028770:	03140314 	.word	0x03140314
 8028774:	03140314 	.word	0x03140314
 8028778:	03140314 	.word	0x03140314
 802877c:	03140314 	.word	0x03140314
 8028780:	01520314 	.word	0x01520314
 8028784:	03140314 	.word	0x03140314
 8028788:	019a0314 	.word	0x019a0314
 802878c:	027a0314 	.word	0x027a0314
 8028790:	03140314 	.word	0x03140314
 8028794:	0314029a 	.word	0x0314029a
 8028798:	03140314 	.word	0x03140314
 802879c:	03140314 	.word	0x03140314
 80287a0:	03140314 	.word	0x03140314
 80287a4:	03140314 	.word	0x03140314
 80287a8:	00f70314 	.word	0x00f70314
 80287ac:	03140106 	.word	0x03140106
 80287b0:	03140314 	.word	0x03140314
 80287b4:	010600e0 	.word	0x010600e0
 80287b8:	031400f1 	.word	0x031400f1
 80287bc:	031400eb 	.word	0x031400eb
 80287c0:	01540132 	.word	0x01540132
 80287c4:	00f10189 	.word	0x00f10189
 80287c8:	019a0314 	.word	0x019a0314
 80287cc:	027c0098 	.word	0x027c0098
 80287d0:	03140314 	.word	0x03140314
 80287d4:	03140065 	.word	0x03140065
 80287d8:	0098      	.short	0x0098
 80287da:	9800      	ldr	r0, [sp, #0]
 80287dc:	aa0e      	add	r2, sp, #56	@ 0x38
 80287de:	4639      	mov	r1, r7
 80287e0:	f7ff fede 	bl	80285a0 <__sprint_r>
 80287e4:	2800      	cmp	r0, #0
 80287e6:	f040 8336 	bne.w	8028e56 <_vfiprintf_r+0x852>
 80287ea:	ae11      	add	r6, sp, #68	@ 0x44
 80287ec:	e780      	b.n	80286f0 <_vfiprintf_r+0xec>
 80287ee:	4a99      	ldr	r2, [pc, #612]	@ (8028a54 <_vfiprintf_r+0x450>)
 80287f0:	9205      	str	r2, [sp, #20]
 80287f2:	f01a 0220 	ands.w	r2, sl, #32
 80287f6:	f000 8231 	beq.w	8028c5c <_vfiprintf_r+0x658>
 80287fa:	3507      	adds	r5, #7
 80287fc:	f025 0507 	bic.w	r5, r5, #7
 8028800:	46a8      	mov	r8, r5
 8028802:	686d      	ldr	r5, [r5, #4]
 8028804:	f858 4b08 	ldr.w	r4, [r8], #8
 8028808:	f01a 0f01 	tst.w	sl, #1
 802880c:	d009      	beq.n	8028822 <_vfiprintf_r+0x21e>
 802880e:	ea54 0205 	orrs.w	r2, r4, r5
 8028812:	bf1f      	itttt	ne
 8028814:	2230      	movne	r2, #48	@ 0x30
 8028816:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802881a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802881e:	f04a 0a02 	orrne.w	sl, sl, #2
 8028822:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8028826:	e112      	b.n	8028a4e <_vfiprintf_r+0x44a>
 8028828:	9800      	ldr	r0, [sp, #0]
 802882a:	f002 fae7 	bl	802adfc <_localeconv_r>
 802882e:	6843      	ldr	r3, [r0, #4]
 8028830:	9309      	str	r3, [sp, #36]	@ 0x24
 8028832:	4618      	mov	r0, r3
 8028834:	f7e7 fd34 	bl	80102a0 <strlen>
 8028838:	9007      	str	r0, [sp, #28]
 802883a:	9800      	ldr	r0, [sp, #0]
 802883c:	f002 fade 	bl	802adfc <_localeconv_r>
 8028840:	6883      	ldr	r3, [r0, #8]
 8028842:	9306      	str	r3, [sp, #24]
 8028844:	9b07      	ldr	r3, [sp, #28]
 8028846:	b12b      	cbz	r3, 8028854 <_vfiprintf_r+0x250>
 8028848:	9b06      	ldr	r3, [sp, #24]
 802884a:	b11b      	cbz	r3, 8028854 <_vfiprintf_r+0x250>
 802884c:	781b      	ldrb	r3, [r3, #0]
 802884e:	b10b      	cbz	r3, 8028854 <_vfiprintf_r+0x250>
 8028850:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8028854:	465c      	mov	r4, fp
 8028856:	e75b      	b.n	8028710 <_vfiprintf_r+0x10c>
 8028858:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802885c:	2b00      	cmp	r3, #0
 802885e:	d1f9      	bne.n	8028854 <_vfiprintf_r+0x250>
 8028860:	2320      	movs	r3, #32
 8028862:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8028866:	e7f5      	b.n	8028854 <_vfiprintf_r+0x250>
 8028868:	f04a 0a01 	orr.w	sl, sl, #1
 802886c:	e7f2      	b.n	8028854 <_vfiprintf_r+0x250>
 802886e:	f855 3b04 	ldr.w	r3, [r5], #4
 8028872:	9302      	str	r3, [sp, #8]
 8028874:	2b00      	cmp	r3, #0
 8028876:	daed      	bge.n	8028854 <_vfiprintf_r+0x250>
 8028878:	425b      	negs	r3, r3
 802887a:	9302      	str	r3, [sp, #8]
 802887c:	f04a 0a04 	orr.w	sl, sl, #4
 8028880:	e7e8      	b.n	8028854 <_vfiprintf_r+0x250>
 8028882:	232b      	movs	r3, #43	@ 0x2b
 8028884:	e7ed      	b.n	8028862 <_vfiprintf_r+0x25e>
 8028886:	465a      	mov	r2, fp
 8028888:	f812 3b01 	ldrb.w	r3, [r2], #1
 802888c:	2b2a      	cmp	r3, #42	@ 0x2a
 802888e:	d112      	bne.n	80288b6 <_vfiprintf_r+0x2b2>
 8028890:	f855 3b04 	ldr.w	r3, [r5], #4
 8028894:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8028898:	9301      	str	r3, [sp, #4]
 802889a:	4693      	mov	fp, r2
 802889c:	e7da      	b.n	8028854 <_vfiprintf_r+0x250>
 802889e:	9b01      	ldr	r3, [sp, #4]
 80288a0:	fb00 1303 	mla	r3, r0, r3, r1
 80288a4:	9301      	str	r3, [sp, #4]
 80288a6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80288aa:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80288ae:	2909      	cmp	r1, #9
 80288b0:	d9f5      	bls.n	802889e <_vfiprintf_r+0x29a>
 80288b2:	4693      	mov	fp, r2
 80288b4:	e72f      	b.n	8028716 <_vfiprintf_r+0x112>
 80288b6:	2100      	movs	r1, #0
 80288b8:	9101      	str	r1, [sp, #4]
 80288ba:	200a      	movs	r0, #10
 80288bc:	e7f5      	b.n	80288aa <_vfiprintf_r+0x2a6>
 80288be:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 80288c2:	e7c7      	b.n	8028854 <_vfiprintf_r+0x250>
 80288c4:	2100      	movs	r1, #0
 80288c6:	465a      	mov	r2, fp
 80288c8:	9102      	str	r1, [sp, #8]
 80288ca:	200a      	movs	r0, #10
 80288cc:	9902      	ldr	r1, [sp, #8]
 80288ce:	3b30      	subs	r3, #48	@ 0x30
 80288d0:	fb00 3301 	mla	r3, r0, r1, r3
 80288d4:	9302      	str	r3, [sp, #8]
 80288d6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80288da:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80288de:	2909      	cmp	r1, #9
 80288e0:	d9f4      	bls.n	80288cc <_vfiprintf_r+0x2c8>
 80288e2:	e7e6      	b.n	80288b2 <_vfiprintf_r+0x2ae>
 80288e4:	f89b 3000 	ldrb.w	r3, [fp]
 80288e8:	2b68      	cmp	r3, #104	@ 0x68
 80288ea:	bf06      	itte	eq
 80288ec:	f10b 0b01 	addeq.w	fp, fp, #1
 80288f0:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 80288f4:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 80288f8:	e7ac      	b.n	8028854 <_vfiprintf_r+0x250>
 80288fa:	f89b 3000 	ldrb.w	r3, [fp]
 80288fe:	2b6c      	cmp	r3, #108	@ 0x6c
 8028900:	d104      	bne.n	802890c <_vfiprintf_r+0x308>
 8028902:	f10b 0b01 	add.w	fp, fp, #1
 8028906:	f04a 0a20 	orr.w	sl, sl, #32
 802890a:	e7a3      	b.n	8028854 <_vfiprintf_r+0x250>
 802890c:	f04a 0a10 	orr.w	sl, sl, #16
 8028910:	e7a0      	b.n	8028854 <_vfiprintf_r+0x250>
 8028912:	46a8      	mov	r8, r5
 8028914:	2400      	movs	r4, #0
 8028916:	f858 3b04 	ldr.w	r3, [r8], #4
 802891a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802891e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8028922:	2301      	movs	r3, #1
 8028924:	9301      	str	r3, [sp, #4]
 8028926:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802892a:	e0ab      	b.n	8028a84 <_vfiprintf_r+0x480>
 802892c:	f04a 0a10 	orr.w	sl, sl, #16
 8028930:	f01a 0f20 	tst.w	sl, #32
 8028934:	d011      	beq.n	802895a <_vfiprintf_r+0x356>
 8028936:	3507      	adds	r5, #7
 8028938:	f025 0507 	bic.w	r5, r5, #7
 802893c:	46a8      	mov	r8, r5
 802893e:	686d      	ldr	r5, [r5, #4]
 8028940:	f858 4b08 	ldr.w	r4, [r8], #8
 8028944:	2d00      	cmp	r5, #0
 8028946:	da06      	bge.n	8028956 <_vfiprintf_r+0x352>
 8028948:	4264      	negs	r4, r4
 802894a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802894e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8028952:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8028956:	2301      	movs	r3, #1
 8028958:	e048      	b.n	80289ec <_vfiprintf_r+0x3e8>
 802895a:	46a8      	mov	r8, r5
 802895c:	f01a 0f10 	tst.w	sl, #16
 8028960:	f858 5b04 	ldr.w	r5, [r8], #4
 8028964:	d002      	beq.n	802896c <_vfiprintf_r+0x368>
 8028966:	462c      	mov	r4, r5
 8028968:	17ed      	asrs	r5, r5, #31
 802896a:	e7eb      	b.n	8028944 <_vfiprintf_r+0x340>
 802896c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8028970:	d003      	beq.n	802897a <_vfiprintf_r+0x376>
 8028972:	b22c      	sxth	r4, r5
 8028974:	f345 35c0 	sbfx	r5, r5, #15, #1
 8028978:	e7e4      	b.n	8028944 <_vfiprintf_r+0x340>
 802897a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802897e:	d0f2      	beq.n	8028966 <_vfiprintf_r+0x362>
 8028980:	b26c      	sxtb	r4, r5
 8028982:	f345 15c0 	sbfx	r5, r5, #7, #1
 8028986:	e7dd      	b.n	8028944 <_vfiprintf_r+0x340>
 8028988:	f01a 0f20 	tst.w	sl, #32
 802898c:	d007      	beq.n	802899e <_vfiprintf_r+0x39a>
 802898e:	9a03      	ldr	r2, [sp, #12]
 8028990:	682b      	ldr	r3, [r5, #0]
 8028992:	9903      	ldr	r1, [sp, #12]
 8028994:	17d2      	asrs	r2, r2, #31
 8028996:	e9c3 1200 	strd	r1, r2, [r3]
 802899a:	3504      	adds	r5, #4
 802899c:	e693      	b.n	80286c6 <_vfiprintf_r+0xc2>
 802899e:	f01a 0f10 	tst.w	sl, #16
 80289a2:	d003      	beq.n	80289ac <_vfiprintf_r+0x3a8>
 80289a4:	682b      	ldr	r3, [r5, #0]
 80289a6:	9a03      	ldr	r2, [sp, #12]
 80289a8:	601a      	str	r2, [r3, #0]
 80289aa:	e7f6      	b.n	802899a <_vfiprintf_r+0x396>
 80289ac:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80289b0:	d003      	beq.n	80289ba <_vfiprintf_r+0x3b6>
 80289b2:	682b      	ldr	r3, [r5, #0]
 80289b4:	9a03      	ldr	r2, [sp, #12]
 80289b6:	801a      	strh	r2, [r3, #0]
 80289b8:	e7ef      	b.n	802899a <_vfiprintf_r+0x396>
 80289ba:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80289be:	d0f1      	beq.n	80289a4 <_vfiprintf_r+0x3a0>
 80289c0:	682b      	ldr	r3, [r5, #0]
 80289c2:	9a03      	ldr	r2, [sp, #12]
 80289c4:	701a      	strb	r2, [r3, #0]
 80289c6:	e7e8      	b.n	802899a <_vfiprintf_r+0x396>
 80289c8:	f04a 0a10 	orr.w	sl, sl, #16
 80289cc:	f01a 0320 	ands.w	r3, sl, #32
 80289d0:	d01f      	beq.n	8028a12 <_vfiprintf_r+0x40e>
 80289d2:	3507      	adds	r5, #7
 80289d4:	f025 0507 	bic.w	r5, r5, #7
 80289d8:	46a8      	mov	r8, r5
 80289da:	686d      	ldr	r5, [r5, #4]
 80289dc:	f858 4b08 	ldr.w	r4, [r8], #8
 80289e0:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80289e4:	2300      	movs	r3, #0
 80289e6:	2200      	movs	r2, #0
 80289e8:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 80289ec:	9a01      	ldr	r2, [sp, #4]
 80289ee:	3201      	adds	r2, #1
 80289f0:	f000 825f 	beq.w	8028eb2 <_vfiprintf_r+0x8ae>
 80289f4:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 80289f8:	9204      	str	r2, [sp, #16]
 80289fa:	ea54 0205 	orrs.w	r2, r4, r5
 80289fe:	f040 825e 	bne.w	8028ebe <_vfiprintf_r+0x8ba>
 8028a02:	9a01      	ldr	r2, [sp, #4]
 8028a04:	2a00      	cmp	r2, #0
 8028a06:	f000 8198 	beq.w	8028d3a <_vfiprintf_r+0x736>
 8028a0a:	2b01      	cmp	r3, #1
 8028a0c:	f040 825a 	bne.w	8028ec4 <_vfiprintf_r+0x8c0>
 8028a10:	e13b      	b.n	8028c8a <_vfiprintf_r+0x686>
 8028a12:	46a8      	mov	r8, r5
 8028a14:	f01a 0510 	ands.w	r5, sl, #16
 8028a18:	f858 4b04 	ldr.w	r4, [r8], #4
 8028a1c:	d001      	beq.n	8028a22 <_vfiprintf_r+0x41e>
 8028a1e:	461d      	mov	r5, r3
 8028a20:	e7de      	b.n	80289e0 <_vfiprintf_r+0x3dc>
 8028a22:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8028a26:	d001      	beq.n	8028a2c <_vfiprintf_r+0x428>
 8028a28:	b2a4      	uxth	r4, r4
 8028a2a:	e7d9      	b.n	80289e0 <_vfiprintf_r+0x3dc>
 8028a2c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8028a30:	d0d6      	beq.n	80289e0 <_vfiprintf_r+0x3dc>
 8028a32:	b2e4      	uxtb	r4, r4
 8028a34:	e7f3      	b.n	8028a1e <_vfiprintf_r+0x41a>
 8028a36:	46a8      	mov	r8, r5
 8028a38:	f647 0330 	movw	r3, #30768	@ 0x7830
 8028a3c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8028a40:	f858 4b04 	ldr.w	r4, [r8], #4
 8028a44:	4b03      	ldr	r3, [pc, #12]	@ (8028a54 <_vfiprintf_r+0x450>)
 8028a46:	9305      	str	r3, [sp, #20]
 8028a48:	2500      	movs	r5, #0
 8028a4a:	f04a 0a02 	orr.w	sl, sl, #2
 8028a4e:	2302      	movs	r3, #2
 8028a50:	e7c9      	b.n	80289e6 <_vfiprintf_r+0x3e2>
 8028a52:	bf00      	nop
 8028a54:	0803819f 	.word	0x0803819f
 8028a58:	9b01      	ldr	r3, [sp, #4]
 8028a5a:	46a8      	mov	r8, r5
 8028a5c:	1c5c      	adds	r4, r3, #1
 8028a5e:	f04f 0500 	mov.w	r5, #0
 8028a62:	f858 9b04 	ldr.w	r9, [r8], #4
 8028a66:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8028a6a:	f000 80d0 	beq.w	8028c0e <_vfiprintf_r+0x60a>
 8028a6e:	461a      	mov	r2, r3
 8028a70:	4629      	mov	r1, r5
 8028a72:	4648      	mov	r0, r9
 8028a74:	f7e7 fbc4 	bl	8010200 <memchr>
 8028a78:	4604      	mov	r4, r0
 8028a7a:	b118      	cbz	r0, 8028a84 <_vfiprintf_r+0x480>
 8028a7c:	eba0 0309 	sub.w	r3, r0, r9
 8028a80:	9301      	str	r3, [sp, #4]
 8028a82:	462c      	mov	r4, r5
 8028a84:	9b01      	ldr	r3, [sp, #4]
 8028a86:	42a3      	cmp	r3, r4
 8028a88:	bfb8      	it	lt
 8028a8a:	4623      	movlt	r3, r4
 8028a8c:	9304      	str	r3, [sp, #16]
 8028a8e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8028a92:	b113      	cbz	r3, 8028a9a <_vfiprintf_r+0x496>
 8028a94:	9b04      	ldr	r3, [sp, #16]
 8028a96:	3301      	adds	r3, #1
 8028a98:	9304      	str	r3, [sp, #16]
 8028a9a:	f01a 0302 	ands.w	r3, sl, #2
 8028a9e:	9308      	str	r3, [sp, #32]
 8028aa0:	bf1e      	ittt	ne
 8028aa2:	9b04      	ldrne	r3, [sp, #16]
 8028aa4:	3302      	addne	r3, #2
 8028aa6:	9304      	strne	r3, [sp, #16]
 8028aa8:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8028aac:	930a      	str	r3, [sp, #40]	@ 0x28
 8028aae:	d11f      	bne.n	8028af0 <_vfiprintf_r+0x4ec>
 8028ab0:	9b02      	ldr	r3, [sp, #8]
 8028ab2:	9a04      	ldr	r2, [sp, #16]
 8028ab4:	1a9d      	subs	r5, r3, r2
 8028ab6:	2d00      	cmp	r5, #0
 8028ab8:	dd1a      	ble.n	8028af0 <_vfiprintf_r+0x4ec>
 8028aba:	4ba9      	ldr	r3, [pc, #676]	@ (8028d60 <_vfiprintf_r+0x75c>)
 8028abc:	6033      	str	r3, [r6, #0]
 8028abe:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8028ac2:	2d10      	cmp	r5, #16
 8028ac4:	f102 0201 	add.w	r2, r2, #1
 8028ac8:	f106 0008 	add.w	r0, r6, #8
 8028acc:	f300 814e 	bgt.w	8028d6c <_vfiprintf_r+0x768>
 8028ad0:	6075      	str	r5, [r6, #4]
 8028ad2:	2a07      	cmp	r2, #7
 8028ad4:	4465      	add	r5, ip
 8028ad6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8028ada:	f340 815a 	ble.w	8028d92 <_vfiprintf_r+0x78e>
 8028ade:	9800      	ldr	r0, [sp, #0]
 8028ae0:	aa0e      	add	r2, sp, #56	@ 0x38
 8028ae2:	4639      	mov	r1, r7
 8028ae4:	f7ff fd5c 	bl	80285a0 <__sprint_r>
 8028ae8:	2800      	cmp	r0, #0
 8028aea:	f040 81b4 	bne.w	8028e56 <_vfiprintf_r+0x852>
 8028aee:	ae11      	add	r6, sp, #68	@ 0x44
 8028af0:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8028af4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028af8:	b161      	cbz	r1, 8028b14 <_vfiprintf_r+0x510>
 8028afa:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8028afe:	3301      	adds	r3, #1
 8028b00:	6031      	str	r1, [r6, #0]
 8028b02:	2101      	movs	r1, #1
 8028b04:	440a      	add	r2, r1
 8028b06:	2b07      	cmp	r3, #7
 8028b08:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028b0c:	6071      	str	r1, [r6, #4]
 8028b0e:	f300 8142 	bgt.w	8028d96 <_vfiprintf_r+0x792>
 8028b12:	3608      	adds	r6, #8
 8028b14:	9908      	ldr	r1, [sp, #32]
 8028b16:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028b1a:	b159      	cbz	r1, 8028b34 <_vfiprintf_r+0x530>
 8028b1c:	a90d      	add	r1, sp, #52	@ 0x34
 8028b1e:	3301      	adds	r3, #1
 8028b20:	6031      	str	r1, [r6, #0]
 8028b22:	2102      	movs	r1, #2
 8028b24:	440a      	add	r2, r1
 8028b26:	2b07      	cmp	r3, #7
 8028b28:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028b2c:	6071      	str	r1, [r6, #4]
 8028b2e:	f300 813b 	bgt.w	8028da8 <_vfiprintf_r+0x7a4>
 8028b32:	3608      	adds	r6, #8
 8028b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028b36:	2b80      	cmp	r3, #128	@ 0x80
 8028b38:	d11f      	bne.n	8028b7a <_vfiprintf_r+0x576>
 8028b3a:	9b02      	ldr	r3, [sp, #8]
 8028b3c:	9a04      	ldr	r2, [sp, #16]
 8028b3e:	1a9d      	subs	r5, r3, r2
 8028b40:	2d00      	cmp	r5, #0
 8028b42:	dd1a      	ble.n	8028b7a <_vfiprintf_r+0x576>
 8028b44:	4b87      	ldr	r3, [pc, #540]	@ (8028d64 <_vfiprintf_r+0x760>)
 8028b46:	6033      	str	r3, [r6, #0]
 8028b48:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8028b4c:	2d10      	cmp	r5, #16
 8028b4e:	f102 0201 	add.w	r2, r2, #1
 8028b52:	f106 0008 	add.w	r0, r6, #8
 8028b56:	f300 8130 	bgt.w	8028dba <_vfiprintf_r+0x7b6>
 8028b5a:	6075      	str	r5, [r6, #4]
 8028b5c:	2a07      	cmp	r2, #7
 8028b5e:	4465      	add	r5, ip
 8028b60:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8028b64:	f340 813c 	ble.w	8028de0 <_vfiprintf_r+0x7dc>
 8028b68:	9800      	ldr	r0, [sp, #0]
 8028b6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8028b6c:	4639      	mov	r1, r7
 8028b6e:	f7ff fd17 	bl	80285a0 <__sprint_r>
 8028b72:	2800      	cmp	r0, #0
 8028b74:	f040 816f 	bne.w	8028e56 <_vfiprintf_r+0x852>
 8028b78:	ae11      	add	r6, sp, #68	@ 0x44
 8028b7a:	9b01      	ldr	r3, [sp, #4]
 8028b7c:	1ae4      	subs	r4, r4, r3
 8028b7e:	2c00      	cmp	r4, #0
 8028b80:	dd1a      	ble.n	8028bb8 <_vfiprintf_r+0x5b4>
 8028b82:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028b86:	4877      	ldr	r0, [pc, #476]	@ (8028d64 <_vfiprintf_r+0x760>)
 8028b88:	6030      	str	r0, [r6, #0]
 8028b8a:	2c10      	cmp	r4, #16
 8028b8c:	f103 0301 	add.w	r3, r3, #1
 8028b90:	f106 0108 	add.w	r1, r6, #8
 8028b94:	f300 8126 	bgt.w	8028de4 <_vfiprintf_r+0x7e0>
 8028b98:	6074      	str	r4, [r6, #4]
 8028b9a:	2b07      	cmp	r3, #7
 8028b9c:	4414      	add	r4, r2
 8028b9e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8028ba2:	f340 8130 	ble.w	8028e06 <_vfiprintf_r+0x802>
 8028ba6:	9800      	ldr	r0, [sp, #0]
 8028ba8:	aa0e      	add	r2, sp, #56	@ 0x38
 8028baa:	4639      	mov	r1, r7
 8028bac:	f7ff fcf8 	bl	80285a0 <__sprint_r>
 8028bb0:	2800      	cmp	r0, #0
 8028bb2:	f040 8150 	bne.w	8028e56 <_vfiprintf_r+0x852>
 8028bb6:	ae11      	add	r6, sp, #68	@ 0x44
 8028bb8:	9b01      	ldr	r3, [sp, #4]
 8028bba:	9a01      	ldr	r2, [sp, #4]
 8028bbc:	6073      	str	r3, [r6, #4]
 8028bbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028bc0:	f8c6 9000 	str.w	r9, [r6]
 8028bc4:	4413      	add	r3, r2
 8028bc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8028bc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028bca:	3301      	adds	r3, #1
 8028bcc:	2b07      	cmp	r3, #7
 8028bce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028bd0:	f300 811b 	bgt.w	8028e0a <_vfiprintf_r+0x806>
 8028bd4:	f106 0308 	add.w	r3, r6, #8
 8028bd8:	f01a 0f04 	tst.w	sl, #4
 8028bdc:	f040 811d 	bne.w	8028e1a <_vfiprintf_r+0x816>
 8028be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028be4:	9904      	ldr	r1, [sp, #16]
 8028be6:	428a      	cmp	r2, r1
 8028be8:	bfac      	ite	ge
 8028bea:	189b      	addge	r3, r3, r2
 8028bec:	185b      	addlt	r3, r3, r1
 8028bee:	9303      	str	r3, [sp, #12]
 8028bf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028bf2:	b13b      	cbz	r3, 8028c04 <_vfiprintf_r+0x600>
 8028bf4:	9800      	ldr	r0, [sp, #0]
 8028bf6:	aa0e      	add	r2, sp, #56	@ 0x38
 8028bf8:	4639      	mov	r1, r7
 8028bfa:	f7ff fcd1 	bl	80285a0 <__sprint_r>
 8028bfe:	2800      	cmp	r0, #0
 8028c00:	f040 8129 	bne.w	8028e56 <_vfiprintf_r+0x852>
 8028c04:	2300      	movs	r3, #0
 8028c06:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028c08:	4645      	mov	r5, r8
 8028c0a:	ae11      	add	r6, sp, #68	@ 0x44
 8028c0c:	e55b      	b.n	80286c6 <_vfiprintf_r+0xc2>
 8028c0e:	4648      	mov	r0, r9
 8028c10:	f7e7 fb46 	bl	80102a0 <strlen>
 8028c14:	9001      	str	r0, [sp, #4]
 8028c16:	e734      	b.n	8028a82 <_vfiprintf_r+0x47e>
 8028c18:	f04a 0a10 	orr.w	sl, sl, #16
 8028c1c:	f01a 0320 	ands.w	r3, sl, #32
 8028c20:	d008      	beq.n	8028c34 <_vfiprintf_r+0x630>
 8028c22:	3507      	adds	r5, #7
 8028c24:	f025 0507 	bic.w	r5, r5, #7
 8028c28:	46a8      	mov	r8, r5
 8028c2a:	686d      	ldr	r5, [r5, #4]
 8028c2c:	f858 4b08 	ldr.w	r4, [r8], #8
 8028c30:	2301      	movs	r3, #1
 8028c32:	e6d8      	b.n	80289e6 <_vfiprintf_r+0x3e2>
 8028c34:	46a8      	mov	r8, r5
 8028c36:	f01a 0510 	ands.w	r5, sl, #16
 8028c3a:	f858 4b04 	ldr.w	r4, [r8], #4
 8028c3e:	d001      	beq.n	8028c44 <_vfiprintf_r+0x640>
 8028c40:	461d      	mov	r5, r3
 8028c42:	e7f5      	b.n	8028c30 <_vfiprintf_r+0x62c>
 8028c44:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8028c48:	d001      	beq.n	8028c4e <_vfiprintf_r+0x64a>
 8028c4a:	b2a4      	uxth	r4, r4
 8028c4c:	e7f0      	b.n	8028c30 <_vfiprintf_r+0x62c>
 8028c4e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8028c52:	d0ed      	beq.n	8028c30 <_vfiprintf_r+0x62c>
 8028c54:	b2e4      	uxtb	r4, r4
 8028c56:	e7f3      	b.n	8028c40 <_vfiprintf_r+0x63c>
 8028c58:	4a43      	ldr	r2, [pc, #268]	@ (8028d68 <_vfiprintf_r+0x764>)
 8028c5a:	e5c9      	b.n	80287f0 <_vfiprintf_r+0x1ec>
 8028c5c:	46a8      	mov	r8, r5
 8028c5e:	f01a 0510 	ands.w	r5, sl, #16
 8028c62:	f858 4b04 	ldr.w	r4, [r8], #4
 8028c66:	d001      	beq.n	8028c6c <_vfiprintf_r+0x668>
 8028c68:	4615      	mov	r5, r2
 8028c6a:	e5cd      	b.n	8028808 <_vfiprintf_r+0x204>
 8028c6c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8028c70:	d001      	beq.n	8028c76 <_vfiprintf_r+0x672>
 8028c72:	b2a4      	uxth	r4, r4
 8028c74:	e5c8      	b.n	8028808 <_vfiprintf_r+0x204>
 8028c76:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8028c7a:	f43f adc5 	beq.w	8028808 <_vfiprintf_r+0x204>
 8028c7e:	b2e4      	uxtb	r4, r4
 8028c80:	e7f2      	b.n	8028c68 <_vfiprintf_r+0x664>
 8028c82:	2c0a      	cmp	r4, #10
 8028c84:	f175 0300 	sbcs.w	r3, r5, #0
 8028c88:	d206      	bcs.n	8028c98 <_vfiprintf_r+0x694>
 8028c8a:	3430      	adds	r4, #48	@ 0x30
 8028c8c:	b2e4      	uxtb	r4, r4
 8028c8e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8028c92:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8028c96:	e131      	b.n	8028efc <_vfiprintf_r+0x8f8>
 8028c98:	ab3a      	add	r3, sp, #232	@ 0xe8
 8028c9a:	9308      	str	r3, [sp, #32]
 8028c9c:	9b04      	ldr	r3, [sp, #16]
 8028c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8028ca2:	f04f 0a00 	mov.w	sl, #0
 8028ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8028ca8:	220a      	movs	r2, #10
 8028caa:	2300      	movs	r3, #0
 8028cac:	4620      	mov	r0, r4
 8028cae:	4629      	mov	r1, r5
 8028cb0:	f7e8 f852 	bl	8010d58 <__aeabi_uldivmod>
 8028cb4:	460b      	mov	r3, r1
 8028cb6:	9908      	ldr	r1, [sp, #32]
 8028cb8:	900b      	str	r0, [sp, #44]	@ 0x2c
 8028cba:	3230      	adds	r2, #48	@ 0x30
 8028cbc:	f801 2c01 	strb.w	r2, [r1, #-1]
 8028cc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028cc2:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8028cc6:	f10a 0a01 	add.w	sl, sl, #1
 8028cca:	b1e2      	cbz	r2, 8028d06 <_vfiprintf_r+0x702>
 8028ccc:	9a06      	ldr	r2, [sp, #24]
 8028cce:	7812      	ldrb	r2, [r2, #0]
 8028cd0:	4552      	cmp	r2, sl
 8028cd2:	d118      	bne.n	8028d06 <_vfiprintf_r+0x702>
 8028cd4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8028cd8:	d015      	beq.n	8028d06 <_vfiprintf_r+0x702>
 8028cda:	2c0a      	cmp	r4, #10
 8028cdc:	f175 0200 	sbcs.w	r2, r5, #0
 8028ce0:	d311      	bcc.n	8028d06 <_vfiprintf_r+0x702>
 8028ce2:	9308      	str	r3, [sp, #32]
 8028ce4:	9b07      	ldr	r3, [sp, #28]
 8028ce6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028ce8:	eba9 0903 	sub.w	r9, r9, r3
 8028cec:	461a      	mov	r2, r3
 8028cee:	4648      	mov	r0, r9
 8028cf0:	f000 ff3d 	bl	8029b6e <strncpy>
 8028cf4:	9b06      	ldr	r3, [sp, #24]
 8028cf6:	785a      	ldrb	r2, [r3, #1]
 8028cf8:	9b08      	ldr	r3, [sp, #32]
 8028cfa:	b172      	cbz	r2, 8028d1a <_vfiprintf_r+0x716>
 8028cfc:	9a06      	ldr	r2, [sp, #24]
 8028cfe:	3201      	adds	r2, #1
 8028d00:	9206      	str	r2, [sp, #24]
 8028d02:	f04f 0a00 	mov.w	sl, #0
 8028d06:	2c0a      	cmp	r4, #10
 8028d08:	f175 0500 	sbcs.w	r5, r5, #0
 8028d0c:	f0c0 80f6 	bcc.w	8028efc <_vfiprintf_r+0x8f8>
 8028d10:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028d12:	f8cd 9020 	str.w	r9, [sp, #32]
 8028d16:	461d      	mov	r5, r3
 8028d18:	e7c6      	b.n	8028ca8 <_vfiprintf_r+0x6a4>
 8028d1a:	4692      	mov	sl, r2
 8028d1c:	e7f3      	b.n	8028d06 <_vfiprintf_r+0x702>
 8028d1e:	f004 030f 	and.w	r3, r4, #15
 8028d22:	9a05      	ldr	r2, [sp, #20]
 8028d24:	0924      	lsrs	r4, r4, #4
 8028d26:	5cd3      	ldrb	r3, [r2, r3]
 8028d28:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8028d2c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8028d30:	092d      	lsrs	r5, r5, #4
 8028d32:	ea54 0305 	orrs.w	r3, r4, r5
 8028d36:	d1f2      	bne.n	8028d1e <_vfiprintf_r+0x71a>
 8028d38:	e0e0      	b.n	8028efc <_vfiprintf_r+0x8f8>
 8028d3a:	b923      	cbnz	r3, 8028d46 <_vfiprintf_r+0x742>
 8028d3c:	f01a 0f01 	tst.w	sl, #1
 8028d40:	d001      	beq.n	8028d46 <_vfiprintf_r+0x742>
 8028d42:	2430      	movs	r4, #48	@ 0x30
 8028d44:	e7a3      	b.n	8028c8e <_vfiprintf_r+0x68a>
 8028d46:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8028d4a:	e0d7      	b.n	8028efc <_vfiprintf_r+0x8f8>
 8028d4c:	2b00      	cmp	r3, #0
 8028d4e:	f000 80a3 	beq.w	8028e98 <_vfiprintf_r+0x894>
 8028d52:	2400      	movs	r4, #0
 8028d54:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8028d58:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8028d5c:	46a8      	mov	r8, r5
 8028d5e:	e5e0      	b.n	8028922 <_vfiprintf_r+0x31e>
 8028d60:	080381f3 	.word	0x080381f3
 8028d64:	080381e3 	.word	0x080381e3
 8028d68:	080381b0 	.word	0x080381b0
 8028d6c:	2110      	movs	r1, #16
 8028d6e:	6071      	str	r1, [r6, #4]
 8028d70:	2a07      	cmp	r2, #7
 8028d72:	4461      	add	r1, ip
 8028d74:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028d78:	dd08      	ble.n	8028d8c <_vfiprintf_r+0x788>
 8028d7a:	9800      	ldr	r0, [sp, #0]
 8028d7c:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d7e:	4639      	mov	r1, r7
 8028d80:	f7ff fc0e 	bl	80285a0 <__sprint_r>
 8028d84:	2800      	cmp	r0, #0
 8028d86:	d166      	bne.n	8028e56 <_vfiprintf_r+0x852>
 8028d88:	4b60      	ldr	r3, [pc, #384]	@ (8028f0c <_vfiprintf_r+0x908>)
 8028d8a:	a811      	add	r0, sp, #68	@ 0x44
 8028d8c:	3d10      	subs	r5, #16
 8028d8e:	4606      	mov	r6, r0
 8028d90:	e694      	b.n	8028abc <_vfiprintf_r+0x4b8>
 8028d92:	4606      	mov	r6, r0
 8028d94:	e6ac      	b.n	8028af0 <_vfiprintf_r+0x4ec>
 8028d96:	9800      	ldr	r0, [sp, #0]
 8028d98:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d9a:	4639      	mov	r1, r7
 8028d9c:	f7ff fc00 	bl	80285a0 <__sprint_r>
 8028da0:	2800      	cmp	r0, #0
 8028da2:	d158      	bne.n	8028e56 <_vfiprintf_r+0x852>
 8028da4:	ae11      	add	r6, sp, #68	@ 0x44
 8028da6:	e6b5      	b.n	8028b14 <_vfiprintf_r+0x510>
 8028da8:	9800      	ldr	r0, [sp, #0]
 8028daa:	aa0e      	add	r2, sp, #56	@ 0x38
 8028dac:	4639      	mov	r1, r7
 8028dae:	f7ff fbf7 	bl	80285a0 <__sprint_r>
 8028db2:	2800      	cmp	r0, #0
 8028db4:	d14f      	bne.n	8028e56 <_vfiprintf_r+0x852>
 8028db6:	ae11      	add	r6, sp, #68	@ 0x44
 8028db8:	e6bc      	b.n	8028b34 <_vfiprintf_r+0x530>
 8028dba:	2110      	movs	r1, #16
 8028dbc:	6071      	str	r1, [r6, #4]
 8028dbe:	2a07      	cmp	r2, #7
 8028dc0:	4461      	add	r1, ip
 8028dc2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028dc6:	dd08      	ble.n	8028dda <_vfiprintf_r+0x7d6>
 8028dc8:	9800      	ldr	r0, [sp, #0]
 8028dca:	aa0e      	add	r2, sp, #56	@ 0x38
 8028dcc:	4639      	mov	r1, r7
 8028dce:	f7ff fbe7 	bl	80285a0 <__sprint_r>
 8028dd2:	2800      	cmp	r0, #0
 8028dd4:	d13f      	bne.n	8028e56 <_vfiprintf_r+0x852>
 8028dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8028f10 <_vfiprintf_r+0x90c>)
 8028dd8:	a811      	add	r0, sp, #68	@ 0x44
 8028dda:	3d10      	subs	r5, #16
 8028ddc:	4606      	mov	r6, r0
 8028dde:	e6b2      	b.n	8028b46 <_vfiprintf_r+0x542>
 8028de0:	4606      	mov	r6, r0
 8028de2:	e6ca      	b.n	8028b7a <_vfiprintf_r+0x576>
 8028de4:	2010      	movs	r0, #16
 8028de6:	4402      	add	r2, r0
 8028de8:	2b07      	cmp	r3, #7
 8028dea:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028dee:	6070      	str	r0, [r6, #4]
 8028df0:	dd06      	ble.n	8028e00 <_vfiprintf_r+0x7fc>
 8028df2:	9800      	ldr	r0, [sp, #0]
 8028df4:	aa0e      	add	r2, sp, #56	@ 0x38
 8028df6:	4639      	mov	r1, r7
 8028df8:	f7ff fbd2 	bl	80285a0 <__sprint_r>
 8028dfc:	bb58      	cbnz	r0, 8028e56 <_vfiprintf_r+0x852>
 8028dfe:	a911      	add	r1, sp, #68	@ 0x44
 8028e00:	3c10      	subs	r4, #16
 8028e02:	460e      	mov	r6, r1
 8028e04:	e6bd      	b.n	8028b82 <_vfiprintf_r+0x57e>
 8028e06:	460e      	mov	r6, r1
 8028e08:	e6d6      	b.n	8028bb8 <_vfiprintf_r+0x5b4>
 8028e0a:	9800      	ldr	r0, [sp, #0]
 8028e0c:	aa0e      	add	r2, sp, #56	@ 0x38
 8028e0e:	4639      	mov	r1, r7
 8028e10:	f7ff fbc6 	bl	80285a0 <__sprint_r>
 8028e14:	b9f8      	cbnz	r0, 8028e56 <_vfiprintf_r+0x852>
 8028e16:	ab11      	add	r3, sp, #68	@ 0x44
 8028e18:	e6de      	b.n	8028bd8 <_vfiprintf_r+0x5d4>
 8028e1a:	9a02      	ldr	r2, [sp, #8]
 8028e1c:	9904      	ldr	r1, [sp, #16]
 8028e1e:	1a54      	subs	r4, r2, r1
 8028e20:	2c00      	cmp	r4, #0
 8028e22:	f77f aedd 	ble.w	8028be0 <_vfiprintf_r+0x5dc>
 8028e26:	4d39      	ldr	r5, [pc, #228]	@ (8028f0c <_vfiprintf_r+0x908>)
 8028e28:	2610      	movs	r6, #16
 8028e2a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8028e2e:	2c10      	cmp	r4, #16
 8028e30:	f102 0201 	add.w	r2, r2, #1
 8028e34:	601d      	str	r5, [r3, #0]
 8028e36:	dc1d      	bgt.n	8028e74 <_vfiprintf_r+0x870>
 8028e38:	605c      	str	r4, [r3, #4]
 8028e3a:	2a07      	cmp	r2, #7
 8028e3c:	440c      	add	r4, r1
 8028e3e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8028e42:	f77f aecd 	ble.w	8028be0 <_vfiprintf_r+0x5dc>
 8028e46:	9800      	ldr	r0, [sp, #0]
 8028e48:	aa0e      	add	r2, sp, #56	@ 0x38
 8028e4a:	4639      	mov	r1, r7
 8028e4c:	f7ff fba8 	bl	80285a0 <__sprint_r>
 8028e50:	2800      	cmp	r0, #0
 8028e52:	f43f aec5 	beq.w	8028be0 <_vfiprintf_r+0x5dc>
 8028e56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028e58:	07d9      	lsls	r1, r3, #31
 8028e5a:	d405      	bmi.n	8028e68 <_vfiprintf_r+0x864>
 8028e5c:	89bb      	ldrh	r3, [r7, #12]
 8028e5e:	059a      	lsls	r2, r3, #22
 8028e60:	d402      	bmi.n	8028e68 <_vfiprintf_r+0x864>
 8028e62:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028e64:	f002 f877 	bl	802af56 <__retarget_lock_release_recursive>
 8028e68:	89bb      	ldrh	r3, [r7, #12]
 8028e6a:	065b      	lsls	r3, r3, #25
 8028e6c:	f57f abfb 	bpl.w	8028666 <_vfiprintf_r+0x62>
 8028e70:	f7ff bbf6 	b.w	8028660 <_vfiprintf_r+0x5c>
 8028e74:	3110      	adds	r1, #16
 8028e76:	2a07      	cmp	r2, #7
 8028e78:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028e7c:	605e      	str	r6, [r3, #4]
 8028e7e:	dc02      	bgt.n	8028e86 <_vfiprintf_r+0x882>
 8028e80:	3308      	adds	r3, #8
 8028e82:	3c10      	subs	r4, #16
 8028e84:	e7d1      	b.n	8028e2a <_vfiprintf_r+0x826>
 8028e86:	9800      	ldr	r0, [sp, #0]
 8028e88:	aa0e      	add	r2, sp, #56	@ 0x38
 8028e8a:	4639      	mov	r1, r7
 8028e8c:	f7ff fb88 	bl	80285a0 <__sprint_r>
 8028e90:	2800      	cmp	r0, #0
 8028e92:	d1e0      	bne.n	8028e56 <_vfiprintf_r+0x852>
 8028e94:	ab11      	add	r3, sp, #68	@ 0x44
 8028e96:	e7f4      	b.n	8028e82 <_vfiprintf_r+0x87e>
 8028e98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028e9a:	b913      	cbnz	r3, 8028ea2 <_vfiprintf_r+0x89e>
 8028e9c:	2300      	movs	r3, #0
 8028e9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028ea0:	e7d9      	b.n	8028e56 <_vfiprintf_r+0x852>
 8028ea2:	9800      	ldr	r0, [sp, #0]
 8028ea4:	aa0e      	add	r2, sp, #56	@ 0x38
 8028ea6:	4639      	mov	r1, r7
 8028ea8:	f7ff fb7a 	bl	80285a0 <__sprint_r>
 8028eac:	2800      	cmp	r0, #0
 8028eae:	d0f5      	beq.n	8028e9c <_vfiprintf_r+0x898>
 8028eb0:	e7d1      	b.n	8028e56 <_vfiprintf_r+0x852>
 8028eb2:	ea54 0205 	orrs.w	r2, r4, r5
 8028eb6:	f8cd a010 	str.w	sl, [sp, #16]
 8028eba:	f43f ada6 	beq.w	8028a0a <_vfiprintf_r+0x406>
 8028ebe:	2b01      	cmp	r3, #1
 8028ec0:	f43f aedf 	beq.w	8028c82 <_vfiprintf_r+0x67e>
 8028ec4:	2b02      	cmp	r3, #2
 8028ec6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8028eca:	f43f af28 	beq.w	8028d1e <_vfiprintf_r+0x71a>
 8028ece:	f004 0307 	and.w	r3, r4, #7
 8028ed2:	08e4      	lsrs	r4, r4, #3
 8028ed4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8028ed8:	08ed      	lsrs	r5, r5, #3
 8028eda:	3330      	adds	r3, #48	@ 0x30
 8028edc:	ea54 0105 	orrs.w	r1, r4, r5
 8028ee0:	464a      	mov	r2, r9
 8028ee2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8028ee6:	d1f2      	bne.n	8028ece <_vfiprintf_r+0x8ca>
 8028ee8:	9904      	ldr	r1, [sp, #16]
 8028eea:	07c8      	lsls	r0, r1, #31
 8028eec:	d506      	bpl.n	8028efc <_vfiprintf_r+0x8f8>
 8028eee:	2b30      	cmp	r3, #48	@ 0x30
 8028ef0:	d004      	beq.n	8028efc <_vfiprintf_r+0x8f8>
 8028ef2:	2330      	movs	r3, #48	@ 0x30
 8028ef4:	f809 3c01 	strb.w	r3, [r9, #-1]
 8028ef8:	f1a2 0902 	sub.w	r9, r2, #2
 8028efc:	ab3a      	add	r3, sp, #232	@ 0xe8
 8028efe:	eba3 0309 	sub.w	r3, r3, r9
 8028f02:	9c01      	ldr	r4, [sp, #4]
 8028f04:	f8dd a010 	ldr.w	sl, [sp, #16]
 8028f08:	9301      	str	r3, [sp, #4]
 8028f0a:	e5bb      	b.n	8028a84 <_vfiprintf_r+0x480>
 8028f0c:	080381f3 	.word	0x080381f3
 8028f10:	080381e3 	.word	0x080381e3

08028f14 <__sbprintf>:
 8028f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028f16:	461f      	mov	r7, r3
 8028f18:	898b      	ldrh	r3, [r1, #12]
 8028f1a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8028f1e:	f023 0302 	bic.w	r3, r3, #2
 8028f22:	f8ad 300c 	strh.w	r3, [sp, #12]
 8028f26:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8028f28:	9319      	str	r3, [sp, #100]	@ 0x64
 8028f2a:	89cb      	ldrh	r3, [r1, #14]
 8028f2c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028f30:	69cb      	ldr	r3, [r1, #28]
 8028f32:	9307      	str	r3, [sp, #28]
 8028f34:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8028f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8028f38:	ab1a      	add	r3, sp, #104	@ 0x68
 8028f3a:	9300      	str	r3, [sp, #0]
 8028f3c:	9304      	str	r3, [sp, #16]
 8028f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028f42:	4615      	mov	r5, r2
 8028f44:	4606      	mov	r6, r0
 8028f46:	9302      	str	r3, [sp, #8]
 8028f48:	9305      	str	r3, [sp, #20]
 8028f4a:	a816      	add	r0, sp, #88	@ 0x58
 8028f4c:	2300      	movs	r3, #0
 8028f4e:	460c      	mov	r4, r1
 8028f50:	9306      	str	r3, [sp, #24]
 8028f52:	f001 fffb 	bl	802af4c <__retarget_lock_init_recursive>
 8028f56:	462a      	mov	r2, r5
 8028f58:	463b      	mov	r3, r7
 8028f5a:	4669      	mov	r1, sp
 8028f5c:	4630      	mov	r0, r6
 8028f5e:	f7ff fb51 	bl	8028604 <_vfiprintf_r>
 8028f62:	1e05      	subs	r5, r0, #0
 8028f64:	db07      	blt.n	8028f76 <__sbprintf+0x62>
 8028f66:	4669      	mov	r1, sp
 8028f68:	4630      	mov	r0, r6
 8028f6a:	f000 f9d1 	bl	8029310 <_fflush_r>
 8028f6e:	2800      	cmp	r0, #0
 8028f70:	bf18      	it	ne
 8028f72:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8028f76:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8028f7a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8028f7c:	065b      	lsls	r3, r3, #25
 8028f7e:	bf42      	ittt	mi
 8028f80:	89a3      	ldrhmi	r3, [r4, #12]
 8028f82:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8028f86:	81a3      	strhmi	r3, [r4, #12]
 8028f88:	f001 ffe1 	bl	802af4e <__retarget_lock_close_recursive>
 8028f8c:	4628      	mov	r0, r5
 8028f8e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8028f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08028f94 <putchar>:
 8028f94:	4b02      	ldr	r3, [pc, #8]	@ (8028fa0 <putchar+0xc>)
 8028f96:	4601      	mov	r1, r0
 8028f98:	6818      	ldr	r0, [r3, #0]
 8028f9a:	6882      	ldr	r2, [r0, #8]
 8028f9c:	f007 bacc 	b.w	8030538 <_putc_r>
 8028fa0:	20000254 	.word	0x20000254

08028fa4 <_puts_r>:
 8028fa4:	b530      	push	{r4, r5, lr}
 8028fa6:	4605      	mov	r5, r0
 8028fa8:	b089      	sub	sp, #36	@ 0x24
 8028faa:	4608      	mov	r0, r1
 8028fac:	460c      	mov	r4, r1
 8028fae:	f7e7 f977 	bl	80102a0 <strlen>
 8028fb2:	4b1e      	ldr	r3, [pc, #120]	@ (802902c <_puts_r+0x88>)
 8028fb4:	9306      	str	r3, [sp, #24]
 8028fb6:	2301      	movs	r3, #1
 8028fb8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8028fbc:	9307      	str	r3, [sp, #28]
 8028fbe:	4418      	add	r0, r3
 8028fc0:	ab04      	add	r3, sp, #16
 8028fc2:	9301      	str	r3, [sp, #4]
 8028fc4:	2302      	movs	r3, #2
 8028fc6:	9302      	str	r3, [sp, #8]
 8028fc8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8028fca:	68ac      	ldr	r4, [r5, #8]
 8028fcc:	9003      	str	r0, [sp, #12]
 8028fce:	b913      	cbnz	r3, 8028fd6 <_puts_r+0x32>
 8028fd0:	4628      	mov	r0, r5
 8028fd2:	f000 fadf 	bl	8029594 <__sinit>
 8028fd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028fd8:	07db      	lsls	r3, r3, #31
 8028fda:	d405      	bmi.n	8028fe8 <_puts_r+0x44>
 8028fdc:	89a3      	ldrh	r3, [r4, #12]
 8028fde:	0598      	lsls	r0, r3, #22
 8028fe0:	d402      	bmi.n	8028fe8 <_puts_r+0x44>
 8028fe2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028fe4:	f001 ffb5 	bl	802af52 <__retarget_lock_acquire_recursive>
 8028fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028fec:	0499      	lsls	r1, r3, #18
 8028fee:	d406      	bmi.n	8028ffe <_puts_r+0x5a>
 8028ff0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8028ff4:	81a3      	strh	r3, [r4, #12]
 8028ff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028ff8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8028ffc:	6663      	str	r3, [r4, #100]	@ 0x64
 8028ffe:	4628      	mov	r0, r5
 8029000:	aa01      	add	r2, sp, #4
 8029002:	4621      	mov	r1, r4
 8029004:	f000 fb18 	bl	8029638 <__sfvwrite_r>
 8029008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802900a:	2800      	cmp	r0, #0
 802900c:	bf0c      	ite	eq
 802900e:	250a      	moveq	r5, #10
 8029010:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8029014:	07da      	lsls	r2, r3, #31
 8029016:	d405      	bmi.n	8029024 <_puts_r+0x80>
 8029018:	89a3      	ldrh	r3, [r4, #12]
 802901a:	059b      	lsls	r3, r3, #22
 802901c:	d402      	bmi.n	8029024 <_puts_r+0x80>
 802901e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029020:	f001 ff99 	bl	802af56 <__retarget_lock_release_recursive>
 8029024:	4628      	mov	r0, r5
 8029026:	b009      	add	sp, #36	@ 0x24
 8029028:	bd30      	pop	{r4, r5, pc}
 802902a:	bf00      	nop
 802902c:	0803818d 	.word	0x0803818d

08029030 <puts>:
 8029030:	4b02      	ldr	r3, [pc, #8]	@ (802903c <puts+0xc>)
 8029032:	4601      	mov	r1, r0
 8029034:	6818      	ldr	r0, [r3, #0]
 8029036:	f7ff bfb5 	b.w	8028fa4 <_puts_r>
 802903a:	bf00      	nop
 802903c:	20000254 	.word	0x20000254

08029040 <srand>:
 8029040:	4b03      	ldr	r3, [pc, #12]	@ (8029050 <srand+0x10>)
 8029042:	681b      	ldr	r3, [r3, #0]
 8029044:	2200      	movs	r2, #0
 8029046:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 802904a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 802904e:	4770      	bx	lr
 8029050:	20000254 	.word	0x20000254

08029054 <rand>:
 8029054:	4b0a      	ldr	r3, [pc, #40]	@ (8029080 <rand+0x2c>)
 8029056:	480b      	ldr	r0, [pc, #44]	@ (8029084 <rand+0x30>)
 8029058:	6819      	ldr	r1, [r3, #0]
 802905a:	4a0b      	ldr	r2, [pc, #44]	@ (8029088 <rand+0x34>)
 802905c:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 8029060:	b510      	push	{r4, lr}
 8029062:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 8029066:	4358      	muls	r0, r3
 8029068:	fb02 0004 	mla	r0, r2, r4, r0
 802906c:	fba3 3202 	umull	r3, r2, r3, r2
 8029070:	3301      	adds	r3, #1
 8029072:	eb40 0002 	adc.w	r0, r0, r2
 8029076:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802907a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802907e:	bd10      	pop	{r4, pc}
 8029080:	20000254 	.word	0x20000254
 8029084:	5851f42d 	.word	0x5851f42d
 8029088:	4c957f2d 	.word	0x4c957f2d

0802908c <snprintf>:
 802908c:	b40c      	push	{r2, r3}
 802908e:	b530      	push	{r4, r5, lr}
 8029090:	4b17      	ldr	r3, [pc, #92]	@ (80290f0 <snprintf+0x64>)
 8029092:	1e0c      	subs	r4, r1, #0
 8029094:	681d      	ldr	r5, [r3, #0]
 8029096:	b09d      	sub	sp, #116	@ 0x74
 8029098:	da08      	bge.n	80290ac <snprintf+0x20>
 802909a:	238b      	movs	r3, #139	@ 0x8b
 802909c:	602b      	str	r3, [r5, #0]
 802909e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80290a2:	b01d      	add	sp, #116	@ 0x74
 80290a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80290a8:	b002      	add	sp, #8
 80290aa:	4770      	bx	lr
 80290ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80290b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80290b4:	bf14      	ite	ne
 80290b6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80290ba:	4623      	moveq	r3, r4
 80290bc:	9304      	str	r3, [sp, #16]
 80290be:	9307      	str	r3, [sp, #28]
 80290c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80290c4:	9002      	str	r0, [sp, #8]
 80290c6:	9006      	str	r0, [sp, #24]
 80290c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80290cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80290ce:	ab21      	add	r3, sp, #132	@ 0x84
 80290d0:	a902      	add	r1, sp, #8
 80290d2:	4628      	mov	r0, r5
 80290d4:	9301      	str	r3, [sp, #4]
 80290d6:	f004 fe7b 	bl	802ddd0 <_svfprintf_r>
 80290da:	1c43      	adds	r3, r0, #1
 80290dc:	bfbc      	itt	lt
 80290de:	238b      	movlt	r3, #139	@ 0x8b
 80290e0:	602b      	strlt	r3, [r5, #0]
 80290e2:	2c00      	cmp	r4, #0
 80290e4:	d0dd      	beq.n	80290a2 <snprintf+0x16>
 80290e6:	9b02      	ldr	r3, [sp, #8]
 80290e8:	2200      	movs	r2, #0
 80290ea:	701a      	strb	r2, [r3, #0]
 80290ec:	e7d9      	b.n	80290a2 <snprintf+0x16>
 80290ee:	bf00      	nop
 80290f0:	20000254 	.word	0x20000254

080290f4 <_strtol_l.constprop.0>:
 80290f4:	2b24      	cmp	r3, #36	@ 0x24
 80290f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80290fa:	4686      	mov	lr, r0
 80290fc:	4690      	mov	r8, r2
 80290fe:	d801      	bhi.n	8029104 <_strtol_l.constprop.0+0x10>
 8029100:	2b01      	cmp	r3, #1
 8029102:	d106      	bne.n	8029112 <_strtol_l.constprop.0+0x1e>
 8029104:	f001 fef0 	bl	802aee8 <__errno>
 8029108:	2316      	movs	r3, #22
 802910a:	6003      	str	r3, [r0, #0]
 802910c:	2000      	movs	r0, #0
 802910e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029112:	4834      	ldr	r0, [pc, #208]	@ (80291e4 <_strtol_l.constprop.0+0xf0>)
 8029114:	460d      	mov	r5, r1
 8029116:	462a      	mov	r2, r5
 8029118:	f815 4b01 	ldrb.w	r4, [r5], #1
 802911c:	5d06      	ldrb	r6, [r0, r4]
 802911e:	f016 0608 	ands.w	r6, r6, #8
 8029122:	d1f8      	bne.n	8029116 <_strtol_l.constprop.0+0x22>
 8029124:	2c2d      	cmp	r4, #45	@ 0x2d
 8029126:	d12d      	bne.n	8029184 <_strtol_l.constprop.0+0x90>
 8029128:	782c      	ldrb	r4, [r5, #0]
 802912a:	2601      	movs	r6, #1
 802912c:	1c95      	adds	r5, r2, #2
 802912e:	f033 0210 	bics.w	r2, r3, #16
 8029132:	d109      	bne.n	8029148 <_strtol_l.constprop.0+0x54>
 8029134:	2c30      	cmp	r4, #48	@ 0x30
 8029136:	d12a      	bne.n	802918e <_strtol_l.constprop.0+0x9a>
 8029138:	782a      	ldrb	r2, [r5, #0]
 802913a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802913e:	2a58      	cmp	r2, #88	@ 0x58
 8029140:	d125      	bne.n	802918e <_strtol_l.constprop.0+0x9a>
 8029142:	786c      	ldrb	r4, [r5, #1]
 8029144:	2310      	movs	r3, #16
 8029146:	3502      	adds	r5, #2
 8029148:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802914c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8029150:	2200      	movs	r2, #0
 8029152:	fbbc f9f3 	udiv	r9, ip, r3
 8029156:	4610      	mov	r0, r2
 8029158:	fb03 ca19 	mls	sl, r3, r9, ip
 802915c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8029160:	2f09      	cmp	r7, #9
 8029162:	d81b      	bhi.n	802919c <_strtol_l.constprop.0+0xa8>
 8029164:	463c      	mov	r4, r7
 8029166:	42a3      	cmp	r3, r4
 8029168:	dd27      	ble.n	80291ba <_strtol_l.constprop.0+0xc6>
 802916a:	1c57      	adds	r7, r2, #1
 802916c:	d007      	beq.n	802917e <_strtol_l.constprop.0+0x8a>
 802916e:	4581      	cmp	r9, r0
 8029170:	d320      	bcc.n	80291b4 <_strtol_l.constprop.0+0xc0>
 8029172:	d101      	bne.n	8029178 <_strtol_l.constprop.0+0x84>
 8029174:	45a2      	cmp	sl, r4
 8029176:	db1d      	blt.n	80291b4 <_strtol_l.constprop.0+0xc0>
 8029178:	fb00 4003 	mla	r0, r0, r3, r4
 802917c:	2201      	movs	r2, #1
 802917e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029182:	e7eb      	b.n	802915c <_strtol_l.constprop.0+0x68>
 8029184:	2c2b      	cmp	r4, #43	@ 0x2b
 8029186:	bf04      	itt	eq
 8029188:	782c      	ldrbeq	r4, [r5, #0]
 802918a:	1c95      	addeq	r5, r2, #2
 802918c:	e7cf      	b.n	802912e <_strtol_l.constprop.0+0x3a>
 802918e:	2b00      	cmp	r3, #0
 8029190:	d1da      	bne.n	8029148 <_strtol_l.constprop.0+0x54>
 8029192:	2c30      	cmp	r4, #48	@ 0x30
 8029194:	bf0c      	ite	eq
 8029196:	2308      	moveq	r3, #8
 8029198:	230a      	movne	r3, #10
 802919a:	e7d5      	b.n	8029148 <_strtol_l.constprop.0+0x54>
 802919c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80291a0:	2f19      	cmp	r7, #25
 80291a2:	d801      	bhi.n	80291a8 <_strtol_l.constprop.0+0xb4>
 80291a4:	3c37      	subs	r4, #55	@ 0x37
 80291a6:	e7de      	b.n	8029166 <_strtol_l.constprop.0+0x72>
 80291a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80291ac:	2f19      	cmp	r7, #25
 80291ae:	d804      	bhi.n	80291ba <_strtol_l.constprop.0+0xc6>
 80291b0:	3c57      	subs	r4, #87	@ 0x57
 80291b2:	e7d8      	b.n	8029166 <_strtol_l.constprop.0+0x72>
 80291b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80291b8:	e7e1      	b.n	802917e <_strtol_l.constprop.0+0x8a>
 80291ba:	1c53      	adds	r3, r2, #1
 80291bc:	d108      	bne.n	80291d0 <_strtol_l.constprop.0+0xdc>
 80291be:	2322      	movs	r3, #34	@ 0x22
 80291c0:	f8ce 3000 	str.w	r3, [lr]
 80291c4:	4660      	mov	r0, ip
 80291c6:	f1b8 0f00 	cmp.w	r8, #0
 80291ca:	d0a0      	beq.n	802910e <_strtol_l.constprop.0+0x1a>
 80291cc:	1e69      	subs	r1, r5, #1
 80291ce:	e006      	b.n	80291de <_strtol_l.constprop.0+0xea>
 80291d0:	b106      	cbz	r6, 80291d4 <_strtol_l.constprop.0+0xe0>
 80291d2:	4240      	negs	r0, r0
 80291d4:	f1b8 0f00 	cmp.w	r8, #0
 80291d8:	d099      	beq.n	802910e <_strtol_l.constprop.0+0x1a>
 80291da:	2a00      	cmp	r2, #0
 80291dc:	d1f6      	bne.n	80291cc <_strtol_l.constprop.0+0xd8>
 80291de:	f8c8 1000 	str.w	r1, [r8]
 80291e2:	e794      	b.n	802910e <_strtol_l.constprop.0+0x1a>
 80291e4:	0803854d 	.word	0x0803854d

080291e8 <_strtol_r>:
 80291e8:	f7ff bf84 	b.w	80290f4 <_strtol_l.constprop.0>

080291ec <strtol>:
 80291ec:	4613      	mov	r3, r2
 80291ee:	460a      	mov	r2, r1
 80291f0:	4601      	mov	r1, r0
 80291f2:	4802      	ldr	r0, [pc, #8]	@ (80291fc <strtol+0x10>)
 80291f4:	6800      	ldr	r0, [r0, #0]
 80291f6:	f7ff bf7d 	b.w	80290f4 <_strtol_l.constprop.0>
 80291fa:	bf00      	nop
 80291fc:	20000254 	.word	0x20000254

08029200 <__sflush_r>:
 8029200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029204:	4605      	mov	r5, r0
 8029206:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802920a:	0706      	lsls	r6, r0, #28
 802920c:	460c      	mov	r4, r1
 802920e:	d457      	bmi.n	80292c0 <__sflush_r+0xc0>
 8029210:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8029214:	818b      	strh	r3, [r1, #12]
 8029216:	684b      	ldr	r3, [r1, #4]
 8029218:	2b00      	cmp	r3, #0
 802921a:	dc02      	bgt.n	8029222 <__sflush_r+0x22>
 802921c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802921e:	2b00      	cmp	r3, #0
 8029220:	dd4c      	ble.n	80292bc <__sflush_r+0xbc>
 8029222:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8029224:	2e00      	cmp	r6, #0
 8029226:	d049      	beq.n	80292bc <__sflush_r+0xbc>
 8029228:	2300      	movs	r3, #0
 802922a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802922e:	682f      	ldr	r7, [r5, #0]
 8029230:	69e1      	ldr	r1, [r4, #28]
 8029232:	602b      	str	r3, [r5, #0]
 8029234:	d034      	beq.n	80292a0 <__sflush_r+0xa0>
 8029236:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8029238:	89a3      	ldrh	r3, [r4, #12]
 802923a:	0759      	lsls	r1, r3, #29
 802923c:	d505      	bpl.n	802924a <__sflush_r+0x4a>
 802923e:	6863      	ldr	r3, [r4, #4]
 8029240:	1ad2      	subs	r2, r2, r3
 8029242:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8029244:	b10b      	cbz	r3, 802924a <__sflush_r+0x4a>
 8029246:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8029248:	1ad2      	subs	r2, r2, r3
 802924a:	2300      	movs	r3, #0
 802924c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802924e:	69e1      	ldr	r1, [r4, #28]
 8029250:	4628      	mov	r0, r5
 8029252:	47b0      	blx	r6
 8029254:	1c43      	adds	r3, r0, #1
 8029256:	d106      	bne.n	8029266 <__sflush_r+0x66>
 8029258:	682a      	ldr	r2, [r5, #0]
 802925a:	2a1d      	cmp	r2, #29
 802925c:	d848      	bhi.n	80292f0 <__sflush_r+0xf0>
 802925e:	4b2b      	ldr	r3, [pc, #172]	@ (802930c <__sflush_r+0x10c>)
 8029260:	4113      	asrs	r3, r2
 8029262:	07de      	lsls	r6, r3, #31
 8029264:	d444      	bmi.n	80292f0 <__sflush_r+0xf0>
 8029266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802926a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802926e:	81a2      	strh	r2, [r4, #12]
 8029270:	2200      	movs	r2, #0
 8029272:	6062      	str	r2, [r4, #4]
 8029274:	04d9      	lsls	r1, r3, #19
 8029276:	6922      	ldr	r2, [r4, #16]
 8029278:	6022      	str	r2, [r4, #0]
 802927a:	d504      	bpl.n	8029286 <__sflush_r+0x86>
 802927c:	1c42      	adds	r2, r0, #1
 802927e:	d101      	bne.n	8029284 <__sflush_r+0x84>
 8029280:	682b      	ldr	r3, [r5, #0]
 8029282:	b903      	cbnz	r3, 8029286 <__sflush_r+0x86>
 8029284:	6520      	str	r0, [r4, #80]	@ 0x50
 8029286:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8029288:	602f      	str	r7, [r5, #0]
 802928a:	b1b9      	cbz	r1, 80292bc <__sflush_r+0xbc>
 802928c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8029290:	4299      	cmp	r1, r3
 8029292:	d002      	beq.n	802929a <__sflush_r+0x9a>
 8029294:	4628      	mov	r0, r5
 8029296:	f002 fd61 	bl	802bd5c <_free_r>
 802929a:	2300      	movs	r3, #0
 802929c:	6323      	str	r3, [r4, #48]	@ 0x30
 802929e:	e00d      	b.n	80292bc <__sflush_r+0xbc>
 80292a0:	2301      	movs	r3, #1
 80292a2:	4628      	mov	r0, r5
 80292a4:	47b0      	blx	r6
 80292a6:	4602      	mov	r2, r0
 80292a8:	1c50      	adds	r0, r2, #1
 80292aa:	d1c5      	bne.n	8029238 <__sflush_r+0x38>
 80292ac:	682b      	ldr	r3, [r5, #0]
 80292ae:	2b00      	cmp	r3, #0
 80292b0:	d0c2      	beq.n	8029238 <__sflush_r+0x38>
 80292b2:	2b1d      	cmp	r3, #29
 80292b4:	d001      	beq.n	80292ba <__sflush_r+0xba>
 80292b6:	2b16      	cmp	r3, #22
 80292b8:	d11a      	bne.n	80292f0 <__sflush_r+0xf0>
 80292ba:	602f      	str	r7, [r5, #0]
 80292bc:	2000      	movs	r0, #0
 80292be:	e01e      	b.n	80292fe <__sflush_r+0xfe>
 80292c0:	690f      	ldr	r7, [r1, #16]
 80292c2:	2f00      	cmp	r7, #0
 80292c4:	d0fa      	beq.n	80292bc <__sflush_r+0xbc>
 80292c6:	0783      	lsls	r3, r0, #30
 80292c8:	680e      	ldr	r6, [r1, #0]
 80292ca:	bf08      	it	eq
 80292cc:	694b      	ldreq	r3, [r1, #20]
 80292ce:	600f      	str	r7, [r1, #0]
 80292d0:	bf18      	it	ne
 80292d2:	2300      	movne	r3, #0
 80292d4:	eba6 0807 	sub.w	r8, r6, r7
 80292d8:	608b      	str	r3, [r1, #8]
 80292da:	f1b8 0f00 	cmp.w	r8, #0
 80292de:	dded      	ble.n	80292bc <__sflush_r+0xbc>
 80292e0:	69e1      	ldr	r1, [r4, #28]
 80292e2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80292e4:	4643      	mov	r3, r8
 80292e6:	463a      	mov	r2, r7
 80292e8:	4628      	mov	r0, r5
 80292ea:	47b0      	blx	r6
 80292ec:	2800      	cmp	r0, #0
 80292ee:	dc08      	bgt.n	8029302 <__sflush_r+0x102>
 80292f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80292f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80292f8:	81a3      	strh	r3, [r4, #12]
 80292fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80292fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029302:	4407      	add	r7, r0
 8029304:	eba8 0800 	sub.w	r8, r8, r0
 8029308:	e7e7      	b.n	80292da <__sflush_r+0xda>
 802930a:	bf00      	nop
 802930c:	dfbffffe 	.word	0xdfbffffe

08029310 <_fflush_r>:
 8029310:	b538      	push	{r3, r4, r5, lr}
 8029312:	460c      	mov	r4, r1
 8029314:	4605      	mov	r5, r0
 8029316:	b118      	cbz	r0, 8029320 <_fflush_r+0x10>
 8029318:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802931a:	b90b      	cbnz	r3, 8029320 <_fflush_r+0x10>
 802931c:	f000 f93a 	bl	8029594 <__sinit>
 8029320:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8029324:	b1b8      	cbz	r0, 8029356 <_fflush_r+0x46>
 8029326:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029328:	07db      	lsls	r3, r3, #31
 802932a:	d404      	bmi.n	8029336 <_fflush_r+0x26>
 802932c:	0581      	lsls	r1, r0, #22
 802932e:	d402      	bmi.n	8029336 <_fflush_r+0x26>
 8029330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029332:	f001 fe0e 	bl	802af52 <__retarget_lock_acquire_recursive>
 8029336:	4628      	mov	r0, r5
 8029338:	4621      	mov	r1, r4
 802933a:	f7ff ff61 	bl	8029200 <__sflush_r>
 802933e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029340:	07da      	lsls	r2, r3, #31
 8029342:	4605      	mov	r5, r0
 8029344:	d405      	bmi.n	8029352 <_fflush_r+0x42>
 8029346:	89a3      	ldrh	r3, [r4, #12]
 8029348:	059b      	lsls	r3, r3, #22
 802934a:	d402      	bmi.n	8029352 <_fflush_r+0x42>
 802934c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802934e:	f001 fe02 	bl	802af56 <__retarget_lock_release_recursive>
 8029352:	4628      	mov	r0, r5
 8029354:	bd38      	pop	{r3, r4, r5, pc}
 8029356:	4605      	mov	r5, r0
 8029358:	e7fb      	b.n	8029352 <_fflush_r+0x42>
	...

0802935c <sprintf>:
 802935c:	b40e      	push	{r1, r2, r3}
 802935e:	b500      	push	{lr}
 8029360:	b09c      	sub	sp, #112	@ 0x70
 8029362:	ab1d      	add	r3, sp, #116	@ 0x74
 8029364:	9002      	str	r0, [sp, #8]
 8029366:	9006      	str	r0, [sp, #24]
 8029368:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802936c:	4809      	ldr	r0, [pc, #36]	@ (8029394 <sprintf+0x38>)
 802936e:	9107      	str	r1, [sp, #28]
 8029370:	9104      	str	r1, [sp, #16]
 8029372:	4909      	ldr	r1, [pc, #36]	@ (8029398 <sprintf+0x3c>)
 8029374:	f853 2b04 	ldr.w	r2, [r3], #4
 8029378:	9105      	str	r1, [sp, #20]
 802937a:	6800      	ldr	r0, [r0, #0]
 802937c:	9301      	str	r3, [sp, #4]
 802937e:	a902      	add	r1, sp, #8
 8029380:	f004 fd26 	bl	802ddd0 <_svfprintf_r>
 8029384:	9b02      	ldr	r3, [sp, #8]
 8029386:	2200      	movs	r2, #0
 8029388:	701a      	strb	r2, [r3, #0]
 802938a:	b01c      	add	sp, #112	@ 0x70
 802938c:	f85d eb04 	ldr.w	lr, [sp], #4
 8029390:	b003      	add	sp, #12
 8029392:	4770      	bx	lr
 8029394:	20000254 	.word	0x20000254
 8029398:	ffff0208 	.word	0xffff0208

0802939c <sscanf>:
 802939c:	b40e      	push	{r1, r2, r3}
 802939e:	b530      	push	{r4, r5, lr}
 80293a0:	b09c      	sub	sp, #112	@ 0x70
 80293a2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80293a4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80293a8:	f854 5b04 	ldr.w	r5, [r4], #4
 80293ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80293b0:	9002      	str	r0, [sp, #8]
 80293b2:	9006      	str	r0, [sp, #24]
 80293b4:	f7e6 ff74 	bl	80102a0 <strlen>
 80293b8:	4b0b      	ldr	r3, [pc, #44]	@ (80293e8 <sscanf+0x4c>)
 80293ba:	9003      	str	r0, [sp, #12]
 80293bc:	9007      	str	r0, [sp, #28]
 80293be:	930a      	str	r3, [sp, #40]	@ 0x28
 80293c0:	480a      	ldr	r0, [pc, #40]	@ (80293ec <sscanf+0x50>)
 80293c2:	9401      	str	r4, [sp, #4]
 80293c4:	2300      	movs	r3, #0
 80293c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80293c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80293ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80293ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80293d2:	462a      	mov	r2, r5
 80293d4:	4623      	mov	r3, r4
 80293d6:	a902      	add	r1, sp, #8
 80293d8:	6800      	ldr	r0, [r0, #0]
 80293da:	f005 ff3b 	bl	802f254 <__ssvfscanf_r>
 80293de:	b01c      	add	sp, #112	@ 0x70
 80293e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80293e4:	b003      	add	sp, #12
 80293e6:	4770      	bx	lr
 80293e8:	08029413 	.word	0x08029413
 80293ec:	20000254 	.word	0x20000254

080293f0 <__sread>:
 80293f0:	b510      	push	{r4, lr}
 80293f2:	460c      	mov	r4, r1
 80293f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80293f8:	f001 fd52 	bl	802aea0 <_read_r>
 80293fc:	2800      	cmp	r0, #0
 80293fe:	bfab      	itete	ge
 8029400:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8029402:	89a3      	ldrhlt	r3, [r4, #12]
 8029404:	181b      	addge	r3, r3, r0
 8029406:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802940a:	bfac      	ite	ge
 802940c:	6523      	strge	r3, [r4, #80]	@ 0x50
 802940e:	81a3      	strhlt	r3, [r4, #12]
 8029410:	bd10      	pop	{r4, pc}

08029412 <__seofread>:
 8029412:	2000      	movs	r0, #0
 8029414:	4770      	bx	lr

08029416 <__swrite>:
 8029416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802941a:	461f      	mov	r7, r3
 802941c:	898b      	ldrh	r3, [r1, #12]
 802941e:	05db      	lsls	r3, r3, #23
 8029420:	4605      	mov	r5, r0
 8029422:	460c      	mov	r4, r1
 8029424:	4616      	mov	r6, r2
 8029426:	d505      	bpl.n	8029434 <__swrite+0x1e>
 8029428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802942c:	2302      	movs	r3, #2
 802942e:	2200      	movs	r2, #0
 8029430:	f001 fd24 	bl	802ae7c <_lseek_r>
 8029434:	89a3      	ldrh	r3, [r4, #12]
 8029436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802943a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802943e:	81a3      	strh	r3, [r4, #12]
 8029440:	4632      	mov	r2, r6
 8029442:	463b      	mov	r3, r7
 8029444:	4628      	mov	r0, r5
 8029446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802944a:	f001 bd3b 	b.w	802aec4 <_write_r>

0802944e <__sseek>:
 802944e:	b510      	push	{r4, lr}
 8029450:	460c      	mov	r4, r1
 8029452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029456:	f001 fd11 	bl	802ae7c <_lseek_r>
 802945a:	1c43      	adds	r3, r0, #1
 802945c:	89a3      	ldrh	r3, [r4, #12]
 802945e:	bf15      	itete	ne
 8029460:	6520      	strne	r0, [r4, #80]	@ 0x50
 8029462:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8029466:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802946a:	81a3      	strheq	r3, [r4, #12]
 802946c:	bf18      	it	ne
 802946e:	81a3      	strhne	r3, [r4, #12]
 8029470:	bd10      	pop	{r4, pc}

08029472 <__sclose>:
 8029472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029476:	f001 bcc5 	b.w	802ae04 <_close_r>
	...

0802947c <std>:
 802947c:	2300      	movs	r3, #0
 802947e:	b510      	push	{r4, lr}
 8029480:	4604      	mov	r4, r0
 8029482:	e9c0 3300 	strd	r3, r3, [r0]
 8029486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802948a:	6083      	str	r3, [r0, #8]
 802948c:	8181      	strh	r1, [r0, #12]
 802948e:	6643      	str	r3, [r0, #100]	@ 0x64
 8029490:	81c2      	strh	r2, [r0, #14]
 8029492:	6183      	str	r3, [r0, #24]
 8029494:	4619      	mov	r1, r3
 8029496:	2208      	movs	r2, #8
 8029498:	305c      	adds	r0, #92	@ 0x5c
 802949a:	f000 fb21 	bl	8029ae0 <memset>
 802949e:	4b0d      	ldr	r3, [pc, #52]	@ (80294d4 <std+0x58>)
 80294a0:	6223      	str	r3, [r4, #32]
 80294a2:	4b0d      	ldr	r3, [pc, #52]	@ (80294d8 <std+0x5c>)
 80294a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80294a6:	4b0d      	ldr	r3, [pc, #52]	@ (80294dc <std+0x60>)
 80294a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80294aa:	4b0d      	ldr	r3, [pc, #52]	@ (80294e0 <std+0x64>)
 80294ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80294ae:	4b0d      	ldr	r3, [pc, #52]	@ (80294e4 <std+0x68>)
 80294b0:	61e4      	str	r4, [r4, #28]
 80294b2:	429c      	cmp	r4, r3
 80294b4:	d006      	beq.n	80294c4 <std+0x48>
 80294b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80294ba:	4294      	cmp	r4, r2
 80294bc:	d002      	beq.n	80294c4 <std+0x48>
 80294be:	33d0      	adds	r3, #208	@ 0xd0
 80294c0:	429c      	cmp	r4, r3
 80294c2:	d105      	bne.n	80294d0 <std+0x54>
 80294c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80294c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80294cc:	f001 bd3e 	b.w	802af4c <__retarget_lock_init_recursive>
 80294d0:	bd10      	pop	{r4, pc}
 80294d2:	bf00      	nop
 80294d4:	080293f1 	.word	0x080293f1
 80294d8:	08029417 	.word	0x08029417
 80294dc:	0802944f 	.word	0x0802944f
 80294e0:	08029473 	.word	0x08029473
 80294e4:	20018024 	.word	0x20018024

080294e8 <stdio_exit_handler>:
 80294e8:	4a02      	ldr	r2, [pc, #8]	@ (80294f4 <stdio_exit_handler+0xc>)
 80294ea:	4903      	ldr	r1, [pc, #12]	@ (80294f8 <stdio_exit_handler+0x10>)
 80294ec:	4803      	ldr	r0, [pc, #12]	@ (80294fc <stdio_exit_handler+0x14>)
 80294ee:	f000 b9ef 	b.w	80298d0 <_fwalk_sglue>
 80294f2:	bf00      	nop
 80294f4:	200000d4 	.word	0x200000d4
 80294f8:	08030e91 	.word	0x08030e91
 80294fc:	20000258 	.word	0x20000258

08029500 <cleanup_stdio>:
 8029500:	6841      	ldr	r1, [r0, #4]
 8029502:	4b0c      	ldr	r3, [pc, #48]	@ (8029534 <cleanup_stdio+0x34>)
 8029504:	4299      	cmp	r1, r3
 8029506:	b510      	push	{r4, lr}
 8029508:	4604      	mov	r4, r0
 802950a:	d001      	beq.n	8029510 <cleanup_stdio+0x10>
 802950c:	f007 fcc0 	bl	8030e90 <_fclose_r>
 8029510:	68a1      	ldr	r1, [r4, #8]
 8029512:	4b09      	ldr	r3, [pc, #36]	@ (8029538 <cleanup_stdio+0x38>)
 8029514:	4299      	cmp	r1, r3
 8029516:	d002      	beq.n	802951e <cleanup_stdio+0x1e>
 8029518:	4620      	mov	r0, r4
 802951a:	f007 fcb9 	bl	8030e90 <_fclose_r>
 802951e:	68e1      	ldr	r1, [r4, #12]
 8029520:	4b06      	ldr	r3, [pc, #24]	@ (802953c <cleanup_stdio+0x3c>)
 8029522:	4299      	cmp	r1, r3
 8029524:	d004      	beq.n	8029530 <cleanup_stdio+0x30>
 8029526:	4620      	mov	r0, r4
 8029528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802952c:	f007 bcb0 	b.w	8030e90 <_fclose_r>
 8029530:	bd10      	pop	{r4, pc}
 8029532:	bf00      	nop
 8029534:	20018024 	.word	0x20018024
 8029538:	2001808c 	.word	0x2001808c
 802953c:	200180f4 	.word	0x200180f4

08029540 <global_stdio_init.part.0>:
 8029540:	b510      	push	{r4, lr}
 8029542:	4b0b      	ldr	r3, [pc, #44]	@ (8029570 <global_stdio_init.part.0+0x30>)
 8029544:	4c0b      	ldr	r4, [pc, #44]	@ (8029574 <global_stdio_init.part.0+0x34>)
 8029546:	4a0c      	ldr	r2, [pc, #48]	@ (8029578 <global_stdio_init.part.0+0x38>)
 8029548:	601a      	str	r2, [r3, #0]
 802954a:	4620      	mov	r0, r4
 802954c:	2200      	movs	r2, #0
 802954e:	2104      	movs	r1, #4
 8029550:	f7ff ff94 	bl	802947c <std>
 8029554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8029558:	2201      	movs	r2, #1
 802955a:	2109      	movs	r1, #9
 802955c:	f7ff ff8e 	bl	802947c <std>
 8029560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8029564:	2202      	movs	r2, #2
 8029566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802956a:	2112      	movs	r1, #18
 802956c:	f7ff bf86 	b.w	802947c <std>
 8029570:	2001815c 	.word	0x2001815c
 8029574:	20018024 	.word	0x20018024
 8029578:	080294e9 	.word	0x080294e9

0802957c <__sfp_lock_acquire>:
 802957c:	4801      	ldr	r0, [pc, #4]	@ (8029584 <__sfp_lock_acquire+0x8>)
 802957e:	f001 bce8 	b.w	802af52 <__retarget_lock_acquire_recursive>
 8029582:	bf00      	nop
 8029584:	2001818c 	.word	0x2001818c

08029588 <__sfp_lock_release>:
 8029588:	4801      	ldr	r0, [pc, #4]	@ (8029590 <__sfp_lock_release+0x8>)
 802958a:	f001 bce4 	b.w	802af56 <__retarget_lock_release_recursive>
 802958e:	bf00      	nop
 8029590:	2001818c 	.word	0x2001818c

08029594 <__sinit>:
 8029594:	b510      	push	{r4, lr}
 8029596:	4604      	mov	r4, r0
 8029598:	f7ff fff0 	bl	802957c <__sfp_lock_acquire>
 802959c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802959e:	b11b      	cbz	r3, 80295a8 <__sinit+0x14>
 80295a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80295a4:	f7ff bff0 	b.w	8029588 <__sfp_lock_release>
 80295a8:	4b04      	ldr	r3, [pc, #16]	@ (80295bc <__sinit+0x28>)
 80295aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80295ac:	4b04      	ldr	r3, [pc, #16]	@ (80295c0 <__sinit+0x2c>)
 80295ae:	681b      	ldr	r3, [r3, #0]
 80295b0:	2b00      	cmp	r3, #0
 80295b2:	d1f5      	bne.n	80295a0 <__sinit+0xc>
 80295b4:	f7ff ffc4 	bl	8029540 <global_stdio_init.part.0>
 80295b8:	e7f2      	b.n	80295a0 <__sinit+0xc>
 80295ba:	bf00      	nop
 80295bc:	08029501 	.word	0x08029501
 80295c0:	2001815c 	.word	0x2001815c

080295c4 <_vsnprintf_r>:
 80295c4:	b530      	push	{r4, r5, lr}
 80295c6:	4614      	mov	r4, r2
 80295c8:	2c00      	cmp	r4, #0
 80295ca:	b09b      	sub	sp, #108	@ 0x6c
 80295cc:	4605      	mov	r5, r0
 80295ce:	461a      	mov	r2, r3
 80295d0:	da05      	bge.n	80295de <_vsnprintf_r+0x1a>
 80295d2:	238b      	movs	r3, #139	@ 0x8b
 80295d4:	6003      	str	r3, [r0, #0]
 80295d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80295da:	b01b      	add	sp, #108	@ 0x6c
 80295dc:	bd30      	pop	{r4, r5, pc}
 80295de:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80295e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80295e6:	bf14      	ite	ne
 80295e8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80295ec:	4623      	moveq	r3, r4
 80295ee:	9302      	str	r3, [sp, #8]
 80295f0:	9305      	str	r3, [sp, #20]
 80295f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80295f6:	9100      	str	r1, [sp, #0]
 80295f8:	9104      	str	r1, [sp, #16]
 80295fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80295fe:	4669      	mov	r1, sp
 8029600:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8029602:	f004 fbe5 	bl	802ddd0 <_svfprintf_r>
 8029606:	1c43      	adds	r3, r0, #1
 8029608:	bfbc      	itt	lt
 802960a:	238b      	movlt	r3, #139	@ 0x8b
 802960c:	602b      	strlt	r3, [r5, #0]
 802960e:	2c00      	cmp	r4, #0
 8029610:	d0e3      	beq.n	80295da <_vsnprintf_r+0x16>
 8029612:	9b00      	ldr	r3, [sp, #0]
 8029614:	2200      	movs	r2, #0
 8029616:	701a      	strb	r2, [r3, #0]
 8029618:	e7df      	b.n	80295da <_vsnprintf_r+0x16>
	...

0802961c <vsnprintf>:
 802961c:	b507      	push	{r0, r1, r2, lr}
 802961e:	9300      	str	r3, [sp, #0]
 8029620:	4613      	mov	r3, r2
 8029622:	460a      	mov	r2, r1
 8029624:	4601      	mov	r1, r0
 8029626:	4803      	ldr	r0, [pc, #12]	@ (8029634 <vsnprintf+0x18>)
 8029628:	6800      	ldr	r0, [r0, #0]
 802962a:	f7ff ffcb 	bl	80295c4 <_vsnprintf_r>
 802962e:	b003      	add	sp, #12
 8029630:	f85d fb04 	ldr.w	pc, [sp], #4
 8029634:	20000254 	.word	0x20000254

08029638 <__sfvwrite_r>:
 8029638:	6893      	ldr	r3, [r2, #8]
 802963a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802963e:	4606      	mov	r6, r0
 8029640:	460c      	mov	r4, r1
 8029642:	4691      	mov	r9, r2
 8029644:	b91b      	cbnz	r3, 802964e <__sfvwrite_r+0x16>
 8029646:	2000      	movs	r0, #0
 8029648:	b003      	add	sp, #12
 802964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802964e:	898b      	ldrh	r3, [r1, #12]
 8029650:	0718      	lsls	r0, r3, #28
 8029652:	d550      	bpl.n	80296f6 <__sfvwrite_r+0xbe>
 8029654:	690b      	ldr	r3, [r1, #16]
 8029656:	2b00      	cmp	r3, #0
 8029658:	d04d      	beq.n	80296f6 <__sfvwrite_r+0xbe>
 802965a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802965e:	f8d9 8000 	ldr.w	r8, [r9]
 8029662:	f013 0702 	ands.w	r7, r3, #2
 8029666:	d16b      	bne.n	8029740 <__sfvwrite_r+0x108>
 8029668:	f013 0301 	ands.w	r3, r3, #1
 802966c:	f000 809c 	beq.w	80297a8 <__sfvwrite_r+0x170>
 8029670:	4638      	mov	r0, r7
 8029672:	46ba      	mov	sl, r7
 8029674:	46bb      	mov	fp, r7
 8029676:	f1bb 0f00 	cmp.w	fp, #0
 802967a:	f000 8103 	beq.w	8029884 <__sfvwrite_r+0x24c>
 802967e:	b950      	cbnz	r0, 8029696 <__sfvwrite_r+0x5e>
 8029680:	465a      	mov	r2, fp
 8029682:	210a      	movs	r1, #10
 8029684:	4650      	mov	r0, sl
 8029686:	f7e6 fdbb 	bl	8010200 <memchr>
 802968a:	2800      	cmp	r0, #0
 802968c:	f000 8100 	beq.w	8029890 <__sfvwrite_r+0x258>
 8029690:	3001      	adds	r0, #1
 8029692:	eba0 070a 	sub.w	r7, r0, sl
 8029696:	6820      	ldr	r0, [r4, #0]
 8029698:	6921      	ldr	r1, [r4, #16]
 802969a:	68a5      	ldr	r5, [r4, #8]
 802969c:	6963      	ldr	r3, [r4, #20]
 802969e:	455f      	cmp	r7, fp
 80296a0:	463a      	mov	r2, r7
 80296a2:	bf28      	it	cs
 80296a4:	465a      	movcs	r2, fp
 80296a6:	4288      	cmp	r0, r1
 80296a8:	f240 80f5 	bls.w	8029896 <__sfvwrite_r+0x25e>
 80296ac:	441d      	add	r5, r3
 80296ae:	42aa      	cmp	r2, r5
 80296b0:	f340 80f1 	ble.w	8029896 <__sfvwrite_r+0x25e>
 80296b4:	4651      	mov	r1, sl
 80296b6:	462a      	mov	r2, r5
 80296b8:	f000 f9f8 	bl	8029aac <memmove>
 80296bc:	6823      	ldr	r3, [r4, #0]
 80296be:	442b      	add	r3, r5
 80296c0:	6023      	str	r3, [r4, #0]
 80296c2:	4621      	mov	r1, r4
 80296c4:	4630      	mov	r0, r6
 80296c6:	f7ff fe23 	bl	8029310 <_fflush_r>
 80296ca:	2800      	cmp	r0, #0
 80296cc:	d167      	bne.n	802979e <__sfvwrite_r+0x166>
 80296ce:	1b7f      	subs	r7, r7, r5
 80296d0:	f040 80f9 	bne.w	80298c6 <__sfvwrite_r+0x28e>
 80296d4:	4621      	mov	r1, r4
 80296d6:	4630      	mov	r0, r6
 80296d8:	f7ff fe1a 	bl	8029310 <_fflush_r>
 80296dc:	2800      	cmp	r0, #0
 80296de:	d15e      	bne.n	802979e <__sfvwrite_r+0x166>
 80296e0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80296e4:	1b5b      	subs	r3, r3, r5
 80296e6:	44aa      	add	sl, r5
 80296e8:	ebab 0b05 	sub.w	fp, fp, r5
 80296ec:	f8c9 3008 	str.w	r3, [r9, #8]
 80296f0:	2b00      	cmp	r3, #0
 80296f2:	d1c0      	bne.n	8029676 <__sfvwrite_r+0x3e>
 80296f4:	e7a7      	b.n	8029646 <__sfvwrite_r+0xe>
 80296f6:	4621      	mov	r1, r4
 80296f8:	4630      	mov	r0, r6
 80296fa:	f000 f907 	bl	802990c <__swsetup_r>
 80296fe:	2800      	cmp	r0, #0
 8029700:	d0ab      	beq.n	802965a <__sfvwrite_r+0x22>
 8029702:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029706:	e79f      	b.n	8029648 <__sfvwrite_r+0x10>
 8029708:	e9d8 a500 	ldrd	sl, r5, [r8]
 802970c:	f108 0808 	add.w	r8, r8, #8
 8029710:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8029714:	69e1      	ldr	r1, [r4, #28]
 8029716:	2d00      	cmp	r5, #0
 8029718:	d0f6      	beq.n	8029708 <__sfvwrite_r+0xd0>
 802971a:	42bd      	cmp	r5, r7
 802971c:	462b      	mov	r3, r5
 802971e:	4652      	mov	r2, sl
 8029720:	bf28      	it	cs
 8029722:	463b      	movcs	r3, r7
 8029724:	4630      	mov	r0, r6
 8029726:	47d8      	blx	fp
 8029728:	2800      	cmp	r0, #0
 802972a:	dd38      	ble.n	802979e <__sfvwrite_r+0x166>
 802972c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8029730:	1a1b      	subs	r3, r3, r0
 8029732:	4482      	add	sl, r0
 8029734:	1a2d      	subs	r5, r5, r0
 8029736:	f8c9 3008 	str.w	r3, [r9, #8]
 802973a:	2b00      	cmp	r3, #0
 802973c:	d1e8      	bne.n	8029710 <__sfvwrite_r+0xd8>
 802973e:	e782      	b.n	8029646 <__sfvwrite_r+0xe>
 8029740:	f04f 0a00 	mov.w	sl, #0
 8029744:	4f61      	ldr	r7, [pc, #388]	@ (80298cc <__sfvwrite_r+0x294>)
 8029746:	4655      	mov	r5, sl
 8029748:	e7e2      	b.n	8029710 <__sfvwrite_r+0xd8>
 802974a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802974e:	f108 0808 	add.w	r8, r8, #8
 8029752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029756:	6820      	ldr	r0, [r4, #0]
 8029758:	68a2      	ldr	r2, [r4, #8]
 802975a:	f1ba 0f00 	cmp.w	sl, #0
 802975e:	d0f4      	beq.n	802974a <__sfvwrite_r+0x112>
 8029760:	0599      	lsls	r1, r3, #22
 8029762:	d563      	bpl.n	802982c <__sfvwrite_r+0x1f4>
 8029764:	4552      	cmp	r2, sl
 8029766:	d836      	bhi.n	80297d6 <__sfvwrite_r+0x19e>
 8029768:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802976c:	d033      	beq.n	80297d6 <__sfvwrite_r+0x19e>
 802976e:	6921      	ldr	r1, [r4, #16]
 8029770:	6965      	ldr	r5, [r4, #20]
 8029772:	eba0 0b01 	sub.w	fp, r0, r1
 8029776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802977a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802977e:	f10b 0201 	add.w	r2, fp, #1
 8029782:	106d      	asrs	r5, r5, #1
 8029784:	4452      	add	r2, sl
 8029786:	4295      	cmp	r5, r2
 8029788:	bf38      	it	cc
 802978a:	4615      	movcc	r5, r2
 802978c:	055b      	lsls	r3, r3, #21
 802978e:	d53d      	bpl.n	802980c <__sfvwrite_r+0x1d4>
 8029790:	4629      	mov	r1, r5
 8029792:	4630      	mov	r0, r6
 8029794:	f002 fbfa 	bl	802bf8c <_malloc_r>
 8029798:	b948      	cbnz	r0, 80297ae <__sfvwrite_r+0x176>
 802979a:	230c      	movs	r3, #12
 802979c:	6033      	str	r3, [r6, #0]
 802979e:	89a3      	ldrh	r3, [r4, #12]
 80297a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80297a4:	81a3      	strh	r3, [r4, #12]
 80297a6:	e7ac      	b.n	8029702 <__sfvwrite_r+0xca>
 80297a8:	461f      	mov	r7, r3
 80297aa:	469a      	mov	sl, r3
 80297ac:	e7d1      	b.n	8029752 <__sfvwrite_r+0x11a>
 80297ae:	465a      	mov	r2, fp
 80297b0:	6921      	ldr	r1, [r4, #16]
 80297b2:	9001      	str	r0, [sp, #4]
 80297b4:	f001 fbd0 	bl	802af58 <memcpy>
 80297b8:	89a2      	ldrh	r2, [r4, #12]
 80297ba:	9b01      	ldr	r3, [sp, #4]
 80297bc:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80297c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80297c4:	81a2      	strh	r2, [r4, #12]
 80297c6:	6123      	str	r3, [r4, #16]
 80297c8:	6165      	str	r5, [r4, #20]
 80297ca:	445b      	add	r3, fp
 80297cc:	eba5 050b 	sub.w	r5, r5, fp
 80297d0:	6023      	str	r3, [r4, #0]
 80297d2:	4652      	mov	r2, sl
 80297d4:	60a5      	str	r5, [r4, #8]
 80297d6:	4552      	cmp	r2, sl
 80297d8:	bf28      	it	cs
 80297da:	4652      	movcs	r2, sl
 80297dc:	6820      	ldr	r0, [r4, #0]
 80297de:	9201      	str	r2, [sp, #4]
 80297e0:	4639      	mov	r1, r7
 80297e2:	f000 f963 	bl	8029aac <memmove>
 80297e6:	68a3      	ldr	r3, [r4, #8]
 80297e8:	9a01      	ldr	r2, [sp, #4]
 80297ea:	1a9b      	subs	r3, r3, r2
 80297ec:	60a3      	str	r3, [r4, #8]
 80297ee:	6823      	ldr	r3, [r4, #0]
 80297f0:	4413      	add	r3, r2
 80297f2:	4655      	mov	r5, sl
 80297f4:	6023      	str	r3, [r4, #0]
 80297f6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80297fa:	1b5b      	subs	r3, r3, r5
 80297fc:	442f      	add	r7, r5
 80297fe:	ebaa 0a05 	sub.w	sl, sl, r5
 8029802:	f8c9 3008 	str.w	r3, [r9, #8]
 8029806:	2b00      	cmp	r3, #0
 8029808:	d1a3      	bne.n	8029752 <__sfvwrite_r+0x11a>
 802980a:	e71c      	b.n	8029646 <__sfvwrite_r+0xe>
 802980c:	462a      	mov	r2, r5
 802980e:	4630      	mov	r0, r6
 8029810:	f007 fbcc 	bl	8030fac <_realloc_r>
 8029814:	4603      	mov	r3, r0
 8029816:	2800      	cmp	r0, #0
 8029818:	d1d5      	bne.n	80297c6 <__sfvwrite_r+0x18e>
 802981a:	6921      	ldr	r1, [r4, #16]
 802981c:	4630      	mov	r0, r6
 802981e:	f002 fa9d 	bl	802bd5c <_free_r>
 8029822:	89a3      	ldrh	r3, [r4, #12]
 8029824:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8029828:	81a3      	strh	r3, [r4, #12]
 802982a:	e7b6      	b.n	802979a <__sfvwrite_r+0x162>
 802982c:	6923      	ldr	r3, [r4, #16]
 802982e:	4283      	cmp	r3, r0
 8029830:	d302      	bcc.n	8029838 <__sfvwrite_r+0x200>
 8029832:	6961      	ldr	r1, [r4, #20]
 8029834:	4551      	cmp	r1, sl
 8029836:	d915      	bls.n	8029864 <__sfvwrite_r+0x22c>
 8029838:	4552      	cmp	r2, sl
 802983a:	bf28      	it	cs
 802983c:	4652      	movcs	r2, sl
 802983e:	4639      	mov	r1, r7
 8029840:	4615      	mov	r5, r2
 8029842:	f000 f933 	bl	8029aac <memmove>
 8029846:	68a3      	ldr	r3, [r4, #8]
 8029848:	6822      	ldr	r2, [r4, #0]
 802984a:	1b5b      	subs	r3, r3, r5
 802984c:	442a      	add	r2, r5
 802984e:	60a3      	str	r3, [r4, #8]
 8029850:	6022      	str	r2, [r4, #0]
 8029852:	2b00      	cmp	r3, #0
 8029854:	d1cf      	bne.n	80297f6 <__sfvwrite_r+0x1be>
 8029856:	4621      	mov	r1, r4
 8029858:	4630      	mov	r0, r6
 802985a:	f7ff fd59 	bl	8029310 <_fflush_r>
 802985e:	2800      	cmp	r0, #0
 8029860:	d0c9      	beq.n	80297f6 <__sfvwrite_r+0x1be>
 8029862:	e79c      	b.n	802979e <__sfvwrite_r+0x166>
 8029864:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8029868:	4553      	cmp	r3, sl
 802986a:	bf28      	it	cs
 802986c:	4653      	movcs	r3, sl
 802986e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8029870:	fb93 f3f1 	sdiv	r3, r3, r1
 8029874:	463a      	mov	r2, r7
 8029876:	434b      	muls	r3, r1
 8029878:	4630      	mov	r0, r6
 802987a:	69e1      	ldr	r1, [r4, #28]
 802987c:	47a8      	blx	r5
 802987e:	1e05      	subs	r5, r0, #0
 8029880:	dcb9      	bgt.n	80297f6 <__sfvwrite_r+0x1be>
 8029882:	e78c      	b.n	802979e <__sfvwrite_r+0x166>
 8029884:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8029888:	2000      	movs	r0, #0
 802988a:	f108 0808 	add.w	r8, r8, #8
 802988e:	e6f2      	b.n	8029676 <__sfvwrite_r+0x3e>
 8029890:	f10b 0701 	add.w	r7, fp, #1
 8029894:	e6ff      	b.n	8029696 <__sfvwrite_r+0x5e>
 8029896:	4293      	cmp	r3, r2
 8029898:	dc08      	bgt.n	80298ac <__sfvwrite_r+0x274>
 802989a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802989c:	69e1      	ldr	r1, [r4, #28]
 802989e:	4652      	mov	r2, sl
 80298a0:	4630      	mov	r0, r6
 80298a2:	47a8      	blx	r5
 80298a4:	1e05      	subs	r5, r0, #0
 80298a6:	f73f af12 	bgt.w	80296ce <__sfvwrite_r+0x96>
 80298aa:	e778      	b.n	802979e <__sfvwrite_r+0x166>
 80298ac:	4651      	mov	r1, sl
 80298ae:	9201      	str	r2, [sp, #4]
 80298b0:	f000 f8fc 	bl	8029aac <memmove>
 80298b4:	9a01      	ldr	r2, [sp, #4]
 80298b6:	68a3      	ldr	r3, [r4, #8]
 80298b8:	1a9b      	subs	r3, r3, r2
 80298ba:	60a3      	str	r3, [r4, #8]
 80298bc:	6823      	ldr	r3, [r4, #0]
 80298be:	4413      	add	r3, r2
 80298c0:	6023      	str	r3, [r4, #0]
 80298c2:	4615      	mov	r5, r2
 80298c4:	e703      	b.n	80296ce <__sfvwrite_r+0x96>
 80298c6:	2001      	movs	r0, #1
 80298c8:	e70a      	b.n	80296e0 <__sfvwrite_r+0xa8>
 80298ca:	bf00      	nop
 80298cc:	7ffffc00 	.word	0x7ffffc00

080298d0 <_fwalk_sglue>:
 80298d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80298d4:	4607      	mov	r7, r0
 80298d6:	4688      	mov	r8, r1
 80298d8:	4614      	mov	r4, r2
 80298da:	2600      	movs	r6, #0
 80298dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80298e0:	f1b9 0901 	subs.w	r9, r9, #1
 80298e4:	d505      	bpl.n	80298f2 <_fwalk_sglue+0x22>
 80298e6:	6824      	ldr	r4, [r4, #0]
 80298e8:	2c00      	cmp	r4, #0
 80298ea:	d1f7      	bne.n	80298dc <_fwalk_sglue+0xc>
 80298ec:	4630      	mov	r0, r6
 80298ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80298f2:	89ab      	ldrh	r3, [r5, #12]
 80298f4:	2b01      	cmp	r3, #1
 80298f6:	d907      	bls.n	8029908 <_fwalk_sglue+0x38>
 80298f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80298fc:	3301      	adds	r3, #1
 80298fe:	d003      	beq.n	8029908 <_fwalk_sglue+0x38>
 8029900:	4629      	mov	r1, r5
 8029902:	4638      	mov	r0, r7
 8029904:	47c0      	blx	r8
 8029906:	4306      	orrs	r6, r0
 8029908:	3568      	adds	r5, #104	@ 0x68
 802990a:	e7e9      	b.n	80298e0 <_fwalk_sglue+0x10>

0802990c <__swsetup_r>:
 802990c:	b538      	push	{r3, r4, r5, lr}
 802990e:	4b29      	ldr	r3, [pc, #164]	@ (80299b4 <__swsetup_r+0xa8>)
 8029910:	4605      	mov	r5, r0
 8029912:	6818      	ldr	r0, [r3, #0]
 8029914:	460c      	mov	r4, r1
 8029916:	b118      	cbz	r0, 8029920 <__swsetup_r+0x14>
 8029918:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802991a:	b90b      	cbnz	r3, 8029920 <__swsetup_r+0x14>
 802991c:	f7ff fe3a 	bl	8029594 <__sinit>
 8029920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029924:	0719      	lsls	r1, r3, #28
 8029926:	d422      	bmi.n	802996e <__swsetup_r+0x62>
 8029928:	06da      	lsls	r2, r3, #27
 802992a:	d407      	bmi.n	802993c <__swsetup_r+0x30>
 802992c:	2209      	movs	r2, #9
 802992e:	602a      	str	r2, [r5, #0]
 8029930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029934:	81a3      	strh	r3, [r4, #12]
 8029936:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802993a:	e033      	b.n	80299a4 <__swsetup_r+0x98>
 802993c:	0758      	lsls	r0, r3, #29
 802993e:	d512      	bpl.n	8029966 <__swsetup_r+0x5a>
 8029940:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8029942:	b141      	cbz	r1, 8029956 <__swsetup_r+0x4a>
 8029944:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8029948:	4299      	cmp	r1, r3
 802994a:	d002      	beq.n	8029952 <__swsetup_r+0x46>
 802994c:	4628      	mov	r0, r5
 802994e:	f002 fa05 	bl	802bd5c <_free_r>
 8029952:	2300      	movs	r3, #0
 8029954:	6323      	str	r3, [r4, #48]	@ 0x30
 8029956:	89a3      	ldrh	r3, [r4, #12]
 8029958:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802995c:	81a3      	strh	r3, [r4, #12]
 802995e:	2300      	movs	r3, #0
 8029960:	6063      	str	r3, [r4, #4]
 8029962:	6923      	ldr	r3, [r4, #16]
 8029964:	6023      	str	r3, [r4, #0]
 8029966:	89a3      	ldrh	r3, [r4, #12]
 8029968:	f043 0308 	orr.w	r3, r3, #8
 802996c:	81a3      	strh	r3, [r4, #12]
 802996e:	6923      	ldr	r3, [r4, #16]
 8029970:	b94b      	cbnz	r3, 8029986 <__swsetup_r+0x7a>
 8029972:	89a3      	ldrh	r3, [r4, #12]
 8029974:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8029978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802997c:	d003      	beq.n	8029986 <__swsetup_r+0x7a>
 802997e:	4621      	mov	r1, r4
 8029980:	4628      	mov	r0, r5
 8029982:	f005 fc2b 	bl	802f1dc <__smakebuf_r>
 8029986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802998a:	f013 0201 	ands.w	r2, r3, #1
 802998e:	d00a      	beq.n	80299a6 <__swsetup_r+0x9a>
 8029990:	2200      	movs	r2, #0
 8029992:	60a2      	str	r2, [r4, #8]
 8029994:	6962      	ldr	r2, [r4, #20]
 8029996:	4252      	negs	r2, r2
 8029998:	61a2      	str	r2, [r4, #24]
 802999a:	6922      	ldr	r2, [r4, #16]
 802999c:	b942      	cbnz	r2, 80299b0 <__swsetup_r+0xa4>
 802999e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80299a2:	d1c5      	bne.n	8029930 <__swsetup_r+0x24>
 80299a4:	bd38      	pop	{r3, r4, r5, pc}
 80299a6:	0799      	lsls	r1, r3, #30
 80299a8:	bf58      	it	pl
 80299aa:	6962      	ldrpl	r2, [r4, #20]
 80299ac:	60a2      	str	r2, [r4, #8]
 80299ae:	e7f4      	b.n	802999a <__swsetup_r+0x8e>
 80299b0:	2000      	movs	r0, #0
 80299b2:	e7f7      	b.n	80299a4 <__swsetup_r+0x98>
 80299b4:	20000254 	.word	0x20000254

080299b8 <memcmp>:
 80299b8:	b510      	push	{r4, lr}
 80299ba:	3901      	subs	r1, #1
 80299bc:	4402      	add	r2, r0
 80299be:	4290      	cmp	r0, r2
 80299c0:	d101      	bne.n	80299c6 <memcmp+0xe>
 80299c2:	2000      	movs	r0, #0
 80299c4:	e005      	b.n	80299d2 <memcmp+0x1a>
 80299c6:	7803      	ldrb	r3, [r0, #0]
 80299c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80299cc:	42a3      	cmp	r3, r4
 80299ce:	d001      	beq.n	80299d4 <memcmp+0x1c>
 80299d0:	1b18      	subs	r0, r3, r4
 80299d2:	bd10      	pop	{r4, pc}
 80299d4:	3001      	adds	r0, #1
 80299d6:	e7f2      	b.n	80299be <memcmp+0x6>

080299d8 <__fputwc>:
 80299d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80299dc:	4680      	mov	r8, r0
 80299de:	460f      	mov	r7, r1
 80299e0:	4614      	mov	r4, r2
 80299e2:	f001 fa05 	bl	802adf0 <__locale_mb_cur_max>
 80299e6:	2801      	cmp	r0, #1
 80299e8:	4605      	mov	r5, r0
 80299ea:	d11b      	bne.n	8029a24 <__fputwc+0x4c>
 80299ec:	1e7b      	subs	r3, r7, #1
 80299ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80299f0:	d818      	bhi.n	8029a24 <__fputwc+0x4c>
 80299f2:	f88d 7004 	strb.w	r7, [sp, #4]
 80299f6:	2600      	movs	r6, #0
 80299f8:	f10d 0904 	add.w	r9, sp, #4
 80299fc:	42ae      	cmp	r6, r5
 80299fe:	d021      	beq.n	8029a44 <__fputwc+0x6c>
 8029a00:	68a3      	ldr	r3, [r4, #8]
 8029a02:	f816 1009 	ldrb.w	r1, [r6, r9]
 8029a06:	3b01      	subs	r3, #1
 8029a08:	2b00      	cmp	r3, #0
 8029a0a:	60a3      	str	r3, [r4, #8]
 8029a0c:	da04      	bge.n	8029a18 <__fputwc+0x40>
 8029a0e:	69a2      	ldr	r2, [r4, #24]
 8029a10:	4293      	cmp	r3, r2
 8029a12:	db1b      	blt.n	8029a4c <__fputwc+0x74>
 8029a14:	290a      	cmp	r1, #10
 8029a16:	d019      	beq.n	8029a4c <__fputwc+0x74>
 8029a18:	6823      	ldr	r3, [r4, #0]
 8029a1a:	1c5a      	adds	r2, r3, #1
 8029a1c:	6022      	str	r2, [r4, #0]
 8029a1e:	7019      	strb	r1, [r3, #0]
 8029a20:	3601      	adds	r6, #1
 8029a22:	e7eb      	b.n	80299fc <__fputwc+0x24>
 8029a24:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8029a28:	463a      	mov	r2, r7
 8029a2a:	a901      	add	r1, sp, #4
 8029a2c:	4640      	mov	r0, r8
 8029a2e:	f001 faa1 	bl	802af74 <_wcrtomb_r>
 8029a32:	1c43      	adds	r3, r0, #1
 8029a34:	4605      	mov	r5, r0
 8029a36:	d1de      	bne.n	80299f6 <__fputwc+0x1e>
 8029a38:	89a3      	ldrh	r3, [r4, #12]
 8029a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029a3e:	81a3      	strh	r3, [r4, #12]
 8029a40:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8029a44:	4638      	mov	r0, r7
 8029a46:	b003      	add	sp, #12
 8029a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029a4c:	4622      	mov	r2, r4
 8029a4e:	4640      	mov	r0, r8
 8029a50:	f008 fb1d 	bl	803208e <__swbuf_r>
 8029a54:	3001      	adds	r0, #1
 8029a56:	d1e3      	bne.n	8029a20 <__fputwc+0x48>
 8029a58:	e7f2      	b.n	8029a40 <__fputwc+0x68>

08029a5a <_fputwc_r>:
 8029a5a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8029a5c:	07db      	lsls	r3, r3, #31
 8029a5e:	b570      	push	{r4, r5, r6, lr}
 8029a60:	4605      	mov	r5, r0
 8029a62:	460e      	mov	r6, r1
 8029a64:	4614      	mov	r4, r2
 8029a66:	d405      	bmi.n	8029a74 <_fputwc_r+0x1a>
 8029a68:	8993      	ldrh	r3, [r2, #12]
 8029a6a:	0598      	lsls	r0, r3, #22
 8029a6c:	d402      	bmi.n	8029a74 <_fputwc_r+0x1a>
 8029a6e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8029a70:	f001 fa6f 	bl	802af52 <__retarget_lock_acquire_recursive>
 8029a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029a78:	0499      	lsls	r1, r3, #18
 8029a7a:	d406      	bmi.n	8029a8a <_fputwc_r+0x30>
 8029a7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8029a80:	81a3      	strh	r3, [r4, #12]
 8029a82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029a84:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8029a88:	6663      	str	r3, [r4, #100]	@ 0x64
 8029a8a:	4622      	mov	r2, r4
 8029a8c:	4628      	mov	r0, r5
 8029a8e:	4631      	mov	r1, r6
 8029a90:	f7ff ffa2 	bl	80299d8 <__fputwc>
 8029a94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029a96:	07da      	lsls	r2, r3, #31
 8029a98:	4605      	mov	r5, r0
 8029a9a:	d405      	bmi.n	8029aa8 <_fputwc_r+0x4e>
 8029a9c:	89a3      	ldrh	r3, [r4, #12]
 8029a9e:	059b      	lsls	r3, r3, #22
 8029aa0:	d402      	bmi.n	8029aa8 <_fputwc_r+0x4e>
 8029aa2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029aa4:	f001 fa57 	bl	802af56 <__retarget_lock_release_recursive>
 8029aa8:	4628      	mov	r0, r5
 8029aaa:	bd70      	pop	{r4, r5, r6, pc}

08029aac <memmove>:
 8029aac:	4288      	cmp	r0, r1
 8029aae:	b510      	push	{r4, lr}
 8029ab0:	eb01 0402 	add.w	r4, r1, r2
 8029ab4:	d902      	bls.n	8029abc <memmove+0x10>
 8029ab6:	4284      	cmp	r4, r0
 8029ab8:	4623      	mov	r3, r4
 8029aba:	d807      	bhi.n	8029acc <memmove+0x20>
 8029abc:	1e43      	subs	r3, r0, #1
 8029abe:	42a1      	cmp	r1, r4
 8029ac0:	d008      	beq.n	8029ad4 <memmove+0x28>
 8029ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8029aca:	e7f8      	b.n	8029abe <memmove+0x12>
 8029acc:	4402      	add	r2, r0
 8029ace:	4601      	mov	r1, r0
 8029ad0:	428a      	cmp	r2, r1
 8029ad2:	d100      	bne.n	8029ad6 <memmove+0x2a>
 8029ad4:	bd10      	pop	{r4, pc}
 8029ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8029ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8029ade:	e7f7      	b.n	8029ad0 <memmove+0x24>

08029ae0 <memset>:
 8029ae0:	4402      	add	r2, r0
 8029ae2:	4603      	mov	r3, r0
 8029ae4:	4293      	cmp	r3, r2
 8029ae6:	d100      	bne.n	8029aea <memset+0xa>
 8029ae8:	4770      	bx	lr
 8029aea:	f803 1b01 	strb.w	r1, [r3], #1
 8029aee:	e7f9      	b.n	8029ae4 <memset+0x4>

08029af0 <strcat>:
 8029af0:	b510      	push	{r4, lr}
 8029af2:	4602      	mov	r2, r0
 8029af4:	7814      	ldrb	r4, [r2, #0]
 8029af6:	4613      	mov	r3, r2
 8029af8:	3201      	adds	r2, #1
 8029afa:	2c00      	cmp	r4, #0
 8029afc:	d1fa      	bne.n	8029af4 <strcat+0x4>
 8029afe:	3b01      	subs	r3, #1
 8029b00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029b04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8029b08:	2a00      	cmp	r2, #0
 8029b0a:	d1f9      	bne.n	8029b00 <strcat+0x10>
 8029b0c:	bd10      	pop	{r4, pc}

08029b0e <strchr>:
 8029b0e:	b2c9      	uxtb	r1, r1
 8029b10:	4603      	mov	r3, r0
 8029b12:	4618      	mov	r0, r3
 8029b14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029b18:	b112      	cbz	r2, 8029b20 <strchr+0x12>
 8029b1a:	428a      	cmp	r2, r1
 8029b1c:	d1f9      	bne.n	8029b12 <strchr+0x4>
 8029b1e:	4770      	bx	lr
 8029b20:	2900      	cmp	r1, #0
 8029b22:	bf18      	it	ne
 8029b24:	2000      	movne	r0, #0
 8029b26:	4770      	bx	lr

08029b28 <strcspn>:
 8029b28:	b570      	push	{r4, r5, r6, lr}
 8029b2a:	4603      	mov	r3, r0
 8029b2c:	461e      	mov	r6, r3
 8029b2e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8029b32:	b144      	cbz	r4, 8029b46 <strcspn+0x1e>
 8029b34:	1e4a      	subs	r2, r1, #1
 8029b36:	e001      	b.n	8029b3c <strcspn+0x14>
 8029b38:	42a5      	cmp	r5, r4
 8029b3a:	d004      	beq.n	8029b46 <strcspn+0x1e>
 8029b3c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8029b40:	2d00      	cmp	r5, #0
 8029b42:	d1f9      	bne.n	8029b38 <strcspn+0x10>
 8029b44:	e7f2      	b.n	8029b2c <strcspn+0x4>
 8029b46:	1a30      	subs	r0, r6, r0
 8029b48:	bd70      	pop	{r4, r5, r6, pc}

08029b4a <strncmp>:
 8029b4a:	b510      	push	{r4, lr}
 8029b4c:	b16a      	cbz	r2, 8029b6a <strncmp+0x20>
 8029b4e:	3901      	subs	r1, #1
 8029b50:	1884      	adds	r4, r0, r2
 8029b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029b56:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8029b5a:	429a      	cmp	r2, r3
 8029b5c:	d103      	bne.n	8029b66 <strncmp+0x1c>
 8029b5e:	42a0      	cmp	r0, r4
 8029b60:	d001      	beq.n	8029b66 <strncmp+0x1c>
 8029b62:	2a00      	cmp	r2, #0
 8029b64:	d1f5      	bne.n	8029b52 <strncmp+0x8>
 8029b66:	1ad0      	subs	r0, r2, r3
 8029b68:	bd10      	pop	{r4, pc}
 8029b6a:	4610      	mov	r0, r2
 8029b6c:	e7fc      	b.n	8029b68 <strncmp+0x1e>

08029b6e <strncpy>:
 8029b6e:	b510      	push	{r4, lr}
 8029b70:	3901      	subs	r1, #1
 8029b72:	4603      	mov	r3, r0
 8029b74:	b132      	cbz	r2, 8029b84 <strncpy+0x16>
 8029b76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8029b7a:	f803 4b01 	strb.w	r4, [r3], #1
 8029b7e:	3a01      	subs	r2, #1
 8029b80:	2c00      	cmp	r4, #0
 8029b82:	d1f7      	bne.n	8029b74 <strncpy+0x6>
 8029b84:	441a      	add	r2, r3
 8029b86:	2100      	movs	r1, #0
 8029b88:	4293      	cmp	r3, r2
 8029b8a:	d100      	bne.n	8029b8e <strncpy+0x20>
 8029b8c:	bd10      	pop	{r4, pc}
 8029b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8029b92:	e7f9      	b.n	8029b88 <strncpy+0x1a>

08029b94 <strrchr>:
 8029b94:	b538      	push	{r3, r4, r5, lr}
 8029b96:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8029b9a:	4603      	mov	r3, r0
 8029b9c:	d10e      	bne.n	8029bbc <strrchr+0x28>
 8029b9e:	4621      	mov	r1, r4
 8029ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029ba4:	f7ff bfb3 	b.w	8029b0e <strchr>
 8029ba8:	1c43      	adds	r3, r0, #1
 8029baa:	4605      	mov	r5, r0
 8029bac:	4621      	mov	r1, r4
 8029bae:	4618      	mov	r0, r3
 8029bb0:	f7ff ffad 	bl	8029b0e <strchr>
 8029bb4:	2800      	cmp	r0, #0
 8029bb6:	d1f7      	bne.n	8029ba8 <strrchr+0x14>
 8029bb8:	4628      	mov	r0, r5
 8029bba:	bd38      	pop	{r3, r4, r5, pc}
 8029bbc:	2500      	movs	r5, #0
 8029bbe:	e7f5      	b.n	8029bac <strrchr+0x18>

08029bc0 <strspn>:
 8029bc0:	b570      	push	{r4, r5, r6, lr}
 8029bc2:	4603      	mov	r3, r0
 8029bc4:	461e      	mov	r6, r3
 8029bc6:	f813 4b01 	ldrb.w	r4, [r3], #1
 8029bca:	b13c      	cbz	r4, 8029bdc <strspn+0x1c>
 8029bcc:	1e4a      	subs	r2, r1, #1
 8029bce:	e001      	b.n	8029bd4 <strspn+0x14>
 8029bd0:	42a5      	cmp	r5, r4
 8029bd2:	d0f7      	beq.n	8029bc4 <strspn+0x4>
 8029bd4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8029bd8:	2d00      	cmp	r5, #0
 8029bda:	d1f9      	bne.n	8029bd0 <strspn+0x10>
 8029bdc:	1a30      	subs	r0, r6, r0
 8029bde:	bd70      	pop	{r4, r5, r6, pc}

08029be0 <strstr>:
 8029be0:	780a      	ldrb	r2, [r1, #0]
 8029be2:	b570      	push	{r4, r5, r6, lr}
 8029be4:	b96a      	cbnz	r2, 8029c02 <strstr+0x22>
 8029be6:	bd70      	pop	{r4, r5, r6, pc}
 8029be8:	429a      	cmp	r2, r3
 8029bea:	d109      	bne.n	8029c00 <strstr+0x20>
 8029bec:	460c      	mov	r4, r1
 8029bee:	4605      	mov	r5, r0
 8029bf0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8029bf4:	2b00      	cmp	r3, #0
 8029bf6:	d0f6      	beq.n	8029be6 <strstr+0x6>
 8029bf8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8029bfc:	429e      	cmp	r6, r3
 8029bfe:	d0f7      	beq.n	8029bf0 <strstr+0x10>
 8029c00:	3001      	adds	r0, #1
 8029c02:	7803      	ldrb	r3, [r0, #0]
 8029c04:	2b00      	cmp	r3, #0
 8029c06:	d1ef      	bne.n	8029be8 <strstr+0x8>
 8029c08:	4618      	mov	r0, r3
 8029c0a:	e7ec      	b.n	8029be6 <strstr+0x6>

08029c0c <localtime_r>:
 8029c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029c10:	460c      	mov	r4, r1
 8029c12:	4680      	mov	r8, r0
 8029c14:	f008 fab6 	bl	8032184 <__gettzinfo>
 8029c18:	4621      	mov	r1, r4
 8029c1a:	4605      	mov	r5, r0
 8029c1c:	4640      	mov	r0, r8
 8029c1e:	f008 fab5 	bl	803218c <gmtime_r>
 8029c22:	6943      	ldr	r3, [r0, #20]
 8029c24:	0799      	lsls	r1, r3, #30
 8029c26:	4604      	mov	r4, r0
 8029c28:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 8029c2c:	d106      	bne.n	8029c3c <localtime_r+0x30>
 8029c2e:	2264      	movs	r2, #100	@ 0x64
 8029c30:	fb97 f3f2 	sdiv	r3, r7, r2
 8029c34:	fb02 7313 	mls	r3, r2, r3, r7
 8029c38:	2b00      	cmp	r3, #0
 8029c3a:	d170      	bne.n	8029d1e <localtime_r+0x112>
 8029c3c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8029c40:	fb97 f3f2 	sdiv	r3, r7, r2
 8029c44:	fb02 7313 	mls	r3, r2, r3, r7
 8029c48:	fab3 f383 	clz	r3, r3
 8029c4c:	095b      	lsrs	r3, r3, #5
 8029c4e:	4e64      	ldr	r6, [pc, #400]	@ (8029de0 <localtime_r+0x1d4>)
 8029c50:	2230      	movs	r2, #48	@ 0x30
 8029c52:	fb02 6603 	mla	r6, r2, r3, r6
 8029c56:	f000 fe97 	bl	802a988 <__tz_lock>
 8029c5a:	f000 fea1 	bl	802a9a0 <_tzset_unlocked>
 8029c5e:	4b61      	ldr	r3, [pc, #388]	@ (8029de4 <localtime_r+0x1d8>)
 8029c60:	681b      	ldr	r3, [r3, #0]
 8029c62:	2b00      	cmp	r3, #0
 8029c64:	d06a      	beq.n	8029d3c <localtime_r+0x130>
 8029c66:	686b      	ldr	r3, [r5, #4]
 8029c68:	42bb      	cmp	r3, r7
 8029c6a:	d15a      	bne.n	8029d22 <localtime_r+0x116>
 8029c6c:	682f      	ldr	r7, [r5, #0]
 8029c6e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8029c72:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8029c76:	2f00      	cmp	r7, #0
 8029c78:	d15b      	bne.n	8029d32 <localtime_r+0x126>
 8029c7a:	4282      	cmp	r2, r0
 8029c7c:	eb73 0101 	sbcs.w	r1, r3, r1
 8029c80:	db5e      	blt.n	8029d40 <localtime_r+0x134>
 8029c82:	2301      	movs	r3, #1
 8029c84:	6223      	str	r3, [r4, #32]
 8029c86:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8029c88:	6861      	ldr	r1, [r4, #4]
 8029c8a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8029c8e:	fb93 f0f2 	sdiv	r0, r3, r2
 8029c92:	fb02 3310 	mls	r3, r2, r0, r3
 8029c96:	223c      	movs	r2, #60	@ 0x3c
 8029c98:	fb93 f5f2 	sdiv	r5, r3, r2
 8029c9c:	fb02 3215 	mls	r2, r2, r5, r3
 8029ca0:	6823      	ldr	r3, [r4, #0]
 8029ca2:	1a9b      	subs	r3, r3, r2
 8029ca4:	68a2      	ldr	r2, [r4, #8]
 8029ca6:	6023      	str	r3, [r4, #0]
 8029ca8:	1b49      	subs	r1, r1, r5
 8029caa:	1a12      	subs	r2, r2, r0
 8029cac:	2b3b      	cmp	r3, #59	@ 0x3b
 8029cae:	6061      	str	r1, [r4, #4]
 8029cb0:	60a2      	str	r2, [r4, #8]
 8029cb2:	dd51      	ble.n	8029d58 <localtime_r+0x14c>
 8029cb4:	3101      	adds	r1, #1
 8029cb6:	6061      	str	r1, [r4, #4]
 8029cb8:	3b3c      	subs	r3, #60	@ 0x3c
 8029cba:	6023      	str	r3, [r4, #0]
 8029cbc:	6863      	ldr	r3, [r4, #4]
 8029cbe:	2b3b      	cmp	r3, #59	@ 0x3b
 8029cc0:	dd50      	ble.n	8029d64 <localtime_r+0x158>
 8029cc2:	3201      	adds	r2, #1
 8029cc4:	60a2      	str	r2, [r4, #8]
 8029cc6:	3b3c      	subs	r3, #60	@ 0x3c
 8029cc8:	6063      	str	r3, [r4, #4]
 8029cca:	68a3      	ldr	r3, [r4, #8]
 8029ccc:	2b17      	cmp	r3, #23
 8029cce:	dd4f      	ble.n	8029d70 <localtime_r+0x164>
 8029cd0:	69e2      	ldr	r2, [r4, #28]
 8029cd2:	3201      	adds	r2, #1
 8029cd4:	61e2      	str	r2, [r4, #28]
 8029cd6:	69a2      	ldr	r2, [r4, #24]
 8029cd8:	3201      	adds	r2, #1
 8029cda:	2a07      	cmp	r2, #7
 8029cdc:	bfa8      	it	ge
 8029cde:	2200      	movge	r2, #0
 8029ce0:	61a2      	str	r2, [r4, #24]
 8029ce2:	68e2      	ldr	r2, [r4, #12]
 8029ce4:	3b18      	subs	r3, #24
 8029ce6:	3201      	adds	r2, #1
 8029ce8:	60a3      	str	r3, [r4, #8]
 8029cea:	6923      	ldr	r3, [r4, #16]
 8029cec:	60e2      	str	r2, [r4, #12]
 8029cee:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029cf2:	428a      	cmp	r2, r1
 8029cf4:	dd0e      	ble.n	8029d14 <localtime_r+0x108>
 8029cf6:	2b0b      	cmp	r3, #11
 8029cf8:	eba2 0201 	sub.w	r2, r2, r1
 8029cfc:	60e2      	str	r2, [r4, #12]
 8029cfe:	f103 0201 	add.w	r2, r3, #1
 8029d02:	bf09      	itett	eq
 8029d04:	6963      	ldreq	r3, [r4, #20]
 8029d06:	6122      	strne	r2, [r4, #16]
 8029d08:	2200      	moveq	r2, #0
 8029d0a:	3301      	addeq	r3, #1
 8029d0c:	bf02      	ittt	eq
 8029d0e:	6122      	streq	r2, [r4, #16]
 8029d10:	6163      	streq	r3, [r4, #20]
 8029d12:	61e2      	streq	r2, [r4, #28]
 8029d14:	f000 fe3e 	bl	802a994 <__tz_unlock>
 8029d18:	4620      	mov	r0, r4
 8029d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029d1e:	2301      	movs	r3, #1
 8029d20:	e795      	b.n	8029c4e <localtime_r+0x42>
 8029d22:	4638      	mov	r0, r7
 8029d24:	f000 fd86 	bl	802a834 <__tzcalc_limits>
 8029d28:	2800      	cmp	r0, #0
 8029d2a:	d19f      	bne.n	8029c6c <localtime_r+0x60>
 8029d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029d30:	e004      	b.n	8029d3c <localtime_r+0x130>
 8029d32:	4282      	cmp	r2, r0
 8029d34:	eb73 0101 	sbcs.w	r1, r3, r1
 8029d38:	da02      	bge.n	8029d40 <localtime_r+0x134>
 8029d3a:	2300      	movs	r3, #0
 8029d3c:	6223      	str	r3, [r4, #32]
 8029d3e:	e009      	b.n	8029d54 <localtime_r+0x148>
 8029d40:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8029d44:	4282      	cmp	r2, r0
 8029d46:	418b      	sbcs	r3, r1
 8029d48:	bfb4      	ite	lt
 8029d4a:	2301      	movlt	r3, #1
 8029d4c:	2300      	movge	r3, #0
 8029d4e:	6223      	str	r3, [r4, #32]
 8029d50:	2b00      	cmp	r3, #0
 8029d52:	d198      	bne.n	8029c86 <localtime_r+0x7a>
 8029d54:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8029d56:	e797      	b.n	8029c88 <localtime_r+0x7c>
 8029d58:	2b00      	cmp	r3, #0
 8029d5a:	daaf      	bge.n	8029cbc <localtime_r+0xb0>
 8029d5c:	3901      	subs	r1, #1
 8029d5e:	6061      	str	r1, [r4, #4]
 8029d60:	333c      	adds	r3, #60	@ 0x3c
 8029d62:	e7aa      	b.n	8029cba <localtime_r+0xae>
 8029d64:	2b00      	cmp	r3, #0
 8029d66:	dab0      	bge.n	8029cca <localtime_r+0xbe>
 8029d68:	3a01      	subs	r2, #1
 8029d6a:	60a2      	str	r2, [r4, #8]
 8029d6c:	333c      	adds	r3, #60	@ 0x3c
 8029d6e:	e7ab      	b.n	8029cc8 <localtime_r+0xbc>
 8029d70:	2b00      	cmp	r3, #0
 8029d72:	dacf      	bge.n	8029d14 <localtime_r+0x108>
 8029d74:	69e2      	ldr	r2, [r4, #28]
 8029d76:	3a01      	subs	r2, #1
 8029d78:	61e2      	str	r2, [r4, #28]
 8029d7a:	69a2      	ldr	r2, [r4, #24]
 8029d7c:	3a01      	subs	r2, #1
 8029d7e:	bf48      	it	mi
 8029d80:	2206      	movmi	r2, #6
 8029d82:	61a2      	str	r2, [r4, #24]
 8029d84:	68e2      	ldr	r2, [r4, #12]
 8029d86:	3318      	adds	r3, #24
 8029d88:	3a01      	subs	r2, #1
 8029d8a:	60e2      	str	r2, [r4, #12]
 8029d8c:	60a3      	str	r3, [r4, #8]
 8029d8e:	2a00      	cmp	r2, #0
 8029d90:	d1c0      	bne.n	8029d14 <localtime_r+0x108>
 8029d92:	6923      	ldr	r3, [r4, #16]
 8029d94:	3b01      	subs	r3, #1
 8029d96:	d405      	bmi.n	8029da4 <localtime_r+0x198>
 8029d98:	6123      	str	r3, [r4, #16]
 8029d9a:	6923      	ldr	r3, [r4, #16]
 8029d9c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8029da0:	60e3      	str	r3, [r4, #12]
 8029da2:	e7b7      	b.n	8029d14 <localtime_r+0x108>
 8029da4:	230b      	movs	r3, #11
 8029da6:	6123      	str	r3, [r4, #16]
 8029da8:	6963      	ldr	r3, [r4, #20]
 8029daa:	1e5a      	subs	r2, r3, #1
 8029dac:	6162      	str	r2, [r4, #20]
 8029dae:	0792      	lsls	r2, r2, #30
 8029db0:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8029db4:	d105      	bne.n	8029dc2 <localtime_r+0x1b6>
 8029db6:	2164      	movs	r1, #100	@ 0x64
 8029db8:	fb93 f2f1 	sdiv	r2, r3, r1
 8029dbc:	fb01 3212 	mls	r2, r1, r2, r3
 8029dc0:	b962      	cbnz	r2, 8029ddc <localtime_r+0x1d0>
 8029dc2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8029dc6:	fb93 f1f2 	sdiv	r1, r3, r2
 8029dca:	fb02 3311 	mls	r3, r2, r1, r3
 8029dce:	fab3 f383 	clz	r3, r3
 8029dd2:	095b      	lsrs	r3, r3, #5
 8029dd4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8029dd8:	61e3      	str	r3, [r4, #28]
 8029dda:	e7de      	b.n	8029d9a <localtime_r+0x18e>
 8029ddc:	2301      	movs	r3, #1
 8029dde:	e7f9      	b.n	8029dd4 <localtime_r+0x1c8>
 8029de0:	08038204 	.word	0x08038204
 8029de4:	20018180 	.word	0x20018180

08029de8 <iso_year_adjust>:
 8029de8:	6942      	ldr	r2, [r0, #20]
 8029dea:	2a00      	cmp	r2, #0
 8029dec:	f240 736c 	movw	r3, #1900	@ 0x76c
 8029df0:	bfa8      	it	ge
 8029df2:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 8029df6:	4413      	add	r3, r2
 8029df8:	0792      	lsls	r2, r2, #30
 8029dfa:	d105      	bne.n	8029e08 <iso_year_adjust+0x20>
 8029dfc:	2164      	movs	r1, #100	@ 0x64
 8029dfe:	fb93 f2f1 	sdiv	r2, r3, r1
 8029e02:	fb01 3212 	mls	r2, r1, r2, r3
 8029e06:	b9ca      	cbnz	r2, 8029e3c <iso_year_adjust+0x54>
 8029e08:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8029e0c:	fb93 f1f2 	sdiv	r1, r3, r2
 8029e10:	fb02 3311 	mls	r3, r2, r1, r3
 8029e14:	fab3 f383 	clz	r3, r3
 8029e18:	095b      	lsrs	r3, r3, #5
 8029e1a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8029e1e:	0040      	lsls	r0, r0, #1
 8029e20:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8029e24:	4418      	add	r0, r3
 8029e26:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 8029e2a:	4298      	cmp	r0, r3
 8029e2c:	d027      	beq.n	8029e7e <iso_year_adjust+0x96>
 8029e2e:	dc11      	bgt.n	8029e54 <iso_year_adjust+0x6c>
 8029e30:	2801      	cmp	r0, #1
 8029e32:	dc0a      	bgt.n	8029e4a <iso_year_adjust+0x62>
 8029e34:	43c0      	mvns	r0, r0
 8029e36:	0fc0      	lsrs	r0, r0, #31
 8029e38:	4240      	negs	r0, r0
 8029e3a:	4770      	bx	lr
 8029e3c:	2301      	movs	r3, #1
 8029e3e:	e7ec      	b.n	8029e1a <iso_year_adjust+0x32>
 8029e40:	4b10      	ldr	r3, [pc, #64]	@ (8029e84 <iso_year_adjust+0x9c>)
 8029e42:	40c3      	lsrs	r3, r0
 8029e44:	f343 0000 	sbfx	r0, r3, #0, #1
 8029e48:	4770      	bx	lr
 8029e4a:	380a      	subs	r0, #10
 8029e4c:	2817      	cmp	r0, #23
 8029e4e:	d9f7      	bls.n	8029e40 <iso_year_adjust+0x58>
 8029e50:	2000      	movs	r0, #0
 8029e52:	4770      	bx	lr
 8029e54:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 8029e58:	4298      	cmp	r0, r3
 8029e5a:	dc06      	bgt.n	8029e6a <iso_year_adjust+0x82>
 8029e5c:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 8029e60:	4298      	cmp	r0, r3
 8029e62:	bfd4      	ite	le
 8029e64:	2000      	movle	r0, #0
 8029e66:	2001      	movgt	r0, #1
 8029e68:	4770      	bx	lr
 8029e6a:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 8029e6e:	3802      	subs	r0, #2
 8029e70:	2815      	cmp	r0, #21
 8029e72:	d8ed      	bhi.n	8029e50 <iso_year_adjust+0x68>
 8029e74:	4b04      	ldr	r3, [pc, #16]	@ (8029e88 <iso_year_adjust+0xa0>)
 8029e76:	40c3      	lsrs	r3, r0
 8029e78:	f003 0001 	and.w	r0, r3, #1
 8029e7c:	4770      	bx	lr
 8029e7e:	2001      	movs	r0, #1
 8029e80:	4770      	bx	lr
 8029e82:	bf00      	nop
 8029e84:	00cc00cf 	.word	0x00cc00cf
 8029e88:	002a001f 	.word	0x002a001f

08029e8c <__strftime.isra.0>:
 8029e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e90:	b08f      	sub	sp, #60	@ 0x3c
 8029e92:	461e      	mov	r6, r3
 8029e94:	2300      	movs	r3, #0
 8029e96:	4607      	mov	r7, r0
 8029e98:	460d      	mov	r5, r1
 8029e9a:	9302      	str	r3, [sp, #8]
 8029e9c:	461c      	mov	r4, r3
 8029e9e:	7813      	ldrb	r3, [r2, #0]
 8029ea0:	2b00      	cmp	r3, #0
 8029ea2:	f000 84ae 	beq.w	802a802 <__strftime.isra.0+0x976>
 8029ea6:	2b25      	cmp	r3, #37	@ 0x25
 8029ea8:	d11f      	bne.n	8029eea <__strftime.isra.0+0x5e>
 8029eaa:	f892 9001 	ldrb.w	r9, [r2, #1]
 8029eae:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 8029eb2:	d024      	beq.n	8029efe <__strftime.isra.0+0x72>
 8029eb4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8029eb8:	d021      	beq.n	8029efe <__strftime.isra.0+0x72>
 8029eba:	f102 0801 	add.w	r8, r2, #1
 8029ebe:	f04f 0900 	mov.w	r9, #0
 8029ec2:	f898 2000 	ldrb.w	r2, [r8]
 8029ec6:	3a31      	subs	r2, #49	@ 0x31
 8029ec8:	2a08      	cmp	r2, #8
 8029eca:	d81b      	bhi.n	8029f04 <__strftime.isra.0+0x78>
 8029ecc:	220a      	movs	r2, #10
 8029ece:	4640      	mov	r0, r8
 8029ed0:	a906      	add	r1, sp, #24
 8029ed2:	f008 f88b 	bl	8031fec <strtoul>
 8029ed6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8029eda:	4602      	mov	r2, r0
 8029edc:	f898 1000 	ldrb.w	r1, [r8]
 8029ee0:	2945      	cmp	r1, #69	@ 0x45
 8029ee2:	d111      	bne.n	8029f08 <__strftime.isra.0+0x7c>
 8029ee4:	f108 0801 	add.w	r8, r8, #1
 8029ee8:	e010      	b.n	8029f0c <__strftime.isra.0+0x80>
 8029eea:	1e69      	subs	r1, r5, #1
 8029eec:	42a1      	cmp	r1, r4
 8029eee:	f240 815d 	bls.w	802a1ac <__strftime.isra.0+0x320>
 8029ef2:	553b      	strb	r3, [r7, r4]
 8029ef4:	3201      	adds	r2, #1
 8029ef6:	f104 0a01 	add.w	sl, r4, #1
 8029efa:	4654      	mov	r4, sl
 8029efc:	e7cf      	b.n	8029e9e <__strftime.isra.0+0x12>
 8029efe:	f102 0802 	add.w	r8, r2, #2
 8029f02:	e7de      	b.n	8029ec2 <__strftime.isra.0+0x36>
 8029f04:	2200      	movs	r2, #0
 8029f06:	e7e9      	b.n	8029edc <__strftime.isra.0+0x50>
 8029f08:	294f      	cmp	r1, #79	@ 0x4f
 8029f0a:	d0eb      	beq.n	8029ee4 <__strftime.isra.0+0x58>
 8029f0c:	f898 0000 	ldrb.w	r0, [r8]
 8029f10:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 8029f14:	2955      	cmp	r1, #85	@ 0x55
 8029f16:	f200 8149 	bhi.w	802a1ac <__strftime.isra.0+0x320>
 8029f1a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8029f1e:	046a      	.short	0x046a
 8029f20:	01470147 	.word	0x01470147
 8029f24:	01470147 	.word	0x01470147
 8029f28:	01470147 	.word	0x01470147
 8029f2c:	01470147 	.word	0x01470147
 8029f30:	01470147 	.word	0x01470147
 8029f34:	01470147 	.word	0x01470147
 8029f38:	01470147 	.word	0x01470147
 8029f3c:	01470147 	.word	0x01470147
 8029f40:	01470147 	.word	0x01470147
 8029f44:	01470147 	.word	0x01470147
 8029f48:	01470147 	.word	0x01470147
 8029f4c:	01470147 	.word	0x01470147
 8029f50:	01470147 	.word	0x01470147
 8029f54:	00750147 	.word	0x00750147
 8029f58:	00dc00a3 	.word	0x00dc00a3
 8029f5c:	01470128 	.word	0x01470128
 8029f60:	01cb0159 	.word	0x01cb0159
 8029f64:	02590252 	.word	0x02590252
 8029f68:	01470147 	.word	0x01470147
 8029f6c:	02710147 	.word	0x02710147
 8029f70:	01470147 	.word	0x01470147
 8029f74:	0147027c 	.word	0x0147027c
 8029f78:	033402ac 	.word	0x033402ac
 8029f7c:	036a033e 	.word	0x036a033e
 8029f80:	03d80372 	.word	0x03d80372
 8029f84:	03ee00d8 	.word	0x03ee00d8
 8029f88:	01470440 	.word	0x01470440
 8029f8c:	01470147 	.word	0x01470147
 8029f90:	01470147 	.word	0x01470147
 8029f94:	00560147 	.word	0x00560147
 8029f98:	00ba008d 	.word	0x00ba008d
 8029f9c:	011d011d 	.word	0x011d011d
 8029fa0:	017e0147 	.word	0x017e0147
 8029fa4:	0147008d 	.word	0x0147008d
 8029fa8:	0252026a 	.word	0x0252026a
 8029fac:	026e0259 	.word	0x026e0259
 8029fb0:	01470273 	.word	0x01470273
 8029fb4:	02a5027c 	.word	0x02a5027c
 8029fb8:	02b500d0 	.word	0x02b500d0
 8029fbc:	035d0336 	.word	0x035d0336
 8029fc0:	03cf03a4 	.word	0x03cf03a4
 8029fc4:	03e000d4 	.word	0x03e000d4
 8029fc8:	0403      	.short	0x0403
 8029fca:	69b3      	ldr	r3, [r6, #24]
 8029fcc:	4aad      	ldr	r2, [pc, #692]	@ (802a284 <__strftime.isra.0+0x3f8>)
 8029fce:	3318      	adds	r3, #24
 8029fd0:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8029fd4:	4658      	mov	r0, fp
 8029fd6:	f7e6 f963 	bl	80102a0 <strlen>
 8029fda:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8029fde:	eb04 0a00 	add.w	sl, r4, r0
 8029fe2:	1e6b      	subs	r3, r5, #1
 8029fe4:	45a2      	cmp	sl, r4
 8029fe6:	d107      	bne.n	8029ff8 <__strftime.isra.0+0x16c>
 8029fe8:	f898 3000 	ldrb.w	r3, [r8]
 8029fec:	2b00      	cmp	r3, #0
 8029fee:	f000 8409 	beq.w	802a804 <__strftime.isra.0+0x978>
 8029ff2:	f108 0201 	add.w	r2, r8, #1
 8029ff6:	e780      	b.n	8029efa <__strftime.isra.0+0x6e>
 8029ff8:	42a3      	cmp	r3, r4
 8029ffa:	f240 80d7 	bls.w	802a1ac <__strftime.isra.0+0x320>
 8029ffe:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802a002:	553a      	strb	r2, [r7, r4]
 802a004:	3401      	adds	r4, #1
 802a006:	e7ed      	b.n	8029fe4 <__strftime.isra.0+0x158>
 802a008:	69b2      	ldr	r2, [r6, #24]
 802a00a:	4b9e      	ldr	r3, [pc, #632]	@ (802a284 <__strftime.isra.0+0x3f8>)
 802a00c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802a010:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802a014:	4658      	mov	r0, fp
 802a016:	f7e6 f943 	bl	80102a0 <strlen>
 802a01a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802a01e:	eb04 0a00 	add.w	sl, r4, r0
 802a022:	1e6b      	subs	r3, r5, #1
 802a024:	4554      	cmp	r4, sl
 802a026:	d0df      	beq.n	8029fe8 <__strftime.isra.0+0x15c>
 802a028:	42a3      	cmp	r3, r4
 802a02a:	f240 80bf 	bls.w	802a1ac <__strftime.isra.0+0x320>
 802a02e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802a032:	553a      	strb	r2, [r7, r4]
 802a034:	3401      	adds	r4, #1
 802a036:	e7f5      	b.n	802a024 <__strftime.isra.0+0x198>
 802a038:	4b92      	ldr	r3, [pc, #584]	@ (802a284 <__strftime.isra.0+0x3f8>)
 802a03a:	6932      	ldr	r2, [r6, #16]
 802a03c:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 802a040:	4658      	mov	r0, fp
 802a042:	f7e6 f92d 	bl	80102a0 <strlen>
 802a046:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802a04a:	eb04 0a00 	add.w	sl, r4, r0
 802a04e:	1e6b      	subs	r3, r5, #1
 802a050:	45a2      	cmp	sl, r4
 802a052:	d0c9      	beq.n	8029fe8 <__strftime.isra.0+0x15c>
 802a054:	42a3      	cmp	r3, r4
 802a056:	f240 80a9 	bls.w	802a1ac <__strftime.isra.0+0x320>
 802a05a:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802a05e:	553a      	strb	r2, [r7, r4]
 802a060:	3401      	adds	r4, #1
 802a062:	e7f5      	b.n	802a050 <__strftime.isra.0+0x1c4>
 802a064:	6933      	ldr	r3, [r6, #16]
 802a066:	4a87      	ldr	r2, [pc, #540]	@ (802a284 <__strftime.isra.0+0x3f8>)
 802a068:	330c      	adds	r3, #12
 802a06a:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802a06e:	4658      	mov	r0, fp
 802a070:	f7e6 f916 	bl	80102a0 <strlen>
 802a074:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802a078:	eb04 0a00 	add.w	sl, r4, r0
 802a07c:	1e6b      	subs	r3, r5, #1
 802a07e:	45a2      	cmp	sl, r4
 802a080:	d0b2      	beq.n	8029fe8 <__strftime.isra.0+0x15c>
 802a082:	42a3      	cmp	r3, r4
 802a084:	f240 8092 	bls.w	802a1ac <__strftime.isra.0+0x320>
 802a088:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802a08c:	553a      	strb	r2, [r7, r4]
 802a08e:	3401      	adds	r4, #1
 802a090:	e7f5      	b.n	802a07e <__strftime.isra.0+0x1f2>
 802a092:	4b7c      	ldr	r3, [pc, #496]	@ (802a284 <__strftime.isra.0+0x3f8>)
 802a094:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802a098:	4650      	mov	r0, sl
 802a09a:	f7e6 f901 	bl	80102a0 <strlen>
 802a09e:	f89a 3000 	ldrb.w	r3, [sl]
 802a0a2:	2b00      	cmp	r3, #0
 802a0a4:	f000 8341 	beq.w	802a72a <__strftime.isra.0+0x89e>
 802a0a8:	4633      	mov	r3, r6
 802a0aa:	4652      	mov	r2, sl
 802a0ac:	1b29      	subs	r1, r5, r4
 802a0ae:	1938      	adds	r0, r7, r4
 802a0b0:	f7ff feec 	bl	8029e8c <__strftime.isra.0>
 802a0b4:	2800      	cmp	r0, #0
 802a0b6:	dd79      	ble.n	802a1ac <__strftime.isra.0+0x320>
 802a0b8:	eb04 0a00 	add.w	sl, r4, r0
 802a0bc:	e794      	b.n	8029fe8 <__strftime.isra.0+0x15c>
 802a0be:	4b71      	ldr	r3, [pc, #452]	@ (802a284 <__strftime.isra.0+0x3f8>)
 802a0c0:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802a0c4:	e7e8      	b.n	802a098 <__strftime.isra.0+0x20c>
 802a0c6:	4b6f      	ldr	r3, [pc, #444]	@ (802a284 <__strftime.isra.0+0x3f8>)
 802a0c8:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802a0cc:	e7e4      	b.n	802a098 <__strftime.isra.0+0x20c>
 802a0ce:	4b6d      	ldr	r3, [pc, #436]	@ (802a284 <__strftime.isra.0+0x3f8>)
 802a0d0:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802a0d4:	e7e0      	b.n	802a098 <__strftime.isra.0+0x20c>
 802a0d6:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802a0da:	496b      	ldr	r1, [pc, #428]	@ (802a288 <__strftime.isra.0+0x3fc>)
 802a0dc:	458a      	cmp	sl, r1
 802a0de:	bfac      	ite	ge
 802a0e0:	f04f 0b00 	movge.w	fp, #0
 802a0e4:	f04f 0b01 	movlt.w	fp, #1
 802a0e8:	f1ba 0f00 	cmp.w	sl, #0
 802a0ec:	db12      	blt.n	802a114 <__strftime.isra.0+0x288>
 802a0ee:	2064      	movs	r0, #100	@ 0x64
 802a0f0:	fb9a f0f0 	sdiv	r0, sl, r0
 802a0f4:	3013      	adds	r0, #19
 802a0f6:	f1b9 0f00 	cmp.w	r9, #0
 802a0fa:	d015      	beq.n	802a128 <__strftime.isra.0+0x29c>
 802a0fc:	2863      	cmp	r0, #99	@ 0x63
 802a0fe:	dd28      	ble.n	802a152 <__strftime.isra.0+0x2c6>
 802a100:	4b62      	ldr	r3, [pc, #392]	@ (802a28c <__strftime.isra.0+0x400>)
 802a102:	4963      	ldr	r1, [pc, #396]	@ (802a290 <__strftime.isra.0+0x404>)
 802a104:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802a108:	bf0c      	ite	eq
 802a10a:	469c      	moveq	ip, r3
 802a10c:	468c      	movne	ip, r1
 802a10e:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802a2ac <__strftime.isra.0+0x420>
 802a112:	e00d      	b.n	802a130 <__strftime.isra.0+0x2a4>
 802a114:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802a118:	9203      	str	r2, [sp, #12]
 802a11a:	f000 ff88 	bl	802b02e <abs>
 802a11e:	2164      	movs	r1, #100	@ 0x64
 802a120:	9a03      	ldr	r2, [sp, #12]
 802a122:	fb90 f0f1 	sdiv	r0, r0, r1
 802a126:	e7e6      	b.n	802a0f6 <__strftime.isra.0+0x26a>
 802a128:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802a290 <__strftime.isra.0+0x404>
 802a12c:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802a2b0 <__strftime.isra.0+0x424>
 802a130:	4b58      	ldr	r3, [pc, #352]	@ (802a294 <__strftime.isra.0+0x408>)
 802a132:	9001      	str	r0, [sp, #4]
 802a134:	2a02      	cmp	r2, #2
 802a136:	bf2c      	ite	cs
 802a138:	ebcb 0102 	rsbcs	r1, fp, r2
 802a13c:	f1cb 0102 	rsbcc	r1, fp, #2
 802a140:	4a51      	ldr	r2, [pc, #324]	@ (802a288 <__strftime.isra.0+0x3fc>)
 802a142:	9100      	str	r1, [sp, #0]
 802a144:	4592      	cmp	sl, r2
 802a146:	bfa8      	it	ge
 802a148:	4663      	movge	r3, ip
 802a14a:	4672      	mov	r2, lr
 802a14c:	1b29      	subs	r1, r5, r4
 802a14e:	1938      	adds	r0, r7, r4
 802a150:	e023      	b.n	802a19a <__strftime.isra.0+0x30e>
 802a152:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802a290 <__strftime.isra.0+0x404>
 802a156:	e7da      	b.n	802a10e <__strftime.isra.0+0x282>
 802a158:	494f      	ldr	r1, [pc, #316]	@ (802a298 <__strftime.isra.0+0x40c>)
 802a15a:	4a50      	ldr	r2, [pc, #320]	@ (802a29c <__strftime.isra.0+0x410>)
 802a15c:	68f3      	ldr	r3, [r6, #12]
 802a15e:	2864      	cmp	r0, #100	@ 0x64
 802a160:	bf18      	it	ne
 802a162:	460a      	movne	r2, r1
 802a164:	1b29      	subs	r1, r5, r4
 802a166:	1938      	adds	r0, r7, r4
 802a168:	f002 f986 	bl	802c478 <sniprintf>
 802a16c:	e017      	b.n	802a19e <__strftime.isra.0+0x312>
 802a16e:	6970      	ldr	r0, [r6, #20]
 802a170:	6933      	ldr	r3, [r6, #16]
 802a172:	2800      	cmp	r0, #0
 802a174:	f103 0a01 	add.w	sl, r3, #1
 802a178:	eb07 0b04 	add.w	fp, r7, r4
 802a17c:	68f3      	ldr	r3, [r6, #12]
 802a17e:	eba5 0904 	sub.w	r9, r5, r4
 802a182:	db19      	blt.n	802a1b8 <__strftime.isra.0+0x32c>
 802a184:	2264      	movs	r2, #100	@ 0x64
 802a186:	fb90 fcf2 	sdiv	ip, r0, r2
 802a18a:	fb02 001c 	mls	r0, r2, ip, r0
 802a18e:	4a44      	ldr	r2, [pc, #272]	@ (802a2a0 <__strftime.isra.0+0x414>)
 802a190:	e9cd 3000 	strd	r3, r0, [sp]
 802a194:	4649      	mov	r1, r9
 802a196:	4653      	mov	r3, sl
 802a198:	4658      	mov	r0, fp
 802a19a:	f002 f96d 	bl	802c478 <sniprintf>
 802a19e:	2800      	cmp	r0, #0
 802a1a0:	db04      	blt.n	802a1ac <__strftime.isra.0+0x320>
 802a1a2:	eb00 0a04 	add.w	sl, r0, r4
 802a1a6:	4555      	cmp	r5, sl
 802a1a8:	f63f af1e 	bhi.w	8029fe8 <__strftime.isra.0+0x15c>
 802a1ac:	f04f 0a00 	mov.w	sl, #0
 802a1b0:	4650      	mov	r0, sl
 802a1b2:	b00f      	add	sp, #60	@ 0x3c
 802a1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a1b8:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802a1bc:	9303      	str	r3, [sp, #12]
 802a1be:	f000 ff36 	bl	802b02e <abs>
 802a1c2:	2264      	movs	r2, #100	@ 0x64
 802a1c4:	9b03      	ldr	r3, [sp, #12]
 802a1c6:	fb90 fcf2 	sdiv	ip, r0, r2
 802a1ca:	fb0c 0012 	mls	r0, ip, r2, r0
 802a1ce:	e7de      	b.n	802a18e <__strftime.isra.0+0x302>
 802a1d0:	2125      	movs	r1, #37	@ 0x25
 802a1d2:	f88d 1018 	strb.w	r1, [sp, #24]
 802a1d6:	f1b9 0f00 	cmp.w	r9, #0
 802a1da:	d00b      	beq.n	802a1f4 <__strftime.isra.0+0x368>
 802a1dc:	2a05      	cmp	r2, #5
 802a1de:	f88d 9019 	strb.w	r9, [sp, #25]
 802a1e2:	d817      	bhi.n	802a214 <__strftime.isra.0+0x388>
 802a1e4:	f10d 001a 	add.w	r0, sp, #26
 802a1e8:	492e      	ldr	r1, [pc, #184]	@ (802a2a4 <__strftime.isra.0+0x418>)
 802a1ea:	f000 fe83 	bl	802aef4 <strcpy>
 802a1ee:	4633      	mov	r3, r6
 802a1f0:	aa06      	add	r2, sp, #24
 802a1f2:	e75b      	b.n	802a0ac <__strftime.isra.0+0x220>
 802a1f4:	232b      	movs	r3, #43	@ 0x2b
 802a1f6:	f88d 3019 	strb.w	r3, [sp, #25]
 802a1fa:	2304      	movs	r3, #4
 802a1fc:	4a2a      	ldr	r2, [pc, #168]	@ (802a2a8 <__strftime.isra.0+0x41c>)
 802a1fe:	211e      	movs	r1, #30
 802a200:	f10d 001a 	add.w	r0, sp, #26
 802a204:	f002 f938 	bl	802c478 <sniprintf>
 802a208:	2800      	cmp	r0, #0
 802a20a:	ddeb      	ble.n	802a1e4 <__strftime.isra.0+0x358>
 802a20c:	f10d 031a 	add.w	r3, sp, #26
 802a210:	4418      	add	r0, r3
 802a212:	e7e9      	b.n	802a1e8 <__strftime.isra.0+0x35c>
 802a214:	1f93      	subs	r3, r2, #6
 802a216:	d0e5      	beq.n	802a1e4 <__strftime.isra.0+0x358>
 802a218:	e7f0      	b.n	802a1fc <__strftime.isra.0+0x370>
 802a21a:	4630      	mov	r0, r6
 802a21c:	f7ff fde4 	bl	8029de8 <iso_year_adjust>
 802a220:	4682      	mov	sl, r0
 802a222:	6970      	ldr	r0, [r6, #20]
 802a224:	2800      	cmp	r0, #0
 802a226:	db11      	blt.n	802a24c <__strftime.isra.0+0x3c0>
 802a228:	2364      	movs	r3, #100	@ 0x64
 802a22a:	fb90 f2f3 	sdiv	r2, r0, r3
 802a22e:	fb03 0012 	mls	r0, r3, r2, r0
 802a232:	2364      	movs	r3, #100	@ 0x64
 802a234:	4482      	add	sl, r0
 802a236:	fb9a f2f3 	sdiv	r2, sl, r3
 802a23a:	fb03 aa12 	mls	sl, r3, r2, sl
 802a23e:	449a      	add	sl, r3
 802a240:	fbba f2f3 	udiv	r2, sl, r3
 802a244:	fb03 a312 	mls	r3, r3, r2, sl
 802a248:	4a14      	ldr	r2, [pc, #80]	@ (802a29c <__strftime.isra.0+0x410>)
 802a24a:	e78b      	b.n	802a164 <__strftime.isra.0+0x2d8>
 802a24c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802a250:	f000 feed 	bl	802b02e <abs>
 802a254:	2364      	movs	r3, #100	@ 0x64
 802a256:	f1ba 0f00 	cmp.w	sl, #0
 802a25a:	fb90 f2f3 	sdiv	r2, r0, r3
 802a25e:	fb02 0013 	mls	r0, r2, r3, r0
 802a262:	da07      	bge.n	802a274 <__strftime.isra.0+0x3e8>
 802a264:	6972      	ldr	r2, [r6, #20]
 802a266:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802a26a:	429a      	cmp	r2, r3
 802a26c:	bfb8      	it	lt
 802a26e:	f04f 0a01 	movlt.w	sl, #1
 802a272:	e7de      	b.n	802a232 <__strftime.isra.0+0x3a6>
 802a274:	d0dd      	beq.n	802a232 <__strftime.isra.0+0x3a6>
 802a276:	6972      	ldr	r2, [r6, #20]
 802a278:	4b03      	ldr	r3, [pc, #12]	@ (802a288 <__strftime.isra.0+0x3fc>)
 802a27a:	429a      	cmp	r2, r3
 802a27c:	bfb8      	it	lt
 802a27e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802a282:	e7d6      	b.n	802a232 <__strftime.isra.0+0x3a6>
 802a284:	08038450 	.word	0x08038450
 802a288:	fffff894 	.word	0xfffff894
 802a28c:	08038273 	.word	0x08038273
 802a290:	0803818e 	.word	0x0803818e
 802a294:	08038275 	.word	0x08038275
 802a298:	08038277 	.word	0x08038277
 802a29c:	08038285 	.word	0x08038285
 802a2a0:	0803827b 	.word	0x0803827b
 802a2a4:	0803828e 	.word	0x0803828e
 802a2a8:	0803828a 	.word	0x0803828a
 802a2ac:	0803826b 	.word	0x0803826b
 802a2b0:	08038264 	.word	0x08038264
 802a2b4:	6971      	ldr	r1, [r6, #20]
 802a2b6:	48bc      	ldr	r0, [pc, #752]	@ (802a5a8 <__strftime.isra.0+0x71c>)
 802a2b8:	9205      	str	r2, [sp, #20]
 802a2ba:	4281      	cmp	r1, r0
 802a2bc:	bfac      	ite	ge
 802a2be:	2300      	movge	r3, #0
 802a2c0:	2301      	movlt	r3, #1
 802a2c2:	4630      	mov	r0, r6
 802a2c4:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802a2c8:	f7ff fd8e 	bl	8029de8 <iso_year_adjust>
 802a2cc:	9904      	ldr	r1, [sp, #16]
 802a2ce:	9a05      	ldr	r2, [sp, #20]
 802a2d0:	2900      	cmp	r1, #0
 802a2d2:	4682      	mov	sl, r0
 802a2d4:	db3a      	blt.n	802a34c <__strftime.isra.0+0x4c0>
 802a2d6:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802a2da:	fb91 fbfb 	sdiv	fp, r1, fp
 802a2de:	f10b 0b13 	add.w	fp, fp, #19
 802a2e2:	6970      	ldr	r0, [r6, #20]
 802a2e4:	2800      	cmp	r0, #0
 802a2e6:	db3e      	blt.n	802a366 <__strftime.isra.0+0x4da>
 802a2e8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802a2ec:	f1ba 0f00 	cmp.w	sl, #0
 802a2f0:	fb90 fefc 	sdiv	lr, r0, ip
 802a2f4:	fb0c 001e 	mls	r0, ip, lr, r0
 802a2f8:	da4f      	bge.n	802a39a <__strftime.isra.0+0x50e>
 802a2fa:	4482      	add	sl, r0
 802a2fc:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802a300:	d157      	bne.n	802a3b2 <__strftime.isra.0+0x526>
 802a302:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802a306:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802a30a:	9b03      	ldr	r3, [sp, #12]
 802a30c:	2164      	movs	r1, #100	@ 0x64
 802a30e:	fb01 aa0b 	mla	sl, r1, fp, sl
 802a312:	2b00      	cmp	r3, #0
 802a314:	f040 81f7 	bne.w	802a706 <__strftime.isra.0+0x87a>
 802a318:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802a31c:	d104      	bne.n	802a328 <__strftime.isra.0+0x49c>
 802a31e:	f242 710f 	movw	r1, #9999	@ 0x270f
 802a322:	458a      	cmp	sl, r1
 802a324:	f200 8275 	bhi.w	802a812 <__strftime.isra.0+0x986>
 802a328:	a906      	add	r1, sp, #24
 802a32a:	2025      	movs	r0, #37	@ 0x25
 802a32c:	7008      	strb	r0, [r1, #0]
 802a32e:	f1b9 0f00 	cmp.w	r9, #0
 802a332:	f040 81f3 	bne.w	802a71c <__strftime.isra.0+0x890>
 802a336:	1c48      	adds	r0, r1, #1
 802a338:	499c      	ldr	r1, [pc, #624]	@ (802a5ac <__strftime.isra.0+0x720>)
 802a33a:	9203      	str	r2, [sp, #12]
 802a33c:	f000 fdda 	bl	802aef4 <strcpy>
 802a340:	9a03      	ldr	r2, [sp, #12]
 802a342:	f8cd a000 	str.w	sl, [sp]
 802a346:	4613      	mov	r3, r2
 802a348:	aa06      	add	r2, sp, #24
 802a34a:	e098      	b.n	802a47e <__strftime.isra.0+0x5f2>
 802a34c:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802a350:	9205      	str	r2, [sp, #20]
 802a352:	9104      	str	r1, [sp, #16]
 802a354:	f000 fe6b 	bl	802b02e <abs>
 802a358:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802a35c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802a360:	fb90 fbfc 	sdiv	fp, r0, ip
 802a364:	e7bd      	b.n	802a2e2 <__strftime.isra.0+0x456>
 802a366:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802a36a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802a36e:	f000 fe5e 	bl	802b02e <abs>
 802a372:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802a376:	f1ba 0f00 	cmp.w	sl, #0
 802a37a:	fb90 fefc 	sdiv	lr, r0, ip
 802a37e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802a382:	fb0e 001c 	mls	r0, lr, ip, r0
 802a386:	da08      	bge.n	802a39a <__strftime.isra.0+0x50e>
 802a388:	6971      	ldr	r1, [r6, #20]
 802a38a:	4b89      	ldr	r3, [pc, #548]	@ (802a5b0 <__strftime.isra.0+0x724>)
 802a38c:	4299      	cmp	r1, r3
 802a38e:	dab4      	bge.n	802a2fa <__strftime.isra.0+0x46e>
 802a390:	f04f 0a01 	mov.w	sl, #1
 802a394:	f8cd a00c 	str.w	sl, [sp, #12]
 802a398:	e7af      	b.n	802a2fa <__strftime.isra.0+0x46e>
 802a39a:	f1ba 0f00 	cmp.w	sl, #0
 802a39e:	d0ac      	beq.n	802a2fa <__strftime.isra.0+0x46e>
 802a3a0:	4b81      	ldr	r3, [pc, #516]	@ (802a5a8 <__strftime.isra.0+0x71c>)
 802a3a2:	4299      	cmp	r1, r3
 802a3a4:	9b03      	ldr	r3, [sp, #12]
 802a3a6:	bfbc      	itt	lt
 802a3a8:	2301      	movlt	r3, #1
 802a3aa:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802a3ae:	9303      	str	r3, [sp, #12]
 802a3b0:	e7a3      	b.n	802a2fa <__strftime.isra.0+0x46e>
 802a3b2:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802a3b6:	bf04      	itt	eq
 802a3b8:	f10b 0b01 	addeq.w	fp, fp, #1
 802a3bc:	f04f 0a00 	moveq.w	sl, #0
 802a3c0:	e7a3      	b.n	802a30a <__strftime.isra.0+0x47e>
 802a3c2:	497c      	ldr	r1, [pc, #496]	@ (802a5b4 <__strftime.isra.0+0x728>)
 802a3c4:	4a7c      	ldr	r2, [pc, #496]	@ (802a5b8 <__strftime.isra.0+0x72c>)
 802a3c6:	68b3      	ldr	r3, [r6, #8]
 802a3c8:	286b      	cmp	r0, #107	@ 0x6b
 802a3ca:	bf18      	it	ne
 802a3cc:	460a      	movne	r2, r1
 802a3ce:	e6c9      	b.n	802a164 <__strftime.isra.0+0x2d8>
 802a3d0:	68b3      	ldr	r3, [r6, #8]
 802a3d2:	b163      	cbz	r3, 802a3ee <__strftime.isra.0+0x562>
 802a3d4:	2b0c      	cmp	r3, #12
 802a3d6:	d004      	beq.n	802a3e2 <__strftime.isra.0+0x556>
 802a3d8:	210c      	movs	r1, #12
 802a3da:	fb93 f2f1 	sdiv	r2, r3, r1
 802a3de:	fb01 3312 	mls	r3, r1, r2, r3
 802a3e2:	4975      	ldr	r1, [pc, #468]	@ (802a5b8 <__strftime.isra.0+0x72c>)
 802a3e4:	4a73      	ldr	r2, [pc, #460]	@ (802a5b4 <__strftime.isra.0+0x728>)
 802a3e6:	2849      	cmp	r0, #73	@ 0x49
 802a3e8:	bf18      	it	ne
 802a3ea:	460a      	movne	r2, r1
 802a3ec:	e6ba      	b.n	802a164 <__strftime.isra.0+0x2d8>
 802a3ee:	230c      	movs	r3, #12
 802a3f0:	e7f7      	b.n	802a3e2 <__strftime.isra.0+0x556>
 802a3f2:	69f3      	ldr	r3, [r6, #28]
 802a3f4:	4a71      	ldr	r2, [pc, #452]	@ (802a5bc <__strftime.isra.0+0x730>)
 802a3f6:	3301      	adds	r3, #1
 802a3f8:	e6b4      	b.n	802a164 <__strftime.isra.0+0x2d8>
 802a3fa:	6933      	ldr	r3, [r6, #16]
 802a3fc:	3301      	adds	r3, #1
 802a3fe:	e723      	b.n	802a248 <__strftime.isra.0+0x3bc>
 802a400:	6873      	ldr	r3, [r6, #4]
 802a402:	e721      	b.n	802a248 <__strftime.isra.0+0x3bc>
 802a404:	1e6b      	subs	r3, r5, #1
 802a406:	429c      	cmp	r4, r3
 802a408:	f4bf aed0 	bcs.w	802a1ac <__strftime.isra.0+0x320>
 802a40c:	f104 0a01 	add.w	sl, r4, #1
 802a410:	230a      	movs	r3, #10
 802a412:	553b      	strb	r3, [r7, r4]
 802a414:	e5e8      	b.n	8029fe8 <__strftime.isra.0+0x15c>
 802a416:	68b3      	ldr	r3, [r6, #8]
 802a418:	2b0b      	cmp	r3, #11
 802a41a:	4b69      	ldr	r3, [pc, #420]	@ (802a5c0 <__strftime.isra.0+0x734>)
 802a41c:	bfd4      	ite	le
 802a41e:	2200      	movle	r2, #0
 802a420:	2201      	movgt	r2, #1
 802a422:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802a426:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802a42a:	4658      	mov	r0, fp
 802a42c:	f7e5 ff38 	bl	80102a0 <strlen>
 802a430:	eb04 0a00 	add.w	sl, r4, r0
 802a434:	4863      	ldr	r0, [pc, #396]	@ (802a5c4 <__strftime.isra.0+0x738>)
 802a436:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802a43a:	1e69      	subs	r1, r5, #1
 802a43c:	45a2      	cmp	sl, r4
 802a43e:	f43f add3 	beq.w	8029fe8 <__strftime.isra.0+0x15c>
 802a442:	42a1      	cmp	r1, r4
 802a444:	f67f aeb2 	bls.w	802a1ac <__strftime.isra.0+0x320>
 802a448:	f898 2000 	ldrb.w	r2, [r8]
 802a44c:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802a450:	2a50      	cmp	r2, #80	@ 0x50
 802a452:	d106      	bne.n	802a462 <__strftime.isra.0+0x5d6>
 802a454:	5cc2      	ldrb	r2, [r0, r3]
 802a456:	f002 0203 	and.w	r2, r2, #3
 802a45a:	2a01      	cmp	r2, #1
 802a45c:	bf08      	it	eq
 802a45e:	3320      	addeq	r3, #32
 802a460:	b2db      	uxtb	r3, r3
 802a462:	553b      	strb	r3, [r7, r4]
 802a464:	3401      	adds	r4, #1
 802a466:	e7e9      	b.n	802a43c <__strftime.isra.0+0x5b0>
 802a468:	2203      	movs	r2, #3
 802a46a:	6933      	ldr	r3, [r6, #16]
 802a46c:	fb93 f3f2 	sdiv	r3, r3, r2
 802a470:	4a55      	ldr	r2, [pc, #340]	@ (802a5c8 <__strftime.isra.0+0x73c>)
 802a472:	3301      	adds	r3, #1
 802a474:	e676      	b.n	802a164 <__strftime.isra.0+0x2d8>
 802a476:	6873      	ldr	r3, [r6, #4]
 802a478:	9300      	str	r3, [sp, #0]
 802a47a:	68b3      	ldr	r3, [r6, #8]
 802a47c:	4a53      	ldr	r2, [pc, #332]	@ (802a5cc <__strftime.isra.0+0x740>)
 802a47e:	1b29      	subs	r1, r5, r4
 802a480:	1938      	adds	r0, r7, r4
 802a482:	f001 fff9 	bl	802c478 <sniprintf>
 802a486:	e68a      	b.n	802a19e <__strftime.isra.0+0x312>
 802a488:	6a33      	ldr	r3, [r6, #32]
 802a48a:	2b00      	cmp	r3, #0
 802a48c:	db78      	blt.n	802a580 <__strftime.isra.0+0x6f4>
 802a48e:	f000 fa7b 	bl	802a988 <__tz_lock>
 802a492:	9b02      	ldr	r3, [sp, #8]
 802a494:	b90b      	cbnz	r3, 802a49a <__strftime.isra.0+0x60e>
 802a496:	f000 fa83 	bl	802a9a0 <_tzset_unlocked>
 802a49a:	f007 fe73 	bl	8032184 <__gettzinfo>
 802a49e:	6a33      	ldr	r3, [r6, #32]
 802a4a0:	2b00      	cmp	r3, #0
 802a4a2:	bfd4      	ite	le
 802a4a4:	2200      	movle	r2, #0
 802a4a6:	2201      	movgt	r2, #1
 802a4a8:	2328      	movs	r3, #40	@ 0x28
 802a4aa:	fb02 3303 	mla	r3, r2, r3, r3
 802a4ae:	58c3      	ldr	r3, [r0, r3]
 802a4b0:	f1c3 0a00 	rsb	sl, r3, #0
 802a4b4:	f000 fa6e 	bl	802a994 <__tz_unlock>
 802a4b8:	2301      	movs	r3, #1
 802a4ba:	9302      	str	r3, [sp, #8]
 802a4bc:	6972      	ldr	r2, [r6, #20]
 802a4be:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802a4c2:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802a4c6:	f16c 0c00 	sbc.w	ip, ip, #0
 802a4ca:	f1bc 0f00 	cmp.w	ip, #0
 802a4ce:	eba5 0104 	sub.w	r1, r5, r4
 802a4d2:	eb07 0004 	add.w	r0, r7, r4
 802a4d6:	da02      	bge.n	802a4de <__strftime.isra.0+0x652>
 802a4d8:	3303      	adds	r3, #3
 802a4da:	f14c 0c00 	adc.w	ip, ip, #0
 802a4de:	089b      	lsrs	r3, r3, #2
 802a4e0:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802a4e4:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802a4e8:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802a4ec:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802a4f0:	fb9e fefb 	sdiv	lr, lr, fp
 802a4f4:	ebb3 030e 	subs.w	r3, r3, lr
 802a4f8:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802a4fc:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802a500:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802a504:	fb9e fefb 	sdiv	lr, lr, fp
 802a508:	eb13 030e 	adds.w	r3, r3, lr
 802a50c:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802a510:	3a46      	subs	r2, #70	@ 0x46
 802a512:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802a516:	fb0e f202 	mul.w	r2, lr, r2
 802a51a:	189b      	adds	r3, r3, r2
 802a51c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802a520:	69f2      	ldr	r2, [r6, #28]
 802a522:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802a526:	189b      	adds	r3, r3, r2
 802a528:	f04f 0e18 	mov.w	lr, #24
 802a52c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802a530:	fba3 230e 	umull	r2, r3, r3, lr
 802a534:	fb0e 330c 	mla	r3, lr, ip, r3
 802a538:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802a53c:	eb12 020c 	adds.w	r2, r2, ip
 802a540:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802a544:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802a548:	fba2 2e0c 	umull	r2, lr, r2, ip
 802a54c:	fb0c ee03 	mla	lr, ip, r3, lr
 802a550:	eb12 030b 	adds.w	r3, r2, fp
 802a554:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802a558:	fba3 e30c 	umull	lr, r3, r3, ip
 802a55c:	fb0c 3302 	mla	r3, ip, r2, r3
 802a560:	f8d6 c000 	ldr.w	ip, [r6]
 802a564:	eb1e 020c 	adds.w	r2, lr, ip
 802a568:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802a56c:	ebb2 020a 	subs.w	r2, r2, sl
 802a570:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802a574:	e9cd 2300 	strd	r2, r3, [sp]
 802a578:	4a15      	ldr	r2, [pc, #84]	@ (802a5d0 <__strftime.isra.0+0x744>)
 802a57a:	f001 ff7d 	bl	802c478 <sniprintf>
 802a57e:	e60e      	b.n	802a19e <__strftime.isra.0+0x312>
 802a580:	f04f 0a00 	mov.w	sl, #0
 802a584:	e79a      	b.n	802a4bc <__strftime.isra.0+0x630>
 802a586:	6833      	ldr	r3, [r6, #0]
 802a588:	e65e      	b.n	802a248 <__strftime.isra.0+0x3bc>
 802a58a:	1e6b      	subs	r3, r5, #1
 802a58c:	429c      	cmp	r4, r3
 802a58e:	f4bf ae0d 	bcs.w	802a1ac <__strftime.isra.0+0x320>
 802a592:	f104 0a01 	add.w	sl, r4, #1
 802a596:	2309      	movs	r3, #9
 802a598:	e73b      	b.n	802a412 <__strftime.isra.0+0x586>
 802a59a:	6833      	ldr	r3, [r6, #0]
 802a59c:	9301      	str	r3, [sp, #4]
 802a59e:	6873      	ldr	r3, [r6, #4]
 802a5a0:	9300      	str	r3, [sp, #0]
 802a5a2:	68b3      	ldr	r3, [r6, #8]
 802a5a4:	4a0b      	ldr	r2, [pc, #44]	@ (802a5d4 <__strftime.isra.0+0x748>)
 802a5a6:	e5d1      	b.n	802a14c <__strftime.isra.0+0x2c0>
 802a5a8:	fffff894 	.word	0xfffff894
 802a5ac:	08038296 	.word	0x08038296
 802a5b0:	fffff895 	.word	0xfffff895
 802a5b4:	08038285 	.word	0x08038285
 802a5b8:	08038277 	.word	0x08038277
 802a5bc:	0803829a 	.word	0x0803829a
 802a5c0:	08038450 	.word	0x08038450
 802a5c4:	0803854d 	.word	0x0803854d
 802a5c8:	0803829f 	.word	0x0803829f
 802a5cc:	080382ae 	.word	0x080382ae
 802a5d0:	080382a4 	.word	0x080382a4
 802a5d4:	080382a9 	.word	0x080382a9
 802a5d8:	1e6b      	subs	r3, r5, #1
 802a5da:	429c      	cmp	r4, r3
 802a5dc:	f4bf ade6 	bcs.w	802a1ac <__strftime.isra.0+0x320>
 802a5e0:	69b3      	ldr	r3, [r6, #24]
 802a5e2:	b91b      	cbnz	r3, 802a5ec <__strftime.isra.0+0x760>
 802a5e4:	2337      	movs	r3, #55	@ 0x37
 802a5e6:	f104 0a01 	add.w	sl, r4, #1
 802a5ea:	e712      	b.n	802a412 <__strftime.isra.0+0x586>
 802a5ec:	3330      	adds	r3, #48	@ 0x30
 802a5ee:	b2db      	uxtb	r3, r3
 802a5f0:	e7f9      	b.n	802a5e6 <__strftime.isra.0+0x75a>
 802a5f2:	69f3      	ldr	r3, [r6, #28]
 802a5f4:	69b2      	ldr	r2, [r6, #24]
 802a5f6:	3307      	adds	r3, #7
 802a5f8:	1a9b      	subs	r3, r3, r2
 802a5fa:	2207      	movs	r2, #7
 802a5fc:	fb93 f3f2 	sdiv	r3, r3, r2
 802a600:	e622      	b.n	802a248 <__strftime.isra.0+0x3bc>
 802a602:	4630      	mov	r0, r6
 802a604:	f7ff fbf0 	bl	8029de8 <iso_year_adjust>
 802a608:	69b2      	ldr	r2, [r6, #24]
 802a60a:	b132      	cbz	r2, 802a61a <__strftime.isra.0+0x78e>
 802a60c:	3a01      	subs	r2, #1
 802a60e:	2800      	cmp	r0, #0
 802a610:	69f3      	ldr	r3, [r6, #28]
 802a612:	dc26      	bgt.n	802a662 <__strftime.isra.0+0x7d6>
 802a614:	d103      	bne.n	802a61e <__strftime.isra.0+0x792>
 802a616:	330a      	adds	r3, #10
 802a618:	e7ee      	b.n	802a5f8 <__strftime.isra.0+0x76c>
 802a61a:	2206      	movs	r2, #6
 802a61c:	e7f7      	b.n	802a60e <__strftime.isra.0+0x782>
 802a61e:	1ad2      	subs	r2, r2, r3
 802a620:	6973      	ldr	r3, [r6, #20]
 802a622:	2b00      	cmp	r3, #0
 802a624:	f240 716b 	movw	r1, #1899	@ 0x76b
 802a628:	bfa8      	it	ge
 802a62a:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802a62e:	440b      	add	r3, r1
 802a630:	0799      	lsls	r1, r3, #30
 802a632:	d105      	bne.n	802a640 <__strftime.isra.0+0x7b4>
 802a634:	2064      	movs	r0, #100	@ 0x64
 802a636:	fb93 f1f0 	sdiv	r1, r3, r0
 802a63a:	fb00 3111 	mls	r1, r0, r1, r3
 802a63e:	b971      	cbnz	r1, 802a65e <__strftime.isra.0+0x7d2>
 802a640:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802a644:	fb93 f0f1 	sdiv	r0, r3, r1
 802a648:	fb01 3310 	mls	r3, r1, r0, r3
 802a64c:	fab3 f383 	clz	r3, r3
 802a650:	095b      	lsrs	r3, r3, #5
 802a652:	1ad2      	subs	r2, r2, r3
 802a654:	2a04      	cmp	r2, #4
 802a656:	bfcc      	ite	gt
 802a658:	2334      	movgt	r3, #52	@ 0x34
 802a65a:	2335      	movle	r3, #53	@ 0x35
 802a65c:	e5f4      	b.n	802a248 <__strftime.isra.0+0x3bc>
 802a65e:	2301      	movs	r3, #1
 802a660:	e7f7      	b.n	802a652 <__strftime.isra.0+0x7c6>
 802a662:	2301      	movs	r3, #1
 802a664:	e5f0      	b.n	802a248 <__strftime.isra.0+0x3bc>
 802a666:	496c      	ldr	r1, [pc, #432]	@ (802a818 <__strftime.isra.0+0x98c>)
 802a668:	9203      	str	r2, [sp, #12]
 802a66a:	a806      	add	r0, sp, #24
 802a66c:	f000 fc42 	bl	802aef4 <strcpy>
 802a670:	a806      	add	r0, sp, #24
 802a672:	f7e5 fe15 	bl	80102a0 <strlen>
 802a676:	ab06      	add	r3, sp, #24
 802a678:	eb03 0a00 	add.w	sl, r3, r0
 802a67c:	f10a 0a01 	add.w	sl, sl, #1
 802a680:	46d3      	mov	fp, sl
 802a682:	f1b9 0f00 	cmp.w	r9, #0
 802a686:	d009      	beq.n	802a69c <__strftime.isra.0+0x810>
 802a688:	9a03      	ldr	r2, [sp, #12]
 802a68a:	f803 9000 	strb.w	r9, [r3, r0]
 802a68e:	2a05      	cmp	r2, #5
 802a690:	d901      	bls.n	802a696 <__strftime.isra.0+0x80a>
 802a692:	1f93      	subs	r3, r2, #6
 802a694:	d106      	bne.n	802a6a4 <__strftime.isra.0+0x818>
 802a696:	4961      	ldr	r1, [pc, #388]	@ (802a81c <__strftime.isra.0+0x990>)
 802a698:	4658      	mov	r0, fp
 802a69a:	e5a6      	b.n	802a1ea <__strftime.isra.0+0x35e>
 802a69c:	aa06      	add	r2, sp, #24
 802a69e:	232b      	movs	r3, #43	@ 0x2b
 802a6a0:	5413      	strb	r3, [r2, r0]
 802a6a2:	2304      	movs	r3, #4
 802a6a4:	a90e      	add	r1, sp, #56	@ 0x38
 802a6a6:	4a5e      	ldr	r2, [pc, #376]	@ (802a820 <__strftime.isra.0+0x994>)
 802a6a8:	eba1 010a 	sub.w	r1, r1, sl
 802a6ac:	4650      	mov	r0, sl
 802a6ae:	f001 fee3 	bl	802c478 <sniprintf>
 802a6b2:	2800      	cmp	r0, #0
 802a6b4:	bfc8      	it	gt
 802a6b6:	eb0a 0b00 	addgt.w	fp, sl, r0
 802a6ba:	e7ec      	b.n	802a696 <__strftime.isra.0+0x80a>
 802a6bc:	1e6b      	subs	r3, r5, #1
 802a6be:	429c      	cmp	r4, r3
 802a6c0:	f4bf ad74 	bcs.w	802a1ac <__strftime.isra.0+0x320>
 802a6c4:	69b3      	ldr	r3, [r6, #24]
 802a6c6:	f104 0a01 	add.w	sl, r4, #1
 802a6ca:	3330      	adds	r3, #48	@ 0x30
 802a6cc:	e6a1      	b.n	802a412 <__strftime.isra.0+0x586>
 802a6ce:	69b2      	ldr	r2, [r6, #24]
 802a6d0:	b11a      	cbz	r2, 802a6da <__strftime.isra.0+0x84e>
 802a6d2:	3a01      	subs	r2, #1
 802a6d4:	69f3      	ldr	r3, [r6, #28]
 802a6d6:	3307      	adds	r3, #7
 802a6d8:	e78e      	b.n	802a5f8 <__strftime.isra.0+0x76c>
 802a6da:	2206      	movs	r2, #6
 802a6dc:	e7fa      	b.n	802a6d4 <__strftime.isra.0+0x848>
 802a6de:	6970      	ldr	r0, [r6, #20]
 802a6e0:	2800      	cmp	r0, #0
 802a6e2:	db05      	blt.n	802a6f0 <__strftime.isra.0+0x864>
 802a6e4:	2364      	movs	r3, #100	@ 0x64
 802a6e6:	fb90 f2f3 	sdiv	r2, r0, r3
 802a6ea:	fb02 0313 	mls	r3, r2, r3, r0
 802a6ee:	e5ab      	b.n	802a248 <__strftime.isra.0+0x3bc>
 802a6f0:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802a6f4:	f000 fc9b 	bl	802b02e <abs>
 802a6f8:	e7f4      	b.n	802a6e4 <__strftime.isra.0+0x858>
 802a6fa:	6971      	ldr	r1, [r6, #20]
 802a6fc:	4849      	ldr	r0, [pc, #292]	@ (802a824 <__strftime.isra.0+0x998>)
 802a6fe:	4281      	cmp	r1, r0
 802a700:	da09      	bge.n	802a716 <__strftime.isra.0+0x88a>
 802a702:	eba0 0a01 	sub.w	sl, r0, r1
 802a706:	212d      	movs	r1, #45	@ 0x2d
 802a708:	f88d 1018 	strb.w	r1, [sp, #24]
 802a70c:	b102      	cbz	r2, 802a710 <__strftime.isra.0+0x884>
 802a70e:	3a01      	subs	r2, #1
 802a710:	f10d 0119 	add.w	r1, sp, #25
 802a714:	e609      	b.n	802a32a <__strftime.isra.0+0x49e>
 802a716:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802a71a:	e5fd      	b.n	802a318 <__strftime.isra.0+0x48c>
 802a71c:	2330      	movs	r3, #48	@ 0x30
 802a71e:	1c88      	adds	r0, r1, #2
 802a720:	704b      	strb	r3, [r1, #1]
 802a722:	e609      	b.n	802a338 <__strftime.isra.0+0x4ac>
 802a724:	6a33      	ldr	r3, [r6, #32]
 802a726:	2b00      	cmp	r3, #0
 802a728:	da01      	bge.n	802a72e <__strftime.isra.0+0x8a2>
 802a72a:	46a2      	mov	sl, r4
 802a72c:	e45c      	b.n	8029fe8 <__strftime.isra.0+0x15c>
 802a72e:	f000 f92b 	bl	802a988 <__tz_lock>
 802a732:	9b02      	ldr	r3, [sp, #8]
 802a734:	b90b      	cbnz	r3, 802a73a <__strftime.isra.0+0x8ae>
 802a736:	f000 f933 	bl	802a9a0 <_tzset_unlocked>
 802a73a:	f007 fd23 	bl	8032184 <__gettzinfo>
 802a73e:	6a33      	ldr	r3, [r6, #32]
 802a740:	2b00      	cmp	r3, #0
 802a742:	bfd4      	ite	le
 802a744:	2200      	movle	r2, #0
 802a746:	2201      	movgt	r2, #1
 802a748:	2328      	movs	r3, #40	@ 0x28
 802a74a:	fb02 3303 	mla	r3, r2, r3, r3
 802a74e:	eb07 0a04 	add.w	sl, r7, r4
 802a752:	58c3      	ldr	r3, [r0, r3]
 802a754:	f1c3 0900 	rsb	r9, r3, #0
 802a758:	f000 f91c 	bl	802a994 <__tz_unlock>
 802a75c:	233c      	movs	r3, #60	@ 0x3c
 802a75e:	fb99 f0f3 	sdiv	r0, r9, r3
 802a762:	f001 fbfe 	bl	802bf62 <labs>
 802a766:	233c      	movs	r3, #60	@ 0x3c
 802a768:	eba5 0b04 	sub.w	fp, r5, r4
 802a76c:	fb90 f2f3 	sdiv	r2, r0, r3
 802a770:	fb02 0013 	mls	r0, r2, r3, r0
 802a774:	9000      	str	r0, [sp, #0]
 802a776:	4a2c      	ldr	r2, [pc, #176]	@ (802a828 <__strftime.isra.0+0x99c>)
 802a778:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802a77c:	4659      	mov	r1, fp
 802a77e:	4650      	mov	r0, sl
 802a780:	fb99 f3f3 	sdiv	r3, r9, r3
 802a784:	f001 fe78 	bl	802c478 <sniprintf>
 802a788:	2800      	cmp	r0, #0
 802a78a:	f6ff ad0f 	blt.w	802a1ac <__strftime.isra.0+0x320>
 802a78e:	eb00 0a04 	add.w	sl, r0, r4
 802a792:	4555      	cmp	r5, sl
 802a794:	f67f ad0a 	bls.w	802a1ac <__strftime.isra.0+0x320>
 802a798:	2301      	movs	r3, #1
 802a79a:	9302      	str	r3, [sp, #8]
 802a79c:	e424      	b.n	8029fe8 <__strftime.isra.0+0x15c>
 802a79e:	6a33      	ldr	r3, [r6, #32]
 802a7a0:	2b00      	cmp	r3, #0
 802a7a2:	dbc2      	blt.n	802a72a <__strftime.isra.0+0x89e>
 802a7a4:	f000 f8f0 	bl	802a988 <__tz_lock>
 802a7a8:	9b02      	ldr	r3, [sp, #8]
 802a7aa:	b90b      	cbnz	r3, 802a7b0 <__strftime.isra.0+0x924>
 802a7ac:	f000 f8f8 	bl	802a9a0 <_tzset_unlocked>
 802a7b0:	6a33      	ldr	r3, [r6, #32]
 802a7b2:	4a1e      	ldr	r2, [pc, #120]	@ (802a82c <__strftime.isra.0+0x9a0>)
 802a7b4:	2b00      	cmp	r3, #0
 802a7b6:	bfd4      	ite	le
 802a7b8:	2300      	movle	r3, #0
 802a7ba:	2301      	movgt	r3, #1
 802a7bc:	46a2      	mov	sl, r4
 802a7be:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802a7c2:	4648      	mov	r0, r9
 802a7c4:	f7e5 fd6c 	bl	80102a0 <strlen>
 802a7c8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802a7cc:	4420      	add	r0, r4
 802a7ce:	1e6b      	subs	r3, r5, #1
 802a7d0:	4550      	cmp	r0, sl
 802a7d2:	d102      	bne.n	802a7da <__strftime.isra.0+0x94e>
 802a7d4:	f000 f8de 	bl	802a994 <__tz_unlock>
 802a7d8:	e7de      	b.n	802a798 <__strftime.isra.0+0x90c>
 802a7da:	4553      	cmp	r3, sl
 802a7dc:	d906      	bls.n	802a7ec <__strftime.isra.0+0x960>
 802a7de:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802a7e2:	f807 200a 	strb.w	r2, [r7, sl]
 802a7e6:	f10a 0a01 	add.w	sl, sl, #1
 802a7ea:	e7f1      	b.n	802a7d0 <__strftime.isra.0+0x944>
 802a7ec:	f000 f8d2 	bl	802a994 <__tz_unlock>
 802a7f0:	e4dc      	b.n	802a1ac <__strftime.isra.0+0x320>
 802a7f2:	1e6b      	subs	r3, r5, #1
 802a7f4:	429c      	cmp	r4, r3
 802a7f6:	f4bf acd9 	bcs.w	802a1ac <__strftime.isra.0+0x320>
 802a7fa:	f104 0a01 	add.w	sl, r4, #1
 802a7fe:	2325      	movs	r3, #37	@ 0x25
 802a800:	e607      	b.n	802a412 <__strftime.isra.0+0x586>
 802a802:	46a2      	mov	sl, r4
 802a804:	2d00      	cmp	r5, #0
 802a806:	f43f acd3 	beq.w	802a1b0 <__strftime.isra.0+0x324>
 802a80a:	2300      	movs	r3, #0
 802a80c:	f807 300a 	strb.w	r3, [r7, sl]
 802a810:	e4ce      	b.n	802a1b0 <__strftime.isra.0+0x324>
 802a812:	4649      	mov	r1, r9
 802a814:	e778      	b.n	802a708 <__strftime.isra.0+0x87c>
 802a816:	bf00      	nop
 802a818:	080382b8 	.word	0x080382b8
 802a81c:	08038420 	.word	0x08038420
 802a820:	0803828a 	.word	0x0803828a
 802a824:	fffff894 	.word	0xfffff894
 802a828:	080382c0 	.word	0x080382c0
 802a82c:	200000e0 	.word	0x200000e0

0802a830 <strftime>:
 802a830:	f7ff bb2c 	b.w	8029e8c <__strftime.isra.0>

0802a834 <__tzcalc_limits>:
 802a834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a838:	4604      	mov	r4, r0
 802a83a:	f007 fca3 	bl	8032184 <__gettzinfo>
 802a83e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802a842:	429c      	cmp	r4, r3
 802a844:	f340 8099 	ble.w	802a97a <__tzcalc_limits+0x146>
 802a848:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802a84c:	19e5      	adds	r5, r4, r7
 802a84e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802a852:	f240 126d 	movw	r2, #365	@ 0x16d
 802a856:	10ad      	asrs	r5, r5, #2
 802a858:	fb02 5503 	mla	r5, r2, r3, r5
 802a85c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802a860:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802a864:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802a868:	4f45      	ldr	r7, [pc, #276]	@ (802a980 <__tzcalc_limits+0x14c>)
 802a86a:	fb93 f3f2 	sdiv	r3, r3, r2
 802a86e:	441d      	add	r5, r3
 802a870:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802a874:	eb04 030c 	add.w	r3, r4, ip
 802a878:	6044      	str	r4, [r0, #4]
 802a87a:	fbb3 f3f2 	udiv	r3, r3, r2
 802a87e:	4601      	mov	r1, r0
 802a880:	441d      	add	r5, r3
 802a882:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802a886:	7a0b      	ldrb	r3, [r1, #8]
 802a888:	694a      	ldr	r2, [r1, #20]
 802a88a:	2b4a      	cmp	r3, #74	@ 0x4a
 802a88c:	d133      	bne.n	802a8f6 <__tzcalc_limits+0xc2>
 802a88e:	07a6      	lsls	r6, r4, #30
 802a890:	eb05 0302 	add.w	r3, r5, r2
 802a894:	d106      	bne.n	802a8a4 <__tzcalc_limits+0x70>
 802a896:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802a89a:	fb94 f6fe 	sdiv	r6, r4, lr
 802a89e:	fb0e 4616 	mls	r6, lr, r6, r4
 802a8a2:	b936      	cbnz	r6, 802a8b2 <__tzcalc_limits+0x7e>
 802a8a4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802a8a8:	fb94 f6fe 	sdiv	r6, r4, lr
 802a8ac:	fb0e 4616 	mls	r6, lr, r6, r4
 802a8b0:	b9fe      	cbnz	r6, 802a8f2 <__tzcalc_limits+0xbe>
 802a8b2:	2a3b      	cmp	r2, #59	@ 0x3b
 802a8b4:	bfd4      	ite	le
 802a8b6:	2200      	movle	r2, #0
 802a8b8:	2201      	movgt	r2, #1
 802a8ba:	4413      	add	r3, r2
 802a8bc:	3b01      	subs	r3, #1
 802a8be:	698a      	ldr	r2, [r1, #24]
 802a8c0:	17d6      	asrs	r6, r2, #31
 802a8c2:	fbc3 2607 	smlal	r2, r6, r3, r7
 802a8c6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802a8c8:	18d2      	adds	r2, r2, r3
 802a8ca:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802a8ce:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802a8d2:	3128      	adds	r1, #40	@ 0x28
 802a8d4:	458c      	cmp	ip, r1
 802a8d6:	d1d6      	bne.n	802a886 <__tzcalc_limits+0x52>
 802a8d8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802a8dc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802a8e0:	428c      	cmp	r4, r1
 802a8e2:	4193      	sbcs	r3, r2
 802a8e4:	bfb4      	ite	lt
 802a8e6:	2301      	movlt	r3, #1
 802a8e8:	2300      	movge	r3, #0
 802a8ea:	6003      	str	r3, [r0, #0]
 802a8ec:	2001      	movs	r0, #1
 802a8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a8f2:	2200      	movs	r2, #0
 802a8f4:	e7e1      	b.n	802a8ba <__tzcalc_limits+0x86>
 802a8f6:	2b44      	cmp	r3, #68	@ 0x44
 802a8f8:	d101      	bne.n	802a8fe <__tzcalc_limits+0xca>
 802a8fa:	18ab      	adds	r3, r5, r2
 802a8fc:	e7df      	b.n	802a8be <__tzcalc_limits+0x8a>
 802a8fe:	07a3      	lsls	r3, r4, #30
 802a900:	d105      	bne.n	802a90e <__tzcalc_limits+0xda>
 802a902:	2664      	movs	r6, #100	@ 0x64
 802a904:	fb94 f3f6 	sdiv	r3, r4, r6
 802a908:	fb06 4313 	mls	r3, r6, r3, r4
 802a90c:	bb7b      	cbnz	r3, 802a96e <__tzcalc_limits+0x13a>
 802a90e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802a912:	fb94 f6f3 	sdiv	r6, r4, r3
 802a916:	fb03 4616 	mls	r6, r3, r6, r4
 802a91a:	fab6 f686 	clz	r6, r6
 802a91e:	0976      	lsrs	r6, r6, #5
 802a920:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802a984 <__tzcalc_limits+0x150>
 802a924:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802a928:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802a92c:	462b      	mov	r3, r5
 802a92e:	f04f 0800 	mov.w	r8, #0
 802a932:	fb0a e606 	mla	r6, sl, r6, lr
 802a936:	f108 0801 	add.w	r8, r8, #1
 802a93a:	45c1      	cmp	r9, r8
 802a93c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802a940:	dc17      	bgt.n	802a972 <__tzcalc_limits+0x13e>
 802a942:	f103 0804 	add.w	r8, r3, #4
 802a946:	2607      	movs	r6, #7
 802a948:	fb98 f6f6 	sdiv	r6, r8, r6
 802a94c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802a950:	eba8 0606 	sub.w	r6, r8, r6
 802a954:	1b92      	subs	r2, r2, r6
 802a956:	690e      	ldr	r6, [r1, #16]
 802a958:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802a95c:	bf48      	it	mi
 802a95e:	3207      	addmi	r2, #7
 802a960:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802a964:	4432      	add	r2, r6
 802a966:	4572      	cmp	r2, lr
 802a968:	da05      	bge.n	802a976 <__tzcalc_limits+0x142>
 802a96a:	4413      	add	r3, r2
 802a96c:	e7a7      	b.n	802a8be <__tzcalc_limits+0x8a>
 802a96e:	2601      	movs	r6, #1
 802a970:	e7d6      	b.n	802a920 <__tzcalc_limits+0xec>
 802a972:	4473      	add	r3, lr
 802a974:	e7df      	b.n	802a936 <__tzcalc_limits+0x102>
 802a976:	3a07      	subs	r2, #7
 802a978:	e7f5      	b.n	802a966 <__tzcalc_limits+0x132>
 802a97a:	2000      	movs	r0, #0
 802a97c:	e7b7      	b.n	802a8ee <__tzcalc_limits+0xba>
 802a97e:	bf00      	nop
 802a980:	00015180 	.word	0x00015180
 802a984:	08038200 	.word	0x08038200

0802a988 <__tz_lock>:
 802a988:	4801      	ldr	r0, [pc, #4]	@ (802a990 <__tz_lock+0x8>)
 802a98a:	f000 bae1 	b.w	802af50 <__retarget_lock_acquire>
 802a98e:	bf00      	nop
 802a990:	20018188 	.word	0x20018188

0802a994 <__tz_unlock>:
 802a994:	4801      	ldr	r0, [pc, #4]	@ (802a99c <__tz_unlock+0x8>)
 802a996:	f000 badd 	b.w	802af54 <__retarget_lock_release>
 802a99a:	bf00      	nop
 802a99c:	20018188 	.word	0x20018188

0802a9a0 <_tzset_unlocked>:
 802a9a0:	4b01      	ldr	r3, [pc, #4]	@ (802a9a8 <_tzset_unlocked+0x8>)
 802a9a2:	6818      	ldr	r0, [r3, #0]
 802a9a4:	f000 b802 	b.w	802a9ac <_tzset_unlocked_r>
 802a9a8:	20000254 	.word	0x20000254

0802a9ac <_tzset_unlocked_r>:
 802a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a9b0:	b08d      	sub	sp, #52	@ 0x34
 802a9b2:	4607      	mov	r7, r0
 802a9b4:	f007 fbe6 	bl	8032184 <__gettzinfo>
 802a9b8:	49bc      	ldr	r1, [pc, #752]	@ (802acac <_tzset_unlocked_r+0x300>)
 802a9ba:	4dbd      	ldr	r5, [pc, #756]	@ (802acb0 <_tzset_unlocked_r+0x304>)
 802a9bc:	4604      	mov	r4, r0
 802a9be:	4638      	mov	r0, r7
 802a9c0:	f001 fac8 	bl	802bf54 <_getenv_r>
 802a9c4:	4606      	mov	r6, r0
 802a9c6:	bb10      	cbnz	r0, 802aa0e <_tzset_unlocked_r+0x62>
 802a9c8:	4bba      	ldr	r3, [pc, #744]	@ (802acb4 <_tzset_unlocked_r+0x308>)
 802a9ca:	4abb      	ldr	r2, [pc, #748]	@ (802acb8 <_tzset_unlocked_r+0x30c>)
 802a9cc:	6018      	str	r0, [r3, #0]
 802a9ce:	4bbb      	ldr	r3, [pc, #748]	@ (802acbc <_tzset_unlocked_r+0x310>)
 802a9d0:	62a0      	str	r0, [r4, #40]	@ 0x28
 802a9d2:	6018      	str	r0, [r3, #0]
 802a9d4:	4bba      	ldr	r3, [pc, #744]	@ (802acc0 <_tzset_unlocked_r+0x314>)
 802a9d6:	6520      	str	r0, [r4, #80]	@ 0x50
 802a9d8:	e9c3 2200 	strd	r2, r2, [r3]
 802a9dc:	214a      	movs	r1, #74	@ 0x4a
 802a9de:	2200      	movs	r2, #0
 802a9e0:	2300      	movs	r3, #0
 802a9e2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802a9e6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802a9ea:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802a9ee:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802a9f2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802a9f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802a9fa:	6828      	ldr	r0, [r5, #0]
 802a9fc:	7221      	strb	r1, [r4, #8]
 802a9fe:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802aa02:	f001 fabb 	bl	802bf7c <free>
 802aa06:	602e      	str	r6, [r5, #0]
 802aa08:	b00d      	add	sp, #52	@ 0x34
 802aa0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa0e:	6829      	ldr	r1, [r5, #0]
 802aa10:	2900      	cmp	r1, #0
 802aa12:	f040 808e 	bne.w	802ab32 <_tzset_unlocked_r+0x186>
 802aa16:	6828      	ldr	r0, [r5, #0]
 802aa18:	f001 fab0 	bl	802bf7c <free>
 802aa1c:	4630      	mov	r0, r6
 802aa1e:	f7e5 fc3f 	bl	80102a0 <strlen>
 802aa22:	1c41      	adds	r1, r0, #1
 802aa24:	4638      	mov	r0, r7
 802aa26:	f001 fab1 	bl	802bf8c <_malloc_r>
 802aa2a:	6028      	str	r0, [r5, #0]
 802aa2c:	2800      	cmp	r0, #0
 802aa2e:	f040 8086 	bne.w	802ab3e <_tzset_unlocked_r+0x192>
 802aa32:	4aa2      	ldr	r2, [pc, #648]	@ (802acbc <_tzset_unlocked_r+0x310>)
 802aa34:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802acc0 <_tzset_unlocked_r+0x314>
 802aa38:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802acb4 <_tzset_unlocked_r+0x308>
 802aa3c:	2300      	movs	r3, #0
 802aa3e:	6013      	str	r3, [r2, #0]
 802aa40:	4aa0      	ldr	r2, [pc, #640]	@ (802acc4 <_tzset_unlocked_r+0x318>)
 802aa42:	f8ca 3000 	str.w	r3, [sl]
 802aa46:	2000      	movs	r0, #0
 802aa48:	2100      	movs	r1, #0
 802aa4a:	e9c8 2200 	strd	r2, r2, [r8]
 802aa4e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802aa52:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802aa56:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802aa5a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802aa5e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802aa62:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802aa66:	224a      	movs	r2, #74	@ 0x4a
 802aa68:	7222      	strb	r2, [r4, #8]
 802aa6a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802aa6c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802aa70:	6523      	str	r3, [r4, #80]	@ 0x50
 802aa72:	7833      	ldrb	r3, [r6, #0]
 802aa74:	2b3a      	cmp	r3, #58	@ 0x3a
 802aa76:	bf08      	it	eq
 802aa78:	3601      	addeq	r6, #1
 802aa7a:	7833      	ldrb	r3, [r6, #0]
 802aa7c:	2b3c      	cmp	r3, #60	@ 0x3c
 802aa7e:	d162      	bne.n	802ab46 <_tzset_unlocked_r+0x19a>
 802aa80:	1c75      	adds	r5, r6, #1
 802aa82:	4a91      	ldr	r2, [pc, #580]	@ (802acc8 <_tzset_unlocked_r+0x31c>)
 802aa84:	4991      	ldr	r1, [pc, #580]	@ (802accc <_tzset_unlocked_r+0x320>)
 802aa86:	ab0a      	add	r3, sp, #40	@ 0x28
 802aa88:	4628      	mov	r0, r5
 802aa8a:	f001 fccb 	bl	802c424 <siscanf>
 802aa8e:	2800      	cmp	r0, #0
 802aa90:	ddba      	ble.n	802aa08 <_tzset_unlocked_r+0x5c>
 802aa92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802aa94:	1eda      	subs	r2, r3, #3
 802aa96:	2a07      	cmp	r2, #7
 802aa98:	d8b6      	bhi.n	802aa08 <_tzset_unlocked_r+0x5c>
 802aa9a:	5ceb      	ldrb	r3, [r5, r3]
 802aa9c:	2b3e      	cmp	r3, #62	@ 0x3e
 802aa9e:	d1b3      	bne.n	802aa08 <_tzset_unlocked_r+0x5c>
 802aaa0:	3602      	adds	r6, #2
 802aaa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802aaa4:	18f5      	adds	r5, r6, r3
 802aaa6:	5cf3      	ldrb	r3, [r6, r3]
 802aaa8:	2b2d      	cmp	r3, #45	@ 0x2d
 802aaaa:	d15a      	bne.n	802ab62 <_tzset_unlocked_r+0x1b6>
 802aaac:	3501      	adds	r5, #1
 802aaae:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802aab2:	2300      	movs	r3, #0
 802aab4:	f8ad 301e 	strh.w	r3, [sp, #30]
 802aab8:	f8ad 3020 	strh.w	r3, [sp, #32]
 802aabc:	af08      	add	r7, sp, #32
 802aabe:	ab0a      	add	r3, sp, #40	@ 0x28
 802aac0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802aac4:	9303      	str	r3, [sp, #12]
 802aac6:	f10d 031e 	add.w	r3, sp, #30
 802aaca:	9300      	str	r3, [sp, #0]
 802aacc:	4980      	ldr	r1, [pc, #512]	@ (802acd0 <_tzset_unlocked_r+0x324>)
 802aace:	ab0a      	add	r3, sp, #40	@ 0x28
 802aad0:	aa07      	add	r2, sp, #28
 802aad2:	4628      	mov	r0, r5
 802aad4:	f001 fca6 	bl	802c424 <siscanf>
 802aad8:	2800      	cmp	r0, #0
 802aada:	dd95      	ble.n	802aa08 <_tzset_unlocked_r+0x5c>
 802aadc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802aae0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802aae4:	223c      	movs	r2, #60	@ 0x3c
 802aae6:	fb02 6603 	mla	r6, r2, r3, r6
 802aaea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802aaee:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802aaf2:	fb02 6603 	mla	r6, r2, r3, r6
 802aaf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802aaf8:	fb09 f606 	mul.w	r6, r9, r6
 802aafc:	eb05 0903 	add.w	r9, r5, r3
 802ab00:	5ceb      	ldrb	r3, [r5, r3]
 802ab02:	2b3c      	cmp	r3, #60	@ 0x3c
 802ab04:	f040 80ee 	bne.w	802ace4 <_tzset_unlocked_r+0x338>
 802ab08:	f109 0501 	add.w	r5, r9, #1
 802ab0c:	4a71      	ldr	r2, [pc, #452]	@ (802acd4 <_tzset_unlocked_r+0x328>)
 802ab0e:	496f      	ldr	r1, [pc, #444]	@ (802accc <_tzset_unlocked_r+0x320>)
 802ab10:	ab0a      	add	r3, sp, #40	@ 0x28
 802ab12:	4628      	mov	r0, r5
 802ab14:	f001 fc86 	bl	802c424 <siscanf>
 802ab18:	2800      	cmp	r0, #0
 802ab1a:	dc28      	bgt.n	802ab6e <_tzset_unlocked_r+0x1c2>
 802ab1c:	f899 3001 	ldrb.w	r3, [r9, #1]
 802ab20:	2b3e      	cmp	r3, #62	@ 0x3e
 802ab22:	d124      	bne.n	802ab6e <_tzset_unlocked_r+0x1c2>
 802ab24:	4b68      	ldr	r3, [pc, #416]	@ (802acc8 <_tzset_unlocked_r+0x31c>)
 802ab26:	62a6      	str	r6, [r4, #40]	@ 0x28
 802ab28:	e9c8 3300 	strd	r3, r3, [r8]
 802ab2c:	f8ca 6000 	str.w	r6, [sl]
 802ab30:	e76a      	b.n	802aa08 <_tzset_unlocked_r+0x5c>
 802ab32:	f7e5 fb55 	bl	80101e0 <strcmp>
 802ab36:	2800      	cmp	r0, #0
 802ab38:	f47f af6d 	bne.w	802aa16 <_tzset_unlocked_r+0x6a>
 802ab3c:	e764      	b.n	802aa08 <_tzset_unlocked_r+0x5c>
 802ab3e:	4631      	mov	r1, r6
 802ab40:	f000 f9d8 	bl	802aef4 <strcpy>
 802ab44:	e775      	b.n	802aa32 <_tzset_unlocked_r+0x86>
 802ab46:	4a60      	ldr	r2, [pc, #384]	@ (802acc8 <_tzset_unlocked_r+0x31c>)
 802ab48:	4963      	ldr	r1, [pc, #396]	@ (802acd8 <_tzset_unlocked_r+0x32c>)
 802ab4a:	ab0a      	add	r3, sp, #40	@ 0x28
 802ab4c:	4630      	mov	r0, r6
 802ab4e:	f001 fc69 	bl	802c424 <siscanf>
 802ab52:	2800      	cmp	r0, #0
 802ab54:	f77f af58 	ble.w	802aa08 <_tzset_unlocked_r+0x5c>
 802ab58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ab5a:	3b03      	subs	r3, #3
 802ab5c:	2b07      	cmp	r3, #7
 802ab5e:	d9a0      	bls.n	802aaa2 <_tzset_unlocked_r+0xf6>
 802ab60:	e752      	b.n	802aa08 <_tzset_unlocked_r+0x5c>
 802ab62:	2b2b      	cmp	r3, #43	@ 0x2b
 802ab64:	bf08      	it	eq
 802ab66:	3501      	addeq	r5, #1
 802ab68:	f04f 0901 	mov.w	r9, #1
 802ab6c:	e7a1      	b.n	802aab2 <_tzset_unlocked_r+0x106>
 802ab6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ab70:	1eda      	subs	r2, r3, #3
 802ab72:	2a07      	cmp	r2, #7
 802ab74:	f63f af48 	bhi.w	802aa08 <_tzset_unlocked_r+0x5c>
 802ab78:	5ceb      	ldrb	r3, [r5, r3]
 802ab7a:	2b3e      	cmp	r3, #62	@ 0x3e
 802ab7c:	f47f af44 	bne.w	802aa08 <_tzset_unlocked_r+0x5c>
 802ab80:	f109 0902 	add.w	r9, r9, #2
 802ab84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ab86:	eb09 0503 	add.w	r5, r9, r3
 802ab8a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802ab8e:	2b2d      	cmp	r3, #45	@ 0x2d
 802ab90:	f040 80b7 	bne.w	802ad02 <_tzset_unlocked_r+0x356>
 802ab94:	3501      	adds	r5, #1
 802ab96:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802ab9a:	2300      	movs	r3, #0
 802ab9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 802aba0:	f8ad 301e 	strh.w	r3, [sp, #30]
 802aba4:	f8ad 3020 	strh.w	r3, [sp, #32]
 802aba8:	930a      	str	r3, [sp, #40]	@ 0x28
 802abaa:	ab0a      	add	r3, sp, #40	@ 0x28
 802abac:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802abb0:	9301      	str	r3, [sp, #4]
 802abb2:	f10d 031e 	add.w	r3, sp, #30
 802abb6:	9300      	str	r3, [sp, #0]
 802abb8:	4945      	ldr	r1, [pc, #276]	@ (802acd0 <_tzset_unlocked_r+0x324>)
 802abba:	ab0a      	add	r3, sp, #40	@ 0x28
 802abbc:	aa07      	add	r2, sp, #28
 802abbe:	4628      	mov	r0, r5
 802abc0:	f001 fc30 	bl	802c424 <siscanf>
 802abc4:	2800      	cmp	r0, #0
 802abc6:	f300 80a2 	bgt.w	802ad0e <_tzset_unlocked_r+0x362>
 802abca:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802abce:	9304      	str	r3, [sp, #16]
 802abd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802abd2:	4627      	mov	r7, r4
 802abd4:	441d      	add	r5, r3
 802abd6:	f04f 0b00 	mov.w	fp, #0
 802abda:	782b      	ldrb	r3, [r5, #0]
 802abdc:	2b2c      	cmp	r3, #44	@ 0x2c
 802abde:	bf08      	it	eq
 802abe0:	3501      	addeq	r5, #1
 802abe2:	f895 9000 	ldrb.w	r9, [r5]
 802abe6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802abea:	f040 80a3 	bne.w	802ad34 <_tzset_unlocked_r+0x388>
 802abee:	ab0a      	add	r3, sp, #40	@ 0x28
 802abf0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802abf4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802abf8:	aa09      	add	r2, sp, #36	@ 0x24
 802abfa:	9200      	str	r2, [sp, #0]
 802abfc:	4937      	ldr	r1, [pc, #220]	@ (802acdc <_tzset_unlocked_r+0x330>)
 802abfe:	9303      	str	r3, [sp, #12]
 802ac00:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802ac04:	4628      	mov	r0, r5
 802ac06:	f001 fc0d 	bl	802c424 <siscanf>
 802ac0a:	2803      	cmp	r0, #3
 802ac0c:	f47f aefc 	bne.w	802aa08 <_tzset_unlocked_r+0x5c>
 802ac10:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802ac14:	1e4b      	subs	r3, r1, #1
 802ac16:	2b0b      	cmp	r3, #11
 802ac18:	f63f aef6 	bhi.w	802aa08 <_tzset_unlocked_r+0x5c>
 802ac1c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802ac20:	1e53      	subs	r3, r2, #1
 802ac22:	2b04      	cmp	r3, #4
 802ac24:	f63f aef0 	bhi.w	802aa08 <_tzset_unlocked_r+0x5c>
 802ac28:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802ac2c:	2b06      	cmp	r3, #6
 802ac2e:	f63f aeeb 	bhi.w	802aa08 <_tzset_unlocked_r+0x5c>
 802ac32:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802ac36:	f887 9008 	strb.w	r9, [r7, #8]
 802ac3a:	617b      	str	r3, [r7, #20]
 802ac3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ac3e:	eb05 0903 	add.w	r9, r5, r3
 802ac42:	2500      	movs	r5, #0
 802ac44:	f04f 0302 	mov.w	r3, #2
 802ac48:	f8ad 301c 	strh.w	r3, [sp, #28]
 802ac4c:	f8ad 501e 	strh.w	r5, [sp, #30]
 802ac50:	f8ad 5020 	strh.w	r5, [sp, #32]
 802ac54:	950a      	str	r5, [sp, #40]	@ 0x28
 802ac56:	f899 3000 	ldrb.w	r3, [r9]
 802ac5a:	2b2f      	cmp	r3, #47	@ 0x2f
 802ac5c:	f040 8096 	bne.w	802ad8c <_tzset_unlocked_r+0x3e0>
 802ac60:	ab0a      	add	r3, sp, #40	@ 0x28
 802ac62:	aa08      	add	r2, sp, #32
 802ac64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802ac68:	f10d 021e 	add.w	r2, sp, #30
 802ac6c:	9200      	str	r2, [sp, #0]
 802ac6e:	491c      	ldr	r1, [pc, #112]	@ (802ace0 <_tzset_unlocked_r+0x334>)
 802ac70:	9303      	str	r3, [sp, #12]
 802ac72:	aa07      	add	r2, sp, #28
 802ac74:	4648      	mov	r0, r9
 802ac76:	f001 fbd5 	bl	802c424 <siscanf>
 802ac7a:	42a8      	cmp	r0, r5
 802ac7c:	f300 8086 	bgt.w	802ad8c <_tzset_unlocked_r+0x3e0>
 802ac80:	214a      	movs	r1, #74	@ 0x4a
 802ac82:	2200      	movs	r2, #0
 802ac84:	2300      	movs	r3, #0
 802ac86:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802ac8a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802ac8e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802ac92:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802ac96:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802ac9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802ac9e:	7221      	strb	r1, [r4, #8]
 802aca0:	62a5      	str	r5, [r4, #40]	@ 0x28
 802aca2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802aca6:	6525      	str	r5, [r4, #80]	@ 0x50
 802aca8:	e6ae      	b.n	802aa08 <_tzset_unlocked_r+0x5c>
 802acaa:	bf00      	nop
 802acac:	080382cc 	.word	0x080382cc
 802acb0:	20018160 	.word	0x20018160
 802acb4:	2001817c 	.word	0x2001817c
 802acb8:	080382cf 	.word	0x080382cf
 802acbc:	20018180 	.word	0x20018180
 802acc0:	200000e0 	.word	0x200000e0
 802acc4:	0803818e 	.word	0x0803818e
 802acc8:	20018170 	.word	0x20018170
 802accc:	080382d3 	.word	0x080382d3
 802acd0:	08038308 	.word	0x08038308
 802acd4:	20018164 	.word	0x20018164
 802acd8:	080382e6 	.word	0x080382e6
 802acdc:	080382f4 	.word	0x080382f4
 802ace0:	08038307 	.word	0x08038307
 802ace4:	4a3e      	ldr	r2, [pc, #248]	@ (802ade0 <_tzset_unlocked_r+0x434>)
 802ace6:	493f      	ldr	r1, [pc, #252]	@ (802ade4 <_tzset_unlocked_r+0x438>)
 802ace8:	ab0a      	add	r3, sp, #40	@ 0x28
 802acea:	4648      	mov	r0, r9
 802acec:	f001 fb9a 	bl	802c424 <siscanf>
 802acf0:	2800      	cmp	r0, #0
 802acf2:	f77f af17 	ble.w	802ab24 <_tzset_unlocked_r+0x178>
 802acf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802acf8:	3b03      	subs	r3, #3
 802acfa:	2b07      	cmp	r3, #7
 802acfc:	f67f af42 	bls.w	802ab84 <_tzset_unlocked_r+0x1d8>
 802ad00:	e682      	b.n	802aa08 <_tzset_unlocked_r+0x5c>
 802ad02:	2b2b      	cmp	r3, #43	@ 0x2b
 802ad04:	bf08      	it	eq
 802ad06:	3501      	addeq	r5, #1
 802ad08:	f04f 0901 	mov.w	r9, #1
 802ad0c:	e745      	b.n	802ab9a <_tzset_unlocked_r+0x1ee>
 802ad0e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802ad12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802ad16:	213c      	movs	r1, #60	@ 0x3c
 802ad18:	fb01 3302 	mla	r3, r1, r2, r3
 802ad1c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802ad20:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802ad24:	fb01 3302 	mla	r3, r1, r2, r3
 802ad28:	fb09 f303 	mul.w	r3, r9, r3
 802ad2c:	e74f      	b.n	802abce <_tzset_unlocked_r+0x222>
 802ad2e:	f04f 0b01 	mov.w	fp, #1
 802ad32:	e752      	b.n	802abda <_tzset_unlocked_r+0x22e>
 802ad34:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802ad38:	bf06      	itte	eq
 802ad3a:	3501      	addeq	r5, #1
 802ad3c:	464b      	moveq	r3, r9
 802ad3e:	2344      	movne	r3, #68	@ 0x44
 802ad40:	220a      	movs	r2, #10
 802ad42:	a90b      	add	r1, sp, #44	@ 0x2c
 802ad44:	4628      	mov	r0, r5
 802ad46:	9305      	str	r3, [sp, #20]
 802ad48:	f007 f950 	bl	8031fec <strtoul>
 802ad4c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802ad50:	9b05      	ldr	r3, [sp, #20]
 802ad52:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802ad56:	45a9      	cmp	r9, r5
 802ad58:	d114      	bne.n	802ad84 <_tzset_unlocked_r+0x3d8>
 802ad5a:	234d      	movs	r3, #77	@ 0x4d
 802ad5c:	f1bb 0f00 	cmp.w	fp, #0
 802ad60:	d107      	bne.n	802ad72 <_tzset_unlocked_r+0x3c6>
 802ad62:	7223      	strb	r3, [r4, #8]
 802ad64:	2103      	movs	r1, #3
 802ad66:	2302      	movs	r3, #2
 802ad68:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802ad6c:	f8c4 b014 	str.w	fp, [r4, #20]
 802ad70:	e767      	b.n	802ac42 <_tzset_unlocked_r+0x296>
 802ad72:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802ad76:	220b      	movs	r2, #11
 802ad78:	2301      	movs	r3, #1
 802ad7a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802ad7e:	2300      	movs	r3, #0
 802ad80:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802ad82:	e75e      	b.n	802ac42 <_tzset_unlocked_r+0x296>
 802ad84:	b280      	uxth	r0, r0
 802ad86:	723b      	strb	r3, [r7, #8]
 802ad88:	6178      	str	r0, [r7, #20]
 802ad8a:	e75a      	b.n	802ac42 <_tzset_unlocked_r+0x296>
 802ad8c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802ad90:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802ad94:	213c      	movs	r1, #60	@ 0x3c
 802ad96:	fb01 3302 	mla	r3, r1, r2, r3
 802ad9a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802ad9e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802ada2:	fb01 3302 	mla	r3, r1, r2, r3
 802ada6:	61bb      	str	r3, [r7, #24]
 802ada8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802adaa:	3728      	adds	r7, #40	@ 0x28
 802adac:	444d      	add	r5, r9
 802adae:	f1bb 0f00 	cmp.w	fp, #0
 802adb2:	d0bc      	beq.n	802ad2e <_tzset_unlocked_r+0x382>
 802adb4:	9b04      	ldr	r3, [sp, #16]
 802adb6:	6523      	str	r3, [r4, #80]	@ 0x50
 802adb8:	4b0b      	ldr	r3, [pc, #44]	@ (802ade8 <_tzset_unlocked_r+0x43c>)
 802adba:	f8c8 3000 	str.w	r3, [r8]
 802adbe:	6860      	ldr	r0, [r4, #4]
 802adc0:	4b07      	ldr	r3, [pc, #28]	@ (802ade0 <_tzset_unlocked_r+0x434>)
 802adc2:	62a6      	str	r6, [r4, #40]	@ 0x28
 802adc4:	f8c8 3004 	str.w	r3, [r8, #4]
 802adc8:	f7ff fd34 	bl	802a834 <__tzcalc_limits>
 802adcc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802adce:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802add0:	f8ca 2000 	str.w	r2, [sl]
 802add4:	1a9b      	subs	r3, r3, r2
 802add6:	4a05      	ldr	r2, [pc, #20]	@ (802adec <_tzset_unlocked_r+0x440>)
 802add8:	bf18      	it	ne
 802adda:	2301      	movne	r3, #1
 802addc:	6013      	str	r3, [r2, #0]
 802adde:	e613      	b.n	802aa08 <_tzset_unlocked_r+0x5c>
 802ade0:	20018164 	.word	0x20018164
 802ade4:	080382e6 	.word	0x080382e6
 802ade8:	20018170 	.word	0x20018170
 802adec:	20018180 	.word	0x20018180

0802adf0 <__locale_mb_cur_max>:
 802adf0:	4b01      	ldr	r3, [pc, #4]	@ (802adf8 <__locale_mb_cur_max+0x8>)
 802adf2:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802adf6:	4770      	bx	lr
 802adf8:	200000e8 	.word	0x200000e8

0802adfc <_localeconv_r>:
 802adfc:	4800      	ldr	r0, [pc, #0]	@ (802ae00 <_localeconv_r+0x4>)
 802adfe:	4770      	bx	lr
 802ae00:	200001d8 	.word	0x200001d8

0802ae04 <_close_r>:
 802ae04:	b538      	push	{r3, r4, r5, lr}
 802ae06:	4d06      	ldr	r5, [pc, #24]	@ (802ae20 <_close_r+0x1c>)
 802ae08:	2300      	movs	r3, #0
 802ae0a:	4604      	mov	r4, r0
 802ae0c:	4608      	mov	r0, r1
 802ae0e:	602b      	str	r3, [r5, #0]
 802ae10:	f7e7 f9aa 	bl	8012168 <_close>
 802ae14:	1c43      	adds	r3, r0, #1
 802ae16:	d102      	bne.n	802ae1e <_close_r+0x1a>
 802ae18:	682b      	ldr	r3, [r5, #0]
 802ae1a:	b103      	cbz	r3, 802ae1e <_close_r+0x1a>
 802ae1c:	6023      	str	r3, [r4, #0]
 802ae1e:	bd38      	pop	{r3, r4, r5, pc}
 802ae20:	20018184 	.word	0x20018184

0802ae24 <_reclaim_reent>:
 802ae24:	4b14      	ldr	r3, [pc, #80]	@ (802ae78 <_reclaim_reent+0x54>)
 802ae26:	681b      	ldr	r3, [r3, #0]
 802ae28:	4283      	cmp	r3, r0
 802ae2a:	b570      	push	{r4, r5, r6, lr}
 802ae2c:	4604      	mov	r4, r0
 802ae2e:	d022      	beq.n	802ae76 <_reclaim_reent+0x52>
 802ae30:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802ae32:	b153      	cbz	r3, 802ae4a <_reclaim_reent+0x26>
 802ae34:	2500      	movs	r5, #0
 802ae36:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802ae38:	5959      	ldr	r1, [r3, r5]
 802ae3a:	b9b1      	cbnz	r1, 802ae6a <_reclaim_reent+0x46>
 802ae3c:	3504      	adds	r5, #4
 802ae3e:	2d80      	cmp	r5, #128	@ 0x80
 802ae40:	d1f9      	bne.n	802ae36 <_reclaim_reent+0x12>
 802ae42:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802ae44:	4620      	mov	r0, r4
 802ae46:	f000 ff89 	bl	802bd5c <_free_r>
 802ae4a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802ae4c:	b111      	cbz	r1, 802ae54 <_reclaim_reent+0x30>
 802ae4e:	4620      	mov	r0, r4
 802ae50:	f000 ff84 	bl	802bd5c <_free_r>
 802ae54:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802ae56:	b111      	cbz	r1, 802ae5e <_reclaim_reent+0x3a>
 802ae58:	4620      	mov	r0, r4
 802ae5a:	f000 ff7f 	bl	802bd5c <_free_r>
 802ae5e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802ae60:	b14b      	cbz	r3, 802ae76 <_reclaim_reent+0x52>
 802ae62:	4620      	mov	r0, r4
 802ae64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802ae68:	4718      	bx	r3
 802ae6a:	680e      	ldr	r6, [r1, #0]
 802ae6c:	4620      	mov	r0, r4
 802ae6e:	f000 ff75 	bl	802bd5c <_free_r>
 802ae72:	4631      	mov	r1, r6
 802ae74:	e7e1      	b.n	802ae3a <_reclaim_reent+0x16>
 802ae76:	bd70      	pop	{r4, r5, r6, pc}
 802ae78:	20000254 	.word	0x20000254

0802ae7c <_lseek_r>:
 802ae7c:	b538      	push	{r3, r4, r5, lr}
 802ae7e:	4d07      	ldr	r5, [pc, #28]	@ (802ae9c <_lseek_r+0x20>)
 802ae80:	4604      	mov	r4, r0
 802ae82:	4608      	mov	r0, r1
 802ae84:	4611      	mov	r1, r2
 802ae86:	2200      	movs	r2, #0
 802ae88:	602a      	str	r2, [r5, #0]
 802ae8a:	461a      	mov	r2, r3
 802ae8c:	f7e7 f976 	bl	801217c <_lseek>
 802ae90:	1c43      	adds	r3, r0, #1
 802ae92:	d102      	bne.n	802ae9a <_lseek_r+0x1e>
 802ae94:	682b      	ldr	r3, [r5, #0]
 802ae96:	b103      	cbz	r3, 802ae9a <_lseek_r+0x1e>
 802ae98:	6023      	str	r3, [r4, #0]
 802ae9a:	bd38      	pop	{r3, r4, r5, pc}
 802ae9c:	20018184 	.word	0x20018184

0802aea0 <_read_r>:
 802aea0:	b538      	push	{r3, r4, r5, lr}
 802aea2:	4d07      	ldr	r5, [pc, #28]	@ (802aec0 <_read_r+0x20>)
 802aea4:	4604      	mov	r4, r0
 802aea6:	4608      	mov	r0, r1
 802aea8:	4611      	mov	r1, r2
 802aeaa:	2200      	movs	r2, #0
 802aeac:	602a      	str	r2, [r5, #0]
 802aeae:	461a      	mov	r2, r3
 802aeb0:	f7e7 f93c 	bl	801212c <_read>
 802aeb4:	1c43      	adds	r3, r0, #1
 802aeb6:	d102      	bne.n	802aebe <_read_r+0x1e>
 802aeb8:	682b      	ldr	r3, [r5, #0]
 802aeba:	b103      	cbz	r3, 802aebe <_read_r+0x1e>
 802aebc:	6023      	str	r3, [r4, #0]
 802aebe:	bd38      	pop	{r3, r4, r5, pc}
 802aec0:	20018184 	.word	0x20018184

0802aec4 <_write_r>:
 802aec4:	b538      	push	{r3, r4, r5, lr}
 802aec6:	4d07      	ldr	r5, [pc, #28]	@ (802aee4 <_write_r+0x20>)
 802aec8:	4604      	mov	r4, r0
 802aeca:	4608      	mov	r0, r1
 802aecc:	4611      	mov	r1, r2
 802aece:	2200      	movs	r2, #0
 802aed0:	602a      	str	r2, [r5, #0]
 802aed2:	461a      	mov	r2, r3
 802aed4:	f7e7 f93a 	bl	801214c <_write>
 802aed8:	1c43      	adds	r3, r0, #1
 802aeda:	d102      	bne.n	802aee2 <_write_r+0x1e>
 802aedc:	682b      	ldr	r3, [r5, #0]
 802aede:	b103      	cbz	r3, 802aee2 <_write_r+0x1e>
 802aee0:	6023      	str	r3, [r4, #0]
 802aee2:	bd38      	pop	{r3, r4, r5, pc}
 802aee4:	20018184 	.word	0x20018184

0802aee8 <__errno>:
 802aee8:	4b01      	ldr	r3, [pc, #4]	@ (802aef0 <__errno+0x8>)
 802aeea:	6818      	ldr	r0, [r3, #0]
 802aeec:	4770      	bx	lr
 802aeee:	bf00      	nop
 802aef0:	20000254 	.word	0x20000254

0802aef4 <strcpy>:
 802aef4:	4603      	mov	r3, r0
 802aef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 802aefa:	f803 2b01 	strb.w	r2, [r3], #1
 802aefe:	2a00      	cmp	r2, #0
 802af00:	d1f9      	bne.n	802aef6 <strcpy+0x2>
 802af02:	4770      	bx	lr

0802af04 <__libc_init_array>:
 802af04:	b570      	push	{r4, r5, r6, lr}
 802af06:	4d0d      	ldr	r5, [pc, #52]	@ (802af3c <__libc_init_array+0x38>)
 802af08:	4c0d      	ldr	r4, [pc, #52]	@ (802af40 <__libc_init_array+0x3c>)
 802af0a:	1b64      	subs	r4, r4, r5
 802af0c:	10a4      	asrs	r4, r4, #2
 802af0e:	2600      	movs	r6, #0
 802af10:	42a6      	cmp	r6, r4
 802af12:	d109      	bne.n	802af28 <__libc_init_array+0x24>
 802af14:	4d0b      	ldr	r5, [pc, #44]	@ (802af44 <__libc_init_array+0x40>)
 802af16:	4c0c      	ldr	r4, [pc, #48]	@ (802af48 <__libc_init_array+0x44>)
 802af18:	f007 ff60 	bl	8032ddc <_init>
 802af1c:	1b64      	subs	r4, r4, r5
 802af1e:	10a4      	asrs	r4, r4, #2
 802af20:	2600      	movs	r6, #0
 802af22:	42a6      	cmp	r6, r4
 802af24:	d105      	bne.n	802af32 <__libc_init_array+0x2e>
 802af26:	bd70      	pop	{r4, r5, r6, pc}
 802af28:	f855 3b04 	ldr.w	r3, [r5], #4
 802af2c:	4798      	blx	r3
 802af2e:	3601      	adds	r6, #1
 802af30:	e7ee      	b.n	802af10 <__libc_init_array+0xc>
 802af32:	f855 3b04 	ldr.w	r3, [r5], #4
 802af36:	4798      	blx	r3
 802af38:	3601      	adds	r6, #1
 802af3a:	e7f2      	b.n	802af22 <__libc_init_array+0x1e>
 802af3c:	08038960 	.word	0x08038960
 802af40:	08038960 	.word	0x08038960
 802af44:	08038960 	.word	0x08038960
 802af48:	08038968 	.word	0x08038968

0802af4c <__retarget_lock_init_recursive>:
 802af4c:	4770      	bx	lr

0802af4e <__retarget_lock_close_recursive>:
 802af4e:	4770      	bx	lr

0802af50 <__retarget_lock_acquire>:
 802af50:	4770      	bx	lr

0802af52 <__retarget_lock_acquire_recursive>:
 802af52:	4770      	bx	lr

0802af54 <__retarget_lock_release>:
 802af54:	4770      	bx	lr

0802af56 <__retarget_lock_release_recursive>:
 802af56:	4770      	bx	lr

0802af58 <memcpy>:
 802af58:	440a      	add	r2, r1
 802af5a:	4291      	cmp	r1, r2
 802af5c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802af60:	d100      	bne.n	802af64 <memcpy+0xc>
 802af62:	4770      	bx	lr
 802af64:	b510      	push	{r4, lr}
 802af66:	f811 4b01 	ldrb.w	r4, [r1], #1
 802af6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802af6e:	4291      	cmp	r1, r2
 802af70:	d1f9      	bne.n	802af66 <memcpy+0xe>
 802af72:	bd10      	pop	{r4, pc}

0802af74 <_wcrtomb_r>:
 802af74:	b5f0      	push	{r4, r5, r6, r7, lr}
 802af76:	4c09      	ldr	r4, [pc, #36]	@ (802af9c <_wcrtomb_r+0x28>)
 802af78:	b085      	sub	sp, #20
 802af7a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802af7e:	4605      	mov	r5, r0
 802af80:	461e      	mov	r6, r3
 802af82:	b909      	cbnz	r1, 802af88 <_wcrtomb_r+0x14>
 802af84:	460a      	mov	r2, r1
 802af86:	a901      	add	r1, sp, #4
 802af88:	47b8      	blx	r7
 802af8a:	1c43      	adds	r3, r0, #1
 802af8c:	bf01      	itttt	eq
 802af8e:	2300      	moveq	r3, #0
 802af90:	6033      	streq	r3, [r6, #0]
 802af92:	238a      	moveq	r3, #138	@ 0x8a
 802af94:	602b      	streq	r3, [r5, #0]
 802af96:	b005      	add	sp, #20
 802af98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802af9a:	bf00      	nop
 802af9c:	200000e8 	.word	0x200000e8

0802afa0 <frexp>:
 802afa0:	b570      	push	{r4, r5, r6, lr}
 802afa2:	2100      	movs	r1, #0
 802afa4:	ec55 4b10 	vmov	r4, r5, d0
 802afa8:	6001      	str	r1, [r0, #0]
 802afaa:	4915      	ldr	r1, [pc, #84]	@ (802b000 <frexp+0x60>)
 802afac:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802afb0:	428a      	cmp	r2, r1
 802afb2:	4606      	mov	r6, r0
 802afb4:	462b      	mov	r3, r5
 802afb6:	d820      	bhi.n	802affa <frexp+0x5a>
 802afb8:	4621      	mov	r1, r4
 802afba:	4311      	orrs	r1, r2
 802afbc:	d01d      	beq.n	802affa <frexp+0x5a>
 802afbe:	4911      	ldr	r1, [pc, #68]	@ (802b004 <frexp+0x64>)
 802afc0:	4029      	ands	r1, r5
 802afc2:	b961      	cbnz	r1, 802afde <frexp+0x3e>
 802afc4:	4b10      	ldr	r3, [pc, #64]	@ (802b008 <frexp+0x68>)
 802afc6:	2200      	movs	r2, #0
 802afc8:	4620      	mov	r0, r4
 802afca:	4629      	mov	r1, r5
 802afcc:	f7e5 fb2c 	bl	8010628 <__aeabi_dmul>
 802afd0:	460b      	mov	r3, r1
 802afd2:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 802afd6:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802afda:	4604      	mov	r4, r0
 802afdc:	6031      	str	r1, [r6, #0]
 802afde:	6831      	ldr	r1, [r6, #0]
 802afe0:	1512      	asrs	r2, r2, #20
 802afe2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802afe6:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802afea:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802afee:	4411      	add	r1, r2
 802aff0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 802aff4:	6031      	str	r1, [r6, #0]
 802aff6:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802affa:	ec45 4b10 	vmov	d0, r4, r5
 802affe:	bd70      	pop	{r4, r5, r6, pc}
 802b000:	7fefffff 	.word	0x7fefffff
 802b004:	7ff00000 	.word	0x7ff00000
 802b008:	43500000 	.word	0x43500000

0802b00c <register_fini>:
 802b00c:	4b02      	ldr	r3, [pc, #8]	@ (802b018 <register_fini+0xc>)
 802b00e:	b113      	cbz	r3, 802b016 <register_fini+0xa>
 802b010:	4802      	ldr	r0, [pc, #8]	@ (802b01c <register_fini+0x10>)
 802b012:	f000 b810 	b.w	802b036 <atexit>
 802b016:	4770      	bx	lr
 802b018:	00000000 	.word	0x00000000
 802b01c:	0803249d 	.word	0x0803249d

0802b020 <abort>:
 802b020:	b508      	push	{r3, lr}
 802b022:	2006      	movs	r0, #6
 802b024:	f007 f8a6 	bl	8032174 <raise>
 802b028:	2001      	movs	r0, #1
 802b02a:	f7e7 f879 	bl	8012120 <_exit>

0802b02e <abs>:
 802b02e:	2800      	cmp	r0, #0
 802b030:	bfb8      	it	lt
 802b032:	4240      	neglt	r0, r0
 802b034:	4770      	bx	lr

0802b036 <atexit>:
 802b036:	2300      	movs	r3, #0
 802b038:	4601      	mov	r1, r0
 802b03a:	461a      	mov	r2, r3
 802b03c:	4618      	mov	r0, r3
 802b03e:	f007 bb01 	b.w	8032644 <__register_exitproc>

0802b042 <quorem>:
 802b042:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b046:	6903      	ldr	r3, [r0, #16]
 802b048:	690c      	ldr	r4, [r1, #16]
 802b04a:	42a3      	cmp	r3, r4
 802b04c:	4607      	mov	r7, r0
 802b04e:	db7e      	blt.n	802b14e <quorem+0x10c>
 802b050:	3c01      	subs	r4, #1
 802b052:	f101 0814 	add.w	r8, r1, #20
 802b056:	00a3      	lsls	r3, r4, #2
 802b058:	f100 0514 	add.w	r5, r0, #20
 802b05c:	9300      	str	r3, [sp, #0]
 802b05e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b062:	9301      	str	r3, [sp, #4]
 802b064:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802b068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b06c:	3301      	adds	r3, #1
 802b06e:	429a      	cmp	r2, r3
 802b070:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802b074:	fbb2 f6f3 	udiv	r6, r2, r3
 802b078:	d32e      	bcc.n	802b0d8 <quorem+0x96>
 802b07a:	f04f 0a00 	mov.w	sl, #0
 802b07e:	46c4      	mov	ip, r8
 802b080:	46ae      	mov	lr, r5
 802b082:	46d3      	mov	fp, sl
 802b084:	f85c 3b04 	ldr.w	r3, [ip], #4
 802b088:	b298      	uxth	r0, r3
 802b08a:	fb06 a000 	mla	r0, r6, r0, sl
 802b08e:	0c02      	lsrs	r2, r0, #16
 802b090:	0c1b      	lsrs	r3, r3, #16
 802b092:	fb06 2303 	mla	r3, r6, r3, r2
 802b096:	f8de 2000 	ldr.w	r2, [lr]
 802b09a:	b280      	uxth	r0, r0
 802b09c:	b292      	uxth	r2, r2
 802b09e:	1a12      	subs	r2, r2, r0
 802b0a0:	445a      	add	r2, fp
 802b0a2:	f8de 0000 	ldr.w	r0, [lr]
 802b0a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802b0aa:	b29b      	uxth	r3, r3
 802b0ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802b0b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802b0b4:	b292      	uxth	r2, r2
 802b0b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802b0ba:	45e1      	cmp	r9, ip
 802b0bc:	f84e 2b04 	str.w	r2, [lr], #4
 802b0c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802b0c4:	d2de      	bcs.n	802b084 <quorem+0x42>
 802b0c6:	9b00      	ldr	r3, [sp, #0]
 802b0c8:	58eb      	ldr	r3, [r5, r3]
 802b0ca:	b92b      	cbnz	r3, 802b0d8 <quorem+0x96>
 802b0cc:	9b01      	ldr	r3, [sp, #4]
 802b0ce:	3b04      	subs	r3, #4
 802b0d0:	429d      	cmp	r5, r3
 802b0d2:	461a      	mov	r2, r3
 802b0d4:	d32f      	bcc.n	802b136 <quorem+0xf4>
 802b0d6:	613c      	str	r4, [r7, #16]
 802b0d8:	4638      	mov	r0, r7
 802b0da:	f005 fce3 	bl	8030aa4 <__mcmp>
 802b0de:	2800      	cmp	r0, #0
 802b0e0:	db25      	blt.n	802b12e <quorem+0xec>
 802b0e2:	4629      	mov	r1, r5
 802b0e4:	2000      	movs	r0, #0
 802b0e6:	f858 2b04 	ldr.w	r2, [r8], #4
 802b0ea:	f8d1 c000 	ldr.w	ip, [r1]
 802b0ee:	fa1f fe82 	uxth.w	lr, r2
 802b0f2:	fa1f f38c 	uxth.w	r3, ip
 802b0f6:	eba3 030e 	sub.w	r3, r3, lr
 802b0fa:	4403      	add	r3, r0
 802b0fc:	0c12      	lsrs	r2, r2, #16
 802b0fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802b102:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802b106:	b29b      	uxth	r3, r3
 802b108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b10c:	45c1      	cmp	r9, r8
 802b10e:	f841 3b04 	str.w	r3, [r1], #4
 802b112:	ea4f 4022 	mov.w	r0, r2, asr #16
 802b116:	d2e6      	bcs.n	802b0e6 <quorem+0xa4>
 802b118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b11c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b120:	b922      	cbnz	r2, 802b12c <quorem+0xea>
 802b122:	3b04      	subs	r3, #4
 802b124:	429d      	cmp	r5, r3
 802b126:	461a      	mov	r2, r3
 802b128:	d30b      	bcc.n	802b142 <quorem+0x100>
 802b12a:	613c      	str	r4, [r7, #16]
 802b12c:	3601      	adds	r6, #1
 802b12e:	4630      	mov	r0, r6
 802b130:	b003      	add	sp, #12
 802b132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b136:	6812      	ldr	r2, [r2, #0]
 802b138:	3b04      	subs	r3, #4
 802b13a:	2a00      	cmp	r2, #0
 802b13c:	d1cb      	bne.n	802b0d6 <quorem+0x94>
 802b13e:	3c01      	subs	r4, #1
 802b140:	e7c6      	b.n	802b0d0 <quorem+0x8e>
 802b142:	6812      	ldr	r2, [r2, #0]
 802b144:	3b04      	subs	r3, #4
 802b146:	2a00      	cmp	r2, #0
 802b148:	d1ef      	bne.n	802b12a <quorem+0xe8>
 802b14a:	3c01      	subs	r4, #1
 802b14c:	e7ea      	b.n	802b124 <quorem+0xe2>
 802b14e:	2000      	movs	r0, #0
 802b150:	e7ee      	b.n	802b130 <quorem+0xee>
 802b152:	0000      	movs	r0, r0
 802b154:	0000      	movs	r0, r0
	...

0802b158 <_dtoa_r>:
 802b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b15c:	b099      	sub	sp, #100	@ 0x64
 802b15e:	ed8d 0b02 	vstr	d0, [sp, #8]
 802b162:	9109      	str	r1, [sp, #36]	@ 0x24
 802b164:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 802b166:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802b168:	920e      	str	r2, [sp, #56]	@ 0x38
 802b16a:	ec55 4b10 	vmov	r4, r5, d0
 802b16e:	4683      	mov	fp, r0
 802b170:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b172:	b149      	cbz	r1, 802b188 <_dtoa_r+0x30>
 802b174:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802b176:	604a      	str	r2, [r1, #4]
 802b178:	2301      	movs	r3, #1
 802b17a:	4093      	lsls	r3, r2
 802b17c:	608b      	str	r3, [r1, #8]
 802b17e:	f005 fa40 	bl	8030602 <_Bfree>
 802b182:	2300      	movs	r3, #0
 802b184:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 802b188:	1e2b      	subs	r3, r5, #0
 802b18a:	bfb9      	ittee	lt
 802b18c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802b190:	9303      	strlt	r3, [sp, #12]
 802b192:	2300      	movge	r3, #0
 802b194:	6033      	strge	r3, [r6, #0]
 802b196:	9f03      	ldr	r7, [sp, #12]
 802b198:	4b97      	ldr	r3, [pc, #604]	@ (802b3f8 <_dtoa_r+0x2a0>)
 802b19a:	bfbc      	itt	lt
 802b19c:	2201      	movlt	r2, #1
 802b19e:	6032      	strlt	r2, [r6, #0]
 802b1a0:	43bb      	bics	r3, r7
 802b1a2:	d114      	bne.n	802b1ce <_dtoa_r+0x76>
 802b1a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802b1a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 802b1aa:	6013      	str	r3, [r2, #0]
 802b1ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802b1b0:	4323      	orrs	r3, r4
 802b1b2:	f000 854c 	beq.w	802bc4e <_dtoa_r+0xaf6>
 802b1b6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802b1b8:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802b410 <_dtoa_r+0x2b8>
 802b1bc:	b11b      	cbz	r3, 802b1c6 <_dtoa_r+0x6e>
 802b1be:	f10a 0303 	add.w	r3, sl, #3
 802b1c2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802b1c4:	6013      	str	r3, [r2, #0]
 802b1c6:	4650      	mov	r0, sl
 802b1c8:	b019      	add	sp, #100	@ 0x64
 802b1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b1ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 802b1d2:	2200      	movs	r2, #0
 802b1d4:	ec51 0b17 	vmov	r0, r1, d7
 802b1d8:	2300      	movs	r3, #0
 802b1da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802b1de:	f7e5 fc8b 	bl	8010af8 <__aeabi_dcmpeq>
 802b1e2:	4680      	mov	r8, r0
 802b1e4:	b150      	cbz	r0, 802b1fc <_dtoa_r+0xa4>
 802b1e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802b1e8:	2301      	movs	r3, #1
 802b1ea:	6013      	str	r3, [r2, #0]
 802b1ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802b1ee:	b113      	cbz	r3, 802b1f6 <_dtoa_r+0x9e>
 802b1f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802b1f2:	4b82      	ldr	r3, [pc, #520]	@ (802b3fc <_dtoa_r+0x2a4>)
 802b1f4:	6013      	str	r3, [r2, #0]
 802b1f6:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 802b414 <_dtoa_r+0x2bc>
 802b1fa:	e7e4      	b.n	802b1c6 <_dtoa_r+0x6e>
 802b1fc:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802b200:	aa16      	add	r2, sp, #88	@ 0x58
 802b202:	a917      	add	r1, sp, #92	@ 0x5c
 802b204:	4658      	mov	r0, fp
 802b206:	f005 fd6d 	bl	8030ce4 <__d2b>
 802b20a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802b20e:	4681      	mov	r9, r0
 802b210:	2e00      	cmp	r6, #0
 802b212:	d077      	beq.n	802b304 <_dtoa_r+0x1ac>
 802b214:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b216:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802b21a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b21e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802b222:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802b226:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802b22a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802b22e:	4619      	mov	r1, r3
 802b230:	2200      	movs	r2, #0
 802b232:	4b73      	ldr	r3, [pc, #460]	@ (802b400 <_dtoa_r+0x2a8>)
 802b234:	f7e5 f840 	bl	80102b8 <__aeabi_dsub>
 802b238:	a369      	add	r3, pc, #420	@ (adr r3, 802b3e0 <_dtoa_r+0x288>)
 802b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b23e:	f7e5 f9f3 	bl	8010628 <__aeabi_dmul>
 802b242:	a369      	add	r3, pc, #420	@ (adr r3, 802b3e8 <_dtoa_r+0x290>)
 802b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b248:	f7e5 f838 	bl	80102bc <__adddf3>
 802b24c:	4604      	mov	r4, r0
 802b24e:	4630      	mov	r0, r6
 802b250:	460d      	mov	r5, r1
 802b252:	f7e5 f97f 	bl	8010554 <__aeabi_i2d>
 802b256:	a366      	add	r3, pc, #408	@ (adr r3, 802b3f0 <_dtoa_r+0x298>)
 802b258:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b25c:	f7e5 f9e4 	bl	8010628 <__aeabi_dmul>
 802b260:	4602      	mov	r2, r0
 802b262:	460b      	mov	r3, r1
 802b264:	4620      	mov	r0, r4
 802b266:	4629      	mov	r1, r5
 802b268:	f7e5 f828 	bl	80102bc <__adddf3>
 802b26c:	4604      	mov	r4, r0
 802b26e:	460d      	mov	r5, r1
 802b270:	f7e5 fc8a 	bl	8010b88 <__aeabi_d2iz>
 802b274:	2200      	movs	r2, #0
 802b276:	4607      	mov	r7, r0
 802b278:	2300      	movs	r3, #0
 802b27a:	4620      	mov	r0, r4
 802b27c:	4629      	mov	r1, r5
 802b27e:	f7e5 fc45 	bl	8010b0c <__aeabi_dcmplt>
 802b282:	b140      	cbz	r0, 802b296 <_dtoa_r+0x13e>
 802b284:	4638      	mov	r0, r7
 802b286:	f7e5 f965 	bl	8010554 <__aeabi_i2d>
 802b28a:	4622      	mov	r2, r4
 802b28c:	462b      	mov	r3, r5
 802b28e:	f7e5 fc33 	bl	8010af8 <__aeabi_dcmpeq>
 802b292:	b900      	cbnz	r0, 802b296 <_dtoa_r+0x13e>
 802b294:	3f01      	subs	r7, #1
 802b296:	2f16      	cmp	r7, #22
 802b298:	d851      	bhi.n	802b33e <_dtoa_r+0x1e6>
 802b29a:	4b5a      	ldr	r3, [pc, #360]	@ (802b404 <_dtoa_r+0x2ac>)
 802b29c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802b2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802b2a8:	f7e5 fc30 	bl	8010b0c <__aeabi_dcmplt>
 802b2ac:	2800      	cmp	r0, #0
 802b2ae:	d048      	beq.n	802b342 <_dtoa_r+0x1ea>
 802b2b0:	3f01      	subs	r7, #1
 802b2b2:	2300      	movs	r3, #0
 802b2b4:	9312      	str	r3, [sp, #72]	@ 0x48
 802b2b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b2b8:	1b9b      	subs	r3, r3, r6
 802b2ba:	1e5a      	subs	r2, r3, #1
 802b2bc:	bf44      	itt	mi
 802b2be:	f1c3 0801 	rsbmi	r8, r3, #1
 802b2c2:	2300      	movmi	r3, #0
 802b2c4:	9208      	str	r2, [sp, #32]
 802b2c6:	bf54      	ite	pl
 802b2c8:	f04f 0800 	movpl.w	r8, #0
 802b2cc:	9308      	strmi	r3, [sp, #32]
 802b2ce:	2f00      	cmp	r7, #0
 802b2d0:	db39      	blt.n	802b346 <_dtoa_r+0x1ee>
 802b2d2:	9b08      	ldr	r3, [sp, #32]
 802b2d4:	970f      	str	r7, [sp, #60]	@ 0x3c
 802b2d6:	443b      	add	r3, r7
 802b2d8:	9308      	str	r3, [sp, #32]
 802b2da:	2300      	movs	r3, #0
 802b2dc:	930a      	str	r3, [sp, #40]	@ 0x28
 802b2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b2e0:	2b09      	cmp	r3, #9
 802b2e2:	d865      	bhi.n	802b3b0 <_dtoa_r+0x258>
 802b2e4:	2b05      	cmp	r3, #5
 802b2e6:	bfc4      	itt	gt
 802b2e8:	3b04      	subgt	r3, #4
 802b2ea:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802b2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b2ee:	f1a3 0302 	sub.w	r3, r3, #2
 802b2f2:	bfcc      	ite	gt
 802b2f4:	2400      	movgt	r4, #0
 802b2f6:	2401      	movle	r4, #1
 802b2f8:	2b03      	cmp	r3, #3
 802b2fa:	d864      	bhi.n	802b3c6 <_dtoa_r+0x26e>
 802b2fc:	e8df f003 	tbb	[pc, r3]
 802b300:	5635372a 	.word	0x5635372a
 802b304:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802b308:	441e      	add	r6, r3
 802b30a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802b30e:	2b20      	cmp	r3, #32
 802b310:	bfc1      	itttt	gt
 802b312:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802b316:	409f      	lslgt	r7, r3
 802b318:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802b31c:	fa24 f303 	lsrgt.w	r3, r4, r3
 802b320:	bfd6      	itet	le
 802b322:	f1c3 0320 	rsble	r3, r3, #32
 802b326:	ea47 0003 	orrgt.w	r0, r7, r3
 802b32a:	fa04 f003 	lslle.w	r0, r4, r3
 802b32e:	f7e5 f901 	bl	8010534 <__aeabi_ui2d>
 802b332:	2201      	movs	r2, #1
 802b334:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802b338:	3e01      	subs	r6, #1
 802b33a:	9214      	str	r2, [sp, #80]	@ 0x50
 802b33c:	e777      	b.n	802b22e <_dtoa_r+0xd6>
 802b33e:	2301      	movs	r3, #1
 802b340:	e7b8      	b.n	802b2b4 <_dtoa_r+0x15c>
 802b342:	9012      	str	r0, [sp, #72]	@ 0x48
 802b344:	e7b7      	b.n	802b2b6 <_dtoa_r+0x15e>
 802b346:	427b      	negs	r3, r7
 802b348:	930a      	str	r3, [sp, #40]	@ 0x28
 802b34a:	2300      	movs	r3, #0
 802b34c:	eba8 0807 	sub.w	r8, r8, r7
 802b350:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b352:	e7c4      	b.n	802b2de <_dtoa_r+0x186>
 802b354:	2300      	movs	r3, #0
 802b356:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b35a:	2b00      	cmp	r3, #0
 802b35c:	dc36      	bgt.n	802b3cc <_dtoa_r+0x274>
 802b35e:	2301      	movs	r3, #1
 802b360:	9300      	str	r3, [sp, #0]
 802b362:	9307      	str	r3, [sp, #28]
 802b364:	461a      	mov	r2, r3
 802b366:	920e      	str	r2, [sp, #56]	@ 0x38
 802b368:	e00b      	b.n	802b382 <_dtoa_r+0x22a>
 802b36a:	2301      	movs	r3, #1
 802b36c:	e7f3      	b.n	802b356 <_dtoa_r+0x1fe>
 802b36e:	2300      	movs	r3, #0
 802b370:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b374:	18fb      	adds	r3, r7, r3
 802b376:	9300      	str	r3, [sp, #0]
 802b378:	3301      	adds	r3, #1
 802b37a:	2b01      	cmp	r3, #1
 802b37c:	9307      	str	r3, [sp, #28]
 802b37e:	bfb8      	it	lt
 802b380:	2301      	movlt	r3, #1
 802b382:	2100      	movs	r1, #0
 802b384:	2204      	movs	r2, #4
 802b386:	f102 0014 	add.w	r0, r2, #20
 802b38a:	4298      	cmp	r0, r3
 802b38c:	d922      	bls.n	802b3d4 <_dtoa_r+0x27c>
 802b38e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 802b392:	4658      	mov	r0, fp
 802b394:	f005 f910 	bl	80305b8 <_Balloc>
 802b398:	4682      	mov	sl, r0
 802b39a:	2800      	cmp	r0, #0
 802b39c:	d13c      	bne.n	802b418 <_dtoa_r+0x2c0>
 802b39e:	4b1a      	ldr	r3, [pc, #104]	@ (802b408 <_dtoa_r+0x2b0>)
 802b3a0:	4602      	mov	r2, r0
 802b3a2:	f240 11af 	movw	r1, #431	@ 0x1af
 802b3a6:	4819      	ldr	r0, [pc, #100]	@ (802b40c <_dtoa_r+0x2b4>)
 802b3a8:	f7fb fe48 	bl	802703c <__assert_func>
 802b3ac:	2301      	movs	r3, #1
 802b3ae:	e7df      	b.n	802b370 <_dtoa_r+0x218>
 802b3b0:	2401      	movs	r4, #1
 802b3b2:	2300      	movs	r3, #0
 802b3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 802b3b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 802b3b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b3bc:	9300      	str	r3, [sp, #0]
 802b3be:	9307      	str	r3, [sp, #28]
 802b3c0:	2200      	movs	r2, #0
 802b3c2:	2312      	movs	r3, #18
 802b3c4:	e7cf      	b.n	802b366 <_dtoa_r+0x20e>
 802b3c6:	2301      	movs	r3, #1
 802b3c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b3ca:	e7f5      	b.n	802b3b8 <_dtoa_r+0x260>
 802b3cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b3ce:	9300      	str	r3, [sp, #0]
 802b3d0:	9307      	str	r3, [sp, #28]
 802b3d2:	e7d6      	b.n	802b382 <_dtoa_r+0x22a>
 802b3d4:	3101      	adds	r1, #1
 802b3d6:	0052      	lsls	r2, r2, #1
 802b3d8:	e7d5      	b.n	802b386 <_dtoa_r+0x22e>
 802b3da:	bf00      	nop
 802b3dc:	f3af 8000 	nop.w
 802b3e0:	636f4361 	.word	0x636f4361
 802b3e4:	3fd287a7 	.word	0x3fd287a7
 802b3e8:	8b60c8b3 	.word	0x8b60c8b3
 802b3ec:	3fc68a28 	.word	0x3fc68a28
 802b3f0:	509f79fb 	.word	0x509f79fb
 802b3f4:	3fd34413 	.word	0x3fd34413
 802b3f8:	7ff00000 	.word	0x7ff00000
 802b3fc:	080381c2 	.word	0x080381c2
 802b400:	3ff80000 	.word	0x3ff80000
 802b404:	080387e0 	.word	0x080387e0
 802b408:	0803865a 	.word	0x0803865a
 802b40c:	0803866b 	.word	0x0803866b
 802b410:	08038656 	.word	0x08038656
 802b414:	080381c1 	.word	0x080381c1
 802b418:	9b07      	ldr	r3, [sp, #28]
 802b41a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802b41e:	2b0e      	cmp	r3, #14
 802b420:	f200 80a4 	bhi.w	802b56c <_dtoa_r+0x414>
 802b424:	2c00      	cmp	r4, #0
 802b426:	f000 80a1 	beq.w	802b56c <_dtoa_r+0x414>
 802b42a:	2f00      	cmp	r7, #0
 802b42c:	dd33      	ble.n	802b496 <_dtoa_r+0x33e>
 802b42e:	4bae      	ldr	r3, [pc, #696]	@ (802b6e8 <_dtoa_r+0x590>)
 802b430:	f007 020f 	and.w	r2, r7, #15
 802b434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802b438:	ed93 7b00 	vldr	d7, [r3]
 802b43c:	05f8      	lsls	r0, r7, #23
 802b43e:	ed8d 7b04 	vstr	d7, [sp, #16]
 802b442:	ea4f 1427 	mov.w	r4, r7, asr #4
 802b446:	d516      	bpl.n	802b476 <_dtoa_r+0x31e>
 802b448:	4ba8      	ldr	r3, [pc, #672]	@ (802b6ec <_dtoa_r+0x594>)
 802b44a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802b44e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802b452:	f7e5 fa13 	bl	801087c <__aeabi_ddiv>
 802b456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b45a:	f004 040f 	and.w	r4, r4, #15
 802b45e:	2603      	movs	r6, #3
 802b460:	4da2      	ldr	r5, [pc, #648]	@ (802b6ec <_dtoa_r+0x594>)
 802b462:	b954      	cbnz	r4, 802b47a <_dtoa_r+0x322>
 802b464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802b468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b46c:	f7e5 fa06 	bl	801087c <__aeabi_ddiv>
 802b470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b474:	e028      	b.n	802b4c8 <_dtoa_r+0x370>
 802b476:	2602      	movs	r6, #2
 802b478:	e7f2      	b.n	802b460 <_dtoa_r+0x308>
 802b47a:	07e1      	lsls	r1, r4, #31
 802b47c:	d508      	bpl.n	802b490 <_dtoa_r+0x338>
 802b47e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802b482:	e9d5 2300 	ldrd	r2, r3, [r5]
 802b486:	f7e5 f8cf 	bl	8010628 <__aeabi_dmul>
 802b48a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802b48e:	3601      	adds	r6, #1
 802b490:	1064      	asrs	r4, r4, #1
 802b492:	3508      	adds	r5, #8
 802b494:	e7e5      	b.n	802b462 <_dtoa_r+0x30a>
 802b496:	f000 80d2 	beq.w	802b63e <_dtoa_r+0x4e6>
 802b49a:	427c      	negs	r4, r7
 802b49c:	4b92      	ldr	r3, [pc, #584]	@ (802b6e8 <_dtoa_r+0x590>)
 802b49e:	4d93      	ldr	r5, [pc, #588]	@ (802b6ec <_dtoa_r+0x594>)
 802b4a0:	f004 020f 	and.w	r2, r4, #15
 802b4a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b4ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802b4b0:	f7e5 f8ba 	bl	8010628 <__aeabi_dmul>
 802b4b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b4b8:	1124      	asrs	r4, r4, #4
 802b4ba:	2300      	movs	r3, #0
 802b4bc:	2602      	movs	r6, #2
 802b4be:	2c00      	cmp	r4, #0
 802b4c0:	f040 80b2 	bne.w	802b628 <_dtoa_r+0x4d0>
 802b4c4:	2b00      	cmp	r3, #0
 802b4c6:	d1d3      	bne.n	802b470 <_dtoa_r+0x318>
 802b4c8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b4ca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802b4ce:	2b00      	cmp	r3, #0
 802b4d0:	f000 80b7 	beq.w	802b642 <_dtoa_r+0x4ea>
 802b4d4:	4b86      	ldr	r3, [pc, #536]	@ (802b6f0 <_dtoa_r+0x598>)
 802b4d6:	2200      	movs	r2, #0
 802b4d8:	4620      	mov	r0, r4
 802b4da:	4629      	mov	r1, r5
 802b4dc:	f7e5 fb16 	bl	8010b0c <__aeabi_dcmplt>
 802b4e0:	2800      	cmp	r0, #0
 802b4e2:	f000 80ae 	beq.w	802b642 <_dtoa_r+0x4ea>
 802b4e6:	9b07      	ldr	r3, [sp, #28]
 802b4e8:	2b00      	cmp	r3, #0
 802b4ea:	f000 80aa 	beq.w	802b642 <_dtoa_r+0x4ea>
 802b4ee:	9b00      	ldr	r3, [sp, #0]
 802b4f0:	2b00      	cmp	r3, #0
 802b4f2:	dd37      	ble.n	802b564 <_dtoa_r+0x40c>
 802b4f4:	1e7b      	subs	r3, r7, #1
 802b4f6:	9304      	str	r3, [sp, #16]
 802b4f8:	4620      	mov	r0, r4
 802b4fa:	4b7e      	ldr	r3, [pc, #504]	@ (802b6f4 <_dtoa_r+0x59c>)
 802b4fc:	2200      	movs	r2, #0
 802b4fe:	4629      	mov	r1, r5
 802b500:	f7e5 f892 	bl	8010628 <__aeabi_dmul>
 802b504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b508:	9c00      	ldr	r4, [sp, #0]
 802b50a:	3601      	adds	r6, #1
 802b50c:	4630      	mov	r0, r6
 802b50e:	f7e5 f821 	bl	8010554 <__aeabi_i2d>
 802b512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b516:	f7e5 f887 	bl	8010628 <__aeabi_dmul>
 802b51a:	4b77      	ldr	r3, [pc, #476]	@ (802b6f8 <_dtoa_r+0x5a0>)
 802b51c:	2200      	movs	r2, #0
 802b51e:	f7e4 fecd 	bl	80102bc <__adddf3>
 802b522:	4605      	mov	r5, r0
 802b524:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802b528:	2c00      	cmp	r4, #0
 802b52a:	f040 808d 	bne.w	802b648 <_dtoa_r+0x4f0>
 802b52e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b532:	4b72      	ldr	r3, [pc, #456]	@ (802b6fc <_dtoa_r+0x5a4>)
 802b534:	2200      	movs	r2, #0
 802b536:	f7e4 febf 	bl	80102b8 <__aeabi_dsub>
 802b53a:	4602      	mov	r2, r0
 802b53c:	460b      	mov	r3, r1
 802b53e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802b542:	462a      	mov	r2, r5
 802b544:	4633      	mov	r3, r6
 802b546:	f7e5 faff 	bl	8010b48 <__aeabi_dcmpgt>
 802b54a:	2800      	cmp	r0, #0
 802b54c:	f040 828c 	bne.w	802ba68 <_dtoa_r+0x910>
 802b550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b554:	462a      	mov	r2, r5
 802b556:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802b55a:	f7e5 fad7 	bl	8010b0c <__aeabi_dcmplt>
 802b55e:	2800      	cmp	r0, #0
 802b560:	f040 8129 	bne.w	802b7b6 <_dtoa_r+0x65e>
 802b564:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802b568:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802b56c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802b56e:	2b00      	cmp	r3, #0
 802b570:	f2c0 815b 	blt.w	802b82a <_dtoa_r+0x6d2>
 802b574:	2f0e      	cmp	r7, #14
 802b576:	f300 8158 	bgt.w	802b82a <_dtoa_r+0x6d2>
 802b57a:	4b5b      	ldr	r3, [pc, #364]	@ (802b6e8 <_dtoa_r+0x590>)
 802b57c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802b580:	ed93 7b00 	vldr	d7, [r3]
 802b584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b586:	2b00      	cmp	r3, #0
 802b588:	ed8d 7b00 	vstr	d7, [sp]
 802b58c:	da03      	bge.n	802b596 <_dtoa_r+0x43e>
 802b58e:	9b07      	ldr	r3, [sp, #28]
 802b590:	2b00      	cmp	r3, #0
 802b592:	f340 8102 	ble.w	802b79a <_dtoa_r+0x642>
 802b596:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802b59a:	4656      	mov	r6, sl
 802b59c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b5a0:	4620      	mov	r0, r4
 802b5a2:	4629      	mov	r1, r5
 802b5a4:	f7e5 f96a 	bl	801087c <__aeabi_ddiv>
 802b5a8:	f7e5 faee 	bl	8010b88 <__aeabi_d2iz>
 802b5ac:	4680      	mov	r8, r0
 802b5ae:	f7e4 ffd1 	bl	8010554 <__aeabi_i2d>
 802b5b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b5b6:	f7e5 f837 	bl	8010628 <__aeabi_dmul>
 802b5ba:	4602      	mov	r2, r0
 802b5bc:	460b      	mov	r3, r1
 802b5be:	4620      	mov	r0, r4
 802b5c0:	4629      	mov	r1, r5
 802b5c2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802b5c6:	f7e4 fe77 	bl	80102b8 <__aeabi_dsub>
 802b5ca:	f806 4b01 	strb.w	r4, [r6], #1
 802b5ce:	9d07      	ldr	r5, [sp, #28]
 802b5d0:	eba6 040a 	sub.w	r4, r6, sl
 802b5d4:	42a5      	cmp	r5, r4
 802b5d6:	4602      	mov	r2, r0
 802b5d8:	460b      	mov	r3, r1
 802b5da:	f040 8118 	bne.w	802b80e <_dtoa_r+0x6b6>
 802b5de:	f7e4 fe6d 	bl	80102bc <__adddf3>
 802b5e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b5e6:	4604      	mov	r4, r0
 802b5e8:	460d      	mov	r5, r1
 802b5ea:	f7e5 faad 	bl	8010b48 <__aeabi_dcmpgt>
 802b5ee:	2800      	cmp	r0, #0
 802b5f0:	f040 80fa 	bne.w	802b7e8 <_dtoa_r+0x690>
 802b5f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b5f8:	4620      	mov	r0, r4
 802b5fa:	4629      	mov	r1, r5
 802b5fc:	f7e5 fa7c 	bl	8010af8 <__aeabi_dcmpeq>
 802b600:	b118      	cbz	r0, 802b60a <_dtoa_r+0x4b2>
 802b602:	f018 0f01 	tst.w	r8, #1
 802b606:	f040 80ef 	bne.w	802b7e8 <_dtoa_r+0x690>
 802b60a:	4649      	mov	r1, r9
 802b60c:	4658      	mov	r0, fp
 802b60e:	f004 fff8 	bl	8030602 <_Bfree>
 802b612:	2300      	movs	r3, #0
 802b614:	7033      	strb	r3, [r6, #0]
 802b616:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b618:	3701      	adds	r7, #1
 802b61a:	601f      	str	r7, [r3, #0]
 802b61c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802b61e:	2b00      	cmp	r3, #0
 802b620:	f43f add1 	beq.w	802b1c6 <_dtoa_r+0x6e>
 802b624:	601e      	str	r6, [r3, #0]
 802b626:	e5ce      	b.n	802b1c6 <_dtoa_r+0x6e>
 802b628:	07e2      	lsls	r2, r4, #31
 802b62a:	d505      	bpl.n	802b638 <_dtoa_r+0x4e0>
 802b62c:	e9d5 2300 	ldrd	r2, r3, [r5]
 802b630:	f7e4 fffa 	bl	8010628 <__aeabi_dmul>
 802b634:	3601      	adds	r6, #1
 802b636:	2301      	movs	r3, #1
 802b638:	1064      	asrs	r4, r4, #1
 802b63a:	3508      	adds	r5, #8
 802b63c:	e73f      	b.n	802b4be <_dtoa_r+0x366>
 802b63e:	2602      	movs	r6, #2
 802b640:	e742      	b.n	802b4c8 <_dtoa_r+0x370>
 802b642:	9c07      	ldr	r4, [sp, #28]
 802b644:	9704      	str	r7, [sp, #16]
 802b646:	e761      	b.n	802b50c <_dtoa_r+0x3b4>
 802b648:	4b27      	ldr	r3, [pc, #156]	@ (802b6e8 <_dtoa_r+0x590>)
 802b64a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802b64c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802b650:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802b654:	4454      	add	r4, sl
 802b656:	2900      	cmp	r1, #0
 802b658:	d054      	beq.n	802b704 <_dtoa_r+0x5ac>
 802b65a:	4929      	ldr	r1, [pc, #164]	@ (802b700 <_dtoa_r+0x5a8>)
 802b65c:	2000      	movs	r0, #0
 802b65e:	f7e5 f90d 	bl	801087c <__aeabi_ddiv>
 802b662:	4633      	mov	r3, r6
 802b664:	462a      	mov	r2, r5
 802b666:	f7e4 fe27 	bl	80102b8 <__aeabi_dsub>
 802b66a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802b66e:	4656      	mov	r6, sl
 802b670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b674:	f7e5 fa88 	bl	8010b88 <__aeabi_d2iz>
 802b678:	4605      	mov	r5, r0
 802b67a:	f7e4 ff6b 	bl	8010554 <__aeabi_i2d>
 802b67e:	4602      	mov	r2, r0
 802b680:	460b      	mov	r3, r1
 802b682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b686:	f7e4 fe17 	bl	80102b8 <__aeabi_dsub>
 802b68a:	3530      	adds	r5, #48	@ 0x30
 802b68c:	4602      	mov	r2, r0
 802b68e:	460b      	mov	r3, r1
 802b690:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802b694:	f806 5b01 	strb.w	r5, [r6], #1
 802b698:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802b69c:	f7e5 fa36 	bl	8010b0c <__aeabi_dcmplt>
 802b6a0:	2800      	cmp	r0, #0
 802b6a2:	d172      	bne.n	802b78a <_dtoa_r+0x632>
 802b6a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b6a8:	4911      	ldr	r1, [pc, #68]	@ (802b6f0 <_dtoa_r+0x598>)
 802b6aa:	2000      	movs	r0, #0
 802b6ac:	f7e4 fe04 	bl	80102b8 <__aeabi_dsub>
 802b6b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802b6b4:	f7e5 fa2a 	bl	8010b0c <__aeabi_dcmplt>
 802b6b8:	2800      	cmp	r0, #0
 802b6ba:	f040 8096 	bne.w	802b7ea <_dtoa_r+0x692>
 802b6be:	42a6      	cmp	r6, r4
 802b6c0:	f43f af50 	beq.w	802b564 <_dtoa_r+0x40c>
 802b6c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802b6c8:	4b0a      	ldr	r3, [pc, #40]	@ (802b6f4 <_dtoa_r+0x59c>)
 802b6ca:	2200      	movs	r2, #0
 802b6cc:	f7e4 ffac 	bl	8010628 <__aeabi_dmul>
 802b6d0:	4b08      	ldr	r3, [pc, #32]	@ (802b6f4 <_dtoa_r+0x59c>)
 802b6d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802b6d6:	2200      	movs	r2, #0
 802b6d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b6dc:	f7e4 ffa4 	bl	8010628 <__aeabi_dmul>
 802b6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b6e4:	e7c4      	b.n	802b670 <_dtoa_r+0x518>
 802b6e6:	bf00      	nop
 802b6e8:	080387e0 	.word	0x080387e0
 802b6ec:	080387b8 	.word	0x080387b8
 802b6f0:	3ff00000 	.word	0x3ff00000
 802b6f4:	40240000 	.word	0x40240000
 802b6f8:	401c0000 	.word	0x401c0000
 802b6fc:	40140000 	.word	0x40140000
 802b700:	3fe00000 	.word	0x3fe00000
 802b704:	4631      	mov	r1, r6
 802b706:	4628      	mov	r0, r5
 802b708:	f7e4 ff8e 	bl	8010628 <__aeabi_dmul>
 802b70c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802b710:	9415      	str	r4, [sp, #84]	@ 0x54
 802b712:	4656      	mov	r6, sl
 802b714:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b718:	f7e5 fa36 	bl	8010b88 <__aeabi_d2iz>
 802b71c:	4605      	mov	r5, r0
 802b71e:	f7e4 ff19 	bl	8010554 <__aeabi_i2d>
 802b722:	4602      	mov	r2, r0
 802b724:	460b      	mov	r3, r1
 802b726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b72a:	f7e4 fdc5 	bl	80102b8 <__aeabi_dsub>
 802b72e:	3530      	adds	r5, #48	@ 0x30
 802b730:	f806 5b01 	strb.w	r5, [r6], #1
 802b734:	4602      	mov	r2, r0
 802b736:	460b      	mov	r3, r1
 802b738:	42a6      	cmp	r6, r4
 802b73a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802b73e:	f04f 0200 	mov.w	r2, #0
 802b742:	d124      	bne.n	802b78e <_dtoa_r+0x636>
 802b744:	4bac      	ldr	r3, [pc, #688]	@ (802b9f8 <_dtoa_r+0x8a0>)
 802b746:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802b74a:	f7e4 fdb7 	bl	80102bc <__adddf3>
 802b74e:	4602      	mov	r2, r0
 802b750:	460b      	mov	r3, r1
 802b752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b756:	f7e5 f9f7 	bl	8010b48 <__aeabi_dcmpgt>
 802b75a:	2800      	cmp	r0, #0
 802b75c:	d145      	bne.n	802b7ea <_dtoa_r+0x692>
 802b75e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802b762:	49a5      	ldr	r1, [pc, #660]	@ (802b9f8 <_dtoa_r+0x8a0>)
 802b764:	2000      	movs	r0, #0
 802b766:	f7e4 fda7 	bl	80102b8 <__aeabi_dsub>
 802b76a:	4602      	mov	r2, r0
 802b76c:	460b      	mov	r3, r1
 802b76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802b772:	f7e5 f9cb 	bl	8010b0c <__aeabi_dcmplt>
 802b776:	2800      	cmp	r0, #0
 802b778:	f43f aef4 	beq.w	802b564 <_dtoa_r+0x40c>
 802b77c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802b77e:	1e73      	subs	r3, r6, #1
 802b780:	9315      	str	r3, [sp, #84]	@ 0x54
 802b782:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802b786:	2b30      	cmp	r3, #48	@ 0x30
 802b788:	d0f8      	beq.n	802b77c <_dtoa_r+0x624>
 802b78a:	9f04      	ldr	r7, [sp, #16]
 802b78c:	e73d      	b.n	802b60a <_dtoa_r+0x4b2>
 802b78e:	4b9b      	ldr	r3, [pc, #620]	@ (802b9fc <_dtoa_r+0x8a4>)
 802b790:	f7e4 ff4a 	bl	8010628 <__aeabi_dmul>
 802b794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802b798:	e7bc      	b.n	802b714 <_dtoa_r+0x5bc>
 802b79a:	d10c      	bne.n	802b7b6 <_dtoa_r+0x65e>
 802b79c:	4b98      	ldr	r3, [pc, #608]	@ (802ba00 <_dtoa_r+0x8a8>)
 802b79e:	2200      	movs	r2, #0
 802b7a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b7a4:	f7e4 ff40 	bl	8010628 <__aeabi_dmul>
 802b7a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b7ac:	f7e5 f9c2 	bl	8010b34 <__aeabi_dcmpge>
 802b7b0:	2800      	cmp	r0, #0
 802b7b2:	f000 8157 	beq.w	802ba64 <_dtoa_r+0x90c>
 802b7b6:	2400      	movs	r4, #0
 802b7b8:	4625      	mov	r5, r4
 802b7ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b7bc:	43db      	mvns	r3, r3
 802b7be:	9304      	str	r3, [sp, #16]
 802b7c0:	4656      	mov	r6, sl
 802b7c2:	2700      	movs	r7, #0
 802b7c4:	4621      	mov	r1, r4
 802b7c6:	4658      	mov	r0, fp
 802b7c8:	f004 ff1b 	bl	8030602 <_Bfree>
 802b7cc:	2d00      	cmp	r5, #0
 802b7ce:	d0dc      	beq.n	802b78a <_dtoa_r+0x632>
 802b7d0:	b12f      	cbz	r7, 802b7de <_dtoa_r+0x686>
 802b7d2:	42af      	cmp	r7, r5
 802b7d4:	d003      	beq.n	802b7de <_dtoa_r+0x686>
 802b7d6:	4639      	mov	r1, r7
 802b7d8:	4658      	mov	r0, fp
 802b7da:	f004 ff12 	bl	8030602 <_Bfree>
 802b7de:	4629      	mov	r1, r5
 802b7e0:	4658      	mov	r0, fp
 802b7e2:	f004 ff0e 	bl	8030602 <_Bfree>
 802b7e6:	e7d0      	b.n	802b78a <_dtoa_r+0x632>
 802b7e8:	9704      	str	r7, [sp, #16]
 802b7ea:	4633      	mov	r3, r6
 802b7ec:	461e      	mov	r6, r3
 802b7ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802b7f2:	2a39      	cmp	r2, #57	@ 0x39
 802b7f4:	d107      	bne.n	802b806 <_dtoa_r+0x6ae>
 802b7f6:	459a      	cmp	sl, r3
 802b7f8:	d1f8      	bne.n	802b7ec <_dtoa_r+0x694>
 802b7fa:	9a04      	ldr	r2, [sp, #16]
 802b7fc:	3201      	adds	r2, #1
 802b7fe:	9204      	str	r2, [sp, #16]
 802b800:	2230      	movs	r2, #48	@ 0x30
 802b802:	f88a 2000 	strb.w	r2, [sl]
 802b806:	781a      	ldrb	r2, [r3, #0]
 802b808:	3201      	adds	r2, #1
 802b80a:	701a      	strb	r2, [r3, #0]
 802b80c:	e7bd      	b.n	802b78a <_dtoa_r+0x632>
 802b80e:	4b7b      	ldr	r3, [pc, #492]	@ (802b9fc <_dtoa_r+0x8a4>)
 802b810:	2200      	movs	r2, #0
 802b812:	f7e4 ff09 	bl	8010628 <__aeabi_dmul>
 802b816:	2200      	movs	r2, #0
 802b818:	2300      	movs	r3, #0
 802b81a:	4604      	mov	r4, r0
 802b81c:	460d      	mov	r5, r1
 802b81e:	f7e5 f96b 	bl	8010af8 <__aeabi_dcmpeq>
 802b822:	2800      	cmp	r0, #0
 802b824:	f43f aeba 	beq.w	802b59c <_dtoa_r+0x444>
 802b828:	e6ef      	b.n	802b60a <_dtoa_r+0x4b2>
 802b82a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802b82c:	2a00      	cmp	r2, #0
 802b82e:	f000 80db 	beq.w	802b9e8 <_dtoa_r+0x890>
 802b832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b834:	2a01      	cmp	r2, #1
 802b836:	f300 80bf 	bgt.w	802b9b8 <_dtoa_r+0x860>
 802b83a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802b83c:	2a00      	cmp	r2, #0
 802b83e:	f000 80b7 	beq.w	802b9b0 <_dtoa_r+0x858>
 802b842:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802b846:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802b848:	4646      	mov	r6, r8
 802b84a:	9a08      	ldr	r2, [sp, #32]
 802b84c:	2101      	movs	r1, #1
 802b84e:	441a      	add	r2, r3
 802b850:	4658      	mov	r0, fp
 802b852:	4498      	add	r8, r3
 802b854:	9208      	str	r2, [sp, #32]
 802b856:	f004 ffb9 	bl	80307cc <__i2b>
 802b85a:	4605      	mov	r5, r0
 802b85c:	b15e      	cbz	r6, 802b876 <_dtoa_r+0x71e>
 802b85e:	9b08      	ldr	r3, [sp, #32]
 802b860:	2b00      	cmp	r3, #0
 802b862:	dd08      	ble.n	802b876 <_dtoa_r+0x71e>
 802b864:	42b3      	cmp	r3, r6
 802b866:	9a08      	ldr	r2, [sp, #32]
 802b868:	bfa8      	it	ge
 802b86a:	4633      	movge	r3, r6
 802b86c:	eba8 0803 	sub.w	r8, r8, r3
 802b870:	1af6      	subs	r6, r6, r3
 802b872:	1ad3      	subs	r3, r2, r3
 802b874:	9308      	str	r3, [sp, #32]
 802b876:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b878:	b1f3      	cbz	r3, 802b8b8 <_dtoa_r+0x760>
 802b87a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802b87c:	2b00      	cmp	r3, #0
 802b87e:	f000 80b7 	beq.w	802b9f0 <_dtoa_r+0x898>
 802b882:	b18c      	cbz	r4, 802b8a8 <_dtoa_r+0x750>
 802b884:	4629      	mov	r1, r5
 802b886:	4622      	mov	r2, r4
 802b888:	4658      	mov	r0, fp
 802b88a:	f005 f85f 	bl	803094c <__pow5mult>
 802b88e:	464a      	mov	r2, r9
 802b890:	4601      	mov	r1, r0
 802b892:	4605      	mov	r5, r0
 802b894:	4658      	mov	r0, fp
 802b896:	f004 ffaf 	bl	80307f8 <__multiply>
 802b89a:	4649      	mov	r1, r9
 802b89c:	9004      	str	r0, [sp, #16]
 802b89e:	4658      	mov	r0, fp
 802b8a0:	f004 feaf 	bl	8030602 <_Bfree>
 802b8a4:	9b04      	ldr	r3, [sp, #16]
 802b8a6:	4699      	mov	r9, r3
 802b8a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b8aa:	1b1a      	subs	r2, r3, r4
 802b8ac:	d004      	beq.n	802b8b8 <_dtoa_r+0x760>
 802b8ae:	4649      	mov	r1, r9
 802b8b0:	4658      	mov	r0, fp
 802b8b2:	f005 f84b 	bl	803094c <__pow5mult>
 802b8b6:	4681      	mov	r9, r0
 802b8b8:	2101      	movs	r1, #1
 802b8ba:	4658      	mov	r0, fp
 802b8bc:	f004 ff86 	bl	80307cc <__i2b>
 802b8c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b8c2:	4604      	mov	r4, r0
 802b8c4:	2b00      	cmp	r3, #0
 802b8c6:	f000 81cc 	beq.w	802bc62 <_dtoa_r+0xb0a>
 802b8ca:	461a      	mov	r2, r3
 802b8cc:	4601      	mov	r1, r0
 802b8ce:	4658      	mov	r0, fp
 802b8d0:	f005 f83c 	bl	803094c <__pow5mult>
 802b8d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b8d6:	2b01      	cmp	r3, #1
 802b8d8:	4604      	mov	r4, r0
 802b8da:	f300 8095 	bgt.w	802ba08 <_dtoa_r+0x8b0>
 802b8de:	9b02      	ldr	r3, [sp, #8]
 802b8e0:	2b00      	cmp	r3, #0
 802b8e2:	f040 8087 	bne.w	802b9f4 <_dtoa_r+0x89c>
 802b8e6:	9b03      	ldr	r3, [sp, #12]
 802b8e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b8ec:	2b00      	cmp	r3, #0
 802b8ee:	f040 8089 	bne.w	802ba04 <_dtoa_r+0x8ac>
 802b8f2:	9b03      	ldr	r3, [sp, #12]
 802b8f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802b8f8:	0d1b      	lsrs	r3, r3, #20
 802b8fa:	051b      	lsls	r3, r3, #20
 802b8fc:	b12b      	cbz	r3, 802b90a <_dtoa_r+0x7b2>
 802b8fe:	9b08      	ldr	r3, [sp, #32]
 802b900:	3301      	adds	r3, #1
 802b902:	9308      	str	r3, [sp, #32]
 802b904:	f108 0801 	add.w	r8, r8, #1
 802b908:	2301      	movs	r3, #1
 802b90a:	930a      	str	r3, [sp, #40]	@ 0x28
 802b90c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b90e:	2b00      	cmp	r3, #0
 802b910:	f000 81ad 	beq.w	802bc6e <_dtoa_r+0xb16>
 802b914:	6923      	ldr	r3, [r4, #16]
 802b916:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802b91a:	6918      	ldr	r0, [r3, #16]
 802b91c:	f004 ff0a 	bl	8030734 <__hi0bits>
 802b920:	f1c0 0020 	rsb	r0, r0, #32
 802b924:	9b08      	ldr	r3, [sp, #32]
 802b926:	4418      	add	r0, r3
 802b928:	f010 001f 	ands.w	r0, r0, #31
 802b92c:	d077      	beq.n	802ba1e <_dtoa_r+0x8c6>
 802b92e:	f1c0 0320 	rsb	r3, r0, #32
 802b932:	2b04      	cmp	r3, #4
 802b934:	dd6b      	ble.n	802ba0e <_dtoa_r+0x8b6>
 802b936:	9b08      	ldr	r3, [sp, #32]
 802b938:	f1c0 001c 	rsb	r0, r0, #28
 802b93c:	4403      	add	r3, r0
 802b93e:	4480      	add	r8, r0
 802b940:	4406      	add	r6, r0
 802b942:	9308      	str	r3, [sp, #32]
 802b944:	f1b8 0f00 	cmp.w	r8, #0
 802b948:	dd05      	ble.n	802b956 <_dtoa_r+0x7fe>
 802b94a:	4649      	mov	r1, r9
 802b94c:	4642      	mov	r2, r8
 802b94e:	4658      	mov	r0, fp
 802b950:	f005 f83c 	bl	80309cc <__lshift>
 802b954:	4681      	mov	r9, r0
 802b956:	9b08      	ldr	r3, [sp, #32]
 802b958:	2b00      	cmp	r3, #0
 802b95a:	dd05      	ble.n	802b968 <_dtoa_r+0x810>
 802b95c:	4621      	mov	r1, r4
 802b95e:	461a      	mov	r2, r3
 802b960:	4658      	mov	r0, fp
 802b962:	f005 f833 	bl	80309cc <__lshift>
 802b966:	4604      	mov	r4, r0
 802b968:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b96a:	2b00      	cmp	r3, #0
 802b96c:	d059      	beq.n	802ba22 <_dtoa_r+0x8ca>
 802b96e:	4621      	mov	r1, r4
 802b970:	4648      	mov	r0, r9
 802b972:	f005 f897 	bl	8030aa4 <__mcmp>
 802b976:	2800      	cmp	r0, #0
 802b978:	da53      	bge.n	802ba22 <_dtoa_r+0x8ca>
 802b97a:	1e7b      	subs	r3, r7, #1
 802b97c:	9304      	str	r3, [sp, #16]
 802b97e:	4649      	mov	r1, r9
 802b980:	2300      	movs	r3, #0
 802b982:	220a      	movs	r2, #10
 802b984:	4658      	mov	r0, fp
 802b986:	f004 fe45 	bl	8030614 <__multadd>
 802b98a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802b98c:	4681      	mov	r9, r0
 802b98e:	2b00      	cmp	r3, #0
 802b990:	f000 816f 	beq.w	802bc72 <_dtoa_r+0xb1a>
 802b994:	2300      	movs	r3, #0
 802b996:	4629      	mov	r1, r5
 802b998:	220a      	movs	r2, #10
 802b99a:	4658      	mov	r0, fp
 802b99c:	f004 fe3a 	bl	8030614 <__multadd>
 802b9a0:	9b00      	ldr	r3, [sp, #0]
 802b9a2:	2b00      	cmp	r3, #0
 802b9a4:	4605      	mov	r5, r0
 802b9a6:	dc67      	bgt.n	802ba78 <_dtoa_r+0x920>
 802b9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b9aa:	2b02      	cmp	r3, #2
 802b9ac:	dc41      	bgt.n	802ba32 <_dtoa_r+0x8da>
 802b9ae:	e063      	b.n	802ba78 <_dtoa_r+0x920>
 802b9b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b9b2:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802b9b6:	e746      	b.n	802b846 <_dtoa_r+0x6ee>
 802b9b8:	9b07      	ldr	r3, [sp, #28]
 802b9ba:	1e5c      	subs	r4, r3, #1
 802b9bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b9be:	42a3      	cmp	r3, r4
 802b9c0:	bfbf      	itttt	lt
 802b9c2:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802b9c4:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802b9c6:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802b9c8:	1ae3      	sublt	r3, r4, r3
 802b9ca:	bfb4      	ite	lt
 802b9cc:	18d2      	addlt	r2, r2, r3
 802b9ce:	1b1c      	subge	r4, r3, r4
 802b9d0:	9b07      	ldr	r3, [sp, #28]
 802b9d2:	bfbc      	itt	lt
 802b9d4:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802b9d6:	2400      	movlt	r4, #0
 802b9d8:	2b00      	cmp	r3, #0
 802b9da:	bfb5      	itete	lt
 802b9dc:	eba8 0603 	sublt.w	r6, r8, r3
 802b9e0:	9b07      	ldrge	r3, [sp, #28]
 802b9e2:	2300      	movlt	r3, #0
 802b9e4:	4646      	movge	r6, r8
 802b9e6:	e730      	b.n	802b84a <_dtoa_r+0x6f2>
 802b9e8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802b9ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802b9ec:	4646      	mov	r6, r8
 802b9ee:	e735      	b.n	802b85c <_dtoa_r+0x704>
 802b9f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802b9f2:	e75c      	b.n	802b8ae <_dtoa_r+0x756>
 802b9f4:	2300      	movs	r3, #0
 802b9f6:	e788      	b.n	802b90a <_dtoa_r+0x7b2>
 802b9f8:	3fe00000 	.word	0x3fe00000
 802b9fc:	40240000 	.word	0x40240000
 802ba00:	40140000 	.word	0x40140000
 802ba04:	9b02      	ldr	r3, [sp, #8]
 802ba06:	e780      	b.n	802b90a <_dtoa_r+0x7b2>
 802ba08:	2300      	movs	r3, #0
 802ba0a:	930a      	str	r3, [sp, #40]	@ 0x28
 802ba0c:	e782      	b.n	802b914 <_dtoa_r+0x7bc>
 802ba0e:	d099      	beq.n	802b944 <_dtoa_r+0x7ec>
 802ba10:	9a08      	ldr	r2, [sp, #32]
 802ba12:	331c      	adds	r3, #28
 802ba14:	441a      	add	r2, r3
 802ba16:	4498      	add	r8, r3
 802ba18:	441e      	add	r6, r3
 802ba1a:	9208      	str	r2, [sp, #32]
 802ba1c:	e792      	b.n	802b944 <_dtoa_r+0x7ec>
 802ba1e:	4603      	mov	r3, r0
 802ba20:	e7f6      	b.n	802ba10 <_dtoa_r+0x8b8>
 802ba22:	9b07      	ldr	r3, [sp, #28]
 802ba24:	9704      	str	r7, [sp, #16]
 802ba26:	2b00      	cmp	r3, #0
 802ba28:	dc20      	bgt.n	802ba6c <_dtoa_r+0x914>
 802ba2a:	9300      	str	r3, [sp, #0]
 802ba2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ba2e:	2b02      	cmp	r3, #2
 802ba30:	dd1e      	ble.n	802ba70 <_dtoa_r+0x918>
 802ba32:	9b00      	ldr	r3, [sp, #0]
 802ba34:	2b00      	cmp	r3, #0
 802ba36:	f47f aec0 	bne.w	802b7ba <_dtoa_r+0x662>
 802ba3a:	4621      	mov	r1, r4
 802ba3c:	2205      	movs	r2, #5
 802ba3e:	4658      	mov	r0, fp
 802ba40:	f004 fde8 	bl	8030614 <__multadd>
 802ba44:	4601      	mov	r1, r0
 802ba46:	4604      	mov	r4, r0
 802ba48:	4648      	mov	r0, r9
 802ba4a:	f005 f82b 	bl	8030aa4 <__mcmp>
 802ba4e:	2800      	cmp	r0, #0
 802ba50:	f77f aeb3 	ble.w	802b7ba <_dtoa_r+0x662>
 802ba54:	4656      	mov	r6, sl
 802ba56:	2331      	movs	r3, #49	@ 0x31
 802ba58:	f806 3b01 	strb.w	r3, [r6], #1
 802ba5c:	9b04      	ldr	r3, [sp, #16]
 802ba5e:	3301      	adds	r3, #1
 802ba60:	9304      	str	r3, [sp, #16]
 802ba62:	e6ae      	b.n	802b7c2 <_dtoa_r+0x66a>
 802ba64:	9c07      	ldr	r4, [sp, #28]
 802ba66:	9704      	str	r7, [sp, #16]
 802ba68:	4625      	mov	r5, r4
 802ba6a:	e7f3      	b.n	802ba54 <_dtoa_r+0x8fc>
 802ba6c:	9b07      	ldr	r3, [sp, #28]
 802ba6e:	9300      	str	r3, [sp, #0]
 802ba70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ba72:	2b00      	cmp	r3, #0
 802ba74:	f000 8101 	beq.w	802bc7a <_dtoa_r+0xb22>
 802ba78:	2e00      	cmp	r6, #0
 802ba7a:	dd05      	ble.n	802ba88 <_dtoa_r+0x930>
 802ba7c:	4629      	mov	r1, r5
 802ba7e:	4632      	mov	r2, r6
 802ba80:	4658      	mov	r0, fp
 802ba82:	f004 ffa3 	bl	80309cc <__lshift>
 802ba86:	4605      	mov	r5, r0
 802ba88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ba8a:	2b00      	cmp	r3, #0
 802ba8c:	d059      	beq.n	802bb42 <_dtoa_r+0x9ea>
 802ba8e:	6869      	ldr	r1, [r5, #4]
 802ba90:	4658      	mov	r0, fp
 802ba92:	f004 fd91 	bl	80305b8 <_Balloc>
 802ba96:	4606      	mov	r6, r0
 802ba98:	b920      	cbnz	r0, 802baa4 <_dtoa_r+0x94c>
 802ba9a:	4b83      	ldr	r3, [pc, #524]	@ (802bca8 <_dtoa_r+0xb50>)
 802ba9c:	4602      	mov	r2, r0
 802ba9e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802baa2:	e480      	b.n	802b3a6 <_dtoa_r+0x24e>
 802baa4:	692a      	ldr	r2, [r5, #16]
 802baa6:	3202      	adds	r2, #2
 802baa8:	0092      	lsls	r2, r2, #2
 802baaa:	f105 010c 	add.w	r1, r5, #12
 802baae:	300c      	adds	r0, #12
 802bab0:	f7ff fa52 	bl	802af58 <memcpy>
 802bab4:	2201      	movs	r2, #1
 802bab6:	4631      	mov	r1, r6
 802bab8:	4658      	mov	r0, fp
 802baba:	f004 ff87 	bl	80309cc <__lshift>
 802babe:	f10a 0301 	add.w	r3, sl, #1
 802bac2:	9307      	str	r3, [sp, #28]
 802bac4:	9b00      	ldr	r3, [sp, #0]
 802bac6:	4453      	add	r3, sl
 802bac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802baca:	9b02      	ldr	r3, [sp, #8]
 802bacc:	f003 0301 	and.w	r3, r3, #1
 802bad0:	462f      	mov	r7, r5
 802bad2:	930a      	str	r3, [sp, #40]	@ 0x28
 802bad4:	4605      	mov	r5, r0
 802bad6:	9b07      	ldr	r3, [sp, #28]
 802bad8:	4621      	mov	r1, r4
 802bada:	3b01      	subs	r3, #1
 802badc:	4648      	mov	r0, r9
 802bade:	9300      	str	r3, [sp, #0]
 802bae0:	f7ff faaf 	bl	802b042 <quorem>
 802bae4:	4639      	mov	r1, r7
 802bae6:	9002      	str	r0, [sp, #8]
 802bae8:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802baec:	4648      	mov	r0, r9
 802baee:	f004 ffd9 	bl	8030aa4 <__mcmp>
 802baf2:	462a      	mov	r2, r5
 802baf4:	9008      	str	r0, [sp, #32]
 802baf6:	4621      	mov	r1, r4
 802baf8:	4658      	mov	r0, fp
 802bafa:	f004 ffef 	bl	8030adc <__mdiff>
 802bafe:	68c2      	ldr	r2, [r0, #12]
 802bb00:	4606      	mov	r6, r0
 802bb02:	bb02      	cbnz	r2, 802bb46 <_dtoa_r+0x9ee>
 802bb04:	4601      	mov	r1, r0
 802bb06:	4648      	mov	r0, r9
 802bb08:	f004 ffcc 	bl	8030aa4 <__mcmp>
 802bb0c:	4602      	mov	r2, r0
 802bb0e:	4631      	mov	r1, r6
 802bb10:	4658      	mov	r0, fp
 802bb12:	920e      	str	r2, [sp, #56]	@ 0x38
 802bb14:	f004 fd75 	bl	8030602 <_Bfree>
 802bb18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bb1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802bb1c:	9e07      	ldr	r6, [sp, #28]
 802bb1e:	ea43 0102 	orr.w	r1, r3, r2
 802bb22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802bb24:	4319      	orrs	r1, r3
 802bb26:	d110      	bne.n	802bb4a <_dtoa_r+0x9f2>
 802bb28:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802bb2c:	d029      	beq.n	802bb82 <_dtoa_r+0xa2a>
 802bb2e:	9b08      	ldr	r3, [sp, #32]
 802bb30:	2b00      	cmp	r3, #0
 802bb32:	dd02      	ble.n	802bb3a <_dtoa_r+0x9e2>
 802bb34:	9b02      	ldr	r3, [sp, #8]
 802bb36:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802bb3a:	9b00      	ldr	r3, [sp, #0]
 802bb3c:	f883 8000 	strb.w	r8, [r3]
 802bb40:	e640      	b.n	802b7c4 <_dtoa_r+0x66c>
 802bb42:	4628      	mov	r0, r5
 802bb44:	e7bb      	b.n	802babe <_dtoa_r+0x966>
 802bb46:	2201      	movs	r2, #1
 802bb48:	e7e1      	b.n	802bb0e <_dtoa_r+0x9b6>
 802bb4a:	9b08      	ldr	r3, [sp, #32]
 802bb4c:	2b00      	cmp	r3, #0
 802bb4e:	db04      	blt.n	802bb5a <_dtoa_r+0xa02>
 802bb50:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802bb52:	430b      	orrs	r3, r1
 802bb54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802bb56:	430b      	orrs	r3, r1
 802bb58:	d120      	bne.n	802bb9c <_dtoa_r+0xa44>
 802bb5a:	2a00      	cmp	r2, #0
 802bb5c:	dded      	ble.n	802bb3a <_dtoa_r+0x9e2>
 802bb5e:	4649      	mov	r1, r9
 802bb60:	2201      	movs	r2, #1
 802bb62:	4658      	mov	r0, fp
 802bb64:	f004 ff32 	bl	80309cc <__lshift>
 802bb68:	4621      	mov	r1, r4
 802bb6a:	4681      	mov	r9, r0
 802bb6c:	f004 ff9a 	bl	8030aa4 <__mcmp>
 802bb70:	2800      	cmp	r0, #0
 802bb72:	dc03      	bgt.n	802bb7c <_dtoa_r+0xa24>
 802bb74:	d1e1      	bne.n	802bb3a <_dtoa_r+0x9e2>
 802bb76:	f018 0f01 	tst.w	r8, #1
 802bb7a:	d0de      	beq.n	802bb3a <_dtoa_r+0x9e2>
 802bb7c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802bb80:	d1d8      	bne.n	802bb34 <_dtoa_r+0x9dc>
 802bb82:	9a00      	ldr	r2, [sp, #0]
 802bb84:	2339      	movs	r3, #57	@ 0x39
 802bb86:	7013      	strb	r3, [r2, #0]
 802bb88:	4633      	mov	r3, r6
 802bb8a:	461e      	mov	r6, r3
 802bb8c:	3b01      	subs	r3, #1
 802bb8e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802bb92:	2a39      	cmp	r2, #57	@ 0x39
 802bb94:	d052      	beq.n	802bc3c <_dtoa_r+0xae4>
 802bb96:	3201      	adds	r2, #1
 802bb98:	701a      	strb	r2, [r3, #0]
 802bb9a:	e613      	b.n	802b7c4 <_dtoa_r+0x66c>
 802bb9c:	2a00      	cmp	r2, #0
 802bb9e:	dd07      	ble.n	802bbb0 <_dtoa_r+0xa58>
 802bba0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802bba4:	d0ed      	beq.n	802bb82 <_dtoa_r+0xa2a>
 802bba6:	9a00      	ldr	r2, [sp, #0]
 802bba8:	f108 0301 	add.w	r3, r8, #1
 802bbac:	7013      	strb	r3, [r2, #0]
 802bbae:	e609      	b.n	802b7c4 <_dtoa_r+0x66c>
 802bbb0:	9b07      	ldr	r3, [sp, #28]
 802bbb2:	9a07      	ldr	r2, [sp, #28]
 802bbb4:	f803 8c01 	strb.w	r8, [r3, #-1]
 802bbb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802bbba:	4293      	cmp	r3, r2
 802bbbc:	d028      	beq.n	802bc10 <_dtoa_r+0xab8>
 802bbbe:	4649      	mov	r1, r9
 802bbc0:	2300      	movs	r3, #0
 802bbc2:	220a      	movs	r2, #10
 802bbc4:	4658      	mov	r0, fp
 802bbc6:	f004 fd25 	bl	8030614 <__multadd>
 802bbca:	42af      	cmp	r7, r5
 802bbcc:	4681      	mov	r9, r0
 802bbce:	f04f 0300 	mov.w	r3, #0
 802bbd2:	f04f 020a 	mov.w	r2, #10
 802bbd6:	4639      	mov	r1, r7
 802bbd8:	4658      	mov	r0, fp
 802bbda:	d107      	bne.n	802bbec <_dtoa_r+0xa94>
 802bbdc:	f004 fd1a 	bl	8030614 <__multadd>
 802bbe0:	4607      	mov	r7, r0
 802bbe2:	4605      	mov	r5, r0
 802bbe4:	9b07      	ldr	r3, [sp, #28]
 802bbe6:	3301      	adds	r3, #1
 802bbe8:	9307      	str	r3, [sp, #28]
 802bbea:	e774      	b.n	802bad6 <_dtoa_r+0x97e>
 802bbec:	f004 fd12 	bl	8030614 <__multadd>
 802bbf0:	4629      	mov	r1, r5
 802bbf2:	4607      	mov	r7, r0
 802bbf4:	2300      	movs	r3, #0
 802bbf6:	220a      	movs	r2, #10
 802bbf8:	4658      	mov	r0, fp
 802bbfa:	f004 fd0b 	bl	8030614 <__multadd>
 802bbfe:	4605      	mov	r5, r0
 802bc00:	e7f0      	b.n	802bbe4 <_dtoa_r+0xa8c>
 802bc02:	9b00      	ldr	r3, [sp, #0]
 802bc04:	2b00      	cmp	r3, #0
 802bc06:	bfcc      	ite	gt
 802bc08:	461e      	movgt	r6, r3
 802bc0a:	2601      	movle	r6, #1
 802bc0c:	4456      	add	r6, sl
 802bc0e:	2700      	movs	r7, #0
 802bc10:	4649      	mov	r1, r9
 802bc12:	2201      	movs	r2, #1
 802bc14:	4658      	mov	r0, fp
 802bc16:	f004 fed9 	bl	80309cc <__lshift>
 802bc1a:	4621      	mov	r1, r4
 802bc1c:	4681      	mov	r9, r0
 802bc1e:	f004 ff41 	bl	8030aa4 <__mcmp>
 802bc22:	2800      	cmp	r0, #0
 802bc24:	dcb0      	bgt.n	802bb88 <_dtoa_r+0xa30>
 802bc26:	d102      	bne.n	802bc2e <_dtoa_r+0xad6>
 802bc28:	f018 0f01 	tst.w	r8, #1
 802bc2c:	d1ac      	bne.n	802bb88 <_dtoa_r+0xa30>
 802bc2e:	4633      	mov	r3, r6
 802bc30:	461e      	mov	r6, r3
 802bc32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802bc36:	2a30      	cmp	r2, #48	@ 0x30
 802bc38:	d0fa      	beq.n	802bc30 <_dtoa_r+0xad8>
 802bc3a:	e5c3      	b.n	802b7c4 <_dtoa_r+0x66c>
 802bc3c:	459a      	cmp	sl, r3
 802bc3e:	d1a4      	bne.n	802bb8a <_dtoa_r+0xa32>
 802bc40:	9b04      	ldr	r3, [sp, #16]
 802bc42:	3301      	adds	r3, #1
 802bc44:	9304      	str	r3, [sp, #16]
 802bc46:	2331      	movs	r3, #49	@ 0x31
 802bc48:	f88a 3000 	strb.w	r3, [sl]
 802bc4c:	e5ba      	b.n	802b7c4 <_dtoa_r+0x66c>
 802bc4e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802bc50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802bcac <_dtoa_r+0xb54>
 802bc54:	2b00      	cmp	r3, #0
 802bc56:	f43f aab6 	beq.w	802b1c6 <_dtoa_r+0x6e>
 802bc5a:	f10a 0308 	add.w	r3, sl, #8
 802bc5e:	f7ff bab0 	b.w	802b1c2 <_dtoa_r+0x6a>
 802bc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bc64:	2b01      	cmp	r3, #1
 802bc66:	f77f ae3a 	ble.w	802b8de <_dtoa_r+0x786>
 802bc6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802bc6c:	930a      	str	r3, [sp, #40]	@ 0x28
 802bc6e:	2001      	movs	r0, #1
 802bc70:	e658      	b.n	802b924 <_dtoa_r+0x7cc>
 802bc72:	9b00      	ldr	r3, [sp, #0]
 802bc74:	2b00      	cmp	r3, #0
 802bc76:	f77f aed9 	ble.w	802ba2c <_dtoa_r+0x8d4>
 802bc7a:	4656      	mov	r6, sl
 802bc7c:	4621      	mov	r1, r4
 802bc7e:	4648      	mov	r0, r9
 802bc80:	f7ff f9df 	bl	802b042 <quorem>
 802bc84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802bc88:	f806 8b01 	strb.w	r8, [r6], #1
 802bc8c:	9b00      	ldr	r3, [sp, #0]
 802bc8e:	eba6 020a 	sub.w	r2, r6, sl
 802bc92:	4293      	cmp	r3, r2
 802bc94:	ddb5      	ble.n	802bc02 <_dtoa_r+0xaaa>
 802bc96:	4649      	mov	r1, r9
 802bc98:	2300      	movs	r3, #0
 802bc9a:	220a      	movs	r2, #10
 802bc9c:	4658      	mov	r0, fp
 802bc9e:	f004 fcb9 	bl	8030614 <__multadd>
 802bca2:	4681      	mov	r9, r0
 802bca4:	e7ea      	b.n	802bc7c <_dtoa_r+0xb24>
 802bca6:	bf00      	nop
 802bca8:	0803865a 	.word	0x0803865a
 802bcac:	0803864d 	.word	0x0803864d

0802bcb0 <_malloc_trim_r>:
 802bcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bcb4:	4606      	mov	r6, r0
 802bcb6:	2008      	movs	r0, #8
 802bcb8:	4689      	mov	r9, r1
 802bcba:	f006 fb53 	bl	8032364 <sysconf>
 802bcbe:	4f24      	ldr	r7, [pc, #144]	@ (802bd50 <_malloc_trim_r+0xa0>)
 802bcc0:	4680      	mov	r8, r0
 802bcc2:	4630      	mov	r0, r6
 802bcc4:	f004 fc6c 	bl	80305a0 <__malloc_lock>
 802bcc8:	68bb      	ldr	r3, [r7, #8]
 802bcca:	685d      	ldr	r5, [r3, #4]
 802bccc:	f025 0503 	bic.w	r5, r5, #3
 802bcd0:	f1a5 0411 	sub.w	r4, r5, #17
 802bcd4:	eba4 0409 	sub.w	r4, r4, r9
 802bcd8:	4444      	add	r4, r8
 802bcda:	fbb4 f4f8 	udiv	r4, r4, r8
 802bcde:	3c01      	subs	r4, #1
 802bce0:	fb08 f404 	mul.w	r4, r8, r4
 802bce4:	45a0      	cmp	r8, r4
 802bce6:	dd05      	ble.n	802bcf4 <_malloc_trim_r+0x44>
 802bce8:	4630      	mov	r0, r6
 802bcea:	f004 fc5f 	bl	80305ac <__malloc_unlock>
 802bcee:	2000      	movs	r0, #0
 802bcf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bcf4:	2100      	movs	r1, #0
 802bcf6:	4630      	mov	r0, r6
 802bcf8:	f006 fb24 	bl	8032344 <_sbrk_r>
 802bcfc:	68bb      	ldr	r3, [r7, #8]
 802bcfe:	442b      	add	r3, r5
 802bd00:	4298      	cmp	r0, r3
 802bd02:	d1f1      	bne.n	802bce8 <_malloc_trim_r+0x38>
 802bd04:	4261      	negs	r1, r4
 802bd06:	4630      	mov	r0, r6
 802bd08:	f006 fb1c 	bl	8032344 <_sbrk_r>
 802bd0c:	3001      	adds	r0, #1
 802bd0e:	d110      	bne.n	802bd32 <_malloc_trim_r+0x82>
 802bd10:	2100      	movs	r1, #0
 802bd12:	4630      	mov	r0, r6
 802bd14:	f006 fb16 	bl	8032344 <_sbrk_r>
 802bd18:	68ba      	ldr	r2, [r7, #8]
 802bd1a:	1a83      	subs	r3, r0, r2
 802bd1c:	2b0f      	cmp	r3, #15
 802bd1e:	dde3      	ble.n	802bce8 <_malloc_trim_r+0x38>
 802bd20:	490c      	ldr	r1, [pc, #48]	@ (802bd54 <_malloc_trim_r+0xa4>)
 802bd22:	6809      	ldr	r1, [r1, #0]
 802bd24:	1a40      	subs	r0, r0, r1
 802bd26:	490c      	ldr	r1, [pc, #48]	@ (802bd58 <_malloc_trim_r+0xa8>)
 802bd28:	f043 0301 	orr.w	r3, r3, #1
 802bd2c:	6008      	str	r0, [r1, #0]
 802bd2e:	6053      	str	r3, [r2, #4]
 802bd30:	e7da      	b.n	802bce8 <_malloc_trim_r+0x38>
 802bd32:	68bb      	ldr	r3, [r7, #8]
 802bd34:	4a08      	ldr	r2, [pc, #32]	@ (802bd58 <_malloc_trim_r+0xa8>)
 802bd36:	1b2d      	subs	r5, r5, r4
 802bd38:	f045 0501 	orr.w	r5, r5, #1
 802bd3c:	605d      	str	r5, [r3, #4]
 802bd3e:	6813      	ldr	r3, [r2, #0]
 802bd40:	4630      	mov	r0, r6
 802bd42:	1b1b      	subs	r3, r3, r4
 802bd44:	6013      	str	r3, [r2, #0]
 802bd46:	f004 fc31 	bl	80305ac <__malloc_unlock>
 802bd4a:	2001      	movs	r0, #1
 802bd4c:	e7d0      	b.n	802bcf0 <_malloc_trim_r+0x40>
 802bd4e:	bf00      	nop
 802bd50:	20000384 	.word	0x20000384
 802bd54:	2000037c 	.word	0x2000037c
 802bd58:	20018194 	.word	0x20018194

0802bd5c <_free_r>:
 802bd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bd5e:	4604      	mov	r4, r0
 802bd60:	460f      	mov	r7, r1
 802bd62:	2900      	cmp	r1, #0
 802bd64:	f000 80b1 	beq.w	802beca <_free_r+0x16e>
 802bd68:	f004 fc1a 	bl	80305a0 <__malloc_lock>
 802bd6c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802bd70:	4d56      	ldr	r5, [pc, #344]	@ (802becc <_free_r+0x170>)
 802bd72:	f022 0001 	bic.w	r0, r2, #1
 802bd76:	f1a7 0308 	sub.w	r3, r7, #8
 802bd7a:	eb03 0c00 	add.w	ip, r3, r0
 802bd7e:	68a9      	ldr	r1, [r5, #8]
 802bd80:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802bd84:	4561      	cmp	r1, ip
 802bd86:	f026 0603 	bic.w	r6, r6, #3
 802bd8a:	f002 0201 	and.w	r2, r2, #1
 802bd8e:	d11b      	bne.n	802bdc8 <_free_r+0x6c>
 802bd90:	4406      	add	r6, r0
 802bd92:	b93a      	cbnz	r2, 802bda4 <_free_r+0x48>
 802bd94:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802bd98:	1a9b      	subs	r3, r3, r2
 802bd9a:	4416      	add	r6, r2
 802bd9c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802bda0:	60ca      	str	r2, [r1, #12]
 802bda2:	6091      	str	r1, [r2, #8]
 802bda4:	f046 0201 	orr.w	r2, r6, #1
 802bda8:	605a      	str	r2, [r3, #4]
 802bdaa:	60ab      	str	r3, [r5, #8]
 802bdac:	4b48      	ldr	r3, [pc, #288]	@ (802bed0 <_free_r+0x174>)
 802bdae:	681b      	ldr	r3, [r3, #0]
 802bdb0:	42b3      	cmp	r3, r6
 802bdb2:	d804      	bhi.n	802bdbe <_free_r+0x62>
 802bdb4:	4b47      	ldr	r3, [pc, #284]	@ (802bed4 <_free_r+0x178>)
 802bdb6:	4620      	mov	r0, r4
 802bdb8:	6819      	ldr	r1, [r3, #0]
 802bdba:	f7ff ff79 	bl	802bcb0 <_malloc_trim_r>
 802bdbe:	4620      	mov	r0, r4
 802bdc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802bdc4:	f004 bbf2 	b.w	80305ac <__malloc_unlock>
 802bdc8:	f8cc 6004 	str.w	r6, [ip, #4]
 802bdcc:	2a00      	cmp	r2, #0
 802bdce:	d138      	bne.n	802be42 <_free_r+0xe6>
 802bdd0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802bdd4:	1a5b      	subs	r3, r3, r1
 802bdd6:	4408      	add	r0, r1
 802bdd8:	6899      	ldr	r1, [r3, #8]
 802bdda:	f105 0708 	add.w	r7, r5, #8
 802bdde:	42b9      	cmp	r1, r7
 802bde0:	d031      	beq.n	802be46 <_free_r+0xea>
 802bde2:	68df      	ldr	r7, [r3, #12]
 802bde4:	60cf      	str	r7, [r1, #12]
 802bde6:	60b9      	str	r1, [r7, #8]
 802bde8:	eb0c 0106 	add.w	r1, ip, r6
 802bdec:	6849      	ldr	r1, [r1, #4]
 802bdee:	07c9      	lsls	r1, r1, #31
 802bdf0:	d40b      	bmi.n	802be0a <_free_r+0xae>
 802bdf2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802bdf6:	4430      	add	r0, r6
 802bdf8:	bb3a      	cbnz	r2, 802be4a <_free_r+0xee>
 802bdfa:	4e37      	ldr	r6, [pc, #220]	@ (802bed8 <_free_r+0x17c>)
 802bdfc:	42b1      	cmp	r1, r6
 802bdfe:	d124      	bne.n	802be4a <_free_r+0xee>
 802be00:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802be04:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802be08:	2201      	movs	r2, #1
 802be0a:	f040 0101 	orr.w	r1, r0, #1
 802be0e:	6059      	str	r1, [r3, #4]
 802be10:	5018      	str	r0, [r3, r0]
 802be12:	2a00      	cmp	r2, #0
 802be14:	d1d3      	bne.n	802bdbe <_free_r+0x62>
 802be16:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802be1a:	d21b      	bcs.n	802be54 <_free_r+0xf8>
 802be1c:	08c2      	lsrs	r2, r0, #3
 802be1e:	2101      	movs	r1, #1
 802be20:	0940      	lsrs	r0, r0, #5
 802be22:	4081      	lsls	r1, r0
 802be24:	6868      	ldr	r0, [r5, #4]
 802be26:	3201      	adds	r2, #1
 802be28:	4301      	orrs	r1, r0
 802be2a:	6069      	str	r1, [r5, #4]
 802be2c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 802be30:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802be34:	3908      	subs	r1, #8
 802be36:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802be3a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 802be3e:	60c3      	str	r3, [r0, #12]
 802be40:	e7bd      	b.n	802bdbe <_free_r+0x62>
 802be42:	2200      	movs	r2, #0
 802be44:	e7d0      	b.n	802bde8 <_free_r+0x8c>
 802be46:	2201      	movs	r2, #1
 802be48:	e7ce      	b.n	802bde8 <_free_r+0x8c>
 802be4a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802be4e:	60ce      	str	r6, [r1, #12]
 802be50:	60b1      	str	r1, [r6, #8]
 802be52:	e7da      	b.n	802be0a <_free_r+0xae>
 802be54:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 802be58:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802be5c:	d214      	bcs.n	802be88 <_free_r+0x12c>
 802be5e:	0982      	lsrs	r2, r0, #6
 802be60:	3238      	adds	r2, #56	@ 0x38
 802be62:	1c51      	adds	r1, r2, #1
 802be64:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802be68:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802be6c:	428e      	cmp	r6, r1
 802be6e:	d125      	bne.n	802bebc <_free_r+0x160>
 802be70:	2001      	movs	r0, #1
 802be72:	1092      	asrs	r2, r2, #2
 802be74:	fa00 f202 	lsl.w	r2, r0, r2
 802be78:	6868      	ldr	r0, [r5, #4]
 802be7a:	4302      	orrs	r2, r0
 802be7c:	606a      	str	r2, [r5, #4]
 802be7e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802be82:	60b3      	str	r3, [r6, #8]
 802be84:	60cb      	str	r3, [r1, #12]
 802be86:	e79a      	b.n	802bdbe <_free_r+0x62>
 802be88:	2a14      	cmp	r2, #20
 802be8a:	d801      	bhi.n	802be90 <_free_r+0x134>
 802be8c:	325b      	adds	r2, #91	@ 0x5b
 802be8e:	e7e8      	b.n	802be62 <_free_r+0x106>
 802be90:	2a54      	cmp	r2, #84	@ 0x54
 802be92:	d802      	bhi.n	802be9a <_free_r+0x13e>
 802be94:	0b02      	lsrs	r2, r0, #12
 802be96:	326e      	adds	r2, #110	@ 0x6e
 802be98:	e7e3      	b.n	802be62 <_free_r+0x106>
 802be9a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802be9e:	d802      	bhi.n	802bea6 <_free_r+0x14a>
 802bea0:	0bc2      	lsrs	r2, r0, #15
 802bea2:	3277      	adds	r2, #119	@ 0x77
 802bea4:	e7dd      	b.n	802be62 <_free_r+0x106>
 802bea6:	f240 5154 	movw	r1, #1364	@ 0x554
 802beaa:	428a      	cmp	r2, r1
 802beac:	bf9a      	itte	ls
 802beae:	0c82      	lsrls	r2, r0, #18
 802beb0:	327c      	addls	r2, #124	@ 0x7c
 802beb2:	227e      	movhi	r2, #126	@ 0x7e
 802beb4:	e7d5      	b.n	802be62 <_free_r+0x106>
 802beb6:	6889      	ldr	r1, [r1, #8]
 802beb8:	428e      	cmp	r6, r1
 802beba:	d004      	beq.n	802bec6 <_free_r+0x16a>
 802bebc:	684a      	ldr	r2, [r1, #4]
 802bebe:	f022 0203 	bic.w	r2, r2, #3
 802bec2:	4282      	cmp	r2, r0
 802bec4:	d8f7      	bhi.n	802beb6 <_free_r+0x15a>
 802bec6:	68ce      	ldr	r6, [r1, #12]
 802bec8:	e7d9      	b.n	802be7e <_free_r+0x122>
 802beca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802becc:	20000384 	.word	0x20000384
 802bed0:	20000380 	.word	0x20000380
 802bed4:	200181c4 	.word	0x200181c4
 802bed8:	2000038c 	.word	0x2000038c

0802bedc <_findenv_r>:
 802bedc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bee0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802bf50 <_findenv_r+0x74>
 802bee4:	4606      	mov	r6, r0
 802bee6:	4689      	mov	r9, r1
 802bee8:	4617      	mov	r7, r2
 802beea:	f006 fc31 	bl	8032750 <__env_lock>
 802beee:	f8da 4000 	ldr.w	r4, [sl]
 802bef2:	b134      	cbz	r4, 802bf02 <_findenv_r+0x26>
 802bef4:	464b      	mov	r3, r9
 802bef6:	4698      	mov	r8, r3
 802bef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802befc:	b13a      	cbz	r2, 802bf0e <_findenv_r+0x32>
 802befe:	2a3d      	cmp	r2, #61	@ 0x3d
 802bf00:	d1f9      	bne.n	802bef6 <_findenv_r+0x1a>
 802bf02:	4630      	mov	r0, r6
 802bf04:	f006 fc2a 	bl	803275c <__env_unlock>
 802bf08:	2000      	movs	r0, #0
 802bf0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bf0e:	eba8 0809 	sub.w	r8, r8, r9
 802bf12:	46a3      	mov	fp, r4
 802bf14:	f854 0b04 	ldr.w	r0, [r4], #4
 802bf18:	2800      	cmp	r0, #0
 802bf1a:	d0f2      	beq.n	802bf02 <_findenv_r+0x26>
 802bf1c:	4642      	mov	r2, r8
 802bf1e:	4649      	mov	r1, r9
 802bf20:	f7fd fe13 	bl	8029b4a <strncmp>
 802bf24:	2800      	cmp	r0, #0
 802bf26:	d1f4      	bne.n	802bf12 <_findenv_r+0x36>
 802bf28:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802bf2c:	eb03 0508 	add.w	r5, r3, r8
 802bf30:	f813 3008 	ldrb.w	r3, [r3, r8]
 802bf34:	2b3d      	cmp	r3, #61	@ 0x3d
 802bf36:	d1ec      	bne.n	802bf12 <_findenv_r+0x36>
 802bf38:	f8da 3000 	ldr.w	r3, [sl]
 802bf3c:	ebab 0303 	sub.w	r3, fp, r3
 802bf40:	109b      	asrs	r3, r3, #2
 802bf42:	4630      	mov	r0, r6
 802bf44:	603b      	str	r3, [r7, #0]
 802bf46:	f006 fc09 	bl	803275c <__env_unlock>
 802bf4a:	1c68      	adds	r0, r5, #1
 802bf4c:	e7dd      	b.n	802bf0a <_findenv_r+0x2e>
 802bf4e:	bf00      	nop
 802bf50:	20000014 	.word	0x20000014

0802bf54 <_getenv_r>:
 802bf54:	b507      	push	{r0, r1, r2, lr}
 802bf56:	aa01      	add	r2, sp, #4
 802bf58:	f7ff ffc0 	bl	802bedc <_findenv_r>
 802bf5c:	b003      	add	sp, #12
 802bf5e:	f85d fb04 	ldr.w	pc, [sp], #4

0802bf62 <labs>:
 802bf62:	2800      	cmp	r0, #0
 802bf64:	bfb8      	it	lt
 802bf66:	4240      	neglt	r0, r0
 802bf68:	4770      	bx	lr
	...

0802bf6c <malloc>:
 802bf6c:	4b02      	ldr	r3, [pc, #8]	@ (802bf78 <malloc+0xc>)
 802bf6e:	4601      	mov	r1, r0
 802bf70:	6818      	ldr	r0, [r3, #0]
 802bf72:	f000 b80b 	b.w	802bf8c <_malloc_r>
 802bf76:	bf00      	nop
 802bf78:	20000254 	.word	0x20000254

0802bf7c <free>:
 802bf7c:	4b02      	ldr	r3, [pc, #8]	@ (802bf88 <free+0xc>)
 802bf7e:	4601      	mov	r1, r0
 802bf80:	6818      	ldr	r0, [r3, #0]
 802bf82:	f7ff beeb 	b.w	802bd5c <_free_r>
 802bf86:	bf00      	nop
 802bf88:	20000254 	.word	0x20000254

0802bf8c <_malloc_r>:
 802bf8c:	f101 030b 	add.w	r3, r1, #11
 802bf90:	2b16      	cmp	r3, #22
 802bf92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bf96:	4605      	mov	r5, r0
 802bf98:	d906      	bls.n	802bfa8 <_malloc_r+0x1c>
 802bf9a:	f033 0707 	bics.w	r7, r3, #7
 802bf9e:	d504      	bpl.n	802bfaa <_malloc_r+0x1e>
 802bfa0:	230c      	movs	r3, #12
 802bfa2:	602b      	str	r3, [r5, #0]
 802bfa4:	2400      	movs	r4, #0
 802bfa6:	e1a3      	b.n	802c2f0 <_malloc_r+0x364>
 802bfa8:	2710      	movs	r7, #16
 802bfaa:	42b9      	cmp	r1, r7
 802bfac:	d8f8      	bhi.n	802bfa0 <_malloc_r+0x14>
 802bfae:	4628      	mov	r0, r5
 802bfb0:	f004 faf6 	bl	80305a0 <__malloc_lock>
 802bfb4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 802bfb8:	4eaf      	ldr	r6, [pc, #700]	@ (802c278 <_malloc_r+0x2ec>)
 802bfba:	d237      	bcs.n	802c02c <_malloc_r+0xa0>
 802bfbc:	f107 0208 	add.w	r2, r7, #8
 802bfc0:	4432      	add	r2, r6
 802bfc2:	f1a2 0108 	sub.w	r1, r2, #8
 802bfc6:	6854      	ldr	r4, [r2, #4]
 802bfc8:	428c      	cmp	r4, r1
 802bfca:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802bfce:	d102      	bne.n	802bfd6 <_malloc_r+0x4a>
 802bfd0:	68d4      	ldr	r4, [r2, #12]
 802bfd2:	42a2      	cmp	r2, r4
 802bfd4:	d010      	beq.n	802bff8 <_malloc_r+0x6c>
 802bfd6:	6863      	ldr	r3, [r4, #4]
 802bfd8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802bfdc:	f023 0303 	bic.w	r3, r3, #3
 802bfe0:	60ca      	str	r2, [r1, #12]
 802bfe2:	4423      	add	r3, r4
 802bfe4:	6091      	str	r1, [r2, #8]
 802bfe6:	685a      	ldr	r2, [r3, #4]
 802bfe8:	f042 0201 	orr.w	r2, r2, #1
 802bfec:	605a      	str	r2, [r3, #4]
 802bfee:	4628      	mov	r0, r5
 802bff0:	f004 fadc 	bl	80305ac <__malloc_unlock>
 802bff4:	3408      	adds	r4, #8
 802bff6:	e17b      	b.n	802c2f0 <_malloc_r+0x364>
 802bff8:	3302      	adds	r3, #2
 802bffa:	6934      	ldr	r4, [r6, #16]
 802bffc:	499f      	ldr	r1, [pc, #636]	@ (802c27c <_malloc_r+0x2f0>)
 802bffe:	428c      	cmp	r4, r1
 802c000:	d077      	beq.n	802c0f2 <_malloc_r+0x166>
 802c002:	6862      	ldr	r2, [r4, #4]
 802c004:	f022 0c03 	bic.w	ip, r2, #3
 802c008:	ebac 0007 	sub.w	r0, ip, r7
 802c00c:	280f      	cmp	r0, #15
 802c00e:	dd48      	ble.n	802c0a2 <_malloc_r+0x116>
 802c010:	19e2      	adds	r2, r4, r7
 802c012:	f040 0301 	orr.w	r3, r0, #1
 802c016:	f047 0701 	orr.w	r7, r7, #1
 802c01a:	6067      	str	r7, [r4, #4]
 802c01c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802c020:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802c024:	6053      	str	r3, [r2, #4]
 802c026:	f844 000c 	str.w	r0, [r4, ip]
 802c02a:	e7e0      	b.n	802bfee <_malloc_r+0x62>
 802c02c:	0a7b      	lsrs	r3, r7, #9
 802c02e:	d02a      	beq.n	802c086 <_malloc_r+0xfa>
 802c030:	2b04      	cmp	r3, #4
 802c032:	d812      	bhi.n	802c05a <_malloc_r+0xce>
 802c034:	09bb      	lsrs	r3, r7, #6
 802c036:	3338      	adds	r3, #56	@ 0x38
 802c038:	1c5a      	adds	r2, r3, #1
 802c03a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802c03e:	f1a2 0c08 	sub.w	ip, r2, #8
 802c042:	6854      	ldr	r4, [r2, #4]
 802c044:	4564      	cmp	r4, ip
 802c046:	d006      	beq.n	802c056 <_malloc_r+0xca>
 802c048:	6862      	ldr	r2, [r4, #4]
 802c04a:	f022 0203 	bic.w	r2, r2, #3
 802c04e:	1bd0      	subs	r0, r2, r7
 802c050:	280f      	cmp	r0, #15
 802c052:	dd1c      	ble.n	802c08e <_malloc_r+0x102>
 802c054:	3b01      	subs	r3, #1
 802c056:	3301      	adds	r3, #1
 802c058:	e7cf      	b.n	802bffa <_malloc_r+0x6e>
 802c05a:	2b14      	cmp	r3, #20
 802c05c:	d801      	bhi.n	802c062 <_malloc_r+0xd6>
 802c05e:	335b      	adds	r3, #91	@ 0x5b
 802c060:	e7ea      	b.n	802c038 <_malloc_r+0xac>
 802c062:	2b54      	cmp	r3, #84	@ 0x54
 802c064:	d802      	bhi.n	802c06c <_malloc_r+0xe0>
 802c066:	0b3b      	lsrs	r3, r7, #12
 802c068:	336e      	adds	r3, #110	@ 0x6e
 802c06a:	e7e5      	b.n	802c038 <_malloc_r+0xac>
 802c06c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 802c070:	d802      	bhi.n	802c078 <_malloc_r+0xec>
 802c072:	0bfb      	lsrs	r3, r7, #15
 802c074:	3377      	adds	r3, #119	@ 0x77
 802c076:	e7df      	b.n	802c038 <_malloc_r+0xac>
 802c078:	f240 5254 	movw	r2, #1364	@ 0x554
 802c07c:	4293      	cmp	r3, r2
 802c07e:	d804      	bhi.n	802c08a <_malloc_r+0xfe>
 802c080:	0cbb      	lsrs	r3, r7, #18
 802c082:	337c      	adds	r3, #124	@ 0x7c
 802c084:	e7d8      	b.n	802c038 <_malloc_r+0xac>
 802c086:	233f      	movs	r3, #63	@ 0x3f
 802c088:	e7d6      	b.n	802c038 <_malloc_r+0xac>
 802c08a:	237e      	movs	r3, #126	@ 0x7e
 802c08c:	e7d4      	b.n	802c038 <_malloc_r+0xac>
 802c08e:	2800      	cmp	r0, #0
 802c090:	68e1      	ldr	r1, [r4, #12]
 802c092:	db04      	blt.n	802c09e <_malloc_r+0x112>
 802c094:	68a3      	ldr	r3, [r4, #8]
 802c096:	60d9      	str	r1, [r3, #12]
 802c098:	608b      	str	r3, [r1, #8]
 802c09a:	18a3      	adds	r3, r4, r2
 802c09c:	e7a3      	b.n	802bfe6 <_malloc_r+0x5a>
 802c09e:	460c      	mov	r4, r1
 802c0a0:	e7d0      	b.n	802c044 <_malloc_r+0xb8>
 802c0a2:	2800      	cmp	r0, #0
 802c0a4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802c0a8:	db07      	blt.n	802c0ba <_malloc_r+0x12e>
 802c0aa:	44a4      	add	ip, r4
 802c0ac:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802c0b0:	f043 0301 	orr.w	r3, r3, #1
 802c0b4:	f8cc 3004 	str.w	r3, [ip, #4]
 802c0b8:	e799      	b.n	802bfee <_malloc_r+0x62>
 802c0ba:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802c0be:	6870      	ldr	r0, [r6, #4]
 802c0c0:	f080 8095 	bcs.w	802c1ee <_malloc_r+0x262>
 802c0c4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802c0c8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802c0cc:	f04f 0c01 	mov.w	ip, #1
 802c0d0:	3201      	adds	r2, #1
 802c0d2:	fa0c fc0e 	lsl.w	ip, ip, lr
 802c0d6:	ea4c 0000 	orr.w	r0, ip, r0
 802c0da:	6070      	str	r0, [r6, #4]
 802c0dc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802c0e0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802c0e4:	3808      	subs	r0, #8
 802c0e6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802c0ea:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802c0ee:	f8cc 400c 	str.w	r4, [ip, #12]
 802c0f2:	1098      	asrs	r0, r3, #2
 802c0f4:	2201      	movs	r2, #1
 802c0f6:	4082      	lsls	r2, r0
 802c0f8:	6870      	ldr	r0, [r6, #4]
 802c0fa:	4290      	cmp	r0, r2
 802c0fc:	d326      	bcc.n	802c14c <_malloc_r+0x1c0>
 802c0fe:	4210      	tst	r0, r2
 802c100:	d106      	bne.n	802c110 <_malloc_r+0x184>
 802c102:	f023 0303 	bic.w	r3, r3, #3
 802c106:	0052      	lsls	r2, r2, #1
 802c108:	4210      	tst	r0, r2
 802c10a:	f103 0304 	add.w	r3, r3, #4
 802c10e:	d0fa      	beq.n	802c106 <_malloc_r+0x17a>
 802c110:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802c114:	46c1      	mov	r9, r8
 802c116:	469e      	mov	lr, r3
 802c118:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802c11c:	454c      	cmp	r4, r9
 802c11e:	f040 80b9 	bne.w	802c294 <_malloc_r+0x308>
 802c122:	f10e 0e01 	add.w	lr, lr, #1
 802c126:	f01e 0f03 	tst.w	lr, #3
 802c12a:	f109 0908 	add.w	r9, r9, #8
 802c12e:	d1f3      	bne.n	802c118 <_malloc_r+0x18c>
 802c130:	0798      	lsls	r0, r3, #30
 802c132:	f040 80e3 	bne.w	802c2fc <_malloc_r+0x370>
 802c136:	6873      	ldr	r3, [r6, #4]
 802c138:	ea23 0302 	bic.w	r3, r3, r2
 802c13c:	6073      	str	r3, [r6, #4]
 802c13e:	6870      	ldr	r0, [r6, #4]
 802c140:	0052      	lsls	r2, r2, #1
 802c142:	4290      	cmp	r0, r2
 802c144:	d302      	bcc.n	802c14c <_malloc_r+0x1c0>
 802c146:	2a00      	cmp	r2, #0
 802c148:	f040 80e5 	bne.w	802c316 <_malloc_r+0x38a>
 802c14c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802c150:	f8da 3004 	ldr.w	r3, [sl, #4]
 802c154:	f023 0903 	bic.w	r9, r3, #3
 802c158:	45b9      	cmp	r9, r7
 802c15a:	d304      	bcc.n	802c166 <_malloc_r+0x1da>
 802c15c:	eba9 0207 	sub.w	r2, r9, r7
 802c160:	2a0f      	cmp	r2, #15
 802c162:	f300 8141 	bgt.w	802c3e8 <_malloc_r+0x45c>
 802c166:	4b46      	ldr	r3, [pc, #280]	@ (802c280 <_malloc_r+0x2f4>)
 802c168:	6819      	ldr	r1, [r3, #0]
 802c16a:	3110      	adds	r1, #16
 802c16c:	4439      	add	r1, r7
 802c16e:	2008      	movs	r0, #8
 802c170:	9101      	str	r1, [sp, #4]
 802c172:	f006 f8f7 	bl	8032364 <sysconf>
 802c176:	4a43      	ldr	r2, [pc, #268]	@ (802c284 <_malloc_r+0x2f8>)
 802c178:	9901      	ldr	r1, [sp, #4]
 802c17a:	6813      	ldr	r3, [r2, #0]
 802c17c:	3301      	adds	r3, #1
 802c17e:	bf1f      	itttt	ne
 802c180:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 802c184:	1809      	addne	r1, r1, r0
 802c186:	4243      	negne	r3, r0
 802c188:	4019      	andne	r1, r3
 802c18a:	4680      	mov	r8, r0
 802c18c:	4628      	mov	r0, r5
 802c18e:	9101      	str	r1, [sp, #4]
 802c190:	f006 f8d8 	bl	8032344 <_sbrk_r>
 802c194:	1c42      	adds	r2, r0, #1
 802c196:	eb0a 0b09 	add.w	fp, sl, r9
 802c19a:	4604      	mov	r4, r0
 802c19c:	f000 80f7 	beq.w	802c38e <_malloc_r+0x402>
 802c1a0:	4583      	cmp	fp, r0
 802c1a2:	9901      	ldr	r1, [sp, #4]
 802c1a4:	4a37      	ldr	r2, [pc, #220]	@ (802c284 <_malloc_r+0x2f8>)
 802c1a6:	d902      	bls.n	802c1ae <_malloc_r+0x222>
 802c1a8:	45b2      	cmp	sl, r6
 802c1aa:	f040 80f0 	bne.w	802c38e <_malloc_r+0x402>
 802c1ae:	4b36      	ldr	r3, [pc, #216]	@ (802c288 <_malloc_r+0x2fc>)
 802c1b0:	6818      	ldr	r0, [r3, #0]
 802c1b2:	45a3      	cmp	fp, r4
 802c1b4:	eb00 0e01 	add.w	lr, r0, r1
 802c1b8:	f8c3 e000 	str.w	lr, [r3]
 802c1bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 802c1c0:	f040 80ab 	bne.w	802c31a <_malloc_r+0x38e>
 802c1c4:	ea1b 0f0c 	tst.w	fp, ip
 802c1c8:	f040 80a7 	bne.w	802c31a <_malloc_r+0x38e>
 802c1cc:	68b2      	ldr	r2, [r6, #8]
 802c1ce:	4449      	add	r1, r9
 802c1d0:	f041 0101 	orr.w	r1, r1, #1
 802c1d4:	6051      	str	r1, [r2, #4]
 802c1d6:	4a2d      	ldr	r2, [pc, #180]	@ (802c28c <_malloc_r+0x300>)
 802c1d8:	681b      	ldr	r3, [r3, #0]
 802c1da:	6811      	ldr	r1, [r2, #0]
 802c1dc:	428b      	cmp	r3, r1
 802c1de:	bf88      	it	hi
 802c1e0:	6013      	strhi	r3, [r2, #0]
 802c1e2:	4a2b      	ldr	r2, [pc, #172]	@ (802c290 <_malloc_r+0x304>)
 802c1e4:	6811      	ldr	r1, [r2, #0]
 802c1e6:	428b      	cmp	r3, r1
 802c1e8:	bf88      	it	hi
 802c1ea:	6013      	strhi	r3, [r2, #0]
 802c1ec:	e0cf      	b.n	802c38e <_malloc_r+0x402>
 802c1ee:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 802c1f2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802c1f6:	d218      	bcs.n	802c22a <_malloc_r+0x29e>
 802c1f8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802c1fc:	3238      	adds	r2, #56	@ 0x38
 802c1fe:	f102 0e01 	add.w	lr, r2, #1
 802c202:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802c206:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802c20a:	45f0      	cmp	r8, lr
 802c20c:	d12b      	bne.n	802c266 <_malloc_r+0x2da>
 802c20e:	1092      	asrs	r2, r2, #2
 802c210:	f04f 0c01 	mov.w	ip, #1
 802c214:	fa0c f202 	lsl.w	r2, ip, r2
 802c218:	4302      	orrs	r2, r0
 802c21a:	6072      	str	r2, [r6, #4]
 802c21c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802c220:	f8c8 4008 	str.w	r4, [r8, #8]
 802c224:	f8ce 400c 	str.w	r4, [lr, #12]
 802c228:	e763      	b.n	802c0f2 <_malloc_r+0x166>
 802c22a:	2a14      	cmp	r2, #20
 802c22c:	d801      	bhi.n	802c232 <_malloc_r+0x2a6>
 802c22e:	325b      	adds	r2, #91	@ 0x5b
 802c230:	e7e5      	b.n	802c1fe <_malloc_r+0x272>
 802c232:	2a54      	cmp	r2, #84	@ 0x54
 802c234:	d803      	bhi.n	802c23e <_malloc_r+0x2b2>
 802c236:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802c23a:	326e      	adds	r2, #110	@ 0x6e
 802c23c:	e7df      	b.n	802c1fe <_malloc_r+0x272>
 802c23e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802c242:	d803      	bhi.n	802c24c <_malloc_r+0x2c0>
 802c244:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802c248:	3277      	adds	r2, #119	@ 0x77
 802c24a:	e7d8      	b.n	802c1fe <_malloc_r+0x272>
 802c24c:	f240 5e54 	movw	lr, #1364	@ 0x554
 802c250:	4572      	cmp	r2, lr
 802c252:	bf9a      	itte	ls
 802c254:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802c258:	327c      	addls	r2, #124	@ 0x7c
 802c25a:	227e      	movhi	r2, #126	@ 0x7e
 802c25c:	e7cf      	b.n	802c1fe <_malloc_r+0x272>
 802c25e:	f8de e008 	ldr.w	lr, [lr, #8]
 802c262:	45f0      	cmp	r8, lr
 802c264:	d005      	beq.n	802c272 <_malloc_r+0x2e6>
 802c266:	f8de 2004 	ldr.w	r2, [lr, #4]
 802c26a:	f022 0203 	bic.w	r2, r2, #3
 802c26e:	4562      	cmp	r2, ip
 802c270:	d8f5      	bhi.n	802c25e <_malloc_r+0x2d2>
 802c272:	f8de 800c 	ldr.w	r8, [lr, #12]
 802c276:	e7d1      	b.n	802c21c <_malloc_r+0x290>
 802c278:	20000384 	.word	0x20000384
 802c27c:	2000038c 	.word	0x2000038c
 802c280:	200181c4 	.word	0x200181c4
 802c284:	2000037c 	.word	0x2000037c
 802c288:	20018194 	.word	0x20018194
 802c28c:	200181c0 	.word	0x200181c0
 802c290:	200181bc 	.word	0x200181bc
 802c294:	6860      	ldr	r0, [r4, #4]
 802c296:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802c29a:	f020 0003 	bic.w	r0, r0, #3
 802c29e:	eba0 0a07 	sub.w	sl, r0, r7
 802c2a2:	f1ba 0f0f 	cmp.w	sl, #15
 802c2a6:	dd12      	ble.n	802c2ce <_malloc_r+0x342>
 802c2a8:	68a3      	ldr	r3, [r4, #8]
 802c2aa:	19e2      	adds	r2, r4, r7
 802c2ac:	f047 0701 	orr.w	r7, r7, #1
 802c2b0:	6067      	str	r7, [r4, #4]
 802c2b2:	f8c3 c00c 	str.w	ip, [r3, #12]
 802c2b6:	f8cc 3008 	str.w	r3, [ip, #8]
 802c2ba:	f04a 0301 	orr.w	r3, sl, #1
 802c2be:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802c2c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802c2c6:	6053      	str	r3, [r2, #4]
 802c2c8:	f844 a000 	str.w	sl, [r4, r0]
 802c2cc:	e68f      	b.n	802bfee <_malloc_r+0x62>
 802c2ce:	f1ba 0f00 	cmp.w	sl, #0
 802c2d2:	db11      	blt.n	802c2f8 <_malloc_r+0x36c>
 802c2d4:	4420      	add	r0, r4
 802c2d6:	6843      	ldr	r3, [r0, #4]
 802c2d8:	f043 0301 	orr.w	r3, r3, #1
 802c2dc:	6043      	str	r3, [r0, #4]
 802c2de:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802c2e2:	4628      	mov	r0, r5
 802c2e4:	f8c3 c00c 	str.w	ip, [r3, #12]
 802c2e8:	f8cc 3008 	str.w	r3, [ip, #8]
 802c2ec:	f004 f95e 	bl	80305ac <__malloc_unlock>
 802c2f0:	4620      	mov	r0, r4
 802c2f2:	b003      	add	sp, #12
 802c2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c2f8:	4664      	mov	r4, ip
 802c2fa:	e70f      	b.n	802c11c <_malloc_r+0x190>
 802c2fc:	f858 0908 	ldr.w	r0, [r8], #-8
 802c300:	4540      	cmp	r0, r8
 802c302:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802c306:	f43f af13 	beq.w	802c130 <_malloc_r+0x1a4>
 802c30a:	e718      	b.n	802c13e <_malloc_r+0x1b2>
 802c30c:	3304      	adds	r3, #4
 802c30e:	0052      	lsls	r2, r2, #1
 802c310:	4210      	tst	r0, r2
 802c312:	d0fb      	beq.n	802c30c <_malloc_r+0x380>
 802c314:	e6fc      	b.n	802c110 <_malloc_r+0x184>
 802c316:	4673      	mov	r3, lr
 802c318:	e7fa      	b.n	802c310 <_malloc_r+0x384>
 802c31a:	6810      	ldr	r0, [r2, #0]
 802c31c:	3001      	adds	r0, #1
 802c31e:	bf1b      	ittet	ne
 802c320:	eba4 0b0b 	subne.w	fp, r4, fp
 802c324:	eb0b 020e 	addne.w	r2, fp, lr
 802c328:	6014      	streq	r4, [r2, #0]
 802c32a:	601a      	strne	r2, [r3, #0]
 802c32c:	f014 0b07 	ands.w	fp, r4, #7
 802c330:	bf1a      	itte	ne
 802c332:	f1cb 0008 	rsbne	r0, fp, #8
 802c336:	1824      	addne	r4, r4, r0
 802c338:	4658      	moveq	r0, fp
 802c33a:	1862      	adds	r2, r4, r1
 802c33c:	ea02 010c 	and.w	r1, r2, ip
 802c340:	4480      	add	r8, r0
 802c342:	eba8 0801 	sub.w	r8, r8, r1
 802c346:	ea08 080c 	and.w	r8, r8, ip
 802c34a:	4641      	mov	r1, r8
 802c34c:	4628      	mov	r0, r5
 802c34e:	9201      	str	r2, [sp, #4]
 802c350:	f005 fff8 	bl	8032344 <_sbrk_r>
 802c354:	1c43      	adds	r3, r0, #1
 802c356:	9a01      	ldr	r2, [sp, #4]
 802c358:	4b28      	ldr	r3, [pc, #160]	@ (802c3fc <_malloc_r+0x470>)
 802c35a:	d107      	bne.n	802c36c <_malloc_r+0x3e0>
 802c35c:	f1bb 0f00 	cmp.w	fp, #0
 802c360:	d023      	beq.n	802c3aa <_malloc_r+0x41e>
 802c362:	f1ab 0008 	sub.w	r0, fp, #8
 802c366:	4410      	add	r0, r2
 802c368:	f04f 0800 	mov.w	r8, #0
 802c36c:	681a      	ldr	r2, [r3, #0]
 802c36e:	60b4      	str	r4, [r6, #8]
 802c370:	1b00      	subs	r0, r0, r4
 802c372:	4440      	add	r0, r8
 802c374:	4442      	add	r2, r8
 802c376:	f040 0001 	orr.w	r0, r0, #1
 802c37a:	45b2      	cmp	sl, r6
 802c37c:	601a      	str	r2, [r3, #0]
 802c37e:	6060      	str	r0, [r4, #4]
 802c380:	f43f af29 	beq.w	802c1d6 <_malloc_r+0x24a>
 802c384:	f1b9 0f0f 	cmp.w	r9, #15
 802c388:	d812      	bhi.n	802c3b0 <_malloc_r+0x424>
 802c38a:	2301      	movs	r3, #1
 802c38c:	6063      	str	r3, [r4, #4]
 802c38e:	68b3      	ldr	r3, [r6, #8]
 802c390:	685b      	ldr	r3, [r3, #4]
 802c392:	f023 0303 	bic.w	r3, r3, #3
 802c396:	42bb      	cmp	r3, r7
 802c398:	eba3 0207 	sub.w	r2, r3, r7
 802c39c:	d301      	bcc.n	802c3a2 <_malloc_r+0x416>
 802c39e:	2a0f      	cmp	r2, #15
 802c3a0:	dc22      	bgt.n	802c3e8 <_malloc_r+0x45c>
 802c3a2:	4628      	mov	r0, r5
 802c3a4:	f004 f902 	bl	80305ac <__malloc_unlock>
 802c3a8:	e5fc      	b.n	802bfa4 <_malloc_r+0x18>
 802c3aa:	4610      	mov	r0, r2
 802c3ac:	46d8      	mov	r8, fp
 802c3ae:	e7dd      	b.n	802c36c <_malloc_r+0x3e0>
 802c3b0:	f8da 2004 	ldr.w	r2, [sl, #4]
 802c3b4:	f1a9 090c 	sub.w	r9, r9, #12
 802c3b8:	f029 0907 	bic.w	r9, r9, #7
 802c3bc:	f002 0201 	and.w	r2, r2, #1
 802c3c0:	ea42 0209 	orr.w	r2, r2, r9
 802c3c4:	f8ca 2004 	str.w	r2, [sl, #4]
 802c3c8:	2105      	movs	r1, #5
 802c3ca:	eb0a 0209 	add.w	r2, sl, r9
 802c3ce:	f1b9 0f0f 	cmp.w	r9, #15
 802c3d2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802c3d6:	f67f aefe 	bls.w	802c1d6 <_malloc_r+0x24a>
 802c3da:	f10a 0108 	add.w	r1, sl, #8
 802c3de:	4628      	mov	r0, r5
 802c3e0:	f7ff fcbc 	bl	802bd5c <_free_r>
 802c3e4:	4b05      	ldr	r3, [pc, #20]	@ (802c3fc <_malloc_r+0x470>)
 802c3e6:	e6f6      	b.n	802c1d6 <_malloc_r+0x24a>
 802c3e8:	68b4      	ldr	r4, [r6, #8]
 802c3ea:	f047 0301 	orr.w	r3, r7, #1
 802c3ee:	4427      	add	r7, r4
 802c3f0:	f042 0201 	orr.w	r2, r2, #1
 802c3f4:	6063      	str	r3, [r4, #4]
 802c3f6:	60b7      	str	r7, [r6, #8]
 802c3f8:	607a      	str	r2, [r7, #4]
 802c3fa:	e5f8      	b.n	802bfee <_malloc_r+0x62>
 802c3fc:	20018194 	.word	0x20018194

0802c400 <__ascii_mbtowc>:
 802c400:	b082      	sub	sp, #8
 802c402:	b901      	cbnz	r1, 802c406 <__ascii_mbtowc+0x6>
 802c404:	a901      	add	r1, sp, #4
 802c406:	b142      	cbz	r2, 802c41a <__ascii_mbtowc+0x1a>
 802c408:	b14b      	cbz	r3, 802c41e <__ascii_mbtowc+0x1e>
 802c40a:	7813      	ldrb	r3, [r2, #0]
 802c40c:	600b      	str	r3, [r1, #0]
 802c40e:	7812      	ldrb	r2, [r2, #0]
 802c410:	1e10      	subs	r0, r2, #0
 802c412:	bf18      	it	ne
 802c414:	2001      	movne	r0, #1
 802c416:	b002      	add	sp, #8
 802c418:	4770      	bx	lr
 802c41a:	4610      	mov	r0, r2
 802c41c:	e7fb      	b.n	802c416 <__ascii_mbtowc+0x16>
 802c41e:	f06f 0001 	mvn.w	r0, #1
 802c422:	e7f8      	b.n	802c416 <__ascii_mbtowc+0x16>

0802c424 <siscanf>:
 802c424:	b40e      	push	{r1, r2, r3}
 802c426:	b530      	push	{r4, r5, lr}
 802c428:	b09c      	sub	sp, #112	@ 0x70
 802c42a:	ac1f      	add	r4, sp, #124	@ 0x7c
 802c42c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802c430:	f854 5b04 	ldr.w	r5, [r4], #4
 802c434:	f8ad 2014 	strh.w	r2, [sp, #20]
 802c438:	9002      	str	r0, [sp, #8]
 802c43a:	9006      	str	r0, [sp, #24]
 802c43c:	f7e3 ff30 	bl	80102a0 <strlen>
 802c440:	4b0b      	ldr	r3, [pc, #44]	@ (802c470 <siscanf+0x4c>)
 802c442:	9003      	str	r0, [sp, #12]
 802c444:	9007      	str	r0, [sp, #28]
 802c446:	930a      	str	r3, [sp, #40]	@ 0x28
 802c448:	480a      	ldr	r0, [pc, #40]	@ (802c474 <siscanf+0x50>)
 802c44a:	9401      	str	r4, [sp, #4]
 802c44c:	2300      	movs	r3, #0
 802c44e:	930e      	str	r3, [sp, #56]	@ 0x38
 802c450:	9313      	str	r3, [sp, #76]	@ 0x4c
 802c452:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c456:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c45a:	462a      	mov	r2, r5
 802c45c:	4623      	mov	r3, r4
 802c45e:	a902      	add	r1, sp, #8
 802c460:	6800      	ldr	r0, [r0, #0]
 802c462:	f000 fd99 	bl	802cf98 <__ssvfiscanf_r>
 802c466:	b01c      	add	sp, #112	@ 0x70
 802c468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c46c:	b003      	add	sp, #12
 802c46e:	4770      	bx	lr
 802c470:	08029413 	.word	0x08029413
 802c474:	20000254 	.word	0x20000254

0802c478 <sniprintf>:
 802c478:	b40c      	push	{r2, r3}
 802c47a:	b530      	push	{r4, r5, lr}
 802c47c:	4b17      	ldr	r3, [pc, #92]	@ (802c4dc <sniprintf+0x64>)
 802c47e:	1e0c      	subs	r4, r1, #0
 802c480:	681d      	ldr	r5, [r3, #0]
 802c482:	b09d      	sub	sp, #116	@ 0x74
 802c484:	da08      	bge.n	802c498 <sniprintf+0x20>
 802c486:	238b      	movs	r3, #139	@ 0x8b
 802c488:	602b      	str	r3, [r5, #0]
 802c48a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c48e:	b01d      	add	sp, #116	@ 0x74
 802c490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c494:	b002      	add	sp, #8
 802c496:	4770      	bx	lr
 802c498:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802c49c:	f8ad 3014 	strh.w	r3, [sp, #20]
 802c4a0:	bf14      	ite	ne
 802c4a2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802c4a6:	4623      	moveq	r3, r4
 802c4a8:	9304      	str	r3, [sp, #16]
 802c4aa:	9307      	str	r3, [sp, #28]
 802c4ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c4b0:	9002      	str	r0, [sp, #8]
 802c4b2:	9006      	str	r0, [sp, #24]
 802c4b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c4b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802c4ba:	ab21      	add	r3, sp, #132	@ 0x84
 802c4bc:	a902      	add	r1, sp, #8
 802c4be:	4628      	mov	r0, r5
 802c4c0:	9301      	str	r3, [sp, #4]
 802c4c2:	f000 f88b 	bl	802c5dc <_svfiprintf_r>
 802c4c6:	1c43      	adds	r3, r0, #1
 802c4c8:	bfbc      	itt	lt
 802c4ca:	238b      	movlt	r3, #139	@ 0x8b
 802c4cc:	602b      	strlt	r3, [r5, #0]
 802c4ce:	2c00      	cmp	r4, #0
 802c4d0:	d0dd      	beq.n	802c48e <sniprintf+0x16>
 802c4d2:	9b02      	ldr	r3, [sp, #8]
 802c4d4:	2200      	movs	r2, #0
 802c4d6:	701a      	strb	r2, [r3, #0]
 802c4d8:	e7d9      	b.n	802c48e <sniprintf+0x16>
 802c4da:	bf00      	nop
 802c4dc:	20000254 	.word	0x20000254

0802c4e0 <__ssprint_r>:
 802c4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c4e4:	6893      	ldr	r3, [r2, #8]
 802c4e6:	f8d2 b000 	ldr.w	fp, [r2]
 802c4ea:	9001      	str	r0, [sp, #4]
 802c4ec:	460c      	mov	r4, r1
 802c4ee:	4617      	mov	r7, r2
 802c4f0:	2b00      	cmp	r3, #0
 802c4f2:	d157      	bne.n	802c5a4 <__ssprint_r+0xc4>
 802c4f4:	2000      	movs	r0, #0
 802c4f6:	2300      	movs	r3, #0
 802c4f8:	607b      	str	r3, [r7, #4]
 802c4fa:	b003      	add	sp, #12
 802c4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c500:	e9db a800 	ldrd	sl, r8, [fp]
 802c504:	f10b 0b08 	add.w	fp, fp, #8
 802c508:	68a6      	ldr	r6, [r4, #8]
 802c50a:	6820      	ldr	r0, [r4, #0]
 802c50c:	f1b8 0f00 	cmp.w	r8, #0
 802c510:	d0f6      	beq.n	802c500 <__ssprint_r+0x20>
 802c512:	45b0      	cmp	r8, r6
 802c514:	d32e      	bcc.n	802c574 <__ssprint_r+0x94>
 802c516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c51a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802c51e:	d029      	beq.n	802c574 <__ssprint_r+0x94>
 802c520:	6921      	ldr	r1, [r4, #16]
 802c522:	6965      	ldr	r5, [r4, #20]
 802c524:	eba0 0901 	sub.w	r9, r0, r1
 802c528:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802c52c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802c530:	f109 0001 	add.w	r0, r9, #1
 802c534:	106d      	asrs	r5, r5, #1
 802c536:	4440      	add	r0, r8
 802c538:	4285      	cmp	r5, r0
 802c53a:	bf38      	it	cc
 802c53c:	4605      	movcc	r5, r0
 802c53e:	0553      	lsls	r3, r2, #21
 802c540:	d534      	bpl.n	802c5ac <__ssprint_r+0xcc>
 802c542:	9801      	ldr	r0, [sp, #4]
 802c544:	4629      	mov	r1, r5
 802c546:	f7ff fd21 	bl	802bf8c <_malloc_r>
 802c54a:	4606      	mov	r6, r0
 802c54c:	2800      	cmp	r0, #0
 802c54e:	d038      	beq.n	802c5c2 <__ssprint_r+0xe2>
 802c550:	464a      	mov	r2, r9
 802c552:	6921      	ldr	r1, [r4, #16]
 802c554:	f7fe fd00 	bl	802af58 <memcpy>
 802c558:	89a2      	ldrh	r2, [r4, #12]
 802c55a:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802c55e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802c562:	81a2      	strh	r2, [r4, #12]
 802c564:	6126      	str	r6, [r4, #16]
 802c566:	6165      	str	r5, [r4, #20]
 802c568:	444e      	add	r6, r9
 802c56a:	eba5 0509 	sub.w	r5, r5, r9
 802c56e:	6026      	str	r6, [r4, #0]
 802c570:	60a5      	str	r5, [r4, #8]
 802c572:	4646      	mov	r6, r8
 802c574:	4546      	cmp	r6, r8
 802c576:	bf28      	it	cs
 802c578:	4646      	movcs	r6, r8
 802c57a:	4632      	mov	r2, r6
 802c57c:	4651      	mov	r1, sl
 802c57e:	6820      	ldr	r0, [r4, #0]
 802c580:	f7fd fa94 	bl	8029aac <memmove>
 802c584:	68a2      	ldr	r2, [r4, #8]
 802c586:	1b92      	subs	r2, r2, r6
 802c588:	60a2      	str	r2, [r4, #8]
 802c58a:	6822      	ldr	r2, [r4, #0]
 802c58c:	4432      	add	r2, r6
 802c58e:	6022      	str	r2, [r4, #0]
 802c590:	68ba      	ldr	r2, [r7, #8]
 802c592:	eba2 0308 	sub.w	r3, r2, r8
 802c596:	44c2      	add	sl, r8
 802c598:	60bb      	str	r3, [r7, #8]
 802c59a:	2b00      	cmp	r3, #0
 802c59c:	d0aa      	beq.n	802c4f4 <__ssprint_r+0x14>
 802c59e:	f04f 0800 	mov.w	r8, #0
 802c5a2:	e7b1      	b.n	802c508 <__ssprint_r+0x28>
 802c5a4:	f04f 0a00 	mov.w	sl, #0
 802c5a8:	46d0      	mov	r8, sl
 802c5aa:	e7ad      	b.n	802c508 <__ssprint_r+0x28>
 802c5ac:	9801      	ldr	r0, [sp, #4]
 802c5ae:	462a      	mov	r2, r5
 802c5b0:	f004 fcfc 	bl	8030fac <_realloc_r>
 802c5b4:	4606      	mov	r6, r0
 802c5b6:	2800      	cmp	r0, #0
 802c5b8:	d1d4      	bne.n	802c564 <__ssprint_r+0x84>
 802c5ba:	6921      	ldr	r1, [r4, #16]
 802c5bc:	9801      	ldr	r0, [sp, #4]
 802c5be:	f7ff fbcd 	bl	802bd5c <_free_r>
 802c5c2:	9a01      	ldr	r2, [sp, #4]
 802c5c4:	230c      	movs	r3, #12
 802c5c6:	6013      	str	r3, [r2, #0]
 802c5c8:	89a3      	ldrh	r3, [r4, #12]
 802c5ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c5ce:	81a3      	strh	r3, [r4, #12]
 802c5d0:	2300      	movs	r3, #0
 802c5d2:	60bb      	str	r3, [r7, #8]
 802c5d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c5d8:	e78d      	b.n	802c4f6 <__ssprint_r+0x16>
	...

0802c5dc <_svfiprintf_r>:
 802c5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c5e0:	461d      	mov	r5, r3
 802c5e2:	898b      	ldrh	r3, [r1, #12]
 802c5e4:	b0bb      	sub	sp, #236	@ 0xec
 802c5e6:	468b      	mov	fp, r1
 802c5e8:	0619      	lsls	r1, r3, #24
 802c5ea:	9001      	str	r0, [sp, #4]
 802c5ec:	9202      	str	r2, [sp, #8]
 802c5ee:	d514      	bpl.n	802c61a <_svfiprintf_r+0x3e>
 802c5f0:	f8db 3010 	ldr.w	r3, [fp, #16]
 802c5f4:	b98b      	cbnz	r3, 802c61a <_svfiprintf_r+0x3e>
 802c5f6:	2140      	movs	r1, #64	@ 0x40
 802c5f8:	f7ff fcc8 	bl	802bf8c <_malloc_r>
 802c5fc:	f8cb 0000 	str.w	r0, [fp]
 802c600:	f8cb 0010 	str.w	r0, [fp, #16]
 802c604:	b930      	cbnz	r0, 802c614 <_svfiprintf_r+0x38>
 802c606:	9a01      	ldr	r2, [sp, #4]
 802c608:	230c      	movs	r3, #12
 802c60a:	6013      	str	r3, [r2, #0]
 802c60c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802c610:	9304      	str	r3, [sp, #16]
 802c612:	e3df      	b.n	802cdd4 <_svfiprintf_r+0x7f8>
 802c614:	2340      	movs	r3, #64	@ 0x40
 802c616:	f8cb 3014 	str.w	r3, [fp, #20]
 802c61a:	2300      	movs	r3, #0
 802c61c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802c620:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802c624:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802c628:	ae11      	add	r6, sp, #68	@ 0x44
 802c62a:	960e      	str	r6, [sp, #56]	@ 0x38
 802c62c:	9304      	str	r3, [sp, #16]
 802c62e:	9b02      	ldr	r3, [sp, #8]
 802c630:	461c      	mov	r4, r3
 802c632:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c636:	b10a      	cbz	r2, 802c63c <_svfiprintf_r+0x60>
 802c638:	2a25      	cmp	r2, #37	@ 0x25
 802c63a:	d1f9      	bne.n	802c630 <_svfiprintf_r+0x54>
 802c63c:	9a02      	ldr	r2, [sp, #8]
 802c63e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c640:	1aa7      	subs	r7, r4, r2
 802c642:	d00c      	beq.n	802c65e <_svfiprintf_r+0x82>
 802c644:	443b      	add	r3, r7
 802c646:	9310      	str	r3, [sp, #64]	@ 0x40
 802c648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802c64a:	3301      	adds	r3, #1
 802c64c:	2b07      	cmp	r3, #7
 802c64e:	e9c6 2700 	strd	r2, r7, [r6]
 802c652:	930f      	str	r3, [sp, #60]	@ 0x3c
 802c654:	dc76      	bgt.n	802c744 <_svfiprintf_r+0x168>
 802c656:	3608      	adds	r6, #8
 802c658:	9b04      	ldr	r3, [sp, #16]
 802c65a:	443b      	add	r3, r7
 802c65c:	9304      	str	r3, [sp, #16]
 802c65e:	7823      	ldrb	r3, [r4, #0]
 802c660:	2b00      	cmp	r3, #0
 802c662:	f000 83ce 	beq.w	802ce02 <_svfiprintf_r+0x826>
 802c666:	2300      	movs	r3, #0
 802c668:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802c66c:	3401      	adds	r4, #1
 802c66e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802c672:	9200      	str	r2, [sp, #0]
 802c674:	9303      	str	r3, [sp, #12]
 802c676:	4699      	mov	r9, r3
 802c678:	4622      	mov	r2, r4
 802c67a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802c67e:	9202      	str	r2, [sp, #8]
 802c680:	f1a3 0220 	sub.w	r2, r3, #32
 802c684:	2a5a      	cmp	r2, #90	@ 0x5a
 802c686:	f200 8318 	bhi.w	802ccba <_svfiprintf_r+0x6de>
 802c68a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802c68e:	009a      	.short	0x009a
 802c690:	03160316 	.word	0x03160316
 802c694:	031600a2 	.word	0x031600a2
 802c698:	03160316 	.word	0x03160316
 802c69c:	03160082 	.word	0x03160082
 802c6a0:	00a50316 	.word	0x00a50316
 802c6a4:	031600af 	.word	0x031600af
 802c6a8:	00b100ac 	.word	0x00b100ac
 802c6ac:	00cc0316 	.word	0x00cc0316
 802c6b0:	00cf00cf 	.word	0x00cf00cf
 802c6b4:	00cf00cf 	.word	0x00cf00cf
 802c6b8:	00cf00cf 	.word	0x00cf00cf
 802c6bc:	00cf00cf 	.word	0x00cf00cf
 802c6c0:	031600cf 	.word	0x031600cf
 802c6c4:	03160316 	.word	0x03160316
 802c6c8:	03160316 	.word	0x03160316
 802c6cc:	03160316 	.word	0x03160316
 802c6d0:	03160316 	.word	0x03160316
 802c6d4:	010600f9 	.word	0x010600f9
 802c6d8:	03160316 	.word	0x03160316
 802c6dc:	03160316 	.word	0x03160316
 802c6e0:	03160316 	.word	0x03160316
 802c6e4:	03160316 	.word	0x03160316
 802c6e8:	03160316 	.word	0x03160316
 802c6ec:	03160154 	.word	0x03160154
 802c6f0:	03160316 	.word	0x03160316
 802c6f4:	0316019b 	.word	0x0316019b
 802c6f8:	0316027d 	.word	0x0316027d
 802c6fc:	029d0316 	.word	0x029d0316
 802c700:	03160316 	.word	0x03160316
 802c704:	03160316 	.word	0x03160316
 802c708:	03160316 	.word	0x03160316
 802c70c:	03160316 	.word	0x03160316
 802c710:	03160316 	.word	0x03160316
 802c714:	010800f9 	.word	0x010800f9
 802c718:	03160316 	.word	0x03160316
 802c71c:	00df0316 	.word	0x00df0316
 802c720:	00f30108 	.word	0x00f30108
 802c724:	00ec0316 	.word	0x00ec0316
 802c728:	01340316 	.word	0x01340316
 802c72c:	018a0156 	.word	0x018a0156
 802c730:	031600f3 	.word	0x031600f3
 802c734:	0098019b 	.word	0x0098019b
 802c738:	0316027f 	.word	0x0316027f
 802c73c:	00650316 	.word	0x00650316
 802c740:	00980316 	.word	0x00980316
 802c744:	9801      	ldr	r0, [sp, #4]
 802c746:	aa0e      	add	r2, sp, #56	@ 0x38
 802c748:	4659      	mov	r1, fp
 802c74a:	f7ff fec9 	bl	802c4e0 <__ssprint_r>
 802c74e:	2800      	cmp	r0, #0
 802c750:	f040 833b 	bne.w	802cdca <_svfiprintf_r+0x7ee>
 802c754:	ae11      	add	r6, sp, #68	@ 0x44
 802c756:	e77f      	b.n	802c658 <_svfiprintf_r+0x7c>
 802c758:	4a99      	ldr	r2, [pc, #612]	@ (802c9c0 <_svfiprintf_r+0x3e4>)
 802c75a:	9205      	str	r2, [sp, #20]
 802c75c:	f019 0220 	ands.w	r2, r9, #32
 802c760:	f000 8234 	beq.w	802cbcc <_svfiprintf_r+0x5f0>
 802c764:	3507      	adds	r5, #7
 802c766:	f025 0507 	bic.w	r5, r5, #7
 802c76a:	462f      	mov	r7, r5
 802c76c:	686d      	ldr	r5, [r5, #4]
 802c76e:	f857 4b08 	ldr.w	r4, [r7], #8
 802c772:	f019 0f01 	tst.w	r9, #1
 802c776:	d009      	beq.n	802c78c <_svfiprintf_r+0x1b0>
 802c778:	ea54 0205 	orrs.w	r2, r4, r5
 802c77c:	bf1f      	itttt	ne
 802c77e:	2230      	movne	r2, #48	@ 0x30
 802c780:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802c784:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802c788:	f049 0902 	orrne.w	r9, r9, #2
 802c78c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802c790:	e113      	b.n	802c9ba <_svfiprintf_r+0x3de>
 802c792:	9801      	ldr	r0, [sp, #4]
 802c794:	f7fe fb32 	bl	802adfc <_localeconv_r>
 802c798:	6843      	ldr	r3, [r0, #4]
 802c79a:	9308      	str	r3, [sp, #32]
 802c79c:	4618      	mov	r0, r3
 802c79e:	f7e3 fd7f 	bl	80102a0 <strlen>
 802c7a2:	9007      	str	r0, [sp, #28]
 802c7a4:	9801      	ldr	r0, [sp, #4]
 802c7a6:	f7fe fb29 	bl	802adfc <_localeconv_r>
 802c7aa:	6883      	ldr	r3, [r0, #8]
 802c7ac:	9306      	str	r3, [sp, #24]
 802c7ae:	9b07      	ldr	r3, [sp, #28]
 802c7b0:	b12b      	cbz	r3, 802c7be <_svfiprintf_r+0x1e2>
 802c7b2:	9b06      	ldr	r3, [sp, #24]
 802c7b4:	b11b      	cbz	r3, 802c7be <_svfiprintf_r+0x1e2>
 802c7b6:	781b      	ldrb	r3, [r3, #0]
 802c7b8:	b10b      	cbz	r3, 802c7be <_svfiprintf_r+0x1e2>
 802c7ba:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802c7be:	9c02      	ldr	r4, [sp, #8]
 802c7c0:	e75a      	b.n	802c678 <_svfiprintf_r+0x9c>
 802c7c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802c7c6:	2b00      	cmp	r3, #0
 802c7c8:	d1f9      	bne.n	802c7be <_svfiprintf_r+0x1e2>
 802c7ca:	2320      	movs	r3, #32
 802c7cc:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802c7d0:	e7f5      	b.n	802c7be <_svfiprintf_r+0x1e2>
 802c7d2:	f049 0901 	orr.w	r9, r9, #1
 802c7d6:	e7f2      	b.n	802c7be <_svfiprintf_r+0x1e2>
 802c7d8:	f855 3b04 	ldr.w	r3, [r5], #4
 802c7dc:	9303      	str	r3, [sp, #12]
 802c7de:	2b00      	cmp	r3, #0
 802c7e0:	daed      	bge.n	802c7be <_svfiprintf_r+0x1e2>
 802c7e2:	425b      	negs	r3, r3
 802c7e4:	9303      	str	r3, [sp, #12]
 802c7e6:	f049 0904 	orr.w	r9, r9, #4
 802c7ea:	e7e8      	b.n	802c7be <_svfiprintf_r+0x1e2>
 802c7ec:	232b      	movs	r3, #43	@ 0x2b
 802c7ee:	e7ed      	b.n	802c7cc <_svfiprintf_r+0x1f0>
 802c7f0:	9a02      	ldr	r2, [sp, #8]
 802c7f2:	f812 3b01 	ldrb.w	r3, [r2], #1
 802c7f6:	2b2a      	cmp	r3, #42	@ 0x2a
 802c7f8:	d111      	bne.n	802c81e <_svfiprintf_r+0x242>
 802c7fa:	f855 3b04 	ldr.w	r3, [r5], #4
 802c7fe:	9202      	str	r2, [sp, #8]
 802c800:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802c804:	9300      	str	r3, [sp, #0]
 802c806:	e7da      	b.n	802c7be <_svfiprintf_r+0x1e2>
 802c808:	9b00      	ldr	r3, [sp, #0]
 802c80a:	fb00 1303 	mla	r3, r0, r3, r1
 802c80e:	9300      	str	r3, [sp, #0]
 802c810:	f812 3b01 	ldrb.w	r3, [r2], #1
 802c814:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802c818:	2909      	cmp	r1, #9
 802c81a:	d9f5      	bls.n	802c808 <_svfiprintf_r+0x22c>
 802c81c:	e72f      	b.n	802c67e <_svfiprintf_r+0xa2>
 802c81e:	2100      	movs	r1, #0
 802c820:	9100      	str	r1, [sp, #0]
 802c822:	200a      	movs	r0, #10
 802c824:	e7f6      	b.n	802c814 <_svfiprintf_r+0x238>
 802c826:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802c82a:	e7c8      	b.n	802c7be <_svfiprintf_r+0x1e2>
 802c82c:	2100      	movs	r1, #0
 802c82e:	9a02      	ldr	r2, [sp, #8]
 802c830:	9103      	str	r1, [sp, #12]
 802c832:	200a      	movs	r0, #10
 802c834:	9903      	ldr	r1, [sp, #12]
 802c836:	3b30      	subs	r3, #48	@ 0x30
 802c838:	fb00 3301 	mla	r3, r0, r1, r3
 802c83c:	9303      	str	r3, [sp, #12]
 802c83e:	f812 3b01 	ldrb.w	r3, [r2], #1
 802c842:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802c846:	2909      	cmp	r1, #9
 802c848:	d9f4      	bls.n	802c834 <_svfiprintf_r+0x258>
 802c84a:	e718      	b.n	802c67e <_svfiprintf_r+0xa2>
 802c84c:	9b02      	ldr	r3, [sp, #8]
 802c84e:	781b      	ldrb	r3, [r3, #0]
 802c850:	2b68      	cmp	r3, #104	@ 0x68
 802c852:	bf01      	itttt	eq
 802c854:	9b02      	ldreq	r3, [sp, #8]
 802c856:	3301      	addeq	r3, #1
 802c858:	9302      	streq	r3, [sp, #8]
 802c85a:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802c85e:	bf18      	it	ne
 802c860:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 802c864:	e7ab      	b.n	802c7be <_svfiprintf_r+0x1e2>
 802c866:	9b02      	ldr	r3, [sp, #8]
 802c868:	781b      	ldrb	r3, [r3, #0]
 802c86a:	2b6c      	cmp	r3, #108	@ 0x6c
 802c86c:	d105      	bne.n	802c87a <_svfiprintf_r+0x29e>
 802c86e:	9b02      	ldr	r3, [sp, #8]
 802c870:	3301      	adds	r3, #1
 802c872:	9302      	str	r3, [sp, #8]
 802c874:	f049 0920 	orr.w	r9, r9, #32
 802c878:	e7a1      	b.n	802c7be <_svfiprintf_r+0x1e2>
 802c87a:	f049 0910 	orr.w	r9, r9, #16
 802c87e:	e79e      	b.n	802c7be <_svfiprintf_r+0x1e2>
 802c880:	462f      	mov	r7, r5
 802c882:	2400      	movs	r4, #0
 802c884:	f857 3b04 	ldr.w	r3, [r7], #4
 802c888:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802c88c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802c890:	2301      	movs	r3, #1
 802c892:	9300      	str	r3, [sp, #0]
 802c894:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 802c898:	e0aa      	b.n	802c9f0 <_svfiprintf_r+0x414>
 802c89a:	f049 0910 	orr.w	r9, r9, #16
 802c89e:	f019 0f20 	tst.w	r9, #32
 802c8a2:	d011      	beq.n	802c8c8 <_svfiprintf_r+0x2ec>
 802c8a4:	3507      	adds	r5, #7
 802c8a6:	f025 0507 	bic.w	r5, r5, #7
 802c8aa:	462f      	mov	r7, r5
 802c8ac:	686d      	ldr	r5, [r5, #4]
 802c8ae:	f857 4b08 	ldr.w	r4, [r7], #8
 802c8b2:	2d00      	cmp	r5, #0
 802c8b4:	da06      	bge.n	802c8c4 <_svfiprintf_r+0x2e8>
 802c8b6:	4264      	negs	r4, r4
 802c8b8:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802c8bc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802c8c0:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802c8c4:	2301      	movs	r3, #1
 802c8c6:	e048      	b.n	802c95a <_svfiprintf_r+0x37e>
 802c8c8:	462f      	mov	r7, r5
 802c8ca:	f019 0f10 	tst.w	r9, #16
 802c8ce:	f857 5b04 	ldr.w	r5, [r7], #4
 802c8d2:	d002      	beq.n	802c8da <_svfiprintf_r+0x2fe>
 802c8d4:	462c      	mov	r4, r5
 802c8d6:	17ed      	asrs	r5, r5, #31
 802c8d8:	e7eb      	b.n	802c8b2 <_svfiprintf_r+0x2d6>
 802c8da:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802c8de:	d003      	beq.n	802c8e8 <_svfiprintf_r+0x30c>
 802c8e0:	b22c      	sxth	r4, r5
 802c8e2:	f345 35c0 	sbfx	r5, r5, #15, #1
 802c8e6:	e7e4      	b.n	802c8b2 <_svfiprintf_r+0x2d6>
 802c8e8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802c8ec:	d0f2      	beq.n	802c8d4 <_svfiprintf_r+0x2f8>
 802c8ee:	b26c      	sxtb	r4, r5
 802c8f0:	f345 15c0 	sbfx	r5, r5, #7, #1
 802c8f4:	e7dd      	b.n	802c8b2 <_svfiprintf_r+0x2d6>
 802c8f6:	f019 0f20 	tst.w	r9, #32
 802c8fa:	d007      	beq.n	802c90c <_svfiprintf_r+0x330>
 802c8fc:	9a04      	ldr	r2, [sp, #16]
 802c8fe:	682b      	ldr	r3, [r5, #0]
 802c900:	9904      	ldr	r1, [sp, #16]
 802c902:	17d2      	asrs	r2, r2, #31
 802c904:	e9c3 1200 	strd	r1, r2, [r3]
 802c908:	3504      	adds	r5, #4
 802c90a:	e690      	b.n	802c62e <_svfiprintf_r+0x52>
 802c90c:	f019 0f10 	tst.w	r9, #16
 802c910:	d003      	beq.n	802c91a <_svfiprintf_r+0x33e>
 802c912:	682b      	ldr	r3, [r5, #0]
 802c914:	9a04      	ldr	r2, [sp, #16]
 802c916:	601a      	str	r2, [r3, #0]
 802c918:	e7f6      	b.n	802c908 <_svfiprintf_r+0x32c>
 802c91a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802c91e:	d003      	beq.n	802c928 <_svfiprintf_r+0x34c>
 802c920:	682b      	ldr	r3, [r5, #0]
 802c922:	9a04      	ldr	r2, [sp, #16]
 802c924:	801a      	strh	r2, [r3, #0]
 802c926:	e7ef      	b.n	802c908 <_svfiprintf_r+0x32c>
 802c928:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802c92c:	d0f1      	beq.n	802c912 <_svfiprintf_r+0x336>
 802c92e:	682b      	ldr	r3, [r5, #0]
 802c930:	9a04      	ldr	r2, [sp, #16]
 802c932:	701a      	strb	r2, [r3, #0]
 802c934:	e7e8      	b.n	802c908 <_svfiprintf_r+0x32c>
 802c936:	f049 0910 	orr.w	r9, r9, #16
 802c93a:	f019 0320 	ands.w	r3, r9, #32
 802c93e:	d01e      	beq.n	802c97e <_svfiprintf_r+0x3a2>
 802c940:	3507      	adds	r5, #7
 802c942:	f025 0507 	bic.w	r5, r5, #7
 802c946:	462f      	mov	r7, r5
 802c948:	686d      	ldr	r5, [r5, #4]
 802c94a:	f857 4b08 	ldr.w	r4, [r7], #8
 802c94e:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802c952:	2300      	movs	r3, #0
 802c954:	2200      	movs	r2, #0
 802c956:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802c95a:	9a00      	ldr	r2, [sp, #0]
 802c95c:	3201      	adds	r2, #1
 802c95e:	f000 8259 	beq.w	802ce14 <_svfiprintf_r+0x838>
 802c962:	ea54 0205 	orrs.w	r2, r4, r5
 802c966:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 802c96a:	f040 8258 	bne.w	802ce1e <_svfiprintf_r+0x842>
 802c96e:	9a00      	ldr	r2, [sp, #0]
 802c970:	2a00      	cmp	r2, #0
 802c972:	f000 8199 	beq.w	802cca8 <_svfiprintf_r+0x6cc>
 802c976:	2b01      	cmp	r3, #1
 802c978:	f040 8254 	bne.w	802ce24 <_svfiprintf_r+0x848>
 802c97c:	e13d      	b.n	802cbfa <_svfiprintf_r+0x61e>
 802c97e:	462f      	mov	r7, r5
 802c980:	f019 0510 	ands.w	r5, r9, #16
 802c984:	f857 4b04 	ldr.w	r4, [r7], #4
 802c988:	d001      	beq.n	802c98e <_svfiprintf_r+0x3b2>
 802c98a:	461d      	mov	r5, r3
 802c98c:	e7df      	b.n	802c94e <_svfiprintf_r+0x372>
 802c98e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802c992:	d001      	beq.n	802c998 <_svfiprintf_r+0x3bc>
 802c994:	b2a4      	uxth	r4, r4
 802c996:	e7da      	b.n	802c94e <_svfiprintf_r+0x372>
 802c998:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802c99c:	d0d7      	beq.n	802c94e <_svfiprintf_r+0x372>
 802c99e:	b2e4      	uxtb	r4, r4
 802c9a0:	e7f3      	b.n	802c98a <_svfiprintf_r+0x3ae>
 802c9a2:	462f      	mov	r7, r5
 802c9a4:	f647 0330 	movw	r3, #30768	@ 0x7830
 802c9a8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802c9ac:	f857 4b04 	ldr.w	r4, [r7], #4
 802c9b0:	4b03      	ldr	r3, [pc, #12]	@ (802c9c0 <_svfiprintf_r+0x3e4>)
 802c9b2:	9305      	str	r3, [sp, #20]
 802c9b4:	2500      	movs	r5, #0
 802c9b6:	f049 0902 	orr.w	r9, r9, #2
 802c9ba:	2302      	movs	r3, #2
 802c9bc:	e7ca      	b.n	802c954 <_svfiprintf_r+0x378>
 802c9be:	bf00      	nop
 802c9c0:	0803819f 	.word	0x0803819f
 802c9c4:	9b00      	ldr	r3, [sp, #0]
 802c9c6:	462f      	mov	r7, r5
 802c9c8:	1c5a      	adds	r2, r3, #1
 802c9ca:	f04f 0500 	mov.w	r5, #0
 802c9ce:	f857 8b04 	ldr.w	r8, [r7], #4
 802c9d2:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802c9d6:	f000 80d2 	beq.w	802cb7e <_svfiprintf_r+0x5a2>
 802c9da:	461a      	mov	r2, r3
 802c9dc:	4629      	mov	r1, r5
 802c9de:	4640      	mov	r0, r8
 802c9e0:	f7e3 fc0e 	bl	8010200 <memchr>
 802c9e4:	4604      	mov	r4, r0
 802c9e6:	b118      	cbz	r0, 802c9f0 <_svfiprintf_r+0x414>
 802c9e8:	eba0 0308 	sub.w	r3, r0, r8
 802c9ec:	9300      	str	r3, [sp, #0]
 802c9ee:	462c      	mov	r4, r5
 802c9f0:	9d00      	ldr	r5, [sp, #0]
 802c9f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802c9f6:	42a5      	cmp	r5, r4
 802c9f8:	bfb8      	it	lt
 802c9fa:	4625      	movlt	r5, r4
 802c9fc:	b103      	cbz	r3, 802ca00 <_svfiprintf_r+0x424>
 802c9fe:	3501      	adds	r5, #1
 802ca00:	f019 0302 	ands.w	r3, r9, #2
 802ca04:	9309      	str	r3, [sp, #36]	@ 0x24
 802ca06:	bf18      	it	ne
 802ca08:	3502      	addne	r5, #2
 802ca0a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 802ca0e:	930a      	str	r3, [sp, #40]	@ 0x28
 802ca10:	d123      	bne.n	802ca5a <_svfiprintf_r+0x47e>
 802ca12:	9b03      	ldr	r3, [sp, #12]
 802ca14:	eba3 0a05 	sub.w	sl, r3, r5
 802ca18:	f1ba 0f00 	cmp.w	sl, #0
 802ca1c:	dd1d      	ble.n	802ca5a <_svfiprintf_r+0x47e>
 802ca1e:	4bac      	ldr	r3, [pc, #688]	@ (802ccd0 <_svfiprintf_r+0x6f4>)
 802ca20:	6033      	str	r3, [r6, #0]
 802ca22:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802ca26:	f1ba 0f10 	cmp.w	sl, #16
 802ca2a:	f102 0201 	add.w	r2, r2, #1
 802ca2e:	f106 0008 	add.w	r0, r6, #8
 802ca32:	f300 8153 	bgt.w	802ccdc <_svfiprintf_r+0x700>
 802ca36:	eb0c 010a 	add.w	r1, ip, sl
 802ca3a:	2a07      	cmp	r2, #7
 802ca3c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ca40:	f8c6 a004 	str.w	sl, [r6, #4]
 802ca44:	f340 815e 	ble.w	802cd04 <_svfiprintf_r+0x728>
 802ca48:	9801      	ldr	r0, [sp, #4]
 802ca4a:	aa0e      	add	r2, sp, #56	@ 0x38
 802ca4c:	4659      	mov	r1, fp
 802ca4e:	f7ff fd47 	bl	802c4e0 <__ssprint_r>
 802ca52:	2800      	cmp	r0, #0
 802ca54:	f040 81b9 	bne.w	802cdca <_svfiprintf_r+0x7ee>
 802ca58:	ae11      	add	r6, sp, #68	@ 0x44
 802ca5a:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802ca5e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ca62:	b161      	cbz	r1, 802ca7e <_svfiprintf_r+0x4a2>
 802ca64:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802ca68:	3301      	adds	r3, #1
 802ca6a:	6031      	str	r1, [r6, #0]
 802ca6c:	2101      	movs	r1, #1
 802ca6e:	440a      	add	r2, r1
 802ca70:	2b07      	cmp	r3, #7
 802ca72:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802ca76:	6071      	str	r1, [r6, #4]
 802ca78:	f300 8146 	bgt.w	802cd08 <_svfiprintf_r+0x72c>
 802ca7c:	3608      	adds	r6, #8
 802ca7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ca80:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ca84:	b159      	cbz	r1, 802ca9e <_svfiprintf_r+0x4c2>
 802ca86:	a90d      	add	r1, sp, #52	@ 0x34
 802ca88:	3301      	adds	r3, #1
 802ca8a:	6031      	str	r1, [r6, #0]
 802ca8c:	2102      	movs	r1, #2
 802ca8e:	440a      	add	r2, r1
 802ca90:	2b07      	cmp	r3, #7
 802ca92:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802ca96:	6071      	str	r1, [r6, #4]
 802ca98:	f300 813f 	bgt.w	802cd1a <_svfiprintf_r+0x73e>
 802ca9c:	3608      	adds	r6, #8
 802ca9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802caa0:	2b80      	cmp	r3, #128	@ 0x80
 802caa2:	d123      	bne.n	802caec <_svfiprintf_r+0x510>
 802caa4:	9b03      	ldr	r3, [sp, #12]
 802caa6:	eba3 0a05 	sub.w	sl, r3, r5
 802caaa:	f1ba 0f00 	cmp.w	sl, #0
 802caae:	dd1d      	ble.n	802caec <_svfiprintf_r+0x510>
 802cab0:	4b88      	ldr	r3, [pc, #544]	@ (802ccd4 <_svfiprintf_r+0x6f8>)
 802cab2:	6033      	str	r3, [r6, #0]
 802cab4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802cab8:	f1ba 0f10 	cmp.w	sl, #16
 802cabc:	f102 0201 	add.w	r2, r2, #1
 802cac0:	f106 0008 	add.w	r0, r6, #8
 802cac4:	f300 8132 	bgt.w	802cd2c <_svfiprintf_r+0x750>
 802cac8:	eb0c 010a 	add.w	r1, ip, sl
 802cacc:	2a07      	cmp	r2, #7
 802cace:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802cad2:	f8c6 a004 	str.w	sl, [r6, #4]
 802cad6:	f340 813d 	ble.w	802cd54 <_svfiprintf_r+0x778>
 802cada:	9801      	ldr	r0, [sp, #4]
 802cadc:	aa0e      	add	r2, sp, #56	@ 0x38
 802cade:	4659      	mov	r1, fp
 802cae0:	f7ff fcfe 	bl	802c4e0 <__ssprint_r>
 802cae4:	2800      	cmp	r0, #0
 802cae6:	f040 8170 	bne.w	802cdca <_svfiprintf_r+0x7ee>
 802caea:	ae11      	add	r6, sp, #68	@ 0x44
 802caec:	9b00      	ldr	r3, [sp, #0]
 802caee:	1ae4      	subs	r4, r4, r3
 802caf0:	2c00      	cmp	r4, #0
 802caf2:	dd1a      	ble.n	802cb2a <_svfiprintf_r+0x54e>
 802caf4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802caf8:	4876      	ldr	r0, [pc, #472]	@ (802ccd4 <_svfiprintf_r+0x6f8>)
 802cafa:	6030      	str	r0, [r6, #0]
 802cafc:	2c10      	cmp	r4, #16
 802cafe:	f103 0301 	add.w	r3, r3, #1
 802cb02:	f106 0108 	add.w	r1, r6, #8
 802cb06:	f300 8127 	bgt.w	802cd58 <_svfiprintf_r+0x77c>
 802cb0a:	6074      	str	r4, [r6, #4]
 802cb0c:	2b07      	cmp	r3, #7
 802cb0e:	4414      	add	r4, r2
 802cb10:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802cb14:	f340 8131 	ble.w	802cd7a <_svfiprintf_r+0x79e>
 802cb18:	9801      	ldr	r0, [sp, #4]
 802cb1a:	aa0e      	add	r2, sp, #56	@ 0x38
 802cb1c:	4659      	mov	r1, fp
 802cb1e:	f7ff fcdf 	bl	802c4e0 <__ssprint_r>
 802cb22:	2800      	cmp	r0, #0
 802cb24:	f040 8151 	bne.w	802cdca <_svfiprintf_r+0x7ee>
 802cb28:	ae11      	add	r6, sp, #68	@ 0x44
 802cb2a:	9b00      	ldr	r3, [sp, #0]
 802cb2c:	9a00      	ldr	r2, [sp, #0]
 802cb2e:	6073      	str	r3, [r6, #4]
 802cb30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802cb32:	f8c6 8000 	str.w	r8, [r6]
 802cb36:	4413      	add	r3, r2
 802cb38:	9310      	str	r3, [sp, #64]	@ 0x40
 802cb3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802cb3c:	3301      	adds	r3, #1
 802cb3e:	2b07      	cmp	r3, #7
 802cb40:	930f      	str	r3, [sp, #60]	@ 0x3c
 802cb42:	f300 811c 	bgt.w	802cd7e <_svfiprintf_r+0x7a2>
 802cb46:	f106 0308 	add.w	r3, r6, #8
 802cb4a:	f019 0f04 	tst.w	r9, #4
 802cb4e:	f040 811e 	bne.w	802cd8e <_svfiprintf_r+0x7b2>
 802cb52:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 802cb56:	42aa      	cmp	r2, r5
 802cb58:	bfac      	ite	ge
 802cb5a:	189b      	addge	r3, r3, r2
 802cb5c:	195b      	addlt	r3, r3, r5
 802cb5e:	9304      	str	r3, [sp, #16]
 802cb60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802cb62:	b13b      	cbz	r3, 802cb74 <_svfiprintf_r+0x598>
 802cb64:	9801      	ldr	r0, [sp, #4]
 802cb66:	aa0e      	add	r2, sp, #56	@ 0x38
 802cb68:	4659      	mov	r1, fp
 802cb6a:	f7ff fcb9 	bl	802c4e0 <__ssprint_r>
 802cb6e:	2800      	cmp	r0, #0
 802cb70:	f040 812b 	bne.w	802cdca <_svfiprintf_r+0x7ee>
 802cb74:	2300      	movs	r3, #0
 802cb76:	930f      	str	r3, [sp, #60]	@ 0x3c
 802cb78:	463d      	mov	r5, r7
 802cb7a:	ae11      	add	r6, sp, #68	@ 0x44
 802cb7c:	e557      	b.n	802c62e <_svfiprintf_r+0x52>
 802cb7e:	4640      	mov	r0, r8
 802cb80:	f7e3 fb8e 	bl	80102a0 <strlen>
 802cb84:	9000      	str	r0, [sp, #0]
 802cb86:	e732      	b.n	802c9ee <_svfiprintf_r+0x412>
 802cb88:	f049 0910 	orr.w	r9, r9, #16
 802cb8c:	f019 0320 	ands.w	r3, r9, #32
 802cb90:	d008      	beq.n	802cba4 <_svfiprintf_r+0x5c8>
 802cb92:	3507      	adds	r5, #7
 802cb94:	f025 0507 	bic.w	r5, r5, #7
 802cb98:	462f      	mov	r7, r5
 802cb9a:	686d      	ldr	r5, [r5, #4]
 802cb9c:	f857 4b08 	ldr.w	r4, [r7], #8
 802cba0:	2301      	movs	r3, #1
 802cba2:	e6d7      	b.n	802c954 <_svfiprintf_r+0x378>
 802cba4:	462f      	mov	r7, r5
 802cba6:	f019 0510 	ands.w	r5, r9, #16
 802cbaa:	f857 4b04 	ldr.w	r4, [r7], #4
 802cbae:	d001      	beq.n	802cbb4 <_svfiprintf_r+0x5d8>
 802cbb0:	461d      	mov	r5, r3
 802cbb2:	e7f5      	b.n	802cba0 <_svfiprintf_r+0x5c4>
 802cbb4:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802cbb8:	d001      	beq.n	802cbbe <_svfiprintf_r+0x5e2>
 802cbba:	b2a4      	uxth	r4, r4
 802cbbc:	e7f0      	b.n	802cba0 <_svfiprintf_r+0x5c4>
 802cbbe:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802cbc2:	d0ed      	beq.n	802cba0 <_svfiprintf_r+0x5c4>
 802cbc4:	b2e4      	uxtb	r4, r4
 802cbc6:	e7f3      	b.n	802cbb0 <_svfiprintf_r+0x5d4>
 802cbc8:	4a43      	ldr	r2, [pc, #268]	@ (802ccd8 <_svfiprintf_r+0x6fc>)
 802cbca:	e5c6      	b.n	802c75a <_svfiprintf_r+0x17e>
 802cbcc:	462f      	mov	r7, r5
 802cbce:	f019 0510 	ands.w	r5, r9, #16
 802cbd2:	f857 4b04 	ldr.w	r4, [r7], #4
 802cbd6:	d001      	beq.n	802cbdc <_svfiprintf_r+0x600>
 802cbd8:	4615      	mov	r5, r2
 802cbda:	e5ca      	b.n	802c772 <_svfiprintf_r+0x196>
 802cbdc:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 802cbe0:	d001      	beq.n	802cbe6 <_svfiprintf_r+0x60a>
 802cbe2:	b2a4      	uxth	r4, r4
 802cbe4:	e5c5      	b.n	802c772 <_svfiprintf_r+0x196>
 802cbe6:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802cbea:	f43f adc2 	beq.w	802c772 <_svfiprintf_r+0x196>
 802cbee:	b2e4      	uxtb	r4, r4
 802cbf0:	e7f2      	b.n	802cbd8 <_svfiprintf_r+0x5fc>
 802cbf2:	2c0a      	cmp	r4, #10
 802cbf4:	f175 0300 	sbcs.w	r3, r5, #0
 802cbf8:	d206      	bcs.n	802cc08 <_svfiprintf_r+0x62c>
 802cbfa:	3430      	adds	r4, #48	@ 0x30
 802cbfc:	b2e4      	uxtb	r4, r4
 802cbfe:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802cc02:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 802cc06:	e129      	b.n	802ce5c <_svfiprintf_r+0x880>
 802cc08:	ab3a      	add	r3, sp, #232	@ 0xe8
 802cc0a:	9309      	str	r3, [sp, #36]	@ 0x24
 802cc0c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 802cc10:	f04f 0900 	mov.w	r9, #0
 802cc14:	930a      	str	r3, [sp, #40]	@ 0x28
 802cc16:	220a      	movs	r2, #10
 802cc18:	2300      	movs	r3, #0
 802cc1a:	4620      	mov	r0, r4
 802cc1c:	4629      	mov	r1, r5
 802cc1e:	f7e4 f89b 	bl	8010d58 <__aeabi_uldivmod>
 802cc22:	460b      	mov	r3, r1
 802cc24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802cc26:	900b      	str	r0, [sp, #44]	@ 0x2c
 802cc28:	3230      	adds	r2, #48	@ 0x30
 802cc2a:	f801 2c01 	strb.w	r2, [r1, #-1]
 802cc2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802cc30:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 802cc34:	f109 0901 	add.w	r9, r9, #1
 802cc38:	b1e2      	cbz	r2, 802cc74 <_svfiprintf_r+0x698>
 802cc3a:	9a06      	ldr	r2, [sp, #24]
 802cc3c:	7812      	ldrb	r2, [r2, #0]
 802cc3e:	454a      	cmp	r2, r9
 802cc40:	d118      	bne.n	802cc74 <_svfiprintf_r+0x698>
 802cc42:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802cc46:	d015      	beq.n	802cc74 <_svfiprintf_r+0x698>
 802cc48:	2c0a      	cmp	r4, #10
 802cc4a:	f175 0200 	sbcs.w	r2, r5, #0
 802cc4e:	d311      	bcc.n	802cc74 <_svfiprintf_r+0x698>
 802cc50:	9309      	str	r3, [sp, #36]	@ 0x24
 802cc52:	9b07      	ldr	r3, [sp, #28]
 802cc54:	9908      	ldr	r1, [sp, #32]
 802cc56:	eba8 0803 	sub.w	r8, r8, r3
 802cc5a:	461a      	mov	r2, r3
 802cc5c:	4640      	mov	r0, r8
 802cc5e:	f7fc ff86 	bl	8029b6e <strncpy>
 802cc62:	9b06      	ldr	r3, [sp, #24]
 802cc64:	785a      	ldrb	r2, [r3, #1]
 802cc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802cc68:	b172      	cbz	r2, 802cc88 <_svfiprintf_r+0x6ac>
 802cc6a:	9a06      	ldr	r2, [sp, #24]
 802cc6c:	3201      	adds	r2, #1
 802cc6e:	9206      	str	r2, [sp, #24]
 802cc70:	f04f 0900 	mov.w	r9, #0
 802cc74:	2c0a      	cmp	r4, #10
 802cc76:	f175 0500 	sbcs.w	r5, r5, #0
 802cc7a:	f0c0 80ef 	bcc.w	802ce5c <_svfiprintf_r+0x880>
 802cc7e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802cc80:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802cc84:	461d      	mov	r5, r3
 802cc86:	e7c6      	b.n	802cc16 <_svfiprintf_r+0x63a>
 802cc88:	4691      	mov	r9, r2
 802cc8a:	e7f3      	b.n	802cc74 <_svfiprintf_r+0x698>
 802cc8c:	f004 030f 	and.w	r3, r4, #15
 802cc90:	9a05      	ldr	r2, [sp, #20]
 802cc92:	0924      	lsrs	r4, r4, #4
 802cc94:	5cd3      	ldrb	r3, [r2, r3]
 802cc96:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802cc9a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802cc9e:	092d      	lsrs	r5, r5, #4
 802cca0:	ea54 0305 	orrs.w	r3, r4, r5
 802cca4:	d1f2      	bne.n	802cc8c <_svfiprintf_r+0x6b0>
 802cca6:	e0d9      	b.n	802ce5c <_svfiprintf_r+0x880>
 802cca8:	b923      	cbnz	r3, 802ccb4 <_svfiprintf_r+0x6d8>
 802ccaa:	f019 0f01 	tst.w	r9, #1
 802ccae:	d001      	beq.n	802ccb4 <_svfiprintf_r+0x6d8>
 802ccb0:	2430      	movs	r4, #48	@ 0x30
 802ccb2:	e7a4      	b.n	802cbfe <_svfiprintf_r+0x622>
 802ccb4:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802ccb8:	e0d0      	b.n	802ce5c <_svfiprintf_r+0x880>
 802ccba:	2b00      	cmp	r3, #0
 802ccbc:	f000 80a1 	beq.w	802ce02 <_svfiprintf_r+0x826>
 802ccc0:	2400      	movs	r4, #0
 802ccc2:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802ccc6:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802ccca:	462f      	mov	r7, r5
 802cccc:	e5e0      	b.n	802c890 <_svfiprintf_r+0x2b4>
 802ccce:	bf00      	nop
 802ccd0:	080386d3 	.word	0x080386d3
 802ccd4:	080386c3 	.word	0x080386c3
 802ccd8:	080381b0 	.word	0x080381b0
 802ccdc:	2110      	movs	r1, #16
 802ccde:	6071      	str	r1, [r6, #4]
 802cce0:	2a07      	cmp	r2, #7
 802cce2:	4461      	add	r1, ip
 802cce4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802cce8:	dd08      	ble.n	802ccfc <_svfiprintf_r+0x720>
 802ccea:	9801      	ldr	r0, [sp, #4]
 802ccec:	aa0e      	add	r2, sp, #56	@ 0x38
 802ccee:	4659      	mov	r1, fp
 802ccf0:	f7ff fbf6 	bl	802c4e0 <__ssprint_r>
 802ccf4:	2800      	cmp	r0, #0
 802ccf6:	d168      	bne.n	802cdca <_svfiprintf_r+0x7ee>
 802ccf8:	4b5c      	ldr	r3, [pc, #368]	@ (802ce6c <_svfiprintf_r+0x890>)
 802ccfa:	a811      	add	r0, sp, #68	@ 0x44
 802ccfc:	f1aa 0a10 	sub.w	sl, sl, #16
 802cd00:	4606      	mov	r6, r0
 802cd02:	e68d      	b.n	802ca20 <_svfiprintf_r+0x444>
 802cd04:	4606      	mov	r6, r0
 802cd06:	e6a8      	b.n	802ca5a <_svfiprintf_r+0x47e>
 802cd08:	9801      	ldr	r0, [sp, #4]
 802cd0a:	aa0e      	add	r2, sp, #56	@ 0x38
 802cd0c:	4659      	mov	r1, fp
 802cd0e:	f7ff fbe7 	bl	802c4e0 <__ssprint_r>
 802cd12:	2800      	cmp	r0, #0
 802cd14:	d159      	bne.n	802cdca <_svfiprintf_r+0x7ee>
 802cd16:	ae11      	add	r6, sp, #68	@ 0x44
 802cd18:	e6b1      	b.n	802ca7e <_svfiprintf_r+0x4a2>
 802cd1a:	9801      	ldr	r0, [sp, #4]
 802cd1c:	aa0e      	add	r2, sp, #56	@ 0x38
 802cd1e:	4659      	mov	r1, fp
 802cd20:	f7ff fbde 	bl	802c4e0 <__ssprint_r>
 802cd24:	2800      	cmp	r0, #0
 802cd26:	d150      	bne.n	802cdca <_svfiprintf_r+0x7ee>
 802cd28:	ae11      	add	r6, sp, #68	@ 0x44
 802cd2a:	e6b8      	b.n	802ca9e <_svfiprintf_r+0x4c2>
 802cd2c:	2110      	movs	r1, #16
 802cd2e:	6071      	str	r1, [r6, #4]
 802cd30:	2a07      	cmp	r2, #7
 802cd32:	4461      	add	r1, ip
 802cd34:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802cd38:	dd08      	ble.n	802cd4c <_svfiprintf_r+0x770>
 802cd3a:	9801      	ldr	r0, [sp, #4]
 802cd3c:	aa0e      	add	r2, sp, #56	@ 0x38
 802cd3e:	4659      	mov	r1, fp
 802cd40:	f7ff fbce 	bl	802c4e0 <__ssprint_r>
 802cd44:	2800      	cmp	r0, #0
 802cd46:	d140      	bne.n	802cdca <_svfiprintf_r+0x7ee>
 802cd48:	4b49      	ldr	r3, [pc, #292]	@ (802ce70 <_svfiprintf_r+0x894>)
 802cd4a:	a811      	add	r0, sp, #68	@ 0x44
 802cd4c:	f1aa 0a10 	sub.w	sl, sl, #16
 802cd50:	4606      	mov	r6, r0
 802cd52:	e6ae      	b.n	802cab2 <_svfiprintf_r+0x4d6>
 802cd54:	4606      	mov	r6, r0
 802cd56:	e6c9      	b.n	802caec <_svfiprintf_r+0x510>
 802cd58:	2010      	movs	r0, #16
 802cd5a:	4402      	add	r2, r0
 802cd5c:	2b07      	cmp	r3, #7
 802cd5e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802cd62:	6070      	str	r0, [r6, #4]
 802cd64:	dd06      	ble.n	802cd74 <_svfiprintf_r+0x798>
 802cd66:	9801      	ldr	r0, [sp, #4]
 802cd68:	aa0e      	add	r2, sp, #56	@ 0x38
 802cd6a:	4659      	mov	r1, fp
 802cd6c:	f7ff fbb8 	bl	802c4e0 <__ssprint_r>
 802cd70:	bb58      	cbnz	r0, 802cdca <_svfiprintf_r+0x7ee>
 802cd72:	a911      	add	r1, sp, #68	@ 0x44
 802cd74:	3c10      	subs	r4, #16
 802cd76:	460e      	mov	r6, r1
 802cd78:	e6bc      	b.n	802caf4 <_svfiprintf_r+0x518>
 802cd7a:	460e      	mov	r6, r1
 802cd7c:	e6d5      	b.n	802cb2a <_svfiprintf_r+0x54e>
 802cd7e:	9801      	ldr	r0, [sp, #4]
 802cd80:	aa0e      	add	r2, sp, #56	@ 0x38
 802cd82:	4659      	mov	r1, fp
 802cd84:	f7ff fbac 	bl	802c4e0 <__ssprint_r>
 802cd88:	b9f8      	cbnz	r0, 802cdca <_svfiprintf_r+0x7ee>
 802cd8a:	ab11      	add	r3, sp, #68	@ 0x44
 802cd8c:	e6dd      	b.n	802cb4a <_svfiprintf_r+0x56e>
 802cd8e:	9a03      	ldr	r2, [sp, #12]
 802cd90:	1b54      	subs	r4, r2, r5
 802cd92:	2c00      	cmp	r4, #0
 802cd94:	f77f aedd 	ble.w	802cb52 <_svfiprintf_r+0x576>
 802cd98:	4e34      	ldr	r6, [pc, #208]	@ (802ce6c <_svfiprintf_r+0x890>)
 802cd9a:	f04f 0810 	mov.w	r8, #16
 802cd9e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802cda2:	2c10      	cmp	r4, #16
 802cda4:	f102 0201 	add.w	r2, r2, #1
 802cda8:	601e      	str	r6, [r3, #0]
 802cdaa:	dc17      	bgt.n	802cddc <_svfiprintf_r+0x800>
 802cdac:	605c      	str	r4, [r3, #4]
 802cdae:	2a07      	cmp	r2, #7
 802cdb0:	440c      	add	r4, r1
 802cdb2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802cdb6:	f77f aecc 	ble.w	802cb52 <_svfiprintf_r+0x576>
 802cdba:	9801      	ldr	r0, [sp, #4]
 802cdbc:	aa0e      	add	r2, sp, #56	@ 0x38
 802cdbe:	4659      	mov	r1, fp
 802cdc0:	f7ff fb8e 	bl	802c4e0 <__ssprint_r>
 802cdc4:	2800      	cmp	r0, #0
 802cdc6:	f43f aec4 	beq.w	802cb52 <_svfiprintf_r+0x576>
 802cdca:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802cdce:	065b      	lsls	r3, r3, #25
 802cdd0:	f53f ac1c 	bmi.w	802c60c <_svfiprintf_r+0x30>
 802cdd4:	9804      	ldr	r0, [sp, #16]
 802cdd6:	b03b      	add	sp, #236	@ 0xec
 802cdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cddc:	3110      	adds	r1, #16
 802cdde:	2a07      	cmp	r2, #7
 802cde0:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802cde4:	f8c3 8004 	str.w	r8, [r3, #4]
 802cde8:	dc02      	bgt.n	802cdf0 <_svfiprintf_r+0x814>
 802cdea:	3308      	adds	r3, #8
 802cdec:	3c10      	subs	r4, #16
 802cdee:	e7d6      	b.n	802cd9e <_svfiprintf_r+0x7c2>
 802cdf0:	9801      	ldr	r0, [sp, #4]
 802cdf2:	aa0e      	add	r2, sp, #56	@ 0x38
 802cdf4:	4659      	mov	r1, fp
 802cdf6:	f7ff fb73 	bl	802c4e0 <__ssprint_r>
 802cdfa:	2800      	cmp	r0, #0
 802cdfc:	d1e5      	bne.n	802cdca <_svfiprintf_r+0x7ee>
 802cdfe:	ab11      	add	r3, sp, #68	@ 0x44
 802ce00:	e7f4      	b.n	802cdec <_svfiprintf_r+0x810>
 802ce02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ce04:	2b00      	cmp	r3, #0
 802ce06:	d0e0      	beq.n	802cdca <_svfiprintf_r+0x7ee>
 802ce08:	9801      	ldr	r0, [sp, #4]
 802ce0a:	aa0e      	add	r2, sp, #56	@ 0x38
 802ce0c:	4659      	mov	r1, fp
 802ce0e:	f7ff fb67 	bl	802c4e0 <__ssprint_r>
 802ce12:	e7da      	b.n	802cdca <_svfiprintf_r+0x7ee>
 802ce14:	ea54 0205 	orrs.w	r2, r4, r5
 802ce18:	46ca      	mov	sl, r9
 802ce1a:	f43f adac 	beq.w	802c976 <_svfiprintf_r+0x39a>
 802ce1e:	2b01      	cmp	r3, #1
 802ce20:	f43f aee7 	beq.w	802cbf2 <_svfiprintf_r+0x616>
 802ce24:	2b02      	cmp	r3, #2
 802ce26:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802ce2a:	f43f af2f 	beq.w	802cc8c <_svfiprintf_r+0x6b0>
 802ce2e:	f004 0307 	and.w	r3, r4, #7
 802ce32:	08e4      	lsrs	r4, r4, #3
 802ce34:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802ce38:	08ed      	lsrs	r5, r5, #3
 802ce3a:	3330      	adds	r3, #48	@ 0x30
 802ce3c:	ea54 0105 	orrs.w	r1, r4, r5
 802ce40:	4642      	mov	r2, r8
 802ce42:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802ce46:	d1f2      	bne.n	802ce2e <_svfiprintf_r+0x852>
 802ce48:	f01a 0f01 	tst.w	sl, #1
 802ce4c:	d006      	beq.n	802ce5c <_svfiprintf_r+0x880>
 802ce4e:	2b30      	cmp	r3, #48	@ 0x30
 802ce50:	d004      	beq.n	802ce5c <_svfiprintf_r+0x880>
 802ce52:	2330      	movs	r3, #48	@ 0x30
 802ce54:	f808 3c01 	strb.w	r3, [r8, #-1]
 802ce58:	f1a2 0802 	sub.w	r8, r2, #2
 802ce5c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802ce5e:	eba3 0308 	sub.w	r3, r3, r8
 802ce62:	9c00      	ldr	r4, [sp, #0]
 802ce64:	9300      	str	r3, [sp, #0]
 802ce66:	46d1      	mov	r9, sl
 802ce68:	e5c2      	b.n	802c9f0 <_svfiprintf_r+0x414>
 802ce6a:	bf00      	nop
 802ce6c:	080386d3 	.word	0x080386d3
 802ce70:	080386c3 	.word	0x080386c3

0802ce74 <_sungetc_r>:
 802ce74:	b538      	push	{r3, r4, r5, lr}
 802ce76:	1c4b      	adds	r3, r1, #1
 802ce78:	4614      	mov	r4, r2
 802ce7a:	d103      	bne.n	802ce84 <_sungetc_r+0x10>
 802ce7c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802ce80:	4628      	mov	r0, r5
 802ce82:	bd38      	pop	{r3, r4, r5, pc}
 802ce84:	8993      	ldrh	r3, [r2, #12]
 802ce86:	f023 0320 	bic.w	r3, r3, #32
 802ce8a:	8193      	strh	r3, [r2, #12]
 802ce8c:	6853      	ldr	r3, [r2, #4]
 802ce8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 802ce90:	b2cd      	uxtb	r5, r1
 802ce92:	b18a      	cbz	r2, 802ceb8 <_sungetc_r+0x44>
 802ce94:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802ce96:	429a      	cmp	r2, r3
 802ce98:	dd08      	ble.n	802ceac <_sungetc_r+0x38>
 802ce9a:	6823      	ldr	r3, [r4, #0]
 802ce9c:	1e5a      	subs	r2, r3, #1
 802ce9e:	6022      	str	r2, [r4, #0]
 802cea0:	f803 5c01 	strb.w	r5, [r3, #-1]
 802cea4:	6863      	ldr	r3, [r4, #4]
 802cea6:	3301      	adds	r3, #1
 802cea8:	6063      	str	r3, [r4, #4]
 802ceaa:	e7e9      	b.n	802ce80 <_sungetc_r+0xc>
 802ceac:	4621      	mov	r1, r4
 802ceae:	f005 f8a7 	bl	8032000 <__submore>
 802ceb2:	2800      	cmp	r0, #0
 802ceb4:	d0f1      	beq.n	802ce9a <_sungetc_r+0x26>
 802ceb6:	e7e1      	b.n	802ce7c <_sungetc_r+0x8>
 802ceb8:	6921      	ldr	r1, [r4, #16]
 802ceba:	6822      	ldr	r2, [r4, #0]
 802cebc:	b141      	cbz	r1, 802ced0 <_sungetc_r+0x5c>
 802cebe:	4291      	cmp	r1, r2
 802cec0:	d206      	bcs.n	802ced0 <_sungetc_r+0x5c>
 802cec2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 802cec6:	42a9      	cmp	r1, r5
 802cec8:	d102      	bne.n	802ced0 <_sungetc_r+0x5c>
 802ceca:	3a01      	subs	r2, #1
 802cecc:	6022      	str	r2, [r4, #0]
 802cece:	e7ea      	b.n	802cea6 <_sungetc_r+0x32>
 802ced0:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 802ced4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802ced8:	6323      	str	r3, [r4, #48]	@ 0x30
 802ceda:	2303      	movs	r3, #3
 802cedc:	6363      	str	r3, [r4, #52]	@ 0x34
 802cede:	4623      	mov	r3, r4
 802cee0:	f803 5f42 	strb.w	r5, [r3, #66]!
 802cee4:	6023      	str	r3, [r4, #0]
 802cee6:	2301      	movs	r3, #1
 802cee8:	e7de      	b.n	802cea8 <_sungetc_r+0x34>

0802ceea <__ssrefill_r>:
 802ceea:	b510      	push	{r4, lr}
 802ceec:	460c      	mov	r4, r1
 802ceee:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 802cef0:	b169      	cbz	r1, 802cf0e <__ssrefill_r+0x24>
 802cef2:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802cef6:	4299      	cmp	r1, r3
 802cef8:	d001      	beq.n	802cefe <__ssrefill_r+0x14>
 802cefa:	f7fe ff2f 	bl	802bd5c <_free_r>
 802cefe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802cf00:	6063      	str	r3, [r4, #4]
 802cf02:	2000      	movs	r0, #0
 802cf04:	6320      	str	r0, [r4, #48]	@ 0x30
 802cf06:	b113      	cbz	r3, 802cf0e <__ssrefill_r+0x24>
 802cf08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802cf0a:	6023      	str	r3, [r4, #0]
 802cf0c:	bd10      	pop	{r4, pc}
 802cf0e:	6923      	ldr	r3, [r4, #16]
 802cf10:	6023      	str	r3, [r4, #0]
 802cf12:	2300      	movs	r3, #0
 802cf14:	6063      	str	r3, [r4, #4]
 802cf16:	89a3      	ldrh	r3, [r4, #12]
 802cf18:	f043 0320 	orr.w	r3, r3, #32
 802cf1c:	81a3      	strh	r3, [r4, #12]
 802cf1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802cf22:	e7f3      	b.n	802cf0c <__ssrefill_r+0x22>

0802cf24 <_sfread_r>:
 802cf24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cf28:	461f      	mov	r7, r3
 802cf2a:	4613      	mov	r3, r2
 802cf2c:	437b      	muls	r3, r7
 802cf2e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802cf30:	9000      	str	r0, [sp, #0]
 802cf32:	4688      	mov	r8, r1
 802cf34:	4691      	mov	r9, r2
 802cf36:	d028      	beq.n	802cf8a <_sfread_r+0x66>
 802cf38:	461e      	mov	r6, r3
 802cf3a:	f04f 0b00 	mov.w	fp, #0
 802cf3e:	e9d4 1500 	ldrd	r1, r5, [r4]
 802cf42:	42b5      	cmp	r5, r6
 802cf44:	d30b      	bcc.n	802cf5e <_sfread_r+0x3a>
 802cf46:	4632      	mov	r2, r6
 802cf48:	4640      	mov	r0, r8
 802cf4a:	f7fe f805 	bl	802af58 <memcpy>
 802cf4e:	6862      	ldr	r2, [r4, #4]
 802cf50:	6821      	ldr	r1, [r4, #0]
 802cf52:	1b92      	subs	r2, r2, r6
 802cf54:	4431      	add	r1, r6
 802cf56:	6062      	str	r2, [r4, #4]
 802cf58:	6021      	str	r1, [r4, #0]
 802cf5a:	463b      	mov	r3, r7
 802cf5c:	e015      	b.n	802cf8a <_sfread_r+0x66>
 802cf5e:	462a      	mov	r2, r5
 802cf60:	4640      	mov	r0, r8
 802cf62:	9301      	str	r3, [sp, #4]
 802cf64:	f7fd fff8 	bl	802af58 <memcpy>
 802cf68:	6822      	ldr	r2, [r4, #0]
 802cf6a:	9800      	ldr	r0, [sp, #0]
 802cf6c:	442a      	add	r2, r5
 802cf6e:	e9c4 2b00 	strd	r2, fp, [r4]
 802cf72:	4621      	mov	r1, r4
 802cf74:	f7ff ffb9 	bl	802ceea <__ssrefill_r>
 802cf78:	44a8      	add	r8, r5
 802cf7a:	9b01      	ldr	r3, [sp, #4]
 802cf7c:	eba6 0a05 	sub.w	sl, r6, r5
 802cf80:	b138      	cbz	r0, 802cf92 <_sfread_r+0x6e>
 802cf82:	441d      	add	r5, r3
 802cf84:	1bad      	subs	r5, r5, r6
 802cf86:	fbb5 f3f9 	udiv	r3, r5, r9
 802cf8a:	4618      	mov	r0, r3
 802cf8c:	b003      	add	sp, #12
 802cf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cf92:	4656      	mov	r6, sl
 802cf94:	e7d3      	b.n	802cf3e <_sfread_r+0x1a>
	...

0802cf98 <__ssvfiscanf_r>:
 802cf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cf9c:	b0df      	sub	sp, #380	@ 0x17c
 802cf9e:	af02      	add	r7, sp, #8
 802cfa0:	460c      	mov	r4, r1
 802cfa2:	623b      	str	r3, [r7, #32]
 802cfa4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802cfa8:	6278      	str	r0, [r7, #36]	@ 0x24
 802cfaa:	049d      	lsls	r5, r3, #18
 802cfac:	60ba      	str	r2, [r7, #8]
 802cfae:	d406      	bmi.n	802cfbe <__ssvfiscanf_r+0x26>
 802cfb0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802cfb4:	818b      	strh	r3, [r1, #12]
 802cfb6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802cfb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802cfbc:	664b      	str	r3, [r1, #100]	@ 0x64
 802cfbe:	2300      	movs	r3, #0
 802cfc0:	e9c7 3305 	strd	r3, r3, [r7, #20]
 802cfc4:	60fb      	str	r3, [r7, #12]
 802cfc6:	469b      	mov	fp, r3
 802cfc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802cfca:	61fb      	str	r3, [r7, #28]
 802cfcc:	e005      	b.n	802cfda <__ssvfiscanf_r+0x42>
 802cfce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802cfd0:	4621      	mov	r1, r4
 802cfd2:	f7ff ff8a 	bl	802ceea <__ssrefill_r>
 802cfd6:	b168      	cbz	r0, 802cff4 <__ssvfiscanf_r+0x5c>
 802cfd8:	60bd      	str	r5, [r7, #8]
 802cfda:	68bd      	ldr	r5, [r7, #8]
 802cfdc:	f815 3b01 	ldrb.w	r3, [r5], #1
 802cfe0:	637b      	str	r3, [r7, #52]	@ 0x34
 802cfe2:	b333      	cbz	r3, 802d032 <__ssvfiscanf_r+0x9a>
 802cfe4:	4a75      	ldr	r2, [pc, #468]	@ (802d1bc <__ssvfiscanf_r+0x224>)
 802cfe6:	5cd6      	ldrb	r6, [r2, r3]
 802cfe8:	f016 0608 	ands.w	r6, r6, #8
 802cfec:	d011      	beq.n	802d012 <__ssvfiscanf_r+0x7a>
 802cfee:	6863      	ldr	r3, [r4, #4]
 802cff0:	2b00      	cmp	r3, #0
 802cff2:	ddec      	ble.n	802cfce <__ssvfiscanf_r+0x36>
 802cff4:	6823      	ldr	r3, [r4, #0]
 802cff6:	4971      	ldr	r1, [pc, #452]	@ (802d1bc <__ssvfiscanf_r+0x224>)
 802cff8:	781a      	ldrb	r2, [r3, #0]
 802cffa:	5c8a      	ldrb	r2, [r1, r2]
 802cffc:	0710      	lsls	r0, r2, #28
 802cffe:	d5eb      	bpl.n	802cfd8 <__ssvfiscanf_r+0x40>
 802d000:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d002:	3201      	adds	r2, #1
 802d004:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802d006:	6862      	ldr	r2, [r4, #4]
 802d008:	3301      	adds	r3, #1
 802d00a:	3a01      	subs	r2, #1
 802d00c:	6062      	str	r2, [r4, #4]
 802d00e:	6023      	str	r3, [r4, #0]
 802d010:	e7ed      	b.n	802cfee <__ssvfiscanf_r+0x56>
 802d012:	2b25      	cmp	r3, #37	@ 0x25
 802d014:	d15f      	bne.n	802d0d6 <__ssvfiscanf_r+0x13e>
 802d016:	62be      	str	r6, [r7, #40]	@ 0x28
 802d018:	462a      	mov	r2, r5
 802d01a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802d01e:	60ba      	str	r2, [r7, #8]
 802d020:	2b7a      	cmp	r3, #122	@ 0x7a
 802d022:	d806      	bhi.n	802d032 <__ssvfiscanf_r+0x9a>
 802d024:	2b42      	cmp	r3, #66	@ 0x42
 802d026:	d809      	bhi.n	802d03c <__ssvfiscanf_r+0xa4>
 802d028:	2b2a      	cmp	r3, #42	@ 0x2a
 802d02a:	d079      	beq.n	802d120 <__ssvfiscanf_r+0x188>
 802d02c:	d844      	bhi.n	802d0b8 <__ssvfiscanf_r+0x120>
 802d02e:	2b25      	cmp	r3, #37	@ 0x25
 802d030:	d050      	beq.n	802d0d4 <__ssvfiscanf_r+0x13c>
 802d032:	f1bb 0f00 	cmp.w	fp, #0
 802d036:	f000 810e 	beq.w	802d256 <__ssvfiscanf_r+0x2be>
 802d03a:	e107      	b.n	802d24c <__ssvfiscanf_r+0x2b4>
 802d03c:	3b43      	subs	r3, #67	@ 0x43
 802d03e:	2b37      	cmp	r3, #55	@ 0x37
 802d040:	f200 80fd 	bhi.w	802d23e <__ssvfiscanf_r+0x2a6>
 802d044:	e8df f013 	tbh	[pc, r3, lsl #1]
 802d048:	00a40117 	.word	0x00a40117
 802d04c:	00fb00fb 	.word	0x00fb00fb
 802d050:	00fb00fb 	.word	0x00fb00fb
 802d054:	00fb00fb 	.word	0x00fb00fb
 802d058:	008e00fb 	.word	0x008e00fb
 802d05c:	00fb00fb 	.word	0x00fb00fb
 802d060:	00fb00a8 	.word	0x00fb00a8
 802d064:	00fb00fb 	.word	0x00fb00fb
 802d068:	00fb00c0 	.word	0x00fb00c0
 802d06c:	00fb00fb 	.word	0x00fb00fb
 802d070:	00b400fb 	.word	0x00b400fb
 802d074:	00fb00fb 	.word	0x00fb00fb
 802d078:	00fb010d 	.word	0x00fb010d
 802d07c:	00fb00fb 	.word	0x00fb00fb
 802d080:	00fb00fb 	.word	0x00fb00fb
 802d084:	00fb00fb 	.word	0x00fb00fb
 802d088:	00a60119 	.word	0x00a60119
 802d08c:	00fb00fb 	.word	0x00fb00fb
 802d090:	008100fb 	.word	0x008100fb
 802d094:	008e013e 	.word	0x008e013e
 802d098:	007300fb 	.word	0x007300fb
 802d09c:	01200095 	.word	0x01200095
 802d0a0:	011d00aa 	.word	0x011d00aa
 802d0a4:	00fb00fb 	.word	0x00fb00fb
 802d0a8:	009200c2 	.word	0x009200c2
 802d0ac:	00fb00b0 	.word	0x00fb00b0
 802d0b0:	00b400fb 	.word	0x00b400fb
 802d0b4:	009200fb 	.word	0x009200fb
 802d0b8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802d0bc:	2a09      	cmp	r2, #9
 802d0be:	d8b8      	bhi.n	802d032 <__ssvfiscanf_r+0x9a>
 802d0c0:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802d0c4:	d1b5      	bne.n	802d032 <__ssvfiscanf_r+0x9a>
 802d0c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802d0c8:	220a      	movs	r2, #10
 802d0ca:	fb02 3301 	mla	r3, r2, r1, r3
 802d0ce:	3b30      	subs	r3, #48	@ 0x30
 802d0d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d0d2:	e02a      	b.n	802d12a <__ssvfiscanf_r+0x192>
 802d0d4:	68bd      	ldr	r5, [r7, #8]
 802d0d6:	6863      	ldr	r3, [r4, #4]
 802d0d8:	2b00      	cmp	r3, #0
 802d0da:	dd0e      	ble.n	802d0fa <__ssvfiscanf_r+0x162>
 802d0dc:	6823      	ldr	r3, [r4, #0]
 802d0de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802d0e2:	7819      	ldrb	r1, [r3, #0]
 802d0e4:	4291      	cmp	r1, r2
 802d0e6:	d1a4      	bne.n	802d032 <__ssvfiscanf_r+0x9a>
 802d0e8:	3301      	adds	r3, #1
 802d0ea:	6862      	ldr	r2, [r4, #4]
 802d0ec:	6023      	str	r3, [r4, #0]
 802d0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d0f0:	3a01      	subs	r2, #1
 802d0f2:	3301      	adds	r3, #1
 802d0f4:	6062      	str	r2, [r4, #4]
 802d0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d0f8:	e76e      	b.n	802cfd8 <__ssvfiscanf_r+0x40>
 802d0fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d0fc:	4621      	mov	r1, r4
 802d0fe:	f7ff fef4 	bl	802ceea <__ssrefill_r>
 802d102:	2800      	cmp	r0, #0
 802d104:	d0ea      	beq.n	802d0dc <__ssvfiscanf_r+0x144>
 802d106:	69fb      	ldr	r3, [r7, #28]
 802d108:	b113      	cbz	r3, 802d110 <__ssvfiscanf_r+0x178>
 802d10a:	89a3      	ldrh	r3, [r4, #12]
 802d10c:	065b      	lsls	r3, r3, #25
 802d10e:	d590      	bpl.n	802d032 <__ssvfiscanf_r+0x9a>
 802d110:	f1bb 0f00 	cmp.w	fp, #0
 802d114:	f040 8654 	bne.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802d118:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802d11c:	61fb      	str	r3, [r7, #28]
 802d11e:	e09a      	b.n	802d256 <__ssvfiscanf_r+0x2be>
 802d120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d122:	4333      	orrs	r3, r6
 802d124:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d126:	d184      	bne.n	802d032 <__ssvfiscanf_r+0x9a>
 802d128:	2610      	movs	r6, #16
 802d12a:	68bd      	ldr	r5, [r7, #8]
 802d12c:	e774      	b.n	802d018 <__ssvfiscanf_r+0x80>
 802d12e:	0731      	lsls	r1, r6, #28
 802d130:	f47f af7f 	bne.w	802d032 <__ssvfiscanf_r+0x9a>
 802d134:	786b      	ldrb	r3, [r5, #1]
 802d136:	2b6c      	cmp	r3, #108	@ 0x6c
 802d138:	d104      	bne.n	802d144 <__ssvfiscanf_r+0x1ac>
 802d13a:	1cab      	adds	r3, r5, #2
 802d13c:	60bb      	str	r3, [r7, #8]
 802d13e:	f046 0602 	orr.w	r6, r6, #2
 802d142:	e7f2      	b.n	802d12a <__ssvfiscanf_r+0x192>
 802d144:	f046 0601 	orr.w	r6, r6, #1
 802d148:	e7ef      	b.n	802d12a <__ssvfiscanf_r+0x192>
 802d14a:	0732      	lsls	r2, r6, #28
 802d14c:	f47f af71 	bne.w	802d032 <__ssvfiscanf_r+0x9a>
 802d150:	786b      	ldrb	r3, [r5, #1]
 802d152:	2b68      	cmp	r3, #104	@ 0x68
 802d154:	bf03      	ittte	eq
 802d156:	1cab      	addeq	r3, r5, #2
 802d158:	60bb      	streq	r3, [r7, #8]
 802d15a:	f046 0608 	orreq.w	r6, r6, #8
 802d15e:	f046 0604 	orrne.w	r6, r6, #4
 802d162:	e7e2      	b.n	802d12a <__ssvfiscanf_r+0x192>
 802d164:	0733      	lsls	r3, r6, #28
 802d166:	f47f af64 	bne.w	802d032 <__ssvfiscanf_r+0x9a>
 802d16a:	e7e8      	b.n	802d13e <__ssvfiscanf_r+0x1a6>
 802d16c:	0735      	lsls	r5, r6, #28
 802d16e:	d0dc      	beq.n	802d12a <__ssvfiscanf_r+0x192>
 802d170:	e75f      	b.n	802d032 <__ssvfiscanf_r+0x9a>
 802d172:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 802d176:	f47f af5c 	bne.w	802d032 <__ssvfiscanf_r+0x9a>
 802d17a:	f1bb 0f00 	cmp.w	fp, #0
 802d17e:	d104      	bne.n	802d18a <__ssvfiscanf_r+0x1f2>
 802d180:	b082      	sub	sp, #8
 802d182:	f10d 0b08 	add.w	fp, sp, #8
 802d186:	e9cb 3300 	strd	r3, r3, [fp]
 802d18a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 802d18e:	e7cc      	b.n	802d12a <__ssvfiscanf_r+0x192>
 802d190:	f046 0601 	orr.w	r6, r6, #1
 802d194:	4b0a      	ldr	r3, [pc, #40]	@ (802d1c0 <__ssvfiscanf_r+0x228>)
 802d196:	e008      	b.n	802d1aa <__ssvfiscanf_r+0x212>
 802d198:	f046 0601 	orr.w	r6, r6, #1
 802d19c:	4b09      	ldr	r3, [pc, #36]	@ (802d1c4 <__ssvfiscanf_r+0x22c>)
 802d19e:	60fb      	str	r3, [r7, #12]
 802d1a0:	2308      	movs	r3, #8
 802d1a2:	617b      	str	r3, [r7, #20]
 802d1a4:	2503      	movs	r5, #3
 802d1a6:	e012      	b.n	802d1ce <__ssvfiscanf_r+0x236>
 802d1a8:	4b06      	ldr	r3, [pc, #24]	@ (802d1c4 <__ssvfiscanf_r+0x22c>)
 802d1aa:	60fb      	str	r3, [r7, #12]
 802d1ac:	230a      	movs	r3, #10
 802d1ae:	e7f8      	b.n	802d1a2 <__ssvfiscanf_r+0x20a>
 802d1b0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802d1b4:	4b03      	ldr	r3, [pc, #12]	@ (802d1c4 <__ssvfiscanf_r+0x22c>)
 802d1b6:	60fb      	str	r3, [r7, #12]
 802d1b8:	2310      	movs	r3, #16
 802d1ba:	e7f2      	b.n	802d1a2 <__ssvfiscanf_r+0x20a>
 802d1bc:	0803854d 	.word	0x0803854d
 802d1c0:	080291e9 	.word	0x080291e9
 802d1c4:	08031fe9 	.word	0x08031fe9
 802d1c8:	f046 0601 	orr.w	r6, r6, #1
 802d1cc:	2502      	movs	r5, #2
 802d1ce:	6863      	ldr	r3, [r4, #4]
 802d1d0:	2b00      	cmp	r3, #0
 802d1d2:	dd7b      	ble.n	802d2cc <__ssvfiscanf_r+0x334>
 802d1d4:	0671      	lsls	r1, r6, #25
 802d1d6:	d407      	bmi.n	802d1e8 <__ssvfiscanf_r+0x250>
 802d1d8:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 802d564 <__ssvfiscanf_r+0x5cc>
 802d1dc:	6823      	ldr	r3, [r4, #0]
 802d1de:	781a      	ldrb	r2, [r3, #0]
 802d1e0:	f818 2002 	ldrb.w	r2, [r8, r2]
 802d1e4:	0712      	lsls	r2, r2, #28
 802d1e6:	d479      	bmi.n	802d2dc <__ssvfiscanf_r+0x344>
 802d1e8:	2d02      	cmp	r5, #2
 802d1ea:	f000 836f 	beq.w	802d8cc <__ssvfiscanf_r+0x934>
 802d1ee:	2d03      	cmp	r5, #3
 802d1f0:	f000 84f6 	beq.w	802dbe0 <__ssvfiscanf_r+0xc48>
 802d1f4:	f006 0310 	and.w	r3, r6, #16
 802d1f8:	2d01      	cmp	r5, #1
 802d1fa:	613b      	str	r3, [r7, #16]
 802d1fc:	f006 0501 	and.w	r5, r6, #1
 802d200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d202:	f000 81b1 	beq.w	802d568 <__ssvfiscanf_r+0x5d0>
 802d206:	2b01      	cmp	r3, #1
 802d208:	bf38      	it	cc
 802d20a:	2301      	movcc	r3, #1
 802d20c:	4698      	mov	r8, r3
 802d20e:	693b      	ldr	r3, [r7, #16]
 802d210:	2d00      	cmp	r5, #0
 802d212:	f000 813b 	beq.w	802d48c <__ssvfiscanf_r+0x4f4>
 802d216:	2b00      	cmp	r3, #0
 802d218:	f040 80d8 	bne.w	802d3cc <__ssvfiscanf_r+0x434>
 802d21c:	6a3b      	ldr	r3, [r7, #32]
 802d21e:	0636      	lsls	r6, r6, #24
 802d220:	f853 5b04 	ldr.w	r5, [r3], #4
 802d224:	623b      	str	r3, [r7, #32]
 802d226:	f140 80d7 	bpl.w	802d3d8 <__ssvfiscanf_r+0x440>
 802d22a:	b145      	cbz	r5, 802d23e <__ssvfiscanf_r+0x2a6>
 802d22c:	2080      	movs	r0, #128	@ 0x80
 802d22e:	f7fe fe9d 	bl	802bf6c <malloc>
 802d232:	4606      	mov	r6, r0
 802d234:	2800      	cmp	r0, #0
 802d236:	d164      	bne.n	802d302 <__ssvfiscanf_r+0x36a>
 802d238:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802d23c:	61fb      	str	r3, [r7, #28]
 802d23e:	f1bb 0f00 	cmp.w	fp, #0
 802d242:	d008      	beq.n	802d256 <__ssvfiscanf_r+0x2be>
 802d244:	69fb      	ldr	r3, [r7, #28]
 802d246:	3301      	adds	r3, #1
 802d248:	f000 85ba 	beq.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802d24c:	f8db 0000 	ldr.w	r0, [fp]
 802d250:	b108      	cbz	r0, 802d256 <__ssvfiscanf_r+0x2be>
 802d252:	f7fe fe93 	bl	802bf7c <free>
 802d256:	69f8      	ldr	r0, [r7, #28]
 802d258:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 802d25c:	46bd      	mov	sp, r7
 802d25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d262:	68b9      	ldr	r1, [r7, #8]
 802d264:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 802d268:	f003 fe67 	bl	8030f3a <__sccl>
 802d26c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802d270:	60b8      	str	r0, [r7, #8]
 802d272:	2501      	movs	r5, #1
 802d274:	e7ab      	b.n	802d1ce <__ssvfiscanf_r+0x236>
 802d276:	f046 0601 	orr.w	r6, r6, #1
 802d27a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802d27e:	2500      	movs	r5, #0
 802d280:	e7a5      	b.n	802d1ce <__ssvfiscanf_r+0x236>
 802d282:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 802d286:	e795      	b.n	802d1b4 <__ssvfiscanf_r+0x21c>
 802d288:	06f0      	lsls	r0, r6, #27
 802d28a:	f53f aea6 	bmi.w	802cfda <__ssvfiscanf_r+0x42>
 802d28e:	6a3a      	ldr	r2, [r7, #32]
 802d290:	0731      	lsls	r1, r6, #28
 802d292:	f852 3b04 	ldr.w	r3, [r2], #4
 802d296:	623a      	str	r2, [r7, #32]
 802d298:	d502      	bpl.n	802d2a0 <__ssvfiscanf_r+0x308>
 802d29a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d29c:	701a      	strb	r2, [r3, #0]
 802d29e:	e69c      	b.n	802cfda <__ssvfiscanf_r+0x42>
 802d2a0:	0772      	lsls	r2, r6, #29
 802d2a2:	d502      	bpl.n	802d2aa <__ssvfiscanf_r+0x312>
 802d2a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d2a6:	801a      	strh	r2, [r3, #0]
 802d2a8:	e697      	b.n	802cfda <__ssvfiscanf_r+0x42>
 802d2aa:	07f5      	lsls	r5, r6, #31
 802d2ac:	d502      	bpl.n	802d2b4 <__ssvfiscanf_r+0x31c>
 802d2ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d2b0:	601a      	str	r2, [r3, #0]
 802d2b2:	e692      	b.n	802cfda <__ssvfiscanf_r+0x42>
 802d2b4:	07b0      	lsls	r0, r6, #30
 802d2b6:	d5fa      	bpl.n	802d2ae <__ssvfiscanf_r+0x316>
 802d2b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d2ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802d2bc:	17d2      	asrs	r2, r2, #31
 802d2be:	e9c3 1200 	strd	r1, r2, [r3]
 802d2c2:	e68a      	b.n	802cfda <__ssvfiscanf_r+0x42>
 802d2c4:	4ba6      	ldr	r3, [pc, #664]	@ (802d560 <__ssvfiscanf_r+0x5c8>)
 802d2c6:	60fb      	str	r3, [r7, #12]
 802d2c8:	2300      	movs	r3, #0
 802d2ca:	e76a      	b.n	802d1a2 <__ssvfiscanf_r+0x20a>
 802d2cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d2ce:	4621      	mov	r1, r4
 802d2d0:	f7ff fe0b 	bl	802ceea <__ssrefill_r>
 802d2d4:	2800      	cmp	r0, #0
 802d2d6:	f43f af7d 	beq.w	802d1d4 <__ssvfiscanf_r+0x23c>
 802d2da:	e714      	b.n	802d106 <__ssvfiscanf_r+0x16e>
 802d2dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d2de:	3201      	adds	r2, #1
 802d2e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802d2e2:	6862      	ldr	r2, [r4, #4]
 802d2e4:	3a01      	subs	r2, #1
 802d2e6:	2a00      	cmp	r2, #0
 802d2e8:	6062      	str	r2, [r4, #4]
 802d2ea:	dd02      	ble.n	802d2f2 <__ssvfiscanf_r+0x35a>
 802d2ec:	3301      	adds	r3, #1
 802d2ee:	6023      	str	r3, [r4, #0]
 802d2f0:	e774      	b.n	802d1dc <__ssvfiscanf_r+0x244>
 802d2f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d2f4:	4621      	mov	r1, r4
 802d2f6:	f7ff fdf8 	bl	802ceea <__ssrefill_r>
 802d2fa:	2800      	cmp	r0, #0
 802d2fc:	f43f af6e 	beq.w	802d1dc <__ssvfiscanf_r+0x244>
 802d300:	e701      	b.n	802d106 <__ssvfiscanf_r+0x16e>
 802d302:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802d306:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802d30a:	6028      	str	r0, [r5, #0]
 802d30c:	4599      	cmp	r9, r3
 802d30e:	d314      	bcc.n	802d33a <__ssvfiscanf_r+0x3a2>
 802d310:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802d314:	4293      	cmp	r3, r2
 802d316:	f200 8553 	bhi.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802d31a:	3308      	adds	r3, #8
 802d31c:	fa1f fa83 	uxth.w	sl, r3
 802d320:	f8db 0000 	ldr.w	r0, [fp]
 802d324:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802d328:	f003 fdaa 	bl	8030e80 <realloc>
 802d32c:	2800      	cmp	r0, #0
 802d32e:	f000 8547 	beq.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802d332:	f8cb 0000 	str.w	r0, [fp]
 802d336:	f8ab a004 	strh.w	sl, [fp, #4]
 802d33a:	f8db 3000 	ldr.w	r3, [fp]
 802d33e:	f109 0201 	add.w	r2, r9, #1
 802d342:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802d346:	46aa      	mov	sl, r5
 802d348:	f8ab 2006 	strh.w	r2, [fp, #6]
 802d34c:	4635      	mov	r5, r6
 802d34e:	f04f 0920 	mov.w	r9, #32
 802d352:	2200      	movs	r2, #0
 802d354:	62ba      	str	r2, [r7, #40]	@ 0x28
 802d356:	f7fd fd4b 	bl	802adf0 <__locale_mb_cur_max>
 802d35a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802d35c:	4290      	cmp	r0, r2
 802d35e:	f43f aed2 	beq.w	802d106 <__ssvfiscanf_r+0x16e>
 802d362:	6821      	ldr	r1, [r4, #0]
 802d364:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 802d368:	f811 0b01 	ldrb.w	r0, [r1], #1
 802d36c:	f80c 0002 	strb.w	r0, [ip, r2]
 802d370:	1c53      	adds	r3, r2, #1
 802d372:	6862      	ldr	r2, [r4, #4]
 802d374:	3a01      	subs	r2, #1
 802d376:	e9c4 1200 	strd	r1, r2, [r4]
 802d37a:	69ba      	ldr	r2, [r7, #24]
 802d37c:	2a03      	cmp	r2, #3
 802d37e:	d102      	bne.n	802d386 <__ssvfiscanf_r+0x3ee>
 802d380:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802d382:	2a04      	cmp	r2, #4
 802d384:	d007      	beq.n	802d396 <__ssvfiscanf_r+0x3fe>
 802d386:	2208      	movs	r2, #8
 802d388:	2100      	movs	r1, #0
 802d38a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802d38e:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d390:	f7fc fba6 	bl	8029ae0 <memset>
 802d394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d396:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 802d39a:	9200      	str	r2, [sp, #0]
 802d39c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d39e:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d3a0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802d3a4:	4629      	mov	r1, r5
 802d3a6:	f005 f925 	bl	80325f4 <_mbrtowc_r>
 802d3aa:	4603      	mov	r3, r0
 802d3ac:	61b8      	str	r0, [r7, #24]
 802d3ae:	1c58      	adds	r0, r3, #1
 802d3b0:	f43f aea9 	beq.w	802d106 <__ssvfiscanf_r+0x16e>
 802d3b4:	461a      	mov	r2, r3
 802d3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d3b8:	b9b2      	cbnz	r2, 802d3e8 <__ssvfiscanf_r+0x450>
 802d3ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d3bc:	441a      	add	r2, r3
 802d3be:	4613      	mov	r3, r2
 802d3c0:	693a      	ldr	r2, [r7, #16]
 802d3c2:	b172      	cbz	r2, 802d3e2 <__ssvfiscanf_r+0x44a>
 802d3c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d3c6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802d3ca:	e019      	b.n	802d400 <__ssvfiscanf_r+0x468>
 802d3cc:	f04f 0900 	mov.w	r9, #0
 802d3d0:	464e      	mov	r6, r9
 802d3d2:	46ca      	mov	sl, r9
 802d3d4:	464d      	mov	r5, r9
 802d3d6:	e7bc      	b.n	802d352 <__ssvfiscanf_r+0x3ba>
 802d3d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802d3dc:	464e      	mov	r6, r9
 802d3de:	46ca      	mov	sl, r9
 802d3e0:	e7b7      	b.n	802d352 <__ssvfiscanf_r+0x3ba>
 802d3e2:	693a      	ldr	r2, [r7, #16]
 802d3e4:	602a      	str	r2, [r5, #0]
 802d3e6:	e7ed      	b.n	802d3c4 <__ssvfiscanf_r+0x42c>
 802d3e8:	69ba      	ldr	r2, [r7, #24]
 802d3ea:	3202      	adds	r2, #2
 802d3ec:	d024      	beq.n	802d438 <__ssvfiscanf_r+0x4a0>
 802d3ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d3f0:	441a      	add	r2, r3
 802d3f2:	69bb      	ldr	r3, [r7, #24]
 802d3f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802d3f6:	2b03      	cmp	r3, #3
 802d3f8:	d1e5      	bne.n	802d3c6 <__ssvfiscanf_r+0x42e>
 802d3fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802d3fc:	2b04      	cmp	r3, #4
 802d3fe:	d1e2      	bne.n	802d3c6 <__ssvfiscanf_r+0x42e>
 802d400:	693b      	ldr	r3, [r7, #16]
 802d402:	b9bb      	cbnz	r3, 802d434 <__ssvfiscanf_r+0x49c>
 802d404:	f1ba 0f00 	cmp.w	sl, #0
 802d408:	d013      	beq.n	802d432 <__ssvfiscanf_r+0x49a>
 802d40a:	1bab      	subs	r3, r5, r6
 802d40c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802d410:	d80f      	bhi.n	802d432 <__ssvfiscanf_r+0x49a>
 802d412:	4630      	mov	r0, r6
 802d414:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802d418:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d41a:	f003 fd31 	bl	8030e80 <realloc>
 802d41e:	4606      	mov	r6, r0
 802d420:	2800      	cmp	r0, #0
 802d422:	f43f af09 	beq.w	802d238 <__ssvfiscanf_r+0x2a0>
 802d426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d428:	f8ca 0000 	str.w	r0, [sl]
 802d42c:	18c5      	adds	r5, r0, r3
 802d42e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802d432:	3504      	adds	r5, #4
 802d434:	2200      	movs	r2, #0
 802d436:	e000      	b.n	802d43a <__ssvfiscanf_r+0x4a2>
 802d438:	461a      	mov	r2, r3
 802d43a:	6863      	ldr	r3, [r4, #4]
 802d43c:	2b00      	cmp	r3, #0
 802d43e:	dc13      	bgt.n	802d468 <__ssvfiscanf_r+0x4d0>
 802d440:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d442:	62ba      	str	r2, [r7, #40]	@ 0x28
 802d444:	4621      	mov	r1, r4
 802d446:	f7ff fd50 	bl	802ceea <__ssrefill_r>
 802d44a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802d44c:	b160      	cbz	r0, 802d468 <__ssvfiscanf_r+0x4d0>
 802d44e:	2a00      	cmp	r2, #0
 802d450:	f47f ae59 	bne.w	802d106 <__ssvfiscanf_r+0x16e>
 802d454:	f1ba 0f00 	cmp.w	sl, #0
 802d458:	d10b      	bne.n	802d472 <__ssvfiscanf_r+0x4da>
 802d45a:	693b      	ldr	r3, [r7, #16]
 802d45c:	2b00      	cmp	r3, #0
 802d45e:	f47f adbc 	bne.w	802cfda <__ssvfiscanf_r+0x42>
 802d462:	69fb      	ldr	r3, [r7, #28]
 802d464:	3301      	adds	r3, #1
 802d466:	e5b0      	b.n	802cfca <__ssvfiscanf_r+0x32>
 802d468:	f1b8 0f00 	cmp.w	r8, #0
 802d46c:	f47f af72 	bne.w	802d354 <__ssvfiscanf_r+0x3bc>
 802d470:	e7f0      	b.n	802d454 <__ssvfiscanf_r+0x4bc>
 802d472:	1ba9      	subs	r1, r5, r6
 802d474:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 802d478:	d9ef      	bls.n	802d45a <__ssvfiscanf_r+0x4c2>
 802d47a:	f8da 0000 	ldr.w	r0, [sl]
 802d47e:	f003 fcff 	bl	8030e80 <realloc>
 802d482:	2800      	cmp	r0, #0
 802d484:	d0e9      	beq.n	802d45a <__ssvfiscanf_r+0x4c2>
 802d486:	f8ca 0000 	str.w	r0, [sl]
 802d48a:	e7e6      	b.n	802d45a <__ssvfiscanf_r+0x4c2>
 802d48c:	b1db      	cbz	r3, 802d4c6 <__ssvfiscanf_r+0x52e>
 802d48e:	e9d4 2300 	ldrd	r2, r3, [r4]
 802d492:	4598      	cmp	r8, r3
 802d494:	dd10      	ble.n	802d4b8 <__ssvfiscanf_r+0x520>
 802d496:	441a      	add	r2, r3
 802d498:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d49a:	6022      	str	r2, [r4, #0]
 802d49c:	4621      	mov	r1, r4
 802d49e:	441d      	add	r5, r3
 802d4a0:	eba8 0803 	sub.w	r8, r8, r3
 802d4a4:	f7ff fd21 	bl	802ceea <__ssrefill_r>
 802d4a8:	2800      	cmp	r0, #0
 802d4aa:	d0f0      	beq.n	802d48e <__ssvfiscanf_r+0x4f6>
 802d4ac:	2d00      	cmp	r5, #0
 802d4ae:	f43f ae2a 	beq.w	802d106 <__ssvfiscanf_r+0x16e>
 802d4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d4b4:	442b      	add	r3, r5
 802d4b6:	e201      	b.n	802d8bc <__ssvfiscanf_r+0x924>
 802d4b8:	eba3 0308 	sub.w	r3, r3, r8
 802d4bc:	4442      	add	r2, r8
 802d4be:	4445      	add	r5, r8
 802d4c0:	6063      	str	r3, [r4, #4]
 802d4c2:	6022      	str	r2, [r4, #0]
 802d4c4:	e7f5      	b.n	802d4b2 <__ssvfiscanf_r+0x51a>
 802d4c6:	6a3b      	ldr	r3, [r7, #32]
 802d4c8:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802d4cc:	f853 5b04 	ldr.w	r5, [r3], #4
 802d4d0:	623b      	str	r3, [r7, #32]
 802d4d2:	d02d      	beq.n	802d530 <__ssvfiscanf_r+0x598>
 802d4d4:	2d00      	cmp	r5, #0
 802d4d6:	f43f adac 	beq.w	802d032 <__ssvfiscanf_r+0x9a>
 802d4da:	4640      	mov	r0, r8
 802d4dc:	f7fe fd46 	bl	802bf6c <malloc>
 802d4e0:	4681      	mov	r9, r0
 802d4e2:	2800      	cmp	r0, #0
 802d4e4:	f43f ae14 	beq.w	802d110 <__ssvfiscanf_r+0x178>
 802d4e8:	f8bb a006 	ldrh.w	sl, [fp, #6]
 802d4ec:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802d4f0:	6028      	str	r0, [r5, #0]
 802d4f2:	45b2      	cmp	sl, r6
 802d4f4:	d312      	bcc.n	802d51c <__ssvfiscanf_r+0x584>
 802d4f6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802d4fa:	429e      	cmp	r6, r3
 802d4fc:	f200 8460 	bhi.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802d500:	3608      	adds	r6, #8
 802d502:	b2b6      	uxth	r6, r6
 802d504:	f8db 0000 	ldr.w	r0, [fp]
 802d508:	00b1      	lsls	r1, r6, #2
 802d50a:	f003 fcb9 	bl	8030e80 <realloc>
 802d50e:	2800      	cmp	r0, #0
 802d510:	f000 8456 	beq.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802d514:	f8cb 0000 	str.w	r0, [fp]
 802d518:	f8ab 6004 	strh.w	r6, [fp, #4]
 802d51c:	f8db 3000 	ldr.w	r3, [fp]
 802d520:	f10a 0201 	add.w	r2, sl, #1
 802d524:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802d528:	462e      	mov	r6, r5
 802d52a:	f8ab 2006 	strh.w	r2, [fp, #6]
 802d52e:	464d      	mov	r5, r9
 802d530:	9400      	str	r4, [sp, #0]
 802d532:	4629      	mov	r1, r5
 802d534:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d536:	4643      	mov	r3, r8
 802d538:	2201      	movs	r2, #1
 802d53a:	f7ff fcf3 	bl	802cf24 <_sfread_r>
 802d53e:	4605      	mov	r5, r0
 802d540:	2800      	cmp	r0, #0
 802d542:	f43f ade0 	beq.w	802d106 <__ssvfiscanf_r+0x16e>
 802d546:	b13e      	cbz	r6, 802d558 <__ssvfiscanf_r+0x5c0>
 802d548:	4580      	cmp	r8, r0
 802d54a:	d905      	bls.n	802d558 <__ssvfiscanf_r+0x5c0>
 802d54c:	4601      	mov	r1, r0
 802d54e:	6830      	ldr	r0, [r6, #0]
 802d550:	f003 fc96 	bl	8030e80 <realloc>
 802d554:	b100      	cbz	r0, 802d558 <__ssvfiscanf_r+0x5c0>
 802d556:	6030      	str	r0, [r6, #0]
 802d558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d55a:	442b      	add	r3, r5
 802d55c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d55e:	e780      	b.n	802d462 <__ssvfiscanf_r+0x4ca>
 802d560:	080291e9 	.word	0x080291e9
 802d564:	0803854d 	.word	0x0803854d
 802d568:	2b00      	cmp	r3, #0
 802d56a:	bf08      	it	eq
 802d56c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802d570:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d572:	693b      	ldr	r3, [r7, #16]
 802d574:	2d00      	cmp	r5, #0
 802d576:	f000 8100 	beq.w	802d77a <__ssvfiscanf_r+0x7e2>
 802d57a:	2b00      	cmp	r3, #0
 802d57c:	f040 80a5 	bne.w	802d6ca <__ssvfiscanf_r+0x732>
 802d580:	6a3b      	ldr	r3, [r7, #32]
 802d582:	0631      	lsls	r1, r6, #24
 802d584:	f853 5b04 	ldr.w	r5, [r3], #4
 802d588:	623b      	str	r3, [r7, #32]
 802d58a:	f140 80a5 	bpl.w	802d6d8 <__ssvfiscanf_r+0x740>
 802d58e:	2d00      	cmp	r5, #0
 802d590:	f43f ae55 	beq.w	802d23e <__ssvfiscanf_r+0x2a6>
 802d594:	2080      	movs	r0, #128	@ 0x80
 802d596:	f7fe fce9 	bl	802bf6c <malloc>
 802d59a:	4680      	mov	r8, r0
 802d59c:	2800      	cmp	r0, #0
 802d59e:	f43f ae4b 	beq.w	802d238 <__ssvfiscanf_r+0x2a0>
 802d5a2:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 802d5a6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802d5aa:	6028      	str	r0, [r5, #0]
 802d5ac:	429e      	cmp	r6, r3
 802d5ae:	d314      	bcc.n	802d5da <__ssvfiscanf_r+0x642>
 802d5b0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802d5b4:	4293      	cmp	r3, r2
 802d5b6:	f200 8403 	bhi.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802d5ba:	3308      	adds	r3, #8
 802d5bc:	fa1f f983 	uxth.w	r9, r3
 802d5c0:	f8db 0000 	ldr.w	r0, [fp]
 802d5c4:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802d5c8:	f003 fc5a 	bl	8030e80 <realloc>
 802d5cc:	2800      	cmp	r0, #0
 802d5ce:	f000 83f7 	beq.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802d5d2:	f8cb 0000 	str.w	r0, [fp]
 802d5d6:	f8ab 9004 	strh.w	r9, [fp, #4]
 802d5da:	f8db 3000 	ldr.w	r3, [fp]
 802d5de:	1c72      	adds	r2, r6, #1
 802d5e0:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 802d5e4:	46aa      	mov	sl, r5
 802d5e6:	f8ab 2006 	strh.w	r2, [fp, #6]
 802d5ea:	4645      	mov	r5, r8
 802d5ec:	f04f 0920 	mov.w	r9, #32
 802d5f0:	2600      	movs	r6, #0
 802d5f2:	f7fd fbfd 	bl	802adf0 <__locale_mb_cur_max>
 802d5f6:	4286      	cmp	r6, r0
 802d5f8:	f43f ad85 	beq.w	802d106 <__ssvfiscanf_r+0x16e>
 802d5fc:	1c73      	adds	r3, r6, #1
 802d5fe:	607b      	str	r3, [r7, #4]
 802d600:	6823      	ldr	r3, [r4, #0]
 802d602:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802d606:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d60a:	558a      	strb	r2, [r1, r6]
 802d60c:	6862      	ldr	r2, [r4, #4]
 802d60e:	3a01      	subs	r2, #1
 802d610:	e9c4 3200 	strd	r3, r2, [r4]
 802d614:	69bb      	ldr	r3, [r7, #24]
 802d616:	2b03      	cmp	r3, #3
 802d618:	d102      	bne.n	802d620 <__ssvfiscanf_r+0x688>
 802d61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802d61c:	2b04      	cmp	r3, #4
 802d61e:	d005      	beq.n	802d62c <__ssvfiscanf_r+0x694>
 802d620:	2208      	movs	r2, #8
 802d622:	2100      	movs	r1, #0
 802d624:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 802d628:	f7fc fa5a 	bl	8029ae0 <memset>
 802d62c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 802d630:	9300      	str	r3, [sp, #0]
 802d632:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802d636:	687b      	ldr	r3, [r7, #4]
 802d638:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d63a:	4629      	mov	r1, r5
 802d63c:	f004 ffda 	bl	80325f4 <_mbrtowc_r>
 802d640:	1c42      	adds	r2, r0, #1
 802d642:	61b8      	str	r0, [r7, #24]
 802d644:	f43f ad5f 	beq.w	802d106 <__ssvfiscanf_r+0x16e>
 802d648:	2800      	cmp	r0, #0
 802d64a:	d14a      	bne.n	802d6e2 <__ssvfiscanf_r+0x74a>
 802d64c:	6028      	str	r0, [r5, #0]
 802d64e:	682e      	ldr	r6, [r5, #0]
 802d650:	1c73      	adds	r3, r6, #1
 802d652:	d056      	beq.n	802d702 <__ssvfiscanf_r+0x76a>
 802d654:	2208      	movs	r2, #8
 802d656:	2100      	movs	r1, #0
 802d658:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802d65c:	f7fc fa40 	bl	8029ae0 <memset>
 802d660:	4b99      	ldr	r3, [pc, #612]	@ (802d8c8 <__ssvfiscanf_r+0x930>)
 802d662:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802d668:	603b      	str	r3, [r7, #0]
 802d66a:	4632      	mov	r2, r6
 802d66c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802d670:	683e      	ldr	r6, [r7, #0]
 802d672:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802d676:	47b0      	blx	r6
 802d678:	2801      	cmp	r0, #1
 802d67a:	d144      	bne.n	802d706 <__ssvfiscanf_r+0x76e>
 802d67c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 802d680:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802d684:	5c9b      	ldrb	r3, [r3, r2]
 802d686:	2b00      	cmp	r3, #0
 802d688:	d148      	bne.n	802d71c <__ssvfiscanf_r+0x784>
 802d68a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 802d68e:	687b      	ldr	r3, [r7, #4]
 802d690:	2b00      	cmp	r3, #0
 802d692:	d13a      	bne.n	802d70a <__ssvfiscanf_r+0x772>
 802d694:	693b      	ldr	r3, [r7, #16]
 802d696:	2b00      	cmp	r3, #0
 802d698:	f47f ac9f 	bne.w	802cfda <__ssvfiscanf_r+0x42>
 802d69c:	602b      	str	r3, [r5, #0]
 802d69e:	f1ba 0f00 	cmp.w	sl, #0
 802d6a2:	f43f aede 	beq.w	802d462 <__ssvfiscanf_r+0x4ca>
 802d6a6:	eba5 0108 	sub.w	r1, r5, r8
 802d6aa:	108b      	asrs	r3, r1, #2
 802d6ac:	3301      	adds	r3, #1
 802d6ae:	4599      	cmp	r9, r3
 802d6b0:	f67f aed7 	bls.w	802d462 <__ssvfiscanf_r+0x4ca>
 802d6b4:	f8da 0000 	ldr.w	r0, [sl]
 802d6b8:	3104      	adds	r1, #4
 802d6ba:	f003 fbe1 	bl	8030e80 <realloc>
 802d6be:	2800      	cmp	r0, #0
 802d6c0:	f43f aecf 	beq.w	802d462 <__ssvfiscanf_r+0x4ca>
 802d6c4:	f8ca 0000 	str.w	r0, [sl]
 802d6c8:	e6cb      	b.n	802d462 <__ssvfiscanf_r+0x4ca>
 802d6ca:	f04f 0900 	mov.w	r9, #0
 802d6ce:	46c8      	mov	r8, r9
 802d6d0:	46ca      	mov	sl, r9
 802d6d2:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 802d6d6:	e78b      	b.n	802d5f0 <__ssvfiscanf_r+0x658>
 802d6d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802d6dc:	46c8      	mov	r8, r9
 802d6de:	46ca      	mov	sl, r9
 802d6e0:	e786      	b.n	802d5f0 <__ssvfiscanf_r+0x658>
 802d6e2:	69bb      	ldr	r3, [r7, #24]
 802d6e4:	3302      	adds	r3, #2
 802d6e6:	d1b2      	bne.n	802d64e <__ssvfiscanf_r+0x6b6>
 802d6e8:	687e      	ldr	r6, [r7, #4]
 802d6ea:	6863      	ldr	r3, [r4, #4]
 802d6ec:	2b00      	cmp	r3, #0
 802d6ee:	dc3f      	bgt.n	802d770 <__ssvfiscanf_r+0x7d8>
 802d6f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d6f2:	4621      	mov	r1, r4
 802d6f4:	f7ff fbf9 	bl	802ceea <__ssrefill_r>
 802d6f8:	2800      	cmp	r0, #0
 802d6fa:	d039      	beq.n	802d770 <__ssvfiscanf_r+0x7d8>
 802d6fc:	2e00      	cmp	r6, #0
 802d6fe:	d0c9      	beq.n	802d694 <__ssvfiscanf_r+0x6fc>
 802d700:	e501      	b.n	802d106 <__ssvfiscanf_r+0x16e>
 802d702:	4632      	mov	r2, r6
 802d704:	e7bc      	b.n	802d680 <__ssvfiscanf_r+0x6e8>
 802d706:	2200      	movs	r2, #0
 802d708:	e7ba      	b.n	802d680 <__ssvfiscanf_r+0x6e8>
 802d70a:	687b      	ldr	r3, [r7, #4]
 802d70c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d70e:	3b01      	subs	r3, #1
 802d710:	4622      	mov	r2, r4
 802d712:	5cf1      	ldrb	r1, [r6, r3]
 802d714:	607b      	str	r3, [r7, #4]
 802d716:	f7ff fbad 	bl	802ce74 <_sungetc_r>
 802d71a:	e7b8      	b.n	802d68e <__ssvfiscanf_r+0x6f6>
 802d71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d71e:	687a      	ldr	r2, [r7, #4]
 802d720:	4413      	add	r3, r2
 802d722:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d724:	69bb      	ldr	r3, [r7, #24]
 802d726:	2b03      	cmp	r3, #3
 802d728:	d102      	bne.n	802d730 <__ssvfiscanf_r+0x798>
 802d72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802d72c:	2b04      	cmp	r3, #4
 802d72e:	d002      	beq.n	802d736 <__ssvfiscanf_r+0x79e>
 802d730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d732:	3b01      	subs	r3, #1
 802d734:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d736:	693b      	ldr	r3, [r7, #16]
 802d738:	b9c3      	cbnz	r3, 802d76c <__ssvfiscanf_r+0x7d4>
 802d73a:	3504      	adds	r5, #4
 802d73c:	f1ba 0f00 	cmp.w	sl, #0
 802d740:	d014      	beq.n	802d76c <__ssvfiscanf_r+0x7d4>
 802d742:	eba5 0608 	sub.w	r6, r5, r8
 802d746:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 802d74a:	d80d      	bhi.n	802d768 <__ssvfiscanf_r+0x7d0>
 802d74c:	4640      	mov	r0, r8
 802d74e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802d752:	f003 fb95 	bl	8030e80 <realloc>
 802d756:	4680      	mov	r8, r0
 802d758:	2800      	cmp	r0, #0
 802d75a:	f43f ad6d 	beq.w	802d238 <__ssvfiscanf_r+0x2a0>
 802d75e:	1985      	adds	r5, r0, r6
 802d760:	f8ca 0000 	str.w	r0, [sl]
 802d764:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802d768:	693e      	ldr	r6, [r7, #16]
 802d76a:	e7be      	b.n	802d6ea <__ssvfiscanf_r+0x752>
 802d76c:	2600      	movs	r6, #0
 802d76e:	e7bc      	b.n	802d6ea <__ssvfiscanf_r+0x752>
 802d770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d772:	2b00      	cmp	r3, #0
 802d774:	f47f af3d 	bne.w	802d5f2 <__ssvfiscanf_r+0x65a>
 802d778:	e78c      	b.n	802d694 <__ssvfiscanf_r+0x6fc>
 802d77a:	b1e3      	cbz	r3, 802d7b6 <__ssvfiscanf_r+0x81e>
 802d77c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 802d780:	6823      	ldr	r3, [r4, #0]
 802d782:	781a      	ldrb	r2, [r3, #0]
 802d784:	5cb2      	ldrb	r2, [r6, r2]
 802d786:	b91a      	cbnz	r2, 802d790 <__ssvfiscanf_r+0x7f8>
 802d788:	2d00      	cmp	r5, #0
 802d78a:	f47f ae92 	bne.w	802d4b2 <__ssvfiscanf_r+0x51a>
 802d78e:	e450      	b.n	802d032 <__ssvfiscanf_r+0x9a>
 802d790:	3301      	adds	r3, #1
 802d792:	6862      	ldr	r2, [r4, #4]
 802d794:	6023      	str	r3, [r4, #0]
 802d796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d798:	3501      	adds	r5, #1
 802d79a:	3a01      	subs	r2, #1
 802d79c:	42ab      	cmp	r3, r5
 802d79e:	6062      	str	r2, [r4, #4]
 802d7a0:	f43f ae87 	beq.w	802d4b2 <__ssvfiscanf_r+0x51a>
 802d7a4:	2a00      	cmp	r2, #0
 802d7a6:	dceb      	bgt.n	802d780 <__ssvfiscanf_r+0x7e8>
 802d7a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d7aa:	4621      	mov	r1, r4
 802d7ac:	f7ff fb9d 	bl	802ceea <__ssrefill_r>
 802d7b0:	2800      	cmp	r0, #0
 802d7b2:	d0e5      	beq.n	802d780 <__ssvfiscanf_r+0x7e8>
 802d7b4:	e67d      	b.n	802d4b2 <__ssvfiscanf_r+0x51a>
 802d7b6:	6a3b      	ldr	r3, [r7, #32]
 802d7b8:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 802d7bc:	f853 5b04 	ldr.w	r5, [r3], #4
 802d7c0:	623b      	str	r3, [r7, #32]
 802d7c2:	d07e      	beq.n	802d8c2 <__ssvfiscanf_r+0x92a>
 802d7c4:	2d00      	cmp	r5, #0
 802d7c6:	f43f ac34 	beq.w	802d032 <__ssvfiscanf_r+0x9a>
 802d7ca:	2020      	movs	r0, #32
 802d7cc:	f7fe fbce 	bl	802bf6c <malloc>
 802d7d0:	4680      	mov	r8, r0
 802d7d2:	2800      	cmp	r0, #0
 802d7d4:	f43f ac9c 	beq.w	802d110 <__ssvfiscanf_r+0x178>
 802d7d8:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802d7dc:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802d7e0:	6028      	str	r0, [r5, #0]
 802d7e2:	45b1      	cmp	r9, r6
 802d7e4:	d312      	bcc.n	802d80c <__ssvfiscanf_r+0x874>
 802d7e6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802d7ea:	429e      	cmp	r6, r3
 802d7ec:	f200 82e8 	bhi.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802d7f0:	3608      	adds	r6, #8
 802d7f2:	b2b6      	uxth	r6, r6
 802d7f4:	f8db 0000 	ldr.w	r0, [fp]
 802d7f8:	00b1      	lsls	r1, r6, #2
 802d7fa:	f003 fb41 	bl	8030e80 <realloc>
 802d7fe:	2800      	cmp	r0, #0
 802d800:	f000 82de 	beq.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802d804:	f8cb 0000 	str.w	r0, [fp]
 802d808:	f8ab 6004 	strh.w	r6, [fp, #4]
 802d80c:	f8db 3000 	ldr.w	r3, [fp]
 802d810:	f109 0201 	add.w	r2, r9, #1
 802d814:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802d818:	46aa      	mov	sl, r5
 802d81a:	f8ab 2006 	strh.w	r2, [fp, #6]
 802d81e:	4645      	mov	r5, r8
 802d820:	f04f 0920 	mov.w	r9, #32
 802d824:	462e      	mov	r6, r5
 802d826:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 802d82a:	6823      	ldr	r3, [r4, #0]
 802d82c:	781a      	ldrb	r2, [r3, #0]
 802d82e:	f818 2002 	ldrb.w	r2, [r8, r2]
 802d832:	b362      	cbz	r2, 802d88e <__ssvfiscanf_r+0x8f6>
 802d834:	6862      	ldr	r2, [r4, #4]
 802d836:	3a01      	subs	r2, #1
 802d838:	6062      	str	r2, [r4, #4]
 802d83a:	1c5a      	adds	r2, r3, #1
 802d83c:	6022      	str	r2, [r4, #0]
 802d83e:	781b      	ldrb	r3, [r3, #0]
 802d840:	f805 3b01 	strb.w	r3, [r5], #1
 802d844:	f1ba 0f00 	cmp.w	sl, #0
 802d848:	d011      	beq.n	802d86e <__ssvfiscanf_r+0x8d6>
 802d84a:	1bab      	subs	r3, r5, r6
 802d84c:	454b      	cmp	r3, r9
 802d84e:	d30e      	bcc.n	802d86e <__ssvfiscanf_r+0x8d6>
 802d850:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802d854:	4630      	mov	r0, r6
 802d856:	4649      	mov	r1, r9
 802d858:	613b      	str	r3, [r7, #16]
 802d85a:	f003 fb11 	bl	8030e80 <realloc>
 802d85e:	4606      	mov	r6, r0
 802d860:	2800      	cmp	r0, #0
 802d862:	f43f ac55 	beq.w	802d110 <__ssvfiscanf_r+0x178>
 802d866:	693b      	ldr	r3, [r7, #16]
 802d868:	f8ca 0000 	str.w	r0, [sl]
 802d86c:	18c5      	adds	r5, r0, r3
 802d86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d870:	3b01      	subs	r3, #1
 802d872:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d874:	d00b      	beq.n	802d88e <__ssvfiscanf_r+0x8f6>
 802d876:	6863      	ldr	r3, [r4, #4]
 802d878:	2b00      	cmp	r3, #0
 802d87a:	dcd6      	bgt.n	802d82a <__ssvfiscanf_r+0x892>
 802d87c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d87e:	4621      	mov	r1, r4
 802d880:	f7ff fb33 	bl	802ceea <__ssrefill_r>
 802d884:	2800      	cmp	r0, #0
 802d886:	d0d0      	beq.n	802d82a <__ssvfiscanf_r+0x892>
 802d888:	42b5      	cmp	r5, r6
 802d88a:	f43f ac3c 	beq.w	802d106 <__ssvfiscanf_r+0x16e>
 802d88e:	1bae      	subs	r6, r5, r6
 802d890:	f43f abcf 	beq.w	802d032 <__ssvfiscanf_r+0x9a>
 802d894:	2300      	movs	r3, #0
 802d896:	702b      	strb	r3, [r5, #0]
 802d898:	f1ba 0f00 	cmp.w	sl, #0
 802d89c:	d009      	beq.n	802d8b2 <__ssvfiscanf_r+0x91a>
 802d89e:	1c71      	adds	r1, r6, #1
 802d8a0:	4589      	cmp	r9, r1
 802d8a2:	d906      	bls.n	802d8b2 <__ssvfiscanf_r+0x91a>
 802d8a4:	f8da 0000 	ldr.w	r0, [sl]
 802d8a8:	f003 faea 	bl	8030e80 <realloc>
 802d8ac:	b108      	cbz	r0, 802d8b2 <__ssvfiscanf_r+0x91a>
 802d8ae:	f8ca 0000 	str.w	r0, [sl]
 802d8b2:	69fb      	ldr	r3, [r7, #28]
 802d8b4:	3301      	adds	r3, #1
 802d8b6:	61fb      	str	r3, [r7, #28]
 802d8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d8ba:	4433      	add	r3, r6
 802d8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d8be:	f7ff bb8c 	b.w	802cfda <__ssvfiscanf_r+0x42>
 802d8c2:	46ca      	mov	sl, r9
 802d8c4:	e7ae      	b.n	802d824 <__ssvfiscanf_r+0x88c>
 802d8c6:	bf00      	nop
 802d8c8:	200000e8 	.word	0x200000e8
 802d8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d8ce:	2b00      	cmp	r3, #0
 802d8d0:	bf08      	it	eq
 802d8d2:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802d8d6:	f016 0501 	ands.w	r5, r6, #1
 802d8da:	62bb      	str	r3, [r7, #40]	@ 0x28
 802d8dc:	f006 0810 	and.w	r8, r6, #16
 802d8e0:	f000 80e1 	beq.w	802daa6 <__ssvfiscanf_r+0xb0e>
 802d8e4:	f1b8 0f00 	cmp.w	r8, #0
 802d8e8:	f040 8089 	bne.w	802d9fe <__ssvfiscanf_r+0xa66>
 802d8ec:	6a3b      	ldr	r3, [r7, #32]
 802d8ee:	0636      	lsls	r6, r6, #24
 802d8f0:	f853 5b04 	ldr.w	r5, [r3], #4
 802d8f4:	623b      	str	r3, [r7, #32]
 802d8f6:	f140 8089 	bpl.w	802da0c <__ssvfiscanf_r+0xa74>
 802d8fa:	2d00      	cmp	r5, #0
 802d8fc:	f43f ac9f 	beq.w	802d23e <__ssvfiscanf_r+0x2a6>
 802d900:	2080      	movs	r0, #128	@ 0x80
 802d902:	f7fe fb33 	bl	802bf6c <malloc>
 802d906:	4606      	mov	r6, r0
 802d908:	2800      	cmp	r0, #0
 802d90a:	f43f ac95 	beq.w	802d238 <__ssvfiscanf_r+0x2a0>
 802d90e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802d912:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802d916:	6028      	str	r0, [r5, #0]
 802d918:	4599      	cmp	r9, r3
 802d91a:	d314      	bcc.n	802d946 <__ssvfiscanf_r+0x9ae>
 802d91c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802d920:	4293      	cmp	r3, r2
 802d922:	f200 824d 	bhi.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802d926:	3308      	adds	r3, #8
 802d928:	fa1f fa83 	uxth.w	sl, r3
 802d92c:	f8db 0000 	ldr.w	r0, [fp]
 802d930:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802d934:	f003 faa4 	bl	8030e80 <realloc>
 802d938:	2800      	cmp	r0, #0
 802d93a:	f000 8241 	beq.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802d93e:	f8cb 0000 	str.w	r0, [fp]
 802d942:	f8ab a004 	strh.w	sl, [fp, #4]
 802d946:	f8db 3000 	ldr.w	r3, [fp]
 802d94a:	f109 0201 	add.w	r2, r9, #1
 802d94e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802d952:	46aa      	mov	sl, r5
 802d954:	f8ab 2006 	strh.w	r2, [fp, #6]
 802d958:	4635      	mov	r5, r6
 802d95a:	f04f 0920 	mov.w	r9, #32
 802d95e:	2300      	movs	r3, #0
 802d960:	6822      	ldr	r2, [r4, #0]
 802d962:	499e      	ldr	r1, [pc, #632]	@ (802dbdc <__ssvfiscanf_r+0xc44>)
 802d964:	7812      	ldrb	r2, [r2, #0]
 802d966:	5c8a      	ldrb	r2, [r1, r2]
 802d968:	0711      	lsls	r1, r2, #28
 802d96a:	d43c      	bmi.n	802d9e6 <__ssvfiscanf_r+0xa4e>
 802d96c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802d96e:	2a00      	cmp	r2, #0
 802d970:	d039      	beq.n	802d9e6 <__ssvfiscanf_r+0xa4e>
 802d972:	613b      	str	r3, [r7, #16]
 802d974:	f7fd fa3c 	bl	802adf0 <__locale_mb_cur_max>
 802d978:	693b      	ldr	r3, [r7, #16]
 802d97a:	4298      	cmp	r0, r3
 802d97c:	f43f abc3 	beq.w	802d106 <__ssvfiscanf_r+0x16e>
 802d980:	1c5a      	adds	r2, r3, #1
 802d982:	613a      	str	r2, [r7, #16]
 802d984:	6822      	ldr	r2, [r4, #0]
 802d986:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802d98a:	f812 0b01 	ldrb.w	r0, [r2], #1
 802d98e:	54c8      	strb	r0, [r1, r3]
 802d990:	6863      	ldr	r3, [r4, #4]
 802d992:	3b01      	subs	r3, #1
 802d994:	e9c4 2300 	strd	r2, r3, [r4]
 802d998:	69bb      	ldr	r3, [r7, #24]
 802d99a:	2b03      	cmp	r3, #3
 802d99c:	d102      	bne.n	802d9a4 <__ssvfiscanf_r+0xa0c>
 802d99e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802d9a0:	2b04      	cmp	r3, #4
 802d9a2:	d005      	beq.n	802d9b0 <__ssvfiscanf_r+0xa18>
 802d9a4:	2208      	movs	r2, #8
 802d9a6:	2100      	movs	r1, #0
 802d9a8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802d9ac:	f7fc f898 	bl	8029ae0 <memset>
 802d9b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802d9b4:	9300      	str	r3, [sp, #0]
 802d9b6:	693b      	ldr	r3, [r7, #16]
 802d9b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802d9ba:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802d9be:	4629      	mov	r1, r5
 802d9c0:	f004 fe18 	bl	80325f4 <_mbrtowc_r>
 802d9c4:	4603      	mov	r3, r0
 802d9c6:	61b8      	str	r0, [r7, #24]
 802d9c8:	1c58      	adds	r0, r3, #1
 802d9ca:	f43f ab9c 	beq.w	802d106 <__ssvfiscanf_r+0x16e>
 802d9ce:	bb0b      	cbnz	r3, 802da14 <__ssvfiscanf_r+0xa7c>
 802d9d0:	602b      	str	r3, [r5, #0]
 802d9d2:	6828      	ldr	r0, [r5, #0]
 802d9d4:	f004 fe28 	bl	8032628 <iswspace>
 802d9d8:	4603      	mov	r3, r0
 802d9da:	2800      	cmp	r0, #0
 802d9dc:	d037      	beq.n	802da4e <__ssvfiscanf_r+0xab6>
 802d9de:	693a      	ldr	r2, [r7, #16]
 802d9e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802d9e4:	bb4a      	cbnz	r2, 802da3a <__ssvfiscanf_r+0xaa2>
 802d9e6:	f1b8 0f00 	cmp.w	r8, #0
 802d9ea:	f47f aaf6 	bne.w	802cfda <__ssvfiscanf_r+0x42>
 802d9ee:	f8c5 8000 	str.w	r8, [r5]
 802d9f2:	f1ba 0f00 	cmp.w	sl, #0
 802d9f6:	f43f ad34 	beq.w	802d462 <__ssvfiscanf_r+0x4ca>
 802d9fa:	1ba9      	subs	r1, r5, r6
 802d9fc:	e655      	b.n	802d6aa <__ssvfiscanf_r+0x712>
 802d9fe:	f04f 0900 	mov.w	r9, #0
 802da02:	464e      	mov	r6, r9
 802da04:	46ca      	mov	sl, r9
 802da06:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 802da0a:	e7a8      	b.n	802d95e <__ssvfiscanf_r+0x9c6>
 802da0c:	46c1      	mov	r9, r8
 802da0e:	4646      	mov	r6, r8
 802da10:	46c2      	mov	sl, r8
 802da12:	e7a4      	b.n	802d95e <__ssvfiscanf_r+0x9c6>
 802da14:	69bb      	ldr	r3, [r7, #24]
 802da16:	3302      	adds	r3, #2
 802da18:	d1db      	bne.n	802d9d2 <__ssvfiscanf_r+0xa3a>
 802da1a:	693b      	ldr	r3, [r7, #16]
 802da1c:	6862      	ldr	r2, [r4, #4]
 802da1e:	2a00      	cmp	r2, #0
 802da20:	dc9e      	bgt.n	802d960 <__ssvfiscanf_r+0x9c8>
 802da22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802da24:	613b      	str	r3, [r7, #16]
 802da26:	4621      	mov	r1, r4
 802da28:	f7ff fa5f 	bl	802ceea <__ssrefill_r>
 802da2c:	693b      	ldr	r3, [r7, #16]
 802da2e:	2800      	cmp	r0, #0
 802da30:	d096      	beq.n	802d960 <__ssvfiscanf_r+0x9c8>
 802da32:	2b00      	cmp	r3, #0
 802da34:	f47f ab67 	bne.w	802d106 <__ssvfiscanf_r+0x16e>
 802da38:	e7d5      	b.n	802d9e6 <__ssvfiscanf_r+0xa4e>
 802da3a:	693a      	ldr	r2, [r7, #16]
 802da3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802da3e:	3a01      	subs	r2, #1
 802da40:	613a      	str	r2, [r7, #16]
 802da42:	6939      	ldr	r1, [r7, #16]
 802da44:	4622      	mov	r2, r4
 802da46:	5c59      	ldrb	r1, [r3, r1]
 802da48:	f7ff fa14 	bl	802ce74 <_sungetc_r>
 802da4c:	e7c7      	b.n	802d9de <__ssvfiscanf_r+0xa46>
 802da4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802da50:	6939      	ldr	r1, [r7, #16]
 802da52:	440a      	add	r2, r1
 802da54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802da56:	69ba      	ldr	r2, [r7, #24]
 802da58:	2a03      	cmp	r2, #3
 802da5a:	d102      	bne.n	802da62 <__ssvfiscanf_r+0xaca>
 802da5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802da5e:	2a04      	cmp	r2, #4
 802da60:	d002      	beq.n	802da68 <__ssvfiscanf_r+0xad0>
 802da62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802da64:	3a01      	subs	r2, #1
 802da66:	62ba      	str	r2, [r7, #40]	@ 0x28
 802da68:	f1b8 0f00 	cmp.w	r8, #0
 802da6c:	d1d6      	bne.n	802da1c <__ssvfiscanf_r+0xa84>
 802da6e:	3504      	adds	r5, #4
 802da70:	f1ba 0f00 	cmp.w	sl, #0
 802da74:	d015      	beq.n	802daa2 <__ssvfiscanf_r+0xb0a>
 802da76:	1bab      	subs	r3, r5, r6
 802da78:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802da7c:	d80f      	bhi.n	802da9e <__ssvfiscanf_r+0xb06>
 802da7e:	4630      	mov	r0, r6
 802da80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802da84:	613b      	str	r3, [r7, #16]
 802da86:	f003 f9fb 	bl	8030e80 <realloc>
 802da8a:	4606      	mov	r6, r0
 802da8c:	2800      	cmp	r0, #0
 802da8e:	f43f abd3 	beq.w	802d238 <__ssvfiscanf_r+0x2a0>
 802da92:	693b      	ldr	r3, [r7, #16]
 802da94:	f8ca 0000 	str.w	r0, [sl]
 802da98:	18c5      	adds	r5, r0, r3
 802da9a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802da9e:	4643      	mov	r3, r8
 802daa0:	e7bc      	b.n	802da1c <__ssvfiscanf_r+0xa84>
 802daa2:	4653      	mov	r3, sl
 802daa4:	e7ba      	b.n	802da1c <__ssvfiscanf_r+0xa84>
 802daa6:	f1b8 0f00 	cmp.w	r8, #0
 802daaa:	d019      	beq.n	802dae0 <__ssvfiscanf_r+0xb48>
 802daac:	4e4b      	ldr	r6, [pc, #300]	@ (802dbdc <__ssvfiscanf_r+0xc44>)
 802daae:	6823      	ldr	r3, [r4, #0]
 802dab0:	781a      	ldrb	r2, [r3, #0]
 802dab2:	5cb2      	ldrb	r2, [r6, r2]
 802dab4:	0712      	lsls	r2, r2, #28
 802dab6:	f53f acfc 	bmi.w	802d4b2 <__ssvfiscanf_r+0x51a>
 802daba:	3301      	adds	r3, #1
 802dabc:	6862      	ldr	r2, [r4, #4]
 802dabe:	6023      	str	r3, [r4, #0]
 802dac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802dac2:	3501      	adds	r5, #1
 802dac4:	3a01      	subs	r2, #1
 802dac6:	429d      	cmp	r5, r3
 802dac8:	6062      	str	r2, [r4, #4]
 802daca:	f43f acf2 	beq.w	802d4b2 <__ssvfiscanf_r+0x51a>
 802dace:	2a00      	cmp	r2, #0
 802dad0:	dced      	bgt.n	802daae <__ssvfiscanf_r+0xb16>
 802dad2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802dad4:	4621      	mov	r1, r4
 802dad6:	f7ff fa08 	bl	802ceea <__ssrefill_r>
 802dada:	2800      	cmp	r0, #0
 802dadc:	d0e7      	beq.n	802daae <__ssvfiscanf_r+0xb16>
 802dade:	e4e8      	b.n	802d4b2 <__ssvfiscanf_r+0x51a>
 802dae0:	6a3b      	ldr	r3, [r7, #32]
 802dae2:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802dae6:	f853 5b04 	ldr.w	r5, [r3], #4
 802daea:	623b      	str	r3, [r7, #32]
 802daec:	d074      	beq.n	802dbd8 <__ssvfiscanf_r+0xc40>
 802daee:	2d00      	cmp	r5, #0
 802daf0:	f43f aa9f 	beq.w	802d032 <__ssvfiscanf_r+0x9a>
 802daf4:	2020      	movs	r0, #32
 802daf6:	f7fe fa39 	bl	802bf6c <malloc>
 802dafa:	4680      	mov	r8, r0
 802dafc:	2800      	cmp	r0, #0
 802dafe:	f43f ab07 	beq.w	802d110 <__ssvfiscanf_r+0x178>
 802db02:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802db06:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802db0a:	6028      	str	r0, [r5, #0]
 802db0c:	45b1      	cmp	r9, r6
 802db0e:	d312      	bcc.n	802db36 <__ssvfiscanf_r+0xb9e>
 802db10:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802db14:	429e      	cmp	r6, r3
 802db16:	f200 8153 	bhi.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802db1a:	3608      	adds	r6, #8
 802db1c:	b2b6      	uxth	r6, r6
 802db1e:	f8db 0000 	ldr.w	r0, [fp]
 802db22:	00b1      	lsls	r1, r6, #2
 802db24:	f003 f9ac 	bl	8030e80 <realloc>
 802db28:	2800      	cmp	r0, #0
 802db2a:	f000 8149 	beq.w	802ddc0 <__ssvfiscanf_r+0xe28>
 802db2e:	f8cb 0000 	str.w	r0, [fp]
 802db32:	f8ab 6004 	strh.w	r6, [fp, #4]
 802db36:	f8db 3000 	ldr.w	r3, [fp]
 802db3a:	f109 0201 	add.w	r2, r9, #1
 802db3e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802db42:	46aa      	mov	sl, r5
 802db44:	f8ab 2006 	strh.w	r2, [fp, #6]
 802db48:	4645      	mov	r5, r8
 802db4a:	2620      	movs	r6, #32
 802db4c:	46a9      	mov	r9, r5
 802db4e:	6823      	ldr	r3, [r4, #0]
 802db50:	4922      	ldr	r1, [pc, #136]	@ (802dbdc <__ssvfiscanf_r+0xc44>)
 802db52:	781a      	ldrb	r2, [r3, #0]
 802db54:	5c8a      	ldrb	r2, [r1, r2]
 802db56:	0710      	lsls	r0, r2, #28
 802db58:	d428      	bmi.n	802dbac <__ssvfiscanf_r+0xc14>
 802db5a:	6862      	ldr	r2, [r4, #4]
 802db5c:	3a01      	subs	r2, #1
 802db5e:	6062      	str	r2, [r4, #4]
 802db60:	1c5a      	adds	r2, r3, #1
 802db62:	6022      	str	r2, [r4, #0]
 802db64:	781b      	ldrb	r3, [r3, #0]
 802db66:	f805 3b01 	strb.w	r3, [r5], #1
 802db6a:	f1ba 0f00 	cmp.w	sl, #0
 802db6e:	d010      	beq.n	802db92 <__ssvfiscanf_r+0xbfa>
 802db70:	eba5 0809 	sub.w	r8, r5, r9
 802db74:	45b0      	cmp	r8, r6
 802db76:	d30c      	bcc.n	802db92 <__ssvfiscanf_r+0xbfa>
 802db78:	0076      	lsls	r6, r6, #1
 802db7a:	4648      	mov	r0, r9
 802db7c:	4631      	mov	r1, r6
 802db7e:	f003 f97f 	bl	8030e80 <realloc>
 802db82:	4681      	mov	r9, r0
 802db84:	2800      	cmp	r0, #0
 802db86:	f43f aac3 	beq.w	802d110 <__ssvfiscanf_r+0x178>
 802db8a:	eb00 0508 	add.w	r5, r0, r8
 802db8e:	f8ca 0000 	str.w	r0, [sl]
 802db92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802db94:	3b01      	subs	r3, #1
 802db96:	62bb      	str	r3, [r7, #40]	@ 0x28
 802db98:	d008      	beq.n	802dbac <__ssvfiscanf_r+0xc14>
 802db9a:	6863      	ldr	r3, [r4, #4]
 802db9c:	2b00      	cmp	r3, #0
 802db9e:	dcd6      	bgt.n	802db4e <__ssvfiscanf_r+0xbb6>
 802dba0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802dba2:	4621      	mov	r1, r4
 802dba4:	f7ff f9a1 	bl	802ceea <__ssrefill_r>
 802dba8:	2800      	cmp	r0, #0
 802dbaa:	d0d0      	beq.n	802db4e <__ssvfiscanf_r+0xbb6>
 802dbac:	2300      	movs	r3, #0
 802dbae:	702b      	strb	r3, [r5, #0]
 802dbb0:	eba5 0509 	sub.w	r5, r5, r9
 802dbb4:	f1ba 0f00 	cmp.w	sl, #0
 802dbb8:	f43f acce 	beq.w	802d558 <__ssvfiscanf_r+0x5c0>
 802dbbc:	1c69      	adds	r1, r5, #1
 802dbbe:	428e      	cmp	r6, r1
 802dbc0:	f67f acca 	bls.w	802d558 <__ssvfiscanf_r+0x5c0>
 802dbc4:	f8da 0000 	ldr.w	r0, [sl]
 802dbc8:	f003 f95a 	bl	8030e80 <realloc>
 802dbcc:	2800      	cmp	r0, #0
 802dbce:	f43f acc3 	beq.w	802d558 <__ssvfiscanf_r+0x5c0>
 802dbd2:	f8ca 0000 	str.w	r0, [sl]
 802dbd6:	e4bf      	b.n	802d558 <__ssvfiscanf_r+0x5c0>
 802dbd8:	46b2      	mov	sl, r6
 802dbda:	e7b7      	b.n	802db4c <__ssvfiscanf_r+0xbb4>
 802dbdc:	0803854d 	.word	0x0803854d
 802dbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802dbe2:	3b01      	subs	r3, #1
 802dbe4:	2b26      	cmp	r3, #38	@ 0x26
 802dbe6:	bf81      	itttt	hi
 802dbe8:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 802dbea:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 802dbee:	2327      	movhi	r3, #39	@ 0x27
 802dbf0:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 802dbf2:	bf98      	it	ls
 802dbf4:	f04f 0800 	movls.w	r8, #0
 802dbf8:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 802dbfc:	f04f 0900 	mov.w	r9, #0
 802dc00:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 802dc04:	6822      	ldr	r2, [r4, #0]
 802dc06:	7813      	ldrb	r3, [r2, #0]
 802dc08:	2b39      	cmp	r3, #57	@ 0x39
 802dc0a:	d80f      	bhi.n	802dc2c <__ssvfiscanf_r+0xc94>
 802dc0c:	2b2a      	cmp	r3, #42	@ 0x2a
 802dc0e:	d91a      	bls.n	802dc46 <__ssvfiscanf_r+0xcae>
 802dc10:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802dc14:	290e      	cmp	r1, #14
 802dc16:	d816      	bhi.n	802dc46 <__ssvfiscanf_r+0xcae>
 802dc18:	e8df f001 	tbb	[pc, r1]
 802dc1c:	15771577 	.word	0x15771577
 802dc20:	67673e15 	.word	0x67673e15
 802dc24:	67676767 	.word	0x67676767
 802dc28:	6f67      	.short	0x6f67
 802dc2a:	6f          	.byte	0x6f
 802dc2b:	00          	.byte	0x00
 802dc2c:	2b66      	cmp	r3, #102	@ 0x66
 802dc2e:	d831      	bhi.n	802dc94 <__ssvfiscanf_r+0xcfc>
 802dc30:	2b60      	cmp	r3, #96	@ 0x60
 802dc32:	d803      	bhi.n	802dc3c <__ssvfiscanf_r+0xca4>
 802dc34:	2b46      	cmp	r3, #70	@ 0x46
 802dc36:	d804      	bhi.n	802dc42 <__ssvfiscanf_r+0xcaa>
 802dc38:	2b40      	cmp	r3, #64	@ 0x40
 802dc3a:	d904      	bls.n	802dc46 <__ssvfiscanf_r+0xcae>
 802dc3c:	6979      	ldr	r1, [r7, #20]
 802dc3e:	290a      	cmp	r1, #10
 802dc40:	e061      	b.n	802dd06 <__ssvfiscanf_r+0xd6e>
 802dc42:	2b58      	cmp	r3, #88	@ 0x58
 802dc44:	d066      	beq.n	802dd14 <__ssvfiscanf_r+0xd7c>
 802dc46:	05f1      	lsls	r1, r6, #23
 802dc48:	d511      	bpl.n	802dc6e <__ssvfiscanf_r+0xcd6>
 802dc4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802dc4e:	459a      	cmp	sl, r3
 802dc50:	d908      	bls.n	802dc64 <__ssvfiscanf_r+0xccc>
 802dc52:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 802dc56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802dc58:	4622      	mov	r2, r4
 802dc5a:	f7ff f90b 	bl	802ce74 <_sungetc_r>
 802dc5e:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 802dc62:	46c2      	mov	sl, r8
 802dc64:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802dc68:	459a      	cmp	sl, r3
 802dc6a:	f43f a9e2 	beq.w	802d032 <__ssvfiscanf_r+0x9a>
 802dc6e:	f016 0210 	ands.w	r2, r6, #16
 802dc72:	d16b      	bne.n	802dd4c <__ssvfiscanf_r+0xdb4>
 802dc74:	697b      	ldr	r3, [r7, #20]
 802dc76:	f88a 2000 	strb.w	r2, [sl]
 802dc7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802dc7c:	68fd      	ldr	r5, [r7, #12]
 802dc7e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802dc82:	47a8      	blx	r5
 802dc84:	6a3b      	ldr	r3, [r7, #32]
 802dc86:	06b2      	lsls	r2, r6, #26
 802dc88:	f103 0804 	add.w	r8, r3, #4
 802dc8c:	d555      	bpl.n	802dd3a <__ssvfiscanf_r+0xda2>
 802dc8e:	681b      	ldr	r3, [r3, #0]
 802dc90:	6018      	str	r0, [r3, #0]
 802dc92:	e057      	b.n	802dd44 <__ssvfiscanf_r+0xdac>
 802dc94:	2b78      	cmp	r3, #120	@ 0x78
 802dc96:	e7d5      	b.n	802dc44 <__ssvfiscanf_r+0xcac>
 802dc98:	0531      	lsls	r1, r6, #20
 802dc9a:	d509      	bpl.n	802dcb0 <__ssvfiscanf_r+0xd18>
 802dc9c:	6979      	ldr	r1, [r7, #20]
 802dc9e:	b919      	cbnz	r1, 802dca8 <__ssvfiscanf_r+0xd10>
 802dca0:	2108      	movs	r1, #8
 802dca2:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802dca6:	6179      	str	r1, [r7, #20]
 802dca8:	0575      	lsls	r5, r6, #21
 802dcaa:	d506      	bpl.n	802dcba <__ssvfiscanf_r+0xd22>
 802dcac:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 802dcb0:	4655      	mov	r5, sl
 802dcb2:	f805 3b01 	strb.w	r3, [r5], #1
 802dcb6:	46aa      	mov	sl, r5
 802dcb8:	e00b      	b.n	802dcd2 <__ssvfiscanf_r+0xd3a>
 802dcba:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 802dcbe:	f1b8 0f00 	cmp.w	r8, #0
 802dcc2:	d004      	beq.n	802dcce <__ssvfiscanf_r+0xd36>
 802dcc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802dcc6:	3301      	adds	r3, #1
 802dcc8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802dccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 802dcce:	f109 0901 	add.w	r9, r9, #1
 802dcd2:	6863      	ldr	r3, [r4, #4]
 802dcd4:	3b01      	subs	r3, #1
 802dcd6:	2b00      	cmp	r3, #0
 802dcd8:	6063      	str	r3, [r4, #4]
 802dcda:	dd27      	ble.n	802dd2c <__ssvfiscanf_r+0xd94>
 802dcdc:	3201      	adds	r2, #1
 802dcde:	6022      	str	r2, [r4, #0]
 802dce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802dce2:	3b01      	subs	r3, #1
 802dce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 802dce6:	d18d      	bne.n	802dc04 <__ssvfiscanf_r+0xc6c>
 802dce8:	e7ad      	b.n	802dc46 <__ssvfiscanf_r+0xcae>
 802dcea:	6978      	ldr	r0, [r7, #20]
 802dcec:	4936      	ldr	r1, [pc, #216]	@ (802ddc8 <__ssvfiscanf_r+0xe30>)
 802dcee:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802dcf2:	6179      	str	r1, [r7, #20]
 802dcf4:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 802dcf8:	e7da      	b.n	802dcb0 <__ssvfiscanf_r+0xd18>
 802dcfa:	6978      	ldr	r0, [r7, #20]
 802dcfc:	4932      	ldr	r1, [pc, #200]	@ (802ddc8 <__ssvfiscanf_r+0xe30>)
 802dcfe:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802dd02:	6179      	str	r1, [r7, #20]
 802dd04:	2908      	cmp	r1, #8
 802dd06:	dcf5      	bgt.n	802dcf4 <__ssvfiscanf_r+0xd5c>
 802dd08:	e79d      	b.n	802dc46 <__ssvfiscanf_r+0xcae>
 802dd0a:	0630      	lsls	r0, r6, #24
 802dd0c:	d59b      	bpl.n	802dc46 <__ssvfiscanf_r+0xcae>
 802dd0e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 802dd12:	e7cd      	b.n	802dcb0 <__ssvfiscanf_r+0xd18>
 802dd14:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 802dd18:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802dd1c:	d193      	bne.n	802dc46 <__ssvfiscanf_r+0xcae>
 802dd1e:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 802dd22:	2110      	movs	r1, #16
 802dd24:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 802dd28:	6179      	str	r1, [r7, #20]
 802dd2a:	e7c1      	b.n	802dcb0 <__ssvfiscanf_r+0xd18>
 802dd2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802dd2e:	4621      	mov	r1, r4
 802dd30:	f7ff f8db 	bl	802ceea <__ssrefill_r>
 802dd34:	2800      	cmp	r0, #0
 802dd36:	d0d3      	beq.n	802dce0 <__ssvfiscanf_r+0xd48>
 802dd38:	e785      	b.n	802dc46 <__ssvfiscanf_r+0xcae>
 802dd3a:	0733      	lsls	r3, r6, #28
 802dd3c:	d50d      	bpl.n	802dd5a <__ssvfiscanf_r+0xdc2>
 802dd3e:	6a3b      	ldr	r3, [r7, #32]
 802dd40:	681b      	ldr	r3, [r3, #0]
 802dd42:	7018      	strb	r0, [r3, #0]
 802dd44:	69fb      	ldr	r3, [r7, #28]
 802dd46:	3301      	adds	r3, #1
 802dd48:	e9c7 3807 	strd	r3, r8, [r7, #28]
 802dd4c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802dd50:	ebaa 0503 	sub.w	r5, sl, r3
 802dd54:	444d      	add	r5, r9
 802dd56:	f7ff bbac 	b.w	802d4b2 <__ssvfiscanf_r+0x51a>
 802dd5a:	0775      	lsls	r5, r6, #29
 802dd5c:	d503      	bpl.n	802dd66 <__ssvfiscanf_r+0xdce>
 802dd5e:	6a3b      	ldr	r3, [r7, #32]
 802dd60:	681b      	ldr	r3, [r3, #0]
 802dd62:	8018      	strh	r0, [r3, #0]
 802dd64:	e7ee      	b.n	802dd44 <__ssvfiscanf_r+0xdac>
 802dd66:	f016 0201 	ands.w	r2, r6, #1
 802dd6a:	d001      	beq.n	802dd70 <__ssvfiscanf_r+0xdd8>
 802dd6c:	6a3b      	ldr	r3, [r7, #32]
 802dd6e:	e78e      	b.n	802dc8e <__ssvfiscanf_r+0xcf6>
 802dd70:	07b1      	lsls	r1, r6, #30
 802dd72:	d5fb      	bpl.n	802dd6c <__ssvfiscanf_r+0xdd4>
 802dd74:	4b15      	ldr	r3, [pc, #84]	@ (802ddcc <__ssvfiscanf_r+0xe34>)
 802dd76:	68f9      	ldr	r1, [r7, #12]
 802dd78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802dd7a:	4299      	cmp	r1, r3
 802dd7c:	697b      	ldr	r3, [r7, #20]
 802dd7e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802dd82:	d106      	bne.n	802dd92 <__ssvfiscanf_r+0xdfa>
 802dd84:	f004 fc34 	bl	80325f0 <_strtoull_r>
 802dd88:	6a3b      	ldr	r3, [r7, #32]
 802dd8a:	681b      	ldr	r3, [r3, #0]
 802dd8c:	e9c3 0100 	strd	r0, r1, [r3]
 802dd90:	e7d8      	b.n	802dd44 <__ssvfiscanf_r+0xdac>
 802dd92:	f004 fb81 	bl	8032498 <_strtoll_r>
 802dd96:	e7f7      	b.n	802dd88 <__ssvfiscanf_r+0xdf0>
 802dd98:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802dd9c:	6818      	ldr	r0, [r3, #0]
 802dd9e:	f7fe f8ed 	bl	802bf7c <free>
 802dda2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802dda6:	3401      	adds	r4, #1
 802dda8:	601e      	str	r6, [r3, #0]
 802ddaa:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 802ddae:	f8db 5000 	ldr.w	r5, [fp]
 802ddb2:	42a3      	cmp	r3, r4
 802ddb4:	dcf0      	bgt.n	802dd98 <__ssvfiscanf_r+0xe00>
 802ddb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802ddba:	61fb      	str	r3, [r7, #28]
 802ddbc:	f7ff ba46 	b.w	802d24c <__ssvfiscanf_r+0x2b4>
 802ddc0:	2400      	movs	r4, #0
 802ddc2:	4626      	mov	r6, r4
 802ddc4:	e7f1      	b.n	802ddaa <__ssvfiscanf_r+0xe12>
 802ddc6:	bf00      	nop
 802ddc8:	080386e4 	.word	0x080386e4
 802ddcc:	08031fe9 	.word	0x08031fe9

0802ddd0 <_svfprintf_r>:
 802ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ddd4:	b0d3      	sub	sp, #332	@ 0x14c
 802ddd6:	468b      	mov	fp, r1
 802ddd8:	4691      	mov	r9, r2
 802ddda:	461e      	mov	r6, r3
 802dddc:	9003      	str	r0, [sp, #12]
 802ddde:	f7fd f80d 	bl	802adfc <_localeconv_r>
 802dde2:	6803      	ldr	r3, [r0, #0]
 802dde4:	9316      	str	r3, [sp, #88]	@ 0x58
 802dde6:	4618      	mov	r0, r3
 802dde8:	f7e2 fa5a 	bl	80102a0 <strlen>
 802ddec:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802ddf0:	900d      	str	r0, [sp, #52]	@ 0x34
 802ddf2:	061b      	lsls	r3, r3, #24
 802ddf4:	d515      	bpl.n	802de22 <_svfprintf_r+0x52>
 802ddf6:	f8db 3010 	ldr.w	r3, [fp, #16]
 802ddfa:	b993      	cbnz	r3, 802de22 <_svfprintf_r+0x52>
 802ddfc:	9803      	ldr	r0, [sp, #12]
 802ddfe:	2140      	movs	r1, #64	@ 0x40
 802de00:	f7fe f8c4 	bl	802bf8c <_malloc_r>
 802de04:	f8cb 0000 	str.w	r0, [fp]
 802de08:	f8cb 0010 	str.w	r0, [fp, #16]
 802de0c:	b930      	cbnz	r0, 802de1c <_svfprintf_r+0x4c>
 802de0e:	9a03      	ldr	r2, [sp, #12]
 802de10:	230c      	movs	r3, #12
 802de12:	6013      	str	r3, [r2, #0]
 802de14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802de18:	930f      	str	r3, [sp, #60]	@ 0x3c
 802de1a:	e1f7      	b.n	802e20c <_svfprintf_r+0x43c>
 802de1c:	2340      	movs	r3, #64	@ 0x40
 802de1e:	f8cb 3014 	str.w	r3, [fp, #20]
 802de22:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 802e070 <_svfprintf_r+0x2a0>
 802de26:	2300      	movs	r3, #0
 802de28:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802de2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802de30:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 802de34:	ac29      	add	r4, sp, #164	@ 0xa4
 802de36:	9426      	str	r4, [sp, #152]	@ 0x98
 802de38:	9304      	str	r3, [sp, #16]
 802de3a:	9309      	str	r3, [sp, #36]	@ 0x24
 802de3c:	9312      	str	r3, [sp, #72]	@ 0x48
 802de3e:	9317      	str	r3, [sp, #92]	@ 0x5c
 802de40:	930f      	str	r3, [sp, #60]	@ 0x3c
 802de42:	464b      	mov	r3, r9
 802de44:	461d      	mov	r5, r3
 802de46:	f813 2b01 	ldrb.w	r2, [r3], #1
 802de4a:	b10a      	cbz	r2, 802de50 <_svfprintf_r+0x80>
 802de4c:	2a25      	cmp	r2, #37	@ 0x25
 802de4e:	d1f9      	bne.n	802de44 <_svfprintf_r+0x74>
 802de50:	ebb5 0709 	subs.w	r7, r5, r9
 802de54:	d00d      	beq.n	802de72 <_svfprintf_r+0xa2>
 802de56:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802de58:	443b      	add	r3, r7
 802de5a:	9328      	str	r3, [sp, #160]	@ 0xa0
 802de5c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802de5e:	3301      	adds	r3, #1
 802de60:	2b07      	cmp	r3, #7
 802de62:	e9c4 9700 	strd	r9, r7, [r4]
 802de66:	9327      	str	r3, [sp, #156]	@ 0x9c
 802de68:	dc75      	bgt.n	802df56 <_svfprintf_r+0x186>
 802de6a:	3408      	adds	r4, #8
 802de6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802de6e:	443b      	add	r3, r7
 802de70:	930f      	str	r3, [sp, #60]	@ 0x3c
 802de72:	782b      	ldrb	r3, [r5, #0]
 802de74:	2b00      	cmp	r3, #0
 802de76:	f001 8148 	beq.w	802f10a <_svfprintf_r+0x133a>
 802de7a:	2200      	movs	r2, #0
 802de7c:	1c6b      	adds	r3, r5, #1
 802de7e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802de82:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 802de86:	920e      	str	r2, [sp, #56]	@ 0x38
 802de88:	4615      	mov	r5, r2
 802de8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802de8e:	9206      	str	r2, [sp, #24]
 802de90:	930c      	str	r3, [sp, #48]	@ 0x30
 802de92:	9b06      	ldr	r3, [sp, #24]
 802de94:	3b20      	subs	r3, #32
 802de96:	2b5a      	cmp	r3, #90	@ 0x5a
 802de98:	f200 85a4 	bhi.w	802e9e4 <_svfprintf_r+0xc14>
 802de9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 802dea0:	05a2009d 	.word	0x05a2009d
 802dea4:	00a505a2 	.word	0x00a505a2
 802dea8:	05a205a2 	.word	0x05a205a2
 802deac:	008505a2 	.word	0x008505a2
 802deb0:	05a205a2 	.word	0x05a205a2
 802deb4:	00b200a8 	.word	0x00b200a8
 802deb8:	00af05a2 	.word	0x00af05a2
 802debc:	05a200b4 	.word	0x05a200b4
 802dec0:	00d100ce 	.word	0x00d100ce
 802dec4:	00d100d1 	.word	0x00d100d1
 802dec8:	00d100d1 	.word	0x00d100d1
 802decc:	00d100d1 	.word	0x00d100d1
 802ded0:	00d100d1 	.word	0x00d100d1
 802ded4:	05a205a2 	.word	0x05a205a2
 802ded8:	05a205a2 	.word	0x05a205a2
 802dedc:	05a205a2 	.word	0x05a205a2
 802dee0:	014705a2 	.word	0x014705a2
 802dee4:	010805a2 	.word	0x010805a2
 802dee8:	0147011b 	.word	0x0147011b
 802deec:	01470147 	.word	0x01470147
 802def0:	05a205a2 	.word	0x05a205a2
 802def4:	05a205a2 	.word	0x05a205a2
 802def8:	05a200e2 	.word	0x05a200e2
 802defc:	049d05a2 	.word	0x049d05a2
 802df00:	05a205a2 	.word	0x05a205a2
 802df04:	04e705a2 	.word	0x04e705a2
 802df08:	050805a2 	.word	0x050805a2
 802df0c:	05a205a2 	.word	0x05a205a2
 802df10:	05a2052a 	.word	0x05a2052a
 802df14:	05a205a2 	.word	0x05a205a2
 802df18:	05a205a2 	.word	0x05a205a2
 802df1c:	05a205a2 	.word	0x05a205a2
 802df20:	014705a2 	.word	0x014705a2
 802df24:	010805a2 	.word	0x010805a2
 802df28:	0147011d 	.word	0x0147011d
 802df2c:	01470147 	.word	0x01470147
 802df30:	011d00ee 	.word	0x011d00ee
 802df34:	05a20102 	.word	0x05a20102
 802df38:	05a200fb 	.word	0x05a200fb
 802df3c:	049f047e 	.word	0x049f047e
 802df40:	010204d6 	.word	0x010204d6
 802df44:	04e705a2 	.word	0x04e705a2
 802df48:	050a009b 	.word	0x050a009b
 802df4c:	05a205a2 	.word	0x05a205a2
 802df50:	05a20065 	.word	0x05a20065
 802df54:	009b      	.short	0x009b
 802df56:	9803      	ldr	r0, [sp, #12]
 802df58:	aa26      	add	r2, sp, #152	@ 0x98
 802df5a:	4659      	mov	r1, fp
 802df5c:	f7fe fac0 	bl	802c4e0 <__ssprint_r>
 802df60:	2800      	cmp	r0, #0
 802df62:	f040 814e 	bne.w	802e202 <_svfprintf_r+0x432>
 802df66:	ac29      	add	r4, sp, #164	@ 0xa4
 802df68:	e780      	b.n	802de6c <_svfprintf_r+0x9c>
 802df6a:	4b43      	ldr	r3, [pc, #268]	@ (802e078 <_svfprintf_r+0x2a8>)
 802df6c:	9319      	str	r3, [sp, #100]	@ 0x64
 802df6e:	f015 0320 	ands.w	r3, r5, #32
 802df72:	f000 84c2 	beq.w	802e8fa <_svfprintf_r+0xb2a>
 802df76:	3607      	adds	r6, #7
 802df78:	f026 0307 	bic.w	r3, r6, #7
 802df7c:	461a      	mov	r2, r3
 802df7e:	685f      	ldr	r7, [r3, #4]
 802df80:	f852 6b08 	ldr.w	r6, [r2], #8
 802df84:	9207      	str	r2, [sp, #28]
 802df86:	07eb      	lsls	r3, r5, #31
 802df88:	d50a      	bpl.n	802dfa0 <_svfprintf_r+0x1d0>
 802df8a:	ea56 0307 	orrs.w	r3, r6, r7
 802df8e:	d007      	beq.n	802dfa0 <_svfprintf_r+0x1d0>
 802df90:	2330      	movs	r3, #48	@ 0x30
 802df92:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 802df96:	9b06      	ldr	r3, [sp, #24]
 802df98:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802df9c:	f045 0502 	orr.w	r5, r5, #2
 802dfa0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802dfa4:	2302      	movs	r3, #2
 802dfa6:	f000 bc28 	b.w	802e7fa <_svfprintf_r+0xa2a>
 802dfaa:	9803      	ldr	r0, [sp, #12]
 802dfac:	f7fc ff26 	bl	802adfc <_localeconv_r>
 802dfb0:	6843      	ldr	r3, [r0, #4]
 802dfb2:	9317      	str	r3, [sp, #92]	@ 0x5c
 802dfb4:	4618      	mov	r0, r3
 802dfb6:	f7e2 f973 	bl	80102a0 <strlen>
 802dfba:	9012      	str	r0, [sp, #72]	@ 0x48
 802dfbc:	9803      	ldr	r0, [sp, #12]
 802dfbe:	f7fc ff1d 	bl	802adfc <_localeconv_r>
 802dfc2:	6883      	ldr	r3, [r0, #8]
 802dfc4:	9309      	str	r3, [sp, #36]	@ 0x24
 802dfc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802dfc8:	b12b      	cbz	r3, 802dfd6 <_svfprintf_r+0x206>
 802dfca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802dfcc:	b11b      	cbz	r3, 802dfd6 <_svfprintf_r+0x206>
 802dfce:	781b      	ldrb	r3, [r3, #0]
 802dfd0:	b10b      	cbz	r3, 802dfd6 <_svfprintf_r+0x206>
 802dfd2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 802dfd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802dfd8:	e757      	b.n	802de8a <_svfprintf_r+0xba>
 802dfda:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802dfde:	2b00      	cmp	r3, #0
 802dfe0:	d1f9      	bne.n	802dfd6 <_svfprintf_r+0x206>
 802dfe2:	2320      	movs	r3, #32
 802dfe4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802dfe8:	e7f5      	b.n	802dfd6 <_svfprintf_r+0x206>
 802dfea:	f045 0501 	orr.w	r5, r5, #1
 802dfee:	e7f2      	b.n	802dfd6 <_svfprintf_r+0x206>
 802dff0:	f856 3b04 	ldr.w	r3, [r6], #4
 802dff4:	930e      	str	r3, [sp, #56]	@ 0x38
 802dff6:	2b00      	cmp	r3, #0
 802dff8:	daed      	bge.n	802dfd6 <_svfprintf_r+0x206>
 802dffa:	425b      	negs	r3, r3
 802dffc:	930e      	str	r3, [sp, #56]	@ 0x38
 802dffe:	f045 0504 	orr.w	r5, r5, #4
 802e002:	e7e8      	b.n	802dfd6 <_svfprintf_r+0x206>
 802e004:	232b      	movs	r3, #43	@ 0x2b
 802e006:	e7ed      	b.n	802dfe4 <_svfprintf_r+0x214>
 802e008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802e00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e00e:	9206      	str	r2, [sp, #24]
 802e010:	2a2a      	cmp	r2, #42	@ 0x2a
 802e012:	d10f      	bne.n	802e034 <_svfprintf_r+0x264>
 802e014:	f856 2b04 	ldr.w	r2, [r6], #4
 802e018:	930c      	str	r3, [sp, #48]	@ 0x30
 802e01a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 802e01e:	e7da      	b.n	802dfd6 <_svfprintf_r+0x206>
 802e020:	fb01 2808 	mla	r8, r1, r8, r2
 802e024:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e028:	9206      	str	r2, [sp, #24]
 802e02a:	9a06      	ldr	r2, [sp, #24]
 802e02c:	3a30      	subs	r2, #48	@ 0x30
 802e02e:	2a09      	cmp	r2, #9
 802e030:	d9f6      	bls.n	802e020 <_svfprintf_r+0x250>
 802e032:	e72d      	b.n	802de90 <_svfprintf_r+0xc0>
 802e034:	f04f 0800 	mov.w	r8, #0
 802e038:	210a      	movs	r1, #10
 802e03a:	e7f6      	b.n	802e02a <_svfprintf_r+0x25a>
 802e03c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 802e040:	e7c9      	b.n	802dfd6 <_svfprintf_r+0x206>
 802e042:	2200      	movs	r2, #0
 802e044:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802e046:	920e      	str	r2, [sp, #56]	@ 0x38
 802e048:	210a      	movs	r1, #10
 802e04a:	9a06      	ldr	r2, [sp, #24]
 802e04c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802e04e:	3a30      	subs	r2, #48	@ 0x30
 802e050:	fb01 2200 	mla	r2, r1, r0, r2
 802e054:	920e      	str	r2, [sp, #56]	@ 0x38
 802e056:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e05a:	9206      	str	r2, [sp, #24]
 802e05c:	3a30      	subs	r2, #48	@ 0x30
 802e05e:	2a09      	cmp	r2, #9
 802e060:	d9f3      	bls.n	802e04a <_svfprintf_r+0x27a>
 802e062:	e715      	b.n	802de90 <_svfprintf_r+0xc0>
 802e064:	f045 0508 	orr.w	r5, r5, #8
 802e068:	e7b5      	b.n	802dfd6 <_svfprintf_r+0x206>
 802e06a:	bf00      	nop
 802e06c:	f3af 8000 	nop.w
	...
 802e078:	0803819f 	.word	0x0803819f
 802e07c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802e07e:	781b      	ldrb	r3, [r3, #0]
 802e080:	2b68      	cmp	r3, #104	@ 0x68
 802e082:	bf01      	itttt	eq
 802e084:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 802e086:	3301      	addeq	r3, #1
 802e088:	930c      	streq	r3, [sp, #48]	@ 0x30
 802e08a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802e08e:	bf18      	it	ne
 802e090:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802e094:	e79f      	b.n	802dfd6 <_svfprintf_r+0x206>
 802e096:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802e098:	781b      	ldrb	r3, [r3, #0]
 802e09a:	2b6c      	cmp	r3, #108	@ 0x6c
 802e09c:	d105      	bne.n	802e0aa <_svfprintf_r+0x2da>
 802e09e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802e0a0:	3301      	adds	r3, #1
 802e0a2:	930c      	str	r3, [sp, #48]	@ 0x30
 802e0a4:	f045 0520 	orr.w	r5, r5, #32
 802e0a8:	e795      	b.n	802dfd6 <_svfprintf_r+0x206>
 802e0aa:	f045 0510 	orr.w	r5, r5, #16
 802e0ae:	e792      	b.n	802dfd6 <_svfprintf_r+0x206>
 802e0b0:	4632      	mov	r2, r6
 802e0b2:	f852 3b04 	ldr.w	r3, [r2], #4
 802e0b6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802e0ba:	2300      	movs	r3, #0
 802e0bc:	9207      	str	r2, [sp, #28]
 802e0be:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802e0c2:	469a      	mov	sl, r3
 802e0c4:	f04f 0801 	mov.w	r8, #1
 802e0c8:	9310      	str	r3, [sp, #64]	@ 0x40
 802e0ca:	461f      	mov	r7, r3
 802e0cc:	9308      	str	r3, [sp, #32]
 802e0ce:	461e      	mov	r6, r3
 802e0d0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802e0d4:	e1d2      	b.n	802e47c <_svfprintf_r+0x6ac>
 802e0d6:	f045 0510 	orr.w	r5, r5, #16
 802e0da:	06af      	lsls	r7, r5, #26
 802e0dc:	d512      	bpl.n	802e104 <_svfprintf_r+0x334>
 802e0de:	3607      	adds	r6, #7
 802e0e0:	f026 0307 	bic.w	r3, r6, #7
 802e0e4:	461a      	mov	r2, r3
 802e0e6:	685f      	ldr	r7, [r3, #4]
 802e0e8:	f852 6b08 	ldr.w	r6, [r2], #8
 802e0ec:	9207      	str	r2, [sp, #28]
 802e0ee:	2f00      	cmp	r7, #0
 802e0f0:	da06      	bge.n	802e100 <_svfprintf_r+0x330>
 802e0f2:	4276      	negs	r6, r6
 802e0f4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802e0f8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802e0fc:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802e100:	2301      	movs	r3, #1
 802e102:	e37d      	b.n	802e800 <_svfprintf_r+0xa30>
 802e104:	4633      	mov	r3, r6
 802e106:	06ee      	lsls	r6, r5, #27
 802e108:	f853 7b04 	ldr.w	r7, [r3], #4
 802e10c:	9307      	str	r3, [sp, #28]
 802e10e:	d502      	bpl.n	802e116 <_svfprintf_r+0x346>
 802e110:	463e      	mov	r6, r7
 802e112:	17ff      	asrs	r7, r7, #31
 802e114:	e7eb      	b.n	802e0ee <_svfprintf_r+0x31e>
 802e116:	0668      	lsls	r0, r5, #25
 802e118:	d503      	bpl.n	802e122 <_svfprintf_r+0x352>
 802e11a:	b23e      	sxth	r6, r7
 802e11c:	f347 37c0 	sbfx	r7, r7, #15, #1
 802e120:	e7e5      	b.n	802e0ee <_svfprintf_r+0x31e>
 802e122:	05a9      	lsls	r1, r5, #22
 802e124:	d5f4      	bpl.n	802e110 <_svfprintf_r+0x340>
 802e126:	b27e      	sxtb	r6, r7
 802e128:	f347 17c0 	sbfx	r7, r7, #7, #1
 802e12c:	e7df      	b.n	802e0ee <_svfprintf_r+0x31e>
 802e12e:	3607      	adds	r6, #7
 802e130:	f026 0307 	bic.w	r3, r6, #7
 802e134:	ecb3 7b02 	vldmia	r3!, {d7}
 802e138:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802e13c:	9307      	str	r3, [sp, #28]
 802e13e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e140:	931a      	str	r3, [sp, #104]	@ 0x68
 802e142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e144:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802e148:	931b      	str	r3, [sp, #108]	@ 0x6c
 802e14a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802e14e:	4b81      	ldr	r3, [pc, #516]	@ (802e354 <_svfprintf_r+0x584>)
 802e150:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802e154:	f7e2 fd02 	bl	8010b5c <__aeabi_dcmpun>
 802e158:	bb10      	cbnz	r0, 802e1a0 <_svfprintf_r+0x3d0>
 802e15a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802e15e:	4b7d      	ldr	r3, [pc, #500]	@ (802e354 <_svfprintf_r+0x584>)
 802e160:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802e164:	f7e2 fcdc 	bl	8010b20 <__aeabi_dcmple>
 802e168:	b9d0      	cbnz	r0, 802e1a0 <_svfprintf_r+0x3d0>
 802e16a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802e16e:	2200      	movs	r2, #0
 802e170:	2300      	movs	r3, #0
 802e172:	f7e2 fccb 	bl	8010b0c <__aeabi_dcmplt>
 802e176:	b110      	cbz	r0, 802e17e <_svfprintf_r+0x3ae>
 802e178:	232d      	movs	r3, #45	@ 0x2d
 802e17a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802e17e:	4a76      	ldr	r2, [pc, #472]	@ (802e358 <_svfprintf_r+0x588>)
 802e180:	4b76      	ldr	r3, [pc, #472]	@ (802e35c <_svfprintf_r+0x58c>)
 802e182:	9906      	ldr	r1, [sp, #24]
 802e184:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 802e188:	2947      	cmp	r1, #71	@ 0x47
 802e18a:	bfd4      	ite	le
 802e18c:	4691      	movle	r9, r2
 802e18e:	4699      	movgt	r9, r3
 802e190:	f04f 0a00 	mov.w	sl, #0
 802e194:	f04f 0803 	mov.w	r8, #3
 802e198:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802e19c:	f000 bfec 	b.w	802f178 <_svfprintf_r+0x13a8>
 802e1a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 802e1a4:	4610      	mov	r0, r2
 802e1a6:	4619      	mov	r1, r3
 802e1a8:	f7e2 fcd8 	bl	8010b5c <__aeabi_dcmpun>
 802e1ac:	4682      	mov	sl, r0
 802e1ae:	b140      	cbz	r0, 802e1c2 <_svfprintf_r+0x3f2>
 802e1b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e1b2:	4a6b      	ldr	r2, [pc, #428]	@ (802e360 <_svfprintf_r+0x590>)
 802e1b4:	2b00      	cmp	r3, #0
 802e1b6:	bfbc      	itt	lt
 802e1b8:	232d      	movlt	r3, #45	@ 0x2d
 802e1ba:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802e1be:	4b69      	ldr	r3, [pc, #420]	@ (802e364 <_svfprintf_r+0x594>)
 802e1c0:	e7df      	b.n	802e182 <_svfprintf_r+0x3b2>
 802e1c2:	9b06      	ldr	r3, [sp, #24]
 802e1c4:	2b61      	cmp	r3, #97	@ 0x61
 802e1c6:	d025      	beq.n	802e214 <_svfprintf_r+0x444>
 802e1c8:	2b41      	cmp	r3, #65	@ 0x41
 802e1ca:	d125      	bne.n	802e218 <_svfprintf_r+0x448>
 802e1cc:	2358      	movs	r3, #88	@ 0x58
 802e1ce:	2230      	movs	r2, #48	@ 0x30
 802e1d0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 802e1d4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 802e1d8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802e1dc:	f045 0502 	orr.w	r5, r5, #2
 802e1e0:	f340 80a5 	ble.w	802e32e <_svfprintf_r+0x55e>
 802e1e4:	9803      	ldr	r0, [sp, #12]
 802e1e6:	f108 0101 	add.w	r1, r8, #1
 802e1ea:	f7fd fecf 	bl	802bf8c <_malloc_r>
 802e1ee:	4681      	mov	r9, r0
 802e1f0:	2800      	cmp	r0, #0
 802e1f2:	f040 80a1 	bne.w	802e338 <_svfprintf_r+0x568>
 802e1f6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802e1fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802e1fe:	f8ab 300c 	strh.w	r3, [fp, #12]
 802e202:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802e206:	065b      	lsls	r3, r3, #25
 802e208:	f53f ae04 	bmi.w	802de14 <_svfprintf_r+0x44>
 802e20c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802e20e:	b053      	add	sp, #332	@ 0x14c
 802e210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e214:	2378      	movs	r3, #120	@ 0x78
 802e216:	e7da      	b.n	802e1ce <_svfprintf_r+0x3fe>
 802e218:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802e21c:	f000 808e 	beq.w	802e33c <_svfprintf_r+0x56c>
 802e220:	9b06      	ldr	r3, [sp, #24]
 802e222:	f023 0320 	bic.w	r3, r3, #32
 802e226:	2b47      	cmp	r3, #71	@ 0x47
 802e228:	d105      	bne.n	802e236 <_svfprintf_r+0x466>
 802e22a:	f1b8 0f00 	cmp.w	r8, #0
 802e22e:	d102      	bne.n	802e236 <_svfprintf_r+0x466>
 802e230:	46c2      	mov	sl, r8
 802e232:	f04f 0801 	mov.w	r8, #1
 802e236:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802e23a:	9311      	str	r3, [sp, #68]	@ 0x44
 802e23c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e23e:	2b00      	cmp	r3, #0
 802e240:	da7f      	bge.n	802e342 <_svfprintf_r+0x572>
 802e242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e244:	9314      	str	r3, [sp, #80]	@ 0x50
 802e246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e248:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802e24c:	9315      	str	r3, [sp, #84]	@ 0x54
 802e24e:	232d      	movs	r3, #45	@ 0x2d
 802e250:	931c      	str	r3, [sp, #112]	@ 0x70
 802e252:	9b06      	ldr	r3, [sp, #24]
 802e254:	f023 0320 	bic.w	r3, r3, #32
 802e258:	2b41      	cmp	r3, #65	@ 0x41
 802e25a:	9308      	str	r3, [sp, #32]
 802e25c:	f040 81e6 	bne.w	802e62c <_svfprintf_r+0x85c>
 802e260:	a820      	add	r0, sp, #128	@ 0x80
 802e262:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802e266:	f7fc fe9b 	bl	802afa0 <frexp>
 802e26a:	2200      	movs	r2, #0
 802e26c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802e270:	ec51 0b10 	vmov	r0, r1, d0
 802e274:	f7e2 f9d8 	bl	8010628 <__aeabi_dmul>
 802e278:	4602      	mov	r2, r0
 802e27a:	460b      	mov	r3, r1
 802e27c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802e280:	2200      	movs	r2, #0
 802e282:	2300      	movs	r3, #0
 802e284:	f7e2 fc38 	bl	8010af8 <__aeabi_dcmpeq>
 802e288:	b108      	cbz	r0, 802e28e <_svfprintf_r+0x4be>
 802e28a:	2301      	movs	r3, #1
 802e28c:	9320      	str	r3, [sp, #128]	@ 0x80
 802e28e:	4a36      	ldr	r2, [pc, #216]	@ (802e368 <_svfprintf_r+0x598>)
 802e290:	4b36      	ldr	r3, [pc, #216]	@ (802e36c <_svfprintf_r+0x59c>)
 802e292:	9906      	ldr	r1, [sp, #24]
 802e294:	2961      	cmp	r1, #97	@ 0x61
 802e296:	bf18      	it	ne
 802e298:	461a      	movne	r2, r3
 802e29a:	9210      	str	r2, [sp, #64]	@ 0x40
 802e29c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 802e2a0:	464e      	mov	r6, r9
 802e2a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e2a6:	4b32      	ldr	r3, [pc, #200]	@ (802e370 <_svfprintf_r+0x5a0>)
 802e2a8:	2200      	movs	r2, #0
 802e2aa:	f7e2 f9bd 	bl	8010628 <__aeabi_dmul>
 802e2ae:	4602      	mov	r2, r0
 802e2b0:	460b      	mov	r3, r1
 802e2b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802e2b6:	f7e2 fc67 	bl	8010b88 <__aeabi_d2iz>
 802e2ba:	9013      	str	r0, [sp, #76]	@ 0x4c
 802e2bc:	f7e2 f94a 	bl	8010554 <__aeabi_i2d>
 802e2c0:	4602      	mov	r2, r0
 802e2c2:	460b      	mov	r3, r1
 802e2c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e2c8:	f7e1 fff6 	bl	80102b8 <__aeabi_dsub>
 802e2cc:	4602      	mov	r2, r0
 802e2ce:	460b      	mov	r3, r1
 802e2d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802e2d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e2d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802e2d8:	5c9b      	ldrb	r3, [r3, r2]
 802e2da:	f806 3b01 	strb.w	r3, [r6], #1
 802e2de:	1c7a      	adds	r2, r7, #1
 802e2e0:	d006      	beq.n	802e2f0 <_svfprintf_r+0x520>
 802e2e2:	1e7b      	subs	r3, r7, #1
 802e2e4:	931d      	str	r3, [sp, #116]	@ 0x74
 802e2e6:	2200      	movs	r2, #0
 802e2e8:	2300      	movs	r3, #0
 802e2ea:	f7e2 fc05 	bl	8010af8 <__aeabi_dcmpeq>
 802e2ee:	b370      	cbz	r0, 802e34e <_svfprintf_r+0x57e>
 802e2f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e2f4:	4b1f      	ldr	r3, [pc, #124]	@ (802e374 <_svfprintf_r+0x5a4>)
 802e2f6:	2200      	movs	r2, #0
 802e2f8:	f7e2 fc26 	bl	8010b48 <__aeabi_dcmpgt>
 802e2fc:	2800      	cmp	r0, #0
 802e2fe:	d13b      	bne.n	802e378 <_svfprintf_r+0x5a8>
 802e300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e304:	4b1b      	ldr	r3, [pc, #108]	@ (802e374 <_svfprintf_r+0x5a4>)
 802e306:	2200      	movs	r2, #0
 802e308:	f7e2 fbf6 	bl	8010af8 <__aeabi_dcmpeq>
 802e30c:	b110      	cbz	r0, 802e314 <_svfprintf_r+0x544>
 802e30e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802e310:	07db      	lsls	r3, r3, #31
 802e312:	d431      	bmi.n	802e378 <_svfprintf_r+0x5a8>
 802e314:	4633      	mov	r3, r6
 802e316:	19f1      	adds	r1, r6, r7
 802e318:	2030      	movs	r0, #48	@ 0x30
 802e31a:	1aca      	subs	r2, r1, r3
 802e31c:	2a00      	cmp	r2, #0
 802e31e:	f280 8182 	bge.w	802e626 <_svfprintf_r+0x856>
 802e322:	1c7b      	adds	r3, r7, #1
 802e324:	3701      	adds	r7, #1
 802e326:	bfb8      	it	lt
 802e328:	2300      	movlt	r3, #0
 802e32a:	441e      	add	r6, r3
 802e32c:	e038      	b.n	802e3a0 <_svfprintf_r+0x5d0>
 802e32e:	f04f 0a00 	mov.w	sl, #0
 802e332:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802e336:	e77e      	b.n	802e236 <_svfprintf_r+0x466>
 802e338:	4682      	mov	sl, r0
 802e33a:	e77c      	b.n	802e236 <_svfprintf_r+0x466>
 802e33c:	f04f 0806 	mov.w	r8, #6
 802e340:	e779      	b.n	802e236 <_svfprintf_r+0x466>
 802e342:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802e346:	2300      	movs	r3, #0
 802e348:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802e34c:	e780      	b.n	802e250 <_svfprintf_r+0x480>
 802e34e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802e350:	e7a7      	b.n	802e2a2 <_svfprintf_r+0x4d2>
 802e352:	bf00      	nop
 802e354:	7fefffff 	.word	0x7fefffff
 802e358:	0803818f 	.word	0x0803818f
 802e35c:	08038193 	.word	0x08038193
 802e360:	08038197 	.word	0x08038197
 802e364:	0803819b 	.word	0x0803819b
 802e368:	0803819f 	.word	0x0803819f
 802e36c:	080381b0 	.word	0x080381b0
 802e370:	40300000 	.word	0x40300000
 802e374:	3fe00000 	.word	0x3fe00000
 802e378:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802e37a:	9624      	str	r6, [sp, #144]	@ 0x90
 802e37c:	7bd9      	ldrb	r1, [r3, #15]
 802e37e:	2030      	movs	r0, #48	@ 0x30
 802e380:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802e382:	1e53      	subs	r3, r2, #1
 802e384:	9324      	str	r3, [sp, #144]	@ 0x90
 802e386:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802e38a:	428b      	cmp	r3, r1
 802e38c:	f000 8148 	beq.w	802e620 <_svfprintf_r+0x850>
 802e390:	2b39      	cmp	r3, #57	@ 0x39
 802e392:	bf0b      	itete	eq
 802e394:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 802e396:	3301      	addne	r3, #1
 802e398:	7a9b      	ldrbeq	r3, [r3, #10]
 802e39a:	b2db      	uxtbne	r3, r3
 802e39c:	f802 3c01 	strb.w	r3, [r2, #-1]
 802e3a0:	eba6 0309 	sub.w	r3, r6, r9
 802e3a4:	9304      	str	r3, [sp, #16]
 802e3a6:	9b08      	ldr	r3, [sp, #32]
 802e3a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802e3aa:	2b47      	cmp	r3, #71	@ 0x47
 802e3ac:	f040 8187 	bne.w	802e6be <_svfprintf_r+0x8ee>
 802e3b0:	1cf1      	adds	r1, r6, #3
 802e3b2:	db02      	blt.n	802e3ba <_svfprintf_r+0x5ea>
 802e3b4:	4546      	cmp	r6, r8
 802e3b6:	f340 81a5 	ble.w	802e704 <_svfprintf_r+0x934>
 802e3ba:	9b06      	ldr	r3, [sp, #24]
 802e3bc:	3b02      	subs	r3, #2
 802e3be:	9306      	str	r3, [sp, #24]
 802e3c0:	9906      	ldr	r1, [sp, #24]
 802e3c2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 802e3c6:	f021 0120 	bic.w	r1, r1, #32
 802e3ca:	2941      	cmp	r1, #65	@ 0x41
 802e3cc:	bf08      	it	eq
 802e3ce:	320f      	addeq	r2, #15
 802e3d0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802e3d4:	bf06      	itte	eq
 802e3d6:	b2d2      	uxtbeq	r2, r2
 802e3d8:	2101      	moveq	r1, #1
 802e3da:	2100      	movne	r1, #0
 802e3dc:	2b00      	cmp	r3, #0
 802e3de:	9320      	str	r3, [sp, #128]	@ 0x80
 802e3e0:	bfb8      	it	lt
 802e3e2:	f1c6 0301 	rsblt	r3, r6, #1
 802e3e6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802e3ea:	bfb4      	ite	lt
 802e3ec:	222d      	movlt	r2, #45	@ 0x2d
 802e3ee:	222b      	movge	r2, #43	@ 0x2b
 802e3f0:	2b09      	cmp	r3, #9
 802e3f2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802e3f6:	f340 8178 	ble.w	802e6ea <_svfprintf_r+0x91a>
 802e3fa:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802e3fe:	270a      	movs	r7, #10
 802e400:	4602      	mov	r2, r0
 802e402:	fbb3 f6f7 	udiv	r6, r3, r7
 802e406:	fb07 3116 	mls	r1, r7, r6, r3
 802e40a:	3130      	adds	r1, #48	@ 0x30
 802e40c:	f802 1c01 	strb.w	r1, [r2, #-1]
 802e410:	4619      	mov	r1, r3
 802e412:	2963      	cmp	r1, #99	@ 0x63
 802e414:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 802e418:	4633      	mov	r3, r6
 802e41a:	dcf1      	bgt.n	802e400 <_svfprintf_r+0x630>
 802e41c:	3330      	adds	r3, #48	@ 0x30
 802e41e:	1e91      	subs	r1, r2, #2
 802e420:	f800 3c01 	strb.w	r3, [r0, #-1]
 802e424:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 802e428:	460b      	mov	r3, r1
 802e42a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802e42e:	4283      	cmp	r3, r0
 802e430:	f0c0 8156 	bcc.w	802e6e0 <_svfprintf_r+0x910>
 802e434:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 802e438:	1a9b      	subs	r3, r3, r2
 802e43a:	4281      	cmp	r1, r0
 802e43c:	bf88      	it	hi
 802e43e:	2300      	movhi	r3, #0
 802e440:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802e444:	441a      	add	r2, r3
 802e446:	ab22      	add	r3, sp, #136	@ 0x88
 802e448:	1ad3      	subs	r3, r2, r3
 802e44a:	9a04      	ldr	r2, [sp, #16]
 802e44c:	9318      	str	r3, [sp, #96]	@ 0x60
 802e44e:	2a01      	cmp	r2, #1
 802e450:	eb03 0802 	add.w	r8, r3, r2
 802e454:	dc01      	bgt.n	802e45a <_svfprintf_r+0x68a>
 802e456:	07ea      	lsls	r2, r5, #31
 802e458:	d501      	bpl.n	802e45e <_svfprintf_r+0x68e>
 802e45a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e45c:	4498      	add	r8, r3
 802e45e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802e462:	2700      	movs	r7, #0
 802e464:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802e468:	9311      	str	r3, [sp, #68]	@ 0x44
 802e46a:	9708      	str	r7, [sp, #32]
 802e46c:	463e      	mov	r6, r7
 802e46e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802e470:	2b00      	cmp	r3, #0
 802e472:	f040 818f 	bne.w	802e794 <_svfprintf_r+0x9c4>
 802e476:	2300      	movs	r3, #0
 802e478:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802e47a:	9310      	str	r3, [sp, #64]	@ 0x40
 802e47c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802e47e:	4543      	cmp	r3, r8
 802e480:	bfb8      	it	lt
 802e482:	4643      	movlt	r3, r8
 802e484:	9311      	str	r3, [sp, #68]	@ 0x44
 802e486:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802e48a:	b113      	cbz	r3, 802e492 <_svfprintf_r+0x6c2>
 802e48c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802e48e:	3301      	adds	r3, #1
 802e490:	9311      	str	r3, [sp, #68]	@ 0x44
 802e492:	f015 0302 	ands.w	r3, r5, #2
 802e496:	931c      	str	r3, [sp, #112]	@ 0x70
 802e498:	bf1e      	ittt	ne
 802e49a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802e49c:	3302      	addne	r3, #2
 802e49e:	9311      	strne	r3, [sp, #68]	@ 0x44
 802e4a0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 802e4a4:	931d      	str	r3, [sp, #116]	@ 0x74
 802e4a6:	d122      	bne.n	802e4ee <_svfprintf_r+0x71e>
 802e4a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e4aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802e4ac:	1a9b      	subs	r3, r3, r2
 802e4ae:	2b00      	cmp	r3, #0
 802e4b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e4b2:	dd1c      	ble.n	802e4ee <_svfprintf_r+0x71e>
 802e4b4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802e4b6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802e4ba:	2810      	cmp	r0, #16
 802e4bc:	489e      	ldr	r0, [pc, #632]	@ (802e738 <_svfprintf_r+0x968>)
 802e4be:	6020      	str	r0, [r4, #0]
 802e4c0:	f102 0201 	add.w	r2, r2, #1
 802e4c4:	f104 0108 	add.w	r1, r4, #8
 802e4c8:	f300 8298 	bgt.w	802e9fc <_svfprintf_r+0xc2c>
 802e4cc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802e4ce:	6060      	str	r0, [r4, #4]
 802e4d0:	4403      	add	r3, r0
 802e4d2:	2a07      	cmp	r2, #7
 802e4d4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802e4d8:	f340 82a5 	ble.w	802ea26 <_svfprintf_r+0xc56>
 802e4dc:	9803      	ldr	r0, [sp, #12]
 802e4de:	aa26      	add	r2, sp, #152	@ 0x98
 802e4e0:	4659      	mov	r1, fp
 802e4e2:	f7fd fffd 	bl	802c4e0 <__ssprint_r>
 802e4e6:	2800      	cmp	r0, #0
 802e4e8:	f040 85ed 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802e4ec:	ac29      	add	r4, sp, #164	@ 0xa4
 802e4ee:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802e4f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802e4f4:	b16a      	cbz	r2, 802e512 <_svfprintf_r+0x742>
 802e4f6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802e4fa:	6022      	str	r2, [r4, #0]
 802e4fc:	2201      	movs	r2, #1
 802e4fe:	4413      	add	r3, r2
 802e500:	9328      	str	r3, [sp, #160]	@ 0xa0
 802e502:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802e504:	6062      	str	r2, [r4, #4]
 802e506:	4413      	add	r3, r2
 802e508:	2b07      	cmp	r3, #7
 802e50a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802e50c:	f300 828d 	bgt.w	802ea2a <_svfprintf_r+0xc5a>
 802e510:	3408      	adds	r4, #8
 802e512:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802e514:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802e516:	b162      	cbz	r2, 802e532 <_svfprintf_r+0x762>
 802e518:	aa1f      	add	r2, sp, #124	@ 0x7c
 802e51a:	6022      	str	r2, [r4, #0]
 802e51c:	2202      	movs	r2, #2
 802e51e:	4413      	add	r3, r2
 802e520:	9328      	str	r3, [sp, #160]	@ 0xa0
 802e522:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802e524:	6062      	str	r2, [r4, #4]
 802e526:	3301      	adds	r3, #1
 802e528:	2b07      	cmp	r3, #7
 802e52a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802e52c:	f300 8287 	bgt.w	802ea3e <_svfprintf_r+0xc6e>
 802e530:	3408      	adds	r4, #8
 802e532:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802e534:	2b80      	cmp	r3, #128	@ 0x80
 802e536:	d122      	bne.n	802e57e <_svfprintf_r+0x7ae>
 802e538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e53a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802e53c:	1a9b      	subs	r3, r3, r2
 802e53e:	2b00      	cmp	r3, #0
 802e540:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e542:	dd1c      	ble.n	802e57e <_svfprintf_r+0x7ae>
 802e544:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802e546:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802e54a:	2810      	cmp	r0, #16
 802e54c:	487b      	ldr	r0, [pc, #492]	@ (802e73c <_svfprintf_r+0x96c>)
 802e54e:	6020      	str	r0, [r4, #0]
 802e550:	f102 0201 	add.w	r2, r2, #1
 802e554:	f104 0108 	add.w	r1, r4, #8
 802e558:	f300 827b 	bgt.w	802ea52 <_svfprintf_r+0xc82>
 802e55c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802e55e:	6060      	str	r0, [r4, #4]
 802e560:	4403      	add	r3, r0
 802e562:	2a07      	cmp	r2, #7
 802e564:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802e568:	f340 8288 	ble.w	802ea7c <_svfprintf_r+0xcac>
 802e56c:	9803      	ldr	r0, [sp, #12]
 802e56e:	aa26      	add	r2, sp, #152	@ 0x98
 802e570:	4659      	mov	r1, fp
 802e572:	f7fd ffb5 	bl	802c4e0 <__ssprint_r>
 802e576:	2800      	cmp	r0, #0
 802e578:	f040 85a5 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802e57c:	ac29      	add	r4, sp, #164	@ 0xa4
 802e57e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802e580:	eba3 0308 	sub.w	r3, r3, r8
 802e584:	2b00      	cmp	r3, #0
 802e586:	9310      	str	r3, [sp, #64]	@ 0x40
 802e588:	dd1c      	ble.n	802e5c4 <_svfprintf_r+0x7f4>
 802e58a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802e58c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802e590:	2810      	cmp	r0, #16
 802e592:	486a      	ldr	r0, [pc, #424]	@ (802e73c <_svfprintf_r+0x96c>)
 802e594:	6020      	str	r0, [r4, #0]
 802e596:	f102 0201 	add.w	r2, r2, #1
 802e59a:	f104 0108 	add.w	r1, r4, #8
 802e59e:	f300 826f 	bgt.w	802ea80 <_svfprintf_r+0xcb0>
 802e5a2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802e5a4:	6060      	str	r0, [r4, #4]
 802e5a6:	4403      	add	r3, r0
 802e5a8:	2a07      	cmp	r2, #7
 802e5aa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802e5ae:	f340 827c 	ble.w	802eaaa <_svfprintf_r+0xcda>
 802e5b2:	9803      	ldr	r0, [sp, #12]
 802e5b4:	aa26      	add	r2, sp, #152	@ 0x98
 802e5b6:	4659      	mov	r1, fp
 802e5b8:	f7fd ff92 	bl	802c4e0 <__ssprint_r>
 802e5bc:	2800      	cmp	r0, #0
 802e5be:	f040 8582 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802e5c2:	ac29      	add	r4, sp, #164	@ 0xa4
 802e5c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802e5c6:	9310      	str	r3, [sp, #64]	@ 0x40
 802e5c8:	05ea      	lsls	r2, r5, #23
 802e5ca:	f100 8275 	bmi.w	802eab8 <_svfprintf_r+0xce8>
 802e5ce:	4443      	add	r3, r8
 802e5d0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802e5d2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802e5d4:	3301      	adds	r3, #1
 802e5d6:	2b07      	cmp	r3, #7
 802e5d8:	e9c4 9800 	strd	r9, r8, [r4]
 802e5dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 802e5de:	f300 82b1 	bgt.w	802eb44 <_svfprintf_r+0xd74>
 802e5e2:	3408      	adds	r4, #8
 802e5e4:	076a      	lsls	r2, r5, #29
 802e5e6:	f100 8550 	bmi.w	802f08a <_svfprintf_r+0x12ba>
 802e5ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802e5ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802e5f0:	428a      	cmp	r2, r1
 802e5f2:	bfac      	ite	ge
 802e5f4:	189b      	addge	r3, r3, r2
 802e5f6:	185b      	addlt	r3, r3, r1
 802e5f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 802e5fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802e5fc:	b13b      	cbz	r3, 802e60e <_svfprintf_r+0x83e>
 802e5fe:	9803      	ldr	r0, [sp, #12]
 802e600:	aa26      	add	r2, sp, #152	@ 0x98
 802e602:	4659      	mov	r1, fp
 802e604:	f7fd ff6c 	bl	802c4e0 <__ssprint_r>
 802e608:	2800      	cmp	r0, #0
 802e60a:	f040 855c 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802e60e:	2300      	movs	r3, #0
 802e610:	9327      	str	r3, [sp, #156]	@ 0x9c
 802e612:	f1ba 0f00 	cmp.w	sl, #0
 802e616:	f040 8572 	bne.w	802f0fe <_svfprintf_r+0x132e>
 802e61a:	9e07      	ldr	r6, [sp, #28]
 802e61c:	ac29      	add	r4, sp, #164	@ 0xa4
 802e61e:	e0c6      	b.n	802e7ae <_svfprintf_r+0x9de>
 802e620:	f802 0c01 	strb.w	r0, [r2, #-1]
 802e624:	e6ac      	b.n	802e380 <_svfprintf_r+0x5b0>
 802e626:	f803 0b01 	strb.w	r0, [r3], #1
 802e62a:	e676      	b.n	802e31a <_svfprintf_r+0x54a>
 802e62c:	9b08      	ldr	r3, [sp, #32]
 802e62e:	2b46      	cmp	r3, #70	@ 0x46
 802e630:	d005      	beq.n	802e63e <_svfprintf_r+0x86e>
 802e632:	2b45      	cmp	r3, #69	@ 0x45
 802e634:	d11a      	bne.n	802e66c <_svfprintf_r+0x89c>
 802e636:	f108 0601 	add.w	r6, r8, #1
 802e63a:	2102      	movs	r1, #2
 802e63c:	e001      	b.n	802e642 <_svfprintf_r+0x872>
 802e63e:	4646      	mov	r6, r8
 802e640:	2103      	movs	r1, #3
 802e642:	ab24      	add	r3, sp, #144	@ 0x90
 802e644:	9301      	str	r3, [sp, #4]
 802e646:	ab21      	add	r3, sp, #132	@ 0x84
 802e648:	9300      	str	r3, [sp, #0]
 802e64a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802e64e:	ab20      	add	r3, sp, #128	@ 0x80
 802e650:	9803      	ldr	r0, [sp, #12]
 802e652:	4632      	mov	r2, r6
 802e654:	f7fc fd80 	bl	802b158 <_dtoa_r>
 802e658:	9b08      	ldr	r3, [sp, #32]
 802e65a:	2b47      	cmp	r3, #71	@ 0x47
 802e65c:	4681      	mov	r9, r0
 802e65e:	d119      	bne.n	802e694 <_svfprintf_r+0x8c4>
 802e660:	07e8      	lsls	r0, r5, #31
 802e662:	d405      	bmi.n	802e670 <_svfprintf_r+0x8a0>
 802e664:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802e666:	eba3 0309 	sub.w	r3, r3, r9
 802e66a:	e69b      	b.n	802e3a4 <_svfprintf_r+0x5d4>
 802e66c:	4646      	mov	r6, r8
 802e66e:	e7e4      	b.n	802e63a <_svfprintf_r+0x86a>
 802e670:	eb09 0706 	add.w	r7, r9, r6
 802e674:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802e678:	2200      	movs	r2, #0
 802e67a:	2300      	movs	r3, #0
 802e67c:	f7e2 fa3c 	bl	8010af8 <__aeabi_dcmpeq>
 802e680:	b100      	cbz	r0, 802e684 <_svfprintf_r+0x8b4>
 802e682:	9724      	str	r7, [sp, #144]	@ 0x90
 802e684:	2230      	movs	r2, #48	@ 0x30
 802e686:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802e688:	429f      	cmp	r7, r3
 802e68a:	d9eb      	bls.n	802e664 <_svfprintf_r+0x894>
 802e68c:	1c59      	adds	r1, r3, #1
 802e68e:	9124      	str	r1, [sp, #144]	@ 0x90
 802e690:	701a      	strb	r2, [r3, #0]
 802e692:	e7f8      	b.n	802e686 <_svfprintf_r+0x8b6>
 802e694:	9b08      	ldr	r3, [sp, #32]
 802e696:	2b46      	cmp	r3, #70	@ 0x46
 802e698:	eb00 0706 	add.w	r7, r0, r6
 802e69c:	d1ea      	bne.n	802e674 <_svfprintf_r+0x8a4>
 802e69e:	7803      	ldrb	r3, [r0, #0]
 802e6a0:	2b30      	cmp	r3, #48	@ 0x30
 802e6a2:	d109      	bne.n	802e6b8 <_svfprintf_r+0x8e8>
 802e6a4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802e6a8:	2200      	movs	r2, #0
 802e6aa:	2300      	movs	r3, #0
 802e6ac:	f7e2 fa24 	bl	8010af8 <__aeabi_dcmpeq>
 802e6b0:	b910      	cbnz	r0, 802e6b8 <_svfprintf_r+0x8e8>
 802e6b2:	f1c6 0601 	rsb	r6, r6, #1
 802e6b6:	9620      	str	r6, [sp, #128]	@ 0x80
 802e6b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802e6ba:	441f      	add	r7, r3
 802e6bc:	e7da      	b.n	802e674 <_svfprintf_r+0x8a4>
 802e6be:	9b08      	ldr	r3, [sp, #32]
 802e6c0:	2b46      	cmp	r3, #70	@ 0x46
 802e6c2:	f47f ae7d 	bne.w	802e3c0 <_svfprintf_r+0x5f0>
 802e6c6:	f005 0301 	and.w	r3, r5, #1
 802e6ca:	2e00      	cmp	r6, #0
 802e6cc:	ea43 0308 	orr.w	r3, r3, r8
 802e6d0:	dd25      	ble.n	802e71e <_svfprintf_r+0x94e>
 802e6d2:	b37b      	cbz	r3, 802e734 <_svfprintf_r+0x964>
 802e6d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e6d6:	18f3      	adds	r3, r6, r3
 802e6d8:	4498      	add	r8, r3
 802e6da:	2366      	movs	r3, #102	@ 0x66
 802e6dc:	9306      	str	r3, [sp, #24]
 802e6de:	e033      	b.n	802e748 <_svfprintf_r+0x978>
 802e6e0:	f813 7b01 	ldrb.w	r7, [r3], #1
 802e6e4:	f806 7f01 	strb.w	r7, [r6, #1]!
 802e6e8:	e6a1      	b.n	802e42e <_svfprintf_r+0x65e>
 802e6ea:	b941      	cbnz	r1, 802e6fe <_svfprintf_r+0x92e>
 802e6ec:	2230      	movs	r2, #48	@ 0x30
 802e6ee:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802e6f2:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802e6f6:	3330      	adds	r3, #48	@ 0x30
 802e6f8:	f802 3b01 	strb.w	r3, [r2], #1
 802e6fc:	e6a3      	b.n	802e446 <_svfprintf_r+0x676>
 802e6fe:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802e702:	e7f8      	b.n	802e6f6 <_svfprintf_r+0x926>
 802e704:	9b04      	ldr	r3, [sp, #16]
 802e706:	429e      	cmp	r6, r3
 802e708:	da0d      	bge.n	802e726 <_svfprintf_r+0x956>
 802e70a:	9b04      	ldr	r3, [sp, #16]
 802e70c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802e70e:	2e00      	cmp	r6, #0
 802e710:	eb03 0802 	add.w	r8, r3, r2
 802e714:	dc0c      	bgt.n	802e730 <_svfprintf_r+0x960>
 802e716:	f1c6 0301 	rsb	r3, r6, #1
 802e71a:	4498      	add	r8, r3
 802e71c:	e008      	b.n	802e730 <_svfprintf_r+0x960>
 802e71e:	b17b      	cbz	r3, 802e740 <_svfprintf_r+0x970>
 802e720:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e722:	3301      	adds	r3, #1
 802e724:	e7d8      	b.n	802e6d8 <_svfprintf_r+0x908>
 802e726:	07eb      	lsls	r3, r5, #31
 802e728:	d521      	bpl.n	802e76e <_svfprintf_r+0x99e>
 802e72a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e72c:	eb06 0803 	add.w	r8, r6, r3
 802e730:	2367      	movs	r3, #103	@ 0x67
 802e732:	e7d3      	b.n	802e6dc <_svfprintf_r+0x90c>
 802e734:	46b0      	mov	r8, r6
 802e736:	e7d0      	b.n	802e6da <_svfprintf_r+0x90a>
 802e738:	08038716 	.word	0x08038716
 802e73c:	08038706 	.word	0x08038706
 802e740:	2366      	movs	r3, #102	@ 0x66
 802e742:	9306      	str	r3, [sp, #24]
 802e744:	f04f 0801 	mov.w	r8, #1
 802e748:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802e74c:	9308      	str	r3, [sp, #32]
 802e74e:	d01f      	beq.n	802e790 <_svfprintf_r+0x9c0>
 802e750:	2700      	movs	r7, #0
 802e752:	2e00      	cmp	r6, #0
 802e754:	9708      	str	r7, [sp, #32]
 802e756:	f77f ae8a 	ble.w	802e46e <_svfprintf_r+0x69e>
 802e75a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e75c:	781b      	ldrb	r3, [r3, #0]
 802e75e:	2bff      	cmp	r3, #255	@ 0xff
 802e760:	d107      	bne.n	802e772 <_svfprintf_r+0x9a2>
 802e762:	9b08      	ldr	r3, [sp, #32]
 802e764:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802e766:	443b      	add	r3, r7
 802e768:	fb02 8803 	mla	r8, r2, r3, r8
 802e76c:	e67f      	b.n	802e46e <_svfprintf_r+0x69e>
 802e76e:	46b0      	mov	r8, r6
 802e770:	e7de      	b.n	802e730 <_svfprintf_r+0x960>
 802e772:	42b3      	cmp	r3, r6
 802e774:	daf5      	bge.n	802e762 <_svfprintf_r+0x992>
 802e776:	1af6      	subs	r6, r6, r3
 802e778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e77a:	785b      	ldrb	r3, [r3, #1]
 802e77c:	b133      	cbz	r3, 802e78c <_svfprintf_r+0x9bc>
 802e77e:	9b08      	ldr	r3, [sp, #32]
 802e780:	3301      	adds	r3, #1
 802e782:	9308      	str	r3, [sp, #32]
 802e784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e786:	3301      	adds	r3, #1
 802e788:	9309      	str	r3, [sp, #36]	@ 0x24
 802e78a:	e7e6      	b.n	802e75a <_svfprintf_r+0x98a>
 802e78c:	3701      	adds	r7, #1
 802e78e:	e7e4      	b.n	802e75a <_svfprintf_r+0x98a>
 802e790:	9f08      	ldr	r7, [sp, #32]
 802e792:	e66c      	b.n	802e46e <_svfprintf_r+0x69e>
 802e794:	232d      	movs	r3, #45	@ 0x2d
 802e796:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802e79a:	e66c      	b.n	802e476 <_svfprintf_r+0x6a6>
 802e79c:	06af      	lsls	r7, r5, #26
 802e79e:	d50a      	bpl.n	802e7b6 <_svfprintf_r+0x9e6>
 802e7a0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802e7a2:	6833      	ldr	r3, [r6, #0]
 802e7a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802e7a6:	17d2      	asrs	r2, r2, #31
 802e7a8:	e9c3 1200 	strd	r1, r2, [r3]
 802e7ac:	3604      	adds	r6, #4
 802e7ae:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 802e7b2:	f7ff bb46 	b.w	802de42 <_svfprintf_r+0x72>
 802e7b6:	06e8      	lsls	r0, r5, #27
 802e7b8:	d503      	bpl.n	802e7c2 <_svfprintf_r+0x9f2>
 802e7ba:	6833      	ldr	r3, [r6, #0]
 802e7bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802e7be:	601a      	str	r2, [r3, #0]
 802e7c0:	e7f4      	b.n	802e7ac <_svfprintf_r+0x9dc>
 802e7c2:	0669      	lsls	r1, r5, #25
 802e7c4:	d503      	bpl.n	802e7ce <_svfprintf_r+0x9fe>
 802e7c6:	6833      	ldr	r3, [r6, #0]
 802e7c8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802e7ca:	801a      	strh	r2, [r3, #0]
 802e7cc:	e7ee      	b.n	802e7ac <_svfprintf_r+0x9dc>
 802e7ce:	05aa      	lsls	r2, r5, #22
 802e7d0:	d5f3      	bpl.n	802e7ba <_svfprintf_r+0x9ea>
 802e7d2:	6833      	ldr	r3, [r6, #0]
 802e7d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802e7d6:	701a      	strb	r2, [r3, #0]
 802e7d8:	e7e8      	b.n	802e7ac <_svfprintf_r+0x9dc>
 802e7da:	f045 0510 	orr.w	r5, r5, #16
 802e7de:	f015 0320 	ands.w	r3, r5, #32
 802e7e2:	d020      	beq.n	802e826 <_svfprintf_r+0xa56>
 802e7e4:	3607      	adds	r6, #7
 802e7e6:	f026 0307 	bic.w	r3, r6, #7
 802e7ea:	461a      	mov	r2, r3
 802e7ec:	685f      	ldr	r7, [r3, #4]
 802e7ee:	f852 6b08 	ldr.w	r6, [r2], #8
 802e7f2:	9207      	str	r2, [sp, #28]
 802e7f4:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802e7f8:	2300      	movs	r3, #0
 802e7fa:	2200      	movs	r2, #0
 802e7fc:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802e800:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802e804:	f000 848c 	beq.w	802f120 <_svfprintf_r+0x1350>
 802e808:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802e80c:	9208      	str	r2, [sp, #32]
 802e80e:	ea56 0207 	orrs.w	r2, r6, r7
 802e812:	f040 848a 	bne.w	802f12a <_svfprintf_r+0x135a>
 802e816:	f1b8 0f00 	cmp.w	r8, #0
 802e81a:	f000 80db 	beq.w	802e9d4 <_svfprintf_r+0xc04>
 802e81e:	2b01      	cmp	r3, #1
 802e820:	f040 8486 	bne.w	802f130 <_svfprintf_r+0x1360>
 802e824:	e083      	b.n	802e92e <_svfprintf_r+0xb5e>
 802e826:	4632      	mov	r2, r6
 802e828:	f015 0710 	ands.w	r7, r5, #16
 802e82c:	f852 6b04 	ldr.w	r6, [r2], #4
 802e830:	9207      	str	r2, [sp, #28]
 802e832:	d001      	beq.n	802e838 <_svfprintf_r+0xa68>
 802e834:	461f      	mov	r7, r3
 802e836:	e7dd      	b.n	802e7f4 <_svfprintf_r+0xa24>
 802e838:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802e83c:	d001      	beq.n	802e842 <_svfprintf_r+0xa72>
 802e83e:	b2b6      	uxth	r6, r6
 802e840:	e7d8      	b.n	802e7f4 <_svfprintf_r+0xa24>
 802e842:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802e846:	d0d5      	beq.n	802e7f4 <_svfprintf_r+0xa24>
 802e848:	b2f6      	uxtb	r6, r6
 802e84a:	e7f3      	b.n	802e834 <_svfprintf_r+0xa64>
 802e84c:	4633      	mov	r3, r6
 802e84e:	2278      	movs	r2, #120	@ 0x78
 802e850:	f853 6b04 	ldr.w	r6, [r3], #4
 802e854:	9307      	str	r3, [sp, #28]
 802e856:	f647 0330 	movw	r3, #30768	@ 0x7830
 802e85a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802e85e:	4b94      	ldr	r3, [pc, #592]	@ (802eab0 <_svfprintf_r+0xce0>)
 802e860:	9319      	str	r3, [sp, #100]	@ 0x64
 802e862:	2700      	movs	r7, #0
 802e864:	f045 0502 	orr.w	r5, r5, #2
 802e868:	2302      	movs	r3, #2
 802e86a:	9206      	str	r2, [sp, #24]
 802e86c:	e7c5      	b.n	802e7fa <_svfprintf_r+0xa2a>
 802e86e:	4633      	mov	r3, r6
 802e870:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802e874:	f853 9b04 	ldr.w	r9, [r3], #4
 802e878:	9307      	str	r3, [sp, #28]
 802e87a:	f04f 0600 	mov.w	r6, #0
 802e87e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802e882:	d00f      	beq.n	802e8a4 <_svfprintf_r+0xad4>
 802e884:	4642      	mov	r2, r8
 802e886:	4631      	mov	r1, r6
 802e888:	4648      	mov	r0, r9
 802e88a:	f7e1 fcb9 	bl	8010200 <memchr>
 802e88e:	4682      	mov	sl, r0
 802e890:	2800      	cmp	r0, #0
 802e892:	f43f ac81 	beq.w	802e198 <_svfprintf_r+0x3c8>
 802e896:	eba0 0809 	sub.w	r8, r0, r9
 802e89a:	46b2      	mov	sl, r6
 802e89c:	9610      	str	r6, [sp, #64]	@ 0x40
 802e89e:	4637      	mov	r7, r6
 802e8a0:	9608      	str	r6, [sp, #32]
 802e8a2:	e5eb      	b.n	802e47c <_svfprintf_r+0x6ac>
 802e8a4:	4648      	mov	r0, r9
 802e8a6:	f7e1 fcfb 	bl	80102a0 <strlen>
 802e8aa:	46b2      	mov	sl, r6
 802e8ac:	4680      	mov	r8, r0
 802e8ae:	e473      	b.n	802e198 <_svfprintf_r+0x3c8>
 802e8b0:	f045 0510 	orr.w	r5, r5, #16
 802e8b4:	f015 0320 	ands.w	r3, r5, #32
 802e8b8:	d009      	beq.n	802e8ce <_svfprintf_r+0xafe>
 802e8ba:	3607      	adds	r6, #7
 802e8bc:	f026 0307 	bic.w	r3, r6, #7
 802e8c0:	461a      	mov	r2, r3
 802e8c2:	685f      	ldr	r7, [r3, #4]
 802e8c4:	f852 6b08 	ldr.w	r6, [r2], #8
 802e8c8:	9207      	str	r2, [sp, #28]
 802e8ca:	2301      	movs	r3, #1
 802e8cc:	e795      	b.n	802e7fa <_svfprintf_r+0xa2a>
 802e8ce:	4632      	mov	r2, r6
 802e8d0:	f015 0710 	ands.w	r7, r5, #16
 802e8d4:	f852 6b04 	ldr.w	r6, [r2], #4
 802e8d8:	9207      	str	r2, [sp, #28]
 802e8da:	d001      	beq.n	802e8e0 <_svfprintf_r+0xb10>
 802e8dc:	461f      	mov	r7, r3
 802e8de:	e7f4      	b.n	802e8ca <_svfprintf_r+0xafa>
 802e8e0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802e8e4:	d001      	beq.n	802e8ea <_svfprintf_r+0xb1a>
 802e8e6:	b2b6      	uxth	r6, r6
 802e8e8:	e7ef      	b.n	802e8ca <_svfprintf_r+0xafa>
 802e8ea:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802e8ee:	d0ec      	beq.n	802e8ca <_svfprintf_r+0xafa>
 802e8f0:	b2f6      	uxtb	r6, r6
 802e8f2:	e7f3      	b.n	802e8dc <_svfprintf_r+0xb0c>
 802e8f4:	4b6f      	ldr	r3, [pc, #444]	@ (802eab4 <_svfprintf_r+0xce4>)
 802e8f6:	f7ff bb39 	b.w	802df6c <_svfprintf_r+0x19c>
 802e8fa:	4632      	mov	r2, r6
 802e8fc:	f015 0710 	ands.w	r7, r5, #16
 802e900:	f852 6b04 	ldr.w	r6, [r2], #4
 802e904:	9207      	str	r2, [sp, #28]
 802e906:	d002      	beq.n	802e90e <_svfprintf_r+0xb3e>
 802e908:	461f      	mov	r7, r3
 802e90a:	f7ff bb3c 	b.w	802df86 <_svfprintf_r+0x1b6>
 802e90e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802e912:	d002      	beq.n	802e91a <_svfprintf_r+0xb4a>
 802e914:	b2b6      	uxth	r6, r6
 802e916:	f7ff bb36 	b.w	802df86 <_svfprintf_r+0x1b6>
 802e91a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802e91e:	f43f ab32 	beq.w	802df86 <_svfprintf_r+0x1b6>
 802e922:	b2f6      	uxtb	r6, r6
 802e924:	e7f0      	b.n	802e908 <_svfprintf_r+0xb38>
 802e926:	2e0a      	cmp	r6, #10
 802e928:	f177 0300 	sbcs.w	r3, r7, #0
 802e92c:	d207      	bcs.n	802e93e <_svfprintf_r+0xb6e>
 802e92e:	3630      	adds	r6, #48	@ 0x30
 802e930:	b2f6      	uxtb	r6, r6
 802e932:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802e936:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 802e93a:	f000 bc15 	b.w	802f168 <_svfprintf_r+0x1398>
 802e93e:	2300      	movs	r3, #0
 802e940:	9304      	str	r3, [sp, #16]
 802e942:	9b08      	ldr	r3, [sp, #32]
 802e944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802e948:	ad52      	add	r5, sp, #328	@ 0x148
 802e94a:	9310      	str	r3, [sp, #64]	@ 0x40
 802e94c:	220a      	movs	r2, #10
 802e94e:	2300      	movs	r3, #0
 802e950:	4630      	mov	r0, r6
 802e952:	4639      	mov	r1, r7
 802e954:	f7e2 fa00 	bl	8010d58 <__aeabi_uldivmod>
 802e958:	9b04      	ldr	r3, [sp, #16]
 802e95a:	9011      	str	r0, [sp, #68]	@ 0x44
 802e95c:	3301      	adds	r3, #1
 802e95e:	9304      	str	r3, [sp, #16]
 802e960:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802e962:	3230      	adds	r2, #48	@ 0x30
 802e964:	468a      	mov	sl, r1
 802e966:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 802e96a:	f805 2c01 	strb.w	r2, [r5, #-1]
 802e96e:	b1d3      	cbz	r3, 802e9a6 <_svfprintf_r+0xbd6>
 802e970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e972:	9a04      	ldr	r2, [sp, #16]
 802e974:	781b      	ldrb	r3, [r3, #0]
 802e976:	429a      	cmp	r2, r3
 802e978:	d115      	bne.n	802e9a6 <_svfprintf_r+0xbd6>
 802e97a:	2aff      	cmp	r2, #255	@ 0xff
 802e97c:	d013      	beq.n	802e9a6 <_svfprintf_r+0xbd6>
 802e97e:	2e0a      	cmp	r6, #10
 802e980:	f177 0300 	sbcs.w	r3, r7, #0
 802e984:	d30f      	bcc.n	802e9a6 <_svfprintf_r+0xbd6>
 802e986:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802e988:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802e98a:	eba9 0903 	sub.w	r9, r9, r3
 802e98e:	461a      	mov	r2, r3
 802e990:	4648      	mov	r0, r9
 802e992:	f7fb f8ec 	bl	8029b6e <strncpy>
 802e996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e998:	785b      	ldrb	r3, [r3, #1]
 802e99a:	b11b      	cbz	r3, 802e9a4 <_svfprintf_r+0xbd4>
 802e99c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e99e:	3301      	adds	r3, #1
 802e9a0:	9309      	str	r3, [sp, #36]	@ 0x24
 802e9a2:	2300      	movs	r3, #0
 802e9a4:	9304      	str	r3, [sp, #16]
 802e9a6:	2e0a      	cmp	r6, #10
 802e9a8:	f177 0700 	sbcs.w	r7, r7, #0
 802e9ac:	f0c0 83dc 	bcc.w	802f168 <_svfprintf_r+0x1398>
 802e9b0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802e9b2:	4657      	mov	r7, sl
 802e9b4:	464d      	mov	r5, r9
 802e9b6:	e7c9      	b.n	802e94c <_svfprintf_r+0xb7c>
 802e9b8:	f006 030f 	and.w	r3, r6, #15
 802e9bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802e9be:	0936      	lsrs	r6, r6, #4
 802e9c0:	5cd3      	ldrb	r3, [r2, r3]
 802e9c2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802e9c6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802e9ca:	093f      	lsrs	r7, r7, #4
 802e9cc:	ea56 0307 	orrs.w	r3, r6, r7
 802e9d0:	d1f2      	bne.n	802e9b8 <_svfprintf_r+0xbe8>
 802e9d2:	e3c9      	b.n	802f168 <_svfprintf_r+0x1398>
 802e9d4:	b91b      	cbnz	r3, 802e9de <_svfprintf_r+0xc0e>
 802e9d6:	07e9      	lsls	r1, r5, #31
 802e9d8:	d501      	bpl.n	802e9de <_svfprintf_r+0xc0e>
 802e9da:	2630      	movs	r6, #48	@ 0x30
 802e9dc:	e7a9      	b.n	802e932 <_svfprintf_r+0xb62>
 802e9de:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 802e9e2:	e3c1      	b.n	802f168 <_svfprintf_r+0x1398>
 802e9e4:	9b06      	ldr	r3, [sp, #24]
 802e9e6:	2b00      	cmp	r3, #0
 802e9e8:	f000 838f 	beq.w	802f10a <_svfprintf_r+0x133a>
 802e9ec:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802e9f0:	2300      	movs	r3, #0
 802e9f2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802e9f6:	9607      	str	r6, [sp, #28]
 802e9f8:	f7ff bb63 	b.w	802e0c2 <_svfprintf_r+0x2f2>
 802e9fc:	2010      	movs	r0, #16
 802e9fe:	4403      	add	r3, r0
 802ea00:	2a07      	cmp	r2, #7
 802ea02:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ea06:	6060      	str	r0, [r4, #4]
 802ea08:	dd08      	ble.n	802ea1c <_svfprintf_r+0xc4c>
 802ea0a:	9803      	ldr	r0, [sp, #12]
 802ea0c:	aa26      	add	r2, sp, #152	@ 0x98
 802ea0e:	4659      	mov	r1, fp
 802ea10:	f7fd fd66 	bl	802c4e0 <__ssprint_r>
 802ea14:	2800      	cmp	r0, #0
 802ea16:	f040 8356 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ea1a:	a929      	add	r1, sp, #164	@ 0xa4
 802ea1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ea1e:	3b10      	subs	r3, #16
 802ea20:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ea22:	460c      	mov	r4, r1
 802ea24:	e546      	b.n	802e4b4 <_svfprintf_r+0x6e4>
 802ea26:	460c      	mov	r4, r1
 802ea28:	e561      	b.n	802e4ee <_svfprintf_r+0x71e>
 802ea2a:	9803      	ldr	r0, [sp, #12]
 802ea2c:	aa26      	add	r2, sp, #152	@ 0x98
 802ea2e:	4659      	mov	r1, fp
 802ea30:	f7fd fd56 	bl	802c4e0 <__ssprint_r>
 802ea34:	2800      	cmp	r0, #0
 802ea36:	f040 8346 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ea3a:	ac29      	add	r4, sp, #164	@ 0xa4
 802ea3c:	e569      	b.n	802e512 <_svfprintf_r+0x742>
 802ea3e:	9803      	ldr	r0, [sp, #12]
 802ea40:	aa26      	add	r2, sp, #152	@ 0x98
 802ea42:	4659      	mov	r1, fp
 802ea44:	f7fd fd4c 	bl	802c4e0 <__ssprint_r>
 802ea48:	2800      	cmp	r0, #0
 802ea4a:	f040 833c 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ea4e:	ac29      	add	r4, sp, #164	@ 0xa4
 802ea50:	e56f      	b.n	802e532 <_svfprintf_r+0x762>
 802ea52:	2010      	movs	r0, #16
 802ea54:	4403      	add	r3, r0
 802ea56:	2a07      	cmp	r2, #7
 802ea58:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ea5c:	6060      	str	r0, [r4, #4]
 802ea5e:	dd08      	ble.n	802ea72 <_svfprintf_r+0xca2>
 802ea60:	9803      	ldr	r0, [sp, #12]
 802ea62:	aa26      	add	r2, sp, #152	@ 0x98
 802ea64:	4659      	mov	r1, fp
 802ea66:	f7fd fd3b 	bl	802c4e0 <__ssprint_r>
 802ea6a:	2800      	cmp	r0, #0
 802ea6c:	f040 832b 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ea70:	a929      	add	r1, sp, #164	@ 0xa4
 802ea72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ea74:	3b10      	subs	r3, #16
 802ea76:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ea78:	460c      	mov	r4, r1
 802ea7a:	e563      	b.n	802e544 <_svfprintf_r+0x774>
 802ea7c:	460c      	mov	r4, r1
 802ea7e:	e57e      	b.n	802e57e <_svfprintf_r+0x7ae>
 802ea80:	2010      	movs	r0, #16
 802ea82:	4403      	add	r3, r0
 802ea84:	2a07      	cmp	r2, #7
 802ea86:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ea8a:	6060      	str	r0, [r4, #4]
 802ea8c:	dd08      	ble.n	802eaa0 <_svfprintf_r+0xcd0>
 802ea8e:	9803      	ldr	r0, [sp, #12]
 802ea90:	aa26      	add	r2, sp, #152	@ 0x98
 802ea92:	4659      	mov	r1, fp
 802ea94:	f7fd fd24 	bl	802c4e0 <__ssprint_r>
 802ea98:	2800      	cmp	r0, #0
 802ea9a:	f040 8314 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ea9e:	a929      	add	r1, sp, #164	@ 0xa4
 802eaa0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802eaa2:	3b10      	subs	r3, #16
 802eaa4:	9310      	str	r3, [sp, #64]	@ 0x40
 802eaa6:	460c      	mov	r4, r1
 802eaa8:	e56f      	b.n	802e58a <_svfprintf_r+0x7ba>
 802eaaa:	460c      	mov	r4, r1
 802eaac:	e58a      	b.n	802e5c4 <_svfprintf_r+0x7f4>
 802eaae:	bf00      	nop
 802eab0:	0803819f 	.word	0x0803819f
 802eab4:	080381b0 	.word	0x080381b0
 802eab8:	9b06      	ldr	r3, [sp, #24]
 802eaba:	2b65      	cmp	r3, #101	@ 0x65
 802eabc:	f340 8246 	ble.w	802ef4c <_svfprintf_r+0x117c>
 802eac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802eac4:	2200      	movs	r2, #0
 802eac6:	2300      	movs	r3, #0
 802eac8:	f7e2 f816 	bl	8010af8 <__aeabi_dcmpeq>
 802eacc:	2800      	cmp	r0, #0
 802eace:	d06a      	beq.n	802eba6 <_svfprintf_r+0xdd6>
 802ead0:	4b73      	ldr	r3, [pc, #460]	@ (802eca0 <_svfprintf_r+0xed0>)
 802ead2:	6023      	str	r3, [r4, #0]
 802ead4:	2301      	movs	r3, #1
 802ead6:	6063      	str	r3, [r4, #4]
 802ead8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802eada:	3301      	adds	r3, #1
 802eadc:	9328      	str	r3, [sp, #160]	@ 0xa0
 802eade:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802eae0:	3301      	adds	r3, #1
 802eae2:	2b07      	cmp	r3, #7
 802eae4:	9327      	str	r3, [sp, #156]	@ 0x9c
 802eae6:	dc37      	bgt.n	802eb58 <_svfprintf_r+0xd88>
 802eae8:	3408      	adds	r4, #8
 802eaea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802eaec:	9a04      	ldr	r2, [sp, #16]
 802eaee:	4293      	cmp	r3, r2
 802eaf0:	db02      	blt.n	802eaf8 <_svfprintf_r+0xd28>
 802eaf2:	07ef      	lsls	r7, r5, #31
 802eaf4:	f57f ad76 	bpl.w	802e5e4 <_svfprintf_r+0x814>
 802eaf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802eafa:	6023      	str	r3, [r4, #0]
 802eafc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802eafe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802eb00:	6063      	str	r3, [r4, #4]
 802eb02:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802eb04:	4413      	add	r3, r2
 802eb06:	9328      	str	r3, [sp, #160]	@ 0xa0
 802eb08:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802eb0a:	3301      	adds	r3, #1
 802eb0c:	2b07      	cmp	r3, #7
 802eb0e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802eb10:	dc2c      	bgt.n	802eb6c <_svfprintf_r+0xd9c>
 802eb12:	3408      	adds	r4, #8
 802eb14:	9b04      	ldr	r3, [sp, #16]
 802eb16:	1e5e      	subs	r6, r3, #1
 802eb18:	2e00      	cmp	r6, #0
 802eb1a:	f77f ad63 	ble.w	802e5e4 <_svfprintf_r+0x814>
 802eb1e:	4f61      	ldr	r7, [pc, #388]	@ (802eca4 <_svfprintf_r+0xed4>)
 802eb20:	f04f 0810 	mov.w	r8, #16
 802eb24:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802eb28:	2e10      	cmp	r6, #16
 802eb2a:	f103 0301 	add.w	r3, r3, #1
 802eb2e:	f104 0108 	add.w	r1, r4, #8
 802eb32:	6027      	str	r7, [r4, #0]
 802eb34:	dc24      	bgt.n	802eb80 <_svfprintf_r+0xdb0>
 802eb36:	6066      	str	r6, [r4, #4]
 802eb38:	2b07      	cmp	r3, #7
 802eb3a:	4416      	add	r6, r2
 802eb3c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802eb40:	f340 82a0 	ble.w	802f084 <_svfprintf_r+0x12b4>
 802eb44:	9803      	ldr	r0, [sp, #12]
 802eb46:	aa26      	add	r2, sp, #152	@ 0x98
 802eb48:	4659      	mov	r1, fp
 802eb4a:	f7fd fcc9 	bl	802c4e0 <__ssprint_r>
 802eb4e:	2800      	cmp	r0, #0
 802eb50:	f040 82b9 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802eb54:	ac29      	add	r4, sp, #164	@ 0xa4
 802eb56:	e545      	b.n	802e5e4 <_svfprintf_r+0x814>
 802eb58:	9803      	ldr	r0, [sp, #12]
 802eb5a:	aa26      	add	r2, sp, #152	@ 0x98
 802eb5c:	4659      	mov	r1, fp
 802eb5e:	f7fd fcbf 	bl	802c4e0 <__ssprint_r>
 802eb62:	2800      	cmp	r0, #0
 802eb64:	f040 82af 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802eb68:	ac29      	add	r4, sp, #164	@ 0xa4
 802eb6a:	e7be      	b.n	802eaea <_svfprintf_r+0xd1a>
 802eb6c:	9803      	ldr	r0, [sp, #12]
 802eb6e:	aa26      	add	r2, sp, #152	@ 0x98
 802eb70:	4659      	mov	r1, fp
 802eb72:	f7fd fcb5 	bl	802c4e0 <__ssprint_r>
 802eb76:	2800      	cmp	r0, #0
 802eb78:	f040 82a5 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802eb7c:	ac29      	add	r4, sp, #164	@ 0xa4
 802eb7e:	e7c9      	b.n	802eb14 <_svfprintf_r+0xd44>
 802eb80:	3210      	adds	r2, #16
 802eb82:	2b07      	cmp	r3, #7
 802eb84:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802eb88:	f8c4 8004 	str.w	r8, [r4, #4]
 802eb8c:	dd08      	ble.n	802eba0 <_svfprintf_r+0xdd0>
 802eb8e:	9803      	ldr	r0, [sp, #12]
 802eb90:	aa26      	add	r2, sp, #152	@ 0x98
 802eb92:	4659      	mov	r1, fp
 802eb94:	f7fd fca4 	bl	802c4e0 <__ssprint_r>
 802eb98:	2800      	cmp	r0, #0
 802eb9a:	f040 8294 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802eb9e:	a929      	add	r1, sp, #164	@ 0xa4
 802eba0:	3e10      	subs	r6, #16
 802eba2:	460c      	mov	r4, r1
 802eba4:	e7be      	b.n	802eb24 <_svfprintf_r+0xd54>
 802eba6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802eba8:	2b00      	cmp	r3, #0
 802ebaa:	dc7d      	bgt.n	802eca8 <_svfprintf_r+0xed8>
 802ebac:	4b3c      	ldr	r3, [pc, #240]	@ (802eca0 <_svfprintf_r+0xed0>)
 802ebae:	6023      	str	r3, [r4, #0]
 802ebb0:	2301      	movs	r3, #1
 802ebb2:	6063      	str	r3, [r4, #4]
 802ebb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ebb6:	3301      	adds	r3, #1
 802ebb8:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ebba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ebbc:	3301      	adds	r3, #1
 802ebbe:	2b07      	cmp	r3, #7
 802ebc0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ebc2:	dc46      	bgt.n	802ec52 <_svfprintf_r+0xe82>
 802ebc4:	3408      	adds	r4, #8
 802ebc6:	9904      	ldr	r1, [sp, #16]
 802ebc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ebca:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802ebcc:	430b      	orrs	r3, r1
 802ebce:	f005 0101 	and.w	r1, r5, #1
 802ebd2:	430b      	orrs	r3, r1
 802ebd4:	f43f ad06 	beq.w	802e5e4 <_svfprintf_r+0x814>
 802ebd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ebda:	6023      	str	r3, [r4, #0]
 802ebdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ebde:	6063      	str	r3, [r4, #4]
 802ebe0:	441a      	add	r2, r3
 802ebe2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ebe4:	9228      	str	r2, [sp, #160]	@ 0xa0
 802ebe6:	3301      	adds	r3, #1
 802ebe8:	2b07      	cmp	r3, #7
 802ebea:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ebec:	dc3b      	bgt.n	802ec66 <_svfprintf_r+0xe96>
 802ebee:	f104 0308 	add.w	r3, r4, #8
 802ebf2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802ebf4:	2e00      	cmp	r6, #0
 802ebf6:	da1b      	bge.n	802ec30 <_svfprintf_r+0xe60>
 802ebf8:	4f2a      	ldr	r7, [pc, #168]	@ (802eca4 <_svfprintf_r+0xed4>)
 802ebfa:	4276      	negs	r6, r6
 802ebfc:	461a      	mov	r2, r3
 802ebfe:	2410      	movs	r4, #16
 802ec00:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802ec04:	2e10      	cmp	r6, #16
 802ec06:	f101 0101 	add.w	r1, r1, #1
 802ec0a:	f103 0308 	add.w	r3, r3, #8
 802ec0e:	6017      	str	r7, [r2, #0]
 802ec10:	dc33      	bgt.n	802ec7a <_svfprintf_r+0xeaa>
 802ec12:	6056      	str	r6, [r2, #4]
 802ec14:	2907      	cmp	r1, #7
 802ec16:	4406      	add	r6, r0
 802ec18:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802ec1c:	dd08      	ble.n	802ec30 <_svfprintf_r+0xe60>
 802ec1e:	9803      	ldr	r0, [sp, #12]
 802ec20:	aa26      	add	r2, sp, #152	@ 0x98
 802ec22:	4659      	mov	r1, fp
 802ec24:	f7fd fc5c 	bl	802c4e0 <__ssprint_r>
 802ec28:	2800      	cmp	r0, #0
 802ec2a:	f040 824c 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ec2e:	ab29      	add	r3, sp, #164	@ 0xa4
 802ec30:	9a04      	ldr	r2, [sp, #16]
 802ec32:	9904      	ldr	r1, [sp, #16]
 802ec34:	605a      	str	r2, [r3, #4]
 802ec36:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802ec38:	f8c3 9000 	str.w	r9, [r3]
 802ec3c:	440a      	add	r2, r1
 802ec3e:	9228      	str	r2, [sp, #160]	@ 0xa0
 802ec40:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802ec42:	3201      	adds	r2, #1
 802ec44:	2a07      	cmp	r2, #7
 802ec46:	9227      	str	r2, [sp, #156]	@ 0x9c
 802ec48:	f73f af7c 	bgt.w	802eb44 <_svfprintf_r+0xd74>
 802ec4c:	f103 0408 	add.w	r4, r3, #8
 802ec50:	e4c8      	b.n	802e5e4 <_svfprintf_r+0x814>
 802ec52:	9803      	ldr	r0, [sp, #12]
 802ec54:	aa26      	add	r2, sp, #152	@ 0x98
 802ec56:	4659      	mov	r1, fp
 802ec58:	f7fd fc42 	bl	802c4e0 <__ssprint_r>
 802ec5c:	2800      	cmp	r0, #0
 802ec5e:	f040 8232 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ec62:	ac29      	add	r4, sp, #164	@ 0xa4
 802ec64:	e7af      	b.n	802ebc6 <_svfprintf_r+0xdf6>
 802ec66:	9803      	ldr	r0, [sp, #12]
 802ec68:	aa26      	add	r2, sp, #152	@ 0x98
 802ec6a:	4659      	mov	r1, fp
 802ec6c:	f7fd fc38 	bl	802c4e0 <__ssprint_r>
 802ec70:	2800      	cmp	r0, #0
 802ec72:	f040 8228 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ec76:	ab29      	add	r3, sp, #164	@ 0xa4
 802ec78:	e7bb      	b.n	802ebf2 <_svfprintf_r+0xe22>
 802ec7a:	3010      	adds	r0, #16
 802ec7c:	2907      	cmp	r1, #7
 802ec7e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802ec82:	6054      	str	r4, [r2, #4]
 802ec84:	dd08      	ble.n	802ec98 <_svfprintf_r+0xec8>
 802ec86:	9803      	ldr	r0, [sp, #12]
 802ec88:	aa26      	add	r2, sp, #152	@ 0x98
 802ec8a:	4659      	mov	r1, fp
 802ec8c:	f7fd fc28 	bl	802c4e0 <__ssprint_r>
 802ec90:	2800      	cmp	r0, #0
 802ec92:	f040 8218 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ec96:	ab29      	add	r3, sp, #164	@ 0xa4
 802ec98:	3e10      	subs	r6, #16
 802ec9a:	461a      	mov	r2, r3
 802ec9c:	e7b0      	b.n	802ec00 <_svfprintf_r+0xe30>
 802ec9e:	bf00      	nop
 802eca0:	080381c1 	.word	0x080381c1
 802eca4:	08038706 	.word	0x08038706
 802eca8:	9b04      	ldr	r3, [sp, #16]
 802ecaa:	444b      	add	r3, r9
 802ecac:	9306      	str	r3, [sp, #24]
 802ecae:	9b04      	ldr	r3, [sp, #16]
 802ecb0:	42b3      	cmp	r3, r6
 802ecb2:	bfa8      	it	ge
 802ecb4:	4633      	movge	r3, r6
 802ecb6:	2b00      	cmp	r3, #0
 802ecb8:	4698      	mov	r8, r3
 802ecba:	dd0b      	ble.n	802ecd4 <_svfprintf_r+0xf04>
 802ecbc:	e9c4 9300 	strd	r9, r3, [r4]
 802ecc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ecc2:	4443      	add	r3, r8
 802ecc4:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ecc6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ecc8:	3301      	adds	r3, #1
 802ecca:	2b07      	cmp	r3, #7
 802eccc:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ecce:	f300 8089 	bgt.w	802ede4 <_svfprintf_r+0x1014>
 802ecd2:	3408      	adds	r4, #8
 802ecd4:	4643      	mov	r3, r8
 802ecd6:	2b00      	cmp	r3, #0
 802ecd8:	bfac      	ite	ge
 802ecda:	eba6 0808 	subge.w	r8, r6, r8
 802ecde:	46b0      	movlt	r8, r6
 802ece0:	f1b8 0f00 	cmp.w	r8, #0
 802ece4:	dd1b      	ble.n	802ed1e <_svfprintf_r+0xf4e>
 802ece6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802ecea:	4897      	ldr	r0, [pc, #604]	@ (802ef48 <_svfprintf_r+0x1178>)
 802ecec:	6020      	str	r0, [r4, #0]
 802ecee:	f1b8 0f10 	cmp.w	r8, #16
 802ecf2:	f102 0201 	add.w	r2, r2, #1
 802ecf6:	f104 0108 	add.w	r1, r4, #8
 802ecfa:	dc7d      	bgt.n	802edf8 <_svfprintf_r+0x1028>
 802ecfc:	4443      	add	r3, r8
 802ecfe:	2a07      	cmp	r2, #7
 802ed00:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ed04:	f8c4 8004 	str.w	r8, [r4, #4]
 802ed08:	f340 808a 	ble.w	802ee20 <_svfprintf_r+0x1050>
 802ed0c:	9803      	ldr	r0, [sp, #12]
 802ed0e:	aa26      	add	r2, sp, #152	@ 0x98
 802ed10:	4659      	mov	r1, fp
 802ed12:	f7fd fbe5 	bl	802c4e0 <__ssprint_r>
 802ed16:	2800      	cmp	r0, #0
 802ed18:	f040 81d5 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ed1c:	ac29      	add	r4, sp, #164	@ 0xa4
 802ed1e:	eb09 0806 	add.w	r8, r9, r6
 802ed22:	056e      	lsls	r6, r5, #21
 802ed24:	d508      	bpl.n	802ed38 <_svfprintf_r+0xf68>
 802ed26:	9b08      	ldr	r3, [sp, #32]
 802ed28:	2b00      	cmp	r3, #0
 802ed2a:	d17b      	bne.n	802ee24 <_svfprintf_r+0x1054>
 802ed2c:	2f00      	cmp	r7, #0
 802ed2e:	d17b      	bne.n	802ee28 <_svfprintf_r+0x1058>
 802ed30:	9b06      	ldr	r3, [sp, #24]
 802ed32:	4598      	cmp	r8, r3
 802ed34:	bf28      	it	cs
 802ed36:	4698      	movcs	r8, r3
 802ed38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ed3a:	9a04      	ldr	r2, [sp, #16]
 802ed3c:	4293      	cmp	r3, r2
 802ed3e:	db01      	blt.n	802ed44 <_svfprintf_r+0xf74>
 802ed40:	07e8      	lsls	r0, r5, #31
 802ed42:	d50e      	bpl.n	802ed62 <_svfprintf_r+0xf92>
 802ed44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ed46:	6023      	str	r3, [r4, #0]
 802ed48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ed4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802ed4c:	6063      	str	r3, [r4, #4]
 802ed4e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ed50:	4413      	add	r3, r2
 802ed52:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ed54:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ed56:	3301      	adds	r3, #1
 802ed58:	2b07      	cmp	r3, #7
 802ed5a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ed5c:	f300 80df 	bgt.w	802ef1e <_svfprintf_r+0x114e>
 802ed60:	3408      	adds	r4, #8
 802ed62:	9b04      	ldr	r3, [sp, #16]
 802ed64:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802ed66:	1bdf      	subs	r7, r3, r7
 802ed68:	9b06      	ldr	r3, [sp, #24]
 802ed6a:	eba3 0308 	sub.w	r3, r3, r8
 802ed6e:	429f      	cmp	r7, r3
 802ed70:	bfa8      	it	ge
 802ed72:	461f      	movge	r7, r3
 802ed74:	2f00      	cmp	r7, #0
 802ed76:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ed78:	dd0a      	ble.n	802ed90 <_svfprintf_r+0xfc0>
 802ed7a:	443b      	add	r3, r7
 802ed7c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ed7e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ed80:	3301      	adds	r3, #1
 802ed82:	2b07      	cmp	r3, #7
 802ed84:	e9c4 8700 	strd	r8, r7, [r4]
 802ed88:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ed8a:	f300 80d2 	bgt.w	802ef32 <_svfprintf_r+0x1162>
 802ed8e:	3408      	adds	r4, #8
 802ed90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802ed92:	9b04      	ldr	r3, [sp, #16]
 802ed94:	2f00      	cmp	r7, #0
 802ed96:	eba3 0606 	sub.w	r6, r3, r6
 802ed9a:	bfa8      	it	ge
 802ed9c:	1bf6      	subge	r6, r6, r7
 802ed9e:	2e00      	cmp	r6, #0
 802eda0:	f77f ac20 	ble.w	802e5e4 <_svfprintf_r+0x814>
 802eda4:	4f68      	ldr	r7, [pc, #416]	@ (802ef48 <_svfprintf_r+0x1178>)
 802eda6:	f04f 0810 	mov.w	r8, #16
 802edaa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802edae:	2e10      	cmp	r6, #16
 802edb0:	f103 0301 	add.w	r3, r3, #1
 802edb4:	f104 0108 	add.w	r1, r4, #8
 802edb8:	6027      	str	r7, [r4, #0]
 802edba:	f77f aebc 	ble.w	802eb36 <_svfprintf_r+0xd66>
 802edbe:	3210      	adds	r2, #16
 802edc0:	2b07      	cmp	r3, #7
 802edc2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802edc6:	f8c4 8004 	str.w	r8, [r4, #4]
 802edca:	dd08      	ble.n	802edde <_svfprintf_r+0x100e>
 802edcc:	9803      	ldr	r0, [sp, #12]
 802edce:	aa26      	add	r2, sp, #152	@ 0x98
 802edd0:	4659      	mov	r1, fp
 802edd2:	f7fd fb85 	bl	802c4e0 <__ssprint_r>
 802edd6:	2800      	cmp	r0, #0
 802edd8:	f040 8175 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802eddc:	a929      	add	r1, sp, #164	@ 0xa4
 802edde:	3e10      	subs	r6, #16
 802ede0:	460c      	mov	r4, r1
 802ede2:	e7e2      	b.n	802edaa <_svfprintf_r+0xfda>
 802ede4:	9803      	ldr	r0, [sp, #12]
 802ede6:	aa26      	add	r2, sp, #152	@ 0x98
 802ede8:	4659      	mov	r1, fp
 802edea:	f7fd fb79 	bl	802c4e0 <__ssprint_r>
 802edee:	2800      	cmp	r0, #0
 802edf0:	f040 8169 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802edf4:	ac29      	add	r4, sp, #164	@ 0xa4
 802edf6:	e76d      	b.n	802ecd4 <_svfprintf_r+0xf04>
 802edf8:	2010      	movs	r0, #16
 802edfa:	4403      	add	r3, r0
 802edfc:	2a07      	cmp	r2, #7
 802edfe:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ee02:	6060      	str	r0, [r4, #4]
 802ee04:	dd08      	ble.n	802ee18 <_svfprintf_r+0x1048>
 802ee06:	9803      	ldr	r0, [sp, #12]
 802ee08:	aa26      	add	r2, sp, #152	@ 0x98
 802ee0a:	4659      	mov	r1, fp
 802ee0c:	f7fd fb68 	bl	802c4e0 <__ssprint_r>
 802ee10:	2800      	cmp	r0, #0
 802ee12:	f040 8158 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ee16:	a929      	add	r1, sp, #164	@ 0xa4
 802ee18:	f1a8 0810 	sub.w	r8, r8, #16
 802ee1c:	460c      	mov	r4, r1
 802ee1e:	e762      	b.n	802ece6 <_svfprintf_r+0xf16>
 802ee20:	460c      	mov	r4, r1
 802ee22:	e77c      	b.n	802ed1e <_svfprintf_r+0xf4e>
 802ee24:	2f00      	cmp	r7, #0
 802ee26:	d04a      	beq.n	802eebe <_svfprintf_r+0x10ee>
 802ee28:	3f01      	subs	r7, #1
 802ee2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802ee2c:	6023      	str	r3, [r4, #0]
 802ee2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802ee30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802ee32:	6063      	str	r3, [r4, #4]
 802ee34:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ee36:	4413      	add	r3, r2
 802ee38:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ee3a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ee3c:	3301      	adds	r3, #1
 802ee3e:	2b07      	cmp	r3, #7
 802ee40:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ee42:	dc43      	bgt.n	802eecc <_svfprintf_r+0x10fc>
 802ee44:	3408      	adds	r4, #8
 802ee46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ee48:	781a      	ldrb	r2, [r3, #0]
 802ee4a:	9b06      	ldr	r3, [sp, #24]
 802ee4c:	eba3 0308 	sub.w	r3, r3, r8
 802ee50:	429a      	cmp	r2, r3
 802ee52:	bfa8      	it	ge
 802ee54:	461a      	movge	r2, r3
 802ee56:	2a00      	cmp	r2, #0
 802ee58:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ee5a:	4691      	mov	r9, r2
 802ee5c:	dd09      	ble.n	802ee72 <_svfprintf_r+0x10a2>
 802ee5e:	4413      	add	r3, r2
 802ee60:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ee62:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ee64:	3301      	adds	r3, #1
 802ee66:	2b07      	cmp	r3, #7
 802ee68:	e9c4 8200 	strd	r8, r2, [r4]
 802ee6c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ee6e:	dc37      	bgt.n	802eee0 <_svfprintf_r+0x1110>
 802ee70:	3408      	adds	r4, #8
 802ee72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ee74:	781e      	ldrb	r6, [r3, #0]
 802ee76:	f1b9 0f00 	cmp.w	r9, #0
 802ee7a:	bfa8      	it	ge
 802ee7c:	eba6 0609 	subge.w	r6, r6, r9
 802ee80:	2e00      	cmp	r6, #0
 802ee82:	dd18      	ble.n	802eeb6 <_svfprintf_r+0x10e6>
 802ee84:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802ee88:	482f      	ldr	r0, [pc, #188]	@ (802ef48 <_svfprintf_r+0x1178>)
 802ee8a:	6020      	str	r0, [r4, #0]
 802ee8c:	2e10      	cmp	r6, #16
 802ee8e:	f103 0301 	add.w	r3, r3, #1
 802ee92:	f104 0108 	add.w	r1, r4, #8
 802ee96:	dc2d      	bgt.n	802eef4 <_svfprintf_r+0x1124>
 802ee98:	6066      	str	r6, [r4, #4]
 802ee9a:	2b07      	cmp	r3, #7
 802ee9c:	4416      	add	r6, r2
 802ee9e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802eea2:	dd3a      	ble.n	802ef1a <_svfprintf_r+0x114a>
 802eea4:	9803      	ldr	r0, [sp, #12]
 802eea6:	aa26      	add	r2, sp, #152	@ 0x98
 802eea8:	4659      	mov	r1, fp
 802eeaa:	f7fd fb19 	bl	802c4e0 <__ssprint_r>
 802eeae:	2800      	cmp	r0, #0
 802eeb0:	f040 8109 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802eeb4:	ac29      	add	r4, sp, #164	@ 0xa4
 802eeb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802eeb8:	781b      	ldrb	r3, [r3, #0]
 802eeba:	4498      	add	r8, r3
 802eebc:	e733      	b.n	802ed26 <_svfprintf_r+0xf56>
 802eebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802eec0:	3b01      	subs	r3, #1
 802eec2:	9309      	str	r3, [sp, #36]	@ 0x24
 802eec4:	9b08      	ldr	r3, [sp, #32]
 802eec6:	3b01      	subs	r3, #1
 802eec8:	9308      	str	r3, [sp, #32]
 802eeca:	e7ae      	b.n	802ee2a <_svfprintf_r+0x105a>
 802eecc:	9803      	ldr	r0, [sp, #12]
 802eece:	aa26      	add	r2, sp, #152	@ 0x98
 802eed0:	4659      	mov	r1, fp
 802eed2:	f7fd fb05 	bl	802c4e0 <__ssprint_r>
 802eed6:	2800      	cmp	r0, #0
 802eed8:	f040 80f5 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802eedc:	ac29      	add	r4, sp, #164	@ 0xa4
 802eede:	e7b2      	b.n	802ee46 <_svfprintf_r+0x1076>
 802eee0:	9803      	ldr	r0, [sp, #12]
 802eee2:	aa26      	add	r2, sp, #152	@ 0x98
 802eee4:	4659      	mov	r1, fp
 802eee6:	f7fd fafb 	bl	802c4e0 <__ssprint_r>
 802eeea:	2800      	cmp	r0, #0
 802eeec:	f040 80eb 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802eef0:	ac29      	add	r4, sp, #164	@ 0xa4
 802eef2:	e7be      	b.n	802ee72 <_svfprintf_r+0x10a2>
 802eef4:	2010      	movs	r0, #16
 802eef6:	4402      	add	r2, r0
 802eef8:	2b07      	cmp	r3, #7
 802eefa:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802eefe:	6060      	str	r0, [r4, #4]
 802ef00:	dd08      	ble.n	802ef14 <_svfprintf_r+0x1144>
 802ef02:	9803      	ldr	r0, [sp, #12]
 802ef04:	aa26      	add	r2, sp, #152	@ 0x98
 802ef06:	4659      	mov	r1, fp
 802ef08:	f7fd faea 	bl	802c4e0 <__ssprint_r>
 802ef0c:	2800      	cmp	r0, #0
 802ef0e:	f040 80da 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ef12:	a929      	add	r1, sp, #164	@ 0xa4
 802ef14:	3e10      	subs	r6, #16
 802ef16:	460c      	mov	r4, r1
 802ef18:	e7b4      	b.n	802ee84 <_svfprintf_r+0x10b4>
 802ef1a:	460c      	mov	r4, r1
 802ef1c:	e7cb      	b.n	802eeb6 <_svfprintf_r+0x10e6>
 802ef1e:	9803      	ldr	r0, [sp, #12]
 802ef20:	aa26      	add	r2, sp, #152	@ 0x98
 802ef22:	4659      	mov	r1, fp
 802ef24:	f7fd fadc 	bl	802c4e0 <__ssprint_r>
 802ef28:	2800      	cmp	r0, #0
 802ef2a:	f040 80cc 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ef2e:	ac29      	add	r4, sp, #164	@ 0xa4
 802ef30:	e717      	b.n	802ed62 <_svfprintf_r+0xf92>
 802ef32:	9803      	ldr	r0, [sp, #12]
 802ef34:	aa26      	add	r2, sp, #152	@ 0x98
 802ef36:	4659      	mov	r1, fp
 802ef38:	f7fd fad2 	bl	802c4e0 <__ssprint_r>
 802ef3c:	2800      	cmp	r0, #0
 802ef3e:	f040 80c2 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ef42:	ac29      	add	r4, sp, #164	@ 0xa4
 802ef44:	e724      	b.n	802ed90 <_svfprintf_r+0xfc0>
 802ef46:	bf00      	nop
 802ef48:	08038706 	.word	0x08038706
 802ef4c:	9904      	ldr	r1, [sp, #16]
 802ef4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ef50:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802ef52:	2901      	cmp	r1, #1
 802ef54:	f103 0301 	add.w	r3, r3, #1
 802ef58:	f102 0201 	add.w	r2, r2, #1
 802ef5c:	f104 0608 	add.w	r6, r4, #8
 802ef60:	dc02      	bgt.n	802ef68 <_svfprintf_r+0x1198>
 802ef62:	07e9      	lsls	r1, r5, #31
 802ef64:	f140 8083 	bpl.w	802f06e <_svfprintf_r+0x129e>
 802ef68:	2101      	movs	r1, #1
 802ef6a:	2a07      	cmp	r2, #7
 802ef6c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ef70:	f8c4 9000 	str.w	r9, [r4]
 802ef74:	6061      	str	r1, [r4, #4]
 802ef76:	dd08      	ble.n	802ef8a <_svfprintf_r+0x11ba>
 802ef78:	9803      	ldr	r0, [sp, #12]
 802ef7a:	aa26      	add	r2, sp, #152	@ 0x98
 802ef7c:	4659      	mov	r1, fp
 802ef7e:	f7fd faaf 	bl	802c4e0 <__ssprint_r>
 802ef82:	2800      	cmp	r0, #0
 802ef84:	f040 809f 	bne.w	802f0c6 <_svfprintf_r+0x12f6>
 802ef88:	ae29      	add	r6, sp, #164	@ 0xa4
 802ef8a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ef8c:	6033      	str	r3, [r6, #0]
 802ef8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ef90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802ef92:	6073      	str	r3, [r6, #4]
 802ef94:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ef96:	4413      	add	r3, r2
 802ef98:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ef9a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ef9c:	3301      	adds	r3, #1
 802ef9e:	2b07      	cmp	r3, #7
 802efa0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802efa2:	dc33      	bgt.n	802f00c <_svfprintf_r+0x123c>
 802efa4:	3608      	adds	r6, #8
 802efa6:	9b04      	ldr	r3, [sp, #16]
 802efa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802efac:	1e5c      	subs	r4, r3, #1
 802efae:	2200      	movs	r2, #0
 802efb0:	2300      	movs	r3, #0
 802efb2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 802efb6:	f7e1 fd9f 	bl	8010af8 <__aeabi_dcmpeq>
 802efba:	2800      	cmp	r0, #0
 802efbc:	d12f      	bne.n	802f01e <_svfprintf_r+0x124e>
 802efbe:	f109 0201 	add.w	r2, r9, #1
 802efc2:	e9c6 2400 	strd	r2, r4, [r6]
 802efc6:	9a04      	ldr	r2, [sp, #16]
 802efc8:	f108 0301 	add.w	r3, r8, #1
 802efcc:	3f01      	subs	r7, #1
 802efce:	4417      	add	r7, r2
 802efd0:	2b07      	cmp	r3, #7
 802efd2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802efd6:	dd53      	ble.n	802f080 <_svfprintf_r+0x12b0>
 802efd8:	9803      	ldr	r0, [sp, #12]
 802efda:	aa26      	add	r2, sp, #152	@ 0x98
 802efdc:	4659      	mov	r1, fp
 802efde:	f7fd fa7f 	bl	802c4e0 <__ssprint_r>
 802efe2:	2800      	cmp	r0, #0
 802efe4:	d16f      	bne.n	802f0c6 <_svfprintf_r+0x12f6>
 802efe6:	ae29      	add	r6, sp, #164	@ 0xa4
 802efe8:	ab22      	add	r3, sp, #136	@ 0x88
 802efea:	6033      	str	r3, [r6, #0]
 802efec:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802efee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802eff0:	6073      	str	r3, [r6, #4]
 802eff2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802eff4:	4413      	add	r3, r2
 802eff6:	9328      	str	r3, [sp, #160]	@ 0xa0
 802eff8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802effa:	3301      	adds	r3, #1
 802effc:	2b07      	cmp	r3, #7
 802effe:	9327      	str	r3, [sp, #156]	@ 0x9c
 802f000:	f73f ada0 	bgt.w	802eb44 <_svfprintf_r+0xd74>
 802f004:	f106 0408 	add.w	r4, r6, #8
 802f008:	f7ff baec 	b.w	802e5e4 <_svfprintf_r+0x814>
 802f00c:	9803      	ldr	r0, [sp, #12]
 802f00e:	aa26      	add	r2, sp, #152	@ 0x98
 802f010:	4659      	mov	r1, fp
 802f012:	f7fd fa65 	bl	802c4e0 <__ssprint_r>
 802f016:	2800      	cmp	r0, #0
 802f018:	d155      	bne.n	802f0c6 <_svfprintf_r+0x12f6>
 802f01a:	ae29      	add	r6, sp, #164	@ 0xa4
 802f01c:	e7c3      	b.n	802efa6 <_svfprintf_r+0x11d6>
 802f01e:	9b04      	ldr	r3, [sp, #16]
 802f020:	2b01      	cmp	r3, #1
 802f022:	dde1      	ble.n	802efe8 <_svfprintf_r+0x1218>
 802f024:	4f57      	ldr	r7, [pc, #348]	@ (802f184 <_svfprintf_r+0x13b4>)
 802f026:	f04f 0810 	mov.w	r8, #16
 802f02a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802f02e:	2c10      	cmp	r4, #16
 802f030:	f103 0301 	add.w	r3, r3, #1
 802f034:	f106 0108 	add.w	r1, r6, #8
 802f038:	6037      	str	r7, [r6, #0]
 802f03a:	dc07      	bgt.n	802f04c <_svfprintf_r+0x127c>
 802f03c:	6074      	str	r4, [r6, #4]
 802f03e:	2b07      	cmp	r3, #7
 802f040:	4414      	add	r4, r2
 802f042:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802f046:	dcc7      	bgt.n	802efd8 <_svfprintf_r+0x1208>
 802f048:	460e      	mov	r6, r1
 802f04a:	e7cd      	b.n	802efe8 <_svfprintf_r+0x1218>
 802f04c:	3210      	adds	r2, #16
 802f04e:	2b07      	cmp	r3, #7
 802f050:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802f054:	f8c6 8004 	str.w	r8, [r6, #4]
 802f058:	dd06      	ble.n	802f068 <_svfprintf_r+0x1298>
 802f05a:	9803      	ldr	r0, [sp, #12]
 802f05c:	aa26      	add	r2, sp, #152	@ 0x98
 802f05e:	4659      	mov	r1, fp
 802f060:	f7fd fa3e 	bl	802c4e0 <__ssprint_r>
 802f064:	bb78      	cbnz	r0, 802f0c6 <_svfprintf_r+0x12f6>
 802f066:	a929      	add	r1, sp, #164	@ 0xa4
 802f068:	3c10      	subs	r4, #16
 802f06a:	460e      	mov	r6, r1
 802f06c:	e7dd      	b.n	802f02a <_svfprintf_r+0x125a>
 802f06e:	2101      	movs	r1, #1
 802f070:	2a07      	cmp	r2, #7
 802f072:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802f076:	f8c4 9000 	str.w	r9, [r4]
 802f07a:	6061      	str	r1, [r4, #4]
 802f07c:	ddb4      	ble.n	802efe8 <_svfprintf_r+0x1218>
 802f07e:	e7ab      	b.n	802efd8 <_svfprintf_r+0x1208>
 802f080:	3608      	adds	r6, #8
 802f082:	e7b1      	b.n	802efe8 <_svfprintf_r+0x1218>
 802f084:	460c      	mov	r4, r1
 802f086:	f7ff baad 	b.w	802e5e4 <_svfprintf_r+0x814>
 802f08a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802f08c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802f08e:	1a9d      	subs	r5, r3, r2
 802f090:	2d00      	cmp	r5, #0
 802f092:	f77f aaaa 	ble.w	802e5ea <_svfprintf_r+0x81a>
 802f096:	4e3c      	ldr	r6, [pc, #240]	@ (802f188 <_svfprintf_r+0x13b8>)
 802f098:	2710      	movs	r7, #16
 802f09a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802f09e:	2d10      	cmp	r5, #16
 802f0a0:	f103 0301 	add.w	r3, r3, #1
 802f0a4:	6026      	str	r6, [r4, #0]
 802f0a6:	dc18      	bgt.n	802f0da <_svfprintf_r+0x130a>
 802f0a8:	442a      	add	r2, r5
 802f0aa:	2b07      	cmp	r3, #7
 802f0ac:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802f0b0:	6065      	str	r5, [r4, #4]
 802f0b2:	f77f aa9a 	ble.w	802e5ea <_svfprintf_r+0x81a>
 802f0b6:	9803      	ldr	r0, [sp, #12]
 802f0b8:	aa26      	add	r2, sp, #152	@ 0x98
 802f0ba:	4659      	mov	r1, fp
 802f0bc:	f7fd fa10 	bl	802c4e0 <__ssprint_r>
 802f0c0:	2800      	cmp	r0, #0
 802f0c2:	f43f aa92 	beq.w	802e5ea <_svfprintf_r+0x81a>
 802f0c6:	f1ba 0f00 	cmp.w	sl, #0
 802f0ca:	f43f a89a 	beq.w	802e202 <_svfprintf_r+0x432>
 802f0ce:	9803      	ldr	r0, [sp, #12]
 802f0d0:	4651      	mov	r1, sl
 802f0d2:	f7fc fe43 	bl	802bd5c <_free_r>
 802f0d6:	f7ff b894 	b.w	802e202 <_svfprintf_r+0x432>
 802f0da:	3210      	adds	r2, #16
 802f0dc:	2b07      	cmp	r3, #7
 802f0de:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802f0e2:	6067      	str	r7, [r4, #4]
 802f0e4:	dc02      	bgt.n	802f0ec <_svfprintf_r+0x131c>
 802f0e6:	3408      	adds	r4, #8
 802f0e8:	3d10      	subs	r5, #16
 802f0ea:	e7d6      	b.n	802f09a <_svfprintf_r+0x12ca>
 802f0ec:	9803      	ldr	r0, [sp, #12]
 802f0ee:	aa26      	add	r2, sp, #152	@ 0x98
 802f0f0:	4659      	mov	r1, fp
 802f0f2:	f7fd f9f5 	bl	802c4e0 <__ssprint_r>
 802f0f6:	2800      	cmp	r0, #0
 802f0f8:	d1e5      	bne.n	802f0c6 <_svfprintf_r+0x12f6>
 802f0fa:	ac29      	add	r4, sp, #164	@ 0xa4
 802f0fc:	e7f4      	b.n	802f0e8 <_svfprintf_r+0x1318>
 802f0fe:	9803      	ldr	r0, [sp, #12]
 802f100:	4651      	mov	r1, sl
 802f102:	f7fc fe2b 	bl	802bd5c <_free_r>
 802f106:	f7ff ba88 	b.w	802e61a <_svfprintf_r+0x84a>
 802f10a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802f10c:	2b00      	cmp	r3, #0
 802f10e:	f43f a878 	beq.w	802e202 <_svfprintf_r+0x432>
 802f112:	9803      	ldr	r0, [sp, #12]
 802f114:	aa26      	add	r2, sp, #152	@ 0x98
 802f116:	4659      	mov	r1, fp
 802f118:	f7fd f9e2 	bl	802c4e0 <__ssprint_r>
 802f11c:	f7ff b871 	b.w	802e202 <_svfprintf_r+0x432>
 802f120:	ea56 0207 	orrs.w	r2, r6, r7
 802f124:	9508      	str	r5, [sp, #32]
 802f126:	f43f ab7a 	beq.w	802e81e <_svfprintf_r+0xa4e>
 802f12a:	2b01      	cmp	r3, #1
 802f12c:	f43f abfb 	beq.w	802e926 <_svfprintf_r+0xb56>
 802f130:	2b02      	cmp	r3, #2
 802f132:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 802f136:	f43f ac3f 	beq.w	802e9b8 <_svfprintf_r+0xbe8>
 802f13a:	f006 0307 	and.w	r3, r6, #7
 802f13e:	08f6      	lsrs	r6, r6, #3
 802f140:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802f144:	08ff      	lsrs	r7, r7, #3
 802f146:	3330      	adds	r3, #48	@ 0x30
 802f148:	ea56 0107 	orrs.w	r1, r6, r7
 802f14c:	464a      	mov	r2, r9
 802f14e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802f152:	d1f2      	bne.n	802f13a <_svfprintf_r+0x136a>
 802f154:	9908      	ldr	r1, [sp, #32]
 802f156:	07c8      	lsls	r0, r1, #31
 802f158:	d506      	bpl.n	802f168 <_svfprintf_r+0x1398>
 802f15a:	2b30      	cmp	r3, #48	@ 0x30
 802f15c:	d004      	beq.n	802f168 <_svfprintf_r+0x1398>
 802f15e:	2330      	movs	r3, #48	@ 0x30
 802f160:	f809 3c01 	strb.w	r3, [r9, #-1]
 802f164:	f1a2 0902 	sub.w	r9, r2, #2
 802f168:	ab52      	add	r3, sp, #328	@ 0x148
 802f16a:	9d08      	ldr	r5, [sp, #32]
 802f16c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 802f170:	f04f 0a00 	mov.w	sl, #0
 802f174:	eba3 0809 	sub.w	r8, r3, r9
 802f178:	4657      	mov	r7, sl
 802f17a:	f8cd a020 	str.w	sl, [sp, #32]
 802f17e:	4656      	mov	r6, sl
 802f180:	f7ff b97c 	b.w	802e47c <_svfprintf_r+0x6ac>
 802f184:	08038706 	.word	0x08038706
 802f188:	08038716 	.word	0x08038716

0802f18c <__swhatbuf_r>:
 802f18c:	b570      	push	{r4, r5, r6, lr}
 802f18e:	460c      	mov	r4, r1
 802f190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f194:	2900      	cmp	r1, #0
 802f196:	b096      	sub	sp, #88	@ 0x58
 802f198:	4615      	mov	r5, r2
 802f19a:	461e      	mov	r6, r3
 802f19c:	da07      	bge.n	802f1ae <__swhatbuf_r+0x22>
 802f19e:	89a1      	ldrh	r1, [r4, #12]
 802f1a0:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 802f1a4:	d117      	bne.n	802f1d6 <__swhatbuf_r+0x4a>
 802f1a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802f1aa:	4608      	mov	r0, r1
 802f1ac:	e00f      	b.n	802f1ce <__swhatbuf_r+0x42>
 802f1ae:	466a      	mov	r2, sp
 802f1b0:	f003 f892 	bl	80322d8 <_fstat_r>
 802f1b4:	2800      	cmp	r0, #0
 802f1b6:	dbf2      	blt.n	802f19e <__swhatbuf_r+0x12>
 802f1b8:	9901      	ldr	r1, [sp, #4]
 802f1ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802f1be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802f1c2:	4259      	negs	r1, r3
 802f1c4:	4159      	adcs	r1, r3
 802f1c6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802f1ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802f1ce:	6031      	str	r1, [r6, #0]
 802f1d0:	602b      	str	r3, [r5, #0]
 802f1d2:	b016      	add	sp, #88	@ 0x58
 802f1d4:	bd70      	pop	{r4, r5, r6, pc}
 802f1d6:	2100      	movs	r1, #0
 802f1d8:	2340      	movs	r3, #64	@ 0x40
 802f1da:	e7e6      	b.n	802f1aa <__swhatbuf_r+0x1e>

0802f1dc <__smakebuf_r>:
 802f1dc:	898b      	ldrh	r3, [r1, #12]
 802f1de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802f1e0:	079d      	lsls	r5, r3, #30
 802f1e2:	4606      	mov	r6, r0
 802f1e4:	460c      	mov	r4, r1
 802f1e6:	d507      	bpl.n	802f1f8 <__smakebuf_r+0x1c>
 802f1e8:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 802f1ec:	6023      	str	r3, [r4, #0]
 802f1ee:	6123      	str	r3, [r4, #16]
 802f1f0:	2301      	movs	r3, #1
 802f1f2:	6163      	str	r3, [r4, #20]
 802f1f4:	b003      	add	sp, #12
 802f1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802f1f8:	ab01      	add	r3, sp, #4
 802f1fa:	466a      	mov	r2, sp
 802f1fc:	f7ff ffc6 	bl	802f18c <__swhatbuf_r>
 802f200:	9f00      	ldr	r7, [sp, #0]
 802f202:	4605      	mov	r5, r0
 802f204:	4639      	mov	r1, r7
 802f206:	4630      	mov	r0, r6
 802f208:	f7fc fec0 	bl	802bf8c <_malloc_r>
 802f20c:	b948      	cbnz	r0, 802f222 <__smakebuf_r+0x46>
 802f20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802f212:	059a      	lsls	r2, r3, #22
 802f214:	d4ee      	bmi.n	802f1f4 <__smakebuf_r+0x18>
 802f216:	f023 0303 	bic.w	r3, r3, #3
 802f21a:	f043 0302 	orr.w	r3, r3, #2
 802f21e:	81a3      	strh	r3, [r4, #12]
 802f220:	e7e2      	b.n	802f1e8 <__smakebuf_r+0xc>
 802f222:	89a3      	ldrh	r3, [r4, #12]
 802f224:	6020      	str	r0, [r4, #0]
 802f226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802f22a:	81a3      	strh	r3, [r4, #12]
 802f22c:	9b01      	ldr	r3, [sp, #4]
 802f22e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802f232:	b15b      	cbz	r3, 802f24c <__smakebuf_r+0x70>
 802f234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f238:	4630      	mov	r0, r6
 802f23a:	f003 f85f 	bl	80322fc <_isatty_r>
 802f23e:	b128      	cbz	r0, 802f24c <__smakebuf_r+0x70>
 802f240:	89a3      	ldrh	r3, [r4, #12]
 802f242:	f023 0303 	bic.w	r3, r3, #3
 802f246:	f043 0301 	orr.w	r3, r3, #1
 802f24a:	81a3      	strh	r3, [r4, #12]
 802f24c:	89a3      	ldrh	r3, [r4, #12]
 802f24e:	431d      	orrs	r5, r3
 802f250:	81a5      	strh	r5, [r4, #12]
 802f252:	e7cf      	b.n	802f1f4 <__smakebuf_r+0x18>

0802f254 <__ssvfscanf_r>:
 802f254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f258:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 802f25c:	461d      	mov	r5, r3
 802f25e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802f262:	af02      	add	r7, sp, #8
 802f264:	049e      	lsls	r6, r3, #18
 802f266:	62b8      	str	r0, [r7, #40]	@ 0x28
 802f268:	460c      	mov	r4, r1
 802f26a:	617a      	str	r2, [r7, #20]
 802f26c:	d406      	bmi.n	802f27c <__ssvfscanf_r+0x28>
 802f26e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802f272:	818b      	strh	r3, [r1, #12]
 802f274:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802f276:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802f27a:	664b      	str	r3, [r1, #100]	@ 0x64
 802f27c:	2300      	movs	r3, #0
 802f27e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 802f282:	61bb      	str	r3, [r7, #24]
 802f284:	637b      	str	r3, [r7, #52]	@ 0x34
 802f286:	633b      	str	r3, [r7, #48]	@ 0x30
 802f288:	627b      	str	r3, [r7, #36]	@ 0x24
 802f28a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802f28e:	f818 3b01 	ldrb.w	r3, [r8], #1
 802f292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802f294:	2b00      	cmp	r3, #0
 802f296:	f000 80d3 	beq.w	802f440 <__ssvfscanf_r+0x1ec>
 802f29a:	4a84      	ldr	r2, [pc, #528]	@ (802f4ac <__ssvfscanf_r+0x258>)
 802f29c:	5cd6      	ldrb	r6, [r2, r3]
 802f29e:	f016 0608 	ands.w	r6, r6, #8
 802f2a2:	d01b      	beq.n	802f2dc <__ssvfscanf_r+0x88>
 802f2a4:	6863      	ldr	r3, [r4, #4]
 802f2a6:	2b00      	cmp	r3, #0
 802f2a8:	dd08      	ble.n	802f2bc <__ssvfscanf_r+0x68>
 802f2aa:	6823      	ldr	r3, [r4, #0]
 802f2ac:	497f      	ldr	r1, [pc, #508]	@ (802f4ac <__ssvfscanf_r+0x258>)
 802f2ae:	781a      	ldrb	r2, [r3, #0]
 802f2b0:	5c8a      	ldrb	r2, [r1, r2]
 802f2b2:	0710      	lsls	r0, r2, #28
 802f2b4:	d409      	bmi.n	802f2ca <__ssvfscanf_r+0x76>
 802f2b6:	f8c7 8014 	str.w	r8, [r7, #20]
 802f2ba:	e7e6      	b.n	802f28a <__ssvfscanf_r+0x36>
 802f2bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f2be:	4621      	mov	r1, r4
 802f2c0:	f7fd fe13 	bl	802ceea <__ssrefill_r>
 802f2c4:	2800      	cmp	r0, #0
 802f2c6:	d0f0      	beq.n	802f2aa <__ssvfscanf_r+0x56>
 802f2c8:	e7f5      	b.n	802f2b6 <__ssvfscanf_r+0x62>
 802f2ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f2cc:	3201      	adds	r2, #1
 802f2ce:	633a      	str	r2, [r7, #48]	@ 0x30
 802f2d0:	6862      	ldr	r2, [r4, #4]
 802f2d2:	3301      	adds	r3, #1
 802f2d4:	3a01      	subs	r2, #1
 802f2d6:	6062      	str	r2, [r4, #4]
 802f2d8:	6023      	str	r3, [r4, #0]
 802f2da:	e7e3      	b.n	802f2a4 <__ssvfscanf_r+0x50>
 802f2dc:	2b25      	cmp	r3, #37	@ 0x25
 802f2de:	d163      	bne.n	802f3a8 <__ssvfscanf_r+0x154>
 802f2e0:	62fe      	str	r6, [r7, #44]	@ 0x2c
 802f2e2:	4642      	mov	r2, r8
 802f2e4:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f2e8:	617a      	str	r2, [r7, #20]
 802f2ea:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 802f2ee:	2a55      	cmp	r2, #85	@ 0x55
 802f2f0:	f200 816e 	bhi.w	802f5d0 <__ssvfscanf_r+0x37c>
 802f2f4:	e8df f012 	tbh	[pc, r2, lsl #1]
 802f2f8:	016c0056 	.word	0x016c0056
 802f2fc:	016c016c 	.word	0x016c016c
 802f300:	007d016c 	.word	0x007d016c
 802f304:	016c016c 	.word	0x016c016c
 802f308:	016c016c 	.word	0x016c016c
 802f30c:	00b9016c 	.word	0x00b9016c
 802f310:	00b900b9 	.word	0x00b900b9
 802f314:	00b900b9 	.word	0x00b900b9
 802f318:	00b900b9 	.word	0x00b900b9
 802f31c:	00b900b9 	.word	0x00b900b9
 802f320:	016c00b9 	.word	0x016c00b9
 802f324:	016c016c 	.word	0x016c016c
 802f328:	016c016c 	.word	0x016c016c
 802f32c:	016c016c 	.word	0x016c016c
 802f330:	016c00e0 	.word	0x016c00e0
 802f334:	00c3010a 	.word	0x00c3010a
 802f338:	00e000e0 	.word	0x00e000e0
 802f33c:	016c00e0 	.word	0x016c00e0
 802f340:	016c016c 	.word	0x016c016c
 802f344:	00a2016c 	.word	0x00a2016c
 802f348:	016c016c 	.word	0x016c016c
 802f34c:	016c00c7 	.word	0x016c00c7
 802f350:	016c016c 	.word	0x016c016c
 802f354:	016c00fa 	.word	0x016c00fa
 802f358:	016c016c 	.word	0x016c016c
 802f35c:	00d4016c 	.word	0x00d4016c
 802f360:	016c016c 	.word	0x016c016c
 802f364:	016c00ff 	.word	0x016c00ff
 802f368:	016c016c 	.word	0x016c016c
 802f36c:	016c016c 	.word	0x016c016c
 802f370:	016c00e0 	.word	0x016c00e0
 802f374:	00c5010c 	.word	0x00c5010c
 802f378:	00e000e0 	.word	0x00e000e0
 802f37c:	009400e0 	.word	0x009400e0
 802f380:	00a20130 	.word	0x00a20130
 802f384:	0085016c 	.word	0x0085016c
 802f388:	011400ac 	.word	0x011400ac
 802f38c:	011100c9 	.word	0x011100c9
 802f390:	016c016c 	.word	0x016c016c
 802f394:	00a900fc 	.word	0x00a900fc
 802f398:	016c00d0 	.word	0x016c00d0
 802f39c:	00d4016c 	.word	0x00d4016c
 802f3a0:	00a9016c 	.word	0x00a9016c
 802f3a4:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802f3a8:	6863      	ldr	r3, [r4, #4]
 802f3aa:	2b00      	cmp	r3, #0
 802f3ac:	dd0e      	ble.n	802f3cc <__ssvfscanf_r+0x178>
 802f3ae:	6823      	ldr	r3, [r4, #0]
 802f3b0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 802f3b4:	7819      	ldrb	r1, [r3, #0]
 802f3b6:	4291      	cmp	r1, r2
 802f3b8:	d142      	bne.n	802f440 <__ssvfscanf_r+0x1ec>
 802f3ba:	3301      	adds	r3, #1
 802f3bc:	6862      	ldr	r2, [r4, #4]
 802f3be:	6023      	str	r3, [r4, #0]
 802f3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802f3c2:	3a01      	subs	r2, #1
 802f3c4:	3301      	adds	r3, #1
 802f3c6:	6062      	str	r2, [r4, #4]
 802f3c8:	633b      	str	r3, [r7, #48]	@ 0x30
 802f3ca:	e774      	b.n	802f2b6 <__ssvfscanf_r+0x62>
 802f3cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f3ce:	4621      	mov	r1, r4
 802f3d0:	f7fd fd8b 	bl	802ceea <__ssrefill_r>
 802f3d4:	2800      	cmp	r0, #0
 802f3d6:	d0ea      	beq.n	802f3ae <__ssvfscanf_r+0x15a>
 802f3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f3da:	b113      	cbz	r3, 802f3e2 <__ssvfscanf_r+0x18e>
 802f3dc:	89a3      	ldrh	r3, [r4, #12]
 802f3de:	065b      	lsls	r3, r3, #25
 802f3e0:	d52e      	bpl.n	802f440 <__ssvfscanf_r+0x1ec>
 802f3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f3e4:	2b00      	cmp	r3, #0
 802f3e6:	f041 809d 	bne.w	8030524 <__ssvfscanf_r+0x12d0>
 802f3ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f3ee:	627b      	str	r3, [r7, #36]	@ 0x24
 802f3f0:	e0f9      	b.n	802f5e6 <__ssvfscanf_r+0x392>
 802f3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f3f4:	4333      	orrs	r3, r6
 802f3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f3f8:	d122      	bne.n	802f440 <__ssvfscanf_r+0x1ec>
 802f3fa:	2610      	movs	r6, #16
 802f3fc:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802f400:	e76f      	b.n	802f2e2 <__ssvfscanf_r+0x8e>
 802f402:	0731      	lsls	r1, r6, #28
 802f404:	d11c      	bne.n	802f440 <__ssvfscanf_r+0x1ec>
 802f406:	f898 3001 	ldrb.w	r3, [r8, #1]
 802f40a:	2b6c      	cmp	r3, #108	@ 0x6c
 802f40c:	d105      	bne.n	802f41a <__ssvfscanf_r+0x1c6>
 802f40e:	f108 0302 	add.w	r3, r8, #2
 802f412:	617b      	str	r3, [r7, #20]
 802f414:	f046 0602 	orr.w	r6, r6, #2
 802f418:	e7f0      	b.n	802f3fc <__ssvfscanf_r+0x1a8>
 802f41a:	f046 0601 	orr.w	r6, r6, #1
 802f41e:	e7ed      	b.n	802f3fc <__ssvfscanf_r+0x1a8>
 802f420:	0732      	lsls	r2, r6, #28
 802f422:	d10d      	bne.n	802f440 <__ssvfscanf_r+0x1ec>
 802f424:	f898 3001 	ldrb.w	r3, [r8, #1]
 802f428:	2b68      	cmp	r3, #104	@ 0x68
 802f42a:	bf03      	ittte	eq
 802f42c:	f108 0302 	addeq.w	r3, r8, #2
 802f430:	617b      	streq	r3, [r7, #20]
 802f432:	f046 0608 	orreq.w	r6, r6, #8
 802f436:	f046 0604 	orrne.w	r6, r6, #4
 802f43a:	e7df      	b.n	802f3fc <__ssvfscanf_r+0x1a8>
 802f43c:	0733      	lsls	r3, r6, #28
 802f43e:	d0e9      	beq.n	802f414 <__ssvfscanf_r+0x1c0>
 802f440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f442:	2b00      	cmp	r3, #0
 802f444:	f000 80cf 	beq.w	802f5e6 <__ssvfscanf_r+0x392>
 802f448:	e0c8      	b.n	802f5dc <__ssvfscanf_r+0x388>
 802f44a:	0730      	lsls	r0, r6, #28
 802f44c:	d0d6      	beq.n	802f3fc <__ssvfscanf_r+0x1a8>
 802f44e:	e7f7      	b.n	802f440 <__ssvfscanf_r+0x1ec>
 802f450:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 802f454:	d1f4      	bne.n	802f440 <__ssvfscanf_r+0x1ec>
 802f456:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802f458:	b922      	cbnz	r2, 802f464 <__ssvfscanf_r+0x210>
 802f45a:	b082      	sub	sp, #8
 802f45c:	aa02      	add	r2, sp, #8
 802f45e:	e9c2 3300 	strd	r3, r3, [r2]
 802f462:	637a      	str	r2, [r7, #52]	@ 0x34
 802f464:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 802f468:	e7c8      	b.n	802f3fc <__ssvfscanf_r+0x1a8>
 802f46a:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802f46e:	d1e7      	bne.n	802f440 <__ssvfscanf_r+0x1ec>
 802f470:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802f472:	220a      	movs	r2, #10
 802f474:	fb02 3301 	mla	r3, r2, r1, r3
 802f478:	3b30      	subs	r3, #48	@ 0x30
 802f47a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f47c:	e7be      	b.n	802f3fc <__ssvfscanf_r+0x1a8>
 802f47e:	f046 0601 	orr.w	r6, r6, #1
 802f482:	4b0b      	ldr	r3, [pc, #44]	@ (802f4b0 <__ssvfscanf_r+0x25c>)
 802f484:	e009      	b.n	802f49a <__ssvfscanf_r+0x246>
 802f486:	f046 0601 	orr.w	r6, r6, #1
 802f48a:	4b0a      	ldr	r3, [pc, #40]	@ (802f4b4 <__ssvfscanf_r+0x260>)
 802f48c:	61bb      	str	r3, [r7, #24]
 802f48e:	2308      	movs	r3, #8
 802f490:	61fb      	str	r3, [r7, #28]
 802f492:	f04f 0803 	mov.w	r8, #3
 802f496:	e011      	b.n	802f4bc <__ssvfscanf_r+0x268>
 802f498:	4b06      	ldr	r3, [pc, #24]	@ (802f4b4 <__ssvfscanf_r+0x260>)
 802f49a:	61bb      	str	r3, [r7, #24]
 802f49c:	230a      	movs	r3, #10
 802f49e:	e7f7      	b.n	802f490 <__ssvfscanf_r+0x23c>
 802f4a0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802f4a4:	4b03      	ldr	r3, [pc, #12]	@ (802f4b4 <__ssvfscanf_r+0x260>)
 802f4a6:	61bb      	str	r3, [r7, #24]
 802f4a8:	2310      	movs	r3, #16
 802f4aa:	e7f1      	b.n	802f490 <__ssvfscanf_r+0x23c>
 802f4ac:	0803854d 	.word	0x0803854d
 802f4b0:	080291e9 	.word	0x080291e9
 802f4b4:	08031fe9 	.word	0x08031fe9
 802f4b8:	f04f 0804 	mov.w	r8, #4
 802f4bc:	6863      	ldr	r3, [r4, #4]
 802f4be:	2b00      	cmp	r3, #0
 802f4c0:	dd4e      	ble.n	802f560 <__ssvfscanf_r+0x30c>
 802f4c2:	0673      	lsls	r3, r6, #25
 802f4c4:	d407      	bmi.n	802f4d6 <__ssvfscanf_r+0x282>
 802f4c6:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 802f7c4 <__ssvfscanf_r+0x570>
 802f4ca:	6823      	ldr	r3, [r4, #0]
 802f4cc:	781a      	ldrb	r2, [r3, #0]
 802f4ce:	f819 2002 	ldrb.w	r2, [r9, r2]
 802f4d2:	0710      	lsls	r0, r2, #28
 802f4d4:	d44b      	bmi.n	802f56e <__ssvfscanf_r+0x31a>
 802f4d6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802f4da:	f1b8 0f03 	cmp.w	r8, #3
 802f4de:	d858      	bhi.n	802f592 <__ssvfscanf_r+0x33e>
 802f4e0:	e8df f018 	tbh	[pc, r8, lsl #1]
 802f4e4:	037801c1 	.word	0x037801c1
 802f4e8:	05f30514 	.word	0x05f30514
 802f4ec:	f046 0601 	orr.w	r6, r6, #1
 802f4f0:	f04f 0802 	mov.w	r8, #2
 802f4f4:	e7e2      	b.n	802f4bc <__ssvfscanf_r+0x268>
 802f4f6:	6979      	ldr	r1, [r7, #20]
 802f4f8:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 802f4fc:	f001 fd1d 	bl	8030f3a <__sccl>
 802f500:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802f504:	6178      	str	r0, [r7, #20]
 802f506:	f04f 0801 	mov.w	r8, #1
 802f50a:	e7d7      	b.n	802f4bc <__ssvfscanf_r+0x268>
 802f50c:	f046 0601 	orr.w	r6, r6, #1
 802f510:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802f514:	f04f 0800 	mov.w	r8, #0
 802f518:	e7d0      	b.n	802f4bc <__ssvfscanf_r+0x268>
 802f51a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 802f51e:	e7c1      	b.n	802f4a4 <__ssvfscanf_r+0x250>
 802f520:	06f1      	lsls	r1, r6, #27
 802f522:	f53f aeb2 	bmi.w	802f28a <__ssvfscanf_r+0x36>
 802f526:	0732      	lsls	r2, r6, #28
 802f528:	f855 3b04 	ldr.w	r3, [r5], #4
 802f52c:	d502      	bpl.n	802f534 <__ssvfscanf_r+0x2e0>
 802f52e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f530:	701a      	strb	r2, [r3, #0]
 802f532:	e6aa      	b.n	802f28a <__ssvfscanf_r+0x36>
 802f534:	0770      	lsls	r0, r6, #29
 802f536:	d502      	bpl.n	802f53e <__ssvfscanf_r+0x2ea>
 802f538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f53a:	801a      	strh	r2, [r3, #0]
 802f53c:	e6a5      	b.n	802f28a <__ssvfscanf_r+0x36>
 802f53e:	07f1      	lsls	r1, r6, #31
 802f540:	d502      	bpl.n	802f548 <__ssvfscanf_r+0x2f4>
 802f542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f544:	601a      	str	r2, [r3, #0]
 802f546:	e6a0      	b.n	802f28a <__ssvfscanf_r+0x36>
 802f548:	07b2      	lsls	r2, r6, #30
 802f54a:	d5fa      	bpl.n	802f542 <__ssvfscanf_r+0x2ee>
 802f54c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f54e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802f550:	17d2      	asrs	r2, r2, #31
 802f552:	e9c3 1200 	strd	r1, r2, [r3]
 802f556:	e698      	b.n	802f28a <__ssvfscanf_r+0x36>
 802f558:	4b99      	ldr	r3, [pc, #612]	@ (802f7c0 <__ssvfscanf_r+0x56c>)
 802f55a:	61bb      	str	r3, [r7, #24]
 802f55c:	2300      	movs	r3, #0
 802f55e:	e797      	b.n	802f490 <__ssvfscanf_r+0x23c>
 802f560:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f562:	4621      	mov	r1, r4
 802f564:	f7fd fcc1 	bl	802ceea <__ssrefill_r>
 802f568:	2800      	cmp	r0, #0
 802f56a:	d0aa      	beq.n	802f4c2 <__ssvfscanf_r+0x26e>
 802f56c:	e734      	b.n	802f3d8 <__ssvfscanf_r+0x184>
 802f56e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f570:	3201      	adds	r2, #1
 802f572:	633a      	str	r2, [r7, #48]	@ 0x30
 802f574:	6862      	ldr	r2, [r4, #4]
 802f576:	3a01      	subs	r2, #1
 802f578:	2a00      	cmp	r2, #0
 802f57a:	6062      	str	r2, [r4, #4]
 802f57c:	dd02      	ble.n	802f584 <__ssvfscanf_r+0x330>
 802f57e:	3301      	adds	r3, #1
 802f580:	6023      	str	r3, [r4, #0]
 802f582:	e7a2      	b.n	802f4ca <__ssvfscanf_r+0x276>
 802f584:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f586:	4621      	mov	r1, r4
 802f588:	f7fd fcaf 	bl	802ceea <__ssrefill_r>
 802f58c:	2800      	cmp	r0, #0
 802f58e:	d09c      	beq.n	802f4ca <__ssvfscanf_r+0x276>
 802f590:	e722      	b.n	802f3d8 <__ssvfscanf_r+0x184>
 802f592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f594:	2b01      	cmp	r3, #1
 802f596:	bf38      	it	cc
 802f598:	2301      	movcc	r3, #1
 802f59a:	4698      	mov	r8, r3
 802f59c:	f016 0301 	ands.w	r3, r6, #1
 802f5a0:	f006 0b10 	and.w	fp, r6, #16
 802f5a4:	f000 80eb 	beq.w	802f77e <__ssvfscanf_r+0x52a>
 802f5a8:	f1bb 0f00 	cmp.w	fp, #0
 802f5ac:	f040 8085 	bne.w	802f6ba <__ssvfscanf_r+0x466>
 802f5b0:	462b      	mov	r3, r5
 802f5b2:	0631      	lsls	r1, r6, #24
 802f5b4:	f853 5b04 	ldr.w	r5, [r3], #4
 802f5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f5ba:	f140 8085 	bpl.w	802f6c8 <__ssvfscanf_r+0x474>
 802f5be:	b13d      	cbz	r5, 802f5d0 <__ssvfscanf_r+0x37c>
 802f5c0:	2080      	movs	r0, #128	@ 0x80
 802f5c2:	f7fc fcd3 	bl	802bf6c <malloc>
 802f5c6:	4606      	mov	r6, r0
 802f5c8:	b998      	cbnz	r0, 802f5f2 <__ssvfscanf_r+0x39e>
 802f5ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f5ce:	627b      	str	r3, [r7, #36]	@ 0x24
 802f5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f5d2:	b143      	cbz	r3, 802f5e6 <__ssvfscanf_r+0x392>
 802f5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f5d6:	3301      	adds	r3, #1
 802f5d8:	f000 87a4 	beq.w	8030524 <__ssvfscanf_r+0x12d0>
 802f5dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f5de:	6818      	ldr	r0, [r3, #0]
 802f5e0:	b108      	cbz	r0, 802f5e6 <__ssvfscanf_r+0x392>
 802f5e2:	f7fc fccb 	bl	802bf7c <free>
 802f5e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f5e8:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 802f5ec:	46bd      	mov	sp, r7
 802f5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f5f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f5f4:	6028      	str	r0, [r5, #0]
 802f5f6:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 802f5fa:	889b      	ldrh	r3, [r3, #4]
 802f5fc:	4599      	cmp	r9, r3
 802f5fe:	d314      	bcc.n	802f62a <__ssvfscanf_r+0x3d6>
 802f600:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802f604:	4293      	cmp	r3, r2
 802f606:	f200 878d 	bhi.w	8030524 <__ssvfscanf_r+0x12d0>
 802f60a:	3308      	adds	r3, #8
 802f60c:	fa1f fa83 	uxth.w	sl, r3
 802f610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f612:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802f616:	6818      	ldr	r0, [r3, #0]
 802f618:	f001 fc32 	bl	8030e80 <realloc>
 802f61c:	2800      	cmp	r0, #0
 802f61e:	f000 8781 	beq.w	8030524 <__ssvfscanf_r+0x12d0>
 802f622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f624:	6018      	str	r0, [r3, #0]
 802f626:	f8a3 a004 	strh.w	sl, [r3, #4]
 802f62a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f62c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802f62e:	681b      	ldr	r3, [r3, #0]
 802f630:	f109 0201 	add.w	r2, r9, #1
 802f634:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802f638:	46aa      	mov	sl, r5
 802f63a:	80ca      	strh	r2, [r1, #6]
 802f63c:	4635      	mov	r5, r6
 802f63e:	f04f 0920 	mov.w	r9, #32
 802f642:	2200      	movs	r2, #0
 802f644:	613a      	str	r2, [r7, #16]
 802f646:	f7fb fbd3 	bl	802adf0 <__locale_mb_cur_max>
 802f64a:	693a      	ldr	r2, [r7, #16]
 802f64c:	4290      	cmp	r0, r2
 802f64e:	f43f aec3 	beq.w	802f3d8 <__ssvfscanf_r+0x184>
 802f652:	6821      	ldr	r1, [r4, #0]
 802f654:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 802f658:	f811 0b01 	ldrb.w	r0, [r1], #1
 802f65c:	f80c 0002 	strb.w	r0, [ip, r2]
 802f660:	1c53      	adds	r3, r2, #1
 802f662:	6862      	ldr	r2, [r4, #4]
 802f664:	3a01      	subs	r2, #1
 802f666:	e9c4 1200 	strd	r1, r2, [r4]
 802f66a:	6a3a      	ldr	r2, [r7, #32]
 802f66c:	2a03      	cmp	r2, #3
 802f66e:	d102      	bne.n	802f676 <__ssvfscanf_r+0x422>
 802f670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802f672:	2a04      	cmp	r2, #4
 802f674:	d007      	beq.n	802f686 <__ssvfscanf_r+0x432>
 802f676:	2208      	movs	r2, #8
 802f678:	2100      	movs	r1, #0
 802f67a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802f67e:	623b      	str	r3, [r7, #32]
 802f680:	f7fa fa2e 	bl	8029ae0 <memset>
 802f684:	6a3b      	ldr	r3, [r7, #32]
 802f686:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802f68a:	9200      	str	r2, [sp, #0]
 802f68c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f68e:	613b      	str	r3, [r7, #16]
 802f690:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802f694:	4629      	mov	r1, r5
 802f696:	f002 ffad 	bl	80325f4 <_mbrtowc_r>
 802f69a:	1c42      	adds	r2, r0, #1
 802f69c:	6238      	str	r0, [r7, #32]
 802f69e:	f43f ae9b 	beq.w	802f3d8 <__ssvfscanf_r+0x184>
 802f6a2:	693b      	ldr	r3, [r7, #16]
 802f6a4:	b9b8      	cbnz	r0, 802f6d6 <__ssvfscanf_r+0x482>
 802f6a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f6a8:	441a      	add	r2, r3
 802f6aa:	4613      	mov	r3, r2
 802f6ac:	f1bb 0f00 	cmp.w	fp, #0
 802f6b0:	d00e      	beq.n	802f6d0 <__ssvfscanf_r+0x47c>
 802f6b2:	633b      	str	r3, [r7, #48]	@ 0x30
 802f6b4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802f6b8:	e019      	b.n	802f6ee <__ssvfscanf_r+0x49a>
 802f6ba:	f04f 0900 	mov.w	r9, #0
 802f6be:	62fd      	str	r5, [r7, #44]	@ 0x2c
 802f6c0:	464e      	mov	r6, r9
 802f6c2:	46ca      	mov	sl, r9
 802f6c4:	464d      	mov	r5, r9
 802f6c6:	e7bc      	b.n	802f642 <__ssvfscanf_r+0x3ee>
 802f6c8:	46d9      	mov	r9, fp
 802f6ca:	465e      	mov	r6, fp
 802f6cc:	46da      	mov	sl, fp
 802f6ce:	e7b8      	b.n	802f642 <__ssvfscanf_r+0x3ee>
 802f6d0:	f8c5 b000 	str.w	fp, [r5]
 802f6d4:	e7ed      	b.n	802f6b2 <__ssvfscanf_r+0x45e>
 802f6d6:	6a3a      	ldr	r2, [r7, #32]
 802f6d8:	3202      	adds	r2, #2
 802f6da:	d025      	beq.n	802f728 <__ssvfscanf_r+0x4d4>
 802f6dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802f6de:	441a      	add	r2, r3
 802f6e0:	6a3b      	ldr	r3, [r7, #32]
 802f6e2:	633a      	str	r2, [r7, #48]	@ 0x30
 802f6e4:	2b03      	cmp	r3, #3
 802f6e6:	d1e5      	bne.n	802f6b4 <__ssvfscanf_r+0x460>
 802f6e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802f6ea:	2b04      	cmp	r3, #4
 802f6ec:	d1e2      	bne.n	802f6b4 <__ssvfscanf_r+0x460>
 802f6ee:	f1bb 0f00 	cmp.w	fp, #0
 802f6f2:	d117      	bne.n	802f724 <__ssvfscanf_r+0x4d0>
 802f6f4:	f1ba 0f00 	cmp.w	sl, #0
 802f6f8:	d013      	beq.n	802f722 <__ssvfscanf_r+0x4ce>
 802f6fa:	1bab      	subs	r3, r5, r6
 802f6fc:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802f700:	d80f      	bhi.n	802f722 <__ssvfscanf_r+0x4ce>
 802f702:	4630      	mov	r0, r6
 802f704:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802f708:	613b      	str	r3, [r7, #16]
 802f70a:	f001 fbb9 	bl	8030e80 <realloc>
 802f70e:	4606      	mov	r6, r0
 802f710:	2800      	cmp	r0, #0
 802f712:	f43f af5a 	beq.w	802f5ca <__ssvfscanf_r+0x376>
 802f716:	693b      	ldr	r3, [r7, #16]
 802f718:	f8ca 0000 	str.w	r0, [sl]
 802f71c:	18c5      	adds	r5, r0, r3
 802f71e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802f722:	3504      	adds	r5, #4
 802f724:	2200      	movs	r2, #0
 802f726:	e000      	b.n	802f72a <__ssvfscanf_r+0x4d6>
 802f728:	461a      	mov	r2, r3
 802f72a:	6863      	ldr	r3, [r4, #4]
 802f72c:	2b00      	cmp	r3, #0
 802f72e:	dc14      	bgt.n	802f75a <__ssvfscanf_r+0x506>
 802f730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f732:	613a      	str	r2, [r7, #16]
 802f734:	4621      	mov	r1, r4
 802f736:	f7fd fbd8 	bl	802ceea <__ssrefill_r>
 802f73a:	693a      	ldr	r2, [r7, #16]
 802f73c:	b168      	cbz	r0, 802f75a <__ssvfscanf_r+0x506>
 802f73e:	2a00      	cmp	r2, #0
 802f740:	f47f ae4a 	bne.w	802f3d8 <__ssvfscanf_r+0x184>
 802f744:	f1ba 0f00 	cmp.w	sl, #0
 802f748:	d10c      	bne.n	802f764 <__ssvfscanf_r+0x510>
 802f74a:	f1bb 0f00 	cmp.w	fp, #0
 802f74e:	d102      	bne.n	802f756 <__ssvfscanf_r+0x502>
 802f750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f752:	3301      	adds	r3, #1
 802f754:	627b      	str	r3, [r7, #36]	@ 0x24
 802f756:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 802f758:	e597      	b.n	802f28a <__ssvfscanf_r+0x36>
 802f75a:	f1b8 0f00 	cmp.w	r8, #0
 802f75e:	f47f af71 	bne.w	802f644 <__ssvfscanf_r+0x3f0>
 802f762:	e7ef      	b.n	802f744 <__ssvfscanf_r+0x4f0>
 802f764:	1ba9      	subs	r1, r5, r6
 802f766:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 802f76a:	d9ee      	bls.n	802f74a <__ssvfscanf_r+0x4f6>
 802f76c:	f8da 0000 	ldr.w	r0, [sl]
 802f770:	f001 fb86 	bl	8030e80 <realloc>
 802f774:	2800      	cmp	r0, #0
 802f776:	d0e8      	beq.n	802f74a <__ssvfscanf_r+0x4f6>
 802f778:	f8ca 0000 	str.w	r0, [sl]
 802f77c:	e7e5      	b.n	802f74a <__ssvfscanf_r+0x4f6>
 802f77e:	f1bb 0f00 	cmp.w	fp, #0
 802f782:	d021      	beq.n	802f7c8 <__ssvfscanf_r+0x574>
 802f784:	461e      	mov	r6, r3
 802f786:	e9d4 2300 	ldrd	r2, r3, [r4]
 802f78a:	4598      	cmp	r8, r3
 802f78c:	dd11      	ble.n	802f7b2 <__ssvfscanf_r+0x55e>
 802f78e:	441a      	add	r2, r3
 802f790:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f792:	6022      	str	r2, [r4, #0]
 802f794:	4621      	mov	r1, r4
 802f796:	441e      	add	r6, r3
 802f798:	eba8 0803 	sub.w	r8, r8, r3
 802f79c:	f7fd fba5 	bl	802ceea <__ssrefill_r>
 802f7a0:	2800      	cmp	r0, #0
 802f7a2:	d0f0      	beq.n	802f786 <__ssvfscanf_r+0x532>
 802f7a4:	2e00      	cmp	r6, #0
 802f7a6:	f43f ae17 	beq.w	802f3d8 <__ssvfscanf_r+0x184>
 802f7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802f7ac:	4433      	add	r3, r6
 802f7ae:	633b      	str	r3, [r7, #48]	@ 0x30
 802f7b0:	e56b      	b.n	802f28a <__ssvfscanf_r+0x36>
 802f7b2:	eba3 0308 	sub.w	r3, r3, r8
 802f7b6:	4442      	add	r2, r8
 802f7b8:	4446      	add	r6, r8
 802f7ba:	6063      	str	r3, [r4, #4]
 802f7bc:	6022      	str	r2, [r4, #0]
 802f7be:	e7f4      	b.n	802f7aa <__ssvfscanf_r+0x556>
 802f7c0:	080291e9 	.word	0x080291e9
 802f7c4:	0803854d 	.word	0x0803854d
 802f7c8:	46a9      	mov	r9, r5
 802f7ca:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802f7ce:	f859 5b04 	ldr.w	r5, [r9], #4
 802f7d2:	d02c      	beq.n	802f82e <__ssvfscanf_r+0x5da>
 802f7d4:	2d00      	cmp	r5, #0
 802f7d6:	f43f ae33 	beq.w	802f440 <__ssvfscanf_r+0x1ec>
 802f7da:	4640      	mov	r0, r8
 802f7dc:	f7fc fbc6 	bl	802bf6c <malloc>
 802f7e0:	4682      	mov	sl, r0
 802f7e2:	2800      	cmp	r0, #0
 802f7e4:	f43f adfd 	beq.w	802f3e2 <__ssvfscanf_r+0x18e>
 802f7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f7ea:	6028      	str	r0, [r5, #0]
 802f7ec:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 802f7f0:	889e      	ldrh	r6, [r3, #4]
 802f7f2:	45b3      	cmp	fp, r6
 802f7f4:	d311      	bcc.n	802f81a <__ssvfscanf_r+0x5c6>
 802f7f6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802f7fa:	429e      	cmp	r6, r3
 802f7fc:	f200 8692 	bhi.w	8030524 <__ssvfscanf_r+0x12d0>
 802f800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f802:	3608      	adds	r6, #8
 802f804:	b2b6      	uxth	r6, r6
 802f806:	6818      	ldr	r0, [r3, #0]
 802f808:	00b1      	lsls	r1, r6, #2
 802f80a:	f001 fb39 	bl	8030e80 <realloc>
 802f80e:	2800      	cmp	r0, #0
 802f810:	f000 8688 	beq.w	8030524 <__ssvfscanf_r+0x12d0>
 802f814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f816:	6018      	str	r0, [r3, #0]
 802f818:	809e      	strh	r6, [r3, #4]
 802f81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f81c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802f81e:	681b      	ldr	r3, [r3, #0]
 802f820:	f10b 0201 	add.w	r2, fp, #1
 802f824:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 802f828:	462e      	mov	r6, r5
 802f82a:	80ca      	strh	r2, [r1, #6]
 802f82c:	4655      	mov	r5, sl
 802f82e:	9400      	str	r4, [sp, #0]
 802f830:	4629      	mov	r1, r5
 802f832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f834:	4643      	mov	r3, r8
 802f836:	2201      	movs	r2, #1
 802f838:	f7fd fb74 	bl	802cf24 <_sfread_r>
 802f83c:	4605      	mov	r5, r0
 802f83e:	2800      	cmp	r0, #0
 802f840:	f43f adca 	beq.w	802f3d8 <__ssvfscanf_r+0x184>
 802f844:	b13e      	cbz	r6, 802f856 <__ssvfscanf_r+0x602>
 802f846:	4580      	cmp	r8, r0
 802f848:	d905      	bls.n	802f856 <__ssvfscanf_r+0x602>
 802f84a:	4601      	mov	r1, r0
 802f84c:	6830      	ldr	r0, [r6, #0]
 802f84e:	f001 fb17 	bl	8030e80 <realloc>
 802f852:	b100      	cbz	r0, 802f856 <__ssvfscanf_r+0x602>
 802f854:	6030      	str	r0, [r6, #0]
 802f856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802f858:	442b      	add	r3, r5
 802f85a:	633b      	str	r3, [r7, #48]	@ 0x30
 802f85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f85e:	3301      	adds	r3, #1
 802f860:	627b      	str	r3, [r7, #36]	@ 0x24
 802f862:	464d      	mov	r5, r9
 802f864:	e511      	b.n	802f28a <__ssvfscanf_r+0x36>
 802f866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f868:	2b00      	cmp	r3, #0
 802f86a:	bf08      	it	eq
 802f86c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802f870:	f016 0801 	ands.w	r8, r6, #1
 802f874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f876:	f006 0a10 	and.w	sl, r6, #16
 802f87a:	f000 8101 	beq.w	802fa80 <__ssvfscanf_r+0x82c>
 802f87e:	f1ba 0f00 	cmp.w	sl, #0
 802f882:	f040 80a4 	bne.w	802f9ce <__ssvfscanf_r+0x77a>
 802f886:	462b      	mov	r3, r5
 802f888:	f853 5b04 	ldr.w	r5, [r3], #4
 802f88c:	60fb      	str	r3, [r7, #12]
 802f88e:	0633      	lsls	r3, r6, #24
 802f890:	f140 80a5 	bpl.w	802f9de <__ssvfscanf_r+0x78a>
 802f894:	2d00      	cmp	r5, #0
 802f896:	f43f ae9b 	beq.w	802f5d0 <__ssvfscanf_r+0x37c>
 802f89a:	2080      	movs	r0, #128	@ 0x80
 802f89c:	f7fc fb66 	bl	802bf6c <malloc>
 802f8a0:	4680      	mov	r8, r0
 802f8a2:	2800      	cmp	r0, #0
 802f8a4:	f43f ae91 	beq.w	802f5ca <__ssvfscanf_r+0x376>
 802f8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f8aa:	6028      	str	r0, [r5, #0]
 802f8ac:	88de      	ldrh	r6, [r3, #6]
 802f8ae:	889b      	ldrh	r3, [r3, #4]
 802f8b0:	429e      	cmp	r6, r3
 802f8b2:	d314      	bcc.n	802f8de <__ssvfscanf_r+0x68a>
 802f8b4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802f8b8:	4293      	cmp	r3, r2
 802f8ba:	f200 8633 	bhi.w	8030524 <__ssvfscanf_r+0x12d0>
 802f8be:	3308      	adds	r3, #8
 802f8c0:	fa1f f983 	uxth.w	r9, r3
 802f8c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f8c6:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802f8ca:	6818      	ldr	r0, [r3, #0]
 802f8cc:	f001 fad8 	bl	8030e80 <realloc>
 802f8d0:	2800      	cmp	r0, #0
 802f8d2:	f000 8627 	beq.w	8030524 <__ssvfscanf_r+0x12d0>
 802f8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f8d8:	6018      	str	r0, [r3, #0]
 802f8da:	f8a3 9004 	strh.w	r9, [r3, #4]
 802f8de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f8e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802f8e2:	681b      	ldr	r3, [r3, #0]
 802f8e4:	1c72      	adds	r2, r6, #1
 802f8e6:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 802f8ea:	46ab      	mov	fp, r5
 802f8ec:	80ca      	strh	r2, [r1, #6]
 802f8ee:	4645      	mov	r5, r8
 802f8f0:	f04f 0920 	mov.w	r9, #32
 802f8f4:	2600      	movs	r6, #0
 802f8f6:	f7fb fa7b 	bl	802adf0 <__locale_mb_cur_max>
 802f8fa:	42b0      	cmp	r0, r6
 802f8fc:	f43f ad6c 	beq.w	802f3d8 <__ssvfscanf_r+0x184>
 802f900:	1c73      	adds	r3, r6, #1
 802f902:	613b      	str	r3, [r7, #16]
 802f904:	6823      	ldr	r3, [r4, #0]
 802f906:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802f90a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f90e:	558a      	strb	r2, [r1, r6]
 802f910:	6862      	ldr	r2, [r4, #4]
 802f912:	3a01      	subs	r2, #1
 802f914:	e9c4 3200 	strd	r3, r2, [r4]
 802f918:	6a3b      	ldr	r3, [r7, #32]
 802f91a:	2b03      	cmp	r3, #3
 802f91c:	d102      	bne.n	802f924 <__ssvfscanf_r+0x6d0>
 802f91e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802f920:	2b04      	cmp	r3, #4
 802f922:	d005      	beq.n	802f930 <__ssvfscanf_r+0x6dc>
 802f924:	2208      	movs	r2, #8
 802f926:	2100      	movs	r1, #0
 802f928:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802f92c:	f7fa f8d8 	bl	8029ae0 <memset>
 802f930:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802f934:	9300      	str	r3, [sp, #0]
 802f936:	693b      	ldr	r3, [r7, #16]
 802f938:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f93a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802f93e:	4629      	mov	r1, r5
 802f940:	f002 fe58 	bl	80325f4 <_mbrtowc_r>
 802f944:	1c46      	adds	r6, r0, #1
 802f946:	6238      	str	r0, [r7, #32]
 802f948:	f43f ad46 	beq.w	802f3d8 <__ssvfscanf_r+0x184>
 802f94c:	2800      	cmp	r0, #0
 802f94e:	d14a      	bne.n	802f9e6 <__ssvfscanf_r+0x792>
 802f950:	6028      	str	r0, [r5, #0]
 802f952:	682e      	ldr	r6, [r5, #0]
 802f954:	1c70      	adds	r0, r6, #1
 802f956:	d056      	beq.n	802fa06 <__ssvfscanf_r+0x7b2>
 802f958:	2208      	movs	r2, #8
 802f95a:	2100      	movs	r1, #0
 802f95c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802f960:	f7fa f8be 	bl	8029ae0 <memset>
 802f964:	4b9a      	ldr	r3, [pc, #616]	@ (802fbd0 <__ssvfscanf_r+0x97c>)
 802f966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802f96c:	60bb      	str	r3, [r7, #8]
 802f96e:	4632      	mov	r2, r6
 802f970:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802f974:	68be      	ldr	r6, [r7, #8]
 802f976:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 802f97a:	47b0      	blx	r6
 802f97c:	2801      	cmp	r0, #1
 802f97e:	d144      	bne.n	802fa0a <__ssvfscanf_r+0x7b6>
 802f980:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 802f984:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802f988:	5c9b      	ldrb	r3, [r3, r2]
 802f98a:	2b00      	cmp	r3, #0
 802f98c:	d148      	bne.n	802fa20 <__ssvfscanf_r+0x7cc>
 802f98e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 802f992:	693b      	ldr	r3, [r7, #16]
 802f994:	2b00      	cmp	r3, #0
 802f996:	d13a      	bne.n	802fa0e <__ssvfscanf_r+0x7ba>
 802f998:	f1ba 0f00 	cmp.w	sl, #0
 802f99c:	d115      	bne.n	802f9ca <__ssvfscanf_r+0x776>
 802f99e:	f8c5 a000 	str.w	sl, [r5]
 802f9a2:	f1bb 0f00 	cmp.w	fp, #0
 802f9a6:	d00d      	beq.n	802f9c4 <__ssvfscanf_r+0x770>
 802f9a8:	eba5 0108 	sub.w	r1, r5, r8
 802f9ac:	108b      	asrs	r3, r1, #2
 802f9ae:	3301      	adds	r3, #1
 802f9b0:	4599      	cmp	r9, r3
 802f9b2:	d907      	bls.n	802f9c4 <__ssvfscanf_r+0x770>
 802f9b4:	f8db 0000 	ldr.w	r0, [fp]
 802f9b8:	3104      	adds	r1, #4
 802f9ba:	f001 fa61 	bl	8030e80 <realloc>
 802f9be:	b108      	cbz	r0, 802f9c4 <__ssvfscanf_r+0x770>
 802f9c0:	f8cb 0000 	str.w	r0, [fp]
 802f9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f9c6:	3301      	adds	r3, #1
 802f9c8:	627b      	str	r3, [r7, #36]	@ 0x24
 802f9ca:	68fd      	ldr	r5, [r7, #12]
 802f9cc:	e45d      	b.n	802f28a <__ssvfscanf_r+0x36>
 802f9ce:	f04f 0900 	mov.w	r9, #0
 802f9d2:	60fd      	str	r5, [r7, #12]
 802f9d4:	46c8      	mov	r8, r9
 802f9d6:	46cb      	mov	fp, r9
 802f9d8:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 802f9dc:	e78a      	b.n	802f8f4 <__ssvfscanf_r+0x6a0>
 802f9de:	46d1      	mov	r9, sl
 802f9e0:	46d0      	mov	r8, sl
 802f9e2:	46d3      	mov	fp, sl
 802f9e4:	e786      	b.n	802f8f4 <__ssvfscanf_r+0x6a0>
 802f9e6:	6a3b      	ldr	r3, [r7, #32]
 802f9e8:	3302      	adds	r3, #2
 802f9ea:	d1b2      	bne.n	802f952 <__ssvfscanf_r+0x6fe>
 802f9ec:	693e      	ldr	r6, [r7, #16]
 802f9ee:	6863      	ldr	r3, [r4, #4]
 802f9f0:	2b00      	cmp	r3, #0
 802f9f2:	dc40      	bgt.n	802fa76 <__ssvfscanf_r+0x822>
 802f9f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802f9f6:	4621      	mov	r1, r4
 802f9f8:	f7fd fa77 	bl	802ceea <__ssrefill_r>
 802f9fc:	2800      	cmp	r0, #0
 802f9fe:	d03a      	beq.n	802fa76 <__ssvfscanf_r+0x822>
 802fa00:	2e00      	cmp	r6, #0
 802fa02:	d0c9      	beq.n	802f998 <__ssvfscanf_r+0x744>
 802fa04:	e4e8      	b.n	802f3d8 <__ssvfscanf_r+0x184>
 802fa06:	4632      	mov	r2, r6
 802fa08:	e7bc      	b.n	802f984 <__ssvfscanf_r+0x730>
 802fa0a:	2200      	movs	r2, #0
 802fa0c:	e7ba      	b.n	802f984 <__ssvfscanf_r+0x730>
 802fa0e:	693b      	ldr	r3, [r7, #16]
 802fa10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fa12:	3b01      	subs	r3, #1
 802fa14:	4622      	mov	r2, r4
 802fa16:	5cf1      	ldrb	r1, [r6, r3]
 802fa18:	613b      	str	r3, [r7, #16]
 802fa1a:	f7fd fa2b 	bl	802ce74 <_sungetc_r>
 802fa1e:	e7b8      	b.n	802f992 <__ssvfscanf_r+0x73e>
 802fa20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802fa22:	693a      	ldr	r2, [r7, #16]
 802fa24:	4413      	add	r3, r2
 802fa26:	633b      	str	r3, [r7, #48]	@ 0x30
 802fa28:	6a3b      	ldr	r3, [r7, #32]
 802fa2a:	2b03      	cmp	r3, #3
 802fa2c:	d102      	bne.n	802fa34 <__ssvfscanf_r+0x7e0>
 802fa2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802fa30:	2b04      	cmp	r3, #4
 802fa32:	d002      	beq.n	802fa3a <__ssvfscanf_r+0x7e6>
 802fa34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fa36:	3b01      	subs	r3, #1
 802fa38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fa3a:	f1ba 0f00 	cmp.w	sl, #0
 802fa3e:	d118      	bne.n	802fa72 <__ssvfscanf_r+0x81e>
 802fa40:	3504      	adds	r5, #4
 802fa42:	f1bb 0f00 	cmp.w	fp, #0
 802fa46:	d014      	beq.n	802fa72 <__ssvfscanf_r+0x81e>
 802fa48:	eba5 0608 	sub.w	r6, r5, r8
 802fa4c:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 802fa50:	d80d      	bhi.n	802fa6e <__ssvfscanf_r+0x81a>
 802fa52:	4640      	mov	r0, r8
 802fa54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802fa58:	f001 fa12 	bl	8030e80 <realloc>
 802fa5c:	4680      	mov	r8, r0
 802fa5e:	2800      	cmp	r0, #0
 802fa60:	f43f adb3 	beq.w	802f5ca <__ssvfscanf_r+0x376>
 802fa64:	1985      	adds	r5, r0, r6
 802fa66:	f8cb 0000 	str.w	r0, [fp]
 802fa6a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802fa6e:	4656      	mov	r6, sl
 802fa70:	e7bd      	b.n	802f9ee <__ssvfscanf_r+0x79a>
 802fa72:	2600      	movs	r6, #0
 802fa74:	e7bb      	b.n	802f9ee <__ssvfscanf_r+0x79a>
 802fa76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fa78:	2b00      	cmp	r3, #0
 802fa7a:	f47f af3c 	bne.w	802f8f6 <__ssvfscanf_r+0x6a2>
 802fa7e:	e78b      	b.n	802f998 <__ssvfscanf_r+0x744>
 802fa80:	f1ba 0f00 	cmp.w	sl, #0
 802fa84:	d01e      	beq.n	802fac4 <__ssvfscanf_r+0x870>
 802fa86:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 802fa8a:	6823      	ldr	r3, [r4, #0]
 802fa8c:	781a      	ldrb	r2, [r3, #0]
 802fa8e:	5cb2      	ldrb	r2, [r6, r2]
 802fa90:	b91a      	cbnz	r2, 802fa9a <__ssvfscanf_r+0x846>
 802fa92:	f1b8 0f00 	cmp.w	r8, #0
 802fa96:	d112      	bne.n	802fabe <__ssvfscanf_r+0x86a>
 802fa98:	e4d2      	b.n	802f440 <__ssvfscanf_r+0x1ec>
 802fa9a:	3301      	adds	r3, #1
 802fa9c:	6862      	ldr	r2, [r4, #4]
 802fa9e:	6023      	str	r3, [r4, #0]
 802faa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802faa2:	f108 0801 	add.w	r8, r8, #1
 802faa6:	3a01      	subs	r2, #1
 802faa8:	4543      	cmp	r3, r8
 802faaa:	6062      	str	r2, [r4, #4]
 802faac:	d007      	beq.n	802fabe <__ssvfscanf_r+0x86a>
 802faae:	2a00      	cmp	r2, #0
 802fab0:	dceb      	bgt.n	802fa8a <__ssvfscanf_r+0x836>
 802fab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fab4:	4621      	mov	r1, r4
 802fab6:	f7fd fa18 	bl	802ceea <__ssrefill_r>
 802faba:	2800      	cmp	r0, #0
 802fabc:	d0e5      	beq.n	802fa8a <__ssvfscanf_r+0x836>
 802fabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802fac0:	4443      	add	r3, r8
 802fac2:	e674      	b.n	802f7ae <__ssvfscanf_r+0x55a>
 802fac4:	46a9      	mov	r9, r5
 802fac6:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802faca:	f859 8b04 	ldr.w	r8, [r9], #4
 802face:	d07d      	beq.n	802fbcc <__ssvfscanf_r+0x978>
 802fad0:	f1b8 0f00 	cmp.w	r8, #0
 802fad4:	f43f acb4 	beq.w	802f440 <__ssvfscanf_r+0x1ec>
 802fad8:	2020      	movs	r0, #32
 802fada:	f7fc fa47 	bl	802bf6c <malloc>
 802fade:	4606      	mov	r6, r0
 802fae0:	2800      	cmp	r0, #0
 802fae2:	f43f ac7e 	beq.w	802f3e2 <__ssvfscanf_r+0x18e>
 802fae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fae8:	f8c8 0000 	str.w	r0, [r8]
 802faec:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 802faf0:	889d      	ldrh	r5, [r3, #4]
 802faf2:	45aa      	cmp	sl, r5
 802faf4:	d311      	bcc.n	802fb1a <__ssvfscanf_r+0x8c6>
 802faf6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802fafa:	429d      	cmp	r5, r3
 802fafc:	f200 8512 	bhi.w	8030524 <__ssvfscanf_r+0x12d0>
 802fb00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fb02:	3508      	adds	r5, #8
 802fb04:	b2ad      	uxth	r5, r5
 802fb06:	6818      	ldr	r0, [r3, #0]
 802fb08:	00a9      	lsls	r1, r5, #2
 802fb0a:	f001 f9b9 	bl	8030e80 <realloc>
 802fb0e:	2800      	cmp	r0, #0
 802fb10:	f000 8508 	beq.w	8030524 <__ssvfscanf_r+0x12d0>
 802fb14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fb16:	6018      	str	r0, [r3, #0]
 802fb18:	809d      	strh	r5, [r3, #4]
 802fb1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fb1c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802fb1e:	681b      	ldr	r3, [r3, #0]
 802fb20:	f10a 0201 	add.w	r2, sl, #1
 802fb24:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 802fb28:	80ca      	strh	r2, [r1, #6]
 802fb2a:	46c2      	mov	sl, r8
 802fb2c:	46b0      	mov	r8, r6
 802fb2e:	2620      	movs	r6, #32
 802fb30:	4645      	mov	r5, r8
 802fb32:	6823      	ldr	r3, [r4, #0]
 802fb34:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 802fb38:	781a      	ldrb	r2, [r3, #0]
 802fb3a:	5c8a      	ldrb	r2, [r1, r2]
 802fb3c:	b35a      	cbz	r2, 802fb96 <__ssvfscanf_r+0x942>
 802fb3e:	6862      	ldr	r2, [r4, #4]
 802fb40:	3a01      	subs	r2, #1
 802fb42:	6062      	str	r2, [r4, #4]
 802fb44:	1c5a      	adds	r2, r3, #1
 802fb46:	6022      	str	r2, [r4, #0]
 802fb48:	781b      	ldrb	r3, [r3, #0]
 802fb4a:	f808 3b01 	strb.w	r3, [r8], #1
 802fb4e:	f1ba 0f00 	cmp.w	sl, #0
 802fb52:	d010      	beq.n	802fb76 <__ssvfscanf_r+0x922>
 802fb54:	eba8 0b05 	sub.w	fp, r8, r5
 802fb58:	45b3      	cmp	fp, r6
 802fb5a:	d30c      	bcc.n	802fb76 <__ssvfscanf_r+0x922>
 802fb5c:	0076      	lsls	r6, r6, #1
 802fb5e:	4628      	mov	r0, r5
 802fb60:	4631      	mov	r1, r6
 802fb62:	f001 f98d 	bl	8030e80 <realloc>
 802fb66:	4605      	mov	r5, r0
 802fb68:	2800      	cmp	r0, #0
 802fb6a:	f43f ac3a 	beq.w	802f3e2 <__ssvfscanf_r+0x18e>
 802fb6e:	eb00 080b 	add.w	r8, r0, fp
 802fb72:	f8ca 0000 	str.w	r0, [sl]
 802fb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fb78:	3b01      	subs	r3, #1
 802fb7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fb7c:	d00b      	beq.n	802fb96 <__ssvfscanf_r+0x942>
 802fb7e:	6863      	ldr	r3, [r4, #4]
 802fb80:	2b00      	cmp	r3, #0
 802fb82:	dcd6      	bgt.n	802fb32 <__ssvfscanf_r+0x8de>
 802fb84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fb86:	4621      	mov	r1, r4
 802fb88:	f7fd f9af 	bl	802ceea <__ssrefill_r>
 802fb8c:	2800      	cmp	r0, #0
 802fb8e:	d0d0      	beq.n	802fb32 <__ssvfscanf_r+0x8de>
 802fb90:	45a8      	cmp	r8, r5
 802fb92:	f43f ac21 	beq.w	802f3d8 <__ssvfscanf_r+0x184>
 802fb96:	ebb8 0505 	subs.w	r5, r8, r5
 802fb9a:	f43f ac51 	beq.w	802f440 <__ssvfscanf_r+0x1ec>
 802fb9e:	2300      	movs	r3, #0
 802fba0:	f888 3000 	strb.w	r3, [r8]
 802fba4:	f1ba 0f00 	cmp.w	sl, #0
 802fba8:	d009      	beq.n	802fbbe <__ssvfscanf_r+0x96a>
 802fbaa:	1c69      	adds	r1, r5, #1
 802fbac:	428e      	cmp	r6, r1
 802fbae:	d906      	bls.n	802fbbe <__ssvfscanf_r+0x96a>
 802fbb0:	f8da 0000 	ldr.w	r0, [sl]
 802fbb4:	f001 f964 	bl	8030e80 <realloc>
 802fbb8:	b108      	cbz	r0, 802fbbe <__ssvfscanf_r+0x96a>
 802fbba:	f8ca 0000 	str.w	r0, [sl]
 802fbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802fbc0:	3301      	adds	r3, #1
 802fbc2:	627b      	str	r3, [r7, #36]	@ 0x24
 802fbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802fbc6:	442b      	add	r3, r5
 802fbc8:	633b      	str	r3, [r7, #48]	@ 0x30
 802fbca:	e64a      	b.n	802f862 <__ssvfscanf_r+0x60e>
 802fbcc:	46b2      	mov	sl, r6
 802fbce:	e7af      	b.n	802fb30 <__ssvfscanf_r+0x8dc>
 802fbd0:	200000e8 	.word	0x200000e8
 802fbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fbd6:	2b00      	cmp	r3, #0
 802fbd8:	bf08      	it	eq
 802fbda:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802fbde:	f016 0901 	ands.w	r9, r6, #1
 802fbe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fbe4:	f006 0810 	and.w	r8, r6, #16
 802fbe8:	f000 80ef 	beq.w	802fdca <__ssvfscanf_r+0xb76>
 802fbec:	f1b8 0f00 	cmp.w	r8, #0
 802fbf0:	f040 8098 	bne.w	802fd24 <__ssvfscanf_r+0xad0>
 802fbf4:	462b      	mov	r3, r5
 802fbf6:	0631      	lsls	r1, r6, #24
 802fbf8:	f853 5b04 	ldr.w	r5, [r3], #4
 802fbfc:	613b      	str	r3, [r7, #16]
 802fbfe:	f140 8099 	bpl.w	802fd34 <__ssvfscanf_r+0xae0>
 802fc02:	2d00      	cmp	r5, #0
 802fc04:	f43f ace4 	beq.w	802f5d0 <__ssvfscanf_r+0x37c>
 802fc08:	2080      	movs	r0, #128	@ 0x80
 802fc0a:	f7fc f9af 	bl	802bf6c <malloc>
 802fc0e:	4606      	mov	r6, r0
 802fc10:	2800      	cmp	r0, #0
 802fc12:	f43f acda 	beq.w	802f5ca <__ssvfscanf_r+0x376>
 802fc16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fc18:	6028      	str	r0, [r5, #0]
 802fc1a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 802fc1e:	889b      	ldrh	r3, [r3, #4]
 802fc20:	4599      	cmp	r9, r3
 802fc22:	d314      	bcc.n	802fc4e <__ssvfscanf_r+0x9fa>
 802fc24:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802fc28:	4293      	cmp	r3, r2
 802fc2a:	f200 847b 	bhi.w	8030524 <__ssvfscanf_r+0x12d0>
 802fc2e:	3308      	adds	r3, #8
 802fc30:	fa1f fa83 	uxth.w	sl, r3
 802fc34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fc36:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802fc3a:	6818      	ldr	r0, [r3, #0]
 802fc3c:	f001 f920 	bl	8030e80 <realloc>
 802fc40:	2800      	cmp	r0, #0
 802fc42:	f000 846f 	beq.w	8030524 <__ssvfscanf_r+0x12d0>
 802fc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fc48:	6018      	str	r0, [r3, #0]
 802fc4a:	f8a3 a004 	strh.w	sl, [r3, #4]
 802fc4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fc50:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802fc52:	681b      	ldr	r3, [r3, #0]
 802fc54:	f109 0201 	add.w	r2, r9, #1
 802fc58:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802fc5c:	46aa      	mov	sl, r5
 802fc5e:	80ca      	strh	r2, [r1, #6]
 802fc60:	4635      	mov	r5, r6
 802fc62:	f04f 0920 	mov.w	r9, #32
 802fc66:	2300      	movs	r3, #0
 802fc68:	6822      	ldr	r2, [r4, #0]
 802fc6a:	49a7      	ldr	r1, [pc, #668]	@ (802ff08 <__ssvfscanf_r+0xcb4>)
 802fc6c:	7812      	ldrb	r2, [r2, #0]
 802fc6e:	5c8a      	ldrb	r2, [r1, r2]
 802fc70:	0710      	lsls	r0, r2, #28
 802fc72:	d43c      	bmi.n	802fcee <__ssvfscanf_r+0xa9a>
 802fc74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fc76:	2a00      	cmp	r2, #0
 802fc78:	d039      	beq.n	802fcee <__ssvfscanf_r+0xa9a>
 802fc7a:	60fb      	str	r3, [r7, #12]
 802fc7c:	f7fb f8b8 	bl	802adf0 <__locale_mb_cur_max>
 802fc80:	68fb      	ldr	r3, [r7, #12]
 802fc82:	4298      	cmp	r0, r3
 802fc84:	f43f aba8 	beq.w	802f3d8 <__ssvfscanf_r+0x184>
 802fc88:	6822      	ldr	r2, [r4, #0]
 802fc8a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802fc8e:	f812 0b01 	ldrb.w	r0, [r2], #1
 802fc92:	54c8      	strb	r0, [r1, r3]
 802fc94:	f103 0b01 	add.w	fp, r3, #1
 802fc98:	6863      	ldr	r3, [r4, #4]
 802fc9a:	3b01      	subs	r3, #1
 802fc9c:	e9c4 2300 	strd	r2, r3, [r4]
 802fca0:	6a3b      	ldr	r3, [r7, #32]
 802fca2:	2b03      	cmp	r3, #3
 802fca4:	d102      	bne.n	802fcac <__ssvfscanf_r+0xa58>
 802fca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802fca8:	2b04      	cmp	r3, #4
 802fcaa:	d005      	beq.n	802fcb8 <__ssvfscanf_r+0xa64>
 802fcac:	2208      	movs	r2, #8
 802fcae:	2100      	movs	r1, #0
 802fcb0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802fcb4:	f7f9 ff14 	bl	8029ae0 <memset>
 802fcb8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802fcbc:	9300      	str	r3, [sp, #0]
 802fcbe:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802fcc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fcc4:	465b      	mov	r3, fp
 802fcc6:	4629      	mov	r1, r5
 802fcc8:	f002 fc94 	bl	80325f4 <_mbrtowc_r>
 802fccc:	1c42      	adds	r2, r0, #1
 802fcce:	6238      	str	r0, [r7, #32]
 802fcd0:	f43f ab82 	beq.w	802f3d8 <__ssvfscanf_r+0x184>
 802fcd4:	bb90      	cbnz	r0, 802fd3c <__ssvfscanf_r+0xae8>
 802fcd6:	6028      	str	r0, [r5, #0]
 802fcd8:	6828      	ldr	r0, [r5, #0]
 802fcda:	f002 fca5 	bl	8032628 <iswspace>
 802fcde:	4603      	mov	r3, r0
 802fce0:	2800      	cmp	r0, #0
 802fce2:	d047      	beq.n	802fd74 <__ssvfscanf_r+0xb20>
 802fce4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802fce8:	f1bb 0f00 	cmp.w	fp, #0
 802fcec:	d139      	bne.n	802fd62 <__ssvfscanf_r+0xb0e>
 802fcee:	f1b8 0f00 	cmp.w	r8, #0
 802fcf2:	d114      	bne.n	802fd1e <__ssvfscanf_r+0xaca>
 802fcf4:	f8c5 8000 	str.w	r8, [r5]
 802fcf8:	f1ba 0f00 	cmp.w	sl, #0
 802fcfc:	d00c      	beq.n	802fd18 <__ssvfscanf_r+0xac4>
 802fcfe:	1ba9      	subs	r1, r5, r6
 802fd00:	108b      	asrs	r3, r1, #2
 802fd02:	3301      	adds	r3, #1
 802fd04:	4599      	cmp	r9, r3
 802fd06:	d907      	bls.n	802fd18 <__ssvfscanf_r+0xac4>
 802fd08:	f8da 0000 	ldr.w	r0, [sl]
 802fd0c:	3104      	adds	r1, #4
 802fd0e:	f001 f8b7 	bl	8030e80 <realloc>
 802fd12:	b108      	cbz	r0, 802fd18 <__ssvfscanf_r+0xac4>
 802fd14:	f8ca 0000 	str.w	r0, [sl]
 802fd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802fd1a:	3301      	adds	r3, #1
 802fd1c:	627b      	str	r3, [r7, #36]	@ 0x24
 802fd1e:	693d      	ldr	r5, [r7, #16]
 802fd20:	f7ff bab3 	b.w	802f28a <__ssvfscanf_r+0x36>
 802fd24:	f04f 0900 	mov.w	r9, #0
 802fd28:	613d      	str	r5, [r7, #16]
 802fd2a:	464e      	mov	r6, r9
 802fd2c:	46ca      	mov	sl, r9
 802fd2e:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 802fd32:	e798      	b.n	802fc66 <__ssvfscanf_r+0xa12>
 802fd34:	46c1      	mov	r9, r8
 802fd36:	4646      	mov	r6, r8
 802fd38:	46c2      	mov	sl, r8
 802fd3a:	e794      	b.n	802fc66 <__ssvfscanf_r+0xa12>
 802fd3c:	6a3b      	ldr	r3, [r7, #32]
 802fd3e:	3302      	adds	r3, #2
 802fd40:	d1ca      	bne.n	802fcd8 <__ssvfscanf_r+0xa84>
 802fd42:	465b      	mov	r3, fp
 802fd44:	6862      	ldr	r2, [r4, #4]
 802fd46:	2a00      	cmp	r2, #0
 802fd48:	dc8e      	bgt.n	802fc68 <__ssvfscanf_r+0xa14>
 802fd4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fd4c:	60fb      	str	r3, [r7, #12]
 802fd4e:	4621      	mov	r1, r4
 802fd50:	f7fd f8cb 	bl	802ceea <__ssrefill_r>
 802fd54:	68fb      	ldr	r3, [r7, #12]
 802fd56:	2800      	cmp	r0, #0
 802fd58:	d086      	beq.n	802fc68 <__ssvfscanf_r+0xa14>
 802fd5a:	2b00      	cmp	r3, #0
 802fd5c:	f47f ab3c 	bne.w	802f3d8 <__ssvfscanf_r+0x184>
 802fd60:	e7c5      	b.n	802fcee <__ssvfscanf_r+0xa9a>
 802fd62:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802fd66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fd68:	f813 100b 	ldrb.w	r1, [r3, fp]
 802fd6c:	4622      	mov	r2, r4
 802fd6e:	f7fd f881 	bl	802ce74 <_sungetc_r>
 802fd72:	e7b7      	b.n	802fce4 <__ssvfscanf_r+0xa90>
 802fd74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802fd76:	445a      	add	r2, fp
 802fd78:	633a      	str	r2, [r7, #48]	@ 0x30
 802fd7a:	6a3a      	ldr	r2, [r7, #32]
 802fd7c:	2a03      	cmp	r2, #3
 802fd7e:	d102      	bne.n	802fd86 <__ssvfscanf_r+0xb32>
 802fd80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802fd82:	2a04      	cmp	r2, #4
 802fd84:	d002      	beq.n	802fd8c <__ssvfscanf_r+0xb38>
 802fd86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fd88:	3a01      	subs	r2, #1
 802fd8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802fd8c:	f1b8 0f00 	cmp.w	r8, #0
 802fd90:	d1d8      	bne.n	802fd44 <__ssvfscanf_r+0xaf0>
 802fd92:	3504      	adds	r5, #4
 802fd94:	f1ba 0f00 	cmp.w	sl, #0
 802fd98:	d015      	beq.n	802fdc6 <__ssvfscanf_r+0xb72>
 802fd9a:	eba5 0b06 	sub.w	fp, r5, r6
 802fd9e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 802fda2:	d80e      	bhi.n	802fdc2 <__ssvfscanf_r+0xb6e>
 802fda4:	4630      	mov	r0, r6
 802fda6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802fdaa:	f001 f869 	bl	8030e80 <realloc>
 802fdae:	4606      	mov	r6, r0
 802fdb0:	2800      	cmp	r0, #0
 802fdb2:	f43f ac0a 	beq.w	802f5ca <__ssvfscanf_r+0x376>
 802fdb6:	eb00 050b 	add.w	r5, r0, fp
 802fdba:	f8ca 0000 	str.w	r0, [sl]
 802fdbe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802fdc2:	4643      	mov	r3, r8
 802fdc4:	e7be      	b.n	802fd44 <__ssvfscanf_r+0xaf0>
 802fdc6:	4653      	mov	r3, sl
 802fdc8:	e7bc      	b.n	802fd44 <__ssvfscanf_r+0xaf0>
 802fdca:	f1b8 0f00 	cmp.w	r8, #0
 802fdce:	d01a      	beq.n	802fe06 <__ssvfscanf_r+0xbb2>
 802fdd0:	4e4d      	ldr	r6, [pc, #308]	@ (802ff08 <__ssvfscanf_r+0xcb4>)
 802fdd2:	6823      	ldr	r3, [r4, #0]
 802fdd4:	781a      	ldrb	r2, [r3, #0]
 802fdd6:	5cb2      	ldrb	r2, [r6, r2]
 802fdd8:	0711      	lsls	r1, r2, #28
 802fdda:	d411      	bmi.n	802fe00 <__ssvfscanf_r+0xbac>
 802fddc:	3301      	adds	r3, #1
 802fdde:	6862      	ldr	r2, [r4, #4]
 802fde0:	6023      	str	r3, [r4, #0]
 802fde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fde4:	f109 0901 	add.w	r9, r9, #1
 802fde8:	3a01      	subs	r2, #1
 802fdea:	454b      	cmp	r3, r9
 802fdec:	6062      	str	r2, [r4, #4]
 802fdee:	d007      	beq.n	802fe00 <__ssvfscanf_r+0xbac>
 802fdf0:	2a00      	cmp	r2, #0
 802fdf2:	dcee      	bgt.n	802fdd2 <__ssvfscanf_r+0xb7e>
 802fdf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fdf6:	4621      	mov	r1, r4
 802fdf8:	f7fd f877 	bl	802ceea <__ssrefill_r>
 802fdfc:	2800      	cmp	r0, #0
 802fdfe:	d0e8      	beq.n	802fdd2 <__ssvfscanf_r+0xb7e>
 802fe00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802fe02:	444b      	add	r3, r9
 802fe04:	e4d3      	b.n	802f7ae <__ssvfscanf_r+0x55a>
 802fe06:	46a8      	mov	r8, r5
 802fe08:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802fe0c:	f858 5b04 	ldr.w	r5, [r8], #4
 802fe10:	d077      	beq.n	802ff02 <__ssvfscanf_r+0xcae>
 802fe12:	2d00      	cmp	r5, #0
 802fe14:	f43f ab14 	beq.w	802f440 <__ssvfscanf_r+0x1ec>
 802fe18:	2020      	movs	r0, #32
 802fe1a:	f7fc f8a7 	bl	802bf6c <malloc>
 802fe1e:	4681      	mov	r9, r0
 802fe20:	2800      	cmp	r0, #0
 802fe22:	f43f aade 	beq.w	802f3e2 <__ssvfscanf_r+0x18e>
 802fe26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fe28:	6028      	str	r0, [r5, #0]
 802fe2a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 802fe2e:	889e      	ldrh	r6, [r3, #4]
 802fe30:	45b2      	cmp	sl, r6
 802fe32:	d311      	bcc.n	802fe58 <__ssvfscanf_r+0xc04>
 802fe34:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802fe38:	429e      	cmp	r6, r3
 802fe3a:	f200 8373 	bhi.w	8030524 <__ssvfscanf_r+0x12d0>
 802fe3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fe40:	3608      	adds	r6, #8
 802fe42:	b2b6      	uxth	r6, r6
 802fe44:	6818      	ldr	r0, [r3, #0]
 802fe46:	00b1      	lsls	r1, r6, #2
 802fe48:	f001 f81a 	bl	8030e80 <realloc>
 802fe4c:	2800      	cmp	r0, #0
 802fe4e:	f000 8369 	beq.w	8030524 <__ssvfscanf_r+0x12d0>
 802fe52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fe54:	6018      	str	r0, [r3, #0]
 802fe56:	809e      	strh	r6, [r3, #4]
 802fe58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802fe5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802fe5c:	681b      	ldr	r3, [r3, #0]
 802fe5e:	f10a 0201 	add.w	r2, sl, #1
 802fe62:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802fe66:	80ca      	strh	r2, [r1, #6]
 802fe68:	46aa      	mov	sl, r5
 802fe6a:	2620      	movs	r6, #32
 802fe6c:	464d      	mov	r5, r9
 802fe6e:	46a9      	mov	r9, r5
 802fe70:	6823      	ldr	r3, [r4, #0]
 802fe72:	4925      	ldr	r1, [pc, #148]	@ (802ff08 <__ssvfscanf_r+0xcb4>)
 802fe74:	781a      	ldrb	r2, [r3, #0]
 802fe76:	5c8a      	ldrb	r2, [r1, r2]
 802fe78:	0712      	lsls	r2, r2, #28
 802fe7a:	d428      	bmi.n	802fece <__ssvfscanf_r+0xc7a>
 802fe7c:	6862      	ldr	r2, [r4, #4]
 802fe7e:	3a01      	subs	r2, #1
 802fe80:	6062      	str	r2, [r4, #4]
 802fe82:	1c5a      	adds	r2, r3, #1
 802fe84:	6022      	str	r2, [r4, #0]
 802fe86:	781b      	ldrb	r3, [r3, #0]
 802fe88:	f805 3b01 	strb.w	r3, [r5], #1
 802fe8c:	f1ba 0f00 	cmp.w	sl, #0
 802fe90:	d010      	beq.n	802feb4 <__ssvfscanf_r+0xc60>
 802fe92:	eba5 0b09 	sub.w	fp, r5, r9
 802fe96:	45b3      	cmp	fp, r6
 802fe98:	d30c      	bcc.n	802feb4 <__ssvfscanf_r+0xc60>
 802fe9a:	0076      	lsls	r6, r6, #1
 802fe9c:	4648      	mov	r0, r9
 802fe9e:	4631      	mov	r1, r6
 802fea0:	f000 ffee 	bl	8030e80 <realloc>
 802fea4:	4681      	mov	r9, r0
 802fea6:	2800      	cmp	r0, #0
 802fea8:	f43f aa9b 	beq.w	802f3e2 <__ssvfscanf_r+0x18e>
 802feac:	eb00 050b 	add.w	r5, r0, fp
 802feb0:	f8ca 0000 	str.w	r0, [sl]
 802feb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802feb6:	3b01      	subs	r3, #1
 802feb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802feba:	d008      	beq.n	802fece <__ssvfscanf_r+0xc7a>
 802febc:	6863      	ldr	r3, [r4, #4]
 802febe:	2b00      	cmp	r3, #0
 802fec0:	dcd6      	bgt.n	802fe70 <__ssvfscanf_r+0xc1c>
 802fec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802fec4:	4621      	mov	r1, r4
 802fec6:	f7fd f810 	bl	802ceea <__ssrefill_r>
 802feca:	2800      	cmp	r0, #0
 802fecc:	d0d0      	beq.n	802fe70 <__ssvfscanf_r+0xc1c>
 802fece:	2300      	movs	r3, #0
 802fed0:	702b      	strb	r3, [r5, #0]
 802fed2:	eba5 0509 	sub.w	r5, r5, r9
 802fed6:	f1ba 0f00 	cmp.w	sl, #0
 802feda:	d009      	beq.n	802fef0 <__ssvfscanf_r+0xc9c>
 802fedc:	1c69      	adds	r1, r5, #1
 802fede:	428e      	cmp	r6, r1
 802fee0:	d906      	bls.n	802fef0 <__ssvfscanf_r+0xc9c>
 802fee2:	f8da 0000 	ldr.w	r0, [sl]
 802fee6:	f000 ffcb 	bl	8030e80 <realloc>
 802feea:	b108      	cbz	r0, 802fef0 <__ssvfscanf_r+0xc9c>
 802feec:	f8ca 0000 	str.w	r0, [sl]
 802fef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802fef2:	442b      	add	r3, r5
 802fef4:	633b      	str	r3, [r7, #48]	@ 0x30
 802fef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802fef8:	3301      	adds	r3, #1
 802fefa:	627b      	str	r3, [r7, #36]	@ 0x24
 802fefc:	4645      	mov	r5, r8
 802fefe:	f7ff b9c4 	b.w	802f28a <__ssvfscanf_r+0x36>
 802ff02:	46b2      	mov	sl, r6
 802ff04:	e7b3      	b.n	802fe6e <__ssvfscanf_r+0xc1a>
 802ff06:	bf00      	nop
 802ff08:	0803854d 	.word	0x0803854d
 802ff0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802ff0e:	3b01      	subs	r3, #1
 802ff10:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 802ff14:	bf81      	itttt	hi
 802ff16:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 802ff18:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 802ff1c:	eb03 090c 	addhi.w	r9, r3, ip
 802ff20:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802ff24:	bf8c      	ite	hi
 802ff26:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 802ff28:	f04f 0900 	movls.w	r9, #0
 802ff2c:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 802ff30:	f04f 0a00 	mov.w	sl, #0
 802ff34:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 802ff38:	6822      	ldr	r2, [r4, #0]
 802ff3a:	7813      	ldrb	r3, [r2, #0]
 802ff3c:	2b39      	cmp	r3, #57	@ 0x39
 802ff3e:	d80f      	bhi.n	802ff60 <__ssvfscanf_r+0xd0c>
 802ff40:	2b2a      	cmp	r3, #42	@ 0x2a
 802ff42:	d91a      	bls.n	802ff7a <__ssvfscanf_r+0xd26>
 802ff44:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802ff48:	290e      	cmp	r1, #14
 802ff4a:	d816      	bhi.n	802ff7a <__ssvfscanf_r+0xd26>
 802ff4c:	e8df f001 	tbb	[pc, r1]
 802ff50:	15781578 	.word	0x15781578
 802ff54:	68683f15 	.word	0x68683f15
 802ff58:	68686868 	.word	0x68686868
 802ff5c:	7068      	.short	0x7068
 802ff5e:	70          	.byte	0x70
 802ff5f:	00          	.byte	0x00
 802ff60:	2b66      	cmp	r3, #102	@ 0x66
 802ff62:	d832      	bhi.n	802ffca <__ssvfscanf_r+0xd76>
 802ff64:	2b60      	cmp	r3, #96	@ 0x60
 802ff66:	d803      	bhi.n	802ff70 <__ssvfscanf_r+0xd1c>
 802ff68:	2b46      	cmp	r3, #70	@ 0x46
 802ff6a:	d804      	bhi.n	802ff76 <__ssvfscanf_r+0xd22>
 802ff6c:	2b40      	cmp	r3, #64	@ 0x40
 802ff6e:	d904      	bls.n	802ff7a <__ssvfscanf_r+0xd26>
 802ff70:	69f9      	ldr	r1, [r7, #28]
 802ff72:	290a      	cmp	r1, #10
 802ff74:	e062      	b.n	803003c <__ssvfscanf_r+0xde8>
 802ff76:	2b58      	cmp	r3, #88	@ 0x58
 802ff78:	d068      	beq.n	803004c <__ssvfscanf_r+0xdf8>
 802ff7a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 802ff7e:	d011      	beq.n	802ffa4 <__ssvfscanf_r+0xd50>
 802ff80:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802ff84:	4598      	cmp	r8, r3
 802ff86:	d908      	bls.n	802ff9a <__ssvfscanf_r+0xd46>
 802ff88:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 802ff8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802ff8e:	4622      	mov	r2, r4
 802ff90:	f7fc ff70 	bl	802ce74 <_sungetc_r>
 802ff94:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 802ff98:	46c8      	mov	r8, r9
 802ff9a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802ff9e:	4598      	cmp	r8, r3
 802ffa0:	f43f aa4e 	beq.w	802f440 <__ssvfscanf_r+0x1ec>
 802ffa4:	f01b 0210 	ands.w	r2, fp, #16
 802ffa8:	d16c      	bne.n	8030084 <__ssvfscanf_r+0xe30>
 802ffaa:	69fb      	ldr	r3, [r7, #28]
 802ffac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802ffae:	69be      	ldr	r6, [r7, #24]
 802ffb0:	f888 2000 	strb.w	r2, [r8]
 802ffb4:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802ffb8:	47b0      	blx	r6
 802ffba:	f01b 0f20 	tst.w	fp, #32
 802ffbe:	f105 0904 	add.w	r9, r5, #4
 802ffc2:	d056      	beq.n	8030072 <__ssvfscanf_r+0xe1e>
 802ffc4:	682b      	ldr	r3, [r5, #0]
 802ffc6:	6018      	str	r0, [r3, #0]
 802ffc8:	e058      	b.n	803007c <__ssvfscanf_r+0xe28>
 802ffca:	2b78      	cmp	r3, #120	@ 0x78
 802ffcc:	e7d4      	b.n	802ff78 <__ssvfscanf_r+0xd24>
 802ffce:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 802ffd2:	d00a      	beq.n	802ffea <__ssvfscanf_r+0xd96>
 802ffd4:	69f9      	ldr	r1, [r7, #28]
 802ffd6:	b919      	cbnz	r1, 802ffe0 <__ssvfscanf_r+0xd8c>
 802ffd8:	2108      	movs	r1, #8
 802ffda:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 802ffde:	61f9      	str	r1, [r7, #28]
 802ffe0:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 802ffe4:	d004      	beq.n	802fff0 <__ssvfscanf_r+0xd9c>
 802ffe6:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 802ffea:	f808 3b01 	strb.w	r3, [r8], #1
 802ffee:	e00b      	b.n	8030008 <__ssvfscanf_r+0xdb4>
 802fff0:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 802fff4:	f1b9 0f00 	cmp.w	r9, #0
 802fff8:	d004      	beq.n	8030004 <__ssvfscanf_r+0xdb0>
 802fffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fffc:	3301      	adds	r3, #1
 802fffe:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8030002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030004:	f10a 0a01 	add.w	sl, sl, #1
 8030008:	6863      	ldr	r3, [r4, #4]
 803000a:	3b01      	subs	r3, #1
 803000c:	2b00      	cmp	r3, #0
 803000e:	6063      	str	r3, [r4, #4]
 8030010:	dd28      	ble.n	8030064 <__ssvfscanf_r+0xe10>
 8030012:	3201      	adds	r2, #1
 8030014:	6022      	str	r2, [r4, #0]
 8030016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030018:	3b01      	subs	r3, #1
 803001a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803001c:	d18c      	bne.n	802ff38 <__ssvfscanf_r+0xce4>
 803001e:	e7ac      	b.n	802ff7a <__ssvfscanf_r+0xd26>
 8030020:	69f8      	ldr	r0, [r7, #28]
 8030022:	499b      	ldr	r1, [pc, #620]	@ (8030290 <__ssvfscanf_r+0x103c>)
 8030024:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030028:	61f9      	str	r1, [r7, #28]
 803002a:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 803002e:	e7dc      	b.n	802ffea <__ssvfscanf_r+0xd96>
 8030030:	69f8      	ldr	r0, [r7, #28]
 8030032:	4997      	ldr	r1, [pc, #604]	@ (8030290 <__ssvfscanf_r+0x103c>)
 8030034:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030038:	61f9      	str	r1, [r7, #28]
 803003a:	2908      	cmp	r1, #8
 803003c:	dcf5      	bgt.n	803002a <__ssvfscanf_r+0xdd6>
 803003e:	e79c      	b.n	802ff7a <__ssvfscanf_r+0xd26>
 8030040:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8030044:	d099      	beq.n	802ff7a <__ssvfscanf_r+0xd26>
 8030046:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 803004a:	e7ce      	b.n	802ffea <__ssvfscanf_r+0xd96>
 803004c:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 8030050:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8030054:	d191      	bne.n	802ff7a <__ssvfscanf_r+0xd26>
 8030056:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 803005a:	2110      	movs	r1, #16
 803005c:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 8030060:	61f9      	str	r1, [r7, #28]
 8030062:	e7c2      	b.n	802ffea <__ssvfscanf_r+0xd96>
 8030064:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8030066:	4621      	mov	r1, r4
 8030068:	f7fc ff3f 	bl	802ceea <__ssrefill_r>
 803006c:	2800      	cmp	r0, #0
 803006e:	d0d2      	beq.n	8030016 <__ssvfscanf_r+0xdc2>
 8030070:	e783      	b.n	802ff7a <__ssvfscanf_r+0xd26>
 8030072:	f01b 0f08 	tst.w	fp, #8
 8030076:	d00b      	beq.n	8030090 <__ssvfscanf_r+0xe3c>
 8030078:	682b      	ldr	r3, [r5, #0]
 803007a:	7018      	strb	r0, [r3, #0]
 803007c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803007e:	3301      	adds	r3, #1
 8030080:	627b      	str	r3, [r7, #36]	@ 0x24
 8030082:	464d      	mov	r5, r9
 8030084:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8030088:	eba8 0803 	sub.w	r8, r8, r3
 803008c:	44d0      	add	r8, sl
 803008e:	e516      	b.n	802fabe <__ssvfscanf_r+0x86a>
 8030090:	f01b 0f04 	tst.w	fp, #4
 8030094:	d002      	beq.n	803009c <__ssvfscanf_r+0xe48>
 8030096:	682b      	ldr	r3, [r5, #0]
 8030098:	8018      	strh	r0, [r3, #0]
 803009a:	e7ef      	b.n	803007c <__ssvfscanf_r+0xe28>
 803009c:	f01b 0201 	ands.w	r2, fp, #1
 80300a0:	d190      	bne.n	802ffc4 <__ssvfscanf_r+0xd70>
 80300a2:	f01b 0f02 	tst.w	fp, #2
 80300a6:	d08d      	beq.n	802ffc4 <__ssvfscanf_r+0xd70>
 80300a8:	4b7a      	ldr	r3, [pc, #488]	@ (8030294 <__ssvfscanf_r+0x1040>)
 80300aa:	69b9      	ldr	r1, [r7, #24]
 80300ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80300ae:	4299      	cmp	r1, r3
 80300b0:	69fb      	ldr	r3, [r7, #28]
 80300b2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80300b6:	d105      	bne.n	80300c4 <__ssvfscanf_r+0xe70>
 80300b8:	f002 fa9a 	bl	80325f0 <_strtoull_r>
 80300bc:	682b      	ldr	r3, [r5, #0]
 80300be:	e9c3 0100 	strd	r0, r1, [r3]
 80300c2:	e7db      	b.n	803007c <__ssvfscanf_r+0xe28>
 80300c4:	f002 f9e8 	bl	8032498 <_strtoll_r>
 80300c8:	e7f8      	b.n	80300bc <__ssvfscanf_r+0xe68>
 80300ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80300cc:	f7fa fe96 	bl	802adfc <_localeconv_r>
 80300d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80300d2:	6802      	ldr	r2, [r0, #0]
 80300d4:	3b01      	subs	r3, #1
 80300d6:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 80300da:	f04f 0800 	mov.w	r8, #0
 80300de:	bf88      	it	hi
 80300e0:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 80300e2:	f8c7 8010 	str.w	r8, [r7, #16]
 80300e6:	e9c7 8802 	strd	r8, r8, [r7, #8]
 80300ea:	bf81      	itttt	hi
 80300ec:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 80300f0:	f240 115d 	movwhi	r1, #349	@ 0x15d
 80300f4:	181b      	addhi	r3, r3, r0
 80300f6:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 80300f8:	bf98      	it	ls
 80300fa:	2300      	movls	r3, #0
 80300fc:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8030100:	46c3      	mov	fp, r8
 8030102:	46c2      	mov	sl, r8
 8030104:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8030108:	6821      	ldr	r1, [r4, #0]
 803010a:	6079      	str	r1, [r7, #4]
 803010c:	7808      	ldrb	r0, [r1, #0]
 803010e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 8030112:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 8030116:	f200 8123 	bhi.w	8030360 <__ssvfscanf_r+0x110c>
 803011a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 803011e:	0089      	.short	0x0089
 8030120:	00890121 	.word	0x00890121
 8030124:	01210121 	.word	0x01210121
 8030128:	006f004f 	.word	0x006f004f
 803012c:	006f006f 	.word	0x006f006f
 8030130:	006f006f 	.word	0x006f006f
 8030134:	006f006f 	.word	0x006f006f
 8030138:	006f006f 	.word	0x006f006f
 803013c:	01210121 	.word	0x01210121
 8030140:	01210121 	.word	0x01210121
 8030144:	01210121 	.word	0x01210121
 8030148:	00af0121 	.word	0x00af0121
 803014c:	006d006d 	.word	0x006d006d
 8030150:	011e006d 	.word	0x011e006d
 8030154:	012100ed 	.word	0x012100ed
 8030158:	00d60121 	.word	0x00d60121
 803015c:	01210121 	.word	0x01210121
 8030160:	01210121 	.word	0x01210121
 8030164:	01210090 	.word	0x01210090
 8030168:	01210104 	.word	0x01210104
 803016c:	01210121 	.word	0x01210121
 8030170:	012100f8 	.word	0x012100f8
 8030174:	01210121 	.word	0x01210121
 8030178:	00fe0073 	.word	0x00fe0073
 803017c:	01210121 	.word	0x01210121
 8030180:	01210121 	.word	0x01210121
 8030184:	01210121 	.word	0x01210121
 8030188:	00af0121 	.word	0x00af0121
 803018c:	006d006d 	.word	0x006d006d
 8030190:	011e006d 	.word	0x011e006d
 8030194:	012100ed 	.word	0x012100ed
 8030198:	00d60121 	.word	0x00d60121
 803019c:	01210121 	.word	0x01210121
 80301a0:	01210121 	.word	0x01210121
 80301a4:	01210090 	.word	0x01210090
 80301a8:	01210104 	.word	0x01210104
 80301ac:	01210121 	.word	0x01210121
 80301b0:	012100f8 	.word	0x012100f8
 80301b4:	01210121 	.word	0x01210121
 80301b8:	00fe0073 	.word	0x00fe0073
 80301bc:	05f1      	lsls	r1, r6, #23
 80301be:	d51d      	bpl.n	80301fc <__ssvfscanf_r+0xfa8>
 80301c0:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80301c4:	f10a 0a01 	add.w	sl, sl, #1
 80301c8:	b11b      	cbz	r3, 80301d2 <__ssvfscanf_r+0xf7e>
 80301ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80301cc:	3001      	adds	r0, #1
 80301ce:	3b01      	subs	r3, #1
 80301d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80301d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80301d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80301d6:	3001      	adds	r0, #1
 80301d8:	6338      	str	r0, [r7, #48]	@ 0x30
 80301da:	6860      	ldr	r0, [r4, #4]
 80301dc:	3801      	subs	r0, #1
 80301de:	3901      	subs	r1, #1
 80301e0:	2800      	cmp	r0, #0
 80301e2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80301e4:	6060      	str	r0, [r4, #4]
 80301e6:	f340 80cc 	ble.w	8030382 <__ssvfscanf_r+0x112e>
 80301ea:	6879      	ldr	r1, [r7, #4]
 80301ec:	3101      	adds	r1, #1
 80301ee:	6021      	str	r1, [r4, #0]
 80301f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80301f2:	2900      	cmp	r1, #0
 80301f4:	d188      	bne.n	8030108 <__ssvfscanf_r+0xeb4>
 80301f6:	e052      	b.n	803029e <__ssvfscanf_r+0x104a>
 80301f8:	0531      	lsls	r1, r6, #20
 80301fa:	d550      	bpl.n	803029e <__ssvfscanf_r+0x104a>
 80301fc:	eb1b 0c08 	adds.w	ip, fp, r8
 8030200:	d041      	beq.n	8030286 <__ssvfscanf_r+0x1032>
 8030202:	e04c      	b.n	803029e <__ssvfscanf_r+0x104a>
 8030204:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 8030208:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 803020c:	d147      	bne.n	803029e <__ssvfscanf_r+0x104a>
 803020e:	f1ba 0f01 	cmp.w	sl, #1
 8030212:	d144      	bne.n	803029e <__ssvfscanf_r+0x104a>
 8030214:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8030216:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 803021a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 803021e:	3901      	subs	r1, #1
 8030220:	f809 cb01 	strb.w	ip, [r9], #1
 8030224:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 8030228:	62f9      	str	r1, [r7, #44]	@ 0x2c
 803022a:	f04f 0a00 	mov.w	sl, #0
 803022e:	e003      	b.n	8030238 <__ssvfscanf_r+0xfe4>
 8030230:	0631      	lsls	r1, r6, #24
 8030232:	d534      	bpl.n	803029e <__ssvfscanf_r+0x104a>
 8030234:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8030238:	f809 0b01 	strb.w	r0, [r9], #1
 803023c:	e7c9      	b.n	80301d2 <__ssvfscanf_r+0xf7e>
 803023e:	f1bb 0f00 	cmp.w	fp, #0
 8030242:	d10c      	bne.n	803025e <__ssvfscanf_r+0x100a>
 8030244:	f1ba 0f00 	cmp.w	sl, #0
 8030248:	d10d      	bne.n	8030266 <__ssvfscanf_r+0x1012>
 803024a:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803024e:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 8030252:	d108      	bne.n	8030266 <__ssvfscanf_r+0x1012>
 8030254:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8030258:	f04f 0b01 	mov.w	fp, #1
 803025c:	e7ec      	b.n	8030238 <__ssvfscanf_r+0xfe4>
 803025e:	f1bb 0f02 	cmp.w	fp, #2
 8030262:	f000 8088 	beq.w	8030376 <__ssvfscanf_r+0x1122>
 8030266:	f1b8 0f01 	cmp.w	r8, #1
 803026a:	d002      	beq.n	8030272 <__ssvfscanf_r+0x101e>
 803026c:	f1b8 0f04 	cmp.w	r8, #4
 8030270:	d115      	bne.n	803029e <__ssvfscanf_r+0x104a>
 8030272:	f108 0801 	add.w	r8, r8, #1
 8030276:	fa5f f888 	uxtb.w	r8, r8
 803027a:	e7dd      	b.n	8030238 <__ssvfscanf_r+0xfe4>
 803027c:	0531      	lsls	r1, r6, #20
 803027e:	d50b      	bpl.n	8030298 <__ssvfscanf_r+0x1044>
 8030280:	eb1b 0c08 	adds.w	ip, fp, r8
 8030284:	d108      	bne.n	8030298 <__ssvfscanf_r+0x1044>
 8030286:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 803028a:	46e0      	mov	r8, ip
 803028c:	46e3      	mov	fp, ip
 803028e:	e7d3      	b.n	8030238 <__ssvfscanf_r+0xfe4>
 8030290:	0803872c 	.word	0x0803872c
 8030294:	08031fe9 	.word	0x08031fe9
 8030298:	f1bb 0f01 	cmp.w	fp, #1
 803029c:	d06e      	beq.n	803037c <__ssvfscanf_r+0x1128>
 803029e:	f1ba 0f00 	cmp.w	sl, #0
 80302a2:	d001      	beq.n	80302a8 <__ssvfscanf_r+0x1054>
 80302a4:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 80302a8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80302ac:	f1bb 0f01 	cmp.w	fp, #1
 80302b0:	d873      	bhi.n	803039a <__ssvfscanf_r+0x1146>
 80302b2:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80302b6:	45a9      	cmp	r9, r5
 80302b8:	f67f a8c2 	bls.w	802f440 <__ssvfscanf_r+0x1ec>
 80302bc:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80302c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80302c2:	4622      	mov	r2, r4
 80302c4:	f7fc fdd6 	bl	802ce74 <_sungetc_r>
 80302c8:	e7f5      	b.n	80302b6 <__ssvfscanf_r+0x1062>
 80302ca:	f1b8 0f00 	cmp.w	r8, #0
 80302ce:	d10d      	bne.n	80302ec <__ssvfscanf_r+0x1098>
 80302d0:	f1ba 0f00 	cmp.w	sl, #0
 80302d4:	d1e6      	bne.n	80302a4 <__ssvfscanf_r+0x1050>
 80302d6:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 80302da:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 80302de:	f040 8124 	bne.w	803052a <__ssvfscanf_r+0x12d6>
 80302e2:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 80302e6:	f04f 0801 	mov.w	r8, #1
 80302ea:	e7a5      	b.n	8030238 <__ssvfscanf_r+0xfe4>
 80302ec:	f1b8 0f03 	cmp.w	r8, #3
 80302f0:	d0bf      	beq.n	8030272 <__ssvfscanf_r+0x101e>
 80302f2:	f1b8 0f05 	cmp.w	r8, #5
 80302f6:	e7bb      	b.n	8030270 <__ssvfscanf_r+0x101c>
 80302f8:	0531      	lsls	r1, r6, #20
 80302fa:	d502      	bpl.n	8030302 <__ssvfscanf_r+0x10ae>
 80302fc:	eb1b 0c08 	adds.w	ip, fp, r8
 8030300:	d0c1      	beq.n	8030286 <__ssvfscanf_r+0x1032>
 8030302:	f1b8 0f02 	cmp.w	r8, #2
 8030306:	d1ca      	bne.n	803029e <__ssvfscanf_r+0x104a>
 8030308:	f04f 0803 	mov.w	r8, #3
 803030c:	e794      	b.n	8030238 <__ssvfscanf_r+0xfe4>
 803030e:	f1b8 0f06 	cmp.w	r8, #6
 8030312:	d1c4      	bne.n	803029e <__ssvfscanf_r+0x104a>
 8030314:	f04f 0807 	mov.w	r8, #7
 8030318:	e78e      	b.n	8030238 <__ssvfscanf_r+0xfe4>
 803031a:	f1b8 0f07 	cmp.w	r8, #7
 803031e:	d1be      	bne.n	803029e <__ssvfscanf_r+0x104a>
 8030320:	f04f 0808 	mov.w	r8, #8
 8030324:	e788      	b.n	8030238 <__ssvfscanf_r+0xfe4>
 8030326:	0531      	lsls	r1, r6, #20
 8030328:	d5b9      	bpl.n	803029e <__ssvfscanf_r+0x104a>
 803032a:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 803032e:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 8030332:	d005      	beq.n	8030340 <__ssvfscanf_r+0x10ec>
 8030334:	0571      	lsls	r1, r6, #21
 8030336:	d5b2      	bpl.n	803029e <__ssvfscanf_r+0x104a>
 8030338:	f1ba 0f00 	cmp.w	sl, #0
 803033c:	f000 80f5 	beq.w	803052a <__ssvfscanf_r+0x12d6>
 8030340:	05b1      	lsls	r1, r6, #22
 8030342:	bf58      	it	pl
 8030344:	6939      	ldrpl	r1, [r7, #16]
 8030346:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 803034a:	bf5c      	itt	pl
 803034c:	ebaa 0101 	subpl.w	r1, sl, r1
 8030350:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 8030354:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 8030358:	e767      	b.n	803022a <__ssvfscanf_r+0xfd6>
 803035a:	0531      	lsls	r1, r6, #20
 803035c:	d5e5      	bpl.n	803032a <__ssvfscanf_r+0x10d6>
 803035e:	e74d      	b.n	80301fc <__ssvfscanf_r+0xfa8>
 8030360:	f892 c000 	ldrb.w	ip, [r2]
 8030364:	4584      	cmp	ip, r0
 8030366:	d19a      	bne.n	803029e <__ssvfscanf_r+0x104a>
 8030368:	05b1      	lsls	r1, r6, #22
 803036a:	d598      	bpl.n	803029e <__ssvfscanf_r+0x104a>
 803036c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8030370:	f8c7 a010 	str.w	sl, [r7, #16]
 8030374:	e760      	b.n	8030238 <__ssvfscanf_r+0xfe4>
 8030376:	f04f 0b03 	mov.w	fp, #3
 803037a:	e75d      	b.n	8030238 <__ssvfscanf_r+0xfe4>
 803037c:	f04f 0b02 	mov.w	fp, #2
 8030380:	e75a      	b.n	8030238 <__ssvfscanf_r+0xfe4>
 8030382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8030384:	4621      	mov	r1, r4
 8030386:	e9c7 2300 	strd	r2, r3, [r7]
 803038a:	f7fc fdae 	bl	802ceea <__ssrefill_r>
 803038e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8030392:	2800      	cmp	r0, #0
 8030394:	f43f af2c 	beq.w	80301f0 <__ssvfscanf_r+0xf9c>
 8030398:	e781      	b.n	803029e <__ssvfscanf_r+0x104a>
 803039a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 803039e:	2b06      	cmp	r3, #6
 80303a0:	d827      	bhi.n	80303f2 <__ssvfscanf_r+0x119e>
 80303a2:	f1b8 0f02 	cmp.w	r8, #2
 80303a6:	d834      	bhi.n	8030412 <__ssvfscanf_r+0x11be>
 80303a8:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80303ac:	45a9      	cmp	r9, r5
 80303ae:	f67f a847 	bls.w	802f440 <__ssvfscanf_r+0x1ec>
 80303b2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80303b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80303b8:	4622      	mov	r2, r4
 80303ba:	f7fc fd5b 	bl	802ce74 <_sungetc_r>
 80303be:	e7f5      	b.n	80303ac <__ssvfscanf_r+0x1158>
 80303c0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80303c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80303c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80303c8:	4622      	mov	r2, r4
 80303ca:	f7fc fd53 	bl	802ce74 <_sungetc_r>
 80303ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80303d0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80303d4:	fa5f fb8b 	uxtb.w	fp, fp
 80303d8:	f1bb 0f02 	cmp.w	fp, #2
 80303dc:	d1f0      	bne.n	80303c0 <__ssvfscanf_r+0x116c>
 80303de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80303e0:	f1a8 0803 	sub.w	r8, r8, #3
 80303e4:	fa5f f888 	uxtb.w	r8, r8
 80303e8:	eba3 0308 	sub.w	r3, r3, r8
 80303ec:	eba9 0908 	sub.w	r9, r9, r8
 80303f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80303f2:	05f3      	lsls	r3, r6, #23
 80303f4:	d52d      	bpl.n	8030452 <__ssvfscanf_r+0x11fe>
 80303f6:	0570      	lsls	r0, r6, #21
 80303f8:	d50e      	bpl.n	8030418 <__ssvfscanf_r+0x11c4>
 80303fa:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80303fe:	45a9      	cmp	r9, r5
 8030400:	f67f a81e 	bls.w	802f440 <__ssvfscanf_r+0x1ec>
 8030404:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8030408:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803040a:	4622      	mov	r2, r4
 803040c:	f7fc fd32 	bl	802ce74 <_sungetc_r>
 8030410:	e7f5      	b.n	80303fe <__ssvfscanf_r+0x11aa>
 8030412:	46c3      	mov	fp, r8
 8030414:	464b      	mov	r3, r9
 8030416:	e7db      	b.n	80303d0 <__ssvfscanf_r+0x117c>
 8030418:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 803041c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803041e:	2965      	cmp	r1, #101	@ 0x65
 8030420:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 8030424:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8030428:	d00c      	beq.n	8030444 <__ssvfscanf_r+0x11f0>
 803042a:	2945      	cmp	r1, #69	@ 0x45
 803042c:	d00a      	beq.n	8030444 <__ssvfscanf_r+0x11f0>
 803042e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8030430:	4622      	mov	r2, r4
 8030432:	f7fc fd1f 	bl	802ce74 <_sungetc_r>
 8030436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8030438:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 803043c:	f1a9 0802 	sub.w	r8, r9, #2
 8030440:	f1a3 0b02 	sub.w	fp, r3, #2
 8030444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8030446:	4622      	mov	r2, r4
 8030448:	f7fc fd14 	bl	802ce74 <_sungetc_r>
 803044c:	46c1      	mov	r9, r8
 803044e:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 8030452:	f016 0210 	ands.w	r2, r6, #16
 8030456:	f47e af18 	bne.w	802f28a <__ssvfscanf_r+0x36>
 803045a:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 803045e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8030462:	f889 2000 	strb.w	r2, [r9]
 8030466:	d119      	bne.n	803049c <__ssvfscanf_r+0x1248>
 8030468:	693b      	ldr	r3, [r7, #16]
 803046a:	4553      	cmp	r3, sl
 803046c:	eba3 020a 	sub.w	r2, r3, sl
 8030470:	d121      	bne.n	80304b6 <__ssvfscanf_r+0x1262>
 8030472:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8030476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8030478:	2200      	movs	r2, #0
 803047a:	f001 fd41 	bl	8031f00 <_strtod_r>
 803047e:	07f1      	lsls	r1, r6, #31
 8030480:	ec59 8b10 	vmov	r8, r9, d0
 8030484:	f105 0a04 	add.w	sl, r5, #4
 8030488:	d520      	bpl.n	80304cc <__ssvfscanf_r+0x1278>
 803048a:	682b      	ldr	r3, [r5, #0]
 803048c:	ed83 0b00 	vstr	d0, [r3]
 8030490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030492:	3301      	adds	r3, #1
 8030494:	627b      	str	r3, [r7, #36]	@ 0x24
 8030496:	4655      	mov	r5, sl
 8030498:	f7fe bef7 	b.w	802f28a <__ssvfscanf_r+0x36>
 803049c:	68fb      	ldr	r3, [r7, #12]
 803049e:	2b00      	cmp	r3, #0
 80304a0:	d0e7      	beq.n	8030472 <__ssvfscanf_r+0x121e>
 80304a2:	68b9      	ldr	r1, [r7, #8]
 80304a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80304a6:	230a      	movs	r3, #10
 80304a8:	3101      	adds	r1, #1
 80304aa:	f7f8 fe9d 	bl	80291e8 <_strtol_r>
 80304ae:	68fb      	ldr	r3, [r7, #12]
 80304b0:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80304b4:	1ac2      	subs	r2, r0, r3
 80304b6:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 80304ba:	4599      	cmp	r9, r3
 80304bc:	bf28      	it	cs
 80304be:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 80304c2:	491b      	ldr	r1, [pc, #108]	@ (8030530 <__ssvfscanf_r+0x12dc>)
 80304c4:	4648      	mov	r0, r9
 80304c6:	f7f8 ff49 	bl	802935c <sprintf>
 80304ca:	e7d2      	b.n	8030472 <__ssvfscanf_r+0x121e>
 80304cc:	07b2      	lsls	r2, r6, #30
 80304ce:	682d      	ldr	r5, [r5, #0]
 80304d0:	d502      	bpl.n	80304d8 <__ssvfscanf_r+0x1284>
 80304d2:	ed85 0b00 	vstr	d0, [r5]
 80304d6:	e7db      	b.n	8030490 <__ssvfscanf_r+0x123c>
 80304d8:	4642      	mov	r2, r8
 80304da:	464b      	mov	r3, r9
 80304dc:	4640      	mov	r0, r8
 80304de:	4649      	mov	r1, r9
 80304e0:	f7e0 fb3c 	bl	8010b5c <__aeabi_dcmpun>
 80304e4:	b128      	cbz	r0, 80304f2 <__ssvfscanf_r+0x129e>
 80304e6:	4813      	ldr	r0, [pc, #76]	@ (8030534 <__ssvfscanf_r+0x12e0>)
 80304e8:	f002 f8f6 	bl	80326d8 <nanf>
 80304ec:	ed85 0a00 	vstr	s0, [r5]
 80304f0:	e7ce      	b.n	8030490 <__ssvfscanf_r+0x123c>
 80304f2:	4640      	mov	r0, r8
 80304f4:	4649      	mov	r1, r9
 80304f6:	f7e0 fb8f 	bl	8010c18 <__aeabi_d2f>
 80304fa:	6028      	str	r0, [r5, #0]
 80304fc:	e7c8      	b.n	8030490 <__ssvfscanf_r+0x123c>
 80304fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8030502:	6818      	ldr	r0, [r3, #0]
 8030504:	f7fb fd3a 	bl	802bf7c <free>
 8030508:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803050c:	3401      	adds	r4, #1
 803050e:	601e      	str	r6, [r3, #0]
 8030510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030512:	681d      	ldr	r5, [r3, #0]
 8030514:	88db      	ldrh	r3, [r3, #6]
 8030516:	42a3      	cmp	r3, r4
 8030518:	dcf1      	bgt.n	80304fe <__ssvfscanf_r+0x12aa>
 803051a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803051e:	627b      	str	r3, [r7, #36]	@ 0x24
 8030520:	f7ff b85c 	b.w	802f5dc <__ssvfscanf_r+0x388>
 8030524:	2400      	movs	r4, #0
 8030526:	4626      	mov	r6, r4
 8030528:	e7f2      	b.n	8030510 <__ssvfscanf_r+0x12bc>
 803052a:	f04f 0a00 	mov.w	sl, #0
 803052e:	e6bb      	b.n	80302a8 <__ssvfscanf_r+0x1054>
 8030530:	08038726 	.word	0x08038726
 8030534:	0803818e 	.word	0x0803818e

08030538 <_putc_r>:
 8030538:	b570      	push	{r4, r5, r6, lr}
 803053a:	460d      	mov	r5, r1
 803053c:	4614      	mov	r4, r2
 803053e:	4606      	mov	r6, r0
 8030540:	b118      	cbz	r0, 803054a <_putc_r+0x12>
 8030542:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8030544:	b90b      	cbnz	r3, 803054a <_putc_r+0x12>
 8030546:	f7f9 f825 	bl	8029594 <__sinit>
 803054a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803054c:	07d8      	lsls	r0, r3, #31
 803054e:	d405      	bmi.n	803055c <_putc_r+0x24>
 8030550:	89a3      	ldrh	r3, [r4, #12]
 8030552:	0599      	lsls	r1, r3, #22
 8030554:	d402      	bmi.n	803055c <_putc_r+0x24>
 8030556:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030558:	f7fa fcfb 	bl	802af52 <__retarget_lock_acquire_recursive>
 803055c:	68a3      	ldr	r3, [r4, #8]
 803055e:	3b01      	subs	r3, #1
 8030560:	2b00      	cmp	r3, #0
 8030562:	60a3      	str	r3, [r4, #8]
 8030564:	da05      	bge.n	8030572 <_putc_r+0x3a>
 8030566:	69a2      	ldr	r2, [r4, #24]
 8030568:	4293      	cmp	r3, r2
 803056a:	db12      	blt.n	8030592 <_putc_r+0x5a>
 803056c:	b2eb      	uxtb	r3, r5
 803056e:	2b0a      	cmp	r3, #10
 8030570:	d00f      	beq.n	8030592 <_putc_r+0x5a>
 8030572:	6823      	ldr	r3, [r4, #0]
 8030574:	1c5a      	adds	r2, r3, #1
 8030576:	6022      	str	r2, [r4, #0]
 8030578:	701d      	strb	r5, [r3, #0]
 803057a:	b2ed      	uxtb	r5, r5
 803057c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803057e:	07da      	lsls	r2, r3, #31
 8030580:	d405      	bmi.n	803058e <_putc_r+0x56>
 8030582:	89a3      	ldrh	r3, [r4, #12]
 8030584:	059b      	lsls	r3, r3, #22
 8030586:	d402      	bmi.n	803058e <_putc_r+0x56>
 8030588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803058a:	f7fa fce4 	bl	802af56 <__retarget_lock_release_recursive>
 803058e:	4628      	mov	r0, r5
 8030590:	bd70      	pop	{r4, r5, r6, pc}
 8030592:	4629      	mov	r1, r5
 8030594:	4622      	mov	r2, r4
 8030596:	4630      	mov	r0, r6
 8030598:	f001 fd79 	bl	803208e <__swbuf_r>
 803059c:	4605      	mov	r5, r0
 803059e:	e7ed      	b.n	803057c <_putc_r+0x44>

080305a0 <__malloc_lock>:
 80305a0:	4801      	ldr	r0, [pc, #4]	@ (80305a8 <__malloc_lock+0x8>)
 80305a2:	f7fa bcd6 	b.w	802af52 <__retarget_lock_acquire_recursive>
 80305a6:	bf00      	nop
 80305a8:	2001818a 	.word	0x2001818a

080305ac <__malloc_unlock>:
 80305ac:	4801      	ldr	r0, [pc, #4]	@ (80305b4 <__malloc_unlock+0x8>)
 80305ae:	f7fa bcd2 	b.w	802af56 <__retarget_lock_release_recursive>
 80305b2:	bf00      	nop
 80305b4:	2001818a 	.word	0x2001818a

080305b8 <_Balloc>:
 80305b8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80305ba:	b570      	push	{r4, r5, r6, lr}
 80305bc:	4605      	mov	r5, r0
 80305be:	460c      	mov	r4, r1
 80305c0:	b17b      	cbz	r3, 80305e2 <_Balloc+0x2a>
 80305c2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80305c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80305c8:	b9a0      	cbnz	r0, 80305f4 <_Balloc+0x3c>
 80305ca:	2101      	movs	r1, #1
 80305cc:	fa01 f604 	lsl.w	r6, r1, r4
 80305d0:	1d72      	adds	r2, r6, #5
 80305d2:	0092      	lsls	r2, r2, #2
 80305d4:	4628      	mov	r0, r5
 80305d6:	f002 f885 	bl	80326e4 <_calloc_r>
 80305da:	b148      	cbz	r0, 80305f0 <_Balloc+0x38>
 80305dc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80305e0:	e00b      	b.n	80305fa <_Balloc+0x42>
 80305e2:	2221      	movs	r2, #33	@ 0x21
 80305e4:	2104      	movs	r1, #4
 80305e6:	f002 f87d 	bl	80326e4 <_calloc_r>
 80305ea:	6468      	str	r0, [r5, #68]	@ 0x44
 80305ec:	2800      	cmp	r0, #0
 80305ee:	d1e8      	bne.n	80305c2 <_Balloc+0xa>
 80305f0:	2000      	movs	r0, #0
 80305f2:	bd70      	pop	{r4, r5, r6, pc}
 80305f4:	6802      	ldr	r2, [r0, #0]
 80305f6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80305fa:	2300      	movs	r3, #0
 80305fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8030600:	e7f7      	b.n	80305f2 <_Balloc+0x3a>

08030602 <_Bfree>:
 8030602:	b131      	cbz	r1, 8030612 <_Bfree+0x10>
 8030604:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8030606:	684a      	ldr	r2, [r1, #4]
 8030608:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 803060c:	6008      	str	r0, [r1, #0]
 803060e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8030612:	4770      	bx	lr

08030614 <__multadd>:
 8030614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030618:	690d      	ldr	r5, [r1, #16]
 803061a:	4607      	mov	r7, r0
 803061c:	460c      	mov	r4, r1
 803061e:	461e      	mov	r6, r3
 8030620:	f101 0c14 	add.w	ip, r1, #20
 8030624:	2000      	movs	r0, #0
 8030626:	f8dc 3000 	ldr.w	r3, [ip]
 803062a:	b299      	uxth	r1, r3
 803062c:	fb02 6101 	mla	r1, r2, r1, r6
 8030630:	0c1e      	lsrs	r6, r3, #16
 8030632:	0c0b      	lsrs	r3, r1, #16
 8030634:	fb02 3306 	mla	r3, r2, r6, r3
 8030638:	b289      	uxth	r1, r1
 803063a:	3001      	adds	r0, #1
 803063c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8030640:	4285      	cmp	r5, r0
 8030642:	f84c 1b04 	str.w	r1, [ip], #4
 8030646:	ea4f 4613 	mov.w	r6, r3, lsr #16
 803064a:	dcec      	bgt.n	8030626 <__multadd+0x12>
 803064c:	b30e      	cbz	r6, 8030692 <__multadd+0x7e>
 803064e:	68a3      	ldr	r3, [r4, #8]
 8030650:	42ab      	cmp	r3, r5
 8030652:	dc19      	bgt.n	8030688 <__multadd+0x74>
 8030654:	6861      	ldr	r1, [r4, #4]
 8030656:	4638      	mov	r0, r7
 8030658:	3101      	adds	r1, #1
 803065a:	f7ff ffad 	bl	80305b8 <_Balloc>
 803065e:	4680      	mov	r8, r0
 8030660:	b928      	cbnz	r0, 803066e <__multadd+0x5a>
 8030662:	4602      	mov	r2, r0
 8030664:	4b0c      	ldr	r3, [pc, #48]	@ (8030698 <__multadd+0x84>)
 8030666:	480d      	ldr	r0, [pc, #52]	@ (803069c <__multadd+0x88>)
 8030668:	21ba      	movs	r1, #186	@ 0xba
 803066a:	f7f6 fce7 	bl	802703c <__assert_func>
 803066e:	6922      	ldr	r2, [r4, #16]
 8030670:	3202      	adds	r2, #2
 8030672:	f104 010c 	add.w	r1, r4, #12
 8030676:	0092      	lsls	r2, r2, #2
 8030678:	300c      	adds	r0, #12
 803067a:	f7fa fc6d 	bl	802af58 <memcpy>
 803067e:	4621      	mov	r1, r4
 8030680:	4638      	mov	r0, r7
 8030682:	f7ff ffbe 	bl	8030602 <_Bfree>
 8030686:	4644      	mov	r4, r8
 8030688:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 803068c:	3501      	adds	r5, #1
 803068e:	615e      	str	r6, [r3, #20]
 8030690:	6125      	str	r5, [r4, #16]
 8030692:	4620      	mov	r0, r4
 8030694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030698:	0803865a 	.word	0x0803865a
 803069c:	0803874e 	.word	0x0803874e

080306a0 <__s2b>:
 80306a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80306a4:	460c      	mov	r4, r1
 80306a6:	4615      	mov	r5, r2
 80306a8:	461f      	mov	r7, r3
 80306aa:	2209      	movs	r2, #9
 80306ac:	3308      	adds	r3, #8
 80306ae:	4606      	mov	r6, r0
 80306b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80306b4:	2100      	movs	r1, #0
 80306b6:	2201      	movs	r2, #1
 80306b8:	429a      	cmp	r2, r3
 80306ba:	db09      	blt.n	80306d0 <__s2b+0x30>
 80306bc:	4630      	mov	r0, r6
 80306be:	f7ff ff7b 	bl	80305b8 <_Balloc>
 80306c2:	b940      	cbnz	r0, 80306d6 <__s2b+0x36>
 80306c4:	4602      	mov	r2, r0
 80306c6:	4b19      	ldr	r3, [pc, #100]	@ (803072c <__s2b+0x8c>)
 80306c8:	4819      	ldr	r0, [pc, #100]	@ (8030730 <__s2b+0x90>)
 80306ca:	21d3      	movs	r1, #211	@ 0xd3
 80306cc:	f7f6 fcb6 	bl	802703c <__assert_func>
 80306d0:	0052      	lsls	r2, r2, #1
 80306d2:	3101      	adds	r1, #1
 80306d4:	e7f0      	b.n	80306b8 <__s2b+0x18>
 80306d6:	9b08      	ldr	r3, [sp, #32]
 80306d8:	6143      	str	r3, [r0, #20]
 80306da:	2d09      	cmp	r5, #9
 80306dc:	f04f 0301 	mov.w	r3, #1
 80306e0:	6103      	str	r3, [r0, #16]
 80306e2:	dd16      	ble.n	8030712 <__s2b+0x72>
 80306e4:	f104 0909 	add.w	r9, r4, #9
 80306e8:	46c8      	mov	r8, r9
 80306ea:	442c      	add	r4, r5
 80306ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80306f0:	4601      	mov	r1, r0
 80306f2:	3b30      	subs	r3, #48	@ 0x30
 80306f4:	220a      	movs	r2, #10
 80306f6:	4630      	mov	r0, r6
 80306f8:	f7ff ff8c 	bl	8030614 <__multadd>
 80306fc:	45a0      	cmp	r8, r4
 80306fe:	d1f5      	bne.n	80306ec <__s2b+0x4c>
 8030700:	f1a5 0408 	sub.w	r4, r5, #8
 8030704:	444c      	add	r4, r9
 8030706:	1b2d      	subs	r5, r5, r4
 8030708:	1963      	adds	r3, r4, r5
 803070a:	42bb      	cmp	r3, r7
 803070c:	db04      	blt.n	8030718 <__s2b+0x78>
 803070e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8030712:	340a      	adds	r4, #10
 8030714:	2509      	movs	r5, #9
 8030716:	e7f6      	b.n	8030706 <__s2b+0x66>
 8030718:	f814 3b01 	ldrb.w	r3, [r4], #1
 803071c:	4601      	mov	r1, r0
 803071e:	3b30      	subs	r3, #48	@ 0x30
 8030720:	220a      	movs	r2, #10
 8030722:	4630      	mov	r0, r6
 8030724:	f7ff ff76 	bl	8030614 <__multadd>
 8030728:	e7ee      	b.n	8030708 <__s2b+0x68>
 803072a:	bf00      	nop
 803072c:	0803865a 	.word	0x0803865a
 8030730:	0803874e 	.word	0x0803874e

08030734 <__hi0bits>:
 8030734:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8030738:	4603      	mov	r3, r0
 803073a:	bf36      	itet	cc
 803073c:	0403      	lslcc	r3, r0, #16
 803073e:	2000      	movcs	r0, #0
 8030740:	2010      	movcc	r0, #16
 8030742:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8030746:	bf3c      	itt	cc
 8030748:	021b      	lslcc	r3, r3, #8
 803074a:	3008      	addcc	r0, #8
 803074c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8030750:	bf3c      	itt	cc
 8030752:	011b      	lslcc	r3, r3, #4
 8030754:	3004      	addcc	r0, #4
 8030756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803075a:	bf3c      	itt	cc
 803075c:	009b      	lslcc	r3, r3, #2
 803075e:	3002      	addcc	r0, #2
 8030760:	2b00      	cmp	r3, #0
 8030762:	db05      	blt.n	8030770 <__hi0bits+0x3c>
 8030764:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8030768:	f100 0001 	add.w	r0, r0, #1
 803076c:	bf08      	it	eq
 803076e:	2020      	moveq	r0, #32
 8030770:	4770      	bx	lr

08030772 <__lo0bits>:
 8030772:	6803      	ldr	r3, [r0, #0]
 8030774:	4602      	mov	r2, r0
 8030776:	f013 0007 	ands.w	r0, r3, #7
 803077a:	d00b      	beq.n	8030794 <__lo0bits+0x22>
 803077c:	07d9      	lsls	r1, r3, #31
 803077e:	d421      	bmi.n	80307c4 <__lo0bits+0x52>
 8030780:	0798      	lsls	r0, r3, #30
 8030782:	bf49      	itett	mi
 8030784:	085b      	lsrmi	r3, r3, #1
 8030786:	089b      	lsrpl	r3, r3, #2
 8030788:	2001      	movmi	r0, #1
 803078a:	6013      	strmi	r3, [r2, #0]
 803078c:	bf5c      	itt	pl
 803078e:	6013      	strpl	r3, [r2, #0]
 8030790:	2002      	movpl	r0, #2
 8030792:	4770      	bx	lr
 8030794:	b299      	uxth	r1, r3
 8030796:	b909      	cbnz	r1, 803079c <__lo0bits+0x2a>
 8030798:	0c1b      	lsrs	r3, r3, #16
 803079a:	2010      	movs	r0, #16
 803079c:	b2d9      	uxtb	r1, r3
 803079e:	b909      	cbnz	r1, 80307a4 <__lo0bits+0x32>
 80307a0:	3008      	adds	r0, #8
 80307a2:	0a1b      	lsrs	r3, r3, #8
 80307a4:	0719      	lsls	r1, r3, #28
 80307a6:	bf04      	itt	eq
 80307a8:	091b      	lsreq	r3, r3, #4
 80307aa:	3004      	addeq	r0, #4
 80307ac:	0799      	lsls	r1, r3, #30
 80307ae:	bf04      	itt	eq
 80307b0:	089b      	lsreq	r3, r3, #2
 80307b2:	3002      	addeq	r0, #2
 80307b4:	07d9      	lsls	r1, r3, #31
 80307b6:	d403      	bmi.n	80307c0 <__lo0bits+0x4e>
 80307b8:	085b      	lsrs	r3, r3, #1
 80307ba:	f100 0001 	add.w	r0, r0, #1
 80307be:	d003      	beq.n	80307c8 <__lo0bits+0x56>
 80307c0:	6013      	str	r3, [r2, #0]
 80307c2:	4770      	bx	lr
 80307c4:	2000      	movs	r0, #0
 80307c6:	4770      	bx	lr
 80307c8:	2020      	movs	r0, #32
 80307ca:	4770      	bx	lr

080307cc <__i2b>:
 80307cc:	b510      	push	{r4, lr}
 80307ce:	460c      	mov	r4, r1
 80307d0:	2101      	movs	r1, #1
 80307d2:	f7ff fef1 	bl	80305b8 <_Balloc>
 80307d6:	4602      	mov	r2, r0
 80307d8:	b928      	cbnz	r0, 80307e6 <__i2b+0x1a>
 80307da:	4b05      	ldr	r3, [pc, #20]	@ (80307f0 <__i2b+0x24>)
 80307dc:	4805      	ldr	r0, [pc, #20]	@ (80307f4 <__i2b+0x28>)
 80307de:	f240 1145 	movw	r1, #325	@ 0x145
 80307e2:	f7f6 fc2b 	bl	802703c <__assert_func>
 80307e6:	2301      	movs	r3, #1
 80307e8:	6144      	str	r4, [r0, #20]
 80307ea:	6103      	str	r3, [r0, #16]
 80307ec:	bd10      	pop	{r4, pc}
 80307ee:	bf00      	nop
 80307f0:	0803865a 	.word	0x0803865a
 80307f4:	0803874e 	.word	0x0803874e

080307f8 <__multiply>:
 80307f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80307fc:	4614      	mov	r4, r2
 80307fe:	690a      	ldr	r2, [r1, #16]
 8030800:	6923      	ldr	r3, [r4, #16]
 8030802:	429a      	cmp	r2, r3
 8030804:	bfa8      	it	ge
 8030806:	4623      	movge	r3, r4
 8030808:	460f      	mov	r7, r1
 803080a:	bfa4      	itt	ge
 803080c:	460c      	movge	r4, r1
 803080e:	461f      	movge	r7, r3
 8030810:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8030814:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8030818:	68a3      	ldr	r3, [r4, #8]
 803081a:	6861      	ldr	r1, [r4, #4]
 803081c:	eb0a 0609 	add.w	r6, sl, r9
 8030820:	42b3      	cmp	r3, r6
 8030822:	b085      	sub	sp, #20
 8030824:	bfb8      	it	lt
 8030826:	3101      	addlt	r1, #1
 8030828:	f7ff fec6 	bl	80305b8 <_Balloc>
 803082c:	b930      	cbnz	r0, 803083c <__multiply+0x44>
 803082e:	4602      	mov	r2, r0
 8030830:	4b44      	ldr	r3, [pc, #272]	@ (8030944 <__multiply+0x14c>)
 8030832:	4845      	ldr	r0, [pc, #276]	@ (8030948 <__multiply+0x150>)
 8030834:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8030838:	f7f6 fc00 	bl	802703c <__assert_func>
 803083c:	f100 0514 	add.w	r5, r0, #20
 8030840:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8030844:	462b      	mov	r3, r5
 8030846:	2200      	movs	r2, #0
 8030848:	4543      	cmp	r3, r8
 803084a:	d321      	bcc.n	8030890 <__multiply+0x98>
 803084c:	f107 0114 	add.w	r1, r7, #20
 8030850:	f104 0214 	add.w	r2, r4, #20
 8030854:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8030858:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 803085c:	9302      	str	r3, [sp, #8]
 803085e:	1b13      	subs	r3, r2, r4
 8030860:	3b15      	subs	r3, #21
 8030862:	f023 0303 	bic.w	r3, r3, #3
 8030866:	3304      	adds	r3, #4
 8030868:	f104 0715 	add.w	r7, r4, #21
 803086c:	42ba      	cmp	r2, r7
 803086e:	bf38      	it	cc
 8030870:	2304      	movcc	r3, #4
 8030872:	9301      	str	r3, [sp, #4]
 8030874:	9b02      	ldr	r3, [sp, #8]
 8030876:	9103      	str	r1, [sp, #12]
 8030878:	428b      	cmp	r3, r1
 803087a:	d80c      	bhi.n	8030896 <__multiply+0x9e>
 803087c:	2e00      	cmp	r6, #0
 803087e:	dd03      	ble.n	8030888 <__multiply+0x90>
 8030880:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8030884:	2b00      	cmp	r3, #0
 8030886:	d05b      	beq.n	8030940 <__multiply+0x148>
 8030888:	6106      	str	r6, [r0, #16]
 803088a:	b005      	add	sp, #20
 803088c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030890:	f843 2b04 	str.w	r2, [r3], #4
 8030894:	e7d8      	b.n	8030848 <__multiply+0x50>
 8030896:	f8b1 a000 	ldrh.w	sl, [r1]
 803089a:	f1ba 0f00 	cmp.w	sl, #0
 803089e:	d024      	beq.n	80308ea <__multiply+0xf2>
 80308a0:	f104 0e14 	add.w	lr, r4, #20
 80308a4:	46a9      	mov	r9, r5
 80308a6:	f04f 0c00 	mov.w	ip, #0
 80308aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80308ae:	f8d9 3000 	ldr.w	r3, [r9]
 80308b2:	fa1f fb87 	uxth.w	fp, r7
 80308b6:	b29b      	uxth	r3, r3
 80308b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80308bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80308c0:	f8d9 7000 	ldr.w	r7, [r9]
 80308c4:	4463      	add	r3, ip
 80308c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80308ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80308ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80308d2:	b29b      	uxth	r3, r3
 80308d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80308d8:	4572      	cmp	r2, lr
 80308da:	f849 3b04 	str.w	r3, [r9], #4
 80308de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80308e2:	d8e2      	bhi.n	80308aa <__multiply+0xb2>
 80308e4:	9b01      	ldr	r3, [sp, #4]
 80308e6:	f845 c003 	str.w	ip, [r5, r3]
 80308ea:	9b03      	ldr	r3, [sp, #12]
 80308ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80308f0:	3104      	adds	r1, #4
 80308f2:	f1b9 0f00 	cmp.w	r9, #0
 80308f6:	d021      	beq.n	803093c <__multiply+0x144>
 80308f8:	682b      	ldr	r3, [r5, #0]
 80308fa:	f104 0c14 	add.w	ip, r4, #20
 80308fe:	46ae      	mov	lr, r5
 8030900:	f04f 0a00 	mov.w	sl, #0
 8030904:	f8bc b000 	ldrh.w	fp, [ip]
 8030908:	f8be 7002 	ldrh.w	r7, [lr, #2]
 803090c:	fb09 770b 	mla	r7, r9, fp, r7
 8030910:	4457      	add	r7, sl
 8030912:	b29b      	uxth	r3, r3
 8030914:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8030918:	f84e 3b04 	str.w	r3, [lr], #4
 803091c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8030920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8030924:	f8be 3000 	ldrh.w	r3, [lr]
 8030928:	fb09 330a 	mla	r3, r9, sl, r3
 803092c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8030930:	4562      	cmp	r2, ip
 8030932:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8030936:	d8e5      	bhi.n	8030904 <__multiply+0x10c>
 8030938:	9f01      	ldr	r7, [sp, #4]
 803093a:	51eb      	str	r3, [r5, r7]
 803093c:	3504      	adds	r5, #4
 803093e:	e799      	b.n	8030874 <__multiply+0x7c>
 8030940:	3e01      	subs	r6, #1
 8030942:	e79b      	b.n	803087c <__multiply+0x84>
 8030944:	0803865a 	.word	0x0803865a
 8030948:	0803874e 	.word	0x0803874e

0803094c <__pow5mult>:
 803094c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030950:	4615      	mov	r5, r2
 8030952:	f012 0203 	ands.w	r2, r2, #3
 8030956:	4607      	mov	r7, r0
 8030958:	460e      	mov	r6, r1
 803095a:	d007      	beq.n	803096c <__pow5mult+0x20>
 803095c:	4c1a      	ldr	r4, [pc, #104]	@ (80309c8 <__pow5mult+0x7c>)
 803095e:	3a01      	subs	r2, #1
 8030960:	2300      	movs	r3, #0
 8030962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8030966:	f7ff fe55 	bl	8030614 <__multadd>
 803096a:	4606      	mov	r6, r0
 803096c:	10ad      	asrs	r5, r5, #2
 803096e:	d027      	beq.n	80309c0 <__pow5mult+0x74>
 8030970:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8030972:	b944      	cbnz	r4, 8030986 <__pow5mult+0x3a>
 8030974:	f240 2171 	movw	r1, #625	@ 0x271
 8030978:	4638      	mov	r0, r7
 803097a:	f7ff ff27 	bl	80307cc <__i2b>
 803097e:	2300      	movs	r3, #0
 8030980:	6438      	str	r0, [r7, #64]	@ 0x40
 8030982:	4604      	mov	r4, r0
 8030984:	6003      	str	r3, [r0, #0]
 8030986:	f04f 0900 	mov.w	r9, #0
 803098a:	07eb      	lsls	r3, r5, #31
 803098c:	d50a      	bpl.n	80309a4 <__pow5mult+0x58>
 803098e:	4631      	mov	r1, r6
 8030990:	4622      	mov	r2, r4
 8030992:	4638      	mov	r0, r7
 8030994:	f7ff ff30 	bl	80307f8 <__multiply>
 8030998:	4631      	mov	r1, r6
 803099a:	4680      	mov	r8, r0
 803099c:	4638      	mov	r0, r7
 803099e:	f7ff fe30 	bl	8030602 <_Bfree>
 80309a2:	4646      	mov	r6, r8
 80309a4:	106d      	asrs	r5, r5, #1
 80309a6:	d00b      	beq.n	80309c0 <__pow5mult+0x74>
 80309a8:	6820      	ldr	r0, [r4, #0]
 80309aa:	b938      	cbnz	r0, 80309bc <__pow5mult+0x70>
 80309ac:	4622      	mov	r2, r4
 80309ae:	4621      	mov	r1, r4
 80309b0:	4638      	mov	r0, r7
 80309b2:	f7ff ff21 	bl	80307f8 <__multiply>
 80309b6:	6020      	str	r0, [r4, #0]
 80309b8:	f8c0 9000 	str.w	r9, [r0]
 80309bc:	4604      	mov	r4, r0
 80309be:	e7e4      	b.n	803098a <__pow5mult+0x3e>
 80309c0:	4630      	mov	r0, r6
 80309c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80309c6:	bf00      	nop
 80309c8:	080387a8 	.word	0x080387a8

080309cc <__lshift>:
 80309cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80309d0:	460c      	mov	r4, r1
 80309d2:	6849      	ldr	r1, [r1, #4]
 80309d4:	6923      	ldr	r3, [r4, #16]
 80309d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80309da:	68a3      	ldr	r3, [r4, #8]
 80309dc:	4607      	mov	r7, r0
 80309de:	4691      	mov	r9, r2
 80309e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80309e4:	f108 0601 	add.w	r6, r8, #1
 80309e8:	42b3      	cmp	r3, r6
 80309ea:	db0b      	blt.n	8030a04 <__lshift+0x38>
 80309ec:	4638      	mov	r0, r7
 80309ee:	f7ff fde3 	bl	80305b8 <_Balloc>
 80309f2:	4605      	mov	r5, r0
 80309f4:	b948      	cbnz	r0, 8030a0a <__lshift+0x3e>
 80309f6:	4602      	mov	r2, r0
 80309f8:	4b28      	ldr	r3, [pc, #160]	@ (8030a9c <__lshift+0xd0>)
 80309fa:	4829      	ldr	r0, [pc, #164]	@ (8030aa0 <__lshift+0xd4>)
 80309fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8030a00:	f7f6 fb1c 	bl	802703c <__assert_func>
 8030a04:	3101      	adds	r1, #1
 8030a06:	005b      	lsls	r3, r3, #1
 8030a08:	e7ee      	b.n	80309e8 <__lshift+0x1c>
 8030a0a:	2300      	movs	r3, #0
 8030a0c:	f100 0114 	add.w	r1, r0, #20
 8030a10:	f100 0210 	add.w	r2, r0, #16
 8030a14:	4618      	mov	r0, r3
 8030a16:	4553      	cmp	r3, sl
 8030a18:	db33      	blt.n	8030a82 <__lshift+0xb6>
 8030a1a:	6920      	ldr	r0, [r4, #16]
 8030a1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8030a20:	f104 0314 	add.w	r3, r4, #20
 8030a24:	f019 091f 	ands.w	r9, r9, #31
 8030a28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8030a2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8030a30:	d02b      	beq.n	8030a8a <__lshift+0xbe>
 8030a32:	f1c9 0e20 	rsb	lr, r9, #32
 8030a36:	468a      	mov	sl, r1
 8030a38:	2200      	movs	r2, #0
 8030a3a:	6818      	ldr	r0, [r3, #0]
 8030a3c:	fa00 f009 	lsl.w	r0, r0, r9
 8030a40:	4310      	orrs	r0, r2
 8030a42:	f84a 0b04 	str.w	r0, [sl], #4
 8030a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8030a4a:	459c      	cmp	ip, r3
 8030a4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8030a50:	d8f3      	bhi.n	8030a3a <__lshift+0x6e>
 8030a52:	ebac 0304 	sub.w	r3, ip, r4
 8030a56:	3b15      	subs	r3, #21
 8030a58:	f023 0303 	bic.w	r3, r3, #3
 8030a5c:	3304      	adds	r3, #4
 8030a5e:	f104 0015 	add.w	r0, r4, #21
 8030a62:	4584      	cmp	ip, r0
 8030a64:	bf38      	it	cc
 8030a66:	2304      	movcc	r3, #4
 8030a68:	50ca      	str	r2, [r1, r3]
 8030a6a:	b10a      	cbz	r2, 8030a70 <__lshift+0xa4>
 8030a6c:	f108 0602 	add.w	r6, r8, #2
 8030a70:	3e01      	subs	r6, #1
 8030a72:	4638      	mov	r0, r7
 8030a74:	612e      	str	r6, [r5, #16]
 8030a76:	4621      	mov	r1, r4
 8030a78:	f7ff fdc3 	bl	8030602 <_Bfree>
 8030a7c:	4628      	mov	r0, r5
 8030a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030a82:	f842 0f04 	str.w	r0, [r2, #4]!
 8030a86:	3301      	adds	r3, #1
 8030a88:	e7c5      	b.n	8030a16 <__lshift+0x4a>
 8030a8a:	3904      	subs	r1, #4
 8030a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8030a90:	f841 2f04 	str.w	r2, [r1, #4]!
 8030a94:	459c      	cmp	ip, r3
 8030a96:	d8f9      	bhi.n	8030a8c <__lshift+0xc0>
 8030a98:	e7ea      	b.n	8030a70 <__lshift+0xa4>
 8030a9a:	bf00      	nop
 8030a9c:	0803865a 	.word	0x0803865a
 8030aa0:	0803874e 	.word	0x0803874e

08030aa4 <__mcmp>:
 8030aa4:	690a      	ldr	r2, [r1, #16]
 8030aa6:	4603      	mov	r3, r0
 8030aa8:	6900      	ldr	r0, [r0, #16]
 8030aaa:	1a80      	subs	r0, r0, r2
 8030aac:	b530      	push	{r4, r5, lr}
 8030aae:	d10e      	bne.n	8030ace <__mcmp+0x2a>
 8030ab0:	3314      	adds	r3, #20
 8030ab2:	3114      	adds	r1, #20
 8030ab4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8030ab8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8030abc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8030ac0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8030ac4:	4295      	cmp	r5, r2
 8030ac6:	d003      	beq.n	8030ad0 <__mcmp+0x2c>
 8030ac8:	d205      	bcs.n	8030ad6 <__mcmp+0x32>
 8030aca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8030ace:	bd30      	pop	{r4, r5, pc}
 8030ad0:	42a3      	cmp	r3, r4
 8030ad2:	d3f3      	bcc.n	8030abc <__mcmp+0x18>
 8030ad4:	e7fb      	b.n	8030ace <__mcmp+0x2a>
 8030ad6:	2001      	movs	r0, #1
 8030ad8:	e7f9      	b.n	8030ace <__mcmp+0x2a>
	...

08030adc <__mdiff>:
 8030adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030ae0:	4689      	mov	r9, r1
 8030ae2:	4606      	mov	r6, r0
 8030ae4:	4611      	mov	r1, r2
 8030ae6:	4648      	mov	r0, r9
 8030ae8:	4614      	mov	r4, r2
 8030aea:	f7ff ffdb 	bl	8030aa4 <__mcmp>
 8030aee:	1e05      	subs	r5, r0, #0
 8030af0:	d112      	bne.n	8030b18 <__mdiff+0x3c>
 8030af2:	4629      	mov	r1, r5
 8030af4:	4630      	mov	r0, r6
 8030af6:	f7ff fd5f 	bl	80305b8 <_Balloc>
 8030afa:	4602      	mov	r2, r0
 8030afc:	b928      	cbnz	r0, 8030b0a <__mdiff+0x2e>
 8030afe:	4b3f      	ldr	r3, [pc, #252]	@ (8030bfc <__mdiff+0x120>)
 8030b00:	f240 2137 	movw	r1, #567	@ 0x237
 8030b04:	483e      	ldr	r0, [pc, #248]	@ (8030c00 <__mdiff+0x124>)
 8030b06:	f7f6 fa99 	bl	802703c <__assert_func>
 8030b0a:	2301      	movs	r3, #1
 8030b0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8030b10:	4610      	mov	r0, r2
 8030b12:	b003      	add	sp, #12
 8030b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030b18:	bfbc      	itt	lt
 8030b1a:	464b      	movlt	r3, r9
 8030b1c:	46a1      	movlt	r9, r4
 8030b1e:	4630      	mov	r0, r6
 8030b20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8030b24:	bfba      	itte	lt
 8030b26:	461c      	movlt	r4, r3
 8030b28:	2501      	movlt	r5, #1
 8030b2a:	2500      	movge	r5, #0
 8030b2c:	f7ff fd44 	bl	80305b8 <_Balloc>
 8030b30:	4602      	mov	r2, r0
 8030b32:	b918      	cbnz	r0, 8030b3c <__mdiff+0x60>
 8030b34:	4b31      	ldr	r3, [pc, #196]	@ (8030bfc <__mdiff+0x120>)
 8030b36:	f240 2145 	movw	r1, #581	@ 0x245
 8030b3a:	e7e3      	b.n	8030b04 <__mdiff+0x28>
 8030b3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8030b40:	6926      	ldr	r6, [r4, #16]
 8030b42:	60c5      	str	r5, [r0, #12]
 8030b44:	f109 0310 	add.w	r3, r9, #16
 8030b48:	f109 0514 	add.w	r5, r9, #20
 8030b4c:	f104 0e14 	add.w	lr, r4, #20
 8030b50:	f100 0b14 	add.w	fp, r0, #20
 8030b54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8030b58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8030b5c:	9301      	str	r3, [sp, #4]
 8030b5e:	46d9      	mov	r9, fp
 8030b60:	f04f 0c00 	mov.w	ip, #0
 8030b64:	9b01      	ldr	r3, [sp, #4]
 8030b66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8030b6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8030b6e:	9301      	str	r3, [sp, #4]
 8030b70:	fa1f f38a 	uxth.w	r3, sl
 8030b74:	4619      	mov	r1, r3
 8030b76:	b283      	uxth	r3, r0
 8030b78:	1acb      	subs	r3, r1, r3
 8030b7a:	0c00      	lsrs	r0, r0, #16
 8030b7c:	4463      	add	r3, ip
 8030b7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8030b82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8030b86:	b29b      	uxth	r3, r3
 8030b88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8030b8c:	4576      	cmp	r6, lr
 8030b8e:	f849 3b04 	str.w	r3, [r9], #4
 8030b92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8030b96:	d8e5      	bhi.n	8030b64 <__mdiff+0x88>
 8030b98:	1b33      	subs	r3, r6, r4
 8030b9a:	3b15      	subs	r3, #21
 8030b9c:	f023 0303 	bic.w	r3, r3, #3
 8030ba0:	3415      	adds	r4, #21
 8030ba2:	3304      	adds	r3, #4
 8030ba4:	42a6      	cmp	r6, r4
 8030ba6:	bf38      	it	cc
 8030ba8:	2304      	movcc	r3, #4
 8030baa:	441d      	add	r5, r3
 8030bac:	445b      	add	r3, fp
 8030bae:	461e      	mov	r6, r3
 8030bb0:	462c      	mov	r4, r5
 8030bb2:	4544      	cmp	r4, r8
 8030bb4:	d30e      	bcc.n	8030bd4 <__mdiff+0xf8>
 8030bb6:	f108 0103 	add.w	r1, r8, #3
 8030bba:	1b49      	subs	r1, r1, r5
 8030bbc:	f021 0103 	bic.w	r1, r1, #3
 8030bc0:	3d03      	subs	r5, #3
 8030bc2:	45a8      	cmp	r8, r5
 8030bc4:	bf38      	it	cc
 8030bc6:	2100      	movcc	r1, #0
 8030bc8:	440b      	add	r3, r1
 8030bca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8030bce:	b191      	cbz	r1, 8030bf6 <__mdiff+0x11a>
 8030bd0:	6117      	str	r7, [r2, #16]
 8030bd2:	e79d      	b.n	8030b10 <__mdiff+0x34>
 8030bd4:	f854 1b04 	ldr.w	r1, [r4], #4
 8030bd8:	46e6      	mov	lr, ip
 8030bda:	0c08      	lsrs	r0, r1, #16
 8030bdc:	fa1c fc81 	uxtah	ip, ip, r1
 8030be0:	4471      	add	r1, lr
 8030be2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8030be6:	b289      	uxth	r1, r1
 8030be8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8030bec:	f846 1b04 	str.w	r1, [r6], #4
 8030bf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8030bf4:	e7dd      	b.n	8030bb2 <__mdiff+0xd6>
 8030bf6:	3f01      	subs	r7, #1
 8030bf8:	e7e7      	b.n	8030bca <__mdiff+0xee>
 8030bfa:	bf00      	nop
 8030bfc:	0803865a 	.word	0x0803865a
 8030c00:	0803874e 	.word	0x0803874e

08030c04 <__ulp>:
 8030c04:	b082      	sub	sp, #8
 8030c06:	ed8d 0b00 	vstr	d0, [sp]
 8030c0a:	9a01      	ldr	r2, [sp, #4]
 8030c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8030c4c <__ulp+0x48>)
 8030c0e:	4013      	ands	r3, r2
 8030c10:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8030c14:	2b00      	cmp	r3, #0
 8030c16:	dc08      	bgt.n	8030c2a <__ulp+0x26>
 8030c18:	425b      	negs	r3, r3
 8030c1a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8030c1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8030c22:	da04      	bge.n	8030c2e <__ulp+0x2a>
 8030c24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8030c28:	4113      	asrs	r3, r2
 8030c2a:	2200      	movs	r2, #0
 8030c2c:	e008      	b.n	8030c40 <__ulp+0x3c>
 8030c2e:	f1a2 0314 	sub.w	r3, r2, #20
 8030c32:	2b1e      	cmp	r3, #30
 8030c34:	bfda      	itte	le
 8030c36:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8030c3a:	40da      	lsrle	r2, r3
 8030c3c:	2201      	movgt	r2, #1
 8030c3e:	2300      	movs	r3, #0
 8030c40:	4619      	mov	r1, r3
 8030c42:	4610      	mov	r0, r2
 8030c44:	ec41 0b10 	vmov	d0, r0, r1
 8030c48:	b002      	add	sp, #8
 8030c4a:	4770      	bx	lr
 8030c4c:	7ff00000 	.word	0x7ff00000

08030c50 <__b2d>:
 8030c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030c54:	6906      	ldr	r6, [r0, #16]
 8030c56:	f100 0814 	add.w	r8, r0, #20
 8030c5a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8030c5e:	1f37      	subs	r7, r6, #4
 8030c60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8030c64:	4610      	mov	r0, r2
 8030c66:	f7ff fd65 	bl	8030734 <__hi0bits>
 8030c6a:	f1c0 0320 	rsb	r3, r0, #32
 8030c6e:	280a      	cmp	r0, #10
 8030c70:	600b      	str	r3, [r1, #0]
 8030c72:	491b      	ldr	r1, [pc, #108]	@ (8030ce0 <__b2d+0x90>)
 8030c74:	dc15      	bgt.n	8030ca2 <__b2d+0x52>
 8030c76:	f1c0 0c0b 	rsb	ip, r0, #11
 8030c7a:	fa22 f30c 	lsr.w	r3, r2, ip
 8030c7e:	45b8      	cmp	r8, r7
 8030c80:	ea43 0501 	orr.w	r5, r3, r1
 8030c84:	bf34      	ite	cc
 8030c86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8030c8a:	2300      	movcs	r3, #0
 8030c8c:	3015      	adds	r0, #21
 8030c8e:	fa02 f000 	lsl.w	r0, r2, r0
 8030c92:	fa23 f30c 	lsr.w	r3, r3, ip
 8030c96:	4303      	orrs	r3, r0
 8030c98:	461c      	mov	r4, r3
 8030c9a:	ec45 4b10 	vmov	d0, r4, r5
 8030c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030ca2:	45b8      	cmp	r8, r7
 8030ca4:	bf3a      	itte	cc
 8030ca6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8030caa:	f1a6 0708 	subcc.w	r7, r6, #8
 8030cae:	2300      	movcs	r3, #0
 8030cb0:	380b      	subs	r0, #11
 8030cb2:	d012      	beq.n	8030cda <__b2d+0x8a>
 8030cb4:	f1c0 0120 	rsb	r1, r0, #32
 8030cb8:	fa23 f401 	lsr.w	r4, r3, r1
 8030cbc:	4082      	lsls	r2, r0
 8030cbe:	4322      	orrs	r2, r4
 8030cc0:	4547      	cmp	r7, r8
 8030cc2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8030cc6:	bf8c      	ite	hi
 8030cc8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8030ccc:	2200      	movls	r2, #0
 8030cce:	4083      	lsls	r3, r0
 8030cd0:	40ca      	lsrs	r2, r1
 8030cd2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8030cd6:	4313      	orrs	r3, r2
 8030cd8:	e7de      	b.n	8030c98 <__b2d+0x48>
 8030cda:	ea42 0501 	orr.w	r5, r2, r1
 8030cde:	e7db      	b.n	8030c98 <__b2d+0x48>
 8030ce0:	3ff00000 	.word	0x3ff00000

08030ce4 <__d2b>:
 8030ce4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8030ce8:	460f      	mov	r7, r1
 8030cea:	2101      	movs	r1, #1
 8030cec:	ec59 8b10 	vmov	r8, r9, d0
 8030cf0:	4616      	mov	r6, r2
 8030cf2:	f7ff fc61 	bl	80305b8 <_Balloc>
 8030cf6:	4604      	mov	r4, r0
 8030cf8:	b930      	cbnz	r0, 8030d08 <__d2b+0x24>
 8030cfa:	4602      	mov	r2, r0
 8030cfc:	4b23      	ldr	r3, [pc, #140]	@ (8030d8c <__d2b+0xa8>)
 8030cfe:	4824      	ldr	r0, [pc, #144]	@ (8030d90 <__d2b+0xac>)
 8030d00:	f240 310f 	movw	r1, #783	@ 0x30f
 8030d04:	f7f6 f99a 	bl	802703c <__assert_func>
 8030d08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8030d0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8030d10:	b10d      	cbz	r5, 8030d16 <__d2b+0x32>
 8030d12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8030d16:	9301      	str	r3, [sp, #4]
 8030d18:	f1b8 0300 	subs.w	r3, r8, #0
 8030d1c:	d023      	beq.n	8030d66 <__d2b+0x82>
 8030d1e:	4668      	mov	r0, sp
 8030d20:	9300      	str	r3, [sp, #0]
 8030d22:	f7ff fd26 	bl	8030772 <__lo0bits>
 8030d26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8030d2a:	b1d0      	cbz	r0, 8030d62 <__d2b+0x7e>
 8030d2c:	f1c0 0320 	rsb	r3, r0, #32
 8030d30:	fa02 f303 	lsl.w	r3, r2, r3
 8030d34:	430b      	orrs	r3, r1
 8030d36:	40c2      	lsrs	r2, r0
 8030d38:	6163      	str	r3, [r4, #20]
 8030d3a:	9201      	str	r2, [sp, #4]
 8030d3c:	9b01      	ldr	r3, [sp, #4]
 8030d3e:	61a3      	str	r3, [r4, #24]
 8030d40:	2b00      	cmp	r3, #0
 8030d42:	bf0c      	ite	eq
 8030d44:	2201      	moveq	r2, #1
 8030d46:	2202      	movne	r2, #2
 8030d48:	6122      	str	r2, [r4, #16]
 8030d4a:	b1a5      	cbz	r5, 8030d76 <__d2b+0x92>
 8030d4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8030d50:	4405      	add	r5, r0
 8030d52:	603d      	str	r5, [r7, #0]
 8030d54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8030d58:	6030      	str	r0, [r6, #0]
 8030d5a:	4620      	mov	r0, r4
 8030d5c:	b003      	add	sp, #12
 8030d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8030d62:	6161      	str	r1, [r4, #20]
 8030d64:	e7ea      	b.n	8030d3c <__d2b+0x58>
 8030d66:	a801      	add	r0, sp, #4
 8030d68:	f7ff fd03 	bl	8030772 <__lo0bits>
 8030d6c:	9b01      	ldr	r3, [sp, #4]
 8030d6e:	6163      	str	r3, [r4, #20]
 8030d70:	3020      	adds	r0, #32
 8030d72:	2201      	movs	r2, #1
 8030d74:	e7e8      	b.n	8030d48 <__d2b+0x64>
 8030d76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8030d7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8030d7e:	6038      	str	r0, [r7, #0]
 8030d80:	6918      	ldr	r0, [r3, #16]
 8030d82:	f7ff fcd7 	bl	8030734 <__hi0bits>
 8030d86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8030d8a:	e7e5      	b.n	8030d58 <__d2b+0x74>
 8030d8c:	0803865a 	.word	0x0803865a
 8030d90:	0803874e 	.word	0x0803874e

08030d94 <__ratio>:
 8030d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030d98:	b085      	sub	sp, #20
 8030d9a:	e9cd 1000 	strd	r1, r0, [sp]
 8030d9e:	a902      	add	r1, sp, #8
 8030da0:	f7ff ff56 	bl	8030c50 <__b2d>
 8030da4:	9800      	ldr	r0, [sp, #0]
 8030da6:	a903      	add	r1, sp, #12
 8030da8:	ec55 4b10 	vmov	r4, r5, d0
 8030dac:	f7ff ff50 	bl	8030c50 <__b2d>
 8030db0:	9b01      	ldr	r3, [sp, #4]
 8030db2:	6919      	ldr	r1, [r3, #16]
 8030db4:	9b00      	ldr	r3, [sp, #0]
 8030db6:	691b      	ldr	r3, [r3, #16]
 8030db8:	1ac9      	subs	r1, r1, r3
 8030dba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8030dbe:	1a9b      	subs	r3, r3, r2
 8030dc0:	ec5b ab10 	vmov	sl, fp, d0
 8030dc4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8030dc8:	2b00      	cmp	r3, #0
 8030dca:	bfce      	itee	gt
 8030dcc:	462a      	movgt	r2, r5
 8030dce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8030dd2:	465a      	movle	r2, fp
 8030dd4:	462f      	mov	r7, r5
 8030dd6:	46d9      	mov	r9, fp
 8030dd8:	bfcc      	ite	gt
 8030dda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8030dde:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8030de2:	464b      	mov	r3, r9
 8030de4:	4652      	mov	r2, sl
 8030de6:	4620      	mov	r0, r4
 8030de8:	4639      	mov	r1, r7
 8030dea:	f7df fd47 	bl	801087c <__aeabi_ddiv>
 8030dee:	ec41 0b10 	vmov	d0, r0, r1
 8030df2:	b005      	add	sp, #20
 8030df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08030df8 <__copybits>:
 8030df8:	3901      	subs	r1, #1
 8030dfa:	b570      	push	{r4, r5, r6, lr}
 8030dfc:	1149      	asrs	r1, r1, #5
 8030dfe:	6914      	ldr	r4, [r2, #16]
 8030e00:	3101      	adds	r1, #1
 8030e02:	f102 0314 	add.w	r3, r2, #20
 8030e06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8030e0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8030e0e:	1f05      	subs	r5, r0, #4
 8030e10:	42a3      	cmp	r3, r4
 8030e12:	d30c      	bcc.n	8030e2e <__copybits+0x36>
 8030e14:	1aa3      	subs	r3, r4, r2
 8030e16:	3b11      	subs	r3, #17
 8030e18:	f023 0303 	bic.w	r3, r3, #3
 8030e1c:	3211      	adds	r2, #17
 8030e1e:	42a2      	cmp	r2, r4
 8030e20:	bf88      	it	hi
 8030e22:	2300      	movhi	r3, #0
 8030e24:	4418      	add	r0, r3
 8030e26:	2300      	movs	r3, #0
 8030e28:	4288      	cmp	r0, r1
 8030e2a:	d305      	bcc.n	8030e38 <__copybits+0x40>
 8030e2c:	bd70      	pop	{r4, r5, r6, pc}
 8030e2e:	f853 6b04 	ldr.w	r6, [r3], #4
 8030e32:	f845 6f04 	str.w	r6, [r5, #4]!
 8030e36:	e7eb      	b.n	8030e10 <__copybits+0x18>
 8030e38:	f840 3b04 	str.w	r3, [r0], #4
 8030e3c:	e7f4      	b.n	8030e28 <__copybits+0x30>

08030e3e <__any_on>:
 8030e3e:	f100 0214 	add.w	r2, r0, #20
 8030e42:	6900      	ldr	r0, [r0, #16]
 8030e44:	114b      	asrs	r3, r1, #5
 8030e46:	4298      	cmp	r0, r3
 8030e48:	b510      	push	{r4, lr}
 8030e4a:	db11      	blt.n	8030e70 <__any_on+0x32>
 8030e4c:	dd0a      	ble.n	8030e64 <__any_on+0x26>
 8030e4e:	f011 011f 	ands.w	r1, r1, #31
 8030e52:	d007      	beq.n	8030e64 <__any_on+0x26>
 8030e54:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8030e58:	fa24 f001 	lsr.w	r0, r4, r1
 8030e5c:	fa00 f101 	lsl.w	r1, r0, r1
 8030e60:	428c      	cmp	r4, r1
 8030e62:	d10b      	bne.n	8030e7c <__any_on+0x3e>
 8030e64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8030e68:	4293      	cmp	r3, r2
 8030e6a:	d803      	bhi.n	8030e74 <__any_on+0x36>
 8030e6c:	2000      	movs	r0, #0
 8030e6e:	bd10      	pop	{r4, pc}
 8030e70:	4603      	mov	r3, r0
 8030e72:	e7f7      	b.n	8030e64 <__any_on+0x26>
 8030e74:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8030e78:	2900      	cmp	r1, #0
 8030e7a:	d0f5      	beq.n	8030e68 <__any_on+0x2a>
 8030e7c:	2001      	movs	r0, #1
 8030e7e:	e7f6      	b.n	8030e6e <__any_on+0x30>

08030e80 <realloc>:
 8030e80:	4b02      	ldr	r3, [pc, #8]	@ (8030e8c <realloc+0xc>)
 8030e82:	460a      	mov	r2, r1
 8030e84:	4601      	mov	r1, r0
 8030e86:	6818      	ldr	r0, [r3, #0]
 8030e88:	f000 b890 	b.w	8030fac <_realloc_r>
 8030e8c:	20000254 	.word	0x20000254

08030e90 <_fclose_r>:
 8030e90:	b570      	push	{r4, r5, r6, lr}
 8030e92:	4605      	mov	r5, r0
 8030e94:	460c      	mov	r4, r1
 8030e96:	b1b1      	cbz	r1, 8030ec6 <_fclose_r+0x36>
 8030e98:	b118      	cbz	r0, 8030ea2 <_fclose_r+0x12>
 8030e9a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8030e9c:	b90b      	cbnz	r3, 8030ea2 <_fclose_r+0x12>
 8030e9e:	f7f8 fb79 	bl	8029594 <__sinit>
 8030ea2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8030ea4:	07de      	lsls	r6, r3, #31
 8030ea6:	d405      	bmi.n	8030eb4 <_fclose_r+0x24>
 8030ea8:	89a3      	ldrh	r3, [r4, #12]
 8030eaa:	0598      	lsls	r0, r3, #22
 8030eac:	d402      	bmi.n	8030eb4 <_fclose_r+0x24>
 8030eae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030eb0:	f7fa f84f 	bl	802af52 <__retarget_lock_acquire_recursive>
 8030eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030eb8:	b943      	cbnz	r3, 8030ecc <_fclose_r+0x3c>
 8030eba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8030ebc:	07d9      	lsls	r1, r3, #31
 8030ebe:	d402      	bmi.n	8030ec6 <_fclose_r+0x36>
 8030ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030ec2:	f7fa f848 	bl	802af56 <__retarget_lock_release_recursive>
 8030ec6:	2600      	movs	r6, #0
 8030ec8:	4630      	mov	r0, r6
 8030eca:	bd70      	pop	{r4, r5, r6, pc}
 8030ecc:	4621      	mov	r1, r4
 8030ece:	4628      	mov	r0, r5
 8030ed0:	f7f8 f996 	bl	8029200 <__sflush_r>
 8030ed4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8030ed6:	4606      	mov	r6, r0
 8030ed8:	b133      	cbz	r3, 8030ee8 <_fclose_r+0x58>
 8030eda:	69e1      	ldr	r1, [r4, #28]
 8030edc:	4628      	mov	r0, r5
 8030ede:	4798      	blx	r3
 8030ee0:	2800      	cmp	r0, #0
 8030ee2:	bfb8      	it	lt
 8030ee4:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8030ee8:	89a3      	ldrh	r3, [r4, #12]
 8030eea:	061a      	lsls	r2, r3, #24
 8030eec:	d503      	bpl.n	8030ef6 <_fclose_r+0x66>
 8030eee:	6921      	ldr	r1, [r4, #16]
 8030ef0:	4628      	mov	r0, r5
 8030ef2:	f7fa ff33 	bl	802bd5c <_free_r>
 8030ef6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8030ef8:	b141      	cbz	r1, 8030f0c <_fclose_r+0x7c>
 8030efa:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8030efe:	4299      	cmp	r1, r3
 8030f00:	d002      	beq.n	8030f08 <_fclose_r+0x78>
 8030f02:	4628      	mov	r0, r5
 8030f04:	f7fa ff2a 	bl	802bd5c <_free_r>
 8030f08:	2300      	movs	r3, #0
 8030f0a:	6323      	str	r3, [r4, #48]	@ 0x30
 8030f0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8030f0e:	b121      	cbz	r1, 8030f1a <_fclose_r+0x8a>
 8030f10:	4628      	mov	r0, r5
 8030f12:	f7fa ff23 	bl	802bd5c <_free_r>
 8030f16:	2300      	movs	r3, #0
 8030f18:	6463      	str	r3, [r4, #68]	@ 0x44
 8030f1a:	f7f8 fb2f 	bl	802957c <__sfp_lock_acquire>
 8030f1e:	2300      	movs	r3, #0
 8030f20:	81a3      	strh	r3, [r4, #12]
 8030f22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8030f24:	07db      	lsls	r3, r3, #31
 8030f26:	d402      	bmi.n	8030f2e <_fclose_r+0x9e>
 8030f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030f2a:	f7fa f814 	bl	802af56 <__retarget_lock_release_recursive>
 8030f2e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030f30:	f7fa f80d 	bl	802af4e <__retarget_lock_close_recursive>
 8030f34:	f7f8 fb28 	bl	8029588 <__sfp_lock_release>
 8030f38:	e7c6      	b.n	8030ec8 <_fclose_r+0x38>

08030f3a <__sccl>:
 8030f3a:	b570      	push	{r4, r5, r6, lr}
 8030f3c:	780b      	ldrb	r3, [r1, #0]
 8030f3e:	4604      	mov	r4, r0
 8030f40:	2b5e      	cmp	r3, #94	@ 0x5e
 8030f42:	bf0b      	itete	eq
 8030f44:	784b      	ldrbeq	r3, [r1, #1]
 8030f46:	1c4a      	addne	r2, r1, #1
 8030f48:	1c8a      	addeq	r2, r1, #2
 8030f4a:	2100      	movne	r1, #0
 8030f4c:	bf08      	it	eq
 8030f4e:	2101      	moveq	r1, #1
 8030f50:	3801      	subs	r0, #1
 8030f52:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8030f56:	f800 1f01 	strb.w	r1, [r0, #1]!
 8030f5a:	42a8      	cmp	r0, r5
 8030f5c:	d1fb      	bne.n	8030f56 <__sccl+0x1c>
 8030f5e:	b90b      	cbnz	r3, 8030f64 <__sccl+0x2a>
 8030f60:	1e50      	subs	r0, r2, #1
 8030f62:	bd70      	pop	{r4, r5, r6, pc}
 8030f64:	f081 0101 	eor.w	r1, r1, #1
 8030f68:	54e1      	strb	r1, [r4, r3]
 8030f6a:	4610      	mov	r0, r2
 8030f6c:	4602      	mov	r2, r0
 8030f6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8030f72:	2d2d      	cmp	r5, #45	@ 0x2d
 8030f74:	d005      	beq.n	8030f82 <__sccl+0x48>
 8030f76:	2d5d      	cmp	r5, #93	@ 0x5d
 8030f78:	d016      	beq.n	8030fa8 <__sccl+0x6e>
 8030f7a:	2d00      	cmp	r5, #0
 8030f7c:	d0f1      	beq.n	8030f62 <__sccl+0x28>
 8030f7e:	462b      	mov	r3, r5
 8030f80:	e7f2      	b.n	8030f68 <__sccl+0x2e>
 8030f82:	7846      	ldrb	r6, [r0, #1]
 8030f84:	2e5d      	cmp	r6, #93	@ 0x5d
 8030f86:	d0fa      	beq.n	8030f7e <__sccl+0x44>
 8030f88:	42b3      	cmp	r3, r6
 8030f8a:	dcf8      	bgt.n	8030f7e <__sccl+0x44>
 8030f8c:	3002      	adds	r0, #2
 8030f8e:	461a      	mov	r2, r3
 8030f90:	3201      	adds	r2, #1
 8030f92:	4296      	cmp	r6, r2
 8030f94:	54a1      	strb	r1, [r4, r2]
 8030f96:	dcfb      	bgt.n	8030f90 <__sccl+0x56>
 8030f98:	1af2      	subs	r2, r6, r3
 8030f9a:	3a01      	subs	r2, #1
 8030f9c:	1c5d      	adds	r5, r3, #1
 8030f9e:	42b3      	cmp	r3, r6
 8030fa0:	bfa8      	it	ge
 8030fa2:	2200      	movge	r2, #0
 8030fa4:	18ab      	adds	r3, r5, r2
 8030fa6:	e7e1      	b.n	8030f6c <__sccl+0x32>
 8030fa8:	4610      	mov	r0, r2
 8030faa:	e7da      	b.n	8030f62 <__sccl+0x28>

08030fac <_realloc_r>:
 8030fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030fb0:	4682      	mov	sl, r0
 8030fb2:	4693      	mov	fp, r2
 8030fb4:	460c      	mov	r4, r1
 8030fb6:	b929      	cbnz	r1, 8030fc4 <_realloc_r+0x18>
 8030fb8:	4611      	mov	r1, r2
 8030fba:	b003      	add	sp, #12
 8030fbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030fc0:	f7fa bfe4 	b.w	802bf8c <_malloc_r>
 8030fc4:	f7ff faec 	bl	80305a0 <__malloc_lock>
 8030fc8:	f10b 080b 	add.w	r8, fp, #11
 8030fcc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8030fd0:	f1b8 0f16 	cmp.w	r8, #22
 8030fd4:	f1a4 0908 	sub.w	r9, r4, #8
 8030fd8:	f025 0603 	bic.w	r6, r5, #3
 8030fdc:	d908      	bls.n	8030ff0 <_realloc_r+0x44>
 8030fde:	f038 0807 	bics.w	r8, r8, #7
 8030fe2:	d507      	bpl.n	8030ff4 <_realloc_r+0x48>
 8030fe4:	230c      	movs	r3, #12
 8030fe6:	f8ca 3000 	str.w	r3, [sl]
 8030fea:	f04f 0b00 	mov.w	fp, #0
 8030fee:	e032      	b.n	8031056 <_realloc_r+0xaa>
 8030ff0:	f04f 0810 	mov.w	r8, #16
 8030ff4:	45c3      	cmp	fp, r8
 8030ff6:	d8f5      	bhi.n	8030fe4 <_realloc_r+0x38>
 8030ff8:	4546      	cmp	r6, r8
 8030ffa:	f280 8174 	bge.w	80312e6 <_realloc_r+0x33a>
 8030ffe:	4b9e      	ldr	r3, [pc, #632]	@ (8031278 <_realloc_r+0x2cc>)
 8031000:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8031004:	eb09 0106 	add.w	r1, r9, r6
 8031008:	458c      	cmp	ip, r1
 803100a:	6848      	ldr	r0, [r1, #4]
 803100c:	d005      	beq.n	803101a <_realloc_r+0x6e>
 803100e:	f020 0201 	bic.w	r2, r0, #1
 8031012:	440a      	add	r2, r1
 8031014:	6852      	ldr	r2, [r2, #4]
 8031016:	07d7      	lsls	r7, r2, #31
 8031018:	d449      	bmi.n	80310ae <_realloc_r+0x102>
 803101a:	f020 0003 	bic.w	r0, r0, #3
 803101e:	458c      	cmp	ip, r1
 8031020:	eb06 0700 	add.w	r7, r6, r0
 8031024:	d11b      	bne.n	803105e <_realloc_r+0xb2>
 8031026:	f108 0210 	add.w	r2, r8, #16
 803102a:	42ba      	cmp	r2, r7
 803102c:	dc41      	bgt.n	80310b2 <_realloc_r+0x106>
 803102e:	eb09 0208 	add.w	r2, r9, r8
 8031032:	eba7 0708 	sub.w	r7, r7, r8
 8031036:	f047 0701 	orr.w	r7, r7, #1
 803103a:	609a      	str	r2, [r3, #8]
 803103c:	6057      	str	r7, [r2, #4]
 803103e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8031042:	f003 0301 	and.w	r3, r3, #1
 8031046:	ea43 0308 	orr.w	r3, r3, r8
 803104a:	f844 3c04 	str.w	r3, [r4, #-4]
 803104e:	4650      	mov	r0, sl
 8031050:	f7ff faac 	bl	80305ac <__malloc_unlock>
 8031054:	46a3      	mov	fp, r4
 8031056:	4658      	mov	r0, fp
 8031058:	b003      	add	sp, #12
 803105a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803105e:	45b8      	cmp	r8, r7
 8031060:	dc27      	bgt.n	80310b2 <_realloc_r+0x106>
 8031062:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8031066:	60d3      	str	r3, [r2, #12]
 8031068:	609a      	str	r2, [r3, #8]
 803106a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 803106e:	eba7 0008 	sub.w	r0, r7, r8
 8031072:	280f      	cmp	r0, #15
 8031074:	f003 0301 	and.w	r3, r3, #1
 8031078:	eb09 0207 	add.w	r2, r9, r7
 803107c:	f240 8135 	bls.w	80312ea <_realloc_r+0x33e>
 8031080:	eb09 0108 	add.w	r1, r9, r8
 8031084:	ea48 0303 	orr.w	r3, r8, r3
 8031088:	f040 0001 	orr.w	r0, r0, #1
 803108c:	f8c9 3004 	str.w	r3, [r9, #4]
 8031090:	6048      	str	r0, [r1, #4]
 8031092:	6853      	ldr	r3, [r2, #4]
 8031094:	f043 0301 	orr.w	r3, r3, #1
 8031098:	6053      	str	r3, [r2, #4]
 803109a:	3108      	adds	r1, #8
 803109c:	4650      	mov	r0, sl
 803109e:	f7fa fe5d 	bl	802bd5c <_free_r>
 80310a2:	4650      	mov	r0, sl
 80310a4:	f7ff fa82 	bl	80305ac <__malloc_unlock>
 80310a8:	f109 0b08 	add.w	fp, r9, #8
 80310ac:	e7d3      	b.n	8031056 <_realloc_r+0xaa>
 80310ae:	2000      	movs	r0, #0
 80310b0:	4601      	mov	r1, r0
 80310b2:	07ea      	lsls	r2, r5, #31
 80310b4:	f100 80c7 	bmi.w	8031246 <_realloc_r+0x29a>
 80310b8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80310bc:	eba9 0505 	sub.w	r5, r9, r5
 80310c0:	686a      	ldr	r2, [r5, #4]
 80310c2:	f022 0203 	bic.w	r2, r2, #3
 80310c6:	4432      	add	r2, r6
 80310c8:	9201      	str	r2, [sp, #4]
 80310ca:	2900      	cmp	r1, #0
 80310cc:	f000 8086 	beq.w	80311dc <_realloc_r+0x230>
 80310d0:	458c      	cmp	ip, r1
 80310d2:	eb00 0702 	add.w	r7, r0, r2
 80310d6:	d149      	bne.n	803116c <_realloc_r+0x1c0>
 80310d8:	f108 0210 	add.w	r2, r8, #16
 80310dc:	42ba      	cmp	r2, r7
 80310de:	dc7d      	bgt.n	80311dc <_realloc_r+0x230>
 80310e0:	46ab      	mov	fp, r5
 80310e2:	68ea      	ldr	r2, [r5, #12]
 80310e4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 80310e8:	60ca      	str	r2, [r1, #12]
 80310ea:	6091      	str	r1, [r2, #8]
 80310ec:	1f32      	subs	r2, r6, #4
 80310ee:	2a24      	cmp	r2, #36	@ 0x24
 80310f0:	d836      	bhi.n	8031160 <_realloc_r+0x1b4>
 80310f2:	2a13      	cmp	r2, #19
 80310f4:	d932      	bls.n	803115c <_realloc_r+0x1b0>
 80310f6:	6821      	ldr	r1, [r4, #0]
 80310f8:	60a9      	str	r1, [r5, #8]
 80310fa:	6861      	ldr	r1, [r4, #4]
 80310fc:	60e9      	str	r1, [r5, #12]
 80310fe:	2a1b      	cmp	r2, #27
 8031100:	d81a      	bhi.n	8031138 <_realloc_r+0x18c>
 8031102:	3408      	adds	r4, #8
 8031104:	f105 0210 	add.w	r2, r5, #16
 8031108:	6821      	ldr	r1, [r4, #0]
 803110a:	6011      	str	r1, [r2, #0]
 803110c:	6861      	ldr	r1, [r4, #4]
 803110e:	6051      	str	r1, [r2, #4]
 8031110:	68a1      	ldr	r1, [r4, #8]
 8031112:	6091      	str	r1, [r2, #8]
 8031114:	eb05 0208 	add.w	r2, r5, r8
 8031118:	eba7 0708 	sub.w	r7, r7, r8
 803111c:	f047 0701 	orr.w	r7, r7, #1
 8031120:	609a      	str	r2, [r3, #8]
 8031122:	6057      	str	r7, [r2, #4]
 8031124:	686b      	ldr	r3, [r5, #4]
 8031126:	f003 0301 	and.w	r3, r3, #1
 803112a:	ea43 0308 	orr.w	r3, r3, r8
 803112e:	606b      	str	r3, [r5, #4]
 8031130:	4650      	mov	r0, sl
 8031132:	f7ff fa3b 	bl	80305ac <__malloc_unlock>
 8031136:	e78e      	b.n	8031056 <_realloc_r+0xaa>
 8031138:	68a1      	ldr	r1, [r4, #8]
 803113a:	6129      	str	r1, [r5, #16]
 803113c:	68e1      	ldr	r1, [r4, #12]
 803113e:	6169      	str	r1, [r5, #20]
 8031140:	2a24      	cmp	r2, #36	@ 0x24
 8031142:	bf01      	itttt	eq
 8031144:	6922      	ldreq	r2, [r4, #16]
 8031146:	61aa      	streq	r2, [r5, #24]
 8031148:	6961      	ldreq	r1, [r4, #20]
 803114a:	61e9      	streq	r1, [r5, #28]
 803114c:	bf19      	ittee	ne
 803114e:	3410      	addne	r4, #16
 8031150:	f105 0218 	addne.w	r2, r5, #24
 8031154:	f105 0220 	addeq.w	r2, r5, #32
 8031158:	3418      	addeq	r4, #24
 803115a:	e7d5      	b.n	8031108 <_realloc_r+0x15c>
 803115c:	465a      	mov	r2, fp
 803115e:	e7d3      	b.n	8031108 <_realloc_r+0x15c>
 8031160:	4621      	mov	r1, r4
 8031162:	4658      	mov	r0, fp
 8031164:	f7f8 fca2 	bl	8029aac <memmove>
 8031168:	4b43      	ldr	r3, [pc, #268]	@ (8031278 <_realloc_r+0x2cc>)
 803116a:	e7d3      	b.n	8031114 <_realloc_r+0x168>
 803116c:	45b8      	cmp	r8, r7
 803116e:	dc35      	bgt.n	80311dc <_realloc_r+0x230>
 8031170:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8031174:	4628      	mov	r0, r5
 8031176:	60d3      	str	r3, [r2, #12]
 8031178:	609a      	str	r2, [r3, #8]
 803117a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803117e:	68eb      	ldr	r3, [r5, #12]
 8031180:	60d3      	str	r3, [r2, #12]
 8031182:	609a      	str	r2, [r3, #8]
 8031184:	1f32      	subs	r2, r6, #4
 8031186:	2a24      	cmp	r2, #36	@ 0x24
 8031188:	d824      	bhi.n	80311d4 <_realloc_r+0x228>
 803118a:	2a13      	cmp	r2, #19
 803118c:	d908      	bls.n	80311a0 <_realloc_r+0x1f4>
 803118e:	6823      	ldr	r3, [r4, #0]
 8031190:	60ab      	str	r3, [r5, #8]
 8031192:	6863      	ldr	r3, [r4, #4]
 8031194:	60eb      	str	r3, [r5, #12]
 8031196:	2a1b      	cmp	r2, #27
 8031198:	d80a      	bhi.n	80311b0 <_realloc_r+0x204>
 803119a:	3408      	adds	r4, #8
 803119c:	f105 0010 	add.w	r0, r5, #16
 80311a0:	6823      	ldr	r3, [r4, #0]
 80311a2:	6003      	str	r3, [r0, #0]
 80311a4:	6863      	ldr	r3, [r4, #4]
 80311a6:	6043      	str	r3, [r0, #4]
 80311a8:	68a3      	ldr	r3, [r4, #8]
 80311aa:	6083      	str	r3, [r0, #8]
 80311ac:	46a9      	mov	r9, r5
 80311ae:	e75c      	b.n	803106a <_realloc_r+0xbe>
 80311b0:	68a3      	ldr	r3, [r4, #8]
 80311b2:	612b      	str	r3, [r5, #16]
 80311b4:	68e3      	ldr	r3, [r4, #12]
 80311b6:	616b      	str	r3, [r5, #20]
 80311b8:	2a24      	cmp	r2, #36	@ 0x24
 80311ba:	bf01      	itttt	eq
 80311bc:	6923      	ldreq	r3, [r4, #16]
 80311be:	61ab      	streq	r3, [r5, #24]
 80311c0:	6963      	ldreq	r3, [r4, #20]
 80311c2:	61eb      	streq	r3, [r5, #28]
 80311c4:	bf19      	ittee	ne
 80311c6:	3410      	addne	r4, #16
 80311c8:	f105 0018 	addne.w	r0, r5, #24
 80311cc:	f105 0020 	addeq.w	r0, r5, #32
 80311d0:	3418      	addeq	r4, #24
 80311d2:	e7e5      	b.n	80311a0 <_realloc_r+0x1f4>
 80311d4:	4621      	mov	r1, r4
 80311d6:	f7f8 fc69 	bl	8029aac <memmove>
 80311da:	e7e7      	b.n	80311ac <_realloc_r+0x200>
 80311dc:	9b01      	ldr	r3, [sp, #4]
 80311de:	4598      	cmp	r8, r3
 80311e0:	dc31      	bgt.n	8031246 <_realloc_r+0x29a>
 80311e2:	4628      	mov	r0, r5
 80311e4:	68eb      	ldr	r3, [r5, #12]
 80311e6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80311ea:	60d3      	str	r3, [r2, #12]
 80311ec:	609a      	str	r2, [r3, #8]
 80311ee:	1f32      	subs	r2, r6, #4
 80311f0:	2a24      	cmp	r2, #36	@ 0x24
 80311f2:	d824      	bhi.n	803123e <_realloc_r+0x292>
 80311f4:	2a13      	cmp	r2, #19
 80311f6:	d908      	bls.n	803120a <_realloc_r+0x25e>
 80311f8:	6823      	ldr	r3, [r4, #0]
 80311fa:	60ab      	str	r3, [r5, #8]
 80311fc:	6863      	ldr	r3, [r4, #4]
 80311fe:	60eb      	str	r3, [r5, #12]
 8031200:	2a1b      	cmp	r2, #27
 8031202:	d80a      	bhi.n	803121a <_realloc_r+0x26e>
 8031204:	3408      	adds	r4, #8
 8031206:	f105 0010 	add.w	r0, r5, #16
 803120a:	6823      	ldr	r3, [r4, #0]
 803120c:	6003      	str	r3, [r0, #0]
 803120e:	6863      	ldr	r3, [r4, #4]
 8031210:	6043      	str	r3, [r0, #4]
 8031212:	68a3      	ldr	r3, [r4, #8]
 8031214:	6083      	str	r3, [r0, #8]
 8031216:	9f01      	ldr	r7, [sp, #4]
 8031218:	e7c8      	b.n	80311ac <_realloc_r+0x200>
 803121a:	68a3      	ldr	r3, [r4, #8]
 803121c:	612b      	str	r3, [r5, #16]
 803121e:	68e3      	ldr	r3, [r4, #12]
 8031220:	616b      	str	r3, [r5, #20]
 8031222:	2a24      	cmp	r2, #36	@ 0x24
 8031224:	bf01      	itttt	eq
 8031226:	6923      	ldreq	r3, [r4, #16]
 8031228:	61ab      	streq	r3, [r5, #24]
 803122a:	6963      	ldreq	r3, [r4, #20]
 803122c:	61eb      	streq	r3, [r5, #28]
 803122e:	bf19      	ittee	ne
 8031230:	3410      	addne	r4, #16
 8031232:	f105 0018 	addne.w	r0, r5, #24
 8031236:	f105 0020 	addeq.w	r0, r5, #32
 803123a:	3418      	addeq	r4, #24
 803123c:	e7e5      	b.n	803120a <_realloc_r+0x25e>
 803123e:	4621      	mov	r1, r4
 8031240:	f7f8 fc34 	bl	8029aac <memmove>
 8031244:	e7e7      	b.n	8031216 <_realloc_r+0x26a>
 8031246:	4659      	mov	r1, fp
 8031248:	4650      	mov	r0, sl
 803124a:	f7fa fe9f 	bl	802bf8c <_malloc_r>
 803124e:	4683      	mov	fp, r0
 8031250:	b918      	cbnz	r0, 803125a <_realloc_r+0x2ae>
 8031252:	4650      	mov	r0, sl
 8031254:	f7ff f9aa 	bl	80305ac <__malloc_unlock>
 8031258:	e6c7      	b.n	8030fea <_realloc_r+0x3e>
 803125a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803125e:	f023 0301 	bic.w	r3, r3, #1
 8031262:	444b      	add	r3, r9
 8031264:	f1a0 0208 	sub.w	r2, r0, #8
 8031268:	4293      	cmp	r3, r2
 803126a:	d107      	bne.n	803127c <_realloc_r+0x2d0>
 803126c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8031270:	f027 0703 	bic.w	r7, r7, #3
 8031274:	4437      	add	r7, r6
 8031276:	e6f8      	b.n	803106a <_realloc_r+0xbe>
 8031278:	20000384 	.word	0x20000384
 803127c:	1f32      	subs	r2, r6, #4
 803127e:	2a24      	cmp	r2, #36	@ 0x24
 8031280:	d82d      	bhi.n	80312de <_realloc_r+0x332>
 8031282:	2a13      	cmp	r2, #19
 8031284:	d928      	bls.n	80312d8 <_realloc_r+0x32c>
 8031286:	6823      	ldr	r3, [r4, #0]
 8031288:	6003      	str	r3, [r0, #0]
 803128a:	6863      	ldr	r3, [r4, #4]
 803128c:	6043      	str	r3, [r0, #4]
 803128e:	2a1b      	cmp	r2, #27
 8031290:	d80e      	bhi.n	80312b0 <_realloc_r+0x304>
 8031292:	f104 0208 	add.w	r2, r4, #8
 8031296:	f100 0308 	add.w	r3, r0, #8
 803129a:	6811      	ldr	r1, [r2, #0]
 803129c:	6019      	str	r1, [r3, #0]
 803129e:	6851      	ldr	r1, [r2, #4]
 80312a0:	6059      	str	r1, [r3, #4]
 80312a2:	6892      	ldr	r2, [r2, #8]
 80312a4:	609a      	str	r2, [r3, #8]
 80312a6:	4621      	mov	r1, r4
 80312a8:	4650      	mov	r0, sl
 80312aa:	f7fa fd57 	bl	802bd5c <_free_r>
 80312ae:	e73f      	b.n	8031130 <_realloc_r+0x184>
 80312b0:	68a3      	ldr	r3, [r4, #8]
 80312b2:	6083      	str	r3, [r0, #8]
 80312b4:	68e3      	ldr	r3, [r4, #12]
 80312b6:	60c3      	str	r3, [r0, #12]
 80312b8:	2a24      	cmp	r2, #36	@ 0x24
 80312ba:	bf01      	itttt	eq
 80312bc:	6923      	ldreq	r3, [r4, #16]
 80312be:	6103      	streq	r3, [r0, #16]
 80312c0:	6961      	ldreq	r1, [r4, #20]
 80312c2:	6141      	streq	r1, [r0, #20]
 80312c4:	bf19      	ittee	ne
 80312c6:	f104 0210 	addne.w	r2, r4, #16
 80312ca:	f100 0310 	addne.w	r3, r0, #16
 80312ce:	f104 0218 	addeq.w	r2, r4, #24
 80312d2:	f100 0318 	addeq.w	r3, r0, #24
 80312d6:	e7e0      	b.n	803129a <_realloc_r+0x2ee>
 80312d8:	4603      	mov	r3, r0
 80312da:	4622      	mov	r2, r4
 80312dc:	e7dd      	b.n	803129a <_realloc_r+0x2ee>
 80312de:	4621      	mov	r1, r4
 80312e0:	f7f8 fbe4 	bl	8029aac <memmove>
 80312e4:	e7df      	b.n	80312a6 <_realloc_r+0x2fa>
 80312e6:	4637      	mov	r7, r6
 80312e8:	e6bf      	b.n	803106a <_realloc_r+0xbe>
 80312ea:	431f      	orrs	r7, r3
 80312ec:	f8c9 7004 	str.w	r7, [r9, #4]
 80312f0:	6853      	ldr	r3, [r2, #4]
 80312f2:	f043 0301 	orr.w	r3, r3, #1
 80312f6:	6053      	str	r3, [r2, #4]
 80312f8:	e6d3      	b.n	80310a2 <_realloc_r+0xf6>
 80312fa:	bf00      	nop

080312fc <sulp>:
 80312fc:	b570      	push	{r4, r5, r6, lr}
 80312fe:	4604      	mov	r4, r0
 8031300:	460d      	mov	r5, r1
 8031302:	ec45 4b10 	vmov	d0, r4, r5
 8031306:	4616      	mov	r6, r2
 8031308:	f7ff fc7c 	bl	8030c04 <__ulp>
 803130c:	ec51 0b10 	vmov	r0, r1, d0
 8031310:	b17e      	cbz	r6, 8031332 <sulp+0x36>
 8031312:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8031316:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803131a:	2b00      	cmp	r3, #0
 803131c:	dd09      	ble.n	8031332 <sulp+0x36>
 803131e:	051b      	lsls	r3, r3, #20
 8031320:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8031324:	2400      	movs	r4, #0
 8031326:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 803132a:	4622      	mov	r2, r4
 803132c:	462b      	mov	r3, r5
 803132e:	f7df f97b 	bl	8010628 <__aeabi_dmul>
 8031332:	ec41 0b10 	vmov	d0, r0, r1
 8031336:	bd70      	pop	{r4, r5, r6, pc}

08031338 <_strtod_l>:
 8031338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803133c:	b09f      	sub	sp, #124	@ 0x7c
 803133e:	460c      	mov	r4, r1
 8031340:	9217      	str	r2, [sp, #92]	@ 0x5c
 8031342:	2200      	movs	r2, #0
 8031344:	921a      	str	r2, [sp, #104]	@ 0x68
 8031346:	9005      	str	r0, [sp, #20]
 8031348:	f04f 0a00 	mov.w	sl, #0
 803134c:	f04f 0b00 	mov.w	fp, #0
 8031350:	460a      	mov	r2, r1
 8031352:	9219      	str	r2, [sp, #100]	@ 0x64
 8031354:	7811      	ldrb	r1, [r2, #0]
 8031356:	292b      	cmp	r1, #43	@ 0x2b
 8031358:	d04a      	beq.n	80313f0 <_strtod_l+0xb8>
 803135a:	d838      	bhi.n	80313ce <_strtod_l+0x96>
 803135c:	290d      	cmp	r1, #13
 803135e:	d832      	bhi.n	80313c6 <_strtod_l+0x8e>
 8031360:	2908      	cmp	r1, #8
 8031362:	d832      	bhi.n	80313ca <_strtod_l+0x92>
 8031364:	2900      	cmp	r1, #0
 8031366:	d03b      	beq.n	80313e0 <_strtod_l+0xa8>
 8031368:	2200      	movs	r2, #0
 803136a:	920b      	str	r2, [sp, #44]	@ 0x2c
 803136c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 803136e:	782a      	ldrb	r2, [r5, #0]
 8031370:	2a30      	cmp	r2, #48	@ 0x30
 8031372:	f040 80b3 	bne.w	80314dc <_strtod_l+0x1a4>
 8031376:	786a      	ldrb	r2, [r5, #1]
 8031378:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803137c:	2a58      	cmp	r2, #88	@ 0x58
 803137e:	d16e      	bne.n	803145e <_strtod_l+0x126>
 8031380:	9302      	str	r3, [sp, #8]
 8031382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8031384:	9301      	str	r3, [sp, #4]
 8031386:	ab1a      	add	r3, sp, #104	@ 0x68
 8031388:	9300      	str	r3, [sp, #0]
 803138a:	4a8e      	ldr	r2, [pc, #568]	@ (80315c4 <_strtod_l+0x28c>)
 803138c:	9805      	ldr	r0, [sp, #20]
 803138e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8031390:	a919      	add	r1, sp, #100	@ 0x64
 8031392:	f001 fa51 	bl	8032838 <__gethex>
 8031396:	f010 060f 	ands.w	r6, r0, #15
 803139a:	4604      	mov	r4, r0
 803139c:	d005      	beq.n	80313aa <_strtod_l+0x72>
 803139e:	2e06      	cmp	r6, #6
 80313a0:	d128      	bne.n	80313f4 <_strtod_l+0xbc>
 80313a2:	3501      	adds	r5, #1
 80313a4:	2300      	movs	r3, #0
 80313a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80313a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80313aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80313ac:	2b00      	cmp	r3, #0
 80313ae:	f040 858e 	bne.w	8031ece <_strtod_l+0xb96>
 80313b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80313b4:	b1cb      	cbz	r3, 80313ea <_strtod_l+0xb2>
 80313b6:	4652      	mov	r2, sl
 80313b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80313bc:	ec43 2b10 	vmov	d0, r2, r3
 80313c0:	b01f      	add	sp, #124	@ 0x7c
 80313c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80313c6:	2920      	cmp	r1, #32
 80313c8:	d1ce      	bne.n	8031368 <_strtod_l+0x30>
 80313ca:	3201      	adds	r2, #1
 80313cc:	e7c1      	b.n	8031352 <_strtod_l+0x1a>
 80313ce:	292d      	cmp	r1, #45	@ 0x2d
 80313d0:	d1ca      	bne.n	8031368 <_strtod_l+0x30>
 80313d2:	2101      	movs	r1, #1
 80313d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80313d6:	1c51      	adds	r1, r2, #1
 80313d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80313da:	7852      	ldrb	r2, [r2, #1]
 80313dc:	2a00      	cmp	r2, #0
 80313de:	d1c5      	bne.n	803136c <_strtod_l+0x34>
 80313e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80313e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80313e4:	2b00      	cmp	r3, #0
 80313e6:	f040 8570 	bne.w	8031eca <_strtod_l+0xb92>
 80313ea:	4652      	mov	r2, sl
 80313ec:	465b      	mov	r3, fp
 80313ee:	e7e5      	b.n	80313bc <_strtod_l+0x84>
 80313f0:	2100      	movs	r1, #0
 80313f2:	e7ef      	b.n	80313d4 <_strtod_l+0x9c>
 80313f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80313f6:	b13a      	cbz	r2, 8031408 <_strtod_l+0xd0>
 80313f8:	2135      	movs	r1, #53	@ 0x35
 80313fa:	a81c      	add	r0, sp, #112	@ 0x70
 80313fc:	f7ff fcfc 	bl	8030df8 <__copybits>
 8031400:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8031402:	9805      	ldr	r0, [sp, #20]
 8031404:	f7ff f8fd 	bl	8030602 <_Bfree>
 8031408:	3e01      	subs	r6, #1
 803140a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 803140c:	2e04      	cmp	r6, #4
 803140e:	d806      	bhi.n	803141e <_strtod_l+0xe6>
 8031410:	e8df f006 	tbb	[pc, r6]
 8031414:	201d0314 	.word	0x201d0314
 8031418:	14          	.byte	0x14
 8031419:	00          	.byte	0x00
 803141a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 803141e:	05e1      	lsls	r1, r4, #23
 8031420:	bf48      	it	mi
 8031422:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8031426:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803142a:	0d1b      	lsrs	r3, r3, #20
 803142c:	051b      	lsls	r3, r3, #20
 803142e:	2b00      	cmp	r3, #0
 8031430:	d1bb      	bne.n	80313aa <_strtod_l+0x72>
 8031432:	f7f9 fd59 	bl	802aee8 <__errno>
 8031436:	2322      	movs	r3, #34	@ 0x22
 8031438:	6003      	str	r3, [r0, #0]
 803143a:	e7b6      	b.n	80313aa <_strtod_l+0x72>
 803143c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8031440:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8031444:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8031448:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 803144c:	e7e7      	b.n	803141e <_strtod_l+0xe6>
 803144e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80315cc <_strtod_l+0x294>
 8031452:	e7e4      	b.n	803141e <_strtod_l+0xe6>
 8031454:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8031458:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 803145c:	e7df      	b.n	803141e <_strtod_l+0xe6>
 803145e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8031460:	1c5a      	adds	r2, r3, #1
 8031462:	9219      	str	r2, [sp, #100]	@ 0x64
 8031464:	785b      	ldrb	r3, [r3, #1]
 8031466:	2b30      	cmp	r3, #48	@ 0x30
 8031468:	d0f9      	beq.n	803145e <_strtod_l+0x126>
 803146a:	2b00      	cmp	r3, #0
 803146c:	d09d      	beq.n	80313aa <_strtod_l+0x72>
 803146e:	2301      	movs	r3, #1
 8031470:	9309      	str	r3, [sp, #36]	@ 0x24
 8031472:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8031474:	930c      	str	r3, [sp, #48]	@ 0x30
 8031476:	2300      	movs	r3, #0
 8031478:	9308      	str	r3, [sp, #32]
 803147a:	930a      	str	r3, [sp, #40]	@ 0x28
 803147c:	461f      	mov	r7, r3
 803147e:	220a      	movs	r2, #10
 8031480:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8031482:	7805      	ldrb	r5, [r0, #0]
 8031484:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8031488:	b2d9      	uxtb	r1, r3
 803148a:	2909      	cmp	r1, #9
 803148c:	d928      	bls.n	80314e0 <_strtod_l+0x1a8>
 803148e:	494e      	ldr	r1, [pc, #312]	@ (80315c8 <_strtod_l+0x290>)
 8031490:	2201      	movs	r2, #1
 8031492:	f7f8 fb5a 	bl	8029b4a <strncmp>
 8031496:	2800      	cmp	r0, #0
 8031498:	d032      	beq.n	8031500 <_strtod_l+0x1c8>
 803149a:	2000      	movs	r0, #0
 803149c:	462a      	mov	r2, r5
 803149e:	4681      	mov	r9, r0
 80314a0:	463d      	mov	r5, r7
 80314a2:	4603      	mov	r3, r0
 80314a4:	2a65      	cmp	r2, #101	@ 0x65
 80314a6:	d001      	beq.n	80314ac <_strtod_l+0x174>
 80314a8:	2a45      	cmp	r2, #69	@ 0x45
 80314aa:	d114      	bne.n	80314d6 <_strtod_l+0x19e>
 80314ac:	b91d      	cbnz	r5, 80314b6 <_strtod_l+0x17e>
 80314ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80314b0:	4302      	orrs	r2, r0
 80314b2:	d095      	beq.n	80313e0 <_strtod_l+0xa8>
 80314b4:	2500      	movs	r5, #0
 80314b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80314b8:	1c62      	adds	r2, r4, #1
 80314ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80314bc:	7862      	ldrb	r2, [r4, #1]
 80314be:	2a2b      	cmp	r2, #43	@ 0x2b
 80314c0:	d077      	beq.n	80315b2 <_strtod_l+0x27a>
 80314c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80314c4:	d07b      	beq.n	80315be <_strtod_l+0x286>
 80314c6:	f04f 0c00 	mov.w	ip, #0
 80314ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80314ce:	2909      	cmp	r1, #9
 80314d0:	f240 8082 	bls.w	80315d8 <_strtod_l+0x2a0>
 80314d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80314d6:	f04f 0800 	mov.w	r8, #0
 80314da:	e0a2      	b.n	8031622 <_strtod_l+0x2ea>
 80314dc:	2300      	movs	r3, #0
 80314de:	e7c7      	b.n	8031470 <_strtod_l+0x138>
 80314e0:	2f08      	cmp	r7, #8
 80314e2:	bfd5      	itete	le
 80314e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80314e6:	9908      	ldrgt	r1, [sp, #32]
 80314e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80314ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80314f0:	f100 0001 	add.w	r0, r0, #1
 80314f4:	bfd4      	ite	le
 80314f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80314f8:	9308      	strgt	r3, [sp, #32]
 80314fa:	3701      	adds	r7, #1
 80314fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80314fe:	e7bf      	b.n	8031480 <_strtod_l+0x148>
 8031500:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8031502:	1c5a      	adds	r2, r3, #1
 8031504:	9219      	str	r2, [sp, #100]	@ 0x64
 8031506:	785a      	ldrb	r2, [r3, #1]
 8031508:	b37f      	cbz	r7, 803156a <_strtod_l+0x232>
 803150a:	4681      	mov	r9, r0
 803150c:	463d      	mov	r5, r7
 803150e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8031512:	2b09      	cmp	r3, #9
 8031514:	d912      	bls.n	803153c <_strtod_l+0x204>
 8031516:	2301      	movs	r3, #1
 8031518:	e7c4      	b.n	80314a4 <_strtod_l+0x16c>
 803151a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803151c:	1c5a      	adds	r2, r3, #1
 803151e:	9219      	str	r2, [sp, #100]	@ 0x64
 8031520:	785a      	ldrb	r2, [r3, #1]
 8031522:	3001      	adds	r0, #1
 8031524:	2a30      	cmp	r2, #48	@ 0x30
 8031526:	d0f8      	beq.n	803151a <_strtod_l+0x1e2>
 8031528:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 803152c:	2b08      	cmp	r3, #8
 803152e:	f200 84d3 	bhi.w	8031ed8 <_strtod_l+0xba0>
 8031532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8031534:	930c      	str	r3, [sp, #48]	@ 0x30
 8031536:	4681      	mov	r9, r0
 8031538:	2000      	movs	r0, #0
 803153a:	4605      	mov	r5, r0
 803153c:	3a30      	subs	r2, #48	@ 0x30
 803153e:	f100 0301 	add.w	r3, r0, #1
 8031542:	d02a      	beq.n	803159a <_strtod_l+0x262>
 8031544:	4499      	add	r9, r3
 8031546:	eb00 0c05 	add.w	ip, r0, r5
 803154a:	462b      	mov	r3, r5
 803154c:	210a      	movs	r1, #10
 803154e:	4563      	cmp	r3, ip
 8031550:	d10d      	bne.n	803156e <_strtod_l+0x236>
 8031552:	1c69      	adds	r1, r5, #1
 8031554:	4401      	add	r1, r0
 8031556:	4428      	add	r0, r5
 8031558:	2808      	cmp	r0, #8
 803155a:	dc16      	bgt.n	803158a <_strtod_l+0x252>
 803155c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803155e:	230a      	movs	r3, #10
 8031560:	fb03 2300 	mla	r3, r3, r0, r2
 8031564:	930a      	str	r3, [sp, #40]	@ 0x28
 8031566:	2300      	movs	r3, #0
 8031568:	e018      	b.n	803159c <_strtod_l+0x264>
 803156a:	4638      	mov	r0, r7
 803156c:	e7da      	b.n	8031524 <_strtod_l+0x1ec>
 803156e:	2b08      	cmp	r3, #8
 8031570:	f103 0301 	add.w	r3, r3, #1
 8031574:	dc03      	bgt.n	803157e <_strtod_l+0x246>
 8031576:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8031578:	434e      	muls	r6, r1
 803157a:	960a      	str	r6, [sp, #40]	@ 0x28
 803157c:	e7e7      	b.n	803154e <_strtod_l+0x216>
 803157e:	2b10      	cmp	r3, #16
 8031580:	bfde      	ittt	le
 8031582:	9e08      	ldrle	r6, [sp, #32]
 8031584:	434e      	mulle	r6, r1
 8031586:	9608      	strle	r6, [sp, #32]
 8031588:	e7e1      	b.n	803154e <_strtod_l+0x216>
 803158a:	280f      	cmp	r0, #15
 803158c:	dceb      	bgt.n	8031566 <_strtod_l+0x22e>
 803158e:	9808      	ldr	r0, [sp, #32]
 8031590:	230a      	movs	r3, #10
 8031592:	fb03 2300 	mla	r3, r3, r0, r2
 8031596:	9308      	str	r3, [sp, #32]
 8031598:	e7e5      	b.n	8031566 <_strtod_l+0x22e>
 803159a:	4629      	mov	r1, r5
 803159c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803159e:	1c50      	adds	r0, r2, #1
 80315a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80315a2:	7852      	ldrb	r2, [r2, #1]
 80315a4:	4618      	mov	r0, r3
 80315a6:	460d      	mov	r5, r1
 80315a8:	e7b1      	b.n	803150e <_strtod_l+0x1d6>
 80315aa:	f04f 0900 	mov.w	r9, #0
 80315ae:	2301      	movs	r3, #1
 80315b0:	e77d      	b.n	80314ae <_strtod_l+0x176>
 80315b2:	f04f 0c00 	mov.w	ip, #0
 80315b6:	1ca2      	adds	r2, r4, #2
 80315b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80315ba:	78a2      	ldrb	r2, [r4, #2]
 80315bc:	e785      	b.n	80314ca <_strtod_l+0x192>
 80315be:	f04f 0c01 	mov.w	ip, #1
 80315c2:	e7f8      	b.n	80315b6 <_strtod_l+0x27e>
 80315c4:	080388bc 	.word	0x080388bc
 80315c8:	08038322 	.word	0x08038322
 80315cc:	7ff00000 	.word	0x7ff00000
 80315d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80315d2:	1c51      	adds	r1, r2, #1
 80315d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80315d6:	7852      	ldrb	r2, [r2, #1]
 80315d8:	2a30      	cmp	r2, #48	@ 0x30
 80315da:	d0f9      	beq.n	80315d0 <_strtod_l+0x298>
 80315dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80315e0:	2908      	cmp	r1, #8
 80315e2:	f63f af78 	bhi.w	80314d6 <_strtod_l+0x19e>
 80315e6:	3a30      	subs	r2, #48	@ 0x30
 80315e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80315ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80315ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80315ee:	f04f 080a 	mov.w	r8, #10
 80315f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80315f4:	1c56      	adds	r6, r2, #1
 80315f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80315f8:	7852      	ldrb	r2, [r2, #1]
 80315fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80315fe:	f1be 0f09 	cmp.w	lr, #9
 8031602:	d939      	bls.n	8031678 <_strtod_l+0x340>
 8031604:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8031606:	1a76      	subs	r6, r6, r1
 8031608:	2e08      	cmp	r6, #8
 803160a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 803160e:	dc03      	bgt.n	8031618 <_strtod_l+0x2e0>
 8031610:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8031612:	4588      	cmp	r8, r1
 8031614:	bfa8      	it	ge
 8031616:	4688      	movge	r8, r1
 8031618:	f1bc 0f00 	cmp.w	ip, #0
 803161c:	d001      	beq.n	8031622 <_strtod_l+0x2ea>
 803161e:	f1c8 0800 	rsb	r8, r8, #0
 8031622:	2d00      	cmp	r5, #0
 8031624:	d14e      	bne.n	80316c4 <_strtod_l+0x38c>
 8031626:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8031628:	4308      	orrs	r0, r1
 803162a:	f47f aebe 	bne.w	80313aa <_strtod_l+0x72>
 803162e:	2b00      	cmp	r3, #0
 8031630:	f47f aed6 	bne.w	80313e0 <_strtod_l+0xa8>
 8031634:	2a69      	cmp	r2, #105	@ 0x69
 8031636:	d028      	beq.n	803168a <_strtod_l+0x352>
 8031638:	dc25      	bgt.n	8031686 <_strtod_l+0x34e>
 803163a:	2a49      	cmp	r2, #73	@ 0x49
 803163c:	d025      	beq.n	803168a <_strtod_l+0x352>
 803163e:	2a4e      	cmp	r2, #78	@ 0x4e
 8031640:	f47f aece 	bne.w	80313e0 <_strtod_l+0xa8>
 8031644:	499b      	ldr	r1, [pc, #620]	@ (80318b4 <_strtod_l+0x57c>)
 8031646:	a819      	add	r0, sp, #100	@ 0x64
 8031648:	f001 fb18 	bl	8032c7c <__match>
 803164c:	2800      	cmp	r0, #0
 803164e:	f43f aec7 	beq.w	80313e0 <_strtod_l+0xa8>
 8031652:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8031654:	781b      	ldrb	r3, [r3, #0]
 8031656:	2b28      	cmp	r3, #40	@ 0x28
 8031658:	d12e      	bne.n	80316b8 <_strtod_l+0x380>
 803165a:	4997      	ldr	r1, [pc, #604]	@ (80318b8 <_strtod_l+0x580>)
 803165c:	aa1c      	add	r2, sp, #112	@ 0x70
 803165e:	a819      	add	r0, sp, #100	@ 0x64
 8031660:	f001 fb20 	bl	8032ca4 <__hexnan>
 8031664:	2805      	cmp	r0, #5
 8031666:	d127      	bne.n	80316b8 <_strtod_l+0x380>
 8031668:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 803166a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 803166e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8031672:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8031676:	e698      	b.n	80313aa <_strtod_l+0x72>
 8031678:	990e      	ldr	r1, [sp, #56]	@ 0x38
 803167a:	fb08 2101 	mla	r1, r8, r1, r2
 803167e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8031682:	920e      	str	r2, [sp, #56]	@ 0x38
 8031684:	e7b5      	b.n	80315f2 <_strtod_l+0x2ba>
 8031686:	2a6e      	cmp	r2, #110	@ 0x6e
 8031688:	e7da      	b.n	8031640 <_strtod_l+0x308>
 803168a:	498c      	ldr	r1, [pc, #560]	@ (80318bc <_strtod_l+0x584>)
 803168c:	a819      	add	r0, sp, #100	@ 0x64
 803168e:	f001 faf5 	bl	8032c7c <__match>
 8031692:	2800      	cmp	r0, #0
 8031694:	f43f aea4 	beq.w	80313e0 <_strtod_l+0xa8>
 8031698:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803169a:	4989      	ldr	r1, [pc, #548]	@ (80318c0 <_strtod_l+0x588>)
 803169c:	3b01      	subs	r3, #1
 803169e:	a819      	add	r0, sp, #100	@ 0x64
 80316a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80316a2:	f001 faeb 	bl	8032c7c <__match>
 80316a6:	b910      	cbnz	r0, 80316ae <_strtod_l+0x376>
 80316a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80316aa:	3301      	adds	r3, #1
 80316ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80316ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80318d0 <_strtod_l+0x598>
 80316b2:	f04f 0a00 	mov.w	sl, #0
 80316b6:	e678      	b.n	80313aa <_strtod_l+0x72>
 80316b8:	4882      	ldr	r0, [pc, #520]	@ (80318c4 <_strtod_l+0x58c>)
 80316ba:	f001 f805 	bl	80326c8 <nan>
 80316be:	ec5b ab10 	vmov	sl, fp, d0
 80316c2:	e672      	b.n	80313aa <_strtod_l+0x72>
 80316c4:	eba8 0309 	sub.w	r3, r8, r9
 80316c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80316ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80316cc:	2f00      	cmp	r7, #0
 80316ce:	bf08      	it	eq
 80316d0:	462f      	moveq	r7, r5
 80316d2:	2d10      	cmp	r5, #16
 80316d4:	462c      	mov	r4, r5
 80316d6:	bfa8      	it	ge
 80316d8:	2410      	movge	r4, #16
 80316da:	f7de ff2b 	bl	8010534 <__aeabi_ui2d>
 80316de:	2d09      	cmp	r5, #9
 80316e0:	4682      	mov	sl, r0
 80316e2:	468b      	mov	fp, r1
 80316e4:	dc13      	bgt.n	803170e <_strtod_l+0x3d6>
 80316e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80316e8:	2b00      	cmp	r3, #0
 80316ea:	f43f ae5e 	beq.w	80313aa <_strtod_l+0x72>
 80316ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80316f0:	dd78      	ble.n	80317e4 <_strtod_l+0x4ac>
 80316f2:	2b16      	cmp	r3, #22
 80316f4:	dc5f      	bgt.n	80317b6 <_strtod_l+0x47e>
 80316f6:	4974      	ldr	r1, [pc, #464]	@ (80318c8 <_strtod_l+0x590>)
 80316f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80316fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8031700:	4652      	mov	r2, sl
 8031702:	465b      	mov	r3, fp
 8031704:	f7de ff90 	bl	8010628 <__aeabi_dmul>
 8031708:	4682      	mov	sl, r0
 803170a:	468b      	mov	fp, r1
 803170c:	e64d      	b.n	80313aa <_strtod_l+0x72>
 803170e:	4b6e      	ldr	r3, [pc, #440]	@ (80318c8 <_strtod_l+0x590>)
 8031710:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8031714:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8031718:	f7de ff86 	bl	8010628 <__aeabi_dmul>
 803171c:	4682      	mov	sl, r0
 803171e:	9808      	ldr	r0, [sp, #32]
 8031720:	468b      	mov	fp, r1
 8031722:	f7de ff07 	bl	8010534 <__aeabi_ui2d>
 8031726:	4602      	mov	r2, r0
 8031728:	460b      	mov	r3, r1
 803172a:	4650      	mov	r0, sl
 803172c:	4659      	mov	r1, fp
 803172e:	f7de fdc5 	bl	80102bc <__adddf3>
 8031732:	2d0f      	cmp	r5, #15
 8031734:	4682      	mov	sl, r0
 8031736:	468b      	mov	fp, r1
 8031738:	ddd5      	ble.n	80316e6 <_strtod_l+0x3ae>
 803173a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803173c:	1b2c      	subs	r4, r5, r4
 803173e:	441c      	add	r4, r3
 8031740:	2c00      	cmp	r4, #0
 8031742:	f340 8096 	ble.w	8031872 <_strtod_l+0x53a>
 8031746:	f014 030f 	ands.w	r3, r4, #15
 803174a:	d00a      	beq.n	8031762 <_strtod_l+0x42a>
 803174c:	495e      	ldr	r1, [pc, #376]	@ (80318c8 <_strtod_l+0x590>)
 803174e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8031752:	4652      	mov	r2, sl
 8031754:	465b      	mov	r3, fp
 8031756:	e9d1 0100 	ldrd	r0, r1, [r1]
 803175a:	f7de ff65 	bl	8010628 <__aeabi_dmul>
 803175e:	4682      	mov	sl, r0
 8031760:	468b      	mov	fp, r1
 8031762:	f034 040f 	bics.w	r4, r4, #15
 8031766:	d073      	beq.n	8031850 <_strtod_l+0x518>
 8031768:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 803176c:	dd48      	ble.n	8031800 <_strtod_l+0x4c8>
 803176e:	2400      	movs	r4, #0
 8031770:	46a0      	mov	r8, r4
 8031772:	940a      	str	r4, [sp, #40]	@ 0x28
 8031774:	46a1      	mov	r9, r4
 8031776:	9a05      	ldr	r2, [sp, #20]
 8031778:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80318d0 <_strtod_l+0x598>
 803177c:	2322      	movs	r3, #34	@ 0x22
 803177e:	6013      	str	r3, [r2, #0]
 8031780:	f04f 0a00 	mov.w	sl, #0
 8031784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031786:	2b00      	cmp	r3, #0
 8031788:	f43f ae0f 	beq.w	80313aa <_strtod_l+0x72>
 803178c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803178e:	9805      	ldr	r0, [sp, #20]
 8031790:	f7fe ff37 	bl	8030602 <_Bfree>
 8031794:	9805      	ldr	r0, [sp, #20]
 8031796:	4649      	mov	r1, r9
 8031798:	f7fe ff33 	bl	8030602 <_Bfree>
 803179c:	9805      	ldr	r0, [sp, #20]
 803179e:	4641      	mov	r1, r8
 80317a0:	f7fe ff2f 	bl	8030602 <_Bfree>
 80317a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80317a6:	9805      	ldr	r0, [sp, #20]
 80317a8:	f7fe ff2b 	bl	8030602 <_Bfree>
 80317ac:	9805      	ldr	r0, [sp, #20]
 80317ae:	4621      	mov	r1, r4
 80317b0:	f7fe ff27 	bl	8030602 <_Bfree>
 80317b4:	e5f9      	b.n	80313aa <_strtod_l+0x72>
 80317b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80317b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80317bc:	4293      	cmp	r3, r2
 80317be:	dbbc      	blt.n	803173a <_strtod_l+0x402>
 80317c0:	4c41      	ldr	r4, [pc, #260]	@ (80318c8 <_strtod_l+0x590>)
 80317c2:	f1c5 050f 	rsb	r5, r5, #15
 80317c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80317ca:	4652      	mov	r2, sl
 80317cc:	465b      	mov	r3, fp
 80317ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80317d2:	f7de ff29 	bl	8010628 <__aeabi_dmul>
 80317d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80317d8:	1b5d      	subs	r5, r3, r5
 80317da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80317de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80317e2:	e78f      	b.n	8031704 <_strtod_l+0x3cc>
 80317e4:	3316      	adds	r3, #22
 80317e6:	dba8      	blt.n	803173a <_strtod_l+0x402>
 80317e8:	4b37      	ldr	r3, [pc, #220]	@ (80318c8 <_strtod_l+0x590>)
 80317ea:	eba9 0808 	sub.w	r8, r9, r8
 80317ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80317f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80317f6:	4650      	mov	r0, sl
 80317f8:	4659      	mov	r1, fp
 80317fa:	f7df f83f 	bl	801087c <__aeabi_ddiv>
 80317fe:	e783      	b.n	8031708 <_strtod_l+0x3d0>
 8031800:	4b32      	ldr	r3, [pc, #200]	@ (80318cc <_strtod_l+0x594>)
 8031802:	9308      	str	r3, [sp, #32]
 8031804:	2300      	movs	r3, #0
 8031806:	1124      	asrs	r4, r4, #4
 8031808:	4650      	mov	r0, sl
 803180a:	4659      	mov	r1, fp
 803180c:	461e      	mov	r6, r3
 803180e:	2c01      	cmp	r4, #1
 8031810:	dc21      	bgt.n	8031856 <_strtod_l+0x51e>
 8031812:	b10b      	cbz	r3, 8031818 <_strtod_l+0x4e0>
 8031814:	4682      	mov	sl, r0
 8031816:	468b      	mov	fp, r1
 8031818:	492c      	ldr	r1, [pc, #176]	@ (80318cc <_strtod_l+0x594>)
 803181a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 803181e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8031822:	4652      	mov	r2, sl
 8031824:	465b      	mov	r3, fp
 8031826:	e9d1 0100 	ldrd	r0, r1, [r1]
 803182a:	f7de fefd 	bl	8010628 <__aeabi_dmul>
 803182e:	4b28      	ldr	r3, [pc, #160]	@ (80318d0 <_strtod_l+0x598>)
 8031830:	460a      	mov	r2, r1
 8031832:	400b      	ands	r3, r1
 8031834:	4927      	ldr	r1, [pc, #156]	@ (80318d4 <_strtod_l+0x59c>)
 8031836:	428b      	cmp	r3, r1
 8031838:	4682      	mov	sl, r0
 803183a:	d898      	bhi.n	803176e <_strtod_l+0x436>
 803183c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8031840:	428b      	cmp	r3, r1
 8031842:	bf86      	itte	hi
 8031844:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80318d8 <_strtod_l+0x5a0>
 8031848:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 803184c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8031850:	2300      	movs	r3, #0
 8031852:	9308      	str	r3, [sp, #32]
 8031854:	e07a      	b.n	803194c <_strtod_l+0x614>
 8031856:	07e2      	lsls	r2, r4, #31
 8031858:	d505      	bpl.n	8031866 <_strtod_l+0x52e>
 803185a:	9b08      	ldr	r3, [sp, #32]
 803185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031860:	f7de fee2 	bl	8010628 <__aeabi_dmul>
 8031864:	2301      	movs	r3, #1
 8031866:	9a08      	ldr	r2, [sp, #32]
 8031868:	3208      	adds	r2, #8
 803186a:	3601      	adds	r6, #1
 803186c:	1064      	asrs	r4, r4, #1
 803186e:	9208      	str	r2, [sp, #32]
 8031870:	e7cd      	b.n	803180e <_strtod_l+0x4d6>
 8031872:	d0ed      	beq.n	8031850 <_strtod_l+0x518>
 8031874:	4264      	negs	r4, r4
 8031876:	f014 020f 	ands.w	r2, r4, #15
 803187a:	d00a      	beq.n	8031892 <_strtod_l+0x55a>
 803187c:	4b12      	ldr	r3, [pc, #72]	@ (80318c8 <_strtod_l+0x590>)
 803187e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8031882:	4650      	mov	r0, sl
 8031884:	4659      	mov	r1, fp
 8031886:	e9d3 2300 	ldrd	r2, r3, [r3]
 803188a:	f7de fff7 	bl	801087c <__aeabi_ddiv>
 803188e:	4682      	mov	sl, r0
 8031890:	468b      	mov	fp, r1
 8031892:	1124      	asrs	r4, r4, #4
 8031894:	d0dc      	beq.n	8031850 <_strtod_l+0x518>
 8031896:	2c1f      	cmp	r4, #31
 8031898:	dd20      	ble.n	80318dc <_strtod_l+0x5a4>
 803189a:	2400      	movs	r4, #0
 803189c:	46a0      	mov	r8, r4
 803189e:	940a      	str	r4, [sp, #40]	@ 0x28
 80318a0:	46a1      	mov	r9, r4
 80318a2:	9a05      	ldr	r2, [sp, #20]
 80318a4:	2322      	movs	r3, #34	@ 0x22
 80318a6:	f04f 0a00 	mov.w	sl, #0
 80318aa:	f04f 0b00 	mov.w	fp, #0
 80318ae:	6013      	str	r3, [r2, #0]
 80318b0:	e768      	b.n	8031784 <_strtod_l+0x44c>
 80318b2:	bf00      	nop
 80318b4:	08038325 	.word	0x08038325
 80318b8:	080388a8 	.word	0x080388a8
 80318bc:	08038194 	.word	0x08038194
 80318c0:	08038650 	.word	0x08038650
 80318c4:	0803818e 	.word	0x0803818e
 80318c8:	080387e0 	.word	0x080387e0
 80318cc:	080387b8 	.word	0x080387b8
 80318d0:	7ff00000 	.word	0x7ff00000
 80318d4:	7ca00000 	.word	0x7ca00000
 80318d8:	7fefffff 	.word	0x7fefffff
 80318dc:	f014 0310 	ands.w	r3, r4, #16
 80318e0:	bf18      	it	ne
 80318e2:	236a      	movne	r3, #106	@ 0x6a
 80318e4:	4ea9      	ldr	r6, [pc, #676]	@ (8031b8c <_strtod_l+0x854>)
 80318e6:	9308      	str	r3, [sp, #32]
 80318e8:	4650      	mov	r0, sl
 80318ea:	4659      	mov	r1, fp
 80318ec:	2300      	movs	r3, #0
 80318ee:	07e2      	lsls	r2, r4, #31
 80318f0:	d504      	bpl.n	80318fc <_strtod_l+0x5c4>
 80318f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80318f6:	f7de fe97 	bl	8010628 <__aeabi_dmul>
 80318fa:	2301      	movs	r3, #1
 80318fc:	1064      	asrs	r4, r4, #1
 80318fe:	f106 0608 	add.w	r6, r6, #8
 8031902:	d1f4      	bne.n	80318ee <_strtod_l+0x5b6>
 8031904:	b10b      	cbz	r3, 803190a <_strtod_l+0x5d2>
 8031906:	4682      	mov	sl, r0
 8031908:	468b      	mov	fp, r1
 803190a:	9b08      	ldr	r3, [sp, #32]
 803190c:	b1b3      	cbz	r3, 803193c <_strtod_l+0x604>
 803190e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8031912:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8031916:	2b00      	cmp	r3, #0
 8031918:	4659      	mov	r1, fp
 803191a:	dd0f      	ble.n	803193c <_strtod_l+0x604>
 803191c:	2b1f      	cmp	r3, #31
 803191e:	dd55      	ble.n	80319cc <_strtod_l+0x694>
 8031920:	2b34      	cmp	r3, #52	@ 0x34
 8031922:	bfde      	ittt	le
 8031924:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8031928:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 803192c:	4093      	lslle	r3, r2
 803192e:	f04f 0a00 	mov.w	sl, #0
 8031932:	bfcc      	ite	gt
 8031934:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8031938:	ea03 0b01 	andle.w	fp, r3, r1
 803193c:	2200      	movs	r2, #0
 803193e:	2300      	movs	r3, #0
 8031940:	4650      	mov	r0, sl
 8031942:	4659      	mov	r1, fp
 8031944:	f7df f8d8 	bl	8010af8 <__aeabi_dcmpeq>
 8031948:	2800      	cmp	r0, #0
 803194a:	d1a6      	bne.n	803189a <_strtod_l+0x562>
 803194c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803194e:	9300      	str	r3, [sp, #0]
 8031950:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8031952:	9805      	ldr	r0, [sp, #20]
 8031954:	462b      	mov	r3, r5
 8031956:	463a      	mov	r2, r7
 8031958:	f7fe fea2 	bl	80306a0 <__s2b>
 803195c:	900a      	str	r0, [sp, #40]	@ 0x28
 803195e:	2800      	cmp	r0, #0
 8031960:	f43f af05 	beq.w	803176e <_strtod_l+0x436>
 8031964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8031966:	2a00      	cmp	r2, #0
 8031968:	eba9 0308 	sub.w	r3, r9, r8
 803196c:	bfa8      	it	ge
 803196e:	2300      	movge	r3, #0
 8031970:	9312      	str	r3, [sp, #72]	@ 0x48
 8031972:	2400      	movs	r4, #0
 8031974:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8031978:	9316      	str	r3, [sp, #88]	@ 0x58
 803197a:	46a0      	mov	r8, r4
 803197c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803197e:	9805      	ldr	r0, [sp, #20]
 8031980:	6859      	ldr	r1, [r3, #4]
 8031982:	f7fe fe19 	bl	80305b8 <_Balloc>
 8031986:	4681      	mov	r9, r0
 8031988:	2800      	cmp	r0, #0
 803198a:	f43f aef4 	beq.w	8031776 <_strtod_l+0x43e>
 803198e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031990:	691a      	ldr	r2, [r3, #16]
 8031992:	3202      	adds	r2, #2
 8031994:	f103 010c 	add.w	r1, r3, #12
 8031998:	0092      	lsls	r2, r2, #2
 803199a:	300c      	adds	r0, #12
 803199c:	f7f9 fadc 	bl	802af58 <memcpy>
 80319a0:	ec4b ab10 	vmov	d0, sl, fp
 80319a4:	9805      	ldr	r0, [sp, #20]
 80319a6:	aa1c      	add	r2, sp, #112	@ 0x70
 80319a8:	a91b      	add	r1, sp, #108	@ 0x6c
 80319aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80319ae:	f7ff f999 	bl	8030ce4 <__d2b>
 80319b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80319b4:	2800      	cmp	r0, #0
 80319b6:	f43f aede 	beq.w	8031776 <_strtod_l+0x43e>
 80319ba:	9805      	ldr	r0, [sp, #20]
 80319bc:	2101      	movs	r1, #1
 80319be:	f7fe ff05 	bl	80307cc <__i2b>
 80319c2:	4680      	mov	r8, r0
 80319c4:	b948      	cbnz	r0, 80319da <_strtod_l+0x6a2>
 80319c6:	f04f 0800 	mov.w	r8, #0
 80319ca:	e6d4      	b.n	8031776 <_strtod_l+0x43e>
 80319cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80319d0:	fa02 f303 	lsl.w	r3, r2, r3
 80319d4:	ea03 0a0a 	and.w	sl, r3, sl
 80319d8:	e7b0      	b.n	803193c <_strtod_l+0x604>
 80319da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80319dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80319de:	2d00      	cmp	r5, #0
 80319e0:	bfab      	itete	ge
 80319e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80319e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80319e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80319e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80319ea:	bfac      	ite	ge
 80319ec:	18ef      	addge	r7, r5, r3
 80319ee:	1b5e      	sublt	r6, r3, r5
 80319f0:	9b08      	ldr	r3, [sp, #32]
 80319f2:	1aed      	subs	r5, r5, r3
 80319f4:	4415      	add	r5, r2
 80319f6:	4b66      	ldr	r3, [pc, #408]	@ (8031b90 <_strtod_l+0x858>)
 80319f8:	3d01      	subs	r5, #1
 80319fa:	429d      	cmp	r5, r3
 80319fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8031a00:	da50      	bge.n	8031aa4 <_strtod_l+0x76c>
 8031a02:	1b5b      	subs	r3, r3, r5
 8031a04:	2b1f      	cmp	r3, #31
 8031a06:	eba2 0203 	sub.w	r2, r2, r3
 8031a0a:	f04f 0101 	mov.w	r1, #1
 8031a0e:	dc3d      	bgt.n	8031a8c <_strtod_l+0x754>
 8031a10:	fa01 f303 	lsl.w	r3, r1, r3
 8031a14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031a16:	2300      	movs	r3, #0
 8031a18:	9310      	str	r3, [sp, #64]	@ 0x40
 8031a1a:	18bd      	adds	r5, r7, r2
 8031a1c:	9b08      	ldr	r3, [sp, #32]
 8031a1e:	42af      	cmp	r7, r5
 8031a20:	4416      	add	r6, r2
 8031a22:	441e      	add	r6, r3
 8031a24:	463b      	mov	r3, r7
 8031a26:	bfa8      	it	ge
 8031a28:	462b      	movge	r3, r5
 8031a2a:	42b3      	cmp	r3, r6
 8031a2c:	bfa8      	it	ge
 8031a2e:	4633      	movge	r3, r6
 8031a30:	2b00      	cmp	r3, #0
 8031a32:	bfc2      	ittt	gt
 8031a34:	1aed      	subgt	r5, r5, r3
 8031a36:	1af6      	subgt	r6, r6, r3
 8031a38:	1aff      	subgt	r7, r7, r3
 8031a3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031a3c:	2b00      	cmp	r3, #0
 8031a3e:	dd16      	ble.n	8031a6e <_strtod_l+0x736>
 8031a40:	4641      	mov	r1, r8
 8031a42:	9805      	ldr	r0, [sp, #20]
 8031a44:	461a      	mov	r2, r3
 8031a46:	f7fe ff81 	bl	803094c <__pow5mult>
 8031a4a:	4680      	mov	r8, r0
 8031a4c:	2800      	cmp	r0, #0
 8031a4e:	d0ba      	beq.n	80319c6 <_strtod_l+0x68e>
 8031a50:	4601      	mov	r1, r0
 8031a52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8031a54:	9805      	ldr	r0, [sp, #20]
 8031a56:	f7fe fecf 	bl	80307f8 <__multiply>
 8031a5a:	900e      	str	r0, [sp, #56]	@ 0x38
 8031a5c:	2800      	cmp	r0, #0
 8031a5e:	f43f ae8a 	beq.w	8031776 <_strtod_l+0x43e>
 8031a62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8031a64:	9805      	ldr	r0, [sp, #20]
 8031a66:	f7fe fdcc 	bl	8030602 <_Bfree>
 8031a6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031a6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8031a6e:	2d00      	cmp	r5, #0
 8031a70:	dc1d      	bgt.n	8031aae <_strtod_l+0x776>
 8031a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031a74:	2b00      	cmp	r3, #0
 8031a76:	dd23      	ble.n	8031ac0 <_strtod_l+0x788>
 8031a78:	4649      	mov	r1, r9
 8031a7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8031a7c:	9805      	ldr	r0, [sp, #20]
 8031a7e:	f7fe ff65 	bl	803094c <__pow5mult>
 8031a82:	4681      	mov	r9, r0
 8031a84:	b9e0      	cbnz	r0, 8031ac0 <_strtod_l+0x788>
 8031a86:	f04f 0900 	mov.w	r9, #0
 8031a8a:	e674      	b.n	8031776 <_strtod_l+0x43e>
 8031a8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8031a90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8031a94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8031a98:	35e2      	adds	r5, #226	@ 0xe2
 8031a9a:	fa01 f305 	lsl.w	r3, r1, r5
 8031a9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8031aa0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8031aa2:	e7ba      	b.n	8031a1a <_strtod_l+0x6e2>
 8031aa4:	2300      	movs	r3, #0
 8031aa6:	9310      	str	r3, [sp, #64]	@ 0x40
 8031aa8:	2301      	movs	r3, #1
 8031aaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031aac:	e7b5      	b.n	8031a1a <_strtod_l+0x6e2>
 8031aae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8031ab0:	9805      	ldr	r0, [sp, #20]
 8031ab2:	462a      	mov	r2, r5
 8031ab4:	f7fe ff8a 	bl	80309cc <__lshift>
 8031ab8:	901a      	str	r0, [sp, #104]	@ 0x68
 8031aba:	2800      	cmp	r0, #0
 8031abc:	d1d9      	bne.n	8031a72 <_strtod_l+0x73a>
 8031abe:	e65a      	b.n	8031776 <_strtod_l+0x43e>
 8031ac0:	2e00      	cmp	r6, #0
 8031ac2:	dd07      	ble.n	8031ad4 <_strtod_l+0x79c>
 8031ac4:	4649      	mov	r1, r9
 8031ac6:	9805      	ldr	r0, [sp, #20]
 8031ac8:	4632      	mov	r2, r6
 8031aca:	f7fe ff7f 	bl	80309cc <__lshift>
 8031ace:	4681      	mov	r9, r0
 8031ad0:	2800      	cmp	r0, #0
 8031ad2:	d0d8      	beq.n	8031a86 <_strtod_l+0x74e>
 8031ad4:	2f00      	cmp	r7, #0
 8031ad6:	dd08      	ble.n	8031aea <_strtod_l+0x7b2>
 8031ad8:	4641      	mov	r1, r8
 8031ada:	9805      	ldr	r0, [sp, #20]
 8031adc:	463a      	mov	r2, r7
 8031ade:	f7fe ff75 	bl	80309cc <__lshift>
 8031ae2:	4680      	mov	r8, r0
 8031ae4:	2800      	cmp	r0, #0
 8031ae6:	f43f ae46 	beq.w	8031776 <_strtod_l+0x43e>
 8031aea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8031aec:	9805      	ldr	r0, [sp, #20]
 8031aee:	464a      	mov	r2, r9
 8031af0:	f7fe fff4 	bl	8030adc <__mdiff>
 8031af4:	4604      	mov	r4, r0
 8031af6:	2800      	cmp	r0, #0
 8031af8:	f43f ae3d 	beq.w	8031776 <_strtod_l+0x43e>
 8031afc:	68c3      	ldr	r3, [r0, #12]
 8031afe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8031b00:	2300      	movs	r3, #0
 8031b02:	60c3      	str	r3, [r0, #12]
 8031b04:	4641      	mov	r1, r8
 8031b06:	f7fe ffcd 	bl	8030aa4 <__mcmp>
 8031b0a:	2800      	cmp	r0, #0
 8031b0c:	da46      	bge.n	8031b9c <_strtod_l+0x864>
 8031b0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031b10:	ea53 030a 	orrs.w	r3, r3, sl
 8031b14:	d16c      	bne.n	8031bf0 <_strtod_l+0x8b8>
 8031b16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8031b1a:	2b00      	cmp	r3, #0
 8031b1c:	d168      	bne.n	8031bf0 <_strtod_l+0x8b8>
 8031b1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8031b22:	0d1b      	lsrs	r3, r3, #20
 8031b24:	051b      	lsls	r3, r3, #20
 8031b26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8031b2a:	d961      	bls.n	8031bf0 <_strtod_l+0x8b8>
 8031b2c:	6963      	ldr	r3, [r4, #20]
 8031b2e:	b913      	cbnz	r3, 8031b36 <_strtod_l+0x7fe>
 8031b30:	6923      	ldr	r3, [r4, #16]
 8031b32:	2b01      	cmp	r3, #1
 8031b34:	dd5c      	ble.n	8031bf0 <_strtod_l+0x8b8>
 8031b36:	4621      	mov	r1, r4
 8031b38:	2201      	movs	r2, #1
 8031b3a:	9805      	ldr	r0, [sp, #20]
 8031b3c:	f7fe ff46 	bl	80309cc <__lshift>
 8031b40:	4641      	mov	r1, r8
 8031b42:	4604      	mov	r4, r0
 8031b44:	f7fe ffae 	bl	8030aa4 <__mcmp>
 8031b48:	2800      	cmp	r0, #0
 8031b4a:	dd51      	ble.n	8031bf0 <_strtod_l+0x8b8>
 8031b4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8031b50:	9a08      	ldr	r2, [sp, #32]
 8031b52:	0d1b      	lsrs	r3, r3, #20
 8031b54:	051b      	lsls	r3, r3, #20
 8031b56:	2a00      	cmp	r2, #0
 8031b58:	d06b      	beq.n	8031c32 <_strtod_l+0x8fa>
 8031b5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8031b5e:	d868      	bhi.n	8031c32 <_strtod_l+0x8fa>
 8031b60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8031b64:	f67f ae9d 	bls.w	80318a2 <_strtod_l+0x56a>
 8031b68:	4b0a      	ldr	r3, [pc, #40]	@ (8031b94 <_strtod_l+0x85c>)
 8031b6a:	4650      	mov	r0, sl
 8031b6c:	4659      	mov	r1, fp
 8031b6e:	2200      	movs	r2, #0
 8031b70:	f7de fd5a 	bl	8010628 <__aeabi_dmul>
 8031b74:	4b08      	ldr	r3, [pc, #32]	@ (8031b98 <_strtod_l+0x860>)
 8031b76:	400b      	ands	r3, r1
 8031b78:	4682      	mov	sl, r0
 8031b7a:	468b      	mov	fp, r1
 8031b7c:	2b00      	cmp	r3, #0
 8031b7e:	f47f ae05 	bne.w	803178c <_strtod_l+0x454>
 8031b82:	9a05      	ldr	r2, [sp, #20]
 8031b84:	2322      	movs	r3, #34	@ 0x22
 8031b86:	6013      	str	r3, [r2, #0]
 8031b88:	e600      	b.n	803178c <_strtod_l+0x454>
 8031b8a:	bf00      	nop
 8031b8c:	080388d0 	.word	0x080388d0
 8031b90:	fffffc02 	.word	0xfffffc02
 8031b94:	39500000 	.word	0x39500000
 8031b98:	7ff00000 	.word	0x7ff00000
 8031b9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8031ba0:	d165      	bne.n	8031c6e <_strtod_l+0x936>
 8031ba2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031ba4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8031ba8:	b35a      	cbz	r2, 8031c02 <_strtod_l+0x8ca>
 8031baa:	4a9f      	ldr	r2, [pc, #636]	@ (8031e28 <_strtod_l+0xaf0>)
 8031bac:	4293      	cmp	r3, r2
 8031bae:	d12b      	bne.n	8031c08 <_strtod_l+0x8d0>
 8031bb0:	9b08      	ldr	r3, [sp, #32]
 8031bb2:	4651      	mov	r1, sl
 8031bb4:	b303      	cbz	r3, 8031bf8 <_strtod_l+0x8c0>
 8031bb6:	4b9d      	ldr	r3, [pc, #628]	@ (8031e2c <_strtod_l+0xaf4>)
 8031bb8:	465a      	mov	r2, fp
 8031bba:	4013      	ands	r3, r2
 8031bbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8031bc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8031bc4:	d81b      	bhi.n	8031bfe <_strtod_l+0x8c6>
 8031bc6:	0d1b      	lsrs	r3, r3, #20
 8031bc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8031bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8031bd0:	4299      	cmp	r1, r3
 8031bd2:	d119      	bne.n	8031c08 <_strtod_l+0x8d0>
 8031bd4:	4b96      	ldr	r3, [pc, #600]	@ (8031e30 <_strtod_l+0xaf8>)
 8031bd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8031bd8:	429a      	cmp	r2, r3
 8031bda:	d102      	bne.n	8031be2 <_strtod_l+0x8aa>
 8031bdc:	3101      	adds	r1, #1
 8031bde:	f43f adca 	beq.w	8031776 <_strtod_l+0x43e>
 8031be2:	4b92      	ldr	r3, [pc, #584]	@ (8031e2c <_strtod_l+0xaf4>)
 8031be4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8031be6:	401a      	ands	r2, r3
 8031be8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8031bec:	f04f 0a00 	mov.w	sl, #0
 8031bf0:	9b08      	ldr	r3, [sp, #32]
 8031bf2:	2b00      	cmp	r3, #0
 8031bf4:	d1b8      	bne.n	8031b68 <_strtod_l+0x830>
 8031bf6:	e5c9      	b.n	803178c <_strtod_l+0x454>
 8031bf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031bfc:	e7e8      	b.n	8031bd0 <_strtod_l+0x898>
 8031bfe:	4613      	mov	r3, r2
 8031c00:	e7e6      	b.n	8031bd0 <_strtod_l+0x898>
 8031c02:	ea53 030a 	orrs.w	r3, r3, sl
 8031c06:	d0a1      	beq.n	8031b4c <_strtod_l+0x814>
 8031c08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031c0a:	b1db      	cbz	r3, 8031c44 <_strtod_l+0x90c>
 8031c0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8031c0e:	4213      	tst	r3, r2
 8031c10:	d0ee      	beq.n	8031bf0 <_strtod_l+0x8b8>
 8031c12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031c14:	9a08      	ldr	r2, [sp, #32]
 8031c16:	4650      	mov	r0, sl
 8031c18:	4659      	mov	r1, fp
 8031c1a:	b1bb      	cbz	r3, 8031c4c <_strtod_l+0x914>
 8031c1c:	f7ff fb6e 	bl	80312fc <sulp>
 8031c20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8031c24:	ec53 2b10 	vmov	r2, r3, d0
 8031c28:	f7de fb48 	bl	80102bc <__adddf3>
 8031c2c:	4682      	mov	sl, r0
 8031c2e:	468b      	mov	fp, r1
 8031c30:	e7de      	b.n	8031bf0 <_strtod_l+0x8b8>
 8031c32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8031c36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8031c3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8031c3e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8031c42:	e7d5      	b.n	8031bf0 <_strtod_l+0x8b8>
 8031c44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031c46:	ea13 0f0a 	tst.w	r3, sl
 8031c4a:	e7e1      	b.n	8031c10 <_strtod_l+0x8d8>
 8031c4c:	f7ff fb56 	bl	80312fc <sulp>
 8031c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8031c54:	ec53 2b10 	vmov	r2, r3, d0
 8031c58:	f7de fb2e 	bl	80102b8 <__aeabi_dsub>
 8031c5c:	2200      	movs	r2, #0
 8031c5e:	2300      	movs	r3, #0
 8031c60:	4682      	mov	sl, r0
 8031c62:	468b      	mov	fp, r1
 8031c64:	f7de ff48 	bl	8010af8 <__aeabi_dcmpeq>
 8031c68:	2800      	cmp	r0, #0
 8031c6a:	d0c1      	beq.n	8031bf0 <_strtod_l+0x8b8>
 8031c6c:	e619      	b.n	80318a2 <_strtod_l+0x56a>
 8031c6e:	4641      	mov	r1, r8
 8031c70:	4620      	mov	r0, r4
 8031c72:	f7ff f88f 	bl	8030d94 <__ratio>
 8031c76:	ec57 6b10 	vmov	r6, r7, d0
 8031c7a:	2200      	movs	r2, #0
 8031c7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8031c80:	4630      	mov	r0, r6
 8031c82:	4639      	mov	r1, r7
 8031c84:	f7de ff4c 	bl	8010b20 <__aeabi_dcmple>
 8031c88:	2800      	cmp	r0, #0
 8031c8a:	d06f      	beq.n	8031d6c <_strtod_l+0xa34>
 8031c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031c8e:	2b00      	cmp	r3, #0
 8031c90:	d17a      	bne.n	8031d88 <_strtod_l+0xa50>
 8031c92:	f1ba 0f00 	cmp.w	sl, #0
 8031c96:	d158      	bne.n	8031d4a <_strtod_l+0xa12>
 8031c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031c9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8031c9e:	2b00      	cmp	r3, #0
 8031ca0:	d15a      	bne.n	8031d58 <_strtod_l+0xa20>
 8031ca2:	4b64      	ldr	r3, [pc, #400]	@ (8031e34 <_strtod_l+0xafc>)
 8031ca4:	2200      	movs	r2, #0
 8031ca6:	4630      	mov	r0, r6
 8031ca8:	4639      	mov	r1, r7
 8031caa:	f7de ff2f 	bl	8010b0c <__aeabi_dcmplt>
 8031cae:	2800      	cmp	r0, #0
 8031cb0:	d159      	bne.n	8031d66 <_strtod_l+0xa2e>
 8031cb2:	4630      	mov	r0, r6
 8031cb4:	4639      	mov	r1, r7
 8031cb6:	4b60      	ldr	r3, [pc, #384]	@ (8031e38 <_strtod_l+0xb00>)
 8031cb8:	2200      	movs	r2, #0
 8031cba:	f7de fcb5 	bl	8010628 <__aeabi_dmul>
 8031cbe:	4606      	mov	r6, r0
 8031cc0:	460f      	mov	r7, r1
 8031cc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8031cc6:	9606      	str	r6, [sp, #24]
 8031cc8:	9307      	str	r3, [sp, #28]
 8031cca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8031cce:	4d57      	ldr	r5, [pc, #348]	@ (8031e2c <_strtod_l+0xaf4>)
 8031cd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8031cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031cd6:	401d      	ands	r5, r3
 8031cd8:	4b58      	ldr	r3, [pc, #352]	@ (8031e3c <_strtod_l+0xb04>)
 8031cda:	429d      	cmp	r5, r3
 8031cdc:	f040 80b2 	bne.w	8031e44 <_strtod_l+0xb0c>
 8031ce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031ce2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8031ce6:	ec4b ab10 	vmov	d0, sl, fp
 8031cea:	f7fe ff8b 	bl	8030c04 <__ulp>
 8031cee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8031cf2:	ec51 0b10 	vmov	r0, r1, d0
 8031cf6:	f7de fc97 	bl	8010628 <__aeabi_dmul>
 8031cfa:	4652      	mov	r2, sl
 8031cfc:	465b      	mov	r3, fp
 8031cfe:	f7de fadd 	bl	80102bc <__adddf3>
 8031d02:	460b      	mov	r3, r1
 8031d04:	4949      	ldr	r1, [pc, #292]	@ (8031e2c <_strtod_l+0xaf4>)
 8031d06:	4a4e      	ldr	r2, [pc, #312]	@ (8031e40 <_strtod_l+0xb08>)
 8031d08:	4019      	ands	r1, r3
 8031d0a:	4291      	cmp	r1, r2
 8031d0c:	4682      	mov	sl, r0
 8031d0e:	d942      	bls.n	8031d96 <_strtod_l+0xa5e>
 8031d10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031d12:	4b47      	ldr	r3, [pc, #284]	@ (8031e30 <_strtod_l+0xaf8>)
 8031d14:	429a      	cmp	r2, r3
 8031d16:	d103      	bne.n	8031d20 <_strtod_l+0x9e8>
 8031d18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8031d1a:	3301      	adds	r3, #1
 8031d1c:	f43f ad2b 	beq.w	8031776 <_strtod_l+0x43e>
 8031d20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8031e30 <_strtod_l+0xaf8>
 8031d24:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8031d28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8031d2a:	9805      	ldr	r0, [sp, #20]
 8031d2c:	f7fe fc69 	bl	8030602 <_Bfree>
 8031d30:	9805      	ldr	r0, [sp, #20]
 8031d32:	4649      	mov	r1, r9
 8031d34:	f7fe fc65 	bl	8030602 <_Bfree>
 8031d38:	9805      	ldr	r0, [sp, #20]
 8031d3a:	4641      	mov	r1, r8
 8031d3c:	f7fe fc61 	bl	8030602 <_Bfree>
 8031d40:	9805      	ldr	r0, [sp, #20]
 8031d42:	4621      	mov	r1, r4
 8031d44:	f7fe fc5d 	bl	8030602 <_Bfree>
 8031d48:	e618      	b.n	803197c <_strtod_l+0x644>
 8031d4a:	f1ba 0f01 	cmp.w	sl, #1
 8031d4e:	d103      	bne.n	8031d58 <_strtod_l+0xa20>
 8031d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031d52:	2b00      	cmp	r3, #0
 8031d54:	f43f ada5 	beq.w	80318a2 <_strtod_l+0x56a>
 8031d58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8031e08 <_strtod_l+0xad0>
 8031d5c:	4f35      	ldr	r7, [pc, #212]	@ (8031e34 <_strtod_l+0xafc>)
 8031d5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8031d62:	2600      	movs	r6, #0
 8031d64:	e7b1      	b.n	8031cca <_strtod_l+0x992>
 8031d66:	4f34      	ldr	r7, [pc, #208]	@ (8031e38 <_strtod_l+0xb00>)
 8031d68:	2600      	movs	r6, #0
 8031d6a:	e7aa      	b.n	8031cc2 <_strtod_l+0x98a>
 8031d6c:	4b32      	ldr	r3, [pc, #200]	@ (8031e38 <_strtod_l+0xb00>)
 8031d6e:	4630      	mov	r0, r6
 8031d70:	4639      	mov	r1, r7
 8031d72:	2200      	movs	r2, #0
 8031d74:	f7de fc58 	bl	8010628 <__aeabi_dmul>
 8031d78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031d7a:	4606      	mov	r6, r0
 8031d7c:	460f      	mov	r7, r1
 8031d7e:	2b00      	cmp	r3, #0
 8031d80:	d09f      	beq.n	8031cc2 <_strtod_l+0x98a>
 8031d82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8031d86:	e7a0      	b.n	8031cca <_strtod_l+0x992>
 8031d88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8031e10 <_strtod_l+0xad8>
 8031d8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8031d90:	ec57 6b17 	vmov	r6, r7, d7
 8031d94:	e799      	b.n	8031cca <_strtod_l+0x992>
 8031d96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8031d9a:	9b08      	ldr	r3, [sp, #32]
 8031d9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8031da0:	2b00      	cmp	r3, #0
 8031da2:	d1c1      	bne.n	8031d28 <_strtod_l+0x9f0>
 8031da4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8031da8:	0d1b      	lsrs	r3, r3, #20
 8031daa:	051b      	lsls	r3, r3, #20
 8031dac:	429d      	cmp	r5, r3
 8031dae:	d1bb      	bne.n	8031d28 <_strtod_l+0x9f0>
 8031db0:	4630      	mov	r0, r6
 8031db2:	4639      	mov	r1, r7
 8031db4:	f7de fffc 	bl	8010db0 <__aeabi_d2lz>
 8031db8:	f7de fc08 	bl	80105cc <__aeabi_l2d>
 8031dbc:	4602      	mov	r2, r0
 8031dbe:	460b      	mov	r3, r1
 8031dc0:	4630      	mov	r0, r6
 8031dc2:	4639      	mov	r1, r7
 8031dc4:	f7de fa78 	bl	80102b8 <__aeabi_dsub>
 8031dc8:	460b      	mov	r3, r1
 8031dca:	4602      	mov	r2, r0
 8031dcc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8031dd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8031dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031dd6:	ea46 060a 	orr.w	r6, r6, sl
 8031dda:	431e      	orrs	r6, r3
 8031ddc:	d06f      	beq.n	8031ebe <_strtod_l+0xb86>
 8031dde:	a30e      	add	r3, pc, #56	@ (adr r3, 8031e18 <_strtod_l+0xae0>)
 8031de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031de4:	f7de fe92 	bl	8010b0c <__aeabi_dcmplt>
 8031de8:	2800      	cmp	r0, #0
 8031dea:	f47f accf 	bne.w	803178c <_strtod_l+0x454>
 8031dee:	a30c      	add	r3, pc, #48	@ (adr r3, 8031e20 <_strtod_l+0xae8>)
 8031df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031df4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8031df8:	f7de fea6 	bl	8010b48 <__aeabi_dcmpgt>
 8031dfc:	2800      	cmp	r0, #0
 8031dfe:	d093      	beq.n	8031d28 <_strtod_l+0x9f0>
 8031e00:	e4c4      	b.n	803178c <_strtod_l+0x454>
 8031e02:	bf00      	nop
 8031e04:	f3af 8000 	nop.w
 8031e08:	00000000 	.word	0x00000000
 8031e0c:	bff00000 	.word	0xbff00000
 8031e10:	00000000 	.word	0x00000000
 8031e14:	3ff00000 	.word	0x3ff00000
 8031e18:	94a03595 	.word	0x94a03595
 8031e1c:	3fdfffff 	.word	0x3fdfffff
 8031e20:	35afe535 	.word	0x35afe535
 8031e24:	3fe00000 	.word	0x3fe00000
 8031e28:	000fffff 	.word	0x000fffff
 8031e2c:	7ff00000 	.word	0x7ff00000
 8031e30:	7fefffff 	.word	0x7fefffff
 8031e34:	3ff00000 	.word	0x3ff00000
 8031e38:	3fe00000 	.word	0x3fe00000
 8031e3c:	7fe00000 	.word	0x7fe00000
 8031e40:	7c9fffff 	.word	0x7c9fffff
 8031e44:	9b08      	ldr	r3, [sp, #32]
 8031e46:	b323      	cbz	r3, 8031e92 <_strtod_l+0xb5a>
 8031e48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8031e4c:	d821      	bhi.n	8031e92 <_strtod_l+0xb5a>
 8031e4e:	a328      	add	r3, pc, #160	@ (adr r3, 8031ef0 <_strtod_l+0xbb8>)
 8031e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031e54:	4630      	mov	r0, r6
 8031e56:	4639      	mov	r1, r7
 8031e58:	f7de fe62 	bl	8010b20 <__aeabi_dcmple>
 8031e5c:	b1a0      	cbz	r0, 8031e88 <_strtod_l+0xb50>
 8031e5e:	4639      	mov	r1, r7
 8031e60:	4630      	mov	r0, r6
 8031e62:	f7de feb9 	bl	8010bd8 <__aeabi_d2uiz>
 8031e66:	2801      	cmp	r0, #1
 8031e68:	bf38      	it	cc
 8031e6a:	2001      	movcc	r0, #1
 8031e6c:	f7de fb62 	bl	8010534 <__aeabi_ui2d>
 8031e70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031e72:	4606      	mov	r6, r0
 8031e74:	460f      	mov	r7, r1
 8031e76:	b9fb      	cbnz	r3, 8031eb8 <_strtod_l+0xb80>
 8031e78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8031e7c:	9014      	str	r0, [sp, #80]	@ 0x50
 8031e7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8031e80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8031e84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8031e88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8031e8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8031e8e:	1b5b      	subs	r3, r3, r5
 8031e90:	9311      	str	r3, [sp, #68]	@ 0x44
 8031e92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8031e96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8031e9a:	f7fe feb3 	bl	8030c04 <__ulp>
 8031e9e:	4650      	mov	r0, sl
 8031ea0:	ec53 2b10 	vmov	r2, r3, d0
 8031ea4:	4659      	mov	r1, fp
 8031ea6:	f7de fbbf 	bl	8010628 <__aeabi_dmul>
 8031eaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8031eae:	f7de fa05 	bl	80102bc <__adddf3>
 8031eb2:	4682      	mov	sl, r0
 8031eb4:	468b      	mov	fp, r1
 8031eb6:	e770      	b.n	8031d9a <_strtod_l+0xa62>
 8031eb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8031ebc:	e7e0      	b.n	8031e80 <_strtod_l+0xb48>
 8031ebe:	a30e      	add	r3, pc, #56	@ (adr r3, 8031ef8 <_strtod_l+0xbc0>)
 8031ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031ec4:	f7de fe22 	bl	8010b0c <__aeabi_dcmplt>
 8031ec8:	e798      	b.n	8031dfc <_strtod_l+0xac4>
 8031eca:	2300      	movs	r3, #0
 8031ecc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8031ece:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8031ed0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8031ed2:	6013      	str	r3, [r2, #0]
 8031ed4:	f7ff ba6d 	b.w	80313b2 <_strtod_l+0x7a>
 8031ed8:	2a65      	cmp	r2, #101	@ 0x65
 8031eda:	f43f ab66 	beq.w	80315aa <_strtod_l+0x272>
 8031ede:	2a45      	cmp	r2, #69	@ 0x45
 8031ee0:	f43f ab63 	beq.w	80315aa <_strtod_l+0x272>
 8031ee4:	2301      	movs	r3, #1
 8031ee6:	f7ff bb9e 	b.w	8031626 <_strtod_l+0x2ee>
 8031eea:	bf00      	nop
 8031eec:	f3af 8000 	nop.w
 8031ef0:	ffc00000 	.word	0xffc00000
 8031ef4:	41dfffff 	.word	0x41dfffff
 8031ef8:	94a03595 	.word	0x94a03595
 8031efc:	3fcfffff 	.word	0x3fcfffff

08031f00 <_strtod_r>:
 8031f00:	4b01      	ldr	r3, [pc, #4]	@ (8031f08 <_strtod_r+0x8>)
 8031f02:	f7ff ba19 	b.w	8031338 <_strtod_l>
 8031f06:	bf00      	nop
 8031f08:	200000e8 	.word	0x200000e8

08031f0c <_strtoul_l.constprop.0>:
 8031f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8031f10:	4e34      	ldr	r6, [pc, #208]	@ (8031fe4 <_strtoul_l.constprop.0+0xd8>)
 8031f12:	4686      	mov	lr, r0
 8031f14:	460d      	mov	r5, r1
 8031f16:	4628      	mov	r0, r5
 8031f18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8031f1c:	5d37      	ldrb	r7, [r6, r4]
 8031f1e:	f017 0708 	ands.w	r7, r7, #8
 8031f22:	d1f8      	bne.n	8031f16 <_strtoul_l.constprop.0+0xa>
 8031f24:	2c2d      	cmp	r4, #45	@ 0x2d
 8031f26:	d12f      	bne.n	8031f88 <_strtoul_l.constprop.0+0x7c>
 8031f28:	782c      	ldrb	r4, [r5, #0]
 8031f2a:	2701      	movs	r7, #1
 8031f2c:	1c85      	adds	r5, r0, #2
 8031f2e:	f033 0010 	bics.w	r0, r3, #16
 8031f32:	d109      	bne.n	8031f48 <_strtoul_l.constprop.0+0x3c>
 8031f34:	2c30      	cmp	r4, #48	@ 0x30
 8031f36:	d12c      	bne.n	8031f92 <_strtoul_l.constprop.0+0x86>
 8031f38:	7828      	ldrb	r0, [r5, #0]
 8031f3a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8031f3e:	2858      	cmp	r0, #88	@ 0x58
 8031f40:	d127      	bne.n	8031f92 <_strtoul_l.constprop.0+0x86>
 8031f42:	786c      	ldrb	r4, [r5, #1]
 8031f44:	2310      	movs	r3, #16
 8031f46:	3502      	adds	r5, #2
 8031f48:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8031f4c:	2600      	movs	r6, #0
 8031f4e:	fbb8 f8f3 	udiv	r8, r8, r3
 8031f52:	fb03 f908 	mul.w	r9, r3, r8
 8031f56:	ea6f 0909 	mvn.w	r9, r9
 8031f5a:	4630      	mov	r0, r6
 8031f5c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8031f60:	f1bc 0f09 	cmp.w	ip, #9
 8031f64:	d81c      	bhi.n	8031fa0 <_strtoul_l.constprop.0+0x94>
 8031f66:	4664      	mov	r4, ip
 8031f68:	42a3      	cmp	r3, r4
 8031f6a:	dd2a      	ble.n	8031fc2 <_strtoul_l.constprop.0+0xb6>
 8031f6c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8031f70:	d007      	beq.n	8031f82 <_strtoul_l.constprop.0+0x76>
 8031f72:	4580      	cmp	r8, r0
 8031f74:	d322      	bcc.n	8031fbc <_strtoul_l.constprop.0+0xb0>
 8031f76:	d101      	bne.n	8031f7c <_strtoul_l.constprop.0+0x70>
 8031f78:	45a1      	cmp	r9, r4
 8031f7a:	db1f      	blt.n	8031fbc <_strtoul_l.constprop.0+0xb0>
 8031f7c:	fb00 4003 	mla	r0, r0, r3, r4
 8031f80:	2601      	movs	r6, #1
 8031f82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8031f86:	e7e9      	b.n	8031f5c <_strtoul_l.constprop.0+0x50>
 8031f88:	2c2b      	cmp	r4, #43	@ 0x2b
 8031f8a:	bf04      	itt	eq
 8031f8c:	782c      	ldrbeq	r4, [r5, #0]
 8031f8e:	1c85      	addeq	r5, r0, #2
 8031f90:	e7cd      	b.n	8031f2e <_strtoul_l.constprop.0+0x22>
 8031f92:	2b00      	cmp	r3, #0
 8031f94:	d1d8      	bne.n	8031f48 <_strtoul_l.constprop.0+0x3c>
 8031f96:	2c30      	cmp	r4, #48	@ 0x30
 8031f98:	bf0c      	ite	eq
 8031f9a:	2308      	moveq	r3, #8
 8031f9c:	230a      	movne	r3, #10
 8031f9e:	e7d3      	b.n	8031f48 <_strtoul_l.constprop.0+0x3c>
 8031fa0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8031fa4:	f1bc 0f19 	cmp.w	ip, #25
 8031fa8:	d801      	bhi.n	8031fae <_strtoul_l.constprop.0+0xa2>
 8031faa:	3c37      	subs	r4, #55	@ 0x37
 8031fac:	e7dc      	b.n	8031f68 <_strtoul_l.constprop.0+0x5c>
 8031fae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8031fb2:	f1bc 0f19 	cmp.w	ip, #25
 8031fb6:	d804      	bhi.n	8031fc2 <_strtoul_l.constprop.0+0xb6>
 8031fb8:	3c57      	subs	r4, #87	@ 0x57
 8031fba:	e7d5      	b.n	8031f68 <_strtoul_l.constprop.0+0x5c>
 8031fbc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8031fc0:	e7df      	b.n	8031f82 <_strtoul_l.constprop.0+0x76>
 8031fc2:	1c73      	adds	r3, r6, #1
 8031fc4:	d106      	bne.n	8031fd4 <_strtoul_l.constprop.0+0xc8>
 8031fc6:	2322      	movs	r3, #34	@ 0x22
 8031fc8:	f8ce 3000 	str.w	r3, [lr]
 8031fcc:	4630      	mov	r0, r6
 8031fce:	b932      	cbnz	r2, 8031fde <_strtoul_l.constprop.0+0xd2>
 8031fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8031fd4:	b107      	cbz	r7, 8031fd8 <_strtoul_l.constprop.0+0xcc>
 8031fd6:	4240      	negs	r0, r0
 8031fd8:	2a00      	cmp	r2, #0
 8031fda:	d0f9      	beq.n	8031fd0 <_strtoul_l.constprop.0+0xc4>
 8031fdc:	b106      	cbz	r6, 8031fe0 <_strtoul_l.constprop.0+0xd4>
 8031fde:	1e69      	subs	r1, r5, #1
 8031fe0:	6011      	str	r1, [r2, #0]
 8031fe2:	e7f5      	b.n	8031fd0 <_strtoul_l.constprop.0+0xc4>
 8031fe4:	0803854d 	.word	0x0803854d

08031fe8 <_strtoul_r>:
 8031fe8:	f7ff bf90 	b.w	8031f0c <_strtoul_l.constprop.0>

08031fec <strtoul>:
 8031fec:	4613      	mov	r3, r2
 8031fee:	460a      	mov	r2, r1
 8031ff0:	4601      	mov	r1, r0
 8031ff2:	4802      	ldr	r0, [pc, #8]	@ (8031ffc <strtoul+0x10>)
 8031ff4:	6800      	ldr	r0, [r0, #0]
 8031ff6:	f7ff bf89 	b.w	8031f0c <_strtoul_l.constprop.0>
 8031ffa:	bf00      	nop
 8031ffc:	20000254 	.word	0x20000254

08032000 <__submore>:
 8032000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032004:	460c      	mov	r4, r1
 8032006:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8032008:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803200c:	4299      	cmp	r1, r3
 803200e:	d11d      	bne.n	803204c <__submore+0x4c>
 8032010:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8032014:	f7f9 ffba 	bl	802bf8c <_malloc_r>
 8032018:	b918      	cbnz	r0, 8032022 <__submore+0x22>
 803201a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803201e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8032026:	6363      	str	r3, [r4, #52]	@ 0x34
 8032028:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 803202c:	6320      	str	r0, [r4, #48]	@ 0x30
 803202e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8032032:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8032036:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 803203a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 803203e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8032042:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8032046:	6020      	str	r0, [r4, #0]
 8032048:	2000      	movs	r0, #0
 803204a:	e7e8      	b.n	803201e <__submore+0x1e>
 803204c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 803204e:	0077      	lsls	r7, r6, #1
 8032050:	463a      	mov	r2, r7
 8032052:	f7fe ffab 	bl	8030fac <_realloc_r>
 8032056:	4605      	mov	r5, r0
 8032058:	2800      	cmp	r0, #0
 803205a:	d0de      	beq.n	803201a <__submore+0x1a>
 803205c:	eb00 0806 	add.w	r8, r0, r6
 8032060:	4601      	mov	r1, r0
 8032062:	4632      	mov	r2, r6
 8032064:	4640      	mov	r0, r8
 8032066:	f7f8 ff77 	bl	802af58 <memcpy>
 803206a:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 803206e:	f8c4 8000 	str.w	r8, [r4]
 8032072:	e7e9      	b.n	8032048 <__submore+0x48>

08032074 <__ascii_wctomb>:
 8032074:	4603      	mov	r3, r0
 8032076:	4608      	mov	r0, r1
 8032078:	b141      	cbz	r1, 803208c <__ascii_wctomb+0x18>
 803207a:	2aff      	cmp	r2, #255	@ 0xff
 803207c:	d904      	bls.n	8032088 <__ascii_wctomb+0x14>
 803207e:	228a      	movs	r2, #138	@ 0x8a
 8032080:	601a      	str	r2, [r3, #0]
 8032082:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8032086:	4770      	bx	lr
 8032088:	700a      	strb	r2, [r1, #0]
 803208a:	2001      	movs	r0, #1
 803208c:	4770      	bx	lr

0803208e <__swbuf_r>:
 803208e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8032090:	460e      	mov	r6, r1
 8032092:	4614      	mov	r4, r2
 8032094:	4605      	mov	r5, r0
 8032096:	b118      	cbz	r0, 80320a0 <__swbuf_r+0x12>
 8032098:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803209a:	b90b      	cbnz	r3, 80320a0 <__swbuf_r+0x12>
 803209c:	f7f7 fa7a 	bl	8029594 <__sinit>
 80320a0:	69a3      	ldr	r3, [r4, #24]
 80320a2:	60a3      	str	r3, [r4, #8]
 80320a4:	89a3      	ldrh	r3, [r4, #12]
 80320a6:	0719      	lsls	r1, r3, #28
 80320a8:	d501      	bpl.n	80320ae <__swbuf_r+0x20>
 80320aa:	6923      	ldr	r3, [r4, #16]
 80320ac:	b943      	cbnz	r3, 80320c0 <__swbuf_r+0x32>
 80320ae:	4621      	mov	r1, r4
 80320b0:	4628      	mov	r0, r5
 80320b2:	f7f7 fc2b 	bl	802990c <__swsetup_r>
 80320b6:	b118      	cbz	r0, 80320c0 <__swbuf_r+0x32>
 80320b8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80320bc:	4638      	mov	r0, r7
 80320be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80320c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80320c4:	b2f6      	uxtb	r6, r6
 80320c6:	049a      	lsls	r2, r3, #18
 80320c8:	4637      	mov	r7, r6
 80320ca:	d406      	bmi.n	80320da <__swbuf_r+0x4c>
 80320cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80320d0:	81a3      	strh	r3, [r4, #12]
 80320d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80320d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80320d8:	6663      	str	r3, [r4, #100]	@ 0x64
 80320da:	6823      	ldr	r3, [r4, #0]
 80320dc:	6922      	ldr	r2, [r4, #16]
 80320de:	1a98      	subs	r0, r3, r2
 80320e0:	6963      	ldr	r3, [r4, #20]
 80320e2:	4283      	cmp	r3, r0
 80320e4:	dc05      	bgt.n	80320f2 <__swbuf_r+0x64>
 80320e6:	4621      	mov	r1, r4
 80320e8:	4628      	mov	r0, r5
 80320ea:	f7f7 f911 	bl	8029310 <_fflush_r>
 80320ee:	2800      	cmp	r0, #0
 80320f0:	d1e2      	bne.n	80320b8 <__swbuf_r+0x2a>
 80320f2:	68a3      	ldr	r3, [r4, #8]
 80320f4:	3b01      	subs	r3, #1
 80320f6:	60a3      	str	r3, [r4, #8]
 80320f8:	6823      	ldr	r3, [r4, #0]
 80320fa:	1c5a      	adds	r2, r3, #1
 80320fc:	6022      	str	r2, [r4, #0]
 80320fe:	701e      	strb	r6, [r3, #0]
 8032100:	6962      	ldr	r2, [r4, #20]
 8032102:	1c43      	adds	r3, r0, #1
 8032104:	429a      	cmp	r2, r3
 8032106:	d004      	beq.n	8032112 <__swbuf_r+0x84>
 8032108:	89a3      	ldrh	r3, [r4, #12]
 803210a:	07db      	lsls	r3, r3, #31
 803210c:	d5d6      	bpl.n	80320bc <__swbuf_r+0x2e>
 803210e:	2e0a      	cmp	r6, #10
 8032110:	d1d4      	bne.n	80320bc <__swbuf_r+0x2e>
 8032112:	4621      	mov	r1, r4
 8032114:	4628      	mov	r0, r5
 8032116:	f7f7 f8fb 	bl	8029310 <_fflush_r>
 803211a:	2800      	cmp	r0, #0
 803211c:	d0ce      	beq.n	80320bc <__swbuf_r+0x2e>
 803211e:	e7cb      	b.n	80320b8 <__swbuf_r+0x2a>

08032120 <_raise_r>:
 8032120:	291f      	cmp	r1, #31
 8032122:	b538      	push	{r3, r4, r5, lr}
 8032124:	4605      	mov	r5, r0
 8032126:	460c      	mov	r4, r1
 8032128:	d904      	bls.n	8032134 <_raise_r+0x14>
 803212a:	2316      	movs	r3, #22
 803212c:	6003      	str	r3, [r0, #0]
 803212e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8032132:	bd38      	pop	{r3, r4, r5, pc}
 8032134:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8032138:	b112      	cbz	r2, 8032140 <_raise_r+0x20>
 803213a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803213e:	b94b      	cbnz	r3, 8032154 <_raise_r+0x34>
 8032140:	4628      	mov	r0, r5
 8032142:	f000 f8fd 	bl	8032340 <_getpid_r>
 8032146:	4622      	mov	r2, r4
 8032148:	4601      	mov	r1, r0
 803214a:	4628      	mov	r0, r5
 803214c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8032150:	f000 b8e4 	b.w	803231c <_kill_r>
 8032154:	2b01      	cmp	r3, #1
 8032156:	d00a      	beq.n	803216e <_raise_r+0x4e>
 8032158:	1c59      	adds	r1, r3, #1
 803215a:	d103      	bne.n	8032164 <_raise_r+0x44>
 803215c:	2316      	movs	r3, #22
 803215e:	6003      	str	r3, [r0, #0]
 8032160:	2001      	movs	r0, #1
 8032162:	e7e6      	b.n	8032132 <_raise_r+0x12>
 8032164:	2100      	movs	r1, #0
 8032166:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 803216a:	4620      	mov	r0, r4
 803216c:	4798      	blx	r3
 803216e:	2000      	movs	r0, #0
 8032170:	e7df      	b.n	8032132 <_raise_r+0x12>
	...

08032174 <raise>:
 8032174:	4b02      	ldr	r3, [pc, #8]	@ (8032180 <raise+0xc>)
 8032176:	4601      	mov	r1, r0
 8032178:	6818      	ldr	r0, [r3, #0]
 803217a:	f7ff bfd1 	b.w	8032120 <_raise_r>
 803217e:	bf00      	nop
 8032180:	20000254 	.word	0x20000254

08032184 <__gettzinfo>:
 8032184:	4800      	ldr	r0, [pc, #0]	@ (8032188 <__gettzinfo+0x4>)
 8032186:	4770      	bx	lr
 8032188:	20000790 	.word	0x20000790

0803218c <gmtime_r>:
 803218c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032190:	4a4d      	ldr	r2, [pc, #308]	@ (80322c8 <gmtime_r+0x13c>)
 8032192:	460c      	mov	r4, r1
 8032194:	2300      	movs	r3, #0
 8032196:	e9d0 0100 	ldrd	r0, r1, [r0]
 803219a:	f7de fd8d 	bl	8010cb8 <__aeabi_ldivmod>
 803219e:	2a00      	cmp	r2, #0
 80321a0:	bfbc      	itt	lt
 80321a2:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 80321a6:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 80321aa:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80321ae:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 80321b2:	fbb2 f3f1 	udiv	r3, r2, r1
 80321b6:	fb01 2213 	mls	r2, r1, r3, r2
 80321ba:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 80321be:	bfac      	ite	ge
 80321c0:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 80321c4:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 80321c8:	60a3      	str	r3, [r4, #8]
 80321ca:	fbb2 f3f1 	udiv	r3, r2, r1
 80321ce:	fb01 2213 	mls	r2, r1, r3, r2
 80321d2:	6063      	str	r3, [r4, #4]
 80321d4:	6022      	str	r2, [r4, #0]
 80321d6:	1cc3      	adds	r3, r0, #3
 80321d8:	2207      	movs	r2, #7
 80321da:	fb93 f2f2 	sdiv	r2, r3, r2
 80321de:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80321e2:	1a9b      	subs	r3, r3, r2
 80321e4:	bf48      	it	mi
 80321e6:	3307      	addmi	r3, #7
 80321e8:	2800      	cmp	r0, #0
 80321ea:	61a3      	str	r3, [r4, #24]
 80321ec:	bfb8      	it	lt
 80321ee:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 80321f2:	4936      	ldr	r1, [pc, #216]	@ (80322cc <gmtime_r+0x140>)
 80321f4:	bfae      	itee	ge
 80321f6:	fb90 f1f1 	sdivge	r1, r0, r1
 80321fa:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 80321fe:	fb93 f1f1 	sdivlt	r1, r3, r1
 8032202:	4b33      	ldr	r3, [pc, #204]	@ (80322d0 <gmtime_r+0x144>)
 8032204:	fb03 0001 	mla	r0, r3, r1, r0
 8032208:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 803220c:	fbb0 f3f3 	udiv	r3, r0, r3
 8032210:	4403      	add	r3, r0
 8032212:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8032216:	fbb0 f2fc 	udiv	r2, r0, ip
 803221a:	1a9b      	subs	r3, r3, r2
 803221c:	f240 176d 	movw	r7, #365	@ 0x16d
 8032220:	4a2c      	ldr	r2, [pc, #176]	@ (80322d4 <gmtime_r+0x148>)
 8032222:	fbb0 f2f2 	udiv	r2, r0, r2
 8032226:	2664      	movs	r6, #100	@ 0x64
 8032228:	1a9b      	subs	r3, r3, r2
 803222a:	fbb3 f2f7 	udiv	r2, r3, r7
 803222e:	fbb3 f3fc 	udiv	r3, r3, ip
 8032232:	fbb2 f5f6 	udiv	r5, r2, r6
 8032236:	1aeb      	subs	r3, r5, r3
 8032238:	4403      	add	r3, r0
 803223a:	fb07 3312 	mls	r3, r7, r2, r3
 803223e:	2099      	movs	r0, #153	@ 0x99
 8032240:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8032244:	3702      	adds	r7, #2
 8032246:	f103 0e01 	add.w	lr, r3, #1
 803224a:	fbb7 fcf0 	udiv	ip, r7, r0
 803224e:	fb00 f00c 	mul.w	r0, r0, ip
 8032252:	3002      	adds	r0, #2
 8032254:	f04f 0805 	mov.w	r8, #5
 8032258:	fbb0 f0f8 	udiv	r0, r0, r8
 803225c:	ebae 0000 	sub.w	r0, lr, r0
 8032260:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8032264:	4577      	cmp	r7, lr
 8032266:	bf8c      	ite	hi
 8032268:	f06f 0709 	mvnhi.w	r7, #9
 803226c:	2702      	movls	r7, #2
 803226e:	4467      	add	r7, ip
 8032270:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8032274:	fb0c 2101 	mla	r1, ip, r1, r2
 8032278:	2f01      	cmp	r7, #1
 803227a:	bf98      	it	ls
 803227c:	3101      	addls	r1, #1
 803227e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8032282:	d30c      	bcc.n	803229e <gmtime_r+0x112>
 8032284:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8032288:	61e3      	str	r3, [r4, #28]
 803228a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 803228e:	2300      	movs	r3, #0
 8032290:	60e0      	str	r0, [r4, #12]
 8032292:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8032296:	6223      	str	r3, [r4, #32]
 8032298:	4620      	mov	r0, r4
 803229a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803229e:	f012 0f03 	tst.w	r2, #3
 80322a2:	d102      	bne.n	80322aa <gmtime_r+0x11e>
 80322a4:	fb06 2515 	mls	r5, r6, r5, r2
 80322a8:	b95d      	cbnz	r5, 80322c2 <gmtime_r+0x136>
 80322aa:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 80322ae:	fbb2 f6f5 	udiv	r6, r2, r5
 80322b2:	fb05 2216 	mls	r2, r5, r6, r2
 80322b6:	fab2 f282 	clz	r2, r2
 80322ba:	0952      	lsrs	r2, r2, #5
 80322bc:	333b      	adds	r3, #59	@ 0x3b
 80322be:	4413      	add	r3, r2
 80322c0:	e7e2      	b.n	8032288 <gmtime_r+0xfc>
 80322c2:	2201      	movs	r2, #1
 80322c4:	e7fa      	b.n	80322bc <gmtime_r+0x130>
 80322c6:	bf00      	nop
 80322c8:	00015180 	.word	0x00015180
 80322cc:	00023ab1 	.word	0x00023ab1
 80322d0:	fffdc54f 	.word	0xfffdc54f
 80322d4:	00023ab0 	.word	0x00023ab0

080322d8 <_fstat_r>:
 80322d8:	b538      	push	{r3, r4, r5, lr}
 80322da:	4d07      	ldr	r5, [pc, #28]	@ (80322f8 <_fstat_r+0x20>)
 80322dc:	2300      	movs	r3, #0
 80322de:	4604      	mov	r4, r0
 80322e0:	4608      	mov	r0, r1
 80322e2:	4611      	mov	r1, r2
 80322e4:	602b      	str	r3, [r5, #0]
 80322e6:	f7df ff42 	bl	801216e <_fstat>
 80322ea:	1c43      	adds	r3, r0, #1
 80322ec:	d102      	bne.n	80322f4 <_fstat_r+0x1c>
 80322ee:	682b      	ldr	r3, [r5, #0]
 80322f0:	b103      	cbz	r3, 80322f4 <_fstat_r+0x1c>
 80322f2:	6023      	str	r3, [r4, #0]
 80322f4:	bd38      	pop	{r3, r4, r5, pc}
 80322f6:	bf00      	nop
 80322f8:	20018184 	.word	0x20018184

080322fc <_isatty_r>:
 80322fc:	b538      	push	{r3, r4, r5, lr}
 80322fe:	4d06      	ldr	r5, [pc, #24]	@ (8032318 <_isatty_r+0x1c>)
 8032300:	2300      	movs	r3, #0
 8032302:	4604      	mov	r4, r0
 8032304:	4608      	mov	r0, r1
 8032306:	602b      	str	r3, [r5, #0]
 8032308:	f7df ff36 	bl	8012178 <_isatty>
 803230c:	1c43      	adds	r3, r0, #1
 803230e:	d102      	bne.n	8032316 <_isatty_r+0x1a>
 8032310:	682b      	ldr	r3, [r5, #0]
 8032312:	b103      	cbz	r3, 8032316 <_isatty_r+0x1a>
 8032314:	6023      	str	r3, [r4, #0]
 8032316:	bd38      	pop	{r3, r4, r5, pc}
 8032318:	20018184 	.word	0x20018184

0803231c <_kill_r>:
 803231c:	b538      	push	{r3, r4, r5, lr}
 803231e:	4d07      	ldr	r5, [pc, #28]	@ (803233c <_kill_r+0x20>)
 8032320:	2300      	movs	r3, #0
 8032322:	4604      	mov	r4, r0
 8032324:	4608      	mov	r0, r1
 8032326:	4611      	mov	r1, r2
 8032328:	602b      	str	r3, [r5, #0]
 803232a:	f7df fef1 	bl	8012110 <_kill>
 803232e:	1c43      	adds	r3, r0, #1
 8032330:	d102      	bne.n	8032338 <_kill_r+0x1c>
 8032332:	682b      	ldr	r3, [r5, #0]
 8032334:	b103      	cbz	r3, 8032338 <_kill_r+0x1c>
 8032336:	6023      	str	r3, [r4, #0]
 8032338:	bd38      	pop	{r3, r4, r5, pc}
 803233a:	bf00      	nop
 803233c:	20018184 	.word	0x20018184

08032340 <_getpid_r>:
 8032340:	f7df bee4 	b.w	801210c <_getpid>

08032344 <_sbrk_r>:
 8032344:	b538      	push	{r3, r4, r5, lr}
 8032346:	4d06      	ldr	r5, [pc, #24]	@ (8032360 <_sbrk_r+0x1c>)
 8032348:	2300      	movs	r3, #0
 803234a:	4604      	mov	r4, r0
 803234c:	4608      	mov	r0, r1
 803234e:	602b      	str	r3, [r5, #0]
 8032350:	f7df ff16 	bl	8012180 <_sbrk>
 8032354:	1c43      	adds	r3, r0, #1
 8032356:	d102      	bne.n	803235e <_sbrk_r+0x1a>
 8032358:	682b      	ldr	r3, [r5, #0]
 803235a:	b103      	cbz	r3, 803235e <_sbrk_r+0x1a>
 803235c:	6023      	str	r3, [r4, #0]
 803235e:	bd38      	pop	{r3, r4, r5, pc}
 8032360:	20018184 	.word	0x20018184

08032364 <sysconf>:
 8032364:	2808      	cmp	r0, #8
 8032366:	b508      	push	{r3, lr}
 8032368:	d006      	beq.n	8032378 <sysconf+0x14>
 803236a:	f7f8 fdbd 	bl	802aee8 <__errno>
 803236e:	2316      	movs	r3, #22
 8032370:	6003      	str	r3, [r0, #0]
 8032372:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8032376:	bd08      	pop	{r3, pc}
 8032378:	2080      	movs	r0, #128	@ 0x80
 803237a:	e7fc      	b.n	8032376 <sysconf+0x12>

0803237c <_strtoll_l.constprop.0>:
 803237c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032380:	b085      	sub	sp, #20
 8032382:	4690      	mov	r8, r2
 8032384:	4a43      	ldr	r2, [pc, #268]	@ (8032494 <_strtoll_l.constprop.0+0x118>)
 8032386:	9002      	str	r0, [sp, #8]
 8032388:	4689      	mov	r9, r1
 803238a:	461e      	mov	r6, r3
 803238c:	460d      	mov	r5, r1
 803238e:	462b      	mov	r3, r5
 8032390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8032394:	5d17      	ldrb	r7, [r2, r4]
 8032396:	f017 0708 	ands.w	r7, r7, #8
 803239a:	d1f8      	bne.n	803238e <_strtoll_l.constprop.0+0x12>
 803239c:	2c2d      	cmp	r4, #45	@ 0x2d
 803239e:	d149      	bne.n	8032434 <_strtoll_l.constprop.0+0xb8>
 80323a0:	782c      	ldrb	r4, [r5, #0]
 80323a2:	2701      	movs	r7, #1
 80323a4:	1c9d      	adds	r5, r3, #2
 80323a6:	f036 0310 	bics.w	r3, r6, #16
 80323aa:	d109      	bne.n	80323c0 <_strtoll_l.constprop.0+0x44>
 80323ac:	2c30      	cmp	r4, #48	@ 0x30
 80323ae:	d146      	bne.n	803243e <_strtoll_l.constprop.0+0xc2>
 80323b0:	782b      	ldrb	r3, [r5, #0]
 80323b2:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80323b6:	2b58      	cmp	r3, #88	@ 0x58
 80323b8:	d141      	bne.n	803243e <_strtoll_l.constprop.0+0xc2>
 80323ba:	786c      	ldrb	r4, [r5, #1]
 80323bc:	2610      	movs	r6, #16
 80323be:	3502      	adds	r5, #2
 80323c0:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 80323c4:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 80323c8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80323cc:	17f3      	asrs	r3, r6, #31
 80323ce:	4632      	mov	r2, r6
 80323d0:	4658      	mov	r0, fp
 80323d2:	4651      	mov	r1, sl
 80323d4:	9303      	str	r3, [sp, #12]
 80323d6:	f7de fcbf 	bl	8010d58 <__aeabi_uldivmod>
 80323da:	9201      	str	r2, [sp, #4]
 80323dc:	2200      	movs	r2, #0
 80323de:	468e      	mov	lr, r1
 80323e0:	4684      	mov	ip, r0
 80323e2:	4611      	mov	r1, r2
 80323e4:	4610      	mov	r0, r2
 80323e6:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80323ea:	2b09      	cmp	r3, #9
 80323ec:	d905      	bls.n	80323fa <_strtoll_l.constprop.0+0x7e>
 80323ee:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 80323f2:	2b19      	cmp	r3, #25
 80323f4:	d82a      	bhi.n	803244c <_strtoll_l.constprop.0+0xd0>
 80323f6:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 80323fa:	429e      	cmp	r6, r3
 80323fc:	dd30      	ble.n	8032460 <_strtoll_l.constprop.0+0xe4>
 80323fe:	1c54      	adds	r4, r2, #1
 8032400:	d015      	beq.n	803242e <_strtoll_l.constprop.0+0xb2>
 8032402:	4584      	cmp	ip, r0
 8032404:	eb7e 0201 	sbcs.w	r2, lr, r1
 8032408:	d327      	bcc.n	803245a <_strtoll_l.constprop.0+0xde>
 803240a:	458e      	cmp	lr, r1
 803240c:	bf08      	it	eq
 803240e:	4584      	cmpeq	ip, r0
 8032410:	d102      	bne.n	8032418 <_strtoll_l.constprop.0+0x9c>
 8032412:	9a01      	ldr	r2, [sp, #4]
 8032414:	429a      	cmp	r2, r3
 8032416:	db20      	blt.n	803245a <_strtoll_l.constprop.0+0xde>
 8032418:	9a03      	ldr	r2, [sp, #12]
 803241a:	4371      	muls	r1, r6
 803241c:	fb00 1102 	mla	r1, r0, r2, r1
 8032420:	fba6 0200 	umull	r0, r2, r6, r0
 8032424:	440a      	add	r2, r1
 8032426:	1818      	adds	r0, r3, r0
 8032428:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 803242c:	2201      	movs	r2, #1
 803242e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8032432:	e7d8      	b.n	80323e6 <_strtoll_l.constprop.0+0x6a>
 8032434:	2c2b      	cmp	r4, #43	@ 0x2b
 8032436:	bf04      	itt	eq
 8032438:	782c      	ldrbeq	r4, [r5, #0]
 803243a:	1c9d      	addeq	r5, r3, #2
 803243c:	e7b3      	b.n	80323a6 <_strtoll_l.constprop.0+0x2a>
 803243e:	2e00      	cmp	r6, #0
 8032440:	d1be      	bne.n	80323c0 <_strtoll_l.constprop.0+0x44>
 8032442:	2c30      	cmp	r4, #48	@ 0x30
 8032444:	bf0c      	ite	eq
 8032446:	2608      	moveq	r6, #8
 8032448:	260a      	movne	r6, #10
 803244a:	e7b9      	b.n	80323c0 <_strtoll_l.constprop.0+0x44>
 803244c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8032450:	2b19      	cmp	r3, #25
 8032452:	d805      	bhi.n	8032460 <_strtoll_l.constprop.0+0xe4>
 8032454:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 8032458:	e7cf      	b.n	80323fa <_strtoll_l.constprop.0+0x7e>
 803245a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803245e:	e7e6      	b.n	803242e <_strtoll_l.constprop.0+0xb2>
 8032460:	1c53      	adds	r3, r2, #1
 8032462:	d10a      	bne.n	803247a <_strtoll_l.constprop.0+0xfe>
 8032464:	9a02      	ldr	r2, [sp, #8]
 8032466:	2322      	movs	r3, #34	@ 0x22
 8032468:	6013      	str	r3, [r2, #0]
 803246a:	4658      	mov	r0, fp
 803246c:	4651      	mov	r1, sl
 803246e:	f1b8 0f00 	cmp.w	r8, #0
 8032472:	d10a      	bne.n	803248a <_strtoll_l.constprop.0+0x10e>
 8032474:	b005      	add	sp, #20
 8032476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803247a:	b117      	cbz	r7, 8032482 <_strtoll_l.constprop.0+0x106>
 803247c:	4240      	negs	r0, r0
 803247e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8032482:	f1b8 0f00 	cmp.w	r8, #0
 8032486:	d0f5      	beq.n	8032474 <_strtoll_l.constprop.0+0xf8>
 8032488:	b10a      	cbz	r2, 803248e <_strtoll_l.constprop.0+0x112>
 803248a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803248e:	f8c8 9000 	str.w	r9, [r8]
 8032492:	e7ef      	b.n	8032474 <_strtoll_l.constprop.0+0xf8>
 8032494:	0803854d 	.word	0x0803854d

08032498 <_strtoll_r>:
 8032498:	f7ff bf70 	b.w	803237c <_strtoll_l.constprop.0>

0803249c <__libc_fini_array>:
 803249c:	b538      	push	{r3, r4, r5, lr}
 803249e:	4d07      	ldr	r5, [pc, #28]	@ (80324bc <__libc_fini_array+0x20>)
 80324a0:	4c07      	ldr	r4, [pc, #28]	@ (80324c0 <__libc_fini_array+0x24>)
 80324a2:	1b64      	subs	r4, r4, r5
 80324a4:	10a4      	asrs	r4, r4, #2
 80324a6:	b91c      	cbnz	r4, 80324b0 <__libc_fini_array+0x14>
 80324a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80324ac:	f000 bc9c 	b.w	8032de8 <_fini>
 80324b0:	3c01      	subs	r4, #1
 80324b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80324b6:	4798      	blx	r3
 80324b8:	e7f5      	b.n	80324a6 <__libc_fini_array+0xa>
 80324ba:	bf00      	nop
 80324bc:	08038968 	.word	0x08038968
 80324c0:	0803896c 	.word	0x0803896c

080324c4 <_strtoull_l.constprop.0>:
 80324c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80324c8:	4691      	mov	r9, r2
 80324ca:	4a48      	ldr	r2, [pc, #288]	@ (80325ec <_strtoull_l.constprop.0+0x128>)
 80324cc:	9001      	str	r0, [sp, #4]
 80324ce:	468a      	mov	sl, r1
 80324d0:	461e      	mov	r6, r3
 80324d2:	460d      	mov	r5, r1
 80324d4:	462b      	mov	r3, r5
 80324d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80324da:	5d17      	ldrb	r7, [r2, r4]
 80324dc:	f017 0708 	ands.w	r7, r7, #8
 80324e0:	d1f8      	bne.n	80324d4 <_strtoull_l.constprop.0+0x10>
 80324e2:	2c2d      	cmp	r4, #45	@ 0x2d
 80324e4:	d14a      	bne.n	803257c <_strtoull_l.constprop.0+0xb8>
 80324e6:	782c      	ldrb	r4, [r5, #0]
 80324e8:	2701      	movs	r7, #1
 80324ea:	1c9d      	adds	r5, r3, #2
 80324ec:	f036 0310 	bics.w	r3, r6, #16
 80324f0:	d109      	bne.n	8032506 <_strtoull_l.constprop.0+0x42>
 80324f2:	2c30      	cmp	r4, #48	@ 0x30
 80324f4:	d147      	bne.n	8032586 <_strtoull_l.constprop.0+0xc2>
 80324f6:	782b      	ldrb	r3, [r5, #0]
 80324f8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80324fc:	2b58      	cmp	r3, #88	@ 0x58
 80324fe:	d142      	bne.n	8032586 <_strtoull_l.constprop.0+0xc2>
 8032500:	786c      	ldrb	r4, [r5, #1]
 8032502:	2610      	movs	r6, #16
 8032504:	3502      	adds	r5, #2
 8032506:	ea4f 7be6 	mov.w	fp, r6, asr #31
 803250a:	4632      	mov	r2, r6
 803250c:	465b      	mov	r3, fp
 803250e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8032512:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8032516:	f7de fc1f 	bl	8010d58 <__aeabi_uldivmod>
 803251a:	4632      	mov	r2, r6
 803251c:	9000      	str	r0, [sp, #0]
 803251e:	4688      	mov	r8, r1
 8032520:	465b      	mov	r3, fp
 8032522:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8032526:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 803252a:	f7de fc15 	bl	8010d58 <__aeabi_uldivmod>
 803252e:	2300      	movs	r3, #0
 8032530:	4618      	mov	r0, r3
 8032532:	4619      	mov	r1, r3
 8032534:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8032538:	f1bc 0f09 	cmp.w	ip, #9
 803253c:	d82a      	bhi.n	8032594 <_strtoull_l.constprop.0+0xd0>
 803253e:	4664      	mov	r4, ip
 8032540:	42a6      	cmp	r6, r4
 8032542:	dd38      	ble.n	80325b6 <_strtoull_l.constprop.0+0xf2>
 8032544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8032548:	d015      	beq.n	8032576 <_strtoull_l.constprop.0+0xb2>
 803254a:	9b00      	ldr	r3, [sp, #0]
 803254c:	4283      	cmp	r3, r0
 803254e:	eb78 0301 	sbcs.w	r3, r8, r1
 8032552:	d32d      	bcc.n	80325b0 <_strtoull_l.constprop.0+0xec>
 8032554:	9b00      	ldr	r3, [sp, #0]
 8032556:	4588      	cmp	r8, r1
 8032558:	bf08      	it	eq
 803255a:	4283      	cmpeq	r3, r0
 803255c:	d101      	bne.n	8032562 <_strtoull_l.constprop.0+0x9e>
 803255e:	42a2      	cmp	r2, r4
 8032560:	db26      	blt.n	80325b0 <_strtoull_l.constprop.0+0xec>
 8032562:	4371      	muls	r1, r6
 8032564:	fb00 110b 	mla	r1, r0, fp, r1
 8032568:	fba6 0300 	umull	r0, r3, r6, r0
 803256c:	4419      	add	r1, r3
 803256e:	1820      	adds	r0, r4, r0
 8032570:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8032574:	2301      	movs	r3, #1
 8032576:	f815 4b01 	ldrb.w	r4, [r5], #1
 803257a:	e7db      	b.n	8032534 <_strtoull_l.constprop.0+0x70>
 803257c:	2c2b      	cmp	r4, #43	@ 0x2b
 803257e:	bf04      	itt	eq
 8032580:	782c      	ldrbeq	r4, [r5, #0]
 8032582:	1c9d      	addeq	r5, r3, #2
 8032584:	e7b2      	b.n	80324ec <_strtoull_l.constprop.0+0x28>
 8032586:	2e00      	cmp	r6, #0
 8032588:	d1bd      	bne.n	8032506 <_strtoull_l.constprop.0+0x42>
 803258a:	2c30      	cmp	r4, #48	@ 0x30
 803258c:	bf0c      	ite	eq
 803258e:	2608      	moveq	r6, #8
 8032590:	260a      	movne	r6, #10
 8032592:	e7b8      	b.n	8032506 <_strtoull_l.constprop.0+0x42>
 8032594:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8032598:	f1bc 0f19 	cmp.w	ip, #25
 803259c:	d801      	bhi.n	80325a2 <_strtoull_l.constprop.0+0xde>
 803259e:	3c37      	subs	r4, #55	@ 0x37
 80325a0:	e7ce      	b.n	8032540 <_strtoull_l.constprop.0+0x7c>
 80325a2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80325a6:	f1bc 0f19 	cmp.w	ip, #25
 80325aa:	d804      	bhi.n	80325b6 <_strtoull_l.constprop.0+0xf2>
 80325ac:	3c57      	subs	r4, #87	@ 0x57
 80325ae:	e7c7      	b.n	8032540 <_strtoull_l.constprop.0+0x7c>
 80325b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80325b4:	e7df      	b.n	8032576 <_strtoull_l.constprop.0+0xb2>
 80325b6:	1c5a      	adds	r2, r3, #1
 80325b8:	d10a      	bne.n	80325d0 <_strtoull_l.constprop.0+0x10c>
 80325ba:	9901      	ldr	r1, [sp, #4]
 80325bc:	2222      	movs	r2, #34	@ 0x22
 80325be:	600a      	str	r2, [r1, #0]
 80325c0:	4618      	mov	r0, r3
 80325c2:	4619      	mov	r1, r3
 80325c4:	f1b9 0f00 	cmp.w	r9, #0
 80325c8:	d10a      	bne.n	80325e0 <_strtoull_l.constprop.0+0x11c>
 80325ca:	b003      	add	sp, #12
 80325cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80325d0:	b117      	cbz	r7, 80325d8 <_strtoull_l.constprop.0+0x114>
 80325d2:	4240      	negs	r0, r0
 80325d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80325d8:	f1b9 0f00 	cmp.w	r9, #0
 80325dc:	d0f5      	beq.n	80325ca <_strtoull_l.constprop.0+0x106>
 80325de:	b10b      	cbz	r3, 80325e4 <_strtoull_l.constprop.0+0x120>
 80325e0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80325e4:	f8c9 a000 	str.w	sl, [r9]
 80325e8:	e7ef      	b.n	80325ca <_strtoull_l.constprop.0+0x106>
 80325ea:	bf00      	nop
 80325ec:	0803854d 	.word	0x0803854d

080325f0 <_strtoull_r>:
 80325f0:	f7ff bf68 	b.w	80324c4 <_strtoull_l.constprop.0>

080325f4 <_mbrtowc_r>:
 80325f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80325f6:	4c0a      	ldr	r4, [pc, #40]	@ (8032620 <_mbrtowc_r+0x2c>)
 80325f8:	9e08      	ldr	r6, [sp, #32]
 80325fa:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 80325fe:	9600      	str	r6, [sp, #0]
 8032600:	4605      	mov	r5, r0
 8032602:	4614      	mov	r4, r2
 8032604:	b912      	cbnz	r2, 803260c <_mbrtowc_r+0x18>
 8032606:	4a07      	ldr	r2, [pc, #28]	@ (8032624 <_mbrtowc_r+0x30>)
 8032608:	2301      	movs	r3, #1
 803260a:	4621      	mov	r1, r4
 803260c:	47b8      	blx	r7
 803260e:	1c43      	adds	r3, r0, #1
 8032610:	bf01      	itttt	eq
 8032612:	2300      	moveq	r3, #0
 8032614:	6033      	streq	r3, [r6, #0]
 8032616:	238a      	moveq	r3, #138	@ 0x8a
 8032618:	602b      	streq	r3, [r5, #0]
 803261a:	b003      	add	sp, #12
 803261c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803261e:	bf00      	nop
 8032620:	200000e8 	.word	0x200000e8
 8032624:	0803818e 	.word	0x0803818e

08032628 <iswspace>:
 8032628:	2100      	movs	r1, #0
 803262a:	f000 b801 	b.w	8032630 <iswspace_l>
	...

08032630 <iswspace_l>:
 8032630:	28ff      	cmp	r0, #255	@ 0xff
 8032632:	bf9d      	ittte	ls
 8032634:	4b02      	ldrls	r3, [pc, #8]	@ (8032640 <iswspace_l+0x10>)
 8032636:	5c18      	ldrbls	r0, [r3, r0]
 8032638:	f000 0008 	andls.w	r0, r0, #8
 803263c:	2000      	movhi	r0, #0
 803263e:	4770      	bx	lr
 8032640:	0803854d 	.word	0x0803854d

08032644 <__register_exitproc>:
 8032644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8032648:	f8df a074 	ldr.w	sl, [pc, #116]	@ 80326c0 <__register_exitproc+0x7c>
 803264c:	4606      	mov	r6, r0
 803264e:	f8da 0000 	ldr.w	r0, [sl]
 8032652:	4698      	mov	r8, r3
 8032654:	460f      	mov	r7, r1
 8032656:	4691      	mov	r9, r2
 8032658:	f7f8 fc7b 	bl	802af52 <__retarget_lock_acquire_recursive>
 803265c:	4b16      	ldr	r3, [pc, #88]	@ (80326b8 <__register_exitproc+0x74>)
 803265e:	681c      	ldr	r4, [r3, #0]
 8032660:	b90c      	cbnz	r4, 8032666 <__register_exitproc+0x22>
 8032662:	4c16      	ldr	r4, [pc, #88]	@ (80326bc <__register_exitproc+0x78>)
 8032664:	601c      	str	r4, [r3, #0]
 8032666:	6865      	ldr	r5, [r4, #4]
 8032668:	f8da 0000 	ldr.w	r0, [sl]
 803266c:	2d1f      	cmp	r5, #31
 803266e:	dd05      	ble.n	803267c <__register_exitproc+0x38>
 8032670:	f7f8 fc71 	bl	802af56 <__retarget_lock_release_recursive>
 8032674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8032678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803267c:	b19e      	cbz	r6, 80326a6 <__register_exitproc+0x62>
 803267e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8032682:	2201      	movs	r2, #1
 8032684:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8032688:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 803268c:	40aa      	lsls	r2, r5
 803268e:	4313      	orrs	r3, r2
 8032690:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8032694:	2e02      	cmp	r6, #2
 8032696:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 803269a:	bf02      	ittt	eq
 803269c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 80326a0:	4313      	orreq	r3, r2
 80326a2:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 80326a6:	1c6b      	adds	r3, r5, #1
 80326a8:	3502      	adds	r5, #2
 80326aa:	6063      	str	r3, [r4, #4]
 80326ac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80326b0:	f7f8 fc51 	bl	802af56 <__retarget_lock_release_recursive>
 80326b4:	2000      	movs	r0, #0
 80326b6:	e7df      	b.n	8032678 <__register_exitproc+0x34>
 80326b8:	20018190 	.word	0x20018190
 80326bc:	200181c8 	.word	0x200181c8
 80326c0:	20000378 	.word	0x20000378
 80326c4:	00000000 	.word	0x00000000

080326c8 <nan>:
 80326c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80326d0 <nan+0x8>
 80326cc:	4770      	bx	lr
 80326ce:	bf00      	nop
 80326d0:	00000000 	.word	0x00000000
 80326d4:	7ff80000 	.word	0x7ff80000

080326d8 <nanf>:
 80326d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80326e0 <nanf+0x8>
 80326dc:	4770      	bx	lr
 80326de:	bf00      	nop
 80326e0:	7fc00000 	.word	0x7fc00000

080326e4 <_calloc_r>:
 80326e4:	b538      	push	{r3, r4, r5, lr}
 80326e6:	fba1 1502 	umull	r1, r5, r1, r2
 80326ea:	b935      	cbnz	r5, 80326fa <_calloc_r+0x16>
 80326ec:	f7f9 fc4e 	bl	802bf8c <_malloc_r>
 80326f0:	4604      	mov	r4, r0
 80326f2:	b938      	cbnz	r0, 8032704 <_calloc_r+0x20>
 80326f4:	2400      	movs	r4, #0
 80326f6:	4620      	mov	r0, r4
 80326f8:	bd38      	pop	{r3, r4, r5, pc}
 80326fa:	f7f8 fbf5 	bl	802aee8 <__errno>
 80326fe:	230c      	movs	r3, #12
 8032700:	6003      	str	r3, [r0, #0]
 8032702:	e7f7      	b.n	80326f4 <_calloc_r+0x10>
 8032704:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8032708:	f022 0203 	bic.w	r2, r2, #3
 803270c:	3a04      	subs	r2, #4
 803270e:	2a24      	cmp	r2, #36	@ 0x24
 8032710:	d819      	bhi.n	8032746 <_calloc_r+0x62>
 8032712:	2a13      	cmp	r2, #19
 8032714:	d915      	bls.n	8032742 <_calloc_r+0x5e>
 8032716:	2a1b      	cmp	r2, #27
 8032718:	e9c0 5500 	strd	r5, r5, [r0]
 803271c:	d806      	bhi.n	803272c <_calloc_r+0x48>
 803271e:	f100 0308 	add.w	r3, r0, #8
 8032722:	2200      	movs	r2, #0
 8032724:	e9c3 2200 	strd	r2, r2, [r3]
 8032728:	609a      	str	r2, [r3, #8]
 803272a:	e7e4      	b.n	80326f6 <_calloc_r+0x12>
 803272c:	2a24      	cmp	r2, #36	@ 0x24
 803272e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8032732:	bf11      	iteee	ne
 8032734:	f100 0310 	addne.w	r3, r0, #16
 8032738:	6105      	streq	r5, [r0, #16]
 803273a:	f100 0318 	addeq.w	r3, r0, #24
 803273e:	6145      	streq	r5, [r0, #20]
 8032740:	e7ef      	b.n	8032722 <_calloc_r+0x3e>
 8032742:	4603      	mov	r3, r0
 8032744:	e7ed      	b.n	8032722 <_calloc_r+0x3e>
 8032746:	4629      	mov	r1, r5
 8032748:	f7f7 f9ca 	bl	8029ae0 <memset>
 803274c:	e7d3      	b.n	80326f6 <_calloc_r+0x12>
	...

08032750 <__env_lock>:
 8032750:	4801      	ldr	r0, [pc, #4]	@ (8032758 <__env_lock+0x8>)
 8032752:	f7f8 bbfe 	b.w	802af52 <__retarget_lock_acquire_recursive>
 8032756:	bf00      	nop
 8032758:	20018189 	.word	0x20018189

0803275c <__env_unlock>:
 803275c:	4801      	ldr	r0, [pc, #4]	@ (8032764 <__env_unlock+0x8>)
 803275e:	f7f8 bbfa 	b.w	802af56 <__retarget_lock_release_recursive>
 8032762:	bf00      	nop
 8032764:	20018189 	.word	0x20018189

08032768 <rshift>:
 8032768:	6903      	ldr	r3, [r0, #16]
 803276a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 803276e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8032772:	ea4f 1261 	mov.w	r2, r1, asr #5
 8032776:	f100 0414 	add.w	r4, r0, #20
 803277a:	dd45      	ble.n	8032808 <rshift+0xa0>
 803277c:	f011 011f 	ands.w	r1, r1, #31
 8032780:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8032784:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8032788:	d10c      	bne.n	80327a4 <rshift+0x3c>
 803278a:	f100 0710 	add.w	r7, r0, #16
 803278e:	4629      	mov	r1, r5
 8032790:	42b1      	cmp	r1, r6
 8032792:	d334      	bcc.n	80327fe <rshift+0x96>
 8032794:	1a9b      	subs	r3, r3, r2
 8032796:	009b      	lsls	r3, r3, #2
 8032798:	1eea      	subs	r2, r5, #3
 803279a:	4296      	cmp	r6, r2
 803279c:	bf38      	it	cc
 803279e:	2300      	movcc	r3, #0
 80327a0:	4423      	add	r3, r4
 80327a2:	e015      	b.n	80327d0 <rshift+0x68>
 80327a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80327a8:	f1c1 0820 	rsb	r8, r1, #32
 80327ac:	40cf      	lsrs	r7, r1
 80327ae:	f105 0e04 	add.w	lr, r5, #4
 80327b2:	46a1      	mov	r9, r4
 80327b4:	4576      	cmp	r6, lr
 80327b6:	46f4      	mov	ip, lr
 80327b8:	d815      	bhi.n	80327e6 <rshift+0x7e>
 80327ba:	1a9a      	subs	r2, r3, r2
 80327bc:	0092      	lsls	r2, r2, #2
 80327be:	3a04      	subs	r2, #4
 80327c0:	3501      	adds	r5, #1
 80327c2:	42ae      	cmp	r6, r5
 80327c4:	bf38      	it	cc
 80327c6:	2200      	movcc	r2, #0
 80327c8:	18a3      	adds	r3, r4, r2
 80327ca:	50a7      	str	r7, [r4, r2]
 80327cc:	b107      	cbz	r7, 80327d0 <rshift+0x68>
 80327ce:	3304      	adds	r3, #4
 80327d0:	1b1a      	subs	r2, r3, r4
 80327d2:	42a3      	cmp	r3, r4
 80327d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80327d8:	bf08      	it	eq
 80327da:	2300      	moveq	r3, #0
 80327dc:	6102      	str	r2, [r0, #16]
 80327de:	bf08      	it	eq
 80327e0:	6143      	streq	r3, [r0, #20]
 80327e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80327e6:	f8dc c000 	ldr.w	ip, [ip]
 80327ea:	fa0c fc08 	lsl.w	ip, ip, r8
 80327ee:	ea4c 0707 	orr.w	r7, ip, r7
 80327f2:	f849 7b04 	str.w	r7, [r9], #4
 80327f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80327fa:	40cf      	lsrs	r7, r1
 80327fc:	e7da      	b.n	80327b4 <rshift+0x4c>
 80327fe:	f851 cb04 	ldr.w	ip, [r1], #4
 8032802:	f847 cf04 	str.w	ip, [r7, #4]!
 8032806:	e7c3      	b.n	8032790 <rshift+0x28>
 8032808:	4623      	mov	r3, r4
 803280a:	e7e1      	b.n	80327d0 <rshift+0x68>

0803280c <__hexdig_fun>:
 803280c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8032810:	2b09      	cmp	r3, #9
 8032812:	d802      	bhi.n	803281a <__hexdig_fun+0xe>
 8032814:	3820      	subs	r0, #32
 8032816:	b2c0      	uxtb	r0, r0
 8032818:	4770      	bx	lr
 803281a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 803281e:	2b05      	cmp	r3, #5
 8032820:	d801      	bhi.n	8032826 <__hexdig_fun+0x1a>
 8032822:	3847      	subs	r0, #71	@ 0x47
 8032824:	e7f7      	b.n	8032816 <__hexdig_fun+0xa>
 8032826:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 803282a:	2b05      	cmp	r3, #5
 803282c:	d801      	bhi.n	8032832 <__hexdig_fun+0x26>
 803282e:	3827      	subs	r0, #39	@ 0x27
 8032830:	e7f1      	b.n	8032816 <__hexdig_fun+0xa>
 8032832:	2000      	movs	r0, #0
 8032834:	4770      	bx	lr
	...

08032838 <__gethex>:
 8032838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803283c:	b085      	sub	sp, #20
 803283e:	468a      	mov	sl, r1
 8032840:	9302      	str	r3, [sp, #8]
 8032842:	680b      	ldr	r3, [r1, #0]
 8032844:	9001      	str	r0, [sp, #4]
 8032846:	4690      	mov	r8, r2
 8032848:	1c9c      	adds	r4, r3, #2
 803284a:	46a1      	mov	r9, r4
 803284c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8032850:	2830      	cmp	r0, #48	@ 0x30
 8032852:	d0fa      	beq.n	803284a <__gethex+0x12>
 8032854:	eba9 0303 	sub.w	r3, r9, r3
 8032858:	f1a3 0b02 	sub.w	fp, r3, #2
 803285c:	f7ff ffd6 	bl	803280c <__hexdig_fun>
 8032860:	4605      	mov	r5, r0
 8032862:	2800      	cmp	r0, #0
 8032864:	d168      	bne.n	8032938 <__gethex+0x100>
 8032866:	49a0      	ldr	r1, [pc, #640]	@ (8032ae8 <__gethex+0x2b0>)
 8032868:	2201      	movs	r2, #1
 803286a:	4648      	mov	r0, r9
 803286c:	f7f7 f96d 	bl	8029b4a <strncmp>
 8032870:	4607      	mov	r7, r0
 8032872:	2800      	cmp	r0, #0
 8032874:	d167      	bne.n	8032946 <__gethex+0x10e>
 8032876:	f899 0001 	ldrb.w	r0, [r9, #1]
 803287a:	4626      	mov	r6, r4
 803287c:	f7ff ffc6 	bl	803280c <__hexdig_fun>
 8032880:	2800      	cmp	r0, #0
 8032882:	d062      	beq.n	803294a <__gethex+0x112>
 8032884:	4623      	mov	r3, r4
 8032886:	7818      	ldrb	r0, [r3, #0]
 8032888:	2830      	cmp	r0, #48	@ 0x30
 803288a:	4699      	mov	r9, r3
 803288c:	f103 0301 	add.w	r3, r3, #1
 8032890:	d0f9      	beq.n	8032886 <__gethex+0x4e>
 8032892:	f7ff ffbb 	bl	803280c <__hexdig_fun>
 8032896:	fab0 f580 	clz	r5, r0
 803289a:	096d      	lsrs	r5, r5, #5
 803289c:	f04f 0b01 	mov.w	fp, #1
 80328a0:	464a      	mov	r2, r9
 80328a2:	4616      	mov	r6, r2
 80328a4:	3201      	adds	r2, #1
 80328a6:	7830      	ldrb	r0, [r6, #0]
 80328a8:	f7ff ffb0 	bl	803280c <__hexdig_fun>
 80328ac:	2800      	cmp	r0, #0
 80328ae:	d1f8      	bne.n	80328a2 <__gethex+0x6a>
 80328b0:	498d      	ldr	r1, [pc, #564]	@ (8032ae8 <__gethex+0x2b0>)
 80328b2:	2201      	movs	r2, #1
 80328b4:	4630      	mov	r0, r6
 80328b6:	f7f7 f948 	bl	8029b4a <strncmp>
 80328ba:	2800      	cmp	r0, #0
 80328bc:	d13f      	bne.n	803293e <__gethex+0x106>
 80328be:	b944      	cbnz	r4, 80328d2 <__gethex+0x9a>
 80328c0:	1c74      	adds	r4, r6, #1
 80328c2:	4622      	mov	r2, r4
 80328c4:	4616      	mov	r6, r2
 80328c6:	3201      	adds	r2, #1
 80328c8:	7830      	ldrb	r0, [r6, #0]
 80328ca:	f7ff ff9f 	bl	803280c <__hexdig_fun>
 80328ce:	2800      	cmp	r0, #0
 80328d0:	d1f8      	bne.n	80328c4 <__gethex+0x8c>
 80328d2:	1ba4      	subs	r4, r4, r6
 80328d4:	00a7      	lsls	r7, r4, #2
 80328d6:	7833      	ldrb	r3, [r6, #0]
 80328d8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80328dc:	2b50      	cmp	r3, #80	@ 0x50
 80328de:	d13e      	bne.n	803295e <__gethex+0x126>
 80328e0:	7873      	ldrb	r3, [r6, #1]
 80328e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80328e4:	d033      	beq.n	803294e <__gethex+0x116>
 80328e6:	2b2d      	cmp	r3, #45	@ 0x2d
 80328e8:	d034      	beq.n	8032954 <__gethex+0x11c>
 80328ea:	1c71      	adds	r1, r6, #1
 80328ec:	2400      	movs	r4, #0
 80328ee:	7808      	ldrb	r0, [r1, #0]
 80328f0:	f7ff ff8c 	bl	803280c <__hexdig_fun>
 80328f4:	1e43      	subs	r3, r0, #1
 80328f6:	b2db      	uxtb	r3, r3
 80328f8:	2b18      	cmp	r3, #24
 80328fa:	d830      	bhi.n	803295e <__gethex+0x126>
 80328fc:	f1a0 0210 	sub.w	r2, r0, #16
 8032900:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8032904:	f7ff ff82 	bl	803280c <__hexdig_fun>
 8032908:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 803290c:	fa5f fc8c 	uxtb.w	ip, ip
 8032910:	f1bc 0f18 	cmp.w	ip, #24
 8032914:	f04f 030a 	mov.w	r3, #10
 8032918:	d91e      	bls.n	8032958 <__gethex+0x120>
 803291a:	b104      	cbz	r4, 803291e <__gethex+0xe6>
 803291c:	4252      	negs	r2, r2
 803291e:	4417      	add	r7, r2
 8032920:	f8ca 1000 	str.w	r1, [sl]
 8032924:	b1ed      	cbz	r5, 8032962 <__gethex+0x12a>
 8032926:	f1bb 0f00 	cmp.w	fp, #0
 803292a:	bf0c      	ite	eq
 803292c:	2506      	moveq	r5, #6
 803292e:	2500      	movne	r5, #0
 8032930:	4628      	mov	r0, r5
 8032932:	b005      	add	sp, #20
 8032934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032938:	2500      	movs	r5, #0
 803293a:	462c      	mov	r4, r5
 803293c:	e7b0      	b.n	80328a0 <__gethex+0x68>
 803293e:	2c00      	cmp	r4, #0
 8032940:	d1c7      	bne.n	80328d2 <__gethex+0x9a>
 8032942:	4627      	mov	r7, r4
 8032944:	e7c7      	b.n	80328d6 <__gethex+0x9e>
 8032946:	464e      	mov	r6, r9
 8032948:	462f      	mov	r7, r5
 803294a:	2501      	movs	r5, #1
 803294c:	e7c3      	b.n	80328d6 <__gethex+0x9e>
 803294e:	2400      	movs	r4, #0
 8032950:	1cb1      	adds	r1, r6, #2
 8032952:	e7cc      	b.n	80328ee <__gethex+0xb6>
 8032954:	2401      	movs	r4, #1
 8032956:	e7fb      	b.n	8032950 <__gethex+0x118>
 8032958:	fb03 0002 	mla	r0, r3, r2, r0
 803295c:	e7ce      	b.n	80328fc <__gethex+0xc4>
 803295e:	4631      	mov	r1, r6
 8032960:	e7de      	b.n	8032920 <__gethex+0xe8>
 8032962:	eba6 0309 	sub.w	r3, r6, r9
 8032966:	3b01      	subs	r3, #1
 8032968:	4629      	mov	r1, r5
 803296a:	2b07      	cmp	r3, #7
 803296c:	dc0a      	bgt.n	8032984 <__gethex+0x14c>
 803296e:	9801      	ldr	r0, [sp, #4]
 8032970:	f7fd fe22 	bl	80305b8 <_Balloc>
 8032974:	4604      	mov	r4, r0
 8032976:	b940      	cbnz	r0, 803298a <__gethex+0x152>
 8032978:	4b5c      	ldr	r3, [pc, #368]	@ (8032aec <__gethex+0x2b4>)
 803297a:	4602      	mov	r2, r0
 803297c:	21e4      	movs	r1, #228	@ 0xe4
 803297e:	485c      	ldr	r0, [pc, #368]	@ (8032af0 <__gethex+0x2b8>)
 8032980:	f7f4 fb5c 	bl	802703c <__assert_func>
 8032984:	3101      	adds	r1, #1
 8032986:	105b      	asrs	r3, r3, #1
 8032988:	e7ef      	b.n	803296a <__gethex+0x132>
 803298a:	f100 0a14 	add.w	sl, r0, #20
 803298e:	2300      	movs	r3, #0
 8032990:	4655      	mov	r5, sl
 8032992:	469b      	mov	fp, r3
 8032994:	45b1      	cmp	r9, r6
 8032996:	d337      	bcc.n	8032a08 <__gethex+0x1d0>
 8032998:	f845 bb04 	str.w	fp, [r5], #4
 803299c:	eba5 050a 	sub.w	r5, r5, sl
 80329a0:	10ad      	asrs	r5, r5, #2
 80329a2:	6125      	str	r5, [r4, #16]
 80329a4:	4658      	mov	r0, fp
 80329a6:	f7fd fec5 	bl	8030734 <__hi0bits>
 80329aa:	016d      	lsls	r5, r5, #5
 80329ac:	f8d8 6000 	ldr.w	r6, [r8]
 80329b0:	1a2d      	subs	r5, r5, r0
 80329b2:	42b5      	cmp	r5, r6
 80329b4:	dd54      	ble.n	8032a60 <__gethex+0x228>
 80329b6:	1bad      	subs	r5, r5, r6
 80329b8:	4629      	mov	r1, r5
 80329ba:	4620      	mov	r0, r4
 80329bc:	f7fe fa3f 	bl	8030e3e <__any_on>
 80329c0:	4681      	mov	r9, r0
 80329c2:	b178      	cbz	r0, 80329e4 <__gethex+0x1ac>
 80329c4:	1e6b      	subs	r3, r5, #1
 80329c6:	1159      	asrs	r1, r3, #5
 80329c8:	f003 021f 	and.w	r2, r3, #31
 80329cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80329d0:	f04f 0901 	mov.w	r9, #1
 80329d4:	fa09 f202 	lsl.w	r2, r9, r2
 80329d8:	420a      	tst	r2, r1
 80329da:	d003      	beq.n	80329e4 <__gethex+0x1ac>
 80329dc:	454b      	cmp	r3, r9
 80329de:	dc36      	bgt.n	8032a4e <__gethex+0x216>
 80329e0:	f04f 0902 	mov.w	r9, #2
 80329e4:	4629      	mov	r1, r5
 80329e6:	4620      	mov	r0, r4
 80329e8:	f7ff febe 	bl	8032768 <rshift>
 80329ec:	442f      	add	r7, r5
 80329ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80329f2:	42bb      	cmp	r3, r7
 80329f4:	da42      	bge.n	8032a7c <__gethex+0x244>
 80329f6:	9801      	ldr	r0, [sp, #4]
 80329f8:	4621      	mov	r1, r4
 80329fa:	f7fd fe02 	bl	8030602 <_Bfree>
 80329fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8032a00:	2300      	movs	r3, #0
 8032a02:	6013      	str	r3, [r2, #0]
 8032a04:	25a3      	movs	r5, #163	@ 0xa3
 8032a06:	e793      	b.n	8032930 <__gethex+0xf8>
 8032a08:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8032a0c:	2a2e      	cmp	r2, #46	@ 0x2e
 8032a0e:	d012      	beq.n	8032a36 <__gethex+0x1fe>
 8032a10:	2b20      	cmp	r3, #32
 8032a12:	d104      	bne.n	8032a1e <__gethex+0x1e6>
 8032a14:	f845 bb04 	str.w	fp, [r5], #4
 8032a18:	f04f 0b00 	mov.w	fp, #0
 8032a1c:	465b      	mov	r3, fp
 8032a1e:	7830      	ldrb	r0, [r6, #0]
 8032a20:	9303      	str	r3, [sp, #12]
 8032a22:	f7ff fef3 	bl	803280c <__hexdig_fun>
 8032a26:	9b03      	ldr	r3, [sp, #12]
 8032a28:	f000 000f 	and.w	r0, r0, #15
 8032a2c:	4098      	lsls	r0, r3
 8032a2e:	ea4b 0b00 	orr.w	fp, fp, r0
 8032a32:	3304      	adds	r3, #4
 8032a34:	e7ae      	b.n	8032994 <__gethex+0x15c>
 8032a36:	45b1      	cmp	r9, r6
 8032a38:	d8ea      	bhi.n	8032a10 <__gethex+0x1d8>
 8032a3a:	492b      	ldr	r1, [pc, #172]	@ (8032ae8 <__gethex+0x2b0>)
 8032a3c:	9303      	str	r3, [sp, #12]
 8032a3e:	2201      	movs	r2, #1
 8032a40:	4630      	mov	r0, r6
 8032a42:	f7f7 f882 	bl	8029b4a <strncmp>
 8032a46:	9b03      	ldr	r3, [sp, #12]
 8032a48:	2800      	cmp	r0, #0
 8032a4a:	d1e1      	bne.n	8032a10 <__gethex+0x1d8>
 8032a4c:	e7a2      	b.n	8032994 <__gethex+0x15c>
 8032a4e:	1ea9      	subs	r1, r5, #2
 8032a50:	4620      	mov	r0, r4
 8032a52:	f7fe f9f4 	bl	8030e3e <__any_on>
 8032a56:	2800      	cmp	r0, #0
 8032a58:	d0c2      	beq.n	80329e0 <__gethex+0x1a8>
 8032a5a:	f04f 0903 	mov.w	r9, #3
 8032a5e:	e7c1      	b.n	80329e4 <__gethex+0x1ac>
 8032a60:	da09      	bge.n	8032a76 <__gethex+0x23e>
 8032a62:	1b75      	subs	r5, r6, r5
 8032a64:	4621      	mov	r1, r4
 8032a66:	9801      	ldr	r0, [sp, #4]
 8032a68:	462a      	mov	r2, r5
 8032a6a:	f7fd ffaf 	bl	80309cc <__lshift>
 8032a6e:	1b7f      	subs	r7, r7, r5
 8032a70:	4604      	mov	r4, r0
 8032a72:	f100 0a14 	add.w	sl, r0, #20
 8032a76:	f04f 0900 	mov.w	r9, #0
 8032a7a:	e7b8      	b.n	80329ee <__gethex+0x1b6>
 8032a7c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8032a80:	42bd      	cmp	r5, r7
 8032a82:	dd6f      	ble.n	8032b64 <__gethex+0x32c>
 8032a84:	1bed      	subs	r5, r5, r7
 8032a86:	42ae      	cmp	r6, r5
 8032a88:	dc34      	bgt.n	8032af4 <__gethex+0x2bc>
 8032a8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8032a8e:	2b02      	cmp	r3, #2
 8032a90:	d022      	beq.n	8032ad8 <__gethex+0x2a0>
 8032a92:	2b03      	cmp	r3, #3
 8032a94:	d024      	beq.n	8032ae0 <__gethex+0x2a8>
 8032a96:	2b01      	cmp	r3, #1
 8032a98:	d115      	bne.n	8032ac6 <__gethex+0x28e>
 8032a9a:	42ae      	cmp	r6, r5
 8032a9c:	d113      	bne.n	8032ac6 <__gethex+0x28e>
 8032a9e:	2e01      	cmp	r6, #1
 8032aa0:	d10b      	bne.n	8032aba <__gethex+0x282>
 8032aa2:	9a02      	ldr	r2, [sp, #8]
 8032aa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8032aa8:	6013      	str	r3, [r2, #0]
 8032aaa:	2301      	movs	r3, #1
 8032aac:	6123      	str	r3, [r4, #16]
 8032aae:	f8ca 3000 	str.w	r3, [sl]
 8032ab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8032ab4:	2562      	movs	r5, #98	@ 0x62
 8032ab6:	601c      	str	r4, [r3, #0]
 8032ab8:	e73a      	b.n	8032930 <__gethex+0xf8>
 8032aba:	1e71      	subs	r1, r6, #1
 8032abc:	4620      	mov	r0, r4
 8032abe:	f7fe f9be 	bl	8030e3e <__any_on>
 8032ac2:	2800      	cmp	r0, #0
 8032ac4:	d1ed      	bne.n	8032aa2 <__gethex+0x26a>
 8032ac6:	9801      	ldr	r0, [sp, #4]
 8032ac8:	4621      	mov	r1, r4
 8032aca:	f7fd fd9a 	bl	8030602 <_Bfree>
 8032ace:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8032ad0:	2300      	movs	r3, #0
 8032ad2:	6013      	str	r3, [r2, #0]
 8032ad4:	2550      	movs	r5, #80	@ 0x50
 8032ad6:	e72b      	b.n	8032930 <__gethex+0xf8>
 8032ad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8032ada:	2b00      	cmp	r3, #0
 8032adc:	d1f3      	bne.n	8032ac6 <__gethex+0x28e>
 8032ade:	e7e0      	b.n	8032aa2 <__gethex+0x26a>
 8032ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8032ae2:	2b00      	cmp	r3, #0
 8032ae4:	d1dd      	bne.n	8032aa2 <__gethex+0x26a>
 8032ae6:	e7ee      	b.n	8032ac6 <__gethex+0x28e>
 8032ae8:	08038322 	.word	0x08038322
 8032aec:	0803865a 	.word	0x0803865a
 8032af0:	080388f8 	.word	0x080388f8
 8032af4:	1e6f      	subs	r7, r5, #1
 8032af6:	f1b9 0f00 	cmp.w	r9, #0
 8032afa:	d130      	bne.n	8032b5e <__gethex+0x326>
 8032afc:	b127      	cbz	r7, 8032b08 <__gethex+0x2d0>
 8032afe:	4639      	mov	r1, r7
 8032b00:	4620      	mov	r0, r4
 8032b02:	f7fe f99c 	bl	8030e3e <__any_on>
 8032b06:	4681      	mov	r9, r0
 8032b08:	117a      	asrs	r2, r7, #5
 8032b0a:	2301      	movs	r3, #1
 8032b0c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8032b10:	f007 071f 	and.w	r7, r7, #31
 8032b14:	40bb      	lsls	r3, r7
 8032b16:	4213      	tst	r3, r2
 8032b18:	4629      	mov	r1, r5
 8032b1a:	4620      	mov	r0, r4
 8032b1c:	bf18      	it	ne
 8032b1e:	f049 0902 	orrne.w	r9, r9, #2
 8032b22:	f7ff fe21 	bl	8032768 <rshift>
 8032b26:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8032b2a:	1b76      	subs	r6, r6, r5
 8032b2c:	2502      	movs	r5, #2
 8032b2e:	f1b9 0f00 	cmp.w	r9, #0
 8032b32:	d047      	beq.n	8032bc4 <__gethex+0x38c>
 8032b34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8032b38:	2b02      	cmp	r3, #2
 8032b3a:	d015      	beq.n	8032b68 <__gethex+0x330>
 8032b3c:	2b03      	cmp	r3, #3
 8032b3e:	d017      	beq.n	8032b70 <__gethex+0x338>
 8032b40:	2b01      	cmp	r3, #1
 8032b42:	d109      	bne.n	8032b58 <__gethex+0x320>
 8032b44:	f019 0f02 	tst.w	r9, #2
 8032b48:	d006      	beq.n	8032b58 <__gethex+0x320>
 8032b4a:	f8da 3000 	ldr.w	r3, [sl]
 8032b4e:	ea49 0903 	orr.w	r9, r9, r3
 8032b52:	f019 0f01 	tst.w	r9, #1
 8032b56:	d10e      	bne.n	8032b76 <__gethex+0x33e>
 8032b58:	f045 0510 	orr.w	r5, r5, #16
 8032b5c:	e032      	b.n	8032bc4 <__gethex+0x38c>
 8032b5e:	f04f 0901 	mov.w	r9, #1
 8032b62:	e7d1      	b.n	8032b08 <__gethex+0x2d0>
 8032b64:	2501      	movs	r5, #1
 8032b66:	e7e2      	b.n	8032b2e <__gethex+0x2f6>
 8032b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8032b6a:	f1c3 0301 	rsb	r3, r3, #1
 8032b6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8032b70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8032b72:	2b00      	cmp	r3, #0
 8032b74:	d0f0      	beq.n	8032b58 <__gethex+0x320>
 8032b76:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8032b7a:	f104 0314 	add.w	r3, r4, #20
 8032b7e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8032b82:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8032b86:	f04f 0c00 	mov.w	ip, #0
 8032b8a:	4618      	mov	r0, r3
 8032b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8032b90:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8032b94:	d01b      	beq.n	8032bce <__gethex+0x396>
 8032b96:	3201      	adds	r2, #1
 8032b98:	6002      	str	r2, [r0, #0]
 8032b9a:	2d02      	cmp	r5, #2
 8032b9c:	f104 0314 	add.w	r3, r4, #20
 8032ba0:	d13c      	bne.n	8032c1c <__gethex+0x3e4>
 8032ba2:	f8d8 2000 	ldr.w	r2, [r8]
 8032ba6:	3a01      	subs	r2, #1
 8032ba8:	42b2      	cmp	r2, r6
 8032baa:	d109      	bne.n	8032bc0 <__gethex+0x388>
 8032bac:	1171      	asrs	r1, r6, #5
 8032bae:	2201      	movs	r2, #1
 8032bb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8032bb4:	f006 061f 	and.w	r6, r6, #31
 8032bb8:	fa02 f606 	lsl.w	r6, r2, r6
 8032bbc:	421e      	tst	r6, r3
 8032bbe:	d13a      	bne.n	8032c36 <__gethex+0x3fe>
 8032bc0:	f045 0520 	orr.w	r5, r5, #32
 8032bc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8032bc6:	601c      	str	r4, [r3, #0]
 8032bc8:	9b02      	ldr	r3, [sp, #8]
 8032bca:	601f      	str	r7, [r3, #0]
 8032bcc:	e6b0      	b.n	8032930 <__gethex+0xf8>
 8032bce:	4299      	cmp	r1, r3
 8032bd0:	f843 cc04 	str.w	ip, [r3, #-4]
 8032bd4:	d8d9      	bhi.n	8032b8a <__gethex+0x352>
 8032bd6:	68a3      	ldr	r3, [r4, #8]
 8032bd8:	459b      	cmp	fp, r3
 8032bda:	db17      	blt.n	8032c0c <__gethex+0x3d4>
 8032bdc:	6861      	ldr	r1, [r4, #4]
 8032bde:	9801      	ldr	r0, [sp, #4]
 8032be0:	3101      	adds	r1, #1
 8032be2:	f7fd fce9 	bl	80305b8 <_Balloc>
 8032be6:	4681      	mov	r9, r0
 8032be8:	b918      	cbnz	r0, 8032bf2 <__gethex+0x3ba>
 8032bea:	4b1a      	ldr	r3, [pc, #104]	@ (8032c54 <__gethex+0x41c>)
 8032bec:	4602      	mov	r2, r0
 8032bee:	2184      	movs	r1, #132	@ 0x84
 8032bf0:	e6c5      	b.n	803297e <__gethex+0x146>
 8032bf2:	6922      	ldr	r2, [r4, #16]
 8032bf4:	3202      	adds	r2, #2
 8032bf6:	f104 010c 	add.w	r1, r4, #12
 8032bfa:	0092      	lsls	r2, r2, #2
 8032bfc:	300c      	adds	r0, #12
 8032bfe:	f7f8 f9ab 	bl	802af58 <memcpy>
 8032c02:	4621      	mov	r1, r4
 8032c04:	9801      	ldr	r0, [sp, #4]
 8032c06:	f7fd fcfc 	bl	8030602 <_Bfree>
 8032c0a:	464c      	mov	r4, r9
 8032c0c:	6923      	ldr	r3, [r4, #16]
 8032c0e:	1c5a      	adds	r2, r3, #1
 8032c10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8032c14:	6122      	str	r2, [r4, #16]
 8032c16:	2201      	movs	r2, #1
 8032c18:	615a      	str	r2, [r3, #20]
 8032c1a:	e7be      	b.n	8032b9a <__gethex+0x362>
 8032c1c:	6922      	ldr	r2, [r4, #16]
 8032c1e:	455a      	cmp	r2, fp
 8032c20:	dd0b      	ble.n	8032c3a <__gethex+0x402>
 8032c22:	2101      	movs	r1, #1
 8032c24:	4620      	mov	r0, r4
 8032c26:	f7ff fd9f 	bl	8032768 <rshift>
 8032c2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8032c2e:	3701      	adds	r7, #1
 8032c30:	42bb      	cmp	r3, r7
 8032c32:	f6ff aee0 	blt.w	80329f6 <__gethex+0x1be>
 8032c36:	2501      	movs	r5, #1
 8032c38:	e7c2      	b.n	8032bc0 <__gethex+0x388>
 8032c3a:	f016 061f 	ands.w	r6, r6, #31
 8032c3e:	d0fa      	beq.n	8032c36 <__gethex+0x3fe>
 8032c40:	4453      	add	r3, sl
 8032c42:	f1c6 0620 	rsb	r6, r6, #32
 8032c46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8032c4a:	f7fd fd73 	bl	8030734 <__hi0bits>
 8032c4e:	42b0      	cmp	r0, r6
 8032c50:	dbe7      	blt.n	8032c22 <__gethex+0x3ea>
 8032c52:	e7f0      	b.n	8032c36 <__gethex+0x3fe>
 8032c54:	0803865a 	.word	0x0803865a

08032c58 <L_shift>:
 8032c58:	f1c2 0208 	rsb	r2, r2, #8
 8032c5c:	0092      	lsls	r2, r2, #2
 8032c5e:	b570      	push	{r4, r5, r6, lr}
 8032c60:	f1c2 0620 	rsb	r6, r2, #32
 8032c64:	6843      	ldr	r3, [r0, #4]
 8032c66:	6804      	ldr	r4, [r0, #0]
 8032c68:	fa03 f506 	lsl.w	r5, r3, r6
 8032c6c:	432c      	orrs	r4, r5
 8032c6e:	40d3      	lsrs	r3, r2
 8032c70:	6004      	str	r4, [r0, #0]
 8032c72:	f840 3f04 	str.w	r3, [r0, #4]!
 8032c76:	4288      	cmp	r0, r1
 8032c78:	d3f4      	bcc.n	8032c64 <L_shift+0xc>
 8032c7a:	bd70      	pop	{r4, r5, r6, pc}

08032c7c <__match>:
 8032c7c:	b530      	push	{r4, r5, lr}
 8032c7e:	6803      	ldr	r3, [r0, #0]
 8032c80:	3301      	adds	r3, #1
 8032c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8032c86:	b914      	cbnz	r4, 8032c8e <__match+0x12>
 8032c88:	6003      	str	r3, [r0, #0]
 8032c8a:	2001      	movs	r0, #1
 8032c8c:	bd30      	pop	{r4, r5, pc}
 8032c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032c92:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8032c96:	2d19      	cmp	r5, #25
 8032c98:	bf98      	it	ls
 8032c9a:	3220      	addls	r2, #32
 8032c9c:	42a2      	cmp	r2, r4
 8032c9e:	d0f0      	beq.n	8032c82 <__match+0x6>
 8032ca0:	2000      	movs	r0, #0
 8032ca2:	e7f3      	b.n	8032c8c <__match+0x10>

08032ca4 <__hexnan>:
 8032ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032ca8:	680b      	ldr	r3, [r1, #0]
 8032caa:	6801      	ldr	r1, [r0, #0]
 8032cac:	115e      	asrs	r6, r3, #5
 8032cae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8032cb2:	f013 031f 	ands.w	r3, r3, #31
 8032cb6:	b087      	sub	sp, #28
 8032cb8:	bf18      	it	ne
 8032cba:	3604      	addne	r6, #4
 8032cbc:	2500      	movs	r5, #0
 8032cbe:	1f37      	subs	r7, r6, #4
 8032cc0:	4682      	mov	sl, r0
 8032cc2:	4690      	mov	r8, r2
 8032cc4:	9301      	str	r3, [sp, #4]
 8032cc6:	f846 5c04 	str.w	r5, [r6, #-4]
 8032cca:	46b9      	mov	r9, r7
 8032ccc:	463c      	mov	r4, r7
 8032cce:	9502      	str	r5, [sp, #8]
 8032cd0:	46ab      	mov	fp, r5
 8032cd2:	784a      	ldrb	r2, [r1, #1]
 8032cd4:	1c4b      	adds	r3, r1, #1
 8032cd6:	9303      	str	r3, [sp, #12]
 8032cd8:	b342      	cbz	r2, 8032d2c <__hexnan+0x88>
 8032cda:	4610      	mov	r0, r2
 8032cdc:	9105      	str	r1, [sp, #20]
 8032cde:	9204      	str	r2, [sp, #16]
 8032ce0:	f7ff fd94 	bl	803280c <__hexdig_fun>
 8032ce4:	2800      	cmp	r0, #0
 8032ce6:	d151      	bne.n	8032d8c <__hexnan+0xe8>
 8032ce8:	9a04      	ldr	r2, [sp, #16]
 8032cea:	9905      	ldr	r1, [sp, #20]
 8032cec:	2a20      	cmp	r2, #32
 8032cee:	d818      	bhi.n	8032d22 <__hexnan+0x7e>
 8032cf0:	9b02      	ldr	r3, [sp, #8]
 8032cf2:	459b      	cmp	fp, r3
 8032cf4:	dd13      	ble.n	8032d1e <__hexnan+0x7a>
 8032cf6:	454c      	cmp	r4, r9
 8032cf8:	d206      	bcs.n	8032d08 <__hexnan+0x64>
 8032cfa:	2d07      	cmp	r5, #7
 8032cfc:	dc04      	bgt.n	8032d08 <__hexnan+0x64>
 8032cfe:	462a      	mov	r2, r5
 8032d00:	4649      	mov	r1, r9
 8032d02:	4620      	mov	r0, r4
 8032d04:	f7ff ffa8 	bl	8032c58 <L_shift>
 8032d08:	4544      	cmp	r4, r8
 8032d0a:	d952      	bls.n	8032db2 <__hexnan+0x10e>
 8032d0c:	2300      	movs	r3, #0
 8032d0e:	f1a4 0904 	sub.w	r9, r4, #4
 8032d12:	f844 3c04 	str.w	r3, [r4, #-4]
 8032d16:	f8cd b008 	str.w	fp, [sp, #8]
 8032d1a:	464c      	mov	r4, r9
 8032d1c:	461d      	mov	r5, r3
 8032d1e:	9903      	ldr	r1, [sp, #12]
 8032d20:	e7d7      	b.n	8032cd2 <__hexnan+0x2e>
 8032d22:	2a29      	cmp	r2, #41	@ 0x29
 8032d24:	d157      	bne.n	8032dd6 <__hexnan+0x132>
 8032d26:	3102      	adds	r1, #2
 8032d28:	f8ca 1000 	str.w	r1, [sl]
 8032d2c:	f1bb 0f00 	cmp.w	fp, #0
 8032d30:	d051      	beq.n	8032dd6 <__hexnan+0x132>
 8032d32:	454c      	cmp	r4, r9
 8032d34:	d206      	bcs.n	8032d44 <__hexnan+0xa0>
 8032d36:	2d07      	cmp	r5, #7
 8032d38:	dc04      	bgt.n	8032d44 <__hexnan+0xa0>
 8032d3a:	462a      	mov	r2, r5
 8032d3c:	4649      	mov	r1, r9
 8032d3e:	4620      	mov	r0, r4
 8032d40:	f7ff ff8a 	bl	8032c58 <L_shift>
 8032d44:	4544      	cmp	r4, r8
 8032d46:	d936      	bls.n	8032db6 <__hexnan+0x112>
 8032d48:	f1a8 0204 	sub.w	r2, r8, #4
 8032d4c:	4623      	mov	r3, r4
 8032d4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8032d52:	f842 1f04 	str.w	r1, [r2, #4]!
 8032d56:	429f      	cmp	r7, r3
 8032d58:	d2f9      	bcs.n	8032d4e <__hexnan+0xaa>
 8032d5a:	1b3b      	subs	r3, r7, r4
 8032d5c:	f023 0303 	bic.w	r3, r3, #3
 8032d60:	3304      	adds	r3, #4
 8032d62:	3401      	adds	r4, #1
 8032d64:	3e03      	subs	r6, #3
 8032d66:	42b4      	cmp	r4, r6
 8032d68:	bf88      	it	hi
 8032d6a:	2304      	movhi	r3, #4
 8032d6c:	4443      	add	r3, r8
 8032d6e:	2200      	movs	r2, #0
 8032d70:	f843 2b04 	str.w	r2, [r3], #4
 8032d74:	429f      	cmp	r7, r3
 8032d76:	d2fb      	bcs.n	8032d70 <__hexnan+0xcc>
 8032d78:	683b      	ldr	r3, [r7, #0]
 8032d7a:	b91b      	cbnz	r3, 8032d84 <__hexnan+0xe0>
 8032d7c:	4547      	cmp	r7, r8
 8032d7e:	d128      	bne.n	8032dd2 <__hexnan+0x12e>
 8032d80:	2301      	movs	r3, #1
 8032d82:	603b      	str	r3, [r7, #0]
 8032d84:	2005      	movs	r0, #5
 8032d86:	b007      	add	sp, #28
 8032d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032d8c:	3501      	adds	r5, #1
 8032d8e:	2d08      	cmp	r5, #8
 8032d90:	f10b 0b01 	add.w	fp, fp, #1
 8032d94:	dd06      	ble.n	8032da4 <__hexnan+0x100>
 8032d96:	4544      	cmp	r4, r8
 8032d98:	d9c1      	bls.n	8032d1e <__hexnan+0x7a>
 8032d9a:	2300      	movs	r3, #0
 8032d9c:	f844 3c04 	str.w	r3, [r4, #-4]
 8032da0:	2501      	movs	r5, #1
 8032da2:	3c04      	subs	r4, #4
 8032da4:	6822      	ldr	r2, [r4, #0]
 8032da6:	f000 000f 	and.w	r0, r0, #15
 8032daa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8032dae:	6020      	str	r0, [r4, #0]
 8032db0:	e7b5      	b.n	8032d1e <__hexnan+0x7a>
 8032db2:	2508      	movs	r5, #8
 8032db4:	e7b3      	b.n	8032d1e <__hexnan+0x7a>
 8032db6:	9b01      	ldr	r3, [sp, #4]
 8032db8:	2b00      	cmp	r3, #0
 8032dba:	d0dd      	beq.n	8032d78 <__hexnan+0xd4>
 8032dbc:	f1c3 0320 	rsb	r3, r3, #32
 8032dc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8032dc4:	40da      	lsrs	r2, r3
 8032dc6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8032dca:	4013      	ands	r3, r2
 8032dcc:	f846 3c04 	str.w	r3, [r6, #-4]
 8032dd0:	e7d2      	b.n	8032d78 <__hexnan+0xd4>
 8032dd2:	3f04      	subs	r7, #4
 8032dd4:	e7d0      	b.n	8032d78 <__hexnan+0xd4>
 8032dd6:	2004      	movs	r0, #4
 8032dd8:	e7d5      	b.n	8032d86 <__hexnan+0xe2>
	...

08032ddc <_init>:
 8032ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8032dde:	bf00      	nop
 8032de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8032de2:	bc08      	pop	{r3}
 8032de4:	469e      	mov	lr, r3
 8032de6:	4770      	bx	lr

08032de8 <_fini>:
 8032de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8032dea:	bf00      	nop
 8032dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8032dee:	bc08      	pop	{r3}
 8032df0:	469e      	mov	lr, r3
 8032df2:	4770      	bx	lr
