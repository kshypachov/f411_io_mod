
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026264  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000068e0  08036408  08036408  00027408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803cce8  0803cce8  0002e870  2**0
                  CONTENTS
  4 .ARM          00000008  0803cce8  0803cce8  0002dce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803ccf0  0803ccf0  0002e870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803ccf0  0803ccf0  0002dcf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803ccf8  0803ccf8  0002dcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000870  20000000  0803ccfc  0002e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019a48  20000870  0803d56c  0002e870  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2001a2b8  0803d56c  0002f2b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002e870  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005c79d  00000000  00000000  0002e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008375  00000000  00000000  0008b03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003198  00000000  00000000  000933b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00003160  00000000  00000000  00096550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bf5  00000000  00000000  000996b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004c1cb  00000000  00000000  000bd2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6df0  00000000  00000000  00109470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c0260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c1f0  00000000  00000000  001c02a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00028c41  00000000  00000000  001cc494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001f50d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	20000870 	.word	0x20000870
 80101bc:	00000000 	.word	0x00000000
 80101c0:	080363ec 	.word	0x080363ec

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	20000874 	.word	0x20000874
 80101dc:	080363ec 	.word	0x080363ec

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80110dc:	b500      	push	{lr}
 80110de:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80110e0:	2300      	movs	r3, #0
 80110e2:	9300      	str	r3, [sp, #0]
 80110e4:	9301      	str	r3, [sp, #4]
 80110e6:	9302      	str	r3, [sp, #8]
 80110e8:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80110ea:	4815      	ldr	r0, [pc, #84]	@ (8011140 <MX_ADC1_Init+0x64>)
 80110ec:	4a15      	ldr	r2, [pc, #84]	@ (8011144 <MX_ADC1_Init+0x68>)
 80110ee:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80110f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80110f4:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80110f6:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80110f8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80110fa:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80110fc:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011100:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8011102:	4a11      	ldr	r2, [pc, #68]	@ (8011148 <MX_ADC1_Init+0x6c>)
 8011104:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8011106:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8011108:	2201      	movs	r2, #1
 801110a:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801110c:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8011110:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8011112:	f005 fb2f 	bl	8016774 <HAL_ADC_Init>
 8011116:	b968      	cbnz	r0, 8011134 <MX_ADC1_Init+0x58>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8011118:	2312      	movs	r3, #18
 801111a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 801111c:	2301      	movs	r3, #1
 801111e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8011120:	2300      	movs	r3, #0
 8011122:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011124:	4669      	mov	r1, sp
 8011126:	4806      	ldr	r0, [pc, #24]	@ (8011140 <MX_ADC1_Init+0x64>)
 8011128:	f005 fb50 	bl	80167cc <HAL_ADC_ConfigChannel>
 801112c:	b928      	cbnz	r0, 801113a <MX_ADC1_Init+0x5e>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801112e:	b005      	add	sp, #20
 8011130:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8011134:	f001 f902 	bl	801233c <Error_Handler>
 8011138:	e7ee      	b.n	8011118 <MX_ADC1_Init+0x3c>
    Error_Handler();
 801113a:	f001 f8ff 	bl	801233c <Error_Handler>
}
 801113e:	e7f6      	b.n	801112e <MX_ADC1_Init+0x52>
 8011140:	2000088c 	.word	0x2000088c
 8011144:	40012000 	.word	0x40012000
 8011148:	0f000001 	.word	0x0f000001

0801114c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC1)
 801114c:	6802      	ldr	r2, [r0, #0]
 801114e:	4b09      	ldr	r3, [pc, #36]	@ (8011174 <HAL_ADC_MspInit+0x28>)
 8011150:	429a      	cmp	r2, r3
 8011152:	d000      	beq.n	8011156 <HAL_ADC_MspInit+0xa>
 8011154:	4770      	bx	lr
{
 8011156:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8011158:	2300      	movs	r3, #0
 801115a:	9301      	str	r3, [sp, #4]
 801115c:	4b06      	ldr	r3, [pc, #24]	@ (8011178 <HAL_ADC_MspInit+0x2c>)
 801115e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011164:	645a      	str	r2, [r3, #68]	@ 0x44
 8011166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801116c:	9301      	str	r3, [sp, #4]
 801116e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8011170:	b002      	add	sp, #8
 8011172:	4770      	bx	lr
 8011174:	40012000 	.word	0x40012000
 8011178:	40023800 	.word	0x40023800

0801117c <EthBegin>:

void EthResetEnd(void){
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
}

void EthBegin(void * param){
 801117c:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 801117e:	2200      	movs	r2, #0
 8011180:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011184:	4801      	ldr	r0, [pc, #4]	@ (801118c <EthBegin+0x10>)
 8011186:	f005 fde8 	bl	8016d5a <HAL_GPIO_WritePin>
}
 801118a:	bd08      	pop	{r3, pc}
 801118c:	40020400 	.word	0x40020400

08011190 <EthEnd>:

void EthEnd(void * param){
 8011190:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011192:	2201      	movs	r2, #1
 8011194:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011198:	4801      	ldr	r0, [pc, #4]	@ (80111a0 <EthEnd+0x10>)
 801119a:	f005 fdde 	bl	8016d5a <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 801119e:	bd08      	pop	{r3, pc}
 80111a0:	40020400 	.word	0x40020400

080111a4 <FlashBegin>:
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}

void FlashBegin(void){
 80111a4:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 80111a6:	2200      	movs	r2, #0
 80111a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80111ac:	4801      	ldr	r0, [pc, #4]	@ (80111b4 <FlashBegin+0x10>)
 80111ae:	f005 fdd4 	bl	8016d5a <HAL_GPIO_WritePin>
}
 80111b2:	bd08      	pop	{r3, pc}
 80111b4:	40020000 	.word	0x40020000

080111b8 <FlashEnd>:

void FlashEnd(void){
 80111b8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80111ba:	2201      	movs	r2, #1
 80111bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80111c0:	4801      	ldr	r0, [pc, #4]	@ (80111c8 <FlashEnd+0x10>)
 80111c2:	f005 fdca 	bl	8016d5a <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 80111c6:	bd08      	pop	{r3, pc}
 80111c8:	40020000 	.word	0x40020000

080111cc <StartIOTask>:
{
 80111cc:	b510      	push	{r4, lr}
 80111ce:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil3_Pin, coil2_Pin,coil1_Pin};
 80111d0:	4b4a      	ldr	r3, [pc, #296]	@ (80112fc <StartIOTask+0x130>)
 80111d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80111d6:	900c      	str	r0, [sp, #48]	@ 0x30
 80111d8:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil3_GPIO_Port, coil2_GPIO_Port, coil1_GPIO_Port};
 80111dc:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 80111e0:	f103 0408 	add.w	r4, r3, #8
 80111e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80111e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input3_Pin, input2_Pin, input1_Pin };
 80111ec:	3314      	adds	r3, #20
 80111ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80111f2:	9007      	str	r0, [sp, #28]
 80111f4:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input3_GPIO_Port, input2_GPIO_Port, input1_GPIO_Port};
 80111f8:	ab04      	add	r3, sp, #16
 80111fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80111fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 8011202:	e072      	b.n	80112ea <StartIOTask+0x11e>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011204:	2300      	movs	r3, #0
 8011206:	461a      	mov	r2, r3
 8011208:	a901      	add	r1, sp, #4
 801120a:	483d      	ldr	r0, [pc, #244]	@ (8011300 <StartIOTask+0x134>)
 801120c:	6800      	ldr	r0, [r0, #0]
 801120e:	f007 fe5a 	bl	8018ec6 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011212:	2400      	movs	r4, #0
 8011214:	e00e      	b.n	8011234 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011216:	2200      	movs	r2, #0
 8011218:	ab0e      	add	r3, sp, #56	@ 0x38
 801121a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801121e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011222:	ab0e      	add	r3, sp, #56	@ 0x38
 8011224:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011228:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801122c:	f005 fd95 	bl	8016d5a <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011230:	3401      	adds	r4, #1
 8011232:	b2e4      	uxtb	r4, r4
 8011234:	2c02      	cmp	r4, #2
 8011236:	d85e      	bhi.n	80112f6 <StartIOTask+0x12a>
		     if (pinOutputs_w[i]) {
 8011238:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801123c:	446b      	add	r3, sp
 801123e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d0e7      	beq.n	8011216 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 8011246:	2201      	movs	r2, #1
 8011248:	ab0e      	add	r3, sp, #56	@ 0x38
 801124a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801124e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011252:	ab0e      	add	r3, sp, #56	@ 0x38
 8011254:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011258:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801125c:	f005 fd7d 	bl	8016d5a <HAL_GPIO_WritePin>
 8011260:	e7e6      	b.n	8011230 <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 8011262:	ab0e      	add	r3, sp, #56	@ 0x38
 8011264:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011268:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801126c:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 8011270:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8011274:	f005 fd6a 	bl	8016d4c <HAL_GPIO_ReadPin>
 8011278:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801127c:	446b      	add	r3, sp
 801127e:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011282:	3401      	adds	r4, #1
 8011284:	b2e4      	uxtb	r4, r4
 8011286:	2c02      	cmp	r4, #2
 8011288:	d9eb      	bls.n	8011262 <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 801128a:	4c1e      	ldr	r4, [pc, #120]	@ (8011304 <StartIOTask+0x138>)
 801128c:	6820      	ldr	r0, [r4, #0]
 801128e:	f007 fe68 	bl	8018f62 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 8011292:	2300      	movs	r3, #0
 8011294:	461a      	mov	r2, r3
 8011296:	a902      	add	r1, sp, #8
 8011298:	6820      	ldr	r0, [r4, #0]
 801129a:	f007 fdd2 	bl	8018e42 <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 801129e:	2400      	movs	r4, #0
 80112a0:	e014      	b.n	80112cc <StartIOTask+0x100>
		pinInputs_r[i] = (uint8_t)(!HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]));
 80112a2:	ab0e      	add	r3, sp, #56	@ 0x38
 80112a4:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80112a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80112ac:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 80112b0:	f853 0c28 	ldr.w	r0, [r3, #-40]
 80112b4:	f005 fd4a 	bl	8016d4c <HAL_GPIO_ReadPin>
 80112b8:	fab0 f080 	clz	r0, r0
 80112bc:	0940      	lsrs	r0, r0, #5
 80112be:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80112c2:	446b      	add	r3, sp
 80112c4:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 80112c8:	3401      	adds	r4, #1
 80112ca:	b2e4      	uxtb	r4, r4
 80112cc:	2c02      	cmp	r4, #2
 80112ce:	d9e8      	bls.n	80112a2 <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 80112d0:	4c0d      	ldr	r4, [pc, #52]	@ (8011308 <StartIOTask+0x13c>)
 80112d2:	6820      	ldr	r0, [r4, #0]
 80112d4:	f007 fe45 	bl	8018f62 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 80112d8:	2300      	movs	r3, #0
 80112da:	461a      	mov	r2, r3
 80112dc:	a903      	add	r1, sp, #12
 80112de:	6820      	ldr	r0, [r4, #0]
 80112e0:	f007 fdaf 	bl	8018e42 <osMessageQueuePut>
    osDelay(1);
 80112e4:	2001      	movs	r0, #1
 80112e6:	f007 fcb4 	bl	8018c52 <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 80112ea:	4b05      	ldr	r3, [pc, #20]	@ (8011300 <StartIOTask+0x134>)
 80112ec:	6818      	ldr	r0, [r3, #0]
 80112ee:	f007 fe2b 	bl	8018f48 <osMessageQueueGetCount>
 80112f2:	2800      	cmp	r0, #0
 80112f4:	d186      	bne.n	8011204 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 80112f6:	2400      	movs	r4, #0
 80112f8:	e7c5      	b.n	8011286 <StartIOTask+0xba>
 80112fa:	bf00      	nop
 80112fc:	08036408 	.word	0x08036408
 8011300:	200008ec 	.word	0x200008ec
 8011304:	200008f0 	.word	0x200008f0
 8011308:	200008f4 	.word	0x200008f4

0801130c <add_log_mess_to_q>:
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}

void add_log_mess_to_q(struct log_message mess){
 801130c:	b084      	sub	sp, #16
 801130e:	b508      	push	{r3, lr}
 8011310:	f10d 0c08 	add.w	ip, sp, #8
 8011314:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011318:	2300      	movs	r3, #0
 801131a:	461a      	mov	r2, r3
 801131c:	4661      	mov	r1, ip
 801131e:	4804      	ldr	r0, [pc, #16]	@ (8011330 <add_log_mess_to_q+0x24>)
 8011320:	6800      	ldr	r0, [r0, #0]
 8011322:	f007 fd8e 	bl	8018e42 <osMessageQueuePut>

}
 8011326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801132a:	b004      	add	sp, #16
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	200008e4 	.word	0x200008e4

08011334 <StartSettingsTask>:
{
 8011334:	b570      	push	{r4, r5, r6, lr}
 8011336:	b0ba      	sub	sp, #232	@ 0xe8
	size_t  f_size = 0;
 8011338:	2300      	movs	r3, #0
 801133a:	9339      	str	r3, [sp, #228]	@ 0xe4
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 801133c:	4b7e      	ldr	r3, [pc, #504]	@ (8011538 <StartSettingsTask+0x204>)
 801133e:	4a7f      	ldr	r2, [pc, #508]	@ (801153c <StartSettingsTask+0x208>)
 8011340:	497f      	ldr	r1, [pc, #508]	@ (8011540 <StartSettingsTask+0x20c>)
 8011342:	4880      	ldr	r0, [pc, #512]	@ (8011544 <StartSettingsTask+0x210>)
 8011344:	f004 fed0 	bl	80160e8 <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 8011348:	497f      	ldr	r1, [pc, #508]	@ (8011548 <StartSettingsTask+0x214>)
 801134a:	4880      	ldr	r0, [pc, #512]	@ (801154c <StartSettingsTask+0x218>)
 801134c:	f00a f8ba 	bl	801b4c4 <lfs_fs_ll_init>
 8011350:	2800      	cmp	r0, #0
 8011352:	db3e      	blt.n	80113d2 <StartSettingsTask+0x9e>
  mg_fs_lfs_mkdir("/web");
 8011354:	487e      	ldr	r0, [pc, #504]	@ (8011550 <StartSettingsTask+0x21c>)
 8011356:	f00a f89f 	bl	801b498 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 801135a:	4c7e      	ldr	r4, [pc, #504]	@ (8011554 <StartSettingsTask+0x220>)
 801135c:	4620      	mov	r0, r4
 801135e:	f00a f88f 	bl	801b480 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 8011362:	487d      	ldr	r0, [pc, #500]	@ (8011558 <StartSettingsTask+0x224>)
 8011364:	f00a f88c 	bl	801b480 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8011368:	4620      	mov	r0, r4
 801136a:	f00a f895 	bl	801b498 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 801136e:	487b      	ldr	r0, [pc, #492]	@ (801155c <StartSettingsTask+0x228>)
 8011370:	f00a f892 	bl	801b498 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 8011374:	487a      	ldr	r0, [pc, #488]	@ (8011560 <StartSettingsTask+0x22c>)
 8011376:	f00a f88f 	bl	801b498 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 801137a:	487a      	ldr	r0, [pc, #488]	@ (8011564 <StartSettingsTask+0x230>)
 801137c:	f00a f88c 	bl	801b498 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/auth");
 8011380:	4879      	ldr	r0, [pc, #484]	@ (8011568 <StartSettingsTask+0x234>)
 8011382:	f00a f889 	bl	801b498 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/smart"); //flash usage info
 8011386:	4879      	ldr	r0, [pc, #484]	@ (801156c <StartSettingsTask+0x238>)
 8011388:	f00a f886 	bl	801b498 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 801138c:	2200      	movs	r2, #0
 801138e:	a939      	add	r1, sp, #228	@ 0xe4
 8011390:	4877      	ldr	r0, [pc, #476]	@ (8011570 <StartSettingsTask+0x23c>)
 8011392:	f009 ffc9 	bl	801b328 <mg_fs_lfs_status>
 8011396:	b330      	cbz	r0, 80113e6 <StartSettingsTask+0xb2>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 8011398:	2101      	movs	r1, #1
 801139a:	4875      	ldr	r0, [pc, #468]	@ (8011570 <StartSettingsTask+0x23c>)
 801139c:	f00a f802 	bl	801b3a4 <mg_fs_lfs_open>
 80113a0:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 80113a2:	22c6      	movs	r2, #198	@ 0xc6
 80113a4:	a907      	add	r1, sp, #28
 80113a6:	f00a f82d 	bl	801b404 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 80113aa:	4620      	mov	r0, r4
 80113ac:	f00a f81e 	bl	801b3ec <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 80113b0:	2200      	movs	r2, #0
 80113b2:	f88d 201c 	strb.w	r2, [sp, #28]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80113b6:	2302      	movs	r3, #2
 80113b8:	a907      	add	r1, sp, #28
 80113ba:	486e      	ldr	r0, [pc, #440]	@ (8011574 <StartSettingsTask+0x240>)
 80113bc:	6800      	ldr	r0, [r0, #0]
 80113be:	f007 ffa7 	bl	8019310 <xQueueGenericSend>
  if (mg_fs_lfs_status(WEB_USERS_FILE, &f_size, NULL) == 0){//file not found
 80113c2:	2200      	movs	r2, #0
 80113c4:	a939      	add	r1, sp, #228	@ 0xe4
 80113c6:	486c      	ldr	r0, [pc, #432]	@ (8011578 <StartSettingsTask+0x244>)
 80113c8:	f009 ffae 	bl	801b328 <mg_fs_lfs_status>
 80113cc:	b1c0      	cbz	r0, 8011400 <StartSettingsTask+0xcc>
{
 80113ce:	2400      	movs	r4, #0
 80113d0:	e089      	b.n	80114e6 <StartSettingsTask+0x1b2>
	  flash_not_connect_flag = 1; //indicate that flash is not found
 80113d2:	4b6a      	ldr	r3, [pc, #424]	@ (801157c <StartSettingsTask+0x248>)
 80113d4:	2201      	movs	r2, #1
 80113d6:	701a      	strb	r2, [r3, #0]
	  osDelay(3000);
 80113d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80113dc:	f007 fc39 	bl	8018c52 <osDelay>
	  HAL_NVIC_SystemReset();
 80113e0:	f005 fb44 	bl	8016a6c <HAL_NVIC_SystemReset>
 80113e4:	e7b6      	b.n	8011354 <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 80113e6:	22c6      	movs	r2, #198	@ 0xc6
 80113e8:	2100      	movs	r1, #0
 80113ea:	a807      	add	r0, sp, #28
 80113ec:	f01b fe80 	bl	802d0f0 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80113f0:	2302      	movs	r3, #2
 80113f2:	2200      	movs	r2, #0
 80113f4:	a907      	add	r1, sp, #28
 80113f6:	485f      	ldr	r0, [pc, #380]	@ (8011574 <StartSettingsTask+0x240>)
 80113f8:	6800      	ldr	r0, [r0, #0]
 80113fa:	f007 ff89 	bl	8019310 <xQueueGenericSend>
 80113fe:	e7e0      	b.n	80113c2 <StartSettingsTask+0x8e>
	  web_users = (users_list_t *)malloc(user_list_size * sizeof(users_list_t));
 8011400:	f240 609a 	movw	r0, #1690	@ 0x69a
 8011404:	f009 fe28 	bl	801b058 <pvPortMalloc>
	  if (web_users == NULL) {
 8011408:	4604      	mov	r4, r0
 801140a:	b390      	cbz	r0, 8011472 <StartSettingsTask+0x13e>
		  logging(L_INFO, "Initialize default login pass for web (admin:admin)'");
 801140c:	495c      	ldr	r1, [pc, #368]	@ (8011580 <StartSettingsTask+0x24c>)
 801140e:	2001      	movs	r0, #1
 8011410:	f000 feea 	bl	80121e8 <logging>
		  strcpy(web_users[0].user, WEB_ADMIN_DEFAULT);
 8011414:	4b5b      	ldr	r3, [pc, #364]	@ (8011584 <StartSettingsTask+0x250>)
 8011416:	6818      	ldr	r0, [r3, #0]
 8011418:	6020      	str	r0, [r4, #0]
 801141a:	889b      	ldrh	r3, [r3, #4]
 801141c:	80a3      	strh	r3, [r4, #4]
		  unsigned char pass_digest[] = WEB_ADMIN_PASS_DIGEST;
 801141e:	ad01      	add	r5, sp, #4
 8011420:	4e59      	ldr	r6, [pc, #356]	@ (8011588 <StartSettingsTask+0x254>)
 8011422:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011426:	e896 0003 	ldmia.w	r6, {r0, r1}
 801142a:	f845 0b04 	str.w	r0, [r5], #4
 801142e:	7029      	strb	r1, [r5, #0]
		  memcpy(web_users[0].pass_digest, pass_digest, sizeof(pass_digest));
 8011430:	ad01      	add	r5, sp, #4
 8011432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011434:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 8011438:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 801143c:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 8011440:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8011444:	6828      	ldr	r0, [r5, #0]
 8011446:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
 801144a:	792b      	ldrb	r3, [r5, #4]
 801144c:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
		  f_pointer = mg_fs_lfs_open(WEB_USERS_FILE, MG_FS_WRITE);
 8011450:	2102      	movs	r1, #2
 8011452:	4849      	ldr	r0, [pc, #292]	@ (8011578 <StartSettingsTask+0x244>)
 8011454:	f009 ffa6 	bl	801b3a4 <mg_fs_lfs_open>
 8011458:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, web_users, user_list_size * sizeof(users_list_t));
 801145a:	f240 629a 	movw	r2, #1690	@ 0x69a
 801145e:	4621      	mov	r1, r4
 8011460:	f009 ffdc 	bl	801b41c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011464:	4628      	mov	r0, r5
 8011466:	f009 ffc1 	bl	801b3ec <mg_fs_lfs_close>
	  free(web_users);
 801146a:	4620      	mov	r0, r4
 801146c:	f009 fe76 	bl	801b15c <vPortFree>
 8011470:	e7ad      	b.n	80113ce <StartSettingsTask+0x9a>
		  logging(L_ERR, "Failed to allocate memory for 'web_users' ");
 8011472:	4946      	ldr	r1, [pc, #280]	@ (801158c <StartSettingsTask+0x258>)
 8011474:	2003      	movs	r0, #3
 8011476:	f000 feb7 	bl	80121e8 <logging>
 801147a:	e7f6      	b.n	801146a <StartSettingsTask+0x136>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 801147c:	4d3c      	ldr	r5, [pc, #240]	@ (8011570 <StartSettingsTask+0x23c>)
 801147e:	4628      	mov	r0, r5
 8011480:	f009 fffe 	bl	801b480 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 8011484:	2102      	movs	r1, #2
 8011486:	4628      	mov	r0, r5
 8011488:	f009 ff8c 	bl	801b3a4 <mg_fs_lfs_open>
 801148c:	4605      	mov	r5, r0
 801148e:	2800      	cmp	r0, #0
 8011490:	d033      	beq.n	80114fa <StartSettingsTask+0x1c6>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 8011492:	22c6      	movs	r2, #198	@ 0xc6
 8011494:	a907      	add	r1, sp, #28
 8011496:	f009 ffc1 	bl	801b41c <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 801149a:	4628      	mov	r0, r5
 801149c:	f009 ffa6 	bl	801b3ec <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 80114a0:	2200      	movs	r2, #0
 80114a2:	f88d 201c 	strb.w	r2, [sp, #28]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80114a6:	2302      	movs	r3, #2
 80114a8:	a907      	add	r1, sp, #28
 80114aa:	4832      	ldr	r0, [pc, #200]	@ (8011574 <StartSettingsTask+0x240>)
 80114ac:	6800      	ldr	r0, [r0, #0]
 80114ae:	f007 ff2f 	bl	8019310 <xQueueGenericSend>
 80114b2:	e022      	b.n	80114fa <StartSettingsTask+0x1c6>
				 osDelay(1);
 80114b4:	2001      	movs	r0, #1
 80114b6:	f007 fbcc 	bl	8018c52 <osDelay>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 80114ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80114be:	4834      	ldr	r0, [pc, #208]	@ (8011590 <StartSettingsTask+0x25c>)
 80114c0:	f005 fc44 	bl	8016d4c <HAL_GPIO_ReadPin>
 80114c4:	2800      	cmp	r0, #0
 80114c6:	d0f5      	beq.n	80114b4 <StartSettingsTask+0x180>
			 osDelay(1000);
 80114c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80114cc:	f007 fbc1 	bl	8018c52 <osDelay>
			 mg_fs_lfs_remove(WEB_USERS_FILE);
 80114d0:	4829      	ldr	r0, [pc, #164]	@ (8011578 <StartSettingsTask+0x244>)
 80114d2:	f009 ffd5 	bl	801b480 <mg_fs_lfs_remove>
			 HAL_NVIC_SystemReset();
 80114d6:	f005 fac9 	bl	8016a6c <HAL_NVIC_SystemReset>
 80114da:	e000      	b.n	80114de <StartSettingsTask+0x1aa>
		 press_time = 0;
 80114dc:	2400      	movs	r4, #0
	  osDelay(1000);
 80114de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80114e2:	f007 fbb6 	bl	8018c52 <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80114e6:	2200      	movs	r2, #0
 80114e8:	a907      	add	r1, sp, #28
 80114ea:	4b22      	ldr	r3, [pc, #136]	@ (8011574 <StartSettingsTask+0x240>)
 80114ec:	6818      	ldr	r0, [r3, #0]
 80114ee:	f008 fa22 	bl	8019936 <xQueuePeek>
	  if(mqtt_config.save){
 80114f2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d1c0      	bne.n	801147c <StartSettingsTask+0x148>
	 if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){ // If key pressed, more than 8 secons - reset auth file and reset mcu
 80114fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80114fe:	4824      	ldr	r0, [pc, #144]	@ (8011590 <StartSettingsTask+0x25c>)
 8011500:	f005 fc24 	bl	8016d4c <HAL_GPIO_ReadPin>
 8011504:	2800      	cmp	r0, #0
 8011506:	d1e9      	bne.n	80114dc <StartSettingsTask+0x1a8>
		 press_time++;
 8011508:	3401      	adds	r4, #1
 801150a:	b2e4      	uxtb	r4, r4
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 801150c:	4d20      	ldr	r5, [pc, #128]	@ (8011590 <StartSettingsTask+0x25c>)
 801150e:	2201      	movs	r2, #1
 8011510:	2102      	movs	r1, #2
 8011512:	4628      	mov	r0, r5
 8011514:	f005 fc21 	bl	8016d5a <HAL_GPIO_WritePin>
		 osDelay(100);
 8011518:	2064      	movs	r0, #100	@ 0x64
 801151a:	f007 fb9a 	bl	8018c52 <osDelay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 801151e:	2200      	movs	r2, #0
 8011520:	2102      	movs	r1, #2
 8011522:	4628      	mov	r0, r5
 8011524:	f005 fc19 	bl	8016d5a <HAL_GPIO_WritePin>
		 if (press_time == 8){
 8011528:	2c08      	cmp	r4, #8
 801152a:	d1d8      	bne.n	80114de <StartSettingsTask+0x1aa>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 801152c:	2201      	movs	r2, #1
 801152e:	2102      	movs	r1, #2
 8011530:	4628      	mov	r0, r5
 8011532:	f005 fc12 	bl	8016d5a <HAL_GPIO_WritePin>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 8011536:	e7c0      	b.n	80114ba <StartSettingsTask+0x186>
 8011538:	08011b15 	.word	0x08011b15
 801153c:	08011b39 	.word	0x08011b39
 8011540:	080111b9 	.word	0x080111b9
 8011544:	080111a5 	.word	0x080111a5
 8011548:	08011b65 	.word	0x08011b65
 801154c:	08011b51 	.word	0x08011b51
 8011550:	08036684 	.word	0x08036684
 8011554:	0803668c 	.word	0x0803668c
 8011558:	08036698 	.word	0x08036698
 801155c:	080366a8 	.word	0x080366a8
 8011560:	080366b4 	.word	0x080366b4
 8011564:	08038268 	.word	0x08038268
 8011568:	080366bc 	.word	0x080366bc
 801156c:	080366c4 	.word	0x080366c4
 8011570:	080366cc 	.word	0x080366cc
 8011574:	200008e8 	.word	0x200008e8
 8011578:	080366e0 	.word	0x080366e0
 801157c:	20000910 	.word	0x20000910
 8011580:	0803671c 	.word	0x0803671c
 8011584:	08036754 	.word	0x08036754
 8011588:	0803675c 	.word	0x0803675c
 801158c:	080366f0 	.word	0x080366f0
 8011590:	40020400 	.word	0x40020400

08011594 <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011594:	b508      	push	{r3, lr}
	switch (param_type) {
 8011596:	2901      	cmp	r1, #1
 8011598:	d014      	beq.n	80115c4 <RW_parameters_from_queue+0x30>
 801159a:	2902      	cmp	r1, #2
 801159c:	d01a      	beq.n	80115d4 <RW_parameters_from_queue+0x40>
 801159e:	b101      	cbz	r1, 80115a2 <RW_parameters_from_queue+0xe>
}
 80115a0:	bd08      	pop	{r3, pc}
			if (direction == S_READ){
 80115a2:	b14a      	cbz	r2, 80115b8 <RW_parameters_from_queue+0x24>
			}else if (direction == S_WRITE){
 80115a4:	2a01      	cmp	r2, #1
 80115a6:	d1fb      	bne.n	80115a0 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(mqttQHandle, pr);
 80115a8:	2302      	movs	r3, #2
 80115aa:	2200      	movs	r2, #0
 80115ac:	4601      	mov	r1, r0
 80115ae:	4812      	ldr	r0, [pc, #72]	@ (80115f8 <RW_parameters_from_queue+0x64>)
 80115b0:	6800      	ldr	r0, [r0, #0]
 80115b2:	f007 fead 	bl	8019310 <xQueueGenericSend>
 80115b6:	e7f3      	b.n	80115a0 <RW_parameters_from_queue+0xc>
				xQueuePeek(mqttQHandle, pr, 0);
 80115b8:	4601      	mov	r1, r0
 80115ba:	4b0f      	ldr	r3, [pc, #60]	@ (80115f8 <RW_parameters_from_queue+0x64>)
 80115bc:	6818      	ldr	r0, [r3, #0]
 80115be:	f008 f9ba 	bl	8019936 <xQueuePeek>
 80115c2:	e7ed      	b.n	80115a0 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 80115c4:	2a00      	cmp	r2, #0
 80115c6:	d1eb      	bne.n	80115a0 <RW_parameters_from_queue+0xc>
				xQueuePeek(inputReadQHandle, input, 0);
 80115c8:	4601      	mov	r1, r0
 80115ca:	4b0c      	ldr	r3, [pc, #48]	@ (80115fc <RW_parameters_from_queue+0x68>)
 80115cc:	6818      	ldr	r0, [r3, #0]
 80115ce:	f008 f9b2 	bl	8019936 <xQueuePeek>
 80115d2:	e7e5      	b.n	80115a0 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 80115d4:	b14a      	cbz	r2, 80115ea <RW_parameters_from_queue+0x56>
			}else if(direction == S_WRITE){
 80115d6:	2a01      	cmp	r2, #1
 80115d8:	d1e2      	bne.n	80115a0 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(outputWriteQHandle, output);
 80115da:	2302      	movs	r3, #2
 80115dc:	2200      	movs	r2, #0
 80115de:	4601      	mov	r1, r0
 80115e0:	4807      	ldr	r0, [pc, #28]	@ (8011600 <RW_parameters_from_queue+0x6c>)
 80115e2:	6800      	ldr	r0, [r0, #0]
 80115e4:	f007 fe94 	bl	8019310 <xQueueGenericSend>
}
 80115e8:	e7da      	b.n	80115a0 <RW_parameters_from_queue+0xc>
				xQueuePeek(outputReadQHandle, output, 0);
 80115ea:	4601      	mov	r1, r0
 80115ec:	4b05      	ldr	r3, [pc, #20]	@ (8011604 <RW_parameters_from_queue+0x70>)
 80115ee:	6818      	ldr	r0, [r3, #0]
 80115f0:	f008 f9a1 	bl	8019936 <xQueuePeek>
 80115f4:	e7d4      	b.n	80115a0 <RW_parameters_from_queue+0xc>
 80115f6:	bf00      	nop
 80115f8:	200008e8 	.word	0x200008e8
 80115fc:	200008f4 	.word	0x200008f4
 8011600:	200008ec 	.word	0x200008ec
 8011604:	200008f0 	.word	0x200008f0

08011608 <StartDisplayTask>:
{
 8011608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801160a:	b08b      	sub	sp, #44	@ 0x2c
	osDelay(1000);//
 801160c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011610:	f007 fb1f 	bl	8018c52 <osDelay>
	SSD1306_Init (); // initialise the display
 8011614:	f007 f9b6 	bl	8018984 <SSD1306_Init>
	osDelay(100);//
 8011618:	2064      	movs	r0, #100	@ 0x64
 801161a:	f007 fb1a 	bl	8018c52 <osDelay>
	SSD1306_GotoXY(x=1,y=0);
 801161e:	2100      	movs	r1, #0
 8011620:	2001      	movs	r0, #1
 8011622:	f007 f913 	bl	801884c <SSD1306_GotoXY>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8011626:	2000      	movs	r0, #0
 8011628:	f007 f8d4 	bl	80187d4 <SSD1306_Fill>
	if (flash_not_connect_flag){
 801162c:	4ba9      	ldr	r3, [pc, #676]	@ (80118d4 <StartDisplayTask+0x2cc>)
 801162e:	781c      	ldrb	r4, [r3, #0]
 8011630:	2c00      	cmp	r4, #0
 8011632:	d148      	bne.n	80116c6 <StartDisplayTask+0xbe>
	SSD1306_Puts("Builded: ", &Font_7x10, SSD1306_COLOR_WHITE);
 8011634:	4da8      	ldr	r5, [pc, #672]	@ (80118d8 <StartDisplayTask+0x2d0>)
 8011636:	2201      	movs	r2, #1
 8011638:	4629      	mov	r1, r5
 801163a:	48a8      	ldr	r0, [pc, #672]	@ (80118dc <StartDisplayTask+0x2d4>)
 801163c:	f007 f95a 	bl	80188f4 <SSD1306_Puts>
	SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 8011640:	2201      	movs	r2, #1
 8011642:	4629      	mov	r1, r5
 8011644:	48a6      	ldr	r0, [pc, #664]	@ (80118e0 <StartDisplayTask+0x2d8>)
 8011646:	f007 f955 	bl	80188f4 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 801164a:	f104 010b 	add.w	r1, r4, #11
 801164e:	b2c9      	uxtb	r1, r1
 8011650:	2001      	movs	r0, #1
 8011652:	f007 f8fb 	bl	801884c <SSD1306_GotoXY>
	SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 8011656:	2201      	movs	r2, #1
 8011658:	4629      	mov	r1, r5
 801165a:	48a2      	ldr	r0, [pc, #648]	@ (80118e4 <StartDisplayTask+0x2dc>)
 801165c:	f007 f94a 	bl	80188f4 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 8011660:	f104 0116 	add.w	r1, r4, #22
 8011664:	b2c9      	uxtb	r1, r1
 8011666:	2001      	movs	r0, #1
 8011668:	f007 f8f0 	bl	801884c <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 801166c:	4b9e      	ldr	r3, [pc, #632]	@ (80118e8 <StartDisplayTask+0x2e0>)
 801166e:	6859      	ldr	r1, [r3, #4]
 8011670:	780a      	ldrb	r2, [r1, #0]
 8011672:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011674:	7888      	ldrb	r0, [r1, #2]
 8011676:	78ce      	ldrb	r6, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011678:	790f      	ldrb	r7, [r1, #4]
 801167a:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 801167c:	9103      	str	r1, [sp, #12]
 801167e:	9702      	str	r7, [sp, #8]
 8011680:	9601      	str	r6, [sp, #4]
 8011682:	9000      	str	r0, [sp, #0]
 8011684:	4999      	ldr	r1, [pc, #612]	@ (80118ec <StartDisplayTask+0x2e4>)
 8011686:	a805      	add	r0, sp, #20
 8011688:	f01b f970 	bl	802c96c <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801168c:	2201      	movs	r2, #1
 801168e:	4629      	mov	r1, r5
 8011690:	a805      	add	r0, sp, #20
 8011692:	f007 f92f 	bl	80188f4 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 8011696:	f104 0121 	add.w	r1, r4, #33	@ 0x21
 801169a:	b2c9      	uxtb	r1, r1
 801169c:	2001      	movs	r0, #1
 801169e:	f007 f8d5 	bl	801884c <SSD1306_GotoXY>
	sprintf((char *)buf, "%s",get_flash_chip_model());
 80116a2:	f009 ff0b 	bl	801b4bc <get_flash_chip_model>
 80116a6:	4601      	mov	r1, r0
 80116a8:	a805      	add	r0, sp, #20
 80116aa:	f01c ff2b 	bl	802e504 <strcpy>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80116ae:	2201      	movs	r2, #1
 80116b0:	4629      	mov	r1, r5
 80116b2:	a805      	add	r0, sp, #20
 80116b4:	f007 f91e 	bl	80188f4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80116b8:	f007 fa0e 	bl	8018ad8 <SSD1306_UpdateScreen>
	osDelay(3000);
 80116bc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80116c0:	f007 fac7 	bl	8018c52 <osDelay>
	int i=0;
 80116c4:	e0ce      	b.n	8011864 <StartDisplayTask+0x25c>
		SSD1306_GotoXY(x=1,y=0);
 80116c6:	2100      	movs	r1, #0
 80116c8:	2001      	movs	r0, #1
 80116ca:	f007 f8bf 	bl	801884c <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80116ce:	2000      	movs	r0, #0
 80116d0:	f007 f880 	bl	80187d4 <SSD1306_Fill>
		SSD1306_Puts("Error. Flash mem", &Font_7x10, SSD1306_COLOR_WHITE);
 80116d4:	4c80      	ldr	r4, [pc, #512]	@ (80118d8 <StartDisplayTask+0x2d0>)
 80116d6:	2201      	movs	r2, #1
 80116d8:	4621      	mov	r1, r4
 80116da:	4885      	ldr	r0, [pc, #532]	@ (80118f0 <StartDisplayTask+0x2e8>)
 80116dc:	f007 f90a 	bl	80188f4 <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=10);
 80116e0:	210a      	movs	r1, #10
 80116e2:	2001      	movs	r0, #1
 80116e4:	f007 f8b2 	bl	801884c <SSD1306_GotoXY>
		SSD1306_Puts("chip is not", &Font_7x10, SSD1306_COLOR_WHITE);
 80116e8:	2201      	movs	r2, #1
 80116ea:	4621      	mov	r1, r4
 80116ec:	4881      	ldr	r0, [pc, #516]	@ (80118f4 <StartDisplayTask+0x2ec>)
 80116ee:	f007 f901 	bl	80188f4 <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=20);
 80116f2:	2114      	movs	r1, #20
 80116f4:	2001      	movs	r0, #1
 80116f6:	f007 f8a9 	bl	801884c <SSD1306_GotoXY>
		SSD1306_Puts("connected. Reboot", &Font_7x10, SSD1306_COLOR_WHITE);
 80116fa:	2201      	movs	r2, #1
 80116fc:	4621      	mov	r1, r4
 80116fe:	487e      	ldr	r0, [pc, #504]	@ (80118f8 <StartDisplayTask+0x2f0>)
 8011700:	f007 f8f8 	bl	80188f4 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011704:	f007 f9e8 	bl	8018ad8 <SSD1306_UpdateScreen>
		vTaskDelay(3000);
 8011708:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 801170c:	f008 fe0c 	bl	801a328 <vTaskDelay>
		SSD1306_GotoXY(x=1,y=20);
 8011710:	2414      	movs	r4, #20
 8011712:	e78f      	b.n	8011634 <StartDisplayTask+0x2c>
		switch (flash_status_flag) {
 8011714:	f113 0f05 	cmn.w	r3, #5
 8011718:	d108      	bne.n	801172c <StartDisplayTask+0x124>
			SSD1306_GotoXY(x=1,y=40);
 801171a:	2128      	movs	r1, #40	@ 0x28
 801171c:	2001      	movs	r0, #1
 801171e:	f007 f895 	bl	801884c <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_IO", &Font_7x10, SSD1306_COLOR_WHITE);
 8011722:	2201      	movs	r2, #1
 8011724:	496c      	ldr	r1, [pc, #432]	@ (80118d8 <StartDisplayTask+0x2d0>)
 8011726:	4875      	ldr	r0, [pc, #468]	@ (80118fc <StartDisplayTask+0x2f4>)
 8011728:	f007 f8e4 	bl	80188f4 <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=0);
 801172c:	2100      	movs	r1, #0
 801172e:	2001      	movs	r0, #1
 8011730:	f007 f88c 	bl	801884c <SSD1306_GotoXY>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011734:	4c68      	ldr	r4, [pc, #416]	@ (80118d8 <StartDisplayTask+0x2d0>)
 8011736:	2201      	movs	r2, #1
 8011738:	4621      	mov	r1, r4
 801173a:	4871      	ldr	r0, [pc, #452]	@ (8011900 <StartDisplayTask+0x2f8>)
 801173c:	f007 f8da 	bl	80188f4 <SSD1306_Puts>
				(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011740:	4b69      	ldr	r3, [pc, #420]	@ (80118e8 <StartDisplayTask+0x2e0>)
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011746:	0e13      	lsrs	r3, r2, #24
		sprintf(buf,"%lu.%lu.%lu.%lu",
 8011748:	9301      	str	r3, [sp, #4]
 801174a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011754:	b2d2      	uxtb	r2, r2
 8011756:	496b      	ldr	r1, [pc, #428]	@ (8011904 <StartDisplayTask+0x2fc>)
 8011758:	a805      	add	r0, sp, #20
 801175a:	f01b f907 	bl	802c96c <sprintf>
		SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801175e:	2201      	movs	r2, #1
 8011760:	4621      	mov	r1, r4
 8011762:	a805      	add	r0, sp, #20
 8011764:	f007 f8c6 	bl	80188f4 <SSD1306_Puts>
		SSD1306_GotoXY(x,y=y+11);
 8011768:	210b      	movs	r1, #11
 801176a:	2001      	movs	r0, #1
 801176c:	f007 f86e 	bl	801884c <SSD1306_GotoXY>
		SSD1306_Puts("Inputs:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011770:	2201      	movs	r2, #1
 8011772:	4621      	mov	r1, r4
 8011774:	4864      	ldr	r0, [pc, #400]	@ (8011908 <StartDisplayTask+0x300>)
 8011776:	f007 f8bd 	bl	80188f4 <SSD1306_Puts>
		SSD1306_GotoXY(x=x+60,y);
 801177a:	210b      	movs	r1, #11
 801177c:	203d      	movs	r0, #61	@ 0x3d
 801177e:	f007 f865 	bl	801884c <SSD1306_GotoXY>
		for (i=0 ; i<INPUTS_COUNT ; i++){
 8011782:	2500      	movs	r5, #0
		SSD1306_GotoXY(x=x+60,y);
 8011784:	243d      	movs	r4, #61	@ 0x3d
		for (i=0 ; i<INPUTS_COUNT ; i++){
 8011786:	e01f      	b.n	80117c8 <StartDisplayTask+0x1c0>
			SSD1306_GotoXY(x=1,y=40);
 8011788:	2128      	movs	r1, #40	@ 0x28
 801178a:	2001      	movs	r0, #1
 801178c:	f007 f85e 	bl	801884c <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_CORRUPT", &Font_7x10, SSD1306_COLOR_WHITE);
 8011790:	2201      	movs	r2, #1
 8011792:	4951      	ldr	r1, [pc, #324]	@ (80118d8 <StartDisplayTask+0x2d0>)
 8011794:	485d      	ldr	r0, [pc, #372]	@ (801190c <StartDisplayTask+0x304>)
 8011796:	f007 f8ad 	bl	80188f4 <SSD1306_Puts>
			break;
 801179a:	e7c7      	b.n	801172c <StartDisplayTask+0x124>
			SSD1306_GotoXY(x=1,y=40);
 801179c:	2128      	movs	r1, #40	@ 0x28
 801179e:	2001      	movs	r0, #1
 80117a0:	f007 f854 	bl	801884c <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_NOMEM", &Font_7x10, SSD1306_COLOR_WHITE);
 80117a4:	2201      	movs	r2, #1
 80117a6:	494c      	ldr	r1, [pc, #304]	@ (80118d8 <StartDisplayTask+0x2d0>)
 80117a8:	4859      	ldr	r0, [pc, #356]	@ (8011910 <StartDisplayTask+0x308>)
 80117aa:	f007 f8a3 	bl	80188f4 <SSD1306_Puts>
			break;
 80117ae:	e7bd      	b.n	801172c <StartDisplayTask+0x124>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80117b0:	2201      	movs	r2, #1
 80117b2:	4949      	ldr	r1, [pc, #292]	@ (80118d8 <StartDisplayTask+0x2d0>)
 80117b4:	a805      	add	r0, sp, #20
 80117b6:	f007 f89d 	bl	80188f4 <SSD1306_Puts>
			SSD1306_GotoXY(x=x+8,y);
 80117ba:	3408      	adds	r4, #8
 80117bc:	b2e4      	uxtb	r4, r4
 80117be:	210b      	movs	r1, #11
 80117c0:	4620      	mov	r0, r4
 80117c2:	f007 f843 	bl	801884c <SSD1306_GotoXY>
		for (i=0 ; i<INPUTS_COUNT ; i++){
 80117c6:	4635      	mov	r5, r6
 80117c8:	2d02      	cmp	r5, #2
 80117ca:	dc0f      	bgt.n	80117ec <StartDisplayTask+0x1e4>
			sprintf((char *)buf,"%d",i+1);
 80117cc:	1c6e      	adds	r6, r5, #1
 80117ce:	4632      	mov	r2, r6
 80117d0:	4950      	ldr	r1, [pc, #320]	@ (8011914 <StartDisplayTask+0x30c>)
 80117d2:	a805      	add	r0, sp, #20
 80117d4:	f01b f8ca 	bl	802c96c <sprintf>
			if ( io_status.inputs[i] ){
 80117d8:	4b4f      	ldr	r3, [pc, #316]	@ (8011918 <StartDisplayTask+0x310>)
 80117da:	5d5b      	ldrb	r3, [r3, r5]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d0e7      	beq.n	80117b0 <StartDisplayTask+0x1a8>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_BLACK);
 80117e0:	2200      	movs	r2, #0
 80117e2:	493d      	ldr	r1, [pc, #244]	@ (80118d8 <StartDisplayTask+0x2d0>)
 80117e4:	a805      	add	r0, sp, #20
 80117e6:	f007 f885 	bl	80188f4 <SSD1306_Puts>
 80117ea:	e7e6      	b.n	80117ba <StartDisplayTask+0x1b2>
		SSD1306_GotoXY(x=1,y=y+11);
 80117ec:	2116      	movs	r1, #22
 80117ee:	2001      	movs	r0, #1
 80117f0:	f007 f82c 	bl	801884c <SSD1306_GotoXY>
		SSD1306_Puts("Outputs:", &Font_7x10, SSD1306_COLOR_WHITE);
 80117f4:	2201      	movs	r2, #1
 80117f6:	4938      	ldr	r1, [pc, #224]	@ (80118d8 <StartDisplayTask+0x2d0>)
 80117f8:	4848      	ldr	r0, [pc, #288]	@ (801191c <StartDisplayTask+0x314>)
 80117fa:	f007 f87b 	bl	80188f4 <SSD1306_Puts>
		SSD1306_GotoXY(x=x+60,y);
 80117fe:	2116      	movs	r1, #22
 8011800:	203d      	movs	r0, #61	@ 0x3d
 8011802:	f007 f823 	bl	801884c <SSD1306_GotoXY>
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 8011806:	2500      	movs	r5, #0
		SSD1306_GotoXY(x=x+60,y);
 8011808:	243d      	movs	r4, #61	@ 0x3d
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 801180a:	e00b      	b.n	8011824 <StartDisplayTask+0x21c>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801180c:	2201      	movs	r2, #1
 801180e:	4932      	ldr	r1, [pc, #200]	@ (80118d8 <StartDisplayTask+0x2d0>)
 8011810:	a805      	add	r0, sp, #20
 8011812:	f007 f86f 	bl	80188f4 <SSD1306_Puts>
			SSD1306_GotoXY(x=x+8,y);
 8011816:	3408      	adds	r4, #8
 8011818:	b2e4      	uxtb	r4, r4
 801181a:	2116      	movs	r1, #22
 801181c:	4620      	mov	r0, r4
 801181e:	f007 f815 	bl	801884c <SSD1306_GotoXY>
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 8011822:	4635      	mov	r5, r6
 8011824:	2d02      	cmp	r5, #2
 8011826:	dc10      	bgt.n	801184a <StartDisplayTask+0x242>
			sprintf((char *)buf,"%d",i+1);
 8011828:	1c6e      	adds	r6, r5, #1
 801182a:	4632      	mov	r2, r6
 801182c:	4939      	ldr	r1, [pc, #228]	@ (8011914 <StartDisplayTask+0x30c>)
 801182e:	a805      	add	r0, sp, #20
 8011830:	f01b f89c 	bl	802c96c <sprintf>
			if ( io_status.outputs[i] ){
 8011834:	4b38      	ldr	r3, [pc, #224]	@ (8011918 <StartDisplayTask+0x310>)
 8011836:	442b      	add	r3, r5
 8011838:	78db      	ldrb	r3, [r3, #3]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d0e6      	beq.n	801180c <StartDisplayTask+0x204>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_BLACK);
 801183e:	2200      	movs	r2, #0
 8011840:	4925      	ldr	r1, [pc, #148]	@ (80118d8 <StartDisplayTask+0x2d0>)
 8011842:	a805      	add	r0, sp, #20
 8011844:	f007 f856 	bl	80188f4 <SSD1306_Puts>
 8011848:	e7e5      	b.n	8011816 <StartDisplayTask+0x20e>
		SSD1306_UpdateScreen();
 801184a:	f007 f945 	bl	8018ad8 <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 801184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011852:	2201      	movs	r2, #1
 8011854:	2178      	movs	r1, #120	@ 0x78
 8011856:	4832      	ldr	r0, [pc, #200]	@ (8011920 <StartDisplayTask+0x318>)
 8011858:	f005 fdd4 	bl	8017404 <HAL_I2C_IsDeviceReady>
 801185c:	bb50      	cbnz	r0, 80118b4 <StartDisplayTask+0x2ac>
		osDelay(200);
 801185e:	20c8      	movs	r0, #200	@ 0xc8
 8011860:	f007 f9f7 	bl	8018c52 <osDelay>
		RW_parameters_from_queue(io_status.inputs, S_INPUTS, S_READ);
 8011864:	4c2c      	ldr	r4, [pc, #176]	@ (8011918 <StartDisplayTask+0x310>)
 8011866:	2200      	movs	r2, #0
 8011868:	2101      	movs	r1, #1
 801186a:	4620      	mov	r0, r4
 801186c:	f7ff fe92 	bl	8011594 <RW_parameters_from_queue>
		RW_parameters_from_queue(io_status.outputs, S_OUTPUTS, S_READ);
 8011870:	2200      	movs	r2, #0
 8011872:	2102      	movs	r1, #2
 8011874:	1ce0      	adds	r0, r4, #3
 8011876:	f7ff fe8d 	bl	8011594 <RW_parameters_from_queue>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 801187a:	2000      	movs	r0, #0
 801187c:	f006 ffaa 	bl	80187d4 <SSD1306_Fill>
		switch (flash_status_flag) {
 8011880:	4b28      	ldr	r3, [pc, #160]	@ (8011924 <StartDisplayTask+0x31c>)
 8011882:	f993 3000 	ldrsb.w	r3, [r3]
 8011886:	f113 0f0c 	cmn.w	r3, #12
 801188a:	d087      	beq.n	801179c <StartDisplayTask+0x194>
 801188c:	f73f af42 	bgt.w	8011714 <StartDisplayTask+0x10c>
 8011890:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011894:	f43f af78 	beq.w	8011788 <StartDisplayTask+0x180>
 8011898:	f113 0f18 	cmn.w	r3, #24
 801189c:	f47f af46 	bne.w	801172c <StartDisplayTask+0x124>
			SSD1306_GotoXY(x=1,y=40);
 80118a0:	2128      	movs	r1, #40	@ 0x28
 80118a2:	2001      	movs	r0, #1
 80118a4:	f006 ffd2 	bl	801884c <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_NOSPC", &Font_7x10, SSD1306_COLOR_WHITE);
 80118a8:	2201      	movs	r2, #1
 80118aa:	490b      	ldr	r1, [pc, #44]	@ (80118d8 <StartDisplayTask+0x2d0>)
 80118ac:	481e      	ldr	r0, [pc, #120]	@ (8011928 <StartDisplayTask+0x320>)
 80118ae:	f007 f821 	bl	80188f4 <SSD1306_Puts>
			break;
 80118b2:	e73b      	b.n	801172c <StartDisplayTask+0x124>
			HAL_I2C_DeInit(&hi2c1);
 80118b4:	481a      	ldr	r0, [pc, #104]	@ (8011920 <StartDisplayTask+0x318>)
 80118b6:	f005 fccf 	bl	8017258 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 80118ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80118be:	f008 fd33 	bl	801a328 <vTaskDelay>
			MX_I2C1_Init();
 80118c2:	f000 fbe9 	bl	8012098 <MX_I2C1_Init>
			vTaskDelay(1000);
 80118c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80118ca:	f008 fd2d 	bl	801a328 <vTaskDelay>
			SSD1306_Init ();
 80118ce:	f007 f859 	bl	8018984 <SSD1306_Init>
 80118d2:	e7bc      	b.n	801184e <StartDisplayTask+0x246>
 80118d4:	20000910 	.word	0x20000910
 80118d8:	2000010c 	.word	0x2000010c
 80118dc:	080367a8 	.word	0x080367a8
 80118e0:	080367b4 	.word	0x080367b4
 80118e4:	080367c0 	.word	0x080367c0
 80118e8:	20000914 	.word	0x20000914
 80118ec:	080367cc 	.word	0x080367cc
 80118f0:	08036774 	.word	0x08036774
 80118f4:	08036788 	.word	0x08036788
 80118f8:	08036794 	.word	0x08036794
 80118fc:	080367ec 	.word	0x080367ec
 8011900:	08036828 	.word	0x08036828
 8011904:	0803682c 	.word	0x0803682c
 8011908:	0803683c 	.word	0x0803683c
 801190c:	080367f8 	.word	0x080367f8
 8011910:	08036818 	.word	0x08036818
 8011914:	0803bd80 	.word	0x0803bd80
 8011918:	200008d4 	.word	0x200008d4
 801191c:	08036844 	.word	0x08036844
 8011920:	2000091c 	.word	0x2000091c
 8011924:	20000911 	.word	0x20000911
 8011928:	08036808 	.word	0x08036808

0801192c <StartLoggingTask>:
{
 801192c:	b530      	push	{r4, r5, lr}
 801192e:	b0d1      	sub	sp, #324	@ 0x144
	reg_logging_fn(add_log_mess_to_q);
 8011930:	4853      	ldr	r0, [pc, #332]	@ (8011a80 <StartLoggingTask+0x154>)
 8011932:	f000 fc4d 	bl	80121d0 <reg_logging_fn>
	logger_set_level(L_INFO);
 8011936:	2001      	movs	r0, #1
 8011938:	f000 fc50 	bl	80121dc <logger_set_level>
	logging(L_INFO, "Device started...");
 801193c:	4951      	ldr	r1, [pc, #324]	@ (8011a84 <StartLoggingTask+0x158>)
 801193e:	2001      	movs	r0, #1
 8011940:	f000 fc52 	bl	80121e8 <logging>
	  while (mg_fs_mounted() == 0){
 8011944:	e003      	b.n	801194e <StartLoggingTask+0x22>
		  osDelay(500);
 8011946:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801194a:	f007 f982 	bl	8018c52 <osDelay>
	  while (mg_fs_mounted() == 0){
 801194e:	f009 fdaf 	bl	801b4b0 <mg_fs_mounted>
 8011952:	2800      	cmp	r0, #0
 8011954:	d0f7      	beq.n	8011946 <StartLoggingTask+0x1a>
	uint32_t count = 20000;
 8011956:	f644 6420 	movw	r4, #20000	@ 0x4e20
 801195a:	e050      	b.n	80119fe <StartLoggingTask+0xd2>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 801195c:	2300      	movs	r3, #0
 801195e:	461a      	mov	r2, r3
 8011960:	a907      	add	r1, sp, #28
 8011962:	4849      	ldr	r0, [pc, #292]	@ (8011a88 <StartLoggingTask+0x15c>)
 8011964:	6800      	ldr	r0, [r0, #0]
 8011966:	f007 faae 	bl	8018ec6 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 801196a:	2102      	movs	r1, #2
 801196c:	4847      	ldr	r0, [pc, #284]	@ (8011a8c <StartLoggingTask+0x160>)
 801196e:	f009 fd19 	bl	801b3a4 <mg_fs_lfs_open>
 8011972:	4605      	mov	r5, r0
		  flash_status_flag = mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len);
 8011974:	f89d 211d 	ldrb.w	r2, [sp, #285]	@ 0x11d
 8011978:	f10d 011d 	add.w	r1, sp, #29
 801197c:	f009 fd4e 	bl	801b41c <mg_fs_lfs_write>
 8011980:	4b43      	ldr	r3, [pc, #268]	@ (8011a90 <StartLoggingTask+0x164>)
 8011982:	7018      	strb	r0, [r3, #0]
		  mg_fs_lfs_close(f_pointer);
 8011984:	4628      	mov	r0, r5
 8011986:	f009 fd31 	bl	801b3ec <mg_fs_lfs_close>
 801198a:	e03e      	b.n	8011a0a <StartLoggingTask+0xde>
    	vPortGetHeapStats(&heap_status);
 801198c:	a848      	add	r0, sp, #288	@ 0x120
 801198e:	f009 fc23 	bl	801b1d8 <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8011992:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8011994:	9304      	str	r3, [sp, #16]
 8011996:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 8011998:	9303      	str	r3, [sp, #12]
 801199a:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 801199c:	9302      	str	r3, [sp, #8]
 801199e:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 80119a0:	9301      	str	r3, [sp, #4]
 80119a2:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 80119a4:	9300      	str	r3, [sp, #0]
 80119a6:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 80119a8:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 80119aa:	493a      	ldr	r1, [pc, #232]	@ (8011a94 <StartLoggingTask+0x168>)
 80119ac:	2001      	movs	r0, #1
 80119ae:	f000 fc1b 	bl	80121e8 <logging>
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80119b2:	4b39      	ldr	r3, [pc, #228]	@ (8011a98 <StartLoggingTask+0x16c>)
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80119b8:	0e13      	lsrs	r3, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 80119ba:	9301      	str	r3, [sp, #4]
 80119bc:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80119c0:	9300      	str	r3, [sp, #0]
 80119c2:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80119c6:	b2d2      	uxtb	r2, r2
 80119c8:	4934      	ldr	r1, [pc, #208]	@ (8011a9c <StartLoggingTask+0x170>)
 80119ca:	2001      	movs	r0, #1
 80119cc:	f000 fc0c 	bl	80121e8 <logging>
    	logging(L_INFO, "Read bytes from flash: %lu", sFLASH_GetReadedBytes());
 80119d0:	f004 fde4 	bl	801659c <sFLASH_GetReadedBytes>
 80119d4:	4602      	mov	r2, r0
 80119d6:	4932      	ldr	r1, [pc, #200]	@ (8011aa0 <StartLoggingTask+0x174>)
 80119d8:	2001      	movs	r0, #1
 80119da:	f000 fc05 	bl	80121e8 <logging>
    	logging(L_INFO, "Write bytes to flash: %lu", sFLASH_GetWritedBytes());
 80119de:	f004 fde3 	bl	80165a8 <sFLASH_GetWritedBytes>
 80119e2:	4602      	mov	r2, r0
 80119e4:	492f      	ldr	r1, [pc, #188]	@ (8011aa4 <StartLoggingTask+0x178>)
 80119e6:	2001      	movs	r0, #1
 80119e8:	f000 fbfe 	bl	80121e8 <logging>
    	logging(L_INFO, "Erased sectors: %lu", sFLASH_GetEraceSectorTimes());
 80119ec:	f004 fde2 	bl	80165b4 <sFLASH_GetEraceSectorTimes>
 80119f0:	4602      	mov	r2, r0
 80119f2:	492d      	ldr	r1, [pc, #180]	@ (8011aa8 <StartLoggingTask+0x17c>)
 80119f4:	2001      	movs	r0, #1
 80119f6:	f000 fbf7 	bl	80121e8 <logging>
    	count = 0;
 80119fa:	2400      	movs	r4, #0
    count ++;
 80119fc:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 80119fe:	4b22      	ldr	r3, [pc, #136]	@ (8011a88 <StartLoggingTask+0x15c>)
 8011a00:	6818      	ldr	r0, [r3, #0]
 8011a02:	f007 faa1 	bl	8018f48 <osMessageQueueGetCount>
 8011a06:	2800      	cmp	r0, #0
 8011a08:	d1a8      	bne.n	801195c <StartLoggingTask+0x30>
    osDelay(500);
 8011a0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a0e:	f007 f920 	bl	8018c52 <osDelay>
    if (count == 20000){
 8011a12:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011a16:	429c      	cmp	r4, r3
 8011a18:	d1f0      	bne.n	80119fc <StartLoggingTask+0xd0>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	a94f      	add	r1, sp, #316	@ 0x13c
 8011a1e:	481b      	ldr	r0, [pc, #108]	@ (8011a8c <StartLoggingTask+0x160>)
 8011a20:	f009 fc82 	bl	801b328 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011a24:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8011a26:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d9ae      	bls.n	801198c <StartLoggingTask+0x60>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 8011a2e:	4c1f      	ldr	r4, [pc, #124]	@ (8011aac <StartLoggingTask+0x180>)
 8011a30:	4620      	mov	r0, r4
 8011a32:	f009 fd25 	bl	801b480 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 8011a36:	4621      	mov	r1, r4
 8011a38:	4814      	ldr	r0, [pc, #80]	@ (8011a8c <StartLoggingTask+0x160>)
 8011a3a:	f009 fd15 	bl	801b468 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 8011a3e:	491c      	ldr	r1, [pc, #112]	@ (8011ab0 <StartLoggingTask+0x184>)
 8011a40:	2001      	movs	r0, #1
 8011a42:	f000 fbd1 	bl	80121e8 <logging>
    			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011a46:	4b14      	ldr	r3, [pc, #80]	@ (8011a98 <StartLoggingTask+0x16c>)
 8011a48:	6859      	ldr	r1, [r3, #4]
 8011a4a:	780a      	ldrb	r2, [r1, #0]
 8011a4c:	784b      	ldrb	r3, [r1, #1]
    			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011a4e:	7888      	ldrb	r0, [r1, #2]
 8011a50:	78cc      	ldrb	r4, [r1, #3]
    			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011a52:	790d      	ldrb	r5, [r1, #4]
 8011a54:	7949      	ldrb	r1, [r1, #5]
        	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011a56:	9103      	str	r1, [sp, #12]
 8011a58:	9502      	str	r5, [sp, #8]
 8011a5a:	9401      	str	r4, [sp, #4]
 8011a5c:	9000      	str	r0, [sp, #0]
 8011a5e:	4915      	ldr	r1, [pc, #84]	@ (8011ab4 <StartLoggingTask+0x188>)
 8011a60:	2001      	movs	r0, #1
 8011a62:	f000 fbc1 	bl	80121e8 <logging>
        	logging(L_INFO, "Flash chip model name: %s",  get_flash_chip_model());
 8011a66:	f009 fd29 	bl	801b4bc <get_flash_chip_model>
 8011a6a:	4602      	mov	r2, r0
 8011a6c:	4912      	ldr	r1, [pc, #72]	@ (8011ab8 <StartLoggingTask+0x18c>)
 8011a6e:	2001      	movs	r0, #1
 8011a70:	f000 fbba 	bl	80121e8 <logging>
        	logging(L_INFO, "Firmware version: %s", dev_sw_ver);
 8011a74:	4a11      	ldr	r2, [pc, #68]	@ (8011abc <StartLoggingTask+0x190>)
 8011a76:	4912      	ldr	r1, [pc, #72]	@ (8011ac0 <StartLoggingTask+0x194>)
 8011a78:	2001      	movs	r0, #1
 8011a7a:	f000 fbb5 	bl	80121e8 <logging>
 8011a7e:	e785      	b.n	801198c <StartLoggingTask+0x60>
 8011a80:	0801130d 	.word	0x0801130d
 8011a84:	08036850 	.word	0x08036850
 8011a88:	200008e4 	.word	0x200008e4
 8011a8c:	08036864 	.word	0x08036864
 8011a90:	20000911 	.word	0x20000911
 8011a94:	080368f8 	.word	0x080368f8
 8011a98:	20000914 	.word	0x20000914
 8011a9c:	0803698c 	.word	0x0803698c
 8011aa0:	080369a8 	.word	0x080369a8
 8011aa4:	080369c4 	.word	0x080369c4
 8011aa8:	080369e0 	.word	0x080369e0
 8011aac:	08036874 	.word	0x08036874
 8011ab0:	08036884 	.word	0x08036884
 8011ab4:	08036898 	.word	0x08036898
 8011ab8:	080368c0 	.word	0x080368c0
 8011abc:	080368dc 	.word	0x080368dc
 8011ac0:	080368e0 	.word	0x080368e0

08011ac4 <StartWatchDogTask>:
{
 8011ac4:	b508      	push	{r3, lr}
	HAL_IWDG_Refresh(&hiwdg);
 8011ac6:	4806      	ldr	r0, [pc, #24]	@ (8011ae0 <StartWatchDogTask+0x1c>)
 8011ac8:	f005 fd92 	bl	80175f0 <HAL_IWDG_Refresh>
    osDelay(500);
 8011acc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011ad0:	f007 f8bf 	bl	8018c52 <osDelay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8011ad4:	2101      	movs	r1, #1
 8011ad6:	4803      	ldr	r0, [pc, #12]	@ (8011ae4 <StartWatchDogTask+0x20>)
 8011ad8:	f005 f945 	bl	8016d66 <HAL_GPIO_TogglePin>
  for(;;)
 8011adc:	e7f3      	b.n	8011ac6 <StartWatchDogTask+0x2>
 8011ade:	bf00      	nop
 8011ae0:	20000970 	.word	0x20000970
 8011ae4:	40020400 	.word	0x40020400

08011ae8 <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 8011ae8:	b500      	push	{lr}
 8011aea:	b087      	sub	sp, #28
 8011aec:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8011af0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011af4:	9300      	str	r3, [sp, #0]
 8011af6:	2301      	movs	r3, #1
 8011af8:	f10d 0217 	add.w	r2, sp, #23
 8011afc:	f10d 010f 	add.w	r1, sp, #15
 8011b00:	4803      	ldr	r0, [pc, #12]	@ (8011b10 <EthTxn+0x28>)
 8011b02:	f006 fb04 	bl	801810e <HAL_SPI_TransmitReceive>
}
 8011b06:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8011b0a:	b007      	add	sp, #28
 8011b0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b10:	20000980 	.word	0x20000980

08011b14 <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 8011b14:	b500      	push	{lr}
 8011b16:	b083      	sub	sp, #12
 8011b18:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011b1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b20:	2201      	movs	r2, #1
 8011b22:	f10d 0107 	add.w	r1, sp, #7
 8011b26:	4803      	ldr	r0, [pc, #12]	@ (8011b34 <FlashSPIsendByte+0x20>)
 8011b28:	f006 fa0f 	bl	8017f4a <HAL_SPI_Transmit>
}
 8011b2c:	b003      	add	sp, #12
 8011b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b32:	bf00      	nop
 8011b34:	200009d8 	.word	0x200009d8

08011b38 <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 8011b38:	b508      	push	{r3, lr}
 8011b3a:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011b3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b40:	4601      	mov	r1, r0
 8011b42:	4802      	ldr	r0, [pc, #8]	@ (8011b4c <FlashSPIrecvBuff+0x14>)
 8011b44:	f006 fc0d 	bl	8018362 <HAL_SPI_Receive>
}
 8011b48:	bd08      	pop	{r3, pc}
 8011b4a:	bf00      	nop
 8011b4c:	200009d8 	.word	0x200009d8

08011b50 <FS_Lock>:
void FS_Lock(void * param){
 8011b50:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8011b52:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011b56:	4b02      	ldr	r3, [pc, #8]	@ (8011b60 <FS_Lock+0x10>)
 8011b58:	6818      	ldr	r0, [r3, #0]
 8011b5a:	f007 f8d1 	bl	8018d00 <osMutexAcquire>
}
 8011b5e:	bd08      	pop	{r3, pc}
 8011b60:	200008dc 	.word	0x200008dc

08011b64 <FS_Unlock>:
void FS_Unlock(void * param){
 8011b64:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 8011b66:	4b02      	ldr	r3, [pc, #8]	@ (8011b70 <FS_Unlock+0xc>)
 8011b68:	6818      	ldr	r0, [r3, #0]
 8011b6a:	f007 f8f8 	bl	8018d5e <osMutexRelease>
}
 8011b6e:	bd08      	pop	{r3, pc}
 8011b70:	200008dc 	.word	0x200008dc

08011b74 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8011b74:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 8011b76:	482c      	ldr	r0, [pc, #176]	@ (8011c28 <MX_FREERTOS_Init+0xb4>)
 8011b78:	f007 f879 	bl	8018c6e <osMutexNew>
 8011b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8011c2c <MX_FREERTOS_Init+0xb8>)
 8011b7e:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 8011b80:	482b      	ldr	r0, [pc, #172]	@ (8011c30 <MX_FREERTOS_Init+0xbc>)
 8011b82:	f007 f874 	bl	8018c6e <osMutexNew>
 8011b86:	4b2b      	ldr	r3, [pc, #172]	@ (8011c34 <MX_FREERTOS_Init+0xc0>)
 8011b88:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 8011b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8011c38 <MX_FREERTOS_Init+0xc4>)
 8011b8c:	2103      	movs	r1, #3
 8011b8e:	2001      	movs	r0, #1
 8011b90:	f007 f90c 	bl	8018dac <osMessageQueueNew>
 8011b94:	4b29      	ldr	r3, [pc, #164]	@ (8011c3c <MX_FREERTOS_Init+0xc8>)
 8011b96:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8011b98:	4a29      	ldr	r2, [pc, #164]	@ (8011c40 <MX_FREERTOS_Init+0xcc>)
 8011b9a:	2103      	movs	r1, #3
 8011b9c:	2001      	movs	r0, #1
 8011b9e:	f007 f905 	bl	8018dac <osMessageQueueNew>
 8011ba2:	4b28      	ldr	r3, [pc, #160]	@ (8011c44 <MX_FREERTOS_Init+0xd0>)
 8011ba4:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 8011ba6:	4a28      	ldr	r2, [pc, #160]	@ (8011c48 <MX_FREERTOS_Init+0xd4>)
 8011ba8:	2103      	movs	r1, #3
 8011baa:	2001      	movs	r0, #1
 8011bac:	f007 f8fe 	bl	8018dac <osMessageQueueNew>
 8011bb0:	4b26      	ldr	r3, [pc, #152]	@ (8011c4c <MX_FREERTOS_Init+0xd8>)
 8011bb2:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011bb4:	4a26      	ldr	r2, [pc, #152]	@ (8011c50 <MX_FREERTOS_Init+0xdc>)
 8011bb6:	21c6      	movs	r1, #198	@ 0xc6
 8011bb8:	2001      	movs	r0, #1
 8011bba:	f007 f8f7 	bl	8018dac <osMessageQueueNew>
 8011bbe:	4b25      	ldr	r3, [pc, #148]	@ (8011c54 <MX_FREERTOS_Init+0xe0>)
 8011bc0:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 8011bc2:	4a25      	ldr	r2, [pc, #148]	@ (8011c58 <MX_FREERTOS_Init+0xe4>)
 8011bc4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8011bc8:	200f      	movs	r0, #15
 8011bca:	f007 f8ef 	bl	8018dac <osMessageQueueNew>
 8011bce:	4b23      	ldr	r3, [pc, #140]	@ (8011c5c <MX_FREERTOS_Init+0xe8>)
 8011bd0:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 8011bd2:	4a23      	ldr	r2, [pc, #140]	@ (8011c60 <MX_FREERTOS_Init+0xec>)
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	4823      	ldr	r0, [pc, #140]	@ (8011c64 <MX_FREERTOS_Init+0xf0>)
 8011bd8:	f006 ffdc 	bl	8018b94 <osThreadNew>
 8011bdc:	4b22      	ldr	r3, [pc, #136]	@ (8011c68 <MX_FREERTOS_Init+0xf4>)
 8011bde:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 8011be0:	4a22      	ldr	r2, [pc, #136]	@ (8011c6c <MX_FREERTOS_Init+0xf8>)
 8011be2:	2100      	movs	r1, #0
 8011be4:	4822      	ldr	r0, [pc, #136]	@ (8011c70 <MX_FREERTOS_Init+0xfc>)
 8011be6:	f006 ffd5 	bl	8018b94 <osThreadNew>
 8011bea:	4b22      	ldr	r3, [pc, #136]	@ (8011c74 <MX_FREERTOS_Init+0x100>)
 8011bec:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8011bee:	4a22      	ldr	r2, [pc, #136]	@ (8011c78 <MX_FREERTOS_Init+0x104>)
 8011bf0:	2100      	movs	r1, #0
 8011bf2:	4822      	ldr	r0, [pc, #136]	@ (8011c7c <MX_FREERTOS_Init+0x108>)
 8011bf4:	f006 ffce 	bl	8018b94 <osThreadNew>
 8011bf8:	4b21      	ldr	r3, [pc, #132]	@ (8011c80 <MX_FREERTOS_Init+0x10c>)
 8011bfa:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 8011bfc:	4a21      	ldr	r2, [pc, #132]	@ (8011c84 <MX_FREERTOS_Init+0x110>)
 8011bfe:	2100      	movs	r1, #0
 8011c00:	4821      	ldr	r0, [pc, #132]	@ (8011c88 <MX_FREERTOS_Init+0x114>)
 8011c02:	f006 ffc7 	bl	8018b94 <osThreadNew>
 8011c06:	4b21      	ldr	r3, [pc, #132]	@ (8011c8c <MX_FREERTOS_Init+0x118>)
 8011c08:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 8011c0a:	4a21      	ldr	r2, [pc, #132]	@ (8011c90 <MX_FREERTOS_Init+0x11c>)
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	4821      	ldr	r0, [pc, #132]	@ (8011c94 <MX_FREERTOS_Init+0x120>)
 8011c10:	f006 ffc0 	bl	8018b94 <osThreadNew>
 8011c14:	4b20      	ldr	r3, [pc, #128]	@ (8011c98 <MX_FREERTOS_Init+0x124>)
 8011c16:	6018      	str	r0, [r3, #0]
  WatchDogHandle = osThreadNew(StartWatchDogTask, NULL, &WatchDog_attributes);
 8011c18:	4a20      	ldr	r2, [pc, #128]	@ (8011c9c <MX_FREERTOS_Init+0x128>)
 8011c1a:	2100      	movs	r1, #0
 8011c1c:	4820      	ldr	r0, [pc, #128]	@ (8011ca0 <MX_FREERTOS_Init+0x12c>)
 8011c1e:	f006 ffb9 	bl	8018b94 <osThreadNew>
 8011c22:	4b20      	ldr	r3, [pc, #128]	@ (8011ca4 <MX_FREERTOS_Init+0x130>)
 8011c24:	6018      	str	r0, [r3, #0]
}
 8011c26:	bd08      	pop	{r3, pc}
 8011c28:	08036adc 	.word	0x08036adc
 8011c2c:	200008e0 	.word	0x200008e0
 8011c30:	08036acc 	.word	0x08036acc
 8011c34:	200008dc 	.word	0x200008dc
 8011c38:	08036b4c 	.word	0x08036b4c
 8011c3c:	200008f4 	.word	0x200008f4
 8011c40:	08036b34 	.word	0x08036b34
 8011c44:	200008f0 	.word	0x200008f0
 8011c48:	08036b1c 	.word	0x08036b1c
 8011c4c:	200008ec 	.word	0x200008ec
 8011c50:	08036b04 	.word	0x08036b04
 8011c54:	200008e8 	.word	0x200008e8
 8011c58:	08036aec 	.word	0x08036aec
 8011c5c:	200008e4 	.word	0x200008e4
 8011c60:	08036c18 	.word	0x08036c18
 8011c64:	08011cd1 	.word	0x08011cd1
 8011c68:	2000090c 	.word	0x2000090c
 8011c6c:	08036bf4 	.word	0x08036bf4
 8011c70:	080111cd 	.word	0x080111cd
 8011c74:	20000908 	.word	0x20000908
 8011c78:	08036bd0 	.word	0x08036bd0
 8011c7c:	08011609 	.word	0x08011609
 8011c80:	20000904 	.word	0x20000904
 8011c84:	08036bac 	.word	0x08036bac
 8011c88:	08011335 	.word	0x08011335
 8011c8c:	20000900 	.word	0x20000900
 8011c90:	08036b88 	.word	0x08036b88
 8011c94:	0801192d 	.word	0x0801192d
 8011c98:	200008fc 	.word	0x200008fc
 8011c9c:	08036b64 	.word	0x08036b64
 8011ca0:	08011ac5 	.word	0x08011ac5
 8011ca4:	200008f8 	.word	0x200008f8

08011ca8 <EthResetBegin>:
void EthResetBegin(void){
 8011ca8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 8011caa:	2200      	movs	r2, #0
 8011cac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011cb0:	4801      	ldr	r0, [pc, #4]	@ (8011cb8 <EthResetBegin+0x10>)
 8011cb2:	f005 f852 	bl	8016d5a <HAL_GPIO_WritePin>
}
 8011cb6:	bd08      	pop	{r3, pc}
 8011cb8:	40020000 	.word	0x40020000

08011cbc <EthResetEnd>:
void EthResetEnd(void){
 8011cbc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011cc4:	4801      	ldr	r0, [pc, #4]	@ (8011ccc <EthResetEnd+0x10>)
 8011cc6:	f005 f848 	bl	8016d5a <HAL_GPIO_WritePin>
}
 8011cca:	bd08      	pop	{r3, pc}
 8011ccc:	40020000 	.word	0x40020000

08011cd0 <StartEthTask>:
{
 8011cd0:	b530      	push	{r4, r5, lr}
 8011cd2:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 8011cd4:	ad22      	add	r5, sp, #136	@ 0x88
 8011cd6:	4b64      	ldr	r3, [pc, #400]	@ (8011e68 <StartEthTask+0x198>)
 8011cd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011cda:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 8011cde:	ac02      	add	r4, sp, #8
 8011ce0:	2280      	movs	r2, #128	@ 0x80
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	f01b fa03 	bl	802d0f0 <memset>
 8011cea:	2340      	movs	r3, #64	@ 0x40
 8011cec:	f88d 3008 	strb.w	r3, [sp, #8]
 8011cf0:	2322      	movs	r3, #34	@ 0x22
 8011cf2:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 8011cf6:	4b5d      	ldr	r3, [pc, #372]	@ (8011e6c <StartEthTask+0x19c>)
 8011cf8:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 8011cfa:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 8011cfe:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 8011d00:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 8011d04:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 8011d06:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 8011d0a:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 8011d0c:	f88d 300d 	strb.w	r3, [sp, #13]
 8011d10:	2301      	movs	r3, #1
 8011d12:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8011d16:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011d1a:	4b55      	ldr	r3, [pc, #340]	@ (8011e70 <StartEthTask+0x1a0>)
 8011d1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d1e:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 8011d20:	4b54      	ldr	r3, [pc, #336]	@ (8011e74 <StartEthTask+0x1a4>)
 8011d22:	aa58      	add	r2, sp, #352	@ 0x160
 8011d24:	601a      	str	r2, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 8011d26:	605c      	str	r4, [r3, #4]
  while (mg_fs_mounted() == 0){
 8011d28:	e003      	b.n	8011d32 <StartEthTask+0x62>
	  osDelay(500);
 8011d2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011d2e:	f006 ff90 	bl	8018c52 <osDelay>
  while (mg_fs_mounted() == 0){
 8011d32:	f009 fbbd 	bl	801b4b0 <mg_fs_mounted>
 8011d36:	2800      	cmp	r0, #0
 8011d38:	d0f7      	beq.n	8011d2a <StartEthTask+0x5a>
  mg_mgr_init(&mgr);        // Mongoose event manager
 8011d3a:	a858      	add	r0, sp, #352	@ 0x160
 8011d3c:	f011 ffca 	bl	8023cd4 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 8011d40:	4b4d      	ldr	r3, [pc, #308]	@ (8011e78 <StartEthTask+0x1a8>)
 8011d42:	2203      	movs	r2, #3
 8011d44:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011d46:	f002 ff71 	bl	8014c2c <dash_hdl>
 8011d4a:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011d4c:	e00f      	b.n	8011d6e <StartEthTask+0x9e>
	  EthResetBegin();
 8011d4e:	f7ff ffab 	bl	8011ca8 <EthResetBegin>
	  osDelay(500);
 8011d52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011d56:	f006 ff7c 	bl	8018c52 <osDelay>
	  EthResetEnd();
 8011d5a:	f7ff ffaf 	bl	8011cbc <EthResetEnd>
	  osDelay(2000);
 8011d5e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011d62:	f006 ff76 	bl	8018c52 <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011d66:	a902      	add	r1, sp, #8
 8011d68:	a858      	add	r0, sp, #352	@ 0x160
 8011d6a:	f017 fbe3 	bl	8029534 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011d6e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d0eb      	beq.n	8011d4e <StartEthTask+0x7e>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011d76:	2106      	movs	r1, #6
 8011d78:	a802      	add	r0, sp, #8
 8011d7a:	f003 fbc1 	bl	8015500 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 8011d7e:	483f      	ldr	r0, [pc, #252]	@ (8011e7c <StartEthTask+0x1ac>)
 8011d80:	f002 ff62 	bl	8014c48 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011d84:	4b3b      	ldr	r3, [pc, #236]	@ (8011e74 <StartEthTask+0x1a4>)
 8011d86:	4622      	mov	r2, r4
 8011d88:	493d      	ldr	r1, [pc, #244]	@ (8011e80 <StartEthTask+0x1b0>)
 8011d8a:	a858      	add	r0, sp, #352	@ 0x160
 8011d8c:	f015 fe00 	bl	8027990 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011d90:	e006      	b.n	8011da0 <StartEthTask+0xd0>
    mg_mgr_poll(&mgr, 1);
 8011d92:	2101      	movs	r1, #1
 8011d94:	a858      	add	r0, sp, #352	@ 0x160
 8011d96:	f018 f967 	bl	802a068 <mg_mgr_poll>
    osDelay(1);
 8011d9a:	2001      	movs	r0, #1
 8011d9c:	f006 ff59 	bl	8018c52 <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011da0:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011da4:	2b03      	cmp	r3, #3
 8011da6:	d1f4      	bne.n	8011d92 <StartEthTask+0xc2>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011da8:	4b32      	ldr	r3, [pc, #200]	@ (8011e74 <StartEthTask+0x1a4>)
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011dae:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011db0:	9301      	str	r3, [sp, #4]
 8011db2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011db6:	9300      	str	r3, [sp, #0]
 8011db8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011dbc:	b2d2      	uxtb	r2, r2
 8011dbe:	4931      	ldr	r1, [pc, #196]	@ (8011e84 <StartEthTask+0x1b4>)
 8011dc0:	2001      	movs	r0, #1
 8011dc2:	f000 fa11 	bl	80121e8 <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	4611      	mov	r1, r2
 8011dca:	a826      	add	r0, sp, #152	@ 0x98
 8011dcc:	f7ff fbe2 	bl	8011594 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 8011dd0:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011dd4:	b1eb      	cbz	r3, 8011e12 <StartEthTask+0x142>
	  logging(L_INFO, "MQTT function enabled.");
 8011dd6:	492c      	ldr	r1, [pc, #176]	@ (8011e88 <StartEthTask+0x1b8>)
 8011dd8:	2001      	movs	r0, #1
 8011dda:	f000 fa05 	bl	80121e8 <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 8011dde:	4b27      	ldr	r3, [pc, #156]	@ (8011e7c <StartEthTask+0x1ac>)
 8011de0:	9301      	str	r3, [sp, #4]
 8011de2:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 8011de6:	9300      	str	r3, [sp, #0]
 8011de8:	ab47      	add	r3, sp, #284	@ 0x11c
 8011dea:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8011dee:	a902      	add	r1, sp, #8
 8011df0:	a858      	add	r0, sp, #352	@ 0x160
 8011df2:	f003 fac3 	bl	801537c <mqtt_init>
  start_sntp(&mgr);
 8011df6:	a858      	add	r0, sp, #352	@ 0x160
 8011df8:	f003 ff58 	bl	8015cac <start_sntp>
  ssdp_start_server(&mgr, &mif);
 8011dfc:	a902      	add	r1, sp, #8
 8011dfe:	a858      	add	r0, sp, #352	@ 0x160
 8011e00:	f004 f920 	bl	8016044 <ssdp_start_server>
  init_mb_tcp(&mgr);
 8011e04:	a858      	add	r0, sp, #352	@ 0x160
 8011e06:	f001 f855 	bl	8012eb4 <init_mb_tcp>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 8011e0a:	f008 f97f 	bl	801a10c <xTaskGetTickCount>
 8011e0e:	4605      	mov	r5, r0
 8011e10:	e008      	b.n	8011e24 <StartEthTask+0x154>
	  logging(L_INFO, "MQTT function disabled");
 8011e12:	491e      	ldr	r1, [pc, #120]	@ (8011e8c <StartEthTask+0x1bc>)
 8011e14:	2001      	movs	r0, #1
 8011e16:	f000 f9e7 	bl	80121e8 <logging>
 8011e1a:	e7ec      	b.n	8011df6 <StartEthTask+0x126>
      osDelay(1);
 8011e1c:	2001      	movs	r0, #1
 8011e1e:	f006 ff18 	bl	8018c52 <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 8011e22:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 8011e24:	f008 f972 	bl	801a10c <xTaskGetTickCount>
 8011e28:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011e2a:	1b41      	subs	r1, r0, r5
 8011e2c:	a858      	add	r0, sp, #352	@ 0x160
 8011e2e:	f018 f91b 	bl	802a068 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 8011e32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	a802      	add	r0, sp, #8
 8011e38:	4798      	blx	r3
 8011e3a:	2800      	cmp	r0, #0
 8011e3c:	d1ee      	bne.n	8011e1c <StartEthTask+0x14c>
    	  EthResetBegin(); //enable reset state w5500
 8011e3e:	f7ff ff33 	bl	8011ca8 <EthResetBegin>
    	  osDelay(100);
 8011e42:	2064      	movs	r0, #100	@ 0x64
 8011e44:	f006 ff05 	bl	8018c52 <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 8011e48:	f7ff ff38 	bl	8011cbc <EthResetEnd>
    	  osDelay(3000);
 8011e4c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011e50:	f006 feff 	bl	8018c52 <osDelay>
    	  mif.driver->init(&mif);
 8011e54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	a802      	add	r0, sp, #8
 8011e5a:	4798      	blx	r3
    	  osDelay(7000);
 8011e5c:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011e60:	f006 fef7 	bl	8018c52 <osDelay>
 8011e64:	e7e5      	b.n	8011e32 <StartEthTask+0x162>
 8011e66:	bf00      	nop
 8011e68:	08036424 	.word	0x08036424
 8011e6c:	1fff7a00 	.word	0x1fff7a00
 8011e70:	20000118 	.word	0x20000118
 8011e74:	20000914 	.word	0x20000914
 8011e78:	2000012c 	.word	0x2000012c
 8011e7c:	08011595 	.word	0x08011595
 8011e80:	080369f4 	.word	0x080369f4
 8011e84:	0803698c 	.word	0x0803698c
 8011e88:	08036a08 	.word	0x08036a08
 8011e8c:	08036a20 	.word	0x08036a20

08011e90 <eMBRegDiscreteCB>:
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){

	eMBErrorCode eStatus = MB_ENOERR;

	//usAddress --; /* to c-style address */
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011e90:	b20b      	sxth	r3, r1
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	dd20      	ble.n	8011ed8 <eMBRegDiscreteCB+0x48>
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){
 8011e96:	b570      	push	{r4, r5, r6, lr}
 8011e98:	b082      	sub	sp, #8
 8011e9a:	4606      	mov	r6, r0
 8011e9c:	4615      	mov	r5, r2
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011e9e:	188b      	adds	r3, r1, r2
 8011ea0:	2b04      	cmp	r3, #4
 8011ea2:	dd02      	ble.n	8011eaa <eMBRegDiscreteCB+0x1a>

		for(int i = usAddress; i < usNDiscrete; i++){
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
		}
	}else{
		eStatus = MB_ENOREG;
 8011ea4:	2001      	movs	r0, #1
	}
	return eStatus;
}
 8011ea6:	b002      	add	sp, #8
 8011ea8:	bd70      	pop	{r4, r5, r6, pc}
		usAddress --; /* to c-style address */
 8011eaa:	1e4c      	subs	r4, r1, #1
 8011eac:	b2a4      	uxth	r4, r4
		RW_parameters_from_queue(input, S_INPUTS, S_READ);
 8011eae:	2200      	movs	r2, #0
 8011eb0:	2101      	movs	r1, #1
 8011eb2:	a801      	add	r0, sp, #4
 8011eb4:	f7ff fb6e 	bl	8011594 <RW_parameters_from_queue>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011eb8:	e00a      	b.n	8011ed0 <eMBRegDiscreteCB+0x40>
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
 8011eba:	f104 0308 	add.w	r3, r4, #8
 8011ebe:	446b      	add	r3, sp
 8011ec0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011ec4:	2201      	movs	r2, #1
 8011ec6:	b2a1      	uxth	r1, r4
 8011ec8:	4630      	mov	r0, r6
 8011eca:	f000 fe49 	bl	8012b60 <xMBUtilSetBits>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011ece:	3401      	adds	r4, #1
 8011ed0:	42a5      	cmp	r5, r4
 8011ed2:	dcf2      	bgt.n	8011eba <eMBRegDiscreteCB+0x2a>
	eMBErrorCode eStatus = MB_ENOERR;
 8011ed4:	2000      	movs	r0, #0
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011ed6:	e7e6      	b.n	8011ea6 <eMBRegDiscreteCB+0x16>
		eStatus = MB_ENOREG;
 8011ed8:	2001      	movs	r0, #1
}
 8011eda:	4770      	bx	lr

08011edc <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 8011edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ede:	b083      	sub	sp, #12
 8011ee0:	4616      	mov	r6, r2
	eMBErrorCode eStatus = MB_ENOERR;

	if (((int16_t) usAddress >= OUTPUTS_FIRST_INDEX) && (usAddress + usNCoils <= OUTPUTS_FIRST_INDEX + OUTPUTS_COUNT)){
 8011ee2:	b20a      	sxth	r2, r1
 8011ee4:	2a00      	cmp	r2, #0
 8011ee6:	dd43      	ble.n	8011f70 <eMBRegCoilsCB+0x94>
 8011ee8:	4605      	mov	r5, r0
 8011eea:	461f      	mov	r7, r3
 8011eec:	198b      	adds	r3, r1, r6
 8011eee:	2b04      	cmp	r3, #4
 8011ef0:	dc41      	bgt.n	8011f76 <eMBRegCoilsCB+0x9a>
		outputs_state_t outputs;

		switch (eMode) {
 8011ef2:	b327      	cbz	r7, 8011f3e <eMBRegCoilsCB+0x62>
 8011ef4:	2f01      	cmp	r7, #1
 8011ef6:	d139      	bne.n	8011f6c <eMBRegCoilsCB+0x90>

			case MB_REG_WRITE:
				usAddress --; /* to c-style address */
 8011ef8:	3901      	subs	r1, #1
 8011efa:	b28c      	uxth	r4, r1
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011efc:	2200      	movs	r2, #0
 8011efe:	2102      	movs	r1, #2
 8011f00:	a801      	add	r0, sp, #4
 8011f02:	f7ff fb47 	bl	8011594 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011f06:	4627      	mov	r7, r4
 8011f08:	e00f      	b.n	8011f2a <eMBRegCoilsCB+0x4e>
					UCHAR wbit = xMBUtilGetBits(pucRegBuffer, i, 1 );
 8011f0a:	2201      	movs	r2, #1
 8011f0c:	b2b9      	uxth	r1, r7
 8011f0e:	4628      	mov	r0, r5
 8011f10:	f000 fe5a 	bl	8012bc8 <xMBUtilGetBits>
					outputs[i] = xMBUtilGetBits(pucRegBuffer, 0, 1 );
 8011f14:	2201      	movs	r2, #1
 8011f16:	2100      	movs	r1, #0
 8011f18:	4628      	mov	r0, r5
 8011f1a:	f000 fe55 	bl	8012bc8 <xMBUtilGetBits>
 8011f1e:	f107 0308 	add.w	r3, r7, #8
 8011f22:	446b      	add	r3, sp
 8011f24:	f803 0c04 	strb.w	r0, [r3, #-4]
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011f28:	3701      	adds	r7, #1
 8011f2a:	1933      	adds	r3, r6, r4
 8011f2c:	42bb      	cmp	r3, r7
 8011f2e:	dcec      	bgt.n	8011f0a <eMBRegCoilsCB+0x2e>
					//xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
				}
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_WRITE);
 8011f30:	2201      	movs	r2, #1
 8011f32:	2102      	movs	r1, #2
 8011f34:	a801      	add	r0, sp, #4
 8011f36:	f7ff fb2d 	bl	8011594 <RW_parameters_from_queue>
				return MB_ENOERR;
 8011f3a:	2000      	movs	r0, #0
 8011f3c:	e019      	b.n	8011f72 <eMBRegCoilsCB+0x96>
				break;
			case MB_REG_READ:
				usAddress --; /* to c-style address */
 8011f3e:	1e4c      	subs	r4, r1, #1
 8011f40:	b2a4      	uxth	r4, r4
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011f42:	2200      	movs	r2, #0
 8011f44:	2102      	movs	r1, #2
 8011f46:	a801      	add	r0, sp, #4
 8011f48:	f7ff fb24 	bl	8011594 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils; i++){
 8011f4c:	e00a      	b.n	8011f64 <eMBRegCoilsCB+0x88>
					xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
 8011f4e:	f104 0308 	add.w	r3, r4, #8
 8011f52:	446b      	add	r3, sp
 8011f54:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011f58:	2201      	movs	r2, #1
 8011f5a:	b2a1      	uxth	r1, r4
 8011f5c:	4628      	mov	r0, r5
 8011f5e:	f000 fdff 	bl	8012b60 <xMBUtilSetBits>
				for(int i = usAddress; i < usNCoils; i++){
 8011f62:	3401      	adds	r4, #1
 8011f64:	42a6      	cmp	r6, r4
 8011f66:	dcf2      	bgt.n	8011f4e <eMBRegCoilsCB+0x72>
				}
				return MB_ENOERR;
 8011f68:	4638      	mov	r0, r7
 8011f6a:	e002      	b.n	8011f72 <eMBRegCoilsCB+0x96>
		switch (eMode) {
 8011f6c:	2001      	movs	r0, #1
				break;
			default:
				return MB_ENOREG;
				break;
 8011f6e:	e000      	b.n	8011f72 <eMBRegCoilsCB+0x96>
		}
	}
	return MB_ENOREG;
 8011f70:	2001      	movs	r0, #1
}
 8011f72:	b003      	add	sp, #12
 8011f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return MB_ENOREG;
 8011f76:	2001      	movs	r0, #1
 8011f78:	e7fb      	b.n	8011f72 <eMBRegCoilsCB+0x96>

08011f7a <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	return MB_ENOREG;
}
 8011f7a:	2001      	movs	r0, #1
 8011f7c:	4770      	bx	lr

08011f7e <eMBRegHoldingCB>:

eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
	return MB_ENOREG;
}
 8011f7e:	2001      	movs	r0, #1
 8011f80:	4770      	bx	lr
	...

08011f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f88:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f8a:	2400      	movs	r4, #0
 8011f8c:	9403      	str	r4, [sp, #12]
 8011f8e:	9404      	str	r4, [sp, #16]
 8011f90:	9405      	str	r4, [sp, #20]
 8011f92:	9406      	str	r4, [sp, #24]
 8011f94:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011f96:	9400      	str	r4, [sp, #0]
 8011f98:	4b3c      	ldr	r3, [pc, #240]	@ (801208c <MX_GPIO_Init+0x108>)
 8011f9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011f9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011fa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8011fa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011fa4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8011fa8:	9200      	str	r2, [sp, #0]
 8011faa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011fac:	9401      	str	r4, [sp, #4]
 8011fae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011fb0:	f042 0201 	orr.w	r2, r2, #1
 8011fb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8011fb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011fb8:	f002 0201 	and.w	r2, r2, #1
 8011fbc:	9201      	str	r2, [sp, #4]
 8011fbe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011fc0:	9402      	str	r4, [sp, #8]
 8011fc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011fc4:	f042 0202 	orr.w	r2, r2, #2
 8011fc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8011fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fcc:	f003 0302 	and.w	r3, r3, #2
 8011fd0:	9302      	str	r3, [sp, #8]
 8011fd2:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011fd4:	4e2e      	ldr	r6, [pc, #184]	@ (8012090 <MX_GPIO_Init+0x10c>)
 8011fd6:	4622      	mov	r2, r4
 8011fd8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011fdc:	4630      	mov	r0, r6
 8011fde:	f004 febc 	bl	8016d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8011fe2:	4d2c      	ldr	r5, [pc, #176]	@ (8012094 <MX_GPIO_Init+0x110>)
 8011fe4:	4622      	mov	r2, r4
 8011fe6:	2107      	movs	r1, #7
 8011fe8:	4628      	mov	r0, r5
 8011fea:	f004 feb6 	bl	8016d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011fee:	2201      	movs	r2, #1
 8011ff0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	f004 feb0 	bl	8016d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8012000:	4630      	mov	r0, r6
 8012002:	f004 feaa 	bl	8016d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : input1_Pin input2_Pin input3_Pin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8012006:	f04f 0907 	mov.w	r9, #7
 801200a:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801200e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8012010:	f04f 0802 	mov.w	r8, #2
 8012014:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012018:	a903      	add	r1, sp, #12
 801201a:	4630      	mov	r0, r6
 801201c:	f004 fd2a 	bl	8016a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : coil1_Pin coil2_Pin coil3_Pin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8012020:	23e0      	movs	r3, #224	@ 0xe0
 8012022:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012024:	2701      	movs	r7, #1
 8012026:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012028:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801202a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801202c:	a903      	add	r1, sp, #12
 801202e:	4630      	mov	r0, r6
 8012030:	f004 fd20 	bl	8016a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8012034:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012038:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801203a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801203c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801203e:	a903      	add	r1, sp, #12
 8012040:	4628      	mov	r0, r5
 8012042:	f004 fd17 	bl	8016a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8012046:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801204a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801204c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801204e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012050:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8012054:	a903      	add	r1, sp, #12
 8012056:	4628      	mov	r0, r5
 8012058:	f004 fd0c 	bl	8016a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_RST_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 801205c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8012060:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012062:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012064:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012066:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801206a:	a903      	add	r1, sp, #12
 801206c:	4630      	mov	r0, r6
 801206e:	f004 fd01 	bl	8016a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8012072:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012076:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012078:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801207a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 801207c:	a903      	add	r1, sp, #12
 801207e:	4628      	mov	r0, r5
 8012080:	f004 fcf8 	bl	8016a74 <HAL_GPIO_Init>

}
 8012084:	b009      	add	sp, #36	@ 0x24
 8012086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801208a:	bf00      	nop
 801208c:	40023800 	.word	0x40023800
 8012090:	40020000 	.word	0x40020000
 8012094:	40020400 	.word	0x40020400

08012098 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8012098:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801209a:	480b      	ldr	r0, [pc, #44]	@ (80120c8 <MX_I2C1_Init+0x30>)
 801209c:	4b0b      	ldr	r3, [pc, #44]	@ (80120cc <MX_I2C1_Init+0x34>)
 801209e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 80120a0:	4b0b      	ldr	r3, [pc, #44]	@ (80120d0 <MX_I2C1_Init+0x38>)
 80120a2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80120a4:	2300      	movs	r3, #0
 80120a6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80120a8:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80120aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80120ae:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80120b0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80120b2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80120b4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80120b6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80120b8:	f004 fff0 	bl	801709c <HAL_I2C_Init>
 80120bc:	b900      	cbnz	r0, 80120c0 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80120be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80120c0:	f000 f93c 	bl	801233c <Error_Handler>
}
 80120c4:	e7fb      	b.n	80120be <MX_I2C1_Init+0x26>
 80120c6:	bf00      	nop
 80120c8:	2000091c 	.word	0x2000091c
 80120cc:	40005400 	.word	0x40005400
 80120d0:	00030d40 	.word	0x00030d40

080120d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80120d4:	b530      	push	{r4, r5, lr}
 80120d6:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80120d8:	2300      	movs	r3, #0
 80120da:	9303      	str	r3, [sp, #12]
 80120dc:	9304      	str	r3, [sp, #16]
 80120de:	9305      	str	r3, [sp, #20]
 80120e0:	9306      	str	r3, [sp, #24]
 80120e2:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80120e4:	6802      	ldr	r2, [r0, #0]
 80120e6:	4b15      	ldr	r3, [pc, #84]	@ (801213c <HAL_I2C_MspInit+0x68>)
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d001      	beq.n	80120f0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80120ec:	b009      	add	sp, #36	@ 0x24
 80120ee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80120f0:	2500      	movs	r5, #0
 80120f2:	9501      	str	r5, [sp, #4]
 80120f4:	4c12      	ldr	r4, [pc, #72]	@ (8012140 <HAL_I2C_MspInit+0x6c>)
 80120f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80120f8:	f043 0302 	orr.w	r3, r3, #2
 80120fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80120fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012100:	f003 0302 	and.w	r3, r3, #2
 8012104:	9301      	str	r3, [sp, #4]
 8012106:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8012108:	23c0      	movs	r3, #192	@ 0xc0
 801210a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801210c:	2312      	movs	r3, #18
 801210e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012110:	2301      	movs	r3, #1
 8012112:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012114:	2303      	movs	r3, #3
 8012116:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8012118:	2304      	movs	r3, #4
 801211a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801211c:	a903      	add	r1, sp, #12
 801211e:	4809      	ldr	r0, [pc, #36]	@ (8012144 <HAL_I2C_MspInit+0x70>)
 8012120:	f004 fca8 	bl	8016a74 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8012124:	9502      	str	r5, [sp, #8]
 8012126:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012128:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801212c:	6423      	str	r3, [r4, #64]	@ 0x40
 801212e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012134:	9302      	str	r3, [sp, #8]
 8012136:	9b02      	ldr	r3, [sp, #8]
}
 8012138:	e7d8      	b.n	80120ec <HAL_I2C_MspInit+0x18>
 801213a:	bf00      	nop
 801213c:	40005400 	.word	0x40005400
 8012140:	40023800 	.word	0x40023800
 8012144:	40020400 	.word	0x40020400

08012148 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8012148:	6802      	ldr	r2, [r0, #0]
 801214a:	4b0a      	ldr	r3, [pc, #40]	@ (8012174 <HAL_I2C_MspDeInit+0x2c>)
 801214c:	429a      	cmp	r2, r3
 801214e:	d000      	beq.n	8012152 <HAL_I2C_MspDeInit+0xa>
 8012150:	4770      	bx	lr
{
 8012152:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8012154:	4a08      	ldr	r2, [pc, #32]	@ (8012178 <HAL_I2C_MspDeInit+0x30>)
 8012156:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012158:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801215c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 801215e:	4c07      	ldr	r4, [pc, #28]	@ (801217c <HAL_I2C_MspDeInit+0x34>)
 8012160:	2140      	movs	r1, #64	@ 0x40
 8012162:	4620      	mov	r0, r4
 8012164:	f004 fd6a 	bl	8016c3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8012168:	2180      	movs	r1, #128	@ 0x80
 801216a:	4620      	mov	r0, r4
 801216c:	f004 fd66 	bl	8016c3c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8012170:	bd10      	pop	{r4, pc}
 8012172:	bf00      	nop
 8012174:	40005400 	.word	0x40005400
 8012178:	40023800 	.word	0x40023800
 801217c:	40020400 	.word	0x40020400

08012180 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8012180:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8012182:	4807      	ldr	r0, [pc, #28]	@ (80121a0 <MX_IWDG_Init+0x20>)
 8012184:	4b07      	ldr	r3, [pc, #28]	@ (80121a4 <MX_IWDG_Init+0x24>)
 8012186:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8012188:	2303      	movs	r3, #3
 801218a:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 801218c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8012190:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8012192:	f005 fa01 	bl	8017598 <HAL_IWDG_Init>
 8012196:	b900      	cbnz	r0, 801219a <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8012198:	bd08      	pop	{r3, pc}
    Error_Handler();
 801219a:	f000 f8cf 	bl	801233c <Error_Handler>
}
 801219e:	e7fb      	b.n	8012198 <MX_IWDG_Init+0x18>
 80121a0:	20000970 	.word	0x20000970
 80121a4:	40003000 	.word	0x40003000

080121a8 <proto>:
#define time_ms_now() mg_now()

logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 80121a8:	b084      	sub	sp, #16
 80121aa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80121ae:	b004      	add	sp, #16
 80121b0:	4770      	bx	lr

080121b2 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 80121b2:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80121b4:	fb01 f400 	mul.w	r4, r1, r0
 80121b8:	4620      	mov	r0, r4
 80121ba:	f008 ff4d 	bl	801b058 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80121be:	4605      	mov	r5, r0
 80121c0:	b118      	cbz	r0, 80121ca <mg_calloc+0x18>
 80121c2:	4622      	mov	r2, r4
 80121c4:	2100      	movs	r1, #0
 80121c6:	f01a ff93 	bl	802d0f0 <memset>
  return p;
}
 80121ca:	4628      	mov	r0, r5
 80121cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080121d0 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 80121d0:	b108      	cbz	r0, 80121d6 <reg_logging_fn+0x6>
		_send_log_mess = fn;
 80121d2:	4a01      	ldr	r2, [pc, #4]	@ (80121d8 <reg_logging_fn+0x8>)
 80121d4:	6010      	str	r0, [r2, #0]
	}
}
 80121d6:	4770      	bx	lr
 80121d8:	20000000 	.word	0x20000000

080121dc <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 80121dc:	4b01      	ldr	r3, [pc, #4]	@ (80121e4 <logger_set_level+0x8>)
 80121de:	7018      	strb	r0, [r3, #0]
}
 80121e0:	4770      	bx	lr
 80121e2:	bf00      	nop
 80121e4:	2000097c 	.word	0x2000097c

080121e8 <logging>:

void logging(logging_level_t level, const char *format, ...){
 80121e8:	b40e      	push	{r1, r2, r3}
 80121ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121ec:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 80121f0:	4b44      	ldr	r3, [pc, #272]	@ (8012304 <logging+0x11c>)
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	4283      	cmp	r3, r0
 80121f6:	d905      	bls.n	8012204 <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 80121f8:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 80121fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012200:	b003      	add	sp, #12
 8012202:	4770      	bx	lr
 8012204:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8012206:	2101      	movs	r1, #1
 8012208:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801220c:	f7ff ffd1 	bl	80121b2 <mg_calloc>
    if (!tmp_buf){
 8012210:	4605      	mov	r5, r0
 8012212:	2800      	cmp	r0, #0
 8012214:	d0f0      	beq.n	80121f8 <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 8012216:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801221a:	2100      	movs	r1, #0
 801221c:	a85b      	add	r0, sp, #364	@ 0x16c
 801221e:	f01a ff67 	bl	802d0f0 <memset>
    mess.log_level = level;
 8012222:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 8012226:	f017 ffb3 	bl	802a190 <mg_now>
 801222a:	f7fe f9c7 	bl	80105bc <__aeabi_ul2d>
 801222e:	4606      	mov	r6, r0
 8012230:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 8012232:	2200      	movs	r2, #0
 8012234:	4b34      	ldr	r3, [pc, #208]	@ (8012308 <logging+0x120>)
 8012236:	f7fe fb21 	bl	801087c <__aeabi_ddiv>
 801223a:	f7fe fdb9 	bl	8010db0 <__aeabi_d2lz>
 801223e:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 8012242:	a94f      	add	r1, sp, #316	@ 0x13c
 8012244:	a858      	add	r0, sp, #352	@ 0x160
 8012246:	f01a ffe9 	bl	802d21c <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 801224a:	ab4f      	add	r3, sp, #316	@ 0x13c
 801224c:	4a2f      	ldr	r2, [pc, #188]	@ (801230c <logging+0x124>)
 801224e:	2140      	movs	r1, #64	@ 0x40
 8012250:	a83f      	add	r0, sp, #252	@ 0xfc
 8012252:	f01b fdf5 	bl	802de40 <strftime>
 8012256:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 8012258:	4630      	mov	r0, r6
 801225a:	4639      	mov	r1, r7
 801225c:	f7fe fc94 	bl	8010b88 <__aeabi_d2iz>
 8012260:	4a2b      	ldr	r2, [pc, #172]	@ (8012310 <logging+0x128>)
 8012262:	fb82 3200 	smull	r3, r2, r2, r0
 8012266:	17c3      	asrs	r3, r0, #31
 8012268:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 801226c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012270:	fb02 0313 	mls	r3, r2, r3, r0
 8012274:	4a27      	ldr	r2, [pc, #156]	@ (8012314 <logging+0x12c>)
 8012276:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 801227a:	a83f      	add	r0, sp, #252	@ 0xfc
 801227c:	4420      	add	r0, r4
 801227e:	f01a fa0d 	bl	802c69c <snprintf>
 8012282:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 8012284:	1c63      	adds	r3, r4, #1
 8012286:	2220      	movs	r2, #32
 8012288:	a93f      	add	r1, sp, #252	@ 0xfc
 801228a:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 801228c:	2200      	movs	r2, #0
 801228e:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 8012290:	aba2      	add	r3, sp, #648	@ 0x288
 8012292:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8012294:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 8012298:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 801229a:	21fd      	movs	r1, #253	@ 0xfd
 801229c:	4630      	mov	r0, r6
 801229e:	f01a fcc5 	bl	802cc2c <vsnprintf>
 80122a2:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 80122a4:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 80122a8:	9601      	str	r6, [sp, #4]
 80122aa:	4b1b      	ldr	r3, [pc, #108]	@ (8012318 <logging+0x130>)
 80122ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122b0:	9300      	str	r3, [sp, #0]
 80122b2:	ab3f      	add	r3, sp, #252	@ 0xfc
 80122b4:	4a19      	ldr	r2, [pc, #100]	@ (801231c <logging+0x134>)
 80122b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80122ba:	4628      	mov	r0, r5
 80122bc:	f01a f9ee 	bl	802c69c <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 80122c0:	2cf5      	cmp	r4, #245	@ 0xf5
 80122c2:	d81b      	bhi.n	80122fc <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 80122c4:	4628      	mov	r0, r5
 80122c6:	f7fd ffeb 	bl	80102a0 <strlen>
 80122ca:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 80122ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80122d2:	4629      	mov	r1, r5
 80122d4:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 80122d8:	f01a ff51 	bl	802d17e <strncpy>
    if (_send_log_mess) {
 80122dc:	4b10      	ldr	r3, [pc, #64]	@ (8012320 <logging+0x138>)
 80122de:	681e      	ldr	r6, [r3, #0]
 80122e0:	b146      	cbz	r6, 80122f4 <logging+0x10c>
        _send_log_mess(mess);
 80122e2:	ac5b      	add	r4, sp, #364	@ 0x16c
 80122e4:	22f2      	movs	r2, #242	@ 0xf2
 80122e6:	a95f      	add	r1, sp, #380	@ 0x17c
 80122e8:	4668      	mov	r0, sp
 80122ea:	f01c f93d 	bl	802e568 <memcpy>
 80122ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80122f2:	47b0      	blx	r6
    free(tmp_buf);
 80122f4:	4628      	mov	r0, r5
 80122f6:	f008 ff31 	bl	801b15c <vPortFree>
 80122fa:	e77d      	b.n	80121f8 <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 80122fc:	23f6      	movs	r3, #246	@ 0xf6
 80122fe:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 8012302:	e7e4      	b.n	80122ce <logging+0xe6>
 8012304:	2000097c 	.word	0x2000097c
 8012308:	408f4000 	.word	0x408f4000
 801230c:	08036c3c 	.word	0x08036c3c
 8012310:	10624dd3 	.word	0x10624dd3
 8012314:	08036c50 	.word	0x08036c50
 8012318:	20000004 	.word	0x20000004
 801231c:	08036c58 	.word	0x08036c58
 8012320:	20000000 	.word	0x20000000

08012324 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012324:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8012326:	6802      	ldr	r2, [r0, #0]
 8012328:	4b03      	ldr	r3, [pc, #12]	@ (8012338 <HAL_TIM_PeriodElapsedCallback+0x14>)
 801232a:	429a      	cmp	r2, r3
 801232c:	d000      	beq.n	8012330 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801232e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8012330:	f004 f960 	bl	80165f4 <HAL_IncTick>
}
 8012334:	e7fb      	b.n	801232e <HAL_TIM_PeriodElapsedCallback+0xa>
 8012336:	bf00      	nop
 8012338:	40014000 	.word	0x40014000

0801233c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801233c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801233e:	e7fe      	b.n	801233e <Error_Handler+0x2>

08012340 <SystemClock_Config>:
{
 8012340:	b500      	push	{lr}
 8012342:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012344:	2230      	movs	r2, #48	@ 0x30
 8012346:	2100      	movs	r1, #0
 8012348:	a808      	add	r0, sp, #32
 801234a:	f01a fed1 	bl	802d0f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801234e:	2300      	movs	r3, #0
 8012350:	9303      	str	r3, [sp, #12]
 8012352:	9304      	str	r3, [sp, #16]
 8012354:	9305      	str	r3, [sp, #20]
 8012356:	9306      	str	r3, [sp, #24]
 8012358:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 801235a:	9301      	str	r3, [sp, #4]
 801235c:	4a20      	ldr	r2, [pc, #128]	@ (80123e0 <SystemClock_Config+0xa0>)
 801235e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8012360:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8012364:	6411      	str	r1, [r2, #64]	@ 0x40
 8012366:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8012368:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 801236c:	9201      	str	r2, [sp, #4]
 801236e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012370:	9302      	str	r3, [sp, #8]
 8012372:	4b1c      	ldr	r3, [pc, #112]	@ (80123e4 <SystemClock_Config+0xa4>)
 8012374:	681a      	ldr	r2, [r3, #0]
 8012376:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 801237a:	601a      	str	r2, [r3, #0]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8012382:	9302      	str	r3, [sp, #8]
 8012384:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8012386:	2309      	movs	r3, #9
 8012388:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801238a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801238e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8012390:	2301      	movs	r3, #1
 8012392:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012394:	2202      	movs	r2, #2
 8012396:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8012398:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801239c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 801239e:	2304      	movs	r3, #4
 80123a0:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80123a2:	2164      	movs	r1, #100	@ 0x64
 80123a4:	9111      	str	r1, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80123a6:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80123a8:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80123aa:	a808      	add	r0, sp, #32
 80123ac:	f005 f926 	bl	80175fc <HAL_RCC_OscConfig>
 80123b0:	b988      	cbnz	r0, 80123d6 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80123b2:	230f      	movs	r3, #15
 80123b4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80123b6:	2302      	movs	r3, #2
 80123b8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80123ba:	2300      	movs	r3, #0
 80123bc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80123be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80123c2:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80123c4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80123c6:	2103      	movs	r1, #3
 80123c8:	a803      	add	r0, sp, #12
 80123ca:	f005 fb81 	bl	8017ad0 <HAL_RCC_ClockConfig>
 80123ce:	b920      	cbnz	r0, 80123da <SystemClock_Config+0x9a>
}
 80123d0:	b015      	add	sp, #84	@ 0x54
 80123d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80123d6:	f7ff ffb1 	bl	801233c <Error_Handler>
    Error_Handler();
 80123da:	f7ff ffaf 	bl	801233c <Error_Handler>
 80123de:	bf00      	nop
 80123e0:	40023800 	.word	0x40023800
 80123e4:	40007000 	.word	0x40007000

080123e8 <main>:
{
 80123e8:	b500      	push	{lr}
 80123ea:	b083      	sub	sp, #12
 80123ec:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80123ee:	4b12      	ldr	r3, [pc, #72]	@ (8012438 <main+0x50>)
 80123f0:	4a12      	ldr	r2, [pc, #72]	@ (801243c <main+0x54>)
 80123f2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80123f4:	b662      	cpsie	i
	volatile int i = 1000000;
 80123f6:	4b12      	ldr	r3, [pc, #72]	@ (8012440 <main+0x58>)
 80123f8:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 80123fa:	e002      	b.n	8012402 <main+0x1a>
		i--;
 80123fc:	9b01      	ldr	r3, [sp, #4]
 80123fe:	3b01      	subs	r3, #1
 8012400:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8012402:	9b01      	ldr	r3, [sp, #4]
 8012404:	2b00      	cmp	r3, #0
 8012406:	dcf9      	bgt.n	80123fc <main+0x14>
  HAL_Init();
 8012408:	f004 f8da 	bl	80165c0 <HAL_Init>
  SystemClock_Config();
 801240c:	f7ff ff98 	bl	8012340 <SystemClock_Config>
  MX_GPIO_Init();
 8012410:	f7ff fdb8 	bl	8011f84 <MX_GPIO_Init>
  MX_SPI2_Init();
 8012414:	f000 f838 	bl	8012488 <MX_SPI2_Init>
  MX_I2C1_Init();
 8012418:	f7ff fe3e 	bl	8012098 <MX_I2C1_Init>
  MX_SPI1_Init();
 801241c:	f000 f812 	bl	8012444 <MX_SPI1_Init>
  MX_IWDG_Init();
 8012420:	f7ff feae 	bl	8012180 <MX_IWDG_Init>
  MX_ADC1_Init();
 8012424:	f7fe fe5a 	bl	80110dc <MX_ADC1_Init>
  osKernelInitialize();
 8012428:	f006 fb86 	bl	8018b38 <osKernelInitialize>
  MX_FREERTOS_Init();
 801242c:	f7ff fba2 	bl	8011b74 <MX_FREERTOS_Init>
  osKernelStart();
 8012430:	f006 fb94 	bl	8018b5c <osKernelStart>
  while (1)
 8012434:	e7fe      	b.n	8012434 <main+0x4c>
 8012436:	bf00      	nop
 8012438:	e000ed00 	.word	0xe000ed00
 801243c:	08010000 	.word	0x08010000
 8012440:	000f4240 	.word	0x000f4240

08012444 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8012444:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8012446:	480e      	ldr	r0, [pc, #56]	@ (8012480 <MX_SPI1_Init+0x3c>)
 8012448:	4b0e      	ldr	r3, [pc, #56]	@ (8012484 <MX_SPI1_Init+0x40>)
 801244a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801244c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012450:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012452:	2300      	movs	r3, #0
 8012454:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012456:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012458:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801245a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801245c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012460:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8012462:	2208      	movs	r2, #8
 8012464:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012466:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012468:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801246a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 801246c:	230a      	movs	r3, #10
 801246e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8012470:	f005 fd0c 	bl	8017e8c <HAL_SPI_Init>
 8012474:	b900      	cbnz	r0, 8012478 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8012476:	bd08      	pop	{r3, pc}
    Error_Handler();
 8012478:	f7ff ff60 	bl	801233c <Error_Handler>
}
 801247c:	e7fb      	b.n	8012476 <MX_SPI1_Init+0x32>
 801247e:	bf00      	nop
 8012480:	200009d8 	.word	0x200009d8
 8012484:	40013000 	.word	0x40013000

08012488 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8012488:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 801248a:	480d      	ldr	r0, [pc, #52]	@ (80124c0 <MX_SPI2_Init+0x38>)
 801248c:	4b0d      	ldr	r3, [pc, #52]	@ (80124c4 <MX_SPI2_Init+0x3c>)
 801248e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8012490:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012494:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8012496:	2300      	movs	r3, #0
 8012498:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801249a:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 801249c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801249e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80124a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80124a4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80124a6:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80124a8:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80124aa:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80124ac:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80124ae:	230a      	movs	r3, #10
 80124b0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80124b2:	f005 fceb 	bl	8017e8c <HAL_SPI_Init>
 80124b6:	b900      	cbnz	r0, 80124ba <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80124b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80124ba:	f7ff ff3f 	bl	801233c <Error_Handler>
}
 80124be:	e7fb      	b.n	80124b8 <MX_SPI2_Init+0x30>
 80124c0:	20000980 	.word	0x20000980
 80124c4:	40003800 	.word	0x40003800

080124c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80124c8:	b500      	push	{lr}
 80124ca:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80124cc:	2300      	movs	r3, #0
 80124ce:	9305      	str	r3, [sp, #20]
 80124d0:	9306      	str	r3, [sp, #24]
 80124d2:	9307      	str	r3, [sp, #28]
 80124d4:	9308      	str	r3, [sp, #32]
 80124d6:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 80124d8:	6803      	ldr	r3, [r0, #0]
 80124da:	4a28      	ldr	r2, [pc, #160]	@ (801257c <HAL_SPI_MspInit+0xb4>)
 80124dc:	4293      	cmp	r3, r2
 80124de:	d005      	beq.n	80124ec <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 80124e0:	4a27      	ldr	r2, [pc, #156]	@ (8012580 <HAL_SPI_MspInit+0xb8>)
 80124e2:	4293      	cmp	r3, r2
 80124e4:	d025      	beq.n	8012532 <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80124e6:	b00b      	add	sp, #44	@ 0x2c
 80124e8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80124ec:	2100      	movs	r1, #0
 80124ee:	9101      	str	r1, [sp, #4]
 80124f0:	4b24      	ldr	r3, [pc, #144]	@ (8012584 <HAL_SPI_MspInit+0xbc>)
 80124f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80124f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80124f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80124fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80124fc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8012500:	9201      	str	r2, [sp, #4]
 8012502:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012504:	9102      	str	r1, [sp, #8]
 8012506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012508:	f042 0202 	orr.w	r2, r2, #2
 801250c:	631a      	str	r2, [r3, #48]	@ 0x30
 801250e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012510:	f003 0302 	and.w	r3, r3, #2
 8012514:	9302      	str	r3, [sp, #8]
 8012516:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8012518:	2338      	movs	r3, #56	@ 0x38
 801251a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801251c:	2302      	movs	r3, #2
 801251e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012520:	2303      	movs	r3, #3
 8012522:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012524:	2305      	movs	r3, #5
 8012526:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012528:	a905      	add	r1, sp, #20
 801252a:	4817      	ldr	r0, [pc, #92]	@ (8012588 <HAL_SPI_MspInit+0xc0>)
 801252c:	f004 faa2 	bl	8016a74 <HAL_GPIO_Init>
 8012530:	e7d9      	b.n	80124e6 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8012532:	2100      	movs	r1, #0
 8012534:	9103      	str	r1, [sp, #12]
 8012536:	4b13      	ldr	r3, [pc, #76]	@ (8012584 <HAL_SPI_MspInit+0xbc>)
 8012538:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801253a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801253e:	641a      	str	r2, [r3, #64]	@ 0x40
 8012540:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012542:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8012546:	9203      	str	r2, [sp, #12]
 8012548:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801254a:	9104      	str	r1, [sp, #16]
 801254c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801254e:	f042 0202 	orr.w	r2, r2, #2
 8012552:	631a      	str	r2, [r3, #48]	@ 0x30
 8012554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012556:	f003 0302 	and.w	r3, r3, #2
 801255a:	9304      	str	r3, [sp, #16]
 801255c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 801255e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8012562:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012564:	2302      	movs	r3, #2
 8012566:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012568:	2303      	movs	r3, #3
 801256a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801256c:	2305      	movs	r3, #5
 801256e:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012570:	a905      	add	r1, sp, #20
 8012572:	4805      	ldr	r0, [pc, #20]	@ (8012588 <HAL_SPI_MspInit+0xc0>)
 8012574:	f004 fa7e 	bl	8016a74 <HAL_GPIO_Init>
}
 8012578:	e7b5      	b.n	80124e6 <HAL_SPI_MspInit+0x1e>
 801257a:	bf00      	nop
 801257c:	40013000 	.word	0x40013000
 8012580:	40003800 	.word	0x40003800
 8012584:	40023800 	.word	0x40023800
 8012588:	40020400 	.word	0x40020400

0801258c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801258c:	b500      	push	{lr}
 801258e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012590:	2200      	movs	r2, #0
 8012592:	9200      	str	r2, [sp, #0]
 8012594:	4b0d      	ldr	r3, [pc, #52]	@ (80125cc <HAL_MspInit+0x40>)
 8012596:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012598:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 801259c:	6459      	str	r1, [r3, #68]	@ 0x44
 801259e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80125a0:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80125a4:	9100      	str	r1, [sp, #0]
 80125a6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80125a8:	9201      	str	r2, [sp, #4]
 80125aa:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80125ac:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80125b0:	6419      	str	r1, [r3, #64]	@ 0x40
 80125b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80125b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80125b8:	9301      	str	r3, [sp, #4]
 80125ba:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80125bc:	210f      	movs	r1, #15
 80125be:	f06f 0001 	mvn.w	r0, #1
 80125c2:	f004 fa3f 	bl	8016a44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80125c6:	b003      	add	sp, #12
 80125c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80125cc:	40023800 	.word	0x40023800

080125d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80125d0:	b530      	push	{r4, r5, lr}
 80125d2:	b089      	sub	sp, #36	@ 0x24
 80125d4:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80125d6:	2400      	movs	r4, #0
 80125d8:	9401      	str	r4, [sp, #4]
 80125da:	4b1d      	ldr	r3, [pc, #116]	@ (8012650 <HAL_InitTick+0x80>)
 80125dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80125de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80125e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80125e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80125ea:	9301      	str	r3, [sp, #4]
 80125ec:	9b01      	ldr	r3, [sp, #4]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80125ee:	a902      	add	r1, sp, #8
 80125f0:	a803      	add	r0, sp, #12
 80125f2:	f005 fb43 	bl	8017c7c <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80125f6:	f005 fb31 	bl	8017c5c <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80125fa:	4a16      	ldr	r2, [pc, #88]	@ (8012654 <HAL_InitTick+0x84>)
 80125fc:	fba2 2300 	umull	r2, r3, r2, r0
 8012600:	0c9b      	lsrs	r3, r3, #18
 8012602:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8012604:	4814      	ldr	r0, [pc, #80]	@ (8012658 <HAL_InitTick+0x88>)
 8012606:	4a15      	ldr	r2, [pc, #84]	@ (801265c <HAL_InitTick+0x8c>)
 8012608:	6002      	str	r2, [r0, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 801260a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 801260e:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8012610:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 8012612:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012614:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012616:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8012618:	f006 f8ae 	bl	8018778 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 801261c:	4604      	mov	r4, r0
 801261e:	b110      	cbz	r0, 8012626 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8012620:	4620      	mov	r0, r4
 8012622:	b009      	add	sp, #36	@ 0x24
 8012624:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 8012626:	480c      	ldr	r0, [pc, #48]	@ (8012658 <HAL_InitTick+0x88>)
 8012628:	f005 ff60 	bl	80184ec <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 801262c:	4604      	mov	r4, r0
 801262e:	2800      	cmp	r0, #0
 8012630:	d1f6      	bne.n	8012620 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8012632:	2018      	movs	r0, #24
 8012634:	f004 fa16 	bl	8016a64 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012638:	2d0f      	cmp	r5, #15
 801263a:	d901      	bls.n	8012640 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 801263c:	2401      	movs	r4, #1
 801263e:	e7ef      	b.n	8012620 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8012640:	2200      	movs	r2, #0
 8012642:	4629      	mov	r1, r5
 8012644:	2018      	movs	r0, #24
 8012646:	f004 f9fd 	bl	8016a44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801264a:	4b05      	ldr	r3, [pc, #20]	@ (8012660 <HAL_InitTick+0x90>)
 801264c:	601d      	str	r5, [r3, #0]
 801264e:	e7e7      	b.n	8012620 <HAL_InitTick+0x50>
 8012650:	40023800 	.word	0x40023800
 8012654:	431bde83 	.word	0x431bde83
 8012658:	20000a30 	.word	0x20000a30
 801265c:	40014000 	.word	0x40014000
 8012660:	20000108 	.word	0x20000108

08012664 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012664:	e7fe      	b.n	8012664 <NMI_Handler>

08012666 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012666:	e7fe      	b.n	8012666 <HardFault_Handler>

08012668 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012668:	e7fe      	b.n	8012668 <MemManage_Handler>

0801266a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801266a:	e7fe      	b.n	801266a <BusFault_Handler>

0801266c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801266c:	e7fe      	b.n	801266c <UsageFault_Handler>

0801266e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801266e:	4770      	bx	lr

08012670 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8012670:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8012672:	4802      	ldr	r0, [pc, #8]	@ (801267c <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8012674:	f005 ff7a 	bl	801856c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8012678:	bd08      	pop	{r3, pc}
 801267a:	bf00      	nop
 801267c:	20000a30 	.word	0x20000a30

08012680 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8012680:	2001      	movs	r0, #1
 8012682:	4770      	bx	lr

08012684 <_kill>:

int _kill(int pid, int sig)
{
 8012684:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012686:	f01b ff37 	bl	802e4f8 <__errno>
 801268a:	2316      	movs	r3, #22
 801268c:	6003      	str	r3, [r0, #0]
  return -1;
}
 801268e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012692:	bd08      	pop	{r3, pc}

08012694 <_exit>:

void _exit (int status)
{
 8012694:	b508      	push	{r3, lr}
  _kill(status, -1);
 8012696:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801269a:	f7ff fff3 	bl	8012684 <_kill>
  while (1) {}    /* Make sure we hang here */
 801269e:	e7fe      	b.n	801269e <_exit+0xa>

080126a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80126a0:	b570      	push	{r4, r5, r6, lr}
 80126a2:	460c      	mov	r4, r1
 80126a4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80126a6:	2500      	movs	r5, #0
 80126a8:	e006      	b.n	80126b8 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80126aa:	f3af 8000 	nop.w
 80126ae:	4621      	mov	r1, r4
 80126b0:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80126b4:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80126b6:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80126b8:	42b5      	cmp	r5, r6
 80126ba:	dbf6      	blt.n	80126aa <_read+0xa>
  }

  return len;
}
 80126bc:	4630      	mov	r0, r6
 80126be:	bd70      	pop	{r4, r5, r6, pc}

080126c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80126c0:	b570      	push	{r4, r5, r6, lr}
 80126c2:	460c      	mov	r4, r1
 80126c4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80126c6:	2500      	movs	r5, #0
 80126c8:	e004      	b.n	80126d4 <_write+0x14>
  {
    __io_putchar(*ptr++);
 80126ca:	f814 0b01 	ldrb.w	r0, [r4], #1
 80126ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80126d2:	3501      	adds	r5, #1
 80126d4:	42b5      	cmp	r5, r6
 80126d6:	dbf8      	blt.n	80126ca <_write+0xa>
  }
  return len;
}
 80126d8:	4630      	mov	r0, r6
 80126da:	bd70      	pop	{r4, r5, r6, pc}

080126dc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80126dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80126e0:	4770      	bx	lr

080126e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80126e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80126e6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80126e8:	2000      	movs	r0, #0
 80126ea:	4770      	bx	lr

080126ec <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80126ec:	2001      	movs	r0, #1
 80126ee:	4770      	bx	lr

080126f0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80126f0:	2000      	movs	r0, #0
 80126f2:	4770      	bx	lr

080126f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80126f4:	b510      	push	{r4, lr}
 80126f6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80126f8:	4a0c      	ldr	r2, [pc, #48]	@ (801272c <_sbrk+0x38>)
 80126fa:	490d      	ldr	r1, [pc, #52]	@ (8012730 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80126fc:	480d      	ldr	r0, [pc, #52]	@ (8012734 <_sbrk+0x40>)
 80126fe:	6800      	ldr	r0, [r0, #0]
 8012700:	b140      	cbz	r0, 8012714 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012702:	480c      	ldr	r0, [pc, #48]	@ (8012734 <_sbrk+0x40>)
 8012704:	6800      	ldr	r0, [r0, #0]
 8012706:	4403      	add	r3, r0
 8012708:	1a52      	subs	r2, r2, r1
 801270a:	4293      	cmp	r3, r2
 801270c:	d806      	bhi.n	801271c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 801270e:	4a09      	ldr	r2, [pc, #36]	@ (8012734 <_sbrk+0x40>)
 8012710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8012712:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8012714:	4807      	ldr	r0, [pc, #28]	@ (8012734 <_sbrk+0x40>)
 8012716:	4c08      	ldr	r4, [pc, #32]	@ (8012738 <_sbrk+0x44>)
 8012718:	6004      	str	r4, [r0, #0]
 801271a:	e7f2      	b.n	8012702 <_sbrk+0xe>
    errno = ENOMEM;
 801271c:	f01b feec 	bl	802e4f8 <__errno>
 8012720:	230c      	movs	r3, #12
 8012722:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8012724:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012728:	e7f3      	b.n	8012712 <_sbrk+0x1e>
 801272a:	bf00      	nop
 801272c:	20020000 	.word	0x20020000
 8012730:	00000800 	.word	0x00000800
 8012734:	20000a7c 	.word	0x20000a7c
 8012738:	2001a2b8 	.word	0x2001a2b8

0801273c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801273c:	4a03      	ldr	r2, [pc, #12]	@ (801274c <SystemInit+0x10>)
 801273e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8012742:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012746:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801274a:	4770      	bx	lr
 801274c:	e000ed00 	.word	0xe000ed00

08012750 <Reset_Handler>:
 8012750:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012788 <LoopFillZerobss+0xe>
 8012754:	f7ff fff2 	bl	801273c <SystemInit>
 8012758:	480c      	ldr	r0, [pc, #48]	@ (801278c <LoopFillZerobss+0x12>)
 801275a:	490d      	ldr	r1, [pc, #52]	@ (8012790 <LoopFillZerobss+0x16>)
 801275c:	4a0d      	ldr	r2, [pc, #52]	@ (8012794 <LoopFillZerobss+0x1a>)
 801275e:	2300      	movs	r3, #0
 8012760:	e002      	b.n	8012768 <LoopCopyDataInit>

08012762 <CopyDataInit>:
 8012762:	58d4      	ldr	r4, [r2, r3]
 8012764:	50c4      	str	r4, [r0, r3]
 8012766:	3304      	adds	r3, #4

08012768 <LoopCopyDataInit>:
 8012768:	18c4      	adds	r4, r0, r3
 801276a:	428c      	cmp	r4, r1
 801276c:	d3f9      	bcc.n	8012762 <CopyDataInit>
 801276e:	4a0a      	ldr	r2, [pc, #40]	@ (8012798 <LoopFillZerobss+0x1e>)
 8012770:	4c0a      	ldr	r4, [pc, #40]	@ (801279c <LoopFillZerobss+0x22>)
 8012772:	2300      	movs	r3, #0
 8012774:	e001      	b.n	801277a <LoopFillZerobss>

08012776 <FillZerobss>:
 8012776:	6013      	str	r3, [r2, #0]
 8012778:	3204      	adds	r2, #4

0801277a <LoopFillZerobss>:
 801277a:	42a2      	cmp	r2, r4
 801277c:	d3fb      	bcc.n	8012776 <FillZerobss>
 801277e:	f01b fec9 	bl	802e514 <__libc_init_array>
 8012782:	f7ff fe31 	bl	80123e8 <main>
 8012786:	4770      	bx	lr
 8012788:	20020000 	.word	0x20020000
 801278c:	20000000 	.word	0x20000000
 8012790:	20000870 	.word	0x20000870
 8012794:	0803ccfc 	.word	0x0803ccfc
 8012798:	20000870 	.word	0x20000870
 801279c:	2001a2b8 	.word	0x2001a2b8

080127a0 <ADC_IRQHandler>:
 80127a0:	e7fe      	b.n	80127a0 <ADC_IRQHandler>

080127a2 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80127a2:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80127a4:	880b      	ldrh	r3, [r1, #0]
 80127a6:	2b05      	cmp	r3, #5
 80127a8:	d001      	beq.n	80127ae <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127aa:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80127ac:	bd38      	pop	{r3, r4, r5, pc}
 80127ae:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80127b0:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80127b2:	7881      	ldrb	r1, [r0, #2]
 80127b4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80127b8:	3101      	adds	r1, #1
 80127ba:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80127bc:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80127be:	7902      	ldrb	r2, [r0, #4]
 80127c0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 80127c4:	1e53      	subs	r3, r2, #1
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 80127cc:	4563      	cmp	r3, ip
 80127ce:	d820      	bhi.n	8012812 <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 80127d0:	2300      	movs	r3, #0
 80127d2:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80127d4:	2301      	movs	r3, #1
 80127d6:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80127d8:	8823      	ldrh	r3, [r4, #0]
 80127da:	3301      	adds	r3, #1
 80127dc:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 80127de:	f012 0f07 	tst.w	r2, #7
 80127e2:	d010      	beq.n	8012806 <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80127e4:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 80127e8:	3301      	adds	r3, #1
 80127ea:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 80127ec:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 80127ee:	8823      	ldrh	r3, [r4, #0]
 80127f0:	3301      	adds	r3, #1
 80127f2:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80127f4:	2300      	movs	r3, #0
 80127f6:	3002      	adds	r0, #2
 80127f8:	f7ff fb70 	bl	8011edc <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80127fc:	b930      	cbnz	r0, 801280c <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 80127fe:	8823      	ldrh	r3, [r4, #0]
 8012800:	442b      	add	r3, r5
 8012802:	8023      	strh	r3, [r4, #0]
 8012804:	e7d2      	b.n	80127ac <eMBFuncReadCoils+0xa>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8012806:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 801280a:	e7ef      	b.n	80127ec <eMBFuncReadCoils+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 801280c:	f000 f9f0 	bl	8012bf0 <prveMBError2Exception>
 8012810:	e7cc      	b.n	80127ac <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012812:	2003      	movs	r0, #3
 8012814:	e7ca      	b.n	80127ac <eMBFuncReadCoils+0xa>

08012816 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012816:	880b      	ldrh	r3, [r1, #0]
 8012818:	2b05      	cmp	r3, #5
 801281a:	d001      	beq.n	8012820 <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801281c:	2003      	movs	r0, #3
 801281e:	4770      	bx	lr
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8012820:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012822:	7881      	ldrb	r1, [r0, #2]
 8012824:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012828:	3101      	adds	r1, #1
 801282a:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 801282c:	7903      	ldrb	r3, [r0, #4]
 801282e:	b9f3      	cbnz	r3, 801286e <eMBFuncWriteCoil+0x58>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8012830:	78c2      	ldrb	r2, [r0, #3]
 8012832:	1e53      	subs	r3, r2, #1
 8012834:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8012836:	2bfd      	cmp	r3, #253	@ 0xfd
 8012838:	d91b      	bls.n	8012872 <eMBFuncWriteCoil+0x5c>
{
 801283a:	b500      	push	{lr}
 801283c:	b083      	sub	sp, #12
            ucBuf[1] = 0;
 801283e:	2300      	movs	r3, #0
 8012840:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8012844:	2aff      	cmp	r2, #255	@ 0xff
 8012846:	d00b      	beq.n	8012860 <eMBFuncWriteCoil+0x4a>
                ucBuf[0] = 0;
 8012848:	2300      	movs	r3, #0
 801284a:	f88d 3004 	strb.w	r3, [sp, #4]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 801284e:	2301      	movs	r3, #1
 8012850:	461a      	mov	r2, r3
 8012852:	a801      	add	r0, sp, #4
 8012854:	f7ff fb42 	bl	8011edc <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012858:	b930      	cbnz	r0, 8012868 <eMBFuncWriteCoil+0x52>
    }
    return eStatus;
}
 801285a:	b003      	add	sp, #12
 801285c:	f85d fb04 	ldr.w	pc, [sp], #4
                ucBuf[0] = 1;
 8012860:	2301      	movs	r3, #1
 8012862:	f88d 3004 	strb.w	r3, [sp, #4]
 8012866:	e7f2      	b.n	801284e <eMBFuncWriteCoil+0x38>
                eStatus = prveMBError2Exception( eRegStatus );
 8012868:	f000 f9c2 	bl	8012bf0 <prveMBError2Exception>
 801286c:	e7f5      	b.n	801285a <eMBFuncWriteCoil+0x44>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801286e:	2003      	movs	r0, #3
 8012870:	4770      	bx	lr
 8012872:	2003      	movs	r0, #3
}
 8012874:	4770      	bx	lr

08012876 <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012876:	880b      	ldrh	r3, [r1, #0]
 8012878:	2b05      	cmp	r3, #5
 801287a:	d92d      	bls.n	80128d8 <eMBFuncWriteMultipleCoils+0x62>
{
 801287c:	b510      	push	{r4, lr}
 801287e:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012880:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8012882:	7883      	ldrb	r3, [r0, #2]
 8012884:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012888:	3301      	adds	r3, #1
 801288a:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 801288c:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 801288e:	7903      	ldrb	r3, [r0, #4]
 8012890:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8012894:	f890 e005 	ldrb.w	lr, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8012898:	f013 0f07 	tst.w	r3, #7
 801289c:	d00e      	beq.n	80128bc <eMBFuncWriteMultipleCoils+0x46>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 801289e:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 80128a2:	f10c 0c01 	add.w	ip, ip, #1
 80128a6:	fa5f fc8c 	uxtb.w	ip, ip
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 80128aa:	1e53      	subs	r3, r2, #1
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 80128b2:	d213      	bcs.n	80128dc <eMBFuncWriteMultipleCoils+0x66>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80128b4:	45f4      	cmp	ip, lr
 80128b6:	d004      	beq.n	80128c2 <eMBFuncWriteMultipleCoils+0x4c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80128b8:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80128ba:	bd10      	pop	{r4, pc}
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80128bc:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 80128c0:	e7f3      	b.n	80128aa <eMBFuncWriteMultipleCoils+0x34>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80128c2:	2301      	movs	r3, #1
 80128c4:	3006      	adds	r0, #6
 80128c6:	f7ff fb09 	bl	8011edc <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80128ca:	b910      	cbnz	r0, 80128d2 <eMBFuncWriteMultipleCoils+0x5c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80128cc:	2305      	movs	r3, #5
 80128ce:	8023      	strh	r3, [r4, #0]
 80128d0:	e7f3      	b.n	80128ba <eMBFuncWriteMultipleCoils+0x44>
                eStatus = prveMBError2Exception( eRegStatus );
 80128d2:	f000 f98d 	bl	8012bf0 <prveMBError2Exception>
 80128d6:	e7f0      	b.n	80128ba <eMBFuncWriteMultipleCoils+0x44>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80128d8:	2003      	movs	r0, #3
}
 80128da:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80128dc:	2003      	movs	r0, #3
 80128de:	e7ec      	b.n	80128ba <eMBFuncWriteMultipleCoils+0x44>

080128e0 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80128e0:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80128e2:	880b      	ldrh	r3, [r1, #0]
 80128e4:	2b05      	cmp	r3, #5
 80128e6:	d001      	beq.n	80128ec <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80128e8:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80128ea:	bd38      	pop	{r3, r4, r5, pc}
 80128ec:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80128ee:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80128f0:	7881      	ldrb	r1, [r0, #2]
 80128f2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80128f6:	3101      	adds	r1, #1
 80128f8:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 80128fa:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 80128fc:	7902      	ldrb	r2, [r0, #4]
 80128fe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 8012902:	1e53      	subs	r3, r2, #1
 8012904:	b29b      	uxth	r3, r3
 8012906:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 801290a:	4563      	cmp	r3, ip
 801290c:	d81f      	bhi.n	801294e <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 801290e:	2300      	movs	r3, #0
 8012910:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8012912:	2302      	movs	r3, #2
 8012914:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012916:	8823      	ldrh	r3, [r4, #0]
 8012918:	3301      	adds	r3, #1
 801291a:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 801291c:	f012 0f07 	tst.w	r2, #7
 8012920:	d00f      	beq.n	8012942 <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8012922:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012926:	3301      	adds	r3, #1
 8012928:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 801292a:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 801292c:	8823      	ldrh	r3, [r4, #0]
 801292e:	3301      	adds	r3, #1
 8012930:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8012932:	3002      	adds	r0, #2
 8012934:	f7ff faac 	bl	8011e90 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8012938:	b930      	cbnz	r0, 8012948 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 801293a:	8823      	ldrh	r3, [r4, #0]
 801293c:	442b      	add	r3, r5
 801293e:	8023      	strh	r3, [r4, #0]
 8012940:	e7d3      	b.n	80128ea <eMBFuncReadDiscreteInputs+0xa>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8012942:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 8012946:	e7f0      	b.n	801292a <eMBFuncReadDiscreteInputs+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8012948:	f000 f952 	bl	8012bf0 <prveMBError2Exception>
 801294c:	e7cd      	b.n	80128ea <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801294e:	2003      	movs	r0, #3
 8012950:	e7cb      	b.n	80128ea <eMBFuncReadDiscreteInputs+0xa>

08012952 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012952:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012954:	880b      	ldrh	r3, [r1, #0]
 8012956:	2b05      	cmp	r3, #5
 8012958:	d001      	beq.n	801295e <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801295a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801295c:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 801295e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012960:	7881      	ldrb	r1, [r0, #2]
 8012962:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012966:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8012968:	2301      	movs	r3, #1
 801296a:	461a      	mov	r2, r3
 801296c:	b289      	uxth	r1, r1
 801296e:	3003      	adds	r0, #3
 8012970:	f7ff fb05 	bl	8011f7e <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8012974:	2800      	cmp	r0, #0
 8012976:	d0f1      	beq.n	801295c <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 8012978:	f000 f93a 	bl	8012bf0 <prveMBError2Exception>
 801297c:	e7ee      	b.n	801295c <eMBFuncWriteHoldingRegister+0xa>

0801297e <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 801297e:	880b      	ldrh	r3, [r1, #0]
 8012980:	2b05      	cmp	r3, #5
 8012982:	d922      	bls.n	80129ca <eMBFuncWriteMultipleHoldingRegister+0x4c>
{
 8012984:	b510      	push	{r4, lr}
 8012986:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012988:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 801298a:	7883      	ldrb	r3, [r0, #2]
 801298c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012990:	3301      	adds	r3, #1
 8012992:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8012994:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8012996:	7902      	ldrb	r2, [r0, #4]
 8012998:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 801299c:	f890 c005 	ldrb.w	ip, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 80129a0:	1e53      	subs	r3, r2, #1
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	2b77      	cmp	r3, #119	@ 0x77
 80129a6:	d812      	bhi.n	80129ce <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80129a8:	0053      	lsls	r3, r2, #1
 80129aa:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80129ac:	4563      	cmp	r3, ip
 80129ae:	d001      	beq.n	80129b4 <eMBFuncWriteMultipleHoldingRegister+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80129b0:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80129b2:	bd10      	pop	{r4, pc}
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80129b4:	2301      	movs	r3, #1
 80129b6:	3006      	adds	r0, #6
 80129b8:	f7ff fae1 	bl	8011f7e <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80129bc:	b910      	cbnz	r0, 80129c4 <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80129be:	2305      	movs	r3, #5
 80129c0:	8023      	strh	r3, [r4, #0]
 80129c2:	e7f6      	b.n	80129b2 <eMBFuncWriteMultipleHoldingRegister+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 80129c4:	f000 f914 	bl	8012bf0 <prveMBError2Exception>
 80129c8:	e7f3      	b.n	80129b2 <eMBFuncWriteMultipleHoldingRegister+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80129ca:	2003      	movs	r0, #3
}
 80129cc:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80129ce:	2003      	movs	r0, #3
 80129d0:	e7ef      	b.n	80129b2 <eMBFuncWriteMultipleHoldingRegister+0x34>

080129d2 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80129d2:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80129d4:	880b      	ldrh	r3, [r1, #0]
 80129d6:	2b05      	cmp	r3, #5
 80129d8:	d001      	beq.n	80129de <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80129da:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80129dc:	bd38      	pop	{r3, r4, r5, pc}
 80129de:	4602      	mov	r2, r0
 80129e0:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80129e2:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80129e4:	7881      	ldrb	r1, [r0, #2]
 80129e6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80129ea:	3101      	adds	r1, #1
 80129ec:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80129ee:	7905      	ldrb	r5, [r0, #4]
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80129f0:	1e6b      	subs	r3, r5, #1
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	2b7c      	cmp	r3, #124	@ 0x7c
 80129f6:	d901      	bls.n	80129fc <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80129f8:	2003      	movs	r0, #3
 80129fa:	e7ef      	b.n	80129dc <eMBFuncReadHoldingRegister+0xa>
            *usLen = MB_PDU_FUNC_OFF;
 80129fc:	2300      	movs	r3, #0
 80129fe:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8012a00:	f04f 0c03 	mov.w	ip, #3
 8012a04:	f800 cb02 	strb.w	ip, [r0], #2
            *usLen += 1;
 8012a08:	f8b4 c000 	ldrh.w	ip, [r4]
 8012a0c:	f10c 0c01 	add.w	ip, ip, #1
 8012a10:	f8a4 c000 	strh.w	ip, [r4]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8012a14:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8012a18:	f882 c001 	strb.w	ip, [r2, #1]
            *usLen += 1;
 8012a1c:	8822      	ldrh	r2, [r4, #0]
 8012a1e:	3201      	adds	r2, #1
 8012a20:	8022      	strh	r2, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8012a22:	462a      	mov	r2, r5
 8012a24:	f7ff faab 	bl	8011f7e <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8012a28:	b920      	cbnz	r0, 8012a34 <eMBFuncReadHoldingRegister+0x62>
                *usLen += usRegCount * 2;
 8012a2a:	8823      	ldrh	r3, [r4, #0]
 8012a2c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012a30:	8023      	strh	r3, [r4, #0]
 8012a32:	e7d3      	b.n	80129dc <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8012a34:	f000 f8dc 	bl	8012bf0 <prveMBError2Exception>
 8012a38:	e7d0      	b.n	80129dc <eMBFuncReadHoldingRegister+0xa>

08012a3a <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8012a3c:	880b      	ldrh	r3, [r1, #0]
 8012a3e:	2b09      	cmp	r3, #9
 8012a40:	d943      	bls.n	8012aca <eMBFuncReadWriteMultipleHoldingRegister+0x90>
 8012a42:	4604      	mov	r4, r0
 8012a44:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8012a46:	7843      	ldrb	r3, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8012a48:	7881      	ldrb	r1, [r0, #2]
 8012a4a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegReadAddress++;
 8012a4e:	3101      	adds	r1, #1
 8012a50:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8012a52:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8012a54:	7907      	ldrb	r7, [r0, #4]
 8012a56:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8012a5a:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8012a5c:	7981      	ldrb	r1, [r0, #6]
 8012a5e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8012a62:	3101      	adds	r1, #1
 8012a64:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8012a66:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8012a68:	7a02      	ldrb	r2, [r0, #8]
 8012a6a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8012a6e:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8012a70:	1e7b      	subs	r3, r7, #1
 8012a72:	b29b      	uxth	r3, r3
 8012a74:	2b7c      	cmp	r3, #124	@ 0x7c
 8012a76:	d82a      	bhi.n	8012ace <eMBFuncReadWriteMultipleHoldingRegister+0x94>
 8012a78:	b35a      	cbz	r2, 8012ad2 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8012a7a:	2a79      	cmp	r2, #121	@ 0x79
 8012a7c:	d82b      	bhi.n	8012ad6 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 8012a7e:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 8012a82:	d001      	beq.n	8012a88 <eMBFuncReadWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012a84:	2003      	movs	r0, #3
 8012a86:	e021      	b.n	8012acc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8012a88:	2301      	movs	r3, #1
 8012a8a:	f104 000a 	add.w	r0, r4, #10
 8012a8e:	f7ff fa76 	bl	8011f7e <eMBRegHoldingCB>
 8012a92:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 8012a94:	b9b0      	cbnz	r0, 8012ac4 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                *usLen = MB_PDU_FUNC_OFF;
 8012a96:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8012a98:	4620      	mov	r0, r4
 8012a9a:	2217      	movs	r2, #23
 8012a9c:	f800 2b02 	strb.w	r2, [r0], #2
                *usLen += 1;
 8012aa0:	882a      	ldrh	r2, [r5, #0]
 8012aa2:	3201      	adds	r2, #1
 8012aa4:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8012aa6:	007a      	lsls	r2, r7, #1
 8012aa8:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 8012aaa:	882a      	ldrh	r2, [r5, #0]
 8012aac:	3201      	adds	r2, #1
 8012aae:	802a      	strh	r2, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8012ab0:	463a      	mov	r2, r7
 8012ab2:	4631      	mov	r1, r6
 8012ab4:	f7ff fa63 	bl	8011f7e <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 8012ab8:	b920      	cbnz	r0, 8012ac4 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                    *usLen += 2 * usRegReadCount;
 8012aba:	882b      	ldrh	r3, [r5, #0]
 8012abc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8012ac0:	802b      	strh	r3, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 8012ac2:	e003      	b.n	8012acc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
                eStatus = prveMBError2Exception( eRegStatus );
 8012ac4:	f000 f894 	bl	8012bf0 <prveMBError2Exception>
 8012ac8:	e000      	b.n	8012acc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
    eMBException    eStatus = MB_EX_NONE;
 8012aca:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 8012acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012ace:	2003      	movs	r0, #3
 8012ad0:	e7fc      	b.n	8012acc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012ad2:	2003      	movs	r0, #3
 8012ad4:	e7fa      	b.n	8012acc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012ad6:	2003      	movs	r0, #3
 8012ad8:	e7f8      	b.n	8012acc <eMBFuncReadWriteMultipleHoldingRegister+0x92>

08012ada <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012ada:	880a      	ldrh	r2, [r1, #0]
 8012adc:	2a05      	cmp	r2, #5
 8012ade:	d001      	beq.n	8012ae4 <eMBFuncReadInputRegister+0xa>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012ae0:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012ae2:	4770      	bx	lr
{
 8012ae4:	b538      	push	{r3, r4, r5, lr}
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012aea:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012aec:	7881      	ldrb	r1, [r0, #2]
 8012aee:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 8012af2:	3101      	adds	r1, #1
 8012af4:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8012af6:	78c2      	ldrb	r2, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8012af8:	7905      	ldrb	r5, [r0, #4]
 8012afa:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8012afe:	1e6a      	subs	r2, r5, #1
 8012b00:	b292      	uxth	r2, r2
        if( ( usRegCount >= 1 )
 8012b02:	2a7b      	cmp	r2, #123	@ 0x7b
 8012b04:	d901      	bls.n	8012b0a <eMBFuncReadInputRegister+0x30>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012b06:	2003      	movs	r0, #3
}
 8012b08:	bd38      	pop	{r3, r4, r5, pc}
            *usLen = MB_PDU_FUNC_OFF;
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8012b0e:	2204      	movs	r2, #4
 8012b10:	f800 2b02 	strb.w	r2, [r0], #2
            *usLen += 1;
 8012b14:	8822      	ldrh	r2, [r4, #0]
 8012b16:	3201      	adds	r2, #1
 8012b18:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8012b1a:	006a      	lsls	r2, r5, #1
 8012b1c:	705a      	strb	r2, [r3, #1]
            *usLen += 1;
 8012b1e:	8823      	ldrh	r3, [r4, #0]
 8012b20:	3301      	adds	r3, #1
 8012b22:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8012b24:	462a      	mov	r2, r5
 8012b26:	f7ff fa28 	bl	8011f7a <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 8012b2a:	b920      	cbnz	r0, 8012b36 <eMBFuncReadInputRegister+0x5c>
                *usLen += usRegCount * 2;
 8012b2c:	8823      	ldrh	r3, [r4, #0]
 8012b2e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012b32:	8023      	strh	r3, [r4, #0]
 8012b34:	e7e8      	b.n	8012b08 <eMBFuncReadInputRegister+0x2e>
                eStatus = prveMBError2Exception( eRegStatus );
 8012b36:	f000 f85b 	bl	8012bf0 <prveMBError2Exception>
 8012b3a:	e7e5      	b.n	8012b08 <eMBFuncReadInputRegister+0x2e>

08012b3c <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8012b3c:	b538      	push	{r3, r4, r5, lr}
 8012b3e:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8012b40:	4b05      	ldr	r3, [pc, #20]	@ (8012b58 <eMBFuncReportSlaveID+0x1c>)
 8012b42:	881c      	ldrh	r4, [r3, #0]
 8012b44:	4622      	mov	r2, r4
 8012b46:	4905      	ldr	r1, [pc, #20]	@ (8012b5c <eMBFuncReportSlaveID+0x20>)
 8012b48:	3001      	adds	r0, #1
 8012b4a:	f01b fd0d 	bl	802e568 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8012b4e:	3401      	adds	r4, #1
 8012b50:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8012b52:	2000      	movs	r0, #0
 8012b54:	bd38      	pop	{r3, r4, r5, pc}
 8012b56:	bf00      	nop
 8012b58:	20000a80 	.word	0x20000a80
 8012b5c:	20000a84 	.word	0x20000a84

08012b60 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8012b60:	b510      	push	{r4, lr}
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8012b62:	2a08      	cmp	r2, #8
 8012b64:	d823      	bhi.n	8012bae <xMBUtilSetBits+0x4e>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012b66:	ea4f 0ed1 	mov.w	lr, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8012b6a:	f001 0407 	and.w	r4, r1, #7
 8012b6e:	fa03 f404 	lsl.w	r4, r3, r4

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8012b72:	f04f 0c01 	mov.w	ip, #1
 8012b76:	fa0c f202 	lsl.w	r2, ip, r2
 8012b7a:	b292      	uxth	r2, r2
 8012b7c:	3a01      	subs	r2, #1
 8012b7e:	b292      	uxth	r2, r2
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8012b80:	f001 0107 	and.w	r1, r1, #7
 8012b84:	fa02 f101 	lsl.w	r1, r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012b88:	f810 300e 	ldrb.w	r3, [r0, lr]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012b8c:	eb0e 020c 	add.w	r2, lr, ip
 8012b90:	f810 c002 	ldrb.w	ip, [r0, r2]
 8012b94:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8012b98:	b21b      	sxth	r3, r3

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8012b9a:	ea23 0301 	bic.w	r3, r3, r1
 8012b9e:	b21b      	sxth	r3, r3
 8012ba0:	4323      	orrs	r3, r4

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8012ba2:	f800 300e 	strb.w	r3, [r0, lr]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8012ba6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012baa:	5483      	strb	r3, [r0, r2]
}
 8012bac:	bd10      	pop	{r4, pc}
    assert( ucNBits <= 8 );
 8012bae:	4b03      	ldr	r3, [pc, #12]	@ (8012bbc <xMBUtilSetBits+0x5c>)
 8012bb0:	4a03      	ldr	r2, [pc, #12]	@ (8012bc0 <xMBUtilSetBits+0x60>)
 8012bb2:	2137      	movs	r1, #55	@ 0x37
 8012bb4:	4803      	ldr	r0, [pc, #12]	@ (8012bc4 <xMBUtilSetBits+0x64>)
 8012bb6:	f017 fd49 	bl	802a64c <__assert_func>
 8012bba:	bf00      	nop
 8012bbc:	08036c9c 	.word	0x08036c9c
 8012bc0:	08036cf4 	.word	0x08036cf4
 8012bc4:	08036cac 	.word	0x08036cac

08012bc8 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012bc8:	ea4f 0cd1 	mov.w	ip, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8012bcc:	2301      	movs	r3, #1
 8012bce:	4093      	lsls	r3, r2
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	3b01      	subs	r3, #1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012bd4:	f810 200c 	ldrb.w	r2, [r0, ip]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012bd8:	4460      	add	r0, ip
 8012bda:	7840      	ldrb	r0, [r0, #1]
 8012bdc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8012be0:	f001 0107 	and.w	r1, r1, #7
 8012be4:	410a      	asrs	r2, r1
 8012be6:	b292      	uxth	r2, r2

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8012be8:	ea03 0002 	and.w	r0, r3, r2

    return ( UCHAR ) usWordBuf;
}
 8012bec:	b2c0      	uxtb	r0, r0
 8012bee:	4770      	bx	lr

08012bf0 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 8012bf0:	2801      	cmp	r0, #1
 8012bf2:	d005      	beq.n	8012c00 <prveMBError2Exception+0x10>
 8012bf4:	2807      	cmp	r0, #7
 8012bf6:	d005      	beq.n	8012c04 <prveMBError2Exception+0x14>
 8012bf8:	b108      	cbz	r0, 8012bfe <prveMBError2Exception+0xe>
        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8012bfa:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 8012bfc:	4770      	bx	lr
 8012bfe:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8012c00:	2002      	movs	r0, #2
 8012c02:	4770      	bx	lr
            eStatus = MB_EX_SLAVE_BUSY;
 8012c04:	2006      	movs	r0, #6
 8012c06:	4770      	bx	lr

08012c08 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8012c08:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 8012c0a:	f000 f9ce 	bl	8012faa <eMBTCPDoInit>
 8012c0e:	4604      	mov	r4, r0
 8012c10:	b120      	cbz	r0, 8012c1c <eMBTCPInit+0x14>
    {
        eMBState = STATE_DISABLED;
 8012c12:	4b11      	ldr	r3, [pc, #68]	@ (8012c58 <eMBTCPInit+0x50>)
 8012c14:	2201      	movs	r2, #1
 8012c16:	701a      	strb	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
        eMBCurrentMode = MB_TCP;
        eMBState = STATE_DISABLED;
    }
    return eStatus;
}
 8012c18:	4620      	mov	r0, r4
 8012c1a:	bd10      	pop	{r4, pc}
    else if( !xMBPortEventInit(  ) )
 8012c1c:	f000 f8ca 	bl	8012db4 <xMBPortEventInit>
 8012c20:	b1c0      	cbz	r0, 8012c54 <eMBTCPInit+0x4c>
        pvMBFrameStartCur = eMBTCPStart;
 8012c22:	4b0e      	ldr	r3, [pc, #56]	@ (8012c5c <eMBTCPInit+0x54>)
 8012c24:	4a0e      	ldr	r2, [pc, #56]	@ (8012c60 <eMBTCPInit+0x58>)
 8012c26:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 8012c28:	4b0e      	ldr	r3, [pc, #56]	@ (8012c64 <eMBTCPInit+0x5c>)
 8012c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8012c68 <eMBTCPInit+0x60>)
 8012c2c:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 8012c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8012c6c <eMBTCPInit+0x64>)
 8012c30:	4a0f      	ldr	r2, [pc, #60]	@ (8012c70 <eMBTCPInit+0x68>)
 8012c32:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8012c34:	4b0f      	ldr	r3, [pc, #60]	@ (8012c74 <eMBTCPInit+0x6c>)
 8012c36:	4a10      	ldr	r2, [pc, #64]	@ (8012c78 <eMBTCPInit+0x70>)
 8012c38:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 8012c3a:	4b10      	ldr	r3, [pc, #64]	@ (8012c7c <eMBTCPInit+0x74>)
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8012c40:	4b0f      	ldr	r3, [pc, #60]	@ (8012c80 <eMBTCPInit+0x78>)
 8012c42:	22ff      	movs	r2, #255	@ 0xff
 8012c44:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 8012c46:	4b0f      	ldr	r3, [pc, #60]	@ (8012c84 <eMBTCPInit+0x7c>)
 8012c48:	2202      	movs	r2, #2
 8012c4a:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 8012c4c:	4b02      	ldr	r3, [pc, #8]	@ (8012c58 <eMBTCPInit+0x50>)
 8012c4e:	2201      	movs	r2, #1
 8012c50:	701a      	strb	r2, [r3, #0]
 8012c52:	e7e1      	b.n	8012c18 <eMBTCPInit+0x10>
        eStatus = MB_EPORTERR;
 8012c54:	2403      	movs	r4, #3
 8012c56:	e7df      	b.n	8012c18 <eMBTCPInit+0x10>
 8012c58:	2000009c 	.word	0x2000009c
 8012c5c:	20000abc 	.word	0x20000abc
 8012c60:	08012fbb 	.word	0x08012fbb
 8012c64:	20000ab8 	.word	0x20000ab8
 8012c68:	08012fbd 	.word	0x08012fbd
 8012c6c:	20000ab4 	.word	0x20000ab4
 8012c70:	08012fc5 	.word	0x08012fc5
 8012c74:	20000ac0 	.word	0x20000ac0
 8012c78:	08013005 	.word	0x08013005
 8012c7c:	20000ab0 	.word	0x20000ab0
 8012c80:	20000ac5 	.word	0x20000ac5
 8012c84:	20000ac4 	.word	0x20000ac4

08012c88 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8012c88:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8012c8a:	4b06      	ldr	r3, [pc, #24]	@ (8012ca4 <eMBEnable+0x1c>)
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d001      	beq.n	8012c96 <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8012c92:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8012c94:	bd08      	pop	{r3, pc}
        pvMBFrameStartCur(  );
 8012c96:	4b04      	ldr	r3, [pc, #16]	@ (8012ca8 <eMBEnable+0x20>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8012c9c:	2000      	movs	r0, #0
 8012c9e:	4b01      	ldr	r3, [pc, #4]	@ (8012ca4 <eMBEnable+0x1c>)
 8012ca0:	7018      	strb	r0, [r3, #0]
 8012ca2:	e7f7      	b.n	8012c94 <eMBEnable+0xc>
 8012ca4:	2000009c 	.word	0x2000009c
 8012ca8:	20000abc 	.word	0x20000abc

08012cac <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8012cac:	b530      	push	{r4, r5, lr}
 8012cae:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8012cb0:	4b36      	ldr	r3, [pc, #216]	@ (8012d8c <eMBPoll+0xe0>)
 8012cb2:	781c      	ldrb	r4, [r3, #0]
 8012cb4:	2c00      	cmp	r4, #0
 8012cb6:	d163      	bne.n	8012d80 <eMBPoll+0xd4>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8012cb8:	f10d 0007 	add.w	r0, sp, #7
 8012cbc:	f000 f88e 	bl	8012ddc <xMBPortEventGet>
 8012cc0:	2801      	cmp	r0, #1
 8012cc2:	d002      	beq.n	8012cca <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	b003      	add	sp, #12
 8012cc8:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 8012cca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012cce:	2b01      	cmp	r3, #1
 8012cd0:	d014      	beq.n	8012cfc <eMBPoll+0x50>
 8012cd2:	2b02      	cmp	r3, #2
 8012cd4:	d1f6      	bne.n	8012cc4 <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8012cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8012d90 <eMBPoll+0xe4>)
 8012cd8:	6818      	ldr	r0, [r3, #0]
 8012cda:	7801      	ldrb	r1, [r0, #0]
 8012cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8012d94 <eMBPoll+0xe8>)
 8012cde:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8012ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8012d98 <eMBPoll+0xec>)
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	2b0f      	cmp	r3, #15
 8012cea:	dc25      	bgt.n	8012d38 <eMBPoll+0x8c>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8012cec:	4a2b      	ldr	r2, [pc, #172]	@ (8012d9c <eMBPoll+0xf0>)
 8012cee:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8012cf2:	b30a      	cbz	r2, 8012d38 <eMBPoll+0x8c>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8012cf4:	4291      	cmp	r1, r2
 8012cf6:	d017      	beq.n	8012d28 <eMBPoll+0x7c>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	e7f5      	b.n	8012ce8 <eMBPoll+0x3c>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8012cfc:	4b28      	ldr	r3, [pc, #160]	@ (8012da0 <eMBPoll+0xf4>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	4a28      	ldr	r2, [pc, #160]	@ (8012da4 <eMBPoll+0xf8>)
 8012d02:	4923      	ldr	r1, [pc, #140]	@ (8012d90 <eMBPoll+0xe4>)
 8012d04:	4828      	ldr	r0, [pc, #160]	@ (8012da8 <eMBPoll+0xfc>)
 8012d06:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8012d08:	4605      	mov	r5, r0
 8012d0a:	2800      	cmp	r0, #0
 8012d0c:	d1da      	bne.n	8012cc4 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8012d0e:	4b26      	ldr	r3, [pc, #152]	@ (8012da8 <eMBPoll+0xfc>)
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	4a26      	ldr	r2, [pc, #152]	@ (8012dac <eMBPoll+0x100>)
 8012d14:	7812      	ldrb	r2, [r2, #0]
 8012d16:	4293      	cmp	r3, r2
 8012d18:	d001      	beq.n	8012d1e <eMBPoll+0x72>
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d132      	bne.n	8012d84 <eMBPoll+0xd8>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8012d1e:	2002      	movs	r0, #2
 8012d20:	f000 f850 	bl	8012dc4 <xMBPortEventPost>
    return MB_ENOERR;
 8012d24:	462c      	mov	r4, r5
 8012d26:	e7cd      	b.n	8012cc4 <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8012d28:	4a1c      	ldr	r2, [pc, #112]	@ (8012d9c <eMBPoll+0xf0>)
 8012d2a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	491c      	ldr	r1, [pc, #112]	@ (8012da4 <eMBPoll+0xf8>)
 8012d32:	4798      	blx	r3
 8012d34:	4b18      	ldr	r3, [pc, #96]	@ (8012d98 <eMBPoll+0xec>)
 8012d36:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8012d38:	4b1b      	ldr	r3, [pc, #108]	@ (8012da8 <eMBPoll+0xfc>)
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	b323      	cbz	r3, 8012d88 <eMBPoll+0xdc>
                if( eException != MB_EX_NONE )
 8012d3e:	4b16      	ldr	r3, [pc, #88]	@ (8012d98 <eMBPoll+0xec>)
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	b19b      	cbz	r3, 8012d6c <eMBPoll+0xc0>
                    usLength = 0;
 8012d44:	4a17      	ldr	r2, [pc, #92]	@ (8012da4 <eMBPoll+0xf8>)
 8012d46:	2100      	movs	r1, #0
 8012d48:	8011      	strh	r1, [r2, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8012d4a:	4912      	ldr	r1, [pc, #72]	@ (8012d94 <eMBPoll+0xe8>)
 8012d4c:	7809      	ldrb	r1, [r1, #0]
 8012d4e:	4810      	ldr	r0, [pc, #64]	@ (8012d90 <eMBPoll+0xe4>)
 8012d50:	6805      	ldr	r5, [r0, #0]
 8012d52:	f04f 0c01 	mov.w	ip, #1
 8012d56:	f8a2 c000 	strh.w	ip, [r2]
 8012d5a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8012d5e:	7029      	strb	r1, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 8012d60:	6800      	ldr	r0, [r0, #0]
 8012d62:	8811      	ldrh	r1, [r2, #0]
 8012d64:	eb01 050c 	add.w	r5, r1, ip
 8012d68:	8015      	strh	r5, [r2, #0]
 8012d6a:	5443      	strb	r3, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8012d6c:	4b10      	ldr	r3, [pc, #64]	@ (8012db0 <eMBPoll+0x104>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	4a0c      	ldr	r2, [pc, #48]	@ (8012da4 <eMBPoll+0xf8>)
 8012d72:	8812      	ldrh	r2, [r2, #0]
 8012d74:	4906      	ldr	r1, [pc, #24]	@ (8012d90 <eMBPoll+0xe4>)
 8012d76:	6809      	ldr	r1, [r1, #0]
 8012d78:	480c      	ldr	r0, [pc, #48]	@ (8012dac <eMBPoll+0x100>)
 8012d7a:	7800      	ldrb	r0, [r0, #0]
 8012d7c:	4798      	blx	r3
 8012d7e:	e7a1      	b.n	8012cc4 <eMBPoll+0x18>
        return MB_EILLSTATE;
 8012d80:	2406      	movs	r4, #6
 8012d82:	e79f      	b.n	8012cc4 <eMBPoll+0x18>
    return MB_ENOERR;
 8012d84:	4604      	mov	r4, r0
 8012d86:	e79d      	b.n	8012cc4 <eMBPoll+0x18>
 8012d88:	461c      	mov	r4, r3
 8012d8a:	e79b      	b.n	8012cc4 <eMBPoll+0x18>
 8012d8c:	2000009c 	.word	0x2000009c
 8012d90:	20000aa8 	.word	0x20000aa8
 8012d94:	20000aa5 	.word	0x20000aa5
 8012d98:	20000aa4 	.word	0x20000aa4
 8012d9c:	2000001c 	.word	0x2000001c
 8012da0:	20000ab4 	.word	0x20000ab4
 8012da4:	20000aa6 	.word	0x20000aa6
 8012da8:	20000aac 	.word	0x20000aac
 8012dac:	20000ac5 	.word	0x20000ac5
 8012db0:	20000ac0 	.word	0x20000ac0

08012db4 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8012db4:	4b02      	ldr	r3, [pc, #8]	@ (8012dc0 <xMBPortEventInit+0xc>)
 8012db6:	2200      	movs	r2, #0
 8012db8:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 8012dba:	2001      	movs	r0, #1
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop
 8012dc0:	20000ac6 	.word	0x20000ac6

08012dc4 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	4a03      	ldr	r2, [pc, #12]	@ (8012dd4 <xMBPortEventPost+0x10>)
 8012dc8:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8012dca:	4a03      	ldr	r2, [pc, #12]	@ (8012dd8 <xMBPortEventPost+0x14>)
 8012dcc:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	4770      	bx	lr
 8012dd2:	bf00      	nop
 8012dd4:	20000ac6 	.word	0x20000ac6
 8012dd8:	20000ac7 	.word	0x20000ac7

08012ddc <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8012ddc:	4603      	mov	r3, r0
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8012dde:	4a05      	ldr	r2, [pc, #20]	@ (8012df4 <xMBPortEventGet+0x18>)
 8012de0:	7810      	ldrb	r0, [r2, #0]
 8012de2:	b130      	cbz	r0, 8012df2 <xMBPortEventGet+0x16>
    {
        *eEvent = eQueuedEvent;
 8012de4:	4a04      	ldr	r2, [pc, #16]	@ (8012df8 <xMBPortEventGet+0x1c>)
 8012de6:	7812      	ldrb	r2, [r2, #0]
 8012de8:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8012dea:	4b02      	ldr	r3, [pc, #8]	@ (8012df4 <xMBPortEventGet+0x18>)
 8012dec:	2200      	movs	r2, #0
 8012dee:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8012df0:	2001      	movs	r0, #1
    }
    return xEventHappened;
}
 8012df2:	4770      	bx	lr
 8012df4:	20000ac6 	.word	0x20000ac6
 8012df8:	20000ac7 	.word	0x20000ac7

08012dfc <handler_mb_tcp>:


//mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip);
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_READ){
 8012dfc:	2907      	cmp	r1, #7
 8012dfe:	d000      	beq.n	8012e02 <handler_mb_tcp+0x6>
 8012e00:	4770      	bx	lr
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){
 8012e02:	b538      	push	{r3, r4, r5, lr}
 8012e04:	4604      	mov	r4, r0
		if (mg_check_ip_acl(mg_acl, &c->rem) != 1){
 8012e06:	4b1e      	ldr	r3, [pc, #120]	@ (8012e80 <handler_mb_tcp+0x84>)
 8012e08:	f100 021c 	add.w	r2, r0, #28
 8012e0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e10:	f013 fd0c 	bl	802682c <mg_check_ip_acl>
 8012e14:	2801      	cmp	r0, #1
 8012e16:	d006      	beq.n	8012e26 <handler_mb_tcp+0x2a>
			c->is_closing = 1;
 8012e18:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012e1c:	f043 0320 	orr.w	r3, r3, #32
 8012e20:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
			}
		}else{
			c->is_closing = 1;
		}
	}
}
 8012e24:	bd38      	pop	{r3, r4, r5, pc}
		ucTCPRequestLen = r->len;
 8012e26:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8012e28:	b293      	uxth	r3, r2
 8012e2a:	4916      	ldr	r1, [pc, #88]	@ (8012e84 <handler_mb_tcp+0x88>)
 8012e2c:	800b      	strh	r3, [r1, #0]
		if(ucTCPRequestLen>0){
 8012e2e:	b933      	cbnz	r3, 8012e3e <handler_mb_tcp+0x42>
			c->is_closing = 1;
 8012e30:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012e34:	f043 0320 	orr.w	r3, r3, #32
 8012e38:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012e3c:	e7f2      	b.n	8012e24 <handler_mb_tcp+0x28>
			memcpy(ucTCPRequestFrame, r->buf, sizeof(uint8_t) * ucTCPRequestLen);
 8012e3e:	461a      	mov	r2, r3
 8012e40:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012e42:	4811      	ldr	r0, [pc, #68]	@ (8012e88 <handler_mb_tcp+0x8c>)
 8012e44:	f01b fb90 	bl	802e568 <memcpy>
			xMBPortEventPost (EV_FRAME_RECEIVED);
 8012e48:	2001      	movs	r0, #1
 8012e4a:	f7ff ffbb 	bl	8012dc4 <xMBPortEventPost>
			eMBPoll ();
 8012e4e:	f7ff ff2d 	bl	8012cac <eMBPoll>
			eMBPoll ();
 8012e52:	f7ff ff2b 	bl	8012cac <eMBPoll>
			if(bFrameSent){
 8012e56:	4b0d      	ldr	r3, [pc, #52]	@ (8012e8c <handler_mb_tcp+0x90>)
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	b933      	cbnz	r3, 8012e6a <handler_mb_tcp+0x6e>
				c->is_closing = 1;
 8012e5c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012e60:	f043 0320 	orr.w	r3, r3, #32
 8012e64:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012e68:	e7dc      	b.n	8012e24 <handler_mb_tcp+0x28>
				bFrameSent = FALSE;
 8012e6a:	2500      	movs	r5, #0
 8012e6c:	4b07      	ldr	r3, [pc, #28]	@ (8012e8c <handler_mb_tcp+0x90>)
 8012e6e:	701d      	strb	r5, [r3, #0]
				mg_send(c, ucTCPResponseFrame, ucTCPResponseLen);
 8012e70:	4b07      	ldr	r3, [pc, #28]	@ (8012e90 <handler_mb_tcp+0x94>)
 8012e72:	881a      	ldrh	r2, [r3, #0]
 8012e74:	4907      	ldr	r1, [pc, #28]	@ (8012e94 <handler_mb_tcp+0x98>)
 8012e76:	4620      	mov	r0, r4
 8012e78:	f014 fdf2 	bl	8027a60 <mg_send>
				r->len = 0;                  // Tell Mongoose we've consumed data
 8012e7c:	6425      	str	r5, [r4, #64]	@ 0x40
 8012e7e:	e7d1      	b.n	8012e24 <handler_mb_tcp+0x28>
 8012e80:	20000ac8 	.word	0x20000ac8
 8012e84:	200012d4 	.word	0x200012d4
 8012e88:	200012d8 	.word	0x200012d8
 8012e8c:	20000ad0 	.word	0x20000ad0
 8012e90:	20000ad2 	.word	0x20000ad2
 8012e94:	20000ad4 	.word	0x20000ad4

08012e98 <my_calloc>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8012e98:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8012e9a:	fb01 f400 	mul.w	r4, r1, r0
 8012e9e:	4620      	mov	r0, r4
 8012ea0:	f008 f8da 	bl	801b058 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8012ea4:	4605      	mov	r5, r0
 8012ea6:	b118      	cbz	r0, 8012eb0 <my_calloc+0x18>
 8012ea8:	4622      	mov	r2, r4
 8012eaa:	2100      	movs	r1, #0
 8012eac:	f01a f920 	bl	802d0f0 <memset>
  return p;
}
 8012eb0:	4628      	mov	r0, r5
 8012eb2:	bd38      	pop	{r3, r4, r5, pc}

08012eb4 <init_mb_tcp>:



void init_mb_tcp(void * param){
 8012eb4:	b530      	push	{r4, r5, lr}
 8012eb6:	b083      	sub	sp, #12

	struct mg_mgr *mgr = (struct mg_mgr *)param;  // Event manager
	mg_listen(mgr, s_lsn, handler_mb_tcp, NULL);  // Create server connection
 8012eb8:	2300      	movs	r3, #0
 8012eba:	4a24      	ldr	r2, [pc, #144]	@ (8012f4c <init_mb_tcp+0x98>)
 8012ebc:	4924      	ldr	r1, [pc, #144]	@ (8012f50 <init_mb_tcp+0x9c>)
 8012ebe:	f014 fce3 	bl	8027888 <mg_listen>

	eMBTCPInit(0);
 8012ec2:	2000      	movs	r0, #0
 8012ec4:	f7ff fea0 	bl	8012c08 <eMBTCPInit>
	eMBEnable();
 8012ec8:	f7ff fede 	bl	8012c88 <eMBEnable>

	size_t acl_size = 0;
 8012ecc:	2200      	movs	r2, #0
 8012ece:	9201      	str	r2, [sp, #4]
	mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8012ed0:	a901      	add	r1, sp, #4
 8012ed2:	4820      	ldr	r0, [pc, #128]	@ (8012f54 <init_mb_tcp+0xa0>)
 8012ed4:	f008 fa28 	bl	801b328 <mg_fs_lfs_status>
	if(acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 8012ed8:	9801      	ldr	r0, [sp, #4]
 8012eda:	1e42      	subs	r2, r0, #1
 8012edc:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d815      	bhi.n	8012f10 <init_mb_tcp+0x5c>
		mg_acl.buf = calloc(acl_size + 1, sizeof(char));
 8012ee4:	2101      	movs	r1, #1
 8012ee6:	4408      	add	r0, r1
 8012ee8:	f7ff ffd6 	bl	8012e98 <my_calloc>
 8012eec:	4d1a      	ldr	r5, [pc, #104]	@ (8012f58 <init_mb_tcp+0xa4>)
 8012eee:	6028      	str	r0, [r5, #0]
		void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 8012ef0:	2101      	movs	r1, #1
 8012ef2:	4818      	ldr	r0, [pc, #96]	@ (8012f54 <init_mb_tcp+0xa0>)
 8012ef4:	f008 fa56 	bl	801b3a4 <mg_fs_lfs_open>
 8012ef8:	4604      	mov	r4, r0
		mg_fs_lfs_read(fd, mg_acl.buf, acl_size);
 8012efa:	9a01      	ldr	r2, [sp, #4]
 8012efc:	6829      	ldr	r1, [r5, #0]
 8012efe:	f008 fa81 	bl	801b404 <mg_fs_lfs_read>
		mg_acl.len = acl_size;
 8012f02:	9b01      	ldr	r3, [sp, #4]
 8012f04:	606b      	str	r3, [r5, #4]
		mg_fs_lfs_close(fd);
 8012f06:	4620      	mov	r0, r4
 8012f08:	f008 fa70 	bl	801b3ec <mg_fs_lfs_close>
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
		mg_fs_lfs_close(fd1);
	}
}
 8012f0c:	b003      	add	sp, #12
 8012f0e:	bd30      	pop	{r4, r5, pc}
		mg_acl.buf = calloc(strlen(DEFAULT_ACL) + 1, sizeof(char));
 8012f10:	2101      	movs	r1, #1
 8012f12:	200b      	movs	r0, #11
 8012f14:	f7ff ffc0 	bl	8012e98 <my_calloc>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	4c0f      	ldr	r4, [pc, #60]	@ (8012f58 <init_mb_tcp+0xa4>)
 8012f1c:	6020      	str	r0, [r4, #0]
		mg_acl.len = strlen(DEFAULT_ACL) + 1;
 8012f1e:	220b      	movs	r2, #11
 8012f20:	6062      	str	r2, [r4, #4]
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
 8012f22:	4a0e      	ldr	r2, [pc, #56]	@ (8012f5c <init_mb_tcp+0xa8>)
 8012f24:	ca03      	ldmia	r2!, {r0, r1}
 8012f26:	6018      	str	r0, [r3, #0]
 8012f28:	6059      	str	r1, [r3, #4]
 8012f2a:	8811      	ldrh	r1, [r2, #0]
 8012f2c:	7892      	ldrb	r2, [r2, #2]
 8012f2e:	8119      	strh	r1, [r3, #8]
 8012f30:	729a      	strb	r2, [r3, #10]
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 8012f32:	2102      	movs	r1, #2
 8012f34:	4807      	ldr	r0, [pc, #28]	@ (8012f54 <init_mb_tcp+0xa0>)
 8012f36:	f008 fa35 	bl	801b3a4 <mg_fs_lfs_open>
 8012f3a:	4605      	mov	r5, r0
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
 8012f3c:	6862      	ldr	r2, [r4, #4]
 8012f3e:	6821      	ldr	r1, [r4, #0]
 8012f40:	f008 fa6c 	bl	801b41c <mg_fs_lfs_write>
		mg_fs_lfs_close(fd1);
 8012f44:	4628      	mov	r0, r5
 8012f46:	f008 fa51 	bl	801b3ec <mg_fs_lfs_close>
}
 8012f4a:	e7df      	b.n	8012f0c <init_mb_tcp+0x58>
 8012f4c:	08012dfd 	.word	0x08012dfd
 8012f50:	08036d04 	.word	0x08036d04
 8012f54:	08036d18 	.word	0x08036d18
 8012f58:	20000ac8 	.word	0x20000ac8
 8012f5c:	08036d2c 	.word	0x08036d2c

08012f60 <xMBTCPPortInit>:
BOOL  xMBTCPPortInit( USHORT usTCPPort )
{


    return TRUE;
}
 8012f60:	2001      	movs	r0, #1
 8012f62:	4770      	bx	lr

08012f64 <xMBTCPPortGetRequest>:

BOOL  xMBTCPPortGetRequest( UCHAR **ppucMBTCPFrame, USHORT * usTCPLength )
{
    *ppucMBTCPFrame = (uint8_t *) &ucTCPRequestFrame[0];
 8012f64:	4b04      	ldr	r3, [pc, #16]	@ (8012f78 <xMBTCPPortGetRequest+0x14>)
 8012f66:	6003      	str	r3, [r0, #0]
    *usTCPLength = ucTCPRequestLen;
 8012f68:	4b04      	ldr	r3, [pc, #16]	@ (8012f7c <xMBTCPPortGetRequest+0x18>)
 8012f6a:	881a      	ldrh	r2, [r3, #0]
 8012f6c:	800a      	strh	r2, [r1, #0]
    // Reset the buffer.
    ucTCPRequestLen = 0;
 8012f6e:	2200      	movs	r2, #0
 8012f70:	801a      	strh	r2, [r3, #0]
    return TRUE;
}
 8012f72:	2001      	movs	r0, #1
 8012f74:	4770      	bx	lr
 8012f76:	bf00      	nop
 8012f78:	200012d8 	.word	0x200012d8
 8012f7c:	200012d4 	.word	0x200012d4

08012f80 <xMBTCPPortSendResponse>:


BOOL xMBTCPPortSendResponse( const UCHAR *pucMBTCPFrame, USHORT usTCPLength )
{
 8012f80:	b510      	push	{r4, lr}
 8012f82:	460c      	mov	r4, r1
      memcpy(ucTCPResponseFrame,pucMBTCPFrame , usTCPLength);
 8012f84:	460a      	mov	r2, r1
 8012f86:	4601      	mov	r1, r0
 8012f88:	4804      	ldr	r0, [pc, #16]	@ (8012f9c <xMBTCPPortSendResponse+0x1c>)
 8012f8a:	f01b faed 	bl	802e568 <memcpy>
      ucTCPResponseLen = usTCPLength;
 8012f8e:	4b04      	ldr	r3, [pc, #16]	@ (8012fa0 <xMBTCPPortSendResponse+0x20>)
 8012f90:	801c      	strh	r4, [r3, #0]
      bFrameSent = TRUE;
 8012f92:	2001      	movs	r0, #1
 8012f94:	4b03      	ldr	r3, [pc, #12]	@ (8012fa4 <xMBTCPPortSendResponse+0x24>)
 8012f96:	7018      	strb	r0, [r3, #0]
      return bFrameSent;
}
 8012f98:	bd10      	pop	{r4, pc}
 8012f9a:	bf00      	nop
 8012f9c:	20000ad4 	.word	0x20000ad4
 8012fa0:	20000ad2 	.word	0x20000ad2
 8012fa4:	20000ad0 	.word	0x20000ad0

08012fa8 <vMBTCPPortDisable>:
{
};

void vMBTCPPortDisable( void )
{
};
 8012fa8:	4770      	bx	lr

08012faa <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 8012faa:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8012fac:	f7ff ffd8 	bl	8012f60 <xMBTCPPortInit>
 8012fb0:	b108      	cbz	r0, 8012fb6 <eMBTCPDoInit+0xc>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012fb2:	2000      	movs	r0, #0
    {
        eStatus = MB_EPORTERR;
    }
    return eStatus;
}
 8012fb4:	bd08      	pop	{r3, pc}
        eStatus = MB_EPORTERR;
 8012fb6:	2003      	movs	r0, #3
 8012fb8:	e7fc      	b.n	8012fb4 <eMBTCPDoInit+0xa>

08012fba <eMBTCPStart>:

void
eMBTCPStart( void )
{
}
 8012fba:	4770      	bx	lr

08012fbc <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8012fbc:	b508      	push	{r3, lr}
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8012fbe:	f7ff fff3 	bl	8012fa8 <vMBTCPPortDisable>
}
 8012fc2:	bd08      	pop	{r3, pc}

08012fc4 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8012fc4:	b570      	push	{r4, r5, r6, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	4606      	mov	r6, r0
 8012fca:	460d      	mov	r5, r1
 8012fcc:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_EIO;
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8012fce:	f10d 0102 	add.w	r1, sp, #2
 8012fd2:	a801      	add	r0, sp, #4
 8012fd4:	f7ff ffc6 	bl	8012f64 <xMBTCPPortGetRequest>
 8012fd8:	b180      	cbz	r0, 8012ffc <eMBTCPReceive+0x38>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8012fda:	9b01      	ldr	r3, [sp, #4]
 8012fdc:	7899      	ldrb	r1, [r3, #2]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8012fde:	78da      	ldrb	r2, [r3, #3]

        if( usPID == MB_TCP_PROTOCOL_ID )
 8012fe0:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8012fe4:	d10c      	bne.n	8013000 <eMBTCPReceive+0x3c>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8012fe6:	3307      	adds	r3, #7
 8012fe8:	602b      	str	r3, [r5, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8012fea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012fee:	3b07      	subs	r3, #7
 8012ff0:	8023      	strh	r3, [r4, #0]
            eStatus = MB_ENOERR;

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 8012ff2:	23ff      	movs	r3, #255	@ 0xff
 8012ff4:	7033      	strb	r3, [r6, #0]
            eStatus = MB_ENOERR;
 8012ff6:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012ff8:	b002      	add	sp, #8
 8012ffa:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EIO;
 8012ffc:	2005      	movs	r0, #5
 8012ffe:	e7fb      	b.n	8012ff8 <eMBTCPReceive+0x34>
    eMBErrorCode    eStatus = MB_EIO;
 8013000:	2005      	movs	r0, #5
 8013002:	e7f9      	b.n	8012ff8 <eMBTCPReceive+0x34>

08013004 <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 8013004:	b508      	push	{r3, lr}
 8013006:	4608      	mov	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8013008:	1dd1      	adds	r1, r2, #7
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 801300a:	1c53      	adds	r3, r2, #1
 801300c:	121b      	asrs	r3, r3, #8
 801300e:	f800 3c03 	strb.w	r3, [r0, #-3]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8013012:	3201      	adds	r2, #1
 8013014:	f800 2c02 	strb.w	r2, [r0, #-2]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8013018:	b289      	uxth	r1, r1
 801301a:	3807      	subs	r0, #7
 801301c:	f7ff ffb0 	bl	8012f80 <xMBTCPPortSendResponse>
 8013020:	b108      	cbz	r0, 8013026 <eMBTCPSend+0x22>
    eMBErrorCode    eStatus = MB_ENOERR;
 8013022:	2000      	movs	r0, #0
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8013024:	bd08      	pop	{r3, pc}
        eStatus = MB_EIO;
 8013026:	2005      	movs	r0, #5
 8013028:	e7fc      	b.n	8013024 <eMBTCPSend+0x20>
	...

0801302c <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 801302c:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 801302e:	4b03      	ldr	r3, [pc, #12]	@ (801303c <handle_OPTIONS_method+0x10>)
 8013030:	4a03      	ldr	r2, [pc, #12]	@ (8013040 <handle_OPTIONS_method+0x14>)
 8013032:	21c8      	movs	r1, #200	@ 0xc8
 8013034:	f011 fb62 	bl	80246fc <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8013038:	bd08      	pop	{r3, pc}
 801303a:	bf00      	nop
 801303c:	0803b6e0 	.word	0x0803b6e0
 8013040:	08036d38 	.word	0x08036d38

08013044 <handler_dev_version>:
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET POST methods\"}\r\n");
		return;
	}
}

static void handler_dev_version(struct mg_connection *c, struct mg_http_message *hm){
 8013044:	b570      	push	{r4, r5, r6, lr}
 8013046:	b084      	sub	sp, #16
 8013048:	4605      	mov	r5, r0
 801304a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801304c:	ae02      	add	r6, sp, #8
 801304e:	4910      	ldr	r1, [pc, #64]	@ (8013090 <handler_dev_version+0x4c>)
 8013050:	4630      	mov	r0, r6
 8013052:	f011 fcdd 	bl	8024a10 <mg_str_s>
 8013056:	2300      	movs	r3, #0
 8013058:	9300      	str	r3, [sp, #0]
 801305a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801305e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013062:	f011 fef7 	bl	8024e54 <mg_match>
 8013066:	b158      	cbz	r0, 8013080 <handler_dev_version+0x3c>
		mg_http_reply(c, 200, headers,
 8013068:	4b0a      	ldr	r3, [pc, #40]	@ (8013094 <handler_dev_version+0x50>)
 801306a:	9301      	str	r3, [sp, #4]
 801306c:	4b0a      	ldr	r3, [pc, #40]	@ (8013098 <handler_dev_version+0x54>)
 801306e:	9300      	str	r3, [sp, #0]
 8013070:	4b0a      	ldr	r3, [pc, #40]	@ (801309c <handler_dev_version+0x58>)
 8013072:	4a0b      	ldr	r2, [pc, #44]	@ (80130a0 <handler_dev_version+0x5c>)
 8013074:	21c8      	movs	r1, #200	@ 0xc8
 8013076:	4628      	mov	r0, r5
 8013078:	f011 fb40 	bl	80246fc <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 801307c:	b004      	add	sp, #16
 801307e:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013080:	4b08      	ldr	r3, [pc, #32]	@ (80130a4 <handler_dev_version+0x60>)
 8013082:	4a07      	ldr	r2, [pc, #28]	@ (80130a0 <handler_dev_version+0x5c>)
 8013084:	f240 1195 	movw	r1, #405	@ 0x195
 8013088:	4628      	mov	r0, r5
 801308a:	f011 fb37 	bl	80246fc <mg_http_reply>
		return;
 801308e:	e7f5      	b.n	801307c <handler_dev_version+0x38>
 8013090:	08036dd8 	.word	0x08036dd8
 8013094:	08036e84 	.word	0x08036e84
 8013098:	080368dc 	.word	0x080368dc
 801309c:	08036ddc 	.word	0x08036ddc
 80130a0:	08036e14 	.word	0x08036e14
 80130a4:	08036e88 	.word	0x08036e88

080130a8 <handler_dev_info>:

static void handler_dev_info(struct mg_connection *c, struct mg_http_message *hm){
 80130a8:	b570      	push	{r4, r5, r6, lr}
 80130aa:	b088      	sub	sp, #32
 80130ac:	4605      	mov	r5, r0
 80130ae:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80130b0:	ae06      	add	r6, sp, #24
 80130b2:	4913      	ldr	r1, [pc, #76]	@ (8013100 <handler_dev_info+0x58>)
 80130b4:	4630      	mov	r0, r6
 80130b6:	f011 fcab 	bl	8024a10 <mg_str_s>
 80130ba:	2300      	movs	r3, #0
 80130bc:	9300      	str	r3, [sp, #0]
 80130be:	e896 000c 	ldmia.w	r6, {r2, r3}
 80130c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80130c6:	f011 fec5 	bl	8024e54 <mg_match>
 80130ca:	b188      	cbz	r0, 80130f0 <handler_dev_info+0x48>
		mg_http_reply(c, 200, headers,
 80130cc:	4b0d      	ldr	r3, [pc, #52]	@ (8013104 <handler_dev_info+0x5c>)
 80130ce:	9304      	str	r3, [sp, #16]
 80130d0:	4b0d      	ldr	r3, [pc, #52]	@ (8013108 <handler_dev_info+0x60>)
 80130d2:	9303      	str	r3, [sp, #12]
 80130d4:	4b0d      	ldr	r3, [pc, #52]	@ (801310c <handler_dev_info+0x64>)
 80130d6:	9302      	str	r3, [sp, #8]
 80130d8:	4b0d      	ldr	r3, [pc, #52]	@ (8013110 <handler_dev_info+0x68>)
 80130da:	9301      	str	r3, [sp, #4]
 80130dc:	4b0d      	ldr	r3, [pc, #52]	@ (8013114 <handler_dev_info+0x6c>)
 80130de:	9300      	str	r3, [sp, #0]
 80130e0:	4b0d      	ldr	r3, [pc, #52]	@ (8013118 <handler_dev_info+0x70>)
 80130e2:	4a0e      	ldr	r2, [pc, #56]	@ (801311c <handler_dev_info+0x74>)
 80130e4:	21c8      	movs	r1, #200	@ 0xc8
 80130e6:	4628      	mov	r0, r5
 80130e8:	f011 fb08 	bl	80246fc <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 80130ec:	b008      	add	sp, #32
 80130ee:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80130f0:	4b0b      	ldr	r3, [pc, #44]	@ (8013120 <handler_dev_info+0x78>)
 80130f2:	4a0a      	ldr	r2, [pc, #40]	@ (801311c <handler_dev_info+0x74>)
 80130f4:	f240 1195 	movw	r1, #405	@ 0x195
 80130f8:	4628      	mov	r0, r5
 80130fa:	f011 faff 	bl	80246fc <mg_http_reply>
		return;
 80130fe:	e7f5      	b.n	80130ec <handler_dev_info+0x44>
 8013100:	08036dd8 	.word	0x08036dd8
 8013104:	08036f44 	.word	0x08036f44
 8013108:	08036f58 	.word	0x08036f58
 801310c:	08036f64 	.word	0x08036f64
 8013110:	08036e84 	.word	0x08036e84
 8013114:	080368dc 	.word	0x080368dc
 8013118:	08036ed8 	.word	0x08036ed8
 801311c:	08036e14 	.word	0x08036e14
 8013120:	08036e88 	.word	0x08036e88

08013124 <handle_firmware_deactivate>:
static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 8013124:	b570      	push	{r4, r5, r6, lr}
 8013126:	b084      	sub	sp, #16
 8013128:	4605      	mov	r5, r0
 801312a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 801312c:	ae02      	add	r6, sp, #8
 801312e:	4914      	ldr	r1, [pc, #80]	@ (8013180 <handle_firmware_deactivate+0x5c>)
 8013130:	4630      	mov	r0, r6
 8013132:	f011 fc6d 	bl	8024a10 <mg_str_s>
 8013136:	2300      	movs	r3, #0
 8013138:	9300      	str	r3, [sp, #0]
 801313a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801313e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013142:	f011 fe87 	bl	8024e54 <mg_match>
 8013146:	b198      	cbz	r0, 8013170 <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8013148:	4b0e      	ldr	r3, [pc, #56]	@ (8013184 <handle_firmware_deactivate+0x60>)
 801314a:	6a1b      	ldr	r3, [r3, #32]
 801314c:	480e      	ldr	r0, [pc, #56]	@ (8013188 <handle_firmware_deactivate+0x64>)
 801314e:	4798      	blx	r3
 8013150:	b138      	cbz	r0, 8013162 <handle_firmware_deactivate+0x3e>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013152:	4b0e      	ldr	r3, [pc, #56]	@ (801318c <handle_firmware_deactivate+0x68>)
 8013154:	4a0e      	ldr	r2, [pc, #56]	@ (8013190 <handle_firmware_deactivate+0x6c>)
 8013156:	21c8      	movs	r1, #200	@ 0xc8
 8013158:	4628      	mov	r0, r5
 801315a:	f011 facf 	bl	80246fc <mg_http_reply>
}
 801315e:	b004      	add	sp, #16
 8013160:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8013162:	4b0c      	ldr	r3, [pc, #48]	@ (8013194 <handle_firmware_deactivate+0x70>)
 8013164:	4a0a      	ldr	r2, [pc, #40]	@ (8013190 <handle_firmware_deactivate+0x6c>)
 8013166:	21c8      	movs	r1, #200	@ 0xc8
 8013168:	4628      	mov	r0, r5
 801316a:	f011 fac7 	bl	80246fc <mg_http_reply>
 801316e:	e7f6      	b.n	801315e <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013170:	4b09      	ldr	r3, [pc, #36]	@ (8013198 <handle_firmware_deactivate+0x74>)
 8013172:	4a07      	ldr	r2, [pc, #28]	@ (8013190 <handle_firmware_deactivate+0x6c>)
 8013174:	f240 1195 	movw	r1, #405	@ 0x195
 8013178:	4628      	mov	r0, r5
 801317a:	f011 fabf 	bl	80246fc <mg_http_reply>
}
 801317e:	e7ee      	b.n	801315e <handle_firmware_deactivate+0x3a>
 8013180:	08036f6c 	.word	0x08036f6c
 8013184:	200000a0 	.word	0x200000a0
 8013188:	08036698 	.word	0x08036698
 801318c:	08036f74 	.word	0x08036f74
 8013190:	08036e14 	.word	0x08036e14
 8013194:	08036fb0 	.word	0x08036fb0
 8013198:	08036ff4 	.word	0x08036ff4

0801319c <handle_web_files_remove>:
static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 801319c:	b570      	push	{r4, r5, r6, lr}
 801319e:	b084      	sub	sp, #16
 80131a0:	4605      	mov	r5, r0
 80131a2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80131a4:	ae02      	add	r6, sp, #8
 80131a6:	4912      	ldr	r1, [pc, #72]	@ (80131f0 <handle_web_files_remove+0x54>)
 80131a8:	4630      	mov	r0, r6
 80131aa:	f011 fc31 	bl	8024a10 <mg_str_s>
 80131ae:	2300      	movs	r3, #0
 80131b0:	9300      	str	r3, [sp, #0]
 80131b2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80131b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80131ba:	f011 fe4b 	bl	8024e54 <mg_match>
 80131be:	b178      	cbz	r0, 80131e0 <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 80131c0:	4e0c      	ldr	r6, [pc, #48]	@ (80131f4 <handle_web_files_remove+0x58>)
 80131c2:	6a33      	ldr	r3, [r6, #32]
 80131c4:	4c0c      	ldr	r4, [pc, #48]	@ (80131f8 <handle_web_files_remove+0x5c>)
 80131c6:	4620      	mov	r0, r4
 80131c8:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 80131ca:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80131cc:	4620      	mov	r0, r4
 80131ce:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 80131d0:	4b0a      	ldr	r3, [pc, #40]	@ (80131fc <handle_web_files_remove+0x60>)
 80131d2:	4a0b      	ldr	r2, [pc, #44]	@ (8013200 <handle_web_files_remove+0x64>)
 80131d4:	21c8      	movs	r1, #200	@ 0xc8
 80131d6:	4628      	mov	r0, r5
 80131d8:	f011 fa90 	bl	80246fc <mg_http_reply>
}
 80131dc:	b004      	add	sp, #16
 80131de:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80131e0:	4b08      	ldr	r3, [pc, #32]	@ (8013204 <handle_web_files_remove+0x68>)
 80131e2:	4a07      	ldr	r2, [pc, #28]	@ (8013200 <handle_web_files_remove+0x64>)
 80131e4:	f240 1195 	movw	r1, #405	@ 0x195
 80131e8:	4628      	mov	r0, r5
 80131ea:	f011 fa87 	bl	80246fc <mg_http_reply>
}
 80131ee:	e7f5      	b.n	80131dc <handle_web_files_remove+0x40>
 80131f0:	08036f6c 	.word	0x08036f6c
 80131f4:	200000a0 	.word	0x200000a0
 80131f8:	08036684 	.word	0x08036684
 80131fc:	08037044 	.word	0x08037044
 8013200:	08036e14 	.word	0x08036e14
 8013204:	08036ff4 	.word	0x08036ff4

08013208 <handler_logout>:
static void handler_logout(struct mg_connection *c,struct mg_http_message *hm){
 8013208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801320a:	b0c3      	sub	sp, #268	@ 0x10c
 801320c:	4606      	mov	r6, r0
 801320e:	460d      	mov	r5, r1
	char username[128] = {0};
 8013210:	2400      	movs	r4, #0
 8013212:	9422      	str	r4, [sp, #136]	@ 0x88
 8013214:	277c      	movs	r7, #124	@ 0x7c
 8013216:	463a      	mov	r2, r7
 8013218:	4621      	mov	r1, r4
 801321a:	a823      	add	r0, sp, #140	@ 0x8c
 801321c:	f019 ff68 	bl	802d0f0 <memset>
	char pass[128] = {0};
 8013220:	9402      	str	r4, [sp, #8]
 8013222:	463a      	mov	r2, r7
 8013224:	4621      	mov	r1, r4
 8013226:	a803      	add	r0, sp, #12
 8013228:	f019 ff62 	bl	802d0f0 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 801322c:	2280      	movs	r2, #128	@ 0x80
 801322e:	9200      	str	r2, [sp, #0]
 8013230:	ab02      	add	r3, sp, #8
 8013232:	a922      	add	r1, sp, #136	@ 0x88
 8013234:	4628      	mov	r0, r5
 8013236:	f012 fb13 	bl	8025860 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 801323a:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 801323e:	b113      	cbz	r3, 8013246 <handler_logout+0x3e>
 8013240:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013244:	b962      	cbnz	r2, 8013260 <handler_logout+0x58>
	}else if (username[0] == '\0' && pass[0] != '\0') {
 8013246:	b913      	cbnz	r3, 801324e <handler_logout+0x46>
 8013248:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801324c:	bb4b      	cbnz	r3, 80132a2 <handler_logout+0x9a>
        mg_http_reply(c, 404, headers, //TODO delete for release,
 801324e:	4b21      	ldr	r3, [pc, #132]	@ (80132d4 <handler_logout+0xcc>)
 8013250:	4a21      	ldr	r2, [pc, #132]	@ (80132d8 <handler_logout+0xd0>)
 8013252:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013256:	4630      	mov	r0, r6
 8013258:	f011 fa50 	bl	80246fc <mg_http_reply>
}
 801325c:	b043      	add	sp, #268	@ 0x10c
 801325e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mg_http_reply(c, 404, headers, //TODO delete for release,
 8013260:	4b1e      	ldr	r3, [pc, #120]	@ (80132dc <handler_logout+0xd4>)
 8013262:	4a1d      	ldr	r2, [pc, #116]	@ (80132d8 <handler_logout+0xd0>)
 8013264:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013268:	4630      	mov	r0, r6
 801326a:	f011 fa47 	bl	80246fc <mg_http_reply>
        return;
 801326e:	e7f5      	b.n	801325c <handler_logout+0x54>
				logging(L_INFO, "User: %s is logout", web_tokens[i].user);
 8013270:	23b8      	movs	r3, #184	@ 0xb8
 8013272:	fb03 f404 	mul.w	r4, r3, r4
 8013276:	4f1a      	ldr	r7, [pc, #104]	@ (80132e0 <handler_logout+0xd8>)
 8013278:	19e5      	adds	r5, r4, r7
 801327a:	462a      	mov	r2, r5
 801327c:	4919      	ldr	r1, [pc, #100]	@ (80132e4 <handler_logout+0xdc>)
 801327e:	2001      	movs	r0, #1
 8013280:	f7fe ffb2 	bl	80121e8 <logging>
				web_tokens[i].token[0] = '\0';
 8013284:	2300      	movs	r3, #0
 8013286:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
				web_tokens[i].expare = 0;
 801328a:	2000      	movs	r0, #0
 801328c:	2100      	movs	r1, #0
 801328e:	e9c5 012c 	strd	r0, r1, [r5, #176]	@ 0xb0
				web_tokens[i].user[0] = '\0';
 8013292:	553b      	strb	r3, [r7, r4]
		        mg_http_reply(c, 200, headers, //TODO delete for release,
 8013294:	4b14      	ldr	r3, [pc, #80]	@ (80132e8 <handler_logout+0xe0>)
 8013296:	4a10      	ldr	r2, [pc, #64]	@ (80132d8 <handler_logout+0xd0>)
 8013298:	21c8      	movs	r1, #200	@ 0xc8
 801329a:	4630      	mov	r0, r6
 801329c:	f011 fa2e 	bl	80246fc <mg_http_reply>
		        return;
 80132a0:	e7dc      	b.n	801325c <handler_logout+0x54>
		for (i=0;i<user_list_size; i++){
 80132a2:	2400      	movs	r4, #0
 80132a4:	2c09      	cmp	r4, #9
 80132a6:	dc0c      	bgt.n	80132c2 <handler_logout+0xba>
			if((strcmp(web_tokens[i].token, pass) == 0)){
 80132a8:	23b8      	movs	r3, #184	@ 0xb8
 80132aa:	fb04 f303 	mul.w	r3, r4, r3
 80132ae:	3380      	adds	r3, #128	@ 0x80
 80132b0:	a902      	add	r1, sp, #8
 80132b2:	480b      	ldr	r0, [pc, #44]	@ (80132e0 <handler_logout+0xd8>)
 80132b4:	4418      	add	r0, r3
 80132b6:	f7fc ff93 	bl	80101e0 <strcmp>
 80132ba:	2800      	cmp	r0, #0
 80132bc:	d0d8      	beq.n	8013270 <handler_logout+0x68>
		for (i=0;i<user_list_size; i++){
 80132be:	3401      	adds	r4, #1
 80132c0:	e7f0      	b.n	80132a4 <handler_logout+0x9c>
        mg_http_reply(c, 404, headers,
 80132c2:	4b0a      	ldr	r3, [pc, #40]	@ (80132ec <handler_logout+0xe4>)
 80132c4:	4a04      	ldr	r2, [pc, #16]	@ (80132d8 <handler_logout+0xd0>)
 80132c6:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80132ca:	4630      	mov	r0, r6
 80132cc:	f011 fa16 	bl	80246fc <mg_http_reply>
        return;
 80132d0:	e7c4      	b.n	801325c <handler_logout+0x54>
 80132d2:	bf00      	nop
 80132d4:	08037190 	.word	0x08037190
 80132d8:	08036e14 	.word	0x08036e14
 80132dc:	0803708c 	.word	0x0803708c
 80132e0:	20001ad8 	.word	0x20001ad8
 80132e4:	0803710c 	.word	0x0803710c
 80132e8:	08037120 	.word	0x08037120
 80132ec:	0803715c 	.word	0x0803715c

080132f0 <handle_login>:
static void handle_login(struct mg_connection *c, tokens_list_t *u) {
 80132f0:	b530      	push	{r4, r5, lr}
 80132f2:	b0c7      	sub	sp, #284	@ 0x11c
 80132f4:	4605      	mov	r5, r0
 80132f6:	460c      	mov	r4, r1
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 80132f8:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80132fc:	f013 0240 	ands.w	r2, r3, #64	@ 0x40
 8013300:	d024      	beq.n	801334c <handle_login+0x5c>
 8013302:	4b14      	ldr	r3, [pc, #80]	@ (8013354 <handle_login+0x64>)
              cookie_name, u->token,
 8013304:	f104 0180 	add.w	r1, r4, #128	@ 0x80
  mg_snprintf(cookie, sizeof(cookie),
 8013308:	b312      	cbz	r2, 8013350 <handle_login+0x60>
 801330a:	4a13      	ldr	r2, [pc, #76]	@ (8013358 <handle_login+0x68>)
 801330c:	4813      	ldr	r0, [pc, #76]	@ (801335c <handle_login+0x6c>)
 801330e:	9002      	str	r0, [sp, #8]
 8013310:	9201      	str	r2, [sp, #4]
 8013312:	9100      	str	r1, [sp, #0]
 8013314:	4a12      	ldr	r2, [pc, #72]	@ (8013360 <handle_login+0x70>)
 8013316:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801331a:	a806      	add	r0, sp, #24
 801331c:	f010 fcf0 	bl	8023d00 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->user));
 8013320:	9405      	str	r4, [sp, #20]
 8013322:	2200      	movs	r2, #0
 8013324:	9204      	str	r2, [sp, #16]
 8013326:	4b0f      	ldr	r3, [pc, #60]	@ (8013364 <handle_login+0x74>)
 8013328:	9303      	str	r3, [sp, #12]
 801332a:	490f      	ldr	r1, [pc, #60]	@ (8013368 <handle_login+0x78>)
 801332c:	9102      	str	r1, [sp, #8]
 801332e:	9201      	str	r2, [sp, #4]
 8013330:	9300      	str	r3, [sp, #0]
 8013332:	4b0e      	ldr	r3, [pc, #56]	@ (801336c <handle_login+0x7c>)
 8013334:	aa06      	add	r2, sp, #24
 8013336:	21c8      	movs	r1, #200	@ 0xc8
 8013338:	4628      	mov	r0, r5
 801333a:	f011 f9df 	bl	80246fc <mg_http_reply>
  logging(L_INFO, "Authenticated web user: %s ", u->user);
 801333e:	4622      	mov	r2, r4
 8013340:	490b      	ldr	r1, [pc, #44]	@ (8013370 <handle_login+0x80>)
 8013342:	2001      	movs	r0, #1
 8013344:	f7fe ff50 	bl	80121e8 <logging>
}
 8013348:	b047      	add	sp, #284	@ 0x11c
 801334a:	bd30      	pop	{r4, r5, pc}
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 801334c:	4b09      	ldr	r3, [pc, #36]	@ (8013374 <handle_login+0x84>)
 801334e:	e7d9      	b.n	8013304 <handle_login+0x14>
  mg_snprintf(cookie, sizeof(cookie),
 8013350:	4a09      	ldr	r2, [pc, #36]	@ (8013378 <handle_login+0x88>)
 8013352:	e7db      	b.n	801330c <handle_login+0x1c>
 8013354:	08037208 	.word	0x08037208
 8013358:	0803722c 	.word	0x0803722c
 801335c:	0002a300 	.word	0x0002a300
 8013360:	08037238 	.word	0x08037238
 8013364:	08022ebd 	.word	0x08022ebd
 8013368:	080382b0 	.word	0x080382b0
 801336c:	0803727c 	.word	0x0803727c
 8013370:	08037284 	.word	0x08037284
 8013374:	0803721c 	.word	0x0803721c
 8013378:	08037490 	.word	0x08037490

0801337c <auth>:
static bool auth(struct mg_connection *c, struct mg_http_message *hm, bool set_cookie){
 801337c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013380:	b0e5      	sub	sp, #404	@ 0x194
 8013382:	4605      	mov	r5, r0
 8013384:	460c      	mov	r4, r1
 8013386:	4616      	mov	r6, r2
	char pass_digest[sha1_str_len] = {0};
 8013388:	2100      	movs	r1, #0
 801338a:	9159      	str	r1, [sp, #356]	@ 0x164
 801338c:	2225      	movs	r2, #37	@ 0x25
 801338e:	a85a      	add	r0, sp, #360	@ 0x168
 8013390:	f019 feae 	bl	802d0f0 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8013394:	2280      	movs	r2, #128	@ 0x80
 8013396:	9200      	str	r2, [sp, #0]
 8013398:	ab02      	add	r3, sp, #8
 801339a:	a922      	add	r1, sp, #136	@ 0x88
 801339c:	4620      	mov	r0, r4
 801339e:	f012 fa5f 	bl	8025860 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 80133a2:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 80133a6:	b113      	cbz	r3, 80133ae <auth+0x32>
 80133a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80133ac:	b94a      	cbnz	r2, 80133c2 <auth+0x46>
	} else if (username[0] == '\0' && pass[0] != '\0') {
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	f040 80bb 	bne.w	801352a <auth+0x1ae>
 80133b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	f040 80b2 	bne.w	8013522 <auth+0x1a6>
	return false;
 80133be:	2000      	movs	r0, #0
 80133c0:	e0b4      	b.n	801352c <auth+0x1b0>
		logging(L_INFO, "Try to authenticate user: %s", username);
 80133c2:	aa22      	add	r2, sp, #136	@ 0x88
 80133c4:	495b      	ldr	r1, [pc, #364]	@ (8013534 <auth+0x1b8>)
 80133c6:	2001      	movs	r0, #1
 80133c8:	f7fe ff0e 	bl	80121e8 <logging>
		mg_sha1_init(&sha1_ctx);
 80133cc:	a842      	add	r0, sp, #264	@ 0x108
 80133ce:	f011 fa6d 	bl	80248ac <mg_sha1_init>
		mg_sha1_update(&sha1_ctx, (const unsigned char *)pass, strlen(pass) * sizeof(char));
 80133d2:	a802      	add	r0, sp, #8
 80133d4:	f7fc ff64 	bl	80102a0 <strlen>
 80133d8:	4602      	mov	r2, r0
 80133da:	a902      	add	r1, sp, #8
 80133dc:	a842      	add	r0, sp, #264	@ 0x108
 80133de:	f011 fa7f 	bl	80248e0 <mg_sha1_update>
		mg_sha1_final((unsigned char *)&pass_digest, &sha1_ctx); // calculate sha1 pass
 80133e2:	a942      	add	r1, sp, #264	@ 0x108
 80133e4:	a859      	add	r0, sp, #356	@ 0x164
 80133e6:	f011 fab5 	bl	8024954 <mg_sha1_final>
		for (i=0; i< user_list_size; i++ ){
 80133ea:	2400      	movs	r4, #0
 80133ec:	e02a      	b.n	8013444 <auth+0xc8>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 80133ee:	4641      	mov	r1, r8
 80133f0:	4628      	mov	r0, r5
 80133f2:	f7ff ff7d 	bl	80132f0 <handle_login>
 80133f6:	e066      	b.n	80134c6 <auth+0x14a>
					strncpy(web_tokens[1].user, username, sizeof(web_tokens[1].user));
 80133f8:	4f4f      	ldr	r7, [pc, #316]	@ (8013538 <auth+0x1bc>)
 80133fa:	2280      	movs	r2, #128	@ 0x80
 80133fc:	a922      	add	r1, sp, #136	@ 0x88
 80133fe:	4638      	mov	r0, r7
 8013400:	f019 febd 	bl	802d17e <strncpy>
					web_tokens[1].expare = mg_now() + token_life_time;
 8013404:	f016 fec4 	bl	802a190 <mg_now>
 8013408:	4b4c      	ldr	r3, [pc, #304]	@ (801353c <auth+0x1c0>)
 801340a:	18c3      	adds	r3, r0, r3
 801340c:	f141 0100 	adc.w	r1, r1, #0
 8013410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013414:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
					mg_random_str(web_tokens[1].token, sha1_str_len -1);
 8013418:	2128      	movs	r1, #40	@ 0x28
 801341a:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 801341e:	f012 fe65 	bl	80260ec <mg_random_str>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 8013422:	b94e      	cbnz	r6, 8013438 <auth+0xbc>
					logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 8013424:	22b8      	movs	r2, #184	@ 0xb8
 8013426:	4b46      	ldr	r3, [pc, #280]	@ (8013540 <auth+0x1c4>)
 8013428:	fb02 3204 	mla	r2, r2, r4, r3
 801342c:	4945      	ldr	r1, [pc, #276]	@ (8013544 <auth+0x1c8>)
 801342e:	2001      	movs	r0, #1
 8013430:	f7fe feda 	bl	80121e8 <logging>
					return true;
 8013434:	2001      	movs	r0, #1
 8013436:	e079      	b.n	801352c <auth+0x1b0>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 8013438:	4639      	mov	r1, r7
 801343a:	4628      	mov	r0, r5
 801343c:	f7ff ff58 	bl	80132f0 <handle_login>
 8013440:	e7f0      	b.n	8013424 <auth+0xa8>
		for (i=0; i< user_list_size; i++ ){
 8013442:	3401      	adds	r4, #1
 8013444:	2c09      	cmp	r4, #9
 8013446:	dc45      	bgt.n	80134d4 <auth+0x158>
			if((strcmp(web_users[i].user, username) == 0) && (strcmp(web_users[i].pass_digest, pass_digest) == 0)){
 8013448:	a922      	add	r1, sp, #136	@ 0x88
 801344a:	20a9      	movs	r0, #169	@ 0xa9
 801344c:	4b3e      	ldr	r3, [pc, #248]	@ (8013548 <auth+0x1cc>)
 801344e:	fb00 3004 	mla	r0, r0, r4, r3
 8013452:	f7fc fec5 	bl	80101e0 <strcmp>
 8013456:	2800      	cmp	r0, #0
 8013458:	d1f3      	bne.n	8013442 <auth+0xc6>
 801345a:	23a9      	movs	r3, #169	@ 0xa9
 801345c:	fb04 f303 	mul.w	r3, r4, r3
 8013460:	3380      	adds	r3, #128	@ 0x80
 8013462:	a959      	add	r1, sp, #356	@ 0x164
 8013464:	4838      	ldr	r0, [pc, #224]	@ (8013548 <auth+0x1cc>)
 8013466:	4418      	add	r0, r3
 8013468:	f7fc feba 	bl	80101e0 <strcmp>
 801346c:	2800      	cmp	r0, #0
 801346e:	d1e8      	bne.n	8013442 <auth+0xc6>
					if(web_tokens[i].expare < mg_now()){
 8013470:	4b33      	ldr	r3, [pc, #204]	@ (8013540 <auth+0x1c4>)
 8013472:	22b8      	movs	r2, #184	@ 0xb8
 8013474:	fb02 3304 	mla	r3, r2, r4, r3
 8013478:	f8d3 80b0 	ldr.w	r8, [r3, #176]	@ 0xb0
 801347c:	f8d3 70b4 	ldr.w	r7, [r3, #180]	@ 0xb4
 8013480:	f016 fe86 	bl	802a190 <mg_now>
 8013484:	4580      	cmp	r8, r0
 8013486:	418f      	sbcs	r7, r1
 8013488:	d2b6      	bcs.n	80133f8 <auth+0x7c>
						strncpy(web_tokens[i].user, username, sizeof(web_tokens[i].user));
 801348a:	27b8      	movs	r7, #184	@ 0xb8
 801348c:	fb04 f707 	mul.w	r7, r4, r7
 8013490:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8013540 <auth+0x1c4>
 8013494:	eb07 0809 	add.w	r8, r7, r9
 8013498:	2280      	movs	r2, #128	@ 0x80
 801349a:	a922      	add	r1, sp, #136	@ 0x88
 801349c:	4640      	mov	r0, r8
 801349e:	f019 fe6e 	bl	802d17e <strncpy>
						web_tokens[i].expare = mg_now() + token_life_time;
 80134a2:	f016 fe75 	bl	802a190 <mg_now>
 80134a6:	4b25      	ldr	r3, [pc, #148]	@ (801353c <auth+0x1c0>)
 80134a8:	18c0      	adds	r0, r0, r3
 80134aa:	f141 0100 	adc.w	r1, r1, #0
 80134ae:	f8c8 00b0 	str.w	r0, [r8, #176]	@ 0xb0
 80134b2:	f8c8 10b4 	str.w	r1, [r8, #180]	@ 0xb4
						mg_random_str(web_tokens[i].token, sha1_str_len -1);
 80134b6:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80134ba:	2128      	movs	r1, #40	@ 0x28
 80134bc:	4448      	add	r0, r9
 80134be:	f012 fe15 	bl	80260ec <mg_random_str>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 80134c2:	2e00      	cmp	r6, #0
 80134c4:	d193      	bne.n	80133ee <auth+0x72>
						logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 80134c6:	4642      	mov	r2, r8
 80134c8:	491e      	ldr	r1, [pc, #120]	@ (8013544 <auth+0x1c8>)
 80134ca:	2001      	movs	r0, #1
 80134cc:	f7fe fe8c 	bl	80121e8 <logging>
						return true;
 80134d0:	2001      	movs	r0, #1
 80134d2:	e02b      	b.n	801352c <auth+0x1b0>
	return false;
 80134d4:	2000      	movs	r0, #0
 80134d6:	e029      	b.n	801352c <auth+0x1b0>
				        		"{\"status\":\"success\",\"message\":\"Token is valid\", \"user\": \"%s\"}\r\n", web_tokens[i].user);
 80134d8:	22b8      	movs	r2, #184	@ 0xb8
 80134da:	4b19      	ldr	r3, [pc, #100]	@ (8013540 <auth+0x1c4>)
 80134dc:	fb02 3304 	mla	r3, r2, r4, r3
				if (set_cookie) mg_http_reply(c, 200, headers,
 80134e0:	9300      	str	r3, [sp, #0]
 80134e2:	4b1a      	ldr	r3, [pc, #104]	@ (801354c <auth+0x1d0>)
 80134e4:	4a1a      	ldr	r2, [pc, #104]	@ (8013550 <auth+0x1d4>)
 80134e6:	21c8      	movs	r1, #200	@ 0xc8
 80134e8:	4628      	mov	r0, r5
 80134ea:	f011 f907 	bl	80246fc <mg_http_reply>
 80134ee:	e016      	b.n	801351e <auth+0x1a2>
		for (i=0;i<user_list_size; i++){
 80134f0:	3401      	adds	r4, #1
 80134f2:	2c09      	cmp	r4, #9
 80134f4:	dc17      	bgt.n	8013526 <auth+0x1aa>
			if((strcmp(web_tokens[i].token, pass) == 0 && web_tokens[i].user[0] != 0)){// && (web_tokens[i].expare > mg_now())
 80134f6:	23b8      	movs	r3, #184	@ 0xb8
 80134f8:	fb04 f303 	mul.w	r3, r4, r3
 80134fc:	3380      	adds	r3, #128	@ 0x80
 80134fe:	a902      	add	r1, sp, #8
 8013500:	480f      	ldr	r0, [pc, #60]	@ (8013540 <auth+0x1c4>)
 8013502:	4418      	add	r0, r3
 8013504:	f7fc fe6c 	bl	80101e0 <strcmp>
 8013508:	2800      	cmp	r0, #0
 801350a:	d1f1      	bne.n	80134f0 <auth+0x174>
 801350c:	23b8      	movs	r3, #184	@ 0xb8
 801350e:	fb04 f303 	mul.w	r3, r4, r3
 8013512:	4a0b      	ldr	r2, [pc, #44]	@ (8013540 <auth+0x1c4>)
 8013514:	5cd3      	ldrb	r3, [r2, r3]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d0ea      	beq.n	80134f0 <auth+0x174>
				if (set_cookie) mg_http_reply(c, 200, headers,
 801351a:	2e00      	cmp	r6, #0
 801351c:	d1dc      	bne.n	80134d8 <auth+0x15c>
				return true;
 801351e:	2001      	movs	r0, #1
 8013520:	e004      	b.n	801352c <auth+0x1b0>
		for (i=0;i<user_list_size; i++){
 8013522:	2400      	movs	r4, #0
 8013524:	e7e5      	b.n	80134f2 <auth+0x176>
	return false;
 8013526:	2000      	movs	r0, #0
 8013528:	e000      	b.n	801352c <auth+0x1b0>
 801352a:	2000      	movs	r0, #0
}
 801352c:	b065      	add	sp, #404	@ 0x194
 801352e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013532:	bf00      	nop
 8013534:	080372a0 	.word	0x080372a0
 8013538:	20001b90 	.word	0x20001b90
 801353c:	0a4cb800 	.word	0x0a4cb800
 8013540:	20001ad8 	.word	0x20001ad8
 8013544:	080372c0 	.word	0x080372c0
 8013548:	20002208 	.word	0x20002208
 801354c:	080372dc 	.word	0x080372dc
 8013550:	08036e14 	.word	0x08036e14

08013554 <handler_authanticate>:
static void handler_authanticate(struct mg_connection *c,struct mg_http_message *hm){
 8013554:	b510      	push	{r4, lr}
 8013556:	4604      	mov	r4, r0
	if ( auth(c, hm, 1) ){
 8013558:	2201      	movs	r2, #1
 801355a:	f7ff ff0f 	bl	801337c <auth>
 801355e:	b100      	cbz	r0, 8013562 <handler_authanticate+0xe>
}
 8013560:	bd10      	pop	{r4, pc}
        mg_http_reply(c, 403, headers, //TODO delete for release,
 8013562:	4b04      	ldr	r3, [pc, #16]	@ (8013574 <handler_authanticate+0x20>)
 8013564:	4a04      	ldr	r2, [pc, #16]	@ (8013578 <handler_authanticate+0x24>)
 8013566:	f240 1193 	movw	r1, #403	@ 0x193
 801356a:	4620      	mov	r0, r4
 801356c:	f011 f8c6 	bl	80246fc <mg_http_reply>
}
 8013570:	e7f6      	b.n	8013560 <handler_authanticate+0xc>
 8013572:	bf00      	nop
 8013574:	0803731c 	.word	0x0803731c
 8013578:	08036e14 	.word	0x08036e14

0801357c <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 801357c:	b510      	push	{r4, lr}
 801357e:	b090      	sub	sp, #64	@ 0x40
 8013580:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 8013582:	a809      	add	r0, sp, #36	@ 0x24
 8013584:	f007 fe28 	bl	801b1d8 <vPortGetHeapStats>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 8013588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801358a:	9306      	str	r3, [sp, #24]
 801358c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801358e:	9305      	str	r3, [sp, #20]
 8013590:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013592:	9304      	str	r3, [sp, #16]
 8013594:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013596:	9303      	str	r3, [sp, #12]
 8013598:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801359a:	9302      	str	r3, [sp, #8]
 801359c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801359e:	9301      	str	r3, [sp, #4]
 80135a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135a2:	9300      	str	r3, [sp, #0]
 80135a4:	4b03      	ldr	r3, [pc, #12]	@ (80135b4 <handle_ram_status_get+0x38>)
 80135a6:	4a04      	ldr	r2, [pc, #16]	@ (80135b8 <handle_ram_status_get+0x3c>)
 80135a8:	21c8      	movs	r1, #200	@ 0xc8
 80135aa:	4620      	mov	r0, r4
 80135ac:	f011 f8a6 	bl	80246fc <mg_http_reply>
}
 80135b0:	b010      	add	sp, #64	@ 0x40
 80135b2:	bd10      	pop	{r4, pc}
 80135b4:	0803734c 	.word	0x0803734c
 80135b8:	08037450 	.word	0x08037450

080135bc <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 80135bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135be:	b091      	sub	sp, #68	@ 0x44
 80135c0:	4606      	mov	r6, r0
 80135c2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80135c4:	ad0c      	add	r5, sp, #48	@ 0x30
 80135c6:	494b      	ldr	r1, [pc, #300]	@ (80136f4 <handle_io_status_get+0x138>)
 80135c8:	4628      	mov	r0, r5
 80135ca:	f011 fa21 	bl	8024a10 <mg_str_s>
 80135ce:	2300      	movs	r3, #0
 80135d0:	9300      	str	r3, [sp, #0]
 80135d2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80135d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80135da:	f011 fc3b 	bl	8024e54 <mg_match>
 80135de:	b328      	cbz	r0, 801362c <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 80135e0:	4c45      	ldr	r4, [pc, #276]	@ (80136f8 <handle_io_status_get+0x13c>)
 80135e2:	6823      	ldr	r3, [r4, #0]
 80135e4:	2200      	movs	r2, #0
 80135e6:	2101      	movs	r1, #1
 80135e8:	a80a      	add	r0, sp, #40	@ 0x28
 80135ea:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 80135ec:	6823      	ldr	r3, [r4, #0]
 80135ee:	2200      	movs	r2, #0
 80135f0:	2102      	movs	r1, #2
 80135f2:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 80135f6:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 80135f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80135fc:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8013600:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 8013604:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 8013608:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 801360c:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8013610:	9505      	str	r5, [sp, #20]
 8013612:	9404      	str	r4, [sp, #16]
 8013614:	9003      	str	r0, [sp, #12]
 8013616:	9102      	str	r1, [sp, #8]
 8013618:	9201      	str	r2, [sp, #4]
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	4b37      	ldr	r3, [pc, #220]	@ (80136fc <handle_io_status_get+0x140>)
 801361e:	4a38      	ldr	r2, [pc, #224]	@ (8013700 <handle_io_status_get+0x144>)
 8013620:	21c8      	movs	r1, #200	@ 0xc8
 8013622:	4630      	mov	r0, r6
 8013624:	f011 f86a 	bl	80246fc <mg_http_reply>
}
 8013628:	b011      	add	sp, #68	@ 0x44
 801362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 801362c:	ad0e      	add	r5, sp, #56	@ 0x38
 801362e:	4935      	ldr	r1, [pc, #212]	@ (8013704 <handle_io_status_get+0x148>)
 8013630:	4628      	mov	r0, r5
 8013632:	f011 f9ed 	bl	8024a10 <mg_str_s>
 8013636:	2300      	movs	r3, #0
 8013638:	9300      	str	r3, [sp, #0]
 801363a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801363e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013642:	f011 fc07 	bl	8024e54 <mg_match>
 8013646:	2800      	cmp	r0, #0
 8013648:	d04b      	beq.n	80136e2 <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 801364a:	ab08      	add	r3, sp, #32
 801364c:	4a2e      	ldr	r2, [pc, #184]	@ (8013708 <handle_io_status_get+0x14c>)
 801364e:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013652:	c903      	ldmia	r1, {r0, r1}
 8013654:	f010 f918 	bl	8023888 <mg_json_get_num>
 8013658:	2800      	cmp	r0, #0
 801365a:	d03a      	beq.n	80136d2 <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 801365c:	ab0a      	add	r3, sp, #40	@ 0x28
 801365e:	4a2b      	ldr	r2, [pc, #172]	@ (801370c <handle_io_status_get+0x150>)
 8013660:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013664:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013668:	f010 f90e 	bl	8023888 <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 801366c:	2800      	cmp	r0, #0
 801366e:	d030      	beq.n	80136d2 <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 8013670:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013674:	f7fd fab0 	bl	8010bd8 <__aeabi_d2uiz>
 8013678:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 801367a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801367e:	f7fd faab 	bl	8010bd8 <__aeabi_d2uiz>
 8013682:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8013684:	1e63      	subs	r3, r4, #1
 8013686:	b2db      	uxtb	r3, r3
 8013688:	2b02      	cmp	r3, #2
 801368a:	d801      	bhi.n	8013690 <handle_io_status_get+0xd4>
 801368c:	2d01      	cmp	r5, #1
 801368e:	d907      	bls.n	80136a0 <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 8013690:	4b1f      	ldr	r3, [pc, #124]	@ (8013710 <handle_io_status_get+0x154>)
 8013692:	4a1b      	ldr	r2, [pc, #108]	@ (8013700 <handle_io_status_get+0x144>)
 8013694:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013698:	4630      	mov	r0, r6
 801369a:	f011 f82f 	bl	80246fc <mg_http_reply>
 801369e:	e7c3      	b.n	8013628 <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 80136a0:	4f15      	ldr	r7, [pc, #84]	@ (80136f8 <handle_io_status_get+0x13c>)
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	2200      	movs	r2, #0
 80136a6:	2102      	movs	r1, #2
 80136a8:	a807      	add	r0, sp, #28
 80136aa:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 80136ac:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 80136b0:	446b      	add	r3, sp
 80136b2:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	2201      	movs	r2, #1
 80136ba:	2102      	movs	r1, #2
 80136bc:	a807      	add	r0, sp, #28
 80136be:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 80136c0:	9501      	str	r5, [sp, #4]
 80136c2:	9400      	str	r4, [sp, #0]
 80136c4:	4b13      	ldr	r3, [pc, #76]	@ (8013714 <handle_io_status_get+0x158>)
 80136c6:	4a0e      	ldr	r2, [pc, #56]	@ (8013700 <handle_io_status_get+0x144>)
 80136c8:	21c8      	movs	r1, #200	@ 0xc8
 80136ca:	4630      	mov	r0, r6
 80136cc:	f011 f816 	bl	80246fc <mg_http_reply>
 80136d0:	e7aa      	b.n	8013628 <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 80136d2:	4b11      	ldr	r3, [pc, #68]	@ (8013718 <handle_io_status_get+0x15c>)
 80136d4:	4a0a      	ldr	r2, [pc, #40]	@ (8013700 <handle_io_status_get+0x144>)
 80136d6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80136da:	4630      	mov	r0, r6
 80136dc:	f011 f80e 	bl	80246fc <mg_http_reply>
 80136e0:	e7a2      	b.n	8013628 <handle_io_status_get+0x6c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80136e2:	4b0e      	ldr	r3, [pc, #56]	@ (801371c <handle_io_status_get+0x160>)
 80136e4:	4a06      	ldr	r2, [pc, #24]	@ (8013700 <handle_io_status_get+0x144>)
 80136e6:	f240 1195 	movw	r1, #405	@ 0x195
 80136ea:	4630      	mov	r0, r6
 80136ec:	f011 f806 	bl	80246fc <mg_http_reply>
}
 80136f0:	e79a      	b.n	8013628 <handle_io_status_get+0x6c>
 80136f2:	bf00      	nop
 80136f4:	08036dd8 	.word	0x08036dd8
 80136f8:	200028a4 	.word	0x200028a4
 80136fc:	08037494 	.word	0x08037494
 8013700:	08036e14 	.word	0x08036e14
 8013704:	08036f6c 	.word	0x08036f6c
 8013708:	080374c8 	.word	0x080374c8
 801370c:	080374d4 	.word	0x080374d4
 8013710:	08037514 	.word	0x08037514
 8013714:	080374dc 	.word	0x080374dc
 8013718:	08037550 	.word	0x08037550
 801371c:	0803758c 	.word	0x0803758c

08013720 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8013720:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8013722:	fb01 f400 	mul.w	r4, r1, r0
 8013726:	4620      	mov	r0, r4
 8013728:	f007 fc96 	bl	801b058 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801372c:	4605      	mov	r5, r0
 801372e:	b118      	cbz	r0, 8013738 <mg_calloc+0x18>
 8013730:	4622      	mov	r2, r4
 8013732:	2100      	movs	r1, #0
 8013734:	f019 fcdc 	bl	802d0f0 <memset>
}
 8013738:	4628      	mov	r0, r5
 801373a:	bd38      	pop	{r3, r4, r5, pc}

0801373c <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 801373c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801373e:	b08b      	sub	sp, #44	@ 0x2c
 8013740:	4606      	mov	r6, r0
 8013742:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013744:	ad06      	add	r5, sp, #24
 8013746:	4984      	ldr	r1, [pc, #528]	@ (8013958 <handle_mqtt_conf+0x21c>)
 8013748:	4628      	mov	r0, r5
 801374a:	f011 f961 	bl	8024a10 <mg_str_s>
 801374e:	2300      	movs	r3, #0
 8013750:	9300      	str	r3, [sp, #0]
 8013752:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013756:	e894 0003 	ldmia.w	r4, {r0, r1}
 801375a:	f011 fb7b 	bl	8024e54 <mg_match>
 801375e:	2800      	cmp	r0, #0
 8013760:	d03b      	beq.n	80137da <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8013762:	21c6      	movs	r1, #198	@ 0xc6
 8013764:	2001      	movs	r0, #1
 8013766:	f7ff ffdb 	bl	8013720 <mg_calloc>
		if (mqtt_config == NULL) {
 801376a:	4605      	mov	r5, r0
 801376c:	b340      	cbz	r0, 80137c0 <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 801376e:	4b7b      	ldr	r3, [pc, #492]	@ (801395c <handle_mqtt_conf+0x220>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	2200      	movs	r2, #0
 8013774:	4611      	mov	r1, r2
 8013776:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8013778:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 801377c:	4638      	mov	r0, r7
 801377e:	f7fc fd8f 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 8013782:	b2c4      	uxtb	r4, r0
 8013784:	4622      	mov	r2, r4
 8013786:	212a      	movs	r1, #42	@ 0x2a
 8013788:	4638      	mov	r0, r7
 801378a:	f019 fcb1 	bl	802d0f0 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 801378e:	442c      	add	r4, r5
 8013790:	2300      	movs	r3, #0
 8013792:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013796:	786b      	ldrb	r3, [r5, #1]
 8013798:	b1eb      	cbz	r3, 80137d6 <handle_mqtt_conf+0x9a>
 801379a:	4b71      	ldr	r3, [pc, #452]	@ (8013960 <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 801379c:	1caa      	adds	r2, r5, #2
 801379e:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80137a2:	9703      	str	r7, [sp, #12]
 80137a4:	9102      	str	r1, [sp, #8]
 80137a6:	9201      	str	r2, [sp, #4]
 80137a8:	9300      	str	r3, [sp, #0]
 80137aa:	4b6e      	ldr	r3, [pc, #440]	@ (8013964 <handle_mqtt_conf+0x228>)
 80137ac:	4a6e      	ldr	r2, [pc, #440]	@ (8013968 <handle_mqtt_conf+0x22c>)
 80137ae:	21c8      	movs	r1, #200	@ 0xc8
 80137b0:	4630      	mov	r0, r6
 80137b2:	f010 ffa3 	bl	80246fc <mg_http_reply>
		free(mqtt_config);
 80137b6:	4628      	mov	r0, r5
 80137b8:	f007 fcd0 	bl	801b15c <vPortFree>
}
 80137bc:	b00b      	add	sp, #44	@ 0x2c
 80137be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 80137c0:	4b6a      	ldr	r3, [pc, #424]	@ (801396c <handle_mqtt_conf+0x230>)
 80137c2:	4a69      	ldr	r2, [pc, #420]	@ (8013968 <handle_mqtt_conf+0x22c>)
 80137c4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80137c8:	4630      	mov	r0, r6
 80137ca:	f010 ff97 	bl	80246fc <mg_http_reply>
			free(mqtt_config);
 80137ce:	4628      	mov	r0, r5
 80137d0:	f007 fcc4 	bl	801b15c <vPortFree>
			return;
 80137d4:	e7f2      	b.n	80137bc <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80137d6:	4b66      	ldr	r3, [pc, #408]	@ (8013970 <handle_mqtt_conf+0x234>)
 80137d8:	e7e0      	b.n	801379c <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80137da:	ad08      	add	r5, sp, #32
 80137dc:	4965      	ldr	r1, [pc, #404]	@ (8013974 <handle_mqtt_conf+0x238>)
 80137de:	4628      	mov	r0, r5
 80137e0:	f011 f916 	bl	8024a10 <mg_str_s>
 80137e4:	2300      	movs	r3, #0
 80137e6:	9300      	str	r3, [sp, #0]
 80137e8:	e895 000c 	ldmia.w	r5, {r2, r3}
 80137ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80137f0:	f011 fb30 	bl	8024e54 <mg_match>
 80137f4:	2800      	cmp	r0, #0
 80137f6:	f000 80a7 	beq.w	8013948 <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 80137fa:	21c6      	movs	r1, #198	@ 0xc6
 80137fc:	2001      	movs	r0, #1
 80137fe:	f7ff ff8f 	bl	8013720 <mg_calloc>
		if (mqtt_config == NULL) {
 8013802:	4605      	mov	r5, r0
 8013804:	b310      	cbz	r0, 801384c <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8013806:	ab05      	add	r3, sp, #20
 8013808:	4a5b      	ldr	r2, [pc, #364]	@ (8013978 <handle_mqtt_conf+0x23c>)
 801380a:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801380e:	c903      	ldmia	r1, {r0, r1}
 8013810:	f00f fdd0 	bl	80233b4 <mg_json_get>
 8013814:	2800      	cmp	r0, #0
 8013816:	db24      	blt.n	8013862 <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8013818:	1c6b      	adds	r3, r5, #1
 801381a:	4a58      	ldr	r2, [pc, #352]	@ (801397c <handle_mqtt_conf+0x240>)
 801381c:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 8013820:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013824:	f010 f856 	bl	80238d4 <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8013828:	4a55      	ldr	r2, [pc, #340]	@ (8013980 <handle_mqtt_conf+0x244>)
 801382a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801382e:	f012 f9df 	bl	8025bf0 <mg_json_get_str>
 8013832:	4607      	mov	r7, r0
 8013834:	b328      	cbz	r0, 8013882 <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8013836:	f016 fec7 	bl	802a5c8 <is_valid_mqtt_url>
 801383a:	4603      	mov	r3, r0
 801383c:	b1e0      	cbz	r0, 8013878 <handle_mqtt_conf+0x13c>
					switch (err) {
 801383e:	3304      	adds	r3, #4
 8013840:	2b03      	cmp	r3, #3
 8013842:	d879      	bhi.n	8013938 <handle_mqtt_conf+0x1fc>
 8013844:	e8df f003 	tbb	[pc, r3]
 8013848:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 801384c:	4b47      	ldr	r3, [pc, #284]	@ (801396c <handle_mqtt_conf+0x230>)
 801384e:	4a46      	ldr	r2, [pc, #280]	@ (8013968 <handle_mqtt_conf+0x22c>)
 8013850:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013854:	4630      	mov	r0, r6
 8013856:	f010 ff51 	bl	80246fc <mg_http_reply>
			free(mqtt_config);
 801385a:	4628      	mov	r0, r5
 801385c:	f007 fc7e 	bl	801b15c <vPortFree>
			return;
 8013860:	e7ac      	b.n	80137bc <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8013862:	4b48      	ldr	r3, [pc, #288]	@ (8013984 <handle_mqtt_conf+0x248>)
 8013864:	4a40      	ldr	r2, [pc, #256]	@ (8013968 <handle_mqtt_conf+0x22c>)
 8013866:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801386a:	4630      	mov	r0, r6
 801386c:	f010 ff46 	bl	80246fc <mg_http_reply>
		free(mqtt_config);
 8013870:	4628      	mov	r0, r5
 8013872:	f007 fc73 	bl	801b15c <vPortFree>
 8013876:	e7a1      	b.n	80137bc <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8013878:	227f      	movs	r2, #127	@ 0x7f
 801387a:	4639      	mov	r1, r7
 801387c:	1ca8      	adds	r0, r5, #2
 801387e:	f019 fc7e 	bl	802d17e <strncpy>
			free(broker);
 8013882:	4638      	mov	r0, r7
 8013884:	f007 fc6a 	bl	801b15c <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8013888:	4a3f      	ldr	r2, [pc, #252]	@ (8013988 <handle_mqtt_conf+0x24c>)
 801388a:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 801388e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013892:	f012 f9ad 	bl	8025bf0 <mg_json_get_str>
 8013896:	4607      	mov	r7, r0
 8013898:	b128      	cbz	r0, 80138a6 <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 801389a:	2220      	movs	r2, #32
 801389c:	4601      	mov	r1, r0
 801389e:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80138a2:	f019 fc6c 	bl	802d17e <strncpy>
			free(username);
 80138a6:	4638      	mov	r0, r7
 80138a8:	f007 fc58 	bl	801b15c <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 80138ac:	4a37      	ldr	r2, [pc, #220]	@ (801398c <handle_mqtt_conf+0x250>)
 80138ae:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80138b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80138b6:	f012 f99b 	bl	8025bf0 <mg_json_get_str>
 80138ba:	4604      	mov	r4, r0
 80138bc:	b128      	cbz	r0, 80138ca <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 80138be:	2220      	movs	r2, #32
 80138c0:	4601      	mov	r1, r0
 80138c2:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 80138c6:	f019 fc5a 	bl	802d17e <strncpy>
			free(password);
 80138ca:	4620      	mov	r0, r4
 80138cc:	f007 fc46 	bl	801b15c <vPortFree>
			mqtt_config->save = 1;
 80138d0:	2201      	movs	r2, #1
 80138d2:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 80138d4:	4b21      	ldr	r3, [pc, #132]	@ (801395c <handle_mqtt_conf+0x220>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	2100      	movs	r1, #0
 80138da:	4628      	mov	r0, r5
 80138dc:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80138de:	4b2c      	ldr	r3, [pc, #176]	@ (8013990 <handle_mqtt_conf+0x254>)
 80138e0:	4a21      	ldr	r2, [pc, #132]	@ (8013968 <handle_mqtt_conf+0x22c>)
 80138e2:	21c8      	movs	r1, #200	@ 0xc8
 80138e4:	4630      	mov	r0, r6
 80138e6:	f010 ff09 	bl	80246fc <mg_http_reply>
 80138ea:	e7c1      	b.n	8013870 <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80138ec:	4b29      	ldr	r3, [pc, #164]	@ (8013994 <handle_mqtt_conf+0x258>)
 80138ee:	4a1e      	ldr	r2, [pc, #120]	@ (8013968 <handle_mqtt_conf+0x22c>)
 80138f0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80138f4:	4630      	mov	r0, r6
 80138f6:	f010 ff01 	bl	80246fc <mg_http_reply>
					free(broker);
 80138fa:	4638      	mov	r0, r7
 80138fc:	f007 fc2e 	bl	801b15c <vPortFree>
					free(mqtt_config);
 8013900:	4628      	mov	r0, r5
 8013902:	f007 fc2b 	bl	801b15c <vPortFree>
					return;
 8013906:	e759      	b.n	80137bc <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013908:	4b23      	ldr	r3, [pc, #140]	@ (8013998 <handle_mqtt_conf+0x25c>)
 801390a:	4a17      	ldr	r2, [pc, #92]	@ (8013968 <handle_mqtt_conf+0x22c>)
 801390c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013910:	4630      	mov	r0, r6
 8013912:	f010 fef3 	bl	80246fc <mg_http_reply>
							break;
 8013916:	e7f0      	b.n	80138fa <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013918:	4b20      	ldr	r3, [pc, #128]	@ (801399c <handle_mqtt_conf+0x260>)
 801391a:	4a13      	ldr	r2, [pc, #76]	@ (8013968 <handle_mqtt_conf+0x22c>)
 801391c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013920:	4630      	mov	r0, r6
 8013922:	f010 feeb 	bl	80246fc <mg_http_reply>
							break;
 8013926:	e7e8      	b.n	80138fa <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013928:	4b1d      	ldr	r3, [pc, #116]	@ (80139a0 <handle_mqtt_conf+0x264>)
 801392a:	4a0f      	ldr	r2, [pc, #60]	@ (8013968 <handle_mqtt_conf+0x22c>)
 801392c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013930:	4630      	mov	r0, r6
 8013932:	f010 fee3 	bl	80246fc <mg_http_reply>
							break;
 8013936:	e7e0      	b.n	80138fa <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013938:	4b1a      	ldr	r3, [pc, #104]	@ (80139a4 <handle_mqtt_conf+0x268>)
 801393a:	4a0b      	ldr	r2, [pc, #44]	@ (8013968 <handle_mqtt_conf+0x22c>)
 801393c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013940:	4630      	mov	r0, r6
 8013942:	f010 fedb 	bl	80246fc <mg_http_reply>
							break;
 8013946:	e7d8      	b.n	80138fa <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013948:	4b17      	ldr	r3, [pc, #92]	@ (80139a8 <handle_mqtt_conf+0x26c>)
 801394a:	4a07      	ldr	r2, [pc, #28]	@ (8013968 <handle_mqtt_conf+0x22c>)
 801394c:	f240 1195 	movw	r1, #405	@ 0x195
 8013950:	4630      	mov	r0, r6
 8013952:	f010 fed3 	bl	80246fc <mg_http_reply>
 8013956:	e731      	b.n	80137bc <handle_mqtt_conf+0x80>
 8013958:	08036dd8 	.word	0x08036dd8
 801395c:	200028a4 	.word	0x200028a4
 8013960:	080375e0 	.word	0x080375e0
 8013964:	0803762c 	.word	0x0803762c
 8013968:	08036e14 	.word	0x08036e14
 801396c:	080375f0 	.word	0x080375f0
 8013970:	080375e8 	.word	0x080375e8
 8013974:	08036f6c 	.word	0x08036f6c
 8013978:	08037674 	.word	0x08037674
 801397c:	080376a8 	.word	0x080376a8
 8013980:	080376b4 	.word	0x080376b4
 8013984:	08037678 	.word	0x08037678
 8013988:	080377fc 	.word	0x080377fc
 801398c:	08037808 	.word	0x08037808
 8013990:	08037814 	.word	0x08037814
 8013994:	080376c0 	.word	0x080376c0
 8013998:	08037704 	.word	0x08037704
 801399c:	08037750 	.word	0x08037750
 80139a0:	08037790 	.word	0x08037790
 80139a4:	080377c8 	.word	0x080377c8
 80139a8:	0803758c 	.word	0x0803758c

080139ac <handle_mb_tcp_access_list>:
static void handle_mb_tcp_access_list(struct mg_connection *c, struct mg_http_message *hm){
 80139ac:	b570      	push	{r4, r5, r6, lr}
 80139ae:	b08a      	sub	sp, #40	@ 0x28
 80139b0:	4606      	mov	r6, r0
 80139b2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80139b4:	ad04      	add	r5, sp, #16
 80139b6:	495e      	ldr	r1, [pc, #376]	@ (8013b30 <handle_mb_tcp_access_list+0x184>)
 80139b8:	4628      	mov	r0, r5
 80139ba:	f011 f829 	bl	8024a10 <mg_str_s>
 80139be:	2300      	movs	r3, #0
 80139c0:	9300      	str	r3, [sp, #0]
 80139c2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80139c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80139ca:	f011 fa43 	bl	8024e54 <mg_match>
 80139ce:	2800      	cmp	r0, #0
 80139d0:	d03d      	beq.n	8013a4e <handle_mb_tcp_access_list+0xa2>
		size_t acl_size = 0;
 80139d2:	2200      	movs	r2, #0
 80139d4:	9203      	str	r2, [sp, #12]
		mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 80139d6:	a903      	add	r1, sp, #12
 80139d8:	4856      	ldr	r0, [pc, #344]	@ (8013b34 <handle_mb_tcp_access_list+0x188>)
 80139da:	f007 fca5 	bl	801b328 <mg_fs_lfs_status>
		if (acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 80139de:	9803      	ldr	r0, [sp, #12]
 80139e0:	1e42      	subs	r2, r0, #1
 80139e2:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d829      	bhi.n	8013a3e <handle_mb_tcp_access_list+0x92>
			acl = calloc(acl_size + 1, sizeof(char));
 80139ea:	2101      	movs	r1, #1
 80139ec:	4408      	add	r0, r1
 80139ee:	f7ff fe97 	bl	8013720 <mg_calloc>
			if (acl == NULL){
 80139f2:	4604      	mov	r4, r0
 80139f4:	b1b8      	cbz	r0, 8013a26 <handle_mb_tcp_access_list+0x7a>
			void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 80139f6:	2101      	movs	r1, #1
 80139f8:	484e      	ldr	r0, [pc, #312]	@ (8013b34 <handle_mb_tcp_access_list+0x188>)
 80139fa:	f007 fcd3 	bl	801b3a4 <mg_fs_lfs_open>
 80139fe:	4605      	mov	r5, r0
			mg_fs_lfs_read(fd, acl, acl_size);
 8013a00:	9a03      	ldr	r2, [sp, #12]
 8013a02:	4621      	mov	r1, r4
 8013a04:	f007 fcfe 	bl	801b404 <mg_fs_lfs_read>
			mg_fs_lfs_close(fd);
 8013a08:	4628      	mov	r0, r5
 8013a0a:	f007 fcef 	bl	801b3ec <mg_fs_lfs_close>
	        mg_http_reply(c, 200, headers,
 8013a0e:	9400      	str	r4, [sp, #0]
 8013a10:	4b49      	ldr	r3, [pc, #292]	@ (8013b38 <handle_mb_tcp_access_list+0x18c>)
 8013a12:	4a4a      	ldr	r2, [pc, #296]	@ (8013b3c <handle_mb_tcp_access_list+0x190>)
 8013a14:	21c8      	movs	r1, #200	@ 0xc8
 8013a16:	4630      	mov	r0, r6
 8013a18:	f010 fe70 	bl	80246fc <mg_http_reply>
	        free(acl);
 8013a1c:	4620      	mov	r0, r4
 8013a1e:	f007 fb9d 	bl	801b15c <vPortFree>
}
 8013a22:	b00a      	add	sp, #40	@ 0x28
 8013a24:	bd70      	pop	{r4, r5, r6, pc}
		    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013a26:	4946      	ldr	r1, [pc, #280]	@ (8013b40 <handle_mb_tcp_access_list+0x194>)
 8013a28:	2003      	movs	r0, #3
 8013a2a:	f7fe fbdd 	bl	80121e8 <logging>
		        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 8013a2e:	4b45      	ldr	r3, [pc, #276]	@ (8013b44 <handle_mb_tcp_access_list+0x198>)
 8013a30:	4a42      	ldr	r2, [pc, #264]	@ (8013b3c <handle_mb_tcp_access_list+0x190>)
 8013a32:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013a36:	4630      	mov	r0, r6
 8013a38:	f010 fe60 	bl	80246fc <mg_http_reply>
		        return;
 8013a3c:	e7f1      	b.n	8013a22 <handle_mb_tcp_access_list+0x76>
	        mg_http_reply(c, 500, headers,
 8013a3e:	4b42      	ldr	r3, [pc, #264]	@ (8013b48 <handle_mb_tcp_access_list+0x19c>)
 8013a40:	4a3e      	ldr	r2, [pc, #248]	@ (8013b3c <handle_mb_tcp_access_list+0x190>)
 8013a42:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013a46:	4630      	mov	r0, r6
 8013a48:	f010 fe58 	bl	80246fc <mg_http_reply>
	        return;
 8013a4c:	e7e9      	b.n	8013a22 <handle_mb_tcp_access_list+0x76>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013a4e:	ad06      	add	r5, sp, #24
 8013a50:	493e      	ldr	r1, [pc, #248]	@ (8013b4c <handle_mb_tcp_access_list+0x1a0>)
 8013a52:	4628      	mov	r0, r5
 8013a54:	f010 ffdc 	bl	8024a10 <mg_str_s>
 8013a58:	2300      	movs	r3, #0
 8013a5a:	9300      	str	r3, [sp, #0]
 8013a5c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013a60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a64:	f011 f9f6 	bl	8024e54 <mg_match>
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d058      	beq.n	8013b1e <handle_mb_tcp_access_list+0x172>
		if (mg_json_get(hm->body, "$", &length) < 0) {
 8013a6c:	ab03      	add	r3, sp, #12
 8013a6e:	4a38      	ldr	r2, [pc, #224]	@ (8013b50 <handle_mb_tcp_access_list+0x1a4>)
 8013a70:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013a74:	c903      	ldmia	r1, {r0, r1}
 8013a76:	f00f fc9d 	bl	80233b4 <mg_json_get>
 8013a7a:	2800      	cmp	r0, #0
 8013a7c:	db34      	blt.n	8013ae8 <handle_mb_tcp_access_list+0x13c>
		acl = mg_json_get_str(hm->body, "$.access_list");
 8013a7e:	4a35      	ldr	r2, [pc, #212]	@ (8013b54 <handle_mb_tcp_access_list+0x1a8>)
 8013a80:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013a84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a88:	f012 f8b2 	bl	8025bf0 <mg_json_get_str>
		if (acl){
 8013a8c:	4604      	mov	r4, r0
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	d03d      	beq.n	8013b0e <handle_mb_tcp_access_list+0x162>
			if(mg_check_ip_acl(mg_str(acl),  &c->rem) < 0){
 8013a92:	ad08      	add	r5, sp, #32
 8013a94:	4601      	mov	r1, r0
 8013a96:	4628      	mov	r0, r5
 8013a98:	f010 ffba 	bl	8024a10 <mg_str_s>
 8013a9c:	f106 021c 	add.w	r2, r6, #28
 8013aa0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013aa4:	f012 fec2 	bl	802682c <mg_check_ip_acl>
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	db25      	blt.n	8013af8 <handle_mb_tcp_access_list+0x14c>
				mg_fs_lfs_remove(ACL_FILE);
 8013aac:	4d21      	ldr	r5, [pc, #132]	@ (8013b34 <handle_mb_tcp_access_list+0x188>)
 8013aae:	4628      	mov	r0, r5
 8013ab0:	f007 fce6 	bl	801b480 <mg_fs_lfs_remove>
				void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 8013ab4:	2102      	movs	r1, #2
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	f007 fc74 	bl	801b3a4 <mg_fs_lfs_open>
 8013abc:	4605      	mov	r5, r0
				mg_fs_lfs_write(fd1, acl, (strlen(acl) * sizeof(char)) + 1);
 8013abe:	4620      	mov	r0, r4
 8013ac0:	f7fc fbee 	bl	80102a0 <strlen>
 8013ac4:	1c42      	adds	r2, r0, #1
 8013ac6:	4621      	mov	r1, r4
 8013ac8:	4628      	mov	r0, r5
 8013aca:	f007 fca7 	bl	801b41c <mg_fs_lfs_write>
				mg_fs_lfs_close(fd1);
 8013ace:	4628      	mov	r0, r5
 8013ad0:	f007 fc8c 	bl	801b3ec <mg_fs_lfs_close>
				mg_http_reply(c, 200, headers,
 8013ad4:	4b20      	ldr	r3, [pc, #128]	@ (8013b58 <handle_mb_tcp_access_list+0x1ac>)
 8013ad6:	4a19      	ldr	r2, [pc, #100]	@ (8013b3c <handle_mb_tcp_access_list+0x190>)
 8013ad8:	21c8      	movs	r1, #200	@ 0xc8
 8013ada:	4630      	mov	r0, r6
 8013adc:	f010 fe0e 	bl	80246fc <mg_http_reply>
				free(acl);
 8013ae0:	4620      	mov	r0, r4
 8013ae2:	f007 fb3b 	bl	801b15c <vPortFree>
				return;
 8013ae6:	e79c      	b.n	8013a22 <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 8013ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8013b5c <handle_mb_tcp_access_list+0x1b0>)
 8013aea:	4a14      	ldr	r2, [pc, #80]	@ (8013b3c <handle_mb_tcp_access_list+0x190>)
 8013aec:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013af0:	4630      	mov	r0, r6
 8013af2:	f010 fe03 	bl	80246fc <mg_http_reply>
			return;
 8013af6:	e794      	b.n	8013a22 <handle_mb_tcp_access_list+0x76>
				mg_http_reply(c, 400, headers,
 8013af8:	4b19      	ldr	r3, [pc, #100]	@ (8013b60 <handle_mb_tcp_access_list+0x1b4>)
 8013afa:	4a10      	ldr	r2, [pc, #64]	@ (8013b3c <handle_mb_tcp_access_list+0x190>)
 8013afc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013b00:	4630      	mov	r0, r6
 8013b02:	f010 fdfb 	bl	80246fc <mg_http_reply>
				free(acl);
 8013b06:	4620      	mov	r0, r4
 8013b08:	f007 fb28 	bl	801b15c <vPortFree>
				return;
 8013b0c:	e789      	b.n	8013a22 <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 8013b0e:	4b15      	ldr	r3, [pc, #84]	@ (8013b64 <handle_mb_tcp_access_list+0x1b8>)
 8013b10:	4a0a      	ldr	r2, [pc, #40]	@ (8013b3c <handle_mb_tcp_access_list+0x190>)
 8013b12:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013b16:	4630      	mov	r0, r6
 8013b18:	f010 fdf0 	bl	80246fc <mg_http_reply>
			return;
 8013b1c:	e781      	b.n	8013a22 <handle_mb_tcp_access_list+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013b1e:	4b12      	ldr	r3, [pc, #72]	@ (8013b68 <handle_mb_tcp_access_list+0x1bc>)
 8013b20:	4a06      	ldr	r2, [pc, #24]	@ (8013b3c <handle_mb_tcp_access_list+0x190>)
 8013b22:	f240 1195 	movw	r1, #405	@ 0x195
 8013b26:	4630      	mov	r0, r6
 8013b28:	f010 fde8 	bl	80246fc <mg_http_reply>
		return;
 8013b2c:	e779      	b.n	8013a22 <handle_mb_tcp_access_list+0x76>
 8013b2e:	bf00      	nop
 8013b30:	08036dd8 	.word	0x08036dd8
 8013b34:	08036d18 	.word	0x08036d18
 8013b38:	080378ac 	.word	0x080378ac
 8013b3c:	08036e14 	.word	0x08036e14
 8013b40:	08037850 	.word	0x08037850
 8013b44:	08037884 	.word	0x08037884
 8013b48:	080378d8 	.word	0x080378d8
 8013b4c:	08036f6c 	.word	0x08036f6c
 8013b50:	08037674 	.word	0x08037674
 8013b54:	0803790c 	.word	0x0803790c
 8013b58:	08037954 	.word	0x08037954
 8013b5c:	08037678 	.word	0x08037678
 8013b60:	0803791c 	.word	0x0803791c
 8013b64:	080379a8 	.word	0x080379a8
 8013b68:	080379f0 	.word	0x080379f0

08013b6c <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8013b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b70:	b0c7      	sub	sp, #284	@ 0x11c
 8013b72:	4681      	mov	r9, r0
 8013b74:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8013b76:	2272      	movs	r2, #114	@ 0x72
 8013b78:	498e      	ldr	r1, [pc, #568]	@ (8013db4 <handle_dev_status+0x248>)
 8013b7a:	a827      	add	r0, sp, #156	@ 0x9c
 8013b7c:	f01a fcf4 	bl	802e568 <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8013b80:	2101      	movs	r1, #1
 8013b82:	201e      	movs	r0, #30
 8013b84:	f7ff fdcc 	bl	8013720 <mg_calloc>
 8013b88:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013b8a:	2101      	movs	r1, #1
 8013b8c:	202e      	movs	r0, #46	@ 0x2e
 8013b8e:	f7ff fdc7 	bl	8013720 <mg_calloc>
 8013b92:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013b94:	2101      	movs	r1, #1
 8013b96:	202e      	movs	r0, #46	@ 0x2e
 8013b98:	f7ff fdc2 	bl	8013720 <mg_calloc>
 8013b9c:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013b9e:	2101      	movs	r1, #1
 8013ba0:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8013ba4:	f7ff fdbc 	bl	8013720 <mg_calloc>
 8013ba8:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013baa:	2101      	movs	r1, #1
 8013bac:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8013bb0:	f7ff fdb6 	bl	8013720 <mg_calloc>
 8013bb4:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 8013bb6:	2e00      	cmp	r6, #0
 8013bb8:	f000 80e3 	beq.w	8013d82 <handle_dev_status+0x216>
 8013bbc:	2f00      	cmp	r7, #0
 8013bbe:	f000 80e0 	beq.w	8013d82 <handle_dev_status+0x216>
 8013bc2:	f1b8 0f00 	cmp.w	r8, #0
 8013bc6:	f000 80dc 	beq.w	8013d82 <handle_dev_status+0x216>
 8013bca:	2c00      	cmp	r4, #0
 8013bcc:	f000 80d9 	beq.w	8013d82 <handle_dev_status+0x216>
 8013bd0:	2800      	cmp	r0, #0
 8013bd2:	f000 80d6 	beq.w	8013d82 <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013bd6:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 8013bda:	4977      	ldr	r1, [pc, #476]	@ (8013db8 <handle_dev_status+0x24c>)
 8013bdc:	4658      	mov	r0, fp
 8013bde:	f010 ff17 	bl	8024a10 <mg_str_s>
 8013be2:	2300      	movs	r3, #0
 8013be4:	9300      	str	r3, [sp, #0]
 8013be6:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8013bea:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8013bee:	f011 f931 	bl	8024e54 <mg_match>
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	f000 80bd 	beq.w	8013d72 <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 8013bf8:	f001 fbba 	bl	8015370 <get_mqtt_connection>
			if(!mqtt_connection){
 8013bfc:	4682      	mov	sl, r0
 8013bfe:	b358      	cbz	r0, 8013c58 <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 8013c00:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8013c04:	f013 0f20 	tst.w	r3, #32
 8013c08:	d12c      	bne.n	8013c64 <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 8013c0a:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8013c0e:	f013 0f20 	tst.w	r3, #32
 8013c12:	d02d      	beq.n	8013c70 <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8013c14:	221e      	movs	r2, #30
 8013c16:	4969      	ldr	r1, [pc, #420]	@ (8013dbc <handle_dev_status+0x250>)
 8013c18:	4630      	mov	r0, r6
 8013c1a:	f019 fab0 	bl	802d17e <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 8013c1e:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 8013de4 <handle_dev_status+0x278>
 8013c22:	f10a 0308 	add.w	r3, sl, #8
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	465b      	mov	r3, fp
 8013c2a:	4a65      	ldr	r2, [pc, #404]	@ (8013dc0 <handle_dev_status+0x254>)
 8013c2c:	212e      	movs	r1, #46	@ 0x2e
 8013c2e:	4640      	mov	r0, r8
 8013c30:	f010 f866 	bl	8023d00 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8013c34:	f10a 031c 	add.w	r3, sl, #28
 8013c38:	9300      	str	r3, [sp, #0]
 8013c3a:	465b      	mov	r3, fp
 8013c3c:	4a60      	ldr	r2, [pc, #384]	@ (8013dc0 <handle_dev_status+0x254>)
 8013c3e:	212e      	movs	r1, #46	@ 0x2e
 8013c40:	4638      	mov	r0, r7
 8013c42:	f010 f85d 	bl	8023d00 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 8013c46:	4620      	mov	r0, r4
 8013c48:	f7fc fb2a 	bl	80102a0 <strlen>
 8013c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8013dc4 <handle_dev_status+0x258>)
 8013c4e:	881b      	ldrh	r3, [r3, #0]
 8013c50:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013c52:	f04f 0a01 	mov.w	sl, #1
 8013c56:	e028      	b.n	8013caa <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 8013c58:	221e      	movs	r2, #30
 8013c5a:	495b      	ldr	r1, [pc, #364]	@ (8013dc8 <handle_dev_status+0x25c>)
 8013c5c:	4630      	mov	r0, r6
 8013c5e:	f019 fa8e 	bl	802d17e <strncpy>
 8013c62:	e7f0      	b.n	8013c46 <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8013c64:	221e      	movs	r2, #30
 8013c66:	4959      	ldr	r1, [pc, #356]	@ (8013dcc <handle_dev_status+0x260>)
 8013c68:	4630      	mov	r0, r6
 8013c6a:	f019 fa88 	bl	802d17e <strncpy>
 8013c6e:	e7d6      	b.n	8013c1e <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 8013c70:	221e      	movs	r2, #30
 8013c72:	4957      	ldr	r1, [pc, #348]	@ (8013dd0 <handle_dev_status+0x264>)
 8013c74:	4630      	mov	r0, r6
 8013c76:	f019 fa82 	bl	802d17e <strncpy>
 8013c7a:	e7d0      	b.n	8013c1e <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8013c7c:	fa5f f38a 	uxtb.w	r3, sl
 8013c80:	2201      	movs	r2, #1
 8013c82:	2180      	movs	r1, #128	@ 0x80
 8013c84:	a807      	add	r0, sp, #28
 8013c86:	f001 ff63 	bl	8015b50 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8013c8a:	a907      	add	r1, sp, #28
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	f019 fa37 	bl	802d100 <strcat>
				strcat(pub_topics_str, "\", \"");
 8013c92:	4620      	mov	r0, r4
 8013c94:	f7fc fb04 	bl	80102a0 <strlen>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	1821      	adds	r1, r4, r0
 8013c9c:	4a4d      	ldr	r2, [pc, #308]	@ (8013dd4 <handle_dev_status+0x268>)
 8013c9e:	6810      	ldr	r0, [r2, #0]
 8013ca0:	50e0      	str	r0, [r4, r3]
 8013ca2:	7913      	ldrb	r3, [r2, #4]
 8013ca4:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013ca6:	f10a 0a01 	add.w	sl, sl, #1
 8013caa:	f1ba 0f03 	cmp.w	sl, #3
 8013cae:	dde5      	ble.n	8013c7c <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013cb0:	f04f 0a01 	mov.w	sl, #1
 8013cb4:	e007      	b.n	8013cc6 <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	f7fc faf2 	bl	80102a0 <strlen>
 8013cbc:	4b41      	ldr	r3, [pc, #260]	@ (8013dc4 <handle_dev_status+0x258>)
 8013cbe:	881b      	ldrh	r3, [r3, #0]
 8013cc0:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013cc2:	f10a 0a01 	add.w	sl, sl, #1
 8013cc6:	f1ba 0f03 	cmp.w	sl, #3
 8013cca:	dc18      	bgt.n	8013cfe <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013ccc:	fa5f f38a 	uxtb.w	r3, sl
 8013cd0:	2202      	movs	r2, #2
 8013cd2:	2180      	movs	r1, #128	@ 0x80
 8013cd4:	a807      	add	r0, sp, #28
 8013cd6:	f001 ff3b 	bl	8015b50 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8013cda:	a907      	add	r1, sp, #28
 8013cdc:	4620      	mov	r0, r4
 8013cde:	f019 fa0f 	bl	802d100 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013ce2:	f1ba 0f02 	cmp.w	sl, #2
 8013ce6:	dce6      	bgt.n	8013cb6 <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 8013ce8:	4620      	mov	r0, r4
 8013cea:	f7fc fad9 	bl	80102a0 <strlen>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	1821      	adds	r1, r4, r0
 8013cf2:	4a38      	ldr	r2, [pc, #224]	@ (8013dd4 <handle_dev_status+0x268>)
 8013cf4:	6810      	ldr	r0, [r2, #0]
 8013cf6:	50e0      	str	r0, [r4, r3]
 8013cf8:	7913      	ldrb	r3, [r2, #4]
 8013cfa:	710b      	strb	r3, [r1, #4]
 8013cfc:	e7e1      	b.n	8013cc2 <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 8013cfe:	4628      	mov	r0, r5
 8013d00:	f7fc face 	bl	80102a0 <strlen>
 8013d04:	4b2f      	ldr	r3, [pc, #188]	@ (8013dc4 <handle_dev_status+0x258>)
 8013d06:	881b      	ldrh	r3, [r3, #0]
 8013d08:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013d0a:	f04f 0a01 	mov.w	sl, #1
 8013d0e:	e007      	b.n	8013d20 <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 8013d10:	4628      	mov	r0, r5
 8013d12:	f7fc fac5 	bl	80102a0 <strlen>
 8013d16:	4b2b      	ldr	r3, [pc, #172]	@ (8013dc4 <handle_dev_status+0x258>)
 8013d18:	881b      	ldrh	r3, [r3, #0]
 8013d1a:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013d1c:	f10a 0a01 	add.w	sl, sl, #1
 8013d20:	f1ba 0f03 	cmp.w	sl, #3
 8013d24:	dc18      	bgt.n	8013d58 <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013d26:	fa5f f38a 	uxtb.w	r3, sl
 8013d2a:	2202      	movs	r2, #2
 8013d2c:	2180      	movs	r1, #128	@ 0x80
 8013d2e:	a807      	add	r0, sp, #28
 8013d30:	f001 fef6 	bl	8015b20 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8013d34:	a907      	add	r1, sp, #28
 8013d36:	4628      	mov	r0, r5
 8013d38:	f019 f9e2 	bl	802d100 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013d3c:	f1ba 0f02 	cmp.w	sl, #2
 8013d40:	dce6      	bgt.n	8013d10 <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 8013d42:	4628      	mov	r0, r5
 8013d44:	f7fc faac 	bl	80102a0 <strlen>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	1829      	adds	r1, r5, r0
 8013d4c:	4a21      	ldr	r2, [pc, #132]	@ (8013dd4 <handle_dev_status+0x268>)
 8013d4e:	6810      	ldr	r0, [r2, #0]
 8013d50:	50e8      	str	r0, [r5, r3]
 8013d52:	7913      	ldrb	r3, [r2, #4]
 8013d54:	710b      	strb	r3, [r1, #4]
 8013d56:	e7e1      	b.n	8013d1c <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013d58:	9504      	str	r5, [sp, #16]
 8013d5a:	9403      	str	r4, [sp, #12]
 8013d5c:	9702      	str	r7, [sp, #8]
 8013d5e:	f8cd 8004 	str.w	r8, [sp, #4]
 8013d62:	9600      	str	r6, [sp, #0]
 8013d64:	ab27      	add	r3, sp, #156	@ 0x9c
 8013d66:	4a1c      	ldr	r2, [pc, #112]	@ (8013dd8 <handle_dev_status+0x26c>)
 8013d68:	21c8      	movs	r1, #200	@ 0xc8
 8013d6a:	4648      	mov	r0, r9
 8013d6c:	f010 fcc6 	bl	80246fc <mg_http_reply>
 8013d70:	e00e      	b.n	8013d90 <handle_dev_status+0x224>
			mg_http_reply(c, 405, headers, //TODO delete for release,
 8013d72:	4b1a      	ldr	r3, [pc, #104]	@ (8013ddc <handle_dev_status+0x270>)
 8013d74:	4a18      	ldr	r2, [pc, #96]	@ (8013dd8 <handle_dev_status+0x26c>)
 8013d76:	f240 1195 	movw	r1, #405	@ 0x195
 8013d7a:	4648      	mov	r0, r9
 8013d7c:	f010 fcbe 	bl	80246fc <mg_http_reply>
 8013d80:	e006      	b.n	8013d90 <handle_dev_status+0x224>
		mg_http_reply(c, 500, headers, //TODO delete for release,
 8013d82:	4b17      	ldr	r3, [pc, #92]	@ (8013de0 <handle_dev_status+0x274>)
 8013d84:	4a14      	ldr	r2, [pc, #80]	@ (8013dd8 <handle_dev_status+0x26c>)
 8013d86:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013d8a:	4648      	mov	r0, r9
 8013d8c:	f010 fcb6 	bl	80246fc <mg_http_reply>
	free(mqtt_status_str);
 8013d90:	4630      	mov	r0, r6
 8013d92:	f007 f9e3 	bl	801b15c <vPortFree>
	free(mqtt_server_addr);
 8013d96:	4638      	mov	r0, r7
 8013d98:	f007 f9e0 	bl	801b15c <vPortFree>
	free(mqtt_local_addr);
 8013d9c:	4640      	mov	r0, r8
 8013d9e:	f007 f9dd 	bl	801b15c <vPortFree>
	free(pub_topics_str);
 8013da2:	4620      	mov	r0, r4
 8013da4:	f007 f9da 	bl	801b15c <vPortFree>
	free(subscr_topics_str);
 8013da8:	4628      	mov	r0, r5
 8013daa:	f007 f9d7 	bl	801b15c <vPortFree>
}
 8013dae:	b047      	add	sp, #284	@ 0x11c
 8013db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013db4:	08037ab0 	.word	0x08037ab0
 8013db8:	08036dd8 	.word	0x08036dd8
 8013dbc:	08037a50 	.word	0x08037a50
 8013dc0:	08037a64 	.word	0x08037a64
 8013dc4:	08037a68 	.word	0x08037a68
 8013dc8:	0803b870 	.word	0x0803b870
 8013dcc:	08037a44 	.word	0x08037a44
 8013dd0:	08037a58 	.word	0x08037a58
 8013dd4:	08037a6c 	.word	0x08037a6c
 8013dd8:	08036e14 	.word	0x08036e14
 8013ddc:	0803758c 	.word	0x0803758c
 8013de0:	08037a74 	.word	0x08037a74
 8013de4:	080267ad 	.word	0x080267ad

08013de8 <handle_fs_get_log>:
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8013de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dea:	b08d      	sub	sp, #52	@ 0x34
 8013dec:	4607      	mov	r7, r0
 8013dee:	460c      	mov	r4, r1
 8013df0:	4615      	mov	r5, r2
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013df2:	ae08      	add	r6, sp, #32
 8013df4:	4923      	ldr	r1, [pc, #140]	@ (8013e84 <handle_fs_get_log+0x9c>)
 8013df6:	4630      	mov	r0, r6
 8013df8:	f010 fe0a 	bl	8024a10 <mg_str_s>
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	9300      	str	r3, [sp, #0]
 8013e00:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013e04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e08:	f011 f824 	bl	8024e54 <mg_match>
 8013e0c:	b318      	cbz	r0, 8013e56 <handle_fs_get_log+0x6e>
		struct mg_http_serve_opts opts = {
 8013e0e:	2300      	movs	r3, #0
 8013e10:	9302      	str	r3, [sp, #8]
 8013e12:	9303      	str	r3, [sp, #12]
 8013e14:	9304      	str	r3, [sp, #16]
 8013e16:	9305      	str	r3, [sp, #20]
 8013e18:	9306      	str	r3, [sp, #24]
 8013e1a:	9307      	str	r3, [sp, #28]
 8013e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8013e88 <handle_fs_get_log+0xa0>)
 8013e1e:	9302      	str	r3, [sp, #8]
 8013e20:	4b1a      	ldr	r3, [pc, #104]	@ (8013e8c <handle_fs_get_log+0xa4>)
 8013e22:	9307      	str	r3, [sp, #28]
		switch (number) {
 8013e24:	b145      	cbz	r5, 8013e38 <handle_fs_get_log+0x50>
 8013e26:	2d01      	cmp	r5, #1
 8013e28:	d00e      	beq.n	8013e48 <handle_fs_get_log+0x60>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013e2a:	ab02      	add	r3, sp, #8
 8013e2c:	4a18      	ldr	r2, [pc, #96]	@ (8013e90 <handle_fs_get_log+0xa8>)
 8013e2e:	4621      	mov	r1, r4
 8013e30:	4638      	mov	r0, r7
 8013e32:	f011 f9cb 	bl	80251cc <mg_http_serve_file>
				break;
 8013e36:	e005      	b.n	8013e44 <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013e38:	ab02      	add	r3, sp, #8
 8013e3a:	4a15      	ldr	r2, [pc, #84]	@ (8013e90 <handle_fs_get_log+0xa8>)
 8013e3c:	4621      	mov	r1, r4
 8013e3e:	4638      	mov	r0, r7
 8013e40:	f011 f9c4 	bl	80251cc <mg_http_serve_file>
}
 8013e44:	b00d      	add	sp, #52	@ 0x34
 8013e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8013e48:	ab02      	add	r3, sp, #8
 8013e4a:	4a12      	ldr	r2, [pc, #72]	@ (8013e94 <handle_fs_get_log+0xac>)
 8013e4c:	4621      	mov	r1, r4
 8013e4e:	4638      	mov	r0, r7
 8013e50:	f011 f9bc 	bl	80251cc <mg_http_serve_file>
				break;
 8013e54:	e7f6      	b.n	8013e44 <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013e56:	ad0a      	add	r5, sp, #40	@ 0x28
 8013e58:	490f      	ldr	r1, [pc, #60]	@ (8013e98 <handle_fs_get_log+0xb0>)
 8013e5a:	4628      	mov	r0, r5
 8013e5c:	f010 fdd8 	bl	8024a10 <mg_str_s>
 8013e60:	2300      	movs	r3, #0
 8013e62:	9300      	str	r3, [sp, #0]
 8013e64:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013e68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e6c:	f010 fff2 	bl	8024e54 <mg_match>
 8013e70:	2800      	cmp	r0, #0
 8013e72:	d1e7      	bne.n	8013e44 <handle_fs_get_log+0x5c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013e74:	4b09      	ldr	r3, [pc, #36]	@ (8013e9c <handle_fs_get_log+0xb4>)
 8013e76:	4a0a      	ldr	r2, [pc, #40]	@ (8013ea0 <handle_fs_get_log+0xb8>)
 8013e78:	f240 1195 	movw	r1, #405	@ 0x195
 8013e7c:	4638      	mov	r0, r7
 8013e7e:	f010 fc3d 	bl	80246fc <mg_http_reply>
}
 8013e82:	e7df      	b.n	8013e44 <handle_fs_get_log+0x5c>
 8013e84:	08036dd8 	.word	0x08036dd8
 8013e88:	08038268 	.word	0x08038268
 8013e8c:	200000a0 	.word	0x200000a0
 8013e90:	08036864 	.word	0x08036864
 8013e94:	08036874 	.word	0x08036874
 8013e98:	08036f6c 	.word	0x08036f6c
 8013e9c:	08037b24 	.word	0x08037b24
 8013ea0:	08036e14 	.word	0x08036e14

08013ea4 <write_users>:
static void write_users(const char *file_path, users_list_t * users, size_t count){
 8013ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	460d      	mov	r5, r1
 8013eaa:	4616      	mov	r6, r2
	mg_fs_lfs.rm(file_path);
 8013eac:	4f0b      	ldr	r7, [pc, #44]	@ (8013edc <write_users+0x38>)
 8013eae:	6a3b      	ldr	r3, [r7, #32]
 8013eb0:	4798      	blx	r3
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_WRITE);
 8013eb2:	2202      	movs	r2, #2
 8013eb4:	4621      	mov	r1, r4
 8013eb6:	4638      	mov	r0, r7
 8013eb8:	f00f f992 	bl	80231e0 <mg_fs_open>
 8013ebc:	4604      	mov	r4, r0
	mg_fs_lfs.wr(fd->fd, users, sizeof(users_list_t) * count);
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	22a9      	movs	r2, #169	@ 0xa9
 8013ec2:	fb06 f202 	mul.w	r2, r6, r2
 8013ec6:	4629      	mov	r1, r5
 8013ec8:	6800      	ldr	r0, [r0, #0]
 8013eca:	4798      	blx	r3
	mg_fs_close(fd);
 8013ecc:	4620      	mov	r0, r4
 8013ece:	f00f f9a0 	bl	8023212 <mg_fs_close>
	logging(L_INFO, "Saved web users to file");
 8013ed2:	4903      	ldr	r1, [pc, #12]	@ (8013ee0 <write_users+0x3c>)
 8013ed4:	2001      	movs	r0, #1
 8013ed6:	f7fe f987 	bl	80121e8 <logging>
}
 8013eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013edc:	200000a0 	.word	0x200000a0
 8013ee0:	08037b7c 	.word	0x08037b7c

08013ee4 <handle_manage_user>:
static void handle_manage_user(struct mg_connection *c, struct mg_http_message *hm){
 8013ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ee8:	b0ae      	sub	sp, #184	@ 0xb8
 8013eea:	4606      	mov	r6, r0
 8013eec:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013eee:	ad26      	add	r5, sp, #152	@ 0x98
 8013ef0:	49a8      	ldr	r1, [pc, #672]	@ (8014194 <handle_manage_user+0x2b0>)
 8013ef2:	4628      	mov	r0, r5
 8013ef4:	f010 fd8c 	bl	8024a10 <mg_str_s>
 8013ef8:	2300      	movs	r3, #0
 8013efa:	9300      	str	r3, [sp, #0]
 8013efc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013f00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f04:	f010 ffa6 	bl	8024e54 <mg_match>
 8013f08:	2800      	cmp	r0, #0
 8013f0a:	d143      	bne.n	8013f94 <handle_manage_user+0xb0>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013f0c:	ad28      	add	r5, sp, #160	@ 0xa0
 8013f0e:	49a2      	ldr	r1, [pc, #648]	@ (8014198 <handle_manage_user+0x2b4>)
 8013f10:	4628      	mov	r0, r5
 8013f12:	f010 fd7d 	bl	8024a10 <mg_str_s>
 8013f16:	2300      	movs	r3, #0
 8013f18:	9300      	str	r3, [sp, #0]
 8013f1a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013f1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f22:	f010 ff97 	bl	8024e54 <mg_match>
 8013f26:	2800      	cmp	r0, #0
 8013f28:	f000 80fd 	beq.w	8014126 <handle_manage_user+0x242>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013f2c:	ab03      	add	r3, sp, #12
 8013f2e:	4a9b      	ldr	r2, [pc, #620]	@ (801419c <handle_manage_user+0x2b8>)
 8013f30:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013f34:	c903      	ldmia	r1, {r0, r1}
 8013f36:	f00f fa3d 	bl	80233b4 <mg_json_get>
 8013f3a:	2800      	cmp	r0, #0
 8013f3c:	f2c0 8089 	blt.w	8014052 <handle_manage_user+0x16e>
	    username_add = mg_json_get_str(hm->body, "$.user");
 8013f40:	4a97      	ldr	r2, [pc, #604]	@ (80141a0 <handle_manage_user+0x2bc>)
 8013f42:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013f46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f4a:	f011 fe51 	bl	8025bf0 <mg_json_get_str>
 8013f4e:	4605      	mov	r5, r0
	    password_add = mg_json_get_str(hm->body, "$.pass");
 8013f50:	4a94      	ldr	r2, [pc, #592]	@ (80141a4 <handle_manage_user+0x2c0>)
 8013f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f56:	f011 fe4b 	bl	8025bf0 <mg_json_get_str>
 8013f5a:	4607      	mov	r7, r0
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8013f5c:	2d00      	cmp	r5, #0
 8013f5e:	f000 80d4 	beq.w	801410a <handle_manage_user+0x226>
 8013f62:	2800      	cmp	r0, #0
 8013f64:	f000 80d1 	beq.w	801410a <handle_manage_user+0x226>
 8013f68:	782b      	ldrb	r3, [r5, #0]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	f000 80cd 	beq.w	801410a <handle_manage_user+0x226>
 8013f70:	7803      	ldrb	r3, [r0, #0]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	f000 80c9 	beq.w	801410a <handle_manage_user+0x226>
	        for (int i = 0; i < user_list_size; i++) {
 8013f78:	2400      	movs	r4, #0
 8013f7a:	2c09      	cmp	r4, #9
 8013f7c:	dc7f      	bgt.n	801407e <handle_manage_user+0x19a>
	            if (strcmp(web_users[i].user, username_add) == 0) {
 8013f7e:	4629      	mov	r1, r5
 8013f80:	20a9      	movs	r0, #169	@ 0xa9
 8013f82:	4b89      	ldr	r3, [pc, #548]	@ (80141a8 <handle_manage_user+0x2c4>)
 8013f84:	fb00 3004 	mla	r0, r0, r4, r3
 8013f88:	f7fc f92a 	bl	80101e0 <strcmp>
 8013f8c:	2800      	cmp	r0, #0
 8013f8e:	d068      	beq.n	8014062 <handle_manage_user+0x17e>
	        for (int i = 0; i < user_list_size; i++) {
 8013f90:	3401      	adds	r4, #1
 8013f92:	e7f2      	b.n	8013f7a <handle_manage_user+0x96>
	    char *response = calloc(response_len, sizeof(char));
 8013f94:	2101      	movs	r1, #1
 8013f96:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8013f9a:	f7ff fbc1 	bl	8013720 <mg_calloc>
 8013f9e:	4607      	mov	r7, r0
	    char *user_entry = calloc(user_entry_len, sizeof(char));
 8013fa0:	2101      	movs	r1, #1
 8013fa2:	20a0      	movs	r0, #160	@ 0xa0
 8013fa4:	f7ff fbbc 	bl	8013720 <mg_calloc>
 8013fa8:	4680      	mov	r8, r0
	    if (response && user_entry) {
 8013faa:	2f00      	cmp	r7, #0
 8013fac:	d03d      	beq.n	801402a <handle_manage_user+0x146>
 8013fae:	2800      	cmp	r0, #0
 8013fb0:	d03b      	beq.n	801402a <handle_manage_user+0x146>
	        offset += snprintf(response + offset, response_len - offset, "{ \"users\": [");
 8013fb2:	4b7e      	ldr	r3, [pc, #504]	@ (80141ac <handle_manage_user+0x2c8>)
 8013fb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013fb6:	6038      	str	r0, [r7, #0]
 8013fb8:	6079      	str	r1, [r7, #4]
 8013fba:	60ba      	str	r2, [r7, #8]
 8013fbc:	781b      	ldrb	r3, [r3, #0]
 8013fbe:	733b      	strb	r3, [r7, #12]
 8013fc0:	250c      	movs	r5, #12
	        for (int i = 0; i < user_list_size; i++) {
 8013fc2:	2400      	movs	r4, #0
 8013fc4:	e008      	b.n	8013fd8 <handle_manage_user+0xf4>
	                offset += snprintf(response + offset, response_len - offset, "%s", user_entry);
 8013fc6:	4643      	mov	r3, r8
 8013fc8:	4a79      	ldr	r2, [pc, #484]	@ (80141b0 <handle_manage_user+0x2cc>)
 8013fca:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013fce:	1978      	adds	r0, r7, r5
 8013fd0:	f018 fb64 	bl	802c69c <snprintf>
 8013fd4:	4405      	add	r5, r0
	        for (int i = 0; i < user_list_size; i++) {
 8013fd6:	3401      	adds	r4, #1
 8013fd8:	2c09      	cmp	r4, #9
 8013fda:	dc18      	bgt.n	801400e <handle_manage_user+0x12a>
	            if (web_users[i].user[0] != '\0') {  // Проверяем, что имя пользователя не пустое
 8013fdc:	22a9      	movs	r2, #169	@ 0xa9
 8013fde:	fb04 f202 	mul.w	r2, r4, r2
 8013fe2:	4b71      	ldr	r3, [pc, #452]	@ (80141a8 <handle_manage_user+0x2c4>)
 8013fe4:	5c9a      	ldrb	r2, [r3, r2]
 8013fe6:	2a00      	cmp	r2, #0
 8013fe8:	d0f5      	beq.n	8013fd6 <handle_manage_user+0xf2>
	                snprintf(user_entry, user_entry_len, "{\"user\": \"%s\"}", web_users[i].user);
 8013fea:	22a9      	movs	r2, #169	@ 0xa9
 8013fec:	fb02 3304 	mla	r3, r2, r4, r3
 8013ff0:	4a70      	ldr	r2, [pc, #448]	@ (80141b4 <handle_manage_user+0x2d0>)
 8013ff2:	21a0      	movs	r1, #160	@ 0xa0
 8013ff4:	4640      	mov	r0, r8
 8013ff6:	f018 fb51 	bl	802c69c <snprintf>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
 8013ffa:	2d0c      	cmp	r5, #12
 8013ffc:	d9e3      	bls.n	8013fc6 <handle_manage_user+0xe2>
	                    offset += snprintf(response + offset, response_len - offset, ",");
 8013ffe:	4a6e      	ldr	r2, [pc, #440]	@ (80141b8 <handle_manage_user+0x2d4>)
 8014000:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8014004:	1978      	adds	r0, r7, r5
 8014006:	f018 fb49 	bl	802c69c <snprintf>
 801400a:	4405      	add	r5, r0
 801400c:	e7db      	b.n	8013fc6 <handle_manage_user+0xe2>
	        offset += snprintf(response + offset, response_len - offset, "]}");
 801400e:	4a6b      	ldr	r2, [pc, #428]	@ (80141bc <handle_manage_user+0x2d8>)
 8014010:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8014014:	1978      	adds	r0, r7, r5
 8014016:	f018 fb41 	bl	802c69c <snprintf>
	        mg_http_reply(c, 200, headers, "%s", response);
 801401a:	9700      	str	r7, [sp, #0]
 801401c:	4b64      	ldr	r3, [pc, #400]	@ (80141b0 <handle_manage_user+0x2cc>)
 801401e:	4a68      	ldr	r2, [pc, #416]	@ (80141c0 <handle_manage_user+0x2dc>)
 8014020:	21c8      	movs	r1, #200	@ 0xc8
 8014022:	4630      	mov	r0, r6
 8014024:	f010 fb6a 	bl	80246fc <mg_http_reply>
 8014028:	e00a      	b.n	8014040 <handle_manage_user+0x15c>
	    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 801402a:	4966      	ldr	r1, [pc, #408]	@ (80141c4 <handle_manage_user+0x2e0>)
 801402c:	2003      	movs	r0, #3
 801402e:	f7fe f8db 	bl	80121e8 <logging>
	        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 8014032:	4b65      	ldr	r3, [pc, #404]	@ (80141c8 <handle_manage_user+0x2e4>)
 8014034:	4a62      	ldr	r2, [pc, #392]	@ (80141c0 <handle_manage_user+0x2dc>)
 8014036:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801403a:	4630      	mov	r0, r6
 801403c:	f010 fb5e 	bl	80246fc <mg_http_reply>
	    free(response);
 8014040:	4638      	mov	r0, r7
 8014042:	f007 f88b 	bl	801b15c <vPortFree>
	    free(user_entry);
 8014046:	4640      	mov	r0, r8
 8014048:	f007 f888 	bl	801b15c <vPortFree>
}
 801404c:	b02e      	add	sp, #184	@ 0xb8
 801404e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	        mg_http_reply(c, 400, headers,
 8014052:	4b5e      	ldr	r3, [pc, #376]	@ (80141cc <handle_manage_user+0x2e8>)
 8014054:	4a5a      	ldr	r2, [pc, #360]	@ (80141c0 <handle_manage_user+0x2dc>)
 8014056:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801405a:	4630      	mov	r0, r6
 801405c:	f010 fb4e 	bl	80246fc <mg_http_reply>
	        return;
 8014060:	e7f4      	b.n	801404c <handle_manage_user+0x168>
	                mg_http_reply(c, 400, headers,
 8014062:	4b5b      	ldr	r3, [pc, #364]	@ (80141d0 <handle_manage_user+0x2ec>)
 8014064:	4a56      	ldr	r2, [pc, #344]	@ (80141c0 <handle_manage_user+0x2dc>)
 8014066:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801406a:	4630      	mov	r0, r6
 801406c:	f010 fb46 	bl	80246fc <mg_http_reply>
	                free(username_add);
 8014070:	4628      	mov	r0, r5
 8014072:	f007 f873 	bl	801b15c <vPortFree>
	                free(password_add);
 8014076:	4638      	mov	r0, r7
 8014078:	f007 f870 	bl	801b15c <vPortFree>
	                return;
 801407c:	e7e6      	b.n	801404c <handle_manage_user+0x168>
			char add_pass_digest[sha1_str_len] = {0};
 801407e:	2400      	movs	r4, #0
 8014080:	9404      	str	r4, [sp, #16]
 8014082:	2225      	movs	r2, #37	@ 0x25
 8014084:	4621      	mov	r1, r4
 8014086:	a805      	add	r0, sp, #20
 8014088:	f019 f832 	bl	802d0f0 <memset>
			mg_sha1_init(&sha1_ctx);
 801408c:	a80f      	add	r0, sp, #60	@ 0x3c
 801408e:	f010 fc0d 	bl	80248ac <mg_sha1_init>
			mg_sha1_update(&sha1_ctx, (const unsigned char *)password_add, strlen(password_add) * sizeof(char));
 8014092:	4638      	mov	r0, r7
 8014094:	f7fc f904 	bl	80102a0 <strlen>
 8014098:	4602      	mov	r2, r0
 801409a:	4639      	mov	r1, r7
 801409c:	a80f      	add	r0, sp, #60	@ 0x3c
 801409e:	f010 fc1f 	bl	80248e0 <mg_sha1_update>
			mg_sha1_final((unsigned char *)add_pass_digest, &sha1_ctx);
 80140a2:	a90f      	add	r1, sp, #60	@ 0x3c
 80140a4:	a804      	add	r0, sp, #16
 80140a6:	f010 fc55 	bl	8024954 <mg_sha1_final>
	        for (int i = 0; i < user_list_size; i++) {
 80140aa:	4621      	mov	r1, r4
 80140ac:	2909      	cmp	r1, #9
 80140ae:	dc24      	bgt.n	80140fa <handle_manage_user+0x216>
	            if (web_users[i].user[0] == '\0') { // Пустая запись
 80140b0:	23a9      	movs	r3, #169	@ 0xa9
 80140b2:	fb01 f303 	mul.w	r3, r1, r3
 80140b6:	4a3c      	ldr	r2, [pc, #240]	@ (80141a8 <handle_manage_user+0x2c4>)
 80140b8:	5cd3      	ldrb	r3, [r2, r3]
 80140ba:	b10b      	cbz	r3, 80140c0 <handle_manage_user+0x1dc>
	        for (int i = 0; i < user_list_size; i++) {
 80140bc:	3101      	adds	r1, #1
 80140be:	e7f5      	b.n	80140ac <handle_manage_user+0x1c8>
	                strncpy(web_users[i].user, username_add, sizeof(web_users[i].user) - 1);
 80140c0:	23a9      	movs	r3, #169	@ 0xa9
 80140c2:	fb03 f401 	mul.w	r4, r3, r1
 80140c6:	4690      	mov	r8, r2
 80140c8:	227f      	movs	r2, #127	@ 0x7f
 80140ca:	4629      	mov	r1, r5
 80140cc:	eb08 0004 	add.w	r0, r8, r4
 80140d0:	f019 f855 	bl	802d17e <strncpy>
	                strncpy(web_users[i].pass_digest, add_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 80140d4:	3480      	adds	r4, #128	@ 0x80
 80140d6:	2228      	movs	r2, #40	@ 0x28
 80140d8:	a904      	add	r1, sp, #16
 80140da:	eb08 0004 	add.w	r0, r8, r4
 80140de:	f019 f84e 	bl	802d17e <strncpy>
	                write_users(user_cred_file, web_users, user_list_size);
 80140e2:	220a      	movs	r2, #10
 80140e4:	4641      	mov	r1, r8
 80140e6:	483b      	ldr	r0, [pc, #236]	@ (80141d4 <handle_manage_user+0x2f0>)
 80140e8:	f7ff fedc 	bl	8013ea4 <write_users>
	            mg_http_reply(c, 200, headers,
 80140ec:	4b3a      	ldr	r3, [pc, #232]	@ (80141d8 <handle_manage_user+0x2f4>)
 80140ee:	4a34      	ldr	r2, [pc, #208]	@ (80141c0 <handle_manage_user+0x2dc>)
 80140f0:	21c8      	movs	r1, #200	@ 0xc8
 80140f2:	4630      	mov	r0, r6
 80140f4:	f010 fb02 	bl	80246fc <mg_http_reply>
 80140f8:	e00e      	b.n	8014118 <handle_manage_user+0x234>
	            mg_http_reply(c, 400, headers,
 80140fa:	4b38      	ldr	r3, [pc, #224]	@ (80141dc <handle_manage_user+0x2f8>)
 80140fc:	4a30      	ldr	r2, [pc, #192]	@ (80141c0 <handle_manage_user+0x2dc>)
 80140fe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014102:	4630      	mov	r0, r6
 8014104:	f010 fafa 	bl	80246fc <mg_http_reply>
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8014108:	e006      	b.n	8014118 <handle_manage_user+0x234>
	        mg_http_reply(c, 400, headers,
 801410a:	4b35      	ldr	r3, [pc, #212]	@ (80141e0 <handle_manage_user+0x2fc>)
 801410c:	4a2c      	ldr	r2, [pc, #176]	@ (80141c0 <handle_manage_user+0x2dc>)
 801410e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014112:	4630      	mov	r0, r6
 8014114:	f010 faf2 	bl	80246fc <mg_http_reply>
		free(username_add);
 8014118:	4628      	mov	r0, r5
 801411a:	f007 f81f 	bl	801b15c <vPortFree>
		free(password_add);
 801411e:	4638      	mov	r0, r7
 8014120:	f007 f81c 	bl	801b15c <vPortFree>
		return;
 8014124:	e792      	b.n	801404c <handle_manage_user+0x168>
	}else if (mg_match(hm->method, mg_str("PUT"), NULL)){
 8014126:	ad2a      	add	r5, sp, #168	@ 0xa8
 8014128:	492e      	ldr	r1, [pc, #184]	@ (80141e4 <handle_manage_user+0x300>)
 801412a:	4628      	mov	r0, r5
 801412c:	f010 fc70 	bl	8024a10 <mg_str_s>
 8014130:	2300      	movs	r3, #0
 8014132:	9300      	str	r3, [sp, #0]
 8014134:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014138:	e894 0003 	ldmia.w	r4, {r0, r1}
 801413c:	f010 fe8a 	bl	8024e54 <mg_match>
 8014140:	2800      	cmp	r0, #0
 8014142:	d155      	bne.n	80141f0 <handle_manage_user+0x30c>
	}else if (mg_match(hm->method, mg_str("DELETE"), NULL)){
 8014144:	ad2c      	add	r5, sp, #176	@ 0xb0
 8014146:	4928      	ldr	r1, [pc, #160]	@ (80141e8 <handle_manage_user+0x304>)
 8014148:	4628      	mov	r0, r5
 801414a:	f010 fc61 	bl	8024a10 <mg_str_s>
 801414e:	2300      	movs	r3, #0
 8014150:	9300      	str	r3, [sp, #0]
 8014152:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014156:	e894 0003 	ldmia.w	r4, {r0, r1}
 801415a:	f010 fe7b 	bl	8024e54 <mg_match>
 801415e:	2800      	cmp	r0, #0
 8014160:	f000 80f3 	beq.w	801434a <handle_manage_user+0x466>
	    username_del = mg_json_get_str(hm->body, "$.user");
 8014164:	4a0e      	ldr	r2, [pc, #56]	@ (80141a0 <handle_manage_user+0x2bc>)
 8014166:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 801416a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801416e:	f011 fd3f 	bl	8025bf0 <mg_json_get_str>
	    if (username_del && strlen(username_del) > 0) {
 8014172:	4607      	mov	r7, r0
 8014174:	b118      	cbz	r0, 801417e <handle_manage_user+0x29a>
 8014176:	7803      	ldrb	r3, [r0, #0]
 8014178:	2b00      	cmp	r3, #0
 801417a:	f040 80cf 	bne.w	801431c <handle_manage_user+0x438>
	        mg_http_reply(c, 400, headers,
 801417e:	4b1b      	ldr	r3, [pc, #108]	@ (80141ec <handle_manage_user+0x308>)
 8014180:	4a0f      	ldr	r2, [pc, #60]	@ (80141c0 <handle_manage_user+0x2dc>)
 8014182:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014186:	4630      	mov	r0, r6
 8014188:	f010 fab8 	bl	80246fc <mg_http_reply>
	    free(username_del);
 801418c:	4638      	mov	r0, r7
 801418e:	f006 ffe5 	bl	801b15c <vPortFree>
 8014192:	e75b      	b.n	801404c <handle_manage_user+0x168>
 8014194:	08036dd8 	.word	0x08036dd8
 8014198:	08036f6c 	.word	0x08036f6c
 801419c:	08037674 	.word	0x08037674
 80141a0:	08037bbc 	.word	0x08037bbc
 80141a4:	08037bc4 	.word	0x08037bc4
 80141a8:	20002208 	.word	0x20002208
 80141ac:	08037b94 	.word	0x08037b94
 80141b0:	0803b87c 	.word	0x0803b87c
 80141b4:	08037ba4 	.word	0x08037ba4
 80141b8:	08037bb4 	.word	0x08037bb4
 80141bc:	08037bb8 	.word	0x08037bb8
 80141c0:	08036e14 	.word	0x08036e14
 80141c4:	08037850 	.word	0x08037850
 80141c8:	08037884 	.word	0x08037884
 80141cc:	08037678 	.word	0x08037678
 80141d0:	08037bcc 	.word	0x08037bcc
 80141d4:	080366e0 	.word	0x080366e0
 80141d8:	08037c08 	.word	0x08037c08
 80141dc:	08037c44 	.word	0x08037c44
 80141e0:	08037c78 	.word	0x08037c78
 80141e4:	08037cb8 	.word	0x08037cb8
 80141e8:	08037d74 	.word	0x08037d74
 80141ec:	08037e10 	.word	0x08037e10
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 80141f0:	ab03      	add	r3, sp, #12
 80141f2:	4a5a      	ldr	r2, [pc, #360]	@ (801435c <handle_manage_user+0x478>)
 80141f4:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80141f8:	c903      	ldmia	r1, {r0, r1}
 80141fa:	f00f f8db 	bl	80233b4 <mg_json_get>
 80141fe:	2800      	cmp	r0, #0
 8014200:	db21      	blt.n	8014246 <handle_manage_user+0x362>
	        username_edit = mg_json_get_str(hm->body, "$.user");
 8014202:	4a57      	ldr	r2, [pc, #348]	@ (8014360 <handle_manage_user+0x47c>)
 8014204:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8014208:	e894 0003 	ldmia.w	r4, {r0, r1}
 801420c:	f011 fcf0 	bl	8025bf0 <mg_json_get_str>
 8014210:	4605      	mov	r5, r0
	        new_password = mg_json_get_str(hm->body, "$.pass");
 8014212:	4a54      	ldr	r2, [pc, #336]	@ (8014364 <handle_manage_user+0x480>)
 8014214:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014218:	f011 fcea 	bl	8025bf0 <mg_json_get_str>
 801421c:	4604      	mov	r4, r0
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 801421e:	b125      	cbz	r5, 801422a <handle_manage_user+0x346>
 8014220:	b118      	cbz	r0, 801422a <handle_manage_user+0x346>
 8014222:	782b      	ldrb	r3, [r5, #0]
 8014224:	b10b      	cbz	r3, 801422a <handle_manage_user+0x346>
 8014226:	7803      	ldrb	r3, [r0, #0]
 8014228:	b9bb      	cbnz	r3, 801425a <handle_manage_user+0x376>
	            mg_http_reply(c, 400, headers,
 801422a:	4b4f      	ldr	r3, [pc, #316]	@ (8014368 <handle_manage_user+0x484>)
 801422c:	4a4f      	ldr	r2, [pc, #316]	@ (801436c <handle_manage_user+0x488>)
 801422e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014232:	4630      	mov	r0, r6
 8014234:	f010 fa62 	bl	80246fc <mg_http_reply>
	    free(username_edit);
 8014238:	4628      	mov	r0, r5
 801423a:	f006 ff8f 	bl	801b15c <vPortFree>
	    free(new_password);
 801423e:	4620      	mov	r0, r4
 8014240:	f006 ff8c 	bl	801b15c <vPortFree>
	    return;
 8014244:	e702      	b.n	801404c <handle_manage_user+0x168>
	        mg_http_reply(c, 400, headers,
 8014246:	4b4a      	ldr	r3, [pc, #296]	@ (8014370 <handle_manage_user+0x48c>)
 8014248:	4a48      	ldr	r2, [pc, #288]	@ (801436c <handle_manage_user+0x488>)
 801424a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801424e:	4630      	mov	r0, r6
 8014250:	f010 fa54 	bl	80246fc <mg_http_reply>
	    char *new_password = NULL;
 8014254:	2400      	movs	r4, #0
	    char *username_edit = NULL;
 8014256:	4625      	mov	r5, r4
 8014258:	e7ee      	b.n	8014238 <handle_manage_user+0x354>
	            char new_pass_digest[sha1_str_len] = {0};
 801425a:	2700      	movs	r7, #0
 801425c:	9704      	str	r7, [sp, #16]
 801425e:	2225      	movs	r2, #37	@ 0x25
 8014260:	4639      	mov	r1, r7
 8014262:	a805      	add	r0, sp, #20
 8014264:	f018 ff44 	bl	802d0f0 <memset>
	            mg_sha1_init(&sha1_ctx);
 8014268:	a80f      	add	r0, sp, #60	@ 0x3c
 801426a:	f010 fb1f 	bl	80248ac <mg_sha1_init>
	            mg_sha1_update(&sha1_ctx, (const unsigned char *)new_password, strlen(new_password));
 801426e:	4620      	mov	r0, r4
 8014270:	f7fc f816 	bl	80102a0 <strlen>
 8014274:	4602      	mov	r2, r0
 8014276:	4621      	mov	r1, r4
 8014278:	a80f      	add	r0, sp, #60	@ 0x3c
 801427a:	f010 fb31 	bl	80248e0 <mg_sha1_update>
	            mg_sha1_final((unsigned char *)new_pass_digest, &sha1_ctx);
 801427e:	a90f      	add	r1, sp, #60	@ 0x3c
 8014280:	a804      	add	r0, sp, #16
 8014282:	f010 fb67 	bl	8024954 <mg_sha1_final>
	            for (int i = 0; i < user_list_size; i++) {
 8014286:	2f09      	cmp	r7, #9
 8014288:	dc25      	bgt.n	80142d6 <handle_manage_user+0x3f2>
	                if (strcmp(web_users[i].user, username_edit) == 0) {
 801428a:	4629      	mov	r1, r5
 801428c:	20a9      	movs	r0, #169	@ 0xa9
 801428e:	4b39      	ldr	r3, [pc, #228]	@ (8014374 <handle_manage_user+0x490>)
 8014290:	fb00 3007 	mla	r0, r0, r7, r3
 8014294:	f7fb ffa4 	bl	80101e0 <strcmp>
 8014298:	b108      	cbz	r0, 801429e <handle_manage_user+0x3ba>
	            for (int i = 0; i < user_list_size; i++) {
 801429a:	3701      	adds	r7, #1
 801429c:	e7f3      	b.n	8014286 <handle_manage_user+0x3a2>
	                    strncpy(web_users[i].pass_digest, new_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 801429e:	23a9      	movs	r3, #169	@ 0xa9
 80142a0:	fb03 f707 	mul.w	r7, r3, r7
 80142a4:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80142a8:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8014374 <handle_manage_user+0x490>
 80142ac:	2228      	movs	r2, #40	@ 0x28
 80142ae:	a904      	add	r1, sp, #16
 80142b0:	4440      	add	r0, r8
 80142b2:	f018 ff64 	bl	802d17e <strncpy>
	                    web_users[i].pass_digest[sizeof(web_users[i].pass_digest) - 1] = '\0';
 80142b6:	4447      	add	r7, r8
 80142b8:	2300      	movs	r3, #0
 80142ba:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	                    write_users(user_cred_file, web_users, user_list_size);
 80142be:	220a      	movs	r2, #10
 80142c0:	4641      	mov	r1, r8
 80142c2:	482d      	ldr	r0, [pc, #180]	@ (8014378 <handle_manage_user+0x494>)
 80142c4:	f7ff fdee 	bl	8013ea4 <write_users>
	                mg_http_reply(c, 200, headers,
 80142c8:	4b2c      	ldr	r3, [pc, #176]	@ (801437c <handle_manage_user+0x498>)
 80142ca:	4a28      	ldr	r2, [pc, #160]	@ (801436c <handle_manage_user+0x488>)
 80142cc:	21c8      	movs	r1, #200	@ 0xc8
 80142ce:	4630      	mov	r0, r6
 80142d0:	f010 fa14 	bl	80246fc <mg_http_reply>
 80142d4:	e7b0      	b.n	8014238 <handle_manage_user+0x354>
	                mg_http_reply(c, 404, headers,
 80142d6:	4b2a      	ldr	r3, [pc, #168]	@ (8014380 <handle_manage_user+0x49c>)
 80142d8:	4a24      	ldr	r2, [pc, #144]	@ (801436c <handle_manage_user+0x488>)
 80142da:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80142de:	4630      	mov	r0, r6
 80142e0:	f010 fa0c 	bl	80246fc <mg_http_reply>
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 80142e4:	e7a8      	b.n	8014238 <handle_manage_user+0x354>
	                memset(web_users[i].user, 0, sizeof(web_users[i].user));
 80142e6:	2280      	movs	r2, #128	@ 0x80
 80142e8:	2100      	movs	r1, #0
 80142ea:	4628      	mov	r0, r5
 80142ec:	f018 ff00 	bl	802d0f0 <memset>
	                memset(web_users[i].pass_digest, 0, sizeof(web_users[i].pass_digest));
 80142f0:	23a9      	movs	r3, #169	@ 0xa9
 80142f2:	fb03 f004 	mul.w	r0, r3, r4
 80142f6:	3080      	adds	r0, #128	@ 0x80
 80142f8:	4c1e      	ldr	r4, [pc, #120]	@ (8014374 <handle_manage_user+0x490>)
 80142fa:	2229      	movs	r2, #41	@ 0x29
 80142fc:	2100      	movs	r1, #0
 80142fe:	4420      	add	r0, r4
 8014300:	f018 fef6 	bl	802d0f0 <memset>
	                write_users(user_cred_file, web_users, user_list_size);
 8014304:	220a      	movs	r2, #10
 8014306:	4621      	mov	r1, r4
 8014308:	481b      	ldr	r0, [pc, #108]	@ (8014378 <handle_manage_user+0x494>)
 801430a:	f7ff fdcb 	bl	8013ea4 <write_users>
	            mg_http_reply(c, 200, headers,
 801430e:	4b1d      	ldr	r3, [pc, #116]	@ (8014384 <handle_manage_user+0x4a0>)
 8014310:	4a16      	ldr	r2, [pc, #88]	@ (801436c <handle_manage_user+0x488>)
 8014312:	21c8      	movs	r1, #200	@ 0xc8
 8014314:	4630      	mov	r0, r6
 8014316:	f010 f9f1 	bl	80246fc <mg_http_reply>
 801431a:	e737      	b.n	801418c <handle_manage_user+0x2a8>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 801431c:	2401      	movs	r4, #1
 801431e:	2c09      	cmp	r4, #9
 8014320:	dc0b      	bgt.n	801433a <handle_manage_user+0x456>
	            if (strcmp(web_users[i].user, username_del) == 0) {
 8014322:	23a9      	movs	r3, #169	@ 0xa9
 8014324:	4d13      	ldr	r5, [pc, #76]	@ (8014374 <handle_manage_user+0x490>)
 8014326:	fb03 5504 	mla	r5, r3, r4, r5
 801432a:	4639      	mov	r1, r7
 801432c:	4628      	mov	r0, r5
 801432e:	f7fb ff57 	bl	80101e0 <strcmp>
 8014332:	2800      	cmp	r0, #0
 8014334:	d0d7      	beq.n	80142e6 <handle_manage_user+0x402>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8014336:	3401      	adds	r4, #1
 8014338:	e7f1      	b.n	801431e <handle_manage_user+0x43a>
	            mg_http_reply(c, 400, headers,
 801433a:	4b13      	ldr	r3, [pc, #76]	@ (8014388 <handle_manage_user+0x4a4>)
 801433c:	4a0b      	ldr	r2, [pc, #44]	@ (801436c <handle_manage_user+0x488>)
 801433e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014342:	4630      	mov	r0, r6
 8014344:	f010 f9da 	bl	80246fc <mg_http_reply>
 8014348:	e720      	b.n	801418c <handle_manage_user+0x2a8>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801434a:	4b10      	ldr	r3, [pc, #64]	@ (801438c <handle_manage_user+0x4a8>)
 801434c:	4a07      	ldr	r2, [pc, #28]	@ (801436c <handle_manage_user+0x488>)
 801434e:	f240 1195 	movw	r1, #405	@ 0x195
 8014352:	4630      	mov	r0, r6
 8014354:	f010 f9d2 	bl	80246fc <mg_http_reply>
 8014358:	e678      	b.n	801404c <handle_manage_user+0x168>
 801435a:	bf00      	nop
 801435c:	08037674 	.word	0x08037674
 8014360:	08037bbc 	.word	0x08037bbc
 8014364:	08037bc4 	.word	0x08037bc4
 8014368:	08037d30 	.word	0x08037d30
 801436c:	08036e14 	.word	0x08036e14
 8014370:	08037678 	.word	0x08037678
 8014374:	20002208 	.word	0x20002208
 8014378:	080366e0 	.word	0x080366e0
 801437c:	08037cbc 	.word	0x08037cbc
 8014380:	08037d00 	.word	0x08037d00
 8014384:	08037d7c 	.word	0x08037d7c
 8014388:	08037dbc 	.word	0x08037dbc
 801438c:	08037e50 	.word	0x08037e50

08014390 <load_users>:
static bool load_users(const char *file_path, users_list_t * users, size_t count){
 8014390:	b570      	push	{r4, r5, r6, lr}
 8014392:	460e      	mov	r6, r1
 8014394:	4614      	mov	r4, r2
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_READ);
 8014396:	2201      	movs	r2, #1
 8014398:	4601      	mov	r1, r0
 801439a:	480e      	ldr	r0, [pc, #56]	@ (80143d4 <load_users+0x44>)
 801439c:	f00e ff20 	bl	80231e0 <mg_fs_open>
	if (!fd) {
 80143a0:	b188      	cbz	r0, 80143c6 <load_users+0x36>
 80143a2:	4605      	mov	r5, r0
	mg_fs_lfs.rd(fd->fd, users, sizeof(users_list_t) * count);
 80143a4:	4b0b      	ldr	r3, [pc, #44]	@ (80143d4 <load_users+0x44>)
 80143a6:	691b      	ldr	r3, [r3, #16]
 80143a8:	22a9      	movs	r2, #169	@ 0xa9
 80143aa:	fb04 f202 	mul.w	r2, r4, r2
 80143ae:	4631      	mov	r1, r6
 80143b0:	6800      	ldr	r0, [r0, #0]
 80143b2:	4798      	blx	r3
	mg_fs_close(fd);
 80143b4:	4628      	mov	r0, r5
 80143b6:	f00e ff2c 	bl	8023212 <mg_fs_close>
	logging(L_INFO, "Loaded web users from file");
 80143ba:	4907      	ldr	r1, [pc, #28]	@ (80143d8 <load_users+0x48>)
 80143bc:	2001      	movs	r0, #1
 80143be:	f7fd ff13 	bl	80121e8 <logging>
	return true;
 80143c2:	2001      	movs	r0, #1
}
 80143c4:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Can't open file with users");
 80143c6:	4905      	ldr	r1, [pc, #20]	@ (80143dc <load_users+0x4c>)
 80143c8:	2003      	movs	r0, #3
 80143ca:	f7fd ff0d 	bl	80121e8 <logging>
		return false;
 80143ce:	2000      	movs	r0, #0
 80143d0:	e7f8      	b.n	80143c4 <load_users+0x34>
 80143d2:	bf00      	nop
 80143d4:	200000a0 	.word	0x200000a0
 80143d8:	08037ecc 	.word	0x08037ecc
 80143dc:	08037eb0 	.word	0x08037eb0

080143e0 <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 80143e0:	b570      	push	{r4, r5, r6, lr}
 80143e2:	b086      	sub	sp, #24
 80143e4:	4605      	mov	r5, r0
 80143e6:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 80143e8:	ae04      	add	r6, sp, #16
 80143ea:	4915      	ldr	r1, [pc, #84]	@ (8014440 <handle_restart_mcu+0x60>)
 80143ec:	4630      	mov	r0, r6
 80143ee:	f010 fb0f 	bl	8024a10 <mg_str_s>
 80143f2:	2300      	movs	r3, #0
 80143f4:	9300      	str	r3, [sp, #0]
 80143f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80143fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80143fe:	f010 fd29 	bl	8024e54 <mg_match>
 8014402:	b1a0      	cbz	r0, 801442e <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 8014404:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 2 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 8014406:	6818      	ldr	r0, [r3, #0]
 8014408:	2300      	movs	r3, #0
 801440a:	9302      	str	r3, [sp, #8]
 801440c:	4b0d      	ldr	r3, [pc, #52]	@ (8014444 <handle_restart_mcu+0x64>)
 801440e:	9301      	str	r3, [sp, #4]
 8014410:	2301      	movs	r3, #1
 8014412:	9300      	str	r3, [sp, #0]
 8014414:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8014418:	2300      	movs	r3, #0
 801441a:	f011 fcdb 	bl	8025dd4 <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 801441e:	4b0a      	ldr	r3, [pc, #40]	@ (8014448 <handle_restart_mcu+0x68>)
 8014420:	4a0a      	ldr	r2, [pc, #40]	@ (801444c <handle_restart_mcu+0x6c>)
 8014422:	21c8      	movs	r1, #200	@ 0xc8
 8014424:	4628      	mov	r0, r5
 8014426:	f010 f969 	bl	80246fc <mg_http_reply>
}
 801442a:	b006      	add	sp, #24
 801442c:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801442e:	4b08      	ldr	r3, [pc, #32]	@ (8014450 <handle_restart_mcu+0x70>)
 8014430:	4a06      	ldr	r2, [pc, #24]	@ (801444c <handle_restart_mcu+0x6c>)
 8014432:	f240 1195 	movw	r1, #405	@ 0x195
 8014436:	4628      	mov	r0, r5
 8014438:	f010 f960 	bl	80246fc <mg_http_reply>
}
 801443c:	e7f5      	b.n	801442a <handle_restart_mcu+0x4a>
 801443e:	bf00      	nop
 8014440:	08036f6c 	.word	0x08036f6c
 8014444:	08016a6d 	.word	0x08016a6d
 8014448:	08037ee8 	.word	0x08037ee8
 801444c:	08036e14 	.word	0x08036e14
 8014450:	08036ff4 	.word	0x08036ff4

08014454 <handle_activete_and_reboot>:
static void handle_activete_and_reboot(struct mg_connection *c, struct mg_http_message *hm){
 8014454:	b570      	push	{r4, r5, r6, lr}
 8014456:	b084      	sub	sp, #16
 8014458:	4605      	mov	r5, r0
 801445a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 801445c:	ae02      	add	r6, sp, #8
 801445e:	4914      	ldr	r1, [pc, #80]	@ (80144b0 <handle_activete_and_reboot+0x5c>)
 8014460:	4630      	mov	r0, r6
 8014462:	f010 fad5 	bl	8024a10 <mg_str_s>
 8014466:	2300      	movs	r3, #0
 8014468:	9300      	str	r3, [sp, #0]
 801446a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801446e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014472:	f010 fcef 	bl	8024e54 <mg_match>
 8014476:	b198      	cbz	r0, 80144a0 <handle_activete_and_reboot+0x4c>
		if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 8014478:	4b0e      	ldr	r3, [pc, #56]	@ (80144b4 <handle_activete_and_reboot+0x60>)
 801447a:	69db      	ldr	r3, [r3, #28]
 801447c:	490e      	ldr	r1, [pc, #56]	@ (80144b8 <handle_activete_and_reboot+0x64>)
 801447e:	480f      	ldr	r0, [pc, #60]	@ (80144bc <handle_activete_and_reboot+0x68>)
 8014480:	4798      	blx	r3
 8014482:	b128      	cbz	r0, 8014490 <handle_activete_and_reboot+0x3c>
			handle_restart_mcu(c, hm);
 8014484:	4621      	mov	r1, r4
 8014486:	4628      	mov	r0, r5
 8014488:	f7ff ffaa 	bl	80143e0 <handle_restart_mcu>
}
 801448c:	b004      	add	sp, #16
 801448e:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 500, headers, //TODO delete for release,
 8014490:	4b0b      	ldr	r3, [pc, #44]	@ (80144c0 <handle_activete_and_reboot+0x6c>)
 8014492:	4a0c      	ldr	r2, [pc, #48]	@ (80144c4 <handle_activete_and_reboot+0x70>)
 8014494:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8014498:	4628      	mov	r0, r5
 801449a:	f010 f92f 	bl	80246fc <mg_http_reply>
 801449e:	e7f5      	b.n	801448c <handle_activete_and_reboot+0x38>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80144a0:	4b09      	ldr	r3, [pc, #36]	@ (80144c8 <handle_activete_and_reboot+0x74>)
 80144a2:	4a08      	ldr	r2, [pc, #32]	@ (80144c4 <handle_activete_and_reboot+0x70>)
 80144a4:	f240 1195 	movw	r1, #405	@ 0x195
 80144a8:	4628      	mov	r0, r5
 80144aa:	f010 f927 	bl	80246fc <mg_http_reply>
}
 80144ae:	e7ed      	b.n	801448c <handle_activete_and_reboot+0x38>
 80144b0:	08036f6c 	.word	0x08036f6c
 80144b4:	200000a0 	.word	0x200000a0
 80144b8:	08036698 	.word	0x08036698
 80144bc:	08037f20 	.word	0x08037f20
 80144c0:	08037f38 	.word	0x08037f38
 80144c4:	08036e14 	.word	0x08036e14
 80144c8:	08036ff4 	.word	0x08036ff4

080144cc <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 80144cc:	b570      	push	{r4, r5, r6, lr}
 80144ce:	b0c4      	sub	sp, #272	@ 0x110
 80144d0:	4606      	mov	r6, r0
 80144d2:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 80144d4:	ad42      	add	r5, sp, #264	@ 0x108
 80144d6:	4920      	ldr	r1, [pc, #128]	@ (8014558 <handle_fs_mkdir+0x8c>)
 80144d8:	4628      	mov	r0, r5
 80144da:	f010 fa99 	bl	8024a10 <mg_str_s>
 80144de:	2300      	movs	r3, #0
 80144e0:	9300      	str	r3, [sp, #0]
 80144e2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80144e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80144ea:	f010 fcb3 	bl	8024e54 <mg_match>
 80144ee:	b350      	cbz	r0, 8014546 <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 80144f0:	237b      	movs	r3, #123	@ 0x7b
 80144f2:	aa23      	add	r2, sp, #140	@ 0x8c
 80144f4:	4919      	ldr	r1, [pc, #100]	@ (801455c <handle_fs_mkdir+0x90>)
 80144f6:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 80144fa:	f011 f976 	bl	80257ea <mg_http_get_var>
 80144fe:	2800      	cmp	r0, #0
 8014500:	dd19      	ble.n	8014536 <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 8014502:	ab23      	add	r3, sp, #140	@ 0x8c
 8014504:	4a16      	ldr	r2, [pc, #88]	@ (8014560 <handle_fs_mkdir+0x94>)
 8014506:	2180      	movs	r1, #128	@ 0x80
 8014508:	a803      	add	r0, sp, #12
 801450a:	f018 f8c7 	bl	802c69c <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 801450e:	4b15      	ldr	r3, [pc, #84]	@ (8014564 <handle_fs_mkdir+0x98>)
 8014510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014512:	a803      	add	r0, sp, #12
 8014514:	4798      	blx	r3
 8014516:	b130      	cbz	r0, 8014526 <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 8014518:	4b13      	ldr	r3, [pc, #76]	@ (8014568 <handle_fs_mkdir+0x9c>)
 801451a:	4a14      	ldr	r2, [pc, #80]	@ (801456c <handle_fs_mkdir+0xa0>)
 801451c:	21c8      	movs	r1, #200	@ 0xc8
 801451e:	4630      	mov	r0, r6
 8014520:	f010 f8ec 	bl	80246fc <mg_http_reply>
 8014524:	e016      	b.n	8014554 <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 8014526:	4b12      	ldr	r3, [pc, #72]	@ (8014570 <handle_fs_mkdir+0xa4>)
 8014528:	4a10      	ldr	r2, [pc, #64]	@ (801456c <handle_fs_mkdir+0xa0>)
 801452a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801452e:	4630      	mov	r0, r6
 8014530:	f010 f8e4 	bl	80246fc <mg_http_reply>
 8014534:	e00e      	b.n	8014554 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8014536:	4b0f      	ldr	r3, [pc, #60]	@ (8014574 <handle_fs_mkdir+0xa8>)
 8014538:	4a0c      	ldr	r2, [pc, #48]	@ (801456c <handle_fs_mkdir+0xa0>)
 801453a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801453e:	4630      	mov	r0, r6
 8014540:	f010 f8dc 	bl	80246fc <mg_http_reply>
 8014544:	e006      	b.n	8014554 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014546:	4b0c      	ldr	r3, [pc, #48]	@ (8014578 <handle_fs_mkdir+0xac>)
 8014548:	4a08      	ldr	r2, [pc, #32]	@ (801456c <handle_fs_mkdir+0xa0>)
 801454a:	f240 1195 	movw	r1, #405	@ 0x195
 801454e:	4630      	mov	r0, r6
 8014550:	f010 f8d4 	bl	80246fc <mg_http_reply>
}
 8014554:	b044      	add	sp, #272	@ 0x110
 8014556:	bd70      	pop	{r4, r5, r6, pc}
 8014558:	08036f6c 	.word	0x08036f6c
 801455c:	08037f7c 	.word	0x08037f7c
 8014560:	08037f84 	.word	0x08037f84
 8014564:	200000a0 	.word	0x200000a0
 8014568:	08037f8c 	.word	0x08037f8c
 801456c:	08036e14 	.word	0x08036e14
 8014570:	08037fc0 	.word	0x08037fc0
 8014574:	08037ffc 	.word	0x08037ffc
 8014578:	08036ff4 	.word	0x08036ff4

0801457c <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 801457c:	b570      	push	{r4, r5, r6, lr}
 801457e:	b0a4      	sub	sp, #144	@ 0x90
 8014580:	4605      	mov	r5, r0
 8014582:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014584:	ae22      	add	r6, sp, #136	@ 0x88
 8014586:	491c      	ldr	r1, [pc, #112]	@ (80145f8 <handle_firmware_upload+0x7c>)
 8014588:	4630      	mov	r0, r6
 801458a:	f010 fa41 	bl	8024a10 <mg_str_s>
 801458e:	2300      	movs	r3, #0
 8014590:	9300      	str	r3, [sp, #0]
 8014592:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014596:	e894 0003 	ldmia.w	r4, {r0, r1}
 801459a:	f010 fc5b 	bl	8024e54 <mg_match>
 801459e:	b308      	cbz	r0, 80145e4 <handle_firmware_upload+0x68>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80145a0:	2380      	movs	r3, #128	@ 0x80
 80145a2:	aa02      	add	r2, sp, #8
 80145a4:	4915      	ldr	r1, [pc, #84]	@ (80145fc <handle_firmware_upload+0x80>)
 80145a6:	f104 0010 	add.w	r0, r4, #16
 80145aa:	f011 f91e 	bl	80257ea <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 80145ae:	4914      	ldr	r1, [pc, #80]	@ (8014600 <handle_firmware_upload+0x84>)
 80145b0:	a802      	add	r0, sp, #8
 80145b2:	f7fb fe15 	bl	80101e0 <strcmp>
 80145b6:	b958      	cbnz	r0, 80145d0 <handle_firmware_upload+0x54>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 80145b8:	4b12      	ldr	r3, [pc, #72]	@ (8014604 <handle_firmware_upload+0x88>)
 80145ba:	9300      	str	r3, [sp, #0]
 80145bc:	4b12      	ldr	r3, [pc, #72]	@ (8014608 <handle_firmware_upload+0x8c>)
 80145be:	4a13      	ldr	r2, [pc, #76]	@ (801460c <handle_firmware_upload+0x90>)
 80145c0:	4621      	mov	r1, r4
 80145c2:	4628      	mov	r0, r5
 80145c4:	f012 fed8 	bl	8027378 <mg_http_upload>
			vTaskDelay(1);
 80145c8:	2001      	movs	r0, #1
 80145ca:	f005 fead 	bl	801a328 <vTaskDelay>
 80145ce:	e010      	b.n	80145f2 <handle_firmware_upload+0x76>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80145d0:	4b0b      	ldr	r3, [pc, #44]	@ (8014600 <handle_firmware_upload+0x84>)
 80145d2:	9300      	str	r3, [sp, #0]
 80145d4:	4b0e      	ldr	r3, [pc, #56]	@ (8014610 <handle_firmware_upload+0x94>)
 80145d6:	4a0f      	ldr	r2, [pc, #60]	@ (8014614 <handle_firmware_upload+0x98>)
 80145d8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80145dc:	4628      	mov	r0, r5
 80145de:	f010 f88d 	bl	80246fc <mg_http_reply>
 80145e2:	e006      	b.n	80145f2 <handle_firmware_upload+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80145e4:	4b0c      	ldr	r3, [pc, #48]	@ (8014618 <handle_firmware_upload+0x9c>)
 80145e6:	4a0b      	ldr	r2, [pc, #44]	@ (8014614 <handle_firmware_upload+0x98>)
 80145e8:	f240 1195 	movw	r1, #405	@ 0x195
 80145ec:	4628      	mov	r0, r5
 80145ee:	f010 f885 	bl	80246fc <mg_http_reply>
}
 80145f2:	b024      	add	sp, #144	@ 0x90
 80145f4:	bd70      	pop	{r4, r5, r6, pc}
 80145f6:	bf00      	nop
 80145f8:	08036f6c 	.word	0x08036f6c
 80145fc:	0803b7cc 	.word	0x0803b7cc
 8014600:	08038038 	.word	0x08038038
 8014604:	0003d090 	.word	0x0003d090
 8014608:	0803668c 	.word	0x0803668c
 801460c:	200000a0 	.word	0x200000a0
 8014610:	08038048 	.word	0x08038048
 8014614:	08036e14 	.word	0x08036e14
 8014618:	08036ff4 	.word	0x08036ff4

0801461c <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 801461c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801461e:	b097      	sub	sp, #92	@ 0x5c
 8014620:	4604      	mov	r4, r0
 8014622:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 8014624:	2101      	movs	r1, #1
 8014626:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801462a:	f7ff f879 	bl	8013720 <mg_calloc>
	if (buff == NULL){
 801462e:	4605      	mov	r5, r0
 8014630:	b150      	cbz	r0, 8014648 <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8014632:	2201      	movs	r2, #1
 8014634:	4621      	mov	r1, r4
 8014636:	4828      	ldr	r0, [pc, #160]	@ (80146d8 <calc_file_md5sum+0xbc>)
 8014638:	f00e fdd2 	bl	80231e0 <mg_fs_open>
	if (fd==NULL){
 801463c:	4604      	mov	r4, r0
 801463e:	b140      	cbz	r0, 8014652 <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8014640:	4668      	mov	r0, sp
 8014642:	f00f f9dd 	bl	8023a00 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8014646:	e010      	b.n	801466a <calc_file_md5sum+0x4e>
		free(buff);
 8014648:	f006 fd88 	bl	801b15c <vPortFree>
		return -1;
 801464c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014650:	e040      	b.n	80146d4 <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 8014652:	f00e fdde 	bl	8023212 <mg_fs_close>
		free(buff);
 8014656:	4628      	mov	r0, r5
 8014658:	f006 fd80 	bl	801b15c <vPortFree>
		return -2;
 801465c:	f06f 0001 	mvn.w	r0, #1
 8014660:	e038      	b.n	80146d4 <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8014662:	4629      	mov	r1, r5
 8014664:	4668      	mov	r0, sp
 8014666:	f00f f9e1 	bl	8023a2c <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 801466a:	4b1b      	ldr	r3, [pc, #108]	@ (80146d8 <calc_file_md5sum+0xbc>)
 801466c:	691b      	ldr	r3, [r3, #16]
 801466e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014672:	4629      	mov	r1, r5
 8014674:	6820      	ldr	r0, [r4, #0]
 8014676:	4798      	blx	r3
 8014678:	4602      	mov	r2, r0
 801467a:	2800      	cmp	r0, #0
 801467c:	d1f1      	bne.n	8014662 <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 801467e:	4620      	mov	r0, r4
 8014680:	f00e fdc7 	bl	8023212 <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 8014684:	2101      	movs	r1, #1
 8014686:	2010      	movs	r0, #16
 8014688:	f7ff f84a 	bl	8013720 <mg_calloc>
	if (digest == NULL){
 801468c:	4607      	mov	r7, r0
 801468e:	b128      	cbz	r0, 801469c <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 8014690:	4601      	mov	r1, r0
 8014692:	4668      	mov	r0, sp
 8014694:	f00f fa21 	bl	8023ada <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 8014698:	2400      	movs	r4, #0
 801469a:	e012      	b.n	80146c2 <calc_file_md5sum+0xa6>
		free(buff);
 801469c:	4628      	mov	r0, r5
 801469e:	f006 fd5d 	bl	801b15c <vPortFree>
		free(digest);
 80146a2:	4638      	mov	r0, r7
 80146a4:	f006 fd5a 	bl	801b15c <vPortFree>
		return -1;
 80146a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80146ac:	e012      	b.n	80146d4 <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 80146ae:	0061      	lsls	r1, r4, #1
 80146b0:	5d3b      	ldrb	r3, [r7, r4]
 80146b2:	4a0a      	ldr	r2, [pc, #40]	@ (80146dc <calc_file_md5sum+0xc0>)
 80146b4:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 80146b8:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 80146bc:	f017 ffee 	bl	802c69c <snprintf>
	for (int i = 0; i < 16; ++i) {
 80146c0:	3401      	adds	r4, #1
 80146c2:	2c0f      	cmp	r4, #15
 80146c4:	ddf3      	ble.n	80146ae <calc_file_md5sum+0x92>
	free(buff);
 80146c6:	4628      	mov	r0, r5
 80146c8:	f006 fd48 	bl	801b15c <vPortFree>
	free(digest);
 80146cc:	4638      	mov	r0, r7
 80146ce:	f006 fd45 	bl	801b15c <vPortFree>
	return 0;
 80146d2:	2000      	movs	r0, #0
}
 80146d4:	b017      	add	sp, #92	@ 0x5c
 80146d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146d8:	200000a0 	.word	0x200000a0
 80146dc:	08038094 	.word	0x08038094

080146e0 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 80146e0:	b570      	push	{r4, r5, r6, lr}
 80146e2:	b084      	sub	sp, #16
 80146e4:	4605      	mov	r5, r0
 80146e6:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80146e8:	ae02      	add	r6, sp, #8
 80146ea:	4919      	ldr	r1, [pc, #100]	@ (8014750 <handle_firmware_md5+0x70>)
 80146ec:	4630      	mov	r0, r6
 80146ee:	f010 f98f 	bl	8024a10 <mg_str_s>
 80146f2:	2300      	movs	r3, #0
 80146f4:	9300      	str	r3, [sp, #0]
 80146f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80146fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80146fe:	f010 fba9 	bl	8024e54 <mg_match>
 8014702:	b1e8      	cbz	r0, 8014740 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8014704:	2101      	movs	r1, #1
 8014706:	2021      	movs	r0, #33	@ 0x21
 8014708:	f7ff f80a 	bl	8013720 <mg_calloc>
 801470c:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 801470e:	4601      	mov	r1, r0
 8014710:	4810      	ldr	r0, [pc, #64]	@ (8014754 <handle_firmware_md5+0x74>)
 8014712:	f7ff ff83 	bl	801461c <calc_file_md5sum>
 8014716:	b958      	cbnz	r0, 8014730 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8014718:	9400      	str	r4, [sp, #0]
 801471a:	4b0f      	ldr	r3, [pc, #60]	@ (8014758 <handle_firmware_md5+0x78>)
 801471c:	4a0f      	ldr	r2, [pc, #60]	@ (801475c <handle_firmware_md5+0x7c>)
 801471e:	21c8      	movs	r1, #200	@ 0xc8
 8014720:	4628      	mov	r0, r5
 8014722:	f00f ffeb 	bl	80246fc <mg_http_reply>
		free(md5_str);
 8014726:	4620      	mov	r0, r4
 8014728:	f006 fd18 	bl	801b15c <vPortFree>
}
 801472c:	b004      	add	sp, #16
 801472e:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8014730:	4b0b      	ldr	r3, [pc, #44]	@ (8014760 <handle_firmware_md5+0x80>)
 8014732:	4a0a      	ldr	r2, [pc, #40]	@ (801475c <handle_firmware_md5+0x7c>)
 8014734:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8014738:	4628      	mov	r0, r5
 801473a:	f00f ffdf 	bl	80246fc <mg_http_reply>
 801473e:	e7f2      	b.n	8014726 <handle_firmware_md5+0x46>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014740:	4b08      	ldr	r3, [pc, #32]	@ (8014764 <handle_firmware_md5+0x84>)
 8014742:	4a06      	ldr	r2, [pc, #24]	@ (801475c <handle_firmware_md5+0x7c>)
 8014744:	f240 1195 	movw	r1, #405	@ 0x195
 8014748:	4628      	mov	r0, r5
 801474a:	f00f ffd7 	bl	80246fc <mg_http_reply>
}
 801474e:	e7ed      	b.n	801472c <handle_firmware_md5+0x4c>
 8014750:	08036dd8 	.word	0x08036dd8
 8014754:	08037f20 	.word	0x08037f20
 8014758:	0803809c 	.word	0x0803809c
 801475c:	08036e14 	.word	0x08036e14
 8014760:	080380c0 	.word	0x080380c0
 8014764:	08036e88 	.word	0x08036e88

08014768 <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 8014768:	290b      	cmp	r1, #11
 801476a:	d000      	beq.n	801476e <dashboard+0x6>
 801476c:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 801476e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014770:	b0b5      	sub	sp, #212	@ 0xd4
 8014772:	4605      	mov	r5, r0
 8014774:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

    bool authenticate = auth(c, hm, 0); //Check authentication status
 8014776:	2200      	movs	r2, #0
 8014778:	4621      	mov	r1, r4
 801477a:	f7fe fdff 	bl	801337c <auth>
 801477e:	4607      	mov	r7, r0

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8014780:	ae08      	add	r6, sp, #32
 8014782:	49af      	ldr	r1, [pc, #700]	@ (8014a40 <dashboard+0x2d8>)
 8014784:	4630      	mov	r0, r6
 8014786:	f010 f943 	bl	8024a10 <mg_str_s>
 801478a:	2300      	movs	r3, #0
 801478c:	9300      	str	r3, [sp, #0]
 801478e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014792:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014796:	f010 fb5d 	bl	8024e54 <mg_match>
 801479a:	b120      	cbz	r0, 80147a6 <dashboard+0x3e>
            	handle_OPTIONS_method(c);
 801479c:	4628      	mov	r0, r5
 801479e:	f7fe fc45 	bl	801302c <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 80147a2:	b035      	add	sp, #212	@ 0xd4
 80147a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }else if (mg_match(hm->uri, mg_str("/api/#"), NULL) && !authenticate ) { // All requests to /api should be authenticated
 80147a6:	ae0a      	add	r6, sp, #40	@ 0x28
 80147a8:	49a6      	ldr	r1, [pc, #664]	@ (8014a44 <dashboard+0x2dc>)
 80147aa:	4630      	mov	r0, r6
 80147ac:	f010 f930 	bl	8024a10 <mg_str_s>
 80147b0:	2300      	movs	r3, #0
 80147b2:	9300      	str	r3, [sp, #0]
 80147b4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147b8:	f104 0108 	add.w	r1, r4, #8
 80147bc:	c903      	ldmia	r1, {r0, r1}
 80147be:	f010 fb49 	bl	8024e54 <mg_match>
 80147c2:	b100      	cbz	r0, 80147c6 <dashboard+0x5e>
 80147c4:	b1bf      	cbz	r7, 80147f6 <dashboard+0x8e>
		}else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 80147c6:	ae0c      	add	r6, sp, #48	@ 0x30
 80147c8:	499f      	ldr	r1, [pc, #636]	@ (8014a48 <dashboard+0x2e0>)
 80147ca:	4630      	mov	r0, r6
 80147cc:	f010 f920 	bl	8024a10 <mg_str_s>
 80147d0:	2300      	movs	r3, #0
 80147d2:	9300      	str	r3, [sp, #0]
 80147d4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147d8:	f104 0108 	add.w	r1, r4, #8
 80147dc:	c903      	ldmia	r1, {r0, r1}
 80147de:	f010 fb39 	bl	8024e54 <mg_match>
 80147e2:	b180      	cbz	r0, 8014806 <dashboard+0x9e>
			logging(L_INFO, "Call API /api/login");
 80147e4:	4999      	ldr	r1, [pc, #612]	@ (8014a4c <dashboard+0x2e4>)
 80147e6:	2001      	movs	r0, #1
 80147e8:	f7fd fcfe 	bl	80121e8 <logging>
        	 handler_authanticate(c,hm);
 80147ec:	4621      	mov	r1, r4
 80147ee:	4628      	mov	r0, r5
 80147f0:	f7fe feb0 	bl	8013554 <handler_authanticate>
 80147f4:	e7d5      	b.n	80147a2 <dashboard+0x3a>
        	mg_http_reply(c, 403, "", "Not Authorised\n");
 80147f6:	4b96      	ldr	r3, [pc, #600]	@ (8014a50 <dashboard+0x2e8>)
 80147f8:	4a96      	ldr	r2, [pc, #600]	@ (8014a54 <dashboard+0x2ec>)
 80147fa:	f240 1193 	movw	r1, #403	@ 0x193
 80147fe:	4628      	mov	r0, r5
 8014800:	f00f ff7c 	bl	80246fc <mg_http_reply>
 8014804:	e7cd      	b.n	80147a2 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8014806:	ae0e      	add	r6, sp, #56	@ 0x38
 8014808:	4993      	ldr	r1, [pc, #588]	@ (8014a58 <dashboard+0x2f0>)
 801480a:	4630      	mov	r0, r6
 801480c:	f010 f900 	bl	8024a10 <mg_str_s>
 8014810:	2300      	movs	r3, #0
 8014812:	9300      	str	r3, [sp, #0]
 8014814:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014818:	f104 0108 	add.w	r1, r4, #8
 801481c:	c903      	ldmia	r1, {r0, r1}
 801481e:	f010 fb19 	bl	8024e54 <mg_match>
 8014822:	b140      	cbz	r0, 8014836 <dashboard+0xce>
			logging(L_INFO, "Call API /api/logout");
 8014824:	498d      	ldr	r1, [pc, #564]	@ (8014a5c <dashboard+0x2f4>)
 8014826:	2001      	movs	r0, #1
 8014828:	f7fd fcde 	bl	80121e8 <logging>
			handler_logout(c,hm);
 801482c:	4621      	mov	r1, r4
 801482e:	4628      	mov	r0, r5
 8014830:	f7fe fcea 	bl	8013208 <handler_logout>
 8014834:	e7b5      	b.n	80147a2 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8014836:	ae10      	add	r6, sp, #64	@ 0x40
 8014838:	4989      	ldr	r1, [pc, #548]	@ (8014a60 <dashboard+0x2f8>)
 801483a:	4630      	mov	r0, r6
 801483c:	f010 f8e8 	bl	8024a10 <mg_str_s>
 8014840:	2300      	movs	r3, #0
 8014842:	9300      	str	r3, [sp, #0]
 8014844:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014848:	f104 0108 	add.w	r1, r4, #8
 801484c:	c903      	ldmia	r1, {r0, r1}
 801484e:	f010 fb01 	bl	8024e54 <mg_match>
 8014852:	b138      	cbz	r0, 8014864 <dashboard+0xfc>
			logging(L_INFO, "Call API /api/ram/status");
 8014854:	4983      	ldr	r1, [pc, #524]	@ (8014a64 <dashboard+0x2fc>)
 8014856:	2001      	movs	r0, #1
 8014858:	f7fd fcc6 	bl	80121e8 <logging>
			handle_ram_status_get(c);
 801485c:	4628      	mov	r0, r5
 801485e:	f7fe fe8d 	bl	801357c <handle_ram_status_get>
 8014862:	e79e      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8014864:	ae12      	add	r6, sp, #72	@ 0x48
 8014866:	4980      	ldr	r1, [pc, #512]	@ (8014a68 <dashboard+0x300>)
 8014868:	4630      	mov	r0, r6
 801486a:	f010 f8d1 	bl	8024a10 <mg_str_s>
 801486e:	2300      	movs	r3, #0
 8014870:	9300      	str	r3, [sp, #0]
 8014872:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014876:	f104 0108 	add.w	r1, r4, #8
 801487a:	c903      	ldmia	r1, {r0, r1}
 801487c:	f010 faea 	bl	8024e54 <mg_match>
 8014880:	b140      	cbz	r0, 8014894 <dashboard+0x12c>
			logging(L_INFO, "Call API /api/io/status");
 8014882:	497a      	ldr	r1, [pc, #488]	@ (8014a6c <dashboard+0x304>)
 8014884:	2001      	movs	r0, #1
 8014886:	f7fd fcaf 	bl	80121e8 <logging>
			handle_io_status_get(c, hm);
 801488a:	4621      	mov	r1, r4
 801488c:	4628      	mov	r0, r5
 801488e:	f7fe fe95 	bl	80135bc <handle_io_status_get>
 8014892:	e786      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8014894:	ae14      	add	r6, sp, #80	@ 0x50
 8014896:	4976      	ldr	r1, [pc, #472]	@ (8014a70 <dashboard+0x308>)
 8014898:	4630      	mov	r0, r6
 801489a:	f010 f8b9 	bl	8024a10 <mg_str_s>
 801489e:	2300      	movs	r3, #0
 80148a0:	9300      	str	r3, [sp, #0]
 80148a2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80148a6:	f104 0108 	add.w	r1, r4, #8
 80148aa:	c903      	ldmia	r1, {r0, r1}
 80148ac:	f010 fad2 	bl	8024e54 <mg_match>
 80148b0:	b140      	cbz	r0, 80148c4 <dashboard+0x15c>
			logging(L_INFO, "Call API /api/mqtt/settings");
 80148b2:	4970      	ldr	r1, [pc, #448]	@ (8014a74 <dashboard+0x30c>)
 80148b4:	2001      	movs	r0, #1
 80148b6:	f7fd fc97 	bl	80121e8 <logging>
			handle_mqtt_conf(c, hm);
 80148ba:	4621      	mov	r1, r4
 80148bc:	4628      	mov	r0, r5
 80148be:	f7fe ff3d 	bl	801373c <handle_mqtt_conf>
 80148c2:	e76e      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/modbus/acl"), NULL)){
 80148c4:	ae16      	add	r6, sp, #88	@ 0x58
 80148c6:	496c      	ldr	r1, [pc, #432]	@ (8014a78 <dashboard+0x310>)
 80148c8:	4630      	mov	r0, r6
 80148ca:	f010 f8a1 	bl	8024a10 <mg_str_s>
 80148ce:	2300      	movs	r3, #0
 80148d0:	9300      	str	r3, [sp, #0]
 80148d2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80148d6:	f104 0108 	add.w	r1, r4, #8
 80148da:	c903      	ldmia	r1, {r0, r1}
 80148dc:	f010 faba 	bl	8024e54 <mg_match>
 80148e0:	b140      	cbz	r0, 80148f4 <dashboard+0x18c>
			logging(L_INFO, "Call API /api/modbus/acl");
 80148e2:	4966      	ldr	r1, [pc, #408]	@ (8014a7c <dashboard+0x314>)
 80148e4:	2001      	movs	r0, #1
 80148e6:	f7fd fc7f 	bl	80121e8 <logging>
			handle_mb_tcp_access_list(c, hm);
 80148ea:	4621      	mov	r1, r4
 80148ec:	4628      	mov	r0, r5
 80148ee:	f7ff f85d 	bl	80139ac <handle_mb_tcp_access_list>
 80148f2:	e756      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 80148f4:	ae18      	add	r6, sp, #96	@ 0x60
 80148f6:	4962      	ldr	r1, [pc, #392]	@ (8014a80 <dashboard+0x318>)
 80148f8:	4630      	mov	r0, r6
 80148fa:	f010 f889 	bl	8024a10 <mg_str_s>
 80148fe:	2300      	movs	r3, #0
 8014900:	9300      	str	r3, [sp, #0]
 8014902:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014906:	f104 0108 	add.w	r1, r4, #8
 801490a:	c903      	ldmia	r1, {r0, r1}
 801490c:	f010 faa2 	bl	8024e54 <mg_match>
 8014910:	b140      	cbz	r0, 8014924 <dashboard+0x1bc>
			logging(L_INFO, "Call API /api/device/status");
 8014912:	495c      	ldr	r1, [pc, #368]	@ (8014a84 <dashboard+0x31c>)
 8014914:	2001      	movs	r0, #1
 8014916:	f7fd fc67 	bl	80121e8 <logging>
			handle_dev_status(c, hm);
 801491a:	4621      	mov	r1, r4
 801491c:	4628      	mov	r0, r5
 801491e:	f7ff f925 	bl	8013b6c <handle_dev_status>
 8014922:	e73e      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8014924:	ae1a      	add	r6, sp, #104	@ 0x68
 8014926:	4958      	ldr	r1, [pc, #352]	@ (8014a88 <dashboard+0x320>)
 8014928:	4630      	mov	r0, r6
 801492a:	f010 f871 	bl	8024a10 <mg_str_s>
 801492e:	2300      	movs	r3, #0
 8014930:	9300      	str	r3, [sp, #0]
 8014932:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014936:	68e1      	ldr	r1, [r4, #12]
 8014938:	68a0      	ldr	r0, [r4, #8]
 801493a:	f010 fa8b 	bl	8024e54 <mg_match>
 801493e:	b148      	cbz	r0, 8014954 <dashboard+0x1ec>
			logging(L_INFO, "Call API /api/device/log");
 8014940:	4952      	ldr	r1, [pc, #328]	@ (8014a8c <dashboard+0x324>)
 8014942:	2001      	movs	r0, #1
 8014944:	f7fd fc50 	bl	80121e8 <logging>
			handle_fs_get_log(c, hm, 0);
 8014948:	2200      	movs	r2, #0
 801494a:	4621      	mov	r1, r4
 801494c:	4628      	mov	r0, r5
 801494e:	f7ff fa4b 	bl	8013de8 <handle_fs_get_log>
 8014952:	e726      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8014954:	ae1c      	add	r6, sp, #112	@ 0x70
 8014956:	494e      	ldr	r1, [pc, #312]	@ (8014a90 <dashboard+0x328>)
 8014958:	4630      	mov	r0, r6
 801495a:	f010 f859 	bl	8024a10 <mg_str_s>
 801495e:	2300      	movs	r3, #0
 8014960:	9300      	str	r3, [sp, #0]
 8014962:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014966:	68e1      	ldr	r1, [r4, #12]
 8014968:	68a0      	ldr	r0, [r4, #8]
 801496a:	f010 fa73 	bl	8024e54 <mg_match>
 801496e:	b148      	cbz	r0, 8014984 <dashboard+0x21c>
			logging(L_INFO, "Call API /api/device/log_old");
 8014970:	4948      	ldr	r1, [pc, #288]	@ (8014a94 <dashboard+0x32c>)
 8014972:	2001      	movs	r0, #1
 8014974:	f7fd fc38 	bl	80121e8 <logging>
			handle_fs_get_log(c, hm, 1);
 8014978:	2201      	movs	r2, #1
 801497a:	4621      	mov	r1, r4
 801497c:	4628      	mov	r0, r5
 801497e:	f7ff fa33 	bl	8013de8 <handle_fs_get_log>
 8014982:	e70e      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/user"), NULL)){
 8014984:	ae1e      	add	r6, sp, #120	@ 0x78
 8014986:	4944      	ldr	r1, [pc, #272]	@ (8014a98 <dashboard+0x330>)
 8014988:	4630      	mov	r0, r6
 801498a:	f010 f841 	bl	8024a10 <mg_str_s>
 801498e:	2300      	movs	r3, #0
 8014990:	9300      	str	r3, [sp, #0]
 8014992:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014996:	68e1      	ldr	r1, [r4, #12]
 8014998:	68a0      	ldr	r0, [r4, #8]
 801499a:	f010 fa5b 	bl	8024e54 <mg_match>
 801499e:	b140      	cbz	r0, 80149b2 <dashboard+0x24a>
			logging(L_INFO, "Call API /api/device/user");
 80149a0:	493e      	ldr	r1, [pc, #248]	@ (8014a9c <dashboard+0x334>)
 80149a2:	2001      	movs	r0, #1
 80149a4:	f7fd fc20 	bl	80121e8 <logging>
			handle_manage_user(c, hm);
 80149a8:	4621      	mov	r1, r4
 80149aa:	4628      	mov	r0, r5
 80149ac:	f7ff fa9a 	bl	8013ee4 <handle_manage_user>
 80149b0:	e6f7      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 80149b2:	ae20      	add	r6, sp, #128	@ 0x80
 80149b4:	493a      	ldr	r1, [pc, #232]	@ (8014aa0 <dashboard+0x338>)
 80149b6:	4630      	mov	r0, r6
 80149b8:	f010 f82a 	bl	8024a10 <mg_str_s>
 80149bc:	2300      	movs	r3, #0
 80149be:	9300      	str	r3, [sp, #0]
 80149c0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80149c4:	68e1      	ldr	r1, [r4, #12]
 80149c6:	68a0      	ldr	r0, [r4, #8]
 80149c8:	f010 fa44 	bl	8024e54 <mg_match>
 80149cc:	b140      	cbz	r0, 80149e0 <dashboard+0x278>
			logging(L_INFO, "Call API /api/device/restart");
 80149ce:	4935      	ldr	r1, [pc, #212]	@ (8014aa4 <dashboard+0x33c>)
 80149d0:	2001      	movs	r0, #1
 80149d2:	f7fd fc09 	bl	80121e8 <logging>
			handle_restart_mcu(c, hm);
 80149d6:	4621      	mov	r1, r4
 80149d8:	4628      	mov	r0, r5
 80149da:	f7ff fd01 	bl	80143e0 <handle_restart_mcu>
 80149de:	e6e0      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/version"), NULL)){
 80149e0:	ae22      	add	r6, sp, #136	@ 0x88
 80149e2:	4931      	ldr	r1, [pc, #196]	@ (8014aa8 <dashboard+0x340>)
 80149e4:	4630      	mov	r0, r6
 80149e6:	f010 f813 	bl	8024a10 <mg_str_s>
 80149ea:	2300      	movs	r3, #0
 80149ec:	9300      	str	r3, [sp, #0]
 80149ee:	e896 000c 	ldmia.w	r6, {r2, r3}
 80149f2:	68e1      	ldr	r1, [r4, #12]
 80149f4:	68a0      	ldr	r0, [r4, #8]
 80149f6:	f010 fa2d 	bl	8024e54 <mg_match>
 80149fa:	b140      	cbz	r0, 8014a0e <dashboard+0x2a6>
			logging(L_INFO, "Call API /api/device/version");
 80149fc:	492b      	ldr	r1, [pc, #172]	@ (8014aac <dashboard+0x344>)
 80149fe:	2001      	movs	r0, #1
 8014a00:	f7fd fbf2 	bl	80121e8 <logging>
			handler_dev_version(c, hm);
 8014a04:	4621      	mov	r1, r4
 8014a06:	4628      	mov	r0, r5
 8014a08:	f7fe fb1c 	bl	8013044 <handler_dev_version>
 8014a0c:	e6c9      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/info"), NULL)){
 8014a0e:	ae24      	add	r6, sp, #144	@ 0x90
 8014a10:	4927      	ldr	r1, [pc, #156]	@ (8014ab0 <dashboard+0x348>)
 8014a12:	4630      	mov	r0, r6
 8014a14:	f00f fffc 	bl	8024a10 <mg_str_s>
 8014a18:	2300      	movs	r3, #0
 8014a1a:	9300      	str	r3, [sp, #0]
 8014a1c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a20:	68e1      	ldr	r1, [r4, #12]
 8014a22:	68a0      	ldr	r0, [r4, #8]
 8014a24:	f010 fa16 	bl	8024e54 <mg_match>
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	d045      	beq.n	8014ab8 <dashboard+0x350>
			logging(L_INFO, "Call API /api/device/info");
 8014a2c:	4921      	ldr	r1, [pc, #132]	@ (8014ab4 <dashboard+0x34c>)
 8014a2e:	2001      	movs	r0, #1
 8014a30:	f7fd fbda 	bl	80121e8 <logging>
			handler_dev_info(c, hm);
 8014a34:	4621      	mov	r1, r4
 8014a36:	4628      	mov	r0, r5
 8014a38:	f7fe fb36 	bl	80130a8 <handler_dev_info>
 8014a3c:	e6b1      	b.n	80147a2 <dashboard+0x3a>
 8014a3e:	bf00      	nop
 8014a40:	08038100 	.word	0x08038100
 8014a44:	08038108 	.word	0x08038108
 8014a48:	08038120 	.word	0x08038120
 8014a4c:	0803812c 	.word	0x0803812c
 8014a50:	08038110 	.word	0x08038110
 8014a54:	08037490 	.word	0x08037490
 8014a58:	08038140 	.word	0x08038140
 8014a5c:	0803814c 	.word	0x0803814c
 8014a60:	08038164 	.word	0x08038164
 8014a64:	08038174 	.word	0x08038174
 8014a68:	08038190 	.word	0x08038190
 8014a6c:	080381a0 	.word	0x080381a0
 8014a70:	080381b8 	.word	0x080381b8
 8014a74:	080381cc 	.word	0x080381cc
 8014a78:	080381e8 	.word	0x080381e8
 8014a7c:	080381f8 	.word	0x080381f8
 8014a80:	08038214 	.word	0x08038214
 8014a84:	08038228 	.word	0x08038228
 8014a88:	08038244 	.word	0x08038244
 8014a8c:	08038254 	.word	0x08038254
 8014a90:	08038270 	.word	0x08038270
 8014a94:	08038284 	.word	0x08038284
 8014a98:	080382a4 	.word	0x080382a4
 8014a9c:	080382b8 	.word	0x080382b8
 8014aa0:	080382d4 	.word	0x080382d4
 8014aa4:	080382e8 	.word	0x080382e8
 8014aa8:	08038308 	.word	0x08038308
 8014aac:	0803831c 	.word	0x0803831c
 8014ab0:	0803833c 	.word	0x0803833c
 8014ab4:	08038350 	.word	0x08038350
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8014ab8:	ae26      	add	r6, sp, #152	@ 0x98
 8014aba:	4950      	ldr	r1, [pc, #320]	@ (8014bfc <dashboard+0x494>)
 8014abc:	4630      	mov	r0, r6
 8014abe:	f00f ffa7 	bl	8024a10 <mg_str_s>
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	9300      	str	r3, [sp, #0]
 8014ac6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014aca:	68e1      	ldr	r1, [r4, #12]
 8014acc:	68a0      	ldr	r0, [r4, #8]
 8014ace:	f010 f9c1 	bl	8024e54 <mg_match>
 8014ad2:	b120      	cbz	r0, 8014ade <dashboard+0x376>
			handle_firmware_upload(c, hm);
 8014ad4:	4621      	mov	r1, r4
 8014ad6:	4628      	mov	r0, r5
 8014ad8:	f7ff fd50 	bl	801457c <handle_firmware_upload>
 8014adc:	e661      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8014ade:	ae28      	add	r6, sp, #160	@ 0xa0
 8014ae0:	4947      	ldr	r1, [pc, #284]	@ (8014c00 <dashboard+0x498>)
 8014ae2:	4630      	mov	r0, r6
 8014ae4:	f00f ff94 	bl	8024a10 <mg_str_s>
 8014ae8:	2300      	movs	r3, #0
 8014aea:	9300      	str	r3, [sp, #0]
 8014aec:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014af0:	68e1      	ldr	r1, [r4, #12]
 8014af2:	68a0      	ldr	r0, [r4, #8]
 8014af4:	f010 f9ae 	bl	8024e54 <mg_match>
 8014af8:	b140      	cbz	r0, 8014b0c <dashboard+0x3a4>
			logging(L_INFO, "Call API /api/firmware/md5");
 8014afa:	4942      	ldr	r1, [pc, #264]	@ (8014c04 <dashboard+0x49c>)
 8014afc:	2001      	movs	r0, #1
 8014afe:	f7fd fb73 	bl	80121e8 <logging>
			handle_firmware_md5(c, hm);
 8014b02:	4621      	mov	r1, r4
 8014b04:	4628      	mov	r0, r5
 8014b06:	f7ff fdeb 	bl	80146e0 <handle_firmware_md5>
 8014b0a:	e64a      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/apply"), NULL)){
 8014b0c:	ae2a      	add	r6, sp, #168	@ 0xa8
 8014b0e:	493e      	ldr	r1, [pc, #248]	@ (8014c08 <dashboard+0x4a0>)
 8014b10:	4630      	mov	r0, r6
 8014b12:	f00f ff7d 	bl	8024a10 <mg_str_s>
 8014b16:	2300      	movs	r3, #0
 8014b18:	9300      	str	r3, [sp, #0]
 8014b1a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b1e:	68e1      	ldr	r1, [r4, #12]
 8014b20:	68a0      	ldr	r0, [r4, #8]
 8014b22:	f010 f997 	bl	8024e54 <mg_match>
 8014b26:	b140      	cbz	r0, 8014b3a <dashboard+0x3d2>
			logging(L_INFO, "Call API /api/firmware/apply");
 8014b28:	4938      	ldr	r1, [pc, #224]	@ (8014c0c <dashboard+0x4a4>)
 8014b2a:	2001      	movs	r0, #1
 8014b2c:	f7fd fb5c 	bl	80121e8 <logging>
			handle_activete_and_reboot(c, hm);
 8014b30:	4621      	mov	r1, r4
 8014b32:	4628      	mov	r0, r5
 8014b34:	f7ff fc8e 	bl	8014454 <handle_activete_and_reboot>
 8014b38:	e633      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8014b3a:	ae2c      	add	r6, sp, #176	@ 0xb0
 8014b3c:	4934      	ldr	r1, [pc, #208]	@ (8014c10 <dashboard+0x4a8>)
 8014b3e:	4630      	mov	r0, r6
 8014b40:	f00f ff66 	bl	8024a10 <mg_str_s>
 8014b44:	2300      	movs	r3, #0
 8014b46:	9300      	str	r3, [sp, #0]
 8014b48:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b4c:	68e1      	ldr	r1, [r4, #12]
 8014b4e:	68a0      	ldr	r0, [r4, #8]
 8014b50:	f010 f980 	bl	8024e54 <mg_match>
 8014b54:	b120      	cbz	r0, 8014b60 <dashboard+0x3f8>
			handle_firmware_deactivate(c, hm);
 8014b56:	4621      	mov	r1, r4
 8014b58:	4628      	mov	r0, r5
 8014b5a:	f7fe fae3 	bl	8013124 <handle_firmware_deactivate>
 8014b5e:	e620      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8014b60:	ae2e      	add	r6, sp, #184	@ 0xb8
 8014b62:	492c      	ldr	r1, [pc, #176]	@ (8014c14 <dashboard+0x4ac>)
 8014b64:	4630      	mov	r0, r6
 8014b66:	f00f ff53 	bl	8024a10 <mg_str_s>
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	9300      	str	r3, [sp, #0]
 8014b6e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b72:	68e1      	ldr	r1, [r4, #12]
 8014b74:	68a0      	ldr	r0, [r4, #8]
 8014b76:	f010 f96d 	bl	8024e54 <mg_match>
 8014b7a:	b120      	cbz	r0, 8014b86 <dashboard+0x41e>
			 handle_web_files_remove(c, hm);
 8014b7c:	4621      	mov	r1, r4
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f7fe fb0c 	bl	801319c <handle_web_files_remove>
 8014b84:	e60d      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8014b86:	ae30      	add	r6, sp, #192	@ 0xc0
 8014b88:	4923      	ldr	r1, [pc, #140]	@ (8014c18 <dashboard+0x4b0>)
 8014b8a:	4630      	mov	r0, r6
 8014b8c:	f00f ff40 	bl	8024a10 <mg_str_s>
 8014b90:	2300      	movs	r3, #0
 8014b92:	9300      	str	r3, [sp, #0]
 8014b94:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b98:	68e1      	ldr	r1, [r4, #12]
 8014b9a:	68a0      	ldr	r0, [r4, #8]
 8014b9c:	f010 f95a 	bl	8024e54 <mg_match>
 8014ba0:	b140      	cbz	r0, 8014bb4 <dashboard+0x44c>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8014ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8014c1c <dashboard+0x4b4>)
 8014ba4:	9300      	str	r3, [sp, #0]
 8014ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8014c20 <dashboard+0x4b8>)
 8014ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8014c24 <dashboard+0x4bc>)
 8014baa:	4621      	mov	r1, r4
 8014bac:	4628      	mov	r0, r5
 8014bae:	f012 fbe3 	bl	8027378 <mg_http_upload>
 8014bb2:	e5f6      	b.n	80147a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8014bb4:	ae32      	add	r6, sp, #200	@ 0xc8
 8014bb6:	491c      	ldr	r1, [pc, #112]	@ (8014c28 <dashboard+0x4c0>)
 8014bb8:	4630      	mov	r0, r6
 8014bba:	f00f ff29 	bl	8024a10 <mg_str_s>
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	9300      	str	r3, [sp, #0]
 8014bc2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014bc6:	68e1      	ldr	r1, [r4, #12]
 8014bc8:	68a0      	ldr	r0, [r4, #8]
 8014bca:	f010 f943 	bl	8024e54 <mg_match>
 8014bce:	b120      	cbz	r0, 8014bda <dashboard+0x472>
			 handle_fs_mkdir(c, hm);
 8014bd0:	4621      	mov	r1, r4
 8014bd2:	4628      	mov	r0, r5
 8014bd4:	f7ff fc7a 	bl	80144cc <handle_fs_mkdir>
 8014bd8:	e5e3      	b.n	80147a2 <dashboard+0x3a>
			struct mg_http_serve_opts opts = {
 8014bda:	2300      	movs	r3, #0
 8014bdc:	9302      	str	r3, [sp, #8]
 8014bde:	9303      	str	r3, [sp, #12]
 8014be0:	9304      	str	r3, [sp, #16]
 8014be2:	9305      	str	r3, [sp, #20]
 8014be4:	9306      	str	r3, [sp, #24]
 8014be6:	9307      	str	r3, [sp, #28]
 8014be8:	4b0d      	ldr	r3, [pc, #52]	@ (8014c20 <dashboard+0x4b8>)
 8014bea:	9302      	str	r3, [sp, #8]
 8014bec:	4b0d      	ldr	r3, [pc, #52]	@ (8014c24 <dashboard+0x4bc>)
 8014bee:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 8014bf0:	aa02      	add	r2, sp, #8
 8014bf2:	4621      	mov	r1, r4
 8014bf4:	4628      	mov	r0, r5
 8014bf6:	f012 fad9 	bl	80271ac <mg_http_serve_dir>
}
 8014bfa:	e5d2      	b.n	80147a2 <dashboard+0x3a>
 8014bfc:	0803836c 	.word	0x0803836c
 8014c00:	08038384 	.word	0x08038384
 8014c04:	08038398 	.word	0x08038398
 8014c08:	080383b4 	.word	0x080383b4
 8014c0c:	080383c8 	.word	0x080383c8
 8014c10:	080383e8 	.word	0x080383e8
 8014c14:	08038404 	.word	0x08038404
 8014c18:	08038420 	.word	0x08038420
 8014c1c:	0016e360 	.word	0x0016e360
 8014c20:	08036684 	.word	0x08036684
 8014c24:	200000a0 	.word	0x200000a0
 8014c28:	0803843c 	.word	0x0803843c

08014c2c <dash_hdl>:

void * dash_hdl (void){
 8014c2c:	b508      	push	{r3, lr}

	load_users(user_cred_file, web_users, user_list_size);
 8014c2e:	220a      	movs	r2, #10
 8014c30:	4902      	ldr	r1, [pc, #8]	@ (8014c3c <dash_hdl+0x10>)
 8014c32:	4803      	ldr	r0, [pc, #12]	@ (8014c40 <dash_hdl+0x14>)
 8014c34:	f7ff fbac 	bl	8014390 <load_users>

	return &dashboard;
}
 8014c38:	4802      	ldr	r0, [pc, #8]	@ (8014c44 <dash_hdl+0x18>)
 8014c3a:	bd08      	pop	{r3, pc}
 8014c3c:	20002208 	.word	0x20002208
 8014c40:	080366e0 	.word	0x080366e0
 8014c44:	08014769 	.word	0x08014769

08014c48 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 8014c48:	4b01      	ldr	r3, [pc, #4]	@ (8014c50 <reg_parameter_handler+0x8>)
 8014c4a:	6018      	str	r0, [r3, #0]
}
 8014c4c:	4770      	bx	lr
 8014c4e:	bf00      	nop
 8014c50:	200028a4 	.word	0x200028a4

08014c54 <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 8014c54:	4b1a      	ldr	r3, [pc, #104]	@ (8014cc0 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	b103      	cbz	r3, 8014c5c <_ZL18mqtt_timer_handlerPv+0x8>
 8014c5a:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 8014c5c:	b530      	push	{r4, r5, lr}
 8014c5e:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 8014c60:	4918      	ldr	r1, [pc, #96]	@ (8014cc4 <_ZL18mqtt_timer_handlerPv+0x70>)
 8014c62:	2001      	movs	r0, #1
 8014c64:	f7fd fac0 	bl	80121e8 <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 8014c68:	4c17      	ldr	r4, [pc, #92]	@ (8014cc8 <_ZL18mqtt_timer_handlerPv+0x74>)
 8014c6a:	2240      	movs	r2, #64	@ 0x40
 8014c6c:	2100      	movs	r1, #0
 8014c6e:	4620      	mov	r0, r4
 8014c70:	f018 fa3e 	bl	802d0f0 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8014c74:	ad02      	add	r5, sp, #8
 8014c76:	4b15      	ldr	r3, [pc, #84]	@ (8014ccc <_ZL18mqtt_timer_handlerPv+0x78>)
 8014c78:	6819      	ldr	r1, [r3, #0]
 8014c7a:	4628      	mov	r0, r5
 8014c7c:	f00f fec8 	bl	8024a10 <mg_str_s>
 8014c80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014c84:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 8014c88:	4b11      	ldr	r3, [pc, #68]	@ (8014cd0 <_ZL18mqtt_timer_handlerPv+0x7c>)
 8014c8a:	6819      	ldr	r1, [r3, #0]
 8014c8c:	4628      	mov	r0, r5
 8014c8e:	f00f febf 	bl	8024a10 <mg_str_s>
 8014c92:	f104 0308 	add.w	r3, r4, #8
 8014c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014c9a:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 8014c9e:	233c      	movs	r3, #60	@ 0x3c
 8014ca0:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	9300      	str	r3, [sp, #0]
 8014ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8014cd4 <_ZL18mqtt_timer_handlerPv+0x80>)
 8014ca8:	4622      	mov	r2, r4
 8014caa:	490b      	ldr	r1, [pc, #44]	@ (8014cd8 <_ZL18mqtt_timer_handlerPv+0x84>)
 8014cac:	6809      	ldr	r1, [r1, #0]
 8014cae:	480b      	ldr	r0, [pc, #44]	@ (8014cdc <_ZL18mqtt_timer_handlerPv+0x88>)
 8014cb0:	6800      	ldr	r0, [r0, #0]
 8014cb2:	f014 fc21 	bl	80294f8 <mg_mqtt_connect>
 8014cb6:	4b02      	ldr	r3, [pc, #8]	@ (8014cc0 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014cb8:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 8014cba:	b005      	add	sp, #20
 8014cbc:	bd30      	pop	{r4, r5, pc}
 8014cbe:	bf00      	nop
 8014cc0:	200028c8 	.word	0x200028c8
 8014cc4:	08038458 	.word	0x08038458
 8014cc8:	200028cc 	.word	0x200028cc
 8014ccc:	20002920 	.word	0x20002920
 8014cd0:	2000291c 	.word	0x2000291c
 8014cd4:	080152ad 	.word	0x080152ad
 8014cd8:	20002924 	.word	0x20002924
 8014cdc:	20002910 	.word	0x20002910

08014ce0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8014ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ce4:	b085      	sub	sp, #20
 8014ce6:	4681      	mov	r9, r0
 8014ce8:	4688      	mov	r8, r1
 8014cea:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8014cec:	4c2a      	ldr	r4, [pc, #168]	@ (8014d98 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 8014cee:	f100 0308 	add.w	r3, r0, #8
 8014cf2:	9300      	str	r3, [sp, #0]
 8014cf4:	4b29      	ldr	r3, [pc, #164]	@ (8014d9c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 8014cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8014da0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 8014cf8:	2128      	movs	r1, #40	@ 0x28
 8014cfa:	6820      	ldr	r0, [r4, #0]
 8014cfc:	f00f f800 	bl	8023d00 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8014d00:	6824      	ldr	r4, [r4, #0]
 8014d02:	4620      	mov	r0, r4
 8014d04:	f7fb facc 	bl	80102a0 <strlen>
 8014d08:	4601      	mov	r1, r0
 8014d0a:	4620      	mov	r0, r4
 8014d0c:	f000 fc1e 	bl	801554c <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 8014d10:	2600      	movs	r6, #0
 8014d12:	e03b      	b.n	8014d8c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 8014d14:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8014d18:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 8014d1c:	791d      	ldrb	r5, [r3, #4]
 8014d1e:	4f21      	ldr	r7, [pc, #132]	@ (8014da4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 8014d20:	462b      	mov	r3, r5
 8014d22:	4622      	mov	r2, r4
 8014d24:	2180      	movs	r1, #128	@ 0x80
 8014d26:	6838      	ldr	r0, [r7, #0]
 8014d28:	f000 fc2e 	bl	8015588 <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8014d2c:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8014db0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 8014d30:	462b      	mov	r3, r5
 8014d32:	4622      	mov	r2, r4
 8014d34:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014d38:	f8db 0000 	ldr.w	r0, [fp]
 8014d3c:	f000 fcd4 	bl	80156e8 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8014d40:	4d19      	ldr	r5, [pc, #100]	@ (8014da8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 8014d42:	ac02      	add	r4, sp, #8
 8014d44:	6839      	ldr	r1, [r7, #0]
 8014d46:	4620      	mov	r0, r4
 8014d48:	f00f fe62 	bl	8024a10 <mg_str_s>
 8014d4c:	f105 0318 	add.w	r3, r5, #24
 8014d50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014d54:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8014d58:	f8db 1000 	ldr.w	r1, [fp]
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	f00f fe57 	bl	8024a10 <mg_str_s>
 8014d62:	f105 0320 	add.w	r3, r5, #32
 8014d66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014d6a:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8014d6e:	2401      	movs	r4, #1
 8014d70:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8014d74:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014d78:	4629      	mov	r1, r5
 8014d7a:	4648      	mov	r0, r9
 8014d7c:	f013 f922 	bl	8027fc4 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8014d80:	683a      	ldr	r2, [r7, #0]
 8014d82:	490a      	ldr	r1, [pc, #40]	@ (8014dac <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 8014d84:	4620      	mov	r0, r4
 8014d86:	f7fd fa2f 	bl	80121e8 <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8014d8a:	4426      	add	r6, r4
 8014d8c:	4556      	cmp	r6, sl
 8014d8e:	d3c1      	bcc.n	8014d14 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 8014d90:	b005      	add	sp, #20
 8014d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d96:	bf00      	nop
 8014d98:	200028c4 	.word	0x200028c4
 8014d9c:	08026791 	.word	0x08026791
 8014da0:	08037a64 	.word	0x08037a64
 8014da4:	20002918 	.word	0x20002918
 8014da8:	200028cc 	.word	0x200028cc
 8014dac:	08038478 	.word	0x08038478
 8014db0:	20002914 	.word	0x20002914

08014db4 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014db4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8014db6:	fb01 f400 	mul.w	r4, r1, r0
 8014dba:	4620      	mov	r0, r4
 8014dbc:	f006 f94c 	bl	801b058 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8014dc0:	4605      	mov	r5, r0
 8014dc2:	b118      	cbz	r0, 8014dcc <_ZL9my_callocjj+0x18>
 8014dc4:	4622      	mov	r2, r4
 8014dc6:	2100      	movs	r1, #0
 8014dc8:	f018 f992 	bl	802d0f0 <memset>
}
 8014dcc:	4628      	mov	r0, r5
 8014dce:	bd38      	pop	{r3, r4, r5, pc}

08014dd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8014dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014dd4:	b087      	sub	sp, #28
 8014dd6:	4607      	mov	r7, r0
 8014dd8:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8014dda:	4d58      	ldr	r5, [pc, #352]	@ (8014f3c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 8014ddc:	682b      	ldr	r3, [r5, #0]
 8014dde:	2200      	movs	r2, #0
 8014de0:	2101      	movs	r1, #1
 8014de2:	a804      	add	r0, sp, #16
 8014de4:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014de6:	682b      	ldr	r3, [r5, #0]
 8014de8:	2200      	movs	r2, #0
 8014dea:	2102      	movs	r1, #2
 8014dec:	f10d 0013 	add.w	r0, sp, #19
 8014df0:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014df2:	2203      	movs	r2, #3
 8014df4:	4952      	ldr	r1, [pc, #328]	@ (8014f40 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014df6:	a804      	add	r0, sp, #16
 8014df8:	f018 f8e6 	bl	802cfc8 <memcmp>
 8014dfc:	b948      	cbnz	r0, 8014e12 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014dfe:	2203      	movs	r2, #3
 8014e00:	4950      	ldr	r1, [pc, #320]	@ (8014f44 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 8014e02:	f10d 0013 	add.w	r0, sp, #19
 8014e06:	f018 f8df 	bl	802cfc8 <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014e0a:	b910      	cbnz	r0, 8014e12 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014e0c:	2c00      	cmp	r4, #0
 8014e0e:	f000 8091 	beq.w	8014f34 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 8014e12:	4b4b      	ldr	r3, [pc, #300]	@ (8014f40 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014e14:	aa06      	add	r2, sp, #24
 8014e16:	e912 0003 	ldmdb	r2, {r0, r1}
 8014e1a:	6018      	str	r0, [r3, #0]
 8014e1c:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8014e1e:	2101      	movs	r1, #1
 8014e20:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014e24:	f7ff ffc6 	bl	8014db4 <_ZL9my_callocjj>
 8014e28:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014e2a:	2101      	movs	r1, #1
 8014e2c:	2080      	movs	r0, #128	@ 0x80
 8014e2e:	f7ff ffc1 	bl	8014db4 <_ZL9my_callocjj>
 8014e32:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 8014e34:	2200      	movs	r2, #0
 8014e36:	e038      	b.n	8014eaa <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8014e38:	f102 0801 	add.w	r8, r2, #1
 8014e3c:	fa5f f888 	uxtb.w	r8, r8
 8014e40:	f102 0318 	add.w	r3, r2, #24
 8014e44:	eb0d 0203 	add.w	r2, sp, r3
 8014e48:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8014e4c:	9300      	str	r3, [sp, #0]
 8014e4e:	4643      	mov	r3, r8
 8014e50:	2201      	movs	r2, #1
 8014e52:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014e56:	4630      	mov	r0, r6
 8014e58:	f000 fe3a 	bl	8015ad0 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8014e5c:	4643      	mov	r3, r8
 8014e5e:	2201      	movs	r2, #1
 8014e60:	2180      	movs	r1, #128	@ 0x80
 8014e62:	4628      	mov	r0, r5
 8014e64:	f000 fe74 	bl	8015b50 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014e68:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8014f48 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014e6c:	ac02      	add	r4, sp, #8
 8014e6e:	4629      	mov	r1, r5
 8014e70:	4620      	mov	r0, r4
 8014e72:	f00f fdcd 	bl	8024a10 <mg_str_s>
 8014e76:	f109 0318 	add.w	r3, r9, #24
 8014e7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014e7e:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014e82:	4631      	mov	r1, r6
 8014e84:	4620      	mov	r0, r4
 8014e86:	f00f fdc3 	bl	8024a10 <mg_str_s>
 8014e8a:	f109 0320 	add.w	r3, r9, #32
 8014e8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014e92:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014e96:	2300      	movs	r3, #0
 8014e98:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014e9c:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014ea0:	4649      	mov	r1, r9
 8014ea2:	4638      	mov	r0, r7
 8014ea4:	f013 f88e 	bl	8027fc4 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8014ea8:	4642      	mov	r2, r8
 8014eaa:	2a02      	cmp	r2, #2
 8014eac:	d9c4      	bls.n	8014e38 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014eae:	2200      	movs	r2, #0
 8014eb0:	e038      	b.n	8014f24 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8014eb2:	f102 0801 	add.w	r8, r2, #1
 8014eb6:	fa5f f888 	uxtb.w	r8, r8
 8014eba:	f102 0318 	add.w	r3, r2, #24
 8014ebe:	eb0d 0203 	add.w	r2, sp, r3
 8014ec2:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	4643      	mov	r3, r8
 8014eca:	2202      	movs	r2, #2
 8014ecc:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014ed0:	4630      	mov	r0, r6
 8014ed2:	f000 fdfd 	bl	8015ad0 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8014ed6:	4643      	mov	r3, r8
 8014ed8:	2202      	movs	r2, #2
 8014eda:	2180      	movs	r1, #128	@ 0x80
 8014edc:	4628      	mov	r0, r5
 8014ede:	f000 fe37 	bl	8015b50 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014ee2:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8014f48 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014ee6:	ac02      	add	r4, sp, #8
 8014ee8:	4629      	mov	r1, r5
 8014eea:	4620      	mov	r0, r4
 8014eec:	f00f fd90 	bl	8024a10 <mg_str_s>
 8014ef0:	f109 0318 	add.w	r3, r9, #24
 8014ef4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014ef8:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014efc:	4631      	mov	r1, r6
 8014efe:	4620      	mov	r0, r4
 8014f00:	f00f fd86 	bl	8024a10 <mg_str_s>
 8014f04:	f109 0320 	add.w	r3, r9, #32
 8014f08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014f0c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014f10:	2300      	movs	r3, #0
 8014f12:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014f16:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014f1a:	4649      	mov	r1, r9
 8014f1c:	4638      	mov	r0, r7
 8014f1e:	f013 f851 	bl	8027fc4 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014f22:	4642      	mov	r2, r8
 8014f24:	2a02      	cmp	r2, #2
 8014f26:	d9c4      	bls.n	8014eb2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 8014f28:	4630      	mov	r0, r6
 8014f2a:	f006 f917 	bl	801b15c <vPortFree>
		free(topik);
 8014f2e:	4628      	mov	r0, r5
 8014f30:	f006 f914 	bl	801b15c <vPortFree>
}
 8014f34:	b007      	add	sp, #28
 8014f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f3a:	bf00      	nop
 8014f3c:	200028b0 	.word	0x200028b0
 8014f40:	200028a8 	.word	0x200028a8
 8014f44:	200028ab 	.word	0x200028ab
 8014f48:	200028cc 	.word	0x200028cc

08014f4c <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8014f4c:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 8014f4e:	4b05      	ldr	r3, [pc, #20]	@ (8014f64 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 8014f50:	6818      	ldr	r0, [r3, #0]
 8014f52:	b110      	cbz	r0, 8014f5a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014f54:	4b04      	ldr	r3, [pc, #16]	@ (8014f68 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 8014f56:	781b      	ldrb	r3, [r3, #0]
 8014f58:	b903      	cbnz	r3, 8014f5c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
		mqtt_send_io_status(mqtt_conn, 0);
	}
}
 8014f5a:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 8014f5c:	2100      	movs	r1, #0
 8014f5e:	f7ff ff37 	bl	8014dd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014f62:	e7fa      	b.n	8014f5a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014f64:	200028c8 	.word	0x200028c8
 8014f68:	200028b4 	.word	0x200028b4

08014f6c <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8014f6c:	b508      	push	{r3, lr}
	if(is_registered){
 8014f6e:	4b05      	ldr	r3, [pc, #20]	@ (8014f84 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 8014f70:	781b      	ldrb	r3, [r3, #0]
 8014f72:	b903      	cbnz	r3, 8014f76 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 8014f74:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 8014f76:	2101      	movs	r1, #1
 8014f78:	4b03      	ldr	r3, [pc, #12]	@ (8014f88 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 8014f7a:	6818      	ldr	r0, [r3, #0]
 8014f7c:	f7ff ff28 	bl	8014dd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014f80:	e7f8      	b.n	8014f74 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 8014f82:	bf00      	nop
 8014f84:	200028b4 	.word	0x200028b4
 8014f88:	200028c8 	.word	0x200028c8

08014f8c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 8014f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f90:	b083      	sub	sp, #12
 8014f92:	4681      	mov	r9, r0
 8014f94:	460d      	mov	r5, r1
 8014f96:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 8014f98:	2400      	movs	r4, #0
 8014f9a:	e000      	b.n	8014f9e <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 8014f9c:	3401      	adds	r4, #1
 8014f9e:	42b4      	cmp	r4, r6
 8014fa0:	d22e      	bcs.n	8015000 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 8014fa2:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 8014fa6:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8014faa:	2b02      	cmp	r3, #2
 8014fac:	d1f6      	bne.n	8014f9c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014fae:	2101      	movs	r1, #1
 8014fb0:	2080      	movs	r0, #128	@ 0x80
 8014fb2:	f7ff feff 	bl	8014db4 <_ZL9my_callocjj>
 8014fb6:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 8014fb8:	f898 3004 	ldrb.w	r3, [r8, #4]
 8014fbc:	2202      	movs	r2, #2
 8014fbe:	2180      	movs	r1, #128	@ 0x80
 8014fc0:	f000 fdae 	bl	8015b20 <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 8014fc4:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 801500c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 8014fc8:	f04f 0b01 	mov.w	fp, #1
 8014fcc:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8014fd0:	46ea      	mov	sl, sp
 8014fd2:	4639      	mov	r1, r7
 8014fd4:	4650      	mov	r0, sl
 8014fd6:	f00f fd1b 	bl	8024a10 <mg_str_s>
 8014fda:	f108 0318 	add.w	r3, r8, #24
 8014fde:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8014fe2:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 8014fe6:	4641      	mov	r1, r8
 8014fe8:	4648      	mov	r0, r9
 8014fea:	f012 ff9d 	bl	8027f28 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 8014fee:	463a      	mov	r2, r7
 8014ff0:	4905      	ldr	r1, [pc, #20]	@ (8015008 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 8014ff2:	4658      	mov	r0, fp
 8014ff4:	f7fd f8f8 	bl	80121e8 <logging>
			free(topik);
 8014ff8:	4638      	mov	r0, r7
 8014ffa:	f006 f8af 	bl	801b15c <vPortFree>
 8014ffe:	e7cd      	b.n	8014f9c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 8015000:	b003      	add	sp, #12
 8015002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015006:	bf00      	nop
 8015008:	0803849c 	.word	0x0803849c
 801500c:	200028cc 	.word	0x200028cc

08015010 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8015010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015014:	b087      	sub	sp, #28
	int relay_number = 0;  // Переменная для хранения номера реле
 8015016:	2300      	movs	r3, #0
 8015018:	9303      	str	r3, [sp, #12]
    const char *topic = mess->topic.buf;
 801501a:	6807      	ldr	r7, [r0, #0]
    const size_t topic_len = mess->topic.len;
 801501c:	6845      	ldr	r5, [r0, #4]
    const char *message = mess->data.buf;
 801501e:	6884      	ldr	r4, [r0, #8]
    const size_t message_len = mess->data.len;
 8015020:	68c6      	ldr	r6, [r0, #12]
    if(message == NULL || topic == NULL){
 8015022:	b1ac      	cbz	r4, 8015050 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x40>
 8015024:	b1a7      	cbz	r7, 8015050 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x40>
    if (topic_len < 1 || message_len < 1){
 8015026:	b105      	cbz	r5, 801502a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a>
 8015028:	bb0e      	cbnz	r6, 801506e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x5e>
    	logging(L_ERR, "Subscrabed topik len or message len < 1");
 801502a:	498c      	ldr	r1, [pc, #560]	@ (801525c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 801502c:	2003      	movs	r0, #3
 801502e:	f7fd f8db 	bl	80121e8 <logging>
    	MG_ERROR(("Subscrabed topik len or message len < 1 \n"));
 8015032:	4b8b      	ldr	r3, [pc, #556]	@ (8015260 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	2b00      	cmp	r3, #0
 8015038:	f340 8101 	ble.w	801523e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
 801503c:	4b89      	ldr	r3, [pc, #548]	@ (8015264 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801503e:	229a      	movs	r2, #154	@ 0x9a
 8015040:	4989      	ldr	r1, [pc, #548]	@ (8015268 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015042:	2001      	movs	r0, #1
 8015044:	f011 fc58 	bl	80268f8 <mg_log_prefix>
 8015048:	4888      	ldr	r0, [pc, #544]	@ (801526c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x25c>)
 801504a:	f00f fb03 	bl	8024654 <mg_log>
    	return;
 801504e:	e0f6      	b.n	801523e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8015050:	4b83      	ldr	r3, [pc, #524]	@ (8015260 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	f340 80f2 	ble.w	801523e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
 801505a:	4b82      	ldr	r3, [pc, #520]	@ (8015264 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801505c:	2294      	movs	r2, #148	@ 0x94
 801505e:	4982      	ldr	r1, [pc, #520]	@ (8015268 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015060:	2001      	movs	r0, #1
 8015062:	f011 fc49 	bl	80268f8 <mg_log_prefix>
 8015066:	4882      	ldr	r0, [pc, #520]	@ (8015270 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 8015068:	f00f faf4 	bl	8024654 <mg_log>
    	return;
 801506c:	e0e7      	b.n	801523e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    char * local_message = (char *)calloc (message_len + 1, sizeof (char));
 801506e:	2101      	movs	r1, #1
 8015070:	1870      	adds	r0, r6, r1
 8015072:	f7ff fe9f 	bl	8014db4 <_ZL9my_callocjj>
 8015076:	4681      	mov	r9, r0
    char * local_topic = (char *)calloc (topic_len + 1, sizeof(char));
 8015078:	2101      	movs	r1, #1
 801507a:	1868      	adds	r0, r5, r1
 801507c:	f7ff fe9a 	bl	8014db4 <_ZL9my_callocjj>
 8015080:	4680      	mov	r8, r0
    strncpy(local_message, message, message_len);
 8015082:	4632      	mov	r2, r6
 8015084:	4621      	mov	r1, r4
 8015086:	4648      	mov	r0, r9
 8015088:	f018 f879 	bl	802d17e <strncpy>
    strncpy(local_topic, topic, topic_len);
 801508c:	462a      	mov	r2, r5
 801508e:	4639      	mov	r1, r7
 8015090:	4640      	mov	r0, r8
 8015092:	f018 f874 	bl	802d17e <strncpy>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8015096:	4b77      	ldr	r3, [pc, #476]	@ (8015274 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	2200      	movs	r2, #0
 801509c:	2102      	movs	r1, #2
 801509e:	a805      	add	r0, sp, #20
 80150a0:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 80150a2:	9b05      	ldr	r3, [sp, #20]
 80150a4:	f8ad 3010 	strh.w	r3, [sp, #16]
 80150a8:	0c1b      	lsrs	r3, r3, #16
 80150aa:	f88d 3012 	strb.w	r3, [sp, #18]
    const char *switch_position = strstr(local_topic, "switch");
 80150ae:	4972      	ldr	r1, [pc, #456]	@ (8015278 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x268>)
 80150b0:	4640      	mov	r0, r8
 80150b2:	f018 f89d 	bl	802d1f0 <strstr>
    if (switch_position != NULL) {
 80150b6:	2800      	cmp	r0, #0
 80150b8:	f000 80b2 	beq.w	8015220 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 80150bc:	aa03      	add	r2, sp, #12
 80150be:	496f      	ldr	r1, [pc, #444]	@ (801527c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x26c>)
 80150c0:	f017 fc74 	bl	802c9ac <sscanf>
 80150c4:	2801      	cmp	r0, #1
 80150c6:	d009      	beq.n	80150dc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xcc>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 80150c8:	4b65      	ldr	r3, [pc, #404]	@ (8015260 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	f300 809d 	bgt.w	801520c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 80150d2:	496b      	ldr	r1, [pc, #428]	@ (8015280 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x270>)
 80150d4:	2003      	movs	r0, #3
 80150d6:	f7fd f887 	bl	80121e8 <logging>
 80150da:	e0aa      	b.n	8015232 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, local_topic));
 80150dc:	4b60      	ldr	r3, [pc, #384]	@ (8015260 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	2b01      	cmp	r3, #1
 80150e2:	dc19      	bgt.n	8015118 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x108>
    		logging(L_INFO, "Recv control message in topik %s, relay number %d, action %s", local_topic, relay_number, local_message);
 80150e4:	f8cd 9000 	str.w	r9, [sp]
 80150e8:	9b03      	ldr	r3, [sp, #12]
 80150ea:	4642      	mov	r2, r8
 80150ec:	4965      	ldr	r1, [pc, #404]	@ (8015284 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x274>)
 80150ee:	2001      	movs	r0, #1
 80150f0:	f7fd f87a 	bl	80121e8 <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 80150f4:	9c03      	ldr	r4, [sp, #12]
 80150f6:	1e63      	subs	r3, r4, #1
 80150f8:	2b02      	cmp	r3, #2
 80150fa:	d819      	bhi.n	8015130 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x120>
			if (message_len == 2 && strncmp(local_message, "ON", 2) == 0) {
 80150fc:	2e02      	cmp	r6, #2
 80150fe:	d034      	beq.n	801516a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x15a>
			} else if (message_len == 3 && strncmp(local_message, "OFF", 3) == 0) {
 8015100:	2e03      	cmp	r6, #3
 8015102:	d055      	beq.n	80151b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a0>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message));
 8015104:	4b56      	ldr	r3, [pc, #344]	@ (8015260 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	dc74      	bgt.n	80151f6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message);
 801510c:	464a      	mov	r2, r9
 801510e:	495e      	ldr	r1, [pc, #376]	@ (8015288 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x278>)
 8015110:	2003      	movs	r0, #3
 8015112:	f7fd f869 	bl	80121e8 <logging>
 8015116:	e08c      	b.n	8015232 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, local_topic));
 8015118:	4b52      	ldr	r3, [pc, #328]	@ (8015264 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801511a:	22ad      	movs	r2, #173	@ 0xad
 801511c:	4952      	ldr	r1, [pc, #328]	@ (8015268 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 801511e:	2002      	movs	r0, #2
 8015120:	f011 fbea 	bl	80268f8 <mg_log_prefix>
 8015124:	4642      	mov	r2, r8
 8015126:	9903      	ldr	r1, [sp, #12]
 8015128:	4858      	ldr	r0, [pc, #352]	@ (801528c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x27c>)
 801512a:	f00f fa93 	bl	8024654 <mg_log>
 801512e:	e7d9      	b.n	80150e4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd4>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8015130:	4b4b      	ldr	r3, [pc, #300]	@ (8015260 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	2b00      	cmp	r3, #0
 8015136:	dc0c      	bgt.n	8015152 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x142>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 8015138:	9b03      	ldr	r3, [sp, #12]
 801513a:	2203      	movs	r2, #3
 801513c:	4954      	ldr	r1, [pc, #336]	@ (8015290 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x280>)
 801513e:	4610      	mov	r0, r2
 8015140:	f7fd f852 	bl	80121e8 <logging>
    		    free(local_message);
 8015144:	4648      	mov	r0, r9
 8015146:	f006 f809 	bl	801b15c <vPortFree>
    		    free(local_topic);
 801514a:	4640      	mov	r0, r8
 801514c:	f006 f806 	bl	801b15c <vPortFree>
    			return;
 8015150:	e075      	b.n	801523e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8015152:	4b44      	ldr	r3, [pc, #272]	@ (8015264 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015154:	22b2      	movs	r2, #178	@ 0xb2
 8015156:	4944      	ldr	r1, [pc, #272]	@ (8015268 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015158:	2001      	movs	r0, #1
 801515a:	f011 fbcd 	bl	80268f8 <mg_log_prefix>
 801515e:	9a03      	ldr	r2, [sp, #12]
 8015160:	2103      	movs	r1, #3
 8015162:	484b      	ldr	r0, [pc, #300]	@ (8015290 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x280>)
 8015164:	f00f fa76 	bl	8024654 <mg_log>
 8015168:	e7e6      	b.n	8015138 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x128>
			if (message_len == 2 && strncmp(local_message, "ON", 2) == 0) {
 801516a:	2202      	movs	r2, #2
 801516c:	4949      	ldr	r1, [pc, #292]	@ (8015294 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x284>)
 801516e:	4648      	mov	r0, r9
 8015170:	f017 fff3 	bl	802d15a <strncmp>
 8015174:	2800      	cmp	r0, #0
 8015176:	d1c3      	bne.n	8015100 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf0>
				sw_w[relay_number-1] = 1;
 8015178:	f104 0317 	add.w	r3, r4, #23
 801517c:	446b      	add	r3, sp
 801517e:	2201      	movs	r2, #1
 8015180:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8015184:	4b36      	ldr	r3, [pc, #216]	@ (8015260 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	4293      	cmp	r3, r2
 801518a:	dc06      	bgt.n	801519a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x18a>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 801518c:	4b39      	ldr	r3, [pc, #228]	@ (8015274 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	2201      	movs	r2, #1
 8015192:	2102      	movs	r1, #2
 8015194:	a804      	add	r0, sp, #16
 8015196:	4798      	blx	r3
 8015198:	e04b      	b.n	8015232 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 801519a:	4b32      	ldr	r3, [pc, #200]	@ (8015264 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801519c:	22bf      	movs	r2, #191	@ 0xbf
 801519e:	4932      	ldr	r1, [pc, #200]	@ (8015268 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80151a0:	2002      	movs	r0, #2
 80151a2:	f011 fba9 	bl	80268f8 <mg_log_prefix>
 80151a6:	9903      	ldr	r1, [sp, #12]
 80151a8:	483b      	ldr	r0, [pc, #236]	@ (8015298 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x288>)
 80151aa:	f00f fa53 	bl	8024654 <mg_log>
 80151ae:	e7ed      	b.n	801518c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x17c>
			} else if (message_len == 3 && strncmp(local_message, "OFF", 3) == 0) {
 80151b0:	2203      	movs	r2, #3
 80151b2:	493a      	ldr	r1, [pc, #232]	@ (801529c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x28c>)
 80151b4:	4648      	mov	r0, r9
 80151b6:	f017 ffd0 	bl	802d15a <strncmp>
 80151ba:	2800      	cmp	r0, #0
 80151bc:	d1a2      	bne.n	8015104 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf4>
				sw_w[relay_number-1] = 0;
 80151be:	f104 0317 	add.w	r3, r4, #23
 80151c2:	446b      	add	r3, sp
 80151c4:	2200      	movs	r2, #0
 80151c6:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 80151ca:	4b25      	ldr	r3, [pc, #148]	@ (8015260 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	2b01      	cmp	r3, #1
 80151d0:	dc06      	bgt.n	80151e0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d0>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 80151d2:	4b28      	ldr	r3, [pc, #160]	@ (8015274 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	2201      	movs	r2, #1
 80151d8:	2102      	movs	r1, #2
 80151da:	a804      	add	r0, sp, #16
 80151dc:	4798      	blx	r3
 80151de:	e028      	b.n	8015232 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 80151e0:	4b20      	ldr	r3, [pc, #128]	@ (8015264 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80151e2:	22c3      	movs	r2, #195	@ 0xc3
 80151e4:	4920      	ldr	r1, [pc, #128]	@ (8015268 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80151e6:	2002      	movs	r0, #2
 80151e8:	f011 fb86 	bl	80268f8 <mg_log_prefix>
 80151ec:	9903      	ldr	r1, [sp, #12]
 80151ee:	482c      	ldr	r0, [pc, #176]	@ (80152a0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x290>)
 80151f0:	f00f fa30 	bl	8024654 <mg_log>
 80151f4:	e7ed      	b.n	80151d2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c2>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message));
 80151f6:	4b1b      	ldr	r3, [pc, #108]	@ (8015264 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80151f8:	22c7      	movs	r2, #199	@ 0xc7
 80151fa:	491b      	ldr	r1, [pc, #108]	@ (8015268 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80151fc:	2001      	movs	r0, #1
 80151fe:	f011 fb7b 	bl	80268f8 <mg_log_prefix>
 8015202:	4649      	mov	r1, r9
 8015204:	4820      	ldr	r0, [pc, #128]	@ (8015288 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x278>)
 8015206:	f00f fa25 	bl	8024654 <mg_log>
 801520a:	e77f      	b.n	801510c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xfc>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 801520c:	4b15      	ldr	r3, [pc, #84]	@ (8015264 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801520e:	22cc      	movs	r2, #204	@ 0xcc
 8015210:	4915      	ldr	r1, [pc, #84]	@ (8015268 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015212:	2001      	movs	r0, #1
 8015214:	f011 fb70 	bl	80268f8 <mg_log_prefix>
 8015218:	4822      	ldr	r0, [pc, #136]	@ (80152a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x294>)
 801521a:	f00f fa1b 	bl	8024654 <mg_log>
 801521e:	e758      	b.n	80150d2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc2>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", local_topic));
 8015220:	4b0f      	ldr	r3, [pc, #60]	@ (8015260 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	2b00      	cmp	r3, #0
 8015226:	dc0d      	bgt.n	8015244 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x234>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", local_topic);
 8015228:	4642      	mov	r2, r8
 801522a:	491f      	ldr	r1, [pc, #124]	@ (80152a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x298>)
 801522c:	2003      	movs	r0, #3
 801522e:	f7fc ffdb 	bl	80121e8 <logging>
    free(local_message);
 8015232:	4648      	mov	r0, r9
 8015234:	f005 ff92 	bl	801b15c <vPortFree>
    free(local_topic);
 8015238:	4640      	mov	r0, r8
 801523a:	f005 ff8f 	bl	801b15c <vPortFree>
}
 801523e:	b007      	add	sp, #28
 8015240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", local_topic));
 8015244:	4b07      	ldr	r3, [pc, #28]	@ (8015264 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015246:	22d0      	movs	r2, #208	@ 0xd0
 8015248:	4907      	ldr	r1, [pc, #28]	@ (8015268 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 801524a:	2001      	movs	r0, #1
 801524c:	f011 fb54 	bl	80268f8 <mg_log_prefix>
 8015250:	4641      	mov	r1, r8
 8015252:	4815      	ldr	r0, [pc, #84]	@ (80152a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x298>)
 8015254:	f00f f9fe 	bl	8024654 <mg_log>
 8015258:	e7e6      	b.n	8015228 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
 801525a:	bf00      	nop
 801525c:	08038528 	.word	0x08038528
 8015260:	2000012c 	.word	0x2000012c
 8015264:	080384b8 	.word	0x080384b8
 8015268:	080384d8 	.word	0x080384d8
 801526c:	08038550 	.word	0x08038550
 8015270:	08038504 	.word	0x08038504
 8015274:	200028b0 	.word	0x200028b0
 8015278:	0803857c 	.word	0x0803857c
 801527c:	08038584 	.word	0x08038584
 8015280:	080386f0 	.word	0x080386f0
 8015284:	080385bc 	.word	0x080385bc
 8015288:	0803867c 	.word	0x0803867c
 801528c:	08038590 	.word	0x08038590
 8015290:	080385fc 	.word	0x080385fc
 8015294:	0803864c 	.word	0x0803864c
 8015298:	08038650 	.word	0x08038650
 801529c:	08038664 	.word	0x08038664
 80152a0:	08038668 	.word	0x08038668
 80152a4:	080386b8 	.word	0x080386b8
 80152a8:	08038728 	.word	0x08038728

080152ac <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 80152ac:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 80152ae:	2910      	cmp	r1, #16
 80152b0:	d031      	beq.n	8015316 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x6a>
 80152b2:	4605      	mov	r5, r0
 80152b4:	2911      	cmp	r1, #17
 80152b6:	d002      	beq.n	80152be <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x12>
 80152b8:	2909      	cmp	r1, #9
 80152ba:	d03a      	beq.n	8015332 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x86>
}
 80152bc:	bd70      	pop	{r4, r5, r6, pc}
		MG_DEBUG(("MQTT_open_connection"));
 80152be:	4b22      	ldr	r3, [pc, #136]	@ (8015348 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	2b02      	cmp	r3, #2
 80152c4:	dc1d      	bgt.n	8015302 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x56>
		logging(L_INFO, "MQTT Open connection");
 80152c6:	4921      	ldr	r1, [pc, #132]	@ (801534c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 80152c8:	2001      	movs	r0, #1
 80152ca:	f7fc ff8d 	bl	80121e8 <logging>
		mqtt_conn = conn;
 80152ce:	4b20      	ldr	r3, [pc, #128]	@ (8015350 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80152d0:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 80152d2:	4b20      	ldr	r3, [pc, #128]	@ (8015354 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 80152d4:	781b      	ldrb	r3, [r3, #0]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d1f0      	bne.n	80152bc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 80152da:	4e1f      	ldr	r6, [pc, #124]	@ (8015358 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 80152dc:	2206      	movs	r2, #6
 80152de:	4631      	mov	r1, r6
 80152e0:	4628      	mov	r0, r5
 80152e2:	f7ff fcfd 	bl	8014ce0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 80152e6:	4c1a      	ldr	r4, [pc, #104]	@ (8015350 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80152e8:	2101      	movs	r1, #1
 80152ea:	6820      	ldr	r0, [r4, #0]
 80152ec:	f7ff fd70 	bl	8014dd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 80152f0:	2206      	movs	r2, #6
 80152f2:	4631      	mov	r1, r6
 80152f4:	6820      	ldr	r0, [r4, #0]
 80152f6:	f7ff fe49 	bl	8014f8c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 80152fa:	4b16      	ldr	r3, [pc, #88]	@ (8015354 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 80152fc:	2201      	movs	r2, #1
 80152fe:	701a      	strb	r2, [r3, #0]
 8015300:	e7dc      	b.n	80152bc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		MG_DEBUG(("MQTT_open_connection"));
 8015302:	4b16      	ldr	r3, [pc, #88]	@ (801535c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 8015304:	22e1      	movs	r2, #225	@ 0xe1
 8015306:	4916      	ldr	r1, [pc, #88]	@ (8015360 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 8015308:	2003      	movs	r0, #3
 801530a:	f011 faf5 	bl	80268f8 <mg_log_prefix>
 801530e:	4815      	ldr	r0, [pc, #84]	@ (8015364 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 8015310:	f00f f9a0 	bl	8024654 <mg_log>
 8015314:	e7d7      	b.n	80152c6 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x1a>
 8015316:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 8015318:	4913      	ldr	r1, [pc, #76]	@ (8015368 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 801531a:	2001      	movs	r0, #1
 801531c:	f7fc ff64 	bl	80121e8 <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 8015320:	4620      	mov	r0, r4
 8015322:	f7ff fe75 	bl	8015010 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8015326:	2100      	movs	r1, #0
 8015328:	4b09      	ldr	r3, [pc, #36]	@ (8015350 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 801532a:	6818      	ldr	r0, [r3, #0]
 801532c:	f7ff fd50 	bl	8014dd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
 8015330:	e7c4      	b.n	80152bc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		logging(L_INFO, "MQTT Close connection");
 8015332:	490e      	ldr	r1, [pc, #56]	@ (801536c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 8015334:	2001      	movs	r0, #1
 8015336:	f7fc ff57 	bl	80121e8 <logging>
		mqtt_conn     = NULL;
 801533a:	2300      	movs	r3, #0
 801533c:	4a04      	ldr	r2, [pc, #16]	@ (8015350 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 801533e:	6013      	str	r3, [r2, #0]
		is_registered = false;
 8015340:	4a04      	ldr	r2, [pc, #16]	@ (8015354 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8015342:	7013      	strb	r3, [r2, #0]
}
 8015344:	e7ba      	b.n	80152bc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
 8015346:	bf00      	nop
 8015348:	2000012c 	.word	0x2000012c
 801534c:	08038784 	.word	0x08038784
 8015350:	200028c8 	.word	0x200028c8
 8015354:	200028b4 	.word	0x200028b4
 8015358:	200000c8 	.word	0x200000c8
 801535c:	08038758 	.word	0x08038758
 8015360:	080384d8 	.word	0x080384d8
 8015364:	0803876c 	.word	0x0803876c
 8015368:	0803879c 	.word	0x0803879c
 801536c:	080387c0 	.word	0x080387c0

08015370 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 8015370:	4b01      	ldr	r3, [pc, #4]	@ (8015378 <get_mqtt_connection+0x8>)
 8015372:	6818      	ldr	r0, [r3, #0]
 8015374:	4770      	bx	lr
 8015376:	bf00      	nop
 8015378:	200028c8 	.word	0x200028c8

0801537c <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 801537c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015380:	b086      	sub	sp, #24
 8015382:	4606      	mov	r6, r0
 8015384:	460c      	mov	r4, r1
 8015386:	4691      	mov	r9, r2
 8015388:	461d      	mov	r5, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 801538a:	2101      	movs	r1, #1
 801538c:	2080      	movs	r0, #128	@ 0x80
 801538e:	f7ff fd11 	bl	8014db4 <_ZL9my_callocjj>
 8015392:	f8df a148 	ldr.w	sl, [pc, #328]	@ 80154dc <mqtt_init+0x160>
 8015396:	f8ca 0000 	str.w	r0, [sl]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 801539a:	2101      	movs	r1, #1
 801539c:	2021      	movs	r0, #33	@ 0x21
 801539e:	f7ff fd09 	bl	8014db4 <_ZL9my_callocjj>
 80153a2:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 80154e0 <mqtt_init+0x164>
 80153a6:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 80153aa:	2101      	movs	r1, #1
 80153ac:	2021      	movs	r0, #33	@ 0x21
 80153ae:	f7ff fd01 	bl	8014db4 <_ZL9my_callocjj>
 80153b2:	4f3b      	ldr	r7, [pc, #236]	@ (80154a0 <mqtt_init+0x124>)
 80153b4:	6038      	str	r0, [r7, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80153b6:	2101      	movs	r1, #1
 80153b8:	2080      	movs	r0, #128	@ 0x80
 80153ba:	f7ff fcfb 	bl	8014db4 <_ZL9my_callocjj>
 80153be:	4b39      	ldr	r3, [pc, #228]	@ (80154a4 <mqtt_init+0x128>)
 80153c0:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 80153c2:	2101      	movs	r1, #1
 80153c4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80153c8:	f7ff fcf4 	bl	8014db4 <_ZL9my_callocjj>
 80153cc:	4b36      	ldr	r3, [pc, #216]	@ (80154a8 <mqtt_init+0x12c>)
 80153ce:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 80153d0:	2101      	movs	r1, #1
 80153d2:	2028      	movs	r0, #40	@ 0x28
 80153d4:	f7ff fcee 	bl	8014db4 <_ZL9my_callocjj>
 80153d8:	4b34      	ldr	r3, [pc, #208]	@ (80154ac <mqtt_init+0x130>)
 80153da:	6018      	str	r0, [r3, #0]
	r_w_parameter   = fn;
 80153dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80153de:	4b34      	ldr	r3, [pc, #208]	@ (80154b0 <mqtt_init+0x134>)
 80153e0:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 80153e2:	f8da a000 	ldr.w	sl, [sl]
 80153e6:	4649      	mov	r1, r9
 80153e8:	4650      	mov	r0, sl
 80153ea:	f019 f88b 	bl	802e504 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 80153ee:	f8d8 9000 	ldr.w	r9, [r8]
 80153f2:	4629      	mov	r1, r5
 80153f4:	4648      	mov	r0, r9
 80153f6:	f019 f885 	bl	802e504 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 80153fa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80153fc:	6838      	ldr	r0, [r7, #0]
 80153fe:	f019 f881 	bl	802e504 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 8015402:	464b      	mov	r3, r9
 8015404:	4652      	mov	r2, sl
 8015406:	492b      	ldr	r1, [pc, #172]	@ (80154b4 <mqtt_init+0x138>)
 8015408:	2001      	movs	r0, #1
 801540a:	f7fc feed 	bl	80121e8 <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 801540e:	4d2a      	ldr	r5, [pc, #168]	@ (80154b8 <mqtt_init+0x13c>)
 8015410:	602e      	str	r6, [r5, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 8015412:	4b2a      	ldr	r3, [pc, #168]	@ (80154bc <mqtt_init+0x140>)
 8015414:	601c      	str	r4, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 8015416:	2106      	movs	r1, #6
 8015418:	4620      	mov	r0, r4
 801541a:	f000 f871 	bl	8015500 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 801541e:	4e28      	ldr	r6, [pc, #160]	@ (80154c0 <mqtt_init+0x144>)
 8015420:	ac04      	add	r4, sp, #16
 8015422:	f8d8 1000 	ldr.w	r1, [r8]
 8015426:	4620      	mov	r0, r4
 8015428:	f00f faf2 	bl	8024a10 <mg_str_s>
 801542c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015430:	e886 0003 	stmia.w	r6, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 8015434:	6839      	ldr	r1, [r7, #0]
 8015436:	4620      	mov	r0, r4
 8015438:	f00f faea 	bl	8024a10 <mg_str_s>
 801543c:	f106 0308 	add.w	r3, r6, #8
 8015440:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015444:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 8015448:	233c      	movs	r3, #60	@ 0x3c
 801544a:	8573      	strh	r3, [r6, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 801544c:	2400      	movs	r4, #0
 801544e:	9402      	str	r4, [sp, #8]
 8015450:	4b1c      	ldr	r3, [pc, #112]	@ (80154c4 <mqtt_init+0x148>)
 8015452:	9301      	str	r3, [sp, #4]
 8015454:	2303      	movs	r3, #3
 8015456:	9300      	str	r3, [sp, #0]
 8015458:	f242 7210 	movw	r2, #10000	@ 0x2710
 801545c:	2300      	movs	r3, #0
 801545e:	6828      	ldr	r0, [r5, #0]
 8015460:	f010 fcb8 	bl	8025dd4 <mg_timer_add>
 8015464:	4b18      	ldr	r3, [pc, #96]	@ (80154c8 <mqtt_init+0x14c>)
 8015466:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 8015468:	9402      	str	r4, [sp, #8]
 801546a:	4b18      	ldr	r3, [pc, #96]	@ (80154cc <mqtt_init+0x150>)
 801546c:	9301      	str	r3, [sp, #4]
 801546e:	2601      	movs	r6, #1
 8015470:	9600      	str	r6, [sp, #0]
 8015472:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8015476:	2300      	movs	r3, #0
 8015478:	6828      	ldr	r0, [r5, #0]
 801547a:	f010 fcab 	bl	8025dd4 <mg_timer_add>
 801547e:	4b14      	ldr	r3, [pc, #80]	@ (80154d0 <mqtt_init+0x154>)
 8015480:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 8015482:	9402      	str	r4, [sp, #8]
 8015484:	4b13      	ldr	r3, [pc, #76]	@ (80154d4 <mqtt_init+0x158>)
 8015486:	9301      	str	r3, [sp, #4]
 8015488:	9600      	str	r6, [sp, #0]
 801548a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801548e:	2300      	movs	r3, #0
 8015490:	6828      	ldr	r0, [r5, #0]
 8015492:	f010 fc9f 	bl	8025dd4 <mg_timer_add>
 8015496:	4b10      	ldr	r3, [pc, #64]	@ (80154d8 <mqtt_init+0x15c>)
 8015498:	6018      	str	r0, [r3, #0]

}
 801549a:	b006      	add	sp, #24
 801549c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154a0:	2000291c 	.word	0x2000291c
 80154a4:	20002918 	.word	0x20002918
 80154a8:	20002914 	.word	0x20002914
 80154ac:	200028c4 	.word	0x200028c4
 80154b0:	200028b0 	.word	0x200028b0
 80154b4:	080387d8 	.word	0x080387d8
 80154b8:	20002910 	.word	0x20002910
 80154bc:	2000290c 	.word	0x2000290c
 80154c0:	200028cc 	.word	0x200028cc
 80154c4:	08014c55 	.word	0x08014c55
 80154c8:	200028c0 	.word	0x200028c0
 80154cc:	08014f6d 	.word	0x08014f6d
 80154d0:	200028bc 	.word	0x200028bc
 80154d4:	08014f4d 	.word	0x08014f4d
 80154d8:	200028b8 	.word	0x200028b8
 80154dc:	20002924 	.word	0x20002924
 80154e0:	20002920 	.word	0x20002920

080154e4 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 80154e4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80154e6:	fb01 f400 	mul.w	r4, r1, r0
 80154ea:	4620      	mov	r0, r4
 80154ec:	f005 fdb4 	bl	801b058 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80154f0:	4605      	mov	r5, r0
 80154f2:	b118      	cbz	r0, 80154fc <_ZL9my_callocjj+0x18>
 80154f4:	4622      	mov	r2, r4
 80154f6:	2100      	movs	r1, #0
 80154f8:	f017 fdfa 	bl	802d0f0 <memset>
}
 80154fc:	4628      	mov	r0, r5
 80154fe:	bd38      	pop	{r3, r4, r5, pc}

08015500 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8015500:	b570      	push	{r4, r5, r6, lr}
 8015502:	4606      	mov	r6, r0
 8015504:	460d      	mov	r5, r1

	if ( unical_id){
 8015506:	4b0f      	ldr	r3, [pc, #60]	@ (8015544 <set_device_id+0x44>)
 8015508:	6818      	ldr	r0, [r3, #0]
 801550a:	b108      	cbz	r0, 8015510 <set_device_id+0x10>
		free(unical_id);
 801550c:	f005 fe26 	bl	801b15c <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8015510:	0068      	lsls	r0, r5, #1
 8015512:	2101      	movs	r1, #1
 8015514:	4408      	add	r0, r1
 8015516:	f7ff ffe5 	bl	80154e4 <_ZL9my_callocjj>
 801551a:	4b0a      	ldr	r3, [pc, #40]	@ (8015544 <set_device_id+0x44>)
 801551c:	6018      	str	r0, [r3, #0]


	if (unical_id){
 801551e:	b108      	cbz	r0, 8015524 <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 8015520:	2400      	movs	r4, #0
 8015522:	e00b      	b.n	801553c <set_device_id+0x3c>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8015524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015528:	e00b      	b.n	8015542 <set_device_id+0x42>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 801552a:	4b06      	ldr	r3, [pc, #24]	@ (8015544 <set_device_id+0x44>)
 801552c:	6818      	ldr	r0, [r3, #0]
 801552e:	5d32      	ldrb	r2, [r6, r4]
 8015530:	4905      	ldr	r1, [pc, #20]	@ (8015548 <set_device_id+0x48>)
 8015532:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8015536:	f017 fa19 	bl	802c96c <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 801553a:	3401      	adds	r4, #1
 801553c:	42ac      	cmp	r4, r5
 801553e:	d3f4      	bcc.n	801552a <set_device_id+0x2a>
	}

	return NO_ERR; // Успешно
 8015540:	2000      	movs	r0, #0
}
 8015542:	bd70      	pop	{r4, r5, r6, pc}
 8015544:	2000292c 	.word	0x2000292c
 8015548:	08038804 	.word	0x08038804

0801554c <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 801554c:	b538      	push	{r3, r4, r5, lr}
 801554e:	4605      	mov	r5, r0
 8015550:	460c      	mov	r4, r1

	if(dev_conf_ip){
 8015552:	4b0c      	ldr	r3, [pc, #48]	@ (8015584 <set_device_conf_ip+0x38>)
 8015554:	6818      	ldr	r0, [r3, #0]
 8015556:	b108      	cbz	r0, 801555c <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 8015558:	f005 fe00 	bl	801b15c <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 801555c:	2101      	movs	r1, #1
 801555e:	1860      	adds	r0, r4, r1
 8015560:	f7ff ffc0 	bl	80154e4 <_ZL9my_callocjj>
 8015564:	4b07      	ldr	r3, [pc, #28]	@ (8015584 <set_device_conf_ip+0x38>)
 8015566:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 8015568:	b140      	cbz	r0, 801557c <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 801556a:	4622      	mov	r2, r4
 801556c:	4629      	mov	r1, r5
 801556e:	f017 fe06 	bl	802d17e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 8015572:	4b04      	ldr	r3, [pc, #16]	@ (8015584 <set_device_conf_ip+0x38>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	2000      	movs	r0, #0
 8015578:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 801557a:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 801557c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015580:	e7fb      	b.n	801557a <set_device_conf_ip+0x2e>
 8015582:	bf00      	nop
 8015584:	20002928 	.word	0x20002928

08015588 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 8015588:	b500      	push	{lr}
 801558a:	b087      	sub	sp, #28

	strcpy(buff, "");
 801558c:	f04f 0c00 	mov.w	ip, #0
 8015590:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8015594:	3a01      	subs	r2, #1
 8015596:	2a07      	cmp	r2, #7
 8015598:	f200 8087 	bhi.w	80156aa <get_config_topik_string+0x122>
 801559c:	e8df f002 	tbb	[pc, r2]
 80155a0:	45251604 	.word	0x45251604
 80155a4:	55756535 	.word	0x55756535
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 80155a8:	9304      	str	r3, [sp, #16]
 80155aa:	4b41      	ldr	r3, [pc, #260]	@ (80156b0 <get_config_topik_string+0x128>)
 80155ac:	9303      	str	r3, [sp, #12]
 80155ae:	4b41      	ldr	r3, [pc, #260]	@ (80156b4 <get_config_topik_string+0x12c>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	9302      	str	r3, [sp, #8]
 80155b4:	4b40      	ldr	r3, [pc, #256]	@ (80156b8 <get_config_topik_string+0x130>)
 80155b6:	9301      	str	r3, [sp, #4]
 80155b8:	4b40      	ldr	r3, [pc, #256]	@ (80156bc <get_config_topik_string+0x134>)
 80155ba:	9300      	str	r3, [sp, #0]
 80155bc:	4b40      	ldr	r3, [pc, #256]	@ (80156c0 <get_config_topik_string+0x138>)
 80155be:	4a41      	ldr	r2, [pc, #260]	@ (80156c4 <get_config_topik_string+0x13c>)
 80155c0:	f017 f86c 	bl	802c69c <snprintf>
			return -1;
			break;
	}


	return 0;
 80155c4:	2000      	movs	r0, #0
}
 80155c6:	b007      	add	sp, #28
 80155c8:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 80155cc:	9304      	str	r3, [sp, #16]
 80155ce:	4b3e      	ldr	r3, [pc, #248]	@ (80156c8 <get_config_topik_string+0x140>)
 80155d0:	9303      	str	r3, [sp, #12]
 80155d2:	4a38      	ldr	r2, [pc, #224]	@ (80156b4 <get_config_topik_string+0x12c>)
 80155d4:	6812      	ldr	r2, [r2, #0]
 80155d6:	9202      	str	r2, [sp, #8]
 80155d8:	4a37      	ldr	r2, [pc, #220]	@ (80156b8 <get_config_topik_string+0x130>)
 80155da:	9201      	str	r2, [sp, #4]
 80155dc:	9300      	str	r3, [sp, #0]
 80155de:	4b38      	ldr	r3, [pc, #224]	@ (80156c0 <get_config_topik_string+0x138>)
 80155e0:	4a38      	ldr	r2, [pc, #224]	@ (80156c4 <get_config_topik_string+0x13c>)
 80155e2:	f017 f85b 	bl	802c69c <snprintf>
	return 0;
 80155e6:	2000      	movs	r0, #0
			break;
 80155e8:	e7ed      	b.n	80155c6 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 80155ea:	9304      	str	r3, [sp, #16]
 80155ec:	4b37      	ldr	r3, [pc, #220]	@ (80156cc <get_config_topik_string+0x144>)
 80155ee:	9303      	str	r3, [sp, #12]
 80155f0:	4b30      	ldr	r3, [pc, #192]	@ (80156b4 <get_config_topik_string+0x12c>)
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	9302      	str	r3, [sp, #8]
 80155f6:	4b30      	ldr	r3, [pc, #192]	@ (80156b8 <get_config_topik_string+0x130>)
 80155f8:	9301      	str	r3, [sp, #4]
 80155fa:	4b35      	ldr	r3, [pc, #212]	@ (80156d0 <get_config_topik_string+0x148>)
 80155fc:	9300      	str	r3, [sp, #0]
 80155fe:	4b30      	ldr	r3, [pc, #192]	@ (80156c0 <get_config_topik_string+0x138>)
 8015600:	4a30      	ldr	r2, [pc, #192]	@ (80156c4 <get_config_topik_string+0x13c>)
 8015602:	f017 f84b 	bl	802c69c <snprintf>
	return 0;
 8015606:	2000      	movs	r0, #0
			break;
 8015608:	e7dd      	b.n	80155c6 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 801560a:	9304      	str	r3, [sp, #16]
 801560c:	4b31      	ldr	r3, [pc, #196]	@ (80156d4 <get_config_topik_string+0x14c>)
 801560e:	9303      	str	r3, [sp, #12]
 8015610:	4b28      	ldr	r3, [pc, #160]	@ (80156b4 <get_config_topik_string+0x12c>)
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	9302      	str	r3, [sp, #8]
 8015616:	4b28      	ldr	r3, [pc, #160]	@ (80156b8 <get_config_topik_string+0x130>)
 8015618:	9301      	str	r3, [sp, #4]
 801561a:	4b2d      	ldr	r3, [pc, #180]	@ (80156d0 <get_config_topik_string+0x148>)
 801561c:	9300      	str	r3, [sp, #0]
 801561e:	4b28      	ldr	r3, [pc, #160]	@ (80156c0 <get_config_topik_string+0x138>)
 8015620:	4a28      	ldr	r2, [pc, #160]	@ (80156c4 <get_config_topik_string+0x13c>)
 8015622:	f017 f83b 	bl	802c69c <snprintf>
	return 0;
 8015626:	2000      	movs	r0, #0
			break;
 8015628:	e7cd      	b.n	80155c6 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 801562a:	9304      	str	r3, [sp, #16]
 801562c:	4b2a      	ldr	r3, [pc, #168]	@ (80156d8 <get_config_topik_string+0x150>)
 801562e:	9303      	str	r3, [sp, #12]
 8015630:	4b20      	ldr	r3, [pc, #128]	@ (80156b4 <get_config_topik_string+0x12c>)
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	9302      	str	r3, [sp, #8]
 8015636:	4b20      	ldr	r3, [pc, #128]	@ (80156b8 <get_config_topik_string+0x130>)
 8015638:	9301      	str	r3, [sp, #4]
 801563a:	4b25      	ldr	r3, [pc, #148]	@ (80156d0 <get_config_topik_string+0x148>)
 801563c:	9300      	str	r3, [sp, #0]
 801563e:	4b20      	ldr	r3, [pc, #128]	@ (80156c0 <get_config_topik_string+0x138>)
 8015640:	4a20      	ldr	r2, [pc, #128]	@ (80156c4 <get_config_topik_string+0x13c>)
 8015642:	f017 f82b 	bl	802c69c <snprintf>
	return 0;
 8015646:	2000      	movs	r0, #0
			break;
 8015648:	e7bd      	b.n	80155c6 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 801564a:	9304      	str	r3, [sp, #16]
 801564c:	4b23      	ldr	r3, [pc, #140]	@ (80156dc <get_config_topik_string+0x154>)
 801564e:	9303      	str	r3, [sp, #12]
 8015650:	4b18      	ldr	r3, [pc, #96]	@ (80156b4 <get_config_topik_string+0x12c>)
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	9302      	str	r3, [sp, #8]
 8015656:	4b18      	ldr	r3, [pc, #96]	@ (80156b8 <get_config_topik_string+0x130>)
 8015658:	9301      	str	r3, [sp, #4]
 801565a:	4b1d      	ldr	r3, [pc, #116]	@ (80156d0 <get_config_topik_string+0x148>)
 801565c:	9300      	str	r3, [sp, #0]
 801565e:	4b18      	ldr	r3, [pc, #96]	@ (80156c0 <get_config_topik_string+0x138>)
 8015660:	4a18      	ldr	r2, [pc, #96]	@ (80156c4 <get_config_topik_string+0x13c>)
 8015662:	f017 f81b 	bl	802c69c <snprintf>
	return 0;
 8015666:	2000      	movs	r0, #0
			break;
 8015668:	e7ad      	b.n	80155c6 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 801566a:	9304      	str	r3, [sp, #16]
 801566c:	4b1c      	ldr	r3, [pc, #112]	@ (80156e0 <get_config_topik_string+0x158>)
 801566e:	9303      	str	r3, [sp, #12]
 8015670:	4b10      	ldr	r3, [pc, #64]	@ (80156b4 <get_config_topik_string+0x12c>)
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	9302      	str	r3, [sp, #8]
 8015676:	4b10      	ldr	r3, [pc, #64]	@ (80156b8 <get_config_topik_string+0x130>)
 8015678:	9301      	str	r3, [sp, #4]
 801567a:	4b15      	ldr	r3, [pc, #84]	@ (80156d0 <get_config_topik_string+0x148>)
 801567c:	9300      	str	r3, [sp, #0]
 801567e:	4b10      	ldr	r3, [pc, #64]	@ (80156c0 <get_config_topik_string+0x138>)
 8015680:	4a10      	ldr	r2, [pc, #64]	@ (80156c4 <get_config_topik_string+0x13c>)
 8015682:	f017 f80b 	bl	802c69c <snprintf>
	return 0;
 8015686:	2000      	movs	r0, #0
			break;
 8015688:	e79d      	b.n	80155c6 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 801568a:	9304      	str	r3, [sp, #16]
 801568c:	4b15      	ldr	r3, [pc, #84]	@ (80156e4 <get_config_topik_string+0x15c>)
 801568e:	9303      	str	r3, [sp, #12]
 8015690:	4b08      	ldr	r3, [pc, #32]	@ (80156b4 <get_config_topik_string+0x12c>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	9302      	str	r3, [sp, #8]
 8015696:	4b08      	ldr	r3, [pc, #32]	@ (80156b8 <get_config_topik_string+0x130>)
 8015698:	9301      	str	r3, [sp, #4]
 801569a:	4b0d      	ldr	r3, [pc, #52]	@ (80156d0 <get_config_topik_string+0x148>)
 801569c:	9300      	str	r3, [sp, #0]
 801569e:	4b08      	ldr	r3, [pc, #32]	@ (80156c0 <get_config_topik_string+0x138>)
 80156a0:	4a08      	ldr	r2, [pc, #32]	@ (80156c4 <get_config_topik_string+0x13c>)
 80156a2:	f016 fffb 	bl	802c69c <snprintf>
	return 0;
 80156a6:	2000      	movs	r0, #0
			break;
 80156a8:	e78d      	b.n	80155c6 <get_config_topik_string+0x3e>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 80156aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80156ae:	e78a      	b.n	80155c6 <get_config_topik_string+0x3e>
 80156b0:	08038824 	.word	0x08038824
 80156b4:	2000292c 	.word	0x2000292c
 80156b8:	08036f64 	.word	0x08036f64
 80156bc:	0803882c 	.word	0x0803882c
 80156c0:	200000f8 	.word	0x200000f8
 80156c4:	0803880c 	.word	0x0803880c
 80156c8:	0803857c 	.word	0x0803857c
 80156cc:	0803883c 	.word	0x0803883c
 80156d0:	08038844 	.word	0x08038844
 80156d4:	0803884c 	.word	0x0803884c
 80156d8:	08038854 	.word	0x08038854
 80156dc:	0803885c 	.word	0x0803885c
 80156e0:	0803886c 	.word	0x0803886c
 80156e4:	0803887c 	.word	0x0803887c

080156e8 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 80156e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ec:	b099      	sub	sp, #100	@ 0x64
 80156ee:	9017      	str	r0, [sp, #92]	@ 0x5c
 80156f0:	460d      	mov	r5, r1
 80156f2:	4617      	mov	r7, r2
 80156f4:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 80156f6:	460a      	mov	r2, r1
 80156f8:	2100      	movs	r1, #0
 80156fa:	f017 fcf9 	bl	802d0f0 <memset>

	switch (payload_type) {
 80156fe:	1e7a      	subs	r2, r7, #1
 8015700:	2a07      	cmp	r2, #7
 8015702:	f200 81ba 	bhi.w	8015a7a <get_config_payload_string+0x392>
 8015706:	e8df f012 	tbh	[pc, r2, lsl #1]
 801570a:	0008      	.short	0x0008
 801570c:	00a10043 	.word	0x00a10043
 8015710:	00c500ea 	.word	0x00c500ea
 8015714:	0193016e 	.word	0x0193016e
 8015718:	0149      	.short	0x0149

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 801571a:	2101      	movs	r1, #1
 801571c:	2080      	movs	r0, #128	@ 0x80
 801571e:	f7ff fee1 	bl	80154e4 <_ZL9my_callocjj>
 8015722:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8015724:	9400      	str	r4, [sp, #0]
 8015726:	4b80      	ldr	r3, [pc, #512]	@ (8015928 <get_config_payload_string+0x240>)
 8015728:	4a80      	ldr	r2, [pc, #512]	@ (801592c <get_config_payload_string+0x244>)
 801572a:	2180      	movs	r1, #128	@ 0x80
 801572c:	f016 ffb6 	bl	802c69c <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8015730:	4b7f      	ldr	r3, [pc, #508]	@ (8015930 <get_config_payload_string+0x248>)
 8015732:	681a      	ldr	r2, [r3, #0]
 8015734:	4b7f      	ldr	r3, [pc, #508]	@ (8015934 <get_config_payload_string+0x24c>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	9314      	str	r3, [sp, #80]	@ 0x50
 801573a:	4b7f      	ldr	r3, [pc, #508]	@ (8015938 <get_config_payload_string+0x250>)
 801573c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801573e:	4b7f      	ldr	r3, [pc, #508]	@ (801593c <get_config_payload_string+0x254>)
 8015740:	9312      	str	r3, [sp, #72]	@ 0x48
 8015742:	4b7f      	ldr	r3, [pc, #508]	@ (8015940 <get_config_payload_string+0x258>)
 8015744:	9311      	str	r3, [sp, #68]	@ 0x44
 8015746:	4b7f      	ldr	r3, [pc, #508]	@ (8015944 <get_config_payload_string+0x25c>)
 8015748:	9310      	str	r3, [sp, #64]	@ 0x40
 801574a:	4b7f      	ldr	r3, [pc, #508]	@ (8015948 <get_config_payload_string+0x260>)
 801574c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801574e:	920e      	str	r2, [sp, #56]	@ 0x38
 8015750:	4b7e      	ldr	r3, [pc, #504]	@ (801594c <get_config_payload_string+0x264>)
 8015752:	930d      	str	r3, [sp, #52]	@ 0x34
 8015754:	497e      	ldr	r1, [pc, #504]	@ (8015950 <get_config_payload_string+0x268>)
 8015756:	910c      	str	r1, [sp, #48]	@ 0x30
 8015758:	940b      	str	r4, [sp, #44]	@ 0x2c
 801575a:	497e      	ldr	r1, [pc, #504]	@ (8015954 <get_config_payload_string+0x26c>)
 801575c:	910a      	str	r1, [sp, #40]	@ 0x28
 801575e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015760:	9308      	str	r3, [sp, #32]
 8015762:	9707      	str	r7, [sp, #28]
 8015764:	487c      	ldr	r0, [pc, #496]	@ (8015958 <get_config_payload_string+0x270>)
 8015766:	9006      	str	r0, [sp, #24]
 8015768:	9405      	str	r4, [sp, #20]
 801576a:	9104      	str	r1, [sp, #16]
 801576c:	9403      	str	r4, [sp, #12]
 801576e:	9102      	str	r1, [sp, #8]
 8015770:	9201      	str	r2, [sp, #4]
 8015772:	9300      	str	r3, [sp, #0]
 8015774:	4b79      	ldr	r3, [pc, #484]	@ (801595c <get_config_payload_string+0x274>)
 8015776:	4a7a      	ldr	r2, [pc, #488]	@ (8015960 <get_config_payload_string+0x278>)
 8015778:	4629      	mov	r1, r5
 801577a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801577c:	f016 ff8e 	bl	802c69c <snprintf>
 8015780:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8015782:	4638      	mov	r0, r7
 8015784:	f005 fcea 	bl	801b15c <vPortFree>

			return len;
 8015788:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 801578a:	b019      	add	sp, #100	@ 0x64
 801578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8015790:	2101      	movs	r1, #1
 8015792:	2080      	movs	r0, #128	@ 0x80
 8015794:	f7ff fea6 	bl	80154e4 <_ZL9my_callocjj>
 8015798:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 801579a:	2101      	movs	r1, #1
 801579c:	2080      	movs	r0, #128	@ 0x80
 801579e:	f7ff fea1 	bl	80154e4 <_ZL9my_callocjj>
 80157a2:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 80157a4:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 8015998 <get_config_payload_string+0x2b0>
 80157a8:	9400      	str	r4, [sp, #0]
 80157aa:	464b      	mov	r3, r9
 80157ac:	4a6d      	ldr	r2, [pc, #436]	@ (8015964 <get_config_payload_string+0x27c>)
 80157ae:	2180      	movs	r1, #128	@ 0x80
 80157b0:	4638      	mov	r0, r7
 80157b2:	f016 ff73 	bl	802c69c <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 80157b6:	f8df a194 	ldr.w	sl, [pc, #404]	@ 801594c <get_config_payload_string+0x264>
 80157ba:	4e65      	ldr	r6, [pc, #404]	@ (8015950 <get_config_payload_string+0x268>)
 80157bc:	9602      	str	r6, [sp, #8]
 80157be:	9701      	str	r7, [sp, #4]
 80157c0:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8015930 <get_config_payload_string+0x248>
 80157c4:	f8db 3000 	ldr.w	r3, [fp]
 80157c8:	9300      	str	r3, [sp, #0]
 80157ca:	4653      	mov	r3, sl
 80157cc:	4a66      	ldr	r2, [pc, #408]	@ (8015968 <get_config_payload_string+0x280>)
 80157ce:	2180      	movs	r1, #128	@ 0x80
 80157d0:	4640      	mov	r0, r8
 80157d2:	f016 ff63 	bl	802c69c <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 80157d6:	9400      	str	r4, [sp, #0]
 80157d8:	4b64      	ldr	r3, [pc, #400]	@ (801596c <get_config_payload_string+0x284>)
 80157da:	4a54      	ldr	r2, [pc, #336]	@ (801592c <get_config_payload_string+0x244>)
 80157dc:	2180      	movs	r1, #128	@ 0x80
 80157de:	4638      	mov	r0, r7
 80157e0:	f016 ff5c 	bl	802c69c <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 80157e4:	f8db 3000 	ldr.w	r3, [fp]
 80157e8:	4a52      	ldr	r2, [pc, #328]	@ (8015934 <get_config_payload_string+0x24c>)
 80157ea:	6812      	ldr	r2, [r2, #0]
 80157ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80157ee:	4a52      	ldr	r2, [pc, #328]	@ (8015938 <get_config_payload_string+0x250>)
 80157f0:	9213      	str	r2, [sp, #76]	@ 0x4c
 80157f2:	4a52      	ldr	r2, [pc, #328]	@ (801593c <get_config_payload_string+0x254>)
 80157f4:	9212      	str	r2, [sp, #72]	@ 0x48
 80157f6:	4a52      	ldr	r2, [pc, #328]	@ (8015940 <get_config_payload_string+0x258>)
 80157f8:	9211      	str	r2, [sp, #68]	@ 0x44
 80157fa:	4a52      	ldr	r2, [pc, #328]	@ (8015944 <get_config_payload_string+0x25c>)
 80157fc:	9210      	str	r2, [sp, #64]	@ 0x40
 80157fe:	4a52      	ldr	r2, [pc, #328]	@ (8015948 <get_config_payload_string+0x260>)
 8015800:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015802:	930e      	str	r3, [sp, #56]	@ 0x38
 8015804:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8015808:	960c      	str	r6, [sp, #48]	@ 0x30
 801580a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801580c:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8015810:	9309      	str	r3, [sp, #36]	@ 0x24
 8015812:	f8cd a020 	str.w	sl, [sp, #32]
 8015816:	9707      	str	r7, [sp, #28]
 8015818:	f8cd 8018 	str.w	r8, [sp, #24]
 801581c:	9405      	str	r4, [sp, #20]
 801581e:	f8cd 9010 	str.w	r9, [sp, #16]
 8015822:	9403      	str	r4, [sp, #12]
 8015824:	f8cd 9008 	str.w	r9, [sp, #8]
 8015828:	9301      	str	r3, [sp, #4]
 801582a:	f8cd a000 	str.w	sl, [sp]
 801582e:	464b      	mov	r3, r9
 8015830:	4a4b      	ldr	r2, [pc, #300]	@ (8015960 <get_config_payload_string+0x278>)
 8015832:	4629      	mov	r1, r5
 8015834:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015836:	f016 ff31 	bl	802c69c <snprintf>
 801583a:	4604      	mov	r4, r0
			free(name);
 801583c:	4638      	mov	r0, r7
 801583e:	f005 fc8d 	bl	801b15c <vPortFree>
			free(com_topik);
 8015842:	4640      	mov	r0, r8
 8015844:	f005 fc8a 	bl	801b15c <vPortFree>
			return len;
 8015848:	b2e0      	uxtb	r0, r4
 801584a:	e79e      	b.n	801578a <get_config_payload_string+0xa2>
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 801584c:	4b38      	ldr	r3, [pc, #224]	@ (8015930 <get_config_payload_string+0x248>)
 801584e:	6819      	ldr	r1, [r3, #0]
 8015850:	4b3e      	ldr	r3, [pc, #248]	@ (801594c <get_config_payload_string+0x264>)
 8015852:	4a47      	ldr	r2, [pc, #284]	@ (8015970 <get_config_payload_string+0x288>)
 8015854:	4837      	ldr	r0, [pc, #220]	@ (8015934 <get_config_payload_string+0x24c>)
 8015856:	6800      	ldr	r0, [r0, #0]
 8015858:	9010      	str	r0, [sp, #64]	@ 0x40
 801585a:	4837      	ldr	r0, [pc, #220]	@ (8015938 <get_config_payload_string+0x250>)
 801585c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801585e:	4837      	ldr	r0, [pc, #220]	@ (801593c <get_config_payload_string+0x254>)
 8015860:	900e      	str	r0, [sp, #56]	@ 0x38
 8015862:	4837      	ldr	r0, [pc, #220]	@ (8015940 <get_config_payload_string+0x258>)
 8015864:	900d      	str	r0, [sp, #52]	@ 0x34
 8015866:	4837      	ldr	r0, [pc, #220]	@ (8015944 <get_config_payload_string+0x25c>)
 8015868:	900c      	str	r0, [sp, #48]	@ 0x30
 801586a:	4837      	ldr	r0, [pc, #220]	@ (8015948 <get_config_payload_string+0x260>)
 801586c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801586e:	910a      	str	r1, [sp, #40]	@ 0x28
 8015870:	9309      	str	r3, [sp, #36]	@ 0x24
 8015872:	4840      	ldr	r0, [pc, #256]	@ (8015974 <get_config_payload_string+0x28c>)
 8015874:	9008      	str	r0, [sp, #32]
 8015876:	9207      	str	r2, [sp, #28]
 8015878:	9106      	str	r1, [sp, #24]
 801587a:	9305      	str	r3, [sp, #20]
 801587c:	483e      	ldr	r0, [pc, #248]	@ (8015978 <get_config_payload_string+0x290>)
 801587e:	9004      	str	r0, [sp, #16]
 8015880:	483e      	ldr	r0, [pc, #248]	@ (801597c <get_config_payload_string+0x294>)
 8015882:	9003      	str	r0, [sp, #12]
 8015884:	9202      	str	r2, [sp, #8]
 8015886:	483e      	ldr	r0, [pc, #248]	@ (8015980 <get_config_payload_string+0x298>)
 8015888:	9001      	str	r0, [sp, #4]
 801588a:	9100      	str	r1, [sp, #0]
 801588c:	4934      	ldr	r1, [pc, #208]	@ (8015960 <get_config_payload_string+0x278>)
 801588e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015890:	f017 f86c 	bl	802c96c <sprintf>
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8015894:	4b26      	ldr	r3, [pc, #152]	@ (8015930 <get_config_payload_string+0x248>)
 8015896:	6819      	ldr	r1, [r3, #0]
 8015898:	4b2c      	ldr	r3, [pc, #176]	@ (801594c <get_config_payload_string+0x264>)
 801589a:	4a3a      	ldr	r2, [pc, #232]	@ (8015984 <get_config_payload_string+0x29c>)
 801589c:	4825      	ldr	r0, [pc, #148]	@ (8015934 <get_config_payload_string+0x24c>)
 801589e:	6800      	ldr	r0, [r0, #0]
 80158a0:	9010      	str	r0, [sp, #64]	@ 0x40
 80158a2:	4825      	ldr	r0, [pc, #148]	@ (8015938 <get_config_payload_string+0x250>)
 80158a4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80158a6:	4825      	ldr	r0, [pc, #148]	@ (801593c <get_config_payload_string+0x254>)
 80158a8:	900e      	str	r0, [sp, #56]	@ 0x38
 80158aa:	4825      	ldr	r0, [pc, #148]	@ (8015940 <get_config_payload_string+0x258>)
 80158ac:	900d      	str	r0, [sp, #52]	@ 0x34
 80158ae:	4825      	ldr	r0, [pc, #148]	@ (8015944 <get_config_payload_string+0x25c>)
 80158b0:	900c      	str	r0, [sp, #48]	@ 0x30
 80158b2:	4825      	ldr	r0, [pc, #148]	@ (8015948 <get_config_payload_string+0x260>)
 80158b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80158b6:	910a      	str	r1, [sp, #40]	@ 0x28
 80158b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80158ba:	4833      	ldr	r0, [pc, #204]	@ (8015988 <get_config_payload_string+0x2a0>)
 80158bc:	9008      	str	r0, [sp, #32]
 80158be:	9207      	str	r2, [sp, #28]
 80158c0:	9106      	str	r1, [sp, #24]
 80158c2:	9305      	str	r3, [sp, #20]
 80158c4:	4831      	ldr	r0, [pc, #196]	@ (801598c <get_config_payload_string+0x2a4>)
 80158c6:	9004      	str	r0, [sp, #16]
 80158c8:	4823      	ldr	r0, [pc, #140]	@ (8015958 <get_config_payload_string+0x270>)
 80158ca:	9003      	str	r0, [sp, #12]
 80158cc:	9202      	str	r2, [sp, #8]
 80158ce:	482c      	ldr	r0, [pc, #176]	@ (8015980 <get_config_payload_string+0x298>)
 80158d0:	9001      	str	r0, [sp, #4]
 80158d2:	9100      	str	r1, [sp, #0]
 80158d4:	4922      	ldr	r1, [pc, #136]	@ (8015960 <get_config_payload_string+0x278>)
 80158d6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80158d8:	f017 f848 	bl	802c96c <sprintf>
			break;
 80158dc:	e7da      	b.n	8015894 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 80158de:	4b14      	ldr	r3, [pc, #80]	@ (8015930 <get_config_payload_string+0x248>)
 80158e0:	6819      	ldr	r1, [r3, #0]
 80158e2:	4b1a      	ldr	r3, [pc, #104]	@ (801594c <get_config_payload_string+0x264>)
 80158e4:	4a1d      	ldr	r2, [pc, #116]	@ (801595c <get_config_payload_string+0x274>)
 80158e6:	4813      	ldr	r0, [pc, #76]	@ (8015934 <get_config_payload_string+0x24c>)
 80158e8:	6800      	ldr	r0, [r0, #0]
 80158ea:	9010      	str	r0, [sp, #64]	@ 0x40
 80158ec:	4812      	ldr	r0, [pc, #72]	@ (8015938 <get_config_payload_string+0x250>)
 80158ee:	900f      	str	r0, [sp, #60]	@ 0x3c
 80158f0:	4812      	ldr	r0, [pc, #72]	@ (801593c <get_config_payload_string+0x254>)
 80158f2:	900e      	str	r0, [sp, #56]	@ 0x38
 80158f4:	4812      	ldr	r0, [pc, #72]	@ (8015940 <get_config_payload_string+0x258>)
 80158f6:	900d      	str	r0, [sp, #52]	@ 0x34
 80158f8:	4812      	ldr	r0, [pc, #72]	@ (8015944 <get_config_payload_string+0x25c>)
 80158fa:	900c      	str	r0, [sp, #48]	@ 0x30
 80158fc:	4812      	ldr	r0, [pc, #72]	@ (8015948 <get_config_payload_string+0x260>)
 80158fe:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015900:	910a      	str	r1, [sp, #40]	@ 0x28
 8015902:	9309      	str	r3, [sp, #36]	@ 0x24
 8015904:	4822      	ldr	r0, [pc, #136]	@ (8015990 <get_config_payload_string+0x2a8>)
 8015906:	9008      	str	r0, [sp, #32]
 8015908:	9207      	str	r2, [sp, #28]
 801590a:	9106      	str	r1, [sp, #24]
 801590c:	9305      	str	r3, [sp, #20]
 801590e:	4821      	ldr	r0, [pc, #132]	@ (8015994 <get_config_payload_string+0x2ac>)
 8015910:	9004      	str	r0, [sp, #16]
 8015912:	4811      	ldr	r0, [pc, #68]	@ (8015958 <get_config_payload_string+0x270>)
 8015914:	9003      	str	r0, [sp, #12]
 8015916:	9202      	str	r2, [sp, #8]
 8015918:	4819      	ldr	r0, [pc, #100]	@ (8015980 <get_config_payload_string+0x298>)
 801591a:	9001      	str	r0, [sp, #4]
 801591c:	9100      	str	r1, [sp, #0]
 801591e:	4910      	ldr	r1, [pc, #64]	@ (8015960 <get_config_payload_string+0x278>)
 8015920:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015922:	f017 f823 	bl	802c96c <sprintf>
			break;
 8015926:	e7b5      	b.n	8015894 <get_config_payload_string+0x1ac>
 8015928:	08038884 	.word	0x08038884
 801592c:	08038890 	.word	0x08038890
 8015930:	2000292c 	.word	0x2000292c
 8015934:	20002928 	.word	0x20002928
 8015938:	080368dc 	.word	0x080368dc
 801593c:	08036e84 	.word	0x08036e84
 8015940:	08038898 	.word	0x08038898
 8015944:	08036f44 	.word	0x08036f44
 8015948:	08036f58 	.word	0x08036f58
 801594c:	08036f64 	.word	0x08036f64
 8015950:	08037490 	.word	0x08037490
 8015954:	08038824 	.word	0x08038824
 8015958:	0803ad1c 	.word	0x0803ad1c
 801595c:	08038854 	.word	0x08038854
 8015960:	08038a00 	.word	0x08038a00
 8015964:	080388a8 	.word	0x080388a8
 8015968:	080389d8 	.word	0x080389d8
 801596c:	080388b0 	.word	0x080388b0
 8015970:	0803883c 	.word	0x0803883c
 8015974:	080388c4 	.word	0x080388c4
 8015978:	080388c8 	.word	0x080388c8
 801597c:	080388d8 	.word	0x080388d8
 8015980:	080388fc 	.word	0x080388fc
 8015984:	0803884c 	.word	0x0803884c
 8015988:	08038904 	.word	0x08038904
 801598c:	08038908 	.word	0x08038908
 8015990:	08038918 	.word	0x08038918
 8015994:	0803891c 	.word	0x0803891c
 8015998:	0803857c 	.word	0x0803857c
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 801599c:	4b38      	ldr	r3, [pc, #224]	@ (8015a80 <get_config_payload_string+0x398>)
 801599e:	6819      	ldr	r1, [r3, #0]
 80159a0:	4b38      	ldr	r3, [pc, #224]	@ (8015a84 <get_config_payload_string+0x39c>)
 80159a2:	4a39      	ldr	r2, [pc, #228]	@ (8015a88 <get_config_payload_string+0x3a0>)
 80159a4:	4839      	ldr	r0, [pc, #228]	@ (8015a8c <get_config_payload_string+0x3a4>)
 80159a6:	6800      	ldr	r0, [r0, #0]
 80159a8:	9010      	str	r0, [sp, #64]	@ 0x40
 80159aa:	4839      	ldr	r0, [pc, #228]	@ (8015a90 <get_config_payload_string+0x3a8>)
 80159ac:	900f      	str	r0, [sp, #60]	@ 0x3c
 80159ae:	4839      	ldr	r0, [pc, #228]	@ (8015a94 <get_config_payload_string+0x3ac>)
 80159b0:	900e      	str	r0, [sp, #56]	@ 0x38
 80159b2:	4839      	ldr	r0, [pc, #228]	@ (8015a98 <get_config_payload_string+0x3b0>)
 80159b4:	900d      	str	r0, [sp, #52]	@ 0x34
 80159b6:	4839      	ldr	r0, [pc, #228]	@ (8015a9c <get_config_payload_string+0x3b4>)
 80159b8:	900c      	str	r0, [sp, #48]	@ 0x30
 80159ba:	4839      	ldr	r0, [pc, #228]	@ (8015aa0 <get_config_payload_string+0x3b8>)
 80159bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80159be:	910a      	str	r1, [sp, #40]	@ 0x28
 80159c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80159c2:	4838      	ldr	r0, [pc, #224]	@ (8015aa4 <get_config_payload_string+0x3bc>)
 80159c4:	9008      	str	r0, [sp, #32]
 80159c6:	9207      	str	r2, [sp, #28]
 80159c8:	9106      	str	r1, [sp, #24]
 80159ca:	9305      	str	r3, [sp, #20]
 80159cc:	4836      	ldr	r0, [pc, #216]	@ (8015aa8 <get_config_payload_string+0x3c0>)
 80159ce:	9004      	str	r0, [sp, #16]
 80159d0:	4836      	ldr	r0, [pc, #216]	@ (8015aac <get_config_payload_string+0x3c4>)
 80159d2:	9003      	str	r0, [sp, #12]
 80159d4:	9202      	str	r2, [sp, #8]
 80159d6:	4836      	ldr	r0, [pc, #216]	@ (8015ab0 <get_config_payload_string+0x3c8>)
 80159d8:	9001      	str	r0, [sp, #4]
 80159da:	9100      	str	r1, [sp, #0]
 80159dc:	4935      	ldr	r1, [pc, #212]	@ (8015ab4 <get_config_payload_string+0x3cc>)
 80159de:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80159e0:	f016 ffc4 	bl	802c96c <sprintf>
			break;
 80159e4:	e756      	b.n	8015894 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 80159e6:	4b26      	ldr	r3, [pc, #152]	@ (8015a80 <get_config_payload_string+0x398>)
 80159e8:	6819      	ldr	r1, [r3, #0]
 80159ea:	4b26      	ldr	r3, [pc, #152]	@ (8015a84 <get_config_payload_string+0x39c>)
 80159ec:	4a32      	ldr	r2, [pc, #200]	@ (8015ab8 <get_config_payload_string+0x3d0>)
 80159ee:	4827      	ldr	r0, [pc, #156]	@ (8015a8c <get_config_payload_string+0x3a4>)
 80159f0:	6800      	ldr	r0, [r0, #0]
 80159f2:	9010      	str	r0, [sp, #64]	@ 0x40
 80159f4:	4826      	ldr	r0, [pc, #152]	@ (8015a90 <get_config_payload_string+0x3a8>)
 80159f6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80159f8:	4826      	ldr	r0, [pc, #152]	@ (8015a94 <get_config_payload_string+0x3ac>)
 80159fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80159fc:	4826      	ldr	r0, [pc, #152]	@ (8015a98 <get_config_payload_string+0x3b0>)
 80159fe:	900d      	str	r0, [sp, #52]	@ 0x34
 8015a00:	4826      	ldr	r0, [pc, #152]	@ (8015a9c <get_config_payload_string+0x3b4>)
 8015a02:	900c      	str	r0, [sp, #48]	@ 0x30
 8015a04:	4826      	ldr	r0, [pc, #152]	@ (8015aa0 <get_config_payload_string+0x3b8>)
 8015a06:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015a08:	910a      	str	r1, [sp, #40]	@ 0x28
 8015a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a0c:	482b      	ldr	r0, [pc, #172]	@ (8015abc <get_config_payload_string+0x3d4>)
 8015a0e:	9008      	str	r0, [sp, #32]
 8015a10:	9207      	str	r2, [sp, #28]
 8015a12:	9106      	str	r1, [sp, #24]
 8015a14:	9305      	str	r3, [sp, #20]
 8015a16:	482a      	ldr	r0, [pc, #168]	@ (8015ac0 <get_config_payload_string+0x3d8>)
 8015a18:	9004      	str	r0, [sp, #16]
 8015a1a:	4824      	ldr	r0, [pc, #144]	@ (8015aac <get_config_payload_string+0x3c4>)
 8015a1c:	9003      	str	r0, [sp, #12]
 8015a1e:	9202      	str	r2, [sp, #8]
 8015a20:	4823      	ldr	r0, [pc, #140]	@ (8015ab0 <get_config_payload_string+0x3c8>)
 8015a22:	9001      	str	r0, [sp, #4]
 8015a24:	9100      	str	r1, [sp, #0]
 8015a26:	4923      	ldr	r1, [pc, #140]	@ (8015ab4 <get_config_payload_string+0x3cc>)
 8015a28:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015a2a:	f016 ff9f 	bl	802c96c <sprintf>
			break;
 8015a2e:	e731      	b.n	8015894 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8015a30:	4b13      	ldr	r3, [pc, #76]	@ (8015a80 <get_config_payload_string+0x398>)
 8015a32:	6819      	ldr	r1, [r3, #0]
 8015a34:	4b13      	ldr	r3, [pc, #76]	@ (8015a84 <get_config_payload_string+0x39c>)
 8015a36:	4a23      	ldr	r2, [pc, #140]	@ (8015ac4 <get_config_payload_string+0x3dc>)
 8015a38:	4814      	ldr	r0, [pc, #80]	@ (8015a8c <get_config_payload_string+0x3a4>)
 8015a3a:	6800      	ldr	r0, [r0, #0]
 8015a3c:	9010      	str	r0, [sp, #64]	@ 0x40
 8015a3e:	4814      	ldr	r0, [pc, #80]	@ (8015a90 <get_config_payload_string+0x3a8>)
 8015a40:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015a42:	4814      	ldr	r0, [pc, #80]	@ (8015a94 <get_config_payload_string+0x3ac>)
 8015a44:	900e      	str	r0, [sp, #56]	@ 0x38
 8015a46:	4814      	ldr	r0, [pc, #80]	@ (8015a98 <get_config_payload_string+0x3b0>)
 8015a48:	900d      	str	r0, [sp, #52]	@ 0x34
 8015a4a:	4814      	ldr	r0, [pc, #80]	@ (8015a9c <get_config_payload_string+0x3b4>)
 8015a4c:	900c      	str	r0, [sp, #48]	@ 0x30
 8015a4e:	4814      	ldr	r0, [pc, #80]	@ (8015aa0 <get_config_payload_string+0x3b8>)
 8015a50:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015a52:	910a      	str	r1, [sp, #40]	@ 0x28
 8015a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a56:	481c      	ldr	r0, [pc, #112]	@ (8015ac8 <get_config_payload_string+0x3e0>)
 8015a58:	9008      	str	r0, [sp, #32]
 8015a5a:	9207      	str	r2, [sp, #28]
 8015a5c:	9106      	str	r1, [sp, #24]
 8015a5e:	9305      	str	r3, [sp, #20]
 8015a60:	481a      	ldr	r0, [pc, #104]	@ (8015acc <get_config_payload_string+0x3e4>)
 8015a62:	9004      	str	r0, [sp, #16]
 8015a64:	4811      	ldr	r0, [pc, #68]	@ (8015aac <get_config_payload_string+0x3c4>)
 8015a66:	9003      	str	r0, [sp, #12]
 8015a68:	9202      	str	r2, [sp, #8]
 8015a6a:	4811      	ldr	r0, [pc, #68]	@ (8015ab0 <get_config_payload_string+0x3c8>)
 8015a6c:	9001      	str	r0, [sp, #4]
 8015a6e:	9100      	str	r1, [sp, #0]
 8015a70:	4910      	ldr	r1, [pc, #64]	@ (8015ab4 <get_config_payload_string+0x3cc>)
 8015a72:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015a74:	f016 ff7a 	bl	802c96c <sprintf>
			break;
 8015a78:	e70c      	b.n	8015894 <get_config_payload_string+0x1ac>
	switch (payload_type) {
 8015a7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015a7e:	e684      	b.n	801578a <get_config_payload_string+0xa2>
 8015a80:	2000292c 	.word	0x2000292c
 8015a84:	08036f64 	.word	0x08036f64
 8015a88:	0803885c 	.word	0x0803885c
 8015a8c:	20002928 	.word	0x20002928
 8015a90:	080368dc 	.word	0x080368dc
 8015a94:	08036e84 	.word	0x08036e84
 8015a98:	08038898 	.word	0x08038898
 8015a9c:	08036f44 	.word	0x08036f44
 8015aa0:	08036f58 	.word	0x08036f58
 8015aa4:	08038940 	.word	0x08038940
 8015aa8:	08038944 	.word	0x08038944
 8015aac:	0803ad1c 	.word	0x0803ad1c
 8015ab0:	080388fc 	.word	0x080388fc
 8015ab4:	08038a00 	.word	0x08038a00
 8015ab8:	0803886c 	.word	0x0803886c
 8015abc:	08038964 	.word	0x08038964
 8015ac0:	08038968 	.word	0x08038968
 8015ac4:	0803887c 	.word	0x0803887c
 8015ac8:	08038994 	.word	0x08038994
 8015acc:	08038998 	.word	0x08038998

08015ad0 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8015ad0:	b530      	push	{r4, r5, lr}
 8015ad2:	b083      	sub	sp, #12
 8015ad4:	461c      	mov	r4, r3
 8015ad6:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 8015ada:	2a01      	cmp	r2, #1
 8015adc:	d00b      	beq.n	8015af6 <gen_bin_sensor_status_payload_JSON+0x26>
 8015ade:	2a02      	cmp	r2, #2
 8015ae0:	d10b      	bne.n	8015afa <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 8015ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8015b0c <gen_bin_sensor_status_payload_JSON+0x3c>)
			break;
		default:
			break;
	}

	if (state){
 8015ae4:	b15d      	cbz	r5, 8015afe <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 8015ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8015b10 <gen_bin_sensor_status_payload_JSON+0x40>)
 8015ae8:	9201      	str	r2, [sp, #4]
 8015aea:	9400      	str	r4, [sp, #0]
 8015aec:	4a09      	ldr	r2, [pc, #36]	@ (8015b14 <gen_bin_sensor_status_payload_JSON+0x44>)
 8015aee:	f016 fdd5 	bl	802c69c <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 8015af2:	b003      	add	sp, #12
 8015af4:	bd30      	pop	{r4, r5, pc}
			sens_name = (char *)component_input;
 8015af6:	4b08      	ldr	r3, [pc, #32]	@ (8015b18 <gen_bin_sensor_status_payload_JSON+0x48>)
 8015af8:	e7f4      	b.n	8015ae4 <gen_bin_sensor_status_payload_JSON+0x14>
	switch (sensor_type) {
 8015afa:	2300      	movs	r3, #0
 8015afc:	e7f2      	b.n	8015ae4 <gen_bin_sensor_status_payload_JSON+0x14>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8015afe:	4a07      	ldr	r2, [pc, #28]	@ (8015b1c <gen_bin_sensor_status_payload_JSON+0x4c>)
 8015b00:	9201      	str	r2, [sp, #4]
 8015b02:	9400      	str	r4, [sp, #0]
 8015b04:	4a03      	ldr	r2, [pc, #12]	@ (8015b14 <gen_bin_sensor_status_payload_JSON+0x44>)
 8015b06:	f016 fdc9 	bl	802c69c <snprintf>
 8015b0a:	e7f2      	b.n	8015af2 <gen_bin_sensor_status_payload_JSON+0x22>
 8015b0c:	0803857c 	.word	0x0803857c
 8015b10:	0803864c 	.word	0x0803864c
 8015b14:	080389c8 	.word	0x080389c8
 8015b18:	08038824 	.word	0x08038824
 8015b1c:	08038664 	.word	0x08038664

08015b20 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8015b20:	b500      	push	{lr}
 8015b22:	b085      	sub	sp, #20

	switch(sensor_type){

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8015b24:	9302      	str	r3, [sp, #8]
 8015b26:	4b06      	ldr	r3, [pc, #24]	@ (8015b40 <generate_comand_topik_for_subscrabe+0x20>)
 8015b28:	9301      	str	r3, [sp, #4]
 8015b2a:	4b06      	ldr	r3, [pc, #24]	@ (8015b44 <generate_comand_topik_for_subscrabe+0x24>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	9300      	str	r3, [sp, #0]
 8015b30:	4b05      	ldr	r3, [pc, #20]	@ (8015b48 <generate_comand_topik_for_subscrabe+0x28>)
 8015b32:	4a06      	ldr	r2, [pc, #24]	@ (8015b4c <generate_comand_topik_for_subscrabe+0x2c>)
 8015b34:	f016 fdb2 	bl	802c69c <snprintf>
			break;
	}
}
 8015b38:	b005      	add	sp, #20
 8015b3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b3e:	bf00      	nop
 8015b40:	0803857c 	.word	0x0803857c
 8015b44:	2000292c 	.word	0x2000292c
 8015b48:	08036f64 	.word	0x08036f64
 8015b4c:	080389a4 	.word	0x080389a4

08015b50 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8015b50:	b500      	push	{lr}
 8015b52:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 8015b54:	f04f 0c00 	mov.w	ip, #0
 8015b58:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 8015b5c:	2a01      	cmp	r2, #1
 8015b5e:	d006      	beq.n	8015b6e <generate_status_topik+0x1e>
 8015b60:	2a02      	cmp	r2, #2
 8015b62:	d00f      	beq.n	8015b84 <generate_status_topik+0x34>
 8015b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 8015b68:	b005      	add	sp, #20
 8015b6a:	f85d fb04 	ldr.w	pc, [sp], #4
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8015b6e:	9302      	str	r3, [sp, #8]
 8015b70:	4b0a      	ldr	r3, [pc, #40]	@ (8015b9c <generate_status_topik+0x4c>)
 8015b72:	9301      	str	r3, [sp, #4]
 8015b74:	4b0a      	ldr	r3, [pc, #40]	@ (8015ba0 <generate_status_topik+0x50>)
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	9300      	str	r3, [sp, #0]
 8015b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8015ba4 <generate_status_topik+0x54>)
 8015b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8015ba8 <generate_status_topik+0x58>)
 8015b7e:	f016 fd8d 	bl	802c69c <snprintf>
 8015b82:	e7f1      	b.n	8015b68 <generate_status_topik+0x18>
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8015b84:	9302      	str	r3, [sp, #8]
 8015b86:	4b09      	ldr	r3, [pc, #36]	@ (8015bac <generate_status_topik+0x5c>)
 8015b88:	9301      	str	r3, [sp, #4]
 8015b8a:	4b05      	ldr	r3, [pc, #20]	@ (8015ba0 <generate_status_topik+0x50>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	9300      	str	r3, [sp, #0]
 8015b90:	4b04      	ldr	r3, [pc, #16]	@ (8015ba4 <generate_status_topik+0x54>)
 8015b92:	4a05      	ldr	r2, [pc, #20]	@ (8015ba8 <generate_status_topik+0x58>)
 8015b94:	f016 fd82 	bl	802c69c <snprintf>
 8015b98:	e7e6      	b.n	8015b68 <generate_status_topik+0x18>
 8015b9a:	bf00      	nop
 8015b9c:	08038824 	.word	0x08038824
 8015ba0:	2000292c 	.word	0x2000292c
 8015ba4:	08036f64 	.word	0x08036f64
 8015ba8:	080389b4 	.word	0x080389b4
 8015bac:	0803857c 	.word	0x0803857c

08015bb0 <timer_fn>:
  }
  (void) c;
}


void timer_fn(void *arg) {
 8015bb0:	b508      	push	{r3, lr}
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015bb2:	4b08      	ldr	r3, [pc, #32]	@ (8015bd4 <timer_fn+0x24>)
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	b12b      	cbz	r3, 8015bc4 <timer_fn+0x14>
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8015bb8:	4b06      	ldr	r3, [pc, #24]	@ (8015bd4 <timer_fn+0x24>)
 8015bba:	6818      	ldr	r0, [r3, #0]
 8015bbc:	b108      	cbz	r0, 8015bc2 <timer_fn+0x12>
 8015bbe:	f014 fbab 	bl	802a318 <mg_sntp_request>
}
 8015bc2:	bd08      	pop	{r3, pc}
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015bc4:	4a04      	ldr	r2, [pc, #16]	@ (8015bd8 <timer_fn+0x28>)
 8015bc6:	4619      	mov	r1, r3
 8015bc8:	f014 fc78 	bl	802a4bc <mg_sntp_connect>
 8015bcc:	4b01      	ldr	r3, [pc, #4]	@ (8015bd4 <timer_fn+0x24>)
 8015bce:	6018      	str	r0, [r3, #0]
 8015bd0:	e7f2      	b.n	8015bb8 <timer_fn+0x8>
 8015bd2:	bf00      	nop
 8015bd4:	20002930 	.word	0x20002930
 8015bd8:	08015bdd 	.word	0x08015bdd

08015bdc <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 8015bdc:	b570      	push	{r4, r5, r6, lr}
  if (ev == MG_EV_SNTP_TIME) {
 8015bde:	2912      	cmp	r1, #18
 8015be0:	d002      	beq.n	8015be8 <sfn+0xc>
  } else if (ev == MG_EV_CLOSE) {
 8015be2:	2909      	cmp	r1, #9
 8015be4:	d046      	beq.n	8015c74 <sfn+0x98>
}
 8015be6:	bd70      	pop	{r4, r5, r6, pc}
 8015be8:	4614      	mov	r4, r2
	  logging(L_INFO, "Response from NTP server received");
 8015bea:	4926      	ldr	r1, [pc, #152]	@ (8015c84 <sfn+0xa8>)
 8015bec:	2001      	movs	r0, #1
 8015bee:	f7fc fafb 	bl	80121e8 <logging>
    uint64_t curtime = mg_now();
 8015bf2:	f014 facd 	bl	802a190 <mg_now>
 8015bf6:	4606      	mov	r6, r0
 8015bf8:	460d      	mov	r5, r1
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8015bfa:	4b23      	ldr	r3, [pc, #140]	@ (8015c88 <sfn+0xac>)
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	2b01      	cmp	r3, #1
 8015c00:	dc20      	bgt.n	8015c44 <sfn+0x68>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 8015c02:	4632      	mov	r2, r6
 8015c04:	462b      	mov	r3, r5
 8015c06:	4921      	ldr	r1, [pc, #132]	@ (8015c8c <sfn+0xb0>)
 8015c08:	2001      	movs	r0, #1
 8015c0a:	f7fc faed 	bl	80121e8 <logging>
      uint64_t t = *(uint64_t *) ev_data;
 8015c0e:	6825      	ldr	r5, [r4, #0]
 8015c10:	6864      	ldr	r4, [r4, #4]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 8015c12:	f010 fe6b 	bl	80268ec <mg_millis>
 8015c16:	1a28      	subs	r0, r5, r0
 8015c18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015c1c:	f04f 0300 	mov.w	r3, #0
 8015c20:	eb64 0101 	sbc.w	r1, r4, r1
 8015c24:	f7fb f898 	bl	8010d58 <__aeabi_uldivmod>
 8015c28:	4b19      	ldr	r3, [pc, #100]	@ (8015c90 <sfn+0xb4>)
 8015c2a:	e9c3 0100 	strd	r0, r1, [r3]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015c2e:	4b16      	ldr	r3, [pc, #88]	@ (8015c88 <sfn+0xac>)
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	2b01      	cmp	r3, #1
 8015c34:	dc12      	bgt.n	8015c5c <sfn+0x80>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 8015c36:	462a      	mov	r2, r5
 8015c38:	4623      	mov	r3, r4
 8015c3a:	4916      	ldr	r1, [pc, #88]	@ (8015c94 <sfn+0xb8>)
 8015c3c:	2001      	movs	r0, #1
 8015c3e:	f7fc fad3 	bl	80121e8 <logging>
 8015c42:	e7d0      	b.n	8015be6 <sfn+0xa>
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8015c44:	4b14      	ldr	r3, [pc, #80]	@ (8015c98 <sfn+0xbc>)
 8015c46:	221b      	movs	r2, #27
 8015c48:	4914      	ldr	r1, [pc, #80]	@ (8015c9c <sfn+0xc0>)
 8015c4a:	2002      	movs	r0, #2
 8015c4c:	f010 fe54 	bl	80268f8 <mg_log_prefix>
 8015c50:	4632      	mov	r2, r6
 8015c52:	462b      	mov	r3, r5
 8015c54:	480d      	ldr	r0, [pc, #52]	@ (8015c8c <sfn+0xb0>)
 8015c56:	f00e fcfd 	bl	8024654 <mg_log>
 8015c5a:	e7d2      	b.n	8015c02 <sfn+0x26>
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8015c98 <sfn+0xbc>)
 8015c5e:	2221      	movs	r2, #33	@ 0x21
 8015c60:	490e      	ldr	r1, [pc, #56]	@ (8015c9c <sfn+0xc0>)
 8015c62:	2002      	movs	r0, #2
 8015c64:	f010 fe48 	bl	80268f8 <mg_log_prefix>
 8015c68:	462a      	mov	r2, r5
 8015c6a:	4623      	mov	r3, r4
 8015c6c:	480c      	ldr	r0, [pc, #48]	@ (8015ca0 <sfn+0xc4>)
 8015c6e:	f00e fcf1 	bl	8024654 <mg_log>
 8015c72:	e7e0      	b.n	8015c36 <sfn+0x5a>
	  logging(L_INFO, "NTP connection is closed");
 8015c74:	490b      	ldr	r1, [pc, #44]	@ (8015ca4 <sfn+0xc8>)
 8015c76:	2001      	movs	r0, #1
 8015c78:	f7fc fab6 	bl	80121e8 <logging>
    s_sntp_conn = NULL;
 8015c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8015ca8 <sfn+0xcc>)
 8015c7e:	2200      	movs	r2, #0
 8015c80:	601a      	str	r2, [r3, #0]
}
 8015c82:	e7b0      	b.n	8015be6 <sfn+0xa>
 8015c84:	08038b80 	.word	0x08038b80
 8015c88:	2000012c 	.word	0x2000012c
 8015c8c:	08038bc4 	.word	0x08038bc4
 8015c90:	20002938 	.word	0x20002938
 8015c94:	08038c1c 	.word	0x08038c1c
 8015c98:	08038c78 	.word	0x08038c78
 8015c9c:	08038ba4 	.word	0x08038ba4
 8015ca0:	08038bf8 	.word	0x08038bf8
 8015ca4:	08038c40 	.word	0x08038c40
 8015ca8:	20002930 	.word	0x20002930

08015cac <start_sntp>:

void start_sntp(void *arg){
 8015cac:	b530      	push	{r4, r5, lr}
 8015cae:	b085      	sub	sp, #20
 8015cb0:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 8015cb2:	490d      	ldr	r1, [pc, #52]	@ (8015ce8 <start_sntp+0x3c>)
 8015cb4:	2001      	movs	r0, #1
 8015cb6:	f7fc fa97 	bl	80121e8 <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 8015cba:	9402      	str	r4, [sp, #8]
 8015cbc:	4d0b      	ldr	r5, [pc, #44]	@ (8015cec <start_sntp+0x40>)
 8015cbe:	9501      	str	r5, [sp, #4]
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	9300      	str	r3, [sp, #0]
 8015cc4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8015cc8:	2300      	movs	r3, #0
 8015cca:	4620      	mov	r0, r4
 8015ccc:	f010 f882 	bl	8025dd4 <mg_timer_add>
	mg_timer_add(mgr, 4000000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every ~ 60 minutes
 8015cd0:	9402      	str	r4, [sp, #8]
 8015cd2:	9501      	str	r5, [sp, #4]
 8015cd4:	2301      	movs	r3, #1
 8015cd6:	9300      	str	r3, [sp, #0]
 8015cd8:	4a05      	ldr	r2, [pc, #20]	@ (8015cf0 <start_sntp+0x44>)
 8015cda:	2300      	movs	r3, #0
 8015cdc:	4620      	mov	r0, r4
 8015cde:	f010 f879 	bl	8025dd4 <mg_timer_add>

}
 8015ce2:	b005      	add	sp, #20
 8015ce4:	bd30      	pop	{r4, r5, pc}
 8015ce6:	bf00      	nop
 8015ce8:	08038c5c 	.word	0x08038c5c
 8015cec:	08015bb1 	.word	0x08015bb1
 8015cf0:	003d0900 	.word	0x003d0900

08015cf4 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8015cf4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8015cf6:	fb01 f400 	mul.w	r4, r1, r0
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	f005 f9ac 	bl	801b058 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8015d00:	4605      	mov	r5, r0
 8015d02:	b118      	cbz	r0, 8015d0c <my_calloc+0x18>
 8015d04:	4622      	mov	r2, r4
 8015d06:	2100      	movs	r1, #0
 8015d08:	f017 f9f2 	bl	802d0f0 <memset>
}
 8015d0c:	4628      	mov	r0, r5
 8015d0e:	bd38      	pop	{r3, r4, r5, pc}

08015d10 <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015d10:	b570      	push	{r4, r5, r6, lr}
 8015d12:	b088      	sub	sp, #32
 8015d14:	4605      	mov	r5, r0
 8015d16:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 8015d18:	4917      	ldr	r1, [pc, #92]	@ (8015d78 <dev_description_handler+0x68>)
 8015d1a:	2000      	movs	r0, #0
 8015d1c:	f7fc fa64 	bl	80121e8 <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8015d20:	ae06      	add	r6, sp, #24
 8015d22:	4916      	ldr	r1, [pc, #88]	@ (8015d7c <dev_description_handler+0x6c>)
 8015d24:	4630      	mov	r0, r6
 8015d26:	f00e fe73 	bl	8024a10 <mg_str_s>
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	9300      	str	r3, [sp, #0]
 8015d2e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015d36:	f00f f88d 	bl	8024e54 <mg_match>
 8015d3a:	b1a8      	cbz	r0, 8015d68 <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 8015d3c:	4b10      	ldr	r3, [pc, #64]	@ (8015d80 <dev_description_handler+0x70>)
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	9305      	str	r3, [sp, #20]
 8015d42:	4b10      	ldr	r3, [pc, #64]	@ (8015d84 <dev_description_handler+0x74>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	9304      	str	r3, [sp, #16]
 8015d48:	4b0f      	ldr	r3, [pc, #60]	@ (8015d88 <dev_description_handler+0x78>)
 8015d4a:	9303      	str	r3, [sp, #12]
 8015d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8015d8c <dev_description_handler+0x7c>)
 8015d4e:	9302      	str	r3, [sp, #8]
 8015d50:	4b0f      	ldr	r3, [pc, #60]	@ (8015d90 <dev_description_handler+0x80>)
 8015d52:	9301      	str	r3, [sp, #4]
 8015d54:	4b0f      	ldr	r3, [pc, #60]	@ (8015d94 <dev_description_handler+0x84>)
 8015d56:	9300      	str	r3, [sp, #0]
 8015d58:	4b0f      	ldr	r3, [pc, #60]	@ (8015d98 <dev_description_handler+0x88>)
 8015d5a:	4a10      	ldr	r2, [pc, #64]	@ (8015d9c <dev_description_handler+0x8c>)
 8015d5c:	21c8      	movs	r1, #200	@ 0xc8
 8015d5e:	4628      	mov	r0, r5
 8015d60:	f00e fccc 	bl	80246fc <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 8015d64:	b008      	add	sp, #32
 8015d66:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 8015d68:	4b0d      	ldr	r3, [pc, #52]	@ (8015da0 <dev_description_handler+0x90>)
 8015d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8015d9c <dev_description_handler+0x8c>)
 8015d6c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8015d70:	4628      	mov	r0, r5
 8015d72:	f00e fcc3 	bl	80246fc <mg_http_reply>
}
 8015d76:	e7f5      	b.n	8015d64 <dev_description_handler+0x54>
 8015d78:	08038c7c 	.word	0x08038c7c
 8015d7c:	08036dd8 	.word	0x08036dd8
 8015d80:	2000294c 	.word	0x2000294c
 8015d84:	20002954 	.word	0x20002954
 8015d88:	080368dc 	.word	0x080368dc
 8015d8c:	08036f44 	.word	0x08036f44
 8015d90:	08038898 	.word	0x08038898
 8015d94:	08036f58 	.word	0x08036f58
 8015d98:	08038f84 	.word	0x08038f84
 8015d9c:	08037490 	.word	0x08037490
 8015da0:	08037b24 	.word	0x08037b24

08015da4 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015da4:	b510      	push	{r4, lr}
 8015da6:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 8015da8:	4905      	ldr	r1, [pc, #20]	@ (8015dc0 <dev_404_handler+0x1c>)
 8015daa:	2000      	movs	r0, #0
 8015dac:	f7fc fa1c 	bl	80121e8 <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 8015db0:	4b04      	ldr	r3, [pc, #16]	@ (8015dc4 <dev_404_handler+0x20>)
 8015db2:	4a05      	ldr	r2, [pc, #20]	@ (8015dc8 <dev_404_handler+0x24>)
 8015db4:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8015db8:	4620      	mov	r0, r4
 8015dba:	f00e fc9f 	bl	80246fc <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 8015dbe:	bd10      	pop	{r4, pc}
 8015dc0:	08038c9c 	.word	0x08038c9c
 8015dc4:	08038cb4 	.word	0x08038cb4
 8015dc8:	08037490 	.word	0x08037490

08015dcc <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 8015dcc:	290b      	cmp	r1, #11
 8015dce:	d000      	beq.n	8015dd2 <ssdp_web_handler+0x6>
 8015dd0:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 8015dd2:	b570      	push	{r4, r5, r6, lr}
 8015dd4:	b086      	sub	sp, #24
 8015dd6:	4605      	mov	r5, r0
 8015dd8:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 8015dda:	4917      	ldr	r1, [pc, #92]	@ (8015e38 <ssdp_web_handler+0x6c>)
 8015ddc:	2000      	movs	r0, #0
 8015dde:	f7fc fa03 	bl	80121e8 <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 8015de2:	ae02      	add	r6, sp, #8
 8015de4:	4915      	ldr	r1, [pc, #84]	@ (8015e3c <ssdp_web_handler+0x70>)
 8015de6:	4630      	mov	r0, r6
 8015de8:	f00e fe12 	bl	8024a10 <mg_str_s>
 8015dec:	2300      	movs	r3, #0
 8015dee:	9300      	str	r3, [sp, #0]
 8015df0:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015df4:	f104 0108 	add.w	r1, r4, #8
 8015df8:	c903      	ldmia	r1, {r0, r1}
 8015dfa:	f00f f82b 	bl	8024e54 <mg_match>
 8015dfe:	b128      	cbz	r0, 8015e0c <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 8015e00:	4621      	mov	r1, r4
 8015e02:	4628      	mov	r0, r5
 8015e04:	f7ff ff84 	bl	8015d10 <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 8015e08:	b006      	add	sp, #24
 8015e0a:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8015e0c:	ae04      	add	r6, sp, #16
 8015e0e:	490c      	ldr	r1, [pc, #48]	@ (8015e40 <ssdp_web_handler+0x74>)
 8015e10:	4630      	mov	r0, r6
 8015e12:	f00e fdfd 	bl	8024a10 <mg_str_s>
 8015e16:	2300      	movs	r3, #0
 8015e18:	9300      	str	r3, [sp, #0]
 8015e1a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015e1e:	f104 0108 	add.w	r1, r4, #8
 8015e22:	c903      	ldmia	r1, {r0, r1}
 8015e24:	f00f f816 	bl	8024e54 <mg_match>
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	d0ed      	beq.n	8015e08 <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 8015e2c:	4621      	mov	r1, r4
 8015e2e:	4628      	mov	r0, r5
 8015e30:	f7ff ffb8 	bl	8015da4 <dev_404_handler>
}
 8015e34:	e7e8      	b.n	8015e08 <ssdp_web_handler+0x3c>
 8015e36:	bf00      	nop
 8015e38:	08038ce0 	.word	0x08038ce0
 8015e3c:	08038d08 	.word	0x08038d08
 8015e40:	08038d20 	.word	0x08038d20

08015e44 <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 8015e44:	b510      	push	{r4, lr}
 8015e46:	b084      	sub	sp, #16
 8015e48:	4602      	mov	r2, r0
 8015e4a:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 8015e4c:	0e14      	lsrs	r4, r2, #24
 8015e4e:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 8015e52:	0c11      	lsrs	r1, r2, #16
 8015e54:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 8015e58:	0a13      	lsrs	r3, r2, #8
 8015e5a:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 8015e5e:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 8015e62:	9401      	str	r4, [sp, #4]
 8015e64:	b2c9      	uxtb	r1, r1
 8015e66:	9100      	str	r1, [sp, #0]
 8015e68:	b2db      	uxtb	r3, r3
 8015e6a:	b2d2      	uxtb	r2, r2
 8015e6c:	4902      	ldr	r1, [pc, #8]	@ (8015e78 <ip_to_string+0x34>)
 8015e6e:	f016 fd7d 	bl	802c96c <sprintf>
}
 8015e72:	b004      	add	sp, #16
 8015e74:	bd10      	pop	{r4, pc}
 8015e76:	bf00      	nop
 8015e78:	08038d24 	.word	0x08038d24

08015e7c <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 8015e7c:	b570      	push	{r4, r5, r6, lr}
 8015e7e:	b084      	sub	sp, #16
 8015e80:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 8015e82:	491e      	ldr	r1, [pc, #120]	@ (8015efc <send_ssdp_notify+0x80>)
 8015e84:	2000      	movs	r0, #0
 8015e86:	f7fc f9af 	bl	80121e8 <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 8015e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8015f00 <send_ssdp_notify+0x84>)
 8015e8c:	6818      	ldr	r0, [r3, #0]
 8015e8e:	f7fa fa07 	bl	80102a0 <strlen>
 8015e92:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 8015e94:	2101      	movs	r1, #1
 8015e96:	f200 1039 	addw	r0, r0, #313	@ 0x139
 8015e9a:	f7ff ff2b 	bl	8015cf4 <my_calloc>
 8015e9e:	4a19      	ldr	r2, [pc, #100]	@ (8015f04 <send_ssdp_notify+0x88>)
 8015ea0:	6010      	str	r0, [r2, #0]
	if (!buff) {
 8015ea2:	b330      	cbz	r0, 8015ef2 <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 8015ea4:	4b18      	ldr	r3, [pc, #96]	@ (8015f08 <send_ssdp_notify+0x8c>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	4d18      	ldr	r5, [pc, #96]	@ (8015f0c <send_ssdp_notify+0x90>)
 8015eaa:	6829      	ldr	r1, [r5, #0]
 8015eac:	6898      	ldr	r0, [r3, #8]
 8015eae:	f7ff ffc9 	bl	8015e44 <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 8015eb2:	4b13      	ldr	r3, [pc, #76]	@ (8015f00 <send_ssdp_notify+0x84>)
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	9302      	str	r3, [sp, #8]
 8015eb8:	4b15      	ldr	r3, [pc, #84]	@ (8015f10 <send_ssdp_notify+0x94>)
 8015eba:	9301      	str	r3, [sp, #4]
 8015ebc:	682b      	ldr	r3, [r5, #0]
 8015ebe:	9300      	str	r3, [sp, #0]
 8015ec0:	4b14      	ldr	r3, [pc, #80]	@ (8015f14 <send_ssdp_notify+0x98>)
 8015ec2:	4a15      	ldr	r2, [pc, #84]	@ (8015f18 <send_ssdp_notify+0x9c>)
 8015ec4:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 8015ec8:	480e      	ldr	r0, [pc, #56]	@ (8015f04 <send_ssdp_notify+0x88>)
 8015eca:	6800      	ldr	r0, [r0, #0]
 8015ecc:	f016 fbe6 	bl	802c69c <snprintf>
    if (udp_conn != NULL) {
 8015ed0:	b14e      	cbz	r6, 8015ee6 <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 8015ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8015f04 <send_ssdp_notify+0x88>)
 8015ed4:	681c      	ldr	r4, [r3, #0]
 8015ed6:	4620      	mov	r0, r4
 8015ed8:	f7fa f9e2 	bl	80102a0 <strlen>
 8015edc:	4602      	mov	r2, r0
 8015ede:	4621      	mov	r1, r4
 8015ee0:	4630      	mov	r0, r6
 8015ee2:	f011 fdbd 	bl	8027a60 <mg_send>
    free(buff);
 8015ee6:	4b07      	ldr	r3, [pc, #28]	@ (8015f04 <send_ssdp_notify+0x88>)
 8015ee8:	6818      	ldr	r0, [r3, #0]
 8015eea:	f005 f937 	bl	801b15c <vPortFree>
}
 8015eee:	b004      	add	sp, #16
 8015ef0:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 8015ef2:	490a      	ldr	r1, [pc, #40]	@ (8015f1c <send_ssdp_notify+0xa0>)
 8015ef4:	2003      	movs	r0, #3
 8015ef6:	f7fc f977 	bl	80121e8 <logging>
		return; //TODO add log
 8015efa:	e7f8      	b.n	8015eee <send_ssdp_notify+0x72>
 8015efc:	08038d30 	.word	0x08038d30
 8015f00:	20002954 	.word	0x20002954
 8015f04:	20002950 	.word	0x20002950
 8015f08:	20002944 	.word	0x20002944
 8015f0c:	2000294c 	.word	0x2000294c
 8015f10:	08038d80 	.word	0x08038d80
 8015f14:	08038d78 	.word	0x08038d78
 8015f18:	08038e8c 	.word	0x08038e8c
 8015f1c:	08038d48 	.word	0x08038d48

08015f20 <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 8015f20:	2907      	cmp	r1, #7
 8015f22:	d000      	beq.n	8015f26 <ssdp_listener_handler+0x6>
 8015f24:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 8015f26:	b570      	push	{r4, r5, r6, lr}
 8015f28:	b088      	sub	sp, #32
 8015f2a:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 8015f2c:	491a      	ldr	r1, [pc, #104]	@ (8015f98 <ssdp_listener_handler+0x78>)
 8015f2e:	2000      	movs	r0, #0
 8015f30:	f7fc f95a 	bl	80121e8 <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 8015f34:	4b19      	ldr	r3, [pc, #100]	@ (8015f9c <ssdp_listener_handler+0x7c>)
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	ad02      	add	r5, sp, #8
 8015f3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015f3c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015f3e:	4628      	mov	r0, r5
 8015f40:	f00e fd72 	bl	8024a28 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015f44:	ae04      	add	r6, sp, #16
 8015f46:	4916      	ldr	r1, [pc, #88]	@ (8015fa0 <ssdp_listener_handler+0x80>)
 8015f48:	4630      	mov	r0, r6
 8015f4a:	f00e fd61 	bl	8024a10 <mg_str_s>
 8015f4e:	2300      	movs	r3, #0
 8015f50:	9300      	str	r3, [sp, #0]
 8015f52:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015f56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015f5a:	f00e ff7b 	bl	8024e54 <mg_match>
 8015f5e:	b918      	cbnz	r0, 8015f68 <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 8015f60:	2300      	movs	r3, #0
 8015f62:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 8015f64:	b008      	add	sp, #32
 8015f66:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015f68:	ad06      	add	r5, sp, #24
 8015f6a:	490e      	ldr	r1, [pc, #56]	@ (8015fa4 <ssdp_listener_handler+0x84>)
 8015f6c:	4628      	mov	r0, r5
 8015f6e:	f00e fd4f 	bl	8024a10 <mg_str_s>
 8015f72:	2300      	movs	r3, #0
 8015f74:	9300      	str	r3, [sp, #0]
 8015f76:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015f7a:	a902      	add	r1, sp, #8
 8015f7c:	c903      	ldmia	r1, {r0, r1}
 8015f7e:	f00e ff69 	bl	8024e54 <mg_match>
 8015f82:	2800      	cmp	r0, #0
 8015f84:	d0ec      	beq.n	8015f60 <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 8015f86:	4908      	ldr	r1, [pc, #32]	@ (8015fa8 <ssdp_listener_handler+0x88>)
 8015f88:	2000      	movs	r0, #0
 8015f8a:	f7fc f92d 	bl	80121e8 <logging>
			send_ssdp_notify(udp_listen_conn);
 8015f8e:	4b03      	ldr	r3, [pc, #12]	@ (8015f9c <ssdp_listener_handler+0x7c>)
 8015f90:	6818      	ldr	r0, [r3, #0]
 8015f92:	f7ff ff73 	bl	8015e7c <send_ssdp_notify>
 8015f96:	e7e3      	b.n	8015f60 <ssdp_listener_handler+0x40>
 8015f98:	08038d88 	.word	0x08038d88
 8015f9c:	20002940 	.word	0x20002940
 8015fa0:	08038dbc 	.word	0x08038dbc
 8015fa4:	08038dc8 	.word	0x08038dc8
 8015fa8:	08038dd8 	.word	0x08038dd8

08015fac <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 8015fac:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 8015fae:	490c      	ldr	r1, [pc, #48]	@ (8015fe0 <ssdp_timer_handler+0x34>)
 8015fb0:	2000      	movs	r0, #0
 8015fb2:	f7fc f919 	bl	80121e8 <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	461a      	mov	r2, r3
 8015fba:	490a      	ldr	r1, [pc, #40]	@ (8015fe4 <ssdp_timer_handler+0x38>)
 8015fbc:	480a      	ldr	r0, [pc, #40]	@ (8015fe8 <ssdp_timer_handler+0x3c>)
 8015fbe:	6800      	ldr	r0, [r0, #0]
 8015fc0:	f013 fa22 	bl	8029408 <mg_connect>
	if (conn == NULL){
 8015fc4:	b130      	cbz	r0, 8015fd4 <ssdp_timer_handler+0x28>
 8015fc6:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 8015fc8:	f7ff ff58 	bl	8015e7c <send_ssdp_notify>
	mg_close_conn(conn);
 8015fcc:	4620      	mov	r0, r4
 8015fce:	f011 fc05 	bl	80277dc <mg_close_conn>
}
 8015fd2:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 8015fd4:	4905      	ldr	r1, [pc, #20]	@ (8015fec <ssdp_timer_handler+0x40>)
 8015fd6:	2003      	movs	r0, #3
 8015fd8:	f7fc f906 	bl	80121e8 <logging>
		return ;
 8015fdc:	e7f9      	b.n	8015fd2 <ssdp_timer_handler+0x26>
 8015fde:	bf00      	nop
 8015fe0:	08038e08 	.word	0x08038e08
 8015fe4:	08039128 	.word	0x08039128
 8015fe8:	20002948 	.word	0x20002948
 8015fec:	08038e20 	.word	0x08038e20

08015ff0 <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 8015ff0:	b570      	push	{r4, r5, r6, lr}
 8015ff2:	4606      	mov	r6, r0
 8015ff4:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 8015ff6:	4910      	ldr	r1, [pc, #64]	@ (8016038 <ssdp_set_id+0x48>)
 8015ff8:	2000      	movs	r0, #0
 8015ffa:	f7fc f8f5 	bl	80121e8 <logging>
	if (id && (id_len > 0)){
 8015ffe:	b1d6      	cbz	r6, 8016036 <ssdp_set_id+0x46>
 8016000:	b1cd      	cbz	r5, 8016036 <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 8016002:	4b0e      	ldr	r3, [pc, #56]	@ (801603c <ssdp_set_id+0x4c>)
 8016004:	6818      	ldr	r0, [r3, #0]
 8016006:	b108      	cbz	r0, 801600c <ssdp_set_id+0x1c>
 8016008:	f005 f8a8 	bl	801b15c <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 801600c:	0068      	lsls	r0, r5, #1
 801600e:	2101      	movs	r1, #1
 8016010:	4408      	add	r0, r1
 8016012:	f7ff fe6f 	bl	8015cf4 <my_calloc>
 8016016:	4b09      	ldr	r3, [pc, #36]	@ (801603c <ssdp_set_id+0x4c>)
 8016018:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 801601a:	b160      	cbz	r0, 8016036 <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 801601c:	2400      	movs	r4, #0
 801601e:	e008      	b.n	8016032 <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 8016020:	4b06      	ldr	r3, [pc, #24]	@ (801603c <ssdp_set_id+0x4c>)
 8016022:	6818      	ldr	r0, [r3, #0]
 8016024:	5d32      	ldrb	r2, [r6, r4]
 8016026:	4906      	ldr	r1, [pc, #24]	@ (8016040 <ssdp_set_id+0x50>)
 8016028:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 801602c:	f016 fc9e 	bl	802c96c <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 8016030:	3401      	adds	r4, #1
 8016032:	42a5      	cmp	r5, r4
 8016034:	d8f4      	bhi.n	8016020 <ssdp_set_id+0x30>
}
 8016036:	bd70      	pop	{r4, r5, r6, pc}
 8016038:	08038e48 	.word	0x08038e48
 801603c:	20002954 	.word	0x20002954
 8016040:	08038804 	.word	0x08038804

08016044 <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 8016044:	b530      	push	{r4, r5, lr}
 8016046:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 8016048:	4b18      	ldr	r3, [pc, #96]	@ (80160ac <ssdp_start_server+0x68>)
 801604a:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 801604c:	4b18      	ldr	r3, [pc, #96]	@ (80160b0 <ssdp_start_server+0x6c>)
 801604e:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 8016050:	2101      	movs	r1, #1
 8016052:	2028      	movs	r0, #40	@ 0x28
 8016054:	f7ff fe4e 	bl	8015cf4 <my_calloc>
 8016058:	4b16      	ldr	r3, [pc, #88]	@ (80160b4 <ssdp_start_server+0x70>)
 801605a:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 801605c:	b318      	cbz	r0, 80160a6 <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 801605e:	4d14      	ldr	r5, [pc, #80]	@ (80160b0 <ssdp_start_server+0x6c>)
 8016060:	2106      	movs	r1, #6
 8016062:	6828      	ldr	r0, [r5, #0]
 8016064:	f7ff ffc4 	bl	8015ff0 <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 8016068:	4913      	ldr	r1, [pc, #76]	@ (80160b8 <ssdp_start_server+0x74>)
 801606a:	2001      	movs	r0, #1
 801606c:	f7fc f8bc 	bl	80121e8 <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 8016070:	4c0e      	ldr	r4, [pc, #56]	@ (80160ac <ssdp_start_server+0x68>)
 8016072:	2300      	movs	r3, #0
 8016074:	9302      	str	r3, [sp, #8]
 8016076:	4b11      	ldr	r3, [pc, #68]	@ (80160bc <ssdp_start_server+0x78>)
 8016078:	9301      	str	r3, [sp, #4]
 801607a:	2303      	movs	r3, #3
 801607c:	9300      	str	r3, [sp, #0]
 801607e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8016082:	2300      	movs	r3, #0
 8016084:	6820      	ldr	r0, [r4, #0]
 8016086:	f00f fea5 	bl	8025dd4 <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 801608a:	682b      	ldr	r3, [r5, #0]
 801608c:	4a0c      	ldr	r2, [pc, #48]	@ (80160c0 <ssdp_start_server+0x7c>)
 801608e:	490d      	ldr	r1, [pc, #52]	@ (80160c4 <ssdp_start_server+0x80>)
 8016090:	6820      	ldr	r0, [r4, #0]
 8016092:	f011 fc7d 	bl	8027990 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 8016096:	682b      	ldr	r3, [r5, #0]
 8016098:	4a0b      	ldr	r2, [pc, #44]	@ (80160c8 <ssdp_start_server+0x84>)
 801609a:	490c      	ldr	r1, [pc, #48]	@ (80160cc <ssdp_start_server+0x88>)
 801609c:	6820      	ldr	r0, [r4, #0]
 801609e:	f011 fbf3 	bl	8027888 <mg_listen>
 80160a2:	4b0b      	ldr	r3, [pc, #44]	@ (80160d0 <ssdp_start_server+0x8c>)
 80160a4:	6018      	str	r0, [r3, #0]
}
 80160a6:	b005      	add	sp, #20
 80160a8:	bd30      	pop	{r4, r5, pc}
 80160aa:	bf00      	nop
 80160ac:	20002948 	.word	0x20002948
 80160b0:	20002944 	.word	0x20002944
 80160b4:	2000294c 	.word	0x2000294c
 80160b8:	08038e5c 	.word	0x08038e5c
 80160bc:	08015fad 	.word	0x08015fad
 80160c0:	08015dcd 	.word	0x08015dcd
 80160c4:	08038e74 	.word	0x08038e74
 80160c8:	08015f21 	.word	0x08015f21
 80160cc:	08039128 	.word	0x08039128
 80160d0:	20002940 	.word	0x20002940

080160d4 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 80160d4:	4770      	bx	lr
	...

080160d8 <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 80160d8:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 80160da:	4b02      	ldr	r3, [pc, #8]	@ (80160e4 <sFLASH_SPI_ReadBuffer+0xc>)
 80160dc:	685b      	ldr	r3, [r3, #4]
 80160de:	4798      	blx	r3
}
 80160e0:	bd08      	pop	{r3, pc}
 80160e2:	bf00      	nop
 80160e4:	200029a4 	.word	0x200029a4

080160e8 <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 80160e8:	b410      	push	{r4}
	if (chip_select){
 80160ea:	b158      	cbz	r0, 8016104 <SPI_flash_reg_cb+0x1c>
 80160ec:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 80160ee:	4809      	ldr	r0, [pc, #36]	@ (8016114 <SPI_flash_reg_cb+0x2c>)
 80160f0:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 80160f2:	b159      	cbz	r1, 801610c <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 80160f4:	4807      	ldr	r0, [pc, #28]	@ (8016114 <SPI_flash_reg_cb+0x2c>)
 80160f6:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 80160f8:	4906      	ldr	r1, [pc, #24]	@ (8016114 <SPI_flash_reg_cb+0x2c>)
 80160fa:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 80160fc:	608b      	str	r3, [r1, #8]
}
 80160fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016102:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 8016104:	4803      	ldr	r0, [pc, #12]	@ (8016114 <SPI_flash_reg_cb+0x2c>)
 8016106:	4c04      	ldr	r4, [pc, #16]	@ (8016118 <SPI_flash_reg_cb+0x30>)
 8016108:	60c4      	str	r4, [r0, #12]
 801610a:	e7f2      	b.n	80160f2 <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 801610c:	4901      	ldr	r1, [pc, #4]	@ (8016114 <SPI_flash_reg_cb+0x2c>)
 801610e:	4802      	ldr	r0, [pc, #8]	@ (8016118 <SPI_flash_reg_cb+0x30>)
 8016110:	6108      	str	r0, [r1, #16]
 8016112:	e7f1      	b.n	80160f8 <SPI_flash_reg_cb+0x10>
 8016114:	200029a4 	.word	0x200029a4
 8016118:	080160d5 	.word	0x080160d5

0801611c <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 801611c:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 801611e:	4b02      	ldr	r3, [pc, #8]	@ (8016128 <sFLASH_CS_LOW+0xc>)
 8016120:	68db      	ldr	r3, [r3, #12]
 8016122:	4798      	blx	r3
}
 8016124:	bd08      	pop	{r3, pc}
 8016126:	bf00      	nop
 8016128:	200029a4 	.word	0x200029a4

0801612c <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 801612c:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 801612e:	4b02      	ldr	r3, [pc, #8]	@ (8016138 <sFLASH_CS_HIGH+0xc>)
 8016130:	691b      	ldr	r3, [r3, #16]
 8016132:	4798      	blx	r3
}
 8016134:	bd08      	pop	{r3, pc}
 8016136:	bf00      	nop
 8016138:	200029a4 	.word	0x200029a4

0801613c <sFLASH_ReadByte>:
{
 801613c:	b500      	push	{lr}
 801613e:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 8016140:	4b05      	ldr	r3, [pc, #20]	@ (8016158 <sFLASH_ReadByte+0x1c>)
 8016142:	685b      	ldr	r3, [r3, #4]
 8016144:	2101      	movs	r1, #1
 8016146:	f10d 0007 	add.w	r0, sp, #7
 801614a:	4798      	blx	r3
}
 801614c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016150:	b003      	add	sp, #12
 8016152:	f85d fb04 	ldr.w	pc, [sp], #4
 8016156:	bf00      	nop
 8016158:	200029a4 	.word	0x200029a4

0801615c <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 801615c:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 801615e:	4b02      	ldr	r3, [pc, #8]	@ (8016168 <sFLASH_SendByte+0xc>)
 8016160:	689b      	ldr	r3, [r3, #8]
 8016162:	4798      	blx	r3
}
 8016164:	bd08      	pop	{r3, pc}
 8016166:	bf00      	nop
 8016168:	200029a4 	.word	0x200029a4

0801616c <sFLASH_Reset>:
void sFLASH_Reset(void){
 801616c:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 801616e:	f7ff ffd5 	bl	801611c <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8016172:	2066      	movs	r0, #102	@ 0x66
 8016174:	f7ff fff2 	bl	801615c <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8016178:	2099      	movs	r0, #153	@ 0x99
 801617a:	f7ff ffef 	bl	801615c <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 801617e:	f7ff ffd5 	bl	801612c <sFLASH_CS_HIGH>
}
 8016182:	bd08      	pop	{r3, pc}

08016184 <sFLASH_Init>:
void sFLASH_Init(void){
 8016184:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8016186:	2064      	movs	r0, #100	@ 0x64
 8016188:	f000 fa46 	bl	8016618 <HAL_Delay>
    sFLASH_Reset();
 801618c:	f7ff ffee 	bl	801616c <sFLASH_Reset>
    HAL_Delay(100);
 8016190:	2064      	movs	r0, #100	@ 0x64
 8016192:	f000 fa41 	bl	8016618 <HAL_Delay>
    HAL_Delay(100);
 8016196:	2064      	movs	r0, #100	@ 0x64
 8016198:	f000 fa3e 	bl	8016618 <HAL_Delay>
}
 801619c:	bd08      	pop	{r3, pc}
	...

080161a0 <sFLASH_ReadBuffer>:
{
 80161a0:	b570      	push	{r4, r5, r6, lr}
 80161a2:	4606      	mov	r6, r0
 80161a4:	460d      	mov	r5, r1
 80161a6:	4614      	mov	r4, r2
  sFLASH_CS_LOW();
 80161a8:	f7ff ffb8 	bl	801611c <sFLASH_CS_LOW>
  read_bytes = read_bytes + NumByteToRead;
 80161ac:	4a1b      	ldr	r2, [pc, #108]	@ (801621c <sFLASH_ReadBuffer+0x7c>)
 80161ae:	6813      	ldr	r3, [r2, #0]
 80161b0:	4423      	add	r3, r4
 80161b2:	6013      	str	r3, [r2, #0]
  if (NumByteToRead > 16){
 80161b4:	2c10      	cmp	r4, #16
 80161b6:	d917      	bls.n	80161e8 <sFLASH_ReadBuffer+0x48>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 80161b8:	200b      	movs	r0, #11
 80161ba:	f7ff ffcf 	bl	801615c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80161be:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80161c2:	f7ff ffcb 	bl	801615c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 80161c6:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80161ca:	f7ff ffc7 	bl	801615c <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 80161ce:	b2e8      	uxtb	r0, r5
 80161d0:	f7ff ffc4 	bl	801615c <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 80161d4:	2000      	movs	r0, #0
 80161d6:	f7ff ffc1 	bl	801615c <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 80161da:	4621      	mov	r1, r4
 80161dc:	4630      	mov	r0, r6
 80161de:	f7ff ff7b 	bl	80160d8 <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 80161e2:	f7ff ffa3 	bl	801612c <sFLASH_CS_HIGH>
}
 80161e6:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 80161e8:	2003      	movs	r0, #3
 80161ea:	f7ff ffb7 	bl	801615c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80161ee:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80161f2:	f7ff ffb3 	bl	801615c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 80161f6:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80161fa:	f7ff ffaf 	bl	801615c <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 80161fe:	b2e8      	uxtb	r0, r5
 8016200:	f7ff ffac 	bl	801615c <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 8016204:	e004      	b.n	8016210 <sFLASH_ReadBuffer+0x70>
		  *pBuffer = sFLASH_ReadByte();
 8016206:	f7ff ff99 	bl	801613c <sFLASH_ReadByte>
 801620a:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 801620e:	462c      	mov	r4, r5
 8016210:	1e63      	subs	r3, r4, #1
 8016212:	b29d      	uxth	r5, r3
 8016214:	2c00      	cmp	r4, #0
 8016216:	d1f6      	bne.n	8016206 <sFLASH_ReadBuffer+0x66>
 8016218:	e7e3      	b.n	80161e2 <sFLASH_ReadBuffer+0x42>
 801621a:	bf00      	nop
 801621c:	20002958 	.word	0x20002958

08016220 <sFLASH_ReadID>:
{
 8016220:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 8016222:	f7ff ff7b 	bl	801611c <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8016226:	f7ff ff81 	bl	801612c <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 801622a:	f7ff ff77 	bl	801611c <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 801622e:	f7ff ff7d 	bl	801612c <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8016232:	f7ff ff73 	bl	801611c <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8016236:	209f      	movs	r0, #159	@ 0x9f
 8016238:	f7ff ff90 	bl	801615c <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 801623c:	f7ff ff7e 	bl	801613c <sFLASH_ReadByte>
 8016240:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 8016242:	f7ff ff7b 	bl	801613c <sFLASH_ReadByte>
 8016246:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 8016248:	f7ff ff78 	bl	801613c <sFLASH_ReadByte>
 801624c:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 801624e:	f7ff ff6d 	bl	801612c <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8016252:	0224      	lsls	r4, r4, #8
 8016254:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 8016258:	ea44 0005 	orr.w	r0, r4, r5
 801625c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016260 <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 8016260:	b538      	push	{r3, r4, r5, lr}
 8016262:	4605      	mov	r5, r0
	sFLASH_Init();
 8016264:	f7ff ff8e 	bl	8016184 <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 8016268:	f7ff ffda 	bl	8016220 <sFLASH_ReadID>
	switch (flash_id) {
 801626c:	4b55      	ldr	r3, [pc, #340]	@ (80163c4 <sFLASH_GetInfo+0x164>)
 801626e:	4298      	cmp	r0, r3
 8016270:	f000 8085 	beq.w	801637e <sFLASH_GetInfo+0x11e>
 8016274:	f0c0 809c 	bcc.w	80163b0 <sFLASH_GetInfo+0x150>
 8016278:	4b53      	ldr	r3, [pc, #332]	@ (80163c8 <sFLASH_GetInfo+0x168>)
 801627a:	4298      	cmp	r0, r3
 801627c:	f200 8098 	bhi.w	80163b0 <sFLASH_GetInfo+0x150>
 8016280:	3b03      	subs	r3, #3
 8016282:	4298      	cmp	r0, r3
 8016284:	f0c0 8094 	bcc.w	80163b0 <sFLASH_GetInfo+0x150>
 8016288:	4b50      	ldr	r3, [pc, #320]	@ (80163cc <sFLASH_GetInfo+0x16c>)
 801628a:	4403      	add	r3, r0
 801628c:	2b03      	cmp	r3, #3
 801628e:	f200 808f 	bhi.w	80163b0 <sFLASH_GetInfo+0x150>
 8016292:	e8df f003 	tbb	[pc, r3]
 8016296:	2b02      	.short	0x2b02
 8016298:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 801629a:	4c4d      	ldr	r4, [pc, #308]	@ (80163d0 <sFLASH_GetInfo+0x170>)
 801629c:	4b4d      	ldr	r3, [pc, #308]	@ (80163d4 <sFLASH_GetInfo+0x174>)
 801629e:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80162a0:	2301      	movs	r3, #1
 80162a2:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80162a4:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80162a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80162aa:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80162ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80162b0:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 80162b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80162b6:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q16", sizeof(flash_info.model_name) - 1);
 80162b8:	2231      	movs	r2, #49	@ 0x31
 80162ba:	4947      	ldr	r1, [pc, #284]	@ (80163d8 <sFLASH_GetInfo+0x178>)
 80162bc:	f104 000e 	add.w	r0, r4, #14
 80162c0:	f016 ff5d 	bl	802d17e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80162c4:	2300      	movs	r3, #0
 80162c6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 80162ca:	46ac      	mov	ip, r5
 80162cc:	4c40      	ldr	r4, [pc, #256]	@ (80163d0 <sFLASH_GetInfo+0x170>)
 80162ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80162d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80162d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80162d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80162da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80162dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80162e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80162e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 80162e8:	4628      	mov	r0, r5
 80162ea:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 80162ec:	4c38      	ldr	r4, [pc, #224]	@ (80163d0 <sFLASH_GetInfo+0x170>)
 80162ee:	4b3b      	ldr	r3, [pc, #236]	@ (80163dc <sFLASH_GetInfo+0x17c>)
 80162f0:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80162f2:	2301      	movs	r3, #1
 80162f4:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80162f6:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80162f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80162fc:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80162fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016302:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8016304:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016308:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q32", sizeof(flash_info.model_name) - 1);
 801630a:	2231      	movs	r2, #49	@ 0x31
 801630c:	4934      	ldr	r1, [pc, #208]	@ (80163e0 <sFLASH_GetInfo+0x180>)
 801630e:	f104 000e 	add.w	r0, r4, #14
 8016312:	f016 ff34 	bl	802d17e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016316:	2300      	movs	r3, #0
 8016318:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801631c:	e7d5      	b.n	80162ca <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 801631e:	4c2c      	ldr	r4, [pc, #176]	@ (80163d0 <sFLASH_GetInfo+0x170>)
 8016320:	4b30      	ldr	r3, [pc, #192]	@ (80163e4 <sFLASH_GetInfo+0x184>)
 8016322:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016324:	2301      	movs	r3, #1
 8016326:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016328:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801632a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801632e:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016330:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016334:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 8016336:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801633a:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q64", sizeof(flash_info.model_name) - 1);
 801633c:	2231      	movs	r2, #49	@ 0x31
 801633e:	492a      	ldr	r1, [pc, #168]	@ (80163e8 <sFLASH_GetInfo+0x188>)
 8016340:	f104 000e 	add.w	r0, r4, #14
 8016344:	f016 ff1b 	bl	802d17e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016348:	2300      	movs	r3, #0
 801634a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801634e:	e7bc      	b.n	80162ca <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8016350:	4c1f      	ldr	r4, [pc, #124]	@ (80163d0 <sFLASH_GetInfo+0x170>)
 8016352:	4b1d      	ldr	r3, [pc, #116]	@ (80163c8 <sFLASH_GetInfo+0x168>)
 8016354:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016356:	2301      	movs	r3, #1
 8016358:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 801635a:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801635c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016360:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016362:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016366:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 8016368:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q128", sizeof(flash_info.model_name) - 1);
 801636a:	2231      	movs	r2, #49	@ 0x31
 801636c:	491f      	ldr	r1, [pc, #124]	@ (80163ec <sFLASH_GetInfo+0x18c>)
 801636e:	f104 000e 	add.w	r0, r4, #14
 8016372:	f016 ff04 	bl	802d17e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016376:	2300      	movs	r3, #0
 8016378:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801637c:	e7a5      	b.n	80162ca <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 801637e:	4c14      	ldr	r4, [pc, #80]	@ (80163d0 <sFLASH_GetInfo+0x170>)
 8016380:	4b10      	ldr	r3, [pc, #64]	@ (80163c4 <sFLASH_GetInfo+0x164>)
 8016382:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016384:	2301      	movs	r3, #1
 8016386:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016388:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801638a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801638e:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016394:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8016396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801639a:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 801639c:	2231      	movs	r2, #49	@ 0x31
 801639e:	4914      	ldr	r1, [pc, #80]	@ (80163f0 <sFLASH_GetInfo+0x190>)
 80163a0:	f104 000e 	add.w	r0, r4, #14
 80163a4:	f016 feeb 	bl	802d17e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80163a8:	2300      	movs	r3, #0
 80163aa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 80163ae:	e78c      	b.n	80162ca <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 80163b0:	4807      	ldr	r0, [pc, #28]	@ (80163d0 <sFLASH_GetInfo+0x170>)
 80163b2:	2300      	movs	r3, #0
 80163b4:	f840 3b0e 	str.w	r3, [r0], #14
			strncpy(flash_info.model_name, "Unknown", sizeof(flash_info.model_name) - 1);
 80163b8:	2231      	movs	r2, #49	@ 0x31
 80163ba:	490e      	ldr	r1, [pc, #56]	@ (80163f4 <sFLASH_GetInfo+0x194>)
 80163bc:	f016 fedf 	bl	802d17e <strncpy>
			break;
 80163c0:	e783      	b.n	80162ca <sFLASH_GetInfo+0x6a>
 80163c2:	bf00      	nop
 80163c4:	00c22016 	.word	0x00c22016
 80163c8:	00ef4018 	.word	0x00ef4018
 80163cc:	ff10bfeb 	.word	0xff10bfeb
 80163d0:	20002964 	.word	0x20002964
 80163d4:	00ef4015 	.word	0x00ef4015
 80163d8:	08039144 	.word	0x08039144
 80163dc:	00ef4016 	.word	0x00ef4016
 80163e0:	08039154 	.word	0x08039154
 80163e4:	00ef4017 	.word	0x00ef4017
 80163e8:	08039164 	.word	0x08039164
 80163ec:	08039174 	.word	0x08039174
 80163f0:	08039184 	.word	0x08039184
 80163f4:	0803918c 	.word	0x0803918c

080163f8 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 80163f8:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80163fa:	f7ff fe8f 	bl	801611c <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 80163fe:	2006      	movs	r0, #6
 8016400:	f7ff feac 	bl	801615c <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8016404:	f7ff fe92 	bl	801612c <sFLASH_CS_HIGH>
}
 8016408:	bd08      	pop	{r3, pc}
	...

0801640c <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 801640c:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 801640e:	4d09      	ldr	r5, [pc, #36]	@ (8016434 <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 8016410:	f7ff fe84 	bl	801611c <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8016414:	2005      	movs	r0, #5
 8016416:	f7ff fea1 	bl	801615c <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 801641a:	f7ff fe8f 	bl	801613c <sFLASH_ReadByte>
 801641e:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 8016420:	f7ff fe84 	bl	801612c <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 8016424:	462b      	mov	r3, r5
 8016426:	3d01      	subs	r5, #1
 8016428:	b113      	cbz	r3, 8016430 <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 801642a:	f014 0f01 	tst.w	r4, #1
 801642e:	d1ef      	bne.n	8016410 <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 8016430:	bd38      	pop	{r3, r4, r5, pc}
 8016432:	bf00      	nop
 8016434:	000186a0 	.word	0x000186a0

08016438 <sFLASH_EraseSector>:
{
 8016438:	b510      	push	{r4, lr}
 801643a:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 801643c:	f7ff ffdc 	bl	80163f8 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8016440:	f7ff fe6c 	bl	801611c <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 8016444:	2020      	movs	r0, #32
 8016446:	f7ff fe89 	bl	801615c <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 801644a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 801644e:	f7ff fe85 	bl	801615c <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8016452:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8016456:	f7ff fe81 	bl	801615c <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 801645a:	b2e0      	uxtb	r0, r4
 801645c:	f7ff fe7e 	bl	801615c <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 8016460:	f7ff fe64 	bl	801612c <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8016464:	f7ff ffd2 	bl	801640c <sFLASH_WaitForWriteEnd>
  erace_sectors++ ;
 8016468:	4a02      	ldr	r2, [pc, #8]	@ (8016474 <sFLASH_EraseSector+0x3c>)
 801646a:	6813      	ldr	r3, [r2, #0]
 801646c:	3301      	adds	r3, #1
 801646e:	6013      	str	r3, [r2, #0]
}
 8016470:	bd10      	pop	{r4, pc}
 8016472:	bf00      	nop
 8016474:	20002960 	.word	0x20002960

08016478 <sFLASH_WritePage>:
{
 8016478:	b570      	push	{r4, r5, r6, lr}
 801647a:	4606      	mov	r6, r0
 801647c:	460c      	mov	r4, r1
 801647e:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 8016480:	f7ff ffba 	bl	80163f8 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8016484:	f7ff fe4a 	bl	801611c <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 8016488:	2002      	movs	r0, #2
 801648a:	f7ff fe67 	bl	801615c <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 801648e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8016492:	f7ff fe63 	bl	801615c <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8016496:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801649a:	f7ff fe5f 	bl	801615c <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 801649e:	b2e0      	uxtb	r0, r4
 80164a0:	f7ff fe5c 	bl	801615c <sFLASH_SendByte>
  while (NumByteToWrite--)
 80164a4:	e004      	b.n	80164b0 <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 80164a6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80164aa:	f7ff fe57 	bl	801615c <sFLASH_SendByte>
  while (NumByteToWrite--)
 80164ae:	4625      	mov	r5, r4
 80164b0:	1e6b      	subs	r3, r5, #1
 80164b2:	b29c      	uxth	r4, r3
 80164b4:	2d00      	cmp	r5, #0
 80164b6:	d1f6      	bne.n	80164a6 <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 80164b8:	f7ff fe38 	bl	801612c <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 80164bc:	f7ff ffa6 	bl	801640c <sFLASH_WaitForWriteEnd>
}
 80164c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080164c4 <sFLASH_WriteBuffer>:
{
 80164c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164c8:	4605      	mov	r5, r0
 80164ca:	460c      	mov	r4, r1
 80164cc:	4617      	mov	r7, r2
  write_bytes = write_bytes + NumByteToWrite;
 80164ce:	4a32      	ldr	r2, [pc, #200]	@ (8016598 <sFLASH_WriteBuffer+0xd4>)
 80164d0:	6813      	ldr	r3, [r2, #0]
 80164d2:	443b      	add	r3, r7
 80164d4:	6013      	str	r3, [r2, #0]
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 80164d6:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80164d8:	0a39      	lsrs	r1, r7, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 80164da:	b9db      	cbnz	r3, 8016514 <sFLASH_WriteBuffer+0x50>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80164dc:	b979      	cbnz	r1, 80164fe <sFLASH_WriteBuffer+0x3a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80164de:	463a      	mov	r2, r7
 80164e0:	4621      	mov	r1, r4
 80164e2:	f7ff ffc9 	bl	8016478 <sFLASH_WritePage>
 80164e6:	e013      	b.n	8016510 <sFLASH_WriteBuffer+0x4c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80164e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80164ec:	4621      	mov	r1, r4
 80164ee:	4628      	mov	r0, r5
 80164f0:	f7ff ffc2 	bl	8016478 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80164f4:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 80164f8:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 80164fc:	4631      	mov	r1, r6
 80164fe:	1e4b      	subs	r3, r1, #1
 8016500:	b2de      	uxtb	r6, r3
 8016502:	2900      	cmp	r1, #0
 8016504:	d1f0      	bne.n	80164e8 <sFLASH_WriteBuffer+0x24>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8016506:	b2fa      	uxtb	r2, r7
 8016508:	4621      	mov	r1, r4
 801650a:	4628      	mov	r0, r5
 801650c:	f7ff ffb4 	bl	8016478 <sFLASH_WritePage>
}
 8016510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016514:	f1c3 0800 	rsb	r8, r3, #0
 8016518:	fa5f f888 	uxtb.w	r8, r8
 801651c:	b2fa      	uxtb	r2, r7
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 801651e:	b9a1      	cbnz	r1, 801654a <sFLASH_WriteBuffer+0x86>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8016520:	4590      	cmp	r8, r2
 8016522:	d20d      	bcs.n	8016540 <sFLASH_WriteBuffer+0x7c>
        temp = NumOfSingle - count;
 8016524:	4413      	add	r3, r2
 8016526:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8016528:	4642      	mov	r2, r8
 801652a:	4621      	mov	r1, r4
 801652c:	f7ff ffa4 	bl	8016478 <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8016530:	4632      	mov	r2, r6
 8016532:	eb08 0104 	add.w	r1, r8, r4
 8016536:	eb05 0008 	add.w	r0, r5, r8
 801653a:	f7ff ff9d 	bl	8016478 <sFLASH_WritePage>
 801653e:	e7e7      	b.n	8016510 <sFLASH_WriteBuffer+0x4c>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8016540:	463a      	mov	r2, r7
 8016542:	4621      	mov	r1, r4
 8016544:	f7ff ff98 	bl	8016478 <sFLASH_WritePage>
 8016548:	e7e2      	b.n	8016510 <sFLASH_WriteBuffer+0x4c>
      NumByteToWrite -= count;
 801654a:	eba7 0708 	sub.w	r7, r7, r8
 801654e:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8016552:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8016556:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8016558:	4642      	mov	r2, r8
 801655a:	4621      	mov	r1, r4
 801655c:	f7ff ff8c 	bl	8016478 <sFLASH_WritePage>
      WriteAddr +=  count;
 8016560:	4444      	add	r4, r8
      pBuffer += count;
 8016562:	4445      	add	r5, r8
      while (NumOfPage--)
 8016564:	e00a      	b.n	801657c <sFLASH_WriteBuffer+0xb8>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8016566:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801656a:	4621      	mov	r1, r4
 801656c:	4628      	mov	r0, r5
 801656e:	f7ff ff83 	bl	8016478 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8016572:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 8016576:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 801657a:	4646      	mov	r6, r8
 801657c:	1e73      	subs	r3, r6, #1
 801657e:	fa5f f883 	uxtb.w	r8, r3
 8016582:	2e00      	cmp	r6, #0
 8016584:	d1ef      	bne.n	8016566 <sFLASH_WriteBuffer+0xa2>
      if (NumOfSingle != 0)
 8016586:	2f00      	cmp	r7, #0
 8016588:	d0c2      	beq.n	8016510 <sFLASH_WriteBuffer+0x4c>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 801658a:	fa5f f289 	uxtb.w	r2, r9
 801658e:	4621      	mov	r1, r4
 8016590:	4628      	mov	r0, r5
 8016592:	f7ff ff71 	bl	8016478 <sFLASH_WritePage>
}
 8016596:	e7bb      	b.n	8016510 <sFLASH_WriteBuffer+0x4c>
 8016598:	2000295c 	.word	0x2000295c

0801659c <sFLASH_GetReadedBytes>:

unsigned long sFLASH_GetReadedBytes(void){
	return read_bytes;
}
 801659c:	4b01      	ldr	r3, [pc, #4]	@ (80165a4 <sFLASH_GetReadedBytes+0x8>)
 801659e:	6818      	ldr	r0, [r3, #0]
 80165a0:	4770      	bx	lr
 80165a2:	bf00      	nop
 80165a4:	20002958 	.word	0x20002958

080165a8 <sFLASH_GetWritedBytes>:

unsigned long sFLASH_GetWritedBytes(void){
	return write_bytes;
}
 80165a8:	4b01      	ldr	r3, [pc, #4]	@ (80165b0 <sFLASH_GetWritedBytes+0x8>)
 80165aa:	6818      	ldr	r0, [r3, #0]
 80165ac:	4770      	bx	lr
 80165ae:	bf00      	nop
 80165b0:	2000295c 	.word	0x2000295c

080165b4 <sFLASH_GetEraceSectorTimes>:

unsigned long sFLASH_GetEraceSectorTimes(void){
	return erace_sectors;
}
 80165b4:	4b01      	ldr	r3, [pc, #4]	@ (80165bc <sFLASH_GetEraceSectorTimes+0x8>)
 80165b6:	6818      	ldr	r0, [r3, #0]
 80165b8:	4770      	bx	lr
 80165ba:	bf00      	nop
 80165bc:	20002960 	.word	0x20002960

080165c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80165c0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80165c2:	4b0b      	ldr	r3, [pc, #44]	@ (80165f0 <HAL_Init+0x30>)
 80165c4:	681a      	ldr	r2, [r3, #0]
 80165c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80165ca:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80165cc:	681a      	ldr	r2, [r3, #0]
 80165ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80165d2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80165d4:	681a      	ldr	r2, [r3, #0]
 80165d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80165da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80165dc:	2003      	movs	r0, #3
 80165de:	f000 fa1f 	bl	8016a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80165e2:	200f      	movs	r0, #15
 80165e4:	f7fb fff4 	bl	80125d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80165e8:	f7fb ffd0 	bl	801258c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80165ec:	2000      	movs	r0, #0
 80165ee:	bd08      	pop	{r3, pc}
 80165f0:	40023c00 	.word	0x40023c00

080165f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80165f4:	4a03      	ldr	r2, [pc, #12]	@ (8016604 <HAL_IncTick+0x10>)
 80165f6:	6811      	ldr	r1, [r2, #0]
 80165f8:	4b03      	ldr	r3, [pc, #12]	@ (8016608 <HAL_IncTick+0x14>)
 80165fa:	781b      	ldrb	r3, [r3, #0]
 80165fc:	440b      	add	r3, r1
 80165fe:	6013      	str	r3, [r2, #0]
}
 8016600:	4770      	bx	lr
 8016602:	bf00      	nop
 8016604:	200029b8 	.word	0x200029b8
 8016608:	20000106 	.word	0x20000106

0801660c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 801660c:	4b01      	ldr	r3, [pc, #4]	@ (8016614 <HAL_GetTick+0x8>)
 801660e:	6818      	ldr	r0, [r3, #0]
}
 8016610:	4770      	bx	lr
 8016612:	bf00      	nop
 8016614:	200029b8 	.word	0x200029b8

08016618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016618:	b538      	push	{r3, r4, r5, lr}
 801661a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 801661c:	f7ff fff6 	bl	801660c <HAL_GetTick>
 8016620:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016622:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8016626:	d002      	beq.n	801662e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8016628:	4b04      	ldr	r3, [pc, #16]	@ (801663c <HAL_Delay+0x24>)
 801662a:	781b      	ldrb	r3, [r3, #0]
 801662c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 801662e:	f7ff ffed 	bl	801660c <HAL_GetTick>
 8016632:	1b40      	subs	r0, r0, r5
 8016634:	42a0      	cmp	r0, r4
 8016636:	d3fa      	bcc.n	801662e <HAL_Delay+0x16>
  {
  }
}
 8016638:	bd38      	pop	{r3, r4, r5, pc}
 801663a:	bf00      	nop
 801663c:	20000106 	.word	0x20000106

08016640 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8016640:	4b4a      	ldr	r3, [pc, #296]	@ (801676c <ADC_Init+0x12c>)
 8016642:	685a      	ldr	r2, [r3, #4]
 8016644:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8016648:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801664a:	685a      	ldr	r2, [r3, #4]
 801664c:	6841      	ldr	r1, [r0, #4]
 801664e:	430a      	orrs	r2, r1
 8016650:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8016652:	6802      	ldr	r2, [r0, #0]
 8016654:	6853      	ldr	r3, [r2, #4]
 8016656:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801665a:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801665c:	6802      	ldr	r2, [r0, #0]
 801665e:	6853      	ldr	r3, [r2, #4]
 8016660:	6901      	ldr	r1, [r0, #16]
 8016662:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8016666:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8016668:	6802      	ldr	r2, [r0, #0]
 801666a:	6853      	ldr	r3, [r2, #4]
 801666c:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8016670:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8016672:	6802      	ldr	r2, [r0, #0]
 8016674:	6853      	ldr	r3, [r2, #4]
 8016676:	6881      	ldr	r1, [r0, #8]
 8016678:	430b      	orrs	r3, r1
 801667a:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801667c:	6802      	ldr	r2, [r0, #0]
 801667e:	6893      	ldr	r3, [r2, #8]
 8016680:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016684:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8016686:	6802      	ldr	r2, [r0, #0]
 8016688:	6893      	ldr	r3, [r2, #8]
 801668a:	68c1      	ldr	r1, [r0, #12]
 801668c:	430b      	orrs	r3, r1
 801668e:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8016690:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8016692:	4b37      	ldr	r3, [pc, #220]	@ (8016770 <ADC_Init+0x130>)
 8016694:	429a      	cmp	r2, r3
 8016696:	d057      	beq.n	8016748 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8016698:	6802      	ldr	r2, [r0, #0]
 801669a:	6893      	ldr	r3, [r2, #8]
 801669c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80166a0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80166a2:	6802      	ldr	r2, [r0, #0]
 80166a4:	6893      	ldr	r3, [r2, #8]
 80166a6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80166a8:	430b      	orrs	r3, r1
 80166aa:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80166ac:	6802      	ldr	r2, [r0, #0]
 80166ae:	6893      	ldr	r3, [r2, #8]
 80166b0:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80166b4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80166b6:	6802      	ldr	r2, [r0, #0]
 80166b8:	6893      	ldr	r3, [r2, #8]
 80166ba:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80166bc:	430b      	orrs	r3, r1
 80166be:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80166c0:	6802      	ldr	r2, [r0, #0]
 80166c2:	6893      	ldr	r3, [r2, #8]
 80166c4:	f023 0302 	bic.w	r3, r3, #2
 80166c8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80166ca:	6802      	ldr	r2, [r0, #0]
 80166cc:	6893      	ldr	r3, [r2, #8]
 80166ce:	7e01      	ldrb	r1, [r0, #24]
 80166d0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80166d4:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80166d6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d03f      	beq.n	801675e <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80166de:	6802      	ldr	r2, [r0, #0]
 80166e0:	6853      	ldr	r3, [r2, #4]
 80166e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80166e6:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80166e8:	6802      	ldr	r2, [r0, #0]
 80166ea:	6853      	ldr	r3, [r2, #4]
 80166ec:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80166f0:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80166f2:	6801      	ldr	r1, [r0, #0]
 80166f4:	684b      	ldr	r3, [r1, #4]
 80166f6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80166f8:	3a01      	subs	r2, #1
 80166fa:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80166fe:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8016700:	6802      	ldr	r2, [r0, #0]
 8016702:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8016704:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8016708:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801670a:	6801      	ldr	r1, [r0, #0]
 801670c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801670e:	69c2      	ldr	r2, [r0, #28]
 8016710:	3a01      	subs	r2, #1
 8016712:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8016716:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8016718:	6802      	ldr	r2, [r0, #0]
 801671a:	6893      	ldr	r3, [r2, #8]
 801671c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016720:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8016722:	6802      	ldr	r2, [r0, #0]
 8016724:	6893      	ldr	r3, [r2, #8]
 8016726:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 801672a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 801672e:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8016730:	6802      	ldr	r2, [r0, #0]
 8016732:	6893      	ldr	r3, [r2, #8]
 8016734:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016738:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801673a:	6802      	ldr	r2, [r0, #0]
 801673c:	6893      	ldr	r3, [r2, #8]
 801673e:	6941      	ldr	r1, [r0, #20]
 8016740:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8016744:	6093      	str	r3, [r2, #8]
}
 8016746:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8016748:	6802      	ldr	r2, [r0, #0]
 801674a:	6893      	ldr	r3, [r2, #8]
 801674c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8016750:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8016752:	6802      	ldr	r2, [r0, #0]
 8016754:	6893      	ldr	r3, [r2, #8]
 8016756:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 801675a:	6093      	str	r3, [r2, #8]
 801675c:	e7b0      	b.n	80166c0 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801675e:	6802      	ldr	r2, [r0, #0]
 8016760:	6853      	ldr	r3, [r2, #4]
 8016762:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016766:	6053      	str	r3, [r2, #4]
 8016768:	e7ca      	b.n	8016700 <ADC_Init+0xc0>
 801676a:	bf00      	nop
 801676c:	40012300 	.word	0x40012300
 8016770:	0f000001 	.word	0x0f000001

08016774 <HAL_ADC_Init>:
  if (hadc == NULL)
 8016774:	b338      	cbz	r0, 80167c6 <HAL_ADC_Init+0x52>
{
 8016776:	b510      	push	{r4, lr}
 8016778:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 801677a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801677c:	b143      	cbz	r3, 8016790 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801677e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016780:	f013 0f10 	tst.w	r3, #16
 8016784:	d00b      	beq.n	801679e <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8016786:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8016788:	2300      	movs	r3, #0
 801678a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 801678e:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8016790:	f7fa fcdc 	bl	801114c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8016794:	2300      	movs	r3, #0
 8016796:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8016798:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 801679c:	e7ef      	b.n	801677e <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 801679e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80167a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80167a4:	f023 0302 	bic.w	r3, r3, #2
 80167a8:	f043 0302 	orr.w	r3, r3, #2
 80167ac:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 80167ae:	4620      	mov	r0, r4
 80167b0:	f7ff ff46 	bl	8016640 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80167b4:	2000      	movs	r0, #0
 80167b6:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80167b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80167ba:	f023 0303 	bic.w	r3, r3, #3
 80167be:	f043 0301 	orr.w	r3, r3, #1
 80167c2:	6423      	str	r3, [r4, #64]	@ 0x40
 80167c4:	e7e0      	b.n	8016788 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80167c6:	2001      	movs	r0, #1
}
 80167c8:	4770      	bx	lr
	...

080167cc <HAL_ADC_ConfigChannel>:
{
 80167cc:	b430      	push	{r4, r5}
 80167ce:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80167d0:	2200      	movs	r2, #0
 80167d2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80167d4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80167d8:	2a01      	cmp	r2, #1
 80167da:	f000 80c0 	beq.w	801695e <HAL_ADC_ConfigChannel+0x192>
 80167de:	4603      	mov	r3, r0
 80167e0:	2201      	movs	r2, #1
 80167e2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80167e6:	680a      	ldr	r2, [r1, #0]
 80167e8:	2a09      	cmp	r2, #9
 80167ea:	d940      	bls.n	801686e <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80167ec:	6804      	ldr	r4, [r0, #0]
 80167ee:	68e0      	ldr	r0, [r4, #12]
 80167f0:	b292      	uxth	r2, r2
 80167f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80167f6:	3a1e      	subs	r2, #30
 80167f8:	f04f 0c07 	mov.w	ip, #7
 80167fc:	fa0c f202 	lsl.w	r2, ip, r2
 8016800:	ea20 0202 	bic.w	r2, r0, r2
 8016804:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8016806:	681c      	ldr	r4, [r3, #0]
 8016808:	68e0      	ldr	r0, [r4, #12]
 801680a:	880a      	ldrh	r2, [r1, #0]
 801680c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016810:	3a1e      	subs	r2, #30
 8016812:	688d      	ldr	r5, [r1, #8]
 8016814:	fa05 f202 	lsl.w	r2, r5, r2
 8016818:	4302      	orrs	r2, r0
 801681a:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 801681c:	684a      	ldr	r2, [r1, #4]
 801681e:	2a06      	cmp	r2, #6
 8016820:	d83c      	bhi.n	801689c <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8016822:	681c      	ldr	r4, [r3, #0]
 8016824:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8016826:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801682a:	3a05      	subs	r2, #5
 801682c:	f04f 0c1f 	mov.w	ip, #31
 8016830:	fa0c f202 	lsl.w	r2, ip, r2
 8016834:	ea20 0202 	bic.w	r2, r0, r2
 8016838:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801683a:	681c      	ldr	r4, [r3, #0]
 801683c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801683e:	684a      	ldr	r2, [r1, #4]
 8016840:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016844:	3a05      	subs	r2, #5
 8016846:	f8b1 c000 	ldrh.w	ip, [r1]
 801684a:	fa0c f202 	lsl.w	r2, ip, r2
 801684e:	4302      	orrs	r2, r0
 8016850:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8016852:	6818      	ldr	r0, [r3, #0]
 8016854:	4a43      	ldr	r2, [pc, #268]	@ (8016964 <HAL_ADC_ConfigChannel+0x198>)
 8016856:	4290      	cmp	r0, r2
 8016858:	d050      	beq.n	80168fc <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801685a:	6818      	ldr	r0, [r3, #0]
 801685c:	4a41      	ldr	r2, [pc, #260]	@ (8016964 <HAL_ADC_ConfigChannel+0x198>)
 801685e:	4290      	cmp	r0, r2
 8016860:	d059      	beq.n	8016916 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8016862:	2000      	movs	r0, #0
 8016864:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8016868:	b002      	add	sp, #8
 801686a:	bc30      	pop	{r4, r5}
 801686c:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801686e:	6804      	ldr	r4, [r0, #0]
 8016870:	6920      	ldr	r0, [r4, #16]
 8016872:	b292      	uxth	r2, r2
 8016874:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016878:	f04f 0c07 	mov.w	ip, #7
 801687c:	fa0c f202 	lsl.w	r2, ip, r2
 8016880:	ea20 0202 	bic.w	r2, r0, r2
 8016884:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8016886:	681c      	ldr	r4, [r3, #0]
 8016888:	6920      	ldr	r0, [r4, #16]
 801688a:	880a      	ldrh	r2, [r1, #0]
 801688c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016890:	688d      	ldr	r5, [r1, #8]
 8016892:	fa05 f202 	lsl.w	r2, r5, r2
 8016896:	4302      	orrs	r2, r0
 8016898:	6122      	str	r2, [r4, #16]
 801689a:	e7bf      	b.n	801681c <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 801689c:	2a0c      	cmp	r2, #12
 801689e:	d816      	bhi.n	80168ce <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80168a0:	681d      	ldr	r5, [r3, #0]
 80168a2:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80168a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80168a8:	3a23      	subs	r2, #35	@ 0x23
 80168aa:	241f      	movs	r4, #31
 80168ac:	fa04 f202 	lsl.w	r2, r4, r2
 80168b0:	ea20 0202 	bic.w	r2, r0, r2
 80168b4:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80168b6:	681d      	ldr	r5, [r3, #0]
 80168b8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80168ba:	684a      	ldr	r2, [r1, #4]
 80168bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80168c0:	3a23      	subs	r2, #35	@ 0x23
 80168c2:	880c      	ldrh	r4, [r1, #0]
 80168c4:	fa04 f202 	lsl.w	r2, r4, r2
 80168c8:	4302      	orrs	r2, r0
 80168ca:	632a      	str	r2, [r5, #48]	@ 0x30
 80168cc:	e7c1      	b.n	8016852 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80168ce:	681d      	ldr	r5, [r3, #0]
 80168d0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80168d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80168d6:	3a41      	subs	r2, #65	@ 0x41
 80168d8:	241f      	movs	r4, #31
 80168da:	fa04 f202 	lsl.w	r2, r4, r2
 80168de:	ea20 0202 	bic.w	r2, r0, r2
 80168e2:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80168e4:	681d      	ldr	r5, [r3, #0]
 80168e6:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80168e8:	684a      	ldr	r2, [r1, #4]
 80168ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80168ee:	3a41      	subs	r2, #65	@ 0x41
 80168f0:	880c      	ldrh	r4, [r1, #0]
 80168f2:	fa04 f202 	lsl.w	r2, r4, r2
 80168f6:	4302      	orrs	r2, r0
 80168f8:	62ea      	str	r2, [r5, #44]	@ 0x2c
 80168fa:	e7aa      	b.n	8016852 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80168fc:	680a      	ldr	r2, [r1, #0]
 80168fe:	2a12      	cmp	r2, #18
 8016900:	d1ab      	bne.n	801685a <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8016902:	4a19      	ldr	r2, [pc, #100]	@ (8016968 <HAL_ADC_ConfigChannel+0x19c>)
 8016904:	6850      	ldr	r0, [r2, #4]
 8016906:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 801690a:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801690c:	6850      	ldr	r0, [r2, #4]
 801690e:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8016912:	6050      	str	r0, [r2, #4]
 8016914:	e7a1      	b.n	801685a <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8016916:	680a      	ldr	r2, [r1, #0]
 8016918:	4814      	ldr	r0, [pc, #80]	@ (801696c <HAL_ADC_ConfigChannel+0x1a0>)
 801691a:	4282      	cmp	r2, r0
 801691c:	d001      	beq.n	8016922 <HAL_ADC_ConfigChannel+0x156>
 801691e:	2a11      	cmp	r2, #17
 8016920:	d19f      	bne.n	8016862 <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8016922:	4a11      	ldr	r2, [pc, #68]	@ (8016968 <HAL_ADC_ConfigChannel+0x19c>)
 8016924:	6850      	ldr	r0, [r2, #4]
 8016926:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 801692a:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801692c:	6850      	ldr	r0, [r2, #4]
 801692e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8016932:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8016934:	6809      	ldr	r1, [r1, #0]
 8016936:	4a0d      	ldr	r2, [pc, #52]	@ (801696c <HAL_ADC_ConfigChannel+0x1a0>)
 8016938:	4291      	cmp	r1, r2
 801693a:	d192      	bne.n	8016862 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801693c:	4a0c      	ldr	r2, [pc, #48]	@ (8016970 <HAL_ADC_ConfigChannel+0x1a4>)
 801693e:	6812      	ldr	r2, [r2, #0]
 8016940:	490c      	ldr	r1, [pc, #48]	@ (8016974 <HAL_ADC_ConfigChannel+0x1a8>)
 8016942:	fba1 1202 	umull	r1, r2, r1, r2
 8016946:	0c92      	lsrs	r2, r2, #18
 8016948:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801694c:	0052      	lsls	r2, r2, #1
 801694e:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8016950:	9a01      	ldr	r2, [sp, #4]
 8016952:	2a00      	cmp	r2, #0
 8016954:	d085      	beq.n	8016862 <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8016956:	9a01      	ldr	r2, [sp, #4]
 8016958:	3a01      	subs	r2, #1
 801695a:	9201      	str	r2, [sp, #4]
 801695c:	e7f8      	b.n	8016950 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 801695e:	2002      	movs	r0, #2
 8016960:	e782      	b.n	8016868 <HAL_ADC_ConfigChannel+0x9c>
 8016962:	bf00      	nop
 8016964:	40012000 	.word	0x40012000
 8016968:	40012300 	.word	0x40012300
 801696c:	10000012 	.word	0x10000012
 8016970:	20000018 	.word	0x20000018
 8016974:	431bde83 	.word	0x431bde83

08016978 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8016978:	2800      	cmp	r0, #0
 801697a:	db07      	blt.n	801698c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801697c:	f000 021f 	and.w	r2, r0, #31
 8016980:	0940      	lsrs	r0, r0, #5
 8016982:	2301      	movs	r3, #1
 8016984:	4093      	lsls	r3, r2
 8016986:	4a02      	ldr	r2, [pc, #8]	@ (8016990 <__NVIC_EnableIRQ+0x18>)
 8016988:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801698c:	4770      	bx	lr
 801698e:	bf00      	nop
 8016990:	e000e100 	.word	0xe000e100

08016994 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8016994:	2800      	cmp	r0, #0
 8016996:	db08      	blt.n	80169aa <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016998:	0109      	lsls	r1, r1, #4
 801699a:	b2c9      	uxtb	r1, r1
 801699c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80169a0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80169a4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80169a8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80169aa:	f000 000f 	and.w	r0, r0, #15
 80169ae:	0109      	lsls	r1, r1, #4
 80169b0:	b2c9      	uxtb	r1, r1
 80169b2:	4b01      	ldr	r3, [pc, #4]	@ (80169b8 <__NVIC_SetPriority+0x24>)
 80169b4:	5419      	strb	r1, [r3, r0]
  }
}
 80169b6:	4770      	bx	lr
 80169b8:	e000ed14 	.word	0xe000ed14

080169bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80169bc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80169be:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80169c2:	f1c0 0c07 	rsb	ip, r0, #7
 80169c6:	f1bc 0f04 	cmp.w	ip, #4
 80169ca:	bf28      	it	cs
 80169cc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80169d0:	1d03      	adds	r3, r0, #4
 80169d2:	2b06      	cmp	r3, #6
 80169d4:	d90f      	bls.n	80169f6 <NVIC_EncodePriority+0x3a>
 80169d6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80169d8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80169dc:	fa0e f00c 	lsl.w	r0, lr, ip
 80169e0:	ea21 0100 	bic.w	r1, r1, r0
 80169e4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80169e6:	fa0e fe03 	lsl.w	lr, lr, r3
 80169ea:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80169ee:	ea41 0002 	orr.w	r0, r1, r2
 80169f2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80169f6:	2300      	movs	r3, #0
 80169f8:	e7ee      	b.n	80169d8 <NVIC_EncodePriority+0x1c>
	...

080169fc <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80169fc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8016a00:	4905      	ldr	r1, [pc, #20]	@ (8016a18 <__NVIC_SystemReset+0x1c>)
 8016a02:	68ca      	ldr	r2, [r1, #12]
 8016a04:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8016a08:	4b04      	ldr	r3, [pc, #16]	@ (8016a1c <__NVIC_SystemReset+0x20>)
 8016a0a:	4313      	orrs	r3, r2
 8016a0c:	60cb      	str	r3, [r1, #12]
 8016a0e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8016a12:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8016a14:	e7fd      	b.n	8016a12 <__NVIC_SystemReset+0x16>
 8016a16:	bf00      	nop
 8016a18:	e000ed00 	.word	0xe000ed00
 8016a1c:	05fa0004 	.word	0x05fa0004

08016a20 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016a20:	4a07      	ldr	r2, [pc, #28]	@ (8016a40 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8016a22:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8016a24:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8016a28:	041b      	lsls	r3, r3, #16
 8016a2a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016a2c:	0200      	lsls	r0, r0, #8
 8016a2e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016a32:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8016a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8016a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8016a3c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8016a3e:	4770      	bx	lr
 8016a40:	e000ed00 	.word	0xe000ed00

08016a44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016a44:	b510      	push	{r4, lr}
 8016a46:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016a48:	4b05      	ldr	r3, [pc, #20]	@ (8016a60 <HAL_NVIC_SetPriority+0x1c>)
 8016a4a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016a4c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8016a50:	f7ff ffb4 	bl	80169bc <NVIC_EncodePriority>
 8016a54:	4601      	mov	r1, r0
 8016a56:	4620      	mov	r0, r4
 8016a58:	f7ff ff9c 	bl	8016994 <__NVIC_SetPriority>
}
 8016a5c:	bd10      	pop	{r4, pc}
 8016a5e:	bf00      	nop
 8016a60:	e000ed00 	.word	0xe000ed00

08016a64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016a64:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016a66:	f7ff ff87 	bl	8016978 <__NVIC_EnableIRQ>
}
 8016a6a:	bd08      	pop	{r3, pc}

08016a6c <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8016a6c:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 8016a6e:	f7ff ffc5 	bl	80169fc <__NVIC_SystemReset>
	...

08016a74 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016a74:	2300      	movs	r3, #0
 8016a76:	2b0f      	cmp	r3, #15
 8016a78:	f200 80d7 	bhi.w	8016c2a <HAL_GPIO_Init+0x1b6>
{
 8016a7c:	b570      	push	{r4, r5, r6, lr}
 8016a7e:	b082      	sub	sp, #8
 8016a80:	e065      	b.n	8016b4e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016a82:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016a84:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8016a88:	2403      	movs	r4, #3
 8016a8a:	fa04 f40e 	lsl.w	r4, r4, lr
 8016a8e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8016a92:	68cc      	ldr	r4, [r1, #12]
 8016a94:	fa04 f40e 	lsl.w	r4, r4, lr
 8016a98:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8016a9a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016a9c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016a9e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8016aa2:	684a      	ldr	r2, [r1, #4]
 8016aa4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8016aa8:	409a      	lsls	r2, r3
 8016aaa:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8016aac:	6042      	str	r2, [r0, #4]
 8016aae:	e05c      	b.n	8016b6a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016ab0:	08dc      	lsrs	r4, r3, #3
 8016ab2:	3408      	adds	r4, #8
 8016ab4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016ab8:	f003 0507 	and.w	r5, r3, #7
 8016abc:	00ad      	lsls	r5, r5, #2
 8016abe:	f04f 0e0f 	mov.w	lr, #15
 8016ac2:	fa0e fe05 	lsl.w	lr, lr, r5
 8016ac6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016aca:	690a      	ldr	r2, [r1, #16]
 8016acc:	40aa      	lsls	r2, r5
 8016ace:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8016ad2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8016ad6:	e05c      	b.n	8016b92 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016ad8:	2204      	movs	r2, #4
 8016ada:	e000      	b.n	8016ade <HAL_GPIO_Init+0x6a>
 8016adc:	2200      	movs	r2, #0
 8016ade:	fa02 f20e 	lsl.w	r2, r2, lr
 8016ae2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016ae4:	3402      	adds	r4, #2
 8016ae6:	4d51      	ldr	r5, [pc, #324]	@ (8016c2c <HAL_GPIO_Init+0x1b8>)
 8016ae8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016aec:	4a50      	ldr	r2, [pc, #320]	@ (8016c30 <HAL_GPIO_Init+0x1bc>)
 8016aee:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8016af0:	ea6f 020c 	mvn.w	r2, ip
 8016af4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016af8:	684e      	ldr	r6, [r1, #4]
 8016afa:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8016afe:	d001      	beq.n	8016b04 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8016b00:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8016b04:	4c4a      	ldr	r4, [pc, #296]	@ (8016c30 <HAL_GPIO_Init+0x1bc>)
 8016b06:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8016b08:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8016b0a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016b0e:	684e      	ldr	r6, [r1, #4]
 8016b10:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8016b14:	d001      	beq.n	8016b1a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8016b16:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8016b1a:	4c45      	ldr	r4, [pc, #276]	@ (8016c30 <HAL_GPIO_Init+0x1bc>)
 8016b1c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8016b1e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8016b20:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8016b24:	684e      	ldr	r6, [r1, #4]
 8016b26:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8016b2a:	d001      	beq.n	8016b30 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8016b2c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8016b30:	4c3f      	ldr	r4, [pc, #252]	@ (8016c30 <HAL_GPIO_Init+0x1bc>)
 8016b32:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016b34:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8016b36:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016b38:	684d      	ldr	r5, [r1, #4]
 8016b3a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8016b3e:	d001      	beq.n	8016b44 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8016b40:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8016b44:	4c3a      	ldr	r4, [pc, #232]	@ (8016c30 <HAL_GPIO_Init+0x1bc>)
 8016b46:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016b48:	3301      	adds	r3, #1
 8016b4a:	2b0f      	cmp	r3, #15
 8016b4c:	d86b      	bhi.n	8016c26 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8016b4e:	2201      	movs	r2, #1
 8016b50:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8016b52:	680c      	ldr	r4, [r1, #0]
 8016b54:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8016b58:	ea32 0404 	bics.w	r4, r2, r4
 8016b5c:	d1f4      	bne.n	8016b48 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016b5e:	684c      	ldr	r4, [r1, #4]
 8016b60:	f004 0403 	and.w	r4, r4, #3
 8016b64:	3c01      	subs	r4, #1
 8016b66:	2c01      	cmp	r4, #1
 8016b68:	d98b      	bls.n	8016a82 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8016b6a:	684a      	ldr	r2, [r1, #4]
 8016b6c:	f002 0203 	and.w	r2, r2, #3
 8016b70:	2a03      	cmp	r2, #3
 8016b72:	d009      	beq.n	8016b88 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8016b74:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016b76:	005d      	lsls	r5, r3, #1
 8016b78:	2203      	movs	r2, #3
 8016b7a:	40aa      	lsls	r2, r5
 8016b7c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8016b80:	688a      	ldr	r2, [r1, #8]
 8016b82:	40aa      	lsls	r2, r5
 8016b84:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8016b86:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016b88:	684a      	ldr	r2, [r1, #4]
 8016b8a:	f002 0203 	and.w	r2, r2, #3
 8016b8e:	2a02      	cmp	r2, #2
 8016b90:	d08e      	beq.n	8016ab0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8016b92:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016b94:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8016b98:	2203      	movs	r2, #3
 8016b9a:	fa02 f20e 	lsl.w	r2, r2, lr
 8016b9e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016ba2:	684a      	ldr	r2, [r1, #4]
 8016ba4:	f002 0203 	and.w	r2, r2, #3
 8016ba8:	fa02 f20e 	lsl.w	r2, r2, lr
 8016bac:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8016bae:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8016bb0:	684a      	ldr	r2, [r1, #4]
 8016bb2:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8016bb6:	d0c7      	beq.n	8016b48 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016bb8:	2200      	movs	r2, #0
 8016bba:	9201      	str	r2, [sp, #4]
 8016bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8016c34 <HAL_GPIO_Init+0x1c0>)
 8016bbe:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8016bc0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8016bc4:	6454      	str	r4, [r2, #68]	@ 0x44
 8016bc6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8016bc8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8016bcc:	9201      	str	r2, [sp, #4]
 8016bce:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8016bd0:	089c      	lsrs	r4, r3, #2
 8016bd2:	1ca5      	adds	r5, r4, #2
 8016bd4:	4a15      	ldr	r2, [pc, #84]	@ (8016c2c <HAL_GPIO_Init+0x1b8>)
 8016bd6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8016bda:	f003 0e03 	and.w	lr, r3, #3
 8016bde:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8016be2:	220f      	movs	r2, #15
 8016be4:	fa02 f20e 	lsl.w	r2, r2, lr
 8016be8:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016bec:	4a12      	ldr	r2, [pc, #72]	@ (8016c38 <HAL_GPIO_Init+0x1c4>)
 8016bee:	4290      	cmp	r0, r2
 8016bf0:	f43f af74 	beq.w	8016adc <HAL_GPIO_Init+0x68>
 8016bf4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016bf8:	4290      	cmp	r0, r2
 8016bfa:	d00e      	beq.n	8016c1a <HAL_GPIO_Init+0x1a6>
 8016bfc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016c00:	4290      	cmp	r0, r2
 8016c02:	d00c      	beq.n	8016c1e <HAL_GPIO_Init+0x1aa>
 8016c04:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016c08:	4290      	cmp	r0, r2
 8016c0a:	d00a      	beq.n	8016c22 <HAL_GPIO_Init+0x1ae>
 8016c0c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016c10:	4290      	cmp	r0, r2
 8016c12:	f43f af61 	beq.w	8016ad8 <HAL_GPIO_Init+0x64>
 8016c16:	2207      	movs	r2, #7
 8016c18:	e761      	b.n	8016ade <HAL_GPIO_Init+0x6a>
 8016c1a:	2201      	movs	r2, #1
 8016c1c:	e75f      	b.n	8016ade <HAL_GPIO_Init+0x6a>
 8016c1e:	2202      	movs	r2, #2
 8016c20:	e75d      	b.n	8016ade <HAL_GPIO_Init+0x6a>
 8016c22:	2203      	movs	r2, #3
 8016c24:	e75b      	b.n	8016ade <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8016c26:	b002      	add	sp, #8
 8016c28:	bd70      	pop	{r4, r5, r6, pc}
 8016c2a:	4770      	bx	lr
 8016c2c:	40013800 	.word	0x40013800
 8016c30:	40013c00 	.word	0x40013c00
 8016c34:	40023800 	.word	0x40023800
 8016c38:	40020000 	.word	0x40020000

08016c3c <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	2b0f      	cmp	r3, #15
 8016c40:	d87c      	bhi.n	8016d3c <HAL_GPIO_DeInit+0x100>
{
 8016c42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c44:	e02d      	b.n	8016ca2 <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8016c46:	2504      	movs	r5, #4
 8016c48:	e000      	b.n	8016c4c <HAL_GPIO_DeInit+0x10>
 8016c4a:	2500      	movs	r5, #0
 8016c4c:	fa05 f50c 	lsl.w	r5, r5, ip
 8016c50:	42a5      	cmp	r5, r4
 8016c52:	d057      	beq.n	8016d04 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016c54:	6804      	ldr	r4, [r0, #0]
 8016c56:	005d      	lsls	r5, r3, #1
 8016c58:	f04f 0c03 	mov.w	ip, #3
 8016c5c:	fa0c fc05 	lsl.w	ip, ip, r5
 8016c60:	ea24 040c 	bic.w	r4, r4, ip
 8016c64:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016c66:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8016c6a:	f10e 0e08 	add.w	lr, lr, #8
 8016c6e:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8016c72:	f003 0607 	and.w	r6, r3, #7
 8016c76:	00b6      	lsls	r6, r6, #2
 8016c78:	250f      	movs	r5, #15
 8016c7a:	40b5      	lsls	r5, r6
 8016c7c:	ea24 0405 	bic.w	r4, r4, r5
 8016c80:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016c84:	68c4      	ldr	r4, [r0, #12]
 8016c86:	ea24 040c 	bic.w	r4, r4, ip
 8016c8a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016c8c:	6844      	ldr	r4, [r0, #4]
 8016c8e:	ea24 0202 	bic.w	r2, r4, r2
 8016c92:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016c94:	6882      	ldr	r2, [r0, #8]
 8016c96:	ea22 020c 	bic.w	r2, r2, ip
 8016c9a:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016c9c:	3301      	adds	r3, #1
 8016c9e:	2b0f      	cmp	r3, #15
 8016ca0:	d84b      	bhi.n	8016d3a <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8016ca2:	2201      	movs	r2, #1
 8016ca4:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8016ca6:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8016caa:	ea32 0401 	bics.w	r4, r2, r1
 8016cae:	d1f5      	bne.n	8016c9c <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8016cb0:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8016cb4:	f10e 0502 	add.w	r5, lr, #2
 8016cb8:	4c21      	ldr	r4, [pc, #132]	@ (8016d40 <HAL_GPIO_DeInit+0x104>)
 8016cba:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8016cbe:	f003 0c03 	and.w	ip, r3, #3
 8016cc2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8016cc6:	250f      	movs	r5, #15
 8016cc8:	fa05 f70c 	lsl.w	r7, r5, ip
 8016ccc:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8016cce:	4d1d      	ldr	r5, [pc, #116]	@ (8016d44 <HAL_GPIO_DeInit+0x108>)
 8016cd0:	42a8      	cmp	r0, r5
 8016cd2:	d0ba      	beq.n	8016c4a <HAL_GPIO_DeInit+0xe>
 8016cd4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016cd8:	42a8      	cmp	r0, r5
 8016cda:	d00d      	beq.n	8016cf8 <HAL_GPIO_DeInit+0xbc>
 8016cdc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016ce0:	42a8      	cmp	r0, r5
 8016ce2:	d00b      	beq.n	8016cfc <HAL_GPIO_DeInit+0xc0>
 8016ce4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016ce8:	42a8      	cmp	r0, r5
 8016cea:	d009      	beq.n	8016d00 <HAL_GPIO_DeInit+0xc4>
 8016cec:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016cf0:	42a8      	cmp	r0, r5
 8016cf2:	d0a8      	beq.n	8016c46 <HAL_GPIO_DeInit+0xa>
 8016cf4:	2507      	movs	r5, #7
 8016cf6:	e7a9      	b.n	8016c4c <HAL_GPIO_DeInit+0x10>
 8016cf8:	2501      	movs	r5, #1
 8016cfa:	e7a7      	b.n	8016c4c <HAL_GPIO_DeInit+0x10>
 8016cfc:	2502      	movs	r5, #2
 8016cfe:	e7a5      	b.n	8016c4c <HAL_GPIO_DeInit+0x10>
 8016d00:	2503      	movs	r5, #3
 8016d02:	e7a3      	b.n	8016c4c <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8016d04:	4c10      	ldr	r4, [pc, #64]	@ (8016d48 <HAL_GPIO_DeInit+0x10c>)
 8016d06:	6825      	ldr	r5, [r4, #0]
 8016d08:	ea25 0506 	bic.w	r5, r5, r6
 8016d0c:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8016d0e:	6865      	ldr	r5, [r4, #4]
 8016d10:	ea25 0506 	bic.w	r5, r5, r6
 8016d14:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8016d16:	68e5      	ldr	r5, [r4, #12]
 8016d18:	ea25 0506 	bic.w	r5, r5, r6
 8016d1c:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8016d1e:	68a5      	ldr	r5, [r4, #8]
 8016d20:	ea25 0506 	bic.w	r5, r5, r6
 8016d24:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8016d26:	4e06      	ldr	r6, [pc, #24]	@ (8016d40 <HAL_GPIO_DeInit+0x104>)
 8016d28:	f10e 0402 	add.w	r4, lr, #2
 8016d2c:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8016d30:	ea25 0507 	bic.w	r5, r5, r7
 8016d34:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8016d38:	e78c      	b.n	8016c54 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8016d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d3c:	4770      	bx	lr
 8016d3e:	bf00      	nop
 8016d40:	40013800 	.word	0x40013800
 8016d44:	40020000 	.word	0x40020000
 8016d48:	40013c00 	.word	0x40013c00

08016d4c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8016d4c:	6903      	ldr	r3, [r0, #16]
 8016d4e:	4219      	tst	r1, r3
 8016d50:	d001      	beq.n	8016d56 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8016d52:	2001      	movs	r0, #1
 8016d54:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016d56:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8016d58:	4770      	bx	lr

08016d5a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8016d5a:	b10a      	cbz	r2, 8016d60 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016d5c:	6181      	str	r1, [r0, #24]
 8016d5e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8016d60:	0409      	lsls	r1, r1, #16
 8016d62:	6181      	str	r1, [r0, #24]
  }
}
 8016d64:	4770      	bx	lr

08016d66 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8016d66:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8016d68:	ea01 0203 	and.w	r2, r1, r3
 8016d6c:	ea21 0103 	bic.w	r1, r1, r3
 8016d70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016d74:	6181      	str	r1, [r0, #24]
}
 8016d76:	4770      	bx	lr

08016d78 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016d78:	6803      	ldr	r3, [r0, #0]
 8016d7a:	695a      	ldr	r2, [r3, #20]
 8016d7c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8016d80:	d101      	bne.n	8016d86 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8016d82:	2000      	movs	r0, #0
}
 8016d84:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016d86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016d8a:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8016d90:	2220      	movs	r2, #32
 8016d92:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016d96:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8016d9a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8016d9c:	f042 0204 	orr.w	r2, r2, #4
 8016da0:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8016da2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8016da6:	2001      	movs	r0, #1
 8016da8:	4770      	bx	lr

08016daa <I2C_WaitOnFlagUntilTimeout>:
{
 8016daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dae:	4606      	mov	r6, r0
 8016db0:	460c      	mov	r4, r1
 8016db2:	4617      	mov	r7, r2
 8016db4:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016db6:	e03b      	b.n	8016e30 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016db8:	f7ff fc28 	bl	801660c <HAL_GetTick>
 8016dbc:	9b06      	ldr	r3, [sp, #24]
 8016dbe:	1ac0      	subs	r0, r0, r3
 8016dc0:	4540      	cmp	r0, r8
 8016dc2:	d802      	bhi.n	8016dca <I2C_WaitOnFlagUntilTimeout+0x20>
 8016dc4:	f1b8 0f00 	cmp.w	r8, #0
 8016dc8:	d132      	bne.n	8016e30 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016dca:	2d01      	cmp	r5, #1
 8016dcc:	d018      	beq.n	8016e00 <I2C_WaitOnFlagUntilTimeout+0x56>
 8016dce:	6833      	ldr	r3, [r6, #0]
 8016dd0:	699b      	ldr	r3, [r3, #24]
 8016dd2:	ea24 0303 	bic.w	r3, r4, r3
 8016dd6:	b29b      	uxth	r3, r3
 8016dd8:	fab3 f383 	clz	r3, r3
 8016ddc:	095b      	lsrs	r3, r3, #5
 8016dde:	429f      	cmp	r7, r3
 8016de0:	d126      	bne.n	8016e30 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8016de2:	2300      	movs	r3, #0
 8016de4:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8016de6:	2220      	movs	r2, #32
 8016de8:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8016dec:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8016df0:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016df2:	f042 0220 	orr.w	r2, r2, #32
 8016df6:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016df8:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8016dfc:	2001      	movs	r0, #1
 8016dfe:	e027      	b.n	8016e50 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016e00:	6833      	ldr	r3, [r6, #0]
 8016e02:	695b      	ldr	r3, [r3, #20]
 8016e04:	ea24 0303 	bic.w	r3, r4, r3
 8016e08:	b29b      	uxth	r3, r3
 8016e0a:	fab3 f383 	clz	r3, r3
 8016e0e:	095b      	lsrs	r3, r3, #5
 8016e10:	e7e5      	b.n	8016dde <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016e12:	6833      	ldr	r3, [r6, #0]
 8016e14:	695b      	ldr	r3, [r3, #20]
 8016e16:	ea24 0c03 	bic.w	ip, r4, r3
 8016e1a:	fa1f fc8c 	uxth.w	ip, ip
 8016e1e:	fabc fc8c 	clz	ip, ip
 8016e22:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016e26:	4567      	cmp	r7, ip
 8016e28:	d111      	bne.n	8016e4e <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8016e2a:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8016e2e:	d1c3      	bne.n	8016db8 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016e30:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8016e34:	2d01      	cmp	r5, #1
 8016e36:	d0ec      	beq.n	8016e12 <I2C_WaitOnFlagUntilTimeout+0x68>
 8016e38:	6833      	ldr	r3, [r6, #0]
 8016e3a:	699b      	ldr	r3, [r3, #24]
 8016e3c:	ea24 0c03 	bic.w	ip, r4, r3
 8016e40:	fa1f fc8c 	uxth.w	ip, ip
 8016e44:	fabc fc8c 	clz	ip, ip
 8016e48:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016e4c:	e7eb      	b.n	8016e26 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8016e4e:	2000      	movs	r0, #0
}
 8016e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8016e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e58:	4605      	mov	r5, r0
 8016e5a:	460e      	mov	r6, r1
 8016e5c:	4690      	mov	r8, r2
 8016e5e:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016e60:	e053      	b.n	8016f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016e62:	681a      	ldr	r2, [r3, #0]
 8016e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016e68:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016e6a:	682b      	ldr	r3, [r5, #0]
 8016e6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016e70:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8016e72:	2300      	movs	r3, #0
 8016e74:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8016e76:	2220      	movs	r2, #32
 8016e78:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016e7c:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8016e80:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8016e82:	f042 0204 	orr.w	r2, r2, #4
 8016e86:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8016e88:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8016e8c:	2001      	movs	r0, #1
 8016e8e:	e04a      	b.n	8016f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016e90:	f7ff fbbc 	bl	801660c <HAL_GetTick>
 8016e94:	eba0 0009 	sub.w	r0, r0, r9
 8016e98:	4540      	cmp	r0, r8
 8016e9a:	d802      	bhi.n	8016ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8016e9c:	f1b8 0f00 	cmp.w	r8, #0
 8016ea0:	d133      	bne.n	8016f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8016ea2:	2f01      	cmp	r7, #1
 8016ea4:	d017      	beq.n	8016ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8016ea6:	682b      	ldr	r3, [r5, #0]
 8016ea8:	699b      	ldr	r3, [r3, #24]
 8016eaa:	ea26 0303 	bic.w	r3, r6, r3
 8016eae:	b29b      	uxth	r3, r3
 8016eb0:	3b00      	subs	r3, #0
 8016eb2:	bf18      	it	ne
 8016eb4:	2301      	movne	r3, #1
 8016eb6:	b343      	cbz	r3, 8016f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016eb8:	2300      	movs	r3, #0
 8016eba:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016ebc:	2220      	movs	r2, #32
 8016ebe:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016ec2:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016ec6:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8016ec8:	f042 0220 	orr.w	r2, r2, #32
 8016ecc:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016ece:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8016ed2:	2001      	movs	r0, #1
 8016ed4:	e027      	b.n	8016f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8016ed6:	682b      	ldr	r3, [r5, #0]
 8016ed8:	695b      	ldr	r3, [r3, #20]
 8016eda:	ea26 0303 	bic.w	r3, r6, r3
 8016ede:	b29b      	uxth	r3, r3
 8016ee0:	3b00      	subs	r3, #0
 8016ee2:	bf18      	it	ne
 8016ee4:	2301      	movne	r3, #1
 8016ee6:	e7e6      	b.n	8016eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016ee8:	682b      	ldr	r3, [r5, #0]
 8016eea:	699c      	ldr	r4, [r3, #24]
 8016eec:	ea26 0404 	bic.w	r4, r6, r4
 8016ef0:	b2a4      	uxth	r4, r4
 8016ef2:	3c00      	subs	r4, #0
 8016ef4:	bf18      	it	ne
 8016ef6:	2401      	movne	r4, #1
 8016ef8:	b1a4      	cbz	r4, 8016f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016efa:	682b      	ldr	r3, [r5, #0]
 8016efc:	695a      	ldr	r2, [r3, #20]
 8016efe:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8016f02:	d1ae      	bne.n	8016e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8016f04:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8016f08:	d1c2      	bne.n	8016e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016f0a:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8016f0e:	2f01      	cmp	r7, #1
 8016f10:	d1ea      	bne.n	8016ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8016f12:	682b      	ldr	r3, [r5, #0]
 8016f14:	695c      	ldr	r4, [r3, #20]
 8016f16:	ea26 0404 	bic.w	r4, r6, r4
 8016f1a:	b2a4      	uxth	r4, r4
 8016f1c:	3c00      	subs	r4, #0
 8016f1e:	bf18      	it	ne
 8016f20:	2401      	movne	r4, #1
 8016f22:	e7e9      	b.n	8016ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8016f24:	2000      	movs	r0, #0
}
 8016f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08016f2c <I2C_MasterRequestWrite>:
{
 8016f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f2e:	b083      	sub	sp, #12
 8016f30:	4604      	mov	r4, r0
 8016f32:	460d      	mov	r5, r1
 8016f34:	4616      	mov	r6, r2
 8016f36:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8016f38:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8016f3a:	2b08      	cmp	r3, #8
 8016f3c:	d00d      	beq.n	8016f5a <I2C_MasterRequestWrite+0x2e>
 8016f3e:	2b01      	cmp	r3, #1
 8016f40:	d00b      	beq.n	8016f5a <I2C_MasterRequestWrite+0x2e>
 8016f42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8016f46:	d008      	beq.n	8016f5a <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8016f48:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016f4a:	2b12      	cmp	r3, #18
 8016f4c:	d10a      	bne.n	8016f64 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016f4e:	6802      	ldr	r2, [r0, #0]
 8016f50:	6813      	ldr	r3, [r2, #0]
 8016f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016f56:	6013      	str	r3, [r2, #0]
 8016f58:	e004      	b.n	8016f64 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016f5a:	6822      	ldr	r2, [r4, #0]
 8016f5c:	6813      	ldr	r3, [r2, #0]
 8016f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016f62:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8016f64:	9700      	str	r7, [sp, #0]
 8016f66:	4633      	mov	r3, r6
 8016f68:	2200      	movs	r2, #0
 8016f6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8016f6e:	4620      	mov	r0, r4
 8016f70:	f7ff ff1b 	bl	8016daa <I2C_WaitOnFlagUntilTimeout>
 8016f74:	b980      	cbnz	r0, 8016f98 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016f76:	6923      	ldr	r3, [r4, #16]
 8016f78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016f7c:	d116      	bne.n	8016fac <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016f7e:	6823      	ldr	r3, [r4, #0]
 8016f80:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8016f84:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8016f86:	463b      	mov	r3, r7
 8016f88:	4632      	mov	r2, r6
 8016f8a:	4913      	ldr	r1, [pc, #76]	@ (8016fd8 <I2C_MasterRequestWrite+0xac>)
 8016f8c:	4620      	mov	r0, r4
 8016f8e:	f7ff ff61 	bl	8016e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016f92:	b9f8      	cbnz	r0, 8016fd4 <I2C_MasterRequestWrite+0xa8>
}
 8016f94:	b003      	add	sp, #12
 8016f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016f98:	6823      	ldr	r3, [r4, #0]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016fa0:	d002      	beq.n	8016fa8 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016fa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016fa6:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8016fa8:	2003      	movs	r0, #3
 8016faa:	e7f3      	b.n	8016f94 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8016fac:	11eb      	asrs	r3, r5, #7
 8016fae:	6822      	ldr	r2, [r4, #0]
 8016fb0:	f003 0306 	and.w	r3, r3, #6
 8016fb4:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8016fb8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8016fba:	463b      	mov	r3, r7
 8016fbc:	4632      	mov	r2, r6
 8016fbe:	4907      	ldr	r1, [pc, #28]	@ (8016fdc <I2C_MasterRequestWrite+0xb0>)
 8016fc0:	4620      	mov	r0, r4
 8016fc2:	f7ff ff47 	bl	8016e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016fc6:	b918      	cbnz	r0, 8016fd0 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8016fc8:	6823      	ldr	r3, [r4, #0]
 8016fca:	b2ed      	uxtb	r5, r5
 8016fcc:	611d      	str	r5, [r3, #16]
 8016fce:	e7da      	b.n	8016f86 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8016fd0:	2001      	movs	r0, #1
 8016fd2:	e7df      	b.n	8016f94 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8016fd4:	2001      	movs	r0, #1
 8016fd6:	e7dd      	b.n	8016f94 <I2C_MasterRequestWrite+0x68>
 8016fd8:	00010002 	.word	0x00010002
 8016fdc:	00010008 	.word	0x00010008

08016fe0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8016fe0:	b570      	push	{r4, r5, r6, lr}
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	460d      	mov	r5, r1
 8016fe6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016fe8:	6823      	ldr	r3, [r4, #0]
 8016fea:	695b      	ldr	r3, [r3, #20]
 8016fec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016ff0:	d121      	bne.n	8017036 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	f7ff fec0 	bl	8016d78 <I2C_IsAcknowledgeFailed>
 8016ff8:	b9f8      	cbnz	r0, 801703a <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8016ffa:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016ffe:	d0f3      	beq.n	8016fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017000:	f7ff fb04 	bl	801660c <HAL_GetTick>
 8017004:	1b80      	subs	r0, r0, r6
 8017006:	42a8      	cmp	r0, r5
 8017008:	d801      	bhi.n	801700e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 801700a:	2d00      	cmp	r5, #0
 801700c:	d1ec      	bne.n	8016fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 801700e:	6823      	ldr	r3, [r4, #0]
 8017010:	695b      	ldr	r3, [r3, #20]
 8017012:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017016:	d1e7      	bne.n	8016fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017018:	2300      	movs	r3, #0
 801701a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801701c:	2220      	movs	r2, #32
 801701e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017022:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017026:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8017028:	f042 0220 	orr.w	r2, r2, #32
 801702c:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 801702e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8017032:	2001      	movs	r0, #1
 8017034:	e000      	b.n	8017038 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8017036:	2000      	movs	r0, #0
}
 8017038:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 801703a:	2001      	movs	r0, #1
 801703c:	e7fc      	b.n	8017038 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

0801703e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 801703e:	b570      	push	{r4, r5, r6, lr}
 8017040:	4604      	mov	r4, r0
 8017042:	460d      	mov	r5, r1
 8017044:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8017046:	6823      	ldr	r3, [r4, #0]
 8017048:	695b      	ldr	r3, [r3, #20]
 801704a:	f013 0f04 	tst.w	r3, #4
 801704e:	d121      	bne.n	8017094 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8017050:	4620      	mov	r0, r4
 8017052:	f7ff fe91 	bl	8016d78 <I2C_IsAcknowledgeFailed>
 8017056:	b9f8      	cbnz	r0, 8017098 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8017058:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801705c:	d0f3      	beq.n	8017046 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801705e:	f7ff fad5 	bl	801660c <HAL_GetTick>
 8017062:	1b80      	subs	r0, r0, r6
 8017064:	42a8      	cmp	r0, r5
 8017066:	d801      	bhi.n	801706c <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8017068:	2d00      	cmp	r5, #0
 801706a:	d1ec      	bne.n	8017046 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 801706c:	6823      	ldr	r3, [r4, #0]
 801706e:	695b      	ldr	r3, [r3, #20]
 8017070:	f013 0f04 	tst.w	r3, #4
 8017074:	d1e7      	bne.n	8017046 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017076:	2300      	movs	r3, #0
 8017078:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801707a:	2220      	movs	r2, #32
 801707c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017080:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017084:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8017086:	f042 0220 	orr.w	r2, r2, #32
 801708a:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 801708c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8017090:	2001      	movs	r0, #1
 8017092:	e000      	b.n	8017096 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8017094:	2000      	movs	r0, #0
}
 8017096:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8017098:	2001      	movs	r0, #1
 801709a:	e7fc      	b.n	8017096 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

0801709c <HAL_I2C_Init>:
  if (hi2c == NULL)
 801709c:	2800      	cmp	r0, #0
 801709e:	f000 80cc 	beq.w	801723a <HAL_I2C_Init+0x19e>
{
 80170a2:	b570      	push	{r4, r5, r6, lr}
 80170a4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80170a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d077      	beq.n	801719e <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80170ae:	2324      	movs	r3, #36	@ 0x24
 80170b0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80170b4:	6822      	ldr	r2, [r4, #0]
 80170b6:	6813      	ldr	r3, [r2, #0]
 80170b8:	f023 0301 	bic.w	r3, r3, #1
 80170bc:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80170be:	6822      	ldr	r2, [r4, #0]
 80170c0:	6813      	ldr	r3, [r2, #0]
 80170c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80170c6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80170c8:	6822      	ldr	r2, [r4, #0]
 80170ca:	6813      	ldr	r3, [r2, #0]
 80170cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80170d0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80170d2:	f000 fdb3 	bl	8017c3c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80170d6:	6862      	ldr	r2, [r4, #4]
 80170d8:	4b5a      	ldr	r3, [pc, #360]	@ (8017244 <HAL_I2C_Init+0x1a8>)
 80170da:	429a      	cmp	r2, r3
 80170dc:	d864      	bhi.n	80171a8 <HAL_I2C_Init+0x10c>
 80170de:	4b5a      	ldr	r3, [pc, #360]	@ (8017248 <HAL_I2C_Init+0x1ac>)
 80170e0:	4298      	cmp	r0, r3
 80170e2:	bf8c      	ite	hi
 80170e4:	2300      	movhi	r3, #0
 80170e6:	2301      	movls	r3, #1
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	f040 80a8 	bne.w	801723e <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80170ee:	4957      	ldr	r1, [pc, #348]	@ (801724c <HAL_I2C_Init+0x1b0>)
 80170f0:	fba1 3100 	umull	r3, r1, r1, r0
 80170f4:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80170f6:	6825      	ldr	r5, [r4, #0]
 80170f8:	686a      	ldr	r2, [r5, #4]
 80170fa:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80170fe:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8017102:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8017104:	6821      	ldr	r1, [r4, #0]
 8017106:	6a0a      	ldr	r2, [r1, #32]
 8017108:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 801710c:	6866      	ldr	r6, [r4, #4]
 801710e:	4d4d      	ldr	r5, [pc, #308]	@ (8017244 <HAL_I2C_Init+0x1a8>)
 8017110:	42ae      	cmp	r6, r5
 8017112:	d84f      	bhi.n	80171b4 <HAL_I2C_Init+0x118>
 8017114:	3301      	adds	r3, #1
 8017116:	4313      	orrs	r3, r2
 8017118:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801711a:	6821      	ldr	r1, [r4, #0]
 801711c:	69ca      	ldr	r2, [r1, #28]
 801711e:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8017122:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8017126:	6865      	ldr	r5, [r4, #4]
 8017128:	4b46      	ldr	r3, [pc, #280]	@ (8017244 <HAL_I2C_Init+0x1a8>)
 801712a:	429d      	cmp	r5, r3
 801712c:	d84c      	bhi.n	80171c8 <HAL_I2C_Init+0x12c>
 801712e:	1e43      	subs	r3, r0, #1
 8017130:	006d      	lsls	r5, r5, #1
 8017132:	fbb3 f3f5 	udiv	r3, r3, r5
 8017136:	3301      	adds	r3, #1
 8017138:	f640 70fc 	movw	r0, #4092	@ 0xffc
 801713c:	4203      	tst	r3, r0
 801713e:	d078      	beq.n	8017232 <HAL_I2C_Init+0x196>
 8017140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017144:	431a      	orrs	r2, r3
 8017146:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8017148:	6821      	ldr	r1, [r4, #0]
 801714a:	680b      	ldr	r3, [r1, #0]
 801714c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8017150:	69e2      	ldr	r2, [r4, #28]
 8017152:	6a20      	ldr	r0, [r4, #32]
 8017154:	4302      	orrs	r2, r0
 8017156:	4313      	orrs	r3, r2
 8017158:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801715a:	6821      	ldr	r1, [r4, #0]
 801715c:	688b      	ldr	r3, [r1, #8]
 801715e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8017162:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8017166:	6922      	ldr	r2, [r4, #16]
 8017168:	68e0      	ldr	r0, [r4, #12]
 801716a:	4302      	orrs	r2, r0
 801716c:	4313      	orrs	r3, r2
 801716e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8017170:	6821      	ldr	r1, [r4, #0]
 8017172:	68cb      	ldr	r3, [r1, #12]
 8017174:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8017178:	6962      	ldr	r2, [r4, #20]
 801717a:	69a0      	ldr	r0, [r4, #24]
 801717c:	4302      	orrs	r2, r0
 801717e:	4313      	orrs	r3, r2
 8017180:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8017182:	6822      	ldr	r2, [r4, #0]
 8017184:	6813      	ldr	r3, [r2, #0]
 8017186:	f043 0301 	orr.w	r3, r3, #1
 801718a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801718c:	2000      	movs	r0, #0
 801718e:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8017190:	2320      	movs	r3, #32
 8017192:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8017196:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017198:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 801719c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 801719e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80171a2:	f7fa ff97 	bl	80120d4 <HAL_I2C_MspInit>
 80171a6:	e782      	b.n	80170ae <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80171a8:	4b29      	ldr	r3, [pc, #164]	@ (8017250 <HAL_I2C_Init+0x1b4>)
 80171aa:	4298      	cmp	r0, r3
 80171ac:	bf8c      	ite	hi
 80171ae:	2300      	movhi	r3, #0
 80171b0:	2301      	movls	r3, #1
 80171b2:	e799      	b.n	80170e8 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80171b4:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80171b8:	fb05 f303 	mul.w	r3, r5, r3
 80171bc:	4d25      	ldr	r5, [pc, #148]	@ (8017254 <HAL_I2C_Init+0x1b8>)
 80171be:	fba5 5303 	umull	r5, r3, r5, r3
 80171c2:	099b      	lsrs	r3, r3, #6
 80171c4:	3301      	adds	r3, #1
 80171c6:	e7a6      	b.n	8017116 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80171c8:	68a6      	ldr	r6, [r4, #8]
 80171ca:	b9be      	cbnz	r6, 80171fc <HAL_I2C_Init+0x160>
 80171cc:	1e43      	subs	r3, r0, #1
 80171ce:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80171d2:	fbb3 f3fc 	udiv	r3, r3, ip
 80171d6:	3301      	adds	r3, #1
 80171d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80171dc:	fab3 f383 	clz	r3, r3
 80171e0:	095b      	lsrs	r3, r3, #5
 80171e2:	bb43      	cbnz	r3, 8017236 <HAL_I2C_Init+0x19a>
 80171e4:	b9c6      	cbnz	r6, 8017218 <HAL_I2C_Init+0x17c>
 80171e6:	1e43      	subs	r3, r0, #1
 80171e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171ec:	fbb3 f3f5 	udiv	r3, r3, r5
 80171f0:	3301      	adds	r3, #1
 80171f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80171f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80171fa:	e7a3      	b.n	8017144 <HAL_I2C_Init+0xa8>
 80171fc:	1e43      	subs	r3, r0, #1
 80171fe:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8017202:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8017206:	fbb3 f3fc 	udiv	r3, r3, ip
 801720a:	3301      	adds	r3, #1
 801720c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017210:	fab3 f383 	clz	r3, r3
 8017214:	095b      	lsrs	r3, r3, #5
 8017216:	e7e4      	b.n	80171e2 <HAL_I2C_Init+0x146>
 8017218:	1e43      	subs	r3, r0, #1
 801721a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801721e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8017222:	fbb3 f3f5 	udiv	r3, r3, r5
 8017226:	3301      	adds	r3, #1
 8017228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801722c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8017230:	e788      	b.n	8017144 <HAL_I2C_Init+0xa8>
 8017232:	2304      	movs	r3, #4
 8017234:	e786      	b.n	8017144 <HAL_I2C_Init+0xa8>
 8017236:	2301      	movs	r3, #1
 8017238:	e784      	b.n	8017144 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 801723a:	2001      	movs	r0, #1
}
 801723c:	4770      	bx	lr
    return HAL_ERROR;
 801723e:	2001      	movs	r0, #1
 8017240:	e7ac      	b.n	801719c <HAL_I2C_Init+0x100>
 8017242:	bf00      	nop
 8017244:	000186a0 	.word	0x000186a0
 8017248:	001e847f 	.word	0x001e847f
 801724c:	431bde83 	.word	0x431bde83
 8017250:	003d08ff 	.word	0x003d08ff
 8017254:	10624dd3 	.word	0x10624dd3

08017258 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8017258:	b1a8      	cbz	r0, 8017286 <HAL_I2C_DeInit+0x2e>
{
 801725a:	b510      	push	{r4, lr}
 801725c:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 801725e:	2324      	movs	r3, #36	@ 0x24
 8017260:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8017264:	6802      	ldr	r2, [r0, #0]
 8017266:	6813      	ldr	r3, [r2, #0]
 8017268:	f023 0301 	bic.w	r3, r3, #1
 801726c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 801726e:	f7fa ff6b 	bl	8012148 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8017272:	2000      	movs	r0, #0
 8017274:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8017276:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801727a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801727c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8017280:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8017284:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8017286:	2001      	movs	r0, #1
}
 8017288:	4770      	bx	lr
	...

0801728c <HAL_I2C_Master_Transmit>:
{
 801728c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017290:	b085      	sub	sp, #20
 8017292:	4604      	mov	r4, r0
 8017294:	460f      	mov	r7, r1
 8017296:	4691      	mov	r9, r2
 8017298:	4698      	mov	r8, r3
 801729a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 801729c:	f7ff f9b6 	bl	801660c <HAL_GetTick>
 80172a0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80172a2:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 80172a6:	b2c0      	uxtb	r0, r0
 80172a8:	2820      	cmp	r0, #32
 80172aa:	d004      	beq.n	80172b6 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 80172ac:	2702      	movs	r7, #2
}
 80172ae:	4638      	mov	r0, r7
 80172b0:	b005      	add	sp, #20
 80172b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80172b6:	9500      	str	r5, [sp, #0]
 80172b8:	2319      	movs	r3, #25
 80172ba:	2201      	movs	r2, #1
 80172bc:	494f      	ldr	r1, [pc, #316]	@ (80173fc <HAL_I2C_Master_Transmit+0x170>)
 80172be:	4620      	mov	r0, r4
 80172c0:	f7ff fd73 	bl	8016daa <I2C_WaitOnFlagUntilTimeout>
 80172c4:	2800      	cmp	r0, #0
 80172c6:	f040 8092 	bne.w	80173ee <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 80172ca:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80172ce:	2b01      	cmp	r3, #1
 80172d0:	f000 808f 	beq.w	80173f2 <HAL_I2C_Master_Transmit+0x166>
 80172d4:	2301      	movs	r3, #1
 80172d6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80172da:	6823      	ldr	r3, [r4, #0]
 80172dc:	681a      	ldr	r2, [r3, #0]
 80172de:	f012 0f01 	tst.w	r2, #1
 80172e2:	d103      	bne.n	80172ec <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80172e4:	681a      	ldr	r2, [r3, #0]
 80172e6:	f042 0201 	orr.w	r2, r2, #1
 80172ea:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80172ec:	6822      	ldr	r2, [r4, #0]
 80172ee:	6813      	ldr	r3, [r2, #0]
 80172f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80172f4:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80172f6:	2321      	movs	r3, #33	@ 0x21
 80172f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80172fc:	2310      	movs	r3, #16
 80172fe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8017302:	2300      	movs	r3, #0
 8017304:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8017306:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801730a:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801730e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8017310:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017312:	4b3b      	ldr	r3, [pc, #236]	@ (8017400 <HAL_I2C_Master_Transmit+0x174>)
 8017314:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8017316:	462b      	mov	r3, r5
 8017318:	4632      	mov	r2, r6
 801731a:	4639      	mov	r1, r7
 801731c:	4620      	mov	r0, r4
 801731e:	f7ff fe05 	bl	8016f2c <I2C_MasterRequestWrite>
 8017322:	4607      	mov	r7, r0
 8017324:	2800      	cmp	r0, #0
 8017326:	d166      	bne.n	80173f6 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017328:	2300      	movs	r3, #0
 801732a:	9303      	str	r3, [sp, #12]
 801732c:	6823      	ldr	r3, [r4, #0]
 801732e:	695a      	ldr	r2, [r3, #20]
 8017330:	9203      	str	r2, [sp, #12]
 8017332:	699b      	ldr	r3, [r3, #24]
 8017334:	9303      	str	r3, [sp, #12]
 8017336:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8017338:	e011      	b.n	801735e <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801733a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801733c:	2b04      	cmp	r3, #4
 801733e:	d001      	beq.n	8017344 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8017340:	2701      	movs	r7, #1
 8017342:	e7b4      	b.n	80172ae <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017344:	6822      	ldr	r2, [r4, #0]
 8017346:	6813      	ldr	r3, [r2, #0]
 8017348:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801734c:	6013      	str	r3, [r2, #0]
 801734e:	e7f7      	b.n	8017340 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017350:	462a      	mov	r2, r5
 8017352:	4631      	mov	r1, r6
 8017354:	4620      	mov	r0, r4
 8017356:	f7ff fe72 	bl	801703e <I2C_WaitOnBTFFlagUntilTimeout>
 801735a:	2800      	cmp	r0, #0
 801735c:	d12e      	bne.n	80173bc <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 801735e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8017360:	2b00      	cmp	r3, #0
 8017362:	d036      	beq.n	80173d2 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017364:	462a      	mov	r2, r5
 8017366:	4631      	mov	r1, r6
 8017368:	4620      	mov	r0, r4
 801736a:	f7ff fe39 	bl	8016fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 801736e:	2800      	cmp	r0, #0
 8017370:	d1e3      	bne.n	801733a <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017372:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017374:	6823      	ldr	r3, [r4, #0]
 8017376:	7812      	ldrb	r2, [r2, #0]
 8017378:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801737a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801737c:	1c43      	adds	r3, r0, #1
 801737e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8017380:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8017382:	b289      	uxth	r1, r1
 8017384:	3901      	subs	r1, #1
 8017386:	b289      	uxth	r1, r1
 8017388:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 801738a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 801738c:	3b01      	subs	r3, #1
 801738e:	b29b      	uxth	r3, r3
 8017390:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8017392:	6822      	ldr	r2, [r4, #0]
 8017394:	6951      	ldr	r1, [r2, #20]
 8017396:	f011 0f04 	tst.w	r1, #4
 801739a:	d0d9      	beq.n	8017350 <HAL_I2C_Master_Transmit+0xc4>
 801739c:	2b00      	cmp	r3, #0
 801739e:	d0d7      	beq.n	8017350 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80173a0:	7843      	ldrb	r3, [r0, #1]
 80173a2:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80173a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80173a6:	3301      	adds	r3, #1
 80173a8:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80173aa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80173ac:	b29b      	uxth	r3, r3
 80173ae:	3b01      	subs	r3, #1
 80173b0:	b29b      	uxth	r3, r3
 80173b2:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 80173b4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80173b6:	3b01      	subs	r3, #1
 80173b8:	8523      	strh	r3, [r4, #40]	@ 0x28
 80173ba:	e7c9      	b.n	8017350 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80173bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80173be:	2b04      	cmp	r3, #4
 80173c0:	d001      	beq.n	80173c6 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 80173c2:	2701      	movs	r7, #1
 80173c4:	e773      	b.n	80172ae <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80173c6:	6822      	ldr	r2, [r4, #0]
 80173c8:	6813      	ldr	r3, [r2, #0]
 80173ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80173ce:	6013      	str	r3, [r2, #0]
 80173d0:	e7f7      	b.n	80173c2 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80173d2:	6822      	ldr	r2, [r4, #0]
 80173d4:	6813      	ldr	r3, [r2, #0]
 80173d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80173da:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80173dc:	2320      	movs	r3, #32
 80173de:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80173e2:	2300      	movs	r3, #0
 80173e4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80173e8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80173ec:	e75f      	b.n	80172ae <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80173ee:	2702      	movs	r7, #2
 80173f0:	e75d      	b.n	80172ae <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 80173f2:	2702      	movs	r7, #2
 80173f4:	e75b      	b.n	80172ae <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 80173f6:	2701      	movs	r7, #1
 80173f8:	e759      	b.n	80172ae <HAL_I2C_Master_Transmit+0x22>
 80173fa:	bf00      	nop
 80173fc:	00100002 	.word	0x00100002
 8017400:	ffff0000 	.word	0xffff0000

08017404 <HAL_I2C_IsDeviceReady>:
{
 8017404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017408:	b085      	sub	sp, #20
 801740a:	4604      	mov	r4, r0
 801740c:	4688      	mov	r8, r1
 801740e:	4691      	mov	r9, r2
 8017410:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8017412:	f7ff f8fb 	bl	801660c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8017416:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 801741a:	b2db      	uxtb	r3, r3
 801741c:	2b20      	cmp	r3, #32
 801741e:	d003      	beq.n	8017428 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8017420:	2002      	movs	r0, #2
}
 8017422:	b005      	add	sp, #20
 8017424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017428:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801742a:	9000      	str	r0, [sp, #0]
 801742c:	2319      	movs	r3, #25
 801742e:	2201      	movs	r2, #1
 8017430:	4957      	ldr	r1, [pc, #348]	@ (8017590 <HAL_I2C_IsDeviceReady+0x18c>)
 8017432:	4620      	mov	r0, r4
 8017434:	f7ff fcb9 	bl	8016daa <I2C_WaitOnFlagUntilTimeout>
 8017438:	2800      	cmp	r0, #0
 801743a:	f040 80a0 	bne.w	801757e <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 801743e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8017442:	2b01      	cmp	r3, #1
 8017444:	f000 809d 	beq.w	8017582 <HAL_I2C_IsDeviceReady+0x17e>
 8017448:	2301      	movs	r3, #1
 801744a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801744e:	6823      	ldr	r3, [r4, #0]
 8017450:	681a      	ldr	r2, [r3, #0]
 8017452:	f012 0f01 	tst.w	r2, #1
 8017456:	d103      	bne.n	8017460 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8017458:	681a      	ldr	r2, [r3, #0]
 801745a:	f042 0201 	orr.w	r2, r2, #1
 801745e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017460:	6822      	ldr	r2, [r4, #0]
 8017462:	6813      	ldr	r3, [r2, #0]
 8017464:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017468:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 801746a:	2324      	movs	r3, #36	@ 0x24
 801746c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017470:	2700      	movs	r7, #0
 8017472:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017474:	4b47      	ldr	r3, [pc, #284]	@ (8017594 <HAL_I2C_IsDeviceReady+0x190>)
 8017476:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017478:	e040      	b.n	80174fc <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801747a:	6823      	ldr	r3, [r4, #0]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8017482:	d002      	beq.n	801748a <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8017484:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017488:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 801748a:	2003      	movs	r0, #3
 801748c:	e7c9      	b.n	8017422 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 801748e:	23a0      	movs	r3, #160	@ 0xa0
 8017490:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8017494:	6822      	ldr	r2, [r4, #0]
 8017496:	6953      	ldr	r3, [r2, #20]
 8017498:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801749c:	6952      	ldr	r2, [r2, #20]
 801749e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80174a2:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 80174a6:	fa5f fc8c 	uxtb.w	ip, ip
 80174aa:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 80174ae:	d009      	beq.n	80174c4 <HAL_I2C_IsDeviceReady+0xc0>
 80174b0:	b943      	cbnz	r3, 80174c4 <HAL_I2C_IsDeviceReady+0xc0>
 80174b2:	b93a      	cbnz	r2, 80174c4 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80174b4:	f7ff f8aa 	bl	801660c <HAL_GetTick>
 80174b8:	1b80      	subs	r0, r0, r6
 80174ba:	42a8      	cmp	r0, r5
 80174bc:	d8e7      	bhi.n	801748e <HAL_I2C_IsDeviceReady+0x8a>
 80174be:	2d00      	cmp	r5, #0
 80174c0:	d1e8      	bne.n	8017494 <HAL_I2C_IsDeviceReady+0x90>
 80174c2:	e7e4      	b.n	801748e <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 80174c4:	2320      	movs	r3, #32
 80174c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80174ca:	6823      	ldr	r3, [r4, #0]
 80174cc:	695a      	ldr	r2, [r3, #20]
 80174ce:	f012 0f02 	tst.w	r2, #2
 80174d2:	d131      	bne.n	8017538 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80174d4:	681a      	ldr	r2, [r3, #0]
 80174d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80174da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80174dc:	6823      	ldr	r3, [r4, #0]
 80174de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80174e2:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80174e4:	9600      	str	r6, [sp, #0]
 80174e6:	2319      	movs	r3, #25
 80174e8:	2201      	movs	r2, #1
 80174ea:	4929      	ldr	r1, [pc, #164]	@ (8017590 <HAL_I2C_IsDeviceReady+0x18c>)
 80174ec:	4620      	mov	r0, r4
 80174ee:	f7ff fc5c 	bl	8016daa <I2C_WaitOnFlagUntilTimeout>
 80174f2:	2800      	cmp	r0, #0
 80174f4:	d149      	bne.n	801758a <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 80174f6:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80174f8:	454f      	cmp	r7, r9
 80174fa:	d238      	bcs.n	801756e <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80174fc:	6822      	ldr	r2, [r4, #0]
 80174fe:	6813      	ldr	r3, [r2, #0]
 8017500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017504:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8017506:	9600      	str	r6, [sp, #0]
 8017508:	462b      	mov	r3, r5
 801750a:	2200      	movs	r2, #0
 801750c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8017510:	4620      	mov	r0, r4
 8017512:	f7ff fc4a 	bl	8016daa <I2C_WaitOnFlagUntilTimeout>
 8017516:	2800      	cmp	r0, #0
 8017518:	d1af      	bne.n	801747a <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801751a:	6823      	ldr	r3, [r4, #0]
 801751c:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8017520:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8017522:	f7ff f873 	bl	801660c <HAL_GetTick>
 8017526:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8017528:	6822      	ldr	r2, [r4, #0]
 801752a:	6953      	ldr	r3, [r2, #20]
 801752c:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8017530:	6952      	ldr	r2, [r2, #20]
 8017532:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8017536:	e7b4      	b.n	80174a2 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017538:	681a      	ldr	r2, [r3, #0]
 801753a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801753e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017540:	2300      	movs	r3, #0
 8017542:	9303      	str	r3, [sp, #12]
 8017544:	6823      	ldr	r3, [r4, #0]
 8017546:	695a      	ldr	r2, [r3, #20]
 8017548:	9203      	str	r2, [sp, #12]
 801754a:	699b      	ldr	r3, [r3, #24]
 801754c:	9303      	str	r3, [sp, #12]
 801754e:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017550:	9600      	str	r6, [sp, #0]
 8017552:	2319      	movs	r3, #25
 8017554:	2201      	movs	r2, #1
 8017556:	490e      	ldr	r1, [pc, #56]	@ (8017590 <HAL_I2C_IsDeviceReady+0x18c>)
 8017558:	4620      	mov	r0, r4
 801755a:	f7ff fc26 	bl	8016daa <I2C_WaitOnFlagUntilTimeout>
 801755e:	b990      	cbnz	r0, 8017586 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8017560:	2320      	movs	r3, #32
 8017562:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 8017566:	2300      	movs	r3, #0
 8017568:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 801756c:	e759      	b.n	8017422 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 801756e:	2320      	movs	r3, #32
 8017570:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8017574:	2300      	movs	r3, #0
 8017576:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 801757a:	2001      	movs	r0, #1
 801757c:	e751      	b.n	8017422 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 801757e:	2002      	movs	r0, #2
 8017580:	e74f      	b.n	8017422 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8017582:	2002      	movs	r0, #2
 8017584:	e74d      	b.n	8017422 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8017586:	2001      	movs	r0, #1
 8017588:	e74b      	b.n	8017422 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 801758a:	2001      	movs	r0, #1
 801758c:	e749      	b.n	8017422 <HAL_I2C_IsDeviceReady+0x1e>
 801758e:	bf00      	nop
 8017590:	00100002 	.word	0x00100002
 8017594:	ffff0000 	.word	0xffff0000

08017598 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8017598:	b340      	cbz	r0, 80175ec <HAL_IWDG_Init+0x54>
{
 801759a:	b538      	push	{r3, r4, r5, lr}
 801759c:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801759e:	6803      	ldr	r3, [r0, #0]
 80175a0:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80175a4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80175a6:	6803      	ldr	r3, [r0, #0]
 80175a8:	f245 5255 	movw	r2, #21845	@ 0x5555
 80175ac:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80175ae:	6803      	ldr	r3, [r0, #0]
 80175b0:	6842      	ldr	r2, [r0, #4]
 80175b2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80175b4:	6803      	ldr	r3, [r0, #0]
 80175b6:	6882      	ldr	r2, [r0, #8]
 80175b8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80175ba:	f7ff f827 	bl	801660c <HAL_GetTick>
 80175be:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80175c0:	6823      	ldr	r3, [r4, #0]
 80175c2:	68da      	ldr	r2, [r3, #12]
 80175c4:	f012 0f03 	tst.w	r2, #3
 80175c8:	d00b      	beq.n	80175e2 <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80175ca:	f7ff f81f 	bl	801660c <HAL_GetTick>
 80175ce:	1b40      	subs	r0, r0, r5
 80175d0:	2831      	cmp	r0, #49	@ 0x31
 80175d2:	d9f5      	bls.n	80175c0 <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80175d4:	6823      	ldr	r3, [r4, #0]
 80175d6:	68db      	ldr	r3, [r3, #12]
 80175d8:	f013 0f03 	tst.w	r3, #3
 80175dc:	d0f0      	beq.n	80175c0 <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 80175de:	2003      	movs	r0, #3
 80175e0:	e003      	b.n	80175ea <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80175e2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80175e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80175e8:	2000      	movs	r0, #0
}
 80175ea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80175ec:	2001      	movs	r0, #1
}
 80175ee:	4770      	bx	lr

080175f0 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80175f0:	6803      	ldr	r3, [r0, #0]
 80175f2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80175f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80175f8:	2000      	movs	r0, #0
 80175fa:	4770      	bx	lr

080175fc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80175fc:	2800      	cmp	r0, #0
 80175fe:	f000 81e0 	beq.w	80179c2 <HAL_RCC_OscConfig+0x3c6>
{
 8017602:	b570      	push	{r4, r5, r6, lr}
 8017604:	b082      	sub	sp, #8
 8017606:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017608:	6803      	ldr	r3, [r0, #0]
 801760a:	f013 0f01 	tst.w	r3, #1
 801760e:	d03b      	beq.n	8017688 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8017610:	4b9f      	ldr	r3, [pc, #636]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 8017612:	689b      	ldr	r3, [r3, #8]
 8017614:	f003 030c 	and.w	r3, r3, #12
 8017618:	2b04      	cmp	r3, #4
 801761a:	d02c      	beq.n	8017676 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801761c:	4b9c      	ldr	r3, [pc, #624]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 801761e:	689b      	ldr	r3, [r3, #8]
 8017620:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8017624:	2b08      	cmp	r3, #8
 8017626:	d021      	beq.n	801766c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017628:	6863      	ldr	r3, [r4, #4]
 801762a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801762e:	d04f      	beq.n	80176d0 <HAL_RCC_OscConfig+0xd4>
 8017630:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8017634:	d052      	beq.n	80176dc <HAL_RCC_OscConfig+0xe0>
 8017636:	4b96      	ldr	r3, [pc, #600]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 8017638:	681a      	ldr	r2, [r3, #0]
 801763a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801763e:	601a      	str	r2, [r3, #0]
 8017640:	681a      	ldr	r2, [r3, #0]
 8017642:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8017646:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8017648:	6863      	ldr	r3, [r4, #4]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d050      	beq.n	80176f0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801764e:	f7fe ffdd 	bl	801660c <HAL_GetTick>
 8017652:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017654:	4b8e      	ldr	r3, [pc, #568]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801765c:	d114      	bne.n	8017688 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801765e:	f7fe ffd5 	bl	801660c <HAL_GetTick>
 8017662:	1b40      	subs	r0, r0, r5
 8017664:	2864      	cmp	r0, #100	@ 0x64
 8017666:	d9f5      	bls.n	8017654 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8017668:	2003      	movs	r0, #3
 801766a:	e1b1      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801766c:	4b88      	ldr	r3, [pc, #544]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 801766e:	685b      	ldr	r3, [r3, #4]
 8017670:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8017674:	d0d8      	beq.n	8017628 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017676:	4b86      	ldr	r3, [pc, #536]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801767e:	d003      	beq.n	8017688 <HAL_RCC_OscConfig+0x8c>
 8017680:	6863      	ldr	r3, [r4, #4]
 8017682:	2b00      	cmp	r3, #0
 8017684:	f000 819f 	beq.w	80179c6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017688:	6823      	ldr	r3, [r4, #0]
 801768a:	f013 0f02 	tst.w	r3, #2
 801768e:	d054      	beq.n	801773a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8017690:	4b7f      	ldr	r3, [pc, #508]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 8017692:	689b      	ldr	r3, [r3, #8]
 8017694:	f013 0f0c 	tst.w	r3, #12
 8017698:	d03e      	beq.n	8017718 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801769a:	4b7d      	ldr	r3, [pc, #500]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 801769c:	689b      	ldr	r3, [r3, #8]
 801769e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80176a2:	2b08      	cmp	r3, #8
 80176a4:	d033      	beq.n	801770e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80176a6:	68e3      	ldr	r3, [r4, #12]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d068      	beq.n	801777e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80176ac:	4b79      	ldr	r3, [pc, #484]	@ (8017894 <HAL_RCC_OscConfig+0x298>)
 80176ae:	2201      	movs	r2, #1
 80176b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80176b2:	f7fe ffab 	bl	801660c <HAL_GetTick>
 80176b6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80176b8:	4b75      	ldr	r3, [pc, #468]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	f013 0f02 	tst.w	r3, #2
 80176c0:	d154      	bne.n	801776c <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80176c2:	f7fe ffa3 	bl	801660c <HAL_GetTick>
 80176c6:	1b40      	subs	r0, r0, r5
 80176c8:	2802      	cmp	r0, #2
 80176ca:	d9f5      	bls.n	80176b8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80176cc:	2003      	movs	r0, #3
 80176ce:	e17f      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80176d0:	4a6f      	ldr	r2, [pc, #444]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 80176d2:	6813      	ldr	r3, [r2, #0]
 80176d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80176d8:	6013      	str	r3, [r2, #0]
 80176da:	e7b5      	b.n	8017648 <HAL_RCC_OscConfig+0x4c>
 80176dc:	4b6c      	ldr	r3, [pc, #432]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 80176de:	681a      	ldr	r2, [r3, #0]
 80176e0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80176e4:	601a      	str	r2, [r3, #0]
 80176e6:	681a      	ldr	r2, [r3, #0]
 80176e8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80176ec:	601a      	str	r2, [r3, #0]
 80176ee:	e7ab      	b.n	8017648 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80176f0:	f7fe ff8c 	bl	801660c <HAL_GetTick>
 80176f4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80176f6:	4b66      	ldr	r3, [pc, #408]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80176fe:	d0c3      	beq.n	8017688 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017700:	f7fe ff84 	bl	801660c <HAL_GetTick>
 8017704:	1b40      	subs	r0, r0, r5
 8017706:	2864      	cmp	r0, #100	@ 0x64
 8017708:	d9f5      	bls.n	80176f6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 801770a:	2003      	movs	r0, #3
 801770c:	e160      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801770e:	4b60      	ldr	r3, [pc, #384]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 8017710:	685b      	ldr	r3, [r3, #4]
 8017712:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8017716:	d1c6      	bne.n	80176a6 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017718:	4b5d      	ldr	r3, [pc, #372]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	f013 0f02 	tst.w	r3, #2
 8017720:	d003      	beq.n	801772a <HAL_RCC_OscConfig+0x12e>
 8017722:	68e3      	ldr	r3, [r4, #12]
 8017724:	2b01      	cmp	r3, #1
 8017726:	f040 8150 	bne.w	80179ca <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801772a:	4a59      	ldr	r2, [pc, #356]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 801772c:	6813      	ldr	r3, [r2, #0]
 801772e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8017732:	6921      	ldr	r1, [r4, #16]
 8017734:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8017738:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801773a:	6823      	ldr	r3, [r4, #0]
 801773c:	f013 0f08 	tst.w	r3, #8
 8017740:	d042      	beq.n	80177c8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8017742:	6963      	ldr	r3, [r4, #20]
 8017744:	b36b      	cbz	r3, 80177a2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017746:	4b53      	ldr	r3, [pc, #332]	@ (8017894 <HAL_RCC_OscConfig+0x298>)
 8017748:	2201      	movs	r2, #1
 801774a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801774e:	f7fe ff5d 	bl	801660c <HAL_GetTick>
 8017752:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8017754:	4b4e      	ldr	r3, [pc, #312]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 8017756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017758:	f013 0f02 	tst.w	r3, #2
 801775c:	d134      	bne.n	80177c8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801775e:	f7fe ff55 	bl	801660c <HAL_GetTick>
 8017762:	1b40      	subs	r0, r0, r5
 8017764:	2802      	cmp	r0, #2
 8017766:	d9f5      	bls.n	8017754 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8017768:	2003      	movs	r0, #3
 801776a:	e131      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801776c:	4a48      	ldr	r2, [pc, #288]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 801776e:	6813      	ldr	r3, [r2, #0]
 8017770:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8017774:	6921      	ldr	r1, [r4, #16]
 8017776:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801777a:	6013      	str	r3, [r2, #0]
 801777c:	e7dd      	b.n	801773a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 801777e:	4b45      	ldr	r3, [pc, #276]	@ (8017894 <HAL_RCC_OscConfig+0x298>)
 8017780:	2200      	movs	r2, #0
 8017782:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8017784:	f7fe ff42 	bl	801660c <HAL_GetTick>
 8017788:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801778a:	4b41      	ldr	r3, [pc, #260]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	f013 0f02 	tst.w	r3, #2
 8017792:	d0d2      	beq.n	801773a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017794:	f7fe ff3a 	bl	801660c <HAL_GetTick>
 8017798:	1b40      	subs	r0, r0, r5
 801779a:	2802      	cmp	r0, #2
 801779c:	d9f5      	bls.n	801778a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 801779e:	2003      	movs	r0, #3
 80177a0:	e116      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80177a2:	4b3c      	ldr	r3, [pc, #240]	@ (8017894 <HAL_RCC_OscConfig+0x298>)
 80177a4:	2200      	movs	r2, #0
 80177a6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80177aa:	f7fe ff2f 	bl	801660c <HAL_GetTick>
 80177ae:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80177b0:	4b37      	ldr	r3, [pc, #220]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 80177b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177b4:	f013 0f02 	tst.w	r3, #2
 80177b8:	d006      	beq.n	80177c8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80177ba:	f7fe ff27 	bl	801660c <HAL_GetTick>
 80177be:	1b40      	subs	r0, r0, r5
 80177c0:	2802      	cmp	r0, #2
 80177c2:	d9f5      	bls.n	80177b0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80177c4:	2003      	movs	r0, #3
 80177c6:	e103      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80177c8:	6823      	ldr	r3, [r4, #0]
 80177ca:	f013 0f04 	tst.w	r3, #4
 80177ce:	d077      	beq.n	80178c0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80177d0:	4b2f      	ldr	r3, [pc, #188]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 80177d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80177d4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80177d8:	d133      	bne.n	8017842 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80177da:	2300      	movs	r3, #0
 80177dc:	9301      	str	r3, [sp, #4]
 80177de:	4b2c      	ldr	r3, [pc, #176]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 80177e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80177e2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80177e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80177e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80177ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80177ee:	9301      	str	r3, [sp, #4]
 80177f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80177f2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80177f4:	4b28      	ldr	r3, [pc, #160]	@ (8017898 <HAL_RCC_OscConfig+0x29c>)
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80177fc:	d023      	beq.n	8017846 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80177fe:	68a3      	ldr	r3, [r4, #8]
 8017800:	2b01      	cmp	r3, #1
 8017802:	d034      	beq.n	801786e <HAL_RCC_OscConfig+0x272>
 8017804:	2b05      	cmp	r3, #5
 8017806:	d038      	beq.n	801787a <HAL_RCC_OscConfig+0x27e>
 8017808:	4b21      	ldr	r3, [pc, #132]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 801780a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801780c:	f022 0201 	bic.w	r2, r2, #1
 8017810:	671a      	str	r2, [r3, #112]	@ 0x70
 8017812:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017814:	f022 0204 	bic.w	r2, r2, #4
 8017818:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801781a:	68a3      	ldr	r3, [r4, #8]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d03d      	beq.n	801789c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017820:	f7fe fef4 	bl	801660c <HAL_GetTick>
 8017824:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017826:	4b1a      	ldr	r3, [pc, #104]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 8017828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801782a:	f013 0f02 	tst.w	r3, #2
 801782e:	d146      	bne.n	80178be <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017830:	f7fe feec 	bl	801660c <HAL_GetTick>
 8017834:	1b80      	subs	r0, r0, r6
 8017836:	f241 3388 	movw	r3, #5000	@ 0x1388
 801783a:	4298      	cmp	r0, r3
 801783c:	d9f3      	bls.n	8017826 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 801783e:	2003      	movs	r0, #3
 8017840:	e0c6      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8017842:	2500      	movs	r5, #0
 8017844:	e7d6      	b.n	80177f4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017846:	4a14      	ldr	r2, [pc, #80]	@ (8017898 <HAL_RCC_OscConfig+0x29c>)
 8017848:	6813      	ldr	r3, [r2, #0]
 801784a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801784e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8017850:	f7fe fedc 	bl	801660c <HAL_GetTick>
 8017854:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017856:	4b10      	ldr	r3, [pc, #64]	@ (8017898 <HAL_RCC_OscConfig+0x29c>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801785e:	d1ce      	bne.n	80177fe <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017860:	f7fe fed4 	bl	801660c <HAL_GetTick>
 8017864:	1b80      	subs	r0, r0, r6
 8017866:	2802      	cmp	r0, #2
 8017868:	d9f5      	bls.n	8017856 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 801786a:	2003      	movs	r0, #3
 801786c:	e0b0      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801786e:	4a08      	ldr	r2, [pc, #32]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 8017870:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8017872:	f043 0301 	orr.w	r3, r3, #1
 8017876:	6713      	str	r3, [r2, #112]	@ 0x70
 8017878:	e7cf      	b.n	801781a <HAL_RCC_OscConfig+0x21e>
 801787a:	4b05      	ldr	r3, [pc, #20]	@ (8017890 <HAL_RCC_OscConfig+0x294>)
 801787c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801787e:	f042 0204 	orr.w	r2, r2, #4
 8017882:	671a      	str	r2, [r3, #112]	@ 0x70
 8017884:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017886:	f042 0201 	orr.w	r2, r2, #1
 801788a:	671a      	str	r2, [r3, #112]	@ 0x70
 801788c:	e7c5      	b.n	801781a <HAL_RCC_OscConfig+0x21e>
 801788e:	bf00      	nop
 8017890:	40023800 	.word	0x40023800
 8017894:	42470000 	.word	0x42470000
 8017898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801789c:	f7fe feb6 	bl	801660c <HAL_GetTick>
 80178a0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80178a2:	4b52      	ldr	r3, [pc, #328]	@ (80179ec <HAL_RCC_OscConfig+0x3f0>)
 80178a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80178a6:	f013 0f02 	tst.w	r3, #2
 80178aa:	d008      	beq.n	80178be <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80178ac:	f7fe feae 	bl	801660c <HAL_GetTick>
 80178b0:	1b80      	subs	r0, r0, r6
 80178b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80178b6:	4298      	cmp	r0, r3
 80178b8:	d9f3      	bls.n	80178a2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80178ba:	2003      	movs	r0, #3
 80178bc:	e088      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80178be:	b9ed      	cbnz	r5, 80178fc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80178c0:	69a3      	ldr	r3, [r4, #24]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	f000 8083 	beq.w	80179ce <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80178c8:	4a48      	ldr	r2, [pc, #288]	@ (80179ec <HAL_RCC_OscConfig+0x3f0>)
 80178ca:	6892      	ldr	r2, [r2, #8]
 80178cc:	f002 020c 	and.w	r2, r2, #12
 80178d0:	2a08      	cmp	r2, #8
 80178d2:	d051      	beq.n	8017978 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80178d4:	2b02      	cmp	r3, #2
 80178d6:	d017      	beq.n	8017908 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80178d8:	4b45      	ldr	r3, [pc, #276]	@ (80179f0 <HAL_RCC_OscConfig+0x3f4>)
 80178da:	2200      	movs	r2, #0
 80178dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80178de:	f7fe fe95 	bl	801660c <HAL_GetTick>
 80178e2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80178e4:	4b41      	ldr	r3, [pc, #260]	@ (80179ec <HAL_RCC_OscConfig+0x3f0>)
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80178ec:	d042      	beq.n	8017974 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80178ee:	f7fe fe8d 	bl	801660c <HAL_GetTick>
 80178f2:	1b00      	subs	r0, r0, r4
 80178f4:	2802      	cmp	r0, #2
 80178f6:	d9f5      	bls.n	80178e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80178f8:	2003      	movs	r0, #3
 80178fa:	e069      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80178fc:	4a3b      	ldr	r2, [pc, #236]	@ (80179ec <HAL_RCC_OscConfig+0x3f0>)
 80178fe:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017900:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017904:	6413      	str	r3, [r2, #64]	@ 0x40
 8017906:	e7db      	b.n	80178c0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8017908:	4b39      	ldr	r3, [pc, #228]	@ (80179f0 <HAL_RCC_OscConfig+0x3f4>)
 801790a:	2200      	movs	r2, #0
 801790c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 801790e:	f7fe fe7d 	bl	801660c <HAL_GetTick>
 8017912:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017914:	4b35      	ldr	r3, [pc, #212]	@ (80179ec <HAL_RCC_OscConfig+0x3f0>)
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801791c:	d006      	beq.n	801792c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801791e:	f7fe fe75 	bl	801660c <HAL_GetTick>
 8017922:	1b40      	subs	r0, r0, r5
 8017924:	2802      	cmp	r0, #2
 8017926:	d9f5      	bls.n	8017914 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8017928:	2003      	movs	r0, #3
 801792a:	e051      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801792c:	69e3      	ldr	r3, [r4, #28]
 801792e:	6a22      	ldr	r2, [r4, #32]
 8017930:	4313      	orrs	r3, r2
 8017932:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017934:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8017938:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801793a:	0852      	lsrs	r2, r2, #1
 801793c:	3a01      	subs	r2, #1
 801793e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017942:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017944:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017948:	4a28      	ldr	r2, [pc, #160]	@ (80179ec <HAL_RCC_OscConfig+0x3f0>)
 801794a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 801794c:	4b28      	ldr	r3, [pc, #160]	@ (80179f0 <HAL_RCC_OscConfig+0x3f4>)
 801794e:	2201      	movs	r2, #1
 8017950:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8017952:	f7fe fe5b 	bl	801660c <HAL_GetTick>
 8017956:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017958:	4b24      	ldr	r3, [pc, #144]	@ (80179ec <HAL_RCC_OscConfig+0x3f0>)
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8017960:	d106      	bne.n	8017970 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017962:	f7fe fe53 	bl	801660c <HAL_GetTick>
 8017966:	1b00      	subs	r0, r0, r4
 8017968:	2802      	cmp	r0, #2
 801796a:	d9f5      	bls.n	8017958 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 801796c:	2003      	movs	r0, #3
 801796e:	e02f      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8017970:	2000      	movs	r0, #0
 8017972:	e02d      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
 8017974:	2000      	movs	r0, #0
 8017976:	e02b      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8017978:	2b01      	cmp	r3, #1
 801797a:	d02b      	beq.n	80179d4 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 801797c:	4b1b      	ldr	r3, [pc, #108]	@ (80179ec <HAL_RCC_OscConfig+0x3f0>)
 801797e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017980:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8017984:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8017986:	4291      	cmp	r1, r2
 8017988:	d126      	bne.n	80179d8 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801798a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801798e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017990:	428a      	cmp	r2, r1
 8017992:	d123      	bne.n	80179dc <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017994:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017996:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 801799a:	401a      	ands	r2, r3
 801799c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80179a0:	d11e      	bne.n	80179e0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80179a2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80179a6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80179a8:	0852      	lsrs	r2, r2, #1
 80179aa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80179ac:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80179b0:	d118      	bne.n	80179e4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80179b2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80179b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80179b8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80179bc:	d114      	bne.n	80179e8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80179be:	2000      	movs	r0, #0
 80179c0:	e006      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80179c2:	2001      	movs	r0, #1
}
 80179c4:	4770      	bx	lr
        return HAL_ERROR;
 80179c6:	2001      	movs	r0, #1
 80179c8:	e002      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80179ca:	2001      	movs	r0, #1
 80179cc:	e000      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80179ce:	2000      	movs	r0, #0
}
 80179d0:	b002      	add	sp, #8
 80179d2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80179d4:	2001      	movs	r0, #1
 80179d6:	e7fb      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80179d8:	2001      	movs	r0, #1
 80179da:	e7f9      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
 80179dc:	2001      	movs	r0, #1
 80179de:	e7f7      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
 80179e0:	2001      	movs	r0, #1
 80179e2:	e7f5      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
 80179e4:	2001      	movs	r0, #1
 80179e6:	e7f3      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
 80179e8:	2001      	movs	r0, #1
 80179ea:	e7f1      	b.n	80179d0 <HAL_RCC_OscConfig+0x3d4>
 80179ec:	40023800 	.word	0x40023800
 80179f0:	42470000 	.word	0x42470000

080179f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80179f4:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80179f6:	4b33      	ldr	r3, [pc, #204]	@ (8017ac4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80179f8:	689b      	ldr	r3, [r3, #8]
 80179fa:	f003 030c 	and.w	r3, r3, #12
 80179fe:	2b04      	cmp	r3, #4
 8017a00:	d05b      	beq.n	8017aba <HAL_RCC_GetSysClockFreq+0xc6>
 8017a02:	2b08      	cmp	r3, #8
 8017a04:	d15b      	bne.n	8017abe <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017a06:	4b2f      	ldr	r3, [pc, #188]	@ (8017ac4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017a08:	685a      	ldr	r2, [r3, #4]
 8017a0a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8017a0e:	685b      	ldr	r3, [r3, #4]
 8017a10:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8017a14:	d02c      	beq.n	8017a70 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017a16:	4b2b      	ldr	r3, [pc, #172]	@ (8017ac4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017a18:	6858      	ldr	r0, [r3, #4]
 8017a1a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8017a1e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8017a22:	ebbc 0c00 	subs.w	ip, ip, r0
 8017a26:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8017a2a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8017a2e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8017a32:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8017a36:	ebb1 010c 	subs.w	r1, r1, ip
 8017a3a:	eb63 030e 	sbc.w	r3, r3, lr
 8017a3e:	00db      	lsls	r3, r3, #3
 8017a40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017a44:	00c9      	lsls	r1, r1, #3
 8017a46:	eb11 0c00 	adds.w	ip, r1, r0
 8017a4a:	f143 0300 	adc.w	r3, r3, #0
 8017a4e:	0259      	lsls	r1, r3, #9
 8017a50:	2300      	movs	r3, #0
 8017a52:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8017a56:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8017a5a:	f7f9 f97d 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8017a5e:	4b19      	ldr	r3, [pc, #100]	@ (8017ac4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017a60:	685b      	ldr	r3, [r3, #4]
 8017a62:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8017a66:	3301      	adds	r3, #1
 8017a68:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8017a6a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8017a6e:	e027      	b.n	8017ac0 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017a70:	4b14      	ldr	r3, [pc, #80]	@ (8017ac4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017a72:	6858      	ldr	r0, [r3, #4]
 8017a74:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8017a78:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8017a7c:	ebbc 0c00 	subs.w	ip, ip, r0
 8017a80:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8017a84:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8017a88:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8017a8c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8017a90:	ebb1 010c 	subs.w	r1, r1, ip
 8017a94:	eb63 030e 	sbc.w	r3, r3, lr
 8017a98:	00db      	lsls	r3, r3, #3
 8017a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017a9e:	00c9      	lsls	r1, r1, #3
 8017aa0:	eb11 0c00 	adds.w	ip, r1, r0
 8017aa4:	f143 0300 	adc.w	r3, r3, #0
 8017aa8:	0299      	lsls	r1, r3, #10
 8017aaa:	2300      	movs	r3, #0
 8017aac:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8017ab0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8017ab4:	f7f9 f950 	bl	8010d58 <__aeabi_uldivmod>
 8017ab8:	e7d1      	b.n	8017a5e <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8017aba:	4803      	ldr	r0, [pc, #12]	@ (8017ac8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017abc:	e000      	b.n	8017ac0 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017abe:	4803      	ldr	r0, [pc, #12]	@ (8017acc <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8017ac0:	bd08      	pop	{r3, pc}
 8017ac2:	bf00      	nop
 8017ac4:	40023800 	.word	0x40023800
 8017ac8:	007a1200 	.word	0x007a1200
 8017acc:	00f42400 	.word	0x00f42400

08017ad0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8017ad0:	2800      	cmp	r0, #0
 8017ad2:	f000 809b 	beq.w	8017c0c <HAL_RCC_ClockConfig+0x13c>
{
 8017ad6:	b570      	push	{r4, r5, r6, lr}
 8017ad8:	460d      	mov	r5, r1
 8017ada:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017adc:	4b4f      	ldr	r3, [pc, #316]	@ (8017c1c <HAL_RCC_ClockConfig+0x14c>)
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	f003 0307 	and.w	r3, r3, #7
 8017ae4:	428b      	cmp	r3, r1
 8017ae6:	d208      	bcs.n	8017afa <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017ae8:	b2cb      	uxtb	r3, r1
 8017aea:	4a4c      	ldr	r2, [pc, #304]	@ (8017c1c <HAL_RCC_ClockConfig+0x14c>)
 8017aec:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017aee:	6813      	ldr	r3, [r2, #0]
 8017af0:	f003 0307 	and.w	r3, r3, #7
 8017af4:	428b      	cmp	r3, r1
 8017af6:	f040 808b 	bne.w	8017c10 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017afa:	6823      	ldr	r3, [r4, #0]
 8017afc:	f013 0f02 	tst.w	r3, #2
 8017b00:	d017      	beq.n	8017b32 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017b02:	f013 0f04 	tst.w	r3, #4
 8017b06:	d004      	beq.n	8017b12 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8017b08:	4a45      	ldr	r2, [pc, #276]	@ (8017c20 <HAL_RCC_ClockConfig+0x150>)
 8017b0a:	6893      	ldr	r3, [r2, #8]
 8017b0c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8017b10:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017b12:	6823      	ldr	r3, [r4, #0]
 8017b14:	f013 0f08 	tst.w	r3, #8
 8017b18:	d004      	beq.n	8017b24 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8017b1a:	4a41      	ldr	r2, [pc, #260]	@ (8017c20 <HAL_RCC_ClockConfig+0x150>)
 8017b1c:	6893      	ldr	r3, [r2, #8]
 8017b1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8017b22:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017b24:	4a3e      	ldr	r2, [pc, #248]	@ (8017c20 <HAL_RCC_ClockConfig+0x150>)
 8017b26:	6893      	ldr	r3, [r2, #8]
 8017b28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017b2c:	68a1      	ldr	r1, [r4, #8]
 8017b2e:	430b      	orrs	r3, r1
 8017b30:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017b32:	6823      	ldr	r3, [r4, #0]
 8017b34:	f013 0f01 	tst.w	r3, #1
 8017b38:	d032      	beq.n	8017ba0 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017b3a:	6863      	ldr	r3, [r4, #4]
 8017b3c:	2b01      	cmp	r3, #1
 8017b3e:	d021      	beq.n	8017b84 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8017b40:	1e9a      	subs	r2, r3, #2
 8017b42:	2a01      	cmp	r2, #1
 8017b44:	d925      	bls.n	8017b92 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017b46:	4a36      	ldr	r2, [pc, #216]	@ (8017c20 <HAL_RCC_ClockConfig+0x150>)
 8017b48:	6812      	ldr	r2, [r2, #0]
 8017b4a:	f012 0f02 	tst.w	r2, #2
 8017b4e:	d061      	beq.n	8017c14 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8017b50:	4933      	ldr	r1, [pc, #204]	@ (8017c20 <HAL_RCC_ClockConfig+0x150>)
 8017b52:	688a      	ldr	r2, [r1, #8]
 8017b54:	f022 0203 	bic.w	r2, r2, #3
 8017b58:	4313      	orrs	r3, r2
 8017b5a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8017b5c:	f7fe fd56 	bl	801660c <HAL_GetTick>
 8017b60:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017b62:	4b2f      	ldr	r3, [pc, #188]	@ (8017c20 <HAL_RCC_ClockConfig+0x150>)
 8017b64:	689b      	ldr	r3, [r3, #8]
 8017b66:	f003 030c 	and.w	r3, r3, #12
 8017b6a:	6862      	ldr	r2, [r4, #4]
 8017b6c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8017b70:	d016      	beq.n	8017ba0 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017b72:	f7fe fd4b 	bl	801660c <HAL_GetTick>
 8017b76:	1b80      	subs	r0, r0, r6
 8017b78:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017b7c:	4298      	cmp	r0, r3
 8017b7e:	d9f0      	bls.n	8017b62 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8017b80:	2003      	movs	r0, #3
 8017b82:	e042      	b.n	8017c0a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017b84:	4a26      	ldr	r2, [pc, #152]	@ (8017c20 <HAL_RCC_ClockConfig+0x150>)
 8017b86:	6812      	ldr	r2, [r2, #0]
 8017b88:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8017b8c:	d1e0      	bne.n	8017b50 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8017b8e:	2001      	movs	r0, #1
 8017b90:	e03b      	b.n	8017c0a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017b92:	4a23      	ldr	r2, [pc, #140]	@ (8017c20 <HAL_RCC_ClockConfig+0x150>)
 8017b94:	6812      	ldr	r2, [r2, #0]
 8017b96:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8017b9a:	d1d9      	bne.n	8017b50 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8017b9c:	2001      	movs	r0, #1
 8017b9e:	e034      	b.n	8017c0a <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8017c1c <HAL_RCC_ClockConfig+0x14c>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	f003 0307 	and.w	r3, r3, #7
 8017ba8:	42ab      	cmp	r3, r5
 8017baa:	d907      	bls.n	8017bbc <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017bac:	b2ea      	uxtb	r2, r5
 8017bae:	4b1b      	ldr	r3, [pc, #108]	@ (8017c1c <HAL_RCC_ClockConfig+0x14c>)
 8017bb0:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	f003 0307 	and.w	r3, r3, #7
 8017bb8:	42ab      	cmp	r3, r5
 8017bba:	d12d      	bne.n	8017c18 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017bbc:	6823      	ldr	r3, [r4, #0]
 8017bbe:	f013 0f04 	tst.w	r3, #4
 8017bc2:	d006      	beq.n	8017bd2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8017bc4:	4a16      	ldr	r2, [pc, #88]	@ (8017c20 <HAL_RCC_ClockConfig+0x150>)
 8017bc6:	6893      	ldr	r3, [r2, #8]
 8017bc8:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8017bcc:	68e1      	ldr	r1, [r4, #12]
 8017bce:	430b      	orrs	r3, r1
 8017bd0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017bd2:	6823      	ldr	r3, [r4, #0]
 8017bd4:	f013 0f08 	tst.w	r3, #8
 8017bd8:	d007      	beq.n	8017bea <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8017bda:	4a11      	ldr	r2, [pc, #68]	@ (8017c20 <HAL_RCC_ClockConfig+0x150>)
 8017bdc:	6893      	ldr	r3, [r2, #8]
 8017bde:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8017be2:	6921      	ldr	r1, [r4, #16]
 8017be4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8017be8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8017bea:	f7ff ff03 	bl	80179f4 <HAL_RCC_GetSysClockFreq>
 8017bee:	4b0c      	ldr	r3, [pc, #48]	@ (8017c20 <HAL_RCC_ClockConfig+0x150>)
 8017bf0:	689b      	ldr	r3, [r3, #8]
 8017bf2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8017bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8017c24 <HAL_RCC_ClockConfig+0x154>)
 8017bf8:	5cd3      	ldrb	r3, [r2, r3]
 8017bfa:	40d8      	lsrs	r0, r3
 8017bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8017c28 <HAL_RCC_ClockConfig+0x158>)
 8017bfe:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8017c00:	4b0a      	ldr	r3, [pc, #40]	@ (8017c2c <HAL_RCC_ClockConfig+0x15c>)
 8017c02:	6818      	ldr	r0, [r3, #0]
 8017c04:	f7fa fce4 	bl	80125d0 <HAL_InitTick>
  return HAL_OK;
 8017c08:	2000      	movs	r0, #0
}
 8017c0a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8017c0c:	2001      	movs	r0, #1
}
 8017c0e:	4770      	bx	lr
      return HAL_ERROR;
 8017c10:	2001      	movs	r0, #1
 8017c12:	e7fa      	b.n	8017c0a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8017c14:	2001      	movs	r0, #1
 8017c16:	e7f8      	b.n	8017c0a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8017c18:	2001      	movs	r0, #1
 8017c1a:	e7f6      	b.n	8017c0a <HAL_RCC_ClockConfig+0x13a>
 8017c1c:	40023c00 	.word	0x40023c00
 8017c20:	40023800 	.word	0x40023800
 8017c24:	08036c8c 	.word	0x08036c8c
 8017c28:	20000018 	.word	0x20000018
 8017c2c:	20000108 	.word	0x20000108

08017c30 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8017c30:	4b01      	ldr	r3, [pc, #4]	@ (8017c38 <HAL_RCC_GetHCLKFreq+0x8>)
 8017c32:	6818      	ldr	r0, [r3, #0]
 8017c34:	4770      	bx	lr
 8017c36:	bf00      	nop
 8017c38:	20000018 	.word	0x20000018

08017c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017c3c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8017c3e:	f7ff fff7 	bl	8017c30 <HAL_RCC_GetHCLKFreq>
 8017c42:	4b04      	ldr	r3, [pc, #16]	@ (8017c54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8017c44:	689b      	ldr	r3, [r3, #8]
 8017c46:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8017c4a:	4a03      	ldr	r2, [pc, #12]	@ (8017c58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8017c4c:	5cd3      	ldrb	r3, [r2, r3]
}
 8017c4e:	40d8      	lsrs	r0, r3
 8017c50:	bd08      	pop	{r3, pc}
 8017c52:	bf00      	nop
 8017c54:	40023800 	.word	0x40023800
 8017c58:	08036c84 	.word	0x08036c84

08017c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017c5c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8017c5e:	f7ff ffe7 	bl	8017c30 <HAL_RCC_GetHCLKFreq>
 8017c62:	4b04      	ldr	r3, [pc, #16]	@ (8017c74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8017c64:	689b      	ldr	r3, [r3, #8]
 8017c66:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8017c6a:	4a03      	ldr	r2, [pc, #12]	@ (8017c78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8017c6c:	5cd3      	ldrb	r3, [r2, r3]
}
 8017c6e:	40d8      	lsrs	r0, r3
 8017c70:	bd08      	pop	{r3, pc}
 8017c72:	bf00      	nop
 8017c74:	40023800 	.word	0x40023800
 8017c78:	08036c84 	.word	0x08036c84

08017c7c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8017c7c:	230f      	movs	r3, #15
 8017c7e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8017c80:	4b0b      	ldr	r3, [pc, #44]	@ (8017cb0 <HAL_RCC_GetClockConfig+0x34>)
 8017c82:	689a      	ldr	r2, [r3, #8]
 8017c84:	f002 0203 	and.w	r2, r2, #3
 8017c88:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8017c8a:	689a      	ldr	r2, [r3, #8]
 8017c8c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8017c90:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8017c92:	689a      	ldr	r2, [r3, #8]
 8017c94:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8017c98:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8017c9a:	689b      	ldr	r3, [r3, #8]
 8017c9c:	08db      	lsrs	r3, r3, #3
 8017c9e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8017ca2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8017ca4:	4b03      	ldr	r3, [pc, #12]	@ (8017cb4 <HAL_RCC_GetClockConfig+0x38>)
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	f003 0307 	and.w	r3, r3, #7
 8017cac:	600b      	str	r3, [r1, #0]
}
 8017cae:	4770      	bx	lr
 8017cb0:	40023800 	.word	0x40023800
 8017cb4:	40023c00 	.word	0x40023c00

08017cb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8017cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cbc:	b082      	sub	sp, #8
 8017cbe:	4605      	mov	r5, r0
 8017cc0:	4688      	mov	r8, r1
 8017cc2:	4617      	mov	r7, r2
 8017cc4:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8017cc6:	f7fe fca1 	bl	801660c <HAL_GetTick>
 8017cca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017ccc:	1a1b      	subs	r3, r3, r0
 8017cce:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8017cd2:	f7fe fc9b 	bl	801660c <HAL_GetTick>
 8017cd6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8017cd8:	4b28      	ldr	r3, [pc, #160]	@ (8017d7c <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8017ce0:	fb09 f303 	mul.w	r3, r9, r3
 8017ce4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8017ce6:	682b      	ldr	r3, [r5, #0]
 8017ce8:	689c      	ldr	r4, [r3, #8]
 8017cea:	ea38 0404 	bics.w	r4, r8, r4
 8017cee:	bf0c      	ite	eq
 8017cf0:	2301      	moveq	r3, #1
 8017cf2:	2300      	movne	r3, #0
 8017cf4:	42bb      	cmp	r3, r7
 8017cf6:	d03d      	beq.n	8017d74 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8017cf8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017cfc:	d0f3      	beq.n	8017ce6 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8017cfe:	f7fe fc85 	bl	801660c <HAL_GetTick>
 8017d02:	eba0 000a 	sub.w	r0, r0, sl
 8017d06:	4548      	cmp	r0, r9
 8017d08:	d207      	bcs.n	8017d1a <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8017d0a:	9a01      	ldr	r2, [sp, #4]
 8017d0c:	b102      	cbz	r2, 8017d10 <SPI_WaitFlagStateUntilTimeout+0x58>
 8017d0e:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8017d10:	9b01      	ldr	r3, [sp, #4]
 8017d12:	3b01      	subs	r3, #1
 8017d14:	9301      	str	r3, [sp, #4]
 8017d16:	4691      	mov	r9, r2
 8017d18:	e7e5      	b.n	8017ce6 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8017d1a:	682a      	ldr	r2, [r5, #0]
 8017d1c:	6853      	ldr	r3, [r2, #4]
 8017d1e:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8017d22:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017d24:	686b      	ldr	r3, [r5, #4]
 8017d26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017d2a:	d00b      	beq.n	8017d44 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8017d2c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8017d2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017d32:	d014      	beq.n	8017d5e <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8017d34:	2301      	movs	r3, #1
 8017d36:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8017d40:	2003      	movs	r0, #3
 8017d42:	e018      	b.n	8017d76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017d44:	68ab      	ldr	r3, [r5, #8]
 8017d46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017d4a:	d002      	beq.n	8017d52 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017d50:	d1ec      	bne.n	8017d2c <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8017d52:	682a      	ldr	r2, [r5, #0]
 8017d54:	6813      	ldr	r3, [r2, #0]
 8017d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017d5a:	6013      	str	r3, [r2, #0]
 8017d5c:	e7e6      	b.n	8017d2c <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8017d5e:	682a      	ldr	r2, [r5, #0]
 8017d60:	6813      	ldr	r3, [r2, #0]
 8017d62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017d66:	6013      	str	r3, [r2, #0]
 8017d68:	682a      	ldr	r2, [r5, #0]
 8017d6a:	6813      	ldr	r3, [r2, #0]
 8017d6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017d70:	6013      	str	r3, [r2, #0]
 8017d72:	e7df      	b.n	8017d34 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8017d74:	2000      	movs	r0, #0
}
 8017d76:	b002      	add	sp, #8
 8017d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d7c:	20000018 	.word	0x20000018

08017d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8017d80:	b570      	push	{r4, r5, r6, lr}
 8017d82:	b084      	sub	sp, #16
 8017d84:	4604      	mov	r4, r0
 8017d86:	460d      	mov	r5, r1
 8017d88:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8017d8a:	9200      	str	r2, [sp, #0]
 8017d8c:	460b      	mov	r3, r1
 8017d8e:	2201      	movs	r2, #1
 8017d90:	2102      	movs	r1, #2
 8017d92:	f7ff ff91 	bl	8017cb8 <SPI_WaitFlagStateUntilTimeout>
 8017d96:	b9d0      	cbnz	r0, 8017dce <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8017d98:	4b17      	ldr	r3, [pc, #92]	@ (8017df8 <SPI_EndRxTxTransaction+0x78>)
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	4a17      	ldr	r2, [pc, #92]	@ (8017dfc <SPI_EndRxTxTransaction+0x7c>)
 8017d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8017da2:	0d5b      	lsrs	r3, r3, #21
 8017da4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017da8:	fb02 f303 	mul.w	r3, r2, r3
 8017dac:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017dae:	6863      	ldr	r3, [r4, #4]
 8017db0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017db4:	d011      	beq.n	8017dda <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8017db6:	9b03      	ldr	r3, [sp, #12]
 8017db8:	b13b      	cbz	r3, 8017dca <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8017dba:	9b03      	ldr	r3, [sp, #12]
 8017dbc:	3b01      	subs	r3, #1
 8017dbe:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8017dc0:	6823      	ldr	r3, [r4, #0]
 8017dc2:	689b      	ldr	r3, [r3, #8]
 8017dc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017dc8:	d1f5      	bne.n	8017db6 <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8017dca:	b004      	add	sp, #16
 8017dcc:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017dce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017dd0:	f043 0320 	orr.w	r3, r3, #32
 8017dd4:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8017dd6:	2003      	movs	r0, #3
 8017dd8:	e7f7      	b.n	8017dca <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8017dda:	9600      	str	r6, [sp, #0]
 8017ddc:	462b      	mov	r3, r5
 8017dde:	2200      	movs	r2, #0
 8017de0:	2180      	movs	r1, #128	@ 0x80
 8017de2:	4620      	mov	r0, r4
 8017de4:	f7ff ff68 	bl	8017cb8 <SPI_WaitFlagStateUntilTimeout>
 8017de8:	2800      	cmp	r0, #0
 8017dea:	d0ee      	beq.n	8017dca <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017dec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017dee:	f043 0320 	orr.w	r3, r3, #32
 8017df2:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8017df4:	2003      	movs	r0, #3
 8017df6:	e7e8      	b.n	8017dca <SPI_EndRxTxTransaction+0x4a>
 8017df8:	20000018 	.word	0x20000018
 8017dfc:	165e9f81 	.word	0x165e9f81

08017e00 <SPI_EndRxTransaction>:
{
 8017e00:	b510      	push	{r4, lr}
 8017e02:	b082      	sub	sp, #8
 8017e04:	4604      	mov	r4, r0
 8017e06:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017e08:	6841      	ldr	r1, [r0, #4]
 8017e0a:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8017e0e:	d014      	beq.n	8017e3a <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017e10:	6861      	ldr	r1, [r4, #4]
 8017e12:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8017e16:	d12a      	bne.n	8017e6e <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8017e18:	68a1      	ldr	r1, [r4, #8]
 8017e1a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017e1e:	d019      	beq.n	8017e54 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8017e20:	9200      	str	r2, [sp, #0]
 8017e22:	2200      	movs	r2, #0
 8017e24:	2180      	movs	r1, #128	@ 0x80
 8017e26:	4620      	mov	r0, r4
 8017e28:	f7ff ff46 	bl	8017cb8 <SPI_WaitFlagStateUntilTimeout>
 8017e2c:	b330      	cbz	r0, 8017e7c <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017e2e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017e30:	f043 0320 	orr.w	r3, r3, #32
 8017e34:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8017e36:	2003      	movs	r0, #3
 8017e38:	e020      	b.n	8017e7c <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017e3a:	6881      	ldr	r1, [r0, #8]
 8017e3c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8017e40:	d002      	beq.n	8017e48 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017e42:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017e46:	d1e3      	bne.n	8017e10 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8017e48:	6820      	ldr	r0, [r4, #0]
 8017e4a:	6801      	ldr	r1, [r0, #0]
 8017e4c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8017e50:	6001      	str	r1, [r0, #0]
 8017e52:	e7dd      	b.n	8017e10 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017e54:	9200      	str	r2, [sp, #0]
 8017e56:	2200      	movs	r2, #0
 8017e58:	2101      	movs	r1, #1
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	f7ff ff2c 	bl	8017cb8 <SPI_WaitFlagStateUntilTimeout>
 8017e60:	b160      	cbz	r0, 8017e7c <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017e62:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017e64:	f043 0320 	orr.w	r3, r3, #32
 8017e68:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8017e6a:	2003      	movs	r0, #3
 8017e6c:	e006      	b.n	8017e7c <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017e6e:	9200      	str	r2, [sp, #0]
 8017e70:	2200      	movs	r2, #0
 8017e72:	2101      	movs	r1, #1
 8017e74:	4620      	mov	r0, r4
 8017e76:	f7ff ff1f 	bl	8017cb8 <SPI_WaitFlagStateUntilTimeout>
 8017e7a:	b908      	cbnz	r0, 8017e80 <SPI_EndRxTransaction+0x80>
}
 8017e7c:	b002      	add	sp, #8
 8017e7e:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017e80:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017e82:	f043 0320 	orr.w	r3, r3, #32
 8017e86:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8017e88:	2003      	movs	r0, #3
 8017e8a:	e7f7      	b.n	8017e7c <SPI_EndRxTransaction+0x7c>

08017e8c <HAL_SPI_Init>:
  if (hspi == NULL)
 8017e8c:	2800      	cmp	r0, #0
 8017e8e:	d05a      	beq.n	8017f46 <HAL_SPI_Init+0xba>
{
 8017e90:	b510      	push	{r4, lr}
 8017e92:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8017e94:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017e96:	b933      	cbnz	r3, 8017ea6 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017e98:	6843      	ldr	r3, [r0, #4]
 8017e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017e9e:	d005      	beq.n	8017eac <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	61c3      	str	r3, [r0, #28]
 8017ea4:	e002      	b.n	8017eac <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8017eaa:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017eac:	2300      	movs	r3, #0
 8017eae:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8017eb0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d040      	beq.n	8017f3a <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8017eb8:	2302      	movs	r3, #2
 8017eba:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8017ebe:	6822      	ldr	r2, [r4, #0]
 8017ec0:	6813      	ldr	r3, [r2, #0]
 8017ec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017ec6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8017ec8:	6863      	ldr	r3, [r4, #4]
 8017eca:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8017ece:	68a2      	ldr	r2, [r4, #8]
 8017ed0:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8017ed4:	4313      	orrs	r3, r2
 8017ed6:	68e2      	ldr	r2, [r4, #12]
 8017ed8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8017edc:	4313      	orrs	r3, r2
 8017ede:	6922      	ldr	r2, [r4, #16]
 8017ee0:	f002 0202 	and.w	r2, r2, #2
 8017ee4:	4313      	orrs	r3, r2
 8017ee6:	6962      	ldr	r2, [r4, #20]
 8017ee8:	f002 0201 	and.w	r2, r2, #1
 8017eec:	4313      	orrs	r3, r2
 8017eee:	69a2      	ldr	r2, [r4, #24]
 8017ef0:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8017ef4:	4313      	orrs	r3, r2
 8017ef6:	69e2      	ldr	r2, [r4, #28]
 8017ef8:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8017efc:	4313      	orrs	r3, r2
 8017efe:	6a22      	ldr	r2, [r4, #32]
 8017f00:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8017f04:	4313      	orrs	r3, r2
 8017f06:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017f08:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8017f0c:	6821      	ldr	r1, [r4, #0]
 8017f0e:	4313      	orrs	r3, r2
 8017f10:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8017f12:	8b63      	ldrh	r3, [r4, #26]
 8017f14:	f003 0304 	and.w	r3, r3, #4
 8017f18:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017f1a:	f002 0210 	and.w	r2, r2, #16
 8017f1e:	6821      	ldr	r1, [r4, #0]
 8017f20:	4313      	orrs	r3, r2
 8017f22:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8017f24:	6822      	ldr	r2, [r4, #0]
 8017f26:	69d3      	ldr	r3, [r2, #28]
 8017f28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017f2c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8017f2e:	2000      	movs	r0, #0
 8017f30:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8017f32:	2301      	movs	r3, #1
 8017f34:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8017f38:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8017f3a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8017f3e:	4620      	mov	r0, r4
 8017f40:	f7fa fac2 	bl	80124c8 <HAL_SPI_MspInit>
 8017f44:	e7b8      	b.n	8017eb8 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8017f46:	2001      	movs	r0, #1
}
 8017f48:	4770      	bx	lr

08017f4a <HAL_SPI_Transmit>:
{
 8017f4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f4e:	b083      	sub	sp, #12
 8017f50:	4604      	mov	r4, r0
 8017f52:	4689      	mov	r9, r1
 8017f54:	4690      	mov	r8, r2
 8017f56:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8017f58:	f7fe fb58 	bl	801660c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8017f5c:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8017f60:	b2f6      	uxtb	r6, r6
 8017f62:	2e01      	cmp	r6, #1
 8017f64:	f040 80cc 	bne.w	8018100 <HAL_SPI_Transmit+0x1b6>
 8017f68:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8017f6a:	f1b9 0f00 	cmp.w	r9, #0
 8017f6e:	f000 80c8 	beq.w	8018102 <HAL_SPI_Transmit+0x1b8>
 8017f72:	f1b8 0f00 	cmp.w	r8, #0
 8017f76:	f000 80c4 	beq.w	8018102 <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8017f7a:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017f7e:	2b01      	cmp	r3, #1
 8017f80:	f000 80c3 	beq.w	801810a <HAL_SPI_Transmit+0x1c0>
 8017f84:	2301      	movs	r3, #1
 8017f86:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8017f8a:	2303      	movs	r3, #3
 8017f8c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017f90:	2300      	movs	r3, #0
 8017f92:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8017f94:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8017f98:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8017f9c:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8017fa0:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8017fa2:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8017fa4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8017fa6:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8017fa8:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017faa:	68a3      	ldr	r3, [r4, #8]
 8017fac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017fb0:	d01e      	beq.n	8017ff0 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017fb2:	6823      	ldr	r3, [r4, #0]
 8017fb4:	681a      	ldr	r2, [r3, #0]
 8017fb6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8017fba:	d103      	bne.n	8017fc4 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8017fbc:	681a      	ldr	r2, [r3, #0]
 8017fbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017fc2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8017fc4:	68e3      	ldr	r3, [r4, #12]
 8017fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017fca:	d01c      	beq.n	8018006 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017fcc:	6863      	ldr	r3, [r4, #4]
 8017fce:	b113      	cbz	r3, 8017fd6 <HAL_SPI_Transmit+0x8c>
 8017fd0:	f1b8 0f01 	cmp.w	r8, #1
 8017fd4:	d15f      	bne.n	8018096 <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017fd6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017fd8:	6823      	ldr	r3, [r4, #0]
 8017fda:	7812      	ldrb	r2, [r2, #0]
 8017fdc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8017fde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017fe0:	3301      	adds	r3, #1
 8017fe2:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017fe4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017fe6:	b29b      	uxth	r3, r3
 8017fe8:	3b01      	subs	r3, #1
 8017fea:	b29b      	uxth	r3, r3
 8017fec:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017fee:	e052      	b.n	8018096 <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8017ff0:	6822      	ldr	r2, [r4, #0]
 8017ff2:	6813      	ldr	r3, [r2, #0]
 8017ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017ff8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8017ffa:	6822      	ldr	r2, [r4, #0]
 8017ffc:	6813      	ldr	r3, [r2, #0]
 8017ffe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8018002:	6013      	str	r3, [r2, #0]
 8018004:	e7d5      	b.n	8017fb2 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018006:	6863      	ldr	r3, [r4, #4]
 8018008:	b113      	cbz	r3, 8018010 <HAL_SPI_Transmit+0xc6>
 801800a:	f1b8 0f01 	cmp.w	r8, #1
 801800e:	d115      	bne.n	801803c <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8018010:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018012:	6823      	ldr	r3, [r4, #0]
 8018014:	8812      	ldrh	r2, [r2, #0]
 8018016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8018018:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801801a:	3302      	adds	r3, #2
 801801c:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 801801e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018020:	b29b      	uxth	r3, r3
 8018022:	3b01      	subs	r3, #1
 8018024:	b29b      	uxth	r3, r3
 8018026:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8018028:	e008      	b.n	801803c <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801802a:	f7fe faef 	bl	801660c <HAL_GetTick>
 801802e:	1bc0      	subs	r0, r0, r7
 8018030:	42a8      	cmp	r0, r5
 8018032:	d302      	bcc.n	801803a <HAL_SPI_Transmit+0xf0>
 8018034:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018038:	d115      	bne.n	8018066 <HAL_SPI_Transmit+0x11c>
 801803a:	b1a5      	cbz	r5, 8018066 <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 801803c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801803e:	b29b      	uxth	r3, r3
 8018040:	2b00      	cmp	r3, #0
 8018042:	d042      	beq.n	80180ca <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8018044:	6823      	ldr	r3, [r4, #0]
 8018046:	689a      	ldr	r2, [r3, #8]
 8018048:	f012 0f02 	tst.w	r2, #2
 801804c:	d0ed      	beq.n	801802a <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801804e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018050:	8812      	ldrh	r2, [r2, #0]
 8018052:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018054:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018056:	3302      	adds	r3, #2
 8018058:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 801805a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801805c:	b29b      	uxth	r3, r3
 801805e:	3b01      	subs	r3, #1
 8018060:	b29b      	uxth	r3, r3
 8018062:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8018064:	e7ea      	b.n	801803c <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8018066:	2301      	movs	r3, #1
 8018068:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801806c:	2300      	movs	r3, #0
 801806e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8018072:	2603      	movs	r6, #3
 8018074:	e045      	b.n	8018102 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8018076:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018078:	7812      	ldrb	r2, [r2, #0]
 801807a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801807c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801807e:	3301      	adds	r3, #1
 8018080:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8018082:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8018086:	fa1f fc8c 	uxth.w	ip, ip
 801808a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801808e:	fa1f fc8c 	uxth.w	ip, ip
 8018092:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8018096:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018098:	b29b      	uxth	r3, r3
 801809a:	b1b3      	cbz	r3, 80180ca <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801809c:	6823      	ldr	r3, [r4, #0]
 801809e:	689a      	ldr	r2, [r3, #8]
 80180a0:	f012 0f02 	tst.w	r2, #2
 80180a4:	d1e7      	bne.n	8018076 <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80180a6:	f7fe fab1 	bl	801660c <HAL_GetTick>
 80180aa:	1bc0      	subs	r0, r0, r7
 80180ac:	42a8      	cmp	r0, r5
 80180ae:	d302      	bcc.n	80180b6 <HAL_SPI_Transmit+0x16c>
 80180b0:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80180b4:	d101      	bne.n	80180ba <HAL_SPI_Transmit+0x170>
 80180b6:	2d00      	cmp	r5, #0
 80180b8:	d1ed      	bne.n	8018096 <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 80180ba:	2301      	movs	r3, #1
 80180bc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80180c0:	2300      	movs	r3, #0
 80180c2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80180c6:	2603      	movs	r6, #3
 80180c8:	e01b      	b.n	8018102 <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80180ca:	463a      	mov	r2, r7
 80180cc:	4629      	mov	r1, r5
 80180ce:	4620      	mov	r0, r4
 80180d0:	f7ff fe56 	bl	8017d80 <SPI_EndRxTxTransaction>
 80180d4:	b108      	cbz	r0, 80180da <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80180d6:	2320      	movs	r3, #32
 80180d8:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80180da:	68a3      	ldr	r3, [r4, #8]
 80180dc:	b933      	cbnz	r3, 80180ec <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80180de:	9301      	str	r3, [sp, #4]
 80180e0:	6823      	ldr	r3, [r4, #0]
 80180e2:	68da      	ldr	r2, [r3, #12]
 80180e4:	9201      	str	r2, [sp, #4]
 80180e6:	689b      	ldr	r3, [r3, #8]
 80180e8:	9301      	str	r3, [sp, #4]
 80180ea:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80180ec:	2301      	movs	r3, #1
 80180ee:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80180f2:	2300      	movs	r3, #0
 80180f4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80180f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80180fa:	b913      	cbnz	r3, 8018102 <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 80180fc:	2600      	movs	r6, #0
 80180fe:	e000      	b.n	8018102 <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8018100:	2602      	movs	r6, #2
}
 8018102:	4630      	mov	r0, r6
 8018104:	b003      	add	sp, #12
 8018106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 801810a:	2602      	movs	r6, #2
 801810c:	e7f9      	b.n	8018102 <HAL_SPI_Transmit+0x1b8>

0801810e <HAL_SPI_TransmitReceive>:
{
 801810e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018112:	b083      	sub	sp, #12
 8018114:	4604      	mov	r4, r0
 8018116:	4688      	mov	r8, r1
 8018118:	4691      	mov	r9, r2
 801811a:	461f      	mov	r7, r3
 801811c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 801811e:	f7fe fa75 	bl	801660c <HAL_GetTick>
 8018122:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8018124:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8018128:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 801812a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801812c:	2b01      	cmp	r3, #1
 801812e:	d00a      	beq.n	8018146 <HAL_SPI_TransmitReceive+0x38>
 8018130:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8018134:	f040 8105 	bne.w	8018342 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8018138:	68a2      	ldr	r2, [r4, #8]
 801813a:	2a00      	cmp	r2, #0
 801813c:	f040 8105 	bne.w	801834a <HAL_SPI_TransmitReceive+0x23c>
 8018140:	2b04      	cmp	r3, #4
 8018142:	f040 8104 	bne.w	801834e <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8018146:	f1b8 0f00 	cmp.w	r8, #0
 801814a:	f000 8102 	beq.w	8018352 <HAL_SPI_TransmitReceive+0x244>
 801814e:	f1b9 0f00 	cmp.w	r9, #0
 8018152:	f000 8100 	beq.w	8018356 <HAL_SPI_TransmitReceive+0x248>
 8018156:	2f00      	cmp	r7, #0
 8018158:	f000 80ff 	beq.w	801835a <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 801815c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8018160:	2b01      	cmp	r3, #1
 8018162:	f000 80fc 	beq.w	801835e <HAL_SPI_TransmitReceive+0x250>
 8018166:	2301      	movs	r3, #1
 8018168:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801816c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8018170:	b2db      	uxtb	r3, r3
 8018172:	2b04      	cmp	r3, #4
 8018174:	d002      	beq.n	801817c <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8018176:	2305      	movs	r3, #5
 8018178:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801817c:	2300      	movs	r3, #0
 801817e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8018180:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8018184:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8018186:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8018188:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 801818c:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 801818e:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8018190:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8018192:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018194:	6823      	ldr	r3, [r4, #0]
 8018196:	681a      	ldr	r2, [r3, #0]
 8018198:	f012 0f40 	tst.w	r2, #64	@ 0x40
 801819c:	d103      	bne.n	80181a6 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 801819e:	681a      	ldr	r2, [r3, #0]
 80181a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80181a4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80181a6:	68e3      	ldr	r3, [r4, #12]
 80181a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80181ac:	d011      	beq.n	80181d2 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80181ae:	6863      	ldr	r3, [r4, #4]
 80181b0:	b10b      	cbz	r3, 80181b6 <HAL_SPI_TransmitReceive+0xa8>
 80181b2:	2f01      	cmp	r7, #1
 80181b4:	d10b      	bne.n	80181ce <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80181b6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80181b8:	6823      	ldr	r3, [r4, #0]
 80181ba:	7812      	ldrb	r2, [r2, #0]
 80181bc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80181be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80181c0:	3301      	adds	r3, #1
 80181c2:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80181c4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80181c6:	b29b      	uxth	r3, r3
 80181c8:	3b01      	subs	r3, #1
 80181ca:	b29b      	uxth	r3, r3
 80181cc:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80181ce:	2701      	movs	r7, #1
 80181d0:	e071      	b.n	80182b6 <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80181d2:	6863      	ldr	r3, [r4, #4]
 80181d4:	b10b      	cbz	r3, 80181da <HAL_SPI_TransmitReceive+0xcc>
 80181d6:	2f01      	cmp	r7, #1
 80181d8:	d10b      	bne.n	80181f2 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80181da:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80181dc:	6823      	ldr	r3, [r4, #0]
 80181de:	8812      	ldrh	r2, [r2, #0]
 80181e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80181e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80181e4:	3302      	adds	r3, #2
 80181e6:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80181e8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80181ea:	b29b      	uxth	r3, r3
 80181ec:	3b01      	subs	r3, #1
 80181ee:	b29b      	uxth	r3, r3
 80181f0:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80181f2:	2701      	movs	r7, #1
 80181f4:	e01b      	b.n	801822e <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80181f6:	6823      	ldr	r3, [r4, #0]
 80181f8:	689a      	ldr	r2, [r3, #8]
 80181fa:	f012 0f01 	tst.w	r2, #1
 80181fe:	d00e      	beq.n	801821e <HAL_SPI_TransmitReceive+0x110>
 8018200:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8018202:	b292      	uxth	r2, r2
 8018204:	b15a      	cbz	r2, 801821e <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018206:	68da      	ldr	r2, [r3, #12]
 8018208:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801820a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801820c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801820e:	3302      	adds	r3, #2
 8018210:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8018212:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8018214:	b29b      	uxth	r3, r3
 8018216:	3b01      	subs	r3, #1
 8018218:	b29b      	uxth	r3, r3
 801821a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 801821c:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801821e:	f7fe f9f5 	bl	801660c <HAL_GetTick>
 8018222:	1b80      	subs	r0, r0, r6
 8018224:	42a8      	cmp	r0, r5
 8018226:	d302      	bcc.n	801822e <HAL_SPI_TransmitReceive+0x120>
 8018228:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801822c:	d11e      	bne.n	801826c <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801822e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018230:	b29b      	uxth	r3, r3
 8018232:	b91b      	cbnz	r3, 801823c <HAL_SPI_TransmitReceive+0x12e>
 8018234:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8018236:	b29b      	uxth	r3, r3
 8018238:	2b00      	cmp	r3, #0
 801823a:	d062      	beq.n	8018302 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801823c:	6823      	ldr	r3, [r4, #0]
 801823e:	689a      	ldr	r2, [r3, #8]
 8018240:	f012 0f02 	tst.w	r2, #2
 8018244:	d0d7      	beq.n	80181f6 <HAL_SPI_TransmitReceive+0xe8>
 8018246:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018248:	b292      	uxth	r2, r2
 801824a:	2a00      	cmp	r2, #0
 801824c:	d0d3      	beq.n	80181f6 <HAL_SPI_TransmitReceive+0xe8>
 801824e:	2f00      	cmp	r7, #0
 8018250:	d0d1      	beq.n	80181f6 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8018252:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018254:	8812      	ldrh	r2, [r2, #0]
 8018256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018258:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801825a:	3302      	adds	r3, #2
 801825c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 801825e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018260:	b29b      	uxth	r3, r3
 8018262:	3b01      	subs	r3, #1
 8018264:	b29b      	uxth	r3, r3
 8018266:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8018268:	2700      	movs	r7, #0
 801826a:	e7c4      	b.n	80181f6 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 801826c:	2301      	movs	r3, #1
 801826e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8018272:	2300      	movs	r3, #0
 8018274:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8018278:	2003      	movs	r0, #3
 801827a:	e063      	b.n	8018344 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801827c:	6823      	ldr	r3, [r4, #0]
 801827e:	689a      	ldr	r2, [r3, #8]
 8018280:	f012 0f01 	tst.w	r2, #1
 8018284:	d00e      	beq.n	80182a4 <HAL_SPI_TransmitReceive+0x196>
 8018286:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8018288:	b292      	uxth	r2, r2
 801828a:	b15a      	cbz	r2, 80182a4 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801828c:	68da      	ldr	r2, [r3, #12]
 801828e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018290:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8018292:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018294:	3301      	adds	r3, #1
 8018296:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8018298:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801829a:	b29b      	uxth	r3, r3
 801829c:	3b01      	subs	r3, #1
 801829e:	b29b      	uxth	r3, r3
 80182a0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80182a2:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80182a4:	f7fe f9b2 	bl	801660c <HAL_GetTick>
 80182a8:	1b83      	subs	r3, r0, r6
 80182aa:	42ab      	cmp	r3, r5
 80182ac:	d302      	bcc.n	80182b4 <HAL_SPI_TransmitReceive+0x1a6>
 80182ae:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80182b2:	d11e      	bne.n	80182f2 <HAL_SPI_TransmitReceive+0x1e4>
 80182b4:	b1ed      	cbz	r5, 80182f2 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80182b6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80182b8:	b29b      	uxth	r3, r3
 80182ba:	b913      	cbnz	r3, 80182c2 <HAL_SPI_TransmitReceive+0x1b4>
 80182bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80182be:	b29b      	uxth	r3, r3
 80182c0:	b1fb      	cbz	r3, 8018302 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80182c2:	6823      	ldr	r3, [r4, #0]
 80182c4:	689a      	ldr	r2, [r3, #8]
 80182c6:	f012 0f02 	tst.w	r2, #2
 80182ca:	d0d7      	beq.n	801827c <HAL_SPI_TransmitReceive+0x16e>
 80182cc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80182ce:	b292      	uxth	r2, r2
 80182d0:	2a00      	cmp	r2, #0
 80182d2:	d0d3      	beq.n	801827c <HAL_SPI_TransmitReceive+0x16e>
 80182d4:	2f00      	cmp	r7, #0
 80182d6:	d0d1      	beq.n	801827c <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80182d8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80182da:	7812      	ldrb	r2, [r2, #0]
 80182dc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80182de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80182e0:	3301      	adds	r3, #1
 80182e2:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80182e4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80182e6:	b29b      	uxth	r3, r3
 80182e8:	3b01      	subs	r3, #1
 80182ea:	b29b      	uxth	r3, r3
 80182ec:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80182ee:	2700      	movs	r7, #0
 80182f0:	e7c4      	b.n	801827c <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 80182f2:	2301      	movs	r3, #1
 80182f4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80182f8:	2300      	movs	r3, #0
 80182fa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 80182fe:	2003      	movs	r0, #3
 8018300:	e020      	b.n	8018344 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8018302:	4632      	mov	r2, r6
 8018304:	4629      	mov	r1, r5
 8018306:	4620      	mov	r0, r4
 8018308:	f7ff fd3a 	bl	8017d80 <SPI_EndRxTxTransaction>
 801830c:	b990      	cbnz	r0, 8018334 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801830e:	68a3      	ldr	r3, [r4, #8]
 8018310:	b933      	cbnz	r3, 8018320 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8018312:	9301      	str	r3, [sp, #4]
 8018314:	6823      	ldr	r3, [r4, #0]
 8018316:	68da      	ldr	r2, [r3, #12]
 8018318:	9201      	str	r2, [sp, #4]
 801831a:	689b      	ldr	r3, [r3, #8]
 801831c:	9301      	str	r3, [sp, #4]
 801831e:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8018320:	2301      	movs	r3, #1
 8018322:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8018326:	2300      	movs	r3, #0
 8018328:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801832c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801832e:	b14b      	cbz	r3, 8018344 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8018330:	2001      	movs	r0, #1
 8018332:	e007      	b.n	8018344 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8018334:	2320      	movs	r3, #32
 8018336:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8018338:	2300      	movs	r3, #0
 801833a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 801833e:	2001      	movs	r0, #1
 8018340:	e000      	b.n	8018344 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8018342:	2002      	movs	r0, #2
}
 8018344:	b003      	add	sp, #12
 8018346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 801834a:	2002      	movs	r0, #2
 801834c:	e7fa      	b.n	8018344 <HAL_SPI_TransmitReceive+0x236>
 801834e:	2002      	movs	r0, #2
 8018350:	e7f8      	b.n	8018344 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8018352:	2001      	movs	r0, #1
 8018354:	e7f6      	b.n	8018344 <HAL_SPI_TransmitReceive+0x236>
 8018356:	2001      	movs	r0, #1
 8018358:	e7f4      	b.n	8018344 <HAL_SPI_TransmitReceive+0x236>
 801835a:	2001      	movs	r0, #1
 801835c:	e7f2      	b.n	8018344 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 801835e:	2002      	movs	r0, #2
 8018360:	e7f0      	b.n	8018344 <HAL_SPI_TransmitReceive+0x236>

08018362 <HAL_SPI_Receive>:
{
 8018362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018366:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8018368:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 801836c:	b2f6      	uxtb	r6, r6
 801836e:	2e01      	cmp	r6, #1
 8018370:	f040 80b4 	bne.w	80184dc <HAL_SPI_Receive+0x17a>
 8018374:	4604      	mov	r4, r0
 8018376:	4689      	mov	r9, r1
 8018378:	4690      	mov	r8, r2
 801837a:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801837c:	6843      	ldr	r3, [r0, #4]
 801837e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018382:	d101      	bne.n	8018388 <HAL_SPI_Receive+0x26>
 8018384:	6883      	ldr	r3, [r0, #8]
 8018386:	b393      	cbz	r3, 80183ee <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 8018388:	f7fe f940 	bl	801660c <HAL_GetTick>
 801838c:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 801838e:	f1b9 0f00 	cmp.w	r9, #0
 8018392:	f000 80a4 	beq.w	80184de <HAL_SPI_Receive+0x17c>
 8018396:	f1b8 0f00 	cmp.w	r8, #0
 801839a:	f000 80a0 	beq.w	80184de <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 801839e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80183a2:	2b01      	cmp	r3, #1
 80183a4:	f000 809f 	beq.w	80184e6 <HAL_SPI_Receive+0x184>
 80183a8:	2301      	movs	r3, #1
 80183aa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80183ae:	2304      	movs	r3, #4
 80183b0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80183b4:	2300      	movs	r3, #0
 80183b6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80183b8:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80183bc:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80183c0:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80183c4:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80183c6:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80183c8:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80183ca:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80183cc:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80183ce:	68a3      	ldr	r3, [r4, #8]
 80183d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80183d4:	d015      	beq.n	8018402 <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80183d6:	6823      	ldr	r3, [r4, #0]
 80183d8:	681a      	ldr	r2, [r3, #0]
 80183da:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80183de:	d103      	bne.n	80183e8 <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 80183e0:	681a      	ldr	r2, [r3, #0]
 80183e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80183e6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80183e8:	68e3      	ldr	r3, [r4, #12]
 80183ea:	b1f3      	cbz	r3, 801842a <HAL_SPI_Receive+0xc8>
 80183ec:	e043      	b.n	8018476 <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80183ee:	2304      	movs	r3, #4
 80183f0:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80183f4:	9500      	str	r5, [sp, #0]
 80183f6:	4613      	mov	r3, r2
 80183f8:	460a      	mov	r2, r1
 80183fa:	f7ff fe88 	bl	801810e <HAL_SPI_TransmitReceive>
 80183fe:	4606      	mov	r6, r0
 8018400:	e06d      	b.n	80184de <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8018402:	6822      	ldr	r2, [r4, #0]
 8018404:	6813      	ldr	r3, [r2, #0]
 8018406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801840a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 801840c:	6822      	ldr	r2, [r4, #0]
 801840e:	6813      	ldr	r3, [r2, #0]
 8018410:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8018414:	6013      	str	r3, [r2, #0]
 8018416:	e7de      	b.n	80183d6 <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018418:	f7fe f8f8 	bl	801660c <HAL_GetTick>
 801841c:	1bc0      	subs	r0, r0, r7
 801841e:	42a8      	cmp	r0, r5
 8018420:	d302      	bcc.n	8018428 <HAL_SPI_Receive+0xc6>
 8018422:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018426:	d115      	bne.n	8018454 <HAL_SPI_Receive+0xf2>
 8018428:	b1a5      	cbz	r5, 8018454 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 801842a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801842c:	b29b      	uxth	r3, r3
 801842e:	2b00      	cmp	r3, #0
 8018430:	d042      	beq.n	80184b8 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8018432:	6823      	ldr	r3, [r4, #0]
 8018434:	689a      	ldr	r2, [r3, #8]
 8018436:	f012 0f01 	tst.w	r2, #1
 801843a:	d0ed      	beq.n	8018418 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801843c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801843e:	7b1b      	ldrb	r3, [r3, #12]
 8018440:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8018442:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018444:	3301      	adds	r3, #1
 8018446:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8018448:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801844a:	b29b      	uxth	r3, r3
 801844c:	3b01      	subs	r3, #1
 801844e:	b29b      	uxth	r3, r3
 8018450:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8018452:	e7ea      	b.n	801842a <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8018454:	2301      	movs	r3, #1
 8018456:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801845a:	2300      	movs	r3, #0
 801845c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8018460:	2603      	movs	r6, #3
 8018462:	e03c      	b.n	80184de <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018464:	f7fe f8d2 	bl	801660c <HAL_GetTick>
 8018468:	1bc0      	subs	r0, r0, r7
 801846a:	42a8      	cmp	r0, r5
 801846c:	d302      	bcc.n	8018474 <HAL_SPI_Receive+0x112>
 801846e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018472:	d119      	bne.n	80184a8 <HAL_SPI_Receive+0x146>
 8018474:	b1c5      	cbz	r5, 80184a8 <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 8018476:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8018478:	b29b      	uxth	r3, r3
 801847a:	b1eb      	cbz	r3, 80184b8 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801847c:	6823      	ldr	r3, [r4, #0]
 801847e:	689a      	ldr	r2, [r3, #8]
 8018480:	f012 0f01 	tst.w	r2, #1
 8018484:	d0ee      	beq.n	8018464 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018486:	68da      	ldr	r2, [r3, #12]
 8018488:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801848a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801848c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801848e:	3302      	adds	r3, #2
 8018490:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8018492:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8018496:	fa1f fc8c 	uxth.w	ip, ip
 801849a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801849e:	fa1f fc8c 	uxth.w	ip, ip
 80184a2:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 80184a6:	e7e6      	b.n	8018476 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 80184a8:	2301      	movs	r3, #1
 80184aa:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80184ae:	2300      	movs	r3, #0
 80184b0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80184b4:	2603      	movs	r6, #3
 80184b6:	e012      	b.n	80184de <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80184b8:	463a      	mov	r2, r7
 80184ba:	4629      	mov	r1, r5
 80184bc:	4620      	mov	r0, r4
 80184be:	f7ff fc9f 	bl	8017e00 <SPI_EndRxTransaction>
 80184c2:	b108      	cbz	r0, 80184c8 <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80184c4:	2320      	movs	r3, #32
 80184c6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80184c8:	2301      	movs	r3, #1
 80184ca:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80184ce:	2300      	movs	r3, #0
 80184d0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80184d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80184d6:	b913      	cbnz	r3, 80184de <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 80184d8:	2600      	movs	r6, #0
 80184da:	e000      	b.n	80184de <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 80184dc:	2602      	movs	r6, #2
}
 80184de:	4630      	mov	r0, r6
 80184e0:	b003      	add	sp, #12
 80184e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80184e6:	2602      	movs	r6, #2
 80184e8:	e7f9      	b.n	80184de <HAL_SPI_Receive+0x17c>

080184ea <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80184ea:	4770      	bx	lr

080184ec <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80184ec:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80184f0:	b2db      	uxtb	r3, r3
 80184f2:	2b01      	cmp	r3, #1
 80184f4:	d12f      	bne.n	8018556 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80184f6:	2302      	movs	r3, #2
 80184f8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80184fc:	6802      	ldr	r2, [r0, #0]
 80184fe:	68d3      	ldr	r3, [r2, #12]
 8018500:	f043 0301 	orr.w	r3, r3, #1
 8018504:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018506:	6803      	ldr	r3, [r0, #0]
 8018508:	4a15      	ldr	r2, [pc, #84]	@ (8018560 <HAL_TIM_Base_Start_IT+0x74>)
 801850a:	4293      	cmp	r3, r2
 801850c:	d018      	beq.n	8018540 <HAL_TIM_Base_Start_IT+0x54>
 801850e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018512:	d015      	beq.n	8018540 <HAL_TIM_Base_Start_IT+0x54>
 8018514:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8018518:	4293      	cmp	r3, r2
 801851a:	d011      	beq.n	8018540 <HAL_TIM_Base_Start_IT+0x54>
 801851c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018520:	4293      	cmp	r3, r2
 8018522:	d00d      	beq.n	8018540 <HAL_TIM_Base_Start_IT+0x54>
 8018524:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018528:	4293      	cmp	r3, r2
 801852a:	d009      	beq.n	8018540 <HAL_TIM_Base_Start_IT+0x54>
 801852c:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8018530:	4293      	cmp	r3, r2
 8018532:	d005      	beq.n	8018540 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018534:	681a      	ldr	r2, [r3, #0]
 8018536:	f042 0201 	orr.w	r2, r2, #1
 801853a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801853c:	2000      	movs	r0, #0
 801853e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018540:	689a      	ldr	r2, [r3, #8]
 8018542:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018546:	2a06      	cmp	r2, #6
 8018548:	d007      	beq.n	801855a <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 801854a:	681a      	ldr	r2, [r3, #0]
 801854c:	f042 0201 	orr.w	r2, r2, #1
 8018550:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8018552:	2000      	movs	r0, #0
 8018554:	4770      	bx	lr
    return HAL_ERROR;
 8018556:	2001      	movs	r0, #1
 8018558:	4770      	bx	lr
  return HAL_OK;
 801855a:	2000      	movs	r0, #0
}
 801855c:	4770      	bx	lr
 801855e:	bf00      	nop
 8018560:	40010000 	.word	0x40010000

08018564 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8018564:	4770      	bx	lr

08018566 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8018566:	4770      	bx	lr

08018568 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8018568:	4770      	bx	lr

0801856a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801856a:	4770      	bx	lr

0801856c <HAL_TIM_IRQHandler>:
{
 801856c:	b570      	push	{r4, r5, r6, lr}
 801856e:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8018570:	6803      	ldr	r3, [r0, #0]
 8018572:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8018574:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8018576:	f015 0f02 	tst.w	r5, #2
 801857a:	d010      	beq.n	801859e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801857c:	f016 0f02 	tst.w	r6, #2
 8018580:	d00d      	beq.n	801859e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8018582:	f06f 0202 	mvn.w	r2, #2
 8018586:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018588:	2301      	movs	r3, #1
 801858a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801858c:	6803      	ldr	r3, [r0, #0]
 801858e:	699b      	ldr	r3, [r3, #24]
 8018590:	f013 0f03 	tst.w	r3, #3
 8018594:	d05e      	beq.n	8018654 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8018596:	f7ff ffe6 	bl	8018566 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801859a:	2300      	movs	r3, #0
 801859c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801859e:	f015 0f04 	tst.w	r5, #4
 80185a2:	d012      	beq.n	80185ca <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80185a4:	f016 0f04 	tst.w	r6, #4
 80185a8:	d00f      	beq.n	80185ca <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80185aa:	6823      	ldr	r3, [r4, #0]
 80185ac:	f06f 0204 	mvn.w	r2, #4
 80185b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80185b2:	2302      	movs	r3, #2
 80185b4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80185b6:	6823      	ldr	r3, [r4, #0]
 80185b8:	699b      	ldr	r3, [r3, #24]
 80185ba:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80185be:	d04f      	beq.n	8018660 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80185c0:	4620      	mov	r0, r4
 80185c2:	f7ff ffd0 	bl	8018566 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80185c6:	2300      	movs	r3, #0
 80185c8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80185ca:	f015 0f08 	tst.w	r5, #8
 80185ce:	d012      	beq.n	80185f6 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80185d0:	f016 0f08 	tst.w	r6, #8
 80185d4:	d00f      	beq.n	80185f6 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80185d6:	6823      	ldr	r3, [r4, #0]
 80185d8:	f06f 0208 	mvn.w	r2, #8
 80185dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80185de:	2304      	movs	r3, #4
 80185e0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80185e2:	6823      	ldr	r3, [r4, #0]
 80185e4:	69db      	ldr	r3, [r3, #28]
 80185e6:	f013 0f03 	tst.w	r3, #3
 80185ea:	d040      	beq.n	801866e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80185ec:	4620      	mov	r0, r4
 80185ee:	f7ff ffba 	bl	8018566 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80185f2:	2300      	movs	r3, #0
 80185f4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80185f6:	f015 0f10 	tst.w	r5, #16
 80185fa:	d012      	beq.n	8018622 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80185fc:	f016 0f10 	tst.w	r6, #16
 8018600:	d00f      	beq.n	8018622 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8018602:	6823      	ldr	r3, [r4, #0]
 8018604:	f06f 0210 	mvn.w	r2, #16
 8018608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801860a:	2308      	movs	r3, #8
 801860c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801860e:	6823      	ldr	r3, [r4, #0]
 8018610:	69db      	ldr	r3, [r3, #28]
 8018612:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8018616:	d031      	beq.n	801867c <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8018618:	4620      	mov	r0, r4
 801861a:	f7ff ffa4 	bl	8018566 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801861e:	2300      	movs	r3, #0
 8018620:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8018622:	f015 0f01 	tst.w	r5, #1
 8018626:	d002      	beq.n	801862e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8018628:	f016 0f01 	tst.w	r6, #1
 801862c:	d12d      	bne.n	801868a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 801862e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8018632:	d002      	beq.n	801863a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8018634:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8018638:	d12f      	bne.n	801869a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801863a:	f015 0f40 	tst.w	r5, #64	@ 0x40
 801863e:	d002      	beq.n	8018646 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8018640:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8018644:	d131      	bne.n	80186aa <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8018646:	f015 0f20 	tst.w	r5, #32
 801864a:	d002      	beq.n	8018652 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801864c:	f016 0f20 	tst.w	r6, #32
 8018650:	d133      	bne.n	80186ba <HAL_TIM_IRQHandler+0x14e>
}
 8018652:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8018654:	f7ff ff86 	bl	8018564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018658:	4620      	mov	r0, r4
 801865a:	f7ff ff85 	bl	8018568 <HAL_TIM_PWM_PulseFinishedCallback>
 801865e:	e79c      	b.n	801859a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018660:	4620      	mov	r0, r4
 8018662:	f7ff ff7f 	bl	8018564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018666:	4620      	mov	r0, r4
 8018668:	f7ff ff7e 	bl	8018568 <HAL_TIM_PWM_PulseFinishedCallback>
 801866c:	e7ab      	b.n	80185c6 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801866e:	4620      	mov	r0, r4
 8018670:	f7ff ff78 	bl	8018564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018674:	4620      	mov	r0, r4
 8018676:	f7ff ff77 	bl	8018568 <HAL_TIM_PWM_PulseFinishedCallback>
 801867a:	e7ba      	b.n	80185f2 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801867c:	4620      	mov	r0, r4
 801867e:	f7ff ff71 	bl	8018564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018682:	4620      	mov	r0, r4
 8018684:	f7ff ff70 	bl	8018568 <HAL_TIM_PWM_PulseFinishedCallback>
 8018688:	e7c9      	b.n	801861e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801868a:	6823      	ldr	r3, [r4, #0]
 801868c:	f06f 0201 	mvn.w	r2, #1
 8018690:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8018692:	4620      	mov	r0, r4
 8018694:	f7f9 fe46 	bl	8012324 <HAL_TIM_PeriodElapsedCallback>
 8018698:	e7c9      	b.n	801862e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801869a:	6823      	ldr	r3, [r4, #0]
 801869c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80186a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80186a2:	4620      	mov	r0, r4
 80186a4:	f000 f895 	bl	80187d2 <HAL_TIMEx_BreakCallback>
 80186a8:	e7c7      	b.n	801863a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80186aa:	6823      	ldr	r3, [r4, #0]
 80186ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80186b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80186b2:	4620      	mov	r0, r4
 80186b4:	f7ff ff59 	bl	801856a <HAL_TIM_TriggerCallback>
 80186b8:	e7c5      	b.n	8018646 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80186ba:	6823      	ldr	r3, [r4, #0]
 80186bc:	f06f 0220 	mvn.w	r2, #32
 80186c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80186c2:	4620      	mov	r0, r4
 80186c4:	f000 f884 	bl	80187d0 <HAL_TIMEx_CommutCallback>
}
 80186c8:	e7c3      	b.n	8018652 <HAL_TIM_IRQHandler+0xe6>
	...

080186cc <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80186cc:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80186ce:	4a29      	ldr	r2, [pc, #164]	@ (8018774 <TIM_Base_SetConfig+0xa8>)
 80186d0:	4290      	cmp	r0, r2
 80186d2:	d00e      	beq.n	80186f2 <TIM_Base_SetConfig+0x26>
 80186d4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80186d8:	d00b      	beq.n	80186f2 <TIM_Base_SetConfig+0x26>
 80186da:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80186de:	4290      	cmp	r0, r2
 80186e0:	d007      	beq.n	80186f2 <TIM_Base_SetConfig+0x26>
 80186e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80186e6:	4290      	cmp	r0, r2
 80186e8:	d003      	beq.n	80186f2 <TIM_Base_SetConfig+0x26>
 80186ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80186ee:	4290      	cmp	r0, r2
 80186f0:	d103      	bne.n	80186fa <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80186f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80186f6:	684a      	ldr	r2, [r1, #4]
 80186f8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80186fa:	4a1e      	ldr	r2, [pc, #120]	@ (8018774 <TIM_Base_SetConfig+0xa8>)
 80186fc:	4290      	cmp	r0, r2
 80186fe:	d01a      	beq.n	8018736 <TIM_Base_SetConfig+0x6a>
 8018700:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8018704:	d017      	beq.n	8018736 <TIM_Base_SetConfig+0x6a>
 8018706:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 801870a:	4290      	cmp	r0, r2
 801870c:	d013      	beq.n	8018736 <TIM_Base_SetConfig+0x6a>
 801870e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018712:	4290      	cmp	r0, r2
 8018714:	d00f      	beq.n	8018736 <TIM_Base_SetConfig+0x6a>
 8018716:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801871a:	4290      	cmp	r0, r2
 801871c:	d00b      	beq.n	8018736 <TIM_Base_SetConfig+0x6a>
 801871e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8018722:	4290      	cmp	r0, r2
 8018724:	d007      	beq.n	8018736 <TIM_Base_SetConfig+0x6a>
 8018726:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801872a:	4290      	cmp	r0, r2
 801872c:	d003      	beq.n	8018736 <TIM_Base_SetConfig+0x6a>
 801872e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018732:	4290      	cmp	r0, r2
 8018734:	d103      	bne.n	801873e <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801873a:	68ca      	ldr	r2, [r1, #12]
 801873c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801873e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018742:	694a      	ldr	r2, [r1, #20]
 8018744:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8018746:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018748:	688b      	ldr	r3, [r1, #8]
 801874a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801874c:	680b      	ldr	r3, [r1, #0]
 801874e:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018750:	4b08      	ldr	r3, [pc, #32]	@ (8018774 <TIM_Base_SetConfig+0xa8>)
 8018752:	4298      	cmp	r0, r3
 8018754:	d00a      	beq.n	801876c <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018756:	2301      	movs	r3, #1
 8018758:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801875a:	6903      	ldr	r3, [r0, #16]
 801875c:	f013 0f01 	tst.w	r3, #1
 8018760:	d003      	beq.n	801876a <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8018762:	6903      	ldr	r3, [r0, #16]
 8018764:	f023 0301 	bic.w	r3, r3, #1
 8018768:	6103      	str	r3, [r0, #16]
  }
}
 801876a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 801876c:	690b      	ldr	r3, [r1, #16]
 801876e:	6303      	str	r3, [r0, #48]	@ 0x30
 8018770:	e7f1      	b.n	8018756 <TIM_Base_SetConfig+0x8a>
 8018772:	bf00      	nop
 8018774:	40010000 	.word	0x40010000

08018778 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8018778:	b340      	cbz	r0, 80187cc <HAL_TIM_Base_Init+0x54>
{
 801877a:	b510      	push	{r4, lr}
 801877c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 801877e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8018782:	b1f3      	cbz	r3, 80187c2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8018784:	2302      	movs	r3, #2
 8018786:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801878a:	4621      	mov	r1, r4
 801878c:	f851 0b04 	ldr.w	r0, [r1], #4
 8018790:	f7ff ff9c 	bl	80186cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8018794:	2301      	movs	r3, #1
 8018796:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801879a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 801879e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80187a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80187a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80187aa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80187ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80187b2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80187b6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80187ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80187be:	2000      	movs	r0, #0
}
 80187c0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80187c2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80187c6:	f7ff fe90 	bl	80184ea <HAL_TIM_Base_MspInit>
 80187ca:	e7db      	b.n	8018784 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80187cc:	2001      	movs	r0, #1
}
 80187ce:	4770      	bx	lr

080187d0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80187d0:	4770      	bx	lr

080187d2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80187d2:	4770      	bx	lr

080187d4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80187d4:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80187d6:	b930      	cbnz	r0, 80187e6 <SSD1306_Fill+0x12>
 80187d8:	2100      	movs	r1, #0
 80187da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80187de:	4803      	ldr	r0, [pc, #12]	@ (80187ec <SSD1306_Fill+0x18>)
 80187e0:	f014 fc86 	bl	802d0f0 <memset>
}
 80187e4:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80187e6:	21ff      	movs	r1, #255	@ 0xff
 80187e8:	e7f7      	b.n	80187da <SSD1306_Fill+0x6>
 80187ea:	bf00      	nop
 80187ec:	200029c4 	.word	0x200029c4

080187f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 80187f0:	287f      	cmp	r0, #127	@ 0x7f
 80187f2:	d825      	bhi.n	8018840 <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 80187f4:	293f      	cmp	r1, #63	@ 0x3f
 80187f6:	d823      	bhi.n	8018840 <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80187f8:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80187fa:	4b12      	ldr	r3, [pc, #72]	@ (8018844 <SSD1306_DrawPixel+0x54>)
 80187fc:	791b      	ldrb	r3, [r3, #4]
 80187fe:	b113      	cbz	r3, 8018806 <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 8018800:	fab2 f282 	clz	r2, r2
 8018804:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8018806:	2a01      	cmp	r2, #1
 8018808:	d00f      	beq.n	801882a <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 801880a:	08cb      	lsrs	r3, r1, #3
 801880c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8018810:	4c0d      	ldr	r4, [pc, #52]	@ (8018848 <SSD1306_DrawPixel+0x58>)
 8018812:	5c22      	ldrb	r2, [r4, r0]
 8018814:	f001 0107 	and.w	r1, r1, #7
 8018818:	2301      	movs	r3, #1
 801881a:	408b      	lsls	r3, r1
 801881c:	43db      	mvns	r3, r3
 801881e:	b25b      	sxtb	r3, r3
 8018820:	4013      	ands	r3, r2
 8018822:	5423      	strb	r3, [r4, r0]
	}
}
 8018824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018828:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 801882a:	08cb      	lsrs	r3, r1, #3
 801882c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8018830:	4c05      	ldr	r4, [pc, #20]	@ (8018848 <SSD1306_DrawPixel+0x58>)
 8018832:	5c23      	ldrb	r3, [r4, r0]
 8018834:	f001 0107 	and.w	r1, r1, #7
 8018838:	408a      	lsls	r2, r1
 801883a:	4313      	orrs	r3, r2
 801883c:	5423      	strb	r3, [r4, r0]
 801883e:	e7f1      	b.n	8018824 <SSD1306_DrawPixel+0x34>
 8018840:	4770      	bx	lr
 8018842:	bf00      	nop
 8018844:	200029bc 	.word	0x200029bc
 8018848:	200029c4 	.word	0x200029c4

0801884c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 801884c:	4b01      	ldr	r3, [pc, #4]	@ (8018854 <SSD1306_GotoXY+0x8>)
 801884e:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8018850:	8059      	strh	r1, [r3, #2]
}
 8018852:	4770      	bx	lr
 8018854:	200029bc 	.word	0x200029bc

08018858 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8018858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801885c:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 801885e:	4b24      	ldr	r3, [pc, #144]	@ (80188f0 <SSD1306_Putc+0x98>)
 8018860:	881b      	ldrh	r3, [r3, #0]
 8018862:	780a      	ldrb	r2, [r1, #0]
 8018864:	4413      	add	r3, r2
	if (
 8018866:	2b7f      	cmp	r3, #127	@ 0x7f
 8018868:	dc3e      	bgt.n	80188e8 <SSD1306_Putc+0x90>
 801886a:	4681      	mov	r9, r0
 801886c:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 801886e:	4b20      	ldr	r3, [pc, #128]	@ (80188f0 <SSD1306_Putc+0x98>)
 8018870:	885b      	ldrh	r3, [r3, #2]
 8018872:	784a      	ldrb	r2, [r1, #1]
 8018874:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8018876:	2b3f      	cmp	r3, #63	@ 0x3f
 8018878:	dc38      	bgt.n	80188ec <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 801887a:	2600      	movs	r6, #0
 801887c:	e020      	b.n	80188c0 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 801887e:	4b1c      	ldr	r3, [pc, #112]	@ (80188f0 <SSD1306_Putc+0x98>)
 8018880:	8818      	ldrh	r0, [r3, #0]
 8018882:	8859      	ldrh	r1, [r3, #2]
 8018884:	4431      	add	r1, r6
 8018886:	4420      	add	r0, r4
 8018888:	fab8 f288 	clz	r2, r8
 801888c:	0952      	lsrs	r2, r2, #5
 801888e:	b289      	uxth	r1, r1
 8018890:	b280      	uxth	r0, r0
 8018892:	f7ff ffad 	bl	80187f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8018896:	3401      	adds	r4, #1
 8018898:	782b      	ldrb	r3, [r5, #0]
 801889a:	42a3      	cmp	r3, r4
 801889c:	d90f      	bls.n	80188be <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 801889e:	fa07 f304 	lsl.w	r3, r7, r4
 80188a2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80188a6:	d0ea      	beq.n	801887e <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80188a8:	4b11      	ldr	r3, [pc, #68]	@ (80188f0 <SSD1306_Putc+0x98>)
 80188aa:	8818      	ldrh	r0, [r3, #0]
 80188ac:	8859      	ldrh	r1, [r3, #2]
 80188ae:	4431      	add	r1, r6
 80188b0:	4420      	add	r0, r4
 80188b2:	4642      	mov	r2, r8
 80188b4:	b289      	uxth	r1, r1
 80188b6:	b280      	uxth	r0, r0
 80188b8:	f7ff ff9a 	bl	80187f0 <SSD1306_DrawPixel>
 80188bc:	e7eb      	b.n	8018896 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 80188be:	3601      	adds	r6, #1
 80188c0:	786a      	ldrb	r2, [r5, #1]
 80188c2:	42b2      	cmp	r2, r6
 80188c4:	d908      	bls.n	80188d8 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80188c6:	6869      	ldr	r1, [r5, #4]
 80188c8:	f1a9 0320 	sub.w	r3, r9, #32
 80188cc:	fb02 6303 	mla	r3, r2, r3, r6
 80188d0:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80188d4:	2400      	movs	r4, #0
 80188d6:	e7df      	b.n	8018898 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80188d8:	4a05      	ldr	r2, [pc, #20]	@ (80188f0 <SSD1306_Putc+0x98>)
 80188da:	8813      	ldrh	r3, [r2, #0]
 80188dc:	7829      	ldrb	r1, [r5, #0]
 80188de:	440b      	add	r3, r1
 80188e0:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 80188e2:	4648      	mov	r0, r9
}
 80188e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 80188e8:	2000      	movs	r0, #0
 80188ea:	e7fb      	b.n	80188e4 <SSD1306_Putc+0x8c>
 80188ec:	2000      	movs	r0, #0
 80188ee:	e7f9      	b.n	80188e4 <SSD1306_Putc+0x8c>
 80188f0:	200029bc 	.word	0x200029bc

080188f4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80188f4:	b570      	push	{r4, r5, r6, lr}
 80188f6:	4604      	mov	r4, r0
 80188f8:	460e      	mov	r6, r1
 80188fa:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 80188fc:	e000      	b.n	8018900 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 80188fe:	3401      	adds	r4, #1
	while (*str) {
 8018900:	7820      	ldrb	r0, [r4, #0]
 8018902:	b138      	cbz	r0, 8018914 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8018904:	462a      	mov	r2, r5
 8018906:	4631      	mov	r1, r6
 8018908:	f7ff ffa6 	bl	8018858 <SSD1306_Putc>
 801890c:	4603      	mov	r3, r0
 801890e:	7820      	ldrb	r0, [r4, #0]
 8018910:	4283      	cmp	r3, r0
 8018912:	d0f4      	beq.n	80188fe <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8018914:	bd70      	pop	{r4, r5, r6, pc}
	...

08018918 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8018918:	b500      	push	{lr}
 801891a:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 801891c:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8018920:	f04f 0c00 	mov.w	ip, #0
 8018924:	e009      	b.n	801893a <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 8018926:	f10c 0e01 	add.w	lr, ip, #1
 801892a:	f812 100c 	ldrb.w	r1, [r2, ip]
 801892e:	f10d 0c08 	add.w	ip, sp, #8
 8018932:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 8018936:	fa5f fc8e 	uxtb.w	ip, lr
 801893a:	459c      	cmp	ip, r3
 801893c:	d3f3      	bcc.n	8018926 <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 801893e:	3301      	adds	r3, #1
 8018940:	220a      	movs	r2, #10
 8018942:	9200      	str	r2, [sp, #0]
 8018944:	b29b      	uxth	r3, r3
 8018946:	aa02      	add	r2, sp, #8
 8018948:	4601      	mov	r1, r0
 801894a:	4803      	ldr	r0, [pc, #12]	@ (8018958 <ssd1306_I2C_WriteMulti+0x40>)
 801894c:	f7fe fc9e 	bl	801728c <HAL_I2C_Master_Transmit>
}
 8018950:	b043      	add	sp, #268	@ 0x10c
 8018952:	f85d fb04 	ldr.w	pc, [sp], #4
 8018956:	bf00      	nop
 8018958:	2000091c 	.word	0x2000091c

0801895c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 801895c:	b500      	push	{lr}
 801895e:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8018960:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8018964:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8018968:	230a      	movs	r3, #10
 801896a:	9300      	str	r3, [sp, #0]
 801896c:	2302      	movs	r3, #2
 801896e:	aa03      	add	r2, sp, #12
 8018970:	4601      	mov	r1, r0
 8018972:	4803      	ldr	r0, [pc, #12]	@ (8018980 <ssd1306_I2C_Write+0x24>)
 8018974:	f7fe fc8a 	bl	801728c <HAL_I2C_Master_Transmit>
}
 8018978:	b005      	add	sp, #20
 801897a:	f85d fb04 	ldr.w	pc, [sp], #4
 801897e:	bf00      	nop
 8018980:	2000091c 	.word	0x2000091c

08018984 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8018984:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8018986:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801898a:	2201      	movs	r2, #1
 801898c:	2178      	movs	r1, #120	@ 0x78
 801898e:	4850      	ldr	r0, [pc, #320]	@ (8018ad0 <SSD1306_Init+0x14c>)
 8018990:	f7fe fd38 	bl	8017404 <HAL_I2C_IsDeviceReady>
 8018994:	2800      	cmp	r0, #0
 8018996:	f040 8099 	bne.w	8018acc <SSD1306_Init+0x148>
	uint32_t p = 2500;
 801899a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 801899e:	e000      	b.n	80189a2 <SSD1306_Init+0x1e>
		p--;
 80189a0:	3b01      	subs	r3, #1
	while(p>0)
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d1fc      	bne.n	80189a0 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80189a6:	22ae      	movs	r2, #174	@ 0xae
 80189a8:	2100      	movs	r1, #0
 80189aa:	2078      	movs	r0, #120	@ 0x78
 80189ac:	f7ff ffd6 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80189b0:	2220      	movs	r2, #32
 80189b2:	2100      	movs	r1, #0
 80189b4:	2078      	movs	r0, #120	@ 0x78
 80189b6:	f7ff ffd1 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80189ba:	2210      	movs	r2, #16
 80189bc:	2100      	movs	r1, #0
 80189be:	2078      	movs	r0, #120	@ 0x78
 80189c0:	f7ff ffcc 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80189c4:	22b0      	movs	r2, #176	@ 0xb0
 80189c6:	2100      	movs	r1, #0
 80189c8:	2078      	movs	r0, #120	@ 0x78
 80189ca:	f7ff ffc7 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80189ce:	22c8      	movs	r2, #200	@ 0xc8
 80189d0:	2100      	movs	r1, #0
 80189d2:	2078      	movs	r0, #120	@ 0x78
 80189d4:	f7ff ffc2 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80189d8:	2200      	movs	r2, #0
 80189da:	4611      	mov	r1, r2
 80189dc:	2078      	movs	r0, #120	@ 0x78
 80189de:	f7ff ffbd 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80189e2:	2210      	movs	r2, #16
 80189e4:	2100      	movs	r1, #0
 80189e6:	2078      	movs	r0, #120	@ 0x78
 80189e8:	f7ff ffb8 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80189ec:	2240      	movs	r2, #64	@ 0x40
 80189ee:	2100      	movs	r1, #0
 80189f0:	2078      	movs	r0, #120	@ 0x78
 80189f2:	f7ff ffb3 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80189f6:	2281      	movs	r2, #129	@ 0x81
 80189f8:	2100      	movs	r1, #0
 80189fa:	2078      	movs	r0, #120	@ 0x78
 80189fc:	f7ff ffae 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8018a00:	22ff      	movs	r2, #255	@ 0xff
 8018a02:	2100      	movs	r1, #0
 8018a04:	2078      	movs	r0, #120	@ 0x78
 8018a06:	f7ff ffa9 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8018a0a:	22a1      	movs	r2, #161	@ 0xa1
 8018a0c:	2100      	movs	r1, #0
 8018a0e:	2078      	movs	r0, #120	@ 0x78
 8018a10:	f7ff ffa4 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8018a14:	22a6      	movs	r2, #166	@ 0xa6
 8018a16:	2100      	movs	r1, #0
 8018a18:	2078      	movs	r0, #120	@ 0x78
 8018a1a:	f7ff ff9f 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8018a1e:	22a8      	movs	r2, #168	@ 0xa8
 8018a20:	2100      	movs	r1, #0
 8018a22:	2078      	movs	r0, #120	@ 0x78
 8018a24:	f7ff ff9a 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8018a28:	223f      	movs	r2, #63	@ 0x3f
 8018a2a:	2100      	movs	r1, #0
 8018a2c:	2078      	movs	r0, #120	@ 0x78
 8018a2e:	f7ff ff95 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8018a32:	22a4      	movs	r2, #164	@ 0xa4
 8018a34:	2100      	movs	r1, #0
 8018a36:	2078      	movs	r0, #120	@ 0x78
 8018a38:	f7ff ff90 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8018a3c:	22d3      	movs	r2, #211	@ 0xd3
 8018a3e:	2100      	movs	r1, #0
 8018a40:	2078      	movs	r0, #120	@ 0x78
 8018a42:	f7ff ff8b 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8018a46:	2200      	movs	r2, #0
 8018a48:	4611      	mov	r1, r2
 8018a4a:	2078      	movs	r0, #120	@ 0x78
 8018a4c:	f7ff ff86 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8018a50:	22d5      	movs	r2, #213	@ 0xd5
 8018a52:	2100      	movs	r1, #0
 8018a54:	2078      	movs	r0, #120	@ 0x78
 8018a56:	f7ff ff81 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8018a5a:	22f0      	movs	r2, #240	@ 0xf0
 8018a5c:	2100      	movs	r1, #0
 8018a5e:	2078      	movs	r0, #120	@ 0x78
 8018a60:	f7ff ff7c 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8018a64:	22d9      	movs	r2, #217	@ 0xd9
 8018a66:	2100      	movs	r1, #0
 8018a68:	2078      	movs	r0, #120	@ 0x78
 8018a6a:	f7ff ff77 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8018a6e:	2222      	movs	r2, #34	@ 0x22
 8018a70:	2100      	movs	r1, #0
 8018a72:	2078      	movs	r0, #120	@ 0x78
 8018a74:	f7ff ff72 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8018a78:	22da      	movs	r2, #218	@ 0xda
 8018a7a:	2100      	movs	r1, #0
 8018a7c:	2078      	movs	r0, #120	@ 0x78
 8018a7e:	f7ff ff6d 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8018a82:	2212      	movs	r2, #18
 8018a84:	2100      	movs	r1, #0
 8018a86:	2078      	movs	r0, #120	@ 0x78
 8018a88:	f7ff ff68 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8018a8c:	22db      	movs	r2, #219	@ 0xdb
 8018a8e:	2100      	movs	r1, #0
 8018a90:	2078      	movs	r0, #120	@ 0x78
 8018a92:	f7ff ff63 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8018a96:	2220      	movs	r2, #32
 8018a98:	2100      	movs	r1, #0
 8018a9a:	2078      	movs	r0, #120	@ 0x78
 8018a9c:	f7ff ff5e 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8018aa0:	228d      	movs	r2, #141	@ 0x8d
 8018aa2:	2100      	movs	r1, #0
 8018aa4:	2078      	movs	r0, #120	@ 0x78
 8018aa6:	f7ff ff59 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8018aaa:	2214      	movs	r2, #20
 8018aac:	2100      	movs	r1, #0
 8018aae:	2078      	movs	r0, #120	@ 0x78
 8018ab0:	f7ff ff54 	bl	801895c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8018ab4:	22af      	movs	r2, #175	@ 0xaf
 8018ab6:	2100      	movs	r1, #0
 8018ab8:	2078      	movs	r0, #120	@ 0x78
 8018aba:	f7ff ff4f 	bl	801895c <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 8018abe:	4b05      	ldr	r3, [pc, #20]	@ (8018ad4 <SSD1306_Init+0x150>)
 8018ac0:	2200      	movs	r2, #0
 8018ac2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8018ac4:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8018ac6:	2001      	movs	r0, #1
 8018ac8:	7158      	strb	r0, [r3, #5]
}
 8018aca:	bd08      	pop	{r3, pc}
		return 0;
 8018acc:	2000      	movs	r0, #0
 8018ace:	e7fc      	b.n	8018aca <SSD1306_Init+0x146>
 8018ad0:	2000091c 	.word	0x2000091c
 8018ad4:	200029bc 	.word	0x200029bc

08018ad8 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8018ad8:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 8018ada:	2400      	movs	r4, #0
 8018adc:	e01a      	b.n	8018b14 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8018ade:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 8018ae2:	b2d2      	uxtb	r2, r2
 8018ae4:	2100      	movs	r1, #0
 8018ae6:	2078      	movs	r0, #120	@ 0x78
 8018ae8:	f7ff ff38 	bl	801895c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8018aec:	2200      	movs	r2, #0
 8018aee:	4611      	mov	r1, r2
 8018af0:	2078      	movs	r0, #120	@ 0x78
 8018af2:	f7ff ff33 	bl	801895c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8018af6:	2210      	movs	r2, #16
 8018af8:	2100      	movs	r1, #0
 8018afa:	2078      	movs	r0, #120	@ 0x78
 8018afc:	f7ff ff2e 	bl	801895c <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8018b00:	2380      	movs	r3, #128	@ 0x80
 8018b02:	4a06      	ldr	r2, [pc, #24]	@ (8018b1c <SSD1306_UpdateScreen+0x44>)
 8018b04:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8018b08:	2140      	movs	r1, #64	@ 0x40
 8018b0a:	2078      	movs	r0, #120	@ 0x78
 8018b0c:	f7ff ff04 	bl	8018918 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8018b10:	3401      	adds	r4, #1
 8018b12:	b2e4      	uxtb	r4, r4
 8018b14:	2c07      	cmp	r4, #7
 8018b16:	d9e2      	bls.n	8018ade <SSD1306_UpdateScreen+0x6>
}
 8018b18:	bd10      	pop	{r4, pc}
 8018b1a:	bf00      	nop
 8018b1c:	200029c4 	.word	0x200029c4

08018b20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8018b20:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8018b22:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018b26:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8018b28:	f001 fd4a 	bl	801a5c0 <xTaskGetSchedulerState>
 8018b2c:	2801      	cmp	r0, #1
 8018b2e:	d100      	bne.n	8018b32 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8018b30:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8018b32:	f002 f947 	bl	801adc4 <xPortSysTickHandler>
}
 8018b36:	e7fb      	b.n	8018b30 <SysTick_Handler+0x10>

08018b38 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018b38:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8018b3c:	b92b      	cbnz	r3, 8018b4a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8018b3e:	4b06      	ldr	r3, [pc, #24]	@ (8018b58 <osKernelInitialize+0x20>)
 8018b40:	6818      	ldr	r0, [r3, #0]
 8018b42:	b928      	cbnz	r0, 8018b50 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8018b44:	2201      	movs	r2, #1
 8018b46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8018b48:	4770      	bx	lr
    stat = osErrorISR;
 8018b4a:	f06f 0005 	mvn.w	r0, #5
 8018b4e:	4770      	bx	lr
    } else {
      stat = osError;
 8018b50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8018b54:	4770      	bx	lr
 8018b56:	bf00      	nop
 8018b58:	200036c8 	.word	0x200036c8

08018b5c <osKernelStart>:
 8018b5c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8018b60:	b973      	cbnz	r3, 8018b80 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8018b62:	4b0a      	ldr	r3, [pc, #40]	@ (8018b8c <osKernelStart+0x30>)
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	2b01      	cmp	r3, #1
 8018b68:	d10d      	bne.n	8018b86 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8018b6a:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018b6c:	2400      	movs	r4, #0
 8018b6e:	4b08      	ldr	r3, [pc, #32]	@ (8018b90 <osKernelStart+0x34>)
 8018b70:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8018b72:	4b06      	ldr	r3, [pc, #24]	@ (8018b8c <osKernelStart+0x30>)
 8018b74:	2202      	movs	r2, #2
 8018b76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018b78:	f001 fa6a 	bl	801a050 <vTaskStartScheduler>
      stat = osOK;
 8018b7c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8018b7e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8018b80:	f06f 0005 	mvn.w	r0, #5
 8018b84:	4770      	bx	lr
      stat = osError;
 8018b86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8018b8a:	4770      	bx	lr
 8018b8c:	200036c8 	.word	0x200036c8
 8018b90:	e000ed00 	.word	0xe000ed00

08018b94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8018b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b96:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018b98:	2400      	movs	r4, #0
 8018b9a:	9405      	str	r4, [sp, #20]
 8018b9c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8018ba0:	bb7c      	cbnz	r4, 8018c02 <osThreadNew+0x6e>
 8018ba2:	b370      	cbz	r0, 8018c02 <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8018ba4:	b32a      	cbz	r2, 8018bf2 <osThreadNew+0x5e>
      if (attr->name != NULL) {
 8018ba6:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8018ba8:	6993      	ldr	r3, [r2, #24]
 8018baa:	b903      	cbnz	r3, 8018bae <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8018bac:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8018bae:	1e5c      	subs	r4, r3, #1
 8018bb0:	2c37      	cmp	r4, #55	@ 0x37
 8018bb2:	d84a      	bhi.n	8018c4a <osThreadNew+0xb6>
 8018bb4:	6854      	ldr	r4, [r2, #4]
 8018bb6:	f014 0f01 	tst.w	r4, #1
 8018bba:	d148      	bne.n	8018c4e <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8018bbc:	6956      	ldr	r6, [r2, #20]
 8018bbe:	b176      	cbz	r6, 8018bde <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8018bc0:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8018bc4:	6894      	ldr	r4, [r2, #8]
 8018bc6:	b134      	cbz	r4, 8018bd6 <osThreadNew+0x42>
 8018bc8:	68d7      	ldr	r7, [r2, #12]
 8018bca:	f5b7 7fc0 	cmp.w	r7, #384	@ 0x180
 8018bce:	d302      	bcc.n	8018bd6 <osThreadNew+0x42>
 8018bd0:	6917      	ldr	r7, [r2, #16]
 8018bd2:	b107      	cbz	r7, 8018bd6 <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8018bd4:	b9c6      	cbnz	r6, 8018c08 <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8018bd6:	b12c      	cbz	r4, 8018be4 <osThreadNew+0x50>
    mem  = -1;
 8018bd8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018bdc:	e00e      	b.n	8018bfc <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8018bde:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8018be2:	e7ef      	b.n	8018bc4 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8018be4:	68d4      	ldr	r4, [r2, #12]
 8018be6:	b98c      	cbnz	r4, 8018c0c <osThreadNew+0x78>
 8018be8:	6914      	ldr	r4, [r2, #16]
 8018bea:	b194      	cbz	r4, 8018c12 <osThreadNew+0x7e>
    mem  = -1;
 8018bec:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018bf0:	e004      	b.n	8018bfc <osThreadNew+0x68>
    name = NULL;
 8018bf2:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8018bf4:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8018bf6:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8018bf8:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 8018bfc:	2c01      	cmp	r4, #1
 8018bfe:	d00a      	beq.n	8018c16 <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8018c00:	b1ac      	cbz	r4, 8018c2e <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8018c02:	9805      	ldr	r0, [sp, #20]
}
 8018c04:	b007      	add	sp, #28
 8018c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8018c08:	2401      	movs	r4, #1
 8018c0a:	e7f7      	b.n	8018bfc <osThreadNew+0x68>
    mem  = -1;
 8018c0c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018c10:	e7f4      	b.n	8018bfc <osThreadNew+0x68>
          mem = 0;
 8018c12:	2400      	movs	r4, #0
 8018c14:	e7f2      	b.n	8018bfc <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018c16:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8018c18:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018c1a:	9202      	str	r2, [sp, #8]
 8018c1c:	9401      	str	r4, [sp, #4]
 8018c1e:	9300      	str	r3, [sp, #0]
 8018c20:	460b      	mov	r3, r1
 8018c22:	4662      	mov	r2, ip
 8018c24:	4629      	mov	r1, r5
 8018c26:	f001 f9a3 	bl	8019f70 <xTaskCreateStatic>
 8018c2a:	9005      	str	r0, [sp, #20]
 8018c2c:	e7e9      	b.n	8018c02 <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8018c2e:	aa05      	add	r2, sp, #20
 8018c30:	9201      	str	r2, [sp, #4]
 8018c32:	9300      	str	r3, [sp, #0]
 8018c34:	460b      	mov	r3, r1
 8018c36:	fa1f f28c 	uxth.w	r2, ip
 8018c3a:	4629      	mov	r1, r5
 8018c3c:	f001 f9d5 	bl	8019fea <xTaskCreate>
 8018c40:	2801      	cmp	r0, #1
 8018c42:	d0de      	beq.n	8018c02 <osThreadNew+0x6e>
            hTask = NULL;
 8018c44:	2300      	movs	r3, #0
 8018c46:	9305      	str	r3, [sp, #20]
 8018c48:	e7db      	b.n	8018c02 <osThreadNew+0x6e>
        return (NULL);
 8018c4a:	2000      	movs	r0, #0
 8018c4c:	e7da      	b.n	8018c04 <osThreadNew+0x70>
 8018c4e:	2000      	movs	r0, #0
 8018c50:	e7d8      	b.n	8018c04 <osThreadNew+0x70>

08018c52 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8018c52:	b508      	push	{r3, lr}
 8018c54:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8018c58:	b933      	cbnz	r3, 8018c68 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8018c5a:	b908      	cbnz	r0, 8018c60 <osDelay+0xe>
    stat = osOK;
 8018c5c:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8018c5e:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8018c60:	f001 fb62 	bl	801a328 <vTaskDelay>
    stat = osOK;
 8018c64:	2000      	movs	r0, #0
 8018c66:	e7fa      	b.n	8018c5e <osDelay+0xc>
    stat = osErrorISR;
 8018c68:	f06f 0005 	mvn.w	r0, #5
 8018c6c:	e7f7      	b.n	8018c5e <osDelay+0xc>

08018c6e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8018c6e:	b570      	push	{r4, r5, r6, lr}
 8018c70:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d13c      	bne.n	8018cf2 <osMutexNew+0x84>
 8018c78:	4604      	mov	r4, r0
    if (attr != NULL) {
 8018c7a:	b100      	cbz	r0, 8018c7e <osMutexNew+0x10>
      type = attr->attr_bits;
 8018c7c:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8018c7e:	f013 0601 	ands.w	r6, r3, #1
 8018c82:	d000      	beq.n	8018c86 <osMutexNew+0x18>
      rmtx = 1U;
 8018c84:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8018c86:	f013 0f08 	tst.w	r3, #8
 8018c8a:	d135      	bne.n	8018cf8 <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 8018c8c:	b344      	cbz	r4, 8018ce0 <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8018c8e:	68a1      	ldr	r1, [r4, #8]
 8018c90:	b111      	cbz	r1, 8018c98 <osMutexNew+0x2a>
 8018c92:	68e3      	ldr	r3, [r4, #12]
 8018c94:	2b4f      	cmp	r3, #79	@ 0x4f
 8018c96:	d818      	bhi.n	8018cca <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018c98:	b191      	cbz	r1, 8018cc0 <osMutexNew+0x52>
      mem = -1;
 8018c9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8018c9e:	bb6b      	cbnz	r3, 8018cfc <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8018ca0:	b316      	cbz	r6, 8018ce8 <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8018ca2:	2004      	movs	r0, #4
 8018ca4:	f000 fc04 	bl	80194b0 <xQueueCreateMutex>
 8018ca8:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8018caa:	b31d      	cbz	r5, 8018cf4 <osMutexNew+0x86>
        if (attr != NULL) {
 8018cac:	b104      	cbz	r4, 8018cb0 <osMutexNew+0x42>
          name = attr->name;
 8018cae:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8018cb0:	4621      	mov	r1, r4
 8018cb2:	4628      	mov	r0, r5
 8018cb4:	f000 ff64 	bl	8019b80 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8018cb8:	b1e6      	cbz	r6, 8018cf4 <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8018cba:	f045 0501 	orr.w	r5, r5, #1
 8018cbe:	e019      	b.n	8018cf4 <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018cc0:	68e3      	ldr	r3, [r4, #12]
 8018cc2:	b17b      	cbz	r3, 8018ce4 <osMutexNew+0x76>
      mem = -1;
 8018cc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018cc8:	e7e9      	b.n	8018c9e <osMutexNew+0x30>
          if (rmtx != 0U) {
 8018cca:	b126      	cbz	r6, 8018cd6 <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8018ccc:	2004      	movs	r0, #4
 8018cce:	f000 fbfa 	bl	80194c6 <xQueueCreateMutexStatic>
 8018cd2:	4605      	mov	r5, r0
 8018cd4:	e7e9      	b.n	8018caa <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8018cd6:	2001      	movs	r0, #1
 8018cd8:	f000 fbf5 	bl	80194c6 <xQueueCreateMutexStatic>
 8018cdc:	4605      	mov	r5, r0
 8018cde:	e7e4      	b.n	8018caa <osMutexNew+0x3c>
        mem = 0;
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	e7dc      	b.n	8018c9e <osMutexNew+0x30>
            mem = 0;
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	e7da      	b.n	8018c9e <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8018ce8:	2001      	movs	r0, #1
 8018cea:	f000 fbe1 	bl	80194b0 <xQueueCreateMutex>
 8018cee:	4605      	mov	r5, r0
 8018cf0:	e7db      	b.n	8018caa <osMutexNew+0x3c>
  hMutex = NULL;
 8018cf2:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8018cf4:	4628      	mov	r0, r5
 8018cf6:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8018cf8:	2500      	movs	r5, #0
 8018cfa:	e7fb      	b.n	8018cf4 <osMutexNew+0x86>
 8018cfc:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8018cfe:	e7f9      	b.n	8018cf4 <osMutexNew+0x86>

08018d00 <osMutexAcquire>:
 8018d00:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8018d04:	b9da      	cbnz	r2, 8018d3e <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8018d06:	b510      	push	{r4, lr}
 8018d08:	4603      	mov	r3, r0
 8018d0a:	460c      	mov	r4, r1
 8018d0c:	f020 0001 	bic.w	r0, r0, #1
 8018d10:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8018d14:	2b01      	cmp	r3, #1
 8018d16:	d915      	bls.n	8018d44 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8018d18:	b141      	cbz	r1, 8018d2c <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8018d1a:	4621      	mov	r1, r4
 8018d1c:	f000 fdeb 	bl	80198f6 <xQueueTakeMutexRecursive>
 8018d20:	2801      	cmp	r0, #1
 8018d22:	d012      	beq.n	8018d4a <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8018d24:	b19c      	cbz	r4, 8018d4e <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8018d26:	f06f 0001 	mvn.w	r0, #1
 8018d2a:	e00f      	b.n	8018d4c <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8018d2c:	4621      	mov	r1, r4
 8018d2e:	f000 fd0f 	bl	8019750 <xQueueSemaphoreTake>
 8018d32:	2801      	cmp	r0, #1
 8018d34:	d00e      	beq.n	8018d54 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8018d36:	b17c      	cbz	r4, 8018d58 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8018d38:	f06f 0001 	mvn.w	r0, #1
 8018d3c:	e006      	b.n	8018d4c <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8018d3e:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8018d42:	4770      	bx	lr
    stat = osErrorParameter;
 8018d44:	f06f 0003 	mvn.w	r0, #3
 8018d48:	e000      	b.n	8018d4c <osMutexAcquire+0x4c>
  stat = osOK;
 8018d4a:	2000      	movs	r0, #0
}
 8018d4c:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8018d4e:	f06f 0002 	mvn.w	r0, #2
 8018d52:	e7fb      	b.n	8018d4c <osMutexAcquire+0x4c>
  stat = osOK;
 8018d54:	2000      	movs	r0, #0
 8018d56:	e7f9      	b.n	8018d4c <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8018d58:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018d5c:	e7f6      	b.n	8018d4c <osMutexAcquire+0x4c>

08018d5e <osMutexRelease>:
 8018d5e:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8018d62:	b9ba      	cbnz	r2, 8018d94 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8018d64:	b508      	push	{r3, lr}
 8018d66:	4603      	mov	r3, r0
 8018d68:	f020 0001 	bic.w	r0, r0, #1
 8018d6c:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8018d70:	2b01      	cmp	r3, #1
 8018d72:	d912      	bls.n	8018d9a <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8018d74:	b129      	cbz	r1, 8018d82 <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8018d76:	f000 fbb5 	bl	80194e4 <xQueueGiveMutexRecursive>
 8018d7a:	2801      	cmp	r0, #1
 8018d7c:	d110      	bne.n	8018da0 <osMutexRelease+0x42>
  stat = osOK;
 8018d7e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018d80:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8018d82:	2300      	movs	r3, #0
 8018d84:	461a      	mov	r2, r3
 8018d86:	4619      	mov	r1, r3
 8018d88:	f000 fac2 	bl	8019310 <xQueueGenericSend>
 8018d8c:	2801      	cmp	r0, #1
 8018d8e:	d10a      	bne.n	8018da6 <osMutexRelease+0x48>
  stat = osOK;
 8018d90:	2000      	movs	r0, #0
 8018d92:	e7f5      	b.n	8018d80 <osMutexRelease+0x22>
    stat = osErrorISR;
 8018d94:	f06f 0005 	mvn.w	r0, #5
}
 8018d98:	4770      	bx	lr
    stat = osErrorParameter;
 8018d9a:	f06f 0003 	mvn.w	r0, #3
 8018d9e:	e7ef      	b.n	8018d80 <osMutexRelease+0x22>
        stat = osErrorResource;
 8018da0:	f06f 0002 	mvn.w	r0, #2
 8018da4:	e7ec      	b.n	8018d80 <osMutexRelease+0x22>
        stat = osErrorResource;
 8018da6:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018daa:	e7e9      	b.n	8018d80 <osMutexRelease+0x22>

08018dac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8018dac:	b570      	push	{r4, r5, r6, lr}
 8018dae:	b082      	sub	sp, #8
 8018db0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d13a      	bne.n	8018e2e <osMessageQueueNew+0x82>
 8018db8:	4614      	mov	r4, r2
 8018dba:	2800      	cmp	r0, #0
 8018dbc:	d03b      	beq.n	8018e36 <osMessageQueueNew+0x8a>
 8018dbe:	2900      	cmp	r1, #0
 8018dc0:	d03b      	beq.n	8018e3a <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 8018dc2:	b36a      	cbz	r2, 8018e20 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8018dc4:	6893      	ldr	r3, [r2, #8]
 8018dc6:	b14b      	cbz	r3, 8018ddc <osMessageQueueNew+0x30>
 8018dc8:	68d2      	ldr	r2, [r2, #12]
 8018dca:	2a4f      	cmp	r2, #79	@ 0x4f
 8018dcc:	d906      	bls.n	8018ddc <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8018dce:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8018dd0:	b122      	cbz	r2, 8018ddc <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8018dd2:	fb01 f500 	mul.w	r5, r1, r0
 8018dd6:	6966      	ldr	r6, [r4, #20]
 8018dd8:	42ae      	cmp	r6, r5
 8018dda:	d21b      	bcs.n	8018e14 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018ddc:	b173      	cbz	r3, 8018dfc <osMessageQueueNew+0x50>
    mem = -1;
 8018dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8018de2:	bb63      	cbnz	r3, 8018e3e <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8018de4:	2200      	movs	r2, #0
 8018de6:	f000 fa6f 	bl	80192c8 <xQueueGenericCreate>
 8018dea:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8018dec:	b305      	cbz	r5, 8018e30 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8018dee:	b104      	cbz	r4, 8018df2 <osMessageQueueNew+0x46>
        name = attr->name;
 8018df0:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8018df2:	4621      	mov	r1, r4
 8018df4:	4628      	mov	r0, r5
 8018df6:	f000 fec3 	bl	8019b80 <vQueueAddToRegistry>
 8018dfa:	e019      	b.n	8018e30 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018dfc:	68e3      	ldr	r3, [r4, #12]
 8018dfe:	b98b      	cbnz	r3, 8018e24 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018e00:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018e02:	b113      	cbz	r3, 8018e0a <osMessageQueueNew+0x5e>
    mem = -1;
 8018e04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018e08:	e7eb      	b.n	8018de2 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018e0a:	6963      	ldr	r3, [r4, #20]
 8018e0c:	b16b      	cbz	r3, 8018e2a <osMessageQueueNew+0x7e>
    mem = -1;
 8018e0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018e12:	e7e6      	b.n	8018de2 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8018e14:	2500      	movs	r5, #0
 8018e16:	9500      	str	r5, [sp, #0]
 8018e18:	f000 fa0c 	bl	8019234 <xQueueGenericCreateStatic>
 8018e1c:	4605      	mov	r5, r0
 8018e1e:	e7e5      	b.n	8018dec <osMessageQueueNew+0x40>
      mem = 0;
 8018e20:	2300      	movs	r3, #0
 8018e22:	e7de      	b.n	8018de2 <osMessageQueueNew+0x36>
    mem = -1;
 8018e24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018e28:	e7db      	b.n	8018de2 <osMessageQueueNew+0x36>
          mem = 0;
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	e7d9      	b.n	8018de2 <osMessageQueueNew+0x36>
  hQueue = NULL;
 8018e2e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8018e30:	4628      	mov	r0, r5
 8018e32:	b002      	add	sp, #8
 8018e34:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8018e36:	2500      	movs	r5, #0
 8018e38:	e7fa      	b.n	8018e30 <osMessageQueueNew+0x84>
 8018e3a:	2500      	movs	r5, #0
 8018e3c:	e7f8      	b.n	8018e30 <osMessageQueueNew+0x84>
 8018e3e:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8018e40:	e7f6      	b.n	8018e30 <osMessageQueueNew+0x84>

08018e42 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8018e42:	b510      	push	{r4, lr}
 8018e44:	b082      	sub	sp, #8
 8018e46:	461c      	mov	r4, r3
 8018e48:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8018e4c:	b1c3      	cbz	r3, 8018e80 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018e4e:	b318      	cbz	r0, 8018e98 <osMessageQueuePut+0x56>
 8018e50:	b329      	cbz	r1, 8018e9e <osMessageQueuePut+0x5c>
 8018e52:	bb3c      	cbnz	r4, 8018ea4 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8018e54:	2300      	movs	r3, #0
 8018e56:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8018e58:	aa01      	add	r2, sp, #4
 8018e5a:	f000 fb63 	bl	8019524 <xQueueGenericSendFromISR>
 8018e5e:	2801      	cmp	r0, #1
 8018e60:	d123      	bne.n	8018eaa <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8018e62:	9801      	ldr	r0, [sp, #4]
 8018e64:	b150      	cbz	r0, 8018e7c <osMessageQueuePut+0x3a>
 8018e66:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018e6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018e72:	f3bf 8f4f 	dsb	sy
 8018e76:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8018e7a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018e7c:	b002      	add	sp, #8
 8018e7e:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018e80:	b1b0      	cbz	r0, 8018eb0 <osMessageQueuePut+0x6e>
 8018e82:	b1c1      	cbz	r1, 8018eb6 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018e84:	2300      	movs	r3, #0
 8018e86:	4622      	mov	r2, r4
 8018e88:	f000 fa42 	bl	8019310 <xQueueGenericSend>
 8018e8c:	2801      	cmp	r0, #1
 8018e8e:	d015      	beq.n	8018ebc <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8018e90:	b1b4      	cbz	r4, 8018ec0 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8018e92:	f06f 0001 	mvn.w	r0, #1
 8018e96:	e7f1      	b.n	8018e7c <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8018e98:	f06f 0003 	mvn.w	r0, #3
 8018e9c:	e7ee      	b.n	8018e7c <osMessageQueuePut+0x3a>
 8018e9e:	f06f 0003 	mvn.w	r0, #3
 8018ea2:	e7eb      	b.n	8018e7c <osMessageQueuePut+0x3a>
 8018ea4:	f06f 0003 	mvn.w	r0, #3
 8018ea8:	e7e8      	b.n	8018e7c <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8018eaa:	f06f 0002 	mvn.w	r0, #2
 8018eae:	e7e5      	b.n	8018e7c <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8018eb0:	f06f 0003 	mvn.w	r0, #3
 8018eb4:	e7e2      	b.n	8018e7c <osMessageQueuePut+0x3a>
 8018eb6:	f06f 0003 	mvn.w	r0, #3
 8018eba:	e7df      	b.n	8018e7c <osMessageQueuePut+0x3a>
  stat = osOK;
 8018ebc:	2000      	movs	r0, #0
 8018ebe:	e7dd      	b.n	8018e7c <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 8018ec0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018ec4:	e7da      	b.n	8018e7c <osMessageQueuePut+0x3a>

08018ec6 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8018ec6:	b510      	push	{r4, lr}
 8018ec8:	b082      	sub	sp, #8
 8018eca:	461c      	mov	r4, r3
 8018ecc:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8018ed0:	b1c3      	cbz	r3, 8018f04 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018ed2:	b310      	cbz	r0, 8018f1a <osMessageQueueGet+0x54>
 8018ed4:	b321      	cbz	r1, 8018f20 <osMessageQueueGet+0x5a>
 8018ed6:	bb34      	cbnz	r4, 8018f26 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8018ed8:	2300      	movs	r3, #0
 8018eda:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8018edc:	aa01      	add	r2, sp, #4
 8018ede:	f000 fdd9 	bl	8019a94 <xQueueReceiveFromISR>
 8018ee2:	2801      	cmp	r0, #1
 8018ee4:	d122      	bne.n	8018f2c <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8018ee6:	9801      	ldr	r0, [sp, #4]
 8018ee8:	b150      	cbz	r0, 8018f00 <osMessageQueueGet+0x3a>
 8018eea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018ef2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018ef6:	f3bf 8f4f 	dsb	sy
 8018efa:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8018efe:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018f00:	b002      	add	sp, #8
 8018f02:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018f04:	b1a8      	cbz	r0, 8018f32 <osMessageQueueGet+0x6c>
 8018f06:	b1b9      	cbz	r1, 8018f38 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018f08:	4622      	mov	r2, r4
 8018f0a:	f000 fb72 	bl	80195f2 <xQueueReceive>
 8018f0e:	2801      	cmp	r0, #1
 8018f10:	d015      	beq.n	8018f3e <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8018f12:	b1b4      	cbz	r4, 8018f42 <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8018f14:	f06f 0001 	mvn.w	r0, #1
 8018f18:	e7f2      	b.n	8018f00 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8018f1a:	f06f 0003 	mvn.w	r0, #3
 8018f1e:	e7ef      	b.n	8018f00 <osMessageQueueGet+0x3a>
 8018f20:	f06f 0003 	mvn.w	r0, #3
 8018f24:	e7ec      	b.n	8018f00 <osMessageQueueGet+0x3a>
 8018f26:	f06f 0003 	mvn.w	r0, #3
 8018f2a:	e7e9      	b.n	8018f00 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8018f2c:	f06f 0002 	mvn.w	r0, #2
 8018f30:	e7e6      	b.n	8018f00 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8018f32:	f06f 0003 	mvn.w	r0, #3
 8018f36:	e7e3      	b.n	8018f00 <osMessageQueueGet+0x3a>
 8018f38:	f06f 0003 	mvn.w	r0, #3
 8018f3c:	e7e0      	b.n	8018f00 <osMessageQueueGet+0x3a>
  stat = osOK;
 8018f3e:	2000      	movs	r0, #0
 8018f40:	e7de      	b.n	8018f00 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8018f42:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018f46:	e7db      	b.n	8018f00 <osMessageQueueGet+0x3a>

08018f48 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8018f48:	b148      	cbz	r0, 8018f5e <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8018f4a:	b508      	push	{r3, lr}
 8018f4c:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8018f50:	b112      	cbz	r2, 8018f58 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8018f52:	f000 fe09 	bl	8019b68 <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8018f56:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8018f58:	f000 fdf3 	bl	8019b42 <uxQueueMessagesWaiting>
 8018f5c:	e7fb      	b.n	8018f56 <osMessageQueueGetCount+0xe>
    count = 0U;
 8018f5e:	2000      	movs	r0, #0
}
 8018f60:	4770      	bx	lr

08018f62 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8018f62:	b508      	push	{r3, lr}
 8018f64:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8018f68:	b92b      	cbnz	r3, 8018f76 <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8018f6a:	b138      	cbz	r0, 8018f7c <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8018f6c:	2100      	movs	r1, #0
 8018f6e:	f000 f90e 	bl	801918e <xQueueGenericReset>
    stat = osOK;
 8018f72:	2000      	movs	r0, #0
  }

  return (stat);
}
 8018f74:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8018f76:	f06f 0005 	mvn.w	r0, #5
 8018f7a:	e7fb      	b.n	8018f74 <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 8018f7c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8018f80:	e7f8      	b.n	8018f74 <osMessageQueueReset+0x12>
	...

08018f84 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018f84:	4b03      	ldr	r3, [pc, #12]	@ (8018f94 <vApplicationGetIdleTaskMemory+0x10>)
 8018f86:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8018f88:	4b03      	ldr	r3, [pc, #12]	@ (8018f98 <vApplicationGetIdleTaskMemory+0x14>)
 8018f8a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018f8c:	2380      	movs	r3, #128	@ 0x80
 8018f8e:	6013      	str	r3, [r2, #0]
}
 8018f90:	4770      	bx	lr
 8018f92:	bf00      	nop
 8018f94:	20003548 	.word	0x20003548
 8018f98:	20003348 	.word	0x20003348

08018f9c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8018f9c:	4b03      	ldr	r3, [pc, #12]	@ (8018fac <vApplicationGetTimerTaskMemory+0x10>)
 8018f9e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8018fa0:	4b03      	ldr	r3, [pc, #12]	@ (8018fb0 <vApplicationGetTimerTaskMemory+0x14>)
 8018fa2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8018fa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018fa8:	6013      	str	r3, [r2, #0]
}
 8018faa:	4770      	bx	lr
 8018fac:	200031c8 	.word	0x200031c8
 8018fb0:	20002dc4 	.word	0x20002dc4

08018fb4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018fb4:	f100 0308 	add.w	r3, r0, #8
 8018fb8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018fba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018fbe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018fc0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018fc2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018fc8:	4770      	bx	lr

08018fca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018fca:	2300      	movs	r3, #0
 8018fcc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018fce:	4770      	bx	lr

08018fd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8018fd0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018fd2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018fd4:	689a      	ldr	r2, [r3, #8]
 8018fd6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018fd8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018fda:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018fdc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8018fde:	6803      	ldr	r3, [r0, #0]
 8018fe0:	3301      	adds	r3, #1
 8018fe2:	6003      	str	r3, [r0, #0]
}
 8018fe4:	4770      	bx	lr

08018fe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018fe6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018fe8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018fea:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018fee:	d011      	beq.n	8019014 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018ff0:	f100 0308 	add.w	r3, r0, #8
 8018ff4:	461c      	mov	r4, r3
 8018ff6:	685b      	ldr	r3, [r3, #4]
 8018ff8:	681a      	ldr	r2, [r3, #0]
 8018ffa:	42aa      	cmp	r2, r5
 8018ffc:	d9fa      	bls.n	8018ff4 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018ffe:	6863      	ldr	r3, [r4, #4]
 8019000:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019002:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019004:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8019006:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019008:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 801900a:	6803      	ldr	r3, [r0, #0]
 801900c:	3301      	adds	r3, #1
 801900e:	6003      	str	r3, [r0, #0]
}
 8019010:	bc30      	pop	{r4, r5}
 8019012:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8019014:	6904      	ldr	r4, [r0, #16]
 8019016:	e7f2      	b.n	8018ffe <vListInsert+0x18>

08019018 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019018:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801901a:	6841      	ldr	r1, [r0, #4]
 801901c:	6882      	ldr	r2, [r0, #8]
 801901e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019020:	6841      	ldr	r1, [r0, #4]
 8019022:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019024:	685a      	ldr	r2, [r3, #4]
 8019026:	4282      	cmp	r2, r0
 8019028:	d006      	beq.n	8019038 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801902a:	2200      	movs	r2, #0
 801902c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801902e:	681a      	ldr	r2, [r3, #0]
 8019030:	3a01      	subs	r2, #1
 8019032:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019034:	6818      	ldr	r0, [r3, #0]
}
 8019036:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019038:	6882      	ldr	r2, [r0, #8]
 801903a:	605a      	str	r2, [r3, #4]
 801903c:	e7f5      	b.n	801902a <uxListRemove+0x12>

0801903e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801903e:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019040:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8019042:	b118      	cbz	r0, 801904c <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8019044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019046:	6818      	ldr	r0, [r3, #0]
 8019048:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 801904c:	4770      	bx	lr

0801904e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801904e:	b510      	push	{r4, lr}
 8019050:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019052:	f001 fe47 	bl	801ace4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019056:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8019058:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801905a:	429a      	cmp	r2, r3
 801905c:	d004      	beq.n	8019068 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 801905e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8019060:	f001 fe62 	bl	801ad28 <vPortExitCritical>

	return xReturn;
}
 8019064:	4620      	mov	r0, r4
 8019066:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8019068:	2401      	movs	r4, #1
 801906a:	e7f9      	b.n	8019060 <prvIsQueueFull+0x12>

0801906c <prvIsQueueEmpty>:
{
 801906c:	b510      	push	{r4, lr}
 801906e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019070:	f001 fe38 	bl	801ace4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019074:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8019076:	b923      	cbnz	r3, 8019082 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8019078:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 801907a:	f001 fe55 	bl	801ad28 <vPortExitCritical>
}
 801907e:	4620      	mov	r0, r4
 8019080:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8019082:	2400      	movs	r4, #0
 8019084:	e7f9      	b.n	801907a <prvIsQueueEmpty+0xe>

08019086 <prvCopyDataToQueue>:
{
 8019086:	b570      	push	{r4, r5, r6, lr}
 8019088:	4604      	mov	r4, r0
 801908a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801908c:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801908e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8019090:	b95a      	cbnz	r2, 80190aa <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019092:	6803      	ldr	r3, [r0, #0]
 8019094:	b11b      	cbz	r3, 801909e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8019096:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019098:	3601      	adds	r6, #1
 801909a:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 801909c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801909e:	6880      	ldr	r0, [r0, #8]
 80190a0:	f001 faea 	bl	801a678 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80190a4:	2300      	movs	r3, #0
 80190a6:	60a3      	str	r3, [r4, #8]
 80190a8:	e7f6      	b.n	8019098 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80190aa:	b96d      	cbnz	r5, 80190c8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80190ac:	6840      	ldr	r0, [r0, #4]
 80190ae:	f015 fa5b 	bl	802e568 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80190b2:	6863      	ldr	r3, [r4, #4]
 80190b4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80190b6:	4413      	add	r3, r2
 80190b8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80190ba:	68a2      	ldr	r2, [r4, #8]
 80190bc:	4293      	cmp	r3, r2
 80190be:	d319      	bcc.n	80190f4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80190c0:	6823      	ldr	r3, [r4, #0]
 80190c2:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80190c4:	4628      	mov	r0, r5
 80190c6:	e7e7      	b.n	8019098 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80190c8:	68c0      	ldr	r0, [r0, #12]
 80190ca:	f015 fa4d 	bl	802e568 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80190ce:	68e3      	ldr	r3, [r4, #12]
 80190d0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80190d2:	4251      	negs	r1, r2
 80190d4:	1a9b      	subs	r3, r3, r2
 80190d6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80190d8:	6822      	ldr	r2, [r4, #0]
 80190da:	4293      	cmp	r3, r2
 80190dc:	d202      	bcs.n	80190e4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80190de:	68a3      	ldr	r3, [r4, #8]
 80190e0:	440b      	add	r3, r1
 80190e2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80190e4:	2d02      	cmp	r5, #2
 80190e6:	d001      	beq.n	80190ec <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80190e8:	2000      	movs	r0, #0
 80190ea:	e7d5      	b.n	8019098 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80190ec:	b126      	cbz	r6, 80190f8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80190ee:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80190f0:	2000      	movs	r0, #0
 80190f2:	e7d1      	b.n	8019098 <prvCopyDataToQueue+0x12>
 80190f4:	4628      	mov	r0, r5
 80190f6:	e7cf      	b.n	8019098 <prvCopyDataToQueue+0x12>
 80190f8:	2000      	movs	r0, #0
 80190fa:	e7cd      	b.n	8019098 <prvCopyDataToQueue+0x12>

080190fc <prvCopyDataFromQueue>:
{
 80190fc:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80190fe:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8019100:	b16a      	cbz	r2, 801911e <prvCopyDataFromQueue+0x22>
{
 8019102:	b510      	push	{r4, lr}
 8019104:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019106:	68d9      	ldr	r1, [r3, #12]
 8019108:	4411      	add	r1, r2
 801910a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801910c:	689c      	ldr	r4, [r3, #8]
 801910e:	42a1      	cmp	r1, r4
 8019110:	d301      	bcc.n	8019116 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019112:	6819      	ldr	r1, [r3, #0]
 8019114:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019116:	68d9      	ldr	r1, [r3, #12]
 8019118:	f015 fa26 	bl	802e568 <memcpy>
}
 801911c:	bd10      	pop	{r4, pc}
 801911e:	4770      	bx	lr

08019120 <prvUnlockQueue>:
{
 8019120:	b538      	push	{r3, r4, r5, lr}
 8019122:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8019124:	f001 fdde 	bl	801ace4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8019128:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 801912c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801912e:	e001      	b.n	8019134 <prvUnlockQueue+0x14>
			--cTxLock;
 8019130:	3c01      	subs	r4, #1
 8019132:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019134:	2c00      	cmp	r4, #0
 8019136:	dd0a      	ble.n	801914e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019138:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801913a:	b143      	cbz	r3, 801914e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801913c:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8019140:	f001 f99e 	bl	801a480 <xTaskRemoveFromEventList>
 8019144:	2800      	cmp	r0, #0
 8019146:	d0f3      	beq.n	8019130 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8019148:	f001 fa2e 	bl	801a5a8 <vTaskMissedYield>
 801914c:	e7f0      	b.n	8019130 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 801914e:	23ff      	movs	r3, #255	@ 0xff
 8019150:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8019154:	f001 fde8 	bl	801ad28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8019158:	f001 fdc4 	bl	801ace4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801915c:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8019160:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019162:	e001      	b.n	8019168 <prvUnlockQueue+0x48>
				--cRxLock;
 8019164:	3c01      	subs	r4, #1
 8019166:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019168:	2c00      	cmp	r4, #0
 801916a:	dd0a      	ble.n	8019182 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801916c:	692b      	ldr	r3, [r5, #16]
 801916e:	b143      	cbz	r3, 8019182 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019170:	f105 0010 	add.w	r0, r5, #16
 8019174:	f001 f984 	bl	801a480 <xTaskRemoveFromEventList>
 8019178:	2800      	cmp	r0, #0
 801917a:	d0f3      	beq.n	8019164 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 801917c:	f001 fa14 	bl	801a5a8 <vTaskMissedYield>
 8019180:	e7f0      	b.n	8019164 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8019182:	23ff      	movs	r3, #255	@ 0xff
 8019184:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8019188:	f001 fdce 	bl	801ad28 <vPortExitCritical>
}
 801918c:	bd38      	pop	{r3, r4, r5, pc}

0801918e <xQueueGenericReset>:
{
 801918e:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8019190:	b1e0      	cbz	r0, 80191cc <xQueueGenericReset+0x3e>
 8019192:	460d      	mov	r5, r1
 8019194:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019196:	f001 fda5 	bl	801ace4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801919a:	6823      	ldr	r3, [r4, #0]
 801919c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801919e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80191a0:	fb01 3002 	mla	r0, r1, r2, r3
 80191a4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80191a6:	2000      	movs	r0, #0
 80191a8:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80191aa:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80191ac:	3a01      	subs	r2, #1
 80191ae:	fb02 3301 	mla	r3, r2, r1, r3
 80191b2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80191b4:	23ff      	movs	r3, #255	@ 0xff
 80191b6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80191ba:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80191be:	b9fd      	cbnz	r5, 8019200 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80191c0:	6923      	ldr	r3, [r4, #16]
 80191c2:	b963      	cbnz	r3, 80191de <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80191c4:	f001 fdb0 	bl	801ad28 <vPortExitCritical>
}
 80191c8:	2001      	movs	r0, #1
 80191ca:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80191cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191d0:	f383 8811 	msr	BASEPRI, r3
 80191d4:	f3bf 8f6f 	isb	sy
 80191d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80191dc:	e7fe      	b.n	80191dc <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80191de:	f104 0010 	add.w	r0, r4, #16
 80191e2:	f001 f94d 	bl	801a480 <xTaskRemoveFromEventList>
 80191e6:	2800      	cmp	r0, #0
 80191e8:	d0ec      	beq.n	80191c4 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80191ea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80191ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80191f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80191f6:	f3bf 8f4f 	dsb	sy
 80191fa:	f3bf 8f6f 	isb	sy
 80191fe:	e7e1      	b.n	80191c4 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019200:	f104 0010 	add.w	r0, r4, #16
 8019204:	f7ff fed6 	bl	8018fb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019208:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801920c:	f7ff fed2 	bl	8018fb4 <vListInitialise>
 8019210:	e7d8      	b.n	80191c4 <xQueueGenericReset+0x36>

08019212 <prvInitialiseNewQueue>:
{
 8019212:	b538      	push	{r3, r4, r5, lr}
 8019214:	461d      	mov	r5, r3
 8019216:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8019218:	460b      	mov	r3, r1
 801921a:	b949      	cbnz	r1, 8019230 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801921c:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 801921e:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019220:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019222:	2101      	movs	r1, #1
 8019224:	4620      	mov	r0, r4
 8019226:	f7ff ffb2 	bl	801918e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 801922a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 801922e:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019230:	6022      	str	r2, [r4, #0]
 8019232:	e7f4      	b.n	801921e <prvInitialiseNewQueue+0xc>

08019234 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019234:	b940      	cbnz	r0, 8019248 <xQueueGenericCreateStatic+0x14>
 8019236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801923a:	f383 8811 	msr	BASEPRI, r3
 801923e:	f3bf 8f6f 	isb	sy
 8019242:	f3bf 8f4f 	dsb	sy
 8019246:	e7fe      	b.n	8019246 <xQueueGenericCreateStatic+0x12>
	{
 8019248:	b510      	push	{r4, lr}
 801924a:	b084      	sub	sp, #16
 801924c:	461c      	mov	r4, r3
 801924e:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8019250:	b153      	cbz	r3, 8019268 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8019252:	b192      	cbz	r2, 801927a <xQueueGenericCreateStatic+0x46>
 8019254:	b989      	cbnz	r1, 801927a <xQueueGenericCreateStatic+0x46>
 8019256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801925a:	f383 8811 	msr	BASEPRI, r3
 801925e:	f3bf 8f6f 	isb	sy
 8019262:	f3bf 8f4f 	dsb	sy
 8019266:	e7fe      	b.n	8019266 <xQueueGenericCreateStatic+0x32>
 8019268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801926c:	f383 8811 	msr	BASEPRI, r3
 8019270:	f3bf 8f6f 	isb	sy
 8019274:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8019278:	e7fe      	b.n	8019278 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801927a:	b16a      	cbz	r2, 8019298 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 801927c:	2350      	movs	r3, #80	@ 0x50
 801927e:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019280:	9b03      	ldr	r3, [sp, #12]
 8019282:	2b50      	cmp	r3, #80	@ 0x50
 8019284:	d013      	beq.n	80192ae <xQueueGenericCreateStatic+0x7a>
 8019286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801928a:	f383 8811 	msr	BASEPRI, r3
 801928e:	f3bf 8f6f 	isb	sy
 8019292:	f3bf 8f4f 	dsb	sy
 8019296:	e7fe      	b.n	8019296 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019298:	2900      	cmp	r1, #0
 801929a:	d0ef      	beq.n	801927c <xQueueGenericCreateStatic+0x48>
 801929c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192a0:	f383 8811 	msr	BASEPRI, r3
 80192a4:	f3bf 8f6f 	isb	sy
 80192a8:	f3bf 8f4f 	dsb	sy
 80192ac:	e7fe      	b.n	80192ac <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80192ae:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80192b0:	2301      	movs	r3, #1
 80192b2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80192b6:	9400      	str	r4, [sp, #0]
 80192b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80192bc:	4660      	mov	r0, ip
 80192be:	f7ff ffa8 	bl	8019212 <prvInitialiseNewQueue>
	}
 80192c2:	4620      	mov	r0, r4
 80192c4:	b004      	add	sp, #16
 80192c6:	bd10      	pop	{r4, pc}

080192c8 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80192c8:	b940      	cbnz	r0, 80192dc <xQueueGenericCreate+0x14>
 80192ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192ce:	f383 8811 	msr	BASEPRI, r3
 80192d2:	f3bf 8f6f 	isb	sy
 80192d6:	f3bf 8f4f 	dsb	sy
 80192da:	e7fe      	b.n	80192da <xQueueGenericCreate+0x12>
	{
 80192dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192de:	b083      	sub	sp, #12
 80192e0:	460d      	mov	r5, r1
 80192e2:	4614      	mov	r4, r2
 80192e4:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80192e6:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80192ea:	3050      	adds	r0, #80	@ 0x50
 80192ec:	f001 feb4 	bl	801b058 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80192f0:	4607      	mov	r7, r0
 80192f2:	b150      	cbz	r0, 801930a <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80192f4:	2300      	movs	r3, #0
 80192f6:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80192fa:	9000      	str	r0, [sp, #0]
 80192fc:	4623      	mov	r3, r4
 80192fe:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8019302:	4629      	mov	r1, r5
 8019304:	4630      	mov	r0, r6
 8019306:	f7ff ff84 	bl	8019212 <prvInitialiseNewQueue>
	}
 801930a:	4638      	mov	r0, r7
 801930c:	b003      	add	sp, #12
 801930e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019310 <xQueueGenericSend>:
{
 8019310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019312:	b085      	sub	sp, #20
 8019314:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8019316:	b188      	cbz	r0, 801933c <xQueueGenericSend+0x2c>
 8019318:	460f      	mov	r7, r1
 801931a:	461d      	mov	r5, r3
 801931c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801931e:	b1b1      	cbz	r1, 801934e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019320:	2d02      	cmp	r5, #2
 8019322:	d120      	bne.n	8019366 <xQueueGenericSend+0x56>
 8019324:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8019326:	2b01      	cmp	r3, #1
 8019328:	d01d      	beq.n	8019366 <xQueueGenericSend+0x56>
 801932a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801932e:	f383 8811 	msr	BASEPRI, r3
 8019332:	f3bf 8f6f 	isb	sy
 8019336:	f3bf 8f4f 	dsb	sy
 801933a:	e7fe      	b.n	801933a <xQueueGenericSend+0x2a>
 801933c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019340:	f383 8811 	msr	BASEPRI, r3
 8019344:	f3bf 8f6f 	isb	sy
 8019348:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801934c:	e7fe      	b.n	801934c <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801934e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019350:	2b00      	cmp	r3, #0
 8019352:	d0e5      	beq.n	8019320 <xQueueGenericSend+0x10>
 8019354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019358:	f383 8811 	msr	BASEPRI, r3
 801935c:	f3bf 8f6f 	isb	sy
 8019360:	f3bf 8f4f 	dsb	sy
 8019364:	e7fe      	b.n	8019364 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019366:	f001 f92b 	bl	801a5c0 <xTaskGetSchedulerState>
 801936a:	4606      	mov	r6, r0
 801936c:	b958      	cbnz	r0, 8019386 <xQueueGenericSend+0x76>
 801936e:	9b01      	ldr	r3, [sp, #4]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d048      	beq.n	8019406 <xQueueGenericSend+0xf6>
 8019374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019378:	f383 8811 	msr	BASEPRI, r3
 801937c:	f3bf 8f6f 	isb	sy
 8019380:	f3bf 8f4f 	dsb	sy
 8019384:	e7fe      	b.n	8019384 <xQueueGenericSend+0x74>
 8019386:	2600      	movs	r6, #0
 8019388:	e03d      	b.n	8019406 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801938a:	462a      	mov	r2, r5
 801938c:	4639      	mov	r1, r7
 801938e:	4620      	mov	r0, r4
 8019390:	f7ff fe79 	bl	8019086 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019394:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019396:	b97b      	cbnz	r3, 80193b8 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8019398:	b148      	cbz	r0, 80193ae <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 801939a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801939e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80193a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80193a6:	f3bf 8f4f 	dsb	sy
 80193aa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80193ae:	f001 fcbb 	bl	801ad28 <vPortExitCritical>
				return pdPASS;
 80193b2:	2001      	movs	r0, #1
}
 80193b4:	b005      	add	sp, #20
 80193b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80193b8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80193bc:	f001 f860 	bl	801a480 <xTaskRemoveFromEventList>
 80193c0:	2800      	cmp	r0, #0
 80193c2:	d0f4      	beq.n	80193ae <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 80193c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80193c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80193cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80193d0:	f3bf 8f4f 	dsb	sy
 80193d4:	f3bf 8f6f 	isb	sy
 80193d8:	e7e9      	b.n	80193ae <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 80193da:	f001 fca5 	bl	801ad28 <vPortExitCritical>
					return errQUEUE_FULL;
 80193de:	2000      	movs	r0, #0
 80193e0:	e7e8      	b.n	80193b4 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80193e2:	a802      	add	r0, sp, #8
 80193e4:	f001 f892 	bl	801a50c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80193e8:	2601      	movs	r6, #1
 80193ea:	e019      	b.n	8019420 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 80193ec:	2300      	movs	r3, #0
 80193ee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80193f2:	e021      	b.n	8019438 <xQueueGenericSend+0x128>
 80193f4:	2300      	movs	r3, #0
 80193f6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80193fa:	e023      	b.n	8019444 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 80193fc:	4620      	mov	r0, r4
 80193fe:	f7ff fe8f 	bl	8019120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019402:	f000 ff15 	bl	801a230 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8019406:	f001 fc6d 	bl	801ace4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801940a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801940c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801940e:	429a      	cmp	r2, r3
 8019410:	d3bb      	bcc.n	801938a <xQueueGenericSend+0x7a>
 8019412:	2d02      	cmp	r5, #2
 8019414:	d0b9      	beq.n	801938a <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019416:	9b01      	ldr	r3, [sp, #4]
 8019418:	2b00      	cmp	r3, #0
 801941a:	d0de      	beq.n	80193da <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 801941c:	2e00      	cmp	r6, #0
 801941e:	d0e0      	beq.n	80193e2 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8019420:	f001 fc82 	bl	801ad28 <vPortExitCritical>
		vTaskSuspendAll();
 8019424:	f000 fe6a 	bl	801a0fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019428:	f001 fc5c 	bl	801ace4 <vPortEnterCritical>
 801942c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8019430:	b252      	sxtb	r2, r2
 8019432:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8019436:	d0d9      	beq.n	80193ec <xQueueGenericSend+0xdc>
 8019438:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 801943c:	b252      	sxtb	r2, r2
 801943e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8019442:	d0d7      	beq.n	80193f4 <xQueueGenericSend+0xe4>
 8019444:	f001 fc70 	bl	801ad28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019448:	a901      	add	r1, sp, #4
 801944a:	a802      	add	r0, sp, #8
 801944c:	f001 f86a 	bl	801a524 <xTaskCheckForTimeOut>
 8019450:	b9d8      	cbnz	r0, 801948a <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019452:	4620      	mov	r0, r4
 8019454:	f7ff fdfb 	bl	801904e <prvIsQueueFull>
 8019458:	2800      	cmp	r0, #0
 801945a:	d0cf      	beq.n	80193fc <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801945c:	9901      	ldr	r1, [sp, #4]
 801945e:	f104 0010 	add.w	r0, r4, #16
 8019462:	f000 ffd9 	bl	801a418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019466:	4620      	mov	r0, r4
 8019468:	f7ff fe5a 	bl	8019120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801946c:	f000 fee0 	bl	801a230 <xTaskResumeAll>
 8019470:	2800      	cmp	r0, #0
 8019472:	d1c8      	bne.n	8019406 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8019474:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801947c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019480:	f3bf 8f4f 	dsb	sy
 8019484:	f3bf 8f6f 	isb	sy
 8019488:	e7bd      	b.n	8019406 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 801948a:	4620      	mov	r0, r4
 801948c:	f7ff fe48 	bl	8019120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019490:	f000 fece 	bl	801a230 <xTaskResumeAll>
			return errQUEUE_FULL;
 8019494:	2000      	movs	r0, #0
 8019496:	e78d      	b.n	80193b4 <xQueueGenericSend+0xa4>

08019498 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8019498:	b148      	cbz	r0, 80194ae <prvInitialiseMutex+0x16>
	{
 801949a:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801949c:	2100      	movs	r1, #0
 801949e:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80194a0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80194a2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80194a4:	460b      	mov	r3, r1
 80194a6:	460a      	mov	r2, r1
 80194a8:	f7ff ff32 	bl	8019310 <xQueueGenericSend>
	}
 80194ac:	bd08      	pop	{r3, pc}
 80194ae:	4770      	bx	lr

080194b0 <xQueueCreateMutex>:
	{
 80194b0:	b510      	push	{r4, lr}
 80194b2:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80194b4:	2100      	movs	r1, #0
 80194b6:	2001      	movs	r0, #1
 80194b8:	f7ff ff06 	bl	80192c8 <xQueueGenericCreate>
 80194bc:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80194be:	f7ff ffeb 	bl	8019498 <prvInitialiseMutex>
	}
 80194c2:	4620      	mov	r0, r4
 80194c4:	bd10      	pop	{r4, pc}

080194c6 <xQueueCreateMutexStatic>:
	{
 80194c6:	b510      	push	{r4, lr}
 80194c8:	b082      	sub	sp, #8
 80194ca:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80194cc:	9000      	str	r0, [sp, #0]
 80194ce:	2200      	movs	r2, #0
 80194d0:	4611      	mov	r1, r2
 80194d2:	2001      	movs	r0, #1
 80194d4:	f7ff feae 	bl	8019234 <xQueueGenericCreateStatic>
 80194d8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80194da:	f7ff ffdd 	bl	8019498 <prvInitialiseMutex>
	}
 80194de:	4620      	mov	r0, r4
 80194e0:	b002      	add	sp, #8
 80194e2:	bd10      	pop	{r4, pc}

080194e4 <xQueueGiveMutexRecursive>:
	{
 80194e4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80194e6:	b138      	cbz	r0, 80194f8 <xQueueGiveMutexRecursive+0x14>
 80194e8:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80194ea:	6885      	ldr	r5, [r0, #8]
 80194ec:	f001 f862 	bl	801a5b4 <xTaskGetCurrentTaskHandle>
 80194f0:	4285      	cmp	r5, r0
 80194f2:	d00a      	beq.n	801950a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 80194f4:	2000      	movs	r0, #0
	}
 80194f6:	bd38      	pop	{r3, r4, r5, pc}
 80194f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194fc:	f383 8811 	msr	BASEPRI, r3
 8019500:	f3bf 8f6f 	isb	sy
 8019504:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8019508:	e7fe      	b.n	8019508 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801950a:	68e3      	ldr	r3, [r4, #12]
 801950c:	3b01      	subs	r3, #1
 801950e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8019510:	b10b      	cbz	r3, 8019516 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8019512:	2001      	movs	r0, #1
		return xReturn;
 8019514:	e7ef      	b.n	80194f6 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8019516:	461a      	mov	r2, r3
 8019518:	4619      	mov	r1, r3
 801951a:	4620      	mov	r0, r4
 801951c:	f7ff fef8 	bl	8019310 <xQueueGenericSend>
			xReturn = pdPASS;
 8019520:	2001      	movs	r0, #1
 8019522:	e7e8      	b.n	80194f6 <xQueueGiveMutexRecursive+0x12>

08019524 <xQueueGenericSendFromISR>:
{
 8019524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8019528:	b190      	cbz	r0, 8019550 <xQueueGenericSendFromISR+0x2c>
 801952a:	460f      	mov	r7, r1
 801952c:	4616      	mov	r6, r2
 801952e:	461c      	mov	r4, r3
 8019530:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019532:	b1b1      	cbz	r1, 8019562 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019534:	2c02      	cmp	r4, #2
 8019536:	d120      	bne.n	801957a <xQueueGenericSendFromISR+0x56>
 8019538:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801953a:	2b01      	cmp	r3, #1
 801953c:	d01d      	beq.n	801957a <xQueueGenericSendFromISR+0x56>
 801953e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019542:	f383 8811 	msr	BASEPRI, r3
 8019546:	f3bf 8f6f 	isb	sy
 801954a:	f3bf 8f4f 	dsb	sy
 801954e:	e7fe      	b.n	801954e <xQueueGenericSendFromISR+0x2a>
 8019550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019554:	f383 8811 	msr	BASEPRI, r3
 8019558:	f3bf 8f6f 	isb	sy
 801955c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8019560:	e7fe      	b.n	8019560 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019562:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019564:	2b00      	cmp	r3, #0
 8019566:	d0e5      	beq.n	8019534 <xQueueGenericSendFromISR+0x10>
 8019568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801956c:	f383 8811 	msr	BASEPRI, r3
 8019570:	f3bf 8f6f 	isb	sy
 8019574:	f3bf 8f4f 	dsb	sy
 8019578:	e7fe      	b.n	8019578 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801957a:	f001 fcd9 	bl	801af30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801957e:	f3ef 8811 	mrs	r8, BASEPRI
 8019582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019586:	f383 8811 	msr	BASEPRI, r3
 801958a:	f3bf 8f6f 	isb	sy
 801958e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019592:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8019594:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8019596:	429a      	cmp	r2, r3
 8019598:	d306      	bcc.n	80195a8 <xQueueGenericSendFromISR+0x84>
 801959a:	2c02      	cmp	r4, #2
 801959c:	d004      	beq.n	80195a8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 801959e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80195a0:	f388 8811 	msr	BASEPRI, r8
}
 80195a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80195a8:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 80195ac:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80195b0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80195b2:	4622      	mov	r2, r4
 80195b4:	4639      	mov	r1, r7
 80195b6:	4628      	mov	r0, r5
 80195b8:	f7ff fd65 	bl	8019086 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80195bc:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80195c0:	d006      	beq.n	80195d0 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80195c2:	f109 0301 	add.w	r3, r9, #1
 80195c6:	b25b      	sxtb	r3, r3
 80195c8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 80195cc:	2001      	movs	r0, #1
 80195ce:	e7e7      	b.n	80195a0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80195d0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80195d2:	b90b      	cbnz	r3, 80195d8 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80195d4:	2001      	movs	r0, #1
 80195d6:	e7e3      	b.n	80195a0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80195d8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80195dc:	f000 ff50 	bl	801a480 <xTaskRemoveFromEventList>
 80195e0:	b118      	cbz	r0, 80195ea <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80195e2:	b126      	cbz	r6, 80195ee <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80195e4:	2001      	movs	r0, #1
 80195e6:	6030      	str	r0, [r6, #0]
 80195e8:	e7da      	b.n	80195a0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80195ea:	2001      	movs	r0, #1
 80195ec:	e7d8      	b.n	80195a0 <xQueueGenericSendFromISR+0x7c>
 80195ee:	2001      	movs	r0, #1
 80195f0:	e7d6      	b.n	80195a0 <xQueueGenericSendFromISR+0x7c>

080195f2 <xQueueReceive>:
{
 80195f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195f4:	b085      	sub	sp, #20
 80195f6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80195f8:	b190      	cbz	r0, 8019620 <xQueueReceive+0x2e>
 80195fa:	460f      	mov	r7, r1
 80195fc:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80195fe:	b1c1      	cbz	r1, 8019632 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019600:	f000 ffde 	bl	801a5c0 <xTaskGetSchedulerState>
 8019604:	4606      	mov	r6, r0
 8019606:	bb00      	cbnz	r0, 801964a <xQueueReceive+0x58>
 8019608:	9b01      	ldr	r3, [sp, #4]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d05e      	beq.n	80196cc <xQueueReceive+0xda>
	__asm volatile
 801960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019612:	f383 8811 	msr	BASEPRI, r3
 8019616:	f3bf 8f6f 	isb	sy
 801961a:	f3bf 8f4f 	dsb	sy
 801961e:	e7fe      	b.n	801961e <xQueueReceive+0x2c>
 8019620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019624:	f383 8811 	msr	BASEPRI, r3
 8019628:	f3bf 8f6f 	isb	sy
 801962c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8019630:	e7fe      	b.n	8019630 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019632:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019634:	2b00      	cmp	r3, #0
 8019636:	d0e3      	beq.n	8019600 <xQueueReceive+0xe>
 8019638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801963c:	f383 8811 	msr	BASEPRI, r3
 8019640:	f3bf 8f6f 	isb	sy
 8019644:	f3bf 8f4f 	dsb	sy
 8019648:	e7fe      	b.n	8019648 <xQueueReceive+0x56>
 801964a:	2600      	movs	r6, #0
 801964c:	e03e      	b.n	80196cc <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801964e:	4639      	mov	r1, r7
 8019650:	4620      	mov	r0, r4
 8019652:	f7ff fd53 	bl	80190fc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019656:	3d01      	subs	r5, #1
 8019658:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801965a:	6923      	ldr	r3, [r4, #16]
 801965c:	b923      	cbnz	r3, 8019668 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 801965e:	f001 fb63 	bl	801ad28 <vPortExitCritical>
				return pdPASS;
 8019662:	2001      	movs	r0, #1
}
 8019664:	b005      	add	sp, #20
 8019666:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019668:	f104 0010 	add.w	r0, r4, #16
 801966c:	f000 ff08 	bl	801a480 <xTaskRemoveFromEventList>
 8019670:	2800      	cmp	r0, #0
 8019672:	d0f4      	beq.n	801965e <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8019674:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801967c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019680:	f3bf 8f4f 	dsb	sy
 8019684:	f3bf 8f6f 	isb	sy
 8019688:	e7e9      	b.n	801965e <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 801968a:	f001 fb4d 	bl	801ad28 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801968e:	2000      	movs	r0, #0
 8019690:	e7e8      	b.n	8019664 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019692:	a802      	add	r0, sp, #8
 8019694:	f000 ff3a 	bl	801a50c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019698:	2601      	movs	r6, #1
 801969a:	e021      	b.n	80196e0 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 801969c:	2300      	movs	r3, #0
 801969e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80196a2:	e029      	b.n	80196f8 <xQueueReceive+0x106>
 80196a4:	2300      	movs	r3, #0
 80196a6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80196aa:	e02b      	b.n	8019704 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80196ac:	4620      	mov	r0, r4
 80196ae:	f7ff fd37 	bl	8019120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80196b2:	f000 fdbd 	bl	801a230 <xTaskResumeAll>
 80196b6:	e009      	b.n	80196cc <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80196b8:	4620      	mov	r0, r4
 80196ba:	f7ff fd31 	bl	8019120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80196be:	f000 fdb7 	bl	801a230 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80196c2:	4620      	mov	r0, r4
 80196c4:	f7ff fcd2 	bl	801906c <prvIsQueueEmpty>
 80196c8:	2800      	cmp	r0, #0
 80196ca:	d13f      	bne.n	801974c <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80196cc:	f001 fb0a 	bl	801ace4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80196d0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80196d2:	2d00      	cmp	r5, #0
 80196d4:	d1bb      	bne.n	801964e <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80196d6:	9b01      	ldr	r3, [sp, #4]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d0d6      	beq.n	801968a <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80196dc:	2e00      	cmp	r6, #0
 80196de:	d0d8      	beq.n	8019692 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80196e0:	f001 fb22 	bl	801ad28 <vPortExitCritical>
		vTaskSuspendAll();
 80196e4:	f000 fd0a 	bl	801a0fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80196e8:	f001 fafc 	bl	801ace4 <vPortEnterCritical>
 80196ec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80196f0:	b25b      	sxtb	r3, r3
 80196f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80196f6:	d0d1      	beq.n	801969c <xQueueReceive+0xaa>
 80196f8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80196fc:	b25b      	sxtb	r3, r3
 80196fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019702:	d0cf      	beq.n	80196a4 <xQueueReceive+0xb2>
 8019704:	f001 fb10 	bl	801ad28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019708:	a901      	add	r1, sp, #4
 801970a:	a802      	add	r0, sp, #8
 801970c:	f000 ff0a 	bl	801a524 <xTaskCheckForTimeOut>
 8019710:	2800      	cmp	r0, #0
 8019712:	d1d1      	bne.n	80196b8 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019714:	4620      	mov	r0, r4
 8019716:	f7ff fca9 	bl	801906c <prvIsQueueEmpty>
 801971a:	2800      	cmp	r0, #0
 801971c:	d0c6      	beq.n	80196ac <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801971e:	9901      	ldr	r1, [sp, #4]
 8019720:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019724:	f000 fe78 	bl	801a418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019728:	4620      	mov	r0, r4
 801972a:	f7ff fcf9 	bl	8019120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801972e:	f000 fd7f 	bl	801a230 <xTaskResumeAll>
 8019732:	2800      	cmp	r0, #0
 8019734:	d1ca      	bne.n	80196cc <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8019736:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801973a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801973e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019742:	f3bf 8f4f 	dsb	sy
 8019746:	f3bf 8f6f 	isb	sy
 801974a:	e7bf      	b.n	80196cc <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 801974c:	2000      	movs	r0, #0
 801974e:	e789      	b.n	8019664 <xQueueReceive+0x72>

08019750 <xQueueSemaphoreTake>:
{
 8019750:	b570      	push	{r4, r5, r6, lr}
 8019752:	b084      	sub	sp, #16
 8019754:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8019756:	b158      	cbz	r0, 8019770 <xQueueSemaphoreTake+0x20>
 8019758:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 801975a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801975c:	b18b      	cbz	r3, 8019782 <xQueueSemaphoreTake+0x32>
 801975e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019762:	f383 8811 	msr	BASEPRI, r3
 8019766:	f3bf 8f6f 	isb	sy
 801976a:	f3bf 8f4f 	dsb	sy
 801976e:	e7fe      	b.n	801976e <xQueueSemaphoreTake+0x1e>
 8019770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019774:	f383 8811 	msr	BASEPRI, r3
 8019778:	f3bf 8f6f 	isb	sy
 801977c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8019780:	e7fe      	b.n	8019780 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019782:	f000 ff1d 	bl	801a5c0 <xTaskGetSchedulerState>
 8019786:	4605      	mov	r5, r0
 8019788:	b950      	cbnz	r0, 80197a0 <xQueueSemaphoreTake+0x50>
 801978a:	9b01      	ldr	r3, [sp, #4]
 801978c:	b15b      	cbz	r3, 80197a6 <xQueueSemaphoreTake+0x56>
 801978e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019792:	f383 8811 	msr	BASEPRI, r3
 8019796:	f3bf 8f6f 	isb	sy
 801979a:	f3bf 8f4f 	dsb	sy
 801979e:	e7fe      	b.n	801979e <xQueueSemaphoreTake+0x4e>
 80197a0:	2600      	movs	r6, #0
 80197a2:	4635      	mov	r5, r6
 80197a4:	e055      	b.n	8019852 <xQueueSemaphoreTake+0x102>
 80197a6:	4606      	mov	r6, r0
 80197a8:	e053      	b.n	8019852 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80197aa:	3b01      	subs	r3, #1
 80197ac:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80197ae:	6823      	ldr	r3, [r4, #0]
 80197b0:	b13b      	cbz	r3, 80197c2 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80197b2:	6923      	ldr	r3, [r4, #16]
 80197b4:	b94b      	cbnz	r3, 80197ca <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 80197b6:	f001 fab7 	bl	801ad28 <vPortExitCritical>
				return pdPASS;
 80197ba:	2601      	movs	r6, #1
}
 80197bc:	4630      	mov	r0, r6
 80197be:	b004      	add	sp, #16
 80197c0:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80197c2:	f000 fff1 	bl	801a7a8 <pvTaskIncrementMutexHeldCount>
 80197c6:	60a0      	str	r0, [r4, #8]
 80197c8:	e7f3      	b.n	80197b2 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80197ca:	f104 0010 	add.w	r0, r4, #16
 80197ce:	f000 fe57 	bl	801a480 <xTaskRemoveFromEventList>
 80197d2:	2800      	cmp	r0, #0
 80197d4:	d0ef      	beq.n	80197b6 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 80197d6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80197da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80197de:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80197e2:	f3bf 8f4f 	dsb	sy
 80197e6:	f3bf 8f6f 	isb	sy
 80197ea:	e7e4      	b.n	80197b6 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80197ec:	b146      	cbz	r6, 8019800 <xQueueSemaphoreTake+0xb0>
 80197ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80197f2:	f383 8811 	msr	BASEPRI, r3
 80197f6:	f3bf 8f6f 	isb	sy
 80197fa:	f3bf 8f4f 	dsb	sy
 80197fe:	e7fe      	b.n	80197fe <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8019800:	f001 fa92 	bl	801ad28 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8019804:	e7da      	b.n	80197bc <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019806:	a802      	add	r0, sp, #8
 8019808:	f000 fe80 	bl	801a50c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801980c:	2501      	movs	r5, #1
 801980e:	e02a      	b.n	8019866 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8019810:	2300      	movs	r3, #0
 8019812:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019816:	e032      	b.n	801987e <xQueueSemaphoreTake+0x12e>
 8019818:	2300      	movs	r3, #0
 801981a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801981e:	e034      	b.n	801988a <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8019820:	f001 fa60 	bl	801ace4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019824:	68a0      	ldr	r0, [r4, #8]
 8019826:	f000 fedb 	bl	801a5e0 <xTaskPriorityInherit>
 801982a:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 801982c:	f001 fa7c 	bl	801ad28 <vPortExitCritical>
 8019830:	e03b      	b.n	80198aa <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 8019832:	4620      	mov	r0, r4
 8019834:	f7ff fc74 	bl	8019120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019838:	f000 fcfa 	bl	801a230 <xTaskResumeAll>
 801983c:	e009      	b.n	8019852 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 801983e:	4620      	mov	r0, r4
 8019840:	f7ff fc6e 	bl	8019120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019844:	f000 fcf4 	bl	801a230 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019848:	4620      	mov	r0, r4
 801984a:	f7ff fc0f 	bl	801906c <prvIsQueueEmpty>
 801984e:	2800      	cmp	r0, #0
 8019850:	d142      	bne.n	80198d8 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 8019852:	f001 fa47 	bl	801ace4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019856:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019858:	2b00      	cmp	r3, #0
 801985a:	d1a6      	bne.n	80197aa <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801985c:	9b01      	ldr	r3, [sp, #4]
 801985e:	2b00      	cmp	r3, #0
 8019860:	d0c4      	beq.n	80197ec <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 8019862:	2d00      	cmp	r5, #0
 8019864:	d0cf      	beq.n	8019806 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8019866:	f001 fa5f 	bl	801ad28 <vPortExitCritical>
		vTaskSuspendAll();
 801986a:	f000 fc47 	bl	801a0fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801986e:	f001 fa39 	bl	801ace4 <vPortEnterCritical>
 8019872:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019876:	b25b      	sxtb	r3, r3
 8019878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801987c:	d0c8      	beq.n	8019810 <xQueueSemaphoreTake+0xc0>
 801987e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8019882:	b25b      	sxtb	r3, r3
 8019884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019888:	d0c6      	beq.n	8019818 <xQueueSemaphoreTake+0xc8>
 801988a:	f001 fa4d 	bl	801ad28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801988e:	a901      	add	r1, sp, #4
 8019890:	a802      	add	r0, sp, #8
 8019892:	f000 fe47 	bl	801a524 <xTaskCheckForTimeOut>
 8019896:	2800      	cmp	r0, #0
 8019898:	d1d1      	bne.n	801983e <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801989a:	4620      	mov	r0, r4
 801989c:	f7ff fbe6 	bl	801906c <prvIsQueueEmpty>
 80198a0:	2800      	cmp	r0, #0
 80198a2:	d0c6      	beq.n	8019832 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80198a4:	6823      	ldr	r3, [r4, #0]
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d0ba      	beq.n	8019820 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80198aa:	9901      	ldr	r1, [sp, #4]
 80198ac:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80198b0:	f000 fdb2 	bl	801a418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80198b4:	4620      	mov	r0, r4
 80198b6:	f7ff fc33 	bl	8019120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80198ba:	f000 fcb9 	bl	801a230 <xTaskResumeAll>
 80198be:	2800      	cmp	r0, #0
 80198c0:	d1c7      	bne.n	8019852 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 80198c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80198c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80198ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80198ce:	f3bf 8f4f 	dsb	sy
 80198d2:	f3bf 8f6f 	isb	sy
 80198d6:	e7bc      	b.n	8019852 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 80198d8:	b90e      	cbnz	r6, 80198de <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 80198da:	2600      	movs	r6, #0
 80198dc:	e76e      	b.n	80197bc <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 80198de:	f001 fa01 	bl	801ace4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80198e2:	4620      	mov	r0, r4
 80198e4:	f7ff fbab 	bl	801903e <prvGetDisinheritPriorityAfterTimeout>
 80198e8:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80198ea:	68a0      	ldr	r0, [r4, #8]
 80198ec:	f000 ff0c 	bl	801a708 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80198f0:	f001 fa1a 	bl	801ad28 <vPortExitCritical>
 80198f4:	e7f1      	b.n	80198da <xQueueSemaphoreTake+0x18a>

080198f6 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 80198f6:	b180      	cbz	r0, 801991a <xQueueTakeMutexRecursive+0x24>
	{
 80198f8:	b570      	push	{r4, r5, r6, lr}
 80198fa:	460c      	mov	r4, r1
 80198fc:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80198fe:	6886      	ldr	r6, [r0, #8]
 8019900:	f000 fe58 	bl	801a5b4 <xTaskGetCurrentTaskHandle>
 8019904:	4286      	cmp	r6, r0
 8019906:	d011      	beq.n	801992c <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8019908:	4621      	mov	r1, r4
 801990a:	4628      	mov	r0, r5
 801990c:	f7ff ff20 	bl	8019750 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8019910:	b180      	cbz	r0, 8019934 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8019912:	68eb      	ldr	r3, [r5, #12]
 8019914:	3301      	adds	r3, #1
 8019916:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8019918:	e00c      	b.n	8019934 <xQueueTakeMutexRecursive+0x3e>
 801991a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801991e:	f383 8811 	msr	BASEPRI, r3
 8019922:	f3bf 8f6f 	isb	sy
 8019926:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 801992a:	e7fe      	b.n	801992a <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801992c:	68eb      	ldr	r3, [r5, #12]
 801992e:	3301      	adds	r3, #1
 8019930:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 8019932:	2001      	movs	r0, #1
	}
 8019934:	bd70      	pop	{r4, r5, r6, pc}

08019936 <xQueuePeek>:
{
 8019936:	b570      	push	{r4, r5, r6, lr}
 8019938:	b084      	sub	sp, #16
 801993a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801993c:	b190      	cbz	r0, 8019964 <xQueuePeek+0x2e>
 801993e:	460e      	mov	r6, r1
 8019940:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019942:	b1c1      	cbz	r1, 8019976 <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019944:	f000 fe3c 	bl	801a5c0 <xTaskGetSchedulerState>
 8019948:	4605      	mov	r5, r0
 801994a:	bb00      	cbnz	r0, 801998e <xQueuePeek+0x58>
 801994c:	9b01      	ldr	r3, [sp, #4]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d05e      	beq.n	8019a10 <xQueuePeek+0xda>
 8019952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019956:	f383 8811 	msr	BASEPRI, r3
 801995a:	f3bf 8f6f 	isb	sy
 801995e:	f3bf 8f4f 	dsb	sy
 8019962:	e7fe      	b.n	8019962 <xQueuePeek+0x2c>
 8019964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019968:	f383 8811 	msr	BASEPRI, r3
 801996c:	f3bf 8f6f 	isb	sy
 8019970:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8019974:	e7fe      	b.n	8019974 <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019976:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019978:	2b00      	cmp	r3, #0
 801997a:	d0e3      	beq.n	8019944 <xQueuePeek+0xe>
 801997c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019980:	f383 8811 	msr	BASEPRI, r3
 8019984:	f3bf 8f6f 	isb	sy
 8019988:	f3bf 8f4f 	dsb	sy
 801998c:	e7fe      	b.n	801998c <xQueuePeek+0x56>
 801998e:	2500      	movs	r5, #0
 8019990:	e03e      	b.n	8019a10 <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8019992:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019994:	4631      	mov	r1, r6
 8019996:	4620      	mov	r0, r4
 8019998:	f7ff fbb0 	bl	80190fc <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 801999c:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801999e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80199a0:	b923      	cbnz	r3, 80199ac <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 80199a2:	f001 f9c1 	bl	801ad28 <vPortExitCritical>
				return pdPASS;
 80199a6:	2001      	movs	r0, #1
}
 80199a8:	b004      	add	sp, #16
 80199aa:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80199ac:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80199b0:	f000 fd66 	bl	801a480 <xTaskRemoveFromEventList>
 80199b4:	2800      	cmp	r0, #0
 80199b6:	d0f4      	beq.n	80199a2 <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80199b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80199bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80199c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80199c4:	f3bf 8f4f 	dsb	sy
 80199c8:	f3bf 8f6f 	isb	sy
 80199cc:	e7e9      	b.n	80199a2 <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 80199ce:	f001 f9ab 	bl	801ad28 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80199d2:	2000      	movs	r0, #0
 80199d4:	e7e8      	b.n	80199a8 <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80199d6:	a802      	add	r0, sp, #8
 80199d8:	f000 fd98 	bl	801a50c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80199dc:	2501      	movs	r5, #1
 80199de:	e021      	b.n	8019a24 <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 80199e0:	2300      	movs	r3, #0
 80199e2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80199e6:	e029      	b.n	8019a3c <xQueuePeek+0x106>
 80199e8:	2300      	movs	r3, #0
 80199ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80199ee:	e02b      	b.n	8019a48 <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 80199f0:	4620      	mov	r0, r4
 80199f2:	f7ff fb95 	bl	8019120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80199f6:	f000 fc1b 	bl	801a230 <xTaskResumeAll>
 80199fa:	e009      	b.n	8019a10 <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 80199fc:	4620      	mov	r0, r4
 80199fe:	f7ff fb8f 	bl	8019120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019a02:	f000 fc15 	bl	801a230 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019a06:	4620      	mov	r0, r4
 8019a08:	f7ff fb30 	bl	801906c <prvIsQueueEmpty>
 8019a0c:	2800      	cmp	r0, #0
 8019a0e:	d13f      	bne.n	8019a90 <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 8019a10:	f001 f968 	bl	801ace4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019a14:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d1bb      	bne.n	8019992 <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019a1a:	9b01      	ldr	r3, [sp, #4]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d0d6      	beq.n	80199ce <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8019a20:	2d00      	cmp	r5, #0
 8019a22:	d0d8      	beq.n	80199d6 <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 8019a24:	f001 f980 	bl	801ad28 <vPortExitCritical>
		vTaskSuspendAll();
 8019a28:	f000 fb68 	bl	801a0fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019a2c:	f001 f95a 	bl	801ace4 <vPortEnterCritical>
 8019a30:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019a34:	b25b      	sxtb	r3, r3
 8019a36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019a3a:	d0d1      	beq.n	80199e0 <xQueuePeek+0xaa>
 8019a3c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8019a40:	b25b      	sxtb	r3, r3
 8019a42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019a46:	d0cf      	beq.n	80199e8 <xQueuePeek+0xb2>
 8019a48:	f001 f96e 	bl	801ad28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019a4c:	a901      	add	r1, sp, #4
 8019a4e:	a802      	add	r0, sp, #8
 8019a50:	f000 fd68 	bl	801a524 <xTaskCheckForTimeOut>
 8019a54:	2800      	cmp	r0, #0
 8019a56:	d1d1      	bne.n	80199fc <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019a58:	4620      	mov	r0, r4
 8019a5a:	f7ff fb07 	bl	801906c <prvIsQueueEmpty>
 8019a5e:	2800      	cmp	r0, #0
 8019a60:	d0c6      	beq.n	80199f0 <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019a62:	9901      	ldr	r1, [sp, #4]
 8019a64:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019a68:	f000 fcd6 	bl	801a418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019a6c:	4620      	mov	r0, r4
 8019a6e:	f7ff fb57 	bl	8019120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019a72:	f000 fbdd 	bl	801a230 <xTaskResumeAll>
 8019a76:	2800      	cmp	r0, #0
 8019a78:	d1ca      	bne.n	8019a10 <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 8019a7a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019a82:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019a86:	f3bf 8f4f 	dsb	sy
 8019a8a:	f3bf 8f6f 	isb	sy
 8019a8e:	e7bf      	b.n	8019a10 <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 8019a90:	2000      	movs	r0, #0
 8019a92:	e789      	b.n	80199a8 <xQueuePeek+0x72>

08019a94 <xQueueReceiveFromISR>:
{
 8019a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8019a98:	b1b0      	cbz	r0, 8019ac8 <xQueueReceiveFromISR+0x34>
 8019a9a:	460d      	mov	r5, r1
 8019a9c:	4690      	mov	r8, r2
 8019a9e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019aa0:	b1d9      	cbz	r1, 8019ada <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019aa2:	f001 fa45 	bl	801af30 <vPortValidateInterruptPriority>
	__asm volatile
 8019aa6:	f3ef 8711 	mrs	r7, BASEPRI
 8019aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019aae:	f383 8811 	msr	BASEPRI, r3
 8019ab2:	f3bf 8f6f 	isb	sy
 8019ab6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019aba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019abc:	b9ce      	cbnz	r6, 8019af2 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8019abe:	2000      	movs	r0, #0
	__asm volatile
 8019ac0:	f387 8811 	msr	BASEPRI, r7
}
 8019ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8019ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019acc:	f383 8811 	msr	BASEPRI, r3
 8019ad0:	f3bf 8f6f 	isb	sy
 8019ad4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8019ad8:	e7fe      	b.n	8019ad8 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019ada:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d0e0      	beq.n	8019aa2 <xQueueReceiveFromISR+0xe>
 8019ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ae4:	f383 8811 	msr	BASEPRI, r3
 8019ae8:	f3bf 8f6f 	isb	sy
 8019aec:	f3bf 8f4f 	dsb	sy
 8019af0:	e7fe      	b.n	8019af0 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8019af2:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8019af6:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019afa:	4629      	mov	r1, r5
 8019afc:	4620      	mov	r0, r4
 8019afe:	f7ff fafd 	bl	80190fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019b02:	1e73      	subs	r3, r6, #1
 8019b04:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8019b06:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8019b0a:	d006      	beq.n	8019b1a <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019b0c:	f109 0301 	add.w	r3, r9, #1
 8019b10:	b25b      	sxtb	r3, r3
 8019b12:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8019b16:	2001      	movs	r0, #1
 8019b18:	e7d2      	b.n	8019ac0 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019b1a:	6923      	ldr	r3, [r4, #16]
 8019b1c:	b90b      	cbnz	r3, 8019b22 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8019b1e:	2001      	movs	r0, #1
 8019b20:	e7ce      	b.n	8019ac0 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019b22:	f104 0010 	add.w	r0, r4, #16
 8019b26:	f000 fcab 	bl	801a480 <xTaskRemoveFromEventList>
 8019b2a:	b130      	cbz	r0, 8019b3a <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8019b2c:	f1b8 0f00 	cmp.w	r8, #0
 8019b30:	d005      	beq.n	8019b3e <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8019b32:	2001      	movs	r0, #1
 8019b34:	f8c8 0000 	str.w	r0, [r8]
 8019b38:	e7c2      	b.n	8019ac0 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8019b3a:	2001      	movs	r0, #1
 8019b3c:	e7c0      	b.n	8019ac0 <xQueueReceiveFromISR+0x2c>
 8019b3e:	2001      	movs	r0, #1
 8019b40:	e7be      	b.n	8019ac0 <xQueueReceiveFromISR+0x2c>

08019b42 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8019b42:	b140      	cbz	r0, 8019b56 <uxQueueMessagesWaiting+0x14>
{
 8019b44:	b510      	push	{r4, lr}
 8019b46:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019b48:	f001 f8cc 	bl	801ace4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8019b4c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8019b4e:	f001 f8eb 	bl	801ad28 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8019b52:	4620      	mov	r0, r4
 8019b54:	bd10      	pop	{r4, pc}
 8019b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b5a:	f383 8811 	msr	BASEPRI, r3
 8019b5e:	f3bf 8f6f 	isb	sy
 8019b62:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8019b66:	e7fe      	b.n	8019b66 <uxQueueMessagesWaiting+0x24>

08019b68 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8019b68:	b108      	cbz	r0, 8019b6e <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8019b6a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8019b6c:	4770      	bx	lr
 8019b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b72:	f383 8811 	msr	BASEPRI, r3
 8019b76:	f3bf 8f6f 	isb	sy
 8019b7a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8019b7e:	e7fe      	b.n	8019b7e <uxQueueMessagesWaitingFromISR+0x16>

08019b80 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019b80:	2300      	movs	r3, #0
 8019b82:	2b07      	cmp	r3, #7
 8019b84:	d80c      	bhi.n	8019ba0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8019b86:	4a07      	ldr	r2, [pc, #28]	@ (8019ba4 <vQueueAddToRegistry+0x24>)
 8019b88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019b8c:	b10a      	cbz	r2, 8019b92 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019b8e:	3301      	adds	r3, #1
 8019b90:	e7f7      	b.n	8019b82 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8019b92:	4a04      	ldr	r2, [pc, #16]	@ (8019ba4 <vQueueAddToRegistry+0x24>)
 8019b94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019b98:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019b9c:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019b9e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019ba0:	4770      	bx	lr
 8019ba2:	bf00      	nop
 8019ba4:	200036cc 	.word	0x200036cc

08019ba8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019ba8:	b570      	push	{r4, r5, r6, lr}
 8019baa:	4604      	mov	r4, r0
 8019bac:	460d      	mov	r5, r1
 8019bae:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019bb0:	f001 f898 	bl	801ace4 <vPortEnterCritical>
 8019bb4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019bb8:	b25b      	sxtb	r3, r3
 8019bba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019bbe:	d00d      	beq.n	8019bdc <vQueueWaitForMessageRestricted+0x34>
 8019bc0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8019bc4:	b25b      	sxtb	r3, r3
 8019bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019bca:	d00b      	beq.n	8019be4 <vQueueWaitForMessageRestricted+0x3c>
 8019bcc:	f001 f8ac 	bl	801ad28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019bd0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8019bd2:	b15b      	cbz	r3, 8019bec <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8019bd4:	4620      	mov	r0, r4
 8019bd6:	f7ff faa3 	bl	8019120 <prvUnlockQueue>
	}
 8019bda:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8019bdc:	2300      	movs	r3, #0
 8019bde:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019be2:	e7ed      	b.n	8019bc0 <vQueueWaitForMessageRestricted+0x18>
 8019be4:	2300      	movs	r3, #0
 8019be6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8019bea:	e7ef      	b.n	8019bcc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8019bec:	4632      	mov	r2, r6
 8019bee:	4629      	mov	r1, r5
 8019bf0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019bf4:	f000 fc28 	bl	801a448 <vTaskPlaceOnEventListRestricted>
 8019bf8:	e7ec      	b.n	8019bd4 <vQueueWaitForMessageRestricted+0x2c>
	...

08019bfc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019bfc:	4b08      	ldr	r3, [pc, #32]	@ (8019c20 <prvResetNextTaskUnblockTime+0x24>)
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	b923      	cbnz	r3, 8019c0e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019c04:	4b07      	ldr	r3, [pc, #28]	@ (8019c24 <prvResetNextTaskUnblockTime+0x28>)
 8019c06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019c0a:	601a      	str	r2, [r3, #0]
 8019c0c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019c0e:	4b04      	ldr	r3, [pc, #16]	@ (8019c20 <prvResetNextTaskUnblockTime+0x24>)
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	68db      	ldr	r3, [r3, #12]
 8019c14:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019c16:	685a      	ldr	r2, [r3, #4]
 8019c18:	4b02      	ldr	r3, [pc, #8]	@ (8019c24 <prvResetNextTaskUnblockTime+0x28>)
 8019c1a:	601a      	str	r2, [r3, #0]
	}
}
 8019c1c:	4770      	bx	lr
 8019c1e:	bf00      	nop
 8019c20:	2000377c 	.word	0x2000377c
 8019c24:	20003714 	.word	0x20003714

08019c28 <prvInitialiseNewTask>:
{
 8019c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c2c:	4680      	mov	r8, r0
 8019c2e:	460d      	mov	r5, r1
 8019c30:	4617      	mov	r7, r2
 8019c32:	4699      	mov	r9, r3
 8019c34:	9e08      	ldr	r6, [sp, #32]
 8019c36:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8019c3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019c3c:	0092      	lsls	r2, r2, #2
 8019c3e:	21a5      	movs	r1, #165	@ 0xa5
 8019c40:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019c42:	f013 fa55 	bl	802d0f0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019c46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019c48:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8019c4c:	3a01      	subs	r2, #1
 8019c4e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019c52:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8019c56:	2d00      	cmp	r5, #0
 8019c58:	d061      	beq.n	8019d1e <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019c5a:	f04f 0c00 	mov.w	ip, #0
 8019c5e:	f1bc 0f0f 	cmp.w	ip, #15
 8019c62:	d809      	bhi.n	8019c78 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019c64:	f815 300c 	ldrb.w	r3, [r5, ip]
 8019c68:	eb04 020c 	add.w	r2, r4, ip
 8019c6c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8019c70:	b113      	cbz	r3, 8019c78 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019c72:	f10c 0c01 	add.w	ip, ip, #1
 8019c76:	e7f2      	b.n	8019c5e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019c78:	2300      	movs	r3, #0
 8019c7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019c7e:	2e37      	cmp	r6, #55	@ 0x37
 8019c80:	d900      	bls.n	8019c84 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019c82:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8019c84:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8019c86:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019c88:	2500      	movs	r5, #0
 8019c8a:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019c8c:	1d20      	adds	r0, r4, #4
 8019c8e:	f7ff f99c 	bl	8018fca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019c92:	f104 0018 	add.w	r0, r4, #24
 8019c96:	f7ff f998 	bl	8018fca <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019c9a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019c9c:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8019ca0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019ca2:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8019ca4:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019ca8:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8019cac:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8019cb0:	4629      	mov	r1, r5
 8019cb2:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019cb6:	f013 fa1b 	bl	802d0f0 <memset>
 8019cba:	4b1b      	ldr	r3, [pc, #108]	@ (8019d28 <prvInitialiseNewTask+0x100>)
 8019cbc:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8019cbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019cc2:	6622      	str	r2, [r4, #96]	@ 0x60
 8019cc4:	33d0      	adds	r3, #208	@ 0xd0
 8019cc6:	6663      	str	r3, [r4, #100]	@ 0x64
 8019cc8:	2201      	movs	r2, #1
 8019cca:	2300      	movs	r3, #0
 8019ccc:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 8019cd0:	f243 330e 	movw	r3, #13070	@ 0x330e
 8019cd4:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 8019cd8:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 8019cdc:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 8019ce0:	f241 2334 	movw	r3, #4660	@ 0x1234
 8019ce4:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 8019ce8:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 8019cec:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 8019cf0:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 8019cf4:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8019cf8:	2305      	movs	r3, #5
 8019cfa:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 8019cfe:	230b      	movs	r3, #11
 8019d00:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019d04:	464a      	mov	r2, r9
 8019d06:	4641      	mov	r1, r8
 8019d08:	4638      	mov	r0, r7
 8019d0a:	f000 ffc3 	bl	801ac94 <pxPortInitialiseStack>
 8019d0e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8019d10:	f1ba 0f00 	cmp.w	sl, #0
 8019d14:	d001      	beq.n	8019d1a <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019d16:	f8ca 4000 	str.w	r4, [sl]
}
 8019d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019d1e:	2300      	movs	r3, #0
 8019d20:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8019d24:	e7ab      	b.n	8019c7e <prvInitialiseNewTask+0x56>
 8019d26:	bf00      	nop
 8019d28:	20019f84 	.word	0x20019f84

08019d2c <prvInitialiseTaskLists>:
{
 8019d2c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019d2e:	2400      	movs	r4, #0
 8019d30:	e007      	b.n	8019d42 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019d32:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8019d36:	0093      	lsls	r3, r2, #2
 8019d38:	480e      	ldr	r0, [pc, #56]	@ (8019d74 <prvInitialiseTaskLists+0x48>)
 8019d3a:	4418      	add	r0, r3
 8019d3c:	f7ff f93a 	bl	8018fb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019d40:	3401      	adds	r4, #1
 8019d42:	2c37      	cmp	r4, #55	@ 0x37
 8019d44:	d9f5      	bls.n	8019d32 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8019d46:	4d0c      	ldr	r5, [pc, #48]	@ (8019d78 <prvInitialiseTaskLists+0x4c>)
 8019d48:	4628      	mov	r0, r5
 8019d4a:	f7ff f933 	bl	8018fb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019d4e:	4c0b      	ldr	r4, [pc, #44]	@ (8019d7c <prvInitialiseTaskLists+0x50>)
 8019d50:	4620      	mov	r0, r4
 8019d52:	f7ff f92f 	bl	8018fb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019d56:	480a      	ldr	r0, [pc, #40]	@ (8019d80 <prvInitialiseTaskLists+0x54>)
 8019d58:	f7ff f92c 	bl	8018fb4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8019d5c:	4809      	ldr	r0, [pc, #36]	@ (8019d84 <prvInitialiseTaskLists+0x58>)
 8019d5e:	f7ff f929 	bl	8018fb4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8019d62:	4809      	ldr	r0, [pc, #36]	@ (8019d88 <prvInitialiseTaskLists+0x5c>)
 8019d64:	f7ff f926 	bl	8018fb4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8019d68:	4b08      	ldr	r3, [pc, #32]	@ (8019d8c <prvInitialiseTaskLists+0x60>)
 8019d6a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019d6c:	4b08      	ldr	r3, [pc, #32]	@ (8019d90 <prvInitialiseTaskLists+0x64>)
 8019d6e:	601c      	str	r4, [r3, #0]
}
 8019d70:	bd38      	pop	{r3, r4, r5, pc}
 8019d72:	bf00      	nop
 8019d74:	200037a8 	.word	0x200037a8
 8019d78:	20003794 	.word	0x20003794
 8019d7c:	20003780 	.word	0x20003780
 8019d80:	20003764 	.word	0x20003764
 8019d84:	20003750 	.word	0x20003750
 8019d88:	20003738 	.word	0x20003738
 8019d8c:	2000377c 	.word	0x2000377c
 8019d90:	20003778 	.word	0x20003778

08019d94 <prvAddNewTaskToReadyList>:
{
 8019d94:	b510      	push	{r4, lr}
 8019d96:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019d98:	f000 ffa4 	bl	801ace4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8019d9c:	4a22      	ldr	r2, [pc, #136]	@ (8019e28 <prvAddNewTaskToReadyList+0x94>)
 8019d9e:	6813      	ldr	r3, [r2, #0]
 8019da0:	3301      	adds	r3, #1
 8019da2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019da4:	4b21      	ldr	r3, [pc, #132]	@ (8019e2c <prvAddNewTaskToReadyList+0x98>)
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	b15b      	cbz	r3, 8019dc2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8019daa:	4b21      	ldr	r3, [pc, #132]	@ (8019e30 <prvAddNewTaskToReadyList+0x9c>)
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	b96b      	cbnz	r3, 8019dcc <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019db0:	4b1e      	ldr	r3, [pc, #120]	@ (8019e2c <prvAddNewTaskToReadyList+0x98>)
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019db6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019db8:	429a      	cmp	r2, r3
 8019dba:	d807      	bhi.n	8019dcc <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8019dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8019e2c <prvAddNewTaskToReadyList+0x98>)
 8019dbe:	601c      	str	r4, [r3, #0]
 8019dc0:	e004      	b.n	8019dcc <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8019dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8019e2c <prvAddNewTaskToReadyList+0x98>)
 8019dc4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019dc6:	6813      	ldr	r3, [r2, #0]
 8019dc8:	2b01      	cmp	r3, #1
 8019dca:	d029      	beq.n	8019e20 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8019dcc:	4a19      	ldr	r2, [pc, #100]	@ (8019e34 <prvAddNewTaskToReadyList+0xa0>)
 8019dce:	6813      	ldr	r3, [r2, #0]
 8019dd0:	3301      	adds	r3, #1
 8019dd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019dd4:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8019dd6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019dd8:	4b17      	ldr	r3, [pc, #92]	@ (8019e38 <prvAddNewTaskToReadyList+0xa4>)
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	4298      	cmp	r0, r3
 8019dde:	d901      	bls.n	8019de4 <prvAddNewTaskToReadyList+0x50>
 8019de0:	4b15      	ldr	r3, [pc, #84]	@ (8019e38 <prvAddNewTaskToReadyList+0xa4>)
 8019de2:	6018      	str	r0, [r3, #0]
 8019de4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019de8:	1d21      	adds	r1, r4, #4
 8019dea:	4b14      	ldr	r3, [pc, #80]	@ (8019e3c <prvAddNewTaskToReadyList+0xa8>)
 8019dec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019df0:	f7ff f8ee 	bl	8018fd0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8019df4:	f000 ff98 	bl	801ad28 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8019df8:	4b0d      	ldr	r3, [pc, #52]	@ (8019e30 <prvAddNewTaskToReadyList+0x9c>)
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	b17b      	cbz	r3, 8019e1e <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8019e2c <prvAddNewTaskToReadyList+0x98>)
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019e04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019e06:	429a      	cmp	r2, r3
 8019e08:	d209      	bcs.n	8019e1e <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8019e0a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019e12:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019e16:	f3bf 8f4f 	dsb	sy
 8019e1a:	f3bf 8f6f 	isb	sy
}
 8019e1e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8019e20:	f7ff ff84 	bl	8019d2c <prvInitialiseTaskLists>
 8019e24:	e7d2      	b.n	8019dcc <prvAddNewTaskToReadyList+0x38>
 8019e26:	bf00      	nop
 8019e28:	20003734 	.word	0x20003734
 8019e2c:	20003c08 	.word	0x20003c08
 8019e30:	20003728 	.word	0x20003728
 8019e34:	20003718 	.word	0x20003718
 8019e38:	2000372c 	.word	0x2000372c
 8019e3c:	200037a8 	.word	0x200037a8

08019e40 <prvDeleteTCB>:
	{
 8019e40:	b510      	push	{r4, lr}
 8019e42:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8019e44:	3058      	adds	r0, #88	@ 0x58
 8019e46:	f014 faf5 	bl	802e434 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019e4a:	f894 317d 	ldrb.w	r3, [r4, #381]	@ 0x17d
 8019e4e:	b163      	cbz	r3, 8019e6a <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019e50:	2b01      	cmp	r3, #1
 8019e52:	d011      	beq.n	8019e78 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019e54:	2b02      	cmp	r3, #2
 8019e56:	d00e      	beq.n	8019e76 <prvDeleteTCB+0x36>
 8019e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e5c:	f383 8811 	msr	BASEPRI, r3
 8019e60:	f3bf 8f6f 	isb	sy
 8019e64:	f3bf 8f4f 	dsb	sy
 8019e68:	e7fe      	b.n	8019e68 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8019e6a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019e6c:	f001 f976 	bl	801b15c <vPortFree>
				vPortFree( pxTCB );
 8019e70:	4620      	mov	r0, r4
 8019e72:	f001 f973 	bl	801b15c <vPortFree>
	}
 8019e76:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8019e78:	4620      	mov	r0, r4
 8019e7a:	f001 f96f 	bl	801b15c <vPortFree>
 8019e7e:	e7fa      	b.n	8019e76 <prvDeleteTCB+0x36>

08019e80 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019e80:	4b0f      	ldr	r3, [pc, #60]	@ (8019ec0 <prvCheckTasksWaitingTermination+0x40>)
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	b1d3      	cbz	r3, 8019ebc <prvCheckTasksWaitingTermination+0x3c>
{
 8019e86:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8019e88:	f000 ff2c 	bl	801ace4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8019ec4 <prvCheckTasksWaitingTermination+0x44>)
 8019e8e:	68db      	ldr	r3, [r3, #12]
 8019e90:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019e92:	1d20      	adds	r0, r4, #4
 8019e94:	f7ff f8c0 	bl	8019018 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019e98:	4a0b      	ldr	r2, [pc, #44]	@ (8019ec8 <prvCheckTasksWaitingTermination+0x48>)
 8019e9a:	6813      	ldr	r3, [r2, #0]
 8019e9c:	3b01      	subs	r3, #1
 8019e9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019ea0:	4a07      	ldr	r2, [pc, #28]	@ (8019ec0 <prvCheckTasksWaitingTermination+0x40>)
 8019ea2:	6813      	ldr	r3, [r2, #0]
 8019ea4:	3b01      	subs	r3, #1
 8019ea6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8019ea8:	f000 ff3e 	bl	801ad28 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8019eac:	4620      	mov	r0, r4
 8019eae:	f7ff ffc7 	bl	8019e40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019eb2:	4b03      	ldr	r3, [pc, #12]	@ (8019ec0 <prvCheckTasksWaitingTermination+0x40>)
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d1e6      	bne.n	8019e88 <prvCheckTasksWaitingTermination+0x8>
}
 8019eba:	bd10      	pop	{r4, pc}
 8019ebc:	4770      	bx	lr
 8019ebe:	bf00      	nop
 8019ec0:	2000374c 	.word	0x2000374c
 8019ec4:	20003750 	.word	0x20003750
 8019ec8:	20003734 	.word	0x20003734

08019ecc <prvIdleTask>:
{
 8019ecc:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8019ece:	f7ff ffd7 	bl	8019e80 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019ed2:	4b07      	ldr	r3, [pc, #28]	@ (8019ef0 <prvIdleTask+0x24>)
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	2b01      	cmp	r3, #1
 8019ed8:	d9f9      	bls.n	8019ece <prvIdleTask+0x2>
				taskYIELD();
 8019eda:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019ee2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019ee6:	f3bf 8f4f 	dsb	sy
 8019eea:	f3bf 8f6f 	isb	sy
 8019eee:	e7ee      	b.n	8019ece <prvIdleTask+0x2>
 8019ef0:	200037a8 	.word	0x200037a8

08019ef4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019ef4:	b570      	push	{r4, r5, r6, lr}
 8019ef6:	4604      	mov	r4, r0
 8019ef8:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019efa:	4b17      	ldr	r3, [pc, #92]	@ (8019f58 <prvAddCurrentTaskToDelayedList+0x64>)
 8019efc:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019efe:	4b17      	ldr	r3, [pc, #92]	@ (8019f5c <prvAddCurrentTaskToDelayedList+0x68>)
 8019f00:	6818      	ldr	r0, [r3, #0]
 8019f02:	3004      	adds	r0, #4
 8019f04:	f7ff f888 	bl	8019018 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019f08:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8019f0c:	d00d      	beq.n	8019f2a <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019f0e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019f10:	4b12      	ldr	r3, [pc, #72]	@ (8019f5c <prvAddCurrentTaskToDelayedList+0x68>)
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8019f16:	42a6      	cmp	r6, r4
 8019f18:	d910      	bls.n	8019f3c <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019f1a:	4b11      	ldr	r3, [pc, #68]	@ (8019f60 <prvAddCurrentTaskToDelayedList+0x6c>)
 8019f1c:	6818      	ldr	r0, [r3, #0]
 8019f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8019f5c <prvAddCurrentTaskToDelayedList+0x68>)
 8019f20:	6819      	ldr	r1, [r3, #0]
 8019f22:	3104      	adds	r1, #4
 8019f24:	f7ff f85f 	bl	8018fe6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019f28:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019f2a:	2d00      	cmp	r5, #0
 8019f2c:	d0ef      	beq.n	8019f0e <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8019f5c <prvAddCurrentTaskToDelayedList+0x68>)
 8019f30:	6819      	ldr	r1, [r3, #0]
 8019f32:	3104      	adds	r1, #4
 8019f34:	480b      	ldr	r0, [pc, #44]	@ (8019f64 <prvAddCurrentTaskToDelayedList+0x70>)
 8019f36:	f7ff f84b 	bl	8018fd0 <vListInsertEnd>
 8019f3a:	e7f5      	b.n	8019f28 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8019f68 <prvAddCurrentTaskToDelayedList+0x74>)
 8019f3e:	6818      	ldr	r0, [r3, #0]
 8019f40:	4b06      	ldr	r3, [pc, #24]	@ (8019f5c <prvAddCurrentTaskToDelayedList+0x68>)
 8019f42:	6819      	ldr	r1, [r3, #0]
 8019f44:	3104      	adds	r1, #4
 8019f46:	f7ff f84e 	bl	8018fe6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019f4a:	4b08      	ldr	r3, [pc, #32]	@ (8019f6c <prvAddCurrentTaskToDelayedList+0x78>)
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	42a3      	cmp	r3, r4
 8019f50:	d9ea      	bls.n	8019f28 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8019f52:	4b06      	ldr	r3, [pc, #24]	@ (8019f6c <prvAddCurrentTaskToDelayedList+0x78>)
 8019f54:	601c      	str	r4, [r3, #0]
}
 8019f56:	e7e7      	b.n	8019f28 <prvAddCurrentTaskToDelayedList+0x34>
 8019f58:	20003730 	.word	0x20003730
 8019f5c:	20003c08 	.word	0x20003c08
 8019f60:	20003778 	.word	0x20003778
 8019f64:	20003738 	.word	0x20003738
 8019f68:	2000377c 	.word	0x2000377c
 8019f6c:	20003714 	.word	0x20003714

08019f70 <xTaskCreateStatic>:
	{
 8019f70:	b530      	push	{r4, r5, lr}
 8019f72:	b087      	sub	sp, #28
 8019f74:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8019f76:	b18c      	cbz	r4, 8019f9c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8019f78:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019f7a:	b1c5      	cbz	r5, 8019fae <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8019f7c:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 8019f80:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019f82:	9d04      	ldr	r5, [sp, #16]
 8019f84:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 8019f88:	d01a      	beq.n	8019fc0 <xTaskCreateStatic+0x50>
 8019f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f8e:	f383 8811 	msr	BASEPRI, r3
 8019f92:	f3bf 8f6f 	isb	sy
 8019f96:	f3bf 8f4f 	dsb	sy
 8019f9a:	e7fe      	b.n	8019f9a <xTaskCreateStatic+0x2a>
 8019f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fa0:	f383 8811 	msr	BASEPRI, r3
 8019fa4:	f3bf 8f6f 	isb	sy
 8019fa8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8019fac:	e7fe      	b.n	8019fac <xTaskCreateStatic+0x3c>
 8019fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fb2:	f383 8811 	msr	BASEPRI, r3
 8019fb6:	f3bf 8f6f 	isb	sy
 8019fba:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8019fbe:	e7fe      	b.n	8019fbe <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019fc0:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019fc2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019fc4:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019fc6:	2402      	movs	r4, #2
 8019fc8:	f885 417d 	strb.w	r4, [r5, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019fcc:	2400      	movs	r4, #0
 8019fce:	9403      	str	r4, [sp, #12]
 8019fd0:	9502      	str	r5, [sp, #8]
 8019fd2:	ac05      	add	r4, sp, #20
 8019fd4:	9401      	str	r4, [sp, #4]
 8019fd6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019fd8:	9400      	str	r4, [sp, #0]
 8019fda:	f7ff fe25 	bl	8019c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019fde:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8019fe0:	f7ff fed8 	bl	8019d94 <prvAddNewTaskToReadyList>
	}
 8019fe4:	9805      	ldr	r0, [sp, #20]
 8019fe6:	b007      	add	sp, #28
 8019fe8:	bd30      	pop	{r4, r5, pc}

08019fea <xTaskCreate>:
	{
 8019fea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019fee:	b085      	sub	sp, #20
 8019ff0:	4607      	mov	r7, r0
 8019ff2:	4688      	mov	r8, r1
 8019ff4:	4614      	mov	r4, r2
 8019ff6:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019ff8:	0090      	lsls	r0, r2, #2
 8019ffa:	f001 f82d 	bl	801b058 <pvPortMalloc>
			if( pxStack != NULL )
 8019ffe:	b310      	cbz	r0, 801a046 <xTaskCreate+0x5c>
 801a000:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a002:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801a006:	f001 f827 	bl	801b058 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801a00a:	4605      	mov	r5, r0
 801a00c:	b1a8      	cbz	r0, 801a03a <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 801a00e:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a012:	2300      	movs	r3, #0
 801a014:	f880 317d 	strb.w	r3, [r0, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a018:	9303      	str	r3, [sp, #12]
 801a01a:	9002      	str	r0, [sp, #8]
 801a01c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a01e:	9301      	str	r3, [sp, #4]
 801a020:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a022:	9300      	str	r3, [sp, #0]
 801a024:	4633      	mov	r3, r6
 801a026:	4622      	mov	r2, r4
 801a028:	4641      	mov	r1, r8
 801a02a:	4638      	mov	r0, r7
 801a02c:	f7ff fdfc 	bl	8019c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a030:	4628      	mov	r0, r5
 801a032:	f7ff feaf 	bl	8019d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a036:	2001      	movs	r0, #1
 801a038:	e007      	b.n	801a04a <xTaskCreate+0x60>
					vPortFree( pxStack );
 801a03a:	4648      	mov	r0, r9
 801a03c:	f001 f88e 	bl	801b15c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a044:	e001      	b.n	801a04a <xTaskCreate+0x60>
 801a046:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 801a04a:	b005      	add	sp, #20
 801a04c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a050 <vTaskStartScheduler>:
{
 801a050:	b510      	push	{r4, lr}
 801a052:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a054:	2400      	movs	r4, #0
 801a056:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a058:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801a05a:	aa07      	add	r2, sp, #28
 801a05c:	a906      	add	r1, sp, #24
 801a05e:	a805      	add	r0, sp, #20
 801a060:	f7fe ff90 	bl	8018f84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801a064:	9b05      	ldr	r3, [sp, #20]
 801a066:	9302      	str	r3, [sp, #8]
 801a068:	9b06      	ldr	r3, [sp, #24]
 801a06a:	9301      	str	r3, [sp, #4]
 801a06c:	9400      	str	r4, [sp, #0]
 801a06e:	4623      	mov	r3, r4
 801a070:	9a07      	ldr	r2, [sp, #28]
 801a072:	491a      	ldr	r1, [pc, #104]	@ (801a0dc <vTaskStartScheduler+0x8c>)
 801a074:	481a      	ldr	r0, [pc, #104]	@ (801a0e0 <vTaskStartScheduler+0x90>)
 801a076:	f7ff ff7b 	bl	8019f70 <xTaskCreateStatic>
 801a07a:	4b1a      	ldr	r3, [pc, #104]	@ (801a0e4 <vTaskStartScheduler+0x94>)
 801a07c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 801a07e:	b1e8      	cbz	r0, 801a0bc <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 801a080:	f000 fc0c 	bl	801a89c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 801a084:	2801      	cmp	r0, #1
 801a086:	d11a      	bne.n	801a0be <vTaskStartScheduler+0x6e>
 801a088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a08c:	f383 8811 	msr	BASEPRI, r3
 801a090:	f3bf 8f6f 	isb	sy
 801a094:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a098:	4b13      	ldr	r3, [pc, #76]	@ (801a0e8 <vTaskStartScheduler+0x98>)
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	3358      	adds	r3, #88	@ 0x58
 801a09e:	4a13      	ldr	r2, [pc, #76]	@ (801a0ec <vTaskStartScheduler+0x9c>)
 801a0a0:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 801a0a2:	4b13      	ldr	r3, [pc, #76]	@ (801a0f0 <vTaskStartScheduler+0xa0>)
 801a0a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a0a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a0aa:	4b12      	ldr	r3, [pc, #72]	@ (801a0f4 <vTaskStartScheduler+0xa4>)
 801a0ac:	2201      	movs	r2, #1
 801a0ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a0b0:	4b11      	ldr	r3, [pc, #68]	@ (801a0f8 <vTaskStartScheduler+0xa8>)
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 801a0b6:	f000 feaf 	bl	801ae18 <xPortStartScheduler>
 801a0ba:	e003      	b.n	801a0c4 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 801a0bc:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a0be:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801a0c2:	d001      	beq.n	801a0c8 <vTaskStartScheduler+0x78>
}
 801a0c4:	b008      	add	sp, #32
 801a0c6:	bd10      	pop	{r4, pc}
 801a0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a0cc:	f383 8811 	msr	BASEPRI, r3
 801a0d0:	f3bf 8f6f 	isb	sy
 801a0d4:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a0d8:	e7fe      	b.n	801a0d8 <vTaskStartScheduler+0x88>
 801a0da:	bf00      	nop
 801a0dc:	08039900 	.word	0x08039900
 801a0e0:	08019ecd 	.word	0x08019ecd
 801a0e4:	20003710 	.word	0x20003710
 801a0e8:	20003c08 	.word	0x20003c08
 801a0ec:	200002d8 	.word	0x200002d8
 801a0f0:	20003714 	.word	0x20003714
 801a0f4:	20003728 	.word	0x20003728
 801a0f8:	20003730 	.word	0x20003730

0801a0fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 801a0fc:	4a02      	ldr	r2, [pc, #8]	@ (801a108 <vTaskSuspendAll+0xc>)
 801a0fe:	6813      	ldr	r3, [r2, #0]
 801a100:	3301      	adds	r3, #1
 801a102:	6013      	str	r3, [r2, #0]
}
 801a104:	4770      	bx	lr
 801a106:	bf00      	nop
 801a108:	2000370c 	.word	0x2000370c

0801a10c <xTaskGetTickCount>:
		xTicks = xTickCount;
 801a10c:	4b01      	ldr	r3, [pc, #4]	@ (801a114 <xTaskGetTickCount+0x8>)
 801a10e:	6818      	ldr	r0, [r3, #0]
}
 801a110:	4770      	bx	lr
 801a112:	bf00      	nop
 801a114:	20003730 	.word	0x20003730

0801a118 <xTaskIncrementTick>:
{
 801a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a11a:	4b3a      	ldr	r3, [pc, #232]	@ (801a204 <xTaskIncrementTick+0xec>)
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d169      	bne.n	801a1f6 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a122:	4b39      	ldr	r3, [pc, #228]	@ (801a208 <xTaskIncrementTick+0xf0>)
 801a124:	681d      	ldr	r5, [r3, #0]
 801a126:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 801a128:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a12a:	b9c5      	cbnz	r5, 801a15e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 801a12c:	4b37      	ldr	r3, [pc, #220]	@ (801a20c <xTaskIncrementTick+0xf4>)
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	b143      	cbz	r3, 801a146 <xTaskIncrementTick+0x2e>
 801a134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a138:	f383 8811 	msr	BASEPRI, r3
 801a13c:	f3bf 8f6f 	isb	sy
 801a140:	f3bf 8f4f 	dsb	sy
 801a144:	e7fe      	b.n	801a144 <xTaskIncrementTick+0x2c>
 801a146:	4a31      	ldr	r2, [pc, #196]	@ (801a20c <xTaskIncrementTick+0xf4>)
 801a148:	6811      	ldr	r1, [r2, #0]
 801a14a:	4b31      	ldr	r3, [pc, #196]	@ (801a210 <xTaskIncrementTick+0xf8>)
 801a14c:	6818      	ldr	r0, [r3, #0]
 801a14e:	6010      	str	r0, [r2, #0]
 801a150:	6019      	str	r1, [r3, #0]
 801a152:	4a30      	ldr	r2, [pc, #192]	@ (801a214 <xTaskIncrementTick+0xfc>)
 801a154:	6813      	ldr	r3, [r2, #0]
 801a156:	3301      	adds	r3, #1
 801a158:	6013      	str	r3, [r2, #0]
 801a15a:	f7ff fd4f 	bl	8019bfc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a15e:	4b2e      	ldr	r3, [pc, #184]	@ (801a218 <xTaskIncrementTick+0x100>)
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	42ab      	cmp	r3, r5
 801a164:	d93d      	bls.n	801a1e2 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 801a166:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a168:	4b2c      	ldr	r3, [pc, #176]	@ (801a21c <xTaskIncrementTick+0x104>)
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a16e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a172:	009a      	lsls	r2, r3, #2
 801a174:	4b2a      	ldr	r3, [pc, #168]	@ (801a220 <xTaskIncrementTick+0x108>)
 801a176:	589b      	ldr	r3, [r3, r2]
 801a178:	2b01      	cmp	r3, #1
 801a17a:	d900      	bls.n	801a17e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 801a17c:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 801a17e:	4b29      	ldr	r3, [pc, #164]	@ (801a224 <xTaskIncrementTick+0x10c>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	2b00      	cmp	r3, #0
 801a184:	d03c      	beq.n	801a200 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 801a186:	2701      	movs	r7, #1
	return xSwitchRequired;
 801a188:	e03a      	b.n	801a200 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 801a18a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a18c:	4b1f      	ldr	r3, [pc, #124]	@ (801a20c <xTaskIncrementTick+0xf4>)
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	b343      	cbz	r3, 801a1e6 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a194:	4b1d      	ldr	r3, [pc, #116]	@ (801a20c <xTaskIncrementTick+0xf4>)
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	68db      	ldr	r3, [r3, #12]
 801a19a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a19c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 801a19e:	429d      	cmp	r5, r3
 801a1a0:	d326      	bcc.n	801a1f0 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a1a2:	1d26      	adds	r6, r4, #4
 801a1a4:	4630      	mov	r0, r6
 801a1a6:	f7fe ff37 	bl	8019018 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a1aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a1ac:	b11b      	cbz	r3, 801a1b6 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a1ae:	f104 0018 	add.w	r0, r4, #24
 801a1b2:	f7fe ff31 	bl	8019018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a1b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801a1b8:	4a1b      	ldr	r2, [pc, #108]	@ (801a228 <xTaskIncrementTick+0x110>)
 801a1ba:	6812      	ldr	r2, [r2, #0]
 801a1bc:	4293      	cmp	r3, r2
 801a1be:	d901      	bls.n	801a1c4 <xTaskIncrementTick+0xac>
 801a1c0:	4a19      	ldr	r2, [pc, #100]	@ (801a228 <xTaskIncrementTick+0x110>)
 801a1c2:	6013      	str	r3, [r2, #0]
 801a1c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a1c8:	009a      	lsls	r2, r3, #2
 801a1ca:	4631      	mov	r1, r6
 801a1cc:	4814      	ldr	r0, [pc, #80]	@ (801a220 <xTaskIncrementTick+0x108>)
 801a1ce:	4410      	add	r0, r2
 801a1d0:	f7fe fefe 	bl	8018fd0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a1d4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a1d6:	4b11      	ldr	r3, [pc, #68]	@ (801a21c <xTaskIncrementTick+0x104>)
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a1dc:	429a      	cmp	r2, r3
 801a1de:	d2d4      	bcs.n	801a18a <xTaskIncrementTick+0x72>
 801a1e0:	e7d4      	b.n	801a18c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 801a1e2:	2700      	movs	r7, #0
 801a1e4:	e7d2      	b.n	801a18c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a1e6:	4b0c      	ldr	r3, [pc, #48]	@ (801a218 <xTaskIncrementTick+0x100>)
 801a1e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a1ec:	601a      	str	r2, [r3, #0]
					break;
 801a1ee:	e7bb      	b.n	801a168 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 801a1f0:	4a09      	ldr	r2, [pc, #36]	@ (801a218 <xTaskIncrementTick+0x100>)
 801a1f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a1f4:	e7b8      	b.n	801a168 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 801a1f6:	4a0d      	ldr	r2, [pc, #52]	@ (801a22c <xTaskIncrementTick+0x114>)
 801a1f8:	6813      	ldr	r3, [r2, #0]
 801a1fa:	3301      	adds	r3, #1
 801a1fc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 801a1fe:	2700      	movs	r7, #0
}
 801a200:	4638      	mov	r0, r7
 801a202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a204:	2000370c 	.word	0x2000370c
 801a208:	20003730 	.word	0x20003730
 801a20c:	2000377c 	.word	0x2000377c
 801a210:	20003778 	.word	0x20003778
 801a214:	2000371c 	.word	0x2000371c
 801a218:	20003714 	.word	0x20003714
 801a21c:	20003c08 	.word	0x20003c08
 801a220:	200037a8 	.word	0x200037a8
 801a224:	20003720 	.word	0x20003720
 801a228:	2000372c 	.word	0x2000372c
 801a22c:	20003724 	.word	0x20003724

0801a230 <xTaskResumeAll>:
{
 801a230:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 801a232:	4b35      	ldr	r3, [pc, #212]	@ (801a308 <xTaskResumeAll+0xd8>)
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	b943      	cbnz	r3, 801a24a <xTaskResumeAll+0x1a>
 801a238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a23c:	f383 8811 	msr	BASEPRI, r3
 801a240:	f3bf 8f6f 	isb	sy
 801a244:	f3bf 8f4f 	dsb	sy
 801a248:	e7fe      	b.n	801a248 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 801a24a:	f000 fd4b 	bl	801ace4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801a24e:	4b2e      	ldr	r3, [pc, #184]	@ (801a308 <xTaskResumeAll+0xd8>)
 801a250:	681a      	ldr	r2, [r3, #0]
 801a252:	3a01      	subs	r2, #1
 801a254:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d14f      	bne.n	801a2fc <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a25c:	4b2b      	ldr	r3, [pc, #172]	@ (801a30c <xTaskResumeAll+0xdc>)
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	b90b      	cbnz	r3, 801a266 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 801a262:	2400      	movs	r4, #0
 801a264:	e04b      	b.n	801a2fe <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 801a266:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a268:	4b29      	ldr	r3, [pc, #164]	@ (801a310 <xTaskResumeAll+0xe0>)
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	b31b      	cbz	r3, 801a2b6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a26e:	4b28      	ldr	r3, [pc, #160]	@ (801a310 <xTaskResumeAll+0xe0>)
 801a270:	68db      	ldr	r3, [r3, #12]
 801a272:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a274:	f104 0018 	add.w	r0, r4, #24
 801a278:	f7fe fece 	bl	8019018 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a27c:	1d25      	adds	r5, r4, #4
 801a27e:	4628      	mov	r0, r5
 801a280:	f7fe feca 	bl	8019018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a284:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a286:	4b23      	ldr	r3, [pc, #140]	@ (801a314 <xTaskResumeAll+0xe4>)
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	4298      	cmp	r0, r3
 801a28c:	d901      	bls.n	801a292 <xTaskResumeAll+0x62>
 801a28e:	4b21      	ldr	r3, [pc, #132]	@ (801a314 <xTaskResumeAll+0xe4>)
 801a290:	6018      	str	r0, [r3, #0]
 801a292:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a296:	4629      	mov	r1, r5
 801a298:	4b1f      	ldr	r3, [pc, #124]	@ (801a318 <xTaskResumeAll+0xe8>)
 801a29a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a29e:	f7fe fe97 	bl	8018fd0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a2a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a2a4:	4b1d      	ldr	r3, [pc, #116]	@ (801a31c <xTaskResumeAll+0xec>)
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a2aa:	429a      	cmp	r2, r3
 801a2ac:	d3dc      	bcc.n	801a268 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 801a2ae:	4b1c      	ldr	r3, [pc, #112]	@ (801a320 <xTaskResumeAll+0xf0>)
 801a2b0:	2201      	movs	r2, #1
 801a2b2:	601a      	str	r2, [r3, #0]
 801a2b4:	e7d8      	b.n	801a268 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 801a2b6:	b10c      	cbz	r4, 801a2bc <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 801a2b8:	f7ff fca0 	bl	8019bfc <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801a2bc:	4b19      	ldr	r3, [pc, #100]	@ (801a324 <xTaskResumeAll+0xf4>)
 801a2be:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 801a2c0:	b984      	cbnz	r4, 801a2e4 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 801a2c2:	4b17      	ldr	r3, [pc, #92]	@ (801a320 <xTaskResumeAll+0xf0>)
 801a2c4:	681c      	ldr	r4, [r3, #0]
 801a2c6:	b1d4      	cbz	r4, 801a2fe <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 801a2c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a2cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a2d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a2d4:	f3bf 8f4f 	dsb	sy
 801a2d8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801a2dc:	2401      	movs	r4, #1
 801a2de:	e00e      	b.n	801a2fe <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 801a2e0:	3c01      	subs	r4, #1
 801a2e2:	d007      	beq.n	801a2f4 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 801a2e4:	f7ff ff18 	bl	801a118 <xTaskIncrementTick>
 801a2e8:	2800      	cmp	r0, #0
 801a2ea:	d0f9      	beq.n	801a2e0 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 801a2ec:	4b0c      	ldr	r3, [pc, #48]	@ (801a320 <xTaskResumeAll+0xf0>)
 801a2ee:	2201      	movs	r2, #1
 801a2f0:	601a      	str	r2, [r3, #0]
 801a2f2:	e7f5      	b.n	801a2e0 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 801a2f4:	4b0b      	ldr	r3, [pc, #44]	@ (801a324 <xTaskResumeAll+0xf4>)
 801a2f6:	2200      	movs	r2, #0
 801a2f8:	601a      	str	r2, [r3, #0]
 801a2fa:	e7e2      	b.n	801a2c2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 801a2fc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801a2fe:	f000 fd13 	bl	801ad28 <vPortExitCritical>
}
 801a302:	4620      	mov	r0, r4
 801a304:	bd38      	pop	{r3, r4, r5, pc}
 801a306:	bf00      	nop
 801a308:	2000370c 	.word	0x2000370c
 801a30c:	20003734 	.word	0x20003734
 801a310:	20003764 	.word	0x20003764
 801a314:	2000372c 	.word	0x2000372c
 801a318:	200037a8 	.word	0x200037a8
 801a31c:	20003c08 	.word	0x20003c08
 801a320:	20003720 	.word	0x20003720
 801a324:	20003724 	.word	0x20003724

0801a328 <vTaskDelay>:
	{
 801a328:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a32a:	b1a8      	cbz	r0, 801a358 <vTaskDelay+0x30>
 801a32c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 801a32e:	4b10      	ldr	r3, [pc, #64]	@ (801a370 <vTaskDelay+0x48>)
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	b143      	cbz	r3, 801a346 <vTaskDelay+0x1e>
 801a334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a338:	f383 8811 	msr	BASEPRI, r3
 801a33c:	f3bf 8f6f 	isb	sy
 801a340:	f3bf 8f4f 	dsb	sy
 801a344:	e7fe      	b.n	801a344 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 801a346:	f7ff fed9 	bl	801a0fc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a34a:	2100      	movs	r1, #0
 801a34c:	4620      	mov	r0, r4
 801a34e:	f7ff fdd1 	bl	8019ef4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 801a352:	f7ff ff6d 	bl	801a230 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801a356:	b948      	cbnz	r0, 801a36c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 801a358:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a35c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a360:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a364:	f3bf 8f4f 	dsb	sy
 801a368:	f3bf 8f6f 	isb	sy
	}
 801a36c:	bd10      	pop	{r4, pc}
 801a36e:	bf00      	nop
 801a370:	2000370c 	.word	0x2000370c

0801a374 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a374:	4b22      	ldr	r3, [pc, #136]	@ (801a400 <vTaskSwitchContext+0x8c>)
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	b11b      	cbz	r3, 801a382 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 801a37a:	4b22      	ldr	r3, [pc, #136]	@ (801a404 <vTaskSwitchContext+0x90>)
 801a37c:	2201      	movs	r2, #1
 801a37e:	601a      	str	r2, [r3, #0]
 801a380:	4770      	bx	lr
		xYieldPending = pdFALSE;
 801a382:	4b20      	ldr	r3, [pc, #128]	@ (801a404 <vTaskSwitchContext+0x90>)
 801a384:	2200      	movs	r2, #0
 801a386:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a388:	4b1f      	ldr	r3, [pc, #124]	@ (801a408 <vTaskSwitchContext+0x94>)
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801a390:	008a      	lsls	r2, r1, #2
 801a392:	491e      	ldr	r1, [pc, #120]	@ (801a40c <vTaskSwitchContext+0x98>)
 801a394:	588a      	ldr	r2, [r1, r2]
 801a396:	b95a      	cbnz	r2, 801a3b0 <vTaskSwitchContext+0x3c>
 801a398:	b10b      	cbz	r3, 801a39e <vTaskSwitchContext+0x2a>
 801a39a:	3b01      	subs	r3, #1
 801a39c:	e7f6      	b.n	801a38c <vTaskSwitchContext+0x18>
 801a39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a3a2:	f383 8811 	msr	BASEPRI, r3
 801a3a6:	f3bf 8f6f 	isb	sy
 801a3aa:	f3bf 8f4f 	dsb	sy
 801a3ae:	e7fe      	b.n	801a3ae <vTaskSwitchContext+0x3a>
 801a3b0:	4608      	mov	r0, r1
 801a3b2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801a3b6:	008a      	lsls	r2, r1, #2
 801a3b8:	4402      	add	r2, r0
 801a3ba:	6851      	ldr	r1, [r2, #4]
 801a3bc:	6849      	ldr	r1, [r1, #4]
 801a3be:	6051      	str	r1, [r2, #4]
 801a3c0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801a3c4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801a3c8:	3208      	adds	r2, #8
 801a3ca:	4402      	add	r2, r0
 801a3cc:	4291      	cmp	r1, r2
 801a3ce:	d00f      	beq.n	801a3f0 <vTaskSwitchContext+0x7c>
 801a3d0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801a3d4:	0091      	lsls	r1, r2, #2
 801a3d6:	4a0d      	ldr	r2, [pc, #52]	@ (801a40c <vTaskSwitchContext+0x98>)
 801a3d8:	440a      	add	r2, r1
 801a3da:	6852      	ldr	r2, [r2, #4]
 801a3dc:	68d1      	ldr	r1, [r2, #12]
 801a3de:	4a0c      	ldr	r2, [pc, #48]	@ (801a410 <vTaskSwitchContext+0x9c>)
 801a3e0:	6011      	str	r1, [r2, #0]
 801a3e2:	4909      	ldr	r1, [pc, #36]	@ (801a408 <vTaskSwitchContext+0x94>)
 801a3e4:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a3e6:	6813      	ldr	r3, [r2, #0]
 801a3e8:	3358      	adds	r3, #88	@ 0x58
 801a3ea:	4a0a      	ldr	r2, [pc, #40]	@ (801a414 <vTaskSwitchContext+0xa0>)
 801a3ec:	6013      	str	r3, [r2, #0]
}
 801a3ee:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a3f0:	6848      	ldr	r0, [r1, #4]
 801a3f2:	4662      	mov	r2, ip
 801a3f4:	0091      	lsls	r1, r2, #2
 801a3f6:	4a05      	ldr	r2, [pc, #20]	@ (801a40c <vTaskSwitchContext+0x98>)
 801a3f8:	440a      	add	r2, r1
 801a3fa:	6050      	str	r0, [r2, #4]
 801a3fc:	e7e8      	b.n	801a3d0 <vTaskSwitchContext+0x5c>
 801a3fe:	bf00      	nop
 801a400:	2000370c 	.word	0x2000370c
 801a404:	20003720 	.word	0x20003720
 801a408:	2000372c 	.word	0x2000372c
 801a40c:	200037a8 	.word	0x200037a8
 801a410:	20003c08 	.word	0x20003c08
 801a414:	200002d8 	.word	0x200002d8

0801a418 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 801a418:	b158      	cbz	r0, 801a432 <vTaskPlaceOnEventList+0x1a>
{
 801a41a:	b510      	push	{r4, lr}
 801a41c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a41e:	4a09      	ldr	r2, [pc, #36]	@ (801a444 <vTaskPlaceOnEventList+0x2c>)
 801a420:	6811      	ldr	r1, [r2, #0]
 801a422:	3118      	adds	r1, #24
 801a424:	f7fe fddf 	bl	8018fe6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a428:	2101      	movs	r1, #1
 801a42a:	4620      	mov	r0, r4
 801a42c:	f7ff fd62 	bl	8019ef4 <prvAddCurrentTaskToDelayedList>
}
 801a430:	bd10      	pop	{r4, pc}
 801a432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a436:	f383 8811 	msr	BASEPRI, r3
 801a43a:	f3bf 8f6f 	isb	sy
 801a43e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 801a442:	e7fe      	b.n	801a442 <vTaskPlaceOnEventList+0x2a>
 801a444:	20003c08 	.word	0x20003c08

0801a448 <vTaskPlaceOnEventListRestricted>:
	{
 801a448:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 801a44a:	b170      	cbz	r0, 801a46a <vTaskPlaceOnEventListRestricted+0x22>
 801a44c:	460d      	mov	r5, r1
 801a44e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a450:	4a0a      	ldr	r2, [pc, #40]	@ (801a47c <vTaskPlaceOnEventListRestricted+0x34>)
 801a452:	6811      	ldr	r1, [r2, #0]
 801a454:	3118      	adds	r1, #24
 801a456:	f7fe fdbb 	bl	8018fd0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 801a45a:	b10c      	cbz	r4, 801a460 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 801a45c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a460:	4621      	mov	r1, r4
 801a462:	4628      	mov	r0, r5
 801a464:	f7ff fd46 	bl	8019ef4 <prvAddCurrentTaskToDelayedList>
	}
 801a468:	bd38      	pop	{r3, r4, r5, pc}
 801a46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a46e:	f383 8811 	msr	BASEPRI, r3
 801a472:	f3bf 8f6f 	isb	sy
 801a476:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 801a47a:	e7fe      	b.n	801a47a <vTaskPlaceOnEventListRestricted+0x32>
 801a47c:	20003c08 	.word	0x20003c08

0801a480 <xTaskRemoveFromEventList>:
{
 801a480:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a482:	68c3      	ldr	r3, [r0, #12]
 801a484:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801a486:	b324      	cbz	r4, 801a4d2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a488:	f104 0518 	add.w	r5, r4, #24
 801a48c:	4628      	mov	r0, r5
 801a48e:	f7fe fdc3 	bl	8019018 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a492:	4b18      	ldr	r3, [pc, #96]	@ (801a4f4 <xTaskRemoveFromEventList+0x74>)
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	bb2b      	cbnz	r3, 801a4e4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a498:	1d25      	adds	r5, r4, #4
 801a49a:	4628      	mov	r0, r5
 801a49c:	f7fe fdbc 	bl	8019018 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a4a0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a4a2:	4b15      	ldr	r3, [pc, #84]	@ (801a4f8 <xTaskRemoveFromEventList+0x78>)
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	4298      	cmp	r0, r3
 801a4a8:	d901      	bls.n	801a4ae <xTaskRemoveFromEventList+0x2e>
 801a4aa:	4b13      	ldr	r3, [pc, #76]	@ (801a4f8 <xTaskRemoveFromEventList+0x78>)
 801a4ac:	6018      	str	r0, [r3, #0]
 801a4ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a4b2:	4629      	mov	r1, r5
 801a4b4:	4b11      	ldr	r3, [pc, #68]	@ (801a4fc <xTaskRemoveFromEventList+0x7c>)
 801a4b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a4ba:	f7fe fd89 	bl	8018fd0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a4be:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a4c0:	4b0f      	ldr	r3, [pc, #60]	@ (801a500 <xTaskRemoveFromEventList+0x80>)
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a4c6:	429a      	cmp	r2, r3
 801a4c8:	d911      	bls.n	801a4ee <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 801a4ca:	2001      	movs	r0, #1
 801a4cc:	4b0d      	ldr	r3, [pc, #52]	@ (801a504 <xTaskRemoveFromEventList+0x84>)
 801a4ce:	6018      	str	r0, [r3, #0]
}
 801a4d0:	bd38      	pop	{r3, r4, r5, pc}
 801a4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4d6:	f383 8811 	msr	BASEPRI, r3
 801a4da:	f3bf 8f6f 	isb	sy
 801a4de:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 801a4e2:	e7fe      	b.n	801a4e2 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a4e4:	4629      	mov	r1, r5
 801a4e6:	4808      	ldr	r0, [pc, #32]	@ (801a508 <xTaskRemoveFromEventList+0x88>)
 801a4e8:	f7fe fd72 	bl	8018fd0 <vListInsertEnd>
 801a4ec:	e7e7      	b.n	801a4be <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 801a4ee:	2000      	movs	r0, #0
	return xReturn;
 801a4f0:	e7ee      	b.n	801a4d0 <xTaskRemoveFromEventList+0x50>
 801a4f2:	bf00      	nop
 801a4f4:	2000370c 	.word	0x2000370c
 801a4f8:	2000372c 	.word	0x2000372c
 801a4fc:	200037a8 	.word	0x200037a8
 801a500:	20003c08 	.word	0x20003c08
 801a504:	20003720 	.word	0x20003720
 801a508:	20003764 	.word	0x20003764

0801a50c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a50c:	4b03      	ldr	r3, [pc, #12]	@ (801a51c <vTaskInternalSetTimeOutState+0x10>)
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a512:	4b03      	ldr	r3, [pc, #12]	@ (801a520 <vTaskInternalSetTimeOutState+0x14>)
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	6043      	str	r3, [r0, #4]
}
 801a518:	4770      	bx	lr
 801a51a:	bf00      	nop
 801a51c:	2000371c 	.word	0x2000371c
 801a520:	20003730 	.word	0x20003730

0801a524 <xTaskCheckForTimeOut>:
{
 801a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 801a526:	b1c8      	cbz	r0, 801a55c <xTaskCheckForTimeOut+0x38>
 801a528:	460c      	mov	r4, r1
 801a52a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 801a52c:	b1f9      	cbz	r1, 801a56e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 801a52e:	f000 fbd9 	bl	801ace4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801a532:	4b1b      	ldr	r3, [pc, #108]	@ (801a5a0 <xTaskCheckForTimeOut+0x7c>)
 801a534:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a536:	686b      	ldr	r3, [r5, #4]
 801a538:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 801a53a:	6822      	ldr	r2, [r4, #0]
 801a53c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801a540:	d026      	beq.n	801a590 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a542:	4e18      	ldr	r6, [pc, #96]	@ (801a5a4 <xTaskCheckForTimeOut+0x80>)
 801a544:	6836      	ldr	r6, [r6, #0]
 801a546:	682f      	ldr	r7, [r5, #0]
 801a548:	42b7      	cmp	r7, r6
 801a54a:	d001      	beq.n	801a550 <xTaskCheckForTimeOut+0x2c>
 801a54c:	428b      	cmp	r3, r1
 801a54e:	d924      	bls.n	801a59a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a550:	4282      	cmp	r2, r0
 801a552:	d815      	bhi.n	801a580 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 801a554:	2300      	movs	r3, #0
 801a556:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 801a558:	2401      	movs	r4, #1
 801a55a:	e01a      	b.n	801a592 <xTaskCheckForTimeOut+0x6e>
 801a55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a560:	f383 8811 	msr	BASEPRI, r3
 801a564:	f3bf 8f6f 	isb	sy
 801a568:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 801a56c:	e7fe      	b.n	801a56c <xTaskCheckForTimeOut+0x48>
 801a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a572:	f383 8811 	msr	BASEPRI, r3
 801a576:	f3bf 8f6f 	isb	sy
 801a57a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 801a57e:	e7fe      	b.n	801a57e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 801a580:	1a5b      	subs	r3, r3, r1
 801a582:	4413      	add	r3, r2
 801a584:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a586:	4628      	mov	r0, r5
 801a588:	f7ff ffc0 	bl	801a50c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a58c:	2400      	movs	r4, #0
 801a58e:	e000      	b.n	801a592 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 801a590:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801a592:	f000 fbc9 	bl	801ad28 <vPortExitCritical>
}
 801a596:	4620      	mov	r0, r4
 801a598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 801a59a:	2401      	movs	r4, #1
 801a59c:	e7f9      	b.n	801a592 <xTaskCheckForTimeOut+0x6e>
 801a59e:	bf00      	nop
 801a5a0:	20003730 	.word	0x20003730
 801a5a4:	2000371c 	.word	0x2000371c

0801a5a8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801a5a8:	4b01      	ldr	r3, [pc, #4]	@ (801a5b0 <vTaskMissedYield+0x8>)
 801a5aa:	2201      	movs	r2, #1
 801a5ac:	601a      	str	r2, [r3, #0]
}
 801a5ae:	4770      	bx	lr
 801a5b0:	20003720 	.word	0x20003720

0801a5b4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 801a5b4:	4b01      	ldr	r3, [pc, #4]	@ (801a5bc <xTaskGetCurrentTaskHandle+0x8>)
 801a5b6:	6818      	ldr	r0, [r3, #0]
	}
 801a5b8:	4770      	bx	lr
 801a5ba:	bf00      	nop
 801a5bc:	20003c08 	.word	0x20003c08

0801a5c0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801a5c0:	4b05      	ldr	r3, [pc, #20]	@ (801a5d8 <xTaskGetSchedulerState+0x18>)
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	b133      	cbz	r3, 801a5d4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a5c6:	4b05      	ldr	r3, [pc, #20]	@ (801a5dc <xTaskGetSchedulerState+0x1c>)
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	b10b      	cbz	r3, 801a5d0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 801a5cc:	2000      	movs	r0, #0
	}
 801a5ce:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 801a5d0:	2002      	movs	r0, #2
 801a5d2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a5d4:	2001      	movs	r0, #1
 801a5d6:	4770      	bx	lr
 801a5d8:	20003728 	.word	0x20003728
 801a5dc:	2000370c 	.word	0x2000370c

0801a5e0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 801a5e0:	2800      	cmp	r0, #0
 801a5e2:	d03e      	beq.n	801a662 <xTaskPriorityInherit+0x82>
	{
 801a5e4:	b538      	push	{r3, r4, r5, lr}
 801a5e6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a5e8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a5ea:	4a20      	ldr	r2, [pc, #128]	@ (801a66c <xTaskPriorityInherit+0x8c>)
 801a5ec:	6812      	ldr	r2, [r2, #0]
 801a5ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801a5f0:	4293      	cmp	r3, r2
 801a5f2:	d22e      	bcs.n	801a652 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a5f4:	6982      	ldr	r2, [r0, #24]
 801a5f6:	2a00      	cmp	r2, #0
 801a5f8:	db05      	blt.n	801a606 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a5fa:	4a1c      	ldr	r2, [pc, #112]	@ (801a66c <xTaskPriorityInherit+0x8c>)
 801a5fc:	6812      	ldr	r2, [r2, #0]
 801a5fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801a600:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801a604:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a606:	6961      	ldr	r1, [r4, #20]
 801a608:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a60c:	4a18      	ldr	r2, [pc, #96]	@ (801a670 <xTaskPriorityInherit+0x90>)
 801a60e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a612:	4299      	cmp	r1, r3
 801a614:	d005      	beq.n	801a622 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a616:	4b15      	ldr	r3, [pc, #84]	@ (801a66c <xTaskPriorityInherit+0x8c>)
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a61c:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 801a61e:	2001      	movs	r0, #1
	}
 801a620:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a622:	1d25      	adds	r5, r4, #4
 801a624:	4628      	mov	r0, r5
 801a626:	f7fe fcf7 	bl	8019018 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a62a:	4b10      	ldr	r3, [pc, #64]	@ (801a66c <xTaskPriorityInherit+0x8c>)
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801a630:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a632:	4b10      	ldr	r3, [pc, #64]	@ (801a674 <xTaskPriorityInherit+0x94>)
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	4298      	cmp	r0, r3
 801a638:	d901      	bls.n	801a63e <xTaskPriorityInherit+0x5e>
 801a63a:	4b0e      	ldr	r3, [pc, #56]	@ (801a674 <xTaskPriorityInherit+0x94>)
 801a63c:	6018      	str	r0, [r3, #0]
 801a63e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a642:	4629      	mov	r1, r5
 801a644:	4b0a      	ldr	r3, [pc, #40]	@ (801a670 <xTaskPriorityInherit+0x90>)
 801a646:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a64a:	f7fe fcc1 	bl	8018fd0 <vListInsertEnd>
				xReturn = pdTRUE;
 801a64e:	2001      	movs	r0, #1
 801a650:	e7e6      	b.n	801a620 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a652:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801a654:	4b05      	ldr	r3, [pc, #20]	@ (801a66c <xTaskPriorityInherit+0x8c>)
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a65a:	429a      	cmp	r2, r3
 801a65c:	d303      	bcc.n	801a666 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 801a65e:	2000      	movs	r0, #0
 801a660:	e7de      	b.n	801a620 <xTaskPriorityInherit+0x40>
 801a662:	2000      	movs	r0, #0
	}
 801a664:	4770      	bx	lr
					xReturn = pdTRUE;
 801a666:	2001      	movs	r0, #1
		return xReturn;
 801a668:	e7da      	b.n	801a620 <xTaskPriorityInherit+0x40>
 801a66a:	bf00      	nop
 801a66c:	20003c08 	.word	0x20003c08
 801a670:	200037a8 	.word	0x200037a8
 801a674:	2000372c 	.word	0x2000372c

0801a678 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 801a678:	2800      	cmp	r0, #0
 801a67a:	d03b      	beq.n	801a6f4 <xTaskPriorityDisinherit+0x7c>
	{
 801a67c:	b538      	push	{r3, r4, r5, lr}
 801a67e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 801a680:	4b1e      	ldr	r3, [pc, #120]	@ (801a6fc <xTaskPriorityDisinherit+0x84>)
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	4283      	cmp	r3, r0
 801a686:	d008      	beq.n	801a69a <xTaskPriorityDisinherit+0x22>
 801a688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a68c:	f383 8811 	msr	BASEPRI, r3
 801a690:	f3bf 8f6f 	isb	sy
 801a694:	f3bf 8f4f 	dsb	sy
 801a698:	e7fe      	b.n	801a698 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801a69a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801a69c:	b943      	cbnz	r3, 801a6b0 <xTaskPriorityDisinherit+0x38>
 801a69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a6a2:	f383 8811 	msr	BASEPRI, r3
 801a6a6:	f3bf 8f6f 	isb	sy
 801a6aa:	f3bf 8f4f 	dsb	sy
 801a6ae:	e7fe      	b.n	801a6ae <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 801a6b0:	3b01      	subs	r3, #1
 801a6b2:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a6b4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801a6b6:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801a6b8:	4291      	cmp	r1, r2
 801a6ba:	d01d      	beq.n	801a6f8 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a6bc:	b10b      	cbz	r3, 801a6c2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 801a6be:	2000      	movs	r0, #0
	}
 801a6c0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a6c2:	1d05      	adds	r5, r0, #4
 801a6c4:	4628      	mov	r0, r5
 801a6c6:	f7fe fca7 	bl	8019018 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a6ca:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801a6cc:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a6ce:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 801a6d2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801a6d4:	4b0a      	ldr	r3, [pc, #40]	@ (801a700 <xTaskPriorityDisinherit+0x88>)
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	4298      	cmp	r0, r3
 801a6da:	d901      	bls.n	801a6e0 <xTaskPriorityDisinherit+0x68>
 801a6dc:	4b08      	ldr	r3, [pc, #32]	@ (801a700 <xTaskPriorityDisinherit+0x88>)
 801a6de:	6018      	str	r0, [r3, #0]
 801a6e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a6e4:	4629      	mov	r1, r5
 801a6e6:	4b07      	ldr	r3, [pc, #28]	@ (801a704 <xTaskPriorityDisinherit+0x8c>)
 801a6e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a6ec:	f7fe fc70 	bl	8018fd0 <vListInsertEnd>
					xReturn = pdTRUE;
 801a6f0:	2001      	movs	r0, #1
 801a6f2:	e7e5      	b.n	801a6c0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 801a6f4:	2000      	movs	r0, #0
	}
 801a6f6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 801a6f8:	2000      	movs	r0, #0
 801a6fa:	e7e1      	b.n	801a6c0 <xTaskPriorityDisinherit+0x48>
 801a6fc:	20003c08 	.word	0x20003c08
 801a700:	2000372c 	.word	0x2000372c
 801a704:	200037a8 	.word	0x200037a8

0801a708 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 801a708:	2800      	cmp	r0, #0
 801a70a:	d046      	beq.n	801a79a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 801a70c:	b538      	push	{r3, r4, r5, lr}
 801a70e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 801a710:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801a712:	b943      	cbnz	r3, 801a726 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801a714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a718:	f383 8811 	msr	BASEPRI, r3
 801a71c:	f3bf 8f6f 	isb	sy
 801a720:	f3bf 8f4f 	dsb	sy
 801a724:	e7fe      	b.n	801a724 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a726:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801a728:	428a      	cmp	r2, r1
 801a72a:	d200      	bcs.n	801a72e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a72c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a72e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a730:	4291      	cmp	r1, r2
 801a732:	d001      	beq.n	801a738 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a734:	2b01      	cmp	r3, #1
 801a736:	d000      	beq.n	801a73a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 801a738:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 801a73a:	4b18      	ldr	r3, [pc, #96]	@ (801a79c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	42a3      	cmp	r3, r4
 801a740:	d022      	beq.n	801a788 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 801a742:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a744:	69a3      	ldr	r3, [r4, #24]
 801a746:	2b00      	cmp	r3, #0
 801a748:	db02      	blt.n	801a750 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a74a:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801a74e:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a750:	6962      	ldr	r2, [r4, #20]
 801a752:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801a756:	4b12      	ldr	r3, [pc, #72]	@ (801a7a0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801a758:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a75c:	429a      	cmp	r2, r3
 801a75e:	d1eb      	bne.n	801a738 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a760:	1d25      	adds	r5, r4, #4
 801a762:	4628      	mov	r0, r5
 801a764:	f7fe fc58 	bl	8019018 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801a768:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a76a:	4b0e      	ldr	r3, [pc, #56]	@ (801a7a4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	4298      	cmp	r0, r3
 801a770:	d901      	bls.n	801a776 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 801a772:	4b0c      	ldr	r3, [pc, #48]	@ (801a7a4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801a774:	6018      	str	r0, [r3, #0]
 801a776:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a77a:	4629      	mov	r1, r5
 801a77c:	4b08      	ldr	r3, [pc, #32]	@ (801a7a0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801a77e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a782:	f7fe fc25 	bl	8018fd0 <vListInsertEnd>
	}
 801a786:	e7d7      	b.n	801a738 <vTaskPriorityDisinheritAfterTimeout+0x30>
 801a788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a78c:	f383 8811 	msr	BASEPRI, r3
 801a790:	f3bf 8f6f 	isb	sy
 801a794:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 801a798:	e7fe      	b.n	801a798 <vTaskPriorityDisinheritAfterTimeout+0x90>
 801a79a:	4770      	bx	lr
 801a79c:	20003c08 	.word	0x20003c08
 801a7a0:	200037a8 	.word	0x200037a8
 801a7a4:	2000372c 	.word	0x2000372c

0801a7a8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801a7a8:	4b05      	ldr	r3, [pc, #20]	@ (801a7c0 <pvTaskIncrementMutexHeldCount+0x18>)
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	b123      	cbz	r3, 801a7b8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 801a7ae:	4b04      	ldr	r3, [pc, #16]	@ (801a7c0 <pvTaskIncrementMutexHeldCount+0x18>)
 801a7b0:	681a      	ldr	r2, [r3, #0]
 801a7b2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801a7b4:	3301      	adds	r3, #1
 801a7b6:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 801a7b8:	4b01      	ldr	r3, [pc, #4]	@ (801a7c0 <pvTaskIncrementMutexHeldCount+0x18>)
 801a7ba:	6818      	ldr	r0, [r3, #0]
	}
 801a7bc:	4770      	bx	lr
 801a7be:	bf00      	nop
 801a7c0:	20003c08 	.word	0x20003c08

0801a7c4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a7c4:	4b06      	ldr	r3, [pc, #24]	@ (801a7e0 <prvGetNextExpireTime+0x1c>)
 801a7c6:	681a      	ldr	r2, [r3, #0]
 801a7c8:	6813      	ldr	r3, [r2, #0]
 801a7ca:	b92b      	cbnz	r3, 801a7d8 <prvGetNextExpireTime+0x14>
 801a7cc:	2301      	movs	r3, #1
 801a7ce:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 801a7d0:	b923      	cbnz	r3, 801a7dc <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a7d2:	68d3      	ldr	r3, [r2, #12]
 801a7d4:	6818      	ldr	r0, [r3, #0]
 801a7d6:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a7d8:	2300      	movs	r3, #0
 801a7da:	e7f8      	b.n	801a7ce <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801a7dc:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 801a7de:	4770      	bx	lr
 801a7e0:	20003d0c 	.word	0x20003d0c

0801a7e4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801a7e4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801a7e6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a7e8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801a7ea:	4291      	cmp	r1, r2
 801a7ec:	d80c      	bhi.n	801a808 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a7ee:	1ad2      	subs	r2, r2, r3
 801a7f0:	6983      	ldr	r3, [r0, #24]
 801a7f2:	429a      	cmp	r2, r3
 801a7f4:	d301      	bcc.n	801a7fa <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801a7f6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 801a7f8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801a7fa:	1d01      	adds	r1, r0, #4
 801a7fc:	4b09      	ldr	r3, [pc, #36]	@ (801a824 <prvInsertTimerInActiveList+0x40>)
 801a7fe:	6818      	ldr	r0, [r3, #0]
 801a800:	f7fe fbf1 	bl	8018fe6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801a804:	2000      	movs	r0, #0
 801a806:	e7f7      	b.n	801a7f8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801a808:	429a      	cmp	r2, r3
 801a80a:	d201      	bcs.n	801a810 <prvInsertTimerInActiveList+0x2c>
 801a80c:	4299      	cmp	r1, r3
 801a80e:	d206      	bcs.n	801a81e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a810:	1d01      	adds	r1, r0, #4
 801a812:	4b05      	ldr	r3, [pc, #20]	@ (801a828 <prvInsertTimerInActiveList+0x44>)
 801a814:	6818      	ldr	r0, [r3, #0]
 801a816:	f7fe fbe6 	bl	8018fe6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801a81a:	2000      	movs	r0, #0
 801a81c:	e7ec      	b.n	801a7f8 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 801a81e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801a820:	e7ea      	b.n	801a7f8 <prvInsertTimerInActiveList+0x14>
 801a822:	bf00      	nop
 801a824:	20003d08 	.word	0x20003d08
 801a828:	20003d0c 	.word	0x20003d0c

0801a82c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a82c:	b530      	push	{r4, r5, lr}
 801a82e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a830:	f000 fa58 	bl	801ace4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a834:	4b11      	ldr	r3, [pc, #68]	@ (801a87c <prvCheckForValidListAndQueue+0x50>)
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	b11b      	cbz	r3, 801a842 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a83a:	f000 fa75 	bl	801ad28 <vPortExitCritical>
}
 801a83e:	b003      	add	sp, #12
 801a840:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 801a842:	4d0f      	ldr	r5, [pc, #60]	@ (801a880 <prvCheckForValidListAndQueue+0x54>)
 801a844:	4628      	mov	r0, r5
 801a846:	f7fe fbb5 	bl	8018fb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a84a:	4c0e      	ldr	r4, [pc, #56]	@ (801a884 <prvCheckForValidListAndQueue+0x58>)
 801a84c:	4620      	mov	r0, r4
 801a84e:	f7fe fbb1 	bl	8018fb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a852:	4b0d      	ldr	r3, [pc, #52]	@ (801a888 <prvCheckForValidListAndQueue+0x5c>)
 801a854:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a856:	4b0d      	ldr	r3, [pc, #52]	@ (801a88c <prvCheckForValidListAndQueue+0x60>)
 801a858:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a85a:	2300      	movs	r3, #0
 801a85c:	9300      	str	r3, [sp, #0]
 801a85e:	4b0c      	ldr	r3, [pc, #48]	@ (801a890 <prvCheckForValidListAndQueue+0x64>)
 801a860:	4a0c      	ldr	r2, [pc, #48]	@ (801a894 <prvCheckForValidListAndQueue+0x68>)
 801a862:	2110      	movs	r1, #16
 801a864:	200a      	movs	r0, #10
 801a866:	f7fe fce5 	bl	8019234 <xQueueGenericCreateStatic>
 801a86a:	4b04      	ldr	r3, [pc, #16]	@ (801a87c <prvCheckForValidListAndQueue+0x50>)
 801a86c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 801a86e:	2800      	cmp	r0, #0
 801a870:	d0e3      	beq.n	801a83a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a872:	4909      	ldr	r1, [pc, #36]	@ (801a898 <prvCheckForValidListAndQueue+0x6c>)
 801a874:	f7ff f984 	bl	8019b80 <vQueueAddToRegistry>
 801a878:	e7df      	b.n	801a83a <prvCheckForValidListAndQueue+0xe>
 801a87a:	bf00      	nop
 801a87c:	20003d04 	.word	0x20003d04
 801a880:	20003d24 	.word	0x20003d24
 801a884:	20003d10 	.word	0x20003d10
 801a888:	20003d0c 	.word	0x20003d0c
 801a88c:	20003d08 	.word	0x20003d08
 801a890:	20003c0c 	.word	0x20003c0c
 801a894:	20003c5c 	.word	0x20003c5c
 801a898:	08039908 	.word	0x08039908

0801a89c <xTimerCreateTimerTask>:
{
 801a89c:	b510      	push	{r4, lr}
 801a89e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801a8a0:	f7ff ffc4 	bl	801a82c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801a8a4:	4b12      	ldr	r3, [pc, #72]	@ (801a8f0 <xTimerCreateTimerTask+0x54>)
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	b1cb      	cbz	r3, 801a8de <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a8aa:	2400      	movs	r4, #0
 801a8ac:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a8ae:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a8b0:	aa07      	add	r2, sp, #28
 801a8b2:	a906      	add	r1, sp, #24
 801a8b4:	a805      	add	r0, sp, #20
 801a8b6:	f7fe fb71 	bl	8018f9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a8ba:	9b05      	ldr	r3, [sp, #20]
 801a8bc:	9302      	str	r3, [sp, #8]
 801a8be:	9b06      	ldr	r3, [sp, #24]
 801a8c0:	9301      	str	r3, [sp, #4]
 801a8c2:	2302      	movs	r3, #2
 801a8c4:	9300      	str	r3, [sp, #0]
 801a8c6:	4623      	mov	r3, r4
 801a8c8:	9a07      	ldr	r2, [sp, #28]
 801a8ca:	490a      	ldr	r1, [pc, #40]	@ (801a8f4 <xTimerCreateTimerTask+0x58>)
 801a8cc:	480a      	ldr	r0, [pc, #40]	@ (801a8f8 <xTimerCreateTimerTask+0x5c>)
 801a8ce:	f7ff fb4f 	bl	8019f70 <xTaskCreateStatic>
 801a8d2:	4b0a      	ldr	r3, [pc, #40]	@ (801a8fc <xTimerCreateTimerTask+0x60>)
 801a8d4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801a8d6:	b110      	cbz	r0, 801a8de <xTimerCreateTimerTask+0x42>
}
 801a8d8:	2001      	movs	r0, #1
 801a8da:	b008      	add	sp, #32
 801a8dc:	bd10      	pop	{r4, pc}
 801a8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8e2:	f383 8811 	msr	BASEPRI, r3
 801a8e6:	f3bf 8f6f 	isb	sy
 801a8ea:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801a8ee:	e7fe      	b.n	801a8ee <xTimerCreateTimerTask+0x52>
 801a8f0:	20003d04 	.word	0x20003d04
 801a8f4:	08039910 	.word	0x08039910
 801a8f8:	0801ac01 	.word	0x0801ac01
 801a8fc:	20003d00 	.word	0x20003d00

0801a900 <xTimerGenericCommand>:
	configASSERT( xTimer );
 801a900:	b1b8      	cbz	r0, 801a932 <xTimerGenericCommand+0x32>
 801a902:	469c      	mov	ip, r3
 801a904:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 801a906:	4818      	ldr	r0, [pc, #96]	@ (801a968 <xTimerGenericCommand+0x68>)
 801a908:	6800      	ldr	r0, [r0, #0]
 801a90a:	b358      	cbz	r0, 801a964 <xTimerGenericCommand+0x64>
{
 801a90c:	b500      	push	{lr}
 801a90e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 801a910:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a912:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a914:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a916:	2905      	cmp	r1, #5
 801a918:	dc1c      	bgt.n	801a954 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a91a:	f7ff fe51 	bl	801a5c0 <xTaskGetSchedulerState>
 801a91e:	2802      	cmp	r0, #2
 801a920:	d010      	beq.n	801a944 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801a922:	2300      	movs	r3, #0
 801a924:	461a      	mov	r2, r3
 801a926:	4669      	mov	r1, sp
 801a928:	480f      	ldr	r0, [pc, #60]	@ (801a968 <xTimerGenericCommand+0x68>)
 801a92a:	6800      	ldr	r0, [r0, #0]
 801a92c:	f7fe fcf0 	bl	8019310 <xQueueGenericSend>
 801a930:	e015      	b.n	801a95e <xTimerGenericCommand+0x5e>
 801a932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a936:	f383 8811 	msr	BASEPRI, r3
 801a93a:	f3bf 8f6f 	isb	sy
 801a93e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 801a942:	e7fe      	b.n	801a942 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a944:	2300      	movs	r3, #0
 801a946:	9a06      	ldr	r2, [sp, #24]
 801a948:	4669      	mov	r1, sp
 801a94a:	4807      	ldr	r0, [pc, #28]	@ (801a968 <xTimerGenericCommand+0x68>)
 801a94c:	6800      	ldr	r0, [r0, #0]
 801a94e:	f7fe fcdf 	bl	8019310 <xQueueGenericSend>
 801a952:	e004      	b.n	801a95e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a954:	2300      	movs	r3, #0
 801a956:	4662      	mov	r2, ip
 801a958:	4669      	mov	r1, sp
 801a95a:	f7fe fde3 	bl	8019524 <xQueueGenericSendFromISR>
}
 801a95e:	b005      	add	sp, #20
 801a960:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 801a964:	2000      	movs	r0, #0
}
 801a966:	4770      	bx	lr
 801a968:	20003d04 	.word	0x20003d04

0801a96c <prvSwitchTimerLists>:
{
 801a96c:	b570      	push	{r4, r5, r6, lr}
 801a96e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a970:	4b1b      	ldr	r3, [pc, #108]	@ (801a9e0 <prvSwitchTimerLists+0x74>)
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	681a      	ldr	r2, [r3, #0]
 801a976:	b362      	cbz	r2, 801a9d2 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a978:	68db      	ldr	r3, [r3, #12]
 801a97a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a97c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a97e:	1d25      	adds	r5, r4, #4
 801a980:	4628      	mov	r0, r5
 801a982:	f7fe fb49 	bl	8019018 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a986:	6a23      	ldr	r3, [r4, #32]
 801a988:	4620      	mov	r0, r4
 801a98a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a98c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a990:	f013 0f04 	tst.w	r3, #4
 801a994:	d0ec      	beq.n	801a970 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a996:	69a3      	ldr	r3, [r4, #24]
 801a998:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 801a99a:	429e      	cmp	r6, r3
 801a99c:	d207      	bcs.n	801a9ae <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a99e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a9a0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a9a2:	4629      	mov	r1, r5
 801a9a4:	4b0e      	ldr	r3, [pc, #56]	@ (801a9e0 <prvSwitchTimerLists+0x74>)
 801a9a6:	6818      	ldr	r0, [r3, #0]
 801a9a8:	f7fe fb1d 	bl	8018fe6 <vListInsert>
 801a9ac:	e7e0      	b.n	801a970 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a9ae:	2100      	movs	r1, #0
 801a9b0:	9100      	str	r1, [sp, #0]
 801a9b2:	460b      	mov	r3, r1
 801a9b4:	4632      	mov	r2, r6
 801a9b6:	4620      	mov	r0, r4
 801a9b8:	f7ff ffa2 	bl	801a900 <xTimerGenericCommand>
				configASSERT( xResult );
 801a9bc:	2800      	cmp	r0, #0
 801a9be:	d1d7      	bne.n	801a970 <prvSwitchTimerLists+0x4>
 801a9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9c4:	f383 8811 	msr	BASEPRI, r3
 801a9c8:	f3bf 8f6f 	isb	sy
 801a9cc:	f3bf 8f4f 	dsb	sy
 801a9d0:	e7fe      	b.n	801a9d0 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 801a9d2:	4a04      	ldr	r2, [pc, #16]	@ (801a9e4 <prvSwitchTimerLists+0x78>)
 801a9d4:	6810      	ldr	r0, [r2, #0]
 801a9d6:	4902      	ldr	r1, [pc, #8]	@ (801a9e0 <prvSwitchTimerLists+0x74>)
 801a9d8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801a9da:	6013      	str	r3, [r2, #0]
}
 801a9dc:	b002      	add	sp, #8
 801a9de:	bd70      	pop	{r4, r5, r6, pc}
 801a9e0:	20003d0c 	.word	0x20003d0c
 801a9e4:	20003d08 	.word	0x20003d08

0801a9e8 <prvSampleTimeNow>:
{
 801a9e8:	b538      	push	{r3, r4, r5, lr}
 801a9ea:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 801a9ec:	f7ff fb8e 	bl	801a10c <xTaskGetTickCount>
 801a9f0:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 801a9f2:	4b07      	ldr	r3, [pc, #28]	@ (801aa10 <prvSampleTimeNow+0x28>)
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	4283      	cmp	r3, r0
 801a9f8:	d805      	bhi.n	801aa06 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801a9fa:	2300      	movs	r3, #0
 801a9fc:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801a9fe:	4b04      	ldr	r3, [pc, #16]	@ (801aa10 <prvSampleTimeNow+0x28>)
 801aa00:	601c      	str	r4, [r3, #0]
}
 801aa02:	4620      	mov	r0, r4
 801aa04:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 801aa06:	f7ff ffb1 	bl	801a96c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801aa0a:	2301      	movs	r3, #1
 801aa0c:	602b      	str	r3, [r5, #0]
 801aa0e:	e7f6      	b.n	801a9fe <prvSampleTimeNow+0x16>
 801aa10:	20003cfc 	.word	0x20003cfc

0801aa14 <prvProcessExpiredTimer>:
{
 801aa14:	b570      	push	{r4, r5, r6, lr}
 801aa16:	b082      	sub	sp, #8
 801aa18:	4606      	mov	r6, r0
 801aa1a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aa1c:	4917      	ldr	r1, [pc, #92]	@ (801aa7c <prvProcessExpiredTimer+0x68>)
 801aa1e:	6809      	ldr	r1, [r1, #0]
 801aa20:	68c9      	ldr	r1, [r1, #12]
 801aa22:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801aa24:	1d20      	adds	r0, r4, #4
 801aa26:	f7fe faf7 	bl	8019018 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801aa2a:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 801aa2e:	f01c 0f04 	tst.w	ip, #4
 801aa32:	d108      	bne.n	801aa46 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801aa34:	f02c 0c01 	bic.w	ip, ip, #1
 801aa38:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801aa3c:	6a23      	ldr	r3, [r4, #32]
 801aa3e:	4620      	mov	r0, r4
 801aa40:	4798      	blx	r3
}
 801aa42:	b002      	add	sp, #8
 801aa44:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801aa46:	69a1      	ldr	r1, [r4, #24]
 801aa48:	4633      	mov	r3, r6
 801aa4a:	462a      	mov	r2, r5
 801aa4c:	4431      	add	r1, r6
 801aa4e:	4620      	mov	r0, r4
 801aa50:	f7ff fec8 	bl	801a7e4 <prvInsertTimerInActiveList>
 801aa54:	2800      	cmp	r0, #0
 801aa56:	d0f1      	beq.n	801aa3c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801aa58:	2100      	movs	r1, #0
 801aa5a:	9100      	str	r1, [sp, #0]
 801aa5c:	460b      	mov	r3, r1
 801aa5e:	4632      	mov	r2, r6
 801aa60:	4620      	mov	r0, r4
 801aa62:	f7ff ff4d 	bl	801a900 <xTimerGenericCommand>
			configASSERT( xResult );
 801aa66:	2800      	cmp	r0, #0
 801aa68:	d1e8      	bne.n	801aa3c <prvProcessExpiredTimer+0x28>
 801aa6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa6e:	f383 8811 	msr	BASEPRI, r3
 801aa72:	f3bf 8f6f 	isb	sy
 801aa76:	f3bf 8f4f 	dsb	sy
 801aa7a:	e7fe      	b.n	801aa7a <prvProcessExpiredTimer+0x66>
 801aa7c:	20003d0c 	.word	0x20003d0c

0801aa80 <prvProcessTimerOrBlockTask>:
{
 801aa80:	b570      	push	{r4, r5, r6, lr}
 801aa82:	b082      	sub	sp, #8
 801aa84:	4606      	mov	r6, r0
 801aa86:	460c      	mov	r4, r1
	vTaskSuspendAll();
 801aa88:	f7ff fb38 	bl	801a0fc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801aa8c:	a801      	add	r0, sp, #4
 801aa8e:	f7ff ffab 	bl	801a9e8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801aa92:	9b01      	ldr	r3, [sp, #4]
 801aa94:	bb33      	cbnz	r3, 801aae4 <prvProcessTimerOrBlockTask+0x64>
 801aa96:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801aa98:	b9e4      	cbnz	r4, 801aad4 <prvProcessTimerOrBlockTask+0x54>
 801aa9a:	42b0      	cmp	r0, r6
 801aa9c:	d213      	bcs.n	801aac6 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801aa9e:	4622      	mov	r2, r4
 801aaa0:	1b71      	subs	r1, r6, r5
 801aaa2:	4b12      	ldr	r3, [pc, #72]	@ (801aaec <prvProcessTimerOrBlockTask+0x6c>)
 801aaa4:	6818      	ldr	r0, [r3, #0]
 801aaa6:	f7ff f87f 	bl	8019ba8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801aaaa:	f7ff fbc1 	bl	801a230 <xTaskResumeAll>
 801aaae:	b9d8      	cbnz	r0, 801aae8 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 801aab0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801aab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801aab8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801aabc:	f3bf 8f4f 	dsb	sy
 801aac0:	f3bf 8f6f 	isb	sy
 801aac4:	e010      	b.n	801aae8 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 801aac6:	f7ff fbb3 	bl	801a230 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801aaca:	4629      	mov	r1, r5
 801aacc:	4630      	mov	r0, r6
 801aace:	f7ff ffa1 	bl	801aa14 <prvProcessExpiredTimer>
 801aad2:	e009      	b.n	801aae8 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801aad4:	4a06      	ldr	r2, [pc, #24]	@ (801aaf0 <prvProcessTimerOrBlockTask+0x70>)
 801aad6:	6812      	ldr	r2, [r2, #0]
 801aad8:	6812      	ldr	r2, [r2, #0]
 801aada:	b90a      	cbnz	r2, 801aae0 <prvProcessTimerOrBlockTask+0x60>
 801aadc:	2401      	movs	r4, #1
 801aade:	e7de      	b.n	801aa9e <prvProcessTimerOrBlockTask+0x1e>
 801aae0:	461c      	mov	r4, r3
 801aae2:	e7dc      	b.n	801aa9e <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 801aae4:	f7ff fba4 	bl	801a230 <xTaskResumeAll>
}
 801aae8:	b002      	add	sp, #8
 801aaea:	bd70      	pop	{r4, r5, r6, pc}
 801aaec:	20003d04 	.word	0x20003d04
 801aaf0:	20003d08 	.word	0x20003d08

0801aaf4 <prvProcessReceivedCommands>:
{
 801aaf4:	b510      	push	{r4, lr}
 801aaf6:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801aaf8:	e002      	b.n	801ab00 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801aafa:	9b04      	ldr	r3, [sp, #16]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	da0f      	bge.n	801ab20 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801ab00:	2200      	movs	r2, #0
 801ab02:	a904      	add	r1, sp, #16
 801ab04:	4b3d      	ldr	r3, [pc, #244]	@ (801abfc <prvProcessReceivedCommands+0x108>)
 801ab06:	6818      	ldr	r0, [r3, #0]
 801ab08:	f7fe fd73 	bl	80195f2 <xQueueReceive>
 801ab0c:	2800      	cmp	r0, #0
 801ab0e:	d073      	beq.n	801abf8 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801ab10:	9b04      	ldr	r3, [sp, #16]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	daf1      	bge.n	801aafa <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801ab16:	9907      	ldr	r1, [sp, #28]
 801ab18:	9806      	ldr	r0, [sp, #24]
 801ab1a:	9b05      	ldr	r3, [sp, #20]
 801ab1c:	4798      	blx	r3
 801ab1e:	e7ec      	b.n	801aafa <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801ab20:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801ab22:	6963      	ldr	r3, [r4, #20]
 801ab24:	b113      	cbz	r3, 801ab2c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ab26:	1d20      	adds	r0, r4, #4
 801ab28:	f7fe fa76 	bl	8019018 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801ab2c:	a803      	add	r0, sp, #12
 801ab2e:	f7ff ff5b 	bl	801a9e8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801ab32:	9b04      	ldr	r3, [sp, #16]
 801ab34:	2b09      	cmp	r3, #9
 801ab36:	d8e3      	bhi.n	801ab00 <prvProcessReceivedCommands+0xc>
 801ab38:	e8df f003 	tbb	[pc, r3]
 801ab3c:	30050505 	.word	0x30050505
 801ab40:	05055037 	.word	0x05055037
 801ab44:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801ab46:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801ab4a:	f043 0301 	orr.w	r3, r3, #1
 801ab4e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801ab52:	9b05      	ldr	r3, [sp, #20]
 801ab54:	69a1      	ldr	r1, [r4, #24]
 801ab56:	4602      	mov	r2, r0
 801ab58:	4419      	add	r1, r3
 801ab5a:	4620      	mov	r0, r4
 801ab5c:	f7ff fe42 	bl	801a7e4 <prvInsertTimerInActiveList>
 801ab60:	2800      	cmp	r0, #0
 801ab62:	d0cd      	beq.n	801ab00 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ab64:	6a23      	ldr	r3, [r4, #32]
 801ab66:	4620      	mov	r0, r4
 801ab68:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ab6a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801ab6e:	f013 0f04 	tst.w	r3, #4
 801ab72:	d0c5      	beq.n	801ab00 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801ab74:	69a2      	ldr	r2, [r4, #24]
 801ab76:	2100      	movs	r1, #0
 801ab78:	9100      	str	r1, [sp, #0]
 801ab7a:	460b      	mov	r3, r1
 801ab7c:	9805      	ldr	r0, [sp, #20]
 801ab7e:	4402      	add	r2, r0
 801ab80:	4620      	mov	r0, r4
 801ab82:	f7ff febd 	bl	801a900 <xTimerGenericCommand>
							configASSERT( xResult );
 801ab86:	2800      	cmp	r0, #0
 801ab88:	d1ba      	bne.n	801ab00 <prvProcessReceivedCommands+0xc>
 801ab8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab8e:	f383 8811 	msr	BASEPRI, r3
 801ab92:	f3bf 8f6f 	isb	sy
 801ab96:	f3bf 8f4f 	dsb	sy
 801ab9a:	e7fe      	b.n	801ab9a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ab9c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801aba0:	f023 0301 	bic.w	r3, r3, #1
 801aba4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 801aba8:	e7aa      	b.n	801ab00 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801abaa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801abae:	f043 0301 	orr.w	r3, r3, #1
 801abb2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801abb6:	9905      	ldr	r1, [sp, #20]
 801abb8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801abba:	b131      	cbz	r1, 801abca <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801abbc:	4603      	mov	r3, r0
 801abbe:	4602      	mov	r2, r0
 801abc0:	4401      	add	r1, r0
 801abc2:	4620      	mov	r0, r4
 801abc4:	f7ff fe0e 	bl	801a7e4 <prvInsertTimerInActiveList>
					break;
 801abc8:	e79a      	b.n	801ab00 <prvProcessReceivedCommands+0xc>
 801abca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801abce:	f383 8811 	msr	BASEPRI, r3
 801abd2:	f3bf 8f6f 	isb	sy
 801abd6:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801abda:	e7fe      	b.n	801abda <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801abdc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801abe0:	f013 0f02 	tst.w	r3, #2
 801abe4:	d004      	beq.n	801abf0 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801abe6:	f023 0301 	bic.w	r3, r3, #1
 801abea:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 801abee:	e787      	b.n	801ab00 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 801abf0:	4620      	mov	r0, r4
 801abf2:	f000 fab3 	bl	801b15c <vPortFree>
 801abf6:	e783      	b.n	801ab00 <prvProcessReceivedCommands+0xc>
}
 801abf8:	b008      	add	sp, #32
 801abfa:	bd10      	pop	{r4, pc}
 801abfc:	20003d04 	.word	0x20003d04

0801ac00 <prvTimerTask>:
{
 801ac00:	b500      	push	{lr}
 801ac02:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801ac04:	a801      	add	r0, sp, #4
 801ac06:	f7ff fddd 	bl	801a7c4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801ac0a:	9901      	ldr	r1, [sp, #4]
 801ac0c:	f7ff ff38 	bl	801aa80 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 801ac10:	f7ff ff70 	bl	801aaf4 <prvProcessReceivedCommands>
	for( ;; )
 801ac14:	e7f6      	b.n	801ac04 <prvTimerTask+0x4>
	...

0801ac18 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801ac18:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801ac1e:	4b0d      	ldr	r3, [pc, #52]	@ (801ac54 <prvTaskExitError+0x3c>)
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ac26:	d008      	beq.n	801ac3a <prvTaskExitError+0x22>
 801ac28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ac2c:	f383 8811 	msr	BASEPRI, r3
 801ac30:	f3bf 8f6f 	isb	sy
 801ac34:	f3bf 8f4f 	dsb	sy
 801ac38:	e7fe      	b.n	801ac38 <prvTaskExitError+0x20>
 801ac3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ac3e:	f383 8811 	msr	BASEPRI, r3
 801ac42:	f3bf 8f6f 	isb	sy
 801ac46:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801ac4a:	9b01      	ldr	r3, [sp, #4]
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d0fc      	beq.n	801ac4a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801ac50:	b002      	add	sp, #8
 801ac52:	4770      	bx	lr
 801ac54:	20000114 	.word	0x20000114

0801ac58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801ac58:	4808      	ldr	r0, [pc, #32]	@ (801ac7c <prvPortStartFirstTask+0x24>)
 801ac5a:	6800      	ldr	r0, [r0, #0]
 801ac5c:	6800      	ldr	r0, [r0, #0]
 801ac5e:	f380 8808 	msr	MSP, r0
 801ac62:	f04f 0000 	mov.w	r0, #0
 801ac66:	f380 8814 	msr	CONTROL, r0
 801ac6a:	b662      	cpsie	i
 801ac6c:	b661      	cpsie	f
 801ac6e:	f3bf 8f4f 	dsb	sy
 801ac72:	f3bf 8f6f 	isb	sy
 801ac76:	df00      	svc	0
 801ac78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801ac7a:	0000      	.short	0x0000
 801ac7c:	e000ed08 	.word	0xe000ed08

0801ac80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801ac80:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801ac90 <vPortEnableVFP+0x10>
 801ac84:	6801      	ldr	r1, [r0, #0]
 801ac86:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801ac8a:	6001      	str	r1, [r0, #0]
 801ac8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801ac8e:	0000      	.short	0x0000
 801ac90:	e000ed88 	.word	0xe000ed88

0801ac94 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801ac94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801ac98:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801ac9c:	f021 0101 	bic.w	r1, r1, #1
 801aca0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801aca4:	4b05      	ldr	r3, [pc, #20]	@ (801acbc <pxPortInitialiseStack+0x28>)
 801aca6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801acaa:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801acae:	f06f 0302 	mvn.w	r3, #2
 801acb2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801acb6:	3844      	subs	r0, #68	@ 0x44
 801acb8:	4770      	bx	lr
 801acba:	bf00      	nop
 801acbc:	0801ac19 	.word	0x0801ac19

0801acc0 <SVC_Handler>:
	__asm volatile (
 801acc0:	4b07      	ldr	r3, [pc, #28]	@ (801ace0 <pxCurrentTCBConst2>)
 801acc2:	6819      	ldr	r1, [r3, #0]
 801acc4:	6808      	ldr	r0, [r1, #0]
 801acc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acca:	f380 8809 	msr	PSP, r0
 801acce:	f3bf 8f6f 	isb	sy
 801acd2:	f04f 0000 	mov.w	r0, #0
 801acd6:	f380 8811 	msr	BASEPRI, r0
 801acda:	4770      	bx	lr
 801acdc:	f3af 8000 	nop.w

0801ace0 <pxCurrentTCBConst2>:
 801ace0:	20003c08 	.word	0x20003c08

0801ace4 <vPortEnterCritical>:
 801ace4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ace8:	f383 8811 	msr	BASEPRI, r3
 801acec:	f3bf 8f6f 	isb	sy
 801acf0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 801acf4:	4a0b      	ldr	r2, [pc, #44]	@ (801ad24 <vPortEnterCritical+0x40>)
 801acf6:	6813      	ldr	r3, [r2, #0]
 801acf8:	3301      	adds	r3, #1
 801acfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801acfc:	2b01      	cmp	r3, #1
 801acfe:	d000      	beq.n	801ad02 <vPortEnterCritical+0x1e>
}
 801ad00:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801ad02:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801ad06:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801ad0a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 801ad0e:	d0f7      	beq.n	801ad00 <vPortEnterCritical+0x1c>
 801ad10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad14:	f383 8811 	msr	BASEPRI, r3
 801ad18:	f3bf 8f6f 	isb	sy
 801ad1c:	f3bf 8f4f 	dsb	sy
 801ad20:	e7fe      	b.n	801ad20 <vPortEnterCritical+0x3c>
 801ad22:	bf00      	nop
 801ad24:	20000114 	.word	0x20000114

0801ad28 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 801ad28:	4b09      	ldr	r3, [pc, #36]	@ (801ad50 <vPortExitCritical+0x28>)
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	b943      	cbnz	r3, 801ad40 <vPortExitCritical+0x18>
 801ad2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad32:	f383 8811 	msr	BASEPRI, r3
 801ad36:	f3bf 8f6f 	isb	sy
 801ad3a:	f3bf 8f4f 	dsb	sy
 801ad3e:	e7fe      	b.n	801ad3e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 801ad40:	3b01      	subs	r3, #1
 801ad42:	4a03      	ldr	r2, [pc, #12]	@ (801ad50 <vPortExitCritical+0x28>)
 801ad44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801ad46:	b90b      	cbnz	r3, 801ad4c <vPortExitCritical+0x24>
	__asm volatile
 801ad48:	f383 8811 	msr	BASEPRI, r3
}
 801ad4c:	4770      	bx	lr
 801ad4e:	bf00      	nop
 801ad50:	20000114 	.word	0x20000114
	...

0801ad60 <PendSV_Handler>:
	__asm volatile
 801ad60:	f3ef 8009 	mrs	r0, PSP
 801ad64:	f3bf 8f6f 	isb	sy
 801ad68:	4b15      	ldr	r3, [pc, #84]	@ (801adc0 <pxCurrentTCBConst>)
 801ad6a:	681a      	ldr	r2, [r3, #0]
 801ad6c:	f01e 0f10 	tst.w	lr, #16
 801ad70:	bf08      	it	eq
 801ad72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801ad76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad7a:	6010      	str	r0, [r2, #0]
 801ad7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801ad80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801ad84:	f380 8811 	msr	BASEPRI, r0
 801ad88:	f3bf 8f4f 	dsb	sy
 801ad8c:	f3bf 8f6f 	isb	sy
 801ad90:	f7ff faf0 	bl	801a374 <vTaskSwitchContext>
 801ad94:	f04f 0000 	mov.w	r0, #0
 801ad98:	f380 8811 	msr	BASEPRI, r0
 801ad9c:	bc09      	pop	{r0, r3}
 801ad9e:	6819      	ldr	r1, [r3, #0]
 801ada0:	6808      	ldr	r0, [r1, #0]
 801ada2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ada6:	f01e 0f10 	tst.w	lr, #16
 801adaa:	bf08      	it	eq
 801adac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801adb0:	f380 8809 	msr	PSP, r0
 801adb4:	f3bf 8f6f 	isb	sy
 801adb8:	4770      	bx	lr
 801adba:	bf00      	nop
 801adbc:	f3af 8000 	nop.w

0801adc0 <pxCurrentTCBConst>:
 801adc0:	20003c08 	.word	0x20003c08

0801adc4 <xPortSysTickHandler>:
{
 801adc4:	b508      	push	{r3, lr}
	__asm volatile
 801adc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801adca:	f383 8811 	msr	BASEPRI, r3
 801adce:	f3bf 8f6f 	isb	sy
 801add2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 801add6:	f7ff f99f 	bl	801a118 <xTaskIncrementTick>
 801adda:	b128      	cbz	r0, 801ade8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801addc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801ade0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ade4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 801ade8:	2300      	movs	r3, #0
 801adea:	f383 8811 	msr	BASEPRI, r3
}
 801adee:	bd08      	pop	{r3, pc}

0801adf0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801adf0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 801adf4:	2300      	movs	r3, #0
 801adf6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801adf8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801adfa:	4b05      	ldr	r3, [pc, #20]	@ (801ae10 <vPortSetupTimerInterrupt+0x20>)
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	4905      	ldr	r1, [pc, #20]	@ (801ae14 <vPortSetupTimerInterrupt+0x24>)
 801ae00:	fba1 1303 	umull	r1, r3, r1, r3
 801ae04:	099b      	lsrs	r3, r3, #6
 801ae06:	3b01      	subs	r3, #1
 801ae08:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801ae0a:	2307      	movs	r3, #7
 801ae0c:	6113      	str	r3, [r2, #16]
}
 801ae0e:	4770      	bx	lr
 801ae10:	20000018 	.word	0x20000018
 801ae14:	10624dd3 	.word	0x10624dd3

0801ae18 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801ae18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801ae1c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801ae20:	4b3d      	ldr	r3, [pc, #244]	@ (801af18 <xPortStartScheduler+0x100>)
 801ae22:	429a      	cmp	r2, r3
 801ae24:	d01c      	beq.n	801ae60 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801ae26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801ae2a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801ae2e:	4b3b      	ldr	r3, [pc, #236]	@ (801af1c <xPortStartScheduler+0x104>)
 801ae30:	429a      	cmp	r2, r3
 801ae32:	d01e      	beq.n	801ae72 <xPortStartScheduler+0x5a>
{
 801ae34:	b530      	push	{r4, r5, lr}
 801ae36:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801ae38:	4b39      	ldr	r3, [pc, #228]	@ (801af20 <xPortStartScheduler+0x108>)
 801ae3a:	781a      	ldrb	r2, [r3, #0]
 801ae3c:	b2d2      	uxtb	r2, r2
 801ae3e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801ae40:	22ff      	movs	r2, #255	@ 0xff
 801ae42:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801ae44:	781b      	ldrb	r3, [r3, #0]
 801ae46:	b2db      	uxtb	r3, r3
 801ae48:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801ae4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ae50:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801ae54:	4a33      	ldr	r2, [pc, #204]	@ (801af24 <xPortStartScheduler+0x10c>)
 801ae56:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801ae58:	4b33      	ldr	r3, [pc, #204]	@ (801af28 <xPortStartScheduler+0x110>)
 801ae5a:	2207      	movs	r2, #7
 801ae5c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ae5e:	e01b      	b.n	801ae98 <xPortStartScheduler+0x80>
	__asm volatile
 801ae60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ae64:	f383 8811 	msr	BASEPRI, r3
 801ae68:	f3bf 8f6f 	isb	sy
 801ae6c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801ae70:	e7fe      	b.n	801ae70 <xPortStartScheduler+0x58>
 801ae72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ae76:	f383 8811 	msr	BASEPRI, r3
 801ae7a:	f3bf 8f6f 	isb	sy
 801ae7e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801ae82:	e7fe      	b.n	801ae82 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 801ae84:	4a28      	ldr	r2, [pc, #160]	@ (801af28 <xPortStartScheduler+0x110>)
 801ae86:	6813      	ldr	r3, [r2, #0]
 801ae88:	3b01      	subs	r3, #1
 801ae8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801ae8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ae90:	005b      	lsls	r3, r3, #1
 801ae92:	b2db      	uxtb	r3, r3
 801ae94:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ae98:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ae9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801aea0:	d1f0      	bne.n	801ae84 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801aea2:	4b21      	ldr	r3, [pc, #132]	@ (801af28 <xPortStartScheduler+0x110>)
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	2b03      	cmp	r3, #3
 801aea8:	d008      	beq.n	801aebc <xPortStartScheduler+0xa4>
 801aeaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aeae:	f383 8811 	msr	BASEPRI, r3
 801aeb2:	f3bf 8f6f 	isb	sy
 801aeb6:	f3bf 8f4f 	dsb	sy
 801aeba:	e7fe      	b.n	801aeba <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801aebc:	021b      	lsls	r3, r3, #8
 801aebe:	4a1a      	ldr	r2, [pc, #104]	@ (801af28 <xPortStartScheduler+0x110>)
 801aec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801aec2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801aec6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801aec8:	9b01      	ldr	r3, [sp, #4]
 801aeca:	b2db      	uxtb	r3, r3
 801aecc:	4a14      	ldr	r2, [pc, #80]	@ (801af20 <xPortStartScheduler+0x108>)
 801aece:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801aed0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 801aed4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801aed8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801aedc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801aee0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801aee4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801aee8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 801aeec:	f7ff ff80 	bl	801adf0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801aef0:	2500      	movs	r5, #0
 801aef2:	4b0e      	ldr	r3, [pc, #56]	@ (801af2c <xPortStartScheduler+0x114>)
 801aef4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801aef6:	f7ff fec3 	bl	801ac80 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801aefa:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 801aefe:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801af02:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 801af06:	f7ff fea7 	bl	801ac58 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801af0a:	f7ff fa33 	bl	801a374 <vTaskSwitchContext>
	prvTaskExitError();
 801af0e:	f7ff fe83 	bl	801ac18 <prvTaskExitError>
}
 801af12:	4628      	mov	r0, r5
 801af14:	b003      	add	sp, #12
 801af16:	bd30      	pop	{r4, r5, pc}
 801af18:	410fc271 	.word	0x410fc271
 801af1c:	410fc270 	.word	0x410fc270
 801af20:	e000e400 	.word	0xe000e400
 801af24:	20003d3c 	.word	0x20003d3c
 801af28:	20003d38 	.word	0x20003d38
 801af2c:	20000114 	.word	0x20000114

0801af30 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801af30:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801af34:	2b0f      	cmp	r3, #15
 801af36:	d90f      	bls.n	801af58 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801af38:	4a11      	ldr	r2, [pc, #68]	@ (801af80 <vPortValidateInterruptPriority+0x50>)
 801af3a:	5c9b      	ldrb	r3, [r3, r2]
 801af3c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801af3e:	4a11      	ldr	r2, [pc, #68]	@ (801af84 <vPortValidateInterruptPriority+0x54>)
 801af40:	7812      	ldrb	r2, [r2, #0]
 801af42:	429a      	cmp	r2, r3
 801af44:	d908      	bls.n	801af58 <vPortValidateInterruptPriority+0x28>
 801af46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801af4a:	f383 8811 	msr	BASEPRI, r3
 801af4e:	f3bf 8f6f 	isb	sy
 801af52:	f3bf 8f4f 	dsb	sy
 801af56:	e7fe      	b.n	801af56 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801af58:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801af5c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 801af60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801af64:	4a08      	ldr	r2, [pc, #32]	@ (801af88 <vPortValidateInterruptPriority+0x58>)
 801af66:	6812      	ldr	r2, [r2, #0]
 801af68:	4293      	cmp	r3, r2
 801af6a:	d908      	bls.n	801af7e <vPortValidateInterruptPriority+0x4e>
 801af6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801af70:	f383 8811 	msr	BASEPRI, r3
 801af74:	f3bf 8f6f 	isb	sy
 801af78:	f3bf 8f4f 	dsb	sy
 801af7c:	e7fe      	b.n	801af7c <vPortValidateInterruptPriority+0x4c>
	}
 801af7e:	4770      	bx	lr
 801af80:	e000e3f0 	.word	0xe000e3f0
 801af84:	20003d3c 	.word	0x20003d3c
 801af88:	20003d38 	.word	0x20003d38

0801af8c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801af8c:	4a12      	ldr	r2, [pc, #72]	@ (801afd8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801af8e:	f012 0f07 	tst.w	r2, #7
 801af92:	d01f      	beq.n	801afd4 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801af94:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801af96:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801af9a:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 801af9e:	33f8      	adds	r3, #248	@ 0xf8
 801afa0:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801afa2:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801afa4:	480d      	ldr	r0, [pc, #52]	@ (801afdc <prvHeapInit+0x50>)
 801afa6:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801afa8:	2100      	movs	r1, #0
 801afaa:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801afac:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801afae:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801afb0:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801afb4:	480a      	ldr	r0, [pc, #40]	@ (801afe0 <prvHeapInit+0x54>)
 801afb6:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801afb8:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801afba:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801afbc:	1a99      	subs	r1, r3, r2
 801afbe:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801afc0:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801afc2:	4b08      	ldr	r3, [pc, #32]	@ (801afe4 <prvHeapInit+0x58>)
 801afc4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801afc6:	4b08      	ldr	r3, [pc, #32]	@ (801afe8 <prvHeapInit+0x5c>)
 801afc8:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801afca:	4b08      	ldr	r3, [pc, #32]	@ (801afec <prvHeapInit+0x60>)
 801afcc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801afd0:	601a      	str	r2, [r3, #0]
}
 801afd2:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801afd4:	4b06      	ldr	r3, [pc, #24]	@ (801aff0 <prvHeapInit+0x64>)
 801afd6:	e7e5      	b.n	801afa4 <prvHeapInit+0x18>
 801afd8:	20003d60 	.word	0x20003d60
 801afdc:	20003d58 	.word	0x20003d58
 801afe0:	20003d54 	.word	0x20003d54
 801afe4:	20003d4c 	.word	0x20003d4c
 801afe8:	20003d50 	.word	0x20003d50
 801afec:	20003d40 	.word	0x20003d40
 801aff0:	000160f8 	.word	0x000160f8

0801aff4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801aff4:	4b16      	ldr	r3, [pc, #88]	@ (801b050 <prvInsertBlockIntoFreeList+0x5c>)
 801aff6:	461a      	mov	r2, r3
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	4283      	cmp	r3, r0
 801affc:	d3fb      	bcc.n	801aff6 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801affe:	6851      	ldr	r1, [r2, #4]
 801b000:	eb02 0c01 	add.w	ip, r2, r1
 801b004:	4584      	cmp	ip, r0
 801b006:	d009      	beq.n	801b01c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b008:	6841      	ldr	r1, [r0, #4]
 801b00a:	eb00 0c01 	add.w	ip, r0, r1
 801b00e:	4563      	cmp	r3, ip
 801b010:	d009      	beq.n	801b026 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b012:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b014:	4290      	cmp	r0, r2
 801b016:	d019      	beq.n	801b04c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b018:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 801b01a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b01c:	6840      	ldr	r0, [r0, #4]
 801b01e:	4401      	add	r1, r0
 801b020:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 801b022:	4610      	mov	r0, r2
 801b024:	e7f0      	b.n	801b008 <prvInsertBlockIntoFreeList+0x14>
{
 801b026:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b028:	4c0a      	ldr	r4, [pc, #40]	@ (801b054 <prvInsertBlockIntoFreeList+0x60>)
 801b02a:	6824      	ldr	r4, [r4, #0]
 801b02c:	42a3      	cmp	r3, r4
 801b02e:	d00b      	beq.n	801b048 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b030:	685b      	ldr	r3, [r3, #4]
 801b032:	4419      	add	r1, r3
 801b034:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b036:	6813      	ldr	r3, [r2, #0]
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 801b03c:	4290      	cmp	r0, r2
 801b03e:	d000      	beq.n	801b042 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b040:	6010      	str	r0, [r2, #0]
	}
}
 801b042:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b046:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b048:	6004      	str	r4, [r0, #0]
 801b04a:	e7f7      	b.n	801b03c <prvInsertBlockIntoFreeList+0x48>
 801b04c:	4770      	bx	lr
 801b04e:	bf00      	nop
 801b050:	20003d58 	.word	0x20003d58
 801b054:	20003d54 	.word	0x20003d54

0801b058 <pvPortMalloc>:
{
 801b058:	b538      	push	{r3, r4, r5, lr}
 801b05a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801b05c:	f7ff f84e 	bl	801a0fc <vTaskSuspendAll>
		if( pxEnd == NULL )
 801b060:	4b38      	ldr	r3, [pc, #224]	@ (801b144 <pvPortMalloc+0xec>)
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	b1b3      	cbz	r3, 801b094 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b066:	4b38      	ldr	r3, [pc, #224]	@ (801b148 <pvPortMalloc+0xf0>)
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	421c      	tst	r4, r3
 801b06c:	d150      	bne.n	801b110 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 801b06e:	2c00      	cmp	r4, #0
 801b070:	d050      	beq.n	801b114 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 801b072:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b076:	f014 0f07 	tst.w	r4, #7
 801b07a:	d002      	beq.n	801b082 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b07c:	f022 0207 	bic.w	r2, r2, #7
 801b080:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b082:	2a00      	cmp	r2, #0
 801b084:	d055      	beq.n	801b132 <pvPortMalloc+0xda>
 801b086:	4b31      	ldr	r3, [pc, #196]	@ (801b14c <pvPortMalloc+0xf4>)
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	4293      	cmp	r3, r2
 801b08c:	d353      	bcc.n	801b136 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 801b08e:	4930      	ldr	r1, [pc, #192]	@ (801b150 <pvPortMalloc+0xf8>)
 801b090:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b092:	e004      	b.n	801b09e <pvPortMalloc+0x46>
			prvHeapInit();
 801b094:	f7ff ff7a 	bl	801af8c <prvHeapInit>
 801b098:	e7e5      	b.n	801b066 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 801b09a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801b09c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b09e:	6863      	ldr	r3, [r4, #4]
 801b0a0:	4293      	cmp	r3, r2
 801b0a2:	d202      	bcs.n	801b0aa <pvPortMalloc+0x52>
 801b0a4:	6823      	ldr	r3, [r4, #0]
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d1f7      	bne.n	801b09a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 801b0aa:	4b26      	ldr	r3, [pc, #152]	@ (801b144 <pvPortMalloc+0xec>)
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	42a3      	cmp	r3, r4
 801b0b0:	d043      	beq.n	801b13a <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b0b2:	680d      	ldr	r5, [r1, #0]
 801b0b4:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b0b6:	6823      	ldr	r3, [r4, #0]
 801b0b8:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b0ba:	6863      	ldr	r3, [r4, #4]
 801b0bc:	1a9b      	subs	r3, r3, r2
 801b0be:	2b10      	cmp	r3, #16
 801b0c0:	d910      	bls.n	801b0e4 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b0c2:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b0c4:	f010 0f07 	tst.w	r0, #7
 801b0c8:	d008      	beq.n	801b0dc <pvPortMalloc+0x84>
 801b0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b0ce:	f383 8811 	msr	BASEPRI, r3
 801b0d2:	f3bf 8f6f 	isb	sy
 801b0d6:	f3bf 8f4f 	dsb	sy
 801b0da:	e7fe      	b.n	801b0da <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b0dc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b0de:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b0e0:	f7ff ff88 	bl	801aff4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b0e4:	6862      	ldr	r2, [r4, #4]
 801b0e6:	4919      	ldr	r1, [pc, #100]	@ (801b14c <pvPortMalloc+0xf4>)
 801b0e8:	680b      	ldr	r3, [r1, #0]
 801b0ea:	1a9b      	subs	r3, r3, r2
 801b0ec:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b0ee:	4919      	ldr	r1, [pc, #100]	@ (801b154 <pvPortMalloc+0xfc>)
 801b0f0:	6809      	ldr	r1, [r1, #0]
 801b0f2:	428b      	cmp	r3, r1
 801b0f4:	d201      	bcs.n	801b0fa <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b0f6:	4917      	ldr	r1, [pc, #92]	@ (801b154 <pvPortMalloc+0xfc>)
 801b0f8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b0fa:	4b13      	ldr	r3, [pc, #76]	@ (801b148 <pvPortMalloc+0xf0>)
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	4313      	orrs	r3, r2
 801b100:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b102:	2300      	movs	r3, #0
 801b104:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 801b106:	4a14      	ldr	r2, [pc, #80]	@ (801b158 <pvPortMalloc+0x100>)
 801b108:	6813      	ldr	r3, [r2, #0]
 801b10a:	3301      	adds	r3, #1
 801b10c:	6013      	str	r3, [r2, #0]
 801b10e:	e002      	b.n	801b116 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 801b110:	2500      	movs	r5, #0
 801b112:	e000      	b.n	801b116 <pvPortMalloc+0xbe>
 801b114:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 801b116:	f7ff f88b 	bl	801a230 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b11a:	f015 0f07 	tst.w	r5, #7
 801b11e:	d00e      	beq.n	801b13e <pvPortMalloc+0xe6>
 801b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b124:	f383 8811 	msr	BASEPRI, r3
 801b128:	f3bf 8f6f 	isb	sy
 801b12c:	f3bf 8f4f 	dsb	sy
 801b130:	e7fe      	b.n	801b130 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 801b132:	2500      	movs	r5, #0
 801b134:	e7ef      	b.n	801b116 <pvPortMalloc+0xbe>
 801b136:	2500      	movs	r5, #0
 801b138:	e7ed      	b.n	801b116 <pvPortMalloc+0xbe>
 801b13a:	2500      	movs	r5, #0
 801b13c:	e7eb      	b.n	801b116 <pvPortMalloc+0xbe>
}
 801b13e:	4628      	mov	r0, r5
 801b140:	bd38      	pop	{r3, r4, r5, pc}
 801b142:	bf00      	nop
 801b144:	20003d54 	.word	0x20003d54
 801b148:	20003d40 	.word	0x20003d40
 801b14c:	20003d50 	.word	0x20003d50
 801b150:	20003d58 	.word	0x20003d58
 801b154:	20003d4c 	.word	0x20003d4c
 801b158:	20003d48 	.word	0x20003d48

0801b15c <vPortFree>:
	if( pv != NULL )
 801b15c:	2800      	cmp	r0, #0
 801b15e:	d034      	beq.n	801b1ca <vPortFree+0x6e>
{
 801b160:	b538      	push	{r3, r4, r5, lr}
 801b162:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 801b164:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b168:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b16c:	4a17      	ldr	r2, [pc, #92]	@ (801b1cc <vPortFree+0x70>)
 801b16e:	6812      	ldr	r2, [r2, #0]
 801b170:	4213      	tst	r3, r2
 801b172:	d108      	bne.n	801b186 <vPortFree+0x2a>
 801b174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b178:	f383 8811 	msr	BASEPRI, r3
 801b17c:	f3bf 8f6f 	isb	sy
 801b180:	f3bf 8f4f 	dsb	sy
 801b184:	e7fe      	b.n	801b184 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b186:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801b18a:	b141      	cbz	r1, 801b19e <vPortFree+0x42>
 801b18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b190:	f383 8811 	msr	BASEPRI, r3
 801b194:	f3bf 8f6f 	isb	sy
 801b198:	f3bf 8f4f 	dsb	sy
 801b19c:	e7fe      	b.n	801b19c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b19e:	ea23 0302 	bic.w	r3, r3, r2
 801b1a2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801b1a6:	f7fe ffa9 	bl	801a0fc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b1aa:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801b1ae:	4a08      	ldr	r2, [pc, #32]	@ (801b1d0 <vPortFree+0x74>)
 801b1b0:	6813      	ldr	r3, [r2, #0]
 801b1b2:	440b      	add	r3, r1
 801b1b4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b1b6:	4628      	mov	r0, r5
 801b1b8:	f7ff ff1c 	bl	801aff4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801b1bc:	4a05      	ldr	r2, [pc, #20]	@ (801b1d4 <vPortFree+0x78>)
 801b1be:	6813      	ldr	r3, [r2, #0]
 801b1c0:	3301      	adds	r3, #1
 801b1c2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801b1c4:	f7ff f834 	bl	801a230 <xTaskResumeAll>
}
 801b1c8:	bd38      	pop	{r3, r4, r5, pc}
 801b1ca:	4770      	bx	lr
 801b1cc:	20003d40 	.word	0x20003d40
 801b1d0:	20003d50 	.word	0x20003d50
 801b1d4:	20003d44 	.word	0x20003d44

0801b1d8 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 801b1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1da:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 801b1dc:	f7fe ff8e 	bl	801a0fc <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 801b1e0:	4b17      	ldr	r3, [pc, #92]	@ (801b240 <vPortGetHeapStats+0x68>)
 801b1e2:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 801b1e4:	b193      	cbz	r3, 801b20c <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801b1e6:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b1ea:	2500      	movs	r5, #0
 801b1ec:	462c      	mov	r4, r5
 801b1ee:	e004      	b.n	801b1fa <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 801b1f0:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 801b1f2:	4a14      	ldr	r2, [pc, #80]	@ (801b244 <vPortGetHeapStats+0x6c>)
 801b1f4:	6812      	ldr	r2, [r2, #0]
 801b1f6:	429a      	cmp	r2, r3
 801b1f8:	d00c      	beq.n	801b214 <vPortGetHeapStats+0x3c>
				xBlocks++;
 801b1fa:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 801b1fc:	685a      	ldr	r2, [r3, #4]
 801b1fe:	42aa      	cmp	r2, r5
 801b200:	d900      	bls.n	801b204 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 801b202:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 801b204:	42b2      	cmp	r2, r6
 801b206:	d2f3      	bcs.n	801b1f0 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 801b208:	4616      	mov	r6, r2
 801b20a:	e7f1      	b.n	801b1f0 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801b20c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b210:	2500      	movs	r5, #0
 801b212:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 801b214:	f7ff f80c 	bl	801a230 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 801b218:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801b21a:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801b21c:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 801b21e:	f7ff fd61 	bl	801ace4 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801b222:	4b09      	ldr	r3, [pc, #36]	@ (801b248 <vPortGetHeapStats+0x70>)
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 801b228:	4b08      	ldr	r3, [pc, #32]	@ (801b24c <vPortGetHeapStats+0x74>)
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801b22e:	4b08      	ldr	r3, [pc, #32]	@ (801b250 <vPortGetHeapStats+0x78>)
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 801b234:	4b07      	ldr	r3, [pc, #28]	@ (801b254 <vPortGetHeapStats+0x7c>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801b23a:	f7ff fd75 	bl	801ad28 <vPortExitCritical>
}
 801b23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b240:	20003d58 	.word	0x20003d58
 801b244:	20003d54 	.word	0x20003d54
 801b248:	20003d50 	.word	0x20003d50
 801b24c:	20003d48 	.word	0x20003d48
 801b250:	20003d44 	.word	0x20003d44
 801b254:	20003d4c 	.word	0x20003d4c

0801b258 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 801b258:	2000      	movs	r0, #0
 801b25a:	4770      	bx	lr

0801b25c <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801b25c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801b25e:	fb01 f400 	mul.w	r4, r1, r0
 801b262:	4620      	mov	r0, r4
 801b264:	f7ff fef8 	bl	801b058 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801b268:	4605      	mov	r5, r0
 801b26a:	b118      	cbz	r0, 801b274 <mg_calloc+0x18>
 801b26c:	4622      	mov	r2, r4
 801b26e:	2100      	movs	r1, #0
 801b270:	f011 ff3e 	bl	802d0f0 <memset>
}
 801b274:	4628      	mov	r0, r5
 801b276:	bd38      	pop	{r3, r4, r5, pc}

0801b278 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 801b278:	b508      	push	{r3, lr}
 801b27a:	4684      	mov	ip, r0
 801b27c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801b27e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801b282:	428b      	cmp	r3, r1
 801b284:	d90a      	bls.n	801b29c <block_device_read+0x24>
 801b286:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801b288:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801b28c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b290:	fb01 e103 	mla	r1, r1, r3, lr
 801b294:	f7fa ff84 	bl	80161a0 <sFLASH_ReadBuffer>
}
 801b298:	2000      	movs	r0, #0
 801b29a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801b29c:	4b03      	ldr	r3, [pc, #12]	@ (801b2ac <block_device_read+0x34>)
 801b29e:	4a04      	ldr	r2, [pc, #16]	@ (801b2b0 <block_device_read+0x38>)
 801b2a0:	f240 1123 	movw	r1, #291	@ 0x123
 801b2a4:	4803      	ldr	r0, [pc, #12]	@ (801b2b4 <block_device_read+0x3c>)
 801b2a6:	f00f f9d1 	bl	802a64c <__assert_func>
 801b2aa:	bf00      	nop
 801b2ac:	08039918 	.word	0x08039918
 801b2b0:	08039994 	.word	0x08039994
 801b2b4:	08039930 	.word	0x08039930

0801b2b8 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 801b2b8:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 801b2ba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801b2bc:	428b      	cmp	r3, r1
 801b2be:	d906      	bls.n	801b2ce <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 801b2c0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801b2c2:	fb01 f000 	mul.w	r0, r1, r0
 801b2c6:	f7fb f8b7 	bl	8016438 <sFLASH_EraseSector>
}
 801b2ca:	2000      	movs	r0, #0
 801b2cc:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801b2ce:	4b03      	ldr	r3, [pc, #12]	@ (801b2dc <block_device_erase+0x24>)
 801b2d0:	4a03      	ldr	r2, [pc, #12]	@ (801b2e0 <block_device_erase+0x28>)
 801b2d2:	f240 112b 	movw	r1, #299	@ 0x12b
 801b2d6:	4803      	ldr	r0, [pc, #12]	@ (801b2e4 <block_device_erase+0x2c>)
 801b2d8:	f00f f9b8 	bl	802a64c <__assert_func>
 801b2dc:	08039918 	.word	0x08039918
 801b2e0:	08039980 	.word	0x08039980
 801b2e4:	08039930 	.word	0x08039930

0801b2e8 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801b2e8:	b508      	push	{r3, lr}
 801b2ea:	4684      	mov	ip, r0
 801b2ec:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801b2ee:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801b2f2:	428b      	cmp	r3, r1
 801b2f4:	d90a      	bls.n	801b30c <block_device_prog+0x24>
 801b2f6:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801b2f8:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801b2fc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b300:	fb01 e103 	mla	r1, r1, r3, lr
 801b304:	f7fb f8de 	bl	80164c4 <sFLASH_WriteBuffer>
}
 801b308:	2000      	movs	r0, #0
 801b30a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801b30c:	4b03      	ldr	r3, [pc, #12]	@ (801b31c <block_device_prog+0x34>)
 801b30e:	4a04      	ldr	r2, [pc, #16]	@ (801b320 <block_device_prog+0x38>)
 801b310:	f240 1133 	movw	r1, #307	@ 0x133
 801b314:	4803      	ldr	r0, [pc, #12]	@ (801b324 <block_device_prog+0x3c>)
 801b316:	f00f f999 	bl	802a64c <__assert_func>
 801b31a:	bf00      	nop
 801b31c:	08039918 	.word	0x08039918
 801b320:	0803996c 	.word	0x0803996c
 801b324:	08039930 	.word	0x08039930

0801b328 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 801b328:	b530      	push	{r4, r5, lr}
 801b32a:	b0c3      	sub	sp, #268	@ 0x10c
 801b32c:	460d      	mov	r5, r1
 801b32e:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 801b330:	466a      	mov	r2, sp
 801b332:	4601      	mov	r1, r0
 801b334:	480b      	ldr	r0, [pc, #44]	@ (801b364 <mg_fs_lfs_status+0x3c>)
 801b336:	f004 fdad 	bl	801fe94 <lfs_stat>
 801b33a:	b110      	cbz	r0, 801b342 <mg_fs_lfs_status+0x1a>
    return 0;
 801b33c:	2000      	movs	r0, #0
}
 801b33e:	b043      	add	sp, #268	@ 0x10c
 801b340:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 801b342:	b10d      	cbz	r5, 801b348 <mg_fs_lfs_status+0x20>
 801b344:	9b01      	ldr	r3, [sp, #4]
 801b346:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 801b348:	b11c      	cbz	r4, 801b352 <mg_fs_lfs_status+0x2a>
 801b34a:	2200      	movs	r2, #0
 801b34c:	2300      	movs	r3, #0
 801b34e:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 801b352:	f89d 3000 	ldrb.w	r3, [sp]
 801b356:	2b02      	cmp	r3, #2
 801b358:	d001      	beq.n	801b35e <mg_fs_lfs_status+0x36>
 801b35a:	2001      	movs	r0, #1
 801b35c:	e7ef      	b.n	801b33e <mg_fs_lfs_status+0x16>
 801b35e:	2004      	movs	r0, #4
 801b360:	e7ed      	b.n	801b33e <mg_fs_lfs_status+0x16>
 801b362:	bf00      	nop
 801b364:	20019ef8 	.word	0x20019ef8

0801b368 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 801b368:	b530      	push	{r4, r5, lr}
 801b36a:	b0d1      	sub	sp, #324	@ 0x144
 801b36c:	460d      	mov	r5, r1
 801b36e:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 801b370:	4602      	mov	r2, r0
 801b372:	a901      	add	r1, sp, #4
 801b374:	480a      	ldr	r0, [pc, #40]	@ (801b3a0 <mg_fs_lfs_list+0x38>)
 801b376:	f004 feb3 	bl	80200e0 <lfs_dir_open>
 801b37a:	b120      	cbz	r0, 801b386 <mg_fs_lfs_list+0x1e>
}
 801b37c:	b051      	add	sp, #324	@ 0x144
 801b37e:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 801b380:	4621      	mov	r1, r4
 801b382:	a810      	add	r0, sp, #64	@ 0x40
 801b384:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801b386:	aa0e      	add	r2, sp, #56	@ 0x38
 801b388:	a901      	add	r1, sp, #4
 801b38a:	4805      	ldr	r0, [pc, #20]	@ (801b3a0 <mg_fs_lfs_list+0x38>)
 801b38c:	f004 fee3 	bl	8020156 <lfs_dir_read>
 801b390:	2800      	cmp	r0, #0
 801b392:	dcf5      	bgt.n	801b380 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 801b394:	a901      	add	r1, sp, #4
 801b396:	4802      	ldr	r0, [pc, #8]	@ (801b3a0 <mg_fs_lfs_list+0x38>)
 801b398:	f004 feca 	bl	8020130 <lfs_dir_close>
}
 801b39c:	e7ee      	b.n	801b37c <mg_fs_lfs_list+0x14>
 801b39e:	bf00      	nop
 801b3a0:	20019ef8 	.word	0x20019ef8

0801b3a4 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 801b3a4:	b570      	push	{r4, r5, r6, lr}
 801b3a6:	4605      	mov	r5, r0
 801b3a8:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801b3aa:	2054      	movs	r0, #84	@ 0x54
 801b3ac:	f7ff fe54 	bl	801b058 <pvPortMalloc>
    if (fd == NULL) return NULL;
 801b3b0:	4606      	mov	r6, r0
 801b3b2:	b188      	cbz	r0, 801b3d8 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 801b3b4:	f014 0301 	ands.w	r3, r4, #1
 801b3b8:	d000      	beq.n	801b3bc <mg_fs_lfs_open+0x18>
 801b3ba:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801b3bc:	f014 0f02 	tst.w	r4, #2
 801b3c0:	d003      	beq.n	801b3ca <mg_fs_lfs_open+0x26>
 801b3c2:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 801b3c6:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801b3ca:	462a      	mov	r2, r5
 801b3cc:	4631      	mov	r1, r6
 801b3ce:	4806      	ldr	r0, [pc, #24]	@ (801b3e8 <mg_fs_lfs_open+0x44>)
 801b3d0:	f004 fd76 	bl	801fec0 <lfs_file_open>
 801b3d4:	2800      	cmp	r0, #0
 801b3d6:	db01      	blt.n	801b3dc <mg_fs_lfs_open+0x38>
}
 801b3d8:	4630      	mov	r0, r6
 801b3da:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 801b3dc:	4630      	mov	r0, r6
 801b3de:	f7ff febd 	bl	801b15c <vPortFree>
        return NULL;
 801b3e2:	2600      	movs	r6, #0
 801b3e4:	e7f8      	b.n	801b3d8 <mg_fs_lfs_open+0x34>
 801b3e6:	bf00      	nop
 801b3e8:	20019ef8 	.word	0x20019ef8

0801b3ec <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 801b3ec:	b510      	push	{r4, lr}
 801b3ee:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 801b3f0:	4601      	mov	r1, r0
 801b3f2:	4803      	ldr	r0, [pc, #12]	@ (801b400 <mg_fs_lfs_close+0x14>)
 801b3f4:	f004 fd90 	bl	801ff18 <lfs_file_close>
    free(file);
 801b3f8:	4620      	mov	r0, r4
 801b3fa:	f7ff feaf 	bl	801b15c <vPortFree>
}
 801b3fe:	bd10      	pop	{r4, pc}
 801b400:	20019ef8 	.word	0x20019ef8

0801b404 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 801b404:	b508      	push	{r3, lr}
 801b406:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 801b408:	460a      	mov	r2, r1
 801b40a:	4601      	mov	r1, r0
 801b40c:	4802      	ldr	r0, [pc, #8]	@ (801b418 <mg_fs_lfs_read+0x14>)
 801b40e:	f004 fda9 	bl	801ff64 <lfs_file_read>
}
 801b412:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801b416:	bd08      	pop	{r3, pc}
 801b418:	20019ef8 	.word	0x20019ef8

0801b41c <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801b41c:	b508      	push	{r3, lr}
 801b41e:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 801b420:	460a      	mov	r2, r1
 801b422:	4601      	mov	r1, r0
 801b424:	4802      	ldr	r0, [pc, #8]	@ (801b430 <mg_fs_lfs_write+0x14>)
 801b426:	f004 fdc9 	bl	801ffbc <lfs_file_write>
}
 801b42a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801b42e:	bd08      	pop	{r3, pc}
 801b430:	20019ef8 	.word	0x20019ef8

0801b434 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 801b434:	b510      	push	{r4, lr}
 801b436:	4604      	mov	r4, r0
 801b438:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801b43a:	2300      	movs	r3, #0
 801b43c:	4601      	mov	r1, r0
 801b43e:	4809      	ldr	r0, [pc, #36]	@ (801b464 <mg_fs_lfs_seek+0x30>)
 801b440:	f004 fde8 	bl	8020014 <lfs_file_seek>
 801b444:	2800      	cmp	r0, #0
 801b446:	db06      	blt.n	801b456 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 801b448:	4621      	mov	r1, r4
 801b44a:	4806      	ldr	r0, [pc, #24]	@ (801b464 <mg_fs_lfs_seek+0x30>)
 801b44c:	f004 fe0e 	bl	802006c <lfs_file_tell>
     if (pos < 0) {
 801b450:	2800      	cmp	r0, #0
 801b452:	db03      	blt.n	801b45c <mg_fs_lfs_seek+0x28>
}
 801b454:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 801b456:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b45a:	e7fb      	b.n	801b454 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 801b45c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b460:	e7f8      	b.n	801b454 <mg_fs_lfs_seek+0x20>
 801b462:	bf00      	nop
 801b464:	20019ef8 	.word	0x20019ef8

0801b468 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 801b468:	b508      	push	{r3, lr}
 801b46a:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 801b46c:	4601      	mov	r1, r0
 801b46e:	4803      	ldr	r0, [pc, #12]	@ (801b47c <mg_fs_lfs_rename+0x14>)
 801b470:	f004 fcfb 	bl	801fe6a <lfs_rename>
}
 801b474:	fab0 f080 	clz	r0, r0
 801b478:	0940      	lsrs	r0, r0, #5
 801b47a:	bd08      	pop	{r3, pc}
 801b47c:	20019ef8 	.word	0x20019ef8

0801b480 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 801b480:	b508      	push	{r3, lr}
 801b482:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 801b484:	4803      	ldr	r0, [pc, #12]	@ (801b494 <mg_fs_lfs_remove+0x14>)
 801b486:	f004 fcdd 	bl	801fe44 <lfs_remove>
}
 801b48a:	fab0 f080 	clz	r0, r0
 801b48e:	0940      	lsrs	r0, r0, #5
 801b490:	bd08      	pop	{r3, pc}
 801b492:	bf00      	nop
 801b494:	20019ef8 	.word	0x20019ef8

0801b498 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 801b498:	b508      	push	{r3, lr}
 801b49a:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 801b49c:	4803      	ldr	r0, [pc, #12]	@ (801b4ac <mg_fs_lfs_mkdir+0x14>)
 801b49e:	f004 fe0b 	bl	80200b8 <lfs_mkdir>
}
 801b4a2:	fab0 f080 	clz	r0, r0
 801b4a6:	0940      	lsrs	r0, r0, #5
 801b4a8:	bd08      	pop	{r3, pc}
 801b4aa:	bf00      	nop
 801b4ac:	20019ef8 	.word	0x20019ef8

0801b4b0 <mg_fs_mounted>:
}
 801b4b0:	4b01      	ldr	r3, [pc, #4]	@ (801b4b8 <mg_fs_mounted+0x8>)
 801b4b2:	7818      	ldrb	r0, [r3, #0]
 801b4b4:	4770      	bx	lr
 801b4b6:	bf00      	nop
 801b4b8:	20019e98 	.word	0x20019e98

0801b4bc <get_flash_chip_model>:
}
 801b4bc:	4800      	ldr	r0, [pc, #0]	@ (801b4c0 <get_flash_chip_model+0x4>)
 801b4be:	4770      	bx	lr
 801b4c0:	20019e66 	.word	0x20019e66

0801b4c4 <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 801b4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4c8:	b090      	sub	sp, #64	@ 0x40
 801b4ca:	4607      	mov	r7, r0
 801b4cc:	460e      	mov	r6, r1
	flash_info = sFLASH_GetInfo();
 801b4ce:	4c37      	ldr	r4, [pc, #220]	@ (801b5ac <lfs_fs_ll_init+0xe8>)
 801b4d0:	4668      	mov	r0, sp
 801b4d2:	f7fa fec5 	bl	8016260 <sFLASH_GetInfo>
 801b4d6:	46a6      	mov	lr, r4
 801b4d8:	46ec      	mov	ip, sp
 801b4da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b4de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b4e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b4e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b4ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b4ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b4f2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801b4f6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	if (flash_info.flash_id == 0x0) return -1;
 801b4fa:	6823      	ldr	r3, [r4, #0]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d052      	beq.n	801b5a6 <lfs_fs_ll_init+0xe2>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 801b500:	46a0      	mov	r8, r4
 801b502:	8961      	ldrh	r1, [r4, #10]
 801b504:	2001      	movs	r0, #1
 801b506:	f7ff fea9 	bl	801b25c <mg_calloc>
 801b50a:	4604      	mov	r4, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 801b50c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801b510:	2001      	movs	r0, #1
 801b512:	f7ff fea3 	bl	801b25c <mg_calloc>
 801b516:	4605      	mov	r5, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801b518:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801b51c:	2001      	movs	r0, #1
 801b51e:	f7ff fe9d 	bl	801b25c <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 801b522:	2c00      	cmp	r4, #0
 801b524:	d028      	beq.n	801b578 <lfs_fs_ll_init+0xb4>
	cfg.read_size         = flash_info.read_size;
 801b526:	4b21      	ldr	r3, [pc, #132]	@ (801b5ac <lfs_fs_ll_init+0xe8>)
 801b528:	889a      	ldrh	r2, [r3, #4]
 801b52a:	4921      	ldr	r1, [pc, #132]	@ (801b5b0 <lfs_fs_ll_init+0xec>)
 801b52c:	61ca      	str	r2, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 801b52e:	88da      	ldrh	r2, [r3, #6]
 801b530:	620a      	str	r2, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 801b532:	891a      	ldrh	r2, [r3, #8]
 801b534:	624a      	str	r2, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801b536:	899a      	ldrh	r2, [r3, #12]
 801b538:	628a      	str	r2, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 801b53a:	895b      	ldrh	r3, [r3, #10]
 801b53c:	634b      	str	r3, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 801b53e:	630b      	str	r3, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 801b540:	63cc      	str	r4, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 801b542:	640d      	str	r5, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801b544:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 801b546:	4b1b      	ldr	r3, [pc, #108]	@ (801b5b4 <lfs_fs_ll_init+0xf0>)
 801b548:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 801b54a:	4b1b      	ldr	r3, [pc, #108]	@ (801b5b8 <lfs_fs_ll_init+0xf4>)
 801b54c:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 801b54e:	4b1b      	ldr	r3, [pc, #108]	@ (801b5bc <lfs_fs_ll_init+0xf8>)
 801b550:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 801b552:	4b1b      	ldr	r3, [pc, #108]	@ (801b5c0 <lfs_fs_ll_init+0xfc>)
 801b554:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 801b556:	614f      	str	r7, [r1, #20]
	cfg.unlock	= unlock;
 801b558:	618e      	str	r6, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 801b55a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801b55e:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 801b560:	4818      	ldr	r0, [pc, #96]	@ (801b5c4 <lfs_fs_ll_init+0x100>)
 801b562:	f004 fc5c 	bl	801fe1e <lfs_mount>
 801b566:	2800      	cmp	r0, #0
 801b568:	db0d      	blt.n	801b586 <lfs_fs_ll_init+0xc2>
    	fs_mounted = 1;
 801b56a:	4b17      	ldr	r3, [pc, #92]	@ (801b5c8 <lfs_fs_ll_init+0x104>)
 801b56c:	2201      	movs	r2, #1
 801b56e:	701a      	strb	r2, [r3, #0]
    	return 0;
 801b570:	2000      	movs	r0, #0
}
 801b572:	b010      	add	sp, #64	@ 0x40
 801b574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 801b578:	2d00      	cmp	r5, #0
 801b57a:	d1d4      	bne.n	801b526 <lfs_fs_ll_init+0x62>
 801b57c:	2800      	cmp	r0, #0
 801b57e:	d1d2      	bne.n	801b526 <lfs_fs_ll_init+0x62>
		return -2;
 801b580:	f06f 0001 	mvn.w	r0, #1
 801b584:	e7f5      	b.n	801b572 <lfs_fs_ll_init+0xae>
    	lfs_format(&lfs, &cfg);
 801b586:	4d0a      	ldr	r5, [pc, #40]	@ (801b5b0 <lfs_fs_ll_init+0xec>)
 801b588:	4c0e      	ldr	r4, [pc, #56]	@ (801b5c4 <lfs_fs_ll_init+0x100>)
 801b58a:	4629      	mov	r1, r5
 801b58c:	4620      	mov	r0, r4
 801b58e:	f004 fc33 	bl	801fdf8 <lfs_format>
    	if((err = lfs_mount(&lfs, &cfg)) == 0) fs_mounted = 1;
 801b592:	4629      	mov	r1, r5
 801b594:	4620      	mov	r0, r4
 801b596:	f004 fc42 	bl	801fe1e <lfs_mount>
 801b59a:	2800      	cmp	r0, #0
 801b59c:	d1e9      	bne.n	801b572 <lfs_fs_ll_init+0xae>
 801b59e:	4b0a      	ldr	r3, [pc, #40]	@ (801b5c8 <lfs_fs_ll_init+0x104>)
 801b5a0:	2201      	movs	r2, #1
 801b5a2:	701a      	strb	r2, [r3, #0]
    	return err;
 801b5a4:	e7e5      	b.n	801b572 <lfs_fs_ll_init+0xae>
	if (flash_info.flash_id == 0x0) return -1;
 801b5a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b5aa:	e7e2      	b.n	801b572 <lfs_fs_ll_init+0xae>
 801b5ac:	20019e58 	.word	0x20019e58
 801b5b0:	20019e9c 	.word	0x20019e9c
 801b5b4:	0801b279 	.word	0x0801b279
 801b5b8:	0801b2e9 	.word	0x0801b2e9
 801b5bc:	0801b2b9 	.word	0x0801b2b9
 801b5c0:	0801b259 	.word	0x0801b259
 801b5c4:	20019ef8 	.word	0x20019ef8
 801b5c8:	20019e98 	.word	0x20019e98

0801b5cc <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b5cc:	6803      	ldr	r3, [r0, #0]
 801b5ce:	680a      	ldr	r2, [r1, #0]
 801b5d0:	4293      	cmp	r3, r2
 801b5d2:	d004      	beq.n	801b5de <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801b5d4:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b5d6:	428b      	cmp	r3, r1
 801b5d8:	d015      	beq.n	801b606 <lfs_pair_issync+0x3a>
 801b5da:	2000      	movs	r0, #0
 801b5dc:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 801b5de:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b5e0:	6844      	ldr	r4, [r0, #4]
 801b5e2:	684d      	ldr	r5, [r1, #4]
 801b5e4:	42ac      	cmp	r4, r5
 801b5e6:	d00a      	beq.n	801b5fe <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801b5e8:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b5ea:	428b      	cmp	r3, r1
 801b5ec:	d002      	beq.n	801b5f4 <lfs_pair_issync+0x28>
 801b5ee:	2000      	movs	r0, #0
}
 801b5f0:	bc30      	pop	{r4, r5}
 801b5f2:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801b5f4:	6843      	ldr	r3, [r0, #4]
 801b5f6:	429a      	cmp	r2, r3
 801b5f8:	d003      	beq.n	801b602 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b5fa:	2000      	movs	r0, #0
 801b5fc:	e7f8      	b.n	801b5f0 <lfs_pair_issync+0x24>
 801b5fe:	2001      	movs	r0, #1
 801b600:	e7f6      	b.n	801b5f0 <lfs_pair_issync+0x24>
 801b602:	2001      	movs	r0, #1
 801b604:	e7f4      	b.n	801b5f0 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801b606:	6843      	ldr	r3, [r0, #4]
 801b608:	429a      	cmp	r2, r3
 801b60a:	d001      	beq.n	801b610 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b60c:	2000      	movs	r0, #0
 801b60e:	4770      	bx	lr
 801b610:	2001      	movs	r0, #1
}
 801b612:	4770      	bx	lr

0801b614 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 801b614:	2300      	movs	r3, #0
 801b616:	2b02      	cmp	r3, #2
 801b618:	dc0d      	bgt.n	801b636 <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801b61a:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801b61c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801b620:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 801b624:	4062      	eors	r2, r4
 801b626:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 801b62a:	3301      	adds	r3, #1
 801b62c:	2b02      	cmp	r3, #2
 801b62e:	ddf5      	ble.n	801b61c <lfs_gstate_xor+0x8>
    }
}
 801b630:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b634:	4770      	bx	lr
 801b636:	4770      	bx	lr

0801b638 <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801b638:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801b63a:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801b63c:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801b640:	d00f      	beq.n	801b662 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801b642:	6843      	ldr	r3, [r0, #4]
 801b644:	680a      	ldr	r2, [r1, #0]
 801b646:	4293      	cmp	r3, r2
 801b648:	d00d      	beq.n	801b666 <lfs_gstate_hasmovehere+0x2e>
 801b64a:	6880      	ldr	r0, [r0, #8]
 801b64c:	6849      	ldr	r1, [r1, #4]
 801b64e:	4288      	cmp	r0, r1
 801b650:	d00b      	beq.n	801b66a <lfs_gstate_hasmovehere+0x32>
 801b652:	428b      	cmp	r3, r1
 801b654:	d00b      	beq.n	801b66e <lfs_gstate_hasmovehere+0x36>
 801b656:	4282      	cmp	r2, r0
 801b658:	d001      	beq.n	801b65e <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801b65a:	2000      	movs	r0, #0
}
 801b65c:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801b65e:	2001      	movs	r0, #1
 801b660:	4770      	bx	lr
 801b662:	2000      	movs	r0, #0
 801b664:	4770      	bx	lr
 801b666:	2001      	movs	r0, #1
 801b668:	4770      	bx	lr
 801b66a:	2001      	movs	r0, #1
 801b66c:	4770      	bx	lr
 801b66e:	2001      	movs	r0, #1
 801b670:	4770      	bx	lr

0801b672 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801b672:	b082      	sub	sp, #8
 801b674:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801b676:	ab01      	add	r3, sp, #4
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	b11b      	cbz	r3, 801b684 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 801b67c:	428b      	cmp	r3, r1
 801b67e:	d1fb      	bne.n	801b678 <lfs_mlist_isopen+0x6>
            return true;
 801b680:	2001      	movs	r0, #1
 801b682:	e000      	b.n	801b686 <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 801b684:	2000      	movs	r0, #0
}
 801b686:	b002      	add	sp, #8
 801b688:	4770      	bx	lr

0801b68a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801b68a:	3028      	adds	r0, #40	@ 0x28
 801b68c:	e000      	b.n	801b690 <lfs_mlist_remove+0x6>
 801b68e:	4618      	mov	r0, r3
 801b690:	6803      	ldr	r3, [r0, #0]
 801b692:	b123      	cbz	r3, 801b69e <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 801b694:	428b      	cmp	r3, r1
 801b696:	d1fa      	bne.n	801b68e <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	6003      	str	r3, [r0, #0]
            break;
 801b69c:	4770      	bx	lr
        }
    }
}
 801b69e:	4770      	bx	lr

0801b6a0 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 801b6a0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801b6a2:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 801b6a4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 801b6a6:	4770      	bx	lr

0801b6a8 <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 801b6a8:	4800      	ldr	r0, [pc, #0]	@ (801b6ac <lfs_fs_disk_version+0x4>)
 801b6aa:	4770      	bx	lr
 801b6ac:	00020001 	.word	0x00020001

0801b6b0 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801b6b0:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801b6b2:	f7ff fff9 	bl	801b6a8 <lfs_fs_disk_version>

}
 801b6b6:	0c00      	lsrs	r0, r0, #16
 801b6b8:	bd08      	pop	{r3, pc}

0801b6ba <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801b6ba:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801b6bc:	f7ff fff4 	bl	801b6a8 <lfs_fs_disk_version>
}
 801b6c0:	b280      	uxth	r0, r0
 801b6c2:	bd08      	pop	{r3, pc}

0801b6c4 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 801b6c4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b6c6:	6603      	str	r3, [r0, #96]	@ 0x60
}
 801b6c8:	4770      	bx	lr

0801b6ca <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801b6ca:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 801b6cc:	2200      	movs	r2, #0
 801b6ce:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801b6d0:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801b6d2:	f7ff fff7 	bl	801b6c4 <lfs_alloc_ckpoint>
}
 801b6d6:	bd08      	pop	{r3, pc}

0801b6d8 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 801b6d8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801b6da:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 801b6dc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b6de:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 801b6e0:	fbb1 f2f3 	udiv	r2, r1, r3
 801b6e4:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 801b6e8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801b6ea:	428b      	cmp	r3, r1
 801b6ec:	d90d      	bls.n	801b70a <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801b6ee:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801b6f0:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 801b6f2:	08c8      	lsrs	r0, r1, #3
 801b6f4:	5c23      	ldrb	r3, [r4, r0]
 801b6f6:	f001 0107 	and.w	r1, r1, #7
 801b6fa:	2201      	movs	r2, #1
 801b6fc:	408a      	lsls	r2, r1
 801b6fe:	4313      	orrs	r3, r2
 801b700:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 801b702:	2000      	movs	r0, #0
 801b704:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b708:	4770      	bx	lr
 801b70a:	2000      	movs	r0, #0
 801b70c:	4770      	bx	lr
	...

0801b710 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801b710:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801b712:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 801b716:	d01c      	beq.n	801b752 <lfs_dir_traverse_filter+0x42>
 801b718:	4a19      	ldr	r2, [pc, #100]	@ (801b780 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801b71a:	6803      	ldr	r3, [r0, #0]
 801b71c:	ea83 0401 	eor.w	r4, r3, r1
 801b720:	4214      	tst	r4, r2
 801b722:	d018      	beq.n	801b756 <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b724:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 801b728:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801b72c:	d013      	beq.n	801b756 <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801b72e:	4c14      	ldr	r4, [pc, #80]	@ (801b780 <lfs_dir_traverse_filter+0x70>)
 801b730:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801b732:	4a14      	ldr	r2, [pc, #80]	@ (801b784 <lfs_dir_traverse_filter+0x74>)
 801b734:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801b736:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801b73a:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801b73e:	4294      	cmp	r4, r2
 801b740:	d009      	beq.n	801b756 <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 801b742:	0d0a      	lsrs	r2, r1, #20
 801b744:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b748:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801b74c:	d009      	beq.n	801b762 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801b74e:	2000      	movs	r0, #0
 801b750:	e004      	b.n	801b75c <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801b752:	4a0d      	ldr	r2, [pc, #52]	@ (801b788 <lfs_dir_traverse_filter+0x78>)
 801b754:	e7e1      	b.n	801b71a <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801b756:	2300      	movs	r3, #0
 801b758:	6003      	str	r3, [r0, #0]
        return true;
 801b75a:	2001      	movs	r0, #1
}
 801b75c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b760:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 801b762:	f3c1 2189 	ubfx	r1, r1, #10, #10
 801b766:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b76a:	428c      	cmp	r4, r1
 801b76c:	d305      	bcc.n	801b77a <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801b76e:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801b770:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 801b774:	6003      	str	r3, [r0, #0]
    return false;
 801b776:	2000      	movs	r0, #0
 801b778:	e7f0      	b.n	801b75c <lfs_dir_traverse_filter+0x4c>
 801b77a:	2000      	movs	r0, #0
 801b77c:	e7ee      	b.n	801b75c <lfs_dir_traverse_filter+0x4c>
 801b77e:	bf00      	nop
 801b780:	7ffffc00 	.word	0x7ffffc00
 801b784:	000ffc00 	.word	0x000ffc00
 801b788:	700ffc00 	.word	0x700ffc00

0801b78c <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b78c:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b794:	bf08      	it	eq
 801b796:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 801b798:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b79c:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801b79e:	6803      	ldr	r3, [r0, #0]
 801b7a0:	440b      	add	r3, r1
 801b7a2:	6003      	str	r3, [r0, #0]
    return 0;
}
 801b7a4:	2000      	movs	r0, #0
 801b7a6:	4770      	bx	lr

0801b7a8 <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 801b7a8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	dd0b      	ble.n	801b7c8 <lfs_dir_needsrelocation+0x20>
 801b7b0:	688a      	ldr	r2, [r1, #8]
 801b7b2:	3201      	adds	r2, #1
 801b7b4:	3301      	adds	r3, #1
 801b7b6:	f043 0301 	orr.w	r3, r3, #1
 801b7ba:	fbb2 f1f3 	udiv	r1, r2, r3
 801b7be:	fb03 2211 	mls	r2, r3, r1, r2
 801b7c2:	b11a      	cbz	r2, 801b7cc <lfs_dir_needsrelocation+0x24>
 801b7c4:	2000      	movs	r0, #0
 801b7c6:	4770      	bx	lr
 801b7c8:	2000      	movs	r0, #0
 801b7ca:	4770      	bx	lr
 801b7cc:	2001      	movs	r0, #1
}
 801b7ce:	4770      	bx	lr

0801b7d0 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 801b7d0:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801b7d2:	f7ff ff5a 	bl	801b68a <lfs_mlist_remove>

    return 0;
}
 801b7d6:	2000      	movs	r0, #0
 801b7d8:	bd08      	pop	{r3, pc}

0801b7da <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 801b7da:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801b7dc:	4770      	bx	lr

0801b7de <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801b7de:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b7e0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b7e4:	d101      	bne.n	801b7ea <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 801b7e6:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 801b7e8:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 801b7ea:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801b7ec:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801b7ee:	4298      	cmp	r0, r3
 801b7f0:	bf38      	it	cc
 801b7f2:	4618      	movcc	r0, r3
 801b7f4:	4770      	bx	lr

0801b7f6 <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801b7f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b7f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 801b7fc:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801b800:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801b802:	4770      	bx	lr

0801b804 <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 801b804:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801b806:	4b13      	ldr	r3, [pc, #76]	@ (801b854 <lfs_fs_prepmove+0x50>)
 801b808:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801b80a:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801b80c:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 801b810:	4561      	cmp	r1, ip
 801b812:	d017      	beq.n	801b844 <lfs_fs_prepmove+0x40>
 801b814:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 801b818:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 801b81c:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801b820:	ea43 030c 	orr.w	r3, r3, ip
 801b824:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801b826:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801b82a:	4299      	cmp	r1, r3
 801b82c:	d00d      	beq.n	801b84a <lfs_fs_prepmove+0x46>
 801b82e:	6813      	ldr	r3, [r2, #0]
 801b830:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801b832:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801b836:	4299      	cmp	r1, r3
 801b838:	d009      	beq.n	801b84e <lfs_fs_prepmove+0x4a>
 801b83a:	6853      	ldr	r3, [r2, #4]
 801b83c:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801b83e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b842:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801b844:	f04f 0c00 	mov.w	ip, #0
 801b848:	e7ea      	b.n	801b820 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801b84a:	2300      	movs	r3, #0
 801b84c:	e7f0      	b.n	801b830 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801b84e:	2300      	movs	r3, #0
 801b850:	e7f4      	b.n	801b83c <lfs_fs_prepmove+0x38>
 801b852:	bf00      	nop
 801b854:	800003ff 	.word	0x800003ff

0801b858 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 801b858:	6803      	ldr	r3, [r0, #0]
 801b85a:	3301      	adds	r3, #1
 801b85c:	6003      	str	r3, [r0, #0]
    return 0;
}
 801b85e:	2000      	movs	r0, #0
 801b860:	4770      	bx	lr
	...

0801b864 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801b864:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 801b866:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b868:	428b      	cmp	r3, r1
 801b86a:	d905      	bls.n	801b878 <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801b86c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b86e:	68c3      	ldr	r3, [r0, #12]
 801b870:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801b872:	2800      	cmp	r0, #0
 801b874:	dc07      	bgt.n	801b886 <lfs_bd_erase+0x22>
}
 801b876:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 801b878:	4b06      	ldr	r3, [pc, #24]	@ (801b894 <lfs_bd_erase+0x30>)
 801b87a:	4a07      	ldr	r2, [pc, #28]	@ (801b898 <lfs_bd_erase+0x34>)
 801b87c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801b880:	4806      	ldr	r0, [pc, #24]	@ (801b89c <lfs_bd_erase+0x38>)
 801b882:	f00e fee3 	bl	802a64c <__assert_func>
    LFS_ASSERT(err <= 0);
 801b886:	4b06      	ldr	r3, [pc, #24]	@ (801b8a0 <lfs_bd_erase+0x3c>)
 801b888:	4a03      	ldr	r2, [pc, #12]	@ (801b898 <lfs_bd_erase+0x34>)
 801b88a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801b88e:	4803      	ldr	r0, [pc, #12]	@ (801b89c <lfs_bd_erase+0x38>)
 801b890:	f00e fedc 	bl	802a64c <__assert_func>
 801b894:	08039a94 	.word	0x08039a94
 801b898:	0803a6f4 	.word	0x0803a6f4
 801b89c:	080399a8 	.word	0x080399a8
 801b8a0:	080399d8 	.word	0x080399d8

0801b8a4 <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 801b8a4:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b8a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801b8a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b8ac:	b90a      	cbnz	r2, 801b8b2 <lfs_fs_preporphans+0xe>
 801b8ae:	2900      	cmp	r1, #0
 801b8b0:	db12      	blt.n	801b8d8 <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801b8b2:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 801b8b6:	d901      	bls.n	801b8bc <lfs_fs_preporphans+0x18>
 801b8b8:	2900      	cmp	r1, #0
 801b8ba:	dc14      	bgt.n	801b8e6 <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 801b8bc:	4419      	add	r1, r3
 801b8be:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801b8c0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 801b8c4:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 801b8c8:	3900      	subs	r1, #0
 801b8ca:	bf18      	it	ne
 801b8cc:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801b8ce:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801b8d2:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801b8d4:	2000      	movs	r0, #0
 801b8d6:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b8d8:	4b06      	ldr	r3, [pc, #24]	@ (801b8f4 <lfs_fs_preporphans+0x50>)
 801b8da:	4a07      	ldr	r2, [pc, #28]	@ (801b8f8 <lfs_fs_preporphans+0x54>)
 801b8dc:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 801b8e0:	4806      	ldr	r0, [pc, #24]	@ (801b8fc <lfs_fs_preporphans+0x58>)
 801b8e2:	f00e feb3 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801b8e6:	4b06      	ldr	r3, [pc, #24]	@ (801b900 <lfs_fs_preporphans+0x5c>)
 801b8e8:	4a03      	ldr	r2, [pc, #12]	@ (801b8f8 <lfs_fs_preporphans+0x54>)
 801b8ea:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801b8ee:	4803      	ldr	r0, [pc, #12]	@ (801b8fc <lfs_fs_preporphans+0x58>)
 801b8f0:	f00e feac 	bl	802a64c <__assert_func>
 801b8f4:	080399e4 	.word	0x080399e4
 801b8f8:	0803a6c4 	.word	0x0803a6c4
 801b8fc:	080399a8 	.word	0x080399a8
 801b900:	08039a1c 	.word	0x08039a1c

0801b904 <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801b904:	b510      	push	{r4, lr}
 801b906:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801b908:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b90a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b90c:	21ff      	movs	r1, #255	@ 0xff
 801b90e:	68e0      	ldr	r0, [r4, #12]
 801b910:	f011 fbee 	bl	802d0f0 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801b914:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b918:	6023      	str	r3, [r4, #0]
}
 801b91a:	bd10      	pop	{r4, pc}

0801b91c <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 801b91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 801b91e:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 801b920:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b922:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 801b924:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 801b926:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 801b92a:	42bd      	cmp	r5, r7
 801b92c:	d312      	bcc.n	801b954 <lfs_ctz_index+0x38>
 801b92e:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801b930:	3801      	subs	r0, #1
 801b932:	f7f5 fa29 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 801b936:	1c84      	adds	r4, r0, #2
 801b938:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801b93c:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 801b940:	fb04 5517 	mls	r5, r4, r7, r5
 801b944:	4620      	mov	r0, r4
 801b946:	f7f5 fa1f 	bl	8010d88 <__popcountsi2>
 801b94a:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801b94e:	6035      	str	r5, [r6, #0]
    return i;
 801b950:	4620      	mov	r0, r4
}
 801b952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801b954:	2000      	movs	r0, #0
 801b956:	e7fc      	b.n	801b952 <lfs_ctz_index+0x36>

0801b958 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 801b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b95c:	b087      	sub	sp, #28
 801b95e:	4615      	mov	r5, r2
 801b960:	469b      	mov	fp, r3
 801b962:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b964:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b966:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801b96a:	eb04 020a 	add.w	r2, r4, sl
 801b96e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b972:	429a      	cmp	r2, r3
 801b974:	f200 80d0 	bhi.w	801bb18 <lfs_bd_read+0x1c0>
 801b978:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 801b97a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	f000 80c7 	beq.w	801bb10 <lfs_bd_read+0x1b8>
 801b982:	42bb      	cmp	r3, r7
 801b984:	f240 80cb 	bls.w	801bb1e <lfs_bd_read+0x1c6>
 801b988:	9003      	str	r0, [sp, #12]
 801b98a:	e084      	b.n	801ba96 <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 801b98c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b990:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b994:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 801b996:	42a1      	cmp	r1, r4
 801b998:	d91e      	bls.n	801b9d8 <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 801b99a:	42a3      	cmp	r3, r4
 801b99c:	d905      	bls.n	801b9aa <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 801b99e:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 801b9a0:	4553      	cmp	r3, sl
 801b9a2:	bf28      	it	cs
 801b9a4:	4653      	movcs	r3, sl
 801b9a6:	4698      	mov	r8, r3
 801b9a8:	e081      	b.n	801baae <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801b9aa:	1b19      	subs	r1, r3, r4
 801b9ac:	eb02 0801 	add.w	r8, r2, r1
 801b9b0:	45d0      	cmp	r8, sl
 801b9b2:	bf28      	it	cs
 801b9b4:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801b9b6:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801b9ba:	1ae3      	subs	r3, r4, r3
 801b9bc:	4642      	mov	r2, r8
 801b9be:	4419      	add	r1, r3
 801b9c0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b9c2:	f012 fdd1 	bl	802e568 <memcpy>
                data += diff;
 801b9c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b9c8:	4443      	add	r3, r8
 801b9ca:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801b9cc:	4444      	add	r4, r8
                size -= diff;
 801b9ce:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801b9d2:	e060      	b.n	801ba96 <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 801b9d4:	46d0      	mov	r8, sl
 801b9d6:	e06a      	b.n	801baae <lfs_bd_read+0x156>
 801b9d8:	46d0      	mov	r8, sl
 801b9da:	e068      	b.n	801baae <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 801b9dc:	686b      	ldr	r3, [r5, #4]
 801b9de:	68aa      	ldr	r2, [r5, #8]
 801b9e0:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 801b9e2:	42a1      	cmp	r1, r4
 801b9e4:	d966      	bls.n	801bab4 <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 801b9e6:	42a3      	cmp	r3, r4
 801b9e8:	d904      	bls.n	801b9f4 <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 801b9ea:	1b1b      	subs	r3, r3, r4
 801b9ec:	4598      	cmp	r8, r3
 801b9ee:	bf28      	it	cs
 801b9f0:	4698      	movcs	r8, r3
 801b9f2:	e05f      	b.n	801bab4 <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801b9f4:	1b19      	subs	r1, r3, r4
 801b9f6:	440a      	add	r2, r1
 801b9f8:	4590      	cmp	r8, r2
 801b9fa:	bf28      	it	cs
 801b9fc:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801b9fe:	68e9      	ldr	r1, [r5, #12]
 801ba00:	1ae3      	subs	r3, r4, r3
 801ba02:	4642      	mov	r2, r8
 801ba04:	4419      	add	r1, r3
 801ba06:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ba08:	f012 fdae 	bl	802e568 <memcpy>
                data += diff;
 801ba0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ba0e:	4443      	add	r3, r8
 801ba10:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801ba12:	4444      	add	r4, r8
                size -= diff;
 801ba14:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801ba18:	e03d      	b.n	801ba96 <lfs_bd_read+0x13e>
            data += diff;
 801ba1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ba1c:	9b04      	ldr	r3, [sp, #16]
 801ba1e:	441a      	add	r2, r3
 801ba20:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 801ba22:	441c      	add	r4, r3
            size -= diff;
 801ba24:	9b05      	ldr	r3, [sp, #20]
 801ba26:	eba3 0308 	sub.w	r3, r3, r8
 801ba2a:	449a      	add	sl, r3
            continue;
 801ba2c:	e033      	b.n	801ba96 <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801ba2e:	9b03      	ldr	r3, [sp, #12]
 801ba30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ba32:	b10b      	cbz	r3, 801ba38 <lfs_bd_read+0xe0>
 801ba34:	42bb      	cmp	r3, r7
 801ba36:	d95f      	bls.n	801baf8 <lfs_bd_read+0x1a0>
        rcache->block = block;
 801ba38:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801ba3a:	9e03      	ldr	r6, [sp, #12]
 801ba3c:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801ba3e:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 801ba40:	fbb4 f3f2 	udiv	r3, r4, r2
 801ba44:	fb02 4313 	mls	r3, r2, r3, r4
 801ba48:	1ae2      	subs	r2, r4, r3
 801ba4a:	606a      	str	r2, [r5, #4]
                lfs_min(
 801ba4c:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801ba50:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 801ba54:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801ba58:	4401      	add	r1, r0
 801ba5a:	3901      	subs	r1, #1
    return a - (a % alignment);
 801ba5c:	fbb1 fef0 	udiv	lr, r1, r0
 801ba60:	fb00 101e 	mls	r0, r0, lr, r1
 801ba64:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 801ba66:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 801ba6a:	1b1b      	subs	r3, r3, r4
 801ba6c:	4288      	cmp	r0, r1
 801ba6e:	bf94      	ite	ls
 801ba70:	181b      	addls	r3, r3, r0
 801ba72:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 801ba74:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 801ba78:	428b      	cmp	r3, r1
 801ba7a:	bf28      	it	cs
 801ba7c:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 801ba7e:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801ba80:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 801ba82:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801ba86:	9300      	str	r3, [sp, #0]
 801ba88:	68eb      	ldr	r3, [r5, #12]
 801ba8a:	4639      	mov	r1, r7
 801ba8c:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 801ba8e:	1e03      	subs	r3, r0, #0
 801ba90:	dc38      	bgt.n	801bb04 <lfs_bd_read+0x1ac>
        if (err) {
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d146      	bne.n	801bb24 <lfs_bd_read+0x1cc>
    while (size > 0) {
 801ba96:	f1ba 0f00 	cmp.w	sl, #0
 801ba9a:	d03b      	beq.n	801bb14 <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 801ba9c:	f1b9 0f00 	cmp.w	r9, #0
 801baa0:	d098      	beq.n	801b9d4 <lfs_bd_read+0x7c>
 801baa2:	f8d9 3000 	ldr.w	r3, [r9]
 801baa6:	42bb      	cmp	r3, r7
 801baa8:	f43f af70 	beq.w	801b98c <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 801baac:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 801baae:	682b      	ldr	r3, [r5, #0]
 801bab0:	42bb      	cmp	r3, r7
 801bab2:	d093      	beq.n	801b9dc <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801bab4:	45da      	cmp	sl, fp
 801bab6:	d3ba      	bcc.n	801ba2e <lfs_bd_read+0xd6>
 801bab8:	9b03      	ldr	r3, [sp, #12]
 801baba:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801babc:	69c2      	ldr	r2, [r0, #28]
 801babe:	fbb4 f3f2 	udiv	r3, r4, r2
 801bac2:	fb02 4313 	mls	r3, r2, r3, r4
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d1b1      	bne.n	801ba2e <lfs_bd_read+0xd6>
 801baca:	4552      	cmp	r2, sl
 801bacc:	d8af      	bhi.n	801ba2e <lfs_bd_read+0xd6>
    return a - (a % alignment);
 801bace:	fbb8 f3f2 	udiv	r3, r8, r2
 801bad2:	fb02 8313 	mls	r3, r2, r3, r8
 801bad6:	9305      	str	r3, [sp, #20]
 801bad8:	eba8 0203 	sub.w	r2, r8, r3
 801badc:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801bade:	6842      	ldr	r2, [r0, #4]
 801bae0:	4616      	mov	r6, r2
 801bae2:	9304      	str	r3, [sp, #16]
 801bae4:	9300      	str	r3, [sp, #0]
 801bae6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bae8:	4622      	mov	r2, r4
 801baea:	4639      	mov	r1, r7
 801baec:	47b0      	blx	r6
            if (err) {
 801baee:	2800      	cmp	r0, #0
 801baf0:	d093      	beq.n	801ba1a <lfs_bd_read+0xc2>
}
 801baf2:	b007      	add	sp, #28
 801baf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801baf8:	4b0b      	ldr	r3, [pc, #44]	@ (801bb28 <lfs_bd_read+0x1d0>)
 801bafa:	4a0c      	ldr	r2, [pc, #48]	@ (801bb2c <lfs_bd_read+0x1d4>)
 801bafc:	216b      	movs	r1, #107	@ 0x6b
 801bafe:	480c      	ldr	r0, [pc, #48]	@ (801bb30 <lfs_bd_read+0x1d8>)
 801bb00:	f00e fda4 	bl	802a64c <__assert_func>
        LFS_ASSERT(err <= 0);
 801bb04:	4b0b      	ldr	r3, [pc, #44]	@ (801bb34 <lfs_bd_read+0x1dc>)
 801bb06:	4a09      	ldr	r2, [pc, #36]	@ (801bb2c <lfs_bd_read+0x1d4>)
 801bb08:	2176      	movs	r1, #118	@ 0x76
 801bb0a:	4809      	ldr	r0, [pc, #36]	@ (801bb30 <lfs_bd_read+0x1d8>)
 801bb0c:	f00e fd9e 	bl	802a64c <__assert_func>
 801bb10:	9003      	str	r0, [sp, #12]
 801bb12:	e7c0      	b.n	801ba96 <lfs_bd_read+0x13e>
    return 0;
 801bb14:	2000      	movs	r0, #0
 801bb16:	e7ec      	b.n	801baf2 <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 801bb18:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801bb1c:	e7e9      	b.n	801baf2 <lfs_bd_read+0x19a>
 801bb1e:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801bb22:	e7e6      	b.n	801baf2 <lfs_bd_read+0x19a>
 801bb24:	4618      	mov	r0, r3
 801bb26:	e7e4      	b.n	801baf2 <lfs_bd_read+0x19a>
 801bb28:	08039a54 	.word	0x08039a54
 801bb2c:	0803a71c 	.word	0x0803a71c
 801bb30:	080399a8 	.word	0x080399a8
 801bb34:	080399d8 	.word	0x080399d8

0801bb38 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb3c:	b089      	sub	sp, #36	@ 0x24
 801bb3e:	4607      	mov	r7, r0
 801bb40:	468a      	mov	sl, r1
 801bb42:	4690      	mov	r8, r2
 801bb44:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 801bb46:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 801bb48:	690b      	ldr	r3, [r1, #16]
 801bb4a:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801bb4c:	303c      	adds	r0, #60	@ 0x3c
 801bb4e:	f7ff fd73 	bl	801b638 <lfs_gstate_hasmovehere>
 801bb52:	2800      	cmp	r0, #0
 801bb54:	f000 808d 	beq.w	801bc72 <lfs_dir_getslice+0x13a>
    return (tag & 0x000ffc00) >> 10;
 801bb58:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	f000 808a 	beq.w	801bc76 <lfs_dir_getslice+0x13e>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801bb62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801bb64:	f3c2 238f 	ubfx	r3, r2, #10, #16
 801bb68:	f3c2 2289 	ubfx	r2, r2, #10, #10
 801bb6c:	f3cb 218f 	ubfx	r1, fp, #10, #16
 801bb70:	f3cb 2089 	ubfx	r0, fp, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801bb74:	404b      	eors	r3, r1
 801bb76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	f000 8085 	beq.w	801bc8a <lfs_dir_getslice+0x152>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801bb80:	4282      	cmp	r2, r0
 801bb82:	d37a      	bcc.n	801bc7a <lfs_dir_getslice+0x142>
    lfs_stag_t gdiff = 0;
 801bb84:	2600      	movs	r6, #0
 801bb86:	e006      	b.n	801bb96 <lfs_dir_getslice+0x5e>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801bb88:	9605      	str	r6, [sp, #20]
 801bb8a:	ebab 0306 	sub.w	r3, fp, r6
 801bb8e:	4063      	eors	r3, r4
 801bb90:	ea13 0f08 	tst.w	r3, r8
 801bb94:	d048      	beq.n	801bc28 <lfs_dir_getslice+0xf0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801bb96:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801bb98:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bb9c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801bba0:	bf14      	ite	ne
 801bba2:	4623      	movne	r3, r4
 801bba4:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 801bba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bbaa:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801bbac:	3308      	adds	r3, #8
 801bbae:	42ab      	cmp	r3, r5
 801bbb0:	d865      	bhi.n	801bc7e <lfs_dir_getslice+0x146>
        off -= lfs_tag_dsize(ntag);
 801bbb2:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 801bbb4:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 801bbb8:	2304      	movs	r3, #4
 801bbba:	9303      	str	r3, [sp, #12]
 801bbbc:	a907      	add	r1, sp, #28
 801bbbe:	9102      	str	r1, [sp, #8]
 801bbc0:	9501      	str	r5, [sp, #4]
 801bbc2:	9200      	str	r2, [sp, #0]
 801bbc4:	463a      	mov	r2, r7
 801bbc6:	2100      	movs	r1, #0
 801bbc8:	4638      	mov	r0, r7
 801bbca:	f7ff fec5 	bl	801b958 <lfs_bd_read>
        if (err) {
 801bbce:	4603      	mov	r3, r0
 801bbd0:	2800      	cmp	r0, #0
 801bbd2:	d156      	bne.n	801bc82 <lfs_dir_getslice+0x14a>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801bbd4:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801bbd6:	ba1b      	rev	r3, r3
 801bbd8:	4063      	eors	r3, r4
 801bbda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bbde:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 801bbe0:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d0cf      	beq.n	801bb88 <lfs_dir_getslice+0x50>
    return (tag & 0x70000000) >> 20;
 801bbe8:	0d23      	lsrs	r3, r4, #20
 801bbea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 801bbee:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801bbf2:	d1c9      	bne.n	801bb88 <lfs_dir_getslice+0x50>
    return (tag & 0x000ffc00) >> 10;
 801bbf4:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801bbf8:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 801bbfc:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801bc00:	4584      	cmp	ip, r0
 801bc02:	d3c1      	bcc.n	801bb88 <lfs_dir_getslice+0x50>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801bc04:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801bc08:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801bc0c:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801bc10:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801bc14:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801bc18:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801bc1c:	42a2      	cmp	r2, r4
 801bc1e:	d037      	beq.n	801bc90 <lfs_dir_getslice+0x158>
    return (int8_t)lfs_tag_chunk(tag);
 801bc20:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801bc22:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 801bc26:	e7af      	b.n	801bb88 <lfs_dir_getslice+0x50>
            if (lfs_tag_isdelete(tag)) {
 801bc28:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801bc2c:	d033      	beq.n	801bc96 <lfs_dir_getslice+0x15e>
    return tag & 0x000003ff;
 801bc2e:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 801bc32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bc34:	429e      	cmp	r6, r3
 801bc36:	bf28      	it	cs
 801bc38:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801bc3a:	f8da 2000 	ldr.w	r2, [sl]
 801bc3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bc40:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 801bc42:	9603      	str	r6, [sp, #12]
 801bc44:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801bc46:	9102      	str	r1, [sp, #8]
 801bc48:	3304      	adds	r3, #4
 801bc4a:	9301      	str	r3, [sp, #4]
 801bc4c:	9200      	str	r2, [sp, #0]
 801bc4e:	4633      	mov	r3, r6
 801bc50:	463a      	mov	r2, r7
 801bc52:	2100      	movs	r1, #0
 801bc54:	4638      	mov	r0, r7
 801bc56:	f7ff fe7f 	bl	801b958 <lfs_bd_read>
            if (err) {
 801bc5a:	4603      	mov	r3, r0
 801bc5c:	b988      	cbnz	r0, 801bc82 <lfs_dir_getslice+0x14a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801bc5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bc60:	1b9a      	subs	r2, r3, r6
 801bc62:	2100      	movs	r1, #0
 801bc64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bc66:	1998      	adds	r0, r3, r6
 801bc68:	f011 fa42 	bl	802d0f0 <memset>
            return tag + gdiff;
 801bc6c:	9b05      	ldr	r3, [sp, #20]
 801bc6e:	4423      	add	r3, r4
 801bc70:	e007      	b.n	801bc82 <lfs_dir_getslice+0x14a>
    lfs_stag_t gdiff = 0;
 801bc72:	2600      	movs	r6, #0
 801bc74:	e78f      	b.n	801bb96 <lfs_dir_getslice+0x5e>
 801bc76:	2600      	movs	r6, #0
 801bc78:	e78d      	b.n	801bb96 <lfs_dir_getslice+0x5e>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801bc7a:	4e08      	ldr	r6, [pc, #32]	@ (801bc9c <lfs_dir_getslice+0x164>)
 801bc7c:	e78b      	b.n	801bb96 <lfs_dir_getslice+0x5e>
    return LFS_ERR_NOENT;
 801bc7e:	f06f 0301 	mvn.w	r3, #1
}
 801bc82:	4618      	mov	r0, r3
 801bc84:	b009      	add	sp, #36	@ 0x24
 801bc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 801bc8a:	f06f 0301 	mvn.w	r3, #1
 801bc8e:	e7f8      	b.n	801bc82 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801bc90:	f06f 0301 	mvn.w	r3, #1
 801bc94:	e7f5      	b.n	801bc82 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801bc96:	f06f 0301 	mvn.w	r3, #1
 801bc9a:	e7f2      	b.n	801bc82 <lfs_dir_getslice+0x14a>
 801bc9c:	fffffc00 	.word	0xfffffc00

0801bca0 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801bca0:	b510      	push	{r4, lr}
 801bca2:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 801bca4:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 801bca8:	9402      	str	r4, [sp, #8]
 801bcaa:	9c06      	ldr	r4, [sp, #24]
 801bcac:	9401      	str	r4, [sp, #4]
 801bcae:	2400      	movs	r4, #0
 801bcb0:	9400      	str	r4, [sp, #0]
 801bcb2:	f7ff ff41 	bl	801bb38 <lfs_dir_getslice>
}
 801bcb6:	b004      	add	sp, #16
 801bcb8:	bd10      	pop	{r4, pc}
	...

0801bcbc <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 801bcbc:	b510      	push	{r4, lr}
 801bcbe:	b086      	sub	sp, #24
 801bcc0:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801bcc2:	ab03      	add	r3, sp, #12
 801bcc4:	9300      	str	r3, [sp, #0]
 801bcc6:	4b09      	ldr	r3, [pc, #36]	@ (801bcec <lfs_dir_getgstate+0x30>)
 801bcc8:	4a09      	ldr	r2, [pc, #36]	@ (801bcf0 <lfs_dir_getgstate+0x34>)
 801bcca:	f7ff ffe9 	bl	801bca0 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 801bcce:	2800      	cmp	r0, #0
 801bcd0:	da04      	bge.n	801bcdc <lfs_dir_getgstate+0x20>
 801bcd2:	f110 0f02 	cmn.w	r0, #2
 801bcd6:	d106      	bne.n	801bce6 <lfs_dir_getgstate+0x2a>
    return 0;
 801bcd8:	2000      	movs	r0, #0
 801bcda:	e004      	b.n	801bce6 <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 801bcdc:	a903      	add	r1, sp, #12
 801bcde:	4620      	mov	r0, r4
 801bce0:	f7ff fc98 	bl	801b614 <lfs_gstate_xor>
    return 0;
 801bce4:	2000      	movs	r0, #0
}
 801bce6:	b006      	add	sp, #24
 801bce8:	bd10      	pop	{r4, pc}
 801bcea:	bf00      	nop
 801bcec:	7ff0000c 	.word	0x7ff0000c
 801bcf0:	7ff00000 	.word	0x7ff00000

0801bcf4 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 801bcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcf8:	b089      	sub	sp, #36	@ 0x24
 801bcfa:	461c      	mov	r4, r3
 801bcfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bcfe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801bd00:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 801bd02:	b923      	cbnz	r3, 801bd0e <lfs_ctz_traverse+0x1a>
        return 0;
 801bd04:	2300      	movs	r3, #0
}
 801bd06:	4618      	mov	r0, r3
 801bd08:	b009      	add	sp, #36	@ 0x24
 801bd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd0e:	4680      	mov	r8, r0
 801bd10:	4689      	mov	r9, r1
 801bd12:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801bd14:	3b01      	subs	r3, #1
 801bd16:	9307      	str	r3, [sp, #28]
 801bd18:	a907      	add	r1, sp, #28
 801bd1a:	f7ff fdff 	bl	801b91c <lfs_ctz_index>
 801bd1e:	4605      	mov	r5, r0
        int err = cb(data, head);
 801bd20:	4621      	mov	r1, r4
 801bd22:	4638      	mov	r0, r7
 801bd24:	47b0      	blx	r6
        if (err) {
 801bd26:	4603      	mov	r3, r0
 801bd28:	2800      	cmp	r0, #0
 801bd2a:	d1ec      	bne.n	801bd06 <lfs_ctz_traverse+0x12>
        if (index == 0) {
 801bd2c:	2d00      	cmp	r5, #0
 801bd2e:	d0ea      	beq.n	801bd06 <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 801bd30:	f005 0b01 	and.w	fp, r5, #1
 801bd34:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 801bd38:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 801bd3a:	9303      	str	r3, [sp, #12]
 801bd3c:	aa05      	add	r2, sp, #20
 801bd3e:	9202      	str	r2, [sp, #8]
 801bd40:	2200      	movs	r2, #0
 801bd42:	9201      	str	r2, [sp, #4]
 801bd44:	9400      	str	r4, [sp, #0]
 801bd46:	4652      	mov	r2, sl
 801bd48:	4649      	mov	r1, r9
 801bd4a:	4640      	mov	r0, r8
 801bd4c:	f7ff fe04 	bl	801b958 <lfs_bd_read>
        if (err) {
 801bd50:	4604      	mov	r4, r0
 801bd52:	b9c8      	cbnz	r0, 801bd88 <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 801bd54:	43eb      	mvns	r3, r5
 801bd56:	f003 0301 	and.w	r3, r3, #1
 801bd5a:	42a3      	cmp	r3, r4
 801bd5c:	dd0b      	ble.n	801bd76 <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 801bd5e:	ab08      	add	r3, sp, #32
 801bd60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801bd64:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801bd68:	4638      	mov	r0, r7
 801bd6a:	47b0      	blx	r6
            if (err) {
 801bd6c:	4603      	mov	r3, r0
 801bd6e:	2800      	cmp	r0, #0
 801bd70:	d1c9      	bne.n	801bd06 <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 801bd72:	3401      	adds	r4, #1
 801bd74:	e7ee      	b.n	801bd54 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 801bd76:	aa08      	add	r2, sp, #32
 801bd78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bd7c:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 801bd80:	f1ab 0b02 	sub.w	fp, fp, #2
 801bd84:	445d      	add	r5, fp
    while (true) {
 801bd86:	e7cb      	b.n	801bd20 <lfs_ctz_traverse+0x2c>
            return err;
 801bd88:	4603      	mov	r3, r0
 801bd8a:	e7bc      	b.n	801bd06 <lfs_ctz_traverse+0x12>

0801bd8c <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 801bd8c:	b530      	push	{r4, r5, lr}
 801bd8e:	b087      	sub	sp, #28
 801bd90:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 801bd92:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 801bd94:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801bd96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 801bd98:	6811      	ldr	r1, [r2, #0]
 801bd9a:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 801bd9c:	2508      	movs	r5, #8
 801bd9e:	9503      	str	r5, [sp, #12]
 801bda0:	ad04      	add	r5, sp, #16
 801bda2:	9502      	str	r5, [sp, #8]
 801bda4:	9201      	str	r2, [sp, #4]
 801bda6:	9100      	str	r1, [sp, #0]
 801bda8:	4602      	mov	r2, r0
 801bdaa:	f100 0110 	add.w	r1, r0, #16
 801bdae:	f7ff fdd3 	bl	801b958 <lfs_bd_read>
    if (err) {
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	b978      	cbnz	r0, 801bdd6 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801bdb6:	9a04      	ldr	r2, [sp, #16]
 801bdb8:	6861      	ldr	r1, [r4, #4]
 801bdba:	4291      	cmp	r1, r2
 801bdbc:	d008      	beq.n	801bdd0 <lfs_fs_parent_match+0x44>
 801bdbe:	9d05      	ldr	r5, [sp, #20]
 801bdc0:	68a0      	ldr	r0, [r4, #8]
 801bdc2:	4285      	cmp	r5, r0
 801bdc4:	d004      	beq.n	801bdd0 <lfs_fs_parent_match+0x44>
 801bdc6:	4282      	cmp	r2, r0
 801bdc8:	d002      	beq.n	801bdd0 <lfs_fs_parent_match+0x44>
 801bdca:	42a9      	cmp	r1, r5
 801bdcc:	d000      	beq.n	801bdd0 <lfs_fs_parent_match+0x44>
 801bdce:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 801bdd0:	3b00      	subs	r3, #0
 801bdd2:	bf18      	it	ne
 801bdd4:	2301      	movne	r3, #1
}
 801bdd6:	4618      	mov	r0, r3
 801bdd8:	b007      	add	sp, #28
 801bdda:	bd30      	pop	{r4, r5, pc}

0801bddc <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801bddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bde0:	b0af      	sub	sp, #188	@ 0xbc
 801bde2:	9007      	str	r0, [sp, #28]
 801bde4:	460e      	mov	r6, r1
 801bde6:	4617      	mov	r7, r2
 801bde8:	461c      	mov	r4, r3
 801bdea:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 801bdee:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 801bdf2:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 801bdf6:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 801bdfa:	9304      	str	r3, [sp, #16]
 801bdfc:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 801be00:	9305      	str	r3, [sp, #20]
 801be02:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 801be06:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 801be08:	2500      	movs	r5, #0
 801be0a:	950d      	str	r5, [sp, #52]	@ 0x34
 801be0c:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 801be0e:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801be12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801be16:	bf14      	ite	ne
 801be18:	46a1      	movne	r9, r4
 801be1a:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 801be1e:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801be22:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801be26:	44b9      	add	r9, r7
 801be28:	68f3      	ldr	r3, [r6, #12]
 801be2a:	4599      	cmp	r9, r3
 801be2c:	d35e      	bcc.n	801beec <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 801be2e:	f1bb 0f00 	cmp.w	fp, #0
 801be32:	f340 80fa 	ble.w	801c02a <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 801be36:	f8d8 3000 	ldr.w	r3, [r8]
 801be3a:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 801be3c:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 801be40:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 801be44:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801be48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801be4a:	4ba9      	ldr	r3, [pc, #676]	@ (801c0f0 <lfs_dir_traverse+0x314>)
 801be4c:	ea0a 0303 	and.w	r3, sl, r3
 801be50:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801be52:	404a      	eors	r2, r1
 801be54:	401a      	ands	r2, r3
 801be56:	d1da      	bne.n	801be0e <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 801be58:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	f000 8116 	beq.w	801c08e <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801be62:	2d02      	cmp	r5, #2
 801be64:	d862      	bhi.n	801bf2c <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 801be66:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801be6a:	a82e      	add	r0, sp, #184	@ 0xb8
 801be6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801be70:	f843 6c78 	str.w	r6, [r3, #-120]
 801be74:	f843 7c74 	str.w	r7, [r3, #-116]
 801be78:	f843 4c70 	str.w	r4, [r3, #-112]
 801be7c:	f843 8c6c 	str.w	r8, [r3, #-108]
 801be80:	f843 bc68 	str.w	fp, [r3, #-104]
 801be84:	f843 ac64 	str.w	sl, [r3, #-100]
 801be88:	983b      	ldr	r0, [sp, #236]	@ 0xec
 801be8a:	f843 0c60 	str.w	r0, [r3, #-96]
 801be8e:	9804      	ldr	r0, [sp, #16]
 801be90:	f823 0c5c 	strh.w	r0, [r3, #-92]
 801be94:	9805      	ldr	r0, [sp, #20]
 801be96:	f823 0c5a 	strh.w	r0, [r3, #-90]
 801be9a:	9806      	ldr	r0, [sp, #24]
 801be9c:	f823 0c58 	strh.w	r0, [r3, #-88]
 801bea0:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 801bea2:	f843 0c54 	str.w	r0, [r3, #-84]
 801bea6:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801bea8:	f843 0c50 	str.w	r0, [r3, #-80]
 801beac:	f843 1c4c 	str.w	r1, [r3, #-76]
 801beb0:	f843 9c48 	str.w	r9, [r3, #-72]
 801beb4:	3b44      	subs	r3, #68	@ 0x44
 801beb6:	a90d      	add	r1, sp, #52	@ 0x34
 801beb8:	c903      	ldmia	r1, {r0, r1}
 801beba:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 801bebe:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801bec2:	009b      	lsls	r3, r3, #2
 801bec4:	3328      	adds	r3, #40	@ 0x28
 801bec6:	a910      	add	r1, sp, #64	@ 0x40
 801bec8:	440b      	add	r3, r1
 801beca:	3304      	adds	r3, #4
 801becc:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 801bece:	3501      	adds	r5, #1
                ttag = 0;
 801bed0:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 801bed2:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 801bed4:	4b87      	ldr	r3, [pc, #540]	@ (801c0f4 <lfs_dir_traverse+0x318>)
 801bed6:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 801bed8:	2300      	movs	r3, #0
 801beda:	9306      	str	r3, [sp, #24]
                end = 0;
 801bedc:	9305      	str	r3, [sp, #20]
                begin = 0;
 801bede:	9304      	str	r3, [sp, #16]
 801bee0:	e795      	b.n	801be0e <lfs_dir_traverse+0x32>
 801bee2:	9d08      	ldr	r5, [sp, #32]
 801bee4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801bee6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801bee8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801beea:	e790      	b.n	801be0e <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 801beec:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 801beee:	2304      	movs	r3, #4
 801bef0:	9303      	str	r3, [sp, #12]
 801bef2:	a90f      	add	r1, sp, #60	@ 0x3c
 801bef4:	9102      	str	r1, [sp, #8]
 801bef6:	f8cd 9004 	str.w	r9, [sp, #4]
 801befa:	9200      	str	r2, [sp, #0]
 801befc:	9a07      	ldr	r2, [sp, #28]
 801befe:	2100      	movs	r1, #0
 801bf00:	4610      	mov	r0, r2
 801bf02:	f7ff fd29 	bl	801b958 <lfs_bd_read>
                if (err) {
 801bf06:	4603      	mov	r3, r0
 801bf08:	2800      	cmp	r0, #0
 801bf0a:	f040 80ec 	bne.w	801c0e6 <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801bf0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 801bf10:	ba1b      	rev	r3, r3
 801bf12:	4063      	eors	r3, r4
 801bf14:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 801bf18:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 801bf1a:	6833      	ldr	r3, [r6, #0]
 801bf1c:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 801bf1e:	f109 0304 	add.w	r3, r9, #4
 801bf22:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 801bf24:	464f      	mov	r7, r9
                buffer = &disk;
 801bf26:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 801bf2a:	e78d      	b.n	801be48 <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801bf2c:	4b72      	ldr	r3, [pc, #456]	@ (801c0f8 <lfs_dir_traverse+0x31c>)
 801bf2e:	4a73      	ldr	r2, [pc, #460]	@ (801c0fc <lfs_dir_traverse+0x320>)
 801bf30:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801bf34:	4872      	ldr	r0, [pc, #456]	@ (801c100 <lfs_dir_traverse+0x324>)
 801bf36:	f00e fb89 	bl	802a64c <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 801bf3a:	4b6e      	ldr	r3, [pc, #440]	@ (801c0f4 <lfs_dir_traverse+0x318>)
 801bf3c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801bf3e:	429a      	cmp	r2, r3
 801bf40:	f43f af65 	beq.w	801be0e <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 801bf44:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801bf48:	aa2e      	add	r2, sp, #184	@ 0xb8
 801bf4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bf4e:	223c      	movs	r2, #60	@ 0x3c
 801bf50:	2100      	movs	r1, #0
 801bf52:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf54:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 801bf58:	f011 f8ca 	bl	802d0f0 <memset>
 801bf5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf5e:	f843 6c78 	str.w	r6, [r3, #-120]
 801bf62:	f843 7c74 	str.w	r7, [r3, #-116]
 801bf66:	f843 4c70 	str.w	r4, [r3, #-112]
 801bf6a:	f843 8c6c 	str.w	r8, [r3, #-108]
 801bf6e:	f843 bc68 	str.w	fp, [r3, #-104]
 801bf72:	f843 ac64 	str.w	sl, [r3, #-100]
 801bf76:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801bf78:	f843 2c60 	str.w	r2, [r3, #-96]
 801bf7c:	9a04      	ldr	r2, [sp, #16]
 801bf7e:	f823 2c5c 	strh.w	r2, [r3, #-92]
 801bf82:	9a05      	ldr	r2, [sp, #20]
 801bf84:	f823 2c5a 	strh.w	r2, [r3, #-90]
 801bf88:	9906      	ldr	r1, [sp, #24]
 801bf8a:	f823 1c58 	strh.w	r1, [r3, #-88]
 801bf8e:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801bf90:	f843 2c54 	str.w	r2, [r3, #-84]
 801bf94:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801bf96:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 801bf9a:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 801bf9c:	9b08      	ldr	r3, [sp, #32]
 801bf9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801bfa2:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 801bfa4:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 801bfa8:	1c50      	adds	r0, r2, #1
 801bfaa:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 801bfac:	1a9b      	subs	r3, r3, r2
 801bfae:	fa11 f383 	uxtah	r3, r1, r3
 801bfb2:	b21b      	sxth	r3, r3
 801bfb4:	9306      	str	r3, [sp, #24]
            dir = buffer;
 801bfb6:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801bfb8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801bfbc:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801bfbe:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801c104 <lfs_dir_traverse+0x328>
            attrcount = 0;
 801bfc2:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 801bfc6:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 801bfc8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 801bfcc:	465f      	mov	r7, fp
 801bfce:	e71e      	b.n	801be0e <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801bfd0:	2300      	movs	r3, #0
 801bfd2:	9508      	str	r5, [sp, #32]
 801bfd4:	9609      	str	r6, [sp, #36]	@ 0x24
 801bfd6:	970a      	str	r7, [sp, #40]	@ 0x28
 801bfd8:	940b      	str	r4, [sp, #44]	@ 0x2c
 801bfda:	461c      	mov	r4, r3
 801bfdc:	9d06      	ldr	r5, [sp, #24]
 801bfde:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 801bfe0:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801bfe2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 801bfe4:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801bfe8:	4294      	cmp	r4, r2
 801bfea:	d219      	bcs.n	801c020 <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801bfec:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801bff0:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 801bff4:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 801bff8:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 801bffc:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801c000:	442b      	add	r3, r5
 801c002:	029b      	lsls	r3, r3, #10
 801c004:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 801c008:	6891      	ldr	r1, [r2, #8]
 801c00a:	6852      	ldr	r2, [r2, #4]
 801c00c:	4319      	orrs	r1, r3
 801c00e:	4638      	mov	r0, r7
 801c010:	47b0      	blx	r6
                if (res < 0) {
 801c012:	2800      	cmp	r0, #0
 801c014:	db66      	blt.n	801c0e4 <lfs_dir_traverse+0x308>
                if (res) {
 801c016:	2800      	cmp	r0, #0
 801c018:	f47f af63 	bne.w	801bee2 <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801c01c:	3401      	adds	r4, #1
 801c01e:	e7e0      	b.n	801bfe2 <lfs_dir_traverse+0x206>
 801c020:	9d08      	ldr	r5, [sp, #32]
 801c022:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801c024:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801c026:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c028:	e6f1      	b.n	801be0e <lfs_dir_traverse+0x32>
                res = 0;
 801c02a:	2300      	movs	r3, #0
    if (sp > 0) {
 801c02c:	2d00      	cmp	r5, #0
 801c02e:	d05a      	beq.n	801c0e6 <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801c030:	3d01      	subs	r5, #1
 801c032:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801c036:	aa2e      	add	r2, sp, #184	@ 0xb8
 801c038:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c03c:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801c040:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801c044:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801c048:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801c04c:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801c050:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801c054:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801c058:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801c05a:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801c05e:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801c060:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801c064:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801c066:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801c06a:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801c06c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801c070:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801c072:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801c076:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801c078:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801c07c:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801c07e:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801c082:	aa0d      	add	r2, sp, #52	@ 0x34
 801c084:	3b44      	subs	r3, #68	@ 0x44
 801c086:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c08a:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801c08e:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801c092:	b153      	cbz	r3, 801c0aa <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801c094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c096:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801c09a:	9a04      	ldr	r2, [sp, #16]
 801c09c:	429a      	cmp	r2, r3
 801c09e:	f63f aeb6 	bhi.w	801be0e <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801c0a2:	9a05      	ldr	r2, [sp, #20]
 801c0a4:	429a      	cmp	r2, r3
 801c0a6:	f67f aeb2 	bls.w	801be0e <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801c0aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c0ac:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801c0ae:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	f43f aeab 	beq.w	801be0e <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801c0b8:	f240 1201 	movw	r2, #257	@ 0x101
 801c0bc:	4293      	cmp	r3, r2
 801c0be:	f43f af3c 	beq.w	801bf3a <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801c0c2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801c0c6:	d083      	beq.n	801bfd0 <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801c0c8:	464a      	mov	r2, r9
 801c0ca:	9b08      	ldr	r3, [sp, #32]
 801c0cc:	9906      	ldr	r1, [sp, #24]
 801c0ce:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801c0d2:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801c0d4:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801c0d6:	4798      	blx	r3
            if (res < 0) {
 801c0d8:	1e03      	subs	r3, r0, #0
 801c0da:	db04      	blt.n	801c0e6 <lfs_dir_traverse+0x30a>
            if (res) {
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	f43f ae96 	beq.w	801be0e <lfs_dir_traverse+0x32>
 801c0e2:	e7a3      	b.n	801c02c <lfs_dir_traverse+0x250>
 801c0e4:	4603      	mov	r3, r0
}
 801c0e6:	4618      	mov	r0, r3
 801c0e8:	b02f      	add	sp, #188	@ 0xbc
 801c0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0ee:	bf00      	nop
 801c0f0:	7ff00000 	.word	0x7ff00000
 801c0f4:	0801b711 	.word	0x0801b711
 801c0f8:	08039a84 	.word	0x08039a84
 801c0fc:	0803a694 	.word	0x0803a694
 801c100:	080399a8 	.word	0x080399a8
 801c104:	600ffc00 	.word	0x600ffc00

0801c108 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c10c:	b087      	sub	sp, #28
 801c10e:	4606      	mov	r6, r0
 801c110:	468a      	mov	sl, r1
 801c112:	4617      	mov	r7, r2
 801c114:	461c      	mov	r4, r3
 801c116:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801c11a:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801c11e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c120:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801c124:	eb05 0208 	add.w	r2, r5, r8
 801c128:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801c12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c12c:	429a      	cmp	r2, r3
 801c12e:	d94d      	bls.n	801c1cc <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801c130:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801c134:	e076      	b.n	801c224 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	68ba      	ldr	r2, [r7, #8]
 801c13a:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801c13c:	42a9      	cmp	r1, r5
 801c13e:	d91c      	bls.n	801c17a <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801c140:	42ab      	cmp	r3, r5
 801c142:	d904      	bls.n	801c14e <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801c144:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801c146:	4543      	cmp	r3, r8
 801c148:	bf28      	it	cs
 801c14a:	4643      	movcs	r3, r8
 801c14c:	e048      	b.n	801c1e0 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801c14e:	1b59      	subs	r1, r3, r5
 801c150:	440a      	add	r2, r1
 801c152:	4542      	cmp	r2, r8
 801c154:	bf28      	it	cs
 801c156:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801c158:	68f9      	ldr	r1, [r7, #12]
 801c15a:	1aeb      	subs	r3, r5, r3
 801c15c:	9205      	str	r2, [sp, #20]
 801c15e:	4419      	add	r1, r3
 801c160:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c162:	f012 fa01 	bl	802e568 <memcpy>
                data += diff;
 801c166:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801c168:	9b05      	ldr	r3, [sp, #20]
 801c16a:	4419      	add	r1, r3
 801c16c:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801c16e:	441d      	add	r5, r3
                size -= diff;
 801c170:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801c174:	e02a      	b.n	801c1cc <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801c176:	4643      	mov	r3, r8
 801c178:	e032      	b.n	801c1e0 <lfs_dir_getread+0xd8>
 801c17a:	4643      	mov	r3, r8
 801c17c:	e030      	b.n	801c1e0 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801c17e:	f06f 0301 	mvn.w	r3, #1
 801c182:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801c184:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801c186:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801c188:	fbb5 f2f3 	udiv	r2, r5, r3
 801c18c:	fb03 5212 	mls	r2, r3, r2, r5
 801c190:	1aaa      	subs	r2, r5, r2
 801c192:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801c194:	eb05 030b 	add.w	r3, r5, fp
 801c198:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801c19a:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801c19c:	4403      	add	r3, r0
 801c19e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801c1a0:	fbb3 fcf0 	udiv	ip, r3, r0
 801c1a4:	fb00 301c 	mls	r0, r0, ip, r3
 801c1a8:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801c1aa:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801c1ac:	428b      	cmp	r3, r1
 801c1ae:	bf28      	it	cs
 801c1b0:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801c1b2:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801c1b4:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801c1b6:	9302      	str	r3, [sp, #8]
 801c1b8:	9101      	str	r1, [sp, #4]
 801c1ba:	9200      	str	r2, [sp, #0]
 801c1bc:	464b      	mov	r3, r9
 801c1be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c1c0:	4651      	mov	r1, sl
 801c1c2:	4630      	mov	r0, r6
 801c1c4:	f7ff fcb8 	bl	801bb38 <lfs_dir_getslice>
        if (err < 0) {
 801c1c8:	2800      	cmp	r0, #0
 801c1ca:	db2b      	blt.n	801c224 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801c1cc:	f1b8 0f00 	cmp.w	r8, #0
 801c1d0:	d027      	beq.n	801c222 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801c1d2:	2f00      	cmp	r7, #0
 801c1d4:	d0cf      	beq.n	801c176 <lfs_dir_getread+0x6e>
 801c1d6:	683b      	ldr	r3, [r7, #0]
 801c1d8:	f113 0f02 	cmn.w	r3, #2
 801c1dc:	d0ab      	beq.n	801c136 <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801c1de:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801c1e0:	6822      	ldr	r2, [r4, #0]
 801c1e2:	f112 0f02 	cmn.w	r2, #2
 801c1e6:	d1ca      	bne.n	801c17e <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801c1e8:	6862      	ldr	r2, [r4, #4]
 801c1ea:	68a1      	ldr	r1, [r4, #8]
 801c1ec:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801c1ee:	42a8      	cmp	r0, r5
 801c1f0:	d9c5      	bls.n	801c17e <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801c1f2:	42aa      	cmp	r2, r5
 801c1f4:	d8c3      	bhi.n	801c17e <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801c1f6:	1b50      	subs	r0, r2, r5
 801c1f8:	4401      	add	r1, r0
 801c1fa:	4608      	mov	r0, r1
 801c1fc:	4299      	cmp	r1, r3
 801c1fe:	bf28      	it	cs
 801c200:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801c202:	68e3      	ldr	r3, [r4, #12]
 801c204:	1aa9      	subs	r1, r5, r2
 801c206:	9005      	str	r0, [sp, #20]
 801c208:	4602      	mov	r2, r0
 801c20a:	4419      	add	r1, r3
 801c20c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c20e:	f012 f9ab 	bl	802e568 <memcpy>
                data += diff;
 801c212:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801c214:	9b05      	ldr	r3, [sp, #20]
 801c216:	4419      	add	r1, r3
 801c218:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801c21a:	441d      	add	r5, r3
                size -= diff;
 801c21c:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801c220:	e7d4      	b.n	801c1cc <lfs_dir_getread+0xc4>
    return 0;
 801c222:	2000      	movs	r0, #0
}
 801c224:	b007      	add	sp, #28
 801c226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c22a <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801c22a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c22e:	b089      	sub	sp, #36	@ 0x24
 801c230:	4682      	mov	sl, r0
 801c232:	4689      	mov	r9, r1
 801c234:	9205      	str	r2, [sp, #20]
 801c236:	461f      	mov	r7, r3
 801c238:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801c23c:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801c240:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801c242:	2400      	movs	r4, #0
 801c244:	e002      	b.n	801c24c <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801c246:	2301      	movs	r3, #1
 801c248:	e023      	b.n	801c292 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801c24a:	442c      	add	r4, r5
 801c24c:	42b4      	cmp	r4, r6
 801c24e:	d21f      	bcs.n	801c290 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801c250:	1b35      	subs	r5, r6, r4
 801c252:	2d08      	cmp	r5, #8
 801c254:	bf28      	it	cs
 801c256:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801c258:	9503      	str	r5, [sp, #12]
 801c25a:	ab06      	add	r3, sp, #24
 801c25c:	9302      	str	r3, [sp, #8]
 801c25e:	eb04 0308 	add.w	r3, r4, r8
 801c262:	9301      	str	r3, [sp, #4]
 801c264:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c266:	9300      	str	r3, [sp, #0]
 801c268:	1b3b      	subs	r3, r7, r4
 801c26a:	9a05      	ldr	r2, [sp, #20]
 801c26c:	4649      	mov	r1, r9
 801c26e:	4650      	mov	r0, sl
 801c270:	f7ff fb72 	bl	801b958 <lfs_bd_read>
        if (err) {
 801c274:	4603      	mov	r3, r0
 801c276:	b960      	cbnz	r0, 801c292 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801c278:	462a      	mov	r2, r5
 801c27a:	eb0b 0104 	add.w	r1, fp, r4
 801c27e:	a806      	add	r0, sp, #24
 801c280:	f010 fea2 	bl	802cfc8 <memcmp>
        if (res) {
 801c284:	2800      	cmp	r0, #0
 801c286:	d0e0      	beq.n	801c24a <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801c288:	2800      	cmp	r0, #0
 801c28a:	dbdc      	blt.n	801c246 <lfs_bd_cmp+0x1c>
 801c28c:	2302      	movs	r3, #2
 801c28e:	e000      	b.n	801c292 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801c290:	2300      	movs	r3, #0
}
 801c292:	4618      	mov	r0, r3
 801c294:	b009      	add	sp, #36	@ 0x24
 801c296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c29c <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801c29c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c2a0:	b085      	sub	sp, #20
 801c2a2:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801c2a4:	6809      	ldr	r1, [r1, #0]
 801c2a6:	f111 0f03 	cmn.w	r1, #3
 801c2aa:	d83f      	bhi.n	801c32c <lfs_bd_flush+0x90>
 801c2ac:	4607      	mov	r7, r0
 801c2ae:	4691      	mov	r9, r2
 801c2b0:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801c2b2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c2b4:	4299      	cmp	r1, r3
 801c2b6:	d22d      	bcs.n	801c314 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801c2b8:	68a5      	ldr	r5, [r4, #8]
 801c2ba:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801c2bc:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801c2be:	4415      	add	r5, r2
 801c2c0:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801c2c2:	fbb5 f3f2 	udiv	r3, r5, r2
 801c2c6:	fb02 5313 	mls	r3, r2, r3, r5
 801c2ca:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801c2cc:	6885      	ldr	r5, [r0, #8]
 801c2ce:	9600      	str	r6, [sp, #0]
 801c2d0:	68e3      	ldr	r3, [r4, #12]
 801c2d2:	6862      	ldr	r2, [r4, #4]
 801c2d4:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801c2d6:	1e05      	subs	r5, r0, #0
 801c2d8:	dc22      	bgt.n	801c320 <lfs_bd_flush+0x84>
        if (err) {
 801c2da:	bb45      	cbnz	r5, 801c32e <lfs_bd_flush+0x92>
        if (validate) {
 801c2dc:	f1b8 0f00 	cmp.w	r8, #0
 801c2e0:	d013      	beq.n	801c30a <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801c2e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c2e6:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801c2ea:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801c2ec:	9603      	str	r6, [sp, #12]
 801c2ee:	9302      	str	r3, [sp, #8]
 801c2f0:	6863      	ldr	r3, [r4, #4]
 801c2f2:	9301      	str	r3, [sp, #4]
 801c2f4:	6823      	ldr	r3, [r4, #0]
 801c2f6:	9300      	str	r3, [sp, #0]
 801c2f8:	4633      	mov	r3, r6
 801c2fa:	464a      	mov	r2, r9
 801c2fc:	2100      	movs	r1, #0
 801c2fe:	4638      	mov	r0, r7
 801c300:	f7ff ff93 	bl	801c22a <lfs_bd_cmp>
            if (res < 0) {
 801c304:	2800      	cmp	r0, #0
 801c306:	db16      	blt.n	801c336 <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801c308:	b9b8      	cbnz	r0, 801c33a <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801c30a:	4621      	mov	r1, r4
 801c30c:	4638      	mov	r0, r7
 801c30e:	f7ff faf9 	bl	801b904 <lfs_cache_zero>
 801c312:	e00c      	b.n	801c32e <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801c314:	4b0a      	ldr	r3, [pc, #40]	@ (801c340 <lfs_bd_flush+0xa4>)
 801c316:	4a0b      	ldr	r2, [pc, #44]	@ (801c344 <lfs_bd_flush+0xa8>)
 801c318:	21b3      	movs	r1, #179	@ 0xb3
 801c31a:	480b      	ldr	r0, [pc, #44]	@ (801c348 <lfs_bd_flush+0xac>)
 801c31c:	f00e f996 	bl	802a64c <__assert_func>
        LFS_ASSERT(err <= 0);
 801c320:	4b0a      	ldr	r3, [pc, #40]	@ (801c34c <lfs_bd_flush+0xb0>)
 801c322:	4a08      	ldr	r2, [pc, #32]	@ (801c344 <lfs_bd_flush+0xa8>)
 801c324:	21b7      	movs	r1, #183	@ 0xb7
 801c326:	4808      	ldr	r0, [pc, #32]	@ (801c348 <lfs_bd_flush+0xac>)
 801c328:	f00e f990 	bl	802a64c <__assert_func>
    return 0;
 801c32c:	2500      	movs	r5, #0
}
 801c32e:	4628      	mov	r0, r5
 801c330:	b005      	add	sp, #20
 801c332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801c336:	4605      	mov	r5, r0
 801c338:	e7f9      	b.n	801c32e <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801c33a:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801c33e:	e7f6      	b.n	801c32e <lfs_bd_flush+0x92>
 801c340:	08039a8c 	.word	0x08039a8c
 801c344:	0803a6d8 	.word	0x0803a6d8
 801c348:	080399a8 	.word	0x080399a8
 801c34c:	080399d8 	.word	0x080399d8

0801c350 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c354:	b083      	sub	sp, #12
 801c356:	4607      	mov	r7, r0
 801c358:	460c      	mov	r4, r1
 801c35a:	9201      	str	r2, [sp, #4]
 801c35c:	469b      	mov	fp, r3
 801c35e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c360:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801c362:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801c366:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801c36a:	f116 0f02 	cmn.w	r6, #2
 801c36e:	d002      	beq.n	801c376 <lfs_bd_prog+0x26>
 801c370:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c372:	42b3      	cmp	r3, r6
 801c374:	d90b      	bls.n	801c38e <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801c376:	eb05 0308 	add.w	r3, r5, r8
 801c37a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c37c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801c37e:	4293      	cmp	r3, r2
 801c380:	d919      	bls.n	801c3b6 <lfs_bd_prog+0x66>
 801c382:	4b2b      	ldr	r3, [pc, #172]	@ (801c430 <lfs_bd_prog+0xe0>)
 801c384:	4a2b      	ldr	r2, [pc, #172]	@ (801c434 <lfs_bd_prog+0xe4>)
 801c386:	21e9      	movs	r1, #233	@ 0xe9
 801c388:	482b      	ldr	r0, [pc, #172]	@ (801c438 <lfs_bd_prog+0xe8>)
 801c38a:	f00e f95f 	bl	802a64c <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801c38e:	4b2b      	ldr	r3, [pc, #172]	@ (801c43c <lfs_bd_prog+0xec>)
 801c390:	4a28      	ldr	r2, [pc, #160]	@ (801c434 <lfs_bd_prog+0xe4>)
 801c392:	21e8      	movs	r1, #232	@ 0xe8
 801c394:	4828      	ldr	r0, [pc, #160]	@ (801c438 <lfs_bd_prog+0xe8>)
 801c396:	f00e f959 	bl	802a64c <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801c39a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c39e:	d13c      	bne.n	801c41a <lfs_bd_prog+0xca>
        pcache->block = block;
 801c3a0:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801c3a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c3a4:	6a1a      	ldr	r2, [r3, #32]
 801c3a6:	fbb5 f3f2 	udiv	r3, r5, r2
 801c3aa:	fb02 5313 	mls	r3, r2, r3, r5
 801c3ae:	1aeb      	subs	r3, r5, r3
 801c3b0:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801c3b6:	f1b8 0f00 	cmp.w	r8, #0
 801c3ba:	d035      	beq.n	801c428 <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801c3bc:	6823      	ldr	r3, [r4, #0]
 801c3be:	42b3      	cmp	r3, r6
 801c3c0:	d1eb      	bne.n	801c39a <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801c3c2:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801c3c4:	42aa      	cmp	r2, r5
 801c3c6:	d8e8      	bhi.n	801c39a <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801c3c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801c3ca:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801c3cc:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801c3ce:	42a8      	cmp	r0, r5
 801c3d0:	d9e3      	bls.n	801c39a <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801c3d2:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801c3d4:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801c3d8:	45c1      	cmp	r9, r8
 801c3da:	bf28      	it	cs
 801c3dc:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801c3de:	68e3      	ldr	r3, [r4, #12]
 801c3e0:	1aa8      	subs	r0, r5, r2
 801c3e2:	464a      	mov	r2, r9
 801c3e4:	4651      	mov	r1, sl
 801c3e6:	4418      	add	r0, r3
 801c3e8:	f012 f8be 	bl	802e568 <memcpy>
            data += diff;
 801c3ec:	44ca      	add	sl, r9
            off += diff;
 801c3ee:	444d      	add	r5, r9
            size -= diff;
 801c3f0:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801c3f4:	68a2      	ldr	r2, [r4, #8]
 801c3f6:	6863      	ldr	r3, [r4, #4]
 801c3f8:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801c3fa:	4293      	cmp	r3, r2
 801c3fc:	bf38      	it	cc
 801c3fe:	4613      	movcc	r3, r2
 801c400:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801c402:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c404:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801c406:	429a      	cmp	r2, r3
 801c408:	d1d5      	bne.n	801c3b6 <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801c40a:	465b      	mov	r3, fp
 801c40c:	9a01      	ldr	r2, [sp, #4]
 801c40e:	4621      	mov	r1, r4
 801c410:	4638      	mov	r0, r7
 801c412:	f7ff ff43 	bl	801c29c <lfs_bd_flush>
                if (err) {
 801c416:	b940      	cbnz	r0, 801c42a <lfs_bd_prog+0xda>
 801c418:	e7cd      	b.n	801c3b6 <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801c41a:	4b09      	ldr	r3, [pc, #36]	@ (801c440 <lfs_bd_prog+0xf0>)
 801c41c:	4a05      	ldr	r2, [pc, #20]	@ (801c434 <lfs_bd_prog+0xe4>)
 801c41e:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801c422:	4805      	ldr	r0, [pc, #20]	@ (801c438 <lfs_bd_prog+0xe8>)
 801c424:	f00e f912 	bl	802a64c <__assert_func>
    return 0;
 801c428:	2000      	movs	r0, #0
}
 801c42a:	b003      	add	sp, #12
 801c42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c430:	08039ae8 	.word	0x08039ae8
 801c434:	0803a6e8 	.word	0x0803a6e8
 801c438:	080399a8 	.word	0x080399a8
 801c43c:	08039ab0 	.word	0x08039ab0
 801c440:	08039b0c 	.word	0x08039b0c

0801c444 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801c444:	b538      	push	{r3, r4, r5, lr}
 801c446:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801c448:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801c44c:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801c44e:	f7ff ff25 	bl	801c29c <lfs_bd_flush>
    if (err) {
 801c452:	4603      	mov	r3, r0
 801c454:	b920      	cbnz	r0, 801c460 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801c456:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801c458:	6903      	ldr	r3, [r0, #16]
 801c45a:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801c45c:	1e03      	subs	r3, r0, #0
 801c45e:	dc01      	bgt.n	801c464 <lfs_bd_sync+0x20>
}
 801c460:	4618      	mov	r0, r3
 801c462:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801c464:	4b02      	ldr	r3, [pc, #8]	@ (801c470 <lfs_bd_sync+0x2c>)
 801c466:	4a03      	ldr	r2, [pc, #12]	@ (801c474 <lfs_bd_sync+0x30>)
 801c468:	21dd      	movs	r1, #221	@ 0xdd
 801c46a:	4803      	ldr	r0, [pc, #12]	@ (801c478 <lfs_bd_sync+0x34>)
 801c46c:	f00e f8ee 	bl	802a64c <__assert_func>
 801c470:	080399d8 	.word	0x080399d8
 801c474:	0803a688 	.word	0x0803a688
 801c478:	080399a8 	.word	0x080399a8

0801c47c <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801c47c:	b570      	push	{r4, r5, r6, lr}
 801c47e:	b084      	sub	sp, #16
 801c480:	4604      	mov	r4, r0
 801c482:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801c484:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801c486:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801c488:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801c48c:	42ab      	cmp	r3, r5
 801c48e:	bf28      	it	cs
 801c490:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801c492:	6812      	ldr	r2, [r2, #0]
 801c494:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801c498:	9303      	str	r3, [sp, #12]
 801c49a:	6866      	ldr	r6, [r4, #4]
 801c49c:	9602      	str	r6, [sp, #8]
 801c49e:	9101      	str	r1, [sp, #4]
 801c4a0:	9200      	str	r2, [sp, #0]
 801c4a2:	4602      	mov	r2, r0
 801c4a4:	2100      	movs	r1, #0
 801c4a6:	f7ff fec0 	bl	801c22a <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801c4aa:	b920      	cbnz	r0, 801c4b6 <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801c4ac:	68a3      	ldr	r3, [r4, #8]
 801c4ae:	42ab      	cmp	r3, r5
 801c4b0:	d001      	beq.n	801c4b6 <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801c4b2:	d202      	bcs.n	801c4ba <lfs_dir_find_match+0x3e>
 801c4b4:	2001      	movs	r0, #1
}
 801c4b6:	b004      	add	sp, #16
 801c4b8:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801c4ba:	2002      	movs	r0, #2
 801c4bc:	e7fb      	b.n	801c4b6 <lfs_dir_find_match+0x3a>

0801c4be <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801c4be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c4c2:	b089      	sub	sp, #36	@ 0x24
 801c4c4:	9305      	str	r3, [sp, #20]
 801c4c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801c4c8:	b953      	cbnz	r3, 801c4e0 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801c4ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c4ce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c4d0:	6013      	str	r3, [r2, #0]
        *off = 0;
 801c4d2:	2300      	movs	r3, #0
 801c4d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c4d6:	6013      	str	r3, [r2, #0]
}
 801c4d8:	4618      	mov	r0, r3
 801c4da:	b009      	add	sp, #36	@ 0x24
 801c4dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c4e0:	4607      	mov	r7, r0
 801c4e2:	4688      	mov	r8, r1
 801c4e4:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801c4e6:	3b01      	subs	r3, #1
 801c4e8:	9307      	str	r3, [sp, #28]
 801c4ea:	a907      	add	r1, sp, #28
 801c4ec:	f7ff fa16 	bl	801b91c <lfs_ctz_index>
 801c4f0:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801c4f2:	a911      	add	r1, sp, #68	@ 0x44
 801c4f4:	4638      	mov	r0, r7
 801c4f6:	f7ff fa11 	bl	801b91c <lfs_ctz_index>
 801c4fa:	4606      	mov	r6, r0
    while (current > target) {
 801c4fc:	42b5      	cmp	r5, r6
 801c4fe:	d91f      	bls.n	801c540 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801c500:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801c502:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801c506:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801c50a:	fa95 f3a5 	rbit	r3, r5
 801c50e:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801c512:	429c      	cmp	r4, r3
 801c514:	bf28      	it	cs
 801c516:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801c518:	2304      	movs	r3, #4
 801c51a:	9303      	str	r3, [sp, #12]
 801c51c:	aa05      	add	r2, sp, #20
 801c51e:	9202      	str	r2, [sp, #8]
 801c520:	00a2      	lsls	r2, r4, #2
 801c522:	9201      	str	r2, [sp, #4]
 801c524:	9a05      	ldr	r2, [sp, #20]
 801c526:	9200      	str	r2, [sp, #0]
 801c528:	464a      	mov	r2, r9
 801c52a:	4641      	mov	r1, r8
 801c52c:	4638      	mov	r0, r7
 801c52e:	f7ff fa13 	bl	801b958 <lfs_bd_read>
        if (err) {
 801c532:	4603      	mov	r3, r0
 801c534:	2800      	cmp	r0, #0
 801c536:	d1cf      	bne.n	801c4d8 <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801c538:	2301      	movs	r3, #1
 801c53a:	40a3      	lsls	r3, r4
 801c53c:	1aed      	subs	r5, r5, r3
 801c53e:	e7dd      	b.n	801c4fc <lfs_ctz_find+0x3e>
    *block = head;
 801c540:	9b05      	ldr	r3, [sp, #20]
 801c542:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c544:	6013      	str	r3, [r2, #0]
    *off = pos;
 801c546:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c548:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c54a:	6013      	str	r3, [r2, #0]
    return 0;
 801c54c:	2300      	movs	r3, #0
 801c54e:	e7c3      	b.n	801c4d8 <lfs_ctz_find+0x1a>

0801c550 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801c550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c554:	b087      	sub	sp, #28
 801c556:	460c      	mov	r4, r1
 801c558:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801c55a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801c55c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c55e:	4291      	cmp	r1, r2
 801c560:	d272      	bcs.n	801c648 <lfs_file_flushedread+0xf8>
 801c562:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801c564:	eba2 0901 	sub.w	r9, r2, r1
 801c568:	4599      	cmp	r9, r3
 801c56a:	bf28      	it	cs
 801c56c:	4699      	movcs	r9, r3
    nsize = size;
 801c56e:	464e      	mov	r6, r9
    while (nsize > 0) {
 801c570:	e037      	b.n	801c5e2 <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801c572:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c576:	d041      	beq.n	801c5fc <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801c578:	f06f 0301 	mvn.w	r3, #1
 801c57c:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801c57e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c580:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801c582:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c588:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801c58a:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801c58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c590:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801c592:	1a9d      	subs	r5, r3, r2
 801c594:	42b5      	cmp	r5, r6
 801c596:	bf28      	it	cs
 801c598:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801c59a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c59c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801c5a0:	d041      	beq.n	801c626 <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801c5a2:	88a1      	ldrh	r1, [r4, #4]
 801c5a4:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801c5a6:	9505      	str	r5, [sp, #20]
 801c5a8:	9704      	str	r7, [sp, #16]
 801c5aa:	9203      	str	r2, [sp, #12]
 801c5ac:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801c5b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801c5b4:	9102      	str	r1, [sp, #8]
 801c5b6:	4a27      	ldr	r2, [pc, #156]	@ (801c654 <lfs_file_flushedread+0x104>)
 801c5b8:	9201      	str	r2, [sp, #4]
 801c5ba:	9300      	str	r3, [sp, #0]
 801c5bc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801c5c0:	2200      	movs	r2, #0
 801c5c2:	f104 0108 	add.w	r1, r4, #8
 801c5c6:	4640      	mov	r0, r8
 801c5c8:	f7ff fd9e 	bl	801c108 <lfs_dir_getread>
            if (err) {
 801c5cc:	4603      	mov	r3, r0
 801c5ce:	2800      	cmp	r0, #0
 801c5d0:	d13b      	bne.n	801c64a <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801c5d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c5d4:	442b      	add	r3, r5
 801c5d6:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801c5d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801c5da:	442b      	add	r3, r5
 801c5dc:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801c5de:	442f      	add	r7, r5
        nsize -= diff;
 801c5e0:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801c5e2:	2e00      	cmp	r6, #0
 801c5e4:	d02e      	beq.n	801c644 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801c5e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c5e8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801c5ec:	d0c1      	beq.n	801c572 <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801c5ee:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801c5f0:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801c5f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801c5f6:	4291      	cmp	r1, r2
 801c5f8:	d1c7      	bne.n	801c58a <lfs_file_flushedread+0x3a>
 801c5fa:	e7ba      	b.n	801c572 <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801c5fc:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801c600:	9303      	str	r3, [sp, #12]
 801c602:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801c606:	9302      	str	r3, [sp, #8]
 801c608:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c60a:	9301      	str	r3, [sp, #4]
 801c60c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c60e:	9300      	str	r3, [sp, #0]
 801c610:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c612:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801c616:	2100      	movs	r1, #0
 801c618:	4640      	mov	r0, r8
 801c61a:	f7ff ff50 	bl	801c4be <lfs_ctz_find>
                if (err) {
 801c61e:	4603      	mov	r3, r0
 801c620:	2800      	cmp	r0, #0
 801c622:	d0ae      	beq.n	801c582 <lfs_file_flushedread+0x32>
 801c624:	e011      	b.n	801c64a <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801c626:	9503      	str	r5, [sp, #12]
 801c628:	9702      	str	r7, [sp, #8]
 801c62a:	9201      	str	r2, [sp, #4]
 801c62c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801c62e:	9200      	str	r2, [sp, #0]
 801c630:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801c634:	2100      	movs	r1, #0
 801c636:	4640      	mov	r0, r8
 801c638:	f7ff f98e 	bl	801b958 <lfs_bd_read>
            if (err) {
 801c63c:	4603      	mov	r3, r0
 801c63e:	2800      	cmp	r0, #0
 801c640:	d0c7      	beq.n	801c5d2 <lfs_file_flushedread+0x82>
 801c642:	e002      	b.n	801c64a <lfs_file_flushedread+0xfa>
    return size;
 801c644:	464b      	mov	r3, r9
 801c646:	e000      	b.n	801c64a <lfs_file_flushedread+0xfa>
        return 0;
 801c648:	2300      	movs	r3, #0
}
 801c64a:	4618      	mov	r0, r3
 801c64c:	b007      	add	sp, #28
 801c64e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c652:	bf00      	nop
 801c654:	fff7fc00 	.word	0xfff7fc00

0801c658 <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c65c:	b089      	sub	sp, #36	@ 0x24
 801c65e:	4683      	mov	fp, r0
 801c660:	468a      	mov	sl, r1
 801c662:	9205      	str	r2, [sp, #20]
 801c664:	4698      	mov	r8, r3
 801c666:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801c66a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801c66c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801c66e:	2400      	movs	r4, #0
 801c670:	e006      	b.n	801c680 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801c672:	462a      	mov	r2, r5
 801c674:	a906      	add	r1, sp, #24
 801c676:	6838      	ldr	r0, [r7, #0]
 801c678:	f003 fd82 	bl	8020180 <lfs_crc>
 801c67c:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801c67e:	442c      	add	r4, r5
 801c680:	42b4      	cmp	r4, r6
 801c682:	d216      	bcs.n	801c6b2 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801c684:	1b35      	subs	r5, r6, r4
 801c686:	2d08      	cmp	r5, #8
 801c688:	bf28      	it	cs
 801c68a:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801c68c:	9503      	str	r5, [sp, #12]
 801c68e:	ab06      	add	r3, sp, #24
 801c690:	9302      	str	r3, [sp, #8]
 801c692:	eb04 0309 	add.w	r3, r4, r9
 801c696:	9301      	str	r3, [sp, #4]
 801c698:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c69a:	9300      	str	r3, [sp, #0]
 801c69c:	eba8 0304 	sub.w	r3, r8, r4
 801c6a0:	9a05      	ldr	r2, [sp, #20]
 801c6a2:	4651      	mov	r1, sl
 801c6a4:	4658      	mov	r0, fp
 801c6a6:	f7ff f957 	bl	801b958 <lfs_bd_read>
        if (err) {
 801c6aa:	4603      	mov	r3, r0
 801c6ac:	2800      	cmp	r0, #0
 801c6ae:	d0e0      	beq.n	801c672 <lfs_bd_crc+0x1a>
 801c6b0:	e000      	b.n	801c6b4 <lfs_bd_crc+0x5c>
    return 0;
 801c6b2:	2300      	movs	r3, #0
}
 801c6b4:	4618      	mov	r0, r3
 801c6b6:	b009      	add	sp, #36	@ 0x24
 801c6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c6bc <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801c6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6c0:	b097      	sub	sp, #92	@ 0x5c
 801c6c2:	4605      	mov	r5, r0
 801c6c4:	460e      	mov	r6, r1
 801c6c6:	4617      	mov	r7, r2
 801c6c8:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801c6ca:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c6cc:	b13b      	cbz	r3, 801c6de <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801c6ce:	6812      	ldr	r2, [r2, #0]
 801c6d0:	4293      	cmp	r3, r2
 801c6d2:	f240 825a 	bls.w	801cb8a <lfs_dir_fetchmatch+0x4ce>
 801c6d6:	687a      	ldr	r2, [r7, #4]
 801c6d8:	4293      	cmp	r3, r2
 801c6da:	f240 8259 	bls.w	801cb90 <lfs_dir_fetchmatch+0x4d4>
    uint32_t revs[2] = {0, 0};
 801c6de:	2400      	movs	r4, #0
 801c6e0:	9412      	str	r4, [sp, #72]	@ 0x48
 801c6e2:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801c6e4:	46a0      	mov	r8, r4
 801c6e6:	e010      	b.n	801c70a <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801c6e8:	f118 0301 	adds.w	r3, r8, #1
 801c6ec:	f003 0301 	and.w	r3, r3, #1
 801c6f0:	bf48      	it	mi
 801c6f2:	425b      	negmi	r3, r3
 801c6f4:	a916      	add	r1, sp, #88	@ 0x58
 801c6f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c6fa:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801c6fe:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801c700:	2a00      	cmp	r2, #0
 801c702:	dd00      	ble.n	801c706 <lfs_dir_fetchmatch+0x4a>
            r = i;
 801c704:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801c706:	f108 0801 	add.w	r8, r8, #1
 801c70a:	f1b8 0f01 	cmp.w	r8, #1
 801c70e:	dc1d      	bgt.n	801c74c <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801c710:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801c714:	ab12      	add	r3, sp, #72	@ 0x48
 801c716:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801c71a:	2304      	movs	r3, #4
 801c71c:	9303      	str	r3, [sp, #12]
 801c71e:	9202      	str	r2, [sp, #8]
 801c720:	2100      	movs	r1, #0
 801c722:	9101      	str	r1, [sp, #4]
 801c724:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801c728:	9200      	str	r2, [sp, #0]
 801c72a:	462a      	mov	r2, r5
 801c72c:	4628      	mov	r0, r5
 801c72e:	f7ff f913 	bl	801b958 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801c732:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801c736:	eb0d 0903 	add.w	r9, sp, r3
 801c73a:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801c73e:	4683      	mov	fp, r0
 801c740:	2800      	cmp	r0, #0
 801c742:	d0d1      	beq.n	801c6e8 <lfs_dir_fetchmatch+0x2c>
 801c744:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c748:	d0dd      	beq.n	801c706 <lfs_dir_fetchmatch+0x4a>
 801c74a:	e21a      	b.n	801cb82 <lfs_dir_fetchmatch+0x4c6>
    dir->pair[0] = pair[(r+0)%2];
 801c74c:	2c00      	cmp	r4, #0
 801c74e:	f004 0301 	and.w	r3, r4, #1
 801c752:	bfb8      	it	lt
 801c754:	425b      	neglt	r3, r3
 801c756:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801c75a:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801c75c:	f114 0c01 	adds.w	ip, r4, #1
 801c760:	f00c 0c01 	and.w	ip, ip, #1
 801c764:	bf48      	it	mi
 801c766:	f1cc 0c00 	rsbmi	ip, ip, #0
 801c76a:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801c76e:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801c770:	aa16      	add	r2, sp, #88	@ 0x58
 801c772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c776:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801c77a:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801c77c:	2400      	movs	r4, #0
 801c77e:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801c780:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801c784:	f8cd c01c 	str.w	ip, [sp, #28]
 801c788:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801c78a:	f1b9 0f01 	cmp.w	r9, #1
 801c78e:	f300 81eb 	bgt.w	801cb68 <lfs_dir_fetchmatch+0x4ac>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c792:	4a90      	ldr	r2, [pc, #576]	@ (801c9d4 <lfs_dir_fetchmatch+0x318>)
 801c794:	ab0e      	add	r3, sp, #56	@ 0x38
 801c796:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c79a:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801c79e:	2204      	movs	r2, #4
 801c7a0:	f106 0108 	add.w	r1, r6, #8
 801c7a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c7a8:	f003 fcea 	bl	8020180 <lfs_crc>
 801c7ac:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801c7ae:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801c7b2:	2300      	movs	r3, #0
 801c7b4:	461c      	mov	r4, r3
 801c7b6:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801c7b8:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801c7ba:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801c7be:	461f      	mov	r7, r3
 801c7c0:	e110      	b.n	801c9e4 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801c7c2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c7c6:	d101      	bne.n	801c7cc <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801c7c8:	2300      	movs	r3, #0
 801c7ca:	e01e      	b.n	801c80a <lfs_dir_fetchmatch+0x14e>
                return err;
 801c7cc:	4683      	mov	fp, r0
 801c7ce:	e1d8      	b.n	801cb82 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x78000000) >> 20;
 801c7d0:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801c7d4:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801c7d8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801c7dc:	bf14      	ite	ne
 801c7de:	2300      	movne	r3, #0
 801c7e0:	2301      	moveq	r3, #1
                break;
 801c7e2:	e012      	b.n	801c80a <lfs_dir_fetchmatch+0x14e>
                err = lfs_bd_read(lfs,
 801c7e4:	2204      	movs	r2, #4
 801c7e6:	9203      	str	r2, [sp, #12]
 801c7e8:	aa0d      	add	r2, sp, #52	@ 0x34
 801c7ea:	9202      	str	r2, [sp, #8]
 801c7ec:	1d22      	adds	r2, r4, #4
 801c7ee:	9201      	str	r2, [sp, #4]
 801c7f0:	6832      	ldr	r2, [r6, #0]
 801c7f2:	9200      	str	r2, [sp, #0]
 801c7f4:	462a      	mov	r2, r5
 801c7f6:	2100      	movs	r1, #0
 801c7f8:	4628      	mov	r0, r5
 801c7fa:	f7ff f8ad 	bl	801b958 <lfs_bd_read>
                if (err) {
 801c7fe:	bb80      	cbnz	r0, 801c862 <lfs_dir_fetchmatch+0x1a6>
                if (crc != dcrc) {
 801c800:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c802:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c804:	429a      	cmp	r2, r3
 801c806:	d031      	beq.n	801c86c <lfs_dir_fetchmatch+0x1b0>
        bool maybeerased = false;
 801c808:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801c80a:	68f2      	ldr	r2, [r6, #12]
 801c80c:	2a00      	cmp	r2, #0
 801c80e:	f000 8165 	beq.w	801cadc <lfs_dir_fetchmatch+0x420>
        dir->erased = false;
 801c812:	2100      	movs	r1, #0
 801c814:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801c816:	b153      	cbz	r3, 801c82e <lfs_dir_fetchmatch+0x172>
 801c818:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801c81a:	6a01      	ldr	r1, [r0, #32]
 801c81c:	fbb2 f3f1 	udiv	r3, r2, r1
 801c820:	fb01 2313 	mls	r3, r1, r3, r2
 801c824:	b91b      	cbnz	r3, 801c82e <lfs_dir_fetchmatch+0x172>
            if (hasfcrc) {
 801c826:	9b08      	ldr	r3, [sp, #32]
 801c828:	2b00      	cmp	r3, #0
 801c82a:	f040 8165 	bne.w	801caf8 <lfs_dir_fetchmatch+0x43c>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801c82e:	4631      	mov	r1, r6
 801c830:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801c834:	f7fe ff00 	bl	801b638 <lfs_gstate_hasmovehere>
 801c838:	2800      	cmp	r0, #0
 801c83a:	f000 817d 	beq.w	801cb38 <lfs_dir_fetchmatch+0x47c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801c83e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801c840:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801c844:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801c848:	429a      	cmp	r2, r3
 801c84a:	f000 8173 	beq.w	801cb34 <lfs_dir_fetchmatch+0x478>
            } else if (besttag != -1 &&
 801c84e:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801c852:	f000 8171 	beq.w	801cb38 <lfs_dir_fetchmatch+0x47c>
 801c856:	429a      	cmp	r2, r3
 801c858:	f240 816e 	bls.w	801cb38 <lfs_dir_fetchmatch+0x47c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801c85c:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801c860:	e16a      	b.n	801cb38 <lfs_dir_fetchmatch+0x47c>
                    if (err == LFS_ERR_CORRUPT) {
 801c862:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c866:	d0cf      	beq.n	801c808 <lfs_dir_fetchmatch+0x14c>
                    return err;
 801c868:	4683      	mov	fp, r0
 801c86a:	e18a      	b.n	801cb82 <lfs_dir_fetchmatch+0x4c6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801c86c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c86e:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801c872:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801c876:	2204      	movs	r2, #4
 801c878:	a90b      	add	r1, sp, #44	@ 0x2c
 801c87a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801c87c:	f003 fc80 	bl	8020180 <lfs_crc>
 801c880:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801c882:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c884:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c888:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c88c:	bf08      	it	eq
 801c88e:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801c890:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c894:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801c896:	4423      	add	r3, r4
 801c898:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801c89a:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801c89e:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801c8a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c8a2:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801c8a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c8a6:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801c8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c8aa:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801c8ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c8b0:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801c8b2:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c8b6:	e095      	b.n	801c9e4 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801c8b8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c8bc:	d101      	bne.n	801c8c2 <lfs_dir_fetchmatch+0x206>
        bool maybeerased = false;
 801c8be:	2300      	movs	r3, #0
 801c8c0:	e7a3      	b.n	801c80a <lfs_dir_fetchmatch+0x14e>
                return err;
 801c8c2:	4683      	mov	fp, r0
 801c8c4:	e15d      	b.n	801cb82 <lfs_dir_fetchmatch+0x4c6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801c8c6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801c8ca:	d021      	beq.n	801c910 <lfs_dir_fetchmatch+0x254>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801c8cc:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801c8d0:	d046      	beq.n	801c960 <lfs_dir_fetchmatch+0x2a4>
    return (tag & 0x7ff00000) >> 20;
 801c8d2:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801c8d6:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801c8da:	429a      	cmp	r2, r3
 801c8dc:	f040 80e3 	bne.w	801caa6 <lfs_dir_fetchmatch+0x3ea>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c8e0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801c8e4:	2208      	movs	r2, #8
 801c8e6:	9203      	str	r2, [sp, #12]
 801c8e8:	aa10      	add	r2, sp, #64	@ 0x40
 801c8ea:	9202      	str	r2, [sp, #8]
 801c8ec:	f8cd 8004 	str.w	r8, [sp, #4]
 801c8f0:	6832      	ldr	r2, [r6, #0]
 801c8f2:	9200      	str	r2, [sp, #0]
 801c8f4:	462a      	mov	r2, r5
 801c8f6:	2100      	movs	r1, #0
 801c8f8:	4628      	mov	r0, r5
 801c8fa:	f7ff f82d 	bl	801b958 <lfs_bd_read>
                if (err) {
 801c8fe:	2800      	cmp	r0, #0
 801c900:	d04a      	beq.n	801c998 <lfs_dir_fetchmatch+0x2dc>
                    if (err == LFS_ERR_CORRUPT) {
 801c902:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c906:	f000 80e7 	beq.w	801cad8 <lfs_dir_fetchmatch+0x41c>
                hasfcrc = true;
 801c90a:	2301      	movs	r3, #1
 801c90c:	9308      	str	r3, [sp, #32]
 801c90e:	e0ca      	b.n	801caa6 <lfs_dir_fetchmatch+0x3ea>
    return (int8_t)lfs_tag_chunk(tag);
 801c910:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801c912:	fa17 f280 	uxtah	r2, r7, r0
 801c916:	b297      	uxth	r7, r2
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801c918:	9a06      	ldr	r2, [sp, #24]
 801c91a:	4611      	mov	r1, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801c91c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801c920:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801c924:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801c928:	f022 0203 	bic.w	r2, r2, #3
 801c92c:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801c930:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801c934:	4293      	cmp	r3, r2
 801c936:	d00f      	beq.n	801c958 <lfs_dir_fetchmatch+0x29c>
                } else if (tempbesttag != -1 &&
 801c938:	9a06      	ldr	r2, [sp, #24]
 801c93a:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c93e:	f000 80b2 	beq.w	801caa6 <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
 801c942:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801c946:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801c94a:	429a      	cmp	r2, r3
 801c94c:	f0c0 80ab 	bcc.w	801caa6 <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801c950:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801c954:	9306      	str	r3, [sp, #24]
 801c956:	e0a6      	b.n	801caa6 <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag |= 0x80000000;
 801c958:	f041 4300 	orr.w	r3, r1, #2147483648	@ 0x80000000
 801c95c:	9306      	str	r3, [sp, #24]
 801c95e:	e0a2      	b.n	801caa6 <lfs_dir_fetchmatch+0x3ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801c960:	f000 0301 	and.w	r3, r0, #1
 801c964:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c966:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801c96a:	2208      	movs	r2, #8
 801c96c:	9203      	str	r2, [sp, #12]
 801c96e:	aa0e      	add	r2, sp, #56	@ 0x38
 801c970:	9202      	str	r2, [sp, #8]
 801c972:	f8cd 8004 	str.w	r8, [sp, #4]
 801c976:	6832      	ldr	r2, [r6, #0]
 801c978:	9200      	str	r2, [sp, #0]
 801c97a:	462a      	mov	r2, r5
 801c97c:	2100      	movs	r1, #0
 801c97e:	4628      	mov	r0, r5
 801c980:	f7fe ffea 	bl	801b958 <lfs_bd_read>
                if (err) {
 801c984:	2800      	cmp	r0, #0
 801c986:	f000 808e 	beq.w	801caa6 <lfs_dir_fetchmatch+0x3ea>
                    if (err == LFS_ERR_CORRUPT) {
 801c98a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c98e:	d101      	bne.n	801c994 <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 801c990:	2300      	movs	r3, #0
 801c992:	e73a      	b.n	801c80a <lfs_dir_fetchmatch+0x14e>
                    return err;
 801c994:	4683      	mov	fp, r0
 801c996:	e0f4      	b.n	801cb82 <lfs_dir_fetchmatch+0x4c6>
                hasfcrc = true;
 801c998:	2301      	movs	r3, #1
 801c99a:	9308      	str	r3, [sp, #32]
 801c99c:	e083      	b.n	801caa6 <lfs_dir_fetchmatch+0x3ea>
                    if (res == LFS_ERR_CORRUPT) {
 801c99e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c9a2:	d101      	bne.n	801c9a8 <lfs_dir_fetchmatch+0x2ec>
        bool maybeerased = false;
 801c9a4:	2300      	movs	r3, #0
 801c9a6:	e730      	b.n	801c80a <lfs_dir_fetchmatch+0x14e>
                    return res;
 801c9a8:	4683      	mov	fp, r0
 801c9aa:	e0ea      	b.n	801cb82 <lfs_dir_fetchmatch+0x4c6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801c9ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c9ae:	9b06      	ldr	r3, [sp, #24]
 801c9b0:	469c      	mov	ip, r3
 801c9b2:	ea82 0103 	eor.w	r1, r2, r3
 801c9b6:	4b08      	ldr	r3, [pc, #32]	@ (801c9d8 <lfs_dir_fetchmatch+0x31c>)
 801c9b8:	400b      	ands	r3, r1
 801c9ba:	b17b      	cbz	r3, 801c9dc <lfs_dir_fetchmatch+0x320>
                } else if (res == LFS_CMP_GT &&
 801c9bc:	2802      	cmp	r0, #2
 801c9be:	d110      	bne.n	801c9e2 <lfs_dir_fetchmatch+0x326>
    return (tag & 0x000ffc00) >> 10;
 801c9c0:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801c9c4:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801c9c8:	459c      	cmp	ip, r3
 801c9ca:	d30a      	bcc.n	801c9e2 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag | 0x80000000;
 801c9cc:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801c9d0:	9306      	str	r3, [sp, #24]
 801c9d2:	e006      	b.n	801c9e2 <lfs_dir_fetchmatch+0x326>
 801c9d4:	08036434 	.word	0x08036434
 801c9d8:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801c9dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c9e0:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801c9e2:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c9e4:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c9e8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c9ec:	bf14      	ite	ne
 801c9ee:	4643      	movne	r3, r8
 801c9f0:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801c9f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c9f8:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801c9fa:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801c9fc:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801ca00:	2204      	movs	r2, #4
 801ca02:	9203      	str	r2, [sp, #12]
 801ca04:	aa0c      	add	r2, sp, #48	@ 0x30
 801ca06:	9202      	str	r2, [sp, #8]
 801ca08:	9401      	str	r4, [sp, #4]
 801ca0a:	6832      	ldr	r2, [r6, #0]
 801ca0c:	9200      	str	r2, [sp, #0]
 801ca0e:	462a      	mov	r2, r5
 801ca10:	2100      	movs	r1, #0
 801ca12:	4628      	mov	r0, r5
 801ca14:	f7fe ffa0 	bl	801b958 <lfs_bd_read>
            if (err) {
 801ca18:	2800      	cmp	r0, #0
 801ca1a:	f47f aed2 	bne.w	801c7c2 <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801ca1e:	2204      	movs	r2, #4
 801ca20:	a90c      	add	r1, sp, #48	@ 0x30
 801ca22:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ca24:	f003 fbac 	bl	8020180 <lfs_crc>
 801ca28:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801ca2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801ca2c:	ba1b      	rev	r3, r3
 801ca2e:	ea88 0a03 	eor.w	sl, r8, r3
 801ca32:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801ca36:	f1ba 0f00 	cmp.w	sl, #0
 801ca3a:	f6ff aec9 	blt.w	801c7d0 <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801ca3e:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801ca42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ca46:	bf14      	ite	ne
 801ca48:	4652      	movne	r2, sl
 801ca4a:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801ca4e:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801ca52:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801ca54:	4421      	add	r1, r4
 801ca56:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801ca58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca5a:	4299      	cmp	r1, r3
 801ca5c:	d83a      	bhi.n	801cad4 <lfs_dir_fetchmatch+0x418>
    return (tag & 0x78000000) >> 20;
 801ca5e:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801ca62:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801ca66:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801ca6a:	f43f aebb 	beq.w	801c7e4 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801ca6e:	f104 0804 	add.w	r8, r4, #4
 801ca72:	a90b      	add	r1, sp, #44	@ 0x2c
 801ca74:	9103      	str	r1, [sp, #12]
 801ca76:	9202      	str	r2, [sp, #8]
 801ca78:	f8cd 8004 	str.w	r8, [sp, #4]
 801ca7c:	6832      	ldr	r2, [r6, #0]
 801ca7e:	9200      	str	r2, [sp, #0]
 801ca80:	462a      	mov	r2, r5
 801ca82:	2100      	movs	r1, #0
 801ca84:	4628      	mov	r0, r5
 801ca86:	f7ff fde7 	bl	801c658 <lfs_bd_crc>
            if (err) {
 801ca8a:	2800      	cmp	r0, #0
 801ca8c:	f47f af14 	bne.w	801c8b8 <lfs_dir_fetchmatch+0x1fc>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801ca90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801ca92:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801ca94:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801ca98:	f47f af15 	bne.w	801c8c6 <lfs_dir_fetchmatch+0x20a>
    return (tag & 0x000ffc00) >> 10;
 801ca9c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801caa0:	429f      	cmp	r7, r3
 801caa2:	d800      	bhi.n	801caa6 <lfs_dir_fetchmatch+0x3ea>
                    tempcount = lfs_tag_id(tag) + 1;
 801caa4:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801caa6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801caa8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801caaa:	404b      	eors	r3, r1
 801caac:	9a05      	ldr	r2, [sp, #20]
 801caae:	4213      	tst	r3, r2
 801cab0:	d197      	bne.n	801c9e2 <lfs_dir_fetchmatch+0x326>
                        dir->pair[0], off+sizeof(tag)});
 801cab2:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801cab4:	9314      	str	r3, [sp, #80]	@ 0x50
 801cab6:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801caba:	aa14      	add	r2, sp, #80	@ 0x50
 801cabc:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801cabe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801cac0:	4798      	blx	r3
                if (res < 0) {
 801cac2:	2800      	cmp	r0, #0
 801cac4:	f6ff af6b 	blt.w	801c99e <lfs_dir_fetchmatch+0x2e2>
                if (res == LFS_CMP_EQ) {
 801cac8:	2800      	cmp	r0, #0
 801caca:	f47f af6f 	bne.w	801c9ac <lfs_dir_fetchmatch+0x2f0>
                    tempbesttag = tag;
 801cace:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cad0:	9306      	str	r3, [sp, #24]
 801cad2:	e786      	b.n	801c9e2 <lfs_dir_fetchmatch+0x326>
        bool maybeerased = false;
 801cad4:	2300      	movs	r3, #0
 801cad6:	e698      	b.n	801c80a <lfs_dir_fetchmatch+0x14e>
 801cad8:	2300      	movs	r3, #0
 801cada:	e696      	b.n	801c80a <lfs_dir_fetchmatch+0x14e>
    lfs_block_t t = pair[0];
 801cadc:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801cade:	6872      	ldr	r2, [r6, #4]
 801cae0:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801cae2:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801cae4:	aa16      	add	r2, sp, #88	@ 0x58
 801cae6:	9b07      	ldr	r3, [sp, #28]
 801cae8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801caec:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801caf0:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801caf2:	f109 0901 	add.w	r9, r9, #1
 801caf6:	e648      	b.n	801c78a <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801caf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cafc:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801cafe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801cb00:	a90d      	add	r1, sp, #52	@ 0x34
 801cb02:	9103      	str	r1, [sp, #12]
 801cb04:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801cb06:	9102      	str	r1, [sp, #8]
 801cb08:	9201      	str	r2, [sp, #4]
 801cb0a:	6832      	ldr	r2, [r6, #0]
 801cb0c:	9200      	str	r2, [sp, #0]
 801cb0e:	462a      	mov	r2, r5
 801cb10:	2100      	movs	r1, #0
 801cb12:	4628      	mov	r0, r5
 801cb14:	f7ff fda0 	bl	801c658 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801cb18:	b120      	cbz	r0, 801cb24 <lfs_dir_fetchmatch+0x468>
 801cb1a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cb1e:	d001      	beq.n	801cb24 <lfs_dir_fetchmatch+0x468>
                    return err;
 801cb20:	4683      	mov	fp, r0
 801cb22:	e02e      	b.n	801cb82 <lfs_dir_fetchmatch+0x4c6>
                dir->erased = (fcrc_ == fcrc.crc);
 801cb24:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cb26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cb28:	4293      	cmp	r3, r2
 801cb2a:	bf14      	ite	ne
 801cb2c:	2300      	movne	r3, #0
 801cb2e:	2301      	moveq	r3, #1
 801cb30:	75b3      	strb	r3, [r6, #22]
 801cb32:	e67c      	b.n	801c82e <lfs_dir_fetchmatch+0x172>
                besttag |= 0x80000000;
 801cb34:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801cb38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cb3a:	b13b      	cbz	r3, 801cb4c <lfs_dir_fetchmatch+0x490>
    return (tag & 0x000ffc00) >> 10;
 801cb3c:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801cb40:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801cb42:	4293      	cmp	r3, r2
 801cb44:	bf28      	it	cs
 801cb46:	4613      	movcs	r3, r2
 801cb48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801cb4a:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801cb4c:	f1bb 0f00 	cmp.w	fp, #0
 801cb50:	da17      	bge.n	801cb82 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x000ffc00) >> 10;
 801cb52:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801cb56:	8ab2      	ldrh	r2, [r6, #20]
 801cb58:	429a      	cmp	r2, r3
 801cb5a:	d902      	bls.n	801cb62 <lfs_dir_fetchmatch+0x4a6>
            return LFS_ERR_NOENT;
 801cb5c:	f06f 0b01 	mvn.w	fp, #1
 801cb60:	e00f      	b.n	801cb82 <lfs_dir_fetchmatch+0x4c6>
            return 0;
 801cb62:	f04f 0b00 	mov.w	fp, #0
 801cb66:	e00c      	b.n	801cb82 <lfs_dir_fetchmatch+0x4c6>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801cb68:	4b0b      	ldr	r3, [pc, #44]	@ (801cb98 <lfs_dir_fetchmatch+0x4dc>)
 801cb6a:	9301      	str	r3, [sp, #4]
 801cb6c:	6873      	ldr	r3, [r6, #4]
 801cb6e:	9300      	str	r3, [sp, #0]
 801cb70:	6833      	ldr	r3, [r6, #0]
 801cb72:	f240 5259 	movw	r2, #1369	@ 0x559
 801cb76:	4909      	ldr	r1, [pc, #36]	@ (801cb9c <lfs_dir_fetchmatch+0x4e0>)
 801cb78:	4809      	ldr	r0, [pc, #36]	@ (801cba0 <lfs_dir_fetchmatch+0x4e4>)
 801cb7a:	f00d fd9b 	bl	802a6b4 <printf>
    return LFS_ERR_CORRUPT;
 801cb7e:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801cb82:	4658      	mov	r0, fp
 801cb84:	b017      	add	sp, #92	@ 0x5c
 801cb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801cb8a:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801cb8e:	e7f8      	b.n	801cb82 <lfs_dir_fetchmatch+0x4c6>
 801cb90:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801cb94:	e7f5      	b.n	801cb82 <lfs_dir_fetchmatch+0x4c6>
 801cb96:	bf00      	nop
 801cb98:	08037490 	.word	0x08037490
 801cb9c:	080399a8 	.word	0x080399a8
 801cba0:	08039b30 	.word	0x08039b30

0801cba4 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801cba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cba8:	b08a      	sub	sp, #40	@ 0x28
 801cbaa:	4681      	mov	r9, r0
 801cbac:	4688      	mov	r8, r1
 801cbae:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801cbb0:	2300      	movs	r3, #0
 801cbb2:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801cbb4:	2501      	movs	r5, #1
 801cbb6:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801cbb8:	4a29      	ldr	r2, [pc, #164]	@ (801cc60 <lfs_fs_parent+0xbc>)
 801cbba:	ab05      	add	r3, sp, #20
 801cbbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cbc0:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801cbc4:	46aa      	mov	sl, r5
    while (!lfs_pair_isnull(parent->tail)) {
 801cbc6:	e03a      	b.n	801cc3e <lfs_fs_parent+0x9a>
            LFS_WARN("Cycle detected in tail list");
 801cbc8:	4b26      	ldr	r3, [pc, #152]	@ (801cc64 <lfs_fs_parent+0xc0>)
 801cbca:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801cbce:	4926      	ldr	r1, [pc, #152]	@ (801cc68 <lfs_fs_parent+0xc4>)
 801cbd0:	4826      	ldr	r0, [pc, #152]	@ (801cc6c <lfs_fs_parent+0xc8>)
 801cbd2:	f00d fd6f 	bl	802a6b4 <printf>
            return LFS_ERR_CORRUPT;
 801cbd6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801cbda:	e03c      	b.n	801cc56 <lfs_fs_parent+0xb2>
            tortoise[0] = parent->tail[0];
 801cbdc:	9705      	str	r7, [sp, #20]
            tortoise[1] = parent->tail[1];
 801cbde:	69e3      	ldr	r3, [r4, #28]
 801cbe0:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 801cbe2:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801cbe6:	2500      	movs	r5, #0
 801cbe8:	e00d      	b.n	801cc06 <lfs_fs_parent+0x62>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cbea:	2301      	movs	r3, #1
 801cbec:	e000      	b.n	801cbf0 <lfs_fs_parent+0x4c>
 801cbee:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 801cbf0:	bb7b      	cbnz	r3, 801cc52 <lfs_fs_parent+0xae>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801cbf2:	f104 0618 	add.w	r6, r4, #24
 801cbf6:	a905      	add	r1, sp, #20
 801cbf8:	4630      	mov	r0, r6
 801cbfa:	f7fe fce7 	bl	801b5cc <lfs_pair_issync>
 801cbfe:	2800      	cmp	r0, #0
 801cc00:	d1e2      	bne.n	801cbc8 <lfs_fs_parent+0x24>
        if (tortoise_i == tortoise_period) {
 801cc02:	4555      	cmp	r5, sl
 801cc04:	d0ea      	beq.n	801cbdc <lfs_fs_parent+0x38>
        tortoise_i += 1;
 801cc06:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801cc08:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801cc0c:	f8d8 3000 	ldr.w	r3, [r8]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801cc10:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801cc12:	f8d8 3004 	ldr.w	r3, [r8, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801cc16:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801cc18:	ab07      	add	r3, sp, #28
 801cc1a:	9303      	str	r3, [sp, #12]
 801cc1c:	4b14      	ldr	r3, [pc, #80]	@ (801cc70 <lfs_fs_parent+0xcc>)
 801cc1e:	9302      	str	r3, [sp, #8]
 801cc20:	2300      	movs	r3, #0
 801cc22:	9301      	str	r3, [sp, #4]
 801cc24:	4b13      	ldr	r3, [pc, #76]	@ (801cc74 <lfs_fs_parent+0xd0>)
 801cc26:	9300      	str	r3, [sp, #0]
 801cc28:	4b13      	ldr	r3, [pc, #76]	@ (801cc78 <lfs_fs_parent+0xd4>)
 801cc2a:	4632      	mov	r2, r6
 801cc2c:	4621      	mov	r1, r4
 801cc2e:	4648      	mov	r0, r9
 801cc30:	f7ff fd44 	bl	801c6bc <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801cc34:	4603      	mov	r3, r0
 801cc36:	b110      	cbz	r0, 801cc3e <lfs_fs_parent+0x9a>
 801cc38:	f110 0f02 	cmn.w	r0, #2
 801cc3c:	d10b      	bne.n	801cc56 <lfs_fs_parent+0xb2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cc3e:	69a7      	ldr	r7, [r4, #24]
 801cc40:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801cc44:	d0d3      	beq.n	801cbee <lfs_fs_parent+0x4a>
 801cc46:	69e3      	ldr	r3, [r4, #28]
 801cc48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cc4c:	d0cd      	beq.n	801cbea <lfs_fs_parent+0x46>
 801cc4e:	2300      	movs	r3, #0
 801cc50:	e7ce      	b.n	801cbf0 <lfs_fs_parent+0x4c>
    return LFS_ERR_NOENT;
 801cc52:	f06f 0301 	mvn.w	r3, #1
}
 801cc56:	4618      	mov	r0, r3
 801cc58:	b00a      	add	sp, #40	@ 0x28
 801cc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc5e:	bf00      	nop
 801cc60:	08036434 	.word	0x08036434
 801cc64:	08037490 	.word	0x08037490
 801cc68:	080399a8 	.word	0x080399a8
 801cc6c:	08039b68 	.word	0x08039b68
 801cc70:	0801bd8d 	.word	0x0801bd8d
 801cc74:	20000008 	.word	0x20000008
 801cc78:	7ff003ff 	.word	0x7ff003ff

0801cc7c <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801cc7c:	b500      	push	{lr}
 801cc7e:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801cc80:	2300      	movs	r3, #0
 801cc82:	9303      	str	r3, [sp, #12]
 801cc84:	9302      	str	r3, [sp, #8]
 801cc86:	9301      	str	r3, [sp, #4]
 801cc88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cc8c:	9300      	str	r3, [sp, #0]
 801cc8e:	f7ff fd15 	bl	801c6bc <lfs_dir_fetchmatch>
}
 801cc92:	b005      	add	sp, #20
 801cc94:	f85d fb04 	ldr.w	pc, [sp], #4

0801cc98 <lfs_fs_traverse_>:
        bool includeorphans) {
 801cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc9c:	b093      	sub	sp, #76	@ 0x4c
 801cc9e:	4606      	mov	r6, r0
 801cca0:	460f      	mov	r7, r1
 801cca2:	4690      	mov	r8, r2
 801cca4:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801cca6:	2220      	movs	r2, #32
 801cca8:	2100      	movs	r1, #0
 801ccaa:	a80a      	add	r0, sp, #40	@ 0x28
 801ccac:	f010 fa20 	bl	802d0f0 <memset>
 801ccb0:	2501      	movs	r5, #1
 801ccb2:	9511      	str	r5, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801ccb4:	4a62      	ldr	r2, [pc, #392]	@ (801ce40 <lfs_fs_traverse_+0x1a8>)
 801ccb6:	ab08      	add	r3, sp, #32
 801ccb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ccbc:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801ccc0:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ccc2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ccc4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801ccc8:	f000 8081 	beq.w	801cdce <lfs_fs_traverse_+0x136>
 801cccc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ccce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ccd2:	d07a      	beq.n	801cdca <lfs_fs_traverse_+0x132>
 801ccd4:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d17b      	bne.n	801cdd2 <lfs_fs_traverse_+0x13a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801ccda:	a908      	add	r1, sp, #32
 801ccdc:	a810      	add	r0, sp, #64	@ 0x40
 801ccde:	f7fe fc75 	bl	801b5cc <lfs_pair_issync>
 801cce2:	b988      	cbnz	r0, 801cd08 <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801cce4:	4555      	cmp	r5, sl
 801cce6:	d019      	beq.n	801cd1c <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801cce8:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 801ccea:	2400      	movs	r4, #0
 801ccec:	2c01      	cmp	r4, #1
 801ccee:	dc1c      	bgt.n	801cd2a <lfs_fs_traverse_+0x92>
            int err = cb(data, dir.tail[i]);
 801ccf0:	1da3      	adds	r3, r4, #6
 801ccf2:	aa12      	add	r2, sp, #72	@ 0x48
 801ccf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ccf8:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801ccfc:	4640      	mov	r0, r8
 801ccfe:	47b8      	blx	r7
            if (err) {
 801cd00:	4603      	mov	r3, r0
 801cd02:	b9f8      	cbnz	r0, 801cd44 <lfs_fs_traverse_+0xac>
        for (int i = 0; i < 2; i++) {
 801cd04:	3401      	adds	r4, #1
 801cd06:	e7f1      	b.n	801ccec <lfs_fs_traverse_+0x54>
            LFS_WARN("Cycle detected in tail list");
 801cd08:	4b4e      	ldr	r3, [pc, #312]	@ (801ce44 <lfs_fs_traverse_+0x1ac>)
 801cd0a:	f241 2222 	movw	r2, #4642	@ 0x1222
 801cd0e:	494e      	ldr	r1, [pc, #312]	@ (801ce48 <lfs_fs_traverse_+0x1b0>)
 801cd10:	484e      	ldr	r0, [pc, #312]	@ (801ce4c <lfs_fs_traverse_+0x1b4>)
 801cd12:	f00d fccf 	bl	802a6b4 <printf>
            return LFS_ERR_CORRUPT;
 801cd16:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801cd1a:	e013      	b.n	801cd44 <lfs_fs_traverse_+0xac>
            tortoise[0] = dir.tail[0];
 801cd1c:	9408      	str	r4, [sp, #32]
            tortoise[1] = dir.tail[1];
 801cd1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cd20:	9309      	str	r3, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801cd22:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801cd26:	2500      	movs	r5, #0
 801cd28:	e7de      	b.n	801cce8 <lfs_fs_traverse_+0x50>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801cd2a:	aa10      	add	r2, sp, #64	@ 0x40
 801cd2c:	a90a      	add	r1, sp, #40	@ 0x28
 801cd2e:	4630      	mov	r0, r6
 801cd30:	f7ff ffa4 	bl	801cc7c <lfs_dir_fetch>
        if (err) {
 801cd34:	9005      	str	r0, [sp, #20]
 801cd36:	2800      	cmp	r0, #0
 801cd38:	d17f      	bne.n	801ce3a <lfs_fs_traverse_+0x1a2>
        for (uint16_t id = 0; id < dir.count; id++) {
 801cd3a:	2400      	movs	r4, #0
 801cd3c:	e016      	b.n	801cd6c <lfs_fs_traverse_+0xd4>
                if (tag == LFS_ERR_NOENT) {
 801cd3e:	f113 0f02 	cmn.w	r3, #2
 801cd42:	d011      	beq.n	801cd68 <lfs_fs_traverse_+0xd0>
}
 801cd44:	4618      	mov	r0, r3
 801cd46:	b013      	add	sp, #76	@ 0x4c
 801cd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801cd4c:	f8cd 8008 	str.w	r8, [sp, #8]
 801cd50:	9701      	str	r7, [sp, #4]
 801cd52:	9b07      	ldr	r3, [sp, #28]
 801cd54:	9300      	str	r3, [sp, #0]
 801cd56:	9b06      	ldr	r3, [sp, #24]
 801cd58:	4632      	mov	r2, r6
 801cd5a:	2100      	movs	r1, #0
 801cd5c:	4630      	mov	r0, r6
 801cd5e:	f7fe ffc9 	bl	801bcf4 <lfs_ctz_traverse>
                if (err) {
 801cd62:	4603      	mov	r3, r0
 801cd64:	2800      	cmp	r0, #0
 801cd66:	d1ed      	bne.n	801cd44 <lfs_fs_traverse_+0xac>
        for (uint16_t id = 0; id < dir.count; id++) {
 801cd68:	3401      	adds	r4, #1
 801cd6a:	b2a4      	uxth	r4, r4
 801cd6c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801cd70:	42a3      	cmp	r3, r4
 801cd72:	d9a6      	bls.n	801ccc2 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801cd74:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801cd76:	aa06      	add	r2, sp, #24
 801cd78:	9200      	str	r2, [sp, #0]
 801cd7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801cd7e:	f043 0308 	orr.w	r3, r3, #8
 801cd82:	4a33      	ldr	r2, [pc, #204]	@ (801ce50 <lfs_fs_traverse_+0x1b8>)
 801cd84:	a90a      	add	r1, sp, #40	@ 0x28
 801cd86:	4630      	mov	r0, r6
 801cd88:	f7fe ff8a 	bl	801bca0 <lfs_dir_get>
            if (tag < 0) {
 801cd8c:	1e03      	subs	r3, r0, #0
 801cd8e:	dbd6      	blt.n	801cd3e <lfs_fs_traverse_+0xa6>
    return (tag & 0x7ff00000) >> 20;
 801cd90:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801cd94:	f240 2202 	movw	r2, #514	@ 0x202
 801cd98:	4293      	cmp	r3, r2
 801cd9a:	d0d7      	beq.n	801cd4c <lfs_fs_traverse_+0xb4>
            } else if (includeorphans &&
 801cd9c:	f1b9 0f00 	cmp.w	r9, #0
 801cda0:	d0e2      	beq.n	801cd68 <lfs_fs_traverse_+0xd0>
 801cda2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cda6:	d1df      	bne.n	801cd68 <lfs_fs_traverse_+0xd0>
                for (int i = 0; i < 2; i++) {
 801cda8:	f8dd b014 	ldr.w	fp, [sp, #20]
 801cdac:	e001      	b.n	801cdb2 <lfs_fs_traverse_+0x11a>
 801cdae:	f10b 0b01 	add.w	fp, fp, #1
 801cdb2:	f1bb 0f01 	cmp.w	fp, #1
 801cdb6:	dcd7      	bgt.n	801cd68 <lfs_fs_traverse_+0xd0>
                    err = cb(data, (&ctz.head)[i]);
 801cdb8:	ab06      	add	r3, sp, #24
 801cdba:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801cdbe:	4640      	mov	r0, r8
 801cdc0:	47b8      	blx	r7
                    if (err) {
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	2800      	cmp	r0, #0
 801cdc6:	d0f2      	beq.n	801cdae <lfs_fs_traverse_+0x116>
 801cdc8:	e7bc      	b.n	801cd44 <lfs_fs_traverse_+0xac>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cdca:	2301      	movs	r3, #1
 801cdcc:	e783      	b.n	801ccd6 <lfs_fs_traverse_+0x3e>
 801cdce:	2301      	movs	r3, #1
 801cdd0:	e781      	b.n	801ccd6 <lfs_fs_traverse_+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801cdd2:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801cdd4:	e00f      	b.n	801cdf6 <lfs_fs_traverse_+0x15e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801cdd6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801cdd8:	f8cd 8008 	str.w	r8, [sp, #8]
 801cddc:	9701      	str	r7, [sp, #4]
 801cdde:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801cde0:	9200      	str	r2, [sp, #0]
 801cde2:	4632      	mov	r2, r6
 801cde4:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801cde8:	4630      	mov	r0, r6
 801cdea:	f7fe ff83 	bl	801bcf4 <lfs_ctz_traverse>
            if (err) {
 801cdee:	4603      	mov	r3, r0
 801cdf0:	b158      	cbz	r0, 801ce0a <lfs_fs_traverse_+0x172>
 801cdf2:	e7a7      	b.n	801cd44 <lfs_fs_traverse_+0xac>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801cdf4:	6824      	ldr	r4, [r4, #0]
 801cdf6:	b1f4      	cbz	r4, 801ce36 <lfs_fs_traverse_+0x19e>
        if (f->type != LFS_TYPE_REG) {
 801cdf8:	79a3      	ldrb	r3, [r4, #6]
 801cdfa:	2b01      	cmp	r3, #1
 801cdfc:	d1fa      	bne.n	801cdf4 <lfs_fs_traverse_+0x15c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801cdfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ce00:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801ce04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ce08:	d0e5      	beq.n	801cdd6 <lfs_fs_traverse_+0x13e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801ce0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ce0c:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801ce10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ce14:	d1ee      	bne.n	801cdf4 <lfs_fs_traverse_+0x15c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801ce16:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801ce18:	f8cd 8008 	str.w	r8, [sp, #8]
 801ce1c:	9701      	str	r7, [sp, #4]
 801ce1e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801ce20:	9200      	str	r2, [sp, #0]
 801ce22:	4632      	mov	r2, r6
 801ce24:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801ce28:	4630      	mov	r0, r6
 801ce2a:	f7fe ff63 	bl	801bcf4 <lfs_ctz_traverse>
            if (err) {
 801ce2e:	4603      	mov	r3, r0
 801ce30:	2800      	cmp	r0, #0
 801ce32:	d0df      	beq.n	801cdf4 <lfs_fs_traverse_+0x15c>
 801ce34:	e786      	b.n	801cd44 <lfs_fs_traverse_+0xac>
    return 0;
 801ce36:	2300      	movs	r3, #0
 801ce38:	e784      	b.n	801cd44 <lfs_fs_traverse_+0xac>
            return err;
 801ce3a:	9b05      	ldr	r3, [sp, #20]
 801ce3c:	e782      	b.n	801cd44 <lfs_fs_traverse_+0xac>
 801ce3e:	bf00      	nop
 801ce40:	08036434 	.word	0x08036434
 801ce44:	08037490 	.word	0x08037490
 801ce48:	080399a8 	.word	0x080399a8
 801ce4c:	08039b68 	.word	0x08039b68
 801ce50:	700ffc00 	.word	0x700ffc00

0801ce54 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801ce54:	b538      	push	{r3, r4, r5, lr}
 801ce56:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801ce58:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801ce5a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801ce5c:	4413      	add	r3, r2
            % lfs->block_count;
 801ce5e:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801ce60:	fbb3 f1f2 	udiv	r1, r3, r2
 801ce64:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801ce68:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801ce6a:	2100      	movs	r1, #0
 801ce6c:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801ce6e:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801ce70:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801ce72:	00db      	lsls	r3, r3, #3
 801ce74:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801ce76:	4283      	cmp	r3, r0
 801ce78:	bf28      	it	cs
 801ce7a:	4603      	movcs	r3, r0
 801ce7c:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801ce7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801ce80:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801ce82:	f010 f935 	bl	802d0f0 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801ce86:	2301      	movs	r3, #1
 801ce88:	4622      	mov	r2, r4
 801ce8a:	4906      	ldr	r1, [pc, #24]	@ (801cea4 <lfs_alloc_scan+0x50>)
 801ce8c:	4620      	mov	r0, r4
 801ce8e:	f7ff ff03 	bl	801cc98 <lfs_fs_traverse_>
    if (err) {
 801ce92:	4605      	mov	r5, r0
 801ce94:	b908      	cbnz	r0, 801ce9a <lfs_alloc_scan+0x46>
}
 801ce96:	4628      	mov	r0, r5
 801ce98:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801ce9a:	4620      	mov	r0, r4
 801ce9c:	f7fe fc15 	bl	801b6ca <lfs_alloc_drop>
        return err;
 801cea0:	e7f9      	b.n	801ce96 <lfs_alloc_scan+0x42>
 801cea2:	bf00      	nop
 801cea4:	0801b6d9 	.word	0x0801b6d9

0801cea8 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801cea8:	b530      	push	{r4, r5, lr}
 801ceaa:	b083      	sub	sp, #12
 801ceac:	4604      	mov	r4, r0
 801ceae:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801ceb0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801ceb2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801ceb4:	4293      	cmp	r3, r2
 801ceb6:	d22b      	bcs.n	801cf10 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801ceb8:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801ceba:	08da      	lsrs	r2, r3, #3
 801cebc:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801cebe:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801cec2:	40ca      	lsrs	r2, r1
 801cec4:	f012 0f01 	tst.w	r2, #1
 801cec8:	d005      	beq.n	801ced6 <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801ceca:	3301      	adds	r3, #1
 801cecc:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801cece:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801ced0:	3b01      	subs	r3, #1
 801ced2:	6623      	str	r3, [r4, #96]	@ 0x60
 801ced4:	e7ec      	b.n	801ceb0 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801ced6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ced8:	4413      	add	r3, r2
                        % lfs->block_count;
 801ceda:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801cedc:	fbb3 f1f2 	udiv	r1, r3, r2
 801cee0:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801cee4:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801cee6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801cee8:	3301      	adds	r3, #1
 801ceea:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801ceec:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801ceee:	3a01      	subs	r2, #1
 801cef0:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801cef2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801cef4:	4293      	cmp	r3, r2
 801cef6:	d225      	bcs.n	801cf44 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801cef8:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801cefa:	08da      	lsrs	r2, r3, #3
 801cefc:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801cefe:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801cf02:	fa22 f303 	lsr.w	r3, r2, r3
 801cf06:	f013 0f01 	tst.w	r3, #1
 801cf0a:	d1ec      	bne.n	801cee6 <lfs_alloc+0x3e>
                        return 0;
 801cf0c:	2000      	movs	r0, #0
 801cf0e:	e01a      	b.n	801cf46 <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801cf10:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801cf12:	b12a      	cbz	r2, 801cf20 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801cf14:	4620      	mov	r0, r4
 801cf16:	f7ff ff9d 	bl	801ce54 <lfs_alloc_scan>
        if(err) {
 801cf1a:	2800      	cmp	r0, #0
 801cf1c:	d0c8      	beq.n	801ceb0 <lfs_alloc+0x8>
 801cf1e:	e012      	b.n	801cf46 <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801cf20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cf22:	4413      	add	r3, r2
 801cf24:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801cf26:	fbb3 f1f2 	udiv	r1, r3, r2
 801cf2a:	4808      	ldr	r0, [pc, #32]	@ (801cf4c <lfs_alloc+0xa4>)
 801cf2c:	9000      	str	r0, [sp, #0]
 801cf2e:	fb02 3311 	mls	r3, r2, r1, r3
 801cf32:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801cf36:	4906      	ldr	r1, [pc, #24]	@ (801cf50 <lfs_alloc+0xa8>)
 801cf38:	4806      	ldr	r0, [pc, #24]	@ (801cf54 <lfs_alloc+0xac>)
 801cf3a:	f00d fbbb 	bl	802a6b4 <printf>
            return LFS_ERR_NOSPC;
 801cf3e:	f06f 001b 	mvn.w	r0, #27
 801cf42:	e000      	b.n	801cf46 <lfs_alloc+0x9e>
                        return 0;
 801cf44:	2000      	movs	r0, #0
}
 801cf46:	b003      	add	sp, #12
 801cf48:	bd30      	pop	{r4, r5, pc}
 801cf4a:	bf00      	nop
 801cf4c:	08037490 	.word	0x08037490
 801cf50:	080399a8 	.word	0x080399a8
 801cf54:	08039b94 	.word	0x08039b94

0801cf58 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801cf58:	b570      	push	{r4, r5, r6, lr}
 801cf5a:	b084      	sub	sp, #16
 801cf5c:	4606      	mov	r6, r0
 801cf5e:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801cf60:	2500      	movs	r5, #0
 801cf62:	2d01      	cmp	r5, #1
 801cf64:	dc0d      	bgt.n	801cf82 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801cf66:	3501      	adds	r5, #1
 801cf68:	f005 0101 	and.w	r1, r5, #1
 801cf6c:	bf48      	it	mi
 801cf6e:	4249      	negmi	r1, r1
 801cf70:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801cf74:	4630      	mov	r0, r6
 801cf76:	f7ff ff97 	bl	801cea8 <lfs_alloc>
        if (err) {
 801cf7a:	4603      	mov	r3, r0
 801cf7c:	2800      	cmp	r0, #0
 801cf7e:	d0f0      	beq.n	801cf62 <lfs_dir_alloc+0xa>
 801cf80:	e02d      	b.n	801cfde <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801cf82:	2100      	movs	r1, #0
 801cf84:	4622      	mov	r2, r4
 801cf86:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801cf8a:	2304      	movs	r3, #4
 801cf8c:	9303      	str	r3, [sp, #12]
 801cf8e:	9202      	str	r2, [sp, #8]
 801cf90:	9101      	str	r1, [sp, #4]
 801cf92:	6822      	ldr	r2, [r4, #0]
 801cf94:	9200      	str	r2, [sp, #0]
 801cf96:	4632      	mov	r2, r6
 801cf98:	4630      	mov	r0, r6
 801cf9a:	f7fe fcdd 	bl	801b958 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801cf9e:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801cfa0:	4603      	mov	r3, r0
 801cfa2:	b110      	cbz	r0, 801cfaa <lfs_dir_alloc+0x52>
 801cfa4:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cfa8:	d119      	bne.n	801cfde <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801cfaa:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801cfac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	dd0a      	ble.n	801cfc8 <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801cfb2:	3301      	adds	r3, #1
 801cfb4:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801cfb8:	1853      	adds	r3, r2, r1
 801cfba:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801cfbc:	fbb3 f2f1 	udiv	r2, r3, r1
 801cfc0:	fb01 3212 	mls	r2, r1, r2, r3
 801cfc4:	1a9b      	subs	r3, r3, r2
 801cfc6:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801cfc8:	2304      	movs	r3, #4
 801cfca:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801cfcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cfd0:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801cfd6:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801cfd8:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801cfda:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801cfdc:	75e3      	strb	r3, [r4, #23]
}
 801cfde:	4618      	mov	r0, r3
 801cfe0:	b004      	add	sp, #16
 801cfe2:	bd70      	pop	{r4, r5, r6, pc}

0801cfe4 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801cfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cfe6:	b089      	sub	sp, #36	@ 0x24
 801cfe8:	4605      	mov	r5, r0
 801cfea:	460e      	mov	r6, r1
 801cfec:	e053      	b.n	801d096 <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801cfee:	2201      	movs	r2, #1
 801cff0:	9203      	str	r2, [sp, #12]
 801cff2:	f10d 021b 	add.w	r2, sp, #27
 801cff6:	9202      	str	r2, [sp, #8]
 801cff8:	9401      	str	r4, [sp, #4]
 801cffa:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801cffc:	9200      	str	r2, [sp, #0]
 801cffe:	1b1b      	subs	r3, r3, r4
 801d000:	462a      	mov	r2, r5
 801d002:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801d006:	4628      	mov	r0, r5
 801d008:	f7fe fca6 	bl	801b958 <lfs_bd_read>
                if (err) {
 801d00c:	2800      	cmp	r0, #0
 801d00e:	d152      	bne.n	801d0b6 <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801d010:	2301      	movs	r3, #1
 801d012:	9303      	str	r3, [sp, #12]
 801d014:	f10d 021b 	add.w	r2, sp, #27
 801d018:	9202      	str	r2, [sp, #8]
 801d01a:	9401      	str	r4, [sp, #4]
 801d01c:	9a07      	ldr	r2, [sp, #28]
 801d01e:	9200      	str	r2, [sp, #0]
 801d020:	462a      	mov	r2, r5
 801d022:	f105 0110 	add.w	r1, r5, #16
 801d026:	4628      	mov	r0, r5
 801d028:	f7ff f992 	bl	801c350 <lfs_bd_prog>
            if (err) {
 801d02c:	bb20      	cbnz	r0, 801d078 <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801d02e:	3401      	adds	r4, #1
 801d030:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801d032:	42a3      	cmp	r3, r4
 801d034:	d945      	bls.n	801d0c2 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801d036:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801d038:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801d03c:	d0d7      	beq.n	801cfee <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801d03e:	88b2      	ldrh	r2, [r6, #4]
 801d040:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801d042:	2101      	movs	r1, #1
 801d044:	9105      	str	r1, [sp, #20]
 801d046:	f10d 011b 	add.w	r1, sp, #27
 801d04a:	9104      	str	r1, [sp, #16]
 801d04c:	9403      	str	r4, [sp, #12]
 801d04e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801d052:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801d056:	9202      	str	r2, [sp, #8]
 801d058:	4a27      	ldr	r2, [pc, #156]	@ (801d0f8 <lfs_file_relocate+0x114>)
 801d05a:	9201      	str	r2, [sp, #4]
 801d05c:	1b1b      	subs	r3, r3, r4
 801d05e:	9300      	str	r3, [sp, #0]
 801d060:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801d064:	2200      	movs	r2, #0
 801d066:	f106 0108 	add.w	r1, r6, #8
 801d06a:	4628      	mov	r0, r5
 801d06c:	f7ff f84c 	bl	801c108 <lfs_dir_getread>
                if (err) {
 801d070:	2800      	cmp	r0, #0
 801d072:	d0cd      	beq.n	801d010 <lfs_file_relocate+0x2c>
                    return err;
 801d074:	4607      	mov	r7, r0
 801d076:	e03b      	b.n	801d0f0 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801d078:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d07c:	d11d      	bne.n	801d0ba <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801d07e:	4b1f      	ldr	r3, [pc, #124]	@ (801d0fc <lfs_file_relocate+0x118>)
 801d080:	9300      	str	r3, [sp, #0]
 801d082:	9b07      	ldr	r3, [sp, #28]
 801d084:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801d088:	491d      	ldr	r1, [pc, #116]	@ (801d100 <lfs_file_relocate+0x11c>)
 801d08a:	481e      	ldr	r0, [pc, #120]	@ (801d104 <lfs_file_relocate+0x120>)
 801d08c:	f00d fb12 	bl	802a6b4 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801d090:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d094:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801d096:	a907      	add	r1, sp, #28
 801d098:	4628      	mov	r0, r5
 801d09a:	f7ff ff05 	bl	801cea8 <lfs_alloc>
        if (err) {
 801d09e:	4607      	mov	r7, r0
 801d0a0:	bb30      	cbnz	r0, 801d0f0 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801d0a2:	9907      	ldr	r1, [sp, #28]
 801d0a4:	4628      	mov	r0, r5
 801d0a6:	f7fe fbdd 	bl	801b864 <lfs_bd_erase>
        if (err) {
 801d0aa:	4607      	mov	r7, r0
 801d0ac:	b138      	cbz	r0, 801d0be <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801d0ae:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d0b2:	d0e4      	beq.n	801d07e <lfs_file_relocate+0x9a>
 801d0b4:	e01c      	b.n	801d0f0 <lfs_file_relocate+0x10c>
                    return err;
 801d0b6:	4607      	mov	r7, r0
 801d0b8:	e01a      	b.n	801d0f0 <lfs_file_relocate+0x10c>
                return err;
 801d0ba:	4607      	mov	r7, r0
 801d0bc:	e018      	b.n	801d0f0 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801d0be:	2400      	movs	r4, #0
 801d0c0:	e7b6      	b.n	801d030 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801d0c2:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d0c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d0c6:	69e9      	ldr	r1, [r5, #28]
 801d0c8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801d0ca:	f011 fa4d 	bl	802e568 <memcpy>
        file->cache.block = lfs->pcache.block;
 801d0ce:	692b      	ldr	r3, [r5, #16]
 801d0d0:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801d0d2:	696b      	ldr	r3, [r5, #20]
 801d0d4:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801d0d6:	69ab      	ldr	r3, [r5, #24]
 801d0d8:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801d0da:	f105 0110 	add.w	r1, r5, #16
 801d0de:	4628      	mov	r0, r5
 801d0e0:	f7fe fc10 	bl	801b904 <lfs_cache_zero>
        file->block = nblock;
 801d0e4:	9b07      	ldr	r3, [sp, #28]
 801d0e6:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801d0e8:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801d0ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d0ee:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801d0f0:	4638      	mov	r0, r7
 801d0f2:	b009      	add	sp, #36	@ 0x24
 801d0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0f6:	bf00      	nop
 801d0f8:	fff7fc00 	.word	0xfff7fc00
 801d0fc:	08037490 	.word	0x08037490
 801d100:	080399a8 	.word	0x080399a8
 801d104:	08039bc0 	.word	0x08039bc0

0801d108 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801d108:	b538      	push	{r3, r4, r5, lr}
 801d10a:	4605      	mov	r5, r0
 801d10c:	460c      	mov	r4, r1
    file->off = file->pos;
 801d10e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801d110:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801d112:	f7fe fad7 	bl	801b6c4 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801d116:	4621      	mov	r1, r4
 801d118:	4628      	mov	r0, r5
 801d11a:	f7ff ff63 	bl	801cfe4 <lfs_file_relocate>
    if (err) {
 801d11e:	b918      	cbnz	r0, 801d128 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801d120:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d122:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801d126:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801d128:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d12c <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801d12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d130:	b08b      	sub	sp, #44	@ 0x2c
 801d132:	4605      	mov	r5, r0
 801d134:	460f      	mov	r7, r1
 801d136:	4616      	mov	r6, r2
 801d138:	9305      	str	r3, [sp, #20]
 801d13a:	e04d      	b.n	801d1d8 <lfs_ctz_extend+0xac>
            if (size == 0) {
 801d13c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d13e:	2b00      	cmp	r3, #0
 801d140:	d032      	beq.n	801d1a8 <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801d142:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d144:	3b01      	subs	r3, #1
 801d146:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801d148:	a908      	add	r1, sp, #32
 801d14a:	4628      	mov	r0, r5
 801d14c:	f7fe fbe6 	bl	801b91c <lfs_ctz_index>
            noff = noff + 1;
 801d150:	9b08      	ldr	r3, [sp, #32]
 801d152:	3301      	adds	r3, #1
 801d154:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801d156:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801d158:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801d15a:	4293      	cmp	r3, r2
 801d15c:	d05b      	beq.n	801d216 <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801d15e:	2400      	movs	r4, #0
 801d160:	46b9      	mov	r9, r7
 801d162:	9f05      	ldr	r7, [sp, #20]
 801d164:	9b08      	ldr	r3, [sp, #32]
 801d166:	42a3      	cmp	r3, r4
 801d168:	d94a      	bls.n	801d200 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801d16a:	2201      	movs	r2, #1
 801d16c:	9203      	str	r2, [sp, #12]
 801d16e:	aa09      	add	r2, sp, #36	@ 0x24
 801d170:	9202      	str	r2, [sp, #8]
 801d172:	9401      	str	r4, [sp, #4]
 801d174:	9700      	str	r7, [sp, #0]
 801d176:	1b1b      	subs	r3, r3, r4
 801d178:	4632      	mov	r2, r6
 801d17a:	2100      	movs	r1, #0
 801d17c:	4628      	mov	r0, r5
 801d17e:	f7fe fbeb 	bl	801b958 <lfs_bd_read>
                    if (err) {
 801d182:	4603      	mov	r3, r0
 801d184:	2800      	cmp	r0, #0
 801d186:	d139      	bne.n	801d1fc <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801d188:	2301      	movs	r3, #1
 801d18a:	9303      	str	r3, [sp, #12]
 801d18c:	aa09      	add	r2, sp, #36	@ 0x24
 801d18e:	9202      	str	r2, [sp, #8]
 801d190:	9401      	str	r4, [sp, #4]
 801d192:	9a07      	ldr	r2, [sp, #28]
 801d194:	9200      	str	r2, [sp, #0]
 801d196:	4632      	mov	r2, r6
 801d198:	4649      	mov	r1, r9
 801d19a:	4628      	mov	r0, r5
 801d19c:	f7ff f8d8 	bl	801c350 <lfs_bd_prog>
                    if (err) {
 801d1a0:	4603      	mov	r3, r0
 801d1a2:	b948      	cbnz	r0, 801d1b8 <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801d1a4:	3401      	adds	r4, #1
 801d1a6:	e7dd      	b.n	801d164 <lfs_ctz_extend+0x38>
                *block = nblock;
 801d1a8:	4682      	mov	sl, r0
 801d1aa:	9b07      	ldr	r3, [sp, #28]
 801d1ac:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d1ae:	6013      	str	r3, [r2, #0]
                *off = 0;
 801d1b0:	2300      	movs	r3, #0
 801d1b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d1b4:	6013      	str	r3, [r2, #0]
                return 0;
 801d1b6:	e02a      	b.n	801d20e <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801d1b8:	464f      	mov	r7, r9
 801d1ba:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d1be:	d11d      	bne.n	801d1fc <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801d1c0:	4b36      	ldr	r3, [pc, #216]	@ (801d29c <lfs_ctz_extend+0x170>)
 801d1c2:	9300      	str	r3, [sp, #0]
 801d1c4:	9b07      	ldr	r3, [sp, #28]
 801d1c6:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801d1ca:	4935      	ldr	r1, [pc, #212]	@ (801d2a0 <lfs_ctz_extend+0x174>)
 801d1cc:	4835      	ldr	r0, [pc, #212]	@ (801d2a4 <lfs_ctz_extend+0x178>)
 801d1ce:	f00d fa71 	bl	802a6b4 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801d1d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d1d6:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801d1d8:	a907      	add	r1, sp, #28
 801d1da:	4628      	mov	r0, r5
 801d1dc:	f7ff fe64 	bl	801cea8 <lfs_alloc>
        if (err) {
 801d1e0:	2800      	cmp	r0, #0
 801d1e2:	d159      	bne.n	801d298 <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801d1e4:	9907      	ldr	r1, [sp, #28]
 801d1e6:	4628      	mov	r0, r5
 801d1e8:	f7fe fb3c 	bl	801b864 <lfs_bd_erase>
            if (err) {
 801d1ec:	4680      	mov	r8, r0
 801d1ee:	2800      	cmp	r0, #0
 801d1f0:	d0a4      	beq.n	801d13c <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801d1f2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d1f6:	d0e3      	beq.n	801d1c0 <lfs_ctz_extend+0x94>
 801d1f8:	4682      	mov	sl, r0
 801d1fa:	e008      	b.n	801d20e <lfs_ctz_extend+0xe2>
                        return err;
 801d1fc:	469a      	mov	sl, r3
 801d1fe:	e006      	b.n	801d20e <lfs_ctz_extend+0xe2>
                *block = nblock;
 801d200:	46c2      	mov	sl, r8
 801d202:	9b07      	ldr	r3, [sp, #28]
 801d204:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d206:	6013      	str	r3, [r2, #0]
                *off = noff;
 801d208:	9b08      	ldr	r3, [sp, #32]
 801d20a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d20c:	6013      	str	r3, [r2, #0]
}
 801d20e:	4650      	mov	r0, sl
 801d210:	b00b      	add	sp, #44	@ 0x2c
 801d212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801d216:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801d218:	fa90 f9a0 	rbit	r9, r0
 801d21c:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801d220:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801d224:	9b05      	ldr	r3, [sp, #20]
 801d226:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801d228:	2400      	movs	r4, #0
 801d22a:	46ab      	mov	fp, r5
 801d22c:	e006      	b.n	801d23c <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801d22e:	465d      	mov	r5, fp
 801d230:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d234:	d0c4      	beq.n	801d1c0 <lfs_ctz_extend+0x94>
                    return err;
 801d236:	4682      	mov	sl, r0
 801d238:	e7e9      	b.n	801d20e <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801d23a:	3401      	adds	r4, #1
 801d23c:	4554      	cmp	r4, sl
 801d23e:	d221      	bcs.n	801d284 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801d240:	00a5      	lsls	r5, r4, #2
 801d242:	2304      	movs	r3, #4
 801d244:	9303      	str	r3, [sp, #12]
 801d246:	ab09      	add	r3, sp, #36	@ 0x24
 801d248:	9302      	str	r3, [sp, #8]
 801d24a:	9501      	str	r5, [sp, #4]
 801d24c:	9b07      	ldr	r3, [sp, #28]
 801d24e:	9300      	str	r3, [sp, #0]
 801d250:	2301      	movs	r3, #1
 801d252:	4632      	mov	r2, r6
 801d254:	4639      	mov	r1, r7
 801d256:	4658      	mov	r0, fp
 801d258:	f7ff f87a 	bl	801c350 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801d25c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801d25e:	2800      	cmp	r0, #0
 801d260:	d1e5      	bne.n	801d22e <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801d262:	454c      	cmp	r4, r9
 801d264:	d0e9      	beq.n	801d23a <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801d266:	2304      	movs	r3, #4
 801d268:	9303      	str	r3, [sp, #12]
 801d26a:	a909      	add	r1, sp, #36	@ 0x24
 801d26c:	9102      	str	r1, [sp, #8]
 801d26e:	9501      	str	r5, [sp, #4]
 801d270:	9200      	str	r2, [sp, #0]
 801d272:	4632      	mov	r2, r6
 801d274:	2100      	movs	r1, #0
 801d276:	4658      	mov	r0, fp
 801d278:	f7fe fb6e 	bl	801b958 <lfs_bd_read>
                    if (err) {
 801d27c:	2800      	cmp	r0, #0
 801d27e:	d0dc      	beq.n	801d23a <lfs_ctz_extend+0x10e>
                        return err;
 801d280:	4682      	mov	sl, r0
 801d282:	e7c4      	b.n	801d20e <lfs_ctz_extend+0xe2>
            *block = nblock;
 801d284:	46d1      	mov	r9, sl
 801d286:	46c2      	mov	sl, r8
 801d288:	9b07      	ldr	r3, [sp, #28]
 801d28a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d28c:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801d28e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801d292:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d294:	6019      	str	r1, [r3, #0]
            return 0;
 801d296:	e7ba      	b.n	801d20e <lfs_ctz_extend+0xe2>
 801d298:	4682      	mov	sl, r0
 801d29a:	e7b8      	b.n	801d20e <lfs_ctz_extend+0xe2>
 801d29c:	08037490 	.word	0x08037490
 801d2a0:	080399a8 	.word	0x080399a8
 801d2a4:	08039bc0 	.word	0x08039bc0

0801d2a8 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801d2a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d2ac:	b087      	sub	sp, #28
 801d2ae:	4605      	mov	r5, r0
 801d2b0:	460c      	mov	r4, r1
 801d2b2:	4617      	mov	r7, r2
 801d2b4:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801d2b6:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801d2b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d2bc:	d008      	beq.n	801d2d0 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801d2be:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801d2c0:	444b      	add	r3, r9
 801d2c2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801d2c4:	4293      	cmp	r3, r2
 801d2c6:	bf38      	it	cc
 801d2c8:	4613      	movcc	r3, r2
 801d2ca:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801d2cc:	429a      	cmp	r2, r3
 801d2ce:	d32d      	bcc.n	801d32c <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801d2d0:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801d2d2:	f1b8 0f00 	cmp.w	r8, #0
 801d2d6:	f000 8094 	beq.w	801d402 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801d2da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d2dc:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801d2e0:	d004      	beq.n	801d2ec <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801d2e2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801d2e4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801d2e6:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801d2e8:	4288      	cmp	r0, r1
 801d2ea:	d150      	bne.n	801d38e <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801d2ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d2f0:	d144      	bne.n	801d37c <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801d2f2:	b90a      	cbnz	r2, 801d2f8 <lfs_file_flushedwrite+0x50>
 801d2f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d2f6:	bb1b      	cbnz	r3, 801d340 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801d2f8:	4628      	mov	r0, r5
 801d2fa:	f7fe f9e3 	bl	801b6c4 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801d2fe:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801d302:	9302      	str	r3, [sp, #8]
 801d304:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801d308:	9301      	str	r3, [sp, #4]
 801d30a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d30c:	9300      	str	r3, [sp, #0]
 801d30e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d310:	462a      	mov	r2, r5
 801d312:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801d316:	4628      	mov	r0, r5
 801d318:	f7ff ff08 	bl	801d12c <lfs_ctz_extend>
                if (err) {
 801d31c:	4601      	mov	r1, r0
 801d31e:	2800      	cmp	r0, #0
 801d320:	d031      	beq.n	801d386 <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801d322:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d324:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d328:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801d32a:	e059      	b.n	801d3e0 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801d32c:	f7ff feec 	bl	801d108 <lfs_file_outline>
        if (err) {
 801d330:	4601      	mov	r1, r0
 801d332:	2800      	cmp	r0, #0
 801d334:	d0cc      	beq.n	801d2d0 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801d336:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d338:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d33c:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801d33e:	e04f      	b.n	801d3e0 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801d340:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801d344:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801d346:	2100      	movs	r1, #0
 801d348:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801d34a:	a805      	add	r0, sp, #20
 801d34c:	9003      	str	r0, [sp, #12]
 801d34e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801d352:	9002      	str	r0, [sp, #8]
 801d354:	3b01      	subs	r3, #1
 801d356:	9301      	str	r3, [sp, #4]
 801d358:	9200      	str	r2, [sp, #0]
 801d35a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d35c:	4632      	mov	r2, r6
 801d35e:	4628      	mov	r0, r5
 801d360:	f7ff f8ad 	bl	801c4be <lfs_ctz_find>
                    if (err) {
 801d364:	4601      	mov	r1, r0
 801d366:	b920      	cbnz	r0, 801d372 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801d368:	4631      	mov	r1, r6
 801d36a:	4628      	mov	r0, r5
 801d36c:	f7fe faca 	bl	801b904 <lfs_cache_zero>
 801d370:	e7c2      	b.n	801d2f8 <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801d372:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d374:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d378:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801d37a:	e031      	b.n	801d3e0 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801d37c:	f06f 0301 	mvn.w	r3, #1
 801d380:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801d382:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d384:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801d386:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d38c:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801d38e:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d390:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801d392:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d394:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801d396:	4546      	cmp	r6, r8
 801d398:	bf28      	it	cs
 801d39a:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801d39c:	9603      	str	r6, [sp, #12]
 801d39e:	9702      	str	r7, [sp, #8]
 801d3a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d3a2:	9301      	str	r3, [sp, #4]
 801d3a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d3a6:	9300      	str	r3, [sp, #0]
 801d3a8:	2301      	movs	r3, #1
 801d3aa:	462a      	mov	r2, r5
 801d3ac:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801d3b0:	4628      	mov	r0, r5
 801d3b2:	f7fe ffcd 	bl	801c350 <lfs_bd_prog>
            if (err) {
 801d3b6:	4601      	mov	r1, r0
 801d3b8:	b1b0      	cbz	r0, 801d3e8 <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801d3ba:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d3be:	d10b      	bne.n	801d3d8 <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801d3c0:	4621      	mov	r1, r4
 801d3c2:	4628      	mov	r0, r5
 801d3c4:	f7ff fe0e 	bl	801cfe4 <lfs_file_relocate>
            if (err) {
 801d3c8:	4601      	mov	r1, r0
 801d3ca:	2800      	cmp	r0, #0
 801d3cc:	d0e6      	beq.n	801d39c <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801d3ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d3d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d3d4:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801d3d6:	e003      	b.n	801d3e0 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801d3d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d3da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d3de:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801d3e0:	4608      	mov	r0, r1
 801d3e2:	b007      	add	sp, #28
 801d3e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801d3e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d3ea:	4433      	add	r3, r6
 801d3ec:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801d3ee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d3f0:	4433      	add	r3, r6
 801d3f2:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801d3f4:	4437      	add	r7, r6
        nsize -= diff;
 801d3f6:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801d3fa:	4628      	mov	r0, r5
 801d3fc:	f7fe f962 	bl	801b6c4 <lfs_alloc_ckpoint>
 801d400:	e767      	b.n	801d2d2 <lfs_file_flushedwrite+0x2a>
    return size;
 801d402:	4649      	mov	r1, r9
 801d404:	e7ec      	b.n	801d3e0 <lfs_file_flushedwrite+0x138>
	...

0801d408 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801d408:	b570      	push	{r4, r5, r6, lr}
 801d40a:	b098      	sub	sp, #96	@ 0x60
 801d40c:	4605      	mov	r5, r0
 801d40e:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801d410:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801d412:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801d416:	d008      	beq.n	801d42a <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801d418:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d41c:	d102      	bne.n	801d424 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801d41e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d422:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801d424:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801d428:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801d42a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d42c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801d430:	d068      	beq.n	801d504 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801d432:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801d434:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d438:	d151      	bne.n	801d4de <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801d43a:	2254      	movs	r2, #84	@ 0x54
 801d43c:	2100      	movs	r1, #0
 801d43e:	a803      	add	r0, sp, #12
 801d440:	f00f fe56 	bl	802d0f0 <memset>
                .ctz.head = file->ctz.head,
 801d444:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801d446:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801d448:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801d44a:	930e      	str	r3, [sp, #56]	@ 0x38
 801d44c:	2301      	movs	r3, #1
 801d44e:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801d450:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801d452:	9310      	str	r3, [sp, #64]	@ 0x40
 801d454:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801d458:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801d45c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801d460:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d464:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801d466:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801d468:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801d46a:	429a      	cmp	r2, r3
 801d46c:	d21a      	bcs.n	801d4a4 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801d46e:	2301      	movs	r3, #1
 801d470:	f10d 020b 	add.w	r2, sp, #11
 801d474:	a903      	add	r1, sp, #12
 801d476:	4628      	mov	r0, r5
 801d478:	f7ff f86a 	bl	801c550 <lfs_file_flushedread>
                if (res < 0) {
 801d47c:	1e03      	subs	r3, r0, #0
 801d47e:	db42      	blt.n	801d506 <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801d480:	2301      	movs	r3, #1
 801d482:	f10d 020b 	add.w	r2, sp, #11
 801d486:	4621      	mov	r1, r4
 801d488:	4628      	mov	r0, r5
 801d48a:	f7ff ff0d 	bl	801d2a8 <lfs_file_flushedwrite>
                if (res < 0) {
 801d48e:	1e03      	subs	r3, r0, #0
 801d490:	db39      	blt.n	801d506 <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801d492:	682b      	ldr	r3, [r5, #0]
 801d494:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d498:	d0e5      	beq.n	801d466 <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801d49a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d49e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d4a0:	602b      	str	r3, [r5, #0]
}
 801d4a2:	e7e0      	b.n	801d466 <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801d4a4:	2301      	movs	r3, #1
 801d4a6:	462a      	mov	r2, r5
 801d4a8:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801d4ac:	4628      	mov	r0, r5
 801d4ae:	f7fe fef5 	bl	801c29c <lfs_bd_flush>
                if (err) {
 801d4b2:	4603      	mov	r3, r0
 801d4b4:	b1c0      	cbz	r0, 801d4e8 <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801d4b6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d4ba:	d124      	bne.n	801d506 <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801d4bc:	4b13      	ldr	r3, [pc, #76]	@ (801d50c <lfs_file_flush+0x104>)
 801d4be:	9300      	str	r3, [sp, #0]
 801d4c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d4c2:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801d4c6:	4912      	ldr	r1, [pc, #72]	@ (801d510 <lfs_file_flush+0x108>)
 801d4c8:	4812      	ldr	r0, [pc, #72]	@ (801d514 <lfs_file_flush+0x10c>)
 801d4ca:	f00d f8f3 	bl	802a6b4 <printf>
                err = lfs_file_relocate(lfs, file);
 801d4ce:	4621      	mov	r1, r4
 801d4d0:	4628      	mov	r0, r5
 801d4d2:	f7ff fd87 	bl	801cfe4 <lfs_file_relocate>
                if (err) {
 801d4d6:	4603      	mov	r3, r0
 801d4d8:	2800      	cmp	r0, #0
 801d4da:	d0e3      	beq.n	801d4a4 <lfs_file_flush+0x9c>
 801d4dc:	e013      	b.n	801d506 <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801d4de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801d4e0:	42b3      	cmp	r3, r6
 801d4e2:	bf38      	it	cc
 801d4e4:	4633      	movcc	r3, r6
 801d4e6:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801d4e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d4ea:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801d4ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d4ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801d4f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d4f2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801d4f6:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801d4f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d4fc:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801d4fe:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801d500:	2300      	movs	r3, #0
 801d502:	e000      	b.n	801d506 <lfs_file_flush+0xfe>
 801d504:	2300      	movs	r3, #0
}
 801d506:	4618      	mov	r0, r3
 801d508:	b018      	add	sp, #96	@ 0x60
 801d50a:	bd70      	pop	{r4, r5, r6, pc}
 801d50c:	08037490 	.word	0x08037490
 801d510:	080399a8 	.word	0x080399a8
 801d514:	08039bc0 	.word	0x08039bc0

0801d518 <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d51a:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801d51c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801d51e:	f013 0f01 	tst.w	r3, #1
 801d522:	d00f      	beq.n	801d544 <lfs_file_read_+0x2c>
 801d524:	4605      	mov	r5, r0
 801d526:	460c      	mov	r4, r1
 801d528:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801d52a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801d52e:	d002      	beq.n	801d536 <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801d530:	f7ff ff6a 	bl	801d408 <lfs_file_flush>
        if (err) {
 801d534:	b928      	cbnz	r0, 801d542 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801d536:	463b      	mov	r3, r7
 801d538:	4632      	mov	r2, r6
 801d53a:	4621      	mov	r1, r4
 801d53c:	4628      	mov	r0, r5
 801d53e:	f7ff f807 	bl	801c550 <lfs_file_flushedread>
}
 801d542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801d544:	4b03      	ldr	r3, [pc, #12]	@ (801d554 <lfs_file_read_+0x3c>)
 801d546:	4a04      	ldr	r2, [pc, #16]	@ (801d558 <lfs_file_read_+0x40>)
 801d548:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801d54c:	4803      	ldr	r0, [pc, #12]	@ (801d55c <lfs_file_read_+0x44>)
 801d54e:	f00d f87d 	bl	802a64c <__assert_func>
 801d552:	bf00      	nop
 801d554:	08039be4 	.word	0x08039be4
 801d558:	0803a61c 	.word	0x0803a61c
 801d55c:	080399a8 	.word	0x080399a8

0801d560 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801d560:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d562:	b083      	sub	sp, #12
 801d564:	4606      	mov	r6, r0
 801d566:	460d      	mov	r5, r1
 801d568:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801d56a:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801d56c:	b123      	cbz	r3, 801d578 <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801d56e:	2b01      	cmp	r3, #1
 801d570:	d021      	beq.n	801d5b6 <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801d572:	2b02      	cmp	r3, #2
 801d574:	d023      	beq.n	801d5be <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801d576:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801d578:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801d57a:	42a3      	cmp	r3, r4
 801d57c:	d339      	bcc.n	801d5f2 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801d57e:	42bc      	cmp	r4, r7
 801d580:	d023      	beq.n	801d5ca <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801d582:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801d584:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801d588:	d10c      	bne.n	801d5a4 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801d58a:	9701      	str	r7, [sp, #4]
 801d58c:	a901      	add	r1, sp, #4
 801d58e:	4630      	mov	r0, r6
 801d590:	f7fe f9c4 	bl	801b91c <lfs_ctz_index>
 801d594:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801d596:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801d598:	4669      	mov	r1, sp
 801d59a:	4630      	mov	r0, r6
 801d59c:	f7fe f9be 	bl	801b91c <lfs_ctz_index>
        if (oindex == nindex
 801d5a0:	4287      	cmp	r7, r0
 801d5a2:	d014      	beq.n	801d5ce <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801d5a4:	4629      	mov	r1, r5
 801d5a6:	4630      	mov	r0, r6
 801d5a8:	f7ff ff2e 	bl	801d408 <lfs_file_flush>
    if (err) {
 801d5ac:	b908      	cbnz	r0, 801d5b2 <lfs_file_seek_+0x52>
    file->pos = npos;
 801d5ae:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801d5b0:	4620      	mov	r0, r4
}
 801d5b2:	b003      	add	sp, #12
 801d5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801d5b6:	42e7      	cmn	r7, r4
 801d5b8:	d415      	bmi.n	801d5e6 <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801d5ba:	443c      	add	r4, r7
 801d5bc:	e7dc      	b.n	801d578 <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801d5be:	f7fe f90e 	bl	801b7de <lfs_file_size_>
        if (res < 0) {
 801d5c2:	1900      	adds	r0, r0, r4
 801d5c4:	d412      	bmi.n	801d5ec <lfs_file_seek_+0x8c>
            npos = res;
 801d5c6:	4604      	mov	r4, r0
 801d5c8:	e7d6      	b.n	801d578 <lfs_file_seek_+0x18>
        return npos;
 801d5ca:	4620      	mov	r0, r4
 801d5cc:	e7f1      	b.n	801d5b2 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801d5ce:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801d5d0:	9a00      	ldr	r2, [sp, #0]
 801d5d2:	4293      	cmp	r3, r2
 801d5d4:	d8e6      	bhi.n	801d5a4 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801d5d6:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801d5d8:	440b      	add	r3, r1
 801d5da:	429a      	cmp	r2, r3
 801d5dc:	d2e2      	bcs.n	801d5a4 <lfs_file_seek_+0x44>
            file->pos = npos;
 801d5de:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801d5e0:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801d5e2:	4620      	mov	r0, r4
 801d5e4:	e7e5      	b.n	801d5b2 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801d5e6:	f06f 0015 	mvn.w	r0, #21
 801d5ea:	e7e2      	b.n	801d5b2 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801d5ec:	f06f 0015 	mvn.w	r0, #21
 801d5f0:	e7df      	b.n	801d5b2 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801d5f2:	f06f 0015 	mvn.w	r0, #21
 801d5f6:	e7dc      	b.n	801d5b2 <lfs_file_seek_+0x52>

0801d5f8 <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801d5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5fc:	b082      	sub	sp, #8
 801d5fe:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801d600:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801d602:	f013 0f02 	tst.w	r3, #2
 801d606:	d02a      	beq.n	801d65e <lfs_file_write_+0x66>
 801d608:	4605      	mov	r5, r0
 801d60a:	460c      	mov	r4, r1
 801d60c:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801d60e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801d612:	d12b      	bne.n	801d66c <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801d614:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d616:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801d61a:	d004      	beq.n	801d626 <lfs_file_write_+0x2e>
 801d61c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d61e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801d620:	4291      	cmp	r1, r2
 801d622:	d200      	bcs.n	801d626 <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801d624:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801d626:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801d628:	19f1      	adds	r1, r6, r7
 801d62a:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801d62c:	4291      	cmp	r1, r2
 801d62e:	d831      	bhi.n	801d694 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801d630:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801d634:	d11f      	bne.n	801d676 <lfs_file_write_+0x7e>
 801d636:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801d638:	429e      	cmp	r6, r3
 801d63a:	d91c      	bls.n	801d676 <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801d63c:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801d63e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d640:	428e      	cmp	r6, r1
 801d642:	d918      	bls.n	801d676 <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801d644:	2300      	movs	r3, #0
 801d646:	f88d 3007 	strb.w	r3, [sp, #7]
 801d64a:	2301      	movs	r3, #1
 801d64c:	f10d 0207 	add.w	r2, sp, #7
 801d650:	4621      	mov	r1, r4
 801d652:	4628      	mov	r0, r5
 801d654:	f7ff fe28 	bl	801d2a8 <lfs_file_flushedwrite>
            if (res < 0) {
 801d658:	2800      	cmp	r0, #0
 801d65a:	daf0      	bge.n	801d63e <lfs_file_write_+0x46>
 801d65c:	e017      	b.n	801d68e <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801d65e:	4b0f      	ldr	r3, [pc, #60]	@ (801d69c <lfs_file_write_+0xa4>)
 801d660:	4a0f      	ldr	r2, [pc, #60]	@ (801d6a0 <lfs_file_write_+0xa8>)
 801d662:	f640 6126 	movw	r1, #3622	@ 0xe26
 801d666:	480f      	ldr	r0, [pc, #60]	@ (801d6a4 <lfs_file_write_+0xac>)
 801d668:	f00c fff0 	bl	802a64c <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801d66c:	f7ff fecc 	bl	801d408 <lfs_file_flush>
        if (err) {
 801d670:	2800      	cmp	r0, #0
 801d672:	d0cf      	beq.n	801d614 <lfs_file_write_+0x1c>
 801d674:	e00b      	b.n	801d68e <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801d676:	463b      	mov	r3, r7
 801d678:	4642      	mov	r2, r8
 801d67a:	4621      	mov	r1, r4
 801d67c:	4628      	mov	r0, r5
 801d67e:	f7ff fe13 	bl	801d2a8 <lfs_file_flushedwrite>
    if (nsize < 0) {
 801d682:	2800      	cmp	r0, #0
 801d684:	db03      	blt.n	801d68e <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801d686:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d688:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801d68c:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801d68e:	b002      	add	sp, #8
 801d690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801d694:	f06f 001a 	mvn.w	r0, #26
 801d698:	e7f9      	b.n	801d68e <lfs_file_write_+0x96>
 801d69a:	bf00      	nop
 801d69c:	08039c14 	.word	0x08039c14
 801d6a0:	0803a5fc 	.word	0x0803a5fc
 801d6a4:	080399a8 	.word	0x080399a8

0801d6a8 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801d6a8:	b500      	push	{lr}
 801d6aa:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801d6ac:	2300      	movs	r3, #0
 801d6ae:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801d6b0:	aa01      	add	r2, sp, #4
 801d6b2:	4904      	ldr	r1, [pc, #16]	@ (801d6c4 <lfs_fs_size_+0x1c>)
 801d6b4:	f7ff faf0 	bl	801cc98 <lfs_fs_traverse_>
    if (err) {
 801d6b8:	b900      	cbnz	r0, 801d6bc <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801d6ba:	9801      	ldr	r0, [sp, #4]
}
 801d6bc:	b003      	add	sp, #12
 801d6be:	f85d fb04 	ldr.w	pc, [sp], #4
 801d6c2:	bf00      	nop
 801d6c4:	0801b859 	.word	0x0801b859

0801d6c8 <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801d6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6cc:	b082      	sub	sp, #8
 801d6ce:	4680      	mov	r8, r0
 801d6d0:	460e      	mov	r6, r1
 801d6d2:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801d6d4:	2300      	movs	r3, #0
 801d6d6:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801d6d8:	2501      	movs	r5, #1
 801d6da:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801d6dc:	4b27      	ldr	r3, [pc, #156]	@ (801d77c <lfs_fs_pred+0xb4>)
 801d6de:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d6e2:	ab02      	add	r3, sp, #8
 801d6e4:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801d6e8:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d6ea:	69a7      	ldr	r7, [r4, #24]
 801d6ec:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801d6f0:	d035      	beq.n	801d75e <lfs_fs_pred+0x96>
 801d6f2:	69e3      	ldr	r3, [r4, #28]
 801d6f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d6f8:	d02f      	beq.n	801d75a <lfs_fs_pred+0x92>
 801d6fa:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 801d6fc:	bb8b      	cbnz	r3, 801d762 <lfs_fs_pred+0x9a>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801d6fe:	f104 0a18 	add.w	sl, r4, #24
 801d702:	4669      	mov	r1, sp
 801d704:	4650      	mov	r0, sl
 801d706:	f7fd ff61 	bl	801b5cc <lfs_pair_issync>
 801d70a:	b9a8      	cbnz	r0, 801d738 <lfs_fs_pred+0x70>
        if (tortoise_i == tortoise_period) {
 801d70c:	454d      	cmp	r5, r9
 801d70e:	d01d      	beq.n	801d74c <lfs_fs_pred+0x84>
        tortoise_i += 1;
 801d710:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d712:	6833      	ldr	r3, [r6, #0]
 801d714:	42bb      	cmp	r3, r7
 801d716:	d027      	beq.n	801d768 <lfs_fs_pred+0xa0>
 801d718:	69e1      	ldr	r1, [r4, #28]
 801d71a:	6872      	ldr	r2, [r6, #4]
 801d71c:	4291      	cmp	r1, r2
 801d71e:	d027      	beq.n	801d770 <lfs_fs_pred+0xa8>
 801d720:	42ba      	cmp	r2, r7
 801d722:	d027      	beq.n	801d774 <lfs_fs_pred+0xac>
 801d724:	4299      	cmp	r1, r3
 801d726:	d027      	beq.n	801d778 <lfs_fs_pred+0xb0>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801d728:	4652      	mov	r2, sl
 801d72a:	4621      	mov	r1, r4
 801d72c:	4640      	mov	r0, r8
 801d72e:	f7ff faa5 	bl	801cc7c <lfs_dir_fetch>
        if (err) {
 801d732:	2800      	cmp	r0, #0
 801d734:	d0d9      	beq.n	801d6ea <lfs_fs_pred+0x22>
 801d736:	e018      	b.n	801d76a <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801d738:	4b11      	ldr	r3, [pc, #68]	@ (801d780 <lfs_fs_pred+0xb8>)
 801d73a:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801d73e:	4911      	ldr	r1, [pc, #68]	@ (801d784 <lfs_fs_pred+0xbc>)
 801d740:	4811      	ldr	r0, [pc, #68]	@ (801d788 <lfs_fs_pred+0xc0>)
 801d742:	f00c ffb7 	bl	802a6b4 <printf>
            return LFS_ERR_CORRUPT;
 801d746:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801d74a:	e00e      	b.n	801d76a <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801d74c:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801d74e:	69e3      	ldr	r3, [r4, #28]
 801d750:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 801d752:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801d756:	2500      	movs	r5, #0
 801d758:	e7da      	b.n	801d710 <lfs_fs_pred+0x48>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d75a:	2301      	movs	r3, #1
 801d75c:	e7ce      	b.n	801d6fc <lfs_fs_pred+0x34>
 801d75e:	2301      	movs	r3, #1
 801d760:	e7cc      	b.n	801d6fc <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 801d762:	f06f 0001 	mvn.w	r0, #1
 801d766:	e000      	b.n	801d76a <lfs_fs_pred+0xa2>
            return 0;
 801d768:	2000      	movs	r0, #0
}
 801d76a:	b002      	add	sp, #8
 801d76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 801d770:	2000      	movs	r0, #0
 801d772:	e7fa      	b.n	801d76a <lfs_fs_pred+0xa2>
 801d774:	2000      	movs	r0, #0
 801d776:	e7f8      	b.n	801d76a <lfs_fs_pred+0xa2>
 801d778:	2000      	movs	r0, #0
 801d77a:	e7f6      	b.n	801d76a <lfs_fs_pred+0xa2>
 801d77c:	08036434 	.word	0x08036434
 801d780:	08037490 	.word	0x08037490
 801d784:	080399a8 	.word	0x080399a8
 801d788:	08039b68 	.word	0x08039b68

0801d78c <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801d78c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d78e:	b085      	sub	sp, #20
 801d790:	460c      	mov	r4, r1
 801d792:	4616      	mov	r6, r2
 801d794:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801d796:	9303      	str	r3, [sp, #12]
 801d798:	9202      	str	r2, [sp, #8]
 801d79a:	684b      	ldr	r3, [r1, #4]
 801d79c:	9301      	str	r3, [sp, #4]
 801d79e:	680b      	ldr	r3, [r1, #0]
 801d7a0:	9300      	str	r3, [sp, #0]
 801d7a2:	2300      	movs	r3, #0
 801d7a4:	4602      	mov	r2, r0
 801d7a6:	f100 0110 	add.w	r1, r0, #16
 801d7aa:	f7fe fdd1 	bl	801c350 <lfs_bd_prog>
    if (err) {
 801d7ae:	4607      	mov	r7, r0
 801d7b0:	b110      	cbz	r0, 801d7b8 <lfs_dir_commitprog+0x2c>
}
 801d7b2:	4638      	mov	r0, r7
 801d7b4:	b005      	add	sp, #20
 801d7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801d7b8:	462a      	mov	r2, r5
 801d7ba:	4631      	mov	r1, r6
 801d7bc:	68e0      	ldr	r0, [r4, #12]
 801d7be:	f002 fcdf 	bl	8020180 <lfs_crc>
 801d7c2:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801d7c4:	6863      	ldr	r3, [r4, #4]
 801d7c6:	442b      	add	r3, r5
 801d7c8:	6063      	str	r3, [r4, #4]
    return 0;
 801d7ca:	e7f2      	b.n	801d7b2 <lfs_dir_commitprog+0x26>

0801d7cc <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7d0:	b087      	sub	sp, #28
 801d7d2:	4614      	mov	r4, r2
 801d7d4:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801d7d6:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d7da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d7de:	bf14      	ite	ne
 801d7e0:	4690      	movne	r8, r2
 801d7e2:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801d7e6:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d7ea:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801d7ee:	684b      	ldr	r3, [r1, #4]
 801d7f0:	444b      	add	r3, r9
 801d7f2:	694a      	ldr	r2, [r1, #20]
 801d7f4:	4293      	cmp	r3, r2
 801d7f6:	d841      	bhi.n	801d87c <lfs_dir_commitattr+0xb0>
 801d7f8:	4605      	mov	r5, r0
 801d7fa:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801d7fc:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801d800:	688b      	ldr	r3, [r1, #8]
 801d802:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801d806:	ba1b      	rev	r3, r3
 801d808:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801d80a:	2304      	movs	r3, #4
 801d80c:	aa05      	add	r2, sp, #20
 801d80e:	f7ff ffbd 	bl	801d78c <lfs_dir_commitprog>
    if (err) {
 801d812:	4682      	mov	sl, r0
 801d814:	bb60      	cbnz	r0, 801d870 <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801d816:	2c00      	cmp	r4, #0
 801d818:	da21      	bge.n	801d85e <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801d81a:	2400      	movs	r4, #0
 801d81c:	4544      	cmp	r4, r8
 801d81e:	d225      	bcs.n	801d86c <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801d820:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801d824:	6839      	ldr	r1, [r7, #0]
 801d826:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801d828:	2001      	movs	r0, #1
 801d82a:	9003      	str	r0, [sp, #12]
 801d82c:	f10d 0013 	add.w	r0, sp, #19
 801d830:	9002      	str	r0, [sp, #8]
 801d832:	4422      	add	r2, r4
 801d834:	9201      	str	r2, [sp, #4]
 801d836:	9100      	str	r1, [sp, #0]
 801d838:	3b04      	subs	r3, #4
 801d83a:	462a      	mov	r2, r5
 801d83c:	2100      	movs	r1, #0
 801d83e:	4628      	mov	r0, r5
 801d840:	f7fe f88a 	bl	801b958 <lfs_bd_read>
            if (err) {
 801d844:	4603      	mov	r3, r0
 801d846:	b9b8      	cbnz	r0, 801d878 <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801d848:	2301      	movs	r3, #1
 801d84a:	f10d 0213 	add.w	r2, sp, #19
 801d84e:	4631      	mov	r1, r6
 801d850:	4628      	mov	r0, r5
 801d852:	f7ff ff9b 	bl	801d78c <lfs_dir_commitprog>
            if (err) {
 801d856:	4603      	mov	r3, r0
 801d858:	b970      	cbnz	r0, 801d878 <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801d85a:	3401      	adds	r4, #1
 801d85c:	e7de      	b.n	801d81c <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801d85e:	4643      	mov	r3, r8
 801d860:	463a      	mov	r2, r7
 801d862:	4631      	mov	r1, r6
 801d864:	4628      	mov	r0, r5
 801d866:	f7ff ff91 	bl	801d78c <lfs_dir_commitprog>
        if (err) {
 801d86a:	b950      	cbnz	r0, 801d882 <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801d86c:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801d870:	4650      	mov	r0, sl
 801d872:	b007      	add	sp, #28
 801d874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801d878:	469a      	mov	sl, r3
 801d87a:	e7f9      	b.n	801d870 <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801d87c:	f06f 0a1b 	mvn.w	sl, #27
 801d880:	e7f6      	b.n	801d870 <lfs_dir_commitattr+0xa4>
            return err;
 801d882:	4682      	mov	sl, r0
 801d884:	e7f4      	b.n	801d870 <lfs_dir_commitattr+0xa4>

0801d886 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801d886:	b508      	push	{r3, lr}
 801d888:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801d88a:	460a      	mov	r2, r1
 801d88c:	6841      	ldr	r1, [r0, #4]
 801d88e:	6800      	ldr	r0, [r0, #0]
 801d890:	f7ff ff9c 	bl	801d7cc <lfs_dir_commitattr>
}
 801d894:	bd08      	pop	{r3, pc}
	...

0801d898 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801d898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d89c:	b08b      	sub	sp, #44	@ 0x2c
 801d89e:	4607      	mov	r7, r0
 801d8a0:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801d8a2:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801d8a4:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801d8a6:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801d8a8:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801d8aa:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801d8ac:	428b      	cmp	r3, r1
 801d8ae:	bf94      	ite	ls
 801d8b0:	eb02 0803 	addls.w	r8, r2, r3
 801d8b4:	eb02 0801 	addhi.w	r8, r2, r1
 801d8b8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801d8bc:	fbb8 f3f2 	udiv	r3, r8, r2
 801d8c0:	fb02 8313 	mls	r3, r2, r3, r8
 801d8c4:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801d8c8:	2300      	movs	r3, #0
 801d8ca:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801d8cc:	469b      	mov	fp, r3
    while (commit->off < end) {
 801d8ce:	e03c      	b.n	801d94a <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801d8d0:	2201      	movs	r2, #1
 801d8d2:	9203      	str	r2, [sp, #12]
 801d8d4:	f10d 021b 	add.w	r2, sp, #27
 801d8d8:	9202      	str	r2, [sp, #8]
 801d8da:	9401      	str	r4, [sp, #4]
 801d8dc:	6832      	ldr	r2, [r6, #0]
 801d8de:	9200      	str	r2, [sp, #0]
 801d8e0:	463a      	mov	r2, r7
 801d8e2:	2100      	movs	r1, #0
 801d8e4:	4638      	mov	r0, r7
 801d8e6:	f7fe f837 	bl	801b958 <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801d8ea:	4603      	mov	r3, r0
 801d8ec:	b118      	cbz	r0, 801d8f6 <lfs_dir_commitcrc+0x5e>
 801d8ee:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d8f2:	f040 80c0 	bne.w	801da76 <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801d8f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d8f8:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801d8fa:	9307      	str	r3, [sp, #28]
 801d8fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d900:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801d902:	aa08      	add	r2, sp, #32
 801d904:	9203      	str	r2, [sp, #12]
 801d906:	9302      	str	r3, [sp, #8]
 801d908:	9401      	str	r4, [sp, #4]
 801d90a:	6832      	ldr	r2, [r6, #0]
 801d90c:	9200      	str	r2, [sp, #0]
 801d90e:	463a      	mov	r2, r7
 801d910:	2100      	movs	r1, #0
 801d912:	4638      	mov	r0, r7
 801d914:	f7fe fea0 	bl	801c658 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801d918:	4603      	mov	r3, r0
 801d91a:	b118      	cbz	r0, 801d924 <lfs_dir_commitcrc+0x8c>
 801d91c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d920:	f040 80a9 	bne.w	801da76 <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801d924:	ab07      	add	r3, sp, #28
 801d926:	4a59      	ldr	r2, [pc, #356]	@ (801da8c <lfs_dir_commitcrc+0x1f4>)
 801d928:	4631      	mov	r1, r6
 801d92a:	4638      	mov	r0, r7
 801d92c:	f7ff ff4e 	bl	801d7cc <lfs_dir_commitattr>
                if (err) {
 801d930:	4603      	mov	r3, r0
 801d932:	b348      	cbz	r0, 801d988 <lfs_dir_commitcrc+0xf0>
 801d934:	e09f      	b.n	801da76 <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801d936:	2300      	movs	r3, #0
 801d938:	463a      	mov	r2, r7
 801d93a:	4651      	mov	r1, sl
 801d93c:	4638      	mov	r0, r7
 801d93e:	f7fe fd81 	bl	801c444 <lfs_bd_sync>
            if (err) {
 801d942:	4603      	mov	r3, r0
 801d944:	2800      	cmp	r0, #0
 801d946:	f040 8096 	bne.w	801da76 <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801d94a:	6874      	ldr	r4, [r6, #4]
 801d94c:	4544      	cmp	r4, r8
 801d94e:	d268      	bcs.n	801da22 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801d950:	eba8 0304 	sub.w	r3, r8, r4
 801d954:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801d956:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801d95a:	4293      	cmp	r3, r2
 801d95c:	bf94      	ite	ls
 801d95e:	18e4      	addls	r4, r4, r3
 801d960:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801d962:	3404      	adds	r4, #4
        if (noff < end) {
 801d964:	4544      	cmp	r4, r8
 801d966:	d204      	bcs.n	801d972 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801d968:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801d96c:	429c      	cmp	r4, r3
 801d96e:	bf28      	it	cs
 801d970:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801d972:	23ff      	movs	r3, #255	@ 0xff
 801d974:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801d978:	4544      	cmp	r4, r8
 801d97a:	d305      	bcc.n	801d988 <lfs_dir_commitcrc+0xf0>
 801d97c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d97e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d980:	6a1b      	ldr	r3, [r3, #32]
 801d982:	1ad2      	subs	r2, r2, r3
 801d984:	42a2      	cmp	r2, r4
 801d986:	d2a3      	bcs.n	801d8d0 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801d988:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801d98c:	43d2      	mvns	r2, r2
 801d98e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801d992:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801d996:	6873      	ldr	r3, [r6, #4]
 801d998:	1ae5      	subs	r5, r4, r3
 801d99a:	3d04      	subs	r5, #4
 801d99c:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801d9a0:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801d9a4:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801d9a8:	68b3      	ldr	r3, [r6, #8]
 801d9aa:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801d9ac:	ba1b      	rev	r3, r3
 801d9ae:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801d9b0:	f10d 091c 	add.w	r9, sp, #28
 801d9b4:	2204      	movs	r2, #4
 801d9b6:	4649      	mov	r1, r9
 801d9b8:	68f0      	ldr	r0, [r6, #12]
 801d9ba:	f002 fbe1 	bl	8020180 <lfs_crc>
 801d9be:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801d9c0:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801d9c2:	f107 0a10 	add.w	sl, r7, #16
 801d9c6:	2308      	movs	r3, #8
 801d9c8:	9303      	str	r3, [sp, #12]
 801d9ca:	f8cd 9008 	str.w	r9, [sp, #8]
 801d9ce:	6873      	ldr	r3, [r6, #4]
 801d9d0:	9301      	str	r3, [sp, #4]
 801d9d2:	6833      	ldr	r3, [r6, #0]
 801d9d4:	9300      	str	r3, [sp, #0]
 801d9d6:	2300      	movs	r3, #0
 801d9d8:	463a      	mov	r2, r7
 801d9da:	4651      	mov	r1, sl
 801d9dc:	4638      	mov	r0, r7
 801d9de:	f7fe fcb7 	bl	801c350 <lfs_bd_prog>
        if (err) {
 801d9e2:	4603      	mov	r3, r0
 801d9e4:	2800      	cmp	r0, #0
 801d9e6:	d146      	bne.n	801da76 <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801d9e8:	f1bb 0f00 	cmp.w	fp, #0
 801d9ec:	d104      	bne.n	801d9f8 <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801d9ee:	6873      	ldr	r3, [r6, #4]
 801d9f0:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801d9f4:	68f3      	ldr	r3, [r6, #12]
 801d9f6:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801d9f8:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801d9fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801d9fe:	43db      	mvns	r3, r3
 801da00:	061b      	lsls	r3, r3, #24
 801da02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801da06:	406b      	eors	r3, r5
 801da08:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801da0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801da0e:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801da10:	4544      	cmp	r4, r8
 801da12:	d290      	bcs.n	801d936 <lfs_dir_commitcrc+0x9e>
 801da14:	697b      	ldr	r3, [r7, #20]
 801da16:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801da18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801da1a:	4413      	add	r3, r2
 801da1c:	42a3      	cmp	r3, r4
 801da1e:	d894      	bhi.n	801d94a <lfs_dir_commitcrc+0xb2>
 801da20:	e789      	b.n	801d936 <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801da22:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801da24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801da28:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801da2a:	aa09      	add	r2, sp, #36	@ 0x24
 801da2c:	9203      	str	r2, [sp, #12]
 801da2e:	ebab 0203 	sub.w	r2, fp, r3
 801da32:	9202      	str	r2, [sp, #8]
 801da34:	9301      	str	r3, [sp, #4]
 801da36:	6833      	ldr	r3, [r6, #0]
 801da38:	9300      	str	r3, [sp, #0]
 801da3a:	f10b 0304 	add.w	r3, fp, #4
 801da3e:	463a      	mov	r2, r7
 801da40:	2100      	movs	r1, #0
 801da42:	4638      	mov	r0, r7
 801da44:	f7fe fe08 	bl	801c658 <lfs_bd_crc>
    if (err) {
 801da48:	4603      	mov	r3, r0
 801da4a:	b9a0      	cbnz	r0, 801da76 <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801da4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da4e:	9a05      	ldr	r2, [sp, #20]
 801da50:	4293      	cmp	r3, r2
 801da52:	d114      	bne.n	801da7e <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801da54:	ab09      	add	r3, sp, #36	@ 0x24
 801da56:	9303      	str	r3, [sp, #12]
 801da58:	2304      	movs	r3, #4
 801da5a:	9302      	str	r3, [sp, #8]
 801da5c:	f8cd b004 	str.w	fp, [sp, #4]
 801da60:	6832      	ldr	r2, [r6, #0]
 801da62:	9200      	str	r2, [sp, #0]
 801da64:	463a      	mov	r2, r7
 801da66:	2100      	movs	r1, #0
 801da68:	4638      	mov	r0, r7
 801da6a:	f7fe fdf5 	bl	801c658 <lfs_bd_crc>
    if (err) {
 801da6e:	4603      	mov	r3, r0
 801da70:	b908      	cbnz	r0, 801da76 <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801da72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da74:	b932      	cbnz	r2, 801da84 <lfs_dir_commitcrc+0x1ec>
}
 801da76:	4618      	mov	r0, r3
 801da78:	b00b      	add	sp, #44	@ 0x2c
 801da7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801da7e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801da82:	e7f8      	b.n	801da76 <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801da84:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801da88:	e7f5      	b.n	801da76 <lfs_dir_commitcrc+0x1de>
 801da8a:	bf00      	nop
 801da8c:	5ffffc08 	.word	0x5ffffc08

0801da90 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da94:	b09b      	sub	sp, #108	@ 0x6c
 801da96:	4605      	mov	r5, r0
 801da98:	460c      	mov	r4, r1
 801da9a:	4616      	mov	r6, r2
 801da9c:	461f      	mov	r7, r3
 801da9e:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801daa2:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801daa6:	f7fd fe7f 	bl	801b7a8 <lfs_dir_needsrelocation>
    dir->rev += 1;
 801daaa:	68a3      	ldr	r3, [r4, #8]
 801daac:	3301      	adds	r3, #1
 801daae:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801dab0:	4681      	mov	r9, r0
 801dab2:	2800      	cmp	r0, #0
 801dab4:	d034      	beq.n	801db20 <lfs_dir_compact+0x90>
 801dab6:	2300      	movs	r3, #0
 801dab8:	9314      	str	r3, [sp, #80]	@ 0x50
 801daba:	2301      	movs	r3, #1
 801dabc:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dabe:	6823      	ldr	r3, [r4, #0]
 801dac0:	b373      	cbz	r3, 801db20 <lfs_dir_compact+0x90>
 801dac2:	6862      	ldr	r2, [r4, #4]
 801dac4:	2a01      	cmp	r2, #1
 801dac6:	d02b      	beq.n	801db20 <lfs_dir_compact+0x90>
 801dac8:	2b01      	cmp	r3, #1
 801daca:	d029      	beq.n	801db20 <lfs_dir_compact+0x90>
 801dacc:	b342      	cbz	r2, 801db20 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801dace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dad2:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801dad4:	f1b9 0f00 	cmp.w	r9, #0
 801dad8:	f000 810d 	beq.w	801dcf6 <lfs_dir_compact+0x266>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801dadc:	2300      	movs	r3, #0
 801dade:	9318      	str	r3, [sp, #96]	@ 0x60
 801dae0:	2301      	movs	r3, #1
 801dae2:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dae4:	6823      	ldr	r3, [r4, #0]
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	f000 810f 	beq.w	801dd0a <lfs_dir_compact+0x27a>
 801daec:	6862      	ldr	r2, [r4, #4]
 801daee:	2a01      	cmp	r2, #1
 801daf0:	f000 810b 	beq.w	801dd0a <lfs_dir_compact+0x27a>
 801daf4:	2b01      	cmp	r3, #1
 801daf6:	f000 8108 	beq.w	801dd0a <lfs_dir_compact+0x27a>
 801dafa:	2a00      	cmp	r2, #0
 801dafc:	f000 8105 	beq.w	801dd0a <lfs_dir_compact+0x27a>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801db00:	1d21      	adds	r1, r4, #4
 801db02:	4628      	mov	r0, r5
 801db04:	f7ff f9d0 	bl	801cea8 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801db08:	4603      	mov	r3, r0
 801db0a:	b330      	cbz	r0, 801db5a <lfs_dir_compact+0xca>
 801db0c:	f110 0f1c 	cmn.w	r0, #28
 801db10:	d11f      	bne.n	801db52 <lfs_dir_compact+0xc2>
 801db12:	f1b9 0f00 	cmp.w	r9, #0
 801db16:	d01c      	beq.n	801db52 <lfs_dir_compact+0xc2>
        relocated = true;
 801db18:	46cb      	mov	fp, r9
        tired = false;
 801db1a:	f04f 0900 	mov.w	r9, #0
 801db1e:	e001      	b.n	801db24 <lfs_dir_compact+0x94>
    bool relocated = false;
 801db20:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801db24:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801db26:	930e      	str	r3, [sp, #56]	@ 0x38
 801db28:	2300      	movs	r3, #0
 801db2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801db2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801db30:	9210      	str	r2, [sp, #64]	@ 0x40
 801db32:	9211      	str	r2, [sp, #68]	@ 0x44
 801db34:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801db36:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801db38:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801db3a:	b19b      	cbz	r3, 801db64 <lfs_dir_compact+0xd4>
 801db3c:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801db3e:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801db40:	6861      	ldr	r1, [r4, #4]
 801db42:	4628      	mov	r0, r5
 801db44:	f7fd fe8e 	bl	801b864 <lfs_bd_erase>
            if (err) {
 801db48:	4603      	mov	r3, r0
 801db4a:	b170      	cbz	r0, 801db6a <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801db4c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801db50:	d0bd      	beq.n	801dace <lfs_dir_compact+0x3e>
}
 801db52:	4618      	mov	r0, r3
 801db54:	b01b      	add	sp, #108	@ 0x6c
 801db56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801db5a:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801db5e:	f04f 0b01 	mov.w	fp, #1
 801db62:	e7df      	b.n	801db24 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801db64:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801db66:	3b08      	subs	r3, #8
 801db68:	e7e9      	b.n	801db3e <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801db6a:	2304      	movs	r3, #4
 801db6c:	f104 0208 	add.w	r2, r4, #8
 801db70:	a90e      	add	r1, sp, #56	@ 0x38
 801db72:	4628      	mov	r0, r5
 801db74:	f7ff fe0a 	bl	801d78c <lfs_dir_commitprog>
            if (err) {
 801db78:	4603      	mov	r3, r0
 801db7a:	b118      	cbz	r0, 801db84 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801db7c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801db80:	d1e7      	bne.n	801db52 <lfs_dir_compact+0xc2>
 801db82:	e7a4      	b.n	801dace <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801db84:	9516      	str	r5, [sp, #88]	@ 0x58
 801db86:	ab0e      	add	r3, sp, #56	@ 0x38
 801db88:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801db8a:	ab16      	add	r3, sp, #88	@ 0x58
 801db8c:	9308      	str	r3, [sp, #32]
 801db8e:	4b65      	ldr	r3, [pc, #404]	@ (801dd24 <lfs_dir_compact+0x294>)
 801db90:	9307      	str	r3, [sp, #28]
 801db92:	f1c8 0300 	rsb	r3, r8, #0
 801db96:	b21b      	sxth	r3, r3
 801db98:	9306      	str	r3, [sp, #24]
 801db9a:	f8cd a014 	str.w	sl, [sp, #20]
 801db9e:	f8cd 8010 	str.w	r8, [sp, #16]
 801dba2:	2200      	movs	r2, #0
 801dba4:	9203      	str	r2, [sp, #12]
 801dba6:	4b60      	ldr	r3, [pc, #384]	@ (801dd28 <lfs_dir_compact+0x298>)
 801dba8:	9302      	str	r3, [sp, #8]
 801dbaa:	9701      	str	r7, [sp, #4]
 801dbac:	9600      	str	r6, [sp, #0]
 801dbae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dbb2:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801dbb4:	4628      	mov	r0, r5
 801dbb6:	f7fe f911 	bl	801bddc <lfs_dir_traverse>
            if (err) {
 801dbba:	4603      	mov	r3, r0
 801dbbc:	b118      	cbz	r0, 801dbc6 <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801dbbe:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dbc2:	d1c6      	bne.n	801db52 <lfs_dir_compact+0xc2>
 801dbc4:	e783      	b.n	801dace <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801dbc6:	69a2      	ldr	r2, [r4, #24]
 801dbc8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801dbcc:	d02c      	beq.n	801dc28 <lfs_dir_compact+0x198>
 801dbce:	69e2      	ldr	r2, [r4, #28]
 801dbd0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801dbd4:	d026      	beq.n	801dc24 <lfs_dir_compact+0x194>
            if (!lfs_pair_isnull(dir->tail)) {
 801dbd6:	f013 0f01 	tst.w	r3, #1
 801dbda:	d027      	beq.n	801dc2c <lfs_dir_compact+0x19c>
            lfs_gstate_t delta = {0};
 801dbdc:	2300      	movs	r3, #0
 801dbde:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dbe0:	930c      	str	r3, [sp, #48]	@ 0x30
 801dbe2:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801dbe4:	f1bb 0f00 	cmp.w	fp, #0
 801dbe8:	d033      	beq.n	801dc52 <lfs_dir_compact+0x1c2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801dbea:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801dbee:	a80b      	add	r0, sp, #44	@ 0x2c
 801dbf0:	f7fd fd10 	bl	801b614 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801dbf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dbf6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801dbfa:	f023 0303 	bic.w	r3, r3, #3
 801dbfe:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801dc00:	aa0b      	add	r2, sp, #44	@ 0x2c
 801dc02:	4621      	mov	r1, r4
 801dc04:	4628      	mov	r0, r5
 801dc06:	f7fe f859 	bl	801bcbc <lfs_dir_getgstate>
            if (err) {
 801dc0a:	4603      	mov	r3, r0
 801dc0c:	2800      	cmp	r0, #0
 801dc0e:	d1a0      	bne.n	801db52 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 801dc10:	2b02      	cmp	r3, #2
 801dc12:	dc29      	bgt.n	801dc68 <lfs_dir_compact+0x1d8>
        if (((uint32_t*)a)[i] != 0) {
 801dc14:	aa1a      	add	r2, sp, #104	@ 0x68
 801dc16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801dc1a:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801dc1e:	bb92      	cbnz	r2, 801dc86 <lfs_dir_compact+0x1f6>
    for (int i = 0; i < 3; i++) {
 801dc20:	3301      	adds	r3, #1
 801dc22:	e7f5      	b.n	801dc10 <lfs_dir_compact+0x180>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801dc24:	2301      	movs	r3, #1
 801dc26:	e7d6      	b.n	801dbd6 <lfs_dir_compact+0x146>
 801dc28:	2301      	movs	r3, #1
 801dc2a:	e7d4      	b.n	801dbd6 <lfs_dir_compact+0x146>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801dc2c:	7de2      	ldrb	r2, [r4, #23]
 801dc2e:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801dc32:	f104 0318 	add.w	r3, r4, #24
 801dc36:	493d      	ldr	r1, [pc, #244]	@ (801dd2c <lfs_dir_compact+0x29c>)
 801dc38:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801dc3c:	a90e      	add	r1, sp, #56	@ 0x38
 801dc3e:	4628      	mov	r0, r5
 801dc40:	f7ff fdc4 	bl	801d7cc <lfs_dir_commitattr>
                if (err) {
 801dc44:	4603      	mov	r3, r0
 801dc46:	2800      	cmp	r0, #0
 801dc48:	d0c8      	beq.n	801dbdc <lfs_dir_compact+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 801dc4a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dc4e:	d180      	bne.n	801db52 <lfs_dir_compact+0xc2>
 801dc50:	e73d      	b.n	801dace <lfs_dir_compact+0x3e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801dc52:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801dc56:	a80b      	add	r0, sp, #44	@ 0x2c
 801dc58:	f7fd fcdc 	bl	801b614 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801dc5c:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801dc60:	a80b      	add	r0, sp, #44	@ 0x2c
 801dc62:	f7fd fcd7 	bl	801b614 <lfs_gstate_xor>
 801dc66:	e7c0      	b.n	801dbea <lfs_dir_compact+0x15a>
    return true;
 801dc68:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801dc6a:	b973      	cbnz	r3, 801dc8a <lfs_dir_compact+0x1fa>
                err = lfs_dir_commitattr(lfs, &commit,
 801dc6c:	ab0b      	add	r3, sp, #44	@ 0x2c
 801dc6e:	4a30      	ldr	r2, [pc, #192]	@ (801dd30 <lfs_dir_compact+0x2a0>)
 801dc70:	a90e      	add	r1, sp, #56	@ 0x38
 801dc72:	4628      	mov	r0, r5
 801dc74:	f7ff fdaa 	bl	801d7cc <lfs_dir_commitattr>
                if (err) {
 801dc78:	4603      	mov	r3, r0
 801dc7a:	b130      	cbz	r0, 801dc8a <lfs_dir_compact+0x1fa>
                    if (err == LFS_ERR_CORRUPT) {
 801dc7c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dc80:	f47f af67 	bne.w	801db52 <lfs_dir_compact+0xc2>
 801dc84:	e723      	b.n	801dace <lfs_dir_compact+0x3e>
            return false;
 801dc86:	2300      	movs	r3, #0
 801dc88:	e7ef      	b.n	801dc6a <lfs_dir_compact+0x1da>
            err = lfs_dir_commitcrc(lfs, &commit);
 801dc8a:	a90e      	add	r1, sp, #56	@ 0x38
 801dc8c:	4628      	mov	r0, r5
 801dc8e:	f7ff fe03 	bl	801d898 <lfs_dir_commitcrc>
            if (err) {
 801dc92:	4603      	mov	r3, r0
 801dc94:	b120      	cbz	r0, 801dca0 <lfs_dir_compact+0x210>
                if (err == LFS_ERR_CORRUPT) {
 801dc96:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dc9a:	f47f af5a 	bne.w	801db52 <lfs_dir_compact+0xc2>
 801dc9e:	e716      	b.n	801dace <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801dca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dca2:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801dca4:	6a12      	ldr	r2, [r2, #32]
 801dca6:	fbb3 f1f2 	udiv	r1, r3, r2
 801dcaa:	fb02 3311 	mls	r3, r2, r1, r3
 801dcae:	b9db      	cbnz	r3, 801dce8 <lfs_dir_compact+0x258>
    lfs_block_t t = pair[0];
 801dcb0:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801dcb2:	6862      	ldr	r2, [r4, #4]
 801dcb4:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801dcb6:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801dcb8:	ebaa 0808 	sub.w	r8, sl, r8
 801dcbc:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801dcc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dcc2:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801dcc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dcc6:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801dcc8:	2200      	movs	r2, #0
 801dcca:	64aa      	str	r2, [r5, #72]	@ 0x48
 801dccc:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801dcce:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801dcd0:	f1bb 0f00 	cmp.w	fp, #0
 801dcd4:	d106      	bne.n	801dce4 <lfs_dir_compact+0x254>
                lfs->gdisk = lfs->gstate;
 801dcd6:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801dcda:	3530      	adds	r5, #48	@ 0x30
 801dcdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dce0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801dce4:	465b      	mov	r3, fp
 801dce6:	e734      	b.n	801db52 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801dce8:	4b12      	ldr	r3, [pc, #72]	@ (801dd34 <lfs_dir_compact+0x2a4>)
 801dcea:	4a13      	ldr	r2, [pc, #76]	@ (801dd38 <lfs_dir_compact+0x2a8>)
 801dcec:	f640 0106 	movw	r1, #2054	@ 0x806
 801dcf0:	4812      	ldr	r0, [pc, #72]	@ (801dd3c <lfs_dir_compact+0x2ac>)
 801dcf2:	f00c fcab 	bl	802a64c <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801dcf6:	4b12      	ldr	r3, [pc, #72]	@ (801dd40 <lfs_dir_compact+0x2b0>)
 801dcf8:	9300      	str	r3, [sp, #0]
 801dcfa:	6863      	ldr	r3, [r4, #4]
 801dcfc:	f640 0218 	movw	r2, #2072	@ 0x818
 801dd00:	490e      	ldr	r1, [pc, #56]	@ (801dd3c <lfs_dir_compact+0x2ac>)
 801dd02:	4810      	ldr	r0, [pc, #64]	@ (801dd44 <lfs_dir_compact+0x2b4>)
 801dd04:	f00c fcd6 	bl	802a6b4 <printf>
 801dd08:	e6e8      	b.n	801dadc <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801dd0a:	4b0d      	ldr	r3, [pc, #52]	@ (801dd40 <lfs_dir_compact+0x2b0>)
 801dd0c:	9300      	str	r3, [sp, #0]
 801dd0e:	6863      	ldr	r3, [r4, #4]
 801dd10:	f640 021d 	movw	r2, #2077	@ 0x81d
 801dd14:	4909      	ldr	r1, [pc, #36]	@ (801dd3c <lfs_dir_compact+0x2ac>)
 801dd16:	480c      	ldr	r0, [pc, #48]	@ (801dd48 <lfs_dir_compact+0x2b8>)
 801dd18:	f00c fccc 	bl	802a6b4 <printf>
            return LFS_ERR_NOSPC;
 801dd1c:	f06f 031b 	mvn.w	r3, #27
 801dd20:	e717      	b.n	801db52 <lfs_dir_compact+0xc2>
 801dd22:	bf00      	nop
 801dd24:	0801d887 	.word	0x0801d887
 801dd28:	400ffc00 	.word	0x400ffc00
 801dd2c:	000ffc08 	.word	0x000ffc08
 801dd30:	7ffffc0c 	.word	0x7ffffc0c
 801dd34:	08039c44 	.word	0x08039c44
 801dd38:	0803a678 	.word	0x0803a678
 801dd3c:	080399a8 	.word	0x080399a8
 801dd40:	08037490 	.word	0x08037490
 801dd44:	08039bc0 	.word	0x08039bc0
 801dd48:	08039c6c 	.word	0x08039c6c

0801dd4c <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801dd4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dd50:	b08d      	sub	sp, #52	@ 0x34
 801dd52:	4605      	mov	r5, r0
 801dd54:	460c      	mov	r4, r1
 801dd56:	4691      	mov	r9, r2
 801dd58:	461e      	mov	r6, r3
 801dd5a:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801dd5e:	a904      	add	r1, sp, #16
 801dd60:	f7ff f8fa 	bl	801cf58 <lfs_dir_alloc>
    if (err) {
 801dd64:	4607      	mov	r7, r0
 801dd66:	b118      	cbz	r0, 801dd70 <lfs_dir_split+0x24>
}
 801dd68:	4638      	mov	r0, r7
 801dd6a:	b00d      	add	sp, #52	@ 0x34
 801dd6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801dd70:	7de3      	ldrb	r3, [r4, #23]
 801dd72:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801dd76:	69a3      	ldr	r3, [r4, #24]
 801dd78:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801dd7a:	69e3      	ldr	r3, [r4, #28]
 801dd7c:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801dd7e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801dd82:	9302      	str	r3, [sp, #8]
 801dd84:	f8cd 8004 	str.w	r8, [sp, #4]
 801dd88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dd8a:	9300      	str	r3, [sp, #0]
 801dd8c:	4633      	mov	r3, r6
 801dd8e:	464a      	mov	r2, r9
 801dd90:	a904      	add	r1, sp, #16
 801dd92:	4628      	mov	r0, r5
 801dd94:	f7ff fe7c 	bl	801da90 <lfs_dir_compact>
    if (res < 0) {
 801dd98:	2800      	cmp	r0, #0
 801dd9a:	db17      	blt.n	801ddcc <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801dd9c:	9904      	ldr	r1, [sp, #16]
 801dd9e:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801dda0:	9a05      	ldr	r2, [sp, #20]
 801dda2:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801dda4:	2301      	movs	r3, #1
 801dda6:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dda8:	6823      	ldr	r3, [r4, #0]
 801ddaa:	6a28      	ldr	r0, [r5, #32]
 801ddac:	4283      	cmp	r3, r0
 801ddae:	d007      	beq.n	801ddc0 <lfs_dir_split+0x74>
 801ddb0:	6866      	ldr	r6, [r4, #4]
 801ddb2:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801ddb4:	42a6      	cmp	r6, r4
 801ddb6:	d003      	beq.n	801ddc0 <lfs_dir_split+0x74>
 801ddb8:	42a3      	cmp	r3, r4
 801ddba:	d001      	beq.n	801ddc0 <lfs_dir_split+0x74>
 801ddbc:	42b0      	cmp	r0, r6
 801ddbe:	d1d3      	bne.n	801dd68 <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801ddc0:	f1b8 0f00 	cmp.w	r8, #0
 801ddc4:	d1d0      	bne.n	801dd68 <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801ddc6:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801ddc8:	626a      	str	r2, [r5, #36]	@ 0x24
 801ddca:	e7cd      	b.n	801dd68 <lfs_dir_split+0x1c>
        return res;
 801ddcc:	4607      	mov	r7, r0
 801ddce:	e7cb      	b.n	801dd68 <lfs_dir_split+0x1c>

0801ddd0 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddd4:	b091      	sub	sp, #68	@ 0x44
 801ddd6:	4607      	mov	r7, r0
 801ddd8:	4615      	mov	r5, r2
 801ddda:	4699      	mov	r9, r3
 801dddc:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801dde0:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801dde4:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801dde8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ddea:	e04c      	b.n	801de86 <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801ddec:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801ddee:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801ddf0:	4403      	add	r3, r0
 801ddf2:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801ddf4:	fbb3 f1f0 	udiv	r1, r3, r0
 801ddf8:	fb00 3111 	mls	r1, r0, r1, r3
 801ddfc:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801ddfe:	4293      	cmp	r3, r2
 801de00:	bf28      	it	cs
 801de02:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801de04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801de06:	429a      	cmp	r2, r3
 801de08:	d92d      	bls.n	801de66 <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801de0a:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801de0e:	eba6 0804 	sub.w	r8, r6, r4
 801de12:	f1b8 0f01 	cmp.w	r8, #1
 801de16:	d926      	bls.n	801de66 <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801de18:	2200      	movs	r2, #0
 801de1a:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801de1c:	b2a1      	uxth	r1, r4
 801de1e:	ab0d      	add	r3, sp, #52	@ 0x34
 801de20:	9308      	str	r3, [sp, #32]
 801de22:	4b4d      	ldr	r3, [pc, #308]	@ (801df58 <lfs_dir_splittingcompact+0x188>)
 801de24:	9307      	str	r3, [sp, #28]
 801de26:	424b      	negs	r3, r1
 801de28:	b21b      	sxth	r3, r3
 801de2a:	9306      	str	r3, [sp, #24]
 801de2c:	9605      	str	r6, [sp, #20]
 801de2e:	9104      	str	r1, [sp, #16]
 801de30:	9203      	str	r2, [sp, #12]
 801de32:	4b4a      	ldr	r3, [pc, #296]	@ (801df5c <lfs_dir_splittingcompact+0x18c>)
 801de34:	9302      	str	r3, [sp, #8]
 801de36:	f8cd 9004 	str.w	r9, [sp, #4]
 801de3a:	9500      	str	r5, [sp, #0]
 801de3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801de40:	4651      	mov	r1, sl
 801de42:	4638      	mov	r0, r7
 801de44:	f7fd ffca 	bl	801bddc <lfs_dir_traverse>
            if (err) {
 801de48:	4603      	mov	r3, r0
 801de4a:	2800      	cmp	r0, #0
 801de4c:	d15b      	bne.n	801df06 <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801de4e:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801de52:	d8da      	bhi.n	801de0a <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801de54:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801de56:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801de58:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801de5c:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801de5e:	2800      	cmp	r0, #0
 801de60:	d0c4      	beq.n	801ddec <lfs_dir_splittingcompact+0x1c>
 801de62:	0843      	lsrs	r3, r0, #1
 801de64:	e7c3      	b.n	801ddee <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801de66:	455c      	cmp	r4, fp
 801de68:	d022      	beq.n	801deb0 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801de6a:	b2a4      	uxth	r4, r4
 801de6c:	9602      	str	r6, [sp, #8]
 801de6e:	9401      	str	r4, [sp, #4]
 801de70:	f8cd a000 	str.w	sl, [sp]
 801de74:	464b      	mov	r3, r9
 801de76:	462a      	mov	r2, r5
 801de78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801de7a:	4638      	mov	r0, r7
 801de7c:	f7ff ff66 	bl	801dd4c <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801de80:	4603      	mov	r3, r0
 801de82:	b910      	cbnz	r0, 801de8a <lfs_dir_splittingcompact+0xba>
            end = split;
 801de84:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801de86:	465c      	mov	r4, fp
        while (end - split > 1) {
 801de88:	e7c1      	b.n	801de0e <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801de8a:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801de8e:	f110 0f1c 	cmn.w	r0, #28
 801de92:	d138      	bne.n	801df06 <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801de94:	4b32      	ldr	r3, [pc, #200]	@ (801df60 <lfs_dir_splittingcompact+0x190>)
 801de96:	9301      	str	r3, [sp, #4]
 801de98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801de9c:	9300      	str	r3, [sp, #0]
 801de9e:	f8d8 3000 	ldr.w	r3, [r8]
 801dea2:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801dea6:	492f      	ldr	r1, [pc, #188]	@ (801df64 <lfs_dir_splittingcompact+0x194>)
 801dea8:	482f      	ldr	r0, [pc, #188]	@ (801df68 <lfs_dir_splittingcompact+0x198>)
 801deaa:	f00c fc03 	bl	802a6b4 <printf>
            break;
 801deae:	e001      	b.n	801deb4 <lfs_dir_splittingcompact+0xe4>
 801deb0:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801deb4:	4641      	mov	r1, r8
 801deb6:	4638      	mov	r0, r7
 801deb8:	f7fd fc76 	bl	801b7a8 <lfs_dir_needsrelocation>
 801debc:	b1b8      	cbz	r0, 801deee <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801debe:	2300      	movs	r3, #0
 801dec0:	930e      	str	r3, [sp, #56]	@ 0x38
 801dec2:	2301      	movs	r3, #1
 801dec4:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dec6:	f8d8 2000 	ldr.w	r2, [r8]
 801deca:	b132      	cbz	r2, 801deda <lfs_dir_splittingcompact+0x10a>
 801decc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ded0:	2b01      	cmp	r3, #1
 801ded2:	d002      	beq.n	801deda <lfs_dir_splittingcompact+0x10a>
 801ded4:	2a01      	cmp	r2, #1
 801ded6:	d000      	beq.n	801deda <lfs_dir_splittingcompact+0x10a>
 801ded8:	b94b      	cbnz	r3, 801deee <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801deda:	4638      	mov	r0, r7
 801dedc:	f7ff fbe4 	bl	801d6a8 <lfs_fs_size_>
        if (size < 0) {
 801dee0:	1e03      	subs	r3, r0, #0
 801dee2:	db10      	blt.n	801df06 <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801dee4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801dee6:	1ad3      	subs	r3, r2, r3
 801dee8:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801deec:	d80f      	bhi.n	801df0e <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801deee:	9602      	str	r6, [sp, #8]
 801def0:	f8cd b004 	str.w	fp, [sp, #4]
 801def4:	f8cd a000 	str.w	sl, [sp]
 801def8:	464b      	mov	r3, r9
 801defa:	462a      	mov	r2, r5
 801defc:	4641      	mov	r1, r8
 801defe:	4638      	mov	r0, r7
 801df00:	f7ff fdc6 	bl	801da90 <lfs_dir_compact>
 801df04:	4603      	mov	r3, r0
}
 801df06:	4618      	mov	r0, r3
 801df08:	b011      	add	sp, #68	@ 0x44
 801df0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801df0e:	4b14      	ldr	r3, [pc, #80]	@ (801df60 <lfs_dir_splittingcompact+0x190>)
 801df10:	9300      	str	r3, [sp, #0]
 801df12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801df16:	f640 0286 	movw	r2, #2182	@ 0x886
 801df1a:	4912      	ldr	r1, [pc, #72]	@ (801df64 <lfs_dir_splittingcompact+0x194>)
 801df1c:	4813      	ldr	r0, [pc, #76]	@ (801df6c <lfs_dir_splittingcompact+0x19c>)
 801df1e:	f00c fbc9 	bl	802a6b4 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801df22:	9602      	str	r6, [sp, #8]
 801df24:	f8cd b004 	str.w	fp, [sp, #4]
 801df28:	f8cd a000 	str.w	sl, [sp]
 801df2c:	464b      	mov	r3, r9
 801df2e:	462a      	mov	r2, r5
 801df30:	4641      	mov	r1, r8
 801df32:	4638      	mov	r0, r7
 801df34:	f7ff ff0a 	bl	801dd4c <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801df38:	4603      	mov	r3, r0
 801df3a:	b150      	cbz	r0, 801df52 <lfs_dir_splittingcompact+0x182>
 801df3c:	f110 0f1c 	cmn.w	r0, #28
 801df40:	d1e1      	bne.n	801df06 <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801df42:	4b07      	ldr	r3, [pc, #28]	@ (801df60 <lfs_dir_splittingcompact+0x190>)
 801df44:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801df48:	4906      	ldr	r1, [pc, #24]	@ (801df64 <lfs_dir_splittingcompact+0x194>)
 801df4a:	4809      	ldr	r0, [pc, #36]	@ (801df70 <lfs_dir_splittingcompact+0x1a0>)
 801df4c:	f00c fbb2 	bl	802a6b4 <printf>
 801df50:	e7cd      	b.n	801deee <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801df52:	2601      	movs	r6, #1
 801df54:	e7cb      	b.n	801deee <lfs_dir_splittingcompact+0x11e>
 801df56:	bf00      	nop
 801df58:	0801b78d 	.word	0x0801b78d
 801df5c:	400ffc00 	.word	0x400ffc00
 801df60:	08037490 	.word	0x08037490
 801df64:	080399a8 	.word	0x080399a8
 801df68:	08039ca4 	.word	0x08039ca4
 801df6c:	08039cd4 	.word	0x08039cd4
 801df70:	08039d04 	.word	0x08039d04

0801df74 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801df74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df78:	b09b      	sub	sp, #108	@ 0x6c
 801df7a:	4607      	mov	r7, r0
 801df7c:	460e      	mov	r6, r1
 801df7e:	4691      	mov	r9, r2
 801df80:	461d      	mov	r5, r3
 801df82:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801df86:	2300      	movs	r3, #0
    bool hasdelete = false;
 801df88:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801df8a:	e003      	b.n	801df94 <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801df8c:	8ab2      	ldrh	r2, [r6, #20]
 801df8e:	3201      	adds	r2, #1
 801df90:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801df92:	3301      	adds	r3, #1
 801df94:	4543      	cmp	r3, r8
 801df96:	da2d      	bge.n	801dff4 <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801df98:	00d8      	lsls	r0, r3, #3
 801df9a:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801df9e:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801dfa2:	0d11      	lsrs	r1, r2, #20
 801dfa4:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801dfa8:	f240 4e01 	movw	lr, #1025	@ 0x401
 801dfac:	4572      	cmp	r2, lr
 801dfae:	d0ed      	beq.n	801df8c <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801dfb0:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801dfb4:	4572      	cmp	r2, lr
 801dfb6:	d00f      	beq.n	801dfd8 <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801dfb8:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801dfbc:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801dfc0:	d1e7      	bne.n	801df92 <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801dfc2:	6862      	ldr	r2, [r4, #4]
 801dfc4:	6812      	ldr	r2, [r2, #0]
 801dfc6:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801dfc8:	6862      	ldr	r2, [r4, #4]
 801dfca:	6852      	ldr	r2, [r2, #4]
 801dfcc:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801dfce:	582a      	ldr	r2, [r5, r0]
 801dfd0:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801dfd4:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801dfd6:	e7dc      	b.n	801df92 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801dfd8:	8ab2      	ldrh	r2, [r6, #20]
 801dfda:	b122      	cbz	r2, 801dfe6 <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801dfdc:	3a01      	subs	r2, #1
 801dfde:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801dfe0:	f04f 0c01 	mov.w	ip, #1
 801dfe4:	e7d5      	b.n	801df92 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801dfe6:	4ba0      	ldr	r3, [pc, #640]	@ (801e268 <lfs_dir_relocatingcommit+0x2f4>)
 801dfe8:	4aa0      	ldr	r2, [pc, #640]	@ (801e26c <lfs_dir_relocatingcommit+0x2f8>)
 801dfea:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801dfee:	48a0      	ldr	r0, [pc, #640]	@ (801e270 <lfs_dir_relocatingcommit+0x2fc>)
 801dff0:	f00c fb2c 	bl	802a64c <__assert_func>
    if (hasdelete && dir->count == 0) {
 801dff4:	f1bc 0f00 	cmp.w	ip, #0
 801dff8:	d01b      	beq.n	801e032 <lfs_dir_relocatingcommit+0xbe>
 801dffa:	8ab3      	ldrh	r3, [r6, #20]
 801dffc:	b9cb      	cbnz	r3, 801e032 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801dffe:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e000:	b15b      	cbz	r3, 801e01a <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801e002:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e004:	4631      	mov	r1, r6
 801e006:	4638      	mov	r0, r7
 801e008:	f7ff fb5e 	bl	801d6c8 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801e00c:	4682      	mov	sl, r0
 801e00e:	b158      	cbz	r0, 801e028 <lfs_dir_relocatingcommit+0xb4>
 801e010:	f110 0f02 	cmn.w	r0, #2
 801e014:	f040 8159 	bne.w	801e2ca <lfs_dir_relocatingcommit+0x356>
 801e018:	e00b      	b.n	801e032 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801e01a:	4b96      	ldr	r3, [pc, #600]	@ (801e274 <lfs_dir_relocatingcommit+0x300>)
 801e01c:	4a93      	ldr	r2, [pc, #588]	@ (801e26c <lfs_dir_relocatingcommit+0x2f8>)
 801e01e:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801e022:	4893      	ldr	r0, [pc, #588]	@ (801e270 <lfs_dir_relocatingcommit+0x2fc>)
 801e024:	f00c fb12 	bl	802a64c <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801e028:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e02a:	7ddb      	ldrb	r3, [r3, #23]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	f040 80bf 	bne.w	801e1b0 <lfs_dir_relocatingcommit+0x23c>
    if (dir->erased) {
 801e032:	7db4      	ldrb	r4, [r6, #22]
 801e034:	2c00      	cmp	r4, #0
 801e036:	d02e      	beq.n	801e096 <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801e038:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801e03a:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801e03c:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801e03e:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801e040:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801e042:	9212      	str	r2, [sp, #72]	@ 0x48
 801e044:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e048:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e04a:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801e04c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801e04e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801e050:	2b00      	cmp	r3, #0
 801e052:	d03c      	beq.n	801e0ce <lfs_dir_relocatingcommit+0x15a>
 801e054:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801e056:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801e058:	9718      	str	r7, [sp, #96]	@ 0x60
 801e05a:	ab10      	add	r3, sp, #64	@ 0x40
 801e05c:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801e05e:	ab18      	add	r3, sp, #96	@ 0x60
 801e060:	9308      	str	r3, [sp, #32]
 801e062:	4b85      	ldr	r3, [pc, #532]	@ (801e278 <lfs_dir_relocatingcommit+0x304>)
 801e064:	9307      	str	r3, [sp, #28]
 801e066:	2300      	movs	r3, #0
 801e068:	9306      	str	r3, [sp, #24]
 801e06a:	9305      	str	r3, [sp, #20]
 801e06c:	9304      	str	r3, [sp, #16]
 801e06e:	9303      	str	r3, [sp, #12]
 801e070:	9302      	str	r3, [sp, #8]
 801e072:	f8cd 8004 	str.w	r8, [sp, #4]
 801e076:	9500      	str	r5, [sp, #0]
 801e078:	6933      	ldr	r3, [r6, #16]
 801e07a:	68f2      	ldr	r2, [r6, #12]
 801e07c:	4631      	mov	r1, r6
 801e07e:	4638      	mov	r0, r7
 801e080:	f7fd feac 	bl	801bddc <lfs_dir_traverse>
        if (err) {
 801e084:	4682      	mov	sl, r0
 801e086:	b328      	cbz	r0, 801e0d4 <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801e088:	f110 0f1c 	cmn.w	r0, #28
 801e08c:	d003      	beq.n	801e096 <lfs_dir_relocatingcommit+0x122>
 801e08e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e092:	f040 811a 	bne.w	801e2ca <lfs_dir_relocatingcommit+0x356>
    rcache->block = LFS_BLOCK_NULL;
 801e096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e09a:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801e09c:	8ab3      	ldrh	r3, [r6, #20]
 801e09e:	9302      	str	r3, [sp, #8]
 801e0a0:	2300      	movs	r3, #0
 801e0a2:	9301      	str	r3, [sp, #4]
 801e0a4:	9600      	str	r6, [sp, #0]
 801e0a6:	4643      	mov	r3, r8
 801e0a8:	462a      	mov	r2, r5
 801e0aa:	4631      	mov	r1, r6
 801e0ac:	4638      	mov	r0, r7
 801e0ae:	f7ff fe8f 	bl	801ddd0 <lfs_dir_splittingcompact>
    if (state < 0) {
 801e0b2:	1e01      	subs	r1, r0, #0
 801e0b4:	f2c0 8106 	blt.w	801e2c4 <lfs_dir_relocatingcommit+0x350>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801e0b8:	f8d9 b000 	ldr.w	fp, [r9]
 801e0bc:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801e0c0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801e0c4:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801e0c6:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801e0c8:	4692      	mov	sl, r2
 801e0ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e0cc:	e0db      	b.n	801e286 <lfs_dir_relocatingcommit+0x312>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801e0ce:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801e0d0:	3b08      	subs	r3, #8
 801e0d2:	e7c0      	b.n	801e056 <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801e0d4:	2300      	movs	r3, #0
 801e0d6:	930d      	str	r3, [sp, #52]	@ 0x34
 801e0d8:	930e      	str	r3, [sp, #56]	@ 0x38
 801e0da:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801e0dc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e0e0:	a80d      	add	r0, sp, #52	@ 0x34
 801e0e2:	f7fd fa97 	bl	801b614 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801e0e6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801e0ea:	a80d      	add	r0, sp, #52	@ 0x34
 801e0ec:	f7fd fa92 	bl	801b614 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801e0f0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801e0f4:	a80d      	add	r0, sp, #52	@ 0x34
 801e0f6:	f7fd fa8d 	bl	801b614 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801e0fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e0fc:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801e100:	f023 0303 	bic.w	r3, r3, #3
 801e104:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801e106:	e001      	b.n	801e10c <lfs_dir_relocatingcommit+0x198>
 801e108:	f10a 0a01 	add.w	sl, sl, #1
 801e10c:	f1ba 0f02 	cmp.w	sl, #2
 801e110:	dc07      	bgt.n	801e122 <lfs_dir_relocatingcommit+0x1ae>
        if (((uint32_t*)a)[i] != 0) {
 801e112:	ab1a      	add	r3, sp, #104	@ 0x68
 801e114:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801e118:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	d0f3      	beq.n	801e108 <lfs_dir_relocatingcommit+0x194>
            return false;
 801e120:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801e122:	b9c4      	cbnz	r4, 801e156 <lfs_dir_relocatingcommit+0x1e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801e124:	aa0d      	add	r2, sp, #52	@ 0x34
 801e126:	4631      	mov	r1, r6
 801e128:	4638      	mov	r0, r7
 801e12a:	f7fd fdc7 	bl	801bcbc <lfs_dir_getgstate>
            if (err) {
 801e12e:	4682      	mov	sl, r0
 801e130:	2800      	cmp	r0, #0
 801e132:	f040 80ca 	bne.w	801e2ca <lfs_dir_relocatingcommit+0x356>
            err = lfs_dir_commitattr(lfs, &commit,
 801e136:	ab0d      	add	r3, sp, #52	@ 0x34
 801e138:	4a50      	ldr	r2, [pc, #320]	@ (801e27c <lfs_dir_relocatingcommit+0x308>)
 801e13a:	a910      	add	r1, sp, #64	@ 0x40
 801e13c:	4638      	mov	r0, r7
 801e13e:	f7ff fb45 	bl	801d7cc <lfs_dir_commitattr>
            if (err) {
 801e142:	4682      	mov	sl, r0
 801e144:	b138      	cbz	r0, 801e156 <lfs_dir_relocatingcommit+0x1e2>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801e146:	f110 0f1c 	cmn.w	r0, #28
 801e14a:	d0a4      	beq.n	801e096 <lfs_dir_relocatingcommit+0x122>
 801e14c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e150:	f040 80bb 	bne.w	801e2ca <lfs_dir_relocatingcommit+0x356>
 801e154:	e79f      	b.n	801e096 <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801e156:	a910      	add	r1, sp, #64	@ 0x40
 801e158:	4638      	mov	r0, r7
 801e15a:	f7ff fb9d 	bl	801d898 <lfs_dir_commitcrc>
        if (err) {
 801e15e:	4682      	mov	sl, r0
 801e160:	b138      	cbz	r0, 801e172 <lfs_dir_relocatingcommit+0x1fe>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801e162:	f110 0f1c 	cmn.w	r0, #28
 801e166:	d096      	beq.n	801e096 <lfs_dir_relocatingcommit+0x122>
 801e168:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e16c:	f040 80ad 	bne.w	801e2ca <lfs_dir_relocatingcommit+0x356>
 801e170:	e791      	b.n	801e096 <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801e172:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e174:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801e176:	6a11      	ldr	r1, [r2, #32]
 801e178:	fbb3 f2f1 	udiv	r2, r3, r1
 801e17c:	fb01 3212 	mls	r2, r1, r2, r3
 801e180:	b97a      	cbnz	r2, 801e1a2 <lfs_dir_relocatingcommit+0x22e>
        dir->off = commit.off;
 801e182:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801e184:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e186:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801e188:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801e18c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801e190:	ca07      	ldmia	r2, {r0, r1, r2}
 801e192:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801e196:	2200      	movs	r2, #0
 801e198:	64ba      	str	r2, [r7, #72]	@ 0x48
 801e19a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801e19c:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801e19e:	4651      	mov	r1, sl
 801e1a0:	e78a      	b.n	801e0b8 <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801e1a2:	4b37      	ldr	r3, [pc, #220]	@ (801e280 <lfs_dir_relocatingcommit+0x30c>)
 801e1a4:	4a31      	ldr	r2, [pc, #196]	@ (801e26c <lfs_dir_relocatingcommit+0x2f8>)
 801e1a6:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801e1aa:	4831      	ldr	r0, [pc, #196]	@ (801e270 <lfs_dir_relocatingcommit+0x2fc>)
 801e1ac:	f00c fa4e 	bl	802a64c <__assert_func>
            state = LFS_OK_DROPPED;
 801e1b0:	2102      	movs	r1, #2
 801e1b2:	e781      	b.n	801e0b8 <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801e1b4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801e1b8:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e1bc:	4584      	cmp	ip, r0
 801e1be:	d10e      	bne.n	801e1de <lfs_dir_relocatingcommit+0x26a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801e1c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e1c4:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801e1c6:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801e1c8:	3301      	adds	r3, #1
 801e1ca:	4543      	cmp	r3, r8
 801e1cc:	da34      	bge.n	801e238 <lfs_dir_relocatingcommit+0x2c4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e1ce:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801e1d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e1d6:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801e1da:	4282      	cmp	r2, r0
 801e1dc:	d0ea      	beq.n	801e1b4 <lfs_dir_relocatingcommit+0x240>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e1de:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801e1e2:	4282      	cmp	r2, r0
 801e1e4:	d011      	beq.n	801e20a <lfs_dir_relocatingcommit+0x296>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801e1e6:	f240 4001 	movw	r0, #1025	@ 0x401
 801e1ea:	4282      	cmp	r2, r0
 801e1ec:	d1ec      	bne.n	801e1c8 <lfs_dir_relocatingcommit+0x254>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801e1ee:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801e1f0:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801e1f4:	428a      	cmp	r2, r1
 801e1f6:	d3e7      	bcc.n	801e1c8 <lfs_dir_relocatingcommit+0x254>
                        d->id += 1;
 801e1f8:	3201      	adds	r2, #1
 801e1fa:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801e1fc:	79a2      	ldrb	r2, [r4, #6]
 801e1fe:	2a02      	cmp	r2, #2
 801e200:	d1e2      	bne.n	801e1c8 <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos += 1;
 801e202:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801e204:	3201      	adds	r2, #1
 801e206:	62a2      	str	r2, [r4, #40]	@ 0x28
 801e208:	e7de      	b.n	801e1c8 <lfs_dir_relocatingcommit+0x254>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801e20a:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801e20c:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e210:	4560      	cmp	r0, ip
 801e212:	d9e8      	bls.n	801e1e6 <lfs_dir_relocatingcommit+0x272>
                        d->id -= 1;
 801e214:	3801      	subs	r0, #1
 801e216:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801e218:	79a2      	ldrb	r2, [r4, #6]
 801e21a:	2a02      	cmp	r2, #2
 801e21c:	d1d4      	bne.n	801e1c8 <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos -= 1;
 801e21e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801e220:	3a01      	subs	r2, #1
 801e222:	62a2      	str	r2, [r4, #40]	@ 0x28
 801e224:	e7d0      	b.n	801e1c8 <lfs_dir_relocatingcommit+0x254>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801e226:	f104 0220 	add.w	r2, r4, #32
 801e22a:	f104 0108 	add.w	r1, r4, #8
 801e22e:	4638      	mov	r0, r7
 801e230:	f7fe fd24 	bl	801cc7c <lfs_dir_fetch>
                if (err) {
 801e234:	2800      	cmp	r0, #0
 801e236:	d147      	bne.n	801e2c8 <lfs_dir_relocatingcommit+0x354>
            while (d->id >= d->m.count && d->m.split) {
 801e238:	88a3      	ldrh	r3, [r4, #4]
 801e23a:	8ba1      	ldrh	r1, [r4, #28]
 801e23c:	428b      	cmp	r3, r1
 801e23e:	d321      	bcc.n	801e284 <lfs_dir_relocatingcommit+0x310>
 801e240:	7fe2      	ldrb	r2, [r4, #31]
 801e242:	b1fa      	cbz	r2, 801e284 <lfs_dir_relocatingcommit+0x310>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e244:	6a22      	ldr	r2, [r4, #32]
 801e246:	6a38      	ldr	r0, [r7, #32]
 801e248:	4282      	cmp	r2, r0
 801e24a:	d0ec      	beq.n	801e226 <lfs_dir_relocatingcommit+0x2b2>
 801e24c:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801e250:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801e254:	45e6      	cmp	lr, ip
 801e256:	d0e6      	beq.n	801e226 <lfs_dir_relocatingcommit+0x2b2>
 801e258:	4562      	cmp	r2, ip
 801e25a:	d0e4      	beq.n	801e226 <lfs_dir_relocatingcommit+0x2b2>
 801e25c:	4570      	cmp	r0, lr
 801e25e:	d0e2      	beq.n	801e226 <lfs_dir_relocatingcommit+0x2b2>
                    d->id -= d->m.count;
 801e260:	1a5b      	subs	r3, r3, r1
 801e262:	80a3      	strh	r3, [r4, #4]
 801e264:	e7df      	b.n	801e226 <lfs_dir_relocatingcommit+0x2b2>
 801e266:	bf00      	nop
 801e268:	08039d30 	.word	0x08039d30
 801e26c:	0803a6a8 	.word	0x0803a6a8
 801e270:	080399a8 	.word	0x080399a8
 801e274:	08039d40 	.word	0x08039d40
 801e278:	0801d887 	.word	0x0801d887
 801e27c:	7ffffc0c 	.word	0x7ffffc0c
 801e280:	08039c44 	.word	0x08039c44
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801e284:	6824      	ldr	r4, [r4, #0]
 801e286:	b1d4      	cbz	r4, 801e2be <lfs_dir_relocatingcommit+0x34a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e288:	68a3      	ldr	r3, [r4, #8]
 801e28a:	459b      	cmp	fp, r3
 801e28c:	d006      	beq.n	801e29c <lfs_dir_relocatingcommit+0x328>
 801e28e:	68e2      	ldr	r2, [r4, #12]
 801e290:	4592      	cmp	sl, r2
 801e292:	d003      	beq.n	801e29c <lfs_dir_relocatingcommit+0x328>
 801e294:	459a      	cmp	sl, r3
 801e296:	d001      	beq.n	801e29c <lfs_dir_relocatingcommit+0x328>
 801e298:	4593      	cmp	fp, r2
 801e29a:	d1f3      	bne.n	801e284 <lfs_dir_relocatingcommit+0x310>
            d->m = *dir;
 801e29c:	f104 0c08 	add.w	ip, r4, #8
 801e2a0:	46b6      	mov	lr, r6
 801e2a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e2a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e2aa:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801e2ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801e2b2:	f104 0308 	add.w	r3, r4, #8
 801e2b6:	454b      	cmp	r3, r9
 801e2b8:	d0be      	beq.n	801e238 <lfs_dir_relocatingcommit+0x2c4>
                for (int i = 0; i < attrcount; i++) {
 801e2ba:	2300      	movs	r3, #0
 801e2bc:	e785      	b.n	801e1ca <lfs_dir_relocatingcommit+0x256>
    return state;
 801e2be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e2c0:	468a      	mov	sl, r1
 801e2c2:	e002      	b.n	801e2ca <lfs_dir_relocatingcommit+0x356>
        return state;
 801e2c4:	468a      	mov	sl, r1
 801e2c6:	e000      	b.n	801e2ca <lfs_dir_relocatingcommit+0x356>
 801e2c8:	4682      	mov	sl, r0
}
 801e2ca:	4650      	mov	r0, sl
 801e2cc:	b01b      	add	sp, #108	@ 0x6c
 801e2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2d2:	bf00      	nop

0801e2d4 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801e2d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e2d8:	b0a3      	sub	sp, #140	@ 0x8c
 801e2da:	4605      	mov	r5, r0
 801e2dc:	460e      	mov	r6, r1
 801e2de:	4690      	mov	r8, r2
 801e2e0:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801e2e2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801e2e4:	e003      	b.n	801e2ee <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801e2e6:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801e2e8:	2b01      	cmp	r3, #1
 801e2ea:	d012      	beq.n	801e312 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801e2ec:	6824      	ldr	r4, [r4, #0]
 801e2ee:	b34c      	cbz	r4, 801e344 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801e2f0:	f104 0108 	add.w	r1, r4, #8
 801e2f4:	42b1      	cmp	r1, r6
 801e2f6:	d0f9      	beq.n	801e2ec <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e2f8:	68a1      	ldr	r1, [r4, #8]
 801e2fa:	6833      	ldr	r3, [r6, #0]
 801e2fc:	428b      	cmp	r3, r1
 801e2fe:	d0f2      	beq.n	801e2e6 <lfs_dir_orphaningcommit+0x12>
 801e300:	68e0      	ldr	r0, [r4, #12]
 801e302:	6872      	ldr	r2, [r6, #4]
 801e304:	4282      	cmp	r2, r0
 801e306:	d0ee      	beq.n	801e2e6 <lfs_dir_orphaningcommit+0x12>
 801e308:	428a      	cmp	r2, r1
 801e30a:	d0ec      	beq.n	801e2e6 <lfs_dir_orphaningcommit+0x12>
 801e30c:	4298      	cmp	r0, r3
 801e30e:	d1ed      	bne.n	801e2ec <lfs_dir_orphaningcommit+0x18>
 801e310:	e7e9      	b.n	801e2e6 <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801e312:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e314:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e318:	d0e8      	beq.n	801e2ec <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801e31a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801e31c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801e31e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801e320:	429a      	cmp	r2, r3
 801e322:	d9e3      	bls.n	801e2ec <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801e324:	4621      	mov	r1, r4
 801e326:	4628      	mov	r0, r5
 801e328:	f7fe feee 	bl	801d108 <lfs_file_outline>
            if (err) {
 801e32c:	4607      	mov	r7, r0
 801e32e:	2800      	cmp	r0, #0
 801e330:	f040 81bc 	bne.w	801e6ac <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801e334:	4621      	mov	r1, r4
 801e336:	4628      	mov	r0, r5
 801e338:	f7ff f866 	bl	801d408 <lfs_file_flush>
            if (err) {
 801e33c:	4607      	mov	r7, r0
 801e33e:	2800      	cmp	r0, #0
 801e340:	d0d4      	beq.n	801e2ec <lfs_dir_orphaningcommit+0x18>
 801e342:	e1b3      	b.n	801e6ac <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801e344:	6833      	ldr	r3, [r6, #0]
 801e346:	9316      	str	r3, [sp, #88]	@ 0x58
 801e348:	6873      	ldr	r3, [r6, #4]
 801e34a:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801e34c:	ac0e      	add	r4, sp, #56	@ 0x38
 801e34e:	4637      	mov	r7, r6
 801e350:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e354:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801e358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801e35c:	ab06      	add	r3, sp, #24
 801e35e:	9301      	str	r3, [sp, #4]
 801e360:	f8cd 9000 	str.w	r9, [sp]
 801e364:	4643      	mov	r3, r8
 801e366:	4632      	mov	r2, r6
 801e368:	a90e      	add	r1, sp, #56	@ 0x38
 801e36a:	4628      	mov	r0, r5
 801e36c:	f7ff fe02 	bl	801df74 <lfs_dir_relocatingcommit>
    if (state < 0) {
 801e370:	1e07      	subs	r7, r0, #0
 801e372:	f2c0 819b 	blt.w	801e6ac <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e376:	6833      	ldr	r3, [r6, #0]
 801e378:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e37a:	429a      	cmp	r2, r3
 801e37c:	d007      	beq.n	801e38e <lfs_dir_orphaningcommit+0xba>
 801e37e:	6870      	ldr	r0, [r6, #4]
 801e380:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e382:	4281      	cmp	r1, r0
 801e384:	d003      	beq.n	801e38e <lfs_dir_orphaningcommit+0xba>
 801e386:	4299      	cmp	r1, r3
 801e388:	d001      	beq.n	801e38e <lfs_dir_orphaningcommit+0xba>
 801e38a:	4290      	cmp	r0, r2
 801e38c:	d109      	bne.n	801e3a2 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801e38e:	4634      	mov	r4, r6
 801e390:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801e394:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e39a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801e39e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801e3a2:	2f02      	cmp	r7, #2
 801e3a4:	d001      	beq.n	801e3aa <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801e3a6:	2600      	movs	r6, #0
 801e3a8:	e0b8      	b.n	801e51c <lfs_dir_orphaningcommit+0x248>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801e3aa:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801e3ae:	4631      	mov	r1, r6
 801e3b0:	4628      	mov	r0, r5
 801e3b2:	f7fd fc83 	bl	801bcbc <lfs_dir_getgstate>
        if (err) {
 801e3b6:	4607      	mov	r7, r0
 801e3b8:	2800      	cmp	r0, #0
 801e3ba:	f040 8177 	bne.w	801e6ac <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801e3be:	9b06      	ldr	r3, [sp, #24]
 801e3c0:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801e3c2:	9b07      	ldr	r3, [sp, #28]
 801e3c4:	9317      	str	r3, [sp, #92]	@ 0x5c
        lfs_pair_tole32(dir->tail);
 801e3c6:	f106 0118 	add.w	r1, r6, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801e3ca:	7df2      	ldrb	r2, [r6, #23]
 801e3cc:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e3d0:	4ba2      	ldr	r3, [pc, #648]	@ (801e65c <lfs_dir_orphaningcommit+0x388>)
 801e3d2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e3d6:	9318      	str	r3, [sp, #96]	@ 0x60
 801e3d8:	9119      	str	r1, [sp, #100]	@ 0x64
 801e3da:	2300      	movs	r3, #0
 801e3dc:	9301      	str	r3, [sp, #4]
 801e3de:	2301      	movs	r3, #1
 801e3e0:	9300      	str	r3, [sp, #0]
 801e3e2:	ab18      	add	r3, sp, #96	@ 0x60
 801e3e4:	aa16      	add	r2, sp, #88	@ 0x58
 801e3e6:	a906      	add	r1, sp, #24
 801e3e8:	4628      	mov	r0, r5
 801e3ea:	f7ff fdc3 	bl	801df74 <lfs_dir_relocatingcommit>
        if (state < 0) {
 801e3ee:	1e07      	subs	r7, r0, #0
 801e3f0:	f2c0 815c 	blt.w	801e6ac <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801e3f4:	ac0e      	add	r4, sp, #56	@ 0x38
 801e3f6:	ae06      	add	r6, sp, #24
 801e3f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801e3fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e3fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801e400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801e404:	e7cf      	b.n	801e3a6 <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801e406:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e408:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801e40a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e40c:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801e40e:	799a      	ldrb	r2, [r3, #6]
 801e410:	2a02      	cmp	r2, #2
 801e412:	d00d      	beq.n	801e430 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	b1db      	cbz	r3, 801e450 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e418:	689a      	ldr	r2, [r3, #8]
 801e41a:	4291      	cmp	r1, r2
 801e41c:	d0f3      	beq.n	801e406 <lfs_dir_orphaningcommit+0x132>
 801e41e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801e420:	68dc      	ldr	r4, [r3, #12]
 801e422:	4284      	cmp	r4, r0
 801e424:	d0ef      	beq.n	801e406 <lfs_dir_orphaningcommit+0x132>
 801e426:	428c      	cmp	r4, r1
 801e428:	d0ed      	beq.n	801e406 <lfs_dir_orphaningcommit+0x132>
 801e42a:	4290      	cmp	r0, r2
 801e42c:	d1ef      	bne.n	801e40e <lfs_dir_orphaningcommit+0x13a>
 801e42e:	e7ea      	b.n	801e406 <lfs_dir_orphaningcommit+0x132>
 801e430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e432:	428a      	cmp	r2, r1
 801e434:	d007      	beq.n	801e446 <lfs_dir_orphaningcommit+0x172>
 801e436:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e438:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801e43a:	42a0      	cmp	r0, r4
 801e43c:	d003      	beq.n	801e446 <lfs_dir_orphaningcommit+0x172>
 801e43e:	4288      	cmp	r0, r1
 801e440:	d001      	beq.n	801e446 <lfs_dir_orphaningcommit+0x172>
 801e442:	4294      	cmp	r4, r2
 801e444:	d1e6      	bne.n	801e414 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801e446:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e448:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801e44a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e44c:	631a      	str	r2, [r3, #48]	@ 0x30
 801e44e:	e7e1      	b.n	801e414 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801e450:	aa06      	add	r2, sp, #24
 801e452:	a916      	add	r1, sp, #88	@ 0x58
 801e454:	4628      	mov	r0, r5
 801e456:	f7fe fba5 	bl	801cba4 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801e45a:	1e04      	subs	r4, r0, #0
 801e45c:	f280 8082 	bge.w	801e564 <lfs_dir_orphaningcommit+0x290>
 801e460:	f114 0f02 	cmn.w	r4, #2
 801e464:	f040 8128 	bne.w	801e6b8 <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801e468:	f114 0802 	adds.w	r8, r4, #2
 801e46c:	bf18      	it	ne
 801e46e:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801e472:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801e474:	aa06      	add	r2, sp, #24
 801e476:	a916      	add	r1, sp, #88	@ 0x58
 801e478:	4628      	mov	r0, r5
 801e47a:	f7ff f925 	bl	801d6c8 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801e47e:	4603      	mov	r3, r0
 801e480:	b118      	cbz	r0, 801e48a <lfs_dir_orphaningcommit+0x1b6>
 801e482:	f110 0f02 	cmn.w	r0, #2
 801e486:	f040 8119 	bne.w	801e6bc <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801e48a:	f114 0f02 	cmn.w	r4, #2
 801e48e:	f000 80d6 	beq.w	801e63e <lfs_dir_orphaningcommit+0x36a>
 801e492:	f113 0f02 	cmn.w	r3, #2
 801e496:	f000 80cb 	beq.w	801e630 <lfs_dir_orphaningcommit+0x35c>
    return lfs_tag_size(a->tag);
 801e49a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801e49c:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801e4a0:	2b00      	cmp	r3, #0
 801e4a2:	f040 80d1 	bne.w	801e648 <lfs_dir_orphaningcommit+0x374>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801e4a6:	a906      	add	r1, sp, #24
 801e4a8:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801e4ac:	f7fd f8c4 	bl	801b638 <lfs_gstate_hasmovehere>
 801e4b0:	2800      	cmp	r0, #0
 801e4b2:	f040 80e1 	bne.w	801e678 <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801e4b6:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801e4ba:	9b06      	ldr	r3, [sp, #24]
 801e4bc:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801e4be:	9b07      	ldr	r3, [sp, #28]
 801e4c0:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801e4c2:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e4c6:	429c      	cmp	r4, r3
 801e4c8:	f000 80ec 	beq.w	801e6a4 <lfs_dir_orphaningcommit+0x3d0>
 801e4cc:	02a3      	lsls	r3, r4, #10
 801e4ce:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e4d2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e4d6:	931e      	str	r3, [sp, #120]	@ 0x78
 801e4d8:	2100      	movs	r1, #0
 801e4da:	911f      	str	r1, [sp, #124]	@ 0x7c
 801e4dc:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801e4e0:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e4e4:	4b5d      	ldr	r3, [pc, #372]	@ (801e65c <lfs_dir_orphaningcommit+0x388>)
 801e4e6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e4ea:	9320      	str	r3, [sp, #128]	@ 0x80
 801e4ec:	ab0e      	add	r3, sp, #56	@ 0x38
 801e4ee:	9321      	str	r3, [sp, #132]	@ 0x84
 801e4f0:	9101      	str	r1, [sp, #4]
 801e4f2:	2302      	movs	r3, #2
 801e4f4:	9300      	str	r3, [sp, #0]
 801e4f6:	ab1e      	add	r3, sp, #120	@ 0x78
 801e4f8:	aa16      	add	r2, sp, #88	@ 0x58
 801e4fa:	a906      	add	r1, sp, #24
 801e4fc:	4628      	mov	r0, r5
 801e4fe:	f7ff fd39 	bl	801df74 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801e502:	1e07      	subs	r7, r0, #0
 801e504:	f2c0 80d2 	blt.w	801e6ac <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801e508:	ac0e      	add	r4, sp, #56	@ 0x38
 801e50a:	f10d 0c18 	add.w	ip, sp, #24
 801e50e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e514:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801e518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801e51c:	2f01      	cmp	r7, #1
 801e51e:	f040 80c3 	bne.w	801e6a8 <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801e522:	4b4f      	ldr	r3, [pc, #316]	@ (801e660 <lfs_dir_orphaningcommit+0x38c>)
 801e524:	9303      	str	r3, [sp, #12]
 801e526:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e528:	9302      	str	r3, [sp, #8]
 801e52a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e52c:	9301      	str	r3, [sp, #4]
 801e52e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e530:	9300      	str	r3, [sp, #0]
 801e532:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e534:	f640 128c 	movw	r2, #2444	@ 0x98c
 801e538:	494a      	ldr	r1, [pc, #296]	@ (801e664 <lfs_dir_orphaningcommit+0x390>)
 801e53a:	484b      	ldr	r0, [pc, #300]	@ (801e668 <lfs_dir_orphaningcommit+0x394>)
 801e53c:	f00c f8ba 	bl	802a6b4 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e540:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801e542:	6a2b      	ldr	r3, [r5, #32]
 801e544:	428b      	cmp	r3, r1
 801e546:	d007      	beq.n	801e558 <lfs_dir_orphaningcommit+0x284>
 801e548:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801e54a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801e54c:	4282      	cmp	r2, r0
 801e54e:	d003      	beq.n	801e558 <lfs_dir_orphaningcommit+0x284>
 801e550:	428a      	cmp	r2, r1
 801e552:	d001      	beq.n	801e558 <lfs_dir_orphaningcommit+0x284>
 801e554:	4298      	cmp	r0, r3
 801e556:	d103      	bne.n	801e560 <lfs_dir_orphaningcommit+0x28c>
            lfs->root[0] = ldir.pair[0];
 801e558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e55a:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801e55c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e55e:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801e560:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801e562:	e758      	b.n	801e416 <lfs_dir_orphaningcommit+0x142>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801e564:	f114 0802 	adds.w	r8, r4, #2
 801e568:	bf18      	it	ne
 801e56a:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801e56e:	2101      	movs	r1, #1
 801e570:	4628      	mov	r0, r5
 801e572:	f7fd f997 	bl	801b8a4 <lfs_fs_preporphans>
            if (err) {
 801e576:	4607      	mov	r7, r0
 801e578:	2800      	cmp	r0, #0
 801e57a:	f040 8097 	bne.w	801e6ac <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801e57e:	a906      	add	r1, sp, #24
 801e580:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801e584:	f7fd f858 	bl	801b638 <lfs_gstate_hasmovehere>
 801e588:	2800      	cmp	r0, #0
 801e58a:	d131      	bne.n	801e5f0 <lfs_dir_orphaningcommit+0x31c>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801e58c:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801e58e:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801e592:	9b06      	ldr	r3, [sp, #24]
 801e594:	9304      	str	r3, [sp, #16]
 801e596:	9b07      	ldr	r3, [sp, #28]
 801e598:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801e59a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e59e:	429f      	cmp	r7, r3
 801e5a0:	d044      	beq.n	801e62c <lfs_dir_orphaningcommit+0x358>
 801e5a2:	02bb      	lsls	r3, r7, #10
 801e5a4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e5a8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e5ac:	931a      	str	r3, [sp, #104]	@ 0x68
 801e5ae:	2300      	movs	r3, #0
 801e5b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e5b2:	921c      	str	r2, [sp, #112]	@ 0x70
 801e5b4:	aa0e      	add	r2, sp, #56	@ 0x38
 801e5b6:	921d      	str	r2, [sp, #116]	@ 0x74
 801e5b8:	9301      	str	r3, [sp, #4]
 801e5ba:	2302      	movs	r3, #2
 801e5bc:	9300      	str	r3, [sp, #0]
 801e5be:	ab1a      	add	r3, sp, #104	@ 0x68
 801e5c0:	aa04      	add	r2, sp, #16
 801e5c2:	a906      	add	r1, sp, #24
 801e5c4:	4628      	mov	r0, r5
 801e5c6:	f7ff fcd5 	bl	801df74 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801e5ca:	1e07      	subs	r7, r0, #0
 801e5cc:	db6e      	blt.n	801e6ac <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801e5ce:	2f01      	cmp	r7, #1
 801e5d0:	f47f af50 	bne.w	801e474 <lfs_dir_orphaningcommit+0x1a0>
                lpair[0] = ppair[0];
 801e5d4:	9b04      	ldr	r3, [sp, #16]
 801e5d6:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801e5d8:	9b05      	ldr	r3, [sp, #20]
 801e5da:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801e5dc:	ac0e      	add	r4, sp, #56	@ 0x38
 801e5de:	ae06      	add	r6, sp, #24
 801e5e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801e5e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e5e4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801e5e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801e5ec:	2601      	movs	r6, #1
 801e5ee:	e795      	b.n	801e51c <lfs_dir_orphaningcommit+0x248>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801e5f0:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801e5f2:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801e5f6:	4b1a      	ldr	r3, [pc, #104]	@ (801e660 <lfs_dir_orphaningcommit+0x38c>)
 801e5f8:	9302      	str	r3, [sp, #8]
 801e5fa:	9701      	str	r7, [sp, #4]
 801e5fc:	9b07      	ldr	r3, [sp, #28]
 801e5fe:	9300      	str	r3, [sp, #0]
 801e600:	9b06      	ldr	r3, [sp, #24]
 801e602:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801e606:	4917      	ldr	r1, [pc, #92]	@ (801e664 <lfs_dir_orphaningcommit+0x390>)
 801e608:	4818      	ldr	r0, [pc, #96]	@ (801e66c <lfs_dir_orphaningcommit+0x398>)
 801e60a:	f00c f853 	bl	802a6b4 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e60e:	2200      	movs	r2, #0
 801e610:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e614:	4628      	mov	r0, r5
 801e616:	f7fd f8f5 	bl	801b804 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801e61a:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801e61e:	42bb      	cmp	r3, r7
 801e620:	d902      	bls.n	801e628 <lfs_dir_orphaningcommit+0x354>
                    tag -= LFS_MKTAG(0, 1, 0);
 801e622:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801e626:	e7b4      	b.n	801e592 <lfs_dir_orphaningcommit+0x2be>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801e628:	4622      	mov	r2, r4
 801e62a:	e7b2      	b.n	801e592 <lfs_dir_orphaningcommit+0x2be>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801e62c:	2300      	movs	r3, #0
 801e62e:	e7bd      	b.n	801e5ac <lfs_dir_orphaningcommit+0x2d8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801e630:	4b0f      	ldr	r3, [pc, #60]	@ (801e670 <lfs_dir_orphaningcommit+0x39c>)
 801e632:	4a10      	ldr	r2, [pc, #64]	@ (801e674 <lfs_dir_orphaningcommit+0x3a0>)
 801e634:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801e638:	480a      	ldr	r0, [pc, #40]	@ (801e664 <lfs_dir_orphaningcommit+0x390>)
 801e63a:	f00c f807 	bl	802a64c <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801e63e:	f113 0f02 	cmn.w	r3, #2
 801e642:	f47f af2a 	bne.w	801e49a <lfs_dir_orphaningcommit+0x1c6>
 801e646:	e769      	b.n	801e51c <lfs_dir_orphaningcommit+0x248>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801e648:	f1c8 0100 	rsb	r1, r8, #0
 801e64c:	4628      	mov	r0, r5
 801e64e:	f7fd f929 	bl	801b8a4 <lfs_fs_preporphans>
                if (err) {
 801e652:	4607      	mov	r7, r0
 801e654:	2800      	cmp	r0, #0
 801e656:	f43f af26 	beq.w	801e4a6 <lfs_dir_orphaningcommit+0x1d2>
 801e65a:	e027      	b.n	801e6ac <lfs_dir_orphaningcommit+0x3d8>
 801e65c:	000ffc08 	.word	0x000ffc08
 801e660:	08037490 	.word	0x08037490
 801e664:	080399a8 	.word	0x080399a8
 801e668:	08039d48 	.word	0x08039d48
 801e66c:	08039d84 	.word	0x08039d84
 801e670:	08039dc8 	.word	0x08039dc8
 801e674:	0803a704 	.word	0x0803a704
                moveid = lfs_tag_id(lfs->gstate.tag);
 801e678:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801e67a:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801e67e:	4b10      	ldr	r3, [pc, #64]	@ (801e6c0 <lfs_dir_orphaningcommit+0x3ec>)
 801e680:	9302      	str	r3, [sp, #8]
 801e682:	9401      	str	r4, [sp, #4]
 801e684:	9b07      	ldr	r3, [sp, #28]
 801e686:	9300      	str	r3, [sp, #0]
 801e688:	9b06      	ldr	r3, [sp, #24]
 801e68a:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801e68e:	490d      	ldr	r1, [pc, #52]	@ (801e6c4 <lfs_dir_orphaningcommit+0x3f0>)
 801e690:	480d      	ldr	r0, [pc, #52]	@ (801e6c8 <lfs_dir_orphaningcommit+0x3f4>)
 801e692:	f00c f80f 	bl	802a6b4 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e696:	2200      	movs	r2, #0
 801e698:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e69c:	4628      	mov	r0, r5
 801e69e:	f7fd f8b1 	bl	801b804 <lfs_fs_prepmove>
 801e6a2:	e70a      	b.n	801e4ba <lfs_dir_orphaningcommit+0x1e6>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801e6a4:	2300      	movs	r3, #0
 801e6a6:	e716      	b.n	801e4d6 <lfs_dir_orphaningcommit+0x202>
    return orphans ? LFS_OK_ORPHANED : 0;
 801e6a8:	b926      	cbnz	r6, 801e6b4 <lfs_dir_orphaningcommit+0x3e0>
 801e6aa:	2700      	movs	r7, #0
}
 801e6ac:	4638      	mov	r0, r7
 801e6ae:	b023      	add	sp, #140	@ 0x8c
 801e6b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801e6b4:	2703      	movs	r7, #3
 801e6b6:	e7f9      	b.n	801e6ac <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801e6b8:	4627      	mov	r7, r4
 801e6ba:	e7f7      	b.n	801e6ac <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801e6bc:	4607      	mov	r7, r0
 801e6be:	e7f5      	b.n	801e6ac <lfs_dir_orphaningcommit+0x3d8>
 801e6c0:	08037490 	.word	0x08037490
 801e6c4:	080399a8 	.word	0x080399a8
 801e6c8:	08039d84 	.word	0x08039d84

0801e6cc <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801e6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6d0:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801e6d2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801e6d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	f000 80ea 	beq.w	801e8b2 <lfs_fs_deorphan+0x1e6>
 801e6de:	4605      	mov	r5, r0
 801e6e0:	460f      	mov	r7, r1
    int pass = 0;
 801e6e2:	2600      	movs	r6, #0
    while (pass < 2) {
 801e6e4:	2e01      	cmp	r6, #1
 801e6e6:	f300 80db 	bgt.w	801e8a0 <lfs_fs_deorphan+0x1d4>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801e6ea:	2220      	movs	r2, #32
 801e6ec:	2100      	movs	r1, #0
 801e6ee:	a806      	add	r0, sp, #24
 801e6f0:	f00e fcfe 	bl	802d0f0 <memset>
 801e6f4:	2301      	movs	r3, #1
 801e6f6:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801e6fa:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801e6fc:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 801e700:	e0bd      	b.n	801e87e <lfs_fs_deorphan+0x1b2>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801e702:	aa16      	add	r2, sp, #88	@ 0x58
 801e704:	a90c      	add	r1, sp, #48	@ 0x30
 801e706:	4628      	mov	r0, r5
 801e708:	f7fe fa4c 	bl	801cba4 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801e70c:	1e04      	subs	r4, r0, #0
 801e70e:	db39      	blt.n	801e784 <lfs_fs_deorphan+0xb8>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801e710:	b916      	cbnz	r6, 801e718 <lfs_fs_deorphan+0x4c>
 801e712:	f114 0f02 	cmn.w	r4, #2
 801e716:	d139      	bne.n	801e78c <lfs_fs_deorphan+0xc0>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801e718:	2e01      	cmp	r6, #1
 801e71a:	f040 80a4 	bne.w	801e866 <lfs_fs_deorphan+0x19a>
 801e71e:	f114 0f02 	cmn.w	r4, #2
 801e722:	f040 80a0 	bne.w	801e866 <lfs_fs_deorphan+0x19a>
 801e726:	2f00      	cmp	r7, #0
 801e728:	f000 809d 	beq.w	801e866 <lfs_fs_deorphan+0x19a>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801e72c:	4b63      	ldr	r3, [pc, #396]	@ (801e8bc <lfs_fs_deorphan+0x1f0>)
 801e72e:	9301      	str	r3, [sp, #4]
 801e730:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e732:	9300      	str	r3, [sp, #0]
 801e734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e736:	f241 329c 	movw	r2, #5020	@ 0x139c
 801e73a:	4961      	ldr	r1, [pc, #388]	@ (801e8c0 <lfs_fs_deorphan+0x1f4>)
 801e73c:	4861      	ldr	r0, [pc, #388]	@ (801e8c4 <lfs_fs_deorphan+0x1f8>)
 801e73e:	f00b ffb9 	bl	802a6b4 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801e742:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801e746:	a90e      	add	r1, sp, #56	@ 0x38
 801e748:	4628      	mov	r0, r5
 801e74a:	f7fd fab7 	bl	801bcbc <lfs_dir_getgstate>
                    if (err) {
 801e74e:	4604      	mov	r4, r0
 801e750:	2800      	cmp	r0, #0
 801e752:	f040 80af 	bne.w	801e8b4 <lfs_fs_deorphan+0x1e8>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e756:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801e75a:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e75e:	4b5a      	ldr	r3, [pc, #360]	@ (801e8c8 <lfs_fs_deorphan+0x1fc>)
 801e760:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e764:	9322      	str	r3, [sp, #136]	@ 0x88
 801e766:	ab14      	add	r3, sp, #80	@ 0x50
 801e768:	9323      	str	r3, [sp, #140]	@ 0x8c
 801e76a:	2301      	movs	r3, #1
 801e76c:	aa22      	add	r2, sp, #136	@ 0x88
 801e76e:	a906      	add	r1, sp, #24
 801e770:	4628      	mov	r0, r5
 801e772:	f7ff fdaf 	bl	801e2d4 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801e776:	1e04      	subs	r4, r0, #0
 801e778:	f2c0 809c 	blt.w	801e8b4 <lfs_fs_deorphan+0x1e8>
                    if (state == LFS_OK_ORPHANED) {
 801e77c:	2c03      	cmp	r4, #3
 801e77e:	d17e      	bne.n	801e87e <lfs_fs_deorphan+0x1b2>
                        moreorphans = true;
 801e780:	46b8      	mov	r8, r7
                    continue;
 801e782:	e07c      	b.n	801e87e <lfs_fs_deorphan+0x1b2>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801e784:	f114 0f02 	cmn.w	r4, #2
 801e788:	d0c2      	beq.n	801e710 <lfs_fs_deorphan+0x44>
 801e78a:	e093      	b.n	801e8b4 <lfs_fs_deorphan+0x1e8>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801e78c:	ab04      	add	r3, sp, #16
 801e78e:	9300      	str	r3, [sp, #0]
 801e790:	4623      	mov	r3, r4
 801e792:	4a4e      	ldr	r2, [pc, #312]	@ (801e8cc <lfs_fs_deorphan+0x200>)
 801e794:	a916      	add	r1, sp, #88	@ 0x58
 801e796:	4628      	mov	r0, r5
 801e798:	f7fd fa82 	bl	801bca0 <lfs_dir_get>
                    if (state < 0) {
 801e79c:	2800      	cmp	r0, #0
 801e79e:	db50      	blt.n	801e842 <lfs_fs_deorphan+0x176>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801e7a0:	a90c      	add	r1, sp, #48	@ 0x30
 801e7a2:	a804      	add	r0, sp, #16
 801e7a4:	f7fc ff12 	bl	801b5cc <lfs_pair_issync>
 801e7a8:	2800      	cmp	r0, #0
 801e7aa:	d1b5      	bne.n	801e718 <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 801e7ac:	4b43      	ldr	r3, [pc, #268]	@ (801e8bc <lfs_fs_deorphan+0x1f0>)
 801e7ae:	9303      	str	r3, [sp, #12]
 801e7b0:	9b05      	ldr	r3, [sp, #20]
 801e7b2:	9302      	str	r3, [sp, #8]
 801e7b4:	9b04      	ldr	r3, [sp, #16]
 801e7b6:	9301      	str	r3, [sp, #4]
 801e7b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e7ba:	9300      	str	r3, [sp, #0]
 801e7bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e7be:	f241 3271 	movw	r2, #4977	@ 0x1371
 801e7c2:	493f      	ldr	r1, [pc, #252]	@ (801e8c0 <lfs_fs_deorphan+0x1f4>)
 801e7c4:	4842      	ldr	r0, [pc, #264]	@ (801e8d0 <lfs_fs_deorphan+0x204>)
 801e7c6:	f00b ff75 	bl	802a6b4 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801e7ca:	a906      	add	r1, sp, #24
 801e7cc:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801e7d0:	f7fc ff32 	bl	801b638 <lfs_gstate_hasmovehere>
 801e7d4:	b9a0      	cbnz	r0, 801e800 <lfs_fs_deorphan+0x134>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e7d6:	2300      	movs	r3, #0
 801e7d8:	931e      	str	r3, [sp, #120]	@ 0x78
 801e7da:	2300      	movs	r3, #0
 801e7dc:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e7de:	4b3d      	ldr	r3, [pc, #244]	@ (801e8d4 <lfs_fs_deorphan+0x208>)
 801e7e0:	9320      	str	r3, [sp, #128]	@ 0x80
 801e7e2:	ab04      	add	r3, sp, #16
 801e7e4:	9321      	str	r3, [sp, #132]	@ 0x84
 801e7e6:	2302      	movs	r3, #2
 801e7e8:	aa1e      	add	r2, sp, #120	@ 0x78
 801e7ea:	a906      	add	r1, sp, #24
 801e7ec:	4628      	mov	r0, r5
 801e7ee:	f7ff fd71 	bl	801e2d4 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801e7f2:	1e04      	subs	r4, r0, #0
 801e7f4:	db5e      	blt.n	801e8b4 <lfs_fs_deorphan+0x1e8>
                        if (state == LFS_OK_ORPHANED) {
 801e7f6:	2c03      	cmp	r4, #3
 801e7f8:	d141      	bne.n	801e87e <lfs_fs_deorphan+0x1b2>
                            moreorphans = true;
 801e7fa:	f04f 0801 	mov.w	r8, #1
                        continue;
 801e7fe:	e03e      	b.n	801e87e <lfs_fs_deorphan+0x1b2>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801e800:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801e802:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801e806:	4b2d      	ldr	r3, [pc, #180]	@ (801e8bc <lfs_fs_deorphan+0x1f0>)
 801e808:	9302      	str	r3, [sp, #8]
 801e80a:	9401      	str	r4, [sp, #4]
 801e80c:	9b07      	ldr	r3, [sp, #28]
 801e80e:	9300      	str	r3, [sp, #0]
 801e810:	9b06      	ldr	r3, [sp, #24]
 801e812:	f241 327c 	movw	r2, #4988	@ 0x137c
 801e816:	492a      	ldr	r1, [pc, #168]	@ (801e8c0 <lfs_fs_deorphan+0x1f4>)
 801e818:	482f      	ldr	r0, [pc, #188]	@ (801e8d8 <lfs_fs_deorphan+0x20c>)
 801e81a:	f00b ff4b 	bl	802a6b4 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e81e:	2200      	movs	r2, #0
 801e820:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e824:	4628      	mov	r0, r5
 801e826:	f7fc ffed 	bl	801b804 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e82a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e82e:	429c      	cmp	r4, r3
 801e830:	d005      	beq.n	801e83e <lfs_fs_deorphan+0x172>
 801e832:	02a3      	lsls	r3, r4, #10
 801e834:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e838:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e83c:	e7cc      	b.n	801e7d8 <lfs_fs_deorphan+0x10c>
 801e83e:	2300      	movs	r3, #0
 801e840:	e7ca      	b.n	801e7d8 <lfs_fs_deorphan+0x10c>
                        return state;
 801e842:	4604      	mov	r4, r0
 801e844:	e036      	b.n	801e8b4 <lfs_fs_deorphan+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e846:	2301      	movs	r3, #1
 801e848:	e000      	b.n	801e84c <lfs_fs_deorphan+0x180>
 801e84a:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 801e84c:	bb0b      	cbnz	r3, 801e892 <lfs_fs_deorphan+0x1c6>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801e84e:	aa0c      	add	r2, sp, #48	@ 0x30
 801e850:	a90e      	add	r1, sp, #56	@ 0x38
 801e852:	4628      	mov	r0, r5
 801e854:	f7fe fa12 	bl	801cc7c <lfs_dir_fetch>
            if (err) {
 801e858:	4604      	mov	r4, r0
 801e85a:	bb58      	cbnz	r0, 801e8b4 <lfs_fs_deorphan+0x1e8>
            if (!pdir.split) {
 801e85c:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801e860:	2b00      	cmp	r3, #0
 801e862:	f43f af4e 	beq.w	801e702 <lfs_fs_deorphan+0x36>
            pdir = dir;
 801e866:	f10d 0c18 	add.w	ip, sp, #24
 801e86a:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801e86e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e872:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e876:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801e87a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e87e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e884:	d0e1      	beq.n	801e84a <lfs_fs_deorphan+0x17e>
 801e886:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e88c:	d0db      	beq.n	801e846 <lfs_fs_deorphan+0x17a>
 801e88e:	2300      	movs	r3, #0
 801e890:	e7dc      	b.n	801e84c <lfs_fs_deorphan+0x180>
        pass = moreorphans ? 0 : pass+1;
 801e892:	f1b8 0f00 	cmp.w	r8, #0
 801e896:	d101      	bne.n	801e89c <lfs_fs_deorphan+0x1d0>
 801e898:	3601      	adds	r6, #1
 801e89a:	e723      	b.n	801e6e4 <lfs_fs_deorphan+0x18>
 801e89c:	2600      	movs	r6, #0
 801e89e:	e721      	b.n	801e6e4 <lfs_fs_deorphan+0x18>
    return lfs_tag_size(a->tag) & 0x1ff;
 801e8a0:	f895 1030 	ldrb.w	r1, [r5, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801e8a4:	4249      	negs	r1, r1
 801e8a6:	b249      	sxtb	r1, r1
 801e8a8:	4628      	mov	r0, r5
 801e8aa:	f7fc fffb 	bl	801b8a4 <lfs_fs_preporphans>
 801e8ae:	4604      	mov	r4, r0
 801e8b0:	e000      	b.n	801e8b4 <lfs_fs_deorphan+0x1e8>
        return 0;
 801e8b2:	2400      	movs	r4, #0
}
 801e8b4:	4620      	mov	r0, r4
 801e8b6:	b024      	add	sp, #144	@ 0x90
 801e8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8bc:	08037490 	.word	0x08037490
 801e8c0:	080399a8 	.word	0x080399a8
 801e8c4:	08039e7c 	.word	0x08039e7c
 801e8c8:	000ffc08 	.word	0x000ffc08
 801e8cc:	7ffffc00 	.word	0x7ffffc00
 801e8d0:	08039df0 	.word	0x08039df0
 801e8d4:	600ffc08 	.word	0x600ffc08
 801e8d8:	08039e34 	.word	0x08039e34

0801e8dc <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801e8dc:	b510      	push	{r4, lr}
 801e8de:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801e8e0:	f7ff fcf8 	bl	801e2d4 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801e8e4:	2800      	cmp	r0, #0
 801e8e6:	db00      	blt.n	801e8ea <lfs_dir_commit+0xe>
    if (orphans) {
 801e8e8:	b900      	cbnz	r0, 801e8ec <lfs_dir_commit+0x10>
}
 801e8ea:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801e8ec:	2100      	movs	r1, #0
 801e8ee:	4620      	mov	r0, r4
 801e8f0:	f7ff feec 	bl	801e6cc <lfs_fs_deorphan>
        if (err) {
 801e8f4:	e7f9      	b.n	801e8ea <lfs_dir_commit+0xe>
	...

0801e8f8 <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801e8f8:	b530      	push	{r4, r5, lr}
 801e8fa:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801e8fc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801e8fe:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801e902:	d103      	bne.n	801e90c <lfs_fs_desuperblock+0x14>
        return 0;
 801e904:	2500      	movs	r5, #0
}
 801e906:	4628      	mov	r0, r5
 801e908:	b013      	add	sp, #76	@ 0x4c
 801e90a:	bd30      	pop	{r4, r5, pc}
 801e90c:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801e90e:	4b1a      	ldr	r3, [pc, #104]	@ (801e978 <lfs_fs_desuperblock+0x80>)
 801e910:	9301      	str	r3, [sp, #4]
 801e912:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801e914:	9300      	str	r3, [sp, #0]
 801e916:	6a03      	ldr	r3, [r0, #32]
 801e918:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801e91c:	4917      	ldr	r1, [pc, #92]	@ (801e97c <lfs_fs_desuperblock+0x84>)
 801e91e:	4818      	ldr	r0, [pc, #96]	@ (801e980 <lfs_fs_desuperblock+0x88>)
 801e920:	f00b fec8 	bl	802a6b4 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801e924:	f104 0220 	add.w	r2, r4, #32
 801e928:	a908      	add	r1, sp, #32
 801e92a:	4620      	mov	r0, r4
 801e92c:	f7fe f9a6 	bl	801cc7c <lfs_dir_fetch>
    if (err) {
 801e930:	4605      	mov	r5, r0
 801e932:	2800      	cmp	r0, #0
 801e934:	d1e7      	bne.n	801e906 <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801e936:	4620      	mov	r0, r4
 801e938:	f7fc feb6 	bl	801b6a8 <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801e93c:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801e93e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801e942:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801e944:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801e946:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801e948:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801e94a:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801e94c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801e94e:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801e950:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801e952:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801e954:	4b0b      	ldr	r3, [pc, #44]	@ (801e984 <lfs_fs_desuperblock+0x8c>)
 801e956:	9310      	str	r3, [sp, #64]	@ 0x40
 801e958:	ab02      	add	r3, sp, #8
 801e95a:	9311      	str	r3, [sp, #68]	@ 0x44
 801e95c:	2301      	movs	r3, #1
 801e95e:	aa10      	add	r2, sp, #64	@ 0x40
 801e960:	a908      	add	r1, sp, #32
 801e962:	4620      	mov	r0, r4
 801e964:	f7ff ffba 	bl	801e8dc <lfs_dir_commit>
    if (err) {
 801e968:	4605      	mov	r5, r0
 801e96a:	2800      	cmp	r0, #0
 801e96c:	d1cb      	bne.n	801e906 <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801e96e:	2100      	movs	r1, #0
 801e970:	4620      	mov	r0, r4
 801e972:	f7fc ff40 	bl	801b7f6 <lfs_fs_prepsuperblock>
    return 0;
 801e976:	e7c6      	b.n	801e906 <lfs_fs_desuperblock+0xe>
 801e978:	08037490 	.word	0x08037490
 801e97c:	080399a8 	.word	0x080399a8
 801e980:	08039eac 	.word	0x08039eac
 801e984:	20100018 	.word	0x20100018

0801e988 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801e988:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801e98a:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801e98c:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801e990:	d101      	bne.n	801e996 <lfs_fs_demove+0xe>
        return 0;
 801e992:	2000      	movs	r0, #0
}
 801e994:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801e996:	b530      	push	{r4, r5, lr}
 801e998:	b08f      	sub	sp, #60	@ 0x3c
 801e99a:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801e99c:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801e9a0:	4a1d      	ldr	r2, [pc, #116]	@ (801ea18 <lfs_fs_demove+0x90>)
 801e9a2:	9202      	str	r2, [sp, #8]
 801e9a4:	9301      	str	r3, [sp, #4]
 801e9a6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801e9a8:	9300      	str	r3, [sp, #0]
 801e9aa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801e9ac:	f241 3224 	movw	r2, #4900	@ 0x1324
 801e9b0:	491a      	ldr	r1, [pc, #104]	@ (801ea1c <lfs_fs_demove+0x94>)
 801e9b2:	481b      	ldr	r0, [pc, #108]	@ (801ea20 <lfs_fs_demove+0x98>)
 801e9b4:	f00b fe7e 	bl	802a6b4 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e9b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801e9ba:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e9be:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801e9c2:	4293      	cmp	r3, r2
 801e9c4:	d108      	bne.n	801e9d8 <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801e9c6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801e9ca:	a904      	add	r1, sp, #16
 801e9cc:	4620      	mov	r0, r4
 801e9ce:	f7fe f955 	bl	801cc7c <lfs_dir_fetch>
    if (err) {
 801e9d2:	b140      	cbz	r0, 801e9e6 <lfs_fs_demove+0x5e>
}
 801e9d4:	b00f      	add	sp, #60	@ 0x3c
 801e9d6:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e9d8:	4b12      	ldr	r3, [pc, #72]	@ (801ea24 <lfs_fs_demove+0x9c>)
 801e9da:	4a13      	ldr	r2, [pc, #76]	@ (801ea28 <lfs_fs_demove+0xa0>)
 801e9dc:	f241 312b 	movw	r1, #4907	@ 0x132b
 801e9e0:	480e      	ldr	r0, [pc, #56]	@ (801ea1c <lfs_fs_demove+0x94>)
 801e9e2:	f00b fe33 	bl	802a64c <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801e9e6:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801e9e8:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e9ec:	2200      	movs	r2, #0
 801e9ee:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e9f2:	4620      	mov	r0, r4
 801e9f4:	f7fc ff06 	bl	801b804 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801e9f8:	02ab      	lsls	r3, r5, #10
 801e9fa:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e9fe:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801ea02:	930c      	str	r3, [sp, #48]	@ 0x30
 801ea04:	2300      	movs	r3, #0
 801ea06:	930d      	str	r3, [sp, #52]	@ 0x34
 801ea08:	2301      	movs	r3, #1
 801ea0a:	aa0c      	add	r2, sp, #48	@ 0x30
 801ea0c:	a904      	add	r1, sp, #16
 801ea0e:	4620      	mov	r0, r4
 801ea10:	f7ff ff64 	bl	801e8dc <lfs_dir_commit>
    if (err) {
 801ea14:	e7de      	b.n	801e9d4 <lfs_fs_demove+0x4c>
 801ea16:	bf00      	nop
 801ea18:	08037490 	.word	0x08037490
 801ea1c:	080399a8 	.word	0x080399a8
 801ea20:	08039ee0 	.word	0x08039ee0
 801ea24:	08039f14 	.word	0x08039f14
 801ea28:	0803a668 	.word	0x0803a668

0801ea2c <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801ea2c:	b510      	push	{r4, lr}
 801ea2e:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801ea30:	f7ff ff62 	bl	801e8f8 <lfs_fs_desuperblock>
    if (err) {
 801ea34:	4603      	mov	r3, r0
 801ea36:	b108      	cbz	r0, 801ea3c <lfs_fs_forceconsistency+0x10>
}
 801ea38:	4618      	mov	r0, r3
 801ea3a:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801ea3c:	4620      	mov	r0, r4
 801ea3e:	f7ff ffa3 	bl	801e988 <lfs_fs_demove>
    if (err) {
 801ea42:	4603      	mov	r3, r0
 801ea44:	2800      	cmp	r0, #0
 801ea46:	d1f7      	bne.n	801ea38 <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801ea48:	2101      	movs	r1, #1
 801ea4a:	4620      	mov	r0, r4
 801ea4c:	f7ff fe3e 	bl	801e6cc <lfs_fs_deorphan>
 801ea50:	4603      	mov	r3, r0
    if (err) {
 801ea52:	e7f1      	b.n	801ea38 <lfs_fs_forceconsistency+0xc>

0801ea54 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801ea54:	b570      	push	{r4, r5, r6, lr}
 801ea56:	b082      	sub	sp, #8
 801ea58:	4605      	mov	r5, r0
 801ea5a:	460e      	mov	r6, r1
 801ea5c:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801ea5e:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801ea62:	4621      	mov	r1, r4
 801ea64:	f7fd f92a 	bl	801bcbc <lfs_dir_getgstate>
    if (err) {
 801ea68:	b108      	cbz	r0, 801ea6e <lfs_dir_drop+0x1a>
}
 801ea6a:	b002      	add	sp, #8
 801ea6c:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 801ea6e:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801ea72:	7de2      	ldrb	r2, [r4, #23]
 801ea74:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801ea78:	4b05      	ldr	r3, [pc, #20]	@ (801ea90 <lfs_dir_drop+0x3c>)
 801ea7a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801ea7e:	9300      	str	r3, [sp, #0]
 801ea80:	9101      	str	r1, [sp, #4]
 801ea82:	2301      	movs	r3, #1
 801ea84:	466a      	mov	r2, sp
 801ea86:	4631      	mov	r1, r6
 801ea88:	4628      	mov	r0, r5
 801ea8a:	f7ff ff27 	bl	801e8dc <lfs_dir_commit>
    if (err) {
 801ea8e:	e7ec      	b.n	801ea6a <lfs_dir_drop+0x16>
 801ea90:	000ffc08 	.word	0x000ffc08

0801ea94 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801ea94:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801ea96:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801ea9a:	d001      	beq.n	801eaa0 <lfs_file_sync_+0xc>
        return 0;
 801ea9c:	2000      	movs	r0, #0
}
 801ea9e:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801eaa0:	b530      	push	{r4, r5, lr}
 801eaa2:	b087      	sub	sp, #28
 801eaa4:	4605      	mov	r5, r0
 801eaa6:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801eaa8:	f7fe fcae 	bl	801d408 <lfs_file_flush>
    if (err) {
 801eaac:	2800      	cmp	r0, #0
 801eaae:	d136      	bne.n	801eb1e <lfs_file_sync_+0x8a>
    if ((file->flags & LFS_F_DIRTY) &&
 801eab0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801eab2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801eab6:	d036      	beq.n	801eb26 <lfs_file_sync_+0x92>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801eab8:	68a2      	ldr	r2, [r4, #8]
 801eaba:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801eabe:	d036      	beq.n	801eb2e <lfs_file_sync_+0x9a>
 801eac0:	68e2      	ldr	r2, [r4, #12]
 801eac2:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801eac6:	d030      	beq.n	801eb2a <lfs_file_sync_+0x96>
 801eac8:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 801eaca:	f012 0f01 	tst.w	r2, #1
 801eace:	d12a      	bne.n	801eb26 <lfs_file_sync_+0x92>
        if (!(file->flags & LFS_F_INLINE)) {
 801ead0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801ead4:	d02d      	beq.n	801eb32 <lfs_file_sync_+0x9e>
        if (file->flags & LFS_F_INLINE) {
 801ead6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ead8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801eadc:	d033      	beq.n	801eb46 <lfs_file_sync_+0xb2>
            buffer = file->cache.buffer;
 801eade:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801eae0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801eae2:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801eae6:	88a3      	ldrh	r3, [r4, #4]
 801eae8:	029b      	lsls	r3, r3, #10
 801eaea:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801eaee:	4302      	orrs	r2, r0
 801eaf0:	9202      	str	r2, [sp, #8]
 801eaf2:	9103      	str	r1, [sp, #12]
 801eaf4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801eaf6:	6891      	ldr	r1, [r2, #8]
 801eaf8:	430b      	orrs	r3, r1
 801eafa:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801eafe:	9304      	str	r3, [sp, #16]
 801eb00:	6853      	ldr	r3, [r2, #4]
 801eb02:	9305      	str	r3, [sp, #20]
 801eb04:	2302      	movs	r3, #2
 801eb06:	aa02      	add	r2, sp, #8
 801eb08:	f104 0108 	add.w	r1, r4, #8
 801eb0c:	4628      	mov	r0, r5
 801eb0e:	f7ff fee5 	bl	801e8dc <lfs_dir_commit>
        if (err) {
 801eb12:	bb20      	cbnz	r0, 801eb5e <lfs_file_sync_+0xca>
        file->flags &= ~LFS_F_DIRTY;
 801eb14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801eb16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801eb1a:	6323      	str	r3, [r4, #48]	@ 0x30
 801eb1c:	e003      	b.n	801eb26 <lfs_file_sync_+0x92>
        file->flags |= LFS_F_ERRED;
 801eb1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801eb20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801eb24:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801eb26:	b007      	add	sp, #28
 801eb28:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801eb2a:	2201      	movs	r2, #1
 801eb2c:	e7cd      	b.n	801eaca <lfs_file_sync_+0x36>
 801eb2e:	2201      	movs	r2, #1
 801eb30:	e7cb      	b.n	801eaca <lfs_file_sync_+0x36>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801eb32:	2300      	movs	r3, #0
 801eb34:	462a      	mov	r2, r5
 801eb36:	f105 0110 	add.w	r1, r5, #16
 801eb3a:	4628      	mov	r0, r5
 801eb3c:	f7fd fc82 	bl	801c444 <lfs_bd_sync>
            if (err) {
 801eb40:	2800      	cmp	r0, #0
 801eb42:	d0c8      	beq.n	801ead6 <lfs_file_sync_+0x42>
 801eb44:	e7ef      	b.n	801eb26 <lfs_file_sync_+0x92>
            ctz = file->ctz;
 801eb46:	466b      	mov	r3, sp
 801eb48:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801eb4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801eb50:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801eb54:	2008      	movs	r0, #8
            buffer = &ctz;
 801eb56:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801eb58:	f240 2202 	movw	r2, #514	@ 0x202
 801eb5c:	e7c3      	b.n	801eae6 <lfs_file_sync_+0x52>
            file->flags |= LFS_F_ERRED;
 801eb5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801eb60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801eb64:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801eb66:	e7de      	b.n	801eb26 <lfs_file_sync_+0x92>

0801eb68 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801eb68:	b510      	push	{r4, lr}
 801eb6a:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801eb6c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801eb6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801eb70:	b13b      	cbz	r3, 801eb82 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801eb72:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801eb74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eb76:	b143      	cbz	r3, 801eb8a <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801eb78:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801eb7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801eb7c:	b14b      	cbz	r3, 801eb92 <lfs_deinit+0x2a>
}
 801eb7e:	2000      	movs	r0, #0
 801eb80:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801eb82:	68c0      	ldr	r0, [r0, #12]
 801eb84:	f7fc faea 	bl	801b15c <vPortFree>
#else
    (void)p;
#endif
}
 801eb88:	e7f3      	b.n	801eb72 <lfs_deinit+0xa>
    free(p);
 801eb8a:	69e0      	ldr	r0, [r4, #28]
 801eb8c:	f7fc fae6 	bl	801b15c <vPortFree>
}
 801eb90:	e7f2      	b.n	801eb78 <lfs_deinit+0x10>
    free(p);
 801eb92:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801eb94:	f7fc fae2 	bl	801b15c <vPortFree>
}
 801eb98:	e7f1      	b.n	801eb7e <lfs_deinit+0x16>
	...

0801eb9c <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801eb9c:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801eb9e:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801eba0:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801eba2:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801eba4:	69cb      	ldr	r3, [r1, #28]
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	f000 80b1 	beq.w	801ed0e <lfs_init+0x172>
 801ebac:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801ebae:	6a0a      	ldr	r2, [r1, #32]
 801ebb0:	2a00      	cmp	r2, #0
 801ebb2:	f000 80b3 	beq.w	801ed1c <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801ebb6:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801ebb8:	2800      	cmp	r0, #0
 801ebba:	f000 80b6 	beq.w	801ed2a <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801ebbe:	fbb0 fcf3 	udiv	ip, r0, r3
 801ebc2:	fb03 031c 	mls	r3, r3, ip, r0
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	f040 80b6 	bne.w	801ed38 <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801ebcc:	fbb0 f3f2 	udiv	r3, r0, r2
 801ebd0:	fb02 0313 	mls	r3, r2, r3, r0
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	f040 80b6 	bne.w	801ed46 <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801ebda:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801ebdc:	fbb2 f3f0 	udiv	r3, r2, r0
 801ebe0:	fb00 2313 	mls	r3, r0, r3, r2
 801ebe4:	2b00      	cmp	r3, #0
 801ebe6:	f040 80b5 	bne.w	801ed54 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801ebea:	2a7f      	cmp	r2, #127	@ 0x7f
 801ebec:	f240 80b9 	bls.w	801ed62 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801ebf0:	f1a2 0c08 	sub.w	ip, r2, #8
 801ebf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ebf8:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801ebfc:	3b01      	subs	r3, #1
 801ebfe:	fab3 f383 	clz	r3, r3
 801ec02:	f1c3 0320 	rsb	r3, r3, #32
 801ec06:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801ec0a:	f0c0 80b1 	bcc.w	801ed70 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801ec0e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	f000 80b4 	beq.w	801ed7e <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801ec16:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801ec18:	b11b      	cbz	r3, 801ec22 <lfs_init+0x86>
 801ec1a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801ec1e:	f0c0 80b5 	bcc.w	801ed8c <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801ec22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ec26:	d002      	beq.n	801ec2e <lfs_init+0x92>
 801ec28:	429a      	cmp	r2, r3
 801ec2a:	f0c0 80b6 	bcc.w	801ed9a <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801ec2e:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801ec30:	2b00      	cmp	r3, #0
 801ec32:	f000 80b9 	beq.w	801eda8 <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801ec36:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801ec38:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801ec3a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801ec3c:	2b00      	cmp	r3, #0
 801ec3e:	f000 80bf 	beq.w	801edc0 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801ec42:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801ec44:	4621      	mov	r1, r4
 801ec46:	4620      	mov	r0, r4
 801ec48:	f7fc fe5c 	bl	801b904 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801ec4c:	f104 0110 	add.w	r1, r4, #16
 801ec50:	4620      	mov	r0, r4
 801ec52:	f7fc fe57 	bl	801b904 <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801ec56:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801ec58:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801ec5a:	2800      	cmp	r0, #0
 801ec5c:	f000 80b8 	beq.w	801edd0 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801ec60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	f000 80bb 	beq.w	801edde <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801ec68:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801ec6a:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801ec6c:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801ec6e:	2bff      	cmp	r3, #255	@ 0xff
 801ec70:	f200 80bc 	bhi.w	801edec <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801ec74:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801ec76:	b90b      	cbnz	r3, 801ec7c <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801ec78:	23ff      	movs	r3, #255	@ 0xff
 801ec7a:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801ec7c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	f2c0 80bb 	blt.w	801edfa <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801ec84:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801ec86:	b913      	cbnz	r3, 801ec8e <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801ec88:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ec8c:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801ec8e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801ec90:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801ec94:	428b      	cmp	r3, r1
 801ec96:	f200 80b7 	bhi.w	801ee08 <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801ec9a:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801ec9c:	b913      	cbnz	r3, 801eca4 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801ec9e:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801eca2:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801eca4:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801eca6:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801eca8:	4288      	cmp	r0, r1
 801ecaa:	f200 80b4 	bhi.w	801ee16 <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ecae:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801ecb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ecb4:	d003      	beq.n	801ecbe <lfs_init+0x122>
 801ecb6:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801ecb8:	42ab      	cmp	r3, r5
 801ecba:	f200 80b3 	bhi.w	801ee24 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ecbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ecc2:	d003      	beq.n	801eccc <lfs_init+0x130>
 801ecc4:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801ecc6:	42ab      	cmp	r3, r5
 801ecc8:	f200 80b3 	bhi.w	801ee32 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801eccc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ecd0:	d006      	beq.n	801ece0 <lfs_init+0x144>
 801ecd2:	2800      	cmp	r0, #0
 801ecd4:	f000 80b4 	beq.w	801ee40 <lfs_init+0x2a4>
 801ecd8:	08c1      	lsrs	r1, r0, #3
 801ecda:	428b      	cmp	r3, r1
 801ecdc:	f200 80b2 	bhi.w	801ee44 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801ece0:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801ece2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ece6:	f000 80b4 	beq.w	801ee52 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801ecea:	2b00      	cmp	r3, #0
 801ecec:	f040 80b3 	bne.w	801ee56 <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801ecf0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801ecf2:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801ecf4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	f000 80be 	beq.w	801ee78 <lfs_init+0x2dc>
 801ecfc:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801ecfe:	4283      	cmp	r3, r0
 801ed00:	bf28      	it	cs
 801ed02:	4603      	movcs	r3, r0
 801ed04:	428b      	cmp	r3, r1
 801ed06:	bf28      	it	cs
 801ed08:	460b      	movcs	r3, r1
 801ed0a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801ed0c:	e0a3      	b.n	801ee56 <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801ed0e:	4b5c      	ldr	r3, [pc, #368]	@ (801ee80 <lfs_init+0x2e4>)
 801ed10:	4a5c      	ldr	r2, [pc, #368]	@ (801ee84 <lfs_init+0x2e8>)
 801ed12:	f241 0152 	movw	r1, #4178	@ 0x1052
 801ed16:	485c      	ldr	r0, [pc, #368]	@ (801ee88 <lfs_init+0x2ec>)
 801ed18:	f00b fc98 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801ed1c:	4b5b      	ldr	r3, [pc, #364]	@ (801ee8c <lfs_init+0x2f0>)
 801ed1e:	4a59      	ldr	r2, [pc, #356]	@ (801ee84 <lfs_init+0x2e8>)
 801ed20:	f241 0153 	movw	r1, #4179	@ 0x1053
 801ed24:	4858      	ldr	r0, [pc, #352]	@ (801ee88 <lfs_init+0x2ec>)
 801ed26:	f00b fc91 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801ed2a:	4b59      	ldr	r3, [pc, #356]	@ (801ee90 <lfs_init+0x2f4>)
 801ed2c:	4a55      	ldr	r2, [pc, #340]	@ (801ee84 <lfs_init+0x2e8>)
 801ed2e:	f241 0154 	movw	r1, #4180	@ 0x1054
 801ed32:	4855      	ldr	r0, [pc, #340]	@ (801ee88 <lfs_init+0x2ec>)
 801ed34:	f00b fc8a 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801ed38:	4b56      	ldr	r3, [pc, #344]	@ (801ee94 <lfs_init+0x2f8>)
 801ed3a:	4a52      	ldr	r2, [pc, #328]	@ (801ee84 <lfs_init+0x2e8>)
 801ed3c:	f241 0158 	movw	r1, #4184	@ 0x1058
 801ed40:	4851      	ldr	r0, [pc, #324]	@ (801ee88 <lfs_init+0x2ec>)
 801ed42:	f00b fc83 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801ed46:	4b54      	ldr	r3, [pc, #336]	@ (801ee98 <lfs_init+0x2fc>)
 801ed48:	4a4e      	ldr	r2, [pc, #312]	@ (801ee84 <lfs_init+0x2e8>)
 801ed4a:	f241 0159 	movw	r1, #4185	@ 0x1059
 801ed4e:	484e      	ldr	r0, [pc, #312]	@ (801ee88 <lfs_init+0x2ec>)
 801ed50:	f00b fc7c 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801ed54:	4b51      	ldr	r3, [pc, #324]	@ (801ee9c <lfs_init+0x300>)
 801ed56:	4a4b      	ldr	r2, [pc, #300]	@ (801ee84 <lfs_init+0x2e8>)
 801ed58:	f241 015a 	movw	r1, #4186	@ 0x105a
 801ed5c:	484a      	ldr	r0, [pc, #296]	@ (801ee88 <lfs_init+0x2ec>)
 801ed5e:	f00b fc75 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801ed62:	4b4f      	ldr	r3, [pc, #316]	@ (801eea0 <lfs_init+0x304>)
 801ed64:	4a47      	ldr	r2, [pc, #284]	@ (801ee84 <lfs_init+0x2e8>)
 801ed66:	f241 015d 	movw	r1, #4189	@ 0x105d
 801ed6a:	4847      	ldr	r0, [pc, #284]	@ (801ee88 <lfs_init+0x2ec>)
 801ed6c:	f00b fc6e 	bl	802a64c <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801ed70:	4b4c      	ldr	r3, [pc, #304]	@ (801eea4 <lfs_init+0x308>)
 801ed72:	4a44      	ldr	r2, [pc, #272]	@ (801ee84 <lfs_init+0x2e8>)
 801ed74:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801ed78:	4843      	ldr	r0, [pc, #268]	@ (801ee88 <lfs_init+0x2ec>)
 801ed7a:	f00b fc67 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801ed7e:	4b4a      	ldr	r3, [pc, #296]	@ (801eea8 <lfs_init+0x30c>)
 801ed80:	4a40      	ldr	r2, [pc, #256]	@ (801ee84 <lfs_init+0x2e8>)
 801ed82:	f241 0169 	movw	r1, #4201	@ 0x1069
 801ed86:	4840      	ldr	r0, [pc, #256]	@ (801ee88 <lfs_init+0x2ec>)
 801ed88:	f00b fc60 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801ed8c:	4b47      	ldr	r3, [pc, #284]	@ (801eeac <lfs_init+0x310>)
 801ed8e:	4a3d      	ldr	r2, [pc, #244]	@ (801ee84 <lfs_init+0x2e8>)
 801ed90:	f241 016f 	movw	r1, #4207	@ 0x106f
 801ed94:	483c      	ldr	r0, [pc, #240]	@ (801ee88 <lfs_init+0x2ec>)
 801ed96:	f00b fc59 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801ed9a:	4b45      	ldr	r3, [pc, #276]	@ (801eeb0 <lfs_init+0x314>)
 801ed9c:	4a39      	ldr	r2, [pc, #228]	@ (801ee84 <lfs_init+0x2e8>)
 801ed9e:	f241 0171 	movw	r1, #4209	@ 0x1071
 801eda2:	4839      	ldr	r0, [pc, #228]	@ (801ee88 <lfs_init+0x2ec>)
 801eda4:	f00b fc52 	bl	802a64c <__assert_func>
    return malloc(size);
 801eda8:	f7fc f956 	bl	801b058 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801edac:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801edae:	2800      	cmp	r0, #0
 801edb0:	f47f af42 	bne.w	801ec38 <lfs_init+0x9c>
    lfs_deinit(lfs);
 801edb4:	4620      	mov	r0, r4
 801edb6:	f7ff fed7 	bl	801eb68 <lfs_deinit>
    return err;
 801edba:	f06f 000b 	mvn.w	r0, #11
 801edbe:	e05a      	b.n	801ee76 <lfs_init+0x2da>
 801edc0:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801edc2:	f7fc f949 	bl	801b058 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801edc6:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801edc8:	2800      	cmp	r0, #0
 801edca:	f47f af3b 	bne.w	801ec44 <lfs_init+0xa8>
 801edce:	e7f1      	b.n	801edb4 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801edd0:	4b38      	ldr	r3, [pc, #224]	@ (801eeb4 <lfs_init+0x318>)
 801edd2:	4a2c      	ldr	r2, [pc, #176]	@ (801ee84 <lfs_init+0x2e8>)
 801edd4:	f241 0190 	movw	r1, #4240	@ 0x1090
 801edd8:	482b      	ldr	r0, [pc, #172]	@ (801ee88 <lfs_init+0x2ec>)
 801edda:	f00b fc37 	bl	802a64c <__assert_func>
 801edde:	f7fc f93b 	bl	801b058 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801ede2:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801ede4:	2800      	cmp	r0, #0
 801ede6:	f47f af40 	bne.w	801ec6a <lfs_init+0xce>
 801edea:	e7e3      	b.n	801edb4 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801edec:	4b32      	ldr	r3, [pc, #200]	@ (801eeb8 <lfs_init+0x31c>)
 801edee:	4a25      	ldr	r2, [pc, #148]	@ (801ee84 <lfs_init+0x2e8>)
 801edf0:	f241 019c 	movw	r1, #4252	@ 0x109c
 801edf4:	4824      	ldr	r0, [pc, #144]	@ (801ee88 <lfs_init+0x2ec>)
 801edf6:	f00b fc29 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801edfa:	4b30      	ldr	r3, [pc, #192]	@ (801eebc <lfs_init+0x320>)
 801edfc:	4a21      	ldr	r2, [pc, #132]	@ (801ee84 <lfs_init+0x2e8>)
 801edfe:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801ee02:	4821      	ldr	r0, [pc, #132]	@ (801ee88 <lfs_init+0x2ec>)
 801ee04:	f00b fc22 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801ee08:	4b2d      	ldr	r3, [pc, #180]	@ (801eec0 <lfs_init+0x324>)
 801ee0a:	4a1e      	ldr	r2, [pc, #120]	@ (801ee84 <lfs_init+0x2e8>)
 801ee0c:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801ee10:	481d      	ldr	r0, [pc, #116]	@ (801ee88 <lfs_init+0x2ec>)
 801ee12:	f00b fc1b 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801ee16:	4b2b      	ldr	r3, [pc, #172]	@ (801eec4 <lfs_init+0x328>)
 801ee18:	4a1a      	ldr	r2, [pc, #104]	@ (801ee84 <lfs_init+0x2e8>)
 801ee1a:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801ee1e:	481a      	ldr	r0, [pc, #104]	@ (801ee88 <lfs_init+0x2ec>)
 801ee20:	f00b fc14 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ee24:	4b28      	ldr	r3, [pc, #160]	@ (801eec8 <lfs_init+0x32c>)
 801ee26:	4a17      	ldr	r2, [pc, #92]	@ (801ee84 <lfs_init+0x2e8>)
 801ee28:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801ee2c:	4816      	ldr	r0, [pc, #88]	@ (801ee88 <lfs_init+0x2ec>)
 801ee2e:	f00b fc0d 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ee32:	4b26      	ldr	r3, [pc, #152]	@ (801eecc <lfs_init+0x330>)
 801ee34:	4a13      	ldr	r2, [pc, #76]	@ (801ee84 <lfs_init+0x2e8>)
 801ee36:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801ee3a:	4813      	ldr	r0, [pc, #76]	@ (801ee88 <lfs_init+0x2ec>)
 801ee3c:	f00b fc06 	bl	802a64c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ee40:	08c9      	lsrs	r1, r1, #3
 801ee42:	e74a      	b.n	801ecda <lfs_init+0x13e>
 801ee44:	4b22      	ldr	r3, [pc, #136]	@ (801eed0 <lfs_init+0x334>)
 801ee46:	4a0f      	ldr	r2, [pc, #60]	@ (801ee84 <lfs_init+0x2e8>)
 801ee48:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801ee4c:	480e      	ldr	r0, [pc, #56]	@ (801ee88 <lfs_init+0x2ec>)
 801ee4e:	f00b fbfd 	bl	802a64c <__assert_func>
        lfs->inline_max = 0;
 801ee52:	2300      	movs	r3, #0
 801ee54:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801ee56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ee5a:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801ee5c:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801ee5e:	2000      	movs	r0, #0
 801ee60:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801ee62:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801ee64:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801ee66:	6420      	str	r0, [r4, #64]	@ 0x40
 801ee68:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801ee6a:	6320      	str	r0, [r4, #48]	@ 0x30
 801ee6c:	6360      	str	r0, [r4, #52]	@ 0x34
 801ee6e:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801ee70:	64a0      	str	r0, [r4, #72]	@ 0x48
 801ee72:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801ee74:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801ee76:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801ee78:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801ee7a:	08db      	lsrs	r3, r3, #3
 801ee7c:	e73f      	b.n	801ecfe <lfs_init+0x162>
 801ee7e:	bf00      	nop
 801ee80:	08039f48 	.word	0x08039f48
 801ee84:	0803a728 	.word	0x0803a728
 801ee88:	080399a8 	.word	0x080399a8
 801ee8c:	08039f64 	.word	0x08039f64
 801ee90:	08039f80 	.word	0x08039f80
 801ee94:	08039f9c 	.word	0x08039f9c
 801ee98:	08039fcc 	.word	0x08039fcc
 801ee9c:	08039ffc 	.word	0x08039ffc
 801eea0:	0803a030 	.word	0x0803a030
 801eea4:	0803a04c 	.word	0x0803a04c
 801eea8:	0803a098 	.word	0x0803a098
 801eeac:	0803a0b4 	.word	0x0803a0b4
 801eeb0:	0803a108 	.word	0x0803a108
 801eeb4:	0803a168 	.word	0x0803a168
 801eeb8:	0803a188 	.word	0x0803a188
 801eebc:	0803a1a4 	.word	0x0803a1a4
 801eec0:	0803a1c8 	.word	0x0803a1c8
 801eec4:	0803a1e4 	.word	0x0803a1e4
 801eec8:	0803a214 	.word	0x0803a214
 801eecc:	0803a26c 	.word	0x0803a26c
 801eed0:	0803a2bc 	.word	0x0803a2bc

0801eed4 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801eed4:	b570      	push	{r4, r5, r6, lr}
 801eed6:	b096      	sub	sp, #88	@ 0x58
 801eed8:	4604      	mov	r4, r0
 801eeda:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801eedc:	f7ff fe5e 	bl	801eb9c <lfs_init>
        if (err) {
 801eee0:	4606      	mov	r6, r0
 801eee2:	b9f0      	cbnz	r0, 801ef22 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801eee4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801eee6:	b1fb      	cbz	r3, 801ef28 <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801eee8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801eeea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801eeec:	2100      	movs	r1, #0
 801eeee:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801eef0:	f00e f8fe 	bl	802d0f0 <memset>
        lfs->lookahead.start = 0;
 801eef4:	2200      	movs	r2, #0
 801eef6:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801eef8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801eefa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801eefc:	00db      	lsls	r3, r3, #3
 801eefe:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801ef00:	428b      	cmp	r3, r1
 801ef02:	bf28      	it	cs
 801ef04:	460b      	movcs	r3, r1
 801ef06:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801ef08:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801ef0a:	4620      	mov	r0, r4
 801ef0c:	f7fc fbda 	bl	801b6c4 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801ef10:	a906      	add	r1, sp, #24
 801ef12:	4620      	mov	r0, r4
 801ef14:	f7fe f820 	bl	801cf58 <lfs_dir_alloc>
        if (err) {
 801ef18:	4606      	mov	r6, r0
 801ef1a:	b160      	cbz	r0, 801ef36 <lfs_format_+0x62>
    lfs_deinit(lfs);
 801ef1c:	4620      	mov	r0, r4
 801ef1e:	f7ff fe23 	bl	801eb68 <lfs_deinit>
}
 801ef22:	4630      	mov	r0, r6
 801ef24:	b016      	add	sp, #88	@ 0x58
 801ef26:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801ef28:	4b20      	ldr	r3, [pc, #128]	@ (801efac <lfs_format_+0xd8>)
 801ef2a:	4a21      	ldr	r2, [pc, #132]	@ (801efb0 <lfs_format_+0xdc>)
 801ef2c:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801ef30:	4820      	ldr	r0, [pc, #128]	@ (801efb4 <lfs_format_+0xe0>)
 801ef32:	f00b fb8b 	bl	802a64c <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801ef36:	4620      	mov	r0, r4
 801ef38:	f7fc fbb6 	bl	801b6a8 <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801ef3c:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801ef3e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801ef40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801ef42:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801ef44:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801ef46:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801ef48:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801ef4a:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801ef4c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801ef4e:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801ef50:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801ef52:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801ef54:	4b18      	ldr	r3, [pc, #96]	@ (801efb8 <lfs_format_+0xe4>)
 801ef56:	930e      	str	r3, [sp, #56]	@ 0x38
 801ef58:	2300      	movs	r3, #0
 801ef5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ef5c:	4b17      	ldr	r3, [pc, #92]	@ (801efbc <lfs_format_+0xe8>)
 801ef5e:	9310      	str	r3, [sp, #64]	@ 0x40
 801ef60:	4b17      	ldr	r3, [pc, #92]	@ (801efc0 <lfs_format_+0xec>)
 801ef62:	9311      	str	r3, [sp, #68]	@ 0x44
 801ef64:	4b17      	ldr	r3, [pc, #92]	@ (801efc4 <lfs_format_+0xf0>)
 801ef66:	9312      	str	r3, [sp, #72]	@ 0x48
 801ef68:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801ef6c:	2303      	movs	r3, #3
 801ef6e:	aa0e      	add	r2, sp, #56	@ 0x38
 801ef70:	a906      	add	r1, sp, #24
 801ef72:	4620      	mov	r0, r4
 801ef74:	f7ff fcb2 	bl	801e8dc <lfs_dir_commit>
        if (err) {
 801ef78:	4606      	mov	r6, r0
 801ef7a:	2800      	cmp	r0, #0
 801ef7c:	d1ce      	bne.n	801ef1c <lfs_format_+0x48>
        root.erased = false;
 801ef7e:	2200      	movs	r2, #0
 801ef80:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801ef84:	4613      	mov	r3, r2
 801ef86:	a906      	add	r1, sp, #24
 801ef88:	4620      	mov	r0, r4
 801ef8a:	f7ff fca7 	bl	801e8dc <lfs_dir_commit>
        if (err) {
 801ef8e:	4606      	mov	r6, r0
 801ef90:	2800      	cmp	r0, #0
 801ef92:	d1c3      	bne.n	801ef1c <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801ef94:	2300      	movs	r3, #0
 801ef96:	9314      	str	r3, [sp, #80]	@ 0x50
 801ef98:	2301      	movs	r3, #1
 801ef9a:	9315      	str	r3, [sp, #84]	@ 0x54
 801ef9c:	aa14      	add	r2, sp, #80	@ 0x50
 801ef9e:	a906      	add	r1, sp, #24
 801efa0:	4620      	mov	r0, r4
 801efa2:	f7fd fe6b 	bl	801cc7c <lfs_dir_fetch>
 801efa6:	4606      	mov	r6, r0
        if (err) {
 801efa8:	e7b8      	b.n	801ef1c <lfs_format_+0x48>
 801efaa:	bf00      	nop
 801efac:	0803a34c 	.word	0x0803a34c
 801efb0:	0803a734 	.word	0x0803a734
 801efb4:	080399a8 	.word	0x080399a8
 801efb8:	40100000 	.word	0x40100000
 801efbc:	0ff00008 	.word	0x0ff00008
 801efc0:	0803a364 	.word	0x0803a364
 801efc4:	20100018 	.word	0x20100018

0801efc8 <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801efc8:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801efca:	f7ff fdcd 	bl	801eb68 <lfs_deinit>
}
 801efce:	bd08      	pop	{r3, pc}

0801efd0 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efd4:	b09b      	sub	sp, #108	@ 0x6c
 801efd6:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801efd8:	f7ff fde0 	bl	801eb9c <lfs_init>
    if (err) {
 801efdc:	9005      	str	r0, [sp, #20]
 801efde:	b9d8      	cbnz	r0, 801f018 <lfs_mount_+0x48>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801efe0:	2220      	movs	r2, #32
 801efe2:	2100      	movs	r1, #0
 801efe4:	a80f      	add	r0, sp, #60	@ 0x3c
 801efe6:	f00e f883 	bl	802d0f0 <memset>
 801efea:	2501      	movs	r5, #1
 801efec:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801efee:	4aa1      	ldr	r2, [pc, #644]	@ (801f274 <lfs_mount_+0x2a4>)
 801eff0:	ab0d      	add	r3, sp, #52	@ 0x34
 801eff2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801eff6:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801effa:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 801effc:	e073      	b.n	801f0e6 <lfs_mount_+0x116>
            LFS_WARN("Cycle detected in tail list");
 801effe:	4b9e      	ldr	r3, [pc, #632]	@ (801f278 <lfs_mount_+0x2a8>)
 801f000:	f241 123d 	movw	r2, #4413	@ 0x113d
 801f004:	499d      	ldr	r1, [pc, #628]	@ (801f27c <lfs_mount_+0x2ac>)
 801f006:	489e      	ldr	r0, [pc, #632]	@ (801f280 <lfs_mount_+0x2b0>)
 801f008:	f00b fb54 	bl	802a6b4 <printf>
            err = LFS_ERR_CORRUPT;
 801f00c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801f010:	9305      	str	r3, [sp, #20]
    lfs_unmount_(lfs);
 801f012:	4620      	mov	r0, r4
 801f014:	f7ff ffd8 	bl	801efc8 <lfs_unmount_>
}
 801f018:	9805      	ldr	r0, [sp, #20]
 801f01a:	b01b      	add	sp, #108	@ 0x6c
 801f01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 801f020:	970d      	str	r7, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801f022:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f024:	930e      	str	r3, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801f026:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 801f028:	2500      	movs	r5, #0
 801f02a:	e075      	b.n	801f118 <lfs_mount_+0x148>
                LFS_ERROR("Invalid version "
 801f02c:	4620      	mov	r0, r4
 801f02e:	f7fc fb44 	bl	801b6ba <lfs_fs_disk_version_minor>
 801f032:	4b91      	ldr	r3, [pc, #580]	@ (801f278 <lfs_mount_+0x2a8>)
 801f034:	9303      	str	r3, [sp, #12]
 801f036:	9002      	str	r0, [sp, #8]
 801f038:	f8cd 9004 	str.w	r9, [sp, #4]
 801f03c:	b2bf      	uxth	r7, r7
 801f03e:	9700      	str	r7, [sp, #0]
 801f040:	4643      	mov	r3, r8
 801f042:	f241 126b 	movw	r2, #4459	@ 0x116b
 801f046:	498d      	ldr	r1, [pc, #564]	@ (801f27c <lfs_mount_+0x2ac>)
 801f048:	488e      	ldr	r0, [pc, #568]	@ (801f284 <lfs_mount_+0x2b4>)
 801f04a:	f00b fb33 	bl	802a6b4 <printf>
                err = LFS_ERR_INVAL;
 801f04e:	f06f 0315 	mvn.w	r3, #21
 801f052:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801f054:	e7dd      	b.n	801f012 <lfs_mount_+0x42>
                LFS_DEBUG("Found older minor version "
 801f056:	4b88      	ldr	r3, [pc, #544]	@ (801f278 <lfs_mount_+0x2a8>)
 801f058:	9303      	str	r3, [sp, #12]
 801f05a:	9002      	str	r0, [sp, #8]
 801f05c:	f8cd 9004 	str.w	r9, [sp, #4]
 801f060:	b2bf      	uxth	r7, r7
 801f062:	9700      	str	r7, [sp, #0]
 801f064:	4643      	mov	r3, r8
 801f066:	f241 127a 	movw	r2, #4474	@ 0x117a
 801f06a:	4984      	ldr	r1, [pc, #528]	@ (801f27c <lfs_mount_+0x2ac>)
 801f06c:	4886      	ldr	r0, [pc, #536]	@ (801f288 <lfs_mount_+0x2b8>)
 801f06e:	f00b fb21 	bl	802a6b4 <printf>
                needssuperblock = true;
 801f072:	2301      	movs	r3, #1
 801f074:	9304      	str	r3, [sp, #16]
 801f076:	e08f      	b.n	801f198 <lfs_mount_+0x1c8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801f078:	497f      	ldr	r1, [pc, #508]	@ (801f278 <lfs_mount_+0x2a8>)
 801f07a:	9101      	str	r1, [sp, #4]
 801f07c:	9200      	str	r2, [sp, #0]
 801f07e:	f241 1289 	movw	r2, #4489	@ 0x1189
 801f082:	497e      	ldr	r1, [pc, #504]	@ (801f27c <lfs_mount_+0x2ac>)
 801f084:	4881      	ldr	r0, [pc, #516]	@ (801f28c <lfs_mount_+0x2bc>)
 801f086:	f00b fb15 	bl	802a6b4 <printf>
                    err = LFS_ERR_INVAL;
 801f08a:	f06f 0315 	mvn.w	r3, #21
 801f08e:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801f090:	e7bf      	b.n	801f012 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801f092:	4979      	ldr	r1, [pc, #484]	@ (801f278 <lfs_mount_+0x2a8>)
 801f094:	9101      	str	r1, [sp, #4]
 801f096:	9200      	str	r2, [sp, #0]
 801f098:	f241 1294 	movw	r2, #4500	@ 0x1194
 801f09c:	4977      	ldr	r1, [pc, #476]	@ (801f27c <lfs_mount_+0x2ac>)
 801f09e:	487c      	ldr	r0, [pc, #496]	@ (801f290 <lfs_mount_+0x2c0>)
 801f0a0:	f00b fb08 	bl	802a6b4 <printf>
                    err = LFS_ERR_INVAL;
 801f0a4:	f06f 0315 	mvn.w	r3, #21
 801f0a8:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801f0aa:	e7b2      	b.n	801f012 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801f0ac:	4972      	ldr	r1, [pc, #456]	@ (801f278 <lfs_mount_+0x2a8>)
 801f0ae:	9101      	str	r1, [sp, #4]
 801f0b0:	9200      	str	r2, [sp, #0]
 801f0b2:	f241 129f 	movw	r2, #4511	@ 0x119f
 801f0b6:	4971      	ldr	r1, [pc, #452]	@ (801f27c <lfs_mount_+0x2ac>)
 801f0b8:	4876      	ldr	r0, [pc, #472]	@ (801f294 <lfs_mount_+0x2c4>)
 801f0ba:	f00b fafb 	bl	802a6b4 <printf>
                    err = LFS_ERR_INVAL;
 801f0be:	f06f 0315 	mvn.w	r3, #21
 801f0c2:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801f0c4:	e7a5      	b.n	801f012 <lfs_mount_+0x42>
            lfs->block_count = superblock.block_count;
 801f0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0c8:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 801f0ca:	9b08      	ldr	r3, [sp, #32]
 801f0cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801f0ce:	4293      	cmp	r3, r2
 801f0d0:	f040 8096 	bne.w	801f200 <lfs_mount_+0x230>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801f0d4:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801f0d8:	a90f      	add	r1, sp, #60	@ 0x3c
 801f0da:	4620      	mov	r0, r4
 801f0dc:	f7fc fdee 	bl	801bcbc <lfs_dir_getgstate>
        if (err) {
 801f0e0:	2800      	cmp	r0, #0
 801f0e2:	f040 809e 	bne.w	801f222 <lfs_mount_+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801f0e6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f0e8:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801f0ec:	f000 809d 	beq.w	801f22a <lfs_mount_+0x25a>
 801f0f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f0f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f0f6:	f000 8096 	beq.w	801f226 <lfs_mount_+0x256>
 801f0fa:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 801f0fc:	f013 0301 	ands.w	r3, r3, #1
 801f100:	f040 8095 	bne.w	801f22e <lfs_mount_+0x25e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801f104:	a90d      	add	r1, sp, #52	@ 0x34
 801f106:	a815      	add	r0, sp, #84	@ 0x54
 801f108:	f7fc fa60 	bl	801b5cc <lfs_pair_issync>
 801f10c:	9004      	str	r0, [sp, #16]
 801f10e:	2800      	cmp	r0, #0
 801f110:	f47f af75 	bne.w	801effe <lfs_mount_+0x2e>
        if (tortoise_i == tortoise_period) {
 801f114:	42b5      	cmp	r5, r6
 801f116:	d083      	beq.n	801f020 <lfs_mount_+0x50>
        tortoise_i += 1;
 801f118:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801f11a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801f11c:	4b5e      	ldr	r3, [pc, #376]	@ (801f298 <lfs_mount_+0x2c8>)
 801f11e:	9318      	str	r3, [sp, #96]	@ 0x60
 801f120:	2308      	movs	r3, #8
 801f122:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801f124:	ab17      	add	r3, sp, #92	@ 0x5c
 801f126:	9303      	str	r3, [sp, #12]
 801f128:	4b5c      	ldr	r3, [pc, #368]	@ (801f29c <lfs_mount_+0x2cc>)
 801f12a:	9302      	str	r3, [sp, #8]
 801f12c:	2300      	movs	r3, #0
 801f12e:	9301      	str	r3, [sp, #4]
 801f130:	4b5b      	ldr	r3, [pc, #364]	@ (801f2a0 <lfs_mount_+0x2d0>)
 801f132:	9300      	str	r3, [sp, #0]
 801f134:	4b5b      	ldr	r3, [pc, #364]	@ (801f2a4 <lfs_mount_+0x2d4>)
 801f136:	aa15      	add	r2, sp, #84	@ 0x54
 801f138:	a90f      	add	r1, sp, #60	@ 0x3c
 801f13a:	4620      	mov	r0, r4
 801f13c:	f7fd fabe 	bl	801c6bc <lfs_dir_fetchmatch>
        if (tag < 0) {
 801f140:	2800      	cmp	r0, #0
 801f142:	db6c      	blt.n	801f21e <lfs_mount_+0x24e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801f144:	2800      	cmp	r0, #0
 801f146:	d0c5      	beq.n	801f0d4 <lfs_mount_+0x104>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801f148:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801f14c:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801f150:	d0c0      	beq.n	801f0d4 <lfs_mount_+0x104>
            lfs->root[0] = dir.pair[0];
 801f152:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f154:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 801f156:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f158:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801f15a:	ab07      	add	r3, sp, #28
 801f15c:	9300      	str	r3, [sp, #0]
 801f15e:	4b52      	ldr	r3, [pc, #328]	@ (801f2a8 <lfs_mount_+0x2d8>)
 801f160:	4a50      	ldr	r2, [pc, #320]	@ (801f2a4 <lfs_mount_+0x2d4>)
 801f162:	a90f      	add	r1, sp, #60	@ 0x3c
 801f164:	4620      	mov	r0, r4
 801f166:	f7fc fd9b 	bl	801bca0 <lfs_dir_get>
            if (tag < 0) {
 801f16a:	2800      	cmp	r0, #0
 801f16c:	db55      	blt.n	801f21a <lfs_mount_+0x24a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801f16e:	9f07      	ldr	r7, [sp, #28]
 801f170:	ea4f 4817 	mov.w	r8, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801f174:	fa1f fa87 	uxth.w	sl, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 801f178:	4620      	mov	r0, r4
 801f17a:	f7fc fa99 	bl	801b6b0 <lfs_fs_disk_version_major>
 801f17e:	4681      	mov	r9, r0
 801f180:	4540      	cmp	r0, r8
 801f182:	f47f af53 	bne.w	801f02c <lfs_mount_+0x5c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801f186:	4620      	mov	r0, r4
 801f188:	f7fc fa97 	bl	801b6ba <lfs_fs_disk_version_minor>
 801f18c:	4550      	cmp	r0, sl
 801f18e:	f4ff af4d 	bcc.w	801f02c <lfs_mount_+0x5c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801f192:	4550      	cmp	r0, sl
 801f194:	f63f af5f 	bhi.w	801f056 <lfs_mount_+0x86>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801f198:	9904      	ldr	r1, [sp, #16]
 801f19a:	4620      	mov	r0, r4
 801f19c:	f7fc fb2b 	bl	801b7f6 <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 801f1a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f1a2:	b123      	cbz	r3, 801f1ae <lfs_mount_+0x1de>
                if (superblock.name_max > lfs->name_max) {
 801f1a4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801f1a6:	4293      	cmp	r3, r2
 801f1a8:	f63f af66 	bhi.w	801f078 <lfs_mount_+0xa8>
                lfs->name_max = superblock.name_max;
 801f1ac:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 801f1ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f1b0:	b123      	cbz	r3, 801f1bc <lfs_mount_+0x1ec>
                if (superblock.file_max > lfs->file_max) {
 801f1b2:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801f1b4:	4293      	cmp	r3, r2
 801f1b6:	f63f af6c 	bhi.w	801f092 <lfs_mount_+0xc2>
                lfs->file_max = superblock.file_max;
 801f1ba:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 801f1bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f1be:	b14b      	cbz	r3, 801f1d4 <lfs_mount_+0x204>
                if (superblock.attr_max > lfs->attr_max) {
 801f1c0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f1c2:	4293      	cmp	r3, r2
 801f1c4:	f63f af72 	bhi.w	801f0ac <lfs_mount_+0xdc>
                lfs->attr_max = superblock.attr_max;
 801f1c8:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801f1ca:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801f1cc:	4293      	cmp	r3, r2
 801f1ce:	bf28      	it	cs
 801f1d0:	4613      	movcs	r3, r2
 801f1d2:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 801f1d4:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801f1d6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801f1d8:	2900      	cmp	r1, #0
 801f1da:	f43f af74 	beq.w	801f0c6 <lfs_mount_+0xf6>
                    && superblock.block_count != lfs->cfg->block_count) {
 801f1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1e0:	4299      	cmp	r1, r3
 801f1e2:	f43f af70 	beq.w	801f0c6 <lfs_mount_+0xf6>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801f1e6:	4a24      	ldr	r2, [pc, #144]	@ (801f278 <lfs_mount_+0x2a8>)
 801f1e8:	9201      	str	r2, [sp, #4]
 801f1ea:	9100      	str	r1, [sp, #0]
 801f1ec:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801f1f0:	4922      	ldr	r1, [pc, #136]	@ (801f27c <lfs_mount_+0x2ac>)
 801f1f2:	482e      	ldr	r0, [pc, #184]	@ (801f2ac <lfs_mount_+0x2dc>)
 801f1f4:	f00b fa5e 	bl	802a6b4 <printf>
                err = LFS_ERR_INVAL;
 801f1f8:	f06f 0315 	mvn.w	r3, #21
 801f1fc:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801f1fe:	e708      	b.n	801f012 <lfs_mount_+0x42>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801f200:	491d      	ldr	r1, [pc, #116]	@ (801f278 <lfs_mount_+0x2a8>)
 801f202:	9101      	str	r1, [sp, #4]
 801f204:	9200      	str	r2, [sp, #0]
 801f206:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801f20a:	491c      	ldr	r1, [pc, #112]	@ (801f27c <lfs_mount_+0x2ac>)
 801f20c:	4828      	ldr	r0, [pc, #160]	@ (801f2b0 <lfs_mount_+0x2e0>)
 801f20e:	f00b fa51 	bl	802a6b4 <printf>
                err = LFS_ERR_INVAL;
 801f212:	f06f 0315 	mvn.w	r3, #21
 801f216:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801f218:	e6fb      	b.n	801f012 <lfs_mount_+0x42>
                err = tag;
 801f21a:	9005      	str	r0, [sp, #20]
 801f21c:	e6f9      	b.n	801f012 <lfs_mount_+0x42>
            err = tag;
 801f21e:	9005      	str	r0, [sp, #20]
 801f220:	e6f7      	b.n	801f012 <lfs_mount_+0x42>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801f222:	9005      	str	r0, [sp, #20]
 801f224:	e6f5      	b.n	801f012 <lfs_mount_+0x42>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801f226:	2301      	movs	r3, #1
 801f228:	e768      	b.n	801f0fc <lfs_mount_+0x12c>
 801f22a:	2301      	movs	r3, #1
 801f22c:	e766      	b.n	801f0fc <lfs_mount_+0x12c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801f22e:	f104 0030 	add.w	r0, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 801f232:	9a05      	ldr	r2, [sp, #20]
 801f234:	2a02      	cmp	r2, #2
 801f236:	dc05      	bgt.n	801f244 <lfs_mount_+0x274>
        if (((uint32_t*)a)[i] != 0) {
 801f238:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801f23c:	b909      	cbnz	r1, 801f242 <lfs_mount_+0x272>
    for (int i = 0; i < 3; i++) {
 801f23e:	3201      	adds	r2, #1
 801f240:	e7f8      	b.n	801f234 <lfs_mount_+0x264>
            return false;
 801f242:	2300      	movs	r3, #0
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801f244:	b3b3      	cbz	r3, 801f2b4 <lfs_mount_+0x2e4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801f246:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f248:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801f24c:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801f24e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801f252:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801f256:	ca07      	ldmia	r2, {r0, r1, r2}
 801f258:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801f25c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801f25e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801f260:	fbb3 f1f2 	udiv	r1, r3, r2
 801f264:	fb02 3311 	mls	r3, r2, r1, r3
 801f268:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801f26a:	4620      	mov	r0, r4
 801f26c:	f7fc fa2d 	bl	801b6ca <lfs_alloc_drop>
    return 0;
 801f270:	e6d2      	b.n	801f018 <lfs_mount_+0x48>
 801f272:	bf00      	nop
 801f274:	08036434 	.word	0x08036434
 801f278:	08037490 	.word	0x08037490
 801f27c:	080399a8 	.word	0x080399a8
 801f280:	08039b68 	.word	0x08039b68
 801f284:	0803a370 	.word	0x0803a370
 801f288:	0803a3a8 	.word	0x0803a3a8
 801f28c:	0803a3e8 	.word	0x0803a3e8
 801f290:	0803a41c 	.word	0x0803a41c
 801f294:	0803a450 	.word	0x0803a450
 801f298:	0803a364 	.word	0x0803a364
 801f29c:	0801c47d 	.word	0x0801c47d
 801f2a0:	0ff00008 	.word	0x0ff00008
 801f2a4:	7ffffc00 	.word	0x7ffffc00
 801f2a8:	20100018 	.word	0x20100018
 801f2ac:	0803a484 	.word	0x0803a484
 801f2b0:	0803a4b8 	.word	0x0803a4b8
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 801f2b4:	4b06      	ldr	r3, [pc, #24]	@ (801f2d0 <lfs_mount_+0x300>)
 801f2b6:	9302      	str	r3, [sp, #8]
 801f2b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801f2ba:	9301      	str	r3, [sp, #4]
 801f2bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f2be:	9300      	str	r3, [sp, #0]
 801f2c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f2c2:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 801f2c6:	4903      	ldr	r1, [pc, #12]	@ (801f2d4 <lfs_mount_+0x304>)
 801f2c8:	4803      	ldr	r0, [pc, #12]	@ (801f2d8 <lfs_mount_+0x308>)
 801f2ca:	f00b f9f3 	bl	802a6b4 <printf>
 801f2ce:	e7ba      	b.n	801f246 <lfs_mount_+0x276>
 801f2d0:	08037490 	.word	0x08037490
 801f2d4:	080399a8 	.word	0x080399a8
 801f2d8:	0803a4e8 	.word	0x0803a4e8

0801f2dc <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801f2dc:	b570      	push	{r4, r5, r6, lr}
 801f2de:	4606      	mov	r6, r0
 801f2e0:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 801f2e2:	f7ff fbd7 	bl	801ea94 <lfs_file_sync_>
 801f2e6:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801f2e8:	4621      	mov	r1, r4
 801f2ea:	4630      	mov	r0, r6
 801f2ec:	f7fc f9cd 	bl	801b68a <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 801f2f0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801f2f2:	681b      	ldr	r3, [r3, #0]
 801f2f4:	b10b      	cbz	r3, 801f2fa <lfs_file_close_+0x1e>
}
 801f2f6:	4628      	mov	r0, r5
 801f2f8:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 801f2fa:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801f2fc:	f7fb ff2e 	bl	801b15c <vPortFree>
    return err;
 801f300:	e7f9      	b.n	801f2f6 <lfs_file_close_+0x1a>
	...

0801f304 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 801f304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f308:	b08d      	sub	sp, #52	@ 0x34
 801f30a:	4682      	mov	sl, r0
 801f30c:	4688      	mov	r8, r1
 801f30e:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 801f310:	6812      	ldr	r2, [r2, #0]
 801f312:	9205      	str	r2, [sp, #20]
    if (id) {
 801f314:	9306      	str	r3, [sp, #24]
 801f316:	b11b      	cbz	r3, 801f320 <lfs_dir_find+0x1c>
 801f318:	461a      	mov	r2, r3
        *id = 0x3ff;
 801f31a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f31e:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 801f320:	f8da 3020 	ldr.w	r3, [sl, #32]
 801f324:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 801f328:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801f32c:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801f330:	4e4d      	ldr	r6, [pc, #308]	@ (801f468 <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 801f332:	4d4e      	ldr	r5, [pc, #312]	@ (801f46c <lfs_dir_find+0x168>)
 801f334:	4629      	mov	r1, r5
 801f336:	9f05      	ldr	r7, [sp, #20]
 801f338:	4638      	mov	r0, r7
 801f33a:	f00d ff49 	bl	802d1d0 <strspn>
 801f33e:	4604      	mov	r4, r0
 801f340:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 801f344:	4629      	mov	r1, r5
 801f346:	4648      	mov	r0, r9
 801f348:	f00d fef6 	bl	802d138 <strcspn>
 801f34c:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801f34e:	2801      	cmp	r0, #1
 801f350:	d00a      	beq.n	801f368 <lfs_dir_find+0x64>
 801f352:	2d02      	cmp	r5, #2
 801f354:	d00c      	beq.n	801f370 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 801f356:	eb09 0305 	add.w	r3, r9, r5
 801f35a:	9305      	str	r3, [sp, #20]
 801f35c:	469b      	mov	fp, r3
        int depth = 1;
 801f35e:	2701      	movs	r7, #1
 801f360:	e013      	b.n	801f38a <lfs_dir_find+0x86>
 801f362:	46b2      	mov	sl, r6
 801f364:	4606      	mov	r6, r0
 801f366:	e7e4      	b.n	801f332 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801f368:	5d3b      	ldrb	r3, [r7, r4]
 801f36a:	2b2e      	cmp	r3, #46	@ 0x2e
 801f36c:	d1f1      	bne.n	801f352 <lfs_dir_find+0x4e>
 801f36e:	e006      	b.n	801f37e <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801f370:	2202      	movs	r2, #2
 801f372:	493f      	ldr	r1, [pc, #252]	@ (801f470 <lfs_dir_find+0x16c>)
 801f374:	4648      	mov	r0, r9
 801f376:	f00d fe27 	bl	802cfc8 <memcmp>
 801f37a:	2800      	cmp	r0, #0
 801f37c:	d1eb      	bne.n	801f356 <lfs_dir_find+0x52>
            name += namelen;
 801f37e:	eb09 0305 	add.w	r3, r9, r5
 801f382:	9305      	str	r3, [sp, #20]
            goto nextname;
 801f384:	e7d5      	b.n	801f332 <lfs_dir_find+0x2e>
                depth += 1;
 801f386:	3701      	adds	r7, #1
            suffix += sufflen;
 801f388:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 801f38a:	4c38      	ldr	r4, [pc, #224]	@ (801f46c <lfs_dir_find+0x168>)
 801f38c:	4621      	mov	r1, r4
 801f38e:	4658      	mov	r0, fp
 801f390:	f00d ff1e 	bl	802d1d0 <strspn>
 801f394:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 801f396:	4621      	mov	r1, r4
 801f398:	4658      	mov	r0, fp
 801f39a:	f00d fecd 	bl	802d138 <strcspn>
            if (sufflen == 0) {
 801f39e:	4604      	mov	r4, r0
 801f3a0:	b170      	cbz	r0, 801f3c0 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801f3a2:	2802      	cmp	r0, #2
 801f3a4:	d1ef      	bne.n	801f386 <lfs_dir_find+0x82>
 801f3a6:	2202      	movs	r2, #2
 801f3a8:	4931      	ldr	r1, [pc, #196]	@ (801f470 <lfs_dir_find+0x16c>)
 801f3aa:	4658      	mov	r0, fp
 801f3ac:	f00d fe0c 	bl	802cfc8 <memcmp>
 801f3b0:	2800      	cmp	r0, #0
 801f3b2:	d1e8      	bne.n	801f386 <lfs_dir_find+0x82>
                if (depth == 0) {
 801f3b4:	3f01      	subs	r7, #1
 801f3b6:	d1e7      	bne.n	801f388 <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 801f3b8:	eb0b 0304 	add.w	r3, fp, r4
 801f3bc:	9305      	str	r3, [sp, #20]
                    goto nextname;
 801f3be:	e7b8      	b.n	801f332 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 801f3c0:	f899 3000 	ldrb.w	r3, [r9]
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	d04a      	beq.n	801f45e <lfs_dir_find+0x15a>
        *path = name;
 801f3c8:	9b07      	ldr	r3, [sp, #28]
 801f3ca:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 801f3ce:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801f3d2:	2b02      	cmp	r3, #2
 801f3d4:	d13f      	bne.n	801f456 <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 801f3d6:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 801f3da:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f3de:	429e      	cmp	r6, r3
 801f3e0:	d102      	bne.n	801f3e8 <lfs_dir_find+0xe4>
 801f3e2:	464c      	mov	r4, r9
 801f3e4:	4656      	mov	r6, sl
 801f3e6:	e029      	b.n	801f43c <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801f3e8:	02b6      	lsls	r6, r6, #10
 801f3ea:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801f3ee:	9300      	str	r3, [sp, #0]
 801f3f0:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 801f3f4:	f043 0308 	orr.w	r3, r3, #8
 801f3f8:	4a1e      	ldr	r2, [pc, #120]	@ (801f474 <lfs_dir_find+0x170>)
 801f3fa:	4641      	mov	r1, r8
 801f3fc:	4650      	mov	r0, sl
 801f3fe:	f7fc fc4f 	bl	801bca0 <lfs_dir_get>
            if (res < 0) {
 801f402:	1e06      	subs	r6, r0, #0
 801f404:	db2b      	blt.n	801f45e <lfs_dir_find+0x15a>
 801f406:	464c      	mov	r4, r9
 801f408:	4656      	mov	r6, sl
 801f40a:	e017      	b.n	801f43c <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801f40c:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801f40e:	9609      	str	r6, [sp, #36]	@ 0x24
 801f410:	940a      	str	r4, [sp, #40]	@ 0x28
 801f412:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801f414:	aa09      	add	r2, sp, #36	@ 0x24
 801f416:	9203      	str	r2, [sp, #12]
 801f418:	4a17      	ldr	r2, [pc, #92]	@ (801f478 <lfs_dir_find+0x174>)
 801f41a:	9202      	str	r2, [sp, #8]
 801f41c:	9301      	str	r3, [sp, #4]
 801f41e:	9500      	str	r5, [sp, #0]
 801f420:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801f424:	463a      	mov	r2, r7
 801f426:	4641      	mov	r1, r8
 801f428:	4630      	mov	r0, r6
 801f42a:	f7fd f947 	bl	801c6bc <lfs_dir_fetchmatch>
            if (tag < 0) {
 801f42e:	2800      	cmp	r0, #0
 801f430:	db14      	blt.n	801f45c <lfs_dir_find+0x158>
            if (tag) {
 801f432:	2800      	cmp	r0, #0
 801f434:	d195      	bne.n	801f362 <lfs_dir_find+0x5e>
            if (!dir->split) {
 801f436:	f898 3017 	ldrb.w	r3, [r8, #23]
 801f43a:	b14b      	cbz	r3, 801f450 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801f43c:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 801f440:	212f      	movs	r1, #47	@ 0x2f
 801f442:	4620      	mov	r0, r4
 801f444:	f00d fe6b 	bl	802d11e <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801f448:	2800      	cmp	r0, #0
 801f44a:	d0df      	beq.n	801f40c <lfs_dir_find+0x108>
 801f44c:	2300      	movs	r3, #0
 801f44e:	e7de      	b.n	801f40e <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 801f450:	f06f 0601 	mvn.w	r6, #1
 801f454:	e003      	b.n	801f45e <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 801f456:	f06f 0613 	mvn.w	r6, #19
 801f45a:	e000      	b.n	801f45e <lfs_dir_find+0x15a>
 801f45c:	4606      	mov	r6, r0
}
 801f45e:	4630      	mov	r0, r6
 801f460:	b00d      	add	sp, #52	@ 0x34
 801f462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f466:	bf00      	nop
 801f468:	002ffc00 	.word	0x002ffc00
 801f46c:	0803ad60 	.word	0x0803ad60
 801f470:	0803a520 	.word	0x0803a520
 801f474:	700ffc00 	.word	0x700ffc00
 801f478:	0801c47d 	.word	0x0801c47d

0801f47c <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 801f47c:	b570      	push	{r4, r5, r6, lr}
 801f47e:	b09a      	sub	sp, #104	@ 0x68
 801f480:	4604      	mov	r4, r0
 801f482:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 801f484:	f7ff fad2 	bl	801ea2c <lfs_fs_forceconsistency>
    if (err) {
 801f488:	4603      	mov	r3, r0
 801f48a:	b110      	cbz	r0, 801f492 <lfs_remove_+0x16>
}
 801f48c:	4618      	mov	r0, r3
 801f48e:	b01a      	add	sp, #104	@ 0x68
 801f490:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801f492:	2300      	movs	r3, #0
 801f494:	aa03      	add	r2, sp, #12
 801f496:	a910      	add	r1, sp, #64	@ 0x40
 801f498:	4620      	mov	r0, r4
 801f49a:	f7ff ff33 	bl	801f304 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801f49e:	1e03      	subs	r3, r0, #0
 801f4a0:	dbf4      	blt.n	801f48c <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 801f4a2:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801f4a6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801f4aa:	4295      	cmp	r5, r2
 801f4ac:	d031      	beq.n	801f512 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 801f4ae:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801f4b0:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 801f4b2:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801f4b6:	2e02      	cmp	r6, #2
 801f4b8:	d02e      	beq.n	801f518 <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 801f4ba:	02ad      	lsls	r5, r5, #10
 801f4bc:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 801f4c0:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 801f4c4:	9518      	str	r5, [sp, #96]	@ 0x60
 801f4c6:	2300      	movs	r3, #0
 801f4c8:	9319      	str	r3, [sp, #100]	@ 0x64
 801f4ca:	2301      	movs	r3, #1
 801f4cc:	aa18      	add	r2, sp, #96	@ 0x60
 801f4ce:	a910      	add	r1, sp, #64	@ 0x40
 801f4d0:	4620      	mov	r0, r4
 801f4d2:	f7ff fa03 	bl	801e8dc <lfs_dir_commit>
    if (err) {
 801f4d6:	4603      	mov	r3, r0
 801f4d8:	2800      	cmp	r0, #0
 801f4da:	d142      	bne.n	801f562 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 801f4dc:	9a06      	ldr	r2, [sp, #24]
 801f4de:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801f4e0:	2e02      	cmp	r6, #2
 801f4e2:	d1d3      	bne.n	801f48c <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 801f4e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f4e8:	4620      	mov	r0, r4
 801f4ea:	f7fc f9db 	bl	801b8a4 <lfs_fs_preporphans>
        if (err) {
 801f4ee:	4603      	mov	r3, r0
 801f4f0:	2800      	cmp	r0, #0
 801f4f2:	d1cb      	bne.n	801f48c <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801f4f4:	aa10      	add	r2, sp, #64	@ 0x40
 801f4f6:	a908      	add	r1, sp, #32
 801f4f8:	4620      	mov	r0, r4
 801f4fa:	f7fe f8e5 	bl	801d6c8 <lfs_fs_pred>
        if (err) {
 801f4fe:	4603      	mov	r3, r0
 801f500:	2800      	cmp	r0, #0
 801f502:	d1c3      	bne.n	801f48c <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801f504:	aa08      	add	r2, sp, #32
 801f506:	a910      	add	r1, sp, #64	@ 0x40
 801f508:	4620      	mov	r0, r4
 801f50a:	f7ff faa3 	bl	801ea54 <lfs_dir_drop>
 801f50e:	4603      	mov	r3, r0
        if (err) {
 801f510:	e7bc      	b.n	801f48c <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801f512:	f06f 0315 	mvn.w	r3, #21
 801f516:	e7b9      	b.n	801f48c <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801f518:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801f51a:	aa04      	add	r2, sp, #16
 801f51c:	9200      	str	r2, [sp, #0]
 801f51e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f522:	f043 0308 	orr.w	r3, r3, #8
 801f526:	4a10      	ldr	r2, [pc, #64]	@ (801f568 <lfs_remove_+0xec>)
 801f528:	a910      	add	r1, sp, #64	@ 0x40
 801f52a:	4620      	mov	r0, r4
 801f52c:	f7fc fbb8 	bl	801bca0 <lfs_dir_get>
        if (res < 0) {
 801f530:	1e03      	subs	r3, r0, #0
 801f532:	dbab      	blt.n	801f48c <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801f534:	aa04      	add	r2, sp, #16
 801f536:	a908      	add	r1, sp, #32
 801f538:	4620      	mov	r0, r4
 801f53a:	f7fd fb9f 	bl	801cc7c <lfs_dir_fetch>
        if (err) {
 801f53e:	4603      	mov	r3, r0
 801f540:	2800      	cmp	r0, #0
 801f542:	d1a3      	bne.n	801f48c <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801f544:	2101      	movs	r1, #1
 801f546:	4620      	mov	r0, r4
 801f548:	f7fc f9ac 	bl	801b8a4 <lfs_fs_preporphans>
        if (err) {
 801f54c:	4603      	mov	r3, r0
 801f54e:	2800      	cmp	r0, #0
 801f550:	d19c      	bne.n	801f48c <lfs_remove_+0x10>
        dir.type = 0;
 801f552:	2300      	movs	r3, #0
 801f554:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 801f558:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 801f55c:	ab06      	add	r3, sp, #24
 801f55e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f560:	e7ab      	b.n	801f4ba <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 801f562:	9a06      	ldr	r2, [sp, #24]
 801f564:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 801f566:	e791      	b.n	801f48c <lfs_remove_+0x10>
 801f568:	700ffc00 	.word	0x700ffc00

0801f56c <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801f56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f56e:	b087      	sub	sp, #28
 801f570:	4607      	mov	r7, r0
 801f572:	460d      	mov	r5, r1
 801f574:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801f576:	f101 0608 	add.w	r6, r1, #8
 801f57a:	2300      	movs	r3, #0
 801f57c:	aa03      	add	r2, sp, #12
 801f57e:	4631      	mov	r1, r6
 801f580:	f7ff fec0 	bl	801f304 <lfs_dir_find>
    if (tag < 0) {
 801f584:	1e04      	subs	r4, r0, #0
 801f586:	db14      	blt.n	801f5b2 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 801f588:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801f58c:	2b02      	cmp	r3, #2
 801f58e:	d130      	bne.n	801f5f2 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 801f590:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 801f594:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f598:	429c      	cmp	r4, r3
 801f59a:	d10d      	bne.n	801f5b8 <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 801f59c:	6a3b      	ldr	r3, [r7, #32]
 801f59e:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 801f5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5a2:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801f5a4:	aa04      	add	r2, sp, #16
 801f5a6:	4631      	mov	r1, r6
 801f5a8:	4638      	mov	r0, r7
 801f5aa:	f7fd fb67 	bl	801cc7c <lfs_dir_fetch>
    if (err) {
 801f5ae:	4604      	mov	r4, r0
 801f5b0:	b188      	cbz	r0, 801f5d6 <lfs_dir_open_+0x6a>
}
 801f5b2:	4620      	mov	r0, r4
 801f5b4:	b007      	add	sp, #28
 801f5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801f5b8:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801f5ba:	ab04      	add	r3, sp, #16
 801f5bc:	9300      	str	r3, [sp, #0]
 801f5be:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 801f5c2:	f043 0308 	orr.w	r3, r3, #8
 801f5c6:	4a0c      	ldr	r2, [pc, #48]	@ (801f5f8 <lfs_dir_open_+0x8c>)
 801f5c8:	4631      	mov	r1, r6
 801f5ca:	4638      	mov	r0, r7
 801f5cc:	f7fc fb68 	bl	801bca0 <lfs_dir_get>
        if (res < 0) {
 801f5d0:	1e04      	subs	r4, r0, #0
 801f5d2:	dae7      	bge.n	801f5a4 <lfs_dir_open_+0x38>
 801f5d4:	e7ed      	b.n	801f5b2 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 801f5d6:	68ab      	ldr	r3, [r5, #8]
 801f5d8:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 801f5da:	68eb      	ldr	r3, [r5, #12]
 801f5dc:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 801f5de:	2300      	movs	r3, #0
 801f5e0:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 801f5e2:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 801f5e4:	2302      	movs	r3, #2
 801f5e6:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801f5e8:	4629      	mov	r1, r5
 801f5ea:	4638      	mov	r0, r7
 801f5ec:	f7fc f858 	bl	801b6a0 <lfs_mlist_append>
    return 0;
 801f5f0:	e7df      	b.n	801f5b2 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 801f5f2:	f06f 0413 	mvn.w	r4, #19
 801f5f6:	e7dc      	b.n	801f5b2 <lfs_dir_open_+0x46>
 801f5f8:	700ffc00 	.word	0x700ffc00

0801f5fc <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801f5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f600:	b0ad      	sub	sp, #180	@ 0xb4
 801f602:	4604      	mov	r4, r0
 801f604:	9103      	str	r1, [sp, #12]
 801f606:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 801f608:	f7ff fa10 	bl	801ea2c <lfs_fs_forceconsistency>
    if (err) {
 801f60c:	4606      	mov	r6, r0
 801f60e:	b118      	cbz	r0, 801f618 <lfs_rename_+0x1c>
}
 801f610:	4630      	mov	r0, r6
 801f612:	b02d      	add	sp, #180	@ 0xb4
 801f614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 801f618:	2300      	movs	r3, #0
 801f61a:	aa03      	add	r2, sp, #12
 801f61c:	a922      	add	r1, sp, #136	@ 0x88
 801f61e:	4620      	mov	r0, r4
 801f620:	f7ff fe70 	bl	801f304 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801f624:	2800      	cmp	r0, #0
 801f626:	f2c0 809e 	blt.w	801f766 <lfs_rename_+0x16a>
 801f62a:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 801f62c:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801f630:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f634:	429d      	cmp	r5, r3
 801f636:	f000 8094 	beq.w	801f762 <lfs_rename_+0x166>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 801f63a:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 801f63e:	aa02      	add	r2, sp, #8
 801f640:	a91a      	add	r1, sp, #104	@ 0x68
 801f642:	4620      	mov	r0, r4
 801f644:	f7ff fe5e 	bl	801f304 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801f648:	f1b0 0900 	subs.w	r9, r0, #0
 801f64c:	f2c0 808d 	blt.w	801f76a <lfs_rename_+0x16e>
    return (tag & 0x000ffc00) >> 10;
 801f650:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801f654:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f658:	429a      	cmp	r2, r3
 801f65a:	f000 8086 	beq.w	801f76a <lfs_rename_+0x16e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801f65e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f660:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f662:	429a      	cmp	r2, r3
 801f664:	d008      	beq.n	801f678 <lfs_rename_+0x7c>
 801f666:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801f668:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801f66a:	4281      	cmp	r1, r0
 801f66c:	d004      	beq.n	801f678 <lfs_rename_+0x7c>
 801f66e:	4299      	cmp	r1, r3
 801f670:	d002      	beq.n	801f678 <lfs_rename_+0x7c>
 801f672:	4290      	cmp	r0, r2
 801f674:	d000      	beq.n	801f678 <lfs_rename_+0x7c>
 801f676:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 801f678:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f67a:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 801f67c:	f119 0f02 	cmn.w	r9, #2
 801f680:	f000 8085 	beq.w	801f78e <lfs_rename_+0x192>
    return (tag & 0x7ff00000) >> 20;
 801f684:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801f688:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801f68c:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 801f690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801f694:	2b00      	cmp	r3, #0
 801f696:	f040 808a 	bne.w	801f7ae <lfs_rename_+0x1b2>
    } else if (samepair && newid == newoldid) {
 801f69a:	b91e      	cbnz	r6, 801f6a4 <lfs_rename_+0xa8>
 801f69c:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f6a0:	42ab      	cmp	r3, r5
 801f6a2:	d0b5      	beq.n	801f610 <lfs_rename_+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801f6a4:	2a02      	cmp	r2, #2
 801f6a6:	f000 808a 	beq.w	801f7be <lfs_rename_+0x1c2>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f6aa:	46aa      	mov	sl, r5
    if (!samepair) {
 801f6ac:	b126      	cbz	r6, 801f6b8 <lfs_rename_+0xbc>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 801f6ae:	aa22      	add	r2, sp, #136	@ 0x88
 801f6b0:	4651      	mov	r1, sl
 801f6b2:	4620      	mov	r0, r4
 801f6b4:	f7fc f8a6 	bl	801b804 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801f6b8:	f119 0f02 	cmn.w	r9, #2
 801f6bc:	f000 80b4 	beq.w	801f828 <lfs_rename_+0x22c>
 801f6c0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f6c4:	029b      	lsls	r3, r3, #10
 801f6c6:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f6ca:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f6ce:	9305      	str	r3, [sp, #20]
 801f6d0:	2200      	movs	r2, #0
 801f6d2:	9206      	str	r2, [sp, #24]
 801f6d4:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 801f6d8:	02bf      	lsls	r7, r7, #10
 801f6da:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 801f6de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f6e2:	9307      	str	r3, [sp, #28]
 801f6e4:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801f6e6:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801f6ea:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 801f6ee:	f8dd b008 	ldr.w	fp, [sp, #8]
 801f6f2:	4658      	mov	r0, fp
 801f6f4:	f7f0 fdd4 	bl	80102a0 <strlen>
 801f6f8:	ea48 0000 	orr.w	r0, r8, r0
 801f6fc:	9009      	str	r0, [sp, #36]	@ 0x24
 801f6fe:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801f702:	432f      	orrs	r7, r5
 801f704:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 801f708:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 801f70c:	970b      	str	r7, [sp, #44]	@ 0x2c
 801f70e:	ab22      	add	r3, sp, #136	@ 0x88
 801f710:	930c      	str	r3, [sp, #48]	@ 0x30
 801f712:	2e00      	cmp	r6, #0
 801f714:	f040 808a 	bne.w	801f82c <lfs_rename_+0x230>
 801f718:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 801f71c:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 801f720:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f724:	930d      	str	r3, [sp, #52]	@ 0x34
 801f726:	2300      	movs	r3, #0
 801f728:	930e      	str	r3, [sp, #56]	@ 0x38
 801f72a:	2305      	movs	r3, #5
 801f72c:	aa05      	add	r2, sp, #20
 801f72e:	a91a      	add	r1, sp, #104	@ 0x68
 801f730:	4620      	mov	r0, r4
 801f732:	f7ff f8d3 	bl	801e8dc <lfs_dir_commit>
    if (err) {
 801f736:	4607      	mov	r7, r0
 801f738:	2800      	cmp	r0, #0
 801f73a:	d179      	bne.n	801f830 <lfs_rename_+0x234>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801f73c:	b126      	cbz	r6, 801f748 <lfs_rename_+0x14c>
    return lfs_tag_type1(a->tag);
 801f73e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801f740:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801f742:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801f746:	d177      	bne.n	801f838 <lfs_rename_+0x23c>
    lfs->mlist = prevdir.next;
 801f748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f74a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 801f74c:	f119 0f02 	cmn.w	r9, #2
 801f750:	f000 80a9 	beq.w	801f8a6 <lfs_rename_+0x2aa>
    return (tag & 0x7ff00000) >> 20;
 801f754:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801f758:	2802      	cmp	r0, #2
 801f75a:	f000 8088 	beq.w	801f86e <lfs_rename_+0x272>
    return 0;
 801f75e:	463e      	mov	r6, r7
 801f760:	e756      	b.n	801f610 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801f762:	f06f 0015 	mvn.w	r0, #21
 801f766:	4606      	mov	r6, r0
 801f768:	e752      	b.n	801f610 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801f76a:	f119 0f02 	cmn.w	r9, #2
 801f76e:	d106      	bne.n	801f77e <lfs_rename_+0x182>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801f770:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 801f774:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f778:	429a      	cmp	r2, r3
 801f77a:	f47f af70 	bne.w	801f65e <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801f77e:	f1b9 0f00 	cmp.w	r9, #0
 801f782:	db02      	blt.n	801f78a <lfs_rename_+0x18e>
 801f784:	f06f 0615 	mvn.w	r6, #21
 801f788:	e742      	b.n	801f610 <lfs_rename_+0x14>
 801f78a:	464e      	mov	r6, r9
 801f78c:	e740      	b.n	801f610 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 801f78e:	9802      	ldr	r0, [sp, #8]
 801f790:	f7f0 fd86 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801f794:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801f796:	4283      	cmp	r3, r0
 801f798:	f0c0 8082 	bcc.w	801f8a0 <lfs_rename_+0x2a4>
        if (samepair && newid <= newoldid) {
 801f79c:	2e00      	cmp	r6, #0
 801f79e:	d141      	bne.n	801f824 <lfs_rename_+0x228>
 801f7a0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f7a4:	42ab      	cmp	r3, r5
 801f7a6:	d83b      	bhi.n	801f820 <lfs_rename_+0x224>
            newoldid += 1;
 801f7a8:	f105 0a01 	add.w	sl, r5, #1
 801f7ac:	e77e      	b.n	801f6ac <lfs_rename_+0xb0>
                : LFS_ERR_NOTDIR;
 801f7ae:	2a02      	cmp	r2, #2
 801f7b0:	d002      	beq.n	801f7b8 <lfs_rename_+0x1bc>
 801f7b2:	f06f 0613 	mvn.w	r6, #19
 801f7b6:	e72b      	b.n	801f610 <lfs_rename_+0x14>
 801f7b8:	f06f 0614 	mvn.w	r6, #20
 801f7bc:	e728      	b.n	801f610 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 801f7be:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f7c2:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801f7c4:	aa05      	add	r2, sp, #20
 801f7c6:	9200      	str	r2, [sp, #0]
 801f7c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f7cc:	f043 0308 	orr.w	r3, r3, #8
 801f7d0:	4a36      	ldr	r2, [pc, #216]	@ (801f8ac <lfs_rename_+0x2b0>)
 801f7d2:	a91a      	add	r1, sp, #104	@ 0x68
 801f7d4:	4620      	mov	r0, r4
 801f7d6:	f7fc fa63 	bl	801bca0 <lfs_dir_get>
        if (res < 0) {
 801f7da:	2800      	cmp	r0, #0
 801f7dc:	db1a      	blt.n	801f814 <lfs_rename_+0x218>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801f7de:	aa05      	add	r2, sp, #20
 801f7e0:	a911      	add	r1, sp, #68	@ 0x44
 801f7e2:	4620      	mov	r0, r4
 801f7e4:	f7fd fa4a 	bl	801cc7c <lfs_dir_fetch>
        if (err) {
 801f7e8:	b9b0      	cbnz	r0, 801f818 <lfs_rename_+0x21c>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 801f7ea:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f7ec:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 801f7f0:	d002      	beq.n	801f7f8 <lfs_rename_+0x1fc>
            return LFS_ERR_NOTEMPTY;
 801f7f2:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 801f7f6:	e70b      	b.n	801f610 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 801f7f8:	2101      	movs	r1, #1
 801f7fa:	4620      	mov	r0, r4
 801f7fc:	f7fc f852 	bl	801b8a4 <lfs_fs_preporphans>
        if (err) {
 801f800:	b960      	cbnz	r0, 801f81c <lfs_rename_+0x220>
        prevdir.type = 0;
 801f802:	2300      	movs	r3, #0
 801f804:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 801f808:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 801f80c:	ab0f      	add	r3, sp, #60	@ 0x3c
 801f80e:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f810:	46aa      	mov	sl, r5
 801f812:	e74b      	b.n	801f6ac <lfs_rename_+0xb0>
            return (int)res;
 801f814:	4606      	mov	r6, r0
 801f816:	e6fb      	b.n	801f610 <lfs_rename_+0x14>
            return err;
 801f818:	4606      	mov	r6, r0
 801f81a:	e6f9      	b.n	801f610 <lfs_rename_+0x14>
            return err;
 801f81c:	4606      	mov	r6, r0
 801f81e:	e6f7      	b.n	801f610 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f820:	46aa      	mov	sl, r5
 801f822:	e743      	b.n	801f6ac <lfs_rename_+0xb0>
 801f824:	46aa      	mov	sl, r5
 801f826:	e742      	b.n	801f6ae <lfs_rename_+0xb2>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801f828:	2300      	movs	r3, #0
 801f82a:	e750      	b.n	801f6ce <lfs_rename_+0xd2>
 801f82c:	2300      	movs	r3, #0
 801f82e:	e779      	b.n	801f724 <lfs_rename_+0x128>
        lfs->mlist = prevdir.next;
 801f830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f832:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 801f834:	4606      	mov	r6, r0
 801f836:	e6eb      	b.n	801f610 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801f838:	2200      	movs	r2, #0
 801f83a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801f83e:	4620      	mov	r0, r4
 801f840:	f7fb ffe0 	bl	801b804 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 801f844:	02ab      	lsls	r3, r5, #10
 801f846:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f84a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f84e:	932a      	str	r3, [sp, #168]	@ 0xa8
 801f850:	2300      	movs	r3, #0
 801f852:	932b      	str	r3, [sp, #172]	@ 0xac
 801f854:	2301      	movs	r3, #1
 801f856:	aa2a      	add	r2, sp, #168	@ 0xa8
 801f858:	a922      	add	r1, sp, #136	@ 0x88
 801f85a:	4620      	mov	r0, r4
 801f85c:	f7ff f83e 	bl	801e8dc <lfs_dir_commit>
        if (err) {
 801f860:	4606      	mov	r6, r0
 801f862:	2800      	cmp	r0, #0
 801f864:	f43f af70 	beq.w	801f748 <lfs_rename_+0x14c>
            lfs->mlist = prevdir.next;
 801f868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f86a:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 801f86c:	e6d0      	b.n	801f610 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 801f86e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f872:	4620      	mov	r0, r4
 801f874:	f7fc f816 	bl	801b8a4 <lfs_fs_preporphans>
        if (err) {
 801f878:	4606      	mov	r6, r0
 801f87a:	2800      	cmp	r0, #0
 801f87c:	f47f aec8 	bne.w	801f610 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 801f880:	aa1a      	add	r2, sp, #104	@ 0x68
 801f882:	a911      	add	r1, sp, #68	@ 0x44
 801f884:	4620      	mov	r0, r4
 801f886:	f7fd ff1f 	bl	801d6c8 <lfs_fs_pred>
        if (err) {
 801f88a:	4606      	mov	r6, r0
 801f88c:	2800      	cmp	r0, #0
 801f88e:	f47f aebf 	bne.w	801f610 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 801f892:	aa11      	add	r2, sp, #68	@ 0x44
 801f894:	a91a      	add	r1, sp, #104	@ 0x68
 801f896:	4620      	mov	r0, r4
 801f898:	f7ff f8dc 	bl	801ea54 <lfs_dir_drop>
 801f89c:	4606      	mov	r6, r0
        if (err) {
 801f89e:	e6b7      	b.n	801f610 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 801f8a0:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801f8a4:	e6b4      	b.n	801f610 <lfs_rename_+0x14>
    return 0;
 801f8a6:	463e      	mov	r6, r7
 801f8a8:	e6b2      	b.n	801f610 <lfs_rename_+0x14>
 801f8aa:	bf00      	nop
 801f8ac:	700ffc00 	.word	0x700ffc00

0801f8b0 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 801f8b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f8b4:	b08b      	sub	sp, #44	@ 0x2c
 801f8b6:	4607      	mov	r7, r0
 801f8b8:	460c      	mov	r4, r1
 801f8ba:	9203      	str	r2, [sp, #12]
 801f8bc:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801f8be:	f013 0f02 	tst.w	r3, #2
 801f8c2:	d005      	beq.n	801f8d0 <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 801f8c4:	f7ff f8b2 	bl	801ea2c <lfs_fs_forceconsistency>
        if (err) {
 801f8c8:	4606      	mov	r6, r0
 801f8ca:	2800      	cmp	r0, #0
 801f8cc:	f040 8109 	bne.w	801fae2 <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 801f8d0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f8d2:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 801f8d4:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 801f8d6:	2300      	movs	r3, #0
 801f8d8:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 801f8da:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801f8dc:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 801f8de:	f104 0808 	add.w	r8, r4, #8
 801f8e2:	1d23      	adds	r3, r4, #4
 801f8e4:	aa03      	add	r2, sp, #12
 801f8e6:	4641      	mov	r1, r8
 801f8e8:	4638      	mov	r0, r7
 801f8ea:	f7ff fd0b 	bl	801f304 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 801f8ee:	1e06      	subs	r6, r0, #0
 801f8f0:	da09      	bge.n	801f906 <lfs_file_opencfg_+0x56>
 801f8f2:	f116 0f02 	cmn.w	r6, #2
 801f8f6:	f040 80ec 	bne.w	801fad2 <lfs_file_opencfg_+0x222>
 801f8fa:	88a2      	ldrh	r2, [r4, #4]
 801f8fc:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f900:	429a      	cmp	r2, r3
 801f902:	f000 80e6 	beq.w	801fad2 <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 801f906:	2301      	movs	r3, #1
 801f908:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801f90a:	4621      	mov	r1, r4
 801f90c:	4638      	mov	r0, r7
 801f90e:	f7fb fec7 	bl	801b6a0 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 801f912:	f116 0f02 	cmn.w	r6, #2
 801f916:	d019      	beq.n	801f94c <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 801f918:	f415 7f00 	tst.w	r5, #512	@ 0x200
 801f91c:	f040 80d7 	bne.w	801face <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 801f920:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801f924:	2e01      	cmp	r6, #1
 801f926:	f040 80e0 	bne.w	801faea <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 801f92a:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801f92e:	d042      	beq.n	801f9b6 <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801f930:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 801f934:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801f938:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 801f93c:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 801f940:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f946:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801f948:	2500      	movs	r5, #0
 801f94a:	e064      	b.n	801fa16 <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 801f94c:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801f950:	f000 80bf 	beq.w	801fad2 <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 801f954:	9d03      	ldr	r5, [sp, #12]
 801f956:	4628      	mov	r0, r5
 801f958:	f7f0 fca2 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801f95c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f95e:	4283      	cmp	r3, r0
 801f960:	d202      	bcs.n	801f968 <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 801f962:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801f966:	e0b4      	b.n	801fad2 <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801f968:	88a3      	ldrh	r3, [r4, #4]
 801f96a:	029b      	lsls	r3, r3, #10
 801f96c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801f970:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801f974:	9204      	str	r2, [sp, #16]
 801f976:	2200      	movs	r2, #0
 801f978:	9205      	str	r2, [sp, #20]
 801f97a:	4318      	orrs	r0, r3
 801f97c:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801f980:	9006      	str	r0, [sp, #24]
 801f982:	9507      	str	r5, [sp, #28]
 801f984:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f988:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f98c:	9308      	str	r3, [sp, #32]
 801f98e:	9209      	str	r2, [sp, #36]	@ 0x24
 801f990:	2303      	movs	r3, #3
 801f992:	aa04      	add	r2, sp, #16
 801f994:	4641      	mov	r1, r8
 801f996:	4638      	mov	r0, r7
 801f998:	f7fe ffa0 	bl	801e8dc <lfs_dir_commit>
 801f99c:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801f99e:	f110 0f1c 	cmn.w	r0, #28
 801f9a2:	d005      	beq.n	801f9b0 <lfs_file_opencfg_+0x100>
        if (err) {
 801f9a4:	2800      	cmp	r0, #0
 801f9a6:	f040 8094 	bne.w	801fad2 <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 801f9aa:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 801fb00 <lfs_file_opencfg_+0x250>
 801f9ae:	e7cb      	b.n	801f948 <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801f9b0:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 801f9b4:	e08d      	b.n	801fad2 <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801f9b6:	88a3      	ldrh	r3, [r4, #4]
 801f9b8:	029b      	lsls	r3, r3, #10
 801f9ba:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801f9be:	9200      	str	r2, [sp, #0]
 801f9c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f9c4:	f043 0308 	orr.w	r3, r3, #8
 801f9c8:	4a4b      	ldr	r2, [pc, #300]	@ (801faf8 <lfs_file_opencfg_+0x248>)
 801f9ca:	4641      	mov	r1, r8
 801f9cc:	4638      	mov	r0, r7
 801f9ce:	f7fc f967 	bl	801bca0 <lfs_dir_get>
        if (tag < 0) {
 801f9d2:	f1b0 0900 	subs.w	r9, r0, #0
 801f9d6:	dab7      	bge.n	801f948 <lfs_file_opencfg_+0x98>
            err = tag;
 801f9d8:	464e      	mov	r6, r9
 801f9da:	e07a      	b.n	801fad2 <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 801f9dc:	685b      	ldr	r3, [r3, #4]
 801f9de:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801f9e2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801f9e6:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 801f9ea:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 801f9ee:	88a3      	ldrh	r3, [r4, #4]
 801f9f0:	029b      	lsls	r3, r3, #10
 801f9f2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801f9f6:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801f9f8:	6849      	ldr	r1, [r1, #4]
 801f9fa:	9100      	str	r1, [sp, #0]
 801f9fc:	4313      	orrs	r3, r2
 801f9fe:	4a3f      	ldr	r2, [pc, #252]	@ (801fafc <lfs_file_opencfg_+0x24c>)
 801fa00:	4641      	mov	r1, r8
 801fa02:	4638      	mov	r0, r7
 801fa04:	f7fc f94c 	bl	801bca0 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 801fa08:	1e06      	subs	r6, r0, #0
 801fa0a:	da0c      	bge.n	801fa26 <lfs_file_opencfg_+0x176>
 801fa0c:	f116 0f02 	cmn.w	r6, #2
 801fa10:	d009      	beq.n	801fa26 <lfs_file_opencfg_+0x176>
 801fa12:	e05e      	b.n	801fad2 <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801fa14:	3501      	adds	r5, #1
 801fa16:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801fa18:	689a      	ldr	r2, [r3, #8]
 801fa1a:	42aa      	cmp	r2, r5
 801fa1c:	d915      	bls.n	801fa4a <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 801fa1e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801fa20:	f012 0f01 	tst.w	r2, #1
 801fa24:	d1da      	bne.n	801f9dc <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801fa26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fa28:	f013 0f02 	tst.w	r3, #2
 801fa2c:	d0f2      	beq.n	801fa14 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801fa2e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801fa30:	6852      	ldr	r2, [r2, #4]
 801fa32:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801fa36:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801fa3a:	6891      	ldr	r1, [r2, #8]
 801fa3c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801fa3e:	4291      	cmp	r1, r2
 801fa40:	d856      	bhi.n	801faf0 <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 801fa42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801fa46:	6323      	str	r3, [r4, #48]	@ 0x30
 801fa48:	e7e4      	b.n	801fa14 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 801fa4a:	681b      	ldr	r3, [r3, #0]
 801fa4c:	b16b      	cbz	r3, 801fa6a <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 801fa4e:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 801fa50:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801fa54:	4638      	mov	r0, r7
 801fa56:	f7fb ff55 	bl	801b904 <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 801fa5a:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801fa5e:	f240 2301 	movw	r3, #513	@ 0x201
 801fa62:	429a      	cmp	r2, r3
 801fa64:	d00b      	beq.n	801fa7e <lfs_file_opencfg_+0x1ce>
    return 0;
 801fa66:	2600      	movs	r6, #0
 801fa68:	e03b      	b.n	801fae2 <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801fa6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 801fa6c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801fa6e:	f7fb faf3 	bl	801b058 <pvPortMalloc>
 801fa72:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 801fa74:	2800      	cmp	r0, #0
 801fa76:	d1eb      	bne.n	801fa50 <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 801fa78:	f06f 060b 	mvn.w	r6, #11
 801fa7c:	e029      	b.n	801fad2 <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 801fa7e:	f06f 0101 	mvn.w	r1, #1
 801fa82:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 801fa84:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 801fa88:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 801fa8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fa8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fa90:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 801fa92:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 801fa94:	2300      	movs	r3, #0
 801fa96:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 801fa98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801fa9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fa9c:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 801fa9e:	b90a      	cbnz	r2, 801faa4 <lfs_file_opencfg_+0x1f4>
    return 0;
 801faa0:	2600      	movs	r6, #0
 801faa2:	e01e      	b.n	801fae2 <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 801faa4:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 801faa6:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801faaa:	4293      	cmp	r3, r2
 801faac:	bf28      	it	cs
 801faae:	4613      	movcs	r3, r2
 801fab0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 801fab4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801fab6:	9200      	str	r2, [sp, #0]
 801fab8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801fabc:	4a0e      	ldr	r2, [pc, #56]	@ (801faf8 <lfs_file_opencfg_+0x248>)
 801fabe:	4641      	mov	r1, r8
 801fac0:	4638      	mov	r0, r7
 801fac2:	f7fc f8ed 	bl	801bca0 <lfs_dir_get>
            if (res < 0) {
 801fac6:	1e06      	subs	r6, r0, #0
 801fac8:	db03      	blt.n	801fad2 <lfs_file_opencfg_+0x222>
    return 0;
 801faca:	2600      	movs	r6, #0
 801facc:	e009      	b.n	801fae2 <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 801face:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 801fad2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fad4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801fad8:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 801fada:	4621      	mov	r1, r4
 801fadc:	4638      	mov	r0, r7
 801fade:	f7ff fbfd 	bl	801f2dc <lfs_file_close_>
}
 801fae2:	4630      	mov	r0, r6
 801fae4:	b00b      	add	sp, #44	@ 0x2c
 801fae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 801faea:	f06f 0614 	mvn.w	r6, #20
 801faee:	e7f0      	b.n	801fad2 <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 801faf0:	f06f 061b 	mvn.w	r6, #27
 801faf4:	e7ed      	b.n	801fad2 <lfs_file_opencfg_+0x222>
 801faf6:	bf00      	nop
 801faf8:	700ffc00 	.word	0x700ffc00
 801fafc:	7ffffc00 	.word	0x7ffffc00
 801fb00:	20100000 	.word	0x20100000

0801fb04 <lfs_file_open_>:
        const char *path, int flags) {
 801fb04:	b510      	push	{r4, lr}
 801fb06:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 801fb08:	4c02      	ldr	r4, [pc, #8]	@ (801fb14 <lfs_file_open_+0x10>)
 801fb0a:	9400      	str	r4, [sp, #0]
 801fb0c:	f7ff fed0 	bl	801f8b0 <lfs_file_opencfg_>
}
 801fb10:	b002      	add	sp, #8
 801fb12:	bd10      	pop	{r4, pc}
 801fb14:	0803a64c 	.word	0x0803a64c

0801fb18 <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 801fb18:	b530      	push	{r4, r5, lr}
 801fb1a:	b0ab      	sub	sp, #172	@ 0xac
 801fb1c:	4604      	mov	r4, r0
 801fb1e:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 801fb20:	f7fe ff84 	bl	801ea2c <lfs_fs_forceconsistency>
    if (err) {
 801fb24:	4603      	mov	r3, r0
 801fb26:	b110      	cbz	r0, 801fb2e <lfs_mkdir_+0x16>
}
 801fb28:	4618      	mov	r0, r3
 801fb2a:	b02b      	add	sp, #172	@ 0xac
 801fb2c:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 801fb2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801fb30:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801fb32:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 801fb36:	aa01      	add	r2, sp, #4
 801fb38:	a91e      	add	r1, sp, #120	@ 0x78
 801fb3a:	4620      	mov	r0, r4
 801fb3c:	f7ff fbe2 	bl	801f304 <lfs_dir_find>
 801fb40:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 801fb42:	f110 0f02 	cmn.w	r0, #2
 801fb46:	d12f      	bne.n	801fba8 <lfs_mkdir_+0x90>
 801fb48:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 801fb4c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801fb50:	4291      	cmp	r1, r2
 801fb52:	d029      	beq.n	801fba8 <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 801fb54:	9801      	ldr	r0, [sp, #4]
 801fb56:	f7f0 fba3 	bl	80102a0 <strlen>
 801fb5a:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 801fb5c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801fb5e:	4283      	cmp	r3, r0
 801fb60:	f0c0 8089 	bcc.w	801fc76 <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 801fb64:	4620      	mov	r0, r4
 801fb66:	f7fb fdad 	bl	801b6c4 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 801fb6a:	a913      	add	r1, sp, #76	@ 0x4c
 801fb6c:	4620      	mov	r0, r4
 801fb6e:	f7fd f9f3 	bl	801cf58 <lfs_dir_alloc>
    if (err) {
 801fb72:	4603      	mov	r3, r0
 801fb74:	2800      	cmp	r0, #0
 801fb76:	d1d7      	bne.n	801fb28 <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 801fb78:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801fb7c:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 801fb80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801fb84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801fb88:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801fb8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 801fb90:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 801fb94:	b16b      	cbz	r3, 801fbb2 <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 801fb96:	aa11      	add	r2, sp, #68	@ 0x44
 801fb98:	a90b      	add	r1, sp, #44	@ 0x2c
 801fb9a:	4620      	mov	r0, r4
 801fb9c:	f7fd f86e 	bl	801cc7c <lfs_dir_fetch>
        if (err) {
 801fba0:	4603      	mov	r3, r0
 801fba2:	2800      	cmp	r0, #0
 801fba4:	d0f4      	beq.n	801fb90 <lfs_mkdir_+0x78>
 801fba6:	e7bf      	b.n	801fb28 <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	dbbd      	blt.n	801fb28 <lfs_mkdir_+0x10>
 801fbac:	f06f 0310 	mvn.w	r3, #16
 801fbb0:	e7ba      	b.n	801fb28 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 801fbb2:	4b32      	ldr	r3, [pc, #200]	@ (801fc7c <lfs_mkdir_+0x164>)
 801fbb4:	9326      	str	r3, [sp, #152]	@ 0x98
 801fbb6:	ab11      	add	r3, sp, #68	@ 0x44
 801fbb8:	9327      	str	r3, [sp, #156]	@ 0x9c
 801fbba:	2301      	movs	r3, #1
 801fbbc:	aa26      	add	r2, sp, #152	@ 0x98
 801fbbe:	a913      	add	r1, sp, #76	@ 0x4c
 801fbc0:	4620      	mov	r0, r4
 801fbc2:	f7fe fe8b 	bl	801e8dc <lfs_dir_commit>
    if (err) {
 801fbc6:	4603      	mov	r3, r0
 801fbc8:	2800      	cmp	r0, #0
 801fbca:	d1ad      	bne.n	801fb28 <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 801fbcc:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801fbd0:	bb33      	cbnz	r3, 801fc20 <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801fbd2:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 801fbd6:	029b      	lsls	r3, r3, #10
 801fbd8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801fbdc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801fbe0:	9203      	str	r2, [sp, #12]
 801fbe2:	2200      	movs	r2, #0
 801fbe4:	9204      	str	r2, [sp, #16]
 801fbe6:	431d      	orrs	r5, r3
 801fbe8:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801fbec:	9505      	str	r5, [sp, #20]
 801fbee:	9a01      	ldr	r2, [sp, #4]
 801fbf0:	9206      	str	r2, [sp, #24]
 801fbf2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801fbf6:	f043 0308 	orr.w	r3, r3, #8
 801fbfa:	9307      	str	r3, [sp, #28]
 801fbfc:	ab13      	add	r3, sp, #76	@ 0x4c
 801fbfe:	9308      	str	r3, [sp, #32]
 801fc00:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801fc04:	2b00      	cmp	r3, #0
 801fc06:	d134      	bne.n	801fc72 <lfs_mkdir_+0x15a>
 801fc08:	4b1c      	ldr	r3, [pc, #112]	@ (801fc7c <lfs_mkdir_+0x164>)
 801fc0a:	9309      	str	r3, [sp, #36]	@ 0x24
 801fc0c:	ab13      	add	r3, sp, #76	@ 0x4c
 801fc0e:	930a      	str	r3, [sp, #40]	@ 0x28
 801fc10:	2304      	movs	r3, #4
 801fc12:	aa03      	add	r2, sp, #12
 801fc14:	a91e      	add	r1, sp, #120	@ 0x78
 801fc16:	4620      	mov	r0, r4
 801fc18:	f7fe fe60 	bl	801e8dc <lfs_dir_commit>
 801fc1c:	4603      	mov	r3, r0
    if (err) {
 801fc1e:	e783      	b.n	801fb28 <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801fc20:	2101      	movs	r1, #1
 801fc22:	4620      	mov	r0, r4
 801fc24:	f7fb fe3e 	bl	801b8a4 <lfs_fs_preporphans>
        if (err) {
 801fc28:	4603      	mov	r3, r0
 801fc2a:	2800      	cmp	r0, #0
 801fc2c:	f47f af7c 	bne.w	801fb28 <lfs_mkdir_+0x10>
        cwd.type = 0;
 801fc30:	2300      	movs	r3, #0
 801fc32:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 801fc36:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 801fc3a:	ab1c      	add	r3, sp, #112	@ 0x70
 801fc3c:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801fc3e:	4b0f      	ldr	r3, [pc, #60]	@ (801fc7c <lfs_mkdir_+0x164>)
 801fc40:	9328      	str	r3, [sp, #160]	@ 0xa0
 801fc42:	ab13      	add	r3, sp, #76	@ 0x4c
 801fc44:	9329      	str	r3, [sp, #164]	@ 0xa4
 801fc46:	2301      	movs	r3, #1
 801fc48:	aa28      	add	r2, sp, #160	@ 0xa0
 801fc4a:	a90b      	add	r1, sp, #44	@ 0x2c
 801fc4c:	4620      	mov	r0, r4
 801fc4e:	f7fe fe45 	bl	801e8dc <lfs_dir_commit>
        if (err) {
 801fc52:	4603      	mov	r3, r0
 801fc54:	b110      	cbz	r0, 801fc5c <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 801fc56:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801fc58:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 801fc5a:	e765      	b.n	801fb28 <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 801fc5c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fc5e:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 801fc60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801fc64:	4620      	mov	r0, r4
 801fc66:	f7fb fe1d 	bl	801b8a4 <lfs_fs_preporphans>
        if (err) {
 801fc6a:	4603      	mov	r3, r0
 801fc6c:	2800      	cmp	r0, #0
 801fc6e:	d0b0      	beq.n	801fbd2 <lfs_mkdir_+0xba>
 801fc70:	e75a      	b.n	801fb28 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801fc72:	2300      	movs	r3, #0
 801fc74:	e7c9      	b.n	801fc0a <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 801fc76:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 801fc7a:	e755      	b.n	801fb28 <lfs_mkdir_+0x10>
 801fc7c:	600ffc08 	.word	0x600ffc08

0801fc80 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 801fc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc82:	b085      	sub	sp, #20
 801fc84:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 801fc86:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801fc8a:	429a      	cmp	r2, r3
 801fc8c:	d02b      	beq.n	801fce6 <lfs_dir_getinfo+0x66>
 801fc8e:	4604      	mov	r4, r0
 801fc90:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801fc92:	0297      	lsls	r7, r2, #10
 801fc94:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801fc96:	3301      	adds	r3, #1
 801fc98:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801fc9c:	9100      	str	r1, [sp, #0]
 801fc9e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801fca2:	4a19      	ldr	r2, [pc, #100]	@ (801fd08 <lfs_dir_getinfo+0x88>)
 801fca4:	4631      	mov	r1, r6
 801fca6:	f7fb fffb 	bl	801bca0 <lfs_dir_get>
    if (tag < 0) {
 801fcaa:	2800      	cmp	r0, #0
 801fcac:	db21      	blt.n	801fcf2 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801fcae:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 801fcb2:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801fcb4:	ab02      	add	r3, sp, #8
 801fcb6:	9300      	str	r3, [sp, #0]
 801fcb8:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 801fcbc:	f043 0308 	orr.w	r3, r3, #8
 801fcc0:	4a12      	ldr	r2, [pc, #72]	@ (801fd0c <lfs_dir_getinfo+0x8c>)
 801fcc2:	4631      	mov	r1, r6
 801fcc4:	4620      	mov	r0, r4
 801fcc6:	f7fb ffeb 	bl	801bca0 <lfs_dir_get>
    if (tag < 0) {
 801fcca:	2800      	cmp	r0, #0
 801fccc:	db11      	blt.n	801fcf2 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801fcce:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801fcd2:	f240 2202 	movw	r2, #514	@ 0x202
 801fcd6:	4293      	cmp	r3, r2
 801fcd8:	d00d      	beq.n	801fcf6 <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801fcda:	f240 2201 	movw	r2, #513	@ 0x201
 801fcde:	4293      	cmp	r3, r2
 801fce0:	d00d      	beq.n	801fcfe <lfs_dir_getinfo+0x7e>
    return 0;
 801fce2:	2000      	movs	r0, #0
 801fce4:	e005      	b.n	801fcf2 <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 801fce6:	4b0a      	ldr	r3, [pc, #40]	@ (801fd10 <lfs_dir_getinfo+0x90>)
 801fce8:	881b      	ldrh	r3, [r3, #0]
 801fcea:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 801fcec:	2302      	movs	r3, #2
 801fcee:	702b      	strb	r3, [r5, #0]
        return 0;
 801fcf0:	2000      	movs	r0, #0
}
 801fcf2:	b005      	add	sp, #20
 801fcf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 801fcf6:	9b03      	ldr	r3, [sp, #12]
 801fcf8:	606b      	str	r3, [r5, #4]
    return 0;
 801fcfa:	2000      	movs	r0, #0
 801fcfc:	e7f9      	b.n	801fcf2 <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 801fcfe:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 801fd02:	6068      	str	r0, [r5, #4]
    return 0;
 801fd04:	2000      	movs	r0, #0
 801fd06:	e7f4      	b.n	801fcf2 <lfs_dir_getinfo+0x72>
 801fd08:	780ffc00 	.word	0x780ffc00
 801fd0c:	700ffc00 	.word	0x700ffc00
 801fd10:	0803ad60 	.word	0x0803ad60

0801fd14 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801fd14:	b530      	push	{r4, r5, lr}
 801fd16:	b08b      	sub	sp, #44	@ 0x2c
 801fd18:	4604      	mov	r4, r0
 801fd1a:	9101      	str	r1, [sp, #4]
 801fd1c:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801fd1e:	2300      	movs	r3, #0
 801fd20:	aa01      	add	r2, sp, #4
 801fd22:	a902      	add	r1, sp, #8
 801fd24:	f7ff faee 	bl	801f304 <lfs_dir_find>
    if (tag < 0) {
 801fd28:	2800      	cmp	r0, #0
 801fd2a:	db06      	blt.n	801fd3a <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 801fd2c:	462b      	mov	r3, r5
 801fd2e:	f3c0 2289 	ubfx	r2, r0, #10, #10
 801fd32:	a902      	add	r1, sp, #8
 801fd34:	4620      	mov	r0, r4
 801fd36:	f7ff ffa3 	bl	801fc80 <lfs_dir_getinfo>
}
 801fd3a:	b00b      	add	sp, #44	@ 0x2c
 801fd3c:	bd30      	pop	{r4, r5, pc}
	...

0801fd40 <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801fd40:	b570      	push	{r4, r5, r6, lr}
 801fd42:	4605      	mov	r5, r0
 801fd44:	460c      	mov	r4, r1
 801fd46:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 801fd48:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801fd4c:	2100      	movs	r1, #0
 801fd4e:	4630      	mov	r0, r6
 801fd50:	f00d f9ce 	bl	802d0f0 <memset>
    if (dir->pos == 0) {
 801fd54:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801fd56:	b183      	cbz	r3, 801fd7a <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 801fd58:	2b01      	cmp	r3, #1
 801fd5a:	d11f      	bne.n	801fd9c <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 801fd5c:	4633      	mov	r3, r6
 801fd5e:	2202      	movs	r2, #2
 801fd60:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 801fd64:	4a22      	ldr	r2, [pc, #136]	@ (801fdf0 <lfs_dir_read_+0xb0>)
 801fd66:	8811      	ldrh	r1, [r2, #0]
 801fd68:	7892      	ldrb	r2, [r2, #2]
 801fd6a:	8131      	strh	r1, [r6, #8]
 801fd6c:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801fd6e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801fd70:	3301      	adds	r3, #1
 801fd72:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801fd74:	f04f 0c01 	mov.w	ip, #1
 801fd78:	e034      	b.n	801fde4 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 801fd7a:	2302      	movs	r3, #2
 801fd7c:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 801fd7e:	4b1d      	ldr	r3, [pc, #116]	@ (801fdf4 <lfs_dir_read_+0xb4>)
 801fd80:	881b      	ldrh	r3, [r3, #0]
 801fd82:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 801fd84:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801fd86:	3301      	adds	r3, #1
 801fd88:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801fd8a:	f04f 0c01 	mov.w	ip, #1
 801fd8e:	e029      	b.n	801fde4 <lfs_dir_read_+0xa4>
        dir->id += 1;
 801fd90:	88a1      	ldrh	r1, [r4, #4]
 801fd92:	3101      	adds	r1, #1
 801fd94:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 801fd96:	f11c 0f02 	cmn.w	ip, #2
 801fd9a:	d11e      	bne.n	801fdda <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 801fd9c:	88a3      	ldrh	r3, [r4, #4]
 801fd9e:	8ba1      	ldrh	r1, [r4, #28]
 801fda0:	428b      	cmp	r3, r1
 801fda2:	d10c      	bne.n	801fdbe <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 801fda4:	7fe3      	ldrb	r3, [r4, #31]
 801fda6:	b1fb      	cbz	r3, 801fde8 <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801fda8:	f104 0220 	add.w	r2, r4, #32
 801fdac:	f104 0108 	add.w	r1, r4, #8
 801fdb0:	4628      	mov	r0, r5
 801fdb2:	f7fc ff63 	bl	801cc7c <lfs_dir_fetch>
            if (err) {
 801fdb6:	4684      	mov	ip, r0
 801fdb8:	b9a0      	cbnz	r0, 801fde4 <lfs_dir_read_+0xa4>
            dir->id = 0;
 801fdba:	2300      	movs	r3, #0
 801fdbc:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801fdbe:	4633      	mov	r3, r6
 801fdc0:	88a2      	ldrh	r2, [r4, #4]
 801fdc2:	f104 0108 	add.w	r1, r4, #8
 801fdc6:	4628      	mov	r0, r5
 801fdc8:	f7ff ff5a 	bl	801fc80 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 801fdcc:	4684      	mov	ip, r0
 801fdce:	2800      	cmp	r0, #0
 801fdd0:	d0de      	beq.n	801fd90 <lfs_dir_read_+0x50>
 801fdd2:	f110 0f02 	cmn.w	r0, #2
 801fdd6:	d0db      	beq.n	801fd90 <lfs_dir_read_+0x50>
 801fdd8:	e004      	b.n	801fde4 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 801fdda:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801fddc:	3301      	adds	r3, #1
 801fdde:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 801fde0:	f04f 0c01 	mov.w	ip, #1
}
 801fde4:	4660      	mov	r0, ip
 801fde6:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 801fde8:	f04f 0c00 	mov.w	ip, #0
 801fdec:	e7fa      	b.n	801fde4 <lfs_dir_read_+0xa4>
 801fdee:	bf00      	nop
 801fdf0:	0803a520 	.word	0x0803a520
 801fdf4:	08036860 	.word	0x08036860

0801fdf8 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 801fdf8:	b570      	push	{r4, r5, r6, lr}
 801fdfa:	4605      	mov	r5, r0
 801fdfc:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801fdfe:	694b      	ldr	r3, [r1, #20]
 801fe00:	4608      	mov	r0, r1
 801fe02:	4798      	blx	r3
    if (err) {
 801fe04:	4606      	mov	r6, r0
 801fe06:	b108      	cbz	r0, 801fe0c <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801fe08:	4630      	mov	r0, r6
 801fe0a:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 801fe0c:	4621      	mov	r1, r4
 801fe0e:	4628      	mov	r0, r5
 801fe10:	f7ff f860 	bl	801eed4 <lfs_format_>
 801fe14:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801fe16:	69a3      	ldr	r3, [r4, #24]
 801fe18:	4620      	mov	r0, r4
 801fe1a:	4798      	blx	r3
    return err;
 801fe1c:	e7f4      	b.n	801fe08 <lfs_format+0x10>

0801fe1e <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 801fe1e:	b570      	push	{r4, r5, r6, lr}
 801fe20:	4605      	mov	r5, r0
 801fe22:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801fe24:	694b      	ldr	r3, [r1, #20]
 801fe26:	4608      	mov	r0, r1
 801fe28:	4798      	blx	r3
    if (err) {
 801fe2a:	4606      	mov	r6, r0
 801fe2c:	b108      	cbz	r0, 801fe32 <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801fe2e:	4630      	mov	r0, r6
 801fe30:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 801fe32:	4621      	mov	r1, r4
 801fe34:	4628      	mov	r0, r5
 801fe36:	f7ff f8cb 	bl	801efd0 <lfs_mount_>
 801fe3a:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801fe3c:	69a3      	ldr	r3, [r4, #24]
 801fe3e:	4620      	mov	r0, r4
 801fe40:	4798      	blx	r3
    return err;
 801fe42:	e7f4      	b.n	801fe2e <lfs_mount+0x10>

0801fe44 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 801fe44:	b570      	push	{r4, r5, r6, lr}
 801fe46:	4604      	mov	r4, r0
 801fe48:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801fe4a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fe4c:	6943      	ldr	r3, [r0, #20]
 801fe4e:	4798      	blx	r3
    if (err) {
 801fe50:	4606      	mov	r6, r0
 801fe52:	b108      	cbz	r0, 801fe58 <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fe54:	4630      	mov	r0, r6
 801fe56:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 801fe58:	4629      	mov	r1, r5
 801fe5a:	4620      	mov	r0, r4
 801fe5c:	f7ff fb0e 	bl	801f47c <lfs_remove_>
 801fe60:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801fe62:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fe64:	6983      	ldr	r3, [r0, #24]
 801fe66:	4798      	blx	r3
    return err;
 801fe68:	e7f4      	b.n	801fe54 <lfs_remove+0x10>

0801fe6a <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801fe6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe6c:	4604      	mov	r4, r0
 801fe6e:	460d      	mov	r5, r1
 801fe70:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801fe72:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fe74:	6943      	ldr	r3, [r0, #20]
 801fe76:	4798      	blx	r3
    if (err) {
 801fe78:	4607      	mov	r7, r0
 801fe7a:	b108      	cbz	r0, 801fe80 <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fe7c:	4638      	mov	r0, r7
 801fe7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 801fe80:	4632      	mov	r2, r6
 801fe82:	4629      	mov	r1, r5
 801fe84:	4620      	mov	r0, r4
 801fe86:	f7ff fbb9 	bl	801f5fc <lfs_rename_>
 801fe8a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fe8c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fe8e:	6983      	ldr	r3, [r0, #24]
 801fe90:	4798      	blx	r3
    return err;
 801fe92:	e7f3      	b.n	801fe7c <lfs_rename+0x12>

0801fe94 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801fe94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe96:	4604      	mov	r4, r0
 801fe98:	460d      	mov	r5, r1
 801fe9a:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801fe9c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fe9e:	6943      	ldr	r3, [r0, #20]
 801fea0:	4798      	blx	r3
    if (err) {
 801fea2:	4607      	mov	r7, r0
 801fea4:	b108      	cbz	r0, 801feaa <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fea6:	4638      	mov	r0, r7
 801fea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 801feaa:	4632      	mov	r2, r6
 801feac:	4629      	mov	r1, r5
 801feae:	4620      	mov	r0, r4
 801feb0:	f7ff ff30 	bl	801fd14 <lfs_stat_>
 801feb4:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801feb6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801feb8:	6983      	ldr	r3, [r0, #24]
 801feba:	4798      	blx	r3
    return err;
 801febc:	e7f3      	b.n	801fea6 <lfs_stat+0x12>
	...

0801fec0 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801fec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fec4:	4604      	mov	r4, r0
 801fec6:	460d      	mov	r5, r1
 801fec8:	4616      	mov	r6, r2
 801feca:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801fecc:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fece:	6942      	ldr	r2, [r0, #20]
 801fed0:	4790      	blx	r2
    if (err) {
 801fed2:	4607      	mov	r7, r0
 801fed4:	b110      	cbz	r0, 801fedc <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fed6:	4638      	mov	r0, r7
 801fed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fedc:	4629      	mov	r1, r5
 801fede:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fee0:	f7fb fbc7 	bl	801b672 <lfs_mlist_isopen>
 801fee4:	b950      	cbnz	r0, 801fefc <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 801fee6:	4643      	mov	r3, r8
 801fee8:	4632      	mov	r2, r6
 801feea:	4629      	mov	r1, r5
 801feec:	4620      	mov	r0, r4
 801feee:	f7ff fe09 	bl	801fb04 <lfs_file_open_>
 801fef2:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fef4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fef6:	6983      	ldr	r3, [r0, #24]
 801fef8:	4798      	blx	r3
    return err;
 801fefa:	e7ec      	b.n	801fed6 <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fefc:	4b03      	ldr	r3, [pc, #12]	@ (801ff0c <lfs_file_open+0x4c>)
 801fefe:	4a04      	ldr	r2, [pc, #16]	@ (801ff10 <lfs_file_open+0x50>)
 801ff00:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801ff04:	4803      	ldr	r0, [pc, #12]	@ (801ff14 <lfs_file_open+0x54>)
 801ff06:	f00a fba1 	bl	802a64c <__assert_func>
 801ff0a:	bf00      	nop
 801ff0c:	0803a524 	.word	0x0803a524
 801ff10:	0803a658 	.word	0x0803a658
 801ff14:	080399a8 	.word	0x080399a8

0801ff18 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801ff18:	b570      	push	{r4, r5, r6, lr}
 801ff1a:	4604      	mov	r4, r0
 801ff1c:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801ff1e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ff20:	6943      	ldr	r3, [r0, #20]
 801ff22:	4798      	blx	r3
    if (err) {
 801ff24:	4606      	mov	r6, r0
 801ff26:	b108      	cbz	r0, 801ff2c <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801ff28:	4630      	mov	r0, r6
 801ff2a:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ff2c:	4629      	mov	r1, r5
 801ff2e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801ff30:	f7fb fb9f 	bl	801b672 <lfs_mlist_isopen>
 801ff34:	b140      	cbz	r0, 801ff48 <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 801ff36:	4629      	mov	r1, r5
 801ff38:	4620      	mov	r0, r4
 801ff3a:	f7ff f9cf 	bl	801f2dc <lfs_file_close_>
 801ff3e:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801ff40:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ff42:	6983      	ldr	r3, [r0, #24]
 801ff44:	4798      	blx	r3
    return err;
 801ff46:	e7ef      	b.n	801ff28 <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ff48:	4b03      	ldr	r3, [pc, #12]	@ (801ff58 <lfs_file_close+0x40>)
 801ff4a:	4a04      	ldr	r2, [pc, #16]	@ (801ff5c <lfs_file_close+0x44>)
 801ff4c:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 801ff50:	4803      	ldr	r0, [pc, #12]	@ (801ff60 <lfs_file_close+0x48>)
 801ff52:	f00a fb7b 	bl	802a64c <__assert_func>
 801ff56:	bf00      	nop
 801ff58:	0803a55c 	.word	0x0803a55c
 801ff5c:	0803a63c 	.word	0x0803a63c
 801ff60:	080399a8 	.word	0x080399a8

0801ff64 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801ff64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff68:	4604      	mov	r4, r0
 801ff6a:	460d      	mov	r5, r1
 801ff6c:	4616      	mov	r6, r2
 801ff6e:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801ff70:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ff72:	6942      	ldr	r2, [r0, #20]
 801ff74:	4790      	blx	r2
    if (err) {
 801ff76:	4607      	mov	r7, r0
 801ff78:	b110      	cbz	r0, 801ff80 <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801ff7a:	4638      	mov	r0, r7
 801ff7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ff80:	4629      	mov	r1, r5
 801ff82:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801ff84:	f7fb fb75 	bl	801b672 <lfs_mlist_isopen>
 801ff88:	b150      	cbz	r0, 801ffa0 <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801ff8a:	4643      	mov	r3, r8
 801ff8c:	4632      	mov	r2, r6
 801ff8e:	4629      	mov	r1, r5
 801ff90:	4620      	mov	r0, r4
 801ff92:	f7fd fac1 	bl	801d518 <lfs_file_read_>
 801ff96:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801ff98:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ff9a:	6983      	ldr	r3, [r0, #24]
 801ff9c:	4798      	blx	r3
    return res;
 801ff9e:	e7ec      	b.n	801ff7a <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ffa0:	4b03      	ldr	r3, [pc, #12]	@ (801ffb0 <lfs_file_read+0x4c>)
 801ffa2:	4a04      	ldr	r2, [pc, #16]	@ (801ffb4 <lfs_file_read+0x50>)
 801ffa4:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801ffa8:	4803      	ldr	r0, [pc, #12]	@ (801ffb8 <lfs_file_read+0x54>)
 801ffaa:	f00a fb4f 	bl	802a64c <__assert_func>
 801ffae:	bf00      	nop
 801ffb0:	0803a55c 	.word	0x0803a55c
 801ffb4:	0803a62c 	.word	0x0803a62c
 801ffb8:	080399a8 	.word	0x080399a8

0801ffbc <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801ffbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffc0:	4604      	mov	r4, r0
 801ffc2:	460d      	mov	r5, r1
 801ffc4:	4616      	mov	r6, r2
 801ffc6:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801ffc8:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ffca:	6942      	ldr	r2, [r0, #20]
 801ffcc:	4790      	blx	r2
    if (err) {
 801ffce:	4607      	mov	r7, r0
 801ffd0:	b110      	cbz	r0, 801ffd8 <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801ffd2:	4638      	mov	r0, r7
 801ffd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ffd8:	4629      	mov	r1, r5
 801ffda:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801ffdc:	f7fb fb49 	bl	801b672 <lfs_mlist_isopen>
 801ffe0:	b150      	cbz	r0, 801fff8 <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 801ffe2:	4643      	mov	r3, r8
 801ffe4:	4632      	mov	r2, r6
 801ffe6:	4629      	mov	r1, r5
 801ffe8:	4620      	mov	r0, r4
 801ffea:	f7fd fb05 	bl	801d5f8 <lfs_file_write_>
 801ffee:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fff0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fff2:	6983      	ldr	r3, [r0, #24]
 801fff4:	4798      	blx	r3
    return res;
 801fff6:	e7ec      	b.n	801ffd2 <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fff8:	4b03      	ldr	r3, [pc, #12]	@ (8020008 <lfs_file_write+0x4c>)
 801fffa:	4a04      	ldr	r2, [pc, #16]	@ (802000c <lfs_file_write+0x50>)
 801fffc:	f641 0105 	movw	r1, #6149	@ 0x1805
 8020000:	4803      	ldr	r0, [pc, #12]	@ (8020010 <lfs_file_write+0x54>)
 8020002:	f00a fb23 	bl	802a64c <__assert_func>
 8020006:	bf00      	nop
 8020008:	0803a55c 	.word	0x0803a55c
 802000c:	0803a60c 	.word	0x0803a60c
 8020010:	080399a8 	.word	0x080399a8

08020014 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8020014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020018:	4604      	mov	r4, r0
 802001a:	460d      	mov	r5, r1
 802001c:	4616      	mov	r6, r2
 802001e:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 8020020:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020022:	6942      	ldr	r2, [r0, #20]
 8020024:	4790      	blx	r2
    if (err) {
 8020026:	4607      	mov	r7, r0
 8020028:	b110      	cbz	r0, 8020030 <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 802002a:	4638      	mov	r0, r7
 802002c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020030:	4629      	mov	r1, r5
 8020032:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8020034:	f7fb fb1d 	bl	801b672 <lfs_mlist_isopen>
 8020038:	b150      	cbz	r0, 8020050 <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 802003a:	4643      	mov	r3, r8
 802003c:	4632      	mov	r2, r6
 802003e:	4629      	mov	r1, r5
 8020040:	4620      	mov	r0, r4
 8020042:	f7fd fa8d 	bl	801d560 <lfs_file_seek_>
 8020046:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 8020048:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 802004a:	6983      	ldr	r3, [r0, #24]
 802004c:	4798      	blx	r3
    return res;
 802004e:	e7ec      	b.n	802002a <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020050:	4b03      	ldr	r3, [pc, #12]	@ (8020060 <lfs_file_seek+0x4c>)
 8020052:	4a04      	ldr	r2, [pc, #16]	@ (8020064 <lfs_file_seek+0x50>)
 8020054:	f641 0117 	movw	r1, #6167	@ 0x1817
 8020058:	4803      	ldr	r0, [pc, #12]	@ (8020068 <lfs_file_seek+0x54>)
 802005a:	f00a faf7 	bl	802a64c <__assert_func>
 802005e:	bf00      	nop
 8020060:	0803a55c 	.word	0x0803a55c
 8020064:	0803a5ec 	.word	0x0803a5ec
 8020068:	080399a8 	.word	0x080399a8

0802006c <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 802006c:	b570      	push	{r4, r5, r6, lr}
 802006e:	4604      	mov	r4, r0
 8020070:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 8020072:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020074:	6943      	ldr	r3, [r0, #20]
 8020076:	4798      	blx	r3
    if (err) {
 8020078:	4606      	mov	r6, r0
 802007a:	b108      	cbz	r0, 8020080 <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 802007c:	4630      	mov	r0, r6
 802007e:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8020080:	4629      	mov	r1, r5
 8020082:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8020084:	f7fb faf5 	bl	801b672 <lfs_mlist_isopen>
 8020088:	b140      	cbz	r0, 802009c <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 802008a:	4629      	mov	r1, r5
 802008c:	4620      	mov	r0, r4
 802008e:	f7fb fba4 	bl	801b7da <lfs_file_tell_>
 8020092:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 8020094:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020096:	6983      	ldr	r3, [r0, #24]
 8020098:	4798      	blx	r3
    return res;
 802009a:	e7ef      	b.n	802007c <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802009c:	4b03      	ldr	r3, [pc, #12]	@ (80200ac <lfs_file_tell+0x40>)
 802009e:	4a04      	ldr	r2, [pc, #16]	@ (80200b0 <lfs_file_tell+0x44>)
 80200a0:	f641 0138 	movw	r1, #6200	@ 0x1838
 80200a4:	4803      	ldr	r0, [pc, #12]	@ (80200b4 <lfs_file_tell+0x48>)
 80200a6:	f00a fad1 	bl	802a64c <__assert_func>
 80200aa:	bf00      	nop
 80200ac:	0803a55c 	.word	0x0803a55c
 80200b0:	0803a5dc 	.word	0x0803a5dc
 80200b4:	080399a8 	.word	0x080399a8

080200b8 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 80200b8:	b570      	push	{r4, r5, r6, lr}
 80200ba:	4604      	mov	r4, r0
 80200bc:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 80200be:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80200c0:	6943      	ldr	r3, [r0, #20]
 80200c2:	4798      	blx	r3
    if (err) {
 80200c4:	4606      	mov	r6, r0
 80200c6:	b108      	cbz	r0, 80200cc <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 80200c8:	4630      	mov	r0, r6
 80200ca:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 80200cc:	4629      	mov	r1, r5
 80200ce:	4620      	mov	r0, r4
 80200d0:	f7ff fd22 	bl	801fb18 <lfs_mkdir_>
 80200d4:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 80200d6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80200d8:	6983      	ldr	r3, [r0, #24]
 80200da:	4798      	blx	r3
    return err;
 80200dc:	e7f4      	b.n	80200c8 <lfs_mkdir+0x10>
	...

080200e0 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80200e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200e2:	4604      	mov	r4, r0
 80200e4:	460f      	mov	r7, r1
 80200e6:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 80200e8:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80200ea:	6943      	ldr	r3, [r0, #20]
 80200ec:	4798      	blx	r3
    if (err) {
 80200ee:	4606      	mov	r6, r0
 80200f0:	b108      	cbz	r0, 80200f6 <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 80200f2:	4630      	mov	r0, r6
 80200f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 80200f6:	4639      	mov	r1, r7
 80200f8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80200fa:	f7fb faba 	bl	801b672 <lfs_mlist_isopen>
 80200fe:	b948      	cbnz	r0, 8020114 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 8020100:	462a      	mov	r2, r5
 8020102:	4639      	mov	r1, r7
 8020104:	4620      	mov	r0, r4
 8020106:	f7ff fa31 	bl	801f56c <lfs_dir_open_>
 802010a:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 802010c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 802010e:	6983      	ldr	r3, [r0, #24]
 8020110:	4798      	blx	r3
    return err;
 8020112:	e7ee      	b.n	80200f2 <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8020114:	4b03      	ldr	r3, [pc, #12]	@ (8020124 <lfs_dir_open+0x44>)
 8020116:	4a04      	ldr	r2, [pc, #16]	@ (8020128 <lfs_dir_open+0x48>)
 8020118:	f641 0174 	movw	r1, #6260	@ 0x1874
 802011c:	4803      	ldr	r0, [pc, #12]	@ (802012c <lfs_dir_open+0x4c>)
 802011e:	f00a fa95 	bl	802a64c <__assert_func>
 8020122:	bf00      	nop
 8020124:	0803a594 	.word	0x0803a594
 8020128:	0803a5cc 	.word	0x0803a5cc
 802012c:	080399a8 	.word	0x080399a8

08020130 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 8020130:	b570      	push	{r4, r5, r6, lr}
 8020132:	4604      	mov	r4, r0
 8020134:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 8020136:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020138:	6943      	ldr	r3, [r0, #20]
 802013a:	4798      	blx	r3
    if (err) {
 802013c:	4606      	mov	r6, r0
 802013e:	b108      	cbz	r0, 8020144 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020140:	4630      	mov	r0, r6
 8020142:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 8020144:	4629      	mov	r1, r5
 8020146:	4620      	mov	r0, r4
 8020148:	f7fb fb42 	bl	801b7d0 <lfs_dir_close_>
 802014c:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 802014e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020150:	6983      	ldr	r3, [r0, #24]
 8020152:	4798      	blx	r3
    return err;
 8020154:	e7f4      	b.n	8020140 <lfs_dir_close+0x10>

08020156 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8020156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020158:	4604      	mov	r4, r0
 802015a:	460d      	mov	r5, r1
 802015c:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 802015e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020160:	6943      	ldr	r3, [r0, #20]
 8020162:	4798      	blx	r3
    if (err) {
 8020164:	4607      	mov	r7, r0
 8020166:	b108      	cbz	r0, 802016c <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020168:	4638      	mov	r0, r7
 802016a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 802016c:	4632      	mov	r2, r6
 802016e:	4629      	mov	r1, r5
 8020170:	4620      	mov	r0, r4
 8020172:	f7ff fde5 	bl	801fd40 <lfs_dir_read_>
 8020176:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 8020178:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 802017a:	6983      	ldr	r3, [r0, #24]
 802017c:	4798      	blx	r3
    return err;
 802017e:	e7f3      	b.n	8020168 <lfs_dir_read+0x12>

08020180 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 8020180:	f04f 0c00 	mov.w	ip, #0
 8020184:	4594      	cmp	ip, r2
 8020186:	d218      	bcs.n	80201ba <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8020188:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 802018a:	f811 300c 	ldrb.w	r3, [r1, ip]
 802018e:	ea83 0e00 	eor.w	lr, r3, r0
 8020192:	f00e 0e0f 	and.w	lr, lr, #15
 8020196:	4c09      	ldr	r4, [pc, #36]	@ (80201bc <lfs_crc+0x3c>)
 8020198:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 802019c:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80201a0:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 80201a4:	f003 030f 	and.w	r3, r3, #15
 80201a8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80201ac:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 80201b0:	f10c 0c01 	add.w	ip, ip, #1
 80201b4:	4594      	cmp	ip, r2
 80201b6:	d3e8      	bcc.n	802018a <lfs_crc+0xa>
    }

    return crc;
}
 80201b8:	bd30      	pop	{r4, r5, pc}
 80201ba:	4770      	bx	lr
 80201bc:	0803a740 	.word	0x0803a740

080201c0 <mg_base64_decode_single>:
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
  if (c >= 'A' && c <= 'Z') {
 80201c0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80201c4:	2b19      	cmp	r3, #25
 80201c6:	d913      	bls.n	80201f0 <mg_base64_decode_single+0x30>
    return c - 'A';
  } else if (c >= 'a' && c <= 'z') {
 80201c8:	283d      	cmp	r0, #61	@ 0x3d
 80201ca:	dc18      	bgt.n	80201fe <mg_base64_decode_single+0x3e>
 80201cc:	282b      	cmp	r0, #43	@ 0x2b
 80201ce:	db20      	blt.n	8020212 <mg_base64_decode_single+0x52>
 80201d0:	f1a0 032b 	sub.w	r3, r0, #43	@ 0x2b
 80201d4:	2b12      	cmp	r3, #18
 80201d6:	d80f      	bhi.n	80201f8 <mg_base64_decode_single+0x38>
 80201d8:	e8df f003 	tbb	[pc, r3]
 80201dc:	0e0e0e0c 	.word	0x0e0e0e0c
 80201e0:	1717171e 	.word	0x1717171e
 80201e4:	17171717 	.word	0x17171717
 80201e8:	0e171717 	.word	0x0e171717
 80201ec:	0e0e      	.short	0x0e0e
 80201ee:	19          	.byte	0x19
 80201ef:	00          	.byte	0x00
    return c - 'A';
 80201f0:	4618      	mov	r0, r3
 80201f2:	4770      	bx	lr
  if (c >= 'A' && c <= 'Z') {
 80201f4:	203e      	movs	r0, #62	@ 0x3e
 80201f6:	4770      	bx	lr
  } else if (c == '/') {
    return 63;
  } else if (c == '=') {
    return 64;
  } else {
    return -1;
 80201f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80201fc:	4770      	bx	lr
 80201fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8020202:	2b19      	cmp	r3, #25
 8020204:	d80a      	bhi.n	802021c <mg_base64_decode_single+0x5c>
    return c + 26 - 'a';
 8020206:	3847      	subs	r0, #71	@ 0x47
 8020208:	4770      	bx	lr
    return c + 52 - '0';
 802020a:	3004      	adds	r0, #4
 802020c:	4770      	bx	lr
    return 64;
 802020e:	2040      	movs	r0, #64	@ 0x40
 8020210:	4770      	bx	lr
    return -1;
 8020212:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020216:	4770      	bx	lr
    return 63;
 8020218:	203f      	movs	r0, #63	@ 0x3f
 802021a:	4770      	bx	lr
    return -1;
 802021c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  }
}
 8020220:	4770      	bx	lr

08020222 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 8020222:	3830      	subs	r0, #48	@ 0x30
}
 8020224:	2809      	cmp	r0, #9
 8020226:	bf8c      	ite	hi
 8020228:	2000      	movhi	r0, #0
 802022a:	2001      	movls	r0, #1
 802022c:	4770      	bx	lr
	...

08020230 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8020230:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 8020232:	2365      	movs	r3, #101	@ 0x65
 8020234:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 8020236:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 8020238:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 802023c:	dc2c      	bgt.n	8020298 <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 802023e:	2909      	cmp	r1, #9
 8020240:	dc03      	bgt.n	802024a <addexp+0x1a>
 8020242:	2330      	movs	r3, #48	@ 0x30
 8020244:	7083      	strb	r3, [r0, #2]
 8020246:	2303      	movs	r3, #3
 8020248:	e000      	b.n	802024c <addexp+0x1c>
  buf[n++] = (char) sign;
 802024a:	2302      	movs	r3, #2
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 802024c:	2963      	cmp	r1, #99	@ 0x63
 802024e:	dd0d      	ble.n	802026c <addexp+0x3c>
 8020250:	4812      	ldr	r0, [pc, #72]	@ (802029c <addexp+0x6c>)
 8020252:	fb80 2001 	smull	r2, r0, r0, r1
 8020256:	17ca      	asrs	r2, r1, #31
 8020258:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 802025c:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 8020260:	f80c 0003 	strb.w	r0, [ip, r3]
 8020264:	2064      	movs	r0, #100	@ 0x64
 8020266:	fb00 1112 	mls	r1, r0, r2, r1
 802026a:	3301      	adds	r3, #1
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 802026c:	2909      	cmp	r1, #9
 802026e:	dd0e      	ble.n	802028e <addexp+0x5e>
 8020270:	480b      	ldr	r0, [pc, #44]	@ (80202a0 <addexp+0x70>)
 8020272:	fb80 2001 	smull	r2, r0, r0, r1
 8020276:	17ca      	asrs	r2, r1, #31
 8020278:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 802027c:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 8020280:	f80c 0003 	strb.w	r0, [ip, r3]
 8020284:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020288:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 802028c:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 802028e:	1c58      	adds	r0, r3, #1
 8020290:	3130      	adds	r1, #48	@ 0x30
 8020292:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 8020296:	4770      	bx	lr
  if (e > 400) return 0;
 8020298:	2000      	movs	r0, #0
}
 802029a:	4770      	bx	lr
 802029c:	51eb851f 	.word	0x51eb851f
 80202a0:	66666667 	.word	0x66666667

080202a4 <xisinf>:

static int xisinf(double x) {
 80202a4:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80202a8:	4611      	mov	r1, r2
 80202aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80202ae:	4a05      	ldr	r2, [pc, #20]	@ (80202c4 <xisinf+0x20>)
 80202b0:	4293      	cmp	r3, r2
 80202b2:	d001      	beq.n	80202b8 <xisinf+0x14>
 80202b4:	2000      	movs	r0, #0
 80202b6:	4770      	bx	lr
 80202b8:	b109      	cbz	r1, 80202be <xisinf+0x1a>
 80202ba:	2000      	movs	r0, #0
 80202bc:	4770      	bx	lr
 80202be:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 80202c0:	4770      	bx	lr
 80202c2:	bf00      	nop
 80202c4:	7ff00000 	.word	0x7ff00000

080202c8 <xisnan>:

static int xisnan(double x) {
 80202c8:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80202cc:	4602      	mov	r2, r0
 80202ce:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 80202d2:	2a00      	cmp	r2, #0
 80202d4:	bf18      	it	ne
 80202d6:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 80202d8:	4b02      	ldr	r3, [pc, #8]	@ (80202e4 <xisnan+0x1c>)
 80202da:	4298      	cmp	r0, r3
 80202dc:	bf94      	ite	ls
 80202de:	2000      	movls	r0, #0
 80202e0:	2001      	movhi	r0, #1
 80202e2:	4770      	bx	lr
 80202e4:	7ff00000 	.word	0x7ff00000

080202e8 <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 80202e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202ec:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80202f0:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 80202f4:	4694      	mov	ip, r2
 80202f6:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 80202f8:	b15c      	cbz	r4, 8020312 <mg_lld+0x2a>
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	db01      	blt.n	8020302 <mg_lld+0x1a>
  size_t s = 0, n, i;
 80202fe:	2500      	movs	r5, #0
 8020300:	e008      	b.n	8020314 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8020302:	242d      	movs	r4, #45	@ 0x2d
 8020304:	7004      	strb	r4, [r0, #0]
 8020306:	f1d2 0c00 	rsbs	ip, r2, #0
 802030a:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 802030e:	2501      	movs	r5, #1
 8020310:	e000      	b.n	8020314 <mg_lld+0x2c>
  size_t s = 0, n, i;
 8020312:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8020314:	b909      	cbnz	r1, 802031a <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8020316:	2400      	movs	r4, #0
 8020318:	e02f      	b.n	802037a <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 802031a:	2400      	movs	r4, #0
 802031c:	ea5c 010e 	orrs.w	r1, ip, lr
 8020320:	d05a      	beq.n	80203d8 <mg_lld+0xf0>
 8020322:	f00c 060f 	and.w	r6, ip, #15
 8020326:	1929      	adds	r1, r5, r4
 8020328:	4f38      	ldr	r7, [pc, #224]	@ (802040c <mg_lld+0x124>)
 802032a:	5dbe      	ldrb	r6, [r7, r6]
 802032c:	5446      	strb	r6, [r0, r1]
 802032e:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8020332:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 8020336:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 802033a:	3401      	adds	r4, #1
 802033c:	e7ee      	b.n	802031c <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 802033e:	2601      	movs	r6, #1
 8020340:	e022      	b.n	8020388 <mg_lld+0xa0>
 8020342:	4421      	add	r1, r4
 8020344:	4f32      	ldr	r7, [pc, #200]	@ (8020410 <mg_lld+0x128>)
 8020346:	fba7 4801 	umull	r4, r8, r7, r1
 802034a:	f028 0403 	bic.w	r4, r8, #3
 802034e:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 8020352:	1b09      	subs	r1, r1, r4
 8020354:	ebbc 0101 	subs.w	r1, ip, r1
 8020358:	f16e 0e00 	sbc.w	lr, lr, #0
 802035c:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 8020360:	fb01 f404 	mul.w	r4, r1, r4
 8020364:	fb07 440e 	mla	r4, r7, lr, r4
 8020368:	fba1 1707 	umull	r1, r7, r1, r7
 802036c:	443c      	add	r4, r7
 802036e:	0849      	lsrs	r1, r1, #1
 8020370:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 8020374:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 8020378:	4634      	mov	r4, r6
 802037a:	ea5c 010e 	orrs.w	r1, ip, lr
 802037e:	d02b      	beq.n	80203d8 <mg_lld+0xf0>
 8020380:	2600      	movs	r6, #0
 8020382:	eb1c 010e 	adds.w	r1, ip, lr
 8020386:	d2da      	bcs.n	802033e <mg_lld+0x56>
 8020388:	4431      	add	r1, r6
 802038a:	4f21      	ldr	r7, [pc, #132]	@ (8020410 <mg_lld+0x128>)
 802038c:	fba7 6801 	umull	r6, r8, r7, r1
 8020390:	f028 0603 	bic.w	r6, r8, #3
 8020394:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 8020398:	1b89      	subs	r1, r1, r6
 802039a:	ebbc 0101 	subs.w	r1, ip, r1
 802039e:	f16e 0800 	sbc.w	r8, lr, #0
 80203a2:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 80203a6:	fb01 f606 	mul.w	r6, r1, r6
 80203aa:	fb07 6608 	mla	r6, r7, r8, r6
 80203ae:	fba1 1707 	umull	r1, r7, r1, r7
 80203b2:	443e      	add	r6, r7
 80203b4:	0849      	lsrs	r1, r1, #1
 80203b6:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 80203ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80203be:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 80203c2:	1c66      	adds	r6, r4, #1
 80203c4:	442c      	add	r4, r5
 80203c6:	4f11      	ldr	r7, [pc, #68]	@ (802040c <mg_lld+0x124>)
 80203c8:	5c79      	ldrb	r1, [r7, r1]
 80203ca:	5501      	strb	r1, [r0, r4]
 80203cc:	2400      	movs	r4, #0
 80203ce:	eb1c 010e 	adds.w	r1, ip, lr
 80203d2:	d3b6      	bcc.n	8020342 <mg_lld+0x5a>
 80203d4:	2401      	movs	r4, #1
 80203d6:	e7b4      	b.n	8020342 <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 80203d8:	2600      	movs	r6, #0
 80203da:	e00c      	b.n	80203f6 <mg_lld+0x10e>
    char t = buf[s + i];
 80203dc:	19af      	adds	r7, r5, r6
 80203de:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 80203e2:	1929      	adds	r1, r5, r4
 80203e4:	1b89      	subs	r1, r1, r6
 80203e6:	3901      	subs	r1, #1
 80203e8:	f810 e001 	ldrb.w	lr, [r0, r1]
 80203ec:	f800 e007 	strb.w	lr, [r0, r7]
 80203f0:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 80203f4:	3601      	adds	r6, #1
 80203f6:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 80203fa:	d3ef      	bcc.n	80203dc <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 80203fc:	4313      	orrs	r3, r2
 80203fe:	d102      	bne.n	8020406 <mg_lld+0x11e>
 8020400:	2330      	movs	r3, #48	@ 0x30
 8020402:	5503      	strb	r3, [r0, r4]
 8020404:	3401      	adds	r4, #1
  return n + s;
}
 8020406:	1928      	adds	r0, r5, r4
 8020408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802040c:	0803a780 	.word	0x0803a780
 8020410:	cccccccd 	.word	0xcccccccd

08020414 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8020414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020418:	4680      	mov	r8, r0
 802041a:	460f      	mov	r7, r1
 802041c:	4616      	mov	r6, r2
 802041e:	461d      	mov	r5, r3
  size_t i = 0;
 8020420:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8020422:	e002      	b.n	802042a <scpy+0x16>
 8020424:	3401      	adds	r4, #1
 8020426:	4639      	mov	r1, r7
 8020428:	47c0      	blx	r8
 802042a:	42ac      	cmp	r4, r5
 802042c:	d202      	bcs.n	8020434 <scpy+0x20>
 802042e:	5d30      	ldrb	r0, [r6, r4]
 8020430:	2800      	cmp	r0, #0
 8020432:	d1f7      	bne.n	8020424 <scpy+0x10>
  return i;
}
 8020434:	4620      	mov	r0, r4
 8020436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802043a <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 802043a:	2000      	movs	r0, #0
 802043c:	4770      	bx	lr

0802043e <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 802043e:	4770      	bx	lr

08020440 <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 8020440:	2000      	movs	r0, #0
 8020442:	4770      	bx	lr

08020444 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 8020444:	4770      	bx	lr

08020446 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 8020446:	2000      	movs	r0, #0
 8020448:	4770      	bx	lr

0802044a <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 802044a:	2000      	movs	r0, #0
 802044c:	4770      	bx	lr

0802044e <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 802044e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020452:	4770      	bx	lr

08020454 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 8020454:	2000      	movs	r0, #0
 8020456:	4770      	bx	lr

08020458 <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 8020458:	2000      	movs	r0, #0
 802045a:	4770      	bx	lr

0802045c <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 802045c:	2000      	movs	r0, #0
 802045e:	4770      	bx	lr

08020460 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8020460:	b530      	push	{r4, r5, lr}
 8020462:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 8020464:	4614      	mov	r4, r2
 8020466:	b94a      	cbnz	r2, 802047c <mg_ncasecmp+0x1c>
  int diff = 0;
 8020468:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 802046a:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 802046c:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8020470:	1a18      	subs	r0, r3, r0
 8020472:	d1fa      	bne.n	802046a <mg_ncasecmp+0xa>
 8020474:	2a00      	cmp	r2, #0
 8020476:	d0f8      	beq.n	802046a <mg_ncasecmp+0xa>
 8020478:	3c01      	subs	r4, #1
 802047a:	d0f6      	beq.n	802046a <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 802047c:	f89e 2000 	ldrb.w	r2, [lr]
 8020480:	f10e 0e01 	add.w	lr, lr, #1
 8020484:	4613      	mov	r3, r2
 8020486:	f891 c000 	ldrb.w	ip, [r1]
 802048a:	3101      	adds	r1, #1
 802048c:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 802048e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8020492:	2d19      	cmp	r5, #25
 8020494:	d801      	bhi.n	802049a <mg_ncasecmp+0x3a>
 8020496:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 802049a:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 802049e:	2d19      	cmp	r5, #25
 80204a0:	d8e6      	bhi.n	8020470 <mg_ncasecmp+0x10>
 80204a2:	e7e3      	b.n	802046c <mg_ncasecmp+0xc>

080204a4 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80204a4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80204a8:	2b09      	cmp	r3, #9
 80204aa:	d908      	bls.n	80204be <isx+0x1a>
 80204ac:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80204b0:	2b05      	cmp	r3, #5
 80204b2:	d906      	bls.n	80204c2 <isx+0x1e>
         (c >= 'A' && c <= 'F');
 80204b4:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80204b6:	2805      	cmp	r0, #5
 80204b8:	d805      	bhi.n	80204c6 <isx+0x22>
 80204ba:	2001      	movs	r0, #1
 80204bc:	4770      	bx	lr
 80204be:	2001      	movs	r0, #1
 80204c0:	4770      	bx	lr
 80204c2:	2001      	movs	r0, #1
 80204c4:	4770      	bx	lr
 80204c6:	2000      	movs	r0, #0
}
 80204c8:	4770      	bx	lr

080204ca <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 80204ca:	280a      	cmp	r0, #10
 80204cc:	d007      	beq.n	80204de <isok+0x14>
 80204ce:	280d      	cmp	r0, #13
 80204d0:	d007      	beq.n	80204e2 <isok+0x18>
 80204d2:	2809      	cmp	r0, #9
 80204d4:	d007      	beq.n	80204e6 <isok+0x1c>
 80204d6:	281f      	cmp	r0, #31
 80204d8:	d907      	bls.n	80204ea <isok+0x20>
 80204da:	2001      	movs	r0, #1
 80204dc:	4770      	bx	lr
 80204de:	2001      	movs	r0, #1
 80204e0:	4770      	bx	lr
 80204e2:	2001      	movs	r0, #1
 80204e4:	4770      	bx	lr
 80204e6:	2001      	movs	r0, #1
 80204e8:	4770      	bx	lr
 80204ea:	2000      	movs	r0, #0
}
 80204ec:	4770      	bx	lr

080204ee <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 80204ee:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 80204f2:	2880      	cmp	r0, #128	@ 0x80
 80204f4:	bf14      	ite	ne
 80204f6:	2000      	movne	r0, #0
 80204f8:	2001      	moveq	r0, #1
 80204fa:	4770      	bx	lr

080204fc <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 80204fc:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 80204fe:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 8020500:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8020502:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 8020506:	b2db      	uxtb	r3, r3
 8020508:	2b5c      	cmp	r3, #92	@ 0x5c
 802050a:	d936      	bls.n	802057a <clen+0x7e>
 802050c:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 802050e:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 8020512:	2bc0      	cmp	r3, #192	@ 0xc0
 8020514:	d009      	beq.n	802052a <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8020516:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 802051a:	2be0      	cmp	r3, #224	@ 0xe0
 802051c:	d00e      	beq.n	802053c <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 802051e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020522:	2df0      	cmp	r5, #240	@ 0xf0
 8020524:	d018      	beq.n	8020558 <clen+0x5c>
    return 4;
  return 0;
 8020526:	2000      	movs	r0, #0
}
 8020528:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 802052a:	2e01      	cmp	r6, #1
 802052c:	ddf3      	ble.n	8020516 <clen+0x1a>
 802052e:	7840      	ldrb	r0, [r0, #1]
 8020530:	f7ff ffdd 	bl	80204ee <vcb>
 8020534:	2800      	cmp	r0, #0
 8020536:	d0ee      	beq.n	8020516 <clen+0x1a>
 8020538:	2002      	movs	r0, #2
 802053a:	e7f5      	b.n	8020528 <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 802053c:	2e02      	cmp	r6, #2
 802053e:	ddee      	ble.n	802051e <clen+0x22>
 8020540:	7860      	ldrb	r0, [r4, #1]
 8020542:	f7ff ffd4 	bl	80204ee <vcb>
 8020546:	2800      	cmp	r0, #0
 8020548:	d0e9      	beq.n	802051e <clen+0x22>
 802054a:	78a0      	ldrb	r0, [r4, #2]
 802054c:	f7ff ffcf 	bl	80204ee <vcb>
 8020550:	2800      	cmp	r0, #0
 8020552:	d0e4      	beq.n	802051e <clen+0x22>
 8020554:	2003      	movs	r0, #3
 8020556:	e7e7      	b.n	8020528 <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8020558:	2e03      	cmp	r6, #3
 802055a:	dd10      	ble.n	802057e <clen+0x82>
 802055c:	7860      	ldrb	r0, [r4, #1]
 802055e:	f7ff ffc6 	bl	80204ee <vcb>
 8020562:	b170      	cbz	r0, 8020582 <clen+0x86>
 8020564:	78a0      	ldrb	r0, [r4, #2]
 8020566:	f7ff ffc2 	bl	80204ee <vcb>
 802056a:	b160      	cbz	r0, 8020586 <clen+0x8a>
 802056c:	78e0      	ldrb	r0, [r4, #3]
 802056e:	f7ff ffbe 	bl	80204ee <vcb>
 8020572:	2800      	cmp	r0, #0
 8020574:	d0d8      	beq.n	8020528 <clen+0x2c>
    return 4;
 8020576:	2004      	movs	r0, #4
 8020578:	e7d6      	b.n	8020528 <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 802057a:	2001      	movs	r0, #1
 802057c:	e7d4      	b.n	8020528 <clen+0x2c>
  return 0;
 802057e:	2000      	movs	r0, #0
 8020580:	e7d2      	b.n	8020528 <clen+0x2c>
 8020582:	2000      	movs	r0, #0
 8020584:	e7d0      	b.n	8020528 <clen+0x2c>
 8020586:	2000      	movs	r0, #0
 8020588:	e7ce      	b.n	8020528 <clen+0x2c>

0802058a <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 802058a:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 802058c:	e003      	b.n	8020596 <skiptorn+0xc>
 802058e:	3001      	adds	r0, #1
 8020590:	6853      	ldr	r3, [r2, #4]
 8020592:	3301      	adds	r3, #1
 8020594:	6053      	str	r3, [r2, #4]
 8020596:	4288      	cmp	r0, r1
 8020598:	d204      	bcs.n	80205a4 <skiptorn+0x1a>
 802059a:	7803      	ldrb	r3, [r0, #0]
 802059c:	2b0a      	cmp	r3, #10
 802059e:	d001      	beq.n	80205a4 <skiptorn+0x1a>
 80205a0:	2b0d      	cmp	r3, #13
 80205a2:	d1f4      	bne.n	802058e <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 80205a4:	4288      	cmp	r0, r1
 80205a6:	d212      	bcs.n	80205ce <skiptorn+0x44>
 80205a8:	7803      	ldrb	r3, [r0, #0]
 80205aa:	2b0d      	cmp	r3, #13
 80205ac:	d008      	beq.n	80205c0 <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 80205ae:	2b0d      	cmp	r3, #13
 80205b0:	d00b      	beq.n	80205ca <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 80205b2:	4288      	cmp	r0, r1
 80205b4:	d20d      	bcs.n	80205d2 <skiptorn+0x48>
 80205b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80205ba:	2b0a      	cmp	r3, #10
 80205bc:	d10b      	bne.n	80205d6 <skiptorn+0x4c>
  return s;
}
 80205be:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 80205c0:	7842      	ldrb	r2, [r0, #1]
 80205c2:	2a0a      	cmp	r2, #10
 80205c4:	d0f3      	beq.n	80205ae <skiptorn+0x24>
 80205c6:	2000      	movs	r0, #0
 80205c8:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 80205ca:	3001      	adds	r0, #1
 80205cc:	e7f1      	b.n	80205b2 <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 80205ce:	2000      	movs	r0, #0
 80205d0:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 80205d2:	2000      	movs	r0, #0
 80205d4:	4770      	bx	lr
 80205d6:	2000      	movs	r0, #0
 80205d8:	e7f1      	b.n	80205be <skiptorn+0x34>

080205da <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 80205da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80205de:	b084      	sub	sp, #16
 80205e0:	4604      	mov	r4, r0
 80205e2:	460d      	mov	r5, r1
 80205e4:	4690      	mov	r8, r2
 80205e6:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 80205e8:	2600      	movs	r6, #0
 80205ea:	e04d      	b.n	8020688 <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 80205ec:	7863      	ldrb	r3, [r4, #1]
 80205ee:	2b0a      	cmp	r3, #10
 80205f0:	d158      	bne.n	80206a4 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 80205f2:	2001      	movs	r0, #1
 80205f4:	e01e      	b.n	8020634 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 80205f6:	4414      	add	r4, r2
 80205f8:	9b01      	ldr	r3, [sp, #4]
 80205fa:	4413      	add	r3, r2
 80205fc:	9301      	str	r3, [sp, #4]
 80205fe:	42ac      	cmp	r4, r5
 8020600:	d209      	bcs.n	8020616 <mg_http_parse_headers+0x3c>
 8020602:	7823      	ldrb	r3, [r4, #0]
 8020604:	2b3a      	cmp	r3, #58	@ 0x3a
 8020606:	d006      	beq.n	8020616 <mg_http_parse_headers+0x3c>
 8020608:	4629      	mov	r1, r5
 802060a:	4620      	mov	r0, r4
 802060c:	f7ff ff76 	bl	80204fc <clen>
 8020610:	4602      	mov	r2, r0
 8020612:	2800      	cmp	r0, #0
 8020614:	d1ef      	bne.n	80205f6 <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 8020616:	9b01      	ldr	r3, [sp, #4]
 8020618:	b15b      	cbz	r3, 8020632 <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 802061a:	42ac      	cmp	r4, r5
 802061c:	d209      	bcs.n	8020632 <mg_http_parse_headers+0x58>
 802061e:	4629      	mov	r1, r5
 8020620:	4620      	mov	r0, r4
 8020622:	f7ff ff6b 	bl	80204fc <clen>
 8020626:	b120      	cbz	r0, 8020632 <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8020628:	4620      	mov	r0, r4
 802062a:	f810 3b01 	ldrb.w	r3, [r0], #1
 802062e:	2b3a      	cmp	r3, #58	@ 0x3a
 8020630:	d004      	beq.n	802063c <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 8020632:	2000      	movs	r0, #0
}
 8020634:	b004      	add	sp, #16
 8020636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 802063a:	3001      	adds	r0, #1
 802063c:	42a8      	cmp	r0, r5
 802063e:	d204      	bcs.n	802064a <mg_http_parse_headers+0x70>
 8020640:	7803      	ldrb	r3, [r0, #0]
 8020642:	2b20      	cmp	r3, #32
 8020644:	d0f9      	beq.n	802063a <mg_http_parse_headers+0x60>
 8020646:	2b09      	cmp	r3, #9
 8020648:	d0f7      	beq.n	802063a <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 802064a:	aa02      	add	r2, sp, #8
 802064c:	4629      	mov	r1, r5
 802064e:	f7ff ff9c 	bl	802058a <skiptorn>
 8020652:	4604      	mov	r4, r0
 8020654:	b908      	cbnz	r0, 802065a <mg_http_parse_headers+0x80>
 8020656:	e7ec      	b.n	8020632 <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 8020658:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 802065a:	9803      	ldr	r0, [sp, #12]
 802065c:	b130      	cbz	r0, 802066c <mg_http_parse_headers+0x92>
 802065e:	3801      	subs	r0, #1
 8020660:	9b02      	ldr	r3, [sp, #8]
 8020662:	5c1b      	ldrb	r3, [r3, r0]
 8020664:	2b20      	cmp	r3, #32
 8020666:	d0f7      	beq.n	8020658 <mg_http_parse_headers+0x7e>
 8020668:	2b09      	cmp	r3, #9
 802066a:	d0f5      	beq.n	8020658 <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 802066c:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 8020670:	466a      	mov	r2, sp
 8020672:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020676:	e883 0003 	stmia.w	r3, {r0, r1}
 802067a:	3308      	adds	r3, #8
 802067c:	aa04      	add	r2, sp, #16
 802067e:	e912 0003 	ldmdb	r2, {r0, r1}
 8020682:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8020686:	3601      	adds	r6, #1
 8020688:	42be      	cmp	r6, r7
 802068a:	d20d      	bcs.n	80206a8 <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 802068c:	2300      	movs	r3, #0
 802068e:	9300      	str	r3, [sp, #0]
 8020690:	9301      	str	r3, [sp, #4]
 8020692:	9302      	str	r3, [sp, #8]
 8020694:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 8020696:	42ac      	cmp	r4, r5
 8020698:	d2cb      	bcs.n	8020632 <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 802069a:	7823      	ldrb	r3, [r4, #0]
 802069c:	2b0a      	cmp	r3, #10
 802069e:	d0a8      	beq.n	80205f2 <mg_http_parse_headers+0x18>
 80206a0:	2b0d      	cmp	r3, #13
 80206a2:	d0a3      	beq.n	80205ec <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 80206a4:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 80206a6:	e7aa      	b.n	80205fe <mg_http_parse_headers+0x24>
  return true;
 80206a8:	2001      	movs	r0, #1
 80206aa:	e7c3      	b.n	8020634 <mg_http_parse_headers+0x5a>

080206ac <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 80206ac:	3864      	subs	r0, #100	@ 0x64
 80206ae:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80206b2:	4298      	cmp	r0, r3
 80206b4:	f200 8272 	bhi.w	8020b9c <mg_http_status_code_str+0x4f0>
 80206b8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80206bc:	027201f4 	.word	0x027201f4
 80206c0:	027001f6 	.word	0x027001f6
 80206c4:	02700270 	.word	0x02700270
 80206c8:	02700270 	.word	0x02700270
 80206cc:	02700270 	.word	0x02700270
 80206d0:	02700270 	.word	0x02700270
 80206d4:	02700270 	.word	0x02700270
 80206d8:	02700270 	.word	0x02700270
 80206dc:	02700270 	.word	0x02700270
 80206e0:	02700270 	.word	0x02700270
 80206e4:	02700270 	.word	0x02700270
 80206e8:	02700270 	.word	0x02700270
 80206ec:	02700270 	.word	0x02700270
 80206f0:	02700270 	.word	0x02700270
 80206f4:	02700270 	.word	0x02700270
 80206f8:	02700270 	.word	0x02700270
 80206fc:	02700270 	.word	0x02700270
 8020700:	02700270 	.word	0x02700270
 8020704:	02700270 	.word	0x02700270
 8020708:	02700270 	.word	0x02700270
 802070c:	02700270 	.word	0x02700270
 8020710:	02700270 	.word	0x02700270
 8020714:	02700270 	.word	0x02700270
 8020718:	02700270 	.word	0x02700270
 802071c:	02700270 	.word	0x02700270
 8020720:	02700270 	.word	0x02700270
 8020724:	02700270 	.word	0x02700270
 8020728:	02700270 	.word	0x02700270
 802072c:	02700270 	.word	0x02700270
 8020730:	02700270 	.word	0x02700270
 8020734:	02700270 	.word	0x02700270
 8020738:	02700270 	.word	0x02700270
 802073c:	02700270 	.word	0x02700270
 8020740:	02700270 	.word	0x02700270
 8020744:	02700270 	.word	0x02700270
 8020748:	02700270 	.word	0x02700270
 802074c:	02700270 	.word	0x02700270
 8020750:	02700270 	.word	0x02700270
 8020754:	02700270 	.word	0x02700270
 8020758:	02700270 	.word	0x02700270
 802075c:	02700270 	.word	0x02700270
 8020760:	02700270 	.word	0x02700270
 8020764:	02700270 	.word	0x02700270
 8020768:	02700270 	.word	0x02700270
 802076c:	02700270 	.word	0x02700270
 8020770:	02700270 	.word	0x02700270
 8020774:	02700270 	.word	0x02700270
 8020778:	02700270 	.word	0x02700270
 802077c:	02700270 	.word	0x02700270
 8020780:	02700270 	.word	0x02700270
 8020784:	01fa01f8 	.word	0x01fa01f8
 8020788:	01fe01fc 	.word	0x01fe01fc
 802078c:	02020200 	.word	0x02020200
 8020790:	02060204 	.word	0x02060204
 8020794:	02700208 	.word	0x02700208
 8020798:	02700270 	.word	0x02700270
 802079c:	02700270 	.word	0x02700270
 80207a0:	02700270 	.word	0x02700270
 80207a4:	02700270 	.word	0x02700270
 80207a8:	02700270 	.word	0x02700270
 80207ac:	02700270 	.word	0x02700270
 80207b0:	02700270 	.word	0x02700270
 80207b4:	02700270 	.word	0x02700270
 80207b8:	0270020a 	.word	0x0270020a
 80207bc:	02700270 	.word	0x02700270
 80207c0:	02700270 	.word	0x02700270
 80207c4:	02700270 	.word	0x02700270
 80207c8:	02700270 	.word	0x02700270
 80207cc:	02700270 	.word	0x02700270
 80207d0:	02700270 	.word	0x02700270
 80207d4:	02700270 	.word	0x02700270
 80207d8:	02700270 	.word	0x02700270
 80207dc:	02700270 	.word	0x02700270
 80207e0:	02700270 	.word	0x02700270
 80207e4:	02700270 	.word	0x02700270
 80207e8:	02700270 	.word	0x02700270
 80207ec:	02700270 	.word	0x02700270
 80207f0:	02700270 	.word	0x02700270
 80207f4:	02700270 	.word	0x02700270
 80207f8:	02700270 	.word	0x02700270
 80207fc:	02700270 	.word	0x02700270
 8020800:	02700270 	.word	0x02700270
 8020804:	02700270 	.word	0x02700270
 8020808:	02700270 	.word	0x02700270
 802080c:	02700270 	.word	0x02700270
 8020810:	02700270 	.word	0x02700270
 8020814:	02700270 	.word	0x02700270
 8020818:	02700270 	.word	0x02700270
 802081c:	02700270 	.word	0x02700270
 8020820:	02700270 	.word	0x02700270
 8020824:	02700270 	.word	0x02700270
 8020828:	02700270 	.word	0x02700270
 802082c:	02700270 	.word	0x02700270
 8020830:	02700270 	.word	0x02700270
 8020834:	02700270 	.word	0x02700270
 8020838:	02700270 	.word	0x02700270
 802083c:	02700270 	.word	0x02700270
 8020840:	02700270 	.word	0x02700270
 8020844:	02700270 	.word	0x02700270
 8020848:	02700270 	.word	0x02700270
 802084c:	020e020c 	.word	0x020e020c
 8020850:	02120210 	.word	0x02120210
 8020854:	02160214 	.word	0x02160214
 8020858:	02180270 	.word	0x02180270
 802085c:	0270021a 	.word	0x0270021a
 8020860:	02700270 	.word	0x02700270
 8020864:	02700270 	.word	0x02700270
 8020868:	02700270 	.word	0x02700270
 802086c:	02700270 	.word	0x02700270
 8020870:	02700270 	.word	0x02700270
 8020874:	02700270 	.word	0x02700270
 8020878:	02700270 	.word	0x02700270
 802087c:	02700270 	.word	0x02700270
 8020880:	02700270 	.word	0x02700270
 8020884:	02700270 	.word	0x02700270
 8020888:	02700270 	.word	0x02700270
 802088c:	02700270 	.word	0x02700270
 8020890:	02700270 	.word	0x02700270
 8020894:	02700270 	.word	0x02700270
 8020898:	02700270 	.word	0x02700270
 802089c:	02700270 	.word	0x02700270
 80208a0:	02700270 	.word	0x02700270
 80208a4:	02700270 	.word	0x02700270
 80208a8:	02700270 	.word	0x02700270
 80208ac:	02700270 	.word	0x02700270
 80208b0:	02700270 	.word	0x02700270
 80208b4:	02700270 	.word	0x02700270
 80208b8:	02700270 	.word	0x02700270
 80208bc:	02700270 	.word	0x02700270
 80208c0:	02700270 	.word	0x02700270
 80208c4:	02700270 	.word	0x02700270
 80208c8:	02700270 	.word	0x02700270
 80208cc:	02700270 	.word	0x02700270
 80208d0:	02700270 	.word	0x02700270
 80208d4:	02700270 	.word	0x02700270
 80208d8:	02700270 	.word	0x02700270
 80208dc:	02700270 	.word	0x02700270
 80208e0:	02700270 	.word	0x02700270
 80208e4:	02700270 	.word	0x02700270
 80208e8:	02700270 	.word	0x02700270
 80208ec:	02700270 	.word	0x02700270
 80208f0:	02700270 	.word	0x02700270
 80208f4:	02700270 	.word	0x02700270
 80208f8:	02700270 	.word	0x02700270
 80208fc:	02700270 	.word	0x02700270
 8020900:	02700270 	.word	0x02700270
 8020904:	02700270 	.word	0x02700270
 8020908:	02700270 	.word	0x02700270
 802090c:	02700270 	.word	0x02700270
 8020910:	02700270 	.word	0x02700270
 8020914:	021e021c 	.word	0x021e021c
 8020918:	02220220 	.word	0x02220220
 802091c:	02260224 	.word	0x02260224
 8020920:	022a0228 	.word	0x022a0228
 8020924:	022e022c 	.word	0x022e022c
 8020928:	02320230 	.word	0x02320230
 802092c:	02360234 	.word	0x02360234
 8020930:	023a0238 	.word	0x023a0238
 8020934:	023e023c 	.word	0x023e023c
 8020938:	02700240 	.word	0x02700240
 802093c:	02420270 	.word	0x02420270
 8020940:	02460244 	.word	0x02460244
 8020944:	02700248 	.word	0x02700248
 8020948:	0270024a 	.word	0x0270024a
 802094c:	024e024c 	.word	0x024e024c
 8020950:	02500270 	.word	0x02500270
 8020954:	02700270 	.word	0x02700270
 8020958:	02700270 	.word	0x02700270
 802095c:	02700270 	.word	0x02700270
 8020960:	02700270 	.word	0x02700270
 8020964:	02700270 	.word	0x02700270
 8020968:	02700270 	.word	0x02700270
 802096c:	02700252 	.word	0x02700252
 8020970:	02700270 	.word	0x02700270
 8020974:	02700270 	.word	0x02700270
 8020978:	02540270 	.word	0x02540270
 802097c:	02700270 	.word	0x02700270
 8020980:	02700270 	.word	0x02700270
 8020984:	02700270 	.word	0x02700270
 8020988:	02700270 	.word	0x02700270
 802098c:	02700270 	.word	0x02700270
 8020990:	02700270 	.word	0x02700270
 8020994:	02700270 	.word	0x02700270
 8020998:	02700270 	.word	0x02700270
 802099c:	02700270 	.word	0x02700270
 80209a0:	02700270 	.word	0x02700270
 80209a4:	02700270 	.word	0x02700270
 80209a8:	02700270 	.word	0x02700270
 80209ac:	02700270 	.word	0x02700270
 80209b0:	02700270 	.word	0x02700270
 80209b4:	02700270 	.word	0x02700270
 80209b8:	02700270 	.word	0x02700270
 80209bc:	02700270 	.word	0x02700270
 80209c0:	02700270 	.word	0x02700270
 80209c4:	02700270 	.word	0x02700270
 80209c8:	02700270 	.word	0x02700270
 80209cc:	02700270 	.word	0x02700270
 80209d0:	02700270 	.word	0x02700270
 80209d4:	02700270 	.word	0x02700270
 80209d8:	02560270 	.word	0x02560270
 80209dc:	025a0258 	.word	0x025a0258
 80209e0:	025e025c 	.word	0x025e025c
 80209e4:	02620260 	.word	0x02620260
 80209e8:	02660264 	.word	0x02660264
 80209ec:	02700268 	.word	0x02700268
 80209f0:	026c026a 	.word	0x026c026a
 80209f4:	02700270 	.word	0x02700270
 80209f8:	02700270 	.word	0x02700270
 80209fc:	02700270 	.word	0x02700270
 8020a00:	02700270 	.word	0x02700270
 8020a04:	02700270 	.word	0x02700270
 8020a08:	02700270 	.word	0x02700270
 8020a0c:	02700270 	.word	0x02700270
 8020a10:	02700270 	.word	0x02700270
 8020a14:	02700270 	.word	0x02700270
 8020a18:	02700270 	.word	0x02700270
 8020a1c:	02700270 	.word	0x02700270
 8020a20:	02700270 	.word	0x02700270
 8020a24:	02700270 	.word	0x02700270
 8020a28:	02700270 	.word	0x02700270
 8020a2c:	02700270 	.word	0x02700270
 8020a30:	02700270 	.word	0x02700270
 8020a34:	02700270 	.word	0x02700270
 8020a38:	02700270 	.word	0x02700270
 8020a3c:	02700270 	.word	0x02700270
 8020a40:	02700270 	.word	0x02700270
 8020a44:	02700270 	.word	0x02700270
 8020a48:	02700270 	.word	0x02700270
 8020a4c:	02700270 	.word	0x02700270
 8020a50:	02700270 	.word	0x02700270
 8020a54:	02700270 	.word	0x02700270
 8020a58:	02700270 	.word	0x02700270
 8020a5c:	02700270 	.word	0x02700270
 8020a60:	02700270 	.word	0x02700270
 8020a64:	02700270 	.word	0x02700270
 8020a68:	02700270 	.word	0x02700270
 8020a6c:	02700270 	.word	0x02700270
 8020a70:	02700270 	.word	0x02700270
 8020a74:	02700270 	.word	0x02700270
 8020a78:	02700270 	.word	0x02700270
 8020a7c:	02700270 	.word	0x02700270
 8020a80:	02700270 	.word	0x02700270
 8020a84:	02700270 	.word	0x02700270
 8020a88:	02700270 	.word	0x02700270
 8020a8c:	02700270 	.word	0x02700270
 8020a90:	02700270 	.word	0x02700270
 8020a94:	02700270 	.word	0x02700270
 8020a98:	02700270 	.word	0x02700270
 8020a9c:	02700270 	.word	0x02700270
 8020aa0:	026e0270 	.word	0x026e0270
 8020aa4:	483f      	ldr	r0, [pc, #252]	@ (8020ba4 <mg_http_status_code_str+0x4f8>)
 8020aa6:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 8020aa8:	483f      	ldr	r0, [pc, #252]	@ (8020ba8 <mg_http_status_code_str+0x4fc>)
 8020aaa:	4770      	bx	lr
    case 200: return "OK";
 8020aac:	483f      	ldr	r0, [pc, #252]	@ (8020bac <mg_http_status_code_str+0x500>)
 8020aae:	4770      	bx	lr
    case 201: return "Created";
 8020ab0:	483f      	ldr	r0, [pc, #252]	@ (8020bb0 <mg_http_status_code_str+0x504>)
 8020ab2:	4770      	bx	lr
    case 202: return "Accepted";
 8020ab4:	483f      	ldr	r0, [pc, #252]	@ (8020bb4 <mg_http_status_code_str+0x508>)
 8020ab6:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 8020ab8:	483f      	ldr	r0, [pc, #252]	@ (8020bb8 <mg_http_status_code_str+0x50c>)
 8020aba:	4770      	bx	lr
    case 204: return "No Content";
 8020abc:	483f      	ldr	r0, [pc, #252]	@ (8020bbc <mg_http_status_code_str+0x510>)
 8020abe:	4770      	bx	lr
    case 205: return "Reset Content";
 8020ac0:	483f      	ldr	r0, [pc, #252]	@ (8020bc0 <mg_http_status_code_str+0x514>)
 8020ac2:	4770      	bx	lr
    case 206: return "Partial Content";
 8020ac4:	483f      	ldr	r0, [pc, #252]	@ (8020bc4 <mg_http_status_code_str+0x518>)
 8020ac6:	4770      	bx	lr
    case 207: return "Multi-Status";
 8020ac8:	483f      	ldr	r0, [pc, #252]	@ (8020bc8 <mg_http_status_code_str+0x51c>)
 8020aca:	4770      	bx	lr
    case 208: return "Already Reported";
 8020acc:	483f      	ldr	r0, [pc, #252]	@ (8020bcc <mg_http_status_code_str+0x520>)
 8020ace:	4770      	bx	lr
    case 226: return "IM Used";
 8020ad0:	483f      	ldr	r0, [pc, #252]	@ (8020bd0 <mg_http_status_code_str+0x524>)
 8020ad2:	4770      	bx	lr
    case 300: return "Multiple Choices";
 8020ad4:	483f      	ldr	r0, [pc, #252]	@ (8020bd4 <mg_http_status_code_str+0x528>)
 8020ad6:	4770      	bx	lr
    case 301: return "Moved Permanently";
 8020ad8:	483f      	ldr	r0, [pc, #252]	@ (8020bd8 <mg_http_status_code_str+0x52c>)
 8020ada:	4770      	bx	lr
    case 302: return "Found";
 8020adc:	483f      	ldr	r0, [pc, #252]	@ (8020bdc <mg_http_status_code_str+0x530>)
 8020ade:	4770      	bx	lr
    case 303: return "See Other";
 8020ae0:	483f      	ldr	r0, [pc, #252]	@ (8020be0 <mg_http_status_code_str+0x534>)
 8020ae2:	4770      	bx	lr
    case 304: return "Not Modified";
 8020ae4:	483f      	ldr	r0, [pc, #252]	@ (8020be4 <mg_http_status_code_str+0x538>)
 8020ae6:	4770      	bx	lr
    case 305: return "Use Proxy";
 8020ae8:	483f      	ldr	r0, [pc, #252]	@ (8020be8 <mg_http_status_code_str+0x53c>)
 8020aea:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 8020aec:	483f      	ldr	r0, [pc, #252]	@ (8020bec <mg_http_status_code_str+0x540>)
 8020aee:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 8020af0:	483f      	ldr	r0, [pc, #252]	@ (8020bf0 <mg_http_status_code_str+0x544>)
 8020af2:	4770      	bx	lr
    case 400: return "Bad Request";
 8020af4:	483f      	ldr	r0, [pc, #252]	@ (8020bf4 <mg_http_status_code_str+0x548>)
 8020af6:	4770      	bx	lr
    case 401: return "Unauthorized";
 8020af8:	483f      	ldr	r0, [pc, #252]	@ (8020bf8 <mg_http_status_code_str+0x54c>)
 8020afa:	4770      	bx	lr
    case 402: return "Payment Required";
 8020afc:	483f      	ldr	r0, [pc, #252]	@ (8020bfc <mg_http_status_code_str+0x550>)
 8020afe:	4770      	bx	lr
    case 403: return "Forbidden";
 8020b00:	483f      	ldr	r0, [pc, #252]	@ (8020c00 <mg_http_status_code_str+0x554>)
 8020b02:	4770      	bx	lr
    case 404: return "Not Found";
 8020b04:	483f      	ldr	r0, [pc, #252]	@ (8020c04 <mg_http_status_code_str+0x558>)
 8020b06:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 8020b08:	483f      	ldr	r0, [pc, #252]	@ (8020c08 <mg_http_status_code_str+0x55c>)
 8020b0a:	4770      	bx	lr
    case 406: return "Not Acceptable";
 8020b0c:	483f      	ldr	r0, [pc, #252]	@ (8020c0c <mg_http_status_code_str+0x560>)
 8020b0e:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 8020b10:	483f      	ldr	r0, [pc, #252]	@ (8020c10 <mg_http_status_code_str+0x564>)
 8020b12:	4770      	bx	lr
    case 408: return "Request Timeout";
 8020b14:	483f      	ldr	r0, [pc, #252]	@ (8020c14 <mg_http_status_code_str+0x568>)
 8020b16:	4770      	bx	lr
    case 409: return "Conflict";
 8020b18:	483f      	ldr	r0, [pc, #252]	@ (8020c18 <mg_http_status_code_str+0x56c>)
 8020b1a:	4770      	bx	lr
    case 410: return "Gone";
 8020b1c:	483f      	ldr	r0, [pc, #252]	@ (8020c1c <mg_http_status_code_str+0x570>)
 8020b1e:	4770      	bx	lr
    case 411: return "Length Required";
 8020b20:	483f      	ldr	r0, [pc, #252]	@ (8020c20 <mg_http_status_code_str+0x574>)
 8020b22:	4770      	bx	lr
    case 412: return "Precondition Failed";
 8020b24:	483f      	ldr	r0, [pc, #252]	@ (8020c24 <mg_http_status_code_str+0x578>)
 8020b26:	4770      	bx	lr
    case 413: return "Payload Too Large";
 8020b28:	483f      	ldr	r0, [pc, #252]	@ (8020c28 <mg_http_status_code_str+0x57c>)
 8020b2a:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 8020b2c:	483f      	ldr	r0, [pc, #252]	@ (8020c2c <mg_http_status_code_str+0x580>)
 8020b2e:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 8020b30:	483f      	ldr	r0, [pc, #252]	@ (8020c30 <mg_http_status_code_str+0x584>)
 8020b32:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 8020b34:	483f      	ldr	r0, [pc, #252]	@ (8020c34 <mg_http_status_code_str+0x588>)
 8020b36:	4770      	bx	lr
    case 417: return "Expectation Failed";
 8020b38:	483f      	ldr	r0, [pc, #252]	@ (8020c38 <mg_http_status_code_str+0x58c>)
 8020b3a:	4770      	bx	lr
    case 418: return "I'm a teapot";
 8020b3c:	483f      	ldr	r0, [pc, #252]	@ (8020c3c <mg_http_status_code_str+0x590>)
 8020b3e:	4770      	bx	lr
    case 421: return "Misdirected Request";
 8020b40:	483f      	ldr	r0, [pc, #252]	@ (8020c40 <mg_http_status_code_str+0x594>)
 8020b42:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 8020b44:	483f      	ldr	r0, [pc, #252]	@ (8020c44 <mg_http_status_code_str+0x598>)
 8020b46:	4770      	bx	lr
    case 423: return "Locked";
 8020b48:	483f      	ldr	r0, [pc, #252]	@ (8020c48 <mg_http_status_code_str+0x59c>)
 8020b4a:	4770      	bx	lr
    case 424: return "Failed Dependency";
 8020b4c:	483f      	ldr	r0, [pc, #252]	@ (8020c4c <mg_http_status_code_str+0x5a0>)
 8020b4e:	4770      	bx	lr
    case 426: return "Upgrade Required";
 8020b50:	483f      	ldr	r0, [pc, #252]	@ (8020c50 <mg_http_status_code_str+0x5a4>)
 8020b52:	4770      	bx	lr
    case 428: return "Precondition Required";
 8020b54:	483f      	ldr	r0, [pc, #252]	@ (8020c54 <mg_http_status_code_str+0x5a8>)
 8020b56:	4770      	bx	lr
    case 429: return "Too Many Requests";
 8020b58:	483f      	ldr	r0, [pc, #252]	@ (8020c58 <mg_http_status_code_str+0x5ac>)
 8020b5a:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 8020b5c:	483f      	ldr	r0, [pc, #252]	@ (8020c5c <mg_http_status_code_str+0x5b0>)
 8020b5e:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 8020b60:	483f      	ldr	r0, [pc, #252]	@ (8020c60 <mg_http_status_code_str+0x5b4>)
 8020b62:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 8020b64:	483f      	ldr	r0, [pc, #252]	@ (8020c64 <mg_http_status_code_str+0x5b8>)
 8020b66:	4770      	bx	lr
    case 499: return "Client Closed Request";
 8020b68:	483f      	ldr	r0, [pc, #252]	@ (8020c68 <mg_http_status_code_str+0x5bc>)
 8020b6a:	4770      	bx	lr
    case 500: return "Internal Server Error";
 8020b6c:	483f      	ldr	r0, [pc, #252]	@ (8020c6c <mg_http_status_code_str+0x5c0>)
 8020b6e:	4770      	bx	lr
    case 501: return "Not Implemented";
 8020b70:	483f      	ldr	r0, [pc, #252]	@ (8020c70 <mg_http_status_code_str+0x5c4>)
 8020b72:	4770      	bx	lr
    case 502: return "Bad Gateway";
 8020b74:	483f      	ldr	r0, [pc, #252]	@ (8020c74 <mg_http_status_code_str+0x5c8>)
 8020b76:	4770      	bx	lr
    case 503: return "Service Unavailable";
 8020b78:	483f      	ldr	r0, [pc, #252]	@ (8020c78 <mg_http_status_code_str+0x5cc>)
 8020b7a:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 8020b7c:	483f      	ldr	r0, [pc, #252]	@ (8020c7c <mg_http_status_code_str+0x5d0>)
 8020b7e:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 8020b80:	483f      	ldr	r0, [pc, #252]	@ (8020c80 <mg_http_status_code_str+0x5d4>)
 8020b82:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 8020b84:	483f      	ldr	r0, [pc, #252]	@ (8020c84 <mg_http_status_code_str+0x5d8>)
 8020b86:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 8020b88:	483f      	ldr	r0, [pc, #252]	@ (8020c88 <mg_http_status_code_str+0x5dc>)
 8020b8a:	4770      	bx	lr
    case 508: return "Loop Detected";
 8020b8c:	483f      	ldr	r0, [pc, #252]	@ (8020c8c <mg_http_status_code_str+0x5e0>)
 8020b8e:	4770      	bx	lr
    case 510: return "Not Extended";
 8020b90:	483f      	ldr	r0, [pc, #252]	@ (8020c90 <mg_http_status_code_str+0x5e4>)
 8020b92:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 8020b94:	483f      	ldr	r0, [pc, #252]	@ (8020c94 <mg_http_status_code_str+0x5e8>)
 8020b96:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 8020b98:	483f      	ldr	r0, [pc, #252]	@ (8020c98 <mg_http_status_code_str+0x5ec>)
 8020b9a:	4770      	bx	lr
    default: return "";
 8020b9c:	483f      	ldr	r0, [pc, #252]	@ (8020c9c <mg_http_status_code_str+0x5f0>)
 8020b9e:	4770      	bx	lr
    case 101: return "Switching Protocols";
 8020ba0:	483f      	ldr	r0, [pc, #252]	@ (8020ca0 <mg_http_status_code_str+0x5f4>)
  }
}
 8020ba2:	4770      	bx	lr
 8020ba4:	0803a794 	.word	0x0803a794
 8020ba8:	0803a7b4 	.word	0x0803a7b4
 8020bac:	0803a7c0 	.word	0x0803a7c0
 8020bb0:	0803a7c4 	.word	0x0803a7c4
 8020bb4:	0803a7cc 	.word	0x0803a7cc
 8020bb8:	0803a7d8 	.word	0x0803a7d8
 8020bbc:	0803a7f8 	.word	0x0803a7f8
 8020bc0:	0803a804 	.word	0x0803a804
 8020bc4:	0803a814 	.word	0x0803a814
 8020bc8:	0803a824 	.word	0x0803a824
 8020bcc:	0803a834 	.word	0x0803a834
 8020bd0:	0803a848 	.word	0x0803a848
 8020bd4:	0803a850 	.word	0x0803a850
 8020bd8:	0803a864 	.word	0x0803a864
 8020bdc:	0803a908 	.word	0x0803a908
 8020be0:	0803a878 	.word	0x0803a878
 8020be4:	0803a884 	.word	0x0803a884
 8020be8:	0803a894 	.word	0x0803a894
 8020bec:	0803a8a0 	.word	0x0803a8a0
 8020bf0:	0803a8b4 	.word	0x0803a8b4
 8020bf4:	0803a8c8 	.word	0x0803a8c8
 8020bf8:	0803a8d4 	.word	0x0803a8d4
 8020bfc:	0803a8e4 	.word	0x0803a8e4
 8020c00:	0803a8f8 	.word	0x0803a8f8
 8020c04:	0803a904 	.word	0x0803a904
 8020c08:	0803a910 	.word	0x0803a910
 8020c0c:	0803a924 	.word	0x0803a924
 8020c10:	0803a934 	.word	0x0803a934
 8020c14:	0803a954 	.word	0x0803a954
 8020c18:	0803a964 	.word	0x0803a964
 8020c1c:	0803a970 	.word	0x0803a970
 8020c20:	0803a978 	.word	0x0803a978
 8020c24:	0803a988 	.word	0x0803a988
 8020c28:	0803a99c 	.word	0x0803a99c
 8020c2c:	0803a9b0 	.word	0x0803a9b0
 8020c30:	0803a9c8 	.word	0x0803a9c8
 8020c34:	0803a9e0 	.word	0x0803a9e0
 8020c38:	0803aa00 	.word	0x0803aa00
 8020c3c:	0803aa14 	.word	0x0803aa14
 8020c40:	0803aa24 	.word	0x0803aa24
 8020c44:	0803aa38 	.word	0x0803aa38
 8020c48:	0803aa50 	.word	0x0803aa50
 8020c4c:	0803aa58 	.word	0x0803aa58
 8020c50:	0803aa6c 	.word	0x0803aa6c
 8020c54:	0803aa80 	.word	0x0803aa80
 8020c58:	0803aa98 	.word	0x0803aa98
 8020c5c:	0803aaac 	.word	0x0803aaac
 8020c60:	0803aacc 	.word	0x0803aacc
 8020c64:	0803aaf0 	.word	0x0803aaf0
 8020c68:	0803ab10 	.word	0x0803ab10
 8020c6c:	0803ab28 	.word	0x0803ab28
 8020c70:	0803ab40 	.word	0x0803ab40
 8020c74:	0803ab50 	.word	0x0803ab50
 8020c78:	0803ab5c 	.word	0x0803ab5c
 8020c7c:	0803ab70 	.word	0x0803ab70
 8020c80:	0803ab80 	.word	0x0803ab80
 8020c84:	0803ab9c 	.word	0x0803ab9c
 8020c88:	0803abb4 	.word	0x0803abb4
 8020c8c:	0803abcc 	.word	0x0803abcc
 8020c90:	0803abdc 	.word	0x0803abdc
 8020c94:	0803abec 	.word	0x0803abec
 8020c98:	0803ac0c 	.word	0x0803ac0c
 8020c9c:	08037490 	.word	0x08037490
 8020ca0:	0803a7a0 	.word	0x0803a7a0

08020ca4 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 8020ca4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 8020ca8:	2b09      	cmp	r3, #9
 8020caa:	d91c      	bls.n	8020ce6 <mg_is_url_safe+0x42>
 8020cac:	285f      	cmp	r0, #95	@ 0x5f
 8020cae:	d01c      	beq.n	8020cea <mg_is_url_safe+0x46>
 8020cb0:	dc0d      	bgt.n	8020cce <mg_is_url_safe+0x2a>
 8020cb2:	282e      	cmp	r0, #46	@ 0x2e
 8020cb4:	d01b      	beq.n	8020cee <mg_is_url_safe+0x4a>
 8020cb6:	dd04      	ble.n	8020cc2 <mg_is_url_safe+0x1e>
 8020cb8:	3841      	subs	r0, #65	@ 0x41
 8020cba:	2819      	cmp	r0, #25
 8020cbc:	d805      	bhi.n	8020cca <mg_is_url_safe+0x26>
 8020cbe:	2001      	movs	r0, #1
 8020cc0:	4770      	bx	lr
 8020cc2:	282d      	cmp	r0, #45	@ 0x2d
 8020cc4:	d115      	bne.n	8020cf2 <mg_is_url_safe+0x4e>
 8020cc6:	2001      	movs	r0, #1
 8020cc8:	4770      	bx	lr
 8020cca:	2000      	movs	r0, #0
 8020ccc:	4770      	bx	lr
 8020cce:	287a      	cmp	r0, #122	@ 0x7a
 8020cd0:	dd03      	ble.n	8020cda <mg_is_url_safe+0x36>
 8020cd2:	287e      	cmp	r0, #126	@ 0x7e
 8020cd4:	d10f      	bne.n	8020cf6 <mg_is_url_safe+0x52>
 8020cd6:	2001      	movs	r0, #1
 8020cd8:	4770      	bx	lr
 8020cda:	2861      	cmp	r0, #97	@ 0x61
 8020cdc:	da01      	bge.n	8020ce2 <mg_is_url_safe+0x3e>
 8020cde:	2000      	movs	r0, #0
 8020ce0:	4770      	bx	lr
 8020ce2:	2001      	movs	r0, #1
 8020ce4:	4770      	bx	lr
 8020ce6:	2001      	movs	r0, #1
 8020ce8:	4770      	bx	lr
 8020cea:	2001      	movs	r0, #1
 8020cec:	4770      	bx	lr
 8020cee:	2001      	movs	r0, #1
 8020cf0:	4770      	bx	lr
 8020cf2:	2000      	movs	r0, #0
 8020cf4:	4770      	bx	lr
 8020cf6:	2000      	movs	r0, #0
}
 8020cf8:	4770      	bx	lr

08020cfa <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8020cfa:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8020cfe:	2b09      	cmp	r3, #9
 8020d00:	d908      	bls.n	8020d14 <is_hex_digit+0x1a>
 8020d02:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8020d06:	2b05      	cmp	r3, #5
 8020d08:	d906      	bls.n	8020d18 <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 8020d0a:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8020d0c:	2805      	cmp	r0, #5
 8020d0e:	d805      	bhi.n	8020d1c <is_hex_digit+0x22>
 8020d10:	2001      	movs	r0, #1
 8020d12:	4770      	bx	lr
 8020d14:	2001      	movs	r0, #1
 8020d16:	4770      	bx	lr
 8020d18:	2001      	movs	r0, #1
 8020d1a:	4770      	bx	lr
 8020d1c:	2000      	movs	r0, #0
}
 8020d1e:	4770      	bx	lr

08020d20 <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 8020d20:	b129      	cbz	r1, 8020d2e <roundup+0xe>
 8020d22:	4408      	add	r0, r1
 8020d24:	3801      	subs	r0, #1
 8020d26:	fbb0 f0f1 	udiv	r0, r0, r1
 8020d2a:	fb01 f000 	mul.w	r0, r1, r0
}
 8020d2e:	4770      	bx	lr

08020d30 <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8020d30:	b108      	cbz	r0, 8020d36 <escapeseq+0x6>
 8020d32:	4802      	ldr	r0, [pc, #8]	@ (8020d3c <escapeseq+0xc>)
 8020d34:	4770      	bx	lr
 8020d36:	4802      	ldr	r0, [pc, #8]	@ (8020d40 <escapeseq+0x10>)
}
 8020d38:	4770      	bx	lr
 8020d3a:	bf00      	nop
 8020d3c:	0803ac2c 	.word	0x0803ac2c
 8020d40:	0803ac34 	.word	0x0803ac34

08020d44 <json_esc>:

static char json_esc(int c, int esc) {
 8020d44:	b570      	push	{r4, r5, r6, lr}
 8020d46:	4604      	mov	r4, r0
 8020d48:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8020d4a:	4608      	mov	r0, r1
 8020d4c:	f7ff fff0 	bl	8020d30 <escapeseq>
 8020d50:	4606      	mov	r6, r0
 8020d52:	fab5 f085 	clz	r0, r5
 8020d56:	0940      	lsrs	r0, r0, #5
 8020d58:	f7ff ffea 	bl	8020d30 <escapeseq>
 8020d5c:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 8020d5e:	4633      	mov	r3, r6
 8020d60:	e000      	b.n	8020d64 <json_esc+0x20>
 8020d62:	3301      	adds	r3, #1
 8020d64:	7818      	ldrb	r0, [r3, #0]
 8020d66:	b118      	cbz	r0, 8020d70 <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 8020d68:	42a0      	cmp	r0, r4
 8020d6a:	d1fa      	bne.n	8020d62 <json_esc+0x1e>
 8020d6c:	1b9b      	subs	r3, r3, r6
 8020d6e:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8020d70:	bd70      	pop	{r4, r5, r6, pc}

08020d72 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8020d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d76:	4607      	mov	r7, r0
 8020d78:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 8020d7a:	2400      	movs	r4, #0
 8020d7c:	e003      	b.n	8020d86 <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 8020d7e:	b1d5      	cbz	r5, 8020db6 <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 8020d80:	2d22      	cmp	r5, #34	@ 0x22
 8020d82:	d015      	beq.n	8020db0 <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 8020d84:	3401      	adds	r4, #1
 8020d86:	42b4      	cmp	r4, r6
 8020d88:	da10      	bge.n	8020dac <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8020d8a:	4623      	mov	r3, r4
 8020d8c:	5d3d      	ldrb	r5, [r7, r4]
 8020d8e:	2d5c      	cmp	r5, #92	@ 0x5c
 8020d90:	d1f5      	bne.n	8020d7e <mg_pass_string+0xc>
 8020d92:	f104 0801 	add.w	r8, r4, #1
 8020d96:	45b0      	cmp	r8, r6
 8020d98:	daf1      	bge.n	8020d7e <mg_pass_string+0xc>
 8020d9a:	443b      	add	r3, r7
 8020d9c:	2101      	movs	r1, #1
 8020d9e:	7858      	ldrb	r0, [r3, #1]
 8020da0:	f7ff ffd0 	bl	8020d44 <json_esc>
 8020da4:	2800      	cmp	r0, #0
 8020da6:	d0ea      	beq.n	8020d7e <mg_pass_string+0xc>
      i++;
 8020da8:	4644      	mov	r4, r8
 8020daa:	e7eb      	b.n	8020d84 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 8020dac:	f06f 0401 	mvn.w	r4, #1
}
 8020db0:	4620      	mov	r0, r4
 8020db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 8020db6:	f06f 0401 	mvn.w	r4, #1
 8020dba:	e7f9      	b.n	8020db0 <mg_pass_string+0x3e>
 8020dbc:	0000      	movs	r0, r0
	...

08020dc0 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8020dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dc4:	ed2d 8b02 	vpush	{d8}
 8020dc8:	b085      	sub	sp, #20
 8020dca:	4681      	mov	r9, r0
 8020dcc:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 8020dce:	f1b1 0800 	subs.w	r8, r1, #0
 8020dd2:	dd49      	ble.n	8020e68 <mg_atod+0xa8>
 8020dd4:	7803      	ldrb	r3, [r0, #0]
 8020dd6:	2b2d      	cmp	r3, #45	@ 0x2d
 8020dd8:	d04c      	beq.n	8020e74 <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 8020dda:	2b2b      	cmp	r3, #43	@ 0x2b
 8020ddc:	d04e      	beq.n	8020e7c <mg_atod+0xbc>
  int i = 0, sign = 1;
 8020dde:	f04f 0a01 	mov.w	sl, #1
 8020de2:	2400      	movs	r4, #0
 8020de4:	e043      	b.n	8020e6e <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 8020de6:	2200      	movs	r2, #0
 8020de8:	4b71      	ldr	r3, [pc, #452]	@ (8020fb0 <mg_atod+0x1f0>)
 8020dea:	4630      	mov	r0, r6
 8020dec:	4639      	mov	r1, r7
 8020dee:	f7ef fc1b 	bl	8010628 <__aeabi_dmul>
 8020df2:	4606      	mov	r6, r0
 8020df4:	460f      	mov	r7, r1
    d += p[i] - '0';
 8020df6:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 8020dfa:	f7ef fbab 	bl	8010554 <__aeabi_i2d>
 8020dfe:	4632      	mov	r2, r6
 8020e00:	463b      	mov	r3, r7
 8020e02:	f7ef fa5b 	bl	80102bc <__adddf3>
 8020e06:	4606      	mov	r6, r0
 8020e08:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020e0a:	3401      	adds	r4, #1
 8020e0c:	4544      	cmp	r4, r8
 8020e0e:	da05      	bge.n	8020e1c <mg_atod+0x5c>
 8020e10:	f819 5004 	ldrb.w	r5, [r9, r4]
 8020e14:	2d2f      	cmp	r5, #47	@ 0x2f
 8020e16:	d901      	bls.n	8020e1c <mg_atod+0x5c>
 8020e18:	2d39      	cmp	r5, #57	@ 0x39
 8020e1a:	d9e4      	bls.n	8020de6 <mg_atod+0x26>
  }
  d *= sign;
 8020e1c:	4650      	mov	r0, sl
 8020e1e:	f7ef fb99 	bl	8010554 <__aeabi_i2d>
 8020e22:	4602      	mov	r2, r0
 8020e24:	460b      	mov	r3, r1
 8020e26:	ec43 2b18 	vmov	d8, r2, r3
 8020e2a:	4632      	mov	r2, r6
 8020e2c:	463b      	mov	r3, r7
 8020e2e:	f7ef fbfb 	bl	8010628 <__aeabi_dmul>
 8020e32:	4606      	mov	r6, r0
 8020e34:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 8020e36:	4544      	cmp	r4, r8
 8020e38:	da03      	bge.n	8020e42 <mg_atod+0x82>
 8020e3a:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020e3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8020e40:	d020      	beq.n	8020e84 <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8020e42:	4544      	cmp	r4, r8
 8020e44:	f280 80a1 	bge.w	8020f8a <mg_atod+0x1ca>
 8020e48:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020e4c:	2b65      	cmp	r3, #101	@ 0x65
 8020e4e:	d002      	beq.n	8020e56 <mg_atod+0x96>
 8020e50:	2b45      	cmp	r3, #69	@ 0x45
 8020e52:	f040 809a 	bne.w	8020f8a <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 8020e56:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 8020e58:	4598      	cmp	r8, r3
 8020e5a:	dd58      	ble.n	8020f0e <mg_atod+0x14e>
 8020e5c:	f819 2003 	ldrb.w	r2, [r9, r3]
 8020e60:	2a2d      	cmp	r2, #45	@ 0x2d
 8020e62:	d051      	beq.n	8020f08 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 8020e64:	2200      	movs	r2, #0
 8020e66:	e053      	b.n	8020f10 <mg_atod+0x150>
  int i = 0, sign = 1;
 8020e68:	f04f 0a01 	mov.w	sl, #1
 8020e6c:	2400      	movs	r4, #0
    i++;
 8020e6e:	2600      	movs	r6, #0
 8020e70:	2700      	movs	r7, #0
 8020e72:	e7cb      	b.n	8020e0c <mg_atod+0x4c>
    sign = -1, i++;
 8020e74:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8020e78:	2401      	movs	r4, #1
 8020e7a:	e7f8      	b.n	8020e6e <mg_atod+0xae>
  int i = 0, sign = 1;
 8020e7c:	f04f 0a01 	mov.w	sl, #1
    i++;
 8020e80:	4654      	mov	r4, sl
 8020e82:	e7f4      	b.n	8020e6e <mg_atod+0xae>
    i++;
 8020e84:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 8020e86:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 8020e8a:	e9db ab00 	ldrd	sl, fp, [fp]
 8020e8e:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8020fa8 <mg_atod+0x1e8>
 8020e92:	ec53 2b17 	vmov	r2, r3, d7
 8020e96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8020e9a:	464f      	mov	r7, r9
 8020e9c:	4645      	mov	r5, r8
 8020e9e:	4690      	mov	r8, r2
 8020ea0:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020ea2:	e017      	b.n	8020ed4 <mg_atod+0x114>
      frac += base * (p[i] - '0');
 8020ea4:	3830      	subs	r0, #48	@ 0x30
 8020ea6:	f7ef fb55 	bl	8010554 <__aeabi_i2d>
 8020eaa:	4652      	mov	r2, sl
 8020eac:	465b      	mov	r3, fp
 8020eae:	f7ef fbbb 	bl	8010628 <__aeabi_dmul>
 8020eb2:	4602      	mov	r2, r0
 8020eb4:	460b      	mov	r3, r1
 8020eb6:	4640      	mov	r0, r8
 8020eb8:	4649      	mov	r1, r9
 8020eba:	f7ef f9ff 	bl	80102bc <__adddf3>
 8020ebe:	4680      	mov	r8, r0
 8020ec0:	4689      	mov	r9, r1
      base /= 10.0;
 8020ec2:	2200      	movs	r2, #0
 8020ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8020fb0 <mg_atod+0x1f0>)
 8020ec6:	4650      	mov	r0, sl
 8020ec8:	4659      	mov	r1, fp
 8020eca:	f7ef fcd7 	bl	801087c <__aeabi_ddiv>
 8020ece:	4682      	mov	sl, r0
 8020ed0:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020ed2:	3401      	adds	r4, #1
 8020ed4:	42ac      	cmp	r4, r5
 8020ed6:	da04      	bge.n	8020ee2 <mg_atod+0x122>
 8020ed8:	5d38      	ldrb	r0, [r7, r4]
 8020eda:	282f      	cmp	r0, #47	@ 0x2f
 8020edc:	d901      	bls.n	8020ee2 <mg_atod+0x122>
 8020ede:	2839      	cmp	r0, #57	@ 0x39
 8020ee0:	d9e0      	bls.n	8020ea4 <mg_atod+0xe4>
    d += frac * sign;
 8020ee2:	4642      	mov	r2, r8
 8020ee4:	464b      	mov	r3, r9
 8020ee6:	46b9      	mov	r9, r7
 8020ee8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020eec:	46a8      	mov	r8, r5
 8020eee:	ec51 0b18 	vmov	r0, r1, d8
 8020ef2:	f7ef fb99 	bl	8010628 <__aeabi_dmul>
 8020ef6:	4602      	mov	r2, r0
 8020ef8:	460b      	mov	r3, r1
 8020efa:	4630      	mov	r0, r6
 8020efc:	4639      	mov	r1, r7
 8020efe:	f7ef f9dd 	bl	80102bc <__adddf3>
 8020f02:	4606      	mov	r6, r0
 8020f04:	460f      	mov	r7, r1
 8020f06:	e79c      	b.n	8020e42 <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 8020f08:	1ca3      	adds	r3, r4, #2
 8020f0a:	2201      	movs	r2, #1
 8020f0c:	e000      	b.n	8020f10 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 8020f0e:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 8020f10:	4543      	cmp	r3, r8
 8020f12:	da03      	bge.n	8020f1c <mg_atod+0x15c>
 8020f14:	f819 1003 	ldrb.w	r1, [r9, r3]
 8020f18:	292b      	cmp	r1, #43	@ 0x2b
 8020f1a:	d013      	beq.n	8020f44 <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 8020f1c:	461c      	mov	r4, r3
 8020f1e:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8020f20:	4544      	cmp	r4, r8
 8020f22:	da11      	bge.n	8020f48 <mg_atod+0x188>
 8020f24:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020f28:	2b2f      	cmp	r3, #47	@ 0x2f
 8020f2a:	d90d      	bls.n	8020f48 <mg_atod+0x188>
 8020f2c:	2b39      	cmp	r3, #57	@ 0x39
 8020f2e:	d80b      	bhi.n	8020f48 <mg_atod+0x188>
 8020f30:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 8020f34:	da08      	bge.n	8020f48 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 8020f36:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8020f3a:	3401      	adds	r4, #1
 8020f3c:	3b30      	subs	r3, #48	@ 0x30
 8020f3e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020f42:	e7ed      	b.n	8020f20 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 8020f44:	3301      	adds	r3, #1
 8020f46:	e7e9      	b.n	8020f1c <mg_atod+0x15c>
    if (minus) exp = -exp;
 8020f48:	b102      	cbz	r2, 8020f4c <mg_atod+0x18c>
 8020f4a:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 8020f4c:	f04f 0800 	mov.w	r8, #0
 8020f50:	e009      	b.n	8020f66 <mg_atod+0x1a6>
 8020f52:	2200      	movs	r2, #0
 8020f54:	4b16      	ldr	r3, [pc, #88]	@ (8020fb0 <mg_atod+0x1f0>)
 8020f56:	4630      	mov	r0, r6
 8020f58:	4639      	mov	r1, r7
 8020f5a:	f7ef fb65 	bl	8010628 <__aeabi_dmul>
 8020f5e:	4606      	mov	r6, r0
 8020f60:	460f      	mov	r7, r1
 8020f62:	f108 0801 	add.w	r8, r8, #1
 8020f66:	45a8      	cmp	r8, r5
 8020f68:	dbf3      	blt.n	8020f52 <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 8020f6a:	f04f 0800 	mov.w	r8, #0
 8020f6e:	e009      	b.n	8020f84 <mg_atod+0x1c4>
 8020f70:	2200      	movs	r2, #0
 8020f72:	4b0f      	ldr	r3, [pc, #60]	@ (8020fb0 <mg_atod+0x1f0>)
 8020f74:	4630      	mov	r0, r6
 8020f76:	4639      	mov	r1, r7
 8020f78:	f7ef fc80 	bl	801087c <__aeabi_ddiv>
 8020f7c:	4606      	mov	r6, r0
 8020f7e:	460f      	mov	r7, r1
 8020f80:	f108 0801 	add.w	r8, r8, #1
 8020f84:	426b      	negs	r3, r5
 8020f86:	4543      	cmp	r3, r8
 8020f88:	dcf2      	bgt.n	8020f70 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 8020f8a:	9b01      	ldr	r3, [sp, #4]
 8020f8c:	b103      	cbz	r3, 8020f90 <mg_atod+0x1d0>
 8020f8e:	601c      	str	r4, [r3, #0]
  return d;
}
 8020f90:	ec47 6b10 	vmov	d0, r6, r7
 8020f94:	b005      	add	sp, #20
 8020f96:	ecbd 8b02 	vpop	{d8}
 8020f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f9e:	bf00      	nop
 8020fa0:	9999999a 	.word	0x9999999a
 8020fa4:	3fb99999 	.word	0x3fb99999
	...
 8020fb0:	40240000 	.word	0x40240000

08020fb4 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8020fb4:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 8020fb6:	4b03      	ldr	r3, [pc, #12]	@ (8020fc4 <logc+0x10>)
 8020fb8:	681b      	ldr	r3, [r3, #0]
 8020fba:	4a03      	ldr	r2, [pc, #12]	@ (8020fc8 <logc+0x14>)
 8020fbc:	6811      	ldr	r1, [r2, #0]
 8020fbe:	4798      	blx	r3
}
 8020fc0:	bd08      	pop	{r3, pc}
 8020fc2:	bf00      	nop
 8020fc4:	20000128 	.word	0x20000128
 8020fc8:	20019f80 	.word	0x20019f80

08020fcc <logs>:

static void logs(const char *buf, size_t len) {
 8020fcc:	b570      	push	{r4, r5, r6, lr}
 8020fce:	4606      	mov	r6, r0
 8020fd0:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8020fd2:	2400      	movs	r4, #0
 8020fd4:	e003      	b.n	8020fde <logs+0x12>
 8020fd6:	5d30      	ldrb	r0, [r6, r4]
 8020fd8:	f7ff ffec 	bl	8020fb4 <logc>
 8020fdc:	3401      	adds	r4, #1
 8020fde:	42ac      	cmp	r4, r5
 8020fe0:	d3f9      	bcc.n	8020fd6 <logs+0xa>
}
 8020fe2:	bd70      	pop	{r4, r5, r6, pc}

08020fe4 <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8020fe4:	2809      	cmp	r0, #9
 8020fe6:	d803      	bhi.n	8020ff0 <nibble+0xc>
 8020fe8:	b2c0      	uxtb	r0, r0
 8020fea:	3030      	adds	r0, #48	@ 0x30
 8020fec:	b2c0      	uxtb	r0, r0
 8020fee:	4770      	bx	lr
 8020ff0:	b2c0      	uxtb	r0, r0
 8020ff2:	3057      	adds	r0, #87	@ 0x57
 8020ff4:	b2c0      	uxtb	r0, r0
}
 8020ff6:	4770      	bx	lr

08020ff8 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 8020ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ffc:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 8020ffe:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 8021000:	6883      	ldr	r3, [r0, #8]
 8021002:	68c2      	ldr	r2, [r0, #12]
 8021004:	4053      	eors	r3, r2
 8021006:	4033      	ands	r3, r6
 8021008:	4053      	eors	r3, r2
 802100a:	f8d1 a000 	ldr.w	sl, [r1]
 802100e:	4453      	add	r3, sl
 8021010:	6802      	ldr	r2, [r0, #0]
 8021012:	4413      	add	r3, r2
 8021014:	4ae0      	ldr	r2, [pc, #896]	@ (8021398 <mg_md5_transform+0x3a0>)
 8021016:	441a      	add	r2, r3
 8021018:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 802101c:	6883      	ldr	r3, [r0, #8]
 802101e:	ea86 0503 	eor.w	r5, r6, r3
 8021022:	4015      	ands	r5, r2
 8021024:	405d      	eors	r5, r3
 8021026:	684b      	ldr	r3, [r1, #4]
 8021028:	9301      	str	r3, [sp, #4]
 802102a:	441d      	add	r5, r3
 802102c:	68c4      	ldr	r4, [r0, #12]
 802102e:	4425      	add	r5, r4
 8021030:	4bda      	ldr	r3, [pc, #872]	@ (802139c <mg_md5_transform+0x3a4>)
 8021032:	442b      	add	r3, r5
 8021034:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 8021038:	ea86 0502 	eor.w	r5, r6, r2
 802103c:	401d      	ands	r5, r3
 802103e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8021040:	4075      	eors	r5, r6
 8021042:	688c      	ldr	r4, [r1, #8]
 8021044:	4425      	add	r5, r4
 8021046:	6886      	ldr	r6, [r0, #8]
 8021048:	4435      	add	r5, r6
 802104a:	4ed5      	ldr	r6, [pc, #852]	@ (80213a0 <mg_md5_transform+0x3a8>)
 802104c:	442e      	add	r6, r5
 802104e:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 8021052:	ea82 0703 	eor.w	r7, r2, r3
 8021056:	ea07 070c 	and.w	r7, r7, ip
 802105a:	4057      	eors	r7, r2
 802105c:	68cd      	ldr	r5, [r1, #12]
 802105e:	950a      	str	r5, [sp, #40]	@ 0x28
 8021060:	442f      	add	r7, r5
 8021062:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021064:	4437      	add	r7, r6
 8021066:	4dcf      	ldr	r5, [pc, #828]	@ (80213a4 <mg_md5_transform+0x3ac>)
 8021068:	443d      	add	r5, r7
 802106a:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 802106e:	ea83 070c 	eor.w	r7, r3, ip
 8021072:	402f      	ands	r7, r5
 8021074:	405f      	eors	r7, r3
 8021076:	690e      	ldr	r6, [r1, #16]
 8021078:	9602      	str	r6, [sp, #8]
 802107a:	4437      	add	r7, r6
 802107c:	4417      	add	r7, r2
 802107e:	4aca      	ldr	r2, [pc, #808]	@ (80213a8 <mg_md5_transform+0x3b0>)
 8021080:	443a      	add	r2, r7
 8021082:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 8021086:	ea8c 0705 	eor.w	r7, ip, r5
 802108a:	4017      	ands	r7, r2
 802108c:	ea87 070c 	eor.w	r7, r7, ip
 8021090:	694e      	ldr	r6, [r1, #20]
 8021092:	9603      	str	r6, [sp, #12]
 8021094:	4437      	add	r7, r6
 8021096:	441f      	add	r7, r3
 8021098:	4bc4      	ldr	r3, [pc, #784]	@ (80213ac <mg_md5_transform+0x3b4>)
 802109a:	443b      	add	r3, r7
 802109c:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 80210a0:	ea85 0702 	eor.w	r7, r5, r2
 80210a4:	401f      	ands	r7, r3
 80210a6:	406f      	eors	r7, r5
 80210a8:	698e      	ldr	r6, [r1, #24]
 80210aa:	9604      	str	r6, [sp, #16]
 80210ac:	4437      	add	r7, r6
 80210ae:	eb0c 0607 	add.w	r6, ip, r7
 80210b2:	4fbf      	ldr	r7, [pc, #764]	@ (80213b0 <mg_md5_transform+0x3b8>)
 80210b4:	4437      	add	r7, r6
 80210b6:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 80210ba:	ea82 0603 	eor.w	r6, r2, r3
 80210be:	ea06 060c 	and.w	r6, r6, ip
 80210c2:	4056      	eors	r6, r2
 80210c4:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80210c8:	444e      	add	r6, r9
 80210ca:	4435      	add	r5, r6
 80210cc:	4fb9      	ldr	r7, [pc, #740]	@ (80213b4 <mg_md5_transform+0x3bc>)
 80210ce:	442f      	add	r7, r5
 80210d0:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 80210d4:	ea83 050c 	eor.w	r5, r3, ip
 80210d8:	403d      	ands	r5, r7
 80210da:	405d      	eors	r5, r3
 80210dc:	6a0e      	ldr	r6, [r1, #32]
 80210de:	9605      	str	r6, [sp, #20]
 80210e0:	4435      	add	r5, r6
 80210e2:	442a      	add	r2, r5
 80210e4:	4eb4      	ldr	r6, [pc, #720]	@ (80213b8 <mg_md5_transform+0x3c0>)
 80210e6:	4416      	add	r6, r2
 80210e8:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 80210ec:	ea8c 0207 	eor.w	r2, ip, r7
 80210f0:	4032      	ands	r2, r6
 80210f2:	ea82 020c 	eor.w	r2, r2, ip
 80210f6:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80210f8:	9506      	str	r5, [sp, #24]
 80210fa:	442a      	add	r2, r5
 80210fc:	4413      	add	r3, r2
 80210fe:	4daf      	ldr	r5, [pc, #700]	@ (80213bc <mg_md5_transform+0x3c4>)
 8021100:	441d      	add	r5, r3
 8021102:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 8021106:	ea87 0306 	eor.w	r3, r7, r6
 802110a:	402b      	ands	r3, r5
 802110c:	407b      	eors	r3, r7
 802110e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8021110:	9207      	str	r2, [sp, #28]
 8021112:	4413      	add	r3, r2
 8021114:	4463      	add	r3, ip
 8021116:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 802111a:	3b4f      	subs	r3, #79	@ 0x4f
 802111c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 8021120:	ea86 0c05 	eor.w	ip, r6, r5
 8021124:	ea0c 0c03 	and.w	ip, ip, r3
 8021128:	ea8c 0c06 	eor.w	ip, ip, r6
 802112c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 802112e:	9208      	str	r2, [sp, #32]
 8021130:	4494      	add	ip, r2
 8021132:	4467      	add	r7, ip
 8021134:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 80213e0 <mg_md5_transform+0x3e8>
 8021138:	44be      	add	lr, r7
 802113a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 802113e:	ea85 0c03 	eor.w	ip, r5, r3
 8021142:	ea0c 0c0e 	and.w	ip, ip, lr
 8021146:	ea8c 0c05 	eor.w	ip, ip, r5
 802114a:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 802114c:	44bc      	add	ip, r7
 802114e:	4466      	add	r6, ip
 8021150:	f8df c290 	ldr.w	ip, [pc, #656]	@ 80213e4 <mg_md5_transform+0x3ec>
 8021154:	44b4      	add	ip, r6
 8021156:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 802115a:	ea83 080e 	eor.w	r8, r3, lr
 802115e:	ea08 080c 	and.w	r8, r8, ip
 8021162:	ea88 0803 	eor.w	r8, r8, r3
 8021166:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 8021168:	44b0      	add	r8, r6
 802116a:	44a8      	add	r8, r5
 802116c:	4d94      	ldr	r5, [pc, #592]	@ (80213c0 <mg_md5_transform+0x3c8>)
 802116e:	4445      	add	r5, r8
 8021170:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 8021174:	ea8e 0b0c 	eor.w	fp, lr, ip
 8021178:	ea0b 0b05 	and.w	fp, fp, r5
 802117c:	ea8b 0b0e 	eor.w	fp, fp, lr
 8021180:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 8021184:	44c3      	add	fp, r8
 8021186:	449b      	add	fp, r3
 8021188:	4b8e      	ldr	r3, [pc, #568]	@ (80213c4 <mg_md5_transform+0x3cc>)
 802118a:	445b      	add	r3, fp
 802118c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 8021190:	ea8c 0b05 	eor.w	fp, ip, r5
 8021194:	ea0b 0b03 	and.w	fp, fp, r3
 8021198:	ea8b 0b0c 	eor.w	fp, fp, ip
 802119c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 802119e:	9109      	str	r1, [sp, #36]	@ 0x24
 80211a0:	448b      	add	fp, r1
 80211a2:	44f3      	add	fp, lr
 80211a4:	f8df e240 	ldr.w	lr, [pc, #576]	@ 80213e8 <mg_md5_transform+0x3f0>
 80211a8:	44de      	add	lr, fp
 80211aa:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 80211ae:	ea83 0b0e 	eor.w	fp, r3, lr
 80211b2:	ea0b 0b05 	and.w	fp, fp, r5
 80211b6:	ea8b 0b03 	eor.w	fp, fp, r3
 80211ba:	9a01      	ldr	r2, [sp, #4]
 80211bc:	4493      	add	fp, r2
 80211be:	44e3      	add	fp, ip
 80211c0:	f8df c228 	ldr.w	ip, [pc, #552]	@ 80213ec <mg_md5_transform+0x3f4>
 80211c4:	44dc      	add	ip, fp
 80211c6:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 80211ca:	ea8e 0b0c 	eor.w	fp, lr, ip
 80211ce:	ea0b 0b03 	and.w	fp, fp, r3
 80211d2:	ea8b 0b0e 	eor.w	fp, fp, lr
 80211d6:	9a04      	ldr	r2, [sp, #16]
 80211d8:	4493      	add	fp, r2
 80211da:	44ab      	add	fp, r5
 80211dc:	4d7a      	ldr	r5, [pc, #488]	@ (80213c8 <mg_md5_transform+0x3d0>)
 80211de:	445d      	add	r5, fp
 80211e0:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 80211e4:	ea8c 0b05 	eor.w	fp, ip, r5
 80211e8:	ea0b 0b0e 	and.w	fp, fp, lr
 80211ec:	ea8b 0b0c 	eor.w	fp, fp, ip
 80211f0:	9908      	ldr	r1, [sp, #32]
 80211f2:	448b      	add	fp, r1
 80211f4:	445b      	add	r3, fp
 80211f6:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 80213f0 <mg_md5_transform+0x3f8>
 80211fa:	449b      	add	fp, r3
 80211fc:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 8021200:	ea85 030b 	eor.w	r3, r5, fp
 8021204:	ea03 030c 	and.w	r3, r3, ip
 8021208:	406b      	eors	r3, r5
 802120a:	4453      	add	r3, sl
 802120c:	4473      	add	r3, lr
 802120e:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 80213f4 <mg_md5_transform+0x3fc>
 8021212:	449e      	add	lr, r3
 8021214:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 8021218:	ea8b 030e 	eor.w	r3, fp, lr
 802121c:	402b      	ands	r3, r5
 802121e:	ea83 030b 	eor.w	r3, r3, fp
 8021222:	9a03      	ldr	r2, [sp, #12]
 8021224:	4413      	add	r3, r2
 8021226:	449c      	add	ip, r3
 8021228:	4b68      	ldr	r3, [pc, #416]	@ (80213cc <mg_md5_transform+0x3d4>)
 802122a:	4463      	add	r3, ip
 802122c:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 8021230:	ea8e 0c03 	eor.w	ip, lr, r3
 8021234:	ea0c 0c0b 	and.w	ip, ip, fp
 8021238:	ea8c 0c0e 	eor.w	ip, ip, lr
 802123c:	9a07      	ldr	r2, [sp, #28]
 802123e:	4494      	add	ip, r2
 8021240:	4465      	add	r5, ip
 8021242:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 80213f8 <mg_md5_transform+0x400>
 8021246:	44ac      	add	ip, r5
 8021248:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 802124c:	ea83 050c 	eor.w	r5, r3, ip
 8021250:	ea05 050e 	and.w	r5, r5, lr
 8021254:	405d      	eors	r5, r3
 8021256:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021258:	440d      	add	r5, r1
 802125a:	445d      	add	r5, fp
 802125c:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 80213fc <mg_md5_transform+0x404>
 8021260:	44ab      	add	fp, r5
 8021262:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 8021266:	ea8c 050b 	eor.w	r5, ip, fp
 802126a:	401d      	ands	r5, r3
 802126c:	ea85 050c 	eor.w	r5, r5, ip
 8021270:	9a02      	ldr	r2, [sp, #8]
 8021272:	4415      	add	r5, r2
 8021274:	44ae      	add	lr, r5
 8021276:	4d56      	ldr	r5, [pc, #344]	@ (80213d0 <mg_md5_transform+0x3d8>)
 8021278:	4475      	add	r5, lr
 802127a:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 802127e:	ea8b 0e05 	eor.w	lr, fp, r5
 8021282:	ea0e 0e0c 	and.w	lr, lr, ip
 8021286:	ea8e 0e0b 	eor.w	lr, lr, fp
 802128a:	9906      	ldr	r1, [sp, #24]
 802128c:	448e      	add	lr, r1
 802128e:	4473      	add	r3, lr
 8021290:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8021400 <mg_md5_transform+0x408>
 8021294:	449e      	add	lr, r3
 8021296:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 802129a:	ea85 030e 	eor.w	r3, r5, lr
 802129e:	ea03 030b 	and.w	r3, r3, fp
 80212a2:	406b      	eors	r3, r5
 80212a4:	4443      	add	r3, r8
 80212a6:	4463      	add	r3, ip
 80212a8:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8021404 <mg_md5_transform+0x40c>
 80212ac:	449c      	add	ip, r3
 80212ae:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 80212b2:	ea8e 030c 	eor.w	r3, lr, ip
 80212b6:	402b      	ands	r3, r5
 80212b8:	ea83 030e 	eor.w	r3, r3, lr
 80212bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80212be:	4413      	add	r3, r2
 80212c0:	449b      	add	fp, r3
 80212c2:	4b44      	ldr	r3, [pc, #272]	@ (80213d4 <mg_md5_transform+0x3dc>)
 80212c4:	445b      	add	r3, fp
 80212c6:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 80212ca:	ea8c 0b03 	eor.w	fp, ip, r3
 80212ce:	ea0b 0b0e 	and.w	fp, fp, lr
 80212d2:	ea8b 0b0c 	eor.w	fp, fp, ip
 80212d6:	9905      	ldr	r1, [sp, #20]
 80212d8:	448b      	add	fp, r1
 80212da:	445d      	add	r5, fp
 80212dc:	f8df b128 	ldr.w	fp, [pc, #296]	@ 8021408 <mg_md5_transform+0x410>
 80212e0:	44ab      	add	fp, r5
 80212e2:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 80212e6:	ea83 050b 	eor.w	r5, r3, fp
 80212ea:	ea05 050c 	and.w	r5, r5, ip
 80212ee:	405d      	eors	r5, r3
 80212f0:	4435      	add	r5, r6
 80212f2:	4475      	add	r5, lr
 80212f4:	f8df e114 	ldr.w	lr, [pc, #276]	@ 802140c <mg_md5_transform+0x414>
 80212f8:	44ae      	add	lr, r5
 80212fa:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 80212fe:	ea8b 050e 	eor.w	r5, fp, lr
 8021302:	401d      	ands	r5, r3
 8021304:	ea85 050b 	eor.w	r5, r5, fp
 8021308:	4425      	add	r5, r4
 802130a:	44ac      	add	ip, r5
 802130c:	4d32      	ldr	r5, [pc, #200]	@ (80213d8 <mg_md5_transform+0x3e0>)
 802130e:	4465      	add	r5, ip
 8021310:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 8021314:	ea8e 0c05 	eor.w	ip, lr, r5
 8021318:	ea0c 0c0b 	and.w	ip, ip, fp
 802131c:	ea8c 0c0e 	eor.w	ip, ip, lr
 8021320:	44cc      	add	ip, r9
 8021322:	4463      	add	r3, ip
 8021324:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 8021410 <mg_md5_transform+0x418>
 8021328:	449c      	add	ip, r3
 802132a:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 802132e:	ea85 030c 	eor.w	r3, r5, ip
 8021332:	ea03 030e 	and.w	r3, r3, lr
 8021336:	406b      	eors	r3, r5
 8021338:	443b      	add	r3, r7
 802133a:	445b      	add	r3, fp
 802133c:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8021414 <mg_md5_transform+0x41c>
 8021340:	449b      	add	fp, r3
 8021342:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 8021346:	ea8c 030b 	eor.w	r3, ip, fp
 802134a:	406b      	eors	r3, r5
 802134c:	9a03      	ldr	r2, [sp, #12]
 802134e:	4413      	add	r3, r2
 8021350:	4473      	add	r3, lr
 8021352:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 8021356:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 802135a:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 802135e:	ea8b 0e03 	eor.w	lr, fp, r3
 8021362:	ea8e 0e0c 	eor.w	lr, lr, ip
 8021366:	448e      	add	lr, r1
 8021368:	44ae      	add	lr, r5
 802136a:	4d1c      	ldr	r5, [pc, #112]	@ (80213dc <mg_md5_transform+0x3e4>)
 802136c:	4475      	add	r5, lr
 802136e:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 8021372:	ea83 0e05 	eor.w	lr, r3, r5
 8021376:	ea8e 0e0b 	eor.w	lr, lr, fp
 802137a:	9908      	ldr	r1, [sp, #32]
 802137c:	448e      	add	lr, r1
 802137e:	44f4      	add	ip, lr
 8021380:	f8df e094 	ldr.w	lr, [pc, #148]	@ 8021418 <mg_md5_transform+0x420>
 8021384:	44e6      	add	lr, ip
 8021386:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 802138a:	ea85 0c0e 	eor.w	ip, r5, lr
 802138e:	ea8c 0c03 	eor.w	ip, ip, r3
 8021392:	44c4      	add	ip, r8
 8021394:	44e3      	add	fp, ip
 8021396:	e041      	b.n	802141c <mg_md5_transform+0x424>
 8021398:	d76aa478 	.word	0xd76aa478
 802139c:	e8c7b756 	.word	0xe8c7b756
 80213a0:	242070db 	.word	0x242070db
 80213a4:	c1bdceee 	.word	0xc1bdceee
 80213a8:	f57c0faf 	.word	0xf57c0faf
 80213ac:	4787c62a 	.word	0x4787c62a
 80213b0:	a8304613 	.word	0xa8304613
 80213b4:	fd469501 	.word	0xfd469501
 80213b8:	698098d8 	.word	0x698098d8
 80213bc:	8b44f7af 	.word	0x8b44f7af
 80213c0:	fd987193 	.word	0xfd987193
 80213c4:	a679438e 	.word	0xa679438e
 80213c8:	c040b340 	.word	0xc040b340
 80213cc:	d62f105d 	.word	0xd62f105d
 80213d0:	e7d3fbc8 	.word	0xe7d3fbc8
 80213d4:	f4d50d87 	.word	0xf4d50d87
 80213d8:	fcefa3f8 	.word	0xfcefa3f8
 80213dc:	8771f681 	.word	0x8771f681
 80213e0:	895cd7be 	.word	0x895cd7be
 80213e4:	6b901122 	.word	0x6b901122
 80213e8:	49b40821 	.word	0x49b40821
 80213ec:	f61e2562 	.word	0xf61e2562
 80213f0:	265e5a51 	.word	0x265e5a51
 80213f4:	e9b6c7aa 	.word	0xe9b6c7aa
 80213f8:	02441453 	.word	0x02441453
 80213fc:	d8a1e681 	.word	0xd8a1e681
 8021400:	21e1cde6 	.word	0x21e1cde6
 8021404:	c33707d6 	.word	0xc33707d6
 8021408:	455a14ed 	.word	0x455a14ed
 802140c:	a9e3e905 	.word	0xa9e3e905
 8021410:	676f02d9 	.word	0x676f02d9
 8021414:	8d2a4c8a 	.word	0x8d2a4c8a
 8021418:	6d9d6122 	.word	0x6d9d6122
 802141c:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 80216e4 <mg_md5_transform+0x6ec>
 8021420:	44dc      	add	ip, fp
 8021422:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 8021426:	ea8e 0b0c 	eor.w	fp, lr, ip
 802142a:	ea8b 0b05 	eor.w	fp, fp, r5
 802142e:	9a01      	ldr	r2, [sp, #4]
 8021430:	4493      	add	fp, r2
 8021432:	449b      	add	fp, r3
 8021434:	4b99      	ldr	r3, [pc, #612]	@ (802169c <mg_md5_transform+0x6a4>)
 8021436:	445b      	add	r3, fp
 8021438:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 802143c:	ea8c 0b03 	eor.w	fp, ip, r3
 8021440:	ea8b 0b0e 	eor.w	fp, fp, lr
 8021444:	9a02      	ldr	r2, [sp, #8]
 8021446:	4493      	add	fp, r2
 8021448:	445d      	add	r5, fp
 802144a:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 80216e8 <mg_md5_transform+0x6f0>
 802144e:	44ab      	add	fp, r5
 8021450:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 8021454:	ea83 050b 	eor.w	r5, r3, fp
 8021458:	ea85 050c 	eor.w	r5, r5, ip
 802145c:	444d      	add	r5, r9
 802145e:	44ae      	add	lr, r5
 8021460:	4d8f      	ldr	r5, [pc, #572]	@ (80216a0 <mg_md5_transform+0x6a8>)
 8021462:	4475      	add	r5, lr
 8021464:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 8021468:	ea8b 0e05 	eor.w	lr, fp, r5
 802146c:	ea8e 0e03 	eor.w	lr, lr, r3
 8021470:	9a07      	ldr	r2, [sp, #28]
 8021472:	4496      	add	lr, r2
 8021474:	44e6      	add	lr, ip
 8021476:	f8df c274 	ldr.w	ip, [pc, #628]	@ 80216ec <mg_md5_transform+0x6f4>
 802147a:	44f4      	add	ip, lr
 802147c:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 8021480:	ea85 0e0c 	eor.w	lr, r5, ip
 8021484:	ea8e 0e0b 	eor.w	lr, lr, fp
 8021488:	44b6      	add	lr, r6
 802148a:	4473      	add	r3, lr
 802148c:	f8df e260 	ldr.w	lr, [pc, #608]	@ 80216f0 <mg_md5_transform+0x6f8>
 8021490:	449e      	add	lr, r3
 8021492:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 8021496:	ea8c 030e 	eor.w	r3, ip, lr
 802149a:	406b      	eors	r3, r5
 802149c:	4453      	add	r3, sl
 802149e:	449b      	add	fp, r3
 80214a0:	4b80      	ldr	r3, [pc, #512]	@ (80216a4 <mg_md5_transform+0x6ac>)
 80214a2:	445b      	add	r3, fp
 80214a4:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 80214a8:	ea8e 0b03 	eor.w	fp, lr, r3
 80214ac:	ea8b 0b0c 	eor.w	fp, fp, ip
 80214b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80214b2:	4493      	add	fp, r2
 80214b4:	445d      	add	r5, fp
 80214b6:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 80216f4 <mg_md5_transform+0x6fc>
 80214ba:	44ab      	add	fp, r5
 80214bc:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 80214c0:	ea83 050b 	eor.w	r5, r3, fp
 80214c4:	ea85 050e 	eor.w	r5, r5, lr
 80214c8:	9904      	ldr	r1, [sp, #16]
 80214ca:	440d      	add	r5, r1
 80214cc:	4465      	add	r5, ip
 80214ce:	f8df c228 	ldr.w	ip, [pc, #552]	@ 80216f8 <mg_md5_transform+0x700>
 80214d2:	44ac      	add	ip, r5
 80214d4:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 80214d8:	ea8b 050c 	eor.w	r5, fp, ip
 80214dc:	405d      	eors	r5, r3
 80214de:	9906      	ldr	r1, [sp, #24]
 80214e0:	440d      	add	r5, r1
 80214e2:	44ae      	add	lr, r5
 80214e4:	4d70      	ldr	r5, [pc, #448]	@ (80216a8 <mg_md5_transform+0x6b0>)
 80214e6:	4475      	add	r5, lr
 80214e8:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 80214ec:	ea8c 0e05 	eor.w	lr, ip, r5
 80214f0:	ea8e 0e0b 	eor.w	lr, lr, fp
 80214f4:	44be      	add	lr, r7
 80214f6:	4473      	add	r3, lr
 80214f8:	f8df e200 	ldr.w	lr, [pc, #512]	@ 80216fc <mg_md5_transform+0x704>
 80214fc:	449e      	add	lr, r3
 80214fe:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 8021502:	ea85 030e 	eor.w	r3, r5, lr
 8021506:	ea83 030c 	eor.w	r3, r3, ip
 802150a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802150c:	440b      	add	r3, r1
 802150e:	445b      	add	r3, fp
 8021510:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 8021700 <mg_md5_transform+0x708>
 8021514:	449b      	add	fp, r3
 8021516:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 802151a:	ea8e 030b 	eor.w	r3, lr, fp
 802151e:	406b      	eors	r3, r5
 8021520:	940a      	str	r4, [sp, #40]	@ 0x28
 8021522:	4423      	add	r3, r4
 8021524:	449c      	add	ip, r3
 8021526:	4b61      	ldr	r3, [pc, #388]	@ (80216ac <mg_md5_transform+0x6b4>)
 8021528:	4463      	add	r3, ip
 802152a:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 802152e:	ea63 0c0e 	orn	ip, r3, lr
 8021532:	ea8c 0c0b 	eor.w	ip, ip, fp
 8021536:	44e2      	add	sl, ip
 8021538:	44aa      	add	sl, r5
 802153a:	4d5d      	ldr	r5, [pc, #372]	@ (80216b0 <mg_md5_transform+0x6b8>)
 802153c:	4455      	add	r5, sl
 802153e:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 8021542:	ea65 0c0b 	orn	ip, r5, fp
 8021546:	ea8c 0c03 	eor.w	ip, ip, r3
 802154a:	44e1      	add	r9, ip
 802154c:	44f1      	add	r9, lr
 802154e:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8021704 <mg_md5_transform+0x70c>
 8021552:	44cc      	add	ip, r9
 8021554:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 8021558:	ea6c 0e03 	orn	lr, ip, r3
 802155c:	ea8e 0e05 	eor.w	lr, lr, r5
 8021560:	44f0      	add	r8, lr
 8021562:	44d8      	add	r8, fp
 8021564:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 8021708 <mg_md5_transform+0x710>
 8021568:	44c6      	add	lr, r8
 802156a:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 802156e:	ea6e 0805 	orn	r8, lr, r5
 8021572:	ea88 080c 	eor.w	r8, r8, ip
 8021576:	9c03      	ldr	r4, [sp, #12]
 8021578:	44a0      	add	r8, r4
 802157a:	4498      	add	r8, r3
 802157c:	4b4d      	ldr	r3, [pc, #308]	@ (80216b4 <mg_md5_transform+0x6bc>)
 802157e:	4443      	add	r3, r8
 8021580:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 8021584:	ea63 080c 	orn	r8, r3, ip
 8021588:	ea88 080e 	eor.w	r8, r8, lr
 802158c:	4447      	add	r7, r8
 802158e:	442f      	add	r7, r5
 8021590:	4d49      	ldr	r5, [pc, #292]	@ (80216b8 <mg_md5_transform+0x6c0>)
 8021592:	443d      	add	r5, r7
 8021594:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 8021598:	ea65 070e 	orn	r7, r5, lr
 802159c:	405f      	eors	r7, r3
 802159e:	4417      	add	r7, r2
 80215a0:	44bc      	add	ip, r7
 80215a2:	4f46      	ldr	r7, [pc, #280]	@ (80216bc <mg_md5_transform+0x6c4>)
 80215a4:	4467      	add	r7, ip
 80215a6:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 80215aa:	ea67 0c03 	orn	ip, r7, r3
 80215ae:	ea8c 0c05 	eor.w	ip, ip, r5
 80215b2:	9a07      	ldr	r2, [sp, #28]
 80215b4:	4462      	add	r2, ip
 80215b6:	4472      	add	r2, lr
 80215b8:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 80215bc:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 80215c0:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 80215c4:	ea62 0c05 	orn	ip, r2, r5
 80215c8:	ea8c 0c07 	eor.w	ip, ip, r7
 80215cc:	9c01      	ldr	r4, [sp, #4]
 80215ce:	44a4      	add	ip, r4
 80215d0:	449c      	add	ip, r3
 80215d2:	4b3b      	ldr	r3, [pc, #236]	@ (80216c0 <mg_md5_transform+0x6c8>)
 80215d4:	4463      	add	r3, ip
 80215d6:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 80215da:	ea63 0c07 	orn	ip, r3, r7
 80215de:	ea8c 0c02 	eor.w	ip, ip, r2
 80215e2:	9905      	ldr	r1, [sp, #20]
 80215e4:	448c      	add	ip, r1
 80215e6:	44ac      	add	ip, r5
 80215e8:	4d36      	ldr	r5, [pc, #216]	@ (80216c4 <mg_md5_transform+0x6cc>)
 80215ea:	4465      	add	r5, ip
 80215ec:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 80215f0:	ea65 0c02 	orn	ip, r5, r2
 80215f4:	ea8c 0c03 	eor.w	ip, ip, r3
 80215f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80215fa:	4461      	add	r1, ip
 80215fc:	440f      	add	r7, r1
 80215fe:	4932      	ldr	r1, [pc, #200]	@ (80216c8 <mg_md5_transform+0x6d0>)
 8021600:	4439      	add	r1, r7
 8021602:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 8021606:	ea61 0703 	orn	r7, r1, r3
 802160a:	406f      	eors	r7, r5
 802160c:	9c04      	ldr	r4, [sp, #16]
 802160e:	4427      	add	r7, r4
 8021610:	4417      	add	r7, r2
 8021612:	4a2e      	ldr	r2, [pc, #184]	@ (80216cc <mg_md5_transform+0x6d4>)
 8021614:	443a      	add	r2, r7
 8021616:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 802161a:	ea62 0705 	orn	r7, r2, r5
 802161e:	404f      	eors	r7, r1
 8021620:	443e      	add	r6, r7
 8021622:	4433      	add	r3, r6
 8021624:	4e2a      	ldr	r6, [pc, #168]	@ (80216d0 <mg_md5_transform+0x6d8>)
 8021626:	441e      	add	r6, r3
 8021628:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 802162c:	ea66 0301 	orn	r3, r6, r1
 8021630:	4053      	eors	r3, r2
 8021632:	9f02      	ldr	r7, [sp, #8]
 8021634:	443b      	add	r3, r7
 8021636:	441d      	add	r5, r3
 8021638:	4b26      	ldr	r3, [pc, #152]	@ (80216d4 <mg_md5_transform+0x6dc>)
 802163a:	442b      	add	r3, r5
 802163c:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 8021640:	ea63 0502 	orn	r5, r3, r2
 8021644:	4075      	eors	r5, r6
 8021646:	9f08      	ldr	r7, [sp, #32]
 8021648:	443d      	add	r5, r7
 802164a:	440d      	add	r5, r1
 802164c:	4922      	ldr	r1, [pc, #136]	@ (80216d8 <mg_md5_transform+0x6e0>)
 802164e:	4429      	add	r1, r5
 8021650:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 8021654:	ea61 0506 	orn	r5, r1, r6
 8021658:	405d      	eors	r5, r3
 802165a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802165c:	4425      	add	r5, r4
 802165e:	442a      	add	r2, r5
 8021660:	4d1e      	ldr	r5, [pc, #120]	@ (80216dc <mg_md5_transform+0x6e4>)
 8021662:	4415      	add	r5, r2
 8021664:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 8021668:	ea65 0203 	orn	r2, r5, r3
 802166c:	404a      	eors	r2, r1
 802166e:	9c06      	ldr	r4, [sp, #24]
 8021670:	4422      	add	r2, r4
 8021672:	4432      	add	r2, r6
 8021674:	4e1a      	ldr	r6, [pc, #104]	@ (80216e0 <mg_md5_transform+0x6e8>)
 8021676:	4416      	add	r6, r2
 8021678:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 802167c:	6802      	ldr	r2, [r0, #0]
 802167e:	4413      	add	r3, r2
 8021680:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 8021682:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021684:	4434      	add	r4, r6
 8021686:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 8021688:	6883      	ldr	r3, [r0, #8]
 802168a:	441d      	add	r5, r3
 802168c:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 802168e:	68c3      	ldr	r3, [r0, #12]
 8021690:	4419      	add	r1, r3
 8021692:	60c1      	str	r1, [r0, #12]
}
 8021694:	b00d      	add	sp, #52	@ 0x34
 8021696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802169a:	bf00      	nop
 802169c:	a4beea44 	.word	0xa4beea44
 80216a0:	f6bb4b60 	.word	0xf6bb4b60
 80216a4:	eaa127fa 	.word	0xeaa127fa
 80216a8:	d9d4d039 	.word	0xd9d4d039
 80216ac:	c4ac5665 	.word	0xc4ac5665
 80216b0:	f4292244 	.word	0xf4292244
 80216b4:	fc93a039 	.word	0xfc93a039
 80216b8:	655b59c3 	.word	0x655b59c3
 80216bc:	8f0ccc92 	.word	0x8f0ccc92
 80216c0:	85845dd1 	.word	0x85845dd1
 80216c4:	6fa87e4f 	.word	0x6fa87e4f
 80216c8:	fe2ce6e0 	.word	0xfe2ce6e0
 80216cc:	a3014314 	.word	0xa3014314
 80216d0:	4e0811a1 	.word	0x4e0811a1
 80216d4:	f7537e82 	.word	0xf7537e82
 80216d8:	bd3af235 	.word	0xbd3af235
 80216dc:	2ad7d2bb 	.word	0x2ad7d2bb
 80216e0:	eb86d391 	.word	0xeb86d391
 80216e4:	fde5380c 	.word	0xfde5380c
 80216e8:	4bdecfa9 	.word	0x4bdecfa9
 80216ec:	bebfbc70 	.word	0xbebfbc70
 80216f0:	289b7ec6 	.word	0x289b7ec6
 80216f4:	d4ef3085 	.word	0xd4ef3085
 80216f8:	04881d05 	.word	0x04881d05
 80216fc:	e6db99e5 	.word	0xe6db99e5
 8021700:	1fa27cf8 	.word	0x1fa27cf8
 8021704:	432aff97 	.word	0x432aff97
 8021708:	ab9423a7 	.word	0xab9423a7

0802170c <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 802170c:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 802170e:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 8021710:	3001      	adds	r0, #1
 8021712:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 8021714:	2a7f      	cmp	r2, #127	@ 0x7f
 8021716:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 802171a:	d8f9      	bhi.n	8021710 <varint_size+0x4>
  return bytes_needed;
}
 802171c:	4770      	bx	lr

0802171e <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 802171e:	b500      	push	{lr}
 8021720:	4686      	mov	lr, r0
  size_t len = 0;
 8021722:	2300      	movs	r3, #0
 8021724:	e007      	b.n	8021736 <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 8021726:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 802172a:	1c58      	adds	r0, r3, #1
 802172c:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 8021730:	2a7f      	cmp	r2, #127	@ 0x7f
 8021732:	d907      	bls.n	8021744 <encode_varint+0x26>
    buf[len++] = b;
 8021734:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 8021736:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 802173a:	460a      	mov	r2, r1
 802173c:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 802173e:	2a7f      	cmp	r2, #127	@ 0x7f
 8021740:	d9f3      	bls.n	802172a <encode_varint+0xc>
 8021742:	e7f0      	b.n	8021726 <encode_varint+0x8>

  return len;
}
 8021744:	f85d fb04 	ldr.w	pc, [sp], #4

08021748 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 8021748:	2300      	movs	r3, #0
 802174a:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 802174c:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 8021750:	2b03      	cmp	r3, #3
 8021752:	d81d      	bhi.n	8021790 <decode_varint+0x48>
 8021754:	428b      	cmp	r3, r1
 8021756:	d219      	bcs.n	802178c <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 8021758:	b530      	push	{r4, r5, lr}
 802175a:	e003      	b.n	8021764 <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 802175c:	1c58      	adds	r0, r3, #1
 802175e:	e012      	b.n	8021786 <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8021760:	428b      	cmp	r3, r1
 8021762:	d211      	bcs.n	8021788 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 8021764:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 8021768:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 802176c:	6815      	ldr	r5, [r2, #0]
 802176e:	fb0c 5404 	mla	r4, ip, r4, r5
 8021772:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 8021774:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8021778:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 802177c:	d0ee      	beq.n	802175c <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 802177e:	3301      	adds	r3, #1
 8021780:	2b03      	cmp	r3, #3
 8021782:	d9ed      	bls.n	8021760 <decode_varint+0x18>
  }

  return 0;
 8021784:	2000      	movs	r0, #0
}
 8021786:	bd30      	pop	{r4, r5, pc}
  return 0;
 8021788:	2000      	movs	r0, #0
 802178a:	e7fc      	b.n	8021786 <decode_varint+0x3e>
 802178c:	2000      	movs	r0, #0
 802178e:	4770      	bx	lr
 8021790:	2000      	movs	r0, #0
}
 8021792:	4770      	bx	lr

08021794 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 8021794:	2300      	movs	r3, #0
 8021796:	2b1a      	cmp	r3, #26
 8021798:	d80b      	bhi.n	80217b2 <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 802179a:	4a07      	ldr	r2, [pc, #28]	@ (80217b8 <mqtt_prop_type_by_id+0x24>)
 802179c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80217a0:	4282      	cmp	r2, r0
 80217a2:	d001      	beq.n	80217a8 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 80217a4:	3301      	adds	r3, #1
 80217a6:	e7f6      	b.n	8021796 <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 80217a8:	4a03      	ldr	r2, [pc, #12]	@ (80217b8 <mqtt_prop_type_by_id+0x24>)
 80217aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80217ae:	7858      	ldrb	r0, [r3, #1]
 80217b0:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 80217b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80217b6:	4770      	bx	lr
 80217b8:	0803bff4 	.word	0x0803bff4

080217bc <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 80217bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80217c0:	4606      	mov	r6, r0
 80217c2:	4688      	mov	r8, r1
  size_t i, size = 0;
 80217c4:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 80217c6:	462c      	mov	r4, r5
 80217c8:	e005      	b.n	80217d6 <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 80217ca:	697d      	ldr	r5, [r7, #20]
 80217cc:	68fb      	ldr	r3, [r7, #12]
 80217ce:	441d      	add	r5, r3
 80217d0:	444d      	add	r5, r9
 80217d2:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 80217d4:	3401      	adds	r4, #1
 80217d6:	4544      	cmp	r4, r8
 80217d8:	d231      	bcs.n	802183e <get_properties_length+0x82>
    size++;  // identifier
 80217da:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80217de:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80217e2:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 80217e6:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 80217ea:	f7ff ffd3 	bl	8021794 <mqtt_prop_type_by_id>
 80217ee:	2806      	cmp	r0, #6
 80217f0:	d824      	bhi.n	802183c <get_properties_length+0x80>
 80217f2:	a301      	add	r3, pc, #4	@ (adr r3, 80217f8 <get_properties_length+0x3c>)
 80217f4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80217f8:	08021839 	.word	0x08021839
 80217fc:	08021815 	.word	0x08021815
 8021800:	080217cb 	.word	0x080217cb
 8021804:	0802181d 	.word	0x0802181d
 8021808:	08021825 	.word	0x08021825
 802180c:	08021831 	.word	0x08021831
 8021810:	08021835 	.word	0x08021835
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8021814:	697d      	ldr	r5, [r7, #20]
 8021816:	444d      	add	r5, r9
 8021818:	3502      	adds	r5, #2
        break;
 802181a:	e7db      	b.n	80217d4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 802181c:	697d      	ldr	r5, [r7, #20]
 802181e:	444d      	add	r5, r9
 8021820:	3502      	adds	r5, #2
        break;
 8021822:	e7d7      	b.n	80217d4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 8021824:	6878      	ldr	r0, [r7, #4]
 8021826:	f7ff ff71 	bl	802170c <varint_size>
 802182a:	eb00 0509 	add.w	r5, r0, r9
        break;
 802182e:	e7d1      	b.n	80217d4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8021830:	3505      	adds	r5, #5
        break;
 8021832:	e7cf      	b.n	80217d4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 8021834:	3503      	adds	r5, #3
        break;
 8021836:	e7cd      	b.n	80217d4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 8021838:	3502      	adds	r5, #2
        break;
 802183a:	e7cb      	b.n	80217d4 <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802183c:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 802183e:	4628      	mov	r0, r5
 8021840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08021844 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 8021844:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 8021846:	f7ff ffb9 	bl	80217bc <get_properties_length>
 802184a:	4604      	mov	r4, r0
  size += varint_size(size);
 802184c:	f7ff ff5e 	bl	802170c <varint_size>
  return size;
}
 8021850:	4420      	add	r0, r4
 8021852:	bd10      	pop	{r4, pc}

08021854 <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 8021854:	b410      	push	{r4}
 8021856:	b085      	sub	sp, #20
 8021858:	466b      	mov	r3, sp
 802185a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 802185e:	2300      	movs	r3, #0
 8021860:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 8021862:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 8021864:	9901      	ldr	r1, [sp, #4]
 8021866:	4299      	cmp	r1, r3
 8021868:	d92c      	bls.n	80218c4 <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 802186a:	9c00      	ldr	r4, [sp, #0]
 802186c:	5ce1      	ldrb	r1, [r4, r3]
 802186e:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 8021872:	b2c0      	uxtb	r0, r0
 8021874:	2809      	cmp	r0, #9
 8021876:	d812      	bhi.n	802189e <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 8021878:	f10c 0010 	add.w	r0, ip, #16
 802187c:	4468      	add	r0, sp
 802187e:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 8021882:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021886:	3930      	subs	r1, #48	@ 0x30
 8021888:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 802188c:	29ff      	cmp	r1, #255	@ 0xff
 802188e:	dc28      	bgt.n	80218e2 <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 8021890:	f10c 0010 	add.w	r0, ip, #16
 8021894:	4468      	add	r0, sp
 8021896:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 802189a:	3301      	adds	r3, #1
 802189c:	e7e2      	b.n	8021864 <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 802189e:	292e      	cmp	r1, #46	@ 0x2e
 80218a0:	d121      	bne.n	80218e6 <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 80218a2:	f1bc 0f02 	cmp.w	ip, #2
 80218a6:	d820      	bhi.n	80218ea <mg_aton4+0x96>
 80218a8:	b923      	cbnz	r3, 80218b4 <mg_aton4+0x60>
 80218aa:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 80218ac:	b005      	add	sp, #20
 80218ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80218b2:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 80218b4:	441c      	add	r4, r3
 80218b6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80218ba:	292e      	cmp	r1, #46	@ 0x2e
 80218bc:	d017      	beq.n	80218ee <mg_aton4+0x9a>
      num_dots++;
 80218be:	f10c 0c01 	add.w	ip, ip, #1
 80218c2:	e7ea      	b.n	802189a <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 80218c4:	f1bc 0f03 	cmp.w	ip, #3
 80218c8:	d113      	bne.n	80218f2 <mg_aton4+0x9e>
 80218ca:	9900      	ldr	r1, [sp, #0]
 80218cc:	4419      	add	r1, r3
 80218ce:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80218d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80218d4:	d00f      	beq.n	80218f6 <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 80218d6:	9b03      	ldr	r3, [sp, #12]
 80218d8:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 80218da:	2300      	movs	r3, #0
 80218dc:	74d3      	strb	r3, [r2, #19]
  return true;
 80218de:	2001      	movs	r0, #1
 80218e0:	e7e4      	b.n	80218ac <mg_aton4+0x58>
      if (octet > 255) return false;
 80218e2:	2000      	movs	r0, #0
 80218e4:	e7e2      	b.n	80218ac <mg_aton4+0x58>
      return false;
 80218e6:	2000      	movs	r0, #0
 80218e8:	e7e0      	b.n	80218ac <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 80218ea:	2000      	movs	r0, #0
 80218ec:	e7de      	b.n	80218ac <mg_aton4+0x58>
 80218ee:	2000      	movs	r0, #0
 80218f0:	e7dc      	b.n	80218ac <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 80218f2:	2000      	movs	r0, #0
 80218f4:	e7da      	b.n	80218ac <mg_aton4+0x58>
 80218f6:	2000      	movs	r0, #0
 80218f8:	e7d8      	b.n	80218ac <mg_aton4+0x58>

080218fa <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 80218fa:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 80218fc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80218fe:	b103      	cbz	r3, 8021902 <mg_tcpip_call+0x8>
 8021900:	4798      	blx	r3
}
 8021902:	bd08      	pop	{r3, pc}

08021904 <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8021904:	2300      	movs	r3, #0
 8021906:	e005      	b.n	8021914 <csumup+0x10>
 8021908:	f811 c003 	ldrb.w	ip, [r1, r3]
 802190c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8021910:	4460      	add	r0, ip
 8021912:	3301      	adds	r3, #1
 8021914:	4293      	cmp	r3, r2
 8021916:	d205      	bcs.n	8021924 <csumup+0x20>
 8021918:	f013 0f01 	tst.w	r3, #1
 802191c:	d0f4      	beq.n	8021908 <csumup+0x4>
 802191e:	f811 c003 	ldrb.w	ip, [r1, r3]
 8021922:	e7f5      	b.n	8021910 <csumup+0xc>
  return sum;
}
 8021924:	4770      	bx	lr

08021926 <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8021926:	b538      	push	{r3, r4, r5, lr}
 8021928:	4604      	mov	r4, r0
 802192a:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 802192c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 802192e:	685b      	ldr	r3, [r3, #4]
 8021930:	4602      	mov	r2, r0
 8021932:	6940      	ldr	r0, [r0, #20]
 8021934:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 8021936:	4285      	cmp	r5, r0
 8021938:	d000      	beq.n	802193c <ether_output+0x16>
  return n;
}
 802193a:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 802193c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 802193e:	3301      	adds	r3, #1
 8021940:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 8021942:	e7fa      	b.n	802193a <ether_output+0x14>

08021944 <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8021944:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8021948:	f013 0f28 	tst.w	r3, #40	@ 0x28
 802194c:	d106      	bne.n	802195c <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 802194e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8021950:	b132      	cbz	r2, 8021960 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8021952:	f013 0f90 	tst.w	r3, #144	@ 0x90
 8021956:	d005      	beq.n	8021964 <can_write+0x20>
 8021958:	2000      	movs	r0, #0
 802195a:	4770      	bx	lr
 802195c:	2000      	movs	r0, #0
 802195e:	4770      	bx	lr
 8021960:	2000      	movs	r0, #0
 8021962:	4770      	bx	lr
 8021964:	2001      	movs	r0, #1
}
 8021966:	4770      	bx	lr

08021968 <mg_esc>:
  uint8_t *p = va_arg(*ap, uint8_t *);
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
                    p[3], p[4], p[5]);
}

static char mg_esc(int c, bool esc) {
 8021968:	b410      	push	{r4}
 802196a:	4602      	mov	r2, r0
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 802196c:	460c      	mov	r4, r1
 802196e:	b109      	cbz	r1, 8021974 <mg_esc+0xc>
 8021970:	4b0b      	ldr	r3, [pc, #44]	@ (80219a0 <mg_esc+0x38>)
 8021972:	e007      	b.n	8021984 <mg_esc+0x1c>
 8021974:	4b0b      	ldr	r3, [pc, #44]	@ (80219a4 <mg_esc+0x3c>)
 8021976:	e005      	b.n	8021984 <mg_esc+0x1c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8021978:	4a0a      	ldr	r2, [pc, #40]	@ (80219a4 <mg_esc+0x3c>)
 802197a:	1a9b      	subs	r3, r3, r2
 802197c:	4a08      	ldr	r2, [pc, #32]	@ (80219a0 <mg_esc+0x38>)
 802197e:	5cd0      	ldrb	r0, [r2, r3]
 8021980:	e00a      	b.n	8021998 <mg_esc+0x30>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8021982:	3301      	adds	r3, #1
 8021984:	7818      	ldrb	r0, [r3, #0]
 8021986:	b138      	cbz	r0, 8021998 <mg_esc+0x30>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8021988:	4290      	cmp	r0, r2
 802198a:	d1fa      	bne.n	8021982 <mg_esc+0x1a>
 802198c:	2c00      	cmp	r4, #0
 802198e:	d0f3      	beq.n	8021978 <mg_esc+0x10>
 8021990:	4a03      	ldr	r2, [pc, #12]	@ (80219a0 <mg_esc+0x38>)
 8021992:	1a9b      	subs	r3, r3, r2
 8021994:	4a03      	ldr	r2, [pc, #12]	@ (80219a4 <mg_esc+0x3c>)
 8021996:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8021998:	f85d 4b04 	ldr.w	r4, [sp], #4
 802199c:	4770      	bx	lr
 802199e:	bf00      	nop
 80219a0:	0803ac2c 	.word	0x0803ac2c
 80219a4:	0803ac34 	.word	0x0803ac34

080219a8 <mg_escape>:

static char mg_escape(int c) {
 80219a8:	b508      	push	{r3, lr}
  return mg_esc(c, true);
 80219aa:	2101      	movs	r1, #1
 80219ac:	f7ff ffdc 	bl	8021968 <mg_esc>
}
 80219b0:	bd08      	pop	{r3, pc}

080219b2 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 80219b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219b6:	4607      	mov	r7, r0
 80219b8:	460e      	mov	r6, r1
 80219ba:	4692      	mov	sl, r2
 80219bc:	4699      	mov	r9, r3
  size_t i = 0, extra = 0;
 80219be:	f04f 0b00 	mov.w	fp, #0
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80219c2:	465c      	mov	r4, fp
 80219c4:	e003      	b.n	80219ce <qcpy+0x1c>
    char c = mg_escape(buf[i]);
    if (c) {
      out('\\', ptr), out(c, ptr), extra++;
    } else {
      out(buf[i], ptr);
 80219c6:	4631      	mov	r1, r6
 80219c8:	4628      	mov	r0, r5
 80219ca:	47b8      	blx	r7
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80219cc:	3401      	adds	r4, #1
 80219ce:	454c      	cmp	r4, r9
 80219d0:	d211      	bcs.n	80219f6 <qcpy+0x44>
 80219d2:	f81a 5004 	ldrb.w	r5, [sl, r4]
 80219d6:	b175      	cbz	r5, 80219f6 <qcpy+0x44>
    char c = mg_escape(buf[i]);
 80219d8:	4628      	mov	r0, r5
 80219da:	f7ff ffe5 	bl	80219a8 <mg_escape>
    if (c) {
 80219de:	4680      	mov	r8, r0
 80219e0:	2800      	cmp	r0, #0
 80219e2:	d0f0      	beq.n	80219c6 <qcpy+0x14>
      out('\\', ptr), out(c, ptr), extra++;
 80219e4:	4631      	mov	r1, r6
 80219e6:	205c      	movs	r0, #92	@ 0x5c
 80219e8:	47b8      	blx	r7
 80219ea:	4631      	mov	r1, r6
 80219ec:	4640      	mov	r0, r8
 80219ee:	47b8      	blx	r7
 80219f0:	f10b 0b01 	add.w	fp, fp, #1
 80219f4:	e7ea      	b.n	80219cc <qcpy+0x1a>
    }
  }
  return i + extra;
}
 80219f6:	eb04 000b 	add.w	r0, r4, fp
 80219fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021a00 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8021a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a04:	4607      	mov	r7, r0
 8021a06:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 8021a08:	6811      	ldr	r1, [r2, #0]
 8021a0a:	1d0b      	adds	r3, r1, #4
 8021a0c:	6013      	str	r3, [r2, #0]
 8021a0e:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8021a12:	f101 0308 	add.w	r3, r1, #8
 8021a16:	6013      	str	r3, [r2, #0]
 8021a18:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 8021a1c:	2400      	movs	r4, #0
 8021a1e:	e00e      	b.n	8021a3e <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8021a20:	f818 3004 	ldrb.w	r3, [r8, r4]
 8021a24:	091b      	lsrs	r3, r3, #4
 8021a26:	4d09      	ldr	r5, [pc, #36]	@ (8021a4c <mg_print_hex+0x4c>)
 8021a28:	4631      	mov	r1, r6
 8021a2a:	5ce8      	ldrb	r0, [r5, r3]
 8021a2c:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 8021a2e:	f818 3004 	ldrb.w	r3, [r8, r4]
 8021a32:	f003 030f 	and.w	r3, r3, #15
 8021a36:	4631      	mov	r1, r6
 8021a38:	5ce8      	ldrb	r0, [r5, r3]
 8021a3a:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 8021a3c:	3401      	adds	r4, #1
 8021a3e:	454c      	cmp	r4, r9
 8021a40:	d3ee      	bcc.n	8021a20 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 8021a42:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8021a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021a4a:	bf00      	nop
 8021a4c:	0803a780 	.word	0x0803a780

08021a50 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 8021a50:	4684      	mov	ip, r0
  if (MG_BIG_ENDIAN) {
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8021a52:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8021a56:	ea4f 2332 	mov.w	r3, r2, ror #8
 8021a5a:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 8021a5e:	ea4f 6232 	mov.w	r2, r2, ror #24
 8021a62:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8021a66:	ea43 0002 	orr.w	r0, r3, r2
 8021a6a:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
  }
  return block->l[i];
}
 8021a6e:	4770      	bx	lr

08021a70 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8021a70:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021a74:	b2db      	uxtb	r3, r3
 8021a76:	2b19      	cmp	r3, #25
 8021a78:	d800      	bhi.n	8021a7c <mg_tolc+0xc>
 8021a7a:	3020      	adds	r0, #32
}
 8021a7c:	4770      	bx	lr

08021a7e <isbyte>:
  return ~crc;
}

static int isbyte(int n) {
  return n >= 0 && n <= 255;
}
 8021a7e:	28ff      	cmp	r0, #255	@ 0xff
 8021a80:	bf8c      	ite	hi
 8021a82:	2000      	movhi	r0, #0
 8021a84:	2001      	movls	r0, #1
 8021a86:	4770      	bx	lr

08021a88 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 8021a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a8c:	b082      	sub	sp, #8
 8021a8e:	4605      	mov	r5, r0
 8021a90:	9e08      	ldr	r6, [sp, #32]
 8021a92:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8021a94:	0a10      	lsrs	r0, r2, #8
 8021a96:	f88d 0004 	strb.w	r0, [sp, #4]
 8021a9a:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8021a9e:	00c9      	lsls	r1, r1, #3
 8021aa0:	b249      	sxtb	r1, r1
 8021aa2:	4698      	mov	r8, r3
 8021aa4:	b143      	cbz	r3, 8021ab8 <w5500_txn+0x30>
 8021aa6:	2304      	movs	r3, #4
 8021aa8:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8021aaa:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 8021aae:	686b      	ldr	r3, [r5, #4]
 8021ab0:	6828      	ldr	r0, [r5, #0]
 8021ab2:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8021ab4:	2400      	movs	r4, #0
 8021ab6:	e00a      	b.n	8021ace <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8021ab8:	2300      	movs	r3, #0
 8021aba:	e7f5      	b.n	8021aa8 <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8021abc:	68eb      	ldr	r3, [r5, #12]
 8021abe:	f104 0208 	add.w	r2, r4, #8
 8021ac2:	446a      	add	r2, sp
 8021ac4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8021ac8:	6828      	ldr	r0, [r5, #0]
 8021aca:	4798      	blx	r3
 8021acc:	3401      	adds	r4, #1
 8021ace:	2c02      	cmp	r4, #2
 8021ad0:	d9f4      	bls.n	8021abc <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 8021ad2:	2400      	movs	r4, #0
 8021ad4:	e000      	b.n	8021ad8 <w5500_txn+0x50>
 8021ad6:	3401      	adds	r4, #1
 8021ad8:	42bc      	cmp	r4, r7
 8021ada:	d208      	bcs.n	8021aee <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 8021adc:	68eb      	ldr	r3, [r5, #12]
 8021ade:	5d31      	ldrb	r1, [r6, r4]
 8021ae0:	6828      	ldr	r0, [r5, #0]
 8021ae2:	4798      	blx	r3
    if (!wr) p[i] = r;
 8021ae4:	f1b8 0f00 	cmp.w	r8, #0
 8021ae8:	d1f5      	bne.n	8021ad6 <w5500_txn+0x4e>
 8021aea:	5530      	strb	r0, [r6, r4]
 8021aec:	e7f3      	b.n	8021ad6 <w5500_txn+0x4e>
  }
  s->end(s->spi);
 8021aee:	68ab      	ldr	r3, [r5, #8]
 8021af0:	6828      	ldr	r0, [r5, #0]
 8021af2:	4798      	blx	r3
}
 8021af4:	b002      	add	sp, #8
 8021af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021afa <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 8021afa:	b510      	push	{r4, lr}
 8021afc:	b082      	sub	sp, #8
 8021afe:	9c04      	ldr	r4, [sp, #16]
 8021b00:	9401      	str	r4, [sp, #4]
 8021b02:	9300      	str	r3, [sp, #0]
 8021b04:	2301      	movs	r3, #1
 8021b06:	f7ff ffbf 	bl	8021a88 <w5500_txn>
 8021b0a:	b002      	add	sp, #8
 8021b0c:	bd10      	pop	{r4, pc}

08021b0e <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 8021b0e:	b500      	push	{lr}
 8021b10:	b085      	sub	sp, #20
 8021b12:	f88d 300f 	strb.w	r3, [sp, #15]
 8021b16:	2301      	movs	r3, #1
 8021b18:	9300      	str	r3, [sp, #0]
 8021b1a:	f10d 030f 	add.w	r3, sp, #15
 8021b1e:	f7ff ffec 	bl	8021afa <w5500_wn>
 8021b22:	b005      	add	sp, #20
 8021b24:	f85d fb04 	ldr.w	pc, [sp], #4

08021b28 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8021b28:	b500      	push	{lr}
 8021b2a:	b085      	sub	sp, #20
 8021b2c:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8021b30:	f88d c00c 	strb.w	ip, [sp, #12]
 8021b34:	f88d 300d 	strb.w	r3, [sp, #13]
 8021b38:	2302      	movs	r3, #2
 8021b3a:	9300      	str	r3, [sp, #0]
 8021b3c:	ab03      	add	r3, sp, #12
 8021b3e:	f7ff ffdc 	bl	8021afa <w5500_wn>
 8021b42:	b005      	add	sp, #20
 8021b44:	f85d fb04 	ldr.w	pc, [sp], #4

08021b48 <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8021b48:	b510      	push	{r4, lr}
 8021b4a:	b082      	sub	sp, #8
 8021b4c:	9c04      	ldr	r4, [sp, #16]
 8021b4e:	9401      	str	r4, [sp, #4]
 8021b50:	9300      	str	r3, [sp, #0]
 8021b52:	2300      	movs	r3, #0
 8021b54:	f7ff ff98 	bl	8021a88 <w5500_txn>
 8021b58:	b002      	add	sp, #8
 8021b5a:	bd10      	pop	{r4, pc}

08021b5c <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 8021b5c:	b500      	push	{lr}
 8021b5e:	b085      	sub	sp, #20
 8021b60:	2300      	movs	r3, #0
 8021b62:	f88d 300f 	strb.w	r3, [sp, #15]
 8021b66:	2301      	movs	r3, #1
 8021b68:	9300      	str	r3, [sp, #0]
 8021b6a:	f10d 030f 	add.w	r3, sp, #15
 8021b6e:	f7ff ffeb 	bl	8021b48 <w5500_rn>
 8021b72:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8021b76:	b005      	add	sp, #20
 8021b78:	f85d fb04 	ldr.w	pc, [sp], #4

08021b7c <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 8021b7c:	b500      	push	{lr}
 8021b7e:	b085      	sub	sp, #20
 8021b80:	2300      	movs	r3, #0
 8021b82:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021b86:	2302      	movs	r3, #2
 8021b88:	9300      	str	r3, [sp, #0]
 8021b8a:	ab03      	add	r3, sp, #12
 8021b8c:	f7ff ffdc 	bl	8021b48 <w5500_rn>
 8021b90:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8021b94:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8021b98:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8021b9c:	b005      	add	sp, #20
 8021b9e:	f85d fb04 	ldr.w	pc, [sp], #4

08021ba2 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8021ba2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021ba6:	b083      	sub	sp, #12
 8021ba8:	4606      	mov	r6, r0
 8021baa:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8021bac:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8021bae:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8021bb0:	4604      	mov	r4, r0
 8021bb2:	2226      	movs	r2, #38	@ 0x26
 8021bb4:	2101      	movs	r1, #1
 8021bb6:	4628      	mov	r0, r5
 8021bb8:	f7ff ffe0 	bl	8021b7c <w5500_r2>
 8021bbc:	4284      	cmp	r4, r0
 8021bbe:	d3f7      	bcc.n	8021bb0 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8021bc0:	b91c      	cbnz	r4, 8021bca <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 8021bc2:	4620      	mov	r0, r4
 8021bc4:	b003      	add	sp, #12
 8021bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 8021bca:	2228      	movs	r2, #40	@ 0x28
 8021bcc:	2101      	movs	r1, #1
 8021bce:	4628      	mov	r0, r5
 8021bd0:	f7ff ffd4 	bl	8021b7c <w5500_r2>
 8021bd4:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 8021bd6:	4602      	mov	r2, r0
 8021bd8:	2103      	movs	r1, #3
 8021bda:	4628      	mov	r0, r5
 8021bdc:	f7ff ffce 	bl	8021b7c <w5500_r2>
 8021be0:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 8021be2:	fa1f f188 	uxth.w	r1, r8
 8021be6:	3102      	adds	r1, #2
 8021be8:	4288      	cmp	r0, r1
 8021bea:	dc0e      	bgt.n	8021c0a <w5500_rx+0x68>
 8021bec:	2801      	cmp	r0, #1
 8021bee:	d801      	bhi.n	8021bf4 <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8021bf0:	2400      	movs	r4, #0
 8021bf2:	e00b      	b.n	8021c0c <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 8021bf4:	1e84      	subs	r4, r0, #2
 8021bf6:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8021bf8:	1cba      	adds	r2, r7, #2
 8021bfa:	9400      	str	r4, [sp, #0]
 8021bfc:	4633      	mov	r3, r6
 8021bfe:	b292      	uxth	r2, r2
 8021c00:	2103      	movs	r1, #3
 8021c02:	4628      	mov	r0, r5
 8021c04:	f7ff ffa0 	bl	8021b48 <w5500_rn>
 8021c08:	e000      	b.n	8021c0c <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8021c0a:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 8021c0c:	eb07 0309 	add.w	r3, r7, r9
 8021c10:	b29b      	uxth	r3, r3
 8021c12:	2228      	movs	r2, #40	@ 0x28
 8021c14:	2101      	movs	r1, #1
 8021c16:	4628      	mov	r0, r5
 8021c18:	f7ff ff86 	bl	8021b28 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 8021c1c:	2340      	movs	r3, #64	@ 0x40
 8021c1e:	2201      	movs	r2, #1
 8021c20:	4611      	mov	r1, r2
 8021c22:	4628      	mov	r0, r5
 8021c24:	f7ff ff73 	bl	8021b0e <w5500_w1>
 8021c28:	e7cb      	b.n	8021bc2 <w5500_rx+0x20>

08021c2a <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 8021c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c2e:	b082      	sub	sp, #8
 8021c30:	4680      	mov	r8, r0
 8021c32:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8021c34:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 8021c36:	b28f      	uxth	r7, r1
 8021c38:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 8021c3a:	e004      	b.n	8021c46 <w5500_tx+0x1c>
 8021c3c:	2220      	movs	r2, #32
 8021c3e:	2101      	movs	r1, #1
 8021c40:	4630      	mov	r0, r6
 8021c42:	f7ff ff9b 	bl	8021b7c <w5500_r2>
 8021c46:	42b8      	cmp	r0, r7
 8021c48:	d3f8      	bcc.n	8021c3c <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 8021c4a:	2224      	movs	r2, #36	@ 0x24
 8021c4c:	2101      	movs	r1, #1
 8021c4e:	4630      	mov	r0, r6
 8021c50:	f7ff ff94 	bl	8021b7c <w5500_r2>
 8021c54:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8021c56:	b2ad      	uxth	r5, r5
 8021c58:	9500      	str	r5, [sp, #0]
 8021c5a:	4643      	mov	r3, r8
 8021c5c:	4602      	mov	r2, r0
 8021c5e:	2102      	movs	r1, #2
 8021c60:	4630      	mov	r0, r6
 8021c62:	f7ff ff4a 	bl	8021afa <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8021c66:	193b      	adds	r3, r7, r4
 8021c68:	b29b      	uxth	r3, r3
 8021c6a:	2224      	movs	r2, #36	@ 0x24
 8021c6c:	2101      	movs	r1, #1
 8021c6e:	4630      	mov	r0, r6
 8021c70:	f7ff ff5a 	bl	8021b28 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8021c74:	2320      	movs	r3, #32
 8021c76:	2201      	movs	r2, #1
 8021c78:	4611      	mov	r1, r2
 8021c7a:	4630      	mov	r0, r6
 8021c7c:	f7ff ff47 	bl	8021b0e <w5500_w1>
  for (i = 0; i < 40; i++) {
 8021c80:	2400      	movs	r4, #0
 8021c82:	e004      	b.n	8021c8e <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8021c84:	f015 0f18 	tst.w	r5, #24
 8021c88:	d116      	bne.n	8021cb8 <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 8021c8a:	3401      	adds	r4, #1
 8021c8c:	b2a4      	uxth	r4, r4
 8021c8e:	2c27      	cmp	r4, #39	@ 0x27
 8021c90:	d812      	bhi.n	8021cb8 <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8021c92:	2202      	movs	r2, #2
 8021c94:	2101      	movs	r1, #1
 8021c96:	4630      	mov	r0, r6
 8021c98:	f7ff ff60 	bl	8021b5c <w5500_r1>
    if (ir == 0) continue;
 8021c9c:	4605      	mov	r5, r0
 8021c9e:	2800      	cmp	r0, #0
 8021ca0:	d0f3      	beq.n	8021c8a <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8021ca2:	4603      	mov	r3, r0
 8021ca4:	2202      	movs	r2, #2
 8021ca6:	2101      	movs	r1, #1
 8021ca8:	4630      	mov	r0, r6
 8021caa:	f7ff ff30 	bl	8021b0e <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 8021cae:	f015 0f08 	tst.w	r5, #8
 8021cb2:	d0e7      	beq.n	8021c84 <w5500_tx+0x5a>
 8021cb4:	2700      	movs	r7, #0
 8021cb6:	e7e5      	b.n	8021c84 <w5500_tx+0x5a>
  }
  return len;
}
 8021cb8:	4638      	mov	r0, r7
 8021cba:	b002      	add	sp, #8
 8021cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021cc0 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8021cc0:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8021cc2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 8021cc4:	68a3      	ldr	r3, [r4, #8]
 8021cc6:	6820      	ldr	r0, [r4, #0]
 8021cc8:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 8021cca:	2380      	movs	r3, #128	@ 0x80
 8021ccc:	2200      	movs	r2, #0
 8021cce:	4611      	mov	r1, r2
 8021cd0:	4620      	mov	r0, r4
 8021cd2:	f7ff ff1c 	bl	8021b0e <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8021cd6:	2300      	movs	r3, #0
 8021cd8:	222e      	movs	r2, #46	@ 0x2e
 8021cda:	4619      	mov	r1, r3
 8021cdc:	4620      	mov	r0, r4
 8021cde:	f7ff ff16 	bl	8021b0e <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8021ce2:	23f8      	movs	r3, #248	@ 0xf8
 8021ce4:	222e      	movs	r2, #46	@ 0x2e
 8021ce6:	2100      	movs	r1, #0
 8021ce8:	4620      	mov	r0, r4
 8021cea:	f7ff ff10 	bl	8021b0e <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 8021cee:	2310      	movs	r3, #16
 8021cf0:	221e      	movs	r2, #30
 8021cf2:	2101      	movs	r1, #1
 8021cf4:	4620      	mov	r0, r4
 8021cf6:	f7ff ff0a 	bl	8021b0e <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 8021cfa:	2310      	movs	r3, #16
 8021cfc:	221f      	movs	r2, #31
 8021cfe:	2101      	movs	r1, #1
 8021d00:	4620      	mov	r0, r4
 8021d02:	f7ff ff04 	bl	8021b0e <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8021d06:	2304      	movs	r3, #4
 8021d08:	2200      	movs	r2, #0
 8021d0a:	2101      	movs	r1, #1
 8021d0c:	4620      	mov	r0, r4
 8021d0e:	f7ff fefe 	bl	8021b0e <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8021d12:	2301      	movs	r3, #1
 8021d14:	461a      	mov	r2, r3
 8021d16:	4619      	mov	r1, r3
 8021d18:	4620      	mov	r0, r4
 8021d1a:	f7ff fef8 	bl	8021b0e <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 8021d1e:	2203      	movs	r2, #3
 8021d20:	2101      	movs	r1, #1
 8021d22:	4620      	mov	r0, r4
 8021d24:	f7ff ff1a 	bl	8021b5c <w5500_r1>
}
 8021d28:	2842      	cmp	r0, #66	@ 0x42
 8021d2a:	bf14      	ite	ne
 8021d2c:	2000      	movne	r0, #0
 8021d2e:	2001      	moveq	r0, #1
 8021d30:	bd10      	pop	{r4, pc}

08021d32 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 8021d32:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 8021d34:	222e      	movs	r2, #46	@ 0x2e
 8021d36:	2100      	movs	r1, #0
 8021d38:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8021d3a:	f7ff ff0f 	bl	8021b5c <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 8021d3e:	f000 0001 	and.w	r0, r0, #1
 8021d42:	bd08      	pop	{r3, pc}

08021d44 <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8021d44:	b508      	push	{r3, lr}
 8021d46:	4602      	mov	r2, r0
 8021d48:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 8021d4a:	e000      	b.n	8021d4e <mg_dns_free+0xa>
 8021d4c:	461a      	mov	r2, r3
 8021d4e:	6813      	ldr	r3, [r2, #0]
 8021d50:	4283      	cmp	r3, r0
 8021d52:	d1fb      	bne.n	8021d4c <mg_dns_free+0x8>
 8021d54:	6803      	ldr	r3, [r0, #0]
 8021d56:	6013      	str	r3, [r2, #0]
  free(d);
 8021d58:	f7f9 fa00 	bl	801b15c <vPortFree>
}
 8021d5c:	bd08      	pop	{r3, pc}

08021d5e <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 8021d5e:	b082      	sub	sp, #8
 8021d60:	ab02      	add	r3, sp, #8
 8021d62:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 8021d66:	b111      	cbz	r1, 8021d6e <mg_atone+0x10>
 8021d68:	2000      	movs	r0, #0
}
 8021d6a:	b002      	add	sp, #8
 8021d6c:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 8021d6e:	6011      	str	r1, [r2, #0]
 8021d70:	6051      	str	r1, [r2, #4]
 8021d72:	6091      	str	r1, [r2, #8]
 8021d74:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 8021d76:	74d1      	strb	r1, [r2, #19]
  return true;
 8021d78:	2001      	movs	r0, #1
 8021d7a:	e7f6      	b.n	8021d6a <mg_atone+0xc>

08021d7c <urlparse>:
static struct url urlparse(const char *url) {
 8021d7c:	b510      	push	{r4, lr}
 8021d7e:	b088      	sub	sp, #32
 8021d80:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 8021d82:	2200      	movs	r2, #0
 8021d84:	9201      	str	r2, [sp, #4]
 8021d86:	9202      	str	r2, [sp, #8]
 8021d88:	9203      	str	r2, [sp, #12]
 8021d8a:	9204      	str	r2, [sp, #16]
 8021d8c:	9205      	str	r2, [sp, #20]
 8021d8e:	9206      	str	r2, [sp, #24]
 8021d90:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8021d92:	e00f      	b.n	8021db4 <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8021d94:	b19a      	cbz	r2, 8021dbe <urlparse+0x42>
 8021d96:	9804      	ldr	r0, [sp, #16]
 8021d98:	b988      	cbnz	r0, 8021dbe <urlparse+0x42>
 8021d9a:	1888      	adds	r0, r1, r2
 8021d9c:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8021da0:	282f      	cmp	r0, #47	@ 0x2f
 8021da2:	d10c      	bne.n	8021dbe <urlparse+0x42>
      u.host = i + 1;
 8021da4:	1c53      	adds	r3, r2, #1
 8021da6:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8021da8:	2300      	movs	r3, #0
 8021daa:	9305      	str	r3, [sp, #20]
 8021dac:	e001      	b.n	8021db2 <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8021dae:	2300      	movs	r3, #0
 8021db0:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 8021db2:	3201      	adds	r2, #1
 8021db4:	5c8b      	ldrb	r3, [r1, r2]
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d02c      	beq.n	8021e14 <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8021dba:	2b2f      	cmp	r3, #47	@ 0x2f
 8021dbc:	d0ea      	beq.n	8021d94 <urlparse+0x18>
    } else if (url[i] == ']') {
 8021dbe:	2b5d      	cmp	r3, #93	@ 0x5d
 8021dc0:	d0f5      	beq.n	8021dae <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8021dc2:	2b3a      	cmp	r3, #58	@ 0x3a
 8021dc4:	d00b      	beq.n	8021dde <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8021dc6:	2b40      	cmp	r3, #64	@ 0x40
 8021dc8:	d012      	beq.n	8021df0 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8021dca:	2b2f      	cmp	r3, #47	@ 0x2f
 8021dcc:	d1f1      	bne.n	8021db2 <urlparse+0x36>
 8021dce:	9b04      	ldr	r3, [sp, #16]
 8021dd0:	2b00      	cmp	r3, #0
 8021dd2:	d0ee      	beq.n	8021db2 <urlparse+0x36>
 8021dd4:	9b06      	ldr	r3, [sp, #24]
 8021dd6:	2b00      	cmp	r3, #0
 8021dd8:	d1eb      	bne.n	8021db2 <urlparse+0x36>
      u.uri = i;
 8021dda:	9206      	str	r2, [sp, #24]
 8021ddc:	e7e9      	b.n	8021db2 <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8021dde:	9805      	ldr	r0, [sp, #20]
 8021de0:	2800      	cmp	r0, #0
 8021de2:	d1f0      	bne.n	8021dc6 <urlparse+0x4a>
 8021de4:	9806      	ldr	r0, [sp, #24]
 8021de6:	2800      	cmp	r0, #0
 8021de8:	d1ed      	bne.n	8021dc6 <urlparse+0x4a>
      u.port = i + 1;
 8021dea:	1c53      	adds	r3, r2, #1
 8021dec:	9305      	str	r3, [sp, #20]
 8021dee:	e7e0      	b.n	8021db2 <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8021df0:	9802      	ldr	r0, [sp, #8]
 8021df2:	2800      	cmp	r0, #0
 8021df4:	d1e9      	bne.n	8021dca <urlparse+0x4e>
 8021df6:	9803      	ldr	r0, [sp, #12]
 8021df8:	2800      	cmp	r0, #0
 8021dfa:	d1e6      	bne.n	8021dca <urlparse+0x4e>
 8021dfc:	9806      	ldr	r0, [sp, #24]
 8021dfe:	2800      	cmp	r0, #0
 8021e00:	d1e3      	bne.n	8021dca <urlparse+0x4e>
      u.user = u.host;
 8021e02:	9b04      	ldr	r3, [sp, #16]
 8021e04:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 8021e06:	9b05      	ldr	r3, [sp, #20]
 8021e08:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 8021e0a:	1c53      	adds	r3, r2, #1
 8021e0c:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8021e0e:	2300      	movs	r3, #0
 8021e10:	9305      	str	r3, [sp, #20]
 8021e12:	e7ce      	b.n	8021db2 <urlparse+0x36>
  u.end = i;
 8021e14:	9207      	str	r2, [sp, #28]
  return u;
 8021e16:	46a4      	mov	ip, r4
 8021e18:	f10d 0e04 	add.w	lr, sp, #4
 8021e1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021e20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021e24:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8021e28:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 8021e2c:	4620      	mov	r0, r4
 8021e2e:	b008      	add	sp, #32
 8021e30:	bd10      	pop	{r4, pc}

08021e32 <mg_dns_parse_name_depth>:
                                      int depth) {
 8021e32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e36:	b085      	sub	sp, #20
 8021e38:	4681      	mov	r9, r0
 8021e3a:	4688      	mov	r8, r1
 8021e3c:	4693      	mov	fp, r2
 8021e3e:	469a      	mov	sl, r3
 8021e40:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8021e42:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8021e44:	b11f      	cbz	r7, 8021e4e <mg_dns_parse_name_depth+0x1c>
 8021e46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021e48:	b90b      	cbnz	r3, 8021e4e <mg_dns_parse_name_depth+0x1c>
 8021e4a:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 8021e4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021e50:	2b05      	cmp	r3, #5
 8021e52:	dc4f      	bgt.n	8021ef4 <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 8021e54:	2600      	movs	r6, #0
 8021e56:	e02f      	b.n	8021eb8 <mg_dns_parse_name_depth+0x86>
      i++;
 8021e58:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8021e5a:	2f00      	cmp	r7, #0
 8021e5c:	d04b      	beq.n	8021ef6 <mg_dns_parse_name_depth+0xc4>
 8021e5e:	3f01      	subs	r7, #1
 8021e60:	2300      	movs	r3, #0
 8021e62:	f80a 3007 	strb.w	r3, [sl, r7]
 8021e66:	e046      	b.n	8021ef6 <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8021e68:	0222      	lsls	r2, r4, #8
 8021e6a:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 8021e6e:	f819 3001 	ldrb.w	r3, [r9, r1]
 8021e72:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8021e74:	1c53      	adds	r3, r2, #1
 8021e76:	4543      	cmp	r3, r8
 8021e78:	d203      	bcs.n	8021e82 <mg_dns_parse_name_depth+0x50>
 8021e7a:	f819 3002 	ldrb.w	r3, [r9, r2]
 8021e7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8021e80:	d901      	bls.n	8021e86 <mg_dns_parse_name_depth+0x54>
      i += 2;
 8021e82:	3602      	adds	r6, #2
      break;
 8021e84:	e7e9      	b.n	8021e5a <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8021e86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021e88:	3301      	adds	r3, #1
 8021e8a:	9302      	str	r3, [sp, #8]
 8021e8c:	9501      	str	r5, [sp, #4]
 8021e8e:	9700      	str	r7, [sp, #0]
 8021e90:	4653      	mov	r3, sl
 8021e92:	4641      	mov	r1, r8
 8021e94:	4648      	mov	r0, r9
 8021e96:	f7ff ffcc 	bl	8021e32 <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8021e9a:	2800      	cmp	r0, #0
 8021e9c:	d1f1      	bne.n	8021e82 <mg_dns_parse_name_depth+0x50>
        return 0;
 8021e9e:	4606      	mov	r6, r0
 8021ea0:	e029      	b.n	8021ef6 <mg_dns_parse_name_depth+0xc4>
 8021ea2:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8021ea4:	1905      	adds	r5, r0, r4
 8021ea6:	42bd      	cmp	r5, r7
 8021ea8:	d31e      	bcc.n	8021ee8 <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 8021eaa:	4426      	add	r6, r4
 8021eac:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8021eae:	42bd      	cmp	r5, r7
 8021eb0:	d202      	bcs.n	8021eb8 <mg_dns_parse_name_depth+0x86>
 8021eb2:	2300      	movs	r3, #0
 8021eb4:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 8021eb8:	eb06 030b 	add.w	r3, r6, fp
 8021ebc:	1c59      	adds	r1, r3, #1
 8021ebe:	4541      	cmp	r1, r8
 8021ec0:	d2cb      	bcs.n	8021e5a <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 8021ec2:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 8021ec6:	2c00      	cmp	r4, #0
 8021ec8:	d0c6      	beq.n	8021e58 <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 8021eca:	2c3f      	cmp	r4, #63	@ 0x3f
 8021ecc:	d8cc      	bhi.n	8021e68 <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 8021ece:	4423      	add	r3, r4
 8021ed0:	3301      	adds	r3, #1
 8021ed2:	4543      	cmp	r3, r8
 8021ed4:	d213      	bcs.n	8021efe <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 8021ed6:	2d00      	cmp	r5, #0
 8021ed8:	d0e3      	beq.n	8021ea2 <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 8021eda:	42bd      	cmp	r5, r7
 8021edc:	d202      	bcs.n	8021ee4 <mg_dns_parse_name_depth+0xb2>
 8021ede:	232e      	movs	r3, #46	@ 0x2e
 8021ee0:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 8021ee4:	1c68      	adds	r0, r5, #1
 8021ee6:	e7dd      	b.n	8021ea4 <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8021ee8:	4622      	mov	r2, r4
 8021eea:	4449      	add	r1, r9
 8021eec:	4450      	add	r0, sl
 8021eee:	f00c fb3b 	bl	802e568 <memcpy>
 8021ef2:	e7da      	b.n	8021eaa <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 8021ef4:	2600      	movs	r6, #0
}
 8021ef6:	4630      	mov	r0, r6
 8021ef8:	b005      	add	sp, #20
 8021efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 8021efe:	2600      	movs	r6, #0
 8021f00:	e7f9      	b.n	8021ef6 <mg_dns_parse_name_depth+0xc4>

08021f02 <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 8021f02:	b510      	push	{r4, lr}
 8021f04:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8021f06:	2400      	movs	r4, #0
 8021f08:	9402      	str	r4, [sp, #8]
 8021f0a:	9401      	str	r4, [sp, #4]
 8021f0c:	9c06      	ldr	r4, [sp, #24]
 8021f0e:	9400      	str	r4, [sp, #0]
 8021f10:	f7ff ff8f 	bl	8021e32 <mg_dns_parse_name_depth>
}
 8021f14:	b004      	add	sp, #16
 8021f16:	bd10      	pop	{r4, pc}

08021f18 <mg_sha1_transform>:
                              const unsigned char *buffer) {
 8021f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f1c:	b09f      	sub	sp, #124	@ 0x7c
 8021f1e:	900d      	str	r0, [sp, #52]	@ 0x34
  memcpy(block, buffer, 64);
 8021f20:	460c      	mov	r4, r1
 8021f22:	af0e      	add	r7, sp, #56	@ 0x38
 8021f24:	f101 0540 	add.w	r5, r1, #64	@ 0x40
 8021f28:	463e      	mov	r6, r7
 8021f2a:	6820      	ldr	r0, [r4, #0]
 8021f2c:	6861      	ldr	r1, [r4, #4]
 8021f2e:	68a2      	ldr	r2, [r4, #8]
 8021f30:	68e3      	ldr	r3, [r4, #12]
 8021f32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8021f34:	3410      	adds	r4, #16
 8021f36:	4637      	mov	r7, r6
 8021f38:	42ac      	cmp	r4, r5
 8021f3a:	d1f5      	bne.n	8021f28 <mg_sha1_transform+0x10>
  a = state[0];
 8021f3c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021f3e:	6805      	ldr	r5, [r0, #0]
  b = state[1];
 8021f40:	6847      	ldr	r7, [r0, #4]
  c = state[2];
 8021f42:	6884      	ldr	r4, [r0, #8]
  d = state[3];
 8021f44:	f8d0 800c 	ldr.w	r8, [r0, #12]
  e = state[4];
 8021f48:	f8d0 9010 	ldr.w	r9, [r0, #16]
  R0(a, b, c, d, e, 0);
 8021f4c:	ea84 0608 	eor.w	r6, r4, r8
 8021f50:	403e      	ands	r6, r7
 8021f52:	ea86 0608 	eor.w	r6, r6, r8
 8021f56:	2100      	movs	r1, #0
 8021f58:	a80e      	add	r0, sp, #56	@ 0x38
 8021f5a:	f7ff fd79 	bl	8021a50 <blk0>
 8021f5e:	1833      	adds	r3, r6, r0
 8021f60:	eb03 63f5 	add.w	r3, r3, r5, ror #27
 8021f64:	4ee4      	ldr	r6, [pc, #912]	@ (80222f8 <mg_sha1_transform+0x3e0>)
 8021f66:	4433      	add	r3, r6
 8021f68:	4499      	add	r9, r3
 8021f6a:	ea4f 0ab7 	mov.w	sl, r7, ror #2
  R0(e, a, b, c, d, 1);
 8021f6e:	ea84 07b7 	eor.w	r7, r4, r7, ror #2
 8021f72:	402f      	ands	r7, r5
 8021f74:	4067      	eors	r7, r4
 8021f76:	2101      	movs	r1, #1
 8021f78:	a80e      	add	r0, sp, #56	@ 0x38
 8021f7a:	f7ff fd69 	bl	8021a50 <blk0>
 8021f7e:	4407      	add	r7, r0
 8021f80:	eb07 67f9 	add.w	r7, r7, r9, ror #27
 8021f84:	4437      	add	r7, r6
 8021f86:	4447      	add	r7, r8
 8021f88:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(d, e, a, b, c, 2);
 8021f8c:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021f90:	ea05 0509 	and.w	r5, r5, r9
 8021f94:	ea85 050a 	eor.w	r5, r5, sl
 8021f98:	2102      	movs	r1, #2
 8021f9a:	a80e      	add	r0, sp, #56	@ 0x38
 8021f9c:	f7ff fd58 	bl	8021a50 <blk0>
 8021fa0:	4405      	add	r5, r0
 8021fa2:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8021fa6:	4435      	add	r5, r6
 8021fa8:	442c      	add	r4, r5
 8021faa:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(c, d, e, a, b, 3);
 8021fae:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8021fb2:	ea09 0907 	and.w	r9, r9, r7
 8021fb6:	ea89 0908 	eor.w	r9, r9, r8
 8021fba:	2103      	movs	r1, #3
 8021fbc:	a80e      	add	r0, sp, #56	@ 0x38
 8021fbe:	f7ff fd47 	bl	8021a50 <blk0>
 8021fc2:	4481      	add	r9, r0
 8021fc4:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021fc8:	44b1      	add	r9, r6
 8021fca:	44ca      	add	sl, r9
 8021fcc:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(b, c, d, e, a, 4);
 8021fd0:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 8021fd4:	4027      	ands	r7, r4
 8021fd6:	406f      	eors	r7, r5
 8021fd8:	2104      	movs	r1, #4
 8021fda:	a80e      	add	r0, sp, #56	@ 0x38
 8021fdc:	f7ff fd38 	bl	8021a50 <blk0>
 8021fe0:	4407      	add	r7, r0
 8021fe2:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 8021fe6:	4437      	add	r7, r6
 8021fe8:	44b8      	add	r8, r7
 8021fea:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(a, b, c, d, e, 5);
 8021fee:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 8021ff2:	ea04 040a 	and.w	r4, r4, sl
 8021ff6:	ea84 0409 	eor.w	r4, r4, r9
 8021ffa:	2105      	movs	r1, #5
 8021ffc:	a80e      	add	r0, sp, #56	@ 0x38
 8021ffe:	f7ff fd27 	bl	8021a50 <blk0>
 8022002:	4404      	add	r4, r0
 8022004:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8022008:	4434      	add	r4, r6
 802200a:	4425      	add	r5, r4
 802200c:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(e, a, b, c, d, 6);
 8022010:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 8022014:	ea0a 0a08 	and.w	sl, sl, r8
 8022018:	ea8a 0a07 	eor.w	sl, sl, r7
 802201c:	2106      	movs	r1, #6
 802201e:	a80e      	add	r0, sp, #56	@ 0x38
 8022020:	f7ff fd16 	bl	8021a50 <blk0>
 8022024:	4482      	add	sl, r0
 8022026:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 802202a:	44b2      	add	sl, r6
 802202c:	44d1      	add	r9, sl
 802202e:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(d, e, a, b, c, 7);
 8022032:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 8022036:	ea08 0805 	and.w	r8, r8, r5
 802203a:	ea88 0804 	eor.w	r8, r8, r4
 802203e:	2107      	movs	r1, #7
 8022040:	a80e      	add	r0, sp, #56	@ 0x38
 8022042:	f7ff fd05 	bl	8021a50 <blk0>
 8022046:	4480      	add	r8, r0
 8022048:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 802204c:	44b0      	add	r8, r6
 802204e:	4447      	add	r7, r8
 8022050:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(c, d, e, a, b, 8);
 8022054:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8022058:	ea05 0509 	and.w	r5, r5, r9
 802205c:	ea85 050a 	eor.w	r5, r5, sl
 8022060:	2108      	movs	r1, #8
 8022062:	a80e      	add	r0, sp, #56	@ 0x38
 8022064:	f7ff fcf4 	bl	8021a50 <blk0>
 8022068:	4405      	add	r5, r0
 802206a:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 802206e:	4435      	add	r5, r6
 8022070:	442c      	add	r4, r5
 8022072:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(b, c, d, e, a, 9);
 8022076:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 802207a:	ea09 0907 	and.w	r9, r9, r7
 802207e:	ea89 0908 	eor.w	r9, r9, r8
 8022082:	2109      	movs	r1, #9
 8022084:	a80e      	add	r0, sp, #56	@ 0x38
 8022086:	f7ff fce3 	bl	8021a50 <blk0>
 802208a:	4481      	add	r9, r0
 802208c:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8022090:	44b1      	add	r9, r6
 8022092:	44ca      	add	sl, r9
 8022094:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(a, b, c, d, e, 10);
 8022098:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 802209c:	4027      	ands	r7, r4
 802209e:	406f      	eors	r7, r5
 80220a0:	210a      	movs	r1, #10
 80220a2:	a80e      	add	r0, sp, #56	@ 0x38
 80220a4:	f7ff fcd4 	bl	8021a50 <blk0>
 80220a8:	4407      	add	r7, r0
 80220aa:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 80220ae:	4437      	add	r7, r6
 80220b0:	44b8      	add	r8, r7
 80220b2:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(e, a, b, c, d, 11);
 80220b6:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 80220ba:	ea04 040a 	and.w	r4, r4, sl
 80220be:	ea84 0409 	eor.w	r4, r4, r9
 80220c2:	210b      	movs	r1, #11
 80220c4:	a80e      	add	r0, sp, #56	@ 0x38
 80220c6:	f7ff fcc3 	bl	8021a50 <blk0>
 80220ca:	4404      	add	r4, r0
 80220cc:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 80220d0:	4434      	add	r4, r6
 80220d2:	4425      	add	r5, r4
 80220d4:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(d, e, a, b, c, 12);
 80220d8:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 80220dc:	ea0a 0a08 	and.w	sl, sl, r8
 80220e0:	ea8a 0a07 	eor.w	sl, sl, r7
 80220e4:	210c      	movs	r1, #12
 80220e6:	a80e      	add	r0, sp, #56	@ 0x38
 80220e8:	f7ff fcb2 	bl	8021a50 <blk0>
 80220ec:	4482      	add	sl, r0
 80220ee:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 80220f2:	44b2      	add	sl, r6
 80220f4:	44d1      	add	r9, sl
 80220f6:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(c, d, e, a, b, 13);
 80220fa:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 80220fe:	ea08 0805 	and.w	r8, r8, r5
 8022102:	ea88 0804 	eor.w	r8, r8, r4
 8022106:	210d      	movs	r1, #13
 8022108:	a80e      	add	r0, sp, #56	@ 0x38
 802210a:	f7ff fca1 	bl	8021a50 <blk0>
 802210e:	4480      	add	r8, r0
 8022110:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 8022114:	44b0      	add	r8, r6
 8022116:	4447      	add	r7, r8
 8022118:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(b, c, d, e, a, 14);
 802211c:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8022120:	ea05 0509 	and.w	r5, r5, r9
 8022124:	ea85 050a 	eor.w	r5, r5, sl
 8022128:	210e      	movs	r1, #14
 802212a:	a80e      	add	r0, sp, #56	@ 0x38
 802212c:	f7ff fc90 	bl	8021a50 <blk0>
 8022130:	4405      	add	r5, r0
 8022132:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8022136:	4435      	add	r5, r6
 8022138:	442c      	add	r4, r5
 802213a:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(a, b, c, d, e, 15);
 802213e:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8022142:	ea09 0907 	and.w	r9, r9, r7
 8022146:	ea89 0908 	eor.w	r9, r9, r8
 802214a:	210f      	movs	r1, #15
 802214c:	a80e      	add	r0, sp, #56	@ 0x38
 802214e:	f7ff fc7f 	bl	8021a50 <blk0>
 8022152:	4481      	add	r9, r0
 8022154:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8022158:	44b1      	add	r9, r6
 802215a:	eb0a 0109 	add.w	r1, sl, r9
  R1(e, a, b, c, d, 16);
 802215e:	ea85 03b7 	eor.w	r3, r5, r7, ror #2
 8022162:	4023      	ands	r3, r4
 8022164:	ea83 0205 	eor.w	r2, r3, r5
 8022168:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802216a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802216c:	4043      	eors	r3, r0
 802216e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022170:	ea83 0c00 	eor.w	ip, r3, r0
 8022174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022176:	ea8c 0303 	eor.w	r3, ip, r3
 802217a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 802217e:	930e      	str	r3, [sp, #56]	@ 0x38
 8022180:	9300      	str	r3, [sp, #0]
 8022182:	18d3      	adds	r3, r2, r3
 8022184:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8022188:	4433      	add	r3, r6
 802218a:	eb08 0203 	add.w	r2, r8, r3
 802218e:	ea4f 08b4 	mov.w	r8, r4, ror #2
  R1(d, e, a, b, c, 17);
 8022192:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 8022196:	ea0c 0c01 	and.w	ip, ip, r1
 802219a:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 802219e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80221a0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80221a2:	ea83 0e04 	eor.w	lr, r3, r4
 80221a6:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 80221aa:	ea8e 0e09 	eor.w	lr, lr, r9
 80221ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80221b0:	ea8e 0e03 	eor.w	lr, lr, r3
 80221b4:	ea4f 74fe 	mov.w	r4, lr, ror #31
 80221b8:	940f      	str	r4, [sp, #60]	@ 0x3c
 80221ba:	9401      	str	r4, [sp, #4]
 80221bc:	44a4      	add	ip, r4
 80221be:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 80221c2:	44b4      	add	ip, r6
 80221c4:	44ac      	add	ip, r5
  R1(c, d, e, a, b, 18);
 80221c6:	ea88 05b1 	eor.w	r5, r8, r1, ror #2
 80221ca:	4015      	ands	r5, r2
 80221cc:	ea85 0508 	eor.w	r5, r5, r8
 80221d0:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 80221d2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80221d4:	ea84 0e03 	eor.w	lr, r4, r3
 80221d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80221da:	ea8e 0e03 	eor.w	lr, lr, r3
 80221de:	ea80 000e 	eor.w	r0, r0, lr
 80221e2:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80221e6:	9010      	str	r0, [sp, #64]	@ 0x40
 80221e8:	9002      	str	r0, [sp, #8]
 80221ea:	4405      	add	r5, r0
 80221ec:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 80221f0:	4435      	add	r5, r6
 80221f2:	eb05 05b7 	add.w	r5, r5, r7, ror #2
 80221f6:	ea4f 02b2 	mov.w	r2, r2, ror #2
  R1(b, c, d, e, a, 19);
 80221fa:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 80221fe:	ea00 000c 	and.w	r0, r0, ip
 8022202:	ea80 00b1 	eor.w	r0, r0, r1, ror #2
 8022206:	9f00      	ldr	r7, [sp, #0]
 8022208:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 802220a:	4067      	eors	r7, r4
 802220c:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8022210:	ea87 070e 	eor.w	r7, r7, lr
 8022214:	ea89 0907 	eor.w	r9, r9, r7
 8022218:	ea4f 79f9 	mov.w	r9, r9, ror #31
 802221c:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8022220:	4448      	add	r0, r9
 8022222:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8022226:	4430      	add	r0, r6
 8022228:	eb08 0400 	add.w	r4, r8, r0
  R2(a, b, c, d, e, 20);
 802222c:	ea85 00bc 	eor.w	r0, r5, ip, ror #2
 8022230:	4050      	eors	r0, r2
 8022232:	9e01      	ldr	r6, [sp, #4]
 8022234:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8022236:	ea86 0807 	eor.w	r8, r6, r7
 802223a:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 802223e:	ea88 080a 	eor.w	r8, r8, sl
 8022242:	ea83 0808 	eor.w	r8, r3, r8
 8022246:	ea4f 78f8 	mov.w	r8, r8, ror #31
 802224a:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 802224e:	4440      	add	r0, r8
 8022250:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8022254:	4b29      	ldr	r3, [pc, #164]	@ (80222fc <mg_sha1_transform+0x3e4>)
 8022256:	4418      	add	r0, r3
 8022258:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(e, a, b, c, d, 21);
 802225c:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8022260:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8022264:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8022266:	9f02      	ldr	r7, [sp, #8]
 8022268:	4077      	eors	r7, r6
 802226a:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802226c:	4077      	eors	r7, r6
 802226e:	ea8e 0707 	eor.w	r7, lr, r7
 8022272:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022276:	9713      	str	r7, [sp, #76]	@ 0x4c
 8022278:	9703      	str	r7, [sp, #12]
 802227a:	4439      	add	r1, r7
 802227c:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8022280:	4419      	add	r1, r3
 8022282:	440a      	add	r2, r1
  R2(d, e, a, b, c, 22);
 8022284:	ea80 01b4 	eor.w	r1, r0, r4, ror #2
 8022288:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 802228c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 802228e:	ea87 0e09 	eor.w	lr, r7, r9
 8022292:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 8022294:	ea87 0e0e 	eor.w	lr, r7, lr
 8022298:	ea8a 0e0e 	eor.w	lr, sl, lr
 802229c:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80222a0:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 80222a4:	4471      	add	r1, lr
 80222a6:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 80222aa:	4419      	add	r1, r3
 80222ac:	eb01 01bc 	add.w	r1, r1, ip, ror #2
  R2(c, d, e, a, b, 23);
 80222b0:	ea82 0bb0 	eor.w	fp, r2, r0, ror #2
 80222b4:	ea8b 0bb4 	eor.w	fp, fp, r4, ror #2
 80222b8:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80222ba:	ea87 0c08 	eor.w	ip, r7, r8
 80222be:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80222c0:	ea87 0c0c 	eor.w	ip, r7, ip
 80222c4:	ea86 0c0c 	eor.w	ip, r6, ip
 80222c8:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80222cc:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 80222d0:	44e3      	add	fp, ip
 80222d2:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
 80222d6:	449b      	add	fp, r3
 80222d8:	eb0b 0bb5 	add.w	fp, fp, r5, ror #2
  R2(b, c, d, e, a, 24);
 80222dc:	ea81 0ab2 	eor.w	sl, r1, r2, ror #2
 80222e0:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
 80222e4:	9d00      	ldr	r5, [sp, #0]
 80222e6:	9e03      	ldr	r6, [sp, #12]
 80222e8:	406e      	eors	r6, r5
 80222ea:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80222ec:	406e      	eors	r6, r5
 80222ee:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80222f0:	406e      	eors	r6, r5
 80222f2:	ea4f 77f6 	mov.w	r7, r6, ror #31
 80222f6:	e003      	b.n	8022300 <mg_sha1_transform+0x3e8>
 80222f8:	5a827999 	.word	0x5a827999
 80222fc:	6ed9eba1 	.word	0x6ed9eba1
 8022300:	9716      	str	r7, [sp, #88]	@ 0x58
 8022302:	9704      	str	r7, [sp, #16]
 8022304:	44ba      	add	sl, r7
 8022306:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
 802230a:	449a      	add	sl, r3
 802230c:	eb0a 0ab4 	add.w	sl, sl, r4, ror #2
  R2(a, b, c, d, e, 25);
 8022310:	ea8b 05b1 	eor.w	r5, fp, r1, ror #2
 8022314:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
 8022318:	9e01      	ldr	r6, [sp, #4]
 802231a:	ea86 040e 	eor.w	r4, r6, lr
 802231e:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8022320:	407c      	eors	r4, r7
 8022322:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8022324:	407c      	eors	r4, r7
 8022326:	ea4f 74f4 	mov.w	r4, r4, ror #31
 802232a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802232c:	9405      	str	r4, [sp, #20]
 802232e:	4425      	add	r5, r4
 8022330:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8022334:	441d      	add	r5, r3
 8022336:	eb05 05b0 	add.w	r5, r5, r0, ror #2
  R2(e, a, b, c, d, 26);
 802233a:	ea8a 04bb 	eor.w	r4, sl, fp, ror #2
 802233e:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8022342:	9e02      	ldr	r6, [sp, #8]
 8022344:	ea86 000c 	eor.w	r0, r6, ip
 8022348:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 802234a:	4078      	eors	r0, r7
 802234c:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 802234e:	4078      	eors	r0, r7
 8022350:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8022354:	4606      	mov	r6, r0
 8022356:	9018      	str	r0, [sp, #96]	@ 0x60
 8022358:	4404      	add	r4, r0
 802235a:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 802235e:	441c      	add	r4, r3
 8022360:	eb04 04b2 	add.w	r4, r4, r2, ror #2
  R2(d, e, a, b, c, 27);
 8022364:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8022368:	ea80 00bb 	eor.w	r0, r0, fp, ror #2
 802236c:	9f04      	ldr	r7, [sp, #16]
 802236e:	ea89 0207 	eor.w	r2, r9, r7
 8022372:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8022374:	407a      	eors	r2, r7
 8022376:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8022378:	407a      	eors	r2, r7
 802237a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 802237e:	9219      	str	r2, [sp, #100]	@ 0x64
 8022380:	9206      	str	r2, [sp, #24]
 8022382:	4410      	add	r0, r2
 8022384:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8022388:	4418      	add	r0, r3
 802238a:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(c, d, e, a, b, 28);
 802238e:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8022392:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8022396:	9a05      	ldr	r2, [sp, #20]
 8022398:	ea88 0202 	eor.w	r2, r8, r2
 802239c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 802239e:	407a      	eors	r2, r7
 80223a0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80223a2:	407a      	eors	r2, r7
 80223a4:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80223a8:	921a      	str	r2, [sp, #104]	@ 0x68
 80223aa:	9207      	str	r2, [sp, #28]
 80223ac:	4411      	add	r1, r2
 80223ae:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80223b2:	4419      	add	r1, r3
 80223b4:	eb01 01bb 	add.w	r1, r1, fp, ror #2
  R2(b, c, d, e, a, 29);
 80223b8:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 80223bc:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 80223c0:	960b      	str	r6, [sp, #44]	@ 0x2c
 80223c2:	9f03      	ldr	r7, [sp, #12]
 80223c4:	ea87 0b06 	eor.w	fp, r7, r6
 80223c8:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80223ca:	ea87 0b0b 	eor.w	fp, r7, fp
 80223ce:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80223d0:	ea87 0b0b 	eor.w	fp, r7, fp
 80223d4:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80223d8:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 80223dc:	f8cd b020 	str.w	fp, [sp, #32]
 80223e0:	445a      	add	r2, fp
 80223e2:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80223e6:	441a      	add	r2, r3
 80223e8:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(a, b, c, d, e, 30);
 80223ec:	ea81 0ab0 	eor.w	sl, r1, r0, ror #2
 80223f0:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
 80223f4:	9e06      	ldr	r6, [sp, #24]
 80223f6:	ea8e 0b06 	eor.w	fp, lr, r6
 80223fa:	9e00      	ldr	r6, [sp, #0]
 80223fc:	ea86 0b0b 	eor.w	fp, r6, fp
 8022400:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8022402:	ea87 0b0b 	eor.w	fp, r7, fp
 8022406:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 802240a:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 802240e:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8022412:	44da      	add	sl, fp
 8022414:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8022418:	449a      	add	sl, r3
 802241a:	eb0a 0ab5 	add.w	sl, sl, r5, ror #2
  R2(e, a, b, c, d, 31);
 802241e:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8022422:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8022426:	9e07      	ldr	r6, [sp, #28]
 8022428:	ea8c 0b06 	eor.w	fp, ip, r6
 802242c:	9e01      	ldr	r6, [sp, #4]
 802242e:	ea86 0b0b 	eor.w	fp, r6, fp
 8022432:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8022434:	ea87 0b0b 	eor.w	fp, r7, fp
 8022438:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 802243c:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 8022440:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8022444:	445d      	add	r5, fp
 8022446:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 802244a:	441d      	add	r5, r3
 802244c:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(d, e, a, b, c, 32);
 8022450:	ea8a 04b2 	eor.w	r4, sl, r2, ror #2
 8022454:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8022458:	9e08      	ldr	r6, [sp, #32]
 802245a:	9f04      	ldr	r7, [sp, #16]
 802245c:	ea87 0b06 	eor.w	fp, r7, r6
 8022460:	9e02      	ldr	r6, [sp, #8]
 8022462:	ea86 0b0b 	eor.w	fp, r6, fp
 8022466:	9e00      	ldr	r6, [sp, #0]
 8022468:	ea86 0b0b 	eor.w	fp, r6, fp
 802246c:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022470:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8022474:	f8cd b000 	str.w	fp, [sp]
 8022478:	445c      	add	r4, fp
 802247a:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 802247e:	441c      	add	r4, r3
 8022480:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(c, d, e, a, b, 33);
 8022484:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8022488:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 802248c:	9e05      	ldr	r6, [sp, #20]
 802248e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8022490:	ea86 0b07 	eor.w	fp, r6, r7
 8022494:	ea89 0b0b 	eor.w	fp, r9, fp
 8022498:	9e01      	ldr	r6, [sp, #4]
 802249a:	ea86 0b0b 	eor.w	fp, r6, fp
 802249e:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80224a2:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 80224a6:	f8cd b004 	str.w	fp, [sp, #4]
 80224aa:	4458      	add	r0, fp
 80224ac:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 80224b0:	4418      	add	r0, r3
 80224b2:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(b, c, d, e, a, 34);
 80224b6:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 80224ba:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 80224be:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80224c0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80224c2:	ea86 0b07 	eor.w	fp, r6, r7
 80224c6:	ea88 0b0b 	eor.w	fp, r8, fp
 80224ca:	9e02      	ldr	r6, [sp, #8]
 80224cc:	ea86 0b0b 	eor.w	fp, r6, fp
 80224d0:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80224d4:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 80224d8:	f8cd b008 	str.w	fp, [sp, #8]
 80224dc:	4459      	add	r1, fp
 80224de:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80224e2:	4419      	add	r1, r3
 80224e4:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R2(a, b, c, d, e, 35);
 80224e8:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 80224ec:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 80224f0:	9e06      	ldr	r6, [sp, #24]
 80224f2:	9f00      	ldr	r7, [sp, #0]
 80224f4:	ea86 0b07 	eor.w	fp, r6, r7
 80224f8:	9e03      	ldr	r6, [sp, #12]
 80224fa:	ea86 0b0b 	eor.w	fp, r6, fp
 80224fe:	ea89 090b 	eor.w	r9, r9, fp
 8022502:	ea4f 7bf9 	mov.w	fp, r9, ror #31
 8022506:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 802250a:	445a      	add	r2, fp
 802250c:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022510:	441a      	add	r2, r3
 8022512:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(e, a, b, c, d, 36);
 8022516:	ea81 09b0 	eor.w	r9, r1, r0, ror #2
 802251a:	ea89 09b4 	eor.w	r9, r9, r4, ror #2
 802251e:	9e07      	ldr	r6, [sp, #28]
 8022520:	9f01      	ldr	r7, [sp, #4]
 8022522:	ea86 0a07 	eor.w	sl, r6, r7
 8022526:	ea8e 0a0a 	eor.w	sl, lr, sl
 802252a:	ea88 080a 	eor.w	r8, r8, sl
 802252e:	ea4f 7af8 	mov.w	sl, r8, ror #31
 8022532:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 8022536:	44d1      	add	r9, sl
 8022538:	eb09 69f2 	add.w	r9, r9, r2, ror #27
 802253c:	4499      	add	r9, r3
 802253e:	eb09 08b5 	add.w	r8, r9, r5, ror #2
  R2(d, e, a, b, c, 37);
 8022542:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8022546:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 802254a:	9e08      	ldr	r6, [sp, #32]
 802254c:	9f02      	ldr	r7, [sp, #8]
 802254e:	ea86 0907 	eor.w	r9, r6, r7
 8022552:	ea8c 0909 	eor.w	r9, ip, r9
 8022556:	9e03      	ldr	r6, [sp, #12]
 8022558:	ea86 0709 	eor.w	r7, r6, r9
 802255c:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8022560:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8022564:	444d      	add	r5, r9
 8022566:	eb05 65f8 	add.w	r5, r5, r8, ror #27
 802256a:	441d      	add	r5, r3
 802256c:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(c, d, e, a, b, 38);
 8022570:	ea88 04b2 	eor.w	r4, r8, r2, ror #2
 8022574:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8022578:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802257a:	ea87 070b 	eor.w	r7, r7, fp
 802257e:	9e04      	ldr	r6, [sp, #16]
 8022580:	4077      	eors	r7, r6
 8022582:	ea8e 0e07 	eor.w	lr, lr, r7
 8022586:	ea4f 7efe 	mov.w	lr, lr, ror #31
 802258a:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 802258e:	4474      	add	r4, lr
 8022590:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8022594:	441c      	add	r4, r3
 8022596:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(b, c, d, e, a, 39);
 802259a:	ea85 00b8 	eor.w	r0, r5, r8, ror #2
 802259e:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 80225a2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80225a4:	ea87 070a 	eor.w	r7, r7, sl
 80225a8:	9e05      	ldr	r6, [sp, #20]
 80225aa:	4077      	eors	r7, r6
 80225ac:	ea8c 0c07 	eor.w	ip, ip, r7
 80225b0:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80225b4:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 80225b8:	f8cd c00c 	str.w	ip, [sp, #12]
 80225bc:	4460      	add	r0, ip
 80225be:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 80225c2:	4418      	add	r0, r3
 80225c4:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(a, b, c, d, e, 40);
 80225c8:	ea44 01b5 	orr.w	r1, r4, r5, ror #2
 80225cc:	ea01 01b8 	and.w	r1, r1, r8, ror #2
 80225d0:	ea04 03b5 	and.w	r3, r4, r5, ror #2
 80225d4:	4319      	orrs	r1, r3
 80225d6:	9b00      	ldr	r3, [sp, #0]
 80225d8:	ea83 0309 	eor.w	r3, r3, r9
 80225dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80225de:	4073      	eors	r3, r6
 80225e0:	9e04      	ldr	r6, [sp, #16]
 80225e2:	405e      	eors	r6, r3
 80225e4:	ea4f 73f6 	mov.w	r3, r6, ror #31
 80225e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80225ea:	9304      	str	r3, [sp, #16]
 80225ec:	4419      	add	r1, r3
 80225ee:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80225f2:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 80225f6:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 80225fa:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 80225fe:	311c      	adds	r1, #28
 8022600:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(e, a, b, c, d, 41);
 8022604:	ea40 02b4 	orr.w	r2, r0, r4, ror #2
 8022608:	ea02 02b5 	and.w	r2, r2, r5, ror #2
 802260c:	ea00 06b4 	and.w	r6, r0, r4, ror #2
 8022610:	4332      	orrs	r2, r6
 8022612:	9b01      	ldr	r3, [sp, #4]
 8022614:	ea83 060e 	eor.w	r6, r3, lr
 8022618:	9b06      	ldr	r3, [sp, #24]
 802261a:	405e      	eors	r6, r3
 802261c:	9f05      	ldr	r7, [sp, #20]
 802261e:	407e      	eors	r6, r7
 8022620:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8022624:	9717      	str	r7, [sp, #92]	@ 0x5c
 8022626:	9705      	str	r7, [sp, #20]
 8022628:	443a      	add	r2, r7
 802262a:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802262e:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8022632:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8022636:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 802263a:	321c      	adds	r2, #28
 802263c:	eb02 02b8 	add.w	r2, r2, r8, ror #2
  R3(d, e, a, b, c, 42);
 8022640:	ea41 06b0 	orr.w	r6, r1, r0, ror #2
 8022644:	ea06 06b4 	and.w	r6, r6, r4, ror #2
 8022648:	ea01 07b0 	and.w	r7, r1, r0, ror #2
 802264c:	433e      	orrs	r6, r7
 802264e:	9f02      	ldr	r7, [sp, #8]
 8022650:	4663      	mov	r3, ip
 8022652:	405f      	eors	r7, r3
 8022654:	9b07      	ldr	r3, [sp, #28]
 8022656:	405f      	eors	r7, r3
 8022658:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802265a:	405f      	eors	r7, r3
 802265c:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022660:	9718      	str	r7, [sp, #96]	@ 0x60
 8022662:	970b      	str	r7, [sp, #44]	@ 0x2c
 8022664:	443e      	add	r6, r7
 8022666:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 802266a:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 802266e:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8022672:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 8022676:	361c      	adds	r6, #28
 8022678:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R3(c, d, e, a, b, 43);
 802267c:	ea42 07b1 	orr.w	r7, r2, r1, ror #2
 8022680:	ea07 07b0 	and.w	r7, r7, r0, ror #2
 8022684:	ea02 05b1 	and.w	r5, r2, r1, ror #2
 8022688:	432f      	orrs	r7, r5
 802268a:	9d04      	ldr	r5, [sp, #16]
 802268c:	ea8b 0505 	eor.w	r5, fp, r5
 8022690:	9b08      	ldr	r3, [sp, #32]
 8022692:	405d      	eors	r5, r3
 8022694:	9b06      	ldr	r3, [sp, #24]
 8022696:	405d      	eors	r5, r3
 8022698:	ea4f 75f5 	mov.w	r5, r5, ror #31
 802269c:	9519      	str	r5, [sp, #100]	@ 0x64
 802269e:	9506      	str	r5, [sp, #24]
 80226a0:	442f      	add	r7, r5
 80226a2:	eb07 67f6 	add.w	r7, r7, r6, ror #27
 80226a6:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 80226aa:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 80226ae:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 80226b2:	371c      	adds	r7, #28
 80226b4:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R3(b, c, d, e, a, 44);
 80226b8:	ea46 0cb2 	orr.w	ip, r6, r2, ror #2
 80226bc:	ea0c 0cb1 	and.w	ip, ip, r1, ror #2
 80226c0:	ea06 04b2 	and.w	r4, r6, r2, ror #2
 80226c4:	ea4c 0c04 	orr.w	ip, ip, r4
 80226c8:	9c05      	ldr	r4, [sp, #20]
 80226ca:	ea8a 0404 	eor.w	r4, sl, r4
 80226ce:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80226d0:	406c      	eors	r4, r5
 80226d2:	9b07      	ldr	r3, [sp, #28]
 80226d4:	405c      	eors	r4, r3
 80226d6:	ea4f 74f4 	mov.w	r4, r4, ror #31
 80226da:	941a      	str	r4, [sp, #104]	@ 0x68
 80226dc:	9407      	str	r4, [sp, #28]
 80226de:	44a4      	add	ip, r4
 80226e0:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
 80226e4:	f10c 4c0f 	add.w	ip, ip, #2399141888	@ 0x8f000000
 80226e8:	f50c 1cdd 	add.w	ip, ip, #1810432	@ 0x1ba000
 80226ec:	f50c 5ce6 	add.w	ip, ip, #7360	@ 0x1cc0
 80226f0:	f10c 0c1c 	add.w	ip, ip, #28
 80226f4:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R3(a, b, c, d, e, 45);
 80226f8:	ea47 00b6 	orr.w	r0, r7, r6, ror #2
 80226fc:	ea00 00b2 	and.w	r0, r0, r2, ror #2
 8022700:	ea07 04b6 	and.w	r4, r7, r6, ror #2
 8022704:	4320      	orrs	r0, r4
 8022706:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022708:	ea89 0404 	eor.w	r4, r9, r4
 802270c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802270e:	406c      	eors	r4, r5
 8022710:	9b08      	ldr	r3, [sp, #32]
 8022712:	405c      	eors	r4, r3
 8022714:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8022718:	941b      	str	r4, [sp, #108]	@ 0x6c
 802271a:	9408      	str	r4, [sp, #32]
 802271c:	4420      	add	r0, r4
 802271e:	eb00 60fc 	add.w	r0, r0, ip, ror #27
 8022722:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8022726:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 802272a:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 802272e:	301c      	adds	r0, #28
 8022730:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(e, a, b, c, d, 46);
 8022734:	ea4c 05b7 	orr.w	r5, ip, r7, ror #2
 8022738:	ea05 05b6 	and.w	r5, r5, r6, ror #2
 802273c:	ea0c 01b7 	and.w	r1, ip, r7, ror #2
 8022740:	430d      	orrs	r5, r1
 8022742:	9906      	ldr	r1, [sp, #24]
 8022744:	ea8e 0101 	eor.w	r1, lr, r1
 8022748:	9c00      	ldr	r4, [sp, #0]
 802274a:	4061      	eors	r1, r4
 802274c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802274e:	4059      	eors	r1, r3
 8022750:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022754:	911c      	str	r1, [sp, #112]	@ 0x70
 8022756:	9109      	str	r1, [sp, #36]	@ 0x24
 8022758:	440d      	add	r5, r1
 802275a:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 802275e:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 8022762:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 8022766:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 802276a:	351c      	adds	r5, #28
 802276c:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R3(d, e, a, b, c, 47);
 8022770:	ea40 04bc 	orr.w	r4, r0, ip, ror #2
 8022774:	ea04 04b7 	and.w	r4, r4, r7, ror #2
 8022778:	ea00 02bc 	and.w	r2, r0, ip, ror #2
 802277c:	4314      	orrs	r4, r2
 802277e:	9903      	ldr	r1, [sp, #12]
 8022780:	9a07      	ldr	r2, [sp, #28]
 8022782:	404a      	eors	r2, r1
 8022784:	9901      	ldr	r1, [sp, #4]
 8022786:	404a      	eors	r2, r1
 8022788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802278a:	405a      	eors	r2, r3
 802278c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022790:	921d      	str	r2, [sp, #116]	@ 0x74
 8022792:	920a      	str	r2, [sp, #40]	@ 0x28
 8022794:	4414      	add	r4, r2
 8022796:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 802279a:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 802279e:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 80227a2:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 80227a6:	341c      	adds	r4, #28
 80227a8:	eb04 04b6 	add.w	r4, r4, r6, ror #2
  R3(c, d, e, a, b, 48);
 80227ac:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 80227b0:	ea01 01bc 	and.w	r1, r1, ip, ror #2
 80227b4:	ea05 02b0 	and.w	r2, r5, r0, ror #2
 80227b8:	4311      	orrs	r1, r2
 80227ba:	9a04      	ldr	r2, [sp, #16]
 80227bc:	9e08      	ldr	r6, [sp, #32]
 80227be:	4072      	eors	r2, r6
 80227c0:	9e02      	ldr	r6, [sp, #8]
 80227c2:	4072      	eors	r2, r6
 80227c4:	9b00      	ldr	r3, [sp, #0]
 80227c6:	405a      	eors	r2, r3
 80227c8:	ea4f 76f2 	mov.w	r6, r2, ror #31
 80227cc:	960e      	str	r6, [sp, #56]	@ 0x38
 80227ce:	9600      	str	r6, [sp, #0]
 80227d0:	4431      	add	r1, r6
 80227d2:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 80227d6:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 80227da:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 80227de:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 80227e2:	311c      	adds	r1, #28
 80227e4:	eb01 01b7 	add.w	r1, r1, r7, ror #2
  R3(b, c, d, e, a, 49);
 80227e8:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 80227ec:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 80227f0:	ea04 06b5 	and.w	r6, r4, r5, ror #2
 80227f4:	4332      	orrs	r2, r6
 80227f6:	9f05      	ldr	r7, [sp, #20]
 80227f8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80227fa:	407e      	eors	r6, r7
 80227fc:	ea8b 0606 	eor.w	r6, fp, r6
 8022800:	9b01      	ldr	r3, [sp, #4]
 8022802:	405e      	eors	r6, r3
 8022804:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8022808:	930f      	str	r3, [sp, #60]	@ 0x3c
 802280a:	9301      	str	r3, [sp, #4]
 802280c:	441a      	add	r2, r3
 802280e:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022812:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8022816:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 802281a:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 802281e:	321c      	adds	r2, #28
 8022820:	eb02 02bc 	add.w	r2, r2, ip, ror #2
  R3(a, b, c, d, e, 50);
 8022824:	ea41 06b4 	orr.w	r6, r1, r4, ror #2
 8022828:	ea06 06b5 	and.w	r6, r6, r5, ror #2
 802282c:	ea01 07b4 	and.w	r7, r1, r4, ror #2
 8022830:	433e      	orrs	r6, r7
 8022832:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022836:	405f      	eors	r7, r3
 8022838:	ea8a 0707 	eor.w	r7, sl, r7
 802283c:	9b02      	ldr	r3, [sp, #8]
 802283e:	405f      	eors	r7, r3
 8022840:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022844:	9710      	str	r7, [sp, #64]	@ 0x40
 8022846:	9702      	str	r7, [sp, #8]
 8022848:	443e      	add	r6, r7
 802284a:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 802284e:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8022852:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8022856:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 802285a:	361c      	adds	r6, #28
 802285c:	eb06 06b0 	add.w	r6, r6, r0, ror #2
  R3(e, a, b, c, d, 51);
 8022860:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 8022864:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8022868:	ea02 07b1 	and.w	r7, r2, r1, ror #2
 802286c:	4338      	orrs	r0, r7
 802286e:	9b06      	ldr	r3, [sp, #24]
 8022870:	9f00      	ldr	r7, [sp, #0]
 8022872:	405f      	eors	r7, r3
 8022874:	ea89 0707 	eor.w	r7, r9, r7
 8022878:	ea8b 0b07 	eor.w	fp, fp, r7
 802287c:	ea4f 7cfb 	mov.w	ip, fp, ror #31
 8022880:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 8022884:	4460      	add	r0, ip
 8022886:	eb00 60f6 	add.w	r0, r0, r6, ror #27
 802288a:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 802288e:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8022892:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8022896:	301c      	adds	r0, #28
 8022898:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(d, e, a, b, c, 52);
 802289c:	ea46 05b2 	orr.w	r5, r6, r2, ror #2
 80228a0:	ea05 05b1 	and.w	r5, r5, r1, ror #2
 80228a4:	ea06 07b2 	and.w	r7, r6, r2, ror #2
 80228a8:	433d      	orrs	r5, r7
 80228aa:	9f07      	ldr	r7, [sp, #28]
 80228ac:	9b01      	ldr	r3, [sp, #4]
 80228ae:	405f      	eors	r7, r3
 80228b0:	ea8e 0707 	eor.w	r7, lr, r7
 80228b4:	ea8a 0a07 	eor.w	sl, sl, r7
 80228b8:	ea4f 78fa 	mov.w	r8, sl, ror #31
 80228bc:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80228c0:	4445      	add	r5, r8
 80228c2:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 80228c6:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 80228ca:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 80228ce:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 80228d2:	351c      	adds	r5, #28
 80228d4:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R3(c, d, e, a, b, 53);
 80228d8:	ea40 04b6 	orr.w	r4, r0, r6, ror #2
 80228dc:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 80228e0:	ea00 07b6 	and.w	r7, r0, r6, ror #2
 80228e4:	433c      	orrs	r4, r7
 80228e6:	9b08      	ldr	r3, [sp, #32]
 80228e8:	9f02      	ldr	r7, [sp, #8]
 80228ea:	405f      	eors	r7, r3
 80228ec:	9b03      	ldr	r3, [sp, #12]
 80228ee:	405f      	eors	r7, r3
 80228f0:	ea89 0707 	eor.w	r7, r9, r7
 80228f4:	ea4f 79f7 	mov.w	r9, r7, ror #31
 80228f8:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 80228fc:	444c      	add	r4, r9
 80228fe:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8022902:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8022906:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 802290a:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 802290e:	341c      	adds	r4, #28
 8022910:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R3(b, c, d, e, a, 54);
 8022914:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8022918:	ea01 01b6 	and.w	r1, r1, r6, ror #2
 802291c:	ea05 07b0 	and.w	r7, r5, r0, ror #2
 8022920:	4339      	orrs	r1, r7
 8022922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022924:	ea83 070c 	eor.w	r7, r3, ip
 8022928:	9b04      	ldr	r3, [sp, #16]
 802292a:	405f      	eors	r7, r3
 802292c:	ea8e 0707 	eor.w	r7, lr, r7
 8022930:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022934:	9714      	str	r7, [sp, #80]	@ 0x50
 8022936:	970c      	str	r7, [sp, #48]	@ 0x30
 8022938:	4439      	add	r1, r7
 802293a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 802293e:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8022942:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8022946:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 802294a:	311c      	adds	r1, #28
 802294c:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(a, b, c, d, e, 55);
 8022950:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 8022954:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8022958:	ea04 07b5 	and.w	r7, r4, r5, ror #2
 802295c:	433a      	orrs	r2, r7
 802295e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022960:	ea87 0708 	eor.w	r7, r7, r8
 8022964:	9b05      	ldr	r3, [sp, #20]
 8022966:	405f      	eors	r7, r3
 8022968:	9b03      	ldr	r3, [sp, #12]
 802296a:	405f      	eors	r7, r3
 802296c:	ea4f 7bf7 	mov.w	fp, r7, ror #31
 8022970:	f8cd b054 	str.w	fp, [sp, #84]	@ 0x54
 8022974:	445a      	add	r2, fp
 8022976:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802297a:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 802297e:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8022982:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8022986:	321c      	adds	r2, #28
 8022988:	eb02 02b6 	add.w	r2, r2, r6, ror #2
  R3(e, a, b, c, d, 56);
 802298c:	ea41 07b4 	orr.w	r7, r1, r4, ror #2
 8022990:	ea07 07b5 	and.w	r7, r7, r5, ror #2
 8022994:	ea01 06b4 	and.w	r6, r1, r4, ror #2
 8022998:	4337      	orrs	r7, r6
 802299a:	9e00      	ldr	r6, [sp, #0]
 802299c:	ea86 0609 	eor.w	r6, r6, r9
 80229a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80229a2:	405e      	eors	r6, r3
 80229a4:	9b04      	ldr	r3, [sp, #16]
 80229a6:	405e      	eors	r6, r3
 80229a8:	ea4f 7af6 	mov.w	sl, r6, ror #31
 80229ac:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 80229b0:	4457      	add	r7, sl
 80229b2:	eb07 67f2 	add.w	r7, r7, r2, ror #27
 80229b6:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 80229ba:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 80229be:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 80229c2:	371c      	adds	r7, #28
 80229c4:	eb07 07b0 	add.w	r7, r7, r0, ror #2
  R3(d, e, a, b, c, 57);
 80229c8:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 80229cc:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 80229d0:	ea02 06b1 	and.w	r6, r2, r1, ror #2
 80229d4:	4330      	orrs	r0, r6
 80229d6:	9e01      	ldr	r6, [sp, #4]
 80229d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80229da:	405e      	eors	r6, r3
 80229dc:	9b06      	ldr	r3, [sp, #24]
 80229de:	405e      	eors	r6, r3
 80229e0:	9b05      	ldr	r3, [sp, #20]
 80229e2:	405e      	eors	r6, r3
 80229e4:	ea4f 76f6 	mov.w	r6, r6, ror #31
 80229e8:	9617      	str	r6, [sp, #92]	@ 0x5c
 80229ea:	9603      	str	r6, [sp, #12]
 80229ec:	4430      	add	r0, r6
 80229ee:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 80229f2:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 80229f6:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 80229fa:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 80229fe:	301c      	adds	r0, #28
 8022a00:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(c, d, e, a, b, 58);
 8022a04:	ea47 06b2 	orr.w	r6, r7, r2, ror #2
 8022a08:	ea06 06b1 	and.w	r6, r6, r1, ror #2
 8022a0c:	ea07 05b2 	and.w	r5, r7, r2, ror #2
 8022a10:	432e      	orrs	r6, r5
 8022a12:	9d02      	ldr	r5, [sp, #8]
 8022a14:	ea85 050b 	eor.w	r5, r5, fp
 8022a18:	9b07      	ldr	r3, [sp, #28]
 8022a1a:	405d      	eors	r5, r3
 8022a1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022a1e:	405d      	eors	r5, r3
 8022a20:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8022a24:	9518      	str	r5, [sp, #96]	@ 0x60
 8022a26:	9504      	str	r5, [sp, #16]
 8022a28:	442e      	add	r6, r5
 8022a2a:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 8022a2e:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8022a32:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8022a36:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 8022a3a:	361c      	adds	r6, #28
 8022a3c:	eb06 06b4 	add.w	r6, r6, r4, ror #2
  R3(b, c, d, e, a, 59);
 8022a40:	ea40 04b7 	orr.w	r4, r0, r7, ror #2
 8022a44:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8022a48:	ea00 05b7 	and.w	r5, r0, r7, ror #2
 8022a4c:	432c      	orrs	r4, r5
 8022a4e:	ea8c 050a 	eor.w	r5, ip, sl
 8022a52:	9b08      	ldr	r3, [sp, #32]
 8022a54:	405d      	eors	r5, r3
 8022a56:	9b06      	ldr	r3, [sp, #24]
 8022a58:	405d      	eors	r5, r3
 8022a5a:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8022a5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8022a60:	9505      	str	r5, [sp, #20]
 8022a62:	442c      	add	r4, r5
 8022a64:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 8022a68:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8022a6c:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8022a70:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8022a74:	341c      	adds	r4, #28
 8022a76:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R4(a, b, c, d, e, 60);
 8022a7a:	ea86 01b0 	eor.w	r1, r6, r0, ror #2
 8022a7e:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 8022a82:	9d03      	ldr	r5, [sp, #12]
 8022a84:	ea88 0305 	eor.w	r3, r8, r5
 8022a88:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022a8a:	406b      	eors	r3, r5
 8022a8c:	9d07      	ldr	r5, [sp, #28]
 8022a8e:	406b      	eors	r3, r5
 8022a90:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022a94:	931a      	str	r3, [sp, #104]	@ 0x68
 8022a96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022a98:	4419      	add	r1, r3
 8022a9a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8022a9e:	f8df e3fc 	ldr.w	lr, [pc, #1020]	@ 8022e9c <mg_sha1_transform+0xf84>
 8022aa2:	4471      	add	r1, lr
 8022aa4:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R4(e, a, b, c, d, 61);
 8022aa8:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 8022aac:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8022ab0:	9b04      	ldr	r3, [sp, #16]
 8022ab2:	ea89 0303 	eor.w	r3, r9, r3
 8022ab6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022ab8:	406b      	eors	r3, r5
 8022aba:	9d08      	ldr	r5, [sp, #32]
 8022abc:	406b      	eors	r3, r5
 8022abe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022ac2:	931b      	str	r3, [sp, #108]	@ 0x6c
 8022ac4:	9306      	str	r3, [sp, #24]
 8022ac6:	441a      	add	r2, r3
 8022ac8:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022acc:	4472      	add	r2, lr
 8022ace:	eb02 02b7 	add.w	r2, r2, r7, ror #2
  R4(d, e, a, b, c, 62);
 8022ad2:	ea81 03b4 	eor.w	r3, r1, r4, ror #2
 8022ad6:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 8022ada:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8022adc:	9d05      	ldr	r5, [sp, #20]
 8022ade:	406f      	eors	r7, r5
 8022ae0:	9d00      	ldr	r5, [sp, #0]
 8022ae2:	406f      	eors	r7, r5
 8022ae4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022ae6:	406f      	eors	r7, r5
 8022ae8:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022aec:	971c      	str	r7, [sp, #112]	@ 0x70
 8022aee:	9707      	str	r7, [sp, #28]
 8022af0:	443b      	add	r3, r7
 8022af2:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8022af6:	4473      	add	r3, lr
 8022af8:	eb03 03b0 	add.w	r3, r3, r0, ror #2
  R4(c, d, e, a, b, 63);
 8022afc:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8022b00:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8022b04:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022b06:	ea8b 0707 	eor.w	r7, fp, r7
 8022b0a:	9d01      	ldr	r5, [sp, #4]
 8022b0c:	406f      	eors	r7, r5
 8022b0e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022b10:	406f      	eors	r7, r5
 8022b12:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022b16:	971d      	str	r7, [sp, #116]	@ 0x74
 8022b18:	9708      	str	r7, [sp, #32]
 8022b1a:	4438      	add	r0, r7
 8022b1c:	eb00 60f3 	add.w	r0, r0, r3, ror #27
 8022b20:	4470      	add	r0, lr
 8022b22:	eb00 00b6 	add.w	r0, r0, r6, ror #2
  R4(b, c, d, e, a, 64);
 8022b26:	ea83 07b2 	eor.w	r7, r3, r2, ror #2
 8022b2a:	ea87 07b1 	eor.w	r7, r7, r1, ror #2
 8022b2e:	9e06      	ldr	r6, [sp, #24]
 8022b30:	ea8a 0606 	eor.w	r6, sl, r6
 8022b34:	9d02      	ldr	r5, [sp, #8]
 8022b36:	406e      	eors	r6, r5
 8022b38:	9d00      	ldr	r5, [sp, #0]
 8022b3a:	406e      	eors	r6, r5
 8022b3c:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8022b40:	960e      	str	r6, [sp, #56]	@ 0x38
 8022b42:	9600      	str	r6, [sp, #0]
 8022b44:	4437      	add	r7, r6
 8022b46:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 8022b4a:	4477      	add	r7, lr
 8022b4c:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R4(a, b, c, d, e, 65);
 8022b50:	ea80 06b3 	eor.w	r6, r0, r3, ror #2
 8022b54:	ea86 06b2 	eor.w	r6, r6, r2, ror #2
 8022b58:	9c03      	ldr	r4, [sp, #12]
 8022b5a:	9d07      	ldr	r5, [sp, #28]
 8022b5c:	406c      	eors	r4, r5
 8022b5e:	ea8c 0404 	eor.w	r4, ip, r4
 8022b62:	9d01      	ldr	r5, [sp, #4]
 8022b64:	406c      	eors	r4, r5
 8022b66:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8022b6a:	940f      	str	r4, [sp, #60]	@ 0x3c
 8022b6c:	9401      	str	r4, [sp, #4]
 8022b6e:	4426      	add	r6, r4
 8022b70:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022b74:	4476      	add	r6, lr
 8022b76:	eb06 06b1 	add.w	r6, r6, r1, ror #2
  R4(e, a, b, c, d, 66);
 8022b7a:	ea87 05b0 	eor.w	r5, r7, r0, ror #2
 8022b7e:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 8022b82:	9904      	ldr	r1, [sp, #16]
 8022b84:	9c08      	ldr	r4, [sp, #32]
 8022b86:	4061      	eors	r1, r4
 8022b88:	ea88 0101 	eor.w	r1, r8, r1
 8022b8c:	9c02      	ldr	r4, [sp, #8]
 8022b8e:	4061      	eors	r1, r4
 8022b90:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022b94:	9110      	str	r1, [sp, #64]	@ 0x40
 8022b96:	440d      	add	r5, r1
 8022b98:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8022b9c:	4475      	add	r5, lr
 8022b9e:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R4(d, e, a, b, c, 67);
 8022ba2:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8022ba6:	ea8e 0eb0 	eor.w	lr, lr, r0, ror #2
 8022baa:	9a05      	ldr	r2, [sp, #20]
 8022bac:	9c00      	ldr	r4, [sp, #0]
 8022bae:	4062      	eors	r2, r4
 8022bb0:	ea89 0202 	eor.w	r2, r9, r2
 8022bb4:	ea8c 0202 	eor.w	r2, ip, r2
 8022bb8:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022bbc:	9211      	str	r2, [sp, #68]	@ 0x44
 8022bbe:	4496      	add	lr, r2
 8022bc0:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8022bc4:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8022bc8:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8022bcc:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8022bd0:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8022bd4:	eb0e 0eb3 	add.w	lr, lr, r3, ror #2
  R4(c, d, e, a, b, 68);
 8022bd8:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8022bdc:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8022be0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022be2:	9c01      	ldr	r4, [sp, #4]
 8022be4:	4063      	eors	r3, r4
 8022be6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022be8:	4063      	eors	r3, r4
 8022bea:	ea88 0303 	eor.w	r3, r8, r3
 8022bee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022bf2:	9312      	str	r3, [sp, #72]	@ 0x48
 8022bf4:	449c      	add	ip, r3
 8022bf6:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8022bfa:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8022bfe:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8022c02:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8022c06:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8022c0a:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R4(b, c, d, e, a, 69);
 8022c0e:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8022c12:	ea88 08b6 	eor.w	r8, r8, r6, ror #2
 8022c16:	9806      	ldr	r0, [sp, #24]
 8022c18:	4048      	eors	r0, r1
 8022c1a:	ea8b 0000 	eor.w	r0, fp, r0
 8022c1e:	ea89 0000 	eor.w	r0, r9, r0
 8022c22:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8022c26:	9013      	str	r0, [sp, #76]	@ 0x4c
 8022c28:	4480      	add	r8, r0
 8022c2a:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8022c2e:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8022c32:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8022c36:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8022c3a:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8022c3e:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(a, b, c, d, e, 70);
 8022c42:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8022c46:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8022c4a:	9702      	str	r7, [sp, #8]
 8022c4c:	9f07      	ldr	r7, [sp, #28]
 8022c4e:	ea87 0902 	eor.w	r9, r7, r2
 8022c52:	ea8a 0909 	eor.w	r9, sl, r9
 8022c56:	ea84 0909 	eor.w	r9, r4, r9
 8022c5a:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8022c5e:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8022c62:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8022c66:	9c02      	ldr	r4, [sp, #8]
 8022c68:	444c      	add	r4, r9
 8022c6a:	eb04 67f8 	add.w	r7, r4, r8, ror #27
 8022c6e:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8022c72:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8022c76:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 8022c7a:	3756      	adds	r7, #86	@ 0x56
 8022c7c:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(e, a, b, c, d, 71);
 8022c80:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8022c84:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8022c88:	9c08      	ldr	r4, [sp, #32]
 8022c8a:	ea84 0903 	eor.w	r9, r4, r3
 8022c8e:	9c03      	ldr	r4, [sp, #12]
 8022c90:	ea84 0909 	eor.w	r9, r4, r9
 8022c94:	ea8b 0909 	eor.w	r9, fp, r9
 8022c98:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8022c9c:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
 8022ca0:	444e      	add	r6, r9
 8022ca2:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022ca6:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8022caa:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8022cae:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8022cb2:	3656      	adds	r6, #86	@ 0x56
 8022cb4:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(d, e, a, b, c, 72);
 8022cb8:	ea87 05b8 	eor.w	r5, r7, r8, ror #2
 8022cbc:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8022cc0:	9c00      	ldr	r4, [sp, #0]
 8022cc2:	ea84 0b00 	eor.w	fp, r4, r0
 8022cc6:	9c04      	ldr	r4, [sp, #16]
 8022cc8:	ea84 0b0b 	eor.w	fp, r4, fp
 8022ccc:	ea8a 0b0b 	eor.w	fp, sl, fp
 8022cd0:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022cd4:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 8022cd8:	445d      	add	r5, fp
 8022cda:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8022cde:	f105 454a 	add.w	r5, r5, #3388997632	@ 0xca000000
 8022ce2:	f505 05c5 	add.w	r5, r5, #6455296	@ 0x628000
 8022ce6:	f505 4583 	add.w	r5, r5, #16768	@ 0x4180
 8022cea:	3556      	adds	r5, #86	@ 0x56
 8022cec:	eb05 05be 	add.w	r5, r5, lr, ror #2
  R4(c, d, e, a, b, 73);
 8022cf0:	9602      	str	r6, [sp, #8]
 8022cf2:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8022cf6:	ea8e 0eb8 	eor.w	lr, lr, r8, ror #2
 8022cfa:	9c01      	ldr	r4, [sp, #4]
 8022cfc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8022cfe:	ea84 0a06 	eor.w	sl, r4, r6
 8022d02:	9c05      	ldr	r4, [sp, #20]
 8022d04:	ea84 0a0a 	eor.w	sl, r4, sl
 8022d08:	9c03      	ldr	r4, [sp, #12]
 8022d0a:	ea84 0a0a 	eor.w	sl, r4, sl
 8022d0e:	ea4f 7afa 	mov.w	sl, sl, ror #31
 8022d12:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
 8022d16:	44d6      	add	lr, sl
 8022d18:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8022d1c:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8022d20:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8022d24:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8022d28:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8022d2c:	eb0e 0ebc 	add.w	lr, lr, ip, ror #2
  R4(b, c, d, e, a, 74);
 8022d30:	9e02      	ldr	r6, [sp, #8]
 8022d32:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8022d36:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8022d3a:	ea81 0109 	eor.w	r1, r1, r9
 8022d3e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022d40:	4071      	eors	r1, r6
 8022d42:	9c04      	ldr	r4, [sp, #16]
 8022d44:	4061      	eors	r1, r4
 8022d46:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022d4a:	9118      	str	r1, [sp, #96]	@ 0x60
 8022d4c:	448c      	add	ip, r1
 8022d4e:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8022d52:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8022d56:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8022d5a:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8022d5e:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8022d62:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
  R4(a, b, c, d, e, 75);
 8022d66:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8022d6a:	9c02      	ldr	r4, [sp, #8]
 8022d6c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8022d70:	ea82 020b 	eor.w	r2, r2, fp
 8022d74:	9c06      	ldr	r4, [sp, #24]
 8022d76:	4062      	eors	r2, r4
 8022d78:	9c05      	ldr	r4, [sp, #20]
 8022d7a:	4062      	eors	r2, r4
 8022d7c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022d80:	9219      	str	r2, [sp, #100]	@ 0x64
 8022d82:	4490      	add	r8, r2
 8022d84:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8022d88:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8022d8c:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8022d90:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8022d94:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8022d98:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(e, a, b, c, d, 76);
 8022d9c:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8022da0:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8022da4:	ea83 030a 	eor.w	r3, r3, sl
 8022da8:	9c07      	ldr	r4, [sp, #28]
 8022daa:	4063      	eors	r3, r4
 8022dac:	4073      	eors	r3, r6
 8022dae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022db2:	931a      	str	r3, [sp, #104]	@ 0x68
 8022db4:	441f      	add	r7, r3
 8022db6:	eb07 67f8 	add.w	r7, r7, r8, ror #27
 8022dba:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8022dbe:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8022dc2:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 8022dc6:	3756      	adds	r7, #86	@ 0x56
 8022dc8:	9e02      	ldr	r6, [sp, #8]
 8022dca:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(d, e, a, b, c, 77);
 8022dce:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8022dd2:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8022dd6:	4048      	eors	r0, r1
 8022dd8:	9908      	ldr	r1, [sp, #32]
 8022dda:	4048      	eors	r0, r1
 8022ddc:	9c06      	ldr	r4, [sp, #24]
 8022dde:	4060      	eors	r0, r4
 8022de0:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8022de4:	901b      	str	r0, [sp, #108]	@ 0x6c
 8022de6:	4406      	add	r6, r0
 8022de8:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022dec:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8022df0:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8022df4:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8022df8:	3656      	adds	r6, #86	@ 0x56
 8022dfa:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(c, d, e, a, b, 78);
 8022dfe:	ea87 01b8 	eor.w	r1, r7, r8, ror #2
 8022e02:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8022e06:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022e08:	406a      	eors	r2, r5
 8022e0a:	9d00      	ldr	r5, [sp, #0]
 8022e0c:	406a      	eors	r2, r5
 8022e0e:	9c07      	ldr	r4, [sp, #28]
 8022e10:	4062      	eors	r2, r4
 8022e12:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022e16:	921c      	str	r2, [sp, #112]	@ 0x70
 8022e18:	4411      	add	r1, r2
 8022e1a:	eb01 61f6 	add.w	r1, r1, r6, ror #27
 8022e1e:	f101 414a 	add.w	r1, r1, #3388997632	@ 0xca000000
 8022e22:	f501 01c5 	add.w	r1, r1, #6455296	@ 0x628000
 8022e26:	f501 4183 	add.w	r1, r1, #16768	@ 0x4180
 8022e2a:	3156      	adds	r1, #86	@ 0x56
 8022e2c:	eb01 01be 	add.w	r1, r1, lr, ror #2
  R4(b, c, d, e, a, 79);
 8022e30:	ea86 02b7 	eor.w	r2, r6, r7, ror #2
 8022e34:	ea82 02b8 	eor.w	r2, r2, r8, ror #2
 8022e38:	ea89 0903 	eor.w	r9, r9, r3
 8022e3c:	9b01      	ldr	r3, [sp, #4]
 8022e3e:	ea83 0909 	eor.w	r9, r3, r9
 8022e42:	9c08      	ldr	r4, [sp, #32]
 8022e44:	ea84 0309 	eor.w	r3, r4, r9
 8022e48:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022e4c:	931d      	str	r3, [sp, #116]	@ 0x74
 8022e4e:	4413      	add	r3, r2
 8022e50:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8022e54:	f103 434a 	add.w	r3, r3, #3388997632	@ 0xca000000
 8022e58:	f503 03c5 	add.w	r3, r3, #6455296	@ 0x628000
 8022e5c:	f503 4383 	add.w	r3, r3, #16768	@ 0x4180
 8022e60:	3356      	adds	r3, #86	@ 0x56
 8022e62:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  state[0] += a;
 8022e66:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022e68:	6802      	ldr	r2, [r0, #0]
 8022e6a:	441a      	add	r2, r3
 8022e6c:	6002      	str	r2, [r0, #0]
  state[1] += b;
 8022e6e:	6843      	ldr	r3, [r0, #4]
 8022e70:	440b      	add	r3, r1
 8022e72:	6043      	str	r3, [r0, #4]
  state[2] += c;
 8022e74:	6883      	ldr	r3, [r0, #8]
 8022e76:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 8022e7a:	6083      	str	r3, [r0, #8]
  state[3] += d;
 8022e7c:	68c3      	ldr	r3, [r0, #12]
 8022e7e:	eb03 03b7 	add.w	r3, r3, r7, ror #2
 8022e82:	60c3      	str	r3, [r0, #12]
  state[4] += e;
 8022e84:	6903      	ldr	r3, [r0, #16]
 8022e86:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 8022e8a:	6103      	str	r3, [r0, #16]
  memset(block, 0, sizeof(block));
 8022e8c:	2240      	movs	r2, #64	@ 0x40
 8022e8e:	2100      	movs	r1, #0
 8022e90:	a80e      	add	r0, sp, #56	@ 0x38
 8022e92:	f00a f92d 	bl	802d0f0 <memset>
}
 8022e96:	b01f      	add	sp, #124	@ 0x7c
 8022e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e9c:	ca62c1d6 	.word	0xca62c1d6

08022ea0 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8022ea0:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8022ea2:	fb01 f400 	mul.w	r4, r1, r0
 8022ea6:	4620      	mov	r0, r4
 8022ea8:	f7f8 f8d6 	bl	801b058 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8022eac:	4605      	mov	r5, r0
 8022eae:	b118      	cbz	r0, 8022eb8 <mg_calloc+0x18>
 8022eb0:	4622      	mov	r2, r4
 8022eb2:	2100      	movs	r1, #0
 8022eb4:	f00a f91c 	bl	802d0f0 <memset>
}
 8022eb8:	4628      	mov	r0, r5
 8022eba:	bd38      	pop	{r3, r4, r5, pc}

08022ebc <mg_print_esc>:
size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8022ebc:	b570      	push	{r4, r5, r6, lr}
 8022ebe:	4605      	mov	r5, r0
 8022ec0:	460e      	mov	r6, r1
  size_t len = (size_t) va_arg(*ap, int);
 8022ec2:	6811      	ldr	r1, [r2, #0]
 8022ec4:	1d0c      	adds	r4, r1, #4
 8022ec6:	6014      	str	r4, [r2, #0]
 8022ec8:	680b      	ldr	r3, [r1, #0]
  char *p = va_arg(*ap, char *);
 8022eca:	f101 0408 	add.w	r4, r1, #8
 8022ece:	6014      	str	r4, [r2, #0]
 8022ed0:	684c      	ldr	r4, [r1, #4]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8022ed2:	b923      	cbnz	r3, 8022ede <mg_print_esc+0x22>
 8022ed4:	b11c      	cbz	r4, 8022ede <mg_print_esc+0x22>
 8022ed6:	4620      	mov	r0, r4
 8022ed8:	f7ed f9e2 	bl	80102a0 <strlen>
 8022edc:	4603      	mov	r3, r0
  return qcpy(out, arg, p, len);
 8022ede:	4622      	mov	r2, r4
 8022ee0:	4631      	mov	r1, r6
 8022ee2:	4628      	mov	r0, r5
 8022ee4:	f7fe fd65 	bl	80219b2 <qcpy>
}
 8022ee8:	bd70      	pop	{r4, r5, r6, pc}

08022eea <getpeer>:
                                     bool lsn) {
 8022eea:	b570      	push	{r4, r5, r6, lr}
 8022eec:	460d      	mov	r5, r1
 8022eee:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 8022ef0:	6804      	ldr	r4, [r0, #0]
 8022ef2:	e000      	b.n	8022ef6 <getpeer+0xc>
 8022ef4:	6824      	ldr	r4, [r4, #0]
 8022ef6:	b364      	cbz	r4, 8022f52 <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 8022ef8:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8022efc:	f013 0f10 	tst.w	r3, #16
 8022f00:	d008      	beq.n	8022f14 <getpeer+0x2a>
 8022f02:	69a8      	ldr	r0, [r5, #24]
 8022f04:	b130      	cbz	r0, 8022f14 <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 8022f06:	2204      	movs	r2, #4
 8022f08:	f104 011c 	add.w	r1, r4, #28
 8022f0c:	300e      	adds	r0, #14
 8022f0e:	f00a f85b 	bl	802cfc8 <memcmp>
    if (c->is_arplooking && pkt->arp &&
 8022f12:	b1f0      	cbz	r0, 8022f52 <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8022f14:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8022f18:	f013 0301 	ands.w	r3, r3, #1
 8022f1c:	d005      	beq.n	8022f2a <getpeer+0x40>
 8022f1e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8022f20:	b11a      	cbz	r2, 8022f2a <getpeer+0x40>
 8022f22:	8b21      	ldrh	r1, [r4, #24]
 8022f24:	8852      	ldrh	r2, [r2, #2]
 8022f26:	4291      	cmp	r1, r2
 8022f28:	d013      	beq.n	8022f52 <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8022f2a:	2b00      	cmp	r3, #0
 8022f2c:	d1e2      	bne.n	8022ef4 <getpeer+0xa>
 8022f2e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8022f30:	2b00      	cmp	r3, #0
 8022f32:	d0df      	beq.n	8022ef4 <getpeer+0xa>
 8022f34:	8b21      	ldrh	r1, [r4, #24]
 8022f36:	885a      	ldrh	r2, [r3, #2]
 8022f38:	4291      	cmp	r1, r2
 8022f3a:	d1db      	bne.n	8022ef4 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8022f3c:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 8022f40:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8022f44:	42b2      	cmp	r2, r6
 8022f46:	d1d5      	bne.n	8022ef4 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8022f48:	b91e      	cbnz	r6, 8022f52 <getpeer+0x68>
 8022f4a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8022f4c:	881b      	ldrh	r3, [r3, #0]
 8022f4e:	429a      	cmp	r2, r3
 8022f50:	d1d0      	bne.n	8022ef4 <getpeer+0xa>
}
 8022f52:	4620      	mov	r0, r4
 8022f54:	bd70      	pop	{r4, r5, r6, pc}

08022f56 <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 8022f56:	b508      	push	{r3, lr}
  putchar(c);
 8022f58:	f009 fb24 	bl	802c5a4 <putchar>
}
 8022f5c:	bd08      	pop	{r3, pc}

08022f5e <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 8022f5e:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8022f62:	6802      	ldr	r2, [r0, #0]
 8022f64:	6883      	ldr	r3, [r0, #8]
}
 8022f66:	58d0      	ldr	r0, [r2, r3]
 8022f68:	4770      	bx	lr
	...

08022f6c <parse_net>:
static int parse_net(const char *spec, uint32_t *net, uint32_t *mask) {
 8022f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f70:	b08b      	sub	sp, #44	@ 0x2c
 8022f72:	4604      	mov	r4, r0
 8022f74:	460e      	mov	r6, r1
 8022f76:	4615      	mov	r5, r2
  int n, a, b, c, d, slash = 32, len = 0;
 8022f78:	2320      	movs	r3, #32
 8022f7a:	9304      	str	r3, [sp, #16]
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 8022f7c:	ab09      	add	r3, sp, #36	@ 0x24
 8022f7e:	9303      	str	r3, [sp, #12]
 8022f80:	ab04      	add	r3, sp, #16
 8022f82:	9302      	str	r3, [sp, #8]
 8022f84:	ab05      	add	r3, sp, #20
 8022f86:	9301      	str	r3, [sp, #4]
 8022f88:	ab06      	add	r3, sp, #24
 8022f8a:	9300      	str	r3, [sp, #0]
 8022f8c:	ab07      	add	r3, sp, #28
 8022f8e:	aa08      	add	r2, sp, #32
 8022f90:	4928      	ldr	r1, [pc, #160]	@ (8023034 <parse_net+0xc8>)
 8022f92:	f009 fd0b 	bl	802c9ac <sscanf>
 8022f96:	2805      	cmp	r0, #5
 8022f98:	d133      	bne.n	8023002 <parse_net+0x96>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 8022f9a:	9c08      	ldr	r4, [sp, #32]
 8022f9c:	4620      	mov	r0, r4
 8022f9e:	f7fe fd6e 	bl	8021a7e <isbyte>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8022fa2:	4603      	mov	r3, r0
 8022fa4:	2800      	cmp	r0, #0
 8022fa6:	d03b      	beq.n	8023020 <parse_net+0xb4>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 8022fa8:	9f07      	ldr	r7, [sp, #28]
 8022faa:	4638      	mov	r0, r7
 8022fac:	f7fe fd67 	bl	8021a7e <isbyte>
 8022fb0:	4603      	mov	r3, r0
 8022fb2:	2800      	cmp	r0, #0
 8022fb4:	d034      	beq.n	8023020 <parse_net+0xb4>
 8022fb6:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8022fba:	4648      	mov	r0, r9
 8022fbc:	f7fe fd5f 	bl	8021a7e <isbyte>
 8022fc0:	4603      	mov	r3, r0
 8022fc2:	b368      	cbz	r0, 8023020 <parse_net+0xb4>
 8022fc4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8022fc8:	4640      	mov	r0, r8
 8022fca:	f7fe fd58 	bl	8021a7e <isbyte>
 8022fce:	4603      	mov	r3, r0
 8022fd0:	b330      	cbz	r0, 8023020 <parse_net+0xb4>
 8022fd2:	9b04      	ldr	r3, [sp, #16]
 8022fd4:	2b00      	cmp	r3, #0
 8022fd6:	db29      	blt.n	802302c <parse_net+0xc0>
 8022fd8:	2b20      	cmp	r3, #32
 8022fda:	dc29      	bgt.n	8023030 <parse_net+0xc4>
    len = n;
 8022fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    *net = ((uint32_t) a << 24) | ((uint32_t) b << 16) | ((uint32_t) c << 8) |
 8022fde:	043a      	lsls	r2, r7, #16
 8022fe0:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8022fe4:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 8022fe8:	ea42 0208 	orr.w	r2, r2, r8
 8022fec:	6032      	str	r2, [r6, #0]
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 8022fee:	9a04      	ldr	r2, [sp, #16]
 8022ff0:	b1d2      	cbz	r2, 8023028 <parse_net+0xbc>
 8022ff2:	f1c2 0220 	rsb	r2, r2, #32
 8022ff6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8022ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8022ffe:	602a      	str	r2, [r5, #0]
 8023000:	e00e      	b.n	8023020 <parse_net+0xb4>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8023002:	ab09      	add	r3, sp, #36	@ 0x24
 8023004:	9302      	str	r3, [sp, #8]
 8023006:	ab05      	add	r3, sp, #20
 8023008:	9301      	str	r3, [sp, #4]
 802300a:	ab06      	add	r3, sp, #24
 802300c:	9300      	str	r3, [sp, #0]
 802300e:	ab07      	add	r3, sp, #28
 8023010:	aa08      	add	r2, sp, #32
 8023012:	4909      	ldr	r1, [pc, #36]	@ (8023038 <parse_net+0xcc>)
 8023014:	4620      	mov	r0, r4
 8023016:	f009 fcc9 	bl	802c9ac <sscanf>
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 802301a:	2804      	cmp	r0, #4
 802301c:	d0bd      	beq.n	8022f9a <parse_net+0x2e>
  int n, a, b, c, d, slash = 32, len = 0;
 802301e:	2300      	movs	r3, #0
}
 8023020:	4618      	mov	r0, r3
 8023022:	b00b      	add	sp, #44	@ 0x2c
 8023024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 8023028:	2200      	movs	r2, #0
 802302a:	e7e8      	b.n	8022ffe <parse_net+0x92>
  int n, a, b, c, d, slash = 32, len = 0;
 802302c:	2300      	movs	r3, #0
 802302e:	e7f7      	b.n	8023020 <parse_net+0xb4>
 8023030:	2300      	movs	r3, #0
  return len;
 8023032:	e7f5      	b.n	8023020 <parse_net+0xb4>
 8023034:	0803ac3c 	.word	0x0803ac3c
 8023038:	0803ac50 	.word	0x0803ac50

0802303c <mg_base64_decode>:
size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 802303c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023040:	4691      	mov	r9, r2
 8023042:	469b      	mov	fp, r3
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8023044:	4604      	mov	r4, r0
 8023046:	b150      	cbz	r0, 802305e <mg_base64_decode+0x22>
 8023048:	eb00 0a01 	add.w	sl, r0, r1
  if (dl < n / 4 * 3 + 1) goto fail;
 802304c:	0889      	lsrs	r1, r1, #2
 802304e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023052:	3101      	adds	r1, #1
 8023054:	4559      	cmp	r1, fp
 8023056:	d847      	bhi.n	80230e8 <mg_base64_decode+0xac>
  size_t len = 0;
 8023058:	f04f 0800 	mov.w	r8, #0
 802305c:	e003      	b.n	8023066 <mg_base64_decode+0x2a>
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 802305e:	4682      	mov	sl, r0
 8023060:	e7f4      	b.n	802304c <mg_base64_decode+0x10>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8023062:	4690      	mov	r8, r2
    src += 4;
 8023064:	3404      	adds	r4, #4
  while (src != NULL && src + 3 < end) {
 8023066:	2c00      	cmp	r4, #0
 8023068:	d03a      	beq.n	80230e0 <mg_base64_decode+0xa4>
 802306a:	1ce3      	adds	r3, r4, #3
 802306c:	4553      	cmp	r3, sl
 802306e:	d237      	bcs.n	80230e0 <mg_base64_decode+0xa4>
    int a = mg_base64_decode_single(src[0]),
 8023070:	7820      	ldrb	r0, [r4, #0]
 8023072:	f7fd f8a5 	bl	80201c0 <mg_base64_decode_single>
 8023076:	4606      	mov	r6, r0
        b = mg_base64_decode_single(src[1]),
 8023078:	7860      	ldrb	r0, [r4, #1]
 802307a:	f7fd f8a1 	bl	80201c0 <mg_base64_decode_single>
 802307e:	4605      	mov	r5, r0
        c = mg_base64_decode_single(src[2]),
 8023080:	78a0      	ldrb	r0, [r4, #2]
 8023082:	f7fd f89d 	bl	80201c0 <mg_base64_decode_single>
 8023086:	4607      	mov	r7, r0
        d = mg_base64_decode_single(src[3]);
 8023088:	78e0      	ldrb	r0, [r4, #3]
 802308a:	f7fd f899 	bl	80201c0 <mg_base64_decode_single>
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 802308e:	2e40      	cmp	r6, #64	@ 0x40
 8023090:	d02a      	beq.n	80230e8 <mg_base64_decode+0xac>
 8023092:	2e00      	cmp	r6, #0
 8023094:	db28      	blt.n	80230e8 <mg_base64_decode+0xac>
 8023096:	2d40      	cmp	r5, #64	@ 0x40
 8023098:	d026      	beq.n	80230e8 <mg_base64_decode+0xac>
 802309a:	2d00      	cmp	r5, #0
 802309c:	db24      	blt.n	80230e8 <mg_base64_decode+0xac>
 802309e:	2f00      	cmp	r7, #0
 80230a0:	db22      	blt.n	80230e8 <mg_base64_decode+0xac>
 80230a2:	2800      	cmp	r0, #0
 80230a4:	db20      	blt.n	80230e8 <mg_base64_decode+0xac>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 80230a6:	112b      	asrs	r3, r5, #4
 80230a8:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
 80230ac:	f108 0201 	add.w	r2, r8, #1
 80230b0:	f809 3008 	strb.w	r3, [r9, r8]
    if (src[2] != '=') {
 80230b4:	78a3      	ldrb	r3, [r4, #2]
 80230b6:	2b3d      	cmp	r3, #61	@ 0x3d
 80230b8:	d0d3      	beq.n	8023062 <mg_base64_decode+0x26>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80230ba:	10bb      	asrs	r3, r7, #2
 80230bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80230c0:	f108 0102 	add.w	r1, r8, #2
 80230c4:	f809 3002 	strb.w	r3, [r9, r2]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80230c8:	78e3      	ldrb	r3, [r4, #3]
 80230ca:	2b3d      	cmp	r3, #61	@ 0x3d
 80230cc:	d006      	beq.n	80230dc <mg_base64_decode+0xa0>
 80230ce:	ea40 1087 	orr.w	r0, r0, r7, lsl #6
 80230d2:	f108 0803 	add.w	r8, r8, #3
 80230d6:	f809 0001 	strb.w	r0, [r9, r1]
 80230da:	e7c3      	b.n	8023064 <mg_base64_decode+0x28>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80230dc:	4688      	mov	r8, r1
 80230de:	e7c1      	b.n	8023064 <mg_base64_decode+0x28>
  dst[len] = '\0';
 80230e0:	2300      	movs	r3, #0
 80230e2:	f809 3008 	strb.w	r3, [r9, r8]
  return len;
 80230e6:	e006      	b.n	80230f6 <mg_base64_decode+0xba>
  if (dl > 0) dst[0] = '\0';
 80230e8:	f1bb 0f00 	cmp.w	fp, #0
 80230ec:	d006      	beq.n	80230fc <mg_base64_decode+0xc0>
 80230ee:	f04f 0800 	mov.w	r8, #0
 80230f2:	f889 8000 	strb.w	r8, [r9]
}
 80230f6:	4640      	mov	r0, r8
 80230f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 0;
 80230fc:	46d8      	mov	r8, fp
 80230fe:	e7fa      	b.n	80230f6 <mg_base64_decode+0xba>

08023100 <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 8023100:	b570      	push	{r4, r5, r6, lr}
 8023102:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8023104:	6843      	ldr	r3, [r0, #4]
 8023106:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 802310a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 802310c:	e000      	b.n	8023110 <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 802310e:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 8023110:	b139      	cbz	r1, 8023122 <mg_resolve_cancel+0x22>
    tmp = d->next;
 8023112:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 8023114:	684b      	ldr	r3, [r1, #4]
 8023116:	42ab      	cmp	r3, r5
 8023118:	d1f9      	bne.n	802310e <mg_resolve_cancel+0xe>
 802311a:	4630      	mov	r0, r6
 802311c:	f7fe fe12 	bl	8021d44 <mg_dns_free>
 8023120:	e7f5      	b.n	802310e <mg_resolve_cancel+0xe>
}
 8023122:	bd70      	pop	{r4, r5, r6, pc}

08023124 <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 8023124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023126:	b083      	sub	sp, #12
 8023128:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 802312a:	1886      	adds	r6, r0, r2
 802312c:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 802312e:	f04f 0c00 	mov.w	ip, #0
 8023132:	f8c4 c000 	str.w	ip, [r4]
 8023136:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 802313a:	290b      	cmp	r1, #11
 802313c:	d934      	bls.n	80231a8 <mg_dns_parse_rr+0x84>
 802313e:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 8023140:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8023144:	d833      	bhi.n	80231ae <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 8023146:	42be      	cmp	r6, r7
 8023148:	d301      	bcc.n	802314e <mg_dns_parse_rr+0x2a>
 802314a:	2000      	movs	r0, #0
 802314c:	e02d      	b.n	80231aa <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 802314e:	4663      	mov	r3, ip
 8023150:	f8cd c000 	str.w	ip, [sp]
 8023154:	f7fe fed5 	bl	8021f02 <mg_dns_parse_name>
 8023158:	b283      	uxth	r3, r0
 802315a:	8023      	strh	r3, [r4, #0]
 802315c:	b34b      	cbz	r3, 80231b2 <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 802315e:	3304      	adds	r3, #4
 8023160:	441e      	add	r6, r3
  if (s > e) return 0;
 8023162:	42b7      	cmp	r7, r6
 8023164:	d327      	bcc.n	80231b6 <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8023166:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 802316a:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 802316e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023172:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8023174:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 8023178:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802317c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023180:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8023182:	b975      	cbnz	r5, 80231a2 <mg_dns_parse_rr+0x7e>
  s += 6;
 8023184:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 8023186:	429f      	cmp	r7, r3
 8023188:	d317      	bcc.n	80231ba <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 802318a:	7931      	ldrb	r1, [r6, #4]
 802318c:	7972      	ldrb	r2, [r6, #5]
 802318e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8023192:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 8023194:	4413      	add	r3, r2
 8023196:	42bb      	cmp	r3, r7
 8023198:	d811      	bhi.n	80231be <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 802319a:	fa12 f080 	uxtah	r0, r2, r0
 802319e:	300a      	adds	r0, #10
 80231a0:	e003      	b.n	80231aa <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 80231a2:	b280      	uxth	r0, r0
 80231a4:	3004      	adds	r0, #4
 80231a6:	e000      	b.n	80231aa <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80231a8:	2000      	movs	r0, #0
}
 80231aa:	b003      	add	sp, #12
 80231ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 80231ae:	2000      	movs	r0, #0
 80231b0:	e7fb      	b.n	80231aa <mg_dns_parse_rr+0x86>
    return 0;
 80231b2:	2000      	movs	r0, #0
 80231b4:	e7f9      	b.n	80231aa <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 80231b6:	2000      	movs	r0, #0
 80231b8:	e7f7      	b.n	80231aa <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 80231ba:	2000      	movs	r0, #0
 80231bc:	e7f5      	b.n	80231aa <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 80231be:	2000      	movs	r0, #0
 80231c0:	e7f3      	b.n	80231aa <mg_dns_parse_rr+0x86>

080231c2 <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 80231c2:	b570      	push	{r4, r5, r6, lr}
 80231c4:	4604      	mov	r4, r0
 80231c6:	460d      	mov	r5, r1
 80231c8:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 80231ca:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80231ce:	b103      	cbz	r3, 80231d2 <mg_call+0x10>
 80231d0:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 80231d2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80231d4:	b11b      	cbz	r3, 80231de <mg_call+0x1c>
 80231d6:	4632      	mov	r2, r6
 80231d8:	4629      	mov	r1, r5
 80231da:	4620      	mov	r0, r4
 80231dc:	4798      	blx	r3
}
 80231de:	bd70      	pop	{r4, r5, r6, pc}

080231e0 <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 80231e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231e2:	4604      	mov	r4, r0
 80231e4:	460d      	mov	r5, r1
 80231e6:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 80231e8:	2108      	movs	r1, #8
 80231ea:	2001      	movs	r0, #1
 80231ec:	f7ff fe58 	bl	8022ea0 <mg_calloc>
  if (fd != NULL) {
 80231f0:	4607      	mov	r7, r0
 80231f2:	b138      	cbz	r0, 8023204 <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 80231f4:	68a3      	ldr	r3, [r4, #8]
 80231f6:	4631      	mov	r1, r6
 80231f8:	4628      	mov	r0, r5
 80231fa:	4798      	blx	r3
 80231fc:	4605      	mov	r5, r0
 80231fe:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 8023200:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 8023202:	b108      	cbz	r0, 8023208 <mg_fs_open+0x28>
}
 8023204:	4638      	mov	r0, r7
 8023206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 8023208:	4638      	mov	r0, r7
 802320a:	f7f7 ffa7 	bl	801b15c <vPortFree>
      fd = NULL;
 802320e:	462f      	mov	r7, r5
  return fd;
 8023210:	e7f8      	b.n	8023204 <mg_fs_open+0x24>

08023212 <mg_fs_close>:
  if (fd != NULL) {
 8023212:	b148      	cbz	r0, 8023228 <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 8023214:	b510      	push	{r4, lr}
 8023216:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 8023218:	6843      	ldr	r3, [r0, #4]
 802321a:	68db      	ldr	r3, [r3, #12]
 802321c:	6800      	ldr	r0, [r0, #0]
 802321e:	4798      	blx	r3
    free(fd);
 8023220:	4620      	mov	r0, r4
 8023222:	f7f7 ff9b 	bl	801b15c <vPortFree>
}
 8023226:	bd10      	pop	{r4, pc}
 8023228:	4770      	bx	lr
	...

0802322c <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 802322c:	b510      	push	{r4, lr}
 802322e:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8023230:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8023234:	f7ff ffed 	bl	8023212 <mg_fs_close>
  c->pfn_data = NULL;
 8023238:	2200      	movs	r2, #0
 802323a:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 802323e:	4b05      	ldr	r3, [pc, #20]	@ (8023254 <restore_http_cb+0x28>)
 8023240:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 8023244:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8023248:	f362 13c7 	bfi	r3, r2, #7, #1
 802324c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8023250:	bd10      	pop	{r4, pc}
 8023252:	bf00      	nop
 8023254:	08026b7d 	.word	0x08026b7d

08023258 <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8023258:	b470      	push	{r4, r5, r6}
 802325a:	b083      	sub	sp, #12
 802325c:	ab02      	add	r3, sp, #8
 802325e:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8023262:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8023264:	e000      	b.n	8023268 <mg_to_size_t+0x10>
 8023266:	3301      	adds	r3, #1
 8023268:	9c01      	ldr	r4, [sp, #4]
 802326a:	429c      	cmp	r4, r3
 802326c:	d905      	bls.n	802327a <mg_to_size_t+0x22>
 802326e:	9900      	ldr	r1, [sp, #0]
 8023270:	5cc9      	ldrb	r1, [r1, r3]
 8023272:	2920      	cmp	r1, #32
 8023274:	d0f7      	beq.n	8023266 <mg_to_size_t+0xe>
 8023276:	2909      	cmp	r1, #9
 8023278:	d0f5      	beq.n	8023266 <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 802327a:	429c      	cmp	r4, r3
 802327c:	d906      	bls.n	802328c <mg_to_size_t+0x34>
 802327e:	9900      	ldr	r1, [sp, #0]
 8023280:	5cc9      	ldrb	r1, [r1, r3]
 8023282:	292d      	cmp	r1, #45	@ 0x2d
 8023284:	d02c      	beq.n	80232e0 <mg_to_size_t+0x88>
 8023286:	2500      	movs	r5, #0
 8023288:	4628      	mov	r0, r5
 802328a:	e001      	b.n	8023290 <mg_to_size_t+0x38>
 802328c:	2500      	movs	r5, #0
 802328e:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8023290:	429c      	cmp	r4, r3
 8023292:	d917      	bls.n	80232c4 <mg_to_size_t+0x6c>
 8023294:	9900      	ldr	r1, [sp, #0]
 8023296:	5cc9      	ldrb	r1, [r1, r3]
 8023298:	292f      	cmp	r1, #47	@ 0x2f
 802329a:	d913      	bls.n	80232c4 <mg_to_size_t+0x6c>
 802329c:	2939      	cmp	r1, #57	@ 0x39
 802329e:	d811      	bhi.n	80232c4 <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 80232a0:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 80232a2:	4e15      	ldr	r6, [pc, #84]	@ (80232f8 <mg_to_size_t+0xa0>)
 80232a4:	42b0      	cmp	r0, r6
 80232a6:	d81d      	bhi.n	80232e4 <mg_to_size_t+0x8c>
    result *= 10;
 80232a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80232ac:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 80232b0:	43ce      	mvns	r6, r1
 80232b2:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 80232b6:	d317      	bcc.n	80232e8 <mg_to_size_t+0x90>
    result += digit;
 80232b8:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 80232bc:	3301      	adds	r3, #1
 80232be:	3501      	adds	r5, #1
 80232c0:	e7e6      	b.n	8023290 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80232c2:	3301      	adds	r3, #1
 80232c4:	429c      	cmp	r4, r3
 80232c6:	d905      	bls.n	80232d4 <mg_to_size_t+0x7c>
 80232c8:	9900      	ldr	r1, [sp, #0]
 80232ca:	5cc9      	ldrb	r1, [r1, r3]
 80232cc:	2920      	cmp	r1, #32
 80232ce:	d0f8      	beq.n	80232c2 <mg_to_size_t+0x6a>
 80232d0:	2909      	cmp	r1, #9
 80232d2:	d0f6      	beq.n	80232c2 <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 80232d4:	b155      	cbz	r5, 80232ec <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 80232d6:	429c      	cmp	r4, r3
 80232d8:	d10c      	bne.n	80232f4 <mg_to_size_t+0x9c>
  *val = (size_t) result;
 80232da:	6010      	str	r0, [r2, #0]
  return true;
 80232dc:	2001      	movs	r0, #1
 80232de:	e006      	b.n	80232ee <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 80232e0:	2000      	movs	r0, #0
 80232e2:	e004      	b.n	80232ee <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 80232e4:	2000      	movs	r0, #0
 80232e6:	e002      	b.n	80232ee <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 80232e8:	2000      	movs	r0, #0
 80232ea:	e000      	b.n	80232ee <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 80232ec:	2000      	movs	r0, #0
}
 80232ee:	b003      	add	sp, #12
 80232f0:	bc70      	pop	{r4, r5, r6}
 80232f2:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 80232f4:	2000      	movs	r0, #0
 80232f6:	e7fa      	b.n	80232ee <mg_to_size_t+0x96>
 80232f8:	19999999 	.word	0x19999999

080232fc <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 80232fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232fe:	4606      	mov	r6, r0
 8023300:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 8023302:	2400      	movs	r4, #0
 8023304:	e007      	b.n	8023316 <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8023306:	1933      	adds	r3, r6, r4
 8023308:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802330c:	2b0a      	cmp	r3, #10
 802330e:	d10d      	bne.n	802332c <mg_http_get_request_len+0x30>
      return (int) i + 1;
 8023310:	1c60      	adds	r0, r4, #1
 8023312:	e01b      	b.n	802334c <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 8023314:	3401      	adds	r4, #1
 8023316:	42bc      	cmp	r4, r7
 8023318:	d217      	bcs.n	802334a <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 802331a:	5d35      	ldrb	r5, [r6, r4]
 802331c:	4628      	mov	r0, r5
 802331e:	f7fd f8d4 	bl	80204ca <isok>
 8023322:	b1a0      	cbz	r0, 802334e <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8023324:	2c00      	cmp	r4, #0
 8023326:	d0f5      	beq.n	8023314 <mg_http_get_request_len+0x18>
 8023328:	2d0a      	cmp	r5, #10
 802332a:	d0ec      	beq.n	8023306 <mg_http_get_request_len+0xa>
 802332c:	2c03      	cmp	r4, #3
 802332e:	d9f1      	bls.n	8023314 <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8023330:	2d0a      	cmp	r5, #10
 8023332:	d1ef      	bne.n	8023314 <mg_http_get_request_len+0x18>
 8023334:	1933      	adds	r3, r6, r4
 8023336:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802333a:	2b0d      	cmp	r3, #13
 802333c:	d1ea      	bne.n	8023314 <mg_http_get_request_len+0x18>
 802333e:	1933      	adds	r3, r6, r4
 8023340:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8023344:	2b0a      	cmp	r3, #10
 8023346:	d1e5      	bne.n	8023314 <mg_http_get_request_len+0x18>
 8023348:	e7e2      	b.n	8023310 <mg_http_get_request_len+0x14>
  return 0;
 802334a:	2000      	movs	r0, #0
}
 802334c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 802334e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023352:	e7fb      	b.n	802334c <mg_http_get_request_len+0x50>

08023354 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8023354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023358:	4605      	mov	r5, r0
 802335a:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 802335c:	4608      	mov	r0, r1
 802335e:	f7ec ff9f 	bl	80102a0 <strlen>
 8023362:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8023364:	2400      	movs	r4, #0
 8023366:	e000      	b.n	802336a <mg_http_get_header+0x16>
 8023368:	3401      	adds	r4, #1
 802336a:	2c1d      	cmp	r4, #29
 802336c:	d819      	bhi.n	80233a2 <mg_http_get_header+0x4e>
 802336e:	1ca3      	adds	r3, r4, #2
 8023370:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8023374:	685a      	ldr	r2, [r3, #4]
 8023376:	b17a      	cbz	r2, 8023398 <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8023378:	0123      	lsls	r3, r4, #4
 802337a:	3328      	adds	r3, #40	@ 0x28
 802337c:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8023380:	42b2      	cmp	r2, r6
 8023382:	d1f1      	bne.n	8023368 <mg_http_get_header+0x14>
 8023384:	1ca3      	adds	r3, r4, #2
 8023386:	011b      	lsls	r3, r3, #4
 8023388:	4632      	mov	r2, r6
 802338a:	4639      	mov	r1, r7
 802338c:	58e8      	ldr	r0, [r5, r3]
 802338e:	f7fd f867 	bl	8020460 <mg_ncasecmp>
 8023392:	2800      	cmp	r0, #0
 8023394:	d1e8      	bne.n	8023368 <mg_http_get_header+0x14>
 8023396:	e001      	b.n	802339c <mg_http_get_header+0x48>
  return NULL;
 8023398:	f04f 0800 	mov.w	r8, #0
}
 802339c:	4640      	mov	r0, r8
 802339e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 80233a2:	f04f 0800 	mov.w	r8, #0
 80233a6:	e7f9      	b.n	802339c <mg_http_get_header+0x48>

080233a8 <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 80233a8:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 80233aa:	6880      	ldr	r0, [r0, #8]
 80233ac:	f007 f96c 	bl	802a688 <atoi>
}
 80233b0:	bd08      	pop	{r3, pc}
	...

080233b4 <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 80233b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233b8:	b095      	sub	sp, #84	@ 0x54
 80233ba:	ac08      	add	r4, sp, #32
 80233bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80233c0:	9202      	str	r2, [sp, #8]
  const char *s = json.buf;
 80233c2:	4606      	mov	r6, r0
  int len = (int) json.len;
 80233c4:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 80233c6:	469a      	mov	sl, r3
 80233c8:	b113      	cbz	r3, 80233d0 <mg_json_get+0x1c>
 80233ca:	2300      	movs	r3, #0
 80233cc:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 80233d0:	9b02      	ldr	r3, [sp, #8]
 80233d2:	781b      	ldrb	r3, [r3, #0]
 80233d4:	2b24      	cmp	r3, #36	@ 0x24
 80233d6:	f040 8232 	bne.w	802383e <mg_json_get+0x48a>
  int ci = -1, ei = -1;  // Current and expected index in array
 80233da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80233de:	9303      	str	r3, [sp, #12]
 80233e0:	9301      	str	r3, [sp, #4]
  int pos = 1;           // Current position in `path`
 80233e2:	2301      	movs	r3, #1
 80233e4:	9304      	str	r3, [sp, #16]
  int ed = 0;            // Expected depth
 80233e6:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 80233ea:	465f      	mov	r7, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 80233ec:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 80233f0:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 80233f2:	465b      	mov	r3, fp
 80233f4:	f8cd a018 	str.w	sl, [sp, #24]
 80233f8:	e190      	b.n	802371c <mg_json_get+0x368>
        if (depth == ed) j = i;
 80233fa:	455f      	cmp	r7, fp
 80233fc:	d029      	beq.n	8023452 <mg_json_get+0x9e>
        if (c == '{') {
 80233fe:	2d7b      	cmp	r5, #123	@ 0x7b
 8023400:	d029      	beq.n	8023456 <mg_json_get+0xa2>
        } else if (c == '[') {
 8023402:	2d5b      	cmp	r5, #91	@ 0x5b
 8023404:	d047      	beq.n	8023496 <mg_json_get+0xe2>
        } else if (c == ']' && depth > 0) {  // Empty array
 8023406:	2d5d      	cmp	r5, #93	@ 0x5d
 8023408:	d07a      	beq.n	8023500 <mg_json_get+0x14c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 802340a:	2d74      	cmp	r5, #116	@ 0x74
 802340c:	f000 80a4 	beq.w	8023558 <mg_json_get+0x1a4>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8023410:	2d6e      	cmp	r5, #110	@ 0x6e
 8023412:	f000 80b0 	beq.w	8023576 <mg_json_get+0x1c2>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8023416:	2d66      	cmp	r5, #102	@ 0x66
 8023418:	f000 80bc 	beq.w	8023594 <mg_json_get+0x1e0>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 802341c:	2d2d      	cmp	r5, #45	@ 0x2d
 802341e:	d005      	beq.n	802342c <mg_json_get+0x78>
 8023420:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8023424:	b2db      	uxtb	r3, r3
 8023426:	2b09      	cmp	r3, #9
 8023428:	f200 80c3 	bhi.w	80235b2 <mg_json_get+0x1fe>
          int numlen = 0;
 802342c:	2300      	movs	r3, #0
 802342e:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 8023430:	aa0b      	add	r2, sp, #44	@ 0x2c
 8023432:	eba8 0104 	sub.w	r1, r8, r4
 8023436:	4648      	mov	r0, r9
 8023438:	f7fd fcc2 	bl	8020dc0 <mg_atod>
          i += numlen - 1;
 802343c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802343e:	3b01      	subs	r3, #1
 8023440:	441c      	add	r4, r3
        MG_CHECKRET('V');
 8023442:	455f      	cmp	r7, fp
 8023444:	f000 80c6 	beq.w	80235d4 <mg_json_get+0x220>
        if (depth == ed && ei >= 0) ci++;
 8023448:	455f      	cmp	r7, fp
 802344a:	f000 80da 	beq.w	8023602 <mg_json_get+0x24e>
        expecting = S_COMMA_OR_EOO;
 802344e:	2303      	movs	r3, #3
 8023450:	e163      	b.n	802371a <mg_json_get+0x366>
        if (depth == ed) j = i;
 8023452:	9405      	str	r4, [sp, #20]
 8023454:	e7d3      	b.n	80233fe <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8023456:	2f1d      	cmp	r7, #29
 8023458:	f300 81f4 	bgt.w	8023844 <mg_json_get+0x490>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 802345c:	455f      	cmp	r7, fp
 802345e:	d007      	beq.n	8023470 <mg_json_get+0xbc>
          nesting[depth++] = c;
 8023460:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8023464:	446b      	add	r3, sp
 8023466:	f803 5c20 	strb.w	r5, [r3, #-32]
 802346a:	3701      	adds	r7, #1
          expecting = S_KEY;
 802346c:	2301      	movs	r3, #1
          break;
 802346e:	e154      	b.n	802371a <mg_json_get+0x366>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8023470:	9b02      	ldr	r3, [sp, #8]
 8023472:	9a04      	ldr	r2, [sp, #16]
 8023474:	5c9b      	ldrb	r3, [r3, r2]
 8023476:	2b2e      	cmp	r3, #46	@ 0x2e
 8023478:	d1f2      	bne.n	8023460 <mg_json_get+0xac>
 802347a:	9b01      	ldr	r3, [sp, #4]
 802347c:	9a03      	ldr	r2, [sp, #12]
 802347e:	4293      	cmp	r3, r2
 8023480:	d1ee      	bne.n	8023460 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 8023482:	f10b 0b01 	add.w	fp, fp, #1
 8023486:	9b04      	ldr	r3, [sp, #16]
 8023488:	3301      	adds	r3, #1
 802348a:	9304      	str	r3, [sp, #16]
 802348c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023490:	9303      	str	r3, [sp, #12]
 8023492:	9301      	str	r3, [sp, #4]
 8023494:	e7e4      	b.n	8023460 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8023496:	2f1d      	cmp	r7, #29
 8023498:	f300 81d7 	bgt.w	802384a <mg_json_get+0x496>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 802349c:	455f      	cmp	r7, fp
 802349e:	d006      	beq.n	80234ae <mg_json_get+0xfa>
          nesting[depth++] = c;
 80234a0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80234a4:	446a      	add	r2, sp
 80234a6:	f802 5c20 	strb.w	r5, [r2, #-32]
 80234aa:	3701      	adds	r7, #1
          break;
 80234ac:	e135      	b.n	802371a <mg_json_get+0x366>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 80234ae:	9a02      	ldr	r2, [sp, #8]
 80234b0:	9904      	ldr	r1, [sp, #16]
 80234b2:	5c52      	ldrb	r2, [r2, r1]
 80234b4:	2a5b      	cmp	r2, #91	@ 0x5b
 80234b6:	d1f3      	bne.n	80234a0 <mg_json_get+0xec>
 80234b8:	9a01      	ldr	r2, [sp, #4]
 80234ba:	9903      	ldr	r1, [sp, #12]
 80234bc:	428a      	cmp	r2, r1
 80234be:	d1ef      	bne.n	80234a0 <mg_json_get+0xec>
            ed++, pos++, ci = 0;
 80234c0:	f10b 0b01 	add.w	fp, fp, #1
 80234c4:	9804      	ldr	r0, [sp, #16]
 80234c6:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 80234c8:	2100      	movs	r1, #0
 80234ca:	f8dd c008 	ldr.w	ip, [sp, #8]
 80234ce:	e005      	b.n	80234dc <mg_json_get+0x128>
              ei *= 10;
 80234d0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
              ei += path[pos] - '0';
 80234d4:	3a30      	subs	r2, #48	@ 0x30
 80234d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 80234da:	3001      	adds	r0, #1
 80234dc:	f81c 2000 	ldrb.w	r2, [ip, r0]
 80234e0:	2a5d      	cmp	r2, #93	@ 0x5d
 80234e2:	d001      	beq.n	80234e8 <mg_json_get+0x134>
 80234e4:	2a00      	cmp	r2, #0
 80234e6:	d1f3      	bne.n	80234d0 <mg_json_get+0x11c>
            if (path[pos] != 0) pos++;
 80234e8:	9004      	str	r0, [sp, #16]
 80234ea:	9103      	str	r1, [sp, #12]
 80234ec:	b12a      	cbz	r2, 80234fa <mg_json_get+0x146>
 80234ee:	4602      	mov	r2, r0
 80234f0:	3201      	adds	r2, #1
 80234f2:	9204      	str	r2, [sp, #16]
            ed++, pos++, ci = 0;
 80234f4:	2200      	movs	r2, #0
 80234f6:	9201      	str	r2, [sp, #4]
 80234f8:	e7d2      	b.n	80234a0 <mg_json_get+0xec>
 80234fa:	2200      	movs	r2, #0
 80234fc:	9201      	str	r2, [sp, #4]
 80234fe:	e7cf      	b.n	80234a0 <mg_json_get+0xec>
        } else if (c == ']' && depth > 0) {  // Empty array
 8023500:	2f00      	cmp	r7, #0
 8023502:	dd82      	ble.n	802340a <mg_json_get+0x56>
          MG_EOO(']');
 8023504:	455f      	cmp	r7, fp
 8023506:	d020      	beq.n	802354a <mg_json_get+0x196>
 8023508:	3f01      	subs	r7, #1
 802350a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802350e:	446b      	add	r3, sp
 8023510:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8023514:	3302      	adds	r3, #2
 8023516:	429d      	cmp	r5, r3
 8023518:	f040 819a 	bne.w	8023850 <mg_json_get+0x49c>
 802351c:	455f      	cmp	r7, fp
 802351e:	d190      	bne.n	8023442 <mg_json_get+0x8e>
 8023520:	9b02      	ldr	r3, [sp, #8]
 8023522:	9a04      	ldr	r2, [sp, #16]
 8023524:	5c9b      	ldrb	r3, [r3, r2]
 8023526:	2b00      	cmp	r3, #0
 8023528:	d18b      	bne.n	8023442 <mg_json_get+0x8e>
 802352a:	9b01      	ldr	r3, [sp, #4]
 802352c:	9a03      	ldr	r2, [sp, #12]
 802352e:	4293      	cmp	r3, r2
 8023530:	d187      	bne.n	8023442 <mg_json_get+0x8e>
 8023532:	f8dd a018 	ldr.w	sl, [sp, #24]
 8023536:	f1ba 0f00 	cmp.w	sl, #0
 802353a:	d004      	beq.n	8023546 <mg_json_get+0x192>
 802353c:	9b05      	ldr	r3, [sp, #20]
 802353e:	1ae3      	subs	r3, r4, r3
 8023540:	3301      	adds	r3, #1
 8023542:	f8ca 3000 	str.w	r3, [sl]
 8023546:	9d05      	ldr	r5, [sp, #20]
 8023548:	e175      	b.n	8023836 <mg_json_get+0x482>
 802354a:	9b01      	ldr	r3, [sp, #4]
 802354c:	9a03      	ldr	r2, [sp, #12]
 802354e:	4293      	cmp	r3, r2
 8023550:	d0da      	beq.n	8023508 <mg_json_get+0x154>
 8023552:	f06f 0502 	mvn.w	r5, #2
 8023556:	e16e      	b.n	8023836 <mg_json_get+0x482>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8023558:	1ce3      	adds	r3, r4, #3
 802355a:	9307      	str	r3, [sp, #28]
 802355c:	4543      	cmp	r3, r8
 802355e:	f6bf af57 	bge.w	8023410 <mg_json_get+0x5c>
 8023562:	2204      	movs	r2, #4
 8023564:	49a3      	ldr	r1, [pc, #652]	@ (80237f4 <mg_json_get+0x440>)
 8023566:	4648      	mov	r0, r9
 8023568:	f009 fd2e 	bl	802cfc8 <memcmp>
 802356c:	2800      	cmp	r0, #0
 802356e:	f47f af4f 	bne.w	8023410 <mg_json_get+0x5c>
          i += 3;
 8023572:	9c07      	ldr	r4, [sp, #28]
 8023574:	e765      	b.n	8023442 <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8023576:	1ce3      	adds	r3, r4, #3
 8023578:	9307      	str	r3, [sp, #28]
 802357a:	4543      	cmp	r3, r8
 802357c:	f6bf af4b 	bge.w	8023416 <mg_json_get+0x62>
 8023580:	2204      	movs	r2, #4
 8023582:	499d      	ldr	r1, [pc, #628]	@ (80237f8 <mg_json_get+0x444>)
 8023584:	4648      	mov	r0, r9
 8023586:	f009 fd1f 	bl	802cfc8 <memcmp>
 802358a:	2800      	cmp	r0, #0
 802358c:	f47f af43 	bne.w	8023416 <mg_json_get+0x62>
          i += 3;
 8023590:	9c07      	ldr	r4, [sp, #28]
 8023592:	e756      	b.n	8023442 <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8023594:	1d23      	adds	r3, r4, #4
 8023596:	9307      	str	r3, [sp, #28]
 8023598:	4543      	cmp	r3, r8
 802359a:	f6bf af3f 	bge.w	802341c <mg_json_get+0x68>
 802359e:	2205      	movs	r2, #5
 80235a0:	4996      	ldr	r1, [pc, #600]	@ (80237fc <mg_json_get+0x448>)
 80235a2:	4648      	mov	r0, r9
 80235a4:	f009 fd10 	bl	802cfc8 <memcmp>
 80235a8:	2800      	cmp	r0, #0
 80235aa:	f47f af37 	bne.w	802341c <mg_json_get+0x68>
          i += 4;
 80235ae:	9c07      	ldr	r4, [sp, #28]
 80235b0:	e747      	b.n	8023442 <mg_json_get+0x8e>
        } else if (c == '"') {
 80235b2:	2d22      	cmp	r5, #34	@ 0x22
 80235b4:	f040 814f 	bne.w	8023856 <mg_json_get+0x4a2>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80235b8:	f10a 0001 	add.w	r0, sl, #1
 80235bc:	eba8 0104 	sub.w	r1, r8, r4
 80235c0:	3901      	subs	r1, #1
 80235c2:	4430      	add	r0, r6
 80235c4:	f7fd fbd5 	bl	8020d72 <mg_pass_string>
          if (n < 0) return n;
 80235c8:	1e05      	subs	r5, r0, #0
 80235ca:	f2c0 8134 	blt.w	8023836 <mg_json_get+0x482>
          i += n + 1;
 80235ce:	3501      	adds	r5, #1
 80235d0:	442c      	add	r4, r5
 80235d2:	e736      	b.n	8023442 <mg_json_get+0x8e>
        MG_CHECKRET('V');
 80235d4:	9b02      	ldr	r3, [sp, #8]
 80235d6:	9a04      	ldr	r2, [sp, #16]
 80235d8:	5c9b      	ldrb	r3, [r3, r2]
 80235da:	2b00      	cmp	r3, #0
 80235dc:	f47f af34 	bne.w	8023448 <mg_json_get+0x94>
 80235e0:	9b01      	ldr	r3, [sp, #4]
 80235e2:	9a03      	ldr	r2, [sp, #12]
 80235e4:	4293      	cmp	r3, r2
 80235e6:	f47f af2f 	bne.w	8023448 <mg_json_get+0x94>
 80235ea:	f8dd a018 	ldr.w	sl, [sp, #24]
 80235ee:	f1ba 0f00 	cmp.w	sl, #0
 80235f2:	d004      	beq.n	80235fe <mg_json_get+0x24a>
 80235f4:	9b05      	ldr	r3, [sp, #20]
 80235f6:	1ae3      	subs	r3, r4, r3
 80235f8:	3301      	adds	r3, #1
 80235fa:	f8ca 3000 	str.w	r3, [sl]
 80235fe:	9d05      	ldr	r5, [sp, #20]
 8023600:	e119      	b.n	8023836 <mg_json_get+0x482>
        if (depth == ed && ei >= 0) ci++;
 8023602:	9b03      	ldr	r3, [sp, #12]
 8023604:	2b00      	cmp	r3, #0
 8023606:	f2c0 8110 	blt.w	802382a <mg_json_get+0x476>
 802360a:	9b01      	ldr	r3, [sp, #4]
 802360c:	3301      	adds	r3, #1
 802360e:	9301      	str	r3, [sp, #4]
        expecting = S_COMMA_OR_EOO;
 8023610:	2303      	movs	r3, #3
 8023612:	e082      	b.n	802371a <mg_json_get+0x366>
        if (c == '"') {
 8023614:	2d22      	cmp	r5, #34	@ 0x22
 8023616:	d014      	beq.n	8023642 <mg_json_get+0x28e>
        } else if (c == '}') {  // Empty object
 8023618:	2d7d      	cmp	r5, #125	@ 0x7d
 802361a:	f040 8125 	bne.w	8023868 <mg_json_get+0x4b4>
          MG_EOO('}');
 802361e:	455f      	cmp	r7, fp
 8023620:	d053      	beq.n	80236ca <mg_json_get+0x316>
 8023622:	3f01      	subs	r7, #1
 8023624:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8023628:	446b      	add	r3, sp
 802362a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 802362e:	3302      	adds	r3, #2
 8023630:	429d      	cmp	r5, r3
 8023632:	f040 811c 	bne.w	802386e <mg_json_get+0x4ba>
 8023636:	455f      	cmp	r7, fp
 8023638:	d04e      	beq.n	80236d8 <mg_json_get+0x324>
          if (depth == ed && ei >= 0) ci++;
 802363a:	455f      	cmp	r7, fp
 802363c:	d061      	beq.n	8023702 <mg_json_get+0x34e>
          expecting = S_COMMA_OR_EOO;
 802363e:	2303      	movs	r3, #3
 8023640:	e06b      	b.n	802371a <mg_json_get+0x366>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8023642:	f104 0901 	add.w	r9, r4, #1
 8023646:	44b1      	add	r9, r6
 8023648:	eba8 0104 	sub.w	r1, r8, r4
 802364c:	3901      	subs	r1, #1
 802364e:	4648      	mov	r0, r9
 8023650:	f7fd fb8f 	bl	8020d72 <mg_pass_string>
          if (n < 0) return n;
 8023654:	1e05      	subs	r5, r0, #0
 8023656:	f2c0 80ee 	blt.w	8023836 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 802365a:	1c63      	adds	r3, r4, #1
 802365c:	442b      	add	r3, r5
 802365e:	4543      	cmp	r3, r8
 8023660:	f280 80fc 	bge.w	802385c <mg_json_get+0x4a8>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8023664:	455f      	cmp	r7, fp
 8023666:	f2c0 80fc 	blt.w	8023862 <mg_json_get+0x4ae>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 802366a:	d005      	beq.n	8023678 <mg_json_get+0x2c4>
          if (depth == ed && path[pos - 1] == '.' &&
 802366c:	455f      	cmp	r7, fp
 802366e:	d00d      	beq.n	802368c <mg_json_get+0x2d8>
          i += n + 1;
 8023670:	3501      	adds	r5, #1
 8023672:	442c      	add	r4, r5
          expecting = S_COLON;
 8023674:	2302      	movs	r3, #2
 8023676:	e050      	b.n	802371a <mg_json_get+0x366>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8023678:	9b02      	ldr	r3, [sp, #8]
 802367a:	9a04      	ldr	r2, [sp, #16]
 802367c:	4413      	add	r3, r2
 802367e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8023682:	2b2e      	cmp	r3, #46	@ 0x2e
 8023684:	d0f2      	beq.n	802366c <mg_json_get+0x2b8>
 8023686:	f06f 0502 	mvn.w	r5, #2
 802368a:	e0d4      	b.n	8023836 <mg_json_get+0x482>
          if (depth == ed && path[pos - 1] == '.' &&
 802368c:	9b02      	ldr	r3, [sp, #8]
 802368e:	9a04      	ldr	r2, [sp, #16]
 8023690:	4413      	add	r3, r2
 8023692:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8023696:	2b2e      	cmp	r3, #46	@ 0x2e
 8023698:	d1ea      	bne.n	8023670 <mg_json_get+0x2bc>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 802369a:	462a      	mov	r2, r5
 802369c:	9b02      	ldr	r3, [sp, #8]
 802369e:	9904      	ldr	r1, [sp, #16]
 80236a0:	1859      	adds	r1, r3, r1
 80236a2:	4648      	mov	r0, r9
 80236a4:	f009 fd59 	bl	802d15a <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 80236a8:	2800      	cmp	r0, #0
 80236aa:	d1e1      	bne.n	8023670 <mg_json_get+0x2bc>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80236ac:	9904      	ldr	r1, [sp, #16]
 80236ae:	194b      	adds	r3, r1, r5
 80236b0:	9a02      	ldr	r2, [sp, #8]
 80236b2:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 80236b4:	b12a      	cbz	r2, 80236c2 <mg_json_get+0x30e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80236b6:	2a2e      	cmp	r2, #46	@ 0x2e
 80236b8:	d005      	beq.n	80236c6 <mg_json_get+0x312>
 80236ba:	2a5b      	cmp	r2, #91	@ 0x5b
 80236bc:	d1d8      	bne.n	8023670 <mg_json_get+0x2bc>
            pos += n;
 80236be:	9304      	str	r3, [sp, #16]
 80236c0:	e7d6      	b.n	8023670 <mg_json_get+0x2bc>
 80236c2:	9304      	str	r3, [sp, #16]
 80236c4:	e7d4      	b.n	8023670 <mg_json_get+0x2bc>
 80236c6:	9304      	str	r3, [sp, #16]
 80236c8:	e7d2      	b.n	8023670 <mg_json_get+0x2bc>
          MG_EOO('}');
 80236ca:	9b01      	ldr	r3, [sp, #4]
 80236cc:	9a03      	ldr	r2, [sp, #12]
 80236ce:	4293      	cmp	r3, r2
 80236d0:	d0a7      	beq.n	8023622 <mg_json_get+0x26e>
 80236d2:	f06f 0502 	mvn.w	r5, #2
 80236d6:	e0ae      	b.n	8023836 <mg_json_get+0x482>
 80236d8:	9b02      	ldr	r3, [sp, #8]
 80236da:	9a04      	ldr	r2, [sp, #16]
 80236dc:	5c9b      	ldrb	r3, [r3, r2]
 80236de:	2b00      	cmp	r3, #0
 80236e0:	d1ab      	bne.n	802363a <mg_json_get+0x286>
 80236e2:	9b01      	ldr	r3, [sp, #4]
 80236e4:	9a03      	ldr	r2, [sp, #12]
 80236e6:	4293      	cmp	r3, r2
 80236e8:	d1a7      	bne.n	802363a <mg_json_get+0x286>
 80236ea:	f8dd a018 	ldr.w	sl, [sp, #24]
 80236ee:	f1ba 0f00 	cmp.w	sl, #0
 80236f2:	d004      	beq.n	80236fe <mg_json_get+0x34a>
 80236f4:	9b05      	ldr	r3, [sp, #20]
 80236f6:	1ae3      	subs	r3, r4, r3
 80236f8:	3301      	adds	r3, #1
 80236fa:	f8ca 3000 	str.w	r3, [sl]
 80236fe:	9d05      	ldr	r5, [sp, #20]
 8023700:	e099      	b.n	8023836 <mg_json_get+0x482>
          if (depth == ed && ei >= 0) ci++;
 8023702:	9b03      	ldr	r3, [sp, #12]
 8023704:	2b00      	cmp	r3, #0
 8023706:	f2c0 8092 	blt.w	802382e <mg_json_get+0x47a>
 802370a:	9b01      	ldr	r3, [sp, #4]
 802370c:	3301      	adds	r3, #1
 802370e:	9301      	str	r3, [sp, #4]
          expecting = S_COMMA_OR_EOO;
 8023710:	2303      	movs	r3, #3
 8023712:	e002      	b.n	802371a <mg_json_get+0x366>
        if (c == ':') {
 8023714:	2d3a      	cmp	r5, #58	@ 0x3a
 8023716:	d11d      	bne.n	8023754 <mg_json_get+0x3a0>
          expecting = S_VALUE;
 8023718:	2300      	movs	r3, #0
  for (i = 0; i < len; i++) {
 802371a:	3401      	adds	r4, #1
 802371c:	4544      	cmp	r4, r8
 802371e:	f280 8088 	bge.w	8023832 <mg_json_get+0x47e>
    unsigned char c = ((unsigned char *) s)[i];
 8023722:	46a2      	mov	sl, r4
 8023724:	eb06 0904 	add.w	r9, r6, r4
 8023728:	5d35      	ldrb	r5, [r6, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 802372a:	2d20      	cmp	r5, #32
 802372c:	d0f5      	beq.n	802371a <mg_json_get+0x366>
 802372e:	2d09      	cmp	r5, #9
 8023730:	d0f3      	beq.n	802371a <mg_json_get+0x366>
 8023732:	2d0a      	cmp	r5, #10
 8023734:	d0f1      	beq.n	802371a <mg_json_get+0x366>
 8023736:	2d0d      	cmp	r5, #13
 8023738:	d0ef      	beq.n	802371a <mg_json_get+0x366>
    switch (expecting) {
 802373a:	2b03      	cmp	r3, #3
 802373c:	d8ed      	bhi.n	802371a <mg_json_get+0x366>
 802373e:	a201      	add	r2, pc, #4	@ (adr r2, 8023744 <mg_json_get+0x390>)
 8023740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023744:	080233fb 	.word	0x080233fb
 8023748:	08023615 	.word	0x08023615
 802374c:	08023715 	.word	0x08023715
 8023750:	0802375b 	.word	0x0802375b
          return MG_JSON_INVALID;
 8023754:	f06f 0501 	mvn.w	r5, #1
 8023758:	e06d      	b.n	8023836 <mg_json_get+0x482>
        if (depth <= 0) {
 802375a:	2f00      	cmp	r7, #0
 802375c:	f340 808a 	ble.w	8023874 <mg_json_get+0x4c0>
        } else if (c == ',') {
 8023760:	2d2c      	cmp	r5, #44	@ 0x2c
 8023762:	d01e      	beq.n	80237a2 <mg_json_get+0x3ee>
        } else if (c == ']' || c == '}') {
 8023764:	2d5d      	cmp	r5, #93	@ 0x5d
 8023766:	d002      	beq.n	802376e <mg_json_get+0x3ba>
 8023768:	2d7d      	cmp	r5, #125	@ 0x7d
 802376a:	f040 8086 	bne.w	802387a <mg_json_get+0x4c6>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 802376e:	455f      	cmp	r7, fp
 8023770:	d021      	beq.n	80237b6 <mg_json_get+0x402>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8023772:	455f      	cmp	r7, fp
 8023774:	d02b      	beq.n	80237ce <mg_json_get+0x41a>
          MG_EOO('O');
 8023776:	455f      	cmp	r7, fp
 8023778:	d035      	beq.n	80237e6 <mg_json_get+0x432>
 802377a:	3f01      	subs	r7, #1
 802377c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8023780:	446a      	add	r2, sp
 8023782:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8023786:	3202      	adds	r2, #2
 8023788:	4295      	cmp	r5, r2
 802378a:	d179      	bne.n	8023880 <mg_json_get+0x4cc>
 802378c:	455f      	cmp	r7, fp
 802378e:	d037      	beq.n	8023800 <mg_json_get+0x44c>
          if (depth == ed && ei >= 0) ci++;
 8023790:	455f      	cmp	r7, fp
 8023792:	d1c2      	bne.n	802371a <mg_json_get+0x366>
 8023794:	9a03      	ldr	r2, [sp, #12]
 8023796:	2a00      	cmp	r2, #0
 8023798:	dbbf      	blt.n	802371a <mg_json_get+0x366>
 802379a:	9a01      	ldr	r2, [sp, #4]
 802379c:	3201      	adds	r2, #1
 802379e:	9201      	str	r2, [sp, #4]
 80237a0:	e7bb      	b.n	802371a <mg_json_get+0x366>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 80237a2:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 80237a6:	446b      	add	r3, sp
 80237a8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80237ac:	2b7b      	cmp	r3, #123	@ 0x7b
 80237ae:	bf14      	ite	ne
 80237b0:	2300      	movne	r3, #0
 80237b2:	2301      	moveq	r3, #1
 80237b4:	e7b1      	b.n	802371a <mg_json_get+0x366>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 80237b6:	2d7d      	cmp	r5, #125	@ 0x7d
 80237b8:	d1db      	bne.n	8023772 <mg_json_get+0x3be>
 80237ba:	9a02      	ldr	r2, [sp, #8]
 80237bc:	9904      	ldr	r1, [sp, #16]
 80237be:	440a      	add	r2, r1
 80237c0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80237c4:	2a2e      	cmp	r2, #46	@ 0x2e
 80237c6:	d1d4      	bne.n	8023772 <mg_json_get+0x3be>
            return MG_JSON_NOT_FOUND;
 80237c8:	f06f 0502 	mvn.w	r5, #2
 80237cc:	e033      	b.n	8023836 <mg_json_get+0x482>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 80237ce:	2d5d      	cmp	r5, #93	@ 0x5d
 80237d0:	d1d1      	bne.n	8023776 <mg_json_get+0x3c2>
 80237d2:	9a02      	ldr	r2, [sp, #8]
 80237d4:	9904      	ldr	r1, [sp, #16]
 80237d6:	440a      	add	r2, r1
 80237d8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80237dc:	2a2c      	cmp	r2, #44	@ 0x2c
 80237de:	d1ca      	bne.n	8023776 <mg_json_get+0x3c2>
            return MG_JSON_NOT_FOUND;
 80237e0:	f06f 0502 	mvn.w	r5, #2
 80237e4:	e027      	b.n	8023836 <mg_json_get+0x482>
          MG_EOO('O');
 80237e6:	9a01      	ldr	r2, [sp, #4]
 80237e8:	9903      	ldr	r1, [sp, #12]
 80237ea:	428a      	cmp	r2, r1
 80237ec:	d0c5      	beq.n	802377a <mg_json_get+0x3c6>
 80237ee:	f06f 0502 	mvn.w	r5, #2
 80237f2:	e020      	b.n	8023836 <mg_json_get+0x482>
 80237f4:	080375e0 	.word	0x080375e0
 80237f8:	0803ac60 	.word	0x0803ac60
 80237fc:	080375e8 	.word	0x080375e8
 8023800:	9a02      	ldr	r2, [sp, #8]
 8023802:	9904      	ldr	r1, [sp, #16]
 8023804:	5c52      	ldrb	r2, [r2, r1]
 8023806:	2a00      	cmp	r2, #0
 8023808:	d1c2      	bne.n	8023790 <mg_json_get+0x3dc>
 802380a:	9a01      	ldr	r2, [sp, #4]
 802380c:	9903      	ldr	r1, [sp, #12]
 802380e:	428a      	cmp	r2, r1
 8023810:	d1be      	bne.n	8023790 <mg_json_get+0x3dc>
 8023812:	f8dd a018 	ldr.w	sl, [sp, #24]
 8023816:	f1ba 0f00 	cmp.w	sl, #0
 802381a:	d004      	beq.n	8023826 <mg_json_get+0x472>
 802381c:	9b05      	ldr	r3, [sp, #20]
 802381e:	1ae3      	subs	r3, r4, r3
 8023820:	3301      	adds	r3, #1
 8023822:	f8ca 3000 	str.w	r3, [sl]
 8023826:	9d05      	ldr	r5, [sp, #20]
 8023828:	e005      	b.n	8023836 <mg_json_get+0x482>
        expecting = S_COMMA_OR_EOO;
 802382a:	2303      	movs	r3, #3
 802382c:	e775      	b.n	802371a <mg_json_get+0x366>
          expecting = S_COMMA_OR_EOO;
 802382e:	2303      	movs	r3, #3
 8023830:	e773      	b.n	802371a <mg_json_get+0x366>
  return MG_JSON_NOT_FOUND;
 8023832:	f06f 0502 	mvn.w	r5, #2
}
 8023836:	4628      	mov	r0, r5
 8023838:	b015      	add	sp, #84	@ 0x54
 802383a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 802383e:	f06f 0501 	mvn.w	r5, #1
 8023842:	e7f8      	b.n	8023836 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8023844:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8023848:	e7f5      	b.n	8023836 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802384a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802384e:	e7f2      	b.n	8023836 <mg_json_get+0x482>
          MG_EOO(']');
 8023850:	f06f 0501 	mvn.w	r5, #1
 8023854:	e7ef      	b.n	8023836 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8023856:	f06f 0501 	mvn.w	r5, #1
 802385a:	e7ec      	b.n	8023836 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 802385c:	f06f 0502 	mvn.w	r5, #2
 8023860:	e7e9      	b.n	8023836 <mg_json_get+0x482>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8023862:	f06f 0502 	mvn.w	r5, #2
 8023866:	e7e6      	b.n	8023836 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8023868:	f06f 0501 	mvn.w	r5, #1
 802386c:	e7e3      	b.n	8023836 <mg_json_get+0x482>
          MG_EOO('}');
 802386e:	f06f 0501 	mvn.w	r5, #1
 8023872:	e7e0      	b.n	8023836 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8023874:	f06f 0501 	mvn.w	r5, #1
 8023878:	e7dd      	b.n	8023836 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 802387a:	f06f 0501 	mvn.w	r5, #1
 802387e:	e7da      	b.n	8023836 <mg_json_get+0x482>
          MG_EOO('O');
 8023880:	f06f 0501 	mvn.w	r5, #1
 8023884:	e7d7      	b.n	8023836 <mg_json_get+0x482>
 8023886:	bf00      	nop

08023888 <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8023888:	b510      	push	{r4, lr}
 802388a:	b084      	sub	sp, #16
 802388c:	46ec      	mov	ip, sp
 802388e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8023892:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8023894:	ab03      	add	r3, sp, #12
 8023896:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802389a:	f7ff fd8b 	bl	80233b4 <mg_json_get>
 802389e:	1e02      	subs	r2, r0, #0
 80238a0:	db11      	blt.n	80238c6 <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 80238a2:	9b00      	ldr	r3, [sp, #0]
 80238a4:	1898      	adds	r0, r3, r2
 80238a6:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 80238a8:	2a2d      	cmp	r2, #45	@ 0x2d
 80238aa:	d003      	beq.n	80238b4 <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 80238ac:	3a30      	subs	r2, #48	@ 0x30
 80238ae:	b2d2      	uxtb	r2, r2
 80238b0:	2a09      	cmp	r2, #9
 80238b2:	d80b      	bhi.n	80238cc <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 80238b4:	b164      	cbz	r4, 80238d0 <mg_json_get_num+0x48>
 80238b6:	2200      	movs	r2, #0
 80238b8:	9903      	ldr	r1, [sp, #12]
 80238ba:	f7fd fa81 	bl	8020dc0 <mg_atod>
 80238be:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 80238c2:	2001      	movs	r0, #1
 80238c4:	e000      	b.n	80238c8 <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 80238c6:	2000      	movs	r0, #0
}
 80238c8:	b004      	add	sp, #16
 80238ca:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 80238cc:	2000      	movs	r0, #0
 80238ce:	e7fb      	b.n	80238c8 <mg_json_get_num+0x40>
    found = 1;
 80238d0:	2001      	movs	r0, #1
 80238d2:	e7f9      	b.n	80238c8 <mg_json_get_num+0x40>

080238d4 <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 80238d4:	b510      	push	{r4, lr}
 80238d6:	b082      	sub	sp, #8
 80238d8:	46ec      	mov	ip, sp
 80238da:	e88c 0003 	stmia.w	ip, {r0, r1}
 80238de:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 80238e0:	2300      	movs	r3, #0
 80238e2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80238e6:	f7ff fd65 	bl	80233b4 <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 80238ea:	2800      	cmp	r0, #0
 80238ec:	db0f      	blt.n	802390e <mg_json_get_bool+0x3a>
 80238ee:	9b00      	ldr	r3, [sp, #0]
 80238f0:	5c1b      	ldrb	r3, [r3, r0]
 80238f2:	2b74      	cmp	r3, #116	@ 0x74
 80238f4:	d003      	beq.n	80238fe <mg_json_get_bool+0x2a>
 80238f6:	2b66      	cmp	r3, #102	@ 0x66
 80238f8:	d001      	beq.n	80238fe <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 80238fa:	2000      	movs	r0, #0
 80238fc:	e008      	b.n	8023910 <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 80238fe:	b14c      	cbz	r4, 8023914 <mg_json_get_bool+0x40>
 8023900:	2b74      	cmp	r3, #116	@ 0x74
 8023902:	bf14      	ite	ne
 8023904:	2300      	movne	r3, #0
 8023906:	2301      	moveq	r3, #1
 8023908:	7023      	strb	r3, [r4, #0]
    found = 1;
 802390a:	2001      	movs	r0, #1
 802390c:	e000      	b.n	8023910 <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 802390e:	2000      	movs	r0, #0
}
 8023910:	b002      	add	sp, #8
 8023912:	bd10      	pop	{r4, pc}
    found = 1;
 8023914:	2001      	movs	r0, #1
 8023916:	e7fb      	b.n	8023910 <mg_json_get_bool+0x3c>

08023918 <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 8023918:	b5f0      	push	{r4, r5, r6, r7, lr}
 802391a:	b085      	sub	sp, #20
 802391c:	4606      	mov	r6, r0
 802391e:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 8023920:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 8023922:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 8023924:	e038      	b.n	8023998 <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8023926:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802392a:	f7fd fb5b 	bl	8020fe4 <nibble>
 802392e:	f7fd fb41 	bl	8020fb4 <logc>
 8023932:	f3c5 2003 	ubfx	r0, r5, #8, #4
 8023936:	f7fd fb55 	bl	8020fe4 <nibble>
 802393a:	f7fd fb3b 	bl	8020fb4 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 802393e:	f3c5 1003 	ubfx	r0, r5, #4, #4
 8023942:	f7fd fb4f 	bl	8020fe4 <nibble>
 8023946:	f7fd fb35 	bl	8020fb4 <logc>
 802394a:	2030      	movs	r0, #48	@ 0x30
 802394c:	f7fd fb32 	bl	8020fb4 <logc>
 8023950:	2103      	movs	r1, #3
 8023952:	4829      	ldr	r0, [pc, #164]	@ (80239f8 <mg_hexdump+0xe0>)
 8023954:	f7fd fb3a 	bl	8020fcc <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8023958:	5d70      	ldrb	r0, [r6, r5]
 802395a:	0900      	lsrs	r0, r0, #4
 802395c:	f7fd fb42 	bl	8020fe4 <nibble>
 8023960:	f7fd fb28 	bl	8020fb4 <logc>
 8023964:	5d70      	ldrb	r0, [r6, r5]
 8023966:	f000 000f 	and.w	r0, r0, #15
 802396a:	f7fd fb3b 	bl	8020fe4 <nibble>
 802396e:	f7fd fb21 	bl	8020fb4 <logc>
    logc(' ');                                         // Space after hex number
 8023972:	2020      	movs	r0, #32
 8023974:	f7fd fb1e 	bl	8020fb4 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8023978:	5d72      	ldrb	r2, [r6, r5]
 802397a:	f1a2 0320 	sub.w	r3, r2, #32
 802397e:	b2db      	uxtb	r3, r3
 8023980:	2b5e      	cmp	r3, #94	@ 0x5e
 8023982:	d900      	bls.n	8023986 <mg_hexdump+0x6e>
 8023984:	222e      	movs	r2, #46	@ 0x2e
 8023986:	1c63      	adds	r3, r4, #1
 8023988:	f104 0110 	add.w	r1, r4, #16
 802398c:	eb0d 0401 	add.w	r4, sp, r1
 8023990:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 8023994:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8023996:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 8023998:	42bd      	cmp	r5, r7
 802399a:	d21e      	bcs.n	80239da <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 802399c:	f015 0f0f 	tst.w	r5, #15
 80239a0:	d1da      	bne.n	8023958 <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 80239a2:	2d00      	cmp	r5, #0
 80239a4:	d0bf      	beq.n	8023926 <mg_hexdump+0xe>
 80239a6:	2102      	movs	r1, #2
 80239a8:	4814      	ldr	r0, [pc, #80]	@ (80239fc <mg_hexdump+0xe4>)
 80239aa:	f7fd fb0f 	bl	8020fcc <logs>
 80239ae:	2110      	movs	r1, #16
 80239b0:	4668      	mov	r0, sp
 80239b2:	f7fd fb0b 	bl	8020fcc <logs>
 80239b6:	200a      	movs	r0, #10
 80239b8:	f7fd fafc 	bl	8020fb4 <logc>
 80239bc:	2400      	movs	r4, #0
 80239be:	e7b2      	b.n	8023926 <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 80239c0:	2103      	movs	r1, #3
 80239c2:	480d      	ldr	r0, [pc, #52]	@ (80239f8 <mg_hexdump+0xe0>)
 80239c4:	f7fd fb02 	bl	8020fcc <logs>
 80239c8:	1c63      	adds	r3, r4, #1
 80239ca:	f104 0210 	add.w	r2, r4, #16
 80239ce:	eb0d 0402 	add.w	r4, sp, r2
 80239d2:	2220      	movs	r2, #32
 80239d4:	f804 2c10 	strb.w	r2, [r4, #-16]
 80239d8:	b2dc      	uxtb	r4, r3
 80239da:	2c0f      	cmp	r4, #15
 80239dc:	d9f0      	bls.n	80239c0 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 80239de:	2102      	movs	r1, #2
 80239e0:	4806      	ldr	r0, [pc, #24]	@ (80239fc <mg_hexdump+0xe4>)
 80239e2:	f7fd faf3 	bl	8020fcc <logs>
 80239e6:	2110      	movs	r1, #16
 80239e8:	4668      	mov	r0, sp
 80239ea:	f7fd faef 	bl	8020fcc <logs>
 80239ee:	200a      	movs	r0, #10
 80239f0:	f7fd fae0 	bl	8020fb4 <logc>
}
 80239f4:	b005      	add	sp, #20
 80239f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80239f8:	0803ac6c 	.word	0x0803ac6c
 80239fc:	0803ac68 	.word	0x0803ac68

08023a00 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 8023a00:	4b09      	ldr	r3, [pc, #36]	@ (8023a28 <mg_md5_init+0x28>)
 8023a02:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 8023a04:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8023a08:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 8023a0a:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 8023a0e:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8023a12:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 8023a16:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 8023a18:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 8023a1c:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 8023a1e:	2300      	movs	r3, #0
 8023a20:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 8023a22:	6143      	str	r3, [r0, #20]
}
 8023a24:	4770      	bx	lr
 8023a26:	bf00      	nop
 8023a28:	67452301 	.word	0x67452301

08023a2c <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 8023a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023a30:	4606      	mov	r6, r0
 8023a32:	460c      	mov	r4, r1
 8023a34:	4615      	mov	r5, r2
  t = ctx->bits[0];
 8023a36:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 8023a38:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8023a3c:	6102      	str	r2, [r0, #16]
 8023a3e:	429a      	cmp	r2, r3
 8023a40:	d202      	bcs.n	8023a48 <mg_md5_update+0x1c>
 8023a42:	6942      	ldr	r2, [r0, #20]
 8023a44:	3201      	adds	r2, #1
 8023a46:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 8023a48:	6972      	ldr	r2, [r6, #20]
 8023a4a:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 8023a4e:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 8023a50:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 8023a54:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 8023a58:	d035      	beq.n	8023ac6 <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 8023a5a:	f106 0918 	add.w	r9, r6, #24
 8023a5e:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 8023a62:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 8023a66:	4545      	cmp	r5, r8
 8023a68:	d30b      	bcc.n	8023a82 <mg_md5_update+0x56>
    memcpy(p, buf, t);
 8023a6a:	4642      	mov	r2, r8
 8023a6c:	4621      	mov	r1, r4
 8023a6e:	f00a fd7b 	bl	802e568 <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8023a72:	4649      	mov	r1, r9
 8023a74:	4630      	mov	r0, r6
 8023a76:	f7fd fabf 	bl	8020ff8 <mg_md5_transform>
    buf += t;
 8023a7a:	4444      	add	r4, r8
    len -= t;
 8023a7c:	3f40      	subs	r7, #64	@ 0x40
 8023a7e:	443d      	add	r5, r7
 8023a80:	e021      	b.n	8023ac6 <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 8023a82:	462a      	mov	r2, r5
 8023a84:	4621      	mov	r1, r4
 8023a86:	f00a fd6f 	bl	802e568 <memcpy>
      return;
 8023a8a:	e024      	b.n	8023ad6 <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 8023a8c:	f106 0118 	add.w	r1, r6, #24
 8023a90:	4623      	mov	r3, r4
 8023a92:	468c      	mov	ip, r1
 8023a94:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 8023a98:	681f      	ldr	r7, [r3, #0]
 8023a9a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8023a9e:	6898      	ldr	r0, [r3, #8]
 8023aa0:	68da      	ldr	r2, [r3, #12]
 8023aa2:	f8cc 7000 	str.w	r7, [ip]
 8023aa6:	f8cc e004 	str.w	lr, [ip, #4]
 8023aaa:	f8cc 0008 	str.w	r0, [ip, #8]
 8023aae:	f8cc 200c 	str.w	r2, [ip, #12]
 8023ab2:	3310      	adds	r3, #16
 8023ab4:	f10c 0c10 	add.w	ip, ip, #16
 8023ab8:	4543      	cmp	r3, r8
 8023aba:	d1ed      	bne.n	8023a98 <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8023abc:	4630      	mov	r0, r6
 8023abe:	f7fd fa9b 	bl	8020ff8 <mg_md5_transform>
    buf += 64;
 8023ac2:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 8023ac4:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 8023ac6:	2d3f      	cmp	r5, #63	@ 0x3f
 8023ac8:	d8e0      	bhi.n	8023a8c <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 8023aca:	462a      	mov	r2, r5
 8023acc:	4621      	mov	r1, r4
 8023ace:	f106 0018 	add.w	r0, r6, #24
 8023ad2:	f00a fd49 	bl	802e568 <memcpy>
}
 8023ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08023ada <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 8023ada:	b570      	push	{r4, r5, r6, lr}
 8023adc:	4604      	mov	r4, r0
 8023ade:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 8023ae0:	6903      	ldr	r3, [r0, #16]
 8023ae2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 8023ae6:	f100 0618 	add.w	r6, r0, #24
 8023aea:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 8023aec:	3001      	adds	r0, #1
 8023aee:	2280      	movs	r2, #128	@ 0x80
 8023af0:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 8023af2:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 8023af6:	2a07      	cmp	r2, #7
 8023af8:	d821      	bhi.n	8023b3e <mg_md5_final+0x64>
    memset(p, 0, count);
 8023afa:	2100      	movs	r1, #0
 8023afc:	f009 faf8 	bl	802d0f0 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8023b00:	4631      	mov	r1, r6
 8023b02:	4620      	mov	r0, r4
 8023b04:	f7fd fa78 	bl	8020ff8 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 8023b08:	2238      	movs	r2, #56	@ 0x38
 8023b0a:	2100      	movs	r1, #0
 8023b0c:	4630      	mov	r0, r6
 8023b0e:	f009 faef 	bl	802d0f0 <memset>
  a[14] = ctx->bits[0];
 8023b12:	6923      	ldr	r3, [r4, #16]
 8023b14:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 8023b16:	6963      	ldr	r3, [r4, #20]
 8023b18:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8023b1a:	4631      	mov	r1, r6
 8023b1c:	4620      	mov	r0, r4
 8023b1e:	f7fd fa6b 	bl	8020ff8 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 8023b22:	6820      	ldr	r0, [r4, #0]
 8023b24:	6861      	ldr	r1, [r4, #4]
 8023b26:	68a2      	ldr	r2, [r4, #8]
 8023b28:	68e3      	ldr	r3, [r4, #12]
 8023b2a:	6028      	str	r0, [r5, #0]
 8023b2c:	6069      	str	r1, [r5, #4]
 8023b2e:	60aa      	str	r2, [r5, #8]
 8023b30:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 8023b32:	2258      	movs	r2, #88	@ 0x58
 8023b34:	2100      	movs	r1, #0
 8023b36:	4620      	mov	r0, r4
 8023b38:	f009 fada 	bl	802d0f0 <memset>
}
 8023b3c:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 8023b3e:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8023b42:	2100      	movs	r1, #0
 8023b44:	f009 fad4 	bl	802d0f0 <memset>
 8023b48:	e7e3      	b.n	8023b12 <mg_md5_final+0x38>

08023b4a <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 8023b4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023b4e:	4604      	mov	r4, r0
 8023b50:	460d      	mov	r5, r1
 8023b52:	4617      	mov	r7, r2
 8023b54:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 8023b56:	2228      	movs	r2, #40	@ 0x28
 8023b58:	2100      	movs	r1, #0
 8023b5a:	4618      	mov	r0, r3
 8023b5c:	f009 fac8 	bl	802d0f0 <memset>
  m->dgram.buf = (char *) buf;
 8023b60:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8023b62:	2d01      	cmp	r5, #1
 8023b64:	f240 8088 	bls.w	8023c78 <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8023b68:	7820      	ldrb	r0, [r4, #0]
 8023b6a:	0900      	lsrs	r0, r0, #4
 8023b6c:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 8023b6e:	46a4      	mov	ip, r4
 8023b70:	f81c 9b01 	ldrb.w	r9, [ip], #1
 8023b74:	f3c9 0941 	ubfx	r9, r9, #1, #2
 8023b78:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 8023b7c:	2300      	movs	r3, #0
 8023b7e:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 8023b80:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 8023b82:	ebac 0e04 	sub.w	lr, ip, r4
 8023b86:	45ae      	cmp	lr, r5
 8023b88:	d211      	bcs.n	8023bae <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 8023b8a:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8023b8e:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 8023b92:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 8023b96:	fa0e fe08 	lsl.w	lr, lr, r8
 8023b9a:	4471      	add	r1, lr
    len_len++;
 8023b9c:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 8023b9e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8023ba2:	d004      	beq.n	8023bae <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 8023ba4:	2b03      	cmp	r3, #3
 8023ba6:	d9ec      	bls.n	8023b82 <mg_mqtt_parse+0x38>
 8023ba8:	2002      	movs	r0, #2
}
 8023baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 8023bae:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8023bb2:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8023bb6:	d161      	bne.n	8023c7c <mg_mqtt_parse+0x132>
 8023bb8:	4425      	add	r5, r4
 8023bba:	4545      	cmp	r5, r8
 8023bbc:	d360      	bcc.n	8023c80 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 8023bbe:	eba8 0304 	sub.w	r3, r8, r4
 8023bc2:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 8023bc4:	2803      	cmp	r0, #3
 8023bc6:	d01c      	beq.n	8023c02 <mg_mqtt_parse+0xb8>
 8023bc8:	d80a      	bhi.n	8023be0 <mg_mqtt_parse+0x96>
 8023bca:	2802      	cmp	r0, #2
 8023bcc:	d106      	bne.n	8023bdc <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 8023bce:	2901      	cmp	r1, #1
 8023bd0:	dd5a      	ble.n	8023c88 <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 8023bd2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023bd6:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 8023bd8:	2000      	movs	r0, #0
      break;
 8023bda:	e7e6      	b.n	8023baa <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8023bdc:	2000      	movs	r0, #0
 8023bde:	e7e4      	b.n	8023baa <mg_mqtt_parse+0x60>
 8023be0:	3804      	subs	r0, #4
 8023be2:	b2c0      	uxtb	r0, r0
 8023be4:	2807      	cmp	r0, #7
 8023be6:	d84d      	bhi.n	8023c84 <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023be8:	f10c 0302 	add.w	r3, ip, #2
 8023bec:	4543      	cmp	r3, r8
 8023bee:	d84d      	bhi.n	8023c8c <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8023bf0:	f89c 2000 	ldrb.w	r2, [ip]
 8023bf4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023bf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023bfc:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 8023bfe:	2000      	movs	r0, #0
      break;
 8023c00:	e7d3      	b.n	8023baa <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023c02:	f10c 0202 	add.w	r2, ip, #2
 8023c06:	4542      	cmp	r2, r8
 8023c08:	d842      	bhi.n	8023c90 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8023c0a:	f89c 1000 	ldrb.w	r1, [ip]
 8023c0e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023c12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8023c16:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 8023c18:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 8023c1a:	3302      	adds	r3, #2
 8023c1c:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 8023c20:	45a8      	cmp	r8, r5
 8023c22:	d337      	bcc.n	8023c94 <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 8023c24:	f1b9 0f00 	cmp.w	r9, #0
 8023c28:	d008      	beq.n	8023c3c <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 8023c2a:	1caa      	adds	r2, r5, #2
 8023c2c:	4542      	cmp	r2, r8
 8023c2e:	d833      	bhi.n	8023c98 <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8023c30:	7829      	ldrb	r1, [r5, #0]
 8023c32:	786b      	ldrb	r3, [r5, #1]
 8023c34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8023c38:	8333      	strh	r3, [r6, #24]
        p += 2;
 8023c3a:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 8023c3c:	4545      	cmp	r5, r8
 8023c3e:	d82d      	bhi.n	8023c9c <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 8023c40:	2f05      	cmp	r7, #5
 8023c42:	d007      	beq.n	8023c54 <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 8023c44:	4545      	cmp	r5, r8
 8023c46:	d82d      	bhi.n	8023ca4 <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 8023c48:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 8023c4a:	eba8 0505 	sub.w	r5, r8, r5
 8023c4e:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 8023c50:	2000      	movs	r0, #0
      break;
 8023c52:	e7aa      	b.n	8023baa <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 8023c54:	1cab      	adds	r3, r5, #2
 8023c56:	4543      	cmp	r3, r8
 8023c58:	d2f4      	bcs.n	8023c44 <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 8023c5a:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 8023c5e:	eba8 0105 	sub.w	r1, r8, r5
 8023c62:	4628      	mov	r0, r5
 8023c64:	f7fd fd70 	bl	8021748 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 8023c68:	b1d0      	cbz	r0, 8023ca0 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 8023c6a:	182b      	adds	r3, r5, r0
 8023c6c:	1b1b      	subs	r3, r3, r4
 8023c6e:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 8023c70:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8023c72:	4403      	add	r3, r0
 8023c74:	441d      	add	r5, r3
 8023c76:	e7e5      	b.n	8023c44 <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 8023c78:	2001      	movs	r0, #1
 8023c7a:	e796      	b.n	8023baa <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8023c7c:	2001      	movs	r0, #1
 8023c7e:	e794      	b.n	8023baa <mg_mqtt_parse+0x60>
 8023c80:	2001      	movs	r0, #1
 8023c82:	e792      	b.n	8023baa <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8023c84:	2000      	movs	r0, #0
 8023c86:	e790      	b.n	8023baa <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 8023c88:	2002      	movs	r0, #2
 8023c8a:	e78e      	b.n	8023baa <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023c8c:	2002      	movs	r0, #2
 8023c8e:	e78c      	b.n	8023baa <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023c90:	2002      	movs	r0, #2
 8023c92:	e78a      	b.n	8023baa <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023c94:	2002      	movs	r0, #2
 8023c96:	e788      	b.n	8023baa <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 8023c98:	2002      	movs	r0, #2
 8023c9a:	e786      	b.n	8023baa <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023c9c:	2002      	movs	r0, #2
 8023c9e:	e784      	b.n	8023baa <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 8023ca0:	2002      	movs	r0, #2
 8023ca2:	e782      	b.n	8023baa <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023ca4:	2002      	movs	r0, #2
 8023ca6:	e780      	b.n	8023baa <mg_mqtt_parse+0x60>

08023ca8 <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8023ca8:	b510      	push	{r4, lr}
 8023caa:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8023cac:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8023cae:	31b0      	adds	r1, #176	@ 0xb0
 8023cb0:	2001      	movs	r0, #1
 8023cb2:	f7ff f8f5 	bl	8022ea0 <mg_calloc>
  if (c != NULL) {
 8023cb6:	4603      	mov	r3, r0
 8023cb8:	b148      	cbz	r0, 8023cce <mg_alloc_conn+0x26>
    c->mgr = mgr;
 8023cba:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 8023cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023cc0:	6742      	str	r2, [r0, #116]	@ 0x74
 8023cc2:	6442      	str	r2, [r0, #68]	@ 0x44
 8023cc4:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 8023cc6:	69e2      	ldr	r2, [r4, #28]
 8023cc8:	3201      	adds	r2, #1
 8023cca:	61e2      	str	r2, [r4, #28]
 8023ccc:	6342      	str	r2, [r0, #52]	@ 0x34
}
 8023cce:	4618      	mov	r0, r3
 8023cd0:	bd10      	pop	{r4, pc}
	...

08023cd4 <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 8023cd4:	b510      	push	{r4, lr}
 8023cd6:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 8023cd8:	2248      	movs	r2, #72	@ 0x48
 8023cda:	2100      	movs	r1, #0
 8023cdc:	f009 fa08 	bl	802d0f0 <memset>
  mgr->epoll_fd = -1;
 8023ce0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023ce4:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 8023ce6:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8023ce8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8023cec:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8023cee:	4b02      	ldr	r3, [pc, #8]	@ (8023cf8 <mg_mgr_init+0x24>)
 8023cf0:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8023cf2:	4b02      	ldr	r3, [pc, #8]	@ (8023cfc <mg_mgr_init+0x28>)
 8023cf4:	60e3      	str	r3, [r4, #12]
}
 8023cf6:	bd10      	pop	{r4, pc}
 8023cf8:	0803ac70 	.word	0x0803ac70
 8023cfc:	0803ac84 	.word	0x0803ac84

08023d00 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8023d00:	b40c      	push	{r2, r3}
 8023d02:	b500      	push	{lr}
 8023d04:	b083      	sub	sp, #12
 8023d06:	ab04      	add	r3, sp, #16
 8023d08:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8023d0c:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8023d0e:	ab01      	add	r3, sp, #4
 8023d10:	f000 fcde 	bl	80246d0 <mg_vsnprintf>
}
 8023d14:	b003      	add	sp, #12
 8023d16:	f85d eb04 	ldr.w	lr, [sp], #4
 8023d1a:	b002      	add	sp, #8
 8023d1c:	4770      	bx	lr
	...

08023d20 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8023d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d24:	b093      	sub	sp, #76	@ 0x4c
 8023d26:	9005      	str	r0, [sp, #20]
 8023d28:	9106      	str	r1, [sp, #24]
 8023d2a:	ec51 0b10 	vmov	r0, r1, d0
 8023d2e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8023d32:	4690      	mov	r8, r2
 8023d34:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8023d36:	2200      	movs	r2, #0
 8023d38:	2300      	movs	r3, #0
 8023d3a:	f7ec fedd 	bl	8010af8 <__aeabi_dcmpeq>
 8023d3e:	b9c8      	cbnz	r0, 8023d74 <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8023d40:	ed9d 0b02 	vldr	d0, [sp, #8]
 8023d44:	f7fc faae 	bl	80202a4 <xisinf>
 8023d48:	b9d8      	cbnz	r0, 8023d82 <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8023d4a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8023d4e:	f7fc fabb 	bl	80202c8 <xisnan>
 8023d52:	4606      	mov	r6, r0
 8023d54:	bb28      	cbnz	r0, 8023da2 <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8023d56:	2200      	movs	r2, #0
 8023d58:	2300      	movs	r3, #0
 8023d5a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8023d5e:	4620      	mov	r0, r4
 8023d60:	4629      	mov	r1, r5
 8023d62:	f7ec fed3 	bl	8010b0c <__aeabi_dcmplt>
 8023d66:	bb18      	cbnz	r0, 8023db0 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 8023d68:	4637      	mov	r7, r6
  mul = 1.0;
 8023d6a:	2400      	movs	r4, #0
 8023d6c:	4dba      	ldr	r5, [pc, #744]	@ (8024058 <mg_dtoa+0x338>)
 8023d6e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8023d72:	e02f      	b.n	8023dd4 <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8023d74:	4bb9      	ldr	r3, [pc, #740]	@ (802405c <mg_dtoa+0x33c>)
 8023d76:	4aba      	ldr	r2, [pc, #744]	@ (8024060 <mg_dtoa+0x340>)
 8023d78:	9906      	ldr	r1, [sp, #24]
 8023d7a:	9805      	ldr	r0, [sp, #20]
 8023d7c:	f7ff ffc0 	bl	8023d00 <mg_snprintf>
 8023d80:	e1d3      	b.n	802412a <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8023d82:	2200      	movs	r2, #0
 8023d84:	2300      	movs	r3, #0
 8023d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023d8a:	f7ec fedd 	bl	8010b48 <__aeabi_dcmpgt>
 8023d8e:	b130      	cbz	r0, 8023d9e <mg_dtoa+0x7e>
 8023d90:	4bb4      	ldr	r3, [pc, #720]	@ (8024064 <mg_dtoa+0x344>)
 8023d92:	4ab3      	ldr	r2, [pc, #716]	@ (8024060 <mg_dtoa+0x340>)
 8023d94:	9906      	ldr	r1, [sp, #24]
 8023d96:	9805      	ldr	r0, [sp, #20]
 8023d98:	f7ff ffb2 	bl	8023d00 <mg_snprintf>
 8023d9c:	e1c5      	b.n	802412a <mg_dtoa+0x40a>
 8023d9e:	4bb2      	ldr	r3, [pc, #712]	@ (8024068 <mg_dtoa+0x348>)
 8023da0:	e7f7      	b.n	8023d92 <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8023da2:	4bb2      	ldr	r3, [pc, #712]	@ (802406c <mg_dtoa+0x34c>)
 8023da4:	4aae      	ldr	r2, [pc, #696]	@ (8024060 <mg_dtoa+0x340>)
 8023da6:	9906      	ldr	r1, [sp, #24]
 8023da8:	9805      	ldr	r0, [sp, #20]
 8023daa:	f7ff ffa9 	bl	8023d00 <mg_snprintf>
 8023dae:	e1bc      	b.n	802412a <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8023db0:	4622      	mov	r2, r4
 8023db2:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8023db6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023dba:	232d      	movs	r3, #45	@ 0x2d
 8023dbc:	f88d 3020 	strb.w	r3, [sp, #32]
 8023dc0:	2701      	movs	r7, #1
 8023dc2:	e7d2      	b.n	8023d6a <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8023dc4:	2200      	movs	r2, #0
 8023dc6:	4baa      	ldr	r3, [pc, #680]	@ (8024070 <mg_dtoa+0x350>)
 8023dc8:	4620      	mov	r0, r4
 8023dca:	4629      	mov	r1, r5
 8023dcc:	f7ec fc2c 	bl	8010628 <__aeabi_dmul>
 8023dd0:	4604      	mov	r4, r0
 8023dd2:	460d      	mov	r5, r1
 8023dd4:	2200      	movs	r2, #0
 8023dd6:	4ba6      	ldr	r3, [pc, #664]	@ (8024070 <mg_dtoa+0x350>)
 8023dd8:	4650      	mov	r0, sl
 8023dda:	4659      	mov	r1, fp
 8023ddc:	f7ec feaa 	bl	8010b34 <__aeabi_dcmpge>
 8023de0:	b1b0      	cbz	r0, 8023e10 <mg_dtoa+0xf0>
 8023de2:	4622      	mov	r2, r4
 8023de4:	462b      	mov	r3, r5
 8023de6:	4650      	mov	r0, sl
 8023de8:	4659      	mov	r1, fp
 8023dea:	f7ec fd47 	bl	801087c <__aeabi_ddiv>
 8023dee:	2200      	movs	r2, #0
 8023df0:	4b9f      	ldr	r3, [pc, #636]	@ (8024070 <mg_dtoa+0x350>)
 8023df2:	f7ec fe9f 	bl	8010b34 <__aeabi_dcmpge>
 8023df6:	2800      	cmp	r0, #0
 8023df8:	d1e4      	bne.n	8023dc4 <mg_dtoa+0xa4>
 8023dfa:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8023dfe:	e007      	b.n	8023e10 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8023e00:	2200      	movs	r2, #0
 8023e02:	4b9b      	ldr	r3, [pc, #620]	@ (8024070 <mg_dtoa+0x350>)
 8023e04:	4620      	mov	r0, r4
 8023e06:	4629      	mov	r1, r5
 8023e08:	f7ec fd38 	bl	801087c <__aeabi_ddiv>
 8023e0c:	4604      	mov	r4, r0
 8023e0e:	460d      	mov	r5, r1
 8023e10:	2200      	movs	r2, #0
 8023e12:	4b91      	ldr	r3, [pc, #580]	@ (8024058 <mg_dtoa+0x338>)
 8023e14:	4650      	mov	r0, sl
 8023e16:	4659      	mov	r1, fp
 8023e18:	f7ec fe82 	bl	8010b20 <__aeabi_dcmple>
 8023e1c:	b158      	cbz	r0, 8023e36 <mg_dtoa+0x116>
 8023e1e:	4622      	mov	r2, r4
 8023e20:	462b      	mov	r3, r5
 8023e22:	4650      	mov	r0, sl
 8023e24:	4659      	mov	r1, fp
 8023e26:	f7ec fd29 	bl	801087c <__aeabi_ddiv>
 8023e2a:	2200      	movs	r2, #0
 8023e2c:	4b8a      	ldr	r3, [pc, #552]	@ (8024058 <mg_dtoa+0x338>)
 8023e2e:	f7ec fe77 	bl	8010b20 <__aeabi_dcmple>
 8023e32:	2800      	cmp	r0, #0
 8023e34:	d1e4      	bne.n	8023e00 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8023e36:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8023e3a:	2200      	movs	r2, #0
 8023e3c:	4b8d      	ldr	r3, [pc, #564]	@ (8024074 <mg_dtoa+0x354>)
 8023e3e:	4620      	mov	r0, r4
 8023e40:	4629      	mov	r1, r5
 8023e42:	f7ec fbf1 	bl	8010628 <__aeabi_dmul>
 8023e46:	4634      	mov	r4, r6
 8023e48:	e004      	b.n	8023e54 <mg_dtoa+0x134>
 8023e4a:	2200      	movs	r2, #0
 8023e4c:	4b88      	ldr	r3, [pc, #544]	@ (8024070 <mg_dtoa+0x350>)
 8023e4e:	f7ec fd15 	bl	801087c <__aeabi_ddiv>
 8023e52:	3401      	adds	r4, #1
 8023e54:	4544      	cmp	r4, r8
 8023e56:	dbf8      	blt.n	8023e4a <mg_dtoa+0x12a>
  d += t;
 8023e58:	4602      	mov	r2, r0
 8023e5a:	460b      	mov	r3, r1
 8023e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023e60:	f7ec fa2c 	bl	80102bc <__adddf3>
 8023e64:	4682      	mov	sl, r0
 8023e66:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 8023e68:	46b1      	mov	r9, r6
  mul = 1.0;
 8023e6a:	2400      	movs	r4, #0
 8023e6c:	4d7a      	ldr	r5, [pc, #488]	@ (8024058 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8023e6e:	e009      	b.n	8023e84 <mg_dtoa+0x164>
 8023e70:	2200      	movs	r2, #0
 8023e72:	4b7f      	ldr	r3, [pc, #508]	@ (8024070 <mg_dtoa+0x350>)
 8023e74:	4620      	mov	r0, r4
 8023e76:	4629      	mov	r1, r5
 8023e78:	f7ec fbd6 	bl	8010628 <__aeabi_dmul>
 8023e7c:	4604      	mov	r4, r0
 8023e7e:	460d      	mov	r5, r1
 8023e80:	f109 0901 	add.w	r9, r9, #1
 8023e84:	2200      	movs	r2, #0
 8023e86:	4b7a      	ldr	r3, [pc, #488]	@ (8024070 <mg_dtoa+0x350>)
 8023e88:	4650      	mov	r0, sl
 8023e8a:	4659      	mov	r1, fp
 8023e8c:	f7ec fe52 	bl	8010b34 <__aeabi_dcmpge>
 8023e90:	b1b0      	cbz	r0, 8023ec0 <mg_dtoa+0x1a0>
 8023e92:	4622      	mov	r2, r4
 8023e94:	462b      	mov	r3, r5
 8023e96:	4650      	mov	r0, sl
 8023e98:	4659      	mov	r1, fp
 8023e9a:	f7ec fcef 	bl	801087c <__aeabi_ddiv>
 8023e9e:	2200      	movs	r2, #0
 8023ea0:	4b73      	ldr	r3, [pc, #460]	@ (8024070 <mg_dtoa+0x350>)
 8023ea2:	f7ec fe47 	bl	8010b34 <__aeabi_dcmpge>
 8023ea6:	2800      	cmp	r0, #0
 8023ea8:	d1e2      	bne.n	8023e70 <mg_dtoa+0x150>
 8023eaa:	e009      	b.n	8023ec0 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8023eac:	2200      	movs	r2, #0
 8023eae:	4b70      	ldr	r3, [pc, #448]	@ (8024070 <mg_dtoa+0x350>)
 8023eb0:	4620      	mov	r0, r4
 8023eb2:	4629      	mov	r1, r5
 8023eb4:	f7ec fce2 	bl	801087c <__aeabi_ddiv>
 8023eb8:	4604      	mov	r4, r0
 8023eba:	460d      	mov	r5, r1
 8023ebc:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8023ec0:	2200      	movs	r2, #0
 8023ec2:	4b65      	ldr	r3, [pc, #404]	@ (8024058 <mg_dtoa+0x338>)
 8023ec4:	4650      	mov	r0, sl
 8023ec6:	4659      	mov	r1, fp
 8023ec8:	f7ec fe20 	bl	8010b0c <__aeabi_dcmplt>
 8023ecc:	b158      	cbz	r0, 8023ee6 <mg_dtoa+0x1c6>
 8023ece:	4622      	mov	r2, r4
 8023ed0:	462b      	mov	r3, r5
 8023ed2:	4650      	mov	r0, sl
 8023ed4:	4659      	mov	r1, fp
 8023ed6:	f7ec fcd1 	bl	801087c <__aeabi_ddiv>
 8023eda:	2200      	movs	r2, #0
 8023edc:	4b5e      	ldr	r3, [pc, #376]	@ (8024058 <mg_dtoa+0x338>)
 8023ede:	f7ec fe15 	bl	8010b0c <__aeabi_dcmplt>
 8023ee2:	2800      	cmp	r0, #0
 8023ee4:	d1e2      	bne.n	8023eac <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 8023ee6:	45c1      	cmp	r9, r8
 8023ee8:	db02      	blt.n	8023ef0 <mg_dtoa+0x1d0>
 8023eea:	f1b8 0f01 	cmp.w	r8, #1
 8023eee:	dc25      	bgt.n	8023f3c <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 8023ef0:	f1c8 0300 	rsb	r3, r8, #0
 8023ef4:	454b      	cmp	r3, r9
 8023ef6:	db5e      	blt.n	8023fb6 <mg_dtoa+0x296>
 8023ef8:	f1b8 0f01 	cmp.w	r8, #1
 8023efc:	dd5b      	ble.n	8023fb6 <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8023efe:	4622      	mov	r2, r4
 8023f00:	462b      	mov	r3, r5
 8023f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023f06:	f7ec fcb9 	bl	801087c <__aeabi_ddiv>
 8023f0a:	ad08      	add	r5, sp, #32
 8023f0c:	9b07      	ldr	r3, [sp, #28]
 8023f0e:	4642      	mov	r2, r8
 8023f10:	ec41 0b10 	vmov	d0, r0, r1
 8023f14:	2128      	movs	r1, #40	@ 0x28
 8023f16:	4628      	mov	r0, r5
 8023f18:	f7ff ff02 	bl	8023d20 <mg_dtoa>
 8023f1c:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 8023f1e:	1838      	adds	r0, r7, r0
 8023f20:	222d      	movs	r2, #45	@ 0x2d
 8023f22:	f1c9 0100 	rsb	r1, r9, #0
 8023f26:	4428      	add	r0, r5
 8023f28:	f7fc f982 	bl	8020230 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8023f2c:	9500      	str	r5, [sp, #0]
 8023f2e:	1823      	adds	r3, r4, r0
 8023f30:	4a51      	ldr	r2, [pc, #324]	@ (8024078 <mg_dtoa+0x358>)
 8023f32:	9906      	ldr	r1, [sp, #24]
 8023f34:	9805      	ldr	r0, [sp, #20]
 8023f36:	f7ff fee3 	bl	8023d00 <mg_snprintf>
 8023f3a:	e0f6      	b.n	802412a <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8023f3c:	4622      	mov	r2, r4
 8023f3e:	462b      	mov	r3, r5
 8023f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023f44:	f7ec fc9a 	bl	801087c <__aeabi_ddiv>
 8023f48:	ad08      	add	r5, sp, #32
 8023f4a:	9b07      	ldr	r3, [sp, #28]
 8023f4c:	4642      	mov	r2, r8
 8023f4e:	ec41 0b10 	vmov	d0, r0, r1
 8023f52:	2128      	movs	r1, #40	@ 0x28
 8023f54:	4628      	mov	r0, r5
 8023f56:	f7ff fee3 	bl	8023d20 <mg_dtoa>
 8023f5a:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 8023f5c:	1838      	adds	r0, r7, r0
 8023f5e:	222b      	movs	r2, #43	@ 0x2b
 8023f60:	4649      	mov	r1, r9
 8023f62:	4428      	add	r0, r5
 8023f64:	f7fc f964 	bl	8020230 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8023f68:	9500      	str	r5, [sp, #0]
 8023f6a:	1823      	adds	r3, r4, r0
 8023f6c:	4a42      	ldr	r2, [pc, #264]	@ (8024078 <mg_dtoa+0x358>)
 8023f6e:	9906      	ldr	r1, [sp, #24]
 8023f70:	9805      	ldr	r0, [sp, #20]
 8023f72:	f7ff fec5 	bl	8023d00 <mg_snprintf>
 8023f76:	e0d8      	b.n	802412a <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8023f78:	3601      	adds	r6, #1
 8023f7a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8023f7e:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8023f82:	eb0d 0902 	add.w	r9, sp, r2
 8023f86:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8023f8a:	f7ec fae3 	bl	8010554 <__aeabi_i2d>
 8023f8e:	4622      	mov	r2, r4
 8023f90:	462b      	mov	r3, r5
 8023f92:	f7ec fb49 	bl	8010628 <__aeabi_dmul>
 8023f96:	4602      	mov	r2, r0
 8023f98:	460b      	mov	r3, r1
 8023f9a:	4650      	mov	r0, sl
 8023f9c:	4659      	mov	r1, fp
 8023f9e:	f7ec f98b 	bl	80102b8 <__aeabi_dsub>
 8023fa2:	4682      	mov	sl, r0
 8023fa4:	468b      	mov	fp, r1
      t /= 10.0;
 8023fa6:	2200      	movs	r2, #0
 8023fa8:	4b31      	ldr	r3, [pc, #196]	@ (8024070 <mg_dtoa+0x350>)
 8023faa:	4620      	mov	r0, r4
 8023fac:	4629      	mov	r1, r5
 8023fae:	f7ec fc65 	bl	801087c <__aeabi_ddiv>
 8023fb2:	4604      	mov	r4, r0
 8023fb4:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8023fb6:	2200      	movs	r2, #0
 8023fb8:	4b27      	ldr	r3, [pc, #156]	@ (8024058 <mg_dtoa+0x338>)
 8023fba:	4620      	mov	r0, r4
 8023fbc:	4629      	mov	r1, r5
 8023fbe:	f7ec fdb9 	bl	8010b34 <__aeabi_dcmpge>
 8023fc2:	b188      	cbz	r0, 8023fe8 <mg_dtoa+0x2c8>
 8023fc4:	eb07 0906 	add.w	r9, r7, r6
 8023fc8:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8023fcc:	dc0c      	bgt.n	8023fe8 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 8023fce:	4622      	mov	r2, r4
 8023fd0:	462b      	mov	r3, r5
 8023fd2:	4650      	mov	r0, sl
 8023fd4:	4659      	mov	r1, fp
 8023fd6:	f7ec fc51 	bl	801087c <__aeabi_ddiv>
 8023fda:	f7ec fdd5 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8023fde:	2e00      	cmp	r6, #0
 8023fe0:	dcca      	bgt.n	8023f78 <mg_dtoa+0x258>
 8023fe2:	2800      	cmp	r0, #0
 8023fe4:	dcc8      	bgt.n	8023f78 <mg_dtoa+0x258>
 8023fe6:	e7d0      	b.n	8023f8a <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 8023fe8:	b9ce      	cbnz	r6, 802401e <mg_dtoa+0x2fe>
 8023fea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8023fee:	446b      	add	r3, sp
 8023ff0:	2230      	movs	r2, #48	@ 0x30
 8023ff2:	f803 2c28 	strb.w	r2, [r3, #-40]
 8023ff6:	3701      	adds	r7, #1
 8023ff8:	e011      	b.n	802401e <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8023ffa:	f106 0901 	add.w	r9, r6, #1
 8023ffe:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 8024002:	eb0d 0603 	add.w	r6, sp, r3
 8024006:	2330      	movs	r3, #48	@ 0x30
 8024008:	f806 3c28 	strb.w	r3, [r6, #-40]
 802400c:	2200      	movs	r2, #0
 802400e:	4b18      	ldr	r3, [pc, #96]	@ (8024070 <mg_dtoa+0x350>)
 8024010:	4620      	mov	r0, r4
 8024012:	4629      	mov	r1, r5
 8024014:	f7ec fc32 	bl	801087c <__aeabi_ddiv>
 8024018:	4604      	mov	r4, r0
 802401a:	460d      	mov	r5, r1
 802401c:	464e      	mov	r6, r9
 802401e:	2200      	movs	r2, #0
 8024020:	4b0d      	ldr	r3, [pc, #52]	@ (8024058 <mg_dtoa+0x338>)
 8024022:	4620      	mov	r0, r4
 8024024:	4629      	mov	r1, r5
 8024026:	f7ec fd85 	bl	8010b34 <__aeabi_dcmpge>
 802402a:	b110      	cbz	r0, 8024032 <mg_dtoa+0x312>
 802402c:	19f3      	adds	r3, r6, r7
 802402e:	2b27      	cmp	r3, #39	@ 0x27
 8024030:	dde3      	ble.n	8023ffa <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8024032:	19f3      	adds	r3, r6, r7
 8024034:	2b27      	cmp	r3, #39	@ 0x27
 8024036:	dc05      	bgt.n	8024044 <mg_dtoa+0x324>
 8024038:	3701      	adds	r7, #1
 802403a:	3348      	adds	r3, #72	@ 0x48
 802403c:	446b      	add	r3, sp
 802403e:	222e      	movs	r2, #46	@ 0x2e
 8024040:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8024044:	a502      	add	r5, pc, #8	@ (adr r5, 8024050 <mg_dtoa+0x330>)
 8024046:	e9d5 4500 	ldrd	r4, r5, [r5]
 802404a:	e03e      	b.n	80240ca <mg_dtoa+0x3aa>
 802404c:	f3af 8000 	nop.w
 8024050:	9999999a 	.word	0x9999999a
 8024054:	3fb99999 	.word	0x3fb99999
 8024058:	3ff00000 	.word	0x3ff00000
 802405c:	08039f98 	.word	0x08039f98
 8024060:	0803b87c 	.word	0x0803b87c
 8024064:	0803aca4 	.word	0x0803aca4
 8024068:	0803aca8 	.word	0x0803aca8
 802406c:	0803acb0 	.word	0x0803acb0
 8024070:	40240000 	.word	0x40240000
 8024074:	40140000 	.word	0x40140000
 8024078:	0803acb4 	.word	0x0803acb4
      int ch = (int) (d / t);
 802407c:	4622      	mov	r2, r4
 802407e:	462b      	mov	r3, r5
 8024080:	4650      	mov	r0, sl
 8024082:	4659      	mov	r1, fp
 8024084:	f7ec fbfa 	bl	801087c <__aeabi_ddiv>
 8024088:	f7ec fd7e 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 802408c:	3601      	adds	r6, #1
 802408e:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8024092:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8024096:	eb0d 0902 	add.w	r9, sp, r2
 802409a:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 802409e:	f7ec fa59 	bl	8010554 <__aeabi_i2d>
 80240a2:	4622      	mov	r2, r4
 80240a4:	462b      	mov	r3, r5
 80240a6:	f7ec fabf 	bl	8010628 <__aeabi_dmul>
 80240aa:	4602      	mov	r2, r0
 80240ac:	460b      	mov	r3, r1
 80240ae:	4650      	mov	r0, sl
 80240b0:	4659      	mov	r1, fp
 80240b2:	f7ec f901 	bl	80102b8 <__aeabi_dsub>
 80240b6:	4682      	mov	sl, r0
 80240b8:	468b      	mov	fp, r1
      t /= 10.0;
 80240ba:	2200      	movs	r2, #0
 80240bc:	4b1d      	ldr	r3, [pc, #116]	@ (8024134 <mg_dtoa+0x414>)
 80240be:	4620      	mov	r0, r4
 80240c0:	4629      	mov	r1, r5
 80240c2:	f7ec fbdb 	bl	801087c <__aeabi_ddiv>
 80240c6:	4604      	mov	r4, r0
 80240c8:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80240ca:	eb07 0906 	add.w	r9, r7, r6
 80240ce:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 80240d2:	dc03      	bgt.n	80240dc <mg_dtoa+0x3bc>
 80240d4:	4546      	cmp	r6, r8
 80240d6:	dbd1      	blt.n	802407c <mg_dtoa+0x35c>
 80240d8:	9a07      	ldr	r2, [sp, #28]
 80240da:	e000      	b.n	80240de <mg_dtoa+0x3be>
 80240dc:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 80240de:	b152      	cbz	r2, 80240f6 <mg_dtoa+0x3d6>
 80240e0:	2e00      	cmp	r6, #0
 80240e2:	dd08      	ble.n	80240f6 <mg_dtoa+0x3d6>
 80240e4:	19bb      	adds	r3, r7, r6
 80240e6:	3347      	adds	r3, #71	@ 0x47
 80240e8:	446b      	add	r3, sp
 80240ea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80240ee:	2b30      	cmp	r3, #48	@ 0x30
 80240f0:	d101      	bne.n	80240f6 <mg_dtoa+0x3d6>
 80240f2:	3e01      	subs	r6, #1
 80240f4:	e7f3      	b.n	80240de <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80240f6:	2e00      	cmp	r6, #0
 80240f8:	dd06      	ble.n	8024108 <mg_dtoa+0x3e8>
 80240fa:	19bb      	adds	r3, r7, r6
 80240fc:	3347      	adds	r3, #71	@ 0x47
 80240fe:	446b      	add	r3, sp
 8024100:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8024104:	2b2e      	cmp	r3, #46	@ 0x2e
 8024106:	d013      	beq.n	8024130 <mg_dtoa+0x410>
  n += s;
 8024108:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 802410a:	2f27      	cmp	r7, #39	@ 0x27
 802410c:	dd00      	ble.n	8024110 <mg_dtoa+0x3f0>
 802410e:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 8024110:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8024114:	eb0d 0703 	add.w	r7, sp, r3
 8024118:	2300      	movs	r3, #0
 802411a:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 802411e:	ab08      	add	r3, sp, #32
 8024120:	4a05      	ldr	r2, [pc, #20]	@ (8024138 <mg_dtoa+0x418>)
 8024122:	9906      	ldr	r1, [sp, #24]
 8024124:	9805      	ldr	r0, [sp, #20]
 8024126:	f7ff fdeb 	bl	8023d00 <mg_snprintf>
}
 802412a:	b013      	add	sp, #76	@ 0x4c
 802412c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8024130:	3e01      	subs	r6, #1
 8024132:	e7e9      	b.n	8024108 <mg_dtoa+0x3e8>
 8024134:	40240000 	.word	0x40240000
 8024138:	0803b87c 	.word	0x0803b87c

0802413c <mg_vxprintf>:
                   va_list *ap) {
 802413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024140:	b093      	sub	sp, #76	@ 0x4c
 8024142:	4681      	mov	r9, r0
 8024144:	468a      	mov	sl, r1
 8024146:	4693      	mov	fp, r2
 8024148:	9303      	str	r3, [sp, #12]
  size_t i = 0, n = 0;
 802414a:	2700      	movs	r7, #0
 802414c:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 802414e:	e1bc      	b.n	80244ca <mg_vxprintf+0x38e>
      char pad = ' ', minus = 0, c = fmt[++i];
 8024150:	2320      	movs	r3, #32
 8024152:	f88d 301f 	strb.w	r3, [sp, #31]
 8024156:	1c66      	adds	r6, r4, #1
 8024158:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 802415c:	2d23      	cmp	r5, #35	@ 0x23
 802415e:	d00c      	beq.n	802417a <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8024160:	2300      	movs	r3, #0
 8024162:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 8024164:	2d2d      	cmp	r5, #45	@ 0x2d
 8024166:	d10e      	bne.n	8024186 <mg_vxprintf+0x4a>
 8024168:	3601      	adds	r6, #1
 802416a:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802416e:	2301      	movs	r3, #1
 8024170:	9304      	str	r3, [sp, #16]
      if (c == '0') pad = '0', c = fmt[++i];
 8024172:	2d30      	cmp	r5, #48	@ 0x30
 8024174:	d00a      	beq.n	802418c <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 8024176:	2400      	movs	r4, #0
 8024178:	e017      	b.n	80241aa <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 802417a:	1ca6      	adds	r6, r4, #2
 802417c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8024180:	2301      	movs	r3, #1
 8024182:	9302      	str	r3, [sp, #8]
 8024184:	e7ee      	b.n	8024164 <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 8024186:	2300      	movs	r3, #0
 8024188:	9304      	str	r3, [sp, #16]
 802418a:	e7f2      	b.n	8024172 <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 802418c:	2330      	movs	r3, #48	@ 0x30
 802418e:	f88d 301f 	strb.w	r3, [sp, #31]
 8024192:	3601      	adds	r6, #1
 8024194:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8024198:	e7ed      	b.n	8024176 <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 802419a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 802419e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80241a2:	3c30      	subs	r4, #48	@ 0x30
 80241a4:	3601      	adds	r6, #1
 80241a6:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80241aa:	4628      	mov	r0, r5
 80241ac:	f7fc f839 	bl	8020222 <is_digit>
 80241b0:	4601      	mov	r1, r0
 80241b2:	2800      	cmp	r0, #0
 80241b4:	d1f1      	bne.n	802419a <mg_vxprintf+0x5e>
      if (c == '.') {
 80241b6:	2d2e      	cmp	r5, #46	@ 0x2e
 80241b8:	d002      	beq.n	80241c0 <mg_vxprintf+0x84>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80241ba:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80241be:	e026      	b.n	802420e <mg_vxprintf+0xd2>
        c = fmt[++i];
 80241c0:	1c73      	adds	r3, r6, #1
 80241c2:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 80241c6:	2d2a      	cmp	r5, #42	@ 0x2a
 80241c8:	d119      	bne.n	80241fe <mg_vxprintf+0xc2>
          pr = (size_t) va_arg(*ap, int);
 80241ca:	9803      	ldr	r0, [sp, #12]
 80241cc:	6803      	ldr	r3, [r0, #0]
 80241ce:	1d1a      	adds	r2, r3, #4
 80241d0:	6002      	str	r2, [r0, #0]
 80241d2:	f8d3 8000 	ldr.w	r8, [r3]
          c = fmt[++i];
 80241d6:	3602      	adds	r6, #2
 80241d8:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80241dc:	e017      	b.n	802420e <mg_vxprintf+0xd2>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 80241de:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80241e2:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 80241e6:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 80241ea:	3601      	adds	r6, #1
 80241ec:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80241f0:	4628      	mov	r0, r5
 80241f2:	f7fc f816 	bl	8020222 <is_digit>
 80241f6:	2800      	cmp	r0, #0
 80241f8:	d1f1      	bne.n	80241de <mg_vxprintf+0xa2>
 80241fa:	9905      	ldr	r1, [sp, #20]
 80241fc:	e007      	b.n	802420e <mg_vxprintf+0xd2>
          pr = 0;
 80241fe:	f04f 0800 	mov.w	r8, #0
 8024202:	461e      	mov	r6, r3
 8024204:	9005      	str	r0, [sp, #20]
 8024206:	e7f3      	b.n	80241f0 <mg_vxprintf+0xb4>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8024208:	3601      	adds	r6, #1
 802420a:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802420e:	2d68      	cmp	r5, #104	@ 0x68
 8024210:	d0fa      	beq.n	8024208 <mg_vxprintf+0xcc>
      if (c == 'l') {
 8024212:	2d6c      	cmp	r5, #108	@ 0x6c
 8024214:	d05f      	beq.n	80242d6 <mg_vxprintf+0x19a>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8024216:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 8024218:	2d70      	cmp	r5, #112	@ 0x70
 802421a:	d069      	beq.n	80242f0 <mg_vxprintf+0x1b4>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 802421c:	2d64      	cmp	r5, #100	@ 0x64
 802421e:	d06a      	beq.n	80242f6 <mg_vxprintf+0x1ba>
 8024220:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 8024224:	2b53      	cmp	r3, #83	@ 0x53
 8024226:	f200 81bc 	bhi.w	80245a2 <mg_vxprintf+0x466>
 802422a:	e8df f013 	tbh	[pc, r3, lsl #1]
 802422e:	01b5      	.short	0x01b5
 8024230:	01ba01ba 	.word	0x01ba01ba
 8024234:	01ba01ba 	.word	0x01ba01ba
 8024238:	01ba01ba 	.word	0x01ba01ba
 802423c:	01ba01ba 	.word	0x01ba01ba
 8024240:	01ba01ba 	.word	0x01ba01ba
 8024244:	01ba01ba 	.word	0x01ba01ba
 8024248:	01ba01ba 	.word	0x01ba01ba
 802424c:	01ba01ba 	.word	0x01ba01ba
 8024250:	01ba01ba 	.word	0x01ba01ba
 8024254:	01ba01ba 	.word	0x01ba01ba
 8024258:	01ba01ba 	.word	0x01ba01ba
 802425c:	01ba01ba 	.word	0x01ba01ba
 8024260:	01ba01ba 	.word	0x01ba01ba
 8024264:	01ba01ba 	.word	0x01ba01ba
 8024268:	01ba01ba 	.word	0x01ba01ba
 802426c:	01ba01ba 	.word	0x01ba01ba
 8024270:	01ba01ba 	.word	0x01ba01ba
 8024274:	01ba01ba 	.word	0x01ba01ba
 8024278:	01ba01ba 	.word	0x01ba01ba
 802427c:	014101ba 	.word	0x014101ba
 8024280:	01ba01ba 	.word	0x01ba01ba
 8024284:	01ba01ba 	.word	0x01ba01ba
 8024288:	01ba01ba 	.word	0x01ba01ba
 802428c:	01ba01ba 	.word	0x01ba01ba
 8024290:	01ba01ba 	.word	0x01ba01ba
 8024294:	01ba0065 	.word	0x01ba0065
 8024298:	01ba01ba 	.word	0x01ba01ba
 802429c:	01ba01ba 	.word	0x01ba01ba
 80242a0:	01ba01ba 	.word	0x01ba01ba
 80242a4:	01ba01ba 	.word	0x01ba01ba
 80242a8:	016801ba 	.word	0x016801ba
 80242ac:	01ba01ba 	.word	0x01ba01ba
 80242b0:	00650065 	.word	0x00650065
 80242b4:	01ba01ba 	.word	0x01ba01ba
 80242b8:	01ba01ba 	.word	0x01ba01ba
 80242bc:	015a01ba 	.word	0x015a01ba
 80242c0:	01ba01ba 	.word	0x01ba01ba
 80242c4:	01ba0065 	.word	0x01ba0065
 80242c8:	017101ba 	.word	0x017101ba
 80242cc:	006501ba 	.word	0x006501ba
 80242d0:	01ba01ba 	.word	0x01ba01ba
 80242d4:	008d      	.short	0x008d
        is_long++, c = fmt[++i];
 80242d6:	1c73      	adds	r3, r6, #1
 80242d8:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 80242dc:	2d6c      	cmp	r5, #108	@ 0x6c
 80242de:	d002      	beq.n	80242e6 <mg_vxprintf+0x1aa>
        is_long++, c = fmt[++i];
 80242e0:	461e      	mov	r6, r3
 80242e2:	2201      	movs	r2, #1
 80242e4:	e798      	b.n	8024218 <mg_vxprintf+0xdc>
        if (c == 'l') is_long++, c = fmt[++i];
 80242e6:	3602      	adds	r6, #2
 80242e8:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80242ec:	2202      	movs	r2, #2
 80242ee:	e793      	b.n	8024218 <mg_vxprintf+0xdc>
      if (c == 'p') x = 1, is_long = 1;
 80242f0:	2201      	movs	r2, #1
 80242f2:	9202      	str	r2, [sp, #8]
 80242f4:	e792      	b.n	802421c <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80242f6:	2101      	movs	r1, #1
 80242f8:	2d58      	cmp	r5, #88	@ 0x58
 80242fa:	d027      	beq.n	802434c <mg_vxprintf+0x210>
 80242fc:	2d70      	cmp	r5, #112	@ 0x70
 80242fe:	d021      	beq.n	8024344 <mg_vxprintf+0x208>
 8024300:	2300      	movs	r3, #0
 8024302:	4618      	mov	r0, r3
        size_t xl = x ? 2 : 0;
 8024304:	9b02      	ldr	r3, [sp, #8]
 8024306:	b10b      	cbz	r3, 802430c <mg_vxprintf+0x1d0>
 8024308:	2302      	movs	r3, #2
 802430a:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 802430c:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 8024310:	b2db      	uxtb	r3, r3
 8024312:	2b01      	cmp	r3, #1
 8024314:	d91c      	bls.n	8024350 <mg_vxprintf+0x214>
        } else if (is_long == 2) {
 8024316:	2a02      	cmp	r2, #2
 8024318:	d037      	beq.n	802438a <mg_vxprintf+0x24e>
        } else if (is_long == 1) {
 802431a:	2a01      	cmp	r2, #1
 802431c:	d046      	beq.n	80243ac <mg_vxprintf+0x270>
          int v = va_arg(*ap, int);
 802431e:	9b03      	ldr	r3, [sp, #12]
 8024320:	f8d3 c000 	ldr.w	ip, [r3]
 8024324:	f10c 0204 	add.w	r2, ip, #4
 8024328:	601a      	str	r2, [r3, #0]
 802432a:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 802432e:	2d64      	cmp	r5, #100	@ 0x64
 8024330:	d052      	beq.n	80243d8 <mg_vxprintf+0x29c>
 8024332:	461a      	mov	r2, r3
 8024334:	2300      	movs	r3, #0
 8024336:	9001      	str	r0, [sp, #4]
 8024338:	9100      	str	r1, [sp, #0]
 802433a:	a808      	add	r0, sp, #32
 802433c:	f7fb ffd4 	bl	80202e8 <mg_lld>
 8024340:	4605      	mov	r5, r0
 8024342:	e01c      	b.n	802437e <mg_vxprintf+0x242>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8024344:	2301      	movs	r3, #1
 8024346:	e7dc      	b.n	8024302 <mg_vxprintf+0x1c6>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8024348:	2301      	movs	r3, #1
 802434a:	e7da      	b.n	8024302 <mg_vxprintf+0x1c6>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 802434c:	2301      	movs	r3, #1
 802434e:	e7d8      	b.n	8024302 <mg_vxprintf+0x1c6>
          double v = va_arg(*ap, double);
 8024350:	9903      	ldr	r1, [sp, #12]
 8024352:	680b      	ldr	r3, [r1, #0]
 8024354:	3307      	adds	r3, #7
 8024356:	f023 0307 	bic.w	r3, r3, #7
 802435a:	f103 0208 	add.w	r2, r3, #8
 802435e:	600a      	str	r2, [r1, #0]
 8024360:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 8024364:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8024368:	d00c      	beq.n	8024384 <mg_vxprintf+0x248>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 802436a:	2d67      	cmp	r5, #103	@ 0x67
 802436c:	bf14      	ite	ne
 802436e:	2300      	movne	r3, #0
 8024370:	2301      	moveq	r3, #1
 8024372:	4642      	mov	r2, r8
 8024374:	2128      	movs	r1, #40	@ 0x28
 8024376:	a808      	add	r0, sp, #32
 8024378:	f7ff fcd2 	bl	8023d20 <mg_dtoa>
 802437c:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 802437e:	2300      	movs	r3, #0
 8024380:	9a02      	ldr	r2, [sp, #8]
 8024382:	e02e      	b.n	80243e2 <mg_vxprintf+0x2a6>
          if (pr == ~0U) pr = 6;
 8024384:	f04f 0806 	mov.w	r8, #6
 8024388:	e7ef      	b.n	802436a <mg_vxprintf+0x22e>
          int64_t v = va_arg(*ap, int64_t);
 802438a:	9d03      	ldr	r5, [sp, #12]
 802438c:	682b      	ldr	r3, [r5, #0]
 802438e:	3307      	adds	r3, #7
 8024390:	f023 0307 	bic.w	r3, r3, #7
 8024394:	f103 0208 	add.w	r2, r3, #8
 8024398:	602a      	str	r2, [r5, #0]
 802439a:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 802439e:	9001      	str	r0, [sp, #4]
 80243a0:	9100      	str	r1, [sp, #0]
 80243a2:	a808      	add	r0, sp, #32
 80243a4:	f7fb ffa0 	bl	80202e8 <mg_lld>
 80243a8:	4605      	mov	r5, r0
 80243aa:	e7e8      	b.n	802437e <mg_vxprintf+0x242>
          long v = va_arg(*ap, long);
 80243ac:	9b03      	ldr	r3, [sp, #12]
 80243ae:	f8d3 c000 	ldr.w	ip, [r3]
 80243b2:	f10c 0204 	add.w	r2, ip, #4
 80243b6:	601a      	str	r2, [r3, #0]
 80243b8:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 80243bc:	2d64      	cmp	r5, #100	@ 0x64
 80243be:	d008      	beq.n	80243d2 <mg_vxprintf+0x296>
 80243c0:	461a      	mov	r2, r3
 80243c2:	2300      	movs	r3, #0
 80243c4:	9001      	str	r0, [sp, #4]
 80243c6:	9100      	str	r1, [sp, #0]
 80243c8:	a808      	add	r0, sp, #32
 80243ca:	f7fb ff8d 	bl	80202e8 <mg_lld>
 80243ce:	4605      	mov	r5, r0
 80243d0:	e7d5      	b.n	802437e <mg_vxprintf+0x242>
 80243d2:	461a      	mov	r2, r3
 80243d4:	17db      	asrs	r3, r3, #31
 80243d6:	e7f5      	b.n	80243c4 <mg_vxprintf+0x288>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 80243d8:	461a      	mov	r2, r3
 80243da:	17db      	asrs	r3, r3, #31
 80243dc:	e7ab      	b.n	8024336 <mg_vxprintf+0x1fa>
        for (j = 0; j < xl && w > 0; j++) w--;
 80243de:	3c01      	subs	r4, #1
 80243e0:	3301      	adds	r3, #1
 80243e2:	4293      	cmp	r3, r2
 80243e4:	d225      	bcs.n	8024432 <mg_vxprintf+0x2f6>
 80243e6:	2c00      	cmp	r4, #0
 80243e8:	d1f9      	bne.n	80243de <mg_vxprintf+0x2a2>
 80243ea:	46a0      	mov	r8, r4
 80243ec:	9605      	str	r6, [sp, #20]
 80243ee:	9e04      	ldr	r6, [sp, #16]
 80243f0:	e009      	b.n	8024406 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 80243f2:	2301      	movs	r3, #1
 80243f4:	f10d 021f 	add.w	r2, sp, #31
 80243f8:	4651      	mov	r1, sl
 80243fa:	4648      	mov	r0, r9
 80243fc:	f7fc f80a 	bl	8020414 <scpy>
 8024400:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8024402:	f108 0801 	add.w	r8, r8, #1
 8024406:	f89d 301f 	ldrb.w	r3, [sp, #31]
 802440a:	2b20      	cmp	r3, #32
 802440c:	d106      	bne.n	802441c <mg_vxprintf+0x2e0>
 802440e:	b92e      	cbnz	r6, 802441c <mg_vxprintf+0x2e0>
 8024410:	42a5      	cmp	r5, r4
 8024412:	d203      	bcs.n	802441c <mg_vxprintf+0x2e0>
 8024414:	eb08 0305 	add.w	r3, r8, r5
 8024418:	42a3      	cmp	r3, r4
 802441a:	d3ea      	bcc.n	80243f2 <mg_vxprintf+0x2b6>
        n += scpy(out, param, (char *) "0x", xl);
 802441c:	9e05      	ldr	r6, [sp, #20]
 802441e:	9b02      	ldr	r3, [sp, #8]
 8024420:	4a6b      	ldr	r2, [pc, #428]	@ (80245d0 <mg_vxprintf+0x494>)
 8024422:	4651      	mov	r1, sl
 8024424:	4648      	mov	r0, r9
 8024426:	f7fb fff5 	bl	8020414 <scpy>
 802442a:	eb07 0800 	add.w	r8, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 802442e:	2700      	movs	r7, #0
 8024430:	e00d      	b.n	802444e <mg_vxprintf+0x312>
 8024432:	f04f 0800 	mov.w	r8, #0
 8024436:	9605      	str	r6, [sp, #20]
 8024438:	9e04      	ldr	r6, [sp, #16]
 802443a:	e7e4      	b.n	8024406 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 802443c:	2301      	movs	r3, #1
 802443e:	f10d 021f 	add.w	r2, sp, #31
 8024442:	4651      	mov	r1, sl
 8024444:	4648      	mov	r0, r9
 8024446:	f7fb ffe5 	bl	8020414 <scpy>
 802444a:	4480      	add	r8, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 802444c:	3701      	adds	r7, #1
 802444e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8024452:	2b30      	cmp	r3, #48	@ 0x30
 8024454:	d104      	bne.n	8024460 <mg_vxprintf+0x324>
 8024456:	42a5      	cmp	r5, r4
 8024458:	d202      	bcs.n	8024460 <mg_vxprintf+0x324>
 802445a:	197b      	adds	r3, r7, r5
 802445c:	42a3      	cmp	r3, r4
 802445e:	d3ed      	bcc.n	802443c <mg_vxprintf+0x300>
        n += scpy(out, param, tmp, k);
 8024460:	462b      	mov	r3, r5
 8024462:	aa08      	add	r2, sp, #32
 8024464:	4651      	mov	r1, sl
 8024466:	4648      	mov	r0, r9
 8024468:	f7fb ffd4 	bl	8020414 <scpy>
 802446c:	eb08 0700 	add.w	r7, r8, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8024470:	f04f 0800 	mov.w	r8, #0
 8024474:	9602      	str	r6, [sp, #8]
 8024476:	9e04      	ldr	r6, [sp, #16]
 8024478:	e009      	b.n	802448e <mg_vxprintf+0x352>
          n += scpy(out, param, &pad, 1);
 802447a:	2301      	movs	r3, #1
 802447c:	f10d 021f 	add.w	r2, sp, #31
 8024480:	4651      	mov	r1, sl
 8024482:	4648      	mov	r0, r9
 8024484:	f7fb ffc6 	bl	8020414 <scpy>
 8024488:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 802448a:	f108 0801 	add.w	r8, r8, #1
 802448e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8024492:	2b20      	cmp	r3, #32
 8024494:	f040 808d 	bne.w	80245b2 <mg_vxprintf+0x476>
 8024498:	2e00      	cmp	r6, #0
 802449a:	f000 808c 	beq.w	80245b6 <mg_vxprintf+0x47a>
 802449e:	42a5      	cmp	r5, r4
 80244a0:	f080 808b 	bcs.w	80245ba <mg_vxprintf+0x47e>
 80244a4:	eb08 0305 	add.w	r3, r8, r5
 80244a8:	42a3      	cmp	r3, r4
 80244aa:	d3e6      	bcc.n	802447a <mg_vxprintf+0x33e>
 80244ac:	9e02      	ldr	r6, [sp, #8]
 80244ae:	e00b      	b.n	80244c8 <mg_vxprintf+0x38c>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 80244b0:	9903      	ldr	r1, [sp, #12]
 80244b2:	680b      	ldr	r3, [r1, #0]
 80244b4:	1d1a      	adds	r2, r3, #4
 80244b6:	600a      	str	r2, [r1, #0]
 80244b8:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 80244ba:	9a03      	ldr	r2, [sp, #12]
 80244bc:	4651      	mov	r1, sl
 80244be:	4648      	mov	r0, r9
 80244c0:	47a0      	blx	r4
 80244c2:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 80244c4:	2d6d      	cmp	r5, #109	@ 0x6d
 80244c6:	d015      	beq.n	80244f4 <mg_vxprintf+0x3b8>
      i++;
 80244c8:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 80244ca:	f81b 0004 	ldrb.w	r0, [fp, r4]
 80244ce:	2800      	cmp	r0, #0
 80244d0:	d079      	beq.n	80245c6 <mg_vxprintf+0x48a>
    if (fmt[i] == '%') {
 80244d2:	2825      	cmp	r0, #37	@ 0x25
 80244d4:	f43f ae3c 	beq.w	8024150 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 80244d8:	4651      	mov	r1, sl
 80244da:	47c8      	blx	r9
 80244dc:	3701      	adds	r7, #1
 80244de:	3401      	adds	r4, #1
 80244e0:	e7f3      	b.n	80244ca <mg_vxprintf+0x38e>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 80244e2:	9903      	ldr	r1, [sp, #12]
 80244e4:	680b      	ldr	r3, [r1, #0]
 80244e6:	1d1a      	adds	r2, r3, #4
 80244e8:	600a      	str	r2, [r1, #0]
 80244ea:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 80244ec:	4651      	mov	r1, sl
 80244ee:	2022      	movs	r0, #34	@ 0x22
 80244f0:	47c8      	blx	r9
 80244f2:	e7e2      	b.n	80244ba <mg_vxprintf+0x37e>
        if (c == 'm') n += 2, out('"', param);
 80244f4:	3702      	adds	r7, #2
 80244f6:	4651      	mov	r1, sl
 80244f8:	2022      	movs	r0, #34	@ 0x22
 80244fa:	47c8      	blx	r9
 80244fc:	e7e4      	b.n	80244c8 <mg_vxprintf+0x38c>
        int ch = va_arg(*ap, int);
 80244fe:	9903      	ldr	r1, [sp, #12]
 8024500:	680b      	ldr	r3, [r1, #0]
 8024502:	1d1a      	adds	r2, r3, #4
 8024504:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 8024506:	4651      	mov	r1, sl
 8024508:	7818      	ldrb	r0, [r3, #0]
 802450a:	47c8      	blx	r9
        n++;
 802450c:	3701      	adds	r7, #1
 802450e:	e7db      	b.n	80244c8 <mg_vxprintf+0x38c>
        char *p = va_arg(*ap, char *);
 8024510:	9903      	ldr	r1, [sp, #12]
 8024512:	680b      	ldr	r3, [r1, #0]
 8024514:	1d1a      	adds	r2, r3, #4
 8024516:	600a      	str	r2, [r1, #0]
 8024518:	681b      	ldr	r3, [r3, #0]
 802451a:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 802451c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8024520:	d003      	beq.n	802452a <mg_vxprintf+0x3ee>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8024522:	2500      	movs	r5, #0
 8024524:	9605      	str	r6, [sp, #20]
 8024526:	9e04      	ldr	r6, [sp, #16]
 8024528:	e011      	b.n	802454e <mg_vxprintf+0x412>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 802452a:	4618      	mov	r0, r3
 802452c:	b11b      	cbz	r3, 8024536 <mg_vxprintf+0x3fa>
 802452e:	f7eb feb7 	bl	80102a0 <strlen>
 8024532:	4680      	mov	r8, r0
 8024534:	e7f5      	b.n	8024522 <mg_vxprintf+0x3e6>
 8024536:	f04f 0800 	mov.w	r8, #0
 802453a:	e7f2      	b.n	8024522 <mg_vxprintf+0x3e6>
          n += scpy(out, param, &pad, 1);
 802453c:	2301      	movs	r3, #1
 802453e:	f10d 021f 	add.w	r2, sp, #31
 8024542:	4651      	mov	r1, sl
 8024544:	4648      	mov	r0, r9
 8024546:	f7fb ff65 	bl	8020414 <scpy>
 802454a:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 802454c:	3501      	adds	r5, #1
 802454e:	b92e      	cbnz	r6, 802455c <mg_vxprintf+0x420>
 8024550:	4544      	cmp	r4, r8
 8024552:	d903      	bls.n	802455c <mg_vxprintf+0x420>
 8024554:	eb05 0308 	add.w	r3, r5, r8
 8024558:	42a3      	cmp	r3, r4
 802455a:	d3ef      	bcc.n	802453c <mg_vxprintf+0x400>
        n += scpy(out, param, p, pr);
 802455c:	9e05      	ldr	r6, [sp, #20]
 802455e:	4643      	mov	r3, r8
 8024560:	9a02      	ldr	r2, [sp, #8]
 8024562:	4651      	mov	r1, sl
 8024564:	4648      	mov	r0, r9
 8024566:	f7fb ff55 	bl	8020414 <scpy>
 802456a:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 802456c:	2500      	movs	r5, #0
 802456e:	9602      	str	r6, [sp, #8]
 8024570:	9e04      	ldr	r6, [sp, #16]
 8024572:	e008      	b.n	8024586 <mg_vxprintf+0x44a>
          n += scpy(out, param, &pad, 1);
 8024574:	2301      	movs	r3, #1
 8024576:	f10d 021f 	add.w	r2, sp, #31
 802457a:	4651      	mov	r1, sl
 802457c:	4648      	mov	r0, r9
 802457e:	f7fb ff49 	bl	8020414 <scpy>
 8024582:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8024584:	3501      	adds	r5, #1
 8024586:	b1d6      	cbz	r6, 80245be <mg_vxprintf+0x482>
 8024588:	4544      	cmp	r4, r8
 802458a:	d91a      	bls.n	80245c2 <mg_vxprintf+0x486>
 802458c:	eb05 0308 	add.w	r3, r5, r8
 8024590:	42a3      	cmp	r3, r4
 8024592:	d3ef      	bcc.n	8024574 <mg_vxprintf+0x438>
 8024594:	9e02      	ldr	r6, [sp, #8]
 8024596:	e797      	b.n	80244c8 <mg_vxprintf+0x38c>
        out('%', param);
 8024598:	4651      	mov	r1, sl
 802459a:	2025      	movs	r0, #37	@ 0x25
 802459c:	47c8      	blx	r9
        n++;
 802459e:	3701      	adds	r7, #1
 80245a0:	e792      	b.n	80244c8 <mg_vxprintf+0x38c>
        out('%', param);
 80245a2:	4651      	mov	r1, sl
 80245a4:	2025      	movs	r0, #37	@ 0x25
 80245a6:	47c8      	blx	r9
        out(c, param);
 80245a8:	4651      	mov	r1, sl
 80245aa:	4628      	mov	r0, r5
 80245ac:	47c8      	blx	r9
        n += 2;
 80245ae:	3702      	adds	r7, #2
 80245b0:	e78a      	b.n	80244c8 <mg_vxprintf+0x38c>
 80245b2:	9e02      	ldr	r6, [sp, #8]
 80245b4:	e788      	b.n	80244c8 <mg_vxprintf+0x38c>
 80245b6:	9e02      	ldr	r6, [sp, #8]
 80245b8:	e786      	b.n	80244c8 <mg_vxprintf+0x38c>
 80245ba:	9e02      	ldr	r6, [sp, #8]
 80245bc:	e784      	b.n	80244c8 <mg_vxprintf+0x38c>
 80245be:	9e02      	ldr	r6, [sp, #8]
 80245c0:	e782      	b.n	80244c8 <mg_vxprintf+0x38c>
 80245c2:	9e02      	ldr	r6, [sp, #8]
 80245c4:	e780      	b.n	80244c8 <mg_vxprintf+0x38c>
}
 80245c6:	4638      	mov	r0, r7
 80245c8:	b013      	add	sp, #76	@ 0x4c
 80245ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245ce:	bf00      	nop
 80245d0:	0803acbc 	.word	0x0803acbc

080245d4 <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 80245d4:	b40c      	push	{r2, r3}
 80245d6:	b500      	push	{lr}
 80245d8:	b083      	sub	sp, #12
 80245da:	ab04      	add	r3, sp, #16
 80245dc:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80245e0:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 80245e2:	ab01      	add	r3, sp, #4
 80245e4:	f7ff fdaa 	bl	802413c <mg_vxprintf>
}
 80245e8:	b003      	add	sp, #12
 80245ea:	f85d eb04 	ldr.w	lr, [sp], #4
 80245ee:	b002      	add	sp, #8
 80245f0:	4770      	bx	lr
	...

080245f4 <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 80245f4:	b530      	push	{r4, r5, lr}
 80245f6:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 80245f8:	7853      	ldrb	r3, [r2, #1]
 80245fa:	7894      	ldrb	r4, [r2, #2]
 80245fc:	78d5      	ldrb	r5, [r2, #3]
 80245fe:	9502      	str	r5, [sp, #8]
 8024600:	9401      	str	r4, [sp, #4]
 8024602:	9300      	str	r3, [sp, #0]
 8024604:	7813      	ldrb	r3, [r2, #0]
 8024606:	4a02      	ldr	r2, [pc, #8]	@ (8024610 <print_ip4+0x1c>)
 8024608:	f7ff ffe4 	bl	80245d4 <mg_xprintf>
}
 802460c:	b005      	add	sp, #20
 802460e:	bd30      	pop	{r4, r5, pc}
 8024610:	0803acc0 	.word	0x0803acc0

08024614 <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8024614:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 8024616:	6813      	ldr	r3, [r2, #0]
 8024618:	1d1c      	adds	r4, r3, #4
 802461a:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 802461c:	681a      	ldr	r2, [r3, #0]
 802461e:	f7ff ffe9 	bl	80245f4 <print_ip4>
}
 8024622:	bd10      	pop	{r4, pc}

08024624 <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8024624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024626:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 8024628:	6813      	ldr	r3, [r2, #0]
 802462a:	1d1c      	adds	r4, r3, #4
 802462c:	6014      	str	r4, [r2, #0]
 802462e:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8024630:	7813      	ldrb	r3, [r2, #0]
 8024632:	7854      	ldrb	r4, [r2, #1]
 8024634:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 8024636:	78d6      	ldrb	r6, [r2, #3]
 8024638:	7917      	ldrb	r7, [r2, #4]
 802463a:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 802463c:	9204      	str	r2, [sp, #16]
 802463e:	9703      	str	r7, [sp, #12]
 8024640:	9602      	str	r6, [sp, #8]
 8024642:	9501      	str	r5, [sp, #4]
 8024644:	9400      	str	r4, [sp, #0]
 8024646:	4a02      	ldr	r2, [pc, #8]	@ (8024650 <mg_print_mac+0x2c>)
 8024648:	f7ff ffc4 	bl	80245d4 <mg_xprintf>
}
 802464c:	b007      	add	sp, #28
 802464e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024650:	0803accc 	.word	0x0803accc

08024654 <mg_log>:
void mg_log(const char *fmt, ...) {
 8024654:	b40f      	push	{r0, r1, r2, r3}
 8024656:	b500      	push	{lr}
 8024658:	b083      	sub	sp, #12
 802465a:	ab04      	add	r3, sp, #16
 802465c:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8024660:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8024662:	ab01      	add	r3, sp, #4
 8024664:	4907      	ldr	r1, [pc, #28]	@ (8024684 <mg_log+0x30>)
 8024666:	6809      	ldr	r1, [r1, #0]
 8024668:	4807      	ldr	r0, [pc, #28]	@ (8024688 <mg_log+0x34>)
 802466a:	6800      	ldr	r0, [r0, #0]
 802466c:	f7ff fd66 	bl	802413c <mg_vxprintf>
  logs("\r\n", 2);
 8024670:	2102      	movs	r1, #2
 8024672:	4806      	ldr	r0, [pc, #24]	@ (802468c <mg_log+0x38>)
 8024674:	f7fc fcaa 	bl	8020fcc <logs>
}
 8024678:	b003      	add	sp, #12
 802467a:	f85d eb04 	ldr.w	lr, [sp], #4
 802467e:	b004      	add	sp, #16
 8024680:	4770      	bx	lr
 8024682:	bf00      	nop
 8024684:	20019f80 	.word	0x20019f80
 8024688:	20000128 	.word	0x20000128
 802468c:	0803b6e0 	.word	0x0803b6e0

08024690 <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8024690:	b538      	push	{r3, r4, r5, lr}
 8024692:	4604      	mov	r4, r0
 8024694:	4613      	mov	r3, r2
  size_t old = c->send.len;
 8024696:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8024698:	460a      	mov	r2, r1
 802469a:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 802469e:	4803      	ldr	r0, [pc, #12]	@ (80246ac <mg_vprintf+0x1c>)
 80246a0:	f7ff fd4c 	bl	802413c <mg_vxprintf>
  return c->send.len - old;
 80246a4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 80246a6:	1b40      	subs	r0, r0, r5
 80246a8:	bd38      	pop	{r3, r4, r5, pc}
 80246aa:	bf00      	nop
 80246ac:	080277c7 	.word	0x080277c7

080246b0 <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 80246b0:	b40e      	push	{r1, r2, r3}
 80246b2:	b500      	push	{lr}
 80246b4:	b082      	sub	sp, #8
 80246b6:	ab03      	add	r3, sp, #12
 80246b8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 80246bc:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 80246be:	aa01      	add	r2, sp, #4
 80246c0:	f7ff ffe6 	bl	8024690 <mg_vprintf>
}
 80246c4:	b002      	add	sp, #8
 80246c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80246ca:	b003      	add	sp, #12
 80246cc:	4770      	bx	lr
	...

080246d0 <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 80246d0:	b530      	push	{r4, r5, lr}
 80246d2:	b085      	sub	sp, #20
 80246d4:	4605      	mov	r5, r0
 80246d6:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 80246d8:	9000      	str	r0, [sp, #0]
 80246da:	9101      	str	r1, [sp, #4]
 80246dc:	2100      	movs	r1, #0
 80246de:	9102      	str	r1, [sp, #8]
 80246e0:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 80246e2:	4669      	mov	r1, sp
 80246e4:	4804      	ldr	r0, [pc, #16]	@ (80246f8 <mg_vsnprintf+0x28>)
 80246e6:	f7ff fd29 	bl	802413c <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 80246ea:	4284      	cmp	r4, r0
 80246ec:	d901      	bls.n	80246f2 <mg_vsnprintf+0x22>
 80246ee:	2300      	movs	r3, #0
 80246f0:	542b      	strb	r3, [r5, r0]
}
 80246f2:	b005      	add	sp, #20
 80246f4:	bd30      	pop	{r4, r5, pc}
 80246f6:	bf00      	nop
 80246f8:	080277d1 	.word	0x080277d1

080246fc <mg_http_reply>:
                   const char *fmt, ...) {
 80246fc:	b408      	push	{r3}
 80246fe:	b570      	push	{r4, r5, r6, lr}
 8024700:	b085      	sub	sp, #20
 8024702:	4604      	mov	r4, r0
 8024704:	460e      	mov	r6, r1
 8024706:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8024708:	4608      	mov	r0, r1
 802470a:	f7fb ffcf 	bl	80206ac <mg_http_status_code_str>
 802470e:	4603      	mov	r3, r0
 8024710:	b1ed      	cbz	r5, 802474e <mg_http_reply+0x52>
 8024712:	9500      	str	r5, [sp, #0]
 8024714:	4632      	mov	r2, r6
 8024716:	4916      	ldr	r1, [pc, #88]	@ (8024770 <mg_http_reply+0x74>)
 8024718:	4620      	mov	r0, r4
 802471a:	f7ff ffc9 	bl	80246b0 <mg_printf>
  len = c->send.len;
 802471e:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 8024720:	ab0a      	add	r3, sp, #40	@ 0x28
 8024722:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8024724:	ab03      	add	r3, sp, #12
 8024726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024728:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 802472c:	4811      	ldr	r0, [pc, #68]	@ (8024774 <mg_http_reply+0x78>)
 802472e:	f7ff fd05 	bl	802413c <mg_vxprintf>
  if (c->send.len > 16) {
 8024732:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8024734:	2b10      	cmp	r3, #16
 8024736:	d80c      	bhi.n	8024752 <mg_http_reply+0x56>
  c->is_resp = 0;
 8024738:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802473c:	f36f 13c7 	bfc	r3, #7, #1
 8024740:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8024744:	b005      	add	sp, #20
 8024746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802474a:	b001      	add	sp, #4
 802474c:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 802474e:	4d0a      	ldr	r5, [pc, #40]	@ (8024778 <mg_http_reply+0x7c>)
 8024750:	e7df      	b.n	8024712 <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8024752:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 8024754:	f1a5 000f 	sub.w	r0, r5, #15
 8024758:	1b5b      	subs	r3, r3, r5
 802475a:	4a08      	ldr	r2, [pc, #32]	@ (802477c <mg_http_reply+0x80>)
 802475c:	210b      	movs	r1, #11
 802475e:	4430      	add	r0, r6
 8024760:	f7ff face 	bl	8023d00 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8024764:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8024766:	4405      	add	r5, r0
 8024768:	3d0f      	subs	r5, #15
 802476a:	2220      	movs	r2, #32
 802476c:	555a      	strb	r2, [r3, r5]
 802476e:	e7e3      	b.n	8024738 <mg_http_reply+0x3c>
 8024770:	0803acec 	.word	0x0803acec
 8024774:	080277c7 	.word	0x080277c7
 8024778:	08037490 	.word	0x08037490
 802477c:	0803ad20 	.word	0x0803ad20

08024780 <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8024780:	b510      	push	{r4, lr}
 8024782:	b084      	sub	sp, #16
 8024784:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8024786:	9202      	str	r2, [sp, #8]
 8024788:	2300      	movs	r3, #0
 802478a:	9303      	str	r3, [sp, #12]
 802478c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024790:	e9cd 2300 	strd	r2, r3, [sp]
 8024794:	4a02      	ldr	r2, [pc, #8]	@ (80247a0 <mg_http_etag+0x20>)
 8024796:	f7ff fab3 	bl	8023d00 <mg_snprintf>
}
 802479a:	4620      	mov	r0, r4
 802479c:	b004      	add	sp, #16
 802479e:	bd10      	pop	{r4, pc}
 80247a0:	0803ad28 	.word	0x0803ad28

080247a4 <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 80247a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247a8:	b083      	sub	sp, #12
 80247aa:	4607      	mov	r7, r0
 80247ac:	4689      	mov	r9, r1
 80247ae:	4692      	mov	sl, r2
 80247b0:	4698      	mov	r8, r3
  size_t i, n = 0;
 80247b2:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 80247b4:	462c      	mov	r4, r5
 80247b6:	e00c      	b.n	80247d2 <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 80247b8:	f8cd b004 	str.w	fp, [sp, #4]
 80247bc:	2301      	movs	r3, #1
 80247be:	9300      	str	r3, [sp, #0]
 80247c0:	4b16      	ldr	r3, [pc, #88]	@ (802481c <mg_url_encode+0x78>)
 80247c2:	4a17      	ldr	r2, [pc, #92]	@ (8024820 <mg_url_encode+0x7c>)
 80247c4:	2104      	movs	r1, #4
 80247c6:	eb0a 0005 	add.w	r0, sl, r5
 80247ca:	f7ff fa99 	bl	8023d00 <mg_snprintf>
      n += 3;
 80247ce:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 80247d0:	3401      	adds	r4, #1
 80247d2:	454c      	cmp	r4, r9
 80247d4:	d20e      	bcs.n	80247f4 <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 80247d6:	eb07 0b04 	add.w	fp, r7, r4
 80247da:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 80247dc:	1d2b      	adds	r3, r5, #4
 80247de:	4543      	cmp	r3, r8
 80247e0:	d216      	bcs.n	8024810 <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 80247e2:	4630      	mov	r0, r6
 80247e4:	f7fc fa5e 	bl	8020ca4 <mg_is_url_safe>
 80247e8:	2800      	cmp	r0, #0
 80247ea:	d0e5      	beq.n	80247b8 <mg_url_encode+0x14>
      buf[n++] = s[i];
 80247ec:	f80a 6005 	strb.w	r6, [sl, r5]
 80247f0:	3501      	adds	r5, #1
 80247f2:	e7ed      	b.n	80247d0 <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 80247f4:	f1b8 0f00 	cmp.w	r8, #0
 80247f8:	d00b      	beq.n	8024812 <mg_url_encode+0x6e>
 80247fa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80247fe:	45a8      	cmp	r8, r5
 8024800:	d902      	bls.n	8024808 <mg_url_encode+0x64>
 8024802:	2300      	movs	r3, #0
 8024804:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8024808:	2300      	movs	r3, #0
 802480a:	f80a 3008 	strb.w	r3, [sl, r8]
 802480e:	e000      	b.n	8024812 <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 8024810:	2500      	movs	r5, #0
}
 8024812:	4628      	mov	r0, r5
 8024814:	b003      	add	sp, #12
 8024816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802481a:	bf00      	nop
 802481c:	08021a01 	.word	0x08021a01
 8024820:	0803ad34 	.word	0x0803ad34

08024824 <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 8024824:	b510      	push	{r4, lr}
 8024826:	b084      	sub	sp, #16
 8024828:	4602      	mov	r2, r0
 802482a:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 802482c:	2400      	movs	r4, #0
 802482e:	9400      	str	r4, [sp, #0]
 8024830:	9401      	str	r4, [sp, #4]
 8024832:	9402      	str	r4, [sp, #8]
 8024834:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8024838:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 802483a:	4669      	mov	r1, sp
 802483c:	4802      	ldr	r0, [pc, #8]	@ (8024848 <mg_vmprintf+0x24>)
 802483e:	f7ff fc7d 	bl	802413c <mg_vxprintf>
}
 8024842:	9800      	ldr	r0, [sp, #0]
 8024844:	b004      	add	sp, #16
 8024846:	bd10      	pop	{r4, pc}
 8024848:	080277c7 	.word	0x080277c7

0802484c <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 802484c:	b40f      	push	{r0, r1, r2, r3}
 802484e:	b500      	push	{lr}
 8024850:	b083      	sub	sp, #12
 8024852:	ab04      	add	r3, sp, #16
 8024854:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 8024858:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 802485a:	a901      	add	r1, sp, #4
 802485c:	f7ff ffe2 	bl	8024824 <mg_vmprintf>
}
 8024860:	b003      	add	sp, #12
 8024862:	f85d eb04 	ldr.w	lr, [sp], #4
 8024866:	b004      	add	sp, #16
 8024868:	4770      	bx	lr

0802486a <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 802486a:	b538      	push	{r3, r4, r5, lr}
 802486c:	4604      	mov	r4, r0
 802486e:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 8024870:	6882      	ldr	r2, [r0, #8]
 8024872:	68c3      	ldr	r3, [r0, #12]
 8024874:	429a      	cmp	r2, r3
 8024876:	d107      	bne.n	8024888 <mg_queue_next+0x1e>
  size_t len = 0;
 8024878:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 802487a:	b125      	cbz	r5, 8024886 <mg_queue_next+0x1c>
 802487c:	6823      	ldr	r3, [r4, #0]
 802487e:	68a2      	ldr	r2, [r4, #8]
 8024880:	3204      	adds	r2, #4
 8024882:	4413      	add	r3, r2
 8024884:	602b      	str	r3, [r5, #0]
}
 8024886:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 8024888:	f7fe fb69 	bl	8022f5e <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 802488c:	2800      	cmp	r0, #0
 802488e:	d1f4      	bne.n	802487a <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 8024890:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8024892:	68e2      	ldr	r2, [r4, #12]
 8024894:	68a3      	ldr	r3, [r4, #8]
 8024896:	429a      	cmp	r2, r3
 8024898:	d9ef      	bls.n	802487a <mg_queue_next+0x10>
 802489a:	4620      	mov	r0, r4
 802489c:	f7fe fb5f 	bl	8022f5e <mg_queue_read_len>
 80248a0:	e7eb      	b.n	802487a <mg_queue_next+0x10>

080248a2 <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 80248a2:	6883      	ldr	r3, [r0, #8]
 80248a4:	440b      	add	r3, r1
 80248a6:	3304      	adds	r3, #4
 80248a8:	6083      	str	r3, [r0, #8]
}
 80248aa:	4770      	bx	lr

080248ac <mg_sha1_init>:
  context->state[0] = 0x67452301;
 80248ac:	4b0a      	ldr	r3, [pc, #40]	@ (80248d8 <mg_sha1_init+0x2c>)
 80248ae:	6003      	str	r3, [r0, #0]
  context->state[1] = 0xEFCDAB89;
 80248b0:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 80248b4:	6043      	str	r3, [r0, #4]
  context->state[2] = 0x98BADCFE;
 80248b6:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 80248ba:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 80248be:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 80248c2:	6083      	str	r3, [r0, #8]
  context->state[3] = 0x10325476;
 80248c4:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 80248c8:	60c3      	str	r3, [r0, #12]
  context->state[4] = 0xC3D2E1F0;
 80248ca:	4b04      	ldr	r3, [pc, #16]	@ (80248dc <mg_sha1_init+0x30>)
 80248cc:	6103      	str	r3, [r0, #16]
  context->count[0] = context->count[1] = 0;
 80248ce:	2300      	movs	r3, #0
 80248d0:	6183      	str	r3, [r0, #24]
 80248d2:	6143      	str	r3, [r0, #20]
}
 80248d4:	4770      	bx	lr
 80248d6:	bf00      	nop
 80248d8:	67452301 	.word	0x67452301
 80248dc:	c3d2e1f0 	.word	0xc3d2e1f0

080248e0 <mg_sha1_update>:
                    size_t len) {
 80248e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248e2:	4604      	mov	r4, r0
 80248e4:	460f      	mov	r7, r1
 80248e6:	4616      	mov	r6, r2
  j = context->count[0];
 80248e8:	6943      	ldr	r3, [r0, #20]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 80248ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80248ee:	6142      	str	r2, [r0, #20]
 80248f0:	429a      	cmp	r2, r3
 80248f2:	d202      	bcs.n	80248fa <mg_sha1_update+0x1a>
 80248f4:	6982      	ldr	r2, [r0, #24]
 80248f6:	3201      	adds	r2, #1
 80248f8:	6182      	str	r2, [r0, #24]
  context->count[1] += (uint32_t) (len >> 29);
 80248fa:	69a2      	ldr	r2, [r4, #24]
 80248fc:	eb02 7256 	add.w	r2, r2, r6, lsr #29
 8024900:	61a2      	str	r2, [r4, #24]
  j = (j >> 3) & 63;
 8024902:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  if ((j + len) > 63) {
 8024906:	18f2      	adds	r2, r6, r3
 8024908:	2a3f      	cmp	r2, #63	@ 0x3f
 802490a:	d808      	bhi.n	802491e <mg_sha1_update+0x3e>
    i = 0;
 802490c:	2500      	movs	r5, #0
  memcpy(&context->buffer[j], &data[i], len - i);
 802490e:	3318      	adds	r3, #24
 8024910:	18e0      	adds	r0, r4, r3
 8024912:	1b72      	subs	r2, r6, r5
 8024914:	1979      	adds	r1, r7, r5
 8024916:	3004      	adds	r0, #4
 8024918:	f009 fe26 	bl	802e568 <memcpy>
}
 802491c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(&context->buffer[j], data, (i = 64 - j));
 802491e:	f103 0018 	add.w	r0, r3, #24
 8024922:	4420      	add	r0, r4
 8024924:	f1c3 0540 	rsb	r5, r3, #64	@ 0x40
 8024928:	462a      	mov	r2, r5
 802492a:	4639      	mov	r1, r7
 802492c:	3004      	adds	r0, #4
 802492e:	f009 fe1b 	bl	802e568 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 8024932:	f104 011c 	add.w	r1, r4, #28
 8024936:	4620      	mov	r0, r4
 8024938:	f7fd faee 	bl	8021f18 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 802493c:	e004      	b.n	8024948 <mg_sha1_update+0x68>
      mg_sha1_transform(context->state, &data[i]);
 802493e:	1979      	adds	r1, r7, r5
 8024940:	4620      	mov	r0, r4
 8024942:	f7fd fae9 	bl	8021f18 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8024946:	3540      	adds	r5, #64	@ 0x40
 8024948:	f105 033f 	add.w	r3, r5, #63	@ 0x3f
 802494c:	42b3      	cmp	r3, r6
 802494e:	d3f6      	bcc.n	802493e <mg_sha1_update+0x5e>
    j = 0;
 8024950:	2300      	movs	r3, #0
 8024952:	e7dc      	b.n	802490e <mg_sha1_update+0x2e>

08024954 <mg_sha1_final>:
void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 8024954:	b570      	push	{r4, r5, r6, lr}
 8024956:	b084      	sub	sp, #16
 8024958:	4606      	mov	r6, r0
 802495a:	460d      	mov	r5, r1
  for (i = 0; i < 8; i++) {
 802495c:	2300      	movs	r3, #0
 802495e:	e013      	b.n	8024988 <mg_sha1_final+0x34>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8024960:	2b03      	cmp	r3, #3
 8024962:	bf8c      	ite	hi
 8024964:	2200      	movhi	r2, #0
 8024966:	2201      	movls	r2, #1
 8024968:	3204      	adds	r2, #4
 802496a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 802496e:	6851      	ldr	r1, [r2, #4]
                                      ((3 - (i & 3)) * 8)) &
 8024970:	43da      	mvns	r2, r3
 8024972:	f002 0203 	and.w	r2, r2, #3
 8024976:	00d2      	lsls	r2, r2, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8024978:	fa21 f202 	lsr.w	r2, r1, r2
 802497c:	f103 0110 	add.w	r1, r3, #16
 8024980:	4469      	add	r1, sp
 8024982:	f801 2c08 	strb.w	r2, [r1, #-8]
  for (i = 0; i < 8; i++) {
 8024986:	3301      	adds	r3, #1
 8024988:	2b07      	cmp	r3, #7
 802498a:	d9e9      	bls.n	8024960 <mg_sha1_final+0xc>
  c = 0200;
 802498c:	2380      	movs	r3, #128	@ 0x80
 802498e:	f88d 3007 	strb.w	r3, [sp, #7]
  mg_sha1_update(context, &c, 1);
 8024992:	2201      	movs	r2, #1
 8024994:	f10d 0107 	add.w	r1, sp, #7
 8024998:	4628      	mov	r0, r5
 802499a:	f7ff ffa1 	bl	80248e0 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 802499e:	e008      	b.n	80249b2 <mg_sha1_final+0x5e>
    c = 0000;
 80249a0:	2300      	movs	r3, #0
 80249a2:	f88d 3007 	strb.w	r3, [sp, #7]
    mg_sha1_update(context, &c, 1);
 80249a6:	2201      	movs	r2, #1
 80249a8:	f10d 0107 	add.w	r1, sp, #7
 80249ac:	4628      	mov	r0, r5
 80249ae:	f7ff ff97 	bl	80248e0 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 80249b2:	696b      	ldr	r3, [r5, #20]
 80249b4:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 80249b8:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80249bc:	d1f0      	bne.n	80249a0 <mg_sha1_final+0x4c>
  mg_sha1_update(context, finalcount, 8);
 80249be:	2208      	movs	r2, #8
 80249c0:	eb0d 0102 	add.w	r1, sp, r2
 80249c4:	4628      	mov	r0, r5
 80249c6:	f7ff ff8b 	bl	80248e0 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 80249ca:	2300      	movs	r3, #0
 80249cc:	e00a      	b.n	80249e4 <mg_sha1_final+0x90>
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 80249ce:	089a      	lsrs	r2, r3, #2
 80249d0:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 80249d4:	43da      	mvns	r2, r3
 80249d6:	f002 0203 	and.w	r2, r2, #3
 80249da:	00d2      	lsls	r2, r2, #3
 80249dc:	fa24 f202 	lsr.w	r2, r4, r2
    digest[i] =
 80249e0:	54f2      	strb	r2, [r6, r3]
  for (i = 0; i < 20; i++) {
 80249e2:	3301      	adds	r3, #1
 80249e4:	2b13      	cmp	r3, #19
 80249e6:	d9f2      	bls.n	80249ce <mg_sha1_final+0x7a>
  memset(context, '\0', sizeof(*context));
 80249e8:	225c      	movs	r2, #92	@ 0x5c
 80249ea:	2100      	movs	r1, #0
 80249ec:	4628      	mov	r0, r5
 80249ee:	f008 fb7f 	bl	802d0f0 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 80249f2:	2300      	movs	r3, #0
 80249f4:	9302      	str	r3, [sp, #8]
 80249f6:	9303      	str	r3, [sp, #12]
}
 80249f8:	b004      	add	sp, #16
 80249fa:	bd70      	pop	{r4, r5, r6, pc}

080249fc <mg_http_serve_ssi>:
                       const char *fullpath) {
 80249fc:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 80249fe:	4b03      	ldr	r3, [pc, #12]	@ (8024a0c <mg_http_serve_ssi+0x10>)
 8024a00:	2200      	movs	r2, #0
 8024a02:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8024a06:	f7ff fe79 	bl	80246fc <mg_http_reply>
}
 8024a0a:	bd08      	pop	{r3, pc}
 8024a0c:	0803ad3c 	.word	0x0803ad3c

08024a10 <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 8024a10:	b510      	push	{r4, lr}
 8024a12:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8024a14:	6001      	str	r1, [r0, #0]
 8024a16:	b129      	cbz	r1, 8024a24 <mg_str_s+0x14>
 8024a18:	4608      	mov	r0, r1
 8024a1a:	f7eb fc41 	bl	80102a0 <strlen>
 8024a1e:	6060      	str	r0, [r4, #4]
}
 8024a20:	4620      	mov	r0, r4
 8024a22:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8024a24:	2000      	movs	r0, #0
 8024a26:	e7fa      	b.n	8024a1e <mg_str_s+0xe>

08024a28 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 8024a28:	6001      	str	r1, [r0, #0]
 8024a2a:	6042      	str	r2, [r0, #4]
}
 8024a2c:	4770      	bx	lr

08024a2e <stripquotes>:
static struct mg_str stripquotes(struct mg_str s) {
 8024a2e:	b510      	push	{r4, lr}
 8024a30:	b082      	sub	sp, #8
 8024a32:	4604      	mov	r4, r0
 8024a34:	ab02      	add	r3, sp, #8
 8024a36:	e903 0006 	stmdb	r3, {r1, r2}
             : s;
 8024a3a:	2a01      	cmp	r2, #1
 8024a3c:	d902      	bls.n	8024a44 <stripquotes+0x16>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 8024a3e:	780b      	ldrb	r3, [r1, #0]
 8024a40:	2b22      	cmp	r3, #34	@ 0x22
 8024a42:	d007      	beq.n	8024a54 <stripquotes+0x26>
             : s;
 8024a44:	ab02      	add	r3, sp, #8
 8024a46:	e913 0003 	ldmdb	r3, {r0, r1}
 8024a4a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8024a4e:	4620      	mov	r0, r4
 8024a50:	b002      	add	sp, #8
 8024a52:	bd10      	pop	{r4, pc}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 8024a54:	188b      	adds	r3, r1, r2
 8024a56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8024a5a:	2b22      	cmp	r3, #34	@ 0x22
 8024a5c:	d1f2      	bne.n	8024a44 <stripquotes+0x16>
             ? mg_str_n(s.buf + 1, s.len - 2)
 8024a5e:	3a02      	subs	r2, #2
 8024a60:	3101      	adds	r1, #1
 8024a62:	f7ff ffe1 	bl	8024a28 <mg_str_n>
             : s;
 8024a66:	e7f2      	b.n	8024a4e <stripquotes+0x20>

08024a68 <mg_http_get_header_var>:
struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 8024a68:	b082      	sub	sp, #8
 8024a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a6e:	b084      	sub	sp, #16
 8024a70:	4680      	mov	r8, r0
 8024a72:	4668      	mov	r0, sp
 8024a74:	e880 0006 	stmia.w	r0, {r1, r2}
 8024a78:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8024a7a:	2400      	movs	r4, #0
 8024a7c:	e01f      	b.n	8024abe <mg_http_get_header_var+0x56>
      int q = p < x && *p == '"' ? 1 : 0;
 8024a7e:	2201      	movs	r2, #1
 8024a80:	e037      	b.n	8024af2 <mg_http_get_header_var+0x8a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8024a82:	7818      	ldrb	r0, [r3, #0]
 8024a84:	283b      	cmp	r0, #59	@ 0x3b
 8024a86:	d00d      	beq.n	8024aa4 <mg_http_get_header_var+0x3c>
 8024a88:	2820      	cmp	r0, #32
 8024a8a:	d00b      	beq.n	8024aa4 <mg_http_get_header_var+0x3c>
 8024a8c:	282c      	cmp	r0, #44	@ 0x2c
 8024a8e:	d009      	beq.n	8024aa4 <mg_http_get_header_var+0x3c>
        p++;
 8024a90:	3301      	adds	r3, #1
      while (p < x &&
 8024a92:	42bb      	cmp	r3, r7
 8024a94:	d206      	bcs.n	8024aa4 <mg_http_get_header_var+0x3c>
 8024a96:	2a00      	cmp	r2, #0
 8024a98:	d0f3      	beq.n	8024a82 <mg_http_get_header_var+0x1a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8024a9a:	428b      	cmp	r3, r1
 8024a9c:	d0f8      	beq.n	8024a90 <mg_http_get_header_var+0x28>
 8024a9e:	7818      	ldrb	r0, [r3, #0]
 8024aa0:	2822      	cmp	r0, #34	@ 0x22
 8024aa2:	d1f5      	bne.n	8024a90 <mg_http_get_header_var+0x28>
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8024aa4:	1a5b      	subs	r3, r3, r1
 8024aa6:	ac02      	add	r4, sp, #8
 8024aa8:	441a      	add	r2, r3
 8024aaa:	4620      	mov	r0, r4
 8024aac:	f7ff ffbc 	bl	8024a28 <mg_str_n>
 8024ab0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8024ab4:	4640      	mov	r0, r8
 8024ab6:	f7ff ffba 	bl	8024a2e <stripquotes>
 8024aba:	e021      	b.n	8024b00 <mg_http_get_header_var+0x98>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8024abc:	3401      	adds	r4, #1
 8024abe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024ac0:	b1ca      	cbz	r2, 8024af6 <mg_http_get_header_var+0x8e>
 8024ac2:	1915      	adds	r5, r2, r4
 8024ac4:	1cab      	adds	r3, r5, #2
 8024ac6:	9f01      	ldr	r7, [sp, #4]
 8024ac8:	42bb      	cmp	r3, r7
 8024aca:	d214      	bcs.n	8024af6 <mg_http_get_header_var+0x8e>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 8024acc:	9e00      	ldr	r6, [sp, #0]
 8024ace:	5d73      	ldrb	r3, [r6, r5]
 8024ad0:	2b3d      	cmp	r3, #61	@ 0x3d
 8024ad2:	d1f3      	bne.n	8024abc <mg_http_get_header_var+0x54>
 8024ad4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024ad6:	1930      	adds	r0, r6, r4
 8024ad8:	f008 fa76 	bl	802cfc8 <memcmp>
 8024adc:	4602      	mov	r2, r0
 8024ade:	2800      	cmp	r0, #0
 8024ae0:	d1ec      	bne.n	8024abc <mg_http_get_header_var+0x54>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8024ae2:	3501      	adds	r5, #1
 8024ae4:	1971      	adds	r1, r6, r5
 8024ae6:	4437      	add	r7, r6
      int q = p < x && *p == '"' ? 1 : 0;
 8024ae8:	42b9      	cmp	r1, r7
 8024aea:	d202      	bcs.n	8024af2 <mg_http_get_header_var+0x8a>
 8024aec:	5d73      	ldrb	r3, [r6, r5]
 8024aee:	2b22      	cmp	r3, #34	@ 0x22
 8024af0:	d0c5      	beq.n	8024a7e <mg_http_get_header_var+0x16>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8024af2:	460b      	mov	r3, r1
      while (p < x &&
 8024af4:	e7cd      	b.n	8024a92 <mg_http_get_header_var+0x2a>
  return mg_str_n(NULL, 0);
 8024af6:	2200      	movs	r2, #0
 8024af8:	4611      	mov	r1, r2
 8024afa:	4640      	mov	r0, r8
 8024afc:	f7ff ff94 	bl	8024a28 <mg_str_n>
}
 8024b00:	4640      	mov	r0, r8
 8024b02:	b004      	add	sp, #16
 8024b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024b08:	b002      	add	sp, #8
 8024b0a:	4770      	bx	lr

08024b0c <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 8024b0c:	b530      	push	{r4, r5, lr}
 8024b0e:	b085      	sub	sp, #20
 8024b10:	466b      	mov	r3, sp
 8024b12:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 8024b16:	290d      	cmp	r1, #13
 8024b18:	d930      	bls.n	8024b7c <mg_v4mapped+0x70>
 8024b1a:	4614      	mov	r4, r2
 8024b1c:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8024b1e:	4601      	mov	r1, r0
 8024b20:	7802      	ldrb	r2, [r0, #0]
 8024b22:	2a3a      	cmp	r2, #58	@ 0x3a
 8024b24:	d12d      	bne.n	8024b82 <mg_v4mapped+0x76>
 8024b26:	7842      	ldrb	r2, [r0, #1]
 8024b28:	2a3a      	cmp	r2, #58	@ 0x3a
 8024b2a:	d12c      	bne.n	8024b86 <mg_v4mapped+0x7a>
 8024b2c:	7982      	ldrb	r2, [r0, #6]
 8024b2e:	2a3a      	cmp	r2, #58	@ 0x3a
 8024b30:	d12b      	bne.n	8024b8a <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 8024b32:	2202      	movs	r2, #2
 8024b34:	e000      	b.n	8024b38 <mg_v4mapped+0x2c>
 8024b36:	3201      	adds	r2, #1
 8024b38:	2a05      	cmp	r2, #5
 8024b3a:	dc06      	bgt.n	8024b4a <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 8024b3c:	5c88      	ldrb	r0, [r1, r2]
 8024b3e:	2866      	cmp	r0, #102	@ 0x66
 8024b40:	d0f9      	beq.n	8024b36 <mg_v4mapped+0x2a>
 8024b42:	2846      	cmp	r0, #70	@ 0x46
 8024b44:	d0f7      	beq.n	8024b36 <mg_v4mapped+0x2a>
 8024b46:	2000      	movs	r0, #0
 8024b48:	e019      	b.n	8024b7e <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 8024b4a:	ad02      	add	r5, sp, #8
 8024b4c:	1fda      	subs	r2, r3, #7
 8024b4e:	3107      	adds	r1, #7
 8024b50:	4628      	mov	r0, r5
 8024b52:	f7ff ff69 	bl	8024a28 <mg_str_n>
 8024b56:	4622      	mov	r2, r4
 8024b58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024b5c:	f7fc fe7a 	bl	8021854 <mg_aton4>
 8024b60:	b168      	cbz	r0, 8024b7e <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 8024b62:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 8024b64:	2300      	movs	r3, #0
 8024b66:	6023      	str	r3, [r4, #0]
 8024b68:	6063      	str	r3, [r4, #4]
 8024b6a:	60a3      	str	r3, [r4, #8]
 8024b6c:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 8024b6e:	23ff      	movs	r3, #255	@ 0xff
 8024b70:	72e3      	strb	r3, [r4, #11]
 8024b72:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 8024b74:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 8024b76:	2301      	movs	r3, #1
 8024b78:	74e3      	strb	r3, [r4, #19]
  return true;
 8024b7a:	e000      	b.n	8024b7e <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 8024b7c:	2000      	movs	r0, #0
}
 8024b7e:	b005      	add	sp, #20
 8024b80:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8024b82:	2000      	movs	r0, #0
 8024b84:	e7fb      	b.n	8024b7e <mg_v4mapped+0x72>
 8024b86:	2000      	movs	r0, #0
 8024b88:	e7f9      	b.n	8024b7e <mg_v4mapped+0x72>
 8024b8a:	2000      	movs	r0, #0
 8024b8c:	e7f7      	b.n	8024b7e <mg_v4mapped+0x72>

08024b8e <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 8024b8e:	b530      	push	{r4, r5, lr}
 8024b90:	b083      	sub	sp, #12
 8024b92:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8024b94:	6803      	ldr	r3, [r0, #0]
 8024b96:	6842      	ldr	r2, [r0, #4]
 8024b98:	441a      	add	r2, r3
 8024b9a:	466d      	mov	r5, sp
 8024b9c:	1a52      	subs	r2, r2, r1
 8024b9e:	4628      	mov	r0, r5
 8024ba0:	f7ff ff42 	bl	8024a28 <mg_str_n>
 8024ba4:	3408      	adds	r4, #8
 8024ba6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024baa:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8024bae:	b003      	add	sp, #12
 8024bb0:	bd30      	pop	{r4, r5, pc}

08024bb2 <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8024bb2:	b084      	sub	sp, #16
 8024bb4:	f10d 0c10 	add.w	ip, sp, #16
 8024bb8:	e90c 0003 	stmdb	ip, {r0, r1}
 8024bbc:	4669      	mov	r1, sp
 8024bbe:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8024bc2:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 8024bc4:	9a03      	ldr	r2, [sp, #12]
 8024bc6:	429a      	cmp	r2, r3
 8024bc8:	d90b      	bls.n	8024be2 <mg_strcmp+0x30>
 8024bca:	9901      	ldr	r1, [sp, #4]
 8024bcc:	4299      	cmp	r1, r3
 8024bce:	d908      	bls.n	8024be2 <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 8024bd0:	9a02      	ldr	r2, [sp, #8]
 8024bd2:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 8024bd4:	9a00      	ldr	r2, [sp, #0]
 8024bd6:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 8024bd8:	4291      	cmp	r1, r2
 8024bda:	db09      	blt.n	8024bf0 <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 8024bdc:	dc0c      	bgt.n	8024bf8 <mg_strcmp+0x46>
    i++;
 8024bde:	3301      	adds	r3, #1
 8024be0:	e7f0      	b.n	8024bc4 <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 8024be2:	429a      	cmp	r2, r3
 8024be4:	d80a      	bhi.n	8024bfc <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 8024be6:	9a01      	ldr	r2, [sp, #4]
 8024be8:	429a      	cmp	r2, r3
 8024bea:	d809      	bhi.n	8024c00 <mg_strcmp+0x4e>
  return 0;
 8024bec:	2000      	movs	r0, #0
 8024bee:	e001      	b.n	8024bf4 <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 8024bf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8024bf4:	b004      	add	sp, #16
 8024bf6:	4770      	bx	lr
    if (c1 > c2) return 1;
 8024bf8:	2001      	movs	r0, #1
 8024bfa:	e7fb      	b.n	8024bf4 <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 8024bfc:	2001      	movs	r0, #1
 8024bfe:	e7f9      	b.n	8024bf4 <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 8024c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024c04:	e7f6      	b.n	8024bf4 <mg_strcmp+0x42>

08024c06 <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8024c06:	b530      	push	{r4, r5, lr}
 8024c08:	b085      	sub	sp, #20
 8024c0a:	ac04      	add	r4, sp, #16
 8024c0c:	e904 0003 	stmdb	r4, {r0, r1}
 8024c10:	4669      	mov	r1, sp
 8024c12:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8024c16:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 8024c18:	9b03      	ldr	r3, [sp, #12]
 8024c1a:	42a3      	cmp	r3, r4
 8024c1c:	d910      	bls.n	8024c40 <mg_strcasecmp+0x3a>
 8024c1e:	9a01      	ldr	r2, [sp, #4]
 8024c20:	42a2      	cmp	r2, r4
 8024c22:	d90d      	bls.n	8024c40 <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 8024c24:	9b02      	ldr	r3, [sp, #8]
 8024c26:	5d18      	ldrb	r0, [r3, r4]
 8024c28:	f7fc ff22 	bl	8021a70 <mg_tolc>
 8024c2c:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 8024c2e:	9b00      	ldr	r3, [sp, #0]
 8024c30:	5d18      	ldrb	r0, [r3, r4]
 8024c32:	f7fc ff1d 	bl	8021a70 <mg_tolc>
    if (c1 < c2) return -1;
 8024c36:	4285      	cmp	r5, r0
 8024c38:	db09      	blt.n	8024c4e <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 8024c3a:	dc0c      	bgt.n	8024c56 <mg_strcasecmp+0x50>
    i++;
 8024c3c:	3401      	adds	r4, #1
 8024c3e:	e7eb      	b.n	8024c18 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 8024c40:	42a3      	cmp	r3, r4
 8024c42:	d80a      	bhi.n	8024c5a <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 8024c44:	9b01      	ldr	r3, [sp, #4]
 8024c46:	42a3      	cmp	r3, r4
 8024c48:	d809      	bhi.n	8024c5e <mg_strcasecmp+0x58>
  return 0;
 8024c4a:	2000      	movs	r0, #0
 8024c4c:	e001      	b.n	8024c52 <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 8024c4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8024c52:	b005      	add	sp, #20
 8024c54:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 8024c56:	2001      	movs	r0, #1
 8024c58:	e7fb      	b.n	8024c52 <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 8024c5a:	2001      	movs	r0, #1
 8024c5c:	e7f9      	b.n	8024c52 <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 8024c5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024c62:	e7f6      	b.n	8024c52 <mg_strcasecmp+0x4c>

08024c64 <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8024c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024c68:	b086      	sub	sp, #24
 8024c6a:	4604      	mov	r4, r0
 8024c6c:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8024c6e:	f7fe fb45 	bl	80232fc <mg_http_get_request_len>
 8024c72:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8024c74:	b1d4      	cbz	r4, 8024cac <mg_http_parse+0x48>
 8024c76:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 8024c78:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8024c7c:	2100      	movs	r1, #0
 8024c7e:	4630      	mov	r0, r6
 8024c80:	f008 fa36 	bl	802d0f0 <memset>
  if (req_len <= 0) return req_len;
 8024c84:	2f00      	cmp	r7, #0
 8024c86:	f340 808d 	ble.w	8024da4 <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 8024c8a:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 8024c8e:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8024c92:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8024c96:	46b8      	mov	r8, r7
 8024c98:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8024c9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024ca0:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 8024ca4:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 8024ca8:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8024caa:	e005      	b.n	8024cb8 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8024cac:	4625      	mov	r5, r4
 8024cae:	e7e3      	b.n	8024c78 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8024cb0:	4414      	add	r4, r2
 8024cb2:	6873      	ldr	r3, [r6, #4]
 8024cb4:	4413      	add	r3, r2
 8024cb6:	6073      	str	r3, [r6, #4]
 8024cb8:	42ac      	cmp	r4, r5
 8024cba:	d208      	bcs.n	8024cce <mg_http_parse+0x6a>
 8024cbc:	4629      	mov	r1, r5
 8024cbe:	4620      	mov	r0, r4
 8024cc0:	f7fb fc1c 	bl	80204fc <clen>
 8024cc4:	4602      	mov	r2, r0
 8024cc6:	2800      	cmp	r0, #0
 8024cc8:	d1f2      	bne.n	8024cb0 <mg_http_parse+0x4c>
 8024cca:	e000      	b.n	8024cce <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8024ccc:	3401      	adds	r4, #1
 8024cce:	42ac      	cmp	r4, r5
 8024cd0:	d202      	bcs.n	8024cd8 <mg_http_parse+0x74>
 8024cd2:	7823      	ldrb	r3, [r4, #0]
 8024cd4:	2b20      	cmp	r3, #32
 8024cd6:	d0f9      	beq.n	8024ccc <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 8024cd8:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8024cda:	e003      	b.n	8024ce4 <mg_http_parse+0x80>
 8024cdc:	4414      	add	r4, r2
 8024cde:	68f3      	ldr	r3, [r6, #12]
 8024ce0:	4413      	add	r3, r2
 8024ce2:	60f3      	str	r3, [r6, #12]
 8024ce4:	42ac      	cmp	r4, r5
 8024ce6:	d208      	bcs.n	8024cfa <mg_http_parse+0x96>
 8024ce8:	4629      	mov	r1, r5
 8024cea:	4620      	mov	r0, r4
 8024cec:	f7fb fc06 	bl	80204fc <clen>
 8024cf0:	4602      	mov	r2, r0
 8024cf2:	2800      	cmp	r0, #0
 8024cf4:	d1f2      	bne.n	8024cdc <mg_http_parse+0x78>
 8024cf6:	e000      	b.n	8024cfa <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8024cf8:	3401      	adds	r4, #1
 8024cfa:	42ac      	cmp	r4, r5
 8024cfc:	d202      	bcs.n	8024d04 <mg_http_parse+0xa0>
 8024cfe:	7823      	ldrb	r3, [r4, #0]
 8024d00:	2b20      	cmp	r3, #32
 8024d02:	d0f9      	beq.n	8024cf8 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8024d04:	f106 0218 	add.w	r2, r6, #24
 8024d08:	4629      	mov	r1, r5
 8024d0a:	4620      	mov	r0, r4
 8024d0c:	f7fb fc3d 	bl	802058a <skiptorn>
 8024d10:	4682      	mov	sl, r0
 8024d12:	2800      	cmp	r0, #0
 8024d14:	f000 8082 	beq.w	8024e1c <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8024d18:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8024d1c:	68f4      	ldr	r4, [r6, #12]
 8024d1e:	4622      	mov	r2, r4
 8024d20:	213f      	movs	r1, #63	@ 0x3f
 8024d22:	4648      	mov	r0, r9
 8024d24:	f7eb fa6c 	bl	8010200 <memchr>
 8024d28:	b138      	cbz	r0, 8024d3a <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 8024d2a:	1c42      	adds	r2, r0, #1
 8024d2c:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8024d2e:	444c      	add	r4, r9
 8024d30:	1aa4      	subs	r4, r4, r2
 8024d32:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8024d34:	eba0 0309 	sub.w	r3, r0, r9
 8024d38:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8024d3a:	6873      	ldr	r3, [r6, #4]
 8024d3c:	2b00      	cmp	r3, #0
 8024d3e:	d06f      	beq.n	8024e20 <mg_http_parse+0x1bc>
 8024d40:	68f3      	ldr	r3, [r6, #12]
 8024d42:	2b00      	cmp	r3, #0
 8024d44:	d06f      	beq.n	8024e26 <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 8024d46:	231e      	movs	r3, #30
 8024d48:	f106 0220 	add.w	r2, r6, #32
 8024d4c:	4629      	mov	r1, r5
 8024d4e:	4650      	mov	r0, sl
 8024d50:	f7fb fc43 	bl	80205da <mg_http_parse_headers>
 8024d54:	2800      	cmp	r0, #0
 8024d56:	d069      	beq.n	8024e2c <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8024d58:	4939      	ldr	r1, [pc, #228]	@ (8024e40 <mg_http_parse+0x1dc>)
 8024d5a:	4630      	mov	r0, r6
 8024d5c:	f7fe fafa 	bl	8023354 <mg_http_get_header>
 8024d60:	b160      	cbz	r0, 8024d7c <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8024d62:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 8024d66:	e9d0 0100 	ldrd	r0, r1, [r0]
 8024d6a:	f7fe fa75 	bl	8023258 <mg_to_size_t>
 8024d6e:	2800      	cmp	r0, #0
 8024d70:	d05f      	beq.n	8024e32 <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 8024d72:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024d76:	4443      	add	r3, r8
 8024d78:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8024d7c:	2205      	movs	r2, #5
 8024d7e:	4931      	ldr	r1, [pc, #196]	@ (8024e44 <mg_http_parse+0x1e0>)
 8024d80:	6830      	ldr	r0, [r6, #0]
 8024d82:	f7fb fb6d 	bl	8020460 <mg_ncasecmp>
 8024d86:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8024d88:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8024d90:	d00c      	beq.n	8024dac <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024d92:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024d96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8024d9a:	d029      	beq.n	8024df0 <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8024d9c:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 8024da0:	4598      	cmp	r8, r3
 8024da2:	d849      	bhi.n	8024e38 <mg_http_parse+0x1d4>
}
 8024da4:	4638      	mov	r0, r7
 8024da6:	b006      	add	sp, #24
 8024da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8024dac:	2800      	cmp	r0, #0
 8024dae:	d0f0      	beq.n	8024d92 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8024db0:	466d      	mov	r5, sp
 8024db2:	4925      	ldr	r1, [pc, #148]	@ (8024e48 <mg_http_parse+0x1e4>)
 8024db4:	4628      	mov	r0, r5
 8024db6:	f7ff fe2b 	bl	8024a10 <mg_str_s>
 8024dba:	e895 000c 	ldmia.w	r5, {r2, r3}
 8024dbe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8024dc2:	f7ff ff20 	bl	8024c06 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8024dc6:	2800      	cmp	r0, #0
 8024dc8:	d0e3      	beq.n	8024d92 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8024dca:	ad02      	add	r5, sp, #8
 8024dcc:	491f      	ldr	r1, [pc, #124]	@ (8024e4c <mg_http_parse+0x1e8>)
 8024dce:	4628      	mov	r0, r5
 8024dd0:	f7ff fe1e 	bl	8024a10 <mg_str_s>
 8024dd4:	e895 000c 	ldmia.w	r5, {r2, r3}
 8024dd8:	e896 0003 	ldmia.w	r6, {r0, r1}
 8024ddc:	f7ff ff13 	bl	8024c06 <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8024de0:	2800      	cmp	r0, #0
 8024de2:	d0d6      	beq.n	8024d92 <mg_http_parse+0x12e>
    hm->body.len = 0;
 8024de4:	2300      	movs	r3, #0
 8024de6:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8024dea:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 8024dee:	e7d0      	b.n	8024d92 <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024df0:	2c00      	cmp	r4, #0
 8024df2:	d1d3      	bne.n	8024d9c <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8024df4:	ac04      	add	r4, sp, #16
 8024df6:	4916      	ldr	r1, [pc, #88]	@ (8024e50 <mg_http_parse+0x1ec>)
 8024df8:	4620      	mov	r0, r4
 8024dfa:	f7ff fe09 	bl	8024a10 <mg_str_s>
 8024dfe:	e894 000c 	ldmia.w	r4, {r2, r3}
 8024e02:	f106 0108 	add.w	r1, r6, #8
 8024e06:	c903      	ldmia	r1, {r0, r1}
 8024e08:	f7ff fefd 	bl	8024c06 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024e0c:	2800      	cmp	r0, #0
 8024e0e:	d1c5      	bne.n	8024d9c <mg_http_parse+0x138>
    hm->body.len = 0;
 8024e10:	2300      	movs	r3, #0
 8024e12:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8024e16:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 8024e1a:	e7bf      	b.n	8024d9c <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8024e1c:	2700      	movs	r7, #0
 8024e1e:	e7c1      	b.n	8024da4 <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8024e20:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024e24:	e7be      	b.n	8024da4 <mg_http_parse+0x140>
 8024e26:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024e2a:	e7bb      	b.n	8024da4 <mg_http_parse+0x140>
    return -1;  // error when parsing
 8024e2c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024e30:	e7b8      	b.n	8024da4 <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8024e32:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024e36:	e7b5      	b.n	8024da4 <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8024e38:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024e3c:	e7b2      	b.n	8024da4 <mg_http_parse+0x140>
 8024e3e:	bf00      	nop
 8024e40:	0803ad4c 	.word	0x0803ad4c
 8024e44:	0803ad5c 	.word	0x0803ad5c
 8024e48:	08037cb8 	.word	0x08037cb8
 8024e4c:	08036f6c 	.word	0x08036f6c
 8024e50:	0803ad64 	.word	0x0803ad64

08024e54 <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8024e54:	b530      	push	{r4, r5, lr}
 8024e56:	b085      	sub	sp, #20
 8024e58:	ac04      	add	r4, sp, #16
 8024e5a:	e904 0003 	stmdb	r4, {r0, r1}
 8024e5e:	4669      	mov	r1, sp
 8024e60:	e881 000c 	stmia.w	r1, {r2, r3}
 8024e64:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 8024e66:	b110      	cbz	r0, 8024e6e <mg_match+0x1a>
 8024e68:	2300      	movs	r3, #0
 8024e6a:	6003      	str	r3, [r0, #0]
 8024e6c:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 8024e6e:	2400      	movs	r4, #0
 8024e70:	46a4      	mov	ip, r4
 8024e72:	4621      	mov	r1, r4
 8024e74:	4623      	mov	r3, r4
 8024e76:	e028      	b.n	8024eca <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8024e78:	9a02      	ldr	r2, [sp, #8]
 8024e7a:	440a      	add	r2, r1
 8024e7c:	6002      	str	r2, [r0, #0]
 8024e7e:	2201      	movs	r2, #1
 8024e80:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8024e82:	2200      	movs	r2, #0
 8024e84:	6082      	str	r2, [r0, #8]
 8024e86:	60c2      	str	r2, [r0, #12]
 8024e88:	3008      	adds	r0, #8
      i++, j++;
 8024e8a:	3301      	adds	r3, #1
 8024e8c:	3101      	adds	r1, #1
 8024e8e:	e01c      	b.n	8024eca <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8024e90:	429a      	cmp	r2, r3
 8024e92:	d905      	bls.n	8024ea0 <mg_match+0x4c>
 8024e94:	9a00      	ldr	r2, [sp, #0]
 8024e96:	5cd2      	ldrb	r2, [r2, r3]
 8024e98:	2a2a      	cmp	r2, #42	@ 0x2a
 8024e9a:	d045      	beq.n	8024f28 <mg_match+0xd4>
 8024e9c:	2a23      	cmp	r2, #35	@ 0x23
 8024e9e:	d043      	beq.n	8024f28 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8024ea0:	2c00      	cmp	r4, #0
 8024ea2:	d065      	beq.n	8024f70 <mg_match+0x11c>
 8024ea4:	9b03      	ldr	r3, [sp, #12]
 8024ea6:	42a3      	cmp	r3, r4
 8024ea8:	d365      	bcc.n	8024f76 <mg_match+0x122>
 8024eaa:	9b00      	ldr	r3, [sp, #0]
 8024eac:	f813 300c 	ldrb.w	r3, [r3, ip]
 8024eb0:	2b23      	cmp	r3, #35	@ 0x23
 8024eb2:	d003      	beq.n	8024ebc <mg_match+0x68>
 8024eb4:	9b02      	ldr	r3, [sp, #8]
 8024eb6:	5c5b      	ldrb	r3, [r3, r1]
 8024eb8:	2b2f      	cmp	r3, #47	@ 0x2f
 8024eba:	d05e      	beq.n	8024f7a <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8024ebc:	2800      	cmp	r0, #0
 8024ebe:	d046      	beq.n	8024f4e <mg_match+0xfa>
 8024ec0:	6803      	ldr	r3, [r0, #0]
 8024ec2:	2b00      	cmp	r3, #0
 8024ec4:	d03c      	beq.n	8024f40 <mg_match+0xec>
      i = ni, j = nj;
 8024ec6:	4621      	mov	r1, r4
 8024ec8:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 8024eca:	9a01      	ldr	r2, [sp, #4]
 8024ecc:	429a      	cmp	r2, r3
 8024ece:	d802      	bhi.n	8024ed6 <mg_match+0x82>
 8024ed0:	9d03      	ldr	r5, [sp, #12]
 8024ed2:	428d      	cmp	r5, r1
 8024ed4:	d941      	bls.n	8024f5a <mg_match+0x106>
    if (i < p.len && j < s.len &&
 8024ed6:	429a      	cmp	r2, r3
 8024ed8:	d9da      	bls.n	8024e90 <mg_match+0x3c>
 8024eda:	9d03      	ldr	r5, [sp, #12]
 8024edc:	428d      	cmp	r5, r1
 8024ede:	d9d7      	bls.n	8024e90 <mg_match+0x3c>
        (p.buf[i] == '?' ||
 8024ee0:	9d00      	ldr	r5, [sp, #0]
 8024ee2:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 8024ee6:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8024eea:	d009      	beq.n	8024f00 <mg_match+0xac>
        (p.buf[i] == '?' ||
 8024eec:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 8024ef0:	d0ce      	beq.n	8024e90 <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8024ef2:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 8024ef6:	d0cb      	beq.n	8024e90 <mg_match+0x3c>
 8024ef8:	9d02      	ldr	r5, [sp, #8]
 8024efa:	5c6d      	ldrb	r5, [r5, r1]
 8024efc:	45ae      	cmp	lr, r5
 8024efe:	d1c7      	bne.n	8024e90 <mg_match+0x3c>
      if (caps == NULL) {
 8024f00:	2800      	cmp	r0, #0
 8024f02:	d0c2      	beq.n	8024e8a <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 8024f04:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8024f08:	d0b6      	beq.n	8024e78 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 8024f0a:	6802      	ldr	r2, [r0, #0]
 8024f0c:	2a00      	cmp	r2, #0
 8024f0e:	d0bc      	beq.n	8024e8a <mg_match+0x36>
 8024f10:	6845      	ldr	r5, [r0, #4]
 8024f12:	2d00      	cmp	r5, #0
 8024f14:	d1b9      	bne.n	8024e8a <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8024f16:	9d02      	ldr	r5, [sp, #8]
 8024f18:	440d      	add	r5, r1
 8024f1a:	1aad      	subs	r5, r5, r2
 8024f1c:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8024f1e:	2200      	movs	r2, #0
 8024f20:	60c2      	str	r2, [r0, #12]
 8024f22:	6082      	str	r2, [r0, #8]
 8024f24:	3008      	adds	r0, #8
 8024f26:	e7b0      	b.n	8024e8a <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8024f28:	b108      	cbz	r0, 8024f2e <mg_match+0xda>
 8024f2a:	6802      	ldr	r2, [r0, #0]
 8024f2c:	b11a      	cbz	r2, 8024f36 <mg_match+0xe2>
      ni = i++, nj = j + 1;
 8024f2e:	1c4c      	adds	r4, r1, #1
 8024f30:	469c      	mov	ip, r3
 8024f32:	3301      	adds	r3, #1
 8024f34:	e7c9      	b.n	8024eca <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8024f36:	6042      	str	r2, [r0, #4]
 8024f38:	9a02      	ldr	r2, [sp, #8]
 8024f3a:	440a      	add	r2, r1
 8024f3c:	6002      	str	r2, [r0, #0]
 8024f3e:	e7f6      	b.n	8024f2e <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8024f40:	6843      	ldr	r3, [r0, #4]
 8024f42:	b93b      	cbnz	r3, 8024f54 <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 8024f44:	3808      	subs	r0, #8
 8024f46:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 8024f48:	4621      	mov	r1, r4
 8024f4a:	4663      	mov	r3, ip
 8024f4c:	e7bd      	b.n	8024eca <mg_match+0x76>
 8024f4e:	4621      	mov	r1, r4
 8024f50:	4663      	mov	r3, ip
 8024f52:	e7ba      	b.n	8024eca <mg_match+0x76>
 8024f54:	4621      	mov	r1, r4
 8024f56:	4663      	mov	r3, ip
 8024f58:	e7b7      	b.n	8024eca <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 8024f5a:	b180      	cbz	r0, 8024f7e <mg_match+0x12a>
 8024f5c:	6803      	ldr	r3, [r0, #0]
 8024f5e:	b183      	cbz	r3, 8024f82 <mg_match+0x12e>
 8024f60:	6842      	ldr	r2, [r0, #4]
 8024f62:	b982      	cbnz	r2, 8024f86 <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8024f64:	9a02      	ldr	r2, [sp, #8]
 8024f66:	440a      	add	r2, r1
 8024f68:	1ad3      	subs	r3, r2, r3
 8024f6a:	6043      	str	r3, [r0, #4]
  return true;
 8024f6c:	2001      	movs	r0, #1
 8024f6e:	e000      	b.n	8024f72 <mg_match+0x11e>
      return false;
 8024f70:	2000      	movs	r0, #0
}
 8024f72:	b005      	add	sp, #20
 8024f74:	bd30      	pop	{r4, r5, pc}
      return false;
 8024f76:	2000      	movs	r0, #0
 8024f78:	e7fb      	b.n	8024f72 <mg_match+0x11e>
 8024f7a:	2000      	movs	r0, #0
 8024f7c:	e7f9      	b.n	8024f72 <mg_match+0x11e>
  return true;
 8024f7e:	2001      	movs	r0, #1
 8024f80:	e7f7      	b.n	8024f72 <mg_match+0x11e>
 8024f82:	2001      	movs	r0, #1
 8024f84:	e7f5      	b.n	8024f72 <mg_match+0x11e>
 8024f86:	2001      	movs	r0, #1
 8024f88:	e7f3      	b.n	8024f72 <mg_match+0x11e>

08024f8a <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8024f8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024f8e:	b085      	sub	sp, #20
 8024f90:	ac04      	add	r4, sp, #16
 8024f92:	e904 0003 	stmdb	r4, {r0, r1}
 8024f96:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 8024f9a:	b379      	cbz	r1, 8024ffc <mg_span+0x72>
 8024f9c:	4690      	mov	r8, r2
 8024f9e:	461f      	mov	r7, r3
 8024fa0:	460d      	mov	r5, r1
 8024fa2:	9e02      	ldr	r6, [sp, #8]
 8024fa4:	b366      	cbz	r6, 8025000 <mg_span+0x76>
    size_t len = 0;
 8024fa6:	2400      	movs	r4, #0
 8024fa8:	e000      	b.n	8024fac <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8024faa:	3401      	adds	r4, #1
 8024fac:	42a5      	cmp	r5, r4
 8024fae:	d902      	bls.n	8024fb6 <mg_span+0x2c>
 8024fb0:	5d31      	ldrb	r1, [r6, r4]
 8024fb2:	4281      	cmp	r1, r0
 8024fb4:	d1f9      	bne.n	8024faa <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8024fb6:	f1b8 0f00 	cmp.w	r8, #0
 8024fba:	d009      	beq.n	8024fd0 <mg_span+0x46>
 8024fbc:	46e9      	mov	r9, sp
 8024fbe:	4622      	mov	r2, r4
 8024fc0:	4631      	mov	r1, r6
 8024fc2:	4648      	mov	r0, r9
 8024fc4:	f7ff fd30 	bl	8024a28 <mg_str_n>
 8024fc8:	e899 0003 	ldmia.w	r9, {r0, r1}
 8024fcc:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8024fd0:	b187      	cbz	r7, 8024ff4 <mg_span+0x6a>
 8024fd2:	46e8      	mov	r8, sp
 8024fd4:	1b2a      	subs	r2, r5, r4
 8024fd6:	1931      	adds	r1, r6, r4
 8024fd8:	4640      	mov	r0, r8
 8024fda:	f7ff fd25 	bl	8024a28 <mg_str_n>
 8024fde:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024fe2:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8024fe6:	42a5      	cmp	r5, r4
 8024fe8:	d904      	bls.n	8024ff4 <mg_span+0x6a>
 8024fea:	4603      	mov	r3, r0
 8024fec:	3301      	adds	r3, #1
 8024fee:	603b      	str	r3, [r7, #0]
 8024ff0:	1e4b      	subs	r3, r1, #1
 8024ff2:	607b      	str	r3, [r7, #4]
    return true;
 8024ff4:	2001      	movs	r0, #1
}
 8024ff6:	b005      	add	sp, #20
 8024ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 8024ffc:	2000      	movs	r0, #0
 8024ffe:	e7fa      	b.n	8024ff6 <mg_span+0x6c>
 8025000:	2000      	movs	r0, #0
 8025002:	e7f8      	b.n	8024ff6 <mg_span+0x6c>

08025004 <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8025004:	b082      	sub	sp, #8
 8025006:	b510      	push	{r4, lr}
 8025008:	b08a      	sub	sp, #40	@ 0x28
 802500a:	4604      	mov	r4, r0
 802500c:	f10d 0c08 	add.w	ip, sp, #8
 8025010:	e88c 0006 	stmia.w	ip, {r1, r2}
 8025014:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8025016:	2200      	movs	r2, #0
 8025018:	4611      	mov	r1, r2
 802501a:	f7ff fd05 	bl	8024a28 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 802501e:	ab02      	add	r3, sp, #8
 8025020:	2226      	movs	r2, #38	@ 0x26
 8025022:	9200      	str	r2, [sp, #0]
 8025024:	aa08      	add	r2, sp, #32
 8025026:	e893 0003 	ldmia.w	r3, {r0, r1}
 802502a:	f7ff ffae 	bl	8024f8a <mg_span>
 802502e:	b1c8      	cbz	r0, 8025064 <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8025030:	233d      	movs	r3, #61	@ 0x3d
 8025032:	9300      	str	r3, [sp, #0]
 8025034:	ab04      	add	r3, sp, #16
 8025036:	aa06      	add	r2, sp, #24
 8025038:	a90a      	add	r1, sp, #40	@ 0x28
 802503a:	e911 0003 	ldmdb	r1, {r0, r1}
 802503e:	f7ff ffa4 	bl	8024f8a <mg_span>
 8025042:	2800      	cmp	r0, #0
 8025044:	d0eb      	beq.n	802501e <mg_http_var+0x1a>
 8025046:	9a07      	ldr	r2, [sp, #28]
 8025048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802504a:	4293      	cmp	r3, r2
 802504c:	d1e7      	bne.n	802501e <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 802504e:	9906      	ldr	r1, [sp, #24]
 8025050:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025052:	f7fb fa05 	bl	8020460 <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8025056:	2800      	cmp	r0, #0
 8025058:	d1e1      	bne.n	802501e <mg_http_var+0x1a>
      result = v;
 802505a:	ab04      	add	r3, sp, #16
 802505c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025060:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8025064:	4620      	mov	r0, r4
 8025066:	b00a      	add	sp, #40	@ 0x28
 8025068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802506c:	b002      	add	sp, #8
 802506e:	4770      	bx	lr

08025070 <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8025070:	b530      	push	{r4, r5, lr}
 8025072:	b08d      	sub	sp, #52	@ 0x34
 8025074:	4604      	mov	r4, r0
 8025076:	a802      	add	r0, sp, #8
 8025078:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 802507c:	4619      	mov	r1, r3
 802507e:	a804      	add	r0, sp, #16
 8025080:	f7ff fcc6 	bl	8024a10 <mg_str_s>
  size_t i = 0;
 8025084:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8025086:	e000      	b.n	802508a <guess_content_type+0x1a>
 8025088:	3301      	adds	r3, #1
 802508a:	9803      	ldr	r0, [sp, #12]
 802508c:	4298      	cmp	r0, r3
 802508e:	d906      	bls.n	802509e <guess_content_type+0x2e>
 8025090:	1ac1      	subs	r1, r0, r3
 8025092:	9a02      	ldr	r2, [sp, #8]
 8025094:	440a      	add	r2, r1
 8025096:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 802509a:	2a2e      	cmp	r2, #46	@ 0x2e
 802509c:	d1f4      	bne.n	8025088 <guess_content_type+0x18>
  path.buf += path.len - i;
 802509e:	1ac0      	subs	r0, r0, r3
 80250a0:	9a02      	ldr	r2, [sp, #8]
 80250a2:	4402      	add	r2, r0
 80250a4:	9202      	str	r2, [sp, #8]
  path.len = i;
 80250a6:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 80250a8:	ab04      	add	r3, sp, #16
 80250aa:	222c      	movs	r2, #44	@ 0x2c
 80250ac:	9200      	str	r2, [sp, #0]
 80250ae:	aa0a      	add	r2, sp, #40	@ 0x28
 80250b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80250b4:	f7ff ff69 	bl	8024f8a <mg_span>
 80250b8:	b1c0      	cbz	r0, 80250ec <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 80250ba:	233d      	movs	r3, #61	@ 0x3d
 80250bc:	9300      	str	r3, [sp, #0]
 80250be:	ab06      	add	r3, sp, #24
 80250c0:	aa08      	add	r2, sp, #32
 80250c2:	a90c      	add	r1, sp, #48	@ 0x30
 80250c4:	e911 0003 	ldmdb	r1, {r0, r1}
 80250c8:	f7ff ff5f 	bl	8024f8a <mg_span>
 80250cc:	2800      	cmp	r0, #0
 80250ce:	d0eb      	beq.n	80250a8 <guess_content_type+0x38>
 80250d0:	ab08      	add	r3, sp, #32
 80250d2:	cb0c      	ldmia	r3, {r2, r3}
 80250d4:	a902      	add	r1, sp, #8
 80250d6:	c903      	ldmia	r1, {r0, r1}
 80250d8:	f7ff fd6b 	bl	8024bb2 <mg_strcmp>
 80250dc:	2800      	cmp	r0, #0
 80250de:	d1e3      	bne.n	80250a8 <guess_content_type+0x38>
 80250e0:	ab06      	add	r3, sp, #24
 80250e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80250e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80250ea:	e01c      	b.n	8025126 <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80250ec:	2500      	movs	r5, #0
 80250ee:	4b0f      	ldr	r3, [pc, #60]	@ (802512c <guess_content_type+0xbc>)
 80250f0:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 80250f4:	b19b      	cbz	r3, 802511e <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80250f6:	4b0d      	ldr	r3, [pc, #52]	@ (802512c <guess_content_type+0xbc>)
 80250f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80250fc:	cb0c      	ldmia	r3, {r2, r3}
 80250fe:	a902      	add	r1, sp, #8
 8025100:	c903      	ldmia	r1, {r0, r1}
 8025102:	f7ff fd56 	bl	8024bb2 <mg_strcmp>
 8025106:	b108      	cbz	r0, 802510c <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8025108:	3502      	adds	r5, #2
 802510a:	e7f0      	b.n	80250ee <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 802510c:	3501      	adds	r5, #1
 802510e:	4b07      	ldr	r3, [pc, #28]	@ (802512c <guess_content_type+0xbc>)
 8025110:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8025114:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025118:	e884 0003 	stmia.w	r4, {r0, r1}
 802511c:	e003      	b.n	8025126 <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 802511e:	4904      	ldr	r1, [pc, #16]	@ (8025130 <guess_content_type+0xc0>)
 8025120:	4620      	mov	r0, r4
 8025122:	f7ff fc75 	bl	8024a10 <mg_str_s>
}
 8025126:	4620      	mov	r0, r4
 8025128:	b00d      	add	sp, #52	@ 0x34
 802512a:	bd30      	pop	{r4, r5, pc}
 802512c:	0803c254 	.word	0x0803c254
 8025130:	0803ad68 	.word	0x0803ad68

08025134 <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8025134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025136:	b087      	sub	sp, #28
 8025138:	4604      	mov	r4, r0
 802513a:	460e      	mov	r6, r1
 802513c:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 802513e:	2500      	movs	r5, #0
 8025140:	1da8      	adds	r0, r5, #6
 8025142:	6863      	ldr	r3, [r4, #4]
 8025144:	4298      	cmp	r0, r3
 8025146:	d23c      	bcs.n	80251c2 <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8025148:	6821      	ldr	r1, [r4, #0]
 802514a:	1b5b      	subs	r3, r3, r5
 802514c:	1f9a      	subs	r2, r3, #6
 802514e:	4401      	add	r1, r0
 8025150:	a804      	add	r0, sp, #16
 8025152:	f7ff fc69 	bl	8024a28 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8025156:	6820      	ldr	r0, [r4, #0]
 8025158:	2206      	movs	r2, #6
 802515a:	491b      	ldr	r1, [pc, #108]	@ (80251c8 <getrange+0x94>)
 802515c:	4428      	add	r0, r5
 802515e:	f007 ff33 	bl	802cfc8 <memcmp>
 8025162:	b108      	cbz	r0, 8025168 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 8025164:	3501      	adds	r5, #1
 8025166:	e7eb      	b.n	8025140 <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 8025168:	ab04      	add	r3, sp, #16
 802516a:	222d      	movs	r2, #45	@ 0x2d
 802516c:	9200      	str	r2, [sp, #0]
 802516e:	aa02      	add	r2, sp, #8
 8025170:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025174:	f7ff ff09 	bl	8024f8a <mg_span>
 8025178:	b1c0      	cbz	r0, 80251ac <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 802517a:	4632      	mov	r2, r6
 802517c:	ab02      	add	r3, sp, #8
 802517e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025182:	f7fe f869 	bl	8023258 <mg_to_size_t>
 8025186:	b928      	cbnz	r0, 8025194 <getrange+0x60>
  size_t i, numparsed = 0;
 8025188:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 802518a:	9b05      	ldr	r3, [sp, #20]
 802518c:	b923      	cbnz	r3, 8025198 <getrange+0x64>
}
 802518e:	4620      	mov	r0, r4
 8025190:	b007      	add	sp, #28
 8025192:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 8025194:	2401      	movs	r4, #1
 8025196:	e7f8      	b.n	802518a <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8025198:	463a      	mov	r2, r7
 802519a:	ab06      	add	r3, sp, #24
 802519c:	e913 0003 	ldmdb	r3, {r0, r1}
 80251a0:	f7fe f85a 	bl	8023258 <mg_to_size_t>
 80251a4:	2800      	cmp	r0, #0
 80251a6:	d0f2      	beq.n	802518e <getrange+0x5a>
 80251a8:	3401      	adds	r4, #1
 80251aa:	e7f0      	b.n	802518e <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 80251ac:	4632      	mov	r2, r6
 80251ae:	ab06      	add	r3, sp, #24
 80251b0:	e913 0003 	ldmdb	r3, {r0, r1}
 80251b4:	f7fe f850 	bl	8023258 <mg_to_size_t>
 80251b8:	b908      	cbnz	r0, 80251be <getrange+0x8a>
  size_t i, numparsed = 0;
 80251ba:	2400      	movs	r4, #0
 80251bc:	e7e7      	b.n	802518e <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 80251be:	2401      	movs	r4, #1
    break;
 80251c0:	e7e5      	b.n	802518e <getrange+0x5a>
  size_t i, numparsed = 0;
 80251c2:	2400      	movs	r4, #0
 80251c4:	e7e3      	b.n	802518e <getrange+0x5a>
 80251c6:	bf00      	nop
 80251c8:	0803ad84 	.word	0x0803ad84

080251cc <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 80251cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251d0:	b0e7      	sub	sp, #412	@ 0x19c
 80251d2:	4607      	mov	r7, r0
 80251d4:	4688      	mov	r8, r1
 80251d6:	4614      	mov	r4, r2
 80251d8:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80251da:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80251de:	f1b9 0f00 	cmp.w	r9, #0
 80251e2:	d036      	beq.n	8025252 <mg_http_serve_file+0x86>
  size_t size = 0;
 80251e4:	2300      	movs	r3, #0
 80251e6:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 80251e8:	2200      	movs	r2, #0
 80251ea:	2300      	movs	r3, #0
 80251ec:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 80251f0:	ae5e      	add	r6, sp, #376	@ 0x178
 80251f2:	4621      	mov	r1, r4
 80251f4:	4630      	mov	r0, r6
 80251f6:	f7ff fc0b 	bl	8024a10 <mg_str_s>
 80251fa:	68eb      	ldr	r3, [r5, #12]
 80251fc:	e896 0006 	ldmia.w	r6, {r1, r2}
 8025200:	a828      	add	r0, sp, #160	@ 0xa0
 8025202:	f7ff ff35 	bl	8025070 <guess_content_type>
  if (path != NULL) {
 8025206:	2c00      	cmp	r4, #0
 8025208:	d053      	beq.n	80252b2 <mg_http_serve_file+0xe6>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 802520a:	4995      	ldr	r1, [pc, #596]	@ (8025460 <mg_http_serve_file+0x294>)
 802520c:	4640      	mov	r0, r8
 802520e:	f7fe f8a1 	bl	8023354 <mg_http_get_header>
    if (ae != NULL) {
 8025212:	4606      	mov	r6, r0
 8025214:	2800      	cmp	r0, #0
 8025216:	d042      	beq.n	802529e <mg_http_serve_file+0xd2>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8025218:	6802      	ldr	r2, [r0, #0]
 802521a:	6841      	ldr	r1, [r0, #4]
 802521c:	4891      	ldr	r0, [pc, #580]	@ (8025464 <mg_http_serve_file+0x298>)
 802521e:	f7ff fb15 	bl	802484c <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8025222:	4683      	mov	fp, r0
 8025224:	b1d8      	cbz	r0, 802525e <mg_http_serve_file+0x92>
 8025226:	4990      	ldr	r1, [pc, #576]	@ (8025468 <mg_http_serve_file+0x29c>)
 8025228:	f007 ffe2 	bl	802d1f0 <strstr>
 802522c:	4606      	mov	r6, r0
 802522e:	b1d0      	cbz	r0, 8025266 <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8025230:	4623      	mov	r3, r4
 8025232:	4a8e      	ldr	r2, [pc, #568]	@ (802546c <mg_http_serve_file+0x2a0>)
 8025234:	2180      	movs	r1, #128	@ 0x80
 8025236:	a82e      	add	r0, sp, #184	@ 0xb8
 8025238:	f7fe fd62 	bl	8023d00 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 802523c:	2201      	movs	r2, #1
 802523e:	a92e      	add	r1, sp, #184	@ 0xb8
 8025240:	4648      	mov	r0, r9
 8025242:	f7fd ffcd 	bl	80231e0 <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 8025246:	4606      	mov	r6, r0
 8025248:	b130      	cbz	r0, 8025258 <mg_http_serve_file+0x8c>
 802524a:	f04f 0a01 	mov.w	sl, #1
 802524e:	ac2e      	add	r4, sp, #184	@ 0xb8
 8025250:	e00b      	b.n	802526a <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8025252:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 8025494 <mg_http_serve_file+0x2c8>
 8025256:	e7c5      	b.n	80251e4 <mg_http_serve_file+0x18>
  bool gzip = false;
 8025258:	f04f 0a00 	mov.w	sl, #0
 802525c:	e005      	b.n	802526a <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 802525e:	4606      	mov	r6, r0
  bool gzip = false;
 8025260:	f04f 0a00 	mov.w	sl, #0
 8025264:	e001      	b.n	802526a <mg_http_serve_file+0x9e>
 8025266:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 802526a:	4658      	mov	r0, fp
 802526c:	f7f5 ff76 	bl	801b15c <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8025270:	b1c6      	cbz	r6, 80252a4 <mg_http_serve_file+0xd8>
  if (fd == NULL && opts->page404 != NULL) {
 8025272:	b316      	cbz	r6, 80252ba <mg_http_serve_file+0xee>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8025274:	f8d9 3000 	ldr.w	r3, [r9]
 8025278:	aa2a      	add	r2, sp, #168	@ 0xa8
 802527a:	a92d      	add	r1, sp, #180	@ 0xb4
 802527c:	4620      	mov	r0, r4
 802527e:	4798      	blx	r3
 8025280:	2800      	cmp	r0, #0
 8025282:	d137      	bne.n	80252f4 <mg_http_serve_file+0x128>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8025284:	4b7a      	ldr	r3, [pc, #488]	@ (8025470 <mg_http_serve_file+0x2a4>)
 8025286:	68aa      	ldr	r2, [r5, #8]
 8025288:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 802528c:	4638      	mov	r0, r7
 802528e:	f7ff fa35 	bl	80246fc <mg_http_reply>
    mg_fs_close(fd);
 8025292:	4630      	mov	r0, r6
 8025294:	f7fd ffbd 	bl	8023212 <mg_fs_close>
}
 8025298:	b067      	add	sp, #412	@ 0x19c
 802529a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 802529e:	f04f 0a00 	mov.w	sl, #0
 80252a2:	e7e5      	b.n	8025270 <mg_http_serve_file+0xa4>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 80252a4:	2201      	movs	r2, #1
 80252a6:	4621      	mov	r1, r4
 80252a8:	4648      	mov	r0, r9
 80252aa:	f7fd ff99 	bl	80231e0 <mg_fs_open>
 80252ae:	4606      	mov	r6, r0
 80252b0:	e7df      	b.n	8025272 <mg_http_serve_file+0xa6>
  struct mg_fd *fd = NULL;
 80252b2:	4626      	mov	r6, r4
  bool gzip = false;
 80252b4:	f04f 0a00 	mov.w	sl, #0
 80252b8:	e7db      	b.n	8025272 <mg_http_serve_file+0xa6>
  if (fd == NULL && opts->page404 != NULL) {
 80252ba:	6929      	ldr	r1, [r5, #16]
 80252bc:	b1b9      	cbz	r1, 80252ee <mg_http_serve_file+0x122>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 80252be:	2201      	movs	r2, #1
 80252c0:	4648      	mov	r0, r9
 80252c2:	f7fd ff8d 	bl	80231e0 <mg_fs_open>
 80252c6:	4606      	mov	r6, r0
    path = opts->page404;
 80252c8:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 80252ca:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 80252ce:	4621      	mov	r1, r4
 80252d0:	4658      	mov	r0, fp
 80252d2:	f7ff fb9d 	bl	8024a10 <mg_str_s>
 80252d6:	68eb      	ldr	r3, [r5, #12]
 80252d8:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80252dc:	a80a      	add	r0, sp, #40	@ 0x28
 80252de:	f7ff fec7 	bl	8025070 <guess_content_type>
 80252e2:	ab28      	add	r3, sp, #160	@ 0xa0
 80252e4:	aa0a      	add	r2, sp, #40	@ 0x28
 80252e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80252ea:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 80252ee:	2e00      	cmp	r6, #0
 80252f0:	d1c0      	bne.n	8025274 <mg_http_serve_file+0xa8>
 80252f2:	e7c7      	b.n	8025284 <mg_http_serve_file+0xb8>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 80252f4:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 80252f8:	e9cd 2300 	strd	r2, r3, [sp]
 80252fc:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80252fe:	2140      	movs	r1, #64	@ 0x40
 8025300:	a84e      	add	r0, sp, #312	@ 0x138
 8025302:	f7ff fa3d 	bl	8024780 <mg_http_etag>
 8025306:	b190      	cbz	r0, 802532e <mg_http_serve_file+0x162>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8025308:	495a      	ldr	r1, [pc, #360]	@ (8025474 <mg_http_serve_file+0x2a8>)
 802530a:	4640      	mov	r0, r8
 802530c:	f7fe f822 	bl	8023354 <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8025310:	4604      	mov	r4, r0
 8025312:	b160      	cbz	r0, 802532e <mg_http_serve_file+0x162>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8025314:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 8025318:	a94e      	add	r1, sp, #312	@ 0x138
 802531a:	4658      	mov	r0, fp
 802531c:	f7ff fb78 	bl	8024a10 <mg_str_s>
 8025320:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8025324:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025328:	f7ff fc6d 	bl	8024c06 <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 802532c:	b340      	cbz	r0, 8025380 <mg_http_serve_file+0x1b4>
    size_t r1 = 0, r2 = 0, cl = size;
 802532e:	f04f 0b00 	mov.w	fp, #0
 8025332:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8025336:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 802533a:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 802533c:	494e      	ldr	r1, [pc, #312]	@ (8025478 <mg_http_serve_file+0x2ac>)
 802533e:	4640      	mov	r0, r8
 8025340:	f7fe f808 	bl	8023354 <mg_http_get_header>
    range[0] = '\0';
 8025344:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8025348:	2800      	cmp	r0, #0
 802534a:	d040      	beq.n	80253ce <mg_http_serve_file+0x202>
 802534c:	aa0e      	add	r2, sp, #56	@ 0x38
 802534e:	a90d      	add	r1, sp, #52	@ 0x34
 8025350:	f7ff fef0 	bl	8025134 <getrange>
 8025354:	2800      	cmp	r0, #0
 8025356:	dd70      	ble.n	802543a <mg_http_serve_file+0x26e>
      if (n == 1) r2 = cl - 1;
 8025358:	2801      	cmp	r0, #1
 802535a:	d01c      	beq.n	8025396 <mg_http_serve_file+0x1ca>
      if (r1 > r2 || r2 >= cl) {
 802535c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802535e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025360:	429a      	cmp	r2, r3
 8025362:	d801      	bhi.n	8025368 <mg_http_serve_file+0x19c>
 8025364:	42a3      	cmp	r3, r4
 8025366:	d319      	bcc.n	802539c <mg_http_serve_file+0x1d0>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8025368:	2400      	movs	r4, #0
 802536a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 802536c:	9300      	str	r3, [sp, #0]
 802536e:	9401      	str	r4, [sp, #4]
 8025370:	4a42      	ldr	r2, [pc, #264]	@ (802547c <mg_http_serve_file+0x2b0>)
 8025372:	2164      	movs	r1, #100	@ 0x64
 8025374:	a80f      	add	r0, sp, #60	@ 0x3c
 8025376:	f7fe fcc3 	bl	8023d00 <mg_snprintf>
        status = 416;
 802537a:	f44f 79d0 	mov.w	r9, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 802537e:	e028      	b.n	80253d2 <mg_http_serve_file+0x206>
    mg_fs_close(fd);
 8025380:	4630      	mov	r0, r6
 8025382:	f7fd ff46 	bl	8023212 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8025386:	4b3e      	ldr	r3, [pc, #248]	@ (8025480 <mg_http_serve_file+0x2b4>)
 8025388:	68aa      	ldr	r2, [r5, #8]
 802538a:	f44f 7198 	mov.w	r1, #304	@ 0x130
 802538e:	4638      	mov	r0, r7
 8025390:	f7ff f9b4 	bl	80246fc <mg_http_reply>
 8025394:	e780      	b.n	8025298 <mg_http_serve_file+0xcc>
      if (n == 1) r2 = cl - 1;
 8025396:	1e63      	subs	r3, r4, #1
 8025398:	930e      	str	r3, [sp, #56]	@ 0x38
 802539a:	e7df      	b.n	802535c <mg_http_serve_file+0x190>
        cl = r2 - r1 + 1;
 802539c:	1a9b      	subs	r3, r3, r2
 802539e:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 80253a0:	1911      	adds	r1, r2, r4
 80253a2:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 80253a4:	2300      	movs	r3, #0
 80253a6:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 80253a8:	9004      	str	r0, [sp, #16]
 80253aa:	9305      	str	r3, [sp, #20]
 80253ac:	9102      	str	r1, [sp, #8]
 80253ae:	9303      	str	r3, [sp, #12]
 80253b0:	9200      	str	r2, [sp, #0]
 80253b2:	9301      	str	r3, [sp, #4]
 80253b4:	4a33      	ldr	r2, [pc, #204]	@ (8025484 <mg_http_serve_file+0x2b8>)
 80253b6:	2164      	movs	r1, #100	@ 0x64
 80253b8:	a80f      	add	r0, sp, #60	@ 0x3c
 80253ba:	f7fe fca1 	bl	8023d00 <mg_snprintf>
        fs->sk(fd->fd, r1);
 80253be:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80253c2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80253c4:	6830      	ldr	r0, [r6, #0]
 80253c6:	4798      	blx	r3
        status = 206;
 80253c8:	f04f 09ce 	mov.w	r9, #206	@ 0xce
 80253cc:	e001      	b.n	80253d2 <mg_http_serve_file+0x206>
    int n, status = 200;
 80253ce:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
    mg_printf(c,
 80253d2:	4648      	mov	r0, r9
 80253d4:	f7fb f96a 	bl	80206ac <mg_http_status_code_str>
 80253d8:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 80253da:	9929      	ldr	r1, [sp, #164]	@ 0xa4
    mg_printf(c,
 80253dc:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 80253de:	46a4      	mov	ip, r4
 80253e0:	f1ba 0f00 	cmp.w	sl, #0
 80253e4:	d02c      	beq.n	8025440 <mg_http_serve_file+0x274>
 80253e6:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 8025498 <mg_http_serve_file+0x2cc>
              range, opts->extra_headers ? opts->extra_headers : "");
 80253ea:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 80253ec:	b35a      	cbz	r2, 8025446 <mg_http_serve_file+0x27a>
 80253ee:	9208      	str	r2, [sp, #32]
 80253f0:	aa0f      	add	r2, sp, #60	@ 0x3c
 80253f2:	9207      	str	r2, [sp, #28]
 80253f4:	f8cd e018 	str.w	lr, [sp, #24]
 80253f8:	f8cd c010 	str.w	ip, [sp, #16]
 80253fc:	2200      	movs	r2, #0
 80253fe:	9205      	str	r2, [sp, #20]
 8025400:	aa4e      	add	r2, sp, #312	@ 0x138
 8025402:	9202      	str	r2, [sp, #8]
 8025404:	9001      	str	r0, [sp, #4]
 8025406:	9100      	str	r1, [sp, #0]
 8025408:	464a      	mov	r2, r9
 802540a:	491f      	ldr	r1, [pc, #124]	@ (8025488 <mg_http_serve_file+0x2bc>)
 802540c:	4638      	mov	r0, r7
 802540e:	f7ff f94f 	bl	80246b0 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8025412:	ad64      	add	r5, sp, #400	@ 0x190
 8025414:	491d      	ldr	r1, [pc, #116]	@ (802548c <mg_http_serve_file+0x2c0>)
 8025416:	4628      	mov	r0, r5
 8025418:	f7ff fafa 	bl	8024a10 <mg_str_s>
 802541c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8025420:	e898 0003 	ldmia.w	r8, {r0, r1}
 8025424:	f7ff fbef 	bl	8024c06 <mg_strcasecmp>
 8025428:	b178      	cbz	r0, 802544a <mg_http_serve_file+0x27e>
      c->pfn = static_cb;
 802542a:	4b19      	ldr	r3, [pc, #100]	@ (8025490 <mg_http_serve_file+0x2c4>)
 802542c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      c->pfn_data = fd;
 8025430:	f8c7 6084 	str.w	r6, [r7, #132]	@ 0x84
      *clp = cl;
 8025434:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
}
 8025438:	e72e      	b.n	8025298 <mg_http_serve_file+0xcc>
    int n, status = 200;
 802543a:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 802543e:	e7c8      	b.n	80253d2 <mg_http_serve_file+0x206>
    mg_printf(c,
 8025440:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8025480 <mg_http_serve_file+0x2b4>
 8025444:	e7d1      	b.n	80253ea <mg_http_serve_file+0x21e>
 8025446:	4a0e      	ldr	r2, [pc, #56]	@ (8025480 <mg_http_serve_file+0x2b4>)
 8025448:	e7d1      	b.n	80253ee <mg_http_serve_file+0x222>
      c->is_resp = 0;
 802544a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 802544e:	f36f 13c7 	bfc	r3, #7, #1
 8025452:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_fs_close(fd);
 8025456:	4630      	mov	r0, r6
 8025458:	f7fd fedb 	bl	8023212 <mg_fs_close>
 802545c:	e71c      	b.n	8025298 <mg_http_serve_file+0xcc>
 802545e:	bf00      	nop
 8025460:	0803ada8 	.word	0x0803ada8
 8025464:	0803acb4 	.word	0x0803acb4
 8025468:	0803c168 	.word	0x0803c168
 802546c:	0803adb8 	.word	0x0803adb8
 8025470:	0803adc0 	.word	0x0803adc0
 8025474:	0803adcc 	.word	0x0803adcc
 8025478:	0803addc 	.word	0x0803addc
 802547c:	0803ade4 	.word	0x0803ade4
 8025480:	08037490 	.word	0x08037490
 8025484:	0803ae04 	.word	0x0803ae04
 8025488:	0803ae2c 	.word	0x0803ae2c
 802548c:	0803ae7c 	.word	0x0803ae7c
 8025490:	0802761d 	.word	0x0802761d
 8025494:	20000130 	.word	0x20000130
 8025498:	0803ad8c 	.word	0x0803ad8c

0802549c <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 802549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254a0:	b083      	sub	sp, #12
 80254a2:	ac02      	add	r4, sp, #8
 80254a4:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 80254a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80254aa:	3901      	subs	r1, #1
 80254ac:	2907      	cmp	r1, #7
 80254ae:	f200 8128 	bhi.w	8025702 <mg_str_to_num+0x266>
 80254b2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80254b6:	0008      	.short	0x0008
 80254b8:	01260020 	.word	0x01260020
 80254bc:	0126000c 	.word	0x0126000c
 80254c0:	01260126 	.word	0x01260126
 80254c4:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 80254c6:	20ff      	movs	r0, #255	@ 0xff
 80254c8:	f04f 0e00 	mov.w	lr, #0
 80254cc:	e003      	b.n	80254d6 <mg_str_to_num+0x3a>
 80254ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80254d2:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 80254d6:	b9e2      	cbnz	r2, 8025512 <mg_str_to_num+0x76>
 80254d8:	9901      	ldr	r1, [sp, #4]
 80254da:	2901      	cmp	r1, #1
 80254dc:	d926      	bls.n	802552c <mg_str_to_num+0x90>
    if (str.buf[i] == '0') {
 80254de:	9a00      	ldr	r2, [sp, #0]
 80254e0:	7811      	ldrb	r1, [r2, #0]
 80254e2:	2930      	cmp	r1, #48	@ 0x30
 80254e4:	d00c      	beq.n	8025500 <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 80254e6:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 80254ea:	220a      	movs	r2, #10
 80254ec:	e013      	b.n	8025516 <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 80254ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80254f2:	4686      	mov	lr, r0
 80254f4:	e7ef      	b.n	80254d6 <mg_str_to_num+0x3a>
 80254f6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80254fa:	f04f 0e00 	mov.w	lr, #0
 80254fe:	e7ea      	b.n	80254d6 <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8025500:	7852      	ldrb	r2, [r2, #1]
 8025502:	2a62      	cmp	r2, #98	@ 0x62
 8025504:	d015      	beq.n	8025532 <mg_str_to_num+0x96>
 8025506:	2a78      	cmp	r2, #120	@ 0x78
 8025508:	d017      	beq.n	802553a <mg_str_to_num+0x9e>
      i++;
 802550a:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 802550e:	220a      	movs	r2, #10
 8025510:	e001      	b.n	8025516 <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 8025512:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 8025516:	2a0a      	cmp	r2, #10
 8025518:	d044      	beq.n	80255a4 <mg_str_to_num+0x108>
 802551a:	2a10      	cmp	r2, #16
 802551c:	f000 80d4 	beq.w	80256c8 <mg_str_to_num+0x22c>
 8025520:	2a02      	cmp	r2, #2
 8025522:	d00e      	beq.n	8025542 <mg_str_to_num+0xa6>
 8025524:	2000      	movs	r0, #0
}
 8025526:	b003      	add	sp, #12
 8025528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i = 0, ndigits = 0;
 802552c:	f04f 0c00 	mov.w	ip, #0
 8025530:	e7f1      	b.n	8025516 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8025532:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8025536:	4662      	mov	r2, ip
 8025538:	e7ed      	b.n	8025516 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 802553a:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 802553e:	2210      	movs	r2, #16
 8025540:	e7e9      	b.n	8025516 <mg_str_to_num+0x7a>
  switch (base) {
 8025542:	2200      	movs	r2, #0
 8025544:	4611      	mov	r1, r2
 8025546:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8025548:	9d01      	ldr	r5, [sp, #4]
 802554a:	4565      	cmp	r5, ip
 802554c:	f240 80c0 	bls.w	80256d0 <mg_str_to_num+0x234>
 8025550:	9d00      	ldr	r5, [sp, #0]
 8025552:	f815 600c 	ldrb.w	r6, [r5, ip]
 8025556:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 802555a:	b2ff      	uxtb	r7, r7
 802555c:	2f01      	cmp	r7, #1
 802555e:	f200 80b7 	bhi.w	80256d0 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8025562:	3e30      	subs	r6, #48	@ 0x30
 8025564:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 8025568:	ea4f 0950 	mov.w	r9, r0, lsr #1
 802556c:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 8025570:	ea4f 075e 	mov.w	r7, lr, lsr #1
 8025574:	4591      	cmp	r9, r2
 8025576:	418f      	sbcs	r7, r1
 8025578:	f0c0 80c5 	bcc.w	8025706 <mg_str_to_num+0x26a>
        result *= 2;
 802557c:	1892      	adds	r2, r2, r2
 802557e:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 8025580:	ebb0 0a06 	subs.w	sl, r0, r6
 8025584:	eb6e 0708 	sbc.w	r7, lr, r8
 8025588:	4592      	cmp	sl, r2
 802558a:	418f      	sbcs	r7, r1
 802558c:	f0c0 80bd 	bcc.w	802570a <mg_str_to_num+0x26e>
        result += digit;
 8025590:	18b2      	adds	r2, r6, r2
 8025592:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 8025596:	f10c 0c01 	add.w	ip, ip, #1
 802559a:	3401      	adds	r4, #1
 802559c:	e7d4      	b.n	8025548 <mg_str_to_num+0xac>
        if (result > max / 10) return false;  // Overflow
 802559e:	f04f 0901 	mov.w	r9, #1
 80255a2:	e017      	b.n	80255d4 <mg_str_to_num+0x138>
  switch (base) {
 80255a4:	2200      	movs	r2, #0
 80255a6:	4611      	mov	r1, r2
 80255a8:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80255aa:	9d01      	ldr	r5, [sp, #4]
 80255ac:	4565      	cmp	r5, ip
 80255ae:	f240 808f 	bls.w	80256d0 <mg_str_to_num+0x234>
 80255b2:	9d00      	ldr	r5, [sp, #0]
 80255b4:	f815 700c 	ldrb.w	r7, [r5, ip]
 80255b8:	2f2f      	cmp	r7, #47	@ 0x2f
 80255ba:	f240 8089 	bls.w	80256d0 <mg_str_to_num+0x234>
 80255be:	2f39      	cmp	r7, #57	@ 0x39
 80255c0:	f200 8086 	bhi.w	80256d0 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 80255c4:	3f30      	subs	r7, #48	@ 0x30
 80255c6:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 80255ca:	f04f 0900 	mov.w	r9, #0
 80255ce:	eb10 060e 	adds.w	r6, r0, lr
 80255d2:	d2e4      	bcs.n	802559e <mg_str_to_num+0x102>
 80255d4:	444e      	add	r6, r9
 80255d6:	4d54      	ldr	r5, [pc, #336]	@ (8025728 <mg_str_to_num+0x28c>)
 80255d8:	fba5 9b06 	umull	r9, fp, r5, r6
 80255dc:	f02b 0903 	bic.w	r9, fp, #3
 80255e0:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 80255e4:	eba6 0609 	sub.w	r6, r6, r9
 80255e8:	1b86      	subs	r6, r0, r6
 80255ea:	f16e 0b00 	sbc.w	fp, lr, #0
 80255ee:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 80255f2:	fb09 f906 	mul.w	r9, r9, r6
 80255f6:	fb05 990b 	mla	r9, r5, fp, r9
 80255fa:	fba6 6a05 	umull	r6, sl, r6, r5
 80255fe:	44d1      	add	r9, sl
 8025600:	0876      	lsrs	r6, r6, #1
 8025602:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 8025606:	ea4f 0959 	mov.w	r9, r9, lsr #1
 802560a:	4296      	cmp	r6, r2
 802560c:	eb79 0901 	sbcs.w	r9, r9, r1
 8025610:	d37d      	bcc.n	802570e <mg_str_to_num+0x272>
        result *= 10;
 8025612:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8025616:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 802561a:	0096      	lsls	r6, r2, #2
 802561c:	18b2      	adds	r2, r6, r2
 802561e:	eb41 0909 	adc.w	r9, r1, r9
 8025622:	1892      	adds	r2, r2, r2
 8025624:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 8025628:	ebb0 0a07 	subs.w	sl, r0, r7
 802562c:	eb6e 0108 	sbc.w	r1, lr, r8
 8025630:	4592      	cmp	sl, r2
 8025632:	eb71 0109 	sbcs.w	r1, r1, r9
 8025636:	d36c      	bcc.n	8025712 <mg_str_to_num+0x276>
        result += digit;
 8025638:	18ba      	adds	r2, r7, r2
 802563a:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 802563e:	f10c 0c01 	add.w	ip, ip, #1
 8025642:	3401      	adds	r4, #1
 8025644:	e7b1      	b.n	80255aa <mg_str_to_num+0x10e>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8025646:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 802564a:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 802564c:	2f05      	cmp	r7, #5
 802564e:	d832      	bhi.n	80256b6 <mg_str_to_num+0x21a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8025650:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8025652:	46b0      	mov	r8, r6
 8025654:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 8025656:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 802565a:	bf08      	it	eq
 802565c:	f1b8 3fff 	cmpeq.w	r8, #4294967295	@ 0xffffffff
 8025660:	d036      	beq.n	80256d0 <mg_str_to_num+0x234>
        if (result > max / 16) return false;  // Overflow
 8025662:	ea4f 1910 	mov.w	r9, r0, lsr #4
 8025666:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 802566a:	ea4f 171e 	mov.w	r7, lr, lsr #4
 802566e:	4591      	cmp	r9, r2
 8025670:	418f      	sbcs	r7, r1
 8025672:	d350      	bcc.n	8025716 <mg_str_to_num+0x27a>
        result *= 16;
 8025674:	0109      	lsls	r1, r1, #4
 8025676:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 802567a:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 802567c:	ebb0 0908 	subs.w	r9, r0, r8
 8025680:	eb6e 0706 	sbc.w	r7, lr, r6
 8025684:	4591      	cmp	r9, r2
 8025686:	418f      	sbcs	r7, r1
 8025688:	d347      	bcc.n	802571a <mg_str_to_num+0x27e>
        result += digit;
 802568a:	eb18 0202 	adds.w	r2, r8, r2
 802568e:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 8025692:	f10c 0c01 	add.w	ip, ip, #1
 8025696:	3401      	adds	r4, #1
      while (i < str.len) {
 8025698:	9d01      	ldr	r5, [sp, #4]
 802569a:	4565      	cmp	r5, ip
 802569c:	d918      	bls.n	80256d0 <mg_str_to_num+0x234>
        char c = str.buf[i];
 802569e:	9d00      	ldr	r5, [sp, #0]
 80256a0:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80256a4:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 80256a8:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80256aa:	2f09      	cmp	r7, #9
 80256ac:	d8cb      	bhi.n	8025646 <mg_str_to_num+0x1aa>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80256ae:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80256b0:	46b0      	mov	r8, r6
 80256b2:	17f6      	asrs	r6, r6, #31
 80256b4:	e7cf      	b.n	8025656 <mg_str_to_num+0x1ba>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80256b6:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 80256ba:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 80256bc:	2f05      	cmp	r7, #5
 80256be:	d807      	bhi.n	80256d0 <mg_str_to_num+0x234>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80256c0:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 80256c2:	46b0      	mov	r8, r6
 80256c4:	17f6      	asrs	r6, r6, #31
 80256c6:	e7c6      	b.n	8025656 <mg_str_to_num+0x1ba>
  switch (base) {
 80256c8:	2200      	movs	r2, #0
 80256ca:	4611      	mov	r1, r2
 80256cc:	4614      	mov	r4, r2
 80256ce:	e7e3      	b.n	8025698 <mg_str_to_num+0x1fc>
  if (ndigits == 0) return false;
 80256d0:	b32c      	cbz	r4, 802571e <mg_str_to_num+0x282>
  if (i != str.len) return false;
 80256d2:	9801      	ldr	r0, [sp, #4]
 80256d4:	4560      	cmp	r0, ip
 80256d6:	d124      	bne.n	8025722 <mg_str_to_num+0x286>
  if (val_len == 1) {
 80256d8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80256da:	2801      	cmp	r0, #1
 80256dc:	d009      	beq.n	80256f2 <mg_str_to_num+0x256>
  } else if (val_len == 2) {
 80256de:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80256e0:	2802      	cmp	r0, #2
 80256e2:	d008      	beq.n	80256f6 <mg_str_to_num+0x25a>
  } else if (val_len == 4) {
 80256e4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80256e6:	2804      	cmp	r0, #4
 80256e8:	d008      	beq.n	80256fc <mg_str_to_num+0x260>
    *((uint64_t *) val) = (uint64_t) result;
 80256ea:	601a      	str	r2, [r3, #0]
 80256ec:	6059      	str	r1, [r3, #4]
  return true;
 80256ee:	2001      	movs	r0, #1
 80256f0:	e719      	b.n	8025526 <mg_str_to_num+0x8a>
    *((uint8_t *) val) = (uint8_t) result;
 80256f2:	701a      	strb	r2, [r3, #0]
 80256f4:	e717      	b.n	8025526 <mg_str_to_num+0x8a>
    *((uint16_t *) val) = (uint16_t) result;
 80256f6:	801a      	strh	r2, [r3, #0]
  return true;
 80256f8:	2001      	movs	r0, #1
 80256fa:	e714      	b.n	8025526 <mg_str_to_num+0x8a>
    *((uint32_t *) val) = (uint32_t) result;
 80256fc:	601a      	str	r2, [r3, #0]
  return true;
 80256fe:	2001      	movs	r0, #1
 8025700:	e711      	b.n	8025526 <mg_str_to_num+0x8a>
  switch (base) {
 8025702:	2000      	movs	r0, #0
 8025704:	e70f      	b.n	8025526 <mg_str_to_num+0x8a>
        if (result > max / 2) return false;  // Overflow
 8025706:	2000      	movs	r0, #0
 8025708:	e70d      	b.n	8025526 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 802570a:	2000      	movs	r0, #0
 802570c:	e70b      	b.n	8025526 <mg_str_to_num+0x8a>
        if (result > max / 10) return false;  // Overflow
 802570e:	2000      	movs	r0, #0
 8025710:	e709      	b.n	8025526 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8025712:	2000      	movs	r0, #0
 8025714:	e707      	b.n	8025526 <mg_str_to_num+0x8a>
        if (result > max / 16) return false;  // Overflow
 8025716:	2000      	movs	r0, #0
 8025718:	e705      	b.n	8025526 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 802571a:	2000      	movs	r0, #0
 802571c:	e703      	b.n	8025526 <mg_str_to_num+0x8a>
  if (ndigits == 0) return false;
 802571e:	2000      	movs	r0, #0
 8025720:	e701      	b.n	8025526 <mg_str_to_num+0x8a>
  if (i != str.len) return false;
 8025722:	2000      	movs	r0, #0
 8025724:	e6ff      	b.n	8025526 <mg_str_to_num+0x8a>
 8025726:	bf00      	nop
 8025728:	cccccccd 	.word	0xcccccccd

0802572c <mg_url_decode>:
                  int is_form_url_encoded) {
 802572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025730:	b087      	sub	sp, #28
 8025732:	4606      	mov	r6, r0
 8025734:	460f      	mov	r7, r1
 8025736:	4693      	mov	fp, r2
 8025738:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 802573a:	2400      	movs	r4, #0
 802573c:	4623      	mov	r3, r4
 802573e:	e027      	b.n	8025790 <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8025740:	f103 0802 	add.w	r8, r3, #2
 8025744:	45b8      	cmp	r8, r7
 8025746:	d241      	bcs.n	80257cc <mg_url_decode+0xa0>
 8025748:	3301      	adds	r3, #1
 802574a:	18f2      	adds	r2, r6, r3
 802574c:	9203      	str	r2, [sp, #12]
 802574e:	5cf0      	ldrb	r0, [r6, r3]
 8025750:	f7fa fea8 	bl	80204a4 <isx>
 8025754:	2800      	cmp	r0, #0
 8025756:	d03c      	beq.n	80257d2 <mg_url_decode+0xa6>
 8025758:	f816 0008 	ldrb.w	r0, [r6, r8]
 802575c:	f7fa fea2 	bl	80204a4 <isx>
 8025760:	2800      	cmp	r0, #0
 8025762:	d039      	beq.n	80257d8 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8025764:	f10d 0a10 	add.w	sl, sp, #16
 8025768:	2202      	movs	r2, #2
 802576a:	9903      	ldr	r1, [sp, #12]
 802576c:	4650      	mov	r0, sl
 802576e:	f7ff f95b 	bl	8024a28 <mg_str_n>
 8025772:	2301      	movs	r3, #1
 8025774:	9300      	str	r3, [sp, #0]
 8025776:	eb0b 0304 	add.w	r3, fp, r4
 802577a:	2210      	movs	r2, #16
 802577c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8025780:	f7ff fe8c 	bl	802549c <mg_str_to_num>
        i += 2;
 8025784:	4643      	mov	r3, r8
 8025786:	e001      	b.n	802578c <mg_url_decode+0x60>
      dst[j] = src[i];
 8025788:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 802578c:	3301      	adds	r3, #1
 802578e:	462c      	mov	r4, r5
 8025790:	42bb      	cmp	r3, r7
 8025792:	d20e      	bcs.n	80257b2 <mg_url_decode+0x86>
 8025794:	1c65      	adds	r5, r4, #1
 8025796:	454d      	cmp	r5, r9
 8025798:	d20b      	bcs.n	80257b2 <mg_url_decode+0x86>
    if (src[i] == '%') {
 802579a:	5cf2      	ldrb	r2, [r6, r3]
 802579c:	2a25      	cmp	r2, #37	@ 0x25
 802579e:	d0cf      	beq.n	8025740 <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 80257a0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80257a2:	2900      	cmp	r1, #0
 80257a4:	d0f0      	beq.n	8025788 <mg_url_decode+0x5c>
 80257a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80257a8:	d1ee      	bne.n	8025788 <mg_url_decode+0x5c>
      dst[j] = ' ';
 80257aa:	2220      	movs	r2, #32
 80257ac:	f80b 2004 	strb.w	r2, [fp, r4]
 80257b0:	e7ec      	b.n	802578c <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 80257b2:	454c      	cmp	r4, r9
 80257b4:	d202      	bcs.n	80257bc <mg_url_decode+0x90>
 80257b6:	2200      	movs	r2, #0
 80257b8:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 80257bc:	42bb      	cmp	r3, r7
 80257be:	d30e      	bcc.n	80257de <mg_url_decode+0xb2>
 80257c0:	454c      	cmp	r4, r9
 80257c2:	d20f      	bcs.n	80257e4 <mg_url_decode+0xb8>
 80257c4:	4620      	mov	r0, r4
}
 80257c6:	b007      	add	sp, #28
 80257c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 80257cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80257d0:	e7f9      	b.n	80257c6 <mg_url_decode+0x9a>
 80257d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80257d6:	e7f6      	b.n	80257c6 <mg_url_decode+0x9a>
 80257d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80257dc:	e7f3      	b.n	80257c6 <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 80257de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80257e2:	e7f0      	b.n	80257c6 <mg_url_decode+0x9a>
 80257e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80257e8:	e7ed      	b.n	80257c6 <mg_url_decode+0x9a>

080257ea <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 80257ea:	b352      	cbz	r2, 8025842 <mg_http_get_var+0x58>
                    size_t dst_len) {
 80257ec:	b570      	push	{r4, r5, r6, lr}
 80257ee:	b086      	sub	sp, #24
 80257f0:	4604      	mov	r4, r0
 80257f2:	461d      	mov	r5, r3
 80257f4:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 80257f6:	b10b      	cbz	r3, 80257fc <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 80257f8:	2300      	movs	r3, #0
 80257fa:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 80257fc:	b325      	cbz	r5, 8025848 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 80257fe:	6823      	ldr	r3, [r4, #0]
 8025800:	b32b      	cbz	r3, 802584e <mg_http_get_var+0x64>
 8025802:	b339      	cbz	r1, 8025854 <mg_http_get_var+0x6a>
 8025804:	6863      	ldr	r3, [r4, #4]
 8025806:	b343      	cbz	r3, 802585a <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8025808:	a804      	add	r0, sp, #16
 802580a:	f7ff f901 	bl	8024a10 <mg_str_s>
 802580e:	9b05      	ldr	r3, [sp, #20]
 8025810:	9300      	str	r3, [sp, #0]
 8025812:	9b04      	ldr	r3, [sp, #16]
 8025814:	e894 0006 	ldmia.w	r4, {r1, r2}
 8025818:	a802      	add	r0, sp, #8
 802581a:	f7ff fbf3 	bl	8025004 <mg_http_var>
    if (v.buf == NULL) {
 802581e:	9802      	ldr	r0, [sp, #8]
 8025820:	b158      	cbz	r0, 802583a <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8025822:	2301      	movs	r3, #1
 8025824:	9300      	str	r3, [sp, #0]
 8025826:	462b      	mov	r3, r5
 8025828:	4632      	mov	r2, r6
 802582a:	9903      	ldr	r1, [sp, #12]
 802582c:	f7ff ff7e 	bl	802572c <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 8025830:	2800      	cmp	r0, #0
 8025832:	da04      	bge.n	802583e <mg_http_get_var+0x54>
 8025834:	f06f 0002 	mvn.w	r0, #2
 8025838:	e001      	b.n	802583e <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 802583a:	f06f 0003 	mvn.w	r0, #3
}
 802583e:	b006      	add	sp, #24
 8025840:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 8025842:	f06f 0001 	mvn.w	r0, #1
}
 8025846:	4770      	bx	lr
    len = -2;  // Bad destination
 8025848:	f06f 0001 	mvn.w	r0, #1
 802584c:	e7f7      	b.n	802583e <mg_http_get_var+0x54>
    len = -1;  // Bad source
 802584e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025852:	e7f4      	b.n	802583e <mg_http_get_var+0x54>
 8025854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025858:	e7f1      	b.n	802583e <mg_http_get_var+0x54>
 802585a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 802585e:	e7ee      	b.n	802583e <mg_http_get_var+0x54>

08025860 <mg_http_creds>:
                   char *pass, size_t passlen) {
 8025860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025864:	b0c4      	sub	sp, #272	@ 0x110
 8025866:	4606      	mov	r6, r0
 8025868:	460d      	mov	r5, r1
 802586a:	4617      	mov	r7, r2
 802586c:	461c      	mov	r4, r3
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 802586e:	493f      	ldr	r1, [pc, #252]	@ (802596c <mg_http_creds+0x10c>)
 8025870:	f7fd fd70 	bl	8023354 <mg_http_get_header>
  user[0] = pass[0] = '\0';
 8025874:	2300      	movs	r3, #0
 8025876:	7023      	strb	r3, [r4, #0]
 8025878:	702b      	strb	r3, [r5, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 802587a:	b1c8      	cbz	r0, 80258b0 <mg_http_creds+0x50>
 802587c:	4680      	mov	r8, r0
 802587e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8025882:	f1b9 0f06 	cmp.w	r9, #6
 8025886:	d907      	bls.n	8025898 <mg_http_creds+0x38>
 8025888:	f8d0 a000 	ldr.w	sl, [r0]
 802588c:	2206      	movs	r2, #6
 802588e:	4938      	ldr	r1, [pc, #224]	@ (8025970 <mg_http_creds+0x110>)
 8025890:	4650      	mov	r0, sl
 8025892:	f007 fb99 	bl	802cfc8 <memcmp>
 8025896:	b328      	cbz	r0, 80258e4 <mg_http_creds+0x84>
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 8025898:	f1b9 0f07 	cmp.w	r9, #7
 802589c:	d908      	bls.n	80258b0 <mg_http_creds+0x50>
 802589e:	f8d8 5000 	ldr.w	r5, [r8]
 80258a2:	2207      	movs	r2, #7
 80258a4:	4933      	ldr	r1, [pc, #204]	@ (8025974 <mg_http_creds+0x114>)
 80258a6:	4628      	mov	r0, r5
 80258a8:	f007 fb8e 	bl	802cfc8 <memcmp>
 80258ac:	2800      	cmp	r0, #0
 80258ae:	d043      	beq.n	8025938 <mg_http_creds+0xd8>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 80258b0:	4931      	ldr	r1, [pc, #196]	@ (8025978 <mg_http_creds+0x118>)
 80258b2:	4630      	mov	r0, r6
 80258b4:	f7fd fd4e 	bl	8023354 <mg_http_get_header>
 80258b8:	4605      	mov	r5, r0
 80258ba:	2800      	cmp	r0, #0
 80258bc:	d04e      	beq.n	802595c <mg_http_creds+0xfc>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 80258be:	220c      	movs	r2, #12
 80258c0:	492e      	ldr	r1, [pc, #184]	@ (802597c <mg_http_creds+0x11c>)
 80258c2:	a842      	add	r0, sp, #264	@ 0x108
 80258c4:	f7ff f8b0 	bl	8024a28 <mg_str_n>
 80258c8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80258ca:	9300      	str	r3, [sp, #0]
 80258cc:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 80258ce:	e895 0006 	ldmia.w	r5, {r1, r2}
 80258d2:	a802      	add	r0, sp, #8
 80258d4:	f7ff f8c8 	bl	8024a68 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 80258d8:	9b03      	ldr	r3, [sp, #12]
 80258da:	2b00      	cmp	r3, #0
 80258dc:	d136      	bne.n	802594c <mg_http_creds+0xec>
}
 80258de:	b044      	add	sp, #272	@ 0x110
 80258e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 80258e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80258e8:	aa02      	add	r2, sp, #8
 80258ea:	f1a9 0106 	sub.w	r1, r9, #6
 80258ee:	f10a 0006 	add.w	r0, sl, #6
 80258f2:	f7fd fba3 	bl	802303c <mg_base64_decode>
 80258f6:	4606      	mov	r6, r0
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 80258f8:	4602      	mov	r2, r0
 80258fa:	213a      	movs	r1, #58	@ 0x3a
 80258fc:	a802      	add	r0, sp, #8
 80258fe:	f7ea fc7f 	bl	8010200 <memchr>
    if (p != NULL) {
 8025902:	4680      	mov	r8, r0
 8025904:	2800      	cmp	r0, #0
 8025906:	d0ea      	beq.n	80258de <mg_http_creds+0x7e>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 8025908:	ab02      	add	r3, sp, #8
 802590a:	eba0 0a03 	sub.w	sl, r0, r3
 802590e:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8025980 <mg_http_creds+0x120>
 8025912:	9300      	str	r3, [sp, #0]
 8025914:	4653      	mov	r3, sl
 8025916:	464a      	mov	r2, r9
 8025918:	4639      	mov	r1, r7
 802591a:	4628      	mov	r0, r5
 802591c:	f7fe f9f0 	bl	8023d00 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 8025920:	eba6 030a 	sub.w	r3, r6, sl
 8025924:	f108 0201 	add.w	r2, r8, #1
 8025928:	9200      	str	r2, [sp, #0]
 802592a:	3b01      	subs	r3, #1
 802592c:	464a      	mov	r2, r9
 802592e:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8025930:	4620      	mov	r0, r4
 8025932:	f7fe f9e5 	bl	8023d00 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8025936:	e7d2      	b.n	80258de <mg_http_creds+0x7e>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 8025938:	3507      	adds	r5, #7
 802593a:	9500      	str	r5, [sp, #0]
 802593c:	f1a9 0307 	sub.w	r3, r9, #7
 8025940:	4a0f      	ldr	r2, [pc, #60]	@ (8025980 <mg_http_creds+0x120>)
 8025942:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8025944:	4620      	mov	r0, r4
 8025946:	f7fe f9db 	bl	8023d00 <mg_snprintf>
 802594a:	e7c8      	b.n	80258de <mg_http_creds+0x7e>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 802594c:	9a02      	ldr	r2, [sp, #8]
 802594e:	9200      	str	r2, [sp, #0]
 8025950:	4a0b      	ldr	r2, [pc, #44]	@ (8025980 <mg_http_creds+0x120>)
 8025952:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8025954:	4620      	mov	r0, r4
 8025956:	f7fe f9d3 	bl	8023d00 <mg_snprintf>
 802595a:	e7c0      	b.n	80258de <mg_http_creds+0x7e>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 802595c:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 802595e:	4622      	mov	r2, r4
 8025960:	4906      	ldr	r1, [pc, #24]	@ (802597c <mg_http_creds+0x11c>)
 8025962:	f106 0010 	add.w	r0, r6, #16
 8025966:	f7ff ff40 	bl	80257ea <mg_http_get_var>
}
 802596a:	e7b8      	b.n	80258de <mg_http_creds+0x7e>
 802596c:	0803ae84 	.word	0x0803ae84
 8025970:	0803ae94 	.word	0x0803ae94
 8025974:	0803ae9c 	.word	0x0803ae9c
 8025978:	0803aea4 	.word	0x0803aea4
 802597c:	0803721c 	.word	0x0803721c
 8025980:	0803acb4 	.word	0x0803acb4

08025984 <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 8025984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025988:	b0ae      	sub	sp, #184	@ 0xb8
 802598a:	4604      	mov	r4, r0
 802598c:	460d      	mov	r5, r1
 802598e:	4616      	mov	r6, r2
 8025990:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8025992:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8025996:	f1b8 0f00 	cmp.w	r8, #0
 802599a:	d04f      	beq.n	8025a3c <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 802599c:	942a      	str	r4, [sp, #168]	@ 0xa8
 802599e:	952b      	str	r5, [sp, #172]	@ 0xac
 80259a0:	962c      	str	r6, [sp, #176]	@ 0xb0
 80259a2:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 80259a4:	2300      	movs	r3, #0
 80259a6:	9300      	str	r3, [sp, #0]
 80259a8:	2380      	movs	r3, #128	@ 0x80
 80259aa:	aa07      	add	r2, sp, #28
 80259ac:	68e9      	ldr	r1, [r5, #12]
 80259ae:	68a8      	ldr	r0, [r5, #8]
 80259b0:	f7ff febc 	bl	802572c <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 80259b4:	1e02      	subs	r2, r0, #0
 80259b6:	dd44      	ble.n	8025a42 <listdir+0xbe>
 80259b8:	a907      	add	r1, sp, #28
 80259ba:	a805      	add	r0, sp, #20
 80259bc:	f7ff f834 	bl	8024a28 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 80259c0:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 80259c2:	2a00      	cmp	r2, #0
 80259c4:	d044      	beq.n	8025a50 <listdir+0xcc>
 80259c6:	4923      	ldr	r1, [pc, #140]	@ (8025a54 <listdir+0xd0>)
 80259c8:	4620      	mov	r0, r4
 80259ca:	f7fe fe71 	bl	80246b0 <mg_printf>
  off = c->send.len;  // Start of body
 80259ce:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 80259d0:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 80259d2:	9b05      	ldr	r3, [sp, #20]
 80259d4:	9303      	str	r3, [sp, #12]
 80259d6:	9202      	str	r2, [sp, #8]
 80259d8:	491f      	ldr	r1, [pc, #124]	@ (8025a58 <listdir+0xd4>)
 80259da:	9101      	str	r1, [sp, #4]
 80259dc:	491f      	ldr	r1, [pc, #124]	@ (8025a5c <listdir+0xd8>)
 80259de:	9100      	str	r1, [sp, #0]
 80259e0:	491f      	ldr	r1, [pc, #124]	@ (8025a60 <listdir+0xdc>)
 80259e2:	4620      	mov	r0, r4
 80259e4:	f7fe fe64 	bl	80246b0 <mg_printf>
  mg_printf(c, "%s",
 80259e8:	4a1e      	ldr	r2, [pc, #120]	@ (8025a64 <listdir+0xe0>)
 80259ea:	491f      	ldr	r1, [pc, #124]	@ (8025a68 <listdir+0xe4>)
 80259ec:	4620      	mov	r0, r4
 80259ee:	f7fe fe5f 	bl	80246b0 <mg_printf>
  fs->ls(dir, printdirentry, &d);
 80259f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80259f6:	aa2a      	add	r2, sp, #168	@ 0xa8
 80259f8:	491c      	ldr	r1, [pc, #112]	@ (8025a6c <listdir+0xe8>)
 80259fa:	4638      	mov	r0, r7
 80259fc:	4798      	blx	r3
  mg_printf(c,
 80259fe:	4a1c      	ldr	r2, [pc, #112]	@ (8025a70 <listdir+0xec>)
 8025a00:	491c      	ldr	r1, [pc, #112]	@ (8025a74 <listdir+0xf0>)
 8025a02:	4620      	mov	r0, r4
 8025a04:	f7fe fe54 	bl	80246b0 <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8025a08:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8025a0a:	1b5b      	subs	r3, r3, r5
 8025a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8025a78 <listdir+0xf4>)
 8025a0e:	210a      	movs	r1, #10
 8025a10:	a827      	add	r0, sp, #156	@ 0x9c
 8025a12:	f7fe f975 	bl	8023d00 <mg_snprintf>
 8025a16:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 8025a18:	280a      	cmp	r0, #10
 8025a1a:	d900      	bls.n	8025a1e <listdir+0x9a>
 8025a1c:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 8025a1e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8025a20:	3d0c      	subs	r5, #12
 8025a22:	a927      	add	r1, sp, #156	@ 0x9c
 8025a24:	4428      	add	r0, r5
 8025a26:	f008 fd9f 	bl	802e568 <memcpy>
  c->is_resp = 0;                          // Mark response end
 8025a2a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8025a2e:	f36f 13c7 	bfc	r3, #7, #1
 8025a32:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8025a36:	b02e      	add	sp, #184	@ 0xb8
 8025a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8025a3c:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8025a80 <listdir+0xfc>
 8025a40:	e7ac      	b.n	802599c <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8025a42:	ab05      	add	r3, sp, #20
 8025a44:	3508      	adds	r5, #8
 8025a46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025a4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8025a4e:	e7b7      	b.n	80259c0 <listdir+0x3c>
  mg_printf(c,
 8025a50:	4a0a      	ldr	r2, [pc, #40]	@ (8025a7c <listdir+0xf8>)
 8025a52:	e7b8      	b.n	80259c6 <listdir+0x42>
 8025a54:	0803aeac 	.word	0x0803aeac
 8025a58:	0803b08c 	.word	0x0803b08c
 8025a5c:	0803b250 	.word	0x0803b250
 8025a60:	0803af04 	.word	0x0803af04
 8025a64:	0803b418 	.word	0x0803b418
 8025a68:	0803b87c 	.word	0x0803b87c
 8025a6c:	0802722d 	.word	0x0802722d
 8025a70:	08038d78 	.word	0x08038d78
 8025a74:	0803b468 	.word	0x0803b468
 8025a78:	080369f0 	.word	0x080369f0
 8025a7c:	08037490 	.word	0x08037490
 8025a80:	20000130 	.word	0x20000130

08025a84 <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8025a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025a88:	b087      	sub	sp, #28
 8025a8a:	461f      	mov	r7, r3
  int i = 0, n = 0;
 8025a8c:	2300      	movs	r3, #0
 8025a8e:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 8025a90:	2902      	cmp	r1, #2
 8025a92:	dd42      	ble.n	8025b1a <skip_chunk+0x96>
 8025a94:	4606      	mov	r6, r0
 8025a96:	460d      	mov	r5, r1
 8025a98:	4690      	mov	r8, r2
  int i = 0, n = 0;
 8025a9a:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 8025a9c:	42ac      	cmp	r4, r5
 8025a9e:	da05      	bge.n	8025aac <skip_chunk+0x28>
 8025aa0:	5d30      	ldrb	r0, [r6, r4]
 8025aa2:	f7fb f92a 	bl	8020cfa <is_hex_digit>
 8025aa6:	b108      	cbz	r0, 8025aac <skip_chunk+0x28>
 8025aa8:	3401      	adds	r4, #1
 8025aaa:	e7f7      	b.n	8025a9c <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 8025aac:	2c00      	cmp	r4, #0
 8025aae:	d036      	beq.n	8025b1e <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8025ab0:	2c08      	cmp	r4, #8
 8025ab2:	dc37      	bgt.n	8025b24 <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8025ab4:	42ac      	cmp	r4, r5
 8025ab6:	da38      	bge.n	8025b2a <skip_chunk+0xa6>
 8025ab8:	4622      	mov	r2, r4
 8025aba:	5d33      	ldrb	r3, [r6, r4]
 8025abc:	2b0d      	cmp	r3, #13
 8025abe:	d137      	bne.n	8025b30 <skip_chunk+0xac>
 8025ac0:	1933      	adds	r3, r6, r4
 8025ac2:	785b      	ldrb	r3, [r3, #1]
 8025ac4:	2b0a      	cmp	r3, #10
 8025ac6:	d136      	bne.n	8025b36 <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8025ac8:	f10d 0910 	add.w	r9, sp, #16
 8025acc:	4631      	mov	r1, r6
 8025ace:	4648      	mov	r0, r9
 8025ad0:	f7fe ffaa 	bl	8024a28 <mg_str_n>
 8025ad4:	2304      	movs	r3, #4
 8025ad6:	9300      	str	r3, [sp, #0]
 8025ad8:	ab03      	add	r3, sp, #12
 8025ada:	2210      	movs	r2, #16
 8025adc:	e899 0003 	ldmia.w	r9, {r0, r1}
 8025ae0:	f7ff fcdc 	bl	802549c <mg_str_to_num>
 8025ae4:	b350      	cbz	r0, 8025b3c <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8025ae6:	9b03      	ldr	r3, [sp, #12]
 8025ae8:	2b00      	cmp	r3, #0
 8025aea:	db2a      	blt.n	8025b42 <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8025aec:	1b2d      	subs	r5, r5, r4
 8025aee:	3d03      	subs	r5, #3
 8025af0:	42ab      	cmp	r3, r5
 8025af2:	da29      	bge.n	8025b48 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8025af4:	4423      	add	r3, r4
 8025af6:	18f2      	adds	r2, r6, r3
 8025af8:	7892      	ldrb	r2, [r2, #2]
 8025afa:	2a0d      	cmp	r2, #13
 8025afc:	d126      	bne.n	8025b4c <skip_chunk+0xc8>
 8025afe:	441e      	add	r6, r3
 8025b00:	78f3      	ldrb	r3, [r6, #3]
 8025b02:	2b0a      	cmp	r3, #10
 8025b04:	d125      	bne.n	8025b52 <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 8025b06:	3402      	adds	r4, #2
 8025b08:	f8c8 4000 	str.w	r4, [r8]
 8025b0c:	9b03      	ldr	r3, [sp, #12]
 8025b0e:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 8025b10:	441c      	add	r4, r3
 8025b12:	1ca0      	adds	r0, r4, #2
}
 8025b14:	b007      	add	sp, #28
 8025b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 8025b1a:	2000      	movs	r0, #0
 8025b1c:	e7fa      	b.n	8025b14 <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 8025b1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025b22:	e7f7      	b.n	8025b14 <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8025b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025b28:	e7f4      	b.n	8025b14 <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8025b2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025b2e:	e7f1      	b.n	8025b14 <skip_chunk+0x90>
 8025b30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025b34:	e7ee      	b.n	8025b14 <skip_chunk+0x90>
 8025b36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025b3a:	e7eb      	b.n	8025b14 <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 8025b3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025b40:	e7e8      	b.n	8025b14 <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8025b42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025b46:	e7e5      	b.n	8025b14 <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8025b48:	2000      	movs	r0, #0
 8025b4a:	e7e3      	b.n	8025b14 <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8025b4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025b50:	e7e0      	b.n	8025b14 <skip_chunk+0x90>
 8025b52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025b56:	e7dd      	b.n	8025b14 <skip_chunk+0x90>

08025b58 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8025b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025b5c:	b086      	sub	sp, #24
 8025b5e:	ac02      	add	r4, sp, #8
 8025b60:	e884 0003 	stmia.w	r4, {r0, r1}
 8025b64:	4617      	mov	r7, r2
 8025b66:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8025b68:	2400      	movs	r4, #0
 8025b6a:	4621      	mov	r1, r4
 8025b6c:	e01c      	b.n	8025ba8 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8025b6e:	f101 0805 	add.w	r8, r1, #5
 8025b72:	45a8      	cmp	r8, r5
 8025b74:	d221      	bcs.n	8025bba <mg_json_unescape+0x62>
 8025b76:	185a      	adds	r2, r3, r1
 8025b78:	7852      	ldrb	r2, [r2, #1]
 8025b7a:	2a75      	cmp	r2, #117	@ 0x75
 8025b7c:	d11d      	bne.n	8025bba <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8025b7e:	3102      	adds	r1, #2
 8025b80:	ad04      	add	r5, sp, #16
 8025b82:	2204      	movs	r2, #4
 8025b84:	4419      	add	r1, r3
 8025b86:	4628      	mov	r0, r5
 8025b88:	f7fe ff4e 	bl	8024a28 <mg_str_n>
 8025b8c:	2301      	movs	r3, #1
 8025b8e:	9300      	str	r3, [sp, #0]
 8025b90:	193b      	adds	r3, r7, r4
 8025b92:	2210      	movs	r2, #16
 8025b94:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025b98:	f7ff fc80 	bl	802549c <mg_str_to_num>
 8025b9c:	b308      	cbz	r0, 8025be2 <mg_json_unescape+0x8a>
      i += 5;
 8025b9e:	4641      	mov	r1, r8
 8025ba0:	e000      	b.n	8025ba4 <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 8025ba2:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8025ba4:	3101      	adds	r1, #1
 8025ba6:	3401      	adds	r4, #1
 8025ba8:	9d03      	ldr	r5, [sp, #12]
 8025baa:	428d      	cmp	r5, r1
 8025bac:	d914      	bls.n	8025bd8 <mg_json_unescape+0x80>
 8025bae:	42b4      	cmp	r4, r6
 8025bb0:	d212      	bcs.n	8025bd8 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8025bb2:	9b02      	ldr	r3, [sp, #8]
 8025bb4:	5c58      	ldrb	r0, [r3, r1]
 8025bb6:	285c      	cmp	r0, #92	@ 0x5c
 8025bb8:	d0d9      	beq.n	8025b6e <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8025bba:	285c      	cmp	r0, #92	@ 0x5c
 8025bbc:	d1f1      	bne.n	8025ba2 <mg_json_unescape+0x4a>
 8025bbe:	f101 0801 	add.w	r8, r1, #1
 8025bc2:	45a8      	cmp	r8, r5
 8025bc4:	d2ed      	bcs.n	8025ba2 <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 8025bc6:	2100      	movs	r1, #0
 8025bc8:	f813 0008 	ldrb.w	r0, [r3, r8]
 8025bcc:	f7fb f8ba 	bl	8020d44 <json_esc>
      if (c == 0) return false;
 8025bd0:	b150      	cbz	r0, 8025be8 <mg_json_unescape+0x90>
      to[j] = c;
 8025bd2:	5538      	strb	r0, [r7, r4]
      i++;
 8025bd4:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8025bd6:	e7e5      	b.n	8025ba4 <mg_json_unescape+0x4c>
  if (j >= n) return false;
 8025bd8:	42b4      	cmp	r4, r6
 8025bda:	d207      	bcs.n	8025bec <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 8025bdc:	2300      	movs	r3, #0
 8025bde:	553b      	strb	r3, [r7, r4]
  return true;
 8025be0:	2001      	movs	r0, #1
}
 8025be2:	b006      	add	sp, #24
 8025be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 8025be8:	2000      	movs	r0, #0
 8025bea:	e7fa      	b.n	8025be2 <mg_json_unescape+0x8a>
  if (j >= n) return false;
 8025bec:	2000      	movs	r0, #0
 8025bee:	e7f8      	b.n	8025be2 <mg_json_unescape+0x8a>

08025bf0 <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 8025bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025bf2:	b087      	sub	sp, #28
 8025bf4:	46ec      	mov	ip, sp
 8025bf6:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 8025bfa:	2300      	movs	r3, #0
 8025bfc:	9303      	str	r3, [sp, #12]
 8025bfe:	ab03      	add	r3, sp, #12
 8025c00:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8025c04:	f7fd fbd6 	bl	80233b4 <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 8025c08:	1e04      	subs	r4, r0, #0
 8025c0a:	db25      	blt.n	8025c58 <mg_json_get_str+0x68>
 8025c0c:	9903      	ldr	r1, [sp, #12]
 8025c0e:	2901      	cmp	r1, #1
 8025c10:	dd24      	ble.n	8025c5c <mg_json_get_str+0x6c>
 8025c12:	9e00      	ldr	r6, [sp, #0]
 8025c14:	5d33      	ldrb	r3, [r6, r4]
 8025c16:	2b22      	cmp	r3, #34	@ 0x22
 8025c18:	d003      	beq.n	8025c22 <mg_json_get_str+0x32>
  char *result = NULL;
 8025c1a:	2500      	movs	r5, #0
}
 8025c1c:	4628      	mov	r0, r5
 8025c1e:	b007      	add	sp, #28
 8025c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8025c22:	2001      	movs	r0, #1
 8025c24:	f7fd f93c 	bl	8022ea0 <mg_calloc>
 8025c28:	4605      	mov	r5, r0
 8025c2a:	2800      	cmp	r0, #0
 8025c2c:	d0f6      	beq.n	8025c1c <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 8025c2e:	1c61      	adds	r1, r4, #1
 8025c30:	9f03      	ldr	r7, [sp, #12]
 8025c32:	ac04      	add	r4, sp, #16
 8025c34:	1eba      	subs	r2, r7, #2
 8025c36:	4431      	add	r1, r6
 8025c38:	4620      	mov	r0, r4
 8025c3a:	f7fe fef5 	bl	8024a28 <mg_str_n>
 8025c3e:	463b      	mov	r3, r7
 8025c40:	462a      	mov	r2, r5
 8025c42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025c46:	f7ff ff87 	bl	8025b58 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8025c4a:	2800      	cmp	r0, #0
 8025c4c:	d1e6      	bne.n	8025c1c <mg_json_get_str+0x2c>
      free(result);
 8025c4e:	4628      	mov	r0, r5
 8025c50:	f7f5 fa84 	bl	801b15c <vPortFree>
      result = NULL;
 8025c54:	2500      	movs	r5, #0
 8025c56:	e7e1      	b.n	8025c1c <mg_json_get_str+0x2c>
  char *result = NULL;
 8025c58:	2500      	movs	r5, #0
 8025c5a:	e7df      	b.n	8025c1c <mg_json_get_str+0x2c>
 8025c5c:	2500      	movs	r5, #0
 8025c5e:	e7dd      	b.n	8025c1c <mg_json_get_str+0x2c>

08025c60 <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 8025c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025c64:	b08a      	sub	sp, #40	@ 0x28
 8025c66:	ab02      	add	r3, sp, #8
 8025c68:	e883 0003 	stmia.w	r3, {r0, r1}
 8025c6c:	4617      	mov	r7, r2
  addr->scope_id = 0;
 8025c6e:	2300      	movs	r3, #0
 8025c70:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8025c72:	2902      	cmp	r1, #2
 8025c74:	d904      	bls.n	8025c80 <mg_aton6+0x20>
 8025c76:	460b      	mov	r3, r1
 8025c78:	4602      	mov	r2, r0
 8025c7a:	7801      	ldrb	r1, [r0, #0]
 8025c7c:	295b      	cmp	r1, #91	@ 0x5b
 8025c7e:	d00f      	beq.n	8025ca0 <mg_aton6+0x40>
  if (mg_v4mapped(str, addr)) return true;
 8025c80:	463a      	mov	r2, r7
 8025c82:	ab02      	add	r3, sp, #8
 8025c84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025c88:	f7fe ff40 	bl	8024b0c <mg_v4mapped>
 8025c8c:	4680      	mov	r8, r0
 8025c8e:	2800      	cmp	r0, #0
 8025c90:	f040 8087 	bne.w	8025da2 <mg_aton6+0x142>
  size_t i, j = 0, n = 0, dc = 42;
 8025c94:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 8025c98:	2600      	movs	r6, #0
 8025c9a:	4635      	mov	r5, r6
  for (i = 0; i < str.len; i++) {
 8025c9c:	4634      	mov	r4, r6
 8025c9e:	e020      	b.n	8025ce2 <mg_aton6+0x82>
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8025ca0:	3201      	adds	r2, #1
 8025ca2:	9202      	str	r2, [sp, #8]
 8025ca4:	3b02      	subs	r3, #2
 8025ca6:	9303      	str	r3, [sp, #12]
 8025ca8:	e7ea      	b.n	8025c80 <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 8025caa:	2300      	movs	r3, #0
 8025cac:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 8025cae:	1ceb      	adds	r3, r5, #3
 8025cb0:	42a3      	cmp	r3, r4
 8025cb2:	d376      	bcc.n	8025da2 <mg_aton6+0x142>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 8025cb4:	1b62      	subs	r2, r4, r5
 8025cb6:	f10d 0a18 	add.w	sl, sp, #24
 8025cba:	3201      	adds	r2, #1
 8025cbc:	4429      	add	r1, r5
 8025cbe:	4650      	mov	r0, sl
 8025cc0:	f7fe feb2 	bl	8024a28 <mg_str_n>
 8025cc4:	2304      	movs	r3, #4
 8025cc6:	9300      	str	r3, [sp, #0]
 8025cc8:	ab05      	add	r3, sp, #20
 8025cca:	2210      	movs	r2, #16
 8025ccc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8025cd0:	f7ff fbe4 	bl	802549c <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 8025cd4:	9b05      	ldr	r3, [sp, #20]
 8025cd6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8025cda:	55ba      	strb	r2, [r7, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 8025cdc:	1c72      	adds	r2, r6, #1
 8025cde:	54bb      	strb	r3, [r7, r2]
  for (i = 0; i < str.len; i++) {
 8025ce0:	3401      	adds	r4, #1
 8025ce2:	9803      	ldr	r0, [sp, #12]
 8025ce4:	42a0      	cmp	r0, r4
 8025ce6:	d941      	bls.n	8025d6c <mg_aton6+0x10c>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8025ce8:	9902      	ldr	r1, [sp, #8]
 8025cea:	5d0a      	ldrb	r2, [r1, r4]
 8025cec:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8025cf0:	b2db      	uxtb	r3, r3
 8025cf2:	2b09      	cmp	r3, #9
 8025cf4:	d9d9      	bls.n	8025caa <mg_aton6+0x4a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8025cf6:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 8025cfa:	b2db      	uxtb	r3, r3
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8025cfc:	2b05      	cmp	r3, #5
 8025cfe:	d9d4      	bls.n	8025caa <mg_aton6+0x4a>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8025d00:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 8025d04:	b2db      	uxtb	r3, r3
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8025d06:	2b05      	cmp	r3, #5
 8025d08:	d9cf      	bls.n	8025caa <mg_aton6+0x4a>
    } else if (str.buf[i] == ':') {
 8025d0a:	2a3a      	cmp	r2, #58	@ 0x3a
 8025d0c:	d119      	bne.n	8025d42 <mg_aton6+0xe2>
      j = i + 1;
 8025d0e:	1c65      	adds	r5, r4, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 8025d10:	b12c      	cbz	r4, 8025d1e <mg_aton6+0xbe>
 8025d12:	190b      	adds	r3, r1, r4
 8025d14:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8025d18:	2b3a      	cmp	r3, #58	@ 0x3a
 8025d1a:	d007      	beq.n	8025d2c <mg_aton6+0xcc>
        n += 2;
 8025d1c:	3602      	adds	r6, #2
      if (n > 14) return false;
 8025d1e:	2e0e      	cmp	r6, #14
 8025d20:	d83f      	bhi.n	8025da2 <mg_aton6+0x142>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8025d22:	1c73      	adds	r3, r6, #1
 8025d24:	2200      	movs	r2, #0
 8025d26:	54fa      	strb	r2, [r7, r3]
 8025d28:	55ba      	strb	r2, [r7, r6]
 8025d2a:	e7d9      	b.n	8025ce0 <mg_aton6+0x80>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8025d2c:	2c01      	cmp	r4, #1
 8025d2e:	d906      	bls.n	8025d3e <mg_aton6+0xde>
 8025d30:	4421      	add	r1, r4
 8025d32:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8025d36:	2b3a      	cmp	r3, #58	@ 0x3a
 8025d38:	d033      	beq.n	8025da2 <mg_aton6+0x142>
        dc = n;  // Double colon
 8025d3a:	46b1      	mov	r9, r6
 8025d3c:	e7ef      	b.n	8025d1e <mg_aton6+0xbe>
 8025d3e:	46b1      	mov	r9, r6
 8025d40:	e7ed      	b.n	8025d1e <mg_aton6+0xbe>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 8025d42:	2a25      	cmp	r2, #37	@ 0x25
 8025d44:	d12d      	bne.n	8025da2 <mg_aton6+0x142>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8025d46:	1c63      	adds	r3, r4, #1
 8025d48:	1b02      	subs	r2, r0, r4
 8025d4a:	ac08      	add	r4, sp, #32
 8025d4c:	3a01      	subs	r2, #1
 8025d4e:	4419      	add	r1, r3
 8025d50:	4620      	mov	r0, r4
 8025d52:	f7fe fe69 	bl	8024a28 <mg_str_n>
 8025d56:	2301      	movs	r3, #1
 8025d58:	9300      	str	r3, [sp, #0]
 8025d5a:	f107 0312 	add.w	r3, r7, #18
 8025d5e:	220a      	movs	r2, #10
 8025d60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025d64:	f7ff fb9a 	bl	802549c <mg_str_to_num>
 8025d68:	4680      	mov	r8, r0
 8025d6a:	e01a      	b.n	8025da2 <mg_aton6+0x142>
  if (n < 14 && dc == 42) return false;
 8025d6c:	2e0d      	cmp	r6, #13
 8025d6e:	d814      	bhi.n	8025d9a <mg_aton6+0x13a>
 8025d70:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 8025d74:	d015      	beq.n	8025da2 <mg_aton6+0x142>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 8025d76:	eba9 0006 	sub.w	r0, r9, r6
 8025d7a:	300e      	adds	r0, #14
 8025d7c:	eb07 0409 	add.w	r4, r7, r9
 8025d80:	eba6 0209 	sub.w	r2, r6, r9
 8025d84:	3202      	adds	r2, #2
 8025d86:	4621      	mov	r1, r4
 8025d88:	4438      	add	r0, r7
 8025d8a:	f007 f997 	bl	802d0bc <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 8025d8e:	f1c6 020e 	rsb	r2, r6, #14
 8025d92:	2100      	movs	r1, #0
 8025d94:	4620      	mov	r0, r4
 8025d96:	f007 f9ab 	bl	802d0f0 <memset>
  addr->is_ip6 = true;
 8025d9a:	f04f 0801 	mov.w	r8, #1
 8025d9e:	f887 8013 	strb.w	r8, [r7, #19]
}
 8025da2:	4640      	mov	r0, r8
 8025da4:	b00a      	add	sp, #40	@ 0x28
 8025da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08025daa <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 8025daa:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8025dac:	2400      	movs	r4, #0
 8025dae:	600c      	str	r4, [r1, #0]
 8025db0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8025db4:	2200      	movs	r2, #0
 8025db6:	2300      	movs	r3, #0
 8025db8:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8025dbc:	9b01      	ldr	r3, [sp, #4]
 8025dbe:	618b      	str	r3, [r1, #24]
 8025dc0:	9b02      	ldr	r3, [sp, #8]
 8025dc2:	61cb      	str	r3, [r1, #28]
 8025dc4:	9b03      	ldr	r3, [sp, #12]
 8025dc6:	620b      	str	r3, [r1, #32]
 8025dc8:	6803      	ldr	r3, [r0, #0]
 8025dca:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 8025dcc:	6001      	str	r1, [r0, #0]
}
 8025dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025dd2:	4770      	bx	lr

08025dd4 <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 8025dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025dd6:	b085      	sub	sp, #20
 8025dd8:	4604      	mov	r4, r0
 8025dda:	4616      	mov	r6, r2
 8025ddc:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8025dde:	2128      	movs	r1, #40	@ 0x28
 8025de0:	2001      	movs	r0, #1
 8025de2:	f7fd f85d 	bl	8022ea0 <mg_calloc>
  if (t != NULL) {
 8025de6:	4607      	mov	r7, r0
 8025de8:	b180      	cbz	r0, 8025e0c <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8025dea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025dec:	9302      	str	r3, [sp, #8]
 8025dee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025df0:	9301      	str	r3, [sp, #4]
 8025df2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025df4:	9300      	str	r3, [sp, #0]
 8025df6:	4632      	mov	r2, r6
 8025df8:	462b      	mov	r3, r5
 8025dfa:	4601      	mov	r1, r0
 8025dfc:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8025e00:	f7ff ffd3 	bl	8025daa <mg_timer_init>
    t->id = mgr->timerid++;
 8025e04:	6a23      	ldr	r3, [r4, #32]
 8025e06:	1c5a      	adds	r2, r3, #1
 8025e08:	6222      	str	r2, [r4, #32]
 8025e0a:	603b      	str	r3, [r7, #0]
}
 8025e0c:	4638      	mov	r0, r7
 8025e0e:	b005      	add	sp, #20
 8025e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025e12:	0000      	movs	r0, r0
 8025e14:	0000      	movs	r0, r0
	...

08025e18 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8025e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e1c:	4698      	mov	r8, r3
 8025e1e:	9906      	ldr	r1, [sp, #24]
 8025e20:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8025e22:	188e      	adds	r6, r1, r2
 8025e24:	eb43 0504 	adc.w	r5, r3, r4
 8025e28:	6847      	ldr	r7, [r0, #4]
 8025e2a:	6803      	ldr	r3, [r0, #0]
 8025e2c:	429e      	cmp	r6, r3
 8025e2e:	eb75 0707 	sbcs.w	r7, r5, r7
 8025e32:	d203      	bcs.n	8025e3c <mg_timer_expired+0x24>
 8025e34:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8025e78 <mg_timer_expired+0x60>
 8025e38:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8025e3c:	6847      	ldr	r7, [r0, #4]
 8025e3e:	6803      	ldr	r3, [r0, #0]
 8025e40:	431f      	orrs	r7, r3
 8025e42:	d101      	bne.n	8025e48 <mg_timer_expired+0x30>
 8025e44:	6006      	str	r6, [r0, #0]
 8025e46:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 8025e48:	6807      	ldr	r7, [r0, #0]
 8025e4a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8025e4e:	42b9      	cmp	r1, r7
 8025e50:	eb74 0e0c 	sbcs.w	lr, r4, ip
 8025e54:	d30e      	bcc.n	8025e74 <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8025e56:	1bc9      	subs	r1, r1, r7
 8025e58:	eb64 040c 	sbc.w	r4, r4, ip
 8025e5c:	428a      	cmp	r2, r1
 8025e5e:	eb78 0404 	sbcs.w	r4, r8, r4
 8025e62:	d302      	bcc.n	8025e6a <mg_timer_expired+0x52>
 8025e64:	18be      	adds	r6, r7, r2
 8025e66:	eb4c 0508 	adc.w	r5, ip, r8
 8025e6a:	6006      	str	r6, [r0, #0]
 8025e6c:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 8025e6e:	2001      	movs	r0, #1
}
 8025e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 8025e74:	2000      	movs	r0, #0
 8025e76:	e7fb      	b.n	8025e70 <mg_timer_expired+0x58>
	...

08025e80 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8025e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e84:	b082      	sub	sp, #8
 8025e86:	4617      	mov	r7, r2
 8025e88:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 8025e8a:	6804      	ldr	r4, [r0, #0]
 8025e8c:	e019      	b.n	8025ec2 <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8025e8e:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8025e90:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8025e94:	9700      	str	r7, [sp, #0]
 8025e96:	9601      	str	r6, [sp, #4]
 8025e98:	f104 0010 	add.w	r0, r4, #16
 8025e9c:	f7ff ffbc 	bl	8025e18 <mg_timer_expired>
    tmp = t->next;
 8025ea0:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 8025ea4:	b905      	cbnz	r5, 8025ea8 <mg_timer_poll+0x28>
 8025ea6:	b158      	cbz	r0, 8025ec0 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8025ea8:	69a3      	ldr	r3, [r4, #24]
 8025eaa:	f003 0305 	and.w	r3, r3, #5
 8025eae:	2b04      	cmp	r3, #4
 8025eb0:	d002      	beq.n	8025eb8 <mg_timer_poll+0x38>
      t->fn(t->arg);
 8025eb2:	69e3      	ldr	r3, [r4, #28]
 8025eb4:	6a20      	ldr	r0, [r4, #32]
 8025eb6:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 8025eb8:	69a1      	ldr	r1, [r4, #24]
 8025eba:	f041 0104 	orr.w	r1, r1, #4
 8025ebe:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8025ec0:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 8025ec2:	b164      	cbz	r4, 8025ede <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8025ec4:	6923      	ldr	r3, [r4, #16]
 8025ec6:	6962      	ldr	r2, [r4, #20]
 8025ec8:	4313      	orrs	r3, r2
 8025eca:	d1e0      	bne.n	8025e8e <mg_timer_poll+0xe>
 8025ecc:	69a3      	ldr	r3, [r4, #24]
 8025ece:	f003 0306 	and.w	r3, r3, #6
 8025ed2:	2b02      	cmp	r3, #2
 8025ed4:	d001      	beq.n	8025eda <mg_timer_poll+0x5a>
 8025ed6:	2500      	movs	r5, #0
 8025ed8:	e7da      	b.n	8025e90 <mg_timer_poll+0x10>
 8025eda:	2501      	movs	r5, #1
 8025edc:	e7d8      	b.n	8025e90 <mg_timer_poll+0x10>
}
 8025ede:	b002      	add	sp, #8
 8025ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08025ee4 <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8025ee4:	b118      	cbz	r0, 8025eee <mg_tls_recv+0xa>
 8025ee6:	b121      	cbz	r1, 8025ef2 <mg_tls_recv+0xe>
 8025ee8:	b92a      	cbnz	r2, 8025ef6 <mg_tls_recv+0x12>
 8025eea:	2000      	movs	r0, #0
 8025eec:	4770      	bx	lr
 8025eee:	2000      	movs	r0, #0
 8025ef0:	4770      	bx	lr
 8025ef2:	2000      	movs	r0, #0
 8025ef4:	4770      	bx	lr
 8025ef6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8025efa:	4770      	bx	lr

08025efc <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8025efc:	b118      	cbz	r0, 8025f06 <mg_tls_send+0xa>
 8025efe:	b121      	cbz	r1, 8025f0a <mg_tls_send+0xe>
 8025f00:	b92a      	cbnz	r2, 8025f0e <mg_tls_send+0x12>
 8025f02:	2000      	movs	r0, #0
 8025f04:	4770      	bx	lr
 8025f06:	2000      	movs	r0, #0
 8025f08:	4770      	bx	lr
 8025f0a:	2000      	movs	r0, #0
 8025f0c:	4770      	bx	lr
 8025f0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8025f12:	4770      	bx	lr

08025f14 <mg_tls_pending>:
}
 8025f14:	2000      	movs	r0, #0
 8025f16:	4770      	bx	lr

08025f18 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 8025f18:	b510      	push	{r4, lr}
 8025f1a:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025f1c:	2204      	movs	r2, #4
 8025f1e:	4918      	ldr	r1, [pc, #96]	@ (8025f80 <mg_url_is_ssl+0x68>)
 8025f20:	f007 f91b 	bl	802d15a <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025f24:	b1f8      	cbz	r0, 8025f66 <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025f26:	2206      	movs	r2, #6
 8025f28:	4916      	ldr	r1, [pc, #88]	@ (8025f84 <mg_url_is_ssl+0x6c>)
 8025f2a:	4620      	mov	r0, r4
 8025f2c:	f007 f915 	bl	802d15a <strncmp>
 8025f30:	b1d8      	cbz	r0, 8025f6a <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025f32:	2206      	movs	r2, #6
 8025f34:	4914      	ldr	r1, [pc, #80]	@ (8025f88 <mg_url_is_ssl+0x70>)
 8025f36:	4620      	mov	r0, r4
 8025f38:	f007 f90f 	bl	802d15a <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025f3c:	b1b8      	cbz	r0, 8025f6e <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025f3e:	2204      	movs	r2, #4
 8025f40:	4912      	ldr	r1, [pc, #72]	@ (8025f8c <mg_url_is_ssl+0x74>)
 8025f42:	4620      	mov	r0, r4
 8025f44:	f007 f909 	bl	802d15a <strncmp>
 8025f48:	b198      	cbz	r0, 8025f72 <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025f4a:	2204      	movs	r2, #4
 8025f4c:	4910      	ldr	r1, [pc, #64]	@ (8025f90 <mg_url_is_ssl+0x78>)
 8025f4e:	4620      	mov	r0, r4
 8025f50:	f007 f903 	bl	802d15a <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025f54:	b178      	cbz	r0, 8025f76 <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025f56:	2205      	movs	r2, #5
 8025f58:	490e      	ldr	r1, [pc, #56]	@ (8025f94 <mg_url_is_ssl+0x7c>)
 8025f5a:	4620      	mov	r0, r4
 8025f5c:	f007 f8fd 	bl	802d15a <strncmp>
 8025f60:	b958      	cbnz	r0, 8025f7a <mg_url_is_ssl+0x62>
 8025f62:	2001      	movs	r0, #1
 8025f64:	e000      	b.n	8025f68 <mg_url_is_ssl+0x50>
 8025f66:	2001      	movs	r0, #1
}
 8025f68:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025f6a:	2001      	movs	r0, #1
 8025f6c:	e7fc      	b.n	8025f68 <mg_url_is_ssl+0x50>
 8025f6e:	2001      	movs	r0, #1
 8025f70:	e7fa      	b.n	8025f68 <mg_url_is_ssl+0x50>
 8025f72:	2001      	movs	r0, #1
 8025f74:	e7f8      	b.n	8025f68 <mg_url_is_ssl+0x50>
 8025f76:	2001      	movs	r0, #1
 8025f78:	e7f6      	b.n	8025f68 <mg_url_is_ssl+0x50>
 8025f7a:	2000      	movs	r0, #0
 8025f7c:	e7f4      	b.n	8025f68 <mg_url_is_ssl+0x50>
 8025f7e:	bf00      	nop
 8025f80:	0803b4dc 	.word	0x0803b4dc
 8025f84:	0803b4e4 	.word	0x0803b4e4
 8025f88:	0803b4ec 	.word	0x0803b4ec
 8025f8c:	0803b4f4 	.word	0x0803b4f4
 8025f90:	0803b4fc 	.word	0x0803b4fc
 8025f94:	0803b504 	.word	0x0803b504

08025f98 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 8025f98:	b530      	push	{r4, r5, lr}
 8025f9a:	b089      	sub	sp, #36	@ 0x24
 8025f9c:	4604      	mov	r4, r0
 8025f9e:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 8025fa0:	a801      	add	r0, sp, #4
 8025fa2:	f7fb feeb 	bl	8021d7c <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8025fa6:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 8025fa8:	b152      	cbz	r2, 8025fc0 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 8025faa:	9b04      	ldr	r3, [sp, #16]
 8025fac:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 8025fae:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 8025fb0:	9904      	ldr	r1, [sp, #16]
 8025fb2:	4429      	add	r1, r5
 8025fb4:	4620      	mov	r0, r4
 8025fb6:	f7fe fd37 	bl	8024a28 <mg_str_n>
}
 8025fba:	4620      	mov	r0, r4
 8025fbc:	b009      	add	sp, #36	@ 0x24
 8025fbe:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 8025fc0:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 8025fc2:	b112      	cbz	r2, 8025fca <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 8025fc4:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 8025fc6:	1ad2      	subs	r2, r2, r3
 8025fc8:	e7f2      	b.n	8025fb0 <mg_url_host+0x18>
 8025fca:	9a07      	ldr	r2, [sp, #28]
 8025fcc:	9b04      	ldr	r3, [sp, #16]
 8025fce:	1ad2      	subs	r2, r2, r3
 8025fd0:	e7ee      	b.n	8025fb0 <mg_url_host+0x18>
	...

08025fd4 <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 8025fd4:	b530      	push	{r4, r5, lr}
 8025fd6:	b089      	sub	sp, #36	@ 0x24
 8025fd8:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 8025fda:	4601      	mov	r1, r0
 8025fdc:	a801      	add	r0, sp, #4
 8025fde:	f7fb fecd 	bl	8021d7c <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8025fe2:	2205      	movs	r2, #5
 8025fe4:	491d      	ldr	r1, [pc, #116]	@ (802605c <mg_url_port+0x88>)
 8025fe6:	4620      	mov	r0, r4
 8025fe8:	f007 f8b7 	bl	802d15a <strncmp>
 8025fec:	b138      	cbz	r0, 8025ffe <mg_url_port+0x2a>
 8025fee:	2203      	movs	r2, #3
 8025ff0:	491b      	ldr	r1, [pc, #108]	@ (8026060 <mg_url_port+0x8c>)
 8025ff2:	4620      	mov	r0, r4
 8025ff4:	f007 f8b1 	bl	802d15a <strncmp>
 8025ff8:	b188      	cbz	r0, 802601e <mg_url_port+0x4a>
  unsigned short port = 0;
 8025ffa:	2500      	movs	r5, #0
 8025ffc:	e000      	b.n	8026000 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8025ffe:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8026000:	2204      	movs	r2, #4
 8026002:	4918      	ldr	r1, [pc, #96]	@ (8026064 <mg_url_port+0x90>)
 8026004:	4620      	mov	r0, r4
 8026006:	f007 f8a8 	bl	802d15a <strncmp>
 802600a:	b150      	cbz	r0, 8026022 <mg_url_port+0x4e>
 802600c:	2206      	movs	r2, #6
 802600e:	4916      	ldr	r1, [pc, #88]	@ (8026068 <mg_url_port+0x94>)
 8026010:	4620      	mov	r0, r4
 8026012:	f007 f8a2 	bl	802d15a <strncmp>
 8026016:	b930      	cbnz	r0, 8026026 <mg_url_port+0x52>
    port = 443;
 8026018:	f240 15bb 	movw	r5, #443	@ 0x1bb
 802601c:	e003      	b.n	8026026 <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 802601e:	2550      	movs	r5, #80	@ 0x50
 8026020:	e7ee      	b.n	8026000 <mg_url_port+0x2c>
    port = 443;
 8026022:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8026026:	2205      	movs	r2, #5
 8026028:	4910      	ldr	r1, [pc, #64]	@ (802606c <mg_url_port+0x98>)
 802602a:	4620      	mov	r0, r4
 802602c:	f007 f895 	bl	802d15a <strncmp>
 8026030:	b908      	cbnz	r0, 8026036 <mg_url_port+0x62>
 8026032:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8026036:	2206      	movs	r2, #6
 8026038:	490d      	ldr	r1, [pc, #52]	@ (8026070 <mg_url_port+0x9c>)
 802603a:	4620      	mov	r0, r4
 802603c:	f007 f88d 	bl	802d15a <strncmp>
 8026040:	b908      	cbnz	r0, 8026046 <mg_url_port+0x72>
 8026042:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8026046:	9805      	ldr	r0, [sp, #20]
 8026048:	b910      	cbnz	r0, 8026050 <mg_url_port+0x7c>
}
 802604a:	4628      	mov	r0, r5
 802604c:	b009      	add	sp, #36	@ 0x24
 802604e:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8026050:	4420      	add	r0, r4
 8026052:	f004 fb19 	bl	802a688 <atoi>
 8026056:	b285      	uxth	r5, r0
 8026058:	e7f7      	b.n	802604a <mg_url_port+0x76>
 802605a:	bf00      	nop
 802605c:	0803b50c 	.word	0x0803b50c
 8026060:	0803b514 	.word	0x0803b514
 8026064:	0803b4dc 	.word	0x0803b4dc
 8026068:	0803b4e4 	.word	0x0803b4e4
 802606c:	0803b518 	.word	0x0803b518
 8026070:	0803b4ec 	.word	0x0803b4ec

08026074 <mg_bzero>:
  if (buf != NULL) {
 8026074:	4603      	mov	r3, r0
 8026076:	b920      	cbnz	r0, 8026082 <mg_bzero+0xe>
 8026078:	4770      	bx	lr
    while (len--) *buf++ = 0;
 802607a:	2100      	movs	r1, #0
 802607c:	f803 1b01 	strb.w	r1, [r3], #1
 8026080:	4611      	mov	r1, r2
 8026082:	1e4a      	subs	r2, r1, #1
 8026084:	2900      	cmp	r1, #0
 8026086:	d1f8      	bne.n	802607a <mg_bzero+0x6>
}
 8026088:	4770      	bx	lr

0802608a <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 802608a:	b538      	push	{r3, r4, r5, lr}
 802608c:	4605      	mov	r5, r0
 802608e:	4608      	mov	r0, r1
 8026090:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 8026092:	68aa      	ldr	r2, [r5, #8]
 8026094:	428a      	cmp	r2, r1
 8026096:	d200      	bcs.n	802609a <mg_iobuf_del+0x10>
 8026098:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 802609a:	1903      	adds	r3, r0, r4
 802609c:	429a      	cmp	r2, r3
 802609e:	d200      	bcs.n	80260a2 <mg_iobuf_del+0x18>
 80260a0:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 80260a2:	682b      	ldr	r3, [r5, #0]
 80260a4:	b133      	cbz	r3, 80260b4 <mg_iobuf_del+0x2a>
 80260a6:	1901      	adds	r1, r0, r4
 80260a8:	1a12      	subs	r2, r2, r0
 80260aa:	1b12      	subs	r2, r2, r4
 80260ac:	4419      	add	r1, r3
 80260ae:	4418      	add	r0, r3
 80260b0:	f007 f804 	bl	802d0bc <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 80260b4:	682b      	ldr	r3, [r5, #0]
 80260b6:	b12b      	cbz	r3, 80260c4 <mg_iobuf_del+0x3a>
 80260b8:	68a8      	ldr	r0, [r5, #8]
 80260ba:	1b00      	subs	r0, r0, r4
 80260bc:	4621      	mov	r1, r4
 80260be:	4418      	add	r0, r3
 80260c0:	f7ff ffd8 	bl	8026074 <mg_bzero>
  io->len -= len;
 80260c4:	68ab      	ldr	r3, [r5, #8]
 80260c6:	1b1b      	subs	r3, r3, r4
 80260c8:	60ab      	str	r3, [r5, #8]
}
 80260ca:	4620      	mov	r0, r4
 80260cc:	bd38      	pop	{r3, r4, r5, pc}

080260ce <mg_random>:
void mg_random(void *buf, size_t len) {
 80260ce:	b538      	push	{r3, r4, r5, lr}
 80260d0:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 80260d2:	e006      	b.n	80260e2 <mg_random+0x14>
 80260d4:	f006 fac6 	bl	802c664 <rand>
 80260d8:	4623      	mov	r3, r4
 80260da:	f803 0b01 	strb.w	r0, [r3], #1
 80260de:	461c      	mov	r4, r3
 80260e0:	4629      	mov	r1, r5
 80260e2:	1e4d      	subs	r5, r1, #1
 80260e4:	2900      	cmp	r1, #0
 80260e6:	d1f5      	bne.n	80260d4 <mg_random+0x6>
}
 80260e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080260ec <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 80260ec:	b570      	push	{r4, r5, r6, lr}
 80260ee:	4604      	mov	r4, r0
 80260f0:	460d      	mov	r5, r1
  mg_random(buf, len);
 80260f2:	f7ff ffec 	bl	80260ce <mg_random>
  for (i = 0; i < len; i++) {
 80260f6:	2100      	movs	r1, #0
 80260f8:	e00a      	b.n	8026110 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 80260fa:	2b33      	cmp	r3, #51	@ 0x33
 80260fc:	d802      	bhi.n	8026104 <mg_random_str+0x18>
 80260fe:	3327      	adds	r3, #39	@ 0x27
 8026100:	b2db      	uxtb	r3, r3
 8026102:	e003      	b.n	802610c <mg_random_str+0x20>
 8026104:	3b04      	subs	r3, #4
 8026106:	b2db      	uxtb	r3, r3
 8026108:	e000      	b.n	802610c <mg_random_str+0x20>
 802610a:	2300      	movs	r3, #0
 802610c:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 802610e:	3101      	adds	r1, #1
 8026110:	42a9      	cmp	r1, r5
 8026112:	d213      	bcs.n	802613c <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8026114:	1860      	adds	r0, r4, r1
 8026116:	5c63      	ldrb	r3, [r4, r1]
 8026118:	085a      	lsrs	r2, r3, #1
 802611a:	4e09      	ldr	r6, [pc, #36]	@ (8026140 <mg_random_str+0x54>)
 802611c:	fba6 6202 	umull	r6, r2, r6, r2
 8026120:	0912      	lsrs	r2, r2, #4
 8026122:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8026126:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 802612a:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 802612c:	1e6a      	subs	r2, r5, #1
 802612e:	428a      	cmp	r2, r1
 8026130:	d0eb      	beq.n	802610a <mg_random_str+0x1e>
 8026132:	2b19      	cmp	r3, #25
 8026134:	d8e1      	bhi.n	80260fa <mg_random_str+0xe>
 8026136:	3361      	adds	r3, #97	@ 0x61
 8026138:	b2db      	uxtb	r3, r3
 802613a:	e7e7      	b.n	802610c <mg_random_str+0x20>
}
 802613c:	4620      	mov	r0, r4
 802613e:	bd70      	pop	{r4, r5, r6, pc}
 8026140:	84210843 	.word	0x84210843

08026144 <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 8026144:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 8026146:	2300      	movs	r3, #0
 8026148:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 802614a:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 802614c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8026150:	021b      	lsls	r3, r3, #8
 8026152:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8026156:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 802615a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 802615e:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8026162:	b002      	add	sp, #8
 8026164:	4770      	bx	lr
	...

08026168 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8026168:	b5f0      	push	{r4, r5, r6, r7, lr}
 802616a:	b085      	sub	sp, #20
 802616c:	466c      	mov	r4, sp
 802616e:	e884 0003 	stmia.w	r4, {r0, r1}
 8026172:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 8026174:	480b      	ldr	r0, [pc, #44]	@ (80261a4 <mg_atonl+0x3c>)
 8026176:	f7ff ffe5 	bl	8026144 <mg_ntohl>
 802617a:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 802617c:	ae02      	add	r6, sp, #8
 802617e:	490a      	ldr	r1, [pc, #40]	@ (80261a8 <mg_atonl+0x40>)
 8026180:	4630      	mov	r0, r6
 8026182:	f7fe fc45 	bl	8024a10 <mg_str_s>
 8026186:	e896 000c 	ldmia.w	r6, {r2, r3}
 802618a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802618e:	f7fe fd3a 	bl	8024c06 <mg_strcasecmp>
 8026192:	b928      	cbnz	r0, 80261a0 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 8026194:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 8026196:	2300      	movs	r3, #0
 8026198:	74eb      	strb	r3, [r5, #19]
  return true;
 802619a:	2001      	movs	r0, #1
}
 802619c:	b005      	add	sp, #20
 802619e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 80261a0:	2000      	movs	r0, #0
 80261a2:	e7fb      	b.n	802619c <mg_atonl+0x34>
 80261a4:	7f000001 	.word	0x7f000001
 80261a8:	0803b520 	.word	0x0803b520

080261ac <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 80261ac:	b510      	push	{r4, lr}
 80261ae:	b082      	sub	sp, #8
 80261b0:	466b      	mov	r3, sp
 80261b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80261b6:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80261b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80261bc:	f7fb fdcf 	bl	8021d5e <mg_atone>
 80261c0:	b110      	cbz	r0, 80261c8 <mg_aton+0x1c>
 80261c2:	2001      	movs	r0, #1
}
 80261c4:	b002      	add	sp, #8
 80261c6:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80261c8:	4622      	mov	r2, r4
 80261ca:	ab02      	add	r3, sp, #8
 80261cc:	e913 0003 	ldmdb	r3, {r0, r1}
 80261d0:	f7ff ffca 	bl	8026168 <mg_atonl>
 80261d4:	b108      	cbz	r0, 80261da <mg_aton+0x2e>
 80261d6:	2001      	movs	r0, #1
 80261d8:	e7f4      	b.n	80261c4 <mg_aton+0x18>
 80261da:	4622      	mov	r2, r4
 80261dc:	ab02      	add	r3, sp, #8
 80261de:	e913 0003 	ldmdb	r3, {r0, r1}
 80261e2:	f7fb fb37 	bl	8021854 <mg_aton4>
 80261e6:	b108      	cbz	r0, 80261ec <mg_aton+0x40>
 80261e8:	2001      	movs	r0, #1
 80261ea:	e7eb      	b.n	80261c4 <mg_aton+0x18>
         mg_aton6(str, addr);
 80261ec:	4622      	mov	r2, r4
 80261ee:	ab02      	add	r3, sp, #8
 80261f0:	e913 0003 	ldmdb	r3, {r0, r1}
 80261f4:	f7ff fd34 	bl	8025c60 <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80261f8:	2800      	cmp	r0, #0
 80261fa:	d0e3      	beq.n	80261c4 <mg_aton+0x18>
 80261fc:	2001      	movs	r0, #1
 80261fe:	e7e1      	b.n	80261c4 <mg_aton+0x18>

08026200 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 8026200:	b570      	push	{r4, r5, r6, lr}
 8026202:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8026204:	6800      	ldr	r0, [r0, #0]
 8026206:	f7ff ff9d 	bl	8026144 <mg_ntohl>
 802620a:	4606      	mov	r6, r0
 802620c:	6860      	ldr	r0, [r4, #4]
 802620e:	f7ff ff99 	bl	8026144 <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 8026212:	b12e      	cbz	r6, 8026220 <gettimestamp+0x20>
 8026214:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 8026218:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 802621c:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8026220:	0ef5      	lsrs	r5, r6, #27
 8026222:	0174      	lsls	r4, r6, #5
 8026224:	1ba4      	subs	r4, r4, r6
 8026226:	f165 0500 	sbc.w	r5, r5, #0
 802622a:	00ad      	lsls	r5, r5, #2
 802622c:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 8026230:	00a4      	lsls	r4, r4, #2
 8026232:	19a4      	adds	r4, r4, r6
 8026234:	f145 0500 	adc.w	r5, r5, #0
 8026238:	00ed      	lsls	r5, r5, #3
 802623a:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 802623e:	00e4      	lsls	r4, r4, #3
 8026240:	f7ea f978 	bl	8010534 <__aeabi_ui2d>
 8026244:	a309      	add	r3, pc, #36	@ (adr r3, 802626c <gettimestamp+0x6c>)
 8026246:	e9d3 2300 	ldrd	r2, r3, [r3]
 802624a:	f7ea fb17 	bl	801087c <__aeabi_ddiv>
 802624e:	2200      	movs	r2, #0
 8026250:	4b05      	ldr	r3, [pc, #20]	@ (8026268 <gettimestamp+0x68>)
 8026252:	f7ea f9e9 	bl	8010628 <__aeabi_dmul>
 8026256:	f7ea fdab 	bl	8010db0 <__aeabi_d2lz>
 802625a:	1820      	adds	r0, r4, r0
}
 802625c:	eb45 0101 	adc.w	r1, r5, r1
 8026260:	bd70      	pop	{r4, r5, r6, pc}
 8026262:	bf00      	nop
 8026264:	f3af 8000 	nop.w
 8026268:	408f4000 	.word	0x408f4000
 802626c:	ffe00000 	.word	0xffe00000
 8026270:	41efffff 	.word	0x41efffff

08026274 <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 8026274:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 8026276:	2300      	movs	r3, #0
 8026278:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 802627c:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8026280:	b2c3      	uxtb	r3, r0
 8026282:	021b      	lsls	r3, r3, #8
}
 8026284:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 8026288:	b002      	add	sp, #8
 802628a:	4770      	bx	lr

0802628c <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 802628c:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 802628e:	e001      	b.n	8026294 <csumfin+0x8>
 8026290:	fa13 f080 	uxtah	r0, r3, r0
 8026294:	0c03      	lsrs	r3, r0, #16
 8026296:	d1fb      	bne.n	8026290 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 8026298:	43c0      	mvns	r0, r0
 802629a:	b280      	uxth	r0, r0
 802629c:	f7ff ffea 	bl	8026274 <mg_ntohs>
}
 80262a0:	bd08      	pop	{r3, pc}

080262a2 <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 80262a2:	b508      	push	{r3, lr}
 80262a4:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 80262a6:	4601      	mov	r1, r0
 80262a8:	2000      	movs	r0, #0
 80262aa:	f7fb fb2b 	bl	8021904 <csumup>
  return csumfin(sum);
 80262ae:	f7ff ffed 	bl	802628c <csumfin>
}
 80262b2:	bd08      	pop	{r3, pc}

080262b4 <tx_ip>:
                        size_t plen) {
 80262b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262b6:	4617      	mov	r7, r2
 80262b8:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 80262ba:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 80262bc:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 80262be:	680b      	ldr	r3, [r1, #0]
 80262c0:	f845 3b0e 	str.w	r3, [r5], #14
 80262c4:	888b      	ldrh	r3, [r1, #4]
 80262c6:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 80262c8:	6803      	ldr	r3, [r0, #0]
 80262ca:	f8c4 3006 	str.w	r3, [r4, #6]
 80262ce:	8883      	ldrh	r3, [r0, #4]
 80262d0:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 80262d2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80262d6:	f7ff ffcd 	bl	8026274 <mg_ntohs>
 80262da:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 80262dc:	2100      	movs	r1, #0
 80262de:	f8c4 100e 	str.w	r1, [r4, #14]
 80262e2:	6069      	str	r1, [r5, #4]
 80262e4:	60a9      	str	r1, [r5, #8]
 80262e6:	60e9      	str	r1, [r5, #12]
 80262e8:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 80262ea:	2345      	movs	r3, #69	@ 0x45
 80262ec:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 80262ee:	2340      	movs	r3, #64	@ 0x40
 80262f0:	7523      	strb	r3, [r4, #20]
 80262f2:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 80262f4:	9807      	ldr	r0, [sp, #28]
 80262f6:	3014      	adds	r0, #20
 80262f8:	b280      	uxth	r0, r0
 80262fa:	f7ff ffbb 	bl	8026274 <mg_ntohs>
 80262fe:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 8026300:	2340      	movs	r3, #64	@ 0x40
 8026302:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 8026304:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 8026306:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 802630a:	9b06      	ldr	r3, [sp, #24]
 802630c:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8026310:	2114      	movs	r1, #20
 8026312:	4628      	mov	r0, r5
 8026314:	f7ff ffc5 	bl	80262a2 <ipcsum>
 8026318:	8320      	strh	r0, [r4, #24]
}
 802631a:	4628      	mov	r0, r5
 802631c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802631e <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 802631e:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8026320:	781b      	ldrb	r3, [r3, #0]
 8026322:	2b08      	cmp	r3, #8
 8026324:	d000      	beq.n	8026328 <rx_icmp+0xa>
 8026326:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802632c:	b083      	sub	sp, #12
 802632e:	4605      	mov	r5, r0
 8026330:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8026332:	69ca      	ldr	r2, [r1, #28]
 8026334:	b11a      	cbz	r2, 802633e <rx_icmp+0x20>
 8026336:	6911      	ldr	r1, [r2, #16]
 8026338:	6883      	ldr	r3, [r0, #8]
 802633a:	4299      	cmp	r1, r3
 802633c:	d002      	beq.n	8026344 <rx_icmp+0x26>
}
 802633e:	b003      	add	sp, #12
 8026340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8026344:	6986      	ldr	r6, [r0, #24]
 8026346:	3e26      	subs	r6, #38	@ 0x26
 8026348:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 802634a:	428e      	cmp	r6, r1
 802634c:	d300      	bcc.n	8026350 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 802634e:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8026350:	6921      	ldr	r1, [r4, #16]
 8026352:	f106 0804 	add.w	r8, r6, #4
 8026356:	f8cd 8004 	str.w	r8, [sp, #4]
 802635a:	68d2      	ldr	r2, [r2, #12]
 802635c:	9200      	str	r2, [sp, #0]
 802635e:	2201      	movs	r2, #1
 8026360:	3106      	adds	r1, #6
 8026362:	4628      	mov	r0, r5
 8026364:	f7ff ffa6 	bl	80262b4 <tx_ip>
 8026368:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 802636a:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 802636e:	2300      	movs	r3, #0
 8026370:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 8026372:	4632      	mov	r2, r6
 8026374:	68a1      	ldr	r1, [r4, #8]
 8026376:	3018      	adds	r0, #24
 8026378:	f008 f8f6 	bl	802e568 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 802637c:	4641      	mov	r1, r8
 802637e:	4648      	mov	r0, r9
 8026380:	f7ff ff8f 	bl	80262a2 <ipcsum>
 8026384:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 8026386:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 802638a:	4628      	mov	r0, r5
 802638c:	f7fb facb 	bl	8021926 <ether_output>
}
 8026390:	e7d5      	b.n	802633e <rx_icmp+0x20>

08026392 <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026392:	b538      	push	{r3, r4, r5, lr}
 8026394:	4605      	mov	r5, r0
 8026396:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8026398:	6a09      	ldr	r1, [r1, #32]
 802639a:	798b      	ldrb	r3, [r1, #6]
 802639c:	2b01      	cmp	r3, #1
 802639e:	d00e      	beq.n	80263be <rx_ip6+0x2c>
 80263a0:	2b3a      	cmp	r3, #58	@ 0x3a
 80263a2:	d00c      	beq.n	80263be <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 80263a4:	2b11      	cmp	r3, #17
 80263a6:	d110      	bne.n	80263ca <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 80263a8:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 80263ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 80263ae:	68e3      	ldr	r3, [r4, #12]
 80263b0:	2b07      	cmp	r3, #7
 80263b2:	d90a      	bls.n	80263ca <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 80263b4:	3130      	adds	r1, #48	@ 0x30
 80263b6:	4620      	mov	r0, r4
 80263b8:	f7fe fbe9 	bl	8024b8e <mkpay>
 80263bc:	e005      	b.n	80263ca <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 80263be:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 80263c2:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 80263c4:	68e3      	ldr	r3, [r4, #12]
 80263c6:	2b03      	cmp	r3, #3
 80263c8:	d800      	bhi.n	80263cc <rx_ip6+0x3a>
}
 80263ca:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 80263cc:	312c      	adds	r1, #44	@ 0x2c
 80263ce:	4620      	mov	r0, r4
 80263d0:	f7fe fbdd 	bl	8024b8e <mkpay>
    rx_icmp(ifp, pkt);
 80263d4:	4621      	mov	r1, r4
 80263d6:	4628      	mov	r0, r5
 80263d8:	f7ff ffa1 	bl	802631e <rx_icmp>
 80263dc:	e7f5      	b.n	80263ca <rx_ip6+0x38>

080263de <tx_udp>:
                   const void *buf, size_t len) {
 80263de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80263e2:	b083      	sub	sp, #12
 80263e4:	4606      	mov	r6, r0
 80263e6:	4698      	mov	r8, r3
 80263e8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80263ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 80263ec:	f105 0308 	add.w	r3, r5, #8
 80263f0:	9301      	str	r3, [sp, #4]
 80263f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80263f4:	9300      	str	r3, [sp, #0]
 80263f6:	4613      	mov	r3, r2
 80263f8:	2211      	movs	r2, #17
 80263fa:	f7ff ff5b 	bl	80262b4 <tx_ip>
 80263fe:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 8026400:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 8026404:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 8026408:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 802640c:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 802640e:	f105 0008 	add.w	r0, r5, #8
 8026412:	b280      	uxth	r0, r0
 8026414:	f7ff ff2e 	bl	8026274 <mg_ntohs>
 8026418:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 802641a:	2000      	movs	r0, #0
 802641c:	76a0      	strb	r0, [r4, #26]
 802641e:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8026420:	2208      	movs	r2, #8
 8026422:	4649      	mov	r1, r9
 8026424:	f7fb fa6e 	bl	8021904 <csumup>
  cs = csumup(cs, buf, len);
 8026428:	462a      	mov	r2, r5
 802642a:	4639      	mov	r1, r7
 802642c:	f7fb fa6a 	bl	8021904 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8026430:	2204      	movs	r2, #4
 8026432:	f104 010c 	add.w	r1, r4, #12
 8026436:	f7fb fa65 	bl	8021904 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 802643a:	2204      	movs	r2, #4
 802643c:	f104 0110 	add.w	r1, r4, #16
 8026440:	f7fb fa60 	bl	8021904 <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8026444:	7a63      	ldrb	r3, [r4, #9]
 8026446:	442b      	add	r3, r5
 8026448:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 802644a:	3008      	adds	r0, #8
 802644c:	f7ff ff1e 	bl	802628c <csumfin>
 8026450:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 8026452:	462a      	mov	r2, r5
 8026454:	4639      	mov	r1, r7
 8026456:	f104 001c 	add.w	r0, r4, #28
 802645a:	f006 fe2f 	bl	802d0bc <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 802645e:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 8026462:	4630      	mov	r0, r6
 8026464:	f7fb fa5f 	bl	8021926 <ether_output>
}
 8026468:	b003      	add	sp, #12
 802646a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0802646e <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 802646e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026470:	4605      	mov	r5, r0
 8026472:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8026474:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8026476:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 8026478:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802647c:	f846 3b0e 	str.w	r3, [r6], #14
 8026480:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8026482:	6803      	ldr	r3, [r0, #0]
 8026484:	f8c4 3006 	str.w	r3, [r4, #6]
 8026488:	8883      	ldrh	r3, [r0, #4]
 802648a:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 802648c:	f640 0006 	movw	r0, #2054	@ 0x806
 8026490:	f7ff fef0 	bl	8026274 <mg_ntohs>
 8026494:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 8026496:	2300      	movs	r3, #0
 8026498:	f8c4 300e 	str.w	r3, [r4, #14]
 802649c:	6073      	str	r3, [r6, #4]
 802649e:	60b3      	str	r3, [r6, #8]
 80264a0:	60f3      	str	r3, [r6, #12]
 80264a2:	6133      	str	r3, [r6, #16]
 80264a4:	6173      	str	r3, [r6, #20]
 80264a6:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 80264a8:	2001      	movs	r0, #1
 80264aa:	f7ff fee3 	bl	8026274 <mg_ntohs>
 80264ae:	4606      	mov	r6, r0
 80264b0:	81e0      	strh	r0, [r4, #14]
 80264b2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80264b6:	f7ff fedd 	bl	8026274 <mg_ntohs>
 80264ba:	8220      	strh	r0, [r4, #16]
 80264bc:	2306      	movs	r3, #6
 80264be:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 80264c0:	2304      	movs	r3, #4
 80264c2:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 80264c4:	82a6      	strh	r6, [r4, #20]
 80264c6:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 80264ca:	68ab      	ldr	r3, [r5, #8]
 80264cc:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 80264ce:	682b      	ldr	r3, [r5, #0]
 80264d0:	f8c4 3016 	str.w	r3, [r4, #22]
 80264d4:	88ab      	ldrh	r3, [r5, #4]
 80264d6:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 80264d8:	212a      	movs	r1, #42	@ 0x2a
 80264da:	4628      	mov	r0, r5
 80264dc:	f7fb fa23 	bl	8021926 <ether_output>
}
 80264e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080264e2 <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 80264e2:	b510      	push	{r4, lr}
 80264e4:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 80264e6:	4608      	mov	r0, r1
 80264e8:	f7ff fd74 	bl	8025fd4 <mg_url_port>
 80264ec:	f7ff fec2 	bl	8026274 <mg_ntohs>
 80264f0:	8320      	strh	r0, [r4, #24]
}
 80264f2:	2001      	movs	r0, #1
 80264f4:	bd10      	pop	{r4, pc}
	...

080264f8 <tx_dhcp>:
                    bool ciaddr) {
 80264f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80264fc:	b0c8      	sub	sp, #288	@ 0x120
 80264fe:	4604      	mov	r4, r0
 8026500:	460e      	mov	r6, r1
 8026502:	4615      	mov	r5, r2
 8026504:	4698      	mov	r8, r3
 8026506:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 802650a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 802650e:	4917      	ldr	r1, [pc, #92]	@ (802656c <tx_dhcp+0x74>)
 8026510:	a804      	add	r0, sp, #16
 8026512:	f008 f829 	bl	802e568 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8026516:	4816      	ldr	r0, [pc, #88]	@ (8026570 <tx_dhcp+0x78>)
 8026518:	f7ff fe14 	bl	8026144 <mg_ntohl>
 802651c:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 802651e:	6820      	ldr	r0, [r4, #0]
 8026520:	900b      	str	r0, [sp, #44]	@ 0x2c
 8026522:	88a3      	ldrh	r3, [r4, #4]
 8026524:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8026528:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802652c:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 802652e:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8026530:	994e      	ldr	r1, [sp, #312]	@ 0x138
 8026532:	a840      	add	r0, sp, #256	@ 0x100
 8026534:	f008 f818 	bl	802e568 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8026538:	b107      	cbz	r7, 802653c <tx_dhcp+0x44>
 802653a:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 802653c:	2044      	movs	r0, #68	@ 0x44
 802653e:	f7ff fe99 	bl	8026274 <mg_ntohs>
 8026542:	4607      	mov	r7, r0
 8026544:	2043      	movs	r0, #67	@ 0x43
 8026546:	f7ff fe95 	bl	8026274 <mg_ntohs>
 802654a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 802654e:	9303      	str	r3, [sp, #12]
 8026550:	ab04      	add	r3, sp, #16
 8026552:	9302      	str	r3, [sp, #8]
 8026554:	9001      	str	r0, [sp, #4]
 8026556:	f8cd 8000 	str.w	r8, [sp]
 802655a:	463b      	mov	r3, r7
 802655c:	462a      	mov	r2, r5
 802655e:	4631      	mov	r1, r6
 8026560:	4620      	mov	r0, r4
 8026562:	f7ff ff3c 	bl	80263de <tx_udp>
}
 8026566:	b048      	add	sp, #288	@ 0x120
 8026568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802656c:	0803643c 	.word	0x0803643c
 8026570:	63825363 	.word	0x63825363

08026574 <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026578:	b0d0      	sub	sp, #320	@ 0x140
 802657a:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 802657c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 802657e:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8026582:	6809      	ldr	r1, [r1, #0]
 8026584:	686a      	ldr	r2, [r5, #4]
 8026586:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 802658a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 802658e:	4543      	cmp	r3, r8
 8026590:	d827      	bhi.n	80265e2 <rx_dhcp_server+0x6e>
 8026592:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8026594:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8026598:	495e      	ldr	r1, [pc, #376]	@ (8026714 <rx_dhcp_server+0x1a0>)
 802659a:	a80c      	add	r0, sp, #48	@ 0x30
 802659c:	f007 ffe4 	bl	802e568 <memcpy>
  res.yiaddr = ifp->ip;
 80265a0:	68b3      	ldr	r3, [r6, #8]
 80265a2:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 80265a4:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80265a8:	3301      	adds	r3, #1
 80265aa:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 80265ae:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 80265b0:	e002      	b.n	80265b8 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 80265b2:	7863      	ldrb	r3, [r4, #1]
 80265b4:	3302      	adds	r3, #2
 80265b6:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 80265b8:	1c63      	adds	r3, r4, #1
 80265ba:	4543      	cmp	r3, r8
 80265bc:	d20c      	bcs.n	80265d8 <rx_dhcp_server+0x64>
 80265be:	7823      	ldrb	r3, [r4, #0]
 80265c0:	2bff      	cmp	r3, #255	@ 0xff
 80265c2:	d009      	beq.n	80265d8 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 80265c4:	2b35      	cmp	r3, #53	@ 0x35
 80265c6:	d1f4      	bne.n	80265b2 <rx_dhcp_server+0x3e>
 80265c8:	7863      	ldrb	r3, [r4, #1]
 80265ca:	2b01      	cmp	r3, #1
 80265cc:	d1f1      	bne.n	80265b2 <rx_dhcp_server+0x3e>
 80265ce:	1ca3      	adds	r3, r4, #2
 80265d0:	4543      	cmp	r3, r8
 80265d2:	d2ee      	bcs.n	80265b2 <rx_dhcp_server+0x3e>
      op = p[2];
 80265d4:	78a7      	ldrb	r7, [r4, #2]
 80265d6:	e7ec      	b.n	80265b2 <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 80265d8:	2f01      	cmp	r7, #1
 80265da:	f000 808a 	beq.w	80266f2 <rx_dhcp_server+0x17e>
 80265de:	2f03      	cmp	r7, #3
 80265e0:	d002      	beq.n	80265e8 <rx_dhcp_server+0x74>
}
 80265e2:	b050      	add	sp, #320	@ 0x140
 80265e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 80265e8:	2205      	movs	r2, #5
    uint8_t opts[] = {
 80265ea:	2335      	movs	r3, #53	@ 0x35
 80265ec:	f88d 3014 	strb.w	r3, [sp, #20]
 80265f0:	2301      	movs	r3, #1
 80265f2:	f88d 3015 	strb.w	r3, [sp, #21]
 80265f6:	f88d 2016 	strb.w	r2, [sp, #22]
 80265fa:	f88d 3017 	strb.w	r3, [sp, #23]
 80265fe:	2204      	movs	r2, #4
 8026600:	f88d 2018 	strb.w	r2, [sp, #24]
 8026604:	2300      	movs	r3, #0
 8026606:	f88d 3019 	strb.w	r3, [sp, #25]
 802660a:	f88d 301a 	strb.w	r3, [sp, #26]
 802660e:	f88d 301b 	strb.w	r3, [sp, #27]
 8026612:	f88d 301c 	strb.w	r3, [sp, #28]
 8026616:	2136      	movs	r1, #54	@ 0x36
 8026618:	f88d 101d 	strb.w	r1, [sp, #29]
 802661c:	f88d 201e 	strb.w	r2, [sp, #30]
 8026620:	f88d 301f 	strb.w	r3, [sp, #31]
 8026624:	f88d 3020 	strb.w	r3, [sp, #32]
 8026628:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 802662c:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8026630:	230c      	movs	r3, #12
 8026632:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8026636:	2303      	movs	r3, #3
 8026638:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 802663c:	236d      	movs	r3, #109	@ 0x6d
 802663e:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 8026642:	2369      	movs	r3, #105	@ 0x69
 8026644:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 8026648:	2370      	movs	r3, #112	@ 0x70
 802664a:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 802664e:	2333      	movs	r3, #51	@ 0x33
 8026650:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8026654:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 8026658:	23ff      	movs	r3, #255	@ 0xff
 802665a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802665e:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8026662:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8026666:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 802666a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 802666e:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 8026672:	f8de 001c 	ldr.w	r0, [lr, #28]
 8026676:	9013      	str	r0, [sp, #76]	@ 0x4c
 8026678:	f8be 3020 	ldrh.w	r3, [lr, #32]
 802667c:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8026680:	68f3      	ldr	r3, [r6, #12]
 8026682:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8026686:	68b3      	ldr	r3, [r6, #8]
 8026688:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 802668c:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 8026690:	ac05      	add	r4, sp, #20
 8026692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026694:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8026698:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802669c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80266a0:	f82c 2b02 	strh.w	r2, [ip], #2
 80266a4:	0c12      	lsrs	r2, r2, #16
 80266a6:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 80266aa:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 80266ae:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 80266b0:	f8de 3004 	ldr.w	r3, [lr, #4]
 80266b4:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 80266b6:	7fb3      	ldrb	r3, [r6, #30]
 80266b8:	b9eb      	cbnz	r3, 80266f6 <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 80266ba:	692c      	ldr	r4, [r5, #16]
 80266bc:	3406      	adds	r4, #6
 80266be:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80266c2:	2043      	movs	r0, #67	@ 0x43
 80266c4:	f7ff fdd6 	bl	8026274 <mg_ntohs>
 80266c8:	4605      	mov	r5, r0
 80266ca:	2f01      	cmp	r7, #1
 80266cc:	d01e      	beq.n	802670c <rx_dhcp_server+0x198>
 80266ce:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80266d0:	2044      	movs	r0, #68	@ 0x44
 80266d2:	f7ff fdcf 	bl	8026274 <mg_ntohs>
 80266d6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80266da:	9303      	str	r3, [sp, #12]
 80266dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80266de:	9302      	str	r3, [sp, #8]
 80266e0:	9001      	str	r0, [sp, #4]
 80266e2:	9700      	str	r7, [sp, #0]
 80266e4:	462b      	mov	r3, r5
 80266e6:	4642      	mov	r2, r8
 80266e8:	4621      	mov	r1, r4
 80266ea:	4630      	mov	r0, r6
 80266ec:	f7ff fe77 	bl	80263de <tx_udp>
 80266f0:	e777      	b.n	80265e2 <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 80266f2:	2202      	movs	r2, #2
 80266f4:	e779      	b.n	80265ea <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 80266f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80266f8:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 80266fa:	692b      	ldr	r3, [r5, #16]
 80266fc:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8026700:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 8026704:	895b      	ldrh	r3, [r3, #10]
 8026706:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 802670a:	e7d6      	b.n	80266ba <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 802670c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8026710:	e7de      	b.n	80266d0 <rx_dhcp_server+0x15c>
 8026712:	bf00      	nop
 8026714:	0803654c 	.word	0x0803654c

08026718 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8026718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802671c:	b08b      	sub	sp, #44	@ 0x2c
 802671e:	4605      	mov	r5, r0
 8026720:	9108      	str	r1, [sp, #32]
 8026722:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8026724:	8810      	ldrh	r0, [r2, #0]
 8026726:	f7ff fda5 	bl	8026274 <mg_ntohs>
 802672a:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 802672c:	8860      	ldrh	r0, [r4, #2]
 802672e:	f7ff fda1 	bl	8026274 <mg_ntohs>
 8026732:	4606      	mov	r6, r0
 8026734:	88a0      	ldrh	r0, [r4, #4]
 8026736:	f7ff fd9d 	bl	8026274 <mg_ntohs>
 802673a:	4607      	mov	r7, r0
 802673c:	88e0      	ldrh	r0, [r4, #6]
 802673e:	f7ff fd99 	bl	8026274 <mg_ntohs>
 8026742:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8026744:	8920      	ldrh	r0, [r4, #8]
 8026746:	f7ff fd95 	bl	8026274 <mg_ntohs>
 802674a:	4681      	mov	r9, r0
 802674c:	8960      	ldrh	r0, [r4, #10]
 802674e:	f7ff fd91 	bl	8026274 <mg_ntohs>
 8026752:	4682      	mov	sl, r0
 8026754:	89a0      	ldrh	r0, [r4, #12]
 8026756:	f7ff fd8d 	bl	8026274 <mg_ntohs>
 802675a:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 802675c:	89e0      	ldrh	r0, [r4, #14]
 802675e:	f7ff fd89 	bl	8026274 <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8026762:	9006      	str	r0, [sp, #24]
 8026764:	f8cd b014 	str.w	fp, [sp, #20]
 8026768:	f8cd a010 	str.w	sl, [sp, #16]
 802676c:	f8cd 900c 	str.w	r9, [sp, #12]
 8026770:	f8cd 8008 	str.w	r8, [sp, #8]
 8026774:	9701      	str	r7, [sp, #4]
 8026776:	9600      	str	r6, [sp, #0]
 8026778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802677a:	4a04      	ldr	r2, [pc, #16]	@ (802678c <print_ip6+0x74>)
 802677c:	9908      	ldr	r1, [sp, #32]
 802677e:	4628      	mov	r0, r5
 8026780:	f7fd ff28 	bl	80245d4 <mg_xprintf>
}
 8026784:	b00b      	add	sp, #44	@ 0x2c
 8026786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802678a:	bf00      	nop
 802678c:	0803b52c 	.word	0x0803b52c

08026790 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8026790:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8026792:	6813      	ldr	r3, [r2, #0]
 8026794:	1d1c      	adds	r4, r3, #4
 8026796:	6014      	str	r4, [r2, #0]
 8026798:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 802679a:	7cd3      	ldrb	r3, [r2, #19]
 802679c:	b913      	cbnz	r3, 80267a4 <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 802679e:	f7fd ff29 	bl	80245f4 <print_ip4>
}
 80267a2:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 80267a4:	f7ff ffb8 	bl	8026718 <print_ip6>
 80267a8:	e7fb      	b.n	80267a2 <mg_print_ip+0x12>
	...

080267ac <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 80267ac:	b570      	push	{r4, r5, r6, lr}
 80267ae:	b082      	sub	sp, #8
 80267b0:	4604      	mov	r4, r0
 80267b2:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 80267b4:	6813      	ldr	r3, [r2, #0]
 80267b6:	1d19      	adds	r1, r3, #4
 80267b8:	6011      	str	r1, [r2, #0]
 80267ba:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 80267bc:	8a30      	ldrh	r0, [r6, #16]
 80267be:	f7ff fd59 	bl	8026274 <mg_ntohs>
 80267c2:	9001      	str	r0, [sp, #4]
 80267c4:	9600      	str	r6, [sp, #0]
 80267c6:	4b04      	ldr	r3, [pc, #16]	@ (80267d8 <mg_print_ip_port+0x2c>)
 80267c8:	4a04      	ldr	r2, [pc, #16]	@ (80267dc <mg_print_ip_port+0x30>)
 80267ca:	4629      	mov	r1, r5
 80267cc:	4620      	mov	r0, r4
 80267ce:	f7fd ff01 	bl	80245d4 <mg_xprintf>
}
 80267d2:	b002      	add	sp, #8
 80267d4:	bd70      	pop	{r4, r5, r6, pc}
 80267d6:	bf00      	nop
 80267d8:	08026791 	.word	0x08026791
 80267dc:	0803b548 	.word	0x0803b548

080267e0 <mg_crc32>:
  crc = ~crc;
 80267e0:	43c0      	mvns	r0, r0
  while (len--) {
 80267e2:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80267e6:	b1e2      	cbz	r2, 8026822 <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 80267e8:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 80267ea:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 80267ee:	ea83 0200 	eor.w	r2, r3, r0
 80267f2:	f002 020f 	and.w	r2, r2, #15
 80267f6:	4c0c      	ldr	r4, [pc, #48]	@ (8026828 <mg_crc32+0x48>)
 80267f8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80267fc:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8026800:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 8026804:	f003 030f 	and.w	r3, r3, #15
 8026808:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802680c:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 8026810:	4662      	mov	r2, ip
 8026812:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8026816:	2a00      	cmp	r2, #0
 8026818:	d1e7      	bne.n	80267ea <mg_crc32+0xa>
}
 802681a:	43c0      	mvns	r0, r0
 802681c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026820:	4770      	bx	lr
 8026822:	43c0      	mvns	r0, r0
 8026824:	4770      	bx	lr
 8026826:	bf00      	nop
 8026828:	0803bddc 	.word	0x0803bddc

0802682c <mg_check_ip_acl>:
int mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip) {
 802682c:	b530      	push	{r4, r5, lr}
 802682e:	b089      	sub	sp, #36	@ 0x24
 8026830:	ab02      	add	r3, sp, #8
 8026832:	e883 0003 	stmia.w	r3, {r0, r1}
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 8026836:	bb19      	cbnz	r1, 8026880 <mg_check_ip_acl+0x54>
 8026838:	252b      	movs	r5, #43	@ 0x2b
  if (remote_ip->is_ip6) {
 802683a:	7cd3      	ldrb	r3, [r2, #19]
 802683c:	bb73      	cbnz	r3, 802689c <mg_check_ip_acl+0x70>
    memcpy((void *) &remote_ip4, remote_ip->ip, sizeof(remote_ip4));
 802683e:	6814      	ldr	r4, [r2, #0]
    while (mg_span(acl, &entry, &acl, ',')) {
 8026840:	ab02      	add	r3, sp, #8
 8026842:	222c      	movs	r2, #44	@ 0x2c
 8026844:	9200      	str	r2, [sp, #0]
 8026846:	aa06      	add	r2, sp, #24
 8026848:	e893 0003 	ldmia.w	r3, {r0, r1}
 802684c:	f7fe fb9d 	bl	8024f8a <mg_span>
 8026850:	b1f0      	cbz	r0, 8026890 <mg_check_ip_acl+0x64>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 8026852:	9806      	ldr	r0, [sp, #24]
 8026854:	7803      	ldrb	r3, [r0, #0]
 8026856:	2b2b      	cmp	r3, #43	@ 0x2b
 8026858:	d001      	beq.n	802685e <mg_check_ip_acl+0x32>
 802685a:	2b2d      	cmp	r3, #45	@ 0x2d
 802685c:	d112      	bne.n	8026884 <mg_check_ip_acl+0x58>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 802685e:	aa05      	add	r2, sp, #20
 8026860:	a904      	add	r1, sp, #16
 8026862:	3001      	adds	r0, #1
 8026864:	f7fc fb82 	bl	8022f6c <parse_net>
 8026868:	b178      	cbz	r0, 802688a <mg_check_ip_acl+0x5e>
      if ((mg_ntohl(remote_ip4) & mask) == net) allowed = entry.buf[0];
 802686a:	4620      	mov	r0, r4
 802686c:	f7ff fc6a 	bl	8026144 <mg_ntohl>
 8026870:	9b05      	ldr	r3, [sp, #20]
 8026872:	4018      	ands	r0, r3
 8026874:	9b04      	ldr	r3, [sp, #16]
 8026876:	4298      	cmp	r0, r3
 8026878:	d1e2      	bne.n	8026840 <mg_check_ip_acl+0x14>
 802687a:	9b06      	ldr	r3, [sp, #24]
 802687c:	781d      	ldrb	r5, [r3, #0]
 802687e:	e7df      	b.n	8026840 <mg_check_ip_acl+0x14>
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 8026880:	252d      	movs	r5, #45	@ 0x2d
 8026882:	e7da      	b.n	802683a <mg_check_ip_acl+0xe>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 8026884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026888:	e006      	b.n	8026898 <mg_check_ip_acl+0x6c>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 802688a:	f06f 0001 	mvn.w	r0, #1
 802688e:	e003      	b.n	8026898 <mg_check_ip_acl+0x6c>
  return allowed == '+';
 8026890:	2d2b      	cmp	r5, #43	@ 0x2b
 8026892:	bf14      	ite	ne
 8026894:	2000      	movne	r0, #0
 8026896:	2001      	moveq	r0, #1
}
 8026898:	b009      	add	sp, #36	@ 0x24
 802689a:	bd30      	pop	{r4, r5, pc}
    return -1;  // TODO(): handle IPv6 ACL and addresses
 802689c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80268a0:	e7fa      	b.n	8026898 <mg_check_ip_acl+0x6c>

080268a2 <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 80268a2:	b082      	sub	sp, #8
 80268a4:	ab02      	add	r3, sp, #8
 80268a6:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 80268aa:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 80268ac:	7803      	ldrb	r3, [r0, #0]
 80268ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80268b0:	d106      	bne.n	80268c0 <mg_path_is_sane+0x1e>
 80268b2:	7843      	ldrb	r3, [r0, #1]
 80268b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80268b6:	d103      	bne.n	80268c0 <mg_path_is_sane+0x1e>
 80268b8:	2000      	movs	r0, #0
 80268ba:	e015      	b.n	80268e8 <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 80268bc:	3201      	adds	r2, #1
 80268be:	3901      	subs	r1, #1
 80268c0:	7813      	ldrb	r3, [r2, #0]
 80268c2:	b183      	cbz	r3, 80268e6 <mg_path_is_sane+0x44>
 80268c4:	b169      	cbz	r1, 80268e2 <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 80268c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80268c8:	d001      	beq.n	80268ce <mg_path_is_sane+0x2c>
 80268ca:	2b5c      	cmp	r3, #92	@ 0x5c
 80268cc:	d1f6      	bne.n	80268bc <mg_path_is_sane+0x1a>
 80268ce:	2901      	cmp	r1, #1
 80268d0:	d9f4      	bls.n	80268bc <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 80268d2:	7853      	ldrb	r3, [r2, #1]
 80268d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80268d6:	d1f1      	bne.n	80268bc <mg_path_is_sane+0x1a>
 80268d8:	7893      	ldrb	r3, [r2, #2]
 80268da:	2b2e      	cmp	r3, #46	@ 0x2e
 80268dc:	d1ee      	bne.n	80268bc <mg_path_is_sane+0x1a>
 80268de:	2000      	movs	r0, #0
 80268e0:	e002      	b.n	80268e8 <mg_path_is_sane+0x46>
  return true;
 80268e2:	2001      	movs	r0, #1
 80268e4:	e000      	b.n	80268e8 <mg_path_is_sane+0x46>
 80268e6:	2001      	movs	r0, #1
}
 80268e8:	b002      	add	sp, #8
 80268ea:	4770      	bx	lr

080268ec <mg_millis>:
uint64_t mg_millis(void) {
 80268ec:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 80268ee:	f7f3 fc0d 	bl	801a10c <xTaskGetTickCount>
}
 80268f2:	2100      	movs	r1, #0
 80268f4:	bd08      	pop	{r3, pc}
	...

080268f8 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 80268f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80268fc:	b092      	sub	sp, #72	@ 0x48
 80268fe:	4605      	mov	r5, r0
 8026900:	460c      	mov	r4, r1
 8026902:	4616      	mov	r6, r2
 8026904:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 8026906:	212f      	movs	r1, #47	@ 0x2f
 8026908:	4620      	mov	r0, r4
 802690a:	f006 fc4b 	bl	802d1a4 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 802690e:	4680      	mov	r8, r0
 8026910:	b1a8      	cbz	r0, 802693e <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8026912:	f7ff ffeb 	bl	80268ec <mg_millis>
 8026916:	f1b8 0f00 	cmp.w	r8, #0
 802691a:	d001      	beq.n	8026920 <mg_log_prefix+0x28>
 802691c:	f108 0401 	add.w	r4, r8, #1
 8026920:	9705      	str	r7, [sp, #20]
 8026922:	9604      	str	r6, [sp, #16]
 8026924:	9403      	str	r4, [sp, #12]
 8026926:	9502      	str	r5, [sp, #8]
 8026928:	9000      	str	r0, [sp, #0]
 802692a:	9101      	str	r1, [sp, #4]
 802692c:	4a0f      	ldr	r2, [pc, #60]	@ (802696c <mg_log_prefix+0x74>)
 802692e:	2129      	movs	r1, #41	@ 0x29
 8026930:	a807      	add	r0, sp, #28
 8026932:	f7fd f9e5 	bl	8023d00 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8026936:	2827      	cmp	r0, #39	@ 0x27
 8026938:	d90e      	bls.n	8026958 <mg_log_prefix+0x60>
 802693a:	2027      	movs	r0, #39	@ 0x27
 802693c:	e00c      	b.n	8026958 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 802693e:	215c      	movs	r1, #92	@ 0x5c
 8026940:	4620      	mov	r0, r4
 8026942:	f006 fc2f 	bl	802d1a4 <strrchr>
 8026946:	4680      	mov	r8, r0
 8026948:	e7e3      	b.n	8026912 <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 802694a:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 802694e:	446b      	add	r3, sp
 8026950:	2220      	movs	r2, #32
 8026952:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8026956:	3001      	adds	r0, #1
 8026958:	2828      	cmp	r0, #40	@ 0x28
 802695a:	d9f6      	bls.n	802694a <mg_log_prefix+0x52>
  logs(buf, n - 1);
 802695c:	1e41      	subs	r1, r0, #1
 802695e:	a807      	add	r0, sp, #28
 8026960:	f7fa fb34 	bl	8020fcc <logs>
}
 8026964:	b012      	add	sp, #72	@ 0x48
 8026966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802696a:	bf00      	nop
 802696c:	0803b550 	.word	0x0803b550

08026970 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8026970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026974:	b084      	sub	sp, #16
 8026976:	4605      	mov	r5, r0
 8026978:	460e      	mov	r6, r1
 802697a:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 802697c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8026980:	2100      	movs	r1, #0
 8026982:	4640      	mov	r0, r8
 8026984:	f006 fbb4 	bl	802d0f0 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8026988:	2e0b      	cmp	r6, #11
 802698a:	f240 808b 	bls.w	8026aa4 <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802698e:	88a8      	ldrh	r0, [r5, #4]
 8026990:	f7ff fc70 	bl	8026274 <mg_ntohs>
 8026994:	2801      	cmp	r0, #1
 8026996:	f200 8089 	bhi.w	8026aac <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 802699a:	88e8      	ldrh	r0, [r5, #6]
 802699c:	f7ff fc6a 	bl	8026274 <mg_ntohs>
 80269a0:	4604      	mov	r4, r0
 80269a2:	4681      	mov	r9, r0
  if (num_answers > 10) {
 80269a4:	280a      	cmp	r0, #10
 80269a6:	d905      	bls.n	80269b4 <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80269a8:	4b43      	ldr	r3, [pc, #268]	@ (8026ab8 <mg_dns_parse+0x148>)
 80269aa:	681b      	ldr	r3, [r3, #0]
 80269ac:	2b02      	cmp	r3, #2
 80269ae:	dc1a      	bgt.n	80269e6 <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 80269b0:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 80269b4:	8828      	ldrh	r0, [r5, #0]
 80269b6:	f7ff fc5d 	bl	8026274 <mg_ntohs>
 80269ba:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 80269be:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80269c0:	2700      	movs	r7, #0
 80269c2:	88a8      	ldrh	r0, [r5, #4]
 80269c4:	f7ff fc56 	bl	8026274 <mg_ntohs>
 80269c8:	42b8      	cmp	r0, r7
 80269ca:	d91a      	bls.n	8026a02 <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80269cc:	ab02      	add	r3, sp, #8
 80269ce:	9300      	str	r3, [sp, #0]
 80269d0:	2301      	movs	r3, #1
 80269d2:	4622      	mov	r2, r4
 80269d4:	4631      	mov	r1, r6
 80269d6:	4628      	mov	r0, r5
 80269d8:	f7fc fba4 	bl	8023124 <mg_dns_parse_rr>
 80269dc:	2800      	cmp	r0, #0
 80269de:	d067      	beq.n	8026ab0 <mg_dns_parse+0x140>
    ofs += n;
 80269e0:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80269e2:	3701      	adds	r7, #1
 80269e4:	e7ed      	b.n	80269c2 <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80269e6:	4b35      	ldr	r3, [pc, #212]	@ (8026abc <mg_dns_parse+0x14c>)
 80269e8:	f240 4293 	movw	r2, #1171	@ 0x493
 80269ec:	4934      	ldr	r1, [pc, #208]	@ (8026ac0 <mg_dns_parse+0x150>)
 80269ee:	2003      	movs	r0, #3
 80269f0:	f7ff ff82 	bl	80268f8 <mg_log_prefix>
 80269f4:	4621      	mov	r1, r4
 80269f6:	4833      	ldr	r0, [pc, #204]	@ (8026ac4 <mg_dns_parse+0x154>)
 80269f8:	f7fd fe2c 	bl	8024654 <mg_log>
    num_answers = 10;  // Sanity cap
 80269fc:	f04f 090a 	mov.w	r9, #10
 8026a00:	e7d8      	b.n	80269b4 <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 8026a02:	2700      	movs	r7, #0
 8026a04:	e013      	b.n	8026a2e <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8026a06:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8026a0a:	2a01      	cmp	r2, #1
 8026a0c:	d12a      	bne.n	8026a64 <mg_dns_parse+0xf4>
 8026a0e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8026a12:	2a01      	cmp	r2, #1
 8026a14:	d126      	bne.n	8026a64 <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 8026a16:	2300      	movs	r3, #0
 8026a18:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8026a1c:	3c04      	subs	r4, #4
 8026a1e:	592b      	ldr	r3, [r5, r4]
 8026a20:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 8026a24:	2001      	movs	r0, #1
 8026a26:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 8026a2a:	e03c      	b.n	8026aa6 <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 8026a2c:	3701      	adds	r7, #1
 8026a2e:	454f      	cmp	r7, r9
 8026a30:	d236      	bcs.n	8026aa0 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8026a32:	ab02      	add	r3, sp, #8
 8026a34:	9300      	str	r3, [sp, #0]
 8026a36:	2300      	movs	r3, #0
 8026a38:	4622      	mov	r2, r4
 8026a3a:	4631      	mov	r1, r6
 8026a3c:	4628      	mov	r0, r5
 8026a3e:	f7fc fb71 	bl	8023124 <mg_dns_parse_rr>
 8026a42:	4682      	mov	sl, r0
 8026a44:	b3b0      	cbz	r0, 8026ab4 <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8026a46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8026a4a:	9300      	str	r3, [sp, #0]
 8026a4c:	f108 0318 	add.w	r3, r8, #24
 8026a50:	4622      	mov	r2, r4
 8026a52:	4631      	mov	r1, r6
 8026a54:	4628      	mov	r0, r5
 8026a56:	f7fb fa54 	bl	8021f02 <mg_dns_parse_name>
    ofs += n;
 8026a5a:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8026a5c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8026a60:	2b04      	cmp	r3, #4
 8026a62:	d0d0      	beq.n	8026a06 <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8026a64:	2b10      	cmp	r3, #16
 8026a66:	d1e1      	bne.n	8026a2c <mg_dns_parse+0xbc>
 8026a68:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8026a6c:	2b1c      	cmp	r3, #28
 8026a6e:	d1dd      	bne.n	8026a2c <mg_dns_parse+0xbc>
 8026a70:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8026a74:	2b01      	cmp	r3, #1
 8026a76:	d1d9      	bne.n	8026a2c <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 8026a78:	2001      	movs	r0, #1
 8026a7a:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8026a7e:	3c10      	subs	r4, #16
 8026a80:	192b      	adds	r3, r5, r4
 8026a82:	592c      	ldr	r4, [r5, r4]
 8026a84:	6859      	ldr	r1, [r3, #4]
 8026a86:	689a      	ldr	r2, [r3, #8]
 8026a88:	68db      	ldr	r3, [r3, #12]
 8026a8a:	f8c8 4004 	str.w	r4, [r8, #4]
 8026a8e:	f8c8 1008 	str.w	r1, [r8, #8]
 8026a92:	f8c8 200c 	str.w	r2, [r8, #12]
 8026a96:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 8026a9a:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 8026a9e:	e002      	b.n	8026aa6 <mg_dns_parse+0x136>
  return true;
 8026aa0:	2001      	movs	r0, #1
 8026aa2:	e000      	b.n	8026aa6 <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8026aa4:	2000      	movs	r0, #0
}
 8026aa6:	b004      	add	sp, #16
 8026aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8026aac:	2000      	movs	r0, #0
 8026aae:	e7fa      	b.n	8026aa6 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8026ab0:	2000      	movs	r0, #0
 8026ab2:	e7f8      	b.n	8026aa6 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8026ab4:	2000      	movs	r0, #0
 8026ab6:	e7f6      	b.n	8026aa6 <mg_dns_parse+0x136>
 8026ab8:	2000012c 	.word	0x2000012c
 8026abc:	0803bfdc 	.word	0x0803bfdc
 8026ac0:	0803b564 	.word	0x0803b564
 8026ac4:	0803b594 	.word	0x0803b594

08026ac8 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8026ac8:	b40e      	push	{r1, r2, r3}
 8026aca:	b510      	push	{r4, lr}
 8026acc:	b093      	sub	sp, #76	@ 0x4c
 8026ace:	4604      	mov	r4, r0
 8026ad0:	ab15      	add	r3, sp, #84	@ 0x54
 8026ad2:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8026ad6:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8026ad8:	ab01      	add	r3, sp, #4
 8026ada:	2140      	movs	r1, #64	@ 0x40
 8026adc:	a802      	add	r0, sp, #8
 8026ade:	f7fd fdf7 	bl	80246d0 <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8026ae2:	4b11      	ldr	r3, [pc, #68]	@ (8026b28 <mg_error+0x60>)
 8026ae4:	681b      	ldr	r3, [r3, #0]
 8026ae6:	2b00      	cmp	r3, #0
 8026ae8:	dc0f      	bgt.n	8026b0a <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8026aea:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026aee:	f043 0320 	orr.w	r3, r3, #32
 8026af2:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8026af6:	aa02      	add	r2, sp, #8
 8026af8:	2100      	movs	r1, #0
 8026afa:	4620      	mov	r0, r4
 8026afc:	f7fc fb61 	bl	80231c2 <mg_call>
}
 8026b00:	b013      	add	sp, #76	@ 0x4c
 8026b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026b06:	b003      	add	sp, #12
 8026b08:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8026b0a:	4b08      	ldr	r3, [pc, #32]	@ (8026b2c <mg_error+0x64>)
 8026b0c:	f240 5253 	movw	r2, #1363	@ 0x553
 8026b10:	4907      	ldr	r1, [pc, #28]	@ (8026b30 <mg_error+0x68>)
 8026b12:	2001      	movs	r0, #1
 8026b14:	f7ff fef0 	bl	80268f8 <mg_log_prefix>
 8026b18:	ab02      	add	r3, sp, #8
 8026b1a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8026b1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026b1e:	4805      	ldr	r0, [pc, #20]	@ (8026b34 <mg_error+0x6c>)
 8026b20:	f7fd fd98 	bl	8024654 <mg_log>
 8026b24:	e7e1      	b.n	8026aea <mg_error+0x22>
 8026b26:	bf00      	nop
 8026b28:	2000012c 	.word	0x2000012c
 8026b2c:	0803bfb8 	.word	0x0803bfb8
 8026b30:	0803b564 	.word	0x0803b564
 8026b34:	0803b5c0 	.word	0x0803b5c0

08026b38 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 8026b38:	b570      	push	{r4, r5, r6, lr}
 8026b3a:	b082      	sub	sp, #8
 8026b3c:	4606      	mov	r6, r0
 8026b3e:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8026b40:	6809      	ldr	r1, [r1, #0]
 8026b42:	68a5      	ldr	r5, [r4, #8]
 8026b44:	6862      	ldr	r2, [r4, #4]
 8026b46:	1b52      	subs	r2, r2, r5
 8026b48:	4429      	add	r1, r5
 8026b4a:	f7ff f9cb 	bl	8025ee4 <mg_tls_recv>
 8026b4e:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 8026b50:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8026b54:	d003      	beq.n	8026b5e <handle_tls_recv+0x26>
  } else if (n > 0) {
 8026b56:	2800      	cmp	r0, #0
 8026b58:	dc06      	bgt.n	8026b68 <handle_tls_recv+0x30>
}
 8026b5a:	b002      	add	sp, #8
 8026b5c:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 8026b5e:	4906      	ldr	r1, [pc, #24]	@ (8026b78 <handle_tls_recv+0x40>)
 8026b60:	4630      	mov	r0, r6
 8026b62:	f7ff ffb1 	bl	8026ac8 <mg_error>
 8026b66:	e7f8      	b.n	8026b5a <handle_tls_recv+0x22>
    io->len += (size_t) n;
 8026b68:	4405      	add	r5, r0
 8026b6a:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 8026b6c:	aa01      	add	r2, sp, #4
 8026b6e:	2107      	movs	r1, #7
 8026b70:	4630      	mov	r0, r6
 8026b72:	f7fc fb26 	bl	80231c2 <mg_call>
}
 8026b76:	e7f0      	b.n	8026b5a <handle_tls_recv+0x22>
 8026b78:	0803b5cc 	.word	0x0803b5cc

08026b7c <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8026b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b80:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8026b84:	4607      	mov	r7, r0
 8026b86:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8026b88:	2907      	cmp	r1, #7
 8026b8a:	f000 80e3 	beq.w	8026d54 <http_cb+0x1d8>
 8026b8e:	2909      	cmp	r1, #9
 8026b90:	f000 814a 	beq.w	8026e28 <http_cb+0x2ac>
 8026b94:	2902      	cmp	r1, #2
 8026b96:	f040 80d9 	bne.w	8026d4c <http_cb+0x1d0>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8026b9a:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8026b9e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8026ba2:	f023 030b 	bic.w	r3, r3, #11
 8026ba6:	04db      	lsls	r3, r3, #19
 8026ba8:	0cdb      	lsrs	r3, r3, #19
 8026baa:	2b04      	cmp	r3, #4
 8026bac:	f040 80ce 	bne.w	8026d4c <http_cb+0x1d0>
       c->recv.len > 0)) {  // see #2796
 8026bb0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8026bb2:	2b00      	cmp	r3, #0
 8026bb4:	f000 80ca 	beq.w	8026d4c <http_cb+0x1d0>
 8026bb8:	f04f 0900 	mov.w	r9, #0
 8026bbc:	e0cc      	b.n	8026d58 <http_cb+0x1dc>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8026bbe:	4b9f      	ldr	r3, [pc, #636]	@ (8026e3c <http_cb+0x2c0>)
 8026bc0:	681b      	ldr	r3, [r3, #0]
 8026bc2:	2b00      	cmp	r3, #0
 8026bc4:	dc11      	bgt.n	8026bea <http_cb+0x6e>
        c->is_draining = 1;
 8026bc6:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8026bca:	f043 0310 	orr.w	r3, r3, #16
 8026bce:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8026bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026bd4:	eba3 0109 	sub.w	r1, r3, r9
 8026bd8:	2910      	cmp	r1, #16
 8026bda:	bf28      	it	cs
 8026bdc:	2110      	movcs	r1, #16
 8026bde:	4620      	mov	r0, r4
 8026be0:	f7fc fe9a 	bl	8023918 <mg_hexdump>
        c->recv.len = 0;
 8026be4:	2300      	movs	r3, #0
 8026be6:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 8026be8:	e0b0      	b.n	8026d4c <http_cb+0x1d0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8026bea:	4b95      	ldr	r3, [pc, #596]	@ (8026e40 <http_cb+0x2c4>)
 8026bec:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8026bf0:	4994      	ldr	r1, [pc, #592]	@ (8026e44 <http_cb+0x2c8>)
 8026bf2:	2001      	movs	r0, #1
 8026bf4:	f7ff fe80 	bl	80268f8 <mg_log_prefix>
 8026bf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8026bfa:	4893      	ldr	r0, [pc, #588]	@ (8026e48 <http_cb+0x2cc>)
 8026bfc:	f7fd fd2a 	bl	8024654 <mg_log>
 8026c00:	e7e1      	b.n	8026bc6 <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8026c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026c04:	eba3 0309 	sub.w	r3, r3, r9
 8026c08:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8026c0a:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 8026c0c:	9986      	ldr	r1, [sp, #536]	@ 0x218
 8026c0e:	1a52      	subs	r2, r2, r1
 8026c10:	1a9b      	subs	r3, r3, r2
 8026c12:	9383      	str	r3, [sp, #524]	@ 0x20c
 8026c14:	e0bf      	b.n	8026d96 <http_cb+0x21a>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8026c16:	ad88      	add	r5, sp, #544	@ 0x220
 8026c18:	498c      	ldr	r1, [pc, #560]	@ (8026e4c <http_cb+0x2d0>)
 8026c1a:	4628      	mov	r0, r5
 8026c1c:	f7fd fef8 	bl	8024a10 <mg_str_s>
 8026c20:	e895 000c 	ldmia.w	r5, {r2, r3}
 8026c24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026c28:	f7fd ffed 	bl	8024c06 <mg_strcasecmp>
 8026c2c:	4604      	mov	r4, r0
 8026c2e:	b950      	cbnz	r0, 8026c46 <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 8026c30:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8026c32:	eb08 0309 	add.w	r3, r8, r9
 8026c36:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8026c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026c3a:	eba3 0309 	sub.w	r3, r3, r9
 8026c3e:	eba3 0b08 	sub.w	fp, r3, r8
 8026c42:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8026c44:	e04a      	b.n	8026cdc <http_cb+0x160>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8026c46:	4982      	ldr	r1, [pc, #520]	@ (8026e50 <http_cb+0x2d4>)
 8026c48:	4638      	mov	r0, r7
 8026c4a:	f7ff ff3d 	bl	8026ac8 <mg_error>
          return;
 8026c4e:	e07d      	b.n	8026d4c <http_cb+0x1d0>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8026c50:	2205      	movs	r2, #5
 8026c52:	4980      	ldr	r1, [pc, #512]	@ (8026e54 <http_cb+0x2d8>)
 8026c54:	9802      	ldr	r0, [sp, #8]
 8026c56:	f7f9 fc03 	bl	8020460 <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8026c5a:	2800      	cmp	r0, #0
 8026c5c:	d032      	beq.n	8026cc4 <http_cb+0x148>
 8026c5e:	ac8a      	add	r4, sp, #552	@ 0x228
 8026c60:	497d      	ldr	r1, [pc, #500]	@ (8026e58 <http_cb+0x2dc>)
 8026c62:	4620      	mov	r0, r4
 8026c64:	f7fd fed4 	bl	8024a10 <mg_str_s>
 8026c68:	a902      	add	r1, sp, #8
 8026c6a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026c6e:	c903      	ldmia	r1, {r0, r1}
 8026c70:	f7fd ffc9 	bl	8024c06 <mg_strcasecmp>
 8026c74:	b9c0      	cbnz	r0, 8026ca8 <http_cb+0x12c>
          ofs += (size_t) n;  // this request has been processed
 8026c76:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 8026c78:	4a78      	ldr	r2, [pc, #480]	@ (8026e5c <http_cb+0x2e0>)
 8026c7a:	4613      	mov	r3, r2
 8026c7c:	f240 119b 	movw	r1, #411	@ 0x19b
 8026c80:	4638      	mov	r0, r7
 8026c82:	f7fd fd3b 	bl	80246fc <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8026c86:	4b6d      	ldr	r3, [pc, #436]	@ (8026e3c <http_cb+0x2c0>)
 8026c88:	681b      	ldr	r3, [r3, #0]
 8026c8a:	2b00      	cmp	r3, #0
 8026c8c:	f340 8092 	ble.w	8026db4 <http_cb+0x238>
 8026c90:	4b6b      	ldr	r3, [pc, #428]	@ (8026e40 <http_cb+0x2c4>)
 8026c92:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8026c96:	496b      	ldr	r1, [pc, #428]	@ (8026e44 <http_cb+0x2c8>)
 8026c98:	2001      	movs	r0, #1
 8026c9a:	f7ff fe2d 	bl	80268f8 <mg_log_prefix>
 8026c9e:	4970      	ldr	r1, [pc, #448]	@ (8026e60 <http_cb+0x2e4>)
 8026ca0:	4870      	ldr	r0, [pc, #448]	@ (8026e64 <http_cb+0x2e8>)
 8026ca2:	f7fd fcd7 	bl	8024654 <mg_log>
      if (is_chunked) {
 8026ca6:	e085      	b.n	8026db4 <http_cb+0x238>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8026ca8:	ac8c      	add	r4, sp, #560	@ 0x230
 8026caa:	496f      	ldr	r1, [pc, #444]	@ (8026e68 <http_cb+0x2ec>)
 8026cac:	4620      	mov	r0, r4
 8026cae:	f7fd feaf 	bl	8024a10 <mg_str_s>
 8026cb2:	a902      	add	r1, sp, #8
 8026cb4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026cb8:	c903      	ldmia	r1, {r0, r1}
 8026cba:	f7fd ffa4 	bl	8024c06 <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8026cbe:	2800      	cmp	r0, #0
 8026cc0:	d178      	bne.n	8026db4 <http_cb+0x238>
 8026cc2:	e7d8      	b.n	8026c76 <http_cb+0xfa>
          int status = mg_http_status(&hm);
 8026cc4:	a802      	add	r0, sp, #8
 8026cc6:	f7fc fb6f 	bl	80233a8 <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 8026cca:	28c7      	cmp	r0, #199	@ 0xc7
 8026ccc:	dd72      	ble.n	8026db4 <http_cb+0x238>
 8026cce:	28cc      	cmp	r0, #204	@ 0xcc
 8026cd0:	d070      	beq.n	8026db4 <http_cb+0x238>
 8026cd2:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 8026cd6:	d1cf      	bne.n	8026c78 <http_cb+0xfc>
 8026cd8:	e06c      	b.n	8026db4 <http_cb+0x238>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8026cda:	4406      	add	r6, r0
 8026cdc:	ab01      	add	r3, sp, #4
 8026cde:	466a      	mov	r2, sp
 8026ce0:	ebab 0106 	sub.w	r1, fp, r6
 8026ce4:	19a8      	adds	r0, r5, r6
 8026ce6:	f7fe fecd 	bl	8025a84 <skip_chunk>
 8026cea:	2800      	cmp	r0, #0
 8026cec:	dd02      	ble.n	8026cf4 <http_cb+0x178>
 8026cee:	9b01      	ldr	r3, [sp, #4]
 8026cf0:	2b00      	cmp	r3, #0
 8026cf2:	d1f2      	bne.n	8026cda <http_cb+0x15e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8026cf4:	b338      	cbz	r0, 8026d46 <http_cb+0x1ca>
        if (cl < 0) {
 8026cf6:	2800      	cmp	r0, #0
 8026cf8:	db21      	blt.n	8026d3e <http_cb+0x1c2>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8026cfa:	2300      	movs	r3, #0
 8026cfc:	9383      	str	r3, [sp, #524]	@ 0x20c
 8026cfe:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8026d02:	ab01      	add	r3, sp, #4
 8026d04:	466a      	mov	r2, sp
 8026d06:	ebab 0104 	sub.w	r1, fp, r4
 8026d0a:	1928      	adds	r0, r5, r4
 8026d0c:	f7fe feba 	bl	8025a84 <skip_chunk>
 8026d10:	1e06      	subs	r6, r0, #0
 8026d12:	dd11      	ble.n	8026d38 <http_cb+0x1bc>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8026d14:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 8026d16:	9900      	ldr	r1, [sp, #0]
 8026d18:	4421      	add	r1, r4
 8026d1a:	9a01      	ldr	r2, [sp, #4]
 8026d1c:	4429      	add	r1, r5
 8026d1e:	4428      	add	r0, r5
 8026d20:	f006 f9cc 	bl	802d0bc <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8026d24:	4434      	add	r4, r6
 8026d26:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8026d28:	9b01      	ldr	r3, [sp, #4]
 8026d2a:	441a      	add	r2, r3
 8026d2c:	9283      	str	r2, [sp, #524]	@ 0x20c
 8026d2e:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 8026d30:	441a      	add	r2, r3
 8026d32:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 8026d34:	2b00      	cmp	r3, #0
 8026d36:	d1e4      	bne.n	8026d02 <http_cb+0x186>
        ofs += (size_t) (n + o);
 8026d38:	4444      	add	r4, r8
 8026d3a:	44a1      	add	r9, r4
 8026d3c:	e044      	b.n	8026dc8 <http_cb+0x24c>
          mg_error(c, "Invalid chunk");
 8026d3e:	494b      	ldr	r1, [pc, #300]	@ (8026e6c <http_cb+0x2f0>)
 8026d40:	4638      	mov	r0, r7
 8026d42:	f7ff fec1 	bl	8026ac8 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8026d46:	f1b9 0f00 	cmp.w	r9, #0
 8026d4a:	d170      	bne.n	8026e2e <http_cb+0x2b2>
}
 8026d4c:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 8026d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d54:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8026d58:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 8026d5c:	2b00      	cmp	r3, #0
 8026d5e:	dbf2      	blt.n	8026d46 <http_cb+0x1ca>
 8026d60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8026d62:	4549      	cmp	r1, r9
 8026d64:	d9ef      	bls.n	8026d46 <http_cb+0x1ca>
      const char *buf = (char *) c->recv.buf + ofs;
 8026d66:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8026d68:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8026d6a:	aa02      	add	r2, sp, #8
 8026d6c:	eba1 0109 	sub.w	r1, r1, r9
 8026d70:	4620      	mov	r0, r4
 8026d72:	f7fd ff77 	bl	8024c64 <mg_http_parse>
      if (n < 0) {
 8026d76:	f1b0 0800 	subs.w	r8, r0, #0
 8026d7a:	f6ff af20 	blt.w	8026bbe <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 8026d7e:	f1b8 0f00 	cmp.w	r8, #0
 8026d82:	d0e0      	beq.n	8026d46 <http_cb+0x1ca>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8026d84:	aa02      	add	r2, sp, #8
 8026d86:	210a      	movs	r1, #10
 8026d88:	4638      	mov	r0, r7
 8026d8a:	f7fc fa1a 	bl	80231c2 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8026d8e:	f1ba 0f09 	cmp.w	sl, #9
 8026d92:	f43f af36 	beq.w	8026c02 <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8026d96:	4936      	ldr	r1, [pc, #216]	@ (8026e70 <http_cb+0x2f4>)
 8026d98:	a802      	add	r0, sp, #8
 8026d9a:	f7fc fadb 	bl	8023354 <mg_http_get_header>
 8026d9e:	4604      	mov	r4, r0
 8026da0:	2800      	cmp	r0, #0
 8026da2:	f47f af38 	bne.w	8026c16 <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8026da6:	4933      	ldr	r1, [pc, #204]	@ (8026e74 <http_cb+0x2f8>)
 8026da8:	a802      	add	r0, sp, #8
 8026daa:	f7fc fad3 	bl	8023354 <mg_http_get_header>
 8026dae:	2800      	cmp	r0, #0
 8026db0:	f43f af4e 	beq.w	8026c50 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 8026db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026db6:	eba3 0309 	sub.w	r3, r3, r9
 8026dba:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 8026dbe:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8026dc0:	429a      	cmp	r2, r3
 8026dc2:	d8c0      	bhi.n	8026d46 <http_cb+0x1ca>
        ofs += (size_t) n + hm.body.len;
 8026dc4:	4490      	add	r8, r2
 8026dc6:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8026dc8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8026dcc:	f013 0f04 	tst.w	r3, #4
 8026dd0:	d005      	beq.n	8026dde <http_cb+0x262>
 8026dd2:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8026dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026dda:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8026dde:	aa02      	add	r2, sp, #8
 8026de0:	210b      	movs	r1, #11
 8026de2:	4638      	mov	r0, r7
 8026de4:	f7fc f9ed 	bl	80231c2 <mg_call>
      if (c->is_accepted) {
 8026de8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8026dec:	f013 0f04 	tst.w	r3, #4
 8026df0:	d0b2      	beq.n	8026d58 <http_cb+0x1dc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8026df2:	4921      	ldr	r1, [pc, #132]	@ (8026e78 <http_cb+0x2fc>)
 8026df4:	a802      	add	r0, sp, #8
 8026df6:	f7fc faad 	bl	8023354 <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 8026dfa:	4605      	mov	r5, r0
 8026dfc:	2800      	cmp	r0, #0
 8026dfe:	d0ab      	beq.n	8026d58 <http_cb+0x1dc>
 8026e00:	ac8e      	add	r4, sp, #568	@ 0x238
 8026e02:	491e      	ldr	r1, [pc, #120]	@ (8026e7c <http_cb+0x300>)
 8026e04:	4620      	mov	r0, r4
 8026e06:	f7fd fe03 	bl	8024a10 <mg_str_s>
 8026e0a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026e0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026e12:	f7fd fef8 	bl	8024c06 <mg_strcasecmp>
 8026e16:	2800      	cmp	r0, #0
 8026e18:	d19e      	bne.n	8026d58 <http_cb+0x1dc>
          c->is_draining = 1;  // honor "Connection: close"
 8026e1a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8026e1e:	f043 0310 	orr.w	r3, r3, #16
 8026e22:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 8026e26:	e78e      	b.n	8026d46 <http_cb+0x1ca>
 8026e28:	f04f 0900 	mov.w	r9, #0
 8026e2c:	e794      	b.n	8026d58 <http_cb+0x1dc>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8026e2e:	464a      	mov	r2, r9
 8026e30:	2100      	movs	r1, #0
 8026e32:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8026e36:	f7ff f928 	bl	802608a <mg_iobuf_del>
 8026e3a:	e787      	b.n	8026d4c <http_cb+0x1d0>
 8026e3c:	2000012c 	.word	0x2000012c
 8026e40:	0803bfb0 	.word	0x0803bfb0
 8026e44:	0803b564 	.word	0x0803b564
 8026e48:	0803b5dc 	.word	0x0803b5dc
 8026e4c:	0803b5f4 	.word	0x0803b5f4
 8026e50:	0803b5fc 	.word	0x0803b5fc
 8026e54:	0803ad5c 	.word	0x0803ad5c
 8026e58:	08036f6c 	.word	0x08036f6c
 8026e5c:	08037490 	.word	0x08037490
 8026e60:	0803b628 	.word	0x0803b628
 8026e64:	0803b87c 	.word	0x0803b87c
 8026e68:	08037cb8 	.word	0x08037cb8
 8026e6c:	0803b64c 	.word	0x0803b64c
 8026e70:	0803b604 	.word	0x0803b604
 8026e74:	0803b618 	.word	0x0803b618
 8026e78:	0803b65c 	.word	0x0803b65c
 8026e7c:	0803b668 	.word	0x0803b668

08026e80 <uri_to_path2>:
                        char *path, size_t path_size) {
 8026e80:	b082      	sub	sp, #8
 8026e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026e86:	b086      	sub	sp, #24
 8026e88:	4681      	mov	r9, r0
 8026e8a:	460e      	mov	r6, r1
 8026e8c:	4690      	mov	r8, r2
 8026e8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026e90:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026e92:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8026e94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026e96:	9300      	str	r3, [sp, #0]
 8026e98:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026e9a:	4a6f      	ldr	r2, [pc, #444]	@ (8027058 <uri_to_path2+0x1d8>)
 8026e9c:	4639      	mov	r1, r7
 8026e9e:	4628      	mov	r0, r5
 8026ea0:	f7fc ff2e 	bl	8023d00 <mg_snprintf>
  if (n + 2 >= path_size) {
 8026ea4:	1c83      	adds	r3, r0, #2
 8026ea6:	42bb      	cmp	r3, r7
 8026ea8:	d227      	bcs.n	8026efa <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 8026eaa:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 8026eae:	2300      	movs	r3, #0
 8026eb0:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8026eb4:	b150      	cbz	r0, 8026ecc <uri_to_path2+0x4c>
 8026eb6:	182b      	adds	r3, r5, r0
 8026eb8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8026ebc:	2b2f      	cmp	r3, #47	@ 0x2f
 8026ebe:	d005      	beq.n	8026ecc <uri_to_path2+0x4c>
 8026ec0:	1c43      	adds	r3, r0, #1
 8026ec2:	222f      	movs	r2, #47	@ 0x2f
 8026ec4:	542a      	strb	r2, [r5, r0]
 8026ec6:	2200      	movs	r2, #0
 8026ec8:	54ea      	strb	r2, [r5, r3]
 8026eca:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 8026ecc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026ece:	68f1      	ldr	r1, [r6, #12]
 8026ed0:	428c      	cmp	r4, r1
 8026ed2:	d31c      	bcc.n	8026f0e <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 8026ed4:	2300      	movs	r3, #0
 8026ed6:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8026eda:	ac02      	add	r4, sp, #8
 8026edc:	463a      	mov	r2, r7
 8026ede:	4629      	mov	r1, r5
 8026ee0:	4620      	mov	r0, r4
 8026ee2:	f7fd fda1 	bl	8024a28 <mg_str_n>
 8026ee6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026eea:	f7ff fcda 	bl	80268a2 <mg_path_is_sane>
 8026eee:	b1c0      	cbz	r0, 8026f22 <uri_to_path2+0xa2>
  n = strlen(path);
 8026ef0:	4628      	mov	r0, r5
 8026ef2:	f7e9 f9d5 	bl	80102a0 <strlen>
 8026ef6:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8026ef8:	e020      	b.n	8026f3c <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8026efa:	4b58      	ldr	r3, [pc, #352]	@ (802705c <uri_to_path2+0x1dc>)
 8026efc:	4a58      	ldr	r2, [pc, #352]	@ (8027060 <uri_to_path2+0x1e0>)
 8026efe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026f02:	4648      	mov	r0, r9
 8026f04:	f7fd fbfa 	bl	80246fc <mg_http_reply>
    return -1;
 8026f08:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8026f0c:	e046      	b.n	8026f9c <uri_to_path2+0x11c>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8026f0e:	2300      	movs	r3, #0
 8026f10:	9300      	str	r3, [sp, #0]
 8026f12:	1a3b      	subs	r3, r7, r0
 8026f14:	182a      	adds	r2, r5, r0
 8026f16:	1b09      	subs	r1, r1, r4
 8026f18:	68b0      	ldr	r0, [r6, #8]
 8026f1a:	4420      	add	r0, r4
 8026f1c:	f7fe fc06 	bl	802572c <mg_url_decode>
 8026f20:	e7d8      	b.n	8026ed4 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 8026f22:	4b50      	ldr	r3, [pc, #320]	@ (8027064 <uri_to_path2+0x1e4>)
 8026f24:	4a4e      	ldr	r2, [pc, #312]	@ (8027060 <uri_to_path2+0x1e0>)
 8026f26:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026f2a:	4648      	mov	r0, r9
 8026f2c:	f7fd fbe6 	bl	80246fc <mg_http_reply>
    return -1;
 8026f30:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8026f34:	e032      	b.n	8026f9c <uri_to_path2+0x11c>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8026f36:	2200      	movs	r2, #0
 8026f38:	54ea      	strb	r2, [r5, r3]
 8026f3a:	461c      	mov	r4, r3
 8026f3c:	2c01      	cmp	r4, #1
 8026f3e:	d905      	bls.n	8026f4c <uri_to_path2+0xcc>
 8026f40:	1e63      	subs	r3, r4, #1
 8026f42:	f815 c003 	ldrb.w	ip, [r5, r3]
 8026f46:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8026f4a:	d0f4      	beq.n	8026f36 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8026f4c:	f10d 0a10 	add.w	sl, sp, #16
 8026f50:	4945      	ldr	r1, [pc, #276]	@ (8027068 <uri_to_path2+0x1e8>)
 8026f52:	4650      	mov	r0, sl
 8026f54:	f7fd fd5c 	bl	8024a10 <mg_str_s>
 8026f58:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8026f5c:	f106 0108 	add.w	r1, r6, #8
 8026f60:	c903      	ldmia	r1, {r0, r1}
 8026f62:	f7fd fe26 	bl	8024bb2 <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 8026f66:	b1f8      	cbz	r0, 8026fa8 <uri_to_path2+0x128>
 8026f68:	f8d8 3000 	ldr.w	r3, [r8]
 8026f6c:	2200      	movs	r2, #0
 8026f6e:	4611      	mov	r1, r2
 8026f70:	4628      	mov	r0, r5
 8026f72:	4798      	blx	r3
 8026f74:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8026f76:	4b3d      	ldr	r3, [pc, #244]	@ (802706c <uri_to_path2+0x1ec>)
 8026f78:	681b      	ldr	r3, [r3, #0]
 8026f7a:	2b03      	cmp	r3, #3
 8026f7c:	dc17      	bgt.n	8026fae <uri_to_path2+0x12e>
  if (flags == 0) {
 8026f7e:	f1ba 0f00 	cmp.w	sl, #0
 8026f82:	d00b      	beq.n	8026f9c <uri_to_path2+0x11c>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026f84:	f01a 0104 	ands.w	r1, sl, #4
 8026f88:	d007      	beq.n	8026f9a <uri_to_path2+0x11a>
 8026f8a:	68f2      	ldr	r2, [r6, #12]
 8026f8c:	b12a      	cbz	r2, 8026f9a <uri_to_path2+0x11a>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 8026f8e:	68b3      	ldr	r3, [r6, #8]
 8026f90:	1898      	adds	r0, r3, r2
 8026f92:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026f96:	282f      	cmp	r0, #47	@ 0x2f
 8026f98:	d11b      	bne.n	8026fd2 <uri_to_path2+0x152>
  } else if (flags & MG_FS_DIR) {
 8026f9a:	bb39      	cbnz	r1, 8026fec <uri_to_path2+0x16c>
}
 8026f9c:	4650      	mov	r0, sl
 8026f9e:	b006      	add	sp, #24
 8026fa0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026fa4:	b002      	add	sp, #8
 8026fa6:	4770      	bx	lr
                                               : fs->st(path, NULL, NULL);
 8026fa8:	f04f 0a04 	mov.w	sl, #4
 8026fac:	e7e3      	b.n	8026f76 <uri_to_path2+0xf6>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8026fae:	4b30      	ldr	r3, [pc, #192]	@ (8027070 <uri_to_path2+0x1f0>)
 8026fb0:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 8026fb4:	492f      	ldr	r1, [pc, #188]	@ (8027074 <uri_to_path2+0x1f4>)
 8026fb6:	2004      	movs	r0, #4
 8026fb8:	f7ff fc9e 	bl	80268f8 <mg_log_prefix>
 8026fbc:	f8cd a004 	str.w	sl, [sp, #4]
 8026fc0:	9500      	str	r5, [sp, #0]
 8026fc2:	68b3      	ldr	r3, [r6, #8]
 8026fc4:	68f2      	ldr	r2, [r6, #12]
 8026fc6:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 8026fca:	482b      	ldr	r0, [pc, #172]	@ (8027078 <uri_to_path2+0x1f8>)
 8026fcc:	f7fd fb42 	bl	8024654 <mg_log>
 8026fd0:	e7d5      	b.n	8026f7e <uri_to_path2+0xfe>
    mg_printf(c,
 8026fd2:	492a      	ldr	r1, [pc, #168]	@ (802707c <uri_to_path2+0x1fc>)
 8026fd4:	4648      	mov	r0, r9
 8026fd6:	f7fd fb6b 	bl	80246b0 <mg_printf>
    c->is_resp = 0;
 8026fda:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 8026fde:	f36f 13c7 	bfc	r3, #7, #1
 8026fe2:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 8026fe6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8026fea:	e7d7      	b.n	8026f9c <uri_to_path2+0x11c>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8026fec:	192e      	adds	r6, r5, r4
 8026fee:	1b3f      	subs	r7, r7, r4
 8026ff0:	4a23      	ldr	r2, [pc, #140]	@ (8027080 <uri_to_path2+0x200>)
 8026ff2:	4639      	mov	r1, r7
 8026ff4:	4630      	mov	r0, r6
 8026ff6:	f7fc fe83 	bl	8023d00 <mg_snprintf>
 8026ffa:	b130      	cbz	r0, 802700a <uri_to_path2+0x18a>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8026ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8027000:	2200      	movs	r2, #0
 8027002:	4611      	mov	r1, r2
 8027004:	4628      	mov	r0, r5
 8027006:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8027008:	bb08      	cbnz	r0, 802704e <uri_to_path2+0x1ce>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 802700a:	4a1e      	ldr	r2, [pc, #120]	@ (8027084 <uri_to_path2+0x204>)
 802700c:	4639      	mov	r1, r7
 802700e:	4630      	mov	r0, r6
 8027010:	f7fc fe76 	bl	8023d00 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8027014:	b130      	cbz	r0, 8027024 <uri_to_path2+0x1a4>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8027016:	f8d8 3000 	ldr.w	r3, [r8]
 802701a:	2200      	movs	r2, #0
 802701c:	4611      	mov	r1, r2
 802701e:	4628      	mov	r0, r5
 8027020:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8027022:	b9b0      	cbnz	r0, 8027052 <uri_to_path2+0x1d2>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8027024:	4a18      	ldr	r2, [pc, #96]	@ (8027088 <uri_to_path2+0x208>)
 8027026:	4639      	mov	r1, r7
 8027028:	4630      	mov	r0, r6
 802702a:	f7fc fe69 	bl	8023d00 <mg_snprintf>
 802702e:	b158      	cbz	r0, 8027048 <uri_to_path2+0x1c8>
                (tmp = fs->st(path, NULL, NULL)) !=
 8027030:	f8d8 3000 	ldr.w	r3, [r8]
 8027034:	2200      	movs	r2, #0
 8027036:	4611      	mov	r1, r2
 8027038:	4628      	mov	r0, r5
 802703a:	4798      	blx	r3
                    0 &&
 802703c:	b120      	cbz	r0, 8027048 <uri_to_path2+0x1c8>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 802703e:	340b      	adds	r4, #11
 8027040:	2200      	movs	r2, #0
 8027042:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 8027044:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8027046:	e7a9      	b.n	8026f9c <uri_to_path2+0x11c>
      path[n] = '\0';  // Remove appended index file name
 8027048:	2300      	movs	r3, #0
 802704a:	7033      	strb	r3, [r6, #0]
 802704c:	e7a6      	b.n	8026f9c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 802704e:	4682      	mov	sl, r0
 8027050:	e7a4      	b.n	8026f9c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8027052:	4682      	mov	sl, r0
 8027054:	e7a2      	b.n	8026f9c <uri_to_path2+0x11c>
 8027056:	bf00      	nop
 8027058:	0803acb4 	.word	0x0803acb4
 802705c:	0803b670 	.word	0x0803b670
 8027060:	08037490 	.word	0x08037490
 8027064:	0803b684 	.word	0x0803b684
 8027068:	0803ad60 	.word	0x0803ad60
 802706c:	2000012c 	.word	0x2000012c
 8027070:	0803bfa0 	.word	0x0803bfa0
 8027074:	0803b564 	.word	0x0803b564
 8027078:	0803b694 	.word	0x0803b694
 802707c:	0803b6a8 	.word	0x0803b6a8
 8027080:	0803b6e4 	.word	0x0803b6e4
 8027084:	0803b6f0 	.word	0x0803b6f0
 8027088:	0803b700 	.word	0x0803b700

0802708c <uri_to_path>:
                       size_t path_size) {
 802708c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027090:	b096      	sub	sp, #88	@ 0x58
 8027092:	4606      	mov	r6, r0
 8027094:	460d      	mov	r5, r1
 8027096:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8027098:	f8d2 8014 	ldr.w	r8, [r2, #20]
 802709c:	f1b8 0f00 	cmp.w	r8, #0
 80270a0:	d069      	beq.n	8027176 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 80270a2:	6811      	ldr	r1, [r2, #0]
 80270a4:	a80c      	add	r0, sp, #48	@ 0x30
 80270a6:	f7fd fcb3 	bl	8024a10 <mg_str_s>
 80270aa:	2300      	movs	r3, #0
 80270ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80270ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80270b0:	ab08      	add	r3, sp, #32
 80270b2:	aa0a      	add	r2, sp, #40	@ 0x28
 80270b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80270b8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 80270bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80270be:	222c      	movs	r2, #44	@ 0x2c
 80270c0:	9200      	str	r2, [sp, #0]
 80270c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80270c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80270c8:	f7fd ff5f 	bl	8024f8a <mg_span>
 80270cc:	2800      	cmp	r0, #0
 80270ce:	d055      	beq.n	802717c <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 80270d0:	233d      	movs	r3, #61	@ 0x3d
 80270d2:	9300      	str	r3, [sp, #0]
 80270d4:	ab10      	add	r3, sp, #64	@ 0x40
 80270d6:	aa12      	add	r2, sp, #72	@ 0x48
 80270d8:	ac0e      	add	r4, sp, #56	@ 0x38
 80270da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80270de:	f7fd ff54 	bl	8024f8a <mg_span>
 80270e2:	b978      	cbnz	r0, 8027104 <uri_to_path+0x78>
 80270e4:	ab12      	add	r3, sp, #72	@ 0x48
 80270e6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80270ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80270ee:	ac06      	add	r4, sp, #24
 80270f0:	2200      	movs	r2, #0
 80270f2:	4611      	mov	r1, r2
 80270f4:	4620      	mov	r0, r4
 80270f6:	f7fd fc97 	bl	8024a28 <mg_str_n>
 80270fa:	ab10      	add	r3, sp, #64	@ 0x40
 80270fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027100:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8027104:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027106:	b9c3      	cbnz	r3, 802713a <uri_to_path+0xae>
 8027108:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 802710c:	ac12      	add	r4, sp, #72	@ 0x48
 802710e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027112:	e889 0003 	stmia.w	r9, {r0, r1}
 8027116:	f10d 0a18 	add.w	sl, sp, #24
 802711a:	4922      	ldr	r1, [pc, #136]	@ (80271a4 <uri_to_path+0x118>)
 802711c:	4650      	mov	r0, sl
 802711e:	f7fd fc77 	bl	8024a10 <mg_str_s>
 8027122:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8027126:	e884 0003 	stmia.w	r4, {r0, r1}
 802712a:	ab0a      	add	r3, sp, #40	@ 0x28
 802712c:	e883 0003 	stmia.w	r3, {r0, r1}
 8027130:	ab08      	add	r3, sp, #32
 8027132:	e899 0003 	ldmia.w	r9, {r0, r1}
 8027136:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 802713a:	68eb      	ldr	r3, [r5, #12]
 802713c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802713e:	4293      	cmp	r3, r2
 8027140:	d3bc      	bcc.n	80270bc <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8027142:	ac14      	add	r4, sp, #80	@ 0x50
 8027144:	68a9      	ldr	r1, [r5, #8]
 8027146:	4620      	mov	r0, r4
 8027148:	f7fd fc6e 	bl	8024a28 <mg_str_n>
 802714c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8027150:	a912      	add	r1, sp, #72	@ 0x48
 8027152:	c903      	ldmia	r1, {r0, r1}
 8027154:	f7fd fd2d 	bl	8024bb2 <mg_strcmp>
 8027158:	2800      	cmp	r0, #0
 802715a:	d1af      	bne.n	80270bc <uri_to_path+0x30>
    u = k, p = v;
 802715c:	ab0a      	add	r3, sp, #40	@ 0x28
 802715e:	aa12      	add	r2, sp, #72	@ 0x48
 8027160:	e892 0003 	ldmia.w	r2, {r0, r1}
 8027164:	e883 0003 	stmia.w	r3, {r0, r1}
 8027168:	ab08      	add	r3, sp, #32
 802716a:	aa10      	add	r2, sp, #64	@ 0x40
 802716c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8027170:	e883 0003 	stmia.w	r3, {r0, r1}
 8027174:	e7a2      	b.n	80270bc <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8027176:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 80271a8 <uri_to_path+0x11c>
 802717a:	e792      	b.n	80270a2 <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 802717c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802717e:	9304      	str	r3, [sp, #16]
 8027180:	9703      	str	r7, [sp, #12]
 8027182:	ab01      	add	r3, sp, #4
 8027184:	aa08      	add	r2, sp, #32
 8027186:	e892 0003 	ldmia.w	r2, {r0, r1}
 802718a:	e883 0003 	stmia.w	r3, {r0, r1}
 802718e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027190:	9300      	str	r3, [sp, #0]
 8027192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027194:	4642      	mov	r2, r8
 8027196:	4629      	mov	r1, r5
 8027198:	4630      	mov	r0, r6
 802719a:	f7ff fe71 	bl	8026e80 <uri_to_path2>
}
 802719e:	b016      	add	sp, #88	@ 0x58
 80271a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80271a4:	0803ad60 	.word	0x0803ad60
 80271a8:	20000130 	.word	0x20000130

080271ac <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 80271ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80271b0:	b0a7      	sub	sp, #156	@ 0x9c
 80271b2:	4607      	mov	r7, r0
 80271b4:	460e      	mov	r6, r1
 80271b6:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 80271b8:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 80271bc:	2380      	movs	r3, #128	@ 0x80
 80271be:	9300      	str	r3, [sp, #0]
 80271c0:	ab02      	add	r3, sp, #8
 80271c2:	f7ff ff63 	bl	802708c <uri_to_path>
  if (flags < 0) {
 80271c6:	2800      	cmp	r0, #0
 80271c8:	db20      	blt.n	802720c <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 80271ca:	f010 0f04 	tst.w	r0, #4
 80271ce:	d120      	bne.n	8027212 <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 80271d0:	b1b0      	cbz	r0, 8027200 <mg_http_serve_dir+0x54>
 80271d2:	f1b8 0f00 	cmp.w	r8, #0
 80271d6:	d013      	beq.n	8027200 <mg_http_serve_dir+0x54>
 80271d8:	ac22      	add	r4, sp, #136	@ 0x88
 80271da:	a902      	add	r1, sp, #8
 80271dc:	4620      	mov	r0, r4
 80271de:	f7fd fc17 	bl	8024a10 <mg_str_s>
 80271e2:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 80271e6:	4641      	mov	r1, r8
 80271e8:	4648      	mov	r0, r9
 80271ea:	f7fd fc11 	bl	8024a10 <mg_str_s>
 80271ee:	2300      	movs	r3, #0
 80271f0:	9300      	str	r3, [sp, #0]
 80271f2:	e899 000c 	ldmia.w	r9, {r2, r3}
 80271f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80271fa:	f7fd fe2b 	bl	8024e54 <mg_match>
 80271fe:	b978      	cbnz	r0, 8027220 <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 8027200:	462b      	mov	r3, r5
 8027202:	aa02      	add	r2, sp, #8
 8027204:	4631      	mov	r1, r6
 8027206:	4638      	mov	r0, r7
 8027208:	f7fd ffe0 	bl	80251cc <mg_http_serve_file>
}
 802720c:	b027      	add	sp, #156	@ 0x9c
 802720e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 8027212:	ab02      	add	r3, sp, #8
 8027214:	462a      	mov	r2, r5
 8027216:	4631      	mov	r1, r6
 8027218:	4638      	mov	r0, r7
 802721a:	f7fe fbb3 	bl	8025984 <listdir>
 802721e:	e7f5      	b.n	802720c <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8027220:	aa02      	add	r2, sp, #8
 8027222:	6829      	ldr	r1, [r5, #0]
 8027224:	4638      	mov	r0, r7
 8027226:	f7fd fbe9 	bl	80249fc <mg_http_serve_ssi>
 802722a:	e7ef      	b.n	802720c <mg_http_serve_dir+0x60>

0802722c <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 802722c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802722e:	b0c3      	sub	sp, #268	@ 0x10c
 8027230:	4605      	mov	r5, r0
 8027232:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8027234:	688b      	ldr	r3, [r1, #8]
 8027236:	695e      	ldr	r6, [r3, #20]
 8027238:	b1b6      	cbz	r6, 8027268 <printdirentry+0x3c>
  size_t size = 0;
 802723a:	2300      	movs	r3, #0
 802723c:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 802723e:	2200      	movs	r2, #0
 8027240:	2300      	movs	r3, #0
 8027242:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8027246:	9501      	str	r5, [sp, #4]
 8027248:	232f      	movs	r3, #47	@ 0x2f
 802724a:	9300      	str	r3, [sp, #0]
 802724c:	68e3      	ldr	r3, [r4, #12]
 802724e:	4a3c      	ldr	r2, [pc, #240]	@ (8027340 <printdirentry+0x114>)
 8027250:	2180      	movs	r1, #128	@ 0x80
 8027252:	a81e      	add	r0, sp, #120	@ 0x78
 8027254:	f7fc fd54 	bl	8023d00 <mg_snprintf>
 8027258:	2880      	cmp	r0, #128	@ 0x80
 802725a:	d913      	bls.n	8027284 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 802725c:	4b39      	ldr	r3, [pc, #228]	@ (8027344 <printdirentry+0x118>)
 802725e:	681b      	ldr	r3, [r3, #0]
 8027260:	2b00      	cmp	r3, #0
 8027262:	dc03      	bgt.n	802726c <printdirentry+0x40>
}
 8027264:	b043      	add	sp, #268	@ 0x10c
 8027266:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8027268:	4e37      	ldr	r6, [pc, #220]	@ (8027348 <printdirentry+0x11c>)
 802726a:	e7e6      	b.n	802723a <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 802726c:	4b37      	ldr	r3, [pc, #220]	@ (802734c <printdirentry+0x120>)
 802726e:	f640 3248 	movw	r2, #2888	@ 0xb48
 8027272:	4937      	ldr	r1, [pc, #220]	@ (8027350 <printdirentry+0x124>)
 8027274:	2001      	movs	r0, #1
 8027276:	f7ff fb3f 	bl	80268f8 <mg_log_prefix>
 802727a:	4629      	mov	r1, r5
 802727c:	4835      	ldr	r0, [pc, #212]	@ (8027354 <printdirentry+0x128>)
 802727e:	f7fd f9e9 	bl	8024654 <mg_log>
 8027282:	e7ef      	b.n	8027264 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8027284:	6833      	ldr	r3, [r6, #0]
 8027286:	aa3e      	add	r2, sp, #248	@ 0xf8
 8027288:	a941      	add	r1, sp, #260	@ 0x104
 802728a:	a81e      	add	r0, sp, #120	@ 0x78
 802728c:	4798      	blx	r3
 802728e:	b9a8      	cbnz	r0, 80272bc <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8027290:	4b2c      	ldr	r3, [pc, #176]	@ (8027344 <printdirentry+0x118>)
 8027292:	681b      	ldr	r3, [r3, #0]
 8027294:	2b00      	cmp	r3, #0
 8027296:	dde5      	ble.n	8027264 <printdirentry+0x38>
 8027298:	4b2c      	ldr	r3, [pc, #176]	@ (802734c <printdirentry+0x120>)
 802729a:	f640 324a 	movw	r2, #2890	@ 0xb4a
 802729e:	492c      	ldr	r1, [pc, #176]	@ (8027350 <printdirentry+0x124>)
 80272a0:	2001      	movs	r0, #1
 80272a2:	f7ff fb29 	bl	80268f8 <mg_log_prefix>
 80272a6:	6823      	ldr	r3, [r4, #0]
 80272a8:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80272aa:	f007 f925 	bl	802e4f8 <__errno>
 80272ae:	6803      	ldr	r3, [r0, #0]
 80272b0:	aa1e      	add	r2, sp, #120	@ 0x78
 80272b2:	4621      	mov	r1, r4
 80272b4:	4828      	ldr	r0, [pc, #160]	@ (8027358 <printdirentry+0x12c>)
 80272b6:	f7fd f9cd 	bl	8024654 <mg_log>
 80272ba:	e7d3      	b.n	8027264 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 80272bc:	f010 0604 	ands.w	r6, r0, #4
 80272c0:	d02d      	beq.n	802731e <printdirentry+0xf2>
 80272c2:	4f26      	ldr	r7, [pc, #152]	@ (802735c <printdirentry+0x130>)
    if (flags & MG_FS_DIR) {
 80272c4:	2e00      	cmp	r6, #0
 80272c6:	d02c      	beq.n	8027322 <printdirentry+0xf6>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 80272c8:	4b25      	ldr	r3, [pc, #148]	@ (8027360 <printdirentry+0x134>)
 80272ca:	4a26      	ldr	r2, [pc, #152]	@ (8027364 <printdirentry+0x138>)
 80272cc:	2128      	movs	r1, #40	@ 0x28
 80272ce:	a814      	add	r0, sp, #80	@ 0x50
 80272d0:	f7fc fd16 	bl	8023d00 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 80272d4:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 80272d6:	4a24      	ldr	r2, [pc, #144]	@ (8027368 <printdirentry+0x13c>)
 80272d8:	2128      	movs	r1, #40	@ 0x28
 80272da:	eb0d 0001 	add.w	r0, sp, r1
 80272de:	f7fc fd0f 	bl	8023d00 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 80272e2:	4628      	mov	r0, r5
 80272e4:	f7e8 ffdc 	bl	80102a0 <strlen>
 80272e8:	4601      	mov	r1, r0
 80272ea:	2380      	movs	r3, #128	@ 0x80
 80272ec:	aa1e      	add	r2, sp, #120	@ 0x78
 80272ee:	4628      	mov	r0, r5
 80272f0:	f7fd fa58 	bl	80247a4 <mg_url_encode>
 80272f4:	4602      	mov	r2, r0
    mg_printf(d->c,
 80272f6:	6820      	ldr	r0, [r4, #0]
 80272f8:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 80272fa:	b9e6      	cbnz	r6, 8027336 <printdirentry+0x10a>
 80272fc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80272fe:	2400      	movs	r4, #0
 8027300:	ae14      	add	r6, sp, #80	@ 0x50
 8027302:	9608      	str	r6, [sp, #32]
 8027304:	9306      	str	r3, [sp, #24]
 8027306:	9407      	str	r4, [sp, #28]
 8027308:	ab0a      	add	r3, sp, #40	@ 0x28
 802730a:	9304      	str	r3, [sp, #16]
 802730c:	9103      	str	r1, [sp, #12]
 802730e:	9702      	str	r7, [sp, #8]
 8027310:	9501      	str	r5, [sp, #4]
 8027312:	9700      	str	r7, [sp, #0]
 8027314:	ab1e      	add	r3, sp, #120	@ 0x78
 8027316:	4915      	ldr	r1, [pc, #84]	@ (802736c <printdirentry+0x140>)
 8027318:	f7fd f9ca 	bl	80246b0 <mg_printf>
}
 802731c:	e7a2      	b.n	8027264 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 802731e:	4f14      	ldr	r7, [pc, #80]	@ (8027370 <printdirentry+0x144>)
 8027320:	e7d0      	b.n	80272c4 <printdirentry+0x98>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8027322:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027324:	9300      	str	r3, [sp, #0]
 8027326:	2300      	movs	r3, #0
 8027328:	9301      	str	r3, [sp, #4]
 802732a:	4a12      	ldr	r2, [pc, #72]	@ (8027374 <printdirentry+0x148>)
 802732c:	2128      	movs	r1, #40	@ 0x28
 802732e:	a814      	add	r0, sp, #80	@ 0x50
 8027330:	f7fc fce6 	bl	8023d00 <mg_snprintf>
 8027334:	e7ce      	b.n	80272d4 <printdirentry+0xa8>
    mg_printf(d->c,
 8027336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802733a:	461c      	mov	r4, r3
 802733c:	e7e0      	b.n	8027300 <printdirentry+0xd4>
 802733e:	bf00      	nop
 8027340:	0803b710 	.word	0x0803b710
 8027344:	2000012c 	.word	0x2000012c
 8027348:	20000130 	.word	0x20000130
 802734c:	0803bf90 	.word	0x0803bf90
 8027350:	0803b564 	.word	0x0803b564
 8027354:	0803b718 	.word	0x0803b718
 8027358:	0803b728 	.word	0x0803b728
 802735c:	0803ad60 	.word	0x0803ad60
 8027360:	0803b73c 	.word	0x0803b73c
 8027364:	0803b87c 	.word	0x0803b87c
 8027368:	080369f0 	.word	0x080369f0
 802736c:	0803b74c 	.word	0x0803b74c
 8027370:	08037490 	.word	0x08037490
 8027374:	0803b744 	.word	0x0803b744

08027378 <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8027378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802737c:	b0ca      	sub	sp, #296	@ 0x128
 802737e:	4607      	mov	r7, r0
 8027380:	460d      	mov	r5, r1
 8027382:	4616      	mov	r6, r2
 8027384:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8027386:	2330      	movs	r3, #48	@ 0x30
 8027388:	9343      	str	r3, [sp, #268]	@ 0x10c
 802738a:	2400      	movs	r4, #0
 802738c:	9444      	str	r4, [sp, #272]	@ 0x110
 802738e:	9445      	str	r4, [sp, #276]	@ 0x114
 8027390:	9446      	str	r4, [sp, #280]	@ 0x118
 8027392:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8027394:	f101 0a10 	add.w	sl, r1, #16
 8027398:	2314      	movs	r3, #20
 802739a:	aa43      	add	r2, sp, #268	@ 0x10c
 802739c:	4964      	ldr	r1, [pc, #400]	@ (8027530 <mg_http_upload+0x1b8>)
 802739e:	4650      	mov	r0, sl
 80273a0:	f7fe fa23 	bl	80257ea <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80273a4:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 80273a8:	2380      	movs	r3, #128	@ 0x80
 80273aa:	464a      	mov	r2, r9
 80273ac:	4961      	ldr	r1, [pc, #388]	@ (8027534 <mg_http_upload+0x1bc>)
 80273ae:	4650      	mov	r0, sl
 80273b0:	f7fe fa1b 	bl	80257ea <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 80273b4:	4622      	mov	r2, r4
 80273b6:	4621      	mov	r1, r4
 80273b8:	a843      	add	r0, sp, #268	@ 0x10c
 80273ba:	f005 fa1f 	bl	802c7fc <strtol>
 80273be:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 80273c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80273c4:	232f      	movs	r3, #47	@ 0x2f
 80273c6:	9300      	str	r3, [sp, #0]
 80273c8:	4643      	mov	r3, r8
 80273ca:	4a5b      	ldr	r2, [pc, #364]	@ (8027538 <mg_http_upload+0x1c0>)
 80273cc:	2180      	movs	r1, #128	@ 0x80
 80273ce:	a803      	add	r0, sp, #12
 80273d0:	f7fc fc96 	bl	8023d00 <mg_snprintf>
  if (hm->body.len == 0) {
 80273d4:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 80273d8:	f1b8 0f00 	cmp.w	r8, #0
 80273dc:	d047      	beq.n	802746e <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 80273de:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 80273e2:	2b00      	cmp	r3, #0
 80273e4:	d04c      	beq.n	8027480 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 80273e6:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 80273ea:	a923      	add	r1, sp, #140	@ 0x8c
 80273ec:	4648      	mov	r0, r9
 80273ee:	f7fd fb0f 	bl	8024a10 <mg_str_s>
 80273f2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80273f6:	f7ff fa54 	bl	80268a2 <mg_path_is_sane>
 80273fa:	2800      	cmp	r0, #0
 80273fc:	d04a      	beq.n	8027494 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 80273fe:	2c00      	cmp	r4, #0
 8027400:	db54      	blt.n	80274ac <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8027402:	44a0      	add	r8, r4
 8027404:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 8027406:	4598      	cmp	r8, r3
 8027408:	d85a      	bhi.n	80274c0 <mg_http_upload+0x148>
    size_t current_size = 0;
 802740a:	2300      	movs	r3, #0
 802740c:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 802740e:	4b4b      	ldr	r3, [pc, #300]	@ (802753c <mg_http_upload+0x1c4>)
 8027410:	681b      	ldr	r3, [r3, #0]
 8027412:	2b02      	cmp	r3, #2
 8027414:	dc61      	bgt.n	80274da <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8027416:	b914      	cbnz	r4, 802741e <mg_http_upload+0xa6>
 8027418:	6a33      	ldr	r3, [r6, #32]
 802741a:	a803      	add	r0, sp, #12
 802741c:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 802741e:	6833      	ldr	r3, [r6, #0]
 8027420:	2200      	movs	r2, #0
 8027422:	a902      	add	r1, sp, #8
 8027424:	a803      	add	r0, sp, #12
 8027426:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8027428:	2c00      	cmp	r4, #0
 802742a:	dd02      	ble.n	8027432 <mg_http_upload+0xba>
 802742c:	9b02      	ldr	r3, [sp, #8]
 802742e:	429c      	cmp	r4, r3
 8027430:	d162      	bne.n	80274f8 <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8027432:	2202      	movs	r2, #2
 8027434:	a903      	add	r1, sp, #12
 8027436:	4630      	mov	r0, r6
 8027438:	f7fb fed2 	bl	80231e0 <mg_fs_open>
 802743c:	4680      	mov	r8, r0
 802743e:	2800      	cmp	r0, #0
 8027440:	d066      	beq.n	8027510 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8027442:	6973      	ldr	r3, [r6, #20]
 8027444:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8027448:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 802744c:	6800      	ldr	r0, [r0, #0]
 802744e:	4798      	blx	r3
 8027450:	4404      	add	r4, r0
      mg_fs_close(fd);
 8027452:	4640      	mov	r0, r8
 8027454:	f7fb fedd 	bl	8023212 <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 8027458:	9400      	str	r4, [sp, #0]
 802745a:	4b39      	ldr	r3, [pc, #228]	@ (8027540 <mg_http_upload+0x1c8>)
 802745c:	4a39      	ldr	r2, [pc, #228]	@ (8027544 <mg_http_upload+0x1cc>)
 802745e:	21c8      	movs	r1, #200	@ 0xc8
 8027460:	4638      	mov	r0, r7
 8027462:	f7fd f94b 	bl	80246fc <mg_http_reply>
}
 8027466:	4620      	mov	r0, r4
 8027468:	b04a      	add	sp, #296	@ 0x128
 802746a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 802746e:	2400      	movs	r4, #0
 8027470:	9400      	str	r4, [sp, #0]
 8027472:	4b33      	ldr	r3, [pc, #204]	@ (8027540 <mg_http_upload+0x1c8>)
 8027474:	4a33      	ldr	r2, [pc, #204]	@ (8027544 <mg_http_upload+0x1cc>)
 8027476:	21c8      	movs	r1, #200	@ 0xc8
 8027478:	4638      	mov	r0, r7
 802747a:	f7fd f93f 	bl	80246fc <mg_http_reply>
 802747e:	e7f2      	b.n	8027466 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 8027480:	4b31      	ldr	r3, [pc, #196]	@ (8027548 <mg_http_upload+0x1d0>)
 8027482:	4a32      	ldr	r2, [pc, #200]	@ (802754c <mg_http_upload+0x1d4>)
 8027484:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027488:	4638      	mov	r0, r7
 802748a:	f7fd f937 	bl	80246fc <mg_http_reply>
    res = -1;
 802748e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8027492:	e7e8      	b.n	8027466 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8027494:	ab23      	add	r3, sp, #140	@ 0x8c
 8027496:	9300      	str	r3, [sp, #0]
 8027498:	4b2d      	ldr	r3, [pc, #180]	@ (8027550 <mg_http_upload+0x1d8>)
 802749a:	4a2c      	ldr	r2, [pc, #176]	@ (802754c <mg_http_upload+0x1d4>)
 802749c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80274a0:	4638      	mov	r0, r7
 80274a2:	f7fd f92b 	bl	80246fc <mg_http_reply>
    res = -2;
 80274a6:	f06f 0401 	mvn.w	r4, #1
 80274aa:	e7dc      	b.n	8027466 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 80274ac:	4b29      	ldr	r3, [pc, #164]	@ (8027554 <mg_http_upload+0x1dc>)
 80274ae:	4a27      	ldr	r2, [pc, #156]	@ (802754c <mg_http_upload+0x1d4>)
 80274b0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80274b4:	4638      	mov	r0, r7
 80274b6:	f7fd f921 	bl	80246fc <mg_http_reply>
    res = -3;
 80274ba:	f06f 0402 	mvn.w	r4, #2
 80274be:	e7d2      	b.n	8027466 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 80274c0:	9301      	str	r3, [sp, #4]
 80274c2:	ab03      	add	r3, sp, #12
 80274c4:	9300      	str	r3, [sp, #0]
 80274c6:	4b24      	ldr	r3, [pc, #144]	@ (8027558 <mg_http_upload+0x1e0>)
 80274c8:	4a20      	ldr	r2, [pc, #128]	@ (802754c <mg_http_upload+0x1d4>)
 80274ca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80274ce:	4638      	mov	r0, r7
 80274d0:	f7fd f914 	bl	80246fc <mg_http_reply>
    res = -4;
 80274d4:	f06f 0403 	mvn.w	r4, #3
 80274d8:	e7c5      	b.n	8027466 <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 80274da:	4b20      	ldr	r3, [pc, #128]	@ (802755c <mg_http_upload+0x1e4>)
 80274dc:	f640 426a 	movw	r2, #3178	@ 0xc6a
 80274e0:	491f      	ldr	r1, [pc, #124]	@ (8027560 <mg_http_upload+0x1e8>)
 80274e2:	2003      	movs	r0, #3
 80274e4:	f7ff fa08 	bl	80268f8 <mg_log_prefix>
 80274e8:	4623      	mov	r3, r4
 80274ea:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80274ee:	a903      	add	r1, sp, #12
 80274f0:	481c      	ldr	r0, [pc, #112]	@ (8027564 <mg_http_upload+0x1ec>)
 80274f2:	f7fd f8af 	bl	8024654 <mg_log>
 80274f6:	e78e      	b.n	8027416 <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 80274f8:	ab03      	add	r3, sp, #12
 80274fa:	9300      	str	r3, [sp, #0]
 80274fc:	4b1a      	ldr	r3, [pc, #104]	@ (8027568 <mg_http_upload+0x1f0>)
 80274fe:	4a13      	ldr	r2, [pc, #76]	@ (802754c <mg_http_upload+0x1d4>)
 8027500:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027504:	4638      	mov	r0, r7
 8027506:	f7fd f8f9 	bl	80246fc <mg_http_reply>
      res = -5;
 802750a:	f06f 0404 	mvn.w	r4, #4
 802750e:	e7aa      	b.n	8027466 <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8027510:	f006 fff2 	bl	802e4f8 <__errno>
 8027514:	6803      	ldr	r3, [r0, #0]
 8027516:	9301      	str	r3, [sp, #4]
 8027518:	ab03      	add	r3, sp, #12
 802751a:	9300      	str	r3, [sp, #0]
 802751c:	4b13      	ldr	r3, [pc, #76]	@ (802756c <mg_http_upload+0x1f4>)
 802751e:	4a0b      	ldr	r2, [pc, #44]	@ (802754c <mg_http_upload+0x1d4>)
 8027520:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027524:	4638      	mov	r0, r7
 8027526:	f7fd f8e9 	bl	80246fc <mg_http_reply>
      res = -6;
 802752a:	f06f 0405 	mvn.w	r4, #5
 802752e:	e79a      	b.n	8027466 <mg_http_upload+0xee>
 8027530:	0803b7a4 	.word	0x0803b7a4
 8027534:	0803b7cc 	.word	0x0803b7cc
 8027538:	0803b710 	.word	0x0803b710
 802753c:	2000012c 	.word	0x2000012c
 8027540:	0803b7ac 	.word	0x0803b7ac
 8027544:	08036e14 	.word	0x08036e14
 8027548:	0803b7b0 	.word	0x0803b7b0
 802754c:	08037490 	.word	0x08037490
 8027550:	0803b7c0 	.word	0x0803b7c0
 8027554:	0803b7d4 	.word	0x0803b7d4
 8027558:	0803b7e4 	.word	0x0803b7e4
 802755c:	0803bf80 	.word	0x0803bf80
 8027560:	0803b564 	.word	0x0803b564
 8027564:	0803b800 	.word	0x0803b800
 8027568:	0803b818 	.word	0x0803b818
 802756c:	0803b82c 	.word	0x0803b82c

08027570 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8027570:	b570      	push	{r4, r5, r6, lr}
 8027572:	b082      	sub	sp, #8
 8027574:	4604      	mov	r4, r0
 8027576:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 8027578:	68e1      	ldr	r1, [r4, #12]
 802757a:	f7f9 fbd1 	bl	8020d20 <roundup>
  if (new_size == 0) {
 802757e:	b130      	cbz	r0, 802758e <mg_iobuf_resize+0x1e>
 8027580:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 8027582:	6863      	ldr	r3, [r4, #4]
 8027584:	4283      	cmp	r3, r0
 8027586:	d10f      	bne.n	80275a8 <mg_iobuf_resize+0x38>
  int ok = 1;
 8027588:	2001      	movs	r0, #1
}
 802758a:	b002      	add	sp, #8
 802758c:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 802758e:	6861      	ldr	r1, [r4, #4]
 8027590:	6820      	ldr	r0, [r4, #0]
 8027592:	f7fe fd6f 	bl	8026074 <mg_bzero>
    free(io->buf);
 8027596:	6820      	ldr	r0, [r4, #0]
 8027598:	f7f3 fde0 	bl	801b15c <vPortFree>
    io->buf = NULL;
 802759c:	2300      	movs	r3, #0
 802759e:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 80275a0:	6063      	str	r3, [r4, #4]
 80275a2:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 80275a4:	2001      	movs	r0, #1
 80275a6:	e7f0      	b.n	802758a <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 80275a8:	4601      	mov	r1, r0
 80275aa:	2001      	movs	r0, #1
 80275ac:	f7fb fc78 	bl	8022ea0 <mg_calloc>
    if (p != NULL) {
 80275b0:	4606      	mov	r6, r0
 80275b2:	b198      	cbz	r0, 80275dc <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 80275b4:	68a2      	ldr	r2, [r4, #8]
 80275b6:	42aa      	cmp	r2, r5
 80275b8:	bf28      	it	cs
 80275ba:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 80275bc:	b11a      	cbz	r2, 80275c6 <mg_iobuf_resize+0x56>
 80275be:	6821      	ldr	r1, [r4, #0]
 80275c0:	b109      	cbz	r1, 80275c6 <mg_iobuf_resize+0x56>
 80275c2:	f005 fd7b 	bl	802d0bc <memmove>
      mg_bzero(io->buf, io->size);
 80275c6:	6861      	ldr	r1, [r4, #4]
 80275c8:	6820      	ldr	r0, [r4, #0]
 80275ca:	f7fe fd53 	bl	8026074 <mg_bzero>
      free(io->buf);
 80275ce:	6820      	ldr	r0, [r4, #0]
 80275d0:	f7f3 fdc4 	bl	801b15c <vPortFree>
      io->buf = (unsigned char *) p;
 80275d4:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 80275d6:	6065      	str	r5, [r4, #4]
  int ok = 1;
 80275d8:	2001      	movs	r0, #1
 80275da:	e7d6      	b.n	802758a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 80275dc:	4b0b      	ldr	r3, [pc, #44]	@ (802760c <mg_iobuf_resize+0x9c>)
 80275de:	681b      	ldr	r3, [r3, #0]
 80275e0:	2b00      	cmp	r3, #0
 80275e2:	dc01      	bgt.n	80275e8 <mg_iobuf_resize+0x78>
      ok = 0;
 80275e4:	2000      	movs	r0, #0
  return ok;
 80275e6:	e7d0      	b.n	802758a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 80275e8:	4b09      	ldr	r3, [pc, #36]	@ (8027610 <mg_iobuf_resize+0xa0>)
 80275ea:	f640 5244 	movw	r2, #3396	@ 0xd44
 80275ee:	4909      	ldr	r1, [pc, #36]	@ (8027614 <mg_iobuf_resize+0xa4>)
 80275f0:	2001      	movs	r0, #1
 80275f2:	f7ff f981 	bl	80268f8 <mg_log_prefix>
 80275f6:	2600      	movs	r6, #0
 80275f8:	9500      	str	r5, [sp, #0]
 80275fa:	9601      	str	r6, [sp, #4]
 80275fc:	6862      	ldr	r2, [r4, #4]
 80275fe:	4633      	mov	r3, r6
 8027600:	4805      	ldr	r0, [pc, #20]	@ (8027618 <mg_iobuf_resize+0xa8>)
 8027602:	f7fd f827 	bl	8024654 <mg_log>
      ok = 0;
 8027606:	4630      	mov	r0, r6
 8027608:	e7bf      	b.n	802758a <mg_iobuf_resize+0x1a>
 802760a:	bf00      	nop
 802760c:	2000012c 	.word	0x2000012c
 8027610:	0803bf70 	.word	0x0803bf70
 8027614:	0803b564 	.word	0x0803b564
 8027618:	0803b83c 	.word	0x0803b83c

0802761c <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 802761c:	b538      	push	{r3, r4, r5, lr}
 802761e:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8027620:	2908      	cmp	r1, #8
 8027622:	d004      	beq.n	802762e <static_cb+0x12>
 8027624:	2902      	cmp	r1, #2
 8027626:	d002      	beq.n	802762e <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 8027628:	2909      	cmp	r1, #9
 802762a:	d02b      	beq.n	8027684 <static_cb+0x68>
}
 802762c:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 802762e:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8027632:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8027634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8027638:	d31d      	bcc.n	8027676 <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 802763a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 802763c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802763e:	4299      	cmp	r1, r3
 8027640:	d2f4      	bcs.n	802762c <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8027642:	1a5b      	subs	r3, r3, r1
 8027644:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8027648:	429a      	cmp	r2, r3
 802764a:	d300      	bcc.n	802764e <static_cb+0x32>
 802764c:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 802764e:	686b      	ldr	r3, [r5, #4]
 8027650:	691b      	ldr	r3, [r3, #16]
 8027652:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8027654:	4401      	add	r1, r0
 8027656:	6828      	ldr	r0, [r5, #0]
 8027658:	4798      	blx	r3
    c->send.len += n;
 802765a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802765c:	4403      	add	r3, r0
 802765e:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 8027660:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8027664:	1a1b      	subs	r3, r3, r0
 8027666:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 802766a:	2800      	cmp	r0, #0
 802766c:	d1de      	bne.n	802762c <static_cb+0x10>
 802766e:	4620      	mov	r0, r4
 8027670:	f7fb fddc 	bl	802322c <restore_http_cb>
 8027674:	e7da      	b.n	802762c <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8027676:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802767a:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 802767e:	f7ff ff77 	bl	8027570 <mg_iobuf_resize>
 8027682:	e7da      	b.n	802763a <static_cb+0x1e>
    restore_http_cb(c);
 8027684:	f7fb fdd2 	bl	802322c <restore_http_cb>
  (void) ev_data;
 8027688:	e7d0      	b.n	802762c <static_cb+0x10>

0802768a <mg_iobuf_add>:
                    size_t len) {
 802768a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802768e:	4604      	mov	r4, r0
 8027690:	460f      	mov	r7, r1
 8027692:	4690      	mov	r8, r2
 8027694:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 8027696:	6880      	ldr	r0, [r0, #8]
 8027698:	68e1      	ldr	r1, [r4, #12]
 802769a:	4418      	add	r0, r3
 802769c:	f7f9 fb40 	bl	8020d20 <roundup>
 80276a0:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 80276a2:	4601      	mov	r1, r0
 80276a4:	4620      	mov	r0, r4
 80276a6:	f7ff ff63 	bl	8027570 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 80276aa:	6863      	ldr	r3, [r4, #4]
 80276ac:	42b3      	cmp	r3, r6
 80276ae:	d000      	beq.n	80276b2 <mg_iobuf_add+0x28>
 80276b0:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 80276b2:	68a2      	ldr	r2, [r4, #8]
 80276b4:	42ba      	cmp	r2, r7
 80276b6:	d812      	bhi.n	80276de <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 80276b8:	f1b8 0f00 	cmp.w	r8, #0
 80276bc:	d005      	beq.n	80276ca <mg_iobuf_add+0x40>
 80276be:	6820      	ldr	r0, [r4, #0]
 80276c0:	462a      	mov	r2, r5
 80276c2:	4641      	mov	r1, r8
 80276c4:	4438      	add	r0, r7
 80276c6:	f005 fcf9 	bl	802d0bc <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 80276ca:	68a3      	ldr	r3, [r4, #8]
 80276cc:	42bb      	cmp	r3, r7
 80276ce:	d200      	bcs.n	80276d2 <mg_iobuf_add+0x48>
 80276d0:	60a7      	str	r7, [r4, #8]
  io->len += len;
 80276d2:	68a3      	ldr	r3, [r4, #8]
 80276d4:	442b      	add	r3, r5
 80276d6:	60a3      	str	r3, [r4, #8]
}
 80276d8:	4628      	mov	r0, r5
 80276da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 80276de:	6823      	ldr	r3, [r4, #0]
 80276e0:	19e8      	adds	r0, r5, r7
 80276e2:	1bd2      	subs	r2, r2, r7
 80276e4:	19d9      	adds	r1, r3, r7
 80276e6:	4418      	add	r0, r3
 80276e8:	f005 fce8 	bl	802d0bc <memmove>
 80276ec:	e7e4      	b.n	80276b8 <mg_iobuf_add+0x2e>

080276ee <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 80276ee:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 80276f0:	2100      	movs	r1, #0
 80276f2:	f7ff ff3d 	bl	8027570 <mg_iobuf_resize>
}
 80276f6:	bd08      	pop	{r3, pc}

080276f8 <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80276f8:	b538      	push	{r3, r4, r5, lr}
 80276fa:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 80276fc:	2201      	movs	r2, #1
 80276fe:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8027700:	f7fb fbf3 	bl	8022eea <getpeer>
  if (c == NULL) {
 8027704:	b368      	cbz	r0, 8027762 <rx_udp+0x6a>
 8027706:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 8027708:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802770a:	881b      	ldrh	r3, [r3, #0]
 802770c:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802770e:	69e3      	ldr	r3, [r4, #28]
 8027710:	68db      	ldr	r3, [r3, #12]
 8027712:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8027714:	6923      	ldr	r3, [r4, #16]
 8027716:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802771a:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 802771e:	895b      	ldrh	r3, [r3, #10]
 8027720:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8027724:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8027726:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 802772a:	d21b      	bcs.n	8027764 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802772c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802772e:	1ad2      	subs	r2, r2, r3
 8027730:	68e1      	ldr	r1, [r4, #12]
 8027732:	428a      	cmp	r2, r1
 8027734:	d204      	bcs.n	8027740 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8027736:	4419      	add	r1, r3
 8027738:	3038      	adds	r0, #56	@ 0x38
 802773a:	f7ff ff19 	bl	8027570 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802773e:	b1a8      	cbz	r0, 802776c <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8027740:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8027742:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8027744:	68e2      	ldr	r2, [r4, #12]
 8027746:	68a1      	ldr	r1, [r4, #8]
 8027748:	4418      	add	r0, r3
 802774a:	f006 ff0d 	bl	802e568 <memcpy>
      c->recv.len += pkt->pay.len;
 802774e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8027750:	4622      	mov	r2, r4
 8027752:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 8027756:	440b      	add	r3, r1
 8027758:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802775a:	2107      	movs	r1, #7
 802775c:	4628      	mov	r0, r5
 802775e:	f7fb fd30 	bl	80231c2 <mg_call>
}
 8027762:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 8027764:	4904      	ldr	r1, [pc, #16]	@ (8027778 <rx_udp+0x80>)
 8027766:	f7ff f9af 	bl	8026ac8 <mg_error>
 802776a:	e7fa      	b.n	8027762 <rx_udp+0x6a>
      mg_error(c, "oom");
 802776c:	4903      	ldr	r1, [pc, #12]	@ (802777c <rx_udp+0x84>)
 802776e:	4628      	mov	r0, r5
 8027770:	f7ff f9aa 	bl	8026ac8 <mg_error>
 8027774:	e7f5      	b.n	8027762 <rx_udp+0x6a>
 8027776:	bf00      	nop
 8027778:	0803b848 	.word	0x0803b848
 802777c:	0803b864 	.word	0x0803b864

08027780 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8027780:	b538      	push	{r3, r4, r5, lr}
 8027782:	4605      	mov	r5, r0
 8027784:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8027786:	b122      	cbz	r2, 8027792 <mg_pfn_iobuf_private+0x12>
 8027788:	6889      	ldr	r1, [r1, #8]
 802778a:	3102      	adds	r1, #2
 802778c:	6863      	ldr	r3, [r4, #4]
 802778e:	4299      	cmp	r1, r3
 8027790:	d80d      	bhi.n	80277ae <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 8027792:	68a3      	ldr	r3, [r4, #8]
 8027794:	1c99      	adds	r1, r3, #2
 8027796:	6862      	ldr	r2, [r4, #4]
 8027798:	4291      	cmp	r1, r2
 802779a:	d80c      	bhi.n	80277b6 <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 802779c:	6822      	ldr	r2, [r4, #0]
 802779e:	1c59      	adds	r1, r3, #1
 80277a0:	60a1      	str	r1, [r4, #8]
 80277a2:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 80277a4:	6822      	ldr	r2, [r4, #0]
 80277a6:	68a3      	ldr	r3, [r4, #8]
 80277a8:	2100      	movs	r1, #0
 80277aa:	54d1      	strb	r1, [r2, r3]
}
 80277ac:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 80277ae:	4620      	mov	r0, r4
 80277b0:	f7ff fede 	bl	8027570 <mg_iobuf_resize>
 80277b4:	e7ed      	b.n	8027792 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 80277b6:	4293      	cmp	r3, r2
 80277b8:	d2f8      	bcs.n	80277ac <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 80277ba:	6822      	ldr	r2, [r4, #0]
 80277bc:	1c59      	adds	r1, r3, #1
 80277be:	60a1      	str	r1, [r4, #8]
 80277c0:	2100      	movs	r1, #0
 80277c2:	54d1      	strb	r1, [r2, r3]
}
 80277c4:	e7f2      	b.n	80277ac <mg_pfn_iobuf_private+0x2c>

080277c6 <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 80277c6:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 80277c8:	2201      	movs	r2, #1
 80277ca:	f7ff ffd9 	bl	8027780 <mg_pfn_iobuf_private>
}
 80277ce:	bd08      	pop	{r3, pc}

080277d0 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 80277d0:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 80277d2:	2200      	movs	r2, #0
 80277d4:	f7ff ffd4 	bl	8027780 <mg_pfn_iobuf_private>
}
 80277d8:	bd08      	pop	{r3, pc}
	...

080277dc <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 80277dc:	b510      	push	{r4, lr}
 80277de:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 80277e0:	f7fb fc8e 	bl	8023100 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80277e4:	6862      	ldr	r2, [r4, #4]
 80277e6:	e000      	b.n	80277ea <mg_close_conn+0xe>
 80277e8:	461a      	mov	r2, r3
 80277ea:	6813      	ldr	r3, [r2, #0]
 80277ec:	42a3      	cmp	r3, r4
 80277ee:	d1fb      	bne.n	80277e8 <mg_close_conn+0xc>
 80277f0:	6823      	ldr	r3, [r4, #0]
 80277f2:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80277f4:	6863      	ldr	r3, [r4, #4]
 80277f6:	689a      	ldr	r2, [r3, #8]
 80277f8:	42a2      	cmp	r2, r4
 80277fa:	d020      	beq.n	802783e <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80277fc:	6863      	ldr	r3, [r4, #4]
 80277fe:	691a      	ldr	r2, [r3, #16]
 8027800:	42a2      	cmp	r2, r4
 8027802:	d01f      	beq.n	8027844 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 8027804:	2200      	movs	r2, #0
 8027806:	2109      	movs	r1, #9
 8027808:	4620      	mov	r0, r4
 802780a:	f7fb fcda 	bl	80231c2 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802780e:	4b15      	ldr	r3, [pc, #84]	@ (8027864 <mg_close_conn+0x88>)
 8027810:	681b      	ldr	r3, [r3, #0]
 8027812:	2b02      	cmp	r3, #2
 8027814:	dc19      	bgt.n	802784a <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 8027816:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 802781a:	f7ff ff68 	bl	80276ee <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 802781e:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8027822:	f7ff ff64 	bl	80276ee <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8027826:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802782a:	f7ff ff60 	bl	80276ee <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 802782e:	21b0      	movs	r1, #176	@ 0xb0
 8027830:	4620      	mov	r0, r4
 8027832:	f7fe fc1f 	bl	8026074 <mg_bzero>
  free(c);
 8027836:	4620      	mov	r0, r4
 8027838:	f7f3 fc90 	bl	801b15c <vPortFree>
}
 802783c:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 802783e:	2200      	movs	r2, #0
 8027840:	609a      	str	r2, [r3, #8]
 8027842:	e7db      	b.n	80277fc <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8027844:	2200      	movs	r2, #0
 8027846:	611a      	str	r2, [r3, #16]
 8027848:	e7dc      	b.n	8027804 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802784a:	4b07      	ldr	r3, [pc, #28]	@ (8027868 <mg_close_conn+0x8c>)
 802784c:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 8027850:	4906      	ldr	r1, [pc, #24]	@ (802786c <mg_close_conn+0x90>)
 8027852:	2003      	movs	r0, #3
 8027854:	f7ff f850 	bl	80268f8 <mg_log_prefix>
 8027858:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802785a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802785c:	4804      	ldr	r0, [pc, #16]	@ (8027870 <mg_close_conn+0x94>)
 802785e:	f7fc fef9 	bl	8024654 <mg_log>
 8027862:	e7d8      	b.n	8027816 <mg_close_conn+0x3a>
 8027864:	2000012c 	.word	0x2000012c
 8027868:	0803bf4c 	.word	0x0803bf4c
 802786c:	0803b564 	.word	0x0803b564
 8027870:	0803b868 	.word	0x0803b868

08027874 <close_conn>:
static void close_conn(struct mg_connection *c) {
 8027874:	b510      	push	{r4, lr}
 8027876:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8027878:	30d0      	adds	r0, #208	@ 0xd0
 802787a:	f7ff ff38 	bl	80276ee <mg_iobuf_free>
  mg_close_conn(c);
 802787e:	4620      	mov	r0, r4
 8027880:	f7ff ffac 	bl	80277dc <mg_close_conn>
}
 8027884:	bd10      	pop	{r4, pc}
	...

08027888 <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 8027888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802788c:	4606      	mov	r6, r0
 802788e:	460d      	mov	r5, r1
 8027890:	4690      	mov	r8, r2
 8027892:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8027894:	f7fc fa08 	bl	8023ca8 <mg_alloc_conn>
 8027898:	4604      	mov	r4, r0
 802789a:	2800      	cmp	r0, #0
 802789c:	d03f      	beq.n	802791e <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 802789e:	4629      	mov	r1, r5
 80278a0:	f7fe fe1f 	bl	80264e2 <mg_open_listener>
 80278a4:	2800      	cmp	r0, #0
 80278a6:	d04d      	beq.n	8027944 <mg_listen+0xbc>
    c->is_listening = 1;
 80278a8:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80278ac:	f043 0301 	orr.w	r3, r3, #1
 80278b0:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 80278b4:	2204      	movs	r2, #4
 80278b6:	492f      	ldr	r1, [pc, #188]	@ (8027974 <mg_listen+0xec>)
 80278b8:	4628      	mov	r0, r5
 80278ba:	f005 fc4e 	bl	802d15a <strncmp>
 80278be:	fab0 f080 	clz	r0, r0
 80278c2:	0940      	lsrs	r0, r0, #5
 80278c4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80278c8:	f360 0300 	bfi	r3, r0, #0, #1
 80278cc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80278d0:	6833      	ldr	r3, [r6, #0]
 80278d2:	6023      	str	r3, [r4, #0]
 80278d4:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 80278d6:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 80278da:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 80278dc:	2200      	movs	r2, #0
 80278de:	2101      	movs	r1, #1
 80278e0:	4620      	mov	r0, r4
 80278e2:	f7fb fc6e 	bl	80231c2 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 80278e6:	4628      	mov	r0, r5
 80278e8:	f7fe fb16 	bl	8025f18 <mg_url_is_ssl>
 80278ec:	b128      	cbz	r0, 80278fa <mg_listen+0x72>
 80278ee:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80278f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80278f6:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 80278fa:	4b1f      	ldr	r3, [pc, #124]	@ (8027978 <mg_listen+0xf0>)
 80278fc:	681b      	ldr	r3, [r3, #0]
 80278fe:	2b02      	cmp	r3, #2
 8027900:	dd11      	ble.n	8027926 <mg_listen+0x9e>
 8027902:	4b1e      	ldr	r3, [pc, #120]	@ (802797c <mg_listen+0xf4>)
 8027904:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 8027908:	491d      	ldr	r1, [pc, #116]	@ (8027980 <mg_listen+0xf8>)
 802790a:	2003      	movs	r0, #3
 802790c:	f7fe fff4 	bl	80268f8 <mg_log_prefix>
 8027910:	462b      	mov	r3, r5
 8027912:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8027914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027916:	481b      	ldr	r0, [pc, #108]	@ (8027984 <mg_listen+0xfc>)
 8027918:	f7fc fe9c 	bl	8024654 <mg_log>
  return c;
 802791c:	e003      	b.n	8027926 <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 802791e:	4b16      	ldr	r3, [pc, #88]	@ (8027978 <mg_listen+0xf0>)
 8027920:	681b      	ldr	r3, [r3, #0]
 8027922:	2b00      	cmp	r3, #0
 8027924:	dc02      	bgt.n	802792c <mg_listen+0xa4>
}
 8027926:	4620      	mov	r0, r4
 8027928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 802792c:	4b13      	ldr	r3, [pc, #76]	@ (802797c <mg_listen+0xf4>)
 802792e:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 8027932:	4913      	ldr	r1, [pc, #76]	@ (8027980 <mg_listen+0xf8>)
 8027934:	2001      	movs	r0, #1
 8027936:	f7fe ffdf 	bl	80268f8 <mg_log_prefix>
 802793a:	4629      	mov	r1, r5
 802793c:	4812      	ldr	r0, [pc, #72]	@ (8027988 <mg_listen+0x100>)
 802793e:	f7fc fe89 	bl	8024654 <mg_log>
 8027942:	e7f0      	b.n	8027926 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8027944:	4b0c      	ldr	r3, [pc, #48]	@ (8027978 <mg_listen+0xf0>)
 8027946:	681b      	ldr	r3, [r3, #0]
 8027948:	2b00      	cmp	r3, #0
 802794a:	dc04      	bgt.n	8027956 <mg_listen+0xce>
    free(c);
 802794c:	4620      	mov	r0, r4
 802794e:	f7f3 fc05 	bl	801b15c <vPortFree>
    c = NULL;
 8027952:	2400      	movs	r4, #0
 8027954:	e7e7      	b.n	8027926 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8027956:	4b09      	ldr	r3, [pc, #36]	@ (802797c <mg_listen+0xf4>)
 8027958:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 802795c:	4908      	ldr	r1, [pc, #32]	@ (8027980 <mg_listen+0xf8>)
 802795e:	2001      	movs	r0, #1
 8027960:	f7fe ffca 	bl	80268f8 <mg_log_prefix>
 8027964:	f006 fdc8 	bl	802e4f8 <__errno>
 8027968:	6802      	ldr	r2, [r0, #0]
 802796a:	4629      	mov	r1, r5
 802796c:	4807      	ldr	r0, [pc, #28]	@ (802798c <mg_listen+0x104>)
 802796e:	f7fc fe71 	bl	8024654 <mg_log>
 8027972:	e7eb      	b.n	802794c <mg_listen+0xc4>
 8027974:	0803b898 	.word	0x0803b898
 8027978:	2000012c 	.word	0x2000012c
 802797c:	0803bf34 	.word	0x0803bf34
 8027980:	0803b564 	.word	0x0803b564
 8027984:	0803b5c0 	.word	0x0803b5c0
 8027988:	0803b878 	.word	0x0803b878
 802798c:	0803b880 	.word	0x0803b880

08027990 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 8027990:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8027992:	f7ff ff79 	bl	8027888 <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 8027996:	b110      	cbz	r0, 802799e <mg_http_listen+0xe>
 8027998:	4b01      	ldr	r3, [pc, #4]	@ (80279a0 <mg_http_listen+0x10>)
 802799a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 802799e:	bd08      	pop	{r3, pc}
 80279a0:	08026b7d 	.word	0x08026b7d

080279a4 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 80279a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80279a8:	4605      	mov	r5, r0
 80279aa:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80279ac:	6843      	ldr	r3, [r0, #4]
 80279ae:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 80279b0:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 80279b4:	f013 0301 	ands.w	r3, r3, #1
 80279b8:	d02c      	beq.n	8027a14 <trim_len+0x70>
 80279ba:	2608      	movs	r6, #8
  size_t max_headers_len =
 80279bc:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 80279c0:	bb53      	cbnz	r3, 8027a18 <trim_len+0x74>
 80279c2:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 80279c4:	eb08 0304 	add.w	r3, r8, r4
 80279c8:	69ba      	ldr	r2, [r7, #24]
 80279ca:	4293      	cmp	r3, r2
 80279cc:	d901      	bls.n	80279d2 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 80279ce:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 80279d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80279d6:	42b3      	cmp	r3, r6
 80279d8:	d205      	bcs.n	80279e6 <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80279da:	4b1c      	ldr	r3, [pc, #112]	@ (8027a4c <trim_len+0xa8>)
 80279dc:	681b      	ldr	r3, [r3, #0]
 80279de:	2b00      	cmp	r3, #0
 80279e0:	dc1c      	bgt.n	8027a1c <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 80279e2:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 80279e6:	eb04 0308 	add.w	r3, r4, r8
 80279ea:	3b0e      	subs	r3, #14
 80279ec:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80279f0:	4293      	cmp	r3, r2
 80279f2:	d90c      	bls.n	8027a0e <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 80279f4:	eba2 0208 	sub.w	r2, r2, r8
 80279f8:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 80279fc:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027a00:	f013 0f01 	tst.w	r3, #1
 8027a04:	d003      	beq.n	8027a0e <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8027a06:	4b11      	ldr	r3, [pc, #68]	@ (8027a4c <trim_len+0xa8>)
 8027a08:	681b      	ldr	r3, [r3, #0]
 8027a0a:	2b00      	cmp	r3, #0
 8027a0c:	dc12      	bgt.n	8027a34 <trim_len+0x90>
}
 8027a0e:	4620      	mov	r0, r4
 8027a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8027a14:	263c      	movs	r6, #60	@ 0x3c
 8027a16:	e7d1      	b.n	80279bc <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8027a18:	2644      	movs	r6, #68	@ 0x44
 8027a1a:	e7d3      	b.n	80279c4 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 8027a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8027a50 <trim_len+0xac>)
 8027a1e:	f241 528c 	movw	r2, #5516	@ 0x158c
 8027a22:	490c      	ldr	r1, [pc, #48]	@ (8027a54 <trim_len+0xb0>)
 8027a24:	2001      	movs	r0, #1
 8027a26:	f7fe ff67 	bl	80268f8 <mg_log_prefix>
 8027a2a:	4631      	mov	r1, r6
 8027a2c:	480a      	ldr	r0, [pc, #40]	@ (8027a58 <trim_len+0xb4>)
 8027a2e:	f7fc fe11 	bl	8024654 <mg_log>
 8027a32:	e7d6      	b.n	80279e2 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8027a34:	4b06      	ldr	r3, [pc, #24]	@ (8027a50 <trim_len+0xac>)
 8027a36:	f241 5293 	movw	r2, #5523	@ 0x1593
 8027a3a:	4906      	ldr	r1, [pc, #24]	@ (8027a54 <trim_len+0xb0>)
 8027a3c:	2001      	movs	r0, #1
 8027a3e:	f7fe ff5b 	bl	80268f8 <mg_log_prefix>
 8027a42:	4806      	ldr	r0, [pc, #24]	@ (8027a5c <trim_len+0xb8>)
 8027a44:	f7fc fe06 	bl	8024654 <mg_log>
 8027a48:	e7e1      	b.n	8027a0e <trim_len+0x6a>
 8027a4a:	bf00      	nop
 8027a4c:	2000012c 	.word	0x2000012c
 8027a50:	0803bf28 	.word	0x0803bf28
 8027a54:	0803b564 	.word	0x0803b564
 8027a58:	0803b8a0 	.word	0x0803b8a0
 8027a5c:	0803b8cc 	.word	0x0803b8cc

08027a60 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8027a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027a62:	b085      	sub	sp, #20
 8027a64:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027a66:	6843      	ldr	r3, [r0, #4]
 8027a68:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8027a6a:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8027a6c:	68ab      	ldr	r3, [r5, #8]
 8027a6e:	b123      	cbz	r3, 8027a7a <mg_send+0x1a>
 8027a70:	460e      	mov	r6, r1
 8027a72:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8027a76:	2b03      	cmp	r3, #3
 8027a78:	d006      	beq.n	8027a88 <mg_send+0x28>
    mg_error(c, "net down");
 8027a7a:	4913      	ldr	r1, [pc, #76]	@ (8027ac8 <mg_send+0x68>)
 8027a7c:	4620      	mov	r0, r4
 8027a7e:	f7ff f823 	bl	8026ac8 <mg_error>
  bool res = false;
 8027a82:	2000      	movs	r0, #0
}
 8027a84:	b005      	add	sp, #20
 8027a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 8027a88:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8027a8c:	f013 0f01 	tst.w	r3, #1
 8027a90:	d010      	beq.n	8027ab4 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 8027a92:	4611      	mov	r1, r2
 8027a94:	f7ff ff86 	bl	80279a4 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8027a98:	68aa      	ldr	r2, [r5, #8]
 8027a9a:	9003      	str	r0, [sp, #12]
 8027a9c:	9602      	str	r6, [sp, #8]
 8027a9e:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027aa0:	9301      	str	r3, [sp, #4]
 8027aa2:	9700      	str	r7, [sp, #0]
 8027aa4:	8b23      	ldrh	r3, [r4, #24]
 8027aa6:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8027aaa:	4628      	mov	r0, r5
 8027aac:	f7fe fc97 	bl	80263de <tx_udp>
    res = true;
 8027ab0:	2001      	movs	r0, #1
 8027ab2:	e7e7      	b.n	8027a84 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8027ab4:	4613      	mov	r3, r2
 8027ab6:	460a      	mov	r2, r1
 8027ab8:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8027aba:	3048      	adds	r0, #72	@ 0x48
 8027abc:	f7ff fde5 	bl	802768a <mg_iobuf_add>
 8027ac0:	3800      	subs	r0, #0
 8027ac2:	bf18      	it	ne
 8027ac4:	2001      	movne	r0, #1
 8027ac6:	e7dd      	b.n	8027a84 <mg_send+0x24>
 8027ac8:	0803b8f8 	.word	0x0803b8f8

08027acc <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 8027acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027ace:	b0c5      	sub	sp, #276	@ 0x114
 8027ad0:	4606      	mov	r6, r0
 8027ad2:	460d      	mov	r5, r1
 8027ad4:	4614      	mov	r4, r2
 8027ad6:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 8027ad8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8027adc:	2100      	movs	r1, #0
 8027ade:	a801      	add	r0, sp, #4
 8027ae0:	f005 fb06 	bl	802d0f0 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8027ae4:	4620      	mov	r0, r4
 8027ae6:	f7fe fbc5 	bl	8026274 <mg_ntohs>
 8027aea:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 8027aee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8027af2:	f7fe fbbf 	bl	8026274 <mg_ntohs>
 8027af6:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 8027afa:	2001      	movs	r0, #1
 8027afc:	f7fe fbba 	bl	8026274 <mg_ntohs>
 8027b00:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8027b04:	f04f 0c00 	mov.w	ip, #0
 8027b08:	4664      	mov	r4, ip
 8027b0a:	e015      	b.n	8027b38 <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 8027b0c:	eba4 020c 	sub.w	r2, r4, ip
 8027b10:	ab01      	add	r3, sp, #4
 8027b12:	4463      	add	r3, ip
 8027b14:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8027b16:	f10c 0309 	add.w	r3, ip, #9
 8027b1a:	aa01      	add	r2, sp, #4
 8027b1c:	18d0      	adds	r0, r2, r3
 8027b1e:	6829      	ldr	r1, [r5, #0]
 8027b20:	eba4 020c 	sub.w	r2, r4, ip
 8027b24:	4461      	add	r1, ip
 8027b26:	3004      	adds	r0, #4
 8027b28:	f006 fd1e 	bl	802e568 <memcpy>
      n = i + 1;
 8027b2c:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 8027b30:	686a      	ldr	r2, [r5, #4]
 8027b32:	42a2      	cmp	r2, r4
 8027b34:	d90a      	bls.n	8027b4c <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8027b36:	3401      	adds	r4, #1
 8027b38:	2cfa      	cmp	r4, #250	@ 0xfa
 8027b3a:	d807      	bhi.n	8027b4c <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 8027b3c:	682b      	ldr	r3, [r5, #0]
 8027b3e:	5d1a      	ldrb	r2, [r3, r4]
 8027b40:	2a2e      	cmp	r2, #46	@ 0x2e
 8027b42:	d0e3      	beq.n	8027b0c <mg_dns_send+0x40>
 8027b44:	686b      	ldr	r3, [r5, #4]
 8027b46:	42a3      	cmp	r3, r4
 8027b48:	d8f2      	bhi.n	8027b30 <mg_dns_send+0x64>
 8027b4a:	e7df      	b.n	8027b0c <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8027b4c:	f10c 0308 	add.w	r3, ip, #8
 8027b50:	aa01      	add	r2, sp, #4
 8027b52:	4413      	add	r3, r2
 8027b54:	4a0a      	ldr	r2, [pc, #40]	@ (8027b80 <mg_dns_send+0xb4>)
 8027b56:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 8027b5a:	6058      	str	r0, [r3, #4]
 8027b5c:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 8027b60:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8027b62:	b12f      	cbz	r7, 8027b70 <mg_dns_send+0xa4>
 8027b64:	f10c 0302 	add.w	r3, ip, #2
 8027b68:	aa01      	add	r2, sp, #4
 8027b6a:	4413      	add	r3, r2
 8027b6c:	221c      	movs	r2, #28
 8027b6e:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8027b70:	f10c 0211 	add.w	r2, ip, #17
 8027b74:	a901      	add	r1, sp, #4
 8027b76:	4630      	mov	r0, r6
 8027b78:	f7ff ff72 	bl	8027a60 <mg_send>
}
 8027b7c:	b045      	add	sp, #276	@ 0x114
 8027b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027b80:	0803643c 	.word	0x0803643c

08027b84 <mg_mqtt_send_header>:
                         uint32_t len) {
 8027b84:	b500      	push	{lr}
 8027b86:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8027b88:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8027b8c:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8027b90:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 8027b94:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8027b98:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 8027b9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8027b9c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8027ba0:	d90e      	bls.n	8027bc0 <mg_mqtt_send_header+0x3c>
 8027ba2:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8027ba6:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8027baa:	f10d 0105 	add.w	r1, sp, #5
 8027bae:	428a      	cmp	r2, r1
 8027bb0:	d3f0      	bcc.n	8027b94 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 8027bb2:	4669      	mov	r1, sp
 8027bb4:	1a52      	subs	r2, r2, r1
 8027bb6:	f7ff ff53 	bl	8027a60 <mg_send>
}
 8027bba:	b003      	add	sp, #12
 8027bbc:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 8027bc0:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8027bc2:	e7f6      	b.n	8027bb2 <mg_mqtt_send_header+0x2e>

08027bc4 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8027bc4:	b500      	push	{lr}
 8027bc6:	b083      	sub	sp, #12
 8027bc8:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 8027bca:	2204      	movs	r2, #4
 8027bcc:	eb0d 0102 	add.w	r1, sp, r2
 8027bd0:	f7ff ff46 	bl	8027a60 <mg_send>
}
 8027bd4:	b003      	add	sp, #12
 8027bd6:	f85d fb04 	ldr.w	pc, [sp], #4

08027bda <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 8027bda:	b500      	push	{lr}
 8027bdc:	b083      	sub	sp, #12
 8027bde:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 8027be2:	2202      	movs	r2, #2
 8027be4:	f10d 0106 	add.w	r1, sp, #6
 8027be8:	f7ff ff3a 	bl	8027a60 <mg_send>
}
 8027bec:	b003      	add	sp, #12
 8027bee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08027bf4 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 8027bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027bf8:	b083      	sub	sp, #12
 8027bfa:	4606      	mov	r6, r0
 8027bfc:	460f      	mov	r7, r1
 8027bfe:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 8027c00:	4611      	mov	r1, r2
 8027c02:	4638      	mov	r0, r7
 8027c04:	f7f9 fdda 	bl	80217bc <get_properties_length>
 8027c08:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 8027c0a:	2500      	movs	r5, #0
 8027c0c:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 8027c0e:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 8027c10:	4668      	mov	r0, sp
 8027c12:	f7f9 fd84 	bl	802171e <encode_varint>
 8027c16:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 8027c18:	4669      	mov	r1, sp
 8027c1a:	4630      	mov	r0, r6
 8027c1c:	f7ff ff20 	bl	8027a60 <mg_send>
  for (i = 0; i < nprops; i++) {
 8027c20:	e018      	b.n	8027c54 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8027c22:	89a0      	ldrh	r0, [r4, #12]
 8027c24:	f7fe fb26 	bl	8026274 <mg_ntohs>
 8027c28:	4601      	mov	r1, r0
 8027c2a:	4630      	mov	r0, r6
 8027c2c:	f7ff ffd5 	bl	8027bda <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 8027c30:	68e2      	ldr	r2, [r4, #12]
 8027c32:	68a1      	ldr	r1, [r4, #8]
 8027c34:	4630      	mov	r0, r6
 8027c36:	f7ff ff13 	bl	8027a60 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8027c3a:	8aa0      	ldrh	r0, [r4, #20]
 8027c3c:	f7fe fb1a 	bl	8026274 <mg_ntohs>
 8027c40:	4601      	mov	r1, r0
 8027c42:	4630      	mov	r0, r6
 8027c44:	f7ff ffc9 	bl	8027bda <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8027c48:	6962      	ldr	r2, [r4, #20]
 8027c4a:	6921      	ldr	r1, [r4, #16]
 8027c4c:	4630      	mov	r0, r6
 8027c4e:	f7ff ff07 	bl	8027a60 <mg_send>
  for (i = 0; i < nprops; i++) {
 8027c52:	3501      	adds	r5, #1
 8027c54:	454d      	cmp	r5, r9
 8027c56:	d25b      	bcs.n	8027d10 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8027c58:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8027c5c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8027c60:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8027c64:	2201      	movs	r2, #1
 8027c66:	4621      	mov	r1, r4
 8027c68:	4630      	mov	r0, r6
 8027c6a:	f7ff fef9 	bl	8027a60 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8027c6e:	f817 0008 	ldrb.w	r0, [r7, r8]
 8027c72:	f7f9 fd8f 	bl	8021794 <mqtt_prop_type_by_id>
 8027c76:	2806      	cmp	r0, #6
 8027c78:	d8eb      	bhi.n	8027c52 <mg_send_mqtt_properties+0x5e>
 8027c7a:	a301      	add	r3, pc, #4	@ (adr r3, 8027c80 <mg_send_mqtt_properties+0x8c>)
 8027c7c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8027c80:	08027c9d 	.word	0x08027c9d
 8027c84:	08027cc9 	.word	0x08027cc9
 8027c88:	08027c23 	.word	0x08027c23
 8027c8c:	08027ce3 	.word	0x08027ce3
 8027c90:	08027cfd 	.word	0x08027cfd
 8027c94:	08027cb9 	.word	0x08027cb9
 8027c98:	08027ca9 	.word	0x08027ca9
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 8027c9c:	2201      	movs	r2, #1
 8027c9e:	1d21      	adds	r1, r4, #4
 8027ca0:	4630      	mov	r0, r6
 8027ca2:	f7ff fedd 	bl	8027a60 <mg_send>
        break;
 8027ca6:	e7d4      	b.n	8027c52 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8027ca8:	88a0      	ldrh	r0, [r4, #4]
 8027caa:	f7fe fae3 	bl	8026274 <mg_ntohs>
 8027cae:	4601      	mov	r1, r0
 8027cb0:	4630      	mov	r0, r6
 8027cb2:	f7ff ff92 	bl	8027bda <mg_send_u16>
        break;
 8027cb6:	e7cc      	b.n	8027c52 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 8027cb8:	6860      	ldr	r0, [r4, #4]
 8027cba:	f7fe fa43 	bl	8026144 <mg_ntohl>
 8027cbe:	4601      	mov	r1, r0
 8027cc0:	4630      	mov	r0, r6
 8027cc2:	f7ff ff7f 	bl	8027bc4 <mg_send_u32>
        break;
 8027cc6:	e7c4      	b.n	8027c52 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8027cc8:	8aa0      	ldrh	r0, [r4, #20]
 8027cca:	f7fe fad3 	bl	8026274 <mg_ntohs>
 8027cce:	4601      	mov	r1, r0
 8027cd0:	4630      	mov	r0, r6
 8027cd2:	f7ff ff82 	bl	8027bda <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8027cd6:	6962      	ldr	r2, [r4, #20]
 8027cd8:	6921      	ldr	r1, [r4, #16]
 8027cda:	4630      	mov	r0, r6
 8027cdc:	f7ff fec0 	bl	8027a60 <mg_send>
        break;
 8027ce0:	e7b7      	b.n	8027c52 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8027ce2:	8aa0      	ldrh	r0, [r4, #20]
 8027ce4:	f7fe fac6 	bl	8026274 <mg_ntohs>
 8027ce8:	4601      	mov	r1, r0
 8027cea:	4630      	mov	r0, r6
 8027cec:	f7ff ff75 	bl	8027bda <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8027cf0:	6962      	ldr	r2, [r4, #20]
 8027cf2:	6921      	ldr	r1, [r4, #16]
 8027cf4:	4630      	mov	r0, r6
 8027cf6:	f7ff feb3 	bl	8027a60 <mg_send>
        break;
 8027cfa:	e7aa      	b.n	8027c52 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 8027cfc:	6861      	ldr	r1, [r4, #4]
 8027cfe:	a801      	add	r0, sp, #4
 8027d00:	f7f9 fd0d 	bl	802171e <encode_varint>
 8027d04:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 8027d06:	a901      	add	r1, sp, #4
 8027d08:	4630      	mov	r0, r6
 8027d0a:	f7ff fea9 	bl	8027a60 <mg_send>
        break;
 8027d0e:	e7a0      	b.n	8027c52 <mg_send_mqtt_properties+0x5e>
}
 8027d10:	b003      	add	sp, #12
 8027d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027d16:	bf00      	nop

08027d18 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027d1a:	b08b      	sub	sp, #44	@ 0x2c
 8027d1c:	4605      	mov	r5, r0
 8027d1e:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 8027d20:	ab02      	add	r3, sp, #8
 8027d22:	f101 0210 	add.w	r2, r1, #16
 8027d26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8027d2a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 8027d2e:	2300      	movs	r3, #0
 8027d30:	f88d 3000 	strb.w	r3, [sp]
 8027d34:	2204      	movs	r2, #4
 8027d36:	f88d 2001 	strb.w	r2, [sp, #1]
 8027d3a:	224d      	movs	r2, #77	@ 0x4d
 8027d3c:	f88d 2002 	strb.w	r2, [sp, #2]
 8027d40:	2251      	movs	r2, #81	@ 0x51
 8027d42:	f88d 2003 	strb.w	r2, [sp, #3]
 8027d46:	2254      	movs	r2, #84	@ 0x54
 8027d48:	f88d 2004 	strb.w	r2, [sp, #4]
 8027d4c:	f88d 2005 	strb.w	r2, [sp, #5]
 8027d50:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8027d54:	f88d 2006 	strb.w	r2, [sp, #6]
 8027d58:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 8027d5c:	2900      	cmp	r1, #0
 8027d5e:	f000 809f 	beq.w	8027ea0 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8027d62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8027d66:	b913      	cbnz	r3, 8027d6e <mg_mqtt_login+0x56>
 8027d68:	2304      	movs	r3, #4
 8027d6a:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 8027d6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8027d72:	2b05      	cmp	r3, #5
 8027d74:	bf14      	ite	ne
 8027d76:	2300      	movne	r3, #0
 8027d78:	2301      	moveq	r3, #1
 8027d7a:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 8027d7e:	f363 0282 	bfi	r2, r3, #2, #1
 8027d82:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8027d86:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8027d8a:	00d2      	lsls	r2, r2, #3
 8027d8c:	f002 0218 	and.w	r2, r2, #24
 8027d90:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 8027d94:	6863      	ldr	r3, [r4, #4]
 8027d96:	2b00      	cmp	r3, #0
 8027d98:	f000 808e 	beq.w	8027eb8 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 8027d9c:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 8027d9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8027da2:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 8027da6:	68e2      	ldr	r2, [r4, #12]
 8027da8:	b13a      	cbz	r2, 8027dba <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 8027daa:	441a      	add	r2, r3
 8027dac:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 8027dae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027db2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8027db6:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 8027dba:	69e2      	ldr	r2, [r4, #28]
 8027dbc:	b14a      	cbz	r2, 8027dd2 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 8027dbe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8027dc0:	440a      	add	r2, r1
 8027dc2:	441a      	add	r2, r3
 8027dc4:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 8027dc6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027dca:	f042 0204 	orr.w	r2, r2, #4
 8027dce:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8027dd2:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 8027dd6:	b90a      	cbnz	r2, 8027ddc <mg_mqtt_login+0xc4>
 8027dd8:	9a03      	ldr	r2, [sp, #12]
 8027dda:	b92a      	cbnz	r2, 8027de8 <mg_mqtt_login+0xd0>
 8027ddc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027de0:	f042 0202 	orr.w	r2, r2, #2
 8027de4:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 8027de8:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 8027dec:	b12a      	cbz	r2, 8027dfa <mg_mqtt_login+0xe2>
 8027dee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027df2:	f042 0220 	orr.w	r2, r2, #32
 8027df6:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 8027dfa:	9f03      	ldr	r7, [sp, #12]
 8027dfc:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 8027dfe:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027e02:	f013 0f04 	tst.w	r3, #4
 8027e06:	d159      	bne.n	8027ebc <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8027e08:	4633      	mov	r3, r6
 8027e0a:	2200      	movs	r2, #0
 8027e0c:	2101      	movs	r1, #1
 8027e0e:	4628      	mov	r0, r5
 8027e10:	f7ff feb8 	bl	8027b84 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8027e14:	2208      	movs	r2, #8
 8027e16:	4669      	mov	r1, sp
 8027e18:	4628      	mov	r0, r5
 8027e1a:	f7ff fe21 	bl	8027a60 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 8027e1e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8027e20:	f7fe fa28 	bl	8026274 <mg_ntohs>
 8027e24:	4601      	mov	r1, r0
 8027e26:	4628      	mov	r0, r5
 8027e28:	f7ff fed7 	bl	8027bda <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027e2c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027e30:	f013 0f04 	tst.w	r3, #4
 8027e34:	d152      	bne.n	8027edc <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8027e36:	b2b8      	uxth	r0, r7
 8027e38:	f7fe fa1c 	bl	8026274 <mg_ntohs>
 8027e3c:	4601      	mov	r1, r0
 8027e3e:	4628      	mov	r0, r5
 8027e40:	f7ff fecb 	bl	8027bda <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8027e44:	463a      	mov	r2, r7
 8027e46:	9902      	ldr	r1, [sp, #8]
 8027e48:	4628      	mov	r0, r5
 8027e4a:	f7ff fe09 	bl	8027a60 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 8027e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8027e52:	f013 0f04 	tst.w	r3, #4
 8027e56:	d01c      	beq.n	8027e92 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 8027e58:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027e5c:	f013 0f04 	tst.w	r3, #4
 8027e60:	d142      	bne.n	8027ee8 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027e62:	8ba0      	ldrh	r0, [r4, #28]
 8027e64:	f7fe fa06 	bl	8026274 <mg_ntohs>
 8027e68:	4601      	mov	r1, r0
 8027e6a:	4628      	mov	r0, r5
 8027e6c:	f7ff feb5 	bl	8027bda <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8027e70:	69e2      	ldr	r2, [r4, #28]
 8027e72:	69a1      	ldr	r1, [r4, #24]
 8027e74:	4628      	mov	r0, r5
 8027e76:	f7ff fdf3 	bl	8027a60 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 8027e7a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8027e7c:	f7fe f9fa 	bl	8026274 <mg_ntohs>
 8027e80:	4601      	mov	r1, r0
 8027e82:	4628      	mov	r0, r5
 8027e84:	f7ff fea9 	bl	8027bda <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8027e88:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8027e8a:	6a21      	ldr	r1, [r4, #32]
 8027e8c:	4628      	mov	r0, r5
 8027e8e:	f7ff fde7 	bl	8027a60 <mg_send>
  if (opts->user.len > 0) {
 8027e92:	6860      	ldr	r0, [r4, #4]
 8027e94:	bb70      	cbnz	r0, 8027ef4 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 8027e96:	68e0      	ldr	r0, [r4, #12]
 8027e98:	2800      	cmp	r0, #0
 8027e9a:	d138      	bne.n	8027f0e <mg_mqtt_login+0x1f6>
}
 8027e9c:	b00b      	add	sp, #44	@ 0x2c
 8027e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 8027ea0:	2114      	movs	r1, #20
 8027ea2:	a804      	add	r0, sp, #16
 8027ea4:	f7fe f922 	bl	80260ec <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 8027ea8:	2300      	movs	r3, #0
 8027eaa:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 8027eae:	a904      	add	r1, sp, #16
 8027eb0:	a802      	add	r0, sp, #8
 8027eb2:	f7fc fdad 	bl	8024a10 <mg_str_s>
 8027eb6:	e754      	b.n	8027d62 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 8027eb8:	230c      	movs	r3, #12
 8027eba:	e774      	b.n	8027da6 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 8027ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027ebe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8027ec0:	f7f9 fcc0 	bl	8021844 <get_props_size>
 8027ec4:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 8027ec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8027eca:	f013 0f04 	tst.w	r3, #4
 8027ece:	d09b      	beq.n	8027e08 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 8027ed0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8027ed2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8027ed4:	f7f9 fcb6 	bl	8021844 <get_props_size>
 8027ed8:	4406      	add	r6, r0
 8027eda:	e795      	b.n	8027e08 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027edc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8027ede:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8027ee0:	4628      	mov	r0, r5
 8027ee2:	f7ff fe87 	bl	8027bf4 <mg_send_mqtt_properties>
 8027ee6:	e7a6      	b.n	8027e36 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8027ee8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8027eea:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8027eec:	4628      	mov	r0, r5
 8027eee:	f7ff fe81 	bl	8027bf4 <mg_send_mqtt_properties>
 8027ef2:	e7b6      	b.n	8027e62 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8027ef4:	b280      	uxth	r0, r0
 8027ef6:	f7fe f9bd 	bl	8026274 <mg_ntohs>
 8027efa:	4601      	mov	r1, r0
 8027efc:	4628      	mov	r0, r5
 8027efe:	f7ff fe6c 	bl	8027bda <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8027f02:	6862      	ldr	r2, [r4, #4]
 8027f04:	6821      	ldr	r1, [r4, #0]
 8027f06:	4628      	mov	r0, r5
 8027f08:	f7ff fdaa 	bl	8027a60 <mg_send>
 8027f0c:	e7c3      	b.n	8027e96 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 8027f0e:	b280      	uxth	r0, r0
 8027f10:	f7fe f9b0 	bl	8026274 <mg_ntohs>
 8027f14:	4601      	mov	r1, r0
 8027f16:	4628      	mov	r0, r5
 8027f18:	f7ff fe5f 	bl	8027bda <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 8027f1c:	68e2      	ldr	r2, [r4, #12]
 8027f1e:	68a1      	ldr	r1, [r4, #8]
 8027f20:	4628      	mov	r0, r5
 8027f22:	f7ff fd9d 	bl	8027a60 <mg_send>
}
 8027f26:	e7b9      	b.n	8027e9c <mg_mqtt_login+0x184>

08027f28 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027f28:	b530      	push	{r4, r5, lr}
 8027f2a:	b083      	sub	sp, #12
 8027f2c:	4604      	mov	r4, r0
 8027f2e:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 8027f30:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8027f34:	f003 0303 	and.w	r3, r3, #3
 8027f38:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8027f3c:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8027f40:	f013 0f04 	tst.w	r3, #4
 8027f44:	d133      	bne.n	8027fae <mg_mqtt_sub+0x86>
 8027f46:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8027f48:	69eb      	ldr	r3, [r5, #28]
 8027f4a:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 8027f4c:	3305      	adds	r3, #5
 8027f4e:	2202      	movs	r2, #2
 8027f50:	2108      	movs	r1, #8
 8027f52:	4620      	mov	r0, r4
 8027f54:	f7ff fe16 	bl	8027b84 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8027f58:	6862      	ldr	r2, [r4, #4]
 8027f5a:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027f5c:	3301      	adds	r3, #1
 8027f5e:	b29b      	uxth	r3, r3
 8027f60:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8027f62:	b91b      	cbnz	r3, 8027f6c <mg_mqtt_sub+0x44>
 8027f64:	6862      	ldr	r2, [r4, #4]
 8027f66:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027f68:	3301      	adds	r3, #1
 8027f6a:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 8027f6c:	6863      	ldr	r3, [r4, #4]
 8027f6e:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8027f70:	f7fe f980 	bl	8026274 <mg_ntohs>
 8027f74:	4601      	mov	r1, r0
 8027f76:	4620      	mov	r0, r4
 8027f78:	f7ff fe2f 	bl	8027bda <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027f7c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027f80:	f013 0f04 	tst.w	r3, #4
 8027f84:	d118      	bne.n	8027fb8 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027f86:	8ba8      	ldrh	r0, [r5, #28]
 8027f88:	f7fe f974 	bl	8026274 <mg_ntohs>
 8027f8c:	4601      	mov	r1, r0
 8027f8e:	4620      	mov	r0, r4
 8027f90:	f7ff fe23 	bl	8027bda <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8027f94:	69ea      	ldr	r2, [r5, #28]
 8027f96:	69a9      	ldr	r1, [r5, #24]
 8027f98:	4620      	mov	r0, r4
 8027f9a:	f7ff fd61 	bl	8027a60 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 8027f9e:	2201      	movs	r2, #1
 8027fa0:	f10d 0107 	add.w	r1, sp, #7
 8027fa4:	4620      	mov	r0, r4
 8027fa6:	f7ff fd5b 	bl	8027a60 <mg_send>
}
 8027faa:	b003      	add	sp, #12
 8027fac:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8027fae:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8027fb0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8027fb2:	f7f9 fc47 	bl	8021844 <get_props_size>
 8027fb6:	e7c7      	b.n	8027f48 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027fb8:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8027fba:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8027fbc:	4620      	mov	r0, r4
 8027fbe:	f7ff fe19 	bl	8027bf4 <mg_send_mqtt_properties>
 8027fc2:	e7e0      	b.n	8027f86 <mg_mqtt_sub+0x5e>

08027fc4 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fc8:	b083      	sub	sp, #12
 8027fca:	4605      	mov	r5, r0
 8027fcc:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 8027fce:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8027fd2:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8027fd6:	005b      	lsls	r3, r3, #1
 8027fd8:	f003 0306 	and.w	r3, r3, #6
 8027fdc:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 8027fe0:	2a00      	cmp	r2, #0
 8027fe2:	d057      	beq.n	8028094 <mg_mqtt_pub+0xd0>
 8027fe4:	2201      	movs	r2, #1
 8027fe6:	ea43 0a02 	orr.w	sl, r3, r2
 8027fea:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 8027fec:	69e7      	ldr	r7, [r4, #28]
 8027fee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8027ff0:	441f      	add	r7, r3
 8027ff2:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8027ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80280e0 <mg_mqtt_pub+0x11c>)
 8027ff8:	681b      	ldr	r3, [r3, #0]
 8027ffa:	2b02      	cmp	r3, #2
 8027ffc:	dc4c      	bgt.n	8028098 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 8027ffe:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 8028002:	f1bb 0f00 	cmp.w	fp, #0
 8028006:	d001      	beq.n	802800c <mg_mqtt_pub+0x48>
 8028008:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802800c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8028010:	f013 0f04 	tst.w	r3, #4
 8028014:	d152      	bne.n	80280bc <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8028016:	f1bb 0f00 	cmp.w	fp, #0
 802801a:	d004      	beq.n	8028026 <mg_mqtt_pub+0x62>
 802801c:	f1b8 0f00 	cmp.w	r8, #0
 8028020:	d001      	beq.n	8028026 <mg_mqtt_pub+0x62>
 8028022:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8028026:	464b      	mov	r3, r9
 8028028:	4632      	mov	r2, r6
 802802a:	2103      	movs	r1, #3
 802802c:	4628      	mov	r0, r5
 802802e:	f7ff fda9 	bl	8027b84 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8028032:	8ba0      	ldrh	r0, [r4, #28]
 8028034:	f7fe f91e 	bl	8026274 <mg_ntohs>
 8028038:	4601      	mov	r1, r0
 802803a:	4628      	mov	r0, r5
 802803c:	f7ff fdcd 	bl	8027bda <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8028040:	69e2      	ldr	r2, [r4, #28]
 8028042:	69a1      	ldr	r1, [r4, #24]
 8028044:	4628      	mov	r0, r5
 8028046:	f7ff fd0b 	bl	8027a60 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 802804a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 802804e:	b1b3      	cbz	r3, 802807e <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 8028050:	f1b8 0f00 	cmp.w	r8, #0
 8028054:	d10c      	bne.n	8028070 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8028056:	686a      	ldr	r2, [r5, #4]
 8028058:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 802805a:	3301      	adds	r3, #1
 802805c:	b29b      	uxth	r3, r3
 802805e:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8028060:	b91b      	cbnz	r3, 802806a <mg_mqtt_pub+0xa6>
 8028062:	686a      	ldr	r2, [r5, #4]
 8028064:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8028066:	3301      	adds	r3, #1
 8028068:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 802806a:	686b      	ldr	r3, [r5, #4]
 802806c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8028070:	4640      	mov	r0, r8
 8028072:	f7fe f8ff 	bl	8026274 <mg_ntohs>
 8028076:	4601      	mov	r1, r0
 8028078:	4628      	mov	r0, r5
 802807a:	f7ff fdae 	bl	8027bda <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802807e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8028082:	f013 0f04 	tst.w	r3, #4
 8028086:	d11f      	bne.n	80280c8 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8028088:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802808a:	bb1a      	cbnz	r2, 80280d4 <mg_mqtt_pub+0x110>
}
 802808c:	4640      	mov	r0, r8
 802808e:	b003      	add	sp, #12
 8028090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8028094:	2200      	movs	r2, #0
 8028096:	e7a6      	b.n	8027fe6 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8028098:	4b12      	ldr	r3, [pc, #72]	@ (80280e4 <mg_mqtt_pub+0x120>)
 802809a:	f241 123c 	movw	r2, #4412	@ 0x113c
 802809e:	4912      	ldr	r1, [pc, #72]	@ (80280e8 <mg_mqtt_pub+0x124>)
 80280a0:	2003      	movs	r0, #3
 80280a2:	f7fe fc29 	bl	80268f8 <mg_log_prefix>
 80280a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80280a8:	6a22      	ldr	r2, [r4, #32]
 80280aa:	9201      	str	r2, [sp, #4]
 80280ac:	9300      	str	r3, [sp, #0]
 80280ae:	69a3      	ldr	r3, [r4, #24]
 80280b0:	69e2      	ldr	r2, [r4, #28]
 80280b2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80280b4:	480d      	ldr	r0, [pc, #52]	@ (80280ec <mg_mqtt_pub+0x128>)
 80280b6:	f7fc facd 	bl	8024654 <mg_log>
 80280ba:	e7a0      	b.n	8027ffe <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 80280bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80280be:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80280c0:	f7f9 fbc0 	bl	8021844 <get_props_size>
 80280c4:	4481      	add	r9, r0
 80280c6:	e7a6      	b.n	8028016 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80280c8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80280ca:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80280cc:	4628      	mov	r0, r5
 80280ce:	f7ff fd91 	bl	8027bf4 <mg_send_mqtt_properties>
 80280d2:	e7d9      	b.n	8028088 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 80280d4:	6a21      	ldr	r1, [r4, #32]
 80280d6:	4628      	mov	r0, r5
 80280d8:	f7ff fcc2 	bl	8027a60 <mg_send>
 80280dc:	e7d6      	b.n	802808c <mg_mqtt_pub+0xc8>
 80280de:	bf00      	nop
 80280e0:	2000012c 	.word	0x2000012c
 80280e4:	0803bf64 	.word	0x0803bf64
 80280e8:	0803b564 	.word	0x0803b564
 80280ec:	0803b904 	.word	0x0803b904

080280f0 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 80280f0:	b530      	push	{r4, r5, lr}
 80280f2:	b08f      	sub	sp, #60	@ 0x3c
 80280f4:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 80280f6:	2907      	cmp	r1, #7
 80280f8:	f000 808f 	beq.w	802821a <mqtt_cb+0x12a>
}
 80280fc:	b00f      	add	sp, #60	@ 0x3c
 80280fe:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8028100:	2204      	movs	r2, #4
 8028102:	e091      	b.n	8028228 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8028104:	4b73      	ldr	r3, [pc, #460]	@ (80282d4 <mqtt_cb+0x1e4>)
 8028106:	681b      	ldr	r3, [r3, #0]
 8028108:	2b00      	cmp	r3, #0
 802810a:	dc06      	bgt.n	802811a <mqtt_cb+0x2a>
        c->is_closing = 1;
 802810c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028110:	f043 0320 	orr.w	r3, r3, #32
 8028114:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 8028118:	e7f0      	b.n	80280fc <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 802811a:	4b6f      	ldr	r3, [pc, #444]	@ (80282d8 <mqtt_cb+0x1e8>)
 802811c:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 8028120:	496e      	ldr	r1, [pc, #440]	@ (80282dc <mqtt_cb+0x1ec>)
 8028122:	2001      	movs	r0, #1
 8028124:	f7fe fbe8 	bl	80268f8 <mg_log_prefix>
 8028128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802812a:	486d      	ldr	r0, [pc, #436]	@ (80282e0 <mqtt_cb+0x1f0>)
 802812c:	f7fc fa92 	bl	8024654 <mg_log>
 8028130:	e7ec      	b.n	802810c <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8028132:	4b69      	ldr	r3, [pc, #420]	@ (80282d8 <mqtt_cb+0x1e8>)
 8028134:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 8028138:	4968      	ldr	r1, [pc, #416]	@ (80282dc <mqtt_cb+0x1ec>)
 802813a:	2004      	movs	r0, #4
 802813c:	f7fe fbdc 	bl	80268f8 <mg_log_prefix>
 8028140:	9b06      	ldr	r3, [sp, #24]
 8028142:	9301      	str	r3, [sp, #4]
 8028144:	9b07      	ldr	r3, [sp, #28]
 8028146:	9300      	str	r3, [sp, #0]
 8028148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802814a:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 802814e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028150:	4864      	ldr	r0, [pc, #400]	@ (80282e4 <mqtt_cb+0x1f4>)
 8028152:	f7fc fa7f 	bl	8024654 <mg_log>
 8028156:	e077      	b.n	8028248 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8028158:	aa0b      	add	r2, sp, #44	@ 0x2c
 802815a:	2111      	movs	r1, #17
 802815c:	4620      	mov	r0, r4
 802815e:	f7fb f830 	bl	80231c2 <mg_call>
            if (mm.ack == 0) {
 8028162:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8028166:	b97b      	cbnz	r3, 8028188 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 8028168:	4b5a      	ldr	r3, [pc, #360]	@ (80282d4 <mqtt_cb+0x1e4>)
 802816a:	681b      	ldr	r3, [r3, #0]
 802816c:	2b02      	cmp	r3, #2
 802816e:	dd49      	ble.n	8028204 <mqtt_cb+0x114>
 8028170:	4b59      	ldr	r3, [pc, #356]	@ (80282d8 <mqtt_cb+0x1e8>)
 8028172:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 8028176:	4959      	ldr	r1, [pc, #356]	@ (80282dc <mqtt_cb+0x1ec>)
 8028178:	2003      	movs	r0, #3
 802817a:	f7fe fbbd 	bl	80268f8 <mg_log_prefix>
 802817e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028180:	4859      	ldr	r0, [pc, #356]	@ (80282e8 <mqtt_cb+0x1f8>)
 8028182:	f7fc fa67 	bl	8024654 <mg_log>
 8028186:	e03d      	b.n	8028204 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8028188:	4b52      	ldr	r3, [pc, #328]	@ (80282d4 <mqtt_cb+0x1e4>)
 802818a:	681b      	ldr	r3, [r3, #0]
 802818c:	2b00      	cmp	r3, #0
 802818e:	dc06      	bgt.n	802819e <mqtt_cb+0xae>
              c->is_closing = 1;
 8028190:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028194:	f043 0320 	orr.w	r3, r3, #32
 8028198:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 802819c:	e032      	b.n	8028204 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 802819e:	4b4e      	ldr	r3, [pc, #312]	@ (80282d8 <mqtt_cb+0x1e8>)
 80281a0:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 80281a4:	494d      	ldr	r1, [pc, #308]	@ (80282dc <mqtt_cb+0x1ec>)
 80281a6:	2001      	movs	r0, #1
 80281a8:	f7fe fba6 	bl	80268f8 <mg_log_prefix>
 80281ac:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 80281b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80281b2:	484e      	ldr	r0, [pc, #312]	@ (80282ec <mqtt_cb+0x1fc>)
 80281b4:	f7fc fa4e 	bl	8024654 <mg_log>
 80281b8:	e7ea      	b.n	8028190 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 80281ba:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 80281be:	b1e5      	cbz	r5, 80281fa <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 80281c0:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 80281c4:	f7fe f856 	bl	8026274 <mg_ntohs>
 80281c8:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 80281cc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80281d0:	f013 0f04 	tst.w	r3, #4
 80281d4:	d14a      	bne.n	802826c <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 80281d6:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 80281d8:	2d02      	cmp	r5, #2
 80281da:	d049      	beq.n	8028270 <mqtt_cb+0x180>
 80281dc:	2104      	movs	r1, #4
 80281de:	2200      	movs	r2, #0
 80281e0:	4620      	mov	r0, r4
 80281e2:	f7ff fccf 	bl	8027b84 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 80281e6:	2202      	movs	r2, #2
 80281e8:	a903      	add	r1, sp, #12
 80281ea:	4620      	mov	r0, r4
 80281ec:	f7ff fc38 	bl	8027a60 <mg_send>
              if (c->is_mqtt5) {
 80281f0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80281f4:	f013 0f04 	tst.w	r3, #4
 80281f8:	d13c      	bne.n	8028274 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 80281fa:	aa04      	add	r2, sp, #16
 80281fc:	2110      	movs	r1, #16
 80281fe:	4620      	mov	r0, r4
 8028200:	f7fa ffdf 	bl	80231c2 <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8028204:	aa04      	add	r2, sp, #16
 8028206:	210f      	movs	r1, #15
 8028208:	4620      	mov	r0, r4
 802820a:	f7fa ffda 	bl	80231c2 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 802820e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028210:	2100      	movs	r1, #0
 8028212:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8028216:	f7fd ff38 	bl	802608a <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 802821a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802821e:	f013 0f04 	tst.w	r3, #4
 8028222:	f43f af6d 	beq.w	8028100 <mqtt_cb+0x10>
 8028226:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8028228:	ab04      	add	r3, sp, #16
 802822a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802822c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802822e:	f7fb fc8c 	bl	8023b4a <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 8028232:	2802      	cmp	r0, #2
 8028234:	f43f af66 	beq.w	8028104 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 8028238:	2800      	cmp	r0, #0
 802823a:	f47f af5f 	bne.w	80280fc <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 802823e:	4b25      	ldr	r3, [pc, #148]	@ (80282d4 <mqtt_cb+0x1e4>)
 8028240:	681b      	ldr	r3, [r3, #0]
 8028242:	2b03      	cmp	r3, #3
 8028244:	f73f af75 	bgt.w	8028132 <mqtt_cb+0x42>
        switch (mm.cmd) {
 8028248:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 802824c:	3b02      	subs	r3, #2
 802824e:	2b04      	cmp	r3, #4
 8028250:	d8d8      	bhi.n	8028204 <mqtt_cb+0x114>
 8028252:	a201      	add	r2, pc, #4	@ (adr r2, 8028258 <mqtt_cb+0x168>)
 8028254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028258:	08028159 	.word	0x08028159
 802825c:	080281bb 	.word	0x080281bb
 8028260:	08028205 	.word	0x08028205
 8028264:	08028289 	.word	0x08028289
 8028268:	080282af 	.word	0x080282af
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 802826c:	2304      	movs	r3, #4
 802826e:	e7b3      	b.n	80281d8 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 8028270:	2105      	movs	r1, #5
 8028272:	e7b4      	b.n	80281de <mqtt_cb+0xee>
                uint16_t zero = 0;
 8028274:	2300      	movs	r3, #0
 8028276:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 802827a:	2202      	movs	r2, #2
 802827c:	f10d 010e 	add.w	r1, sp, #14
 8028280:	4620      	mov	r0, r4
 8028282:	f7ff fbed 	bl	8027a60 <mg_send>
 8028286:	e7b8      	b.n	80281fa <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 8028288:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 802828c:	f7fd fff2 	bl	8026274 <mg_ntohs>
 8028290:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8028294:	2302      	movs	r3, #2
 8028296:	461a      	mov	r2, r3
 8028298:	2106      	movs	r1, #6
 802829a:	4620      	mov	r0, r4
 802829c:	f7ff fc72 	bl	8027b84 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 80282a0:	2202      	movs	r2, #2
 80282a2:	f10d 010e 	add.w	r1, sp, #14
 80282a6:	4620      	mov	r0, r4
 80282a8:	f7ff fbda 	bl	8027a60 <mg_send>
            break;
 80282ac:	e7aa      	b.n	8028204 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 80282ae:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 80282b2:	f7fd ffdf 	bl	8026274 <mg_ntohs>
 80282b6:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 80282ba:	2302      	movs	r3, #2
 80282bc:	2200      	movs	r2, #0
 80282be:	2107      	movs	r1, #7
 80282c0:	4620      	mov	r0, r4
 80282c2:	f7ff fc5f 	bl	8027b84 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 80282c6:	2202      	movs	r2, #2
 80282c8:	f10d 010e 	add.w	r1, sp, #14
 80282cc:	4620      	mov	r0, r4
 80282ce:	f7ff fbc7 	bl	8027a60 <mg_send>
            break;
 80282d2:	e797      	b.n	8028204 <mqtt_cb+0x114>
 80282d4:	2000012c 	.word	0x2000012c
 80282d8:	0803bf5c 	.word	0x0803bf5c
 80282dc:	0803b564 	.word	0x0803b564
 80282e0:	0803b91c 	.word	0x0803b91c
 80282e4:	0803b938 	.word	0x0803b938
 80282e8:	0803b958 	.word	0x0803b958
 80282ec:	0803b968 	.word	0x0803b968

080282f0 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 80282f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80282f4:	b088      	sub	sp, #32
 80282f6:	4605      	mov	r5, r0
 80282f8:	469a      	mov	sl, r3
 80282fa:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 80282fc:	f107 0614 	add.w	r6, r7, #20
 8028300:	9601      	str	r6, [sp, #4]
 8028302:	9200      	str	r2, [sp, #0]
 8028304:	6883      	ldr	r3, [r0, #8]
 8028306:	2206      	movs	r2, #6
 8028308:	f7fd ffd4 	bl	80262b4 <tx_ip>
 802830c:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 802830e:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 8028312:	2200      	movs	r2, #0
 8028314:	6142      	str	r2, [r0, #20]
 8028316:	6182      	str	r2, [r0, #24]
 8028318:	61c2      	str	r2, [r0, #28]
 802831a:	6202      	str	r2, [r0, #32]
 802831c:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 802831e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028320:	b10b      	cbz	r3, 8028326 <tx_tcp+0x36>
 8028322:	2f00      	cmp	r7, #0
 8028324:	d147      	bne.n	80283b6 <tx_tcp+0xc6>
  tcp->sport = sport;
 8028326:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 802832a:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 802832c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8028330:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 8028332:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8028334:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 8028336:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8028338:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 802833a:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 802833e:	f241 7070 	movw	r0, #6000	@ 0x1770
 8028342:	f7fd ff97 	bl	8026274 <mg_ntohs>
 8028346:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8028348:	2350      	movs	r3, #80	@ 0x50
 802834a:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 802834e:	b2bb      	uxth	r3, r7
 8028350:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8028352:	2000      	movs	r0, #0
 8028354:	f88d 001c 	strb.w	r0, [sp, #28]
 8028358:	7a62      	ldrb	r2, [r4, #9]
 802835a:	f88d 201d 	strb.w	r2, [sp, #29]
 802835e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8028362:	f88d 201e 	strb.w	r2, [sp, #30]
 8028366:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 802836a:	b2b2      	uxth	r2, r6
 802836c:	4649      	mov	r1, r9
 802836e:	f7f9 fac9 	bl	8021904 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8028372:	f104 060c 	add.w	r6, r4, #12
 8028376:	2204      	movs	r2, #4
 8028378:	4631      	mov	r1, r6
 802837a:	f7f9 fac3 	bl	8021904 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 802837e:	f104 0810 	add.w	r8, r4, #16
 8028382:	2204      	movs	r2, #4
 8028384:	4641      	mov	r1, r8
 8028386:	f7f9 fabd 	bl	8021904 <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 802838a:	2204      	movs	r2, #4
 802838c:	a907      	add	r1, sp, #28
 802838e:	f7f9 fab9 	bl	8021904 <csumup>
  tcp->csum = csumfin(cs);
 8028392:	f7fd ff7b 	bl	802628c <csumfin>
 8028396:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8028398:	4b18      	ldr	r3, [pc, #96]	@ (80283fc <tx_tcp+0x10c>)
 802839a:	681b      	ldr	r3, [r3, #0]
 802839c:	2b03      	cmp	r3, #3
 802839e:	dc10      	bgt.n	80283c2 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 80283a0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80283a4:	696b      	ldr	r3, [r5, #20]
 80283a6:	1ac9      	subs	r1, r1, r3
 80283a8:	4439      	add	r1, r7
 80283aa:	4628      	mov	r0, r5
 80283ac:	f7f9 fabb 	bl	8021926 <ether_output>
}
 80283b0:	b008      	add	sp, #32
 80283b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 80283b6:	463a      	mov	r2, r7
 80283b8:	4619      	mov	r1, r3
 80283ba:	3028      	adds	r0, #40	@ 0x28
 80283bc:	f004 fe7e 	bl	802d0bc <memmove>
 80283c0:	e7b1      	b.n	8028326 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 80283c2:	4b0f      	ldr	r3, [pc, #60]	@ (8028400 <tx_tcp+0x110>)
 80283c4:	f241 5254 	movw	r2, #5460	@ 0x1554
 80283c8:	490e      	ldr	r1, [pc, #56]	@ (8028404 <tx_tcp+0x114>)
 80283ca:	2004      	movs	r0, #4
 80283cc:	f7fe fa94 	bl	80268f8 <mg_log_prefix>
 80283d0:	8aa0      	ldrh	r0, [r4, #20]
 80283d2:	f7fd ff4f 	bl	8026274 <mg_ntohs>
 80283d6:	4681      	mov	r9, r0
 80283d8:	8ae0      	ldrh	r0, [r4, #22]
 80283da:	f7fd ff4b 	bl	8026274 <mg_ntohs>
 80283de:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80283e2:	4909      	ldr	r1, [pc, #36]	@ (8028408 <tx_tcp+0x118>)
 80283e4:	9704      	str	r7, [sp, #16]
 80283e6:	9303      	str	r3, [sp, #12]
 80283e8:	9002      	str	r0, [sp, #8]
 80283ea:	f8cd 8004 	str.w	r8, [sp, #4]
 80283ee:	9100      	str	r1, [sp, #0]
 80283f0:	464b      	mov	r3, r9
 80283f2:	4632      	mov	r2, r6
 80283f4:	4805      	ldr	r0, [pc, #20]	@ (802840c <tx_tcp+0x11c>)
 80283f6:	f7fc f92d 	bl	8024654 <mg_log>
 80283fa:	e7d1      	b.n	80283a0 <tx_tcp+0xb0>
 80283fc:	2000012c 	.word	0x2000012c
 8028400:	0803bf20 	.word	0x0803bf20
 8028404:	0803b564 	.word	0x0803b564
 8028408:	08024615 	.word	0x08024615
 802840c:	0803b988 	.word	0x0803b988

08028410 <send_syn>:
static void send_syn(struct mg_connection *c) {
 8028410:	b530      	push	{r4, r5, lr}
 8028412:	b087      	sub	sp, #28
 8028414:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8028416:	8b05      	ldrh	r5, [r0, #24]
 8028418:	4628      	mov	r0, r5
 802841a:	f7fd ff2b 	bl	8026274 <mg_ntohs>
 802841e:	f7fd fe91 	bl	8026144 <mg_ntohl>
 8028422:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8028424:	6863      	ldr	r3, [r4, #4]
 8028426:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8028428:	2300      	movs	r3, #0
 802842a:	9305      	str	r3, [sp, #20]
 802842c:	9304      	str	r3, [sp, #16]
 802842e:	9303      	str	r3, [sp, #12]
 8028430:	9202      	str	r2, [sp, #8]
 8028432:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8028434:	9301      	str	r3, [sp, #4]
 8028436:	9500      	str	r5, [sp, #0]
 8028438:	2302      	movs	r3, #2
 802843a:	69e2      	ldr	r2, [r4, #28]
 802843c:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8028440:	f7ff ff56 	bl	80282f0 <tx_tcp>
}
 8028444:	b007      	add	sp, #28
 8028446:	bd30      	pop	{r4, r5, pc}

08028448 <tx_tcp_pkt>:
                         size_t len) {
 8028448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802844c:	b087      	sub	sp, #28
 802844e:	4605      	mov	r5, r0
 8028450:	4617      	mov	r7, r2
 8028452:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8028454:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8028456:	7b5c      	ldrb	r4, [r3, #13]
 8028458:	f014 0403 	ands.w	r4, r4, #3
 802845c:	bf18      	it	ne
 802845e:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8028460:	690e      	ldr	r6, [r1, #16]
 8028462:	3606      	adds	r6, #6
 8028464:	69ca      	ldr	r2, [r1, #28]
 8028466:	f8d2 900c 	ldr.w	r9, [r2, #12]
 802846a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 802846e:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8028472:	6858      	ldr	r0, [r3, #4]
 8028474:	f7fd fe66 	bl	8026144 <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8028478:	4420      	add	r0, r4
 802847a:	f7fd fe63 	bl	8026144 <mg_ntohl>
 802847e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028480:	9305      	str	r3, [sp, #20]
 8028482:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028484:	9304      	str	r3, [sp, #16]
 8028486:	9003      	str	r0, [sp, #12]
 8028488:	f8cd 8008 	str.w	r8, [sp, #8]
 802848c:	f8cd b004 	str.w	fp, [sp, #4]
 8028490:	f8cd a000 	str.w	sl, [sp]
 8028494:	463b      	mov	r3, r7
 8028496:	464a      	mov	r2, r9
 8028498:	4631      	mov	r1, r6
 802849a:	4628      	mov	r0, r5
 802849c:	f7ff ff28 	bl	80282f0 <tx_tcp>
}
 80284a0:	b007      	add	sp, #28
 80284a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080284a8 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 80284a8:	b530      	push	{r4, r5, lr}
 80284aa:	b083      	sub	sp, #12
 80284ac:	4604      	mov	r4, r0
 80284ae:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80284b0:	6843      	ldr	r3, [r0, #4]
 80284b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 80284b4:	2901      	cmp	r1, #1
 80284b6:	d01a      	beq.n	80284ee <settmout+0x46>
 80284b8:	2903      	cmp	r1, #3
 80284ba:	d01a      	beq.n	80284f2 <settmout+0x4a>
 80284bc:	2904      	cmp	r1, #4
 80284be:	d01b      	beq.n	80284f8 <settmout+0x50>
 80284c0:	2902      	cmp	r1, #2
 80284c2:	d012      	beq.n	80284ea <settmout+0x42>
 80284c4:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
  s->timer = ifp->now + n;
 80284c8:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 80284ca:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80284cc:	185b      	adds	r3, r3, r1
 80284ce:	f142 0200 	adc.w	r2, r2, #0
 80284d2:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 80284d6:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 80284da:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 80284de:	4b10      	ldr	r3, [pc, #64]	@ (8028520 <settmout+0x78>)
 80284e0:	681b      	ldr	r3, [r3, #0]
 80284e2:	2b03      	cmp	r3, #3
 80284e4:	dc0b      	bgt.n	80284fe <settmout+0x56>
}
 80284e6:	b003      	add	sp, #12
 80284e8:	bd30      	pop	{r4, r5, pc}
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 80284ea:	2364      	movs	r3, #100	@ 0x64
 80284ec:	e7ec      	b.n	80284c8 <settmout+0x20>
 80284ee:	2396      	movs	r3, #150	@ 0x96
 80284f0:	e7ea      	b.n	80284c8 <settmout+0x20>
 80284f2:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80284f6:	e7e7      	b.n	80284c8 <settmout+0x20>
 80284f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80284fc:	e7e4      	b.n	80284c8 <settmout+0x20>
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 80284fe:	4b09      	ldr	r3, [pc, #36]	@ (8028524 <settmout+0x7c>)
 8028500:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 8028504:	4908      	ldr	r1, [pc, #32]	@ (8028528 <settmout+0x80>)
 8028506:	2004      	movs	r0, #4
 8028508:	f7fe f9f6 	bl	80268f8 <mg_log_prefix>
 802850c:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 8028510:	e9cd 2300 	strd	r2, r3, [sp]
 8028514:	462a      	mov	r2, r5
 8028516:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028518:	4804      	ldr	r0, [pc, #16]	@ (802852c <settmout+0x84>)
 802851a:	f7fc f89b 	bl	8024654 <mg_log>
}
 802851e:	e7e2      	b.n	80284e6 <settmout+0x3e>
 8028520:	2000012c 	.word	0x2000012c
 8028524:	0803bf14 	.word	0x0803bf14
 8028528:	0803b564 	.word	0x0803b564
 802852c:	0803b9ac 	.word	0x0803b9ac

08028530 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8028530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028534:	b089      	sub	sp, #36	@ 0x24
 8028536:	4604      	mov	r4, r0
 8028538:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802853a:	6843      	ldr	r3, [r0, #4]
 802853c:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 802853e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 8028542:	4611      	mov	r1, r2
 8028544:	f7ff fa2e 	bl	80279a4 <trim_len>
 8028548:	4605      	mov	r5, r0
  if (c->is_udp) {
 802854a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802854e:	f013 0f01 	tst.w	r3, #1
 8028552:	d010      	beq.n	8028576 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8028554:	68ba      	ldr	r2, [r7, #8]
 8028556:	9003      	str	r0, [sp, #12]
 8028558:	9602      	str	r6, [sp, #8]
 802855a:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 802855c:	9301      	str	r3, [sp, #4]
 802855e:	f8cd 8000 	str.w	r8, [sp]
 8028562:	8b23      	ldrh	r3, [r4, #24]
 8028564:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8028568:	4638      	mov	r0, r7
 802856a:	f7fd ff38 	bl	80263de <tx_udp>
  return (long) len;
 802856e:	4628      	mov	r0, r5
}
 8028570:	b009      	add	sp, #36	@ 0x24
 8028572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8028576:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 802857a:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 802857e:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8028582:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028586:	f7fd fddd 	bl	8026144 <mg_ntohl>
 802858a:	9007      	str	r0, [sp, #28]
 802858c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028590:	f7fd fdd8 	bl	8026144 <mg_ntohl>
 8028594:	9505      	str	r5, [sp, #20]
 8028596:	9604      	str	r6, [sp, #16]
 8028598:	9003      	str	r0, [sp, #12]
 802859a:	9b07      	ldr	r3, [sp, #28]
 802859c:	9302      	str	r3, [sp, #8]
 802859e:	f8cd b004 	str.w	fp, [sp, #4]
 80285a2:	f8cd a000 	str.w	sl, [sp]
 80285a6:	2318      	movs	r3, #24
 80285a8:	4642      	mov	r2, r8
 80285aa:	4649      	mov	r1, r9
 80285ac:	4638      	mov	r0, r7
 80285ae:	f7ff fe9f 	bl	80282f0 <tx_tcp>
    if (sent == 0) {
 80285b2:	b180      	cbz	r0, 80285d6 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 80285b4:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80285b8:	d010      	beq.n	80285dc <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 80285ba:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 80285be:	442b      	add	r3, r5
 80285c0:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 80285c4:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80285c8:	2b01      	cmp	r3, #1
 80285ca:	d1d0      	bne.n	802856e <mg_io_send+0x3e>
 80285cc:	2100      	movs	r1, #0
 80285ce:	4620      	mov	r0, r4
 80285d0:	f7ff ff6a 	bl	80284a8 <settmout>
 80285d4:	e7cb      	b.n	802856e <mg_io_send+0x3e>
      return MG_IO_WAIT;
 80285d6:	f06f 0001 	mvn.w	r0, #1
 80285da:	e7c9      	b.n	8028570 <mg_io_send+0x40>
      return MG_IO_ERR;
 80285dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80285e0:	e7c6      	b.n	8028570 <mg_io_send+0x40>
	...

080285e4 <write_conn>:
static void write_conn(struct mg_connection *c) {
 80285e4:	b510      	push	{r4, lr}
 80285e6:	b082      	sub	sp, #8
 80285e8:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80285ea:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 80285ee:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80285f2:	d00b      	beq.n	802860c <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80285f4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80285f6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80285f8:	f7fd fc80 	bl	8025efc <mg_tls_send>
 80285fc:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 80285fe:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8028602:	d008      	beq.n	8028616 <write_conn+0x32>
  } else if (len > 0) {
 8028604:	2800      	cmp	r0, #0
 8028606:	dc0b      	bgt.n	8028620 <write_conn+0x3c>
}
 8028608:	b002      	add	sp, #8
 802860a:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 802860c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 802860e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8028610:	f7ff ff8e 	bl	8028530 <mg_io_send>
 8028614:	e7f2      	b.n	80285fc <write_conn+0x18>
    mg_error(c, "tx err");
 8028616:	4908      	ldr	r1, [pc, #32]	@ (8028638 <write_conn+0x54>)
 8028618:	4620      	mov	r0, r4
 802861a:	f7fe fa55 	bl	8026ac8 <mg_error>
 802861e:	e7f3      	b.n	8028608 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8028620:	4602      	mov	r2, r0
 8028622:	2100      	movs	r1, #0
 8028624:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8028628:	f7fd fd2f 	bl	802608a <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 802862c:	aa01      	add	r2, sp, #4
 802862e:	2108      	movs	r1, #8
 8028630:	4620      	mov	r0, r4
 8028632:	f7fa fdc6 	bl	80231c2 <mg_call>
}
 8028636:	e7e7      	b.n	8028608 <write_conn+0x24>
 8028638:	0803b9bc 	.word	0x0803b9bc

0802863c <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 802863c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8028640:	f240 1221 	movw	r2, #289	@ 0x121
 8028644:	421a      	tst	r2, r3
 8028646:	d000      	beq.n	802864a <init_closure+0xe>
 8028648:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 802864a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802864e:	b086      	sub	sp, #24
 8028650:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8028652:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 8028654:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8028656:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 802865a:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 802865e:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 8028662:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 8028666:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 802866a:	f7fd fd6b 	bl	8026144 <mg_ntohl>
 802866e:	4605      	mov	r5, r0
 8028670:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028674:	f7fd fd66 	bl	8026144 <mg_ntohl>
 8028678:	2300      	movs	r3, #0
 802867a:	9305      	str	r3, [sp, #20]
 802867c:	9304      	str	r3, [sp, #16]
 802867e:	9003      	str	r0, [sp, #12]
 8028680:	9502      	str	r5, [sp, #8]
 8028682:	f8cd a004 	str.w	sl, [sp, #4]
 8028686:	f8cd 9000 	str.w	r9, [sp]
 802868a:	2311      	movs	r3, #17
 802868c:	4642      	mov	r2, r8
 802868e:	4639      	mov	r1, r7
 8028690:	4630      	mov	r0, r6
 8028692:	f7ff fe2d 	bl	80282f0 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8028696:	2104      	movs	r1, #4
 8028698:	4620      	mov	r0, r4
 802869a:	f7ff ff05 	bl	80284a8 <settmout>
}
 802869e:	b006      	add	sp, #24
 80286a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080286a4 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 80286a4:	b530      	push	{r4, r5, lr}
 80286a6:	b085      	sub	sp, #20
 80286a8:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80286aa:	6843      	ldr	r3, [r0, #4]
 80286ac:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80286ae:	69c3      	ldr	r3, [r0, #28]
 80286b0:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 80286b2:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80286b6:	f36f 03c3 	bfc	r3, #3, #1
 80286ba:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 80286be:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 80286c2:	2b00      	cmp	r3, #0
 80286c4:	db03      	blt.n	80286ce <mg_connect_resolved+0x2a>
 80286c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80286ca:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 80286ce:	68ab      	ldr	r3, [r5, #8]
 80286d0:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 80286d2:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 80286d6:	1c43      	adds	r3, r0, #1
 80286d8:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 80286dc:	f7fd fdca 	bl	8026274 <mg_ntohs>
 80286e0:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 80286e2:	4b51      	ldr	r3, [pc, #324]	@ (8028828 <mg_connect_resolved+0x184>)
 80286e4:	681b      	ldr	r3, [r3, #0]
 80286e6:	2b02      	cmp	r3, #2
 80286e8:	dc36      	bgt.n	8028758 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 80286ea:	2200      	movs	r2, #0
 80286ec:	2103      	movs	r1, #3
 80286ee:	4620      	mov	r0, r4
 80286f0:	f7fa fd67 	bl	80231c2 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 80286f4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80286f8:	f013 0301 	ands.w	r3, r3, #1
 80286fc:	d009      	beq.n	8028712 <mg_connect_resolved+0x6e>
 80286fe:	9903      	ldr	r1, [sp, #12]
 8028700:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8028704:	d03b      	beq.n	802877e <mg_connect_resolved+0xda>
 8028706:	68aa      	ldr	r2, [r5, #8]
 8028708:	68e8      	ldr	r0, [r5, #12]
 802870a:	ea62 0200 	orn	r2, r2, r0
 802870e:	4291      	cmp	r1, r2
 8028710:	d035      	beq.n	802877e <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8028712:	68aa      	ldr	r2, [r5, #8]
 8028714:	2a00      	cmp	r2, #0
 8028716:	d046      	beq.n	80287a6 <mg_connect_resolved+0x102>
 8028718:	9903      	ldr	r1, [sp, #12]
 802871a:	68e8      	ldr	r0, [r5, #12]
 802871c:	404a      	eors	r2, r1
 802871e:	4202      	tst	r2, r0
 8028720:	d141      	bne.n	80287a6 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8028722:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8028724:	4291      	cmp	r1, r2
 8028726:	d03e      	beq.n	80287a6 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8028728:	4b3f      	ldr	r3, [pc, #252]	@ (8028828 <mg_connect_resolved+0x184>)
 802872a:	681b      	ldr	r3, [r3, #0]
 802872c:	2b02      	cmp	r3, #2
 802872e:	dc2e      	bgt.n	802878e <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 8028730:	9903      	ldr	r1, [sp, #12]
 8028732:	4628      	mov	r0, r5
 8028734:	f7fd fe9b 	bl	802646e <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8028738:	2102      	movs	r1, #2
 802873a:	4620      	mov	r0, r4
 802873c:	f7ff feb4 	bl	80284a8 <settmout>
    c->is_arplooking = 1;
 8028740:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028744:	f043 0310 	orr.w	r3, r3, #16
 8028748:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 802874c:	b2db      	uxtb	r3, r3
 802874e:	f043 0320 	orr.w	r3, r3, #32
 8028752:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 8028756:	e018      	b.n	802878a <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8028758:	4b34      	ldr	r3, [pc, #208]	@ (802882c <mg_connect_resolved+0x188>)
 802875a:	f241 724f 	movw	r2, #5967	@ 0x174f
 802875e:	4934      	ldr	r1, [pc, #208]	@ (8028830 <mg_connect_resolved+0x18c>)
 8028760:	2003      	movs	r0, #3
 8028762:	f7fe f8c9 	bl	80268f8 <mg_log_prefix>
 8028766:	4a33      	ldr	r2, [pc, #204]	@ (8028834 <mg_connect_resolved+0x190>)
 8028768:	f104 031c 	add.w	r3, r4, #28
 802876c:	9301      	str	r3, [sp, #4]
 802876e:	9200      	str	r2, [sp, #0]
 8028770:	f104 0308 	add.w	r3, r4, #8
 8028774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028776:	4830      	ldr	r0, [pc, #192]	@ (8028838 <mg_connect_resolved+0x194>)
 8028778:	f7fb ff6c 	bl	8024654 <mg_log>
 802877c:	e7b5      	b.n	80286ea <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 802877e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028782:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8028786:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 802878a:	b005      	add	sp, #20
 802878c:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 802878e:	4b27      	ldr	r3, [pc, #156]	@ (802882c <mg_connect_resolved+0x188>)
 8028790:	f241 7258 	movw	r2, #5976	@ 0x1758
 8028794:	4926      	ldr	r1, [pc, #152]	@ (8028830 <mg_connect_resolved+0x18c>)
 8028796:	2003      	movs	r0, #3
 8028798:	f7fe f8ae 	bl	80268f8 <mg_log_prefix>
 802879c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802879e:	4827      	ldr	r0, [pc, #156]	@ (802883c <mg_connect_resolved+0x198>)
 80287a0:	f7fb ff58 	bl	8024654 <mg_log>
 80287a4:	e7c4      	b.n	8028730 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 80287a6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80287aa:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 80287ae:	2ae0      	cmp	r2, #224	@ 0xe0
 80287b0:	d00e      	beq.n	80287d0 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 80287b2:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 80287b6:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 80287ba:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 80287be:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 80287c2:	b31b      	cbz	r3, 802880c <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 80287c4:	2200      	movs	r2, #0
 80287c6:	2104      	movs	r1, #4
 80287c8:	4620      	mov	r0, r4
 80287ca:	f7fa fcfa 	bl	80231c2 <mg_call>
 80287ce:	e7dc      	b.n	802878a <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 80287d0:	4b1b      	ldr	r3, [pc, #108]	@ (8028840 <mg_connect_resolved+0x19c>)
 80287d2:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80287d6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80287da:	0c1b      	lsrs	r3, r3, #16
 80287dc:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 80287e0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80287e4:	b2db      	uxtb	r3, r3
 80287e6:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 80287ea:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 80287ee:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 80287f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80287f6:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 80287fa:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 80287fe:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8028802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8028806:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 802880a:	e7be      	b.n	802878a <mg_connect_resolved+0xe6>
      send_syn(c);
 802880c:	4620      	mov	r0, r4
 802880e:	f7ff fdff 	bl	8028410 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8028812:	2103      	movs	r1, #3
 8028814:	4620      	mov	r0, r4
 8028816:	f7ff fe47 	bl	80284a8 <settmout>
      c->is_connecting = 1;
 802881a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802881e:	f043 0320 	orr.w	r3, r3, #32
 8028822:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 8028826:	e7b0      	b.n	802878a <mg_connect_resolved+0xe6>
 8028828:	2000012c 	.word	0x2000012c
 802882c:	0803bef0 	.word	0x0803bef0
 8028830:	0803b564 	.word	0x0803b564
 8028834:	080267ad 	.word	0x080267ad
 8028838:	0803b9c4 	.word	0x0803b9c4
 802883c:	0803b9d4 	.word	0x0803b9d4
 8028840:	0803643c 	.word	0x0803643c

08028844 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8028844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028846:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8028848:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 802884a:	2902      	cmp	r1, #2
 802884c:	d009      	beq.n	8028862 <dns_cb+0x1e>
 802884e:	4604      	mov	r4, r0
 8028850:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 8028854:	2907      	cmp	r1, #7
 8028856:	d016      	beq.n	8028886 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 8028858:	2909      	cmp	r1, #9
 802885a:	f000 809a 	beq.w	8028992 <dns_cb+0x14e>
}
 802885e:	b049      	add	sp, #292	@ 0x124
 8028860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 8028862:	6816      	ldr	r6, [r2, #0]
 8028864:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 8028866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028868:	e000      	b.n	802886c <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 802886a:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 802886c:	2b00      	cmp	r3, #0
 802886e:	d0f6      	beq.n	802885e <dns_cb+0x1a>
      tmp = d->next;
 8028870:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8028872:	6899      	ldr	r1, [r3, #8]
 8028874:	68da      	ldr	r2, [r3, #12]
 8028876:	42b1      	cmp	r1, r6
 8028878:	41aa      	sbcs	r2, r5
 802887a:	d2f6      	bcs.n	802886a <dns_cb+0x26>
 802887c:	494c      	ldr	r1, [pc, #304]	@ (80289b0 <dns_cb+0x16c>)
 802887e:	6858      	ldr	r0, [r3, #4]
 8028880:	f7fe f922 	bl	8026ac8 <mg_error>
 8028884:	e7f1      	b.n	802886a <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8028886:	aa02      	add	r2, sp, #8
 8028888:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802888a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802888c:	f7fe f870 	bl	8026970 <mg_dns_parse>
 8028890:	b9c8      	cbnz	r0, 80288c6 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 8028892:	4b48      	ldr	r3, [pc, #288]	@ (80289b4 <dns_cb+0x170>)
 8028894:	681b      	ldr	r3, [r3, #0]
 8028896:	2b00      	cmp	r3, #0
 8028898:	dc0a      	bgt.n	80288b0 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 802889a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802889c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802889e:	f7fb f83b 	bl	8023918 <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80288a2:	4b44      	ldr	r3, [pc, #272]	@ (80289b4 <dns_cb+0x170>)
 80288a4:	681b      	ldr	r3, [r3, #0]
 80288a6:	2b00      	cmp	r3, #0
 80288a8:	dc68      	bgt.n	802897c <dns_cb+0x138>
    c->recv.len = 0;
 80288aa:	2300      	movs	r3, #0
 80288ac:	6423      	str	r3, [r4, #64]	@ 0x40
 80288ae:	e7d6      	b.n	802885e <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 80288b0:	4b41      	ldr	r3, [pc, #260]	@ (80289b8 <dns_cb+0x174>)
 80288b2:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 80288b6:	4941      	ldr	r1, [pc, #260]	@ (80289bc <dns_cb+0x178>)
 80288b8:	2001      	movs	r0, #1
 80288ba:	f7fe f81d 	bl	80268f8 <mg_log_prefix>
 80288be:	4840      	ldr	r0, [pc, #256]	@ (80289c0 <dns_cb+0x17c>)
 80288c0:	f7fb fec8 	bl	8024654 <mg_log>
 80288c4:	e7e9      	b.n	802889a <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 80288c6:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 80288c8:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 80288ca:	e008      	b.n	80288de <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 80288cc:	6868      	ldr	r0, [r5, #4]
 80288ce:	f7ff fee9 	bl	80286a4 <mg_connect_resolved>
        mg_dns_free(head, d);
 80288d2:	4629      	mov	r1, r5
 80288d4:	4630      	mov	r0, r6
 80288d6:	f7f9 fa35 	bl	8021d44 <mg_dns_free>
        resolved = 1;
 80288da:	2101      	movs	r1, #1
 80288dc:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 80288de:	2d00      	cmp	r5, #0
 80288e0:	d049      	beq.n	8028976 <dns_cb+0x132>
        tmp = d->next;
 80288e2:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 80288e4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80288e8:	8a2b      	ldrh	r3, [r5, #16]
 80288ea:	429a      	cmp	r2, r3
 80288ec:	d1f6      	bne.n	80288dc <dns_cb+0x98>
        if (d->c->is_resolving) {
 80288ee:	6868      	ldr	r0, [r5, #4]
 80288f0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80288f4:	f013 0f08 	tst.w	r3, #8
 80288f8:	d02c      	beq.n	8028954 <dns_cb+0x110>
          if (dm.resolved) {
 80288fa:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80288fe:	b323      	cbz	r3, 802894a <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 8028900:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8028902:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 8028906:	686b      	ldr	r3, [r5, #4]
 8028908:	f103 0c1c 	add.w	ip, r3, #28
 802890c:	f10d 0e0c 	add.w	lr, sp, #12
 8028910:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8028914:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8028918:	f8de 3000 	ldr.w	r3, [lr]
 802891c:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 8028920:	4b24      	ldr	r3, [pc, #144]	@ (80289b4 <dns_cb+0x170>)
 8028922:	681b      	ldr	r3, [r3, #0]
 8028924:	2b02      	cmp	r3, #2
 8028926:	ddd1      	ble.n	80288cc <dns_cb+0x88>
 8028928:	4b23      	ldr	r3, [pc, #140]	@ (80289b8 <dns_cb+0x174>)
 802892a:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 802892e:	4923      	ldr	r1, [pc, #140]	@ (80289bc <dns_cb+0x178>)
 8028930:	2003      	movs	r0, #3
 8028932:	f7fd ffe1 	bl	80268f8 <mg_log_prefix>
 8028936:	686b      	ldr	r3, [r5, #4]
 8028938:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802893a:	331c      	adds	r3, #28
 802893c:	9300      	str	r3, [sp, #0]
 802893e:	4b21      	ldr	r3, [pc, #132]	@ (80289c4 <dns_cb+0x180>)
 8028940:	aa08      	add	r2, sp, #32
 8028942:	4821      	ldr	r0, [pc, #132]	@ (80289c8 <dns_cb+0x184>)
 8028944:	f7fb fe86 	bl	8024654 <mg_log>
 8028948:	e7c0      	b.n	80288cc <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 802894a:	aa08      	add	r2, sp, #32
 802894c:	491f      	ldr	r1, [pc, #124]	@ (80289cc <dns_cb+0x188>)
 802894e:	f7fe f8bb 	bl	8026ac8 <mg_error>
 8028952:	e7be      	b.n	80288d2 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 8028954:	4b17      	ldr	r3, [pc, #92]	@ (80289b4 <dns_cb+0x170>)
 8028956:	681b      	ldr	r3, [r3, #0]
 8028958:	2b00      	cmp	r3, #0
 802895a:	ddba      	ble.n	80288d2 <dns_cb+0x8e>
 802895c:	4b16      	ldr	r3, [pc, #88]	@ (80289b8 <dns_cb+0x174>)
 802895e:	f240 42da 	movw	r2, #1242	@ 0x4da
 8028962:	4916      	ldr	r1, [pc, #88]	@ (80289bc <dns_cb+0x178>)
 8028964:	2001      	movs	r0, #1
 8028966:	f7fd ffc7 	bl	80268f8 <mg_log_prefix>
 802896a:	686b      	ldr	r3, [r5, #4]
 802896c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802896e:	4818      	ldr	r0, [pc, #96]	@ (80289d0 <dns_cb+0x18c>)
 8028970:	f7fb fe70 	bl	8024654 <mg_log>
 8028974:	e7ad      	b.n	80288d2 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8028976:	2900      	cmp	r1, #0
 8028978:	d197      	bne.n	80288aa <dns_cb+0x66>
 802897a:	e792      	b.n	80288a2 <dns_cb+0x5e>
 802897c:	4b0e      	ldr	r3, [pc, #56]	@ (80289b8 <dns_cb+0x174>)
 802897e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8028982:	490e      	ldr	r1, [pc, #56]	@ (80289bc <dns_cb+0x178>)
 8028984:	2001      	movs	r0, #1
 8028986:	f7fd ffb7 	bl	80268f8 <mg_log_prefix>
 802898a:	4812      	ldr	r0, [pc, #72]	@ (80289d4 <dns_cb+0x190>)
 802898c:	f7fb fe62 	bl	8024654 <mg_log>
 8028990:	e78b      	b.n	80288aa <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 8028992:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8028994:	2c00      	cmp	r4, #0
 8028996:	f43f af62 	beq.w	802885e <dns_cb+0x1a>
      tmp = d->next;
 802899a:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 802899c:	490e      	ldr	r1, [pc, #56]	@ (80289d8 <dns_cb+0x194>)
 802899e:	6860      	ldr	r0, [r4, #4]
 80289a0:	f7fe f892 	bl	8026ac8 <mg_error>
      mg_dns_free(head, d);
 80289a4:	4621      	mov	r1, r4
 80289a6:	4630      	mov	r0, r6
 80289a8:	f7f9 f9cc 	bl	8021d44 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 80289ac:	462c      	mov	r4, r5
 80289ae:	e7f1      	b.n	8028994 <dns_cb+0x150>
 80289b0:	0803b9e8 	.word	0x0803b9e8
 80289b4:	2000012c 	.word	0x2000012c
 80289b8:	0803bfc4 	.word	0x0803bfc4
 80289bc:	0803b564 	.word	0x0803b564
 80289c0:	0803b9f4 	.word	0x0803b9f4
 80289c4:	08026791 	.word	0x08026791
 80289c8:	0803ba10 	.word	0x0803ba10
 80289cc:	0803ba20 	.word	0x0803ba20
 80289d0:	0803ba38 	.word	0x0803ba38
 80289d4:	0803ba50 	.word	0x0803ba50
 80289d8:	0803ba60 	.word	0x0803ba60

080289dc <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 80289dc:	b510      	push	{r4, lr}
 80289de:	b086      	sub	sp, #24
 80289e0:	4604      	mov	r4, r0
  uint8_t opts[] = {
 80289e2:	4a12      	ldr	r2, [pc, #72]	@ (8028a2c <tx_dhcp_discover+0x50>)
 80289e4:	ab04      	add	r3, sp, #16
 80289e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80289ea:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 80289ee:	2200      	movs	r2, #0
 80289f0:	9202      	str	r2, [sp, #8]
 80289f2:	2108      	movs	r1, #8
 80289f4:	9101      	str	r1, [sp, #4]
 80289f6:	9300      	str	r3, [sp, #0]
 80289f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80289fc:	490c      	ldr	r1, [pc, #48]	@ (8028a30 <tx_dhcp_discover+0x54>)
 80289fe:	4620      	mov	r0, r4
 8028a00:	f7fd fd7a 	bl	80264f8 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8028a04:	4b0b      	ldr	r3, [pc, #44]	@ (8028a34 <tx_dhcp_discover+0x58>)
 8028a06:	681b      	ldr	r3, [r3, #0]
 8028a08:	2b02      	cmp	r3, #2
 8028a0a:	dc01      	bgt.n	8028a10 <tx_dhcp_discover+0x34>
}
 8028a0c:	b006      	add	sp, #24
 8028a0e:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8028a10:	4b09      	ldr	r3, [pc, #36]	@ (8028a38 <tx_dhcp_discover+0x5c>)
 8028a12:	f241 4270 	movw	r2, #5232	@ 0x1470
 8028a16:	4909      	ldr	r1, [pc, #36]	@ (8028a3c <tx_dhcp_discover+0x60>)
 8028a18:	2003      	movs	r0, #3
 8028a1a:	f7fd ff6d 	bl	80268f8 <mg_log_prefix>
 8028a1e:	4622      	mov	r2, r4
 8028a20:	4907      	ldr	r1, [pc, #28]	@ (8028a40 <tx_dhcp_discover+0x64>)
 8028a22:	4808      	ldr	r0, [pc, #32]	@ (8028a44 <tx_dhcp_discover+0x68>)
 8028a24:	f7fb fe16 	bl	8024654 <mg_log>
}
 8028a28:	e7f0      	b.n	8028a0c <tx_dhcp_discover+0x30>
 8028a2a:	bf00      	nop
 8028a2c:	0803ba8c 	.word	0x0803ba8c
 8028a30:	0803bfec 	.word	0x0803bfec
 8028a34:	2000012c 	.word	0x2000012c
 8028a38:	0803bec0 	.word	0x0803bec0
 8028a3c:	0803b564 	.word	0x0803b564
 8028a40:	08024625 	.word	0x08024625
 8028a44:	0803ba6c 	.word	0x0803ba6c

08028a48 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 8028a48:	b510      	push	{r4, lr}
 8028a4a:	b086      	sub	sp, #24
  uint8_t opts[] = {
 8028a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8028a84 <tx_dhcp_request_re+0x3c>)
 8028a4e:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8028a50:	2401      	movs	r4, #1
 8028a52:	9402      	str	r4, [sp, #8]
 8028a54:	2404      	movs	r4, #4
 8028a56:	9401      	str	r4, [sp, #4]
 8028a58:	ac05      	add	r4, sp, #20
 8028a5a:	9400      	str	r4, [sp, #0]
 8028a5c:	f7fd fd4c 	bl	80264f8 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8028a60:	4b09      	ldr	r3, [pc, #36]	@ (8028a88 <tx_dhcp_request_re+0x40>)
 8028a62:	681b      	ldr	r3, [r3, #0]
 8028a64:	2b02      	cmp	r3, #2
 8028a66:	dc01      	bgt.n	8028a6c <tx_dhcp_request_re+0x24>
}
 8028a68:	b006      	add	sp, #24
 8028a6a:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 8028a6c:	4b07      	ldr	r3, [pc, #28]	@ (8028a8c <tx_dhcp_request_re+0x44>)
 8028a6e:	f241 4266 	movw	r2, #5222	@ 0x1466
 8028a72:	4907      	ldr	r1, [pc, #28]	@ (8028a90 <tx_dhcp_request_re+0x48>)
 8028a74:	2003      	movs	r0, #3
 8028a76:	f7fd ff3f 	bl	80268f8 <mg_log_prefix>
 8028a7a:	4806      	ldr	r0, [pc, #24]	@ (8028a94 <tx_dhcp_request_re+0x4c>)
 8028a7c:	f7fb fdea 	bl	8024654 <mg_log>
}
 8028a80:	e7f2      	b.n	8028a68 <tx_dhcp_request_re+0x20>
 8028a82:	bf00      	nop
 8028a84:	ff030135 	.word	0xff030135
 8028a88:	2000012c 	.word	0x2000012c
 8028a8c:	0803be9c 	.word	0x0803be9c
 8028a90:	0803b564 	.word	0x0803b564
 8028a94:	0803ba98 	.word	0x0803ba98

08028a98 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028a9a:	b083      	sub	sp, #12
 8028a9c:	4604      	mov	r4, r0
 8028a9e:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8028aa0:	698e      	ldr	r6, [r1, #24]
 8028aa2:	88f7      	ldrh	r7, [r6, #6]
 8028aa4:	2001      	movs	r0, #1
 8028aa6:	f7fd fbe5 	bl	8026274 <mg_ntohs>
 8028aaa:	4287      	cmp	r7, r0
 8028aac:	d006      	beq.n	8028abc <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 8028aae:	2002      	movs	r0, #2
 8028ab0:	f7fd fbe0 	bl	8026274 <mg_ntohs>
 8028ab4:	4287      	cmp	r7, r0
 8028ab6:	d05a      	beq.n	8028b6e <rx_arp+0xd6>
}
 8028ab8:	b003      	add	sp, #12
 8028aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8028abc:	69b2      	ldr	r2, [r6, #24]
 8028abe:	68a3      	ldr	r3, [r4, #8]
 8028ac0:	429a      	cmp	r2, r3
 8028ac2:	d1f4      	bne.n	8028aae <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 8028ac4:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8028ac6:	692b      	ldr	r3, [r5, #16]
 8028ac8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8028acc:	6032      	str	r2, [r6, #0]
 8028ace:	895b      	ldrh	r3, [r3, #10]
 8028ad0:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8028ad2:	6823      	ldr	r3, [r4, #0]
 8028ad4:	f8c6 3006 	str.w	r3, [r6, #6]
 8028ad8:	88a3      	ldrh	r3, [r4, #4]
 8028ada:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 8028adc:	f640 0006 	movw	r0, #2054	@ 0x806
 8028ae0:	f7fd fbc8 	bl	8026274 <mg_ntohs>
 8028ae4:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 8028ae6:	69ab      	ldr	r3, [r5, #24]
 8028ae8:	6818      	ldr	r0, [r3, #0]
 8028aea:	6859      	ldr	r1, [r3, #4]
 8028aec:	689a      	ldr	r2, [r3, #8]
 8028aee:	68df      	ldr	r7, [r3, #12]
 8028af0:	f8c6 000e 	str.w	r0, [r6, #14]
 8028af4:	f8c6 1012 	str.w	r1, [r6, #18]
 8028af8:	f8c6 2016 	str.w	r2, [r6, #22]
 8028afc:	f8c6 701a 	str.w	r7, [r6, #26]
 8028b00:	6918      	ldr	r0, [r3, #16]
 8028b02:	6959      	ldr	r1, [r3, #20]
 8028b04:	699a      	ldr	r2, [r3, #24]
 8028b06:	f8c6 001e 	str.w	r0, [r6, #30]
 8028b0a:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 8028b0e:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 8028b12:	2002      	movs	r0, #2
 8028b14:	f7fd fbae 	bl	8026274 <mg_ntohs>
 8028b18:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8028b1a:	69ab      	ldr	r3, [r5, #24]
 8028b1c:	689a      	ldr	r2, [r3, #8]
 8028b1e:	6232      	str	r2, [r6, #32]
 8028b20:	899b      	ldrh	r3, [r3, #12]
 8028b22:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8028b24:	6823      	ldr	r3, [r4, #0]
 8028b26:	f8c6 3016 	str.w	r3, [r6, #22]
 8028b2a:	88a3      	ldrh	r3, [r4, #4]
 8028b2c:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 8028b2e:	69ab      	ldr	r3, [r5, #24]
 8028b30:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8028b34:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 8028b38:	68a3      	ldr	r3, [r4, #8]
 8028b3a:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 8028b3c:	4b32      	ldr	r3, [pc, #200]	@ (8028c08 <rx_arp+0x170>)
 8028b3e:	681b      	ldr	r3, [r3, #0]
 8028b40:	2b02      	cmp	r3, #2
 8028b42:	dc04      	bgt.n	8028b4e <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 8028b44:	212a      	movs	r1, #42	@ 0x2a
 8028b46:	4620      	mov	r0, r4
 8028b48:	f7f8 feed 	bl	8021926 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8028b4c:	e7b4      	b.n	8028ab8 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 8028b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8028c0c <rx_arp+0x174>)
 8028b50:	f241 4292 	movw	r2, #5266	@ 0x1492
 8028b54:	492e      	ldr	r1, [pc, #184]	@ (8028c10 <rx_arp+0x178>)
 8028b56:	2003      	movs	r0, #3
 8028b58:	f7fd fece 	bl	80268f8 <mg_log_prefix>
 8028b5c:	9400      	str	r4, [sp, #0]
 8028b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8028c14 <rx_arp+0x17c>)
 8028b60:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 8028b64:	492c      	ldr	r1, [pc, #176]	@ (8028c18 <rx_arp+0x180>)
 8028b66:	482d      	ldr	r0, [pc, #180]	@ (8028c1c <rx_arp+0x184>)
 8028b68:	f7fb fd74 	bl	8024654 <mg_log>
 8028b6c:	e7ea      	b.n	8028b44 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8028b6e:	2206      	movs	r2, #6
 8028b70:	4621      	mov	r1, r4
 8028b72:	f106 0012 	add.w	r0, r6, #18
 8028b76:	f004 fa27 	bl	802cfc8 <memcmp>
 8028b7a:	2800      	cmp	r0, #0
 8028b7c:	d19c      	bne.n	8028ab8 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 8028b7e:	f8d6 200e 	ldr.w	r2, [r6, #14]
 8028b82:	6923      	ldr	r3, [r4, #16]
 8028b84:	429a      	cmp	r2, r3
 8028b86:	d026      	beq.n	8028bd6 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8028b88:	2200      	movs	r2, #0
 8028b8a:	4629      	mov	r1, r5
 8028b8c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8028b8e:	f7fa f9ac 	bl	8022eea <getpeer>
      if (c != NULL && c->is_arplooking) {
 8028b92:	4604      	mov	r4, r0
 8028b94:	2800      	cmp	r0, #0
 8028b96:	d08f      	beq.n	8028ab8 <rx_arp+0x20>
 8028b98:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028b9c:	f013 0f10 	tst.w	r3, #16
 8028ba0:	d08a      	beq.n	8028ab8 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8028ba2:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 8028ba6:	68b3      	ldr	r3, [r6, #8]
 8028ba8:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 8028bac:	89b3      	ldrh	r3, [r6, #12]
 8028bae:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8028bb2:	4b15      	ldr	r3, [pc, #84]	@ (8028c08 <rx_arp+0x170>)
 8028bb4:	681b      	ldr	r3, [r3, #0]
 8028bb6:	2b02      	cmp	r3, #2
 8028bb8:	dc14      	bgt.n	8028be4 <rx_arp+0x14c>
        c->is_arplooking = 0;
 8028bba:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028bbe:	f36f 1304 	bfc	r3, #4, #1
 8028bc2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 8028bc6:	4620      	mov	r0, r4
 8028bc8:	f7ff fc22 	bl	8028410 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 8028bcc:	2103      	movs	r1, #3
 8028bce:	4620      	mov	r0, r4
 8028bd0:	f7ff fc6a 	bl	80284a8 <settmout>
 8028bd4:	e770      	b.n	8028ab8 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8028bd6:	68b3      	ldr	r3, [r6, #8]
 8028bd8:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8028bdc:	89b3      	ldrh	r3, [r6, #12]
 8028bde:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8028be2:	e769      	b.n	8028ab8 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8028be4:	4b09      	ldr	r3, [pc, #36]	@ (8028c0c <rx_arp+0x174>)
 8028be6:	f241 429f 	movw	r2, #5279	@ 0x149f
 8028bea:	4909      	ldr	r1, [pc, #36]	@ (8028c10 <rx_arp+0x178>)
 8028bec:	2003      	movs	r0, #3
 8028bee:	f7fd fe83 	bl	80268f8 <mg_log_prefix>
 8028bf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028bf4:	9501      	str	r5, [sp, #4]
 8028bf6:	4b07      	ldr	r3, [pc, #28]	@ (8028c14 <rx_arp+0x17c>)
 8028bf8:	9300      	str	r3, [sp, #0]
 8028bfa:	f104 031c 	add.w	r3, r4, #28
 8028bfe:	4a06      	ldr	r2, [pc, #24]	@ (8028c18 <rx_arp+0x180>)
 8028c00:	4807      	ldr	r0, [pc, #28]	@ (8028c20 <rx_arp+0x188>)
 8028c02:	f7fb fd27 	bl	8024654 <mg_log>
 8028c06:	e7d8      	b.n	8028bba <rx_arp+0x122>
 8028c08:	2000012c 	.word	0x2000012c
 8028c0c:	0803be88 	.word	0x0803be88
 8028c10:	0803b564 	.word	0x0803b564
 8028c14:	08024625 	.word	0x08024625
 8028c18:	08024615 	.word	0x08024615
 8028c1c:	0803baa8 	.word	0x0803baa8
 8028c20:	0803bac0 	.word	0x0803bac0

08028c24 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 8028c24:	b570      	push	{r4, r5, r6, lr}
 8028c26:	b08c      	sub	sp, #48	@ 0x30
 8028c28:	4686      	mov	lr, r0
 8028c2a:	460d      	mov	r5, r1
 8028c2c:	4616      	mov	r6, r2
  uint8_t opts[] = {
 8028c2e:	f10d 0c14 	add.w	ip, sp, #20
 8028c32:	4c22      	ldr	r4, [pc, #136]	@ (8028cbc <tx_dhcp_request_sel+0x98>)
 8028c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028c36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8028c3a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8028c3e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8028c42:	f82c 2b02 	strh.w	r2, [ip], #2
 8028c46:	0c12      	lsrs	r2, r2, #16
 8028c48:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 8028c4c:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 8028c50:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 8028c52:	f89e 301f 	ldrb.w	r3, [lr, #31]
 8028c56:	b323      	cbz	r3, 8028ca2 <tx_dhcp_request_sel+0x7e>
 8028c58:	2306      	movs	r3, #6
 8028c5a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8028c5e:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 8028c60:	f89e 2020 	ldrb.w	r2, [lr, #32]
 8028c64:	b132      	cbz	r2, 8028c74 <tx_dhcp_request_sel+0x50>
 8028c66:	1c5a      	adds	r2, r3, #1
 8028c68:	3348      	adds	r3, #72	@ 0x48
 8028c6a:	446b      	add	r3, sp
 8028c6c:	212a      	movs	r1, #42	@ 0x2a
 8028c6e:	f803 1c1c 	strb.w	r1, [r3, #-28]
 8028c72:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 8028c74:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8028c78:	441a      	add	r2, r3
 8028c7a:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 8028c7e:	2200      	movs	r2, #0
 8028c80:	9202      	str	r2, [sp, #8]
 8028c82:	3319      	adds	r3, #25
 8028c84:	9301      	str	r3, [sp, #4]
 8028c86:	ab05      	add	r3, sp, #20
 8028c88:	9300      	str	r3, [sp, #0]
 8028c8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028c8e:	490c      	ldr	r1, [pc, #48]	@ (8028cc0 <tx_dhcp_request_sel+0x9c>)
 8028c90:	4670      	mov	r0, lr
 8028c92:	f7fd fc31 	bl	80264f8 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8028c96:	4b0b      	ldr	r3, [pc, #44]	@ (8028cc4 <tx_dhcp_request_sel+0xa0>)
 8028c98:	681b      	ldr	r3, [r3, #0]
 8028c9a:	2b02      	cmp	r3, #2
 8028c9c:	dc03      	bgt.n	8028ca6 <tx_dhcp_request_sel+0x82>
}
 8028c9e:	b00c      	add	sp, #48	@ 0x30
 8028ca0:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 8028ca2:	2300      	movs	r3, #0
 8028ca4:	e7dc      	b.n	8028c60 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 8028ca6:	4b08      	ldr	r3, [pc, #32]	@ (8028cc8 <tx_dhcp_request_sel+0xa4>)
 8028ca8:	f241 425b 	movw	r2, #5211	@ 0x145b
 8028cac:	4907      	ldr	r1, [pc, #28]	@ (8028ccc <tx_dhcp_request_sel+0xa8>)
 8028cae:	2003      	movs	r0, #3
 8028cb0:	f7fd fe22 	bl	80268f8 <mg_log_prefix>
 8028cb4:	4806      	ldr	r0, [pc, #24]	@ (8028cd0 <tx_dhcp_request_sel+0xac>)
 8028cb6:	f7fb fccd 	bl	8024654 <mg_log>
}
 8028cba:	e7f0      	b.n	8028c9e <tx_dhcp_request_sel+0x7a>
 8028cbc:	08036668 	.word	0x08036668
 8028cc0:	0803bfec 	.word	0x0803bfec
 8028cc4:	2000012c 	.word	0x2000012c
 8028cc8:	0803be5c 	.word	0x0803be5c
 8028ccc:	0803b564 	.word	0x0803b564
 8028cd0:	0803ba98 	.word	0x0803ba98

08028cd4 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8028cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028cd8:	b089      	sub	sp, #36	@ 0x24
 8028cda:	4604      	mov	r4, r0
 8028cdc:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8028cde:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028ce2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028ce6:	d049      	beq.n	8028d7c <read_conn+0xa8>
 8028ce8:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 8028cec:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8028cee:	6878      	ldr	r0, [r7, #4]
 8028cf0:	f7fd fa28 	bl	8026144 <mg_ntohl>
 8028cf4:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8028cf6:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 8028cf8:	7b7b      	ldrb	r3, [r7, #13]
 8028cfa:	f013 0f01 	tst.w	r3, #1
 8028cfe:	d053      	beq.n	8028da8 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 8028d00:	68eb      	ldr	r3, [r5, #12]
 8028d02:	4403      	add	r3, r0
 8028d04:	3301      	adds	r3, #1
 8028d06:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 8028d0a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028d0e:	f013 0f10 	tst.w	r3, #16
 8028d12:	d003      	beq.n	8028d1c <read_conn+0x48>
 8028d14:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028d18:	2b04      	cmp	r3, #4
 8028d1a:	d032      	beq.n	8028d82 <read_conn+0xae>
      c->is_draining = 1;
 8028d1c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028d20:	f043 0310 	orr.w	r3, r3, #16
 8028d24:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 8028d28:	2104      	movs	r1, #4
 8028d2a:	4620      	mov	r0, r4
 8028d2c:	f7ff fbbc 	bl	80284a8 <settmout>
      flags |= TH_FIN;
 8028d30:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 8028d34:	6863      	ldr	r3, [r4, #4]
 8028d36:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8028d38:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8028d3c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8028d40:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8028d44:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028d48:	f7fd f9fc 	bl	8026144 <mg_ntohl>
 8028d4c:	4605      	mov	r5, r0
 8028d4e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028d52:	f7fd f9f7 	bl	8026144 <mg_ntohl>
 8028d56:	2300      	movs	r3, #0
 8028d58:	9305      	str	r3, [sp, #20]
 8028d5a:	4b9b      	ldr	r3, [pc, #620]	@ (8028fc8 <read_conn+0x2f4>)
 8028d5c:	9304      	str	r3, [sp, #16]
 8028d5e:	9003      	str	r0, [sp, #12]
 8028d60:	9502      	str	r5, [sp, #8]
 8028d62:	f8cd a004 	str.w	sl, [sp, #4]
 8028d66:	f8cd 9000 	str.w	r9, [sp]
 8028d6a:	465b      	mov	r3, fp
 8028d6c:	4632      	mov	r2, r6
 8028d6e:	4641      	mov	r1, r8
 8028d70:	4638      	mov	r0, r7
 8028d72:	f7ff fabd 	bl	80282f0 <tx_tcp>
}
 8028d76:	b009      	add	sp, #36	@ 0x24
 8028d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8028d7c:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 8028d80:	e7b4      	b.n	8028cec <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8028d82:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 8028d86:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028d88:	6898      	ldr	r0, [r3, #8]
 8028d8a:	f7fd f9db 	bl	8026144 <mg_ntohl>
 8028d8e:	4287      	cmp	r7, r0
 8028d90:	d004      	beq.n	8028d9c <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8028d92:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8028d96:	f04f 0b10 	mov.w	fp, #16
 8028d9a:	e7cb      	b.n	8028d34 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 8028d9c:	3701      	adds	r7, #1
 8028d9e:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8028da2:	f04f 0b10 	mov.w	fp, #16
 8028da6:	e7c5      	b.n	8028d34 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 8028da8:	68eb      	ldr	r3, [r5, #12]
 8028daa:	2b00      	cmp	r3, #0
 8028dac:	d0e3      	beq.n	8028d76 <read_conn+0xa2>
  } else if (seq != s->ack) {
 8028dae:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8028db2:	4282      	cmp	r2, r0
 8028db4:	d046      	beq.n	8028e44 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8028db6:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 8028db8:	42aa      	cmp	r2, r5
 8028dba:	d025      	beq.n	8028e08 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8028dbc:	4b83      	ldr	r3, [pc, #524]	@ (8028fcc <read_conn+0x2f8>)
 8028dbe:	681b      	ldr	r3, [r3, #0]
 8028dc0:	2b03      	cmp	r3, #3
 8028dc2:	dc30      	bgt.n	8028e26 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8028dc4:	6863      	ldr	r3, [r4, #4]
 8028dc6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8028dc8:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8028dcc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8028dd0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8028dd4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028dd8:	f7fd f9b4 	bl	8026144 <mg_ntohl>
 8028ddc:	4605      	mov	r5, r0
 8028dde:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028de2:	f7fd f9af 	bl	8026144 <mg_ntohl>
 8028de6:	2300      	movs	r3, #0
 8028de8:	9305      	str	r3, [sp, #20]
 8028dea:	4b77      	ldr	r3, [pc, #476]	@ (8028fc8 <read_conn+0x2f4>)
 8028dec:	9304      	str	r3, [sp, #16]
 8028dee:	9003      	str	r0, [sp, #12]
 8028df0:	9502      	str	r5, [sp, #8]
 8028df2:	f8cd a004 	str.w	sl, [sp, #4]
 8028df6:	f8cd 9000 	str.w	r9, [sp]
 8028dfa:	2310      	movs	r3, #16
 8028dfc:	4632      	mov	r2, r6
 8028dfe:	4641      	mov	r1, r8
 8028e00:	4638      	mov	r0, r7
 8028e02:	f7ff fa75 	bl	80282f0 <tx_tcp>
 8028e06:	e7b6      	b.n	8028d76 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8028e08:	4b70      	ldr	r3, [pc, #448]	@ (8028fcc <read_conn+0x2f8>)
 8028e0a:	681b      	ldr	r3, [r3, #0]
 8028e0c:	2b03      	cmp	r3, #3
 8028e0e:	ddb2      	ble.n	8028d76 <read_conn+0xa2>
 8028e10:	4b6f      	ldr	r3, [pc, #444]	@ (8028fd0 <read_conn+0x2fc>)
 8028e12:	f241 52da 	movw	r2, #5594	@ 0x15da
 8028e16:	496f      	ldr	r1, [pc, #444]	@ (8028fd4 <read_conn+0x300>)
 8028e18:	2004      	movs	r0, #4
 8028e1a:	f7fd fd6d 	bl	80268f8 <mg_log_prefix>
 8028e1e:	486e      	ldr	r0, [pc, #440]	@ (8028fd8 <read_conn+0x304>)
 8028e20:	f7fb fc18 	bl	8024654 <mg_log>
 8028e24:	e7a7      	b.n	8028d76 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8028e26:	4b6a      	ldr	r3, [pc, #424]	@ (8028fd0 <read_conn+0x2fc>)
 8028e28:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 8028e2c:	4969      	ldr	r1, [pc, #420]	@ (8028fd4 <read_conn+0x300>)
 8028e2e:	2004      	movs	r0, #4
 8028e30:	f7fd fd62 	bl	80268f8 <mg_log_prefix>
 8028e34:	462b      	mov	r3, r5
 8028e36:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8028e3a:	4641      	mov	r1, r8
 8028e3c:	4867      	ldr	r0, [pc, #412]	@ (8028fdc <read_conn+0x308>)
 8028e3e:	f7fb fc09 	bl	8024654 <mg_log>
 8028e42:	e7bf      	b.n	8028dc4 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 8028e44:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8028e48:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8028e4c:	1a52      	subs	r2, r2, r1
 8028e4e:	4293      	cmp	r3, r2
 8028e50:	d905      	bls.n	8028e5e <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8028e52:	4419      	add	r1, r3
 8028e54:	4648      	mov	r0, r9
 8028e56:	f7fe fb8b 	bl	8027570 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 8028e5a:	2800      	cmp	r0, #0
 8028e5c:	d05c      	beq.n	8028f18 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 8028e5e:	f8d9 0000 	ldr.w	r0, [r9]
 8028e62:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8028e66:	68ea      	ldr	r2, [r5, #12]
 8028e68:	68a9      	ldr	r1, [r5, #8]
 8028e6a:	4418      	add	r0, r3
 8028e6c:	f005 fb7c 	bl	802e568 <memcpy>
    io->len += pkt->pay.len;
 8028e70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8028e74:	68ea      	ldr	r2, [r5, #12]
 8028e76:	4413      	add	r3, r2
 8028e78:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8028e7c:	4b53      	ldr	r3, [pc, #332]	@ (8028fcc <read_conn+0x2f8>)
 8028e7e:	681b      	ldr	r3, [r3, #0]
 8028e80:	2b03      	cmp	r3, #3
 8028e82:	dc4e      	bgt.n	8028f22 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8028e84:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028e86:	6858      	ldr	r0, [r3, #4]
 8028e88:	f7fd f95c 	bl	8026144 <mg_ntohl>
 8028e8c:	68eb      	ldr	r3, [r5, #12]
 8028e8e:	4418      	add	r0, r3
 8028e90:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 8028e94:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8028e98:	68ea      	ldr	r2, [r5, #12]
 8028e9a:	4413      	add	r3, r2
 8028e9c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8028ea0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8028ea4:	4293      	cmp	r3, r2
 8028ea6:	d95e      	bls.n	8028f66 <read_conn+0x292>
 8028ea8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8028eac:	4298      	cmp	r0, r3
 8028eae:	d05a      	beq.n	8028f66 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8028eb0:	4b46      	ldr	r3, [pc, #280]	@ (8028fcc <read_conn+0x2f8>)
 8028eb2:	681b      	ldr	r3, [r3, #0]
 8028eb4:	2b03      	cmp	r3, #3
 8028eb6:	dc48      	bgt.n	8028f4a <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8028eb8:	6863      	ldr	r3, [r4, #4]
 8028eba:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 8028ebe:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8028ec2:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8028ec6:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8028eca:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028ece:	f7fd f939 	bl	8026144 <mg_ntohl>
 8028ed2:	9007      	str	r0, [sp, #28]
 8028ed4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028ed8:	f7fd f934 	bl	8026144 <mg_ntohl>
 8028edc:	2700      	movs	r7, #0
 8028ede:	9705      	str	r7, [sp, #20]
 8028ee0:	9704      	str	r7, [sp, #16]
 8028ee2:	9003      	str	r0, [sp, #12]
 8028ee4:	9b07      	ldr	r3, [sp, #28]
 8028ee6:	9302      	str	r3, [sp, #8]
 8028ee8:	f8cd b004 	str.w	fp, [sp, #4]
 8028eec:	f8cd a000 	str.w	sl, [sp]
 8028ef0:	2310      	movs	r3, #16
 8028ef2:	4632      	mov	r2, r6
 8028ef4:	4641      	mov	r1, r8
 8028ef6:	4648      	mov	r0, r9
 8028ef8:	f7ff f9fa 	bl	80282f0 <tx_tcp>
      s->unacked = 0;
 8028efc:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 8028f00:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028f04:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8028f08:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028f0c:	b37b      	cbz	r3, 8028f6e <read_conn+0x29a>
 8028f0e:	4639      	mov	r1, r7
 8028f10:	4620      	mov	r0, r4
 8028f12:	f7ff fac9 	bl	80284a8 <settmout>
 8028f16:	e02a      	b.n	8028f6e <read_conn+0x29a>
    mg_error(c, "oom");
 8028f18:	4931      	ldr	r1, [pc, #196]	@ (8028fe0 <read_conn+0x30c>)
 8028f1a:	4620      	mov	r0, r4
 8028f1c:	f7fd fdd4 	bl	8026ac8 <mg_error>
 8028f20:	e729      	b.n	8028d76 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8028f22:	4b2b      	ldr	r3, [pc, #172]	@ (8028fd0 <read_conn+0x2fc>)
 8028f24:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 8028f28:	492a      	ldr	r1, [pc, #168]	@ (8028fd4 <read_conn+0x300>)
 8028f2a:	2004      	movs	r0, #4
 8028f2c:	f7fd fce4 	bl	80268f8 <mg_log_prefix>
 8028f30:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8028f32:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028f34:	6858      	ldr	r0, [r3, #4]
 8028f36:	f7fd f905 	bl	8026144 <mg_ntohl>
 8028f3a:	4602      	mov	r2, r0
 8028f3c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028f40:	4639      	mov	r1, r7
 8028f42:	4828      	ldr	r0, [pc, #160]	@ (8028fe4 <read_conn+0x310>)
 8028f44:	f7fb fb86 	bl	8024654 <mg_log>
 8028f48:	e79c      	b.n	8028e84 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8028f4a:	4b21      	ldr	r3, [pc, #132]	@ (8028fd0 <read_conn+0x2fc>)
 8028f4c:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 8028f50:	4920      	ldr	r1, [pc, #128]	@ (8028fd4 <read_conn+0x300>)
 8028f52:	2004      	movs	r0, #4
 8028f54:	f7fd fcd0 	bl	80268f8 <mg_log_prefix>
 8028f58:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 8028f5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028f5e:	4822      	ldr	r0, [pc, #136]	@ (8028fe8 <read_conn+0x314>)
 8028f60:	f7fb fb78 	bl	8024654 <mg_log>
 8028f64:	e7a8      	b.n	8028eb8 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8028f66:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028f6a:	2b01      	cmp	r3, #1
 8028f6c:	d11b      	bne.n	8028fa6 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 8028f6e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028f72:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8028f76:	2ac0      	cmp	r2, #192	@ 0xc0
 8028f78:	f43f aefd 	beq.w	8028d76 <read_conn+0xa2>
    } else if (c->is_tls) {
 8028f7c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028f80:	d01b      	beq.n	8028fba <read_conn+0x2e6>
      io = &c->recv;
 8028f82:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 8028f86:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8028f88:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8028f8a:	1a5b      	subs	r3, r3, r1
 8028f8c:	68ea      	ldr	r2, [r5, #12]
 8028f8e:	4293      	cmp	r3, r2
 8028f90:	d204      	bcs.n	8028f9c <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8028f92:	4411      	add	r1, r2
 8028f94:	4630      	mov	r0, r6
 8028f96:	f7fe faeb 	bl	8027570 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 8028f9a:	b148      	cbz	r0, 8028fb0 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 8028f9c:	4631      	mov	r1, r6
 8028f9e:	4620      	mov	r0, r4
 8028fa0:	f7fd fdca 	bl	8026b38 <handle_tls_recv>
 8028fa4:	e6e7      	b.n	8028d76 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8028fa6:	2101      	movs	r1, #1
 8028fa8:	4620      	mov	r0, r4
 8028faa:	f7ff fa7d 	bl	80284a8 <settmout>
 8028fae:	e7de      	b.n	8028f6e <read_conn+0x29a>
        mg_error(c, "oom");
 8028fb0:	490b      	ldr	r1, [pc, #44]	@ (8028fe0 <read_conn+0x30c>)
 8028fb2:	4620      	mov	r0, r4
 8028fb4:	f7fd fd88 	bl	8026ac8 <mg_error>
 8028fb8:	e6dd      	b.n	8028d76 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8028fba:	f105 020c 	add.w	r2, r5, #12
 8028fbe:	2107      	movs	r1, #7
 8028fc0:	4620      	mov	r0, r4
 8028fc2:	f7fa f8fe 	bl	80231c2 <mg_call>
}
 8028fc6:	e6d6      	b.n	8028d76 <read_conn+0xa2>
 8028fc8:	08037490 	.word	0x08037490
 8028fcc:	2000012c 	.word	0x2000012c
 8028fd0:	0803be50 	.word	0x0803be50
 8028fd4:	0803b564 	.word	0x0803b564
 8028fd8:	0803badc 	.word	0x0803badc
 8028fdc:	0803baf4 	.word	0x0803baf4
 8028fe0:	0803b864 	.word	0x0803b864
 8028fe4:	0803bb0c 	.word	0x0803bb0c
 8028fe8:	0803bb20 	.word	0x0803bb20

08028fec <accept_conn>:
                                         struct pkt *pkt) {
 8028fec:	b570      	push	{r4, r5, r6, lr}
 8028fee:	4605      	mov	r5, r0
 8028ff0:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8028ff2:	6840      	ldr	r0, [r0, #4]
 8028ff4:	f7fa fe58 	bl	8023ca8 <mg_alloc_conn>
  if (c == NULL) {
 8028ff8:	4604      	mov	r4, r0
 8028ffa:	2800      	cmp	r0, #0
 8028ffc:	d058      	beq.n	80290b0 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8028ffe:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8029000:	6898      	ldr	r0, [r3, #8]
 8029002:	f7fd f89f 	bl	8026144 <mg_ntohl>
 8029006:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 802900a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 802900c:	6858      	ldr	r0, [r3, #4]
 802900e:	f7fd f899 	bl	8026144 <mg_ntohl>
 8029012:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8029016:	6933      	ldr	r3, [r6, #16]
 8029018:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802901c:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8029020:	895b      	ldrh	r3, [r3, #10]
 8029022:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8029026:	2100      	movs	r1, #0
 8029028:	4620      	mov	r0, r4
 802902a:	f7ff fa3d 	bl	80284a8 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802902e:	69f3      	ldr	r3, [r6, #28]
 8029030:	68db      	ldr	r3, [r3, #12]
 8029032:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 8029034:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8029036:	881b      	ldrh	r3, [r3, #0]
 8029038:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 802903a:	4b2c      	ldr	r3, [pc, #176]	@ (80290ec <accept_conn+0x100>)
 802903c:	681b      	ldr	r3, [r3, #0]
 802903e:	2b02      	cmp	r3, #2
 8029040:	dc45      	bgt.n	80290ce <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8029042:	686b      	ldr	r3, [r5, #4]
 8029044:	681b      	ldr	r3, [r3, #0]
 8029046:	6023      	str	r3, [r4, #0]
 8029048:	686b      	ldr	r3, [r5, #4]
 802904a:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 802904c:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029050:	f043 0304 	orr.w	r3, r3, #4
 8029054:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8029058:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 802905c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8029060:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 8029064:	f363 02c3 	bfi	r2, r3, #3, #1
 8029068:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 802906c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8029070:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 8029074:	f104 0608 	add.w	r6, r4, #8
 8029078:	f105 0c08 	add.w	ip, r5, #8
 802907c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8029080:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8029082:	f8dc 3000 	ldr.w	r3, [ip]
 8029086:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 8029088:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 802908c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 8029090:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8029092:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8029094:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8029096:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 8029098:	2200      	movs	r2, #0
 802909a:	2101      	movs	r1, #1
 802909c:	4620      	mov	r0, r4
 802909e:	f7fa f890 	bl	80231c2 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 80290a2:	2200      	movs	r2, #0
 80290a4:	2105      	movs	r1, #5
 80290a6:	4620      	mov	r0, r4
 80290a8:	f7fa f88b 	bl	80231c2 <mg_call>
}
 80290ac:	4620      	mov	r0, r4
 80290ae:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 80290b0:	4b0e      	ldr	r3, [pc, #56]	@ (80290ec <accept_conn+0x100>)
 80290b2:	681b      	ldr	r3, [r3, #0]
 80290b4:	2b00      	cmp	r3, #0
 80290b6:	ddf9      	ble.n	80290ac <accept_conn+0xc0>
 80290b8:	4b0d      	ldr	r3, [pc, #52]	@ (80290f0 <accept_conn+0x104>)
 80290ba:	f241 5268 	movw	r2, #5480	@ 0x1568
 80290be:	490d      	ldr	r1, [pc, #52]	@ (80290f4 <accept_conn+0x108>)
 80290c0:	2001      	movs	r0, #1
 80290c2:	f7fd fc19 	bl	80268f8 <mg_log_prefix>
 80290c6:	480c      	ldr	r0, [pc, #48]	@ (80290f8 <accept_conn+0x10c>)
 80290c8:	f7fb fac4 	bl	8024654 <mg_log>
    return NULL;
 80290cc:	e7ee      	b.n	80290ac <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 80290ce:	4b08      	ldr	r3, [pc, #32]	@ (80290f0 <accept_conn+0x104>)
 80290d0:	f241 5271 	movw	r2, #5489	@ 0x1571
 80290d4:	4907      	ldr	r1, [pc, #28]	@ (80290f4 <accept_conn+0x108>)
 80290d6:	2003      	movs	r0, #3
 80290d8:	f7fd fc0e 	bl	80268f8 <mg_log_prefix>
 80290dc:	f104 031c 	add.w	r3, r4, #28
 80290e0:	4a06      	ldr	r2, [pc, #24]	@ (80290fc <accept_conn+0x110>)
 80290e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80290e4:	4806      	ldr	r0, [pc, #24]	@ (8029100 <accept_conn+0x114>)
 80290e6:	f7fb fab5 	bl	8024654 <mg_log>
 80290ea:	e7aa      	b.n	8029042 <accept_conn+0x56>
 80290ec:	2000012c 	.word	0x2000012c
 80290f0:	0803be44 	.word	0x0803be44
 80290f4:	0803b564 	.word	0x0803b564
 80290f8:	0803bb8c 	.word	0x0803bb8c
 80290fc:	080267ad 	.word	0x080267ad
 8029100:	0803bb30 	.word	0x0803bb30

08029104 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8029104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029108:	b083      	sub	sp, #12
 802910a:	4606      	mov	r6, r0
 802910c:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802910e:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 8029110:	2200      	movs	r2, #0
 8029112:	4638      	mov	r0, r7
 8029114:	f7f9 fee9 	bl	8022eea <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8029118:	4605      	mov	r5, r0
 802911a:	b380      	cbz	r0, 802917e <rx_tcp+0x7a>
 802911c:	f100 08b0 	add.w	r8, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8029120:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029124:	f013 0f20 	tst.w	r3, #32
 8029128:	d02b      	beq.n	8029182 <rx_tcp+0x7e>
 802912a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802912c:	7b5a      	ldrb	r2, [r3, #13]
 802912e:	2a12      	cmp	r2, #18
 8029130:	d126      	bne.n	8029180 <rx_tcp+0x7c>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8029132:	6898      	ldr	r0, [r3, #8]
 8029134:	f7fd f806 	bl	8026144 <mg_ntohl>
 8029138:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 802913c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802913e:	6858      	ldr	r0, [r3, #4]
 8029140:	f7fd f800 	bl	8026144 <mg_ntohl>
 8029144:	3001      	adds	r0, #1
 8029146:	f8c8 0004 	str.w	r0, [r8, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 802914a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802914c:	689b      	ldr	r3, [r3, #8]
 802914e:	2700      	movs	r7, #0
 8029150:	9701      	str	r7, [sp, #4]
 8029152:	9700      	str	r7, [sp, #0]
 8029154:	2210      	movs	r2, #16
 8029156:	4621      	mov	r1, r4
 8029158:	4630      	mov	r0, r6
 802915a:	f7ff f975 	bl	8028448 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 802915e:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8029162:	f367 1345 	bfi	r3, r7, #5, #1
 8029166:	f885 30ac 	strb.w	r3, [r5, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 802916a:	4639      	mov	r1, r7
 802916c:	4628      	mov	r0, r5
 802916e:	f7ff f99b 	bl	80284a8 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8029172:	463a      	mov	r2, r7
 8029174:	2104      	movs	r1, #4
 8029176:	4628      	mov	r0, r5
 8029178:	f7fa f823 	bl	80231c2 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 802917c:	e01b      	b.n	80291b6 <rx_tcp+0xb2>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 802917e:	4680      	mov	r8, r0
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8029180:	b385      	cbz	r5, 80291e4 <rx_tcp+0xe0>
 8029182:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8029186:	f013 0f20 	tst.w	r3, #32
 802918a:	d004      	beq.n	8029196 <rx_tcp+0x92>
 802918c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802918e:	7b5a      	ldrb	r2, [r3, #13]
 8029190:	2a10      	cmp	r2, #16
 8029192:	d113      	bne.n	80291bc <rx_tcp+0xb8>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8029194:	b335      	cbz	r5, 80291e4 <rx_tcp+0xe0>
 8029196:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8029198:	7b5b      	ldrb	r3, [r3, #13]
 802919a:	f013 0f04 	tst.w	r3, #4
 802919e:	d117      	bne.n	80291d0 <rx_tcp+0xcc>
  } else if (c != NULL) {
 80291a0:	b305      	cbz	r5, 80291e4 <rx_tcp+0xe0>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 80291a2:	2300      	movs	r3, #0
 80291a4:	f888 301f 	strb.w	r3, [r8, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 80291a8:	f898 301e 	ldrb.w	r3, [r8, #30]
 80291ac:	b1ab      	cbz	r3, 80291da <rx_tcp+0xd6>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 80291ae:	4621      	mov	r1, r4
 80291b0:	4628      	mov	r0, r5
 80291b2:	f7ff fd8f 	bl	8028cd4 <read_conn>
}
 80291b6:	b003      	add	sp, #12
 80291b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 80291bc:	689b      	ldr	r3, [r3, #8]
 80291be:	2200      	movs	r2, #0
 80291c0:	9201      	str	r2, [sp, #4]
 80291c2:	9200      	str	r2, [sp, #0]
 80291c4:	2214      	movs	r2, #20
 80291c6:	4621      	mov	r1, r4
 80291c8:	4630      	mov	r0, r6
 80291ca:	f7ff f93d 	bl	8028448 <tx_tcp_pkt>
 80291ce:	e7f2      	b.n	80291b6 <rx_tcp+0xb2>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 80291d0:	4934      	ldr	r1, [pc, #208]	@ (80292a4 <rx_tcp+0x1a0>)
 80291d2:	4628      	mov	r0, r5
 80291d4:	f7fd fc78 	bl	8026ac8 <mg_error>
 80291d8:	e7ed      	b.n	80291b6 <rx_tcp+0xb2>
      settmout(c,
 80291da:	2100      	movs	r1, #0
 80291dc:	4628      	mov	r0, r5
 80291de:	f7ff f963 	bl	80284a8 <settmout>
 80291e2:	e7e4      	b.n	80291ae <rx_tcp+0xaa>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 80291e4:	2201      	movs	r2, #1
 80291e6:	4621      	mov	r1, r4
 80291e8:	4638      	mov	r0, r7
 80291ea:	f7f9 fe7e 	bl	8022eea <getpeer>
 80291ee:	4607      	mov	r7, r0
 80291f0:	b168      	cbz	r0, 802920e <rx_tcp+0x10a>
  } else if (pkt->tcp->flags & TH_RST) {
 80291f2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80291f4:	7b6b      	ldrb	r3, [r5, #13]
 80291f6:	f013 0f04 	tst.w	r3, #4
 80291fa:	d013      	beq.n	8029224 <rx_tcp+0x120>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 80291fc:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029200:	f013 0f04 	tst.w	r3, #4
 8029204:	d0d7      	beq.n	80291b6 <rx_tcp+0xb2>
 8029206:	4927      	ldr	r1, [pc, #156]	@ (80292a4 <rx_tcp+0x1a0>)
 8029208:	f7fd fc5e 	bl	8026ac8 <mg_error>
 802920c:	e7d3      	b.n	80291b6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802920e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8029210:	689b      	ldr	r3, [r3, #8]
 8029212:	2200      	movs	r2, #0
 8029214:	9201      	str	r2, [sp, #4]
 8029216:	9200      	str	r2, [sp, #0]
 8029218:	2214      	movs	r2, #20
 802921a:	4621      	mov	r1, r4
 802921c:	4630      	mov	r0, r6
 802921e:	f7ff f913 	bl	8028448 <tx_tcp_pkt>
 8029222:	e7c8      	b.n	80291b6 <rx_tcp+0xb2>
  } else if (pkt->tcp->flags & TH_SYN) {
 8029224:	f013 0f02 	tst.w	r3, #2
 8029228:	d11d      	bne.n	8029266 <rx_tcp+0x162>
  } else if (pkt->tcp->flags & TH_FIN) {
 802922a:	f013 0f01 	tst.w	r3, #1
 802922e:	d129      	bne.n	8029284 <rx_tcp+0x180>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8029230:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8029234:	4648      	mov	r0, r9
 8029236:	f7fc ff85 	bl	8026144 <mg_ntohl>
 802923a:	4680      	mov	r8, r0
 802923c:	8828      	ldrh	r0, [r5, #0]
 802923e:	f7fd f819 	bl	8026274 <mg_ntohs>
 8029242:	1c43      	adds	r3, r0, #1
 8029244:	4598      	cmp	r8, r3
 8029246:	d027      	beq.n	8029298 <rx_tcp+0x194>
  } else if (!c->is_accepted) {  // no peer
 8029248:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 802924c:	f013 0f04 	tst.w	r3, #4
 8029250:	d1b1      	bne.n	80291b6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8029252:	2300      	movs	r3, #0
 8029254:	9301      	str	r3, [sp, #4]
 8029256:	9300      	str	r3, [sp, #0]
 8029258:	464b      	mov	r3, r9
 802925a:	2214      	movs	r2, #20
 802925c:	4621      	mov	r1, r4
 802925e:	4630      	mov	r0, r6
 8029260:	f7ff f8f2 	bl	8028448 <tx_tcp_pkt>
}
 8029264:	e7a7      	b.n	80291b6 <rx_tcp+0xb2>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 8029266:	8828      	ldrh	r0, [r5, #0]
 8029268:	f7fd f804 	bl	8026274 <mg_ntohs>
 802926c:	f7fc ff6a 	bl	8026144 <mg_ntohl>
 8029270:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8029272:	2200      	movs	r2, #0
 8029274:	9201      	str	r2, [sp, #4]
 8029276:	9200      	str	r2, [sp, #0]
 8029278:	2212      	movs	r2, #18
 802927a:	4621      	mov	r1, r4
 802927c:	4630      	mov	r0, r6
 802927e:	f7ff f8e3 	bl	8028448 <tx_tcp_pkt>
 8029282:	e798      	b.n	80291b6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8029284:	68ab      	ldr	r3, [r5, #8]
 8029286:	2200      	movs	r2, #0
 8029288:	9201      	str	r2, [sp, #4]
 802928a:	9200      	str	r2, [sp, #0]
 802928c:	2211      	movs	r2, #17
 802928e:	4621      	mov	r1, r4
 8029290:	4630      	mov	r0, r6
 8029292:	f7ff f8d9 	bl	8028448 <tx_tcp_pkt>
 8029296:	e78e      	b.n	80291b6 <rx_tcp+0xb2>
    accept_conn(c, pkt);
 8029298:	4621      	mov	r1, r4
 802929a:	4638      	mov	r0, r7
 802929c:	f7ff fea6 	bl	8028fec <accept_conn>
 80292a0:	e789      	b.n	80291b6 <rx_tcp+0xb2>
 80292a2:	bf00      	nop
 80292a4:	0803bb40 	.word	0x0803bb40

080292a8 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 80292a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80292ac:	b082      	sub	sp, #8
 80292ae:	4604      	mov	r4, r0
 80292b0:	4688      	mov	r8, r1
 80292b2:	4617      	mov	r7, r2
 80292b4:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 80292b6:	6819      	ldr	r1, [r3, #0]
 80292b8:	2900      	cmp	r1, #0
 80292ba:	d037      	beq.n	802932c <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 80292bc:	685b      	ldr	r3, [r3, #4]
 80292be:	2b00      	cmp	r3, #0
 80292c0:	d038      	beq.n	8029334 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 80292c2:	686b      	ldr	r3, [r5, #4]
 80292c4:	2b00      	cmp	r3, #0
 80292c6:	d040      	beq.n	802934a <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 80292c8:	2118      	movs	r1, #24
 80292ca:	2001      	movs	r0, #1
 80292cc:	f7f9 fde8 	bl	8022ea0 <mg_calloc>
 80292d0:	4606      	mov	r6, r0
 80292d2:	2800      	cmp	r0, #0
 80292d4:	d03e      	beq.n	8029354 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 80292d6:	6863      	ldr	r3, [r4, #4]
 80292d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80292da:	2b00      	cmp	r3, #0
 80292dc:	d03f      	beq.n	802935e <mg_sendnsreq+0xb6>
 80292de:	8a1b      	ldrh	r3, [r3, #16]
 80292e0:	3301      	adds	r3, #1
 80292e2:	b29b      	uxth	r3, r3
 80292e4:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 80292e6:	6863      	ldr	r3, [r4, #4]
 80292e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80292ea:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 80292ec:	6863      	ldr	r3, [r4, #4]
 80292ee:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 80292f0:	f7fd fafc 	bl	80268ec <mg_millis>
 80292f4:	19c0      	adds	r0, r0, r7
 80292f6:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 80292fa:	60b0      	str	r0, [r6, #8]
 80292fc:	60f1      	str	r1, [r6, #12]
    d->c = c;
 80292fe:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 8029300:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029304:	f043 0308 	orr.w	r3, r3, #8
 8029308:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 802930c:	4b21      	ldr	r3, [pc, #132]	@ (8029394 <mg_sendnsreq+0xec>)
 802930e:	681b      	ldr	r3, [r3, #0]
 8029310:	2b03      	cmp	r3, #3
 8029312:	dc26      	bgt.n	8029362 <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8029314:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8029318:	8a32      	ldrh	r2, [r6, #16]
 802931a:	4641      	mov	r1, r8
 802931c:	6868      	ldr	r0, [r5, #4]
 802931e:	f7fe fbd5 	bl	8027acc <mg_dns_send>
 8029322:	2800      	cmp	r0, #0
 8029324:	d031      	beq.n	802938a <mg_sendnsreq+0xe2>
}
 8029326:	b002      	add	sp, #8
 8029328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 802932c:	491a      	ldr	r1, [pc, #104]	@ (8029398 <mg_sendnsreq+0xf0>)
 802932e:	f7fd fbcb 	bl	8026ac8 <mg_error>
 8029332:	e7c6      	b.n	80292c2 <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8029334:	461a      	mov	r2, r3
 8029336:	6840      	ldr	r0, [r0, #4]
 8029338:	f000 f866 	bl	8029408 <mg_connect>
 802933c:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 802933e:	2800      	cmp	r0, #0
 8029340:	d0bf      	beq.n	80292c2 <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 8029342:	4b16      	ldr	r3, [pc, #88]	@ (802939c <mg_sendnsreq+0xf4>)
 8029344:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8029348:	e7bb      	b.n	80292c2 <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 802934a:	4915      	ldr	r1, [pc, #84]	@ (80293a0 <mg_sendnsreq+0xf8>)
 802934c:	4620      	mov	r0, r4
 802934e:	f7fd fbbb 	bl	8026ac8 <mg_error>
 8029352:	e7e8      	b.n	8029326 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 8029354:	4913      	ldr	r1, [pc, #76]	@ (80293a4 <mg_sendnsreq+0xfc>)
 8029356:	4620      	mov	r0, r4
 8029358:	f7fd fbb6 	bl	8026ac8 <mg_error>
 802935c:	e7e3      	b.n	8029326 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 802935e:	2301      	movs	r3, #1
 8029360:	e7c0      	b.n	80292e4 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8029362:	4b11      	ldr	r3, [pc, #68]	@ (80293a8 <mg_sendnsreq+0x100>)
 8029364:	f240 521e 	movw	r2, #1310	@ 0x51e
 8029368:	4910      	ldr	r1, [pc, #64]	@ (80293ac <mg_sendnsreq+0x104>)
 802936a:	2004      	movs	r0, #4
 802936c:	f7fd fac4 	bl	80268f8 <mg_log_prefix>
 8029370:	8a33      	ldrh	r3, [r6, #16]
 8029372:	9301      	str	r3, [sp, #4]
 8029374:	682b      	ldr	r3, [r5, #0]
 8029376:	9300      	str	r3, [sp, #0]
 8029378:	f8d8 3000 	ldr.w	r3, [r8]
 802937c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8029380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029382:	480b      	ldr	r0, [pc, #44]	@ (80293b0 <mg_sendnsreq+0x108>)
 8029384:	f7fb f966 	bl	8024654 <mg_log>
 8029388:	e7c4      	b.n	8029314 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 802938a:	490a      	ldr	r1, [pc, #40]	@ (80293b4 <mg_sendnsreq+0x10c>)
 802938c:	6868      	ldr	r0, [r5, #4]
 802938e:	f7fd fb9b 	bl	8026ac8 <mg_error>
}
 8029392:	e7c8      	b.n	8029326 <mg_sendnsreq+0x7e>
 8029394:	2000012c 	.word	0x2000012c
 8029398:	0803bb4c 	.word	0x0803bb4c
 802939c:	08028845 	.word	0x08028845
 80293a0:	0803bb78 	.word	0x0803bb78
 80293a4:	0803bb84 	.word	0x0803bb84
 80293a8:	0803bfcc 	.word	0x0803bfcc
 80293ac:	0803b564 	.word	0x0803b564
 80293b0:	0803bb90 	.word	0x0803bb90
 80293b4:	0803bbb4 	.word	0x0803bbb4

080293b8 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 80293b8:	b570      	push	{r4, r5, r6, lr}
 80293ba:	b084      	sub	sp, #16
 80293bc:	4604      	mov	r4, r0
 80293be:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 80293c0:	ad02      	add	r5, sp, #8
 80293c2:	4628      	mov	r0, r5
 80293c4:	f7fc fde8 	bl	8025f98 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 80293c8:	4630      	mov	r0, r6
 80293ca:	f7fc fe03 	bl	8025fd4 <mg_url_port>
 80293ce:	f7fc ff51 	bl	8026274 <mg_ntohs>
 80293d2:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 80293d4:	f104 021c 	add.w	r2, r4, #28
 80293d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80293dc:	f7fc fee6 	bl	80261ac <mg_aton>
 80293e0:	b960      	cbnz	r0, 80293fc <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 80293e2:	6862      	ldr	r2, [r4, #4]
 80293e4:	7e11      	ldrb	r1, [r2, #24]
 80293e6:	b169      	cbz	r1, 8029404 <mg_resolve+0x4c>
 80293e8:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 80293ec:	6952      	ldr	r2, [r2, #20]
 80293ee:	9100      	str	r1, [sp, #0]
 80293f0:	a902      	add	r1, sp, #8
 80293f2:	4620      	mov	r0, r4
 80293f4:	f7ff ff58 	bl	80292a8 <mg_sendnsreq>
}
 80293f8:	b004      	add	sp, #16
 80293fa:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 80293fc:	4620      	mov	r0, r4
 80293fe:	f7ff f951 	bl	80286a4 <mg_connect_resolved>
 8029402:	e7f9      	b.n	80293f8 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8029404:	1d13      	adds	r3, r2, #4
 8029406:	e7f1      	b.n	80293ec <mg_resolve+0x34>

08029408 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 8029408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 802940c:	b129      	cbz	r1, 802941a <mg_connect+0x12>
 802940e:	4680      	mov	r8, r0
 8029410:	4617      	mov	r7, r2
 8029412:	461e      	mov	r6, r3
 8029414:	460d      	mov	r5, r1
 8029416:	780b      	ldrb	r3, [r1, #0]
 8029418:	b99b      	cbnz	r3, 8029442 <mg_connect+0x3a>
    MG_ERROR(("null url"));
 802941a:	4b30      	ldr	r3, [pc, #192]	@ (80294dc <mg_connect+0xd4>)
 802941c:	681b      	ldr	r3, [r3, #0]
 802941e:	2b00      	cmp	r3, #0
 8029420:	dc03      	bgt.n	802942a <mg_connect+0x22>
  struct mg_connection *c = NULL;
 8029422:	2400      	movs	r4, #0
}
 8029424:	4620      	mov	r0, r4
 8029426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 802942a:	4b2d      	ldr	r3, [pc, #180]	@ (80294e0 <mg_connect+0xd8>)
 802942c:	f241 22be 	movw	r2, #4798	@ 0x12be
 8029430:	492c      	ldr	r1, [pc, #176]	@ (80294e4 <mg_connect+0xdc>)
 8029432:	2001      	movs	r0, #1
 8029434:	f7fd fa60 	bl	80268f8 <mg_log_prefix>
 8029438:	482b      	ldr	r0, [pc, #172]	@ (80294e8 <mg_connect+0xe0>)
 802943a:	f7fb f90b 	bl	8024654 <mg_log>
  struct mg_connection *c = NULL;
 802943e:	2400      	movs	r4, #0
 8029440:	e7f0      	b.n	8029424 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8029442:	f7fa fc31 	bl	8023ca8 <mg_alloc_conn>
 8029446:	4604      	mov	r4, r0
 8029448:	b358      	cbz	r0, 80294a2 <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 802944a:	f8d8 3000 	ldr.w	r3, [r8]
 802944e:	6003      	str	r3, [r0, #0]
 8029450:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8029454:	2204      	movs	r2, #4
 8029456:	4925      	ldr	r1, [pc, #148]	@ (80294ec <mg_connect+0xe4>)
 8029458:	4628      	mov	r0, r5
 802945a:	f003 fe7e 	bl	802d15a <strncmp>
 802945e:	fab0 f080 	clz	r0, r0
 8029462:	0940      	lsrs	r0, r0, #5
 8029464:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029468:	f360 0300 	bfi	r3, r0, #0, #1
 802946c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8029470:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029474:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 8029476:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 8029478:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802947c:	f043 0302 	orr.w	r3, r3, #2
 8029480:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 8029484:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8029486:	4b15      	ldr	r3, [pc, #84]	@ (80294dc <mg_connect+0xd4>)
 8029488:	681b      	ldr	r3, [r3, #0]
 802948a:	2b02      	cmp	r3, #2
 802948c:	dc18      	bgt.n	80294c0 <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 802948e:	462a      	mov	r2, r5
 8029490:	2101      	movs	r1, #1
 8029492:	4620      	mov	r0, r4
 8029494:	f7f9 fe95 	bl	80231c2 <mg_call>
    mg_resolve(c, url);
 8029498:	4629      	mov	r1, r5
 802949a:	4620      	mov	r0, r4
 802949c:	f7ff ff8c 	bl	80293b8 <mg_resolve>
 80294a0:	e7c0      	b.n	8029424 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 80294a2:	4b0e      	ldr	r3, [pc, #56]	@ (80294dc <mg_connect+0xd4>)
 80294a4:	681b      	ldr	r3, [r3, #0]
 80294a6:	2b00      	cmp	r3, #0
 80294a8:	ddbc      	ble.n	8029424 <mg_connect+0x1c>
 80294aa:	4b0d      	ldr	r3, [pc, #52]	@ (80294e0 <mg_connect+0xd8>)
 80294ac:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 80294b0:	490c      	ldr	r1, [pc, #48]	@ (80294e4 <mg_connect+0xdc>)
 80294b2:	2001      	movs	r0, #1
 80294b4:	f7fd fa20 	bl	80268f8 <mg_log_prefix>
 80294b8:	480d      	ldr	r0, [pc, #52]	@ (80294f0 <mg_connect+0xe8>)
 80294ba:	f7fb f8cb 	bl	8024654 <mg_log>
 80294be:	e7b1      	b.n	8029424 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 80294c0:	4b07      	ldr	r3, [pc, #28]	@ (80294e0 <mg_connect+0xd8>)
 80294c2:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 80294c6:	4907      	ldr	r1, [pc, #28]	@ (80294e4 <mg_connect+0xdc>)
 80294c8:	2003      	movs	r0, #3
 80294ca:	f7fd fa15 	bl	80268f8 <mg_log_prefix>
 80294ce:	462b      	mov	r3, r5
 80294d0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80294d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80294d4:	4807      	ldr	r0, [pc, #28]	@ (80294f4 <mg_connect+0xec>)
 80294d6:	f7fb f8bd 	bl	8024654 <mg_log>
 80294da:	e7d8      	b.n	802948e <mg_connect+0x86>
 80294dc:	2000012c 	.word	0x2000012c
 80294e0:	0803bf40 	.word	0x0803bf40
 80294e4:	0803b564 	.word	0x0803b564
 80294e8:	0803bbc0 	.word	0x0803bbc0
 80294ec:	0803b898 	.word	0x0803b898
 80294f0:	0803bb8c 	.word	0x0803bb8c
 80294f4:	0803b5c0 	.word	0x0803b5c0

080294f8 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 80294f8:	b530      	push	{r4, r5, lr}
 80294fa:	b091      	sub	sp, #68	@ 0x44
 80294fc:	4614      	mov	r4, r2
 80294fe:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8029500:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029502:	f7ff ff81 	bl	8029408 <mg_connect>
  if (c != NULL) {
 8029506:	4605      	mov	r5, r0
 8029508:	b160      	cbz	r0, 8029524 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 802950a:	2240      	movs	r2, #64	@ 0x40
 802950c:	2100      	movs	r1, #0
 802950e:	4668      	mov	r0, sp
 8029510:	f003 fdee 	bl	802d0f0 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8029514:	b14c      	cbz	r4, 802952a <mg_mqtt_connect+0x32>
 8029516:	4621      	mov	r1, r4
 8029518:	4628      	mov	r0, r5
 802951a:	f7fe fbfd 	bl	8027d18 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 802951e:	4b04      	ldr	r3, [pc, #16]	@ (8029530 <mg_mqtt_connect+0x38>)
 8029520:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 8029524:	4628      	mov	r0, r5
 8029526:	b011      	add	sp, #68	@ 0x44
 8029528:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 802952a:	466c      	mov	r4, sp
 802952c:	e7f3      	b.n	8029516 <mg_mqtt_connect+0x1e>
 802952e:	bf00      	nop
 8029530:	080280f1 	.word	0x080280f1

08029534 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8029534:	b538      	push	{r3, r4, r5, lr}
 8029536:	4605      	mov	r5, r0
 8029538:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 802953a:	680b      	ldr	r3, [r1, #0]
 802953c:	b90b      	cbnz	r3, 8029542 <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 802953e:	888b      	ldrh	r3, [r1, #4]
 8029540:	b1a3      	cbz	r3, 802956c <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8029542:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8029544:	681b      	ldr	r3, [r3, #0]
 8029546:	b34b      	cbz	r3, 802959c <mg_tcpip_init+0x68>
 8029548:	4620      	mov	r0, r4
 802954a:	4798      	blx	r3
 802954c:	bb30      	cbnz	r0, 802959c <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 802954e:	4b3b      	ldr	r3, [pc, #236]	@ (802963c <mg_tcpip_init+0x108>)
 8029550:	681b      	ldr	r3, [r3, #0]
 8029552:	2b00      	cmp	r3, #0
 8029554:	dd5f      	ble.n	8029616 <mg_tcpip_init+0xe2>
 8029556:	4b3a      	ldr	r3, [pc, #232]	@ (8029640 <mg_tcpip_init+0x10c>)
 8029558:	f241 7223 	movw	r2, #5923	@ 0x1723
 802955c:	4939      	ldr	r1, [pc, #228]	@ (8029644 <mg_tcpip_init+0x110>)
 802955e:	2001      	movs	r0, #1
 8029560:	f7fd f9ca 	bl	80268f8 <mg_log_prefix>
 8029564:	4838      	ldr	r0, [pc, #224]	@ (8029648 <mg_tcpip_init+0x114>)
 8029566:	f7fb f875 	bl	8024654 <mg_log>
 802956a:	e054      	b.n	8029616 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 802956c:	4608      	mov	r0, r1
 802956e:	2302      	movs	r3, #2
 8029570:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8029574:	2105      	movs	r1, #5
 8029576:	f7fc fdaa 	bl	80260ce <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 802957a:	4b30      	ldr	r3, [pc, #192]	@ (802963c <mg_tcpip_init+0x108>)
 802957c:	681b      	ldr	r3, [r3, #0]
 802957e:	2b01      	cmp	r3, #1
 8029580:	dddf      	ble.n	8029542 <mg_tcpip_init+0xe>
 8029582:	4b2f      	ldr	r3, [pc, #188]	@ (8029640 <mg_tcpip_init+0x10c>)
 8029584:	f241 721f 	movw	r2, #5919	@ 0x171f
 8029588:	492e      	ldr	r1, [pc, #184]	@ (8029644 <mg_tcpip_init+0x110>)
 802958a:	2002      	movs	r0, #2
 802958c:	f7fd f9b4 	bl	80268f8 <mg_log_prefix>
 8029590:	4622      	mov	r2, r4
 8029592:	492e      	ldr	r1, [pc, #184]	@ (802964c <mg_tcpip_init+0x118>)
 8029594:	482e      	ldr	r0, [pc, #184]	@ (8029650 <mg_tcpip_init+0x11c>)
 8029596:	f7fb f85d 	bl	8024654 <mg_log>
 802959a:	e7d2      	b.n	8029542 <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 802959c:	f240 6104 	movw	r1, #1540	@ 0x604
 80295a0:	2001      	movs	r0, #1
 80295a2:	f7f9 fc7d 	bl	8022ea0 <mg_calloc>
 80295a6:	6160      	str	r0, [r4, #20]
 80295a8:	f240 6304 	movw	r3, #1540	@ 0x604
 80295ac:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 80295ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80295b0:	b92b      	cbnz	r3, 80295be <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 80295b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80295b4:	689b      	ldr	r3, [r3, #8]
 80295b6:	b37b      	cbz	r3, 8029618 <mg_tcpip_init+0xe4>
 80295b8:	f240 6304 	movw	r3, #1540	@ 0x604
 80295bc:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 80295be:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80295c0:	2001      	movs	r0, #1
 80295c2:	f7f9 fc6d 	bl	8022ea0 <mg_calloc>
 80295c6:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 80295c8:	f7fd f990 	bl	80268ec <mg_millis>
 80295cc:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 80295d0:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 80295d2:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 80295d4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80295d8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 80295dc:	2330      	movs	r3, #48	@ 0x30
 80295de:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 80295e0:	68a3      	ldr	r3, [r4, #8]
 80295e2:	b90b      	cbnz	r3, 80295e8 <mg_tcpip_init+0xb4>
 80295e4:	2301      	movs	r3, #1
 80295e6:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 80295e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80295ec:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 80295f0:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 80295f4:	2102      	movs	r1, #2
 80295f6:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80295fa:	f7fc fd68 	bl	80260ce <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 80295fe:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8029602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8029606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 802960a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802960e:	6963      	ldr	r3, [r4, #20]
 8029610:	b12b      	cbz	r3, 802961e <mg_tcpip_init+0xea>
 8029612:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8029614:	b11b      	cbz	r3, 802961e <mg_tcpip_init+0xea>
}
 8029616:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8029618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 802961c:	e7ce      	b.n	80295bc <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802961e:	4b07      	ldr	r3, [pc, #28]	@ (802963c <mg_tcpip_init+0x108>)
 8029620:	681b      	ldr	r3, [r3, #0]
 8029622:	2b00      	cmp	r3, #0
 8029624:	ddf7      	ble.n	8029616 <mg_tcpip_init+0xe2>
 8029626:	4b06      	ldr	r3, [pc, #24]	@ (8029640 <mg_tcpip_init+0x10c>)
 8029628:	f241 7234 	movw	r2, #5940	@ 0x1734
 802962c:	4905      	ldr	r1, [pc, #20]	@ (8029644 <mg_tcpip_init+0x110>)
 802962e:	2001      	movs	r0, #1
 8029630:	f7fd f962 	bl	80268f8 <mg_log_prefix>
 8029634:	4807      	ldr	r0, [pc, #28]	@ (8029654 <mg_tcpip_init+0x120>)
 8029636:	f7fb f80d 	bl	8024654 <mg_log>
}
 802963a:	e7ec      	b.n	8029616 <mg_tcpip_init+0xe2>
 802963c:	2000012c 	.word	0x2000012c
 8029640:	0803bf04 	.word	0x0803bf04
 8029644:	0803b564 	.word	0x0803b564
 8029648:	0803bbf0 	.word	0x0803bbf0
 802964c:	08024625 	.word	0x08024625
 8029650:	0803bbcc 	.word	0x0803bbcc
 8029654:	0803bb8c 	.word	0x0803bb8c

08029658 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 8029658:	b510      	push	{r4, lr}
 802965a:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 802965c:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 8029660:	2b03      	cmp	r3, #3
 8029662:	d011      	beq.n	8029688 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8029664:	2b01      	cmp	r3, #1
 8029666:	d04f      	beq.n	8029708 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8029668:	b9f3      	cbnz	r3, 80296a8 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 802966a:	4b31      	ldr	r3, [pc, #196]	@ (8029730 <onstatechange+0xd8>)
 802966c:	681b      	ldr	r3, [r3, #0]
 802966e:	2b00      	cmp	r3, #0
 8029670:	dd1a      	ble.n	80296a8 <onstatechange+0x50>
 8029672:	4b30      	ldr	r3, [pc, #192]	@ (8029734 <onstatechange+0xdc>)
 8029674:	f241 4209 	movw	r2, #5129	@ 0x1409
 8029678:	492f      	ldr	r1, [pc, #188]	@ (8029738 <onstatechange+0xe0>)
 802967a:	2001      	movs	r0, #1
 802967c:	f7fd f93c 	bl	80268f8 <mg_log_prefix>
 8029680:	482e      	ldr	r0, [pc, #184]	@ (802973c <onstatechange+0xe4>)
 8029682:	f7fa ffe7 	bl	8024654 <mg_log>
 8029686:	e00f      	b.n	80296a8 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8029688:	4b29      	ldr	r3, [pc, #164]	@ (8029730 <onstatechange+0xd8>)
 802968a:	681b      	ldr	r3, [r3, #0]
 802968c:	2b01      	cmp	r3, #1
 802968e:	dc12      	bgt.n	80296b6 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8029690:	4b27      	ldr	r3, [pc, #156]	@ (8029730 <onstatechange+0xd8>)
 8029692:	681b      	ldr	r3, [r3, #0]
 8029694:	2b01      	cmp	r3, #1
 8029696:	dc1c      	bgt.n	80296d2 <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8029698:	4b25      	ldr	r3, [pc, #148]	@ (8029730 <onstatechange+0xd8>)
 802969a:	681b      	ldr	r3, [r3, #0]
 802969c:	2b01      	cmp	r3, #1
 802969e:	dc26      	bgt.n	80296ee <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 80296a0:	6921      	ldr	r1, [r4, #16]
 80296a2:	4620      	mov	r0, r4
 80296a4:	f7fc fee3 	bl	802646e <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 80296a8:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 80296ac:	2100      	movs	r1, #0
 80296ae:	4620      	mov	r0, r4
 80296b0:	f7f8 f923 	bl	80218fa <mg_tcpip_call>
}
 80296b4:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 80296b6:	4b1f      	ldr	r3, [pc, #124]	@ (8029734 <onstatechange+0xdc>)
 80296b8:	f241 4201 	movw	r2, #5121	@ 0x1401
 80296bc:	491e      	ldr	r1, [pc, #120]	@ (8029738 <onstatechange+0xe0>)
 80296be:	2002      	movs	r0, #2
 80296c0:	f7fd f91a 	bl	80268f8 <mg_log_prefix>
 80296c4:	f104 0208 	add.w	r2, r4, #8
 80296c8:	491d      	ldr	r1, [pc, #116]	@ (8029740 <onstatechange+0xe8>)
 80296ca:	481e      	ldr	r0, [pc, #120]	@ (8029744 <onstatechange+0xec>)
 80296cc:	f7fa ffc2 	bl	8024654 <mg_log>
 80296d0:	e7de      	b.n	8029690 <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 80296d2:	4b18      	ldr	r3, [pc, #96]	@ (8029734 <onstatechange+0xdc>)
 80296d4:	f241 4202 	movw	r2, #5122	@ 0x1402
 80296d8:	4917      	ldr	r1, [pc, #92]	@ (8029738 <onstatechange+0xe0>)
 80296da:	2002      	movs	r0, #2
 80296dc:	f7fd f90c 	bl	80268f8 <mg_log_prefix>
 80296e0:	f104 0210 	add.w	r2, r4, #16
 80296e4:	4916      	ldr	r1, [pc, #88]	@ (8029740 <onstatechange+0xe8>)
 80296e6:	4818      	ldr	r0, [pc, #96]	@ (8029748 <onstatechange+0xf0>)
 80296e8:	f7fa ffb4 	bl	8024654 <mg_log>
 80296ec:	e7d4      	b.n	8029698 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 80296ee:	4b11      	ldr	r3, [pc, #68]	@ (8029734 <onstatechange+0xdc>)
 80296f0:	f241 4203 	movw	r2, #5123	@ 0x1403
 80296f4:	4910      	ldr	r1, [pc, #64]	@ (8029738 <onstatechange+0xe0>)
 80296f6:	2002      	movs	r0, #2
 80296f8:	f7fd f8fe 	bl	80268f8 <mg_log_prefix>
 80296fc:	4622      	mov	r2, r4
 80296fe:	4913      	ldr	r1, [pc, #76]	@ (802974c <onstatechange+0xf4>)
 8029700:	4813      	ldr	r0, [pc, #76]	@ (8029750 <onstatechange+0xf8>)
 8029702:	f7fa ffa7 	bl	8024654 <mg_log>
 8029706:	e7cb      	b.n	80296a0 <onstatechange+0x48>
    MG_ERROR(("Link up"));
 8029708:	4b09      	ldr	r3, [pc, #36]	@ (8029730 <onstatechange+0xd8>)
 802970a:	681b      	ldr	r3, [r3, #0]
 802970c:	2b00      	cmp	r3, #0
 802970e:	dc04      	bgt.n	802971a <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 8029710:	f7fd f8ec 	bl	80268ec <mg_millis>
 8029714:	f002 ff9c 	bl	802c650 <srand>
 8029718:	e7c6      	b.n	80296a8 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 802971a:	4b06      	ldr	r3, [pc, #24]	@ (8029734 <onstatechange+0xdc>)
 802971c:	f241 4206 	movw	r2, #5126	@ 0x1406
 8029720:	4905      	ldr	r1, [pc, #20]	@ (8029738 <onstatechange+0xe0>)
 8029722:	2001      	movs	r0, #1
 8029724:	f7fd f8e8 	bl	80268f8 <mg_log_prefix>
 8029728:	480a      	ldr	r0, [pc, #40]	@ (8029754 <onstatechange+0xfc>)
 802972a:	f7fa ff93 	bl	8024654 <mg_log>
 802972e:	e7ef      	b.n	8029710 <onstatechange+0xb8>
 8029730:	2000012c 	.word	0x2000012c
 8029734:	0803beb0 	.word	0x0803beb0
 8029738:	0803b564 	.word	0x0803b564
 802973c:	0803bc3c 	.word	0x0803bc3c
 8029740:	08024615 	.word	0x08024615
 8029744:	0803bc04 	.word	0x0803bc04
 8029748:	0803bc14 	.word	0x0803bc14
 802974c:	08024625 	.word	0x08024625
 8029750:	0803bc24 	.word	0x0803bc24
 8029754:	0803bc34 	.word	0x0803bc34

08029758 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8029758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802975c:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 802975e:	2300      	movs	r3, #0
 8029760:	9305      	str	r3, [sp, #20]
 8029762:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 8029764:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 8029768:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802976c:	680e      	ldr	r6, [r1, #0]
 802976e:	684b      	ldr	r3, [r1, #4]
 8029770:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8029772:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 8029776:	42b3      	cmp	r3, r6
 8029778:	d87b      	bhi.n	8029872 <rx_dhcp_client+0x11a>
 802977a:	4605      	mov	r5, r0
 802977c:	460f      	mov	r7, r1
 802977e:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8029782:	2204      	movs	r2, #4
 8029784:	1c81      	adds	r1, r0, #2
 8029786:	eb08 0002 	add.w	r0, r8, r2
 802978a:	f003 fc1d 	bl	802cfc8 <memcmp>
 802978e:	2800      	cmp	r0, #0
 8029790:	d16f      	bne.n	8029872 <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 8029792:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8029796:	4648      	mov	r0, r9
 8029798:	f8cd 9004 	str.w	r9, [sp, #4]
 802979c:	f8cd 9000 	str.w	r9, [sp]
 80297a0:	46cb      	mov	fp, r9
 80297a2:	e026      	b.n	80297f2 <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 80297a4:	7862      	ldrb	r2, [r4, #1]
 80297a6:	2a04      	cmp	r2, #4
 80297a8:	d12b      	bne.n	8029802 <rx_dhcp_client+0xaa>
 80297aa:	1da2      	adds	r2, r4, #6
 80297ac:	42b2      	cmp	r2, r6
 80297ae:	d228      	bcs.n	8029802 <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 80297b0:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80297b4:	9301      	str	r3, [sp, #4]
 80297b6:	e019      	b.n	80297ec <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 80297b8:	7862      	ldrb	r2, [r4, #1]
 80297ba:	2a04      	cmp	r2, #4
 80297bc:	d123      	bne.n	8029806 <rx_dhcp_client+0xae>
 80297be:	1da2      	adds	r2, r4, #6
 80297c0:	42b2      	cmp	r2, r6
 80297c2:	d220      	bcs.n	8029806 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 80297c4:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 80297c8:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80297cc:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 80297ce:	e00d      	b.n	80297ec <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80297d0:	7862      	ldrb	r2, [r4, #1]
 80297d2:	2a04      	cmp	r2, #4
 80297d4:	d11b      	bne.n	802980e <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 80297d6:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80297d8:	42b2      	cmp	r2, r6
 80297da:	d218      	bcs.n	802980e <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 80297dc:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80297e0:	9305      	str	r3, [sp, #20]
 80297e2:	e003      	b.n	80297ec <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80297e4:	2b33      	cmp	r3, #51	@ 0x33
 80297e6:	d022      	beq.n	802982e <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80297e8:	2b35      	cmp	r3, #53	@ 0x35
 80297ea:	d02b      	beq.n	8029844 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 80297ec:	7863      	ldrb	r3, [r4, #1]
 80297ee:	3302      	adds	r3, #2
 80297f0:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 80297f2:	1c63      	adds	r3, r4, #1
 80297f4:	42b3      	cmp	r3, r6
 80297f6:	d22e      	bcs.n	8029856 <rx_dhcp_client+0xfe>
 80297f8:	7823      	ldrb	r3, [r4, #0]
 80297fa:	2bff      	cmp	r3, #255	@ 0xff
 80297fc:	d02b      	beq.n	8029856 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 80297fe:	2b01      	cmp	r3, #1
 8029800:	d0d0      	beq.n	80297a4 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8029802:	2b03      	cmp	r3, #3
 8029804:	d0d8      	beq.n	80297b8 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8029806:	7fea      	ldrb	r2, [r5, #31]
 8029808:	b10a      	cbz	r2, 802980e <rx_dhcp_client+0xb6>
 802980a:	2b06      	cmp	r3, #6
 802980c:	d0e0      	beq.n	80297d0 <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802980e:	f895 2020 	ldrb.w	r2, [r5, #32]
 8029812:	2a00      	cmp	r2, #0
 8029814:	d0e6      	beq.n	80297e4 <rx_dhcp_client+0x8c>
 8029816:	2b2a      	cmp	r3, #42	@ 0x2a
 8029818:	d1e4      	bne.n	80297e4 <rx_dhcp_client+0x8c>
 802981a:	7862      	ldrb	r2, [r4, #1]
 802981c:	2a04      	cmp	r2, #4
 802981e:	d1e1      	bne.n	80297e4 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 8029820:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8029822:	42b2      	cmp	r2, r6
 8029824:	d2de      	bcs.n	80297e4 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 8029826:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802982a:	9304      	str	r3, [sp, #16]
 802982c:	e7de      	b.n	80297ec <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802982e:	7862      	ldrb	r2, [r4, #1]
 8029830:	2a04      	cmp	r2, #4
 8029832:	d1d9      	bne.n	80297e8 <rx_dhcp_client+0x90>
 8029834:	1da2      	adds	r2, r4, #6
 8029836:	42b2      	cmp	r2, r6
 8029838:	d2d6      	bcs.n	80297e8 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 802983a:	f8d4 0002 	ldr.w	r0, [r4, #2]
 802983e:	f7fc fc81 	bl	8026144 <mg_ntohl>
 8029842:	e7d3      	b.n	80297ec <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8029844:	7863      	ldrb	r3, [r4, #1]
 8029846:	2b01      	cmp	r3, #1
 8029848:	d1d0      	bne.n	80297ec <rx_dhcp_client+0x94>
 802984a:	1da3      	adds	r3, r4, #6
 802984c:	42b3      	cmp	r3, r6
 802984e:	d2cd      	bcs.n	80297ec <rx_dhcp_client+0x94>
      msgtype = p[2];
 8029850:	f894 9002 	ldrb.w	r9, [r4, #2]
 8029854:	e7ca      	b.n	80297ec <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8029856:	f1b9 0f06 	cmp.w	r9, #6
 802985a:	d00d      	beq.n	8029878 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802985c:	f1b9 0f02 	cmp.w	r9, #2
 8029860:	d013      	beq.n	802988a <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 8029862:	f1b9 0f05 	cmp.w	r9, #5
 8029866:	d028      	beq.n	80298ba <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 8029868:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802986c:	4553      	cmp	r3, sl
 802986e:	f040 80b4 	bne.w	80299da <rx_dhcp_client+0x282>
}
 8029872:	b007      	add	sp, #28
 8029874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8029878:	68ab      	ldr	r3, [r5, #8]
 802987a:	455b      	cmp	r3, fp
 802987c:	d1ee      	bne.n	802985c <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 802987e:	2301      	movs	r3, #1
 8029880:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029884:	2300      	movs	r3, #0
 8029886:	60ab      	str	r3, [r5, #8]
 8029888:	e7ee      	b.n	8029868 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802988a:	f1ba 0f01 	cmp.w	sl, #1
 802988e:	d1e8      	bne.n	8029862 <rx_dhcp_client+0x10a>
 8029890:	f1bb 0f00 	cmp.w	fp, #0
 8029894:	d0e5      	beq.n	8029862 <rx_dhcp_client+0x10a>
 8029896:	9b00      	ldr	r3, [sp, #0]
 8029898:	2b00      	cmp	r3, #0
 802989a:	d0e2      	beq.n	8029862 <rx_dhcp_client+0x10a>
 802989c:	2800      	cmp	r0, #0
 802989e:	d0e0      	beq.n	8029862 <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 80298a0:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 80298a4:	b90a      	cbnz	r2, 80298aa <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 80298a6:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 80298a8:	68da      	ldr	r2, [r3, #12]
 80298aa:	4659      	mov	r1, fp
 80298ac:	4628      	mov	r0, r5
 80298ae:	f7ff f9b9 	bl	8028c24 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 80298b2:	2302      	movs	r3, #2
 80298b4:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 80298b8:	e7d6      	b.n	8029868 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80298ba:	f1ba 0f02 	cmp.w	sl, #2
 80298be:	d02a      	beq.n	8029916 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 80298c0:	f1ba 0f03 	cmp.w	sl, #3
 80298c4:	d1d0      	bne.n	8029868 <rx_dhcp_client+0x110>
 80298c6:	68ab      	ldr	r3, [r5, #8]
 80298c8:	455b      	cmp	r3, fp
 80298ca:	d1cd      	bne.n	8029868 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 80298cc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80298ce:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80298d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80298d4:	4604      	mov	r4, r0
 80298d6:	fb00 f202 	mul.w	r2, r0, r2
 80298da:	189b      	adds	r3, r3, r2
 80298dc:	f141 0100 	adc.w	r1, r1, #0
 80298e0:	662b      	str	r3, [r5, #96]	@ 0x60
 80298e2:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80298e4:	4b3f      	ldr	r3, [pc, #252]	@ (80299e4 <rx_dhcp_client+0x28c>)
 80298e6:	681b      	ldr	r3, [r3, #0]
 80298e8:	2b01      	cmp	r3, #1
 80298ea:	ddbd      	ble.n	8029868 <rx_dhcp_client+0x110>
 80298ec:	4b3e      	ldr	r3, [pc, #248]	@ (80299e8 <rx_dhcp_client+0x290>)
 80298ee:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 80298f2:	493e      	ldr	r1, [pc, #248]	@ (80299ec <rx_dhcp_client+0x294>)
 80298f4:	2002      	movs	r0, #2
 80298f6:	f7fc ffff 	bl	80268f8 <mg_log_prefix>
 80298fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80298fe:	2300      	movs	r3, #0
 8029900:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 8029904:	f7e7 fa28 	bl	8010d58 <__aeabi_uldivmod>
 8029908:	4602      	mov	r2, r0
 802990a:	460b      	mov	r3, r1
 802990c:	4621      	mov	r1, r4
 802990e:	4838      	ldr	r0, [pc, #224]	@ (80299f0 <rx_dhcp_client+0x298>)
 8029910:	f7fa fea0 	bl	8024654 <mg_log>
 8029914:	e7a8      	b.n	8029868 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8029916:	f1bb 0f00 	cmp.w	fp, #0
 802991a:	d0d1      	beq.n	80298c0 <rx_dhcp_client+0x168>
 802991c:	9b00      	ldr	r3, [sp, #0]
 802991e:	2b00      	cmp	r3, #0
 8029920:	d0ce      	beq.n	80298c0 <rx_dhcp_client+0x168>
 8029922:	4604      	mov	r4, r0
 8029924:	2800      	cmp	r0, #0
 8029926:	d0cb      	beq.n	80298c0 <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 8029928:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802992a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802992c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029930:	fb00 f202 	mul.w	r2, r0, r2
 8029934:	189b      	adds	r3, r3, r2
 8029936:	f141 0100 	adc.w	r1, r1, #0
 802993a:	662b      	str	r3, [r5, #96]	@ 0x60
 802993c:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802993e:	4b29      	ldr	r3, [pc, #164]	@ (80299e4 <rx_dhcp_client+0x28c>)
 8029940:	681b      	ldr	r3, [r3, #0]
 8029942:	2b01      	cmp	r3, #1
 8029944:	dc2e      	bgt.n	80299a4 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8029946:	693b      	ldr	r3, [r7, #16]
 8029948:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802994c:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 8029950:	895b      	ldrh	r3, [r3, #10]
 8029952:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8029956:	f8c5 b008 	str.w	fp, [r5, #8]
 802995a:	9b00      	ldr	r3, [sp, #0]
 802995c:	612b      	str	r3, [r5, #16]
 802995e:	9b01      	ldr	r3, [sp, #4]
 8029960:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 8029962:	2303      	movs	r3, #3
 8029964:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 8029968:	2108      	movs	r1, #8
 802996a:	eb0d 0001 	add.w	r0, sp, r1
 802996e:	f7fc fbae 	bl	80260ce <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8029972:	9c02      	ldr	r4, [sp, #8]
 8029974:	f7fc ffba 	bl	80268ec <mg_millis>
 8029978:	4420      	add	r0, r4
 802997a:	f002 fe69 	bl	802c650 <srand>
      if (ifp->enable_req_dns && dns != 0)
 802997e:	7feb      	ldrb	r3, [r5, #31]
 8029980:	b10b      	cbz	r3, 8029986 <rx_dhcp_client+0x22e>
 8029982:	9b05      	ldr	r3, [sp, #20]
 8029984:	bb1b      	cbnz	r3, 80299ce <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 8029986:	f895 3020 	ldrb.w	r3, [r5, #32]
 802998a:	2b00      	cmp	r3, #0
 802998c:	f43f af6c 	beq.w	8029868 <rx_dhcp_client+0x110>
 8029990:	9b04      	ldr	r3, [sp, #16]
 8029992:	2b00      	cmp	r3, #0
 8029994:	f43f af68 	beq.w	8029868 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8029998:	aa04      	add	r2, sp, #16
 802999a:	2102      	movs	r1, #2
 802999c:	4628      	mov	r0, r5
 802999e:	f7f7 ffac 	bl	80218fa <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80299a2:	e761      	b.n	8029868 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80299a4:	4b10      	ldr	r3, [pc, #64]	@ (80299e8 <rx_dhcp_client+0x290>)
 80299a6:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 80299aa:	4910      	ldr	r1, [pc, #64]	@ (80299ec <rx_dhcp_client+0x294>)
 80299ac:	2002      	movs	r0, #2
 80299ae:	f7fc ffa3 	bl	80268f8 <mg_log_prefix>
 80299b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80299b6:	2300      	movs	r3, #0
 80299b8:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 80299bc:	f7e7 f9cc 	bl	8010d58 <__aeabi_uldivmod>
 80299c0:	4602      	mov	r2, r0
 80299c2:	460b      	mov	r3, r1
 80299c4:	4621      	mov	r1, r4
 80299c6:	480a      	ldr	r0, [pc, #40]	@ (80299f0 <rx_dhcp_client+0x298>)
 80299c8:	f7fa fe44 	bl	8024654 <mg_log>
 80299cc:	e7bb      	b.n	8029946 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 80299ce:	aa05      	add	r2, sp, #20
 80299d0:	2101      	movs	r1, #1
 80299d2:	4628      	mov	r0, r5
 80299d4:	f7f7 ff91 	bl	80218fa <mg_tcpip_call>
 80299d8:	e7d5      	b.n	8029986 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 80299da:	4628      	mov	r0, r5
 80299dc:	f7ff fe3c 	bl	8029658 <onstatechange>
 80299e0:	e747      	b.n	8029872 <rx_dhcp_client+0x11a>
 80299e2:	bf00      	nop
 80299e4:	2000012c 	.word	0x2000012c
 80299e8:	0803be70 	.word	0x0803be70
 80299ec:	0803b564 	.word	0x0803b564
 80299f0:	0803bc48 	.word	0x0803bc48

080299f4 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80299f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80299f8:	b084      	sub	sp, #16
 80299fa:	4605      	mov	r5, r0
 80299fc:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 80299fe:	69c9      	ldr	r1, [r1, #28]
 8029a00:	88cb      	ldrh	r3, [r1, #6]
 8029a02:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8029a06:	b29b      	uxth	r3, r3
 8029a08:	b1c3      	cbz	r3, 8029a3c <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 8029a0a:	7a4b      	ldrb	r3, [r1, #9]
 8029a0c:	2b11      	cmp	r3, #17
 8029a0e:	d00e      	beq.n	8029a2e <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8029a10:	7a4b      	ldrb	r3, [r1, #9]
 8029a12:	2b06      	cmp	r3, #6
 8029a14:	d00f      	beq.n	8029a36 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8029a16:	2200      	movs	r2, #0
 8029a18:	4621      	mov	r1, r4
 8029a1a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8029a1c:	f7f9 fa65 	bl	8022eea <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 8029a20:	b110      	cbz	r0, 8029a28 <rx_ip+0x34>
 8029a22:	4963      	ldr	r1, [pc, #396]	@ (8029bb0 <rx_ip+0x1bc>)
 8029a24:	f7fd f850 	bl	8026ac8 <mg_error>
}
 8029a28:	b004      	add	sp, #16
 8029a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 8029a2e:	f101 0314 	add.w	r3, r1, #20
 8029a32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8029a34:	e7ec      	b.n	8029a10 <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8029a36:	3114      	adds	r1, #20
 8029a38:	62a1      	str	r1, [r4, #40]	@ 0x28
 8029a3a:	e7ec      	b.n	8029a16 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 8029a3c:	7a4b      	ldrb	r3, [r1, #9]
 8029a3e:	2b01      	cmp	r3, #1
 8029a40:	d024      	beq.n	8029a8c <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 8029a42:	2b11      	cmp	r3, #17
 8029a44:	d031      	beq.n	8029aaa <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 8029a46:	2b06      	cmp	r3, #6
 8029a48:	d1ee      	bne.n	8029a28 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8029a4a:	f101 0314 	add.w	r3, r1, #20
 8029a4e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8029a50:	68e3      	ldr	r3, [r4, #12]
 8029a52:	2b13      	cmp	r3, #19
 8029a54:	d9e8      	bls.n	8029a28 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 8029a56:	3128      	adds	r1, #40	@ 0x28
 8029a58:	4620      	mov	r0, r4
 8029a5a:	f7fb f898 	bl	8024b8e <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 8029a5e:	69e3      	ldr	r3, [r4, #28]
 8029a60:	8858      	ldrh	r0, [r3, #2]
 8029a62:	f7fc fc07 	bl	8026274 <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8029a66:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8029a68:	7b1b      	ldrb	r3, [r3, #12]
 8029a6a:	091b      	lsrs	r3, r3, #4
 8029a6c:	3305      	adds	r3, #5
 8029a6e:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8029a70:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8029a74:	d301      	bcc.n	8029a7a <rx_ip+0x86>
 8029a76:	1a80      	subs	r0, r0, r2
 8029a78:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8029a7a:	4b4e      	ldr	r3, [pc, #312]	@ (8029bb4 <rx_ip+0x1c0>)
 8029a7c:	681b      	ldr	r3, [r3, #0]
 8029a7e:	2b03      	cmp	r3, #3
 8029a80:	dc74      	bgt.n	8029b6c <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 8029a82:	4621      	mov	r1, r4
 8029a84:	4628      	mov	r0, r5
 8029a86:	f7ff fb3d 	bl	8029104 <rx_tcp>
 8029a8a:	e7cd      	b.n	8029a28 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 8029a8c:	f101 0314 	add.w	r3, r1, #20
 8029a90:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8029a92:	68e3      	ldr	r3, [r4, #12]
 8029a94:	2b03      	cmp	r3, #3
 8029a96:	d9c7      	bls.n	8029a28 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 8029a98:	3118      	adds	r1, #24
 8029a9a:	4620      	mov	r0, r4
 8029a9c:	f7fb f877 	bl	8024b8e <mkpay>
    rx_icmp(ifp, pkt);
 8029aa0:	4621      	mov	r1, r4
 8029aa2:	4628      	mov	r0, r5
 8029aa4:	f7fc fc3b 	bl	802631e <rx_icmp>
 8029aa8:	e7be      	b.n	8029a28 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 8029aaa:	f101 0314 	add.w	r3, r1, #20
 8029aae:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8029ab0:	68e3      	ldr	r3, [r4, #12]
 8029ab2:	2b07      	cmp	r3, #7
 8029ab4:	d9b8      	bls.n	8029a28 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 8029ab6:	311c      	adds	r1, #28
 8029ab8:	4620      	mov	r0, r4
 8029aba:	f7fb f868 	bl	8024b8e <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8029abe:	4b3d      	ldr	r3, [pc, #244]	@ (8029bb4 <rx_ip+0x1c0>)
 8029ac0:	681b      	ldr	r3, [r3, #0]
 8029ac2:	2b03      	cmp	r3, #3
 8029ac4:	dc16      	bgt.n	8029af4 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 8029ac6:	7f2b      	ldrb	r3, [r5, #28]
 8029ac8:	b133      	cbz	r3, 8029ad8 <rx_ip+0xe4>
 8029aca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029acc:	8877      	ldrh	r7, [r6, #2]
 8029ace:	2044      	movs	r0, #68	@ 0x44
 8029ad0:	f7fc fbd0 	bl	8026274 <mg_ntohs>
 8029ad4:	4287      	cmp	r7, r0
 8029ad6:	d02f      	beq.n	8029b38 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8029ad8:	7f6b      	ldrb	r3, [r5, #29]
 8029ada:	b133      	cbz	r3, 8029aea <rx_ip+0xf6>
 8029adc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029ade:	8877      	ldrh	r7, [r6, #2]
 8029ae0:	2043      	movs	r0, #67	@ 0x43
 8029ae2:	f7fc fbc7 	bl	8026274 <mg_ntohs>
 8029ae6:	4287      	cmp	r7, r0
 8029ae8:	d033      	beq.n	8029b52 <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 8029aea:	4621      	mov	r1, r4
 8029aec:	4628      	mov	r0, r5
 8029aee:	f7fd fe03 	bl	80276f8 <rx_udp>
 8029af2:	e799      	b.n	8029a28 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8029af4:	4b30      	ldr	r3, [pc, #192]	@ (8029bb8 <rx_ip+0x1c4>)
 8029af6:	f241 6255 	movw	r2, #5717	@ 0x1655
 8029afa:	4930      	ldr	r1, [pc, #192]	@ (8029bbc <rx_ip+0x1c8>)
 8029afc:	2004      	movs	r0, #4
 8029afe:	f7fc fefb 	bl	80268f8 <mg_log_prefix>
 8029b02:	69e7      	ldr	r7, [r4, #28]
 8029b04:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 8029b08:	f8b8 0000 	ldrh.w	r0, [r8]
 8029b0c:	f7fc fbb2 	bl	8026274 <mg_ntohs>
 8029b10:	4606      	mov	r6, r0
 8029b12:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8029b16:	f7fc fbad 	bl	8026274 <mg_ntohs>
 8029b1a:	68e3      	ldr	r3, [r4, #12]
 8029b1c:	4928      	ldr	r1, [pc, #160]	@ (8029bc0 <rx_ip+0x1cc>)
 8029b1e:	9303      	str	r3, [sp, #12]
 8029b20:	9002      	str	r0, [sp, #8]
 8029b22:	f107 0310 	add.w	r3, r7, #16
 8029b26:	9301      	str	r3, [sp, #4]
 8029b28:	9100      	str	r1, [sp, #0]
 8029b2a:	4633      	mov	r3, r6
 8029b2c:	f107 020c 	add.w	r2, r7, #12
 8029b30:	4824      	ldr	r0, [pc, #144]	@ (8029bc4 <rx_ip+0x1d0>)
 8029b32:	f7fa fd8f 	bl	8024654 <mg_log>
 8029b36:	e7c6      	b.n	8029ac6 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8029b38:	f106 0308 	add.w	r3, r6, #8
 8029b3c:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8029b3e:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 8029b42:	4620      	mov	r0, r4
 8029b44:	f7fb f823 	bl	8024b8e <mkpay>
      rx_dhcp_client(ifp, pkt);
 8029b48:	4621      	mov	r1, r4
 8029b4a:	4628      	mov	r0, r5
 8029b4c:	f7ff fe04 	bl	8029758 <rx_dhcp_client>
 8029b50:	e76a      	b.n	8029a28 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8029b52:	f106 0308 	add.w	r3, r6, #8
 8029b56:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8029b58:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 8029b5c:	4620      	mov	r0, r4
 8029b5e:	f7fb f816 	bl	8024b8e <mkpay>
      rx_dhcp_server(ifp, pkt);
 8029b62:	4621      	mov	r1, r4
 8029b64:	4628      	mov	r0, r5
 8029b66:	f7fc fd05 	bl	8026574 <rx_dhcp_server>
 8029b6a:	e75d      	b.n	8029a28 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8029b6c:	4b12      	ldr	r3, [pc, #72]	@ (8029bb8 <rx_ip+0x1c4>)
 8029b6e:	f241 626a 	movw	r2, #5738	@ 0x166a
 8029b72:	4912      	ldr	r1, [pc, #72]	@ (8029bbc <rx_ip+0x1c8>)
 8029b74:	2004      	movs	r0, #4
 8029b76:	f7fc febf 	bl	80268f8 <mg_log_prefix>
 8029b7a:	69e7      	ldr	r7, [r4, #28]
 8029b7c:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8029b80:	f8b8 0000 	ldrh.w	r0, [r8]
 8029b84:	f7fc fb76 	bl	8026274 <mg_ntohs>
 8029b88:	4606      	mov	r6, r0
 8029b8a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8029b8e:	f7fc fb71 	bl	8026274 <mg_ntohs>
 8029b92:	68e3      	ldr	r3, [r4, #12]
 8029b94:	490a      	ldr	r1, [pc, #40]	@ (8029bc0 <rx_ip+0x1cc>)
 8029b96:	9303      	str	r3, [sp, #12]
 8029b98:	9002      	str	r0, [sp, #8]
 8029b9a:	f107 0310 	add.w	r3, r7, #16
 8029b9e:	9301      	str	r3, [sp, #4]
 8029ba0:	9100      	str	r1, [sp, #0]
 8029ba2:	4633      	mov	r3, r6
 8029ba4:	f107 020c 	add.w	r2, r7, #12
 8029ba8:	4807      	ldr	r0, [pc, #28]	@ (8029bc8 <rx_ip+0x1d4>)
 8029baa:	f7fa fd53 	bl	8024654 <mg_log>
 8029bae:	e768      	b.n	8029a82 <rx_ip+0x8e>
 8029bb0:	0803bc60 	.word	0x0803bc60
 8029bb4:	2000012c 	.word	0x2000012c
 8029bb8:	0803be80 	.word	0x0803be80
 8029bbc:	0803b564 	.word	0x0803b564
 8029bc0:	08024615 	.word	0x08024615
 8029bc4:	0803bc7c 	.word	0x0803bc7c
 8029bc8:	0803bc98 	.word	0x0803bc98

08029bcc <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8029bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029bd0:	b08e      	sub	sp, #56	@ 0x38
 8029bd2:	4606      	mov	r6, r0
 8029bd4:	460c      	mov	r4, r1
 8029bd6:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 8029bd8:	2234      	movs	r2, #52	@ 0x34
 8029bda:	2100      	movs	r1, #0
 8029bdc:	a801      	add	r0, sp, #4
 8029bde:	f003 fa87 	bl	802d0f0 <memset>
  pkt.raw.buf = (char *) buf;
 8029be2:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 8029be4:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 8029be6:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8029be8:	2d0d      	cmp	r5, #13
 8029bea:	d93f      	bls.n	8029c6c <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 8029bec:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 8029bf0:	b15b      	cbz	r3, 8029c0a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8029bf2:	2206      	movs	r2, #6
 8029bf4:	4631      	mov	r1, r6
 8029bf6:	4620      	mov	r0, r4
 8029bf8:	f003 f9e6 	bl	802cfc8 <memcmp>
  if (ifp->enable_mac_check &&
 8029bfc:	b128      	cbz	r0, 8029c0a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 8029bfe:	2206      	movs	r2, #6
 8029c00:	4945      	ldr	r1, [pc, #276]	@ (8029d18 <mg_tcpip_rx+0x14c>)
 8029c02:	4620      	mov	r0, r4
 8029c04:	f003 f9e0 	bl	802cfc8 <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8029c08:	bb80      	cbnz	r0, 8029c6c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 8029c0a:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 8029c0e:	b18b      	cbz	r3, 8029c34 <mg_tcpip_rx+0x68>
 8029c10:	2d04      	cmp	r5, #4
 8029c12:	d92e      	bls.n	8029c72 <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 8029c14:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8029c18:	4642      	mov	r2, r8
 8029c1a:	4621      	mov	r1, r4
 8029c1c:	2000      	movs	r0, #0
 8029c1e:	f7fc fddf 	bl	80267e0 <mg_crc32>
 8029c22:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8029c24:	2204      	movs	r2, #4
 8029c26:	4669      	mov	r1, sp
 8029c28:	eb04 0008 	add.w	r0, r4, r8
 8029c2c:	f003 f9cc 	bl	802cfc8 <memcmp>
 8029c30:	b108      	cbz	r0, 8029c36 <mg_tcpip_rx+0x6a>
 8029c32:	e01b      	b.n	8029c6c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 8029c34:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 8029c36:	89a7      	ldrh	r7, [r4, #12]
 8029c38:	f640 0006 	movw	r0, #2054	@ 0x806
 8029c3c:	f7fc fb1a 	bl	8026274 <mg_ntohs>
 8029c40:	4287      	cmp	r7, r0
 8029c42:	d018      	beq.n	8029c76 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8029c44:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8029c48:	f7fc fb14 	bl	8026274 <mg_ntohs>
 8029c4c:	4287      	cmp	r7, r0
 8029c4e:	d01b      	beq.n	8029c88 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8029c50:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8029c54:	f7fc fb0e 	bl	8026274 <mg_ntohs>
 8029c58:	4287      	cmp	r7, r0
 8029c5a:	d028      	beq.n	8029cae <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8029c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8029d1c <mg_tcpip_rx+0x150>)
 8029c5e:	681b      	ldr	r3, [r3, #0]
 8029c60:	2b02      	cmp	r3, #2
 8029c62:	dc41      	bgt.n	8029ce8 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8029c64:	4b2d      	ldr	r3, [pc, #180]	@ (8029d1c <mg_tcpip_rx+0x150>)
 8029c66:	681b      	ldr	r3, [r3, #0]
 8029c68:	2b03      	cmp	r3, #3
 8029c6a:	dc4d      	bgt.n	8029d08 <mg_tcpip_rx+0x13c>
}
 8029c6c:	b00e      	add	sp, #56	@ 0x38
 8029c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 8029c72:	46a8      	mov	r8, r5
 8029c74:	e7df      	b.n	8029c36 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8029c76:	340e      	adds	r4, #14
 8029c78:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8029c7a:	2d29      	cmp	r5, #41	@ 0x29
 8029c7c:	d9f6      	bls.n	8029c6c <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 8029c7e:	a901      	add	r1, sp, #4
 8029c80:	4630      	mov	r0, r6
 8029c82:	f7fe ff09 	bl	8028a98 <rx_arp>
 8029c86:	e7f1      	b.n	8029c6c <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8029c88:	f104 030e 	add.w	r3, r4, #14
 8029c8c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8029c8e:	2d35      	cmp	r5, #53	@ 0x35
 8029c90:	d9ec      	bls.n	8029c6c <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8029c92:	7ba3      	ldrb	r3, [r4, #14]
 8029c94:	091b      	lsrs	r3, r3, #4
 8029c96:	2b06      	cmp	r3, #6
 8029c98:	d1e8      	bne.n	8029c6c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 8029c9a:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 8029c9e:	a801      	add	r0, sp, #4
 8029ca0:	f7fa ff75 	bl	8024b8e <mkpay>
    rx_ip6(ifp, &pkt);
 8029ca4:	a901      	add	r1, sp, #4
 8029ca6:	4630      	mov	r0, r6
 8029ca8:	f7fc fb73 	bl	8026392 <rx_ip6>
 8029cac:	e7de      	b.n	8029c6c <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 8029cae:	f104 030e 	add.w	r3, r4, #14
 8029cb2:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8029cb4:	2d21      	cmp	r5, #33	@ 0x21
 8029cb6:	d9d9      	bls.n	8029c6c <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8029cb8:	8a20      	ldrh	r0, [r4, #16]
 8029cba:	f7fc fadb 	bl	8026274 <mg_ntohs>
 8029cbe:	300e      	adds	r0, #14
 8029cc0:	42a8      	cmp	r0, r5
 8029cc2:	d200      	bcs.n	8029cc6 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8029cc4:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8029cc6:	9b02      	ldr	r3, [sp, #8]
 8029cc8:	2b21      	cmp	r3, #33	@ 0x21
 8029cca:	d9cf      	bls.n	8029c6c <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 8029ccc:	7ba3      	ldrb	r3, [r4, #14]
 8029cce:	091b      	lsrs	r3, r3, #4
 8029cd0:	2b04      	cmp	r3, #4
 8029cd2:	d1cb      	bne.n	8029c6c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 8029cd4:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 8029cd8:	a801      	add	r0, sp, #4
 8029cda:	f7fa ff58 	bl	8024b8e <mkpay>
    rx_ip(ifp, &pkt);
 8029cde:	a901      	add	r1, sp, #4
 8029ce0:	4630      	mov	r0, r6
 8029ce2:	f7ff fe87 	bl	80299f4 <rx_ip>
 8029ce6:	e7c1      	b.n	8029c6c <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8029ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8029d20 <mg_tcpip_rx+0x154>)
 8029cea:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 8029cee:	490d      	ldr	r1, [pc, #52]	@ (8029d24 <mg_tcpip_rx+0x158>)
 8029cf0:	2003      	movs	r0, #3
 8029cf2:	f7fc fe01 	bl	80268f8 <mg_log_prefix>
 8029cf6:	9b05      	ldr	r3, [sp, #20]
 8029cf8:	8998      	ldrh	r0, [r3, #12]
 8029cfa:	f7fc fabb 	bl	8026274 <mg_ntohs>
 8029cfe:	4601      	mov	r1, r0
 8029d00:	4809      	ldr	r0, [pc, #36]	@ (8029d28 <mg_tcpip_rx+0x15c>)
 8029d02:	f7fa fca7 	bl	8024654 <mg_log>
 8029d06:	e7ad      	b.n	8029c64 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8029d08:	4641      	mov	r1, r8
 8029d0a:	2920      	cmp	r1, #32
 8029d0c:	bf28      	it	cs
 8029d0e:	2120      	movcs	r1, #32
 8029d10:	4620      	mov	r0, r4
 8029d12:	f7f9 fe01 	bl	8023918 <mg_hexdump>
 8029d16:	e7a9      	b.n	8029c6c <mg_tcpip_rx+0xa0>
 8029d18:	0803bfec 	.word	0x0803bfec
 8029d1c:	2000012c 	.word	0x2000012c
 8029d20:	0803be90 	.word	0x0803be90
 8029d24:	0803b564 	.word	0x0803b564
 8029d28:	0803bcb4 	.word	0x0803bcb4

08029d2c <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 8029d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d30:	b08b      	sub	sp, #44	@ 0x2c
 8029d32:	4605      	mov	r5, r0
 8029d34:	4616      	mov	r6, r2
 8029d36:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8029d38:	9200      	str	r2, [sp, #0]
 8029d3a:	9301      	str	r3, [sp, #4]
 8029d3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029d40:	2300      	movs	r3, #0
 8029d42:	3058      	adds	r0, #88	@ 0x58
 8029d44:	f7fc f868 	bl	8025e18 <mg_timer_expired>
  ifp->now = now;
 8029d48:	652e      	str	r6, [r5, #80]	@ 0x50
 8029d4a:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 8029d4c:	4604      	mov	r4, r0
 8029d4e:	b318      	cbz	r0, 8029d98 <mg_tcpip_poll+0x6c>
 8029d50:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8029d52:	68db      	ldr	r3, [r3, #12]
 8029d54:	b303      	cbz	r3, 8029d98 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 8029d56:	4628      	mov	r0, r5
 8029d58:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8029d5a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8029d5e:	3b00      	subs	r3, #0
 8029d60:	bf18      	it	ne
 8029d62:	2301      	movne	r3, #1
    if (up != current) {
 8029d64:	4298      	cmp	r0, r3
 8029d66:	d010      	beq.n	8029d8a <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8029d68:	b120      	cbz	r0, 8029d74 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 8029d6a:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8029d6c:	2b00      	cmp	r3, #0
 8029d6e:	d06e      	beq.n	8029e4e <mg_tcpip_poll+0x122>
 8029d70:	2301      	movs	r3, #1
 8029d72:	e000      	b.n	8029d76 <mg_tcpip_poll+0x4a>
 8029d74:	2300      	movs	r3, #0
 8029d76:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 8029d7a:	b918      	cbnz	r0, 8029d84 <mg_tcpip_poll+0x58>
 8029d7c:	7f2b      	ldrb	r3, [r5, #28]
 8029d7e:	b10b      	cbz	r3, 8029d84 <mg_tcpip_poll+0x58>
 8029d80:	2300      	movs	r3, #0
 8029d82:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029d84:	4628      	mov	r0, r5
 8029d86:	f7ff fc67 	bl	8029658 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8029d8a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8029d8e:	b91b      	cbnz	r3, 8029d98 <mg_tcpip_poll+0x6c>
 8029d90:	4ba8      	ldr	r3, [pc, #672]	@ (802a034 <mg_tcpip_poll+0x308>)
 8029d92:	681b      	ldr	r3, [r3, #0]
 8029d94:	2b00      	cmp	r3, #0
 8029d96:	dc5c      	bgt.n	8029e52 <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8029d98:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8029d9c:	2b00      	cmp	r3, #0
 8029d9e:	f000 8146 	beq.w	802a02e <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8029da2:	2b01      	cmp	r3, #1
 8029da4:	d060      	beq.n	8029e68 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8029da6:	2c00      	cmp	r4, #0
 8029da8:	d05f      	beq.n	8029e6a <mg_tcpip_poll+0x13e>
 8029daa:	2b03      	cmp	r3, #3
 8029dac:	d15d      	bne.n	8029e6a <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 8029dae:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8029db0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8029db2:	ea52 0103 	orrs.w	r1, r2, r3
 8029db6:	d058      	beq.n	8029e6a <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 8029db8:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8029dba:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8029dbc:	4290      	cmp	r0, r2
 8029dbe:	eb71 0403 	sbcs.w	r4, r1, r3
 8029dc2:	d262      	bcs.n	8029e8a <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8029dc4:	4c9c      	ldr	r4, [pc, #624]	@ (802a038 <mg_tcpip_poll+0x30c>)
 8029dc6:	1904      	adds	r4, r0, r4
 8029dc8:	f141 0c00 	adc.w	ip, r1, #0
 8029dcc:	42a2      	cmp	r2, r4
 8029dce:	eb73 030c 	sbcs.w	r3, r3, ip
 8029dd2:	d24a      	bcs.n	8029e6a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 8029dd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029dd8:	2300      	movs	r3, #0
 8029dda:	f7e6 ffbd 	bl	8010d58 <__aeabi_uldivmod>
 8029dde:	4602      	mov	r2, r0
 8029de0:	2000      	movs	r0, #0
 8029de2:	1853      	adds	r3, r2, r1
 8029de4:	d25a      	bcs.n	8029e9c <mg_tcpip_poll+0x170>
 8029de6:	4403      	add	r3, r0
 8029de8:	4894      	ldr	r0, [pc, #592]	@ (802a03c <mg_tcpip_poll+0x310>)
 8029dea:	fba0 4003 	umull	r4, r0, r0, r3
 8029dee:	08c0      	lsrs	r0, r0, #3
 8029df0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8029df4:	1a1b      	subs	r3, r3, r0
 8029df6:	1ad3      	subs	r3, r2, r3
 8029df8:	f161 0c00 	sbc.w	ip, r1, #0
 8029dfc:	4c90      	ldr	r4, [pc, #576]	@ (802a040 <mg_tcpip_poll+0x314>)
 8029dfe:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 8029e02:	fb03 f000 	mul.w	r0, r3, r0
 8029e06:	fb04 000c 	mla	r0, r4, ip, r0
 8029e0a:	fba3 3404 	umull	r3, r4, r3, r4
 8029e0e:	4420      	add	r0, r4
 8029e10:	089b      	lsrs	r3, r3, #2
 8029e12:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 8029e16:	0880      	lsrs	r0, r0, #2
 8029e18:	0104      	lsls	r4, r0, #4
 8029e1a:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 8029e1e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8029e22:	ebbc 0c03 	subs.w	ip, ip, r3
 8029e26:	eb64 0300 	sbc.w	r3, r4, r0
 8029e2a:	009b      	lsls	r3, r3, #2
 8029e2c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8029e30:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8029e34:	1a12      	subs	r2, r2, r0
 8029e36:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8029e3a:	430a      	orrs	r2, r1
 8029e3c:	d115      	bne.n	8029e6a <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8029e3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029e42:	68aa      	ldr	r2, [r5, #8]
 8029e44:	497f      	ldr	r1, [pc, #508]	@ (802a044 <mg_tcpip_poll+0x318>)
 8029e46:	4628      	mov	r0, r5
 8029e48:	f7fe fdfe 	bl	8028a48 <tx_dhcp_request_re>
 8029e4c:	e00d      	b.n	8029e6a <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8029e4e:	2303      	movs	r3, #3
 8029e50:	e791      	b.n	8029d76 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8029e52:	4b7d      	ldr	r3, [pc, #500]	@ (802a048 <mg_tcpip_poll+0x31c>)
 8029e54:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8029e58:	497c      	ldr	r1, [pc, #496]	@ (802a04c <mg_tcpip_poll+0x320>)
 8029e5a:	2001      	movs	r0, #1
 8029e5c:	f7fc fd4c 	bl	80268f8 <mg_log_prefix>
 8029e60:	487b      	ldr	r0, [pc, #492]	@ (802a050 <mg_tcpip_poll+0x324>)
 8029e62:	f7fa fbf7 	bl	8024654 <mg_log>
 8029e66:	e797      	b.n	8029d98 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8029e68:	b95c      	cbnz	r4, 8029e82 <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 8029e6a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8029e6c:	689b      	ldr	r3, [r3, #8]
 8029e6e:	b1fb      	cbz	r3, 8029eb0 <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8029e70:	462a      	mov	r2, r5
 8029e72:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8029e74:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8029e76:	4798      	blx	r3
    if (len > 0) {
 8029e78:	4602      	mov	r2, r0
 8029e7a:	b988      	cbnz	r0, 8029ea0 <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8029e7c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8029e7e:	681c      	ldr	r4, [r3, #0]
 8029e80:	e0a3      	b.n	8029fca <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8029e82:	4628      	mov	r0, r5
 8029e84:	f7fe fdaa 	bl	80289dc <tx_dhcp_discover>
 8029e88:	e7ef      	b.n	8029e6a <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 8029e8a:	2301      	movs	r3, #1
 8029e8c:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029e90:	2300      	movs	r3, #0
 8029e92:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029e94:	4628      	mov	r0, r5
 8029e96:	f7ff fbdf 	bl	8029658 <onstatechange>
 8029e9a:	e7e6      	b.n	8029e6a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 8029e9c:	2001      	movs	r0, #1
 8029e9e:	e7a2      	b.n	8029de6 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 8029ea0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8029ea2:	3301      	adds	r3, #1
 8029ea4:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8029ea6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8029ea8:	4628      	mov	r0, r5
 8029eaa:	f7ff fe8f 	bl	8029bcc <mg_tcpip_rx>
 8029eae:	e7e5      	b.n	8029e7c <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8029eb0:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 8029eb4:	a909      	add	r1, sp, #36	@ 0x24
 8029eb6:	4620      	mov	r0, r4
 8029eb8:	f7fa fcd7 	bl	802486a <mg_queue_next>
    if (len > 0) {
 8029ebc:	4680      	mov	r8, r0
 8029ebe:	2800      	cmp	r0, #0
 8029ec0:	d0dc      	beq.n	8029e7c <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 8029ec2:	4602      	mov	r2, r0
 8029ec4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029ec6:	4628      	mov	r0, r5
 8029ec8:	f7ff fe80 	bl	8029bcc <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 8029ecc:	4641      	mov	r1, r8
 8029ece:	4620      	mov	r0, r4
 8029ed0:	f7fa fce7 	bl	80248a2 <mg_queue_del>
 8029ed4:	e7d2      	b.n	8029e7c <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8029ed6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 8029eda:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8029ede:	4291      	cmp	r1, r2
 8029ee0:	f000 8088 	beq.w	8029ff4 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8029ee4:	4b53      	ldr	r3, [pc, #332]	@ (802a034 <mg_tcpip_poll+0x308>)
 8029ee6:	681b      	ldr	r3, [r3, #0]
 8029ee8:	2b03      	cmp	r3, #3
 8029eea:	dc23      	bgt.n	8029f34 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029eec:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8029ef0:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029ef4:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8029ef8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8029efc:	f7fc f922 	bl	8026144 <mg_ntohl>
 8029f00:	9007      	str	r0, [sp, #28]
 8029f02:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029f06:	f7fc f91d 	bl	8026144 <mg_ntohl>
 8029f0a:	2300      	movs	r3, #0
 8029f0c:	9305      	str	r3, [sp, #20]
 8029f0e:	9304      	str	r3, [sp, #16]
 8029f10:	9003      	str	r0, [sp, #12]
 8029f12:	9b07      	ldr	r3, [sp, #28]
 8029f14:	9302      	str	r3, [sp, #8]
 8029f16:	f8cd b004 	str.w	fp, [sp, #4]
 8029f1a:	f8cd a000 	str.w	sl, [sp]
 8029f1e:	2310      	movs	r3, #16
 8029f20:	4642      	mov	r2, r8
 8029f22:	4649      	mov	r1, r9
 8029f24:	4628      	mov	r0, r5
 8029f26:	f7fe f9e3 	bl	80282f0 <tx_tcp>
        s->acked = s->ack;
 8029f2a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8029f2e:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8029f32:	e045      	b.n	8029fc0 <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8029f34:	4b44      	ldr	r3, [pc, #272]	@ (802a048 <mg_tcpip_poll+0x31c>)
 8029f36:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 8029f3a:	4944      	ldr	r1, [pc, #272]	@ (802a04c <mg_tcpip_poll+0x320>)
 8029f3c:	2004      	movs	r0, #4
 8029f3e:	f7fc fcdb 	bl	80268f8 <mg_log_prefix>
 8029f42:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8029f46:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8029f4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029f4c:	4841      	ldr	r0, [pc, #260]	@ (802a054 <mg_tcpip_poll+0x328>)
 8029f4e:	f7fa fb81 	bl	8024654 <mg_log>
 8029f52:	e7cb      	b.n	8029eec <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 8029f54:	4940      	ldr	r1, [pc, #256]	@ (802a058 <mg_tcpip_poll+0x32c>)
 8029f56:	4620      	mov	r0, r4
 8029f58:	f7fc fdb6 	bl	8026ac8 <mg_error>
 8029f5c:	e030      	b.n	8029fc0 <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 8029f5e:	493f      	ldr	r1, [pc, #252]	@ (802a05c <mg_tcpip_poll+0x330>)
 8029f60:	4620      	mov	r0, r4
 8029f62:	f7fc fdb1 	bl	8026ac8 <mg_error>
 8029f66:	e02b      	b.n	8029fc0 <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 8029f68:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029f6c:	f043 0320 	orr.w	r3, r3, #32
 8029f70:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 8029f74:	e028      	b.n	8029fc8 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 8029f76:	493a      	ldr	r1, [pc, #232]	@ (802a060 <mg_tcpip_poll+0x334>)
 8029f78:	4620      	mov	r0, r4
 8029f7a:	f7fc fda5 	bl	8026ac8 <mg_error>
 8029f7e:	e01f      	b.n	8029fc0 <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029f80:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8029f84:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029f88:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 8029f8c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029f90:	3801      	subs	r0, #1
 8029f92:	f7fc f8d7 	bl	8026144 <mg_ntohl>
 8029f96:	9007      	str	r0, [sp, #28]
 8029f98:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029f9c:	f7fc f8d2 	bl	8026144 <mg_ntohl>
 8029fa0:	2300      	movs	r3, #0
 8029fa2:	9305      	str	r3, [sp, #20]
 8029fa4:	9304      	str	r3, [sp, #16]
 8029fa6:	9003      	str	r0, [sp, #12]
 8029fa8:	9b07      	ldr	r3, [sp, #28]
 8029faa:	9302      	str	r3, [sp, #8]
 8029fac:	f8cd b004 	str.w	fp, [sp, #4]
 8029fb0:	f8cd a000 	str.w	sl, [sp]
 8029fb4:	2310      	movs	r3, #16
 8029fb6:	4642      	mov	r2, r8
 8029fb8:	4649      	mov	r1, r9
 8029fba:	4628      	mov	r0, r5
 8029fbc:	f7fe f998 	bl	80282f0 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 8029fc0:	2100      	movs	r1, #0
 8029fc2:	4620      	mov	r0, r4
 8029fc4:	f7fe fa70 	bl	80284a8 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8029fc8:	6824      	ldr	r4, [r4, #0]
 8029fca:	b384      	cbz	r4, 802a02e <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 8029fcc:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 8029fd0:	f240 1209 	movw	r2, #265	@ 0x109
 8029fd4:	421a      	tst	r2, r3
 8029fd6:	d1f7      	bne.n	8029fc8 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8029fd8:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 8029fdc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8029fe0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 8029fe4:	42b2      	cmp	r2, r6
 8029fe6:	41bb      	sbcs	r3, r7
 8029fe8:	d2ee      	bcs.n	8029fc8 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8029fea:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8029fee:	2b01      	cmp	r3, #1
 8029ff0:	f43f af71 	beq.w	8029ed6 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 8029ff4:	2b02      	cmp	r3, #2
 8029ff6:	d0ad      	beq.n	8029f54 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 8029ff8:	2b03      	cmp	r3, #3
 8029ffa:	d0b0      	beq.n	8029f5e <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 8029ffc:	2b04      	cmp	r3, #4
 8029ffe:	d0b3      	beq.n	8029f68 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 802a000:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 802a004:	1c5a      	adds	r2, r3, #1
 802a006:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 802a00a:	2b02      	cmp	r3, #2
 802a00c:	d8b3      	bhi.n	8029f76 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 802a00e:	4b09      	ldr	r3, [pc, #36]	@ (802a034 <mg_tcpip_poll+0x308>)
 802a010:	681b      	ldr	r3, [r3, #0]
 802a012:	2b03      	cmp	r3, #3
 802a014:	ddb4      	ble.n	8029f80 <mg_tcpip_poll+0x254>
 802a016:	4b0c      	ldr	r3, [pc, #48]	@ (802a048 <mg_tcpip_poll+0x31c>)
 802a018:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 802a01c:	490b      	ldr	r1, [pc, #44]	@ (802a04c <mg_tcpip_poll+0x320>)
 802a01e:	2004      	movs	r0, #4
 802a020:	f7fc fc6a 	bl	80268f8 <mg_log_prefix>
 802a024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a026:	480f      	ldr	r0, [pc, #60]	@ (802a064 <mg_tcpip_poll+0x338>)
 802a028:	f7fa fb14 	bl	8024654 <mg_log>
 802a02c:	e7a8      	b.n	8029f80 <mg_tcpip_poll+0x254>
}
 802a02e:	b00b      	add	sp, #44	@ 0x2c
 802a030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a034:	2000012c 	.word	0x2000012c
 802a038:	001b7740 	.word	0x001b7740
 802a03c:	88888889 	.word	0x88888889
 802a040:	eeeeeeef 	.word	0xeeeeeeef
 802a044:	0803bfec 	.word	0x0803bfec
 802a048:	0803bed4 	.word	0x0803bed4
 802a04c:	0803b564 	.word	0x0803b564
 802a050:	0803bcc8 	.word	0x0803bcc8
 802a054:	0803bcd8 	.word	0x0803bcd8
 802a058:	0803bce8 	.word	0x0803bce8
 802a05c:	0803bcf4 	.word	0x0803bcf4
 802a060:	0803bd0c 	.word	0x0803bd0c
 802a064:	0803bd08 	.word	0x0803bd08

0802a068 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 802a068:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a06a:	b087      	sub	sp, #28
 802a06c:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 802a06e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 802a070:	f7fc fc3c 	bl	80268ec <mg_millis>
 802a074:	4602      	mov	r2, r0
 802a076:	460b      	mov	r3, r1
 802a078:	9004      	str	r0, [sp, #16]
 802a07a:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 802a07c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 802a080:	f7fb fefe 	bl	8025e80 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 802a084:	2d00      	cmp	r5, #0
 802a086:	d078      	beq.n	802a17a <mg_mgr_poll+0x112>
 802a088:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802a08a:	2b00      	cmp	r3, #0
 802a08c:	d075      	beq.n	802a17a <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 802a08e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a092:	4628      	mov	r0, r5
 802a094:	f7ff fe4a 	bl	8029d2c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 802a098:	6824      	ldr	r4, [r4, #0]
 802a09a:	e040      	b.n	802a11e <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802a09c:	4b38      	ldr	r3, [pc, #224]	@ (802a180 <mg_mgr_poll+0x118>)
 802a09e:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 802a0a2:	4938      	ldr	r1, [pc, #224]	@ (802a184 <mg_mgr_poll+0x11c>)
 802a0a4:	2004      	movs	r0, #4
 802a0a6:	f7fc fc27 	bl	80268f8 <mg_log_prefix>
 802a0aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a0ac:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 802a0b0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 802a0b4:	d019      	beq.n	802a0ea <mg_mgr_poll+0x82>
 802a0b6:	2254      	movs	r2, #84	@ 0x54
 802a0b8:	f010 0f20 	tst.w	r0, #32
 802a0bc:	d017      	beq.n	802a0ee <mg_mgr_poll+0x86>
 802a0be:	2343      	movs	r3, #67	@ 0x43
 802a0c0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802a0c4:	d115      	bne.n	802a0f2 <mg_mgr_poll+0x8a>
 802a0c6:	2668      	movs	r6, #104	@ 0x68
 802a0c8:	f010 0f08 	tst.w	r0, #8
 802a0cc:	d013      	beq.n	802a0f6 <mg_mgr_poll+0x8e>
 802a0ce:	2752      	movs	r7, #82	@ 0x52
 802a0d0:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 802a0d4:	f010 0f20 	tst.w	r0, #32
 802a0d8:	d00f      	beq.n	802a0fa <mg_mgr_poll+0x92>
 802a0da:	2043      	movs	r0, #67	@ 0x43
 802a0dc:	9002      	str	r0, [sp, #8]
 802a0de:	9701      	str	r7, [sp, #4]
 802a0e0:	9600      	str	r6, [sp, #0]
 802a0e2:	4829      	ldr	r0, [pc, #164]	@ (802a188 <mg_mgr_poll+0x120>)
 802a0e4:	f7fa fab6 	bl	8024654 <mg_log>
 802a0e8:	e024      	b.n	802a134 <mg_mgr_poll+0xcc>
 802a0ea:	2274      	movs	r2, #116	@ 0x74
 802a0ec:	e7e4      	b.n	802a0b8 <mg_mgr_poll+0x50>
 802a0ee:	2363      	movs	r3, #99	@ 0x63
 802a0f0:	e7e6      	b.n	802a0c0 <mg_mgr_poll+0x58>
 802a0f2:	2648      	movs	r6, #72	@ 0x48
 802a0f4:	e7e8      	b.n	802a0c8 <mg_mgr_poll+0x60>
 802a0f6:	2772      	movs	r7, #114	@ 0x72
 802a0f8:	e7ea      	b.n	802a0d0 <mg_mgr_poll+0x68>
 802a0fa:	2063      	movs	r0, #99	@ 0x63
 802a0fc:	e7ee      	b.n	802a0dc <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 802a0fe:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 802a102:	4620      	mov	r0, r4
 802a104:	f7fc fd18 	bl	8026b38 <handle_tls_recv>
 802a108:	e01e      	b.n	802a148 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 802a10a:	4620      	mov	r0, r4
 802a10c:	f7fe fa6a 	bl	80285e4 <write_conn>
 802a110:	e01f      	b.n	802a152 <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 802a112:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a116:	f013 0f20 	tst.w	r3, #32
 802a11a:	d12a      	bne.n	802a172 <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802a11c:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 802a11e:	b364      	cbz	r4, 802a17a <mg_mgr_poll+0x112>
    tmp = c->next;
 802a120:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 802a122:	aa04      	add	r2, sp, #16
 802a124:	2102      	movs	r1, #2
 802a126:	4620      	mov	r0, r4
 802a128:	f7f9 f84b 	bl	80231c2 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802a12c:	4b17      	ldr	r3, [pc, #92]	@ (802a18c <mg_mgr_poll+0x124>)
 802a12e:	681b      	ldr	r3, [r3, #0]
 802a130:	2b03      	cmp	r3, #3
 802a132:	dcb3      	bgt.n	802a09c <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 802a134:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802a138:	f013 0f40 	tst.w	r3, #64	@ 0x40
 802a13c:	d004      	beq.n	802a148 <mg_mgr_poll+0xe0>
 802a13e:	4620      	mov	r0, r4
 802a140:	f7fb fee8 	bl	8025f14 <mg_tls_pending>
 802a144:	2800      	cmp	r0, #0
 802a146:	d1da      	bne.n	802a0fe <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 802a148:	4620      	mov	r0, r4
 802a14a:	f7f7 fbfb 	bl	8021944 <can_write>
 802a14e:	2800      	cmp	r0, #0
 802a150:	d1db      	bne.n	802a10a <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 802a152:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a156:	f013 0f10 	tst.w	r3, #16
 802a15a:	d0da      	beq.n	802a112 <mg_mgr_poll+0xaa>
 802a15c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802a15e:	2b00      	cmp	r3, #0
 802a160:	d1d7      	bne.n	802a112 <mg_mgr_poll+0xaa>
 802a162:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802a166:	2b04      	cmp	r3, #4
 802a168:	d0d3      	beq.n	802a112 <mg_mgr_poll+0xaa>
      init_closure(c);
 802a16a:	4620      	mov	r0, r4
 802a16c:	f7fe fa66 	bl	802863c <init_closure>
 802a170:	e7cf      	b.n	802a112 <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 802a172:	4620      	mov	r0, r4
 802a174:	f7fd fb7e 	bl	8027874 <close_conn>
 802a178:	e7d0      	b.n	802a11c <mg_mgr_poll+0xb4>
}
 802a17a:	b007      	add	sp, #28
 802a17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a17e:	bf00      	nop
 802a180:	0803bee4 	.word	0x0803bee4
 802a184:	0803b564 	.word	0x0803b564
 802a188:	0803bd18 	.word	0x0803bd18
 802a18c:	2000012c 	.word	0x2000012c

0802a190 <mg_now>:
uint64_t mg_now(void) {
 802a190:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 802a192:	f7fc fbab 	bl	80268ec <mg_millis>
 802a196:	4a03      	ldr	r2, [pc, #12]	@ (802a1a4 <mg_now+0x14>)
 802a198:	6813      	ldr	r3, [r2, #0]
 802a19a:	6852      	ldr	r2, [r2, #4]
 802a19c:	18c0      	adds	r0, r0, r3
}
 802a19e:	eb42 0101 	adc.w	r1, r2, r1
 802a1a2:	bd08      	pop	{r3, pc}
 802a1a4:	20019f78 	.word	0x20019f78

0802a1a8 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 802a1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a1ac:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 802a1ae:	460a      	mov	r2, r1
 802a1b0:	b129      	cbz	r1, 802a1be <mg_sntp_parse+0x16>
 802a1b2:	7801      	ldrb	r1, [r0, #0]
 802a1b4:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 802a1b8:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 802a1bc:	e001      	b.n	802a1c2 <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 802a1be:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 802a1c0:	461d      	mov	r5, r3
  if (len < 48) {
 802a1c2:	2a2f      	cmp	r2, #47	@ 0x2f
 802a1c4:	d817      	bhi.n	802a1f6 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 802a1c6:	4b4b      	ldr	r3, [pc, #300]	@ (802a2f4 <mg_sntp_parse+0x14c>)
 802a1c8:	681b      	ldr	r3, [r3, #0]
 802a1ca:	2b00      	cmp	r3, #0
 802a1cc:	dc04      	bgt.n	802a1d8 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 802a1ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a1d2:	4601      	mov	r1, r0
}
 802a1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 802a1d8:	4b47      	ldr	r3, [pc, #284]	@ (802a2f8 <mg_sntp_parse+0x150>)
 802a1da:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 802a1de:	4947      	ldr	r1, [pc, #284]	@ (802a2fc <mg_sntp_parse+0x154>)
 802a1e0:	2001      	movs	r0, #1
 802a1e2:	f7fc fb89 	bl	80268f8 <mg_log_prefix>
 802a1e6:	4946      	ldr	r1, [pc, #280]	@ (802a300 <mg_sntp_parse+0x158>)
 802a1e8:	4846      	ldr	r0, [pc, #280]	@ (802a304 <mg_sntp_parse+0x15c>)
 802a1ea:	f7fa fa33 	bl	8024654 <mg_log>
  int64_t epoch_milliseconds = -1;
 802a1ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a1f2:	4601      	mov	r1, r0
 802a1f4:	e7ee      	b.n	802a1d4 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 802a1f6:	3b04      	subs	r3, #4
 802a1f8:	2b01      	cmp	r3, #1
 802a1fa:	d916      	bls.n	802a22a <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 802a1fc:	4b3d      	ldr	r3, [pc, #244]	@ (802a2f4 <mg_sntp_parse+0x14c>)
 802a1fe:	681b      	ldr	r3, [r3, #0]
 802a200:	2b00      	cmp	r3, #0
 802a202:	dc03      	bgt.n	802a20c <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 802a204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a208:	4601      	mov	r1, r0
 802a20a:	e7e3      	b.n	802a1d4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 802a20c:	4b3a      	ldr	r3, [pc, #232]	@ (802a2f8 <mg_sntp_parse+0x150>)
 802a20e:	f641 4210 	movw	r2, #7184	@ 0x1c10
 802a212:	493a      	ldr	r1, [pc, #232]	@ (802a2fc <mg_sntp_parse+0x154>)
 802a214:	2001      	movs	r0, #1
 802a216:	f7fc fb6f 	bl	80268f8 <mg_log_prefix>
 802a21a:	493b      	ldr	r1, [pc, #236]	@ (802a308 <mg_sntp_parse+0x160>)
 802a21c:	4839      	ldr	r0, [pc, #228]	@ (802a304 <mg_sntp_parse+0x15c>)
 802a21e:	f7fa fa19 	bl	8024654 <mg_log>
  int64_t epoch_milliseconds = -1;
 802a222:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a226:	4601      	mov	r1, r0
 802a228:	e7d4      	b.n	802a1d4 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 802a22a:	7863      	ldrb	r3, [r4, #1]
 802a22c:	b9b3      	cbnz	r3, 802a25c <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 802a22e:	4b31      	ldr	r3, [pc, #196]	@ (802a2f4 <mg_sntp_parse+0x14c>)
 802a230:	681b      	ldr	r3, [r3, #0]
 802a232:	2b00      	cmp	r3, #0
 802a234:	dc03      	bgt.n	802a23e <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 802a236:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a23a:	4601      	mov	r1, r0
 802a23c:	e7ca      	b.n	802a1d4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 802a23e:	4b2e      	ldr	r3, [pc, #184]	@ (802a2f8 <mg_sntp_parse+0x150>)
 802a240:	f641 4212 	movw	r2, #7186	@ 0x1c12
 802a244:	492d      	ldr	r1, [pc, #180]	@ (802a2fc <mg_sntp_parse+0x154>)
 802a246:	2001      	movs	r0, #1
 802a248:	f7fc fb56 	bl	80268f8 <mg_log_prefix>
 802a24c:	492f      	ldr	r1, [pc, #188]	@ (802a30c <mg_sntp_parse+0x164>)
 802a24e:	482d      	ldr	r0, [pc, #180]	@ (802a304 <mg_sntp_parse+0x15c>)
 802a250:	f7fa fa00 	bl	8024654 <mg_log>
  int64_t epoch_milliseconds = -1;
 802a254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a258:	4601      	mov	r1, r0
 802a25a:	e7bb      	b.n	802a1d4 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 802a25c:	1eeb      	subs	r3, r5, #3
 802a25e:	2b01      	cmp	r3, #1
 802a260:	d907      	bls.n	802a272 <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 802a262:	4b24      	ldr	r3, [pc, #144]	@ (802a2f4 <mg_sntp_parse+0x14c>)
 802a264:	681b      	ldr	r3, [r3, #0]
 802a266:	2b00      	cmp	r3, #0
 802a268:	dc35      	bgt.n	802a2d6 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 802a26a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a26e:	4601      	mov	r1, r0
  return epoch_milliseconds;
 802a270:	e7b0      	b.n	802a1d4 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 802a272:	f104 0018 	add.w	r0, r4, #24
 802a276:	f7fb ffc3 	bl	8026200 <gettimestamp>
 802a27a:	4606      	mov	r6, r0
 802a27c:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 802a27e:	f104 0020 	add.w	r0, r4, #32
 802a282:	f7fb ffbd 	bl	8026200 <gettimestamp>
 802a286:	4680      	mov	r8, r0
 802a288:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 802a28a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 802a28e:	f7fb ffb7 	bl	8026200 <gettimestamp>
 802a292:	4607      	mov	r7, r0
 802a294:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 802a296:	f7fc fb29 	bl	80268ec <mg_millis>
 802a29a:	4605      	mov	r5, r0
 802a29c:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 802a29e:	1b86      	subs	r6, r0, r6
 802a2a0:	eb61 020a 	sbc.w	r2, r1, sl
 802a2a4:	ebb7 0808 	subs.w	r8, r7, r8
 802a2a8:	eb64 0909 	sbc.w	r9, r4, r9
 802a2ac:	ebb6 0608 	subs.w	r6, r6, r8
 802a2b0:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 802a2b4:	0fd3      	lsrs	r3, r2, #31
 802a2b6:	199b      	adds	r3, r3, r6
 802a2b8:	f142 0200 	adc.w	r2, r2, #0
 802a2bc:	085b      	lsrs	r3, r3, #1
 802a2be:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 802a2c2:	19d8      	adds	r0, r3, r7
 802a2c4:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 802a2c8:	1b45      	subs	r5, r0, r5
 802a2ca:	eb61 030c 	sbc.w	r3, r1, ip
 802a2ce:	4a10      	ldr	r2, [pc, #64]	@ (802a310 <mg_sntp_parse+0x168>)
 802a2d0:	6015      	str	r5, [r2, #0]
 802a2d2:	6053      	str	r3, [r2, #4]
 802a2d4:	e77e      	b.n	802a1d4 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 802a2d6:	4b08      	ldr	r3, [pc, #32]	@ (802a2f8 <mg_sntp_parse+0x150>)
 802a2d8:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 802a2dc:	4907      	ldr	r1, [pc, #28]	@ (802a2fc <mg_sntp_parse+0x154>)
 802a2de:	2001      	movs	r0, #1
 802a2e0:	f7fc fb0a 	bl	80268f8 <mg_log_prefix>
 802a2e4:	4629      	mov	r1, r5
 802a2e6:	480b      	ldr	r0, [pc, #44]	@ (802a314 <mg_sntp_parse+0x16c>)
 802a2e8:	f7fa f9b4 	bl	8024654 <mg_log>
  int64_t epoch_milliseconds = -1;
 802a2ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a2f0:	4601      	mov	r1, r0
 802a2f2:	e76f      	b.n	802a1d4 <mg_sntp_parse+0x2c>
 802a2f4:	2000012c 	.word	0x2000012c
 802a2f8:	0803be34 	.word	0x0803be34
 802a2fc:	0803b564 	.word	0x0803b564
 802a300:	0803bd2c 	.word	0x0803bd2c
 802a304:	0803b87c 	.word	0x0803b87c
 802a308:	0803bd3c 	.word	0x0803bd3c
 802a30c:	0803bd50 	.word	0x0803bd50
 802a310:	20019f78 	.word	0x20019f78
 802a314:	0803bd6c 	.word	0x0803bd6c

0802a318 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 802a318:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 802a31c:	b08c      	sub	sp, #48	@ 0x30
 802a31e:	4604      	mov	r4, r0
  if (c->is_resolving) {
 802a320:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 802a324:	f013 0f08 	tst.w	r3, #8
 802a328:	d012      	beq.n	802a350 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 802a32a:	4b2b      	ldr	r3, [pc, #172]	@ (802a3d8 <mg_sntp_request+0xc0>)
 802a32c:	681b      	ldr	r3, [r3, #0]
 802a32e:	2b00      	cmp	r3, #0
 802a330:	dc02      	bgt.n	802a338 <mg_sntp_request+0x20>
}
 802a332:	b00c      	add	sp, #48	@ 0x30
 802a334:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 802a338:	4b28      	ldr	r3, [pc, #160]	@ (802a3dc <mg_sntp_request+0xc4>)
 802a33a:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 802a33e:	4928      	ldr	r1, [pc, #160]	@ (802a3e0 <mg_sntp_request+0xc8>)
 802a340:	2001      	movs	r0, #1
 802a342:	f7fc fad9 	bl	80268f8 <mg_log_prefix>
 802a346:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a348:	4826      	ldr	r0, [pc, #152]	@ (802a3e4 <mg_sntp_request+0xcc>)
 802a34a:	f7fa f983 	bl	8024654 <mg_log>
 802a34e:	e7f0      	b.n	802a332 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 802a350:	f7fc facc 	bl	80268ec <mg_millis>
 802a354:	4606      	mov	r6, r0
 802a356:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 802a358:	2100      	movs	r1, #0
 802a35a:	9100      	str	r1, [sp, #0]
 802a35c:	222c      	movs	r2, #44	@ 0x2c
 802a35e:	a801      	add	r0, sp, #4
 802a360:	f002 fec6 	bl	802d0f0 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 802a364:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a368:	2300      	movs	r3, #0
 802a36a:	4630      	mov	r0, r6
 802a36c:	4629      	mov	r1, r5
 802a36e:	f7e6 fca3 	bl	8010cb8 <__aeabi_ldivmod>
 802a372:	4610      	mov	r0, r2
 802a374:	4619      	mov	r1, r3
 802a376:	f7e6 f929 	bl	80105cc <__aeabi_l2d>
 802a37a:	2200      	movs	r2, #0
 802a37c:	4b1a      	ldr	r3, [pc, #104]	@ (802a3e8 <mg_sntp_request+0xd0>)
 802a37e:	f7e6 fa7d 	bl	801087c <__aeabi_ddiv>
 802a382:	a313      	add	r3, pc, #76	@ (adr r3, 802a3d0 <mg_sntp_request+0xb8>)
 802a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a388:	f7e6 f94e 	bl	8010628 <__aeabi_dmul>
 802a38c:	4680      	mov	r8, r0
 802a38e:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 802a390:	2323      	movs	r3, #35	@ 0x23
 802a392:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 802a396:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a39a:	2300      	movs	r3, #0
 802a39c:	4630      	mov	r0, r6
 802a39e:	4629      	mov	r1, r5
 802a3a0:	f7e6 fc8a 	bl	8010cb8 <__aeabi_ldivmod>
 802a3a4:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 802a3a8:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 802a3ac:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 802a3b0:	f7fb fec8 	bl	8026144 <mg_ntohl>
 802a3b4:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 802a3b6:	4640      	mov	r0, r8
 802a3b8:	4649      	mov	r1, r9
 802a3ba:	f7e6 fc0d 	bl	8010bd8 <__aeabi_d2uiz>
 802a3be:	f7fb fec1 	bl	8026144 <mg_ntohl>
 802a3c2:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 802a3c4:	2230      	movs	r2, #48	@ 0x30
 802a3c6:	4669      	mov	r1, sp
 802a3c8:	4620      	mov	r0, r4
 802a3ca:	f7fd fb49 	bl	8027a60 <mg_send>
}
 802a3ce:	e7b0      	b.n	802a332 <mg_sntp_request+0x1a>
 802a3d0:	ffe00000 	.word	0xffe00000
 802a3d4:	41efffff 	.word	0x41efffff
 802a3d8:	2000012c 	.word	0x2000012c
 802a3dc:	0803be24 	.word	0x0803be24
 802a3e0:	0803b564 	.word	0x0803b564
 802a3e4:	0803bd84 	.word	0x0803bd84
 802a3e8:	408f4000 	.word	0x408f4000

0802a3ec <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 802a3ec:	b570      	push	{r4, r5, r6, lr}
 802a3ee:	b082      	sub	sp, #8
 802a3f0:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 802a3f2:	3901      	subs	r1, #1
 802a3f4:	2906      	cmp	r1, #6
 802a3f6:	d810      	bhi.n	802a41a <sntp_cb+0x2e>
 802a3f8:	e8df f001 	tbb	[pc, r1]
 802a3fc:	110f4604 	.word	0x110f4604
 802a400:	0f0f      	.short	0x0f0f
 802a402:	14          	.byte	0x14
 802a403:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 802a404:	f7fc fa72 	bl	80268ec <mg_millis>
 802a408:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 802a40c:	18c0      	adds	r0, r0, r3
 802a40e:	f141 0100 	adc.w	r1, r1, #0
 802a412:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802a416:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 802a41a:	b002      	add	sp, #8
 802a41c:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 802a41e:	f7ff ff7b 	bl	802a318 <mg_sntp_request>
 802a422:	e7fa      	b.n	802a41a <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 802a424:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802a426:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802a428:	f7ff febe 	bl	802a1a8 <mg_sntp_parse>
 802a42c:	4605      	mov	r5, r0
 802a42e:	460e      	mov	r6, r1
 802a430:	9000      	str	r0, [sp, #0]
 802a432:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 802a434:	2801      	cmp	r0, #1
 802a436:	f171 0300 	sbcs.w	r3, r1, #0
 802a43a:	da06      	bge.n	802a44a <sntp_cb+0x5e>
    c->is_closing = 1;
 802a43c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a440:	f043 0320 	orr.w	r3, r3, #32
 802a444:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 802a448:	e7e7      	b.n	802a41a <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 802a44a:	f7fc fa4f 	bl	80268ec <mg_millis>
 802a44e:	1a2d      	subs	r5, r5, r0
 802a450:	eb66 0601 	sbc.w	r6, r6, r1
 802a454:	4b14      	ldr	r3, [pc, #80]	@ (802a4a8 <sntp_cb+0xbc>)
 802a456:	601d      	str	r5, [r3, #0]
 802a458:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 802a45a:	466a      	mov	r2, sp
 802a45c:	2112      	movs	r1, #18
 802a45e:	4620      	mov	r0, r4
 802a460:	f7f8 feaf 	bl	80231c2 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 802a464:	4b11      	ldr	r3, [pc, #68]	@ (802a4ac <sntp_cb+0xc0>)
 802a466:	681b      	ldr	r3, [r3, #0]
 802a468:	2b02      	cmp	r3, #2
 802a46a:	dde7      	ble.n	802a43c <sntp_cb+0x50>
 802a46c:	4b10      	ldr	r3, [pc, #64]	@ (802a4b0 <sntp_cb+0xc4>)
 802a46e:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 802a472:	4910      	ldr	r1, [pc, #64]	@ (802a4b4 <sntp_cb+0xc8>)
 802a474:	2003      	movs	r0, #3
 802a476:	f7fc fa3f 	bl	80268f8 <mg_log_prefix>
 802a47a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802a47e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a480:	480d      	ldr	r0, [pc, #52]	@ (802a4b8 <sntp_cb+0xcc>)
 802a482:	f7fa f8e7 	bl	8024654 <mg_log>
 802a486:	e7d9      	b.n	802a43c <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 802a488:	f7fc fa30 	bl	80268ec <mg_millis>
 802a48c:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 802a490:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 802a494:	4282      	cmp	r2, r0
 802a496:	418b      	sbcs	r3, r1
 802a498:	d2bf      	bcs.n	802a41a <sntp_cb+0x2e>
 802a49a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a49e:	f043 0320 	orr.w	r3, r3, #32
 802a4a2:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 802a4a6:	e7b8      	b.n	802a41a <sntp_cb+0x2e>
 802a4a8:	20019f78 	.word	0x20019f78
 802a4ac:	2000012c 	.word	0x2000012c
 802a4b0:	0803be1c 	.word	0x0803be1c
 802a4b4:	0803b564 	.word	0x0803b564
 802a4b8:	0803bd9c 	.word	0x0803bd9c

0802a4bc <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 802a4bc:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 802a4be:	460d      	mov	r5, r1
 802a4c0:	b169      	cbz	r1, 802a4de <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 802a4c2:	4629      	mov	r1, r5
 802a4c4:	f7fe ffa0 	bl	8029408 <mg_connect>
 802a4c8:	4604      	mov	r4, r0
 802a4ca:	b130      	cbz	r0, 802a4da <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 802a4cc:	4b05      	ldr	r3, [pc, #20]	@ (802a4e4 <mg_sntp_connect+0x28>)
 802a4ce:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 802a4d2:	462a      	mov	r2, r5
 802a4d4:	2101      	movs	r1, #1
 802a4d6:	f7ff ff89 	bl	802a3ec <sntp_cb>
}
 802a4da:	4620      	mov	r0, r4
 802a4dc:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 802a4de:	4d02      	ldr	r5, [pc, #8]	@ (802a4e8 <mg_sntp_connect+0x2c>)
 802a4e0:	e7ef      	b.n	802a4c2 <mg_sntp_connect+0x6>
 802a4e2:	bf00      	nop
 802a4e4:	0802a3ed 	.word	0x0802a3ed
 802a4e8:	0803bdc0 	.word	0x0803bdc0

0802a4ec <has_mqtt_prefix>:
 802a4ec:	b508      	push	{r3, lr}
 802a4ee:	2207      	movs	r2, #7
 802a4f0:	4903      	ldr	r1, [pc, #12]	@ (802a500 <has_mqtt_prefix+0x14>)
 802a4f2:	f002 fe32 	bl	802d15a <strncmp>
 802a4f6:	fab0 f080 	clz	r0, r0
 802a4fa:	0940      	lsrs	r0, r0, #5
 802a4fc:	bd08      	pop	{r3, pc}
 802a4fe:	bf00      	nop
 802a500:	0803c43c 	.word	0x0803c43c

0802a504 <is_valid_ip_or_domain>:
 802a504:	b570      	push	{r4, r5, r6, lr}
 802a506:	4604      	mov	r4, r0
 802a508:	2200      	movs	r2, #0
 802a50a:	4610      	mov	r0, r2
 802a50c:	e001      	b.n	802a512 <is_valid_ip_or_domain+0xe>
 802a50e:	3001      	adds	r0, #1
 802a510:	3201      	adds	r2, #1
 802a512:	5ca3      	ldrb	r3, [r4, r2]
 802a514:	b143      	cbz	r3, 802a528 <is_valid_ip_or_domain+0x24>
 802a516:	2b2e      	cmp	r3, #46	@ 0x2e
 802a518:	d0f9      	beq.n	802a50e <is_valid_ip_or_domain+0xa>
 802a51a:	491d      	ldr	r1, [pc, #116]	@ (802a590 <is_valid_ip_or_domain+0x8c>)
 802a51c:	5ccb      	ldrb	r3, [r1, r3]
 802a51e:	f013 0f04 	tst.w	r3, #4
 802a522:	d1f5      	bne.n	802a510 <is_valid_ip_or_domain+0xc>
 802a524:	2500      	movs	r5, #0
 802a526:	e000      	b.n	802a52a <is_valid_ip_or_domain+0x26>
 802a528:	2501      	movs	r5, #1
 802a52a:	b335      	cbz	r5, 802a57a <is_valid_ip_or_domain+0x76>
 802a52c:	2803      	cmp	r0, #3
 802a52e:	d013      	beq.n	802a558 <is_valid_ip_or_domain+0x54>
 802a530:	2200      	movs	r2, #0
 802a532:	4615      	mov	r5, r2
 802a534:	e014      	b.n	802a560 <is_valid_ip_or_domain+0x5c>
 802a536:	3601      	adds	r6, #1
 802a538:	2e03      	cmp	r6, #3
 802a53a:	dc24      	bgt.n	802a586 <is_valid_ip_or_domain+0x82>
 802a53c:	4620      	mov	r0, r4
 802a53e:	f000 f8a3 	bl	802a688 <atoi>
 802a542:	28ff      	cmp	r0, #255	@ 0xff
 802a544:	d821      	bhi.n	802a58a <is_valid_ip_or_domain+0x86>
 802a546:	212e      	movs	r1, #46	@ 0x2e
 802a548:	4620      	mov	r0, r4
 802a54a:	f002 fde8 	bl	802d11e <strchr>
 802a54e:	4604      	mov	r4, r0
 802a550:	2800      	cmp	r0, #0
 802a552:	d0f0      	beq.n	802a536 <is_valid_ip_or_domain+0x32>
 802a554:	3401      	adds	r4, #1
 802a556:	e7ee      	b.n	802a536 <is_valid_ip_or_domain+0x32>
 802a558:	2600      	movs	r6, #0
 802a55a:	e7ed      	b.n	802a538 <is_valid_ip_or_domain+0x34>
 802a55c:	3501      	adds	r5, #1
 802a55e:	3201      	adds	r2, #1
 802a560:	5ca3      	ldrb	r3, [r4, r2]
 802a562:	b163      	cbz	r3, 802a57e <is_valid_ip_or_domain+0x7a>
 802a564:	2b2e      	cmp	r3, #46	@ 0x2e
 802a566:	d0f9      	beq.n	802a55c <is_valid_ip_or_domain+0x58>
 802a568:	4909      	ldr	r1, [pc, #36]	@ (802a590 <is_valid_ip_or_domain+0x8c>)
 802a56a:	5cc9      	ldrb	r1, [r1, r3]
 802a56c:	f011 0f07 	tst.w	r1, #7
 802a570:	d1f5      	bne.n	802a55e <is_valid_ip_or_domain+0x5a>
 802a572:	2b2d      	cmp	r3, #45	@ 0x2d
 802a574:	d0f3      	beq.n	802a55e <is_valid_ip_or_domain+0x5a>
 802a576:	2500      	movs	r5, #0
 802a578:	e005      	b.n	802a586 <is_valid_ip_or_domain+0x82>
 802a57a:	462a      	mov	r2, r5
 802a57c:	e7f0      	b.n	802a560 <is_valid_ip_or_domain+0x5c>
 802a57e:	2d00      	cmp	r5, #0
 802a580:	bfd4      	ite	le
 802a582:	2500      	movle	r5, #0
 802a584:	2501      	movgt	r5, #1
 802a586:	4628      	mov	r0, r5
 802a588:	bd70      	pop	{r4, r5, r6, pc}
 802a58a:	2500      	movs	r5, #0
 802a58c:	e7fb      	b.n	802a586 <is_valid_ip_or_domain+0x82>
 802a58e:	bf00      	nop
 802a590:	0803c8dd 	.word	0x0803c8dd

0802a594 <is_valid_port>:
 802a594:	b510      	push	{r4, lr}
 802a596:	4604      	mov	r4, r0
 802a598:	f000 f876 	bl	802a688 <atoi>
 802a59c:	3801      	subs	r0, #1
 802a59e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 802a5a2:	4298      	cmp	r0, r3
 802a5a4:	d80a      	bhi.n	802a5bc <is_valid_port+0x28>
 802a5a6:	7823      	ldrb	r3, [r4, #0]
 802a5a8:	b133      	cbz	r3, 802a5b8 <is_valid_port+0x24>
 802a5aa:	4a06      	ldr	r2, [pc, #24]	@ (802a5c4 <is_valid_port+0x30>)
 802a5ac:	5cd3      	ldrb	r3, [r2, r3]
 802a5ae:	f013 0f04 	tst.w	r3, #4
 802a5b2:	d005      	beq.n	802a5c0 <is_valid_port+0x2c>
 802a5b4:	3401      	adds	r4, #1
 802a5b6:	e7f6      	b.n	802a5a6 <is_valid_port+0x12>
 802a5b8:	2001      	movs	r0, #1
 802a5ba:	e000      	b.n	802a5be <is_valid_port+0x2a>
 802a5bc:	2000      	movs	r0, #0
 802a5be:	bd10      	pop	{r4, pc}
 802a5c0:	2000      	movs	r0, #0
 802a5c2:	e7fc      	b.n	802a5be <is_valid_port+0x2a>
 802a5c4:	0803c8dd 	.word	0x0803c8dd

0802a5c8 <is_valid_mqtt_url>:
 802a5c8:	b570      	push	{r4, r5, r6, lr}
 802a5ca:	b0c0      	sub	sp, #256	@ 0x100
 802a5cc:	4604      	mov	r4, r0
 802a5ce:	f7ff ff8d 	bl	802a4ec <has_mqtt_prefix>
 802a5d2:	b1d0      	cbz	r0, 802a60a <is_valid_mqtt_url+0x42>
 802a5d4:	3407      	adds	r4, #7
 802a5d6:	213a      	movs	r1, #58	@ 0x3a
 802a5d8:	4620      	mov	r0, r4
 802a5da:	f002 fda0 	bl	802d11e <strchr>
 802a5de:	4606      	mov	r6, r0
 802a5e0:	b1c8      	cbz	r0, 802a616 <is_valid_mqtt_url+0x4e>
 802a5e2:	1b05      	subs	r5, r0, r4
 802a5e4:	462a      	mov	r2, r5
 802a5e6:	4621      	mov	r1, r4
 802a5e8:	4668      	mov	r0, sp
 802a5ea:	f002 fdc8 	bl	802d17e <strncpy>
 802a5ee:	2300      	movs	r3, #0
 802a5f0:	f80d 3005 	strb.w	r3, [sp, r5]
 802a5f4:	4668      	mov	r0, sp
 802a5f6:	f7ff ff85 	bl	802a504 <is_valid_ip_or_domain>
 802a5fa:	b190      	cbz	r0, 802a622 <is_valid_mqtt_url+0x5a>
 802a5fc:	1c70      	adds	r0, r6, #1
 802a5fe:	f7ff ffc9 	bl	802a594 <is_valid_port>
 802a602:	b1a0      	cbz	r0, 802a62e <is_valid_mqtt_url+0x66>
 802a604:	2000      	movs	r0, #0
 802a606:	b040      	add	sp, #256	@ 0x100
 802a608:	bd70      	pop	{r4, r5, r6, pc}
 802a60a:	480c      	ldr	r0, [pc, #48]	@ (802a63c <is_valid_mqtt_url+0x74>)
 802a60c:	f002 f818 	bl	802c640 <puts>
 802a610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a614:	e7f7      	b.n	802a606 <is_valid_mqtt_url+0x3e>
 802a616:	480a      	ldr	r0, [pc, #40]	@ (802a640 <is_valid_mqtt_url+0x78>)
 802a618:	f002 f812 	bl	802c640 <puts>
 802a61c:	f06f 0001 	mvn.w	r0, #1
 802a620:	e7f1      	b.n	802a606 <is_valid_mqtt_url+0x3e>
 802a622:	4808      	ldr	r0, [pc, #32]	@ (802a644 <is_valid_mqtt_url+0x7c>)
 802a624:	f002 f80c 	bl	802c640 <puts>
 802a628:	f06f 0002 	mvn.w	r0, #2
 802a62c:	e7eb      	b.n	802a606 <is_valid_mqtt_url+0x3e>
 802a62e:	4806      	ldr	r0, [pc, #24]	@ (802a648 <is_valid_mqtt_url+0x80>)
 802a630:	f002 f806 	bl	802c640 <puts>
 802a634:	f06f 0003 	mvn.w	r0, #3
 802a638:	e7e5      	b.n	802a606 <is_valid_mqtt_url+0x3e>
 802a63a:	bf00      	nop
 802a63c:	0803c444 	.word	0x0803c444
 802a640:	0803c470 	.word	0x0803c470
 802a644:	0803c4a4 	.word	0x0803c4a4
 802a648:	0803c4c8 	.word	0x0803c4c8

0802a64c <__assert_func>:
 802a64c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a64e:	4614      	mov	r4, r2
 802a650:	461a      	mov	r2, r3
 802a652:	4b09      	ldr	r3, [pc, #36]	@ (802a678 <__assert_func+0x2c>)
 802a654:	681b      	ldr	r3, [r3, #0]
 802a656:	4605      	mov	r5, r0
 802a658:	68d8      	ldr	r0, [r3, #12]
 802a65a:	b954      	cbnz	r4, 802a672 <__assert_func+0x26>
 802a65c:	4b07      	ldr	r3, [pc, #28]	@ (802a67c <__assert_func+0x30>)
 802a65e:	461c      	mov	r4, r3
 802a660:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a664:	9100      	str	r1, [sp, #0]
 802a666:	462b      	mov	r3, r5
 802a668:	4905      	ldr	r1, [pc, #20]	@ (802a680 <__assert_func+0x34>)
 802a66a:	f000 f811 	bl	802a690 <fiprintf>
 802a66e:	f003 ffdf 	bl	802e630 <abort>
 802a672:	4b04      	ldr	r3, [pc, #16]	@ (802a684 <__assert_func+0x38>)
 802a674:	e7f4      	b.n	802a660 <__assert_func+0x14>
 802a676:	bf00      	nop
 802a678:	200002d8 	.word	0x200002d8
 802a67c:	0803c51e 	.word	0x0803c51e
 802a680:	0803c4f0 	.word	0x0803c4f0
 802a684:	0803c4e3 	.word	0x0803c4e3

0802a688 <atoi>:
 802a688:	220a      	movs	r2, #10
 802a68a:	2100      	movs	r1, #0
 802a68c:	f002 b8b6 	b.w	802c7fc <strtol>

0802a690 <fiprintf>:
 802a690:	b40e      	push	{r1, r2, r3}
 802a692:	b503      	push	{r0, r1, lr}
 802a694:	4601      	mov	r1, r0
 802a696:	ab03      	add	r3, sp, #12
 802a698:	4805      	ldr	r0, [pc, #20]	@ (802a6b0 <fiprintf+0x20>)
 802a69a:	f853 2b04 	ldr.w	r2, [r3], #4
 802a69e:	6800      	ldr	r0, [r0, #0]
 802a6a0:	9301      	str	r3, [sp, #4]
 802a6a2:	f001 fab7 	bl	802bc14 <_vfiprintf_r>
 802a6a6:	b002      	add	sp, #8
 802a6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 802a6ac:	b003      	add	sp, #12
 802a6ae:	4770      	bx	lr
 802a6b0:	200002d8 	.word	0x200002d8

0802a6b4 <printf>:
 802a6b4:	b40f      	push	{r0, r1, r2, r3}
 802a6b6:	b507      	push	{r0, r1, r2, lr}
 802a6b8:	4906      	ldr	r1, [pc, #24]	@ (802a6d4 <printf+0x20>)
 802a6ba:	ab04      	add	r3, sp, #16
 802a6bc:	6808      	ldr	r0, [r1, #0]
 802a6be:	f853 2b04 	ldr.w	r2, [r3], #4
 802a6c2:	6881      	ldr	r1, [r0, #8]
 802a6c4:	9301      	str	r3, [sp, #4]
 802a6c6:	f000 f807 	bl	802a6d8 <_vfprintf_r>
 802a6ca:	b003      	add	sp, #12
 802a6cc:	f85d eb04 	ldr.w	lr, [sp], #4
 802a6d0:	b004      	add	sp, #16
 802a6d2:	4770      	bx	lr
 802a6d4:	200002d8 	.word	0x200002d8

0802a6d8 <_vfprintf_r>:
 802a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a6dc:	b0d3      	sub	sp, #332	@ 0x14c
 802a6de:	468b      	mov	fp, r1
 802a6e0:	4690      	mov	r8, r2
 802a6e2:	461c      	mov	r4, r3
 802a6e4:	461e      	mov	r6, r3
 802a6e6:	9003      	str	r0, [sp, #12]
 802a6e8:	f003 fe90 	bl	802e40c <_localeconv_r>
 802a6ec:	6803      	ldr	r3, [r0, #0]
 802a6ee:	9316      	str	r3, [sp, #88]	@ 0x58
 802a6f0:	4618      	mov	r0, r3
 802a6f2:	f7e5 fdd5 	bl	80102a0 <strlen>
 802a6f6:	9b03      	ldr	r3, [sp, #12]
 802a6f8:	900d      	str	r0, [sp, #52]	@ 0x34
 802a6fa:	b123      	cbz	r3, 802a706 <_vfprintf_r+0x2e>
 802a6fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802a6fe:	b913      	cbnz	r3, 802a706 <_vfprintf_r+0x2e>
 802a700:	9803      	ldr	r0, [sp, #12]
 802a702:	f002 fa4f 	bl	802cba4 <__sinit>
 802a706:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a70a:	07da      	lsls	r2, r3, #31
 802a70c:	d407      	bmi.n	802a71e <_vfprintf_r+0x46>
 802a70e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a712:	059b      	lsls	r3, r3, #22
 802a714:	d403      	bmi.n	802a71e <_vfprintf_r+0x46>
 802a716:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a71a:	f003 ff22 	bl	802e562 <__retarget_lock_acquire_recursive>
 802a71e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802a722:	049f      	lsls	r7, r3, #18
 802a724:	d409      	bmi.n	802a73a <_vfprintf_r+0x62>
 802a726:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802a72a:	f8ab 300c 	strh.w	r3, [fp, #12]
 802a72e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a732:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802a736:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 802a73a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a73e:	071d      	lsls	r5, r3, #28
 802a740:	d502      	bpl.n	802a748 <_vfprintf_r+0x70>
 802a742:	f8db 3010 	ldr.w	r3, [fp, #16]
 802a746:	b9c3      	cbnz	r3, 802a77a <_vfprintf_r+0xa2>
 802a748:	9803      	ldr	r0, [sp, #12]
 802a74a:	4659      	mov	r1, fp
 802a74c:	f002 fbe6 	bl	802cf1c <__swsetup_r>
 802a750:	b198      	cbz	r0, 802a77a <_vfprintf_r+0xa2>
 802a752:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a756:	07d8      	lsls	r0, r3, #31
 802a758:	d506      	bpl.n	802a768 <_vfprintf_r+0x90>
 802a75a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a75e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a760:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802a762:	b053      	add	sp, #332	@ 0x14c
 802a764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a768:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a76c:	0599      	lsls	r1, r3, #22
 802a76e:	d4f4      	bmi.n	802a75a <_vfprintf_r+0x82>
 802a770:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a774:	f003 fef7 	bl	802e566 <__retarget_lock_release_recursive>
 802a778:	e7ef      	b.n	802a75a <_vfprintf_r+0x82>
 802a77a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802a77e:	f003 021a 	and.w	r2, r3, #26
 802a782:	2a0a      	cmp	r2, #10
 802a784:	d116      	bne.n	802a7b4 <_vfprintf_r+0xdc>
 802a786:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 802a78a:	2a00      	cmp	r2, #0
 802a78c:	db12      	blt.n	802a7b4 <_vfprintf_r+0xdc>
 802a78e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 802a792:	07d2      	lsls	r2, r2, #31
 802a794:	d405      	bmi.n	802a7a2 <_vfprintf_r+0xca>
 802a796:	059b      	lsls	r3, r3, #22
 802a798:	d403      	bmi.n	802a7a2 <_vfprintf_r+0xca>
 802a79a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a79e:	f003 fee2 	bl	802e566 <__retarget_lock_release_recursive>
 802a7a2:	9803      	ldr	r0, [sp, #12]
 802a7a4:	4623      	mov	r3, r4
 802a7a6:	4642      	mov	r2, r8
 802a7a8:	4659      	mov	r1, fp
 802a7aa:	b053      	add	sp, #332	@ 0x14c
 802a7ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a7b0:	f001 b9be 	b.w	802bb30 <__sbprintf>
 802a7b4:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 802aa00 <_vfprintf_r+0x328>
 802a7b8:	2300      	movs	r3, #0
 802a7ba:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802a7be:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a7c2:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 802a7c6:	ac29      	add	r4, sp, #164	@ 0xa4
 802a7c8:	9426      	str	r4, [sp, #152]	@ 0x98
 802a7ca:	9304      	str	r3, [sp, #16]
 802a7cc:	9309      	str	r3, [sp, #36]	@ 0x24
 802a7ce:	9312      	str	r3, [sp, #72]	@ 0x48
 802a7d0:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a7d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a7d4:	4643      	mov	r3, r8
 802a7d6:	461d      	mov	r5, r3
 802a7d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a7dc:	b10a      	cbz	r2, 802a7e2 <_vfprintf_r+0x10a>
 802a7de:	2a25      	cmp	r2, #37	@ 0x25
 802a7e0:	d1f9      	bne.n	802a7d6 <_vfprintf_r+0xfe>
 802a7e2:	ebb5 0708 	subs.w	r7, r5, r8
 802a7e6:	d00d      	beq.n	802a804 <_vfprintf_r+0x12c>
 802a7e8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a7ea:	443b      	add	r3, r7
 802a7ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a7ee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a7f0:	3301      	adds	r3, #1
 802a7f2:	2b07      	cmp	r3, #7
 802a7f4:	e9c4 8700 	strd	r8, r7, [r4]
 802a7f8:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a7fa:	dc75      	bgt.n	802a8e8 <_vfprintf_r+0x210>
 802a7fc:	3408      	adds	r4, #8
 802a7fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802a800:	443b      	add	r3, r7
 802a802:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a804:	782b      	ldrb	r3, [r5, #0]
 802a806:	2b00      	cmp	r3, #0
 802a808:	f001 814f 	beq.w	802baaa <_vfprintf_r+0x13d2>
 802a80c:	2200      	movs	r2, #0
 802a80e:	1c6b      	adds	r3, r5, #1
 802a810:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802a814:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802a818:	920e      	str	r2, [sp, #56]	@ 0x38
 802a81a:	4615      	mov	r5, r2
 802a81c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a820:	9206      	str	r2, [sp, #24]
 802a822:	930c      	str	r3, [sp, #48]	@ 0x30
 802a824:	9b06      	ldr	r3, [sp, #24]
 802a826:	3b20      	subs	r3, #32
 802a828:	2b5a      	cmp	r3, #90	@ 0x5a
 802a82a:	f200 85aa 	bhi.w	802b382 <_vfprintf_r+0xcaa>
 802a82e:	e8df f013 	tbh	[pc, r3, lsl #1]
 802a832:	009d      	.short	0x009d
 802a834:	05a805a8 	.word	0x05a805a8
 802a838:	05a800a5 	.word	0x05a800a5
 802a83c:	05a805a8 	.word	0x05a805a8
 802a840:	05a80085 	.word	0x05a80085
 802a844:	00a805a8 	.word	0x00a805a8
 802a848:	05a800b2 	.word	0x05a800b2
 802a84c:	00b400af 	.word	0x00b400af
 802a850:	00ce05a8 	.word	0x00ce05a8
 802a854:	00d100d1 	.word	0x00d100d1
 802a858:	00d100d1 	.word	0x00d100d1
 802a85c:	00d100d1 	.word	0x00d100d1
 802a860:	00d100d1 	.word	0x00d100d1
 802a864:	05a800d1 	.word	0x05a800d1
 802a868:	05a805a8 	.word	0x05a805a8
 802a86c:	05a805a8 	.word	0x05a805a8
 802a870:	05a805a8 	.word	0x05a805a8
 802a874:	05a80146 	.word	0x05a80146
 802a878:	011a0107 	.word	0x011a0107
 802a87c:	01460146 	.word	0x01460146
 802a880:	05a80146 	.word	0x05a80146
 802a884:	05a805a8 	.word	0x05a805a8
 802a888:	00e205a8 	.word	0x00e205a8
 802a88c:	05a805a8 	.word	0x05a805a8
 802a890:	05a804a3 	.word	0x05a804a3
 802a894:	05a805a8 	.word	0x05a805a8
 802a898:	05a804ed 	.word	0x05a804ed
 802a89c:	05a8050e 	.word	0x05a8050e
 802a8a0:	053005a8 	.word	0x053005a8
 802a8a4:	05a805a8 	.word	0x05a805a8
 802a8a8:	05a805a8 	.word	0x05a805a8
 802a8ac:	05a805a8 	.word	0x05a805a8
 802a8b0:	05a805a8 	.word	0x05a805a8
 802a8b4:	05a80146 	.word	0x05a80146
 802a8b8:	011c0107 	.word	0x011c0107
 802a8bc:	01460146 	.word	0x01460146
 802a8c0:	00ed0146 	.word	0x00ed0146
 802a8c4:	0101011c 	.word	0x0101011c
 802a8c8:	00fa05a8 	.word	0x00fa05a8
 802a8cc:	048705a8 	.word	0x048705a8
 802a8d0:	04dc04a5 	.word	0x04dc04a5
 802a8d4:	05a80101 	.word	0x05a80101
 802a8d8:	009b04ed 	.word	0x009b04ed
 802a8dc:	05a80510 	.word	0x05a80510
 802a8e0:	006505a8 	.word	0x006505a8
 802a8e4:	009b05a8 	.word	0x009b05a8
 802a8e8:	9803      	ldr	r0, [sp, #12]
 802a8ea:	aa26      	add	r2, sp, #152	@ 0x98
 802a8ec:	4659      	mov	r1, fp
 802a8ee:	f001 f95f 	bl	802bbb0 <__sprint_r>
 802a8f2:	2800      	cmp	r0, #0
 802a8f4:	f040 814d 	bne.w	802ab92 <_vfprintf_r+0x4ba>
 802a8f8:	ac29      	add	r4, sp, #164	@ 0xa4
 802a8fa:	e780      	b.n	802a7fe <_vfprintf_r+0x126>
 802a8fc:	4b42      	ldr	r3, [pc, #264]	@ (802aa08 <_vfprintf_r+0x330>)
 802a8fe:	9319      	str	r3, [sp, #100]	@ 0x64
 802a900:	f015 0320 	ands.w	r3, r5, #32
 802a904:	f000 84c8 	beq.w	802b298 <_vfprintf_r+0xbc0>
 802a908:	3607      	adds	r6, #7
 802a90a:	f026 0307 	bic.w	r3, r6, #7
 802a90e:	461a      	mov	r2, r3
 802a910:	685f      	ldr	r7, [r3, #4]
 802a912:	f852 6b08 	ldr.w	r6, [r2], #8
 802a916:	9207      	str	r2, [sp, #28]
 802a918:	07eb      	lsls	r3, r5, #31
 802a91a:	d50a      	bpl.n	802a932 <_vfprintf_r+0x25a>
 802a91c:	ea56 0307 	orrs.w	r3, r6, r7
 802a920:	d007      	beq.n	802a932 <_vfprintf_r+0x25a>
 802a922:	2330      	movs	r3, #48	@ 0x30
 802a924:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 802a928:	9b06      	ldr	r3, [sp, #24]
 802a92a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a92e:	f045 0502 	orr.w	r5, r5, #2
 802a932:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a936:	2302      	movs	r3, #2
 802a938:	f000 bc2e 	b.w	802b198 <_vfprintf_r+0xac0>
 802a93c:	9803      	ldr	r0, [sp, #12]
 802a93e:	f003 fd65 	bl	802e40c <_localeconv_r>
 802a942:	6843      	ldr	r3, [r0, #4]
 802a944:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a946:	4618      	mov	r0, r3
 802a948:	f7e5 fcaa 	bl	80102a0 <strlen>
 802a94c:	9012      	str	r0, [sp, #72]	@ 0x48
 802a94e:	9803      	ldr	r0, [sp, #12]
 802a950:	f003 fd5c 	bl	802e40c <_localeconv_r>
 802a954:	6883      	ldr	r3, [r0, #8]
 802a956:	9309      	str	r3, [sp, #36]	@ 0x24
 802a958:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a95a:	b12b      	cbz	r3, 802a968 <_vfprintf_r+0x290>
 802a95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a95e:	b11b      	cbz	r3, 802a968 <_vfprintf_r+0x290>
 802a960:	781b      	ldrb	r3, [r3, #0]
 802a962:	b10b      	cbz	r3, 802a968 <_vfprintf_r+0x290>
 802a964:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 802a968:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a96a:	e757      	b.n	802a81c <_vfprintf_r+0x144>
 802a96c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a970:	2b00      	cmp	r3, #0
 802a972:	d1f9      	bne.n	802a968 <_vfprintf_r+0x290>
 802a974:	2320      	movs	r3, #32
 802a976:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a97a:	e7f5      	b.n	802a968 <_vfprintf_r+0x290>
 802a97c:	f045 0501 	orr.w	r5, r5, #1
 802a980:	e7f2      	b.n	802a968 <_vfprintf_r+0x290>
 802a982:	f856 3b04 	ldr.w	r3, [r6], #4
 802a986:	930e      	str	r3, [sp, #56]	@ 0x38
 802a988:	2b00      	cmp	r3, #0
 802a98a:	daed      	bge.n	802a968 <_vfprintf_r+0x290>
 802a98c:	425b      	negs	r3, r3
 802a98e:	930e      	str	r3, [sp, #56]	@ 0x38
 802a990:	f045 0504 	orr.w	r5, r5, #4
 802a994:	e7e8      	b.n	802a968 <_vfprintf_r+0x290>
 802a996:	232b      	movs	r3, #43	@ 0x2b
 802a998:	e7ed      	b.n	802a976 <_vfprintf_r+0x29e>
 802a99a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a99c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a9a0:	9206      	str	r2, [sp, #24]
 802a9a2:	2a2a      	cmp	r2, #42	@ 0x2a
 802a9a4:	d10f      	bne.n	802a9c6 <_vfprintf_r+0x2ee>
 802a9a6:	f856 2b04 	ldr.w	r2, [r6], #4
 802a9aa:	930c      	str	r3, [sp, #48]	@ 0x30
 802a9ac:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 802a9b0:	e7da      	b.n	802a968 <_vfprintf_r+0x290>
 802a9b2:	fb01 2909 	mla	r9, r1, r9, r2
 802a9b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a9ba:	9206      	str	r2, [sp, #24]
 802a9bc:	9a06      	ldr	r2, [sp, #24]
 802a9be:	3a30      	subs	r2, #48	@ 0x30
 802a9c0:	2a09      	cmp	r2, #9
 802a9c2:	d9f6      	bls.n	802a9b2 <_vfprintf_r+0x2da>
 802a9c4:	e72d      	b.n	802a822 <_vfprintf_r+0x14a>
 802a9c6:	f04f 0900 	mov.w	r9, #0
 802a9ca:	210a      	movs	r1, #10
 802a9cc:	e7f6      	b.n	802a9bc <_vfprintf_r+0x2e4>
 802a9ce:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 802a9d2:	e7c9      	b.n	802a968 <_vfprintf_r+0x290>
 802a9d4:	2200      	movs	r2, #0
 802a9d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a9d8:	920e      	str	r2, [sp, #56]	@ 0x38
 802a9da:	210a      	movs	r1, #10
 802a9dc:	9a06      	ldr	r2, [sp, #24]
 802a9de:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802a9e0:	3a30      	subs	r2, #48	@ 0x30
 802a9e2:	fb01 2200 	mla	r2, r1, r0, r2
 802a9e6:	920e      	str	r2, [sp, #56]	@ 0x38
 802a9e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a9ec:	9206      	str	r2, [sp, #24]
 802a9ee:	3a30      	subs	r2, #48	@ 0x30
 802a9f0:	2a09      	cmp	r2, #9
 802a9f2:	d9f3      	bls.n	802a9dc <_vfprintf_r+0x304>
 802a9f4:	e715      	b.n	802a822 <_vfprintf_r+0x14a>
 802a9f6:	f045 0508 	orr.w	r5, r5, #8
 802a9fa:	e7b5      	b.n	802a968 <_vfprintf_r+0x290>
 802a9fc:	f3af 8000 	nop.w
	...
 802aa08:	0803c52f 	.word	0x0803c52f
 802aa0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802aa0e:	781b      	ldrb	r3, [r3, #0]
 802aa10:	2b68      	cmp	r3, #104	@ 0x68
 802aa12:	bf01      	itttt	eq
 802aa14:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 802aa16:	3301      	addeq	r3, #1
 802aa18:	930c      	streq	r3, [sp, #48]	@ 0x30
 802aa1a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802aa1e:	bf18      	it	ne
 802aa20:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802aa24:	e7a0      	b.n	802a968 <_vfprintf_r+0x290>
 802aa26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802aa28:	781b      	ldrb	r3, [r3, #0]
 802aa2a:	2b6c      	cmp	r3, #108	@ 0x6c
 802aa2c:	d105      	bne.n	802aa3a <_vfprintf_r+0x362>
 802aa2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802aa30:	3301      	adds	r3, #1
 802aa32:	930c      	str	r3, [sp, #48]	@ 0x30
 802aa34:	f045 0520 	orr.w	r5, r5, #32
 802aa38:	e796      	b.n	802a968 <_vfprintf_r+0x290>
 802aa3a:	f045 0510 	orr.w	r5, r5, #16
 802aa3e:	e793      	b.n	802a968 <_vfprintf_r+0x290>
 802aa40:	4632      	mov	r2, r6
 802aa42:	f852 3b04 	ldr.w	r3, [r2], #4
 802aa46:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802aa4a:	2300      	movs	r3, #0
 802aa4c:	9207      	str	r2, [sp, #28]
 802aa4e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802aa52:	469a      	mov	sl, r3
 802aa54:	f04f 0901 	mov.w	r9, #1
 802aa58:	9310      	str	r3, [sp, #64]	@ 0x40
 802aa5a:	461f      	mov	r7, r3
 802aa5c:	9308      	str	r3, [sp, #32]
 802aa5e:	461e      	mov	r6, r3
 802aa60:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802aa64:	e1da      	b.n	802ae1c <_vfprintf_r+0x744>
 802aa66:	f045 0510 	orr.w	r5, r5, #16
 802aa6a:	06af      	lsls	r7, r5, #26
 802aa6c:	d512      	bpl.n	802aa94 <_vfprintf_r+0x3bc>
 802aa6e:	3607      	adds	r6, #7
 802aa70:	f026 0307 	bic.w	r3, r6, #7
 802aa74:	461a      	mov	r2, r3
 802aa76:	685f      	ldr	r7, [r3, #4]
 802aa78:	f852 6b08 	ldr.w	r6, [r2], #8
 802aa7c:	9207      	str	r2, [sp, #28]
 802aa7e:	2f00      	cmp	r7, #0
 802aa80:	da06      	bge.n	802aa90 <_vfprintf_r+0x3b8>
 802aa82:	4276      	negs	r6, r6
 802aa84:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802aa88:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802aa8c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802aa90:	2301      	movs	r3, #1
 802aa92:	e384      	b.n	802b19e <_vfprintf_r+0xac6>
 802aa94:	4633      	mov	r3, r6
 802aa96:	06ee      	lsls	r6, r5, #27
 802aa98:	f853 7b04 	ldr.w	r7, [r3], #4
 802aa9c:	9307      	str	r3, [sp, #28]
 802aa9e:	d502      	bpl.n	802aaa6 <_vfprintf_r+0x3ce>
 802aaa0:	463e      	mov	r6, r7
 802aaa2:	17ff      	asrs	r7, r7, #31
 802aaa4:	e7eb      	b.n	802aa7e <_vfprintf_r+0x3a6>
 802aaa6:	0668      	lsls	r0, r5, #25
 802aaa8:	d503      	bpl.n	802aab2 <_vfprintf_r+0x3da>
 802aaaa:	b23e      	sxth	r6, r7
 802aaac:	f347 37c0 	sbfx	r7, r7, #15, #1
 802aab0:	e7e5      	b.n	802aa7e <_vfprintf_r+0x3a6>
 802aab2:	05a9      	lsls	r1, r5, #22
 802aab4:	d5f4      	bpl.n	802aaa0 <_vfprintf_r+0x3c8>
 802aab6:	b27e      	sxtb	r6, r7
 802aab8:	f347 17c0 	sbfx	r7, r7, #7, #1
 802aabc:	e7df      	b.n	802aa7e <_vfprintf_r+0x3a6>
 802aabe:	3607      	adds	r6, #7
 802aac0:	f026 0307 	bic.w	r3, r6, #7
 802aac4:	ecb3 7b02 	vldmia	r3!, {d7}
 802aac8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802aacc:	9307      	str	r3, [sp, #28]
 802aace:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802aad0:	931a      	str	r3, [sp, #104]	@ 0x68
 802aad2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802aad4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802aad8:	931b      	str	r3, [sp, #108]	@ 0x6c
 802aada:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802aade:	4b85      	ldr	r3, [pc, #532]	@ (802acf4 <_vfprintf_r+0x61c>)
 802aae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802aae4:	f7e6 f83a 	bl	8010b5c <__aeabi_dcmpun>
 802aae8:	bb10      	cbnz	r0, 802ab30 <_vfprintf_r+0x458>
 802aaea:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802aaee:	4b81      	ldr	r3, [pc, #516]	@ (802acf4 <_vfprintf_r+0x61c>)
 802aaf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802aaf4:	f7e6 f814 	bl	8010b20 <__aeabi_dcmple>
 802aaf8:	b9d0      	cbnz	r0, 802ab30 <_vfprintf_r+0x458>
 802aafa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802aafe:	2200      	movs	r2, #0
 802ab00:	2300      	movs	r3, #0
 802ab02:	f7e6 f803 	bl	8010b0c <__aeabi_dcmplt>
 802ab06:	b110      	cbz	r0, 802ab0e <_vfprintf_r+0x436>
 802ab08:	232d      	movs	r3, #45	@ 0x2d
 802ab0a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802ab0e:	4a7a      	ldr	r2, [pc, #488]	@ (802acf8 <_vfprintf_r+0x620>)
 802ab10:	4b7a      	ldr	r3, [pc, #488]	@ (802acfc <_vfprintf_r+0x624>)
 802ab12:	9906      	ldr	r1, [sp, #24]
 802ab14:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 802ab18:	2947      	cmp	r1, #71	@ 0x47
 802ab1a:	bfd4      	ite	le
 802ab1c:	4690      	movle	r8, r2
 802ab1e:	4698      	movgt	r8, r3
 802ab20:	f04f 0a00 	mov.w	sl, #0
 802ab24:	f04f 0903 	mov.w	r9, #3
 802ab28:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802ab2c:	f000 bff8 	b.w	802bb20 <_vfprintf_r+0x1448>
 802ab30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 802ab34:	4610      	mov	r0, r2
 802ab36:	4619      	mov	r1, r3
 802ab38:	f7e6 f810 	bl	8010b5c <__aeabi_dcmpun>
 802ab3c:	4682      	mov	sl, r0
 802ab3e:	b140      	cbz	r0, 802ab52 <_vfprintf_r+0x47a>
 802ab40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ab42:	4a6f      	ldr	r2, [pc, #444]	@ (802ad00 <_vfprintf_r+0x628>)
 802ab44:	2b00      	cmp	r3, #0
 802ab46:	bfbc      	itt	lt
 802ab48:	232d      	movlt	r3, #45	@ 0x2d
 802ab4a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802ab4e:	4b6d      	ldr	r3, [pc, #436]	@ (802ad04 <_vfprintf_r+0x62c>)
 802ab50:	e7df      	b.n	802ab12 <_vfprintf_r+0x43a>
 802ab52:	9b06      	ldr	r3, [sp, #24]
 802ab54:	2b61      	cmp	r3, #97	@ 0x61
 802ab56:	d02e      	beq.n	802abb6 <_vfprintf_r+0x4de>
 802ab58:	2b41      	cmp	r3, #65	@ 0x41
 802ab5a:	d12e      	bne.n	802abba <_vfprintf_r+0x4e2>
 802ab5c:	2358      	movs	r3, #88	@ 0x58
 802ab5e:	2230      	movs	r2, #48	@ 0x30
 802ab60:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 802ab64:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 802ab68:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802ab6c:	f045 0502 	orr.w	r5, r5, #2
 802ab70:	f340 80ae 	ble.w	802acd0 <_vfprintf_r+0x5f8>
 802ab74:	9803      	ldr	r0, [sp, #12]
 802ab76:	f109 0101 	add.w	r1, r9, #1
 802ab7a:	f004 fd0f 	bl	802f59c <_malloc_r>
 802ab7e:	4680      	mov	r8, r0
 802ab80:	2800      	cmp	r0, #0
 802ab82:	f040 80aa 	bne.w	802acda <_vfprintf_r+0x602>
 802ab86:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802ab8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ab8e:	f8ab 300c 	strh.w	r3, [fp, #12]
 802ab92:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802ab96:	07d9      	lsls	r1, r3, #31
 802ab98:	d407      	bmi.n	802abaa <_vfprintf_r+0x4d2>
 802ab9a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802ab9e:	059a      	lsls	r2, r3, #22
 802aba0:	d403      	bmi.n	802abaa <_vfprintf_r+0x4d2>
 802aba2:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802aba6:	f003 fcde 	bl	802e566 <__retarget_lock_release_recursive>
 802abaa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802abae:	065b      	lsls	r3, r3, #25
 802abb0:	f57f add6 	bpl.w	802a760 <_vfprintf_r+0x88>
 802abb4:	e5d1      	b.n	802a75a <_vfprintf_r+0x82>
 802abb6:	2378      	movs	r3, #120	@ 0x78
 802abb8:	e7d1      	b.n	802ab5e <_vfprintf_r+0x486>
 802abba:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802abbe:	f000 808e 	beq.w	802acde <_vfprintf_r+0x606>
 802abc2:	9b06      	ldr	r3, [sp, #24]
 802abc4:	f023 0320 	bic.w	r3, r3, #32
 802abc8:	2b47      	cmp	r3, #71	@ 0x47
 802abca:	d105      	bne.n	802abd8 <_vfprintf_r+0x500>
 802abcc:	f1b9 0f00 	cmp.w	r9, #0
 802abd0:	d102      	bne.n	802abd8 <_vfprintf_r+0x500>
 802abd2:	46ca      	mov	sl, r9
 802abd4:	f04f 0901 	mov.w	r9, #1
 802abd8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802abdc:	9311      	str	r3, [sp, #68]	@ 0x44
 802abde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802abe0:	2b00      	cmp	r3, #0
 802abe2:	da7f      	bge.n	802ace4 <_vfprintf_r+0x60c>
 802abe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802abe6:	9314      	str	r3, [sp, #80]	@ 0x50
 802abe8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802abea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802abee:	9315      	str	r3, [sp, #84]	@ 0x54
 802abf0:	232d      	movs	r3, #45	@ 0x2d
 802abf2:	931c      	str	r3, [sp, #112]	@ 0x70
 802abf4:	9b06      	ldr	r3, [sp, #24]
 802abf6:	f023 0320 	bic.w	r3, r3, #32
 802abfa:	2b41      	cmp	r3, #65	@ 0x41
 802abfc:	9308      	str	r3, [sp, #32]
 802abfe:	f040 81e7 	bne.w	802afd0 <_vfprintf_r+0x8f8>
 802ac02:	a820      	add	r0, sp, #128	@ 0x80
 802ac04:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802ac08:	f003 fcd2 	bl	802e5b0 <frexp>
 802ac0c:	2200      	movs	r2, #0
 802ac0e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802ac12:	ec51 0b10 	vmov	r0, r1, d0
 802ac16:	f7e5 fd07 	bl	8010628 <__aeabi_dmul>
 802ac1a:	4602      	mov	r2, r0
 802ac1c:	460b      	mov	r3, r1
 802ac1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802ac22:	2200      	movs	r2, #0
 802ac24:	2300      	movs	r3, #0
 802ac26:	f7e5 ff67 	bl	8010af8 <__aeabi_dcmpeq>
 802ac2a:	b108      	cbz	r0, 802ac30 <_vfprintf_r+0x558>
 802ac2c:	2301      	movs	r3, #1
 802ac2e:	9320      	str	r3, [sp, #128]	@ 0x80
 802ac30:	4a35      	ldr	r2, [pc, #212]	@ (802ad08 <_vfprintf_r+0x630>)
 802ac32:	4b36      	ldr	r3, [pc, #216]	@ (802ad0c <_vfprintf_r+0x634>)
 802ac34:	9906      	ldr	r1, [sp, #24]
 802ac36:	2961      	cmp	r1, #97	@ 0x61
 802ac38:	bf18      	it	ne
 802ac3a:	461a      	movne	r2, r3
 802ac3c:	9210      	str	r2, [sp, #64]	@ 0x40
 802ac3e:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 802ac42:	4646      	mov	r6, r8
 802ac44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802ac48:	4b31      	ldr	r3, [pc, #196]	@ (802ad10 <_vfprintf_r+0x638>)
 802ac4a:	2200      	movs	r2, #0
 802ac4c:	f7e5 fcec 	bl	8010628 <__aeabi_dmul>
 802ac50:	4602      	mov	r2, r0
 802ac52:	460b      	mov	r3, r1
 802ac54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802ac58:	f7e5 ff96 	bl	8010b88 <__aeabi_d2iz>
 802ac5c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802ac5e:	f7e5 fc79 	bl	8010554 <__aeabi_i2d>
 802ac62:	4602      	mov	r2, r0
 802ac64:	460b      	mov	r3, r1
 802ac66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802ac6a:	f7e5 fb25 	bl	80102b8 <__aeabi_dsub>
 802ac6e:	4602      	mov	r2, r0
 802ac70:	460b      	mov	r3, r1
 802ac72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802ac76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802ac78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ac7a:	5c9b      	ldrb	r3, [r3, r2]
 802ac7c:	f806 3b01 	strb.w	r3, [r6], #1
 802ac80:	1c7a      	adds	r2, r7, #1
 802ac82:	d006      	beq.n	802ac92 <_vfprintf_r+0x5ba>
 802ac84:	1e7b      	subs	r3, r7, #1
 802ac86:	931d      	str	r3, [sp, #116]	@ 0x74
 802ac88:	2200      	movs	r2, #0
 802ac8a:	2300      	movs	r3, #0
 802ac8c:	f7e5 ff34 	bl	8010af8 <__aeabi_dcmpeq>
 802ac90:	b370      	cbz	r0, 802acf0 <_vfprintf_r+0x618>
 802ac92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802ac96:	4b1f      	ldr	r3, [pc, #124]	@ (802ad14 <_vfprintf_r+0x63c>)
 802ac98:	2200      	movs	r2, #0
 802ac9a:	f7e5 ff55 	bl	8010b48 <__aeabi_dcmpgt>
 802ac9e:	2800      	cmp	r0, #0
 802aca0:	d13a      	bne.n	802ad18 <_vfprintf_r+0x640>
 802aca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802aca6:	4b1b      	ldr	r3, [pc, #108]	@ (802ad14 <_vfprintf_r+0x63c>)
 802aca8:	2200      	movs	r2, #0
 802acaa:	f7e5 ff25 	bl	8010af8 <__aeabi_dcmpeq>
 802acae:	b110      	cbz	r0, 802acb6 <_vfprintf_r+0x5de>
 802acb0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802acb2:	07db      	lsls	r3, r3, #31
 802acb4:	d430      	bmi.n	802ad18 <_vfprintf_r+0x640>
 802acb6:	4633      	mov	r3, r6
 802acb8:	19f1      	adds	r1, r6, r7
 802acba:	2030      	movs	r0, #48	@ 0x30
 802acbc:	1aca      	subs	r2, r1, r3
 802acbe:	2a00      	cmp	r2, #0
 802acc0:	f280 8183 	bge.w	802afca <_vfprintf_r+0x8f2>
 802acc4:	1c7b      	adds	r3, r7, #1
 802acc6:	3701      	adds	r7, #1
 802acc8:	bfb8      	it	lt
 802acca:	2300      	movlt	r3, #0
 802accc:	441e      	add	r6, r3
 802acce:	e037      	b.n	802ad40 <_vfprintf_r+0x668>
 802acd0:	f04f 0a00 	mov.w	sl, #0
 802acd4:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802acd8:	e77e      	b.n	802abd8 <_vfprintf_r+0x500>
 802acda:	4682      	mov	sl, r0
 802acdc:	e77c      	b.n	802abd8 <_vfprintf_r+0x500>
 802acde:	f04f 0906 	mov.w	r9, #6
 802ace2:	e779      	b.n	802abd8 <_vfprintf_r+0x500>
 802ace4:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802ace8:	2300      	movs	r3, #0
 802acea:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802acee:	e780      	b.n	802abf2 <_vfprintf_r+0x51a>
 802acf0:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802acf2:	e7a7      	b.n	802ac44 <_vfprintf_r+0x56c>
 802acf4:	7fefffff 	.word	0x7fefffff
 802acf8:	0803c51f 	.word	0x0803c51f
 802acfc:	0803c523 	.word	0x0803c523
 802ad00:	0803c527 	.word	0x0803c527
 802ad04:	0803c52b 	.word	0x0803c52b
 802ad08:	0803c52f 	.word	0x0803c52f
 802ad0c:	0803c540 	.word	0x0803c540
 802ad10:	40300000 	.word	0x40300000
 802ad14:	3fe00000 	.word	0x3fe00000
 802ad18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ad1a:	9624      	str	r6, [sp, #144]	@ 0x90
 802ad1c:	7bd9      	ldrb	r1, [r3, #15]
 802ad1e:	2030      	movs	r0, #48	@ 0x30
 802ad20:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802ad22:	1e53      	subs	r3, r2, #1
 802ad24:	9324      	str	r3, [sp, #144]	@ 0x90
 802ad26:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802ad2a:	428b      	cmp	r3, r1
 802ad2c:	f000 814a 	beq.w	802afc4 <_vfprintf_r+0x8ec>
 802ad30:	2b39      	cmp	r3, #57	@ 0x39
 802ad32:	bf0b      	itete	eq
 802ad34:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 802ad36:	3301      	addne	r3, #1
 802ad38:	7a9b      	ldrbeq	r3, [r3, #10]
 802ad3a:	b2db      	uxtbne	r3, r3
 802ad3c:	f802 3c01 	strb.w	r3, [r2, #-1]
 802ad40:	eba6 0308 	sub.w	r3, r6, r8
 802ad44:	9304      	str	r3, [sp, #16]
 802ad46:	9b08      	ldr	r3, [sp, #32]
 802ad48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802ad4a:	2b47      	cmp	r3, #71	@ 0x47
 802ad4c:	f040 8189 	bne.w	802b062 <_vfprintf_r+0x98a>
 802ad50:	1cf1      	adds	r1, r6, #3
 802ad52:	db02      	blt.n	802ad5a <_vfprintf_r+0x682>
 802ad54:	45b1      	cmp	r9, r6
 802ad56:	f280 81a7 	bge.w	802b0a8 <_vfprintf_r+0x9d0>
 802ad5a:	9b06      	ldr	r3, [sp, #24]
 802ad5c:	3b02      	subs	r3, #2
 802ad5e:	9306      	str	r3, [sp, #24]
 802ad60:	9906      	ldr	r1, [sp, #24]
 802ad62:	f89d 2018 	ldrb.w	r2, [sp, #24]
 802ad66:	f021 0120 	bic.w	r1, r1, #32
 802ad6a:	2941      	cmp	r1, #65	@ 0x41
 802ad6c:	bf08      	it	eq
 802ad6e:	320f      	addeq	r2, #15
 802ad70:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802ad74:	bf06      	itte	eq
 802ad76:	b2d2      	uxtbeq	r2, r2
 802ad78:	2101      	moveq	r1, #1
 802ad7a:	2100      	movne	r1, #0
 802ad7c:	2b00      	cmp	r3, #0
 802ad7e:	9320      	str	r3, [sp, #128]	@ 0x80
 802ad80:	bfb8      	it	lt
 802ad82:	f1c6 0301 	rsblt	r3, r6, #1
 802ad86:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802ad8a:	bfb4      	ite	lt
 802ad8c:	222d      	movlt	r2, #45	@ 0x2d
 802ad8e:	222b      	movge	r2, #43	@ 0x2b
 802ad90:	2b09      	cmp	r3, #9
 802ad92:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802ad96:	f340 817a 	ble.w	802b08e <_vfprintf_r+0x9b6>
 802ad9a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802ad9e:	270a      	movs	r7, #10
 802ada0:	4602      	mov	r2, r0
 802ada2:	fbb3 f6f7 	udiv	r6, r3, r7
 802ada6:	fb07 3116 	mls	r1, r7, r6, r3
 802adaa:	3130      	adds	r1, #48	@ 0x30
 802adac:	f802 1c01 	strb.w	r1, [r2, #-1]
 802adb0:	4619      	mov	r1, r3
 802adb2:	2963      	cmp	r1, #99	@ 0x63
 802adb4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 802adb8:	4633      	mov	r3, r6
 802adba:	dcf1      	bgt.n	802ada0 <_vfprintf_r+0x6c8>
 802adbc:	3330      	adds	r3, #48	@ 0x30
 802adbe:	1e91      	subs	r1, r2, #2
 802adc0:	f800 3c01 	strb.w	r3, [r0, #-1]
 802adc4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 802adc8:	460b      	mov	r3, r1
 802adca:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802adce:	4283      	cmp	r3, r0
 802add0:	f0c0 8158 	bcc.w	802b084 <_vfprintf_r+0x9ac>
 802add4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 802add8:	1a9b      	subs	r3, r3, r2
 802adda:	4281      	cmp	r1, r0
 802addc:	bf88      	it	hi
 802adde:	2300      	movhi	r3, #0
 802ade0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802ade4:	441a      	add	r2, r3
 802ade6:	ab22      	add	r3, sp, #136	@ 0x88
 802ade8:	1ad3      	subs	r3, r2, r3
 802adea:	9a04      	ldr	r2, [sp, #16]
 802adec:	9318      	str	r3, [sp, #96]	@ 0x60
 802adee:	2a01      	cmp	r2, #1
 802adf0:	eb03 0902 	add.w	r9, r3, r2
 802adf4:	dc01      	bgt.n	802adfa <_vfprintf_r+0x722>
 802adf6:	07ea      	lsls	r2, r5, #31
 802adf8:	d501      	bpl.n	802adfe <_vfprintf_r+0x726>
 802adfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802adfc:	4499      	add	r9, r3
 802adfe:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802ae02:	2700      	movs	r7, #0
 802ae04:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802ae08:	9311      	str	r3, [sp, #68]	@ 0x44
 802ae0a:	9708      	str	r7, [sp, #32]
 802ae0c:	463e      	mov	r6, r7
 802ae0e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802ae10:	2b00      	cmp	r3, #0
 802ae12:	f040 8191 	bne.w	802b138 <_vfprintf_r+0xa60>
 802ae16:	2300      	movs	r3, #0
 802ae18:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802ae1a:	9310      	str	r3, [sp, #64]	@ 0x40
 802ae1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ae1e:	454b      	cmp	r3, r9
 802ae20:	bfb8      	it	lt
 802ae22:	464b      	movlt	r3, r9
 802ae24:	9311      	str	r3, [sp, #68]	@ 0x44
 802ae26:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802ae2a:	b113      	cbz	r3, 802ae32 <_vfprintf_r+0x75a>
 802ae2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802ae2e:	3301      	adds	r3, #1
 802ae30:	9311      	str	r3, [sp, #68]	@ 0x44
 802ae32:	f015 0302 	ands.w	r3, r5, #2
 802ae36:	931c      	str	r3, [sp, #112]	@ 0x70
 802ae38:	bf1e      	ittt	ne
 802ae3a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802ae3c:	3302      	addne	r3, #2
 802ae3e:	9311      	strne	r3, [sp, #68]	@ 0x44
 802ae40:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 802ae44:	931d      	str	r3, [sp, #116]	@ 0x74
 802ae46:	d122      	bne.n	802ae8e <_vfprintf_r+0x7b6>
 802ae48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ae4a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802ae4c:	1a9b      	subs	r3, r3, r2
 802ae4e:	2b00      	cmp	r3, #0
 802ae50:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ae52:	dd1c      	ble.n	802ae8e <_vfprintf_r+0x7b6>
 802ae54:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802ae56:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802ae5a:	2810      	cmp	r0, #16
 802ae5c:	489f      	ldr	r0, [pc, #636]	@ (802b0dc <_vfprintf_r+0xa04>)
 802ae5e:	6020      	str	r0, [r4, #0]
 802ae60:	f102 0201 	add.w	r2, r2, #1
 802ae64:	f104 0108 	add.w	r1, r4, #8
 802ae68:	f300 8297 	bgt.w	802b39a <_vfprintf_r+0xcc2>
 802ae6c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802ae6e:	6060      	str	r0, [r4, #4]
 802ae70:	4403      	add	r3, r0
 802ae72:	2a07      	cmp	r2, #7
 802ae74:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ae78:	f340 82a4 	ble.w	802b3c4 <_vfprintf_r+0xcec>
 802ae7c:	9803      	ldr	r0, [sp, #12]
 802ae7e:	aa26      	add	r2, sp, #152	@ 0x98
 802ae80:	4659      	mov	r1, fp
 802ae82:	f000 fe95 	bl	802bbb0 <__sprint_r>
 802ae86:	2800      	cmp	r0, #0
 802ae88:	f040 85ed 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802ae8c:	ac29      	add	r4, sp, #164	@ 0xa4
 802ae8e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802ae92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ae94:	b16a      	cbz	r2, 802aeb2 <_vfprintf_r+0x7da>
 802ae96:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802ae9a:	6022      	str	r2, [r4, #0]
 802ae9c:	2201      	movs	r2, #1
 802ae9e:	4413      	add	r3, r2
 802aea0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802aea2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802aea4:	6062      	str	r2, [r4, #4]
 802aea6:	4413      	add	r3, r2
 802aea8:	2b07      	cmp	r3, #7
 802aeaa:	9327      	str	r3, [sp, #156]	@ 0x9c
 802aeac:	f300 828c 	bgt.w	802b3c8 <_vfprintf_r+0xcf0>
 802aeb0:	3408      	adds	r4, #8
 802aeb2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802aeb4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aeb6:	b162      	cbz	r2, 802aed2 <_vfprintf_r+0x7fa>
 802aeb8:	aa1f      	add	r2, sp, #124	@ 0x7c
 802aeba:	6022      	str	r2, [r4, #0]
 802aebc:	2202      	movs	r2, #2
 802aebe:	4413      	add	r3, r2
 802aec0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802aec2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802aec4:	6062      	str	r2, [r4, #4]
 802aec6:	3301      	adds	r3, #1
 802aec8:	2b07      	cmp	r3, #7
 802aeca:	9327      	str	r3, [sp, #156]	@ 0x9c
 802aecc:	f300 8286 	bgt.w	802b3dc <_vfprintf_r+0xd04>
 802aed0:	3408      	adds	r4, #8
 802aed2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802aed4:	2b80      	cmp	r3, #128	@ 0x80
 802aed6:	d122      	bne.n	802af1e <_vfprintf_r+0x846>
 802aed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802aeda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802aedc:	1a9b      	subs	r3, r3, r2
 802aede:	2b00      	cmp	r3, #0
 802aee0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802aee2:	dd1c      	ble.n	802af1e <_vfprintf_r+0x846>
 802aee4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802aee6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802aeea:	2810      	cmp	r0, #16
 802aeec:	487c      	ldr	r0, [pc, #496]	@ (802b0e0 <_vfprintf_r+0xa08>)
 802aeee:	6020      	str	r0, [r4, #0]
 802aef0:	f102 0201 	add.w	r2, r2, #1
 802aef4:	f104 0108 	add.w	r1, r4, #8
 802aef8:	f300 827a 	bgt.w	802b3f0 <_vfprintf_r+0xd18>
 802aefc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802aefe:	6060      	str	r0, [r4, #4]
 802af00:	4403      	add	r3, r0
 802af02:	2a07      	cmp	r2, #7
 802af04:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802af08:	f340 8287 	ble.w	802b41a <_vfprintf_r+0xd42>
 802af0c:	9803      	ldr	r0, [sp, #12]
 802af0e:	aa26      	add	r2, sp, #152	@ 0x98
 802af10:	4659      	mov	r1, fp
 802af12:	f000 fe4d 	bl	802bbb0 <__sprint_r>
 802af16:	2800      	cmp	r0, #0
 802af18:	f040 85a5 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802af1c:	ac29      	add	r4, sp, #164	@ 0xa4
 802af1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802af20:	eba3 0309 	sub.w	r3, r3, r9
 802af24:	2b00      	cmp	r3, #0
 802af26:	9310      	str	r3, [sp, #64]	@ 0x40
 802af28:	dd1c      	ble.n	802af64 <_vfprintf_r+0x88c>
 802af2a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802af2c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802af30:	2810      	cmp	r0, #16
 802af32:	486b      	ldr	r0, [pc, #428]	@ (802b0e0 <_vfprintf_r+0xa08>)
 802af34:	6020      	str	r0, [r4, #0]
 802af36:	f102 0201 	add.w	r2, r2, #1
 802af3a:	f104 0108 	add.w	r1, r4, #8
 802af3e:	f300 826e 	bgt.w	802b41e <_vfprintf_r+0xd46>
 802af42:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802af44:	6060      	str	r0, [r4, #4]
 802af46:	4403      	add	r3, r0
 802af48:	2a07      	cmp	r2, #7
 802af4a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802af4e:	f340 827b 	ble.w	802b448 <_vfprintf_r+0xd70>
 802af52:	9803      	ldr	r0, [sp, #12]
 802af54:	aa26      	add	r2, sp, #152	@ 0x98
 802af56:	4659      	mov	r1, fp
 802af58:	f000 fe2a 	bl	802bbb0 <__sprint_r>
 802af5c:	2800      	cmp	r0, #0
 802af5e:	f040 8582 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802af62:	ac29      	add	r4, sp, #164	@ 0xa4
 802af64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802af66:	9310      	str	r3, [sp, #64]	@ 0x40
 802af68:	05e8      	lsls	r0, r5, #23
 802af6a:	f100 8273 	bmi.w	802b454 <_vfprintf_r+0xd7c>
 802af6e:	444b      	add	r3, r9
 802af70:	9328      	str	r3, [sp, #160]	@ 0xa0
 802af72:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802af74:	3301      	adds	r3, #1
 802af76:	2b07      	cmp	r3, #7
 802af78:	e9c4 8900 	strd	r8, r9, [r4]
 802af7c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802af7e:	f300 82af 	bgt.w	802b4e0 <_vfprintf_r+0xe08>
 802af82:	3408      	adds	r4, #8
 802af84:	0768      	lsls	r0, r5, #29
 802af86:	f100 8550 	bmi.w	802ba2a <_vfprintf_r+0x1352>
 802af8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802af8e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802af90:	428a      	cmp	r2, r1
 802af92:	bfac      	ite	ge
 802af94:	189b      	addge	r3, r3, r2
 802af96:	185b      	addlt	r3, r3, r1
 802af98:	930f      	str	r3, [sp, #60]	@ 0x3c
 802af9a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802af9c:	b13b      	cbz	r3, 802afae <_vfprintf_r+0x8d6>
 802af9e:	9803      	ldr	r0, [sp, #12]
 802afa0:	aa26      	add	r2, sp, #152	@ 0x98
 802afa2:	4659      	mov	r1, fp
 802afa4:	f000 fe04 	bl	802bbb0 <__sprint_r>
 802afa8:	2800      	cmp	r0, #0
 802afaa:	f040 855c 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802afae:	2300      	movs	r3, #0
 802afb0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802afb2:	f1ba 0f00 	cmp.w	sl, #0
 802afb6:	f040 8572 	bne.w	802ba9e <_vfprintf_r+0x13c6>
 802afba:	9e07      	ldr	r6, [sp, #28]
 802afbc:	ac29      	add	r4, sp, #164	@ 0xa4
 802afbe:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 802afc2:	e407      	b.n	802a7d4 <_vfprintf_r+0xfc>
 802afc4:	f802 0c01 	strb.w	r0, [r2, #-1]
 802afc8:	e6aa      	b.n	802ad20 <_vfprintf_r+0x648>
 802afca:	f803 0b01 	strb.w	r0, [r3], #1
 802afce:	e675      	b.n	802acbc <_vfprintf_r+0x5e4>
 802afd0:	9b08      	ldr	r3, [sp, #32]
 802afd2:	2b46      	cmp	r3, #70	@ 0x46
 802afd4:	d005      	beq.n	802afe2 <_vfprintf_r+0x90a>
 802afd6:	2b45      	cmp	r3, #69	@ 0x45
 802afd8:	d11a      	bne.n	802b010 <_vfprintf_r+0x938>
 802afda:	f109 0601 	add.w	r6, r9, #1
 802afde:	2102      	movs	r1, #2
 802afe0:	e001      	b.n	802afe6 <_vfprintf_r+0x90e>
 802afe2:	464e      	mov	r6, r9
 802afe4:	2103      	movs	r1, #3
 802afe6:	ab24      	add	r3, sp, #144	@ 0x90
 802afe8:	9301      	str	r3, [sp, #4]
 802afea:	ab21      	add	r3, sp, #132	@ 0x84
 802afec:	9300      	str	r3, [sp, #0]
 802afee:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802aff2:	ab20      	add	r3, sp, #128	@ 0x80
 802aff4:	9803      	ldr	r0, [sp, #12]
 802aff6:	4632      	mov	r2, r6
 802aff8:	f003 fbb6 	bl	802e768 <_dtoa_r>
 802affc:	9b08      	ldr	r3, [sp, #32]
 802affe:	2b47      	cmp	r3, #71	@ 0x47
 802b000:	4680      	mov	r8, r0
 802b002:	d119      	bne.n	802b038 <_vfprintf_r+0x960>
 802b004:	07e8      	lsls	r0, r5, #31
 802b006:	d405      	bmi.n	802b014 <_vfprintf_r+0x93c>
 802b008:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b00a:	eba3 0308 	sub.w	r3, r3, r8
 802b00e:	e699      	b.n	802ad44 <_vfprintf_r+0x66c>
 802b010:	464e      	mov	r6, r9
 802b012:	e7e4      	b.n	802afde <_vfprintf_r+0x906>
 802b014:	eb08 0706 	add.w	r7, r8, r6
 802b018:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802b01c:	2200      	movs	r2, #0
 802b01e:	2300      	movs	r3, #0
 802b020:	f7e5 fd6a 	bl	8010af8 <__aeabi_dcmpeq>
 802b024:	b100      	cbz	r0, 802b028 <_vfprintf_r+0x950>
 802b026:	9724      	str	r7, [sp, #144]	@ 0x90
 802b028:	2230      	movs	r2, #48	@ 0x30
 802b02a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b02c:	429f      	cmp	r7, r3
 802b02e:	d9eb      	bls.n	802b008 <_vfprintf_r+0x930>
 802b030:	1c59      	adds	r1, r3, #1
 802b032:	9124      	str	r1, [sp, #144]	@ 0x90
 802b034:	701a      	strb	r2, [r3, #0]
 802b036:	e7f8      	b.n	802b02a <_vfprintf_r+0x952>
 802b038:	9b08      	ldr	r3, [sp, #32]
 802b03a:	2b46      	cmp	r3, #70	@ 0x46
 802b03c:	eb00 0706 	add.w	r7, r0, r6
 802b040:	d1ea      	bne.n	802b018 <_vfprintf_r+0x940>
 802b042:	7803      	ldrb	r3, [r0, #0]
 802b044:	2b30      	cmp	r3, #48	@ 0x30
 802b046:	d109      	bne.n	802b05c <_vfprintf_r+0x984>
 802b048:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802b04c:	2200      	movs	r2, #0
 802b04e:	2300      	movs	r3, #0
 802b050:	f7e5 fd52 	bl	8010af8 <__aeabi_dcmpeq>
 802b054:	b910      	cbnz	r0, 802b05c <_vfprintf_r+0x984>
 802b056:	f1c6 0601 	rsb	r6, r6, #1
 802b05a:	9620      	str	r6, [sp, #128]	@ 0x80
 802b05c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b05e:	441f      	add	r7, r3
 802b060:	e7da      	b.n	802b018 <_vfprintf_r+0x940>
 802b062:	9b08      	ldr	r3, [sp, #32]
 802b064:	2b46      	cmp	r3, #70	@ 0x46
 802b066:	f47f ae7b 	bne.w	802ad60 <_vfprintf_r+0x688>
 802b06a:	f005 0301 	and.w	r3, r5, #1
 802b06e:	2e00      	cmp	r6, #0
 802b070:	ea43 0309 	orr.w	r3, r3, r9
 802b074:	dd25      	ble.n	802b0c2 <_vfprintf_r+0x9ea>
 802b076:	b37b      	cbz	r3, 802b0d8 <_vfprintf_r+0xa00>
 802b078:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b07a:	18f3      	adds	r3, r6, r3
 802b07c:	4499      	add	r9, r3
 802b07e:	2366      	movs	r3, #102	@ 0x66
 802b080:	9306      	str	r3, [sp, #24]
 802b082:	e033      	b.n	802b0ec <_vfprintf_r+0xa14>
 802b084:	f813 7b01 	ldrb.w	r7, [r3], #1
 802b088:	f806 7f01 	strb.w	r7, [r6, #1]!
 802b08c:	e69f      	b.n	802adce <_vfprintf_r+0x6f6>
 802b08e:	b941      	cbnz	r1, 802b0a2 <_vfprintf_r+0x9ca>
 802b090:	2230      	movs	r2, #48	@ 0x30
 802b092:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802b096:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802b09a:	3330      	adds	r3, #48	@ 0x30
 802b09c:	f802 3b01 	strb.w	r3, [r2], #1
 802b0a0:	e6a1      	b.n	802ade6 <_vfprintf_r+0x70e>
 802b0a2:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802b0a6:	e7f8      	b.n	802b09a <_vfprintf_r+0x9c2>
 802b0a8:	9b04      	ldr	r3, [sp, #16]
 802b0aa:	42b3      	cmp	r3, r6
 802b0ac:	dd0d      	ble.n	802b0ca <_vfprintf_r+0x9f2>
 802b0ae:	9b04      	ldr	r3, [sp, #16]
 802b0b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b0b2:	2e00      	cmp	r6, #0
 802b0b4:	eb03 0902 	add.w	r9, r3, r2
 802b0b8:	dc0c      	bgt.n	802b0d4 <_vfprintf_r+0x9fc>
 802b0ba:	f1c6 0301 	rsb	r3, r6, #1
 802b0be:	4499      	add	r9, r3
 802b0c0:	e008      	b.n	802b0d4 <_vfprintf_r+0x9fc>
 802b0c2:	b17b      	cbz	r3, 802b0e4 <_vfprintf_r+0xa0c>
 802b0c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b0c6:	3301      	adds	r3, #1
 802b0c8:	e7d8      	b.n	802b07c <_vfprintf_r+0x9a4>
 802b0ca:	07eb      	lsls	r3, r5, #31
 802b0cc:	d521      	bpl.n	802b112 <_vfprintf_r+0xa3a>
 802b0ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b0d0:	eb06 0903 	add.w	r9, r6, r3
 802b0d4:	2367      	movs	r3, #103	@ 0x67
 802b0d6:	e7d3      	b.n	802b080 <_vfprintf_r+0x9a8>
 802b0d8:	46b1      	mov	r9, r6
 802b0da:	e7d0      	b.n	802b07e <_vfprintf_r+0x9a6>
 802b0dc:	0803c563 	.word	0x0803c563
 802b0e0:	0803c553 	.word	0x0803c553
 802b0e4:	2366      	movs	r3, #102	@ 0x66
 802b0e6:	9306      	str	r3, [sp, #24]
 802b0e8:	f04f 0901 	mov.w	r9, #1
 802b0ec:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802b0f0:	9308      	str	r3, [sp, #32]
 802b0f2:	d01f      	beq.n	802b134 <_vfprintf_r+0xa5c>
 802b0f4:	2700      	movs	r7, #0
 802b0f6:	2e00      	cmp	r6, #0
 802b0f8:	9708      	str	r7, [sp, #32]
 802b0fa:	f77f ae88 	ble.w	802ae0e <_vfprintf_r+0x736>
 802b0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b100:	781b      	ldrb	r3, [r3, #0]
 802b102:	2bff      	cmp	r3, #255	@ 0xff
 802b104:	d107      	bne.n	802b116 <_vfprintf_r+0xa3e>
 802b106:	9b08      	ldr	r3, [sp, #32]
 802b108:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802b10a:	443b      	add	r3, r7
 802b10c:	fb02 9903 	mla	r9, r2, r3, r9
 802b110:	e67d      	b.n	802ae0e <_vfprintf_r+0x736>
 802b112:	46b1      	mov	r9, r6
 802b114:	e7de      	b.n	802b0d4 <_vfprintf_r+0x9fc>
 802b116:	42b3      	cmp	r3, r6
 802b118:	daf5      	bge.n	802b106 <_vfprintf_r+0xa2e>
 802b11a:	1af6      	subs	r6, r6, r3
 802b11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b11e:	785b      	ldrb	r3, [r3, #1]
 802b120:	b133      	cbz	r3, 802b130 <_vfprintf_r+0xa58>
 802b122:	9b08      	ldr	r3, [sp, #32]
 802b124:	3301      	adds	r3, #1
 802b126:	9308      	str	r3, [sp, #32]
 802b128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b12a:	3301      	adds	r3, #1
 802b12c:	9309      	str	r3, [sp, #36]	@ 0x24
 802b12e:	e7e6      	b.n	802b0fe <_vfprintf_r+0xa26>
 802b130:	3701      	adds	r7, #1
 802b132:	e7e4      	b.n	802b0fe <_vfprintf_r+0xa26>
 802b134:	9f08      	ldr	r7, [sp, #32]
 802b136:	e66a      	b.n	802ae0e <_vfprintf_r+0x736>
 802b138:	232d      	movs	r3, #45	@ 0x2d
 802b13a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802b13e:	e66a      	b.n	802ae16 <_vfprintf_r+0x73e>
 802b140:	06af      	lsls	r7, r5, #26
 802b142:	d507      	bpl.n	802b154 <_vfprintf_r+0xa7c>
 802b144:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b146:	6833      	ldr	r3, [r6, #0]
 802b148:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802b14a:	17d2      	asrs	r2, r2, #31
 802b14c:	e9c3 1200 	strd	r1, r2, [r3]
 802b150:	3604      	adds	r6, #4
 802b152:	e734      	b.n	802afbe <_vfprintf_r+0x8e6>
 802b154:	06e8      	lsls	r0, r5, #27
 802b156:	d503      	bpl.n	802b160 <_vfprintf_r+0xa88>
 802b158:	6833      	ldr	r3, [r6, #0]
 802b15a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b15c:	601a      	str	r2, [r3, #0]
 802b15e:	e7f7      	b.n	802b150 <_vfprintf_r+0xa78>
 802b160:	0669      	lsls	r1, r5, #25
 802b162:	d503      	bpl.n	802b16c <_vfprintf_r+0xa94>
 802b164:	6833      	ldr	r3, [r6, #0]
 802b166:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b168:	801a      	strh	r2, [r3, #0]
 802b16a:	e7f1      	b.n	802b150 <_vfprintf_r+0xa78>
 802b16c:	05aa      	lsls	r2, r5, #22
 802b16e:	d5f3      	bpl.n	802b158 <_vfprintf_r+0xa80>
 802b170:	6833      	ldr	r3, [r6, #0]
 802b172:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b174:	701a      	strb	r2, [r3, #0]
 802b176:	e7eb      	b.n	802b150 <_vfprintf_r+0xa78>
 802b178:	f045 0510 	orr.w	r5, r5, #16
 802b17c:	f015 0320 	ands.w	r3, r5, #32
 802b180:	d020      	beq.n	802b1c4 <_vfprintf_r+0xaec>
 802b182:	3607      	adds	r6, #7
 802b184:	f026 0307 	bic.w	r3, r6, #7
 802b188:	461a      	mov	r2, r3
 802b18a:	685f      	ldr	r7, [r3, #4]
 802b18c:	f852 6b08 	ldr.w	r6, [r2], #8
 802b190:	9207      	str	r2, [sp, #28]
 802b192:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802b196:	2300      	movs	r3, #0
 802b198:	2200      	movs	r2, #0
 802b19a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802b19e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802b1a2:	f000 8491 	beq.w	802bac8 <_vfprintf_r+0x13f0>
 802b1a6:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802b1aa:	9208      	str	r2, [sp, #32]
 802b1ac:	ea56 0207 	orrs.w	r2, r6, r7
 802b1b0:	f040 848f 	bne.w	802bad2 <_vfprintf_r+0x13fa>
 802b1b4:	f1b9 0f00 	cmp.w	r9, #0
 802b1b8:	f000 80db 	beq.w	802b372 <_vfprintf_r+0xc9a>
 802b1bc:	2b01      	cmp	r3, #1
 802b1be:	f040 848b 	bne.w	802bad8 <_vfprintf_r+0x1400>
 802b1c2:	e083      	b.n	802b2cc <_vfprintf_r+0xbf4>
 802b1c4:	4632      	mov	r2, r6
 802b1c6:	f015 0710 	ands.w	r7, r5, #16
 802b1ca:	f852 6b04 	ldr.w	r6, [r2], #4
 802b1ce:	9207      	str	r2, [sp, #28]
 802b1d0:	d001      	beq.n	802b1d6 <_vfprintf_r+0xafe>
 802b1d2:	461f      	mov	r7, r3
 802b1d4:	e7dd      	b.n	802b192 <_vfprintf_r+0xaba>
 802b1d6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802b1da:	d001      	beq.n	802b1e0 <_vfprintf_r+0xb08>
 802b1dc:	b2b6      	uxth	r6, r6
 802b1de:	e7d8      	b.n	802b192 <_vfprintf_r+0xaba>
 802b1e0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802b1e4:	d0d5      	beq.n	802b192 <_vfprintf_r+0xaba>
 802b1e6:	b2f6      	uxtb	r6, r6
 802b1e8:	e7f3      	b.n	802b1d2 <_vfprintf_r+0xafa>
 802b1ea:	4633      	mov	r3, r6
 802b1ec:	2278      	movs	r2, #120	@ 0x78
 802b1ee:	f853 6b04 	ldr.w	r6, [r3], #4
 802b1f2:	9307      	str	r3, [sp, #28]
 802b1f4:	f647 0330 	movw	r3, #30768	@ 0x7830
 802b1f8:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802b1fc:	4b93      	ldr	r3, [pc, #588]	@ (802b44c <_vfprintf_r+0xd74>)
 802b1fe:	9319      	str	r3, [sp, #100]	@ 0x64
 802b200:	2700      	movs	r7, #0
 802b202:	f045 0502 	orr.w	r5, r5, #2
 802b206:	2302      	movs	r3, #2
 802b208:	9206      	str	r2, [sp, #24]
 802b20a:	e7c5      	b.n	802b198 <_vfprintf_r+0xac0>
 802b20c:	4633      	mov	r3, r6
 802b20e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802b212:	f853 8b04 	ldr.w	r8, [r3], #4
 802b216:	9307      	str	r3, [sp, #28]
 802b218:	f04f 0600 	mov.w	r6, #0
 802b21c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802b220:	d00f      	beq.n	802b242 <_vfprintf_r+0xb6a>
 802b222:	464a      	mov	r2, r9
 802b224:	4631      	mov	r1, r6
 802b226:	4640      	mov	r0, r8
 802b228:	f7e4 ffea 	bl	8010200 <memchr>
 802b22c:	4682      	mov	sl, r0
 802b22e:	2800      	cmp	r0, #0
 802b230:	f43f ac7a 	beq.w	802ab28 <_vfprintf_r+0x450>
 802b234:	eba0 0908 	sub.w	r9, r0, r8
 802b238:	46b2      	mov	sl, r6
 802b23a:	9610      	str	r6, [sp, #64]	@ 0x40
 802b23c:	4637      	mov	r7, r6
 802b23e:	9608      	str	r6, [sp, #32]
 802b240:	e5ec      	b.n	802ae1c <_vfprintf_r+0x744>
 802b242:	4640      	mov	r0, r8
 802b244:	f7e5 f82c 	bl	80102a0 <strlen>
 802b248:	46b2      	mov	sl, r6
 802b24a:	4681      	mov	r9, r0
 802b24c:	e46c      	b.n	802ab28 <_vfprintf_r+0x450>
 802b24e:	f045 0510 	orr.w	r5, r5, #16
 802b252:	f015 0320 	ands.w	r3, r5, #32
 802b256:	d009      	beq.n	802b26c <_vfprintf_r+0xb94>
 802b258:	3607      	adds	r6, #7
 802b25a:	f026 0307 	bic.w	r3, r6, #7
 802b25e:	461a      	mov	r2, r3
 802b260:	685f      	ldr	r7, [r3, #4]
 802b262:	f852 6b08 	ldr.w	r6, [r2], #8
 802b266:	9207      	str	r2, [sp, #28]
 802b268:	2301      	movs	r3, #1
 802b26a:	e795      	b.n	802b198 <_vfprintf_r+0xac0>
 802b26c:	4632      	mov	r2, r6
 802b26e:	f015 0710 	ands.w	r7, r5, #16
 802b272:	f852 6b04 	ldr.w	r6, [r2], #4
 802b276:	9207      	str	r2, [sp, #28]
 802b278:	d001      	beq.n	802b27e <_vfprintf_r+0xba6>
 802b27a:	461f      	mov	r7, r3
 802b27c:	e7f4      	b.n	802b268 <_vfprintf_r+0xb90>
 802b27e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802b282:	d001      	beq.n	802b288 <_vfprintf_r+0xbb0>
 802b284:	b2b6      	uxth	r6, r6
 802b286:	e7ef      	b.n	802b268 <_vfprintf_r+0xb90>
 802b288:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802b28c:	d0ec      	beq.n	802b268 <_vfprintf_r+0xb90>
 802b28e:	b2f6      	uxtb	r6, r6
 802b290:	e7f3      	b.n	802b27a <_vfprintf_r+0xba2>
 802b292:	4b6f      	ldr	r3, [pc, #444]	@ (802b450 <_vfprintf_r+0xd78>)
 802b294:	f7ff bb33 	b.w	802a8fe <_vfprintf_r+0x226>
 802b298:	4632      	mov	r2, r6
 802b29a:	f015 0710 	ands.w	r7, r5, #16
 802b29e:	f852 6b04 	ldr.w	r6, [r2], #4
 802b2a2:	9207      	str	r2, [sp, #28]
 802b2a4:	d002      	beq.n	802b2ac <_vfprintf_r+0xbd4>
 802b2a6:	461f      	mov	r7, r3
 802b2a8:	f7ff bb36 	b.w	802a918 <_vfprintf_r+0x240>
 802b2ac:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802b2b0:	d002      	beq.n	802b2b8 <_vfprintf_r+0xbe0>
 802b2b2:	b2b6      	uxth	r6, r6
 802b2b4:	f7ff bb30 	b.w	802a918 <_vfprintf_r+0x240>
 802b2b8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802b2bc:	f43f ab2c 	beq.w	802a918 <_vfprintf_r+0x240>
 802b2c0:	b2f6      	uxtb	r6, r6
 802b2c2:	e7f0      	b.n	802b2a6 <_vfprintf_r+0xbce>
 802b2c4:	2e0a      	cmp	r6, #10
 802b2c6:	f177 0300 	sbcs.w	r3, r7, #0
 802b2ca:	d207      	bcs.n	802b2dc <_vfprintf_r+0xc04>
 802b2cc:	3630      	adds	r6, #48	@ 0x30
 802b2ce:	b2f6      	uxtb	r6, r6
 802b2d0:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802b2d4:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 802b2d8:	f000 bc1a 	b.w	802bb10 <_vfprintf_r+0x1438>
 802b2dc:	2300      	movs	r3, #0
 802b2de:	9304      	str	r3, [sp, #16]
 802b2e0:	9b08      	ldr	r3, [sp, #32]
 802b2e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802b2e6:	ad52      	add	r5, sp, #328	@ 0x148
 802b2e8:	9310      	str	r3, [sp, #64]	@ 0x40
 802b2ea:	220a      	movs	r2, #10
 802b2ec:	2300      	movs	r3, #0
 802b2ee:	4630      	mov	r0, r6
 802b2f0:	4639      	mov	r1, r7
 802b2f2:	f7e5 fd31 	bl	8010d58 <__aeabi_uldivmod>
 802b2f6:	9b04      	ldr	r3, [sp, #16]
 802b2f8:	9011      	str	r0, [sp, #68]	@ 0x44
 802b2fa:	3301      	adds	r3, #1
 802b2fc:	9304      	str	r3, [sp, #16]
 802b2fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b300:	3230      	adds	r2, #48	@ 0x30
 802b302:	468a      	mov	sl, r1
 802b304:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 802b308:	f805 2c01 	strb.w	r2, [r5, #-1]
 802b30c:	b1d3      	cbz	r3, 802b344 <_vfprintf_r+0xc6c>
 802b30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b310:	9a04      	ldr	r2, [sp, #16]
 802b312:	781b      	ldrb	r3, [r3, #0]
 802b314:	429a      	cmp	r2, r3
 802b316:	d115      	bne.n	802b344 <_vfprintf_r+0xc6c>
 802b318:	2aff      	cmp	r2, #255	@ 0xff
 802b31a:	d013      	beq.n	802b344 <_vfprintf_r+0xc6c>
 802b31c:	2e0a      	cmp	r6, #10
 802b31e:	f177 0300 	sbcs.w	r3, r7, #0
 802b322:	d30f      	bcc.n	802b344 <_vfprintf_r+0xc6c>
 802b324:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b326:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802b328:	eba8 0803 	sub.w	r8, r8, r3
 802b32c:	461a      	mov	r2, r3
 802b32e:	4640      	mov	r0, r8
 802b330:	f001 ff25 	bl	802d17e <strncpy>
 802b334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b336:	785b      	ldrb	r3, [r3, #1]
 802b338:	b11b      	cbz	r3, 802b342 <_vfprintf_r+0xc6a>
 802b33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b33c:	3301      	adds	r3, #1
 802b33e:	9309      	str	r3, [sp, #36]	@ 0x24
 802b340:	2300      	movs	r3, #0
 802b342:	9304      	str	r3, [sp, #16]
 802b344:	2e0a      	cmp	r6, #10
 802b346:	f177 0700 	sbcs.w	r7, r7, #0
 802b34a:	f0c0 83e1 	bcc.w	802bb10 <_vfprintf_r+0x1438>
 802b34e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802b350:	4657      	mov	r7, sl
 802b352:	4645      	mov	r5, r8
 802b354:	e7c9      	b.n	802b2ea <_vfprintf_r+0xc12>
 802b356:	f006 030f 	and.w	r3, r6, #15
 802b35a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802b35c:	0936      	lsrs	r6, r6, #4
 802b35e:	5cd3      	ldrb	r3, [r2, r3]
 802b360:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802b364:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802b368:	093f      	lsrs	r7, r7, #4
 802b36a:	ea56 0307 	orrs.w	r3, r6, r7
 802b36e:	d1f2      	bne.n	802b356 <_vfprintf_r+0xc7e>
 802b370:	e3ce      	b.n	802bb10 <_vfprintf_r+0x1438>
 802b372:	b91b      	cbnz	r3, 802b37c <_vfprintf_r+0xca4>
 802b374:	07ed      	lsls	r5, r5, #31
 802b376:	d501      	bpl.n	802b37c <_vfprintf_r+0xca4>
 802b378:	2630      	movs	r6, #48	@ 0x30
 802b37a:	e7a9      	b.n	802b2d0 <_vfprintf_r+0xbf8>
 802b37c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802b380:	e3c6      	b.n	802bb10 <_vfprintf_r+0x1438>
 802b382:	9b06      	ldr	r3, [sp, #24]
 802b384:	2b00      	cmp	r3, #0
 802b386:	f000 8390 	beq.w	802baaa <_vfprintf_r+0x13d2>
 802b38a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802b38e:	2300      	movs	r3, #0
 802b390:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802b394:	9607      	str	r6, [sp, #28]
 802b396:	f7ff bb5c 	b.w	802aa52 <_vfprintf_r+0x37a>
 802b39a:	2010      	movs	r0, #16
 802b39c:	4403      	add	r3, r0
 802b39e:	2a07      	cmp	r2, #7
 802b3a0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b3a4:	6060      	str	r0, [r4, #4]
 802b3a6:	dd08      	ble.n	802b3ba <_vfprintf_r+0xce2>
 802b3a8:	9803      	ldr	r0, [sp, #12]
 802b3aa:	aa26      	add	r2, sp, #152	@ 0x98
 802b3ac:	4659      	mov	r1, fp
 802b3ae:	f000 fbff 	bl	802bbb0 <__sprint_r>
 802b3b2:	2800      	cmp	r0, #0
 802b3b4:	f040 8357 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b3b8:	a929      	add	r1, sp, #164	@ 0xa4
 802b3ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b3bc:	3b10      	subs	r3, #16
 802b3be:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b3c0:	460c      	mov	r4, r1
 802b3c2:	e547      	b.n	802ae54 <_vfprintf_r+0x77c>
 802b3c4:	460c      	mov	r4, r1
 802b3c6:	e562      	b.n	802ae8e <_vfprintf_r+0x7b6>
 802b3c8:	9803      	ldr	r0, [sp, #12]
 802b3ca:	aa26      	add	r2, sp, #152	@ 0x98
 802b3cc:	4659      	mov	r1, fp
 802b3ce:	f000 fbef 	bl	802bbb0 <__sprint_r>
 802b3d2:	2800      	cmp	r0, #0
 802b3d4:	f040 8347 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b3d8:	ac29      	add	r4, sp, #164	@ 0xa4
 802b3da:	e56a      	b.n	802aeb2 <_vfprintf_r+0x7da>
 802b3dc:	9803      	ldr	r0, [sp, #12]
 802b3de:	aa26      	add	r2, sp, #152	@ 0x98
 802b3e0:	4659      	mov	r1, fp
 802b3e2:	f000 fbe5 	bl	802bbb0 <__sprint_r>
 802b3e6:	2800      	cmp	r0, #0
 802b3e8:	f040 833d 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b3ec:	ac29      	add	r4, sp, #164	@ 0xa4
 802b3ee:	e570      	b.n	802aed2 <_vfprintf_r+0x7fa>
 802b3f0:	2010      	movs	r0, #16
 802b3f2:	4403      	add	r3, r0
 802b3f4:	2a07      	cmp	r2, #7
 802b3f6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b3fa:	6060      	str	r0, [r4, #4]
 802b3fc:	dd08      	ble.n	802b410 <_vfprintf_r+0xd38>
 802b3fe:	9803      	ldr	r0, [sp, #12]
 802b400:	aa26      	add	r2, sp, #152	@ 0x98
 802b402:	4659      	mov	r1, fp
 802b404:	f000 fbd4 	bl	802bbb0 <__sprint_r>
 802b408:	2800      	cmp	r0, #0
 802b40a:	f040 832c 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b40e:	a929      	add	r1, sp, #164	@ 0xa4
 802b410:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b412:	3b10      	subs	r3, #16
 802b414:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b416:	460c      	mov	r4, r1
 802b418:	e564      	b.n	802aee4 <_vfprintf_r+0x80c>
 802b41a:	460c      	mov	r4, r1
 802b41c:	e57f      	b.n	802af1e <_vfprintf_r+0x846>
 802b41e:	2010      	movs	r0, #16
 802b420:	4403      	add	r3, r0
 802b422:	2a07      	cmp	r2, #7
 802b424:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b428:	6060      	str	r0, [r4, #4]
 802b42a:	dd08      	ble.n	802b43e <_vfprintf_r+0xd66>
 802b42c:	9803      	ldr	r0, [sp, #12]
 802b42e:	aa26      	add	r2, sp, #152	@ 0x98
 802b430:	4659      	mov	r1, fp
 802b432:	f000 fbbd 	bl	802bbb0 <__sprint_r>
 802b436:	2800      	cmp	r0, #0
 802b438:	f040 8315 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b43c:	a929      	add	r1, sp, #164	@ 0xa4
 802b43e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b440:	3b10      	subs	r3, #16
 802b442:	9310      	str	r3, [sp, #64]	@ 0x40
 802b444:	460c      	mov	r4, r1
 802b446:	e570      	b.n	802af2a <_vfprintf_r+0x852>
 802b448:	460c      	mov	r4, r1
 802b44a:	e58b      	b.n	802af64 <_vfprintf_r+0x88c>
 802b44c:	0803c52f 	.word	0x0803c52f
 802b450:	0803c540 	.word	0x0803c540
 802b454:	9b06      	ldr	r3, [sp, #24]
 802b456:	2b65      	cmp	r3, #101	@ 0x65
 802b458:	f340 8245 	ble.w	802b8e6 <_vfprintf_r+0x120e>
 802b45c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802b460:	2200      	movs	r2, #0
 802b462:	2300      	movs	r3, #0
 802b464:	f7e5 fb48 	bl	8010af8 <__aeabi_dcmpeq>
 802b468:	2800      	cmp	r0, #0
 802b46a:	d06a      	beq.n	802b542 <_vfprintf_r+0xe6a>
 802b46c:	4b73      	ldr	r3, [pc, #460]	@ (802b63c <_vfprintf_r+0xf64>)
 802b46e:	6023      	str	r3, [r4, #0]
 802b470:	2301      	movs	r3, #1
 802b472:	6063      	str	r3, [r4, #4]
 802b474:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b476:	3301      	adds	r3, #1
 802b478:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b47a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b47c:	3301      	adds	r3, #1
 802b47e:	2b07      	cmp	r3, #7
 802b480:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b482:	dc37      	bgt.n	802b4f4 <_vfprintf_r+0xe1c>
 802b484:	3408      	adds	r4, #8
 802b486:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b488:	9a04      	ldr	r2, [sp, #16]
 802b48a:	4293      	cmp	r3, r2
 802b48c:	db02      	blt.n	802b494 <_vfprintf_r+0xdbc>
 802b48e:	07e9      	lsls	r1, r5, #31
 802b490:	f57f ad78 	bpl.w	802af84 <_vfprintf_r+0x8ac>
 802b494:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b496:	6023      	str	r3, [r4, #0]
 802b498:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b49a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b49c:	6063      	str	r3, [r4, #4]
 802b49e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b4a0:	4413      	add	r3, r2
 802b4a2:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b4a4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b4a6:	3301      	adds	r3, #1
 802b4a8:	2b07      	cmp	r3, #7
 802b4aa:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b4ac:	dc2c      	bgt.n	802b508 <_vfprintf_r+0xe30>
 802b4ae:	3408      	adds	r4, #8
 802b4b0:	9b04      	ldr	r3, [sp, #16]
 802b4b2:	1e5e      	subs	r6, r3, #1
 802b4b4:	2e00      	cmp	r6, #0
 802b4b6:	f77f ad65 	ble.w	802af84 <_vfprintf_r+0x8ac>
 802b4ba:	4f61      	ldr	r7, [pc, #388]	@ (802b640 <_vfprintf_r+0xf68>)
 802b4bc:	f04f 0810 	mov.w	r8, #16
 802b4c0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b4c4:	2e10      	cmp	r6, #16
 802b4c6:	f103 0301 	add.w	r3, r3, #1
 802b4ca:	f104 0108 	add.w	r1, r4, #8
 802b4ce:	6027      	str	r7, [r4, #0]
 802b4d0:	dc24      	bgt.n	802b51c <_vfprintf_r+0xe44>
 802b4d2:	6066      	str	r6, [r4, #4]
 802b4d4:	2b07      	cmp	r3, #7
 802b4d6:	4416      	add	r6, r2
 802b4d8:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802b4dc:	f340 82a2 	ble.w	802ba24 <_vfprintf_r+0x134c>
 802b4e0:	9803      	ldr	r0, [sp, #12]
 802b4e2:	aa26      	add	r2, sp, #152	@ 0x98
 802b4e4:	4659      	mov	r1, fp
 802b4e6:	f000 fb63 	bl	802bbb0 <__sprint_r>
 802b4ea:	2800      	cmp	r0, #0
 802b4ec:	f040 82bb 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b4f0:	ac29      	add	r4, sp, #164	@ 0xa4
 802b4f2:	e547      	b.n	802af84 <_vfprintf_r+0x8ac>
 802b4f4:	9803      	ldr	r0, [sp, #12]
 802b4f6:	aa26      	add	r2, sp, #152	@ 0x98
 802b4f8:	4659      	mov	r1, fp
 802b4fa:	f000 fb59 	bl	802bbb0 <__sprint_r>
 802b4fe:	2800      	cmp	r0, #0
 802b500:	f040 82b1 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b504:	ac29      	add	r4, sp, #164	@ 0xa4
 802b506:	e7be      	b.n	802b486 <_vfprintf_r+0xdae>
 802b508:	9803      	ldr	r0, [sp, #12]
 802b50a:	aa26      	add	r2, sp, #152	@ 0x98
 802b50c:	4659      	mov	r1, fp
 802b50e:	f000 fb4f 	bl	802bbb0 <__sprint_r>
 802b512:	2800      	cmp	r0, #0
 802b514:	f040 82a7 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b518:	ac29      	add	r4, sp, #164	@ 0xa4
 802b51a:	e7c9      	b.n	802b4b0 <_vfprintf_r+0xdd8>
 802b51c:	3210      	adds	r2, #16
 802b51e:	2b07      	cmp	r3, #7
 802b520:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b524:	f8c4 8004 	str.w	r8, [r4, #4]
 802b528:	dd08      	ble.n	802b53c <_vfprintf_r+0xe64>
 802b52a:	9803      	ldr	r0, [sp, #12]
 802b52c:	aa26      	add	r2, sp, #152	@ 0x98
 802b52e:	4659      	mov	r1, fp
 802b530:	f000 fb3e 	bl	802bbb0 <__sprint_r>
 802b534:	2800      	cmp	r0, #0
 802b536:	f040 8296 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b53a:	a929      	add	r1, sp, #164	@ 0xa4
 802b53c:	3e10      	subs	r6, #16
 802b53e:	460c      	mov	r4, r1
 802b540:	e7be      	b.n	802b4c0 <_vfprintf_r+0xde8>
 802b542:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b544:	2b00      	cmp	r3, #0
 802b546:	dc7d      	bgt.n	802b644 <_vfprintf_r+0xf6c>
 802b548:	4b3c      	ldr	r3, [pc, #240]	@ (802b63c <_vfprintf_r+0xf64>)
 802b54a:	6023      	str	r3, [r4, #0]
 802b54c:	2301      	movs	r3, #1
 802b54e:	6063      	str	r3, [r4, #4]
 802b550:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b552:	3301      	adds	r3, #1
 802b554:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b556:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b558:	3301      	adds	r3, #1
 802b55a:	2b07      	cmp	r3, #7
 802b55c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b55e:	dc46      	bgt.n	802b5ee <_vfprintf_r+0xf16>
 802b560:	3408      	adds	r4, #8
 802b562:	9904      	ldr	r1, [sp, #16]
 802b564:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b566:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802b568:	430b      	orrs	r3, r1
 802b56a:	f005 0101 	and.w	r1, r5, #1
 802b56e:	430b      	orrs	r3, r1
 802b570:	f43f ad08 	beq.w	802af84 <_vfprintf_r+0x8ac>
 802b574:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b576:	6023      	str	r3, [r4, #0]
 802b578:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b57a:	6063      	str	r3, [r4, #4]
 802b57c:	441a      	add	r2, r3
 802b57e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b580:	9228      	str	r2, [sp, #160]	@ 0xa0
 802b582:	3301      	adds	r3, #1
 802b584:	2b07      	cmp	r3, #7
 802b586:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b588:	dc3b      	bgt.n	802b602 <_vfprintf_r+0xf2a>
 802b58a:	f104 0308 	add.w	r3, r4, #8
 802b58e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802b590:	2e00      	cmp	r6, #0
 802b592:	da1b      	bge.n	802b5cc <_vfprintf_r+0xef4>
 802b594:	4f2a      	ldr	r7, [pc, #168]	@ (802b640 <_vfprintf_r+0xf68>)
 802b596:	4276      	negs	r6, r6
 802b598:	461a      	mov	r2, r3
 802b59a:	2410      	movs	r4, #16
 802b59c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802b5a0:	2e10      	cmp	r6, #16
 802b5a2:	f101 0101 	add.w	r1, r1, #1
 802b5a6:	f103 0308 	add.w	r3, r3, #8
 802b5aa:	6017      	str	r7, [r2, #0]
 802b5ac:	dc33      	bgt.n	802b616 <_vfprintf_r+0xf3e>
 802b5ae:	6056      	str	r6, [r2, #4]
 802b5b0:	2907      	cmp	r1, #7
 802b5b2:	4406      	add	r6, r0
 802b5b4:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802b5b8:	dd08      	ble.n	802b5cc <_vfprintf_r+0xef4>
 802b5ba:	9803      	ldr	r0, [sp, #12]
 802b5bc:	aa26      	add	r2, sp, #152	@ 0x98
 802b5be:	4659      	mov	r1, fp
 802b5c0:	f000 faf6 	bl	802bbb0 <__sprint_r>
 802b5c4:	2800      	cmp	r0, #0
 802b5c6:	f040 824e 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b5ca:	ab29      	add	r3, sp, #164	@ 0xa4
 802b5cc:	9a04      	ldr	r2, [sp, #16]
 802b5ce:	9904      	ldr	r1, [sp, #16]
 802b5d0:	605a      	str	r2, [r3, #4]
 802b5d2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802b5d4:	f8c3 8000 	str.w	r8, [r3]
 802b5d8:	440a      	add	r2, r1
 802b5da:	9228      	str	r2, [sp, #160]	@ 0xa0
 802b5dc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802b5de:	3201      	adds	r2, #1
 802b5e0:	2a07      	cmp	r2, #7
 802b5e2:	9227      	str	r2, [sp, #156]	@ 0x9c
 802b5e4:	f73f af7c 	bgt.w	802b4e0 <_vfprintf_r+0xe08>
 802b5e8:	f103 0408 	add.w	r4, r3, #8
 802b5ec:	e4ca      	b.n	802af84 <_vfprintf_r+0x8ac>
 802b5ee:	9803      	ldr	r0, [sp, #12]
 802b5f0:	aa26      	add	r2, sp, #152	@ 0x98
 802b5f2:	4659      	mov	r1, fp
 802b5f4:	f000 fadc 	bl	802bbb0 <__sprint_r>
 802b5f8:	2800      	cmp	r0, #0
 802b5fa:	f040 8234 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b5fe:	ac29      	add	r4, sp, #164	@ 0xa4
 802b600:	e7af      	b.n	802b562 <_vfprintf_r+0xe8a>
 802b602:	9803      	ldr	r0, [sp, #12]
 802b604:	aa26      	add	r2, sp, #152	@ 0x98
 802b606:	4659      	mov	r1, fp
 802b608:	f000 fad2 	bl	802bbb0 <__sprint_r>
 802b60c:	2800      	cmp	r0, #0
 802b60e:	f040 822a 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b612:	ab29      	add	r3, sp, #164	@ 0xa4
 802b614:	e7bb      	b.n	802b58e <_vfprintf_r+0xeb6>
 802b616:	3010      	adds	r0, #16
 802b618:	2907      	cmp	r1, #7
 802b61a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802b61e:	6054      	str	r4, [r2, #4]
 802b620:	dd08      	ble.n	802b634 <_vfprintf_r+0xf5c>
 802b622:	9803      	ldr	r0, [sp, #12]
 802b624:	aa26      	add	r2, sp, #152	@ 0x98
 802b626:	4659      	mov	r1, fp
 802b628:	f000 fac2 	bl	802bbb0 <__sprint_r>
 802b62c:	2800      	cmp	r0, #0
 802b62e:	f040 821a 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b632:	ab29      	add	r3, sp, #164	@ 0xa4
 802b634:	3e10      	subs	r6, #16
 802b636:	461a      	mov	r2, r3
 802b638:	e7b0      	b.n	802b59c <_vfprintf_r+0xec4>
 802b63a:	bf00      	nop
 802b63c:	0803c551 	.word	0x0803c551
 802b640:	0803c553 	.word	0x0803c553
 802b644:	9b04      	ldr	r3, [sp, #16]
 802b646:	4443      	add	r3, r8
 802b648:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b64a:	9b04      	ldr	r3, [sp, #16]
 802b64c:	42b3      	cmp	r3, r6
 802b64e:	bfa8      	it	ge
 802b650:	4633      	movge	r3, r6
 802b652:	2b00      	cmp	r3, #0
 802b654:	4699      	mov	r9, r3
 802b656:	dd0b      	ble.n	802b670 <_vfprintf_r+0xf98>
 802b658:	e9c4 8300 	strd	r8, r3, [r4]
 802b65c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b65e:	444b      	add	r3, r9
 802b660:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b662:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b664:	3301      	adds	r3, #1
 802b666:	2b07      	cmp	r3, #7
 802b668:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b66a:	f300 8089 	bgt.w	802b780 <_vfprintf_r+0x10a8>
 802b66e:	3408      	adds	r4, #8
 802b670:	f1b9 0f00 	cmp.w	r9, #0
 802b674:	bfac      	ite	ge
 802b676:	eba6 0309 	subge.w	r3, r6, r9
 802b67a:	4633      	movlt	r3, r6
 802b67c:	2b00      	cmp	r3, #0
 802b67e:	9306      	str	r3, [sp, #24]
 802b680:	dd1c      	ble.n	802b6bc <_vfprintf_r+0xfe4>
 802b682:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 802b9e8 <_vfprintf_r+0x1310>
 802b686:	9806      	ldr	r0, [sp, #24]
 802b688:	f8c4 9000 	str.w	r9, [r4]
 802b68c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802b690:	2810      	cmp	r0, #16
 802b692:	f102 0201 	add.w	r2, r2, #1
 802b696:	f104 0108 	add.w	r1, r4, #8
 802b69a:	dc7b      	bgt.n	802b794 <_vfprintf_r+0x10bc>
 802b69c:	4403      	add	r3, r0
 802b69e:	2a07      	cmp	r2, #7
 802b6a0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b6a4:	6060      	str	r0, [r4, #4]
 802b6a6:	f340 808a 	ble.w	802b7be <_vfprintf_r+0x10e6>
 802b6aa:	9803      	ldr	r0, [sp, #12]
 802b6ac:	aa26      	add	r2, sp, #152	@ 0x98
 802b6ae:	4659      	mov	r1, fp
 802b6b0:	f000 fa7e 	bl	802bbb0 <__sprint_r>
 802b6b4:	2800      	cmp	r0, #0
 802b6b6:	f040 81d6 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b6ba:	ac29      	add	r4, sp, #164	@ 0xa4
 802b6bc:	056a      	lsls	r2, r5, #21
 802b6be:	44b0      	add	r8, r6
 802b6c0:	d508      	bpl.n	802b6d4 <_vfprintf_r+0xffc>
 802b6c2:	9b08      	ldr	r3, [sp, #32]
 802b6c4:	2b00      	cmp	r3, #0
 802b6c6:	d17c      	bne.n	802b7c2 <_vfprintf_r+0x10ea>
 802b6c8:	2f00      	cmp	r7, #0
 802b6ca:	d17c      	bne.n	802b7c6 <_vfprintf_r+0x10ee>
 802b6cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b6ce:	4598      	cmp	r8, r3
 802b6d0:	bf28      	it	cs
 802b6d2:	4698      	movcs	r8, r3
 802b6d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b6d6:	9a04      	ldr	r2, [sp, #16]
 802b6d8:	4293      	cmp	r3, r2
 802b6da:	db01      	blt.n	802b6e0 <_vfprintf_r+0x1008>
 802b6dc:	07eb      	lsls	r3, r5, #31
 802b6de:	d50e      	bpl.n	802b6fe <_vfprintf_r+0x1026>
 802b6e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b6e2:	6023      	str	r3, [r4, #0]
 802b6e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b6e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b6e8:	6063      	str	r3, [r4, #4]
 802b6ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b6ec:	4413      	add	r3, r2
 802b6ee:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b6f0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b6f2:	3301      	adds	r3, #1
 802b6f4:	2b07      	cmp	r3, #7
 802b6f6:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b6f8:	f300 80e1 	bgt.w	802b8be <_vfprintf_r+0x11e6>
 802b6fc:	3408      	adds	r4, #8
 802b6fe:	9b04      	ldr	r3, [sp, #16]
 802b700:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802b702:	1bdf      	subs	r7, r3, r7
 802b704:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b706:	eba3 0308 	sub.w	r3, r3, r8
 802b70a:	429f      	cmp	r7, r3
 802b70c:	bfa8      	it	ge
 802b70e:	461f      	movge	r7, r3
 802b710:	2f00      	cmp	r7, #0
 802b712:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b714:	dd0a      	ble.n	802b72c <_vfprintf_r+0x1054>
 802b716:	443b      	add	r3, r7
 802b718:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b71a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b71c:	3301      	adds	r3, #1
 802b71e:	2b07      	cmp	r3, #7
 802b720:	e9c4 8700 	strd	r8, r7, [r4]
 802b724:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b726:	f300 80d4 	bgt.w	802b8d2 <_vfprintf_r+0x11fa>
 802b72a:	3408      	adds	r4, #8
 802b72c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802b72e:	9b04      	ldr	r3, [sp, #16]
 802b730:	2f00      	cmp	r7, #0
 802b732:	eba3 0606 	sub.w	r6, r3, r6
 802b736:	bfa8      	it	ge
 802b738:	1bf6      	subge	r6, r6, r7
 802b73a:	2e00      	cmp	r6, #0
 802b73c:	f77f ac22 	ble.w	802af84 <_vfprintf_r+0x8ac>
 802b740:	4fa9      	ldr	r7, [pc, #676]	@ (802b9e8 <_vfprintf_r+0x1310>)
 802b742:	f04f 0810 	mov.w	r8, #16
 802b746:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b74a:	2e10      	cmp	r6, #16
 802b74c:	f103 0301 	add.w	r3, r3, #1
 802b750:	f104 0108 	add.w	r1, r4, #8
 802b754:	6027      	str	r7, [r4, #0]
 802b756:	f77f aebc 	ble.w	802b4d2 <_vfprintf_r+0xdfa>
 802b75a:	3210      	adds	r2, #16
 802b75c:	2b07      	cmp	r3, #7
 802b75e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b762:	f8c4 8004 	str.w	r8, [r4, #4]
 802b766:	dd08      	ble.n	802b77a <_vfprintf_r+0x10a2>
 802b768:	9803      	ldr	r0, [sp, #12]
 802b76a:	aa26      	add	r2, sp, #152	@ 0x98
 802b76c:	4659      	mov	r1, fp
 802b76e:	f000 fa1f 	bl	802bbb0 <__sprint_r>
 802b772:	2800      	cmp	r0, #0
 802b774:	f040 8177 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b778:	a929      	add	r1, sp, #164	@ 0xa4
 802b77a:	3e10      	subs	r6, #16
 802b77c:	460c      	mov	r4, r1
 802b77e:	e7e2      	b.n	802b746 <_vfprintf_r+0x106e>
 802b780:	9803      	ldr	r0, [sp, #12]
 802b782:	aa26      	add	r2, sp, #152	@ 0x98
 802b784:	4659      	mov	r1, fp
 802b786:	f000 fa13 	bl	802bbb0 <__sprint_r>
 802b78a:	2800      	cmp	r0, #0
 802b78c:	f040 816b 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b790:	ac29      	add	r4, sp, #164	@ 0xa4
 802b792:	e76d      	b.n	802b670 <_vfprintf_r+0xf98>
 802b794:	2010      	movs	r0, #16
 802b796:	4403      	add	r3, r0
 802b798:	2a07      	cmp	r2, #7
 802b79a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b79e:	6060      	str	r0, [r4, #4]
 802b7a0:	dd08      	ble.n	802b7b4 <_vfprintf_r+0x10dc>
 802b7a2:	9803      	ldr	r0, [sp, #12]
 802b7a4:	aa26      	add	r2, sp, #152	@ 0x98
 802b7a6:	4659      	mov	r1, fp
 802b7a8:	f000 fa02 	bl	802bbb0 <__sprint_r>
 802b7ac:	2800      	cmp	r0, #0
 802b7ae:	f040 815a 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b7b2:	a929      	add	r1, sp, #164	@ 0xa4
 802b7b4:	9b06      	ldr	r3, [sp, #24]
 802b7b6:	3b10      	subs	r3, #16
 802b7b8:	9306      	str	r3, [sp, #24]
 802b7ba:	460c      	mov	r4, r1
 802b7bc:	e763      	b.n	802b686 <_vfprintf_r+0xfae>
 802b7be:	460c      	mov	r4, r1
 802b7c0:	e77c      	b.n	802b6bc <_vfprintf_r+0xfe4>
 802b7c2:	2f00      	cmp	r7, #0
 802b7c4:	d04b      	beq.n	802b85e <_vfprintf_r+0x1186>
 802b7c6:	3f01      	subs	r7, #1
 802b7c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802b7ca:	6023      	str	r3, [r4, #0]
 802b7cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b7ce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802b7d0:	6063      	str	r3, [r4, #4]
 802b7d2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b7d4:	4413      	add	r3, r2
 802b7d6:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b7d8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b7da:	3301      	adds	r3, #1
 802b7dc:	2b07      	cmp	r3, #7
 802b7de:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b7e0:	dc44      	bgt.n	802b86c <_vfprintf_r+0x1194>
 802b7e2:	3408      	adds	r4, #8
 802b7e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b7e6:	f893 9000 	ldrb.w	r9, [r3]
 802b7ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b7ec:	eba3 0308 	sub.w	r3, r3, r8
 802b7f0:	4599      	cmp	r9, r3
 802b7f2:	bfa8      	it	ge
 802b7f4:	4699      	movge	r9, r3
 802b7f6:	f1b9 0f00 	cmp.w	r9, #0
 802b7fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b7fc:	dd09      	ble.n	802b812 <_vfprintf_r+0x113a>
 802b7fe:	444b      	add	r3, r9
 802b800:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b802:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b804:	3301      	adds	r3, #1
 802b806:	2b07      	cmp	r3, #7
 802b808:	e9c4 8900 	strd	r8, r9, [r4]
 802b80c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b80e:	dc37      	bgt.n	802b880 <_vfprintf_r+0x11a8>
 802b810:	3408      	adds	r4, #8
 802b812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b814:	781e      	ldrb	r6, [r3, #0]
 802b816:	f1b9 0f00 	cmp.w	r9, #0
 802b81a:	bfa8      	it	ge
 802b81c:	eba6 0609 	subge.w	r6, r6, r9
 802b820:	2e00      	cmp	r6, #0
 802b822:	dd18      	ble.n	802b856 <_vfprintf_r+0x117e>
 802b824:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b828:	486f      	ldr	r0, [pc, #444]	@ (802b9e8 <_vfprintf_r+0x1310>)
 802b82a:	6020      	str	r0, [r4, #0]
 802b82c:	2e10      	cmp	r6, #16
 802b82e:	f103 0301 	add.w	r3, r3, #1
 802b832:	f104 0108 	add.w	r1, r4, #8
 802b836:	dc2d      	bgt.n	802b894 <_vfprintf_r+0x11bc>
 802b838:	6066      	str	r6, [r4, #4]
 802b83a:	2b07      	cmp	r3, #7
 802b83c:	4416      	add	r6, r2
 802b83e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802b842:	dd3a      	ble.n	802b8ba <_vfprintf_r+0x11e2>
 802b844:	9803      	ldr	r0, [sp, #12]
 802b846:	aa26      	add	r2, sp, #152	@ 0x98
 802b848:	4659      	mov	r1, fp
 802b84a:	f000 f9b1 	bl	802bbb0 <__sprint_r>
 802b84e:	2800      	cmp	r0, #0
 802b850:	f040 8109 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b854:	ac29      	add	r4, sp, #164	@ 0xa4
 802b856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b858:	781b      	ldrb	r3, [r3, #0]
 802b85a:	4498      	add	r8, r3
 802b85c:	e731      	b.n	802b6c2 <_vfprintf_r+0xfea>
 802b85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b860:	3b01      	subs	r3, #1
 802b862:	9309      	str	r3, [sp, #36]	@ 0x24
 802b864:	9b08      	ldr	r3, [sp, #32]
 802b866:	3b01      	subs	r3, #1
 802b868:	9308      	str	r3, [sp, #32]
 802b86a:	e7ad      	b.n	802b7c8 <_vfprintf_r+0x10f0>
 802b86c:	9803      	ldr	r0, [sp, #12]
 802b86e:	aa26      	add	r2, sp, #152	@ 0x98
 802b870:	4659      	mov	r1, fp
 802b872:	f000 f99d 	bl	802bbb0 <__sprint_r>
 802b876:	2800      	cmp	r0, #0
 802b878:	f040 80f5 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b87c:	ac29      	add	r4, sp, #164	@ 0xa4
 802b87e:	e7b1      	b.n	802b7e4 <_vfprintf_r+0x110c>
 802b880:	9803      	ldr	r0, [sp, #12]
 802b882:	aa26      	add	r2, sp, #152	@ 0x98
 802b884:	4659      	mov	r1, fp
 802b886:	f000 f993 	bl	802bbb0 <__sprint_r>
 802b88a:	2800      	cmp	r0, #0
 802b88c:	f040 80eb 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b890:	ac29      	add	r4, sp, #164	@ 0xa4
 802b892:	e7be      	b.n	802b812 <_vfprintf_r+0x113a>
 802b894:	2010      	movs	r0, #16
 802b896:	4402      	add	r2, r0
 802b898:	2b07      	cmp	r3, #7
 802b89a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b89e:	6060      	str	r0, [r4, #4]
 802b8a0:	dd08      	ble.n	802b8b4 <_vfprintf_r+0x11dc>
 802b8a2:	9803      	ldr	r0, [sp, #12]
 802b8a4:	aa26      	add	r2, sp, #152	@ 0x98
 802b8a6:	4659      	mov	r1, fp
 802b8a8:	f000 f982 	bl	802bbb0 <__sprint_r>
 802b8ac:	2800      	cmp	r0, #0
 802b8ae:	f040 80da 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b8b2:	a929      	add	r1, sp, #164	@ 0xa4
 802b8b4:	3e10      	subs	r6, #16
 802b8b6:	460c      	mov	r4, r1
 802b8b8:	e7b4      	b.n	802b824 <_vfprintf_r+0x114c>
 802b8ba:	460c      	mov	r4, r1
 802b8bc:	e7cb      	b.n	802b856 <_vfprintf_r+0x117e>
 802b8be:	9803      	ldr	r0, [sp, #12]
 802b8c0:	aa26      	add	r2, sp, #152	@ 0x98
 802b8c2:	4659      	mov	r1, fp
 802b8c4:	f000 f974 	bl	802bbb0 <__sprint_r>
 802b8c8:	2800      	cmp	r0, #0
 802b8ca:	f040 80cc 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b8ce:	ac29      	add	r4, sp, #164	@ 0xa4
 802b8d0:	e715      	b.n	802b6fe <_vfprintf_r+0x1026>
 802b8d2:	9803      	ldr	r0, [sp, #12]
 802b8d4:	aa26      	add	r2, sp, #152	@ 0x98
 802b8d6:	4659      	mov	r1, fp
 802b8d8:	f000 f96a 	bl	802bbb0 <__sprint_r>
 802b8dc:	2800      	cmp	r0, #0
 802b8de:	f040 80c2 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b8e2:	ac29      	add	r4, sp, #164	@ 0xa4
 802b8e4:	e722      	b.n	802b72c <_vfprintf_r+0x1054>
 802b8e6:	9904      	ldr	r1, [sp, #16]
 802b8e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b8ea:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802b8ec:	2901      	cmp	r1, #1
 802b8ee:	f103 0301 	add.w	r3, r3, #1
 802b8f2:	f102 0201 	add.w	r2, r2, #1
 802b8f6:	f104 0608 	add.w	r6, r4, #8
 802b8fa:	dc02      	bgt.n	802b902 <_vfprintf_r+0x122a>
 802b8fc:	07ef      	lsls	r7, r5, #31
 802b8fe:	f140 8086 	bpl.w	802ba0e <_vfprintf_r+0x1336>
 802b902:	2101      	movs	r1, #1
 802b904:	2a07      	cmp	r2, #7
 802b906:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b90a:	f8c4 8000 	str.w	r8, [r4]
 802b90e:	6061      	str	r1, [r4, #4]
 802b910:	dd08      	ble.n	802b924 <_vfprintf_r+0x124c>
 802b912:	9803      	ldr	r0, [sp, #12]
 802b914:	aa26      	add	r2, sp, #152	@ 0x98
 802b916:	4659      	mov	r1, fp
 802b918:	f000 f94a 	bl	802bbb0 <__sprint_r>
 802b91c:	2800      	cmp	r0, #0
 802b91e:	f040 80a2 	bne.w	802ba66 <_vfprintf_r+0x138e>
 802b922:	ae29      	add	r6, sp, #164	@ 0xa4
 802b924:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b926:	6033      	str	r3, [r6, #0]
 802b928:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b92a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b92c:	6073      	str	r3, [r6, #4]
 802b92e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b930:	4413      	add	r3, r2
 802b932:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b934:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b936:	3301      	adds	r3, #1
 802b938:	2b07      	cmp	r3, #7
 802b93a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b93c:	dc33      	bgt.n	802b9a6 <_vfprintf_r+0x12ce>
 802b93e:	3608      	adds	r6, #8
 802b940:	9b04      	ldr	r3, [sp, #16]
 802b942:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802b946:	1e5c      	subs	r4, r3, #1
 802b948:	2200      	movs	r2, #0
 802b94a:	2300      	movs	r3, #0
 802b94c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 802b950:	f7e5 f8d2 	bl	8010af8 <__aeabi_dcmpeq>
 802b954:	2800      	cmp	r0, #0
 802b956:	d12f      	bne.n	802b9b8 <_vfprintf_r+0x12e0>
 802b958:	f108 0201 	add.w	r2, r8, #1
 802b95c:	e9c6 2400 	strd	r2, r4, [r6]
 802b960:	9a04      	ldr	r2, [sp, #16]
 802b962:	f109 0301 	add.w	r3, r9, #1
 802b966:	3f01      	subs	r7, #1
 802b968:	4417      	add	r7, r2
 802b96a:	2b07      	cmp	r3, #7
 802b96c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802b970:	dd56      	ble.n	802ba20 <_vfprintf_r+0x1348>
 802b972:	9803      	ldr	r0, [sp, #12]
 802b974:	aa26      	add	r2, sp, #152	@ 0x98
 802b976:	4659      	mov	r1, fp
 802b978:	f000 f91a 	bl	802bbb0 <__sprint_r>
 802b97c:	2800      	cmp	r0, #0
 802b97e:	d172      	bne.n	802ba66 <_vfprintf_r+0x138e>
 802b980:	ae29      	add	r6, sp, #164	@ 0xa4
 802b982:	ab22      	add	r3, sp, #136	@ 0x88
 802b984:	6033      	str	r3, [r6, #0]
 802b986:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802b988:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802b98a:	6073      	str	r3, [r6, #4]
 802b98c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b98e:	4413      	add	r3, r2
 802b990:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b992:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b994:	3301      	adds	r3, #1
 802b996:	2b07      	cmp	r3, #7
 802b998:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b99a:	f73f ada1 	bgt.w	802b4e0 <_vfprintf_r+0xe08>
 802b99e:	f106 0408 	add.w	r4, r6, #8
 802b9a2:	f7ff baef 	b.w	802af84 <_vfprintf_r+0x8ac>
 802b9a6:	9803      	ldr	r0, [sp, #12]
 802b9a8:	aa26      	add	r2, sp, #152	@ 0x98
 802b9aa:	4659      	mov	r1, fp
 802b9ac:	f000 f900 	bl	802bbb0 <__sprint_r>
 802b9b0:	2800      	cmp	r0, #0
 802b9b2:	d158      	bne.n	802ba66 <_vfprintf_r+0x138e>
 802b9b4:	ae29      	add	r6, sp, #164	@ 0xa4
 802b9b6:	e7c3      	b.n	802b940 <_vfprintf_r+0x1268>
 802b9b8:	9b04      	ldr	r3, [sp, #16]
 802b9ba:	2b01      	cmp	r3, #1
 802b9bc:	dde1      	ble.n	802b982 <_vfprintf_r+0x12aa>
 802b9be:	4f0a      	ldr	r7, [pc, #40]	@ (802b9e8 <_vfprintf_r+0x1310>)
 802b9c0:	f04f 0810 	mov.w	r8, #16
 802b9c4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b9c8:	2c10      	cmp	r4, #16
 802b9ca:	f103 0301 	add.w	r3, r3, #1
 802b9ce:	f106 0108 	add.w	r1, r6, #8
 802b9d2:	6037      	str	r7, [r6, #0]
 802b9d4:	dc0a      	bgt.n	802b9ec <_vfprintf_r+0x1314>
 802b9d6:	6074      	str	r4, [r6, #4]
 802b9d8:	2b07      	cmp	r3, #7
 802b9da:	4414      	add	r4, r2
 802b9dc:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802b9e0:	dcc7      	bgt.n	802b972 <_vfprintf_r+0x129a>
 802b9e2:	460e      	mov	r6, r1
 802b9e4:	e7cd      	b.n	802b982 <_vfprintf_r+0x12aa>
 802b9e6:	bf00      	nop
 802b9e8:	0803c553 	.word	0x0803c553
 802b9ec:	3210      	adds	r2, #16
 802b9ee:	2b07      	cmp	r3, #7
 802b9f0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b9f4:	f8c6 8004 	str.w	r8, [r6, #4]
 802b9f8:	dd06      	ble.n	802ba08 <_vfprintf_r+0x1330>
 802b9fa:	9803      	ldr	r0, [sp, #12]
 802b9fc:	aa26      	add	r2, sp, #152	@ 0x98
 802b9fe:	4659      	mov	r1, fp
 802ba00:	f000 f8d6 	bl	802bbb0 <__sprint_r>
 802ba04:	bb78      	cbnz	r0, 802ba66 <_vfprintf_r+0x138e>
 802ba06:	a929      	add	r1, sp, #164	@ 0xa4
 802ba08:	3c10      	subs	r4, #16
 802ba0a:	460e      	mov	r6, r1
 802ba0c:	e7da      	b.n	802b9c4 <_vfprintf_r+0x12ec>
 802ba0e:	2101      	movs	r1, #1
 802ba10:	2a07      	cmp	r2, #7
 802ba12:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ba16:	f8c4 8000 	str.w	r8, [r4]
 802ba1a:	6061      	str	r1, [r4, #4]
 802ba1c:	ddb1      	ble.n	802b982 <_vfprintf_r+0x12aa>
 802ba1e:	e7a8      	b.n	802b972 <_vfprintf_r+0x129a>
 802ba20:	3608      	adds	r6, #8
 802ba22:	e7ae      	b.n	802b982 <_vfprintf_r+0x12aa>
 802ba24:	460c      	mov	r4, r1
 802ba26:	f7ff baad 	b.w	802af84 <_vfprintf_r+0x8ac>
 802ba2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ba2c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802ba2e:	1a9d      	subs	r5, r3, r2
 802ba30:	2d00      	cmp	r5, #0
 802ba32:	f77f aaaa 	ble.w	802af8a <_vfprintf_r+0x8b2>
 802ba36:	4e3d      	ldr	r6, [pc, #244]	@ (802bb2c <_vfprintf_r+0x1454>)
 802ba38:	2710      	movs	r7, #16
 802ba3a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802ba3e:	2d10      	cmp	r5, #16
 802ba40:	f103 0301 	add.w	r3, r3, #1
 802ba44:	6026      	str	r6, [r4, #0]
 802ba46:	dc18      	bgt.n	802ba7a <_vfprintf_r+0x13a2>
 802ba48:	6065      	str	r5, [r4, #4]
 802ba4a:	2b07      	cmp	r3, #7
 802ba4c:	4415      	add	r5, r2
 802ba4e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 802ba52:	f77f aa9a 	ble.w	802af8a <_vfprintf_r+0x8b2>
 802ba56:	9803      	ldr	r0, [sp, #12]
 802ba58:	aa26      	add	r2, sp, #152	@ 0x98
 802ba5a:	4659      	mov	r1, fp
 802ba5c:	f000 f8a8 	bl	802bbb0 <__sprint_r>
 802ba60:	2800      	cmp	r0, #0
 802ba62:	f43f aa92 	beq.w	802af8a <_vfprintf_r+0x8b2>
 802ba66:	f1ba 0f00 	cmp.w	sl, #0
 802ba6a:	f43f a892 	beq.w	802ab92 <_vfprintf_r+0x4ba>
 802ba6e:	9803      	ldr	r0, [sp, #12]
 802ba70:	4651      	mov	r1, sl
 802ba72:	f003 fc7b 	bl	802f36c <_free_r>
 802ba76:	f7ff b88c 	b.w	802ab92 <_vfprintf_r+0x4ba>
 802ba7a:	3210      	adds	r2, #16
 802ba7c:	2b07      	cmp	r3, #7
 802ba7e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802ba82:	6067      	str	r7, [r4, #4]
 802ba84:	dc02      	bgt.n	802ba8c <_vfprintf_r+0x13b4>
 802ba86:	3408      	adds	r4, #8
 802ba88:	3d10      	subs	r5, #16
 802ba8a:	e7d6      	b.n	802ba3a <_vfprintf_r+0x1362>
 802ba8c:	9803      	ldr	r0, [sp, #12]
 802ba8e:	aa26      	add	r2, sp, #152	@ 0x98
 802ba90:	4659      	mov	r1, fp
 802ba92:	f000 f88d 	bl	802bbb0 <__sprint_r>
 802ba96:	2800      	cmp	r0, #0
 802ba98:	d1e5      	bne.n	802ba66 <_vfprintf_r+0x138e>
 802ba9a:	ac29      	add	r4, sp, #164	@ 0xa4
 802ba9c:	e7f4      	b.n	802ba88 <_vfprintf_r+0x13b0>
 802ba9e:	9803      	ldr	r0, [sp, #12]
 802baa0:	4651      	mov	r1, sl
 802baa2:	f003 fc63 	bl	802f36c <_free_r>
 802baa6:	f7ff ba88 	b.w	802afba <_vfprintf_r+0x8e2>
 802baaa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802baac:	b91b      	cbnz	r3, 802bab6 <_vfprintf_r+0x13de>
 802baae:	2300      	movs	r3, #0
 802bab0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802bab2:	f7ff b86e 	b.w	802ab92 <_vfprintf_r+0x4ba>
 802bab6:	9803      	ldr	r0, [sp, #12]
 802bab8:	aa26      	add	r2, sp, #152	@ 0x98
 802baba:	4659      	mov	r1, fp
 802babc:	f000 f878 	bl	802bbb0 <__sprint_r>
 802bac0:	2800      	cmp	r0, #0
 802bac2:	d0f4      	beq.n	802baae <_vfprintf_r+0x13d6>
 802bac4:	f7ff b865 	b.w	802ab92 <_vfprintf_r+0x4ba>
 802bac8:	ea56 0207 	orrs.w	r2, r6, r7
 802bacc:	9508      	str	r5, [sp, #32]
 802bace:	f43f ab75 	beq.w	802b1bc <_vfprintf_r+0xae4>
 802bad2:	2b01      	cmp	r3, #1
 802bad4:	f43f abf6 	beq.w	802b2c4 <_vfprintf_r+0xbec>
 802bad8:	2b02      	cmp	r3, #2
 802bada:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802bade:	f43f ac3a 	beq.w	802b356 <_vfprintf_r+0xc7e>
 802bae2:	f006 0307 	and.w	r3, r6, #7
 802bae6:	08f6      	lsrs	r6, r6, #3
 802bae8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802baec:	08ff      	lsrs	r7, r7, #3
 802baee:	3330      	adds	r3, #48	@ 0x30
 802baf0:	ea56 0107 	orrs.w	r1, r6, r7
 802baf4:	4642      	mov	r2, r8
 802baf6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802bafa:	d1f2      	bne.n	802bae2 <_vfprintf_r+0x140a>
 802bafc:	9908      	ldr	r1, [sp, #32]
 802bafe:	07ce      	lsls	r6, r1, #31
 802bb00:	d506      	bpl.n	802bb10 <_vfprintf_r+0x1438>
 802bb02:	2b30      	cmp	r3, #48	@ 0x30
 802bb04:	d004      	beq.n	802bb10 <_vfprintf_r+0x1438>
 802bb06:	2330      	movs	r3, #48	@ 0x30
 802bb08:	f808 3c01 	strb.w	r3, [r8, #-1]
 802bb0c:	f1a2 0802 	sub.w	r8, r2, #2
 802bb10:	ab52      	add	r3, sp, #328	@ 0x148
 802bb12:	9d08      	ldr	r5, [sp, #32]
 802bb14:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 802bb18:	f04f 0a00 	mov.w	sl, #0
 802bb1c:	eba3 0908 	sub.w	r9, r3, r8
 802bb20:	4657      	mov	r7, sl
 802bb22:	f8cd a020 	str.w	sl, [sp, #32]
 802bb26:	4656      	mov	r6, sl
 802bb28:	f7ff b978 	b.w	802ae1c <_vfprintf_r+0x744>
 802bb2c:	0803c563 	.word	0x0803c563

0802bb30 <__sbprintf>:
 802bb30:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bb32:	461f      	mov	r7, r3
 802bb34:	898b      	ldrh	r3, [r1, #12]
 802bb36:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802bb3a:	f023 0302 	bic.w	r3, r3, #2
 802bb3e:	f8ad 300c 	strh.w	r3, [sp, #12]
 802bb42:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802bb44:	9319      	str	r3, [sp, #100]	@ 0x64
 802bb46:	89cb      	ldrh	r3, [r1, #14]
 802bb48:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bb4c:	69cb      	ldr	r3, [r1, #28]
 802bb4e:	9307      	str	r3, [sp, #28]
 802bb50:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802bb52:	9309      	str	r3, [sp, #36]	@ 0x24
 802bb54:	ab1a      	add	r3, sp, #104	@ 0x68
 802bb56:	9300      	str	r3, [sp, #0]
 802bb58:	9304      	str	r3, [sp, #16]
 802bb5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802bb5e:	4615      	mov	r5, r2
 802bb60:	4606      	mov	r6, r0
 802bb62:	9302      	str	r3, [sp, #8]
 802bb64:	9305      	str	r3, [sp, #20]
 802bb66:	a816      	add	r0, sp, #88	@ 0x58
 802bb68:	2300      	movs	r3, #0
 802bb6a:	460c      	mov	r4, r1
 802bb6c:	9306      	str	r3, [sp, #24]
 802bb6e:	f002 fcf5 	bl	802e55c <__retarget_lock_init_recursive>
 802bb72:	462a      	mov	r2, r5
 802bb74:	463b      	mov	r3, r7
 802bb76:	4669      	mov	r1, sp
 802bb78:	4630      	mov	r0, r6
 802bb7a:	f7fe fdad 	bl	802a6d8 <_vfprintf_r>
 802bb7e:	1e05      	subs	r5, r0, #0
 802bb80:	db07      	blt.n	802bb92 <__sbprintf+0x62>
 802bb82:	4669      	mov	r1, sp
 802bb84:	4630      	mov	r0, r6
 802bb86:	f000 fecb 	bl	802c920 <_fflush_r>
 802bb8a:	2800      	cmp	r0, #0
 802bb8c:	bf18      	it	ne
 802bb8e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802bb92:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802bb96:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802bb98:	065b      	lsls	r3, r3, #25
 802bb9a:	bf42      	ittt	mi
 802bb9c:	89a3      	ldrhmi	r3, [r4, #12]
 802bb9e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802bba2:	81a3      	strhmi	r3, [r4, #12]
 802bba4:	f002 fcdb 	bl	802e55e <__retarget_lock_close_recursive>
 802bba8:	4628      	mov	r0, r5
 802bbaa:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802bbae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802bbb0 <__sprint_r>:
 802bbb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bbb4:	6893      	ldr	r3, [r2, #8]
 802bbb6:	4680      	mov	r8, r0
 802bbb8:	460e      	mov	r6, r1
 802bbba:	4614      	mov	r4, r2
 802bbbc:	b343      	cbz	r3, 802bc10 <__sprint_r+0x60>
 802bbbe:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802bbc0:	049d      	lsls	r5, r3, #18
 802bbc2:	d522      	bpl.n	802bc0a <__sprint_r+0x5a>
 802bbc4:	6815      	ldr	r5, [r2, #0]
 802bbc6:	68a0      	ldr	r0, [r4, #8]
 802bbc8:	3508      	adds	r5, #8
 802bbca:	b928      	cbnz	r0, 802bbd8 <__sprint_r+0x28>
 802bbcc:	2300      	movs	r3, #0
 802bbce:	60a3      	str	r3, [r4, #8]
 802bbd0:	2300      	movs	r3, #0
 802bbd2:	6063      	str	r3, [r4, #4]
 802bbd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bbd8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802bbdc:	f04f 0900 	mov.w	r9, #0
 802bbe0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 802bbe4:	45ca      	cmp	sl, r9
 802bbe6:	dc05      	bgt.n	802bbf4 <__sprint_r+0x44>
 802bbe8:	68a3      	ldr	r3, [r4, #8]
 802bbea:	f027 0703 	bic.w	r7, r7, #3
 802bbee:	1bdb      	subs	r3, r3, r7
 802bbf0:	60a3      	str	r3, [r4, #8]
 802bbf2:	e7e8      	b.n	802bbc6 <__sprint_r+0x16>
 802bbf4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802bbf8:	4632      	mov	r2, r6
 802bbfa:	4640      	mov	r0, r8
 802bbfc:	f001 fa35 	bl	802d06a <_fputwc_r>
 802bc00:	1c43      	adds	r3, r0, #1
 802bc02:	d0e3      	beq.n	802bbcc <__sprint_r+0x1c>
 802bc04:	f109 0901 	add.w	r9, r9, #1
 802bc08:	e7ec      	b.n	802bbe4 <__sprint_r+0x34>
 802bc0a:	f001 f81d 	bl	802cc48 <__sfvwrite_r>
 802bc0e:	e7dd      	b.n	802bbcc <__sprint_r+0x1c>
 802bc10:	4618      	mov	r0, r3
 802bc12:	e7dd      	b.n	802bbd0 <__sprint_r+0x20>

0802bc14 <_vfiprintf_r>:
 802bc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bc18:	b0bb      	sub	sp, #236	@ 0xec
 802bc1a:	460f      	mov	r7, r1
 802bc1c:	4693      	mov	fp, r2
 802bc1e:	461c      	mov	r4, r3
 802bc20:	461d      	mov	r5, r3
 802bc22:	9000      	str	r0, [sp, #0]
 802bc24:	b118      	cbz	r0, 802bc2e <_vfiprintf_r+0x1a>
 802bc26:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802bc28:	b90b      	cbnz	r3, 802bc2e <_vfiprintf_r+0x1a>
 802bc2a:	f000 ffbb 	bl	802cba4 <__sinit>
 802bc2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802bc30:	07db      	lsls	r3, r3, #31
 802bc32:	d405      	bmi.n	802bc40 <_vfiprintf_r+0x2c>
 802bc34:	89bb      	ldrh	r3, [r7, #12]
 802bc36:	059e      	lsls	r6, r3, #22
 802bc38:	d402      	bmi.n	802bc40 <_vfiprintf_r+0x2c>
 802bc3a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802bc3c:	f002 fc91 	bl	802e562 <__retarget_lock_acquire_recursive>
 802bc40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802bc44:	0498      	lsls	r0, r3, #18
 802bc46:	d406      	bmi.n	802bc56 <_vfiprintf_r+0x42>
 802bc48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802bc4c:	81bb      	strh	r3, [r7, #12]
 802bc4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802bc50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802bc54:	667b      	str	r3, [r7, #100]	@ 0x64
 802bc56:	89bb      	ldrh	r3, [r7, #12]
 802bc58:	0719      	lsls	r1, r3, #28
 802bc5a:	d501      	bpl.n	802bc60 <_vfiprintf_r+0x4c>
 802bc5c:	693b      	ldr	r3, [r7, #16]
 802bc5e:	b9ab      	cbnz	r3, 802bc8c <_vfiprintf_r+0x78>
 802bc60:	9800      	ldr	r0, [sp, #0]
 802bc62:	4639      	mov	r1, r7
 802bc64:	f001 f95a 	bl	802cf1c <__swsetup_r>
 802bc68:	b180      	cbz	r0, 802bc8c <_vfiprintf_r+0x78>
 802bc6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802bc6c:	07da      	lsls	r2, r3, #31
 802bc6e:	d506      	bpl.n	802bc7e <_vfiprintf_r+0x6a>
 802bc70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802bc74:	9303      	str	r3, [sp, #12]
 802bc76:	9803      	ldr	r0, [sp, #12]
 802bc78:	b03b      	add	sp, #236	@ 0xec
 802bc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bc7e:	89bb      	ldrh	r3, [r7, #12]
 802bc80:	059b      	lsls	r3, r3, #22
 802bc82:	d4f5      	bmi.n	802bc70 <_vfiprintf_r+0x5c>
 802bc84:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802bc86:	f002 fc6e 	bl	802e566 <__retarget_lock_release_recursive>
 802bc8a:	e7f1      	b.n	802bc70 <_vfiprintf_r+0x5c>
 802bc8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802bc90:	f003 021a 	and.w	r2, r3, #26
 802bc94:	2a0a      	cmp	r2, #10
 802bc96:	d114      	bne.n	802bcc2 <_vfiprintf_r+0xae>
 802bc98:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802bc9c:	2a00      	cmp	r2, #0
 802bc9e:	db10      	blt.n	802bcc2 <_vfiprintf_r+0xae>
 802bca0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802bca2:	07d6      	lsls	r6, r2, #31
 802bca4:	d404      	bmi.n	802bcb0 <_vfiprintf_r+0x9c>
 802bca6:	059d      	lsls	r5, r3, #22
 802bca8:	d402      	bmi.n	802bcb0 <_vfiprintf_r+0x9c>
 802bcaa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802bcac:	f002 fc5b 	bl	802e566 <__retarget_lock_release_recursive>
 802bcb0:	9800      	ldr	r0, [sp, #0]
 802bcb2:	4623      	mov	r3, r4
 802bcb4:	465a      	mov	r2, fp
 802bcb6:	4639      	mov	r1, r7
 802bcb8:	b03b      	add	sp, #236	@ 0xec
 802bcba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bcbe:	f000 bc31 	b.w	802c524 <__sbprintf>
 802bcc2:	2300      	movs	r3, #0
 802bcc4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802bcc8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802bccc:	ae11      	add	r6, sp, #68	@ 0x44
 802bcce:	960e      	str	r6, [sp, #56]	@ 0x38
 802bcd0:	9307      	str	r3, [sp, #28]
 802bcd2:	9309      	str	r3, [sp, #36]	@ 0x24
 802bcd4:	9303      	str	r3, [sp, #12]
 802bcd6:	465b      	mov	r3, fp
 802bcd8:	461c      	mov	r4, r3
 802bcda:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bcde:	b10a      	cbz	r2, 802bce4 <_vfiprintf_r+0xd0>
 802bce0:	2a25      	cmp	r2, #37	@ 0x25
 802bce2:	d1f9      	bne.n	802bcd8 <_vfiprintf_r+0xc4>
 802bce4:	ebb4 080b 	subs.w	r8, r4, fp
 802bce8:	d00d      	beq.n	802bd06 <_vfiprintf_r+0xf2>
 802bcea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bcec:	4443      	add	r3, r8
 802bcee:	9310      	str	r3, [sp, #64]	@ 0x40
 802bcf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802bcf2:	3301      	adds	r3, #1
 802bcf4:	2b07      	cmp	r3, #7
 802bcf6:	e9c6 b800 	strd	fp, r8, [r6]
 802bcfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bcfc:	dc75      	bgt.n	802bdea <_vfiprintf_r+0x1d6>
 802bcfe:	3608      	adds	r6, #8
 802bd00:	9b03      	ldr	r3, [sp, #12]
 802bd02:	4443      	add	r3, r8
 802bd04:	9303      	str	r3, [sp, #12]
 802bd06:	7823      	ldrb	r3, [r4, #0]
 802bd08:	2b00      	cmp	r3, #0
 802bd0a:	f000 83cd 	beq.w	802c4a8 <_vfiprintf_r+0x894>
 802bd0e:	2300      	movs	r3, #0
 802bd10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802bd14:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802bd18:	3401      	adds	r4, #1
 802bd1a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802bd1e:	469a      	mov	sl, r3
 802bd20:	46a3      	mov	fp, r4
 802bd22:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802bd26:	f1a3 0220 	sub.w	r2, r3, #32
 802bd2a:	2a5a      	cmp	r2, #90	@ 0x5a
 802bd2c:	f200 8316 	bhi.w	802c35c <_vfiprintf_r+0x748>
 802bd30:	e8df f012 	tbh	[pc, r2, lsl #1]
 802bd34:	0314009a 	.word	0x0314009a
 802bd38:	00a20314 	.word	0x00a20314
 802bd3c:	03140314 	.word	0x03140314
 802bd40:	00820314 	.word	0x00820314
 802bd44:	03140314 	.word	0x03140314
 802bd48:	00af00a5 	.word	0x00af00a5
 802bd4c:	00ac0314 	.word	0x00ac0314
 802bd50:	031400b1 	.word	0x031400b1
 802bd54:	00d000cd 	.word	0x00d000cd
 802bd58:	00d000d0 	.word	0x00d000d0
 802bd5c:	00d000d0 	.word	0x00d000d0
 802bd60:	00d000d0 	.word	0x00d000d0
 802bd64:	00d000d0 	.word	0x00d000d0
 802bd68:	03140314 	.word	0x03140314
 802bd6c:	03140314 	.word	0x03140314
 802bd70:	03140314 	.word	0x03140314
 802bd74:	03140314 	.word	0x03140314
 802bd78:	00f70314 	.word	0x00f70314
 802bd7c:	03140104 	.word	0x03140104
 802bd80:	03140314 	.word	0x03140314
 802bd84:	03140314 	.word	0x03140314
 802bd88:	03140314 	.word	0x03140314
 802bd8c:	03140314 	.word	0x03140314
 802bd90:	01520314 	.word	0x01520314
 802bd94:	03140314 	.word	0x03140314
 802bd98:	019a0314 	.word	0x019a0314
 802bd9c:	027a0314 	.word	0x027a0314
 802bda0:	03140314 	.word	0x03140314
 802bda4:	0314029a 	.word	0x0314029a
 802bda8:	03140314 	.word	0x03140314
 802bdac:	03140314 	.word	0x03140314
 802bdb0:	03140314 	.word	0x03140314
 802bdb4:	03140314 	.word	0x03140314
 802bdb8:	00f70314 	.word	0x00f70314
 802bdbc:	03140106 	.word	0x03140106
 802bdc0:	03140314 	.word	0x03140314
 802bdc4:	010600e0 	.word	0x010600e0
 802bdc8:	031400f1 	.word	0x031400f1
 802bdcc:	031400eb 	.word	0x031400eb
 802bdd0:	01540132 	.word	0x01540132
 802bdd4:	00f10189 	.word	0x00f10189
 802bdd8:	019a0314 	.word	0x019a0314
 802bddc:	027c0098 	.word	0x027c0098
 802bde0:	03140314 	.word	0x03140314
 802bde4:	03140065 	.word	0x03140065
 802bde8:	0098      	.short	0x0098
 802bdea:	9800      	ldr	r0, [sp, #0]
 802bdec:	aa0e      	add	r2, sp, #56	@ 0x38
 802bdee:	4639      	mov	r1, r7
 802bdf0:	f7ff fede 	bl	802bbb0 <__sprint_r>
 802bdf4:	2800      	cmp	r0, #0
 802bdf6:	f040 8336 	bne.w	802c466 <_vfiprintf_r+0x852>
 802bdfa:	ae11      	add	r6, sp, #68	@ 0x44
 802bdfc:	e780      	b.n	802bd00 <_vfiprintf_r+0xec>
 802bdfe:	4a99      	ldr	r2, [pc, #612]	@ (802c064 <_vfiprintf_r+0x450>)
 802be00:	9205      	str	r2, [sp, #20]
 802be02:	f01a 0220 	ands.w	r2, sl, #32
 802be06:	f000 8231 	beq.w	802c26c <_vfiprintf_r+0x658>
 802be0a:	3507      	adds	r5, #7
 802be0c:	f025 0507 	bic.w	r5, r5, #7
 802be10:	46a8      	mov	r8, r5
 802be12:	686d      	ldr	r5, [r5, #4]
 802be14:	f858 4b08 	ldr.w	r4, [r8], #8
 802be18:	f01a 0f01 	tst.w	sl, #1
 802be1c:	d009      	beq.n	802be32 <_vfiprintf_r+0x21e>
 802be1e:	ea54 0205 	orrs.w	r2, r4, r5
 802be22:	bf1f      	itttt	ne
 802be24:	2230      	movne	r2, #48	@ 0x30
 802be26:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802be2a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802be2e:	f04a 0a02 	orrne.w	sl, sl, #2
 802be32:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802be36:	e112      	b.n	802c05e <_vfiprintf_r+0x44a>
 802be38:	9800      	ldr	r0, [sp, #0]
 802be3a:	f002 fae7 	bl	802e40c <_localeconv_r>
 802be3e:	6843      	ldr	r3, [r0, #4]
 802be40:	9309      	str	r3, [sp, #36]	@ 0x24
 802be42:	4618      	mov	r0, r3
 802be44:	f7e4 fa2c 	bl	80102a0 <strlen>
 802be48:	9007      	str	r0, [sp, #28]
 802be4a:	9800      	ldr	r0, [sp, #0]
 802be4c:	f002 fade 	bl	802e40c <_localeconv_r>
 802be50:	6883      	ldr	r3, [r0, #8]
 802be52:	9306      	str	r3, [sp, #24]
 802be54:	9b07      	ldr	r3, [sp, #28]
 802be56:	b12b      	cbz	r3, 802be64 <_vfiprintf_r+0x250>
 802be58:	9b06      	ldr	r3, [sp, #24]
 802be5a:	b11b      	cbz	r3, 802be64 <_vfiprintf_r+0x250>
 802be5c:	781b      	ldrb	r3, [r3, #0]
 802be5e:	b10b      	cbz	r3, 802be64 <_vfiprintf_r+0x250>
 802be60:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 802be64:	465c      	mov	r4, fp
 802be66:	e75b      	b.n	802bd20 <_vfiprintf_r+0x10c>
 802be68:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802be6c:	2b00      	cmp	r3, #0
 802be6e:	d1f9      	bne.n	802be64 <_vfiprintf_r+0x250>
 802be70:	2320      	movs	r3, #32
 802be72:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802be76:	e7f5      	b.n	802be64 <_vfiprintf_r+0x250>
 802be78:	f04a 0a01 	orr.w	sl, sl, #1
 802be7c:	e7f2      	b.n	802be64 <_vfiprintf_r+0x250>
 802be7e:	f855 3b04 	ldr.w	r3, [r5], #4
 802be82:	9302      	str	r3, [sp, #8]
 802be84:	2b00      	cmp	r3, #0
 802be86:	daed      	bge.n	802be64 <_vfiprintf_r+0x250>
 802be88:	425b      	negs	r3, r3
 802be8a:	9302      	str	r3, [sp, #8]
 802be8c:	f04a 0a04 	orr.w	sl, sl, #4
 802be90:	e7e8      	b.n	802be64 <_vfiprintf_r+0x250>
 802be92:	232b      	movs	r3, #43	@ 0x2b
 802be94:	e7ed      	b.n	802be72 <_vfiprintf_r+0x25e>
 802be96:	465a      	mov	r2, fp
 802be98:	f812 3b01 	ldrb.w	r3, [r2], #1
 802be9c:	2b2a      	cmp	r3, #42	@ 0x2a
 802be9e:	d112      	bne.n	802bec6 <_vfiprintf_r+0x2b2>
 802bea0:	f855 3b04 	ldr.w	r3, [r5], #4
 802bea4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802bea8:	9301      	str	r3, [sp, #4]
 802beaa:	4693      	mov	fp, r2
 802beac:	e7da      	b.n	802be64 <_vfiprintf_r+0x250>
 802beae:	9b01      	ldr	r3, [sp, #4]
 802beb0:	fb00 1303 	mla	r3, r0, r3, r1
 802beb4:	9301      	str	r3, [sp, #4]
 802beb6:	f812 3b01 	ldrb.w	r3, [r2], #1
 802beba:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802bebe:	2909      	cmp	r1, #9
 802bec0:	d9f5      	bls.n	802beae <_vfiprintf_r+0x29a>
 802bec2:	4693      	mov	fp, r2
 802bec4:	e72f      	b.n	802bd26 <_vfiprintf_r+0x112>
 802bec6:	2100      	movs	r1, #0
 802bec8:	9101      	str	r1, [sp, #4]
 802beca:	200a      	movs	r0, #10
 802becc:	e7f5      	b.n	802beba <_vfiprintf_r+0x2a6>
 802bece:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802bed2:	e7c7      	b.n	802be64 <_vfiprintf_r+0x250>
 802bed4:	2100      	movs	r1, #0
 802bed6:	465a      	mov	r2, fp
 802bed8:	9102      	str	r1, [sp, #8]
 802beda:	200a      	movs	r0, #10
 802bedc:	9902      	ldr	r1, [sp, #8]
 802bede:	3b30      	subs	r3, #48	@ 0x30
 802bee0:	fb00 3301 	mla	r3, r0, r1, r3
 802bee4:	9302      	str	r3, [sp, #8]
 802bee6:	f812 3b01 	ldrb.w	r3, [r2], #1
 802beea:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802beee:	2909      	cmp	r1, #9
 802bef0:	d9f4      	bls.n	802bedc <_vfiprintf_r+0x2c8>
 802bef2:	e7e6      	b.n	802bec2 <_vfiprintf_r+0x2ae>
 802bef4:	f89b 3000 	ldrb.w	r3, [fp]
 802bef8:	2b68      	cmp	r3, #104	@ 0x68
 802befa:	bf06      	itte	eq
 802befc:	f10b 0b01 	addeq.w	fp, fp, #1
 802bf00:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802bf04:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 802bf08:	e7ac      	b.n	802be64 <_vfiprintf_r+0x250>
 802bf0a:	f89b 3000 	ldrb.w	r3, [fp]
 802bf0e:	2b6c      	cmp	r3, #108	@ 0x6c
 802bf10:	d104      	bne.n	802bf1c <_vfiprintf_r+0x308>
 802bf12:	f10b 0b01 	add.w	fp, fp, #1
 802bf16:	f04a 0a20 	orr.w	sl, sl, #32
 802bf1a:	e7a3      	b.n	802be64 <_vfiprintf_r+0x250>
 802bf1c:	f04a 0a10 	orr.w	sl, sl, #16
 802bf20:	e7a0      	b.n	802be64 <_vfiprintf_r+0x250>
 802bf22:	46a8      	mov	r8, r5
 802bf24:	2400      	movs	r4, #0
 802bf26:	f858 3b04 	ldr.w	r3, [r8], #4
 802bf2a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802bf2e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802bf32:	2301      	movs	r3, #1
 802bf34:	9301      	str	r3, [sp, #4]
 802bf36:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802bf3a:	e0ab      	b.n	802c094 <_vfiprintf_r+0x480>
 802bf3c:	f04a 0a10 	orr.w	sl, sl, #16
 802bf40:	f01a 0f20 	tst.w	sl, #32
 802bf44:	d011      	beq.n	802bf6a <_vfiprintf_r+0x356>
 802bf46:	3507      	adds	r5, #7
 802bf48:	f025 0507 	bic.w	r5, r5, #7
 802bf4c:	46a8      	mov	r8, r5
 802bf4e:	686d      	ldr	r5, [r5, #4]
 802bf50:	f858 4b08 	ldr.w	r4, [r8], #8
 802bf54:	2d00      	cmp	r5, #0
 802bf56:	da06      	bge.n	802bf66 <_vfiprintf_r+0x352>
 802bf58:	4264      	negs	r4, r4
 802bf5a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802bf5e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802bf62:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802bf66:	2301      	movs	r3, #1
 802bf68:	e048      	b.n	802bffc <_vfiprintf_r+0x3e8>
 802bf6a:	46a8      	mov	r8, r5
 802bf6c:	f01a 0f10 	tst.w	sl, #16
 802bf70:	f858 5b04 	ldr.w	r5, [r8], #4
 802bf74:	d002      	beq.n	802bf7c <_vfiprintf_r+0x368>
 802bf76:	462c      	mov	r4, r5
 802bf78:	17ed      	asrs	r5, r5, #31
 802bf7a:	e7eb      	b.n	802bf54 <_vfiprintf_r+0x340>
 802bf7c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802bf80:	d003      	beq.n	802bf8a <_vfiprintf_r+0x376>
 802bf82:	b22c      	sxth	r4, r5
 802bf84:	f345 35c0 	sbfx	r5, r5, #15, #1
 802bf88:	e7e4      	b.n	802bf54 <_vfiprintf_r+0x340>
 802bf8a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802bf8e:	d0f2      	beq.n	802bf76 <_vfiprintf_r+0x362>
 802bf90:	b26c      	sxtb	r4, r5
 802bf92:	f345 15c0 	sbfx	r5, r5, #7, #1
 802bf96:	e7dd      	b.n	802bf54 <_vfiprintf_r+0x340>
 802bf98:	f01a 0f20 	tst.w	sl, #32
 802bf9c:	d007      	beq.n	802bfae <_vfiprintf_r+0x39a>
 802bf9e:	9a03      	ldr	r2, [sp, #12]
 802bfa0:	682b      	ldr	r3, [r5, #0]
 802bfa2:	9903      	ldr	r1, [sp, #12]
 802bfa4:	17d2      	asrs	r2, r2, #31
 802bfa6:	e9c3 1200 	strd	r1, r2, [r3]
 802bfaa:	3504      	adds	r5, #4
 802bfac:	e693      	b.n	802bcd6 <_vfiprintf_r+0xc2>
 802bfae:	f01a 0f10 	tst.w	sl, #16
 802bfb2:	d003      	beq.n	802bfbc <_vfiprintf_r+0x3a8>
 802bfb4:	682b      	ldr	r3, [r5, #0]
 802bfb6:	9a03      	ldr	r2, [sp, #12]
 802bfb8:	601a      	str	r2, [r3, #0]
 802bfba:	e7f6      	b.n	802bfaa <_vfiprintf_r+0x396>
 802bfbc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802bfc0:	d003      	beq.n	802bfca <_vfiprintf_r+0x3b6>
 802bfc2:	682b      	ldr	r3, [r5, #0]
 802bfc4:	9a03      	ldr	r2, [sp, #12]
 802bfc6:	801a      	strh	r2, [r3, #0]
 802bfc8:	e7ef      	b.n	802bfaa <_vfiprintf_r+0x396>
 802bfca:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802bfce:	d0f1      	beq.n	802bfb4 <_vfiprintf_r+0x3a0>
 802bfd0:	682b      	ldr	r3, [r5, #0]
 802bfd2:	9a03      	ldr	r2, [sp, #12]
 802bfd4:	701a      	strb	r2, [r3, #0]
 802bfd6:	e7e8      	b.n	802bfaa <_vfiprintf_r+0x396>
 802bfd8:	f04a 0a10 	orr.w	sl, sl, #16
 802bfdc:	f01a 0320 	ands.w	r3, sl, #32
 802bfe0:	d01f      	beq.n	802c022 <_vfiprintf_r+0x40e>
 802bfe2:	3507      	adds	r5, #7
 802bfe4:	f025 0507 	bic.w	r5, r5, #7
 802bfe8:	46a8      	mov	r8, r5
 802bfea:	686d      	ldr	r5, [r5, #4]
 802bfec:	f858 4b08 	ldr.w	r4, [r8], #8
 802bff0:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802bff4:	2300      	movs	r3, #0
 802bff6:	2200      	movs	r2, #0
 802bff8:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802bffc:	9a01      	ldr	r2, [sp, #4]
 802bffe:	3201      	adds	r2, #1
 802c000:	f000 825f 	beq.w	802c4c2 <_vfiprintf_r+0x8ae>
 802c004:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 802c008:	9204      	str	r2, [sp, #16]
 802c00a:	ea54 0205 	orrs.w	r2, r4, r5
 802c00e:	f040 825e 	bne.w	802c4ce <_vfiprintf_r+0x8ba>
 802c012:	9a01      	ldr	r2, [sp, #4]
 802c014:	2a00      	cmp	r2, #0
 802c016:	f000 8198 	beq.w	802c34a <_vfiprintf_r+0x736>
 802c01a:	2b01      	cmp	r3, #1
 802c01c:	f040 825a 	bne.w	802c4d4 <_vfiprintf_r+0x8c0>
 802c020:	e13b      	b.n	802c29a <_vfiprintf_r+0x686>
 802c022:	46a8      	mov	r8, r5
 802c024:	f01a 0510 	ands.w	r5, sl, #16
 802c028:	f858 4b04 	ldr.w	r4, [r8], #4
 802c02c:	d001      	beq.n	802c032 <_vfiprintf_r+0x41e>
 802c02e:	461d      	mov	r5, r3
 802c030:	e7de      	b.n	802bff0 <_vfiprintf_r+0x3dc>
 802c032:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802c036:	d001      	beq.n	802c03c <_vfiprintf_r+0x428>
 802c038:	b2a4      	uxth	r4, r4
 802c03a:	e7d9      	b.n	802bff0 <_vfiprintf_r+0x3dc>
 802c03c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802c040:	d0d6      	beq.n	802bff0 <_vfiprintf_r+0x3dc>
 802c042:	b2e4      	uxtb	r4, r4
 802c044:	e7f3      	b.n	802c02e <_vfiprintf_r+0x41a>
 802c046:	46a8      	mov	r8, r5
 802c048:	f647 0330 	movw	r3, #30768	@ 0x7830
 802c04c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802c050:	f858 4b04 	ldr.w	r4, [r8], #4
 802c054:	4b03      	ldr	r3, [pc, #12]	@ (802c064 <_vfiprintf_r+0x450>)
 802c056:	9305      	str	r3, [sp, #20]
 802c058:	2500      	movs	r5, #0
 802c05a:	f04a 0a02 	orr.w	sl, sl, #2
 802c05e:	2302      	movs	r3, #2
 802c060:	e7c9      	b.n	802bff6 <_vfiprintf_r+0x3e2>
 802c062:	bf00      	nop
 802c064:	0803c52f 	.word	0x0803c52f
 802c068:	9b01      	ldr	r3, [sp, #4]
 802c06a:	46a8      	mov	r8, r5
 802c06c:	1c5c      	adds	r4, r3, #1
 802c06e:	f04f 0500 	mov.w	r5, #0
 802c072:	f858 9b04 	ldr.w	r9, [r8], #4
 802c076:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802c07a:	f000 80d0 	beq.w	802c21e <_vfiprintf_r+0x60a>
 802c07e:	461a      	mov	r2, r3
 802c080:	4629      	mov	r1, r5
 802c082:	4648      	mov	r0, r9
 802c084:	f7e4 f8bc 	bl	8010200 <memchr>
 802c088:	4604      	mov	r4, r0
 802c08a:	b118      	cbz	r0, 802c094 <_vfiprintf_r+0x480>
 802c08c:	eba0 0309 	sub.w	r3, r0, r9
 802c090:	9301      	str	r3, [sp, #4]
 802c092:	462c      	mov	r4, r5
 802c094:	9b01      	ldr	r3, [sp, #4]
 802c096:	42a3      	cmp	r3, r4
 802c098:	bfb8      	it	lt
 802c09a:	4623      	movlt	r3, r4
 802c09c:	9304      	str	r3, [sp, #16]
 802c09e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802c0a2:	b113      	cbz	r3, 802c0aa <_vfiprintf_r+0x496>
 802c0a4:	9b04      	ldr	r3, [sp, #16]
 802c0a6:	3301      	adds	r3, #1
 802c0a8:	9304      	str	r3, [sp, #16]
 802c0aa:	f01a 0302 	ands.w	r3, sl, #2
 802c0ae:	9308      	str	r3, [sp, #32]
 802c0b0:	bf1e      	ittt	ne
 802c0b2:	9b04      	ldrne	r3, [sp, #16]
 802c0b4:	3302      	addne	r3, #2
 802c0b6:	9304      	strne	r3, [sp, #16]
 802c0b8:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 802c0bc:	930a      	str	r3, [sp, #40]	@ 0x28
 802c0be:	d11f      	bne.n	802c100 <_vfiprintf_r+0x4ec>
 802c0c0:	9b02      	ldr	r3, [sp, #8]
 802c0c2:	9a04      	ldr	r2, [sp, #16]
 802c0c4:	1a9d      	subs	r5, r3, r2
 802c0c6:	2d00      	cmp	r5, #0
 802c0c8:	dd1a      	ble.n	802c100 <_vfiprintf_r+0x4ec>
 802c0ca:	4ba9      	ldr	r3, [pc, #676]	@ (802c370 <_vfiprintf_r+0x75c>)
 802c0cc:	6033      	str	r3, [r6, #0]
 802c0ce:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802c0d2:	2d10      	cmp	r5, #16
 802c0d4:	f102 0201 	add.w	r2, r2, #1
 802c0d8:	f106 0008 	add.w	r0, r6, #8
 802c0dc:	f300 814e 	bgt.w	802c37c <_vfiprintf_r+0x768>
 802c0e0:	6075      	str	r5, [r6, #4]
 802c0e2:	2a07      	cmp	r2, #7
 802c0e4:	4465      	add	r5, ip
 802c0e6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802c0ea:	f340 815a 	ble.w	802c3a2 <_vfiprintf_r+0x78e>
 802c0ee:	9800      	ldr	r0, [sp, #0]
 802c0f0:	aa0e      	add	r2, sp, #56	@ 0x38
 802c0f2:	4639      	mov	r1, r7
 802c0f4:	f7ff fd5c 	bl	802bbb0 <__sprint_r>
 802c0f8:	2800      	cmp	r0, #0
 802c0fa:	f040 81b4 	bne.w	802c466 <_vfiprintf_r+0x852>
 802c0fe:	ae11      	add	r6, sp, #68	@ 0x44
 802c100:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802c104:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802c108:	b161      	cbz	r1, 802c124 <_vfiprintf_r+0x510>
 802c10a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802c10e:	3301      	adds	r3, #1
 802c110:	6031      	str	r1, [r6, #0]
 802c112:	2101      	movs	r1, #1
 802c114:	440a      	add	r2, r1
 802c116:	2b07      	cmp	r3, #7
 802c118:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802c11c:	6071      	str	r1, [r6, #4]
 802c11e:	f300 8142 	bgt.w	802c3a6 <_vfiprintf_r+0x792>
 802c122:	3608      	adds	r6, #8
 802c124:	9908      	ldr	r1, [sp, #32]
 802c126:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802c12a:	b159      	cbz	r1, 802c144 <_vfiprintf_r+0x530>
 802c12c:	a90d      	add	r1, sp, #52	@ 0x34
 802c12e:	3301      	adds	r3, #1
 802c130:	6031      	str	r1, [r6, #0]
 802c132:	2102      	movs	r1, #2
 802c134:	440a      	add	r2, r1
 802c136:	2b07      	cmp	r3, #7
 802c138:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802c13c:	6071      	str	r1, [r6, #4]
 802c13e:	f300 813b 	bgt.w	802c3b8 <_vfiprintf_r+0x7a4>
 802c142:	3608      	adds	r6, #8
 802c144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c146:	2b80      	cmp	r3, #128	@ 0x80
 802c148:	d11f      	bne.n	802c18a <_vfiprintf_r+0x576>
 802c14a:	9b02      	ldr	r3, [sp, #8]
 802c14c:	9a04      	ldr	r2, [sp, #16]
 802c14e:	1a9d      	subs	r5, r3, r2
 802c150:	2d00      	cmp	r5, #0
 802c152:	dd1a      	ble.n	802c18a <_vfiprintf_r+0x576>
 802c154:	4b87      	ldr	r3, [pc, #540]	@ (802c374 <_vfiprintf_r+0x760>)
 802c156:	6033      	str	r3, [r6, #0]
 802c158:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802c15c:	2d10      	cmp	r5, #16
 802c15e:	f102 0201 	add.w	r2, r2, #1
 802c162:	f106 0008 	add.w	r0, r6, #8
 802c166:	f300 8130 	bgt.w	802c3ca <_vfiprintf_r+0x7b6>
 802c16a:	6075      	str	r5, [r6, #4]
 802c16c:	2a07      	cmp	r2, #7
 802c16e:	4465      	add	r5, ip
 802c170:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802c174:	f340 813c 	ble.w	802c3f0 <_vfiprintf_r+0x7dc>
 802c178:	9800      	ldr	r0, [sp, #0]
 802c17a:	aa0e      	add	r2, sp, #56	@ 0x38
 802c17c:	4639      	mov	r1, r7
 802c17e:	f7ff fd17 	bl	802bbb0 <__sprint_r>
 802c182:	2800      	cmp	r0, #0
 802c184:	f040 816f 	bne.w	802c466 <_vfiprintf_r+0x852>
 802c188:	ae11      	add	r6, sp, #68	@ 0x44
 802c18a:	9b01      	ldr	r3, [sp, #4]
 802c18c:	1ae4      	subs	r4, r4, r3
 802c18e:	2c00      	cmp	r4, #0
 802c190:	dd1a      	ble.n	802c1c8 <_vfiprintf_r+0x5b4>
 802c192:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802c196:	4877      	ldr	r0, [pc, #476]	@ (802c374 <_vfiprintf_r+0x760>)
 802c198:	6030      	str	r0, [r6, #0]
 802c19a:	2c10      	cmp	r4, #16
 802c19c:	f103 0301 	add.w	r3, r3, #1
 802c1a0:	f106 0108 	add.w	r1, r6, #8
 802c1a4:	f300 8126 	bgt.w	802c3f4 <_vfiprintf_r+0x7e0>
 802c1a8:	6074      	str	r4, [r6, #4]
 802c1aa:	2b07      	cmp	r3, #7
 802c1ac:	4414      	add	r4, r2
 802c1ae:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802c1b2:	f340 8130 	ble.w	802c416 <_vfiprintf_r+0x802>
 802c1b6:	9800      	ldr	r0, [sp, #0]
 802c1b8:	aa0e      	add	r2, sp, #56	@ 0x38
 802c1ba:	4639      	mov	r1, r7
 802c1bc:	f7ff fcf8 	bl	802bbb0 <__sprint_r>
 802c1c0:	2800      	cmp	r0, #0
 802c1c2:	f040 8150 	bne.w	802c466 <_vfiprintf_r+0x852>
 802c1c6:	ae11      	add	r6, sp, #68	@ 0x44
 802c1c8:	9b01      	ldr	r3, [sp, #4]
 802c1ca:	9a01      	ldr	r2, [sp, #4]
 802c1cc:	6073      	str	r3, [r6, #4]
 802c1ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c1d0:	f8c6 9000 	str.w	r9, [r6]
 802c1d4:	4413      	add	r3, r2
 802c1d6:	9310      	str	r3, [sp, #64]	@ 0x40
 802c1d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802c1da:	3301      	adds	r3, #1
 802c1dc:	2b07      	cmp	r3, #7
 802c1de:	930f      	str	r3, [sp, #60]	@ 0x3c
 802c1e0:	f300 811b 	bgt.w	802c41a <_vfiprintf_r+0x806>
 802c1e4:	f106 0308 	add.w	r3, r6, #8
 802c1e8:	f01a 0f04 	tst.w	sl, #4
 802c1ec:	f040 811d 	bne.w	802c42a <_vfiprintf_r+0x816>
 802c1f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802c1f4:	9904      	ldr	r1, [sp, #16]
 802c1f6:	428a      	cmp	r2, r1
 802c1f8:	bfac      	ite	ge
 802c1fa:	189b      	addge	r3, r3, r2
 802c1fc:	185b      	addlt	r3, r3, r1
 802c1fe:	9303      	str	r3, [sp, #12]
 802c200:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c202:	b13b      	cbz	r3, 802c214 <_vfiprintf_r+0x600>
 802c204:	9800      	ldr	r0, [sp, #0]
 802c206:	aa0e      	add	r2, sp, #56	@ 0x38
 802c208:	4639      	mov	r1, r7
 802c20a:	f7ff fcd1 	bl	802bbb0 <__sprint_r>
 802c20e:	2800      	cmp	r0, #0
 802c210:	f040 8129 	bne.w	802c466 <_vfiprintf_r+0x852>
 802c214:	2300      	movs	r3, #0
 802c216:	930f      	str	r3, [sp, #60]	@ 0x3c
 802c218:	4645      	mov	r5, r8
 802c21a:	ae11      	add	r6, sp, #68	@ 0x44
 802c21c:	e55b      	b.n	802bcd6 <_vfiprintf_r+0xc2>
 802c21e:	4648      	mov	r0, r9
 802c220:	f7e4 f83e 	bl	80102a0 <strlen>
 802c224:	9001      	str	r0, [sp, #4]
 802c226:	e734      	b.n	802c092 <_vfiprintf_r+0x47e>
 802c228:	f04a 0a10 	orr.w	sl, sl, #16
 802c22c:	f01a 0320 	ands.w	r3, sl, #32
 802c230:	d008      	beq.n	802c244 <_vfiprintf_r+0x630>
 802c232:	3507      	adds	r5, #7
 802c234:	f025 0507 	bic.w	r5, r5, #7
 802c238:	46a8      	mov	r8, r5
 802c23a:	686d      	ldr	r5, [r5, #4]
 802c23c:	f858 4b08 	ldr.w	r4, [r8], #8
 802c240:	2301      	movs	r3, #1
 802c242:	e6d8      	b.n	802bff6 <_vfiprintf_r+0x3e2>
 802c244:	46a8      	mov	r8, r5
 802c246:	f01a 0510 	ands.w	r5, sl, #16
 802c24a:	f858 4b04 	ldr.w	r4, [r8], #4
 802c24e:	d001      	beq.n	802c254 <_vfiprintf_r+0x640>
 802c250:	461d      	mov	r5, r3
 802c252:	e7f5      	b.n	802c240 <_vfiprintf_r+0x62c>
 802c254:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802c258:	d001      	beq.n	802c25e <_vfiprintf_r+0x64a>
 802c25a:	b2a4      	uxth	r4, r4
 802c25c:	e7f0      	b.n	802c240 <_vfiprintf_r+0x62c>
 802c25e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802c262:	d0ed      	beq.n	802c240 <_vfiprintf_r+0x62c>
 802c264:	b2e4      	uxtb	r4, r4
 802c266:	e7f3      	b.n	802c250 <_vfiprintf_r+0x63c>
 802c268:	4a43      	ldr	r2, [pc, #268]	@ (802c378 <_vfiprintf_r+0x764>)
 802c26a:	e5c9      	b.n	802be00 <_vfiprintf_r+0x1ec>
 802c26c:	46a8      	mov	r8, r5
 802c26e:	f01a 0510 	ands.w	r5, sl, #16
 802c272:	f858 4b04 	ldr.w	r4, [r8], #4
 802c276:	d001      	beq.n	802c27c <_vfiprintf_r+0x668>
 802c278:	4615      	mov	r5, r2
 802c27a:	e5cd      	b.n	802be18 <_vfiprintf_r+0x204>
 802c27c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 802c280:	d001      	beq.n	802c286 <_vfiprintf_r+0x672>
 802c282:	b2a4      	uxth	r4, r4
 802c284:	e5c8      	b.n	802be18 <_vfiprintf_r+0x204>
 802c286:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802c28a:	f43f adc5 	beq.w	802be18 <_vfiprintf_r+0x204>
 802c28e:	b2e4      	uxtb	r4, r4
 802c290:	e7f2      	b.n	802c278 <_vfiprintf_r+0x664>
 802c292:	2c0a      	cmp	r4, #10
 802c294:	f175 0300 	sbcs.w	r3, r5, #0
 802c298:	d206      	bcs.n	802c2a8 <_vfiprintf_r+0x694>
 802c29a:	3430      	adds	r4, #48	@ 0x30
 802c29c:	b2e4      	uxtb	r4, r4
 802c29e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802c2a2:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 802c2a6:	e131      	b.n	802c50c <_vfiprintf_r+0x8f8>
 802c2a8:	ab3a      	add	r3, sp, #232	@ 0xe8
 802c2aa:	9308      	str	r3, [sp, #32]
 802c2ac:	9b04      	ldr	r3, [sp, #16]
 802c2ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802c2b2:	f04f 0a00 	mov.w	sl, #0
 802c2b6:	930a      	str	r3, [sp, #40]	@ 0x28
 802c2b8:	220a      	movs	r2, #10
 802c2ba:	2300      	movs	r3, #0
 802c2bc:	4620      	mov	r0, r4
 802c2be:	4629      	mov	r1, r5
 802c2c0:	f7e4 fd4a 	bl	8010d58 <__aeabi_uldivmod>
 802c2c4:	460b      	mov	r3, r1
 802c2c6:	9908      	ldr	r1, [sp, #32]
 802c2c8:	900b      	str	r0, [sp, #44]	@ 0x2c
 802c2ca:	3230      	adds	r2, #48	@ 0x30
 802c2cc:	f801 2c01 	strb.w	r2, [r1, #-1]
 802c2d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802c2d2:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 802c2d6:	f10a 0a01 	add.w	sl, sl, #1
 802c2da:	b1e2      	cbz	r2, 802c316 <_vfiprintf_r+0x702>
 802c2dc:	9a06      	ldr	r2, [sp, #24]
 802c2de:	7812      	ldrb	r2, [r2, #0]
 802c2e0:	4552      	cmp	r2, sl
 802c2e2:	d118      	bne.n	802c316 <_vfiprintf_r+0x702>
 802c2e4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802c2e8:	d015      	beq.n	802c316 <_vfiprintf_r+0x702>
 802c2ea:	2c0a      	cmp	r4, #10
 802c2ec:	f175 0200 	sbcs.w	r2, r5, #0
 802c2f0:	d311      	bcc.n	802c316 <_vfiprintf_r+0x702>
 802c2f2:	9308      	str	r3, [sp, #32]
 802c2f4:	9b07      	ldr	r3, [sp, #28]
 802c2f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802c2f8:	eba9 0903 	sub.w	r9, r9, r3
 802c2fc:	461a      	mov	r2, r3
 802c2fe:	4648      	mov	r0, r9
 802c300:	f000 ff3d 	bl	802d17e <strncpy>
 802c304:	9b06      	ldr	r3, [sp, #24]
 802c306:	785a      	ldrb	r2, [r3, #1]
 802c308:	9b08      	ldr	r3, [sp, #32]
 802c30a:	b172      	cbz	r2, 802c32a <_vfiprintf_r+0x716>
 802c30c:	9a06      	ldr	r2, [sp, #24]
 802c30e:	3201      	adds	r2, #1
 802c310:	9206      	str	r2, [sp, #24]
 802c312:	f04f 0a00 	mov.w	sl, #0
 802c316:	2c0a      	cmp	r4, #10
 802c318:	f175 0500 	sbcs.w	r5, r5, #0
 802c31c:	f0c0 80f6 	bcc.w	802c50c <_vfiprintf_r+0x8f8>
 802c320:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802c322:	f8cd 9020 	str.w	r9, [sp, #32]
 802c326:	461d      	mov	r5, r3
 802c328:	e7c6      	b.n	802c2b8 <_vfiprintf_r+0x6a4>
 802c32a:	4692      	mov	sl, r2
 802c32c:	e7f3      	b.n	802c316 <_vfiprintf_r+0x702>
 802c32e:	f004 030f 	and.w	r3, r4, #15
 802c332:	9a05      	ldr	r2, [sp, #20]
 802c334:	0924      	lsrs	r4, r4, #4
 802c336:	5cd3      	ldrb	r3, [r2, r3]
 802c338:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802c33c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802c340:	092d      	lsrs	r5, r5, #4
 802c342:	ea54 0305 	orrs.w	r3, r4, r5
 802c346:	d1f2      	bne.n	802c32e <_vfiprintf_r+0x71a>
 802c348:	e0e0      	b.n	802c50c <_vfiprintf_r+0x8f8>
 802c34a:	b923      	cbnz	r3, 802c356 <_vfiprintf_r+0x742>
 802c34c:	f01a 0f01 	tst.w	sl, #1
 802c350:	d001      	beq.n	802c356 <_vfiprintf_r+0x742>
 802c352:	2430      	movs	r4, #48	@ 0x30
 802c354:	e7a3      	b.n	802c29e <_vfiprintf_r+0x68a>
 802c356:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802c35a:	e0d7      	b.n	802c50c <_vfiprintf_r+0x8f8>
 802c35c:	2b00      	cmp	r3, #0
 802c35e:	f000 80a3 	beq.w	802c4a8 <_vfiprintf_r+0x894>
 802c362:	2400      	movs	r4, #0
 802c364:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802c368:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802c36c:	46a8      	mov	r8, r5
 802c36e:	e5e0      	b.n	802bf32 <_vfiprintf_r+0x31e>
 802c370:	0803c583 	.word	0x0803c583
 802c374:	0803c573 	.word	0x0803c573
 802c378:	0803c540 	.word	0x0803c540
 802c37c:	2110      	movs	r1, #16
 802c37e:	6071      	str	r1, [r6, #4]
 802c380:	2a07      	cmp	r2, #7
 802c382:	4461      	add	r1, ip
 802c384:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802c388:	dd08      	ble.n	802c39c <_vfiprintf_r+0x788>
 802c38a:	9800      	ldr	r0, [sp, #0]
 802c38c:	aa0e      	add	r2, sp, #56	@ 0x38
 802c38e:	4639      	mov	r1, r7
 802c390:	f7ff fc0e 	bl	802bbb0 <__sprint_r>
 802c394:	2800      	cmp	r0, #0
 802c396:	d166      	bne.n	802c466 <_vfiprintf_r+0x852>
 802c398:	4b60      	ldr	r3, [pc, #384]	@ (802c51c <_vfiprintf_r+0x908>)
 802c39a:	a811      	add	r0, sp, #68	@ 0x44
 802c39c:	3d10      	subs	r5, #16
 802c39e:	4606      	mov	r6, r0
 802c3a0:	e694      	b.n	802c0cc <_vfiprintf_r+0x4b8>
 802c3a2:	4606      	mov	r6, r0
 802c3a4:	e6ac      	b.n	802c100 <_vfiprintf_r+0x4ec>
 802c3a6:	9800      	ldr	r0, [sp, #0]
 802c3a8:	aa0e      	add	r2, sp, #56	@ 0x38
 802c3aa:	4639      	mov	r1, r7
 802c3ac:	f7ff fc00 	bl	802bbb0 <__sprint_r>
 802c3b0:	2800      	cmp	r0, #0
 802c3b2:	d158      	bne.n	802c466 <_vfiprintf_r+0x852>
 802c3b4:	ae11      	add	r6, sp, #68	@ 0x44
 802c3b6:	e6b5      	b.n	802c124 <_vfiprintf_r+0x510>
 802c3b8:	9800      	ldr	r0, [sp, #0]
 802c3ba:	aa0e      	add	r2, sp, #56	@ 0x38
 802c3bc:	4639      	mov	r1, r7
 802c3be:	f7ff fbf7 	bl	802bbb0 <__sprint_r>
 802c3c2:	2800      	cmp	r0, #0
 802c3c4:	d14f      	bne.n	802c466 <_vfiprintf_r+0x852>
 802c3c6:	ae11      	add	r6, sp, #68	@ 0x44
 802c3c8:	e6bc      	b.n	802c144 <_vfiprintf_r+0x530>
 802c3ca:	2110      	movs	r1, #16
 802c3cc:	6071      	str	r1, [r6, #4]
 802c3ce:	2a07      	cmp	r2, #7
 802c3d0:	4461      	add	r1, ip
 802c3d2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802c3d6:	dd08      	ble.n	802c3ea <_vfiprintf_r+0x7d6>
 802c3d8:	9800      	ldr	r0, [sp, #0]
 802c3da:	aa0e      	add	r2, sp, #56	@ 0x38
 802c3dc:	4639      	mov	r1, r7
 802c3de:	f7ff fbe7 	bl	802bbb0 <__sprint_r>
 802c3e2:	2800      	cmp	r0, #0
 802c3e4:	d13f      	bne.n	802c466 <_vfiprintf_r+0x852>
 802c3e6:	4b4e      	ldr	r3, [pc, #312]	@ (802c520 <_vfiprintf_r+0x90c>)
 802c3e8:	a811      	add	r0, sp, #68	@ 0x44
 802c3ea:	3d10      	subs	r5, #16
 802c3ec:	4606      	mov	r6, r0
 802c3ee:	e6b2      	b.n	802c156 <_vfiprintf_r+0x542>
 802c3f0:	4606      	mov	r6, r0
 802c3f2:	e6ca      	b.n	802c18a <_vfiprintf_r+0x576>
 802c3f4:	2010      	movs	r0, #16
 802c3f6:	4402      	add	r2, r0
 802c3f8:	2b07      	cmp	r3, #7
 802c3fa:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802c3fe:	6070      	str	r0, [r6, #4]
 802c400:	dd06      	ble.n	802c410 <_vfiprintf_r+0x7fc>
 802c402:	9800      	ldr	r0, [sp, #0]
 802c404:	aa0e      	add	r2, sp, #56	@ 0x38
 802c406:	4639      	mov	r1, r7
 802c408:	f7ff fbd2 	bl	802bbb0 <__sprint_r>
 802c40c:	bb58      	cbnz	r0, 802c466 <_vfiprintf_r+0x852>
 802c40e:	a911      	add	r1, sp, #68	@ 0x44
 802c410:	3c10      	subs	r4, #16
 802c412:	460e      	mov	r6, r1
 802c414:	e6bd      	b.n	802c192 <_vfiprintf_r+0x57e>
 802c416:	460e      	mov	r6, r1
 802c418:	e6d6      	b.n	802c1c8 <_vfiprintf_r+0x5b4>
 802c41a:	9800      	ldr	r0, [sp, #0]
 802c41c:	aa0e      	add	r2, sp, #56	@ 0x38
 802c41e:	4639      	mov	r1, r7
 802c420:	f7ff fbc6 	bl	802bbb0 <__sprint_r>
 802c424:	b9f8      	cbnz	r0, 802c466 <_vfiprintf_r+0x852>
 802c426:	ab11      	add	r3, sp, #68	@ 0x44
 802c428:	e6de      	b.n	802c1e8 <_vfiprintf_r+0x5d4>
 802c42a:	9a02      	ldr	r2, [sp, #8]
 802c42c:	9904      	ldr	r1, [sp, #16]
 802c42e:	1a54      	subs	r4, r2, r1
 802c430:	2c00      	cmp	r4, #0
 802c432:	f77f aedd 	ble.w	802c1f0 <_vfiprintf_r+0x5dc>
 802c436:	4d39      	ldr	r5, [pc, #228]	@ (802c51c <_vfiprintf_r+0x908>)
 802c438:	2610      	movs	r6, #16
 802c43a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802c43e:	2c10      	cmp	r4, #16
 802c440:	f102 0201 	add.w	r2, r2, #1
 802c444:	601d      	str	r5, [r3, #0]
 802c446:	dc1d      	bgt.n	802c484 <_vfiprintf_r+0x870>
 802c448:	605c      	str	r4, [r3, #4]
 802c44a:	2a07      	cmp	r2, #7
 802c44c:	440c      	add	r4, r1
 802c44e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802c452:	f77f aecd 	ble.w	802c1f0 <_vfiprintf_r+0x5dc>
 802c456:	9800      	ldr	r0, [sp, #0]
 802c458:	aa0e      	add	r2, sp, #56	@ 0x38
 802c45a:	4639      	mov	r1, r7
 802c45c:	f7ff fba8 	bl	802bbb0 <__sprint_r>
 802c460:	2800      	cmp	r0, #0
 802c462:	f43f aec5 	beq.w	802c1f0 <_vfiprintf_r+0x5dc>
 802c466:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802c468:	07d9      	lsls	r1, r3, #31
 802c46a:	d405      	bmi.n	802c478 <_vfiprintf_r+0x864>
 802c46c:	89bb      	ldrh	r3, [r7, #12]
 802c46e:	059a      	lsls	r2, r3, #22
 802c470:	d402      	bmi.n	802c478 <_vfiprintf_r+0x864>
 802c472:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802c474:	f002 f877 	bl	802e566 <__retarget_lock_release_recursive>
 802c478:	89bb      	ldrh	r3, [r7, #12]
 802c47a:	065b      	lsls	r3, r3, #25
 802c47c:	f57f abfb 	bpl.w	802bc76 <_vfiprintf_r+0x62>
 802c480:	f7ff bbf6 	b.w	802bc70 <_vfiprintf_r+0x5c>
 802c484:	3110      	adds	r1, #16
 802c486:	2a07      	cmp	r2, #7
 802c488:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802c48c:	605e      	str	r6, [r3, #4]
 802c48e:	dc02      	bgt.n	802c496 <_vfiprintf_r+0x882>
 802c490:	3308      	adds	r3, #8
 802c492:	3c10      	subs	r4, #16
 802c494:	e7d1      	b.n	802c43a <_vfiprintf_r+0x826>
 802c496:	9800      	ldr	r0, [sp, #0]
 802c498:	aa0e      	add	r2, sp, #56	@ 0x38
 802c49a:	4639      	mov	r1, r7
 802c49c:	f7ff fb88 	bl	802bbb0 <__sprint_r>
 802c4a0:	2800      	cmp	r0, #0
 802c4a2:	d1e0      	bne.n	802c466 <_vfiprintf_r+0x852>
 802c4a4:	ab11      	add	r3, sp, #68	@ 0x44
 802c4a6:	e7f4      	b.n	802c492 <_vfiprintf_r+0x87e>
 802c4a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c4aa:	b913      	cbnz	r3, 802c4b2 <_vfiprintf_r+0x89e>
 802c4ac:	2300      	movs	r3, #0
 802c4ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 802c4b0:	e7d9      	b.n	802c466 <_vfiprintf_r+0x852>
 802c4b2:	9800      	ldr	r0, [sp, #0]
 802c4b4:	aa0e      	add	r2, sp, #56	@ 0x38
 802c4b6:	4639      	mov	r1, r7
 802c4b8:	f7ff fb7a 	bl	802bbb0 <__sprint_r>
 802c4bc:	2800      	cmp	r0, #0
 802c4be:	d0f5      	beq.n	802c4ac <_vfiprintf_r+0x898>
 802c4c0:	e7d1      	b.n	802c466 <_vfiprintf_r+0x852>
 802c4c2:	ea54 0205 	orrs.w	r2, r4, r5
 802c4c6:	f8cd a010 	str.w	sl, [sp, #16]
 802c4ca:	f43f ada6 	beq.w	802c01a <_vfiprintf_r+0x406>
 802c4ce:	2b01      	cmp	r3, #1
 802c4d0:	f43f aedf 	beq.w	802c292 <_vfiprintf_r+0x67e>
 802c4d4:	2b02      	cmp	r3, #2
 802c4d6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802c4da:	f43f af28 	beq.w	802c32e <_vfiprintf_r+0x71a>
 802c4de:	f004 0307 	and.w	r3, r4, #7
 802c4e2:	08e4      	lsrs	r4, r4, #3
 802c4e4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802c4e8:	08ed      	lsrs	r5, r5, #3
 802c4ea:	3330      	adds	r3, #48	@ 0x30
 802c4ec:	ea54 0105 	orrs.w	r1, r4, r5
 802c4f0:	464a      	mov	r2, r9
 802c4f2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802c4f6:	d1f2      	bne.n	802c4de <_vfiprintf_r+0x8ca>
 802c4f8:	9904      	ldr	r1, [sp, #16]
 802c4fa:	07c8      	lsls	r0, r1, #31
 802c4fc:	d506      	bpl.n	802c50c <_vfiprintf_r+0x8f8>
 802c4fe:	2b30      	cmp	r3, #48	@ 0x30
 802c500:	d004      	beq.n	802c50c <_vfiprintf_r+0x8f8>
 802c502:	2330      	movs	r3, #48	@ 0x30
 802c504:	f809 3c01 	strb.w	r3, [r9, #-1]
 802c508:	f1a2 0902 	sub.w	r9, r2, #2
 802c50c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802c50e:	eba3 0309 	sub.w	r3, r3, r9
 802c512:	9c01      	ldr	r4, [sp, #4]
 802c514:	f8dd a010 	ldr.w	sl, [sp, #16]
 802c518:	9301      	str	r3, [sp, #4]
 802c51a:	e5bb      	b.n	802c094 <_vfiprintf_r+0x480>
 802c51c:	0803c583 	.word	0x0803c583
 802c520:	0803c573 	.word	0x0803c573

0802c524 <__sbprintf>:
 802c524:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c526:	461f      	mov	r7, r3
 802c528:	898b      	ldrh	r3, [r1, #12]
 802c52a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802c52e:	f023 0302 	bic.w	r3, r3, #2
 802c532:	f8ad 300c 	strh.w	r3, [sp, #12]
 802c536:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802c538:	9319      	str	r3, [sp, #100]	@ 0x64
 802c53a:	89cb      	ldrh	r3, [r1, #14]
 802c53c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c540:	69cb      	ldr	r3, [r1, #28]
 802c542:	9307      	str	r3, [sp, #28]
 802c544:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802c546:	9309      	str	r3, [sp, #36]	@ 0x24
 802c548:	ab1a      	add	r3, sp, #104	@ 0x68
 802c54a:	9300      	str	r3, [sp, #0]
 802c54c:	9304      	str	r3, [sp, #16]
 802c54e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c552:	4615      	mov	r5, r2
 802c554:	4606      	mov	r6, r0
 802c556:	9302      	str	r3, [sp, #8]
 802c558:	9305      	str	r3, [sp, #20]
 802c55a:	a816      	add	r0, sp, #88	@ 0x58
 802c55c:	2300      	movs	r3, #0
 802c55e:	460c      	mov	r4, r1
 802c560:	9306      	str	r3, [sp, #24]
 802c562:	f001 fffb 	bl	802e55c <__retarget_lock_init_recursive>
 802c566:	462a      	mov	r2, r5
 802c568:	463b      	mov	r3, r7
 802c56a:	4669      	mov	r1, sp
 802c56c:	4630      	mov	r0, r6
 802c56e:	f7ff fb51 	bl	802bc14 <_vfiprintf_r>
 802c572:	1e05      	subs	r5, r0, #0
 802c574:	db07      	blt.n	802c586 <__sbprintf+0x62>
 802c576:	4669      	mov	r1, sp
 802c578:	4630      	mov	r0, r6
 802c57a:	f000 f9d1 	bl	802c920 <_fflush_r>
 802c57e:	2800      	cmp	r0, #0
 802c580:	bf18      	it	ne
 802c582:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802c586:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802c58a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802c58c:	065b      	lsls	r3, r3, #25
 802c58e:	bf42      	ittt	mi
 802c590:	89a3      	ldrhmi	r3, [r4, #12]
 802c592:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802c596:	81a3      	strhmi	r3, [r4, #12]
 802c598:	f001 ffe1 	bl	802e55e <__retarget_lock_close_recursive>
 802c59c:	4628      	mov	r0, r5
 802c59e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802c5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802c5a4 <putchar>:
 802c5a4:	4b02      	ldr	r3, [pc, #8]	@ (802c5b0 <putchar+0xc>)
 802c5a6:	4601      	mov	r1, r0
 802c5a8:	6818      	ldr	r0, [r3, #0]
 802c5aa:	6882      	ldr	r2, [r0, #8]
 802c5ac:	f007 bacc 	b.w	8033b48 <_putc_r>
 802c5b0:	200002d8 	.word	0x200002d8

0802c5b4 <_puts_r>:
 802c5b4:	b530      	push	{r4, r5, lr}
 802c5b6:	4605      	mov	r5, r0
 802c5b8:	b089      	sub	sp, #36	@ 0x24
 802c5ba:	4608      	mov	r0, r1
 802c5bc:	460c      	mov	r4, r1
 802c5be:	f7e3 fe6f 	bl	80102a0 <strlen>
 802c5c2:	4b1e      	ldr	r3, [pc, #120]	@ (802c63c <_puts_r+0x88>)
 802c5c4:	9306      	str	r3, [sp, #24]
 802c5c6:	2301      	movs	r3, #1
 802c5c8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802c5cc:	9307      	str	r3, [sp, #28]
 802c5ce:	4418      	add	r0, r3
 802c5d0:	ab04      	add	r3, sp, #16
 802c5d2:	9301      	str	r3, [sp, #4]
 802c5d4:	2302      	movs	r3, #2
 802c5d6:	9302      	str	r3, [sp, #8]
 802c5d8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802c5da:	68ac      	ldr	r4, [r5, #8]
 802c5dc:	9003      	str	r0, [sp, #12]
 802c5de:	b913      	cbnz	r3, 802c5e6 <_puts_r+0x32>
 802c5e0:	4628      	mov	r0, r5
 802c5e2:	f000 fadf 	bl	802cba4 <__sinit>
 802c5e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c5e8:	07db      	lsls	r3, r3, #31
 802c5ea:	d405      	bmi.n	802c5f8 <_puts_r+0x44>
 802c5ec:	89a3      	ldrh	r3, [r4, #12]
 802c5ee:	0598      	lsls	r0, r3, #22
 802c5f0:	d402      	bmi.n	802c5f8 <_puts_r+0x44>
 802c5f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c5f4:	f001 ffb5 	bl	802e562 <__retarget_lock_acquire_recursive>
 802c5f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c5fc:	0499      	lsls	r1, r3, #18
 802c5fe:	d406      	bmi.n	802c60e <_puts_r+0x5a>
 802c600:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c604:	81a3      	strh	r3, [r4, #12]
 802c606:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c608:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802c60c:	6663      	str	r3, [r4, #100]	@ 0x64
 802c60e:	4628      	mov	r0, r5
 802c610:	aa01      	add	r2, sp, #4
 802c612:	4621      	mov	r1, r4
 802c614:	f000 fb18 	bl	802cc48 <__sfvwrite_r>
 802c618:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c61a:	2800      	cmp	r0, #0
 802c61c:	bf0c      	ite	eq
 802c61e:	250a      	moveq	r5, #10
 802c620:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802c624:	07da      	lsls	r2, r3, #31
 802c626:	d405      	bmi.n	802c634 <_puts_r+0x80>
 802c628:	89a3      	ldrh	r3, [r4, #12]
 802c62a:	059b      	lsls	r3, r3, #22
 802c62c:	d402      	bmi.n	802c634 <_puts_r+0x80>
 802c62e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c630:	f001 ff99 	bl	802e566 <__retarget_lock_release_recursive>
 802c634:	4628      	mov	r0, r5
 802c636:	b009      	add	sp, #36	@ 0x24
 802c638:	bd30      	pop	{r4, r5, pc}
 802c63a:	bf00      	nop
 802c63c:	0803c51d 	.word	0x0803c51d

0802c640 <puts>:
 802c640:	4b02      	ldr	r3, [pc, #8]	@ (802c64c <puts+0xc>)
 802c642:	4601      	mov	r1, r0
 802c644:	6818      	ldr	r0, [r3, #0]
 802c646:	f7ff bfb5 	b.w	802c5b4 <_puts_r>
 802c64a:	bf00      	nop
 802c64c:	200002d8 	.word	0x200002d8

0802c650 <srand>:
 802c650:	4b03      	ldr	r3, [pc, #12]	@ (802c660 <srand+0x10>)
 802c652:	681b      	ldr	r3, [r3, #0]
 802c654:	2200      	movs	r2, #0
 802c656:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 802c65a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 802c65e:	4770      	bx	lr
 802c660:	200002d8 	.word	0x200002d8

0802c664 <rand>:
 802c664:	4b0a      	ldr	r3, [pc, #40]	@ (802c690 <rand+0x2c>)
 802c666:	480b      	ldr	r0, [pc, #44]	@ (802c694 <rand+0x30>)
 802c668:	6819      	ldr	r1, [r3, #0]
 802c66a:	4a0b      	ldr	r2, [pc, #44]	@ (802c698 <rand+0x34>)
 802c66c:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 802c670:	b510      	push	{r4, lr}
 802c672:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 802c676:	4358      	muls	r0, r3
 802c678:	fb02 0004 	mla	r0, r2, r4, r0
 802c67c:	fba3 3202 	umull	r3, r2, r3, r2
 802c680:	3301      	adds	r3, #1
 802c682:	eb40 0002 	adc.w	r0, r0, r2
 802c686:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802c68a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802c68e:	bd10      	pop	{r4, pc}
 802c690:	200002d8 	.word	0x200002d8
 802c694:	5851f42d 	.word	0x5851f42d
 802c698:	4c957f2d 	.word	0x4c957f2d

0802c69c <snprintf>:
 802c69c:	b40c      	push	{r2, r3}
 802c69e:	b530      	push	{r4, r5, lr}
 802c6a0:	4b17      	ldr	r3, [pc, #92]	@ (802c700 <snprintf+0x64>)
 802c6a2:	1e0c      	subs	r4, r1, #0
 802c6a4:	681d      	ldr	r5, [r3, #0]
 802c6a6:	b09d      	sub	sp, #116	@ 0x74
 802c6a8:	da08      	bge.n	802c6bc <snprintf+0x20>
 802c6aa:	238b      	movs	r3, #139	@ 0x8b
 802c6ac:	602b      	str	r3, [r5, #0]
 802c6ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c6b2:	b01d      	add	sp, #116	@ 0x74
 802c6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c6b8:	b002      	add	sp, #8
 802c6ba:	4770      	bx	lr
 802c6bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802c6c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 802c6c4:	bf14      	ite	ne
 802c6c6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802c6ca:	4623      	moveq	r3, r4
 802c6cc:	9304      	str	r3, [sp, #16]
 802c6ce:	9307      	str	r3, [sp, #28]
 802c6d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c6d4:	9002      	str	r0, [sp, #8]
 802c6d6:	9006      	str	r0, [sp, #24]
 802c6d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c6dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802c6de:	ab21      	add	r3, sp, #132	@ 0x84
 802c6e0:	a902      	add	r1, sp, #8
 802c6e2:	4628      	mov	r0, r5
 802c6e4:	9301      	str	r3, [sp, #4]
 802c6e6:	f004 fe7b 	bl	80313e0 <_svfprintf_r>
 802c6ea:	1c43      	adds	r3, r0, #1
 802c6ec:	bfbc      	itt	lt
 802c6ee:	238b      	movlt	r3, #139	@ 0x8b
 802c6f0:	602b      	strlt	r3, [r5, #0]
 802c6f2:	2c00      	cmp	r4, #0
 802c6f4:	d0dd      	beq.n	802c6b2 <snprintf+0x16>
 802c6f6:	9b02      	ldr	r3, [sp, #8]
 802c6f8:	2200      	movs	r2, #0
 802c6fa:	701a      	strb	r2, [r3, #0]
 802c6fc:	e7d9      	b.n	802c6b2 <snprintf+0x16>
 802c6fe:	bf00      	nop
 802c700:	200002d8 	.word	0x200002d8

0802c704 <_strtol_l.constprop.0>:
 802c704:	2b24      	cmp	r3, #36	@ 0x24
 802c706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c70a:	4686      	mov	lr, r0
 802c70c:	4690      	mov	r8, r2
 802c70e:	d801      	bhi.n	802c714 <_strtol_l.constprop.0+0x10>
 802c710:	2b01      	cmp	r3, #1
 802c712:	d106      	bne.n	802c722 <_strtol_l.constprop.0+0x1e>
 802c714:	f001 fef0 	bl	802e4f8 <__errno>
 802c718:	2316      	movs	r3, #22
 802c71a:	6003      	str	r3, [r0, #0]
 802c71c:	2000      	movs	r0, #0
 802c71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c722:	4834      	ldr	r0, [pc, #208]	@ (802c7f4 <_strtol_l.constprop.0+0xf0>)
 802c724:	460d      	mov	r5, r1
 802c726:	462a      	mov	r2, r5
 802c728:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c72c:	5d06      	ldrb	r6, [r0, r4]
 802c72e:	f016 0608 	ands.w	r6, r6, #8
 802c732:	d1f8      	bne.n	802c726 <_strtol_l.constprop.0+0x22>
 802c734:	2c2d      	cmp	r4, #45	@ 0x2d
 802c736:	d12d      	bne.n	802c794 <_strtol_l.constprop.0+0x90>
 802c738:	782c      	ldrb	r4, [r5, #0]
 802c73a:	2601      	movs	r6, #1
 802c73c:	1c95      	adds	r5, r2, #2
 802c73e:	f033 0210 	bics.w	r2, r3, #16
 802c742:	d109      	bne.n	802c758 <_strtol_l.constprop.0+0x54>
 802c744:	2c30      	cmp	r4, #48	@ 0x30
 802c746:	d12a      	bne.n	802c79e <_strtol_l.constprop.0+0x9a>
 802c748:	782a      	ldrb	r2, [r5, #0]
 802c74a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802c74e:	2a58      	cmp	r2, #88	@ 0x58
 802c750:	d125      	bne.n	802c79e <_strtol_l.constprop.0+0x9a>
 802c752:	786c      	ldrb	r4, [r5, #1]
 802c754:	2310      	movs	r3, #16
 802c756:	3502      	adds	r5, #2
 802c758:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802c75c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802c760:	2200      	movs	r2, #0
 802c762:	fbbc f9f3 	udiv	r9, ip, r3
 802c766:	4610      	mov	r0, r2
 802c768:	fb03 ca19 	mls	sl, r3, r9, ip
 802c76c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802c770:	2f09      	cmp	r7, #9
 802c772:	d81b      	bhi.n	802c7ac <_strtol_l.constprop.0+0xa8>
 802c774:	463c      	mov	r4, r7
 802c776:	42a3      	cmp	r3, r4
 802c778:	dd27      	ble.n	802c7ca <_strtol_l.constprop.0+0xc6>
 802c77a:	1c57      	adds	r7, r2, #1
 802c77c:	d007      	beq.n	802c78e <_strtol_l.constprop.0+0x8a>
 802c77e:	4581      	cmp	r9, r0
 802c780:	d320      	bcc.n	802c7c4 <_strtol_l.constprop.0+0xc0>
 802c782:	d101      	bne.n	802c788 <_strtol_l.constprop.0+0x84>
 802c784:	45a2      	cmp	sl, r4
 802c786:	db1d      	blt.n	802c7c4 <_strtol_l.constprop.0+0xc0>
 802c788:	fb00 4003 	mla	r0, r0, r3, r4
 802c78c:	2201      	movs	r2, #1
 802c78e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c792:	e7eb      	b.n	802c76c <_strtol_l.constprop.0+0x68>
 802c794:	2c2b      	cmp	r4, #43	@ 0x2b
 802c796:	bf04      	itt	eq
 802c798:	782c      	ldrbeq	r4, [r5, #0]
 802c79a:	1c95      	addeq	r5, r2, #2
 802c79c:	e7cf      	b.n	802c73e <_strtol_l.constprop.0+0x3a>
 802c79e:	2b00      	cmp	r3, #0
 802c7a0:	d1da      	bne.n	802c758 <_strtol_l.constprop.0+0x54>
 802c7a2:	2c30      	cmp	r4, #48	@ 0x30
 802c7a4:	bf0c      	ite	eq
 802c7a6:	2308      	moveq	r3, #8
 802c7a8:	230a      	movne	r3, #10
 802c7aa:	e7d5      	b.n	802c758 <_strtol_l.constprop.0+0x54>
 802c7ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802c7b0:	2f19      	cmp	r7, #25
 802c7b2:	d801      	bhi.n	802c7b8 <_strtol_l.constprop.0+0xb4>
 802c7b4:	3c37      	subs	r4, #55	@ 0x37
 802c7b6:	e7de      	b.n	802c776 <_strtol_l.constprop.0+0x72>
 802c7b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802c7bc:	2f19      	cmp	r7, #25
 802c7be:	d804      	bhi.n	802c7ca <_strtol_l.constprop.0+0xc6>
 802c7c0:	3c57      	subs	r4, #87	@ 0x57
 802c7c2:	e7d8      	b.n	802c776 <_strtol_l.constprop.0+0x72>
 802c7c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802c7c8:	e7e1      	b.n	802c78e <_strtol_l.constprop.0+0x8a>
 802c7ca:	1c53      	adds	r3, r2, #1
 802c7cc:	d108      	bne.n	802c7e0 <_strtol_l.constprop.0+0xdc>
 802c7ce:	2322      	movs	r3, #34	@ 0x22
 802c7d0:	f8ce 3000 	str.w	r3, [lr]
 802c7d4:	4660      	mov	r0, ip
 802c7d6:	f1b8 0f00 	cmp.w	r8, #0
 802c7da:	d0a0      	beq.n	802c71e <_strtol_l.constprop.0+0x1a>
 802c7dc:	1e69      	subs	r1, r5, #1
 802c7de:	e006      	b.n	802c7ee <_strtol_l.constprop.0+0xea>
 802c7e0:	b106      	cbz	r6, 802c7e4 <_strtol_l.constprop.0+0xe0>
 802c7e2:	4240      	negs	r0, r0
 802c7e4:	f1b8 0f00 	cmp.w	r8, #0
 802c7e8:	d099      	beq.n	802c71e <_strtol_l.constprop.0+0x1a>
 802c7ea:	2a00      	cmp	r2, #0
 802c7ec:	d1f6      	bne.n	802c7dc <_strtol_l.constprop.0+0xd8>
 802c7ee:	f8c8 1000 	str.w	r1, [r8]
 802c7f2:	e794      	b.n	802c71e <_strtol_l.constprop.0+0x1a>
 802c7f4:	0803c8dd 	.word	0x0803c8dd

0802c7f8 <_strtol_r>:
 802c7f8:	f7ff bf84 	b.w	802c704 <_strtol_l.constprop.0>

0802c7fc <strtol>:
 802c7fc:	4613      	mov	r3, r2
 802c7fe:	460a      	mov	r2, r1
 802c800:	4601      	mov	r1, r0
 802c802:	4802      	ldr	r0, [pc, #8]	@ (802c80c <strtol+0x10>)
 802c804:	6800      	ldr	r0, [r0, #0]
 802c806:	f7ff bf7d 	b.w	802c704 <_strtol_l.constprop.0>
 802c80a:	bf00      	nop
 802c80c:	200002d8 	.word	0x200002d8

0802c810 <__sflush_r>:
 802c810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c814:	4605      	mov	r5, r0
 802c816:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802c81a:	0706      	lsls	r6, r0, #28
 802c81c:	460c      	mov	r4, r1
 802c81e:	d457      	bmi.n	802c8d0 <__sflush_r+0xc0>
 802c820:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 802c824:	818b      	strh	r3, [r1, #12]
 802c826:	684b      	ldr	r3, [r1, #4]
 802c828:	2b00      	cmp	r3, #0
 802c82a:	dc02      	bgt.n	802c832 <__sflush_r+0x22>
 802c82c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802c82e:	2b00      	cmp	r3, #0
 802c830:	dd4c      	ble.n	802c8cc <__sflush_r+0xbc>
 802c832:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c834:	2e00      	cmp	r6, #0
 802c836:	d049      	beq.n	802c8cc <__sflush_r+0xbc>
 802c838:	2300      	movs	r3, #0
 802c83a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802c83e:	682f      	ldr	r7, [r5, #0]
 802c840:	69e1      	ldr	r1, [r4, #28]
 802c842:	602b      	str	r3, [r5, #0]
 802c844:	d034      	beq.n	802c8b0 <__sflush_r+0xa0>
 802c846:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 802c848:	89a3      	ldrh	r3, [r4, #12]
 802c84a:	0759      	lsls	r1, r3, #29
 802c84c:	d505      	bpl.n	802c85a <__sflush_r+0x4a>
 802c84e:	6863      	ldr	r3, [r4, #4]
 802c850:	1ad2      	subs	r2, r2, r3
 802c852:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802c854:	b10b      	cbz	r3, 802c85a <__sflush_r+0x4a>
 802c856:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802c858:	1ad2      	subs	r2, r2, r3
 802c85a:	2300      	movs	r3, #0
 802c85c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c85e:	69e1      	ldr	r1, [r4, #28]
 802c860:	4628      	mov	r0, r5
 802c862:	47b0      	blx	r6
 802c864:	1c43      	adds	r3, r0, #1
 802c866:	d106      	bne.n	802c876 <__sflush_r+0x66>
 802c868:	682a      	ldr	r2, [r5, #0]
 802c86a:	2a1d      	cmp	r2, #29
 802c86c:	d848      	bhi.n	802c900 <__sflush_r+0xf0>
 802c86e:	4b2b      	ldr	r3, [pc, #172]	@ (802c91c <__sflush_r+0x10c>)
 802c870:	4113      	asrs	r3, r2
 802c872:	07de      	lsls	r6, r3, #31
 802c874:	d444      	bmi.n	802c900 <__sflush_r+0xf0>
 802c876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c87a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802c87e:	81a2      	strh	r2, [r4, #12]
 802c880:	2200      	movs	r2, #0
 802c882:	6062      	str	r2, [r4, #4]
 802c884:	04d9      	lsls	r1, r3, #19
 802c886:	6922      	ldr	r2, [r4, #16]
 802c888:	6022      	str	r2, [r4, #0]
 802c88a:	d504      	bpl.n	802c896 <__sflush_r+0x86>
 802c88c:	1c42      	adds	r2, r0, #1
 802c88e:	d101      	bne.n	802c894 <__sflush_r+0x84>
 802c890:	682b      	ldr	r3, [r5, #0]
 802c892:	b903      	cbnz	r3, 802c896 <__sflush_r+0x86>
 802c894:	6520      	str	r0, [r4, #80]	@ 0x50
 802c896:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c898:	602f      	str	r7, [r5, #0]
 802c89a:	b1b9      	cbz	r1, 802c8cc <__sflush_r+0xbc>
 802c89c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802c8a0:	4299      	cmp	r1, r3
 802c8a2:	d002      	beq.n	802c8aa <__sflush_r+0x9a>
 802c8a4:	4628      	mov	r0, r5
 802c8a6:	f002 fd61 	bl	802f36c <_free_r>
 802c8aa:	2300      	movs	r3, #0
 802c8ac:	6323      	str	r3, [r4, #48]	@ 0x30
 802c8ae:	e00d      	b.n	802c8cc <__sflush_r+0xbc>
 802c8b0:	2301      	movs	r3, #1
 802c8b2:	4628      	mov	r0, r5
 802c8b4:	47b0      	blx	r6
 802c8b6:	4602      	mov	r2, r0
 802c8b8:	1c50      	adds	r0, r2, #1
 802c8ba:	d1c5      	bne.n	802c848 <__sflush_r+0x38>
 802c8bc:	682b      	ldr	r3, [r5, #0]
 802c8be:	2b00      	cmp	r3, #0
 802c8c0:	d0c2      	beq.n	802c848 <__sflush_r+0x38>
 802c8c2:	2b1d      	cmp	r3, #29
 802c8c4:	d001      	beq.n	802c8ca <__sflush_r+0xba>
 802c8c6:	2b16      	cmp	r3, #22
 802c8c8:	d11a      	bne.n	802c900 <__sflush_r+0xf0>
 802c8ca:	602f      	str	r7, [r5, #0]
 802c8cc:	2000      	movs	r0, #0
 802c8ce:	e01e      	b.n	802c90e <__sflush_r+0xfe>
 802c8d0:	690f      	ldr	r7, [r1, #16]
 802c8d2:	2f00      	cmp	r7, #0
 802c8d4:	d0fa      	beq.n	802c8cc <__sflush_r+0xbc>
 802c8d6:	0783      	lsls	r3, r0, #30
 802c8d8:	680e      	ldr	r6, [r1, #0]
 802c8da:	bf08      	it	eq
 802c8dc:	694b      	ldreq	r3, [r1, #20]
 802c8de:	600f      	str	r7, [r1, #0]
 802c8e0:	bf18      	it	ne
 802c8e2:	2300      	movne	r3, #0
 802c8e4:	eba6 0807 	sub.w	r8, r6, r7
 802c8e8:	608b      	str	r3, [r1, #8]
 802c8ea:	f1b8 0f00 	cmp.w	r8, #0
 802c8ee:	dded      	ble.n	802c8cc <__sflush_r+0xbc>
 802c8f0:	69e1      	ldr	r1, [r4, #28]
 802c8f2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802c8f4:	4643      	mov	r3, r8
 802c8f6:	463a      	mov	r2, r7
 802c8f8:	4628      	mov	r0, r5
 802c8fa:	47b0      	blx	r6
 802c8fc:	2800      	cmp	r0, #0
 802c8fe:	dc08      	bgt.n	802c912 <__sflush_r+0x102>
 802c900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c908:	81a3      	strh	r3, [r4, #12]
 802c90a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c912:	4407      	add	r7, r0
 802c914:	eba8 0800 	sub.w	r8, r8, r0
 802c918:	e7e7      	b.n	802c8ea <__sflush_r+0xda>
 802c91a:	bf00      	nop
 802c91c:	dfbffffe 	.word	0xdfbffffe

0802c920 <_fflush_r>:
 802c920:	b538      	push	{r3, r4, r5, lr}
 802c922:	460c      	mov	r4, r1
 802c924:	4605      	mov	r5, r0
 802c926:	b118      	cbz	r0, 802c930 <_fflush_r+0x10>
 802c928:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c92a:	b90b      	cbnz	r3, 802c930 <_fflush_r+0x10>
 802c92c:	f000 f93a 	bl	802cba4 <__sinit>
 802c930:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802c934:	b1b8      	cbz	r0, 802c966 <_fflush_r+0x46>
 802c936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c938:	07db      	lsls	r3, r3, #31
 802c93a:	d404      	bmi.n	802c946 <_fflush_r+0x26>
 802c93c:	0581      	lsls	r1, r0, #22
 802c93e:	d402      	bmi.n	802c946 <_fflush_r+0x26>
 802c940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c942:	f001 fe0e 	bl	802e562 <__retarget_lock_acquire_recursive>
 802c946:	4628      	mov	r0, r5
 802c948:	4621      	mov	r1, r4
 802c94a:	f7ff ff61 	bl	802c810 <__sflush_r>
 802c94e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c950:	07da      	lsls	r2, r3, #31
 802c952:	4605      	mov	r5, r0
 802c954:	d405      	bmi.n	802c962 <_fflush_r+0x42>
 802c956:	89a3      	ldrh	r3, [r4, #12]
 802c958:	059b      	lsls	r3, r3, #22
 802c95a:	d402      	bmi.n	802c962 <_fflush_r+0x42>
 802c95c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c95e:	f001 fe02 	bl	802e566 <__retarget_lock_release_recursive>
 802c962:	4628      	mov	r0, r5
 802c964:	bd38      	pop	{r3, r4, r5, pc}
 802c966:	4605      	mov	r5, r0
 802c968:	e7fb      	b.n	802c962 <_fflush_r+0x42>
	...

0802c96c <sprintf>:
 802c96c:	b40e      	push	{r1, r2, r3}
 802c96e:	b500      	push	{lr}
 802c970:	b09c      	sub	sp, #112	@ 0x70
 802c972:	ab1d      	add	r3, sp, #116	@ 0x74
 802c974:	9002      	str	r0, [sp, #8]
 802c976:	9006      	str	r0, [sp, #24]
 802c978:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802c97c:	4809      	ldr	r0, [pc, #36]	@ (802c9a4 <sprintf+0x38>)
 802c97e:	9107      	str	r1, [sp, #28]
 802c980:	9104      	str	r1, [sp, #16]
 802c982:	4909      	ldr	r1, [pc, #36]	@ (802c9a8 <sprintf+0x3c>)
 802c984:	f853 2b04 	ldr.w	r2, [r3], #4
 802c988:	9105      	str	r1, [sp, #20]
 802c98a:	6800      	ldr	r0, [r0, #0]
 802c98c:	9301      	str	r3, [sp, #4]
 802c98e:	a902      	add	r1, sp, #8
 802c990:	f004 fd26 	bl	80313e0 <_svfprintf_r>
 802c994:	9b02      	ldr	r3, [sp, #8]
 802c996:	2200      	movs	r2, #0
 802c998:	701a      	strb	r2, [r3, #0]
 802c99a:	b01c      	add	sp, #112	@ 0x70
 802c99c:	f85d eb04 	ldr.w	lr, [sp], #4
 802c9a0:	b003      	add	sp, #12
 802c9a2:	4770      	bx	lr
 802c9a4:	200002d8 	.word	0x200002d8
 802c9a8:	ffff0208 	.word	0xffff0208

0802c9ac <sscanf>:
 802c9ac:	b40e      	push	{r1, r2, r3}
 802c9ae:	b530      	push	{r4, r5, lr}
 802c9b0:	b09c      	sub	sp, #112	@ 0x70
 802c9b2:	ac1f      	add	r4, sp, #124	@ 0x7c
 802c9b4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802c9b8:	f854 5b04 	ldr.w	r5, [r4], #4
 802c9bc:	f8ad 2014 	strh.w	r2, [sp, #20]
 802c9c0:	9002      	str	r0, [sp, #8]
 802c9c2:	9006      	str	r0, [sp, #24]
 802c9c4:	f7e3 fc6c 	bl	80102a0 <strlen>
 802c9c8:	4b0b      	ldr	r3, [pc, #44]	@ (802c9f8 <sscanf+0x4c>)
 802c9ca:	9003      	str	r0, [sp, #12]
 802c9cc:	9007      	str	r0, [sp, #28]
 802c9ce:	930a      	str	r3, [sp, #40]	@ 0x28
 802c9d0:	480a      	ldr	r0, [pc, #40]	@ (802c9fc <sscanf+0x50>)
 802c9d2:	9401      	str	r4, [sp, #4]
 802c9d4:	2300      	movs	r3, #0
 802c9d6:	930e      	str	r3, [sp, #56]	@ 0x38
 802c9d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 802c9da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c9de:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c9e2:	462a      	mov	r2, r5
 802c9e4:	4623      	mov	r3, r4
 802c9e6:	a902      	add	r1, sp, #8
 802c9e8:	6800      	ldr	r0, [r0, #0]
 802c9ea:	f005 ff3b 	bl	8032864 <__ssvfscanf_r>
 802c9ee:	b01c      	add	sp, #112	@ 0x70
 802c9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c9f4:	b003      	add	sp, #12
 802c9f6:	4770      	bx	lr
 802c9f8:	0802ca23 	.word	0x0802ca23
 802c9fc:	200002d8 	.word	0x200002d8

0802ca00 <__sread>:
 802ca00:	b510      	push	{r4, lr}
 802ca02:	460c      	mov	r4, r1
 802ca04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ca08:	f001 fd52 	bl	802e4b0 <_read_r>
 802ca0c:	2800      	cmp	r0, #0
 802ca0e:	bfab      	itete	ge
 802ca10:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802ca12:	89a3      	ldrhlt	r3, [r4, #12]
 802ca14:	181b      	addge	r3, r3, r0
 802ca16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802ca1a:	bfac      	ite	ge
 802ca1c:	6523      	strge	r3, [r4, #80]	@ 0x50
 802ca1e:	81a3      	strhlt	r3, [r4, #12]
 802ca20:	bd10      	pop	{r4, pc}

0802ca22 <__seofread>:
 802ca22:	2000      	movs	r0, #0
 802ca24:	4770      	bx	lr

0802ca26 <__swrite>:
 802ca26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ca2a:	461f      	mov	r7, r3
 802ca2c:	898b      	ldrh	r3, [r1, #12]
 802ca2e:	05db      	lsls	r3, r3, #23
 802ca30:	4605      	mov	r5, r0
 802ca32:	460c      	mov	r4, r1
 802ca34:	4616      	mov	r6, r2
 802ca36:	d505      	bpl.n	802ca44 <__swrite+0x1e>
 802ca38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ca3c:	2302      	movs	r3, #2
 802ca3e:	2200      	movs	r2, #0
 802ca40:	f001 fd24 	bl	802e48c <_lseek_r>
 802ca44:	89a3      	ldrh	r3, [r4, #12]
 802ca46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ca4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802ca4e:	81a3      	strh	r3, [r4, #12]
 802ca50:	4632      	mov	r2, r6
 802ca52:	463b      	mov	r3, r7
 802ca54:	4628      	mov	r0, r5
 802ca56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ca5a:	f001 bd3b 	b.w	802e4d4 <_write_r>

0802ca5e <__sseek>:
 802ca5e:	b510      	push	{r4, lr}
 802ca60:	460c      	mov	r4, r1
 802ca62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ca66:	f001 fd11 	bl	802e48c <_lseek_r>
 802ca6a:	1c43      	adds	r3, r0, #1
 802ca6c:	89a3      	ldrh	r3, [r4, #12]
 802ca6e:	bf15      	itete	ne
 802ca70:	6520      	strne	r0, [r4, #80]	@ 0x50
 802ca72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802ca76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802ca7a:	81a3      	strheq	r3, [r4, #12]
 802ca7c:	bf18      	it	ne
 802ca7e:	81a3      	strhne	r3, [r4, #12]
 802ca80:	bd10      	pop	{r4, pc}

0802ca82 <__sclose>:
 802ca82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ca86:	f001 bcc5 	b.w	802e414 <_close_r>
	...

0802ca8c <std>:
 802ca8c:	2300      	movs	r3, #0
 802ca8e:	b510      	push	{r4, lr}
 802ca90:	4604      	mov	r4, r0
 802ca92:	e9c0 3300 	strd	r3, r3, [r0]
 802ca96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802ca9a:	6083      	str	r3, [r0, #8]
 802ca9c:	8181      	strh	r1, [r0, #12]
 802ca9e:	6643      	str	r3, [r0, #100]	@ 0x64
 802caa0:	81c2      	strh	r2, [r0, #14]
 802caa2:	6183      	str	r3, [r0, #24]
 802caa4:	4619      	mov	r1, r3
 802caa6:	2208      	movs	r2, #8
 802caa8:	305c      	adds	r0, #92	@ 0x5c
 802caaa:	f000 fb21 	bl	802d0f0 <memset>
 802caae:	4b0d      	ldr	r3, [pc, #52]	@ (802cae4 <std+0x58>)
 802cab0:	6223      	str	r3, [r4, #32]
 802cab2:	4b0d      	ldr	r3, [pc, #52]	@ (802cae8 <std+0x5c>)
 802cab4:	6263      	str	r3, [r4, #36]	@ 0x24
 802cab6:	4b0d      	ldr	r3, [pc, #52]	@ (802caec <std+0x60>)
 802cab8:	62a3      	str	r3, [r4, #40]	@ 0x28
 802caba:	4b0d      	ldr	r3, [pc, #52]	@ (802caf0 <std+0x64>)
 802cabc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802cabe:	4b0d      	ldr	r3, [pc, #52]	@ (802caf4 <std+0x68>)
 802cac0:	61e4      	str	r4, [r4, #28]
 802cac2:	429c      	cmp	r4, r3
 802cac4:	d006      	beq.n	802cad4 <std+0x48>
 802cac6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802caca:	4294      	cmp	r4, r2
 802cacc:	d002      	beq.n	802cad4 <std+0x48>
 802cace:	33d0      	adds	r3, #208	@ 0xd0
 802cad0:	429c      	cmp	r4, r3
 802cad2:	d105      	bne.n	802cae0 <std+0x54>
 802cad4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802cad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cadc:	f001 bd3e 	b.w	802e55c <__retarget_lock_init_recursive>
 802cae0:	bd10      	pop	{r4, pc}
 802cae2:	bf00      	nop
 802cae4:	0802ca01 	.word	0x0802ca01
 802cae8:	0802ca27 	.word	0x0802ca27
 802caec:	0802ca5f 	.word	0x0802ca5f
 802caf0:	0802ca83 	.word	0x0802ca83
 802caf4:	20019f84 	.word	0x20019f84

0802caf8 <stdio_exit_handler>:
 802caf8:	4a02      	ldr	r2, [pc, #8]	@ (802cb04 <stdio_exit_handler+0xc>)
 802cafa:	4903      	ldr	r1, [pc, #12]	@ (802cb08 <stdio_exit_handler+0x10>)
 802cafc:	4803      	ldr	r0, [pc, #12]	@ (802cb0c <stdio_exit_handler+0x14>)
 802cafe:	f000 b9ef 	b.w	802cee0 <_fwalk_sglue>
 802cb02:	bf00      	nop
 802cb04:	20000158 	.word	0x20000158
 802cb08:	080344a1 	.word	0x080344a1
 802cb0c:	200002e0 	.word	0x200002e0

0802cb10 <cleanup_stdio>:
 802cb10:	6841      	ldr	r1, [r0, #4]
 802cb12:	4b0c      	ldr	r3, [pc, #48]	@ (802cb44 <cleanup_stdio+0x34>)
 802cb14:	4299      	cmp	r1, r3
 802cb16:	b510      	push	{r4, lr}
 802cb18:	4604      	mov	r4, r0
 802cb1a:	d001      	beq.n	802cb20 <cleanup_stdio+0x10>
 802cb1c:	f007 fcc0 	bl	80344a0 <_fclose_r>
 802cb20:	68a1      	ldr	r1, [r4, #8]
 802cb22:	4b09      	ldr	r3, [pc, #36]	@ (802cb48 <cleanup_stdio+0x38>)
 802cb24:	4299      	cmp	r1, r3
 802cb26:	d002      	beq.n	802cb2e <cleanup_stdio+0x1e>
 802cb28:	4620      	mov	r0, r4
 802cb2a:	f007 fcb9 	bl	80344a0 <_fclose_r>
 802cb2e:	68e1      	ldr	r1, [r4, #12]
 802cb30:	4b06      	ldr	r3, [pc, #24]	@ (802cb4c <cleanup_stdio+0x3c>)
 802cb32:	4299      	cmp	r1, r3
 802cb34:	d004      	beq.n	802cb40 <cleanup_stdio+0x30>
 802cb36:	4620      	mov	r0, r4
 802cb38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cb3c:	f007 bcb0 	b.w	80344a0 <_fclose_r>
 802cb40:	bd10      	pop	{r4, pc}
 802cb42:	bf00      	nop
 802cb44:	20019f84 	.word	0x20019f84
 802cb48:	20019fec 	.word	0x20019fec
 802cb4c:	2001a054 	.word	0x2001a054

0802cb50 <global_stdio_init.part.0>:
 802cb50:	b510      	push	{r4, lr}
 802cb52:	4b0b      	ldr	r3, [pc, #44]	@ (802cb80 <global_stdio_init.part.0+0x30>)
 802cb54:	4c0b      	ldr	r4, [pc, #44]	@ (802cb84 <global_stdio_init.part.0+0x34>)
 802cb56:	4a0c      	ldr	r2, [pc, #48]	@ (802cb88 <global_stdio_init.part.0+0x38>)
 802cb58:	601a      	str	r2, [r3, #0]
 802cb5a:	4620      	mov	r0, r4
 802cb5c:	2200      	movs	r2, #0
 802cb5e:	2104      	movs	r1, #4
 802cb60:	f7ff ff94 	bl	802ca8c <std>
 802cb64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802cb68:	2201      	movs	r2, #1
 802cb6a:	2109      	movs	r1, #9
 802cb6c:	f7ff ff8e 	bl	802ca8c <std>
 802cb70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802cb74:	2202      	movs	r2, #2
 802cb76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cb7a:	2112      	movs	r1, #18
 802cb7c:	f7ff bf86 	b.w	802ca8c <std>
 802cb80:	2001a0bc 	.word	0x2001a0bc
 802cb84:	20019f84 	.word	0x20019f84
 802cb88:	0802caf9 	.word	0x0802caf9

0802cb8c <__sfp_lock_acquire>:
 802cb8c:	4801      	ldr	r0, [pc, #4]	@ (802cb94 <__sfp_lock_acquire+0x8>)
 802cb8e:	f001 bce8 	b.w	802e562 <__retarget_lock_acquire_recursive>
 802cb92:	bf00      	nop
 802cb94:	2001a0ec 	.word	0x2001a0ec

0802cb98 <__sfp_lock_release>:
 802cb98:	4801      	ldr	r0, [pc, #4]	@ (802cba0 <__sfp_lock_release+0x8>)
 802cb9a:	f001 bce4 	b.w	802e566 <__retarget_lock_release_recursive>
 802cb9e:	bf00      	nop
 802cba0:	2001a0ec 	.word	0x2001a0ec

0802cba4 <__sinit>:
 802cba4:	b510      	push	{r4, lr}
 802cba6:	4604      	mov	r4, r0
 802cba8:	f7ff fff0 	bl	802cb8c <__sfp_lock_acquire>
 802cbac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802cbae:	b11b      	cbz	r3, 802cbb8 <__sinit+0x14>
 802cbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cbb4:	f7ff bff0 	b.w	802cb98 <__sfp_lock_release>
 802cbb8:	4b04      	ldr	r3, [pc, #16]	@ (802cbcc <__sinit+0x28>)
 802cbba:	6363      	str	r3, [r4, #52]	@ 0x34
 802cbbc:	4b04      	ldr	r3, [pc, #16]	@ (802cbd0 <__sinit+0x2c>)
 802cbbe:	681b      	ldr	r3, [r3, #0]
 802cbc0:	2b00      	cmp	r3, #0
 802cbc2:	d1f5      	bne.n	802cbb0 <__sinit+0xc>
 802cbc4:	f7ff ffc4 	bl	802cb50 <global_stdio_init.part.0>
 802cbc8:	e7f2      	b.n	802cbb0 <__sinit+0xc>
 802cbca:	bf00      	nop
 802cbcc:	0802cb11 	.word	0x0802cb11
 802cbd0:	2001a0bc 	.word	0x2001a0bc

0802cbd4 <_vsnprintf_r>:
 802cbd4:	b530      	push	{r4, r5, lr}
 802cbd6:	4614      	mov	r4, r2
 802cbd8:	2c00      	cmp	r4, #0
 802cbda:	b09b      	sub	sp, #108	@ 0x6c
 802cbdc:	4605      	mov	r5, r0
 802cbde:	461a      	mov	r2, r3
 802cbe0:	da05      	bge.n	802cbee <_vsnprintf_r+0x1a>
 802cbe2:	238b      	movs	r3, #139	@ 0x8b
 802cbe4:	6003      	str	r3, [r0, #0]
 802cbe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802cbea:	b01b      	add	sp, #108	@ 0x6c
 802cbec:	bd30      	pop	{r4, r5, pc}
 802cbee:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802cbf2:	f8ad 300c 	strh.w	r3, [sp, #12]
 802cbf6:	bf14      	ite	ne
 802cbf8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802cbfc:	4623      	moveq	r3, r4
 802cbfe:	9302      	str	r3, [sp, #8]
 802cc00:	9305      	str	r3, [sp, #20]
 802cc02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802cc06:	9100      	str	r1, [sp, #0]
 802cc08:	9104      	str	r1, [sp, #16]
 802cc0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802cc0e:	4669      	mov	r1, sp
 802cc10:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802cc12:	f004 fbe5 	bl	80313e0 <_svfprintf_r>
 802cc16:	1c43      	adds	r3, r0, #1
 802cc18:	bfbc      	itt	lt
 802cc1a:	238b      	movlt	r3, #139	@ 0x8b
 802cc1c:	602b      	strlt	r3, [r5, #0]
 802cc1e:	2c00      	cmp	r4, #0
 802cc20:	d0e3      	beq.n	802cbea <_vsnprintf_r+0x16>
 802cc22:	9b00      	ldr	r3, [sp, #0]
 802cc24:	2200      	movs	r2, #0
 802cc26:	701a      	strb	r2, [r3, #0]
 802cc28:	e7df      	b.n	802cbea <_vsnprintf_r+0x16>
	...

0802cc2c <vsnprintf>:
 802cc2c:	b507      	push	{r0, r1, r2, lr}
 802cc2e:	9300      	str	r3, [sp, #0]
 802cc30:	4613      	mov	r3, r2
 802cc32:	460a      	mov	r2, r1
 802cc34:	4601      	mov	r1, r0
 802cc36:	4803      	ldr	r0, [pc, #12]	@ (802cc44 <vsnprintf+0x18>)
 802cc38:	6800      	ldr	r0, [r0, #0]
 802cc3a:	f7ff ffcb 	bl	802cbd4 <_vsnprintf_r>
 802cc3e:	b003      	add	sp, #12
 802cc40:	f85d fb04 	ldr.w	pc, [sp], #4
 802cc44:	200002d8 	.word	0x200002d8

0802cc48 <__sfvwrite_r>:
 802cc48:	6893      	ldr	r3, [r2, #8]
 802cc4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cc4e:	4606      	mov	r6, r0
 802cc50:	460c      	mov	r4, r1
 802cc52:	4691      	mov	r9, r2
 802cc54:	b91b      	cbnz	r3, 802cc5e <__sfvwrite_r+0x16>
 802cc56:	2000      	movs	r0, #0
 802cc58:	b003      	add	sp, #12
 802cc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cc5e:	898b      	ldrh	r3, [r1, #12]
 802cc60:	0718      	lsls	r0, r3, #28
 802cc62:	d550      	bpl.n	802cd06 <__sfvwrite_r+0xbe>
 802cc64:	690b      	ldr	r3, [r1, #16]
 802cc66:	2b00      	cmp	r3, #0
 802cc68:	d04d      	beq.n	802cd06 <__sfvwrite_r+0xbe>
 802cc6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cc6e:	f8d9 8000 	ldr.w	r8, [r9]
 802cc72:	f013 0702 	ands.w	r7, r3, #2
 802cc76:	d16b      	bne.n	802cd50 <__sfvwrite_r+0x108>
 802cc78:	f013 0301 	ands.w	r3, r3, #1
 802cc7c:	f000 809c 	beq.w	802cdb8 <__sfvwrite_r+0x170>
 802cc80:	4638      	mov	r0, r7
 802cc82:	46ba      	mov	sl, r7
 802cc84:	46bb      	mov	fp, r7
 802cc86:	f1bb 0f00 	cmp.w	fp, #0
 802cc8a:	f000 8103 	beq.w	802ce94 <__sfvwrite_r+0x24c>
 802cc8e:	b950      	cbnz	r0, 802cca6 <__sfvwrite_r+0x5e>
 802cc90:	465a      	mov	r2, fp
 802cc92:	210a      	movs	r1, #10
 802cc94:	4650      	mov	r0, sl
 802cc96:	f7e3 fab3 	bl	8010200 <memchr>
 802cc9a:	2800      	cmp	r0, #0
 802cc9c:	f000 8100 	beq.w	802cea0 <__sfvwrite_r+0x258>
 802cca0:	3001      	adds	r0, #1
 802cca2:	eba0 070a 	sub.w	r7, r0, sl
 802cca6:	6820      	ldr	r0, [r4, #0]
 802cca8:	6921      	ldr	r1, [r4, #16]
 802ccaa:	68a5      	ldr	r5, [r4, #8]
 802ccac:	6963      	ldr	r3, [r4, #20]
 802ccae:	455f      	cmp	r7, fp
 802ccb0:	463a      	mov	r2, r7
 802ccb2:	bf28      	it	cs
 802ccb4:	465a      	movcs	r2, fp
 802ccb6:	4288      	cmp	r0, r1
 802ccb8:	f240 80f5 	bls.w	802cea6 <__sfvwrite_r+0x25e>
 802ccbc:	441d      	add	r5, r3
 802ccbe:	42aa      	cmp	r2, r5
 802ccc0:	f340 80f1 	ble.w	802cea6 <__sfvwrite_r+0x25e>
 802ccc4:	4651      	mov	r1, sl
 802ccc6:	462a      	mov	r2, r5
 802ccc8:	f000 f9f8 	bl	802d0bc <memmove>
 802cccc:	6823      	ldr	r3, [r4, #0]
 802ccce:	442b      	add	r3, r5
 802ccd0:	6023      	str	r3, [r4, #0]
 802ccd2:	4621      	mov	r1, r4
 802ccd4:	4630      	mov	r0, r6
 802ccd6:	f7ff fe23 	bl	802c920 <_fflush_r>
 802ccda:	2800      	cmp	r0, #0
 802ccdc:	d167      	bne.n	802cdae <__sfvwrite_r+0x166>
 802ccde:	1b7f      	subs	r7, r7, r5
 802cce0:	f040 80f9 	bne.w	802ced6 <__sfvwrite_r+0x28e>
 802cce4:	4621      	mov	r1, r4
 802cce6:	4630      	mov	r0, r6
 802cce8:	f7ff fe1a 	bl	802c920 <_fflush_r>
 802ccec:	2800      	cmp	r0, #0
 802ccee:	d15e      	bne.n	802cdae <__sfvwrite_r+0x166>
 802ccf0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802ccf4:	1b5b      	subs	r3, r3, r5
 802ccf6:	44aa      	add	sl, r5
 802ccf8:	ebab 0b05 	sub.w	fp, fp, r5
 802ccfc:	f8c9 3008 	str.w	r3, [r9, #8]
 802cd00:	2b00      	cmp	r3, #0
 802cd02:	d1c0      	bne.n	802cc86 <__sfvwrite_r+0x3e>
 802cd04:	e7a7      	b.n	802cc56 <__sfvwrite_r+0xe>
 802cd06:	4621      	mov	r1, r4
 802cd08:	4630      	mov	r0, r6
 802cd0a:	f000 f907 	bl	802cf1c <__swsetup_r>
 802cd0e:	2800      	cmp	r0, #0
 802cd10:	d0ab      	beq.n	802cc6a <__sfvwrite_r+0x22>
 802cd12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802cd16:	e79f      	b.n	802cc58 <__sfvwrite_r+0x10>
 802cd18:	e9d8 a500 	ldrd	sl, r5, [r8]
 802cd1c:	f108 0808 	add.w	r8, r8, #8
 802cd20:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 802cd24:	69e1      	ldr	r1, [r4, #28]
 802cd26:	2d00      	cmp	r5, #0
 802cd28:	d0f6      	beq.n	802cd18 <__sfvwrite_r+0xd0>
 802cd2a:	42bd      	cmp	r5, r7
 802cd2c:	462b      	mov	r3, r5
 802cd2e:	4652      	mov	r2, sl
 802cd30:	bf28      	it	cs
 802cd32:	463b      	movcs	r3, r7
 802cd34:	4630      	mov	r0, r6
 802cd36:	47d8      	blx	fp
 802cd38:	2800      	cmp	r0, #0
 802cd3a:	dd38      	ble.n	802cdae <__sfvwrite_r+0x166>
 802cd3c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802cd40:	1a1b      	subs	r3, r3, r0
 802cd42:	4482      	add	sl, r0
 802cd44:	1a2d      	subs	r5, r5, r0
 802cd46:	f8c9 3008 	str.w	r3, [r9, #8]
 802cd4a:	2b00      	cmp	r3, #0
 802cd4c:	d1e8      	bne.n	802cd20 <__sfvwrite_r+0xd8>
 802cd4e:	e782      	b.n	802cc56 <__sfvwrite_r+0xe>
 802cd50:	f04f 0a00 	mov.w	sl, #0
 802cd54:	4f61      	ldr	r7, [pc, #388]	@ (802cedc <__sfvwrite_r+0x294>)
 802cd56:	4655      	mov	r5, sl
 802cd58:	e7e2      	b.n	802cd20 <__sfvwrite_r+0xd8>
 802cd5a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802cd5e:	f108 0808 	add.w	r8, r8, #8
 802cd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cd66:	6820      	ldr	r0, [r4, #0]
 802cd68:	68a2      	ldr	r2, [r4, #8]
 802cd6a:	f1ba 0f00 	cmp.w	sl, #0
 802cd6e:	d0f4      	beq.n	802cd5a <__sfvwrite_r+0x112>
 802cd70:	0599      	lsls	r1, r3, #22
 802cd72:	d563      	bpl.n	802ce3c <__sfvwrite_r+0x1f4>
 802cd74:	4552      	cmp	r2, sl
 802cd76:	d836      	bhi.n	802cde6 <__sfvwrite_r+0x19e>
 802cd78:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802cd7c:	d033      	beq.n	802cde6 <__sfvwrite_r+0x19e>
 802cd7e:	6921      	ldr	r1, [r4, #16]
 802cd80:	6965      	ldr	r5, [r4, #20]
 802cd82:	eba0 0b01 	sub.w	fp, r0, r1
 802cd86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802cd8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802cd8e:	f10b 0201 	add.w	r2, fp, #1
 802cd92:	106d      	asrs	r5, r5, #1
 802cd94:	4452      	add	r2, sl
 802cd96:	4295      	cmp	r5, r2
 802cd98:	bf38      	it	cc
 802cd9a:	4615      	movcc	r5, r2
 802cd9c:	055b      	lsls	r3, r3, #21
 802cd9e:	d53d      	bpl.n	802ce1c <__sfvwrite_r+0x1d4>
 802cda0:	4629      	mov	r1, r5
 802cda2:	4630      	mov	r0, r6
 802cda4:	f002 fbfa 	bl	802f59c <_malloc_r>
 802cda8:	b948      	cbnz	r0, 802cdbe <__sfvwrite_r+0x176>
 802cdaa:	230c      	movs	r3, #12
 802cdac:	6033      	str	r3, [r6, #0]
 802cdae:	89a3      	ldrh	r3, [r4, #12]
 802cdb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802cdb4:	81a3      	strh	r3, [r4, #12]
 802cdb6:	e7ac      	b.n	802cd12 <__sfvwrite_r+0xca>
 802cdb8:	461f      	mov	r7, r3
 802cdba:	469a      	mov	sl, r3
 802cdbc:	e7d1      	b.n	802cd62 <__sfvwrite_r+0x11a>
 802cdbe:	465a      	mov	r2, fp
 802cdc0:	6921      	ldr	r1, [r4, #16]
 802cdc2:	9001      	str	r0, [sp, #4]
 802cdc4:	f001 fbd0 	bl	802e568 <memcpy>
 802cdc8:	89a2      	ldrh	r2, [r4, #12]
 802cdca:	9b01      	ldr	r3, [sp, #4]
 802cdcc:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802cdd0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802cdd4:	81a2      	strh	r2, [r4, #12]
 802cdd6:	6123      	str	r3, [r4, #16]
 802cdd8:	6165      	str	r5, [r4, #20]
 802cdda:	445b      	add	r3, fp
 802cddc:	eba5 050b 	sub.w	r5, r5, fp
 802cde0:	6023      	str	r3, [r4, #0]
 802cde2:	4652      	mov	r2, sl
 802cde4:	60a5      	str	r5, [r4, #8]
 802cde6:	4552      	cmp	r2, sl
 802cde8:	bf28      	it	cs
 802cdea:	4652      	movcs	r2, sl
 802cdec:	6820      	ldr	r0, [r4, #0]
 802cdee:	9201      	str	r2, [sp, #4]
 802cdf0:	4639      	mov	r1, r7
 802cdf2:	f000 f963 	bl	802d0bc <memmove>
 802cdf6:	68a3      	ldr	r3, [r4, #8]
 802cdf8:	9a01      	ldr	r2, [sp, #4]
 802cdfa:	1a9b      	subs	r3, r3, r2
 802cdfc:	60a3      	str	r3, [r4, #8]
 802cdfe:	6823      	ldr	r3, [r4, #0]
 802ce00:	4413      	add	r3, r2
 802ce02:	4655      	mov	r5, sl
 802ce04:	6023      	str	r3, [r4, #0]
 802ce06:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802ce0a:	1b5b      	subs	r3, r3, r5
 802ce0c:	442f      	add	r7, r5
 802ce0e:	ebaa 0a05 	sub.w	sl, sl, r5
 802ce12:	f8c9 3008 	str.w	r3, [r9, #8]
 802ce16:	2b00      	cmp	r3, #0
 802ce18:	d1a3      	bne.n	802cd62 <__sfvwrite_r+0x11a>
 802ce1a:	e71c      	b.n	802cc56 <__sfvwrite_r+0xe>
 802ce1c:	462a      	mov	r2, r5
 802ce1e:	4630      	mov	r0, r6
 802ce20:	f007 fbcc 	bl	80345bc <_realloc_r>
 802ce24:	4603      	mov	r3, r0
 802ce26:	2800      	cmp	r0, #0
 802ce28:	d1d5      	bne.n	802cdd6 <__sfvwrite_r+0x18e>
 802ce2a:	6921      	ldr	r1, [r4, #16]
 802ce2c:	4630      	mov	r0, r6
 802ce2e:	f002 fa9d 	bl	802f36c <_free_r>
 802ce32:	89a3      	ldrh	r3, [r4, #12]
 802ce34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802ce38:	81a3      	strh	r3, [r4, #12]
 802ce3a:	e7b6      	b.n	802cdaa <__sfvwrite_r+0x162>
 802ce3c:	6923      	ldr	r3, [r4, #16]
 802ce3e:	4283      	cmp	r3, r0
 802ce40:	d302      	bcc.n	802ce48 <__sfvwrite_r+0x200>
 802ce42:	6961      	ldr	r1, [r4, #20]
 802ce44:	4551      	cmp	r1, sl
 802ce46:	d915      	bls.n	802ce74 <__sfvwrite_r+0x22c>
 802ce48:	4552      	cmp	r2, sl
 802ce4a:	bf28      	it	cs
 802ce4c:	4652      	movcs	r2, sl
 802ce4e:	4639      	mov	r1, r7
 802ce50:	4615      	mov	r5, r2
 802ce52:	f000 f933 	bl	802d0bc <memmove>
 802ce56:	68a3      	ldr	r3, [r4, #8]
 802ce58:	6822      	ldr	r2, [r4, #0]
 802ce5a:	1b5b      	subs	r3, r3, r5
 802ce5c:	442a      	add	r2, r5
 802ce5e:	60a3      	str	r3, [r4, #8]
 802ce60:	6022      	str	r2, [r4, #0]
 802ce62:	2b00      	cmp	r3, #0
 802ce64:	d1cf      	bne.n	802ce06 <__sfvwrite_r+0x1be>
 802ce66:	4621      	mov	r1, r4
 802ce68:	4630      	mov	r0, r6
 802ce6a:	f7ff fd59 	bl	802c920 <_fflush_r>
 802ce6e:	2800      	cmp	r0, #0
 802ce70:	d0c9      	beq.n	802ce06 <__sfvwrite_r+0x1be>
 802ce72:	e79c      	b.n	802cdae <__sfvwrite_r+0x166>
 802ce74:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802ce78:	4553      	cmp	r3, sl
 802ce7a:	bf28      	it	cs
 802ce7c:	4653      	movcs	r3, sl
 802ce7e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802ce80:	fb93 f3f1 	sdiv	r3, r3, r1
 802ce84:	463a      	mov	r2, r7
 802ce86:	434b      	muls	r3, r1
 802ce88:	4630      	mov	r0, r6
 802ce8a:	69e1      	ldr	r1, [r4, #28]
 802ce8c:	47a8      	blx	r5
 802ce8e:	1e05      	subs	r5, r0, #0
 802ce90:	dcb9      	bgt.n	802ce06 <__sfvwrite_r+0x1be>
 802ce92:	e78c      	b.n	802cdae <__sfvwrite_r+0x166>
 802ce94:	e9d8 ab00 	ldrd	sl, fp, [r8]
 802ce98:	2000      	movs	r0, #0
 802ce9a:	f108 0808 	add.w	r8, r8, #8
 802ce9e:	e6f2      	b.n	802cc86 <__sfvwrite_r+0x3e>
 802cea0:	f10b 0701 	add.w	r7, fp, #1
 802cea4:	e6ff      	b.n	802cca6 <__sfvwrite_r+0x5e>
 802cea6:	4293      	cmp	r3, r2
 802cea8:	dc08      	bgt.n	802cebc <__sfvwrite_r+0x274>
 802ceaa:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802ceac:	69e1      	ldr	r1, [r4, #28]
 802ceae:	4652      	mov	r2, sl
 802ceb0:	4630      	mov	r0, r6
 802ceb2:	47a8      	blx	r5
 802ceb4:	1e05      	subs	r5, r0, #0
 802ceb6:	f73f af12 	bgt.w	802ccde <__sfvwrite_r+0x96>
 802ceba:	e778      	b.n	802cdae <__sfvwrite_r+0x166>
 802cebc:	4651      	mov	r1, sl
 802cebe:	9201      	str	r2, [sp, #4]
 802cec0:	f000 f8fc 	bl	802d0bc <memmove>
 802cec4:	9a01      	ldr	r2, [sp, #4]
 802cec6:	68a3      	ldr	r3, [r4, #8]
 802cec8:	1a9b      	subs	r3, r3, r2
 802ceca:	60a3      	str	r3, [r4, #8]
 802cecc:	6823      	ldr	r3, [r4, #0]
 802cece:	4413      	add	r3, r2
 802ced0:	6023      	str	r3, [r4, #0]
 802ced2:	4615      	mov	r5, r2
 802ced4:	e703      	b.n	802ccde <__sfvwrite_r+0x96>
 802ced6:	2001      	movs	r0, #1
 802ced8:	e70a      	b.n	802ccf0 <__sfvwrite_r+0xa8>
 802ceda:	bf00      	nop
 802cedc:	7ffffc00 	.word	0x7ffffc00

0802cee0 <_fwalk_sglue>:
 802cee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cee4:	4607      	mov	r7, r0
 802cee6:	4688      	mov	r8, r1
 802cee8:	4614      	mov	r4, r2
 802ceea:	2600      	movs	r6, #0
 802ceec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802cef0:	f1b9 0901 	subs.w	r9, r9, #1
 802cef4:	d505      	bpl.n	802cf02 <_fwalk_sglue+0x22>
 802cef6:	6824      	ldr	r4, [r4, #0]
 802cef8:	2c00      	cmp	r4, #0
 802cefa:	d1f7      	bne.n	802ceec <_fwalk_sglue+0xc>
 802cefc:	4630      	mov	r0, r6
 802cefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cf02:	89ab      	ldrh	r3, [r5, #12]
 802cf04:	2b01      	cmp	r3, #1
 802cf06:	d907      	bls.n	802cf18 <_fwalk_sglue+0x38>
 802cf08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802cf0c:	3301      	adds	r3, #1
 802cf0e:	d003      	beq.n	802cf18 <_fwalk_sglue+0x38>
 802cf10:	4629      	mov	r1, r5
 802cf12:	4638      	mov	r0, r7
 802cf14:	47c0      	blx	r8
 802cf16:	4306      	orrs	r6, r0
 802cf18:	3568      	adds	r5, #104	@ 0x68
 802cf1a:	e7e9      	b.n	802cef0 <_fwalk_sglue+0x10>

0802cf1c <__swsetup_r>:
 802cf1c:	b538      	push	{r3, r4, r5, lr}
 802cf1e:	4b29      	ldr	r3, [pc, #164]	@ (802cfc4 <__swsetup_r+0xa8>)
 802cf20:	4605      	mov	r5, r0
 802cf22:	6818      	ldr	r0, [r3, #0]
 802cf24:	460c      	mov	r4, r1
 802cf26:	b118      	cbz	r0, 802cf30 <__swsetup_r+0x14>
 802cf28:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802cf2a:	b90b      	cbnz	r3, 802cf30 <__swsetup_r+0x14>
 802cf2c:	f7ff fe3a 	bl	802cba4 <__sinit>
 802cf30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cf34:	0719      	lsls	r1, r3, #28
 802cf36:	d422      	bmi.n	802cf7e <__swsetup_r+0x62>
 802cf38:	06da      	lsls	r2, r3, #27
 802cf3a:	d407      	bmi.n	802cf4c <__swsetup_r+0x30>
 802cf3c:	2209      	movs	r2, #9
 802cf3e:	602a      	str	r2, [r5, #0]
 802cf40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802cf44:	81a3      	strh	r3, [r4, #12]
 802cf46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802cf4a:	e033      	b.n	802cfb4 <__swsetup_r+0x98>
 802cf4c:	0758      	lsls	r0, r3, #29
 802cf4e:	d512      	bpl.n	802cf76 <__swsetup_r+0x5a>
 802cf50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802cf52:	b141      	cbz	r1, 802cf66 <__swsetup_r+0x4a>
 802cf54:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802cf58:	4299      	cmp	r1, r3
 802cf5a:	d002      	beq.n	802cf62 <__swsetup_r+0x46>
 802cf5c:	4628      	mov	r0, r5
 802cf5e:	f002 fa05 	bl	802f36c <_free_r>
 802cf62:	2300      	movs	r3, #0
 802cf64:	6323      	str	r3, [r4, #48]	@ 0x30
 802cf66:	89a3      	ldrh	r3, [r4, #12]
 802cf68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802cf6c:	81a3      	strh	r3, [r4, #12]
 802cf6e:	2300      	movs	r3, #0
 802cf70:	6063      	str	r3, [r4, #4]
 802cf72:	6923      	ldr	r3, [r4, #16]
 802cf74:	6023      	str	r3, [r4, #0]
 802cf76:	89a3      	ldrh	r3, [r4, #12]
 802cf78:	f043 0308 	orr.w	r3, r3, #8
 802cf7c:	81a3      	strh	r3, [r4, #12]
 802cf7e:	6923      	ldr	r3, [r4, #16]
 802cf80:	b94b      	cbnz	r3, 802cf96 <__swsetup_r+0x7a>
 802cf82:	89a3      	ldrh	r3, [r4, #12]
 802cf84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802cf88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802cf8c:	d003      	beq.n	802cf96 <__swsetup_r+0x7a>
 802cf8e:	4621      	mov	r1, r4
 802cf90:	4628      	mov	r0, r5
 802cf92:	f005 fc2b 	bl	80327ec <__smakebuf_r>
 802cf96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cf9a:	f013 0201 	ands.w	r2, r3, #1
 802cf9e:	d00a      	beq.n	802cfb6 <__swsetup_r+0x9a>
 802cfa0:	2200      	movs	r2, #0
 802cfa2:	60a2      	str	r2, [r4, #8]
 802cfa4:	6962      	ldr	r2, [r4, #20]
 802cfa6:	4252      	negs	r2, r2
 802cfa8:	61a2      	str	r2, [r4, #24]
 802cfaa:	6922      	ldr	r2, [r4, #16]
 802cfac:	b942      	cbnz	r2, 802cfc0 <__swsetup_r+0xa4>
 802cfae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802cfb2:	d1c5      	bne.n	802cf40 <__swsetup_r+0x24>
 802cfb4:	bd38      	pop	{r3, r4, r5, pc}
 802cfb6:	0799      	lsls	r1, r3, #30
 802cfb8:	bf58      	it	pl
 802cfba:	6962      	ldrpl	r2, [r4, #20]
 802cfbc:	60a2      	str	r2, [r4, #8]
 802cfbe:	e7f4      	b.n	802cfaa <__swsetup_r+0x8e>
 802cfc0:	2000      	movs	r0, #0
 802cfc2:	e7f7      	b.n	802cfb4 <__swsetup_r+0x98>
 802cfc4:	200002d8 	.word	0x200002d8

0802cfc8 <memcmp>:
 802cfc8:	b510      	push	{r4, lr}
 802cfca:	3901      	subs	r1, #1
 802cfcc:	4402      	add	r2, r0
 802cfce:	4290      	cmp	r0, r2
 802cfd0:	d101      	bne.n	802cfd6 <memcmp+0xe>
 802cfd2:	2000      	movs	r0, #0
 802cfd4:	e005      	b.n	802cfe2 <memcmp+0x1a>
 802cfd6:	7803      	ldrb	r3, [r0, #0]
 802cfd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802cfdc:	42a3      	cmp	r3, r4
 802cfde:	d001      	beq.n	802cfe4 <memcmp+0x1c>
 802cfe0:	1b18      	subs	r0, r3, r4
 802cfe2:	bd10      	pop	{r4, pc}
 802cfe4:	3001      	adds	r0, #1
 802cfe6:	e7f2      	b.n	802cfce <memcmp+0x6>

0802cfe8 <__fputwc>:
 802cfe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802cfec:	4680      	mov	r8, r0
 802cfee:	460f      	mov	r7, r1
 802cff0:	4614      	mov	r4, r2
 802cff2:	f001 fa05 	bl	802e400 <__locale_mb_cur_max>
 802cff6:	2801      	cmp	r0, #1
 802cff8:	4605      	mov	r5, r0
 802cffa:	d11b      	bne.n	802d034 <__fputwc+0x4c>
 802cffc:	1e7b      	subs	r3, r7, #1
 802cffe:	2bfe      	cmp	r3, #254	@ 0xfe
 802d000:	d818      	bhi.n	802d034 <__fputwc+0x4c>
 802d002:	f88d 7004 	strb.w	r7, [sp, #4]
 802d006:	2600      	movs	r6, #0
 802d008:	f10d 0904 	add.w	r9, sp, #4
 802d00c:	42ae      	cmp	r6, r5
 802d00e:	d021      	beq.n	802d054 <__fputwc+0x6c>
 802d010:	68a3      	ldr	r3, [r4, #8]
 802d012:	f816 1009 	ldrb.w	r1, [r6, r9]
 802d016:	3b01      	subs	r3, #1
 802d018:	2b00      	cmp	r3, #0
 802d01a:	60a3      	str	r3, [r4, #8]
 802d01c:	da04      	bge.n	802d028 <__fputwc+0x40>
 802d01e:	69a2      	ldr	r2, [r4, #24]
 802d020:	4293      	cmp	r3, r2
 802d022:	db1b      	blt.n	802d05c <__fputwc+0x74>
 802d024:	290a      	cmp	r1, #10
 802d026:	d019      	beq.n	802d05c <__fputwc+0x74>
 802d028:	6823      	ldr	r3, [r4, #0]
 802d02a:	1c5a      	adds	r2, r3, #1
 802d02c:	6022      	str	r2, [r4, #0]
 802d02e:	7019      	strb	r1, [r3, #0]
 802d030:	3601      	adds	r6, #1
 802d032:	e7eb      	b.n	802d00c <__fputwc+0x24>
 802d034:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 802d038:	463a      	mov	r2, r7
 802d03a:	a901      	add	r1, sp, #4
 802d03c:	4640      	mov	r0, r8
 802d03e:	f001 faa1 	bl	802e584 <_wcrtomb_r>
 802d042:	1c43      	adds	r3, r0, #1
 802d044:	4605      	mov	r5, r0
 802d046:	d1de      	bne.n	802d006 <__fputwc+0x1e>
 802d048:	89a3      	ldrh	r3, [r4, #12]
 802d04a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d04e:	81a3      	strh	r3, [r4, #12]
 802d050:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802d054:	4638      	mov	r0, r7
 802d056:	b003      	add	sp, #12
 802d058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802d05c:	4622      	mov	r2, r4
 802d05e:	4640      	mov	r0, r8
 802d060:	f008 fb1d 	bl	803569e <__swbuf_r>
 802d064:	3001      	adds	r0, #1
 802d066:	d1e3      	bne.n	802d030 <__fputwc+0x48>
 802d068:	e7f2      	b.n	802d050 <__fputwc+0x68>

0802d06a <_fputwc_r>:
 802d06a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 802d06c:	07db      	lsls	r3, r3, #31
 802d06e:	b570      	push	{r4, r5, r6, lr}
 802d070:	4605      	mov	r5, r0
 802d072:	460e      	mov	r6, r1
 802d074:	4614      	mov	r4, r2
 802d076:	d405      	bmi.n	802d084 <_fputwc_r+0x1a>
 802d078:	8993      	ldrh	r3, [r2, #12]
 802d07a:	0598      	lsls	r0, r3, #22
 802d07c:	d402      	bmi.n	802d084 <_fputwc_r+0x1a>
 802d07e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 802d080:	f001 fa6f 	bl	802e562 <__retarget_lock_acquire_recursive>
 802d084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d088:	0499      	lsls	r1, r3, #18
 802d08a:	d406      	bmi.n	802d09a <_fputwc_r+0x30>
 802d08c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802d090:	81a3      	strh	r3, [r4, #12]
 802d092:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d094:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802d098:	6663      	str	r3, [r4, #100]	@ 0x64
 802d09a:	4622      	mov	r2, r4
 802d09c:	4628      	mov	r0, r5
 802d09e:	4631      	mov	r1, r6
 802d0a0:	f7ff ffa2 	bl	802cfe8 <__fputwc>
 802d0a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d0a6:	07da      	lsls	r2, r3, #31
 802d0a8:	4605      	mov	r5, r0
 802d0aa:	d405      	bmi.n	802d0b8 <_fputwc_r+0x4e>
 802d0ac:	89a3      	ldrh	r3, [r4, #12]
 802d0ae:	059b      	lsls	r3, r3, #22
 802d0b0:	d402      	bmi.n	802d0b8 <_fputwc_r+0x4e>
 802d0b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d0b4:	f001 fa57 	bl	802e566 <__retarget_lock_release_recursive>
 802d0b8:	4628      	mov	r0, r5
 802d0ba:	bd70      	pop	{r4, r5, r6, pc}

0802d0bc <memmove>:
 802d0bc:	4288      	cmp	r0, r1
 802d0be:	b510      	push	{r4, lr}
 802d0c0:	eb01 0402 	add.w	r4, r1, r2
 802d0c4:	d902      	bls.n	802d0cc <memmove+0x10>
 802d0c6:	4284      	cmp	r4, r0
 802d0c8:	4623      	mov	r3, r4
 802d0ca:	d807      	bhi.n	802d0dc <memmove+0x20>
 802d0cc:	1e43      	subs	r3, r0, #1
 802d0ce:	42a1      	cmp	r1, r4
 802d0d0:	d008      	beq.n	802d0e4 <memmove+0x28>
 802d0d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d0d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d0da:	e7f8      	b.n	802d0ce <memmove+0x12>
 802d0dc:	4402      	add	r2, r0
 802d0de:	4601      	mov	r1, r0
 802d0e0:	428a      	cmp	r2, r1
 802d0e2:	d100      	bne.n	802d0e6 <memmove+0x2a>
 802d0e4:	bd10      	pop	{r4, pc}
 802d0e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802d0ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802d0ee:	e7f7      	b.n	802d0e0 <memmove+0x24>

0802d0f0 <memset>:
 802d0f0:	4402      	add	r2, r0
 802d0f2:	4603      	mov	r3, r0
 802d0f4:	4293      	cmp	r3, r2
 802d0f6:	d100      	bne.n	802d0fa <memset+0xa>
 802d0f8:	4770      	bx	lr
 802d0fa:	f803 1b01 	strb.w	r1, [r3], #1
 802d0fe:	e7f9      	b.n	802d0f4 <memset+0x4>

0802d100 <strcat>:
 802d100:	b510      	push	{r4, lr}
 802d102:	4602      	mov	r2, r0
 802d104:	7814      	ldrb	r4, [r2, #0]
 802d106:	4613      	mov	r3, r2
 802d108:	3201      	adds	r2, #1
 802d10a:	2c00      	cmp	r4, #0
 802d10c:	d1fa      	bne.n	802d104 <strcat+0x4>
 802d10e:	3b01      	subs	r3, #1
 802d110:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d114:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d118:	2a00      	cmp	r2, #0
 802d11a:	d1f9      	bne.n	802d110 <strcat+0x10>
 802d11c:	bd10      	pop	{r4, pc}

0802d11e <strchr>:
 802d11e:	b2c9      	uxtb	r1, r1
 802d120:	4603      	mov	r3, r0
 802d122:	4618      	mov	r0, r3
 802d124:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d128:	b112      	cbz	r2, 802d130 <strchr+0x12>
 802d12a:	428a      	cmp	r2, r1
 802d12c:	d1f9      	bne.n	802d122 <strchr+0x4>
 802d12e:	4770      	bx	lr
 802d130:	2900      	cmp	r1, #0
 802d132:	bf18      	it	ne
 802d134:	2000      	movne	r0, #0
 802d136:	4770      	bx	lr

0802d138 <strcspn>:
 802d138:	b570      	push	{r4, r5, r6, lr}
 802d13a:	4603      	mov	r3, r0
 802d13c:	461e      	mov	r6, r3
 802d13e:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d142:	b144      	cbz	r4, 802d156 <strcspn+0x1e>
 802d144:	1e4a      	subs	r2, r1, #1
 802d146:	e001      	b.n	802d14c <strcspn+0x14>
 802d148:	42a5      	cmp	r5, r4
 802d14a:	d004      	beq.n	802d156 <strcspn+0x1e>
 802d14c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d150:	2d00      	cmp	r5, #0
 802d152:	d1f9      	bne.n	802d148 <strcspn+0x10>
 802d154:	e7f2      	b.n	802d13c <strcspn+0x4>
 802d156:	1a30      	subs	r0, r6, r0
 802d158:	bd70      	pop	{r4, r5, r6, pc}

0802d15a <strncmp>:
 802d15a:	b510      	push	{r4, lr}
 802d15c:	b16a      	cbz	r2, 802d17a <strncmp+0x20>
 802d15e:	3901      	subs	r1, #1
 802d160:	1884      	adds	r4, r0, r2
 802d162:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d166:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802d16a:	429a      	cmp	r2, r3
 802d16c:	d103      	bne.n	802d176 <strncmp+0x1c>
 802d16e:	42a0      	cmp	r0, r4
 802d170:	d001      	beq.n	802d176 <strncmp+0x1c>
 802d172:	2a00      	cmp	r2, #0
 802d174:	d1f5      	bne.n	802d162 <strncmp+0x8>
 802d176:	1ad0      	subs	r0, r2, r3
 802d178:	bd10      	pop	{r4, pc}
 802d17a:	4610      	mov	r0, r2
 802d17c:	e7fc      	b.n	802d178 <strncmp+0x1e>

0802d17e <strncpy>:
 802d17e:	b510      	push	{r4, lr}
 802d180:	3901      	subs	r1, #1
 802d182:	4603      	mov	r3, r0
 802d184:	b132      	cbz	r2, 802d194 <strncpy+0x16>
 802d186:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d18a:	f803 4b01 	strb.w	r4, [r3], #1
 802d18e:	3a01      	subs	r2, #1
 802d190:	2c00      	cmp	r4, #0
 802d192:	d1f7      	bne.n	802d184 <strncpy+0x6>
 802d194:	441a      	add	r2, r3
 802d196:	2100      	movs	r1, #0
 802d198:	4293      	cmp	r3, r2
 802d19a:	d100      	bne.n	802d19e <strncpy+0x20>
 802d19c:	bd10      	pop	{r4, pc}
 802d19e:	f803 1b01 	strb.w	r1, [r3], #1
 802d1a2:	e7f9      	b.n	802d198 <strncpy+0x1a>

0802d1a4 <strrchr>:
 802d1a4:	b538      	push	{r3, r4, r5, lr}
 802d1a6:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802d1aa:	4603      	mov	r3, r0
 802d1ac:	d10e      	bne.n	802d1cc <strrchr+0x28>
 802d1ae:	4621      	mov	r1, r4
 802d1b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d1b4:	f7ff bfb3 	b.w	802d11e <strchr>
 802d1b8:	1c43      	adds	r3, r0, #1
 802d1ba:	4605      	mov	r5, r0
 802d1bc:	4621      	mov	r1, r4
 802d1be:	4618      	mov	r0, r3
 802d1c0:	f7ff ffad 	bl	802d11e <strchr>
 802d1c4:	2800      	cmp	r0, #0
 802d1c6:	d1f7      	bne.n	802d1b8 <strrchr+0x14>
 802d1c8:	4628      	mov	r0, r5
 802d1ca:	bd38      	pop	{r3, r4, r5, pc}
 802d1cc:	2500      	movs	r5, #0
 802d1ce:	e7f5      	b.n	802d1bc <strrchr+0x18>

0802d1d0 <strspn>:
 802d1d0:	b570      	push	{r4, r5, r6, lr}
 802d1d2:	4603      	mov	r3, r0
 802d1d4:	461e      	mov	r6, r3
 802d1d6:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d1da:	b13c      	cbz	r4, 802d1ec <strspn+0x1c>
 802d1dc:	1e4a      	subs	r2, r1, #1
 802d1de:	e001      	b.n	802d1e4 <strspn+0x14>
 802d1e0:	42a5      	cmp	r5, r4
 802d1e2:	d0f7      	beq.n	802d1d4 <strspn+0x4>
 802d1e4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d1e8:	2d00      	cmp	r5, #0
 802d1ea:	d1f9      	bne.n	802d1e0 <strspn+0x10>
 802d1ec:	1a30      	subs	r0, r6, r0
 802d1ee:	bd70      	pop	{r4, r5, r6, pc}

0802d1f0 <strstr>:
 802d1f0:	780a      	ldrb	r2, [r1, #0]
 802d1f2:	b570      	push	{r4, r5, r6, lr}
 802d1f4:	b96a      	cbnz	r2, 802d212 <strstr+0x22>
 802d1f6:	bd70      	pop	{r4, r5, r6, pc}
 802d1f8:	429a      	cmp	r2, r3
 802d1fa:	d109      	bne.n	802d210 <strstr+0x20>
 802d1fc:	460c      	mov	r4, r1
 802d1fe:	4605      	mov	r5, r0
 802d200:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802d204:	2b00      	cmp	r3, #0
 802d206:	d0f6      	beq.n	802d1f6 <strstr+0x6>
 802d208:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802d20c:	429e      	cmp	r6, r3
 802d20e:	d0f7      	beq.n	802d200 <strstr+0x10>
 802d210:	3001      	adds	r0, #1
 802d212:	7803      	ldrb	r3, [r0, #0]
 802d214:	2b00      	cmp	r3, #0
 802d216:	d1ef      	bne.n	802d1f8 <strstr+0x8>
 802d218:	4618      	mov	r0, r3
 802d21a:	e7ec      	b.n	802d1f6 <strstr+0x6>

0802d21c <localtime_r>:
 802d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d220:	460c      	mov	r4, r1
 802d222:	4680      	mov	r8, r0
 802d224:	f008 fab6 	bl	8035794 <__gettzinfo>
 802d228:	4621      	mov	r1, r4
 802d22a:	4605      	mov	r5, r0
 802d22c:	4640      	mov	r0, r8
 802d22e:	f008 fab5 	bl	803579c <gmtime_r>
 802d232:	6943      	ldr	r3, [r0, #20]
 802d234:	0799      	lsls	r1, r3, #30
 802d236:	4604      	mov	r4, r0
 802d238:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 802d23c:	d106      	bne.n	802d24c <localtime_r+0x30>
 802d23e:	2264      	movs	r2, #100	@ 0x64
 802d240:	fb97 f3f2 	sdiv	r3, r7, r2
 802d244:	fb02 7313 	mls	r3, r2, r3, r7
 802d248:	2b00      	cmp	r3, #0
 802d24a:	d170      	bne.n	802d32e <localtime_r+0x112>
 802d24c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d250:	fb97 f3f2 	sdiv	r3, r7, r2
 802d254:	fb02 7313 	mls	r3, r2, r3, r7
 802d258:	fab3 f383 	clz	r3, r3
 802d25c:	095b      	lsrs	r3, r3, #5
 802d25e:	4e64      	ldr	r6, [pc, #400]	@ (802d3f0 <localtime_r+0x1d4>)
 802d260:	2230      	movs	r2, #48	@ 0x30
 802d262:	fb02 6603 	mla	r6, r2, r3, r6
 802d266:	f000 fe97 	bl	802df98 <__tz_lock>
 802d26a:	f000 fea1 	bl	802dfb0 <_tzset_unlocked>
 802d26e:	4b61      	ldr	r3, [pc, #388]	@ (802d3f4 <localtime_r+0x1d8>)
 802d270:	681b      	ldr	r3, [r3, #0]
 802d272:	2b00      	cmp	r3, #0
 802d274:	d06a      	beq.n	802d34c <localtime_r+0x130>
 802d276:	686b      	ldr	r3, [r5, #4]
 802d278:	42bb      	cmp	r3, r7
 802d27a:	d15a      	bne.n	802d332 <localtime_r+0x116>
 802d27c:	682f      	ldr	r7, [r5, #0]
 802d27e:	e9d8 2300 	ldrd	r2, r3, [r8]
 802d282:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802d286:	2f00      	cmp	r7, #0
 802d288:	d15b      	bne.n	802d342 <localtime_r+0x126>
 802d28a:	4282      	cmp	r2, r0
 802d28c:	eb73 0101 	sbcs.w	r1, r3, r1
 802d290:	db5e      	blt.n	802d350 <localtime_r+0x134>
 802d292:	2301      	movs	r3, #1
 802d294:	6223      	str	r3, [r4, #32]
 802d296:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802d298:	6861      	ldr	r1, [r4, #4]
 802d29a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802d29e:	fb93 f0f2 	sdiv	r0, r3, r2
 802d2a2:	fb02 3310 	mls	r3, r2, r0, r3
 802d2a6:	223c      	movs	r2, #60	@ 0x3c
 802d2a8:	fb93 f5f2 	sdiv	r5, r3, r2
 802d2ac:	fb02 3215 	mls	r2, r2, r5, r3
 802d2b0:	6823      	ldr	r3, [r4, #0]
 802d2b2:	1a9b      	subs	r3, r3, r2
 802d2b4:	68a2      	ldr	r2, [r4, #8]
 802d2b6:	6023      	str	r3, [r4, #0]
 802d2b8:	1b49      	subs	r1, r1, r5
 802d2ba:	1a12      	subs	r2, r2, r0
 802d2bc:	2b3b      	cmp	r3, #59	@ 0x3b
 802d2be:	6061      	str	r1, [r4, #4]
 802d2c0:	60a2      	str	r2, [r4, #8]
 802d2c2:	dd51      	ble.n	802d368 <localtime_r+0x14c>
 802d2c4:	3101      	adds	r1, #1
 802d2c6:	6061      	str	r1, [r4, #4]
 802d2c8:	3b3c      	subs	r3, #60	@ 0x3c
 802d2ca:	6023      	str	r3, [r4, #0]
 802d2cc:	6863      	ldr	r3, [r4, #4]
 802d2ce:	2b3b      	cmp	r3, #59	@ 0x3b
 802d2d0:	dd50      	ble.n	802d374 <localtime_r+0x158>
 802d2d2:	3201      	adds	r2, #1
 802d2d4:	60a2      	str	r2, [r4, #8]
 802d2d6:	3b3c      	subs	r3, #60	@ 0x3c
 802d2d8:	6063      	str	r3, [r4, #4]
 802d2da:	68a3      	ldr	r3, [r4, #8]
 802d2dc:	2b17      	cmp	r3, #23
 802d2de:	dd4f      	ble.n	802d380 <localtime_r+0x164>
 802d2e0:	69e2      	ldr	r2, [r4, #28]
 802d2e2:	3201      	adds	r2, #1
 802d2e4:	61e2      	str	r2, [r4, #28]
 802d2e6:	69a2      	ldr	r2, [r4, #24]
 802d2e8:	3201      	adds	r2, #1
 802d2ea:	2a07      	cmp	r2, #7
 802d2ec:	bfa8      	it	ge
 802d2ee:	2200      	movge	r2, #0
 802d2f0:	61a2      	str	r2, [r4, #24]
 802d2f2:	68e2      	ldr	r2, [r4, #12]
 802d2f4:	3b18      	subs	r3, #24
 802d2f6:	3201      	adds	r2, #1
 802d2f8:	60a3      	str	r3, [r4, #8]
 802d2fa:	6923      	ldr	r3, [r4, #16]
 802d2fc:	60e2      	str	r2, [r4, #12]
 802d2fe:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802d302:	428a      	cmp	r2, r1
 802d304:	dd0e      	ble.n	802d324 <localtime_r+0x108>
 802d306:	2b0b      	cmp	r3, #11
 802d308:	eba2 0201 	sub.w	r2, r2, r1
 802d30c:	60e2      	str	r2, [r4, #12]
 802d30e:	f103 0201 	add.w	r2, r3, #1
 802d312:	bf09      	itett	eq
 802d314:	6963      	ldreq	r3, [r4, #20]
 802d316:	6122      	strne	r2, [r4, #16]
 802d318:	2200      	moveq	r2, #0
 802d31a:	3301      	addeq	r3, #1
 802d31c:	bf02      	ittt	eq
 802d31e:	6122      	streq	r2, [r4, #16]
 802d320:	6163      	streq	r3, [r4, #20]
 802d322:	61e2      	streq	r2, [r4, #28]
 802d324:	f000 fe3e 	bl	802dfa4 <__tz_unlock>
 802d328:	4620      	mov	r0, r4
 802d32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d32e:	2301      	movs	r3, #1
 802d330:	e795      	b.n	802d25e <localtime_r+0x42>
 802d332:	4638      	mov	r0, r7
 802d334:	f000 fd86 	bl	802de44 <__tzcalc_limits>
 802d338:	2800      	cmp	r0, #0
 802d33a:	d19f      	bne.n	802d27c <localtime_r+0x60>
 802d33c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802d340:	e004      	b.n	802d34c <localtime_r+0x130>
 802d342:	4282      	cmp	r2, r0
 802d344:	eb73 0101 	sbcs.w	r1, r3, r1
 802d348:	da02      	bge.n	802d350 <localtime_r+0x134>
 802d34a:	2300      	movs	r3, #0
 802d34c:	6223      	str	r3, [r4, #32]
 802d34e:	e009      	b.n	802d364 <localtime_r+0x148>
 802d350:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802d354:	4282      	cmp	r2, r0
 802d356:	418b      	sbcs	r3, r1
 802d358:	bfb4      	ite	lt
 802d35a:	2301      	movlt	r3, #1
 802d35c:	2300      	movge	r3, #0
 802d35e:	6223      	str	r3, [r4, #32]
 802d360:	2b00      	cmp	r3, #0
 802d362:	d198      	bne.n	802d296 <localtime_r+0x7a>
 802d364:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802d366:	e797      	b.n	802d298 <localtime_r+0x7c>
 802d368:	2b00      	cmp	r3, #0
 802d36a:	daaf      	bge.n	802d2cc <localtime_r+0xb0>
 802d36c:	3901      	subs	r1, #1
 802d36e:	6061      	str	r1, [r4, #4]
 802d370:	333c      	adds	r3, #60	@ 0x3c
 802d372:	e7aa      	b.n	802d2ca <localtime_r+0xae>
 802d374:	2b00      	cmp	r3, #0
 802d376:	dab0      	bge.n	802d2da <localtime_r+0xbe>
 802d378:	3a01      	subs	r2, #1
 802d37a:	60a2      	str	r2, [r4, #8]
 802d37c:	333c      	adds	r3, #60	@ 0x3c
 802d37e:	e7ab      	b.n	802d2d8 <localtime_r+0xbc>
 802d380:	2b00      	cmp	r3, #0
 802d382:	dacf      	bge.n	802d324 <localtime_r+0x108>
 802d384:	69e2      	ldr	r2, [r4, #28]
 802d386:	3a01      	subs	r2, #1
 802d388:	61e2      	str	r2, [r4, #28]
 802d38a:	69a2      	ldr	r2, [r4, #24]
 802d38c:	3a01      	subs	r2, #1
 802d38e:	bf48      	it	mi
 802d390:	2206      	movmi	r2, #6
 802d392:	61a2      	str	r2, [r4, #24]
 802d394:	68e2      	ldr	r2, [r4, #12]
 802d396:	3318      	adds	r3, #24
 802d398:	3a01      	subs	r2, #1
 802d39a:	60e2      	str	r2, [r4, #12]
 802d39c:	60a3      	str	r3, [r4, #8]
 802d39e:	2a00      	cmp	r2, #0
 802d3a0:	d1c0      	bne.n	802d324 <localtime_r+0x108>
 802d3a2:	6923      	ldr	r3, [r4, #16]
 802d3a4:	3b01      	subs	r3, #1
 802d3a6:	d405      	bmi.n	802d3b4 <localtime_r+0x198>
 802d3a8:	6123      	str	r3, [r4, #16]
 802d3aa:	6923      	ldr	r3, [r4, #16]
 802d3ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802d3b0:	60e3      	str	r3, [r4, #12]
 802d3b2:	e7b7      	b.n	802d324 <localtime_r+0x108>
 802d3b4:	230b      	movs	r3, #11
 802d3b6:	6123      	str	r3, [r4, #16]
 802d3b8:	6963      	ldr	r3, [r4, #20]
 802d3ba:	1e5a      	subs	r2, r3, #1
 802d3bc:	6162      	str	r2, [r4, #20]
 802d3be:	0792      	lsls	r2, r2, #30
 802d3c0:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802d3c4:	d105      	bne.n	802d3d2 <localtime_r+0x1b6>
 802d3c6:	2164      	movs	r1, #100	@ 0x64
 802d3c8:	fb93 f2f1 	sdiv	r2, r3, r1
 802d3cc:	fb01 3212 	mls	r2, r1, r2, r3
 802d3d0:	b962      	cbnz	r2, 802d3ec <localtime_r+0x1d0>
 802d3d2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d3d6:	fb93 f1f2 	sdiv	r1, r3, r2
 802d3da:	fb02 3311 	mls	r3, r2, r1, r3
 802d3de:	fab3 f383 	clz	r3, r3
 802d3e2:	095b      	lsrs	r3, r3, #5
 802d3e4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802d3e8:	61e3      	str	r3, [r4, #28]
 802d3ea:	e7de      	b.n	802d3aa <localtime_r+0x18e>
 802d3ec:	2301      	movs	r3, #1
 802d3ee:	e7f9      	b.n	802d3e4 <localtime_r+0x1c8>
 802d3f0:	0803c594 	.word	0x0803c594
 802d3f4:	2001a0e0 	.word	0x2001a0e0

0802d3f8 <iso_year_adjust>:
 802d3f8:	6942      	ldr	r2, [r0, #20]
 802d3fa:	2a00      	cmp	r2, #0
 802d3fc:	f240 736c 	movw	r3, #1900	@ 0x76c
 802d400:	bfa8      	it	ge
 802d402:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 802d406:	4413      	add	r3, r2
 802d408:	0792      	lsls	r2, r2, #30
 802d40a:	d105      	bne.n	802d418 <iso_year_adjust+0x20>
 802d40c:	2164      	movs	r1, #100	@ 0x64
 802d40e:	fb93 f2f1 	sdiv	r2, r3, r1
 802d412:	fb01 3212 	mls	r2, r1, r2, r3
 802d416:	b9ca      	cbnz	r2, 802d44c <iso_year_adjust+0x54>
 802d418:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d41c:	fb93 f1f2 	sdiv	r1, r3, r2
 802d420:	fb02 3311 	mls	r3, r2, r1, r3
 802d424:	fab3 f383 	clz	r3, r3
 802d428:	095b      	lsrs	r3, r3, #5
 802d42a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802d42e:	0040      	lsls	r0, r0, #1
 802d430:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802d434:	4418      	add	r0, r3
 802d436:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 802d43a:	4298      	cmp	r0, r3
 802d43c:	d027      	beq.n	802d48e <iso_year_adjust+0x96>
 802d43e:	dc11      	bgt.n	802d464 <iso_year_adjust+0x6c>
 802d440:	2801      	cmp	r0, #1
 802d442:	dc0a      	bgt.n	802d45a <iso_year_adjust+0x62>
 802d444:	43c0      	mvns	r0, r0
 802d446:	0fc0      	lsrs	r0, r0, #31
 802d448:	4240      	negs	r0, r0
 802d44a:	4770      	bx	lr
 802d44c:	2301      	movs	r3, #1
 802d44e:	e7ec      	b.n	802d42a <iso_year_adjust+0x32>
 802d450:	4b10      	ldr	r3, [pc, #64]	@ (802d494 <iso_year_adjust+0x9c>)
 802d452:	40c3      	lsrs	r3, r0
 802d454:	f343 0000 	sbfx	r0, r3, #0, #1
 802d458:	4770      	bx	lr
 802d45a:	380a      	subs	r0, #10
 802d45c:	2817      	cmp	r0, #23
 802d45e:	d9f7      	bls.n	802d450 <iso_year_adjust+0x58>
 802d460:	2000      	movs	r0, #0
 802d462:	4770      	bx	lr
 802d464:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 802d468:	4298      	cmp	r0, r3
 802d46a:	dc06      	bgt.n	802d47a <iso_year_adjust+0x82>
 802d46c:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 802d470:	4298      	cmp	r0, r3
 802d472:	bfd4      	ite	le
 802d474:	2000      	movle	r0, #0
 802d476:	2001      	movgt	r0, #1
 802d478:	4770      	bx	lr
 802d47a:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 802d47e:	3802      	subs	r0, #2
 802d480:	2815      	cmp	r0, #21
 802d482:	d8ed      	bhi.n	802d460 <iso_year_adjust+0x68>
 802d484:	4b04      	ldr	r3, [pc, #16]	@ (802d498 <iso_year_adjust+0xa0>)
 802d486:	40c3      	lsrs	r3, r0
 802d488:	f003 0001 	and.w	r0, r3, #1
 802d48c:	4770      	bx	lr
 802d48e:	2001      	movs	r0, #1
 802d490:	4770      	bx	lr
 802d492:	bf00      	nop
 802d494:	00cc00cf 	.word	0x00cc00cf
 802d498:	002a001f 	.word	0x002a001f

0802d49c <__strftime.isra.0>:
 802d49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d4a0:	b08f      	sub	sp, #60	@ 0x3c
 802d4a2:	461e      	mov	r6, r3
 802d4a4:	2300      	movs	r3, #0
 802d4a6:	4607      	mov	r7, r0
 802d4a8:	460d      	mov	r5, r1
 802d4aa:	9302      	str	r3, [sp, #8]
 802d4ac:	461c      	mov	r4, r3
 802d4ae:	7813      	ldrb	r3, [r2, #0]
 802d4b0:	2b00      	cmp	r3, #0
 802d4b2:	f000 84ae 	beq.w	802de12 <__strftime.isra.0+0x976>
 802d4b6:	2b25      	cmp	r3, #37	@ 0x25
 802d4b8:	d11f      	bne.n	802d4fa <__strftime.isra.0+0x5e>
 802d4ba:	f892 9001 	ldrb.w	r9, [r2, #1]
 802d4be:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 802d4c2:	d024      	beq.n	802d50e <__strftime.isra.0+0x72>
 802d4c4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d4c8:	d021      	beq.n	802d50e <__strftime.isra.0+0x72>
 802d4ca:	f102 0801 	add.w	r8, r2, #1
 802d4ce:	f04f 0900 	mov.w	r9, #0
 802d4d2:	f898 2000 	ldrb.w	r2, [r8]
 802d4d6:	3a31      	subs	r2, #49	@ 0x31
 802d4d8:	2a08      	cmp	r2, #8
 802d4da:	d81b      	bhi.n	802d514 <__strftime.isra.0+0x78>
 802d4dc:	220a      	movs	r2, #10
 802d4de:	4640      	mov	r0, r8
 802d4e0:	a906      	add	r1, sp, #24
 802d4e2:	f008 f88b 	bl	80355fc <strtoul>
 802d4e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802d4ea:	4602      	mov	r2, r0
 802d4ec:	f898 1000 	ldrb.w	r1, [r8]
 802d4f0:	2945      	cmp	r1, #69	@ 0x45
 802d4f2:	d111      	bne.n	802d518 <__strftime.isra.0+0x7c>
 802d4f4:	f108 0801 	add.w	r8, r8, #1
 802d4f8:	e010      	b.n	802d51c <__strftime.isra.0+0x80>
 802d4fa:	1e69      	subs	r1, r5, #1
 802d4fc:	42a1      	cmp	r1, r4
 802d4fe:	f240 815d 	bls.w	802d7bc <__strftime.isra.0+0x320>
 802d502:	553b      	strb	r3, [r7, r4]
 802d504:	3201      	adds	r2, #1
 802d506:	f104 0a01 	add.w	sl, r4, #1
 802d50a:	4654      	mov	r4, sl
 802d50c:	e7cf      	b.n	802d4ae <__strftime.isra.0+0x12>
 802d50e:	f102 0802 	add.w	r8, r2, #2
 802d512:	e7de      	b.n	802d4d2 <__strftime.isra.0+0x36>
 802d514:	2200      	movs	r2, #0
 802d516:	e7e9      	b.n	802d4ec <__strftime.isra.0+0x50>
 802d518:	294f      	cmp	r1, #79	@ 0x4f
 802d51a:	d0eb      	beq.n	802d4f4 <__strftime.isra.0+0x58>
 802d51c:	f898 0000 	ldrb.w	r0, [r8]
 802d520:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 802d524:	2955      	cmp	r1, #85	@ 0x55
 802d526:	f200 8149 	bhi.w	802d7bc <__strftime.isra.0+0x320>
 802d52a:	e8df f011 	tbh	[pc, r1, lsl #1]
 802d52e:	046a      	.short	0x046a
 802d530:	01470147 	.word	0x01470147
 802d534:	01470147 	.word	0x01470147
 802d538:	01470147 	.word	0x01470147
 802d53c:	01470147 	.word	0x01470147
 802d540:	01470147 	.word	0x01470147
 802d544:	01470147 	.word	0x01470147
 802d548:	01470147 	.word	0x01470147
 802d54c:	01470147 	.word	0x01470147
 802d550:	01470147 	.word	0x01470147
 802d554:	01470147 	.word	0x01470147
 802d558:	01470147 	.word	0x01470147
 802d55c:	01470147 	.word	0x01470147
 802d560:	01470147 	.word	0x01470147
 802d564:	00750147 	.word	0x00750147
 802d568:	00dc00a3 	.word	0x00dc00a3
 802d56c:	01470128 	.word	0x01470128
 802d570:	01cb0159 	.word	0x01cb0159
 802d574:	02590252 	.word	0x02590252
 802d578:	01470147 	.word	0x01470147
 802d57c:	02710147 	.word	0x02710147
 802d580:	01470147 	.word	0x01470147
 802d584:	0147027c 	.word	0x0147027c
 802d588:	033402ac 	.word	0x033402ac
 802d58c:	036a033e 	.word	0x036a033e
 802d590:	03d80372 	.word	0x03d80372
 802d594:	03ee00d8 	.word	0x03ee00d8
 802d598:	01470440 	.word	0x01470440
 802d59c:	01470147 	.word	0x01470147
 802d5a0:	01470147 	.word	0x01470147
 802d5a4:	00560147 	.word	0x00560147
 802d5a8:	00ba008d 	.word	0x00ba008d
 802d5ac:	011d011d 	.word	0x011d011d
 802d5b0:	017e0147 	.word	0x017e0147
 802d5b4:	0147008d 	.word	0x0147008d
 802d5b8:	0252026a 	.word	0x0252026a
 802d5bc:	026e0259 	.word	0x026e0259
 802d5c0:	01470273 	.word	0x01470273
 802d5c4:	02a5027c 	.word	0x02a5027c
 802d5c8:	02b500d0 	.word	0x02b500d0
 802d5cc:	035d0336 	.word	0x035d0336
 802d5d0:	03cf03a4 	.word	0x03cf03a4
 802d5d4:	03e000d4 	.word	0x03e000d4
 802d5d8:	0403      	.short	0x0403
 802d5da:	69b3      	ldr	r3, [r6, #24]
 802d5dc:	4aad      	ldr	r2, [pc, #692]	@ (802d894 <__strftime.isra.0+0x3f8>)
 802d5de:	3318      	adds	r3, #24
 802d5e0:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802d5e4:	4658      	mov	r0, fp
 802d5e6:	f7e2 fe5b 	bl	80102a0 <strlen>
 802d5ea:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d5ee:	eb04 0a00 	add.w	sl, r4, r0
 802d5f2:	1e6b      	subs	r3, r5, #1
 802d5f4:	45a2      	cmp	sl, r4
 802d5f6:	d107      	bne.n	802d608 <__strftime.isra.0+0x16c>
 802d5f8:	f898 3000 	ldrb.w	r3, [r8]
 802d5fc:	2b00      	cmp	r3, #0
 802d5fe:	f000 8409 	beq.w	802de14 <__strftime.isra.0+0x978>
 802d602:	f108 0201 	add.w	r2, r8, #1
 802d606:	e780      	b.n	802d50a <__strftime.isra.0+0x6e>
 802d608:	42a3      	cmp	r3, r4
 802d60a:	f240 80d7 	bls.w	802d7bc <__strftime.isra.0+0x320>
 802d60e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d612:	553a      	strb	r2, [r7, r4]
 802d614:	3401      	adds	r4, #1
 802d616:	e7ed      	b.n	802d5f4 <__strftime.isra.0+0x158>
 802d618:	69b2      	ldr	r2, [r6, #24]
 802d61a:	4b9e      	ldr	r3, [pc, #632]	@ (802d894 <__strftime.isra.0+0x3f8>)
 802d61c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802d620:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802d624:	4658      	mov	r0, fp
 802d626:	f7e2 fe3b 	bl	80102a0 <strlen>
 802d62a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d62e:	eb04 0a00 	add.w	sl, r4, r0
 802d632:	1e6b      	subs	r3, r5, #1
 802d634:	4554      	cmp	r4, sl
 802d636:	d0df      	beq.n	802d5f8 <__strftime.isra.0+0x15c>
 802d638:	42a3      	cmp	r3, r4
 802d63a:	f240 80bf 	bls.w	802d7bc <__strftime.isra.0+0x320>
 802d63e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d642:	553a      	strb	r2, [r7, r4]
 802d644:	3401      	adds	r4, #1
 802d646:	e7f5      	b.n	802d634 <__strftime.isra.0+0x198>
 802d648:	4b92      	ldr	r3, [pc, #584]	@ (802d894 <__strftime.isra.0+0x3f8>)
 802d64a:	6932      	ldr	r2, [r6, #16]
 802d64c:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 802d650:	4658      	mov	r0, fp
 802d652:	f7e2 fe25 	bl	80102a0 <strlen>
 802d656:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d65a:	eb04 0a00 	add.w	sl, r4, r0
 802d65e:	1e6b      	subs	r3, r5, #1
 802d660:	45a2      	cmp	sl, r4
 802d662:	d0c9      	beq.n	802d5f8 <__strftime.isra.0+0x15c>
 802d664:	42a3      	cmp	r3, r4
 802d666:	f240 80a9 	bls.w	802d7bc <__strftime.isra.0+0x320>
 802d66a:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d66e:	553a      	strb	r2, [r7, r4]
 802d670:	3401      	adds	r4, #1
 802d672:	e7f5      	b.n	802d660 <__strftime.isra.0+0x1c4>
 802d674:	6933      	ldr	r3, [r6, #16]
 802d676:	4a87      	ldr	r2, [pc, #540]	@ (802d894 <__strftime.isra.0+0x3f8>)
 802d678:	330c      	adds	r3, #12
 802d67a:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802d67e:	4658      	mov	r0, fp
 802d680:	f7e2 fe0e 	bl	80102a0 <strlen>
 802d684:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d688:	eb04 0a00 	add.w	sl, r4, r0
 802d68c:	1e6b      	subs	r3, r5, #1
 802d68e:	45a2      	cmp	sl, r4
 802d690:	d0b2      	beq.n	802d5f8 <__strftime.isra.0+0x15c>
 802d692:	42a3      	cmp	r3, r4
 802d694:	f240 8092 	bls.w	802d7bc <__strftime.isra.0+0x320>
 802d698:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d69c:	553a      	strb	r2, [r7, r4]
 802d69e:	3401      	adds	r4, #1
 802d6a0:	e7f5      	b.n	802d68e <__strftime.isra.0+0x1f2>
 802d6a2:	4b7c      	ldr	r3, [pc, #496]	@ (802d894 <__strftime.isra.0+0x3f8>)
 802d6a4:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802d6a8:	4650      	mov	r0, sl
 802d6aa:	f7e2 fdf9 	bl	80102a0 <strlen>
 802d6ae:	f89a 3000 	ldrb.w	r3, [sl]
 802d6b2:	2b00      	cmp	r3, #0
 802d6b4:	f000 8341 	beq.w	802dd3a <__strftime.isra.0+0x89e>
 802d6b8:	4633      	mov	r3, r6
 802d6ba:	4652      	mov	r2, sl
 802d6bc:	1b29      	subs	r1, r5, r4
 802d6be:	1938      	adds	r0, r7, r4
 802d6c0:	f7ff feec 	bl	802d49c <__strftime.isra.0>
 802d6c4:	2800      	cmp	r0, #0
 802d6c6:	dd79      	ble.n	802d7bc <__strftime.isra.0+0x320>
 802d6c8:	eb04 0a00 	add.w	sl, r4, r0
 802d6cc:	e794      	b.n	802d5f8 <__strftime.isra.0+0x15c>
 802d6ce:	4b71      	ldr	r3, [pc, #452]	@ (802d894 <__strftime.isra.0+0x3f8>)
 802d6d0:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802d6d4:	e7e8      	b.n	802d6a8 <__strftime.isra.0+0x20c>
 802d6d6:	4b6f      	ldr	r3, [pc, #444]	@ (802d894 <__strftime.isra.0+0x3f8>)
 802d6d8:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802d6dc:	e7e4      	b.n	802d6a8 <__strftime.isra.0+0x20c>
 802d6de:	4b6d      	ldr	r3, [pc, #436]	@ (802d894 <__strftime.isra.0+0x3f8>)
 802d6e0:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802d6e4:	e7e0      	b.n	802d6a8 <__strftime.isra.0+0x20c>
 802d6e6:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802d6ea:	496b      	ldr	r1, [pc, #428]	@ (802d898 <__strftime.isra.0+0x3fc>)
 802d6ec:	458a      	cmp	sl, r1
 802d6ee:	bfac      	ite	ge
 802d6f0:	f04f 0b00 	movge.w	fp, #0
 802d6f4:	f04f 0b01 	movlt.w	fp, #1
 802d6f8:	f1ba 0f00 	cmp.w	sl, #0
 802d6fc:	db12      	blt.n	802d724 <__strftime.isra.0+0x288>
 802d6fe:	2064      	movs	r0, #100	@ 0x64
 802d700:	fb9a f0f0 	sdiv	r0, sl, r0
 802d704:	3013      	adds	r0, #19
 802d706:	f1b9 0f00 	cmp.w	r9, #0
 802d70a:	d015      	beq.n	802d738 <__strftime.isra.0+0x29c>
 802d70c:	2863      	cmp	r0, #99	@ 0x63
 802d70e:	dd28      	ble.n	802d762 <__strftime.isra.0+0x2c6>
 802d710:	4b62      	ldr	r3, [pc, #392]	@ (802d89c <__strftime.isra.0+0x400>)
 802d712:	4963      	ldr	r1, [pc, #396]	@ (802d8a0 <__strftime.isra.0+0x404>)
 802d714:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d718:	bf0c      	ite	eq
 802d71a:	469c      	moveq	ip, r3
 802d71c:	468c      	movne	ip, r1
 802d71e:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802d8bc <__strftime.isra.0+0x420>
 802d722:	e00d      	b.n	802d740 <__strftime.isra.0+0x2a4>
 802d724:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802d728:	9203      	str	r2, [sp, #12]
 802d72a:	f000 ff88 	bl	802e63e <abs>
 802d72e:	2164      	movs	r1, #100	@ 0x64
 802d730:	9a03      	ldr	r2, [sp, #12]
 802d732:	fb90 f0f1 	sdiv	r0, r0, r1
 802d736:	e7e6      	b.n	802d706 <__strftime.isra.0+0x26a>
 802d738:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802d8a0 <__strftime.isra.0+0x404>
 802d73c:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802d8c0 <__strftime.isra.0+0x424>
 802d740:	4b58      	ldr	r3, [pc, #352]	@ (802d8a4 <__strftime.isra.0+0x408>)
 802d742:	9001      	str	r0, [sp, #4]
 802d744:	2a02      	cmp	r2, #2
 802d746:	bf2c      	ite	cs
 802d748:	ebcb 0102 	rsbcs	r1, fp, r2
 802d74c:	f1cb 0102 	rsbcc	r1, fp, #2
 802d750:	4a51      	ldr	r2, [pc, #324]	@ (802d898 <__strftime.isra.0+0x3fc>)
 802d752:	9100      	str	r1, [sp, #0]
 802d754:	4592      	cmp	sl, r2
 802d756:	bfa8      	it	ge
 802d758:	4663      	movge	r3, ip
 802d75a:	4672      	mov	r2, lr
 802d75c:	1b29      	subs	r1, r5, r4
 802d75e:	1938      	adds	r0, r7, r4
 802d760:	e023      	b.n	802d7aa <__strftime.isra.0+0x30e>
 802d762:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802d8a0 <__strftime.isra.0+0x404>
 802d766:	e7da      	b.n	802d71e <__strftime.isra.0+0x282>
 802d768:	494f      	ldr	r1, [pc, #316]	@ (802d8a8 <__strftime.isra.0+0x40c>)
 802d76a:	4a50      	ldr	r2, [pc, #320]	@ (802d8ac <__strftime.isra.0+0x410>)
 802d76c:	68f3      	ldr	r3, [r6, #12]
 802d76e:	2864      	cmp	r0, #100	@ 0x64
 802d770:	bf18      	it	ne
 802d772:	460a      	movne	r2, r1
 802d774:	1b29      	subs	r1, r5, r4
 802d776:	1938      	adds	r0, r7, r4
 802d778:	f002 f986 	bl	802fa88 <sniprintf>
 802d77c:	e017      	b.n	802d7ae <__strftime.isra.0+0x312>
 802d77e:	6970      	ldr	r0, [r6, #20]
 802d780:	6933      	ldr	r3, [r6, #16]
 802d782:	2800      	cmp	r0, #0
 802d784:	f103 0a01 	add.w	sl, r3, #1
 802d788:	eb07 0b04 	add.w	fp, r7, r4
 802d78c:	68f3      	ldr	r3, [r6, #12]
 802d78e:	eba5 0904 	sub.w	r9, r5, r4
 802d792:	db19      	blt.n	802d7c8 <__strftime.isra.0+0x32c>
 802d794:	2264      	movs	r2, #100	@ 0x64
 802d796:	fb90 fcf2 	sdiv	ip, r0, r2
 802d79a:	fb02 001c 	mls	r0, r2, ip, r0
 802d79e:	4a44      	ldr	r2, [pc, #272]	@ (802d8b0 <__strftime.isra.0+0x414>)
 802d7a0:	e9cd 3000 	strd	r3, r0, [sp]
 802d7a4:	4649      	mov	r1, r9
 802d7a6:	4653      	mov	r3, sl
 802d7a8:	4658      	mov	r0, fp
 802d7aa:	f002 f96d 	bl	802fa88 <sniprintf>
 802d7ae:	2800      	cmp	r0, #0
 802d7b0:	db04      	blt.n	802d7bc <__strftime.isra.0+0x320>
 802d7b2:	eb00 0a04 	add.w	sl, r0, r4
 802d7b6:	4555      	cmp	r5, sl
 802d7b8:	f63f af1e 	bhi.w	802d5f8 <__strftime.isra.0+0x15c>
 802d7bc:	f04f 0a00 	mov.w	sl, #0
 802d7c0:	4650      	mov	r0, sl
 802d7c2:	b00f      	add	sp, #60	@ 0x3c
 802d7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d7c8:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d7cc:	9303      	str	r3, [sp, #12]
 802d7ce:	f000 ff36 	bl	802e63e <abs>
 802d7d2:	2264      	movs	r2, #100	@ 0x64
 802d7d4:	9b03      	ldr	r3, [sp, #12]
 802d7d6:	fb90 fcf2 	sdiv	ip, r0, r2
 802d7da:	fb0c 0012 	mls	r0, ip, r2, r0
 802d7de:	e7de      	b.n	802d79e <__strftime.isra.0+0x302>
 802d7e0:	2125      	movs	r1, #37	@ 0x25
 802d7e2:	f88d 1018 	strb.w	r1, [sp, #24]
 802d7e6:	f1b9 0f00 	cmp.w	r9, #0
 802d7ea:	d00b      	beq.n	802d804 <__strftime.isra.0+0x368>
 802d7ec:	2a05      	cmp	r2, #5
 802d7ee:	f88d 9019 	strb.w	r9, [sp, #25]
 802d7f2:	d817      	bhi.n	802d824 <__strftime.isra.0+0x388>
 802d7f4:	f10d 001a 	add.w	r0, sp, #26
 802d7f8:	492e      	ldr	r1, [pc, #184]	@ (802d8b4 <__strftime.isra.0+0x418>)
 802d7fa:	f000 fe83 	bl	802e504 <strcpy>
 802d7fe:	4633      	mov	r3, r6
 802d800:	aa06      	add	r2, sp, #24
 802d802:	e75b      	b.n	802d6bc <__strftime.isra.0+0x220>
 802d804:	232b      	movs	r3, #43	@ 0x2b
 802d806:	f88d 3019 	strb.w	r3, [sp, #25]
 802d80a:	2304      	movs	r3, #4
 802d80c:	4a2a      	ldr	r2, [pc, #168]	@ (802d8b8 <__strftime.isra.0+0x41c>)
 802d80e:	211e      	movs	r1, #30
 802d810:	f10d 001a 	add.w	r0, sp, #26
 802d814:	f002 f938 	bl	802fa88 <sniprintf>
 802d818:	2800      	cmp	r0, #0
 802d81a:	ddeb      	ble.n	802d7f4 <__strftime.isra.0+0x358>
 802d81c:	f10d 031a 	add.w	r3, sp, #26
 802d820:	4418      	add	r0, r3
 802d822:	e7e9      	b.n	802d7f8 <__strftime.isra.0+0x35c>
 802d824:	1f93      	subs	r3, r2, #6
 802d826:	d0e5      	beq.n	802d7f4 <__strftime.isra.0+0x358>
 802d828:	e7f0      	b.n	802d80c <__strftime.isra.0+0x370>
 802d82a:	4630      	mov	r0, r6
 802d82c:	f7ff fde4 	bl	802d3f8 <iso_year_adjust>
 802d830:	4682      	mov	sl, r0
 802d832:	6970      	ldr	r0, [r6, #20]
 802d834:	2800      	cmp	r0, #0
 802d836:	db11      	blt.n	802d85c <__strftime.isra.0+0x3c0>
 802d838:	2364      	movs	r3, #100	@ 0x64
 802d83a:	fb90 f2f3 	sdiv	r2, r0, r3
 802d83e:	fb03 0012 	mls	r0, r3, r2, r0
 802d842:	2364      	movs	r3, #100	@ 0x64
 802d844:	4482      	add	sl, r0
 802d846:	fb9a f2f3 	sdiv	r2, sl, r3
 802d84a:	fb03 aa12 	mls	sl, r3, r2, sl
 802d84e:	449a      	add	sl, r3
 802d850:	fbba f2f3 	udiv	r2, sl, r3
 802d854:	fb03 a312 	mls	r3, r3, r2, sl
 802d858:	4a14      	ldr	r2, [pc, #80]	@ (802d8ac <__strftime.isra.0+0x410>)
 802d85a:	e78b      	b.n	802d774 <__strftime.isra.0+0x2d8>
 802d85c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d860:	f000 feed 	bl	802e63e <abs>
 802d864:	2364      	movs	r3, #100	@ 0x64
 802d866:	f1ba 0f00 	cmp.w	sl, #0
 802d86a:	fb90 f2f3 	sdiv	r2, r0, r3
 802d86e:	fb02 0013 	mls	r0, r2, r3, r0
 802d872:	da07      	bge.n	802d884 <__strftime.isra.0+0x3e8>
 802d874:	6972      	ldr	r2, [r6, #20]
 802d876:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802d87a:	429a      	cmp	r2, r3
 802d87c:	bfb8      	it	lt
 802d87e:	f04f 0a01 	movlt.w	sl, #1
 802d882:	e7de      	b.n	802d842 <__strftime.isra.0+0x3a6>
 802d884:	d0dd      	beq.n	802d842 <__strftime.isra.0+0x3a6>
 802d886:	6972      	ldr	r2, [r6, #20]
 802d888:	4b03      	ldr	r3, [pc, #12]	@ (802d898 <__strftime.isra.0+0x3fc>)
 802d88a:	429a      	cmp	r2, r3
 802d88c:	bfb8      	it	lt
 802d88e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d892:	e7d6      	b.n	802d842 <__strftime.isra.0+0x3a6>
 802d894:	0803c7e0 	.word	0x0803c7e0
 802d898:	fffff894 	.word	0xfffff894
 802d89c:	0803c603 	.word	0x0803c603
 802d8a0:	0803c51e 	.word	0x0803c51e
 802d8a4:	0803c605 	.word	0x0803c605
 802d8a8:	0803c607 	.word	0x0803c607
 802d8ac:	0803c615 	.word	0x0803c615
 802d8b0:	0803c60b 	.word	0x0803c60b
 802d8b4:	0803c61e 	.word	0x0803c61e
 802d8b8:	0803c61a 	.word	0x0803c61a
 802d8bc:	0803c5fb 	.word	0x0803c5fb
 802d8c0:	0803c5f4 	.word	0x0803c5f4
 802d8c4:	6971      	ldr	r1, [r6, #20]
 802d8c6:	48bc      	ldr	r0, [pc, #752]	@ (802dbb8 <__strftime.isra.0+0x71c>)
 802d8c8:	9205      	str	r2, [sp, #20]
 802d8ca:	4281      	cmp	r1, r0
 802d8cc:	bfac      	ite	ge
 802d8ce:	2300      	movge	r3, #0
 802d8d0:	2301      	movlt	r3, #1
 802d8d2:	4630      	mov	r0, r6
 802d8d4:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802d8d8:	f7ff fd8e 	bl	802d3f8 <iso_year_adjust>
 802d8dc:	9904      	ldr	r1, [sp, #16]
 802d8de:	9a05      	ldr	r2, [sp, #20]
 802d8e0:	2900      	cmp	r1, #0
 802d8e2:	4682      	mov	sl, r0
 802d8e4:	db3a      	blt.n	802d95c <__strftime.isra.0+0x4c0>
 802d8e6:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802d8ea:	fb91 fbfb 	sdiv	fp, r1, fp
 802d8ee:	f10b 0b13 	add.w	fp, fp, #19
 802d8f2:	6970      	ldr	r0, [r6, #20]
 802d8f4:	2800      	cmp	r0, #0
 802d8f6:	db3e      	blt.n	802d976 <__strftime.isra.0+0x4da>
 802d8f8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d8fc:	f1ba 0f00 	cmp.w	sl, #0
 802d900:	fb90 fefc 	sdiv	lr, r0, ip
 802d904:	fb0c 001e 	mls	r0, ip, lr, r0
 802d908:	da4f      	bge.n	802d9aa <__strftime.isra.0+0x50e>
 802d90a:	4482      	add	sl, r0
 802d90c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802d910:	d157      	bne.n	802d9c2 <__strftime.isra.0+0x526>
 802d912:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d916:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802d91a:	9b03      	ldr	r3, [sp, #12]
 802d91c:	2164      	movs	r1, #100	@ 0x64
 802d91e:	fb01 aa0b 	mla	sl, r1, fp, sl
 802d922:	2b00      	cmp	r3, #0
 802d924:	f040 81f7 	bne.w	802dd16 <__strftime.isra.0+0x87a>
 802d928:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d92c:	d104      	bne.n	802d938 <__strftime.isra.0+0x49c>
 802d92e:	f242 710f 	movw	r1, #9999	@ 0x270f
 802d932:	458a      	cmp	sl, r1
 802d934:	f200 8275 	bhi.w	802de22 <__strftime.isra.0+0x986>
 802d938:	a906      	add	r1, sp, #24
 802d93a:	2025      	movs	r0, #37	@ 0x25
 802d93c:	7008      	strb	r0, [r1, #0]
 802d93e:	f1b9 0f00 	cmp.w	r9, #0
 802d942:	f040 81f3 	bne.w	802dd2c <__strftime.isra.0+0x890>
 802d946:	1c48      	adds	r0, r1, #1
 802d948:	499c      	ldr	r1, [pc, #624]	@ (802dbbc <__strftime.isra.0+0x720>)
 802d94a:	9203      	str	r2, [sp, #12]
 802d94c:	f000 fdda 	bl	802e504 <strcpy>
 802d950:	9a03      	ldr	r2, [sp, #12]
 802d952:	f8cd a000 	str.w	sl, [sp]
 802d956:	4613      	mov	r3, r2
 802d958:	aa06      	add	r2, sp, #24
 802d95a:	e098      	b.n	802da8e <__strftime.isra.0+0x5f2>
 802d95c:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802d960:	9205      	str	r2, [sp, #20]
 802d962:	9104      	str	r1, [sp, #16]
 802d964:	f000 fe6b 	bl	802e63e <abs>
 802d968:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d96c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802d970:	fb90 fbfc 	sdiv	fp, r0, ip
 802d974:	e7bd      	b.n	802d8f2 <__strftime.isra.0+0x456>
 802d976:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d97a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802d97e:	f000 fe5e 	bl	802e63e <abs>
 802d982:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d986:	f1ba 0f00 	cmp.w	sl, #0
 802d98a:	fb90 fefc 	sdiv	lr, r0, ip
 802d98e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802d992:	fb0e 001c 	mls	r0, lr, ip, r0
 802d996:	da08      	bge.n	802d9aa <__strftime.isra.0+0x50e>
 802d998:	6971      	ldr	r1, [r6, #20]
 802d99a:	4b89      	ldr	r3, [pc, #548]	@ (802dbc0 <__strftime.isra.0+0x724>)
 802d99c:	4299      	cmp	r1, r3
 802d99e:	dab4      	bge.n	802d90a <__strftime.isra.0+0x46e>
 802d9a0:	f04f 0a01 	mov.w	sl, #1
 802d9a4:	f8cd a00c 	str.w	sl, [sp, #12]
 802d9a8:	e7af      	b.n	802d90a <__strftime.isra.0+0x46e>
 802d9aa:	f1ba 0f00 	cmp.w	sl, #0
 802d9ae:	d0ac      	beq.n	802d90a <__strftime.isra.0+0x46e>
 802d9b0:	4b81      	ldr	r3, [pc, #516]	@ (802dbb8 <__strftime.isra.0+0x71c>)
 802d9b2:	4299      	cmp	r1, r3
 802d9b4:	9b03      	ldr	r3, [sp, #12]
 802d9b6:	bfbc      	itt	lt
 802d9b8:	2301      	movlt	r3, #1
 802d9ba:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d9be:	9303      	str	r3, [sp, #12]
 802d9c0:	e7a3      	b.n	802d90a <__strftime.isra.0+0x46e>
 802d9c2:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802d9c6:	bf04      	itt	eq
 802d9c8:	f10b 0b01 	addeq.w	fp, fp, #1
 802d9cc:	f04f 0a00 	moveq.w	sl, #0
 802d9d0:	e7a3      	b.n	802d91a <__strftime.isra.0+0x47e>
 802d9d2:	497c      	ldr	r1, [pc, #496]	@ (802dbc4 <__strftime.isra.0+0x728>)
 802d9d4:	4a7c      	ldr	r2, [pc, #496]	@ (802dbc8 <__strftime.isra.0+0x72c>)
 802d9d6:	68b3      	ldr	r3, [r6, #8]
 802d9d8:	286b      	cmp	r0, #107	@ 0x6b
 802d9da:	bf18      	it	ne
 802d9dc:	460a      	movne	r2, r1
 802d9de:	e6c9      	b.n	802d774 <__strftime.isra.0+0x2d8>
 802d9e0:	68b3      	ldr	r3, [r6, #8]
 802d9e2:	b163      	cbz	r3, 802d9fe <__strftime.isra.0+0x562>
 802d9e4:	2b0c      	cmp	r3, #12
 802d9e6:	d004      	beq.n	802d9f2 <__strftime.isra.0+0x556>
 802d9e8:	210c      	movs	r1, #12
 802d9ea:	fb93 f2f1 	sdiv	r2, r3, r1
 802d9ee:	fb01 3312 	mls	r3, r1, r2, r3
 802d9f2:	4975      	ldr	r1, [pc, #468]	@ (802dbc8 <__strftime.isra.0+0x72c>)
 802d9f4:	4a73      	ldr	r2, [pc, #460]	@ (802dbc4 <__strftime.isra.0+0x728>)
 802d9f6:	2849      	cmp	r0, #73	@ 0x49
 802d9f8:	bf18      	it	ne
 802d9fa:	460a      	movne	r2, r1
 802d9fc:	e6ba      	b.n	802d774 <__strftime.isra.0+0x2d8>
 802d9fe:	230c      	movs	r3, #12
 802da00:	e7f7      	b.n	802d9f2 <__strftime.isra.0+0x556>
 802da02:	69f3      	ldr	r3, [r6, #28]
 802da04:	4a71      	ldr	r2, [pc, #452]	@ (802dbcc <__strftime.isra.0+0x730>)
 802da06:	3301      	adds	r3, #1
 802da08:	e6b4      	b.n	802d774 <__strftime.isra.0+0x2d8>
 802da0a:	6933      	ldr	r3, [r6, #16]
 802da0c:	3301      	adds	r3, #1
 802da0e:	e723      	b.n	802d858 <__strftime.isra.0+0x3bc>
 802da10:	6873      	ldr	r3, [r6, #4]
 802da12:	e721      	b.n	802d858 <__strftime.isra.0+0x3bc>
 802da14:	1e6b      	subs	r3, r5, #1
 802da16:	429c      	cmp	r4, r3
 802da18:	f4bf aed0 	bcs.w	802d7bc <__strftime.isra.0+0x320>
 802da1c:	f104 0a01 	add.w	sl, r4, #1
 802da20:	230a      	movs	r3, #10
 802da22:	553b      	strb	r3, [r7, r4]
 802da24:	e5e8      	b.n	802d5f8 <__strftime.isra.0+0x15c>
 802da26:	68b3      	ldr	r3, [r6, #8]
 802da28:	2b0b      	cmp	r3, #11
 802da2a:	4b69      	ldr	r3, [pc, #420]	@ (802dbd0 <__strftime.isra.0+0x734>)
 802da2c:	bfd4      	ite	le
 802da2e:	2200      	movle	r2, #0
 802da30:	2201      	movgt	r2, #1
 802da32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802da36:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802da3a:	4658      	mov	r0, fp
 802da3c:	f7e2 fc30 	bl	80102a0 <strlen>
 802da40:	eb04 0a00 	add.w	sl, r4, r0
 802da44:	4863      	ldr	r0, [pc, #396]	@ (802dbd4 <__strftime.isra.0+0x738>)
 802da46:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802da4a:	1e69      	subs	r1, r5, #1
 802da4c:	45a2      	cmp	sl, r4
 802da4e:	f43f add3 	beq.w	802d5f8 <__strftime.isra.0+0x15c>
 802da52:	42a1      	cmp	r1, r4
 802da54:	f67f aeb2 	bls.w	802d7bc <__strftime.isra.0+0x320>
 802da58:	f898 2000 	ldrb.w	r2, [r8]
 802da5c:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802da60:	2a50      	cmp	r2, #80	@ 0x50
 802da62:	d106      	bne.n	802da72 <__strftime.isra.0+0x5d6>
 802da64:	5cc2      	ldrb	r2, [r0, r3]
 802da66:	f002 0203 	and.w	r2, r2, #3
 802da6a:	2a01      	cmp	r2, #1
 802da6c:	bf08      	it	eq
 802da6e:	3320      	addeq	r3, #32
 802da70:	b2db      	uxtb	r3, r3
 802da72:	553b      	strb	r3, [r7, r4]
 802da74:	3401      	adds	r4, #1
 802da76:	e7e9      	b.n	802da4c <__strftime.isra.0+0x5b0>
 802da78:	2203      	movs	r2, #3
 802da7a:	6933      	ldr	r3, [r6, #16]
 802da7c:	fb93 f3f2 	sdiv	r3, r3, r2
 802da80:	4a55      	ldr	r2, [pc, #340]	@ (802dbd8 <__strftime.isra.0+0x73c>)
 802da82:	3301      	adds	r3, #1
 802da84:	e676      	b.n	802d774 <__strftime.isra.0+0x2d8>
 802da86:	6873      	ldr	r3, [r6, #4]
 802da88:	9300      	str	r3, [sp, #0]
 802da8a:	68b3      	ldr	r3, [r6, #8]
 802da8c:	4a53      	ldr	r2, [pc, #332]	@ (802dbdc <__strftime.isra.0+0x740>)
 802da8e:	1b29      	subs	r1, r5, r4
 802da90:	1938      	adds	r0, r7, r4
 802da92:	f001 fff9 	bl	802fa88 <sniprintf>
 802da96:	e68a      	b.n	802d7ae <__strftime.isra.0+0x312>
 802da98:	6a33      	ldr	r3, [r6, #32]
 802da9a:	2b00      	cmp	r3, #0
 802da9c:	db78      	blt.n	802db90 <__strftime.isra.0+0x6f4>
 802da9e:	f000 fa7b 	bl	802df98 <__tz_lock>
 802daa2:	9b02      	ldr	r3, [sp, #8]
 802daa4:	b90b      	cbnz	r3, 802daaa <__strftime.isra.0+0x60e>
 802daa6:	f000 fa83 	bl	802dfb0 <_tzset_unlocked>
 802daaa:	f007 fe73 	bl	8035794 <__gettzinfo>
 802daae:	6a33      	ldr	r3, [r6, #32]
 802dab0:	2b00      	cmp	r3, #0
 802dab2:	bfd4      	ite	le
 802dab4:	2200      	movle	r2, #0
 802dab6:	2201      	movgt	r2, #1
 802dab8:	2328      	movs	r3, #40	@ 0x28
 802daba:	fb02 3303 	mla	r3, r2, r3, r3
 802dabe:	58c3      	ldr	r3, [r0, r3]
 802dac0:	f1c3 0a00 	rsb	sl, r3, #0
 802dac4:	f000 fa6e 	bl	802dfa4 <__tz_unlock>
 802dac8:	2301      	movs	r3, #1
 802daca:	9302      	str	r3, [sp, #8]
 802dacc:	6972      	ldr	r2, [r6, #20]
 802dace:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802dad2:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802dad6:	f16c 0c00 	sbc.w	ip, ip, #0
 802dada:	f1bc 0f00 	cmp.w	ip, #0
 802dade:	eba5 0104 	sub.w	r1, r5, r4
 802dae2:	eb07 0004 	add.w	r0, r7, r4
 802dae6:	da02      	bge.n	802daee <__strftime.isra.0+0x652>
 802dae8:	3303      	adds	r3, #3
 802daea:	f14c 0c00 	adc.w	ip, ip, #0
 802daee:	089b      	lsrs	r3, r3, #2
 802daf0:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802daf4:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802daf8:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802dafc:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802db00:	fb9e fefb 	sdiv	lr, lr, fp
 802db04:	ebb3 030e 	subs.w	r3, r3, lr
 802db08:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802db0c:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802db10:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802db14:	fb9e fefb 	sdiv	lr, lr, fp
 802db18:	eb13 030e 	adds.w	r3, r3, lr
 802db1c:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802db20:	3a46      	subs	r2, #70	@ 0x46
 802db22:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802db26:	fb0e f202 	mul.w	r2, lr, r2
 802db2a:	189b      	adds	r3, r3, r2
 802db2c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802db30:	69f2      	ldr	r2, [r6, #28]
 802db32:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802db36:	189b      	adds	r3, r3, r2
 802db38:	f04f 0e18 	mov.w	lr, #24
 802db3c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802db40:	fba3 230e 	umull	r2, r3, r3, lr
 802db44:	fb0e 330c 	mla	r3, lr, ip, r3
 802db48:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802db4c:	eb12 020c 	adds.w	r2, r2, ip
 802db50:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802db54:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802db58:	fba2 2e0c 	umull	r2, lr, r2, ip
 802db5c:	fb0c ee03 	mla	lr, ip, r3, lr
 802db60:	eb12 030b 	adds.w	r3, r2, fp
 802db64:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802db68:	fba3 e30c 	umull	lr, r3, r3, ip
 802db6c:	fb0c 3302 	mla	r3, ip, r2, r3
 802db70:	f8d6 c000 	ldr.w	ip, [r6]
 802db74:	eb1e 020c 	adds.w	r2, lr, ip
 802db78:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802db7c:	ebb2 020a 	subs.w	r2, r2, sl
 802db80:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802db84:	e9cd 2300 	strd	r2, r3, [sp]
 802db88:	4a15      	ldr	r2, [pc, #84]	@ (802dbe0 <__strftime.isra.0+0x744>)
 802db8a:	f001 ff7d 	bl	802fa88 <sniprintf>
 802db8e:	e60e      	b.n	802d7ae <__strftime.isra.0+0x312>
 802db90:	f04f 0a00 	mov.w	sl, #0
 802db94:	e79a      	b.n	802dacc <__strftime.isra.0+0x630>
 802db96:	6833      	ldr	r3, [r6, #0]
 802db98:	e65e      	b.n	802d858 <__strftime.isra.0+0x3bc>
 802db9a:	1e6b      	subs	r3, r5, #1
 802db9c:	429c      	cmp	r4, r3
 802db9e:	f4bf ae0d 	bcs.w	802d7bc <__strftime.isra.0+0x320>
 802dba2:	f104 0a01 	add.w	sl, r4, #1
 802dba6:	2309      	movs	r3, #9
 802dba8:	e73b      	b.n	802da22 <__strftime.isra.0+0x586>
 802dbaa:	6833      	ldr	r3, [r6, #0]
 802dbac:	9301      	str	r3, [sp, #4]
 802dbae:	6873      	ldr	r3, [r6, #4]
 802dbb0:	9300      	str	r3, [sp, #0]
 802dbb2:	68b3      	ldr	r3, [r6, #8]
 802dbb4:	4a0b      	ldr	r2, [pc, #44]	@ (802dbe4 <__strftime.isra.0+0x748>)
 802dbb6:	e5d1      	b.n	802d75c <__strftime.isra.0+0x2c0>
 802dbb8:	fffff894 	.word	0xfffff894
 802dbbc:	0803c626 	.word	0x0803c626
 802dbc0:	fffff895 	.word	0xfffff895
 802dbc4:	0803c615 	.word	0x0803c615
 802dbc8:	0803c607 	.word	0x0803c607
 802dbcc:	0803c62a 	.word	0x0803c62a
 802dbd0:	0803c7e0 	.word	0x0803c7e0
 802dbd4:	0803c8dd 	.word	0x0803c8dd
 802dbd8:	0803c62f 	.word	0x0803c62f
 802dbdc:	0803c63e 	.word	0x0803c63e
 802dbe0:	0803c634 	.word	0x0803c634
 802dbe4:	0803c639 	.word	0x0803c639
 802dbe8:	1e6b      	subs	r3, r5, #1
 802dbea:	429c      	cmp	r4, r3
 802dbec:	f4bf ade6 	bcs.w	802d7bc <__strftime.isra.0+0x320>
 802dbf0:	69b3      	ldr	r3, [r6, #24]
 802dbf2:	b91b      	cbnz	r3, 802dbfc <__strftime.isra.0+0x760>
 802dbf4:	2337      	movs	r3, #55	@ 0x37
 802dbf6:	f104 0a01 	add.w	sl, r4, #1
 802dbfa:	e712      	b.n	802da22 <__strftime.isra.0+0x586>
 802dbfc:	3330      	adds	r3, #48	@ 0x30
 802dbfe:	b2db      	uxtb	r3, r3
 802dc00:	e7f9      	b.n	802dbf6 <__strftime.isra.0+0x75a>
 802dc02:	69f3      	ldr	r3, [r6, #28]
 802dc04:	69b2      	ldr	r2, [r6, #24]
 802dc06:	3307      	adds	r3, #7
 802dc08:	1a9b      	subs	r3, r3, r2
 802dc0a:	2207      	movs	r2, #7
 802dc0c:	fb93 f3f2 	sdiv	r3, r3, r2
 802dc10:	e622      	b.n	802d858 <__strftime.isra.0+0x3bc>
 802dc12:	4630      	mov	r0, r6
 802dc14:	f7ff fbf0 	bl	802d3f8 <iso_year_adjust>
 802dc18:	69b2      	ldr	r2, [r6, #24]
 802dc1a:	b132      	cbz	r2, 802dc2a <__strftime.isra.0+0x78e>
 802dc1c:	3a01      	subs	r2, #1
 802dc1e:	2800      	cmp	r0, #0
 802dc20:	69f3      	ldr	r3, [r6, #28]
 802dc22:	dc26      	bgt.n	802dc72 <__strftime.isra.0+0x7d6>
 802dc24:	d103      	bne.n	802dc2e <__strftime.isra.0+0x792>
 802dc26:	330a      	adds	r3, #10
 802dc28:	e7ee      	b.n	802dc08 <__strftime.isra.0+0x76c>
 802dc2a:	2206      	movs	r2, #6
 802dc2c:	e7f7      	b.n	802dc1e <__strftime.isra.0+0x782>
 802dc2e:	1ad2      	subs	r2, r2, r3
 802dc30:	6973      	ldr	r3, [r6, #20]
 802dc32:	2b00      	cmp	r3, #0
 802dc34:	f240 716b 	movw	r1, #1899	@ 0x76b
 802dc38:	bfa8      	it	ge
 802dc3a:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802dc3e:	440b      	add	r3, r1
 802dc40:	0799      	lsls	r1, r3, #30
 802dc42:	d105      	bne.n	802dc50 <__strftime.isra.0+0x7b4>
 802dc44:	2064      	movs	r0, #100	@ 0x64
 802dc46:	fb93 f1f0 	sdiv	r1, r3, r0
 802dc4a:	fb00 3111 	mls	r1, r0, r1, r3
 802dc4e:	b971      	cbnz	r1, 802dc6e <__strftime.isra.0+0x7d2>
 802dc50:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802dc54:	fb93 f0f1 	sdiv	r0, r3, r1
 802dc58:	fb01 3310 	mls	r3, r1, r0, r3
 802dc5c:	fab3 f383 	clz	r3, r3
 802dc60:	095b      	lsrs	r3, r3, #5
 802dc62:	1ad2      	subs	r2, r2, r3
 802dc64:	2a04      	cmp	r2, #4
 802dc66:	bfcc      	ite	gt
 802dc68:	2334      	movgt	r3, #52	@ 0x34
 802dc6a:	2335      	movle	r3, #53	@ 0x35
 802dc6c:	e5f4      	b.n	802d858 <__strftime.isra.0+0x3bc>
 802dc6e:	2301      	movs	r3, #1
 802dc70:	e7f7      	b.n	802dc62 <__strftime.isra.0+0x7c6>
 802dc72:	2301      	movs	r3, #1
 802dc74:	e5f0      	b.n	802d858 <__strftime.isra.0+0x3bc>
 802dc76:	496c      	ldr	r1, [pc, #432]	@ (802de28 <__strftime.isra.0+0x98c>)
 802dc78:	9203      	str	r2, [sp, #12]
 802dc7a:	a806      	add	r0, sp, #24
 802dc7c:	f000 fc42 	bl	802e504 <strcpy>
 802dc80:	a806      	add	r0, sp, #24
 802dc82:	f7e2 fb0d 	bl	80102a0 <strlen>
 802dc86:	ab06      	add	r3, sp, #24
 802dc88:	eb03 0a00 	add.w	sl, r3, r0
 802dc8c:	f10a 0a01 	add.w	sl, sl, #1
 802dc90:	46d3      	mov	fp, sl
 802dc92:	f1b9 0f00 	cmp.w	r9, #0
 802dc96:	d009      	beq.n	802dcac <__strftime.isra.0+0x810>
 802dc98:	9a03      	ldr	r2, [sp, #12]
 802dc9a:	f803 9000 	strb.w	r9, [r3, r0]
 802dc9e:	2a05      	cmp	r2, #5
 802dca0:	d901      	bls.n	802dca6 <__strftime.isra.0+0x80a>
 802dca2:	1f93      	subs	r3, r2, #6
 802dca4:	d106      	bne.n	802dcb4 <__strftime.isra.0+0x818>
 802dca6:	4961      	ldr	r1, [pc, #388]	@ (802de2c <__strftime.isra.0+0x990>)
 802dca8:	4658      	mov	r0, fp
 802dcaa:	e5a6      	b.n	802d7fa <__strftime.isra.0+0x35e>
 802dcac:	aa06      	add	r2, sp, #24
 802dcae:	232b      	movs	r3, #43	@ 0x2b
 802dcb0:	5413      	strb	r3, [r2, r0]
 802dcb2:	2304      	movs	r3, #4
 802dcb4:	a90e      	add	r1, sp, #56	@ 0x38
 802dcb6:	4a5e      	ldr	r2, [pc, #376]	@ (802de30 <__strftime.isra.0+0x994>)
 802dcb8:	eba1 010a 	sub.w	r1, r1, sl
 802dcbc:	4650      	mov	r0, sl
 802dcbe:	f001 fee3 	bl	802fa88 <sniprintf>
 802dcc2:	2800      	cmp	r0, #0
 802dcc4:	bfc8      	it	gt
 802dcc6:	eb0a 0b00 	addgt.w	fp, sl, r0
 802dcca:	e7ec      	b.n	802dca6 <__strftime.isra.0+0x80a>
 802dccc:	1e6b      	subs	r3, r5, #1
 802dcce:	429c      	cmp	r4, r3
 802dcd0:	f4bf ad74 	bcs.w	802d7bc <__strftime.isra.0+0x320>
 802dcd4:	69b3      	ldr	r3, [r6, #24]
 802dcd6:	f104 0a01 	add.w	sl, r4, #1
 802dcda:	3330      	adds	r3, #48	@ 0x30
 802dcdc:	e6a1      	b.n	802da22 <__strftime.isra.0+0x586>
 802dcde:	69b2      	ldr	r2, [r6, #24]
 802dce0:	b11a      	cbz	r2, 802dcea <__strftime.isra.0+0x84e>
 802dce2:	3a01      	subs	r2, #1
 802dce4:	69f3      	ldr	r3, [r6, #28]
 802dce6:	3307      	adds	r3, #7
 802dce8:	e78e      	b.n	802dc08 <__strftime.isra.0+0x76c>
 802dcea:	2206      	movs	r2, #6
 802dcec:	e7fa      	b.n	802dce4 <__strftime.isra.0+0x848>
 802dcee:	6970      	ldr	r0, [r6, #20]
 802dcf0:	2800      	cmp	r0, #0
 802dcf2:	db05      	blt.n	802dd00 <__strftime.isra.0+0x864>
 802dcf4:	2364      	movs	r3, #100	@ 0x64
 802dcf6:	fb90 f2f3 	sdiv	r2, r0, r3
 802dcfa:	fb02 0313 	mls	r3, r2, r3, r0
 802dcfe:	e5ab      	b.n	802d858 <__strftime.isra.0+0x3bc>
 802dd00:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802dd04:	f000 fc9b 	bl	802e63e <abs>
 802dd08:	e7f4      	b.n	802dcf4 <__strftime.isra.0+0x858>
 802dd0a:	6971      	ldr	r1, [r6, #20]
 802dd0c:	4849      	ldr	r0, [pc, #292]	@ (802de34 <__strftime.isra.0+0x998>)
 802dd0e:	4281      	cmp	r1, r0
 802dd10:	da09      	bge.n	802dd26 <__strftime.isra.0+0x88a>
 802dd12:	eba0 0a01 	sub.w	sl, r0, r1
 802dd16:	212d      	movs	r1, #45	@ 0x2d
 802dd18:	f88d 1018 	strb.w	r1, [sp, #24]
 802dd1c:	b102      	cbz	r2, 802dd20 <__strftime.isra.0+0x884>
 802dd1e:	3a01      	subs	r2, #1
 802dd20:	f10d 0119 	add.w	r1, sp, #25
 802dd24:	e609      	b.n	802d93a <__strftime.isra.0+0x49e>
 802dd26:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802dd2a:	e5fd      	b.n	802d928 <__strftime.isra.0+0x48c>
 802dd2c:	2330      	movs	r3, #48	@ 0x30
 802dd2e:	1c88      	adds	r0, r1, #2
 802dd30:	704b      	strb	r3, [r1, #1]
 802dd32:	e609      	b.n	802d948 <__strftime.isra.0+0x4ac>
 802dd34:	6a33      	ldr	r3, [r6, #32]
 802dd36:	2b00      	cmp	r3, #0
 802dd38:	da01      	bge.n	802dd3e <__strftime.isra.0+0x8a2>
 802dd3a:	46a2      	mov	sl, r4
 802dd3c:	e45c      	b.n	802d5f8 <__strftime.isra.0+0x15c>
 802dd3e:	f000 f92b 	bl	802df98 <__tz_lock>
 802dd42:	9b02      	ldr	r3, [sp, #8]
 802dd44:	b90b      	cbnz	r3, 802dd4a <__strftime.isra.0+0x8ae>
 802dd46:	f000 f933 	bl	802dfb0 <_tzset_unlocked>
 802dd4a:	f007 fd23 	bl	8035794 <__gettzinfo>
 802dd4e:	6a33      	ldr	r3, [r6, #32]
 802dd50:	2b00      	cmp	r3, #0
 802dd52:	bfd4      	ite	le
 802dd54:	2200      	movle	r2, #0
 802dd56:	2201      	movgt	r2, #1
 802dd58:	2328      	movs	r3, #40	@ 0x28
 802dd5a:	fb02 3303 	mla	r3, r2, r3, r3
 802dd5e:	eb07 0a04 	add.w	sl, r7, r4
 802dd62:	58c3      	ldr	r3, [r0, r3]
 802dd64:	f1c3 0900 	rsb	r9, r3, #0
 802dd68:	f000 f91c 	bl	802dfa4 <__tz_unlock>
 802dd6c:	233c      	movs	r3, #60	@ 0x3c
 802dd6e:	fb99 f0f3 	sdiv	r0, r9, r3
 802dd72:	f001 fbfe 	bl	802f572 <labs>
 802dd76:	233c      	movs	r3, #60	@ 0x3c
 802dd78:	eba5 0b04 	sub.w	fp, r5, r4
 802dd7c:	fb90 f2f3 	sdiv	r2, r0, r3
 802dd80:	fb02 0013 	mls	r0, r2, r3, r0
 802dd84:	9000      	str	r0, [sp, #0]
 802dd86:	4a2c      	ldr	r2, [pc, #176]	@ (802de38 <__strftime.isra.0+0x99c>)
 802dd88:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802dd8c:	4659      	mov	r1, fp
 802dd8e:	4650      	mov	r0, sl
 802dd90:	fb99 f3f3 	sdiv	r3, r9, r3
 802dd94:	f001 fe78 	bl	802fa88 <sniprintf>
 802dd98:	2800      	cmp	r0, #0
 802dd9a:	f6ff ad0f 	blt.w	802d7bc <__strftime.isra.0+0x320>
 802dd9e:	eb00 0a04 	add.w	sl, r0, r4
 802dda2:	4555      	cmp	r5, sl
 802dda4:	f67f ad0a 	bls.w	802d7bc <__strftime.isra.0+0x320>
 802dda8:	2301      	movs	r3, #1
 802ddaa:	9302      	str	r3, [sp, #8]
 802ddac:	e424      	b.n	802d5f8 <__strftime.isra.0+0x15c>
 802ddae:	6a33      	ldr	r3, [r6, #32]
 802ddb0:	2b00      	cmp	r3, #0
 802ddb2:	dbc2      	blt.n	802dd3a <__strftime.isra.0+0x89e>
 802ddb4:	f000 f8f0 	bl	802df98 <__tz_lock>
 802ddb8:	9b02      	ldr	r3, [sp, #8]
 802ddba:	b90b      	cbnz	r3, 802ddc0 <__strftime.isra.0+0x924>
 802ddbc:	f000 f8f8 	bl	802dfb0 <_tzset_unlocked>
 802ddc0:	6a33      	ldr	r3, [r6, #32]
 802ddc2:	4a1e      	ldr	r2, [pc, #120]	@ (802de3c <__strftime.isra.0+0x9a0>)
 802ddc4:	2b00      	cmp	r3, #0
 802ddc6:	bfd4      	ite	le
 802ddc8:	2300      	movle	r3, #0
 802ddca:	2301      	movgt	r3, #1
 802ddcc:	46a2      	mov	sl, r4
 802ddce:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802ddd2:	4648      	mov	r0, r9
 802ddd4:	f7e2 fa64 	bl	80102a0 <strlen>
 802ddd8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802dddc:	4420      	add	r0, r4
 802ddde:	1e6b      	subs	r3, r5, #1
 802dde0:	4550      	cmp	r0, sl
 802dde2:	d102      	bne.n	802ddea <__strftime.isra.0+0x94e>
 802dde4:	f000 f8de 	bl	802dfa4 <__tz_unlock>
 802dde8:	e7de      	b.n	802dda8 <__strftime.isra.0+0x90c>
 802ddea:	4553      	cmp	r3, sl
 802ddec:	d906      	bls.n	802ddfc <__strftime.isra.0+0x960>
 802ddee:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802ddf2:	f807 200a 	strb.w	r2, [r7, sl]
 802ddf6:	f10a 0a01 	add.w	sl, sl, #1
 802ddfa:	e7f1      	b.n	802dde0 <__strftime.isra.0+0x944>
 802ddfc:	f000 f8d2 	bl	802dfa4 <__tz_unlock>
 802de00:	e4dc      	b.n	802d7bc <__strftime.isra.0+0x320>
 802de02:	1e6b      	subs	r3, r5, #1
 802de04:	429c      	cmp	r4, r3
 802de06:	f4bf acd9 	bcs.w	802d7bc <__strftime.isra.0+0x320>
 802de0a:	f104 0a01 	add.w	sl, r4, #1
 802de0e:	2325      	movs	r3, #37	@ 0x25
 802de10:	e607      	b.n	802da22 <__strftime.isra.0+0x586>
 802de12:	46a2      	mov	sl, r4
 802de14:	2d00      	cmp	r5, #0
 802de16:	f43f acd3 	beq.w	802d7c0 <__strftime.isra.0+0x324>
 802de1a:	2300      	movs	r3, #0
 802de1c:	f807 300a 	strb.w	r3, [r7, sl]
 802de20:	e4ce      	b.n	802d7c0 <__strftime.isra.0+0x324>
 802de22:	4649      	mov	r1, r9
 802de24:	e778      	b.n	802dd18 <__strftime.isra.0+0x87c>
 802de26:	bf00      	nop
 802de28:	0803c648 	.word	0x0803c648
 802de2c:	0803c7b0 	.word	0x0803c7b0
 802de30:	0803c61a 	.word	0x0803c61a
 802de34:	fffff894 	.word	0xfffff894
 802de38:	0803c650 	.word	0x0803c650
 802de3c:	20000164 	.word	0x20000164

0802de40 <strftime>:
 802de40:	f7ff bb2c 	b.w	802d49c <__strftime.isra.0>

0802de44 <__tzcalc_limits>:
 802de44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802de48:	4604      	mov	r4, r0
 802de4a:	f007 fca3 	bl	8035794 <__gettzinfo>
 802de4e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802de52:	429c      	cmp	r4, r3
 802de54:	f340 8099 	ble.w	802df8a <__tzcalc_limits+0x146>
 802de58:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802de5c:	19e5      	adds	r5, r4, r7
 802de5e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802de62:	f240 126d 	movw	r2, #365	@ 0x16d
 802de66:	10ad      	asrs	r5, r5, #2
 802de68:	fb02 5503 	mla	r5, r2, r3, r5
 802de6c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802de70:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802de74:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802de78:	4f45      	ldr	r7, [pc, #276]	@ (802df90 <__tzcalc_limits+0x14c>)
 802de7a:	fb93 f3f2 	sdiv	r3, r3, r2
 802de7e:	441d      	add	r5, r3
 802de80:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802de84:	eb04 030c 	add.w	r3, r4, ip
 802de88:	6044      	str	r4, [r0, #4]
 802de8a:	fbb3 f3f2 	udiv	r3, r3, r2
 802de8e:	4601      	mov	r1, r0
 802de90:	441d      	add	r5, r3
 802de92:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802de96:	7a0b      	ldrb	r3, [r1, #8]
 802de98:	694a      	ldr	r2, [r1, #20]
 802de9a:	2b4a      	cmp	r3, #74	@ 0x4a
 802de9c:	d133      	bne.n	802df06 <__tzcalc_limits+0xc2>
 802de9e:	07a6      	lsls	r6, r4, #30
 802dea0:	eb05 0302 	add.w	r3, r5, r2
 802dea4:	d106      	bne.n	802deb4 <__tzcalc_limits+0x70>
 802dea6:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802deaa:	fb94 f6fe 	sdiv	r6, r4, lr
 802deae:	fb0e 4616 	mls	r6, lr, r6, r4
 802deb2:	b936      	cbnz	r6, 802dec2 <__tzcalc_limits+0x7e>
 802deb4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802deb8:	fb94 f6fe 	sdiv	r6, r4, lr
 802debc:	fb0e 4616 	mls	r6, lr, r6, r4
 802dec0:	b9fe      	cbnz	r6, 802df02 <__tzcalc_limits+0xbe>
 802dec2:	2a3b      	cmp	r2, #59	@ 0x3b
 802dec4:	bfd4      	ite	le
 802dec6:	2200      	movle	r2, #0
 802dec8:	2201      	movgt	r2, #1
 802deca:	4413      	add	r3, r2
 802decc:	3b01      	subs	r3, #1
 802dece:	698a      	ldr	r2, [r1, #24]
 802ded0:	17d6      	asrs	r6, r2, #31
 802ded2:	fbc3 2607 	smlal	r2, r6, r3, r7
 802ded6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802ded8:	18d2      	adds	r2, r2, r3
 802deda:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802dede:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802dee2:	3128      	adds	r1, #40	@ 0x28
 802dee4:	458c      	cmp	ip, r1
 802dee6:	d1d6      	bne.n	802de96 <__tzcalc_limits+0x52>
 802dee8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802deec:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802def0:	428c      	cmp	r4, r1
 802def2:	4193      	sbcs	r3, r2
 802def4:	bfb4      	ite	lt
 802def6:	2301      	movlt	r3, #1
 802def8:	2300      	movge	r3, #0
 802defa:	6003      	str	r3, [r0, #0]
 802defc:	2001      	movs	r0, #1
 802defe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802df02:	2200      	movs	r2, #0
 802df04:	e7e1      	b.n	802deca <__tzcalc_limits+0x86>
 802df06:	2b44      	cmp	r3, #68	@ 0x44
 802df08:	d101      	bne.n	802df0e <__tzcalc_limits+0xca>
 802df0a:	18ab      	adds	r3, r5, r2
 802df0c:	e7df      	b.n	802dece <__tzcalc_limits+0x8a>
 802df0e:	07a3      	lsls	r3, r4, #30
 802df10:	d105      	bne.n	802df1e <__tzcalc_limits+0xda>
 802df12:	2664      	movs	r6, #100	@ 0x64
 802df14:	fb94 f3f6 	sdiv	r3, r4, r6
 802df18:	fb06 4313 	mls	r3, r6, r3, r4
 802df1c:	bb7b      	cbnz	r3, 802df7e <__tzcalc_limits+0x13a>
 802df1e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802df22:	fb94 f6f3 	sdiv	r6, r4, r3
 802df26:	fb03 4616 	mls	r6, r3, r6, r4
 802df2a:	fab6 f686 	clz	r6, r6
 802df2e:	0976      	lsrs	r6, r6, #5
 802df30:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802df94 <__tzcalc_limits+0x150>
 802df34:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802df38:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802df3c:	462b      	mov	r3, r5
 802df3e:	f04f 0800 	mov.w	r8, #0
 802df42:	fb0a e606 	mla	r6, sl, r6, lr
 802df46:	f108 0801 	add.w	r8, r8, #1
 802df4a:	45c1      	cmp	r9, r8
 802df4c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802df50:	dc17      	bgt.n	802df82 <__tzcalc_limits+0x13e>
 802df52:	f103 0804 	add.w	r8, r3, #4
 802df56:	2607      	movs	r6, #7
 802df58:	fb98 f6f6 	sdiv	r6, r8, r6
 802df5c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802df60:	eba8 0606 	sub.w	r6, r8, r6
 802df64:	1b92      	subs	r2, r2, r6
 802df66:	690e      	ldr	r6, [r1, #16]
 802df68:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802df6c:	bf48      	it	mi
 802df6e:	3207      	addmi	r2, #7
 802df70:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802df74:	4432      	add	r2, r6
 802df76:	4572      	cmp	r2, lr
 802df78:	da05      	bge.n	802df86 <__tzcalc_limits+0x142>
 802df7a:	4413      	add	r3, r2
 802df7c:	e7a7      	b.n	802dece <__tzcalc_limits+0x8a>
 802df7e:	2601      	movs	r6, #1
 802df80:	e7d6      	b.n	802df30 <__tzcalc_limits+0xec>
 802df82:	4473      	add	r3, lr
 802df84:	e7df      	b.n	802df46 <__tzcalc_limits+0x102>
 802df86:	3a07      	subs	r2, #7
 802df88:	e7f5      	b.n	802df76 <__tzcalc_limits+0x132>
 802df8a:	2000      	movs	r0, #0
 802df8c:	e7b7      	b.n	802defe <__tzcalc_limits+0xba>
 802df8e:	bf00      	nop
 802df90:	00015180 	.word	0x00015180
 802df94:	0803c590 	.word	0x0803c590

0802df98 <__tz_lock>:
 802df98:	4801      	ldr	r0, [pc, #4]	@ (802dfa0 <__tz_lock+0x8>)
 802df9a:	f000 bae1 	b.w	802e560 <__retarget_lock_acquire>
 802df9e:	bf00      	nop
 802dfa0:	2001a0e8 	.word	0x2001a0e8

0802dfa4 <__tz_unlock>:
 802dfa4:	4801      	ldr	r0, [pc, #4]	@ (802dfac <__tz_unlock+0x8>)
 802dfa6:	f000 badd 	b.w	802e564 <__retarget_lock_release>
 802dfaa:	bf00      	nop
 802dfac:	2001a0e8 	.word	0x2001a0e8

0802dfb0 <_tzset_unlocked>:
 802dfb0:	4b01      	ldr	r3, [pc, #4]	@ (802dfb8 <_tzset_unlocked+0x8>)
 802dfb2:	6818      	ldr	r0, [r3, #0]
 802dfb4:	f000 b802 	b.w	802dfbc <_tzset_unlocked_r>
 802dfb8:	200002d8 	.word	0x200002d8

0802dfbc <_tzset_unlocked_r>:
 802dfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dfc0:	b08d      	sub	sp, #52	@ 0x34
 802dfc2:	4607      	mov	r7, r0
 802dfc4:	f007 fbe6 	bl	8035794 <__gettzinfo>
 802dfc8:	49bc      	ldr	r1, [pc, #752]	@ (802e2bc <_tzset_unlocked_r+0x300>)
 802dfca:	4dbd      	ldr	r5, [pc, #756]	@ (802e2c0 <_tzset_unlocked_r+0x304>)
 802dfcc:	4604      	mov	r4, r0
 802dfce:	4638      	mov	r0, r7
 802dfd0:	f001 fac8 	bl	802f564 <_getenv_r>
 802dfd4:	4606      	mov	r6, r0
 802dfd6:	bb10      	cbnz	r0, 802e01e <_tzset_unlocked_r+0x62>
 802dfd8:	4bba      	ldr	r3, [pc, #744]	@ (802e2c4 <_tzset_unlocked_r+0x308>)
 802dfda:	4abb      	ldr	r2, [pc, #748]	@ (802e2c8 <_tzset_unlocked_r+0x30c>)
 802dfdc:	6018      	str	r0, [r3, #0]
 802dfde:	4bbb      	ldr	r3, [pc, #748]	@ (802e2cc <_tzset_unlocked_r+0x310>)
 802dfe0:	62a0      	str	r0, [r4, #40]	@ 0x28
 802dfe2:	6018      	str	r0, [r3, #0]
 802dfe4:	4bba      	ldr	r3, [pc, #744]	@ (802e2d0 <_tzset_unlocked_r+0x314>)
 802dfe6:	6520      	str	r0, [r4, #80]	@ 0x50
 802dfe8:	e9c3 2200 	strd	r2, r2, [r3]
 802dfec:	214a      	movs	r1, #74	@ 0x4a
 802dfee:	2200      	movs	r2, #0
 802dff0:	2300      	movs	r3, #0
 802dff2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802dff6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802dffa:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802dffe:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802e002:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802e006:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802e00a:	6828      	ldr	r0, [r5, #0]
 802e00c:	7221      	strb	r1, [r4, #8]
 802e00e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802e012:	f001 fabb 	bl	802f58c <free>
 802e016:	602e      	str	r6, [r5, #0]
 802e018:	b00d      	add	sp, #52	@ 0x34
 802e01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e01e:	6829      	ldr	r1, [r5, #0]
 802e020:	2900      	cmp	r1, #0
 802e022:	f040 808e 	bne.w	802e142 <_tzset_unlocked_r+0x186>
 802e026:	6828      	ldr	r0, [r5, #0]
 802e028:	f001 fab0 	bl	802f58c <free>
 802e02c:	4630      	mov	r0, r6
 802e02e:	f7e2 f937 	bl	80102a0 <strlen>
 802e032:	1c41      	adds	r1, r0, #1
 802e034:	4638      	mov	r0, r7
 802e036:	f001 fab1 	bl	802f59c <_malloc_r>
 802e03a:	6028      	str	r0, [r5, #0]
 802e03c:	2800      	cmp	r0, #0
 802e03e:	f040 8086 	bne.w	802e14e <_tzset_unlocked_r+0x192>
 802e042:	4aa2      	ldr	r2, [pc, #648]	@ (802e2cc <_tzset_unlocked_r+0x310>)
 802e044:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802e2d0 <_tzset_unlocked_r+0x314>
 802e048:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802e2c4 <_tzset_unlocked_r+0x308>
 802e04c:	2300      	movs	r3, #0
 802e04e:	6013      	str	r3, [r2, #0]
 802e050:	4aa0      	ldr	r2, [pc, #640]	@ (802e2d4 <_tzset_unlocked_r+0x318>)
 802e052:	f8ca 3000 	str.w	r3, [sl]
 802e056:	2000      	movs	r0, #0
 802e058:	2100      	movs	r1, #0
 802e05a:	e9c8 2200 	strd	r2, r2, [r8]
 802e05e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802e062:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802e066:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802e06a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802e06e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802e072:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802e076:	224a      	movs	r2, #74	@ 0x4a
 802e078:	7222      	strb	r2, [r4, #8]
 802e07a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802e07c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802e080:	6523      	str	r3, [r4, #80]	@ 0x50
 802e082:	7833      	ldrb	r3, [r6, #0]
 802e084:	2b3a      	cmp	r3, #58	@ 0x3a
 802e086:	bf08      	it	eq
 802e088:	3601      	addeq	r6, #1
 802e08a:	7833      	ldrb	r3, [r6, #0]
 802e08c:	2b3c      	cmp	r3, #60	@ 0x3c
 802e08e:	d162      	bne.n	802e156 <_tzset_unlocked_r+0x19a>
 802e090:	1c75      	adds	r5, r6, #1
 802e092:	4a91      	ldr	r2, [pc, #580]	@ (802e2d8 <_tzset_unlocked_r+0x31c>)
 802e094:	4991      	ldr	r1, [pc, #580]	@ (802e2dc <_tzset_unlocked_r+0x320>)
 802e096:	ab0a      	add	r3, sp, #40	@ 0x28
 802e098:	4628      	mov	r0, r5
 802e09a:	f001 fccb 	bl	802fa34 <siscanf>
 802e09e:	2800      	cmp	r0, #0
 802e0a0:	ddba      	ble.n	802e018 <_tzset_unlocked_r+0x5c>
 802e0a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e0a4:	1eda      	subs	r2, r3, #3
 802e0a6:	2a07      	cmp	r2, #7
 802e0a8:	d8b6      	bhi.n	802e018 <_tzset_unlocked_r+0x5c>
 802e0aa:	5ceb      	ldrb	r3, [r5, r3]
 802e0ac:	2b3e      	cmp	r3, #62	@ 0x3e
 802e0ae:	d1b3      	bne.n	802e018 <_tzset_unlocked_r+0x5c>
 802e0b0:	3602      	adds	r6, #2
 802e0b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e0b4:	18f5      	adds	r5, r6, r3
 802e0b6:	5cf3      	ldrb	r3, [r6, r3]
 802e0b8:	2b2d      	cmp	r3, #45	@ 0x2d
 802e0ba:	d15a      	bne.n	802e172 <_tzset_unlocked_r+0x1b6>
 802e0bc:	3501      	adds	r5, #1
 802e0be:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802e0c2:	2300      	movs	r3, #0
 802e0c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 802e0c8:	f8ad 3020 	strh.w	r3, [sp, #32]
 802e0cc:	af08      	add	r7, sp, #32
 802e0ce:	ab0a      	add	r3, sp, #40	@ 0x28
 802e0d0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802e0d4:	9303      	str	r3, [sp, #12]
 802e0d6:	f10d 031e 	add.w	r3, sp, #30
 802e0da:	9300      	str	r3, [sp, #0]
 802e0dc:	4980      	ldr	r1, [pc, #512]	@ (802e2e0 <_tzset_unlocked_r+0x324>)
 802e0de:	ab0a      	add	r3, sp, #40	@ 0x28
 802e0e0:	aa07      	add	r2, sp, #28
 802e0e2:	4628      	mov	r0, r5
 802e0e4:	f001 fca6 	bl	802fa34 <siscanf>
 802e0e8:	2800      	cmp	r0, #0
 802e0ea:	dd95      	ble.n	802e018 <_tzset_unlocked_r+0x5c>
 802e0ec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802e0f0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802e0f4:	223c      	movs	r2, #60	@ 0x3c
 802e0f6:	fb02 6603 	mla	r6, r2, r3, r6
 802e0fa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802e0fe:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802e102:	fb02 6603 	mla	r6, r2, r3, r6
 802e106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e108:	fb09 f606 	mul.w	r6, r9, r6
 802e10c:	eb05 0903 	add.w	r9, r5, r3
 802e110:	5ceb      	ldrb	r3, [r5, r3]
 802e112:	2b3c      	cmp	r3, #60	@ 0x3c
 802e114:	f040 80ee 	bne.w	802e2f4 <_tzset_unlocked_r+0x338>
 802e118:	f109 0501 	add.w	r5, r9, #1
 802e11c:	4a71      	ldr	r2, [pc, #452]	@ (802e2e4 <_tzset_unlocked_r+0x328>)
 802e11e:	496f      	ldr	r1, [pc, #444]	@ (802e2dc <_tzset_unlocked_r+0x320>)
 802e120:	ab0a      	add	r3, sp, #40	@ 0x28
 802e122:	4628      	mov	r0, r5
 802e124:	f001 fc86 	bl	802fa34 <siscanf>
 802e128:	2800      	cmp	r0, #0
 802e12a:	dc28      	bgt.n	802e17e <_tzset_unlocked_r+0x1c2>
 802e12c:	f899 3001 	ldrb.w	r3, [r9, #1]
 802e130:	2b3e      	cmp	r3, #62	@ 0x3e
 802e132:	d124      	bne.n	802e17e <_tzset_unlocked_r+0x1c2>
 802e134:	4b68      	ldr	r3, [pc, #416]	@ (802e2d8 <_tzset_unlocked_r+0x31c>)
 802e136:	62a6      	str	r6, [r4, #40]	@ 0x28
 802e138:	e9c8 3300 	strd	r3, r3, [r8]
 802e13c:	f8ca 6000 	str.w	r6, [sl]
 802e140:	e76a      	b.n	802e018 <_tzset_unlocked_r+0x5c>
 802e142:	f7e2 f84d 	bl	80101e0 <strcmp>
 802e146:	2800      	cmp	r0, #0
 802e148:	f47f af6d 	bne.w	802e026 <_tzset_unlocked_r+0x6a>
 802e14c:	e764      	b.n	802e018 <_tzset_unlocked_r+0x5c>
 802e14e:	4631      	mov	r1, r6
 802e150:	f000 f9d8 	bl	802e504 <strcpy>
 802e154:	e775      	b.n	802e042 <_tzset_unlocked_r+0x86>
 802e156:	4a60      	ldr	r2, [pc, #384]	@ (802e2d8 <_tzset_unlocked_r+0x31c>)
 802e158:	4963      	ldr	r1, [pc, #396]	@ (802e2e8 <_tzset_unlocked_r+0x32c>)
 802e15a:	ab0a      	add	r3, sp, #40	@ 0x28
 802e15c:	4630      	mov	r0, r6
 802e15e:	f001 fc69 	bl	802fa34 <siscanf>
 802e162:	2800      	cmp	r0, #0
 802e164:	f77f af58 	ble.w	802e018 <_tzset_unlocked_r+0x5c>
 802e168:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e16a:	3b03      	subs	r3, #3
 802e16c:	2b07      	cmp	r3, #7
 802e16e:	d9a0      	bls.n	802e0b2 <_tzset_unlocked_r+0xf6>
 802e170:	e752      	b.n	802e018 <_tzset_unlocked_r+0x5c>
 802e172:	2b2b      	cmp	r3, #43	@ 0x2b
 802e174:	bf08      	it	eq
 802e176:	3501      	addeq	r5, #1
 802e178:	f04f 0901 	mov.w	r9, #1
 802e17c:	e7a1      	b.n	802e0c2 <_tzset_unlocked_r+0x106>
 802e17e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e180:	1eda      	subs	r2, r3, #3
 802e182:	2a07      	cmp	r2, #7
 802e184:	f63f af48 	bhi.w	802e018 <_tzset_unlocked_r+0x5c>
 802e188:	5ceb      	ldrb	r3, [r5, r3]
 802e18a:	2b3e      	cmp	r3, #62	@ 0x3e
 802e18c:	f47f af44 	bne.w	802e018 <_tzset_unlocked_r+0x5c>
 802e190:	f109 0902 	add.w	r9, r9, #2
 802e194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e196:	eb09 0503 	add.w	r5, r9, r3
 802e19a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802e19e:	2b2d      	cmp	r3, #45	@ 0x2d
 802e1a0:	f040 80b7 	bne.w	802e312 <_tzset_unlocked_r+0x356>
 802e1a4:	3501      	adds	r5, #1
 802e1a6:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802e1aa:	2300      	movs	r3, #0
 802e1ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 802e1b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 802e1b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 802e1b8:	930a      	str	r3, [sp, #40]	@ 0x28
 802e1ba:	ab0a      	add	r3, sp, #40	@ 0x28
 802e1bc:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802e1c0:	9301      	str	r3, [sp, #4]
 802e1c2:	f10d 031e 	add.w	r3, sp, #30
 802e1c6:	9300      	str	r3, [sp, #0]
 802e1c8:	4945      	ldr	r1, [pc, #276]	@ (802e2e0 <_tzset_unlocked_r+0x324>)
 802e1ca:	ab0a      	add	r3, sp, #40	@ 0x28
 802e1cc:	aa07      	add	r2, sp, #28
 802e1ce:	4628      	mov	r0, r5
 802e1d0:	f001 fc30 	bl	802fa34 <siscanf>
 802e1d4:	2800      	cmp	r0, #0
 802e1d6:	f300 80a2 	bgt.w	802e31e <_tzset_unlocked_r+0x362>
 802e1da:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802e1de:	9304      	str	r3, [sp, #16]
 802e1e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e1e2:	4627      	mov	r7, r4
 802e1e4:	441d      	add	r5, r3
 802e1e6:	f04f 0b00 	mov.w	fp, #0
 802e1ea:	782b      	ldrb	r3, [r5, #0]
 802e1ec:	2b2c      	cmp	r3, #44	@ 0x2c
 802e1ee:	bf08      	it	eq
 802e1f0:	3501      	addeq	r5, #1
 802e1f2:	f895 9000 	ldrb.w	r9, [r5]
 802e1f6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802e1fa:	f040 80a3 	bne.w	802e344 <_tzset_unlocked_r+0x388>
 802e1fe:	ab0a      	add	r3, sp, #40	@ 0x28
 802e200:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802e204:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802e208:	aa09      	add	r2, sp, #36	@ 0x24
 802e20a:	9200      	str	r2, [sp, #0]
 802e20c:	4937      	ldr	r1, [pc, #220]	@ (802e2ec <_tzset_unlocked_r+0x330>)
 802e20e:	9303      	str	r3, [sp, #12]
 802e210:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802e214:	4628      	mov	r0, r5
 802e216:	f001 fc0d 	bl	802fa34 <siscanf>
 802e21a:	2803      	cmp	r0, #3
 802e21c:	f47f aefc 	bne.w	802e018 <_tzset_unlocked_r+0x5c>
 802e220:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802e224:	1e4b      	subs	r3, r1, #1
 802e226:	2b0b      	cmp	r3, #11
 802e228:	f63f aef6 	bhi.w	802e018 <_tzset_unlocked_r+0x5c>
 802e22c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802e230:	1e53      	subs	r3, r2, #1
 802e232:	2b04      	cmp	r3, #4
 802e234:	f63f aef0 	bhi.w	802e018 <_tzset_unlocked_r+0x5c>
 802e238:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802e23c:	2b06      	cmp	r3, #6
 802e23e:	f63f aeeb 	bhi.w	802e018 <_tzset_unlocked_r+0x5c>
 802e242:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802e246:	f887 9008 	strb.w	r9, [r7, #8]
 802e24a:	617b      	str	r3, [r7, #20]
 802e24c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e24e:	eb05 0903 	add.w	r9, r5, r3
 802e252:	2500      	movs	r5, #0
 802e254:	f04f 0302 	mov.w	r3, #2
 802e258:	f8ad 301c 	strh.w	r3, [sp, #28]
 802e25c:	f8ad 501e 	strh.w	r5, [sp, #30]
 802e260:	f8ad 5020 	strh.w	r5, [sp, #32]
 802e264:	950a      	str	r5, [sp, #40]	@ 0x28
 802e266:	f899 3000 	ldrb.w	r3, [r9]
 802e26a:	2b2f      	cmp	r3, #47	@ 0x2f
 802e26c:	f040 8096 	bne.w	802e39c <_tzset_unlocked_r+0x3e0>
 802e270:	ab0a      	add	r3, sp, #40	@ 0x28
 802e272:	aa08      	add	r2, sp, #32
 802e274:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802e278:	f10d 021e 	add.w	r2, sp, #30
 802e27c:	9200      	str	r2, [sp, #0]
 802e27e:	491c      	ldr	r1, [pc, #112]	@ (802e2f0 <_tzset_unlocked_r+0x334>)
 802e280:	9303      	str	r3, [sp, #12]
 802e282:	aa07      	add	r2, sp, #28
 802e284:	4648      	mov	r0, r9
 802e286:	f001 fbd5 	bl	802fa34 <siscanf>
 802e28a:	42a8      	cmp	r0, r5
 802e28c:	f300 8086 	bgt.w	802e39c <_tzset_unlocked_r+0x3e0>
 802e290:	214a      	movs	r1, #74	@ 0x4a
 802e292:	2200      	movs	r2, #0
 802e294:	2300      	movs	r3, #0
 802e296:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802e29a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802e29e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802e2a2:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802e2a6:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802e2aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802e2ae:	7221      	strb	r1, [r4, #8]
 802e2b0:	62a5      	str	r5, [r4, #40]	@ 0x28
 802e2b2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802e2b6:	6525      	str	r5, [r4, #80]	@ 0x50
 802e2b8:	e6ae      	b.n	802e018 <_tzset_unlocked_r+0x5c>
 802e2ba:	bf00      	nop
 802e2bc:	0803c65c 	.word	0x0803c65c
 802e2c0:	2001a0c0 	.word	0x2001a0c0
 802e2c4:	2001a0dc 	.word	0x2001a0dc
 802e2c8:	0803c65f 	.word	0x0803c65f
 802e2cc:	2001a0e0 	.word	0x2001a0e0
 802e2d0:	20000164 	.word	0x20000164
 802e2d4:	0803c51e 	.word	0x0803c51e
 802e2d8:	2001a0d0 	.word	0x2001a0d0
 802e2dc:	0803c663 	.word	0x0803c663
 802e2e0:	0803c698 	.word	0x0803c698
 802e2e4:	2001a0c4 	.word	0x2001a0c4
 802e2e8:	0803c676 	.word	0x0803c676
 802e2ec:	0803c684 	.word	0x0803c684
 802e2f0:	0803c697 	.word	0x0803c697
 802e2f4:	4a3e      	ldr	r2, [pc, #248]	@ (802e3f0 <_tzset_unlocked_r+0x434>)
 802e2f6:	493f      	ldr	r1, [pc, #252]	@ (802e3f4 <_tzset_unlocked_r+0x438>)
 802e2f8:	ab0a      	add	r3, sp, #40	@ 0x28
 802e2fa:	4648      	mov	r0, r9
 802e2fc:	f001 fb9a 	bl	802fa34 <siscanf>
 802e300:	2800      	cmp	r0, #0
 802e302:	f77f af17 	ble.w	802e134 <_tzset_unlocked_r+0x178>
 802e306:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e308:	3b03      	subs	r3, #3
 802e30a:	2b07      	cmp	r3, #7
 802e30c:	f67f af42 	bls.w	802e194 <_tzset_unlocked_r+0x1d8>
 802e310:	e682      	b.n	802e018 <_tzset_unlocked_r+0x5c>
 802e312:	2b2b      	cmp	r3, #43	@ 0x2b
 802e314:	bf08      	it	eq
 802e316:	3501      	addeq	r5, #1
 802e318:	f04f 0901 	mov.w	r9, #1
 802e31c:	e745      	b.n	802e1aa <_tzset_unlocked_r+0x1ee>
 802e31e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802e322:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802e326:	213c      	movs	r1, #60	@ 0x3c
 802e328:	fb01 3302 	mla	r3, r1, r2, r3
 802e32c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802e330:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802e334:	fb01 3302 	mla	r3, r1, r2, r3
 802e338:	fb09 f303 	mul.w	r3, r9, r3
 802e33c:	e74f      	b.n	802e1de <_tzset_unlocked_r+0x222>
 802e33e:	f04f 0b01 	mov.w	fp, #1
 802e342:	e752      	b.n	802e1ea <_tzset_unlocked_r+0x22e>
 802e344:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802e348:	bf06      	itte	eq
 802e34a:	3501      	addeq	r5, #1
 802e34c:	464b      	moveq	r3, r9
 802e34e:	2344      	movne	r3, #68	@ 0x44
 802e350:	220a      	movs	r2, #10
 802e352:	a90b      	add	r1, sp, #44	@ 0x2c
 802e354:	4628      	mov	r0, r5
 802e356:	9305      	str	r3, [sp, #20]
 802e358:	f007 f950 	bl	80355fc <strtoul>
 802e35c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802e360:	9b05      	ldr	r3, [sp, #20]
 802e362:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802e366:	45a9      	cmp	r9, r5
 802e368:	d114      	bne.n	802e394 <_tzset_unlocked_r+0x3d8>
 802e36a:	234d      	movs	r3, #77	@ 0x4d
 802e36c:	f1bb 0f00 	cmp.w	fp, #0
 802e370:	d107      	bne.n	802e382 <_tzset_unlocked_r+0x3c6>
 802e372:	7223      	strb	r3, [r4, #8]
 802e374:	2103      	movs	r1, #3
 802e376:	2302      	movs	r3, #2
 802e378:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802e37c:	f8c4 b014 	str.w	fp, [r4, #20]
 802e380:	e767      	b.n	802e252 <_tzset_unlocked_r+0x296>
 802e382:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802e386:	220b      	movs	r2, #11
 802e388:	2301      	movs	r3, #1
 802e38a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802e38e:	2300      	movs	r3, #0
 802e390:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802e392:	e75e      	b.n	802e252 <_tzset_unlocked_r+0x296>
 802e394:	b280      	uxth	r0, r0
 802e396:	723b      	strb	r3, [r7, #8]
 802e398:	6178      	str	r0, [r7, #20]
 802e39a:	e75a      	b.n	802e252 <_tzset_unlocked_r+0x296>
 802e39c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802e3a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802e3a4:	213c      	movs	r1, #60	@ 0x3c
 802e3a6:	fb01 3302 	mla	r3, r1, r2, r3
 802e3aa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802e3ae:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802e3b2:	fb01 3302 	mla	r3, r1, r2, r3
 802e3b6:	61bb      	str	r3, [r7, #24]
 802e3b8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802e3ba:	3728      	adds	r7, #40	@ 0x28
 802e3bc:	444d      	add	r5, r9
 802e3be:	f1bb 0f00 	cmp.w	fp, #0
 802e3c2:	d0bc      	beq.n	802e33e <_tzset_unlocked_r+0x382>
 802e3c4:	9b04      	ldr	r3, [sp, #16]
 802e3c6:	6523      	str	r3, [r4, #80]	@ 0x50
 802e3c8:	4b0b      	ldr	r3, [pc, #44]	@ (802e3f8 <_tzset_unlocked_r+0x43c>)
 802e3ca:	f8c8 3000 	str.w	r3, [r8]
 802e3ce:	6860      	ldr	r0, [r4, #4]
 802e3d0:	4b07      	ldr	r3, [pc, #28]	@ (802e3f0 <_tzset_unlocked_r+0x434>)
 802e3d2:	62a6      	str	r6, [r4, #40]	@ 0x28
 802e3d4:	f8c8 3004 	str.w	r3, [r8, #4]
 802e3d8:	f7ff fd34 	bl	802de44 <__tzcalc_limits>
 802e3dc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802e3de:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802e3e0:	f8ca 2000 	str.w	r2, [sl]
 802e3e4:	1a9b      	subs	r3, r3, r2
 802e3e6:	4a05      	ldr	r2, [pc, #20]	@ (802e3fc <_tzset_unlocked_r+0x440>)
 802e3e8:	bf18      	it	ne
 802e3ea:	2301      	movne	r3, #1
 802e3ec:	6013      	str	r3, [r2, #0]
 802e3ee:	e613      	b.n	802e018 <_tzset_unlocked_r+0x5c>
 802e3f0:	2001a0c4 	.word	0x2001a0c4
 802e3f4:	0803c676 	.word	0x0803c676
 802e3f8:	2001a0d0 	.word	0x2001a0d0
 802e3fc:	2001a0e0 	.word	0x2001a0e0

0802e400 <__locale_mb_cur_max>:
 802e400:	4b01      	ldr	r3, [pc, #4]	@ (802e408 <__locale_mb_cur_max+0x8>)
 802e402:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802e406:	4770      	bx	lr
 802e408:	2000016c 	.word	0x2000016c

0802e40c <_localeconv_r>:
 802e40c:	4800      	ldr	r0, [pc, #0]	@ (802e410 <_localeconv_r+0x4>)
 802e40e:	4770      	bx	lr
 802e410:	2000025c 	.word	0x2000025c

0802e414 <_close_r>:
 802e414:	b538      	push	{r3, r4, r5, lr}
 802e416:	4d06      	ldr	r5, [pc, #24]	@ (802e430 <_close_r+0x1c>)
 802e418:	2300      	movs	r3, #0
 802e41a:	4604      	mov	r4, r0
 802e41c:	4608      	mov	r0, r1
 802e41e:	602b      	str	r3, [r5, #0]
 802e420:	f7e4 f95c 	bl	80126dc <_close>
 802e424:	1c43      	adds	r3, r0, #1
 802e426:	d102      	bne.n	802e42e <_close_r+0x1a>
 802e428:	682b      	ldr	r3, [r5, #0]
 802e42a:	b103      	cbz	r3, 802e42e <_close_r+0x1a>
 802e42c:	6023      	str	r3, [r4, #0]
 802e42e:	bd38      	pop	{r3, r4, r5, pc}
 802e430:	2001a0e4 	.word	0x2001a0e4

0802e434 <_reclaim_reent>:
 802e434:	4b14      	ldr	r3, [pc, #80]	@ (802e488 <_reclaim_reent+0x54>)
 802e436:	681b      	ldr	r3, [r3, #0]
 802e438:	4283      	cmp	r3, r0
 802e43a:	b570      	push	{r4, r5, r6, lr}
 802e43c:	4604      	mov	r4, r0
 802e43e:	d022      	beq.n	802e486 <_reclaim_reent+0x52>
 802e440:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802e442:	b153      	cbz	r3, 802e45a <_reclaim_reent+0x26>
 802e444:	2500      	movs	r5, #0
 802e446:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802e448:	5959      	ldr	r1, [r3, r5]
 802e44a:	b9b1      	cbnz	r1, 802e47a <_reclaim_reent+0x46>
 802e44c:	3504      	adds	r5, #4
 802e44e:	2d80      	cmp	r5, #128	@ 0x80
 802e450:	d1f9      	bne.n	802e446 <_reclaim_reent+0x12>
 802e452:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802e454:	4620      	mov	r0, r4
 802e456:	f000 ff89 	bl	802f36c <_free_r>
 802e45a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802e45c:	b111      	cbz	r1, 802e464 <_reclaim_reent+0x30>
 802e45e:	4620      	mov	r0, r4
 802e460:	f000 ff84 	bl	802f36c <_free_r>
 802e464:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802e466:	b111      	cbz	r1, 802e46e <_reclaim_reent+0x3a>
 802e468:	4620      	mov	r0, r4
 802e46a:	f000 ff7f 	bl	802f36c <_free_r>
 802e46e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802e470:	b14b      	cbz	r3, 802e486 <_reclaim_reent+0x52>
 802e472:	4620      	mov	r0, r4
 802e474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e478:	4718      	bx	r3
 802e47a:	680e      	ldr	r6, [r1, #0]
 802e47c:	4620      	mov	r0, r4
 802e47e:	f000 ff75 	bl	802f36c <_free_r>
 802e482:	4631      	mov	r1, r6
 802e484:	e7e1      	b.n	802e44a <_reclaim_reent+0x16>
 802e486:	bd70      	pop	{r4, r5, r6, pc}
 802e488:	200002d8 	.word	0x200002d8

0802e48c <_lseek_r>:
 802e48c:	b538      	push	{r3, r4, r5, lr}
 802e48e:	4d07      	ldr	r5, [pc, #28]	@ (802e4ac <_lseek_r+0x20>)
 802e490:	4604      	mov	r4, r0
 802e492:	4608      	mov	r0, r1
 802e494:	4611      	mov	r1, r2
 802e496:	2200      	movs	r2, #0
 802e498:	602a      	str	r2, [r5, #0]
 802e49a:	461a      	mov	r2, r3
 802e49c:	f7e4 f928 	bl	80126f0 <_lseek>
 802e4a0:	1c43      	adds	r3, r0, #1
 802e4a2:	d102      	bne.n	802e4aa <_lseek_r+0x1e>
 802e4a4:	682b      	ldr	r3, [r5, #0]
 802e4a6:	b103      	cbz	r3, 802e4aa <_lseek_r+0x1e>
 802e4a8:	6023      	str	r3, [r4, #0]
 802e4aa:	bd38      	pop	{r3, r4, r5, pc}
 802e4ac:	2001a0e4 	.word	0x2001a0e4

0802e4b0 <_read_r>:
 802e4b0:	b538      	push	{r3, r4, r5, lr}
 802e4b2:	4d07      	ldr	r5, [pc, #28]	@ (802e4d0 <_read_r+0x20>)
 802e4b4:	4604      	mov	r4, r0
 802e4b6:	4608      	mov	r0, r1
 802e4b8:	4611      	mov	r1, r2
 802e4ba:	2200      	movs	r2, #0
 802e4bc:	602a      	str	r2, [r5, #0]
 802e4be:	461a      	mov	r2, r3
 802e4c0:	f7e4 f8ee 	bl	80126a0 <_read>
 802e4c4:	1c43      	adds	r3, r0, #1
 802e4c6:	d102      	bne.n	802e4ce <_read_r+0x1e>
 802e4c8:	682b      	ldr	r3, [r5, #0]
 802e4ca:	b103      	cbz	r3, 802e4ce <_read_r+0x1e>
 802e4cc:	6023      	str	r3, [r4, #0]
 802e4ce:	bd38      	pop	{r3, r4, r5, pc}
 802e4d0:	2001a0e4 	.word	0x2001a0e4

0802e4d4 <_write_r>:
 802e4d4:	b538      	push	{r3, r4, r5, lr}
 802e4d6:	4d07      	ldr	r5, [pc, #28]	@ (802e4f4 <_write_r+0x20>)
 802e4d8:	4604      	mov	r4, r0
 802e4da:	4608      	mov	r0, r1
 802e4dc:	4611      	mov	r1, r2
 802e4de:	2200      	movs	r2, #0
 802e4e0:	602a      	str	r2, [r5, #0]
 802e4e2:	461a      	mov	r2, r3
 802e4e4:	f7e4 f8ec 	bl	80126c0 <_write>
 802e4e8:	1c43      	adds	r3, r0, #1
 802e4ea:	d102      	bne.n	802e4f2 <_write_r+0x1e>
 802e4ec:	682b      	ldr	r3, [r5, #0]
 802e4ee:	b103      	cbz	r3, 802e4f2 <_write_r+0x1e>
 802e4f0:	6023      	str	r3, [r4, #0]
 802e4f2:	bd38      	pop	{r3, r4, r5, pc}
 802e4f4:	2001a0e4 	.word	0x2001a0e4

0802e4f8 <__errno>:
 802e4f8:	4b01      	ldr	r3, [pc, #4]	@ (802e500 <__errno+0x8>)
 802e4fa:	6818      	ldr	r0, [r3, #0]
 802e4fc:	4770      	bx	lr
 802e4fe:	bf00      	nop
 802e500:	200002d8 	.word	0x200002d8

0802e504 <strcpy>:
 802e504:	4603      	mov	r3, r0
 802e506:	f811 2b01 	ldrb.w	r2, [r1], #1
 802e50a:	f803 2b01 	strb.w	r2, [r3], #1
 802e50e:	2a00      	cmp	r2, #0
 802e510:	d1f9      	bne.n	802e506 <strcpy+0x2>
 802e512:	4770      	bx	lr

0802e514 <__libc_init_array>:
 802e514:	b570      	push	{r4, r5, r6, lr}
 802e516:	4d0d      	ldr	r5, [pc, #52]	@ (802e54c <__libc_init_array+0x38>)
 802e518:	4c0d      	ldr	r4, [pc, #52]	@ (802e550 <__libc_init_array+0x3c>)
 802e51a:	1b64      	subs	r4, r4, r5
 802e51c:	10a4      	asrs	r4, r4, #2
 802e51e:	2600      	movs	r6, #0
 802e520:	42a6      	cmp	r6, r4
 802e522:	d109      	bne.n	802e538 <__libc_init_array+0x24>
 802e524:	4d0b      	ldr	r5, [pc, #44]	@ (802e554 <__libc_init_array+0x40>)
 802e526:	4c0c      	ldr	r4, [pc, #48]	@ (802e558 <__libc_init_array+0x44>)
 802e528:	f007 ff60 	bl	80363ec <_init>
 802e52c:	1b64      	subs	r4, r4, r5
 802e52e:	10a4      	asrs	r4, r4, #2
 802e530:	2600      	movs	r6, #0
 802e532:	42a6      	cmp	r6, r4
 802e534:	d105      	bne.n	802e542 <__libc_init_array+0x2e>
 802e536:	bd70      	pop	{r4, r5, r6, pc}
 802e538:	f855 3b04 	ldr.w	r3, [r5], #4
 802e53c:	4798      	blx	r3
 802e53e:	3601      	adds	r6, #1
 802e540:	e7ee      	b.n	802e520 <__libc_init_array+0xc>
 802e542:	f855 3b04 	ldr.w	r3, [r5], #4
 802e546:	4798      	blx	r3
 802e548:	3601      	adds	r6, #1
 802e54a:	e7f2      	b.n	802e532 <__libc_init_array+0x1e>
 802e54c:	0803ccf0 	.word	0x0803ccf0
 802e550:	0803ccf0 	.word	0x0803ccf0
 802e554:	0803ccf0 	.word	0x0803ccf0
 802e558:	0803ccf8 	.word	0x0803ccf8

0802e55c <__retarget_lock_init_recursive>:
 802e55c:	4770      	bx	lr

0802e55e <__retarget_lock_close_recursive>:
 802e55e:	4770      	bx	lr

0802e560 <__retarget_lock_acquire>:
 802e560:	4770      	bx	lr

0802e562 <__retarget_lock_acquire_recursive>:
 802e562:	4770      	bx	lr

0802e564 <__retarget_lock_release>:
 802e564:	4770      	bx	lr

0802e566 <__retarget_lock_release_recursive>:
 802e566:	4770      	bx	lr

0802e568 <memcpy>:
 802e568:	440a      	add	r2, r1
 802e56a:	4291      	cmp	r1, r2
 802e56c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802e570:	d100      	bne.n	802e574 <memcpy+0xc>
 802e572:	4770      	bx	lr
 802e574:	b510      	push	{r4, lr}
 802e576:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e57a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e57e:	4291      	cmp	r1, r2
 802e580:	d1f9      	bne.n	802e576 <memcpy+0xe>
 802e582:	bd10      	pop	{r4, pc}

0802e584 <_wcrtomb_r>:
 802e584:	b5f0      	push	{r4, r5, r6, r7, lr}
 802e586:	4c09      	ldr	r4, [pc, #36]	@ (802e5ac <_wcrtomb_r+0x28>)
 802e588:	b085      	sub	sp, #20
 802e58a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802e58e:	4605      	mov	r5, r0
 802e590:	461e      	mov	r6, r3
 802e592:	b909      	cbnz	r1, 802e598 <_wcrtomb_r+0x14>
 802e594:	460a      	mov	r2, r1
 802e596:	a901      	add	r1, sp, #4
 802e598:	47b8      	blx	r7
 802e59a:	1c43      	adds	r3, r0, #1
 802e59c:	bf01      	itttt	eq
 802e59e:	2300      	moveq	r3, #0
 802e5a0:	6033      	streq	r3, [r6, #0]
 802e5a2:	238a      	moveq	r3, #138	@ 0x8a
 802e5a4:	602b      	streq	r3, [r5, #0]
 802e5a6:	b005      	add	sp, #20
 802e5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e5aa:	bf00      	nop
 802e5ac:	2000016c 	.word	0x2000016c

0802e5b0 <frexp>:
 802e5b0:	b570      	push	{r4, r5, r6, lr}
 802e5b2:	2100      	movs	r1, #0
 802e5b4:	ec55 4b10 	vmov	r4, r5, d0
 802e5b8:	6001      	str	r1, [r0, #0]
 802e5ba:	4915      	ldr	r1, [pc, #84]	@ (802e610 <frexp+0x60>)
 802e5bc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802e5c0:	428a      	cmp	r2, r1
 802e5c2:	4606      	mov	r6, r0
 802e5c4:	462b      	mov	r3, r5
 802e5c6:	d820      	bhi.n	802e60a <frexp+0x5a>
 802e5c8:	4621      	mov	r1, r4
 802e5ca:	4311      	orrs	r1, r2
 802e5cc:	d01d      	beq.n	802e60a <frexp+0x5a>
 802e5ce:	4911      	ldr	r1, [pc, #68]	@ (802e614 <frexp+0x64>)
 802e5d0:	4029      	ands	r1, r5
 802e5d2:	b961      	cbnz	r1, 802e5ee <frexp+0x3e>
 802e5d4:	4b10      	ldr	r3, [pc, #64]	@ (802e618 <frexp+0x68>)
 802e5d6:	2200      	movs	r2, #0
 802e5d8:	4620      	mov	r0, r4
 802e5da:	4629      	mov	r1, r5
 802e5dc:	f7e2 f824 	bl	8010628 <__aeabi_dmul>
 802e5e0:	460b      	mov	r3, r1
 802e5e2:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 802e5e6:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802e5ea:	4604      	mov	r4, r0
 802e5ec:	6031      	str	r1, [r6, #0]
 802e5ee:	6831      	ldr	r1, [r6, #0]
 802e5f0:	1512      	asrs	r2, r2, #20
 802e5f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802e5f6:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802e5fa:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802e5fe:	4411      	add	r1, r2
 802e600:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 802e604:	6031      	str	r1, [r6, #0]
 802e606:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802e60a:	ec45 4b10 	vmov	d0, r4, r5
 802e60e:	bd70      	pop	{r4, r5, r6, pc}
 802e610:	7fefffff 	.word	0x7fefffff
 802e614:	7ff00000 	.word	0x7ff00000
 802e618:	43500000 	.word	0x43500000

0802e61c <register_fini>:
 802e61c:	4b02      	ldr	r3, [pc, #8]	@ (802e628 <register_fini+0xc>)
 802e61e:	b113      	cbz	r3, 802e626 <register_fini+0xa>
 802e620:	4802      	ldr	r0, [pc, #8]	@ (802e62c <register_fini+0x10>)
 802e622:	f000 b810 	b.w	802e646 <atexit>
 802e626:	4770      	bx	lr
 802e628:	00000000 	.word	0x00000000
 802e62c:	08035aad 	.word	0x08035aad

0802e630 <abort>:
 802e630:	b508      	push	{r3, lr}
 802e632:	2006      	movs	r0, #6
 802e634:	f007 f8a6 	bl	8035784 <raise>
 802e638:	2001      	movs	r0, #1
 802e63a:	f7e4 f82b 	bl	8012694 <_exit>

0802e63e <abs>:
 802e63e:	2800      	cmp	r0, #0
 802e640:	bfb8      	it	lt
 802e642:	4240      	neglt	r0, r0
 802e644:	4770      	bx	lr

0802e646 <atexit>:
 802e646:	2300      	movs	r3, #0
 802e648:	4601      	mov	r1, r0
 802e64a:	461a      	mov	r2, r3
 802e64c:	4618      	mov	r0, r3
 802e64e:	f007 bb01 	b.w	8035c54 <__register_exitproc>

0802e652 <quorem>:
 802e652:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e656:	6903      	ldr	r3, [r0, #16]
 802e658:	690c      	ldr	r4, [r1, #16]
 802e65a:	42a3      	cmp	r3, r4
 802e65c:	4607      	mov	r7, r0
 802e65e:	db7e      	blt.n	802e75e <quorem+0x10c>
 802e660:	3c01      	subs	r4, #1
 802e662:	f101 0814 	add.w	r8, r1, #20
 802e666:	00a3      	lsls	r3, r4, #2
 802e668:	f100 0514 	add.w	r5, r0, #20
 802e66c:	9300      	str	r3, [sp, #0]
 802e66e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802e672:	9301      	str	r3, [sp, #4]
 802e674:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802e678:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802e67c:	3301      	adds	r3, #1
 802e67e:	429a      	cmp	r2, r3
 802e680:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802e684:	fbb2 f6f3 	udiv	r6, r2, r3
 802e688:	d32e      	bcc.n	802e6e8 <quorem+0x96>
 802e68a:	f04f 0a00 	mov.w	sl, #0
 802e68e:	46c4      	mov	ip, r8
 802e690:	46ae      	mov	lr, r5
 802e692:	46d3      	mov	fp, sl
 802e694:	f85c 3b04 	ldr.w	r3, [ip], #4
 802e698:	b298      	uxth	r0, r3
 802e69a:	fb06 a000 	mla	r0, r6, r0, sl
 802e69e:	0c02      	lsrs	r2, r0, #16
 802e6a0:	0c1b      	lsrs	r3, r3, #16
 802e6a2:	fb06 2303 	mla	r3, r6, r3, r2
 802e6a6:	f8de 2000 	ldr.w	r2, [lr]
 802e6aa:	b280      	uxth	r0, r0
 802e6ac:	b292      	uxth	r2, r2
 802e6ae:	1a12      	subs	r2, r2, r0
 802e6b0:	445a      	add	r2, fp
 802e6b2:	f8de 0000 	ldr.w	r0, [lr]
 802e6b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802e6ba:	b29b      	uxth	r3, r3
 802e6bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802e6c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802e6c4:	b292      	uxth	r2, r2
 802e6c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802e6ca:	45e1      	cmp	r9, ip
 802e6cc:	f84e 2b04 	str.w	r2, [lr], #4
 802e6d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802e6d4:	d2de      	bcs.n	802e694 <quorem+0x42>
 802e6d6:	9b00      	ldr	r3, [sp, #0]
 802e6d8:	58eb      	ldr	r3, [r5, r3]
 802e6da:	b92b      	cbnz	r3, 802e6e8 <quorem+0x96>
 802e6dc:	9b01      	ldr	r3, [sp, #4]
 802e6de:	3b04      	subs	r3, #4
 802e6e0:	429d      	cmp	r5, r3
 802e6e2:	461a      	mov	r2, r3
 802e6e4:	d32f      	bcc.n	802e746 <quorem+0xf4>
 802e6e6:	613c      	str	r4, [r7, #16]
 802e6e8:	4638      	mov	r0, r7
 802e6ea:	f005 fce3 	bl	80340b4 <__mcmp>
 802e6ee:	2800      	cmp	r0, #0
 802e6f0:	db25      	blt.n	802e73e <quorem+0xec>
 802e6f2:	4629      	mov	r1, r5
 802e6f4:	2000      	movs	r0, #0
 802e6f6:	f858 2b04 	ldr.w	r2, [r8], #4
 802e6fa:	f8d1 c000 	ldr.w	ip, [r1]
 802e6fe:	fa1f fe82 	uxth.w	lr, r2
 802e702:	fa1f f38c 	uxth.w	r3, ip
 802e706:	eba3 030e 	sub.w	r3, r3, lr
 802e70a:	4403      	add	r3, r0
 802e70c:	0c12      	lsrs	r2, r2, #16
 802e70e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802e712:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802e716:	b29b      	uxth	r3, r3
 802e718:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802e71c:	45c1      	cmp	r9, r8
 802e71e:	f841 3b04 	str.w	r3, [r1], #4
 802e722:	ea4f 4022 	mov.w	r0, r2, asr #16
 802e726:	d2e6      	bcs.n	802e6f6 <quorem+0xa4>
 802e728:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802e72c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802e730:	b922      	cbnz	r2, 802e73c <quorem+0xea>
 802e732:	3b04      	subs	r3, #4
 802e734:	429d      	cmp	r5, r3
 802e736:	461a      	mov	r2, r3
 802e738:	d30b      	bcc.n	802e752 <quorem+0x100>
 802e73a:	613c      	str	r4, [r7, #16]
 802e73c:	3601      	adds	r6, #1
 802e73e:	4630      	mov	r0, r6
 802e740:	b003      	add	sp, #12
 802e742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e746:	6812      	ldr	r2, [r2, #0]
 802e748:	3b04      	subs	r3, #4
 802e74a:	2a00      	cmp	r2, #0
 802e74c:	d1cb      	bne.n	802e6e6 <quorem+0x94>
 802e74e:	3c01      	subs	r4, #1
 802e750:	e7c6      	b.n	802e6e0 <quorem+0x8e>
 802e752:	6812      	ldr	r2, [r2, #0]
 802e754:	3b04      	subs	r3, #4
 802e756:	2a00      	cmp	r2, #0
 802e758:	d1ef      	bne.n	802e73a <quorem+0xe8>
 802e75a:	3c01      	subs	r4, #1
 802e75c:	e7ea      	b.n	802e734 <quorem+0xe2>
 802e75e:	2000      	movs	r0, #0
 802e760:	e7ee      	b.n	802e740 <quorem+0xee>
 802e762:	0000      	movs	r0, r0
 802e764:	0000      	movs	r0, r0
	...

0802e768 <_dtoa_r>:
 802e768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e76c:	b099      	sub	sp, #100	@ 0x64
 802e76e:	ed8d 0b02 	vstr	d0, [sp, #8]
 802e772:	9109      	str	r1, [sp, #36]	@ 0x24
 802e774:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 802e776:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802e778:	920e      	str	r2, [sp, #56]	@ 0x38
 802e77a:	ec55 4b10 	vmov	r4, r5, d0
 802e77e:	4683      	mov	fp, r0
 802e780:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e782:	b149      	cbz	r1, 802e798 <_dtoa_r+0x30>
 802e784:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802e786:	604a      	str	r2, [r1, #4]
 802e788:	2301      	movs	r3, #1
 802e78a:	4093      	lsls	r3, r2
 802e78c:	608b      	str	r3, [r1, #8]
 802e78e:	f005 fa40 	bl	8033c12 <_Bfree>
 802e792:	2300      	movs	r3, #0
 802e794:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 802e798:	1e2b      	subs	r3, r5, #0
 802e79a:	bfb9      	ittee	lt
 802e79c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802e7a0:	9303      	strlt	r3, [sp, #12]
 802e7a2:	2300      	movge	r3, #0
 802e7a4:	6033      	strge	r3, [r6, #0]
 802e7a6:	9f03      	ldr	r7, [sp, #12]
 802e7a8:	4b97      	ldr	r3, [pc, #604]	@ (802ea08 <_dtoa_r+0x2a0>)
 802e7aa:	bfbc      	itt	lt
 802e7ac:	2201      	movlt	r2, #1
 802e7ae:	6032      	strlt	r2, [r6, #0]
 802e7b0:	43bb      	bics	r3, r7
 802e7b2:	d114      	bne.n	802e7de <_dtoa_r+0x76>
 802e7b4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e7b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 802e7ba:	6013      	str	r3, [r2, #0]
 802e7bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802e7c0:	4323      	orrs	r3, r4
 802e7c2:	f000 854c 	beq.w	802f25e <_dtoa_r+0xaf6>
 802e7c6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e7c8:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802ea20 <_dtoa_r+0x2b8>
 802e7cc:	b11b      	cbz	r3, 802e7d6 <_dtoa_r+0x6e>
 802e7ce:	f10a 0303 	add.w	r3, sl, #3
 802e7d2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802e7d4:	6013      	str	r3, [r2, #0]
 802e7d6:	4650      	mov	r0, sl
 802e7d8:	b019      	add	sp, #100	@ 0x64
 802e7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e7de:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e7e2:	2200      	movs	r2, #0
 802e7e4:	ec51 0b17 	vmov	r0, r1, d7
 802e7e8:	2300      	movs	r3, #0
 802e7ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802e7ee:	f7e2 f983 	bl	8010af8 <__aeabi_dcmpeq>
 802e7f2:	4680      	mov	r8, r0
 802e7f4:	b150      	cbz	r0, 802e80c <_dtoa_r+0xa4>
 802e7f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e7f8:	2301      	movs	r3, #1
 802e7fa:	6013      	str	r3, [r2, #0]
 802e7fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e7fe:	b113      	cbz	r3, 802e806 <_dtoa_r+0x9e>
 802e800:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802e802:	4b82      	ldr	r3, [pc, #520]	@ (802ea0c <_dtoa_r+0x2a4>)
 802e804:	6013      	str	r3, [r2, #0]
 802e806:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 802ea24 <_dtoa_r+0x2bc>
 802e80a:	e7e4      	b.n	802e7d6 <_dtoa_r+0x6e>
 802e80c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802e810:	aa16      	add	r2, sp, #88	@ 0x58
 802e812:	a917      	add	r1, sp, #92	@ 0x5c
 802e814:	4658      	mov	r0, fp
 802e816:	f005 fd6d 	bl	80342f4 <__d2b>
 802e81a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802e81e:	4681      	mov	r9, r0
 802e820:	2e00      	cmp	r6, #0
 802e822:	d077      	beq.n	802e914 <_dtoa_r+0x1ac>
 802e824:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e826:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802e82a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e82e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e832:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802e836:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802e83a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802e83e:	4619      	mov	r1, r3
 802e840:	2200      	movs	r2, #0
 802e842:	4b73      	ldr	r3, [pc, #460]	@ (802ea10 <_dtoa_r+0x2a8>)
 802e844:	f7e1 fd38 	bl	80102b8 <__aeabi_dsub>
 802e848:	a369      	add	r3, pc, #420	@ (adr r3, 802e9f0 <_dtoa_r+0x288>)
 802e84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e84e:	f7e1 feeb 	bl	8010628 <__aeabi_dmul>
 802e852:	a369      	add	r3, pc, #420	@ (adr r3, 802e9f8 <_dtoa_r+0x290>)
 802e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e858:	f7e1 fd30 	bl	80102bc <__adddf3>
 802e85c:	4604      	mov	r4, r0
 802e85e:	4630      	mov	r0, r6
 802e860:	460d      	mov	r5, r1
 802e862:	f7e1 fe77 	bl	8010554 <__aeabi_i2d>
 802e866:	a366      	add	r3, pc, #408	@ (adr r3, 802ea00 <_dtoa_r+0x298>)
 802e868:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e86c:	f7e1 fedc 	bl	8010628 <__aeabi_dmul>
 802e870:	4602      	mov	r2, r0
 802e872:	460b      	mov	r3, r1
 802e874:	4620      	mov	r0, r4
 802e876:	4629      	mov	r1, r5
 802e878:	f7e1 fd20 	bl	80102bc <__adddf3>
 802e87c:	4604      	mov	r4, r0
 802e87e:	460d      	mov	r5, r1
 802e880:	f7e2 f982 	bl	8010b88 <__aeabi_d2iz>
 802e884:	2200      	movs	r2, #0
 802e886:	4607      	mov	r7, r0
 802e888:	2300      	movs	r3, #0
 802e88a:	4620      	mov	r0, r4
 802e88c:	4629      	mov	r1, r5
 802e88e:	f7e2 f93d 	bl	8010b0c <__aeabi_dcmplt>
 802e892:	b140      	cbz	r0, 802e8a6 <_dtoa_r+0x13e>
 802e894:	4638      	mov	r0, r7
 802e896:	f7e1 fe5d 	bl	8010554 <__aeabi_i2d>
 802e89a:	4622      	mov	r2, r4
 802e89c:	462b      	mov	r3, r5
 802e89e:	f7e2 f92b 	bl	8010af8 <__aeabi_dcmpeq>
 802e8a2:	b900      	cbnz	r0, 802e8a6 <_dtoa_r+0x13e>
 802e8a4:	3f01      	subs	r7, #1
 802e8a6:	2f16      	cmp	r7, #22
 802e8a8:	d851      	bhi.n	802e94e <_dtoa_r+0x1e6>
 802e8aa:	4b5a      	ldr	r3, [pc, #360]	@ (802ea14 <_dtoa_r+0x2ac>)
 802e8ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e8b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e8b8:	f7e2 f928 	bl	8010b0c <__aeabi_dcmplt>
 802e8bc:	2800      	cmp	r0, #0
 802e8be:	d048      	beq.n	802e952 <_dtoa_r+0x1ea>
 802e8c0:	3f01      	subs	r7, #1
 802e8c2:	2300      	movs	r3, #0
 802e8c4:	9312      	str	r3, [sp, #72]	@ 0x48
 802e8c6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802e8c8:	1b9b      	subs	r3, r3, r6
 802e8ca:	1e5a      	subs	r2, r3, #1
 802e8cc:	bf44      	itt	mi
 802e8ce:	f1c3 0801 	rsbmi	r8, r3, #1
 802e8d2:	2300      	movmi	r3, #0
 802e8d4:	9208      	str	r2, [sp, #32]
 802e8d6:	bf54      	ite	pl
 802e8d8:	f04f 0800 	movpl.w	r8, #0
 802e8dc:	9308      	strmi	r3, [sp, #32]
 802e8de:	2f00      	cmp	r7, #0
 802e8e0:	db39      	blt.n	802e956 <_dtoa_r+0x1ee>
 802e8e2:	9b08      	ldr	r3, [sp, #32]
 802e8e4:	970f      	str	r7, [sp, #60]	@ 0x3c
 802e8e6:	443b      	add	r3, r7
 802e8e8:	9308      	str	r3, [sp, #32]
 802e8ea:	2300      	movs	r3, #0
 802e8ec:	930a      	str	r3, [sp, #40]	@ 0x28
 802e8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e8f0:	2b09      	cmp	r3, #9
 802e8f2:	d865      	bhi.n	802e9c0 <_dtoa_r+0x258>
 802e8f4:	2b05      	cmp	r3, #5
 802e8f6:	bfc4      	itt	gt
 802e8f8:	3b04      	subgt	r3, #4
 802e8fa:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802e8fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e8fe:	f1a3 0302 	sub.w	r3, r3, #2
 802e902:	bfcc      	ite	gt
 802e904:	2400      	movgt	r4, #0
 802e906:	2401      	movle	r4, #1
 802e908:	2b03      	cmp	r3, #3
 802e90a:	d864      	bhi.n	802e9d6 <_dtoa_r+0x26e>
 802e90c:	e8df f003 	tbb	[pc, r3]
 802e910:	5635372a 	.word	0x5635372a
 802e914:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802e918:	441e      	add	r6, r3
 802e91a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802e91e:	2b20      	cmp	r3, #32
 802e920:	bfc1      	itttt	gt
 802e922:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802e926:	409f      	lslgt	r7, r3
 802e928:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802e92c:	fa24 f303 	lsrgt.w	r3, r4, r3
 802e930:	bfd6      	itet	le
 802e932:	f1c3 0320 	rsble	r3, r3, #32
 802e936:	ea47 0003 	orrgt.w	r0, r7, r3
 802e93a:	fa04 f003 	lslle.w	r0, r4, r3
 802e93e:	f7e1 fdf9 	bl	8010534 <__aeabi_ui2d>
 802e942:	2201      	movs	r2, #1
 802e944:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802e948:	3e01      	subs	r6, #1
 802e94a:	9214      	str	r2, [sp, #80]	@ 0x50
 802e94c:	e777      	b.n	802e83e <_dtoa_r+0xd6>
 802e94e:	2301      	movs	r3, #1
 802e950:	e7b8      	b.n	802e8c4 <_dtoa_r+0x15c>
 802e952:	9012      	str	r0, [sp, #72]	@ 0x48
 802e954:	e7b7      	b.n	802e8c6 <_dtoa_r+0x15e>
 802e956:	427b      	negs	r3, r7
 802e958:	930a      	str	r3, [sp, #40]	@ 0x28
 802e95a:	2300      	movs	r3, #0
 802e95c:	eba8 0807 	sub.w	r8, r8, r7
 802e960:	930f      	str	r3, [sp, #60]	@ 0x3c
 802e962:	e7c4      	b.n	802e8ee <_dtoa_r+0x186>
 802e964:	2300      	movs	r3, #0
 802e966:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e968:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e96a:	2b00      	cmp	r3, #0
 802e96c:	dc36      	bgt.n	802e9dc <_dtoa_r+0x274>
 802e96e:	2301      	movs	r3, #1
 802e970:	9300      	str	r3, [sp, #0]
 802e972:	9307      	str	r3, [sp, #28]
 802e974:	461a      	mov	r2, r3
 802e976:	920e      	str	r2, [sp, #56]	@ 0x38
 802e978:	e00b      	b.n	802e992 <_dtoa_r+0x22a>
 802e97a:	2301      	movs	r3, #1
 802e97c:	e7f3      	b.n	802e966 <_dtoa_r+0x1fe>
 802e97e:	2300      	movs	r3, #0
 802e980:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e984:	18fb      	adds	r3, r7, r3
 802e986:	9300      	str	r3, [sp, #0]
 802e988:	3301      	adds	r3, #1
 802e98a:	2b01      	cmp	r3, #1
 802e98c:	9307      	str	r3, [sp, #28]
 802e98e:	bfb8      	it	lt
 802e990:	2301      	movlt	r3, #1
 802e992:	2100      	movs	r1, #0
 802e994:	2204      	movs	r2, #4
 802e996:	f102 0014 	add.w	r0, r2, #20
 802e99a:	4298      	cmp	r0, r3
 802e99c:	d922      	bls.n	802e9e4 <_dtoa_r+0x27c>
 802e99e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 802e9a2:	4658      	mov	r0, fp
 802e9a4:	f005 f910 	bl	8033bc8 <_Balloc>
 802e9a8:	4682      	mov	sl, r0
 802e9aa:	2800      	cmp	r0, #0
 802e9ac:	d13c      	bne.n	802ea28 <_dtoa_r+0x2c0>
 802e9ae:	4b1a      	ldr	r3, [pc, #104]	@ (802ea18 <_dtoa_r+0x2b0>)
 802e9b0:	4602      	mov	r2, r0
 802e9b2:	f240 11af 	movw	r1, #431	@ 0x1af
 802e9b6:	4819      	ldr	r0, [pc, #100]	@ (802ea1c <_dtoa_r+0x2b4>)
 802e9b8:	f7fb fe48 	bl	802a64c <__assert_func>
 802e9bc:	2301      	movs	r3, #1
 802e9be:	e7df      	b.n	802e980 <_dtoa_r+0x218>
 802e9c0:	2401      	movs	r4, #1
 802e9c2:	2300      	movs	r3, #0
 802e9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 802e9c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 802e9c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e9cc:	9300      	str	r3, [sp, #0]
 802e9ce:	9307      	str	r3, [sp, #28]
 802e9d0:	2200      	movs	r2, #0
 802e9d2:	2312      	movs	r3, #18
 802e9d4:	e7cf      	b.n	802e976 <_dtoa_r+0x20e>
 802e9d6:	2301      	movs	r3, #1
 802e9d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e9da:	e7f5      	b.n	802e9c8 <_dtoa_r+0x260>
 802e9dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e9de:	9300      	str	r3, [sp, #0]
 802e9e0:	9307      	str	r3, [sp, #28]
 802e9e2:	e7d6      	b.n	802e992 <_dtoa_r+0x22a>
 802e9e4:	3101      	adds	r1, #1
 802e9e6:	0052      	lsls	r2, r2, #1
 802e9e8:	e7d5      	b.n	802e996 <_dtoa_r+0x22e>
 802e9ea:	bf00      	nop
 802e9ec:	f3af 8000 	nop.w
 802e9f0:	636f4361 	.word	0x636f4361
 802e9f4:	3fd287a7 	.word	0x3fd287a7
 802e9f8:	8b60c8b3 	.word	0x8b60c8b3
 802e9fc:	3fc68a28 	.word	0x3fc68a28
 802ea00:	509f79fb 	.word	0x509f79fb
 802ea04:	3fd34413 	.word	0x3fd34413
 802ea08:	7ff00000 	.word	0x7ff00000
 802ea0c:	0803c552 	.word	0x0803c552
 802ea10:	3ff80000 	.word	0x3ff80000
 802ea14:	0803cb70 	.word	0x0803cb70
 802ea18:	0803c9ea 	.word	0x0803c9ea
 802ea1c:	0803c9fb 	.word	0x0803c9fb
 802ea20:	0803c9e6 	.word	0x0803c9e6
 802ea24:	0803c551 	.word	0x0803c551
 802ea28:	9b07      	ldr	r3, [sp, #28]
 802ea2a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802ea2e:	2b0e      	cmp	r3, #14
 802ea30:	f200 80a4 	bhi.w	802eb7c <_dtoa_r+0x414>
 802ea34:	2c00      	cmp	r4, #0
 802ea36:	f000 80a1 	beq.w	802eb7c <_dtoa_r+0x414>
 802ea3a:	2f00      	cmp	r7, #0
 802ea3c:	dd33      	ble.n	802eaa6 <_dtoa_r+0x33e>
 802ea3e:	4bae      	ldr	r3, [pc, #696]	@ (802ecf8 <_dtoa_r+0x590>)
 802ea40:	f007 020f 	and.w	r2, r7, #15
 802ea44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802ea48:	ed93 7b00 	vldr	d7, [r3]
 802ea4c:	05f8      	lsls	r0, r7, #23
 802ea4e:	ed8d 7b04 	vstr	d7, [sp, #16]
 802ea52:	ea4f 1427 	mov.w	r4, r7, asr #4
 802ea56:	d516      	bpl.n	802ea86 <_dtoa_r+0x31e>
 802ea58:	4ba8      	ldr	r3, [pc, #672]	@ (802ecfc <_dtoa_r+0x594>)
 802ea5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802ea5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802ea62:	f7e1 ff0b 	bl	801087c <__aeabi_ddiv>
 802ea66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ea6a:	f004 040f 	and.w	r4, r4, #15
 802ea6e:	2603      	movs	r6, #3
 802ea70:	4da2      	ldr	r5, [pc, #648]	@ (802ecfc <_dtoa_r+0x594>)
 802ea72:	b954      	cbnz	r4, 802ea8a <_dtoa_r+0x322>
 802ea74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802ea78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ea7c:	f7e1 fefe 	bl	801087c <__aeabi_ddiv>
 802ea80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ea84:	e028      	b.n	802ead8 <_dtoa_r+0x370>
 802ea86:	2602      	movs	r6, #2
 802ea88:	e7f2      	b.n	802ea70 <_dtoa_r+0x308>
 802ea8a:	07e1      	lsls	r1, r4, #31
 802ea8c:	d508      	bpl.n	802eaa0 <_dtoa_r+0x338>
 802ea8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802ea92:	e9d5 2300 	ldrd	r2, r3, [r5]
 802ea96:	f7e1 fdc7 	bl	8010628 <__aeabi_dmul>
 802ea9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802ea9e:	3601      	adds	r6, #1
 802eaa0:	1064      	asrs	r4, r4, #1
 802eaa2:	3508      	adds	r5, #8
 802eaa4:	e7e5      	b.n	802ea72 <_dtoa_r+0x30a>
 802eaa6:	f000 80d2 	beq.w	802ec4e <_dtoa_r+0x4e6>
 802eaaa:	427c      	negs	r4, r7
 802eaac:	4b92      	ldr	r3, [pc, #584]	@ (802ecf8 <_dtoa_r+0x590>)
 802eaae:	4d93      	ldr	r5, [pc, #588]	@ (802ecfc <_dtoa_r+0x594>)
 802eab0:	f004 020f 	and.w	r2, r4, #15
 802eab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802eab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eabc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802eac0:	f7e1 fdb2 	bl	8010628 <__aeabi_dmul>
 802eac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802eac8:	1124      	asrs	r4, r4, #4
 802eaca:	2300      	movs	r3, #0
 802eacc:	2602      	movs	r6, #2
 802eace:	2c00      	cmp	r4, #0
 802ead0:	f040 80b2 	bne.w	802ec38 <_dtoa_r+0x4d0>
 802ead4:	2b00      	cmp	r3, #0
 802ead6:	d1d3      	bne.n	802ea80 <_dtoa_r+0x318>
 802ead8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802eada:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802eade:	2b00      	cmp	r3, #0
 802eae0:	f000 80b7 	beq.w	802ec52 <_dtoa_r+0x4ea>
 802eae4:	4b86      	ldr	r3, [pc, #536]	@ (802ed00 <_dtoa_r+0x598>)
 802eae6:	2200      	movs	r2, #0
 802eae8:	4620      	mov	r0, r4
 802eaea:	4629      	mov	r1, r5
 802eaec:	f7e2 f80e 	bl	8010b0c <__aeabi_dcmplt>
 802eaf0:	2800      	cmp	r0, #0
 802eaf2:	f000 80ae 	beq.w	802ec52 <_dtoa_r+0x4ea>
 802eaf6:	9b07      	ldr	r3, [sp, #28]
 802eaf8:	2b00      	cmp	r3, #0
 802eafa:	f000 80aa 	beq.w	802ec52 <_dtoa_r+0x4ea>
 802eafe:	9b00      	ldr	r3, [sp, #0]
 802eb00:	2b00      	cmp	r3, #0
 802eb02:	dd37      	ble.n	802eb74 <_dtoa_r+0x40c>
 802eb04:	1e7b      	subs	r3, r7, #1
 802eb06:	9304      	str	r3, [sp, #16]
 802eb08:	4620      	mov	r0, r4
 802eb0a:	4b7e      	ldr	r3, [pc, #504]	@ (802ed04 <_dtoa_r+0x59c>)
 802eb0c:	2200      	movs	r2, #0
 802eb0e:	4629      	mov	r1, r5
 802eb10:	f7e1 fd8a 	bl	8010628 <__aeabi_dmul>
 802eb14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802eb18:	9c00      	ldr	r4, [sp, #0]
 802eb1a:	3601      	adds	r6, #1
 802eb1c:	4630      	mov	r0, r6
 802eb1e:	f7e1 fd19 	bl	8010554 <__aeabi_i2d>
 802eb22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802eb26:	f7e1 fd7f 	bl	8010628 <__aeabi_dmul>
 802eb2a:	4b77      	ldr	r3, [pc, #476]	@ (802ed08 <_dtoa_r+0x5a0>)
 802eb2c:	2200      	movs	r2, #0
 802eb2e:	f7e1 fbc5 	bl	80102bc <__adddf3>
 802eb32:	4605      	mov	r5, r0
 802eb34:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802eb38:	2c00      	cmp	r4, #0
 802eb3a:	f040 808d 	bne.w	802ec58 <_dtoa_r+0x4f0>
 802eb3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802eb42:	4b72      	ldr	r3, [pc, #456]	@ (802ed0c <_dtoa_r+0x5a4>)
 802eb44:	2200      	movs	r2, #0
 802eb46:	f7e1 fbb7 	bl	80102b8 <__aeabi_dsub>
 802eb4a:	4602      	mov	r2, r0
 802eb4c:	460b      	mov	r3, r1
 802eb4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802eb52:	462a      	mov	r2, r5
 802eb54:	4633      	mov	r3, r6
 802eb56:	f7e1 fff7 	bl	8010b48 <__aeabi_dcmpgt>
 802eb5a:	2800      	cmp	r0, #0
 802eb5c:	f040 828c 	bne.w	802f078 <_dtoa_r+0x910>
 802eb60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802eb64:	462a      	mov	r2, r5
 802eb66:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802eb6a:	f7e1 ffcf 	bl	8010b0c <__aeabi_dcmplt>
 802eb6e:	2800      	cmp	r0, #0
 802eb70:	f040 8129 	bne.w	802edc6 <_dtoa_r+0x65e>
 802eb74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802eb78:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802eb7c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802eb7e:	2b00      	cmp	r3, #0
 802eb80:	f2c0 815b 	blt.w	802ee3a <_dtoa_r+0x6d2>
 802eb84:	2f0e      	cmp	r7, #14
 802eb86:	f300 8158 	bgt.w	802ee3a <_dtoa_r+0x6d2>
 802eb8a:	4b5b      	ldr	r3, [pc, #364]	@ (802ecf8 <_dtoa_r+0x590>)
 802eb8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802eb90:	ed93 7b00 	vldr	d7, [r3]
 802eb94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802eb96:	2b00      	cmp	r3, #0
 802eb98:	ed8d 7b00 	vstr	d7, [sp]
 802eb9c:	da03      	bge.n	802eba6 <_dtoa_r+0x43e>
 802eb9e:	9b07      	ldr	r3, [sp, #28]
 802eba0:	2b00      	cmp	r3, #0
 802eba2:	f340 8102 	ble.w	802edaa <_dtoa_r+0x642>
 802eba6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802ebaa:	4656      	mov	r6, sl
 802ebac:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ebb0:	4620      	mov	r0, r4
 802ebb2:	4629      	mov	r1, r5
 802ebb4:	f7e1 fe62 	bl	801087c <__aeabi_ddiv>
 802ebb8:	f7e1 ffe6 	bl	8010b88 <__aeabi_d2iz>
 802ebbc:	4680      	mov	r8, r0
 802ebbe:	f7e1 fcc9 	bl	8010554 <__aeabi_i2d>
 802ebc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ebc6:	f7e1 fd2f 	bl	8010628 <__aeabi_dmul>
 802ebca:	4602      	mov	r2, r0
 802ebcc:	460b      	mov	r3, r1
 802ebce:	4620      	mov	r0, r4
 802ebd0:	4629      	mov	r1, r5
 802ebd2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802ebd6:	f7e1 fb6f 	bl	80102b8 <__aeabi_dsub>
 802ebda:	f806 4b01 	strb.w	r4, [r6], #1
 802ebde:	9d07      	ldr	r5, [sp, #28]
 802ebe0:	eba6 040a 	sub.w	r4, r6, sl
 802ebe4:	42a5      	cmp	r5, r4
 802ebe6:	4602      	mov	r2, r0
 802ebe8:	460b      	mov	r3, r1
 802ebea:	f040 8118 	bne.w	802ee1e <_dtoa_r+0x6b6>
 802ebee:	f7e1 fb65 	bl	80102bc <__adddf3>
 802ebf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ebf6:	4604      	mov	r4, r0
 802ebf8:	460d      	mov	r5, r1
 802ebfa:	f7e1 ffa5 	bl	8010b48 <__aeabi_dcmpgt>
 802ebfe:	2800      	cmp	r0, #0
 802ec00:	f040 80fa 	bne.w	802edf8 <_dtoa_r+0x690>
 802ec04:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ec08:	4620      	mov	r0, r4
 802ec0a:	4629      	mov	r1, r5
 802ec0c:	f7e1 ff74 	bl	8010af8 <__aeabi_dcmpeq>
 802ec10:	b118      	cbz	r0, 802ec1a <_dtoa_r+0x4b2>
 802ec12:	f018 0f01 	tst.w	r8, #1
 802ec16:	f040 80ef 	bne.w	802edf8 <_dtoa_r+0x690>
 802ec1a:	4649      	mov	r1, r9
 802ec1c:	4658      	mov	r0, fp
 802ec1e:	f004 fff8 	bl	8033c12 <_Bfree>
 802ec22:	2300      	movs	r3, #0
 802ec24:	7033      	strb	r3, [r6, #0]
 802ec26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ec28:	3701      	adds	r7, #1
 802ec2a:	601f      	str	r7, [r3, #0]
 802ec2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802ec2e:	2b00      	cmp	r3, #0
 802ec30:	f43f add1 	beq.w	802e7d6 <_dtoa_r+0x6e>
 802ec34:	601e      	str	r6, [r3, #0]
 802ec36:	e5ce      	b.n	802e7d6 <_dtoa_r+0x6e>
 802ec38:	07e2      	lsls	r2, r4, #31
 802ec3a:	d505      	bpl.n	802ec48 <_dtoa_r+0x4e0>
 802ec3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 802ec40:	f7e1 fcf2 	bl	8010628 <__aeabi_dmul>
 802ec44:	3601      	adds	r6, #1
 802ec46:	2301      	movs	r3, #1
 802ec48:	1064      	asrs	r4, r4, #1
 802ec4a:	3508      	adds	r5, #8
 802ec4c:	e73f      	b.n	802eace <_dtoa_r+0x366>
 802ec4e:	2602      	movs	r6, #2
 802ec50:	e742      	b.n	802ead8 <_dtoa_r+0x370>
 802ec52:	9c07      	ldr	r4, [sp, #28]
 802ec54:	9704      	str	r7, [sp, #16]
 802ec56:	e761      	b.n	802eb1c <_dtoa_r+0x3b4>
 802ec58:	4b27      	ldr	r3, [pc, #156]	@ (802ecf8 <_dtoa_r+0x590>)
 802ec5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802ec5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802ec60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802ec64:	4454      	add	r4, sl
 802ec66:	2900      	cmp	r1, #0
 802ec68:	d054      	beq.n	802ed14 <_dtoa_r+0x5ac>
 802ec6a:	4929      	ldr	r1, [pc, #164]	@ (802ed10 <_dtoa_r+0x5a8>)
 802ec6c:	2000      	movs	r0, #0
 802ec6e:	f7e1 fe05 	bl	801087c <__aeabi_ddiv>
 802ec72:	4633      	mov	r3, r6
 802ec74:	462a      	mov	r2, r5
 802ec76:	f7e1 fb1f 	bl	80102b8 <__aeabi_dsub>
 802ec7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802ec7e:	4656      	mov	r6, sl
 802ec80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ec84:	f7e1 ff80 	bl	8010b88 <__aeabi_d2iz>
 802ec88:	4605      	mov	r5, r0
 802ec8a:	f7e1 fc63 	bl	8010554 <__aeabi_i2d>
 802ec8e:	4602      	mov	r2, r0
 802ec90:	460b      	mov	r3, r1
 802ec92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ec96:	f7e1 fb0f 	bl	80102b8 <__aeabi_dsub>
 802ec9a:	3530      	adds	r5, #48	@ 0x30
 802ec9c:	4602      	mov	r2, r0
 802ec9e:	460b      	mov	r3, r1
 802eca0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802eca4:	f806 5b01 	strb.w	r5, [r6], #1
 802eca8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802ecac:	f7e1 ff2e 	bl	8010b0c <__aeabi_dcmplt>
 802ecb0:	2800      	cmp	r0, #0
 802ecb2:	d172      	bne.n	802ed9a <_dtoa_r+0x632>
 802ecb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802ecb8:	4911      	ldr	r1, [pc, #68]	@ (802ed00 <_dtoa_r+0x598>)
 802ecba:	2000      	movs	r0, #0
 802ecbc:	f7e1 fafc 	bl	80102b8 <__aeabi_dsub>
 802ecc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802ecc4:	f7e1 ff22 	bl	8010b0c <__aeabi_dcmplt>
 802ecc8:	2800      	cmp	r0, #0
 802ecca:	f040 8096 	bne.w	802edfa <_dtoa_r+0x692>
 802ecce:	42a6      	cmp	r6, r4
 802ecd0:	f43f af50 	beq.w	802eb74 <_dtoa_r+0x40c>
 802ecd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802ecd8:	4b0a      	ldr	r3, [pc, #40]	@ (802ed04 <_dtoa_r+0x59c>)
 802ecda:	2200      	movs	r2, #0
 802ecdc:	f7e1 fca4 	bl	8010628 <__aeabi_dmul>
 802ece0:	4b08      	ldr	r3, [pc, #32]	@ (802ed04 <_dtoa_r+0x59c>)
 802ece2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802ece6:	2200      	movs	r2, #0
 802ece8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ecec:	f7e1 fc9c 	bl	8010628 <__aeabi_dmul>
 802ecf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ecf4:	e7c4      	b.n	802ec80 <_dtoa_r+0x518>
 802ecf6:	bf00      	nop
 802ecf8:	0803cb70 	.word	0x0803cb70
 802ecfc:	0803cb48 	.word	0x0803cb48
 802ed00:	3ff00000 	.word	0x3ff00000
 802ed04:	40240000 	.word	0x40240000
 802ed08:	401c0000 	.word	0x401c0000
 802ed0c:	40140000 	.word	0x40140000
 802ed10:	3fe00000 	.word	0x3fe00000
 802ed14:	4631      	mov	r1, r6
 802ed16:	4628      	mov	r0, r5
 802ed18:	f7e1 fc86 	bl	8010628 <__aeabi_dmul>
 802ed1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802ed20:	9415      	str	r4, [sp, #84]	@ 0x54
 802ed22:	4656      	mov	r6, sl
 802ed24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ed28:	f7e1 ff2e 	bl	8010b88 <__aeabi_d2iz>
 802ed2c:	4605      	mov	r5, r0
 802ed2e:	f7e1 fc11 	bl	8010554 <__aeabi_i2d>
 802ed32:	4602      	mov	r2, r0
 802ed34:	460b      	mov	r3, r1
 802ed36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ed3a:	f7e1 fabd 	bl	80102b8 <__aeabi_dsub>
 802ed3e:	3530      	adds	r5, #48	@ 0x30
 802ed40:	f806 5b01 	strb.w	r5, [r6], #1
 802ed44:	4602      	mov	r2, r0
 802ed46:	460b      	mov	r3, r1
 802ed48:	42a6      	cmp	r6, r4
 802ed4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802ed4e:	f04f 0200 	mov.w	r2, #0
 802ed52:	d124      	bne.n	802ed9e <_dtoa_r+0x636>
 802ed54:	4bac      	ldr	r3, [pc, #688]	@ (802f008 <_dtoa_r+0x8a0>)
 802ed56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802ed5a:	f7e1 faaf 	bl	80102bc <__adddf3>
 802ed5e:	4602      	mov	r2, r0
 802ed60:	460b      	mov	r3, r1
 802ed62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ed66:	f7e1 feef 	bl	8010b48 <__aeabi_dcmpgt>
 802ed6a:	2800      	cmp	r0, #0
 802ed6c:	d145      	bne.n	802edfa <_dtoa_r+0x692>
 802ed6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802ed72:	49a5      	ldr	r1, [pc, #660]	@ (802f008 <_dtoa_r+0x8a0>)
 802ed74:	2000      	movs	r0, #0
 802ed76:	f7e1 fa9f 	bl	80102b8 <__aeabi_dsub>
 802ed7a:	4602      	mov	r2, r0
 802ed7c:	460b      	mov	r3, r1
 802ed7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ed82:	f7e1 fec3 	bl	8010b0c <__aeabi_dcmplt>
 802ed86:	2800      	cmp	r0, #0
 802ed88:	f43f aef4 	beq.w	802eb74 <_dtoa_r+0x40c>
 802ed8c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802ed8e:	1e73      	subs	r3, r6, #1
 802ed90:	9315      	str	r3, [sp, #84]	@ 0x54
 802ed92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802ed96:	2b30      	cmp	r3, #48	@ 0x30
 802ed98:	d0f8      	beq.n	802ed8c <_dtoa_r+0x624>
 802ed9a:	9f04      	ldr	r7, [sp, #16]
 802ed9c:	e73d      	b.n	802ec1a <_dtoa_r+0x4b2>
 802ed9e:	4b9b      	ldr	r3, [pc, #620]	@ (802f00c <_dtoa_r+0x8a4>)
 802eda0:	f7e1 fc42 	bl	8010628 <__aeabi_dmul>
 802eda4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802eda8:	e7bc      	b.n	802ed24 <_dtoa_r+0x5bc>
 802edaa:	d10c      	bne.n	802edc6 <_dtoa_r+0x65e>
 802edac:	4b98      	ldr	r3, [pc, #608]	@ (802f010 <_dtoa_r+0x8a8>)
 802edae:	2200      	movs	r2, #0
 802edb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802edb4:	f7e1 fc38 	bl	8010628 <__aeabi_dmul>
 802edb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802edbc:	f7e1 feba 	bl	8010b34 <__aeabi_dcmpge>
 802edc0:	2800      	cmp	r0, #0
 802edc2:	f000 8157 	beq.w	802f074 <_dtoa_r+0x90c>
 802edc6:	2400      	movs	r4, #0
 802edc8:	4625      	mov	r5, r4
 802edca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802edcc:	43db      	mvns	r3, r3
 802edce:	9304      	str	r3, [sp, #16]
 802edd0:	4656      	mov	r6, sl
 802edd2:	2700      	movs	r7, #0
 802edd4:	4621      	mov	r1, r4
 802edd6:	4658      	mov	r0, fp
 802edd8:	f004 ff1b 	bl	8033c12 <_Bfree>
 802eddc:	2d00      	cmp	r5, #0
 802edde:	d0dc      	beq.n	802ed9a <_dtoa_r+0x632>
 802ede0:	b12f      	cbz	r7, 802edee <_dtoa_r+0x686>
 802ede2:	42af      	cmp	r7, r5
 802ede4:	d003      	beq.n	802edee <_dtoa_r+0x686>
 802ede6:	4639      	mov	r1, r7
 802ede8:	4658      	mov	r0, fp
 802edea:	f004 ff12 	bl	8033c12 <_Bfree>
 802edee:	4629      	mov	r1, r5
 802edf0:	4658      	mov	r0, fp
 802edf2:	f004 ff0e 	bl	8033c12 <_Bfree>
 802edf6:	e7d0      	b.n	802ed9a <_dtoa_r+0x632>
 802edf8:	9704      	str	r7, [sp, #16]
 802edfa:	4633      	mov	r3, r6
 802edfc:	461e      	mov	r6, r3
 802edfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802ee02:	2a39      	cmp	r2, #57	@ 0x39
 802ee04:	d107      	bne.n	802ee16 <_dtoa_r+0x6ae>
 802ee06:	459a      	cmp	sl, r3
 802ee08:	d1f8      	bne.n	802edfc <_dtoa_r+0x694>
 802ee0a:	9a04      	ldr	r2, [sp, #16]
 802ee0c:	3201      	adds	r2, #1
 802ee0e:	9204      	str	r2, [sp, #16]
 802ee10:	2230      	movs	r2, #48	@ 0x30
 802ee12:	f88a 2000 	strb.w	r2, [sl]
 802ee16:	781a      	ldrb	r2, [r3, #0]
 802ee18:	3201      	adds	r2, #1
 802ee1a:	701a      	strb	r2, [r3, #0]
 802ee1c:	e7bd      	b.n	802ed9a <_dtoa_r+0x632>
 802ee1e:	4b7b      	ldr	r3, [pc, #492]	@ (802f00c <_dtoa_r+0x8a4>)
 802ee20:	2200      	movs	r2, #0
 802ee22:	f7e1 fc01 	bl	8010628 <__aeabi_dmul>
 802ee26:	2200      	movs	r2, #0
 802ee28:	2300      	movs	r3, #0
 802ee2a:	4604      	mov	r4, r0
 802ee2c:	460d      	mov	r5, r1
 802ee2e:	f7e1 fe63 	bl	8010af8 <__aeabi_dcmpeq>
 802ee32:	2800      	cmp	r0, #0
 802ee34:	f43f aeba 	beq.w	802ebac <_dtoa_r+0x444>
 802ee38:	e6ef      	b.n	802ec1a <_dtoa_r+0x4b2>
 802ee3a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802ee3c:	2a00      	cmp	r2, #0
 802ee3e:	f000 80db 	beq.w	802eff8 <_dtoa_r+0x890>
 802ee42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ee44:	2a01      	cmp	r2, #1
 802ee46:	f300 80bf 	bgt.w	802efc8 <_dtoa_r+0x860>
 802ee4a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802ee4c:	2a00      	cmp	r2, #0
 802ee4e:	f000 80b7 	beq.w	802efc0 <_dtoa_r+0x858>
 802ee52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802ee56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802ee58:	4646      	mov	r6, r8
 802ee5a:	9a08      	ldr	r2, [sp, #32]
 802ee5c:	2101      	movs	r1, #1
 802ee5e:	441a      	add	r2, r3
 802ee60:	4658      	mov	r0, fp
 802ee62:	4498      	add	r8, r3
 802ee64:	9208      	str	r2, [sp, #32]
 802ee66:	f004 ffb9 	bl	8033ddc <__i2b>
 802ee6a:	4605      	mov	r5, r0
 802ee6c:	b15e      	cbz	r6, 802ee86 <_dtoa_r+0x71e>
 802ee6e:	9b08      	ldr	r3, [sp, #32]
 802ee70:	2b00      	cmp	r3, #0
 802ee72:	dd08      	ble.n	802ee86 <_dtoa_r+0x71e>
 802ee74:	42b3      	cmp	r3, r6
 802ee76:	9a08      	ldr	r2, [sp, #32]
 802ee78:	bfa8      	it	ge
 802ee7a:	4633      	movge	r3, r6
 802ee7c:	eba8 0803 	sub.w	r8, r8, r3
 802ee80:	1af6      	subs	r6, r6, r3
 802ee82:	1ad3      	subs	r3, r2, r3
 802ee84:	9308      	str	r3, [sp, #32]
 802ee86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ee88:	b1f3      	cbz	r3, 802eec8 <_dtoa_r+0x760>
 802ee8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ee8c:	2b00      	cmp	r3, #0
 802ee8e:	f000 80b7 	beq.w	802f000 <_dtoa_r+0x898>
 802ee92:	b18c      	cbz	r4, 802eeb8 <_dtoa_r+0x750>
 802ee94:	4629      	mov	r1, r5
 802ee96:	4622      	mov	r2, r4
 802ee98:	4658      	mov	r0, fp
 802ee9a:	f005 f85f 	bl	8033f5c <__pow5mult>
 802ee9e:	464a      	mov	r2, r9
 802eea0:	4601      	mov	r1, r0
 802eea2:	4605      	mov	r5, r0
 802eea4:	4658      	mov	r0, fp
 802eea6:	f004 ffaf 	bl	8033e08 <__multiply>
 802eeaa:	4649      	mov	r1, r9
 802eeac:	9004      	str	r0, [sp, #16]
 802eeae:	4658      	mov	r0, fp
 802eeb0:	f004 feaf 	bl	8033c12 <_Bfree>
 802eeb4:	9b04      	ldr	r3, [sp, #16]
 802eeb6:	4699      	mov	r9, r3
 802eeb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802eeba:	1b1a      	subs	r2, r3, r4
 802eebc:	d004      	beq.n	802eec8 <_dtoa_r+0x760>
 802eebe:	4649      	mov	r1, r9
 802eec0:	4658      	mov	r0, fp
 802eec2:	f005 f84b 	bl	8033f5c <__pow5mult>
 802eec6:	4681      	mov	r9, r0
 802eec8:	2101      	movs	r1, #1
 802eeca:	4658      	mov	r0, fp
 802eecc:	f004 ff86 	bl	8033ddc <__i2b>
 802eed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802eed2:	4604      	mov	r4, r0
 802eed4:	2b00      	cmp	r3, #0
 802eed6:	f000 81cc 	beq.w	802f272 <_dtoa_r+0xb0a>
 802eeda:	461a      	mov	r2, r3
 802eedc:	4601      	mov	r1, r0
 802eede:	4658      	mov	r0, fp
 802eee0:	f005 f83c 	bl	8033f5c <__pow5mult>
 802eee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802eee6:	2b01      	cmp	r3, #1
 802eee8:	4604      	mov	r4, r0
 802eeea:	f300 8095 	bgt.w	802f018 <_dtoa_r+0x8b0>
 802eeee:	9b02      	ldr	r3, [sp, #8]
 802eef0:	2b00      	cmp	r3, #0
 802eef2:	f040 8087 	bne.w	802f004 <_dtoa_r+0x89c>
 802eef6:	9b03      	ldr	r3, [sp, #12]
 802eef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802eefc:	2b00      	cmp	r3, #0
 802eefe:	f040 8089 	bne.w	802f014 <_dtoa_r+0x8ac>
 802ef02:	9b03      	ldr	r3, [sp, #12]
 802ef04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802ef08:	0d1b      	lsrs	r3, r3, #20
 802ef0a:	051b      	lsls	r3, r3, #20
 802ef0c:	b12b      	cbz	r3, 802ef1a <_dtoa_r+0x7b2>
 802ef0e:	9b08      	ldr	r3, [sp, #32]
 802ef10:	3301      	adds	r3, #1
 802ef12:	9308      	str	r3, [sp, #32]
 802ef14:	f108 0801 	add.w	r8, r8, #1
 802ef18:	2301      	movs	r3, #1
 802ef1a:	930a      	str	r3, [sp, #40]	@ 0x28
 802ef1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ef1e:	2b00      	cmp	r3, #0
 802ef20:	f000 81ad 	beq.w	802f27e <_dtoa_r+0xb16>
 802ef24:	6923      	ldr	r3, [r4, #16]
 802ef26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802ef2a:	6918      	ldr	r0, [r3, #16]
 802ef2c:	f004 ff0a 	bl	8033d44 <__hi0bits>
 802ef30:	f1c0 0020 	rsb	r0, r0, #32
 802ef34:	9b08      	ldr	r3, [sp, #32]
 802ef36:	4418      	add	r0, r3
 802ef38:	f010 001f 	ands.w	r0, r0, #31
 802ef3c:	d077      	beq.n	802f02e <_dtoa_r+0x8c6>
 802ef3e:	f1c0 0320 	rsb	r3, r0, #32
 802ef42:	2b04      	cmp	r3, #4
 802ef44:	dd6b      	ble.n	802f01e <_dtoa_r+0x8b6>
 802ef46:	9b08      	ldr	r3, [sp, #32]
 802ef48:	f1c0 001c 	rsb	r0, r0, #28
 802ef4c:	4403      	add	r3, r0
 802ef4e:	4480      	add	r8, r0
 802ef50:	4406      	add	r6, r0
 802ef52:	9308      	str	r3, [sp, #32]
 802ef54:	f1b8 0f00 	cmp.w	r8, #0
 802ef58:	dd05      	ble.n	802ef66 <_dtoa_r+0x7fe>
 802ef5a:	4649      	mov	r1, r9
 802ef5c:	4642      	mov	r2, r8
 802ef5e:	4658      	mov	r0, fp
 802ef60:	f005 f83c 	bl	8033fdc <__lshift>
 802ef64:	4681      	mov	r9, r0
 802ef66:	9b08      	ldr	r3, [sp, #32]
 802ef68:	2b00      	cmp	r3, #0
 802ef6a:	dd05      	ble.n	802ef78 <_dtoa_r+0x810>
 802ef6c:	4621      	mov	r1, r4
 802ef6e:	461a      	mov	r2, r3
 802ef70:	4658      	mov	r0, fp
 802ef72:	f005 f833 	bl	8033fdc <__lshift>
 802ef76:	4604      	mov	r4, r0
 802ef78:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802ef7a:	2b00      	cmp	r3, #0
 802ef7c:	d059      	beq.n	802f032 <_dtoa_r+0x8ca>
 802ef7e:	4621      	mov	r1, r4
 802ef80:	4648      	mov	r0, r9
 802ef82:	f005 f897 	bl	80340b4 <__mcmp>
 802ef86:	2800      	cmp	r0, #0
 802ef88:	da53      	bge.n	802f032 <_dtoa_r+0x8ca>
 802ef8a:	1e7b      	subs	r3, r7, #1
 802ef8c:	9304      	str	r3, [sp, #16]
 802ef8e:	4649      	mov	r1, r9
 802ef90:	2300      	movs	r3, #0
 802ef92:	220a      	movs	r2, #10
 802ef94:	4658      	mov	r0, fp
 802ef96:	f004 fe45 	bl	8033c24 <__multadd>
 802ef9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ef9c:	4681      	mov	r9, r0
 802ef9e:	2b00      	cmp	r3, #0
 802efa0:	f000 816f 	beq.w	802f282 <_dtoa_r+0xb1a>
 802efa4:	2300      	movs	r3, #0
 802efa6:	4629      	mov	r1, r5
 802efa8:	220a      	movs	r2, #10
 802efaa:	4658      	mov	r0, fp
 802efac:	f004 fe3a 	bl	8033c24 <__multadd>
 802efb0:	9b00      	ldr	r3, [sp, #0]
 802efb2:	2b00      	cmp	r3, #0
 802efb4:	4605      	mov	r5, r0
 802efb6:	dc67      	bgt.n	802f088 <_dtoa_r+0x920>
 802efb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802efba:	2b02      	cmp	r3, #2
 802efbc:	dc41      	bgt.n	802f042 <_dtoa_r+0x8da>
 802efbe:	e063      	b.n	802f088 <_dtoa_r+0x920>
 802efc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802efc2:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802efc6:	e746      	b.n	802ee56 <_dtoa_r+0x6ee>
 802efc8:	9b07      	ldr	r3, [sp, #28]
 802efca:	1e5c      	subs	r4, r3, #1
 802efcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802efce:	42a3      	cmp	r3, r4
 802efd0:	bfbf      	itttt	lt
 802efd2:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802efd4:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802efd6:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802efd8:	1ae3      	sublt	r3, r4, r3
 802efda:	bfb4      	ite	lt
 802efdc:	18d2      	addlt	r2, r2, r3
 802efde:	1b1c      	subge	r4, r3, r4
 802efe0:	9b07      	ldr	r3, [sp, #28]
 802efe2:	bfbc      	itt	lt
 802efe4:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802efe6:	2400      	movlt	r4, #0
 802efe8:	2b00      	cmp	r3, #0
 802efea:	bfb5      	itete	lt
 802efec:	eba8 0603 	sublt.w	r6, r8, r3
 802eff0:	9b07      	ldrge	r3, [sp, #28]
 802eff2:	2300      	movlt	r3, #0
 802eff4:	4646      	movge	r6, r8
 802eff6:	e730      	b.n	802ee5a <_dtoa_r+0x6f2>
 802eff8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802effa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802effc:	4646      	mov	r6, r8
 802effe:	e735      	b.n	802ee6c <_dtoa_r+0x704>
 802f000:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802f002:	e75c      	b.n	802eebe <_dtoa_r+0x756>
 802f004:	2300      	movs	r3, #0
 802f006:	e788      	b.n	802ef1a <_dtoa_r+0x7b2>
 802f008:	3fe00000 	.word	0x3fe00000
 802f00c:	40240000 	.word	0x40240000
 802f010:	40140000 	.word	0x40140000
 802f014:	9b02      	ldr	r3, [sp, #8]
 802f016:	e780      	b.n	802ef1a <_dtoa_r+0x7b2>
 802f018:	2300      	movs	r3, #0
 802f01a:	930a      	str	r3, [sp, #40]	@ 0x28
 802f01c:	e782      	b.n	802ef24 <_dtoa_r+0x7bc>
 802f01e:	d099      	beq.n	802ef54 <_dtoa_r+0x7ec>
 802f020:	9a08      	ldr	r2, [sp, #32]
 802f022:	331c      	adds	r3, #28
 802f024:	441a      	add	r2, r3
 802f026:	4498      	add	r8, r3
 802f028:	441e      	add	r6, r3
 802f02a:	9208      	str	r2, [sp, #32]
 802f02c:	e792      	b.n	802ef54 <_dtoa_r+0x7ec>
 802f02e:	4603      	mov	r3, r0
 802f030:	e7f6      	b.n	802f020 <_dtoa_r+0x8b8>
 802f032:	9b07      	ldr	r3, [sp, #28]
 802f034:	9704      	str	r7, [sp, #16]
 802f036:	2b00      	cmp	r3, #0
 802f038:	dc20      	bgt.n	802f07c <_dtoa_r+0x914>
 802f03a:	9300      	str	r3, [sp, #0]
 802f03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f03e:	2b02      	cmp	r3, #2
 802f040:	dd1e      	ble.n	802f080 <_dtoa_r+0x918>
 802f042:	9b00      	ldr	r3, [sp, #0]
 802f044:	2b00      	cmp	r3, #0
 802f046:	f47f aec0 	bne.w	802edca <_dtoa_r+0x662>
 802f04a:	4621      	mov	r1, r4
 802f04c:	2205      	movs	r2, #5
 802f04e:	4658      	mov	r0, fp
 802f050:	f004 fde8 	bl	8033c24 <__multadd>
 802f054:	4601      	mov	r1, r0
 802f056:	4604      	mov	r4, r0
 802f058:	4648      	mov	r0, r9
 802f05a:	f005 f82b 	bl	80340b4 <__mcmp>
 802f05e:	2800      	cmp	r0, #0
 802f060:	f77f aeb3 	ble.w	802edca <_dtoa_r+0x662>
 802f064:	4656      	mov	r6, sl
 802f066:	2331      	movs	r3, #49	@ 0x31
 802f068:	f806 3b01 	strb.w	r3, [r6], #1
 802f06c:	9b04      	ldr	r3, [sp, #16]
 802f06e:	3301      	adds	r3, #1
 802f070:	9304      	str	r3, [sp, #16]
 802f072:	e6ae      	b.n	802edd2 <_dtoa_r+0x66a>
 802f074:	9c07      	ldr	r4, [sp, #28]
 802f076:	9704      	str	r7, [sp, #16]
 802f078:	4625      	mov	r5, r4
 802f07a:	e7f3      	b.n	802f064 <_dtoa_r+0x8fc>
 802f07c:	9b07      	ldr	r3, [sp, #28]
 802f07e:	9300      	str	r3, [sp, #0]
 802f080:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802f082:	2b00      	cmp	r3, #0
 802f084:	f000 8101 	beq.w	802f28a <_dtoa_r+0xb22>
 802f088:	2e00      	cmp	r6, #0
 802f08a:	dd05      	ble.n	802f098 <_dtoa_r+0x930>
 802f08c:	4629      	mov	r1, r5
 802f08e:	4632      	mov	r2, r6
 802f090:	4658      	mov	r0, fp
 802f092:	f004 ffa3 	bl	8033fdc <__lshift>
 802f096:	4605      	mov	r5, r0
 802f098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f09a:	2b00      	cmp	r3, #0
 802f09c:	d059      	beq.n	802f152 <_dtoa_r+0x9ea>
 802f09e:	6869      	ldr	r1, [r5, #4]
 802f0a0:	4658      	mov	r0, fp
 802f0a2:	f004 fd91 	bl	8033bc8 <_Balloc>
 802f0a6:	4606      	mov	r6, r0
 802f0a8:	b920      	cbnz	r0, 802f0b4 <_dtoa_r+0x94c>
 802f0aa:	4b83      	ldr	r3, [pc, #524]	@ (802f2b8 <_dtoa_r+0xb50>)
 802f0ac:	4602      	mov	r2, r0
 802f0ae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802f0b2:	e480      	b.n	802e9b6 <_dtoa_r+0x24e>
 802f0b4:	692a      	ldr	r2, [r5, #16]
 802f0b6:	3202      	adds	r2, #2
 802f0b8:	0092      	lsls	r2, r2, #2
 802f0ba:	f105 010c 	add.w	r1, r5, #12
 802f0be:	300c      	adds	r0, #12
 802f0c0:	f7ff fa52 	bl	802e568 <memcpy>
 802f0c4:	2201      	movs	r2, #1
 802f0c6:	4631      	mov	r1, r6
 802f0c8:	4658      	mov	r0, fp
 802f0ca:	f004 ff87 	bl	8033fdc <__lshift>
 802f0ce:	f10a 0301 	add.w	r3, sl, #1
 802f0d2:	9307      	str	r3, [sp, #28]
 802f0d4:	9b00      	ldr	r3, [sp, #0]
 802f0d6:	4453      	add	r3, sl
 802f0d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802f0da:	9b02      	ldr	r3, [sp, #8]
 802f0dc:	f003 0301 	and.w	r3, r3, #1
 802f0e0:	462f      	mov	r7, r5
 802f0e2:	930a      	str	r3, [sp, #40]	@ 0x28
 802f0e4:	4605      	mov	r5, r0
 802f0e6:	9b07      	ldr	r3, [sp, #28]
 802f0e8:	4621      	mov	r1, r4
 802f0ea:	3b01      	subs	r3, #1
 802f0ec:	4648      	mov	r0, r9
 802f0ee:	9300      	str	r3, [sp, #0]
 802f0f0:	f7ff faaf 	bl	802e652 <quorem>
 802f0f4:	4639      	mov	r1, r7
 802f0f6:	9002      	str	r0, [sp, #8]
 802f0f8:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802f0fc:	4648      	mov	r0, r9
 802f0fe:	f004 ffd9 	bl	80340b4 <__mcmp>
 802f102:	462a      	mov	r2, r5
 802f104:	9008      	str	r0, [sp, #32]
 802f106:	4621      	mov	r1, r4
 802f108:	4658      	mov	r0, fp
 802f10a:	f004 ffef 	bl	80340ec <__mdiff>
 802f10e:	68c2      	ldr	r2, [r0, #12]
 802f110:	4606      	mov	r6, r0
 802f112:	bb02      	cbnz	r2, 802f156 <_dtoa_r+0x9ee>
 802f114:	4601      	mov	r1, r0
 802f116:	4648      	mov	r0, r9
 802f118:	f004 ffcc 	bl	80340b4 <__mcmp>
 802f11c:	4602      	mov	r2, r0
 802f11e:	4631      	mov	r1, r6
 802f120:	4658      	mov	r0, fp
 802f122:	920e      	str	r2, [sp, #56]	@ 0x38
 802f124:	f004 fd75 	bl	8033c12 <_Bfree>
 802f128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f12a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802f12c:	9e07      	ldr	r6, [sp, #28]
 802f12e:	ea43 0102 	orr.w	r1, r3, r2
 802f132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f134:	4319      	orrs	r1, r3
 802f136:	d110      	bne.n	802f15a <_dtoa_r+0x9f2>
 802f138:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802f13c:	d029      	beq.n	802f192 <_dtoa_r+0xa2a>
 802f13e:	9b08      	ldr	r3, [sp, #32]
 802f140:	2b00      	cmp	r3, #0
 802f142:	dd02      	ble.n	802f14a <_dtoa_r+0x9e2>
 802f144:	9b02      	ldr	r3, [sp, #8]
 802f146:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802f14a:	9b00      	ldr	r3, [sp, #0]
 802f14c:	f883 8000 	strb.w	r8, [r3]
 802f150:	e640      	b.n	802edd4 <_dtoa_r+0x66c>
 802f152:	4628      	mov	r0, r5
 802f154:	e7bb      	b.n	802f0ce <_dtoa_r+0x966>
 802f156:	2201      	movs	r2, #1
 802f158:	e7e1      	b.n	802f11e <_dtoa_r+0x9b6>
 802f15a:	9b08      	ldr	r3, [sp, #32]
 802f15c:	2b00      	cmp	r3, #0
 802f15e:	db04      	blt.n	802f16a <_dtoa_r+0xa02>
 802f160:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802f162:	430b      	orrs	r3, r1
 802f164:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802f166:	430b      	orrs	r3, r1
 802f168:	d120      	bne.n	802f1ac <_dtoa_r+0xa44>
 802f16a:	2a00      	cmp	r2, #0
 802f16c:	dded      	ble.n	802f14a <_dtoa_r+0x9e2>
 802f16e:	4649      	mov	r1, r9
 802f170:	2201      	movs	r2, #1
 802f172:	4658      	mov	r0, fp
 802f174:	f004 ff32 	bl	8033fdc <__lshift>
 802f178:	4621      	mov	r1, r4
 802f17a:	4681      	mov	r9, r0
 802f17c:	f004 ff9a 	bl	80340b4 <__mcmp>
 802f180:	2800      	cmp	r0, #0
 802f182:	dc03      	bgt.n	802f18c <_dtoa_r+0xa24>
 802f184:	d1e1      	bne.n	802f14a <_dtoa_r+0x9e2>
 802f186:	f018 0f01 	tst.w	r8, #1
 802f18a:	d0de      	beq.n	802f14a <_dtoa_r+0x9e2>
 802f18c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802f190:	d1d8      	bne.n	802f144 <_dtoa_r+0x9dc>
 802f192:	9a00      	ldr	r2, [sp, #0]
 802f194:	2339      	movs	r3, #57	@ 0x39
 802f196:	7013      	strb	r3, [r2, #0]
 802f198:	4633      	mov	r3, r6
 802f19a:	461e      	mov	r6, r3
 802f19c:	3b01      	subs	r3, #1
 802f19e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802f1a2:	2a39      	cmp	r2, #57	@ 0x39
 802f1a4:	d052      	beq.n	802f24c <_dtoa_r+0xae4>
 802f1a6:	3201      	adds	r2, #1
 802f1a8:	701a      	strb	r2, [r3, #0]
 802f1aa:	e613      	b.n	802edd4 <_dtoa_r+0x66c>
 802f1ac:	2a00      	cmp	r2, #0
 802f1ae:	dd07      	ble.n	802f1c0 <_dtoa_r+0xa58>
 802f1b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802f1b4:	d0ed      	beq.n	802f192 <_dtoa_r+0xa2a>
 802f1b6:	9a00      	ldr	r2, [sp, #0]
 802f1b8:	f108 0301 	add.w	r3, r8, #1
 802f1bc:	7013      	strb	r3, [r2, #0]
 802f1be:	e609      	b.n	802edd4 <_dtoa_r+0x66c>
 802f1c0:	9b07      	ldr	r3, [sp, #28]
 802f1c2:	9a07      	ldr	r2, [sp, #28]
 802f1c4:	f803 8c01 	strb.w	r8, [r3, #-1]
 802f1c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802f1ca:	4293      	cmp	r3, r2
 802f1cc:	d028      	beq.n	802f220 <_dtoa_r+0xab8>
 802f1ce:	4649      	mov	r1, r9
 802f1d0:	2300      	movs	r3, #0
 802f1d2:	220a      	movs	r2, #10
 802f1d4:	4658      	mov	r0, fp
 802f1d6:	f004 fd25 	bl	8033c24 <__multadd>
 802f1da:	42af      	cmp	r7, r5
 802f1dc:	4681      	mov	r9, r0
 802f1de:	f04f 0300 	mov.w	r3, #0
 802f1e2:	f04f 020a 	mov.w	r2, #10
 802f1e6:	4639      	mov	r1, r7
 802f1e8:	4658      	mov	r0, fp
 802f1ea:	d107      	bne.n	802f1fc <_dtoa_r+0xa94>
 802f1ec:	f004 fd1a 	bl	8033c24 <__multadd>
 802f1f0:	4607      	mov	r7, r0
 802f1f2:	4605      	mov	r5, r0
 802f1f4:	9b07      	ldr	r3, [sp, #28]
 802f1f6:	3301      	adds	r3, #1
 802f1f8:	9307      	str	r3, [sp, #28]
 802f1fa:	e774      	b.n	802f0e6 <_dtoa_r+0x97e>
 802f1fc:	f004 fd12 	bl	8033c24 <__multadd>
 802f200:	4629      	mov	r1, r5
 802f202:	4607      	mov	r7, r0
 802f204:	2300      	movs	r3, #0
 802f206:	220a      	movs	r2, #10
 802f208:	4658      	mov	r0, fp
 802f20a:	f004 fd0b 	bl	8033c24 <__multadd>
 802f20e:	4605      	mov	r5, r0
 802f210:	e7f0      	b.n	802f1f4 <_dtoa_r+0xa8c>
 802f212:	9b00      	ldr	r3, [sp, #0]
 802f214:	2b00      	cmp	r3, #0
 802f216:	bfcc      	ite	gt
 802f218:	461e      	movgt	r6, r3
 802f21a:	2601      	movle	r6, #1
 802f21c:	4456      	add	r6, sl
 802f21e:	2700      	movs	r7, #0
 802f220:	4649      	mov	r1, r9
 802f222:	2201      	movs	r2, #1
 802f224:	4658      	mov	r0, fp
 802f226:	f004 fed9 	bl	8033fdc <__lshift>
 802f22a:	4621      	mov	r1, r4
 802f22c:	4681      	mov	r9, r0
 802f22e:	f004 ff41 	bl	80340b4 <__mcmp>
 802f232:	2800      	cmp	r0, #0
 802f234:	dcb0      	bgt.n	802f198 <_dtoa_r+0xa30>
 802f236:	d102      	bne.n	802f23e <_dtoa_r+0xad6>
 802f238:	f018 0f01 	tst.w	r8, #1
 802f23c:	d1ac      	bne.n	802f198 <_dtoa_r+0xa30>
 802f23e:	4633      	mov	r3, r6
 802f240:	461e      	mov	r6, r3
 802f242:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802f246:	2a30      	cmp	r2, #48	@ 0x30
 802f248:	d0fa      	beq.n	802f240 <_dtoa_r+0xad8>
 802f24a:	e5c3      	b.n	802edd4 <_dtoa_r+0x66c>
 802f24c:	459a      	cmp	sl, r3
 802f24e:	d1a4      	bne.n	802f19a <_dtoa_r+0xa32>
 802f250:	9b04      	ldr	r3, [sp, #16]
 802f252:	3301      	adds	r3, #1
 802f254:	9304      	str	r3, [sp, #16]
 802f256:	2331      	movs	r3, #49	@ 0x31
 802f258:	f88a 3000 	strb.w	r3, [sl]
 802f25c:	e5ba      	b.n	802edd4 <_dtoa_r+0x66c>
 802f25e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802f260:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802f2bc <_dtoa_r+0xb54>
 802f264:	2b00      	cmp	r3, #0
 802f266:	f43f aab6 	beq.w	802e7d6 <_dtoa_r+0x6e>
 802f26a:	f10a 0308 	add.w	r3, sl, #8
 802f26e:	f7ff bab0 	b.w	802e7d2 <_dtoa_r+0x6a>
 802f272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f274:	2b01      	cmp	r3, #1
 802f276:	f77f ae3a 	ble.w	802eeee <_dtoa_r+0x786>
 802f27a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802f27c:	930a      	str	r3, [sp, #40]	@ 0x28
 802f27e:	2001      	movs	r0, #1
 802f280:	e658      	b.n	802ef34 <_dtoa_r+0x7cc>
 802f282:	9b00      	ldr	r3, [sp, #0]
 802f284:	2b00      	cmp	r3, #0
 802f286:	f77f aed9 	ble.w	802f03c <_dtoa_r+0x8d4>
 802f28a:	4656      	mov	r6, sl
 802f28c:	4621      	mov	r1, r4
 802f28e:	4648      	mov	r0, r9
 802f290:	f7ff f9df 	bl	802e652 <quorem>
 802f294:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802f298:	f806 8b01 	strb.w	r8, [r6], #1
 802f29c:	9b00      	ldr	r3, [sp, #0]
 802f29e:	eba6 020a 	sub.w	r2, r6, sl
 802f2a2:	4293      	cmp	r3, r2
 802f2a4:	ddb5      	ble.n	802f212 <_dtoa_r+0xaaa>
 802f2a6:	4649      	mov	r1, r9
 802f2a8:	2300      	movs	r3, #0
 802f2aa:	220a      	movs	r2, #10
 802f2ac:	4658      	mov	r0, fp
 802f2ae:	f004 fcb9 	bl	8033c24 <__multadd>
 802f2b2:	4681      	mov	r9, r0
 802f2b4:	e7ea      	b.n	802f28c <_dtoa_r+0xb24>
 802f2b6:	bf00      	nop
 802f2b8:	0803c9ea 	.word	0x0803c9ea
 802f2bc:	0803c9dd 	.word	0x0803c9dd

0802f2c0 <_malloc_trim_r>:
 802f2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802f2c4:	4606      	mov	r6, r0
 802f2c6:	2008      	movs	r0, #8
 802f2c8:	4689      	mov	r9, r1
 802f2ca:	f006 fb53 	bl	8035974 <sysconf>
 802f2ce:	4f24      	ldr	r7, [pc, #144]	@ (802f360 <_malloc_trim_r+0xa0>)
 802f2d0:	4680      	mov	r8, r0
 802f2d2:	4630      	mov	r0, r6
 802f2d4:	f004 fc6c 	bl	8033bb0 <__malloc_lock>
 802f2d8:	68bb      	ldr	r3, [r7, #8]
 802f2da:	685d      	ldr	r5, [r3, #4]
 802f2dc:	f025 0503 	bic.w	r5, r5, #3
 802f2e0:	f1a5 0411 	sub.w	r4, r5, #17
 802f2e4:	eba4 0409 	sub.w	r4, r4, r9
 802f2e8:	4444      	add	r4, r8
 802f2ea:	fbb4 f4f8 	udiv	r4, r4, r8
 802f2ee:	3c01      	subs	r4, #1
 802f2f0:	fb08 f404 	mul.w	r4, r8, r4
 802f2f4:	45a0      	cmp	r8, r4
 802f2f6:	dd05      	ble.n	802f304 <_malloc_trim_r+0x44>
 802f2f8:	4630      	mov	r0, r6
 802f2fa:	f004 fc5f 	bl	8033bbc <__malloc_unlock>
 802f2fe:	2000      	movs	r0, #0
 802f300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802f304:	2100      	movs	r1, #0
 802f306:	4630      	mov	r0, r6
 802f308:	f006 fb24 	bl	8035954 <_sbrk_r>
 802f30c:	68bb      	ldr	r3, [r7, #8]
 802f30e:	442b      	add	r3, r5
 802f310:	4298      	cmp	r0, r3
 802f312:	d1f1      	bne.n	802f2f8 <_malloc_trim_r+0x38>
 802f314:	4261      	negs	r1, r4
 802f316:	4630      	mov	r0, r6
 802f318:	f006 fb1c 	bl	8035954 <_sbrk_r>
 802f31c:	3001      	adds	r0, #1
 802f31e:	d110      	bne.n	802f342 <_malloc_trim_r+0x82>
 802f320:	2100      	movs	r1, #0
 802f322:	4630      	mov	r0, r6
 802f324:	f006 fb16 	bl	8035954 <_sbrk_r>
 802f328:	68ba      	ldr	r2, [r7, #8]
 802f32a:	1a83      	subs	r3, r0, r2
 802f32c:	2b0f      	cmp	r3, #15
 802f32e:	dde3      	ble.n	802f2f8 <_malloc_trim_r+0x38>
 802f330:	490c      	ldr	r1, [pc, #48]	@ (802f364 <_malloc_trim_r+0xa4>)
 802f332:	6809      	ldr	r1, [r1, #0]
 802f334:	1a40      	subs	r0, r0, r1
 802f336:	490c      	ldr	r1, [pc, #48]	@ (802f368 <_malloc_trim_r+0xa8>)
 802f338:	f043 0301 	orr.w	r3, r3, #1
 802f33c:	6008      	str	r0, [r1, #0]
 802f33e:	6053      	str	r3, [r2, #4]
 802f340:	e7da      	b.n	802f2f8 <_malloc_trim_r+0x38>
 802f342:	68bb      	ldr	r3, [r7, #8]
 802f344:	4a08      	ldr	r2, [pc, #32]	@ (802f368 <_malloc_trim_r+0xa8>)
 802f346:	1b2d      	subs	r5, r5, r4
 802f348:	f045 0501 	orr.w	r5, r5, #1
 802f34c:	605d      	str	r5, [r3, #4]
 802f34e:	6813      	ldr	r3, [r2, #0]
 802f350:	4630      	mov	r0, r6
 802f352:	1b1b      	subs	r3, r3, r4
 802f354:	6013      	str	r3, [r2, #0]
 802f356:	f004 fc31 	bl	8033bbc <__malloc_unlock>
 802f35a:	2001      	movs	r0, #1
 802f35c:	e7d0      	b.n	802f300 <_malloc_trim_r+0x40>
 802f35e:	bf00      	nop
 802f360:	2000040c 	.word	0x2000040c
 802f364:	20000404 	.word	0x20000404
 802f368:	2001a0f4 	.word	0x2001a0f4

0802f36c <_free_r>:
 802f36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f36e:	4604      	mov	r4, r0
 802f370:	460f      	mov	r7, r1
 802f372:	2900      	cmp	r1, #0
 802f374:	f000 80b1 	beq.w	802f4da <_free_r+0x16e>
 802f378:	f004 fc1a 	bl	8033bb0 <__malloc_lock>
 802f37c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802f380:	4d56      	ldr	r5, [pc, #344]	@ (802f4dc <_free_r+0x170>)
 802f382:	f022 0001 	bic.w	r0, r2, #1
 802f386:	f1a7 0308 	sub.w	r3, r7, #8
 802f38a:	eb03 0c00 	add.w	ip, r3, r0
 802f38e:	68a9      	ldr	r1, [r5, #8]
 802f390:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802f394:	4561      	cmp	r1, ip
 802f396:	f026 0603 	bic.w	r6, r6, #3
 802f39a:	f002 0201 	and.w	r2, r2, #1
 802f39e:	d11b      	bne.n	802f3d8 <_free_r+0x6c>
 802f3a0:	4406      	add	r6, r0
 802f3a2:	b93a      	cbnz	r2, 802f3b4 <_free_r+0x48>
 802f3a4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802f3a8:	1a9b      	subs	r3, r3, r2
 802f3aa:	4416      	add	r6, r2
 802f3ac:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802f3b0:	60ca      	str	r2, [r1, #12]
 802f3b2:	6091      	str	r1, [r2, #8]
 802f3b4:	f046 0201 	orr.w	r2, r6, #1
 802f3b8:	605a      	str	r2, [r3, #4]
 802f3ba:	60ab      	str	r3, [r5, #8]
 802f3bc:	4b48      	ldr	r3, [pc, #288]	@ (802f4e0 <_free_r+0x174>)
 802f3be:	681b      	ldr	r3, [r3, #0]
 802f3c0:	42b3      	cmp	r3, r6
 802f3c2:	d804      	bhi.n	802f3ce <_free_r+0x62>
 802f3c4:	4b47      	ldr	r3, [pc, #284]	@ (802f4e4 <_free_r+0x178>)
 802f3c6:	4620      	mov	r0, r4
 802f3c8:	6819      	ldr	r1, [r3, #0]
 802f3ca:	f7ff ff79 	bl	802f2c0 <_malloc_trim_r>
 802f3ce:	4620      	mov	r0, r4
 802f3d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802f3d4:	f004 bbf2 	b.w	8033bbc <__malloc_unlock>
 802f3d8:	f8cc 6004 	str.w	r6, [ip, #4]
 802f3dc:	2a00      	cmp	r2, #0
 802f3de:	d138      	bne.n	802f452 <_free_r+0xe6>
 802f3e0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802f3e4:	1a5b      	subs	r3, r3, r1
 802f3e6:	4408      	add	r0, r1
 802f3e8:	6899      	ldr	r1, [r3, #8]
 802f3ea:	f105 0708 	add.w	r7, r5, #8
 802f3ee:	42b9      	cmp	r1, r7
 802f3f0:	d031      	beq.n	802f456 <_free_r+0xea>
 802f3f2:	68df      	ldr	r7, [r3, #12]
 802f3f4:	60cf      	str	r7, [r1, #12]
 802f3f6:	60b9      	str	r1, [r7, #8]
 802f3f8:	eb0c 0106 	add.w	r1, ip, r6
 802f3fc:	6849      	ldr	r1, [r1, #4]
 802f3fe:	07c9      	lsls	r1, r1, #31
 802f400:	d40b      	bmi.n	802f41a <_free_r+0xae>
 802f402:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802f406:	4430      	add	r0, r6
 802f408:	bb3a      	cbnz	r2, 802f45a <_free_r+0xee>
 802f40a:	4e37      	ldr	r6, [pc, #220]	@ (802f4e8 <_free_r+0x17c>)
 802f40c:	42b1      	cmp	r1, r6
 802f40e:	d124      	bne.n	802f45a <_free_r+0xee>
 802f410:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802f414:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802f418:	2201      	movs	r2, #1
 802f41a:	f040 0101 	orr.w	r1, r0, #1
 802f41e:	6059      	str	r1, [r3, #4]
 802f420:	5018      	str	r0, [r3, r0]
 802f422:	2a00      	cmp	r2, #0
 802f424:	d1d3      	bne.n	802f3ce <_free_r+0x62>
 802f426:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802f42a:	d21b      	bcs.n	802f464 <_free_r+0xf8>
 802f42c:	08c2      	lsrs	r2, r0, #3
 802f42e:	2101      	movs	r1, #1
 802f430:	0940      	lsrs	r0, r0, #5
 802f432:	4081      	lsls	r1, r0
 802f434:	6868      	ldr	r0, [r5, #4]
 802f436:	3201      	adds	r2, #1
 802f438:	4301      	orrs	r1, r0
 802f43a:	6069      	str	r1, [r5, #4]
 802f43c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 802f440:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802f444:	3908      	subs	r1, #8
 802f446:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802f44a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 802f44e:	60c3      	str	r3, [r0, #12]
 802f450:	e7bd      	b.n	802f3ce <_free_r+0x62>
 802f452:	2200      	movs	r2, #0
 802f454:	e7d0      	b.n	802f3f8 <_free_r+0x8c>
 802f456:	2201      	movs	r2, #1
 802f458:	e7ce      	b.n	802f3f8 <_free_r+0x8c>
 802f45a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802f45e:	60ce      	str	r6, [r1, #12]
 802f460:	60b1      	str	r1, [r6, #8]
 802f462:	e7da      	b.n	802f41a <_free_r+0xae>
 802f464:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 802f468:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802f46c:	d214      	bcs.n	802f498 <_free_r+0x12c>
 802f46e:	0982      	lsrs	r2, r0, #6
 802f470:	3238      	adds	r2, #56	@ 0x38
 802f472:	1c51      	adds	r1, r2, #1
 802f474:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802f478:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802f47c:	428e      	cmp	r6, r1
 802f47e:	d125      	bne.n	802f4cc <_free_r+0x160>
 802f480:	2001      	movs	r0, #1
 802f482:	1092      	asrs	r2, r2, #2
 802f484:	fa00 f202 	lsl.w	r2, r0, r2
 802f488:	6868      	ldr	r0, [r5, #4]
 802f48a:	4302      	orrs	r2, r0
 802f48c:	606a      	str	r2, [r5, #4]
 802f48e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802f492:	60b3      	str	r3, [r6, #8]
 802f494:	60cb      	str	r3, [r1, #12]
 802f496:	e79a      	b.n	802f3ce <_free_r+0x62>
 802f498:	2a14      	cmp	r2, #20
 802f49a:	d801      	bhi.n	802f4a0 <_free_r+0x134>
 802f49c:	325b      	adds	r2, #91	@ 0x5b
 802f49e:	e7e8      	b.n	802f472 <_free_r+0x106>
 802f4a0:	2a54      	cmp	r2, #84	@ 0x54
 802f4a2:	d802      	bhi.n	802f4aa <_free_r+0x13e>
 802f4a4:	0b02      	lsrs	r2, r0, #12
 802f4a6:	326e      	adds	r2, #110	@ 0x6e
 802f4a8:	e7e3      	b.n	802f472 <_free_r+0x106>
 802f4aa:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802f4ae:	d802      	bhi.n	802f4b6 <_free_r+0x14a>
 802f4b0:	0bc2      	lsrs	r2, r0, #15
 802f4b2:	3277      	adds	r2, #119	@ 0x77
 802f4b4:	e7dd      	b.n	802f472 <_free_r+0x106>
 802f4b6:	f240 5154 	movw	r1, #1364	@ 0x554
 802f4ba:	428a      	cmp	r2, r1
 802f4bc:	bf9a      	itte	ls
 802f4be:	0c82      	lsrls	r2, r0, #18
 802f4c0:	327c      	addls	r2, #124	@ 0x7c
 802f4c2:	227e      	movhi	r2, #126	@ 0x7e
 802f4c4:	e7d5      	b.n	802f472 <_free_r+0x106>
 802f4c6:	6889      	ldr	r1, [r1, #8]
 802f4c8:	428e      	cmp	r6, r1
 802f4ca:	d004      	beq.n	802f4d6 <_free_r+0x16a>
 802f4cc:	684a      	ldr	r2, [r1, #4]
 802f4ce:	f022 0203 	bic.w	r2, r2, #3
 802f4d2:	4282      	cmp	r2, r0
 802f4d4:	d8f7      	bhi.n	802f4c6 <_free_r+0x15a>
 802f4d6:	68ce      	ldr	r6, [r1, #12]
 802f4d8:	e7d9      	b.n	802f48e <_free_r+0x122>
 802f4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802f4dc:	2000040c 	.word	0x2000040c
 802f4e0:	20000408 	.word	0x20000408
 802f4e4:	2001a124 	.word	0x2001a124
 802f4e8:	20000414 	.word	0x20000414

0802f4ec <_findenv_r>:
 802f4ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f4f0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802f560 <_findenv_r+0x74>
 802f4f4:	4606      	mov	r6, r0
 802f4f6:	4689      	mov	r9, r1
 802f4f8:	4617      	mov	r7, r2
 802f4fa:	f006 fc31 	bl	8035d60 <__env_lock>
 802f4fe:	f8da 4000 	ldr.w	r4, [sl]
 802f502:	b134      	cbz	r4, 802f512 <_findenv_r+0x26>
 802f504:	464b      	mov	r3, r9
 802f506:	4698      	mov	r8, r3
 802f508:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f50c:	b13a      	cbz	r2, 802f51e <_findenv_r+0x32>
 802f50e:	2a3d      	cmp	r2, #61	@ 0x3d
 802f510:	d1f9      	bne.n	802f506 <_findenv_r+0x1a>
 802f512:	4630      	mov	r0, r6
 802f514:	f006 fc2a 	bl	8035d6c <__env_unlock>
 802f518:	2000      	movs	r0, #0
 802f51a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f51e:	eba8 0809 	sub.w	r8, r8, r9
 802f522:	46a3      	mov	fp, r4
 802f524:	f854 0b04 	ldr.w	r0, [r4], #4
 802f528:	2800      	cmp	r0, #0
 802f52a:	d0f2      	beq.n	802f512 <_findenv_r+0x26>
 802f52c:	4642      	mov	r2, r8
 802f52e:	4649      	mov	r1, r9
 802f530:	f7fd fe13 	bl	802d15a <strncmp>
 802f534:	2800      	cmp	r0, #0
 802f536:	d1f4      	bne.n	802f522 <_findenv_r+0x36>
 802f538:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802f53c:	eb03 0508 	add.w	r5, r3, r8
 802f540:	f813 3008 	ldrb.w	r3, [r3, r8]
 802f544:	2b3d      	cmp	r3, #61	@ 0x3d
 802f546:	d1ec      	bne.n	802f522 <_findenv_r+0x36>
 802f548:	f8da 3000 	ldr.w	r3, [sl]
 802f54c:	ebab 0303 	sub.w	r3, fp, r3
 802f550:	109b      	asrs	r3, r3, #2
 802f552:	4630      	mov	r0, r6
 802f554:	603b      	str	r3, [r7, #0]
 802f556:	f006 fc09 	bl	8035d6c <__env_unlock>
 802f55a:	1c68      	adds	r0, r5, #1
 802f55c:	e7dd      	b.n	802f51a <_findenv_r+0x2e>
 802f55e:	bf00      	nop
 802f560:	20000014 	.word	0x20000014

0802f564 <_getenv_r>:
 802f564:	b507      	push	{r0, r1, r2, lr}
 802f566:	aa01      	add	r2, sp, #4
 802f568:	f7ff ffc0 	bl	802f4ec <_findenv_r>
 802f56c:	b003      	add	sp, #12
 802f56e:	f85d fb04 	ldr.w	pc, [sp], #4

0802f572 <labs>:
 802f572:	2800      	cmp	r0, #0
 802f574:	bfb8      	it	lt
 802f576:	4240      	neglt	r0, r0
 802f578:	4770      	bx	lr
	...

0802f57c <malloc>:
 802f57c:	4b02      	ldr	r3, [pc, #8]	@ (802f588 <malloc+0xc>)
 802f57e:	4601      	mov	r1, r0
 802f580:	6818      	ldr	r0, [r3, #0]
 802f582:	f000 b80b 	b.w	802f59c <_malloc_r>
 802f586:	bf00      	nop
 802f588:	200002d8 	.word	0x200002d8

0802f58c <free>:
 802f58c:	4b02      	ldr	r3, [pc, #8]	@ (802f598 <free+0xc>)
 802f58e:	4601      	mov	r1, r0
 802f590:	6818      	ldr	r0, [r3, #0]
 802f592:	f7ff beeb 	b.w	802f36c <_free_r>
 802f596:	bf00      	nop
 802f598:	200002d8 	.word	0x200002d8

0802f59c <_malloc_r>:
 802f59c:	f101 030b 	add.w	r3, r1, #11
 802f5a0:	2b16      	cmp	r3, #22
 802f5a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f5a6:	4605      	mov	r5, r0
 802f5a8:	d906      	bls.n	802f5b8 <_malloc_r+0x1c>
 802f5aa:	f033 0707 	bics.w	r7, r3, #7
 802f5ae:	d504      	bpl.n	802f5ba <_malloc_r+0x1e>
 802f5b0:	230c      	movs	r3, #12
 802f5b2:	602b      	str	r3, [r5, #0]
 802f5b4:	2400      	movs	r4, #0
 802f5b6:	e1a3      	b.n	802f900 <_malloc_r+0x364>
 802f5b8:	2710      	movs	r7, #16
 802f5ba:	42b9      	cmp	r1, r7
 802f5bc:	d8f8      	bhi.n	802f5b0 <_malloc_r+0x14>
 802f5be:	4628      	mov	r0, r5
 802f5c0:	f004 faf6 	bl	8033bb0 <__malloc_lock>
 802f5c4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 802f5c8:	4eaf      	ldr	r6, [pc, #700]	@ (802f888 <_malloc_r+0x2ec>)
 802f5ca:	d237      	bcs.n	802f63c <_malloc_r+0xa0>
 802f5cc:	f107 0208 	add.w	r2, r7, #8
 802f5d0:	4432      	add	r2, r6
 802f5d2:	f1a2 0108 	sub.w	r1, r2, #8
 802f5d6:	6854      	ldr	r4, [r2, #4]
 802f5d8:	428c      	cmp	r4, r1
 802f5da:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802f5de:	d102      	bne.n	802f5e6 <_malloc_r+0x4a>
 802f5e0:	68d4      	ldr	r4, [r2, #12]
 802f5e2:	42a2      	cmp	r2, r4
 802f5e4:	d010      	beq.n	802f608 <_malloc_r+0x6c>
 802f5e6:	6863      	ldr	r3, [r4, #4]
 802f5e8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802f5ec:	f023 0303 	bic.w	r3, r3, #3
 802f5f0:	60ca      	str	r2, [r1, #12]
 802f5f2:	4423      	add	r3, r4
 802f5f4:	6091      	str	r1, [r2, #8]
 802f5f6:	685a      	ldr	r2, [r3, #4]
 802f5f8:	f042 0201 	orr.w	r2, r2, #1
 802f5fc:	605a      	str	r2, [r3, #4]
 802f5fe:	4628      	mov	r0, r5
 802f600:	f004 fadc 	bl	8033bbc <__malloc_unlock>
 802f604:	3408      	adds	r4, #8
 802f606:	e17b      	b.n	802f900 <_malloc_r+0x364>
 802f608:	3302      	adds	r3, #2
 802f60a:	6934      	ldr	r4, [r6, #16]
 802f60c:	499f      	ldr	r1, [pc, #636]	@ (802f88c <_malloc_r+0x2f0>)
 802f60e:	428c      	cmp	r4, r1
 802f610:	d077      	beq.n	802f702 <_malloc_r+0x166>
 802f612:	6862      	ldr	r2, [r4, #4]
 802f614:	f022 0c03 	bic.w	ip, r2, #3
 802f618:	ebac 0007 	sub.w	r0, ip, r7
 802f61c:	280f      	cmp	r0, #15
 802f61e:	dd48      	ble.n	802f6b2 <_malloc_r+0x116>
 802f620:	19e2      	adds	r2, r4, r7
 802f622:	f040 0301 	orr.w	r3, r0, #1
 802f626:	f047 0701 	orr.w	r7, r7, #1
 802f62a:	6067      	str	r7, [r4, #4]
 802f62c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802f630:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802f634:	6053      	str	r3, [r2, #4]
 802f636:	f844 000c 	str.w	r0, [r4, ip]
 802f63a:	e7e0      	b.n	802f5fe <_malloc_r+0x62>
 802f63c:	0a7b      	lsrs	r3, r7, #9
 802f63e:	d02a      	beq.n	802f696 <_malloc_r+0xfa>
 802f640:	2b04      	cmp	r3, #4
 802f642:	d812      	bhi.n	802f66a <_malloc_r+0xce>
 802f644:	09bb      	lsrs	r3, r7, #6
 802f646:	3338      	adds	r3, #56	@ 0x38
 802f648:	1c5a      	adds	r2, r3, #1
 802f64a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802f64e:	f1a2 0c08 	sub.w	ip, r2, #8
 802f652:	6854      	ldr	r4, [r2, #4]
 802f654:	4564      	cmp	r4, ip
 802f656:	d006      	beq.n	802f666 <_malloc_r+0xca>
 802f658:	6862      	ldr	r2, [r4, #4]
 802f65a:	f022 0203 	bic.w	r2, r2, #3
 802f65e:	1bd0      	subs	r0, r2, r7
 802f660:	280f      	cmp	r0, #15
 802f662:	dd1c      	ble.n	802f69e <_malloc_r+0x102>
 802f664:	3b01      	subs	r3, #1
 802f666:	3301      	adds	r3, #1
 802f668:	e7cf      	b.n	802f60a <_malloc_r+0x6e>
 802f66a:	2b14      	cmp	r3, #20
 802f66c:	d801      	bhi.n	802f672 <_malloc_r+0xd6>
 802f66e:	335b      	adds	r3, #91	@ 0x5b
 802f670:	e7ea      	b.n	802f648 <_malloc_r+0xac>
 802f672:	2b54      	cmp	r3, #84	@ 0x54
 802f674:	d802      	bhi.n	802f67c <_malloc_r+0xe0>
 802f676:	0b3b      	lsrs	r3, r7, #12
 802f678:	336e      	adds	r3, #110	@ 0x6e
 802f67a:	e7e5      	b.n	802f648 <_malloc_r+0xac>
 802f67c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 802f680:	d802      	bhi.n	802f688 <_malloc_r+0xec>
 802f682:	0bfb      	lsrs	r3, r7, #15
 802f684:	3377      	adds	r3, #119	@ 0x77
 802f686:	e7df      	b.n	802f648 <_malloc_r+0xac>
 802f688:	f240 5254 	movw	r2, #1364	@ 0x554
 802f68c:	4293      	cmp	r3, r2
 802f68e:	d804      	bhi.n	802f69a <_malloc_r+0xfe>
 802f690:	0cbb      	lsrs	r3, r7, #18
 802f692:	337c      	adds	r3, #124	@ 0x7c
 802f694:	e7d8      	b.n	802f648 <_malloc_r+0xac>
 802f696:	233f      	movs	r3, #63	@ 0x3f
 802f698:	e7d6      	b.n	802f648 <_malloc_r+0xac>
 802f69a:	237e      	movs	r3, #126	@ 0x7e
 802f69c:	e7d4      	b.n	802f648 <_malloc_r+0xac>
 802f69e:	2800      	cmp	r0, #0
 802f6a0:	68e1      	ldr	r1, [r4, #12]
 802f6a2:	db04      	blt.n	802f6ae <_malloc_r+0x112>
 802f6a4:	68a3      	ldr	r3, [r4, #8]
 802f6a6:	60d9      	str	r1, [r3, #12]
 802f6a8:	608b      	str	r3, [r1, #8]
 802f6aa:	18a3      	adds	r3, r4, r2
 802f6ac:	e7a3      	b.n	802f5f6 <_malloc_r+0x5a>
 802f6ae:	460c      	mov	r4, r1
 802f6b0:	e7d0      	b.n	802f654 <_malloc_r+0xb8>
 802f6b2:	2800      	cmp	r0, #0
 802f6b4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802f6b8:	db07      	blt.n	802f6ca <_malloc_r+0x12e>
 802f6ba:	44a4      	add	ip, r4
 802f6bc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802f6c0:	f043 0301 	orr.w	r3, r3, #1
 802f6c4:	f8cc 3004 	str.w	r3, [ip, #4]
 802f6c8:	e799      	b.n	802f5fe <_malloc_r+0x62>
 802f6ca:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802f6ce:	6870      	ldr	r0, [r6, #4]
 802f6d0:	f080 8095 	bcs.w	802f7fe <_malloc_r+0x262>
 802f6d4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802f6d8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802f6dc:	f04f 0c01 	mov.w	ip, #1
 802f6e0:	3201      	adds	r2, #1
 802f6e2:	fa0c fc0e 	lsl.w	ip, ip, lr
 802f6e6:	ea4c 0000 	orr.w	r0, ip, r0
 802f6ea:	6070      	str	r0, [r6, #4]
 802f6ec:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802f6f0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802f6f4:	3808      	subs	r0, #8
 802f6f6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802f6fa:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802f6fe:	f8cc 400c 	str.w	r4, [ip, #12]
 802f702:	1098      	asrs	r0, r3, #2
 802f704:	2201      	movs	r2, #1
 802f706:	4082      	lsls	r2, r0
 802f708:	6870      	ldr	r0, [r6, #4]
 802f70a:	4290      	cmp	r0, r2
 802f70c:	d326      	bcc.n	802f75c <_malloc_r+0x1c0>
 802f70e:	4210      	tst	r0, r2
 802f710:	d106      	bne.n	802f720 <_malloc_r+0x184>
 802f712:	f023 0303 	bic.w	r3, r3, #3
 802f716:	0052      	lsls	r2, r2, #1
 802f718:	4210      	tst	r0, r2
 802f71a:	f103 0304 	add.w	r3, r3, #4
 802f71e:	d0fa      	beq.n	802f716 <_malloc_r+0x17a>
 802f720:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802f724:	46c1      	mov	r9, r8
 802f726:	469e      	mov	lr, r3
 802f728:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802f72c:	454c      	cmp	r4, r9
 802f72e:	f040 80b9 	bne.w	802f8a4 <_malloc_r+0x308>
 802f732:	f10e 0e01 	add.w	lr, lr, #1
 802f736:	f01e 0f03 	tst.w	lr, #3
 802f73a:	f109 0908 	add.w	r9, r9, #8
 802f73e:	d1f3      	bne.n	802f728 <_malloc_r+0x18c>
 802f740:	0798      	lsls	r0, r3, #30
 802f742:	f040 80e3 	bne.w	802f90c <_malloc_r+0x370>
 802f746:	6873      	ldr	r3, [r6, #4]
 802f748:	ea23 0302 	bic.w	r3, r3, r2
 802f74c:	6073      	str	r3, [r6, #4]
 802f74e:	6870      	ldr	r0, [r6, #4]
 802f750:	0052      	lsls	r2, r2, #1
 802f752:	4290      	cmp	r0, r2
 802f754:	d302      	bcc.n	802f75c <_malloc_r+0x1c0>
 802f756:	2a00      	cmp	r2, #0
 802f758:	f040 80e5 	bne.w	802f926 <_malloc_r+0x38a>
 802f75c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802f760:	f8da 3004 	ldr.w	r3, [sl, #4]
 802f764:	f023 0903 	bic.w	r9, r3, #3
 802f768:	45b9      	cmp	r9, r7
 802f76a:	d304      	bcc.n	802f776 <_malloc_r+0x1da>
 802f76c:	eba9 0207 	sub.w	r2, r9, r7
 802f770:	2a0f      	cmp	r2, #15
 802f772:	f300 8141 	bgt.w	802f9f8 <_malloc_r+0x45c>
 802f776:	4b46      	ldr	r3, [pc, #280]	@ (802f890 <_malloc_r+0x2f4>)
 802f778:	6819      	ldr	r1, [r3, #0]
 802f77a:	3110      	adds	r1, #16
 802f77c:	4439      	add	r1, r7
 802f77e:	2008      	movs	r0, #8
 802f780:	9101      	str	r1, [sp, #4]
 802f782:	f006 f8f7 	bl	8035974 <sysconf>
 802f786:	4a43      	ldr	r2, [pc, #268]	@ (802f894 <_malloc_r+0x2f8>)
 802f788:	9901      	ldr	r1, [sp, #4]
 802f78a:	6813      	ldr	r3, [r2, #0]
 802f78c:	3301      	adds	r3, #1
 802f78e:	bf1f      	itttt	ne
 802f790:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 802f794:	1809      	addne	r1, r1, r0
 802f796:	4243      	negne	r3, r0
 802f798:	4019      	andne	r1, r3
 802f79a:	4680      	mov	r8, r0
 802f79c:	4628      	mov	r0, r5
 802f79e:	9101      	str	r1, [sp, #4]
 802f7a0:	f006 f8d8 	bl	8035954 <_sbrk_r>
 802f7a4:	1c42      	adds	r2, r0, #1
 802f7a6:	eb0a 0b09 	add.w	fp, sl, r9
 802f7aa:	4604      	mov	r4, r0
 802f7ac:	f000 80f7 	beq.w	802f99e <_malloc_r+0x402>
 802f7b0:	4583      	cmp	fp, r0
 802f7b2:	9901      	ldr	r1, [sp, #4]
 802f7b4:	4a37      	ldr	r2, [pc, #220]	@ (802f894 <_malloc_r+0x2f8>)
 802f7b6:	d902      	bls.n	802f7be <_malloc_r+0x222>
 802f7b8:	45b2      	cmp	sl, r6
 802f7ba:	f040 80f0 	bne.w	802f99e <_malloc_r+0x402>
 802f7be:	4b36      	ldr	r3, [pc, #216]	@ (802f898 <_malloc_r+0x2fc>)
 802f7c0:	6818      	ldr	r0, [r3, #0]
 802f7c2:	45a3      	cmp	fp, r4
 802f7c4:	eb00 0e01 	add.w	lr, r0, r1
 802f7c8:	f8c3 e000 	str.w	lr, [r3]
 802f7cc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 802f7d0:	f040 80ab 	bne.w	802f92a <_malloc_r+0x38e>
 802f7d4:	ea1b 0f0c 	tst.w	fp, ip
 802f7d8:	f040 80a7 	bne.w	802f92a <_malloc_r+0x38e>
 802f7dc:	68b2      	ldr	r2, [r6, #8]
 802f7de:	4449      	add	r1, r9
 802f7e0:	f041 0101 	orr.w	r1, r1, #1
 802f7e4:	6051      	str	r1, [r2, #4]
 802f7e6:	4a2d      	ldr	r2, [pc, #180]	@ (802f89c <_malloc_r+0x300>)
 802f7e8:	681b      	ldr	r3, [r3, #0]
 802f7ea:	6811      	ldr	r1, [r2, #0]
 802f7ec:	428b      	cmp	r3, r1
 802f7ee:	bf88      	it	hi
 802f7f0:	6013      	strhi	r3, [r2, #0]
 802f7f2:	4a2b      	ldr	r2, [pc, #172]	@ (802f8a0 <_malloc_r+0x304>)
 802f7f4:	6811      	ldr	r1, [r2, #0]
 802f7f6:	428b      	cmp	r3, r1
 802f7f8:	bf88      	it	hi
 802f7fa:	6013      	strhi	r3, [r2, #0]
 802f7fc:	e0cf      	b.n	802f99e <_malloc_r+0x402>
 802f7fe:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 802f802:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802f806:	d218      	bcs.n	802f83a <_malloc_r+0x29e>
 802f808:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802f80c:	3238      	adds	r2, #56	@ 0x38
 802f80e:	f102 0e01 	add.w	lr, r2, #1
 802f812:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802f816:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802f81a:	45f0      	cmp	r8, lr
 802f81c:	d12b      	bne.n	802f876 <_malloc_r+0x2da>
 802f81e:	1092      	asrs	r2, r2, #2
 802f820:	f04f 0c01 	mov.w	ip, #1
 802f824:	fa0c f202 	lsl.w	r2, ip, r2
 802f828:	4302      	orrs	r2, r0
 802f82a:	6072      	str	r2, [r6, #4]
 802f82c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802f830:	f8c8 4008 	str.w	r4, [r8, #8]
 802f834:	f8ce 400c 	str.w	r4, [lr, #12]
 802f838:	e763      	b.n	802f702 <_malloc_r+0x166>
 802f83a:	2a14      	cmp	r2, #20
 802f83c:	d801      	bhi.n	802f842 <_malloc_r+0x2a6>
 802f83e:	325b      	adds	r2, #91	@ 0x5b
 802f840:	e7e5      	b.n	802f80e <_malloc_r+0x272>
 802f842:	2a54      	cmp	r2, #84	@ 0x54
 802f844:	d803      	bhi.n	802f84e <_malloc_r+0x2b2>
 802f846:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802f84a:	326e      	adds	r2, #110	@ 0x6e
 802f84c:	e7df      	b.n	802f80e <_malloc_r+0x272>
 802f84e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802f852:	d803      	bhi.n	802f85c <_malloc_r+0x2c0>
 802f854:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802f858:	3277      	adds	r2, #119	@ 0x77
 802f85a:	e7d8      	b.n	802f80e <_malloc_r+0x272>
 802f85c:	f240 5e54 	movw	lr, #1364	@ 0x554
 802f860:	4572      	cmp	r2, lr
 802f862:	bf9a      	itte	ls
 802f864:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802f868:	327c      	addls	r2, #124	@ 0x7c
 802f86a:	227e      	movhi	r2, #126	@ 0x7e
 802f86c:	e7cf      	b.n	802f80e <_malloc_r+0x272>
 802f86e:	f8de e008 	ldr.w	lr, [lr, #8]
 802f872:	45f0      	cmp	r8, lr
 802f874:	d005      	beq.n	802f882 <_malloc_r+0x2e6>
 802f876:	f8de 2004 	ldr.w	r2, [lr, #4]
 802f87a:	f022 0203 	bic.w	r2, r2, #3
 802f87e:	4562      	cmp	r2, ip
 802f880:	d8f5      	bhi.n	802f86e <_malloc_r+0x2d2>
 802f882:	f8de 800c 	ldr.w	r8, [lr, #12]
 802f886:	e7d1      	b.n	802f82c <_malloc_r+0x290>
 802f888:	2000040c 	.word	0x2000040c
 802f88c:	20000414 	.word	0x20000414
 802f890:	2001a124 	.word	0x2001a124
 802f894:	20000404 	.word	0x20000404
 802f898:	2001a0f4 	.word	0x2001a0f4
 802f89c:	2001a120 	.word	0x2001a120
 802f8a0:	2001a11c 	.word	0x2001a11c
 802f8a4:	6860      	ldr	r0, [r4, #4]
 802f8a6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802f8aa:	f020 0003 	bic.w	r0, r0, #3
 802f8ae:	eba0 0a07 	sub.w	sl, r0, r7
 802f8b2:	f1ba 0f0f 	cmp.w	sl, #15
 802f8b6:	dd12      	ble.n	802f8de <_malloc_r+0x342>
 802f8b8:	68a3      	ldr	r3, [r4, #8]
 802f8ba:	19e2      	adds	r2, r4, r7
 802f8bc:	f047 0701 	orr.w	r7, r7, #1
 802f8c0:	6067      	str	r7, [r4, #4]
 802f8c2:	f8c3 c00c 	str.w	ip, [r3, #12]
 802f8c6:	f8cc 3008 	str.w	r3, [ip, #8]
 802f8ca:	f04a 0301 	orr.w	r3, sl, #1
 802f8ce:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802f8d2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802f8d6:	6053      	str	r3, [r2, #4]
 802f8d8:	f844 a000 	str.w	sl, [r4, r0]
 802f8dc:	e68f      	b.n	802f5fe <_malloc_r+0x62>
 802f8de:	f1ba 0f00 	cmp.w	sl, #0
 802f8e2:	db11      	blt.n	802f908 <_malloc_r+0x36c>
 802f8e4:	4420      	add	r0, r4
 802f8e6:	6843      	ldr	r3, [r0, #4]
 802f8e8:	f043 0301 	orr.w	r3, r3, #1
 802f8ec:	6043      	str	r3, [r0, #4]
 802f8ee:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802f8f2:	4628      	mov	r0, r5
 802f8f4:	f8c3 c00c 	str.w	ip, [r3, #12]
 802f8f8:	f8cc 3008 	str.w	r3, [ip, #8]
 802f8fc:	f004 f95e 	bl	8033bbc <__malloc_unlock>
 802f900:	4620      	mov	r0, r4
 802f902:	b003      	add	sp, #12
 802f904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f908:	4664      	mov	r4, ip
 802f90a:	e70f      	b.n	802f72c <_malloc_r+0x190>
 802f90c:	f858 0908 	ldr.w	r0, [r8], #-8
 802f910:	4540      	cmp	r0, r8
 802f912:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802f916:	f43f af13 	beq.w	802f740 <_malloc_r+0x1a4>
 802f91a:	e718      	b.n	802f74e <_malloc_r+0x1b2>
 802f91c:	3304      	adds	r3, #4
 802f91e:	0052      	lsls	r2, r2, #1
 802f920:	4210      	tst	r0, r2
 802f922:	d0fb      	beq.n	802f91c <_malloc_r+0x380>
 802f924:	e6fc      	b.n	802f720 <_malloc_r+0x184>
 802f926:	4673      	mov	r3, lr
 802f928:	e7fa      	b.n	802f920 <_malloc_r+0x384>
 802f92a:	6810      	ldr	r0, [r2, #0]
 802f92c:	3001      	adds	r0, #1
 802f92e:	bf1b      	ittet	ne
 802f930:	eba4 0b0b 	subne.w	fp, r4, fp
 802f934:	eb0b 020e 	addne.w	r2, fp, lr
 802f938:	6014      	streq	r4, [r2, #0]
 802f93a:	601a      	strne	r2, [r3, #0]
 802f93c:	f014 0b07 	ands.w	fp, r4, #7
 802f940:	bf1a      	itte	ne
 802f942:	f1cb 0008 	rsbne	r0, fp, #8
 802f946:	1824      	addne	r4, r4, r0
 802f948:	4658      	moveq	r0, fp
 802f94a:	1862      	adds	r2, r4, r1
 802f94c:	ea02 010c 	and.w	r1, r2, ip
 802f950:	4480      	add	r8, r0
 802f952:	eba8 0801 	sub.w	r8, r8, r1
 802f956:	ea08 080c 	and.w	r8, r8, ip
 802f95a:	4641      	mov	r1, r8
 802f95c:	4628      	mov	r0, r5
 802f95e:	9201      	str	r2, [sp, #4]
 802f960:	f005 fff8 	bl	8035954 <_sbrk_r>
 802f964:	1c43      	adds	r3, r0, #1
 802f966:	9a01      	ldr	r2, [sp, #4]
 802f968:	4b28      	ldr	r3, [pc, #160]	@ (802fa0c <_malloc_r+0x470>)
 802f96a:	d107      	bne.n	802f97c <_malloc_r+0x3e0>
 802f96c:	f1bb 0f00 	cmp.w	fp, #0
 802f970:	d023      	beq.n	802f9ba <_malloc_r+0x41e>
 802f972:	f1ab 0008 	sub.w	r0, fp, #8
 802f976:	4410      	add	r0, r2
 802f978:	f04f 0800 	mov.w	r8, #0
 802f97c:	681a      	ldr	r2, [r3, #0]
 802f97e:	60b4      	str	r4, [r6, #8]
 802f980:	1b00      	subs	r0, r0, r4
 802f982:	4440      	add	r0, r8
 802f984:	4442      	add	r2, r8
 802f986:	f040 0001 	orr.w	r0, r0, #1
 802f98a:	45b2      	cmp	sl, r6
 802f98c:	601a      	str	r2, [r3, #0]
 802f98e:	6060      	str	r0, [r4, #4]
 802f990:	f43f af29 	beq.w	802f7e6 <_malloc_r+0x24a>
 802f994:	f1b9 0f0f 	cmp.w	r9, #15
 802f998:	d812      	bhi.n	802f9c0 <_malloc_r+0x424>
 802f99a:	2301      	movs	r3, #1
 802f99c:	6063      	str	r3, [r4, #4]
 802f99e:	68b3      	ldr	r3, [r6, #8]
 802f9a0:	685b      	ldr	r3, [r3, #4]
 802f9a2:	f023 0303 	bic.w	r3, r3, #3
 802f9a6:	42bb      	cmp	r3, r7
 802f9a8:	eba3 0207 	sub.w	r2, r3, r7
 802f9ac:	d301      	bcc.n	802f9b2 <_malloc_r+0x416>
 802f9ae:	2a0f      	cmp	r2, #15
 802f9b0:	dc22      	bgt.n	802f9f8 <_malloc_r+0x45c>
 802f9b2:	4628      	mov	r0, r5
 802f9b4:	f004 f902 	bl	8033bbc <__malloc_unlock>
 802f9b8:	e5fc      	b.n	802f5b4 <_malloc_r+0x18>
 802f9ba:	4610      	mov	r0, r2
 802f9bc:	46d8      	mov	r8, fp
 802f9be:	e7dd      	b.n	802f97c <_malloc_r+0x3e0>
 802f9c0:	f8da 2004 	ldr.w	r2, [sl, #4]
 802f9c4:	f1a9 090c 	sub.w	r9, r9, #12
 802f9c8:	f029 0907 	bic.w	r9, r9, #7
 802f9cc:	f002 0201 	and.w	r2, r2, #1
 802f9d0:	ea42 0209 	orr.w	r2, r2, r9
 802f9d4:	f8ca 2004 	str.w	r2, [sl, #4]
 802f9d8:	2105      	movs	r1, #5
 802f9da:	eb0a 0209 	add.w	r2, sl, r9
 802f9de:	f1b9 0f0f 	cmp.w	r9, #15
 802f9e2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802f9e6:	f67f aefe 	bls.w	802f7e6 <_malloc_r+0x24a>
 802f9ea:	f10a 0108 	add.w	r1, sl, #8
 802f9ee:	4628      	mov	r0, r5
 802f9f0:	f7ff fcbc 	bl	802f36c <_free_r>
 802f9f4:	4b05      	ldr	r3, [pc, #20]	@ (802fa0c <_malloc_r+0x470>)
 802f9f6:	e6f6      	b.n	802f7e6 <_malloc_r+0x24a>
 802f9f8:	68b4      	ldr	r4, [r6, #8]
 802f9fa:	f047 0301 	orr.w	r3, r7, #1
 802f9fe:	4427      	add	r7, r4
 802fa00:	f042 0201 	orr.w	r2, r2, #1
 802fa04:	6063      	str	r3, [r4, #4]
 802fa06:	60b7      	str	r7, [r6, #8]
 802fa08:	607a      	str	r2, [r7, #4]
 802fa0a:	e5f8      	b.n	802f5fe <_malloc_r+0x62>
 802fa0c:	2001a0f4 	.word	0x2001a0f4

0802fa10 <__ascii_mbtowc>:
 802fa10:	b082      	sub	sp, #8
 802fa12:	b901      	cbnz	r1, 802fa16 <__ascii_mbtowc+0x6>
 802fa14:	a901      	add	r1, sp, #4
 802fa16:	b142      	cbz	r2, 802fa2a <__ascii_mbtowc+0x1a>
 802fa18:	b14b      	cbz	r3, 802fa2e <__ascii_mbtowc+0x1e>
 802fa1a:	7813      	ldrb	r3, [r2, #0]
 802fa1c:	600b      	str	r3, [r1, #0]
 802fa1e:	7812      	ldrb	r2, [r2, #0]
 802fa20:	1e10      	subs	r0, r2, #0
 802fa22:	bf18      	it	ne
 802fa24:	2001      	movne	r0, #1
 802fa26:	b002      	add	sp, #8
 802fa28:	4770      	bx	lr
 802fa2a:	4610      	mov	r0, r2
 802fa2c:	e7fb      	b.n	802fa26 <__ascii_mbtowc+0x16>
 802fa2e:	f06f 0001 	mvn.w	r0, #1
 802fa32:	e7f8      	b.n	802fa26 <__ascii_mbtowc+0x16>

0802fa34 <siscanf>:
 802fa34:	b40e      	push	{r1, r2, r3}
 802fa36:	b530      	push	{r4, r5, lr}
 802fa38:	b09c      	sub	sp, #112	@ 0x70
 802fa3a:	ac1f      	add	r4, sp, #124	@ 0x7c
 802fa3c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802fa40:	f854 5b04 	ldr.w	r5, [r4], #4
 802fa44:	f8ad 2014 	strh.w	r2, [sp, #20]
 802fa48:	9002      	str	r0, [sp, #8]
 802fa4a:	9006      	str	r0, [sp, #24]
 802fa4c:	f7e0 fc28 	bl	80102a0 <strlen>
 802fa50:	4b0b      	ldr	r3, [pc, #44]	@ (802fa80 <siscanf+0x4c>)
 802fa52:	9003      	str	r0, [sp, #12]
 802fa54:	9007      	str	r0, [sp, #28]
 802fa56:	930a      	str	r3, [sp, #40]	@ 0x28
 802fa58:	480a      	ldr	r0, [pc, #40]	@ (802fa84 <siscanf+0x50>)
 802fa5a:	9401      	str	r4, [sp, #4]
 802fa5c:	2300      	movs	r3, #0
 802fa5e:	930e      	str	r3, [sp, #56]	@ 0x38
 802fa60:	9313      	str	r3, [sp, #76]	@ 0x4c
 802fa62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802fa66:	f8ad 3016 	strh.w	r3, [sp, #22]
 802fa6a:	462a      	mov	r2, r5
 802fa6c:	4623      	mov	r3, r4
 802fa6e:	a902      	add	r1, sp, #8
 802fa70:	6800      	ldr	r0, [r0, #0]
 802fa72:	f000 fd99 	bl	80305a8 <__ssvfiscanf_r>
 802fa76:	b01c      	add	sp, #112	@ 0x70
 802fa78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802fa7c:	b003      	add	sp, #12
 802fa7e:	4770      	bx	lr
 802fa80:	0802ca23 	.word	0x0802ca23
 802fa84:	200002d8 	.word	0x200002d8

0802fa88 <sniprintf>:
 802fa88:	b40c      	push	{r2, r3}
 802fa8a:	b530      	push	{r4, r5, lr}
 802fa8c:	4b17      	ldr	r3, [pc, #92]	@ (802faec <sniprintf+0x64>)
 802fa8e:	1e0c      	subs	r4, r1, #0
 802fa90:	681d      	ldr	r5, [r3, #0]
 802fa92:	b09d      	sub	sp, #116	@ 0x74
 802fa94:	da08      	bge.n	802faa8 <sniprintf+0x20>
 802fa96:	238b      	movs	r3, #139	@ 0x8b
 802fa98:	602b      	str	r3, [r5, #0]
 802fa9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802fa9e:	b01d      	add	sp, #116	@ 0x74
 802faa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802faa4:	b002      	add	sp, #8
 802faa6:	4770      	bx	lr
 802faa8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802faac:	f8ad 3014 	strh.w	r3, [sp, #20]
 802fab0:	bf14      	ite	ne
 802fab2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802fab6:	4623      	moveq	r3, r4
 802fab8:	9304      	str	r3, [sp, #16]
 802faba:	9307      	str	r3, [sp, #28]
 802fabc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802fac0:	9002      	str	r0, [sp, #8]
 802fac2:	9006      	str	r0, [sp, #24]
 802fac4:	f8ad 3016 	strh.w	r3, [sp, #22]
 802fac8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802faca:	ab21      	add	r3, sp, #132	@ 0x84
 802facc:	a902      	add	r1, sp, #8
 802face:	4628      	mov	r0, r5
 802fad0:	9301      	str	r3, [sp, #4]
 802fad2:	f000 f88b 	bl	802fbec <_svfiprintf_r>
 802fad6:	1c43      	adds	r3, r0, #1
 802fad8:	bfbc      	itt	lt
 802fada:	238b      	movlt	r3, #139	@ 0x8b
 802fadc:	602b      	strlt	r3, [r5, #0]
 802fade:	2c00      	cmp	r4, #0
 802fae0:	d0dd      	beq.n	802fa9e <sniprintf+0x16>
 802fae2:	9b02      	ldr	r3, [sp, #8]
 802fae4:	2200      	movs	r2, #0
 802fae6:	701a      	strb	r2, [r3, #0]
 802fae8:	e7d9      	b.n	802fa9e <sniprintf+0x16>
 802faea:	bf00      	nop
 802faec:	200002d8 	.word	0x200002d8

0802faf0 <__ssprint_r>:
 802faf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802faf4:	6893      	ldr	r3, [r2, #8]
 802faf6:	f8d2 b000 	ldr.w	fp, [r2]
 802fafa:	9001      	str	r0, [sp, #4]
 802fafc:	460c      	mov	r4, r1
 802fafe:	4617      	mov	r7, r2
 802fb00:	2b00      	cmp	r3, #0
 802fb02:	d157      	bne.n	802fbb4 <__ssprint_r+0xc4>
 802fb04:	2000      	movs	r0, #0
 802fb06:	2300      	movs	r3, #0
 802fb08:	607b      	str	r3, [r7, #4]
 802fb0a:	b003      	add	sp, #12
 802fb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fb10:	e9db a800 	ldrd	sl, r8, [fp]
 802fb14:	f10b 0b08 	add.w	fp, fp, #8
 802fb18:	68a6      	ldr	r6, [r4, #8]
 802fb1a:	6820      	ldr	r0, [r4, #0]
 802fb1c:	f1b8 0f00 	cmp.w	r8, #0
 802fb20:	d0f6      	beq.n	802fb10 <__ssprint_r+0x20>
 802fb22:	45b0      	cmp	r8, r6
 802fb24:	d32e      	bcc.n	802fb84 <__ssprint_r+0x94>
 802fb26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802fb2a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802fb2e:	d029      	beq.n	802fb84 <__ssprint_r+0x94>
 802fb30:	6921      	ldr	r1, [r4, #16]
 802fb32:	6965      	ldr	r5, [r4, #20]
 802fb34:	eba0 0901 	sub.w	r9, r0, r1
 802fb38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802fb3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802fb40:	f109 0001 	add.w	r0, r9, #1
 802fb44:	106d      	asrs	r5, r5, #1
 802fb46:	4440      	add	r0, r8
 802fb48:	4285      	cmp	r5, r0
 802fb4a:	bf38      	it	cc
 802fb4c:	4605      	movcc	r5, r0
 802fb4e:	0553      	lsls	r3, r2, #21
 802fb50:	d534      	bpl.n	802fbbc <__ssprint_r+0xcc>
 802fb52:	9801      	ldr	r0, [sp, #4]
 802fb54:	4629      	mov	r1, r5
 802fb56:	f7ff fd21 	bl	802f59c <_malloc_r>
 802fb5a:	4606      	mov	r6, r0
 802fb5c:	2800      	cmp	r0, #0
 802fb5e:	d038      	beq.n	802fbd2 <__ssprint_r+0xe2>
 802fb60:	464a      	mov	r2, r9
 802fb62:	6921      	ldr	r1, [r4, #16]
 802fb64:	f7fe fd00 	bl	802e568 <memcpy>
 802fb68:	89a2      	ldrh	r2, [r4, #12]
 802fb6a:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802fb6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802fb72:	81a2      	strh	r2, [r4, #12]
 802fb74:	6126      	str	r6, [r4, #16]
 802fb76:	6165      	str	r5, [r4, #20]
 802fb78:	444e      	add	r6, r9
 802fb7a:	eba5 0509 	sub.w	r5, r5, r9
 802fb7e:	6026      	str	r6, [r4, #0]
 802fb80:	60a5      	str	r5, [r4, #8]
 802fb82:	4646      	mov	r6, r8
 802fb84:	4546      	cmp	r6, r8
 802fb86:	bf28      	it	cs
 802fb88:	4646      	movcs	r6, r8
 802fb8a:	4632      	mov	r2, r6
 802fb8c:	4651      	mov	r1, sl
 802fb8e:	6820      	ldr	r0, [r4, #0]
 802fb90:	f7fd fa94 	bl	802d0bc <memmove>
 802fb94:	68a2      	ldr	r2, [r4, #8]
 802fb96:	1b92      	subs	r2, r2, r6
 802fb98:	60a2      	str	r2, [r4, #8]
 802fb9a:	6822      	ldr	r2, [r4, #0]
 802fb9c:	4432      	add	r2, r6
 802fb9e:	6022      	str	r2, [r4, #0]
 802fba0:	68ba      	ldr	r2, [r7, #8]
 802fba2:	eba2 0308 	sub.w	r3, r2, r8
 802fba6:	44c2      	add	sl, r8
 802fba8:	60bb      	str	r3, [r7, #8]
 802fbaa:	2b00      	cmp	r3, #0
 802fbac:	d0aa      	beq.n	802fb04 <__ssprint_r+0x14>
 802fbae:	f04f 0800 	mov.w	r8, #0
 802fbb2:	e7b1      	b.n	802fb18 <__ssprint_r+0x28>
 802fbb4:	f04f 0a00 	mov.w	sl, #0
 802fbb8:	46d0      	mov	r8, sl
 802fbba:	e7ad      	b.n	802fb18 <__ssprint_r+0x28>
 802fbbc:	9801      	ldr	r0, [sp, #4]
 802fbbe:	462a      	mov	r2, r5
 802fbc0:	f004 fcfc 	bl	80345bc <_realloc_r>
 802fbc4:	4606      	mov	r6, r0
 802fbc6:	2800      	cmp	r0, #0
 802fbc8:	d1d4      	bne.n	802fb74 <__ssprint_r+0x84>
 802fbca:	6921      	ldr	r1, [r4, #16]
 802fbcc:	9801      	ldr	r0, [sp, #4]
 802fbce:	f7ff fbcd 	bl	802f36c <_free_r>
 802fbd2:	9a01      	ldr	r2, [sp, #4]
 802fbd4:	230c      	movs	r3, #12
 802fbd6:	6013      	str	r3, [r2, #0]
 802fbd8:	89a3      	ldrh	r3, [r4, #12]
 802fbda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802fbde:	81a3      	strh	r3, [r4, #12]
 802fbe0:	2300      	movs	r3, #0
 802fbe2:	60bb      	str	r3, [r7, #8]
 802fbe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802fbe8:	e78d      	b.n	802fb06 <__ssprint_r+0x16>
	...

0802fbec <_svfiprintf_r>:
 802fbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fbf0:	461d      	mov	r5, r3
 802fbf2:	898b      	ldrh	r3, [r1, #12]
 802fbf4:	b0bb      	sub	sp, #236	@ 0xec
 802fbf6:	468b      	mov	fp, r1
 802fbf8:	0619      	lsls	r1, r3, #24
 802fbfa:	9001      	str	r0, [sp, #4]
 802fbfc:	9202      	str	r2, [sp, #8]
 802fbfe:	d514      	bpl.n	802fc2a <_svfiprintf_r+0x3e>
 802fc00:	f8db 3010 	ldr.w	r3, [fp, #16]
 802fc04:	b98b      	cbnz	r3, 802fc2a <_svfiprintf_r+0x3e>
 802fc06:	2140      	movs	r1, #64	@ 0x40
 802fc08:	f7ff fcc8 	bl	802f59c <_malloc_r>
 802fc0c:	f8cb 0000 	str.w	r0, [fp]
 802fc10:	f8cb 0010 	str.w	r0, [fp, #16]
 802fc14:	b930      	cbnz	r0, 802fc24 <_svfiprintf_r+0x38>
 802fc16:	9a01      	ldr	r2, [sp, #4]
 802fc18:	230c      	movs	r3, #12
 802fc1a:	6013      	str	r3, [r2, #0]
 802fc1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802fc20:	9304      	str	r3, [sp, #16]
 802fc22:	e3df      	b.n	80303e4 <_svfiprintf_r+0x7f8>
 802fc24:	2340      	movs	r3, #64	@ 0x40
 802fc26:	f8cb 3014 	str.w	r3, [fp, #20]
 802fc2a:	2300      	movs	r3, #0
 802fc2c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802fc30:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802fc34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802fc38:	ae11      	add	r6, sp, #68	@ 0x44
 802fc3a:	960e      	str	r6, [sp, #56]	@ 0x38
 802fc3c:	9304      	str	r3, [sp, #16]
 802fc3e:	9b02      	ldr	r3, [sp, #8]
 802fc40:	461c      	mov	r4, r3
 802fc42:	f813 2b01 	ldrb.w	r2, [r3], #1
 802fc46:	b10a      	cbz	r2, 802fc4c <_svfiprintf_r+0x60>
 802fc48:	2a25      	cmp	r2, #37	@ 0x25
 802fc4a:	d1f9      	bne.n	802fc40 <_svfiprintf_r+0x54>
 802fc4c:	9a02      	ldr	r2, [sp, #8]
 802fc4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802fc50:	1aa7      	subs	r7, r4, r2
 802fc52:	d00c      	beq.n	802fc6e <_svfiprintf_r+0x82>
 802fc54:	443b      	add	r3, r7
 802fc56:	9310      	str	r3, [sp, #64]	@ 0x40
 802fc58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802fc5a:	3301      	adds	r3, #1
 802fc5c:	2b07      	cmp	r3, #7
 802fc5e:	e9c6 2700 	strd	r2, r7, [r6]
 802fc62:	930f      	str	r3, [sp, #60]	@ 0x3c
 802fc64:	dc76      	bgt.n	802fd54 <_svfiprintf_r+0x168>
 802fc66:	3608      	adds	r6, #8
 802fc68:	9b04      	ldr	r3, [sp, #16]
 802fc6a:	443b      	add	r3, r7
 802fc6c:	9304      	str	r3, [sp, #16]
 802fc6e:	7823      	ldrb	r3, [r4, #0]
 802fc70:	2b00      	cmp	r3, #0
 802fc72:	f000 83ce 	beq.w	8030412 <_svfiprintf_r+0x826>
 802fc76:	2300      	movs	r3, #0
 802fc78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802fc7c:	3401      	adds	r4, #1
 802fc7e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802fc82:	9200      	str	r2, [sp, #0]
 802fc84:	9303      	str	r3, [sp, #12]
 802fc86:	4699      	mov	r9, r3
 802fc88:	4622      	mov	r2, r4
 802fc8a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802fc8e:	9202      	str	r2, [sp, #8]
 802fc90:	f1a3 0220 	sub.w	r2, r3, #32
 802fc94:	2a5a      	cmp	r2, #90	@ 0x5a
 802fc96:	f200 8318 	bhi.w	80302ca <_svfiprintf_r+0x6de>
 802fc9a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802fc9e:	009a      	.short	0x009a
 802fca0:	03160316 	.word	0x03160316
 802fca4:	031600a2 	.word	0x031600a2
 802fca8:	03160316 	.word	0x03160316
 802fcac:	03160082 	.word	0x03160082
 802fcb0:	00a50316 	.word	0x00a50316
 802fcb4:	031600af 	.word	0x031600af
 802fcb8:	00b100ac 	.word	0x00b100ac
 802fcbc:	00cc0316 	.word	0x00cc0316
 802fcc0:	00cf00cf 	.word	0x00cf00cf
 802fcc4:	00cf00cf 	.word	0x00cf00cf
 802fcc8:	00cf00cf 	.word	0x00cf00cf
 802fccc:	00cf00cf 	.word	0x00cf00cf
 802fcd0:	031600cf 	.word	0x031600cf
 802fcd4:	03160316 	.word	0x03160316
 802fcd8:	03160316 	.word	0x03160316
 802fcdc:	03160316 	.word	0x03160316
 802fce0:	03160316 	.word	0x03160316
 802fce4:	010600f9 	.word	0x010600f9
 802fce8:	03160316 	.word	0x03160316
 802fcec:	03160316 	.word	0x03160316
 802fcf0:	03160316 	.word	0x03160316
 802fcf4:	03160316 	.word	0x03160316
 802fcf8:	03160316 	.word	0x03160316
 802fcfc:	03160154 	.word	0x03160154
 802fd00:	03160316 	.word	0x03160316
 802fd04:	0316019b 	.word	0x0316019b
 802fd08:	0316027d 	.word	0x0316027d
 802fd0c:	029d0316 	.word	0x029d0316
 802fd10:	03160316 	.word	0x03160316
 802fd14:	03160316 	.word	0x03160316
 802fd18:	03160316 	.word	0x03160316
 802fd1c:	03160316 	.word	0x03160316
 802fd20:	03160316 	.word	0x03160316
 802fd24:	010800f9 	.word	0x010800f9
 802fd28:	03160316 	.word	0x03160316
 802fd2c:	00df0316 	.word	0x00df0316
 802fd30:	00f30108 	.word	0x00f30108
 802fd34:	00ec0316 	.word	0x00ec0316
 802fd38:	01340316 	.word	0x01340316
 802fd3c:	018a0156 	.word	0x018a0156
 802fd40:	031600f3 	.word	0x031600f3
 802fd44:	0098019b 	.word	0x0098019b
 802fd48:	0316027f 	.word	0x0316027f
 802fd4c:	00650316 	.word	0x00650316
 802fd50:	00980316 	.word	0x00980316
 802fd54:	9801      	ldr	r0, [sp, #4]
 802fd56:	aa0e      	add	r2, sp, #56	@ 0x38
 802fd58:	4659      	mov	r1, fp
 802fd5a:	f7ff fec9 	bl	802faf0 <__ssprint_r>
 802fd5e:	2800      	cmp	r0, #0
 802fd60:	f040 833b 	bne.w	80303da <_svfiprintf_r+0x7ee>
 802fd64:	ae11      	add	r6, sp, #68	@ 0x44
 802fd66:	e77f      	b.n	802fc68 <_svfiprintf_r+0x7c>
 802fd68:	4a99      	ldr	r2, [pc, #612]	@ (802ffd0 <_svfiprintf_r+0x3e4>)
 802fd6a:	9205      	str	r2, [sp, #20]
 802fd6c:	f019 0220 	ands.w	r2, r9, #32
 802fd70:	f000 8234 	beq.w	80301dc <_svfiprintf_r+0x5f0>
 802fd74:	3507      	adds	r5, #7
 802fd76:	f025 0507 	bic.w	r5, r5, #7
 802fd7a:	462f      	mov	r7, r5
 802fd7c:	686d      	ldr	r5, [r5, #4]
 802fd7e:	f857 4b08 	ldr.w	r4, [r7], #8
 802fd82:	f019 0f01 	tst.w	r9, #1
 802fd86:	d009      	beq.n	802fd9c <_svfiprintf_r+0x1b0>
 802fd88:	ea54 0205 	orrs.w	r2, r4, r5
 802fd8c:	bf1f      	itttt	ne
 802fd8e:	2230      	movne	r2, #48	@ 0x30
 802fd90:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802fd94:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802fd98:	f049 0902 	orrne.w	r9, r9, #2
 802fd9c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802fda0:	e113      	b.n	802ffca <_svfiprintf_r+0x3de>
 802fda2:	9801      	ldr	r0, [sp, #4]
 802fda4:	f7fe fb32 	bl	802e40c <_localeconv_r>
 802fda8:	6843      	ldr	r3, [r0, #4]
 802fdaa:	9308      	str	r3, [sp, #32]
 802fdac:	4618      	mov	r0, r3
 802fdae:	f7e0 fa77 	bl	80102a0 <strlen>
 802fdb2:	9007      	str	r0, [sp, #28]
 802fdb4:	9801      	ldr	r0, [sp, #4]
 802fdb6:	f7fe fb29 	bl	802e40c <_localeconv_r>
 802fdba:	6883      	ldr	r3, [r0, #8]
 802fdbc:	9306      	str	r3, [sp, #24]
 802fdbe:	9b07      	ldr	r3, [sp, #28]
 802fdc0:	b12b      	cbz	r3, 802fdce <_svfiprintf_r+0x1e2>
 802fdc2:	9b06      	ldr	r3, [sp, #24]
 802fdc4:	b11b      	cbz	r3, 802fdce <_svfiprintf_r+0x1e2>
 802fdc6:	781b      	ldrb	r3, [r3, #0]
 802fdc8:	b10b      	cbz	r3, 802fdce <_svfiprintf_r+0x1e2>
 802fdca:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802fdce:	9c02      	ldr	r4, [sp, #8]
 802fdd0:	e75a      	b.n	802fc88 <_svfiprintf_r+0x9c>
 802fdd2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802fdd6:	2b00      	cmp	r3, #0
 802fdd8:	d1f9      	bne.n	802fdce <_svfiprintf_r+0x1e2>
 802fdda:	2320      	movs	r3, #32
 802fddc:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802fde0:	e7f5      	b.n	802fdce <_svfiprintf_r+0x1e2>
 802fde2:	f049 0901 	orr.w	r9, r9, #1
 802fde6:	e7f2      	b.n	802fdce <_svfiprintf_r+0x1e2>
 802fde8:	f855 3b04 	ldr.w	r3, [r5], #4
 802fdec:	9303      	str	r3, [sp, #12]
 802fdee:	2b00      	cmp	r3, #0
 802fdf0:	daed      	bge.n	802fdce <_svfiprintf_r+0x1e2>
 802fdf2:	425b      	negs	r3, r3
 802fdf4:	9303      	str	r3, [sp, #12]
 802fdf6:	f049 0904 	orr.w	r9, r9, #4
 802fdfa:	e7e8      	b.n	802fdce <_svfiprintf_r+0x1e2>
 802fdfc:	232b      	movs	r3, #43	@ 0x2b
 802fdfe:	e7ed      	b.n	802fddc <_svfiprintf_r+0x1f0>
 802fe00:	9a02      	ldr	r2, [sp, #8]
 802fe02:	f812 3b01 	ldrb.w	r3, [r2], #1
 802fe06:	2b2a      	cmp	r3, #42	@ 0x2a
 802fe08:	d111      	bne.n	802fe2e <_svfiprintf_r+0x242>
 802fe0a:	f855 3b04 	ldr.w	r3, [r5], #4
 802fe0e:	9202      	str	r2, [sp, #8]
 802fe10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802fe14:	9300      	str	r3, [sp, #0]
 802fe16:	e7da      	b.n	802fdce <_svfiprintf_r+0x1e2>
 802fe18:	9b00      	ldr	r3, [sp, #0]
 802fe1a:	fb00 1303 	mla	r3, r0, r3, r1
 802fe1e:	9300      	str	r3, [sp, #0]
 802fe20:	f812 3b01 	ldrb.w	r3, [r2], #1
 802fe24:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802fe28:	2909      	cmp	r1, #9
 802fe2a:	d9f5      	bls.n	802fe18 <_svfiprintf_r+0x22c>
 802fe2c:	e72f      	b.n	802fc8e <_svfiprintf_r+0xa2>
 802fe2e:	2100      	movs	r1, #0
 802fe30:	9100      	str	r1, [sp, #0]
 802fe32:	200a      	movs	r0, #10
 802fe34:	e7f6      	b.n	802fe24 <_svfiprintf_r+0x238>
 802fe36:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802fe3a:	e7c8      	b.n	802fdce <_svfiprintf_r+0x1e2>
 802fe3c:	2100      	movs	r1, #0
 802fe3e:	9a02      	ldr	r2, [sp, #8]
 802fe40:	9103      	str	r1, [sp, #12]
 802fe42:	200a      	movs	r0, #10
 802fe44:	9903      	ldr	r1, [sp, #12]
 802fe46:	3b30      	subs	r3, #48	@ 0x30
 802fe48:	fb00 3301 	mla	r3, r0, r1, r3
 802fe4c:	9303      	str	r3, [sp, #12]
 802fe4e:	f812 3b01 	ldrb.w	r3, [r2], #1
 802fe52:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802fe56:	2909      	cmp	r1, #9
 802fe58:	d9f4      	bls.n	802fe44 <_svfiprintf_r+0x258>
 802fe5a:	e718      	b.n	802fc8e <_svfiprintf_r+0xa2>
 802fe5c:	9b02      	ldr	r3, [sp, #8]
 802fe5e:	781b      	ldrb	r3, [r3, #0]
 802fe60:	2b68      	cmp	r3, #104	@ 0x68
 802fe62:	bf01      	itttt	eq
 802fe64:	9b02      	ldreq	r3, [sp, #8]
 802fe66:	3301      	addeq	r3, #1
 802fe68:	9302      	streq	r3, [sp, #8]
 802fe6a:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802fe6e:	bf18      	it	ne
 802fe70:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 802fe74:	e7ab      	b.n	802fdce <_svfiprintf_r+0x1e2>
 802fe76:	9b02      	ldr	r3, [sp, #8]
 802fe78:	781b      	ldrb	r3, [r3, #0]
 802fe7a:	2b6c      	cmp	r3, #108	@ 0x6c
 802fe7c:	d105      	bne.n	802fe8a <_svfiprintf_r+0x29e>
 802fe7e:	9b02      	ldr	r3, [sp, #8]
 802fe80:	3301      	adds	r3, #1
 802fe82:	9302      	str	r3, [sp, #8]
 802fe84:	f049 0920 	orr.w	r9, r9, #32
 802fe88:	e7a1      	b.n	802fdce <_svfiprintf_r+0x1e2>
 802fe8a:	f049 0910 	orr.w	r9, r9, #16
 802fe8e:	e79e      	b.n	802fdce <_svfiprintf_r+0x1e2>
 802fe90:	462f      	mov	r7, r5
 802fe92:	2400      	movs	r4, #0
 802fe94:	f857 3b04 	ldr.w	r3, [r7], #4
 802fe98:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802fe9c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802fea0:	2301      	movs	r3, #1
 802fea2:	9300      	str	r3, [sp, #0]
 802fea4:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 802fea8:	e0aa      	b.n	8030000 <_svfiprintf_r+0x414>
 802feaa:	f049 0910 	orr.w	r9, r9, #16
 802feae:	f019 0f20 	tst.w	r9, #32
 802feb2:	d011      	beq.n	802fed8 <_svfiprintf_r+0x2ec>
 802feb4:	3507      	adds	r5, #7
 802feb6:	f025 0507 	bic.w	r5, r5, #7
 802feba:	462f      	mov	r7, r5
 802febc:	686d      	ldr	r5, [r5, #4]
 802febe:	f857 4b08 	ldr.w	r4, [r7], #8
 802fec2:	2d00      	cmp	r5, #0
 802fec4:	da06      	bge.n	802fed4 <_svfiprintf_r+0x2e8>
 802fec6:	4264      	negs	r4, r4
 802fec8:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802fecc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802fed0:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802fed4:	2301      	movs	r3, #1
 802fed6:	e048      	b.n	802ff6a <_svfiprintf_r+0x37e>
 802fed8:	462f      	mov	r7, r5
 802feda:	f019 0f10 	tst.w	r9, #16
 802fede:	f857 5b04 	ldr.w	r5, [r7], #4
 802fee2:	d002      	beq.n	802feea <_svfiprintf_r+0x2fe>
 802fee4:	462c      	mov	r4, r5
 802fee6:	17ed      	asrs	r5, r5, #31
 802fee8:	e7eb      	b.n	802fec2 <_svfiprintf_r+0x2d6>
 802feea:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802feee:	d003      	beq.n	802fef8 <_svfiprintf_r+0x30c>
 802fef0:	b22c      	sxth	r4, r5
 802fef2:	f345 35c0 	sbfx	r5, r5, #15, #1
 802fef6:	e7e4      	b.n	802fec2 <_svfiprintf_r+0x2d6>
 802fef8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802fefc:	d0f2      	beq.n	802fee4 <_svfiprintf_r+0x2f8>
 802fefe:	b26c      	sxtb	r4, r5
 802ff00:	f345 15c0 	sbfx	r5, r5, #7, #1
 802ff04:	e7dd      	b.n	802fec2 <_svfiprintf_r+0x2d6>
 802ff06:	f019 0f20 	tst.w	r9, #32
 802ff0a:	d007      	beq.n	802ff1c <_svfiprintf_r+0x330>
 802ff0c:	9a04      	ldr	r2, [sp, #16]
 802ff0e:	682b      	ldr	r3, [r5, #0]
 802ff10:	9904      	ldr	r1, [sp, #16]
 802ff12:	17d2      	asrs	r2, r2, #31
 802ff14:	e9c3 1200 	strd	r1, r2, [r3]
 802ff18:	3504      	adds	r5, #4
 802ff1a:	e690      	b.n	802fc3e <_svfiprintf_r+0x52>
 802ff1c:	f019 0f10 	tst.w	r9, #16
 802ff20:	d003      	beq.n	802ff2a <_svfiprintf_r+0x33e>
 802ff22:	682b      	ldr	r3, [r5, #0]
 802ff24:	9a04      	ldr	r2, [sp, #16]
 802ff26:	601a      	str	r2, [r3, #0]
 802ff28:	e7f6      	b.n	802ff18 <_svfiprintf_r+0x32c>
 802ff2a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802ff2e:	d003      	beq.n	802ff38 <_svfiprintf_r+0x34c>
 802ff30:	682b      	ldr	r3, [r5, #0]
 802ff32:	9a04      	ldr	r2, [sp, #16]
 802ff34:	801a      	strh	r2, [r3, #0]
 802ff36:	e7ef      	b.n	802ff18 <_svfiprintf_r+0x32c>
 802ff38:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802ff3c:	d0f1      	beq.n	802ff22 <_svfiprintf_r+0x336>
 802ff3e:	682b      	ldr	r3, [r5, #0]
 802ff40:	9a04      	ldr	r2, [sp, #16]
 802ff42:	701a      	strb	r2, [r3, #0]
 802ff44:	e7e8      	b.n	802ff18 <_svfiprintf_r+0x32c>
 802ff46:	f049 0910 	orr.w	r9, r9, #16
 802ff4a:	f019 0320 	ands.w	r3, r9, #32
 802ff4e:	d01e      	beq.n	802ff8e <_svfiprintf_r+0x3a2>
 802ff50:	3507      	adds	r5, #7
 802ff52:	f025 0507 	bic.w	r5, r5, #7
 802ff56:	462f      	mov	r7, r5
 802ff58:	686d      	ldr	r5, [r5, #4]
 802ff5a:	f857 4b08 	ldr.w	r4, [r7], #8
 802ff5e:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802ff62:	2300      	movs	r3, #0
 802ff64:	2200      	movs	r2, #0
 802ff66:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802ff6a:	9a00      	ldr	r2, [sp, #0]
 802ff6c:	3201      	adds	r2, #1
 802ff6e:	f000 8259 	beq.w	8030424 <_svfiprintf_r+0x838>
 802ff72:	ea54 0205 	orrs.w	r2, r4, r5
 802ff76:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 802ff7a:	f040 8258 	bne.w	803042e <_svfiprintf_r+0x842>
 802ff7e:	9a00      	ldr	r2, [sp, #0]
 802ff80:	2a00      	cmp	r2, #0
 802ff82:	f000 8199 	beq.w	80302b8 <_svfiprintf_r+0x6cc>
 802ff86:	2b01      	cmp	r3, #1
 802ff88:	f040 8254 	bne.w	8030434 <_svfiprintf_r+0x848>
 802ff8c:	e13d      	b.n	803020a <_svfiprintf_r+0x61e>
 802ff8e:	462f      	mov	r7, r5
 802ff90:	f019 0510 	ands.w	r5, r9, #16
 802ff94:	f857 4b04 	ldr.w	r4, [r7], #4
 802ff98:	d001      	beq.n	802ff9e <_svfiprintf_r+0x3b2>
 802ff9a:	461d      	mov	r5, r3
 802ff9c:	e7df      	b.n	802ff5e <_svfiprintf_r+0x372>
 802ff9e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802ffa2:	d001      	beq.n	802ffa8 <_svfiprintf_r+0x3bc>
 802ffa4:	b2a4      	uxth	r4, r4
 802ffa6:	e7da      	b.n	802ff5e <_svfiprintf_r+0x372>
 802ffa8:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802ffac:	d0d7      	beq.n	802ff5e <_svfiprintf_r+0x372>
 802ffae:	b2e4      	uxtb	r4, r4
 802ffb0:	e7f3      	b.n	802ff9a <_svfiprintf_r+0x3ae>
 802ffb2:	462f      	mov	r7, r5
 802ffb4:	f647 0330 	movw	r3, #30768	@ 0x7830
 802ffb8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802ffbc:	f857 4b04 	ldr.w	r4, [r7], #4
 802ffc0:	4b03      	ldr	r3, [pc, #12]	@ (802ffd0 <_svfiprintf_r+0x3e4>)
 802ffc2:	9305      	str	r3, [sp, #20]
 802ffc4:	2500      	movs	r5, #0
 802ffc6:	f049 0902 	orr.w	r9, r9, #2
 802ffca:	2302      	movs	r3, #2
 802ffcc:	e7ca      	b.n	802ff64 <_svfiprintf_r+0x378>
 802ffce:	bf00      	nop
 802ffd0:	0803c52f 	.word	0x0803c52f
 802ffd4:	9b00      	ldr	r3, [sp, #0]
 802ffd6:	462f      	mov	r7, r5
 802ffd8:	1c5a      	adds	r2, r3, #1
 802ffda:	f04f 0500 	mov.w	r5, #0
 802ffde:	f857 8b04 	ldr.w	r8, [r7], #4
 802ffe2:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802ffe6:	f000 80d2 	beq.w	803018e <_svfiprintf_r+0x5a2>
 802ffea:	461a      	mov	r2, r3
 802ffec:	4629      	mov	r1, r5
 802ffee:	4640      	mov	r0, r8
 802fff0:	f7e0 f906 	bl	8010200 <memchr>
 802fff4:	4604      	mov	r4, r0
 802fff6:	b118      	cbz	r0, 8030000 <_svfiprintf_r+0x414>
 802fff8:	eba0 0308 	sub.w	r3, r0, r8
 802fffc:	9300      	str	r3, [sp, #0]
 802fffe:	462c      	mov	r4, r5
 8030000:	9d00      	ldr	r5, [sp, #0]
 8030002:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8030006:	42a5      	cmp	r5, r4
 8030008:	bfb8      	it	lt
 803000a:	4625      	movlt	r5, r4
 803000c:	b103      	cbz	r3, 8030010 <_svfiprintf_r+0x424>
 803000e:	3501      	adds	r5, #1
 8030010:	f019 0302 	ands.w	r3, r9, #2
 8030014:	9309      	str	r3, [sp, #36]	@ 0x24
 8030016:	bf18      	it	ne
 8030018:	3502      	addne	r5, #2
 803001a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 803001e:	930a      	str	r3, [sp, #40]	@ 0x28
 8030020:	d123      	bne.n	803006a <_svfiprintf_r+0x47e>
 8030022:	9b03      	ldr	r3, [sp, #12]
 8030024:	eba3 0a05 	sub.w	sl, r3, r5
 8030028:	f1ba 0f00 	cmp.w	sl, #0
 803002c:	dd1d      	ble.n	803006a <_svfiprintf_r+0x47e>
 803002e:	4bac      	ldr	r3, [pc, #688]	@ (80302e0 <_svfiprintf_r+0x6f4>)
 8030030:	6033      	str	r3, [r6, #0]
 8030032:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8030036:	f1ba 0f10 	cmp.w	sl, #16
 803003a:	f102 0201 	add.w	r2, r2, #1
 803003e:	f106 0008 	add.w	r0, r6, #8
 8030042:	f300 8153 	bgt.w	80302ec <_svfiprintf_r+0x700>
 8030046:	eb0c 010a 	add.w	r1, ip, sl
 803004a:	2a07      	cmp	r2, #7
 803004c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8030050:	f8c6 a004 	str.w	sl, [r6, #4]
 8030054:	f340 815e 	ble.w	8030314 <_svfiprintf_r+0x728>
 8030058:	9801      	ldr	r0, [sp, #4]
 803005a:	aa0e      	add	r2, sp, #56	@ 0x38
 803005c:	4659      	mov	r1, fp
 803005e:	f7ff fd47 	bl	802faf0 <__ssprint_r>
 8030062:	2800      	cmp	r0, #0
 8030064:	f040 81b9 	bne.w	80303da <_svfiprintf_r+0x7ee>
 8030068:	ae11      	add	r6, sp, #68	@ 0x44
 803006a:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 803006e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8030072:	b161      	cbz	r1, 803008e <_svfiprintf_r+0x4a2>
 8030074:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8030078:	3301      	adds	r3, #1
 803007a:	6031      	str	r1, [r6, #0]
 803007c:	2101      	movs	r1, #1
 803007e:	440a      	add	r2, r1
 8030080:	2b07      	cmp	r3, #7
 8030082:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8030086:	6071      	str	r1, [r6, #4]
 8030088:	f300 8146 	bgt.w	8030318 <_svfiprintf_r+0x72c>
 803008c:	3608      	adds	r6, #8
 803008e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8030090:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8030094:	b159      	cbz	r1, 80300ae <_svfiprintf_r+0x4c2>
 8030096:	a90d      	add	r1, sp, #52	@ 0x34
 8030098:	3301      	adds	r3, #1
 803009a:	6031      	str	r1, [r6, #0]
 803009c:	2102      	movs	r1, #2
 803009e:	440a      	add	r2, r1
 80300a0:	2b07      	cmp	r3, #7
 80300a2:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80300a6:	6071      	str	r1, [r6, #4]
 80300a8:	f300 813f 	bgt.w	803032a <_svfiprintf_r+0x73e>
 80300ac:	3608      	adds	r6, #8
 80300ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80300b0:	2b80      	cmp	r3, #128	@ 0x80
 80300b2:	d123      	bne.n	80300fc <_svfiprintf_r+0x510>
 80300b4:	9b03      	ldr	r3, [sp, #12]
 80300b6:	eba3 0a05 	sub.w	sl, r3, r5
 80300ba:	f1ba 0f00 	cmp.w	sl, #0
 80300be:	dd1d      	ble.n	80300fc <_svfiprintf_r+0x510>
 80300c0:	4b88      	ldr	r3, [pc, #544]	@ (80302e4 <_svfiprintf_r+0x6f8>)
 80300c2:	6033      	str	r3, [r6, #0]
 80300c4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80300c8:	f1ba 0f10 	cmp.w	sl, #16
 80300cc:	f102 0201 	add.w	r2, r2, #1
 80300d0:	f106 0008 	add.w	r0, r6, #8
 80300d4:	f300 8132 	bgt.w	803033c <_svfiprintf_r+0x750>
 80300d8:	eb0c 010a 	add.w	r1, ip, sl
 80300dc:	2a07      	cmp	r2, #7
 80300de:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80300e2:	f8c6 a004 	str.w	sl, [r6, #4]
 80300e6:	f340 813d 	ble.w	8030364 <_svfiprintf_r+0x778>
 80300ea:	9801      	ldr	r0, [sp, #4]
 80300ec:	aa0e      	add	r2, sp, #56	@ 0x38
 80300ee:	4659      	mov	r1, fp
 80300f0:	f7ff fcfe 	bl	802faf0 <__ssprint_r>
 80300f4:	2800      	cmp	r0, #0
 80300f6:	f040 8170 	bne.w	80303da <_svfiprintf_r+0x7ee>
 80300fa:	ae11      	add	r6, sp, #68	@ 0x44
 80300fc:	9b00      	ldr	r3, [sp, #0]
 80300fe:	1ae4      	subs	r4, r4, r3
 8030100:	2c00      	cmp	r4, #0
 8030102:	dd1a      	ble.n	803013a <_svfiprintf_r+0x54e>
 8030104:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8030108:	4876      	ldr	r0, [pc, #472]	@ (80302e4 <_svfiprintf_r+0x6f8>)
 803010a:	6030      	str	r0, [r6, #0]
 803010c:	2c10      	cmp	r4, #16
 803010e:	f103 0301 	add.w	r3, r3, #1
 8030112:	f106 0108 	add.w	r1, r6, #8
 8030116:	f300 8127 	bgt.w	8030368 <_svfiprintf_r+0x77c>
 803011a:	6074      	str	r4, [r6, #4]
 803011c:	2b07      	cmp	r3, #7
 803011e:	4414      	add	r4, r2
 8030120:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8030124:	f340 8131 	ble.w	803038a <_svfiprintf_r+0x79e>
 8030128:	9801      	ldr	r0, [sp, #4]
 803012a:	aa0e      	add	r2, sp, #56	@ 0x38
 803012c:	4659      	mov	r1, fp
 803012e:	f7ff fcdf 	bl	802faf0 <__ssprint_r>
 8030132:	2800      	cmp	r0, #0
 8030134:	f040 8151 	bne.w	80303da <_svfiprintf_r+0x7ee>
 8030138:	ae11      	add	r6, sp, #68	@ 0x44
 803013a:	9b00      	ldr	r3, [sp, #0]
 803013c:	9a00      	ldr	r2, [sp, #0]
 803013e:	6073      	str	r3, [r6, #4]
 8030140:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030142:	f8c6 8000 	str.w	r8, [r6]
 8030146:	4413      	add	r3, r2
 8030148:	9310      	str	r3, [sp, #64]	@ 0x40
 803014a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803014c:	3301      	adds	r3, #1
 803014e:	2b07      	cmp	r3, #7
 8030150:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030152:	f300 811c 	bgt.w	803038e <_svfiprintf_r+0x7a2>
 8030156:	f106 0308 	add.w	r3, r6, #8
 803015a:	f019 0f04 	tst.w	r9, #4
 803015e:	f040 811e 	bne.w	803039e <_svfiprintf_r+0x7b2>
 8030162:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8030166:	42aa      	cmp	r2, r5
 8030168:	bfac      	ite	ge
 803016a:	189b      	addge	r3, r3, r2
 803016c:	195b      	addlt	r3, r3, r5
 803016e:	9304      	str	r3, [sp, #16]
 8030170:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030172:	b13b      	cbz	r3, 8030184 <_svfiprintf_r+0x598>
 8030174:	9801      	ldr	r0, [sp, #4]
 8030176:	aa0e      	add	r2, sp, #56	@ 0x38
 8030178:	4659      	mov	r1, fp
 803017a:	f7ff fcb9 	bl	802faf0 <__ssprint_r>
 803017e:	2800      	cmp	r0, #0
 8030180:	f040 812b 	bne.w	80303da <_svfiprintf_r+0x7ee>
 8030184:	2300      	movs	r3, #0
 8030186:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030188:	463d      	mov	r5, r7
 803018a:	ae11      	add	r6, sp, #68	@ 0x44
 803018c:	e557      	b.n	802fc3e <_svfiprintf_r+0x52>
 803018e:	4640      	mov	r0, r8
 8030190:	f7e0 f886 	bl	80102a0 <strlen>
 8030194:	9000      	str	r0, [sp, #0]
 8030196:	e732      	b.n	802fffe <_svfiprintf_r+0x412>
 8030198:	f049 0910 	orr.w	r9, r9, #16
 803019c:	f019 0320 	ands.w	r3, r9, #32
 80301a0:	d008      	beq.n	80301b4 <_svfiprintf_r+0x5c8>
 80301a2:	3507      	adds	r5, #7
 80301a4:	f025 0507 	bic.w	r5, r5, #7
 80301a8:	462f      	mov	r7, r5
 80301aa:	686d      	ldr	r5, [r5, #4]
 80301ac:	f857 4b08 	ldr.w	r4, [r7], #8
 80301b0:	2301      	movs	r3, #1
 80301b2:	e6d7      	b.n	802ff64 <_svfiprintf_r+0x378>
 80301b4:	462f      	mov	r7, r5
 80301b6:	f019 0510 	ands.w	r5, r9, #16
 80301ba:	f857 4b04 	ldr.w	r4, [r7], #4
 80301be:	d001      	beq.n	80301c4 <_svfiprintf_r+0x5d8>
 80301c0:	461d      	mov	r5, r3
 80301c2:	e7f5      	b.n	80301b0 <_svfiprintf_r+0x5c4>
 80301c4:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 80301c8:	d001      	beq.n	80301ce <_svfiprintf_r+0x5e2>
 80301ca:	b2a4      	uxth	r4, r4
 80301cc:	e7f0      	b.n	80301b0 <_svfiprintf_r+0x5c4>
 80301ce:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 80301d2:	d0ed      	beq.n	80301b0 <_svfiprintf_r+0x5c4>
 80301d4:	b2e4      	uxtb	r4, r4
 80301d6:	e7f3      	b.n	80301c0 <_svfiprintf_r+0x5d4>
 80301d8:	4a43      	ldr	r2, [pc, #268]	@ (80302e8 <_svfiprintf_r+0x6fc>)
 80301da:	e5c6      	b.n	802fd6a <_svfiprintf_r+0x17e>
 80301dc:	462f      	mov	r7, r5
 80301de:	f019 0510 	ands.w	r5, r9, #16
 80301e2:	f857 4b04 	ldr.w	r4, [r7], #4
 80301e6:	d001      	beq.n	80301ec <_svfiprintf_r+0x600>
 80301e8:	4615      	mov	r5, r2
 80301ea:	e5ca      	b.n	802fd82 <_svfiprintf_r+0x196>
 80301ec:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 80301f0:	d001      	beq.n	80301f6 <_svfiprintf_r+0x60a>
 80301f2:	b2a4      	uxth	r4, r4
 80301f4:	e5c5      	b.n	802fd82 <_svfiprintf_r+0x196>
 80301f6:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 80301fa:	f43f adc2 	beq.w	802fd82 <_svfiprintf_r+0x196>
 80301fe:	b2e4      	uxtb	r4, r4
 8030200:	e7f2      	b.n	80301e8 <_svfiprintf_r+0x5fc>
 8030202:	2c0a      	cmp	r4, #10
 8030204:	f175 0300 	sbcs.w	r3, r5, #0
 8030208:	d206      	bcs.n	8030218 <_svfiprintf_r+0x62c>
 803020a:	3430      	adds	r4, #48	@ 0x30
 803020c:	b2e4      	uxtb	r4, r4
 803020e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8030212:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 8030216:	e129      	b.n	803046c <_svfiprintf_r+0x880>
 8030218:	ab3a      	add	r3, sp, #232	@ 0xe8
 803021a:	9309      	str	r3, [sp, #36]	@ 0x24
 803021c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 8030220:	f04f 0900 	mov.w	r9, #0
 8030224:	930a      	str	r3, [sp, #40]	@ 0x28
 8030226:	220a      	movs	r2, #10
 8030228:	2300      	movs	r3, #0
 803022a:	4620      	mov	r0, r4
 803022c:	4629      	mov	r1, r5
 803022e:	f7e0 fd93 	bl	8010d58 <__aeabi_uldivmod>
 8030232:	460b      	mov	r3, r1
 8030234:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8030236:	900b      	str	r0, [sp, #44]	@ 0x2c
 8030238:	3230      	adds	r2, #48	@ 0x30
 803023a:	f801 2c01 	strb.w	r2, [r1, #-1]
 803023e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8030240:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8030244:	f109 0901 	add.w	r9, r9, #1
 8030248:	b1e2      	cbz	r2, 8030284 <_svfiprintf_r+0x698>
 803024a:	9a06      	ldr	r2, [sp, #24]
 803024c:	7812      	ldrb	r2, [r2, #0]
 803024e:	454a      	cmp	r2, r9
 8030250:	d118      	bne.n	8030284 <_svfiprintf_r+0x698>
 8030252:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8030256:	d015      	beq.n	8030284 <_svfiprintf_r+0x698>
 8030258:	2c0a      	cmp	r4, #10
 803025a:	f175 0200 	sbcs.w	r2, r5, #0
 803025e:	d311      	bcc.n	8030284 <_svfiprintf_r+0x698>
 8030260:	9309      	str	r3, [sp, #36]	@ 0x24
 8030262:	9b07      	ldr	r3, [sp, #28]
 8030264:	9908      	ldr	r1, [sp, #32]
 8030266:	eba8 0803 	sub.w	r8, r8, r3
 803026a:	461a      	mov	r2, r3
 803026c:	4640      	mov	r0, r8
 803026e:	f7fc ff86 	bl	802d17e <strncpy>
 8030272:	9b06      	ldr	r3, [sp, #24]
 8030274:	785a      	ldrb	r2, [r3, #1]
 8030276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030278:	b172      	cbz	r2, 8030298 <_svfiprintf_r+0x6ac>
 803027a:	9a06      	ldr	r2, [sp, #24]
 803027c:	3201      	adds	r2, #1
 803027e:	9206      	str	r2, [sp, #24]
 8030280:	f04f 0900 	mov.w	r9, #0
 8030284:	2c0a      	cmp	r4, #10
 8030286:	f175 0500 	sbcs.w	r5, r5, #0
 803028a:	f0c0 80ef 	bcc.w	803046c <_svfiprintf_r+0x880>
 803028e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8030290:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8030294:	461d      	mov	r5, r3
 8030296:	e7c6      	b.n	8030226 <_svfiprintf_r+0x63a>
 8030298:	4691      	mov	r9, r2
 803029a:	e7f3      	b.n	8030284 <_svfiprintf_r+0x698>
 803029c:	f004 030f 	and.w	r3, r4, #15
 80302a0:	9a05      	ldr	r2, [sp, #20]
 80302a2:	0924      	lsrs	r4, r4, #4
 80302a4:	5cd3      	ldrb	r3, [r2, r3]
 80302a6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80302aa:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 80302ae:	092d      	lsrs	r5, r5, #4
 80302b0:	ea54 0305 	orrs.w	r3, r4, r5
 80302b4:	d1f2      	bne.n	803029c <_svfiprintf_r+0x6b0>
 80302b6:	e0d9      	b.n	803046c <_svfiprintf_r+0x880>
 80302b8:	b923      	cbnz	r3, 80302c4 <_svfiprintf_r+0x6d8>
 80302ba:	f019 0f01 	tst.w	r9, #1
 80302be:	d001      	beq.n	80302c4 <_svfiprintf_r+0x6d8>
 80302c0:	2430      	movs	r4, #48	@ 0x30
 80302c2:	e7a4      	b.n	803020e <_svfiprintf_r+0x622>
 80302c4:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 80302c8:	e0d0      	b.n	803046c <_svfiprintf_r+0x880>
 80302ca:	2b00      	cmp	r3, #0
 80302cc:	f000 80a1 	beq.w	8030412 <_svfiprintf_r+0x826>
 80302d0:	2400      	movs	r4, #0
 80302d2:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80302d6:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80302da:	462f      	mov	r7, r5
 80302dc:	e5e0      	b.n	802fea0 <_svfiprintf_r+0x2b4>
 80302de:	bf00      	nop
 80302e0:	0803ca63 	.word	0x0803ca63
 80302e4:	0803ca53 	.word	0x0803ca53
 80302e8:	0803c540 	.word	0x0803c540
 80302ec:	2110      	movs	r1, #16
 80302ee:	6071      	str	r1, [r6, #4]
 80302f0:	2a07      	cmp	r2, #7
 80302f2:	4461      	add	r1, ip
 80302f4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80302f8:	dd08      	ble.n	803030c <_svfiprintf_r+0x720>
 80302fa:	9801      	ldr	r0, [sp, #4]
 80302fc:	aa0e      	add	r2, sp, #56	@ 0x38
 80302fe:	4659      	mov	r1, fp
 8030300:	f7ff fbf6 	bl	802faf0 <__ssprint_r>
 8030304:	2800      	cmp	r0, #0
 8030306:	d168      	bne.n	80303da <_svfiprintf_r+0x7ee>
 8030308:	4b5c      	ldr	r3, [pc, #368]	@ (803047c <_svfiprintf_r+0x890>)
 803030a:	a811      	add	r0, sp, #68	@ 0x44
 803030c:	f1aa 0a10 	sub.w	sl, sl, #16
 8030310:	4606      	mov	r6, r0
 8030312:	e68d      	b.n	8030030 <_svfiprintf_r+0x444>
 8030314:	4606      	mov	r6, r0
 8030316:	e6a8      	b.n	803006a <_svfiprintf_r+0x47e>
 8030318:	9801      	ldr	r0, [sp, #4]
 803031a:	aa0e      	add	r2, sp, #56	@ 0x38
 803031c:	4659      	mov	r1, fp
 803031e:	f7ff fbe7 	bl	802faf0 <__ssprint_r>
 8030322:	2800      	cmp	r0, #0
 8030324:	d159      	bne.n	80303da <_svfiprintf_r+0x7ee>
 8030326:	ae11      	add	r6, sp, #68	@ 0x44
 8030328:	e6b1      	b.n	803008e <_svfiprintf_r+0x4a2>
 803032a:	9801      	ldr	r0, [sp, #4]
 803032c:	aa0e      	add	r2, sp, #56	@ 0x38
 803032e:	4659      	mov	r1, fp
 8030330:	f7ff fbde 	bl	802faf0 <__ssprint_r>
 8030334:	2800      	cmp	r0, #0
 8030336:	d150      	bne.n	80303da <_svfiprintf_r+0x7ee>
 8030338:	ae11      	add	r6, sp, #68	@ 0x44
 803033a:	e6b8      	b.n	80300ae <_svfiprintf_r+0x4c2>
 803033c:	2110      	movs	r1, #16
 803033e:	6071      	str	r1, [r6, #4]
 8030340:	2a07      	cmp	r2, #7
 8030342:	4461      	add	r1, ip
 8030344:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8030348:	dd08      	ble.n	803035c <_svfiprintf_r+0x770>
 803034a:	9801      	ldr	r0, [sp, #4]
 803034c:	aa0e      	add	r2, sp, #56	@ 0x38
 803034e:	4659      	mov	r1, fp
 8030350:	f7ff fbce 	bl	802faf0 <__ssprint_r>
 8030354:	2800      	cmp	r0, #0
 8030356:	d140      	bne.n	80303da <_svfiprintf_r+0x7ee>
 8030358:	4b49      	ldr	r3, [pc, #292]	@ (8030480 <_svfiprintf_r+0x894>)
 803035a:	a811      	add	r0, sp, #68	@ 0x44
 803035c:	f1aa 0a10 	sub.w	sl, sl, #16
 8030360:	4606      	mov	r6, r0
 8030362:	e6ae      	b.n	80300c2 <_svfiprintf_r+0x4d6>
 8030364:	4606      	mov	r6, r0
 8030366:	e6c9      	b.n	80300fc <_svfiprintf_r+0x510>
 8030368:	2010      	movs	r0, #16
 803036a:	4402      	add	r2, r0
 803036c:	2b07      	cmp	r3, #7
 803036e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8030372:	6070      	str	r0, [r6, #4]
 8030374:	dd06      	ble.n	8030384 <_svfiprintf_r+0x798>
 8030376:	9801      	ldr	r0, [sp, #4]
 8030378:	aa0e      	add	r2, sp, #56	@ 0x38
 803037a:	4659      	mov	r1, fp
 803037c:	f7ff fbb8 	bl	802faf0 <__ssprint_r>
 8030380:	bb58      	cbnz	r0, 80303da <_svfiprintf_r+0x7ee>
 8030382:	a911      	add	r1, sp, #68	@ 0x44
 8030384:	3c10      	subs	r4, #16
 8030386:	460e      	mov	r6, r1
 8030388:	e6bc      	b.n	8030104 <_svfiprintf_r+0x518>
 803038a:	460e      	mov	r6, r1
 803038c:	e6d5      	b.n	803013a <_svfiprintf_r+0x54e>
 803038e:	9801      	ldr	r0, [sp, #4]
 8030390:	aa0e      	add	r2, sp, #56	@ 0x38
 8030392:	4659      	mov	r1, fp
 8030394:	f7ff fbac 	bl	802faf0 <__ssprint_r>
 8030398:	b9f8      	cbnz	r0, 80303da <_svfiprintf_r+0x7ee>
 803039a:	ab11      	add	r3, sp, #68	@ 0x44
 803039c:	e6dd      	b.n	803015a <_svfiprintf_r+0x56e>
 803039e:	9a03      	ldr	r2, [sp, #12]
 80303a0:	1b54      	subs	r4, r2, r5
 80303a2:	2c00      	cmp	r4, #0
 80303a4:	f77f aedd 	ble.w	8030162 <_svfiprintf_r+0x576>
 80303a8:	4e34      	ldr	r6, [pc, #208]	@ (803047c <_svfiprintf_r+0x890>)
 80303aa:	f04f 0810 	mov.w	r8, #16
 80303ae:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 80303b2:	2c10      	cmp	r4, #16
 80303b4:	f102 0201 	add.w	r2, r2, #1
 80303b8:	601e      	str	r6, [r3, #0]
 80303ba:	dc17      	bgt.n	80303ec <_svfiprintf_r+0x800>
 80303bc:	605c      	str	r4, [r3, #4]
 80303be:	2a07      	cmp	r2, #7
 80303c0:	440c      	add	r4, r1
 80303c2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 80303c6:	f77f aecc 	ble.w	8030162 <_svfiprintf_r+0x576>
 80303ca:	9801      	ldr	r0, [sp, #4]
 80303cc:	aa0e      	add	r2, sp, #56	@ 0x38
 80303ce:	4659      	mov	r1, fp
 80303d0:	f7ff fb8e 	bl	802faf0 <__ssprint_r>
 80303d4:	2800      	cmp	r0, #0
 80303d6:	f43f aec4 	beq.w	8030162 <_svfiprintf_r+0x576>
 80303da:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80303de:	065b      	lsls	r3, r3, #25
 80303e0:	f53f ac1c 	bmi.w	802fc1c <_svfiprintf_r+0x30>
 80303e4:	9804      	ldr	r0, [sp, #16]
 80303e6:	b03b      	add	sp, #236	@ 0xec
 80303e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80303ec:	3110      	adds	r1, #16
 80303ee:	2a07      	cmp	r2, #7
 80303f0:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80303f4:	f8c3 8004 	str.w	r8, [r3, #4]
 80303f8:	dc02      	bgt.n	8030400 <_svfiprintf_r+0x814>
 80303fa:	3308      	adds	r3, #8
 80303fc:	3c10      	subs	r4, #16
 80303fe:	e7d6      	b.n	80303ae <_svfiprintf_r+0x7c2>
 8030400:	9801      	ldr	r0, [sp, #4]
 8030402:	aa0e      	add	r2, sp, #56	@ 0x38
 8030404:	4659      	mov	r1, fp
 8030406:	f7ff fb73 	bl	802faf0 <__ssprint_r>
 803040a:	2800      	cmp	r0, #0
 803040c:	d1e5      	bne.n	80303da <_svfiprintf_r+0x7ee>
 803040e:	ab11      	add	r3, sp, #68	@ 0x44
 8030410:	e7f4      	b.n	80303fc <_svfiprintf_r+0x810>
 8030412:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030414:	2b00      	cmp	r3, #0
 8030416:	d0e0      	beq.n	80303da <_svfiprintf_r+0x7ee>
 8030418:	9801      	ldr	r0, [sp, #4]
 803041a:	aa0e      	add	r2, sp, #56	@ 0x38
 803041c:	4659      	mov	r1, fp
 803041e:	f7ff fb67 	bl	802faf0 <__ssprint_r>
 8030422:	e7da      	b.n	80303da <_svfiprintf_r+0x7ee>
 8030424:	ea54 0205 	orrs.w	r2, r4, r5
 8030428:	46ca      	mov	sl, r9
 803042a:	f43f adac 	beq.w	802ff86 <_svfiprintf_r+0x39a>
 803042e:	2b01      	cmp	r3, #1
 8030430:	f43f aee7 	beq.w	8030202 <_svfiprintf_r+0x616>
 8030434:	2b02      	cmp	r3, #2
 8030436:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 803043a:	f43f af2f 	beq.w	803029c <_svfiprintf_r+0x6b0>
 803043e:	f004 0307 	and.w	r3, r4, #7
 8030442:	08e4      	lsrs	r4, r4, #3
 8030444:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8030448:	08ed      	lsrs	r5, r5, #3
 803044a:	3330      	adds	r3, #48	@ 0x30
 803044c:	ea54 0105 	orrs.w	r1, r4, r5
 8030450:	4642      	mov	r2, r8
 8030452:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8030456:	d1f2      	bne.n	803043e <_svfiprintf_r+0x852>
 8030458:	f01a 0f01 	tst.w	sl, #1
 803045c:	d006      	beq.n	803046c <_svfiprintf_r+0x880>
 803045e:	2b30      	cmp	r3, #48	@ 0x30
 8030460:	d004      	beq.n	803046c <_svfiprintf_r+0x880>
 8030462:	2330      	movs	r3, #48	@ 0x30
 8030464:	f808 3c01 	strb.w	r3, [r8, #-1]
 8030468:	f1a2 0802 	sub.w	r8, r2, #2
 803046c:	ab3a      	add	r3, sp, #232	@ 0xe8
 803046e:	eba3 0308 	sub.w	r3, r3, r8
 8030472:	9c00      	ldr	r4, [sp, #0]
 8030474:	9300      	str	r3, [sp, #0]
 8030476:	46d1      	mov	r9, sl
 8030478:	e5c2      	b.n	8030000 <_svfiprintf_r+0x414>
 803047a:	bf00      	nop
 803047c:	0803ca63 	.word	0x0803ca63
 8030480:	0803ca53 	.word	0x0803ca53

08030484 <_sungetc_r>:
 8030484:	b538      	push	{r3, r4, r5, lr}
 8030486:	1c4b      	adds	r3, r1, #1
 8030488:	4614      	mov	r4, r2
 803048a:	d103      	bne.n	8030494 <_sungetc_r+0x10>
 803048c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8030490:	4628      	mov	r0, r5
 8030492:	bd38      	pop	{r3, r4, r5, pc}
 8030494:	8993      	ldrh	r3, [r2, #12]
 8030496:	f023 0320 	bic.w	r3, r3, #32
 803049a:	8193      	strh	r3, [r2, #12]
 803049c:	6853      	ldr	r3, [r2, #4]
 803049e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80304a0:	b2cd      	uxtb	r5, r1
 80304a2:	b18a      	cbz	r2, 80304c8 <_sungetc_r+0x44>
 80304a4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80304a6:	429a      	cmp	r2, r3
 80304a8:	dd08      	ble.n	80304bc <_sungetc_r+0x38>
 80304aa:	6823      	ldr	r3, [r4, #0]
 80304ac:	1e5a      	subs	r2, r3, #1
 80304ae:	6022      	str	r2, [r4, #0]
 80304b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80304b4:	6863      	ldr	r3, [r4, #4]
 80304b6:	3301      	adds	r3, #1
 80304b8:	6063      	str	r3, [r4, #4]
 80304ba:	e7e9      	b.n	8030490 <_sungetc_r+0xc>
 80304bc:	4621      	mov	r1, r4
 80304be:	f005 f8a7 	bl	8035610 <__submore>
 80304c2:	2800      	cmp	r0, #0
 80304c4:	d0f1      	beq.n	80304aa <_sungetc_r+0x26>
 80304c6:	e7e1      	b.n	803048c <_sungetc_r+0x8>
 80304c8:	6921      	ldr	r1, [r4, #16]
 80304ca:	6822      	ldr	r2, [r4, #0]
 80304cc:	b141      	cbz	r1, 80304e0 <_sungetc_r+0x5c>
 80304ce:	4291      	cmp	r1, r2
 80304d0:	d206      	bcs.n	80304e0 <_sungetc_r+0x5c>
 80304d2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80304d6:	42a9      	cmp	r1, r5
 80304d8:	d102      	bne.n	80304e0 <_sungetc_r+0x5c>
 80304da:	3a01      	subs	r2, #1
 80304dc:	6022      	str	r2, [r4, #0]
 80304de:	e7ea      	b.n	80304b6 <_sungetc_r+0x32>
 80304e0:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 80304e4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80304e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80304ea:	2303      	movs	r3, #3
 80304ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80304ee:	4623      	mov	r3, r4
 80304f0:	f803 5f42 	strb.w	r5, [r3, #66]!
 80304f4:	6023      	str	r3, [r4, #0]
 80304f6:	2301      	movs	r3, #1
 80304f8:	e7de      	b.n	80304b8 <_sungetc_r+0x34>

080304fa <__ssrefill_r>:
 80304fa:	b510      	push	{r4, lr}
 80304fc:	460c      	mov	r4, r1
 80304fe:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8030500:	b169      	cbz	r1, 803051e <__ssrefill_r+0x24>
 8030502:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8030506:	4299      	cmp	r1, r3
 8030508:	d001      	beq.n	803050e <__ssrefill_r+0x14>
 803050a:	f7fe ff2f 	bl	802f36c <_free_r>
 803050e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8030510:	6063      	str	r3, [r4, #4]
 8030512:	2000      	movs	r0, #0
 8030514:	6320      	str	r0, [r4, #48]	@ 0x30
 8030516:	b113      	cbz	r3, 803051e <__ssrefill_r+0x24>
 8030518:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 803051a:	6023      	str	r3, [r4, #0]
 803051c:	bd10      	pop	{r4, pc}
 803051e:	6923      	ldr	r3, [r4, #16]
 8030520:	6023      	str	r3, [r4, #0]
 8030522:	2300      	movs	r3, #0
 8030524:	6063      	str	r3, [r4, #4]
 8030526:	89a3      	ldrh	r3, [r4, #12]
 8030528:	f043 0320 	orr.w	r3, r3, #32
 803052c:	81a3      	strh	r3, [r4, #12]
 803052e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8030532:	e7f3      	b.n	803051c <__ssrefill_r+0x22>

08030534 <_sfread_r>:
 8030534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030538:	461f      	mov	r7, r3
 803053a:	4613      	mov	r3, r2
 803053c:	437b      	muls	r3, r7
 803053e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8030540:	9000      	str	r0, [sp, #0]
 8030542:	4688      	mov	r8, r1
 8030544:	4691      	mov	r9, r2
 8030546:	d028      	beq.n	803059a <_sfread_r+0x66>
 8030548:	461e      	mov	r6, r3
 803054a:	f04f 0b00 	mov.w	fp, #0
 803054e:	e9d4 1500 	ldrd	r1, r5, [r4]
 8030552:	42b5      	cmp	r5, r6
 8030554:	d30b      	bcc.n	803056e <_sfread_r+0x3a>
 8030556:	4632      	mov	r2, r6
 8030558:	4640      	mov	r0, r8
 803055a:	f7fe f805 	bl	802e568 <memcpy>
 803055e:	6862      	ldr	r2, [r4, #4]
 8030560:	6821      	ldr	r1, [r4, #0]
 8030562:	1b92      	subs	r2, r2, r6
 8030564:	4431      	add	r1, r6
 8030566:	6062      	str	r2, [r4, #4]
 8030568:	6021      	str	r1, [r4, #0]
 803056a:	463b      	mov	r3, r7
 803056c:	e015      	b.n	803059a <_sfread_r+0x66>
 803056e:	462a      	mov	r2, r5
 8030570:	4640      	mov	r0, r8
 8030572:	9301      	str	r3, [sp, #4]
 8030574:	f7fd fff8 	bl	802e568 <memcpy>
 8030578:	6822      	ldr	r2, [r4, #0]
 803057a:	9800      	ldr	r0, [sp, #0]
 803057c:	442a      	add	r2, r5
 803057e:	e9c4 2b00 	strd	r2, fp, [r4]
 8030582:	4621      	mov	r1, r4
 8030584:	f7ff ffb9 	bl	80304fa <__ssrefill_r>
 8030588:	44a8      	add	r8, r5
 803058a:	9b01      	ldr	r3, [sp, #4]
 803058c:	eba6 0a05 	sub.w	sl, r6, r5
 8030590:	b138      	cbz	r0, 80305a2 <_sfread_r+0x6e>
 8030592:	441d      	add	r5, r3
 8030594:	1bad      	subs	r5, r5, r6
 8030596:	fbb5 f3f9 	udiv	r3, r5, r9
 803059a:	4618      	mov	r0, r3
 803059c:	b003      	add	sp, #12
 803059e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80305a2:	4656      	mov	r6, sl
 80305a4:	e7d3      	b.n	803054e <_sfread_r+0x1a>
	...

080305a8 <__ssvfiscanf_r>:
 80305a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80305ac:	b0df      	sub	sp, #380	@ 0x17c
 80305ae:	af02      	add	r7, sp, #8
 80305b0:	460c      	mov	r4, r1
 80305b2:	623b      	str	r3, [r7, #32]
 80305b4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80305b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80305ba:	049d      	lsls	r5, r3, #18
 80305bc:	60ba      	str	r2, [r7, #8]
 80305be:	d406      	bmi.n	80305ce <__ssvfiscanf_r+0x26>
 80305c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80305c4:	818b      	strh	r3, [r1, #12]
 80305c6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80305c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80305cc:	664b      	str	r3, [r1, #100]	@ 0x64
 80305ce:	2300      	movs	r3, #0
 80305d0:	e9c7 3305 	strd	r3, r3, [r7, #20]
 80305d4:	60fb      	str	r3, [r7, #12]
 80305d6:	469b      	mov	fp, r3
 80305d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80305da:	61fb      	str	r3, [r7, #28]
 80305dc:	e005      	b.n	80305ea <__ssvfiscanf_r+0x42>
 80305de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80305e0:	4621      	mov	r1, r4
 80305e2:	f7ff ff8a 	bl	80304fa <__ssrefill_r>
 80305e6:	b168      	cbz	r0, 8030604 <__ssvfiscanf_r+0x5c>
 80305e8:	60bd      	str	r5, [r7, #8]
 80305ea:	68bd      	ldr	r5, [r7, #8]
 80305ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80305f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80305f2:	b333      	cbz	r3, 8030642 <__ssvfiscanf_r+0x9a>
 80305f4:	4a75      	ldr	r2, [pc, #468]	@ (80307cc <__ssvfiscanf_r+0x224>)
 80305f6:	5cd6      	ldrb	r6, [r2, r3]
 80305f8:	f016 0608 	ands.w	r6, r6, #8
 80305fc:	d011      	beq.n	8030622 <__ssvfiscanf_r+0x7a>
 80305fe:	6863      	ldr	r3, [r4, #4]
 8030600:	2b00      	cmp	r3, #0
 8030602:	ddec      	ble.n	80305de <__ssvfiscanf_r+0x36>
 8030604:	6823      	ldr	r3, [r4, #0]
 8030606:	4971      	ldr	r1, [pc, #452]	@ (80307cc <__ssvfiscanf_r+0x224>)
 8030608:	781a      	ldrb	r2, [r3, #0]
 803060a:	5c8a      	ldrb	r2, [r1, r2]
 803060c:	0710      	lsls	r0, r2, #28
 803060e:	d5eb      	bpl.n	80305e8 <__ssvfiscanf_r+0x40>
 8030610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030612:	3201      	adds	r2, #1
 8030614:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030616:	6862      	ldr	r2, [r4, #4]
 8030618:	3301      	adds	r3, #1
 803061a:	3a01      	subs	r2, #1
 803061c:	6062      	str	r2, [r4, #4]
 803061e:	6023      	str	r3, [r4, #0]
 8030620:	e7ed      	b.n	80305fe <__ssvfiscanf_r+0x56>
 8030622:	2b25      	cmp	r3, #37	@ 0x25
 8030624:	d15f      	bne.n	80306e6 <__ssvfiscanf_r+0x13e>
 8030626:	62be      	str	r6, [r7, #40]	@ 0x28
 8030628:	462a      	mov	r2, r5
 803062a:	f812 3b01 	ldrb.w	r3, [r2], #1
 803062e:	60ba      	str	r2, [r7, #8]
 8030630:	2b7a      	cmp	r3, #122	@ 0x7a
 8030632:	d806      	bhi.n	8030642 <__ssvfiscanf_r+0x9a>
 8030634:	2b42      	cmp	r3, #66	@ 0x42
 8030636:	d809      	bhi.n	803064c <__ssvfiscanf_r+0xa4>
 8030638:	2b2a      	cmp	r3, #42	@ 0x2a
 803063a:	d079      	beq.n	8030730 <__ssvfiscanf_r+0x188>
 803063c:	d844      	bhi.n	80306c8 <__ssvfiscanf_r+0x120>
 803063e:	2b25      	cmp	r3, #37	@ 0x25
 8030640:	d050      	beq.n	80306e4 <__ssvfiscanf_r+0x13c>
 8030642:	f1bb 0f00 	cmp.w	fp, #0
 8030646:	f000 810e 	beq.w	8030866 <__ssvfiscanf_r+0x2be>
 803064a:	e107      	b.n	803085c <__ssvfiscanf_r+0x2b4>
 803064c:	3b43      	subs	r3, #67	@ 0x43
 803064e:	2b37      	cmp	r3, #55	@ 0x37
 8030650:	f200 80fd 	bhi.w	803084e <__ssvfiscanf_r+0x2a6>
 8030654:	e8df f013 	tbh	[pc, r3, lsl #1]
 8030658:	00a40117 	.word	0x00a40117
 803065c:	00fb00fb 	.word	0x00fb00fb
 8030660:	00fb00fb 	.word	0x00fb00fb
 8030664:	00fb00fb 	.word	0x00fb00fb
 8030668:	008e00fb 	.word	0x008e00fb
 803066c:	00fb00fb 	.word	0x00fb00fb
 8030670:	00fb00a8 	.word	0x00fb00a8
 8030674:	00fb00fb 	.word	0x00fb00fb
 8030678:	00fb00c0 	.word	0x00fb00c0
 803067c:	00fb00fb 	.word	0x00fb00fb
 8030680:	00b400fb 	.word	0x00b400fb
 8030684:	00fb00fb 	.word	0x00fb00fb
 8030688:	00fb010d 	.word	0x00fb010d
 803068c:	00fb00fb 	.word	0x00fb00fb
 8030690:	00fb00fb 	.word	0x00fb00fb
 8030694:	00fb00fb 	.word	0x00fb00fb
 8030698:	00a60119 	.word	0x00a60119
 803069c:	00fb00fb 	.word	0x00fb00fb
 80306a0:	008100fb 	.word	0x008100fb
 80306a4:	008e013e 	.word	0x008e013e
 80306a8:	007300fb 	.word	0x007300fb
 80306ac:	01200095 	.word	0x01200095
 80306b0:	011d00aa 	.word	0x011d00aa
 80306b4:	00fb00fb 	.word	0x00fb00fb
 80306b8:	009200c2 	.word	0x009200c2
 80306bc:	00fb00b0 	.word	0x00fb00b0
 80306c0:	00b400fb 	.word	0x00b400fb
 80306c4:	009200fb 	.word	0x009200fb
 80306c8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80306cc:	2a09      	cmp	r2, #9
 80306ce:	d8b8      	bhi.n	8030642 <__ssvfiscanf_r+0x9a>
 80306d0:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 80306d4:	d1b5      	bne.n	8030642 <__ssvfiscanf_r+0x9a>
 80306d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80306d8:	220a      	movs	r2, #10
 80306da:	fb02 3301 	mla	r3, r2, r1, r3
 80306de:	3b30      	subs	r3, #48	@ 0x30
 80306e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80306e2:	e02a      	b.n	803073a <__ssvfiscanf_r+0x192>
 80306e4:	68bd      	ldr	r5, [r7, #8]
 80306e6:	6863      	ldr	r3, [r4, #4]
 80306e8:	2b00      	cmp	r3, #0
 80306ea:	dd0e      	ble.n	803070a <__ssvfiscanf_r+0x162>
 80306ec:	6823      	ldr	r3, [r4, #0]
 80306ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80306f2:	7819      	ldrb	r1, [r3, #0]
 80306f4:	4291      	cmp	r1, r2
 80306f6:	d1a4      	bne.n	8030642 <__ssvfiscanf_r+0x9a>
 80306f8:	3301      	adds	r3, #1
 80306fa:	6862      	ldr	r2, [r4, #4]
 80306fc:	6023      	str	r3, [r4, #0]
 80306fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030700:	3a01      	subs	r2, #1
 8030702:	3301      	adds	r3, #1
 8030704:	6062      	str	r2, [r4, #4]
 8030706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030708:	e76e      	b.n	80305e8 <__ssvfiscanf_r+0x40>
 803070a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803070c:	4621      	mov	r1, r4
 803070e:	f7ff fef4 	bl	80304fa <__ssrefill_r>
 8030712:	2800      	cmp	r0, #0
 8030714:	d0ea      	beq.n	80306ec <__ssvfiscanf_r+0x144>
 8030716:	69fb      	ldr	r3, [r7, #28]
 8030718:	b113      	cbz	r3, 8030720 <__ssvfiscanf_r+0x178>
 803071a:	89a3      	ldrh	r3, [r4, #12]
 803071c:	065b      	lsls	r3, r3, #25
 803071e:	d590      	bpl.n	8030642 <__ssvfiscanf_r+0x9a>
 8030720:	f1bb 0f00 	cmp.w	fp, #0
 8030724:	f040 8654 	bne.w	80313d0 <__ssvfiscanf_r+0xe28>
 8030728:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803072c:	61fb      	str	r3, [r7, #28]
 803072e:	e09a      	b.n	8030866 <__ssvfiscanf_r+0x2be>
 8030730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030732:	4333      	orrs	r3, r6
 8030734:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030736:	d184      	bne.n	8030642 <__ssvfiscanf_r+0x9a>
 8030738:	2610      	movs	r6, #16
 803073a:	68bd      	ldr	r5, [r7, #8]
 803073c:	e774      	b.n	8030628 <__ssvfiscanf_r+0x80>
 803073e:	0731      	lsls	r1, r6, #28
 8030740:	f47f af7f 	bne.w	8030642 <__ssvfiscanf_r+0x9a>
 8030744:	786b      	ldrb	r3, [r5, #1]
 8030746:	2b6c      	cmp	r3, #108	@ 0x6c
 8030748:	d104      	bne.n	8030754 <__ssvfiscanf_r+0x1ac>
 803074a:	1cab      	adds	r3, r5, #2
 803074c:	60bb      	str	r3, [r7, #8]
 803074e:	f046 0602 	orr.w	r6, r6, #2
 8030752:	e7f2      	b.n	803073a <__ssvfiscanf_r+0x192>
 8030754:	f046 0601 	orr.w	r6, r6, #1
 8030758:	e7ef      	b.n	803073a <__ssvfiscanf_r+0x192>
 803075a:	0732      	lsls	r2, r6, #28
 803075c:	f47f af71 	bne.w	8030642 <__ssvfiscanf_r+0x9a>
 8030760:	786b      	ldrb	r3, [r5, #1]
 8030762:	2b68      	cmp	r3, #104	@ 0x68
 8030764:	bf03      	ittte	eq
 8030766:	1cab      	addeq	r3, r5, #2
 8030768:	60bb      	streq	r3, [r7, #8]
 803076a:	f046 0608 	orreq.w	r6, r6, #8
 803076e:	f046 0604 	orrne.w	r6, r6, #4
 8030772:	e7e2      	b.n	803073a <__ssvfiscanf_r+0x192>
 8030774:	0733      	lsls	r3, r6, #28
 8030776:	f47f af64 	bne.w	8030642 <__ssvfiscanf_r+0x9a>
 803077a:	e7e8      	b.n	803074e <__ssvfiscanf_r+0x1a6>
 803077c:	0735      	lsls	r5, r6, #28
 803077e:	d0dc      	beq.n	803073a <__ssvfiscanf_r+0x192>
 8030780:	e75f      	b.n	8030642 <__ssvfiscanf_r+0x9a>
 8030782:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8030786:	f47f af5c 	bne.w	8030642 <__ssvfiscanf_r+0x9a>
 803078a:	f1bb 0f00 	cmp.w	fp, #0
 803078e:	d104      	bne.n	803079a <__ssvfiscanf_r+0x1f2>
 8030790:	b082      	sub	sp, #8
 8030792:	f10d 0b08 	add.w	fp, sp, #8
 8030796:	e9cb 3300 	strd	r3, r3, [fp]
 803079a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 803079e:	e7cc      	b.n	803073a <__ssvfiscanf_r+0x192>
 80307a0:	f046 0601 	orr.w	r6, r6, #1
 80307a4:	4b0a      	ldr	r3, [pc, #40]	@ (80307d0 <__ssvfiscanf_r+0x228>)
 80307a6:	e008      	b.n	80307ba <__ssvfiscanf_r+0x212>
 80307a8:	f046 0601 	orr.w	r6, r6, #1
 80307ac:	4b09      	ldr	r3, [pc, #36]	@ (80307d4 <__ssvfiscanf_r+0x22c>)
 80307ae:	60fb      	str	r3, [r7, #12]
 80307b0:	2308      	movs	r3, #8
 80307b2:	617b      	str	r3, [r7, #20]
 80307b4:	2503      	movs	r5, #3
 80307b6:	e012      	b.n	80307de <__ssvfiscanf_r+0x236>
 80307b8:	4b06      	ldr	r3, [pc, #24]	@ (80307d4 <__ssvfiscanf_r+0x22c>)
 80307ba:	60fb      	str	r3, [r7, #12]
 80307bc:	230a      	movs	r3, #10
 80307be:	e7f8      	b.n	80307b2 <__ssvfiscanf_r+0x20a>
 80307c0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 80307c4:	4b03      	ldr	r3, [pc, #12]	@ (80307d4 <__ssvfiscanf_r+0x22c>)
 80307c6:	60fb      	str	r3, [r7, #12]
 80307c8:	2310      	movs	r3, #16
 80307ca:	e7f2      	b.n	80307b2 <__ssvfiscanf_r+0x20a>
 80307cc:	0803c8dd 	.word	0x0803c8dd
 80307d0:	0802c7f9 	.word	0x0802c7f9
 80307d4:	080355f9 	.word	0x080355f9
 80307d8:	f046 0601 	orr.w	r6, r6, #1
 80307dc:	2502      	movs	r5, #2
 80307de:	6863      	ldr	r3, [r4, #4]
 80307e0:	2b00      	cmp	r3, #0
 80307e2:	dd7b      	ble.n	80308dc <__ssvfiscanf_r+0x334>
 80307e4:	0671      	lsls	r1, r6, #25
 80307e6:	d407      	bmi.n	80307f8 <__ssvfiscanf_r+0x250>
 80307e8:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 8030b74 <__ssvfiscanf_r+0x5cc>
 80307ec:	6823      	ldr	r3, [r4, #0]
 80307ee:	781a      	ldrb	r2, [r3, #0]
 80307f0:	f818 2002 	ldrb.w	r2, [r8, r2]
 80307f4:	0712      	lsls	r2, r2, #28
 80307f6:	d479      	bmi.n	80308ec <__ssvfiscanf_r+0x344>
 80307f8:	2d02      	cmp	r5, #2
 80307fa:	f000 836f 	beq.w	8030edc <__ssvfiscanf_r+0x934>
 80307fe:	2d03      	cmp	r5, #3
 8030800:	f000 84f6 	beq.w	80311f0 <__ssvfiscanf_r+0xc48>
 8030804:	f006 0310 	and.w	r3, r6, #16
 8030808:	2d01      	cmp	r5, #1
 803080a:	613b      	str	r3, [r7, #16]
 803080c:	f006 0501 	and.w	r5, r6, #1
 8030810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030812:	f000 81b1 	beq.w	8030b78 <__ssvfiscanf_r+0x5d0>
 8030816:	2b01      	cmp	r3, #1
 8030818:	bf38      	it	cc
 803081a:	2301      	movcc	r3, #1
 803081c:	4698      	mov	r8, r3
 803081e:	693b      	ldr	r3, [r7, #16]
 8030820:	2d00      	cmp	r5, #0
 8030822:	f000 813b 	beq.w	8030a9c <__ssvfiscanf_r+0x4f4>
 8030826:	2b00      	cmp	r3, #0
 8030828:	f040 80d8 	bne.w	80309dc <__ssvfiscanf_r+0x434>
 803082c:	6a3b      	ldr	r3, [r7, #32]
 803082e:	0636      	lsls	r6, r6, #24
 8030830:	f853 5b04 	ldr.w	r5, [r3], #4
 8030834:	623b      	str	r3, [r7, #32]
 8030836:	f140 80d7 	bpl.w	80309e8 <__ssvfiscanf_r+0x440>
 803083a:	b145      	cbz	r5, 803084e <__ssvfiscanf_r+0x2a6>
 803083c:	2080      	movs	r0, #128	@ 0x80
 803083e:	f7fe fe9d 	bl	802f57c <malloc>
 8030842:	4606      	mov	r6, r0
 8030844:	2800      	cmp	r0, #0
 8030846:	d164      	bne.n	8030912 <__ssvfiscanf_r+0x36a>
 8030848:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803084c:	61fb      	str	r3, [r7, #28]
 803084e:	f1bb 0f00 	cmp.w	fp, #0
 8030852:	d008      	beq.n	8030866 <__ssvfiscanf_r+0x2be>
 8030854:	69fb      	ldr	r3, [r7, #28]
 8030856:	3301      	adds	r3, #1
 8030858:	f000 85ba 	beq.w	80313d0 <__ssvfiscanf_r+0xe28>
 803085c:	f8db 0000 	ldr.w	r0, [fp]
 8030860:	b108      	cbz	r0, 8030866 <__ssvfiscanf_r+0x2be>
 8030862:	f7fe fe93 	bl	802f58c <free>
 8030866:	69f8      	ldr	r0, [r7, #28]
 8030868:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 803086c:	46bd      	mov	sp, r7
 803086e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030872:	68b9      	ldr	r1, [r7, #8]
 8030874:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8030878:	f003 fe67 	bl	803454a <__sccl>
 803087c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8030880:	60b8      	str	r0, [r7, #8]
 8030882:	2501      	movs	r5, #1
 8030884:	e7ab      	b.n	80307de <__ssvfiscanf_r+0x236>
 8030886:	f046 0601 	orr.w	r6, r6, #1
 803088a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 803088e:	2500      	movs	r5, #0
 8030890:	e7a5      	b.n	80307de <__ssvfiscanf_r+0x236>
 8030892:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8030896:	e795      	b.n	80307c4 <__ssvfiscanf_r+0x21c>
 8030898:	06f0      	lsls	r0, r6, #27
 803089a:	f53f aea6 	bmi.w	80305ea <__ssvfiscanf_r+0x42>
 803089e:	6a3a      	ldr	r2, [r7, #32]
 80308a0:	0731      	lsls	r1, r6, #28
 80308a2:	f852 3b04 	ldr.w	r3, [r2], #4
 80308a6:	623a      	str	r2, [r7, #32]
 80308a8:	d502      	bpl.n	80308b0 <__ssvfiscanf_r+0x308>
 80308aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80308ac:	701a      	strb	r2, [r3, #0]
 80308ae:	e69c      	b.n	80305ea <__ssvfiscanf_r+0x42>
 80308b0:	0772      	lsls	r2, r6, #29
 80308b2:	d502      	bpl.n	80308ba <__ssvfiscanf_r+0x312>
 80308b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80308b6:	801a      	strh	r2, [r3, #0]
 80308b8:	e697      	b.n	80305ea <__ssvfiscanf_r+0x42>
 80308ba:	07f5      	lsls	r5, r6, #31
 80308bc:	d502      	bpl.n	80308c4 <__ssvfiscanf_r+0x31c>
 80308be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80308c0:	601a      	str	r2, [r3, #0]
 80308c2:	e692      	b.n	80305ea <__ssvfiscanf_r+0x42>
 80308c4:	07b0      	lsls	r0, r6, #30
 80308c6:	d5fa      	bpl.n	80308be <__ssvfiscanf_r+0x316>
 80308c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80308ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80308cc:	17d2      	asrs	r2, r2, #31
 80308ce:	e9c3 1200 	strd	r1, r2, [r3]
 80308d2:	e68a      	b.n	80305ea <__ssvfiscanf_r+0x42>
 80308d4:	4ba6      	ldr	r3, [pc, #664]	@ (8030b70 <__ssvfiscanf_r+0x5c8>)
 80308d6:	60fb      	str	r3, [r7, #12]
 80308d8:	2300      	movs	r3, #0
 80308da:	e76a      	b.n	80307b2 <__ssvfiscanf_r+0x20a>
 80308dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80308de:	4621      	mov	r1, r4
 80308e0:	f7ff fe0b 	bl	80304fa <__ssrefill_r>
 80308e4:	2800      	cmp	r0, #0
 80308e6:	f43f af7d 	beq.w	80307e4 <__ssvfiscanf_r+0x23c>
 80308ea:	e714      	b.n	8030716 <__ssvfiscanf_r+0x16e>
 80308ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80308ee:	3201      	adds	r2, #1
 80308f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80308f2:	6862      	ldr	r2, [r4, #4]
 80308f4:	3a01      	subs	r2, #1
 80308f6:	2a00      	cmp	r2, #0
 80308f8:	6062      	str	r2, [r4, #4]
 80308fa:	dd02      	ble.n	8030902 <__ssvfiscanf_r+0x35a>
 80308fc:	3301      	adds	r3, #1
 80308fe:	6023      	str	r3, [r4, #0]
 8030900:	e774      	b.n	80307ec <__ssvfiscanf_r+0x244>
 8030902:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030904:	4621      	mov	r1, r4
 8030906:	f7ff fdf8 	bl	80304fa <__ssrefill_r>
 803090a:	2800      	cmp	r0, #0
 803090c:	f43f af6e 	beq.w	80307ec <__ssvfiscanf_r+0x244>
 8030910:	e701      	b.n	8030716 <__ssvfiscanf_r+0x16e>
 8030912:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030916:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 803091a:	6028      	str	r0, [r5, #0]
 803091c:	4599      	cmp	r9, r3
 803091e:	d314      	bcc.n	803094a <__ssvfiscanf_r+0x3a2>
 8030920:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030924:	4293      	cmp	r3, r2
 8030926:	f200 8553 	bhi.w	80313d0 <__ssvfiscanf_r+0xe28>
 803092a:	3308      	adds	r3, #8
 803092c:	fa1f fa83 	uxth.w	sl, r3
 8030930:	f8db 0000 	ldr.w	r0, [fp]
 8030934:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8030938:	f003 fdaa 	bl	8034490 <realloc>
 803093c:	2800      	cmp	r0, #0
 803093e:	f000 8547 	beq.w	80313d0 <__ssvfiscanf_r+0xe28>
 8030942:	f8cb 0000 	str.w	r0, [fp]
 8030946:	f8ab a004 	strh.w	sl, [fp, #4]
 803094a:	f8db 3000 	ldr.w	r3, [fp]
 803094e:	f109 0201 	add.w	r2, r9, #1
 8030952:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030956:	46aa      	mov	sl, r5
 8030958:	f8ab 2006 	strh.w	r2, [fp, #6]
 803095c:	4635      	mov	r5, r6
 803095e:	f04f 0920 	mov.w	r9, #32
 8030962:	2200      	movs	r2, #0
 8030964:	62ba      	str	r2, [r7, #40]	@ 0x28
 8030966:	f7fd fd4b 	bl	802e400 <__locale_mb_cur_max>
 803096a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803096c:	4290      	cmp	r0, r2
 803096e:	f43f aed2 	beq.w	8030716 <__ssvfiscanf_r+0x16e>
 8030972:	6821      	ldr	r1, [r4, #0]
 8030974:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 8030978:	f811 0b01 	ldrb.w	r0, [r1], #1
 803097c:	f80c 0002 	strb.w	r0, [ip, r2]
 8030980:	1c53      	adds	r3, r2, #1
 8030982:	6862      	ldr	r2, [r4, #4]
 8030984:	3a01      	subs	r2, #1
 8030986:	e9c4 1200 	strd	r1, r2, [r4]
 803098a:	69ba      	ldr	r2, [r7, #24]
 803098c:	2a03      	cmp	r2, #3
 803098e:	d102      	bne.n	8030996 <__ssvfiscanf_r+0x3ee>
 8030990:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8030992:	2a04      	cmp	r2, #4
 8030994:	d007      	beq.n	80309a6 <__ssvfiscanf_r+0x3fe>
 8030996:	2208      	movs	r2, #8
 8030998:	2100      	movs	r1, #0
 803099a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803099e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80309a0:	f7fc fba6 	bl	802d0f0 <memset>
 80309a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80309a6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80309aa:	9200      	str	r2, [sp, #0]
 80309ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80309ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80309b0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80309b4:	4629      	mov	r1, r5
 80309b6:	f005 f925 	bl	8035c04 <_mbrtowc_r>
 80309ba:	4603      	mov	r3, r0
 80309bc:	61b8      	str	r0, [r7, #24]
 80309be:	1c58      	adds	r0, r3, #1
 80309c0:	f43f aea9 	beq.w	8030716 <__ssvfiscanf_r+0x16e>
 80309c4:	461a      	mov	r2, r3
 80309c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80309c8:	b9b2      	cbnz	r2, 80309f8 <__ssvfiscanf_r+0x450>
 80309ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80309cc:	441a      	add	r2, r3
 80309ce:	4613      	mov	r3, r2
 80309d0:	693a      	ldr	r2, [r7, #16]
 80309d2:	b172      	cbz	r2, 80309f2 <__ssvfiscanf_r+0x44a>
 80309d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80309d6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80309da:	e019      	b.n	8030a10 <__ssvfiscanf_r+0x468>
 80309dc:	f04f 0900 	mov.w	r9, #0
 80309e0:	464e      	mov	r6, r9
 80309e2:	46ca      	mov	sl, r9
 80309e4:	464d      	mov	r5, r9
 80309e6:	e7bc      	b.n	8030962 <__ssvfiscanf_r+0x3ba>
 80309e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80309ec:	464e      	mov	r6, r9
 80309ee:	46ca      	mov	sl, r9
 80309f0:	e7b7      	b.n	8030962 <__ssvfiscanf_r+0x3ba>
 80309f2:	693a      	ldr	r2, [r7, #16]
 80309f4:	602a      	str	r2, [r5, #0]
 80309f6:	e7ed      	b.n	80309d4 <__ssvfiscanf_r+0x42c>
 80309f8:	69ba      	ldr	r2, [r7, #24]
 80309fa:	3202      	adds	r2, #2
 80309fc:	d024      	beq.n	8030a48 <__ssvfiscanf_r+0x4a0>
 80309fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030a00:	441a      	add	r2, r3
 8030a02:	69bb      	ldr	r3, [r7, #24]
 8030a04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030a06:	2b03      	cmp	r3, #3
 8030a08:	d1e5      	bne.n	80309d6 <__ssvfiscanf_r+0x42e>
 8030a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8030a0c:	2b04      	cmp	r3, #4
 8030a0e:	d1e2      	bne.n	80309d6 <__ssvfiscanf_r+0x42e>
 8030a10:	693b      	ldr	r3, [r7, #16]
 8030a12:	b9bb      	cbnz	r3, 8030a44 <__ssvfiscanf_r+0x49c>
 8030a14:	f1ba 0f00 	cmp.w	sl, #0
 8030a18:	d013      	beq.n	8030a42 <__ssvfiscanf_r+0x49a>
 8030a1a:	1bab      	subs	r3, r5, r6
 8030a1c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8030a20:	d80f      	bhi.n	8030a42 <__ssvfiscanf_r+0x49a>
 8030a22:	4630      	mov	r0, r6
 8030a24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030a2a:	f003 fd31 	bl	8034490 <realloc>
 8030a2e:	4606      	mov	r6, r0
 8030a30:	2800      	cmp	r0, #0
 8030a32:	f43f af09 	beq.w	8030848 <__ssvfiscanf_r+0x2a0>
 8030a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030a38:	f8ca 0000 	str.w	r0, [sl]
 8030a3c:	18c5      	adds	r5, r0, r3
 8030a3e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030a42:	3504      	adds	r5, #4
 8030a44:	2200      	movs	r2, #0
 8030a46:	e000      	b.n	8030a4a <__ssvfiscanf_r+0x4a2>
 8030a48:	461a      	mov	r2, r3
 8030a4a:	6863      	ldr	r3, [r4, #4]
 8030a4c:	2b00      	cmp	r3, #0
 8030a4e:	dc13      	bgt.n	8030a78 <__ssvfiscanf_r+0x4d0>
 8030a50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030a52:	62ba      	str	r2, [r7, #40]	@ 0x28
 8030a54:	4621      	mov	r1, r4
 8030a56:	f7ff fd50 	bl	80304fa <__ssrefill_r>
 8030a5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030a5c:	b160      	cbz	r0, 8030a78 <__ssvfiscanf_r+0x4d0>
 8030a5e:	2a00      	cmp	r2, #0
 8030a60:	f47f ae59 	bne.w	8030716 <__ssvfiscanf_r+0x16e>
 8030a64:	f1ba 0f00 	cmp.w	sl, #0
 8030a68:	d10b      	bne.n	8030a82 <__ssvfiscanf_r+0x4da>
 8030a6a:	693b      	ldr	r3, [r7, #16]
 8030a6c:	2b00      	cmp	r3, #0
 8030a6e:	f47f adbc 	bne.w	80305ea <__ssvfiscanf_r+0x42>
 8030a72:	69fb      	ldr	r3, [r7, #28]
 8030a74:	3301      	adds	r3, #1
 8030a76:	e5b0      	b.n	80305da <__ssvfiscanf_r+0x32>
 8030a78:	f1b8 0f00 	cmp.w	r8, #0
 8030a7c:	f47f af72 	bne.w	8030964 <__ssvfiscanf_r+0x3bc>
 8030a80:	e7f0      	b.n	8030a64 <__ssvfiscanf_r+0x4bc>
 8030a82:	1ba9      	subs	r1, r5, r6
 8030a84:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8030a88:	d9ef      	bls.n	8030a6a <__ssvfiscanf_r+0x4c2>
 8030a8a:	f8da 0000 	ldr.w	r0, [sl]
 8030a8e:	f003 fcff 	bl	8034490 <realloc>
 8030a92:	2800      	cmp	r0, #0
 8030a94:	d0e9      	beq.n	8030a6a <__ssvfiscanf_r+0x4c2>
 8030a96:	f8ca 0000 	str.w	r0, [sl]
 8030a9a:	e7e6      	b.n	8030a6a <__ssvfiscanf_r+0x4c2>
 8030a9c:	b1db      	cbz	r3, 8030ad6 <__ssvfiscanf_r+0x52e>
 8030a9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8030aa2:	4598      	cmp	r8, r3
 8030aa4:	dd10      	ble.n	8030ac8 <__ssvfiscanf_r+0x520>
 8030aa6:	441a      	add	r2, r3
 8030aa8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030aaa:	6022      	str	r2, [r4, #0]
 8030aac:	4621      	mov	r1, r4
 8030aae:	441d      	add	r5, r3
 8030ab0:	eba8 0803 	sub.w	r8, r8, r3
 8030ab4:	f7ff fd21 	bl	80304fa <__ssrefill_r>
 8030ab8:	2800      	cmp	r0, #0
 8030aba:	d0f0      	beq.n	8030a9e <__ssvfiscanf_r+0x4f6>
 8030abc:	2d00      	cmp	r5, #0
 8030abe:	f43f ae2a 	beq.w	8030716 <__ssvfiscanf_r+0x16e>
 8030ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030ac4:	442b      	add	r3, r5
 8030ac6:	e201      	b.n	8030ecc <__ssvfiscanf_r+0x924>
 8030ac8:	eba3 0308 	sub.w	r3, r3, r8
 8030acc:	4442      	add	r2, r8
 8030ace:	4445      	add	r5, r8
 8030ad0:	6063      	str	r3, [r4, #4]
 8030ad2:	6022      	str	r2, [r4, #0]
 8030ad4:	e7f5      	b.n	8030ac2 <__ssvfiscanf_r+0x51a>
 8030ad6:	6a3b      	ldr	r3, [r7, #32]
 8030ad8:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8030adc:	f853 5b04 	ldr.w	r5, [r3], #4
 8030ae0:	623b      	str	r3, [r7, #32]
 8030ae2:	d02d      	beq.n	8030b40 <__ssvfiscanf_r+0x598>
 8030ae4:	2d00      	cmp	r5, #0
 8030ae6:	f43f adac 	beq.w	8030642 <__ssvfiscanf_r+0x9a>
 8030aea:	4640      	mov	r0, r8
 8030aec:	f7fe fd46 	bl	802f57c <malloc>
 8030af0:	4681      	mov	r9, r0
 8030af2:	2800      	cmp	r0, #0
 8030af4:	f43f ae14 	beq.w	8030720 <__ssvfiscanf_r+0x178>
 8030af8:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8030afc:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8030b00:	6028      	str	r0, [r5, #0]
 8030b02:	45b2      	cmp	sl, r6
 8030b04:	d312      	bcc.n	8030b2c <__ssvfiscanf_r+0x584>
 8030b06:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8030b0a:	429e      	cmp	r6, r3
 8030b0c:	f200 8460 	bhi.w	80313d0 <__ssvfiscanf_r+0xe28>
 8030b10:	3608      	adds	r6, #8
 8030b12:	b2b6      	uxth	r6, r6
 8030b14:	f8db 0000 	ldr.w	r0, [fp]
 8030b18:	00b1      	lsls	r1, r6, #2
 8030b1a:	f003 fcb9 	bl	8034490 <realloc>
 8030b1e:	2800      	cmp	r0, #0
 8030b20:	f000 8456 	beq.w	80313d0 <__ssvfiscanf_r+0xe28>
 8030b24:	f8cb 0000 	str.w	r0, [fp]
 8030b28:	f8ab 6004 	strh.w	r6, [fp, #4]
 8030b2c:	f8db 3000 	ldr.w	r3, [fp]
 8030b30:	f10a 0201 	add.w	r2, sl, #1
 8030b34:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8030b38:	462e      	mov	r6, r5
 8030b3a:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030b3e:	464d      	mov	r5, r9
 8030b40:	9400      	str	r4, [sp, #0]
 8030b42:	4629      	mov	r1, r5
 8030b44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030b46:	4643      	mov	r3, r8
 8030b48:	2201      	movs	r2, #1
 8030b4a:	f7ff fcf3 	bl	8030534 <_sfread_r>
 8030b4e:	4605      	mov	r5, r0
 8030b50:	2800      	cmp	r0, #0
 8030b52:	f43f ade0 	beq.w	8030716 <__ssvfiscanf_r+0x16e>
 8030b56:	b13e      	cbz	r6, 8030b68 <__ssvfiscanf_r+0x5c0>
 8030b58:	4580      	cmp	r8, r0
 8030b5a:	d905      	bls.n	8030b68 <__ssvfiscanf_r+0x5c0>
 8030b5c:	4601      	mov	r1, r0
 8030b5e:	6830      	ldr	r0, [r6, #0]
 8030b60:	f003 fc96 	bl	8034490 <realloc>
 8030b64:	b100      	cbz	r0, 8030b68 <__ssvfiscanf_r+0x5c0>
 8030b66:	6030      	str	r0, [r6, #0]
 8030b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030b6a:	442b      	add	r3, r5
 8030b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030b6e:	e780      	b.n	8030a72 <__ssvfiscanf_r+0x4ca>
 8030b70:	0802c7f9 	.word	0x0802c7f9
 8030b74:	0803c8dd 	.word	0x0803c8dd
 8030b78:	2b00      	cmp	r3, #0
 8030b7a:	bf08      	it	eq
 8030b7c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8030b80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030b82:	693b      	ldr	r3, [r7, #16]
 8030b84:	2d00      	cmp	r5, #0
 8030b86:	f000 8100 	beq.w	8030d8a <__ssvfiscanf_r+0x7e2>
 8030b8a:	2b00      	cmp	r3, #0
 8030b8c:	f040 80a5 	bne.w	8030cda <__ssvfiscanf_r+0x732>
 8030b90:	6a3b      	ldr	r3, [r7, #32]
 8030b92:	0631      	lsls	r1, r6, #24
 8030b94:	f853 5b04 	ldr.w	r5, [r3], #4
 8030b98:	623b      	str	r3, [r7, #32]
 8030b9a:	f140 80a5 	bpl.w	8030ce8 <__ssvfiscanf_r+0x740>
 8030b9e:	2d00      	cmp	r5, #0
 8030ba0:	f43f ae55 	beq.w	803084e <__ssvfiscanf_r+0x2a6>
 8030ba4:	2080      	movs	r0, #128	@ 0x80
 8030ba6:	f7fe fce9 	bl	802f57c <malloc>
 8030baa:	4680      	mov	r8, r0
 8030bac:	2800      	cmp	r0, #0
 8030bae:	f43f ae4b 	beq.w	8030848 <__ssvfiscanf_r+0x2a0>
 8030bb2:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 8030bb6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8030bba:	6028      	str	r0, [r5, #0]
 8030bbc:	429e      	cmp	r6, r3
 8030bbe:	d314      	bcc.n	8030bea <__ssvfiscanf_r+0x642>
 8030bc0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030bc4:	4293      	cmp	r3, r2
 8030bc6:	f200 8403 	bhi.w	80313d0 <__ssvfiscanf_r+0xe28>
 8030bca:	3308      	adds	r3, #8
 8030bcc:	fa1f f983 	uxth.w	r9, r3
 8030bd0:	f8db 0000 	ldr.w	r0, [fp]
 8030bd4:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8030bd8:	f003 fc5a 	bl	8034490 <realloc>
 8030bdc:	2800      	cmp	r0, #0
 8030bde:	f000 83f7 	beq.w	80313d0 <__ssvfiscanf_r+0xe28>
 8030be2:	f8cb 0000 	str.w	r0, [fp]
 8030be6:	f8ab 9004 	strh.w	r9, [fp, #4]
 8030bea:	f8db 3000 	ldr.w	r3, [fp]
 8030bee:	1c72      	adds	r2, r6, #1
 8030bf0:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8030bf4:	46aa      	mov	sl, r5
 8030bf6:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030bfa:	4645      	mov	r5, r8
 8030bfc:	f04f 0920 	mov.w	r9, #32
 8030c00:	2600      	movs	r6, #0
 8030c02:	f7fd fbfd 	bl	802e400 <__locale_mb_cur_max>
 8030c06:	4286      	cmp	r6, r0
 8030c08:	f43f ad85 	beq.w	8030716 <__ssvfiscanf_r+0x16e>
 8030c0c:	1c73      	adds	r3, r6, #1
 8030c0e:	607b      	str	r3, [r7, #4]
 8030c10:	6823      	ldr	r3, [r4, #0]
 8030c12:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030c1a:	558a      	strb	r2, [r1, r6]
 8030c1c:	6862      	ldr	r2, [r4, #4]
 8030c1e:	3a01      	subs	r2, #1
 8030c20:	e9c4 3200 	strd	r3, r2, [r4]
 8030c24:	69bb      	ldr	r3, [r7, #24]
 8030c26:	2b03      	cmp	r3, #3
 8030c28:	d102      	bne.n	8030c30 <__ssvfiscanf_r+0x688>
 8030c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8030c2c:	2b04      	cmp	r3, #4
 8030c2e:	d005      	beq.n	8030c3c <__ssvfiscanf_r+0x694>
 8030c30:	2208      	movs	r2, #8
 8030c32:	2100      	movs	r1, #0
 8030c34:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8030c38:	f7fc fa5a 	bl	802d0f0 <memset>
 8030c3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8030c40:	9300      	str	r3, [sp, #0]
 8030c42:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8030c46:	687b      	ldr	r3, [r7, #4]
 8030c48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030c4a:	4629      	mov	r1, r5
 8030c4c:	f004 ffda 	bl	8035c04 <_mbrtowc_r>
 8030c50:	1c42      	adds	r2, r0, #1
 8030c52:	61b8      	str	r0, [r7, #24]
 8030c54:	f43f ad5f 	beq.w	8030716 <__ssvfiscanf_r+0x16e>
 8030c58:	2800      	cmp	r0, #0
 8030c5a:	d14a      	bne.n	8030cf2 <__ssvfiscanf_r+0x74a>
 8030c5c:	6028      	str	r0, [r5, #0]
 8030c5e:	682e      	ldr	r6, [r5, #0]
 8030c60:	1c73      	adds	r3, r6, #1
 8030c62:	d056      	beq.n	8030d12 <__ssvfiscanf_r+0x76a>
 8030c64:	2208      	movs	r2, #8
 8030c66:	2100      	movs	r1, #0
 8030c68:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8030c6c:	f7fc fa40 	bl	802d0f0 <memset>
 8030c70:	4b99      	ldr	r3, [pc, #612]	@ (8030ed8 <__ssvfiscanf_r+0x930>)
 8030c72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8030c78:	603b      	str	r3, [r7, #0]
 8030c7a:	4632      	mov	r2, r6
 8030c7c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8030c80:	683e      	ldr	r6, [r7, #0]
 8030c82:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8030c86:	47b0      	blx	r6
 8030c88:	2801      	cmp	r0, #1
 8030c8a:	d144      	bne.n	8030d16 <__ssvfiscanf_r+0x76e>
 8030c8c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8030c90:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8030c94:	5c9b      	ldrb	r3, [r3, r2]
 8030c96:	2b00      	cmp	r3, #0
 8030c98:	d148      	bne.n	8030d2c <__ssvfiscanf_r+0x784>
 8030c9a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 8030c9e:	687b      	ldr	r3, [r7, #4]
 8030ca0:	2b00      	cmp	r3, #0
 8030ca2:	d13a      	bne.n	8030d1a <__ssvfiscanf_r+0x772>
 8030ca4:	693b      	ldr	r3, [r7, #16]
 8030ca6:	2b00      	cmp	r3, #0
 8030ca8:	f47f ac9f 	bne.w	80305ea <__ssvfiscanf_r+0x42>
 8030cac:	602b      	str	r3, [r5, #0]
 8030cae:	f1ba 0f00 	cmp.w	sl, #0
 8030cb2:	f43f aede 	beq.w	8030a72 <__ssvfiscanf_r+0x4ca>
 8030cb6:	eba5 0108 	sub.w	r1, r5, r8
 8030cba:	108b      	asrs	r3, r1, #2
 8030cbc:	3301      	adds	r3, #1
 8030cbe:	4599      	cmp	r9, r3
 8030cc0:	f67f aed7 	bls.w	8030a72 <__ssvfiscanf_r+0x4ca>
 8030cc4:	f8da 0000 	ldr.w	r0, [sl]
 8030cc8:	3104      	adds	r1, #4
 8030cca:	f003 fbe1 	bl	8034490 <realloc>
 8030cce:	2800      	cmp	r0, #0
 8030cd0:	f43f aecf 	beq.w	8030a72 <__ssvfiscanf_r+0x4ca>
 8030cd4:	f8ca 0000 	str.w	r0, [sl]
 8030cd8:	e6cb      	b.n	8030a72 <__ssvfiscanf_r+0x4ca>
 8030cda:	f04f 0900 	mov.w	r9, #0
 8030cde:	46c8      	mov	r8, r9
 8030ce0:	46ca      	mov	sl, r9
 8030ce2:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8030ce6:	e78b      	b.n	8030c00 <__ssvfiscanf_r+0x658>
 8030ce8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8030cec:	46c8      	mov	r8, r9
 8030cee:	46ca      	mov	sl, r9
 8030cf0:	e786      	b.n	8030c00 <__ssvfiscanf_r+0x658>
 8030cf2:	69bb      	ldr	r3, [r7, #24]
 8030cf4:	3302      	adds	r3, #2
 8030cf6:	d1b2      	bne.n	8030c5e <__ssvfiscanf_r+0x6b6>
 8030cf8:	687e      	ldr	r6, [r7, #4]
 8030cfa:	6863      	ldr	r3, [r4, #4]
 8030cfc:	2b00      	cmp	r3, #0
 8030cfe:	dc3f      	bgt.n	8030d80 <__ssvfiscanf_r+0x7d8>
 8030d00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030d02:	4621      	mov	r1, r4
 8030d04:	f7ff fbf9 	bl	80304fa <__ssrefill_r>
 8030d08:	2800      	cmp	r0, #0
 8030d0a:	d039      	beq.n	8030d80 <__ssvfiscanf_r+0x7d8>
 8030d0c:	2e00      	cmp	r6, #0
 8030d0e:	d0c9      	beq.n	8030ca4 <__ssvfiscanf_r+0x6fc>
 8030d10:	e501      	b.n	8030716 <__ssvfiscanf_r+0x16e>
 8030d12:	4632      	mov	r2, r6
 8030d14:	e7bc      	b.n	8030c90 <__ssvfiscanf_r+0x6e8>
 8030d16:	2200      	movs	r2, #0
 8030d18:	e7ba      	b.n	8030c90 <__ssvfiscanf_r+0x6e8>
 8030d1a:	687b      	ldr	r3, [r7, #4]
 8030d1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030d1e:	3b01      	subs	r3, #1
 8030d20:	4622      	mov	r2, r4
 8030d22:	5cf1      	ldrb	r1, [r6, r3]
 8030d24:	607b      	str	r3, [r7, #4]
 8030d26:	f7ff fbad 	bl	8030484 <_sungetc_r>
 8030d2a:	e7b8      	b.n	8030c9e <__ssvfiscanf_r+0x6f6>
 8030d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030d2e:	687a      	ldr	r2, [r7, #4]
 8030d30:	4413      	add	r3, r2
 8030d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030d34:	69bb      	ldr	r3, [r7, #24]
 8030d36:	2b03      	cmp	r3, #3
 8030d38:	d102      	bne.n	8030d40 <__ssvfiscanf_r+0x798>
 8030d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8030d3c:	2b04      	cmp	r3, #4
 8030d3e:	d002      	beq.n	8030d46 <__ssvfiscanf_r+0x79e>
 8030d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030d42:	3b01      	subs	r3, #1
 8030d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030d46:	693b      	ldr	r3, [r7, #16]
 8030d48:	b9c3      	cbnz	r3, 8030d7c <__ssvfiscanf_r+0x7d4>
 8030d4a:	3504      	adds	r5, #4
 8030d4c:	f1ba 0f00 	cmp.w	sl, #0
 8030d50:	d014      	beq.n	8030d7c <__ssvfiscanf_r+0x7d4>
 8030d52:	eba5 0608 	sub.w	r6, r5, r8
 8030d56:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8030d5a:	d80d      	bhi.n	8030d78 <__ssvfiscanf_r+0x7d0>
 8030d5c:	4640      	mov	r0, r8
 8030d5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030d62:	f003 fb95 	bl	8034490 <realloc>
 8030d66:	4680      	mov	r8, r0
 8030d68:	2800      	cmp	r0, #0
 8030d6a:	f43f ad6d 	beq.w	8030848 <__ssvfiscanf_r+0x2a0>
 8030d6e:	1985      	adds	r5, r0, r6
 8030d70:	f8ca 0000 	str.w	r0, [sl]
 8030d74:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030d78:	693e      	ldr	r6, [r7, #16]
 8030d7a:	e7be      	b.n	8030cfa <__ssvfiscanf_r+0x752>
 8030d7c:	2600      	movs	r6, #0
 8030d7e:	e7bc      	b.n	8030cfa <__ssvfiscanf_r+0x752>
 8030d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030d82:	2b00      	cmp	r3, #0
 8030d84:	f47f af3d 	bne.w	8030c02 <__ssvfiscanf_r+0x65a>
 8030d88:	e78c      	b.n	8030ca4 <__ssvfiscanf_r+0x6fc>
 8030d8a:	b1e3      	cbz	r3, 8030dc6 <__ssvfiscanf_r+0x81e>
 8030d8c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 8030d90:	6823      	ldr	r3, [r4, #0]
 8030d92:	781a      	ldrb	r2, [r3, #0]
 8030d94:	5cb2      	ldrb	r2, [r6, r2]
 8030d96:	b91a      	cbnz	r2, 8030da0 <__ssvfiscanf_r+0x7f8>
 8030d98:	2d00      	cmp	r5, #0
 8030d9a:	f47f ae92 	bne.w	8030ac2 <__ssvfiscanf_r+0x51a>
 8030d9e:	e450      	b.n	8030642 <__ssvfiscanf_r+0x9a>
 8030da0:	3301      	adds	r3, #1
 8030da2:	6862      	ldr	r2, [r4, #4]
 8030da4:	6023      	str	r3, [r4, #0]
 8030da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030da8:	3501      	adds	r5, #1
 8030daa:	3a01      	subs	r2, #1
 8030dac:	42ab      	cmp	r3, r5
 8030dae:	6062      	str	r2, [r4, #4]
 8030db0:	f43f ae87 	beq.w	8030ac2 <__ssvfiscanf_r+0x51a>
 8030db4:	2a00      	cmp	r2, #0
 8030db6:	dceb      	bgt.n	8030d90 <__ssvfiscanf_r+0x7e8>
 8030db8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030dba:	4621      	mov	r1, r4
 8030dbc:	f7ff fb9d 	bl	80304fa <__ssrefill_r>
 8030dc0:	2800      	cmp	r0, #0
 8030dc2:	d0e5      	beq.n	8030d90 <__ssvfiscanf_r+0x7e8>
 8030dc4:	e67d      	b.n	8030ac2 <__ssvfiscanf_r+0x51a>
 8030dc6:	6a3b      	ldr	r3, [r7, #32]
 8030dc8:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 8030dcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8030dd0:	623b      	str	r3, [r7, #32]
 8030dd2:	d07e      	beq.n	8030ed2 <__ssvfiscanf_r+0x92a>
 8030dd4:	2d00      	cmp	r5, #0
 8030dd6:	f43f ac34 	beq.w	8030642 <__ssvfiscanf_r+0x9a>
 8030dda:	2020      	movs	r0, #32
 8030ddc:	f7fe fbce 	bl	802f57c <malloc>
 8030de0:	4680      	mov	r8, r0
 8030de2:	2800      	cmp	r0, #0
 8030de4:	f43f ac9c 	beq.w	8030720 <__ssvfiscanf_r+0x178>
 8030de8:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030dec:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8030df0:	6028      	str	r0, [r5, #0]
 8030df2:	45b1      	cmp	r9, r6
 8030df4:	d312      	bcc.n	8030e1c <__ssvfiscanf_r+0x874>
 8030df6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8030dfa:	429e      	cmp	r6, r3
 8030dfc:	f200 82e8 	bhi.w	80313d0 <__ssvfiscanf_r+0xe28>
 8030e00:	3608      	adds	r6, #8
 8030e02:	b2b6      	uxth	r6, r6
 8030e04:	f8db 0000 	ldr.w	r0, [fp]
 8030e08:	00b1      	lsls	r1, r6, #2
 8030e0a:	f003 fb41 	bl	8034490 <realloc>
 8030e0e:	2800      	cmp	r0, #0
 8030e10:	f000 82de 	beq.w	80313d0 <__ssvfiscanf_r+0xe28>
 8030e14:	f8cb 0000 	str.w	r0, [fp]
 8030e18:	f8ab 6004 	strh.w	r6, [fp, #4]
 8030e1c:	f8db 3000 	ldr.w	r3, [fp]
 8030e20:	f109 0201 	add.w	r2, r9, #1
 8030e24:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030e28:	46aa      	mov	sl, r5
 8030e2a:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030e2e:	4645      	mov	r5, r8
 8030e30:	f04f 0920 	mov.w	r9, #32
 8030e34:	462e      	mov	r6, r5
 8030e36:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 8030e3a:	6823      	ldr	r3, [r4, #0]
 8030e3c:	781a      	ldrb	r2, [r3, #0]
 8030e3e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8030e42:	b362      	cbz	r2, 8030e9e <__ssvfiscanf_r+0x8f6>
 8030e44:	6862      	ldr	r2, [r4, #4]
 8030e46:	3a01      	subs	r2, #1
 8030e48:	6062      	str	r2, [r4, #4]
 8030e4a:	1c5a      	adds	r2, r3, #1
 8030e4c:	6022      	str	r2, [r4, #0]
 8030e4e:	781b      	ldrb	r3, [r3, #0]
 8030e50:	f805 3b01 	strb.w	r3, [r5], #1
 8030e54:	f1ba 0f00 	cmp.w	sl, #0
 8030e58:	d011      	beq.n	8030e7e <__ssvfiscanf_r+0x8d6>
 8030e5a:	1bab      	subs	r3, r5, r6
 8030e5c:	454b      	cmp	r3, r9
 8030e5e:	d30e      	bcc.n	8030e7e <__ssvfiscanf_r+0x8d6>
 8030e60:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030e64:	4630      	mov	r0, r6
 8030e66:	4649      	mov	r1, r9
 8030e68:	613b      	str	r3, [r7, #16]
 8030e6a:	f003 fb11 	bl	8034490 <realloc>
 8030e6e:	4606      	mov	r6, r0
 8030e70:	2800      	cmp	r0, #0
 8030e72:	f43f ac55 	beq.w	8030720 <__ssvfiscanf_r+0x178>
 8030e76:	693b      	ldr	r3, [r7, #16]
 8030e78:	f8ca 0000 	str.w	r0, [sl]
 8030e7c:	18c5      	adds	r5, r0, r3
 8030e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030e80:	3b01      	subs	r3, #1
 8030e82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030e84:	d00b      	beq.n	8030e9e <__ssvfiscanf_r+0x8f6>
 8030e86:	6863      	ldr	r3, [r4, #4]
 8030e88:	2b00      	cmp	r3, #0
 8030e8a:	dcd6      	bgt.n	8030e3a <__ssvfiscanf_r+0x892>
 8030e8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030e8e:	4621      	mov	r1, r4
 8030e90:	f7ff fb33 	bl	80304fa <__ssrefill_r>
 8030e94:	2800      	cmp	r0, #0
 8030e96:	d0d0      	beq.n	8030e3a <__ssvfiscanf_r+0x892>
 8030e98:	42b5      	cmp	r5, r6
 8030e9a:	f43f ac3c 	beq.w	8030716 <__ssvfiscanf_r+0x16e>
 8030e9e:	1bae      	subs	r6, r5, r6
 8030ea0:	f43f abcf 	beq.w	8030642 <__ssvfiscanf_r+0x9a>
 8030ea4:	2300      	movs	r3, #0
 8030ea6:	702b      	strb	r3, [r5, #0]
 8030ea8:	f1ba 0f00 	cmp.w	sl, #0
 8030eac:	d009      	beq.n	8030ec2 <__ssvfiscanf_r+0x91a>
 8030eae:	1c71      	adds	r1, r6, #1
 8030eb0:	4589      	cmp	r9, r1
 8030eb2:	d906      	bls.n	8030ec2 <__ssvfiscanf_r+0x91a>
 8030eb4:	f8da 0000 	ldr.w	r0, [sl]
 8030eb8:	f003 faea 	bl	8034490 <realloc>
 8030ebc:	b108      	cbz	r0, 8030ec2 <__ssvfiscanf_r+0x91a>
 8030ebe:	f8ca 0000 	str.w	r0, [sl]
 8030ec2:	69fb      	ldr	r3, [r7, #28]
 8030ec4:	3301      	adds	r3, #1
 8030ec6:	61fb      	str	r3, [r7, #28]
 8030ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030eca:	4433      	add	r3, r6
 8030ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030ece:	f7ff bb8c 	b.w	80305ea <__ssvfiscanf_r+0x42>
 8030ed2:	46ca      	mov	sl, r9
 8030ed4:	e7ae      	b.n	8030e34 <__ssvfiscanf_r+0x88c>
 8030ed6:	bf00      	nop
 8030ed8:	2000016c 	.word	0x2000016c
 8030edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030ede:	2b00      	cmp	r3, #0
 8030ee0:	bf08      	it	eq
 8030ee2:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8030ee6:	f016 0501 	ands.w	r5, r6, #1
 8030eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030eec:	f006 0810 	and.w	r8, r6, #16
 8030ef0:	f000 80e1 	beq.w	80310b6 <__ssvfiscanf_r+0xb0e>
 8030ef4:	f1b8 0f00 	cmp.w	r8, #0
 8030ef8:	f040 8089 	bne.w	803100e <__ssvfiscanf_r+0xa66>
 8030efc:	6a3b      	ldr	r3, [r7, #32]
 8030efe:	0636      	lsls	r6, r6, #24
 8030f00:	f853 5b04 	ldr.w	r5, [r3], #4
 8030f04:	623b      	str	r3, [r7, #32]
 8030f06:	f140 8089 	bpl.w	803101c <__ssvfiscanf_r+0xa74>
 8030f0a:	2d00      	cmp	r5, #0
 8030f0c:	f43f ac9f 	beq.w	803084e <__ssvfiscanf_r+0x2a6>
 8030f10:	2080      	movs	r0, #128	@ 0x80
 8030f12:	f7fe fb33 	bl	802f57c <malloc>
 8030f16:	4606      	mov	r6, r0
 8030f18:	2800      	cmp	r0, #0
 8030f1a:	f43f ac95 	beq.w	8030848 <__ssvfiscanf_r+0x2a0>
 8030f1e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030f22:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8030f26:	6028      	str	r0, [r5, #0]
 8030f28:	4599      	cmp	r9, r3
 8030f2a:	d314      	bcc.n	8030f56 <__ssvfiscanf_r+0x9ae>
 8030f2c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030f30:	4293      	cmp	r3, r2
 8030f32:	f200 824d 	bhi.w	80313d0 <__ssvfiscanf_r+0xe28>
 8030f36:	3308      	adds	r3, #8
 8030f38:	fa1f fa83 	uxth.w	sl, r3
 8030f3c:	f8db 0000 	ldr.w	r0, [fp]
 8030f40:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8030f44:	f003 faa4 	bl	8034490 <realloc>
 8030f48:	2800      	cmp	r0, #0
 8030f4a:	f000 8241 	beq.w	80313d0 <__ssvfiscanf_r+0xe28>
 8030f4e:	f8cb 0000 	str.w	r0, [fp]
 8030f52:	f8ab a004 	strh.w	sl, [fp, #4]
 8030f56:	f8db 3000 	ldr.w	r3, [fp]
 8030f5a:	f109 0201 	add.w	r2, r9, #1
 8030f5e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030f62:	46aa      	mov	sl, r5
 8030f64:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030f68:	4635      	mov	r5, r6
 8030f6a:	f04f 0920 	mov.w	r9, #32
 8030f6e:	2300      	movs	r3, #0
 8030f70:	6822      	ldr	r2, [r4, #0]
 8030f72:	499e      	ldr	r1, [pc, #632]	@ (80311ec <__ssvfiscanf_r+0xc44>)
 8030f74:	7812      	ldrb	r2, [r2, #0]
 8030f76:	5c8a      	ldrb	r2, [r1, r2]
 8030f78:	0711      	lsls	r1, r2, #28
 8030f7a:	d43c      	bmi.n	8030ff6 <__ssvfiscanf_r+0xa4e>
 8030f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030f7e:	2a00      	cmp	r2, #0
 8030f80:	d039      	beq.n	8030ff6 <__ssvfiscanf_r+0xa4e>
 8030f82:	613b      	str	r3, [r7, #16]
 8030f84:	f7fd fa3c 	bl	802e400 <__locale_mb_cur_max>
 8030f88:	693b      	ldr	r3, [r7, #16]
 8030f8a:	4298      	cmp	r0, r3
 8030f8c:	f43f abc3 	beq.w	8030716 <__ssvfiscanf_r+0x16e>
 8030f90:	1c5a      	adds	r2, r3, #1
 8030f92:	613a      	str	r2, [r7, #16]
 8030f94:	6822      	ldr	r2, [r4, #0]
 8030f96:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030f9a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8030f9e:	54c8      	strb	r0, [r1, r3]
 8030fa0:	6863      	ldr	r3, [r4, #4]
 8030fa2:	3b01      	subs	r3, #1
 8030fa4:	e9c4 2300 	strd	r2, r3, [r4]
 8030fa8:	69bb      	ldr	r3, [r7, #24]
 8030faa:	2b03      	cmp	r3, #3
 8030fac:	d102      	bne.n	8030fb4 <__ssvfiscanf_r+0xa0c>
 8030fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8030fb0:	2b04      	cmp	r3, #4
 8030fb2:	d005      	beq.n	8030fc0 <__ssvfiscanf_r+0xa18>
 8030fb4:	2208      	movs	r2, #8
 8030fb6:	2100      	movs	r1, #0
 8030fb8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8030fbc:	f7fc f898 	bl	802d0f0 <memset>
 8030fc0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8030fc4:	9300      	str	r3, [sp, #0]
 8030fc6:	693b      	ldr	r3, [r7, #16]
 8030fc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030fca:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8030fce:	4629      	mov	r1, r5
 8030fd0:	f004 fe18 	bl	8035c04 <_mbrtowc_r>
 8030fd4:	4603      	mov	r3, r0
 8030fd6:	61b8      	str	r0, [r7, #24]
 8030fd8:	1c58      	adds	r0, r3, #1
 8030fda:	f43f ab9c 	beq.w	8030716 <__ssvfiscanf_r+0x16e>
 8030fde:	bb0b      	cbnz	r3, 8031024 <__ssvfiscanf_r+0xa7c>
 8030fe0:	602b      	str	r3, [r5, #0]
 8030fe2:	6828      	ldr	r0, [r5, #0]
 8030fe4:	f004 fe28 	bl	8035c38 <iswspace>
 8030fe8:	4603      	mov	r3, r0
 8030fea:	2800      	cmp	r0, #0
 8030fec:	d037      	beq.n	803105e <__ssvfiscanf_r+0xab6>
 8030fee:	693a      	ldr	r2, [r7, #16]
 8030ff0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030ff4:	bb4a      	cbnz	r2, 803104a <__ssvfiscanf_r+0xaa2>
 8030ff6:	f1b8 0f00 	cmp.w	r8, #0
 8030ffa:	f47f aaf6 	bne.w	80305ea <__ssvfiscanf_r+0x42>
 8030ffe:	f8c5 8000 	str.w	r8, [r5]
 8031002:	f1ba 0f00 	cmp.w	sl, #0
 8031006:	f43f ad34 	beq.w	8030a72 <__ssvfiscanf_r+0x4ca>
 803100a:	1ba9      	subs	r1, r5, r6
 803100c:	e655      	b.n	8030cba <__ssvfiscanf_r+0x712>
 803100e:	f04f 0900 	mov.w	r9, #0
 8031012:	464e      	mov	r6, r9
 8031014:	46ca      	mov	sl, r9
 8031016:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 803101a:	e7a8      	b.n	8030f6e <__ssvfiscanf_r+0x9c6>
 803101c:	46c1      	mov	r9, r8
 803101e:	4646      	mov	r6, r8
 8031020:	46c2      	mov	sl, r8
 8031022:	e7a4      	b.n	8030f6e <__ssvfiscanf_r+0x9c6>
 8031024:	69bb      	ldr	r3, [r7, #24]
 8031026:	3302      	adds	r3, #2
 8031028:	d1db      	bne.n	8030fe2 <__ssvfiscanf_r+0xa3a>
 803102a:	693b      	ldr	r3, [r7, #16]
 803102c:	6862      	ldr	r2, [r4, #4]
 803102e:	2a00      	cmp	r2, #0
 8031030:	dc9e      	bgt.n	8030f70 <__ssvfiscanf_r+0x9c8>
 8031032:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031034:	613b      	str	r3, [r7, #16]
 8031036:	4621      	mov	r1, r4
 8031038:	f7ff fa5f 	bl	80304fa <__ssrefill_r>
 803103c:	693b      	ldr	r3, [r7, #16]
 803103e:	2800      	cmp	r0, #0
 8031040:	d096      	beq.n	8030f70 <__ssvfiscanf_r+0x9c8>
 8031042:	2b00      	cmp	r3, #0
 8031044:	f47f ab67 	bne.w	8030716 <__ssvfiscanf_r+0x16e>
 8031048:	e7d5      	b.n	8030ff6 <__ssvfiscanf_r+0xa4e>
 803104a:	693a      	ldr	r2, [r7, #16]
 803104c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803104e:	3a01      	subs	r2, #1
 8031050:	613a      	str	r2, [r7, #16]
 8031052:	6939      	ldr	r1, [r7, #16]
 8031054:	4622      	mov	r2, r4
 8031056:	5c59      	ldrb	r1, [r3, r1]
 8031058:	f7ff fa14 	bl	8030484 <_sungetc_r>
 803105c:	e7c7      	b.n	8030fee <__ssvfiscanf_r+0xa46>
 803105e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8031060:	6939      	ldr	r1, [r7, #16]
 8031062:	440a      	add	r2, r1
 8031064:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8031066:	69ba      	ldr	r2, [r7, #24]
 8031068:	2a03      	cmp	r2, #3
 803106a:	d102      	bne.n	8031072 <__ssvfiscanf_r+0xaca>
 803106c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 803106e:	2a04      	cmp	r2, #4
 8031070:	d002      	beq.n	8031078 <__ssvfiscanf_r+0xad0>
 8031072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8031074:	3a01      	subs	r2, #1
 8031076:	62ba      	str	r2, [r7, #40]	@ 0x28
 8031078:	f1b8 0f00 	cmp.w	r8, #0
 803107c:	d1d6      	bne.n	803102c <__ssvfiscanf_r+0xa84>
 803107e:	3504      	adds	r5, #4
 8031080:	f1ba 0f00 	cmp.w	sl, #0
 8031084:	d015      	beq.n	80310b2 <__ssvfiscanf_r+0xb0a>
 8031086:	1bab      	subs	r3, r5, r6
 8031088:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 803108c:	d80f      	bhi.n	80310ae <__ssvfiscanf_r+0xb06>
 803108e:	4630      	mov	r0, r6
 8031090:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8031094:	613b      	str	r3, [r7, #16]
 8031096:	f003 f9fb 	bl	8034490 <realloc>
 803109a:	4606      	mov	r6, r0
 803109c:	2800      	cmp	r0, #0
 803109e:	f43f abd3 	beq.w	8030848 <__ssvfiscanf_r+0x2a0>
 80310a2:	693b      	ldr	r3, [r7, #16]
 80310a4:	f8ca 0000 	str.w	r0, [sl]
 80310a8:	18c5      	adds	r5, r0, r3
 80310aa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80310ae:	4643      	mov	r3, r8
 80310b0:	e7bc      	b.n	803102c <__ssvfiscanf_r+0xa84>
 80310b2:	4653      	mov	r3, sl
 80310b4:	e7ba      	b.n	803102c <__ssvfiscanf_r+0xa84>
 80310b6:	f1b8 0f00 	cmp.w	r8, #0
 80310ba:	d019      	beq.n	80310f0 <__ssvfiscanf_r+0xb48>
 80310bc:	4e4b      	ldr	r6, [pc, #300]	@ (80311ec <__ssvfiscanf_r+0xc44>)
 80310be:	6823      	ldr	r3, [r4, #0]
 80310c0:	781a      	ldrb	r2, [r3, #0]
 80310c2:	5cb2      	ldrb	r2, [r6, r2]
 80310c4:	0712      	lsls	r2, r2, #28
 80310c6:	f53f acfc 	bmi.w	8030ac2 <__ssvfiscanf_r+0x51a>
 80310ca:	3301      	adds	r3, #1
 80310cc:	6862      	ldr	r2, [r4, #4]
 80310ce:	6023      	str	r3, [r4, #0]
 80310d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80310d2:	3501      	adds	r5, #1
 80310d4:	3a01      	subs	r2, #1
 80310d6:	429d      	cmp	r5, r3
 80310d8:	6062      	str	r2, [r4, #4]
 80310da:	f43f acf2 	beq.w	8030ac2 <__ssvfiscanf_r+0x51a>
 80310de:	2a00      	cmp	r2, #0
 80310e0:	dced      	bgt.n	80310be <__ssvfiscanf_r+0xb16>
 80310e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80310e4:	4621      	mov	r1, r4
 80310e6:	f7ff fa08 	bl	80304fa <__ssrefill_r>
 80310ea:	2800      	cmp	r0, #0
 80310ec:	d0e7      	beq.n	80310be <__ssvfiscanf_r+0xb16>
 80310ee:	e4e8      	b.n	8030ac2 <__ssvfiscanf_r+0x51a>
 80310f0:	6a3b      	ldr	r3, [r7, #32]
 80310f2:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80310f6:	f853 5b04 	ldr.w	r5, [r3], #4
 80310fa:	623b      	str	r3, [r7, #32]
 80310fc:	d074      	beq.n	80311e8 <__ssvfiscanf_r+0xc40>
 80310fe:	2d00      	cmp	r5, #0
 8031100:	f43f aa9f 	beq.w	8030642 <__ssvfiscanf_r+0x9a>
 8031104:	2020      	movs	r0, #32
 8031106:	f7fe fa39 	bl	802f57c <malloc>
 803110a:	4680      	mov	r8, r0
 803110c:	2800      	cmp	r0, #0
 803110e:	f43f ab07 	beq.w	8030720 <__ssvfiscanf_r+0x178>
 8031112:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8031116:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 803111a:	6028      	str	r0, [r5, #0]
 803111c:	45b1      	cmp	r9, r6
 803111e:	d312      	bcc.n	8031146 <__ssvfiscanf_r+0xb9e>
 8031120:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8031124:	429e      	cmp	r6, r3
 8031126:	f200 8153 	bhi.w	80313d0 <__ssvfiscanf_r+0xe28>
 803112a:	3608      	adds	r6, #8
 803112c:	b2b6      	uxth	r6, r6
 803112e:	f8db 0000 	ldr.w	r0, [fp]
 8031132:	00b1      	lsls	r1, r6, #2
 8031134:	f003 f9ac 	bl	8034490 <realloc>
 8031138:	2800      	cmp	r0, #0
 803113a:	f000 8149 	beq.w	80313d0 <__ssvfiscanf_r+0xe28>
 803113e:	f8cb 0000 	str.w	r0, [fp]
 8031142:	f8ab 6004 	strh.w	r6, [fp, #4]
 8031146:	f8db 3000 	ldr.w	r3, [fp]
 803114a:	f109 0201 	add.w	r2, r9, #1
 803114e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8031152:	46aa      	mov	sl, r5
 8031154:	f8ab 2006 	strh.w	r2, [fp, #6]
 8031158:	4645      	mov	r5, r8
 803115a:	2620      	movs	r6, #32
 803115c:	46a9      	mov	r9, r5
 803115e:	6823      	ldr	r3, [r4, #0]
 8031160:	4922      	ldr	r1, [pc, #136]	@ (80311ec <__ssvfiscanf_r+0xc44>)
 8031162:	781a      	ldrb	r2, [r3, #0]
 8031164:	5c8a      	ldrb	r2, [r1, r2]
 8031166:	0710      	lsls	r0, r2, #28
 8031168:	d428      	bmi.n	80311bc <__ssvfiscanf_r+0xc14>
 803116a:	6862      	ldr	r2, [r4, #4]
 803116c:	3a01      	subs	r2, #1
 803116e:	6062      	str	r2, [r4, #4]
 8031170:	1c5a      	adds	r2, r3, #1
 8031172:	6022      	str	r2, [r4, #0]
 8031174:	781b      	ldrb	r3, [r3, #0]
 8031176:	f805 3b01 	strb.w	r3, [r5], #1
 803117a:	f1ba 0f00 	cmp.w	sl, #0
 803117e:	d010      	beq.n	80311a2 <__ssvfiscanf_r+0xbfa>
 8031180:	eba5 0809 	sub.w	r8, r5, r9
 8031184:	45b0      	cmp	r8, r6
 8031186:	d30c      	bcc.n	80311a2 <__ssvfiscanf_r+0xbfa>
 8031188:	0076      	lsls	r6, r6, #1
 803118a:	4648      	mov	r0, r9
 803118c:	4631      	mov	r1, r6
 803118e:	f003 f97f 	bl	8034490 <realloc>
 8031192:	4681      	mov	r9, r0
 8031194:	2800      	cmp	r0, #0
 8031196:	f43f aac3 	beq.w	8030720 <__ssvfiscanf_r+0x178>
 803119a:	eb00 0508 	add.w	r5, r0, r8
 803119e:	f8ca 0000 	str.w	r0, [sl]
 80311a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80311a4:	3b01      	subs	r3, #1
 80311a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80311a8:	d008      	beq.n	80311bc <__ssvfiscanf_r+0xc14>
 80311aa:	6863      	ldr	r3, [r4, #4]
 80311ac:	2b00      	cmp	r3, #0
 80311ae:	dcd6      	bgt.n	803115e <__ssvfiscanf_r+0xbb6>
 80311b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80311b2:	4621      	mov	r1, r4
 80311b4:	f7ff f9a1 	bl	80304fa <__ssrefill_r>
 80311b8:	2800      	cmp	r0, #0
 80311ba:	d0d0      	beq.n	803115e <__ssvfiscanf_r+0xbb6>
 80311bc:	2300      	movs	r3, #0
 80311be:	702b      	strb	r3, [r5, #0]
 80311c0:	eba5 0509 	sub.w	r5, r5, r9
 80311c4:	f1ba 0f00 	cmp.w	sl, #0
 80311c8:	f43f acce 	beq.w	8030b68 <__ssvfiscanf_r+0x5c0>
 80311cc:	1c69      	adds	r1, r5, #1
 80311ce:	428e      	cmp	r6, r1
 80311d0:	f67f acca 	bls.w	8030b68 <__ssvfiscanf_r+0x5c0>
 80311d4:	f8da 0000 	ldr.w	r0, [sl]
 80311d8:	f003 f95a 	bl	8034490 <realloc>
 80311dc:	2800      	cmp	r0, #0
 80311de:	f43f acc3 	beq.w	8030b68 <__ssvfiscanf_r+0x5c0>
 80311e2:	f8ca 0000 	str.w	r0, [sl]
 80311e6:	e4bf      	b.n	8030b68 <__ssvfiscanf_r+0x5c0>
 80311e8:	46b2      	mov	sl, r6
 80311ea:	e7b7      	b.n	803115c <__ssvfiscanf_r+0xbb4>
 80311ec:	0803c8dd 	.word	0x0803c8dd
 80311f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80311f2:	3b01      	subs	r3, #1
 80311f4:	2b26      	cmp	r3, #38	@ 0x26
 80311f6:	bf81      	itttt	hi
 80311f8:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 80311fa:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 80311fe:	2327      	movhi	r3, #39	@ 0x27
 8031200:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8031202:	bf98      	it	ls
 8031204:	f04f 0800 	movls.w	r8, #0
 8031208:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 803120c:	f04f 0900 	mov.w	r9, #0
 8031210:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 8031214:	6822      	ldr	r2, [r4, #0]
 8031216:	7813      	ldrb	r3, [r2, #0]
 8031218:	2b39      	cmp	r3, #57	@ 0x39
 803121a:	d80f      	bhi.n	803123c <__ssvfiscanf_r+0xc94>
 803121c:	2b2a      	cmp	r3, #42	@ 0x2a
 803121e:	d91a      	bls.n	8031256 <__ssvfiscanf_r+0xcae>
 8031220:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8031224:	290e      	cmp	r1, #14
 8031226:	d816      	bhi.n	8031256 <__ssvfiscanf_r+0xcae>
 8031228:	e8df f001 	tbb	[pc, r1]
 803122c:	15771577 	.word	0x15771577
 8031230:	67673e15 	.word	0x67673e15
 8031234:	67676767 	.word	0x67676767
 8031238:	6f67      	.short	0x6f67
 803123a:	6f          	.byte	0x6f
 803123b:	00          	.byte	0x00
 803123c:	2b66      	cmp	r3, #102	@ 0x66
 803123e:	d831      	bhi.n	80312a4 <__ssvfiscanf_r+0xcfc>
 8031240:	2b60      	cmp	r3, #96	@ 0x60
 8031242:	d803      	bhi.n	803124c <__ssvfiscanf_r+0xca4>
 8031244:	2b46      	cmp	r3, #70	@ 0x46
 8031246:	d804      	bhi.n	8031252 <__ssvfiscanf_r+0xcaa>
 8031248:	2b40      	cmp	r3, #64	@ 0x40
 803124a:	d904      	bls.n	8031256 <__ssvfiscanf_r+0xcae>
 803124c:	6979      	ldr	r1, [r7, #20]
 803124e:	290a      	cmp	r1, #10
 8031250:	e061      	b.n	8031316 <__ssvfiscanf_r+0xd6e>
 8031252:	2b58      	cmp	r3, #88	@ 0x58
 8031254:	d066      	beq.n	8031324 <__ssvfiscanf_r+0xd7c>
 8031256:	05f1      	lsls	r1, r6, #23
 8031258:	d511      	bpl.n	803127e <__ssvfiscanf_r+0xcd6>
 803125a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803125e:	459a      	cmp	sl, r3
 8031260:	d908      	bls.n	8031274 <__ssvfiscanf_r+0xccc>
 8031262:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8031266:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031268:	4622      	mov	r2, r4
 803126a:	f7ff f90b 	bl	8030484 <_sungetc_r>
 803126e:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 8031272:	46c2      	mov	sl, r8
 8031274:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8031278:	459a      	cmp	sl, r3
 803127a:	f43f a9e2 	beq.w	8030642 <__ssvfiscanf_r+0x9a>
 803127e:	f016 0210 	ands.w	r2, r6, #16
 8031282:	d16b      	bne.n	803135c <__ssvfiscanf_r+0xdb4>
 8031284:	697b      	ldr	r3, [r7, #20]
 8031286:	f88a 2000 	strb.w	r2, [sl]
 803128a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803128c:	68fd      	ldr	r5, [r7, #12]
 803128e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8031292:	47a8      	blx	r5
 8031294:	6a3b      	ldr	r3, [r7, #32]
 8031296:	06b2      	lsls	r2, r6, #26
 8031298:	f103 0804 	add.w	r8, r3, #4
 803129c:	d555      	bpl.n	803134a <__ssvfiscanf_r+0xda2>
 803129e:	681b      	ldr	r3, [r3, #0]
 80312a0:	6018      	str	r0, [r3, #0]
 80312a2:	e057      	b.n	8031354 <__ssvfiscanf_r+0xdac>
 80312a4:	2b78      	cmp	r3, #120	@ 0x78
 80312a6:	e7d5      	b.n	8031254 <__ssvfiscanf_r+0xcac>
 80312a8:	0531      	lsls	r1, r6, #20
 80312aa:	d509      	bpl.n	80312c0 <__ssvfiscanf_r+0xd18>
 80312ac:	6979      	ldr	r1, [r7, #20]
 80312ae:	b919      	cbnz	r1, 80312b8 <__ssvfiscanf_r+0xd10>
 80312b0:	2108      	movs	r1, #8
 80312b2:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 80312b6:	6179      	str	r1, [r7, #20]
 80312b8:	0575      	lsls	r5, r6, #21
 80312ba:	d506      	bpl.n	80312ca <__ssvfiscanf_r+0xd22>
 80312bc:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 80312c0:	4655      	mov	r5, sl
 80312c2:	f805 3b01 	strb.w	r3, [r5], #1
 80312c6:	46aa      	mov	sl, r5
 80312c8:	e00b      	b.n	80312e2 <__ssvfiscanf_r+0xd3a>
 80312ca:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 80312ce:	f1b8 0f00 	cmp.w	r8, #0
 80312d2:	d004      	beq.n	80312de <__ssvfiscanf_r+0xd36>
 80312d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80312d6:	3301      	adds	r3, #1
 80312d8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80312dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80312de:	f109 0901 	add.w	r9, r9, #1
 80312e2:	6863      	ldr	r3, [r4, #4]
 80312e4:	3b01      	subs	r3, #1
 80312e6:	2b00      	cmp	r3, #0
 80312e8:	6063      	str	r3, [r4, #4]
 80312ea:	dd27      	ble.n	803133c <__ssvfiscanf_r+0xd94>
 80312ec:	3201      	adds	r2, #1
 80312ee:	6022      	str	r2, [r4, #0]
 80312f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80312f2:	3b01      	subs	r3, #1
 80312f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80312f6:	d18d      	bne.n	8031214 <__ssvfiscanf_r+0xc6c>
 80312f8:	e7ad      	b.n	8031256 <__ssvfiscanf_r+0xcae>
 80312fa:	6978      	ldr	r0, [r7, #20]
 80312fc:	4936      	ldr	r1, [pc, #216]	@ (80313d8 <__ssvfiscanf_r+0xe30>)
 80312fe:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8031302:	6179      	str	r1, [r7, #20]
 8031304:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 8031308:	e7da      	b.n	80312c0 <__ssvfiscanf_r+0xd18>
 803130a:	6978      	ldr	r0, [r7, #20]
 803130c:	4932      	ldr	r1, [pc, #200]	@ (80313d8 <__ssvfiscanf_r+0xe30>)
 803130e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8031312:	6179      	str	r1, [r7, #20]
 8031314:	2908      	cmp	r1, #8
 8031316:	dcf5      	bgt.n	8031304 <__ssvfiscanf_r+0xd5c>
 8031318:	e79d      	b.n	8031256 <__ssvfiscanf_r+0xcae>
 803131a:	0630      	lsls	r0, r6, #24
 803131c:	d59b      	bpl.n	8031256 <__ssvfiscanf_r+0xcae>
 803131e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8031322:	e7cd      	b.n	80312c0 <__ssvfiscanf_r+0xd18>
 8031324:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 8031328:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 803132c:	d193      	bne.n	8031256 <__ssvfiscanf_r+0xcae>
 803132e:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 8031332:	2110      	movs	r1, #16
 8031334:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 8031338:	6179      	str	r1, [r7, #20]
 803133a:	e7c1      	b.n	80312c0 <__ssvfiscanf_r+0xd18>
 803133c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803133e:	4621      	mov	r1, r4
 8031340:	f7ff f8db 	bl	80304fa <__ssrefill_r>
 8031344:	2800      	cmp	r0, #0
 8031346:	d0d3      	beq.n	80312f0 <__ssvfiscanf_r+0xd48>
 8031348:	e785      	b.n	8031256 <__ssvfiscanf_r+0xcae>
 803134a:	0733      	lsls	r3, r6, #28
 803134c:	d50d      	bpl.n	803136a <__ssvfiscanf_r+0xdc2>
 803134e:	6a3b      	ldr	r3, [r7, #32]
 8031350:	681b      	ldr	r3, [r3, #0]
 8031352:	7018      	strb	r0, [r3, #0]
 8031354:	69fb      	ldr	r3, [r7, #28]
 8031356:	3301      	adds	r3, #1
 8031358:	e9c7 3807 	strd	r3, r8, [r7, #28]
 803135c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8031360:	ebaa 0503 	sub.w	r5, sl, r3
 8031364:	444d      	add	r5, r9
 8031366:	f7ff bbac 	b.w	8030ac2 <__ssvfiscanf_r+0x51a>
 803136a:	0775      	lsls	r5, r6, #29
 803136c:	d503      	bpl.n	8031376 <__ssvfiscanf_r+0xdce>
 803136e:	6a3b      	ldr	r3, [r7, #32]
 8031370:	681b      	ldr	r3, [r3, #0]
 8031372:	8018      	strh	r0, [r3, #0]
 8031374:	e7ee      	b.n	8031354 <__ssvfiscanf_r+0xdac>
 8031376:	f016 0201 	ands.w	r2, r6, #1
 803137a:	d001      	beq.n	8031380 <__ssvfiscanf_r+0xdd8>
 803137c:	6a3b      	ldr	r3, [r7, #32]
 803137e:	e78e      	b.n	803129e <__ssvfiscanf_r+0xcf6>
 8031380:	07b1      	lsls	r1, r6, #30
 8031382:	d5fb      	bpl.n	803137c <__ssvfiscanf_r+0xdd4>
 8031384:	4b15      	ldr	r3, [pc, #84]	@ (80313dc <__ssvfiscanf_r+0xe34>)
 8031386:	68f9      	ldr	r1, [r7, #12]
 8031388:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803138a:	4299      	cmp	r1, r3
 803138c:	697b      	ldr	r3, [r7, #20]
 803138e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8031392:	d106      	bne.n	80313a2 <__ssvfiscanf_r+0xdfa>
 8031394:	f004 fc34 	bl	8035c00 <_strtoull_r>
 8031398:	6a3b      	ldr	r3, [r7, #32]
 803139a:	681b      	ldr	r3, [r3, #0]
 803139c:	e9c3 0100 	strd	r0, r1, [r3]
 80313a0:	e7d8      	b.n	8031354 <__ssvfiscanf_r+0xdac>
 80313a2:	f004 fb81 	bl	8035aa8 <_strtoll_r>
 80313a6:	e7f7      	b.n	8031398 <__ssvfiscanf_r+0xdf0>
 80313a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80313ac:	6818      	ldr	r0, [r3, #0]
 80313ae:	f7fe f8ed 	bl	802f58c <free>
 80313b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80313b6:	3401      	adds	r4, #1
 80313b8:	601e      	str	r6, [r3, #0]
 80313ba:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80313be:	f8db 5000 	ldr.w	r5, [fp]
 80313c2:	42a3      	cmp	r3, r4
 80313c4:	dcf0      	bgt.n	80313a8 <__ssvfiscanf_r+0xe00>
 80313c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80313ca:	61fb      	str	r3, [r7, #28]
 80313cc:	f7ff ba46 	b.w	803085c <__ssvfiscanf_r+0x2b4>
 80313d0:	2400      	movs	r4, #0
 80313d2:	4626      	mov	r6, r4
 80313d4:	e7f1      	b.n	80313ba <__ssvfiscanf_r+0xe12>
 80313d6:	bf00      	nop
 80313d8:	0803ca74 	.word	0x0803ca74
 80313dc:	080355f9 	.word	0x080355f9

080313e0 <_svfprintf_r>:
 80313e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80313e4:	b0d3      	sub	sp, #332	@ 0x14c
 80313e6:	468b      	mov	fp, r1
 80313e8:	4691      	mov	r9, r2
 80313ea:	461e      	mov	r6, r3
 80313ec:	9003      	str	r0, [sp, #12]
 80313ee:	f7fd f80d 	bl	802e40c <_localeconv_r>
 80313f2:	6803      	ldr	r3, [r0, #0]
 80313f4:	9316      	str	r3, [sp, #88]	@ 0x58
 80313f6:	4618      	mov	r0, r3
 80313f8:	f7de ff52 	bl	80102a0 <strlen>
 80313fc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8031400:	900d      	str	r0, [sp, #52]	@ 0x34
 8031402:	061b      	lsls	r3, r3, #24
 8031404:	d515      	bpl.n	8031432 <_svfprintf_r+0x52>
 8031406:	f8db 3010 	ldr.w	r3, [fp, #16]
 803140a:	b993      	cbnz	r3, 8031432 <_svfprintf_r+0x52>
 803140c:	9803      	ldr	r0, [sp, #12]
 803140e:	2140      	movs	r1, #64	@ 0x40
 8031410:	f7fe f8c4 	bl	802f59c <_malloc_r>
 8031414:	f8cb 0000 	str.w	r0, [fp]
 8031418:	f8cb 0010 	str.w	r0, [fp, #16]
 803141c:	b930      	cbnz	r0, 803142c <_svfprintf_r+0x4c>
 803141e:	9a03      	ldr	r2, [sp, #12]
 8031420:	230c      	movs	r3, #12
 8031422:	6013      	str	r3, [r2, #0]
 8031424:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031428:	930f      	str	r3, [sp, #60]	@ 0x3c
 803142a:	e1f7      	b.n	803181c <_svfprintf_r+0x43c>
 803142c:	2340      	movs	r3, #64	@ 0x40
 803142e:	f8cb 3014 	str.w	r3, [fp, #20]
 8031432:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8031680 <_svfprintf_r+0x2a0>
 8031436:	2300      	movs	r3, #0
 8031438:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 803143c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8031440:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8031444:	ac29      	add	r4, sp, #164	@ 0xa4
 8031446:	9426      	str	r4, [sp, #152]	@ 0x98
 8031448:	9304      	str	r3, [sp, #16]
 803144a:	9309      	str	r3, [sp, #36]	@ 0x24
 803144c:	9312      	str	r3, [sp, #72]	@ 0x48
 803144e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8031450:	930f      	str	r3, [sp, #60]	@ 0x3c
 8031452:	464b      	mov	r3, r9
 8031454:	461d      	mov	r5, r3
 8031456:	f813 2b01 	ldrb.w	r2, [r3], #1
 803145a:	b10a      	cbz	r2, 8031460 <_svfprintf_r+0x80>
 803145c:	2a25      	cmp	r2, #37	@ 0x25
 803145e:	d1f9      	bne.n	8031454 <_svfprintf_r+0x74>
 8031460:	ebb5 0709 	subs.w	r7, r5, r9
 8031464:	d00d      	beq.n	8031482 <_svfprintf_r+0xa2>
 8031466:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031468:	443b      	add	r3, r7
 803146a:	9328      	str	r3, [sp, #160]	@ 0xa0
 803146c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803146e:	3301      	adds	r3, #1
 8031470:	2b07      	cmp	r3, #7
 8031472:	e9c4 9700 	strd	r9, r7, [r4]
 8031476:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031478:	dc75      	bgt.n	8031566 <_svfprintf_r+0x186>
 803147a:	3408      	adds	r4, #8
 803147c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803147e:	443b      	add	r3, r7
 8031480:	930f      	str	r3, [sp, #60]	@ 0x3c
 8031482:	782b      	ldrb	r3, [r5, #0]
 8031484:	2b00      	cmp	r3, #0
 8031486:	f001 8148 	beq.w	803271a <_svfprintf_r+0x133a>
 803148a:	2200      	movs	r2, #0
 803148c:	1c6b      	adds	r3, r5, #1
 803148e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8031492:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8031496:	920e      	str	r2, [sp, #56]	@ 0x38
 8031498:	4615      	mov	r5, r2
 803149a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803149e:	9206      	str	r2, [sp, #24]
 80314a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80314a2:	9b06      	ldr	r3, [sp, #24]
 80314a4:	3b20      	subs	r3, #32
 80314a6:	2b5a      	cmp	r3, #90	@ 0x5a
 80314a8:	f200 85a4 	bhi.w	8031ff4 <_svfprintf_r+0xc14>
 80314ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80314b0:	05a2009d 	.word	0x05a2009d
 80314b4:	00a505a2 	.word	0x00a505a2
 80314b8:	05a205a2 	.word	0x05a205a2
 80314bc:	008505a2 	.word	0x008505a2
 80314c0:	05a205a2 	.word	0x05a205a2
 80314c4:	00b200a8 	.word	0x00b200a8
 80314c8:	00af05a2 	.word	0x00af05a2
 80314cc:	05a200b4 	.word	0x05a200b4
 80314d0:	00d100ce 	.word	0x00d100ce
 80314d4:	00d100d1 	.word	0x00d100d1
 80314d8:	00d100d1 	.word	0x00d100d1
 80314dc:	00d100d1 	.word	0x00d100d1
 80314e0:	00d100d1 	.word	0x00d100d1
 80314e4:	05a205a2 	.word	0x05a205a2
 80314e8:	05a205a2 	.word	0x05a205a2
 80314ec:	05a205a2 	.word	0x05a205a2
 80314f0:	014705a2 	.word	0x014705a2
 80314f4:	010805a2 	.word	0x010805a2
 80314f8:	0147011b 	.word	0x0147011b
 80314fc:	01470147 	.word	0x01470147
 8031500:	05a205a2 	.word	0x05a205a2
 8031504:	05a205a2 	.word	0x05a205a2
 8031508:	05a200e2 	.word	0x05a200e2
 803150c:	049d05a2 	.word	0x049d05a2
 8031510:	05a205a2 	.word	0x05a205a2
 8031514:	04e705a2 	.word	0x04e705a2
 8031518:	050805a2 	.word	0x050805a2
 803151c:	05a205a2 	.word	0x05a205a2
 8031520:	05a2052a 	.word	0x05a2052a
 8031524:	05a205a2 	.word	0x05a205a2
 8031528:	05a205a2 	.word	0x05a205a2
 803152c:	05a205a2 	.word	0x05a205a2
 8031530:	014705a2 	.word	0x014705a2
 8031534:	010805a2 	.word	0x010805a2
 8031538:	0147011d 	.word	0x0147011d
 803153c:	01470147 	.word	0x01470147
 8031540:	011d00ee 	.word	0x011d00ee
 8031544:	05a20102 	.word	0x05a20102
 8031548:	05a200fb 	.word	0x05a200fb
 803154c:	049f047e 	.word	0x049f047e
 8031550:	010204d6 	.word	0x010204d6
 8031554:	04e705a2 	.word	0x04e705a2
 8031558:	050a009b 	.word	0x050a009b
 803155c:	05a205a2 	.word	0x05a205a2
 8031560:	05a20065 	.word	0x05a20065
 8031564:	009b      	.short	0x009b
 8031566:	9803      	ldr	r0, [sp, #12]
 8031568:	aa26      	add	r2, sp, #152	@ 0x98
 803156a:	4659      	mov	r1, fp
 803156c:	f7fe fac0 	bl	802faf0 <__ssprint_r>
 8031570:	2800      	cmp	r0, #0
 8031572:	f040 814e 	bne.w	8031812 <_svfprintf_r+0x432>
 8031576:	ac29      	add	r4, sp, #164	@ 0xa4
 8031578:	e780      	b.n	803147c <_svfprintf_r+0x9c>
 803157a:	4b43      	ldr	r3, [pc, #268]	@ (8031688 <_svfprintf_r+0x2a8>)
 803157c:	9319      	str	r3, [sp, #100]	@ 0x64
 803157e:	f015 0320 	ands.w	r3, r5, #32
 8031582:	f000 84c2 	beq.w	8031f0a <_svfprintf_r+0xb2a>
 8031586:	3607      	adds	r6, #7
 8031588:	f026 0307 	bic.w	r3, r6, #7
 803158c:	461a      	mov	r2, r3
 803158e:	685f      	ldr	r7, [r3, #4]
 8031590:	f852 6b08 	ldr.w	r6, [r2], #8
 8031594:	9207      	str	r2, [sp, #28]
 8031596:	07eb      	lsls	r3, r5, #31
 8031598:	d50a      	bpl.n	80315b0 <_svfprintf_r+0x1d0>
 803159a:	ea56 0307 	orrs.w	r3, r6, r7
 803159e:	d007      	beq.n	80315b0 <_svfprintf_r+0x1d0>
 80315a0:	2330      	movs	r3, #48	@ 0x30
 80315a2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 80315a6:	9b06      	ldr	r3, [sp, #24]
 80315a8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80315ac:	f045 0502 	orr.w	r5, r5, #2
 80315b0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80315b4:	2302      	movs	r3, #2
 80315b6:	f000 bc28 	b.w	8031e0a <_svfprintf_r+0xa2a>
 80315ba:	9803      	ldr	r0, [sp, #12]
 80315bc:	f7fc ff26 	bl	802e40c <_localeconv_r>
 80315c0:	6843      	ldr	r3, [r0, #4]
 80315c2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80315c4:	4618      	mov	r0, r3
 80315c6:	f7de fe6b 	bl	80102a0 <strlen>
 80315ca:	9012      	str	r0, [sp, #72]	@ 0x48
 80315cc:	9803      	ldr	r0, [sp, #12]
 80315ce:	f7fc ff1d 	bl	802e40c <_localeconv_r>
 80315d2:	6883      	ldr	r3, [r0, #8]
 80315d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80315d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80315d8:	b12b      	cbz	r3, 80315e6 <_svfprintf_r+0x206>
 80315da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80315dc:	b11b      	cbz	r3, 80315e6 <_svfprintf_r+0x206>
 80315de:	781b      	ldrb	r3, [r3, #0]
 80315e0:	b10b      	cbz	r3, 80315e6 <_svfprintf_r+0x206>
 80315e2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 80315e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80315e8:	e757      	b.n	803149a <_svfprintf_r+0xba>
 80315ea:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80315ee:	2b00      	cmp	r3, #0
 80315f0:	d1f9      	bne.n	80315e6 <_svfprintf_r+0x206>
 80315f2:	2320      	movs	r3, #32
 80315f4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80315f8:	e7f5      	b.n	80315e6 <_svfprintf_r+0x206>
 80315fa:	f045 0501 	orr.w	r5, r5, #1
 80315fe:	e7f2      	b.n	80315e6 <_svfprintf_r+0x206>
 8031600:	f856 3b04 	ldr.w	r3, [r6], #4
 8031604:	930e      	str	r3, [sp, #56]	@ 0x38
 8031606:	2b00      	cmp	r3, #0
 8031608:	daed      	bge.n	80315e6 <_svfprintf_r+0x206>
 803160a:	425b      	negs	r3, r3
 803160c:	930e      	str	r3, [sp, #56]	@ 0x38
 803160e:	f045 0504 	orr.w	r5, r5, #4
 8031612:	e7e8      	b.n	80315e6 <_svfprintf_r+0x206>
 8031614:	232b      	movs	r3, #43	@ 0x2b
 8031616:	e7ed      	b.n	80315f4 <_svfprintf_r+0x214>
 8031618:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803161a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803161e:	9206      	str	r2, [sp, #24]
 8031620:	2a2a      	cmp	r2, #42	@ 0x2a
 8031622:	d10f      	bne.n	8031644 <_svfprintf_r+0x264>
 8031624:	f856 2b04 	ldr.w	r2, [r6], #4
 8031628:	930c      	str	r3, [sp, #48]	@ 0x30
 803162a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 803162e:	e7da      	b.n	80315e6 <_svfprintf_r+0x206>
 8031630:	fb01 2808 	mla	r8, r1, r8, r2
 8031634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031638:	9206      	str	r2, [sp, #24]
 803163a:	9a06      	ldr	r2, [sp, #24]
 803163c:	3a30      	subs	r2, #48	@ 0x30
 803163e:	2a09      	cmp	r2, #9
 8031640:	d9f6      	bls.n	8031630 <_svfprintf_r+0x250>
 8031642:	e72d      	b.n	80314a0 <_svfprintf_r+0xc0>
 8031644:	f04f 0800 	mov.w	r8, #0
 8031648:	210a      	movs	r1, #10
 803164a:	e7f6      	b.n	803163a <_svfprintf_r+0x25a>
 803164c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8031650:	e7c9      	b.n	80315e6 <_svfprintf_r+0x206>
 8031652:	2200      	movs	r2, #0
 8031654:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8031656:	920e      	str	r2, [sp, #56]	@ 0x38
 8031658:	210a      	movs	r1, #10
 803165a:	9a06      	ldr	r2, [sp, #24]
 803165c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 803165e:	3a30      	subs	r2, #48	@ 0x30
 8031660:	fb01 2200 	mla	r2, r1, r0, r2
 8031664:	920e      	str	r2, [sp, #56]	@ 0x38
 8031666:	f813 2b01 	ldrb.w	r2, [r3], #1
 803166a:	9206      	str	r2, [sp, #24]
 803166c:	3a30      	subs	r2, #48	@ 0x30
 803166e:	2a09      	cmp	r2, #9
 8031670:	d9f3      	bls.n	803165a <_svfprintf_r+0x27a>
 8031672:	e715      	b.n	80314a0 <_svfprintf_r+0xc0>
 8031674:	f045 0508 	orr.w	r5, r5, #8
 8031678:	e7b5      	b.n	80315e6 <_svfprintf_r+0x206>
 803167a:	bf00      	nop
 803167c:	f3af 8000 	nop.w
	...
 8031688:	0803c52f 	.word	0x0803c52f
 803168c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803168e:	781b      	ldrb	r3, [r3, #0]
 8031690:	2b68      	cmp	r3, #104	@ 0x68
 8031692:	bf01      	itttt	eq
 8031694:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8031696:	3301      	addeq	r3, #1
 8031698:	930c      	streq	r3, [sp, #48]	@ 0x30
 803169a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 803169e:	bf18      	it	ne
 80316a0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 80316a4:	e79f      	b.n	80315e6 <_svfprintf_r+0x206>
 80316a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80316a8:	781b      	ldrb	r3, [r3, #0]
 80316aa:	2b6c      	cmp	r3, #108	@ 0x6c
 80316ac:	d105      	bne.n	80316ba <_svfprintf_r+0x2da>
 80316ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80316b0:	3301      	adds	r3, #1
 80316b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80316b4:	f045 0520 	orr.w	r5, r5, #32
 80316b8:	e795      	b.n	80315e6 <_svfprintf_r+0x206>
 80316ba:	f045 0510 	orr.w	r5, r5, #16
 80316be:	e792      	b.n	80315e6 <_svfprintf_r+0x206>
 80316c0:	4632      	mov	r2, r6
 80316c2:	f852 3b04 	ldr.w	r3, [r2], #4
 80316c6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80316ca:	2300      	movs	r3, #0
 80316cc:	9207      	str	r2, [sp, #28]
 80316ce:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80316d2:	469a      	mov	sl, r3
 80316d4:	f04f 0801 	mov.w	r8, #1
 80316d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80316da:	461f      	mov	r7, r3
 80316dc:	9308      	str	r3, [sp, #32]
 80316de:	461e      	mov	r6, r3
 80316e0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 80316e4:	e1d2      	b.n	8031a8c <_svfprintf_r+0x6ac>
 80316e6:	f045 0510 	orr.w	r5, r5, #16
 80316ea:	06af      	lsls	r7, r5, #26
 80316ec:	d512      	bpl.n	8031714 <_svfprintf_r+0x334>
 80316ee:	3607      	adds	r6, #7
 80316f0:	f026 0307 	bic.w	r3, r6, #7
 80316f4:	461a      	mov	r2, r3
 80316f6:	685f      	ldr	r7, [r3, #4]
 80316f8:	f852 6b08 	ldr.w	r6, [r2], #8
 80316fc:	9207      	str	r2, [sp, #28]
 80316fe:	2f00      	cmp	r7, #0
 8031700:	da06      	bge.n	8031710 <_svfprintf_r+0x330>
 8031702:	4276      	negs	r6, r6
 8031704:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8031708:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 803170c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031710:	2301      	movs	r3, #1
 8031712:	e37d      	b.n	8031e10 <_svfprintf_r+0xa30>
 8031714:	4633      	mov	r3, r6
 8031716:	06ee      	lsls	r6, r5, #27
 8031718:	f853 7b04 	ldr.w	r7, [r3], #4
 803171c:	9307      	str	r3, [sp, #28]
 803171e:	d502      	bpl.n	8031726 <_svfprintf_r+0x346>
 8031720:	463e      	mov	r6, r7
 8031722:	17ff      	asrs	r7, r7, #31
 8031724:	e7eb      	b.n	80316fe <_svfprintf_r+0x31e>
 8031726:	0668      	lsls	r0, r5, #25
 8031728:	d503      	bpl.n	8031732 <_svfprintf_r+0x352>
 803172a:	b23e      	sxth	r6, r7
 803172c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8031730:	e7e5      	b.n	80316fe <_svfprintf_r+0x31e>
 8031732:	05a9      	lsls	r1, r5, #22
 8031734:	d5f4      	bpl.n	8031720 <_svfprintf_r+0x340>
 8031736:	b27e      	sxtb	r6, r7
 8031738:	f347 17c0 	sbfx	r7, r7, #7, #1
 803173c:	e7df      	b.n	80316fe <_svfprintf_r+0x31e>
 803173e:	3607      	adds	r6, #7
 8031740:	f026 0307 	bic.w	r3, r6, #7
 8031744:	ecb3 7b02 	vldmia	r3!, {d7}
 8031748:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 803174c:	9307      	str	r3, [sp, #28]
 803174e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031750:	931a      	str	r3, [sp, #104]	@ 0x68
 8031752:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8031754:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8031758:	931b      	str	r3, [sp, #108]	@ 0x6c
 803175a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803175e:	4b81      	ldr	r3, [pc, #516]	@ (8031964 <_svfprintf_r+0x584>)
 8031760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8031764:	f7df f9fa 	bl	8010b5c <__aeabi_dcmpun>
 8031768:	bb10      	cbnz	r0, 80317b0 <_svfprintf_r+0x3d0>
 803176a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803176e:	4b7d      	ldr	r3, [pc, #500]	@ (8031964 <_svfprintf_r+0x584>)
 8031770:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8031774:	f7df f9d4 	bl	8010b20 <__aeabi_dcmple>
 8031778:	b9d0      	cbnz	r0, 80317b0 <_svfprintf_r+0x3d0>
 803177a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803177e:	2200      	movs	r2, #0
 8031780:	2300      	movs	r3, #0
 8031782:	f7df f9c3 	bl	8010b0c <__aeabi_dcmplt>
 8031786:	b110      	cbz	r0, 803178e <_svfprintf_r+0x3ae>
 8031788:	232d      	movs	r3, #45	@ 0x2d
 803178a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803178e:	4a76      	ldr	r2, [pc, #472]	@ (8031968 <_svfprintf_r+0x588>)
 8031790:	4b76      	ldr	r3, [pc, #472]	@ (803196c <_svfprintf_r+0x58c>)
 8031792:	9906      	ldr	r1, [sp, #24]
 8031794:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8031798:	2947      	cmp	r1, #71	@ 0x47
 803179a:	bfd4      	ite	le
 803179c:	4691      	movle	r9, r2
 803179e:	4699      	movgt	r9, r3
 80317a0:	f04f 0a00 	mov.w	sl, #0
 80317a4:	f04f 0803 	mov.w	r8, #3
 80317a8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 80317ac:	f000 bfec 	b.w	8032788 <_svfprintf_r+0x13a8>
 80317b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80317b4:	4610      	mov	r0, r2
 80317b6:	4619      	mov	r1, r3
 80317b8:	f7df f9d0 	bl	8010b5c <__aeabi_dcmpun>
 80317bc:	4682      	mov	sl, r0
 80317be:	b140      	cbz	r0, 80317d2 <_svfprintf_r+0x3f2>
 80317c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80317c2:	4a6b      	ldr	r2, [pc, #428]	@ (8031970 <_svfprintf_r+0x590>)
 80317c4:	2b00      	cmp	r3, #0
 80317c6:	bfbc      	itt	lt
 80317c8:	232d      	movlt	r3, #45	@ 0x2d
 80317ca:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80317ce:	4b69      	ldr	r3, [pc, #420]	@ (8031974 <_svfprintf_r+0x594>)
 80317d0:	e7df      	b.n	8031792 <_svfprintf_r+0x3b2>
 80317d2:	9b06      	ldr	r3, [sp, #24]
 80317d4:	2b61      	cmp	r3, #97	@ 0x61
 80317d6:	d025      	beq.n	8031824 <_svfprintf_r+0x444>
 80317d8:	2b41      	cmp	r3, #65	@ 0x41
 80317da:	d125      	bne.n	8031828 <_svfprintf_r+0x448>
 80317dc:	2358      	movs	r3, #88	@ 0x58
 80317de:	2230      	movs	r2, #48	@ 0x30
 80317e0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 80317e4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 80317e8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80317ec:	f045 0502 	orr.w	r5, r5, #2
 80317f0:	f340 80a5 	ble.w	803193e <_svfprintf_r+0x55e>
 80317f4:	9803      	ldr	r0, [sp, #12]
 80317f6:	f108 0101 	add.w	r1, r8, #1
 80317fa:	f7fd fecf 	bl	802f59c <_malloc_r>
 80317fe:	4681      	mov	r9, r0
 8031800:	2800      	cmp	r0, #0
 8031802:	f040 80a1 	bne.w	8031948 <_svfprintf_r+0x568>
 8031806:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803180a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803180e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8031812:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8031816:	065b      	lsls	r3, r3, #25
 8031818:	f53f ae04 	bmi.w	8031424 <_svfprintf_r+0x44>
 803181c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803181e:	b053      	add	sp, #332	@ 0x14c
 8031820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031824:	2378      	movs	r3, #120	@ 0x78
 8031826:	e7da      	b.n	80317de <_svfprintf_r+0x3fe>
 8031828:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 803182c:	f000 808e 	beq.w	803194c <_svfprintf_r+0x56c>
 8031830:	9b06      	ldr	r3, [sp, #24]
 8031832:	f023 0320 	bic.w	r3, r3, #32
 8031836:	2b47      	cmp	r3, #71	@ 0x47
 8031838:	d105      	bne.n	8031846 <_svfprintf_r+0x466>
 803183a:	f1b8 0f00 	cmp.w	r8, #0
 803183e:	d102      	bne.n	8031846 <_svfprintf_r+0x466>
 8031840:	46c2      	mov	sl, r8
 8031842:	f04f 0801 	mov.w	r8, #1
 8031846:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 803184a:	9311      	str	r3, [sp, #68]	@ 0x44
 803184c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803184e:	2b00      	cmp	r3, #0
 8031850:	da7f      	bge.n	8031952 <_svfprintf_r+0x572>
 8031852:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031854:	9314      	str	r3, [sp, #80]	@ 0x50
 8031856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8031858:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 803185c:	9315      	str	r3, [sp, #84]	@ 0x54
 803185e:	232d      	movs	r3, #45	@ 0x2d
 8031860:	931c      	str	r3, [sp, #112]	@ 0x70
 8031862:	9b06      	ldr	r3, [sp, #24]
 8031864:	f023 0320 	bic.w	r3, r3, #32
 8031868:	2b41      	cmp	r3, #65	@ 0x41
 803186a:	9308      	str	r3, [sp, #32]
 803186c:	f040 81e6 	bne.w	8031c3c <_svfprintf_r+0x85c>
 8031870:	a820      	add	r0, sp, #128	@ 0x80
 8031872:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8031876:	f7fc fe9b 	bl	802e5b0 <frexp>
 803187a:	2200      	movs	r2, #0
 803187c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8031880:	ec51 0b10 	vmov	r0, r1, d0
 8031884:	f7de fed0 	bl	8010628 <__aeabi_dmul>
 8031888:	4602      	mov	r2, r0
 803188a:	460b      	mov	r3, r1
 803188c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8031890:	2200      	movs	r2, #0
 8031892:	2300      	movs	r3, #0
 8031894:	f7df f930 	bl	8010af8 <__aeabi_dcmpeq>
 8031898:	b108      	cbz	r0, 803189e <_svfprintf_r+0x4be>
 803189a:	2301      	movs	r3, #1
 803189c:	9320      	str	r3, [sp, #128]	@ 0x80
 803189e:	4a36      	ldr	r2, [pc, #216]	@ (8031978 <_svfprintf_r+0x598>)
 80318a0:	4b36      	ldr	r3, [pc, #216]	@ (803197c <_svfprintf_r+0x59c>)
 80318a2:	9906      	ldr	r1, [sp, #24]
 80318a4:	2961      	cmp	r1, #97	@ 0x61
 80318a6:	bf18      	it	ne
 80318a8:	461a      	movne	r2, r3
 80318aa:	9210      	str	r2, [sp, #64]	@ 0x40
 80318ac:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 80318b0:	464e      	mov	r6, r9
 80318b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80318b6:	4b32      	ldr	r3, [pc, #200]	@ (8031980 <_svfprintf_r+0x5a0>)
 80318b8:	2200      	movs	r2, #0
 80318ba:	f7de feb5 	bl	8010628 <__aeabi_dmul>
 80318be:	4602      	mov	r2, r0
 80318c0:	460b      	mov	r3, r1
 80318c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80318c6:	f7df f95f 	bl	8010b88 <__aeabi_d2iz>
 80318ca:	9013      	str	r0, [sp, #76]	@ 0x4c
 80318cc:	f7de fe42 	bl	8010554 <__aeabi_i2d>
 80318d0:	4602      	mov	r2, r0
 80318d2:	460b      	mov	r3, r1
 80318d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80318d8:	f7de fcee 	bl	80102b8 <__aeabi_dsub>
 80318dc:	4602      	mov	r2, r0
 80318de:	460b      	mov	r3, r1
 80318e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80318e4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80318e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80318e8:	5c9b      	ldrb	r3, [r3, r2]
 80318ea:	f806 3b01 	strb.w	r3, [r6], #1
 80318ee:	1c7a      	adds	r2, r7, #1
 80318f0:	d006      	beq.n	8031900 <_svfprintf_r+0x520>
 80318f2:	1e7b      	subs	r3, r7, #1
 80318f4:	931d      	str	r3, [sp, #116]	@ 0x74
 80318f6:	2200      	movs	r2, #0
 80318f8:	2300      	movs	r3, #0
 80318fa:	f7df f8fd 	bl	8010af8 <__aeabi_dcmpeq>
 80318fe:	b370      	cbz	r0, 803195e <_svfprintf_r+0x57e>
 8031900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031904:	4b1f      	ldr	r3, [pc, #124]	@ (8031984 <_svfprintf_r+0x5a4>)
 8031906:	2200      	movs	r2, #0
 8031908:	f7df f91e 	bl	8010b48 <__aeabi_dcmpgt>
 803190c:	2800      	cmp	r0, #0
 803190e:	d13b      	bne.n	8031988 <_svfprintf_r+0x5a8>
 8031910:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031914:	4b1b      	ldr	r3, [pc, #108]	@ (8031984 <_svfprintf_r+0x5a4>)
 8031916:	2200      	movs	r2, #0
 8031918:	f7df f8ee 	bl	8010af8 <__aeabi_dcmpeq>
 803191c:	b110      	cbz	r0, 8031924 <_svfprintf_r+0x544>
 803191e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031920:	07db      	lsls	r3, r3, #31
 8031922:	d431      	bmi.n	8031988 <_svfprintf_r+0x5a8>
 8031924:	4633      	mov	r3, r6
 8031926:	19f1      	adds	r1, r6, r7
 8031928:	2030      	movs	r0, #48	@ 0x30
 803192a:	1aca      	subs	r2, r1, r3
 803192c:	2a00      	cmp	r2, #0
 803192e:	f280 8182 	bge.w	8031c36 <_svfprintf_r+0x856>
 8031932:	1c7b      	adds	r3, r7, #1
 8031934:	3701      	adds	r7, #1
 8031936:	bfb8      	it	lt
 8031938:	2300      	movlt	r3, #0
 803193a:	441e      	add	r6, r3
 803193c:	e038      	b.n	80319b0 <_svfprintf_r+0x5d0>
 803193e:	f04f 0a00 	mov.w	sl, #0
 8031942:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8031946:	e77e      	b.n	8031846 <_svfprintf_r+0x466>
 8031948:	4682      	mov	sl, r0
 803194a:	e77c      	b.n	8031846 <_svfprintf_r+0x466>
 803194c:	f04f 0806 	mov.w	r8, #6
 8031950:	e779      	b.n	8031846 <_svfprintf_r+0x466>
 8031952:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8031956:	2300      	movs	r3, #0
 8031958:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 803195c:	e780      	b.n	8031860 <_svfprintf_r+0x480>
 803195e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8031960:	e7a7      	b.n	80318b2 <_svfprintf_r+0x4d2>
 8031962:	bf00      	nop
 8031964:	7fefffff 	.word	0x7fefffff
 8031968:	0803c51f 	.word	0x0803c51f
 803196c:	0803c523 	.word	0x0803c523
 8031970:	0803c527 	.word	0x0803c527
 8031974:	0803c52b 	.word	0x0803c52b
 8031978:	0803c52f 	.word	0x0803c52f
 803197c:	0803c540 	.word	0x0803c540
 8031980:	40300000 	.word	0x40300000
 8031984:	3fe00000 	.word	0x3fe00000
 8031988:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803198a:	9624      	str	r6, [sp, #144]	@ 0x90
 803198c:	7bd9      	ldrb	r1, [r3, #15]
 803198e:	2030      	movs	r0, #48	@ 0x30
 8031990:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8031992:	1e53      	subs	r3, r2, #1
 8031994:	9324      	str	r3, [sp, #144]	@ 0x90
 8031996:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 803199a:	428b      	cmp	r3, r1
 803199c:	f000 8148 	beq.w	8031c30 <_svfprintf_r+0x850>
 80319a0:	2b39      	cmp	r3, #57	@ 0x39
 80319a2:	bf0b      	itete	eq
 80319a4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 80319a6:	3301      	addne	r3, #1
 80319a8:	7a9b      	ldrbeq	r3, [r3, #10]
 80319aa:	b2db      	uxtbne	r3, r3
 80319ac:	f802 3c01 	strb.w	r3, [r2, #-1]
 80319b0:	eba6 0309 	sub.w	r3, r6, r9
 80319b4:	9304      	str	r3, [sp, #16]
 80319b6:	9b08      	ldr	r3, [sp, #32]
 80319b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80319ba:	2b47      	cmp	r3, #71	@ 0x47
 80319bc:	f040 8187 	bne.w	8031cce <_svfprintf_r+0x8ee>
 80319c0:	1cf1      	adds	r1, r6, #3
 80319c2:	db02      	blt.n	80319ca <_svfprintf_r+0x5ea>
 80319c4:	4546      	cmp	r6, r8
 80319c6:	f340 81a5 	ble.w	8031d14 <_svfprintf_r+0x934>
 80319ca:	9b06      	ldr	r3, [sp, #24]
 80319cc:	3b02      	subs	r3, #2
 80319ce:	9306      	str	r3, [sp, #24]
 80319d0:	9906      	ldr	r1, [sp, #24]
 80319d2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80319d6:	f021 0120 	bic.w	r1, r1, #32
 80319da:	2941      	cmp	r1, #65	@ 0x41
 80319dc:	bf08      	it	eq
 80319de:	320f      	addeq	r2, #15
 80319e0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 80319e4:	bf06      	itte	eq
 80319e6:	b2d2      	uxtbeq	r2, r2
 80319e8:	2101      	moveq	r1, #1
 80319ea:	2100      	movne	r1, #0
 80319ec:	2b00      	cmp	r3, #0
 80319ee:	9320      	str	r3, [sp, #128]	@ 0x80
 80319f0:	bfb8      	it	lt
 80319f2:	f1c6 0301 	rsblt	r3, r6, #1
 80319f6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 80319fa:	bfb4      	ite	lt
 80319fc:	222d      	movlt	r2, #45	@ 0x2d
 80319fe:	222b      	movge	r2, #43	@ 0x2b
 8031a00:	2b09      	cmp	r3, #9
 8031a02:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8031a06:	f340 8178 	ble.w	8031cfa <_svfprintf_r+0x91a>
 8031a0a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8031a0e:	270a      	movs	r7, #10
 8031a10:	4602      	mov	r2, r0
 8031a12:	fbb3 f6f7 	udiv	r6, r3, r7
 8031a16:	fb07 3116 	mls	r1, r7, r6, r3
 8031a1a:	3130      	adds	r1, #48	@ 0x30
 8031a1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8031a20:	4619      	mov	r1, r3
 8031a22:	2963      	cmp	r1, #99	@ 0x63
 8031a24:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8031a28:	4633      	mov	r3, r6
 8031a2a:	dcf1      	bgt.n	8031a10 <_svfprintf_r+0x630>
 8031a2c:	3330      	adds	r3, #48	@ 0x30
 8031a2e:	1e91      	subs	r1, r2, #2
 8031a30:	f800 3c01 	strb.w	r3, [r0, #-1]
 8031a34:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8031a38:	460b      	mov	r3, r1
 8031a3a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8031a3e:	4283      	cmp	r3, r0
 8031a40:	f0c0 8156 	bcc.w	8031cf0 <_svfprintf_r+0x910>
 8031a44:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8031a48:	1a9b      	subs	r3, r3, r2
 8031a4a:	4281      	cmp	r1, r0
 8031a4c:	bf88      	it	hi
 8031a4e:	2300      	movhi	r3, #0
 8031a50:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8031a54:	441a      	add	r2, r3
 8031a56:	ab22      	add	r3, sp, #136	@ 0x88
 8031a58:	1ad3      	subs	r3, r2, r3
 8031a5a:	9a04      	ldr	r2, [sp, #16]
 8031a5c:	9318      	str	r3, [sp, #96]	@ 0x60
 8031a5e:	2a01      	cmp	r2, #1
 8031a60:	eb03 0802 	add.w	r8, r3, r2
 8031a64:	dc01      	bgt.n	8031a6a <_svfprintf_r+0x68a>
 8031a66:	07ea      	lsls	r2, r5, #31
 8031a68:	d501      	bpl.n	8031a6e <_svfprintf_r+0x68e>
 8031a6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031a6c:	4498      	add	r8, r3
 8031a6e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8031a72:	2700      	movs	r7, #0
 8031a74:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8031a78:	9311      	str	r3, [sp, #68]	@ 0x44
 8031a7a:	9708      	str	r7, [sp, #32]
 8031a7c:	463e      	mov	r6, r7
 8031a7e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8031a80:	2b00      	cmp	r3, #0
 8031a82:	f040 818f 	bne.w	8031da4 <_svfprintf_r+0x9c4>
 8031a86:	2300      	movs	r3, #0
 8031a88:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8031a8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8031a8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031a8e:	4543      	cmp	r3, r8
 8031a90:	bfb8      	it	lt
 8031a92:	4643      	movlt	r3, r8
 8031a94:	9311      	str	r3, [sp, #68]	@ 0x44
 8031a96:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8031a9a:	b113      	cbz	r3, 8031aa2 <_svfprintf_r+0x6c2>
 8031a9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8031a9e:	3301      	adds	r3, #1
 8031aa0:	9311      	str	r3, [sp, #68]	@ 0x44
 8031aa2:	f015 0302 	ands.w	r3, r5, #2
 8031aa6:	931c      	str	r3, [sp, #112]	@ 0x70
 8031aa8:	bf1e      	ittt	ne
 8031aaa:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8031aac:	3302      	addne	r3, #2
 8031aae:	9311      	strne	r3, [sp, #68]	@ 0x44
 8031ab0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8031ab4:	931d      	str	r3, [sp, #116]	@ 0x74
 8031ab6:	d122      	bne.n	8031afe <_svfprintf_r+0x71e>
 8031ab8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031aba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8031abc:	1a9b      	subs	r3, r3, r2
 8031abe:	2b00      	cmp	r3, #0
 8031ac0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031ac2:	dd1c      	ble.n	8031afe <_svfprintf_r+0x71e>
 8031ac4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8031ac6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031aca:	2810      	cmp	r0, #16
 8031acc:	489e      	ldr	r0, [pc, #632]	@ (8031d48 <_svfprintf_r+0x968>)
 8031ace:	6020      	str	r0, [r4, #0]
 8031ad0:	f102 0201 	add.w	r2, r2, #1
 8031ad4:	f104 0108 	add.w	r1, r4, #8
 8031ad8:	f300 8298 	bgt.w	803200c <_svfprintf_r+0xc2c>
 8031adc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8031ade:	6060      	str	r0, [r4, #4]
 8031ae0:	4403      	add	r3, r0
 8031ae2:	2a07      	cmp	r2, #7
 8031ae4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031ae8:	f340 82a5 	ble.w	8032036 <_svfprintf_r+0xc56>
 8031aec:	9803      	ldr	r0, [sp, #12]
 8031aee:	aa26      	add	r2, sp, #152	@ 0x98
 8031af0:	4659      	mov	r1, fp
 8031af2:	f7fd fffd 	bl	802faf0 <__ssprint_r>
 8031af6:	2800      	cmp	r0, #0
 8031af8:	f040 85ed 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8031afc:	ac29      	add	r4, sp, #164	@ 0xa4
 8031afe:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8031b02:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031b04:	b16a      	cbz	r2, 8031b22 <_svfprintf_r+0x742>
 8031b06:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8031b0a:	6022      	str	r2, [r4, #0]
 8031b0c:	2201      	movs	r2, #1
 8031b0e:	4413      	add	r3, r2
 8031b10:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031b12:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031b14:	6062      	str	r2, [r4, #4]
 8031b16:	4413      	add	r3, r2
 8031b18:	2b07      	cmp	r3, #7
 8031b1a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031b1c:	f300 828d 	bgt.w	803203a <_svfprintf_r+0xc5a>
 8031b20:	3408      	adds	r4, #8
 8031b22:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8031b24:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031b26:	b162      	cbz	r2, 8031b42 <_svfprintf_r+0x762>
 8031b28:	aa1f      	add	r2, sp, #124	@ 0x7c
 8031b2a:	6022      	str	r2, [r4, #0]
 8031b2c:	2202      	movs	r2, #2
 8031b2e:	4413      	add	r3, r2
 8031b30:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031b32:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031b34:	6062      	str	r2, [r4, #4]
 8031b36:	3301      	adds	r3, #1
 8031b38:	2b07      	cmp	r3, #7
 8031b3a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031b3c:	f300 8287 	bgt.w	803204e <_svfprintf_r+0xc6e>
 8031b40:	3408      	adds	r4, #8
 8031b42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8031b44:	2b80      	cmp	r3, #128	@ 0x80
 8031b46:	d122      	bne.n	8031b8e <_svfprintf_r+0x7ae>
 8031b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031b4a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8031b4c:	1a9b      	subs	r3, r3, r2
 8031b4e:	2b00      	cmp	r3, #0
 8031b50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031b52:	dd1c      	ble.n	8031b8e <_svfprintf_r+0x7ae>
 8031b54:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8031b56:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031b5a:	2810      	cmp	r0, #16
 8031b5c:	487b      	ldr	r0, [pc, #492]	@ (8031d4c <_svfprintf_r+0x96c>)
 8031b5e:	6020      	str	r0, [r4, #0]
 8031b60:	f102 0201 	add.w	r2, r2, #1
 8031b64:	f104 0108 	add.w	r1, r4, #8
 8031b68:	f300 827b 	bgt.w	8032062 <_svfprintf_r+0xc82>
 8031b6c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8031b6e:	6060      	str	r0, [r4, #4]
 8031b70:	4403      	add	r3, r0
 8031b72:	2a07      	cmp	r2, #7
 8031b74:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031b78:	f340 8288 	ble.w	803208c <_svfprintf_r+0xcac>
 8031b7c:	9803      	ldr	r0, [sp, #12]
 8031b7e:	aa26      	add	r2, sp, #152	@ 0x98
 8031b80:	4659      	mov	r1, fp
 8031b82:	f7fd ffb5 	bl	802faf0 <__ssprint_r>
 8031b86:	2800      	cmp	r0, #0
 8031b88:	f040 85a5 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8031b8c:	ac29      	add	r4, sp, #164	@ 0xa4
 8031b8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031b90:	eba3 0308 	sub.w	r3, r3, r8
 8031b94:	2b00      	cmp	r3, #0
 8031b96:	9310      	str	r3, [sp, #64]	@ 0x40
 8031b98:	dd1c      	ble.n	8031bd4 <_svfprintf_r+0x7f4>
 8031b9a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8031b9c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031ba0:	2810      	cmp	r0, #16
 8031ba2:	486a      	ldr	r0, [pc, #424]	@ (8031d4c <_svfprintf_r+0x96c>)
 8031ba4:	6020      	str	r0, [r4, #0]
 8031ba6:	f102 0201 	add.w	r2, r2, #1
 8031baa:	f104 0108 	add.w	r1, r4, #8
 8031bae:	f300 826f 	bgt.w	8032090 <_svfprintf_r+0xcb0>
 8031bb2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8031bb4:	6060      	str	r0, [r4, #4]
 8031bb6:	4403      	add	r3, r0
 8031bb8:	2a07      	cmp	r2, #7
 8031bba:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031bbe:	f340 827c 	ble.w	80320ba <_svfprintf_r+0xcda>
 8031bc2:	9803      	ldr	r0, [sp, #12]
 8031bc4:	aa26      	add	r2, sp, #152	@ 0x98
 8031bc6:	4659      	mov	r1, fp
 8031bc8:	f7fd ff92 	bl	802faf0 <__ssprint_r>
 8031bcc:	2800      	cmp	r0, #0
 8031bce:	f040 8582 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8031bd2:	ac29      	add	r4, sp, #164	@ 0xa4
 8031bd4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031bd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8031bd8:	05ea      	lsls	r2, r5, #23
 8031bda:	f100 8275 	bmi.w	80320c8 <_svfprintf_r+0xce8>
 8031bde:	4443      	add	r3, r8
 8031be0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031be2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031be4:	3301      	adds	r3, #1
 8031be6:	2b07      	cmp	r3, #7
 8031be8:	e9c4 9800 	strd	r9, r8, [r4]
 8031bec:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031bee:	f300 82b1 	bgt.w	8032154 <_svfprintf_r+0xd74>
 8031bf2:	3408      	adds	r4, #8
 8031bf4:	076a      	lsls	r2, r5, #29
 8031bf6:	f100 8550 	bmi.w	803269a <_svfprintf_r+0x12ba>
 8031bfa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8031bfe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8031c00:	428a      	cmp	r2, r1
 8031c02:	bfac      	ite	ge
 8031c04:	189b      	addge	r3, r3, r2
 8031c06:	185b      	addlt	r3, r3, r1
 8031c08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8031c0a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031c0c:	b13b      	cbz	r3, 8031c1e <_svfprintf_r+0x83e>
 8031c0e:	9803      	ldr	r0, [sp, #12]
 8031c10:	aa26      	add	r2, sp, #152	@ 0x98
 8031c12:	4659      	mov	r1, fp
 8031c14:	f7fd ff6c 	bl	802faf0 <__ssprint_r>
 8031c18:	2800      	cmp	r0, #0
 8031c1a:	f040 855c 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8031c1e:	2300      	movs	r3, #0
 8031c20:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031c22:	f1ba 0f00 	cmp.w	sl, #0
 8031c26:	f040 8572 	bne.w	803270e <_svfprintf_r+0x132e>
 8031c2a:	9e07      	ldr	r6, [sp, #28]
 8031c2c:	ac29      	add	r4, sp, #164	@ 0xa4
 8031c2e:	e0c6      	b.n	8031dbe <_svfprintf_r+0x9de>
 8031c30:	f802 0c01 	strb.w	r0, [r2, #-1]
 8031c34:	e6ac      	b.n	8031990 <_svfprintf_r+0x5b0>
 8031c36:	f803 0b01 	strb.w	r0, [r3], #1
 8031c3a:	e676      	b.n	803192a <_svfprintf_r+0x54a>
 8031c3c:	9b08      	ldr	r3, [sp, #32]
 8031c3e:	2b46      	cmp	r3, #70	@ 0x46
 8031c40:	d005      	beq.n	8031c4e <_svfprintf_r+0x86e>
 8031c42:	2b45      	cmp	r3, #69	@ 0x45
 8031c44:	d11a      	bne.n	8031c7c <_svfprintf_r+0x89c>
 8031c46:	f108 0601 	add.w	r6, r8, #1
 8031c4a:	2102      	movs	r1, #2
 8031c4c:	e001      	b.n	8031c52 <_svfprintf_r+0x872>
 8031c4e:	4646      	mov	r6, r8
 8031c50:	2103      	movs	r1, #3
 8031c52:	ab24      	add	r3, sp, #144	@ 0x90
 8031c54:	9301      	str	r3, [sp, #4]
 8031c56:	ab21      	add	r3, sp, #132	@ 0x84
 8031c58:	9300      	str	r3, [sp, #0]
 8031c5a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8031c5e:	ab20      	add	r3, sp, #128	@ 0x80
 8031c60:	9803      	ldr	r0, [sp, #12]
 8031c62:	4632      	mov	r2, r6
 8031c64:	f7fc fd80 	bl	802e768 <_dtoa_r>
 8031c68:	9b08      	ldr	r3, [sp, #32]
 8031c6a:	2b47      	cmp	r3, #71	@ 0x47
 8031c6c:	4681      	mov	r9, r0
 8031c6e:	d119      	bne.n	8031ca4 <_svfprintf_r+0x8c4>
 8031c70:	07e8      	lsls	r0, r5, #31
 8031c72:	d405      	bmi.n	8031c80 <_svfprintf_r+0x8a0>
 8031c74:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031c76:	eba3 0309 	sub.w	r3, r3, r9
 8031c7a:	e69b      	b.n	80319b4 <_svfprintf_r+0x5d4>
 8031c7c:	4646      	mov	r6, r8
 8031c7e:	e7e4      	b.n	8031c4a <_svfprintf_r+0x86a>
 8031c80:	eb09 0706 	add.w	r7, r9, r6
 8031c84:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8031c88:	2200      	movs	r2, #0
 8031c8a:	2300      	movs	r3, #0
 8031c8c:	f7de ff34 	bl	8010af8 <__aeabi_dcmpeq>
 8031c90:	b100      	cbz	r0, 8031c94 <_svfprintf_r+0x8b4>
 8031c92:	9724      	str	r7, [sp, #144]	@ 0x90
 8031c94:	2230      	movs	r2, #48	@ 0x30
 8031c96:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031c98:	429f      	cmp	r7, r3
 8031c9a:	d9eb      	bls.n	8031c74 <_svfprintf_r+0x894>
 8031c9c:	1c59      	adds	r1, r3, #1
 8031c9e:	9124      	str	r1, [sp, #144]	@ 0x90
 8031ca0:	701a      	strb	r2, [r3, #0]
 8031ca2:	e7f8      	b.n	8031c96 <_svfprintf_r+0x8b6>
 8031ca4:	9b08      	ldr	r3, [sp, #32]
 8031ca6:	2b46      	cmp	r3, #70	@ 0x46
 8031ca8:	eb00 0706 	add.w	r7, r0, r6
 8031cac:	d1ea      	bne.n	8031c84 <_svfprintf_r+0x8a4>
 8031cae:	7803      	ldrb	r3, [r0, #0]
 8031cb0:	2b30      	cmp	r3, #48	@ 0x30
 8031cb2:	d109      	bne.n	8031cc8 <_svfprintf_r+0x8e8>
 8031cb4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8031cb8:	2200      	movs	r2, #0
 8031cba:	2300      	movs	r3, #0
 8031cbc:	f7de ff1c 	bl	8010af8 <__aeabi_dcmpeq>
 8031cc0:	b910      	cbnz	r0, 8031cc8 <_svfprintf_r+0x8e8>
 8031cc2:	f1c6 0601 	rsb	r6, r6, #1
 8031cc6:	9620      	str	r6, [sp, #128]	@ 0x80
 8031cc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031cca:	441f      	add	r7, r3
 8031ccc:	e7da      	b.n	8031c84 <_svfprintf_r+0x8a4>
 8031cce:	9b08      	ldr	r3, [sp, #32]
 8031cd0:	2b46      	cmp	r3, #70	@ 0x46
 8031cd2:	f47f ae7d 	bne.w	80319d0 <_svfprintf_r+0x5f0>
 8031cd6:	f005 0301 	and.w	r3, r5, #1
 8031cda:	2e00      	cmp	r6, #0
 8031cdc:	ea43 0308 	orr.w	r3, r3, r8
 8031ce0:	dd25      	ble.n	8031d2e <_svfprintf_r+0x94e>
 8031ce2:	b37b      	cbz	r3, 8031d44 <_svfprintf_r+0x964>
 8031ce4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031ce6:	18f3      	adds	r3, r6, r3
 8031ce8:	4498      	add	r8, r3
 8031cea:	2366      	movs	r3, #102	@ 0x66
 8031cec:	9306      	str	r3, [sp, #24]
 8031cee:	e033      	b.n	8031d58 <_svfprintf_r+0x978>
 8031cf0:	f813 7b01 	ldrb.w	r7, [r3], #1
 8031cf4:	f806 7f01 	strb.w	r7, [r6, #1]!
 8031cf8:	e6a1      	b.n	8031a3e <_svfprintf_r+0x65e>
 8031cfa:	b941      	cbnz	r1, 8031d0e <_svfprintf_r+0x92e>
 8031cfc:	2230      	movs	r2, #48	@ 0x30
 8031cfe:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8031d02:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8031d06:	3330      	adds	r3, #48	@ 0x30
 8031d08:	f802 3b01 	strb.w	r3, [r2], #1
 8031d0c:	e6a3      	b.n	8031a56 <_svfprintf_r+0x676>
 8031d0e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8031d12:	e7f8      	b.n	8031d06 <_svfprintf_r+0x926>
 8031d14:	9b04      	ldr	r3, [sp, #16]
 8031d16:	429e      	cmp	r6, r3
 8031d18:	da0d      	bge.n	8031d36 <_svfprintf_r+0x956>
 8031d1a:	9b04      	ldr	r3, [sp, #16]
 8031d1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031d1e:	2e00      	cmp	r6, #0
 8031d20:	eb03 0802 	add.w	r8, r3, r2
 8031d24:	dc0c      	bgt.n	8031d40 <_svfprintf_r+0x960>
 8031d26:	f1c6 0301 	rsb	r3, r6, #1
 8031d2a:	4498      	add	r8, r3
 8031d2c:	e008      	b.n	8031d40 <_svfprintf_r+0x960>
 8031d2e:	b17b      	cbz	r3, 8031d50 <_svfprintf_r+0x970>
 8031d30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031d32:	3301      	adds	r3, #1
 8031d34:	e7d8      	b.n	8031ce8 <_svfprintf_r+0x908>
 8031d36:	07eb      	lsls	r3, r5, #31
 8031d38:	d521      	bpl.n	8031d7e <_svfprintf_r+0x99e>
 8031d3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031d3c:	eb06 0803 	add.w	r8, r6, r3
 8031d40:	2367      	movs	r3, #103	@ 0x67
 8031d42:	e7d3      	b.n	8031cec <_svfprintf_r+0x90c>
 8031d44:	46b0      	mov	r8, r6
 8031d46:	e7d0      	b.n	8031cea <_svfprintf_r+0x90a>
 8031d48:	0803caa6 	.word	0x0803caa6
 8031d4c:	0803ca96 	.word	0x0803ca96
 8031d50:	2366      	movs	r3, #102	@ 0x66
 8031d52:	9306      	str	r3, [sp, #24]
 8031d54:	f04f 0801 	mov.w	r8, #1
 8031d58:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8031d5c:	9308      	str	r3, [sp, #32]
 8031d5e:	d01f      	beq.n	8031da0 <_svfprintf_r+0x9c0>
 8031d60:	2700      	movs	r7, #0
 8031d62:	2e00      	cmp	r6, #0
 8031d64:	9708      	str	r7, [sp, #32]
 8031d66:	f77f ae8a 	ble.w	8031a7e <_svfprintf_r+0x69e>
 8031d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031d6c:	781b      	ldrb	r3, [r3, #0]
 8031d6e:	2bff      	cmp	r3, #255	@ 0xff
 8031d70:	d107      	bne.n	8031d82 <_svfprintf_r+0x9a2>
 8031d72:	9b08      	ldr	r3, [sp, #32]
 8031d74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8031d76:	443b      	add	r3, r7
 8031d78:	fb02 8803 	mla	r8, r2, r3, r8
 8031d7c:	e67f      	b.n	8031a7e <_svfprintf_r+0x69e>
 8031d7e:	46b0      	mov	r8, r6
 8031d80:	e7de      	b.n	8031d40 <_svfprintf_r+0x960>
 8031d82:	42b3      	cmp	r3, r6
 8031d84:	daf5      	bge.n	8031d72 <_svfprintf_r+0x992>
 8031d86:	1af6      	subs	r6, r6, r3
 8031d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031d8a:	785b      	ldrb	r3, [r3, #1]
 8031d8c:	b133      	cbz	r3, 8031d9c <_svfprintf_r+0x9bc>
 8031d8e:	9b08      	ldr	r3, [sp, #32]
 8031d90:	3301      	adds	r3, #1
 8031d92:	9308      	str	r3, [sp, #32]
 8031d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031d96:	3301      	adds	r3, #1
 8031d98:	9309      	str	r3, [sp, #36]	@ 0x24
 8031d9a:	e7e6      	b.n	8031d6a <_svfprintf_r+0x98a>
 8031d9c:	3701      	adds	r7, #1
 8031d9e:	e7e4      	b.n	8031d6a <_svfprintf_r+0x98a>
 8031da0:	9f08      	ldr	r7, [sp, #32]
 8031da2:	e66c      	b.n	8031a7e <_svfprintf_r+0x69e>
 8031da4:	232d      	movs	r3, #45	@ 0x2d
 8031da6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031daa:	e66c      	b.n	8031a86 <_svfprintf_r+0x6a6>
 8031dac:	06af      	lsls	r7, r5, #26
 8031dae:	d50a      	bpl.n	8031dc6 <_svfprintf_r+0x9e6>
 8031db0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031db2:	6833      	ldr	r3, [r6, #0]
 8031db4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8031db6:	17d2      	asrs	r2, r2, #31
 8031db8:	e9c3 1200 	strd	r1, r2, [r3]
 8031dbc:	3604      	adds	r6, #4
 8031dbe:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8031dc2:	f7ff bb46 	b.w	8031452 <_svfprintf_r+0x72>
 8031dc6:	06e8      	lsls	r0, r5, #27
 8031dc8:	d503      	bpl.n	8031dd2 <_svfprintf_r+0x9f2>
 8031dca:	6833      	ldr	r3, [r6, #0]
 8031dcc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031dce:	601a      	str	r2, [r3, #0]
 8031dd0:	e7f4      	b.n	8031dbc <_svfprintf_r+0x9dc>
 8031dd2:	0669      	lsls	r1, r5, #25
 8031dd4:	d503      	bpl.n	8031dde <_svfprintf_r+0x9fe>
 8031dd6:	6833      	ldr	r3, [r6, #0]
 8031dd8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031dda:	801a      	strh	r2, [r3, #0]
 8031ddc:	e7ee      	b.n	8031dbc <_svfprintf_r+0x9dc>
 8031dde:	05aa      	lsls	r2, r5, #22
 8031de0:	d5f3      	bpl.n	8031dca <_svfprintf_r+0x9ea>
 8031de2:	6833      	ldr	r3, [r6, #0]
 8031de4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031de6:	701a      	strb	r2, [r3, #0]
 8031de8:	e7e8      	b.n	8031dbc <_svfprintf_r+0x9dc>
 8031dea:	f045 0510 	orr.w	r5, r5, #16
 8031dee:	f015 0320 	ands.w	r3, r5, #32
 8031df2:	d020      	beq.n	8031e36 <_svfprintf_r+0xa56>
 8031df4:	3607      	adds	r6, #7
 8031df6:	f026 0307 	bic.w	r3, r6, #7
 8031dfa:	461a      	mov	r2, r3
 8031dfc:	685f      	ldr	r7, [r3, #4]
 8031dfe:	f852 6b08 	ldr.w	r6, [r2], #8
 8031e02:	9207      	str	r2, [sp, #28]
 8031e04:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8031e08:	2300      	movs	r3, #0
 8031e0a:	2200      	movs	r2, #0
 8031e0c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8031e10:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8031e14:	f000 848c 	beq.w	8032730 <_svfprintf_r+0x1350>
 8031e18:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8031e1c:	9208      	str	r2, [sp, #32]
 8031e1e:	ea56 0207 	orrs.w	r2, r6, r7
 8031e22:	f040 848a 	bne.w	803273a <_svfprintf_r+0x135a>
 8031e26:	f1b8 0f00 	cmp.w	r8, #0
 8031e2a:	f000 80db 	beq.w	8031fe4 <_svfprintf_r+0xc04>
 8031e2e:	2b01      	cmp	r3, #1
 8031e30:	f040 8486 	bne.w	8032740 <_svfprintf_r+0x1360>
 8031e34:	e083      	b.n	8031f3e <_svfprintf_r+0xb5e>
 8031e36:	4632      	mov	r2, r6
 8031e38:	f015 0710 	ands.w	r7, r5, #16
 8031e3c:	f852 6b04 	ldr.w	r6, [r2], #4
 8031e40:	9207      	str	r2, [sp, #28]
 8031e42:	d001      	beq.n	8031e48 <_svfprintf_r+0xa68>
 8031e44:	461f      	mov	r7, r3
 8031e46:	e7dd      	b.n	8031e04 <_svfprintf_r+0xa24>
 8031e48:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8031e4c:	d001      	beq.n	8031e52 <_svfprintf_r+0xa72>
 8031e4e:	b2b6      	uxth	r6, r6
 8031e50:	e7d8      	b.n	8031e04 <_svfprintf_r+0xa24>
 8031e52:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8031e56:	d0d5      	beq.n	8031e04 <_svfprintf_r+0xa24>
 8031e58:	b2f6      	uxtb	r6, r6
 8031e5a:	e7f3      	b.n	8031e44 <_svfprintf_r+0xa64>
 8031e5c:	4633      	mov	r3, r6
 8031e5e:	2278      	movs	r2, #120	@ 0x78
 8031e60:	f853 6b04 	ldr.w	r6, [r3], #4
 8031e64:	9307      	str	r3, [sp, #28]
 8031e66:	f647 0330 	movw	r3, #30768	@ 0x7830
 8031e6a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8031e6e:	4b94      	ldr	r3, [pc, #592]	@ (80320c0 <_svfprintf_r+0xce0>)
 8031e70:	9319      	str	r3, [sp, #100]	@ 0x64
 8031e72:	2700      	movs	r7, #0
 8031e74:	f045 0502 	orr.w	r5, r5, #2
 8031e78:	2302      	movs	r3, #2
 8031e7a:	9206      	str	r2, [sp, #24]
 8031e7c:	e7c5      	b.n	8031e0a <_svfprintf_r+0xa2a>
 8031e7e:	4633      	mov	r3, r6
 8031e80:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8031e84:	f853 9b04 	ldr.w	r9, [r3], #4
 8031e88:	9307      	str	r3, [sp, #28]
 8031e8a:	f04f 0600 	mov.w	r6, #0
 8031e8e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8031e92:	d00f      	beq.n	8031eb4 <_svfprintf_r+0xad4>
 8031e94:	4642      	mov	r2, r8
 8031e96:	4631      	mov	r1, r6
 8031e98:	4648      	mov	r0, r9
 8031e9a:	f7de f9b1 	bl	8010200 <memchr>
 8031e9e:	4682      	mov	sl, r0
 8031ea0:	2800      	cmp	r0, #0
 8031ea2:	f43f ac81 	beq.w	80317a8 <_svfprintf_r+0x3c8>
 8031ea6:	eba0 0809 	sub.w	r8, r0, r9
 8031eaa:	46b2      	mov	sl, r6
 8031eac:	9610      	str	r6, [sp, #64]	@ 0x40
 8031eae:	4637      	mov	r7, r6
 8031eb0:	9608      	str	r6, [sp, #32]
 8031eb2:	e5eb      	b.n	8031a8c <_svfprintf_r+0x6ac>
 8031eb4:	4648      	mov	r0, r9
 8031eb6:	f7de f9f3 	bl	80102a0 <strlen>
 8031eba:	46b2      	mov	sl, r6
 8031ebc:	4680      	mov	r8, r0
 8031ebe:	e473      	b.n	80317a8 <_svfprintf_r+0x3c8>
 8031ec0:	f045 0510 	orr.w	r5, r5, #16
 8031ec4:	f015 0320 	ands.w	r3, r5, #32
 8031ec8:	d009      	beq.n	8031ede <_svfprintf_r+0xafe>
 8031eca:	3607      	adds	r6, #7
 8031ecc:	f026 0307 	bic.w	r3, r6, #7
 8031ed0:	461a      	mov	r2, r3
 8031ed2:	685f      	ldr	r7, [r3, #4]
 8031ed4:	f852 6b08 	ldr.w	r6, [r2], #8
 8031ed8:	9207      	str	r2, [sp, #28]
 8031eda:	2301      	movs	r3, #1
 8031edc:	e795      	b.n	8031e0a <_svfprintf_r+0xa2a>
 8031ede:	4632      	mov	r2, r6
 8031ee0:	f015 0710 	ands.w	r7, r5, #16
 8031ee4:	f852 6b04 	ldr.w	r6, [r2], #4
 8031ee8:	9207      	str	r2, [sp, #28]
 8031eea:	d001      	beq.n	8031ef0 <_svfprintf_r+0xb10>
 8031eec:	461f      	mov	r7, r3
 8031eee:	e7f4      	b.n	8031eda <_svfprintf_r+0xafa>
 8031ef0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8031ef4:	d001      	beq.n	8031efa <_svfprintf_r+0xb1a>
 8031ef6:	b2b6      	uxth	r6, r6
 8031ef8:	e7ef      	b.n	8031eda <_svfprintf_r+0xafa>
 8031efa:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8031efe:	d0ec      	beq.n	8031eda <_svfprintf_r+0xafa>
 8031f00:	b2f6      	uxtb	r6, r6
 8031f02:	e7f3      	b.n	8031eec <_svfprintf_r+0xb0c>
 8031f04:	4b6f      	ldr	r3, [pc, #444]	@ (80320c4 <_svfprintf_r+0xce4>)
 8031f06:	f7ff bb39 	b.w	803157c <_svfprintf_r+0x19c>
 8031f0a:	4632      	mov	r2, r6
 8031f0c:	f015 0710 	ands.w	r7, r5, #16
 8031f10:	f852 6b04 	ldr.w	r6, [r2], #4
 8031f14:	9207      	str	r2, [sp, #28]
 8031f16:	d002      	beq.n	8031f1e <_svfprintf_r+0xb3e>
 8031f18:	461f      	mov	r7, r3
 8031f1a:	f7ff bb3c 	b.w	8031596 <_svfprintf_r+0x1b6>
 8031f1e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8031f22:	d002      	beq.n	8031f2a <_svfprintf_r+0xb4a>
 8031f24:	b2b6      	uxth	r6, r6
 8031f26:	f7ff bb36 	b.w	8031596 <_svfprintf_r+0x1b6>
 8031f2a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8031f2e:	f43f ab32 	beq.w	8031596 <_svfprintf_r+0x1b6>
 8031f32:	b2f6      	uxtb	r6, r6
 8031f34:	e7f0      	b.n	8031f18 <_svfprintf_r+0xb38>
 8031f36:	2e0a      	cmp	r6, #10
 8031f38:	f177 0300 	sbcs.w	r3, r7, #0
 8031f3c:	d207      	bcs.n	8031f4e <_svfprintf_r+0xb6e>
 8031f3e:	3630      	adds	r6, #48	@ 0x30
 8031f40:	b2f6      	uxtb	r6, r6
 8031f42:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8031f46:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 8031f4a:	f000 bc15 	b.w	8032778 <_svfprintf_r+0x1398>
 8031f4e:	2300      	movs	r3, #0
 8031f50:	9304      	str	r3, [sp, #16]
 8031f52:	9b08      	ldr	r3, [sp, #32]
 8031f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8031f58:	ad52      	add	r5, sp, #328	@ 0x148
 8031f5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8031f5c:	220a      	movs	r2, #10
 8031f5e:	2300      	movs	r3, #0
 8031f60:	4630      	mov	r0, r6
 8031f62:	4639      	mov	r1, r7
 8031f64:	f7de fef8 	bl	8010d58 <__aeabi_uldivmod>
 8031f68:	9b04      	ldr	r3, [sp, #16]
 8031f6a:	9011      	str	r0, [sp, #68]	@ 0x44
 8031f6c:	3301      	adds	r3, #1
 8031f6e:	9304      	str	r3, [sp, #16]
 8031f70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031f72:	3230      	adds	r2, #48	@ 0x30
 8031f74:	468a      	mov	sl, r1
 8031f76:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8031f7a:	f805 2c01 	strb.w	r2, [r5, #-1]
 8031f7e:	b1d3      	cbz	r3, 8031fb6 <_svfprintf_r+0xbd6>
 8031f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031f82:	9a04      	ldr	r2, [sp, #16]
 8031f84:	781b      	ldrb	r3, [r3, #0]
 8031f86:	429a      	cmp	r2, r3
 8031f88:	d115      	bne.n	8031fb6 <_svfprintf_r+0xbd6>
 8031f8a:	2aff      	cmp	r2, #255	@ 0xff
 8031f8c:	d013      	beq.n	8031fb6 <_svfprintf_r+0xbd6>
 8031f8e:	2e0a      	cmp	r6, #10
 8031f90:	f177 0300 	sbcs.w	r3, r7, #0
 8031f94:	d30f      	bcc.n	8031fb6 <_svfprintf_r+0xbd6>
 8031f96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031f98:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8031f9a:	eba9 0903 	sub.w	r9, r9, r3
 8031f9e:	461a      	mov	r2, r3
 8031fa0:	4648      	mov	r0, r9
 8031fa2:	f7fb f8ec 	bl	802d17e <strncpy>
 8031fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031fa8:	785b      	ldrb	r3, [r3, #1]
 8031faa:	b11b      	cbz	r3, 8031fb4 <_svfprintf_r+0xbd4>
 8031fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031fae:	3301      	adds	r3, #1
 8031fb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8031fb2:	2300      	movs	r3, #0
 8031fb4:	9304      	str	r3, [sp, #16]
 8031fb6:	2e0a      	cmp	r6, #10
 8031fb8:	f177 0700 	sbcs.w	r7, r7, #0
 8031fbc:	f0c0 83dc 	bcc.w	8032778 <_svfprintf_r+0x1398>
 8031fc0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8031fc2:	4657      	mov	r7, sl
 8031fc4:	464d      	mov	r5, r9
 8031fc6:	e7c9      	b.n	8031f5c <_svfprintf_r+0xb7c>
 8031fc8:	f006 030f 	and.w	r3, r6, #15
 8031fcc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8031fce:	0936      	lsrs	r6, r6, #4
 8031fd0:	5cd3      	ldrb	r3, [r2, r3]
 8031fd2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8031fd6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8031fda:	093f      	lsrs	r7, r7, #4
 8031fdc:	ea56 0307 	orrs.w	r3, r6, r7
 8031fe0:	d1f2      	bne.n	8031fc8 <_svfprintf_r+0xbe8>
 8031fe2:	e3c9      	b.n	8032778 <_svfprintf_r+0x1398>
 8031fe4:	b91b      	cbnz	r3, 8031fee <_svfprintf_r+0xc0e>
 8031fe6:	07e9      	lsls	r1, r5, #31
 8031fe8:	d501      	bpl.n	8031fee <_svfprintf_r+0xc0e>
 8031fea:	2630      	movs	r6, #48	@ 0x30
 8031fec:	e7a9      	b.n	8031f42 <_svfprintf_r+0xb62>
 8031fee:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8031ff2:	e3c1      	b.n	8032778 <_svfprintf_r+0x1398>
 8031ff4:	9b06      	ldr	r3, [sp, #24]
 8031ff6:	2b00      	cmp	r3, #0
 8031ff8:	f000 838f 	beq.w	803271a <_svfprintf_r+0x133a>
 8031ffc:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8032000:	2300      	movs	r3, #0
 8032002:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8032006:	9607      	str	r6, [sp, #28]
 8032008:	f7ff bb63 	b.w	80316d2 <_svfprintf_r+0x2f2>
 803200c:	2010      	movs	r0, #16
 803200e:	4403      	add	r3, r0
 8032010:	2a07      	cmp	r2, #7
 8032012:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032016:	6060      	str	r0, [r4, #4]
 8032018:	dd08      	ble.n	803202c <_svfprintf_r+0xc4c>
 803201a:	9803      	ldr	r0, [sp, #12]
 803201c:	aa26      	add	r2, sp, #152	@ 0x98
 803201e:	4659      	mov	r1, fp
 8032020:	f7fd fd66 	bl	802faf0 <__ssprint_r>
 8032024:	2800      	cmp	r0, #0
 8032026:	f040 8356 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 803202a:	a929      	add	r1, sp, #164	@ 0xa4
 803202c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803202e:	3b10      	subs	r3, #16
 8032030:	9313      	str	r3, [sp, #76]	@ 0x4c
 8032032:	460c      	mov	r4, r1
 8032034:	e546      	b.n	8031ac4 <_svfprintf_r+0x6e4>
 8032036:	460c      	mov	r4, r1
 8032038:	e561      	b.n	8031afe <_svfprintf_r+0x71e>
 803203a:	9803      	ldr	r0, [sp, #12]
 803203c:	aa26      	add	r2, sp, #152	@ 0x98
 803203e:	4659      	mov	r1, fp
 8032040:	f7fd fd56 	bl	802faf0 <__ssprint_r>
 8032044:	2800      	cmp	r0, #0
 8032046:	f040 8346 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 803204a:	ac29      	add	r4, sp, #164	@ 0xa4
 803204c:	e569      	b.n	8031b22 <_svfprintf_r+0x742>
 803204e:	9803      	ldr	r0, [sp, #12]
 8032050:	aa26      	add	r2, sp, #152	@ 0x98
 8032052:	4659      	mov	r1, fp
 8032054:	f7fd fd4c 	bl	802faf0 <__ssprint_r>
 8032058:	2800      	cmp	r0, #0
 803205a:	f040 833c 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 803205e:	ac29      	add	r4, sp, #164	@ 0xa4
 8032060:	e56f      	b.n	8031b42 <_svfprintf_r+0x762>
 8032062:	2010      	movs	r0, #16
 8032064:	4403      	add	r3, r0
 8032066:	2a07      	cmp	r2, #7
 8032068:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803206c:	6060      	str	r0, [r4, #4]
 803206e:	dd08      	ble.n	8032082 <_svfprintf_r+0xca2>
 8032070:	9803      	ldr	r0, [sp, #12]
 8032072:	aa26      	add	r2, sp, #152	@ 0x98
 8032074:	4659      	mov	r1, fp
 8032076:	f7fd fd3b 	bl	802faf0 <__ssprint_r>
 803207a:	2800      	cmp	r0, #0
 803207c:	f040 832b 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8032080:	a929      	add	r1, sp, #164	@ 0xa4
 8032082:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8032084:	3b10      	subs	r3, #16
 8032086:	9313      	str	r3, [sp, #76]	@ 0x4c
 8032088:	460c      	mov	r4, r1
 803208a:	e563      	b.n	8031b54 <_svfprintf_r+0x774>
 803208c:	460c      	mov	r4, r1
 803208e:	e57e      	b.n	8031b8e <_svfprintf_r+0x7ae>
 8032090:	2010      	movs	r0, #16
 8032092:	4403      	add	r3, r0
 8032094:	2a07      	cmp	r2, #7
 8032096:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803209a:	6060      	str	r0, [r4, #4]
 803209c:	dd08      	ble.n	80320b0 <_svfprintf_r+0xcd0>
 803209e:	9803      	ldr	r0, [sp, #12]
 80320a0:	aa26      	add	r2, sp, #152	@ 0x98
 80320a2:	4659      	mov	r1, fp
 80320a4:	f7fd fd24 	bl	802faf0 <__ssprint_r>
 80320a8:	2800      	cmp	r0, #0
 80320aa:	f040 8314 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 80320ae:	a929      	add	r1, sp, #164	@ 0xa4
 80320b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80320b2:	3b10      	subs	r3, #16
 80320b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80320b6:	460c      	mov	r4, r1
 80320b8:	e56f      	b.n	8031b9a <_svfprintf_r+0x7ba>
 80320ba:	460c      	mov	r4, r1
 80320bc:	e58a      	b.n	8031bd4 <_svfprintf_r+0x7f4>
 80320be:	bf00      	nop
 80320c0:	0803c52f 	.word	0x0803c52f
 80320c4:	0803c540 	.word	0x0803c540
 80320c8:	9b06      	ldr	r3, [sp, #24]
 80320ca:	2b65      	cmp	r3, #101	@ 0x65
 80320cc:	f340 8246 	ble.w	803255c <_svfprintf_r+0x117c>
 80320d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80320d4:	2200      	movs	r2, #0
 80320d6:	2300      	movs	r3, #0
 80320d8:	f7de fd0e 	bl	8010af8 <__aeabi_dcmpeq>
 80320dc:	2800      	cmp	r0, #0
 80320de:	d06a      	beq.n	80321b6 <_svfprintf_r+0xdd6>
 80320e0:	4b73      	ldr	r3, [pc, #460]	@ (80322b0 <_svfprintf_r+0xed0>)
 80320e2:	6023      	str	r3, [r4, #0]
 80320e4:	2301      	movs	r3, #1
 80320e6:	6063      	str	r3, [r4, #4]
 80320e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80320ea:	3301      	adds	r3, #1
 80320ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80320ee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80320f0:	3301      	adds	r3, #1
 80320f2:	2b07      	cmp	r3, #7
 80320f4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80320f6:	dc37      	bgt.n	8032168 <_svfprintf_r+0xd88>
 80320f8:	3408      	adds	r4, #8
 80320fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80320fc:	9a04      	ldr	r2, [sp, #16]
 80320fe:	4293      	cmp	r3, r2
 8032100:	db02      	blt.n	8032108 <_svfprintf_r+0xd28>
 8032102:	07ef      	lsls	r7, r5, #31
 8032104:	f57f ad76 	bpl.w	8031bf4 <_svfprintf_r+0x814>
 8032108:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803210a:	6023      	str	r3, [r4, #0]
 803210c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803210e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8032110:	6063      	str	r3, [r4, #4]
 8032112:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032114:	4413      	add	r3, r2
 8032116:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032118:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803211a:	3301      	adds	r3, #1
 803211c:	2b07      	cmp	r3, #7
 803211e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032120:	dc2c      	bgt.n	803217c <_svfprintf_r+0xd9c>
 8032122:	3408      	adds	r4, #8
 8032124:	9b04      	ldr	r3, [sp, #16]
 8032126:	1e5e      	subs	r6, r3, #1
 8032128:	2e00      	cmp	r6, #0
 803212a:	f77f ad63 	ble.w	8031bf4 <_svfprintf_r+0x814>
 803212e:	4f61      	ldr	r7, [pc, #388]	@ (80322b4 <_svfprintf_r+0xed4>)
 8032130:	f04f 0810 	mov.w	r8, #16
 8032134:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8032138:	2e10      	cmp	r6, #16
 803213a:	f103 0301 	add.w	r3, r3, #1
 803213e:	f104 0108 	add.w	r1, r4, #8
 8032142:	6027      	str	r7, [r4, #0]
 8032144:	dc24      	bgt.n	8032190 <_svfprintf_r+0xdb0>
 8032146:	6066      	str	r6, [r4, #4]
 8032148:	2b07      	cmp	r3, #7
 803214a:	4416      	add	r6, r2
 803214c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8032150:	f340 82a0 	ble.w	8032694 <_svfprintf_r+0x12b4>
 8032154:	9803      	ldr	r0, [sp, #12]
 8032156:	aa26      	add	r2, sp, #152	@ 0x98
 8032158:	4659      	mov	r1, fp
 803215a:	f7fd fcc9 	bl	802faf0 <__ssprint_r>
 803215e:	2800      	cmp	r0, #0
 8032160:	f040 82b9 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8032164:	ac29      	add	r4, sp, #164	@ 0xa4
 8032166:	e545      	b.n	8031bf4 <_svfprintf_r+0x814>
 8032168:	9803      	ldr	r0, [sp, #12]
 803216a:	aa26      	add	r2, sp, #152	@ 0x98
 803216c:	4659      	mov	r1, fp
 803216e:	f7fd fcbf 	bl	802faf0 <__ssprint_r>
 8032172:	2800      	cmp	r0, #0
 8032174:	f040 82af 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8032178:	ac29      	add	r4, sp, #164	@ 0xa4
 803217a:	e7be      	b.n	80320fa <_svfprintf_r+0xd1a>
 803217c:	9803      	ldr	r0, [sp, #12]
 803217e:	aa26      	add	r2, sp, #152	@ 0x98
 8032180:	4659      	mov	r1, fp
 8032182:	f7fd fcb5 	bl	802faf0 <__ssprint_r>
 8032186:	2800      	cmp	r0, #0
 8032188:	f040 82a5 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 803218c:	ac29      	add	r4, sp, #164	@ 0xa4
 803218e:	e7c9      	b.n	8032124 <_svfprintf_r+0xd44>
 8032190:	3210      	adds	r2, #16
 8032192:	2b07      	cmp	r3, #7
 8032194:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8032198:	f8c4 8004 	str.w	r8, [r4, #4]
 803219c:	dd08      	ble.n	80321b0 <_svfprintf_r+0xdd0>
 803219e:	9803      	ldr	r0, [sp, #12]
 80321a0:	aa26      	add	r2, sp, #152	@ 0x98
 80321a2:	4659      	mov	r1, fp
 80321a4:	f7fd fca4 	bl	802faf0 <__ssprint_r>
 80321a8:	2800      	cmp	r0, #0
 80321aa:	f040 8294 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 80321ae:	a929      	add	r1, sp, #164	@ 0xa4
 80321b0:	3e10      	subs	r6, #16
 80321b2:	460c      	mov	r4, r1
 80321b4:	e7be      	b.n	8032134 <_svfprintf_r+0xd54>
 80321b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80321b8:	2b00      	cmp	r3, #0
 80321ba:	dc7d      	bgt.n	80322b8 <_svfprintf_r+0xed8>
 80321bc:	4b3c      	ldr	r3, [pc, #240]	@ (80322b0 <_svfprintf_r+0xed0>)
 80321be:	6023      	str	r3, [r4, #0]
 80321c0:	2301      	movs	r3, #1
 80321c2:	6063      	str	r3, [r4, #4]
 80321c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80321c6:	3301      	adds	r3, #1
 80321c8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80321ca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80321cc:	3301      	adds	r3, #1
 80321ce:	2b07      	cmp	r3, #7
 80321d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80321d2:	dc46      	bgt.n	8032262 <_svfprintf_r+0xe82>
 80321d4:	3408      	adds	r4, #8
 80321d6:	9904      	ldr	r1, [sp, #16]
 80321d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80321da:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80321dc:	430b      	orrs	r3, r1
 80321de:	f005 0101 	and.w	r1, r5, #1
 80321e2:	430b      	orrs	r3, r1
 80321e4:	f43f ad06 	beq.w	8031bf4 <_svfprintf_r+0x814>
 80321e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80321ea:	6023      	str	r3, [r4, #0]
 80321ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80321ee:	6063      	str	r3, [r4, #4]
 80321f0:	441a      	add	r2, r3
 80321f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80321f4:	9228      	str	r2, [sp, #160]	@ 0xa0
 80321f6:	3301      	adds	r3, #1
 80321f8:	2b07      	cmp	r3, #7
 80321fa:	9327      	str	r3, [sp, #156]	@ 0x9c
 80321fc:	dc3b      	bgt.n	8032276 <_svfprintf_r+0xe96>
 80321fe:	f104 0308 	add.w	r3, r4, #8
 8032202:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8032204:	2e00      	cmp	r6, #0
 8032206:	da1b      	bge.n	8032240 <_svfprintf_r+0xe60>
 8032208:	4f2a      	ldr	r7, [pc, #168]	@ (80322b4 <_svfprintf_r+0xed4>)
 803220a:	4276      	negs	r6, r6
 803220c:	461a      	mov	r2, r3
 803220e:	2410      	movs	r4, #16
 8032210:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8032214:	2e10      	cmp	r6, #16
 8032216:	f101 0101 	add.w	r1, r1, #1
 803221a:	f103 0308 	add.w	r3, r3, #8
 803221e:	6017      	str	r7, [r2, #0]
 8032220:	dc33      	bgt.n	803228a <_svfprintf_r+0xeaa>
 8032222:	6056      	str	r6, [r2, #4]
 8032224:	2907      	cmp	r1, #7
 8032226:	4406      	add	r6, r0
 8032228:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 803222c:	dd08      	ble.n	8032240 <_svfprintf_r+0xe60>
 803222e:	9803      	ldr	r0, [sp, #12]
 8032230:	aa26      	add	r2, sp, #152	@ 0x98
 8032232:	4659      	mov	r1, fp
 8032234:	f7fd fc5c 	bl	802faf0 <__ssprint_r>
 8032238:	2800      	cmp	r0, #0
 803223a:	f040 824c 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 803223e:	ab29      	add	r3, sp, #164	@ 0xa4
 8032240:	9a04      	ldr	r2, [sp, #16]
 8032242:	9904      	ldr	r1, [sp, #16]
 8032244:	605a      	str	r2, [r3, #4]
 8032246:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8032248:	f8c3 9000 	str.w	r9, [r3]
 803224c:	440a      	add	r2, r1
 803224e:	9228      	str	r2, [sp, #160]	@ 0xa0
 8032250:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8032252:	3201      	adds	r2, #1
 8032254:	2a07      	cmp	r2, #7
 8032256:	9227      	str	r2, [sp, #156]	@ 0x9c
 8032258:	f73f af7c 	bgt.w	8032154 <_svfprintf_r+0xd74>
 803225c:	f103 0408 	add.w	r4, r3, #8
 8032260:	e4c8      	b.n	8031bf4 <_svfprintf_r+0x814>
 8032262:	9803      	ldr	r0, [sp, #12]
 8032264:	aa26      	add	r2, sp, #152	@ 0x98
 8032266:	4659      	mov	r1, fp
 8032268:	f7fd fc42 	bl	802faf0 <__ssprint_r>
 803226c:	2800      	cmp	r0, #0
 803226e:	f040 8232 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8032272:	ac29      	add	r4, sp, #164	@ 0xa4
 8032274:	e7af      	b.n	80321d6 <_svfprintf_r+0xdf6>
 8032276:	9803      	ldr	r0, [sp, #12]
 8032278:	aa26      	add	r2, sp, #152	@ 0x98
 803227a:	4659      	mov	r1, fp
 803227c:	f7fd fc38 	bl	802faf0 <__ssprint_r>
 8032280:	2800      	cmp	r0, #0
 8032282:	f040 8228 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8032286:	ab29      	add	r3, sp, #164	@ 0xa4
 8032288:	e7bb      	b.n	8032202 <_svfprintf_r+0xe22>
 803228a:	3010      	adds	r0, #16
 803228c:	2907      	cmp	r1, #7
 803228e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8032292:	6054      	str	r4, [r2, #4]
 8032294:	dd08      	ble.n	80322a8 <_svfprintf_r+0xec8>
 8032296:	9803      	ldr	r0, [sp, #12]
 8032298:	aa26      	add	r2, sp, #152	@ 0x98
 803229a:	4659      	mov	r1, fp
 803229c:	f7fd fc28 	bl	802faf0 <__ssprint_r>
 80322a0:	2800      	cmp	r0, #0
 80322a2:	f040 8218 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 80322a6:	ab29      	add	r3, sp, #164	@ 0xa4
 80322a8:	3e10      	subs	r6, #16
 80322aa:	461a      	mov	r2, r3
 80322ac:	e7b0      	b.n	8032210 <_svfprintf_r+0xe30>
 80322ae:	bf00      	nop
 80322b0:	0803c551 	.word	0x0803c551
 80322b4:	0803ca96 	.word	0x0803ca96
 80322b8:	9b04      	ldr	r3, [sp, #16]
 80322ba:	444b      	add	r3, r9
 80322bc:	9306      	str	r3, [sp, #24]
 80322be:	9b04      	ldr	r3, [sp, #16]
 80322c0:	42b3      	cmp	r3, r6
 80322c2:	bfa8      	it	ge
 80322c4:	4633      	movge	r3, r6
 80322c6:	2b00      	cmp	r3, #0
 80322c8:	4698      	mov	r8, r3
 80322ca:	dd0b      	ble.n	80322e4 <_svfprintf_r+0xf04>
 80322cc:	e9c4 9300 	strd	r9, r3, [r4]
 80322d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80322d2:	4443      	add	r3, r8
 80322d4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80322d6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80322d8:	3301      	adds	r3, #1
 80322da:	2b07      	cmp	r3, #7
 80322dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80322de:	f300 8089 	bgt.w	80323f4 <_svfprintf_r+0x1014>
 80322e2:	3408      	adds	r4, #8
 80322e4:	4643      	mov	r3, r8
 80322e6:	2b00      	cmp	r3, #0
 80322e8:	bfac      	ite	ge
 80322ea:	eba6 0808 	subge.w	r8, r6, r8
 80322ee:	46b0      	movlt	r8, r6
 80322f0:	f1b8 0f00 	cmp.w	r8, #0
 80322f4:	dd1b      	ble.n	803232e <_svfprintf_r+0xf4e>
 80322f6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80322fa:	4897      	ldr	r0, [pc, #604]	@ (8032558 <_svfprintf_r+0x1178>)
 80322fc:	6020      	str	r0, [r4, #0]
 80322fe:	f1b8 0f10 	cmp.w	r8, #16
 8032302:	f102 0201 	add.w	r2, r2, #1
 8032306:	f104 0108 	add.w	r1, r4, #8
 803230a:	dc7d      	bgt.n	8032408 <_svfprintf_r+0x1028>
 803230c:	4443      	add	r3, r8
 803230e:	2a07      	cmp	r2, #7
 8032310:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032314:	f8c4 8004 	str.w	r8, [r4, #4]
 8032318:	f340 808a 	ble.w	8032430 <_svfprintf_r+0x1050>
 803231c:	9803      	ldr	r0, [sp, #12]
 803231e:	aa26      	add	r2, sp, #152	@ 0x98
 8032320:	4659      	mov	r1, fp
 8032322:	f7fd fbe5 	bl	802faf0 <__ssprint_r>
 8032326:	2800      	cmp	r0, #0
 8032328:	f040 81d5 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 803232c:	ac29      	add	r4, sp, #164	@ 0xa4
 803232e:	eb09 0806 	add.w	r8, r9, r6
 8032332:	056e      	lsls	r6, r5, #21
 8032334:	d508      	bpl.n	8032348 <_svfprintf_r+0xf68>
 8032336:	9b08      	ldr	r3, [sp, #32]
 8032338:	2b00      	cmp	r3, #0
 803233a:	d17b      	bne.n	8032434 <_svfprintf_r+0x1054>
 803233c:	2f00      	cmp	r7, #0
 803233e:	d17b      	bne.n	8032438 <_svfprintf_r+0x1058>
 8032340:	9b06      	ldr	r3, [sp, #24]
 8032342:	4598      	cmp	r8, r3
 8032344:	bf28      	it	cs
 8032346:	4698      	movcs	r8, r3
 8032348:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803234a:	9a04      	ldr	r2, [sp, #16]
 803234c:	4293      	cmp	r3, r2
 803234e:	db01      	blt.n	8032354 <_svfprintf_r+0xf74>
 8032350:	07e8      	lsls	r0, r5, #31
 8032352:	d50e      	bpl.n	8032372 <_svfprintf_r+0xf92>
 8032354:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8032356:	6023      	str	r3, [r4, #0]
 8032358:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803235a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803235c:	6063      	str	r3, [r4, #4]
 803235e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032360:	4413      	add	r3, r2
 8032362:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032364:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8032366:	3301      	adds	r3, #1
 8032368:	2b07      	cmp	r3, #7
 803236a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803236c:	f300 80df 	bgt.w	803252e <_svfprintf_r+0x114e>
 8032370:	3408      	adds	r4, #8
 8032372:	9b04      	ldr	r3, [sp, #16]
 8032374:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8032376:	1bdf      	subs	r7, r3, r7
 8032378:	9b06      	ldr	r3, [sp, #24]
 803237a:	eba3 0308 	sub.w	r3, r3, r8
 803237e:	429f      	cmp	r7, r3
 8032380:	bfa8      	it	ge
 8032382:	461f      	movge	r7, r3
 8032384:	2f00      	cmp	r7, #0
 8032386:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032388:	dd0a      	ble.n	80323a0 <_svfprintf_r+0xfc0>
 803238a:	443b      	add	r3, r7
 803238c:	9328      	str	r3, [sp, #160]	@ 0xa0
 803238e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8032390:	3301      	adds	r3, #1
 8032392:	2b07      	cmp	r3, #7
 8032394:	e9c4 8700 	strd	r8, r7, [r4]
 8032398:	9327      	str	r3, [sp, #156]	@ 0x9c
 803239a:	f300 80d2 	bgt.w	8032542 <_svfprintf_r+0x1162>
 803239e:	3408      	adds	r4, #8
 80323a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80323a2:	9b04      	ldr	r3, [sp, #16]
 80323a4:	2f00      	cmp	r7, #0
 80323a6:	eba3 0606 	sub.w	r6, r3, r6
 80323aa:	bfa8      	it	ge
 80323ac:	1bf6      	subge	r6, r6, r7
 80323ae:	2e00      	cmp	r6, #0
 80323b0:	f77f ac20 	ble.w	8031bf4 <_svfprintf_r+0x814>
 80323b4:	4f68      	ldr	r7, [pc, #416]	@ (8032558 <_svfprintf_r+0x1178>)
 80323b6:	f04f 0810 	mov.w	r8, #16
 80323ba:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80323be:	2e10      	cmp	r6, #16
 80323c0:	f103 0301 	add.w	r3, r3, #1
 80323c4:	f104 0108 	add.w	r1, r4, #8
 80323c8:	6027      	str	r7, [r4, #0]
 80323ca:	f77f aebc 	ble.w	8032146 <_svfprintf_r+0xd66>
 80323ce:	3210      	adds	r2, #16
 80323d0:	2b07      	cmp	r3, #7
 80323d2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80323d6:	f8c4 8004 	str.w	r8, [r4, #4]
 80323da:	dd08      	ble.n	80323ee <_svfprintf_r+0x100e>
 80323dc:	9803      	ldr	r0, [sp, #12]
 80323de:	aa26      	add	r2, sp, #152	@ 0x98
 80323e0:	4659      	mov	r1, fp
 80323e2:	f7fd fb85 	bl	802faf0 <__ssprint_r>
 80323e6:	2800      	cmp	r0, #0
 80323e8:	f040 8175 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 80323ec:	a929      	add	r1, sp, #164	@ 0xa4
 80323ee:	3e10      	subs	r6, #16
 80323f0:	460c      	mov	r4, r1
 80323f2:	e7e2      	b.n	80323ba <_svfprintf_r+0xfda>
 80323f4:	9803      	ldr	r0, [sp, #12]
 80323f6:	aa26      	add	r2, sp, #152	@ 0x98
 80323f8:	4659      	mov	r1, fp
 80323fa:	f7fd fb79 	bl	802faf0 <__ssprint_r>
 80323fe:	2800      	cmp	r0, #0
 8032400:	f040 8169 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8032404:	ac29      	add	r4, sp, #164	@ 0xa4
 8032406:	e76d      	b.n	80322e4 <_svfprintf_r+0xf04>
 8032408:	2010      	movs	r0, #16
 803240a:	4403      	add	r3, r0
 803240c:	2a07      	cmp	r2, #7
 803240e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032412:	6060      	str	r0, [r4, #4]
 8032414:	dd08      	ble.n	8032428 <_svfprintf_r+0x1048>
 8032416:	9803      	ldr	r0, [sp, #12]
 8032418:	aa26      	add	r2, sp, #152	@ 0x98
 803241a:	4659      	mov	r1, fp
 803241c:	f7fd fb68 	bl	802faf0 <__ssprint_r>
 8032420:	2800      	cmp	r0, #0
 8032422:	f040 8158 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8032426:	a929      	add	r1, sp, #164	@ 0xa4
 8032428:	f1a8 0810 	sub.w	r8, r8, #16
 803242c:	460c      	mov	r4, r1
 803242e:	e762      	b.n	80322f6 <_svfprintf_r+0xf16>
 8032430:	460c      	mov	r4, r1
 8032432:	e77c      	b.n	803232e <_svfprintf_r+0xf4e>
 8032434:	2f00      	cmp	r7, #0
 8032436:	d04a      	beq.n	80324ce <_svfprintf_r+0x10ee>
 8032438:	3f01      	subs	r7, #1
 803243a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803243c:	6023      	str	r3, [r4, #0]
 803243e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8032440:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8032442:	6063      	str	r3, [r4, #4]
 8032444:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032446:	4413      	add	r3, r2
 8032448:	9328      	str	r3, [sp, #160]	@ 0xa0
 803244a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803244c:	3301      	adds	r3, #1
 803244e:	2b07      	cmp	r3, #7
 8032450:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032452:	dc43      	bgt.n	80324dc <_svfprintf_r+0x10fc>
 8032454:	3408      	adds	r4, #8
 8032456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032458:	781a      	ldrb	r2, [r3, #0]
 803245a:	9b06      	ldr	r3, [sp, #24]
 803245c:	eba3 0308 	sub.w	r3, r3, r8
 8032460:	429a      	cmp	r2, r3
 8032462:	bfa8      	it	ge
 8032464:	461a      	movge	r2, r3
 8032466:	2a00      	cmp	r2, #0
 8032468:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803246a:	4691      	mov	r9, r2
 803246c:	dd09      	ble.n	8032482 <_svfprintf_r+0x10a2>
 803246e:	4413      	add	r3, r2
 8032470:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032472:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8032474:	3301      	adds	r3, #1
 8032476:	2b07      	cmp	r3, #7
 8032478:	e9c4 8200 	strd	r8, r2, [r4]
 803247c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803247e:	dc37      	bgt.n	80324f0 <_svfprintf_r+0x1110>
 8032480:	3408      	adds	r4, #8
 8032482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032484:	781e      	ldrb	r6, [r3, #0]
 8032486:	f1b9 0f00 	cmp.w	r9, #0
 803248a:	bfa8      	it	ge
 803248c:	eba6 0609 	subge.w	r6, r6, r9
 8032490:	2e00      	cmp	r6, #0
 8032492:	dd18      	ble.n	80324c6 <_svfprintf_r+0x10e6>
 8032494:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8032498:	482f      	ldr	r0, [pc, #188]	@ (8032558 <_svfprintf_r+0x1178>)
 803249a:	6020      	str	r0, [r4, #0]
 803249c:	2e10      	cmp	r6, #16
 803249e:	f103 0301 	add.w	r3, r3, #1
 80324a2:	f104 0108 	add.w	r1, r4, #8
 80324a6:	dc2d      	bgt.n	8032504 <_svfprintf_r+0x1124>
 80324a8:	6066      	str	r6, [r4, #4]
 80324aa:	2b07      	cmp	r3, #7
 80324ac:	4416      	add	r6, r2
 80324ae:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80324b2:	dd3a      	ble.n	803252a <_svfprintf_r+0x114a>
 80324b4:	9803      	ldr	r0, [sp, #12]
 80324b6:	aa26      	add	r2, sp, #152	@ 0x98
 80324b8:	4659      	mov	r1, fp
 80324ba:	f7fd fb19 	bl	802faf0 <__ssprint_r>
 80324be:	2800      	cmp	r0, #0
 80324c0:	f040 8109 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 80324c4:	ac29      	add	r4, sp, #164	@ 0xa4
 80324c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80324c8:	781b      	ldrb	r3, [r3, #0]
 80324ca:	4498      	add	r8, r3
 80324cc:	e733      	b.n	8032336 <_svfprintf_r+0xf56>
 80324ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80324d0:	3b01      	subs	r3, #1
 80324d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80324d4:	9b08      	ldr	r3, [sp, #32]
 80324d6:	3b01      	subs	r3, #1
 80324d8:	9308      	str	r3, [sp, #32]
 80324da:	e7ae      	b.n	803243a <_svfprintf_r+0x105a>
 80324dc:	9803      	ldr	r0, [sp, #12]
 80324de:	aa26      	add	r2, sp, #152	@ 0x98
 80324e0:	4659      	mov	r1, fp
 80324e2:	f7fd fb05 	bl	802faf0 <__ssprint_r>
 80324e6:	2800      	cmp	r0, #0
 80324e8:	f040 80f5 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 80324ec:	ac29      	add	r4, sp, #164	@ 0xa4
 80324ee:	e7b2      	b.n	8032456 <_svfprintf_r+0x1076>
 80324f0:	9803      	ldr	r0, [sp, #12]
 80324f2:	aa26      	add	r2, sp, #152	@ 0x98
 80324f4:	4659      	mov	r1, fp
 80324f6:	f7fd fafb 	bl	802faf0 <__ssprint_r>
 80324fa:	2800      	cmp	r0, #0
 80324fc:	f040 80eb 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8032500:	ac29      	add	r4, sp, #164	@ 0xa4
 8032502:	e7be      	b.n	8032482 <_svfprintf_r+0x10a2>
 8032504:	2010      	movs	r0, #16
 8032506:	4402      	add	r2, r0
 8032508:	2b07      	cmp	r3, #7
 803250a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803250e:	6060      	str	r0, [r4, #4]
 8032510:	dd08      	ble.n	8032524 <_svfprintf_r+0x1144>
 8032512:	9803      	ldr	r0, [sp, #12]
 8032514:	aa26      	add	r2, sp, #152	@ 0x98
 8032516:	4659      	mov	r1, fp
 8032518:	f7fd faea 	bl	802faf0 <__ssprint_r>
 803251c:	2800      	cmp	r0, #0
 803251e:	f040 80da 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8032522:	a929      	add	r1, sp, #164	@ 0xa4
 8032524:	3e10      	subs	r6, #16
 8032526:	460c      	mov	r4, r1
 8032528:	e7b4      	b.n	8032494 <_svfprintf_r+0x10b4>
 803252a:	460c      	mov	r4, r1
 803252c:	e7cb      	b.n	80324c6 <_svfprintf_r+0x10e6>
 803252e:	9803      	ldr	r0, [sp, #12]
 8032530:	aa26      	add	r2, sp, #152	@ 0x98
 8032532:	4659      	mov	r1, fp
 8032534:	f7fd fadc 	bl	802faf0 <__ssprint_r>
 8032538:	2800      	cmp	r0, #0
 803253a:	f040 80cc 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 803253e:	ac29      	add	r4, sp, #164	@ 0xa4
 8032540:	e717      	b.n	8032372 <_svfprintf_r+0xf92>
 8032542:	9803      	ldr	r0, [sp, #12]
 8032544:	aa26      	add	r2, sp, #152	@ 0x98
 8032546:	4659      	mov	r1, fp
 8032548:	f7fd fad2 	bl	802faf0 <__ssprint_r>
 803254c:	2800      	cmp	r0, #0
 803254e:	f040 80c2 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8032552:	ac29      	add	r4, sp, #164	@ 0xa4
 8032554:	e724      	b.n	80323a0 <_svfprintf_r+0xfc0>
 8032556:	bf00      	nop
 8032558:	0803ca96 	.word	0x0803ca96
 803255c:	9904      	ldr	r1, [sp, #16]
 803255e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8032560:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8032562:	2901      	cmp	r1, #1
 8032564:	f103 0301 	add.w	r3, r3, #1
 8032568:	f102 0201 	add.w	r2, r2, #1
 803256c:	f104 0608 	add.w	r6, r4, #8
 8032570:	dc02      	bgt.n	8032578 <_svfprintf_r+0x1198>
 8032572:	07e9      	lsls	r1, r5, #31
 8032574:	f140 8083 	bpl.w	803267e <_svfprintf_r+0x129e>
 8032578:	2101      	movs	r1, #1
 803257a:	2a07      	cmp	r2, #7
 803257c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032580:	f8c4 9000 	str.w	r9, [r4]
 8032584:	6061      	str	r1, [r4, #4]
 8032586:	dd08      	ble.n	803259a <_svfprintf_r+0x11ba>
 8032588:	9803      	ldr	r0, [sp, #12]
 803258a:	aa26      	add	r2, sp, #152	@ 0x98
 803258c:	4659      	mov	r1, fp
 803258e:	f7fd faaf 	bl	802faf0 <__ssprint_r>
 8032592:	2800      	cmp	r0, #0
 8032594:	f040 809f 	bne.w	80326d6 <_svfprintf_r+0x12f6>
 8032598:	ae29      	add	r6, sp, #164	@ 0xa4
 803259a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803259c:	6033      	str	r3, [r6, #0]
 803259e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80325a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80325a2:	6073      	str	r3, [r6, #4]
 80325a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80325a6:	4413      	add	r3, r2
 80325a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80325aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80325ac:	3301      	adds	r3, #1
 80325ae:	2b07      	cmp	r3, #7
 80325b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80325b2:	dc33      	bgt.n	803261c <_svfprintf_r+0x123c>
 80325b4:	3608      	adds	r6, #8
 80325b6:	9b04      	ldr	r3, [sp, #16]
 80325b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80325bc:	1e5c      	subs	r4, r3, #1
 80325be:	2200      	movs	r2, #0
 80325c0:	2300      	movs	r3, #0
 80325c2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 80325c6:	f7de fa97 	bl	8010af8 <__aeabi_dcmpeq>
 80325ca:	2800      	cmp	r0, #0
 80325cc:	d12f      	bne.n	803262e <_svfprintf_r+0x124e>
 80325ce:	f109 0201 	add.w	r2, r9, #1
 80325d2:	e9c6 2400 	strd	r2, r4, [r6]
 80325d6:	9a04      	ldr	r2, [sp, #16]
 80325d8:	f108 0301 	add.w	r3, r8, #1
 80325dc:	3f01      	subs	r7, #1
 80325de:	4417      	add	r7, r2
 80325e0:	2b07      	cmp	r3, #7
 80325e2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 80325e6:	dd53      	ble.n	8032690 <_svfprintf_r+0x12b0>
 80325e8:	9803      	ldr	r0, [sp, #12]
 80325ea:	aa26      	add	r2, sp, #152	@ 0x98
 80325ec:	4659      	mov	r1, fp
 80325ee:	f7fd fa7f 	bl	802faf0 <__ssprint_r>
 80325f2:	2800      	cmp	r0, #0
 80325f4:	d16f      	bne.n	80326d6 <_svfprintf_r+0x12f6>
 80325f6:	ae29      	add	r6, sp, #164	@ 0xa4
 80325f8:	ab22      	add	r3, sp, #136	@ 0x88
 80325fa:	6033      	str	r3, [r6, #0]
 80325fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80325fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8032600:	6073      	str	r3, [r6, #4]
 8032602:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032604:	4413      	add	r3, r2
 8032606:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032608:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803260a:	3301      	adds	r3, #1
 803260c:	2b07      	cmp	r3, #7
 803260e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032610:	f73f ada0 	bgt.w	8032154 <_svfprintf_r+0xd74>
 8032614:	f106 0408 	add.w	r4, r6, #8
 8032618:	f7ff baec 	b.w	8031bf4 <_svfprintf_r+0x814>
 803261c:	9803      	ldr	r0, [sp, #12]
 803261e:	aa26      	add	r2, sp, #152	@ 0x98
 8032620:	4659      	mov	r1, fp
 8032622:	f7fd fa65 	bl	802faf0 <__ssprint_r>
 8032626:	2800      	cmp	r0, #0
 8032628:	d155      	bne.n	80326d6 <_svfprintf_r+0x12f6>
 803262a:	ae29      	add	r6, sp, #164	@ 0xa4
 803262c:	e7c3      	b.n	80325b6 <_svfprintf_r+0x11d6>
 803262e:	9b04      	ldr	r3, [sp, #16]
 8032630:	2b01      	cmp	r3, #1
 8032632:	dde1      	ble.n	80325f8 <_svfprintf_r+0x1218>
 8032634:	4f57      	ldr	r7, [pc, #348]	@ (8032794 <_svfprintf_r+0x13b4>)
 8032636:	f04f 0810 	mov.w	r8, #16
 803263a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803263e:	2c10      	cmp	r4, #16
 8032640:	f103 0301 	add.w	r3, r3, #1
 8032644:	f106 0108 	add.w	r1, r6, #8
 8032648:	6037      	str	r7, [r6, #0]
 803264a:	dc07      	bgt.n	803265c <_svfprintf_r+0x127c>
 803264c:	6074      	str	r4, [r6, #4]
 803264e:	2b07      	cmp	r3, #7
 8032650:	4414      	add	r4, r2
 8032652:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8032656:	dcc7      	bgt.n	80325e8 <_svfprintf_r+0x1208>
 8032658:	460e      	mov	r6, r1
 803265a:	e7cd      	b.n	80325f8 <_svfprintf_r+0x1218>
 803265c:	3210      	adds	r2, #16
 803265e:	2b07      	cmp	r3, #7
 8032660:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8032664:	f8c6 8004 	str.w	r8, [r6, #4]
 8032668:	dd06      	ble.n	8032678 <_svfprintf_r+0x1298>
 803266a:	9803      	ldr	r0, [sp, #12]
 803266c:	aa26      	add	r2, sp, #152	@ 0x98
 803266e:	4659      	mov	r1, fp
 8032670:	f7fd fa3e 	bl	802faf0 <__ssprint_r>
 8032674:	bb78      	cbnz	r0, 80326d6 <_svfprintf_r+0x12f6>
 8032676:	a929      	add	r1, sp, #164	@ 0xa4
 8032678:	3c10      	subs	r4, #16
 803267a:	460e      	mov	r6, r1
 803267c:	e7dd      	b.n	803263a <_svfprintf_r+0x125a>
 803267e:	2101      	movs	r1, #1
 8032680:	2a07      	cmp	r2, #7
 8032682:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032686:	f8c4 9000 	str.w	r9, [r4]
 803268a:	6061      	str	r1, [r4, #4]
 803268c:	ddb4      	ble.n	80325f8 <_svfprintf_r+0x1218>
 803268e:	e7ab      	b.n	80325e8 <_svfprintf_r+0x1208>
 8032690:	3608      	adds	r6, #8
 8032692:	e7b1      	b.n	80325f8 <_svfprintf_r+0x1218>
 8032694:	460c      	mov	r4, r1
 8032696:	f7ff baad 	b.w	8031bf4 <_svfprintf_r+0x814>
 803269a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803269c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803269e:	1a9d      	subs	r5, r3, r2
 80326a0:	2d00      	cmp	r5, #0
 80326a2:	f77f aaaa 	ble.w	8031bfa <_svfprintf_r+0x81a>
 80326a6:	4e3c      	ldr	r6, [pc, #240]	@ (8032798 <_svfprintf_r+0x13b8>)
 80326a8:	2710      	movs	r7, #16
 80326aa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80326ae:	2d10      	cmp	r5, #16
 80326b0:	f103 0301 	add.w	r3, r3, #1
 80326b4:	6026      	str	r6, [r4, #0]
 80326b6:	dc18      	bgt.n	80326ea <_svfprintf_r+0x130a>
 80326b8:	442a      	add	r2, r5
 80326ba:	2b07      	cmp	r3, #7
 80326bc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80326c0:	6065      	str	r5, [r4, #4]
 80326c2:	f77f aa9a 	ble.w	8031bfa <_svfprintf_r+0x81a>
 80326c6:	9803      	ldr	r0, [sp, #12]
 80326c8:	aa26      	add	r2, sp, #152	@ 0x98
 80326ca:	4659      	mov	r1, fp
 80326cc:	f7fd fa10 	bl	802faf0 <__ssprint_r>
 80326d0:	2800      	cmp	r0, #0
 80326d2:	f43f aa92 	beq.w	8031bfa <_svfprintf_r+0x81a>
 80326d6:	f1ba 0f00 	cmp.w	sl, #0
 80326da:	f43f a89a 	beq.w	8031812 <_svfprintf_r+0x432>
 80326de:	9803      	ldr	r0, [sp, #12]
 80326e0:	4651      	mov	r1, sl
 80326e2:	f7fc fe43 	bl	802f36c <_free_r>
 80326e6:	f7ff b894 	b.w	8031812 <_svfprintf_r+0x432>
 80326ea:	3210      	adds	r2, #16
 80326ec:	2b07      	cmp	r3, #7
 80326ee:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80326f2:	6067      	str	r7, [r4, #4]
 80326f4:	dc02      	bgt.n	80326fc <_svfprintf_r+0x131c>
 80326f6:	3408      	adds	r4, #8
 80326f8:	3d10      	subs	r5, #16
 80326fa:	e7d6      	b.n	80326aa <_svfprintf_r+0x12ca>
 80326fc:	9803      	ldr	r0, [sp, #12]
 80326fe:	aa26      	add	r2, sp, #152	@ 0x98
 8032700:	4659      	mov	r1, fp
 8032702:	f7fd f9f5 	bl	802faf0 <__ssprint_r>
 8032706:	2800      	cmp	r0, #0
 8032708:	d1e5      	bne.n	80326d6 <_svfprintf_r+0x12f6>
 803270a:	ac29      	add	r4, sp, #164	@ 0xa4
 803270c:	e7f4      	b.n	80326f8 <_svfprintf_r+0x1318>
 803270e:	9803      	ldr	r0, [sp, #12]
 8032710:	4651      	mov	r1, sl
 8032712:	f7fc fe2b 	bl	802f36c <_free_r>
 8032716:	f7ff ba88 	b.w	8031c2a <_svfprintf_r+0x84a>
 803271a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803271c:	2b00      	cmp	r3, #0
 803271e:	f43f a878 	beq.w	8031812 <_svfprintf_r+0x432>
 8032722:	9803      	ldr	r0, [sp, #12]
 8032724:	aa26      	add	r2, sp, #152	@ 0x98
 8032726:	4659      	mov	r1, fp
 8032728:	f7fd f9e2 	bl	802faf0 <__ssprint_r>
 803272c:	f7ff b871 	b.w	8031812 <_svfprintf_r+0x432>
 8032730:	ea56 0207 	orrs.w	r2, r6, r7
 8032734:	9508      	str	r5, [sp, #32]
 8032736:	f43f ab7a 	beq.w	8031e2e <_svfprintf_r+0xa4e>
 803273a:	2b01      	cmp	r3, #1
 803273c:	f43f abfb 	beq.w	8031f36 <_svfprintf_r+0xb56>
 8032740:	2b02      	cmp	r3, #2
 8032742:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8032746:	f43f ac3f 	beq.w	8031fc8 <_svfprintf_r+0xbe8>
 803274a:	f006 0307 	and.w	r3, r6, #7
 803274e:	08f6      	lsrs	r6, r6, #3
 8032750:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8032754:	08ff      	lsrs	r7, r7, #3
 8032756:	3330      	adds	r3, #48	@ 0x30
 8032758:	ea56 0107 	orrs.w	r1, r6, r7
 803275c:	464a      	mov	r2, r9
 803275e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8032762:	d1f2      	bne.n	803274a <_svfprintf_r+0x136a>
 8032764:	9908      	ldr	r1, [sp, #32]
 8032766:	07c8      	lsls	r0, r1, #31
 8032768:	d506      	bpl.n	8032778 <_svfprintf_r+0x1398>
 803276a:	2b30      	cmp	r3, #48	@ 0x30
 803276c:	d004      	beq.n	8032778 <_svfprintf_r+0x1398>
 803276e:	2330      	movs	r3, #48	@ 0x30
 8032770:	f809 3c01 	strb.w	r3, [r9, #-1]
 8032774:	f1a2 0902 	sub.w	r9, r2, #2
 8032778:	ab52      	add	r3, sp, #328	@ 0x148
 803277a:	9d08      	ldr	r5, [sp, #32]
 803277c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8032780:	f04f 0a00 	mov.w	sl, #0
 8032784:	eba3 0809 	sub.w	r8, r3, r9
 8032788:	4657      	mov	r7, sl
 803278a:	f8cd a020 	str.w	sl, [sp, #32]
 803278e:	4656      	mov	r6, sl
 8032790:	f7ff b97c 	b.w	8031a8c <_svfprintf_r+0x6ac>
 8032794:	0803ca96 	.word	0x0803ca96
 8032798:	0803caa6 	.word	0x0803caa6

0803279c <__swhatbuf_r>:
 803279c:	b570      	push	{r4, r5, r6, lr}
 803279e:	460c      	mov	r4, r1
 80327a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80327a4:	2900      	cmp	r1, #0
 80327a6:	b096      	sub	sp, #88	@ 0x58
 80327a8:	4615      	mov	r5, r2
 80327aa:	461e      	mov	r6, r3
 80327ac:	da07      	bge.n	80327be <__swhatbuf_r+0x22>
 80327ae:	89a1      	ldrh	r1, [r4, #12]
 80327b0:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 80327b4:	d117      	bne.n	80327e6 <__swhatbuf_r+0x4a>
 80327b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80327ba:	4608      	mov	r0, r1
 80327bc:	e00f      	b.n	80327de <__swhatbuf_r+0x42>
 80327be:	466a      	mov	r2, sp
 80327c0:	f003 f892 	bl	80358e8 <_fstat_r>
 80327c4:	2800      	cmp	r0, #0
 80327c6:	dbf2      	blt.n	80327ae <__swhatbuf_r+0x12>
 80327c8:	9901      	ldr	r1, [sp, #4]
 80327ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80327ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80327d2:	4259      	negs	r1, r3
 80327d4:	4159      	adcs	r1, r3
 80327d6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80327da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80327de:	6031      	str	r1, [r6, #0]
 80327e0:	602b      	str	r3, [r5, #0]
 80327e2:	b016      	add	sp, #88	@ 0x58
 80327e4:	bd70      	pop	{r4, r5, r6, pc}
 80327e6:	2100      	movs	r1, #0
 80327e8:	2340      	movs	r3, #64	@ 0x40
 80327ea:	e7e6      	b.n	80327ba <__swhatbuf_r+0x1e>

080327ec <__smakebuf_r>:
 80327ec:	898b      	ldrh	r3, [r1, #12]
 80327ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80327f0:	079d      	lsls	r5, r3, #30
 80327f2:	4606      	mov	r6, r0
 80327f4:	460c      	mov	r4, r1
 80327f6:	d507      	bpl.n	8032808 <__smakebuf_r+0x1c>
 80327f8:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80327fc:	6023      	str	r3, [r4, #0]
 80327fe:	6123      	str	r3, [r4, #16]
 8032800:	2301      	movs	r3, #1
 8032802:	6163      	str	r3, [r4, #20]
 8032804:	b003      	add	sp, #12
 8032806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8032808:	ab01      	add	r3, sp, #4
 803280a:	466a      	mov	r2, sp
 803280c:	f7ff ffc6 	bl	803279c <__swhatbuf_r>
 8032810:	9f00      	ldr	r7, [sp, #0]
 8032812:	4605      	mov	r5, r0
 8032814:	4639      	mov	r1, r7
 8032816:	4630      	mov	r0, r6
 8032818:	f7fc fec0 	bl	802f59c <_malloc_r>
 803281c:	b948      	cbnz	r0, 8032832 <__smakebuf_r+0x46>
 803281e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8032822:	059a      	lsls	r2, r3, #22
 8032824:	d4ee      	bmi.n	8032804 <__smakebuf_r+0x18>
 8032826:	f023 0303 	bic.w	r3, r3, #3
 803282a:	f043 0302 	orr.w	r3, r3, #2
 803282e:	81a3      	strh	r3, [r4, #12]
 8032830:	e7e2      	b.n	80327f8 <__smakebuf_r+0xc>
 8032832:	89a3      	ldrh	r3, [r4, #12]
 8032834:	6020      	str	r0, [r4, #0]
 8032836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803283a:	81a3      	strh	r3, [r4, #12]
 803283c:	9b01      	ldr	r3, [sp, #4]
 803283e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8032842:	b15b      	cbz	r3, 803285c <__smakebuf_r+0x70>
 8032844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8032848:	4630      	mov	r0, r6
 803284a:	f003 f85f 	bl	803590c <_isatty_r>
 803284e:	b128      	cbz	r0, 803285c <__smakebuf_r+0x70>
 8032850:	89a3      	ldrh	r3, [r4, #12]
 8032852:	f023 0303 	bic.w	r3, r3, #3
 8032856:	f043 0301 	orr.w	r3, r3, #1
 803285a:	81a3      	strh	r3, [r4, #12]
 803285c:	89a3      	ldrh	r3, [r4, #12]
 803285e:	431d      	orrs	r5, r3
 8032860:	81a5      	strh	r5, [r4, #12]
 8032862:	e7cf      	b.n	8032804 <__smakebuf_r+0x18>

08032864 <__ssvfscanf_r>:
 8032864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032868:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 803286c:	461d      	mov	r5, r3
 803286e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8032872:	af02      	add	r7, sp, #8
 8032874:	049e      	lsls	r6, r3, #18
 8032876:	62b8      	str	r0, [r7, #40]	@ 0x28
 8032878:	460c      	mov	r4, r1
 803287a:	617a      	str	r2, [r7, #20]
 803287c:	d406      	bmi.n	803288c <__ssvfscanf_r+0x28>
 803287e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8032882:	818b      	strh	r3, [r1, #12]
 8032884:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8032886:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803288a:	664b      	str	r3, [r1, #100]	@ 0x64
 803288c:	2300      	movs	r3, #0
 803288e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8032892:	61bb      	str	r3, [r7, #24]
 8032894:	637b      	str	r3, [r7, #52]	@ 0x34
 8032896:	633b      	str	r3, [r7, #48]	@ 0x30
 8032898:	627b      	str	r3, [r7, #36]	@ 0x24
 803289a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803289e:	f818 3b01 	ldrb.w	r3, [r8], #1
 80328a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80328a4:	2b00      	cmp	r3, #0
 80328a6:	f000 80d3 	beq.w	8032a50 <__ssvfscanf_r+0x1ec>
 80328aa:	4a84      	ldr	r2, [pc, #528]	@ (8032abc <__ssvfscanf_r+0x258>)
 80328ac:	5cd6      	ldrb	r6, [r2, r3]
 80328ae:	f016 0608 	ands.w	r6, r6, #8
 80328b2:	d01b      	beq.n	80328ec <__ssvfscanf_r+0x88>
 80328b4:	6863      	ldr	r3, [r4, #4]
 80328b6:	2b00      	cmp	r3, #0
 80328b8:	dd08      	ble.n	80328cc <__ssvfscanf_r+0x68>
 80328ba:	6823      	ldr	r3, [r4, #0]
 80328bc:	497f      	ldr	r1, [pc, #508]	@ (8032abc <__ssvfscanf_r+0x258>)
 80328be:	781a      	ldrb	r2, [r3, #0]
 80328c0:	5c8a      	ldrb	r2, [r1, r2]
 80328c2:	0710      	lsls	r0, r2, #28
 80328c4:	d409      	bmi.n	80328da <__ssvfscanf_r+0x76>
 80328c6:	f8c7 8014 	str.w	r8, [r7, #20]
 80328ca:	e7e6      	b.n	803289a <__ssvfscanf_r+0x36>
 80328cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80328ce:	4621      	mov	r1, r4
 80328d0:	f7fd fe13 	bl	80304fa <__ssrefill_r>
 80328d4:	2800      	cmp	r0, #0
 80328d6:	d0f0      	beq.n	80328ba <__ssvfscanf_r+0x56>
 80328d8:	e7f5      	b.n	80328c6 <__ssvfscanf_r+0x62>
 80328da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80328dc:	3201      	adds	r2, #1
 80328de:	633a      	str	r2, [r7, #48]	@ 0x30
 80328e0:	6862      	ldr	r2, [r4, #4]
 80328e2:	3301      	adds	r3, #1
 80328e4:	3a01      	subs	r2, #1
 80328e6:	6062      	str	r2, [r4, #4]
 80328e8:	6023      	str	r3, [r4, #0]
 80328ea:	e7e3      	b.n	80328b4 <__ssvfscanf_r+0x50>
 80328ec:	2b25      	cmp	r3, #37	@ 0x25
 80328ee:	d163      	bne.n	80329b8 <__ssvfscanf_r+0x154>
 80328f0:	62fe      	str	r6, [r7, #44]	@ 0x2c
 80328f2:	4642      	mov	r2, r8
 80328f4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80328f8:	617a      	str	r2, [r7, #20]
 80328fa:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 80328fe:	2a55      	cmp	r2, #85	@ 0x55
 8032900:	f200 816e 	bhi.w	8032be0 <__ssvfscanf_r+0x37c>
 8032904:	e8df f012 	tbh	[pc, r2, lsl #1]
 8032908:	016c0056 	.word	0x016c0056
 803290c:	016c016c 	.word	0x016c016c
 8032910:	007d016c 	.word	0x007d016c
 8032914:	016c016c 	.word	0x016c016c
 8032918:	016c016c 	.word	0x016c016c
 803291c:	00b9016c 	.word	0x00b9016c
 8032920:	00b900b9 	.word	0x00b900b9
 8032924:	00b900b9 	.word	0x00b900b9
 8032928:	00b900b9 	.word	0x00b900b9
 803292c:	00b900b9 	.word	0x00b900b9
 8032930:	016c00b9 	.word	0x016c00b9
 8032934:	016c016c 	.word	0x016c016c
 8032938:	016c016c 	.word	0x016c016c
 803293c:	016c016c 	.word	0x016c016c
 8032940:	016c00e0 	.word	0x016c00e0
 8032944:	00c3010a 	.word	0x00c3010a
 8032948:	00e000e0 	.word	0x00e000e0
 803294c:	016c00e0 	.word	0x016c00e0
 8032950:	016c016c 	.word	0x016c016c
 8032954:	00a2016c 	.word	0x00a2016c
 8032958:	016c016c 	.word	0x016c016c
 803295c:	016c00c7 	.word	0x016c00c7
 8032960:	016c016c 	.word	0x016c016c
 8032964:	016c00fa 	.word	0x016c00fa
 8032968:	016c016c 	.word	0x016c016c
 803296c:	00d4016c 	.word	0x00d4016c
 8032970:	016c016c 	.word	0x016c016c
 8032974:	016c00ff 	.word	0x016c00ff
 8032978:	016c016c 	.word	0x016c016c
 803297c:	016c016c 	.word	0x016c016c
 8032980:	016c00e0 	.word	0x016c00e0
 8032984:	00c5010c 	.word	0x00c5010c
 8032988:	00e000e0 	.word	0x00e000e0
 803298c:	009400e0 	.word	0x009400e0
 8032990:	00a20130 	.word	0x00a20130
 8032994:	0085016c 	.word	0x0085016c
 8032998:	011400ac 	.word	0x011400ac
 803299c:	011100c9 	.word	0x011100c9
 80329a0:	016c016c 	.word	0x016c016c
 80329a4:	00a900fc 	.word	0x00a900fc
 80329a8:	016c00d0 	.word	0x016c00d0
 80329ac:	00d4016c 	.word	0x00d4016c
 80329b0:	00a9016c 	.word	0x00a9016c
 80329b4:	f8d7 8014 	ldr.w	r8, [r7, #20]
 80329b8:	6863      	ldr	r3, [r4, #4]
 80329ba:	2b00      	cmp	r3, #0
 80329bc:	dd0e      	ble.n	80329dc <__ssvfscanf_r+0x178>
 80329be:	6823      	ldr	r3, [r4, #0]
 80329c0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80329c4:	7819      	ldrb	r1, [r3, #0]
 80329c6:	4291      	cmp	r1, r2
 80329c8:	d142      	bne.n	8032a50 <__ssvfscanf_r+0x1ec>
 80329ca:	3301      	adds	r3, #1
 80329cc:	6862      	ldr	r2, [r4, #4]
 80329ce:	6023      	str	r3, [r4, #0]
 80329d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80329d2:	3a01      	subs	r2, #1
 80329d4:	3301      	adds	r3, #1
 80329d6:	6062      	str	r2, [r4, #4]
 80329d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80329da:	e774      	b.n	80328c6 <__ssvfscanf_r+0x62>
 80329dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80329de:	4621      	mov	r1, r4
 80329e0:	f7fd fd8b 	bl	80304fa <__ssrefill_r>
 80329e4:	2800      	cmp	r0, #0
 80329e6:	d0ea      	beq.n	80329be <__ssvfscanf_r+0x15a>
 80329e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80329ea:	b113      	cbz	r3, 80329f2 <__ssvfscanf_r+0x18e>
 80329ec:	89a3      	ldrh	r3, [r4, #12]
 80329ee:	065b      	lsls	r3, r3, #25
 80329f0:	d52e      	bpl.n	8032a50 <__ssvfscanf_r+0x1ec>
 80329f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80329f4:	2b00      	cmp	r3, #0
 80329f6:	f041 809d 	bne.w	8033b34 <__ssvfscanf_r+0x12d0>
 80329fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80329fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8032a00:	e0f9      	b.n	8032bf6 <__ssvfscanf_r+0x392>
 8032a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032a04:	4333      	orrs	r3, r6
 8032a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032a08:	d122      	bne.n	8032a50 <__ssvfscanf_r+0x1ec>
 8032a0a:	2610      	movs	r6, #16
 8032a0c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8032a10:	e76f      	b.n	80328f2 <__ssvfscanf_r+0x8e>
 8032a12:	0731      	lsls	r1, r6, #28
 8032a14:	d11c      	bne.n	8032a50 <__ssvfscanf_r+0x1ec>
 8032a16:	f898 3001 	ldrb.w	r3, [r8, #1]
 8032a1a:	2b6c      	cmp	r3, #108	@ 0x6c
 8032a1c:	d105      	bne.n	8032a2a <__ssvfscanf_r+0x1c6>
 8032a1e:	f108 0302 	add.w	r3, r8, #2
 8032a22:	617b      	str	r3, [r7, #20]
 8032a24:	f046 0602 	orr.w	r6, r6, #2
 8032a28:	e7f0      	b.n	8032a0c <__ssvfscanf_r+0x1a8>
 8032a2a:	f046 0601 	orr.w	r6, r6, #1
 8032a2e:	e7ed      	b.n	8032a0c <__ssvfscanf_r+0x1a8>
 8032a30:	0732      	lsls	r2, r6, #28
 8032a32:	d10d      	bne.n	8032a50 <__ssvfscanf_r+0x1ec>
 8032a34:	f898 3001 	ldrb.w	r3, [r8, #1]
 8032a38:	2b68      	cmp	r3, #104	@ 0x68
 8032a3a:	bf03      	ittte	eq
 8032a3c:	f108 0302 	addeq.w	r3, r8, #2
 8032a40:	617b      	streq	r3, [r7, #20]
 8032a42:	f046 0608 	orreq.w	r6, r6, #8
 8032a46:	f046 0604 	orrne.w	r6, r6, #4
 8032a4a:	e7df      	b.n	8032a0c <__ssvfscanf_r+0x1a8>
 8032a4c:	0733      	lsls	r3, r6, #28
 8032a4e:	d0e9      	beq.n	8032a24 <__ssvfscanf_r+0x1c0>
 8032a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032a52:	2b00      	cmp	r3, #0
 8032a54:	f000 80cf 	beq.w	8032bf6 <__ssvfscanf_r+0x392>
 8032a58:	e0c8      	b.n	8032bec <__ssvfscanf_r+0x388>
 8032a5a:	0730      	lsls	r0, r6, #28
 8032a5c:	d0d6      	beq.n	8032a0c <__ssvfscanf_r+0x1a8>
 8032a5e:	e7f7      	b.n	8032a50 <__ssvfscanf_r+0x1ec>
 8032a60:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8032a64:	d1f4      	bne.n	8032a50 <__ssvfscanf_r+0x1ec>
 8032a66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8032a68:	b922      	cbnz	r2, 8032a74 <__ssvfscanf_r+0x210>
 8032a6a:	b082      	sub	sp, #8
 8032a6c:	aa02      	add	r2, sp, #8
 8032a6e:	e9c2 3300 	strd	r3, r3, [r2]
 8032a72:	637a      	str	r2, [r7, #52]	@ 0x34
 8032a74:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 8032a78:	e7c8      	b.n	8032a0c <__ssvfscanf_r+0x1a8>
 8032a7a:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 8032a7e:	d1e7      	bne.n	8032a50 <__ssvfscanf_r+0x1ec>
 8032a80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032a82:	220a      	movs	r2, #10
 8032a84:	fb02 3301 	mla	r3, r2, r1, r3
 8032a88:	3b30      	subs	r3, #48	@ 0x30
 8032a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032a8c:	e7be      	b.n	8032a0c <__ssvfscanf_r+0x1a8>
 8032a8e:	f046 0601 	orr.w	r6, r6, #1
 8032a92:	4b0b      	ldr	r3, [pc, #44]	@ (8032ac0 <__ssvfscanf_r+0x25c>)
 8032a94:	e009      	b.n	8032aaa <__ssvfscanf_r+0x246>
 8032a96:	f046 0601 	orr.w	r6, r6, #1
 8032a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8032ac4 <__ssvfscanf_r+0x260>)
 8032a9c:	61bb      	str	r3, [r7, #24]
 8032a9e:	2308      	movs	r3, #8
 8032aa0:	61fb      	str	r3, [r7, #28]
 8032aa2:	f04f 0803 	mov.w	r8, #3
 8032aa6:	e011      	b.n	8032acc <__ssvfscanf_r+0x268>
 8032aa8:	4b06      	ldr	r3, [pc, #24]	@ (8032ac4 <__ssvfscanf_r+0x260>)
 8032aaa:	61bb      	str	r3, [r7, #24]
 8032aac:	230a      	movs	r3, #10
 8032aae:	e7f7      	b.n	8032aa0 <__ssvfscanf_r+0x23c>
 8032ab0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8032ab4:	4b03      	ldr	r3, [pc, #12]	@ (8032ac4 <__ssvfscanf_r+0x260>)
 8032ab6:	61bb      	str	r3, [r7, #24]
 8032ab8:	2310      	movs	r3, #16
 8032aba:	e7f1      	b.n	8032aa0 <__ssvfscanf_r+0x23c>
 8032abc:	0803c8dd 	.word	0x0803c8dd
 8032ac0:	0802c7f9 	.word	0x0802c7f9
 8032ac4:	080355f9 	.word	0x080355f9
 8032ac8:	f04f 0804 	mov.w	r8, #4
 8032acc:	6863      	ldr	r3, [r4, #4]
 8032ace:	2b00      	cmp	r3, #0
 8032ad0:	dd4e      	ble.n	8032b70 <__ssvfscanf_r+0x30c>
 8032ad2:	0673      	lsls	r3, r6, #25
 8032ad4:	d407      	bmi.n	8032ae6 <__ssvfscanf_r+0x282>
 8032ad6:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 8032dd4 <__ssvfscanf_r+0x570>
 8032ada:	6823      	ldr	r3, [r4, #0]
 8032adc:	781a      	ldrb	r2, [r3, #0]
 8032ade:	f819 2002 	ldrb.w	r2, [r9, r2]
 8032ae2:	0710      	lsls	r0, r2, #28
 8032ae4:	d44b      	bmi.n	8032b7e <__ssvfscanf_r+0x31a>
 8032ae6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8032aea:	f1b8 0f03 	cmp.w	r8, #3
 8032aee:	d858      	bhi.n	8032ba2 <__ssvfscanf_r+0x33e>
 8032af0:	e8df f018 	tbh	[pc, r8, lsl #1]
 8032af4:	037801c1 	.word	0x037801c1
 8032af8:	05f30514 	.word	0x05f30514
 8032afc:	f046 0601 	orr.w	r6, r6, #1
 8032b00:	f04f 0802 	mov.w	r8, #2
 8032b04:	e7e2      	b.n	8032acc <__ssvfscanf_r+0x268>
 8032b06:	6979      	ldr	r1, [r7, #20]
 8032b08:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8032b0c:	f001 fd1d 	bl	803454a <__sccl>
 8032b10:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8032b14:	6178      	str	r0, [r7, #20]
 8032b16:	f04f 0801 	mov.w	r8, #1
 8032b1a:	e7d7      	b.n	8032acc <__ssvfscanf_r+0x268>
 8032b1c:	f046 0601 	orr.w	r6, r6, #1
 8032b20:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8032b24:	f04f 0800 	mov.w	r8, #0
 8032b28:	e7d0      	b.n	8032acc <__ssvfscanf_r+0x268>
 8032b2a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8032b2e:	e7c1      	b.n	8032ab4 <__ssvfscanf_r+0x250>
 8032b30:	06f1      	lsls	r1, r6, #27
 8032b32:	f53f aeb2 	bmi.w	803289a <__ssvfscanf_r+0x36>
 8032b36:	0732      	lsls	r2, r6, #28
 8032b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8032b3c:	d502      	bpl.n	8032b44 <__ssvfscanf_r+0x2e0>
 8032b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032b40:	701a      	strb	r2, [r3, #0]
 8032b42:	e6aa      	b.n	803289a <__ssvfscanf_r+0x36>
 8032b44:	0770      	lsls	r0, r6, #29
 8032b46:	d502      	bpl.n	8032b4e <__ssvfscanf_r+0x2ea>
 8032b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032b4a:	801a      	strh	r2, [r3, #0]
 8032b4c:	e6a5      	b.n	803289a <__ssvfscanf_r+0x36>
 8032b4e:	07f1      	lsls	r1, r6, #31
 8032b50:	d502      	bpl.n	8032b58 <__ssvfscanf_r+0x2f4>
 8032b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032b54:	601a      	str	r2, [r3, #0]
 8032b56:	e6a0      	b.n	803289a <__ssvfscanf_r+0x36>
 8032b58:	07b2      	lsls	r2, r6, #30
 8032b5a:	d5fa      	bpl.n	8032b52 <__ssvfscanf_r+0x2ee>
 8032b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032b5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8032b60:	17d2      	asrs	r2, r2, #31
 8032b62:	e9c3 1200 	strd	r1, r2, [r3]
 8032b66:	e698      	b.n	803289a <__ssvfscanf_r+0x36>
 8032b68:	4b99      	ldr	r3, [pc, #612]	@ (8032dd0 <__ssvfscanf_r+0x56c>)
 8032b6a:	61bb      	str	r3, [r7, #24]
 8032b6c:	2300      	movs	r3, #0
 8032b6e:	e797      	b.n	8032aa0 <__ssvfscanf_r+0x23c>
 8032b70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032b72:	4621      	mov	r1, r4
 8032b74:	f7fd fcc1 	bl	80304fa <__ssrefill_r>
 8032b78:	2800      	cmp	r0, #0
 8032b7a:	d0aa      	beq.n	8032ad2 <__ssvfscanf_r+0x26e>
 8032b7c:	e734      	b.n	80329e8 <__ssvfscanf_r+0x184>
 8032b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032b80:	3201      	adds	r2, #1
 8032b82:	633a      	str	r2, [r7, #48]	@ 0x30
 8032b84:	6862      	ldr	r2, [r4, #4]
 8032b86:	3a01      	subs	r2, #1
 8032b88:	2a00      	cmp	r2, #0
 8032b8a:	6062      	str	r2, [r4, #4]
 8032b8c:	dd02      	ble.n	8032b94 <__ssvfscanf_r+0x330>
 8032b8e:	3301      	adds	r3, #1
 8032b90:	6023      	str	r3, [r4, #0]
 8032b92:	e7a2      	b.n	8032ada <__ssvfscanf_r+0x276>
 8032b94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032b96:	4621      	mov	r1, r4
 8032b98:	f7fd fcaf 	bl	80304fa <__ssrefill_r>
 8032b9c:	2800      	cmp	r0, #0
 8032b9e:	d09c      	beq.n	8032ada <__ssvfscanf_r+0x276>
 8032ba0:	e722      	b.n	80329e8 <__ssvfscanf_r+0x184>
 8032ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032ba4:	2b01      	cmp	r3, #1
 8032ba6:	bf38      	it	cc
 8032ba8:	2301      	movcc	r3, #1
 8032baa:	4698      	mov	r8, r3
 8032bac:	f016 0301 	ands.w	r3, r6, #1
 8032bb0:	f006 0b10 	and.w	fp, r6, #16
 8032bb4:	f000 80eb 	beq.w	8032d8e <__ssvfscanf_r+0x52a>
 8032bb8:	f1bb 0f00 	cmp.w	fp, #0
 8032bbc:	f040 8085 	bne.w	8032cca <__ssvfscanf_r+0x466>
 8032bc0:	462b      	mov	r3, r5
 8032bc2:	0631      	lsls	r1, r6, #24
 8032bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8032bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032bca:	f140 8085 	bpl.w	8032cd8 <__ssvfscanf_r+0x474>
 8032bce:	b13d      	cbz	r5, 8032be0 <__ssvfscanf_r+0x37c>
 8032bd0:	2080      	movs	r0, #128	@ 0x80
 8032bd2:	f7fc fcd3 	bl	802f57c <malloc>
 8032bd6:	4606      	mov	r6, r0
 8032bd8:	b998      	cbnz	r0, 8032c02 <__ssvfscanf_r+0x39e>
 8032bda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8032bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8032be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032be2:	b143      	cbz	r3, 8032bf6 <__ssvfscanf_r+0x392>
 8032be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032be6:	3301      	adds	r3, #1
 8032be8:	f000 87a4 	beq.w	8033b34 <__ssvfscanf_r+0x12d0>
 8032bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032bee:	6818      	ldr	r0, [r3, #0]
 8032bf0:	b108      	cbz	r0, 8032bf6 <__ssvfscanf_r+0x392>
 8032bf2:	f7fc fccb 	bl	802f58c <free>
 8032bf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8032bf8:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8032bfc:	46bd      	mov	sp, r7
 8032bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032c04:	6028      	str	r0, [r5, #0]
 8032c06:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8032c0a:	889b      	ldrh	r3, [r3, #4]
 8032c0c:	4599      	cmp	r9, r3
 8032c0e:	d314      	bcc.n	8032c3a <__ssvfscanf_r+0x3d6>
 8032c10:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032c14:	4293      	cmp	r3, r2
 8032c16:	f200 878d 	bhi.w	8033b34 <__ssvfscanf_r+0x12d0>
 8032c1a:	3308      	adds	r3, #8
 8032c1c:	fa1f fa83 	uxth.w	sl, r3
 8032c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032c22:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8032c26:	6818      	ldr	r0, [r3, #0]
 8032c28:	f001 fc32 	bl	8034490 <realloc>
 8032c2c:	2800      	cmp	r0, #0
 8032c2e:	f000 8781 	beq.w	8033b34 <__ssvfscanf_r+0x12d0>
 8032c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032c34:	6018      	str	r0, [r3, #0]
 8032c36:	f8a3 a004 	strh.w	sl, [r3, #4]
 8032c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032c3c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032c3e:	681b      	ldr	r3, [r3, #0]
 8032c40:	f109 0201 	add.w	r2, r9, #1
 8032c44:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8032c48:	46aa      	mov	sl, r5
 8032c4a:	80ca      	strh	r2, [r1, #6]
 8032c4c:	4635      	mov	r5, r6
 8032c4e:	f04f 0920 	mov.w	r9, #32
 8032c52:	2200      	movs	r2, #0
 8032c54:	613a      	str	r2, [r7, #16]
 8032c56:	f7fb fbd3 	bl	802e400 <__locale_mb_cur_max>
 8032c5a:	693a      	ldr	r2, [r7, #16]
 8032c5c:	4290      	cmp	r0, r2
 8032c5e:	f43f aec3 	beq.w	80329e8 <__ssvfscanf_r+0x184>
 8032c62:	6821      	ldr	r1, [r4, #0]
 8032c64:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 8032c68:	f811 0b01 	ldrb.w	r0, [r1], #1
 8032c6c:	f80c 0002 	strb.w	r0, [ip, r2]
 8032c70:	1c53      	adds	r3, r2, #1
 8032c72:	6862      	ldr	r2, [r4, #4]
 8032c74:	3a01      	subs	r2, #1
 8032c76:	e9c4 1200 	strd	r1, r2, [r4]
 8032c7a:	6a3a      	ldr	r2, [r7, #32]
 8032c7c:	2a03      	cmp	r2, #3
 8032c7e:	d102      	bne.n	8032c86 <__ssvfscanf_r+0x422>
 8032c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8032c82:	2a04      	cmp	r2, #4
 8032c84:	d007      	beq.n	8032c96 <__ssvfscanf_r+0x432>
 8032c86:	2208      	movs	r2, #8
 8032c88:	2100      	movs	r1, #0
 8032c8a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032c8e:	623b      	str	r3, [r7, #32]
 8032c90:	f7fa fa2e 	bl	802d0f0 <memset>
 8032c94:	6a3b      	ldr	r3, [r7, #32]
 8032c96:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8032c9a:	9200      	str	r2, [sp, #0]
 8032c9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032c9e:	613b      	str	r3, [r7, #16]
 8032ca0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032ca4:	4629      	mov	r1, r5
 8032ca6:	f002 ffad 	bl	8035c04 <_mbrtowc_r>
 8032caa:	1c42      	adds	r2, r0, #1
 8032cac:	6238      	str	r0, [r7, #32]
 8032cae:	f43f ae9b 	beq.w	80329e8 <__ssvfscanf_r+0x184>
 8032cb2:	693b      	ldr	r3, [r7, #16]
 8032cb4:	b9b8      	cbnz	r0, 8032ce6 <__ssvfscanf_r+0x482>
 8032cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032cb8:	441a      	add	r2, r3
 8032cba:	4613      	mov	r3, r2
 8032cbc:	f1bb 0f00 	cmp.w	fp, #0
 8032cc0:	d00e      	beq.n	8032ce0 <__ssvfscanf_r+0x47c>
 8032cc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8032cc4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8032cc8:	e019      	b.n	8032cfe <__ssvfscanf_r+0x49a>
 8032cca:	f04f 0900 	mov.w	r9, #0
 8032cce:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8032cd0:	464e      	mov	r6, r9
 8032cd2:	46ca      	mov	sl, r9
 8032cd4:	464d      	mov	r5, r9
 8032cd6:	e7bc      	b.n	8032c52 <__ssvfscanf_r+0x3ee>
 8032cd8:	46d9      	mov	r9, fp
 8032cda:	465e      	mov	r6, fp
 8032cdc:	46da      	mov	sl, fp
 8032cde:	e7b8      	b.n	8032c52 <__ssvfscanf_r+0x3ee>
 8032ce0:	f8c5 b000 	str.w	fp, [r5]
 8032ce4:	e7ed      	b.n	8032cc2 <__ssvfscanf_r+0x45e>
 8032ce6:	6a3a      	ldr	r2, [r7, #32]
 8032ce8:	3202      	adds	r2, #2
 8032cea:	d025      	beq.n	8032d38 <__ssvfscanf_r+0x4d4>
 8032cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032cee:	441a      	add	r2, r3
 8032cf0:	6a3b      	ldr	r3, [r7, #32]
 8032cf2:	633a      	str	r2, [r7, #48]	@ 0x30
 8032cf4:	2b03      	cmp	r3, #3
 8032cf6:	d1e5      	bne.n	8032cc4 <__ssvfscanf_r+0x460>
 8032cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032cfa:	2b04      	cmp	r3, #4
 8032cfc:	d1e2      	bne.n	8032cc4 <__ssvfscanf_r+0x460>
 8032cfe:	f1bb 0f00 	cmp.w	fp, #0
 8032d02:	d117      	bne.n	8032d34 <__ssvfscanf_r+0x4d0>
 8032d04:	f1ba 0f00 	cmp.w	sl, #0
 8032d08:	d013      	beq.n	8032d32 <__ssvfscanf_r+0x4ce>
 8032d0a:	1bab      	subs	r3, r5, r6
 8032d0c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8032d10:	d80f      	bhi.n	8032d32 <__ssvfscanf_r+0x4ce>
 8032d12:	4630      	mov	r0, r6
 8032d14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8032d18:	613b      	str	r3, [r7, #16]
 8032d1a:	f001 fbb9 	bl	8034490 <realloc>
 8032d1e:	4606      	mov	r6, r0
 8032d20:	2800      	cmp	r0, #0
 8032d22:	f43f af5a 	beq.w	8032bda <__ssvfscanf_r+0x376>
 8032d26:	693b      	ldr	r3, [r7, #16]
 8032d28:	f8ca 0000 	str.w	r0, [sl]
 8032d2c:	18c5      	adds	r5, r0, r3
 8032d2e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8032d32:	3504      	adds	r5, #4
 8032d34:	2200      	movs	r2, #0
 8032d36:	e000      	b.n	8032d3a <__ssvfscanf_r+0x4d6>
 8032d38:	461a      	mov	r2, r3
 8032d3a:	6863      	ldr	r3, [r4, #4]
 8032d3c:	2b00      	cmp	r3, #0
 8032d3e:	dc14      	bgt.n	8032d6a <__ssvfscanf_r+0x506>
 8032d40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032d42:	613a      	str	r2, [r7, #16]
 8032d44:	4621      	mov	r1, r4
 8032d46:	f7fd fbd8 	bl	80304fa <__ssrefill_r>
 8032d4a:	693a      	ldr	r2, [r7, #16]
 8032d4c:	b168      	cbz	r0, 8032d6a <__ssvfscanf_r+0x506>
 8032d4e:	2a00      	cmp	r2, #0
 8032d50:	f47f ae4a 	bne.w	80329e8 <__ssvfscanf_r+0x184>
 8032d54:	f1ba 0f00 	cmp.w	sl, #0
 8032d58:	d10c      	bne.n	8032d74 <__ssvfscanf_r+0x510>
 8032d5a:	f1bb 0f00 	cmp.w	fp, #0
 8032d5e:	d102      	bne.n	8032d66 <__ssvfscanf_r+0x502>
 8032d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032d62:	3301      	adds	r3, #1
 8032d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8032d66:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8032d68:	e597      	b.n	803289a <__ssvfscanf_r+0x36>
 8032d6a:	f1b8 0f00 	cmp.w	r8, #0
 8032d6e:	f47f af71 	bne.w	8032c54 <__ssvfscanf_r+0x3f0>
 8032d72:	e7ef      	b.n	8032d54 <__ssvfscanf_r+0x4f0>
 8032d74:	1ba9      	subs	r1, r5, r6
 8032d76:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8032d7a:	d9ee      	bls.n	8032d5a <__ssvfscanf_r+0x4f6>
 8032d7c:	f8da 0000 	ldr.w	r0, [sl]
 8032d80:	f001 fb86 	bl	8034490 <realloc>
 8032d84:	2800      	cmp	r0, #0
 8032d86:	d0e8      	beq.n	8032d5a <__ssvfscanf_r+0x4f6>
 8032d88:	f8ca 0000 	str.w	r0, [sl]
 8032d8c:	e7e5      	b.n	8032d5a <__ssvfscanf_r+0x4f6>
 8032d8e:	f1bb 0f00 	cmp.w	fp, #0
 8032d92:	d021      	beq.n	8032dd8 <__ssvfscanf_r+0x574>
 8032d94:	461e      	mov	r6, r3
 8032d96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8032d9a:	4598      	cmp	r8, r3
 8032d9c:	dd11      	ble.n	8032dc2 <__ssvfscanf_r+0x55e>
 8032d9e:	441a      	add	r2, r3
 8032da0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032da2:	6022      	str	r2, [r4, #0]
 8032da4:	4621      	mov	r1, r4
 8032da6:	441e      	add	r6, r3
 8032da8:	eba8 0803 	sub.w	r8, r8, r3
 8032dac:	f7fd fba5 	bl	80304fa <__ssrefill_r>
 8032db0:	2800      	cmp	r0, #0
 8032db2:	d0f0      	beq.n	8032d96 <__ssvfscanf_r+0x532>
 8032db4:	2e00      	cmp	r6, #0
 8032db6:	f43f ae17 	beq.w	80329e8 <__ssvfscanf_r+0x184>
 8032dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032dbc:	4433      	add	r3, r6
 8032dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8032dc0:	e56b      	b.n	803289a <__ssvfscanf_r+0x36>
 8032dc2:	eba3 0308 	sub.w	r3, r3, r8
 8032dc6:	4442      	add	r2, r8
 8032dc8:	4446      	add	r6, r8
 8032dca:	6063      	str	r3, [r4, #4]
 8032dcc:	6022      	str	r2, [r4, #0]
 8032dce:	e7f4      	b.n	8032dba <__ssvfscanf_r+0x556>
 8032dd0:	0802c7f9 	.word	0x0802c7f9
 8032dd4:	0803c8dd 	.word	0x0803c8dd
 8032dd8:	46a9      	mov	r9, r5
 8032dda:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8032dde:	f859 5b04 	ldr.w	r5, [r9], #4
 8032de2:	d02c      	beq.n	8032e3e <__ssvfscanf_r+0x5da>
 8032de4:	2d00      	cmp	r5, #0
 8032de6:	f43f ae33 	beq.w	8032a50 <__ssvfscanf_r+0x1ec>
 8032dea:	4640      	mov	r0, r8
 8032dec:	f7fc fbc6 	bl	802f57c <malloc>
 8032df0:	4682      	mov	sl, r0
 8032df2:	2800      	cmp	r0, #0
 8032df4:	f43f adfd 	beq.w	80329f2 <__ssvfscanf_r+0x18e>
 8032df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032dfa:	6028      	str	r0, [r5, #0]
 8032dfc:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8032e00:	889e      	ldrh	r6, [r3, #4]
 8032e02:	45b3      	cmp	fp, r6
 8032e04:	d311      	bcc.n	8032e2a <__ssvfscanf_r+0x5c6>
 8032e06:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8032e0a:	429e      	cmp	r6, r3
 8032e0c:	f200 8692 	bhi.w	8033b34 <__ssvfscanf_r+0x12d0>
 8032e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032e12:	3608      	adds	r6, #8
 8032e14:	b2b6      	uxth	r6, r6
 8032e16:	6818      	ldr	r0, [r3, #0]
 8032e18:	00b1      	lsls	r1, r6, #2
 8032e1a:	f001 fb39 	bl	8034490 <realloc>
 8032e1e:	2800      	cmp	r0, #0
 8032e20:	f000 8688 	beq.w	8033b34 <__ssvfscanf_r+0x12d0>
 8032e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032e26:	6018      	str	r0, [r3, #0]
 8032e28:	809e      	strh	r6, [r3, #4]
 8032e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032e2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032e2e:	681b      	ldr	r3, [r3, #0]
 8032e30:	f10b 0201 	add.w	r2, fp, #1
 8032e34:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8032e38:	462e      	mov	r6, r5
 8032e3a:	80ca      	strh	r2, [r1, #6]
 8032e3c:	4655      	mov	r5, sl
 8032e3e:	9400      	str	r4, [sp, #0]
 8032e40:	4629      	mov	r1, r5
 8032e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032e44:	4643      	mov	r3, r8
 8032e46:	2201      	movs	r2, #1
 8032e48:	f7fd fb74 	bl	8030534 <_sfread_r>
 8032e4c:	4605      	mov	r5, r0
 8032e4e:	2800      	cmp	r0, #0
 8032e50:	f43f adca 	beq.w	80329e8 <__ssvfscanf_r+0x184>
 8032e54:	b13e      	cbz	r6, 8032e66 <__ssvfscanf_r+0x602>
 8032e56:	4580      	cmp	r8, r0
 8032e58:	d905      	bls.n	8032e66 <__ssvfscanf_r+0x602>
 8032e5a:	4601      	mov	r1, r0
 8032e5c:	6830      	ldr	r0, [r6, #0]
 8032e5e:	f001 fb17 	bl	8034490 <realloc>
 8032e62:	b100      	cbz	r0, 8032e66 <__ssvfscanf_r+0x602>
 8032e64:	6030      	str	r0, [r6, #0]
 8032e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032e68:	442b      	add	r3, r5
 8032e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8032e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032e6e:	3301      	adds	r3, #1
 8032e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8032e72:	464d      	mov	r5, r9
 8032e74:	e511      	b.n	803289a <__ssvfscanf_r+0x36>
 8032e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032e78:	2b00      	cmp	r3, #0
 8032e7a:	bf08      	it	eq
 8032e7c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8032e80:	f016 0801 	ands.w	r8, r6, #1
 8032e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032e86:	f006 0a10 	and.w	sl, r6, #16
 8032e8a:	f000 8101 	beq.w	8033090 <__ssvfscanf_r+0x82c>
 8032e8e:	f1ba 0f00 	cmp.w	sl, #0
 8032e92:	f040 80a4 	bne.w	8032fde <__ssvfscanf_r+0x77a>
 8032e96:	462b      	mov	r3, r5
 8032e98:	f853 5b04 	ldr.w	r5, [r3], #4
 8032e9c:	60fb      	str	r3, [r7, #12]
 8032e9e:	0633      	lsls	r3, r6, #24
 8032ea0:	f140 80a5 	bpl.w	8032fee <__ssvfscanf_r+0x78a>
 8032ea4:	2d00      	cmp	r5, #0
 8032ea6:	f43f ae9b 	beq.w	8032be0 <__ssvfscanf_r+0x37c>
 8032eaa:	2080      	movs	r0, #128	@ 0x80
 8032eac:	f7fc fb66 	bl	802f57c <malloc>
 8032eb0:	4680      	mov	r8, r0
 8032eb2:	2800      	cmp	r0, #0
 8032eb4:	f43f ae91 	beq.w	8032bda <__ssvfscanf_r+0x376>
 8032eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032eba:	6028      	str	r0, [r5, #0]
 8032ebc:	88de      	ldrh	r6, [r3, #6]
 8032ebe:	889b      	ldrh	r3, [r3, #4]
 8032ec0:	429e      	cmp	r6, r3
 8032ec2:	d314      	bcc.n	8032eee <__ssvfscanf_r+0x68a>
 8032ec4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032ec8:	4293      	cmp	r3, r2
 8032eca:	f200 8633 	bhi.w	8033b34 <__ssvfscanf_r+0x12d0>
 8032ece:	3308      	adds	r3, #8
 8032ed0:	fa1f f983 	uxth.w	r9, r3
 8032ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032ed6:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8032eda:	6818      	ldr	r0, [r3, #0]
 8032edc:	f001 fad8 	bl	8034490 <realloc>
 8032ee0:	2800      	cmp	r0, #0
 8032ee2:	f000 8627 	beq.w	8033b34 <__ssvfscanf_r+0x12d0>
 8032ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032ee8:	6018      	str	r0, [r3, #0]
 8032eea:	f8a3 9004 	strh.w	r9, [r3, #4]
 8032eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032ef0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032ef2:	681b      	ldr	r3, [r3, #0]
 8032ef4:	1c72      	adds	r2, r6, #1
 8032ef6:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8032efa:	46ab      	mov	fp, r5
 8032efc:	80ca      	strh	r2, [r1, #6]
 8032efe:	4645      	mov	r5, r8
 8032f00:	f04f 0920 	mov.w	r9, #32
 8032f04:	2600      	movs	r6, #0
 8032f06:	f7fb fa7b 	bl	802e400 <__locale_mb_cur_max>
 8032f0a:	42b0      	cmp	r0, r6
 8032f0c:	f43f ad6c 	beq.w	80329e8 <__ssvfscanf_r+0x184>
 8032f10:	1c73      	adds	r3, r6, #1
 8032f12:	613b      	str	r3, [r7, #16]
 8032f14:	6823      	ldr	r3, [r4, #0]
 8032f16:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032f1e:	558a      	strb	r2, [r1, r6]
 8032f20:	6862      	ldr	r2, [r4, #4]
 8032f22:	3a01      	subs	r2, #1
 8032f24:	e9c4 3200 	strd	r3, r2, [r4]
 8032f28:	6a3b      	ldr	r3, [r7, #32]
 8032f2a:	2b03      	cmp	r3, #3
 8032f2c:	d102      	bne.n	8032f34 <__ssvfscanf_r+0x6d0>
 8032f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8032f30:	2b04      	cmp	r3, #4
 8032f32:	d005      	beq.n	8032f40 <__ssvfscanf_r+0x6dc>
 8032f34:	2208      	movs	r2, #8
 8032f36:	2100      	movs	r1, #0
 8032f38:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8032f3c:	f7fa f8d8 	bl	802d0f0 <memset>
 8032f40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8032f44:	9300      	str	r3, [sp, #0]
 8032f46:	693b      	ldr	r3, [r7, #16]
 8032f48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032f4a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032f4e:	4629      	mov	r1, r5
 8032f50:	f002 fe58 	bl	8035c04 <_mbrtowc_r>
 8032f54:	1c46      	adds	r6, r0, #1
 8032f56:	6238      	str	r0, [r7, #32]
 8032f58:	f43f ad46 	beq.w	80329e8 <__ssvfscanf_r+0x184>
 8032f5c:	2800      	cmp	r0, #0
 8032f5e:	d14a      	bne.n	8032ff6 <__ssvfscanf_r+0x792>
 8032f60:	6028      	str	r0, [r5, #0]
 8032f62:	682e      	ldr	r6, [r5, #0]
 8032f64:	1c70      	adds	r0, r6, #1
 8032f66:	d056      	beq.n	8033016 <__ssvfscanf_r+0x7b2>
 8032f68:	2208      	movs	r2, #8
 8032f6a:	2100      	movs	r1, #0
 8032f6c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032f70:	f7fa f8be 	bl	802d0f0 <memset>
 8032f74:	4b9a      	ldr	r3, [pc, #616]	@ (80331e0 <__ssvfscanf_r+0x97c>)
 8032f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8032f7c:	60bb      	str	r3, [r7, #8]
 8032f7e:	4632      	mov	r2, r6
 8032f80:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8032f84:	68be      	ldr	r6, [r7, #8]
 8032f86:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8032f8a:	47b0      	blx	r6
 8032f8c:	2801      	cmp	r0, #1
 8032f8e:	d144      	bne.n	803301a <__ssvfscanf_r+0x7b6>
 8032f90:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8032f94:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8032f98:	5c9b      	ldrb	r3, [r3, r2]
 8032f9a:	2b00      	cmp	r3, #0
 8032f9c:	d148      	bne.n	8033030 <__ssvfscanf_r+0x7cc>
 8032f9e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 8032fa2:	693b      	ldr	r3, [r7, #16]
 8032fa4:	2b00      	cmp	r3, #0
 8032fa6:	d13a      	bne.n	803301e <__ssvfscanf_r+0x7ba>
 8032fa8:	f1ba 0f00 	cmp.w	sl, #0
 8032fac:	d115      	bne.n	8032fda <__ssvfscanf_r+0x776>
 8032fae:	f8c5 a000 	str.w	sl, [r5]
 8032fb2:	f1bb 0f00 	cmp.w	fp, #0
 8032fb6:	d00d      	beq.n	8032fd4 <__ssvfscanf_r+0x770>
 8032fb8:	eba5 0108 	sub.w	r1, r5, r8
 8032fbc:	108b      	asrs	r3, r1, #2
 8032fbe:	3301      	adds	r3, #1
 8032fc0:	4599      	cmp	r9, r3
 8032fc2:	d907      	bls.n	8032fd4 <__ssvfscanf_r+0x770>
 8032fc4:	f8db 0000 	ldr.w	r0, [fp]
 8032fc8:	3104      	adds	r1, #4
 8032fca:	f001 fa61 	bl	8034490 <realloc>
 8032fce:	b108      	cbz	r0, 8032fd4 <__ssvfscanf_r+0x770>
 8032fd0:	f8cb 0000 	str.w	r0, [fp]
 8032fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032fd6:	3301      	adds	r3, #1
 8032fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8032fda:	68fd      	ldr	r5, [r7, #12]
 8032fdc:	e45d      	b.n	803289a <__ssvfscanf_r+0x36>
 8032fde:	f04f 0900 	mov.w	r9, #0
 8032fe2:	60fd      	str	r5, [r7, #12]
 8032fe4:	46c8      	mov	r8, r9
 8032fe6:	46cb      	mov	fp, r9
 8032fe8:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8032fec:	e78a      	b.n	8032f04 <__ssvfscanf_r+0x6a0>
 8032fee:	46d1      	mov	r9, sl
 8032ff0:	46d0      	mov	r8, sl
 8032ff2:	46d3      	mov	fp, sl
 8032ff4:	e786      	b.n	8032f04 <__ssvfscanf_r+0x6a0>
 8032ff6:	6a3b      	ldr	r3, [r7, #32]
 8032ff8:	3302      	adds	r3, #2
 8032ffa:	d1b2      	bne.n	8032f62 <__ssvfscanf_r+0x6fe>
 8032ffc:	693e      	ldr	r6, [r7, #16]
 8032ffe:	6863      	ldr	r3, [r4, #4]
 8033000:	2b00      	cmp	r3, #0
 8033002:	dc40      	bgt.n	8033086 <__ssvfscanf_r+0x822>
 8033004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033006:	4621      	mov	r1, r4
 8033008:	f7fd fa77 	bl	80304fa <__ssrefill_r>
 803300c:	2800      	cmp	r0, #0
 803300e:	d03a      	beq.n	8033086 <__ssvfscanf_r+0x822>
 8033010:	2e00      	cmp	r6, #0
 8033012:	d0c9      	beq.n	8032fa8 <__ssvfscanf_r+0x744>
 8033014:	e4e8      	b.n	80329e8 <__ssvfscanf_r+0x184>
 8033016:	4632      	mov	r2, r6
 8033018:	e7bc      	b.n	8032f94 <__ssvfscanf_r+0x730>
 803301a:	2200      	movs	r2, #0
 803301c:	e7ba      	b.n	8032f94 <__ssvfscanf_r+0x730>
 803301e:	693b      	ldr	r3, [r7, #16]
 8033020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033022:	3b01      	subs	r3, #1
 8033024:	4622      	mov	r2, r4
 8033026:	5cf1      	ldrb	r1, [r6, r3]
 8033028:	613b      	str	r3, [r7, #16]
 803302a:	f7fd fa2b 	bl	8030484 <_sungetc_r>
 803302e:	e7b8      	b.n	8032fa2 <__ssvfscanf_r+0x73e>
 8033030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033032:	693a      	ldr	r2, [r7, #16]
 8033034:	4413      	add	r3, r2
 8033036:	633b      	str	r3, [r7, #48]	@ 0x30
 8033038:	6a3b      	ldr	r3, [r7, #32]
 803303a:	2b03      	cmp	r3, #3
 803303c:	d102      	bne.n	8033044 <__ssvfscanf_r+0x7e0>
 803303e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8033040:	2b04      	cmp	r3, #4
 8033042:	d002      	beq.n	803304a <__ssvfscanf_r+0x7e6>
 8033044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033046:	3b01      	subs	r3, #1
 8033048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803304a:	f1ba 0f00 	cmp.w	sl, #0
 803304e:	d118      	bne.n	8033082 <__ssvfscanf_r+0x81e>
 8033050:	3504      	adds	r5, #4
 8033052:	f1bb 0f00 	cmp.w	fp, #0
 8033056:	d014      	beq.n	8033082 <__ssvfscanf_r+0x81e>
 8033058:	eba5 0608 	sub.w	r6, r5, r8
 803305c:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8033060:	d80d      	bhi.n	803307e <__ssvfscanf_r+0x81a>
 8033062:	4640      	mov	r0, r8
 8033064:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8033068:	f001 fa12 	bl	8034490 <realloc>
 803306c:	4680      	mov	r8, r0
 803306e:	2800      	cmp	r0, #0
 8033070:	f43f adb3 	beq.w	8032bda <__ssvfscanf_r+0x376>
 8033074:	1985      	adds	r5, r0, r6
 8033076:	f8cb 0000 	str.w	r0, [fp]
 803307a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803307e:	4656      	mov	r6, sl
 8033080:	e7bd      	b.n	8032ffe <__ssvfscanf_r+0x79a>
 8033082:	2600      	movs	r6, #0
 8033084:	e7bb      	b.n	8032ffe <__ssvfscanf_r+0x79a>
 8033086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033088:	2b00      	cmp	r3, #0
 803308a:	f47f af3c 	bne.w	8032f06 <__ssvfscanf_r+0x6a2>
 803308e:	e78b      	b.n	8032fa8 <__ssvfscanf_r+0x744>
 8033090:	f1ba 0f00 	cmp.w	sl, #0
 8033094:	d01e      	beq.n	80330d4 <__ssvfscanf_r+0x870>
 8033096:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 803309a:	6823      	ldr	r3, [r4, #0]
 803309c:	781a      	ldrb	r2, [r3, #0]
 803309e:	5cb2      	ldrb	r2, [r6, r2]
 80330a0:	b91a      	cbnz	r2, 80330aa <__ssvfscanf_r+0x846>
 80330a2:	f1b8 0f00 	cmp.w	r8, #0
 80330a6:	d112      	bne.n	80330ce <__ssvfscanf_r+0x86a>
 80330a8:	e4d2      	b.n	8032a50 <__ssvfscanf_r+0x1ec>
 80330aa:	3301      	adds	r3, #1
 80330ac:	6862      	ldr	r2, [r4, #4]
 80330ae:	6023      	str	r3, [r4, #0]
 80330b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80330b2:	f108 0801 	add.w	r8, r8, #1
 80330b6:	3a01      	subs	r2, #1
 80330b8:	4543      	cmp	r3, r8
 80330ba:	6062      	str	r2, [r4, #4]
 80330bc:	d007      	beq.n	80330ce <__ssvfscanf_r+0x86a>
 80330be:	2a00      	cmp	r2, #0
 80330c0:	dceb      	bgt.n	803309a <__ssvfscanf_r+0x836>
 80330c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80330c4:	4621      	mov	r1, r4
 80330c6:	f7fd fa18 	bl	80304fa <__ssrefill_r>
 80330ca:	2800      	cmp	r0, #0
 80330cc:	d0e5      	beq.n	803309a <__ssvfscanf_r+0x836>
 80330ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80330d0:	4443      	add	r3, r8
 80330d2:	e674      	b.n	8032dbe <__ssvfscanf_r+0x55a>
 80330d4:	46a9      	mov	r9, r5
 80330d6:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80330da:	f859 8b04 	ldr.w	r8, [r9], #4
 80330de:	d07d      	beq.n	80331dc <__ssvfscanf_r+0x978>
 80330e0:	f1b8 0f00 	cmp.w	r8, #0
 80330e4:	f43f acb4 	beq.w	8032a50 <__ssvfscanf_r+0x1ec>
 80330e8:	2020      	movs	r0, #32
 80330ea:	f7fc fa47 	bl	802f57c <malloc>
 80330ee:	4606      	mov	r6, r0
 80330f0:	2800      	cmp	r0, #0
 80330f2:	f43f ac7e 	beq.w	80329f2 <__ssvfscanf_r+0x18e>
 80330f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80330f8:	f8c8 0000 	str.w	r0, [r8]
 80330fc:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8033100:	889d      	ldrh	r5, [r3, #4]
 8033102:	45aa      	cmp	sl, r5
 8033104:	d311      	bcc.n	803312a <__ssvfscanf_r+0x8c6>
 8033106:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803310a:	429d      	cmp	r5, r3
 803310c:	f200 8512 	bhi.w	8033b34 <__ssvfscanf_r+0x12d0>
 8033110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033112:	3508      	adds	r5, #8
 8033114:	b2ad      	uxth	r5, r5
 8033116:	6818      	ldr	r0, [r3, #0]
 8033118:	00a9      	lsls	r1, r5, #2
 803311a:	f001 f9b9 	bl	8034490 <realloc>
 803311e:	2800      	cmp	r0, #0
 8033120:	f000 8508 	beq.w	8033b34 <__ssvfscanf_r+0x12d0>
 8033124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033126:	6018      	str	r0, [r3, #0]
 8033128:	809d      	strh	r5, [r3, #4]
 803312a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803312c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803312e:	681b      	ldr	r3, [r3, #0]
 8033130:	f10a 0201 	add.w	r2, sl, #1
 8033134:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 8033138:	80ca      	strh	r2, [r1, #6]
 803313a:	46c2      	mov	sl, r8
 803313c:	46b0      	mov	r8, r6
 803313e:	2620      	movs	r6, #32
 8033140:	4645      	mov	r5, r8
 8033142:	6823      	ldr	r3, [r4, #0]
 8033144:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8033148:	781a      	ldrb	r2, [r3, #0]
 803314a:	5c8a      	ldrb	r2, [r1, r2]
 803314c:	b35a      	cbz	r2, 80331a6 <__ssvfscanf_r+0x942>
 803314e:	6862      	ldr	r2, [r4, #4]
 8033150:	3a01      	subs	r2, #1
 8033152:	6062      	str	r2, [r4, #4]
 8033154:	1c5a      	adds	r2, r3, #1
 8033156:	6022      	str	r2, [r4, #0]
 8033158:	781b      	ldrb	r3, [r3, #0]
 803315a:	f808 3b01 	strb.w	r3, [r8], #1
 803315e:	f1ba 0f00 	cmp.w	sl, #0
 8033162:	d010      	beq.n	8033186 <__ssvfscanf_r+0x922>
 8033164:	eba8 0b05 	sub.w	fp, r8, r5
 8033168:	45b3      	cmp	fp, r6
 803316a:	d30c      	bcc.n	8033186 <__ssvfscanf_r+0x922>
 803316c:	0076      	lsls	r6, r6, #1
 803316e:	4628      	mov	r0, r5
 8033170:	4631      	mov	r1, r6
 8033172:	f001 f98d 	bl	8034490 <realloc>
 8033176:	4605      	mov	r5, r0
 8033178:	2800      	cmp	r0, #0
 803317a:	f43f ac3a 	beq.w	80329f2 <__ssvfscanf_r+0x18e>
 803317e:	eb00 080b 	add.w	r8, r0, fp
 8033182:	f8ca 0000 	str.w	r0, [sl]
 8033186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033188:	3b01      	subs	r3, #1
 803318a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803318c:	d00b      	beq.n	80331a6 <__ssvfscanf_r+0x942>
 803318e:	6863      	ldr	r3, [r4, #4]
 8033190:	2b00      	cmp	r3, #0
 8033192:	dcd6      	bgt.n	8033142 <__ssvfscanf_r+0x8de>
 8033194:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033196:	4621      	mov	r1, r4
 8033198:	f7fd f9af 	bl	80304fa <__ssrefill_r>
 803319c:	2800      	cmp	r0, #0
 803319e:	d0d0      	beq.n	8033142 <__ssvfscanf_r+0x8de>
 80331a0:	45a8      	cmp	r8, r5
 80331a2:	f43f ac21 	beq.w	80329e8 <__ssvfscanf_r+0x184>
 80331a6:	ebb8 0505 	subs.w	r5, r8, r5
 80331aa:	f43f ac51 	beq.w	8032a50 <__ssvfscanf_r+0x1ec>
 80331ae:	2300      	movs	r3, #0
 80331b0:	f888 3000 	strb.w	r3, [r8]
 80331b4:	f1ba 0f00 	cmp.w	sl, #0
 80331b8:	d009      	beq.n	80331ce <__ssvfscanf_r+0x96a>
 80331ba:	1c69      	adds	r1, r5, #1
 80331bc:	428e      	cmp	r6, r1
 80331be:	d906      	bls.n	80331ce <__ssvfscanf_r+0x96a>
 80331c0:	f8da 0000 	ldr.w	r0, [sl]
 80331c4:	f001 f964 	bl	8034490 <realloc>
 80331c8:	b108      	cbz	r0, 80331ce <__ssvfscanf_r+0x96a>
 80331ca:	f8ca 0000 	str.w	r0, [sl]
 80331ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80331d0:	3301      	adds	r3, #1
 80331d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80331d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80331d6:	442b      	add	r3, r5
 80331d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80331da:	e64a      	b.n	8032e72 <__ssvfscanf_r+0x60e>
 80331dc:	46b2      	mov	sl, r6
 80331de:	e7af      	b.n	8033140 <__ssvfscanf_r+0x8dc>
 80331e0:	2000016c 	.word	0x2000016c
 80331e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80331e6:	2b00      	cmp	r3, #0
 80331e8:	bf08      	it	eq
 80331ea:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 80331ee:	f016 0901 	ands.w	r9, r6, #1
 80331f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80331f4:	f006 0810 	and.w	r8, r6, #16
 80331f8:	f000 80ef 	beq.w	80333da <__ssvfscanf_r+0xb76>
 80331fc:	f1b8 0f00 	cmp.w	r8, #0
 8033200:	f040 8098 	bne.w	8033334 <__ssvfscanf_r+0xad0>
 8033204:	462b      	mov	r3, r5
 8033206:	0631      	lsls	r1, r6, #24
 8033208:	f853 5b04 	ldr.w	r5, [r3], #4
 803320c:	613b      	str	r3, [r7, #16]
 803320e:	f140 8099 	bpl.w	8033344 <__ssvfscanf_r+0xae0>
 8033212:	2d00      	cmp	r5, #0
 8033214:	f43f ace4 	beq.w	8032be0 <__ssvfscanf_r+0x37c>
 8033218:	2080      	movs	r0, #128	@ 0x80
 803321a:	f7fc f9af 	bl	802f57c <malloc>
 803321e:	4606      	mov	r6, r0
 8033220:	2800      	cmp	r0, #0
 8033222:	f43f acda 	beq.w	8032bda <__ssvfscanf_r+0x376>
 8033226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033228:	6028      	str	r0, [r5, #0]
 803322a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 803322e:	889b      	ldrh	r3, [r3, #4]
 8033230:	4599      	cmp	r9, r3
 8033232:	d314      	bcc.n	803325e <__ssvfscanf_r+0x9fa>
 8033234:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8033238:	4293      	cmp	r3, r2
 803323a:	f200 847b 	bhi.w	8033b34 <__ssvfscanf_r+0x12d0>
 803323e:	3308      	adds	r3, #8
 8033240:	fa1f fa83 	uxth.w	sl, r3
 8033244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033246:	ea4f 018a 	mov.w	r1, sl, lsl #2
 803324a:	6818      	ldr	r0, [r3, #0]
 803324c:	f001 f920 	bl	8034490 <realloc>
 8033250:	2800      	cmp	r0, #0
 8033252:	f000 846f 	beq.w	8033b34 <__ssvfscanf_r+0x12d0>
 8033256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033258:	6018      	str	r0, [r3, #0]
 803325a:	f8a3 a004 	strh.w	sl, [r3, #4]
 803325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033260:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8033262:	681b      	ldr	r3, [r3, #0]
 8033264:	f109 0201 	add.w	r2, r9, #1
 8033268:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 803326c:	46aa      	mov	sl, r5
 803326e:	80ca      	strh	r2, [r1, #6]
 8033270:	4635      	mov	r5, r6
 8033272:	f04f 0920 	mov.w	r9, #32
 8033276:	2300      	movs	r3, #0
 8033278:	6822      	ldr	r2, [r4, #0]
 803327a:	49a7      	ldr	r1, [pc, #668]	@ (8033518 <__ssvfscanf_r+0xcb4>)
 803327c:	7812      	ldrb	r2, [r2, #0]
 803327e:	5c8a      	ldrb	r2, [r1, r2]
 8033280:	0710      	lsls	r0, r2, #28
 8033282:	d43c      	bmi.n	80332fe <__ssvfscanf_r+0xa9a>
 8033284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8033286:	2a00      	cmp	r2, #0
 8033288:	d039      	beq.n	80332fe <__ssvfscanf_r+0xa9a>
 803328a:	60fb      	str	r3, [r7, #12]
 803328c:	f7fb f8b8 	bl	802e400 <__locale_mb_cur_max>
 8033290:	68fb      	ldr	r3, [r7, #12]
 8033292:	4298      	cmp	r0, r3
 8033294:	f43f aba8 	beq.w	80329e8 <__ssvfscanf_r+0x184>
 8033298:	6822      	ldr	r2, [r4, #0]
 803329a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803329e:	f812 0b01 	ldrb.w	r0, [r2], #1
 80332a2:	54c8      	strb	r0, [r1, r3]
 80332a4:	f103 0b01 	add.w	fp, r3, #1
 80332a8:	6863      	ldr	r3, [r4, #4]
 80332aa:	3b01      	subs	r3, #1
 80332ac:	e9c4 2300 	strd	r2, r3, [r4]
 80332b0:	6a3b      	ldr	r3, [r7, #32]
 80332b2:	2b03      	cmp	r3, #3
 80332b4:	d102      	bne.n	80332bc <__ssvfscanf_r+0xa58>
 80332b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80332b8:	2b04      	cmp	r3, #4
 80332ba:	d005      	beq.n	80332c8 <__ssvfscanf_r+0xa64>
 80332bc:	2208      	movs	r2, #8
 80332be:	2100      	movs	r1, #0
 80332c0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80332c4:	f7f9 ff14 	bl	802d0f0 <memset>
 80332c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80332cc:	9300      	str	r3, [sp, #0]
 80332ce:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80332d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80332d4:	465b      	mov	r3, fp
 80332d6:	4629      	mov	r1, r5
 80332d8:	f002 fc94 	bl	8035c04 <_mbrtowc_r>
 80332dc:	1c42      	adds	r2, r0, #1
 80332de:	6238      	str	r0, [r7, #32]
 80332e0:	f43f ab82 	beq.w	80329e8 <__ssvfscanf_r+0x184>
 80332e4:	bb90      	cbnz	r0, 803334c <__ssvfscanf_r+0xae8>
 80332e6:	6028      	str	r0, [r5, #0]
 80332e8:	6828      	ldr	r0, [r5, #0]
 80332ea:	f002 fca5 	bl	8035c38 <iswspace>
 80332ee:	4603      	mov	r3, r0
 80332f0:	2800      	cmp	r0, #0
 80332f2:	d047      	beq.n	8033384 <__ssvfscanf_r+0xb20>
 80332f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80332f8:	f1bb 0f00 	cmp.w	fp, #0
 80332fc:	d139      	bne.n	8033372 <__ssvfscanf_r+0xb0e>
 80332fe:	f1b8 0f00 	cmp.w	r8, #0
 8033302:	d114      	bne.n	803332e <__ssvfscanf_r+0xaca>
 8033304:	f8c5 8000 	str.w	r8, [r5]
 8033308:	f1ba 0f00 	cmp.w	sl, #0
 803330c:	d00c      	beq.n	8033328 <__ssvfscanf_r+0xac4>
 803330e:	1ba9      	subs	r1, r5, r6
 8033310:	108b      	asrs	r3, r1, #2
 8033312:	3301      	adds	r3, #1
 8033314:	4599      	cmp	r9, r3
 8033316:	d907      	bls.n	8033328 <__ssvfscanf_r+0xac4>
 8033318:	f8da 0000 	ldr.w	r0, [sl]
 803331c:	3104      	adds	r1, #4
 803331e:	f001 f8b7 	bl	8034490 <realloc>
 8033322:	b108      	cbz	r0, 8033328 <__ssvfscanf_r+0xac4>
 8033324:	f8ca 0000 	str.w	r0, [sl]
 8033328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803332a:	3301      	adds	r3, #1
 803332c:	627b      	str	r3, [r7, #36]	@ 0x24
 803332e:	693d      	ldr	r5, [r7, #16]
 8033330:	f7ff bab3 	b.w	803289a <__ssvfscanf_r+0x36>
 8033334:	f04f 0900 	mov.w	r9, #0
 8033338:	613d      	str	r5, [r7, #16]
 803333a:	464e      	mov	r6, r9
 803333c:	46ca      	mov	sl, r9
 803333e:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8033342:	e798      	b.n	8033276 <__ssvfscanf_r+0xa12>
 8033344:	46c1      	mov	r9, r8
 8033346:	4646      	mov	r6, r8
 8033348:	46c2      	mov	sl, r8
 803334a:	e794      	b.n	8033276 <__ssvfscanf_r+0xa12>
 803334c:	6a3b      	ldr	r3, [r7, #32]
 803334e:	3302      	adds	r3, #2
 8033350:	d1ca      	bne.n	80332e8 <__ssvfscanf_r+0xa84>
 8033352:	465b      	mov	r3, fp
 8033354:	6862      	ldr	r2, [r4, #4]
 8033356:	2a00      	cmp	r2, #0
 8033358:	dc8e      	bgt.n	8033278 <__ssvfscanf_r+0xa14>
 803335a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803335c:	60fb      	str	r3, [r7, #12]
 803335e:	4621      	mov	r1, r4
 8033360:	f7fd f8cb 	bl	80304fa <__ssrefill_r>
 8033364:	68fb      	ldr	r3, [r7, #12]
 8033366:	2800      	cmp	r0, #0
 8033368:	d086      	beq.n	8033278 <__ssvfscanf_r+0xa14>
 803336a:	2b00      	cmp	r3, #0
 803336c:	f47f ab3c 	bne.w	80329e8 <__ssvfscanf_r+0x184>
 8033370:	e7c5      	b.n	80332fe <__ssvfscanf_r+0xa9a>
 8033372:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8033376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033378:	f813 100b 	ldrb.w	r1, [r3, fp]
 803337c:	4622      	mov	r2, r4
 803337e:	f7fd f881 	bl	8030484 <_sungetc_r>
 8033382:	e7b7      	b.n	80332f4 <__ssvfscanf_r+0xa90>
 8033384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8033386:	445a      	add	r2, fp
 8033388:	633a      	str	r2, [r7, #48]	@ 0x30
 803338a:	6a3a      	ldr	r2, [r7, #32]
 803338c:	2a03      	cmp	r2, #3
 803338e:	d102      	bne.n	8033396 <__ssvfscanf_r+0xb32>
 8033390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8033392:	2a04      	cmp	r2, #4
 8033394:	d002      	beq.n	803339c <__ssvfscanf_r+0xb38>
 8033396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8033398:	3a01      	subs	r2, #1
 803339a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 803339c:	f1b8 0f00 	cmp.w	r8, #0
 80333a0:	d1d8      	bne.n	8033354 <__ssvfscanf_r+0xaf0>
 80333a2:	3504      	adds	r5, #4
 80333a4:	f1ba 0f00 	cmp.w	sl, #0
 80333a8:	d015      	beq.n	80333d6 <__ssvfscanf_r+0xb72>
 80333aa:	eba5 0b06 	sub.w	fp, r5, r6
 80333ae:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 80333b2:	d80e      	bhi.n	80333d2 <__ssvfscanf_r+0xb6e>
 80333b4:	4630      	mov	r0, r6
 80333b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80333ba:	f001 f869 	bl	8034490 <realloc>
 80333be:	4606      	mov	r6, r0
 80333c0:	2800      	cmp	r0, #0
 80333c2:	f43f ac0a 	beq.w	8032bda <__ssvfscanf_r+0x376>
 80333c6:	eb00 050b 	add.w	r5, r0, fp
 80333ca:	f8ca 0000 	str.w	r0, [sl]
 80333ce:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80333d2:	4643      	mov	r3, r8
 80333d4:	e7be      	b.n	8033354 <__ssvfscanf_r+0xaf0>
 80333d6:	4653      	mov	r3, sl
 80333d8:	e7bc      	b.n	8033354 <__ssvfscanf_r+0xaf0>
 80333da:	f1b8 0f00 	cmp.w	r8, #0
 80333de:	d01a      	beq.n	8033416 <__ssvfscanf_r+0xbb2>
 80333e0:	4e4d      	ldr	r6, [pc, #308]	@ (8033518 <__ssvfscanf_r+0xcb4>)
 80333e2:	6823      	ldr	r3, [r4, #0]
 80333e4:	781a      	ldrb	r2, [r3, #0]
 80333e6:	5cb2      	ldrb	r2, [r6, r2]
 80333e8:	0711      	lsls	r1, r2, #28
 80333ea:	d411      	bmi.n	8033410 <__ssvfscanf_r+0xbac>
 80333ec:	3301      	adds	r3, #1
 80333ee:	6862      	ldr	r2, [r4, #4]
 80333f0:	6023      	str	r3, [r4, #0]
 80333f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80333f4:	f109 0901 	add.w	r9, r9, #1
 80333f8:	3a01      	subs	r2, #1
 80333fa:	454b      	cmp	r3, r9
 80333fc:	6062      	str	r2, [r4, #4]
 80333fe:	d007      	beq.n	8033410 <__ssvfscanf_r+0xbac>
 8033400:	2a00      	cmp	r2, #0
 8033402:	dcee      	bgt.n	80333e2 <__ssvfscanf_r+0xb7e>
 8033404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033406:	4621      	mov	r1, r4
 8033408:	f7fd f877 	bl	80304fa <__ssrefill_r>
 803340c:	2800      	cmp	r0, #0
 803340e:	d0e8      	beq.n	80333e2 <__ssvfscanf_r+0xb7e>
 8033410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033412:	444b      	add	r3, r9
 8033414:	e4d3      	b.n	8032dbe <__ssvfscanf_r+0x55a>
 8033416:	46a8      	mov	r8, r5
 8033418:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803341c:	f858 5b04 	ldr.w	r5, [r8], #4
 8033420:	d077      	beq.n	8033512 <__ssvfscanf_r+0xcae>
 8033422:	2d00      	cmp	r5, #0
 8033424:	f43f ab14 	beq.w	8032a50 <__ssvfscanf_r+0x1ec>
 8033428:	2020      	movs	r0, #32
 803342a:	f7fc f8a7 	bl	802f57c <malloc>
 803342e:	4681      	mov	r9, r0
 8033430:	2800      	cmp	r0, #0
 8033432:	f43f aade 	beq.w	80329f2 <__ssvfscanf_r+0x18e>
 8033436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033438:	6028      	str	r0, [r5, #0]
 803343a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 803343e:	889e      	ldrh	r6, [r3, #4]
 8033440:	45b2      	cmp	sl, r6
 8033442:	d311      	bcc.n	8033468 <__ssvfscanf_r+0xc04>
 8033444:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8033448:	429e      	cmp	r6, r3
 803344a:	f200 8373 	bhi.w	8033b34 <__ssvfscanf_r+0x12d0>
 803344e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033450:	3608      	adds	r6, #8
 8033452:	b2b6      	uxth	r6, r6
 8033454:	6818      	ldr	r0, [r3, #0]
 8033456:	00b1      	lsls	r1, r6, #2
 8033458:	f001 f81a 	bl	8034490 <realloc>
 803345c:	2800      	cmp	r0, #0
 803345e:	f000 8369 	beq.w	8033b34 <__ssvfscanf_r+0x12d0>
 8033462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033464:	6018      	str	r0, [r3, #0]
 8033466:	809e      	strh	r6, [r3, #4]
 8033468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803346a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803346c:	681b      	ldr	r3, [r3, #0]
 803346e:	f10a 0201 	add.w	r2, sl, #1
 8033472:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8033476:	80ca      	strh	r2, [r1, #6]
 8033478:	46aa      	mov	sl, r5
 803347a:	2620      	movs	r6, #32
 803347c:	464d      	mov	r5, r9
 803347e:	46a9      	mov	r9, r5
 8033480:	6823      	ldr	r3, [r4, #0]
 8033482:	4925      	ldr	r1, [pc, #148]	@ (8033518 <__ssvfscanf_r+0xcb4>)
 8033484:	781a      	ldrb	r2, [r3, #0]
 8033486:	5c8a      	ldrb	r2, [r1, r2]
 8033488:	0712      	lsls	r2, r2, #28
 803348a:	d428      	bmi.n	80334de <__ssvfscanf_r+0xc7a>
 803348c:	6862      	ldr	r2, [r4, #4]
 803348e:	3a01      	subs	r2, #1
 8033490:	6062      	str	r2, [r4, #4]
 8033492:	1c5a      	adds	r2, r3, #1
 8033494:	6022      	str	r2, [r4, #0]
 8033496:	781b      	ldrb	r3, [r3, #0]
 8033498:	f805 3b01 	strb.w	r3, [r5], #1
 803349c:	f1ba 0f00 	cmp.w	sl, #0
 80334a0:	d010      	beq.n	80334c4 <__ssvfscanf_r+0xc60>
 80334a2:	eba5 0b09 	sub.w	fp, r5, r9
 80334a6:	45b3      	cmp	fp, r6
 80334a8:	d30c      	bcc.n	80334c4 <__ssvfscanf_r+0xc60>
 80334aa:	0076      	lsls	r6, r6, #1
 80334ac:	4648      	mov	r0, r9
 80334ae:	4631      	mov	r1, r6
 80334b0:	f000 ffee 	bl	8034490 <realloc>
 80334b4:	4681      	mov	r9, r0
 80334b6:	2800      	cmp	r0, #0
 80334b8:	f43f aa9b 	beq.w	80329f2 <__ssvfscanf_r+0x18e>
 80334bc:	eb00 050b 	add.w	r5, r0, fp
 80334c0:	f8ca 0000 	str.w	r0, [sl]
 80334c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80334c6:	3b01      	subs	r3, #1
 80334c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80334ca:	d008      	beq.n	80334de <__ssvfscanf_r+0xc7a>
 80334cc:	6863      	ldr	r3, [r4, #4]
 80334ce:	2b00      	cmp	r3, #0
 80334d0:	dcd6      	bgt.n	8033480 <__ssvfscanf_r+0xc1c>
 80334d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80334d4:	4621      	mov	r1, r4
 80334d6:	f7fd f810 	bl	80304fa <__ssrefill_r>
 80334da:	2800      	cmp	r0, #0
 80334dc:	d0d0      	beq.n	8033480 <__ssvfscanf_r+0xc1c>
 80334de:	2300      	movs	r3, #0
 80334e0:	702b      	strb	r3, [r5, #0]
 80334e2:	eba5 0509 	sub.w	r5, r5, r9
 80334e6:	f1ba 0f00 	cmp.w	sl, #0
 80334ea:	d009      	beq.n	8033500 <__ssvfscanf_r+0xc9c>
 80334ec:	1c69      	adds	r1, r5, #1
 80334ee:	428e      	cmp	r6, r1
 80334f0:	d906      	bls.n	8033500 <__ssvfscanf_r+0xc9c>
 80334f2:	f8da 0000 	ldr.w	r0, [sl]
 80334f6:	f000 ffcb 	bl	8034490 <realloc>
 80334fa:	b108      	cbz	r0, 8033500 <__ssvfscanf_r+0xc9c>
 80334fc:	f8ca 0000 	str.w	r0, [sl]
 8033500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033502:	442b      	add	r3, r5
 8033504:	633b      	str	r3, [r7, #48]	@ 0x30
 8033506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033508:	3301      	adds	r3, #1
 803350a:	627b      	str	r3, [r7, #36]	@ 0x24
 803350c:	4645      	mov	r5, r8
 803350e:	f7ff b9c4 	b.w	803289a <__ssvfscanf_r+0x36>
 8033512:	46b2      	mov	sl, r6
 8033514:	e7b3      	b.n	803347e <__ssvfscanf_r+0xc1a>
 8033516:	bf00      	nop
 8033518:	0803c8dd 	.word	0x0803c8dd
 803351c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803351e:	3b01      	subs	r3, #1
 8033520:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8033524:	bf81      	itttt	hi
 8033526:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8033528:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 803352c:	eb03 090c 	addhi.w	r9, r3, ip
 8033530:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8033534:	bf8c      	ite	hi
 8033536:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 8033538:	f04f 0900 	movls.w	r9, #0
 803353c:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 8033540:	f04f 0a00 	mov.w	sl, #0
 8033544:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 8033548:	6822      	ldr	r2, [r4, #0]
 803354a:	7813      	ldrb	r3, [r2, #0]
 803354c:	2b39      	cmp	r3, #57	@ 0x39
 803354e:	d80f      	bhi.n	8033570 <__ssvfscanf_r+0xd0c>
 8033550:	2b2a      	cmp	r3, #42	@ 0x2a
 8033552:	d91a      	bls.n	803358a <__ssvfscanf_r+0xd26>
 8033554:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8033558:	290e      	cmp	r1, #14
 803355a:	d816      	bhi.n	803358a <__ssvfscanf_r+0xd26>
 803355c:	e8df f001 	tbb	[pc, r1]
 8033560:	15781578 	.word	0x15781578
 8033564:	68683f15 	.word	0x68683f15
 8033568:	68686868 	.word	0x68686868
 803356c:	7068      	.short	0x7068
 803356e:	70          	.byte	0x70
 803356f:	00          	.byte	0x00
 8033570:	2b66      	cmp	r3, #102	@ 0x66
 8033572:	d832      	bhi.n	80335da <__ssvfscanf_r+0xd76>
 8033574:	2b60      	cmp	r3, #96	@ 0x60
 8033576:	d803      	bhi.n	8033580 <__ssvfscanf_r+0xd1c>
 8033578:	2b46      	cmp	r3, #70	@ 0x46
 803357a:	d804      	bhi.n	8033586 <__ssvfscanf_r+0xd22>
 803357c:	2b40      	cmp	r3, #64	@ 0x40
 803357e:	d904      	bls.n	803358a <__ssvfscanf_r+0xd26>
 8033580:	69f9      	ldr	r1, [r7, #28]
 8033582:	290a      	cmp	r1, #10
 8033584:	e062      	b.n	803364c <__ssvfscanf_r+0xde8>
 8033586:	2b58      	cmp	r3, #88	@ 0x58
 8033588:	d068      	beq.n	803365c <__ssvfscanf_r+0xdf8>
 803358a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 803358e:	d011      	beq.n	80335b4 <__ssvfscanf_r+0xd50>
 8033590:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8033594:	4598      	cmp	r8, r3
 8033596:	d908      	bls.n	80335aa <__ssvfscanf_r+0xd46>
 8033598:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 803359c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803359e:	4622      	mov	r2, r4
 80335a0:	f7fc ff70 	bl	8030484 <_sungetc_r>
 80335a4:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 80335a8:	46c8      	mov	r8, r9
 80335aa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80335ae:	4598      	cmp	r8, r3
 80335b0:	f43f aa4e 	beq.w	8032a50 <__ssvfscanf_r+0x1ec>
 80335b4:	f01b 0210 	ands.w	r2, fp, #16
 80335b8:	d16c      	bne.n	8033694 <__ssvfscanf_r+0xe30>
 80335ba:	69fb      	ldr	r3, [r7, #28]
 80335bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80335be:	69be      	ldr	r6, [r7, #24]
 80335c0:	f888 2000 	strb.w	r2, [r8]
 80335c4:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80335c8:	47b0      	blx	r6
 80335ca:	f01b 0f20 	tst.w	fp, #32
 80335ce:	f105 0904 	add.w	r9, r5, #4
 80335d2:	d056      	beq.n	8033682 <__ssvfscanf_r+0xe1e>
 80335d4:	682b      	ldr	r3, [r5, #0]
 80335d6:	6018      	str	r0, [r3, #0]
 80335d8:	e058      	b.n	803368c <__ssvfscanf_r+0xe28>
 80335da:	2b78      	cmp	r3, #120	@ 0x78
 80335dc:	e7d4      	b.n	8033588 <__ssvfscanf_r+0xd24>
 80335de:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 80335e2:	d00a      	beq.n	80335fa <__ssvfscanf_r+0xd96>
 80335e4:	69f9      	ldr	r1, [r7, #28]
 80335e6:	b919      	cbnz	r1, 80335f0 <__ssvfscanf_r+0xd8c>
 80335e8:	2108      	movs	r1, #8
 80335ea:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 80335ee:	61f9      	str	r1, [r7, #28]
 80335f0:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 80335f4:	d004      	beq.n	8033600 <__ssvfscanf_r+0xd9c>
 80335f6:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 80335fa:	f808 3b01 	strb.w	r3, [r8], #1
 80335fe:	e00b      	b.n	8033618 <__ssvfscanf_r+0xdb4>
 8033600:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8033604:	f1b9 0f00 	cmp.w	r9, #0
 8033608:	d004      	beq.n	8033614 <__ssvfscanf_r+0xdb0>
 803360a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803360c:	3301      	adds	r3, #1
 803360e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8033612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8033614:	f10a 0a01 	add.w	sl, sl, #1
 8033618:	6863      	ldr	r3, [r4, #4]
 803361a:	3b01      	subs	r3, #1
 803361c:	2b00      	cmp	r3, #0
 803361e:	6063      	str	r3, [r4, #4]
 8033620:	dd28      	ble.n	8033674 <__ssvfscanf_r+0xe10>
 8033622:	3201      	adds	r2, #1
 8033624:	6022      	str	r2, [r4, #0]
 8033626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033628:	3b01      	subs	r3, #1
 803362a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803362c:	d18c      	bne.n	8033548 <__ssvfscanf_r+0xce4>
 803362e:	e7ac      	b.n	803358a <__ssvfscanf_r+0xd26>
 8033630:	69f8      	ldr	r0, [r7, #28]
 8033632:	499b      	ldr	r1, [pc, #620]	@ (80338a0 <__ssvfscanf_r+0x103c>)
 8033634:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8033638:	61f9      	str	r1, [r7, #28]
 803363a:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 803363e:	e7dc      	b.n	80335fa <__ssvfscanf_r+0xd96>
 8033640:	69f8      	ldr	r0, [r7, #28]
 8033642:	4997      	ldr	r1, [pc, #604]	@ (80338a0 <__ssvfscanf_r+0x103c>)
 8033644:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8033648:	61f9      	str	r1, [r7, #28]
 803364a:	2908      	cmp	r1, #8
 803364c:	dcf5      	bgt.n	803363a <__ssvfscanf_r+0xdd6>
 803364e:	e79c      	b.n	803358a <__ssvfscanf_r+0xd26>
 8033650:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8033654:	d099      	beq.n	803358a <__ssvfscanf_r+0xd26>
 8033656:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 803365a:	e7ce      	b.n	80335fa <__ssvfscanf_r+0xd96>
 803365c:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 8033660:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8033664:	d191      	bne.n	803358a <__ssvfscanf_r+0xd26>
 8033666:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 803366a:	2110      	movs	r1, #16
 803366c:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 8033670:	61f9      	str	r1, [r7, #28]
 8033672:	e7c2      	b.n	80335fa <__ssvfscanf_r+0xd96>
 8033674:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033676:	4621      	mov	r1, r4
 8033678:	f7fc ff3f 	bl	80304fa <__ssrefill_r>
 803367c:	2800      	cmp	r0, #0
 803367e:	d0d2      	beq.n	8033626 <__ssvfscanf_r+0xdc2>
 8033680:	e783      	b.n	803358a <__ssvfscanf_r+0xd26>
 8033682:	f01b 0f08 	tst.w	fp, #8
 8033686:	d00b      	beq.n	80336a0 <__ssvfscanf_r+0xe3c>
 8033688:	682b      	ldr	r3, [r5, #0]
 803368a:	7018      	strb	r0, [r3, #0]
 803368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803368e:	3301      	adds	r3, #1
 8033690:	627b      	str	r3, [r7, #36]	@ 0x24
 8033692:	464d      	mov	r5, r9
 8033694:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8033698:	eba8 0803 	sub.w	r8, r8, r3
 803369c:	44d0      	add	r8, sl
 803369e:	e516      	b.n	80330ce <__ssvfscanf_r+0x86a>
 80336a0:	f01b 0f04 	tst.w	fp, #4
 80336a4:	d002      	beq.n	80336ac <__ssvfscanf_r+0xe48>
 80336a6:	682b      	ldr	r3, [r5, #0]
 80336a8:	8018      	strh	r0, [r3, #0]
 80336aa:	e7ef      	b.n	803368c <__ssvfscanf_r+0xe28>
 80336ac:	f01b 0201 	ands.w	r2, fp, #1
 80336b0:	d190      	bne.n	80335d4 <__ssvfscanf_r+0xd70>
 80336b2:	f01b 0f02 	tst.w	fp, #2
 80336b6:	d08d      	beq.n	80335d4 <__ssvfscanf_r+0xd70>
 80336b8:	4b7a      	ldr	r3, [pc, #488]	@ (80338a4 <__ssvfscanf_r+0x1040>)
 80336ba:	69b9      	ldr	r1, [r7, #24]
 80336bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80336be:	4299      	cmp	r1, r3
 80336c0:	69fb      	ldr	r3, [r7, #28]
 80336c2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80336c6:	d105      	bne.n	80336d4 <__ssvfscanf_r+0xe70>
 80336c8:	f002 fa9a 	bl	8035c00 <_strtoull_r>
 80336cc:	682b      	ldr	r3, [r5, #0]
 80336ce:	e9c3 0100 	strd	r0, r1, [r3]
 80336d2:	e7db      	b.n	803368c <__ssvfscanf_r+0xe28>
 80336d4:	f002 f9e8 	bl	8035aa8 <_strtoll_r>
 80336d8:	e7f8      	b.n	80336cc <__ssvfscanf_r+0xe68>
 80336da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80336dc:	f7fa fe96 	bl	802e40c <_localeconv_r>
 80336e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80336e2:	6802      	ldr	r2, [r0, #0]
 80336e4:	3b01      	subs	r3, #1
 80336e6:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 80336ea:	f04f 0800 	mov.w	r8, #0
 80336ee:	bf88      	it	hi
 80336f0:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 80336f2:	f8c7 8010 	str.w	r8, [r7, #16]
 80336f6:	e9c7 8802 	strd	r8, r8, [r7, #8]
 80336fa:	bf81      	itttt	hi
 80336fc:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8033700:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8033704:	181b      	addhi	r3, r3, r0
 8033706:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8033708:	bf98      	it	ls
 803370a:	2300      	movls	r3, #0
 803370c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8033710:	46c3      	mov	fp, r8
 8033712:	46c2      	mov	sl, r8
 8033714:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8033718:	6821      	ldr	r1, [r4, #0]
 803371a:	6079      	str	r1, [r7, #4]
 803371c:	7808      	ldrb	r0, [r1, #0]
 803371e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 8033722:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 8033726:	f200 8123 	bhi.w	8033970 <__ssvfscanf_r+0x110c>
 803372a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 803372e:	0089      	.short	0x0089
 8033730:	00890121 	.word	0x00890121
 8033734:	01210121 	.word	0x01210121
 8033738:	006f004f 	.word	0x006f004f
 803373c:	006f006f 	.word	0x006f006f
 8033740:	006f006f 	.word	0x006f006f
 8033744:	006f006f 	.word	0x006f006f
 8033748:	006f006f 	.word	0x006f006f
 803374c:	01210121 	.word	0x01210121
 8033750:	01210121 	.word	0x01210121
 8033754:	01210121 	.word	0x01210121
 8033758:	00af0121 	.word	0x00af0121
 803375c:	006d006d 	.word	0x006d006d
 8033760:	011e006d 	.word	0x011e006d
 8033764:	012100ed 	.word	0x012100ed
 8033768:	00d60121 	.word	0x00d60121
 803376c:	01210121 	.word	0x01210121
 8033770:	01210121 	.word	0x01210121
 8033774:	01210090 	.word	0x01210090
 8033778:	01210104 	.word	0x01210104
 803377c:	01210121 	.word	0x01210121
 8033780:	012100f8 	.word	0x012100f8
 8033784:	01210121 	.word	0x01210121
 8033788:	00fe0073 	.word	0x00fe0073
 803378c:	01210121 	.word	0x01210121
 8033790:	01210121 	.word	0x01210121
 8033794:	01210121 	.word	0x01210121
 8033798:	00af0121 	.word	0x00af0121
 803379c:	006d006d 	.word	0x006d006d
 80337a0:	011e006d 	.word	0x011e006d
 80337a4:	012100ed 	.word	0x012100ed
 80337a8:	00d60121 	.word	0x00d60121
 80337ac:	01210121 	.word	0x01210121
 80337b0:	01210121 	.word	0x01210121
 80337b4:	01210090 	.word	0x01210090
 80337b8:	01210104 	.word	0x01210104
 80337bc:	01210121 	.word	0x01210121
 80337c0:	012100f8 	.word	0x012100f8
 80337c4:	01210121 	.word	0x01210121
 80337c8:	00fe0073 	.word	0x00fe0073
 80337cc:	05f1      	lsls	r1, r6, #23
 80337ce:	d51d      	bpl.n	803380c <__ssvfscanf_r+0xfa8>
 80337d0:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80337d4:	f10a 0a01 	add.w	sl, sl, #1
 80337d8:	b11b      	cbz	r3, 80337e2 <__ssvfscanf_r+0xf7e>
 80337da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80337dc:	3001      	adds	r0, #1
 80337de:	3b01      	subs	r3, #1
 80337e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80337e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80337e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80337e6:	3001      	adds	r0, #1
 80337e8:	6338      	str	r0, [r7, #48]	@ 0x30
 80337ea:	6860      	ldr	r0, [r4, #4]
 80337ec:	3801      	subs	r0, #1
 80337ee:	3901      	subs	r1, #1
 80337f0:	2800      	cmp	r0, #0
 80337f2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80337f4:	6060      	str	r0, [r4, #4]
 80337f6:	f340 80cc 	ble.w	8033992 <__ssvfscanf_r+0x112e>
 80337fa:	6879      	ldr	r1, [r7, #4]
 80337fc:	3101      	adds	r1, #1
 80337fe:	6021      	str	r1, [r4, #0]
 8033800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8033802:	2900      	cmp	r1, #0
 8033804:	d188      	bne.n	8033718 <__ssvfscanf_r+0xeb4>
 8033806:	e052      	b.n	80338ae <__ssvfscanf_r+0x104a>
 8033808:	0531      	lsls	r1, r6, #20
 803380a:	d550      	bpl.n	80338ae <__ssvfscanf_r+0x104a>
 803380c:	eb1b 0c08 	adds.w	ip, fp, r8
 8033810:	d041      	beq.n	8033896 <__ssvfscanf_r+0x1032>
 8033812:	e04c      	b.n	80338ae <__ssvfscanf_r+0x104a>
 8033814:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 8033818:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 803381c:	d147      	bne.n	80338ae <__ssvfscanf_r+0x104a>
 803381e:	f1ba 0f01 	cmp.w	sl, #1
 8033822:	d144      	bne.n	80338ae <__ssvfscanf_r+0x104a>
 8033824:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8033826:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 803382a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 803382e:	3901      	subs	r1, #1
 8033830:	f809 cb01 	strb.w	ip, [r9], #1
 8033834:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 8033838:	62f9      	str	r1, [r7, #44]	@ 0x2c
 803383a:	f04f 0a00 	mov.w	sl, #0
 803383e:	e003      	b.n	8033848 <__ssvfscanf_r+0xfe4>
 8033840:	0631      	lsls	r1, r6, #24
 8033842:	d534      	bpl.n	80338ae <__ssvfscanf_r+0x104a>
 8033844:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8033848:	f809 0b01 	strb.w	r0, [r9], #1
 803384c:	e7c9      	b.n	80337e2 <__ssvfscanf_r+0xf7e>
 803384e:	f1bb 0f00 	cmp.w	fp, #0
 8033852:	d10c      	bne.n	803386e <__ssvfscanf_r+0x100a>
 8033854:	f1ba 0f00 	cmp.w	sl, #0
 8033858:	d10d      	bne.n	8033876 <__ssvfscanf_r+0x1012>
 803385a:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803385e:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 8033862:	d108      	bne.n	8033876 <__ssvfscanf_r+0x1012>
 8033864:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8033868:	f04f 0b01 	mov.w	fp, #1
 803386c:	e7ec      	b.n	8033848 <__ssvfscanf_r+0xfe4>
 803386e:	f1bb 0f02 	cmp.w	fp, #2
 8033872:	f000 8088 	beq.w	8033986 <__ssvfscanf_r+0x1122>
 8033876:	f1b8 0f01 	cmp.w	r8, #1
 803387a:	d002      	beq.n	8033882 <__ssvfscanf_r+0x101e>
 803387c:	f1b8 0f04 	cmp.w	r8, #4
 8033880:	d115      	bne.n	80338ae <__ssvfscanf_r+0x104a>
 8033882:	f108 0801 	add.w	r8, r8, #1
 8033886:	fa5f f888 	uxtb.w	r8, r8
 803388a:	e7dd      	b.n	8033848 <__ssvfscanf_r+0xfe4>
 803388c:	0531      	lsls	r1, r6, #20
 803388e:	d50b      	bpl.n	80338a8 <__ssvfscanf_r+0x1044>
 8033890:	eb1b 0c08 	adds.w	ip, fp, r8
 8033894:	d108      	bne.n	80338a8 <__ssvfscanf_r+0x1044>
 8033896:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 803389a:	46e0      	mov	r8, ip
 803389c:	46e3      	mov	fp, ip
 803389e:	e7d3      	b.n	8033848 <__ssvfscanf_r+0xfe4>
 80338a0:	0803cabc 	.word	0x0803cabc
 80338a4:	080355f9 	.word	0x080355f9
 80338a8:	f1bb 0f01 	cmp.w	fp, #1
 80338ac:	d06e      	beq.n	803398c <__ssvfscanf_r+0x1128>
 80338ae:	f1ba 0f00 	cmp.w	sl, #0
 80338b2:	d001      	beq.n	80338b8 <__ssvfscanf_r+0x1054>
 80338b4:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 80338b8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80338bc:	f1bb 0f01 	cmp.w	fp, #1
 80338c0:	d873      	bhi.n	80339aa <__ssvfscanf_r+0x1146>
 80338c2:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80338c6:	45a9      	cmp	r9, r5
 80338c8:	f67f a8c2 	bls.w	8032a50 <__ssvfscanf_r+0x1ec>
 80338cc:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80338d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80338d2:	4622      	mov	r2, r4
 80338d4:	f7fc fdd6 	bl	8030484 <_sungetc_r>
 80338d8:	e7f5      	b.n	80338c6 <__ssvfscanf_r+0x1062>
 80338da:	f1b8 0f00 	cmp.w	r8, #0
 80338de:	d10d      	bne.n	80338fc <__ssvfscanf_r+0x1098>
 80338e0:	f1ba 0f00 	cmp.w	sl, #0
 80338e4:	d1e6      	bne.n	80338b4 <__ssvfscanf_r+0x1050>
 80338e6:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 80338ea:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 80338ee:	f040 8124 	bne.w	8033b3a <__ssvfscanf_r+0x12d6>
 80338f2:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 80338f6:	f04f 0801 	mov.w	r8, #1
 80338fa:	e7a5      	b.n	8033848 <__ssvfscanf_r+0xfe4>
 80338fc:	f1b8 0f03 	cmp.w	r8, #3
 8033900:	d0bf      	beq.n	8033882 <__ssvfscanf_r+0x101e>
 8033902:	f1b8 0f05 	cmp.w	r8, #5
 8033906:	e7bb      	b.n	8033880 <__ssvfscanf_r+0x101c>
 8033908:	0531      	lsls	r1, r6, #20
 803390a:	d502      	bpl.n	8033912 <__ssvfscanf_r+0x10ae>
 803390c:	eb1b 0c08 	adds.w	ip, fp, r8
 8033910:	d0c1      	beq.n	8033896 <__ssvfscanf_r+0x1032>
 8033912:	f1b8 0f02 	cmp.w	r8, #2
 8033916:	d1ca      	bne.n	80338ae <__ssvfscanf_r+0x104a>
 8033918:	f04f 0803 	mov.w	r8, #3
 803391c:	e794      	b.n	8033848 <__ssvfscanf_r+0xfe4>
 803391e:	f1b8 0f06 	cmp.w	r8, #6
 8033922:	d1c4      	bne.n	80338ae <__ssvfscanf_r+0x104a>
 8033924:	f04f 0807 	mov.w	r8, #7
 8033928:	e78e      	b.n	8033848 <__ssvfscanf_r+0xfe4>
 803392a:	f1b8 0f07 	cmp.w	r8, #7
 803392e:	d1be      	bne.n	80338ae <__ssvfscanf_r+0x104a>
 8033930:	f04f 0808 	mov.w	r8, #8
 8033934:	e788      	b.n	8033848 <__ssvfscanf_r+0xfe4>
 8033936:	0531      	lsls	r1, r6, #20
 8033938:	d5b9      	bpl.n	80338ae <__ssvfscanf_r+0x104a>
 803393a:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 803393e:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 8033942:	d005      	beq.n	8033950 <__ssvfscanf_r+0x10ec>
 8033944:	0571      	lsls	r1, r6, #21
 8033946:	d5b2      	bpl.n	80338ae <__ssvfscanf_r+0x104a>
 8033948:	f1ba 0f00 	cmp.w	sl, #0
 803394c:	f000 80f5 	beq.w	8033b3a <__ssvfscanf_r+0x12d6>
 8033950:	05b1      	lsls	r1, r6, #22
 8033952:	bf58      	it	pl
 8033954:	6939      	ldrpl	r1, [r7, #16]
 8033956:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 803395a:	bf5c      	itt	pl
 803395c:	ebaa 0101 	subpl.w	r1, sl, r1
 8033960:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 8033964:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 8033968:	e767      	b.n	803383a <__ssvfscanf_r+0xfd6>
 803396a:	0531      	lsls	r1, r6, #20
 803396c:	d5e5      	bpl.n	803393a <__ssvfscanf_r+0x10d6>
 803396e:	e74d      	b.n	803380c <__ssvfscanf_r+0xfa8>
 8033970:	f892 c000 	ldrb.w	ip, [r2]
 8033974:	4584      	cmp	ip, r0
 8033976:	d19a      	bne.n	80338ae <__ssvfscanf_r+0x104a>
 8033978:	05b1      	lsls	r1, r6, #22
 803397a:	d598      	bpl.n	80338ae <__ssvfscanf_r+0x104a>
 803397c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8033980:	f8c7 a010 	str.w	sl, [r7, #16]
 8033984:	e760      	b.n	8033848 <__ssvfscanf_r+0xfe4>
 8033986:	f04f 0b03 	mov.w	fp, #3
 803398a:	e75d      	b.n	8033848 <__ssvfscanf_r+0xfe4>
 803398c:	f04f 0b02 	mov.w	fp, #2
 8033990:	e75a      	b.n	8033848 <__ssvfscanf_r+0xfe4>
 8033992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033994:	4621      	mov	r1, r4
 8033996:	e9c7 2300 	strd	r2, r3, [r7]
 803399a:	f7fc fdae 	bl	80304fa <__ssrefill_r>
 803399e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80339a2:	2800      	cmp	r0, #0
 80339a4:	f43f af2c 	beq.w	8033800 <__ssvfscanf_r+0xf9c>
 80339a8:	e781      	b.n	80338ae <__ssvfscanf_r+0x104a>
 80339aa:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80339ae:	2b06      	cmp	r3, #6
 80339b0:	d827      	bhi.n	8033a02 <__ssvfscanf_r+0x119e>
 80339b2:	f1b8 0f02 	cmp.w	r8, #2
 80339b6:	d834      	bhi.n	8033a22 <__ssvfscanf_r+0x11be>
 80339b8:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80339bc:	45a9      	cmp	r9, r5
 80339be:	f67f a847 	bls.w	8032a50 <__ssvfscanf_r+0x1ec>
 80339c2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80339c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80339c8:	4622      	mov	r2, r4
 80339ca:	f7fc fd5b 	bl	8030484 <_sungetc_r>
 80339ce:	e7f5      	b.n	80339bc <__ssvfscanf_r+0x1158>
 80339d0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80339d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80339d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80339d8:	4622      	mov	r2, r4
 80339da:	f7fc fd53 	bl	8030484 <_sungetc_r>
 80339de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80339e0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80339e4:	fa5f fb8b 	uxtb.w	fp, fp
 80339e8:	f1bb 0f02 	cmp.w	fp, #2
 80339ec:	d1f0      	bne.n	80339d0 <__ssvfscanf_r+0x116c>
 80339ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80339f0:	f1a8 0803 	sub.w	r8, r8, #3
 80339f4:	fa5f f888 	uxtb.w	r8, r8
 80339f8:	eba3 0308 	sub.w	r3, r3, r8
 80339fc:	eba9 0908 	sub.w	r9, r9, r8
 8033a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8033a02:	05f3      	lsls	r3, r6, #23
 8033a04:	d52d      	bpl.n	8033a62 <__ssvfscanf_r+0x11fe>
 8033a06:	0570      	lsls	r0, r6, #21
 8033a08:	d50e      	bpl.n	8033a28 <__ssvfscanf_r+0x11c4>
 8033a0a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8033a0e:	45a9      	cmp	r9, r5
 8033a10:	f67f a81e 	bls.w	8032a50 <__ssvfscanf_r+0x1ec>
 8033a14:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8033a18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033a1a:	4622      	mov	r2, r4
 8033a1c:	f7fc fd32 	bl	8030484 <_sungetc_r>
 8033a20:	e7f5      	b.n	8033a0e <__ssvfscanf_r+0x11aa>
 8033a22:	46c3      	mov	fp, r8
 8033a24:	464b      	mov	r3, r9
 8033a26:	e7db      	b.n	80339e0 <__ssvfscanf_r+0x117c>
 8033a28:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8033a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033a2e:	2965      	cmp	r1, #101	@ 0x65
 8033a30:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 8033a34:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8033a38:	d00c      	beq.n	8033a54 <__ssvfscanf_r+0x11f0>
 8033a3a:	2945      	cmp	r1, #69	@ 0x45
 8033a3c:	d00a      	beq.n	8033a54 <__ssvfscanf_r+0x11f0>
 8033a3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033a40:	4622      	mov	r2, r4
 8033a42:	f7fc fd1f 	bl	8030484 <_sungetc_r>
 8033a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033a48:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 8033a4c:	f1a9 0802 	sub.w	r8, r9, #2
 8033a50:	f1a3 0b02 	sub.w	fp, r3, #2
 8033a54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033a56:	4622      	mov	r2, r4
 8033a58:	f7fc fd14 	bl	8030484 <_sungetc_r>
 8033a5c:	46c1      	mov	r9, r8
 8033a5e:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 8033a62:	f016 0210 	ands.w	r2, r6, #16
 8033a66:	f47e af18 	bne.w	803289a <__ssvfscanf_r+0x36>
 8033a6a:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 8033a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8033a72:	f889 2000 	strb.w	r2, [r9]
 8033a76:	d119      	bne.n	8033aac <__ssvfscanf_r+0x1248>
 8033a78:	693b      	ldr	r3, [r7, #16]
 8033a7a:	4553      	cmp	r3, sl
 8033a7c:	eba3 020a 	sub.w	r2, r3, sl
 8033a80:	d121      	bne.n	8033ac6 <__ssvfscanf_r+0x1262>
 8033a82:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8033a86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033a88:	2200      	movs	r2, #0
 8033a8a:	f001 fd41 	bl	8035510 <_strtod_r>
 8033a8e:	07f1      	lsls	r1, r6, #31
 8033a90:	ec59 8b10 	vmov	r8, r9, d0
 8033a94:	f105 0a04 	add.w	sl, r5, #4
 8033a98:	d520      	bpl.n	8033adc <__ssvfscanf_r+0x1278>
 8033a9a:	682b      	ldr	r3, [r5, #0]
 8033a9c:	ed83 0b00 	vstr	d0, [r3]
 8033aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033aa2:	3301      	adds	r3, #1
 8033aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8033aa6:	4655      	mov	r5, sl
 8033aa8:	f7fe bef7 	b.w	803289a <__ssvfscanf_r+0x36>
 8033aac:	68fb      	ldr	r3, [r7, #12]
 8033aae:	2b00      	cmp	r3, #0
 8033ab0:	d0e7      	beq.n	8033a82 <__ssvfscanf_r+0x121e>
 8033ab2:	68b9      	ldr	r1, [r7, #8]
 8033ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033ab6:	230a      	movs	r3, #10
 8033ab8:	3101      	adds	r1, #1
 8033aba:	f7f8 fe9d 	bl	802c7f8 <_strtol_r>
 8033abe:	68fb      	ldr	r3, [r7, #12]
 8033ac0:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8033ac4:	1ac2      	subs	r2, r0, r3
 8033ac6:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 8033aca:	4599      	cmp	r9, r3
 8033acc:	bf28      	it	cs
 8033ace:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 8033ad2:	491b      	ldr	r1, [pc, #108]	@ (8033b40 <__ssvfscanf_r+0x12dc>)
 8033ad4:	4648      	mov	r0, r9
 8033ad6:	f7f8 ff49 	bl	802c96c <sprintf>
 8033ada:	e7d2      	b.n	8033a82 <__ssvfscanf_r+0x121e>
 8033adc:	07b2      	lsls	r2, r6, #30
 8033ade:	682d      	ldr	r5, [r5, #0]
 8033ae0:	d502      	bpl.n	8033ae8 <__ssvfscanf_r+0x1284>
 8033ae2:	ed85 0b00 	vstr	d0, [r5]
 8033ae6:	e7db      	b.n	8033aa0 <__ssvfscanf_r+0x123c>
 8033ae8:	4642      	mov	r2, r8
 8033aea:	464b      	mov	r3, r9
 8033aec:	4640      	mov	r0, r8
 8033aee:	4649      	mov	r1, r9
 8033af0:	f7dd f834 	bl	8010b5c <__aeabi_dcmpun>
 8033af4:	b128      	cbz	r0, 8033b02 <__ssvfscanf_r+0x129e>
 8033af6:	4813      	ldr	r0, [pc, #76]	@ (8033b44 <__ssvfscanf_r+0x12e0>)
 8033af8:	f002 f8f6 	bl	8035ce8 <nanf>
 8033afc:	ed85 0a00 	vstr	s0, [r5]
 8033b00:	e7ce      	b.n	8033aa0 <__ssvfscanf_r+0x123c>
 8033b02:	4640      	mov	r0, r8
 8033b04:	4649      	mov	r1, r9
 8033b06:	f7dd f887 	bl	8010c18 <__aeabi_d2f>
 8033b0a:	6028      	str	r0, [r5, #0]
 8033b0c:	e7c8      	b.n	8033aa0 <__ssvfscanf_r+0x123c>
 8033b0e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8033b12:	6818      	ldr	r0, [r3, #0]
 8033b14:	f7fb fd3a 	bl	802f58c <free>
 8033b18:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8033b1c:	3401      	adds	r4, #1
 8033b1e:	601e      	str	r6, [r3, #0]
 8033b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033b22:	681d      	ldr	r5, [r3, #0]
 8033b24:	88db      	ldrh	r3, [r3, #6]
 8033b26:	42a3      	cmp	r3, r4
 8033b28:	dcf1      	bgt.n	8033b0e <__ssvfscanf_r+0x12aa>
 8033b2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8033b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8033b30:	f7ff b85c 	b.w	8032bec <__ssvfscanf_r+0x388>
 8033b34:	2400      	movs	r4, #0
 8033b36:	4626      	mov	r6, r4
 8033b38:	e7f2      	b.n	8033b20 <__ssvfscanf_r+0x12bc>
 8033b3a:	f04f 0a00 	mov.w	sl, #0
 8033b3e:	e6bb      	b.n	80338b8 <__ssvfscanf_r+0x1054>
 8033b40:	0803cab6 	.word	0x0803cab6
 8033b44:	0803c51e 	.word	0x0803c51e

08033b48 <_putc_r>:
 8033b48:	b570      	push	{r4, r5, r6, lr}
 8033b4a:	460d      	mov	r5, r1
 8033b4c:	4614      	mov	r4, r2
 8033b4e:	4606      	mov	r6, r0
 8033b50:	b118      	cbz	r0, 8033b5a <_putc_r+0x12>
 8033b52:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8033b54:	b90b      	cbnz	r3, 8033b5a <_putc_r+0x12>
 8033b56:	f7f9 f825 	bl	802cba4 <__sinit>
 8033b5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033b5c:	07d8      	lsls	r0, r3, #31
 8033b5e:	d405      	bmi.n	8033b6c <_putc_r+0x24>
 8033b60:	89a3      	ldrh	r3, [r4, #12]
 8033b62:	0599      	lsls	r1, r3, #22
 8033b64:	d402      	bmi.n	8033b6c <_putc_r+0x24>
 8033b66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033b68:	f7fa fcfb 	bl	802e562 <__retarget_lock_acquire_recursive>
 8033b6c:	68a3      	ldr	r3, [r4, #8]
 8033b6e:	3b01      	subs	r3, #1
 8033b70:	2b00      	cmp	r3, #0
 8033b72:	60a3      	str	r3, [r4, #8]
 8033b74:	da05      	bge.n	8033b82 <_putc_r+0x3a>
 8033b76:	69a2      	ldr	r2, [r4, #24]
 8033b78:	4293      	cmp	r3, r2
 8033b7a:	db12      	blt.n	8033ba2 <_putc_r+0x5a>
 8033b7c:	b2eb      	uxtb	r3, r5
 8033b7e:	2b0a      	cmp	r3, #10
 8033b80:	d00f      	beq.n	8033ba2 <_putc_r+0x5a>
 8033b82:	6823      	ldr	r3, [r4, #0]
 8033b84:	1c5a      	adds	r2, r3, #1
 8033b86:	6022      	str	r2, [r4, #0]
 8033b88:	701d      	strb	r5, [r3, #0]
 8033b8a:	b2ed      	uxtb	r5, r5
 8033b8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033b8e:	07da      	lsls	r2, r3, #31
 8033b90:	d405      	bmi.n	8033b9e <_putc_r+0x56>
 8033b92:	89a3      	ldrh	r3, [r4, #12]
 8033b94:	059b      	lsls	r3, r3, #22
 8033b96:	d402      	bmi.n	8033b9e <_putc_r+0x56>
 8033b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033b9a:	f7fa fce4 	bl	802e566 <__retarget_lock_release_recursive>
 8033b9e:	4628      	mov	r0, r5
 8033ba0:	bd70      	pop	{r4, r5, r6, pc}
 8033ba2:	4629      	mov	r1, r5
 8033ba4:	4622      	mov	r2, r4
 8033ba6:	4630      	mov	r0, r6
 8033ba8:	f001 fd79 	bl	803569e <__swbuf_r>
 8033bac:	4605      	mov	r5, r0
 8033bae:	e7ed      	b.n	8033b8c <_putc_r+0x44>

08033bb0 <__malloc_lock>:
 8033bb0:	4801      	ldr	r0, [pc, #4]	@ (8033bb8 <__malloc_lock+0x8>)
 8033bb2:	f7fa bcd6 	b.w	802e562 <__retarget_lock_acquire_recursive>
 8033bb6:	bf00      	nop
 8033bb8:	2001a0ea 	.word	0x2001a0ea

08033bbc <__malloc_unlock>:
 8033bbc:	4801      	ldr	r0, [pc, #4]	@ (8033bc4 <__malloc_unlock+0x8>)
 8033bbe:	f7fa bcd2 	b.w	802e566 <__retarget_lock_release_recursive>
 8033bc2:	bf00      	nop
 8033bc4:	2001a0ea 	.word	0x2001a0ea

08033bc8 <_Balloc>:
 8033bc8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8033bca:	b570      	push	{r4, r5, r6, lr}
 8033bcc:	4605      	mov	r5, r0
 8033bce:	460c      	mov	r4, r1
 8033bd0:	b17b      	cbz	r3, 8033bf2 <_Balloc+0x2a>
 8033bd2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8033bd4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8033bd8:	b9a0      	cbnz	r0, 8033c04 <_Balloc+0x3c>
 8033bda:	2101      	movs	r1, #1
 8033bdc:	fa01 f604 	lsl.w	r6, r1, r4
 8033be0:	1d72      	adds	r2, r6, #5
 8033be2:	0092      	lsls	r2, r2, #2
 8033be4:	4628      	mov	r0, r5
 8033be6:	f002 f885 	bl	8035cf4 <_calloc_r>
 8033bea:	b148      	cbz	r0, 8033c00 <_Balloc+0x38>
 8033bec:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8033bf0:	e00b      	b.n	8033c0a <_Balloc+0x42>
 8033bf2:	2221      	movs	r2, #33	@ 0x21
 8033bf4:	2104      	movs	r1, #4
 8033bf6:	f002 f87d 	bl	8035cf4 <_calloc_r>
 8033bfa:	6468      	str	r0, [r5, #68]	@ 0x44
 8033bfc:	2800      	cmp	r0, #0
 8033bfe:	d1e8      	bne.n	8033bd2 <_Balloc+0xa>
 8033c00:	2000      	movs	r0, #0
 8033c02:	bd70      	pop	{r4, r5, r6, pc}
 8033c04:	6802      	ldr	r2, [r0, #0]
 8033c06:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8033c0a:	2300      	movs	r3, #0
 8033c0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8033c10:	e7f7      	b.n	8033c02 <_Balloc+0x3a>

08033c12 <_Bfree>:
 8033c12:	b131      	cbz	r1, 8033c22 <_Bfree+0x10>
 8033c14:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8033c16:	684a      	ldr	r2, [r1, #4]
 8033c18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8033c1c:	6008      	str	r0, [r1, #0]
 8033c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8033c22:	4770      	bx	lr

08033c24 <__multadd>:
 8033c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033c28:	690d      	ldr	r5, [r1, #16]
 8033c2a:	4607      	mov	r7, r0
 8033c2c:	460c      	mov	r4, r1
 8033c2e:	461e      	mov	r6, r3
 8033c30:	f101 0c14 	add.w	ip, r1, #20
 8033c34:	2000      	movs	r0, #0
 8033c36:	f8dc 3000 	ldr.w	r3, [ip]
 8033c3a:	b299      	uxth	r1, r3
 8033c3c:	fb02 6101 	mla	r1, r2, r1, r6
 8033c40:	0c1e      	lsrs	r6, r3, #16
 8033c42:	0c0b      	lsrs	r3, r1, #16
 8033c44:	fb02 3306 	mla	r3, r2, r6, r3
 8033c48:	b289      	uxth	r1, r1
 8033c4a:	3001      	adds	r0, #1
 8033c4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8033c50:	4285      	cmp	r5, r0
 8033c52:	f84c 1b04 	str.w	r1, [ip], #4
 8033c56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8033c5a:	dcec      	bgt.n	8033c36 <__multadd+0x12>
 8033c5c:	b30e      	cbz	r6, 8033ca2 <__multadd+0x7e>
 8033c5e:	68a3      	ldr	r3, [r4, #8]
 8033c60:	42ab      	cmp	r3, r5
 8033c62:	dc19      	bgt.n	8033c98 <__multadd+0x74>
 8033c64:	6861      	ldr	r1, [r4, #4]
 8033c66:	4638      	mov	r0, r7
 8033c68:	3101      	adds	r1, #1
 8033c6a:	f7ff ffad 	bl	8033bc8 <_Balloc>
 8033c6e:	4680      	mov	r8, r0
 8033c70:	b928      	cbnz	r0, 8033c7e <__multadd+0x5a>
 8033c72:	4602      	mov	r2, r0
 8033c74:	4b0c      	ldr	r3, [pc, #48]	@ (8033ca8 <__multadd+0x84>)
 8033c76:	480d      	ldr	r0, [pc, #52]	@ (8033cac <__multadd+0x88>)
 8033c78:	21ba      	movs	r1, #186	@ 0xba
 8033c7a:	f7f6 fce7 	bl	802a64c <__assert_func>
 8033c7e:	6922      	ldr	r2, [r4, #16]
 8033c80:	3202      	adds	r2, #2
 8033c82:	f104 010c 	add.w	r1, r4, #12
 8033c86:	0092      	lsls	r2, r2, #2
 8033c88:	300c      	adds	r0, #12
 8033c8a:	f7fa fc6d 	bl	802e568 <memcpy>
 8033c8e:	4621      	mov	r1, r4
 8033c90:	4638      	mov	r0, r7
 8033c92:	f7ff ffbe 	bl	8033c12 <_Bfree>
 8033c96:	4644      	mov	r4, r8
 8033c98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8033c9c:	3501      	adds	r5, #1
 8033c9e:	615e      	str	r6, [r3, #20]
 8033ca0:	6125      	str	r5, [r4, #16]
 8033ca2:	4620      	mov	r0, r4
 8033ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033ca8:	0803c9ea 	.word	0x0803c9ea
 8033cac:	0803cade 	.word	0x0803cade

08033cb0 <__s2b>:
 8033cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8033cb4:	460c      	mov	r4, r1
 8033cb6:	4615      	mov	r5, r2
 8033cb8:	461f      	mov	r7, r3
 8033cba:	2209      	movs	r2, #9
 8033cbc:	3308      	adds	r3, #8
 8033cbe:	4606      	mov	r6, r0
 8033cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8033cc4:	2100      	movs	r1, #0
 8033cc6:	2201      	movs	r2, #1
 8033cc8:	429a      	cmp	r2, r3
 8033cca:	db09      	blt.n	8033ce0 <__s2b+0x30>
 8033ccc:	4630      	mov	r0, r6
 8033cce:	f7ff ff7b 	bl	8033bc8 <_Balloc>
 8033cd2:	b940      	cbnz	r0, 8033ce6 <__s2b+0x36>
 8033cd4:	4602      	mov	r2, r0
 8033cd6:	4b19      	ldr	r3, [pc, #100]	@ (8033d3c <__s2b+0x8c>)
 8033cd8:	4819      	ldr	r0, [pc, #100]	@ (8033d40 <__s2b+0x90>)
 8033cda:	21d3      	movs	r1, #211	@ 0xd3
 8033cdc:	f7f6 fcb6 	bl	802a64c <__assert_func>
 8033ce0:	0052      	lsls	r2, r2, #1
 8033ce2:	3101      	adds	r1, #1
 8033ce4:	e7f0      	b.n	8033cc8 <__s2b+0x18>
 8033ce6:	9b08      	ldr	r3, [sp, #32]
 8033ce8:	6143      	str	r3, [r0, #20]
 8033cea:	2d09      	cmp	r5, #9
 8033cec:	f04f 0301 	mov.w	r3, #1
 8033cf0:	6103      	str	r3, [r0, #16]
 8033cf2:	dd16      	ble.n	8033d22 <__s2b+0x72>
 8033cf4:	f104 0909 	add.w	r9, r4, #9
 8033cf8:	46c8      	mov	r8, r9
 8033cfa:	442c      	add	r4, r5
 8033cfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8033d00:	4601      	mov	r1, r0
 8033d02:	3b30      	subs	r3, #48	@ 0x30
 8033d04:	220a      	movs	r2, #10
 8033d06:	4630      	mov	r0, r6
 8033d08:	f7ff ff8c 	bl	8033c24 <__multadd>
 8033d0c:	45a0      	cmp	r8, r4
 8033d0e:	d1f5      	bne.n	8033cfc <__s2b+0x4c>
 8033d10:	f1a5 0408 	sub.w	r4, r5, #8
 8033d14:	444c      	add	r4, r9
 8033d16:	1b2d      	subs	r5, r5, r4
 8033d18:	1963      	adds	r3, r4, r5
 8033d1a:	42bb      	cmp	r3, r7
 8033d1c:	db04      	blt.n	8033d28 <__s2b+0x78>
 8033d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8033d22:	340a      	adds	r4, #10
 8033d24:	2509      	movs	r5, #9
 8033d26:	e7f6      	b.n	8033d16 <__s2b+0x66>
 8033d28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8033d2c:	4601      	mov	r1, r0
 8033d2e:	3b30      	subs	r3, #48	@ 0x30
 8033d30:	220a      	movs	r2, #10
 8033d32:	4630      	mov	r0, r6
 8033d34:	f7ff ff76 	bl	8033c24 <__multadd>
 8033d38:	e7ee      	b.n	8033d18 <__s2b+0x68>
 8033d3a:	bf00      	nop
 8033d3c:	0803c9ea 	.word	0x0803c9ea
 8033d40:	0803cade 	.word	0x0803cade

08033d44 <__hi0bits>:
 8033d44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8033d48:	4603      	mov	r3, r0
 8033d4a:	bf36      	itet	cc
 8033d4c:	0403      	lslcc	r3, r0, #16
 8033d4e:	2000      	movcs	r0, #0
 8033d50:	2010      	movcc	r0, #16
 8033d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8033d56:	bf3c      	itt	cc
 8033d58:	021b      	lslcc	r3, r3, #8
 8033d5a:	3008      	addcc	r0, #8
 8033d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8033d60:	bf3c      	itt	cc
 8033d62:	011b      	lslcc	r3, r3, #4
 8033d64:	3004      	addcc	r0, #4
 8033d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8033d6a:	bf3c      	itt	cc
 8033d6c:	009b      	lslcc	r3, r3, #2
 8033d6e:	3002      	addcc	r0, #2
 8033d70:	2b00      	cmp	r3, #0
 8033d72:	db05      	blt.n	8033d80 <__hi0bits+0x3c>
 8033d74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8033d78:	f100 0001 	add.w	r0, r0, #1
 8033d7c:	bf08      	it	eq
 8033d7e:	2020      	moveq	r0, #32
 8033d80:	4770      	bx	lr

08033d82 <__lo0bits>:
 8033d82:	6803      	ldr	r3, [r0, #0]
 8033d84:	4602      	mov	r2, r0
 8033d86:	f013 0007 	ands.w	r0, r3, #7
 8033d8a:	d00b      	beq.n	8033da4 <__lo0bits+0x22>
 8033d8c:	07d9      	lsls	r1, r3, #31
 8033d8e:	d421      	bmi.n	8033dd4 <__lo0bits+0x52>
 8033d90:	0798      	lsls	r0, r3, #30
 8033d92:	bf49      	itett	mi
 8033d94:	085b      	lsrmi	r3, r3, #1
 8033d96:	089b      	lsrpl	r3, r3, #2
 8033d98:	2001      	movmi	r0, #1
 8033d9a:	6013      	strmi	r3, [r2, #0]
 8033d9c:	bf5c      	itt	pl
 8033d9e:	6013      	strpl	r3, [r2, #0]
 8033da0:	2002      	movpl	r0, #2
 8033da2:	4770      	bx	lr
 8033da4:	b299      	uxth	r1, r3
 8033da6:	b909      	cbnz	r1, 8033dac <__lo0bits+0x2a>
 8033da8:	0c1b      	lsrs	r3, r3, #16
 8033daa:	2010      	movs	r0, #16
 8033dac:	b2d9      	uxtb	r1, r3
 8033dae:	b909      	cbnz	r1, 8033db4 <__lo0bits+0x32>
 8033db0:	3008      	adds	r0, #8
 8033db2:	0a1b      	lsrs	r3, r3, #8
 8033db4:	0719      	lsls	r1, r3, #28
 8033db6:	bf04      	itt	eq
 8033db8:	091b      	lsreq	r3, r3, #4
 8033dba:	3004      	addeq	r0, #4
 8033dbc:	0799      	lsls	r1, r3, #30
 8033dbe:	bf04      	itt	eq
 8033dc0:	089b      	lsreq	r3, r3, #2
 8033dc2:	3002      	addeq	r0, #2
 8033dc4:	07d9      	lsls	r1, r3, #31
 8033dc6:	d403      	bmi.n	8033dd0 <__lo0bits+0x4e>
 8033dc8:	085b      	lsrs	r3, r3, #1
 8033dca:	f100 0001 	add.w	r0, r0, #1
 8033dce:	d003      	beq.n	8033dd8 <__lo0bits+0x56>
 8033dd0:	6013      	str	r3, [r2, #0]
 8033dd2:	4770      	bx	lr
 8033dd4:	2000      	movs	r0, #0
 8033dd6:	4770      	bx	lr
 8033dd8:	2020      	movs	r0, #32
 8033dda:	4770      	bx	lr

08033ddc <__i2b>:
 8033ddc:	b510      	push	{r4, lr}
 8033dde:	460c      	mov	r4, r1
 8033de0:	2101      	movs	r1, #1
 8033de2:	f7ff fef1 	bl	8033bc8 <_Balloc>
 8033de6:	4602      	mov	r2, r0
 8033de8:	b928      	cbnz	r0, 8033df6 <__i2b+0x1a>
 8033dea:	4b05      	ldr	r3, [pc, #20]	@ (8033e00 <__i2b+0x24>)
 8033dec:	4805      	ldr	r0, [pc, #20]	@ (8033e04 <__i2b+0x28>)
 8033dee:	f240 1145 	movw	r1, #325	@ 0x145
 8033df2:	f7f6 fc2b 	bl	802a64c <__assert_func>
 8033df6:	2301      	movs	r3, #1
 8033df8:	6144      	str	r4, [r0, #20]
 8033dfa:	6103      	str	r3, [r0, #16]
 8033dfc:	bd10      	pop	{r4, pc}
 8033dfe:	bf00      	nop
 8033e00:	0803c9ea 	.word	0x0803c9ea
 8033e04:	0803cade 	.word	0x0803cade

08033e08 <__multiply>:
 8033e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033e0c:	4614      	mov	r4, r2
 8033e0e:	690a      	ldr	r2, [r1, #16]
 8033e10:	6923      	ldr	r3, [r4, #16]
 8033e12:	429a      	cmp	r2, r3
 8033e14:	bfa8      	it	ge
 8033e16:	4623      	movge	r3, r4
 8033e18:	460f      	mov	r7, r1
 8033e1a:	bfa4      	itt	ge
 8033e1c:	460c      	movge	r4, r1
 8033e1e:	461f      	movge	r7, r3
 8033e20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8033e24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8033e28:	68a3      	ldr	r3, [r4, #8]
 8033e2a:	6861      	ldr	r1, [r4, #4]
 8033e2c:	eb0a 0609 	add.w	r6, sl, r9
 8033e30:	42b3      	cmp	r3, r6
 8033e32:	b085      	sub	sp, #20
 8033e34:	bfb8      	it	lt
 8033e36:	3101      	addlt	r1, #1
 8033e38:	f7ff fec6 	bl	8033bc8 <_Balloc>
 8033e3c:	b930      	cbnz	r0, 8033e4c <__multiply+0x44>
 8033e3e:	4602      	mov	r2, r0
 8033e40:	4b44      	ldr	r3, [pc, #272]	@ (8033f54 <__multiply+0x14c>)
 8033e42:	4845      	ldr	r0, [pc, #276]	@ (8033f58 <__multiply+0x150>)
 8033e44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8033e48:	f7f6 fc00 	bl	802a64c <__assert_func>
 8033e4c:	f100 0514 	add.w	r5, r0, #20
 8033e50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8033e54:	462b      	mov	r3, r5
 8033e56:	2200      	movs	r2, #0
 8033e58:	4543      	cmp	r3, r8
 8033e5a:	d321      	bcc.n	8033ea0 <__multiply+0x98>
 8033e5c:	f107 0114 	add.w	r1, r7, #20
 8033e60:	f104 0214 	add.w	r2, r4, #20
 8033e64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8033e68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8033e6c:	9302      	str	r3, [sp, #8]
 8033e6e:	1b13      	subs	r3, r2, r4
 8033e70:	3b15      	subs	r3, #21
 8033e72:	f023 0303 	bic.w	r3, r3, #3
 8033e76:	3304      	adds	r3, #4
 8033e78:	f104 0715 	add.w	r7, r4, #21
 8033e7c:	42ba      	cmp	r2, r7
 8033e7e:	bf38      	it	cc
 8033e80:	2304      	movcc	r3, #4
 8033e82:	9301      	str	r3, [sp, #4]
 8033e84:	9b02      	ldr	r3, [sp, #8]
 8033e86:	9103      	str	r1, [sp, #12]
 8033e88:	428b      	cmp	r3, r1
 8033e8a:	d80c      	bhi.n	8033ea6 <__multiply+0x9e>
 8033e8c:	2e00      	cmp	r6, #0
 8033e8e:	dd03      	ble.n	8033e98 <__multiply+0x90>
 8033e90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8033e94:	2b00      	cmp	r3, #0
 8033e96:	d05b      	beq.n	8033f50 <__multiply+0x148>
 8033e98:	6106      	str	r6, [r0, #16]
 8033e9a:	b005      	add	sp, #20
 8033e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033ea0:	f843 2b04 	str.w	r2, [r3], #4
 8033ea4:	e7d8      	b.n	8033e58 <__multiply+0x50>
 8033ea6:	f8b1 a000 	ldrh.w	sl, [r1]
 8033eaa:	f1ba 0f00 	cmp.w	sl, #0
 8033eae:	d024      	beq.n	8033efa <__multiply+0xf2>
 8033eb0:	f104 0e14 	add.w	lr, r4, #20
 8033eb4:	46a9      	mov	r9, r5
 8033eb6:	f04f 0c00 	mov.w	ip, #0
 8033eba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8033ebe:	f8d9 3000 	ldr.w	r3, [r9]
 8033ec2:	fa1f fb87 	uxth.w	fp, r7
 8033ec6:	b29b      	uxth	r3, r3
 8033ec8:	fb0a 330b 	mla	r3, sl, fp, r3
 8033ecc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8033ed0:	f8d9 7000 	ldr.w	r7, [r9]
 8033ed4:	4463      	add	r3, ip
 8033ed6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8033eda:	fb0a c70b 	mla	r7, sl, fp, ip
 8033ede:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8033ee2:	b29b      	uxth	r3, r3
 8033ee4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8033ee8:	4572      	cmp	r2, lr
 8033eea:	f849 3b04 	str.w	r3, [r9], #4
 8033eee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8033ef2:	d8e2      	bhi.n	8033eba <__multiply+0xb2>
 8033ef4:	9b01      	ldr	r3, [sp, #4]
 8033ef6:	f845 c003 	str.w	ip, [r5, r3]
 8033efa:	9b03      	ldr	r3, [sp, #12]
 8033efc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8033f00:	3104      	adds	r1, #4
 8033f02:	f1b9 0f00 	cmp.w	r9, #0
 8033f06:	d021      	beq.n	8033f4c <__multiply+0x144>
 8033f08:	682b      	ldr	r3, [r5, #0]
 8033f0a:	f104 0c14 	add.w	ip, r4, #20
 8033f0e:	46ae      	mov	lr, r5
 8033f10:	f04f 0a00 	mov.w	sl, #0
 8033f14:	f8bc b000 	ldrh.w	fp, [ip]
 8033f18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8033f1c:	fb09 770b 	mla	r7, r9, fp, r7
 8033f20:	4457      	add	r7, sl
 8033f22:	b29b      	uxth	r3, r3
 8033f24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8033f28:	f84e 3b04 	str.w	r3, [lr], #4
 8033f2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8033f30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8033f34:	f8be 3000 	ldrh.w	r3, [lr]
 8033f38:	fb09 330a 	mla	r3, r9, sl, r3
 8033f3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8033f40:	4562      	cmp	r2, ip
 8033f42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8033f46:	d8e5      	bhi.n	8033f14 <__multiply+0x10c>
 8033f48:	9f01      	ldr	r7, [sp, #4]
 8033f4a:	51eb      	str	r3, [r5, r7]
 8033f4c:	3504      	adds	r5, #4
 8033f4e:	e799      	b.n	8033e84 <__multiply+0x7c>
 8033f50:	3e01      	subs	r6, #1
 8033f52:	e79b      	b.n	8033e8c <__multiply+0x84>
 8033f54:	0803c9ea 	.word	0x0803c9ea
 8033f58:	0803cade 	.word	0x0803cade

08033f5c <__pow5mult>:
 8033f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8033f60:	4615      	mov	r5, r2
 8033f62:	f012 0203 	ands.w	r2, r2, #3
 8033f66:	4607      	mov	r7, r0
 8033f68:	460e      	mov	r6, r1
 8033f6a:	d007      	beq.n	8033f7c <__pow5mult+0x20>
 8033f6c:	4c1a      	ldr	r4, [pc, #104]	@ (8033fd8 <__pow5mult+0x7c>)
 8033f6e:	3a01      	subs	r2, #1
 8033f70:	2300      	movs	r3, #0
 8033f72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8033f76:	f7ff fe55 	bl	8033c24 <__multadd>
 8033f7a:	4606      	mov	r6, r0
 8033f7c:	10ad      	asrs	r5, r5, #2
 8033f7e:	d027      	beq.n	8033fd0 <__pow5mult+0x74>
 8033f80:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8033f82:	b944      	cbnz	r4, 8033f96 <__pow5mult+0x3a>
 8033f84:	f240 2171 	movw	r1, #625	@ 0x271
 8033f88:	4638      	mov	r0, r7
 8033f8a:	f7ff ff27 	bl	8033ddc <__i2b>
 8033f8e:	2300      	movs	r3, #0
 8033f90:	6438      	str	r0, [r7, #64]	@ 0x40
 8033f92:	4604      	mov	r4, r0
 8033f94:	6003      	str	r3, [r0, #0]
 8033f96:	f04f 0900 	mov.w	r9, #0
 8033f9a:	07eb      	lsls	r3, r5, #31
 8033f9c:	d50a      	bpl.n	8033fb4 <__pow5mult+0x58>
 8033f9e:	4631      	mov	r1, r6
 8033fa0:	4622      	mov	r2, r4
 8033fa2:	4638      	mov	r0, r7
 8033fa4:	f7ff ff30 	bl	8033e08 <__multiply>
 8033fa8:	4631      	mov	r1, r6
 8033faa:	4680      	mov	r8, r0
 8033fac:	4638      	mov	r0, r7
 8033fae:	f7ff fe30 	bl	8033c12 <_Bfree>
 8033fb2:	4646      	mov	r6, r8
 8033fb4:	106d      	asrs	r5, r5, #1
 8033fb6:	d00b      	beq.n	8033fd0 <__pow5mult+0x74>
 8033fb8:	6820      	ldr	r0, [r4, #0]
 8033fba:	b938      	cbnz	r0, 8033fcc <__pow5mult+0x70>
 8033fbc:	4622      	mov	r2, r4
 8033fbe:	4621      	mov	r1, r4
 8033fc0:	4638      	mov	r0, r7
 8033fc2:	f7ff ff21 	bl	8033e08 <__multiply>
 8033fc6:	6020      	str	r0, [r4, #0]
 8033fc8:	f8c0 9000 	str.w	r9, [r0]
 8033fcc:	4604      	mov	r4, r0
 8033fce:	e7e4      	b.n	8033f9a <__pow5mult+0x3e>
 8033fd0:	4630      	mov	r0, r6
 8033fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8033fd6:	bf00      	nop
 8033fd8:	0803cb38 	.word	0x0803cb38

08033fdc <__lshift>:
 8033fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8033fe0:	460c      	mov	r4, r1
 8033fe2:	6849      	ldr	r1, [r1, #4]
 8033fe4:	6923      	ldr	r3, [r4, #16]
 8033fe6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8033fea:	68a3      	ldr	r3, [r4, #8]
 8033fec:	4607      	mov	r7, r0
 8033fee:	4691      	mov	r9, r2
 8033ff0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8033ff4:	f108 0601 	add.w	r6, r8, #1
 8033ff8:	42b3      	cmp	r3, r6
 8033ffa:	db0b      	blt.n	8034014 <__lshift+0x38>
 8033ffc:	4638      	mov	r0, r7
 8033ffe:	f7ff fde3 	bl	8033bc8 <_Balloc>
 8034002:	4605      	mov	r5, r0
 8034004:	b948      	cbnz	r0, 803401a <__lshift+0x3e>
 8034006:	4602      	mov	r2, r0
 8034008:	4b28      	ldr	r3, [pc, #160]	@ (80340ac <__lshift+0xd0>)
 803400a:	4829      	ldr	r0, [pc, #164]	@ (80340b0 <__lshift+0xd4>)
 803400c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8034010:	f7f6 fb1c 	bl	802a64c <__assert_func>
 8034014:	3101      	adds	r1, #1
 8034016:	005b      	lsls	r3, r3, #1
 8034018:	e7ee      	b.n	8033ff8 <__lshift+0x1c>
 803401a:	2300      	movs	r3, #0
 803401c:	f100 0114 	add.w	r1, r0, #20
 8034020:	f100 0210 	add.w	r2, r0, #16
 8034024:	4618      	mov	r0, r3
 8034026:	4553      	cmp	r3, sl
 8034028:	db33      	blt.n	8034092 <__lshift+0xb6>
 803402a:	6920      	ldr	r0, [r4, #16]
 803402c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8034030:	f104 0314 	add.w	r3, r4, #20
 8034034:	f019 091f 	ands.w	r9, r9, #31
 8034038:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 803403c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8034040:	d02b      	beq.n	803409a <__lshift+0xbe>
 8034042:	f1c9 0e20 	rsb	lr, r9, #32
 8034046:	468a      	mov	sl, r1
 8034048:	2200      	movs	r2, #0
 803404a:	6818      	ldr	r0, [r3, #0]
 803404c:	fa00 f009 	lsl.w	r0, r0, r9
 8034050:	4310      	orrs	r0, r2
 8034052:	f84a 0b04 	str.w	r0, [sl], #4
 8034056:	f853 2b04 	ldr.w	r2, [r3], #4
 803405a:	459c      	cmp	ip, r3
 803405c:	fa22 f20e 	lsr.w	r2, r2, lr
 8034060:	d8f3      	bhi.n	803404a <__lshift+0x6e>
 8034062:	ebac 0304 	sub.w	r3, ip, r4
 8034066:	3b15      	subs	r3, #21
 8034068:	f023 0303 	bic.w	r3, r3, #3
 803406c:	3304      	adds	r3, #4
 803406e:	f104 0015 	add.w	r0, r4, #21
 8034072:	4584      	cmp	ip, r0
 8034074:	bf38      	it	cc
 8034076:	2304      	movcc	r3, #4
 8034078:	50ca      	str	r2, [r1, r3]
 803407a:	b10a      	cbz	r2, 8034080 <__lshift+0xa4>
 803407c:	f108 0602 	add.w	r6, r8, #2
 8034080:	3e01      	subs	r6, #1
 8034082:	4638      	mov	r0, r7
 8034084:	612e      	str	r6, [r5, #16]
 8034086:	4621      	mov	r1, r4
 8034088:	f7ff fdc3 	bl	8033c12 <_Bfree>
 803408c:	4628      	mov	r0, r5
 803408e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8034092:	f842 0f04 	str.w	r0, [r2, #4]!
 8034096:	3301      	adds	r3, #1
 8034098:	e7c5      	b.n	8034026 <__lshift+0x4a>
 803409a:	3904      	subs	r1, #4
 803409c:	f853 2b04 	ldr.w	r2, [r3], #4
 80340a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80340a4:	459c      	cmp	ip, r3
 80340a6:	d8f9      	bhi.n	803409c <__lshift+0xc0>
 80340a8:	e7ea      	b.n	8034080 <__lshift+0xa4>
 80340aa:	bf00      	nop
 80340ac:	0803c9ea 	.word	0x0803c9ea
 80340b0:	0803cade 	.word	0x0803cade

080340b4 <__mcmp>:
 80340b4:	690a      	ldr	r2, [r1, #16]
 80340b6:	4603      	mov	r3, r0
 80340b8:	6900      	ldr	r0, [r0, #16]
 80340ba:	1a80      	subs	r0, r0, r2
 80340bc:	b530      	push	{r4, r5, lr}
 80340be:	d10e      	bne.n	80340de <__mcmp+0x2a>
 80340c0:	3314      	adds	r3, #20
 80340c2:	3114      	adds	r1, #20
 80340c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80340c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80340cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80340d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80340d4:	4295      	cmp	r5, r2
 80340d6:	d003      	beq.n	80340e0 <__mcmp+0x2c>
 80340d8:	d205      	bcs.n	80340e6 <__mcmp+0x32>
 80340da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80340de:	bd30      	pop	{r4, r5, pc}
 80340e0:	42a3      	cmp	r3, r4
 80340e2:	d3f3      	bcc.n	80340cc <__mcmp+0x18>
 80340e4:	e7fb      	b.n	80340de <__mcmp+0x2a>
 80340e6:	2001      	movs	r0, #1
 80340e8:	e7f9      	b.n	80340de <__mcmp+0x2a>
	...

080340ec <__mdiff>:
 80340ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80340f0:	4689      	mov	r9, r1
 80340f2:	4606      	mov	r6, r0
 80340f4:	4611      	mov	r1, r2
 80340f6:	4648      	mov	r0, r9
 80340f8:	4614      	mov	r4, r2
 80340fa:	f7ff ffdb 	bl	80340b4 <__mcmp>
 80340fe:	1e05      	subs	r5, r0, #0
 8034100:	d112      	bne.n	8034128 <__mdiff+0x3c>
 8034102:	4629      	mov	r1, r5
 8034104:	4630      	mov	r0, r6
 8034106:	f7ff fd5f 	bl	8033bc8 <_Balloc>
 803410a:	4602      	mov	r2, r0
 803410c:	b928      	cbnz	r0, 803411a <__mdiff+0x2e>
 803410e:	4b3f      	ldr	r3, [pc, #252]	@ (803420c <__mdiff+0x120>)
 8034110:	f240 2137 	movw	r1, #567	@ 0x237
 8034114:	483e      	ldr	r0, [pc, #248]	@ (8034210 <__mdiff+0x124>)
 8034116:	f7f6 fa99 	bl	802a64c <__assert_func>
 803411a:	2301      	movs	r3, #1
 803411c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8034120:	4610      	mov	r0, r2
 8034122:	b003      	add	sp, #12
 8034124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034128:	bfbc      	itt	lt
 803412a:	464b      	movlt	r3, r9
 803412c:	46a1      	movlt	r9, r4
 803412e:	4630      	mov	r0, r6
 8034130:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8034134:	bfba      	itte	lt
 8034136:	461c      	movlt	r4, r3
 8034138:	2501      	movlt	r5, #1
 803413a:	2500      	movge	r5, #0
 803413c:	f7ff fd44 	bl	8033bc8 <_Balloc>
 8034140:	4602      	mov	r2, r0
 8034142:	b918      	cbnz	r0, 803414c <__mdiff+0x60>
 8034144:	4b31      	ldr	r3, [pc, #196]	@ (803420c <__mdiff+0x120>)
 8034146:	f240 2145 	movw	r1, #581	@ 0x245
 803414a:	e7e3      	b.n	8034114 <__mdiff+0x28>
 803414c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8034150:	6926      	ldr	r6, [r4, #16]
 8034152:	60c5      	str	r5, [r0, #12]
 8034154:	f109 0310 	add.w	r3, r9, #16
 8034158:	f109 0514 	add.w	r5, r9, #20
 803415c:	f104 0e14 	add.w	lr, r4, #20
 8034160:	f100 0b14 	add.w	fp, r0, #20
 8034164:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8034168:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 803416c:	9301      	str	r3, [sp, #4]
 803416e:	46d9      	mov	r9, fp
 8034170:	f04f 0c00 	mov.w	ip, #0
 8034174:	9b01      	ldr	r3, [sp, #4]
 8034176:	f85e 0b04 	ldr.w	r0, [lr], #4
 803417a:	f853 af04 	ldr.w	sl, [r3, #4]!
 803417e:	9301      	str	r3, [sp, #4]
 8034180:	fa1f f38a 	uxth.w	r3, sl
 8034184:	4619      	mov	r1, r3
 8034186:	b283      	uxth	r3, r0
 8034188:	1acb      	subs	r3, r1, r3
 803418a:	0c00      	lsrs	r0, r0, #16
 803418c:	4463      	add	r3, ip
 803418e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8034192:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8034196:	b29b      	uxth	r3, r3
 8034198:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 803419c:	4576      	cmp	r6, lr
 803419e:	f849 3b04 	str.w	r3, [r9], #4
 80341a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80341a6:	d8e5      	bhi.n	8034174 <__mdiff+0x88>
 80341a8:	1b33      	subs	r3, r6, r4
 80341aa:	3b15      	subs	r3, #21
 80341ac:	f023 0303 	bic.w	r3, r3, #3
 80341b0:	3415      	adds	r4, #21
 80341b2:	3304      	adds	r3, #4
 80341b4:	42a6      	cmp	r6, r4
 80341b6:	bf38      	it	cc
 80341b8:	2304      	movcc	r3, #4
 80341ba:	441d      	add	r5, r3
 80341bc:	445b      	add	r3, fp
 80341be:	461e      	mov	r6, r3
 80341c0:	462c      	mov	r4, r5
 80341c2:	4544      	cmp	r4, r8
 80341c4:	d30e      	bcc.n	80341e4 <__mdiff+0xf8>
 80341c6:	f108 0103 	add.w	r1, r8, #3
 80341ca:	1b49      	subs	r1, r1, r5
 80341cc:	f021 0103 	bic.w	r1, r1, #3
 80341d0:	3d03      	subs	r5, #3
 80341d2:	45a8      	cmp	r8, r5
 80341d4:	bf38      	it	cc
 80341d6:	2100      	movcc	r1, #0
 80341d8:	440b      	add	r3, r1
 80341da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80341de:	b191      	cbz	r1, 8034206 <__mdiff+0x11a>
 80341e0:	6117      	str	r7, [r2, #16]
 80341e2:	e79d      	b.n	8034120 <__mdiff+0x34>
 80341e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80341e8:	46e6      	mov	lr, ip
 80341ea:	0c08      	lsrs	r0, r1, #16
 80341ec:	fa1c fc81 	uxtah	ip, ip, r1
 80341f0:	4471      	add	r1, lr
 80341f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80341f6:	b289      	uxth	r1, r1
 80341f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80341fc:	f846 1b04 	str.w	r1, [r6], #4
 8034200:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8034204:	e7dd      	b.n	80341c2 <__mdiff+0xd6>
 8034206:	3f01      	subs	r7, #1
 8034208:	e7e7      	b.n	80341da <__mdiff+0xee>
 803420a:	bf00      	nop
 803420c:	0803c9ea 	.word	0x0803c9ea
 8034210:	0803cade 	.word	0x0803cade

08034214 <__ulp>:
 8034214:	b082      	sub	sp, #8
 8034216:	ed8d 0b00 	vstr	d0, [sp]
 803421a:	9a01      	ldr	r2, [sp, #4]
 803421c:	4b0f      	ldr	r3, [pc, #60]	@ (803425c <__ulp+0x48>)
 803421e:	4013      	ands	r3, r2
 8034220:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8034224:	2b00      	cmp	r3, #0
 8034226:	dc08      	bgt.n	803423a <__ulp+0x26>
 8034228:	425b      	negs	r3, r3
 803422a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 803422e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8034232:	da04      	bge.n	803423e <__ulp+0x2a>
 8034234:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8034238:	4113      	asrs	r3, r2
 803423a:	2200      	movs	r2, #0
 803423c:	e008      	b.n	8034250 <__ulp+0x3c>
 803423e:	f1a2 0314 	sub.w	r3, r2, #20
 8034242:	2b1e      	cmp	r3, #30
 8034244:	bfda      	itte	le
 8034246:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 803424a:	40da      	lsrle	r2, r3
 803424c:	2201      	movgt	r2, #1
 803424e:	2300      	movs	r3, #0
 8034250:	4619      	mov	r1, r3
 8034252:	4610      	mov	r0, r2
 8034254:	ec41 0b10 	vmov	d0, r0, r1
 8034258:	b002      	add	sp, #8
 803425a:	4770      	bx	lr
 803425c:	7ff00000 	.word	0x7ff00000

08034260 <__b2d>:
 8034260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8034264:	6906      	ldr	r6, [r0, #16]
 8034266:	f100 0814 	add.w	r8, r0, #20
 803426a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 803426e:	1f37      	subs	r7, r6, #4
 8034270:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8034274:	4610      	mov	r0, r2
 8034276:	f7ff fd65 	bl	8033d44 <__hi0bits>
 803427a:	f1c0 0320 	rsb	r3, r0, #32
 803427e:	280a      	cmp	r0, #10
 8034280:	600b      	str	r3, [r1, #0]
 8034282:	491b      	ldr	r1, [pc, #108]	@ (80342f0 <__b2d+0x90>)
 8034284:	dc15      	bgt.n	80342b2 <__b2d+0x52>
 8034286:	f1c0 0c0b 	rsb	ip, r0, #11
 803428a:	fa22 f30c 	lsr.w	r3, r2, ip
 803428e:	45b8      	cmp	r8, r7
 8034290:	ea43 0501 	orr.w	r5, r3, r1
 8034294:	bf34      	ite	cc
 8034296:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 803429a:	2300      	movcs	r3, #0
 803429c:	3015      	adds	r0, #21
 803429e:	fa02 f000 	lsl.w	r0, r2, r0
 80342a2:	fa23 f30c 	lsr.w	r3, r3, ip
 80342a6:	4303      	orrs	r3, r0
 80342a8:	461c      	mov	r4, r3
 80342aa:	ec45 4b10 	vmov	d0, r4, r5
 80342ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80342b2:	45b8      	cmp	r8, r7
 80342b4:	bf3a      	itte	cc
 80342b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80342ba:	f1a6 0708 	subcc.w	r7, r6, #8
 80342be:	2300      	movcs	r3, #0
 80342c0:	380b      	subs	r0, #11
 80342c2:	d012      	beq.n	80342ea <__b2d+0x8a>
 80342c4:	f1c0 0120 	rsb	r1, r0, #32
 80342c8:	fa23 f401 	lsr.w	r4, r3, r1
 80342cc:	4082      	lsls	r2, r0
 80342ce:	4322      	orrs	r2, r4
 80342d0:	4547      	cmp	r7, r8
 80342d2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80342d6:	bf8c      	ite	hi
 80342d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80342dc:	2200      	movls	r2, #0
 80342de:	4083      	lsls	r3, r0
 80342e0:	40ca      	lsrs	r2, r1
 80342e2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80342e6:	4313      	orrs	r3, r2
 80342e8:	e7de      	b.n	80342a8 <__b2d+0x48>
 80342ea:	ea42 0501 	orr.w	r5, r2, r1
 80342ee:	e7db      	b.n	80342a8 <__b2d+0x48>
 80342f0:	3ff00000 	.word	0x3ff00000

080342f4 <__d2b>:
 80342f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80342f8:	460f      	mov	r7, r1
 80342fa:	2101      	movs	r1, #1
 80342fc:	ec59 8b10 	vmov	r8, r9, d0
 8034300:	4616      	mov	r6, r2
 8034302:	f7ff fc61 	bl	8033bc8 <_Balloc>
 8034306:	4604      	mov	r4, r0
 8034308:	b930      	cbnz	r0, 8034318 <__d2b+0x24>
 803430a:	4602      	mov	r2, r0
 803430c:	4b23      	ldr	r3, [pc, #140]	@ (803439c <__d2b+0xa8>)
 803430e:	4824      	ldr	r0, [pc, #144]	@ (80343a0 <__d2b+0xac>)
 8034310:	f240 310f 	movw	r1, #783	@ 0x30f
 8034314:	f7f6 f99a 	bl	802a64c <__assert_func>
 8034318:	f3c9 550a 	ubfx	r5, r9, #20, #11
 803431c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8034320:	b10d      	cbz	r5, 8034326 <__d2b+0x32>
 8034322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8034326:	9301      	str	r3, [sp, #4]
 8034328:	f1b8 0300 	subs.w	r3, r8, #0
 803432c:	d023      	beq.n	8034376 <__d2b+0x82>
 803432e:	4668      	mov	r0, sp
 8034330:	9300      	str	r3, [sp, #0]
 8034332:	f7ff fd26 	bl	8033d82 <__lo0bits>
 8034336:	e9dd 1200 	ldrd	r1, r2, [sp]
 803433a:	b1d0      	cbz	r0, 8034372 <__d2b+0x7e>
 803433c:	f1c0 0320 	rsb	r3, r0, #32
 8034340:	fa02 f303 	lsl.w	r3, r2, r3
 8034344:	430b      	orrs	r3, r1
 8034346:	40c2      	lsrs	r2, r0
 8034348:	6163      	str	r3, [r4, #20]
 803434a:	9201      	str	r2, [sp, #4]
 803434c:	9b01      	ldr	r3, [sp, #4]
 803434e:	61a3      	str	r3, [r4, #24]
 8034350:	2b00      	cmp	r3, #0
 8034352:	bf0c      	ite	eq
 8034354:	2201      	moveq	r2, #1
 8034356:	2202      	movne	r2, #2
 8034358:	6122      	str	r2, [r4, #16]
 803435a:	b1a5      	cbz	r5, 8034386 <__d2b+0x92>
 803435c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8034360:	4405      	add	r5, r0
 8034362:	603d      	str	r5, [r7, #0]
 8034364:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8034368:	6030      	str	r0, [r6, #0]
 803436a:	4620      	mov	r0, r4
 803436c:	b003      	add	sp, #12
 803436e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8034372:	6161      	str	r1, [r4, #20]
 8034374:	e7ea      	b.n	803434c <__d2b+0x58>
 8034376:	a801      	add	r0, sp, #4
 8034378:	f7ff fd03 	bl	8033d82 <__lo0bits>
 803437c:	9b01      	ldr	r3, [sp, #4]
 803437e:	6163      	str	r3, [r4, #20]
 8034380:	3020      	adds	r0, #32
 8034382:	2201      	movs	r2, #1
 8034384:	e7e8      	b.n	8034358 <__d2b+0x64>
 8034386:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 803438a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 803438e:	6038      	str	r0, [r7, #0]
 8034390:	6918      	ldr	r0, [r3, #16]
 8034392:	f7ff fcd7 	bl	8033d44 <__hi0bits>
 8034396:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 803439a:	e7e5      	b.n	8034368 <__d2b+0x74>
 803439c:	0803c9ea 	.word	0x0803c9ea
 80343a0:	0803cade 	.word	0x0803cade

080343a4 <__ratio>:
 80343a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80343a8:	b085      	sub	sp, #20
 80343aa:	e9cd 1000 	strd	r1, r0, [sp]
 80343ae:	a902      	add	r1, sp, #8
 80343b0:	f7ff ff56 	bl	8034260 <__b2d>
 80343b4:	9800      	ldr	r0, [sp, #0]
 80343b6:	a903      	add	r1, sp, #12
 80343b8:	ec55 4b10 	vmov	r4, r5, d0
 80343bc:	f7ff ff50 	bl	8034260 <__b2d>
 80343c0:	9b01      	ldr	r3, [sp, #4]
 80343c2:	6919      	ldr	r1, [r3, #16]
 80343c4:	9b00      	ldr	r3, [sp, #0]
 80343c6:	691b      	ldr	r3, [r3, #16]
 80343c8:	1ac9      	subs	r1, r1, r3
 80343ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80343ce:	1a9b      	subs	r3, r3, r2
 80343d0:	ec5b ab10 	vmov	sl, fp, d0
 80343d4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80343d8:	2b00      	cmp	r3, #0
 80343da:	bfce      	itee	gt
 80343dc:	462a      	movgt	r2, r5
 80343de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80343e2:	465a      	movle	r2, fp
 80343e4:	462f      	mov	r7, r5
 80343e6:	46d9      	mov	r9, fp
 80343e8:	bfcc      	ite	gt
 80343ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80343ee:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80343f2:	464b      	mov	r3, r9
 80343f4:	4652      	mov	r2, sl
 80343f6:	4620      	mov	r0, r4
 80343f8:	4639      	mov	r1, r7
 80343fa:	f7dc fa3f 	bl	801087c <__aeabi_ddiv>
 80343fe:	ec41 0b10 	vmov	d0, r0, r1
 8034402:	b005      	add	sp, #20
 8034404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08034408 <__copybits>:
 8034408:	3901      	subs	r1, #1
 803440a:	b570      	push	{r4, r5, r6, lr}
 803440c:	1149      	asrs	r1, r1, #5
 803440e:	6914      	ldr	r4, [r2, #16]
 8034410:	3101      	adds	r1, #1
 8034412:	f102 0314 	add.w	r3, r2, #20
 8034416:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 803441a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 803441e:	1f05      	subs	r5, r0, #4
 8034420:	42a3      	cmp	r3, r4
 8034422:	d30c      	bcc.n	803443e <__copybits+0x36>
 8034424:	1aa3      	subs	r3, r4, r2
 8034426:	3b11      	subs	r3, #17
 8034428:	f023 0303 	bic.w	r3, r3, #3
 803442c:	3211      	adds	r2, #17
 803442e:	42a2      	cmp	r2, r4
 8034430:	bf88      	it	hi
 8034432:	2300      	movhi	r3, #0
 8034434:	4418      	add	r0, r3
 8034436:	2300      	movs	r3, #0
 8034438:	4288      	cmp	r0, r1
 803443a:	d305      	bcc.n	8034448 <__copybits+0x40>
 803443c:	bd70      	pop	{r4, r5, r6, pc}
 803443e:	f853 6b04 	ldr.w	r6, [r3], #4
 8034442:	f845 6f04 	str.w	r6, [r5, #4]!
 8034446:	e7eb      	b.n	8034420 <__copybits+0x18>
 8034448:	f840 3b04 	str.w	r3, [r0], #4
 803444c:	e7f4      	b.n	8034438 <__copybits+0x30>

0803444e <__any_on>:
 803444e:	f100 0214 	add.w	r2, r0, #20
 8034452:	6900      	ldr	r0, [r0, #16]
 8034454:	114b      	asrs	r3, r1, #5
 8034456:	4298      	cmp	r0, r3
 8034458:	b510      	push	{r4, lr}
 803445a:	db11      	blt.n	8034480 <__any_on+0x32>
 803445c:	dd0a      	ble.n	8034474 <__any_on+0x26>
 803445e:	f011 011f 	ands.w	r1, r1, #31
 8034462:	d007      	beq.n	8034474 <__any_on+0x26>
 8034464:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8034468:	fa24 f001 	lsr.w	r0, r4, r1
 803446c:	fa00 f101 	lsl.w	r1, r0, r1
 8034470:	428c      	cmp	r4, r1
 8034472:	d10b      	bne.n	803448c <__any_on+0x3e>
 8034474:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8034478:	4293      	cmp	r3, r2
 803447a:	d803      	bhi.n	8034484 <__any_on+0x36>
 803447c:	2000      	movs	r0, #0
 803447e:	bd10      	pop	{r4, pc}
 8034480:	4603      	mov	r3, r0
 8034482:	e7f7      	b.n	8034474 <__any_on+0x26>
 8034484:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8034488:	2900      	cmp	r1, #0
 803448a:	d0f5      	beq.n	8034478 <__any_on+0x2a>
 803448c:	2001      	movs	r0, #1
 803448e:	e7f6      	b.n	803447e <__any_on+0x30>

08034490 <realloc>:
 8034490:	4b02      	ldr	r3, [pc, #8]	@ (803449c <realloc+0xc>)
 8034492:	460a      	mov	r2, r1
 8034494:	4601      	mov	r1, r0
 8034496:	6818      	ldr	r0, [r3, #0]
 8034498:	f000 b890 	b.w	80345bc <_realloc_r>
 803449c:	200002d8 	.word	0x200002d8

080344a0 <_fclose_r>:
 80344a0:	b570      	push	{r4, r5, r6, lr}
 80344a2:	4605      	mov	r5, r0
 80344a4:	460c      	mov	r4, r1
 80344a6:	b1b1      	cbz	r1, 80344d6 <_fclose_r+0x36>
 80344a8:	b118      	cbz	r0, 80344b2 <_fclose_r+0x12>
 80344aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80344ac:	b90b      	cbnz	r3, 80344b2 <_fclose_r+0x12>
 80344ae:	f7f8 fb79 	bl	802cba4 <__sinit>
 80344b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80344b4:	07de      	lsls	r6, r3, #31
 80344b6:	d405      	bmi.n	80344c4 <_fclose_r+0x24>
 80344b8:	89a3      	ldrh	r3, [r4, #12]
 80344ba:	0598      	lsls	r0, r3, #22
 80344bc:	d402      	bmi.n	80344c4 <_fclose_r+0x24>
 80344be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80344c0:	f7fa f84f 	bl	802e562 <__retarget_lock_acquire_recursive>
 80344c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80344c8:	b943      	cbnz	r3, 80344dc <_fclose_r+0x3c>
 80344ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80344cc:	07d9      	lsls	r1, r3, #31
 80344ce:	d402      	bmi.n	80344d6 <_fclose_r+0x36>
 80344d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80344d2:	f7fa f848 	bl	802e566 <__retarget_lock_release_recursive>
 80344d6:	2600      	movs	r6, #0
 80344d8:	4630      	mov	r0, r6
 80344da:	bd70      	pop	{r4, r5, r6, pc}
 80344dc:	4621      	mov	r1, r4
 80344de:	4628      	mov	r0, r5
 80344e0:	f7f8 f996 	bl	802c810 <__sflush_r>
 80344e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80344e6:	4606      	mov	r6, r0
 80344e8:	b133      	cbz	r3, 80344f8 <_fclose_r+0x58>
 80344ea:	69e1      	ldr	r1, [r4, #28]
 80344ec:	4628      	mov	r0, r5
 80344ee:	4798      	blx	r3
 80344f0:	2800      	cmp	r0, #0
 80344f2:	bfb8      	it	lt
 80344f4:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 80344f8:	89a3      	ldrh	r3, [r4, #12]
 80344fa:	061a      	lsls	r2, r3, #24
 80344fc:	d503      	bpl.n	8034506 <_fclose_r+0x66>
 80344fe:	6921      	ldr	r1, [r4, #16]
 8034500:	4628      	mov	r0, r5
 8034502:	f7fa ff33 	bl	802f36c <_free_r>
 8034506:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8034508:	b141      	cbz	r1, 803451c <_fclose_r+0x7c>
 803450a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803450e:	4299      	cmp	r1, r3
 8034510:	d002      	beq.n	8034518 <_fclose_r+0x78>
 8034512:	4628      	mov	r0, r5
 8034514:	f7fa ff2a 	bl	802f36c <_free_r>
 8034518:	2300      	movs	r3, #0
 803451a:	6323      	str	r3, [r4, #48]	@ 0x30
 803451c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 803451e:	b121      	cbz	r1, 803452a <_fclose_r+0x8a>
 8034520:	4628      	mov	r0, r5
 8034522:	f7fa ff23 	bl	802f36c <_free_r>
 8034526:	2300      	movs	r3, #0
 8034528:	6463      	str	r3, [r4, #68]	@ 0x44
 803452a:	f7f8 fb2f 	bl	802cb8c <__sfp_lock_acquire>
 803452e:	2300      	movs	r3, #0
 8034530:	81a3      	strh	r3, [r4, #12]
 8034532:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8034534:	07db      	lsls	r3, r3, #31
 8034536:	d402      	bmi.n	803453e <_fclose_r+0x9e>
 8034538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803453a:	f7fa f814 	bl	802e566 <__retarget_lock_release_recursive>
 803453e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8034540:	f7fa f80d 	bl	802e55e <__retarget_lock_close_recursive>
 8034544:	f7f8 fb28 	bl	802cb98 <__sfp_lock_release>
 8034548:	e7c6      	b.n	80344d8 <_fclose_r+0x38>

0803454a <__sccl>:
 803454a:	b570      	push	{r4, r5, r6, lr}
 803454c:	780b      	ldrb	r3, [r1, #0]
 803454e:	4604      	mov	r4, r0
 8034550:	2b5e      	cmp	r3, #94	@ 0x5e
 8034552:	bf0b      	itete	eq
 8034554:	784b      	ldrbeq	r3, [r1, #1]
 8034556:	1c4a      	addne	r2, r1, #1
 8034558:	1c8a      	addeq	r2, r1, #2
 803455a:	2100      	movne	r1, #0
 803455c:	bf08      	it	eq
 803455e:	2101      	moveq	r1, #1
 8034560:	3801      	subs	r0, #1
 8034562:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8034566:	f800 1f01 	strb.w	r1, [r0, #1]!
 803456a:	42a8      	cmp	r0, r5
 803456c:	d1fb      	bne.n	8034566 <__sccl+0x1c>
 803456e:	b90b      	cbnz	r3, 8034574 <__sccl+0x2a>
 8034570:	1e50      	subs	r0, r2, #1
 8034572:	bd70      	pop	{r4, r5, r6, pc}
 8034574:	f081 0101 	eor.w	r1, r1, #1
 8034578:	54e1      	strb	r1, [r4, r3]
 803457a:	4610      	mov	r0, r2
 803457c:	4602      	mov	r2, r0
 803457e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8034582:	2d2d      	cmp	r5, #45	@ 0x2d
 8034584:	d005      	beq.n	8034592 <__sccl+0x48>
 8034586:	2d5d      	cmp	r5, #93	@ 0x5d
 8034588:	d016      	beq.n	80345b8 <__sccl+0x6e>
 803458a:	2d00      	cmp	r5, #0
 803458c:	d0f1      	beq.n	8034572 <__sccl+0x28>
 803458e:	462b      	mov	r3, r5
 8034590:	e7f2      	b.n	8034578 <__sccl+0x2e>
 8034592:	7846      	ldrb	r6, [r0, #1]
 8034594:	2e5d      	cmp	r6, #93	@ 0x5d
 8034596:	d0fa      	beq.n	803458e <__sccl+0x44>
 8034598:	42b3      	cmp	r3, r6
 803459a:	dcf8      	bgt.n	803458e <__sccl+0x44>
 803459c:	3002      	adds	r0, #2
 803459e:	461a      	mov	r2, r3
 80345a0:	3201      	adds	r2, #1
 80345a2:	4296      	cmp	r6, r2
 80345a4:	54a1      	strb	r1, [r4, r2]
 80345a6:	dcfb      	bgt.n	80345a0 <__sccl+0x56>
 80345a8:	1af2      	subs	r2, r6, r3
 80345aa:	3a01      	subs	r2, #1
 80345ac:	1c5d      	adds	r5, r3, #1
 80345ae:	42b3      	cmp	r3, r6
 80345b0:	bfa8      	it	ge
 80345b2:	2200      	movge	r2, #0
 80345b4:	18ab      	adds	r3, r5, r2
 80345b6:	e7e1      	b.n	803457c <__sccl+0x32>
 80345b8:	4610      	mov	r0, r2
 80345ba:	e7da      	b.n	8034572 <__sccl+0x28>

080345bc <_realloc_r>:
 80345bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80345c0:	4682      	mov	sl, r0
 80345c2:	4693      	mov	fp, r2
 80345c4:	460c      	mov	r4, r1
 80345c6:	b929      	cbnz	r1, 80345d4 <_realloc_r+0x18>
 80345c8:	4611      	mov	r1, r2
 80345ca:	b003      	add	sp, #12
 80345cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80345d0:	f7fa bfe4 	b.w	802f59c <_malloc_r>
 80345d4:	f7ff faec 	bl	8033bb0 <__malloc_lock>
 80345d8:	f10b 080b 	add.w	r8, fp, #11
 80345dc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80345e0:	f1b8 0f16 	cmp.w	r8, #22
 80345e4:	f1a4 0908 	sub.w	r9, r4, #8
 80345e8:	f025 0603 	bic.w	r6, r5, #3
 80345ec:	d908      	bls.n	8034600 <_realloc_r+0x44>
 80345ee:	f038 0807 	bics.w	r8, r8, #7
 80345f2:	d507      	bpl.n	8034604 <_realloc_r+0x48>
 80345f4:	230c      	movs	r3, #12
 80345f6:	f8ca 3000 	str.w	r3, [sl]
 80345fa:	f04f 0b00 	mov.w	fp, #0
 80345fe:	e032      	b.n	8034666 <_realloc_r+0xaa>
 8034600:	f04f 0810 	mov.w	r8, #16
 8034604:	45c3      	cmp	fp, r8
 8034606:	d8f5      	bhi.n	80345f4 <_realloc_r+0x38>
 8034608:	4546      	cmp	r6, r8
 803460a:	f280 8174 	bge.w	80348f6 <_realloc_r+0x33a>
 803460e:	4b9e      	ldr	r3, [pc, #632]	@ (8034888 <_realloc_r+0x2cc>)
 8034610:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8034614:	eb09 0106 	add.w	r1, r9, r6
 8034618:	458c      	cmp	ip, r1
 803461a:	6848      	ldr	r0, [r1, #4]
 803461c:	d005      	beq.n	803462a <_realloc_r+0x6e>
 803461e:	f020 0201 	bic.w	r2, r0, #1
 8034622:	440a      	add	r2, r1
 8034624:	6852      	ldr	r2, [r2, #4]
 8034626:	07d7      	lsls	r7, r2, #31
 8034628:	d449      	bmi.n	80346be <_realloc_r+0x102>
 803462a:	f020 0003 	bic.w	r0, r0, #3
 803462e:	458c      	cmp	ip, r1
 8034630:	eb06 0700 	add.w	r7, r6, r0
 8034634:	d11b      	bne.n	803466e <_realloc_r+0xb2>
 8034636:	f108 0210 	add.w	r2, r8, #16
 803463a:	42ba      	cmp	r2, r7
 803463c:	dc41      	bgt.n	80346c2 <_realloc_r+0x106>
 803463e:	eb09 0208 	add.w	r2, r9, r8
 8034642:	eba7 0708 	sub.w	r7, r7, r8
 8034646:	f047 0701 	orr.w	r7, r7, #1
 803464a:	609a      	str	r2, [r3, #8]
 803464c:	6057      	str	r7, [r2, #4]
 803464e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8034652:	f003 0301 	and.w	r3, r3, #1
 8034656:	ea43 0308 	orr.w	r3, r3, r8
 803465a:	f844 3c04 	str.w	r3, [r4, #-4]
 803465e:	4650      	mov	r0, sl
 8034660:	f7ff faac 	bl	8033bbc <__malloc_unlock>
 8034664:	46a3      	mov	fp, r4
 8034666:	4658      	mov	r0, fp
 8034668:	b003      	add	sp, #12
 803466a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803466e:	45b8      	cmp	r8, r7
 8034670:	dc27      	bgt.n	80346c2 <_realloc_r+0x106>
 8034672:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8034676:	60d3      	str	r3, [r2, #12]
 8034678:	609a      	str	r2, [r3, #8]
 803467a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 803467e:	eba7 0008 	sub.w	r0, r7, r8
 8034682:	280f      	cmp	r0, #15
 8034684:	f003 0301 	and.w	r3, r3, #1
 8034688:	eb09 0207 	add.w	r2, r9, r7
 803468c:	f240 8135 	bls.w	80348fa <_realloc_r+0x33e>
 8034690:	eb09 0108 	add.w	r1, r9, r8
 8034694:	ea48 0303 	orr.w	r3, r8, r3
 8034698:	f040 0001 	orr.w	r0, r0, #1
 803469c:	f8c9 3004 	str.w	r3, [r9, #4]
 80346a0:	6048      	str	r0, [r1, #4]
 80346a2:	6853      	ldr	r3, [r2, #4]
 80346a4:	f043 0301 	orr.w	r3, r3, #1
 80346a8:	6053      	str	r3, [r2, #4]
 80346aa:	3108      	adds	r1, #8
 80346ac:	4650      	mov	r0, sl
 80346ae:	f7fa fe5d 	bl	802f36c <_free_r>
 80346b2:	4650      	mov	r0, sl
 80346b4:	f7ff fa82 	bl	8033bbc <__malloc_unlock>
 80346b8:	f109 0b08 	add.w	fp, r9, #8
 80346bc:	e7d3      	b.n	8034666 <_realloc_r+0xaa>
 80346be:	2000      	movs	r0, #0
 80346c0:	4601      	mov	r1, r0
 80346c2:	07ea      	lsls	r2, r5, #31
 80346c4:	f100 80c7 	bmi.w	8034856 <_realloc_r+0x29a>
 80346c8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80346cc:	eba9 0505 	sub.w	r5, r9, r5
 80346d0:	686a      	ldr	r2, [r5, #4]
 80346d2:	f022 0203 	bic.w	r2, r2, #3
 80346d6:	4432      	add	r2, r6
 80346d8:	9201      	str	r2, [sp, #4]
 80346da:	2900      	cmp	r1, #0
 80346dc:	f000 8086 	beq.w	80347ec <_realloc_r+0x230>
 80346e0:	458c      	cmp	ip, r1
 80346e2:	eb00 0702 	add.w	r7, r0, r2
 80346e6:	d149      	bne.n	803477c <_realloc_r+0x1c0>
 80346e8:	f108 0210 	add.w	r2, r8, #16
 80346ec:	42ba      	cmp	r2, r7
 80346ee:	dc7d      	bgt.n	80347ec <_realloc_r+0x230>
 80346f0:	46ab      	mov	fp, r5
 80346f2:	68ea      	ldr	r2, [r5, #12]
 80346f4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 80346f8:	60ca      	str	r2, [r1, #12]
 80346fa:	6091      	str	r1, [r2, #8]
 80346fc:	1f32      	subs	r2, r6, #4
 80346fe:	2a24      	cmp	r2, #36	@ 0x24
 8034700:	d836      	bhi.n	8034770 <_realloc_r+0x1b4>
 8034702:	2a13      	cmp	r2, #19
 8034704:	d932      	bls.n	803476c <_realloc_r+0x1b0>
 8034706:	6821      	ldr	r1, [r4, #0]
 8034708:	60a9      	str	r1, [r5, #8]
 803470a:	6861      	ldr	r1, [r4, #4]
 803470c:	60e9      	str	r1, [r5, #12]
 803470e:	2a1b      	cmp	r2, #27
 8034710:	d81a      	bhi.n	8034748 <_realloc_r+0x18c>
 8034712:	3408      	adds	r4, #8
 8034714:	f105 0210 	add.w	r2, r5, #16
 8034718:	6821      	ldr	r1, [r4, #0]
 803471a:	6011      	str	r1, [r2, #0]
 803471c:	6861      	ldr	r1, [r4, #4]
 803471e:	6051      	str	r1, [r2, #4]
 8034720:	68a1      	ldr	r1, [r4, #8]
 8034722:	6091      	str	r1, [r2, #8]
 8034724:	eb05 0208 	add.w	r2, r5, r8
 8034728:	eba7 0708 	sub.w	r7, r7, r8
 803472c:	f047 0701 	orr.w	r7, r7, #1
 8034730:	609a      	str	r2, [r3, #8]
 8034732:	6057      	str	r7, [r2, #4]
 8034734:	686b      	ldr	r3, [r5, #4]
 8034736:	f003 0301 	and.w	r3, r3, #1
 803473a:	ea43 0308 	orr.w	r3, r3, r8
 803473e:	606b      	str	r3, [r5, #4]
 8034740:	4650      	mov	r0, sl
 8034742:	f7ff fa3b 	bl	8033bbc <__malloc_unlock>
 8034746:	e78e      	b.n	8034666 <_realloc_r+0xaa>
 8034748:	68a1      	ldr	r1, [r4, #8]
 803474a:	6129      	str	r1, [r5, #16]
 803474c:	68e1      	ldr	r1, [r4, #12]
 803474e:	6169      	str	r1, [r5, #20]
 8034750:	2a24      	cmp	r2, #36	@ 0x24
 8034752:	bf01      	itttt	eq
 8034754:	6922      	ldreq	r2, [r4, #16]
 8034756:	61aa      	streq	r2, [r5, #24]
 8034758:	6961      	ldreq	r1, [r4, #20]
 803475a:	61e9      	streq	r1, [r5, #28]
 803475c:	bf19      	ittee	ne
 803475e:	3410      	addne	r4, #16
 8034760:	f105 0218 	addne.w	r2, r5, #24
 8034764:	f105 0220 	addeq.w	r2, r5, #32
 8034768:	3418      	addeq	r4, #24
 803476a:	e7d5      	b.n	8034718 <_realloc_r+0x15c>
 803476c:	465a      	mov	r2, fp
 803476e:	e7d3      	b.n	8034718 <_realloc_r+0x15c>
 8034770:	4621      	mov	r1, r4
 8034772:	4658      	mov	r0, fp
 8034774:	f7f8 fca2 	bl	802d0bc <memmove>
 8034778:	4b43      	ldr	r3, [pc, #268]	@ (8034888 <_realloc_r+0x2cc>)
 803477a:	e7d3      	b.n	8034724 <_realloc_r+0x168>
 803477c:	45b8      	cmp	r8, r7
 803477e:	dc35      	bgt.n	80347ec <_realloc_r+0x230>
 8034780:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8034784:	4628      	mov	r0, r5
 8034786:	60d3      	str	r3, [r2, #12]
 8034788:	609a      	str	r2, [r3, #8]
 803478a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803478e:	68eb      	ldr	r3, [r5, #12]
 8034790:	60d3      	str	r3, [r2, #12]
 8034792:	609a      	str	r2, [r3, #8]
 8034794:	1f32      	subs	r2, r6, #4
 8034796:	2a24      	cmp	r2, #36	@ 0x24
 8034798:	d824      	bhi.n	80347e4 <_realloc_r+0x228>
 803479a:	2a13      	cmp	r2, #19
 803479c:	d908      	bls.n	80347b0 <_realloc_r+0x1f4>
 803479e:	6823      	ldr	r3, [r4, #0]
 80347a0:	60ab      	str	r3, [r5, #8]
 80347a2:	6863      	ldr	r3, [r4, #4]
 80347a4:	60eb      	str	r3, [r5, #12]
 80347a6:	2a1b      	cmp	r2, #27
 80347a8:	d80a      	bhi.n	80347c0 <_realloc_r+0x204>
 80347aa:	3408      	adds	r4, #8
 80347ac:	f105 0010 	add.w	r0, r5, #16
 80347b0:	6823      	ldr	r3, [r4, #0]
 80347b2:	6003      	str	r3, [r0, #0]
 80347b4:	6863      	ldr	r3, [r4, #4]
 80347b6:	6043      	str	r3, [r0, #4]
 80347b8:	68a3      	ldr	r3, [r4, #8]
 80347ba:	6083      	str	r3, [r0, #8]
 80347bc:	46a9      	mov	r9, r5
 80347be:	e75c      	b.n	803467a <_realloc_r+0xbe>
 80347c0:	68a3      	ldr	r3, [r4, #8]
 80347c2:	612b      	str	r3, [r5, #16]
 80347c4:	68e3      	ldr	r3, [r4, #12]
 80347c6:	616b      	str	r3, [r5, #20]
 80347c8:	2a24      	cmp	r2, #36	@ 0x24
 80347ca:	bf01      	itttt	eq
 80347cc:	6923      	ldreq	r3, [r4, #16]
 80347ce:	61ab      	streq	r3, [r5, #24]
 80347d0:	6963      	ldreq	r3, [r4, #20]
 80347d2:	61eb      	streq	r3, [r5, #28]
 80347d4:	bf19      	ittee	ne
 80347d6:	3410      	addne	r4, #16
 80347d8:	f105 0018 	addne.w	r0, r5, #24
 80347dc:	f105 0020 	addeq.w	r0, r5, #32
 80347e0:	3418      	addeq	r4, #24
 80347e2:	e7e5      	b.n	80347b0 <_realloc_r+0x1f4>
 80347e4:	4621      	mov	r1, r4
 80347e6:	f7f8 fc69 	bl	802d0bc <memmove>
 80347ea:	e7e7      	b.n	80347bc <_realloc_r+0x200>
 80347ec:	9b01      	ldr	r3, [sp, #4]
 80347ee:	4598      	cmp	r8, r3
 80347f0:	dc31      	bgt.n	8034856 <_realloc_r+0x29a>
 80347f2:	4628      	mov	r0, r5
 80347f4:	68eb      	ldr	r3, [r5, #12]
 80347f6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80347fa:	60d3      	str	r3, [r2, #12]
 80347fc:	609a      	str	r2, [r3, #8]
 80347fe:	1f32      	subs	r2, r6, #4
 8034800:	2a24      	cmp	r2, #36	@ 0x24
 8034802:	d824      	bhi.n	803484e <_realloc_r+0x292>
 8034804:	2a13      	cmp	r2, #19
 8034806:	d908      	bls.n	803481a <_realloc_r+0x25e>
 8034808:	6823      	ldr	r3, [r4, #0]
 803480a:	60ab      	str	r3, [r5, #8]
 803480c:	6863      	ldr	r3, [r4, #4]
 803480e:	60eb      	str	r3, [r5, #12]
 8034810:	2a1b      	cmp	r2, #27
 8034812:	d80a      	bhi.n	803482a <_realloc_r+0x26e>
 8034814:	3408      	adds	r4, #8
 8034816:	f105 0010 	add.w	r0, r5, #16
 803481a:	6823      	ldr	r3, [r4, #0]
 803481c:	6003      	str	r3, [r0, #0]
 803481e:	6863      	ldr	r3, [r4, #4]
 8034820:	6043      	str	r3, [r0, #4]
 8034822:	68a3      	ldr	r3, [r4, #8]
 8034824:	6083      	str	r3, [r0, #8]
 8034826:	9f01      	ldr	r7, [sp, #4]
 8034828:	e7c8      	b.n	80347bc <_realloc_r+0x200>
 803482a:	68a3      	ldr	r3, [r4, #8]
 803482c:	612b      	str	r3, [r5, #16]
 803482e:	68e3      	ldr	r3, [r4, #12]
 8034830:	616b      	str	r3, [r5, #20]
 8034832:	2a24      	cmp	r2, #36	@ 0x24
 8034834:	bf01      	itttt	eq
 8034836:	6923      	ldreq	r3, [r4, #16]
 8034838:	61ab      	streq	r3, [r5, #24]
 803483a:	6963      	ldreq	r3, [r4, #20]
 803483c:	61eb      	streq	r3, [r5, #28]
 803483e:	bf19      	ittee	ne
 8034840:	3410      	addne	r4, #16
 8034842:	f105 0018 	addne.w	r0, r5, #24
 8034846:	f105 0020 	addeq.w	r0, r5, #32
 803484a:	3418      	addeq	r4, #24
 803484c:	e7e5      	b.n	803481a <_realloc_r+0x25e>
 803484e:	4621      	mov	r1, r4
 8034850:	f7f8 fc34 	bl	802d0bc <memmove>
 8034854:	e7e7      	b.n	8034826 <_realloc_r+0x26a>
 8034856:	4659      	mov	r1, fp
 8034858:	4650      	mov	r0, sl
 803485a:	f7fa fe9f 	bl	802f59c <_malloc_r>
 803485e:	4683      	mov	fp, r0
 8034860:	b918      	cbnz	r0, 803486a <_realloc_r+0x2ae>
 8034862:	4650      	mov	r0, sl
 8034864:	f7ff f9aa 	bl	8033bbc <__malloc_unlock>
 8034868:	e6c7      	b.n	80345fa <_realloc_r+0x3e>
 803486a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803486e:	f023 0301 	bic.w	r3, r3, #1
 8034872:	444b      	add	r3, r9
 8034874:	f1a0 0208 	sub.w	r2, r0, #8
 8034878:	4293      	cmp	r3, r2
 803487a:	d107      	bne.n	803488c <_realloc_r+0x2d0>
 803487c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8034880:	f027 0703 	bic.w	r7, r7, #3
 8034884:	4437      	add	r7, r6
 8034886:	e6f8      	b.n	803467a <_realloc_r+0xbe>
 8034888:	2000040c 	.word	0x2000040c
 803488c:	1f32      	subs	r2, r6, #4
 803488e:	2a24      	cmp	r2, #36	@ 0x24
 8034890:	d82d      	bhi.n	80348ee <_realloc_r+0x332>
 8034892:	2a13      	cmp	r2, #19
 8034894:	d928      	bls.n	80348e8 <_realloc_r+0x32c>
 8034896:	6823      	ldr	r3, [r4, #0]
 8034898:	6003      	str	r3, [r0, #0]
 803489a:	6863      	ldr	r3, [r4, #4]
 803489c:	6043      	str	r3, [r0, #4]
 803489e:	2a1b      	cmp	r2, #27
 80348a0:	d80e      	bhi.n	80348c0 <_realloc_r+0x304>
 80348a2:	f104 0208 	add.w	r2, r4, #8
 80348a6:	f100 0308 	add.w	r3, r0, #8
 80348aa:	6811      	ldr	r1, [r2, #0]
 80348ac:	6019      	str	r1, [r3, #0]
 80348ae:	6851      	ldr	r1, [r2, #4]
 80348b0:	6059      	str	r1, [r3, #4]
 80348b2:	6892      	ldr	r2, [r2, #8]
 80348b4:	609a      	str	r2, [r3, #8]
 80348b6:	4621      	mov	r1, r4
 80348b8:	4650      	mov	r0, sl
 80348ba:	f7fa fd57 	bl	802f36c <_free_r>
 80348be:	e73f      	b.n	8034740 <_realloc_r+0x184>
 80348c0:	68a3      	ldr	r3, [r4, #8]
 80348c2:	6083      	str	r3, [r0, #8]
 80348c4:	68e3      	ldr	r3, [r4, #12]
 80348c6:	60c3      	str	r3, [r0, #12]
 80348c8:	2a24      	cmp	r2, #36	@ 0x24
 80348ca:	bf01      	itttt	eq
 80348cc:	6923      	ldreq	r3, [r4, #16]
 80348ce:	6103      	streq	r3, [r0, #16]
 80348d0:	6961      	ldreq	r1, [r4, #20]
 80348d2:	6141      	streq	r1, [r0, #20]
 80348d4:	bf19      	ittee	ne
 80348d6:	f104 0210 	addne.w	r2, r4, #16
 80348da:	f100 0310 	addne.w	r3, r0, #16
 80348de:	f104 0218 	addeq.w	r2, r4, #24
 80348e2:	f100 0318 	addeq.w	r3, r0, #24
 80348e6:	e7e0      	b.n	80348aa <_realloc_r+0x2ee>
 80348e8:	4603      	mov	r3, r0
 80348ea:	4622      	mov	r2, r4
 80348ec:	e7dd      	b.n	80348aa <_realloc_r+0x2ee>
 80348ee:	4621      	mov	r1, r4
 80348f0:	f7f8 fbe4 	bl	802d0bc <memmove>
 80348f4:	e7df      	b.n	80348b6 <_realloc_r+0x2fa>
 80348f6:	4637      	mov	r7, r6
 80348f8:	e6bf      	b.n	803467a <_realloc_r+0xbe>
 80348fa:	431f      	orrs	r7, r3
 80348fc:	f8c9 7004 	str.w	r7, [r9, #4]
 8034900:	6853      	ldr	r3, [r2, #4]
 8034902:	f043 0301 	orr.w	r3, r3, #1
 8034906:	6053      	str	r3, [r2, #4]
 8034908:	e6d3      	b.n	80346b2 <_realloc_r+0xf6>
 803490a:	bf00      	nop

0803490c <sulp>:
 803490c:	b570      	push	{r4, r5, r6, lr}
 803490e:	4604      	mov	r4, r0
 8034910:	460d      	mov	r5, r1
 8034912:	ec45 4b10 	vmov	d0, r4, r5
 8034916:	4616      	mov	r6, r2
 8034918:	f7ff fc7c 	bl	8034214 <__ulp>
 803491c:	ec51 0b10 	vmov	r0, r1, d0
 8034920:	b17e      	cbz	r6, 8034942 <sulp+0x36>
 8034922:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8034926:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803492a:	2b00      	cmp	r3, #0
 803492c:	dd09      	ble.n	8034942 <sulp+0x36>
 803492e:	051b      	lsls	r3, r3, #20
 8034930:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8034934:	2400      	movs	r4, #0
 8034936:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 803493a:	4622      	mov	r2, r4
 803493c:	462b      	mov	r3, r5
 803493e:	f7db fe73 	bl	8010628 <__aeabi_dmul>
 8034942:	ec41 0b10 	vmov	d0, r0, r1
 8034946:	bd70      	pop	{r4, r5, r6, pc}

08034948 <_strtod_l>:
 8034948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803494c:	b09f      	sub	sp, #124	@ 0x7c
 803494e:	460c      	mov	r4, r1
 8034950:	9217      	str	r2, [sp, #92]	@ 0x5c
 8034952:	2200      	movs	r2, #0
 8034954:	921a      	str	r2, [sp, #104]	@ 0x68
 8034956:	9005      	str	r0, [sp, #20]
 8034958:	f04f 0a00 	mov.w	sl, #0
 803495c:	f04f 0b00 	mov.w	fp, #0
 8034960:	460a      	mov	r2, r1
 8034962:	9219      	str	r2, [sp, #100]	@ 0x64
 8034964:	7811      	ldrb	r1, [r2, #0]
 8034966:	292b      	cmp	r1, #43	@ 0x2b
 8034968:	d04a      	beq.n	8034a00 <_strtod_l+0xb8>
 803496a:	d838      	bhi.n	80349de <_strtod_l+0x96>
 803496c:	290d      	cmp	r1, #13
 803496e:	d832      	bhi.n	80349d6 <_strtod_l+0x8e>
 8034970:	2908      	cmp	r1, #8
 8034972:	d832      	bhi.n	80349da <_strtod_l+0x92>
 8034974:	2900      	cmp	r1, #0
 8034976:	d03b      	beq.n	80349f0 <_strtod_l+0xa8>
 8034978:	2200      	movs	r2, #0
 803497a:	920b      	str	r2, [sp, #44]	@ 0x2c
 803497c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 803497e:	782a      	ldrb	r2, [r5, #0]
 8034980:	2a30      	cmp	r2, #48	@ 0x30
 8034982:	f040 80b3 	bne.w	8034aec <_strtod_l+0x1a4>
 8034986:	786a      	ldrb	r2, [r5, #1]
 8034988:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803498c:	2a58      	cmp	r2, #88	@ 0x58
 803498e:	d16e      	bne.n	8034a6e <_strtod_l+0x126>
 8034990:	9302      	str	r3, [sp, #8]
 8034992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034994:	9301      	str	r3, [sp, #4]
 8034996:	ab1a      	add	r3, sp, #104	@ 0x68
 8034998:	9300      	str	r3, [sp, #0]
 803499a:	4a8e      	ldr	r2, [pc, #568]	@ (8034bd4 <_strtod_l+0x28c>)
 803499c:	9805      	ldr	r0, [sp, #20]
 803499e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80349a0:	a919      	add	r1, sp, #100	@ 0x64
 80349a2:	f001 fa51 	bl	8035e48 <__gethex>
 80349a6:	f010 060f 	ands.w	r6, r0, #15
 80349aa:	4604      	mov	r4, r0
 80349ac:	d005      	beq.n	80349ba <_strtod_l+0x72>
 80349ae:	2e06      	cmp	r6, #6
 80349b0:	d128      	bne.n	8034a04 <_strtod_l+0xbc>
 80349b2:	3501      	adds	r5, #1
 80349b4:	2300      	movs	r3, #0
 80349b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80349b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80349ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80349bc:	2b00      	cmp	r3, #0
 80349be:	f040 858e 	bne.w	80354de <_strtod_l+0xb96>
 80349c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80349c4:	b1cb      	cbz	r3, 80349fa <_strtod_l+0xb2>
 80349c6:	4652      	mov	r2, sl
 80349c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80349cc:	ec43 2b10 	vmov	d0, r2, r3
 80349d0:	b01f      	add	sp, #124	@ 0x7c
 80349d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80349d6:	2920      	cmp	r1, #32
 80349d8:	d1ce      	bne.n	8034978 <_strtod_l+0x30>
 80349da:	3201      	adds	r2, #1
 80349dc:	e7c1      	b.n	8034962 <_strtod_l+0x1a>
 80349de:	292d      	cmp	r1, #45	@ 0x2d
 80349e0:	d1ca      	bne.n	8034978 <_strtod_l+0x30>
 80349e2:	2101      	movs	r1, #1
 80349e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80349e6:	1c51      	adds	r1, r2, #1
 80349e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80349ea:	7852      	ldrb	r2, [r2, #1]
 80349ec:	2a00      	cmp	r2, #0
 80349ee:	d1c5      	bne.n	803497c <_strtod_l+0x34>
 80349f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80349f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80349f4:	2b00      	cmp	r3, #0
 80349f6:	f040 8570 	bne.w	80354da <_strtod_l+0xb92>
 80349fa:	4652      	mov	r2, sl
 80349fc:	465b      	mov	r3, fp
 80349fe:	e7e5      	b.n	80349cc <_strtod_l+0x84>
 8034a00:	2100      	movs	r1, #0
 8034a02:	e7ef      	b.n	80349e4 <_strtod_l+0x9c>
 8034a04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8034a06:	b13a      	cbz	r2, 8034a18 <_strtod_l+0xd0>
 8034a08:	2135      	movs	r1, #53	@ 0x35
 8034a0a:	a81c      	add	r0, sp, #112	@ 0x70
 8034a0c:	f7ff fcfc 	bl	8034408 <__copybits>
 8034a10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034a12:	9805      	ldr	r0, [sp, #20]
 8034a14:	f7ff f8fd 	bl	8033c12 <_Bfree>
 8034a18:	3e01      	subs	r6, #1
 8034a1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8034a1c:	2e04      	cmp	r6, #4
 8034a1e:	d806      	bhi.n	8034a2e <_strtod_l+0xe6>
 8034a20:	e8df f006 	tbb	[pc, r6]
 8034a24:	201d0314 	.word	0x201d0314
 8034a28:	14          	.byte	0x14
 8034a29:	00          	.byte	0x00
 8034a2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8034a2e:	05e1      	lsls	r1, r4, #23
 8034a30:	bf48      	it	mi
 8034a32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8034a36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034a3a:	0d1b      	lsrs	r3, r3, #20
 8034a3c:	051b      	lsls	r3, r3, #20
 8034a3e:	2b00      	cmp	r3, #0
 8034a40:	d1bb      	bne.n	80349ba <_strtod_l+0x72>
 8034a42:	f7f9 fd59 	bl	802e4f8 <__errno>
 8034a46:	2322      	movs	r3, #34	@ 0x22
 8034a48:	6003      	str	r3, [r0, #0]
 8034a4a:	e7b6      	b.n	80349ba <_strtod_l+0x72>
 8034a4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8034a50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8034a54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8034a58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8034a5c:	e7e7      	b.n	8034a2e <_strtod_l+0xe6>
 8034a5e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8034bdc <_strtod_l+0x294>
 8034a62:	e7e4      	b.n	8034a2e <_strtod_l+0xe6>
 8034a64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8034a68:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8034a6c:	e7df      	b.n	8034a2e <_strtod_l+0xe6>
 8034a6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034a70:	1c5a      	adds	r2, r3, #1
 8034a72:	9219      	str	r2, [sp, #100]	@ 0x64
 8034a74:	785b      	ldrb	r3, [r3, #1]
 8034a76:	2b30      	cmp	r3, #48	@ 0x30
 8034a78:	d0f9      	beq.n	8034a6e <_strtod_l+0x126>
 8034a7a:	2b00      	cmp	r3, #0
 8034a7c:	d09d      	beq.n	80349ba <_strtod_l+0x72>
 8034a7e:	2301      	movs	r3, #1
 8034a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8034a82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034a84:	930c      	str	r3, [sp, #48]	@ 0x30
 8034a86:	2300      	movs	r3, #0
 8034a88:	9308      	str	r3, [sp, #32]
 8034a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8034a8c:	461f      	mov	r7, r3
 8034a8e:	220a      	movs	r2, #10
 8034a90:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8034a92:	7805      	ldrb	r5, [r0, #0]
 8034a94:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8034a98:	b2d9      	uxtb	r1, r3
 8034a9a:	2909      	cmp	r1, #9
 8034a9c:	d928      	bls.n	8034af0 <_strtod_l+0x1a8>
 8034a9e:	494e      	ldr	r1, [pc, #312]	@ (8034bd8 <_strtod_l+0x290>)
 8034aa0:	2201      	movs	r2, #1
 8034aa2:	f7f8 fb5a 	bl	802d15a <strncmp>
 8034aa6:	2800      	cmp	r0, #0
 8034aa8:	d032      	beq.n	8034b10 <_strtod_l+0x1c8>
 8034aaa:	2000      	movs	r0, #0
 8034aac:	462a      	mov	r2, r5
 8034aae:	4681      	mov	r9, r0
 8034ab0:	463d      	mov	r5, r7
 8034ab2:	4603      	mov	r3, r0
 8034ab4:	2a65      	cmp	r2, #101	@ 0x65
 8034ab6:	d001      	beq.n	8034abc <_strtod_l+0x174>
 8034ab8:	2a45      	cmp	r2, #69	@ 0x45
 8034aba:	d114      	bne.n	8034ae6 <_strtod_l+0x19e>
 8034abc:	b91d      	cbnz	r5, 8034ac6 <_strtod_l+0x17e>
 8034abe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034ac0:	4302      	orrs	r2, r0
 8034ac2:	d095      	beq.n	80349f0 <_strtod_l+0xa8>
 8034ac4:	2500      	movs	r5, #0
 8034ac6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8034ac8:	1c62      	adds	r2, r4, #1
 8034aca:	9219      	str	r2, [sp, #100]	@ 0x64
 8034acc:	7862      	ldrb	r2, [r4, #1]
 8034ace:	2a2b      	cmp	r2, #43	@ 0x2b
 8034ad0:	d077      	beq.n	8034bc2 <_strtod_l+0x27a>
 8034ad2:	2a2d      	cmp	r2, #45	@ 0x2d
 8034ad4:	d07b      	beq.n	8034bce <_strtod_l+0x286>
 8034ad6:	f04f 0c00 	mov.w	ip, #0
 8034ada:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8034ade:	2909      	cmp	r1, #9
 8034ae0:	f240 8082 	bls.w	8034be8 <_strtod_l+0x2a0>
 8034ae4:	9419      	str	r4, [sp, #100]	@ 0x64
 8034ae6:	f04f 0800 	mov.w	r8, #0
 8034aea:	e0a2      	b.n	8034c32 <_strtod_l+0x2ea>
 8034aec:	2300      	movs	r3, #0
 8034aee:	e7c7      	b.n	8034a80 <_strtod_l+0x138>
 8034af0:	2f08      	cmp	r7, #8
 8034af2:	bfd5      	itete	le
 8034af4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8034af6:	9908      	ldrgt	r1, [sp, #32]
 8034af8:	fb02 3301 	mlale	r3, r2, r1, r3
 8034afc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8034b00:	f100 0001 	add.w	r0, r0, #1
 8034b04:	bfd4      	ite	le
 8034b06:	930a      	strle	r3, [sp, #40]	@ 0x28
 8034b08:	9308      	strgt	r3, [sp, #32]
 8034b0a:	3701      	adds	r7, #1
 8034b0c:	9019      	str	r0, [sp, #100]	@ 0x64
 8034b0e:	e7bf      	b.n	8034a90 <_strtod_l+0x148>
 8034b10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034b12:	1c5a      	adds	r2, r3, #1
 8034b14:	9219      	str	r2, [sp, #100]	@ 0x64
 8034b16:	785a      	ldrb	r2, [r3, #1]
 8034b18:	b37f      	cbz	r7, 8034b7a <_strtod_l+0x232>
 8034b1a:	4681      	mov	r9, r0
 8034b1c:	463d      	mov	r5, r7
 8034b1e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8034b22:	2b09      	cmp	r3, #9
 8034b24:	d912      	bls.n	8034b4c <_strtod_l+0x204>
 8034b26:	2301      	movs	r3, #1
 8034b28:	e7c4      	b.n	8034ab4 <_strtod_l+0x16c>
 8034b2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034b2c:	1c5a      	adds	r2, r3, #1
 8034b2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8034b30:	785a      	ldrb	r2, [r3, #1]
 8034b32:	3001      	adds	r0, #1
 8034b34:	2a30      	cmp	r2, #48	@ 0x30
 8034b36:	d0f8      	beq.n	8034b2a <_strtod_l+0x1e2>
 8034b38:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8034b3c:	2b08      	cmp	r3, #8
 8034b3e:	f200 84d3 	bhi.w	80354e8 <_strtod_l+0xba0>
 8034b42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034b44:	930c      	str	r3, [sp, #48]	@ 0x30
 8034b46:	4681      	mov	r9, r0
 8034b48:	2000      	movs	r0, #0
 8034b4a:	4605      	mov	r5, r0
 8034b4c:	3a30      	subs	r2, #48	@ 0x30
 8034b4e:	f100 0301 	add.w	r3, r0, #1
 8034b52:	d02a      	beq.n	8034baa <_strtod_l+0x262>
 8034b54:	4499      	add	r9, r3
 8034b56:	eb00 0c05 	add.w	ip, r0, r5
 8034b5a:	462b      	mov	r3, r5
 8034b5c:	210a      	movs	r1, #10
 8034b5e:	4563      	cmp	r3, ip
 8034b60:	d10d      	bne.n	8034b7e <_strtod_l+0x236>
 8034b62:	1c69      	adds	r1, r5, #1
 8034b64:	4401      	add	r1, r0
 8034b66:	4428      	add	r0, r5
 8034b68:	2808      	cmp	r0, #8
 8034b6a:	dc16      	bgt.n	8034b9a <_strtod_l+0x252>
 8034b6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8034b6e:	230a      	movs	r3, #10
 8034b70:	fb03 2300 	mla	r3, r3, r0, r2
 8034b74:	930a      	str	r3, [sp, #40]	@ 0x28
 8034b76:	2300      	movs	r3, #0
 8034b78:	e018      	b.n	8034bac <_strtod_l+0x264>
 8034b7a:	4638      	mov	r0, r7
 8034b7c:	e7da      	b.n	8034b34 <_strtod_l+0x1ec>
 8034b7e:	2b08      	cmp	r3, #8
 8034b80:	f103 0301 	add.w	r3, r3, #1
 8034b84:	dc03      	bgt.n	8034b8e <_strtod_l+0x246>
 8034b86:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8034b88:	434e      	muls	r6, r1
 8034b8a:	960a      	str	r6, [sp, #40]	@ 0x28
 8034b8c:	e7e7      	b.n	8034b5e <_strtod_l+0x216>
 8034b8e:	2b10      	cmp	r3, #16
 8034b90:	bfde      	ittt	le
 8034b92:	9e08      	ldrle	r6, [sp, #32]
 8034b94:	434e      	mulle	r6, r1
 8034b96:	9608      	strle	r6, [sp, #32]
 8034b98:	e7e1      	b.n	8034b5e <_strtod_l+0x216>
 8034b9a:	280f      	cmp	r0, #15
 8034b9c:	dceb      	bgt.n	8034b76 <_strtod_l+0x22e>
 8034b9e:	9808      	ldr	r0, [sp, #32]
 8034ba0:	230a      	movs	r3, #10
 8034ba2:	fb03 2300 	mla	r3, r3, r0, r2
 8034ba6:	9308      	str	r3, [sp, #32]
 8034ba8:	e7e5      	b.n	8034b76 <_strtod_l+0x22e>
 8034baa:	4629      	mov	r1, r5
 8034bac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8034bae:	1c50      	adds	r0, r2, #1
 8034bb0:	9019      	str	r0, [sp, #100]	@ 0x64
 8034bb2:	7852      	ldrb	r2, [r2, #1]
 8034bb4:	4618      	mov	r0, r3
 8034bb6:	460d      	mov	r5, r1
 8034bb8:	e7b1      	b.n	8034b1e <_strtod_l+0x1d6>
 8034bba:	f04f 0900 	mov.w	r9, #0
 8034bbe:	2301      	movs	r3, #1
 8034bc0:	e77d      	b.n	8034abe <_strtod_l+0x176>
 8034bc2:	f04f 0c00 	mov.w	ip, #0
 8034bc6:	1ca2      	adds	r2, r4, #2
 8034bc8:	9219      	str	r2, [sp, #100]	@ 0x64
 8034bca:	78a2      	ldrb	r2, [r4, #2]
 8034bcc:	e785      	b.n	8034ada <_strtod_l+0x192>
 8034bce:	f04f 0c01 	mov.w	ip, #1
 8034bd2:	e7f8      	b.n	8034bc6 <_strtod_l+0x27e>
 8034bd4:	0803cc4c 	.word	0x0803cc4c
 8034bd8:	0803c6b2 	.word	0x0803c6b2
 8034bdc:	7ff00000 	.word	0x7ff00000
 8034be0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8034be2:	1c51      	adds	r1, r2, #1
 8034be4:	9119      	str	r1, [sp, #100]	@ 0x64
 8034be6:	7852      	ldrb	r2, [r2, #1]
 8034be8:	2a30      	cmp	r2, #48	@ 0x30
 8034bea:	d0f9      	beq.n	8034be0 <_strtod_l+0x298>
 8034bec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8034bf0:	2908      	cmp	r1, #8
 8034bf2:	f63f af78 	bhi.w	8034ae6 <_strtod_l+0x19e>
 8034bf6:	3a30      	subs	r2, #48	@ 0x30
 8034bf8:	920e      	str	r2, [sp, #56]	@ 0x38
 8034bfa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8034bfc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8034bfe:	f04f 080a 	mov.w	r8, #10
 8034c02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8034c04:	1c56      	adds	r6, r2, #1
 8034c06:	9619      	str	r6, [sp, #100]	@ 0x64
 8034c08:	7852      	ldrb	r2, [r2, #1]
 8034c0a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8034c0e:	f1be 0f09 	cmp.w	lr, #9
 8034c12:	d939      	bls.n	8034c88 <_strtod_l+0x340>
 8034c14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8034c16:	1a76      	subs	r6, r6, r1
 8034c18:	2e08      	cmp	r6, #8
 8034c1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8034c1e:	dc03      	bgt.n	8034c28 <_strtod_l+0x2e0>
 8034c20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8034c22:	4588      	cmp	r8, r1
 8034c24:	bfa8      	it	ge
 8034c26:	4688      	movge	r8, r1
 8034c28:	f1bc 0f00 	cmp.w	ip, #0
 8034c2c:	d001      	beq.n	8034c32 <_strtod_l+0x2ea>
 8034c2e:	f1c8 0800 	rsb	r8, r8, #0
 8034c32:	2d00      	cmp	r5, #0
 8034c34:	d14e      	bne.n	8034cd4 <_strtod_l+0x38c>
 8034c36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8034c38:	4308      	orrs	r0, r1
 8034c3a:	f47f aebe 	bne.w	80349ba <_strtod_l+0x72>
 8034c3e:	2b00      	cmp	r3, #0
 8034c40:	f47f aed6 	bne.w	80349f0 <_strtod_l+0xa8>
 8034c44:	2a69      	cmp	r2, #105	@ 0x69
 8034c46:	d028      	beq.n	8034c9a <_strtod_l+0x352>
 8034c48:	dc25      	bgt.n	8034c96 <_strtod_l+0x34e>
 8034c4a:	2a49      	cmp	r2, #73	@ 0x49
 8034c4c:	d025      	beq.n	8034c9a <_strtod_l+0x352>
 8034c4e:	2a4e      	cmp	r2, #78	@ 0x4e
 8034c50:	f47f aece 	bne.w	80349f0 <_strtod_l+0xa8>
 8034c54:	499b      	ldr	r1, [pc, #620]	@ (8034ec4 <_strtod_l+0x57c>)
 8034c56:	a819      	add	r0, sp, #100	@ 0x64
 8034c58:	f001 fb18 	bl	803628c <__match>
 8034c5c:	2800      	cmp	r0, #0
 8034c5e:	f43f aec7 	beq.w	80349f0 <_strtod_l+0xa8>
 8034c62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034c64:	781b      	ldrb	r3, [r3, #0]
 8034c66:	2b28      	cmp	r3, #40	@ 0x28
 8034c68:	d12e      	bne.n	8034cc8 <_strtod_l+0x380>
 8034c6a:	4997      	ldr	r1, [pc, #604]	@ (8034ec8 <_strtod_l+0x580>)
 8034c6c:	aa1c      	add	r2, sp, #112	@ 0x70
 8034c6e:	a819      	add	r0, sp, #100	@ 0x64
 8034c70:	f001 fb20 	bl	80362b4 <__hexnan>
 8034c74:	2805      	cmp	r0, #5
 8034c76:	d127      	bne.n	8034cc8 <_strtod_l+0x380>
 8034c78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8034c7a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8034c7e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8034c82:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8034c86:	e698      	b.n	80349ba <_strtod_l+0x72>
 8034c88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8034c8a:	fb08 2101 	mla	r1, r8, r1, r2
 8034c8e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8034c92:	920e      	str	r2, [sp, #56]	@ 0x38
 8034c94:	e7b5      	b.n	8034c02 <_strtod_l+0x2ba>
 8034c96:	2a6e      	cmp	r2, #110	@ 0x6e
 8034c98:	e7da      	b.n	8034c50 <_strtod_l+0x308>
 8034c9a:	498c      	ldr	r1, [pc, #560]	@ (8034ecc <_strtod_l+0x584>)
 8034c9c:	a819      	add	r0, sp, #100	@ 0x64
 8034c9e:	f001 faf5 	bl	803628c <__match>
 8034ca2:	2800      	cmp	r0, #0
 8034ca4:	f43f aea4 	beq.w	80349f0 <_strtod_l+0xa8>
 8034ca8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034caa:	4989      	ldr	r1, [pc, #548]	@ (8034ed0 <_strtod_l+0x588>)
 8034cac:	3b01      	subs	r3, #1
 8034cae:	a819      	add	r0, sp, #100	@ 0x64
 8034cb0:	9319      	str	r3, [sp, #100]	@ 0x64
 8034cb2:	f001 faeb 	bl	803628c <__match>
 8034cb6:	b910      	cbnz	r0, 8034cbe <_strtod_l+0x376>
 8034cb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034cba:	3301      	adds	r3, #1
 8034cbc:	9319      	str	r3, [sp, #100]	@ 0x64
 8034cbe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8034ee0 <_strtod_l+0x598>
 8034cc2:	f04f 0a00 	mov.w	sl, #0
 8034cc6:	e678      	b.n	80349ba <_strtod_l+0x72>
 8034cc8:	4882      	ldr	r0, [pc, #520]	@ (8034ed4 <_strtod_l+0x58c>)
 8034cca:	f001 f805 	bl	8035cd8 <nan>
 8034cce:	ec5b ab10 	vmov	sl, fp, d0
 8034cd2:	e672      	b.n	80349ba <_strtod_l+0x72>
 8034cd4:	eba8 0309 	sub.w	r3, r8, r9
 8034cd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8034cda:	9309      	str	r3, [sp, #36]	@ 0x24
 8034cdc:	2f00      	cmp	r7, #0
 8034cde:	bf08      	it	eq
 8034ce0:	462f      	moveq	r7, r5
 8034ce2:	2d10      	cmp	r5, #16
 8034ce4:	462c      	mov	r4, r5
 8034ce6:	bfa8      	it	ge
 8034ce8:	2410      	movge	r4, #16
 8034cea:	f7db fc23 	bl	8010534 <__aeabi_ui2d>
 8034cee:	2d09      	cmp	r5, #9
 8034cf0:	4682      	mov	sl, r0
 8034cf2:	468b      	mov	fp, r1
 8034cf4:	dc13      	bgt.n	8034d1e <_strtod_l+0x3d6>
 8034cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034cf8:	2b00      	cmp	r3, #0
 8034cfa:	f43f ae5e 	beq.w	80349ba <_strtod_l+0x72>
 8034cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034d00:	dd78      	ble.n	8034df4 <_strtod_l+0x4ac>
 8034d02:	2b16      	cmp	r3, #22
 8034d04:	dc5f      	bgt.n	8034dc6 <_strtod_l+0x47e>
 8034d06:	4974      	ldr	r1, [pc, #464]	@ (8034ed8 <_strtod_l+0x590>)
 8034d08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8034d0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034d10:	4652      	mov	r2, sl
 8034d12:	465b      	mov	r3, fp
 8034d14:	f7db fc88 	bl	8010628 <__aeabi_dmul>
 8034d18:	4682      	mov	sl, r0
 8034d1a:	468b      	mov	fp, r1
 8034d1c:	e64d      	b.n	80349ba <_strtod_l+0x72>
 8034d1e:	4b6e      	ldr	r3, [pc, #440]	@ (8034ed8 <_strtod_l+0x590>)
 8034d20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8034d24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8034d28:	f7db fc7e 	bl	8010628 <__aeabi_dmul>
 8034d2c:	4682      	mov	sl, r0
 8034d2e:	9808      	ldr	r0, [sp, #32]
 8034d30:	468b      	mov	fp, r1
 8034d32:	f7db fbff 	bl	8010534 <__aeabi_ui2d>
 8034d36:	4602      	mov	r2, r0
 8034d38:	460b      	mov	r3, r1
 8034d3a:	4650      	mov	r0, sl
 8034d3c:	4659      	mov	r1, fp
 8034d3e:	f7db fabd 	bl	80102bc <__adddf3>
 8034d42:	2d0f      	cmp	r5, #15
 8034d44:	4682      	mov	sl, r0
 8034d46:	468b      	mov	fp, r1
 8034d48:	ddd5      	ble.n	8034cf6 <_strtod_l+0x3ae>
 8034d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034d4c:	1b2c      	subs	r4, r5, r4
 8034d4e:	441c      	add	r4, r3
 8034d50:	2c00      	cmp	r4, #0
 8034d52:	f340 8096 	ble.w	8034e82 <_strtod_l+0x53a>
 8034d56:	f014 030f 	ands.w	r3, r4, #15
 8034d5a:	d00a      	beq.n	8034d72 <_strtod_l+0x42a>
 8034d5c:	495e      	ldr	r1, [pc, #376]	@ (8034ed8 <_strtod_l+0x590>)
 8034d5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8034d62:	4652      	mov	r2, sl
 8034d64:	465b      	mov	r3, fp
 8034d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034d6a:	f7db fc5d 	bl	8010628 <__aeabi_dmul>
 8034d6e:	4682      	mov	sl, r0
 8034d70:	468b      	mov	fp, r1
 8034d72:	f034 040f 	bics.w	r4, r4, #15
 8034d76:	d073      	beq.n	8034e60 <_strtod_l+0x518>
 8034d78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8034d7c:	dd48      	ble.n	8034e10 <_strtod_l+0x4c8>
 8034d7e:	2400      	movs	r4, #0
 8034d80:	46a0      	mov	r8, r4
 8034d82:	940a      	str	r4, [sp, #40]	@ 0x28
 8034d84:	46a1      	mov	r9, r4
 8034d86:	9a05      	ldr	r2, [sp, #20]
 8034d88:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8034ee0 <_strtod_l+0x598>
 8034d8c:	2322      	movs	r3, #34	@ 0x22
 8034d8e:	6013      	str	r3, [r2, #0]
 8034d90:	f04f 0a00 	mov.w	sl, #0
 8034d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034d96:	2b00      	cmp	r3, #0
 8034d98:	f43f ae0f 	beq.w	80349ba <_strtod_l+0x72>
 8034d9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034d9e:	9805      	ldr	r0, [sp, #20]
 8034da0:	f7fe ff37 	bl	8033c12 <_Bfree>
 8034da4:	9805      	ldr	r0, [sp, #20]
 8034da6:	4649      	mov	r1, r9
 8034da8:	f7fe ff33 	bl	8033c12 <_Bfree>
 8034dac:	9805      	ldr	r0, [sp, #20]
 8034dae:	4641      	mov	r1, r8
 8034db0:	f7fe ff2f 	bl	8033c12 <_Bfree>
 8034db4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8034db6:	9805      	ldr	r0, [sp, #20]
 8034db8:	f7fe ff2b 	bl	8033c12 <_Bfree>
 8034dbc:	9805      	ldr	r0, [sp, #20]
 8034dbe:	4621      	mov	r1, r4
 8034dc0:	f7fe ff27 	bl	8033c12 <_Bfree>
 8034dc4:	e5f9      	b.n	80349ba <_strtod_l+0x72>
 8034dc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034dc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8034dcc:	4293      	cmp	r3, r2
 8034dce:	dbbc      	blt.n	8034d4a <_strtod_l+0x402>
 8034dd0:	4c41      	ldr	r4, [pc, #260]	@ (8034ed8 <_strtod_l+0x590>)
 8034dd2:	f1c5 050f 	rsb	r5, r5, #15
 8034dd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8034dda:	4652      	mov	r2, sl
 8034ddc:	465b      	mov	r3, fp
 8034dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034de2:	f7db fc21 	bl	8010628 <__aeabi_dmul>
 8034de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034de8:	1b5d      	subs	r5, r3, r5
 8034dea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8034dee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8034df2:	e78f      	b.n	8034d14 <_strtod_l+0x3cc>
 8034df4:	3316      	adds	r3, #22
 8034df6:	dba8      	blt.n	8034d4a <_strtod_l+0x402>
 8034df8:	4b37      	ldr	r3, [pc, #220]	@ (8034ed8 <_strtod_l+0x590>)
 8034dfa:	eba9 0808 	sub.w	r8, r9, r8
 8034dfe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8034e02:	e9d8 2300 	ldrd	r2, r3, [r8]
 8034e06:	4650      	mov	r0, sl
 8034e08:	4659      	mov	r1, fp
 8034e0a:	f7db fd37 	bl	801087c <__aeabi_ddiv>
 8034e0e:	e783      	b.n	8034d18 <_strtod_l+0x3d0>
 8034e10:	4b32      	ldr	r3, [pc, #200]	@ (8034edc <_strtod_l+0x594>)
 8034e12:	9308      	str	r3, [sp, #32]
 8034e14:	2300      	movs	r3, #0
 8034e16:	1124      	asrs	r4, r4, #4
 8034e18:	4650      	mov	r0, sl
 8034e1a:	4659      	mov	r1, fp
 8034e1c:	461e      	mov	r6, r3
 8034e1e:	2c01      	cmp	r4, #1
 8034e20:	dc21      	bgt.n	8034e66 <_strtod_l+0x51e>
 8034e22:	b10b      	cbz	r3, 8034e28 <_strtod_l+0x4e0>
 8034e24:	4682      	mov	sl, r0
 8034e26:	468b      	mov	fp, r1
 8034e28:	492c      	ldr	r1, [pc, #176]	@ (8034edc <_strtod_l+0x594>)
 8034e2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8034e2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8034e32:	4652      	mov	r2, sl
 8034e34:	465b      	mov	r3, fp
 8034e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034e3a:	f7db fbf5 	bl	8010628 <__aeabi_dmul>
 8034e3e:	4b28      	ldr	r3, [pc, #160]	@ (8034ee0 <_strtod_l+0x598>)
 8034e40:	460a      	mov	r2, r1
 8034e42:	400b      	ands	r3, r1
 8034e44:	4927      	ldr	r1, [pc, #156]	@ (8034ee4 <_strtod_l+0x59c>)
 8034e46:	428b      	cmp	r3, r1
 8034e48:	4682      	mov	sl, r0
 8034e4a:	d898      	bhi.n	8034d7e <_strtod_l+0x436>
 8034e4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8034e50:	428b      	cmp	r3, r1
 8034e52:	bf86      	itte	hi
 8034e54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8034ee8 <_strtod_l+0x5a0>
 8034e58:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8034e5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8034e60:	2300      	movs	r3, #0
 8034e62:	9308      	str	r3, [sp, #32]
 8034e64:	e07a      	b.n	8034f5c <_strtod_l+0x614>
 8034e66:	07e2      	lsls	r2, r4, #31
 8034e68:	d505      	bpl.n	8034e76 <_strtod_l+0x52e>
 8034e6a:	9b08      	ldr	r3, [sp, #32]
 8034e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034e70:	f7db fbda 	bl	8010628 <__aeabi_dmul>
 8034e74:	2301      	movs	r3, #1
 8034e76:	9a08      	ldr	r2, [sp, #32]
 8034e78:	3208      	adds	r2, #8
 8034e7a:	3601      	adds	r6, #1
 8034e7c:	1064      	asrs	r4, r4, #1
 8034e7e:	9208      	str	r2, [sp, #32]
 8034e80:	e7cd      	b.n	8034e1e <_strtod_l+0x4d6>
 8034e82:	d0ed      	beq.n	8034e60 <_strtod_l+0x518>
 8034e84:	4264      	negs	r4, r4
 8034e86:	f014 020f 	ands.w	r2, r4, #15
 8034e8a:	d00a      	beq.n	8034ea2 <_strtod_l+0x55a>
 8034e8c:	4b12      	ldr	r3, [pc, #72]	@ (8034ed8 <_strtod_l+0x590>)
 8034e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8034e92:	4650      	mov	r0, sl
 8034e94:	4659      	mov	r1, fp
 8034e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034e9a:	f7db fcef 	bl	801087c <__aeabi_ddiv>
 8034e9e:	4682      	mov	sl, r0
 8034ea0:	468b      	mov	fp, r1
 8034ea2:	1124      	asrs	r4, r4, #4
 8034ea4:	d0dc      	beq.n	8034e60 <_strtod_l+0x518>
 8034ea6:	2c1f      	cmp	r4, #31
 8034ea8:	dd20      	ble.n	8034eec <_strtod_l+0x5a4>
 8034eaa:	2400      	movs	r4, #0
 8034eac:	46a0      	mov	r8, r4
 8034eae:	940a      	str	r4, [sp, #40]	@ 0x28
 8034eb0:	46a1      	mov	r9, r4
 8034eb2:	9a05      	ldr	r2, [sp, #20]
 8034eb4:	2322      	movs	r3, #34	@ 0x22
 8034eb6:	f04f 0a00 	mov.w	sl, #0
 8034eba:	f04f 0b00 	mov.w	fp, #0
 8034ebe:	6013      	str	r3, [r2, #0]
 8034ec0:	e768      	b.n	8034d94 <_strtod_l+0x44c>
 8034ec2:	bf00      	nop
 8034ec4:	0803c6b5 	.word	0x0803c6b5
 8034ec8:	0803cc38 	.word	0x0803cc38
 8034ecc:	0803c524 	.word	0x0803c524
 8034ed0:	0803c9e0 	.word	0x0803c9e0
 8034ed4:	0803c51e 	.word	0x0803c51e
 8034ed8:	0803cb70 	.word	0x0803cb70
 8034edc:	0803cb48 	.word	0x0803cb48
 8034ee0:	7ff00000 	.word	0x7ff00000
 8034ee4:	7ca00000 	.word	0x7ca00000
 8034ee8:	7fefffff 	.word	0x7fefffff
 8034eec:	f014 0310 	ands.w	r3, r4, #16
 8034ef0:	bf18      	it	ne
 8034ef2:	236a      	movne	r3, #106	@ 0x6a
 8034ef4:	4ea9      	ldr	r6, [pc, #676]	@ (803519c <_strtod_l+0x854>)
 8034ef6:	9308      	str	r3, [sp, #32]
 8034ef8:	4650      	mov	r0, sl
 8034efa:	4659      	mov	r1, fp
 8034efc:	2300      	movs	r3, #0
 8034efe:	07e2      	lsls	r2, r4, #31
 8034f00:	d504      	bpl.n	8034f0c <_strtod_l+0x5c4>
 8034f02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8034f06:	f7db fb8f 	bl	8010628 <__aeabi_dmul>
 8034f0a:	2301      	movs	r3, #1
 8034f0c:	1064      	asrs	r4, r4, #1
 8034f0e:	f106 0608 	add.w	r6, r6, #8
 8034f12:	d1f4      	bne.n	8034efe <_strtod_l+0x5b6>
 8034f14:	b10b      	cbz	r3, 8034f1a <_strtod_l+0x5d2>
 8034f16:	4682      	mov	sl, r0
 8034f18:	468b      	mov	fp, r1
 8034f1a:	9b08      	ldr	r3, [sp, #32]
 8034f1c:	b1b3      	cbz	r3, 8034f4c <_strtod_l+0x604>
 8034f1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8034f22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8034f26:	2b00      	cmp	r3, #0
 8034f28:	4659      	mov	r1, fp
 8034f2a:	dd0f      	ble.n	8034f4c <_strtod_l+0x604>
 8034f2c:	2b1f      	cmp	r3, #31
 8034f2e:	dd55      	ble.n	8034fdc <_strtod_l+0x694>
 8034f30:	2b34      	cmp	r3, #52	@ 0x34
 8034f32:	bfde      	ittt	le
 8034f34:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8034f38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8034f3c:	4093      	lslle	r3, r2
 8034f3e:	f04f 0a00 	mov.w	sl, #0
 8034f42:	bfcc      	ite	gt
 8034f44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8034f48:	ea03 0b01 	andle.w	fp, r3, r1
 8034f4c:	2200      	movs	r2, #0
 8034f4e:	2300      	movs	r3, #0
 8034f50:	4650      	mov	r0, sl
 8034f52:	4659      	mov	r1, fp
 8034f54:	f7db fdd0 	bl	8010af8 <__aeabi_dcmpeq>
 8034f58:	2800      	cmp	r0, #0
 8034f5a:	d1a6      	bne.n	8034eaa <_strtod_l+0x562>
 8034f5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034f5e:	9300      	str	r3, [sp, #0]
 8034f60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8034f62:	9805      	ldr	r0, [sp, #20]
 8034f64:	462b      	mov	r3, r5
 8034f66:	463a      	mov	r2, r7
 8034f68:	f7fe fea2 	bl	8033cb0 <__s2b>
 8034f6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8034f6e:	2800      	cmp	r0, #0
 8034f70:	f43f af05 	beq.w	8034d7e <_strtod_l+0x436>
 8034f74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034f76:	2a00      	cmp	r2, #0
 8034f78:	eba9 0308 	sub.w	r3, r9, r8
 8034f7c:	bfa8      	it	ge
 8034f7e:	2300      	movge	r3, #0
 8034f80:	9312      	str	r3, [sp, #72]	@ 0x48
 8034f82:	2400      	movs	r4, #0
 8034f84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8034f88:	9316      	str	r3, [sp, #88]	@ 0x58
 8034f8a:	46a0      	mov	r8, r4
 8034f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034f8e:	9805      	ldr	r0, [sp, #20]
 8034f90:	6859      	ldr	r1, [r3, #4]
 8034f92:	f7fe fe19 	bl	8033bc8 <_Balloc>
 8034f96:	4681      	mov	r9, r0
 8034f98:	2800      	cmp	r0, #0
 8034f9a:	f43f aef4 	beq.w	8034d86 <_strtod_l+0x43e>
 8034f9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034fa0:	691a      	ldr	r2, [r3, #16]
 8034fa2:	3202      	adds	r2, #2
 8034fa4:	f103 010c 	add.w	r1, r3, #12
 8034fa8:	0092      	lsls	r2, r2, #2
 8034faa:	300c      	adds	r0, #12
 8034fac:	f7f9 fadc 	bl	802e568 <memcpy>
 8034fb0:	ec4b ab10 	vmov	d0, sl, fp
 8034fb4:	9805      	ldr	r0, [sp, #20]
 8034fb6:	aa1c      	add	r2, sp, #112	@ 0x70
 8034fb8:	a91b      	add	r1, sp, #108	@ 0x6c
 8034fba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8034fbe:	f7ff f999 	bl	80342f4 <__d2b>
 8034fc2:	901a      	str	r0, [sp, #104]	@ 0x68
 8034fc4:	2800      	cmp	r0, #0
 8034fc6:	f43f aede 	beq.w	8034d86 <_strtod_l+0x43e>
 8034fca:	9805      	ldr	r0, [sp, #20]
 8034fcc:	2101      	movs	r1, #1
 8034fce:	f7fe ff05 	bl	8033ddc <__i2b>
 8034fd2:	4680      	mov	r8, r0
 8034fd4:	b948      	cbnz	r0, 8034fea <_strtod_l+0x6a2>
 8034fd6:	f04f 0800 	mov.w	r8, #0
 8034fda:	e6d4      	b.n	8034d86 <_strtod_l+0x43e>
 8034fdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8034fe4:	ea03 0a0a 	and.w	sl, r3, sl
 8034fe8:	e7b0      	b.n	8034f4c <_strtod_l+0x604>
 8034fea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8034fec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8034fee:	2d00      	cmp	r5, #0
 8034ff0:	bfab      	itete	ge
 8034ff2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8034ff4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8034ff6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8034ff8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8034ffa:	bfac      	ite	ge
 8034ffc:	18ef      	addge	r7, r5, r3
 8034ffe:	1b5e      	sublt	r6, r3, r5
 8035000:	9b08      	ldr	r3, [sp, #32]
 8035002:	1aed      	subs	r5, r5, r3
 8035004:	4415      	add	r5, r2
 8035006:	4b66      	ldr	r3, [pc, #408]	@ (80351a0 <_strtod_l+0x858>)
 8035008:	3d01      	subs	r5, #1
 803500a:	429d      	cmp	r5, r3
 803500c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8035010:	da50      	bge.n	80350b4 <_strtod_l+0x76c>
 8035012:	1b5b      	subs	r3, r3, r5
 8035014:	2b1f      	cmp	r3, #31
 8035016:	eba2 0203 	sub.w	r2, r2, r3
 803501a:	f04f 0101 	mov.w	r1, #1
 803501e:	dc3d      	bgt.n	803509c <_strtod_l+0x754>
 8035020:	fa01 f303 	lsl.w	r3, r1, r3
 8035024:	9313      	str	r3, [sp, #76]	@ 0x4c
 8035026:	2300      	movs	r3, #0
 8035028:	9310      	str	r3, [sp, #64]	@ 0x40
 803502a:	18bd      	adds	r5, r7, r2
 803502c:	9b08      	ldr	r3, [sp, #32]
 803502e:	42af      	cmp	r7, r5
 8035030:	4416      	add	r6, r2
 8035032:	441e      	add	r6, r3
 8035034:	463b      	mov	r3, r7
 8035036:	bfa8      	it	ge
 8035038:	462b      	movge	r3, r5
 803503a:	42b3      	cmp	r3, r6
 803503c:	bfa8      	it	ge
 803503e:	4633      	movge	r3, r6
 8035040:	2b00      	cmp	r3, #0
 8035042:	bfc2      	ittt	gt
 8035044:	1aed      	subgt	r5, r5, r3
 8035046:	1af6      	subgt	r6, r6, r3
 8035048:	1aff      	subgt	r7, r7, r3
 803504a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803504c:	2b00      	cmp	r3, #0
 803504e:	dd16      	ble.n	803507e <_strtod_l+0x736>
 8035050:	4641      	mov	r1, r8
 8035052:	9805      	ldr	r0, [sp, #20]
 8035054:	461a      	mov	r2, r3
 8035056:	f7fe ff81 	bl	8033f5c <__pow5mult>
 803505a:	4680      	mov	r8, r0
 803505c:	2800      	cmp	r0, #0
 803505e:	d0ba      	beq.n	8034fd6 <_strtod_l+0x68e>
 8035060:	4601      	mov	r1, r0
 8035062:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8035064:	9805      	ldr	r0, [sp, #20]
 8035066:	f7fe fecf 	bl	8033e08 <__multiply>
 803506a:	900e      	str	r0, [sp, #56]	@ 0x38
 803506c:	2800      	cmp	r0, #0
 803506e:	f43f ae8a 	beq.w	8034d86 <_strtod_l+0x43e>
 8035072:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8035074:	9805      	ldr	r0, [sp, #20]
 8035076:	f7fe fdcc 	bl	8033c12 <_Bfree>
 803507a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803507c:	931a      	str	r3, [sp, #104]	@ 0x68
 803507e:	2d00      	cmp	r5, #0
 8035080:	dc1d      	bgt.n	80350be <_strtod_l+0x776>
 8035082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8035084:	2b00      	cmp	r3, #0
 8035086:	dd23      	ble.n	80350d0 <_strtod_l+0x788>
 8035088:	4649      	mov	r1, r9
 803508a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 803508c:	9805      	ldr	r0, [sp, #20]
 803508e:	f7fe ff65 	bl	8033f5c <__pow5mult>
 8035092:	4681      	mov	r9, r0
 8035094:	b9e0      	cbnz	r0, 80350d0 <_strtod_l+0x788>
 8035096:	f04f 0900 	mov.w	r9, #0
 803509a:	e674      	b.n	8034d86 <_strtod_l+0x43e>
 803509c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80350a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80350a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80350a8:	35e2      	adds	r5, #226	@ 0xe2
 80350aa:	fa01 f305 	lsl.w	r3, r1, r5
 80350ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80350b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80350b2:	e7ba      	b.n	803502a <_strtod_l+0x6e2>
 80350b4:	2300      	movs	r3, #0
 80350b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80350b8:	2301      	movs	r3, #1
 80350ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80350bc:	e7b5      	b.n	803502a <_strtod_l+0x6e2>
 80350be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80350c0:	9805      	ldr	r0, [sp, #20]
 80350c2:	462a      	mov	r2, r5
 80350c4:	f7fe ff8a 	bl	8033fdc <__lshift>
 80350c8:	901a      	str	r0, [sp, #104]	@ 0x68
 80350ca:	2800      	cmp	r0, #0
 80350cc:	d1d9      	bne.n	8035082 <_strtod_l+0x73a>
 80350ce:	e65a      	b.n	8034d86 <_strtod_l+0x43e>
 80350d0:	2e00      	cmp	r6, #0
 80350d2:	dd07      	ble.n	80350e4 <_strtod_l+0x79c>
 80350d4:	4649      	mov	r1, r9
 80350d6:	9805      	ldr	r0, [sp, #20]
 80350d8:	4632      	mov	r2, r6
 80350da:	f7fe ff7f 	bl	8033fdc <__lshift>
 80350de:	4681      	mov	r9, r0
 80350e0:	2800      	cmp	r0, #0
 80350e2:	d0d8      	beq.n	8035096 <_strtod_l+0x74e>
 80350e4:	2f00      	cmp	r7, #0
 80350e6:	dd08      	ble.n	80350fa <_strtod_l+0x7b2>
 80350e8:	4641      	mov	r1, r8
 80350ea:	9805      	ldr	r0, [sp, #20]
 80350ec:	463a      	mov	r2, r7
 80350ee:	f7fe ff75 	bl	8033fdc <__lshift>
 80350f2:	4680      	mov	r8, r0
 80350f4:	2800      	cmp	r0, #0
 80350f6:	f43f ae46 	beq.w	8034d86 <_strtod_l+0x43e>
 80350fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80350fc:	9805      	ldr	r0, [sp, #20]
 80350fe:	464a      	mov	r2, r9
 8035100:	f7fe fff4 	bl	80340ec <__mdiff>
 8035104:	4604      	mov	r4, r0
 8035106:	2800      	cmp	r0, #0
 8035108:	f43f ae3d 	beq.w	8034d86 <_strtod_l+0x43e>
 803510c:	68c3      	ldr	r3, [r0, #12]
 803510e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8035110:	2300      	movs	r3, #0
 8035112:	60c3      	str	r3, [r0, #12]
 8035114:	4641      	mov	r1, r8
 8035116:	f7fe ffcd 	bl	80340b4 <__mcmp>
 803511a:	2800      	cmp	r0, #0
 803511c:	da46      	bge.n	80351ac <_strtod_l+0x864>
 803511e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035120:	ea53 030a 	orrs.w	r3, r3, sl
 8035124:	d16c      	bne.n	8035200 <_strtod_l+0x8b8>
 8035126:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803512a:	2b00      	cmp	r3, #0
 803512c:	d168      	bne.n	8035200 <_strtod_l+0x8b8>
 803512e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8035132:	0d1b      	lsrs	r3, r3, #20
 8035134:	051b      	lsls	r3, r3, #20
 8035136:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 803513a:	d961      	bls.n	8035200 <_strtod_l+0x8b8>
 803513c:	6963      	ldr	r3, [r4, #20]
 803513e:	b913      	cbnz	r3, 8035146 <_strtod_l+0x7fe>
 8035140:	6923      	ldr	r3, [r4, #16]
 8035142:	2b01      	cmp	r3, #1
 8035144:	dd5c      	ble.n	8035200 <_strtod_l+0x8b8>
 8035146:	4621      	mov	r1, r4
 8035148:	2201      	movs	r2, #1
 803514a:	9805      	ldr	r0, [sp, #20]
 803514c:	f7fe ff46 	bl	8033fdc <__lshift>
 8035150:	4641      	mov	r1, r8
 8035152:	4604      	mov	r4, r0
 8035154:	f7fe ffae 	bl	80340b4 <__mcmp>
 8035158:	2800      	cmp	r0, #0
 803515a:	dd51      	ble.n	8035200 <_strtod_l+0x8b8>
 803515c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8035160:	9a08      	ldr	r2, [sp, #32]
 8035162:	0d1b      	lsrs	r3, r3, #20
 8035164:	051b      	lsls	r3, r3, #20
 8035166:	2a00      	cmp	r2, #0
 8035168:	d06b      	beq.n	8035242 <_strtod_l+0x8fa>
 803516a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 803516e:	d868      	bhi.n	8035242 <_strtod_l+0x8fa>
 8035170:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8035174:	f67f ae9d 	bls.w	8034eb2 <_strtod_l+0x56a>
 8035178:	4b0a      	ldr	r3, [pc, #40]	@ (80351a4 <_strtod_l+0x85c>)
 803517a:	4650      	mov	r0, sl
 803517c:	4659      	mov	r1, fp
 803517e:	2200      	movs	r2, #0
 8035180:	f7db fa52 	bl	8010628 <__aeabi_dmul>
 8035184:	4b08      	ldr	r3, [pc, #32]	@ (80351a8 <_strtod_l+0x860>)
 8035186:	400b      	ands	r3, r1
 8035188:	4682      	mov	sl, r0
 803518a:	468b      	mov	fp, r1
 803518c:	2b00      	cmp	r3, #0
 803518e:	f47f ae05 	bne.w	8034d9c <_strtod_l+0x454>
 8035192:	9a05      	ldr	r2, [sp, #20]
 8035194:	2322      	movs	r3, #34	@ 0x22
 8035196:	6013      	str	r3, [r2, #0]
 8035198:	e600      	b.n	8034d9c <_strtod_l+0x454>
 803519a:	bf00      	nop
 803519c:	0803cc60 	.word	0x0803cc60
 80351a0:	fffffc02 	.word	0xfffffc02
 80351a4:	39500000 	.word	0x39500000
 80351a8:	7ff00000 	.word	0x7ff00000
 80351ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80351b0:	d165      	bne.n	803527e <_strtod_l+0x936>
 80351b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80351b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80351b8:	b35a      	cbz	r2, 8035212 <_strtod_l+0x8ca>
 80351ba:	4a9f      	ldr	r2, [pc, #636]	@ (8035438 <_strtod_l+0xaf0>)
 80351bc:	4293      	cmp	r3, r2
 80351be:	d12b      	bne.n	8035218 <_strtod_l+0x8d0>
 80351c0:	9b08      	ldr	r3, [sp, #32]
 80351c2:	4651      	mov	r1, sl
 80351c4:	b303      	cbz	r3, 8035208 <_strtod_l+0x8c0>
 80351c6:	4b9d      	ldr	r3, [pc, #628]	@ (803543c <_strtod_l+0xaf4>)
 80351c8:	465a      	mov	r2, fp
 80351ca:	4013      	ands	r3, r2
 80351cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80351d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80351d4:	d81b      	bhi.n	803520e <_strtod_l+0x8c6>
 80351d6:	0d1b      	lsrs	r3, r3, #20
 80351d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80351dc:	fa02 f303 	lsl.w	r3, r2, r3
 80351e0:	4299      	cmp	r1, r3
 80351e2:	d119      	bne.n	8035218 <_strtod_l+0x8d0>
 80351e4:	4b96      	ldr	r3, [pc, #600]	@ (8035440 <_strtod_l+0xaf8>)
 80351e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80351e8:	429a      	cmp	r2, r3
 80351ea:	d102      	bne.n	80351f2 <_strtod_l+0x8aa>
 80351ec:	3101      	adds	r1, #1
 80351ee:	f43f adca 	beq.w	8034d86 <_strtod_l+0x43e>
 80351f2:	4b92      	ldr	r3, [pc, #584]	@ (803543c <_strtod_l+0xaf4>)
 80351f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80351f6:	401a      	ands	r2, r3
 80351f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80351fc:	f04f 0a00 	mov.w	sl, #0
 8035200:	9b08      	ldr	r3, [sp, #32]
 8035202:	2b00      	cmp	r3, #0
 8035204:	d1b8      	bne.n	8035178 <_strtod_l+0x830>
 8035206:	e5c9      	b.n	8034d9c <_strtod_l+0x454>
 8035208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803520c:	e7e8      	b.n	80351e0 <_strtod_l+0x898>
 803520e:	4613      	mov	r3, r2
 8035210:	e7e6      	b.n	80351e0 <_strtod_l+0x898>
 8035212:	ea53 030a 	orrs.w	r3, r3, sl
 8035216:	d0a1      	beq.n	803515c <_strtod_l+0x814>
 8035218:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803521a:	b1db      	cbz	r3, 8035254 <_strtod_l+0x90c>
 803521c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803521e:	4213      	tst	r3, r2
 8035220:	d0ee      	beq.n	8035200 <_strtod_l+0x8b8>
 8035222:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035224:	9a08      	ldr	r2, [sp, #32]
 8035226:	4650      	mov	r0, sl
 8035228:	4659      	mov	r1, fp
 803522a:	b1bb      	cbz	r3, 803525c <_strtod_l+0x914>
 803522c:	f7ff fb6e 	bl	803490c <sulp>
 8035230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8035234:	ec53 2b10 	vmov	r2, r3, d0
 8035238:	f7db f840 	bl	80102bc <__adddf3>
 803523c:	4682      	mov	sl, r0
 803523e:	468b      	mov	fp, r1
 8035240:	e7de      	b.n	8035200 <_strtod_l+0x8b8>
 8035242:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8035246:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 803524a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 803524e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8035252:	e7d5      	b.n	8035200 <_strtod_l+0x8b8>
 8035254:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8035256:	ea13 0f0a 	tst.w	r3, sl
 803525a:	e7e1      	b.n	8035220 <_strtod_l+0x8d8>
 803525c:	f7ff fb56 	bl	803490c <sulp>
 8035260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8035264:	ec53 2b10 	vmov	r2, r3, d0
 8035268:	f7db f826 	bl	80102b8 <__aeabi_dsub>
 803526c:	2200      	movs	r2, #0
 803526e:	2300      	movs	r3, #0
 8035270:	4682      	mov	sl, r0
 8035272:	468b      	mov	fp, r1
 8035274:	f7db fc40 	bl	8010af8 <__aeabi_dcmpeq>
 8035278:	2800      	cmp	r0, #0
 803527a:	d0c1      	beq.n	8035200 <_strtod_l+0x8b8>
 803527c:	e619      	b.n	8034eb2 <_strtod_l+0x56a>
 803527e:	4641      	mov	r1, r8
 8035280:	4620      	mov	r0, r4
 8035282:	f7ff f88f 	bl	80343a4 <__ratio>
 8035286:	ec57 6b10 	vmov	r6, r7, d0
 803528a:	2200      	movs	r2, #0
 803528c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8035290:	4630      	mov	r0, r6
 8035292:	4639      	mov	r1, r7
 8035294:	f7db fc44 	bl	8010b20 <__aeabi_dcmple>
 8035298:	2800      	cmp	r0, #0
 803529a:	d06f      	beq.n	803537c <_strtod_l+0xa34>
 803529c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803529e:	2b00      	cmp	r3, #0
 80352a0:	d17a      	bne.n	8035398 <_strtod_l+0xa50>
 80352a2:	f1ba 0f00 	cmp.w	sl, #0
 80352a6:	d158      	bne.n	803535a <_strtod_l+0xa12>
 80352a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80352aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80352ae:	2b00      	cmp	r3, #0
 80352b0:	d15a      	bne.n	8035368 <_strtod_l+0xa20>
 80352b2:	4b64      	ldr	r3, [pc, #400]	@ (8035444 <_strtod_l+0xafc>)
 80352b4:	2200      	movs	r2, #0
 80352b6:	4630      	mov	r0, r6
 80352b8:	4639      	mov	r1, r7
 80352ba:	f7db fc27 	bl	8010b0c <__aeabi_dcmplt>
 80352be:	2800      	cmp	r0, #0
 80352c0:	d159      	bne.n	8035376 <_strtod_l+0xa2e>
 80352c2:	4630      	mov	r0, r6
 80352c4:	4639      	mov	r1, r7
 80352c6:	4b60      	ldr	r3, [pc, #384]	@ (8035448 <_strtod_l+0xb00>)
 80352c8:	2200      	movs	r2, #0
 80352ca:	f7db f9ad 	bl	8010628 <__aeabi_dmul>
 80352ce:	4606      	mov	r6, r0
 80352d0:	460f      	mov	r7, r1
 80352d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80352d6:	9606      	str	r6, [sp, #24]
 80352d8:	9307      	str	r3, [sp, #28]
 80352da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80352de:	4d57      	ldr	r5, [pc, #348]	@ (803543c <_strtod_l+0xaf4>)
 80352e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80352e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80352e6:	401d      	ands	r5, r3
 80352e8:	4b58      	ldr	r3, [pc, #352]	@ (803544c <_strtod_l+0xb04>)
 80352ea:	429d      	cmp	r5, r3
 80352ec:	f040 80b2 	bne.w	8035454 <_strtod_l+0xb0c>
 80352f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80352f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80352f6:	ec4b ab10 	vmov	d0, sl, fp
 80352fa:	f7fe ff8b 	bl	8034214 <__ulp>
 80352fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8035302:	ec51 0b10 	vmov	r0, r1, d0
 8035306:	f7db f98f 	bl	8010628 <__aeabi_dmul>
 803530a:	4652      	mov	r2, sl
 803530c:	465b      	mov	r3, fp
 803530e:	f7da ffd5 	bl	80102bc <__adddf3>
 8035312:	460b      	mov	r3, r1
 8035314:	4949      	ldr	r1, [pc, #292]	@ (803543c <_strtod_l+0xaf4>)
 8035316:	4a4e      	ldr	r2, [pc, #312]	@ (8035450 <_strtod_l+0xb08>)
 8035318:	4019      	ands	r1, r3
 803531a:	4291      	cmp	r1, r2
 803531c:	4682      	mov	sl, r0
 803531e:	d942      	bls.n	80353a6 <_strtod_l+0xa5e>
 8035320:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8035322:	4b47      	ldr	r3, [pc, #284]	@ (8035440 <_strtod_l+0xaf8>)
 8035324:	429a      	cmp	r2, r3
 8035326:	d103      	bne.n	8035330 <_strtod_l+0x9e8>
 8035328:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803532a:	3301      	adds	r3, #1
 803532c:	f43f ad2b 	beq.w	8034d86 <_strtod_l+0x43e>
 8035330:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8035440 <_strtod_l+0xaf8>
 8035334:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8035338:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803533a:	9805      	ldr	r0, [sp, #20]
 803533c:	f7fe fc69 	bl	8033c12 <_Bfree>
 8035340:	9805      	ldr	r0, [sp, #20]
 8035342:	4649      	mov	r1, r9
 8035344:	f7fe fc65 	bl	8033c12 <_Bfree>
 8035348:	9805      	ldr	r0, [sp, #20]
 803534a:	4641      	mov	r1, r8
 803534c:	f7fe fc61 	bl	8033c12 <_Bfree>
 8035350:	9805      	ldr	r0, [sp, #20]
 8035352:	4621      	mov	r1, r4
 8035354:	f7fe fc5d 	bl	8033c12 <_Bfree>
 8035358:	e618      	b.n	8034f8c <_strtod_l+0x644>
 803535a:	f1ba 0f01 	cmp.w	sl, #1
 803535e:	d103      	bne.n	8035368 <_strtod_l+0xa20>
 8035360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035362:	2b00      	cmp	r3, #0
 8035364:	f43f ada5 	beq.w	8034eb2 <_strtod_l+0x56a>
 8035368:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8035418 <_strtod_l+0xad0>
 803536c:	4f35      	ldr	r7, [pc, #212]	@ (8035444 <_strtod_l+0xafc>)
 803536e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8035372:	2600      	movs	r6, #0
 8035374:	e7b1      	b.n	80352da <_strtod_l+0x992>
 8035376:	4f34      	ldr	r7, [pc, #208]	@ (8035448 <_strtod_l+0xb00>)
 8035378:	2600      	movs	r6, #0
 803537a:	e7aa      	b.n	80352d2 <_strtod_l+0x98a>
 803537c:	4b32      	ldr	r3, [pc, #200]	@ (8035448 <_strtod_l+0xb00>)
 803537e:	4630      	mov	r0, r6
 8035380:	4639      	mov	r1, r7
 8035382:	2200      	movs	r2, #0
 8035384:	f7db f950 	bl	8010628 <__aeabi_dmul>
 8035388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803538a:	4606      	mov	r6, r0
 803538c:	460f      	mov	r7, r1
 803538e:	2b00      	cmp	r3, #0
 8035390:	d09f      	beq.n	80352d2 <_strtod_l+0x98a>
 8035392:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8035396:	e7a0      	b.n	80352da <_strtod_l+0x992>
 8035398:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8035420 <_strtod_l+0xad8>
 803539c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80353a0:	ec57 6b17 	vmov	r6, r7, d7
 80353a4:	e799      	b.n	80352da <_strtod_l+0x992>
 80353a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80353aa:	9b08      	ldr	r3, [sp, #32]
 80353ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80353b0:	2b00      	cmp	r3, #0
 80353b2:	d1c1      	bne.n	8035338 <_strtod_l+0x9f0>
 80353b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80353b8:	0d1b      	lsrs	r3, r3, #20
 80353ba:	051b      	lsls	r3, r3, #20
 80353bc:	429d      	cmp	r5, r3
 80353be:	d1bb      	bne.n	8035338 <_strtod_l+0x9f0>
 80353c0:	4630      	mov	r0, r6
 80353c2:	4639      	mov	r1, r7
 80353c4:	f7db fcf4 	bl	8010db0 <__aeabi_d2lz>
 80353c8:	f7db f900 	bl	80105cc <__aeabi_l2d>
 80353cc:	4602      	mov	r2, r0
 80353ce:	460b      	mov	r3, r1
 80353d0:	4630      	mov	r0, r6
 80353d2:	4639      	mov	r1, r7
 80353d4:	f7da ff70 	bl	80102b8 <__aeabi_dsub>
 80353d8:	460b      	mov	r3, r1
 80353da:	4602      	mov	r2, r0
 80353dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80353e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80353e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80353e6:	ea46 060a 	orr.w	r6, r6, sl
 80353ea:	431e      	orrs	r6, r3
 80353ec:	d06f      	beq.n	80354ce <_strtod_l+0xb86>
 80353ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8035428 <_strtod_l+0xae0>)
 80353f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80353f4:	f7db fb8a 	bl	8010b0c <__aeabi_dcmplt>
 80353f8:	2800      	cmp	r0, #0
 80353fa:	f47f accf 	bne.w	8034d9c <_strtod_l+0x454>
 80353fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8035430 <_strtod_l+0xae8>)
 8035400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8035408:	f7db fb9e 	bl	8010b48 <__aeabi_dcmpgt>
 803540c:	2800      	cmp	r0, #0
 803540e:	d093      	beq.n	8035338 <_strtod_l+0x9f0>
 8035410:	e4c4      	b.n	8034d9c <_strtod_l+0x454>
 8035412:	bf00      	nop
 8035414:	f3af 8000 	nop.w
 8035418:	00000000 	.word	0x00000000
 803541c:	bff00000 	.word	0xbff00000
 8035420:	00000000 	.word	0x00000000
 8035424:	3ff00000 	.word	0x3ff00000
 8035428:	94a03595 	.word	0x94a03595
 803542c:	3fdfffff 	.word	0x3fdfffff
 8035430:	35afe535 	.word	0x35afe535
 8035434:	3fe00000 	.word	0x3fe00000
 8035438:	000fffff 	.word	0x000fffff
 803543c:	7ff00000 	.word	0x7ff00000
 8035440:	7fefffff 	.word	0x7fefffff
 8035444:	3ff00000 	.word	0x3ff00000
 8035448:	3fe00000 	.word	0x3fe00000
 803544c:	7fe00000 	.word	0x7fe00000
 8035450:	7c9fffff 	.word	0x7c9fffff
 8035454:	9b08      	ldr	r3, [sp, #32]
 8035456:	b323      	cbz	r3, 80354a2 <_strtod_l+0xb5a>
 8035458:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 803545c:	d821      	bhi.n	80354a2 <_strtod_l+0xb5a>
 803545e:	a328      	add	r3, pc, #160	@ (adr r3, 8035500 <_strtod_l+0xbb8>)
 8035460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035464:	4630      	mov	r0, r6
 8035466:	4639      	mov	r1, r7
 8035468:	f7db fb5a 	bl	8010b20 <__aeabi_dcmple>
 803546c:	b1a0      	cbz	r0, 8035498 <_strtod_l+0xb50>
 803546e:	4639      	mov	r1, r7
 8035470:	4630      	mov	r0, r6
 8035472:	f7db fbb1 	bl	8010bd8 <__aeabi_d2uiz>
 8035476:	2801      	cmp	r0, #1
 8035478:	bf38      	it	cc
 803547a:	2001      	movcc	r0, #1
 803547c:	f7db f85a 	bl	8010534 <__aeabi_ui2d>
 8035480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035482:	4606      	mov	r6, r0
 8035484:	460f      	mov	r7, r1
 8035486:	b9fb      	cbnz	r3, 80354c8 <_strtod_l+0xb80>
 8035488:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 803548c:	9014      	str	r0, [sp, #80]	@ 0x50
 803548e:	9315      	str	r3, [sp, #84]	@ 0x54
 8035490:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8035494:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8035498:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803549a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 803549e:	1b5b      	subs	r3, r3, r5
 80354a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80354a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80354a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80354aa:	f7fe feb3 	bl	8034214 <__ulp>
 80354ae:	4650      	mov	r0, sl
 80354b0:	ec53 2b10 	vmov	r2, r3, d0
 80354b4:	4659      	mov	r1, fp
 80354b6:	f7db f8b7 	bl	8010628 <__aeabi_dmul>
 80354ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80354be:	f7da fefd 	bl	80102bc <__adddf3>
 80354c2:	4682      	mov	sl, r0
 80354c4:	468b      	mov	fp, r1
 80354c6:	e770      	b.n	80353aa <_strtod_l+0xa62>
 80354c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80354cc:	e7e0      	b.n	8035490 <_strtod_l+0xb48>
 80354ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8035508 <_strtod_l+0xbc0>)
 80354d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80354d4:	f7db fb1a 	bl	8010b0c <__aeabi_dcmplt>
 80354d8:	e798      	b.n	803540c <_strtod_l+0xac4>
 80354da:	2300      	movs	r3, #0
 80354dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80354de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80354e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80354e2:	6013      	str	r3, [r2, #0]
 80354e4:	f7ff ba6d 	b.w	80349c2 <_strtod_l+0x7a>
 80354e8:	2a65      	cmp	r2, #101	@ 0x65
 80354ea:	f43f ab66 	beq.w	8034bba <_strtod_l+0x272>
 80354ee:	2a45      	cmp	r2, #69	@ 0x45
 80354f0:	f43f ab63 	beq.w	8034bba <_strtod_l+0x272>
 80354f4:	2301      	movs	r3, #1
 80354f6:	f7ff bb9e 	b.w	8034c36 <_strtod_l+0x2ee>
 80354fa:	bf00      	nop
 80354fc:	f3af 8000 	nop.w
 8035500:	ffc00000 	.word	0xffc00000
 8035504:	41dfffff 	.word	0x41dfffff
 8035508:	94a03595 	.word	0x94a03595
 803550c:	3fcfffff 	.word	0x3fcfffff

08035510 <_strtod_r>:
 8035510:	4b01      	ldr	r3, [pc, #4]	@ (8035518 <_strtod_r+0x8>)
 8035512:	f7ff ba19 	b.w	8034948 <_strtod_l>
 8035516:	bf00      	nop
 8035518:	2000016c 	.word	0x2000016c

0803551c <_strtoul_l.constprop.0>:
 803551c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8035520:	4e34      	ldr	r6, [pc, #208]	@ (80355f4 <_strtoul_l.constprop.0+0xd8>)
 8035522:	4686      	mov	lr, r0
 8035524:	460d      	mov	r5, r1
 8035526:	4628      	mov	r0, r5
 8035528:	f815 4b01 	ldrb.w	r4, [r5], #1
 803552c:	5d37      	ldrb	r7, [r6, r4]
 803552e:	f017 0708 	ands.w	r7, r7, #8
 8035532:	d1f8      	bne.n	8035526 <_strtoul_l.constprop.0+0xa>
 8035534:	2c2d      	cmp	r4, #45	@ 0x2d
 8035536:	d12f      	bne.n	8035598 <_strtoul_l.constprop.0+0x7c>
 8035538:	782c      	ldrb	r4, [r5, #0]
 803553a:	2701      	movs	r7, #1
 803553c:	1c85      	adds	r5, r0, #2
 803553e:	f033 0010 	bics.w	r0, r3, #16
 8035542:	d109      	bne.n	8035558 <_strtoul_l.constprop.0+0x3c>
 8035544:	2c30      	cmp	r4, #48	@ 0x30
 8035546:	d12c      	bne.n	80355a2 <_strtoul_l.constprop.0+0x86>
 8035548:	7828      	ldrb	r0, [r5, #0]
 803554a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 803554e:	2858      	cmp	r0, #88	@ 0x58
 8035550:	d127      	bne.n	80355a2 <_strtoul_l.constprop.0+0x86>
 8035552:	786c      	ldrb	r4, [r5, #1]
 8035554:	2310      	movs	r3, #16
 8035556:	3502      	adds	r5, #2
 8035558:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 803555c:	2600      	movs	r6, #0
 803555e:	fbb8 f8f3 	udiv	r8, r8, r3
 8035562:	fb03 f908 	mul.w	r9, r3, r8
 8035566:	ea6f 0909 	mvn.w	r9, r9
 803556a:	4630      	mov	r0, r6
 803556c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8035570:	f1bc 0f09 	cmp.w	ip, #9
 8035574:	d81c      	bhi.n	80355b0 <_strtoul_l.constprop.0+0x94>
 8035576:	4664      	mov	r4, ip
 8035578:	42a3      	cmp	r3, r4
 803557a:	dd2a      	ble.n	80355d2 <_strtoul_l.constprop.0+0xb6>
 803557c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8035580:	d007      	beq.n	8035592 <_strtoul_l.constprop.0+0x76>
 8035582:	4580      	cmp	r8, r0
 8035584:	d322      	bcc.n	80355cc <_strtoul_l.constprop.0+0xb0>
 8035586:	d101      	bne.n	803558c <_strtoul_l.constprop.0+0x70>
 8035588:	45a1      	cmp	r9, r4
 803558a:	db1f      	blt.n	80355cc <_strtoul_l.constprop.0+0xb0>
 803558c:	fb00 4003 	mla	r0, r0, r3, r4
 8035590:	2601      	movs	r6, #1
 8035592:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035596:	e7e9      	b.n	803556c <_strtoul_l.constprop.0+0x50>
 8035598:	2c2b      	cmp	r4, #43	@ 0x2b
 803559a:	bf04      	itt	eq
 803559c:	782c      	ldrbeq	r4, [r5, #0]
 803559e:	1c85      	addeq	r5, r0, #2
 80355a0:	e7cd      	b.n	803553e <_strtoul_l.constprop.0+0x22>
 80355a2:	2b00      	cmp	r3, #0
 80355a4:	d1d8      	bne.n	8035558 <_strtoul_l.constprop.0+0x3c>
 80355a6:	2c30      	cmp	r4, #48	@ 0x30
 80355a8:	bf0c      	ite	eq
 80355aa:	2308      	moveq	r3, #8
 80355ac:	230a      	movne	r3, #10
 80355ae:	e7d3      	b.n	8035558 <_strtoul_l.constprop.0+0x3c>
 80355b0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80355b4:	f1bc 0f19 	cmp.w	ip, #25
 80355b8:	d801      	bhi.n	80355be <_strtoul_l.constprop.0+0xa2>
 80355ba:	3c37      	subs	r4, #55	@ 0x37
 80355bc:	e7dc      	b.n	8035578 <_strtoul_l.constprop.0+0x5c>
 80355be:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80355c2:	f1bc 0f19 	cmp.w	ip, #25
 80355c6:	d804      	bhi.n	80355d2 <_strtoul_l.constprop.0+0xb6>
 80355c8:	3c57      	subs	r4, #87	@ 0x57
 80355ca:	e7d5      	b.n	8035578 <_strtoul_l.constprop.0+0x5c>
 80355cc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80355d0:	e7df      	b.n	8035592 <_strtoul_l.constprop.0+0x76>
 80355d2:	1c73      	adds	r3, r6, #1
 80355d4:	d106      	bne.n	80355e4 <_strtoul_l.constprop.0+0xc8>
 80355d6:	2322      	movs	r3, #34	@ 0x22
 80355d8:	f8ce 3000 	str.w	r3, [lr]
 80355dc:	4630      	mov	r0, r6
 80355de:	b932      	cbnz	r2, 80355ee <_strtoul_l.constprop.0+0xd2>
 80355e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80355e4:	b107      	cbz	r7, 80355e8 <_strtoul_l.constprop.0+0xcc>
 80355e6:	4240      	negs	r0, r0
 80355e8:	2a00      	cmp	r2, #0
 80355ea:	d0f9      	beq.n	80355e0 <_strtoul_l.constprop.0+0xc4>
 80355ec:	b106      	cbz	r6, 80355f0 <_strtoul_l.constprop.0+0xd4>
 80355ee:	1e69      	subs	r1, r5, #1
 80355f0:	6011      	str	r1, [r2, #0]
 80355f2:	e7f5      	b.n	80355e0 <_strtoul_l.constprop.0+0xc4>
 80355f4:	0803c8dd 	.word	0x0803c8dd

080355f8 <_strtoul_r>:
 80355f8:	f7ff bf90 	b.w	803551c <_strtoul_l.constprop.0>

080355fc <strtoul>:
 80355fc:	4613      	mov	r3, r2
 80355fe:	460a      	mov	r2, r1
 8035600:	4601      	mov	r1, r0
 8035602:	4802      	ldr	r0, [pc, #8]	@ (803560c <strtoul+0x10>)
 8035604:	6800      	ldr	r0, [r0, #0]
 8035606:	f7ff bf89 	b.w	803551c <_strtoul_l.constprop.0>
 803560a:	bf00      	nop
 803560c:	200002d8 	.word	0x200002d8

08035610 <__submore>:
 8035610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035614:	460c      	mov	r4, r1
 8035616:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8035618:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803561c:	4299      	cmp	r1, r3
 803561e:	d11d      	bne.n	803565c <__submore+0x4c>
 8035620:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8035624:	f7f9 ffba 	bl	802f59c <_malloc_r>
 8035628:	b918      	cbnz	r0, 8035632 <__submore+0x22>
 803562a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803562e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8035632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8035636:	6363      	str	r3, [r4, #52]	@ 0x34
 8035638:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 803563c:	6320      	str	r0, [r4, #48]	@ 0x30
 803563e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8035642:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8035646:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 803564a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 803564e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8035652:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8035656:	6020      	str	r0, [r4, #0]
 8035658:	2000      	movs	r0, #0
 803565a:	e7e8      	b.n	803562e <__submore+0x1e>
 803565c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 803565e:	0077      	lsls	r7, r6, #1
 8035660:	463a      	mov	r2, r7
 8035662:	f7fe ffab 	bl	80345bc <_realloc_r>
 8035666:	4605      	mov	r5, r0
 8035668:	2800      	cmp	r0, #0
 803566a:	d0de      	beq.n	803562a <__submore+0x1a>
 803566c:	eb00 0806 	add.w	r8, r0, r6
 8035670:	4601      	mov	r1, r0
 8035672:	4632      	mov	r2, r6
 8035674:	4640      	mov	r0, r8
 8035676:	f7f8 ff77 	bl	802e568 <memcpy>
 803567a:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 803567e:	f8c4 8000 	str.w	r8, [r4]
 8035682:	e7e9      	b.n	8035658 <__submore+0x48>

08035684 <__ascii_wctomb>:
 8035684:	4603      	mov	r3, r0
 8035686:	4608      	mov	r0, r1
 8035688:	b141      	cbz	r1, 803569c <__ascii_wctomb+0x18>
 803568a:	2aff      	cmp	r2, #255	@ 0xff
 803568c:	d904      	bls.n	8035698 <__ascii_wctomb+0x14>
 803568e:	228a      	movs	r2, #138	@ 0x8a
 8035690:	601a      	str	r2, [r3, #0]
 8035692:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035696:	4770      	bx	lr
 8035698:	700a      	strb	r2, [r1, #0]
 803569a:	2001      	movs	r0, #1
 803569c:	4770      	bx	lr

0803569e <__swbuf_r>:
 803569e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80356a0:	460e      	mov	r6, r1
 80356a2:	4614      	mov	r4, r2
 80356a4:	4605      	mov	r5, r0
 80356a6:	b118      	cbz	r0, 80356b0 <__swbuf_r+0x12>
 80356a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80356aa:	b90b      	cbnz	r3, 80356b0 <__swbuf_r+0x12>
 80356ac:	f7f7 fa7a 	bl	802cba4 <__sinit>
 80356b0:	69a3      	ldr	r3, [r4, #24]
 80356b2:	60a3      	str	r3, [r4, #8]
 80356b4:	89a3      	ldrh	r3, [r4, #12]
 80356b6:	0719      	lsls	r1, r3, #28
 80356b8:	d501      	bpl.n	80356be <__swbuf_r+0x20>
 80356ba:	6923      	ldr	r3, [r4, #16]
 80356bc:	b943      	cbnz	r3, 80356d0 <__swbuf_r+0x32>
 80356be:	4621      	mov	r1, r4
 80356c0:	4628      	mov	r0, r5
 80356c2:	f7f7 fc2b 	bl	802cf1c <__swsetup_r>
 80356c6:	b118      	cbz	r0, 80356d0 <__swbuf_r+0x32>
 80356c8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80356cc:	4638      	mov	r0, r7
 80356ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80356d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80356d4:	b2f6      	uxtb	r6, r6
 80356d6:	049a      	lsls	r2, r3, #18
 80356d8:	4637      	mov	r7, r6
 80356da:	d406      	bmi.n	80356ea <__swbuf_r+0x4c>
 80356dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80356e0:	81a3      	strh	r3, [r4, #12]
 80356e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80356e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80356e8:	6663      	str	r3, [r4, #100]	@ 0x64
 80356ea:	6823      	ldr	r3, [r4, #0]
 80356ec:	6922      	ldr	r2, [r4, #16]
 80356ee:	1a98      	subs	r0, r3, r2
 80356f0:	6963      	ldr	r3, [r4, #20]
 80356f2:	4283      	cmp	r3, r0
 80356f4:	dc05      	bgt.n	8035702 <__swbuf_r+0x64>
 80356f6:	4621      	mov	r1, r4
 80356f8:	4628      	mov	r0, r5
 80356fa:	f7f7 f911 	bl	802c920 <_fflush_r>
 80356fe:	2800      	cmp	r0, #0
 8035700:	d1e2      	bne.n	80356c8 <__swbuf_r+0x2a>
 8035702:	68a3      	ldr	r3, [r4, #8]
 8035704:	3b01      	subs	r3, #1
 8035706:	60a3      	str	r3, [r4, #8]
 8035708:	6823      	ldr	r3, [r4, #0]
 803570a:	1c5a      	adds	r2, r3, #1
 803570c:	6022      	str	r2, [r4, #0]
 803570e:	701e      	strb	r6, [r3, #0]
 8035710:	6962      	ldr	r2, [r4, #20]
 8035712:	1c43      	adds	r3, r0, #1
 8035714:	429a      	cmp	r2, r3
 8035716:	d004      	beq.n	8035722 <__swbuf_r+0x84>
 8035718:	89a3      	ldrh	r3, [r4, #12]
 803571a:	07db      	lsls	r3, r3, #31
 803571c:	d5d6      	bpl.n	80356cc <__swbuf_r+0x2e>
 803571e:	2e0a      	cmp	r6, #10
 8035720:	d1d4      	bne.n	80356cc <__swbuf_r+0x2e>
 8035722:	4621      	mov	r1, r4
 8035724:	4628      	mov	r0, r5
 8035726:	f7f7 f8fb 	bl	802c920 <_fflush_r>
 803572a:	2800      	cmp	r0, #0
 803572c:	d0ce      	beq.n	80356cc <__swbuf_r+0x2e>
 803572e:	e7cb      	b.n	80356c8 <__swbuf_r+0x2a>

08035730 <_raise_r>:
 8035730:	291f      	cmp	r1, #31
 8035732:	b538      	push	{r3, r4, r5, lr}
 8035734:	4605      	mov	r5, r0
 8035736:	460c      	mov	r4, r1
 8035738:	d904      	bls.n	8035744 <_raise_r+0x14>
 803573a:	2316      	movs	r3, #22
 803573c:	6003      	str	r3, [r0, #0]
 803573e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035742:	bd38      	pop	{r3, r4, r5, pc}
 8035744:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8035748:	b112      	cbz	r2, 8035750 <_raise_r+0x20>
 803574a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803574e:	b94b      	cbnz	r3, 8035764 <_raise_r+0x34>
 8035750:	4628      	mov	r0, r5
 8035752:	f000 f8fd 	bl	8035950 <_getpid_r>
 8035756:	4622      	mov	r2, r4
 8035758:	4601      	mov	r1, r0
 803575a:	4628      	mov	r0, r5
 803575c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8035760:	f000 b8e4 	b.w	803592c <_kill_r>
 8035764:	2b01      	cmp	r3, #1
 8035766:	d00a      	beq.n	803577e <_raise_r+0x4e>
 8035768:	1c59      	adds	r1, r3, #1
 803576a:	d103      	bne.n	8035774 <_raise_r+0x44>
 803576c:	2316      	movs	r3, #22
 803576e:	6003      	str	r3, [r0, #0]
 8035770:	2001      	movs	r0, #1
 8035772:	e7e6      	b.n	8035742 <_raise_r+0x12>
 8035774:	2100      	movs	r1, #0
 8035776:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 803577a:	4620      	mov	r0, r4
 803577c:	4798      	blx	r3
 803577e:	2000      	movs	r0, #0
 8035780:	e7df      	b.n	8035742 <_raise_r+0x12>
	...

08035784 <raise>:
 8035784:	4b02      	ldr	r3, [pc, #8]	@ (8035790 <raise+0xc>)
 8035786:	4601      	mov	r1, r0
 8035788:	6818      	ldr	r0, [r3, #0]
 803578a:	f7ff bfd1 	b.w	8035730 <_raise_r>
 803578e:	bf00      	nop
 8035790:	200002d8 	.word	0x200002d8

08035794 <__gettzinfo>:
 8035794:	4800      	ldr	r0, [pc, #0]	@ (8035798 <__gettzinfo+0x4>)
 8035796:	4770      	bx	lr
 8035798:	20000818 	.word	0x20000818

0803579c <gmtime_r>:
 803579c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80357a0:	4a4d      	ldr	r2, [pc, #308]	@ (80358d8 <gmtime_r+0x13c>)
 80357a2:	460c      	mov	r4, r1
 80357a4:	2300      	movs	r3, #0
 80357a6:	e9d0 0100 	ldrd	r0, r1, [r0]
 80357aa:	f7db fa85 	bl	8010cb8 <__aeabi_ldivmod>
 80357ae:	2a00      	cmp	r2, #0
 80357b0:	bfbc      	itt	lt
 80357b2:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 80357b6:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 80357ba:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80357be:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 80357c2:	fbb2 f3f1 	udiv	r3, r2, r1
 80357c6:	fb01 2213 	mls	r2, r1, r3, r2
 80357ca:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 80357ce:	bfac      	ite	ge
 80357d0:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 80357d4:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 80357d8:	60a3      	str	r3, [r4, #8]
 80357da:	fbb2 f3f1 	udiv	r3, r2, r1
 80357de:	fb01 2213 	mls	r2, r1, r3, r2
 80357e2:	6063      	str	r3, [r4, #4]
 80357e4:	6022      	str	r2, [r4, #0]
 80357e6:	1cc3      	adds	r3, r0, #3
 80357e8:	2207      	movs	r2, #7
 80357ea:	fb93 f2f2 	sdiv	r2, r3, r2
 80357ee:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80357f2:	1a9b      	subs	r3, r3, r2
 80357f4:	bf48      	it	mi
 80357f6:	3307      	addmi	r3, #7
 80357f8:	2800      	cmp	r0, #0
 80357fa:	61a3      	str	r3, [r4, #24]
 80357fc:	bfb8      	it	lt
 80357fe:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8035802:	4936      	ldr	r1, [pc, #216]	@ (80358dc <gmtime_r+0x140>)
 8035804:	bfae      	itee	ge
 8035806:	fb90 f1f1 	sdivge	r1, r0, r1
 803580a:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 803580e:	fb93 f1f1 	sdivlt	r1, r3, r1
 8035812:	4b33      	ldr	r3, [pc, #204]	@ (80358e0 <gmtime_r+0x144>)
 8035814:	fb03 0001 	mla	r0, r3, r1, r0
 8035818:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 803581c:	fbb0 f3f3 	udiv	r3, r0, r3
 8035820:	4403      	add	r3, r0
 8035822:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8035826:	fbb0 f2fc 	udiv	r2, r0, ip
 803582a:	1a9b      	subs	r3, r3, r2
 803582c:	f240 176d 	movw	r7, #365	@ 0x16d
 8035830:	4a2c      	ldr	r2, [pc, #176]	@ (80358e4 <gmtime_r+0x148>)
 8035832:	fbb0 f2f2 	udiv	r2, r0, r2
 8035836:	2664      	movs	r6, #100	@ 0x64
 8035838:	1a9b      	subs	r3, r3, r2
 803583a:	fbb3 f2f7 	udiv	r2, r3, r7
 803583e:	fbb3 f3fc 	udiv	r3, r3, ip
 8035842:	fbb2 f5f6 	udiv	r5, r2, r6
 8035846:	1aeb      	subs	r3, r5, r3
 8035848:	4403      	add	r3, r0
 803584a:	fb07 3312 	mls	r3, r7, r2, r3
 803584e:	2099      	movs	r0, #153	@ 0x99
 8035850:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8035854:	3702      	adds	r7, #2
 8035856:	f103 0e01 	add.w	lr, r3, #1
 803585a:	fbb7 fcf0 	udiv	ip, r7, r0
 803585e:	fb00 f00c 	mul.w	r0, r0, ip
 8035862:	3002      	adds	r0, #2
 8035864:	f04f 0805 	mov.w	r8, #5
 8035868:	fbb0 f0f8 	udiv	r0, r0, r8
 803586c:	ebae 0000 	sub.w	r0, lr, r0
 8035870:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8035874:	4577      	cmp	r7, lr
 8035876:	bf8c      	ite	hi
 8035878:	f06f 0709 	mvnhi.w	r7, #9
 803587c:	2702      	movls	r7, #2
 803587e:	4467      	add	r7, ip
 8035880:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8035884:	fb0c 2101 	mla	r1, ip, r1, r2
 8035888:	2f01      	cmp	r7, #1
 803588a:	bf98      	it	ls
 803588c:	3101      	addls	r1, #1
 803588e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8035892:	d30c      	bcc.n	80358ae <gmtime_r+0x112>
 8035894:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8035898:	61e3      	str	r3, [r4, #28]
 803589a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 803589e:	2300      	movs	r3, #0
 80358a0:	60e0      	str	r0, [r4, #12]
 80358a2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80358a6:	6223      	str	r3, [r4, #32]
 80358a8:	4620      	mov	r0, r4
 80358aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80358ae:	f012 0f03 	tst.w	r2, #3
 80358b2:	d102      	bne.n	80358ba <gmtime_r+0x11e>
 80358b4:	fb06 2515 	mls	r5, r6, r5, r2
 80358b8:	b95d      	cbnz	r5, 80358d2 <gmtime_r+0x136>
 80358ba:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 80358be:	fbb2 f6f5 	udiv	r6, r2, r5
 80358c2:	fb05 2216 	mls	r2, r5, r6, r2
 80358c6:	fab2 f282 	clz	r2, r2
 80358ca:	0952      	lsrs	r2, r2, #5
 80358cc:	333b      	adds	r3, #59	@ 0x3b
 80358ce:	4413      	add	r3, r2
 80358d0:	e7e2      	b.n	8035898 <gmtime_r+0xfc>
 80358d2:	2201      	movs	r2, #1
 80358d4:	e7fa      	b.n	80358cc <gmtime_r+0x130>
 80358d6:	bf00      	nop
 80358d8:	00015180 	.word	0x00015180
 80358dc:	00023ab1 	.word	0x00023ab1
 80358e0:	fffdc54f 	.word	0xfffdc54f
 80358e4:	00023ab0 	.word	0x00023ab0

080358e8 <_fstat_r>:
 80358e8:	b538      	push	{r3, r4, r5, lr}
 80358ea:	4d07      	ldr	r5, [pc, #28]	@ (8035908 <_fstat_r+0x20>)
 80358ec:	2300      	movs	r3, #0
 80358ee:	4604      	mov	r4, r0
 80358f0:	4608      	mov	r0, r1
 80358f2:	4611      	mov	r1, r2
 80358f4:	602b      	str	r3, [r5, #0]
 80358f6:	f7dc fef4 	bl	80126e2 <_fstat>
 80358fa:	1c43      	adds	r3, r0, #1
 80358fc:	d102      	bne.n	8035904 <_fstat_r+0x1c>
 80358fe:	682b      	ldr	r3, [r5, #0]
 8035900:	b103      	cbz	r3, 8035904 <_fstat_r+0x1c>
 8035902:	6023      	str	r3, [r4, #0]
 8035904:	bd38      	pop	{r3, r4, r5, pc}
 8035906:	bf00      	nop
 8035908:	2001a0e4 	.word	0x2001a0e4

0803590c <_isatty_r>:
 803590c:	b538      	push	{r3, r4, r5, lr}
 803590e:	4d06      	ldr	r5, [pc, #24]	@ (8035928 <_isatty_r+0x1c>)
 8035910:	2300      	movs	r3, #0
 8035912:	4604      	mov	r4, r0
 8035914:	4608      	mov	r0, r1
 8035916:	602b      	str	r3, [r5, #0]
 8035918:	f7dc fee8 	bl	80126ec <_isatty>
 803591c:	1c43      	adds	r3, r0, #1
 803591e:	d102      	bne.n	8035926 <_isatty_r+0x1a>
 8035920:	682b      	ldr	r3, [r5, #0]
 8035922:	b103      	cbz	r3, 8035926 <_isatty_r+0x1a>
 8035924:	6023      	str	r3, [r4, #0]
 8035926:	bd38      	pop	{r3, r4, r5, pc}
 8035928:	2001a0e4 	.word	0x2001a0e4

0803592c <_kill_r>:
 803592c:	b538      	push	{r3, r4, r5, lr}
 803592e:	4d07      	ldr	r5, [pc, #28]	@ (803594c <_kill_r+0x20>)
 8035930:	2300      	movs	r3, #0
 8035932:	4604      	mov	r4, r0
 8035934:	4608      	mov	r0, r1
 8035936:	4611      	mov	r1, r2
 8035938:	602b      	str	r3, [r5, #0]
 803593a:	f7dc fea3 	bl	8012684 <_kill>
 803593e:	1c43      	adds	r3, r0, #1
 8035940:	d102      	bne.n	8035948 <_kill_r+0x1c>
 8035942:	682b      	ldr	r3, [r5, #0]
 8035944:	b103      	cbz	r3, 8035948 <_kill_r+0x1c>
 8035946:	6023      	str	r3, [r4, #0]
 8035948:	bd38      	pop	{r3, r4, r5, pc}
 803594a:	bf00      	nop
 803594c:	2001a0e4 	.word	0x2001a0e4

08035950 <_getpid_r>:
 8035950:	f7dc be96 	b.w	8012680 <_getpid>

08035954 <_sbrk_r>:
 8035954:	b538      	push	{r3, r4, r5, lr}
 8035956:	4d06      	ldr	r5, [pc, #24]	@ (8035970 <_sbrk_r+0x1c>)
 8035958:	2300      	movs	r3, #0
 803595a:	4604      	mov	r4, r0
 803595c:	4608      	mov	r0, r1
 803595e:	602b      	str	r3, [r5, #0]
 8035960:	f7dc fec8 	bl	80126f4 <_sbrk>
 8035964:	1c43      	adds	r3, r0, #1
 8035966:	d102      	bne.n	803596e <_sbrk_r+0x1a>
 8035968:	682b      	ldr	r3, [r5, #0]
 803596a:	b103      	cbz	r3, 803596e <_sbrk_r+0x1a>
 803596c:	6023      	str	r3, [r4, #0]
 803596e:	bd38      	pop	{r3, r4, r5, pc}
 8035970:	2001a0e4 	.word	0x2001a0e4

08035974 <sysconf>:
 8035974:	2808      	cmp	r0, #8
 8035976:	b508      	push	{r3, lr}
 8035978:	d006      	beq.n	8035988 <sysconf+0x14>
 803597a:	f7f8 fdbd 	bl	802e4f8 <__errno>
 803597e:	2316      	movs	r3, #22
 8035980:	6003      	str	r3, [r0, #0]
 8035982:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035986:	bd08      	pop	{r3, pc}
 8035988:	2080      	movs	r0, #128	@ 0x80
 803598a:	e7fc      	b.n	8035986 <sysconf+0x12>

0803598c <_strtoll_l.constprop.0>:
 803598c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035990:	b085      	sub	sp, #20
 8035992:	4690      	mov	r8, r2
 8035994:	4a43      	ldr	r2, [pc, #268]	@ (8035aa4 <_strtoll_l.constprop.0+0x118>)
 8035996:	9002      	str	r0, [sp, #8]
 8035998:	4689      	mov	r9, r1
 803599a:	461e      	mov	r6, r3
 803599c:	460d      	mov	r5, r1
 803599e:	462b      	mov	r3, r5
 80359a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80359a4:	5d17      	ldrb	r7, [r2, r4]
 80359a6:	f017 0708 	ands.w	r7, r7, #8
 80359aa:	d1f8      	bne.n	803599e <_strtoll_l.constprop.0+0x12>
 80359ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80359ae:	d149      	bne.n	8035a44 <_strtoll_l.constprop.0+0xb8>
 80359b0:	782c      	ldrb	r4, [r5, #0]
 80359b2:	2701      	movs	r7, #1
 80359b4:	1c9d      	adds	r5, r3, #2
 80359b6:	f036 0310 	bics.w	r3, r6, #16
 80359ba:	d109      	bne.n	80359d0 <_strtoll_l.constprop.0+0x44>
 80359bc:	2c30      	cmp	r4, #48	@ 0x30
 80359be:	d146      	bne.n	8035a4e <_strtoll_l.constprop.0+0xc2>
 80359c0:	782b      	ldrb	r3, [r5, #0]
 80359c2:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80359c6:	2b58      	cmp	r3, #88	@ 0x58
 80359c8:	d141      	bne.n	8035a4e <_strtoll_l.constprop.0+0xc2>
 80359ca:	786c      	ldrb	r4, [r5, #1]
 80359cc:	2610      	movs	r6, #16
 80359ce:	3502      	adds	r5, #2
 80359d0:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 80359d4:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 80359d8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80359dc:	17f3      	asrs	r3, r6, #31
 80359de:	4632      	mov	r2, r6
 80359e0:	4658      	mov	r0, fp
 80359e2:	4651      	mov	r1, sl
 80359e4:	9303      	str	r3, [sp, #12]
 80359e6:	f7db f9b7 	bl	8010d58 <__aeabi_uldivmod>
 80359ea:	9201      	str	r2, [sp, #4]
 80359ec:	2200      	movs	r2, #0
 80359ee:	468e      	mov	lr, r1
 80359f0:	4684      	mov	ip, r0
 80359f2:	4611      	mov	r1, r2
 80359f4:	4610      	mov	r0, r2
 80359f6:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80359fa:	2b09      	cmp	r3, #9
 80359fc:	d905      	bls.n	8035a0a <_strtoll_l.constprop.0+0x7e>
 80359fe:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8035a02:	2b19      	cmp	r3, #25
 8035a04:	d82a      	bhi.n	8035a5c <_strtoll_l.constprop.0+0xd0>
 8035a06:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 8035a0a:	429e      	cmp	r6, r3
 8035a0c:	dd30      	ble.n	8035a70 <_strtoll_l.constprop.0+0xe4>
 8035a0e:	1c54      	adds	r4, r2, #1
 8035a10:	d015      	beq.n	8035a3e <_strtoll_l.constprop.0+0xb2>
 8035a12:	4584      	cmp	ip, r0
 8035a14:	eb7e 0201 	sbcs.w	r2, lr, r1
 8035a18:	d327      	bcc.n	8035a6a <_strtoll_l.constprop.0+0xde>
 8035a1a:	458e      	cmp	lr, r1
 8035a1c:	bf08      	it	eq
 8035a1e:	4584      	cmpeq	ip, r0
 8035a20:	d102      	bne.n	8035a28 <_strtoll_l.constprop.0+0x9c>
 8035a22:	9a01      	ldr	r2, [sp, #4]
 8035a24:	429a      	cmp	r2, r3
 8035a26:	db20      	blt.n	8035a6a <_strtoll_l.constprop.0+0xde>
 8035a28:	9a03      	ldr	r2, [sp, #12]
 8035a2a:	4371      	muls	r1, r6
 8035a2c:	fb00 1102 	mla	r1, r0, r2, r1
 8035a30:	fba6 0200 	umull	r0, r2, r6, r0
 8035a34:	440a      	add	r2, r1
 8035a36:	1818      	adds	r0, r3, r0
 8035a38:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 8035a3c:	2201      	movs	r2, #1
 8035a3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035a42:	e7d8      	b.n	80359f6 <_strtoll_l.constprop.0+0x6a>
 8035a44:	2c2b      	cmp	r4, #43	@ 0x2b
 8035a46:	bf04      	itt	eq
 8035a48:	782c      	ldrbeq	r4, [r5, #0]
 8035a4a:	1c9d      	addeq	r5, r3, #2
 8035a4c:	e7b3      	b.n	80359b6 <_strtoll_l.constprop.0+0x2a>
 8035a4e:	2e00      	cmp	r6, #0
 8035a50:	d1be      	bne.n	80359d0 <_strtoll_l.constprop.0+0x44>
 8035a52:	2c30      	cmp	r4, #48	@ 0x30
 8035a54:	bf0c      	ite	eq
 8035a56:	2608      	moveq	r6, #8
 8035a58:	260a      	movne	r6, #10
 8035a5a:	e7b9      	b.n	80359d0 <_strtoll_l.constprop.0+0x44>
 8035a5c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8035a60:	2b19      	cmp	r3, #25
 8035a62:	d805      	bhi.n	8035a70 <_strtoll_l.constprop.0+0xe4>
 8035a64:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 8035a68:	e7cf      	b.n	8035a0a <_strtoll_l.constprop.0+0x7e>
 8035a6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8035a6e:	e7e6      	b.n	8035a3e <_strtoll_l.constprop.0+0xb2>
 8035a70:	1c53      	adds	r3, r2, #1
 8035a72:	d10a      	bne.n	8035a8a <_strtoll_l.constprop.0+0xfe>
 8035a74:	9a02      	ldr	r2, [sp, #8]
 8035a76:	2322      	movs	r3, #34	@ 0x22
 8035a78:	6013      	str	r3, [r2, #0]
 8035a7a:	4658      	mov	r0, fp
 8035a7c:	4651      	mov	r1, sl
 8035a7e:	f1b8 0f00 	cmp.w	r8, #0
 8035a82:	d10a      	bne.n	8035a9a <_strtoll_l.constprop.0+0x10e>
 8035a84:	b005      	add	sp, #20
 8035a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035a8a:	b117      	cbz	r7, 8035a92 <_strtoll_l.constprop.0+0x106>
 8035a8c:	4240      	negs	r0, r0
 8035a8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8035a92:	f1b8 0f00 	cmp.w	r8, #0
 8035a96:	d0f5      	beq.n	8035a84 <_strtoll_l.constprop.0+0xf8>
 8035a98:	b10a      	cbz	r2, 8035a9e <_strtoll_l.constprop.0+0x112>
 8035a9a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8035a9e:	f8c8 9000 	str.w	r9, [r8]
 8035aa2:	e7ef      	b.n	8035a84 <_strtoll_l.constprop.0+0xf8>
 8035aa4:	0803c8dd 	.word	0x0803c8dd

08035aa8 <_strtoll_r>:
 8035aa8:	f7ff bf70 	b.w	803598c <_strtoll_l.constprop.0>

08035aac <__libc_fini_array>:
 8035aac:	b538      	push	{r3, r4, r5, lr}
 8035aae:	4d07      	ldr	r5, [pc, #28]	@ (8035acc <__libc_fini_array+0x20>)
 8035ab0:	4c07      	ldr	r4, [pc, #28]	@ (8035ad0 <__libc_fini_array+0x24>)
 8035ab2:	1b64      	subs	r4, r4, r5
 8035ab4:	10a4      	asrs	r4, r4, #2
 8035ab6:	b91c      	cbnz	r4, 8035ac0 <__libc_fini_array+0x14>
 8035ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8035abc:	f000 bc9c 	b.w	80363f8 <_fini>
 8035ac0:	3c01      	subs	r4, #1
 8035ac2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8035ac6:	4798      	blx	r3
 8035ac8:	e7f5      	b.n	8035ab6 <__libc_fini_array+0xa>
 8035aca:	bf00      	nop
 8035acc:	0803ccf8 	.word	0x0803ccf8
 8035ad0:	0803ccfc 	.word	0x0803ccfc

08035ad4 <_strtoull_l.constprop.0>:
 8035ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035ad8:	4691      	mov	r9, r2
 8035ada:	4a48      	ldr	r2, [pc, #288]	@ (8035bfc <_strtoull_l.constprop.0+0x128>)
 8035adc:	9001      	str	r0, [sp, #4]
 8035ade:	468a      	mov	sl, r1
 8035ae0:	461e      	mov	r6, r3
 8035ae2:	460d      	mov	r5, r1
 8035ae4:	462b      	mov	r3, r5
 8035ae6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035aea:	5d17      	ldrb	r7, [r2, r4]
 8035aec:	f017 0708 	ands.w	r7, r7, #8
 8035af0:	d1f8      	bne.n	8035ae4 <_strtoull_l.constprop.0+0x10>
 8035af2:	2c2d      	cmp	r4, #45	@ 0x2d
 8035af4:	d14a      	bne.n	8035b8c <_strtoull_l.constprop.0+0xb8>
 8035af6:	782c      	ldrb	r4, [r5, #0]
 8035af8:	2701      	movs	r7, #1
 8035afa:	1c9d      	adds	r5, r3, #2
 8035afc:	f036 0310 	bics.w	r3, r6, #16
 8035b00:	d109      	bne.n	8035b16 <_strtoull_l.constprop.0+0x42>
 8035b02:	2c30      	cmp	r4, #48	@ 0x30
 8035b04:	d147      	bne.n	8035b96 <_strtoull_l.constprop.0+0xc2>
 8035b06:	782b      	ldrb	r3, [r5, #0]
 8035b08:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8035b0c:	2b58      	cmp	r3, #88	@ 0x58
 8035b0e:	d142      	bne.n	8035b96 <_strtoull_l.constprop.0+0xc2>
 8035b10:	786c      	ldrb	r4, [r5, #1]
 8035b12:	2610      	movs	r6, #16
 8035b14:	3502      	adds	r5, #2
 8035b16:	ea4f 7be6 	mov.w	fp, r6, asr #31
 8035b1a:	4632      	mov	r2, r6
 8035b1c:	465b      	mov	r3, fp
 8035b1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035b22:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8035b26:	f7db f917 	bl	8010d58 <__aeabi_uldivmod>
 8035b2a:	4632      	mov	r2, r6
 8035b2c:	9000      	str	r0, [sp, #0]
 8035b2e:	4688      	mov	r8, r1
 8035b30:	465b      	mov	r3, fp
 8035b32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035b36:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8035b3a:	f7db f90d 	bl	8010d58 <__aeabi_uldivmod>
 8035b3e:	2300      	movs	r3, #0
 8035b40:	4618      	mov	r0, r3
 8035b42:	4619      	mov	r1, r3
 8035b44:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8035b48:	f1bc 0f09 	cmp.w	ip, #9
 8035b4c:	d82a      	bhi.n	8035ba4 <_strtoull_l.constprop.0+0xd0>
 8035b4e:	4664      	mov	r4, ip
 8035b50:	42a6      	cmp	r6, r4
 8035b52:	dd38      	ble.n	8035bc6 <_strtoull_l.constprop.0+0xf2>
 8035b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8035b58:	d015      	beq.n	8035b86 <_strtoull_l.constprop.0+0xb2>
 8035b5a:	9b00      	ldr	r3, [sp, #0]
 8035b5c:	4283      	cmp	r3, r0
 8035b5e:	eb78 0301 	sbcs.w	r3, r8, r1
 8035b62:	d32d      	bcc.n	8035bc0 <_strtoull_l.constprop.0+0xec>
 8035b64:	9b00      	ldr	r3, [sp, #0]
 8035b66:	4588      	cmp	r8, r1
 8035b68:	bf08      	it	eq
 8035b6a:	4283      	cmpeq	r3, r0
 8035b6c:	d101      	bne.n	8035b72 <_strtoull_l.constprop.0+0x9e>
 8035b6e:	42a2      	cmp	r2, r4
 8035b70:	db26      	blt.n	8035bc0 <_strtoull_l.constprop.0+0xec>
 8035b72:	4371      	muls	r1, r6
 8035b74:	fb00 110b 	mla	r1, r0, fp, r1
 8035b78:	fba6 0300 	umull	r0, r3, r6, r0
 8035b7c:	4419      	add	r1, r3
 8035b7e:	1820      	adds	r0, r4, r0
 8035b80:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8035b84:	2301      	movs	r3, #1
 8035b86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035b8a:	e7db      	b.n	8035b44 <_strtoull_l.constprop.0+0x70>
 8035b8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8035b8e:	bf04      	itt	eq
 8035b90:	782c      	ldrbeq	r4, [r5, #0]
 8035b92:	1c9d      	addeq	r5, r3, #2
 8035b94:	e7b2      	b.n	8035afc <_strtoull_l.constprop.0+0x28>
 8035b96:	2e00      	cmp	r6, #0
 8035b98:	d1bd      	bne.n	8035b16 <_strtoull_l.constprop.0+0x42>
 8035b9a:	2c30      	cmp	r4, #48	@ 0x30
 8035b9c:	bf0c      	ite	eq
 8035b9e:	2608      	moveq	r6, #8
 8035ba0:	260a      	movne	r6, #10
 8035ba2:	e7b8      	b.n	8035b16 <_strtoull_l.constprop.0+0x42>
 8035ba4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8035ba8:	f1bc 0f19 	cmp.w	ip, #25
 8035bac:	d801      	bhi.n	8035bb2 <_strtoull_l.constprop.0+0xde>
 8035bae:	3c37      	subs	r4, #55	@ 0x37
 8035bb0:	e7ce      	b.n	8035b50 <_strtoull_l.constprop.0+0x7c>
 8035bb2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8035bb6:	f1bc 0f19 	cmp.w	ip, #25
 8035bba:	d804      	bhi.n	8035bc6 <_strtoull_l.constprop.0+0xf2>
 8035bbc:	3c57      	subs	r4, #87	@ 0x57
 8035bbe:	e7c7      	b.n	8035b50 <_strtoull_l.constprop.0+0x7c>
 8035bc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8035bc4:	e7df      	b.n	8035b86 <_strtoull_l.constprop.0+0xb2>
 8035bc6:	1c5a      	adds	r2, r3, #1
 8035bc8:	d10a      	bne.n	8035be0 <_strtoull_l.constprop.0+0x10c>
 8035bca:	9901      	ldr	r1, [sp, #4]
 8035bcc:	2222      	movs	r2, #34	@ 0x22
 8035bce:	600a      	str	r2, [r1, #0]
 8035bd0:	4618      	mov	r0, r3
 8035bd2:	4619      	mov	r1, r3
 8035bd4:	f1b9 0f00 	cmp.w	r9, #0
 8035bd8:	d10a      	bne.n	8035bf0 <_strtoull_l.constprop.0+0x11c>
 8035bda:	b003      	add	sp, #12
 8035bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035be0:	b117      	cbz	r7, 8035be8 <_strtoull_l.constprop.0+0x114>
 8035be2:	4240      	negs	r0, r0
 8035be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8035be8:	f1b9 0f00 	cmp.w	r9, #0
 8035bec:	d0f5      	beq.n	8035bda <_strtoull_l.constprop.0+0x106>
 8035bee:	b10b      	cbz	r3, 8035bf4 <_strtoull_l.constprop.0+0x120>
 8035bf0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8035bf4:	f8c9 a000 	str.w	sl, [r9]
 8035bf8:	e7ef      	b.n	8035bda <_strtoull_l.constprop.0+0x106>
 8035bfa:	bf00      	nop
 8035bfc:	0803c8dd 	.word	0x0803c8dd

08035c00 <_strtoull_r>:
 8035c00:	f7ff bf68 	b.w	8035ad4 <_strtoull_l.constprop.0>

08035c04 <_mbrtowc_r>:
 8035c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8035c06:	4c0a      	ldr	r4, [pc, #40]	@ (8035c30 <_mbrtowc_r+0x2c>)
 8035c08:	9e08      	ldr	r6, [sp, #32]
 8035c0a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 8035c0e:	9600      	str	r6, [sp, #0]
 8035c10:	4605      	mov	r5, r0
 8035c12:	4614      	mov	r4, r2
 8035c14:	b912      	cbnz	r2, 8035c1c <_mbrtowc_r+0x18>
 8035c16:	4a07      	ldr	r2, [pc, #28]	@ (8035c34 <_mbrtowc_r+0x30>)
 8035c18:	2301      	movs	r3, #1
 8035c1a:	4621      	mov	r1, r4
 8035c1c:	47b8      	blx	r7
 8035c1e:	1c43      	adds	r3, r0, #1
 8035c20:	bf01      	itttt	eq
 8035c22:	2300      	moveq	r3, #0
 8035c24:	6033      	streq	r3, [r6, #0]
 8035c26:	238a      	moveq	r3, #138	@ 0x8a
 8035c28:	602b      	streq	r3, [r5, #0]
 8035c2a:	b003      	add	sp, #12
 8035c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8035c2e:	bf00      	nop
 8035c30:	2000016c 	.word	0x2000016c
 8035c34:	0803c51e 	.word	0x0803c51e

08035c38 <iswspace>:
 8035c38:	2100      	movs	r1, #0
 8035c3a:	f000 b801 	b.w	8035c40 <iswspace_l>
	...

08035c40 <iswspace_l>:
 8035c40:	28ff      	cmp	r0, #255	@ 0xff
 8035c42:	bf9d      	ittte	ls
 8035c44:	4b02      	ldrls	r3, [pc, #8]	@ (8035c50 <iswspace_l+0x10>)
 8035c46:	5c18      	ldrbls	r0, [r3, r0]
 8035c48:	f000 0008 	andls.w	r0, r0, #8
 8035c4c:	2000      	movhi	r0, #0
 8035c4e:	4770      	bx	lr
 8035c50:	0803c8dd 	.word	0x0803c8dd

08035c54 <__register_exitproc>:
 8035c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8035c58:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8035cd0 <__register_exitproc+0x7c>
 8035c5c:	4606      	mov	r6, r0
 8035c5e:	f8da 0000 	ldr.w	r0, [sl]
 8035c62:	4698      	mov	r8, r3
 8035c64:	460f      	mov	r7, r1
 8035c66:	4691      	mov	r9, r2
 8035c68:	f7f8 fc7b 	bl	802e562 <__retarget_lock_acquire_recursive>
 8035c6c:	4b16      	ldr	r3, [pc, #88]	@ (8035cc8 <__register_exitproc+0x74>)
 8035c6e:	681c      	ldr	r4, [r3, #0]
 8035c70:	b90c      	cbnz	r4, 8035c76 <__register_exitproc+0x22>
 8035c72:	4c16      	ldr	r4, [pc, #88]	@ (8035ccc <__register_exitproc+0x78>)
 8035c74:	601c      	str	r4, [r3, #0]
 8035c76:	6865      	ldr	r5, [r4, #4]
 8035c78:	f8da 0000 	ldr.w	r0, [sl]
 8035c7c:	2d1f      	cmp	r5, #31
 8035c7e:	dd05      	ble.n	8035c8c <__register_exitproc+0x38>
 8035c80:	f7f8 fc71 	bl	802e566 <__retarget_lock_release_recursive>
 8035c84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8035c8c:	b19e      	cbz	r6, 8035cb6 <__register_exitproc+0x62>
 8035c8e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8035c92:	2201      	movs	r2, #1
 8035c94:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8035c98:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8035c9c:	40aa      	lsls	r2, r5
 8035c9e:	4313      	orrs	r3, r2
 8035ca0:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8035ca4:	2e02      	cmp	r6, #2
 8035ca6:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8035caa:	bf02      	ittt	eq
 8035cac:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8035cb0:	4313      	orreq	r3, r2
 8035cb2:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8035cb6:	1c6b      	adds	r3, r5, #1
 8035cb8:	3502      	adds	r5, #2
 8035cba:	6063      	str	r3, [r4, #4]
 8035cbc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8035cc0:	f7f8 fc51 	bl	802e566 <__retarget_lock_release_recursive>
 8035cc4:	2000      	movs	r0, #0
 8035cc6:	e7df      	b.n	8035c88 <__register_exitproc+0x34>
 8035cc8:	2001a0f0 	.word	0x2001a0f0
 8035ccc:	2001a128 	.word	0x2001a128
 8035cd0:	20000400 	.word	0x20000400
 8035cd4:	00000000 	.word	0x00000000

08035cd8 <nan>:
 8035cd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8035ce0 <nan+0x8>
 8035cdc:	4770      	bx	lr
 8035cde:	bf00      	nop
 8035ce0:	00000000 	.word	0x00000000
 8035ce4:	7ff80000 	.word	0x7ff80000

08035ce8 <nanf>:
 8035ce8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8035cf0 <nanf+0x8>
 8035cec:	4770      	bx	lr
 8035cee:	bf00      	nop
 8035cf0:	7fc00000 	.word	0x7fc00000

08035cf4 <_calloc_r>:
 8035cf4:	b538      	push	{r3, r4, r5, lr}
 8035cf6:	fba1 1502 	umull	r1, r5, r1, r2
 8035cfa:	b935      	cbnz	r5, 8035d0a <_calloc_r+0x16>
 8035cfc:	f7f9 fc4e 	bl	802f59c <_malloc_r>
 8035d00:	4604      	mov	r4, r0
 8035d02:	b938      	cbnz	r0, 8035d14 <_calloc_r+0x20>
 8035d04:	2400      	movs	r4, #0
 8035d06:	4620      	mov	r0, r4
 8035d08:	bd38      	pop	{r3, r4, r5, pc}
 8035d0a:	f7f8 fbf5 	bl	802e4f8 <__errno>
 8035d0e:	230c      	movs	r3, #12
 8035d10:	6003      	str	r3, [r0, #0]
 8035d12:	e7f7      	b.n	8035d04 <_calloc_r+0x10>
 8035d14:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8035d18:	f022 0203 	bic.w	r2, r2, #3
 8035d1c:	3a04      	subs	r2, #4
 8035d1e:	2a24      	cmp	r2, #36	@ 0x24
 8035d20:	d819      	bhi.n	8035d56 <_calloc_r+0x62>
 8035d22:	2a13      	cmp	r2, #19
 8035d24:	d915      	bls.n	8035d52 <_calloc_r+0x5e>
 8035d26:	2a1b      	cmp	r2, #27
 8035d28:	e9c0 5500 	strd	r5, r5, [r0]
 8035d2c:	d806      	bhi.n	8035d3c <_calloc_r+0x48>
 8035d2e:	f100 0308 	add.w	r3, r0, #8
 8035d32:	2200      	movs	r2, #0
 8035d34:	e9c3 2200 	strd	r2, r2, [r3]
 8035d38:	609a      	str	r2, [r3, #8]
 8035d3a:	e7e4      	b.n	8035d06 <_calloc_r+0x12>
 8035d3c:	2a24      	cmp	r2, #36	@ 0x24
 8035d3e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8035d42:	bf11      	iteee	ne
 8035d44:	f100 0310 	addne.w	r3, r0, #16
 8035d48:	6105      	streq	r5, [r0, #16]
 8035d4a:	f100 0318 	addeq.w	r3, r0, #24
 8035d4e:	6145      	streq	r5, [r0, #20]
 8035d50:	e7ef      	b.n	8035d32 <_calloc_r+0x3e>
 8035d52:	4603      	mov	r3, r0
 8035d54:	e7ed      	b.n	8035d32 <_calloc_r+0x3e>
 8035d56:	4629      	mov	r1, r5
 8035d58:	f7f7 f9ca 	bl	802d0f0 <memset>
 8035d5c:	e7d3      	b.n	8035d06 <_calloc_r+0x12>
	...

08035d60 <__env_lock>:
 8035d60:	4801      	ldr	r0, [pc, #4]	@ (8035d68 <__env_lock+0x8>)
 8035d62:	f7f8 bbfe 	b.w	802e562 <__retarget_lock_acquire_recursive>
 8035d66:	bf00      	nop
 8035d68:	2001a0e9 	.word	0x2001a0e9

08035d6c <__env_unlock>:
 8035d6c:	4801      	ldr	r0, [pc, #4]	@ (8035d74 <__env_unlock+0x8>)
 8035d6e:	f7f8 bbfa 	b.w	802e566 <__retarget_lock_release_recursive>
 8035d72:	bf00      	nop
 8035d74:	2001a0e9 	.word	0x2001a0e9

08035d78 <rshift>:
 8035d78:	6903      	ldr	r3, [r0, #16]
 8035d7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8035d7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8035d82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8035d86:	f100 0414 	add.w	r4, r0, #20
 8035d8a:	dd45      	ble.n	8035e18 <rshift+0xa0>
 8035d8c:	f011 011f 	ands.w	r1, r1, #31
 8035d90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8035d94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8035d98:	d10c      	bne.n	8035db4 <rshift+0x3c>
 8035d9a:	f100 0710 	add.w	r7, r0, #16
 8035d9e:	4629      	mov	r1, r5
 8035da0:	42b1      	cmp	r1, r6
 8035da2:	d334      	bcc.n	8035e0e <rshift+0x96>
 8035da4:	1a9b      	subs	r3, r3, r2
 8035da6:	009b      	lsls	r3, r3, #2
 8035da8:	1eea      	subs	r2, r5, #3
 8035daa:	4296      	cmp	r6, r2
 8035dac:	bf38      	it	cc
 8035dae:	2300      	movcc	r3, #0
 8035db0:	4423      	add	r3, r4
 8035db2:	e015      	b.n	8035de0 <rshift+0x68>
 8035db4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8035db8:	f1c1 0820 	rsb	r8, r1, #32
 8035dbc:	40cf      	lsrs	r7, r1
 8035dbe:	f105 0e04 	add.w	lr, r5, #4
 8035dc2:	46a1      	mov	r9, r4
 8035dc4:	4576      	cmp	r6, lr
 8035dc6:	46f4      	mov	ip, lr
 8035dc8:	d815      	bhi.n	8035df6 <rshift+0x7e>
 8035dca:	1a9a      	subs	r2, r3, r2
 8035dcc:	0092      	lsls	r2, r2, #2
 8035dce:	3a04      	subs	r2, #4
 8035dd0:	3501      	adds	r5, #1
 8035dd2:	42ae      	cmp	r6, r5
 8035dd4:	bf38      	it	cc
 8035dd6:	2200      	movcc	r2, #0
 8035dd8:	18a3      	adds	r3, r4, r2
 8035dda:	50a7      	str	r7, [r4, r2]
 8035ddc:	b107      	cbz	r7, 8035de0 <rshift+0x68>
 8035dde:	3304      	adds	r3, #4
 8035de0:	1b1a      	subs	r2, r3, r4
 8035de2:	42a3      	cmp	r3, r4
 8035de4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8035de8:	bf08      	it	eq
 8035dea:	2300      	moveq	r3, #0
 8035dec:	6102      	str	r2, [r0, #16]
 8035dee:	bf08      	it	eq
 8035df0:	6143      	streq	r3, [r0, #20]
 8035df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8035df6:	f8dc c000 	ldr.w	ip, [ip]
 8035dfa:	fa0c fc08 	lsl.w	ip, ip, r8
 8035dfe:	ea4c 0707 	orr.w	r7, ip, r7
 8035e02:	f849 7b04 	str.w	r7, [r9], #4
 8035e06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8035e0a:	40cf      	lsrs	r7, r1
 8035e0c:	e7da      	b.n	8035dc4 <rshift+0x4c>
 8035e0e:	f851 cb04 	ldr.w	ip, [r1], #4
 8035e12:	f847 cf04 	str.w	ip, [r7, #4]!
 8035e16:	e7c3      	b.n	8035da0 <rshift+0x28>
 8035e18:	4623      	mov	r3, r4
 8035e1a:	e7e1      	b.n	8035de0 <rshift+0x68>

08035e1c <__hexdig_fun>:
 8035e1c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8035e20:	2b09      	cmp	r3, #9
 8035e22:	d802      	bhi.n	8035e2a <__hexdig_fun+0xe>
 8035e24:	3820      	subs	r0, #32
 8035e26:	b2c0      	uxtb	r0, r0
 8035e28:	4770      	bx	lr
 8035e2a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8035e2e:	2b05      	cmp	r3, #5
 8035e30:	d801      	bhi.n	8035e36 <__hexdig_fun+0x1a>
 8035e32:	3847      	subs	r0, #71	@ 0x47
 8035e34:	e7f7      	b.n	8035e26 <__hexdig_fun+0xa>
 8035e36:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8035e3a:	2b05      	cmp	r3, #5
 8035e3c:	d801      	bhi.n	8035e42 <__hexdig_fun+0x26>
 8035e3e:	3827      	subs	r0, #39	@ 0x27
 8035e40:	e7f1      	b.n	8035e26 <__hexdig_fun+0xa>
 8035e42:	2000      	movs	r0, #0
 8035e44:	4770      	bx	lr
	...

08035e48 <__gethex>:
 8035e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035e4c:	b085      	sub	sp, #20
 8035e4e:	468a      	mov	sl, r1
 8035e50:	9302      	str	r3, [sp, #8]
 8035e52:	680b      	ldr	r3, [r1, #0]
 8035e54:	9001      	str	r0, [sp, #4]
 8035e56:	4690      	mov	r8, r2
 8035e58:	1c9c      	adds	r4, r3, #2
 8035e5a:	46a1      	mov	r9, r4
 8035e5c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8035e60:	2830      	cmp	r0, #48	@ 0x30
 8035e62:	d0fa      	beq.n	8035e5a <__gethex+0x12>
 8035e64:	eba9 0303 	sub.w	r3, r9, r3
 8035e68:	f1a3 0b02 	sub.w	fp, r3, #2
 8035e6c:	f7ff ffd6 	bl	8035e1c <__hexdig_fun>
 8035e70:	4605      	mov	r5, r0
 8035e72:	2800      	cmp	r0, #0
 8035e74:	d168      	bne.n	8035f48 <__gethex+0x100>
 8035e76:	49a0      	ldr	r1, [pc, #640]	@ (80360f8 <__gethex+0x2b0>)
 8035e78:	2201      	movs	r2, #1
 8035e7a:	4648      	mov	r0, r9
 8035e7c:	f7f7 f96d 	bl	802d15a <strncmp>
 8035e80:	4607      	mov	r7, r0
 8035e82:	2800      	cmp	r0, #0
 8035e84:	d167      	bne.n	8035f56 <__gethex+0x10e>
 8035e86:	f899 0001 	ldrb.w	r0, [r9, #1]
 8035e8a:	4626      	mov	r6, r4
 8035e8c:	f7ff ffc6 	bl	8035e1c <__hexdig_fun>
 8035e90:	2800      	cmp	r0, #0
 8035e92:	d062      	beq.n	8035f5a <__gethex+0x112>
 8035e94:	4623      	mov	r3, r4
 8035e96:	7818      	ldrb	r0, [r3, #0]
 8035e98:	2830      	cmp	r0, #48	@ 0x30
 8035e9a:	4699      	mov	r9, r3
 8035e9c:	f103 0301 	add.w	r3, r3, #1
 8035ea0:	d0f9      	beq.n	8035e96 <__gethex+0x4e>
 8035ea2:	f7ff ffbb 	bl	8035e1c <__hexdig_fun>
 8035ea6:	fab0 f580 	clz	r5, r0
 8035eaa:	096d      	lsrs	r5, r5, #5
 8035eac:	f04f 0b01 	mov.w	fp, #1
 8035eb0:	464a      	mov	r2, r9
 8035eb2:	4616      	mov	r6, r2
 8035eb4:	3201      	adds	r2, #1
 8035eb6:	7830      	ldrb	r0, [r6, #0]
 8035eb8:	f7ff ffb0 	bl	8035e1c <__hexdig_fun>
 8035ebc:	2800      	cmp	r0, #0
 8035ebe:	d1f8      	bne.n	8035eb2 <__gethex+0x6a>
 8035ec0:	498d      	ldr	r1, [pc, #564]	@ (80360f8 <__gethex+0x2b0>)
 8035ec2:	2201      	movs	r2, #1
 8035ec4:	4630      	mov	r0, r6
 8035ec6:	f7f7 f948 	bl	802d15a <strncmp>
 8035eca:	2800      	cmp	r0, #0
 8035ecc:	d13f      	bne.n	8035f4e <__gethex+0x106>
 8035ece:	b944      	cbnz	r4, 8035ee2 <__gethex+0x9a>
 8035ed0:	1c74      	adds	r4, r6, #1
 8035ed2:	4622      	mov	r2, r4
 8035ed4:	4616      	mov	r6, r2
 8035ed6:	3201      	adds	r2, #1
 8035ed8:	7830      	ldrb	r0, [r6, #0]
 8035eda:	f7ff ff9f 	bl	8035e1c <__hexdig_fun>
 8035ede:	2800      	cmp	r0, #0
 8035ee0:	d1f8      	bne.n	8035ed4 <__gethex+0x8c>
 8035ee2:	1ba4      	subs	r4, r4, r6
 8035ee4:	00a7      	lsls	r7, r4, #2
 8035ee6:	7833      	ldrb	r3, [r6, #0]
 8035ee8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8035eec:	2b50      	cmp	r3, #80	@ 0x50
 8035eee:	d13e      	bne.n	8035f6e <__gethex+0x126>
 8035ef0:	7873      	ldrb	r3, [r6, #1]
 8035ef2:	2b2b      	cmp	r3, #43	@ 0x2b
 8035ef4:	d033      	beq.n	8035f5e <__gethex+0x116>
 8035ef6:	2b2d      	cmp	r3, #45	@ 0x2d
 8035ef8:	d034      	beq.n	8035f64 <__gethex+0x11c>
 8035efa:	1c71      	adds	r1, r6, #1
 8035efc:	2400      	movs	r4, #0
 8035efe:	7808      	ldrb	r0, [r1, #0]
 8035f00:	f7ff ff8c 	bl	8035e1c <__hexdig_fun>
 8035f04:	1e43      	subs	r3, r0, #1
 8035f06:	b2db      	uxtb	r3, r3
 8035f08:	2b18      	cmp	r3, #24
 8035f0a:	d830      	bhi.n	8035f6e <__gethex+0x126>
 8035f0c:	f1a0 0210 	sub.w	r2, r0, #16
 8035f10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8035f14:	f7ff ff82 	bl	8035e1c <__hexdig_fun>
 8035f18:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8035f1c:	fa5f fc8c 	uxtb.w	ip, ip
 8035f20:	f1bc 0f18 	cmp.w	ip, #24
 8035f24:	f04f 030a 	mov.w	r3, #10
 8035f28:	d91e      	bls.n	8035f68 <__gethex+0x120>
 8035f2a:	b104      	cbz	r4, 8035f2e <__gethex+0xe6>
 8035f2c:	4252      	negs	r2, r2
 8035f2e:	4417      	add	r7, r2
 8035f30:	f8ca 1000 	str.w	r1, [sl]
 8035f34:	b1ed      	cbz	r5, 8035f72 <__gethex+0x12a>
 8035f36:	f1bb 0f00 	cmp.w	fp, #0
 8035f3a:	bf0c      	ite	eq
 8035f3c:	2506      	moveq	r5, #6
 8035f3e:	2500      	movne	r5, #0
 8035f40:	4628      	mov	r0, r5
 8035f42:	b005      	add	sp, #20
 8035f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035f48:	2500      	movs	r5, #0
 8035f4a:	462c      	mov	r4, r5
 8035f4c:	e7b0      	b.n	8035eb0 <__gethex+0x68>
 8035f4e:	2c00      	cmp	r4, #0
 8035f50:	d1c7      	bne.n	8035ee2 <__gethex+0x9a>
 8035f52:	4627      	mov	r7, r4
 8035f54:	e7c7      	b.n	8035ee6 <__gethex+0x9e>
 8035f56:	464e      	mov	r6, r9
 8035f58:	462f      	mov	r7, r5
 8035f5a:	2501      	movs	r5, #1
 8035f5c:	e7c3      	b.n	8035ee6 <__gethex+0x9e>
 8035f5e:	2400      	movs	r4, #0
 8035f60:	1cb1      	adds	r1, r6, #2
 8035f62:	e7cc      	b.n	8035efe <__gethex+0xb6>
 8035f64:	2401      	movs	r4, #1
 8035f66:	e7fb      	b.n	8035f60 <__gethex+0x118>
 8035f68:	fb03 0002 	mla	r0, r3, r2, r0
 8035f6c:	e7ce      	b.n	8035f0c <__gethex+0xc4>
 8035f6e:	4631      	mov	r1, r6
 8035f70:	e7de      	b.n	8035f30 <__gethex+0xe8>
 8035f72:	eba6 0309 	sub.w	r3, r6, r9
 8035f76:	3b01      	subs	r3, #1
 8035f78:	4629      	mov	r1, r5
 8035f7a:	2b07      	cmp	r3, #7
 8035f7c:	dc0a      	bgt.n	8035f94 <__gethex+0x14c>
 8035f7e:	9801      	ldr	r0, [sp, #4]
 8035f80:	f7fd fe22 	bl	8033bc8 <_Balloc>
 8035f84:	4604      	mov	r4, r0
 8035f86:	b940      	cbnz	r0, 8035f9a <__gethex+0x152>
 8035f88:	4b5c      	ldr	r3, [pc, #368]	@ (80360fc <__gethex+0x2b4>)
 8035f8a:	4602      	mov	r2, r0
 8035f8c:	21e4      	movs	r1, #228	@ 0xe4
 8035f8e:	485c      	ldr	r0, [pc, #368]	@ (8036100 <__gethex+0x2b8>)
 8035f90:	f7f4 fb5c 	bl	802a64c <__assert_func>
 8035f94:	3101      	adds	r1, #1
 8035f96:	105b      	asrs	r3, r3, #1
 8035f98:	e7ef      	b.n	8035f7a <__gethex+0x132>
 8035f9a:	f100 0a14 	add.w	sl, r0, #20
 8035f9e:	2300      	movs	r3, #0
 8035fa0:	4655      	mov	r5, sl
 8035fa2:	469b      	mov	fp, r3
 8035fa4:	45b1      	cmp	r9, r6
 8035fa6:	d337      	bcc.n	8036018 <__gethex+0x1d0>
 8035fa8:	f845 bb04 	str.w	fp, [r5], #4
 8035fac:	eba5 050a 	sub.w	r5, r5, sl
 8035fb0:	10ad      	asrs	r5, r5, #2
 8035fb2:	6125      	str	r5, [r4, #16]
 8035fb4:	4658      	mov	r0, fp
 8035fb6:	f7fd fec5 	bl	8033d44 <__hi0bits>
 8035fba:	016d      	lsls	r5, r5, #5
 8035fbc:	f8d8 6000 	ldr.w	r6, [r8]
 8035fc0:	1a2d      	subs	r5, r5, r0
 8035fc2:	42b5      	cmp	r5, r6
 8035fc4:	dd54      	ble.n	8036070 <__gethex+0x228>
 8035fc6:	1bad      	subs	r5, r5, r6
 8035fc8:	4629      	mov	r1, r5
 8035fca:	4620      	mov	r0, r4
 8035fcc:	f7fe fa3f 	bl	803444e <__any_on>
 8035fd0:	4681      	mov	r9, r0
 8035fd2:	b178      	cbz	r0, 8035ff4 <__gethex+0x1ac>
 8035fd4:	1e6b      	subs	r3, r5, #1
 8035fd6:	1159      	asrs	r1, r3, #5
 8035fd8:	f003 021f 	and.w	r2, r3, #31
 8035fdc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8035fe0:	f04f 0901 	mov.w	r9, #1
 8035fe4:	fa09 f202 	lsl.w	r2, r9, r2
 8035fe8:	420a      	tst	r2, r1
 8035fea:	d003      	beq.n	8035ff4 <__gethex+0x1ac>
 8035fec:	454b      	cmp	r3, r9
 8035fee:	dc36      	bgt.n	803605e <__gethex+0x216>
 8035ff0:	f04f 0902 	mov.w	r9, #2
 8035ff4:	4629      	mov	r1, r5
 8035ff6:	4620      	mov	r0, r4
 8035ff8:	f7ff febe 	bl	8035d78 <rshift>
 8035ffc:	442f      	add	r7, r5
 8035ffe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8036002:	42bb      	cmp	r3, r7
 8036004:	da42      	bge.n	803608c <__gethex+0x244>
 8036006:	9801      	ldr	r0, [sp, #4]
 8036008:	4621      	mov	r1, r4
 803600a:	f7fd fe02 	bl	8033c12 <_Bfree>
 803600e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8036010:	2300      	movs	r3, #0
 8036012:	6013      	str	r3, [r2, #0]
 8036014:	25a3      	movs	r5, #163	@ 0xa3
 8036016:	e793      	b.n	8035f40 <__gethex+0xf8>
 8036018:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 803601c:	2a2e      	cmp	r2, #46	@ 0x2e
 803601e:	d012      	beq.n	8036046 <__gethex+0x1fe>
 8036020:	2b20      	cmp	r3, #32
 8036022:	d104      	bne.n	803602e <__gethex+0x1e6>
 8036024:	f845 bb04 	str.w	fp, [r5], #4
 8036028:	f04f 0b00 	mov.w	fp, #0
 803602c:	465b      	mov	r3, fp
 803602e:	7830      	ldrb	r0, [r6, #0]
 8036030:	9303      	str	r3, [sp, #12]
 8036032:	f7ff fef3 	bl	8035e1c <__hexdig_fun>
 8036036:	9b03      	ldr	r3, [sp, #12]
 8036038:	f000 000f 	and.w	r0, r0, #15
 803603c:	4098      	lsls	r0, r3
 803603e:	ea4b 0b00 	orr.w	fp, fp, r0
 8036042:	3304      	adds	r3, #4
 8036044:	e7ae      	b.n	8035fa4 <__gethex+0x15c>
 8036046:	45b1      	cmp	r9, r6
 8036048:	d8ea      	bhi.n	8036020 <__gethex+0x1d8>
 803604a:	492b      	ldr	r1, [pc, #172]	@ (80360f8 <__gethex+0x2b0>)
 803604c:	9303      	str	r3, [sp, #12]
 803604e:	2201      	movs	r2, #1
 8036050:	4630      	mov	r0, r6
 8036052:	f7f7 f882 	bl	802d15a <strncmp>
 8036056:	9b03      	ldr	r3, [sp, #12]
 8036058:	2800      	cmp	r0, #0
 803605a:	d1e1      	bne.n	8036020 <__gethex+0x1d8>
 803605c:	e7a2      	b.n	8035fa4 <__gethex+0x15c>
 803605e:	1ea9      	subs	r1, r5, #2
 8036060:	4620      	mov	r0, r4
 8036062:	f7fe f9f4 	bl	803444e <__any_on>
 8036066:	2800      	cmp	r0, #0
 8036068:	d0c2      	beq.n	8035ff0 <__gethex+0x1a8>
 803606a:	f04f 0903 	mov.w	r9, #3
 803606e:	e7c1      	b.n	8035ff4 <__gethex+0x1ac>
 8036070:	da09      	bge.n	8036086 <__gethex+0x23e>
 8036072:	1b75      	subs	r5, r6, r5
 8036074:	4621      	mov	r1, r4
 8036076:	9801      	ldr	r0, [sp, #4]
 8036078:	462a      	mov	r2, r5
 803607a:	f7fd ffaf 	bl	8033fdc <__lshift>
 803607e:	1b7f      	subs	r7, r7, r5
 8036080:	4604      	mov	r4, r0
 8036082:	f100 0a14 	add.w	sl, r0, #20
 8036086:	f04f 0900 	mov.w	r9, #0
 803608a:	e7b8      	b.n	8035ffe <__gethex+0x1b6>
 803608c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8036090:	42bd      	cmp	r5, r7
 8036092:	dd6f      	ble.n	8036174 <__gethex+0x32c>
 8036094:	1bed      	subs	r5, r5, r7
 8036096:	42ae      	cmp	r6, r5
 8036098:	dc34      	bgt.n	8036104 <__gethex+0x2bc>
 803609a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803609e:	2b02      	cmp	r3, #2
 80360a0:	d022      	beq.n	80360e8 <__gethex+0x2a0>
 80360a2:	2b03      	cmp	r3, #3
 80360a4:	d024      	beq.n	80360f0 <__gethex+0x2a8>
 80360a6:	2b01      	cmp	r3, #1
 80360a8:	d115      	bne.n	80360d6 <__gethex+0x28e>
 80360aa:	42ae      	cmp	r6, r5
 80360ac:	d113      	bne.n	80360d6 <__gethex+0x28e>
 80360ae:	2e01      	cmp	r6, #1
 80360b0:	d10b      	bne.n	80360ca <__gethex+0x282>
 80360b2:	9a02      	ldr	r2, [sp, #8]
 80360b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80360b8:	6013      	str	r3, [r2, #0]
 80360ba:	2301      	movs	r3, #1
 80360bc:	6123      	str	r3, [r4, #16]
 80360be:	f8ca 3000 	str.w	r3, [sl]
 80360c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80360c4:	2562      	movs	r5, #98	@ 0x62
 80360c6:	601c      	str	r4, [r3, #0]
 80360c8:	e73a      	b.n	8035f40 <__gethex+0xf8>
 80360ca:	1e71      	subs	r1, r6, #1
 80360cc:	4620      	mov	r0, r4
 80360ce:	f7fe f9be 	bl	803444e <__any_on>
 80360d2:	2800      	cmp	r0, #0
 80360d4:	d1ed      	bne.n	80360b2 <__gethex+0x26a>
 80360d6:	9801      	ldr	r0, [sp, #4]
 80360d8:	4621      	mov	r1, r4
 80360da:	f7fd fd9a 	bl	8033c12 <_Bfree>
 80360de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80360e0:	2300      	movs	r3, #0
 80360e2:	6013      	str	r3, [r2, #0]
 80360e4:	2550      	movs	r5, #80	@ 0x50
 80360e6:	e72b      	b.n	8035f40 <__gethex+0xf8>
 80360e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80360ea:	2b00      	cmp	r3, #0
 80360ec:	d1f3      	bne.n	80360d6 <__gethex+0x28e>
 80360ee:	e7e0      	b.n	80360b2 <__gethex+0x26a>
 80360f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80360f2:	2b00      	cmp	r3, #0
 80360f4:	d1dd      	bne.n	80360b2 <__gethex+0x26a>
 80360f6:	e7ee      	b.n	80360d6 <__gethex+0x28e>
 80360f8:	0803c6b2 	.word	0x0803c6b2
 80360fc:	0803c9ea 	.word	0x0803c9ea
 8036100:	0803cc88 	.word	0x0803cc88
 8036104:	1e6f      	subs	r7, r5, #1
 8036106:	f1b9 0f00 	cmp.w	r9, #0
 803610a:	d130      	bne.n	803616e <__gethex+0x326>
 803610c:	b127      	cbz	r7, 8036118 <__gethex+0x2d0>
 803610e:	4639      	mov	r1, r7
 8036110:	4620      	mov	r0, r4
 8036112:	f7fe f99c 	bl	803444e <__any_on>
 8036116:	4681      	mov	r9, r0
 8036118:	117a      	asrs	r2, r7, #5
 803611a:	2301      	movs	r3, #1
 803611c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8036120:	f007 071f 	and.w	r7, r7, #31
 8036124:	40bb      	lsls	r3, r7
 8036126:	4213      	tst	r3, r2
 8036128:	4629      	mov	r1, r5
 803612a:	4620      	mov	r0, r4
 803612c:	bf18      	it	ne
 803612e:	f049 0902 	orrne.w	r9, r9, #2
 8036132:	f7ff fe21 	bl	8035d78 <rshift>
 8036136:	f8d8 7004 	ldr.w	r7, [r8, #4]
 803613a:	1b76      	subs	r6, r6, r5
 803613c:	2502      	movs	r5, #2
 803613e:	f1b9 0f00 	cmp.w	r9, #0
 8036142:	d047      	beq.n	80361d4 <__gethex+0x38c>
 8036144:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8036148:	2b02      	cmp	r3, #2
 803614a:	d015      	beq.n	8036178 <__gethex+0x330>
 803614c:	2b03      	cmp	r3, #3
 803614e:	d017      	beq.n	8036180 <__gethex+0x338>
 8036150:	2b01      	cmp	r3, #1
 8036152:	d109      	bne.n	8036168 <__gethex+0x320>
 8036154:	f019 0f02 	tst.w	r9, #2
 8036158:	d006      	beq.n	8036168 <__gethex+0x320>
 803615a:	f8da 3000 	ldr.w	r3, [sl]
 803615e:	ea49 0903 	orr.w	r9, r9, r3
 8036162:	f019 0f01 	tst.w	r9, #1
 8036166:	d10e      	bne.n	8036186 <__gethex+0x33e>
 8036168:	f045 0510 	orr.w	r5, r5, #16
 803616c:	e032      	b.n	80361d4 <__gethex+0x38c>
 803616e:	f04f 0901 	mov.w	r9, #1
 8036172:	e7d1      	b.n	8036118 <__gethex+0x2d0>
 8036174:	2501      	movs	r5, #1
 8036176:	e7e2      	b.n	803613e <__gethex+0x2f6>
 8036178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803617a:	f1c3 0301 	rsb	r3, r3, #1
 803617e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8036180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036182:	2b00      	cmp	r3, #0
 8036184:	d0f0      	beq.n	8036168 <__gethex+0x320>
 8036186:	f8d4 b010 	ldr.w	fp, [r4, #16]
 803618a:	f104 0314 	add.w	r3, r4, #20
 803618e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8036192:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8036196:	f04f 0c00 	mov.w	ip, #0
 803619a:	4618      	mov	r0, r3
 803619c:	f853 2b04 	ldr.w	r2, [r3], #4
 80361a0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80361a4:	d01b      	beq.n	80361de <__gethex+0x396>
 80361a6:	3201      	adds	r2, #1
 80361a8:	6002      	str	r2, [r0, #0]
 80361aa:	2d02      	cmp	r5, #2
 80361ac:	f104 0314 	add.w	r3, r4, #20
 80361b0:	d13c      	bne.n	803622c <__gethex+0x3e4>
 80361b2:	f8d8 2000 	ldr.w	r2, [r8]
 80361b6:	3a01      	subs	r2, #1
 80361b8:	42b2      	cmp	r2, r6
 80361ba:	d109      	bne.n	80361d0 <__gethex+0x388>
 80361bc:	1171      	asrs	r1, r6, #5
 80361be:	2201      	movs	r2, #1
 80361c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80361c4:	f006 061f 	and.w	r6, r6, #31
 80361c8:	fa02 f606 	lsl.w	r6, r2, r6
 80361cc:	421e      	tst	r6, r3
 80361ce:	d13a      	bne.n	8036246 <__gethex+0x3fe>
 80361d0:	f045 0520 	orr.w	r5, r5, #32
 80361d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80361d6:	601c      	str	r4, [r3, #0]
 80361d8:	9b02      	ldr	r3, [sp, #8]
 80361da:	601f      	str	r7, [r3, #0]
 80361dc:	e6b0      	b.n	8035f40 <__gethex+0xf8>
 80361de:	4299      	cmp	r1, r3
 80361e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80361e4:	d8d9      	bhi.n	803619a <__gethex+0x352>
 80361e6:	68a3      	ldr	r3, [r4, #8]
 80361e8:	459b      	cmp	fp, r3
 80361ea:	db17      	blt.n	803621c <__gethex+0x3d4>
 80361ec:	6861      	ldr	r1, [r4, #4]
 80361ee:	9801      	ldr	r0, [sp, #4]
 80361f0:	3101      	adds	r1, #1
 80361f2:	f7fd fce9 	bl	8033bc8 <_Balloc>
 80361f6:	4681      	mov	r9, r0
 80361f8:	b918      	cbnz	r0, 8036202 <__gethex+0x3ba>
 80361fa:	4b1a      	ldr	r3, [pc, #104]	@ (8036264 <__gethex+0x41c>)
 80361fc:	4602      	mov	r2, r0
 80361fe:	2184      	movs	r1, #132	@ 0x84
 8036200:	e6c5      	b.n	8035f8e <__gethex+0x146>
 8036202:	6922      	ldr	r2, [r4, #16]
 8036204:	3202      	adds	r2, #2
 8036206:	f104 010c 	add.w	r1, r4, #12
 803620a:	0092      	lsls	r2, r2, #2
 803620c:	300c      	adds	r0, #12
 803620e:	f7f8 f9ab 	bl	802e568 <memcpy>
 8036212:	4621      	mov	r1, r4
 8036214:	9801      	ldr	r0, [sp, #4]
 8036216:	f7fd fcfc 	bl	8033c12 <_Bfree>
 803621a:	464c      	mov	r4, r9
 803621c:	6923      	ldr	r3, [r4, #16]
 803621e:	1c5a      	adds	r2, r3, #1
 8036220:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8036224:	6122      	str	r2, [r4, #16]
 8036226:	2201      	movs	r2, #1
 8036228:	615a      	str	r2, [r3, #20]
 803622a:	e7be      	b.n	80361aa <__gethex+0x362>
 803622c:	6922      	ldr	r2, [r4, #16]
 803622e:	455a      	cmp	r2, fp
 8036230:	dd0b      	ble.n	803624a <__gethex+0x402>
 8036232:	2101      	movs	r1, #1
 8036234:	4620      	mov	r0, r4
 8036236:	f7ff fd9f 	bl	8035d78 <rshift>
 803623a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 803623e:	3701      	adds	r7, #1
 8036240:	42bb      	cmp	r3, r7
 8036242:	f6ff aee0 	blt.w	8036006 <__gethex+0x1be>
 8036246:	2501      	movs	r5, #1
 8036248:	e7c2      	b.n	80361d0 <__gethex+0x388>
 803624a:	f016 061f 	ands.w	r6, r6, #31
 803624e:	d0fa      	beq.n	8036246 <__gethex+0x3fe>
 8036250:	4453      	add	r3, sl
 8036252:	f1c6 0620 	rsb	r6, r6, #32
 8036256:	f853 0c04 	ldr.w	r0, [r3, #-4]
 803625a:	f7fd fd73 	bl	8033d44 <__hi0bits>
 803625e:	42b0      	cmp	r0, r6
 8036260:	dbe7      	blt.n	8036232 <__gethex+0x3ea>
 8036262:	e7f0      	b.n	8036246 <__gethex+0x3fe>
 8036264:	0803c9ea 	.word	0x0803c9ea

08036268 <L_shift>:
 8036268:	f1c2 0208 	rsb	r2, r2, #8
 803626c:	0092      	lsls	r2, r2, #2
 803626e:	b570      	push	{r4, r5, r6, lr}
 8036270:	f1c2 0620 	rsb	r6, r2, #32
 8036274:	6843      	ldr	r3, [r0, #4]
 8036276:	6804      	ldr	r4, [r0, #0]
 8036278:	fa03 f506 	lsl.w	r5, r3, r6
 803627c:	432c      	orrs	r4, r5
 803627e:	40d3      	lsrs	r3, r2
 8036280:	6004      	str	r4, [r0, #0]
 8036282:	f840 3f04 	str.w	r3, [r0, #4]!
 8036286:	4288      	cmp	r0, r1
 8036288:	d3f4      	bcc.n	8036274 <L_shift+0xc>
 803628a:	bd70      	pop	{r4, r5, r6, pc}

0803628c <__match>:
 803628c:	b530      	push	{r4, r5, lr}
 803628e:	6803      	ldr	r3, [r0, #0]
 8036290:	3301      	adds	r3, #1
 8036292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8036296:	b914      	cbnz	r4, 803629e <__match+0x12>
 8036298:	6003      	str	r3, [r0, #0]
 803629a:	2001      	movs	r0, #1
 803629c:	bd30      	pop	{r4, r5, pc}
 803629e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80362a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80362a6:	2d19      	cmp	r5, #25
 80362a8:	bf98      	it	ls
 80362aa:	3220      	addls	r2, #32
 80362ac:	42a2      	cmp	r2, r4
 80362ae:	d0f0      	beq.n	8036292 <__match+0x6>
 80362b0:	2000      	movs	r0, #0
 80362b2:	e7f3      	b.n	803629c <__match+0x10>

080362b4 <__hexnan>:
 80362b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80362b8:	680b      	ldr	r3, [r1, #0]
 80362ba:	6801      	ldr	r1, [r0, #0]
 80362bc:	115e      	asrs	r6, r3, #5
 80362be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80362c2:	f013 031f 	ands.w	r3, r3, #31
 80362c6:	b087      	sub	sp, #28
 80362c8:	bf18      	it	ne
 80362ca:	3604      	addne	r6, #4
 80362cc:	2500      	movs	r5, #0
 80362ce:	1f37      	subs	r7, r6, #4
 80362d0:	4682      	mov	sl, r0
 80362d2:	4690      	mov	r8, r2
 80362d4:	9301      	str	r3, [sp, #4]
 80362d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80362da:	46b9      	mov	r9, r7
 80362dc:	463c      	mov	r4, r7
 80362de:	9502      	str	r5, [sp, #8]
 80362e0:	46ab      	mov	fp, r5
 80362e2:	784a      	ldrb	r2, [r1, #1]
 80362e4:	1c4b      	adds	r3, r1, #1
 80362e6:	9303      	str	r3, [sp, #12]
 80362e8:	b342      	cbz	r2, 803633c <__hexnan+0x88>
 80362ea:	4610      	mov	r0, r2
 80362ec:	9105      	str	r1, [sp, #20]
 80362ee:	9204      	str	r2, [sp, #16]
 80362f0:	f7ff fd94 	bl	8035e1c <__hexdig_fun>
 80362f4:	2800      	cmp	r0, #0
 80362f6:	d151      	bne.n	803639c <__hexnan+0xe8>
 80362f8:	9a04      	ldr	r2, [sp, #16]
 80362fa:	9905      	ldr	r1, [sp, #20]
 80362fc:	2a20      	cmp	r2, #32
 80362fe:	d818      	bhi.n	8036332 <__hexnan+0x7e>
 8036300:	9b02      	ldr	r3, [sp, #8]
 8036302:	459b      	cmp	fp, r3
 8036304:	dd13      	ble.n	803632e <__hexnan+0x7a>
 8036306:	454c      	cmp	r4, r9
 8036308:	d206      	bcs.n	8036318 <__hexnan+0x64>
 803630a:	2d07      	cmp	r5, #7
 803630c:	dc04      	bgt.n	8036318 <__hexnan+0x64>
 803630e:	462a      	mov	r2, r5
 8036310:	4649      	mov	r1, r9
 8036312:	4620      	mov	r0, r4
 8036314:	f7ff ffa8 	bl	8036268 <L_shift>
 8036318:	4544      	cmp	r4, r8
 803631a:	d952      	bls.n	80363c2 <__hexnan+0x10e>
 803631c:	2300      	movs	r3, #0
 803631e:	f1a4 0904 	sub.w	r9, r4, #4
 8036322:	f844 3c04 	str.w	r3, [r4, #-4]
 8036326:	f8cd b008 	str.w	fp, [sp, #8]
 803632a:	464c      	mov	r4, r9
 803632c:	461d      	mov	r5, r3
 803632e:	9903      	ldr	r1, [sp, #12]
 8036330:	e7d7      	b.n	80362e2 <__hexnan+0x2e>
 8036332:	2a29      	cmp	r2, #41	@ 0x29
 8036334:	d157      	bne.n	80363e6 <__hexnan+0x132>
 8036336:	3102      	adds	r1, #2
 8036338:	f8ca 1000 	str.w	r1, [sl]
 803633c:	f1bb 0f00 	cmp.w	fp, #0
 8036340:	d051      	beq.n	80363e6 <__hexnan+0x132>
 8036342:	454c      	cmp	r4, r9
 8036344:	d206      	bcs.n	8036354 <__hexnan+0xa0>
 8036346:	2d07      	cmp	r5, #7
 8036348:	dc04      	bgt.n	8036354 <__hexnan+0xa0>
 803634a:	462a      	mov	r2, r5
 803634c:	4649      	mov	r1, r9
 803634e:	4620      	mov	r0, r4
 8036350:	f7ff ff8a 	bl	8036268 <L_shift>
 8036354:	4544      	cmp	r4, r8
 8036356:	d936      	bls.n	80363c6 <__hexnan+0x112>
 8036358:	f1a8 0204 	sub.w	r2, r8, #4
 803635c:	4623      	mov	r3, r4
 803635e:	f853 1b04 	ldr.w	r1, [r3], #4
 8036362:	f842 1f04 	str.w	r1, [r2, #4]!
 8036366:	429f      	cmp	r7, r3
 8036368:	d2f9      	bcs.n	803635e <__hexnan+0xaa>
 803636a:	1b3b      	subs	r3, r7, r4
 803636c:	f023 0303 	bic.w	r3, r3, #3
 8036370:	3304      	adds	r3, #4
 8036372:	3401      	adds	r4, #1
 8036374:	3e03      	subs	r6, #3
 8036376:	42b4      	cmp	r4, r6
 8036378:	bf88      	it	hi
 803637a:	2304      	movhi	r3, #4
 803637c:	4443      	add	r3, r8
 803637e:	2200      	movs	r2, #0
 8036380:	f843 2b04 	str.w	r2, [r3], #4
 8036384:	429f      	cmp	r7, r3
 8036386:	d2fb      	bcs.n	8036380 <__hexnan+0xcc>
 8036388:	683b      	ldr	r3, [r7, #0]
 803638a:	b91b      	cbnz	r3, 8036394 <__hexnan+0xe0>
 803638c:	4547      	cmp	r7, r8
 803638e:	d128      	bne.n	80363e2 <__hexnan+0x12e>
 8036390:	2301      	movs	r3, #1
 8036392:	603b      	str	r3, [r7, #0]
 8036394:	2005      	movs	r0, #5
 8036396:	b007      	add	sp, #28
 8036398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803639c:	3501      	adds	r5, #1
 803639e:	2d08      	cmp	r5, #8
 80363a0:	f10b 0b01 	add.w	fp, fp, #1
 80363a4:	dd06      	ble.n	80363b4 <__hexnan+0x100>
 80363a6:	4544      	cmp	r4, r8
 80363a8:	d9c1      	bls.n	803632e <__hexnan+0x7a>
 80363aa:	2300      	movs	r3, #0
 80363ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80363b0:	2501      	movs	r5, #1
 80363b2:	3c04      	subs	r4, #4
 80363b4:	6822      	ldr	r2, [r4, #0]
 80363b6:	f000 000f 	and.w	r0, r0, #15
 80363ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80363be:	6020      	str	r0, [r4, #0]
 80363c0:	e7b5      	b.n	803632e <__hexnan+0x7a>
 80363c2:	2508      	movs	r5, #8
 80363c4:	e7b3      	b.n	803632e <__hexnan+0x7a>
 80363c6:	9b01      	ldr	r3, [sp, #4]
 80363c8:	2b00      	cmp	r3, #0
 80363ca:	d0dd      	beq.n	8036388 <__hexnan+0xd4>
 80363cc:	f1c3 0320 	rsb	r3, r3, #32
 80363d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80363d4:	40da      	lsrs	r2, r3
 80363d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80363da:	4013      	ands	r3, r2
 80363dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80363e0:	e7d2      	b.n	8036388 <__hexnan+0xd4>
 80363e2:	3f04      	subs	r7, #4
 80363e4:	e7d0      	b.n	8036388 <__hexnan+0xd4>
 80363e6:	2004      	movs	r0, #4
 80363e8:	e7d5      	b.n	8036396 <__hexnan+0xe2>
	...

080363ec <_init>:
 80363ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80363ee:	bf00      	nop
 80363f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80363f2:	bc08      	pop	{r3}
 80363f4:	469e      	mov	lr, r3
 80363f6:	4770      	bx	lr

080363f8 <_fini>:
 80363f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80363fa:	bf00      	nop
 80363fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80363fe:	bc08      	pop	{r3}
 8036400:	469e      	mov	lr, r3
 8036402:	4770      	bx	lr
