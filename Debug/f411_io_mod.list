
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025b44  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000067a0  08035ce8  08035ce8  00026ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803c488  0803c488  0002e870  2**0
                  CONTENTS
  4 .ARM          00000008  0803c488  0803c488  0002d488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803c490  0803c490  0002e870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803c490  0803c490  0002d490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803c498  0803c498  0002d498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000870  20000000  0803c49c  0002e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000199a8  20000870  0803cd0c  0002e870  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2001a218  0803cd0c  0002f218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002e870  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005aab7  00000000  00000000  0002e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007f20  00000000  00000000  00089357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00028343  00000000  00000000  00091277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003048  00000000  00000000  000b95c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003066  00000000  00000000  000bc608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002191b  00000000  00000000  000bf66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00049aba  00000000  00000000  000e0f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aafee  00000000  00000000  0012aa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001d5a31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bec0  00000000  00000000  001d5a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001e1934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	20000870 	.word	0x20000870
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08035ccc 	.word	0x08035ccc

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	20000874 	.word	0x20000874
 80101dc:	08035ccc 	.word	0x08035ccc

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <EthBegin>:

void EthResetEnd(void){
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
}

void EthBegin(void * param){
 80110dc:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 80110de:	2200      	movs	r2, #0
 80110e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110e4:	4801      	ldr	r0, [pc, #4]	@ (80110ec <EthBegin+0x10>)
 80110e6:	f005 faea 	bl	80166be <HAL_GPIO_WritePin>
}
 80110ea:	bd08      	pop	{r3, pc}
 80110ec:	40020400 	.word	0x40020400

080110f0 <EthEnd>:

void EthEnd(void * param){
 80110f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80110f2:	2201      	movs	r2, #1
 80110f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110f8:	4801      	ldr	r0, [pc, #4]	@ (8011100 <EthEnd+0x10>)
 80110fa:	f005 fae0 	bl	80166be <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 80110fe:	bd08      	pop	{r3, pc}
 8011100:	40020400 	.word	0x40020400

08011104 <FlashBegin>:
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}

void FlashBegin(void){
 8011104:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8011106:	2200      	movs	r2, #0
 8011108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801110c:	4801      	ldr	r0, [pc, #4]	@ (8011114 <FlashBegin+0x10>)
 801110e:	f005 fad6 	bl	80166be <HAL_GPIO_WritePin>
}
 8011112:	bd08      	pop	{r3, pc}
 8011114:	40020000 	.word	0x40020000

08011118 <FlashEnd>:

void FlashEnd(void){
 8011118:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 801111a:	2201      	movs	r2, #1
 801111c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011120:	4801      	ldr	r0, [pc, #4]	@ (8011128 <FlashEnd+0x10>)
 8011122:	f005 facc 	bl	80166be <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 8011126:	bd08      	pop	{r3, pc}
 8011128:	40020000 	.word	0x40020000

0801112c <StartIOTask>:
{
 801112c:	b510      	push	{r4, lr}
 801112e:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil3_Pin, coil2_Pin,coil1_Pin};
 8011130:	4b4a      	ldr	r3, [pc, #296]	@ (801125c <StartIOTask+0x130>)
 8011132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011136:	900c      	str	r0, [sp, #48]	@ 0x30
 8011138:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil3_GPIO_Port, coil2_GPIO_Port, coil1_GPIO_Port};
 801113c:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 8011140:	f103 0408 	add.w	r4, r3, #8
 8011144:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011148:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input3_Pin, input2_Pin, input1_Pin };
 801114c:	3314      	adds	r3, #20
 801114e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011152:	9007      	str	r0, [sp, #28]
 8011154:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input3_GPIO_Port, input2_GPIO_Port, input1_GPIO_Port};
 8011158:	ab04      	add	r3, sp, #16
 801115a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801115e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 8011162:	e072      	b.n	801124a <StartIOTask+0x11e>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011164:	2300      	movs	r3, #0
 8011166:	461a      	mov	r2, r3
 8011168:	a901      	add	r1, sp, #4
 801116a:	483d      	ldr	r0, [pc, #244]	@ (8011260 <StartIOTask+0x134>)
 801116c:	6800      	ldr	r0, [r0, #0]
 801116e:	f007 fb30 	bl	80187d2 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011172:	2400      	movs	r4, #0
 8011174:	e00e      	b.n	8011194 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011176:	2200      	movs	r2, #0
 8011178:	ab0e      	add	r3, sp, #56	@ 0x38
 801117a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801117e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011182:	ab0e      	add	r3, sp, #56	@ 0x38
 8011184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011188:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801118c:	f005 fa97 	bl	80166be <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011190:	3401      	adds	r4, #1
 8011192:	b2e4      	uxtb	r4, r4
 8011194:	2c02      	cmp	r4, #2
 8011196:	d85e      	bhi.n	8011256 <StartIOTask+0x12a>
		     if (pinOutputs_w[i]) {
 8011198:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801119c:	446b      	add	r3, sp
 801119e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0e7      	beq.n	8011176 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 80111a6:	2201      	movs	r2, #1
 80111a8:	ab0e      	add	r3, sp, #56	@ 0x38
 80111aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80111ae:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 80111b2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111b8:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111bc:	f005 fa7f 	bl	80166be <HAL_GPIO_WritePin>
 80111c0:	e7e6      	b.n	8011190 <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80111c2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111c4:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80111c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111cc:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 80111d0:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111d4:	f005 fa6c 	bl	80166b0 <HAL_GPIO_ReadPin>
 80111d8:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80111dc:	446b      	add	r3, sp
 80111de:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80111e2:	3401      	adds	r4, #1
 80111e4:	b2e4      	uxtb	r4, r4
 80111e6:	2c02      	cmp	r4, #2
 80111e8:	d9eb      	bls.n	80111c2 <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 80111ea:	4c1e      	ldr	r4, [pc, #120]	@ (8011264 <StartIOTask+0x138>)
 80111ec:	6820      	ldr	r0, [r4, #0]
 80111ee:	f007 fb3e 	bl	801886e <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 80111f2:	2300      	movs	r3, #0
 80111f4:	461a      	mov	r2, r3
 80111f6:	a902      	add	r1, sp, #8
 80111f8:	6820      	ldr	r0, [r4, #0]
 80111fa:	f007 faa8 	bl	801874e <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 80111fe:	2400      	movs	r4, #0
 8011200:	e014      	b.n	801122c <StartIOTask+0x100>
		pinInputs_r[i] = (uint8_t)(!HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]));
 8011202:	ab0e      	add	r3, sp, #56	@ 0x38
 8011204:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011208:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801120c:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 8011210:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8011214:	f005 fa4c 	bl	80166b0 <HAL_GPIO_ReadPin>
 8011218:	fab0 f080 	clz	r0, r0
 801121c:	0940      	lsrs	r0, r0, #5
 801121e:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 8011222:	446b      	add	r3, sp
 8011224:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011228:	3401      	adds	r4, #1
 801122a:	b2e4      	uxtb	r4, r4
 801122c:	2c02      	cmp	r4, #2
 801122e:	d9e8      	bls.n	8011202 <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 8011230:	4c0d      	ldr	r4, [pc, #52]	@ (8011268 <StartIOTask+0x13c>)
 8011232:	6820      	ldr	r0, [r4, #0]
 8011234:	f007 fb1b 	bl	801886e <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 8011238:	2300      	movs	r3, #0
 801123a:	461a      	mov	r2, r3
 801123c:	a903      	add	r1, sp, #12
 801123e:	6820      	ldr	r0, [r4, #0]
 8011240:	f007 fa85 	bl	801874e <osMessageQueuePut>
    osDelay(1);
 8011244:	2001      	movs	r0, #1
 8011246:	f007 f98a 	bl	801855e <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 801124a:	4b05      	ldr	r3, [pc, #20]	@ (8011260 <StartIOTask+0x134>)
 801124c:	6818      	ldr	r0, [r3, #0]
 801124e:	f007 fb01 	bl	8018854 <osMessageQueueGetCount>
 8011252:	2800      	cmp	r0, #0
 8011254:	d186      	bne.n	8011164 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011256:	2400      	movs	r4, #0
 8011258:	e7c5      	b.n	80111e6 <StartIOTask+0xba>
 801125a:	bf00      	nop
 801125c:	08035ce8 	.word	0x08035ce8
 8011260:	2000089c 	.word	0x2000089c
 8011264:	200008a0 	.word	0x200008a0
 8011268:	200008a4 	.word	0x200008a4

0801126c <add_log_mess_to_q>:
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}

void add_log_mess_to_q(struct log_message mess){
 801126c:	b084      	sub	sp, #16
 801126e:	b508      	push	{r3, lr}
 8011270:	f10d 0c08 	add.w	ip, sp, #8
 8011274:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011278:	2300      	movs	r3, #0
 801127a:	461a      	mov	r2, r3
 801127c:	4661      	mov	r1, ip
 801127e:	4804      	ldr	r0, [pc, #16]	@ (8011290 <add_log_mess_to_q+0x24>)
 8011280:	6800      	ldr	r0, [r0, #0]
 8011282:	f007 fa64 	bl	801874e <osMessageQueuePut>

}
 8011286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801128a:	b004      	add	sp, #16
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop
 8011290:	20000894 	.word	0x20000894

08011294 <StartDisplayTask>:
{
 8011294:	b570      	push	{r4, r5, r6, lr}
 8011296:	b08a      	sub	sp, #40	@ 0x28
	osDelay(1000);//
 8011298:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801129c:	f007 f95f 	bl	801855e <osDelay>
	SSD1306_Init (); // initialise the display
 80112a0:	f006 fff6 	bl	8018290 <SSD1306_Init>
	osDelay(100);//
 80112a4:	2064      	movs	r0, #100	@ 0x64
 80112a6:	f007 f95a 	bl	801855e <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80112aa:	2100      	movs	r1, #0
 80112ac:	2001      	movs	r0, #1
 80112ae:	f006 ff53 	bl	8018158 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80112b2:	2000      	movs	r0, #0
 80112b4:	f006 ff14 	bl	80180e0 <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112b8:	4c48      	ldr	r4, [pc, #288]	@ (80113dc <StartDisplayTask+0x148>)
 80112ba:	2201      	movs	r2, #1
 80112bc:	4621      	mov	r1, r4
 80112be:	4848      	ldr	r0, [pc, #288]	@ (80113e0 <StartDisplayTask+0x14c>)
 80112c0:	f006 ff9e 	bl	8018200 <SSD1306_Puts>
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112c4:	2201      	movs	r2, #1
 80112c6:	4621      	mov	r1, r4
 80112c8:	4846      	ldr	r0, [pc, #280]	@ (80113e4 <StartDisplayTask+0x150>)
 80112ca:	f006 ff99 	bl	8018200 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112ce:	210b      	movs	r1, #11
 80112d0:	2001      	movs	r0, #1
 80112d2:	f006 ff41 	bl	8018158 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112d6:	2201      	movs	r2, #1
 80112d8:	4621      	mov	r1, r4
 80112da:	4843      	ldr	r0, [pc, #268]	@ (80113e8 <StartDisplayTask+0x154>)
 80112dc:	f006 ff90 	bl	8018200 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112e0:	2116      	movs	r1, #22
 80112e2:	2001      	movs	r0, #1
 80112e4:	f006 ff38 	bl	8018158 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112e8:	2201      	movs	r2, #1
 80112ea:	4621      	mov	r1, r4
 80112ec:	483f      	ldr	r0, [pc, #252]	@ (80113ec <StartDisplayTask+0x158>)
 80112ee:	f006 ff87 	bl	8018200 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80112f2:	2121      	movs	r1, #33	@ 0x21
 80112f4:	2001      	movs	r0, #1
 80112f6:	f006 ff2f 	bl	8018158 <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 80112fa:	4b3d      	ldr	r3, [pc, #244]	@ (80113f0 <StartDisplayTask+0x15c>)
 80112fc:	6859      	ldr	r1, [r3, #4]
 80112fe:	780a      	ldrb	r2, [r1, #0]
 8011300:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011302:	7888      	ldrb	r0, [r1, #2]
 8011304:	78cd      	ldrb	r5, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011306:	790e      	ldrb	r6, [r1, #4]
 8011308:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 801130a:	9103      	str	r1, [sp, #12]
 801130c:	9602      	str	r6, [sp, #8]
 801130e:	9501      	str	r5, [sp, #4]
 8011310:	9000      	str	r0, [sp, #0]
 8011312:	4938      	ldr	r1, [pc, #224]	@ (80113f4 <StartDisplayTask+0x160>)
 8011314:	a805      	add	r0, sp, #20
 8011316:	f01a ff99 	bl	802c24c <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801131a:	2201      	movs	r2, #1
 801131c:	4621      	mov	r1, r4
 801131e:	a805      	add	r0, sp, #20
 8011320:	f006 ff6e 	bl	8018200 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8011324:	f007 f85e 	bl	80183e4 <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 8011328:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 801132c:	f008 fc82 	bl	8019c34 <vTaskDelay>
    int i=0;
 8011330:	2500      	movs	r5, #0
 8011332:	e003      	b.n	801133c <StartDisplayTask+0xa8>
		osDelay(1000);
 8011334:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011338:	f007 f911 	bl	801855e <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 801133c:	2100      	movs	r1, #0
 801133e:	2001      	movs	r0, #1
 8011340:	f006 ff0a 	bl	8018158 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8011344:	2000      	movs	r0, #0
 8011346:	f006 fecb 	bl	80180e0 <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 801134a:	4c24      	ldr	r4, [pc, #144]	@ (80113dc <StartDisplayTask+0x148>)
 801134c:	2201      	movs	r2, #1
 801134e:	4621      	mov	r1, r4
 8011350:	4829      	ldr	r0, [pc, #164]	@ (80113f8 <StartDisplayTask+0x164>)
 8011352:	f006 ff55 	bl	8018200 <SSD1306_Puts>
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011356:	4b26      	ldr	r3, [pc, #152]	@ (80113f0 <StartDisplayTask+0x15c>)
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801135c:	0e13      	lsrs	r3, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 801135e:	9301      	str	r3, [sp, #4]
 8011360:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011364:	9300      	str	r3, [sp, #0]
 8011366:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801136a:	b2d2      	uxtb	r2, r2
 801136c:	4923      	ldr	r1, [pc, #140]	@ (80113fc <StartDisplayTask+0x168>)
 801136e:	a805      	add	r0, sp, #20
 8011370:	f01a ff6c 	bl	802c24c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011374:	2201      	movs	r2, #1
 8011376:	4621      	mov	r1, r4
 8011378:	a805      	add	r0, sp, #20
 801137a:	f006 ff41 	bl	8018200 <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 801137e:	210a      	movs	r1, #10
 8011380:	2001      	movs	r0, #1
 8011382:	f006 fee9 	bl	8018158 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 8011386:	2201      	movs	r2, #1
 8011388:	4621      	mov	r1, r4
 801138a:	481d      	ldr	r0, [pc, #116]	@ (8011400 <StartDisplayTask+0x16c>)
 801138c:	f006 ff38 	bl	8018200 <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 8011390:	3501      	adds	r5, #1
 8011392:	462a      	mov	r2, r5
 8011394:	491b      	ldr	r1, [pc, #108]	@ (8011404 <StartDisplayTask+0x170>)
 8011396:	a805      	add	r0, sp, #20
 8011398:	f01a ff58 	bl	802c24c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801139c:	2201      	movs	r2, #1
 801139e:	4621      	mov	r1, r4
 80113a0:	a805      	add	r0, sp, #20
 80113a2:	f006 ff2d 	bl	8018200 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80113a6:	f007 f81d 	bl	80183e4 <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 80113aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113ae:	2201      	movs	r2, #1
 80113b0:	2178      	movs	r1, #120	@ 0x78
 80113b2:	4815      	ldr	r0, [pc, #84]	@ (8011408 <StartDisplayTask+0x174>)
 80113b4:	f005 fcd8 	bl	8016d68 <HAL_I2C_IsDeviceReady>
 80113b8:	2800      	cmp	r0, #0
 80113ba:	d0bb      	beq.n	8011334 <StartDisplayTask+0xa0>
			HAL_I2C_DeInit(&hi2c1);
 80113bc:	4812      	ldr	r0, [pc, #72]	@ (8011408 <StartDisplayTask+0x174>)
 80113be:	f005 fbfd 	bl	8016bbc <HAL_I2C_DeInit>
			vTaskDelay(1000);
 80113c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113c6:	f008 fc35 	bl	8019c34 <vTaskDelay>
			MX_I2C1_Init();
 80113ca:	f000 fcff 	bl	8011dcc <MX_I2C1_Init>
			vTaskDelay(1000);
 80113ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113d2:	f008 fc2f 	bl	8019c34 <vTaskDelay>
			SSD1306_Init ();
 80113d6:	f006 ff5b 	bl	8018290 <SSD1306_Init>
 80113da:	e7e6      	b.n	80113aa <StartDisplayTask+0x116>
 80113dc:	2000010c 	.word	0x2000010c
 80113e0:	08035f64 	.word	0x08035f64
 80113e4:	08035f70 	.word	0x08035f70
 80113e8:	08035f7c 	.word	0x08035f7c
 80113ec:	08035f88 	.word	0x08035f88
 80113f0:	200008c0 	.word	0x200008c0
 80113f4:	08035f90 	.word	0x08035f90
 80113f8:	08035fb0 	.word	0x08035fb0
 80113fc:	08035fb4 	.word	0x08035fb4
 8011400:	08035fc4 	.word	0x08035fc4
 8011404:	0803b520 	.word	0x0803b520
 8011408:	200008c8 	.word	0x200008c8

0801140c <StartSettingsTask>:
{
 801140c:	b570      	push	{r4, r5, r6, lr}
 801140e:	b0ba      	sub	sp, #232	@ 0xe8
	size_t  f_size = 0;
 8011410:	2300      	movs	r3, #0
 8011412:	9339      	str	r3, [sp, #228]	@ 0xe4
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 8011414:	4b79      	ldr	r3, [pc, #484]	@ (80115fc <StartSettingsTask+0x1f0>)
 8011416:	4a7a      	ldr	r2, [pc, #488]	@ (8011600 <StartSettingsTask+0x1f4>)
 8011418:	497a      	ldr	r1, [pc, #488]	@ (8011604 <StartSettingsTask+0x1f8>)
 801141a:	487b      	ldr	r0, [pc, #492]	@ (8011608 <StartSettingsTask+0x1fc>)
 801141c:	f004 fce2 	bl	8015de4 <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 8011420:	497a      	ldr	r1, [pc, #488]	@ (801160c <StartSettingsTask+0x200>)
 8011422:	487b      	ldr	r0, [pc, #492]	@ (8011610 <StartSettingsTask+0x204>)
 8011424:	f009 fcd2 	bl	801adcc <lfs_fs_ll_init>
 8011428:	2800      	cmp	r0, #0
 801142a:	db3b      	blt.n	80114a4 <StartSettingsTask+0x98>
  mg_fs_lfs_mkdir("/web");
 801142c:	4879      	ldr	r0, [pc, #484]	@ (8011614 <StartSettingsTask+0x208>)
 801142e:	f009 fcbb 	bl	801ada8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 8011432:	4c79      	ldr	r4, [pc, #484]	@ (8011618 <StartSettingsTask+0x20c>)
 8011434:	4620      	mov	r0, r4
 8011436:	f009 fcab 	bl	801ad90 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 801143a:	4878      	ldr	r0, [pc, #480]	@ (801161c <StartSettingsTask+0x210>)
 801143c:	f009 fca8 	bl	801ad90 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8011440:	4620      	mov	r0, r4
 8011442:	f009 fcb1 	bl	801ada8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 8011446:	4876      	ldr	r0, [pc, #472]	@ (8011620 <StartSettingsTask+0x214>)
 8011448:	f009 fcae 	bl	801ada8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 801144c:	4875      	ldr	r0, [pc, #468]	@ (8011624 <StartSettingsTask+0x218>)
 801144e:	f009 fcab 	bl	801ada8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 8011452:	4875      	ldr	r0, [pc, #468]	@ (8011628 <StartSettingsTask+0x21c>)
 8011454:	f009 fca8 	bl	801ada8 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/auth");
 8011458:	4874      	ldr	r0, [pc, #464]	@ (801162c <StartSettingsTask+0x220>)
 801145a:	f009 fca5 	bl	801ada8 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 801145e:	2200      	movs	r2, #0
 8011460:	a939      	add	r1, sp, #228	@ 0xe4
 8011462:	4873      	ldr	r0, [pc, #460]	@ (8011630 <StartSettingsTask+0x224>)
 8011464:	f009 fbe8 	bl	801ac38 <mg_fs_lfs_status>
 8011468:	b1f8      	cbz	r0, 80114aa <StartSettingsTask+0x9e>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 801146a:	2101      	movs	r1, #1
 801146c:	4870      	ldr	r0, [pc, #448]	@ (8011630 <StartSettingsTask+0x224>)
 801146e:	f009 fc21 	bl	801acb4 <mg_fs_lfs_open>
 8011472:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 8011474:	22c6      	movs	r2, #198	@ 0xc6
 8011476:	a907      	add	r1, sp, #28
 8011478:	f009 fc4c 	bl	801ad14 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 801147c:	4620      	mov	r0, r4
 801147e:	f009 fc3d 	bl	801acfc <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 8011482:	2200      	movs	r2, #0
 8011484:	f88d 201c 	strb.w	r2, [sp, #28]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011488:	2302      	movs	r3, #2
 801148a:	a907      	add	r1, sp, #28
 801148c:	4869      	ldr	r0, [pc, #420]	@ (8011634 <StartSettingsTask+0x228>)
 801148e:	6800      	ldr	r0, [r0, #0]
 8011490:	f007 fbc4 	bl	8018c1c <xQueueGenericSend>
  if (mg_fs_lfs_status(WEB_USERS_FILE, &f_size, NULL) == 0){//file not found
 8011494:	2200      	movs	r2, #0
 8011496:	a939      	add	r1, sp, #228	@ 0xe4
 8011498:	4867      	ldr	r0, [pc, #412]	@ (8011638 <StartSettingsTask+0x22c>)
 801149a:	f009 fbcd 	bl	801ac38 <mg_fs_lfs_status>
 801149e:	b188      	cbz	r0, 80114c4 <StartSettingsTask+0xb8>
{
 80114a0:	2400      	movs	r4, #0
 80114a2:	e082      	b.n	80115aa <StartSettingsTask+0x19e>
	  HAL_NVIC_SystemReset();
 80114a4:	f004 ff94 	bl	80163d0 <HAL_NVIC_SystemReset>
 80114a8:	e7c0      	b.n	801142c <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 80114aa:	22c6      	movs	r2, #198	@ 0xc6
 80114ac:	2100      	movs	r1, #0
 80114ae:	a807      	add	r0, sp, #28
 80114b0:	f01b fa8e 	bl	802c9d0 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80114b4:	2302      	movs	r3, #2
 80114b6:	2200      	movs	r2, #0
 80114b8:	a907      	add	r1, sp, #28
 80114ba:	485e      	ldr	r0, [pc, #376]	@ (8011634 <StartSettingsTask+0x228>)
 80114bc:	6800      	ldr	r0, [r0, #0]
 80114be:	f007 fbad 	bl	8018c1c <xQueueGenericSend>
 80114c2:	e7e7      	b.n	8011494 <StartSettingsTask+0x88>
	  web_users = (users_list_t *)malloc(user_list_size * sizeof(users_list_t));
 80114c4:	f240 609a 	movw	r0, #1690	@ 0x69a
 80114c8:	f009 fa4e 	bl	801a968 <pvPortMalloc>
	  if (web_users == NULL) {
 80114cc:	4604      	mov	r4, r0
 80114ce:	b390      	cbz	r0, 8011536 <StartSettingsTask+0x12a>
		  logging(L_INFO, "Initialize default login pass for web (admin:admin)'");
 80114d0:	495a      	ldr	r1, [pc, #360]	@ (801163c <StartSettingsTask+0x230>)
 80114d2:	2001      	movs	r0, #1
 80114d4:	f000 fd0e 	bl	8011ef4 <logging>
		  strcpy(web_users[0].user, WEB_ADMIN_DEFAULT);
 80114d8:	4b59      	ldr	r3, [pc, #356]	@ (8011640 <StartSettingsTask+0x234>)
 80114da:	6818      	ldr	r0, [r3, #0]
 80114dc:	6020      	str	r0, [r4, #0]
 80114de:	889b      	ldrh	r3, [r3, #4]
 80114e0:	80a3      	strh	r3, [r4, #4]
		  unsigned char pass_digest[] = WEB_ADMIN_PASS_DIGEST;
 80114e2:	ad01      	add	r5, sp, #4
 80114e4:	4e57      	ldr	r6, [pc, #348]	@ (8011644 <StartSettingsTask+0x238>)
 80114e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80114e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 80114ee:	f845 0b04 	str.w	r0, [r5], #4
 80114f2:	7029      	strb	r1, [r5, #0]
		  memcpy(web_users[0].pass_digest, pass_digest, sizeof(pass_digest));
 80114f4:	ad01      	add	r5, sp, #4
 80114f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114f8:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 80114fc:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 8011500:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 8011504:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8011508:	6828      	ldr	r0, [r5, #0]
 801150a:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
 801150e:	792b      	ldrb	r3, [r5, #4]
 8011510:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
		  f_pointer = mg_fs_lfs_open(WEB_USERS_FILE, MG_FS_WRITE);
 8011514:	2102      	movs	r1, #2
 8011516:	4848      	ldr	r0, [pc, #288]	@ (8011638 <StartSettingsTask+0x22c>)
 8011518:	f009 fbcc 	bl	801acb4 <mg_fs_lfs_open>
 801151c:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, web_users, user_list_size * sizeof(users_list_t));
 801151e:	f240 629a 	movw	r2, #1690	@ 0x69a
 8011522:	4621      	mov	r1, r4
 8011524:	f009 fc02 	bl	801ad2c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011528:	4628      	mov	r0, r5
 801152a:	f009 fbe7 	bl	801acfc <mg_fs_lfs_close>
	  free(web_users);
 801152e:	4620      	mov	r0, r4
 8011530:	f009 fa9c 	bl	801aa6c <vPortFree>
 8011534:	e7b4      	b.n	80114a0 <StartSettingsTask+0x94>
		  logging(L_ERR, "Failed to allocate memory for 'web_users' ");
 8011536:	4944      	ldr	r1, [pc, #272]	@ (8011648 <StartSettingsTask+0x23c>)
 8011538:	2003      	movs	r0, #3
 801153a:	f000 fcdb 	bl	8011ef4 <logging>
 801153e:	e7f6      	b.n	801152e <StartSettingsTask+0x122>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 8011540:	4d3b      	ldr	r5, [pc, #236]	@ (8011630 <StartSettingsTask+0x224>)
 8011542:	4628      	mov	r0, r5
 8011544:	f009 fc24 	bl	801ad90 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 8011548:	2102      	movs	r1, #2
 801154a:	4628      	mov	r0, r5
 801154c:	f009 fbb2 	bl	801acb4 <mg_fs_lfs_open>
 8011550:	4605      	mov	r5, r0
 8011552:	2800      	cmp	r0, #0
 8011554:	d033      	beq.n	80115be <StartSettingsTask+0x1b2>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 8011556:	22c6      	movs	r2, #198	@ 0xc6
 8011558:	a907      	add	r1, sp, #28
 801155a:	f009 fbe7 	bl	801ad2c <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 801155e:	4628      	mov	r0, r5
 8011560:	f009 fbcc 	bl	801acfc <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 8011564:	2200      	movs	r2, #0
 8011566:	f88d 201c 	strb.w	r2, [sp, #28]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 801156a:	2302      	movs	r3, #2
 801156c:	a907      	add	r1, sp, #28
 801156e:	4831      	ldr	r0, [pc, #196]	@ (8011634 <StartSettingsTask+0x228>)
 8011570:	6800      	ldr	r0, [r0, #0]
 8011572:	f007 fb53 	bl	8018c1c <xQueueGenericSend>
 8011576:	e022      	b.n	80115be <StartSettingsTask+0x1b2>
				 osDelay(1);
 8011578:	2001      	movs	r0, #1
 801157a:	f006 fff0 	bl	801855e <osDelay>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 801157e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011582:	4832      	ldr	r0, [pc, #200]	@ (801164c <StartSettingsTask+0x240>)
 8011584:	f005 f894 	bl	80166b0 <HAL_GPIO_ReadPin>
 8011588:	2800      	cmp	r0, #0
 801158a:	d0f5      	beq.n	8011578 <StartSettingsTask+0x16c>
			 osDelay(1000);
 801158c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011590:	f006 ffe5 	bl	801855e <osDelay>
			 mg_fs_lfs_remove(WEB_USERS_FILE);
 8011594:	4828      	ldr	r0, [pc, #160]	@ (8011638 <StartSettingsTask+0x22c>)
 8011596:	f009 fbfb 	bl	801ad90 <mg_fs_lfs_remove>
			 HAL_NVIC_SystemReset();
 801159a:	f004 ff19 	bl	80163d0 <HAL_NVIC_SystemReset>
 801159e:	e000      	b.n	80115a2 <StartSettingsTask+0x196>
		 press_time = 0;
 80115a0:	2400      	movs	r4, #0
	  osDelay(1000);
 80115a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80115a6:	f006 ffda 	bl	801855e <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80115aa:	2200      	movs	r2, #0
 80115ac:	a907      	add	r1, sp, #28
 80115ae:	4b21      	ldr	r3, [pc, #132]	@ (8011634 <StartSettingsTask+0x228>)
 80115b0:	6818      	ldr	r0, [r3, #0]
 80115b2:	f007 fe46 	bl	8019242 <xQueuePeek>
	  if(mqtt_config.save){
 80115b6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d1c0      	bne.n	8011540 <StartSettingsTask+0x134>
	 if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){ // If key pressed, more than 8 secons - reset auth file and reset mcu
 80115be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80115c2:	4822      	ldr	r0, [pc, #136]	@ (801164c <StartSettingsTask+0x240>)
 80115c4:	f005 f874 	bl	80166b0 <HAL_GPIO_ReadPin>
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d1e9      	bne.n	80115a0 <StartSettingsTask+0x194>
		 press_time++;
 80115cc:	3401      	adds	r4, #1
 80115ce:	b2e4      	uxtb	r4, r4
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80115d0:	4d1e      	ldr	r5, [pc, #120]	@ (801164c <StartSettingsTask+0x240>)
 80115d2:	2201      	movs	r2, #1
 80115d4:	2102      	movs	r1, #2
 80115d6:	4628      	mov	r0, r5
 80115d8:	f005 f871 	bl	80166be <HAL_GPIO_WritePin>
		 osDelay(100);
 80115dc:	2064      	movs	r0, #100	@ 0x64
 80115de:	f006 ffbe 	bl	801855e <osDelay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80115e2:	2200      	movs	r2, #0
 80115e4:	2102      	movs	r1, #2
 80115e6:	4628      	mov	r0, r5
 80115e8:	f005 f869 	bl	80166be <HAL_GPIO_WritePin>
		 if (press_time == 8){
 80115ec:	2c08      	cmp	r4, #8
 80115ee:	d1d8      	bne.n	80115a2 <StartSettingsTask+0x196>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80115f0:	2201      	movs	r2, #1
 80115f2:	2102      	movs	r1, #2
 80115f4:	4628      	mov	r0, r5
 80115f6:	f005 f862 	bl	80166be <HAL_GPIO_WritePin>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 80115fa:	e7c0      	b.n	801157e <StartSettingsTask+0x172>
 80115fc:	08011849 	.word	0x08011849
 8011600:	0801186d 	.word	0x0801186d
 8011604:	08011119 	.word	0x08011119
 8011608:	08011105 	.word	0x08011105
 801160c:	08011899 	.word	0x08011899
 8011610:	08011885 	.word	0x08011885
 8011614:	08035fc8 	.word	0x08035fc8
 8011618:	08035fd0 	.word	0x08035fd0
 801161c:	08035fdc 	.word	0x08035fdc
 8011620:	08035fec 	.word	0x08035fec
 8011624:	08035ff8 	.word	0x08035ff8
 8011628:	08037a48 	.word	0x08037a48
 801162c:	08036000 	.word	0x08036000
 8011630:	08036008 	.word	0x08036008
 8011634:	20000898 	.word	0x20000898
 8011638:	0803601c 	.word	0x0803601c
 801163c:	08036058 	.word	0x08036058
 8011640:	08036090 	.word	0x08036090
 8011644:	08036098 	.word	0x08036098
 8011648:	0803602c 	.word	0x0803602c
 801164c:	40020400 	.word	0x40020400

08011650 <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011650:	b508      	push	{r3, lr}
	switch (param_type) {
 8011652:	2901      	cmp	r1, #1
 8011654:	d014      	beq.n	8011680 <RW_parameters_from_queue+0x30>
 8011656:	2902      	cmp	r1, #2
 8011658:	d01a      	beq.n	8011690 <RW_parameters_from_queue+0x40>
 801165a:	b101      	cbz	r1, 801165e <RW_parameters_from_queue+0xe>
}
 801165c:	bd08      	pop	{r3, pc}
			if (direction == S_READ){
 801165e:	b14a      	cbz	r2, 8011674 <RW_parameters_from_queue+0x24>
			}else if (direction == S_WRITE){
 8011660:	2a01      	cmp	r2, #1
 8011662:	d1fb      	bne.n	801165c <RW_parameters_from_queue+0xc>
				xQueueOverwrite(mqttQHandle, pr);
 8011664:	2302      	movs	r3, #2
 8011666:	2200      	movs	r2, #0
 8011668:	4601      	mov	r1, r0
 801166a:	4812      	ldr	r0, [pc, #72]	@ (80116b4 <RW_parameters_from_queue+0x64>)
 801166c:	6800      	ldr	r0, [r0, #0]
 801166e:	f007 fad5 	bl	8018c1c <xQueueGenericSend>
 8011672:	e7f3      	b.n	801165c <RW_parameters_from_queue+0xc>
				xQueuePeek(mqttQHandle, pr, 0);
 8011674:	4601      	mov	r1, r0
 8011676:	4b0f      	ldr	r3, [pc, #60]	@ (80116b4 <RW_parameters_from_queue+0x64>)
 8011678:	6818      	ldr	r0, [r3, #0]
 801167a:	f007 fde2 	bl	8019242 <xQueuePeek>
 801167e:	e7ed      	b.n	801165c <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011680:	2a00      	cmp	r2, #0
 8011682:	d1eb      	bne.n	801165c <RW_parameters_from_queue+0xc>
				xQueuePeek(inputReadQHandle, input, 0);
 8011684:	4601      	mov	r1, r0
 8011686:	4b0c      	ldr	r3, [pc, #48]	@ (80116b8 <RW_parameters_from_queue+0x68>)
 8011688:	6818      	ldr	r0, [r3, #0]
 801168a:	f007 fdda 	bl	8019242 <xQueuePeek>
 801168e:	e7e5      	b.n	801165c <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011690:	b14a      	cbz	r2, 80116a6 <RW_parameters_from_queue+0x56>
			}else if(direction == S_WRITE){
 8011692:	2a01      	cmp	r2, #1
 8011694:	d1e2      	bne.n	801165c <RW_parameters_from_queue+0xc>
				xQueueOverwrite(outputWriteQHandle, output);
 8011696:	2302      	movs	r3, #2
 8011698:	2200      	movs	r2, #0
 801169a:	4601      	mov	r1, r0
 801169c:	4807      	ldr	r0, [pc, #28]	@ (80116bc <RW_parameters_from_queue+0x6c>)
 801169e:	6800      	ldr	r0, [r0, #0]
 80116a0:	f007 fabc 	bl	8018c1c <xQueueGenericSend>
}
 80116a4:	e7da      	b.n	801165c <RW_parameters_from_queue+0xc>
				xQueuePeek(outputReadQHandle, output, 0);
 80116a6:	4601      	mov	r1, r0
 80116a8:	4b05      	ldr	r3, [pc, #20]	@ (80116c0 <RW_parameters_from_queue+0x70>)
 80116aa:	6818      	ldr	r0, [r3, #0]
 80116ac:	f007 fdc9 	bl	8019242 <xQueuePeek>
 80116b0:	e7d4      	b.n	801165c <RW_parameters_from_queue+0xc>
 80116b2:	bf00      	nop
 80116b4:	20000898 	.word	0x20000898
 80116b8:	200008a4 	.word	0x200008a4
 80116bc:	2000089c 	.word	0x2000089c
 80116c0:	200008a0 	.word	0x200008a0

080116c4 <StartLoggingTask>:
{
 80116c4:	b530      	push	{r4, r5, lr}
 80116c6:	b0d1      	sub	sp, #324	@ 0x144
	reg_logging_fn(add_log_mess_to_q);
 80116c8:	4841      	ldr	r0, [pc, #260]	@ (80117d0 <StartLoggingTask+0x10c>)
 80116ca:	f000 fc07 	bl	8011edc <reg_logging_fn>
	logger_set_level(L_INFO);
 80116ce:	2001      	movs	r0, #1
 80116d0:	f000 fc0a 	bl	8011ee8 <logger_set_level>
	logging(L_INFO, "Device started...");
 80116d4:	493f      	ldr	r1, [pc, #252]	@ (80117d4 <StartLoggingTask+0x110>)
 80116d6:	2001      	movs	r0, #1
 80116d8:	f000 fc0c 	bl	8011ef4 <logging>
	  while (mg_fs_mounted() == 0){
 80116dc:	e003      	b.n	80116e6 <StartLoggingTask+0x22>
		  osDelay(500);
 80116de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80116e2:	f006 ff3c 	bl	801855e <osDelay>
	  while (mg_fs_mounted() == 0){
 80116e6:	f009 fb6b 	bl	801adc0 <mg_fs_mounted>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d0f7      	beq.n	80116de <StartLoggingTask+0x1a>
	uint32_t count = 2000;
 80116ee:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 80116f2:	e048      	b.n	8011786 <StartLoggingTask+0xc2>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 80116f4:	2300      	movs	r3, #0
 80116f6:	461a      	mov	r2, r3
 80116f8:	a907      	add	r1, sp, #28
 80116fa:	4837      	ldr	r0, [pc, #220]	@ (80117d8 <StartLoggingTask+0x114>)
 80116fc:	6800      	ldr	r0, [r0, #0]
 80116fe:	f007 f868 	bl	80187d2 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 8011702:	2102      	movs	r1, #2
 8011704:	4835      	ldr	r0, [pc, #212]	@ (80117dc <StartLoggingTask+0x118>)
 8011706:	f009 fad5 	bl	801acb4 <mg_fs_lfs_open>
 801170a:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 801170c:	f89d 211d 	ldrb.w	r2, [sp, #285]	@ 0x11d
 8011710:	f10d 011d 	add.w	r1, sp, #29
 8011714:	f009 fb0a 	bl	801ad2c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011718:	4628      	mov	r0, r5
 801171a:	f009 faef 	bl	801acfc <mg_fs_lfs_close>
 801171e:	e038      	b.n	8011792 <StartLoggingTask+0xce>
    	vPortGetHeapStats(&heap_status);
 8011720:	a848      	add	r0, sp, #288	@ 0x120
 8011722:	f009 f9e1 	bl	801aae8 <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8011726:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8011728:	9304      	str	r3, [sp, #16]
 801172a:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 801172c:	9303      	str	r3, [sp, #12]
 801172e:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 8011730:	9302      	str	r3, [sp, #8]
 8011732:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 8011734:	9301      	str	r3, [sp, #4]
 8011736:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 8011738:	9300      	str	r3, [sp, #0]
 801173a:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 801173c:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 801173e:	4928      	ldr	r1, [pc, #160]	@ (80117e0 <StartLoggingTask+0x11c>)
 8011740:	2001      	movs	r0, #1
 8011742:	f000 fbd7 	bl	8011ef4 <logging>
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011746:	4c27      	ldr	r4, [pc, #156]	@ (80117e4 <StartLoggingTask+0x120>)
 8011748:	6863      	ldr	r3, [r4, #4]
 801174a:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801174c:	0e13      	lsrs	r3, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 801174e:	9301      	str	r3, [sp, #4]
 8011750:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801175a:	b2d2      	uxtb	r2, r2
 801175c:	4922      	ldr	r1, [pc, #136]	@ (80117e8 <StartLoggingTask+0x124>)
 801175e:	2001      	movs	r0, #1
 8011760:	f000 fbc8 	bl	8011ef4 <logging>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011764:	6861      	ldr	r1, [r4, #4]
 8011766:	780a      	ldrb	r2, [r1, #0]
 8011768:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 801176a:	7888      	ldrb	r0, [r1, #2]
 801176c:	78cc      	ldrb	r4, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 801176e:	790d      	ldrb	r5, [r1, #4]
 8011770:	7949      	ldrb	r1, [r1, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011772:	9103      	str	r1, [sp, #12]
 8011774:	9502      	str	r5, [sp, #8]
 8011776:	9401      	str	r4, [sp, #4]
 8011778:	9000      	str	r0, [sp, #0]
 801177a:	491c      	ldr	r1, [pc, #112]	@ (80117ec <StartLoggingTask+0x128>)
 801177c:	2001      	movs	r0, #1
 801177e:	f000 fbb9 	bl	8011ef4 <logging>
    	count = 0;
 8011782:	2400      	movs	r4, #0
    count ++;
 8011784:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011786:	4b14      	ldr	r3, [pc, #80]	@ (80117d8 <StartLoggingTask+0x114>)
 8011788:	6818      	ldr	r0, [r3, #0]
 801178a:	f007 f863 	bl	8018854 <osMessageQueueGetCount>
 801178e:	2800      	cmp	r0, #0
 8011790:	d1b0      	bne.n	80116f4 <StartLoggingTask+0x30>
    osDelay(500);
 8011792:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011796:	f006 fee2 	bl	801855e <osDelay>
    if (count == 2000){
 801179a:	f5b4 6ffa 	cmp.w	r4, #2000	@ 0x7d0
 801179e:	d1f1      	bne.n	8011784 <StartLoggingTask+0xc0>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 80117a0:	2200      	movs	r2, #0
 80117a2:	a94f      	add	r1, sp, #316	@ 0x13c
 80117a4:	480d      	ldr	r0, [pc, #52]	@ (80117dc <StartLoggingTask+0x118>)
 80117a6:	f009 fa47 	bl	801ac38 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 80117aa:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 80117ac:	f24c 3350 	movw	r3, #50000	@ 0xc350
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d9b5      	bls.n	8011720 <StartLoggingTask+0x5c>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 80117b4:	4c0e      	ldr	r4, [pc, #56]	@ (80117f0 <StartLoggingTask+0x12c>)
 80117b6:	4620      	mov	r0, r4
 80117b8:	f009 faea 	bl	801ad90 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 80117bc:	4621      	mov	r1, r4
 80117be:	4807      	ldr	r0, [pc, #28]	@ (80117dc <StartLoggingTask+0x118>)
 80117c0:	f009 fada 	bl	801ad78 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 80117c4:	490b      	ldr	r1, [pc, #44]	@ (80117f4 <StartLoggingTask+0x130>)
 80117c6:	2001      	movs	r0, #1
 80117c8:	f000 fb94 	bl	8011ef4 <logging>
 80117cc:	e7a8      	b.n	8011720 <StartLoggingTask+0x5c>
 80117ce:	bf00      	nop
 80117d0:	0801126d 	.word	0x0801126d
 80117d4:	080360b0 	.word	0x080360b0
 80117d8:	20000894 	.word	0x20000894
 80117dc:	080360c4 	.word	0x080360c4
 80117e0:	080360f8 	.word	0x080360f8
 80117e4:	200008c0 	.word	0x200008c0
 80117e8:	0803618c 	.word	0x0803618c
 80117ec:	080361a8 	.word	0x080361a8
 80117f0:	080360d4 	.word	0x080360d4
 80117f4:	080360e4 	.word	0x080360e4

080117f8 <StartWatchDogTask>:
{
 80117f8:	b508      	push	{r3, lr}
	HAL_IWDG_Refresh(&hiwdg);
 80117fa:	4806      	ldr	r0, [pc, #24]	@ (8011814 <StartWatchDogTask+0x1c>)
 80117fc:	f005 fb7e 	bl	8016efc <HAL_IWDG_Refresh>
    osDelay(500);
 8011800:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011804:	f006 feab 	bl	801855e <osDelay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8011808:	2101      	movs	r1, #1
 801180a:	4803      	ldr	r0, [pc, #12]	@ (8011818 <StartWatchDogTask+0x20>)
 801180c:	f004 ff5d 	bl	80166ca <HAL_GPIO_TogglePin>
  for(;;)
 8011810:	e7f3      	b.n	80117fa <StartWatchDogTask+0x2>
 8011812:	bf00      	nop
 8011814:	2000091c 	.word	0x2000091c
 8011818:	40020400 	.word	0x40020400

0801181c <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 801181c:	b500      	push	{lr}
 801181e:	b087      	sub	sp, #28
 8011820:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8011824:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011828:	9300      	str	r3, [sp, #0]
 801182a:	2301      	movs	r3, #1
 801182c:	f10d 0217 	add.w	r2, sp, #23
 8011830:	f10d 010f 	add.w	r1, sp, #15
 8011834:	4803      	ldr	r0, [pc, #12]	@ (8011844 <EthTxn+0x28>)
 8011836:	f006 f8f0 	bl	8017a1a <HAL_SPI_TransmitReceive>
}
 801183a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801183e:	b007      	add	sp, #28
 8011840:	f85d fb04 	ldr.w	pc, [sp], #4
 8011844:	2000092c 	.word	0x2000092c

08011848 <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 8011848:	b500      	push	{lr}
 801184a:	b083      	sub	sp, #12
 801184c:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011854:	2201      	movs	r2, #1
 8011856:	f10d 0107 	add.w	r1, sp, #7
 801185a:	4803      	ldr	r0, [pc, #12]	@ (8011868 <FlashSPIsendByte+0x20>)
 801185c:	f005 fffb 	bl	8017856 <HAL_SPI_Transmit>
}
 8011860:	b003      	add	sp, #12
 8011862:	f85d fb04 	ldr.w	pc, [sp], #4
 8011866:	bf00      	nop
 8011868:	20000984 	.word	0x20000984

0801186c <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 801186c:	b508      	push	{r3, lr}
 801186e:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011870:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011874:	4601      	mov	r1, r0
 8011876:	4802      	ldr	r0, [pc, #8]	@ (8011880 <FlashSPIrecvBuff+0x14>)
 8011878:	f006 f9f9 	bl	8017c6e <HAL_SPI_Receive>
}
 801187c:	bd08      	pop	{r3, pc}
 801187e:	bf00      	nop
 8011880:	20000984 	.word	0x20000984

08011884 <FS_Lock>:
void FS_Lock(void * param){
 8011884:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8011886:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801188a:	4b02      	ldr	r3, [pc, #8]	@ (8011894 <FS_Lock+0x10>)
 801188c:	6818      	ldr	r0, [r3, #0]
 801188e:	f006 febd 	bl	801860c <osMutexAcquire>
}
 8011892:	bd08      	pop	{r3, pc}
 8011894:	2000088c 	.word	0x2000088c

08011898 <FS_Unlock>:
void FS_Unlock(void * param){
 8011898:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 801189a:	4b02      	ldr	r3, [pc, #8]	@ (80118a4 <FS_Unlock+0xc>)
 801189c:	6818      	ldr	r0, [r3, #0]
 801189e:	f006 fee4 	bl	801866a <osMutexRelease>
}
 80118a2:	bd08      	pop	{r3, pc}
 80118a4:	2000088c 	.word	0x2000088c

080118a8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80118a8:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 80118aa:	482c      	ldr	r0, [pc, #176]	@ (801195c <MX_FREERTOS_Init+0xb4>)
 80118ac:	f006 fe65 	bl	801857a <osMutexNew>
 80118b0:	4b2b      	ldr	r3, [pc, #172]	@ (8011960 <MX_FREERTOS_Init+0xb8>)
 80118b2:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 80118b4:	482b      	ldr	r0, [pc, #172]	@ (8011964 <MX_FREERTOS_Init+0xbc>)
 80118b6:	f006 fe60 	bl	801857a <osMutexNew>
 80118ba:	4b2b      	ldr	r3, [pc, #172]	@ (8011968 <MX_FREERTOS_Init+0xc0>)
 80118bc:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 80118be:	4a2b      	ldr	r2, [pc, #172]	@ (801196c <MX_FREERTOS_Init+0xc4>)
 80118c0:	2103      	movs	r1, #3
 80118c2:	2001      	movs	r0, #1
 80118c4:	f006 fef8 	bl	80186b8 <osMessageQueueNew>
 80118c8:	4b29      	ldr	r3, [pc, #164]	@ (8011970 <MX_FREERTOS_Init+0xc8>)
 80118ca:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 80118cc:	4a29      	ldr	r2, [pc, #164]	@ (8011974 <MX_FREERTOS_Init+0xcc>)
 80118ce:	2103      	movs	r1, #3
 80118d0:	2001      	movs	r0, #1
 80118d2:	f006 fef1 	bl	80186b8 <osMessageQueueNew>
 80118d6:	4b28      	ldr	r3, [pc, #160]	@ (8011978 <MX_FREERTOS_Init+0xd0>)
 80118d8:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 80118da:	4a28      	ldr	r2, [pc, #160]	@ (801197c <MX_FREERTOS_Init+0xd4>)
 80118dc:	2103      	movs	r1, #3
 80118de:	2001      	movs	r0, #1
 80118e0:	f006 feea 	bl	80186b8 <osMessageQueueNew>
 80118e4:	4b26      	ldr	r3, [pc, #152]	@ (8011980 <MX_FREERTOS_Init+0xd8>)
 80118e6:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 80118e8:	4a26      	ldr	r2, [pc, #152]	@ (8011984 <MX_FREERTOS_Init+0xdc>)
 80118ea:	21c6      	movs	r1, #198	@ 0xc6
 80118ec:	2001      	movs	r0, #1
 80118ee:	f006 fee3 	bl	80186b8 <osMessageQueueNew>
 80118f2:	4b25      	ldr	r3, [pc, #148]	@ (8011988 <MX_FREERTOS_Init+0xe0>)
 80118f4:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 80118f6:	4a25      	ldr	r2, [pc, #148]	@ (801198c <MX_FREERTOS_Init+0xe4>)
 80118f8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80118fc:	200f      	movs	r0, #15
 80118fe:	f006 fedb 	bl	80186b8 <osMessageQueueNew>
 8011902:	4b23      	ldr	r3, [pc, #140]	@ (8011990 <MX_FREERTOS_Init+0xe8>)
 8011904:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 8011906:	4a23      	ldr	r2, [pc, #140]	@ (8011994 <MX_FREERTOS_Init+0xec>)
 8011908:	2100      	movs	r1, #0
 801190a:	4823      	ldr	r0, [pc, #140]	@ (8011998 <MX_FREERTOS_Init+0xf0>)
 801190c:	f006 fdc8 	bl	80184a0 <osThreadNew>
 8011910:	4b22      	ldr	r3, [pc, #136]	@ (801199c <MX_FREERTOS_Init+0xf4>)
 8011912:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 8011914:	4a22      	ldr	r2, [pc, #136]	@ (80119a0 <MX_FREERTOS_Init+0xf8>)
 8011916:	2100      	movs	r1, #0
 8011918:	4822      	ldr	r0, [pc, #136]	@ (80119a4 <MX_FREERTOS_Init+0xfc>)
 801191a:	f006 fdc1 	bl	80184a0 <osThreadNew>
 801191e:	4b22      	ldr	r3, [pc, #136]	@ (80119a8 <MX_FREERTOS_Init+0x100>)
 8011920:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8011922:	4a22      	ldr	r2, [pc, #136]	@ (80119ac <MX_FREERTOS_Init+0x104>)
 8011924:	2100      	movs	r1, #0
 8011926:	4822      	ldr	r0, [pc, #136]	@ (80119b0 <MX_FREERTOS_Init+0x108>)
 8011928:	f006 fdba 	bl	80184a0 <osThreadNew>
 801192c:	4b21      	ldr	r3, [pc, #132]	@ (80119b4 <MX_FREERTOS_Init+0x10c>)
 801192e:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 8011930:	4a21      	ldr	r2, [pc, #132]	@ (80119b8 <MX_FREERTOS_Init+0x110>)
 8011932:	2100      	movs	r1, #0
 8011934:	4821      	ldr	r0, [pc, #132]	@ (80119bc <MX_FREERTOS_Init+0x114>)
 8011936:	f006 fdb3 	bl	80184a0 <osThreadNew>
 801193a:	4b21      	ldr	r3, [pc, #132]	@ (80119c0 <MX_FREERTOS_Init+0x118>)
 801193c:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 801193e:	4a21      	ldr	r2, [pc, #132]	@ (80119c4 <MX_FREERTOS_Init+0x11c>)
 8011940:	2100      	movs	r1, #0
 8011942:	4821      	ldr	r0, [pc, #132]	@ (80119c8 <MX_FREERTOS_Init+0x120>)
 8011944:	f006 fdac 	bl	80184a0 <osThreadNew>
 8011948:	4b20      	ldr	r3, [pc, #128]	@ (80119cc <MX_FREERTOS_Init+0x124>)
 801194a:	6018      	str	r0, [r3, #0]
  WatchDogHandle = osThreadNew(StartWatchDogTask, NULL, &WatchDog_attributes);
 801194c:	4a20      	ldr	r2, [pc, #128]	@ (80119d0 <MX_FREERTOS_Init+0x128>)
 801194e:	2100      	movs	r1, #0
 8011950:	4820      	ldr	r0, [pc, #128]	@ (80119d4 <MX_FREERTOS_Init+0x12c>)
 8011952:	f006 fda5 	bl	80184a0 <osThreadNew>
 8011956:	4b20      	ldr	r3, [pc, #128]	@ (80119d8 <MX_FREERTOS_Init+0x130>)
 8011958:	6018      	str	r0, [r3, #0]
}
 801195a:	bd08      	pop	{r3, pc}
 801195c:	080362b8 	.word	0x080362b8
 8011960:	20000890 	.word	0x20000890
 8011964:	080362a8 	.word	0x080362a8
 8011968:	2000088c 	.word	0x2000088c
 801196c:	08036328 	.word	0x08036328
 8011970:	200008a4 	.word	0x200008a4
 8011974:	08036310 	.word	0x08036310
 8011978:	200008a0 	.word	0x200008a0
 801197c:	080362f8 	.word	0x080362f8
 8011980:	2000089c 	.word	0x2000089c
 8011984:	080362e0 	.word	0x080362e0
 8011988:	20000898 	.word	0x20000898
 801198c:	080362c8 	.word	0x080362c8
 8011990:	20000894 	.word	0x20000894
 8011994:	080363f4 	.word	0x080363f4
 8011998:	08011a05 	.word	0x08011a05
 801199c:	200008bc 	.word	0x200008bc
 80119a0:	080363d0 	.word	0x080363d0
 80119a4:	0801112d 	.word	0x0801112d
 80119a8:	200008b8 	.word	0x200008b8
 80119ac:	080363ac 	.word	0x080363ac
 80119b0:	08011295 	.word	0x08011295
 80119b4:	200008b4 	.word	0x200008b4
 80119b8:	08036388 	.word	0x08036388
 80119bc:	0801140d 	.word	0x0801140d
 80119c0:	200008b0 	.word	0x200008b0
 80119c4:	08036364 	.word	0x08036364
 80119c8:	080116c5 	.word	0x080116c5
 80119cc:	200008ac 	.word	0x200008ac
 80119d0:	08036340 	.word	0x08036340
 80119d4:	080117f9 	.word	0x080117f9
 80119d8:	200008a8 	.word	0x200008a8

080119dc <EthResetBegin>:
void EthResetBegin(void){
 80119dc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 80119de:	2200      	movs	r2, #0
 80119e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119e4:	4801      	ldr	r0, [pc, #4]	@ (80119ec <EthResetBegin+0x10>)
 80119e6:	f004 fe6a 	bl	80166be <HAL_GPIO_WritePin>
}
 80119ea:	bd08      	pop	{r3, pc}
 80119ec:	40020000 	.word	0x40020000

080119f0 <EthResetEnd>:
void EthResetEnd(void){
 80119f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 80119f2:	2201      	movs	r2, #1
 80119f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119f8:	4801      	ldr	r0, [pc, #4]	@ (8011a00 <EthResetEnd+0x10>)
 80119fa:	f004 fe60 	bl	80166be <HAL_GPIO_WritePin>
}
 80119fe:	bd08      	pop	{r3, pc}
 8011a00:	40020000 	.word	0x40020000

08011a04 <StartEthTask>:
{
 8011a04:	b530      	push	{r4, r5, lr}
 8011a06:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 8011a08:	ad22      	add	r5, sp, #136	@ 0x88
 8011a0a:	4b64      	ldr	r3, [pc, #400]	@ (8011b9c <StartEthTask+0x198>)
 8011a0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011a0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 8011a12:	ac02      	add	r4, sp, #8
 8011a14:	2280      	movs	r2, #128	@ 0x80
 8011a16:	2100      	movs	r1, #0
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f01a ffd9 	bl	802c9d0 <memset>
 8011a1e:	2340      	movs	r3, #64	@ 0x40
 8011a20:	f88d 3008 	strb.w	r3, [sp, #8]
 8011a24:	2322      	movs	r3, #34	@ 0x22
 8011a26:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 8011a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8011ba0 <StartEthTask+0x19c>)
 8011a2c:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 8011a2e:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 8011a32:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 8011a34:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 8011a38:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 8011a3a:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 8011a3e:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 8011a40:	f88d 300d 	strb.w	r3, [sp, #13]
 8011a44:	2301      	movs	r3, #1
 8011a46:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8011a4a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011a4e:	4b55      	ldr	r3, [pc, #340]	@ (8011ba4 <StartEthTask+0x1a0>)
 8011a50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a52:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 8011a54:	4b54      	ldr	r3, [pc, #336]	@ (8011ba8 <StartEthTask+0x1a4>)
 8011a56:	aa58      	add	r2, sp, #352	@ 0x160
 8011a58:	601a      	str	r2, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 8011a5a:	605c      	str	r4, [r3, #4]
  while (mg_fs_mounted() == 0){
 8011a5c:	e003      	b.n	8011a66 <StartEthTask+0x62>
	  osDelay(500);
 8011a5e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a62:	f006 fd7c 	bl	801855e <osDelay>
  while (mg_fs_mounted() == 0){
 8011a66:	f009 f9ab 	bl	801adc0 <mg_fs_mounted>
 8011a6a:	2800      	cmp	r0, #0
 8011a6c:	d0f7      	beq.n	8011a5e <StartEthTask+0x5a>
  mg_mgr_init(&mgr);        // Mongoose event manager
 8011a6e:	a858      	add	r0, sp, #352	@ 0x160
 8011a70:	f011 fda0 	bl	80235b4 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 8011a74:	4b4d      	ldr	r3, [pc, #308]	@ (8011bac <StartEthTask+0x1a8>)
 8011a76:	2203      	movs	r2, #3
 8011a78:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011a7a:	f002 ff57 	bl	801492c <dash_hdl>
 8011a7e:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011a80:	e00f      	b.n	8011aa2 <StartEthTask+0x9e>
	  EthResetBegin();
 8011a82:	f7ff ffab 	bl	80119dc <EthResetBegin>
	  osDelay(500);
 8011a86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a8a:	f006 fd68 	bl	801855e <osDelay>
	  EthResetEnd();
 8011a8e:	f7ff ffaf 	bl	80119f0 <EthResetEnd>
	  osDelay(2000);
 8011a92:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011a96:	f006 fd62 	bl	801855e <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011a9a:	a902      	add	r1, sp, #8
 8011a9c:	a858      	add	r0, sp, #352	@ 0x160
 8011a9e:	f017 f9b9 	bl	8028e14 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011aa2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d0eb      	beq.n	8011a82 <StartEthTask+0x7e>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011aaa:	2106      	movs	r1, #6
 8011aac:	a802      	add	r0, sp, #8
 8011aae:	f003 fba5 	bl	80151fc <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 8011ab2:	483f      	ldr	r0, [pc, #252]	@ (8011bb0 <StartEthTask+0x1ac>)
 8011ab4:	f002 ff48 	bl	8014948 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8011ba8 <StartEthTask+0x1a4>)
 8011aba:	4622      	mov	r2, r4
 8011abc:	493d      	ldr	r1, [pc, #244]	@ (8011bb4 <StartEthTask+0x1b0>)
 8011abe:	a858      	add	r0, sp, #352	@ 0x160
 8011ac0:	f015 fbd6 	bl	8027270 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011ac4:	e006      	b.n	8011ad4 <StartEthTask+0xd0>
    mg_mgr_poll(&mgr, 1);
 8011ac6:	2101      	movs	r1, #1
 8011ac8:	a858      	add	r0, sp, #352	@ 0x160
 8011aca:	f017 ff3d 	bl	8029948 <mg_mgr_poll>
    osDelay(1);
 8011ace:	2001      	movs	r0, #1
 8011ad0:	f006 fd45 	bl	801855e <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011ad4:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011ad8:	2b03      	cmp	r3, #3
 8011ada:	d1f4      	bne.n	8011ac6 <StartEthTask+0xc2>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011adc:	4b32      	ldr	r3, [pc, #200]	@ (8011ba8 <StartEthTask+0x1a4>)
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011ae2:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011ae4:	9301      	str	r3, [sp, #4]
 8011ae6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011af0:	b2d2      	uxtb	r2, r2
 8011af2:	4931      	ldr	r1, [pc, #196]	@ (8011bb8 <StartEthTask+0x1b4>)
 8011af4:	2001      	movs	r0, #1
 8011af6:	f000 f9fd 	bl	8011ef4 <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011afa:	2200      	movs	r2, #0
 8011afc:	4611      	mov	r1, r2
 8011afe:	a826      	add	r0, sp, #152	@ 0x98
 8011b00:	f7ff fda6 	bl	8011650 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 8011b04:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011b08:	b1eb      	cbz	r3, 8011b46 <StartEthTask+0x142>
	  logging(L_INFO, "MQTT function enabled.");
 8011b0a:	492c      	ldr	r1, [pc, #176]	@ (8011bbc <StartEthTask+0x1b8>)
 8011b0c:	2001      	movs	r0, #1
 8011b0e:	f000 f9f1 	bl	8011ef4 <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 8011b12:	4b27      	ldr	r3, [pc, #156]	@ (8011bb0 <StartEthTask+0x1ac>)
 8011b14:	9301      	str	r3, [sp, #4]
 8011b16:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 8011b1a:	9300      	str	r3, [sp, #0]
 8011b1c:	ab47      	add	r3, sp, #284	@ 0x11c
 8011b1e:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8011b22:	a902      	add	r1, sp, #8
 8011b24:	a858      	add	r0, sp, #352	@ 0x160
 8011b26:	f003 faa7 	bl	8015078 <mqtt_init>
  start_sntp(&mgr);
 8011b2a:	a858      	add	r0, sp, #352	@ 0x160
 8011b2c:	f003 ff3c 	bl	80159a8 <start_sntp>
  ssdp_start_server(&mgr, &mif);
 8011b30:	a902      	add	r1, sp, #8
 8011b32:	a858      	add	r0, sp, #352	@ 0x160
 8011b34:	f004 f904 	bl	8015d40 <ssdp_start_server>
  init_mb_tcp(&mgr);
 8011b38:	a858      	add	r0, sp, #352	@ 0x160
 8011b3a:	f001 f83b 	bl	8012bb4 <init_mb_tcp>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 8011b3e:	f007 ff6b 	bl	8019a18 <xTaskGetTickCount>
 8011b42:	4605      	mov	r5, r0
 8011b44:	e008      	b.n	8011b58 <StartEthTask+0x154>
	  logging(L_INFO, "MQTT function disabled");
 8011b46:	491e      	ldr	r1, [pc, #120]	@ (8011bc0 <StartEthTask+0x1bc>)
 8011b48:	2001      	movs	r0, #1
 8011b4a:	f000 f9d3 	bl	8011ef4 <logging>
 8011b4e:	e7ec      	b.n	8011b2a <StartEthTask+0x126>
      osDelay(1);
 8011b50:	2001      	movs	r0, #1
 8011b52:	f006 fd04 	bl	801855e <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 8011b56:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 8011b58:	f007 ff5e 	bl	8019a18 <xTaskGetTickCount>
 8011b5c:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011b5e:	1b41      	subs	r1, r0, r5
 8011b60:	a858      	add	r0, sp, #352	@ 0x160
 8011b62:	f017 fef1 	bl	8029948 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 8011b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b68:	68db      	ldr	r3, [r3, #12]
 8011b6a:	a802      	add	r0, sp, #8
 8011b6c:	4798      	blx	r3
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d1ee      	bne.n	8011b50 <StartEthTask+0x14c>
    	  EthResetBegin(); //enable reset state w5500
 8011b72:	f7ff ff33 	bl	80119dc <EthResetBegin>
    	  osDelay(100);
 8011b76:	2064      	movs	r0, #100	@ 0x64
 8011b78:	f006 fcf1 	bl	801855e <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 8011b7c:	f7ff ff38 	bl	80119f0 <EthResetEnd>
    	  osDelay(3000);
 8011b80:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011b84:	f006 fceb 	bl	801855e <osDelay>
    	  mif.driver->init(&mif);
 8011b88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	a802      	add	r0, sp, #8
 8011b8e:	4798      	blx	r3
    	  osDelay(7000);
 8011b90:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011b94:	f006 fce3 	bl	801855e <osDelay>
 8011b98:	e7e5      	b.n	8011b66 <StartEthTask+0x162>
 8011b9a:	bf00      	nop
 8011b9c:	08035d04 	.word	0x08035d04
 8011ba0:	1fff7a00 	.word	0x1fff7a00
 8011ba4:	20000118 	.word	0x20000118
 8011ba8:	200008c0 	.word	0x200008c0
 8011bac:	2000012c 	.word	0x2000012c
 8011bb0:	08011651 	.word	0x08011651
 8011bb4:	080361d0 	.word	0x080361d0
 8011bb8:	0803618c 	.word	0x0803618c
 8011bbc:	080361e4 	.word	0x080361e4
 8011bc0:	080361fc 	.word	0x080361fc

08011bc4 <eMBRegDiscreteCB>:
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){

	eMBErrorCode eStatus = MB_ENOERR;

	//usAddress --; /* to c-style address */
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011bc4:	b20b      	sxth	r3, r1
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	dd20      	ble.n	8011c0c <eMBRegDiscreteCB+0x48>
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){
 8011bca:	b570      	push	{r4, r5, r6, lr}
 8011bcc:	b082      	sub	sp, #8
 8011bce:	4606      	mov	r6, r0
 8011bd0:	4615      	mov	r5, r2
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011bd2:	188b      	adds	r3, r1, r2
 8011bd4:	2b04      	cmp	r3, #4
 8011bd6:	dd02      	ble.n	8011bde <eMBRegDiscreteCB+0x1a>

		for(int i = usAddress; i < usNDiscrete; i++){
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
		}
	}else{
		eStatus = MB_ENOREG;
 8011bd8:	2001      	movs	r0, #1
	}
	return eStatus;
}
 8011bda:	b002      	add	sp, #8
 8011bdc:	bd70      	pop	{r4, r5, r6, pc}
		usAddress --; /* to c-style address */
 8011bde:	1e4c      	subs	r4, r1, #1
 8011be0:	b2a4      	uxth	r4, r4
		RW_parameters_from_queue(input, S_INPUTS, S_READ);
 8011be2:	2200      	movs	r2, #0
 8011be4:	2101      	movs	r1, #1
 8011be6:	a801      	add	r0, sp, #4
 8011be8:	f7ff fd32 	bl	8011650 <RW_parameters_from_queue>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011bec:	e00a      	b.n	8011c04 <eMBRegDiscreteCB+0x40>
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
 8011bee:	f104 0308 	add.w	r3, r4, #8
 8011bf2:	446b      	add	r3, sp
 8011bf4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	b2a1      	uxth	r1, r4
 8011bfc:	4630      	mov	r0, r6
 8011bfe:	f000 fe2f 	bl	8012860 <xMBUtilSetBits>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011c02:	3401      	adds	r4, #1
 8011c04:	42a5      	cmp	r5, r4
 8011c06:	dcf2      	bgt.n	8011bee <eMBRegDiscreteCB+0x2a>
	eMBErrorCode eStatus = MB_ENOERR;
 8011c08:	2000      	movs	r0, #0
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011c0a:	e7e6      	b.n	8011bda <eMBRegDiscreteCB+0x16>
		eStatus = MB_ENOREG;
 8011c0c:	2001      	movs	r0, #1
}
 8011c0e:	4770      	bx	lr

08011c10 <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 8011c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c12:	b083      	sub	sp, #12
 8011c14:	4616      	mov	r6, r2
	eMBErrorCode eStatus = MB_ENOERR;

	if (((int16_t) usAddress >= OUTPUTS_FIRST_INDEX) && (usAddress + usNCoils <= OUTPUTS_FIRST_INDEX + OUTPUTS_COUNT)){
 8011c16:	b20a      	sxth	r2, r1
 8011c18:	2a00      	cmp	r2, #0
 8011c1a:	dd43      	ble.n	8011ca4 <eMBRegCoilsCB+0x94>
 8011c1c:	4605      	mov	r5, r0
 8011c1e:	461f      	mov	r7, r3
 8011c20:	198b      	adds	r3, r1, r6
 8011c22:	2b04      	cmp	r3, #4
 8011c24:	dc41      	bgt.n	8011caa <eMBRegCoilsCB+0x9a>
		outputs_state_t outputs;

		switch (eMode) {
 8011c26:	b327      	cbz	r7, 8011c72 <eMBRegCoilsCB+0x62>
 8011c28:	2f01      	cmp	r7, #1
 8011c2a:	d139      	bne.n	8011ca0 <eMBRegCoilsCB+0x90>

			case MB_REG_WRITE:
				usAddress --; /* to c-style address */
 8011c2c:	3901      	subs	r1, #1
 8011c2e:	b28c      	uxth	r4, r1
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011c30:	2200      	movs	r2, #0
 8011c32:	2102      	movs	r1, #2
 8011c34:	a801      	add	r0, sp, #4
 8011c36:	f7ff fd0b 	bl	8011650 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011c3a:	4627      	mov	r7, r4
 8011c3c:	e00f      	b.n	8011c5e <eMBRegCoilsCB+0x4e>
					UCHAR wbit = xMBUtilGetBits(pucRegBuffer, i, 1 );
 8011c3e:	2201      	movs	r2, #1
 8011c40:	b2b9      	uxth	r1, r7
 8011c42:	4628      	mov	r0, r5
 8011c44:	f000 fe40 	bl	80128c8 <xMBUtilGetBits>
					outputs[i] = xMBUtilGetBits(pucRegBuffer, 0, 1 );
 8011c48:	2201      	movs	r2, #1
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	f000 fe3b 	bl	80128c8 <xMBUtilGetBits>
 8011c52:	f107 0308 	add.w	r3, r7, #8
 8011c56:	446b      	add	r3, sp
 8011c58:	f803 0c04 	strb.w	r0, [r3, #-4]
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011c5c:	3701      	adds	r7, #1
 8011c5e:	1933      	adds	r3, r6, r4
 8011c60:	42bb      	cmp	r3, r7
 8011c62:	dcec      	bgt.n	8011c3e <eMBRegCoilsCB+0x2e>
					//xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
				}
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_WRITE);
 8011c64:	2201      	movs	r2, #1
 8011c66:	2102      	movs	r1, #2
 8011c68:	a801      	add	r0, sp, #4
 8011c6a:	f7ff fcf1 	bl	8011650 <RW_parameters_from_queue>
				return MB_ENOERR;
 8011c6e:	2000      	movs	r0, #0
 8011c70:	e019      	b.n	8011ca6 <eMBRegCoilsCB+0x96>
				break;
			case MB_REG_READ:
				usAddress --; /* to c-style address */
 8011c72:	1e4c      	subs	r4, r1, #1
 8011c74:	b2a4      	uxth	r4, r4
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011c76:	2200      	movs	r2, #0
 8011c78:	2102      	movs	r1, #2
 8011c7a:	a801      	add	r0, sp, #4
 8011c7c:	f7ff fce8 	bl	8011650 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils; i++){
 8011c80:	e00a      	b.n	8011c98 <eMBRegCoilsCB+0x88>
					xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
 8011c82:	f104 0308 	add.w	r3, r4, #8
 8011c86:	446b      	add	r3, sp
 8011c88:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	b2a1      	uxth	r1, r4
 8011c90:	4628      	mov	r0, r5
 8011c92:	f000 fde5 	bl	8012860 <xMBUtilSetBits>
				for(int i = usAddress; i < usNCoils; i++){
 8011c96:	3401      	adds	r4, #1
 8011c98:	42a6      	cmp	r6, r4
 8011c9a:	dcf2      	bgt.n	8011c82 <eMBRegCoilsCB+0x72>
				}
				return MB_ENOERR;
 8011c9c:	4638      	mov	r0, r7
 8011c9e:	e002      	b.n	8011ca6 <eMBRegCoilsCB+0x96>
		switch (eMode) {
 8011ca0:	2001      	movs	r0, #1
				break;
			default:
				return MB_ENOREG;
				break;
 8011ca2:	e000      	b.n	8011ca6 <eMBRegCoilsCB+0x96>
		}
	}
	return MB_ENOREG;
 8011ca4:	2001      	movs	r0, #1
}
 8011ca6:	b003      	add	sp, #12
 8011ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return MB_ENOREG;
 8011caa:	2001      	movs	r0, #1
 8011cac:	e7fb      	b.n	8011ca6 <eMBRegCoilsCB+0x96>

08011cae <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	return MB_ENOREG;
}
 8011cae:	2001      	movs	r0, #1
 8011cb0:	4770      	bx	lr

08011cb2 <eMBRegHoldingCB>:

eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
	return MB_ENOREG;
}
 8011cb2:	2001      	movs	r0, #1
 8011cb4:	4770      	bx	lr
	...

08011cb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cbc:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011cbe:	2400      	movs	r4, #0
 8011cc0:	9403      	str	r4, [sp, #12]
 8011cc2:	9404      	str	r4, [sp, #16]
 8011cc4:	9405      	str	r4, [sp, #20]
 8011cc6:	9406      	str	r4, [sp, #24]
 8011cc8:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011cca:	9400      	str	r4, [sp, #0]
 8011ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8011dc0 <MX_GPIO_Init+0x108>)
 8011cce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cd0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011cd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cd8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8011cdc:	9200      	str	r2, [sp, #0]
 8011cde:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011ce0:	9401      	str	r4, [sp, #4]
 8011ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ce4:	f042 0201 	orr.w	r2, r2, #1
 8011ce8:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cec:	f002 0201 	and.w	r2, r2, #1
 8011cf0:	9201      	str	r2, [sp, #4]
 8011cf2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011cf4:	9402      	str	r4, [sp, #8]
 8011cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cf8:	f042 0202 	orr.w	r2, r2, #2
 8011cfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d00:	f003 0302 	and.w	r3, r3, #2
 8011d04:	9302      	str	r3, [sp, #8]
 8011d06:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011d08:	4e2e      	ldr	r6, [pc, #184]	@ (8011dc4 <MX_GPIO_Init+0x10c>)
 8011d0a:	4622      	mov	r2, r4
 8011d0c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011d10:	4630      	mov	r0, r6
 8011d12:	f004 fcd4 	bl	80166be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8011d16:	4d2c      	ldr	r5, [pc, #176]	@ (8011dc8 <MX_GPIO_Init+0x110>)
 8011d18:	4622      	mov	r2, r4
 8011d1a:	2107      	movs	r1, #7
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	f004 fcce 	bl	80166be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011d22:	2201      	movs	r2, #1
 8011d24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011d28:	4628      	mov	r0, r5
 8011d2a:	f004 fcc8 	bl	80166be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011d2e:	2201      	movs	r2, #1
 8011d30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011d34:	4630      	mov	r0, r6
 8011d36:	f004 fcc2 	bl	80166be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : input1_Pin input2_Pin input3_Pin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8011d3a:	f04f 0907 	mov.w	r9, #7
 8011d3e:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011d42:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011d44:	f04f 0802 	mov.w	r8, #2
 8011d48:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d4c:	a903      	add	r1, sp, #12
 8011d4e:	4630      	mov	r0, r6
 8011d50:	f004 fb42 	bl	80163d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : coil1_Pin coil2_Pin coil3_Pin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8011d54:	23e0      	movs	r3, #224	@ 0xe0
 8011d56:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d58:	2701      	movs	r7, #1
 8011d5a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d5c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d5e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d60:	a903      	add	r1, sp, #12
 8011d62:	4630      	mov	r0, r6
 8011d64:	f004 fb38 	bl	80163d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8011d68:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d6c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d6e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d70:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d72:	a903      	add	r1, sp, #12
 8011d74:	4628      	mov	r0, r5
 8011d76:	f004 fb2f 	bl	80163d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8011d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011d7e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d80:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d82:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d84:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8011d88:	a903      	add	r1, sp, #12
 8011d8a:	4628      	mov	r0, r5
 8011d8c:	f004 fb24 	bl	80163d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_RST_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8011d90:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8011d94:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d96:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d98:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d9a:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d9e:	a903      	add	r1, sp, #12
 8011da0:	4630      	mov	r0, r6
 8011da2:	f004 fb19 	bl	80163d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8011da6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011daa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011dac:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dae:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8011db0:	a903      	add	r1, sp, #12
 8011db2:	4628      	mov	r0, r5
 8011db4:	f004 fb10 	bl	80163d8 <HAL_GPIO_Init>

}
 8011db8:	b009      	add	sp, #36	@ 0x24
 8011dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dbe:	bf00      	nop
 8011dc0:	40023800 	.word	0x40023800
 8011dc4:	40020000 	.word	0x40020000
 8011dc8:	40020400 	.word	0x40020400

08011dcc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8011dcc:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011dce:	480b      	ldr	r0, [pc, #44]	@ (8011dfc <MX_I2C1_Init+0x30>)
 8011dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8011e00 <MX_I2C1_Init+0x34>)
 8011dd2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8011dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8011e04 <MX_I2C1_Init+0x38>)
 8011dd6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011ddc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011dde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011de2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011de4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011de6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011de8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011dea:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011dec:	f004 fe08 	bl	8016a00 <HAL_I2C_Init>
 8011df0:	b900      	cbnz	r0, 8011df4 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011df2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011df4:	f000 f928 	bl	8012048 <Error_Handler>
}
 8011df8:	e7fb      	b.n	8011df2 <MX_I2C1_Init+0x26>
 8011dfa:	bf00      	nop
 8011dfc:	200008c8 	.word	0x200008c8
 8011e00:	40005400 	.word	0x40005400
 8011e04:	00030d40 	.word	0x00030d40

08011e08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011e08:	b530      	push	{r4, r5, lr}
 8011e0a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	9303      	str	r3, [sp, #12]
 8011e10:	9304      	str	r3, [sp, #16]
 8011e12:	9305      	str	r3, [sp, #20]
 8011e14:	9306      	str	r3, [sp, #24]
 8011e16:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8011e18:	6802      	ldr	r2, [r0, #0]
 8011e1a:	4b15      	ldr	r3, [pc, #84]	@ (8011e70 <HAL_I2C_MspInit+0x68>)
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d001      	beq.n	8011e24 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8011e20:	b009      	add	sp, #36	@ 0x24
 8011e22:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011e24:	2500      	movs	r5, #0
 8011e26:	9501      	str	r5, [sp, #4]
 8011e28:	4c12      	ldr	r4, [pc, #72]	@ (8011e74 <HAL_I2C_MspInit+0x6c>)
 8011e2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e2c:	f043 0302 	orr.w	r3, r3, #2
 8011e30:	6323      	str	r3, [r4, #48]	@ 0x30
 8011e32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e34:	f003 0302 	and.w	r3, r3, #2
 8011e38:	9301      	str	r3, [sp, #4]
 8011e3a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011e3c:	23c0      	movs	r3, #192	@ 0xc0
 8011e3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011e40:	2312      	movs	r3, #18
 8011e42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011e44:	2301      	movs	r3, #1
 8011e46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e48:	2303      	movs	r3, #3
 8011e4a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011e4c:	2304      	movs	r3, #4
 8011e4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011e50:	a903      	add	r1, sp, #12
 8011e52:	4809      	ldr	r0, [pc, #36]	@ (8011e78 <HAL_I2C_MspInit+0x70>)
 8011e54:	f004 fac0 	bl	80163d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011e58:	9502      	str	r5, [sp, #8]
 8011e5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011e60:	6423      	str	r3, [r4, #64]	@ 0x40
 8011e62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011e68:	9302      	str	r3, [sp, #8]
 8011e6a:	9b02      	ldr	r3, [sp, #8]
}
 8011e6c:	e7d8      	b.n	8011e20 <HAL_I2C_MspInit+0x18>
 8011e6e:	bf00      	nop
 8011e70:	40005400 	.word	0x40005400
 8011e74:	40023800 	.word	0x40023800
 8011e78:	40020400 	.word	0x40020400

08011e7c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8011e7c:	6802      	ldr	r2, [r0, #0]
 8011e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8011ea8 <HAL_I2C_MspDeInit+0x2c>)
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d000      	beq.n	8011e86 <HAL_I2C_MspDeInit+0xa>
 8011e84:	4770      	bx	lr
{
 8011e86:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8011e88:	4a08      	ldr	r2, [pc, #32]	@ (8011eac <HAL_I2C_MspDeInit+0x30>)
 8011e8a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011e8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011e90:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8011e92:	4c07      	ldr	r4, [pc, #28]	@ (8011eb0 <HAL_I2C_MspDeInit+0x34>)
 8011e94:	2140      	movs	r1, #64	@ 0x40
 8011e96:	4620      	mov	r0, r4
 8011e98:	f004 fb82 	bl	80165a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8011e9c:	2180      	movs	r1, #128	@ 0x80
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f004 fb7e 	bl	80165a0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8011ea4:	bd10      	pop	{r4, pc}
 8011ea6:	bf00      	nop
 8011ea8:	40005400 	.word	0x40005400
 8011eac:	40023800 	.word	0x40023800
 8011eb0:	40020400 	.word	0x40020400

08011eb4 <proto>:
#define time_ms_now() mg_now()

logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 8011eb4:	b084      	sub	sp, #16
 8011eb6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011eba:	b004      	add	sp, #16
 8011ebc:	4770      	bx	lr

08011ebe <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 8011ebe:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8011ec0:	fb01 f400 	mul.w	r4, r1, r0
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	f008 fd4f 	bl	801a968 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8011eca:	4605      	mov	r5, r0
 8011ecc:	b118      	cbz	r0, 8011ed6 <mg_calloc+0x18>
 8011ece:	4622      	mov	r2, r4
 8011ed0:	2100      	movs	r1, #0
 8011ed2:	f01a fd7d 	bl	802c9d0 <memset>
  return p;
}
 8011ed6:	4628      	mov	r0, r5
 8011ed8:	bd38      	pop	{r3, r4, r5, pc}
	...

08011edc <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 8011edc:	b108      	cbz	r0, 8011ee2 <reg_logging_fn+0x6>
		_send_log_mess = fn;
 8011ede:	4a01      	ldr	r2, [pc, #4]	@ (8011ee4 <reg_logging_fn+0x8>)
 8011ee0:	6010      	str	r0, [r2, #0]
	}
}
 8011ee2:	4770      	bx	lr
 8011ee4:	20000000 	.word	0x20000000

08011ee8 <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 8011ee8:	4b01      	ldr	r3, [pc, #4]	@ (8011ef0 <logger_set_level+0x8>)
 8011eea:	7018      	strb	r0, [r3, #0]
}
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop
 8011ef0:	20000928 	.word	0x20000928

08011ef4 <logging>:

void logging(logging_level_t level, const char *format, ...){
 8011ef4:	b40e      	push	{r1, r2, r3}
 8011ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ef8:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 8011efc:	4b44      	ldr	r3, [pc, #272]	@ (8012010 <logging+0x11c>)
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	4283      	cmp	r3, r0
 8011f02:	d905      	bls.n	8011f10 <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 8011f04:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 8011f08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011f0c:	b003      	add	sp, #12
 8011f0e:	4770      	bx	lr
 8011f10:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8011f12:	2101      	movs	r1, #1
 8011f14:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8011f18:	f7ff ffd1 	bl	8011ebe <mg_calloc>
    if (!tmp_buf){
 8011f1c:	4605      	mov	r5, r0
 8011f1e:	2800      	cmp	r0, #0
 8011f20:	d0f0      	beq.n	8011f04 <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 8011f22:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011f26:	2100      	movs	r1, #0
 8011f28:	a85b      	add	r0, sp, #364	@ 0x16c
 8011f2a:	f01a fd51 	bl	802c9d0 <memset>
    mess.log_level = level;
 8011f2e:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 8011f32:	f017 fd9d 	bl	8029a70 <mg_now>
 8011f36:	f7fe fb41 	bl	80105bc <__aeabi_ul2d>
 8011f3a:	4606      	mov	r6, r0
 8011f3c:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 8011f3e:	2200      	movs	r2, #0
 8011f40:	4b34      	ldr	r3, [pc, #208]	@ (8012014 <logging+0x120>)
 8011f42:	f7fe fc9b 	bl	801087c <__aeabi_ddiv>
 8011f46:	f7fe ff33 	bl	8010db0 <__aeabi_d2lz>
 8011f4a:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 8011f4e:	a94f      	add	r1, sp, #316	@ 0x13c
 8011f50:	a858      	add	r0, sp, #352	@ 0x160
 8011f52:	f01a fdd3 	bl	802cafc <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 8011f56:	ab4f      	add	r3, sp, #316	@ 0x13c
 8011f58:	4a2f      	ldr	r2, [pc, #188]	@ (8012018 <logging+0x124>)
 8011f5a:	2140      	movs	r1, #64	@ 0x40
 8011f5c:	a83f      	add	r0, sp, #252	@ 0xfc
 8011f5e:	f01b fbdf 	bl	802d720 <strftime>
 8011f62:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 8011f64:	4630      	mov	r0, r6
 8011f66:	4639      	mov	r1, r7
 8011f68:	f7fe fe0e 	bl	8010b88 <__aeabi_d2iz>
 8011f6c:	4a2b      	ldr	r2, [pc, #172]	@ (801201c <logging+0x128>)
 8011f6e:	fb82 3200 	smull	r3, r2, r2, r0
 8011f72:	17c3      	asrs	r3, r0, #31
 8011f74:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8011f78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011f7c:	fb02 0313 	mls	r3, r2, r3, r0
 8011f80:	4a27      	ldr	r2, [pc, #156]	@ (8012020 <logging+0x12c>)
 8011f82:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 8011f86:	a83f      	add	r0, sp, #252	@ 0xfc
 8011f88:	4420      	add	r0, r4
 8011f8a:	f019 fff7 	bl	802bf7c <snprintf>
 8011f8e:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 8011f90:	1c63      	adds	r3, r4, #1
 8011f92:	2220      	movs	r2, #32
 8011f94:	a93f      	add	r1, sp, #252	@ 0xfc
 8011f96:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 8011f98:	2200      	movs	r2, #0
 8011f9a:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 8011f9c:	aba2      	add	r3, sp, #648	@ 0x288
 8011f9e:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8011fa0:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 8011fa4:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 8011fa6:	21fd      	movs	r1, #253	@ 0xfd
 8011fa8:	4630      	mov	r0, r6
 8011faa:	f01a faaf 	bl	802c50c <vsnprintf>
 8011fae:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 8011fb0:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 8011fb4:	9601      	str	r6, [sp, #4]
 8011fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8012024 <logging+0x130>)
 8011fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fbc:	9300      	str	r3, [sp, #0]
 8011fbe:	ab3f      	add	r3, sp, #252	@ 0xfc
 8011fc0:	4a19      	ldr	r2, [pc, #100]	@ (8012028 <logging+0x134>)
 8011fc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011fc6:	4628      	mov	r0, r5
 8011fc8:	f019 ffd8 	bl	802bf7c <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 8011fcc:	2cf5      	cmp	r4, #245	@ 0xf5
 8011fce:	d81b      	bhi.n	8012008 <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 8011fd0:	4628      	mov	r0, r5
 8011fd2:	f7fe f965 	bl	80102a0 <strlen>
 8011fd6:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 8011fda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011fde:	4629      	mov	r1, r5
 8011fe0:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 8011fe4:	f01a fd3b 	bl	802ca5e <strncpy>
    if (_send_log_mess) {
 8011fe8:	4b10      	ldr	r3, [pc, #64]	@ (801202c <logging+0x138>)
 8011fea:	681e      	ldr	r6, [r3, #0]
 8011fec:	b146      	cbz	r6, 8012000 <logging+0x10c>
        _send_log_mess(mess);
 8011fee:	ac5b      	add	r4, sp, #364	@ 0x16c
 8011ff0:	22f2      	movs	r2, #242	@ 0xf2
 8011ff2:	a95f      	add	r1, sp, #380	@ 0x17c
 8011ff4:	4668      	mov	r0, sp
 8011ff6:	f01b ff27 	bl	802de48 <memcpy>
 8011ffa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011ffe:	47b0      	blx	r6
    free(tmp_buf);
 8012000:	4628      	mov	r0, r5
 8012002:	f008 fd33 	bl	801aa6c <vPortFree>
 8012006:	e77d      	b.n	8011f04 <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 8012008:	23f6      	movs	r3, #246	@ 0xf6
 801200a:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 801200e:	e7e4      	b.n	8011fda <logging+0xe6>
 8012010:	20000928 	.word	0x20000928
 8012014:	408f4000 	.word	0x408f4000
 8012018:	08036418 	.word	0x08036418
 801201c:	10624dd3 	.word	0x10624dd3
 8012020:	0803642c 	.word	0x0803642c
 8012024:	20000004 	.word	0x20000004
 8012028:	08036434 	.word	0x08036434
 801202c:	20000000 	.word	0x20000000

08012030 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012030:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8012032:	6802      	ldr	r2, [r0, #0]
 8012034:	4b03      	ldr	r3, [pc, #12]	@ (8012044 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8012036:	429a      	cmp	r2, r3
 8012038:	d000      	beq.n	801203c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801203a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 801203c:	f004 f928 	bl	8016290 <HAL_IncTick>
}
 8012040:	e7fb      	b.n	801203a <HAL_TIM_PeriodElapsedCallback+0xa>
 8012042:	bf00      	nop
 8012044:	40014000 	.word	0x40014000

08012048 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8012048:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801204a:	e7fe      	b.n	801204a <Error_Handler+0x2>

0801204c <SystemClock_Config>:
{
 801204c:	b500      	push	{lr}
 801204e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012050:	2230      	movs	r2, #48	@ 0x30
 8012052:	2100      	movs	r1, #0
 8012054:	a808      	add	r0, sp, #32
 8012056:	f01a fcbb 	bl	802c9d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801205a:	2300      	movs	r3, #0
 801205c:	9303      	str	r3, [sp, #12]
 801205e:	9304      	str	r3, [sp, #16]
 8012060:	9305      	str	r3, [sp, #20]
 8012062:	9306      	str	r3, [sp, #24]
 8012064:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012066:	9301      	str	r3, [sp, #4]
 8012068:	4a1f      	ldr	r2, [pc, #124]	@ (80120e8 <SystemClock_Config+0x9c>)
 801206a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 801206c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8012070:	6411      	str	r1, [r2, #64]	@ 0x40
 8012072:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8012074:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8012078:	9201      	str	r2, [sp, #4]
 801207a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801207c:	9302      	str	r3, [sp, #8]
 801207e:	4a1b      	ldr	r2, [pc, #108]	@ (80120ec <SystemClock_Config+0xa0>)
 8012080:	6811      	ldr	r1, [r2, #0]
 8012082:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8012086:	6011      	str	r1, [r2, #0]
 8012088:	6812      	ldr	r2, [r2, #0]
 801208a:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 801208e:	9202      	str	r2, [sp, #8]
 8012090:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8012092:	220a      	movs	r2, #10
 8012094:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8012096:	2201      	movs	r2, #1
 8012098:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801209a:	2110      	movs	r1, #16
 801209c:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801209e:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80120a0:	2202      	movs	r2, #2
 80120a2:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80120a4:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80120a6:	2308      	movs	r3, #8
 80120a8:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80120aa:	2364      	movs	r3, #100	@ 0x64
 80120ac:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80120ae:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80120b0:	2304      	movs	r3, #4
 80120b2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80120b4:	a808      	add	r0, sp, #32
 80120b6:	f004 ff27 	bl	8016f08 <HAL_RCC_OscConfig>
 80120ba:	b988      	cbnz	r0, 80120e0 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80120bc:	230f      	movs	r3, #15
 80120be:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80120c0:	2302      	movs	r3, #2
 80120c2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80120c4:	2300      	movs	r3, #0
 80120c6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80120c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80120cc:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80120ce:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80120d0:	2103      	movs	r1, #3
 80120d2:	a803      	add	r0, sp, #12
 80120d4:	f005 f982 	bl	80173dc <HAL_RCC_ClockConfig>
 80120d8:	b920      	cbnz	r0, 80120e4 <SystemClock_Config+0x98>
}
 80120da:	b015      	add	sp, #84	@ 0x54
 80120dc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80120e0:	f7ff ffb2 	bl	8012048 <Error_Handler>
    Error_Handler();
 80120e4:	f7ff ffb0 	bl	8012048 <Error_Handler>
 80120e8:	40023800 	.word	0x40023800
 80120ec:	40007000 	.word	0x40007000

080120f0 <main>:
{
 80120f0:	b500      	push	{lr}
 80120f2:	b083      	sub	sp, #12
 80120f4:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80120f6:	4b10      	ldr	r3, [pc, #64]	@ (8012138 <main+0x48>)
 80120f8:	4a10      	ldr	r2, [pc, #64]	@ (801213c <main+0x4c>)
 80120fa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80120fc:	b662      	cpsie	i
	volatile int i = 1000000;
 80120fe:	4b10      	ldr	r3, [pc, #64]	@ (8012140 <main+0x50>)
 8012100:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8012102:	e002      	b.n	801210a <main+0x1a>
		i--;
 8012104:	9b01      	ldr	r3, [sp, #4]
 8012106:	3b01      	subs	r3, #1
 8012108:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 801210a:	9b01      	ldr	r3, [sp, #4]
 801210c:	2b00      	cmp	r3, #0
 801210e:	dcf9      	bgt.n	8012104 <main+0x14>
  HAL_Init();
 8012110:	f004 f8a4 	bl	801625c <HAL_Init>
  SystemClock_Config();
 8012114:	f7ff ff9a 	bl	801204c <SystemClock_Config>
  MX_GPIO_Init();
 8012118:	f7ff fdce 	bl	8011cb8 <MX_GPIO_Init>
  MX_SPI2_Init();
 801211c:	f000 f834 	bl	8012188 <MX_SPI2_Init>
  MX_I2C1_Init();
 8012120:	f7ff fe54 	bl	8011dcc <MX_I2C1_Init>
  MX_SPI1_Init();
 8012124:	f000 f80e 	bl	8012144 <MX_SPI1_Init>
  osKernelInitialize();
 8012128:	f006 f98c 	bl	8018444 <osKernelInitialize>
  MX_FREERTOS_Init();
 801212c:	f7ff fbbc 	bl	80118a8 <MX_FREERTOS_Init>
  osKernelStart();
 8012130:	f006 f99a 	bl	8018468 <osKernelStart>
  while (1)
 8012134:	e7fe      	b.n	8012134 <main+0x44>
 8012136:	bf00      	nop
 8012138:	e000ed00 	.word	0xe000ed00
 801213c:	08010000 	.word	0x08010000
 8012140:	000f4240 	.word	0x000f4240

08012144 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8012144:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8012146:	480e      	ldr	r0, [pc, #56]	@ (8012180 <MX_SPI1_Init+0x3c>)
 8012148:	4b0e      	ldr	r3, [pc, #56]	@ (8012184 <MX_SPI1_Init+0x40>)
 801214a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801214c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012150:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012152:	2300      	movs	r3, #0
 8012154:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012156:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012158:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801215a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801215c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012160:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8012162:	2208      	movs	r2, #8
 8012164:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012166:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012168:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801216a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 801216c:	230a      	movs	r3, #10
 801216e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8012170:	f005 fb12 	bl	8017798 <HAL_SPI_Init>
 8012174:	b900      	cbnz	r0, 8012178 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8012176:	bd08      	pop	{r3, pc}
    Error_Handler();
 8012178:	f7ff ff66 	bl	8012048 <Error_Handler>
}
 801217c:	e7fb      	b.n	8012176 <MX_SPI1_Init+0x32>
 801217e:	bf00      	nop
 8012180:	20000984 	.word	0x20000984
 8012184:	40013000 	.word	0x40013000

08012188 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8012188:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 801218a:	480d      	ldr	r0, [pc, #52]	@ (80121c0 <MX_SPI2_Init+0x38>)
 801218c:	4b0d      	ldr	r3, [pc, #52]	@ (80121c4 <MX_SPI2_Init+0x3c>)
 801218e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8012190:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012194:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8012196:	2300      	movs	r3, #0
 8012198:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801219a:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 801219c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801219e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80121a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121a4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80121a6:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80121a8:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80121aa:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80121ac:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80121ae:	230a      	movs	r3, #10
 80121b0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80121b2:	f005 faf1 	bl	8017798 <HAL_SPI_Init>
 80121b6:	b900      	cbnz	r0, 80121ba <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80121b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80121ba:	f7ff ff45 	bl	8012048 <Error_Handler>
}
 80121be:	e7fb      	b.n	80121b8 <MX_SPI2_Init+0x30>
 80121c0:	2000092c 	.word	0x2000092c
 80121c4:	40003800 	.word	0x40003800

080121c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80121c8:	b500      	push	{lr}
 80121ca:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121cc:	2300      	movs	r3, #0
 80121ce:	9305      	str	r3, [sp, #20]
 80121d0:	9306      	str	r3, [sp, #24]
 80121d2:	9307      	str	r3, [sp, #28]
 80121d4:	9308      	str	r3, [sp, #32]
 80121d6:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 80121d8:	6803      	ldr	r3, [r0, #0]
 80121da:	4a28      	ldr	r2, [pc, #160]	@ (801227c <HAL_SPI_MspInit+0xb4>)
 80121dc:	4293      	cmp	r3, r2
 80121de:	d005      	beq.n	80121ec <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 80121e0:	4a27      	ldr	r2, [pc, #156]	@ (8012280 <HAL_SPI_MspInit+0xb8>)
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d025      	beq.n	8012232 <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80121e6:	b00b      	add	sp, #44	@ 0x2c
 80121e8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80121ec:	2100      	movs	r1, #0
 80121ee:	9101      	str	r1, [sp, #4]
 80121f0:	4b24      	ldr	r3, [pc, #144]	@ (8012284 <HAL_SPI_MspInit+0xbc>)
 80121f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80121f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80121f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80121fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80121fc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8012200:	9201      	str	r2, [sp, #4]
 8012202:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012204:	9102      	str	r1, [sp, #8]
 8012206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012208:	f042 0202 	orr.w	r2, r2, #2
 801220c:	631a      	str	r2, [r3, #48]	@ 0x30
 801220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012210:	f003 0302 	and.w	r3, r3, #2
 8012214:	9302      	str	r3, [sp, #8]
 8012216:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8012218:	2338      	movs	r3, #56	@ 0x38
 801221a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801221c:	2302      	movs	r3, #2
 801221e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012220:	2303      	movs	r3, #3
 8012222:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012224:	2305      	movs	r3, #5
 8012226:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012228:	a905      	add	r1, sp, #20
 801222a:	4817      	ldr	r0, [pc, #92]	@ (8012288 <HAL_SPI_MspInit+0xc0>)
 801222c:	f004 f8d4 	bl	80163d8 <HAL_GPIO_Init>
 8012230:	e7d9      	b.n	80121e6 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8012232:	2100      	movs	r1, #0
 8012234:	9103      	str	r1, [sp, #12]
 8012236:	4b13      	ldr	r3, [pc, #76]	@ (8012284 <HAL_SPI_MspInit+0xbc>)
 8012238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801223a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801223e:	641a      	str	r2, [r3, #64]	@ 0x40
 8012240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012242:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8012246:	9203      	str	r2, [sp, #12]
 8012248:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801224a:	9104      	str	r1, [sp, #16]
 801224c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801224e:	f042 0202 	orr.w	r2, r2, #2
 8012252:	631a      	str	r2, [r3, #48]	@ 0x30
 8012254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012256:	f003 0302 	and.w	r3, r3, #2
 801225a:	9304      	str	r3, [sp, #16]
 801225c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 801225e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8012262:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012264:	2302      	movs	r3, #2
 8012266:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012268:	2303      	movs	r3, #3
 801226a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801226c:	2305      	movs	r3, #5
 801226e:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012270:	a905      	add	r1, sp, #20
 8012272:	4805      	ldr	r0, [pc, #20]	@ (8012288 <HAL_SPI_MspInit+0xc0>)
 8012274:	f004 f8b0 	bl	80163d8 <HAL_GPIO_Init>
}
 8012278:	e7b5      	b.n	80121e6 <HAL_SPI_MspInit+0x1e>
 801227a:	bf00      	nop
 801227c:	40013000 	.word	0x40013000
 8012280:	40003800 	.word	0x40003800
 8012284:	40023800 	.word	0x40023800
 8012288:	40020400 	.word	0x40020400

0801228c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801228c:	b500      	push	{lr}
 801228e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012290:	2200      	movs	r2, #0
 8012292:	9200      	str	r2, [sp, #0]
 8012294:	4b0d      	ldr	r3, [pc, #52]	@ (80122cc <HAL_MspInit+0x40>)
 8012296:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012298:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 801229c:	6459      	str	r1, [r3, #68]	@ 0x44
 801229e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80122a0:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80122a4:	9100      	str	r1, [sp, #0]
 80122a6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80122a8:	9201      	str	r2, [sp, #4]
 80122aa:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80122ac:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80122b0:	6419      	str	r1, [r3, #64]	@ 0x40
 80122b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80122b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80122b8:	9301      	str	r3, [sp, #4]
 80122ba:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80122bc:	210f      	movs	r1, #15
 80122be:	f06f 0001 	mvn.w	r0, #1
 80122c2:	f004 f871 	bl	80163a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80122c6:	b003      	add	sp, #12
 80122c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80122cc:	40023800 	.word	0x40023800

080122d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80122d0:	b530      	push	{r4, r5, lr}
 80122d2:	b089      	sub	sp, #36	@ 0x24
 80122d4:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80122d6:	2400      	movs	r4, #0
 80122d8:	9401      	str	r4, [sp, #4]
 80122da:	4b1d      	ldr	r3, [pc, #116]	@ (8012350 <HAL_InitTick+0x80>)
 80122dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80122de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80122e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80122e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80122e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80122ea:	9301      	str	r3, [sp, #4]
 80122ec:	9b01      	ldr	r3, [sp, #4]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80122ee:	a902      	add	r1, sp, #8
 80122f0:	a803      	add	r0, sp, #12
 80122f2:	f005 f949 	bl	8017588 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80122f6:	f005 f937 	bl	8017568 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80122fa:	4a16      	ldr	r2, [pc, #88]	@ (8012354 <HAL_InitTick+0x84>)
 80122fc:	fba2 2300 	umull	r2, r3, r2, r0
 8012300:	0c9b      	lsrs	r3, r3, #18
 8012302:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8012304:	4814      	ldr	r0, [pc, #80]	@ (8012358 <HAL_InitTick+0x88>)
 8012306:	4a15      	ldr	r2, [pc, #84]	@ (801235c <HAL_InitTick+0x8c>)
 8012308:	6002      	str	r2, [r0, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 801230a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 801230e:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8012310:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 8012312:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012314:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012316:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8012318:	f005 feb4 	bl	8018084 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 801231c:	4604      	mov	r4, r0
 801231e:	b110      	cbz	r0, 8012326 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8012320:	4620      	mov	r0, r4
 8012322:	b009      	add	sp, #36	@ 0x24
 8012324:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 8012326:	480c      	ldr	r0, [pc, #48]	@ (8012358 <HAL_InitTick+0x88>)
 8012328:	f005 fd66 	bl	8017df8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 801232c:	4604      	mov	r4, r0
 801232e:	2800      	cmp	r0, #0
 8012330:	d1f6      	bne.n	8012320 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8012332:	2018      	movs	r0, #24
 8012334:	f004 f848 	bl	80163c8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012338:	2d0f      	cmp	r5, #15
 801233a:	d901      	bls.n	8012340 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 801233c:	2401      	movs	r4, #1
 801233e:	e7ef      	b.n	8012320 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8012340:	2200      	movs	r2, #0
 8012342:	4629      	mov	r1, r5
 8012344:	2018      	movs	r0, #24
 8012346:	f004 f82f 	bl	80163a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801234a:	4b05      	ldr	r3, [pc, #20]	@ (8012360 <HAL_InitTick+0x90>)
 801234c:	601d      	str	r5, [r3, #0]
 801234e:	e7e7      	b.n	8012320 <HAL_InitTick+0x50>
 8012350:	40023800 	.word	0x40023800
 8012354:	431bde83 	.word	0x431bde83
 8012358:	200009dc 	.word	0x200009dc
 801235c:	40014000 	.word	0x40014000
 8012360:	20000108 	.word	0x20000108

08012364 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012364:	e7fe      	b.n	8012364 <NMI_Handler>

08012366 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012366:	e7fe      	b.n	8012366 <HardFault_Handler>

08012368 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012368:	e7fe      	b.n	8012368 <MemManage_Handler>

0801236a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801236a:	e7fe      	b.n	801236a <BusFault_Handler>

0801236c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801236c:	e7fe      	b.n	801236c <UsageFault_Handler>

0801236e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801236e:	4770      	bx	lr

08012370 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8012370:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8012372:	4802      	ldr	r0, [pc, #8]	@ (801237c <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8012374:	f005 fd80 	bl	8017e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8012378:	bd08      	pop	{r3, pc}
 801237a:	bf00      	nop
 801237c:	200009dc 	.word	0x200009dc

08012380 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8012380:	2001      	movs	r0, #1
 8012382:	4770      	bx	lr

08012384 <_kill>:

int _kill(int pid, int sig)
{
 8012384:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012386:	f01b fd27 	bl	802ddd8 <__errno>
 801238a:	2316      	movs	r3, #22
 801238c:	6003      	str	r3, [r0, #0]
  return -1;
}
 801238e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012392:	bd08      	pop	{r3, pc}

08012394 <_exit>:

void _exit (int status)
{
 8012394:	b508      	push	{r3, lr}
  _kill(status, -1);
 8012396:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801239a:	f7ff fff3 	bl	8012384 <_kill>
  while (1) {}    /* Make sure we hang here */
 801239e:	e7fe      	b.n	801239e <_exit+0xa>

080123a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80123a0:	b570      	push	{r4, r5, r6, lr}
 80123a2:	460c      	mov	r4, r1
 80123a4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123a6:	2500      	movs	r5, #0
 80123a8:	e006      	b.n	80123b8 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80123aa:	f3af 8000 	nop.w
 80123ae:	4621      	mov	r1, r4
 80123b0:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123b4:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80123b6:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123b8:	42b5      	cmp	r5, r6
 80123ba:	dbf6      	blt.n	80123aa <_read+0xa>
  }

  return len;
}
 80123bc:	4630      	mov	r0, r6
 80123be:	bd70      	pop	{r4, r5, r6, pc}

080123c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80123c0:	b570      	push	{r4, r5, r6, lr}
 80123c2:	460c      	mov	r4, r1
 80123c4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123c6:	2500      	movs	r5, #0
 80123c8:	e004      	b.n	80123d4 <_write+0x14>
  {
    __io_putchar(*ptr++);
 80123ca:	f814 0b01 	ldrb.w	r0, [r4], #1
 80123ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123d2:	3501      	adds	r5, #1
 80123d4:	42b5      	cmp	r5, r6
 80123d6:	dbf8      	blt.n	80123ca <_write+0xa>
  }
  return len;
}
 80123d8:	4630      	mov	r0, r6
 80123da:	bd70      	pop	{r4, r5, r6, pc}

080123dc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80123dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80123e0:	4770      	bx	lr

080123e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80123e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80123e6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80123e8:	2000      	movs	r0, #0
 80123ea:	4770      	bx	lr

080123ec <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80123ec:	2001      	movs	r0, #1
 80123ee:	4770      	bx	lr

080123f0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80123f0:	2000      	movs	r0, #0
 80123f2:	4770      	bx	lr

080123f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80123f4:	b510      	push	{r4, lr}
 80123f6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80123f8:	4a0c      	ldr	r2, [pc, #48]	@ (801242c <_sbrk+0x38>)
 80123fa:	490d      	ldr	r1, [pc, #52]	@ (8012430 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80123fc:	480d      	ldr	r0, [pc, #52]	@ (8012434 <_sbrk+0x40>)
 80123fe:	6800      	ldr	r0, [r0, #0]
 8012400:	b140      	cbz	r0, 8012414 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012402:	480c      	ldr	r0, [pc, #48]	@ (8012434 <_sbrk+0x40>)
 8012404:	6800      	ldr	r0, [r0, #0]
 8012406:	4403      	add	r3, r0
 8012408:	1a52      	subs	r2, r2, r1
 801240a:	4293      	cmp	r3, r2
 801240c:	d806      	bhi.n	801241c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 801240e:	4a09      	ldr	r2, [pc, #36]	@ (8012434 <_sbrk+0x40>)
 8012410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8012412:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8012414:	4807      	ldr	r0, [pc, #28]	@ (8012434 <_sbrk+0x40>)
 8012416:	4c08      	ldr	r4, [pc, #32]	@ (8012438 <_sbrk+0x44>)
 8012418:	6004      	str	r4, [r0, #0]
 801241a:	e7f2      	b.n	8012402 <_sbrk+0xe>
    errno = ENOMEM;
 801241c:	f01b fcdc 	bl	802ddd8 <__errno>
 8012420:	230c      	movs	r3, #12
 8012422:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8012424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012428:	e7f3      	b.n	8012412 <_sbrk+0x1e>
 801242a:	bf00      	nop
 801242c:	20020000 	.word	0x20020000
 8012430:	00000800 	.word	0x00000800
 8012434:	20000a28 	.word	0x20000a28
 8012438:	2001a218 	.word	0x2001a218

0801243c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801243c:	4a03      	ldr	r2, [pc, #12]	@ (801244c <SystemInit+0x10>)
 801243e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8012442:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012446:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801244a:	4770      	bx	lr
 801244c:	e000ed00 	.word	0xe000ed00

08012450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8012450:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012488 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8012454:	f7ff fff2 	bl	801243c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012458:	480c      	ldr	r0, [pc, #48]	@ (801248c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801245a:	490d      	ldr	r1, [pc, #52]	@ (8012490 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801245c:	4a0d      	ldr	r2, [pc, #52]	@ (8012494 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801245e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012460:	e002      	b.n	8012468 <LoopCopyDataInit>

08012462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012466:	3304      	adds	r3, #4

08012468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801246a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801246c:	d3f9      	bcc.n	8012462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801246e:	4a0a      	ldr	r2, [pc, #40]	@ (8012498 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012470:	4c0a      	ldr	r4, [pc, #40]	@ (801249c <LoopFillZerobss+0x22>)
  movs r3, #0
 8012472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012474:	e001      	b.n	801247a <LoopFillZerobss>

08012476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012478:	3204      	adds	r2, #4

0801247a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801247a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801247c:	d3fb      	bcc.n	8012476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801247e:	f01b fcb9 	bl	802ddf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012482:	f7ff fe35 	bl	80120f0 <main>
  bx  lr    
 8012486:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8012488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 801248c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012490:	20000870 	.word	0x20000870
  ldr r2, =_sidata
 8012494:	0803c49c 	.word	0x0803c49c
  ldr r2, =_sbss
 8012498:	20000870 	.word	0x20000870
  ldr r4, =_ebss
 801249c:	2001a218 	.word	0x2001a218

080124a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80124a0:	e7fe      	b.n	80124a0 <ADC_IRQHandler>

080124a2 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80124a2:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80124a4:	880b      	ldrh	r3, [r1, #0]
 80124a6:	2b05      	cmp	r3, #5
 80124a8:	d001      	beq.n	80124ae <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80124aa:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80124ac:	bd38      	pop	{r3, r4, r5, pc}
 80124ae:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80124b0:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80124b2:	7881      	ldrb	r1, [r0, #2]
 80124b4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80124b8:	3101      	adds	r1, #1
 80124ba:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80124bc:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80124be:	7902      	ldrb	r2, [r0, #4]
 80124c0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 80124c4:	1e53      	subs	r3, r2, #1
 80124c6:	b29b      	uxth	r3, r3
 80124c8:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 80124cc:	4563      	cmp	r3, ip
 80124ce:	d820      	bhi.n	8012512 <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 80124d0:	2300      	movs	r3, #0
 80124d2:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80124d4:	2301      	movs	r3, #1
 80124d6:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80124d8:	8823      	ldrh	r3, [r4, #0]
 80124da:	3301      	adds	r3, #1
 80124dc:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 80124de:	f012 0f07 	tst.w	r2, #7
 80124e2:	d010      	beq.n	8012506 <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80124e4:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 80124e8:	3301      	adds	r3, #1
 80124ea:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 80124ec:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 80124ee:	8823      	ldrh	r3, [r4, #0]
 80124f0:	3301      	adds	r3, #1
 80124f2:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80124f4:	2300      	movs	r3, #0
 80124f6:	3002      	adds	r0, #2
 80124f8:	f7ff fb8a 	bl	8011c10 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80124fc:	b930      	cbnz	r0, 801250c <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 80124fe:	8823      	ldrh	r3, [r4, #0]
 8012500:	442b      	add	r3, r5
 8012502:	8023      	strh	r3, [r4, #0]
 8012504:	e7d2      	b.n	80124ac <eMBFuncReadCoils+0xa>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8012506:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 801250a:	e7ef      	b.n	80124ec <eMBFuncReadCoils+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 801250c:	f000 f9f0 	bl	80128f0 <prveMBError2Exception>
 8012510:	e7cc      	b.n	80124ac <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012512:	2003      	movs	r0, #3
 8012514:	e7ca      	b.n	80124ac <eMBFuncReadCoils+0xa>

08012516 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012516:	880b      	ldrh	r3, [r1, #0]
 8012518:	2b05      	cmp	r3, #5
 801251a:	d001      	beq.n	8012520 <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801251c:	2003      	movs	r0, #3
 801251e:	4770      	bx	lr
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8012520:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012522:	7881      	ldrb	r1, [r0, #2]
 8012524:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012528:	3101      	adds	r1, #1
 801252a:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 801252c:	7903      	ldrb	r3, [r0, #4]
 801252e:	b9f3      	cbnz	r3, 801256e <eMBFuncWriteCoil+0x58>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8012530:	78c2      	ldrb	r2, [r0, #3]
 8012532:	1e53      	subs	r3, r2, #1
 8012534:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8012536:	2bfd      	cmp	r3, #253	@ 0xfd
 8012538:	d91b      	bls.n	8012572 <eMBFuncWriteCoil+0x5c>
{
 801253a:	b500      	push	{lr}
 801253c:	b083      	sub	sp, #12
            ucBuf[1] = 0;
 801253e:	2300      	movs	r3, #0
 8012540:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8012544:	2aff      	cmp	r2, #255	@ 0xff
 8012546:	d00b      	beq.n	8012560 <eMBFuncWriteCoil+0x4a>
                ucBuf[0] = 0;
 8012548:	2300      	movs	r3, #0
 801254a:	f88d 3004 	strb.w	r3, [sp, #4]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 801254e:	2301      	movs	r3, #1
 8012550:	461a      	mov	r2, r3
 8012552:	a801      	add	r0, sp, #4
 8012554:	f7ff fb5c 	bl	8011c10 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012558:	b930      	cbnz	r0, 8012568 <eMBFuncWriteCoil+0x52>
    }
    return eStatus;
}
 801255a:	b003      	add	sp, #12
 801255c:	f85d fb04 	ldr.w	pc, [sp], #4
                ucBuf[0] = 1;
 8012560:	2301      	movs	r3, #1
 8012562:	f88d 3004 	strb.w	r3, [sp, #4]
 8012566:	e7f2      	b.n	801254e <eMBFuncWriteCoil+0x38>
                eStatus = prveMBError2Exception( eRegStatus );
 8012568:	f000 f9c2 	bl	80128f0 <prveMBError2Exception>
 801256c:	e7f5      	b.n	801255a <eMBFuncWriteCoil+0x44>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801256e:	2003      	movs	r0, #3
 8012570:	4770      	bx	lr
 8012572:	2003      	movs	r0, #3
}
 8012574:	4770      	bx	lr

08012576 <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012576:	880b      	ldrh	r3, [r1, #0]
 8012578:	2b05      	cmp	r3, #5
 801257a:	d92d      	bls.n	80125d8 <eMBFuncWriteMultipleCoils+0x62>
{
 801257c:	b510      	push	{r4, lr}
 801257e:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012580:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8012582:	7883      	ldrb	r3, [r0, #2]
 8012584:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012588:	3301      	adds	r3, #1
 801258a:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 801258c:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 801258e:	7903      	ldrb	r3, [r0, #4]
 8012590:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8012594:	f890 e005 	ldrb.w	lr, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8012598:	f013 0f07 	tst.w	r3, #7
 801259c:	d00e      	beq.n	80125bc <eMBFuncWriteMultipleCoils+0x46>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 801259e:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 80125a2:	f10c 0c01 	add.w	ip, ip, #1
 80125a6:	fa5f fc8c 	uxtb.w	ip, ip
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 80125aa:	1e53      	subs	r3, r2, #1
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 80125b2:	d213      	bcs.n	80125dc <eMBFuncWriteMultipleCoils+0x66>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80125b4:	45f4      	cmp	ip, lr
 80125b6:	d004      	beq.n	80125c2 <eMBFuncWriteMultipleCoils+0x4c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125b8:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80125ba:	bd10      	pop	{r4, pc}
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80125bc:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 80125c0:	e7f3      	b.n	80125aa <eMBFuncWriteMultipleCoils+0x34>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80125c2:	2301      	movs	r3, #1
 80125c4:	3006      	adds	r0, #6
 80125c6:	f7ff fb23 	bl	8011c10 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80125ca:	b910      	cbnz	r0, 80125d2 <eMBFuncWriteMultipleCoils+0x5c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80125cc:	2305      	movs	r3, #5
 80125ce:	8023      	strh	r3, [r4, #0]
 80125d0:	e7f3      	b.n	80125ba <eMBFuncWriteMultipleCoils+0x44>
                eStatus = prveMBError2Exception( eRegStatus );
 80125d2:	f000 f98d 	bl	80128f0 <prveMBError2Exception>
 80125d6:	e7f0      	b.n	80125ba <eMBFuncWriteMultipleCoils+0x44>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125d8:	2003      	movs	r0, #3
}
 80125da:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125dc:	2003      	movs	r0, #3
 80125de:	e7ec      	b.n	80125ba <eMBFuncWriteMultipleCoils+0x44>

080125e0 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80125e0:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80125e2:	880b      	ldrh	r3, [r1, #0]
 80125e4:	2b05      	cmp	r3, #5
 80125e6:	d001      	beq.n	80125ec <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125e8:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80125ea:	bd38      	pop	{r3, r4, r5, pc}
 80125ec:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80125ee:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80125f0:	7881      	ldrb	r1, [r0, #2]
 80125f2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80125f6:	3101      	adds	r1, #1
 80125f8:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 80125fa:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 80125fc:	7902      	ldrb	r2, [r0, #4]
 80125fe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 8012602:	1e53      	subs	r3, r2, #1
 8012604:	b29b      	uxth	r3, r3
 8012606:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 801260a:	4563      	cmp	r3, ip
 801260c:	d81f      	bhi.n	801264e <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 801260e:	2300      	movs	r3, #0
 8012610:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8012612:	2302      	movs	r3, #2
 8012614:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012616:	8823      	ldrh	r3, [r4, #0]
 8012618:	3301      	adds	r3, #1
 801261a:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 801261c:	f012 0f07 	tst.w	r2, #7
 8012620:	d00f      	beq.n	8012642 <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8012622:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012626:	3301      	adds	r3, #1
 8012628:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 801262a:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 801262c:	8823      	ldrh	r3, [r4, #0]
 801262e:	3301      	adds	r3, #1
 8012630:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8012632:	3002      	adds	r0, #2
 8012634:	f7ff fac6 	bl	8011bc4 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8012638:	b930      	cbnz	r0, 8012648 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 801263a:	8823      	ldrh	r3, [r4, #0]
 801263c:	442b      	add	r3, r5
 801263e:	8023      	strh	r3, [r4, #0]
 8012640:	e7d3      	b.n	80125ea <eMBFuncReadDiscreteInputs+0xa>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8012642:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 8012646:	e7f0      	b.n	801262a <eMBFuncReadDiscreteInputs+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8012648:	f000 f952 	bl	80128f0 <prveMBError2Exception>
 801264c:	e7cd      	b.n	80125ea <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801264e:	2003      	movs	r0, #3
 8012650:	e7cb      	b.n	80125ea <eMBFuncReadDiscreteInputs+0xa>

08012652 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012652:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012654:	880b      	ldrh	r3, [r1, #0]
 8012656:	2b05      	cmp	r3, #5
 8012658:	d001      	beq.n	801265e <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801265a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801265c:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 801265e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012660:	7881      	ldrb	r1, [r0, #2]
 8012662:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012666:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8012668:	2301      	movs	r3, #1
 801266a:	461a      	mov	r2, r3
 801266c:	b289      	uxth	r1, r1
 801266e:	3003      	adds	r0, #3
 8012670:	f7ff fb1f 	bl	8011cb2 <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8012674:	2800      	cmp	r0, #0
 8012676:	d0f1      	beq.n	801265c <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 8012678:	f000 f93a 	bl	80128f0 <prveMBError2Exception>
 801267c:	e7ee      	b.n	801265c <eMBFuncWriteHoldingRegister+0xa>

0801267e <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 801267e:	880b      	ldrh	r3, [r1, #0]
 8012680:	2b05      	cmp	r3, #5
 8012682:	d922      	bls.n	80126ca <eMBFuncWriteMultipleHoldingRegister+0x4c>
{
 8012684:	b510      	push	{r4, lr}
 8012686:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012688:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 801268a:	7883      	ldrb	r3, [r0, #2]
 801268c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012690:	3301      	adds	r3, #1
 8012692:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8012694:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8012696:	7902      	ldrb	r2, [r0, #4]
 8012698:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 801269c:	f890 c005 	ldrb.w	ip, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 80126a0:	1e53      	subs	r3, r2, #1
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	2b77      	cmp	r3, #119	@ 0x77
 80126a6:	d812      	bhi.n	80126ce <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80126a8:	0053      	lsls	r3, r2, #1
 80126aa:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80126ac:	4563      	cmp	r3, ip
 80126ae:	d001      	beq.n	80126b4 <eMBFuncWriteMultipleHoldingRegister+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126b0:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80126b2:	bd10      	pop	{r4, pc}
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80126b4:	2301      	movs	r3, #1
 80126b6:	3006      	adds	r0, #6
 80126b8:	f7ff fafb 	bl	8011cb2 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80126bc:	b910      	cbnz	r0, 80126c4 <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80126be:	2305      	movs	r3, #5
 80126c0:	8023      	strh	r3, [r4, #0]
 80126c2:	e7f6      	b.n	80126b2 <eMBFuncWriteMultipleHoldingRegister+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 80126c4:	f000 f914 	bl	80128f0 <prveMBError2Exception>
 80126c8:	e7f3      	b.n	80126b2 <eMBFuncWriteMultipleHoldingRegister+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126ca:	2003      	movs	r0, #3
}
 80126cc:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126ce:	2003      	movs	r0, #3
 80126d0:	e7ef      	b.n	80126b2 <eMBFuncWriteMultipleHoldingRegister+0x34>

080126d2 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80126d2:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80126d4:	880b      	ldrh	r3, [r1, #0]
 80126d6:	2b05      	cmp	r3, #5
 80126d8:	d001      	beq.n	80126de <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126da:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80126dc:	bd38      	pop	{r3, r4, r5, pc}
 80126de:	4602      	mov	r2, r0
 80126e0:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80126e2:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80126e4:	7881      	ldrb	r1, [r0, #2]
 80126e6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80126ea:	3101      	adds	r1, #1
 80126ec:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80126ee:	7905      	ldrb	r5, [r0, #4]
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80126f0:	1e6b      	subs	r3, r5, #1
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	2b7c      	cmp	r3, #124	@ 0x7c
 80126f6:	d901      	bls.n	80126fc <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126f8:	2003      	movs	r0, #3
 80126fa:	e7ef      	b.n	80126dc <eMBFuncReadHoldingRegister+0xa>
            *usLen = MB_PDU_FUNC_OFF;
 80126fc:	2300      	movs	r3, #0
 80126fe:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8012700:	f04f 0c03 	mov.w	ip, #3
 8012704:	f800 cb02 	strb.w	ip, [r0], #2
            *usLen += 1;
 8012708:	f8b4 c000 	ldrh.w	ip, [r4]
 801270c:	f10c 0c01 	add.w	ip, ip, #1
 8012710:	f8a4 c000 	strh.w	ip, [r4]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8012714:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8012718:	f882 c001 	strb.w	ip, [r2, #1]
            *usLen += 1;
 801271c:	8822      	ldrh	r2, [r4, #0]
 801271e:	3201      	adds	r2, #1
 8012720:	8022      	strh	r2, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8012722:	462a      	mov	r2, r5
 8012724:	f7ff fac5 	bl	8011cb2 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8012728:	b920      	cbnz	r0, 8012734 <eMBFuncReadHoldingRegister+0x62>
                *usLen += usRegCount * 2;
 801272a:	8823      	ldrh	r3, [r4, #0]
 801272c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012730:	8023      	strh	r3, [r4, #0]
 8012732:	e7d3      	b.n	80126dc <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8012734:	f000 f8dc 	bl	80128f0 <prveMBError2Exception>
 8012738:	e7d0      	b.n	80126dc <eMBFuncReadHoldingRegister+0xa>

0801273a <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 801273a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 801273c:	880b      	ldrh	r3, [r1, #0]
 801273e:	2b09      	cmp	r3, #9
 8012740:	d943      	bls.n	80127ca <eMBFuncReadWriteMultipleHoldingRegister+0x90>
 8012742:	4604      	mov	r4, r0
 8012744:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8012746:	7843      	ldrb	r3, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8012748:	7881      	ldrb	r1, [r0, #2]
 801274a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegReadAddress++;
 801274e:	3101      	adds	r1, #1
 8012750:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8012752:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8012754:	7907      	ldrb	r7, [r0, #4]
 8012756:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 801275a:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 801275c:	7981      	ldrb	r1, [r0, #6]
 801275e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8012762:	3101      	adds	r1, #1
 8012764:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8012766:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8012768:	7a02      	ldrb	r2, [r0, #8]
 801276a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 801276e:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8012770:	1e7b      	subs	r3, r7, #1
 8012772:	b29b      	uxth	r3, r3
 8012774:	2b7c      	cmp	r3, #124	@ 0x7c
 8012776:	d82a      	bhi.n	80127ce <eMBFuncReadWriteMultipleHoldingRegister+0x94>
 8012778:	b35a      	cbz	r2, 80127d2 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 801277a:	2a79      	cmp	r2, #121	@ 0x79
 801277c:	d82b      	bhi.n	80127d6 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 801277e:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 8012782:	d001      	beq.n	8012788 <eMBFuncReadWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012784:	2003      	movs	r0, #3
 8012786:	e021      	b.n	80127cc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8012788:	2301      	movs	r3, #1
 801278a:	f104 000a 	add.w	r0, r4, #10
 801278e:	f7ff fa90 	bl	8011cb2 <eMBRegHoldingCB>
 8012792:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 8012794:	b9b0      	cbnz	r0, 80127c4 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                *usLen = MB_PDU_FUNC_OFF;
 8012796:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8012798:	4620      	mov	r0, r4
 801279a:	2217      	movs	r2, #23
 801279c:	f800 2b02 	strb.w	r2, [r0], #2
                *usLen += 1;
 80127a0:	882a      	ldrh	r2, [r5, #0]
 80127a2:	3201      	adds	r2, #1
 80127a4:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 80127a6:	007a      	lsls	r2, r7, #1
 80127a8:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 80127aa:	882a      	ldrh	r2, [r5, #0]
 80127ac:	3201      	adds	r2, #1
 80127ae:	802a      	strh	r2, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 80127b0:	463a      	mov	r2, r7
 80127b2:	4631      	mov	r1, r6
 80127b4:	f7ff fa7d 	bl	8011cb2 <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 80127b8:	b920      	cbnz	r0, 80127c4 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                    *usLen += 2 * usRegReadCount;
 80127ba:	882b      	ldrh	r3, [r5, #0]
 80127bc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80127c0:	802b      	strh	r3, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 80127c2:	e003      	b.n	80127cc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
                eStatus = prveMBError2Exception( eRegStatus );
 80127c4:	f000 f894 	bl	80128f0 <prveMBError2Exception>
 80127c8:	e000      	b.n	80127cc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
    eMBException    eStatus = MB_EX_NONE;
 80127ca:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 80127cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127ce:	2003      	movs	r0, #3
 80127d0:	e7fc      	b.n	80127cc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 80127d2:	2003      	movs	r0, #3
 80127d4:	e7fa      	b.n	80127cc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 80127d6:	2003      	movs	r0, #3
 80127d8:	e7f8      	b.n	80127cc <eMBFuncReadWriteMultipleHoldingRegister+0x92>

080127da <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80127da:	880a      	ldrh	r2, [r1, #0]
 80127dc:	2a05      	cmp	r2, #5
 80127de:	d001      	beq.n	80127e4 <eMBFuncReadInputRegister+0xa>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127e0:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80127e2:	4770      	bx	lr
{
 80127e4:	b538      	push	{r3, r4, r5, lr}
 80127e6:	4603      	mov	r3, r0
 80127e8:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80127ea:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80127ec:	7881      	ldrb	r1, [r0, #2]
 80127ee:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 80127f2:	3101      	adds	r1, #1
 80127f4:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80127f6:	78c2      	ldrb	r2, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80127f8:	7905      	ldrb	r5, [r0, #4]
 80127fa:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80127fe:	1e6a      	subs	r2, r5, #1
 8012800:	b292      	uxth	r2, r2
        if( ( usRegCount >= 1 )
 8012802:	2a7b      	cmp	r2, #123	@ 0x7b
 8012804:	d901      	bls.n	801280a <eMBFuncReadInputRegister+0x30>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012806:	2003      	movs	r0, #3
}
 8012808:	bd38      	pop	{r3, r4, r5, pc}
            *usLen = MB_PDU_FUNC_OFF;
 801280a:	2200      	movs	r2, #0
 801280c:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 801280e:	2204      	movs	r2, #4
 8012810:	f800 2b02 	strb.w	r2, [r0], #2
            *usLen += 1;
 8012814:	8822      	ldrh	r2, [r4, #0]
 8012816:	3201      	adds	r2, #1
 8012818:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 801281a:	006a      	lsls	r2, r5, #1
 801281c:	705a      	strb	r2, [r3, #1]
            *usLen += 1;
 801281e:	8823      	ldrh	r3, [r4, #0]
 8012820:	3301      	adds	r3, #1
 8012822:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8012824:	462a      	mov	r2, r5
 8012826:	f7ff fa42 	bl	8011cae <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 801282a:	b920      	cbnz	r0, 8012836 <eMBFuncReadInputRegister+0x5c>
                *usLen += usRegCount * 2;
 801282c:	8823      	ldrh	r3, [r4, #0]
 801282e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012832:	8023      	strh	r3, [r4, #0]
 8012834:	e7e8      	b.n	8012808 <eMBFuncReadInputRegister+0x2e>
                eStatus = prveMBError2Exception( eRegStatus );
 8012836:	f000 f85b 	bl	80128f0 <prveMBError2Exception>
 801283a:	e7e5      	b.n	8012808 <eMBFuncReadInputRegister+0x2e>

0801283c <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 801283c:	b538      	push	{r3, r4, r5, lr}
 801283e:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8012840:	4b05      	ldr	r3, [pc, #20]	@ (8012858 <eMBFuncReportSlaveID+0x1c>)
 8012842:	881c      	ldrh	r4, [r3, #0]
 8012844:	4622      	mov	r2, r4
 8012846:	4905      	ldr	r1, [pc, #20]	@ (801285c <eMBFuncReportSlaveID+0x20>)
 8012848:	3001      	adds	r0, #1
 801284a:	f01b fafd 	bl	802de48 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 801284e:	3401      	adds	r4, #1
 8012850:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8012852:	2000      	movs	r0, #0
 8012854:	bd38      	pop	{r3, r4, r5, pc}
 8012856:	bf00      	nop
 8012858:	20000a2c 	.word	0x20000a2c
 801285c:	20000a30 	.word	0x20000a30

08012860 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8012860:	b510      	push	{r4, lr}
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8012862:	2a08      	cmp	r2, #8
 8012864:	d823      	bhi.n	80128ae <xMBUtilSetBits+0x4e>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012866:	ea4f 0ed1 	mov.w	lr, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 801286a:	f001 0407 	and.w	r4, r1, #7
 801286e:	fa03 f404 	lsl.w	r4, r3, r4

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8012872:	f04f 0c01 	mov.w	ip, #1
 8012876:	fa0c f202 	lsl.w	r2, ip, r2
 801287a:	b292      	uxth	r2, r2
 801287c:	3a01      	subs	r2, #1
 801287e:	b292      	uxth	r2, r2
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8012880:	f001 0107 	and.w	r1, r1, #7
 8012884:	fa02 f101 	lsl.w	r1, r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012888:	f810 300e 	ldrb.w	r3, [r0, lr]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 801288c:	eb0e 020c 	add.w	r2, lr, ip
 8012890:	f810 c002 	ldrb.w	ip, [r0, r2]
 8012894:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8012898:	b21b      	sxth	r3, r3

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 801289a:	ea23 0301 	bic.w	r3, r3, r1
 801289e:	b21b      	sxth	r3, r3
 80128a0:	4323      	orrs	r3, r4

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 80128a2:	f800 300e 	strb.w	r3, [r0, lr]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 80128a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80128aa:	5483      	strb	r3, [r0, r2]
}
 80128ac:	bd10      	pop	{r4, pc}
    assert( ucNBits <= 8 );
 80128ae:	4b03      	ldr	r3, [pc, #12]	@ (80128bc <xMBUtilSetBits+0x5c>)
 80128b0:	4a03      	ldr	r2, [pc, #12]	@ (80128c0 <xMBUtilSetBits+0x60>)
 80128b2:	2137      	movs	r1, #55	@ 0x37
 80128b4:	4803      	ldr	r0, [pc, #12]	@ (80128c4 <xMBUtilSetBits+0x64>)
 80128b6:	f017 fb39 	bl	8029f2c <__assert_func>
 80128ba:	bf00      	nop
 80128bc:	08036478 	.word	0x08036478
 80128c0:	080364d0 	.word	0x080364d0
 80128c4:	08036488 	.word	0x08036488

080128c8 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80128c8:	ea4f 0cd1 	mov.w	ip, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80128cc:	2301      	movs	r3, #1
 80128ce:	4093      	lsls	r3, r2
 80128d0:	b29b      	uxth	r3, r3
 80128d2:	3b01      	subs	r3, #1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 80128d4:	f810 200c 	ldrb.w	r2, [r0, ip]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80128d8:	4460      	add	r0, ip
 80128da:	7840      	ldrb	r0, [r0, #1]
 80128dc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 80128e0:	f001 0107 	and.w	r1, r1, #7
 80128e4:	410a      	asrs	r2, r1
 80128e6:	b292      	uxth	r2, r2

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 80128e8:	ea03 0002 	and.w	r0, r3, r2

    return ( UCHAR ) usWordBuf;
}
 80128ec:	b2c0      	uxtb	r0, r0
 80128ee:	4770      	bx	lr

080128f0 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 80128f0:	2801      	cmp	r0, #1
 80128f2:	d005      	beq.n	8012900 <prveMBError2Exception+0x10>
 80128f4:	2807      	cmp	r0, #7
 80128f6:	d005      	beq.n	8012904 <prveMBError2Exception+0x14>
 80128f8:	b108      	cbz	r0, 80128fe <prveMBError2Exception+0xe>
        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80128fa:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 80128fc:	4770      	bx	lr
 80128fe:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8012900:	2002      	movs	r0, #2
 8012902:	4770      	bx	lr
            eStatus = MB_EX_SLAVE_BUSY;
 8012904:	2006      	movs	r0, #6
 8012906:	4770      	bx	lr

08012908 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8012908:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 801290a:	f000 f9ce 	bl	8012caa <eMBTCPDoInit>
 801290e:	4604      	mov	r4, r0
 8012910:	b120      	cbz	r0, 801291c <eMBTCPInit+0x14>
    {
        eMBState = STATE_DISABLED;
 8012912:	4b11      	ldr	r3, [pc, #68]	@ (8012958 <eMBTCPInit+0x50>)
 8012914:	2201      	movs	r2, #1
 8012916:	701a      	strb	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
        eMBCurrentMode = MB_TCP;
        eMBState = STATE_DISABLED;
    }
    return eStatus;
}
 8012918:	4620      	mov	r0, r4
 801291a:	bd10      	pop	{r4, pc}
    else if( !xMBPortEventInit(  ) )
 801291c:	f000 f8ca 	bl	8012ab4 <xMBPortEventInit>
 8012920:	b1c0      	cbz	r0, 8012954 <eMBTCPInit+0x4c>
        pvMBFrameStartCur = eMBTCPStart;
 8012922:	4b0e      	ldr	r3, [pc, #56]	@ (801295c <eMBTCPInit+0x54>)
 8012924:	4a0e      	ldr	r2, [pc, #56]	@ (8012960 <eMBTCPInit+0x58>)
 8012926:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 8012928:	4b0e      	ldr	r3, [pc, #56]	@ (8012964 <eMBTCPInit+0x5c>)
 801292a:	4a0f      	ldr	r2, [pc, #60]	@ (8012968 <eMBTCPInit+0x60>)
 801292c:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 801292e:	4b0f      	ldr	r3, [pc, #60]	@ (801296c <eMBTCPInit+0x64>)
 8012930:	4a0f      	ldr	r2, [pc, #60]	@ (8012970 <eMBTCPInit+0x68>)
 8012932:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8012934:	4b0f      	ldr	r3, [pc, #60]	@ (8012974 <eMBTCPInit+0x6c>)
 8012936:	4a10      	ldr	r2, [pc, #64]	@ (8012978 <eMBTCPInit+0x70>)
 8012938:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 801293a:	4b10      	ldr	r3, [pc, #64]	@ (801297c <eMBTCPInit+0x74>)
 801293c:	2200      	movs	r2, #0
 801293e:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8012940:	4b0f      	ldr	r3, [pc, #60]	@ (8012980 <eMBTCPInit+0x78>)
 8012942:	22ff      	movs	r2, #255	@ 0xff
 8012944:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 8012946:	4b0f      	ldr	r3, [pc, #60]	@ (8012984 <eMBTCPInit+0x7c>)
 8012948:	2202      	movs	r2, #2
 801294a:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 801294c:	4b02      	ldr	r3, [pc, #8]	@ (8012958 <eMBTCPInit+0x50>)
 801294e:	2201      	movs	r2, #1
 8012950:	701a      	strb	r2, [r3, #0]
 8012952:	e7e1      	b.n	8012918 <eMBTCPInit+0x10>
        eStatus = MB_EPORTERR;
 8012954:	2403      	movs	r4, #3
 8012956:	e7df      	b.n	8012918 <eMBTCPInit+0x10>
 8012958:	2000009c 	.word	0x2000009c
 801295c:	20000a68 	.word	0x20000a68
 8012960:	08012cbb 	.word	0x08012cbb
 8012964:	20000a64 	.word	0x20000a64
 8012968:	08012cbd 	.word	0x08012cbd
 801296c:	20000a60 	.word	0x20000a60
 8012970:	08012cc5 	.word	0x08012cc5
 8012974:	20000a6c 	.word	0x20000a6c
 8012978:	08012d05 	.word	0x08012d05
 801297c:	20000a5c 	.word	0x20000a5c
 8012980:	20000a71 	.word	0x20000a71
 8012984:	20000a70 	.word	0x20000a70

08012988 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8012988:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 801298a:	4b06      	ldr	r3, [pc, #24]	@ (80129a4 <eMBEnable+0x1c>)
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	2b01      	cmp	r3, #1
 8012990:	d001      	beq.n	8012996 <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8012992:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8012994:	bd08      	pop	{r3, pc}
        pvMBFrameStartCur(  );
 8012996:	4b04      	ldr	r3, [pc, #16]	@ (80129a8 <eMBEnable+0x20>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 801299c:	2000      	movs	r0, #0
 801299e:	4b01      	ldr	r3, [pc, #4]	@ (80129a4 <eMBEnable+0x1c>)
 80129a0:	7018      	strb	r0, [r3, #0]
 80129a2:	e7f7      	b.n	8012994 <eMBEnable+0xc>
 80129a4:	2000009c 	.word	0x2000009c
 80129a8:	20000a68 	.word	0x20000a68

080129ac <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80129ac:	b530      	push	{r4, r5, lr}
 80129ae:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80129b0:	4b36      	ldr	r3, [pc, #216]	@ (8012a8c <eMBPoll+0xe0>)
 80129b2:	781c      	ldrb	r4, [r3, #0]
 80129b4:	2c00      	cmp	r4, #0
 80129b6:	d163      	bne.n	8012a80 <eMBPoll+0xd4>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80129b8:	f10d 0007 	add.w	r0, sp, #7
 80129bc:	f000 f88e 	bl	8012adc <xMBPortEventGet>
 80129c0:	2801      	cmp	r0, #1
 80129c2:	d002      	beq.n	80129ca <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 80129c4:	4620      	mov	r0, r4
 80129c6:	b003      	add	sp, #12
 80129c8:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 80129ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80129ce:	2b01      	cmp	r3, #1
 80129d0:	d014      	beq.n	80129fc <eMBPoll+0x50>
 80129d2:	2b02      	cmp	r3, #2
 80129d4:	d1f6      	bne.n	80129c4 <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80129d6:	4b2e      	ldr	r3, [pc, #184]	@ (8012a90 <eMBPoll+0xe4>)
 80129d8:	6818      	ldr	r0, [r3, #0]
 80129da:	7801      	ldrb	r1, [r0, #0]
 80129dc:	4b2d      	ldr	r3, [pc, #180]	@ (8012a94 <eMBPoll+0xe8>)
 80129de:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80129e0:	4b2d      	ldr	r3, [pc, #180]	@ (8012a98 <eMBPoll+0xec>)
 80129e2:	2201      	movs	r2, #1
 80129e4:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80129e6:	2300      	movs	r3, #0
 80129e8:	2b0f      	cmp	r3, #15
 80129ea:	dc25      	bgt.n	8012a38 <eMBPoll+0x8c>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80129ec:	4a2b      	ldr	r2, [pc, #172]	@ (8012a9c <eMBPoll+0xf0>)
 80129ee:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80129f2:	b30a      	cbz	r2, 8012a38 <eMBPoll+0x8c>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80129f4:	4291      	cmp	r1, r2
 80129f6:	d017      	beq.n	8012a28 <eMBPoll+0x7c>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80129f8:	3301      	adds	r3, #1
 80129fa:	e7f5      	b.n	80129e8 <eMBPoll+0x3c>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80129fc:	4b28      	ldr	r3, [pc, #160]	@ (8012aa0 <eMBPoll+0xf4>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	4a28      	ldr	r2, [pc, #160]	@ (8012aa4 <eMBPoll+0xf8>)
 8012a02:	4923      	ldr	r1, [pc, #140]	@ (8012a90 <eMBPoll+0xe4>)
 8012a04:	4828      	ldr	r0, [pc, #160]	@ (8012aa8 <eMBPoll+0xfc>)
 8012a06:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8012a08:	4605      	mov	r5, r0
 8012a0a:	2800      	cmp	r0, #0
 8012a0c:	d1da      	bne.n	80129c4 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8012a0e:	4b26      	ldr	r3, [pc, #152]	@ (8012aa8 <eMBPoll+0xfc>)
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	4a26      	ldr	r2, [pc, #152]	@ (8012aac <eMBPoll+0x100>)
 8012a14:	7812      	ldrb	r2, [r2, #0]
 8012a16:	4293      	cmp	r3, r2
 8012a18:	d001      	beq.n	8012a1e <eMBPoll+0x72>
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d132      	bne.n	8012a84 <eMBPoll+0xd8>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8012a1e:	2002      	movs	r0, #2
 8012a20:	f000 f850 	bl	8012ac4 <xMBPortEventPost>
    return MB_ENOERR;
 8012a24:	462c      	mov	r4, r5
 8012a26:	e7cd      	b.n	80129c4 <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8012a28:	4a1c      	ldr	r2, [pc, #112]	@ (8012a9c <eMBPoll+0xf0>)
 8012a2a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	491c      	ldr	r1, [pc, #112]	@ (8012aa4 <eMBPoll+0xf8>)
 8012a32:	4798      	blx	r3
 8012a34:	4b18      	ldr	r3, [pc, #96]	@ (8012a98 <eMBPoll+0xec>)
 8012a36:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8012a38:	4b1b      	ldr	r3, [pc, #108]	@ (8012aa8 <eMBPoll+0xfc>)
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	b323      	cbz	r3, 8012a88 <eMBPoll+0xdc>
                if( eException != MB_EX_NONE )
 8012a3e:	4b16      	ldr	r3, [pc, #88]	@ (8012a98 <eMBPoll+0xec>)
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	b19b      	cbz	r3, 8012a6c <eMBPoll+0xc0>
                    usLength = 0;
 8012a44:	4a17      	ldr	r2, [pc, #92]	@ (8012aa4 <eMBPoll+0xf8>)
 8012a46:	2100      	movs	r1, #0
 8012a48:	8011      	strh	r1, [r2, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8012a4a:	4912      	ldr	r1, [pc, #72]	@ (8012a94 <eMBPoll+0xe8>)
 8012a4c:	7809      	ldrb	r1, [r1, #0]
 8012a4e:	4810      	ldr	r0, [pc, #64]	@ (8012a90 <eMBPoll+0xe4>)
 8012a50:	6805      	ldr	r5, [r0, #0]
 8012a52:	f04f 0c01 	mov.w	ip, #1
 8012a56:	f8a2 c000 	strh.w	ip, [r2]
 8012a5a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8012a5e:	7029      	strb	r1, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 8012a60:	6800      	ldr	r0, [r0, #0]
 8012a62:	8811      	ldrh	r1, [r2, #0]
 8012a64:	eb01 050c 	add.w	r5, r1, ip
 8012a68:	8015      	strh	r5, [r2, #0]
 8012a6a:	5443      	strb	r3, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8012a6c:	4b10      	ldr	r3, [pc, #64]	@ (8012ab0 <eMBPoll+0x104>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	4a0c      	ldr	r2, [pc, #48]	@ (8012aa4 <eMBPoll+0xf8>)
 8012a72:	8812      	ldrh	r2, [r2, #0]
 8012a74:	4906      	ldr	r1, [pc, #24]	@ (8012a90 <eMBPoll+0xe4>)
 8012a76:	6809      	ldr	r1, [r1, #0]
 8012a78:	480c      	ldr	r0, [pc, #48]	@ (8012aac <eMBPoll+0x100>)
 8012a7a:	7800      	ldrb	r0, [r0, #0]
 8012a7c:	4798      	blx	r3
 8012a7e:	e7a1      	b.n	80129c4 <eMBPoll+0x18>
        return MB_EILLSTATE;
 8012a80:	2406      	movs	r4, #6
 8012a82:	e79f      	b.n	80129c4 <eMBPoll+0x18>
    return MB_ENOERR;
 8012a84:	4604      	mov	r4, r0
 8012a86:	e79d      	b.n	80129c4 <eMBPoll+0x18>
 8012a88:	461c      	mov	r4, r3
 8012a8a:	e79b      	b.n	80129c4 <eMBPoll+0x18>
 8012a8c:	2000009c 	.word	0x2000009c
 8012a90:	20000a54 	.word	0x20000a54
 8012a94:	20000a51 	.word	0x20000a51
 8012a98:	20000a50 	.word	0x20000a50
 8012a9c:	2000001c 	.word	0x2000001c
 8012aa0:	20000a60 	.word	0x20000a60
 8012aa4:	20000a52 	.word	0x20000a52
 8012aa8:	20000a58 	.word	0x20000a58
 8012aac:	20000a71 	.word	0x20000a71
 8012ab0:	20000a6c 	.word	0x20000a6c

08012ab4 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8012ab4:	4b02      	ldr	r3, [pc, #8]	@ (8012ac0 <xMBPortEventInit+0xc>)
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 8012aba:	2001      	movs	r0, #1
 8012abc:	4770      	bx	lr
 8012abe:	bf00      	nop
 8012ac0:	20000a72 	.word	0x20000a72

08012ac4 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	4a03      	ldr	r2, [pc, #12]	@ (8012ad4 <xMBPortEventPost+0x10>)
 8012ac8:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8012aca:	4a03      	ldr	r2, [pc, #12]	@ (8012ad8 <xMBPortEventPost+0x14>)
 8012acc:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	4770      	bx	lr
 8012ad2:	bf00      	nop
 8012ad4:	20000a72 	.word	0x20000a72
 8012ad8:	20000a73 	.word	0x20000a73

08012adc <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8012adc:	4603      	mov	r3, r0
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8012ade:	4a05      	ldr	r2, [pc, #20]	@ (8012af4 <xMBPortEventGet+0x18>)
 8012ae0:	7810      	ldrb	r0, [r2, #0]
 8012ae2:	b130      	cbz	r0, 8012af2 <xMBPortEventGet+0x16>
    {
        *eEvent = eQueuedEvent;
 8012ae4:	4a04      	ldr	r2, [pc, #16]	@ (8012af8 <xMBPortEventGet+0x1c>)
 8012ae6:	7812      	ldrb	r2, [r2, #0]
 8012ae8:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8012aea:	4b02      	ldr	r3, [pc, #8]	@ (8012af4 <xMBPortEventGet+0x18>)
 8012aec:	2200      	movs	r2, #0
 8012aee:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8012af0:	2001      	movs	r0, #1
    }
    return xEventHappened;
}
 8012af2:	4770      	bx	lr
 8012af4:	20000a72 	.word	0x20000a72
 8012af8:	20000a73 	.word	0x20000a73

08012afc <handler_mb_tcp>:


//mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip);
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_READ){
 8012afc:	2907      	cmp	r1, #7
 8012afe:	d000      	beq.n	8012b02 <handler_mb_tcp+0x6>
 8012b00:	4770      	bx	lr
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){
 8012b02:	b538      	push	{r3, r4, r5, lr}
 8012b04:	4604      	mov	r4, r0
		if (mg_check_ip_acl(mg_acl, &c->rem) != 1){
 8012b06:	4b1e      	ldr	r3, [pc, #120]	@ (8012b80 <handler_mb_tcp+0x84>)
 8012b08:	f100 021c 	add.w	r2, r0, #28
 8012b0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b10:	f013 fafc 	bl	802610c <mg_check_ip_acl>
 8012b14:	2801      	cmp	r0, #1
 8012b16:	d006      	beq.n	8012b26 <handler_mb_tcp+0x2a>
			c->is_closing = 1;
 8012b18:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012b1c:	f043 0320 	orr.w	r3, r3, #32
 8012b20:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
			}
		}else{
			c->is_closing = 1;
		}
	}
}
 8012b24:	bd38      	pop	{r3, r4, r5, pc}
		ucTCPRequestLen = r->len;
 8012b26:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8012b28:	b293      	uxth	r3, r2
 8012b2a:	4916      	ldr	r1, [pc, #88]	@ (8012b84 <handler_mb_tcp+0x88>)
 8012b2c:	800b      	strh	r3, [r1, #0]
		if(ucTCPRequestLen>0){
 8012b2e:	b933      	cbnz	r3, 8012b3e <handler_mb_tcp+0x42>
			c->is_closing = 1;
 8012b30:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012b34:	f043 0320 	orr.w	r3, r3, #32
 8012b38:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012b3c:	e7f2      	b.n	8012b24 <handler_mb_tcp+0x28>
			memcpy(ucTCPRequestFrame, r->buf, sizeof(uint8_t) * ucTCPRequestLen);
 8012b3e:	461a      	mov	r2, r3
 8012b40:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012b42:	4811      	ldr	r0, [pc, #68]	@ (8012b88 <handler_mb_tcp+0x8c>)
 8012b44:	f01b f980 	bl	802de48 <memcpy>
			xMBPortEventPost (EV_FRAME_RECEIVED);
 8012b48:	2001      	movs	r0, #1
 8012b4a:	f7ff ffbb 	bl	8012ac4 <xMBPortEventPost>
			eMBPoll ();
 8012b4e:	f7ff ff2d 	bl	80129ac <eMBPoll>
			eMBPoll ();
 8012b52:	f7ff ff2b 	bl	80129ac <eMBPoll>
			if(bFrameSent){
 8012b56:	4b0d      	ldr	r3, [pc, #52]	@ (8012b8c <handler_mb_tcp+0x90>)
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	b933      	cbnz	r3, 8012b6a <handler_mb_tcp+0x6e>
				c->is_closing = 1;
 8012b5c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012b60:	f043 0320 	orr.w	r3, r3, #32
 8012b64:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012b68:	e7dc      	b.n	8012b24 <handler_mb_tcp+0x28>
				bFrameSent = FALSE;
 8012b6a:	2500      	movs	r5, #0
 8012b6c:	4b07      	ldr	r3, [pc, #28]	@ (8012b8c <handler_mb_tcp+0x90>)
 8012b6e:	701d      	strb	r5, [r3, #0]
				mg_send(c, ucTCPResponseFrame, ucTCPResponseLen);
 8012b70:	4b07      	ldr	r3, [pc, #28]	@ (8012b90 <handler_mb_tcp+0x94>)
 8012b72:	881a      	ldrh	r2, [r3, #0]
 8012b74:	4907      	ldr	r1, [pc, #28]	@ (8012b94 <handler_mb_tcp+0x98>)
 8012b76:	4620      	mov	r0, r4
 8012b78:	f014 fbe2 	bl	8027340 <mg_send>
				r->len = 0;                  // Tell Mongoose we've consumed data
 8012b7c:	6425      	str	r5, [r4, #64]	@ 0x40
 8012b7e:	e7d1      	b.n	8012b24 <handler_mb_tcp+0x28>
 8012b80:	20000a74 	.word	0x20000a74
 8012b84:	20001280 	.word	0x20001280
 8012b88:	20001284 	.word	0x20001284
 8012b8c:	20000a7c 	.word	0x20000a7c
 8012b90:	20000a7e 	.word	0x20000a7e
 8012b94:	20000a80 	.word	0x20000a80

08012b98 <my_calloc>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8012b98:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8012b9a:	fb01 f400 	mul.w	r4, r1, r0
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	f007 fee2 	bl	801a968 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8012ba4:	4605      	mov	r5, r0
 8012ba6:	b118      	cbz	r0, 8012bb0 <my_calloc+0x18>
 8012ba8:	4622      	mov	r2, r4
 8012baa:	2100      	movs	r1, #0
 8012bac:	f019 ff10 	bl	802c9d0 <memset>
  return p;
}
 8012bb0:	4628      	mov	r0, r5
 8012bb2:	bd38      	pop	{r3, r4, r5, pc}

08012bb4 <init_mb_tcp>:



void init_mb_tcp(void * param){
 8012bb4:	b530      	push	{r4, r5, lr}
 8012bb6:	b083      	sub	sp, #12

	struct mg_mgr *mgr = (struct mg_mgr *)param;  // Event manager
	mg_listen(mgr, s_lsn, handler_mb_tcp, NULL);  // Create server connection
 8012bb8:	2300      	movs	r3, #0
 8012bba:	4a24      	ldr	r2, [pc, #144]	@ (8012c4c <init_mb_tcp+0x98>)
 8012bbc:	4924      	ldr	r1, [pc, #144]	@ (8012c50 <init_mb_tcp+0x9c>)
 8012bbe:	f014 fad3 	bl	8027168 <mg_listen>

	eMBTCPInit(0);
 8012bc2:	2000      	movs	r0, #0
 8012bc4:	f7ff fea0 	bl	8012908 <eMBTCPInit>
	eMBEnable();
 8012bc8:	f7ff fede 	bl	8012988 <eMBEnable>

	size_t acl_size = 0;
 8012bcc:	2200      	movs	r2, #0
 8012bce:	9201      	str	r2, [sp, #4]
	mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8012bd0:	a901      	add	r1, sp, #4
 8012bd2:	4820      	ldr	r0, [pc, #128]	@ (8012c54 <init_mb_tcp+0xa0>)
 8012bd4:	f008 f830 	bl	801ac38 <mg_fs_lfs_status>
	if(acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 8012bd8:	9801      	ldr	r0, [sp, #4]
 8012bda:	1e42      	subs	r2, r0, #1
 8012bdc:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d815      	bhi.n	8012c10 <init_mb_tcp+0x5c>
		mg_acl.buf = calloc(acl_size + 1, sizeof(char));
 8012be4:	2101      	movs	r1, #1
 8012be6:	4408      	add	r0, r1
 8012be8:	f7ff ffd6 	bl	8012b98 <my_calloc>
 8012bec:	4d1a      	ldr	r5, [pc, #104]	@ (8012c58 <init_mb_tcp+0xa4>)
 8012bee:	6028      	str	r0, [r5, #0]
		void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 8012bf0:	2101      	movs	r1, #1
 8012bf2:	4818      	ldr	r0, [pc, #96]	@ (8012c54 <init_mb_tcp+0xa0>)
 8012bf4:	f008 f85e 	bl	801acb4 <mg_fs_lfs_open>
 8012bf8:	4604      	mov	r4, r0
		mg_fs_lfs_read(fd, mg_acl.buf, acl_size);
 8012bfa:	9a01      	ldr	r2, [sp, #4]
 8012bfc:	6829      	ldr	r1, [r5, #0]
 8012bfe:	f008 f889 	bl	801ad14 <mg_fs_lfs_read>
		mg_acl.len = acl_size;
 8012c02:	9b01      	ldr	r3, [sp, #4]
 8012c04:	606b      	str	r3, [r5, #4]
		mg_fs_lfs_close(fd);
 8012c06:	4620      	mov	r0, r4
 8012c08:	f008 f878 	bl	801acfc <mg_fs_lfs_close>
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
		mg_fs_lfs_close(fd1);
	}
}
 8012c0c:	b003      	add	sp, #12
 8012c0e:	bd30      	pop	{r4, r5, pc}
		mg_acl.buf = calloc(strlen(DEFAULT_ACL) + 1, sizeof(char));
 8012c10:	2101      	movs	r1, #1
 8012c12:	200b      	movs	r0, #11
 8012c14:	f7ff ffc0 	bl	8012b98 <my_calloc>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	4c0f      	ldr	r4, [pc, #60]	@ (8012c58 <init_mb_tcp+0xa4>)
 8012c1c:	6020      	str	r0, [r4, #0]
		mg_acl.len = strlen(DEFAULT_ACL) + 1;
 8012c1e:	220b      	movs	r2, #11
 8012c20:	6062      	str	r2, [r4, #4]
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
 8012c22:	4a0e      	ldr	r2, [pc, #56]	@ (8012c5c <init_mb_tcp+0xa8>)
 8012c24:	ca03      	ldmia	r2!, {r0, r1}
 8012c26:	6018      	str	r0, [r3, #0]
 8012c28:	6059      	str	r1, [r3, #4]
 8012c2a:	8811      	ldrh	r1, [r2, #0]
 8012c2c:	7892      	ldrb	r2, [r2, #2]
 8012c2e:	8119      	strh	r1, [r3, #8]
 8012c30:	729a      	strb	r2, [r3, #10]
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 8012c32:	2102      	movs	r1, #2
 8012c34:	4807      	ldr	r0, [pc, #28]	@ (8012c54 <init_mb_tcp+0xa0>)
 8012c36:	f008 f83d 	bl	801acb4 <mg_fs_lfs_open>
 8012c3a:	4605      	mov	r5, r0
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
 8012c3c:	6862      	ldr	r2, [r4, #4]
 8012c3e:	6821      	ldr	r1, [r4, #0]
 8012c40:	f008 f874 	bl	801ad2c <mg_fs_lfs_write>
		mg_fs_lfs_close(fd1);
 8012c44:	4628      	mov	r0, r5
 8012c46:	f008 f859 	bl	801acfc <mg_fs_lfs_close>
}
 8012c4a:	e7df      	b.n	8012c0c <init_mb_tcp+0x58>
 8012c4c:	08012afd 	.word	0x08012afd
 8012c50:	080364e0 	.word	0x080364e0
 8012c54:	080364f4 	.word	0x080364f4
 8012c58:	20000a74 	.word	0x20000a74
 8012c5c:	08036508 	.word	0x08036508

08012c60 <xMBTCPPortInit>:
BOOL  xMBTCPPortInit( USHORT usTCPPort )
{


    return TRUE;
}
 8012c60:	2001      	movs	r0, #1
 8012c62:	4770      	bx	lr

08012c64 <xMBTCPPortGetRequest>:

BOOL  xMBTCPPortGetRequest( UCHAR **ppucMBTCPFrame, USHORT * usTCPLength )
{
    *ppucMBTCPFrame = (uint8_t *) &ucTCPRequestFrame[0];
 8012c64:	4b04      	ldr	r3, [pc, #16]	@ (8012c78 <xMBTCPPortGetRequest+0x14>)
 8012c66:	6003      	str	r3, [r0, #0]
    *usTCPLength = ucTCPRequestLen;
 8012c68:	4b04      	ldr	r3, [pc, #16]	@ (8012c7c <xMBTCPPortGetRequest+0x18>)
 8012c6a:	881a      	ldrh	r2, [r3, #0]
 8012c6c:	800a      	strh	r2, [r1, #0]
    // Reset the buffer.
    ucTCPRequestLen = 0;
 8012c6e:	2200      	movs	r2, #0
 8012c70:	801a      	strh	r2, [r3, #0]
    return TRUE;
}
 8012c72:	2001      	movs	r0, #1
 8012c74:	4770      	bx	lr
 8012c76:	bf00      	nop
 8012c78:	20001284 	.word	0x20001284
 8012c7c:	20001280 	.word	0x20001280

08012c80 <xMBTCPPortSendResponse>:


BOOL xMBTCPPortSendResponse( const UCHAR *pucMBTCPFrame, USHORT usTCPLength )
{
 8012c80:	b510      	push	{r4, lr}
 8012c82:	460c      	mov	r4, r1
      memcpy(ucTCPResponseFrame,pucMBTCPFrame , usTCPLength);
 8012c84:	460a      	mov	r2, r1
 8012c86:	4601      	mov	r1, r0
 8012c88:	4804      	ldr	r0, [pc, #16]	@ (8012c9c <xMBTCPPortSendResponse+0x1c>)
 8012c8a:	f01b f8dd 	bl	802de48 <memcpy>
      ucTCPResponseLen = usTCPLength;
 8012c8e:	4b04      	ldr	r3, [pc, #16]	@ (8012ca0 <xMBTCPPortSendResponse+0x20>)
 8012c90:	801c      	strh	r4, [r3, #0]
      bFrameSent = TRUE;
 8012c92:	2001      	movs	r0, #1
 8012c94:	4b03      	ldr	r3, [pc, #12]	@ (8012ca4 <xMBTCPPortSendResponse+0x24>)
 8012c96:	7018      	strb	r0, [r3, #0]
      return bFrameSent;
}
 8012c98:	bd10      	pop	{r4, pc}
 8012c9a:	bf00      	nop
 8012c9c:	20000a80 	.word	0x20000a80
 8012ca0:	20000a7e 	.word	0x20000a7e
 8012ca4:	20000a7c 	.word	0x20000a7c

08012ca8 <vMBTCPPortDisable>:
{
};

void vMBTCPPortDisable( void )
{
};
 8012ca8:	4770      	bx	lr

08012caa <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 8012caa:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8012cac:	f7ff ffd8 	bl	8012c60 <xMBTCPPortInit>
 8012cb0:	b108      	cbz	r0, 8012cb6 <eMBTCPDoInit+0xc>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012cb2:	2000      	movs	r0, #0
    {
        eStatus = MB_EPORTERR;
    }
    return eStatus;
}
 8012cb4:	bd08      	pop	{r3, pc}
        eStatus = MB_EPORTERR;
 8012cb6:	2003      	movs	r0, #3
 8012cb8:	e7fc      	b.n	8012cb4 <eMBTCPDoInit+0xa>

08012cba <eMBTCPStart>:

void
eMBTCPStart( void )
{
}
 8012cba:	4770      	bx	lr

08012cbc <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8012cbc:	b508      	push	{r3, lr}
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8012cbe:	f7ff fff3 	bl	8012ca8 <vMBTCPPortDisable>
}
 8012cc2:	bd08      	pop	{r3, pc}

08012cc4 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8012cc4:	b570      	push	{r4, r5, r6, lr}
 8012cc6:	b082      	sub	sp, #8
 8012cc8:	4606      	mov	r6, r0
 8012cca:	460d      	mov	r5, r1
 8012ccc:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_EIO;
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8012cce:	f10d 0102 	add.w	r1, sp, #2
 8012cd2:	a801      	add	r0, sp, #4
 8012cd4:	f7ff ffc6 	bl	8012c64 <xMBTCPPortGetRequest>
 8012cd8:	b180      	cbz	r0, 8012cfc <eMBTCPReceive+0x38>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8012cda:	9b01      	ldr	r3, [sp, #4]
 8012cdc:	7899      	ldrb	r1, [r3, #2]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8012cde:	78da      	ldrb	r2, [r3, #3]

        if( usPID == MB_TCP_PROTOCOL_ID )
 8012ce0:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8012ce4:	d10c      	bne.n	8012d00 <eMBTCPReceive+0x3c>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8012ce6:	3307      	adds	r3, #7
 8012ce8:	602b      	str	r3, [r5, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8012cea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012cee:	3b07      	subs	r3, #7
 8012cf0:	8023      	strh	r3, [r4, #0]
            eStatus = MB_ENOERR;

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 8012cf2:	23ff      	movs	r3, #255	@ 0xff
 8012cf4:	7033      	strb	r3, [r6, #0]
            eStatus = MB_ENOERR;
 8012cf6:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012cf8:	b002      	add	sp, #8
 8012cfa:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EIO;
 8012cfc:	2005      	movs	r0, #5
 8012cfe:	e7fb      	b.n	8012cf8 <eMBTCPReceive+0x34>
    eMBErrorCode    eStatus = MB_EIO;
 8012d00:	2005      	movs	r0, #5
 8012d02:	e7f9      	b.n	8012cf8 <eMBTCPReceive+0x34>

08012d04 <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 8012d04:	b508      	push	{r3, lr}
 8012d06:	4608      	mov	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8012d08:	1dd1      	adds	r1, r2, #7
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 8012d0a:	1c53      	adds	r3, r2, #1
 8012d0c:	121b      	asrs	r3, r3, #8
 8012d0e:	f800 3c03 	strb.w	r3, [r0, #-3]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8012d12:	3201      	adds	r2, #1
 8012d14:	f800 2c02 	strb.w	r2, [r0, #-2]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8012d18:	b289      	uxth	r1, r1
 8012d1a:	3807      	subs	r0, #7
 8012d1c:	f7ff ffb0 	bl	8012c80 <xMBTCPPortSendResponse>
 8012d20:	b108      	cbz	r0, 8012d26 <eMBTCPSend+0x22>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012d22:	2000      	movs	r0, #0
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012d24:	bd08      	pop	{r3, pc}
        eStatus = MB_EIO;
 8012d26:	2005      	movs	r0, #5
 8012d28:	e7fc      	b.n	8012d24 <eMBTCPSend+0x20>
	...

08012d2c <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 8012d2c:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 8012d2e:	4b03      	ldr	r3, [pc, #12]	@ (8012d3c <handle_OPTIONS_method+0x10>)
 8012d30:	4a03      	ldr	r2, [pc, #12]	@ (8012d40 <handle_OPTIONS_method+0x14>)
 8012d32:	21c8      	movs	r1, #200	@ 0xc8
 8012d34:	f011 f952 	bl	8023fdc <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8012d38:	bd08      	pop	{r3, pc}
 8012d3a:	bf00      	nop
 8012d3c:	0803ae80 	.word	0x0803ae80
 8012d40:	08036514 	.word	0x08036514

08012d44 <handler_dev_version>:
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET POST methods\"}\r\n");
		return;
	}
}

static void handler_dev_version(struct mg_connection *c, struct mg_http_message *hm){
 8012d44:	b570      	push	{r4, r5, r6, lr}
 8012d46:	b084      	sub	sp, #16
 8012d48:	4605      	mov	r5, r0
 8012d4a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012d4c:	ae02      	add	r6, sp, #8
 8012d4e:	4910      	ldr	r1, [pc, #64]	@ (8012d90 <handler_dev_version+0x4c>)
 8012d50:	4630      	mov	r0, r6
 8012d52:	f011 facd 	bl	80242f0 <mg_str_s>
 8012d56:	2300      	movs	r3, #0
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012d5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012d62:	f011 fce7 	bl	8024734 <mg_match>
 8012d66:	b158      	cbz	r0, 8012d80 <handler_dev_version+0x3c>
		mg_http_reply(c, 200, headers,
 8012d68:	4b0a      	ldr	r3, [pc, #40]	@ (8012d94 <handler_dev_version+0x50>)
 8012d6a:	9301      	str	r3, [sp, #4]
 8012d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8012d98 <handler_dev_version+0x54>)
 8012d6e:	9300      	str	r3, [sp, #0]
 8012d70:	4b0a      	ldr	r3, [pc, #40]	@ (8012d9c <handler_dev_version+0x58>)
 8012d72:	4a0b      	ldr	r2, [pc, #44]	@ (8012da0 <handler_dev_version+0x5c>)
 8012d74:	21c8      	movs	r1, #200	@ 0xc8
 8012d76:	4628      	mov	r0, r5
 8012d78:	f011 f930 	bl	8023fdc <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 8012d7c:	b004      	add	sp, #16
 8012d7e:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012d80:	4b08      	ldr	r3, [pc, #32]	@ (8012da4 <handler_dev_version+0x60>)
 8012d82:	4a07      	ldr	r2, [pc, #28]	@ (8012da0 <handler_dev_version+0x5c>)
 8012d84:	f240 1195 	movw	r1, #405	@ 0x195
 8012d88:	4628      	mov	r0, r5
 8012d8a:	f011 f927 	bl	8023fdc <mg_http_reply>
		return;
 8012d8e:	e7f5      	b.n	8012d7c <handler_dev_version+0x38>
 8012d90:	080365b4 	.word	0x080365b4
 8012d94:	08036660 	.word	0x08036660
 8012d98:	08036664 	.word	0x08036664
 8012d9c:	080365b8 	.word	0x080365b8
 8012da0:	080365f0 	.word	0x080365f0
 8012da4:	08036668 	.word	0x08036668

08012da8 <handler_dev_info>:

static void handler_dev_info(struct mg_connection *c, struct mg_http_message *hm){
 8012da8:	b570      	push	{r4, r5, r6, lr}
 8012daa:	b088      	sub	sp, #32
 8012dac:	4605      	mov	r5, r0
 8012dae:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012db0:	ae06      	add	r6, sp, #24
 8012db2:	4913      	ldr	r1, [pc, #76]	@ (8012e00 <handler_dev_info+0x58>)
 8012db4:	4630      	mov	r0, r6
 8012db6:	f011 fa9b 	bl	80242f0 <mg_str_s>
 8012dba:	2300      	movs	r3, #0
 8012dbc:	9300      	str	r3, [sp, #0]
 8012dbe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012dc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012dc6:	f011 fcb5 	bl	8024734 <mg_match>
 8012dca:	b188      	cbz	r0, 8012df0 <handler_dev_info+0x48>
		mg_http_reply(c, 200, headers,
 8012dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8012e04 <handler_dev_info+0x5c>)
 8012dce:	9304      	str	r3, [sp, #16]
 8012dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8012e08 <handler_dev_info+0x60>)
 8012dd2:	9303      	str	r3, [sp, #12]
 8012dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8012e0c <handler_dev_info+0x64>)
 8012dd6:	9302      	str	r3, [sp, #8]
 8012dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8012e10 <handler_dev_info+0x68>)
 8012dda:	9301      	str	r3, [sp, #4]
 8012ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8012e14 <handler_dev_info+0x6c>)
 8012dde:	9300      	str	r3, [sp, #0]
 8012de0:	4b0d      	ldr	r3, [pc, #52]	@ (8012e18 <handler_dev_info+0x70>)
 8012de2:	4a0e      	ldr	r2, [pc, #56]	@ (8012e1c <handler_dev_info+0x74>)
 8012de4:	21c8      	movs	r1, #200	@ 0xc8
 8012de6:	4628      	mov	r0, r5
 8012de8:	f011 f8f8 	bl	8023fdc <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 8012dec:	b008      	add	sp, #32
 8012dee:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012df0:	4b0b      	ldr	r3, [pc, #44]	@ (8012e20 <handler_dev_info+0x78>)
 8012df2:	4a0a      	ldr	r2, [pc, #40]	@ (8012e1c <handler_dev_info+0x74>)
 8012df4:	f240 1195 	movw	r1, #405	@ 0x195
 8012df8:	4628      	mov	r0, r5
 8012dfa:	f011 f8ef 	bl	8023fdc <mg_http_reply>
		return;
 8012dfe:	e7f5      	b.n	8012dec <handler_dev_info+0x44>
 8012e00:	080365b4 	.word	0x080365b4
 8012e04:	08036724 	.word	0x08036724
 8012e08:	08036738 	.word	0x08036738
 8012e0c:	08036744 	.word	0x08036744
 8012e10:	08036660 	.word	0x08036660
 8012e14:	08036664 	.word	0x08036664
 8012e18:	080366b8 	.word	0x080366b8
 8012e1c:	080365f0 	.word	0x080365f0
 8012e20:	08036668 	.word	0x08036668

08012e24 <handle_firmware_deactivate>:
static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 8012e24:	b570      	push	{r4, r5, r6, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	4605      	mov	r5, r0
 8012e2a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012e2c:	ae02      	add	r6, sp, #8
 8012e2e:	4914      	ldr	r1, [pc, #80]	@ (8012e80 <handle_firmware_deactivate+0x5c>)
 8012e30:	4630      	mov	r0, r6
 8012e32:	f011 fa5d 	bl	80242f0 <mg_str_s>
 8012e36:	2300      	movs	r3, #0
 8012e38:	9300      	str	r3, [sp, #0]
 8012e3a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012e3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012e42:	f011 fc77 	bl	8024734 <mg_match>
 8012e46:	b198      	cbz	r0, 8012e70 <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8012e48:	4b0e      	ldr	r3, [pc, #56]	@ (8012e84 <handle_firmware_deactivate+0x60>)
 8012e4a:	6a1b      	ldr	r3, [r3, #32]
 8012e4c:	480e      	ldr	r0, [pc, #56]	@ (8012e88 <handle_firmware_deactivate+0x64>)
 8012e4e:	4798      	blx	r3
 8012e50:	b138      	cbz	r0, 8012e62 <handle_firmware_deactivate+0x3e>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012e52:	4b0e      	ldr	r3, [pc, #56]	@ (8012e8c <handle_firmware_deactivate+0x68>)
 8012e54:	4a0e      	ldr	r2, [pc, #56]	@ (8012e90 <handle_firmware_deactivate+0x6c>)
 8012e56:	21c8      	movs	r1, #200	@ 0xc8
 8012e58:	4628      	mov	r0, r5
 8012e5a:	f011 f8bf 	bl	8023fdc <mg_http_reply>
}
 8012e5e:	b004      	add	sp, #16
 8012e60:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8012e62:	4b0c      	ldr	r3, [pc, #48]	@ (8012e94 <handle_firmware_deactivate+0x70>)
 8012e64:	4a0a      	ldr	r2, [pc, #40]	@ (8012e90 <handle_firmware_deactivate+0x6c>)
 8012e66:	21c8      	movs	r1, #200	@ 0xc8
 8012e68:	4628      	mov	r0, r5
 8012e6a:	f011 f8b7 	bl	8023fdc <mg_http_reply>
 8012e6e:	e7f6      	b.n	8012e5e <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012e70:	4b09      	ldr	r3, [pc, #36]	@ (8012e98 <handle_firmware_deactivate+0x74>)
 8012e72:	4a07      	ldr	r2, [pc, #28]	@ (8012e90 <handle_firmware_deactivate+0x6c>)
 8012e74:	f240 1195 	movw	r1, #405	@ 0x195
 8012e78:	4628      	mov	r0, r5
 8012e7a:	f011 f8af 	bl	8023fdc <mg_http_reply>
}
 8012e7e:	e7ee      	b.n	8012e5e <handle_firmware_deactivate+0x3a>
 8012e80:	0803674c 	.word	0x0803674c
 8012e84:	200000a0 	.word	0x200000a0
 8012e88:	08035fdc 	.word	0x08035fdc
 8012e8c:	08036754 	.word	0x08036754
 8012e90:	080365f0 	.word	0x080365f0
 8012e94:	08036790 	.word	0x08036790
 8012e98:	080367d4 	.word	0x080367d4

08012e9c <handle_web_files_remove>:
static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 8012e9c:	b570      	push	{r4, r5, r6, lr}
 8012e9e:	b084      	sub	sp, #16
 8012ea0:	4605      	mov	r5, r0
 8012ea2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012ea4:	ae02      	add	r6, sp, #8
 8012ea6:	4912      	ldr	r1, [pc, #72]	@ (8012ef0 <handle_web_files_remove+0x54>)
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	f011 fa21 	bl	80242f0 <mg_str_s>
 8012eae:	2300      	movs	r3, #0
 8012eb0:	9300      	str	r3, [sp, #0]
 8012eb2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012eb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012eba:	f011 fc3b 	bl	8024734 <mg_match>
 8012ebe:	b178      	cbz	r0, 8012ee0 <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 8012ec0:	4e0c      	ldr	r6, [pc, #48]	@ (8012ef4 <handle_web_files_remove+0x58>)
 8012ec2:	6a33      	ldr	r3, [r6, #32]
 8012ec4:	4c0c      	ldr	r4, [pc, #48]	@ (8012ef8 <handle_web_files_remove+0x5c>)
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 8012eca:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8012ecc:	4620      	mov	r0, r4
 8012ece:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8012ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8012efc <handle_web_files_remove+0x60>)
 8012ed2:	4a0b      	ldr	r2, [pc, #44]	@ (8012f00 <handle_web_files_remove+0x64>)
 8012ed4:	21c8      	movs	r1, #200	@ 0xc8
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	f011 f880 	bl	8023fdc <mg_http_reply>
}
 8012edc:	b004      	add	sp, #16
 8012ede:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012ee0:	4b08      	ldr	r3, [pc, #32]	@ (8012f04 <handle_web_files_remove+0x68>)
 8012ee2:	4a07      	ldr	r2, [pc, #28]	@ (8012f00 <handle_web_files_remove+0x64>)
 8012ee4:	f240 1195 	movw	r1, #405	@ 0x195
 8012ee8:	4628      	mov	r0, r5
 8012eea:	f011 f877 	bl	8023fdc <mg_http_reply>
}
 8012eee:	e7f5      	b.n	8012edc <handle_web_files_remove+0x40>
 8012ef0:	0803674c 	.word	0x0803674c
 8012ef4:	200000a0 	.word	0x200000a0
 8012ef8:	08035fc8 	.word	0x08035fc8
 8012efc:	08036824 	.word	0x08036824
 8012f00:	080365f0 	.word	0x080365f0
 8012f04:	080367d4 	.word	0x080367d4

08012f08 <handler_logout>:
static void handler_logout(struct mg_connection *c,struct mg_http_message *hm){
 8012f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f0a:	b0c3      	sub	sp, #268	@ 0x10c
 8012f0c:	4606      	mov	r6, r0
 8012f0e:	460d      	mov	r5, r1
	char username[128] = {0};
 8012f10:	2400      	movs	r4, #0
 8012f12:	9422      	str	r4, [sp, #136]	@ 0x88
 8012f14:	277c      	movs	r7, #124	@ 0x7c
 8012f16:	463a      	mov	r2, r7
 8012f18:	4621      	mov	r1, r4
 8012f1a:	a823      	add	r0, sp, #140	@ 0x8c
 8012f1c:	f019 fd58 	bl	802c9d0 <memset>
	char pass[128] = {0};
 8012f20:	9402      	str	r4, [sp, #8]
 8012f22:	463a      	mov	r2, r7
 8012f24:	4621      	mov	r1, r4
 8012f26:	a803      	add	r0, sp, #12
 8012f28:	f019 fd52 	bl	802c9d0 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8012f2c:	2280      	movs	r2, #128	@ 0x80
 8012f2e:	9200      	str	r2, [sp, #0]
 8012f30:	ab02      	add	r3, sp, #8
 8012f32:	a922      	add	r1, sp, #136	@ 0x88
 8012f34:	4628      	mov	r0, r5
 8012f36:	f012 f903 	bl	8025140 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 8012f3a:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8012f3e:	b113      	cbz	r3, 8012f46 <handler_logout+0x3e>
 8012f40:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012f44:	b962      	cbnz	r2, 8012f60 <handler_logout+0x58>
	}else if (username[0] == '\0' && pass[0] != '\0') {
 8012f46:	b913      	cbnz	r3, 8012f4e <handler_logout+0x46>
 8012f48:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012f4c:	bb4b      	cbnz	r3, 8012fa2 <handler_logout+0x9a>
        mg_http_reply(c, 404, headers, //TODO delete for release,
 8012f4e:	4b21      	ldr	r3, [pc, #132]	@ (8012fd4 <handler_logout+0xcc>)
 8012f50:	4a21      	ldr	r2, [pc, #132]	@ (8012fd8 <handler_logout+0xd0>)
 8012f52:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012f56:	4630      	mov	r0, r6
 8012f58:	f011 f840 	bl	8023fdc <mg_http_reply>
}
 8012f5c:	b043      	add	sp, #268	@ 0x10c
 8012f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mg_http_reply(c, 404, headers, //TODO delete for release,
 8012f60:	4b1e      	ldr	r3, [pc, #120]	@ (8012fdc <handler_logout+0xd4>)
 8012f62:	4a1d      	ldr	r2, [pc, #116]	@ (8012fd8 <handler_logout+0xd0>)
 8012f64:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012f68:	4630      	mov	r0, r6
 8012f6a:	f011 f837 	bl	8023fdc <mg_http_reply>
        return;
 8012f6e:	e7f5      	b.n	8012f5c <handler_logout+0x54>
				logging(L_INFO, "User: %s is logout", web_tokens[i].user);
 8012f70:	23b8      	movs	r3, #184	@ 0xb8
 8012f72:	fb03 f404 	mul.w	r4, r3, r4
 8012f76:	4f1a      	ldr	r7, [pc, #104]	@ (8012fe0 <handler_logout+0xd8>)
 8012f78:	19e5      	adds	r5, r4, r7
 8012f7a:	462a      	mov	r2, r5
 8012f7c:	4919      	ldr	r1, [pc, #100]	@ (8012fe4 <handler_logout+0xdc>)
 8012f7e:	2001      	movs	r0, #1
 8012f80:	f7fe ffb8 	bl	8011ef4 <logging>
				web_tokens[i].token[0] = '\0';
 8012f84:	2300      	movs	r3, #0
 8012f86:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
				web_tokens[i].expare = 0;
 8012f8a:	2000      	movs	r0, #0
 8012f8c:	2100      	movs	r1, #0
 8012f8e:	e9c5 012c 	strd	r0, r1, [r5, #176]	@ 0xb0
				web_tokens[i].user[0] = '\0';
 8012f92:	553b      	strb	r3, [r7, r4]
		        mg_http_reply(c, 200, headers, //TODO delete for release,
 8012f94:	4b14      	ldr	r3, [pc, #80]	@ (8012fe8 <handler_logout+0xe0>)
 8012f96:	4a10      	ldr	r2, [pc, #64]	@ (8012fd8 <handler_logout+0xd0>)
 8012f98:	21c8      	movs	r1, #200	@ 0xc8
 8012f9a:	4630      	mov	r0, r6
 8012f9c:	f011 f81e 	bl	8023fdc <mg_http_reply>
		        return;
 8012fa0:	e7dc      	b.n	8012f5c <handler_logout+0x54>
		for (i=0;i<user_list_size; i++){
 8012fa2:	2400      	movs	r4, #0
 8012fa4:	2c09      	cmp	r4, #9
 8012fa6:	dc0c      	bgt.n	8012fc2 <handler_logout+0xba>
			if((strcmp(web_tokens[i].token, pass) == 0)){
 8012fa8:	23b8      	movs	r3, #184	@ 0xb8
 8012faa:	fb04 f303 	mul.w	r3, r4, r3
 8012fae:	3380      	adds	r3, #128	@ 0x80
 8012fb0:	a902      	add	r1, sp, #8
 8012fb2:	480b      	ldr	r0, [pc, #44]	@ (8012fe0 <handler_logout+0xd8>)
 8012fb4:	4418      	add	r0, r3
 8012fb6:	f7fd f913 	bl	80101e0 <strcmp>
 8012fba:	2800      	cmp	r0, #0
 8012fbc:	d0d8      	beq.n	8012f70 <handler_logout+0x68>
		for (i=0;i<user_list_size; i++){
 8012fbe:	3401      	adds	r4, #1
 8012fc0:	e7f0      	b.n	8012fa4 <handler_logout+0x9c>
        mg_http_reply(c, 404, headers,
 8012fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8012fec <handler_logout+0xe4>)
 8012fc4:	4a04      	ldr	r2, [pc, #16]	@ (8012fd8 <handler_logout+0xd0>)
 8012fc6:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012fca:	4630      	mov	r0, r6
 8012fcc:	f011 f806 	bl	8023fdc <mg_http_reply>
        return;
 8012fd0:	e7c4      	b.n	8012f5c <handler_logout+0x54>
 8012fd2:	bf00      	nop
 8012fd4:	08036970 	.word	0x08036970
 8012fd8:	080365f0 	.word	0x080365f0
 8012fdc:	0803686c 	.word	0x0803686c
 8012fe0:	20001a88 	.word	0x20001a88
 8012fe4:	080368ec 	.word	0x080368ec
 8012fe8:	08036900 	.word	0x08036900
 8012fec:	0803693c 	.word	0x0803693c

08012ff0 <handle_login>:
static void handle_login(struct mg_connection *c, tokens_list_t *u) {
 8012ff0:	b530      	push	{r4, r5, lr}
 8012ff2:	b0c7      	sub	sp, #284	@ 0x11c
 8012ff4:	4605      	mov	r5, r0
 8012ff6:	460c      	mov	r4, r1
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8012ff8:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8012ffc:	f013 0240 	ands.w	r2, r3, #64	@ 0x40
 8013000:	d024      	beq.n	801304c <handle_login+0x5c>
 8013002:	4b14      	ldr	r3, [pc, #80]	@ (8013054 <handle_login+0x64>)
              cookie_name, u->token,
 8013004:	f104 0180 	add.w	r1, r4, #128	@ 0x80
  mg_snprintf(cookie, sizeof(cookie),
 8013008:	b312      	cbz	r2, 8013050 <handle_login+0x60>
 801300a:	4a13      	ldr	r2, [pc, #76]	@ (8013058 <handle_login+0x68>)
 801300c:	4813      	ldr	r0, [pc, #76]	@ (801305c <handle_login+0x6c>)
 801300e:	9002      	str	r0, [sp, #8]
 8013010:	9201      	str	r2, [sp, #4]
 8013012:	9100      	str	r1, [sp, #0]
 8013014:	4a12      	ldr	r2, [pc, #72]	@ (8013060 <handle_login+0x70>)
 8013016:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801301a:	a806      	add	r0, sp, #24
 801301c:	f010 fae0 	bl	80235e0 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->user));
 8013020:	9405      	str	r4, [sp, #20]
 8013022:	2200      	movs	r2, #0
 8013024:	9204      	str	r2, [sp, #16]
 8013026:	4b0f      	ldr	r3, [pc, #60]	@ (8013064 <handle_login+0x74>)
 8013028:	9303      	str	r3, [sp, #12]
 801302a:	490f      	ldr	r1, [pc, #60]	@ (8013068 <handle_login+0x78>)
 801302c:	9102      	str	r1, [sp, #8]
 801302e:	9201      	str	r2, [sp, #4]
 8013030:	9300      	str	r3, [sp, #0]
 8013032:	4b0e      	ldr	r3, [pc, #56]	@ (801306c <handle_login+0x7c>)
 8013034:	aa06      	add	r2, sp, #24
 8013036:	21c8      	movs	r1, #200	@ 0xc8
 8013038:	4628      	mov	r0, r5
 801303a:	f010 ffcf 	bl	8023fdc <mg_http_reply>
  logging(L_INFO, "Authenticated web user: %s ", u->user);
 801303e:	4622      	mov	r2, r4
 8013040:	490b      	ldr	r1, [pc, #44]	@ (8013070 <handle_login+0x80>)
 8013042:	2001      	movs	r0, #1
 8013044:	f7fe ff56 	bl	8011ef4 <logging>
}
 8013048:	b047      	add	sp, #284	@ 0x11c
 801304a:	bd30      	pop	{r4, r5, pc}
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 801304c:	4b09      	ldr	r3, [pc, #36]	@ (8013074 <handle_login+0x84>)
 801304e:	e7d9      	b.n	8013004 <handle_login+0x14>
  mg_snprintf(cookie, sizeof(cookie),
 8013050:	4a09      	ldr	r2, [pc, #36]	@ (8013078 <handle_login+0x88>)
 8013052:	e7db      	b.n	801300c <handle_login+0x1c>
 8013054:	080369e8 	.word	0x080369e8
 8013058:	08036a0c 	.word	0x08036a0c
 801305c:	0002a300 	.word	0x0002a300
 8013060:	08036a18 	.word	0x08036a18
 8013064:	0802279d 	.word	0x0802279d
 8013068:	08037a90 	.word	0x08037a90
 801306c:	08036a5c 	.word	0x08036a5c
 8013070:	08036a64 	.word	0x08036a64
 8013074:	080369fc 	.word	0x080369fc
 8013078:	08036c70 	.word	0x08036c70

0801307c <auth>:
static bool auth(struct mg_connection *c, struct mg_http_message *hm, bool set_cookie){
 801307c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013080:	b0e5      	sub	sp, #404	@ 0x194
 8013082:	4605      	mov	r5, r0
 8013084:	460c      	mov	r4, r1
 8013086:	4616      	mov	r6, r2
	char pass_digest[sha1_str_len] = {0};
 8013088:	2100      	movs	r1, #0
 801308a:	9159      	str	r1, [sp, #356]	@ 0x164
 801308c:	2225      	movs	r2, #37	@ 0x25
 801308e:	a85a      	add	r0, sp, #360	@ 0x168
 8013090:	f019 fc9e 	bl	802c9d0 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8013094:	2280      	movs	r2, #128	@ 0x80
 8013096:	9200      	str	r2, [sp, #0]
 8013098:	ab02      	add	r3, sp, #8
 801309a:	a922      	add	r1, sp, #136	@ 0x88
 801309c:	4620      	mov	r0, r4
 801309e:	f012 f84f 	bl	8025140 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 80130a2:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 80130a6:	b113      	cbz	r3, 80130ae <auth+0x32>
 80130a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80130ac:	b94a      	cbnz	r2, 80130c2 <auth+0x46>
	} else if (username[0] == '\0' && pass[0] != '\0') {
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f040 80bb 	bne.w	801322a <auth+0x1ae>
 80130b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f040 80b2 	bne.w	8013222 <auth+0x1a6>
	return false;
 80130be:	2000      	movs	r0, #0
 80130c0:	e0b4      	b.n	801322c <auth+0x1b0>
		logging(L_INFO, "Try to authenticate user: %s", username);
 80130c2:	aa22      	add	r2, sp, #136	@ 0x88
 80130c4:	495b      	ldr	r1, [pc, #364]	@ (8013234 <auth+0x1b8>)
 80130c6:	2001      	movs	r0, #1
 80130c8:	f7fe ff14 	bl	8011ef4 <logging>
		mg_sha1_init(&sha1_ctx);
 80130cc:	a842      	add	r0, sp, #264	@ 0x108
 80130ce:	f011 f85d 	bl	802418c <mg_sha1_init>
		mg_sha1_update(&sha1_ctx, (const unsigned char *)pass, strlen(pass) * sizeof(char));
 80130d2:	a802      	add	r0, sp, #8
 80130d4:	f7fd f8e4 	bl	80102a0 <strlen>
 80130d8:	4602      	mov	r2, r0
 80130da:	a902      	add	r1, sp, #8
 80130dc:	a842      	add	r0, sp, #264	@ 0x108
 80130de:	f011 f86f 	bl	80241c0 <mg_sha1_update>
		mg_sha1_final((unsigned char *)&pass_digest, &sha1_ctx); // calculate sha1 pass
 80130e2:	a942      	add	r1, sp, #264	@ 0x108
 80130e4:	a859      	add	r0, sp, #356	@ 0x164
 80130e6:	f011 f8a5 	bl	8024234 <mg_sha1_final>
		for (i=0; i< user_list_size; i++ ){
 80130ea:	2400      	movs	r4, #0
 80130ec:	e02a      	b.n	8013144 <auth+0xc8>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 80130ee:	4641      	mov	r1, r8
 80130f0:	4628      	mov	r0, r5
 80130f2:	f7ff ff7d 	bl	8012ff0 <handle_login>
 80130f6:	e066      	b.n	80131c6 <auth+0x14a>
					strncpy(web_tokens[1].user, username, sizeof(web_tokens[1].user));
 80130f8:	4f4f      	ldr	r7, [pc, #316]	@ (8013238 <auth+0x1bc>)
 80130fa:	2280      	movs	r2, #128	@ 0x80
 80130fc:	a922      	add	r1, sp, #136	@ 0x88
 80130fe:	4638      	mov	r0, r7
 8013100:	f019 fcad 	bl	802ca5e <strncpy>
					web_tokens[1].expare = mg_now() + token_life_time;
 8013104:	f016 fcb4 	bl	8029a70 <mg_now>
 8013108:	4b4c      	ldr	r3, [pc, #304]	@ (801323c <auth+0x1c0>)
 801310a:	18c3      	adds	r3, r0, r3
 801310c:	f141 0100 	adc.w	r1, r1, #0
 8013110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013114:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
					mg_random_str(web_tokens[1].token, sha1_str_len -1);
 8013118:	2128      	movs	r1, #40	@ 0x28
 801311a:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 801311e:	f012 fc55 	bl	80259cc <mg_random_str>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 8013122:	b94e      	cbnz	r6, 8013138 <auth+0xbc>
					logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 8013124:	22b8      	movs	r2, #184	@ 0xb8
 8013126:	4b46      	ldr	r3, [pc, #280]	@ (8013240 <auth+0x1c4>)
 8013128:	fb02 3204 	mla	r2, r2, r4, r3
 801312c:	4945      	ldr	r1, [pc, #276]	@ (8013244 <auth+0x1c8>)
 801312e:	2001      	movs	r0, #1
 8013130:	f7fe fee0 	bl	8011ef4 <logging>
					return true;
 8013134:	2001      	movs	r0, #1
 8013136:	e079      	b.n	801322c <auth+0x1b0>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 8013138:	4639      	mov	r1, r7
 801313a:	4628      	mov	r0, r5
 801313c:	f7ff ff58 	bl	8012ff0 <handle_login>
 8013140:	e7f0      	b.n	8013124 <auth+0xa8>
		for (i=0; i< user_list_size; i++ ){
 8013142:	3401      	adds	r4, #1
 8013144:	2c09      	cmp	r4, #9
 8013146:	dc45      	bgt.n	80131d4 <auth+0x158>
			if((strcmp(web_users[i].user, username) == 0) && (strcmp(web_users[i].pass_digest, pass_digest) == 0)){
 8013148:	a922      	add	r1, sp, #136	@ 0x88
 801314a:	20a9      	movs	r0, #169	@ 0xa9
 801314c:	4b3e      	ldr	r3, [pc, #248]	@ (8013248 <auth+0x1cc>)
 801314e:	fb00 3004 	mla	r0, r0, r4, r3
 8013152:	f7fd f845 	bl	80101e0 <strcmp>
 8013156:	2800      	cmp	r0, #0
 8013158:	d1f3      	bne.n	8013142 <auth+0xc6>
 801315a:	23a9      	movs	r3, #169	@ 0xa9
 801315c:	fb04 f303 	mul.w	r3, r4, r3
 8013160:	3380      	adds	r3, #128	@ 0x80
 8013162:	a959      	add	r1, sp, #356	@ 0x164
 8013164:	4838      	ldr	r0, [pc, #224]	@ (8013248 <auth+0x1cc>)
 8013166:	4418      	add	r0, r3
 8013168:	f7fd f83a 	bl	80101e0 <strcmp>
 801316c:	2800      	cmp	r0, #0
 801316e:	d1e8      	bne.n	8013142 <auth+0xc6>
					if(web_tokens[i].expare < mg_now()){
 8013170:	4b33      	ldr	r3, [pc, #204]	@ (8013240 <auth+0x1c4>)
 8013172:	22b8      	movs	r2, #184	@ 0xb8
 8013174:	fb02 3304 	mla	r3, r2, r4, r3
 8013178:	f8d3 80b0 	ldr.w	r8, [r3, #176]	@ 0xb0
 801317c:	f8d3 70b4 	ldr.w	r7, [r3, #180]	@ 0xb4
 8013180:	f016 fc76 	bl	8029a70 <mg_now>
 8013184:	4580      	cmp	r8, r0
 8013186:	418f      	sbcs	r7, r1
 8013188:	d2b6      	bcs.n	80130f8 <auth+0x7c>
						strncpy(web_tokens[i].user, username, sizeof(web_tokens[i].user));
 801318a:	27b8      	movs	r7, #184	@ 0xb8
 801318c:	fb04 f707 	mul.w	r7, r4, r7
 8013190:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8013240 <auth+0x1c4>
 8013194:	eb07 0809 	add.w	r8, r7, r9
 8013198:	2280      	movs	r2, #128	@ 0x80
 801319a:	a922      	add	r1, sp, #136	@ 0x88
 801319c:	4640      	mov	r0, r8
 801319e:	f019 fc5e 	bl	802ca5e <strncpy>
						web_tokens[i].expare = mg_now() + token_life_time;
 80131a2:	f016 fc65 	bl	8029a70 <mg_now>
 80131a6:	4b25      	ldr	r3, [pc, #148]	@ (801323c <auth+0x1c0>)
 80131a8:	18c0      	adds	r0, r0, r3
 80131aa:	f141 0100 	adc.w	r1, r1, #0
 80131ae:	f8c8 00b0 	str.w	r0, [r8, #176]	@ 0xb0
 80131b2:	f8c8 10b4 	str.w	r1, [r8, #180]	@ 0xb4
						mg_random_str(web_tokens[i].token, sha1_str_len -1);
 80131b6:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80131ba:	2128      	movs	r1, #40	@ 0x28
 80131bc:	4448      	add	r0, r9
 80131be:	f012 fc05 	bl	80259cc <mg_random_str>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 80131c2:	2e00      	cmp	r6, #0
 80131c4:	d193      	bne.n	80130ee <auth+0x72>
						logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 80131c6:	4642      	mov	r2, r8
 80131c8:	491e      	ldr	r1, [pc, #120]	@ (8013244 <auth+0x1c8>)
 80131ca:	2001      	movs	r0, #1
 80131cc:	f7fe fe92 	bl	8011ef4 <logging>
						return true;
 80131d0:	2001      	movs	r0, #1
 80131d2:	e02b      	b.n	801322c <auth+0x1b0>
	return false;
 80131d4:	2000      	movs	r0, #0
 80131d6:	e029      	b.n	801322c <auth+0x1b0>
				        		"{\"status\":\"success\",\"message\":\"Token is valid\", \"user\": \"%s\"}\r\n", web_tokens[i].user);
 80131d8:	22b8      	movs	r2, #184	@ 0xb8
 80131da:	4b19      	ldr	r3, [pc, #100]	@ (8013240 <auth+0x1c4>)
 80131dc:	fb02 3304 	mla	r3, r2, r4, r3
				if (set_cookie) mg_http_reply(c, 200, headers,
 80131e0:	9300      	str	r3, [sp, #0]
 80131e2:	4b1a      	ldr	r3, [pc, #104]	@ (801324c <auth+0x1d0>)
 80131e4:	4a1a      	ldr	r2, [pc, #104]	@ (8013250 <auth+0x1d4>)
 80131e6:	21c8      	movs	r1, #200	@ 0xc8
 80131e8:	4628      	mov	r0, r5
 80131ea:	f010 fef7 	bl	8023fdc <mg_http_reply>
 80131ee:	e016      	b.n	801321e <auth+0x1a2>
		for (i=0;i<user_list_size; i++){
 80131f0:	3401      	adds	r4, #1
 80131f2:	2c09      	cmp	r4, #9
 80131f4:	dc17      	bgt.n	8013226 <auth+0x1aa>
			if((strcmp(web_tokens[i].token, pass) == 0 && web_tokens[i].user[0] != 0)){// && (web_tokens[i].expare > mg_now())
 80131f6:	23b8      	movs	r3, #184	@ 0xb8
 80131f8:	fb04 f303 	mul.w	r3, r4, r3
 80131fc:	3380      	adds	r3, #128	@ 0x80
 80131fe:	a902      	add	r1, sp, #8
 8013200:	480f      	ldr	r0, [pc, #60]	@ (8013240 <auth+0x1c4>)
 8013202:	4418      	add	r0, r3
 8013204:	f7fc ffec 	bl	80101e0 <strcmp>
 8013208:	2800      	cmp	r0, #0
 801320a:	d1f1      	bne.n	80131f0 <auth+0x174>
 801320c:	23b8      	movs	r3, #184	@ 0xb8
 801320e:	fb04 f303 	mul.w	r3, r4, r3
 8013212:	4a0b      	ldr	r2, [pc, #44]	@ (8013240 <auth+0x1c4>)
 8013214:	5cd3      	ldrb	r3, [r2, r3]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d0ea      	beq.n	80131f0 <auth+0x174>
				if (set_cookie) mg_http_reply(c, 200, headers,
 801321a:	2e00      	cmp	r6, #0
 801321c:	d1dc      	bne.n	80131d8 <auth+0x15c>
				return true;
 801321e:	2001      	movs	r0, #1
 8013220:	e004      	b.n	801322c <auth+0x1b0>
		for (i=0;i<user_list_size; i++){
 8013222:	2400      	movs	r4, #0
 8013224:	e7e5      	b.n	80131f2 <auth+0x176>
	return false;
 8013226:	2000      	movs	r0, #0
 8013228:	e000      	b.n	801322c <auth+0x1b0>
 801322a:	2000      	movs	r0, #0
}
 801322c:	b065      	add	sp, #404	@ 0x194
 801322e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013232:	bf00      	nop
 8013234:	08036a80 	.word	0x08036a80
 8013238:	20001b40 	.word	0x20001b40
 801323c:	0a4cb800 	.word	0x0a4cb800
 8013240:	20001a88 	.word	0x20001a88
 8013244:	08036aa0 	.word	0x08036aa0
 8013248:	200021b8 	.word	0x200021b8
 801324c:	08036abc 	.word	0x08036abc
 8013250:	080365f0 	.word	0x080365f0

08013254 <handler_authanticate>:
static void handler_authanticate(struct mg_connection *c,struct mg_http_message *hm){
 8013254:	b510      	push	{r4, lr}
 8013256:	4604      	mov	r4, r0
	if ( auth(c, hm, 1) ){
 8013258:	2201      	movs	r2, #1
 801325a:	f7ff ff0f 	bl	801307c <auth>
 801325e:	b100      	cbz	r0, 8013262 <handler_authanticate+0xe>
}
 8013260:	bd10      	pop	{r4, pc}
        mg_http_reply(c, 403, headers, //TODO delete for release,
 8013262:	4b04      	ldr	r3, [pc, #16]	@ (8013274 <handler_authanticate+0x20>)
 8013264:	4a04      	ldr	r2, [pc, #16]	@ (8013278 <handler_authanticate+0x24>)
 8013266:	f240 1193 	movw	r1, #403	@ 0x193
 801326a:	4620      	mov	r0, r4
 801326c:	f010 feb6 	bl	8023fdc <mg_http_reply>
}
 8013270:	e7f6      	b.n	8013260 <handler_authanticate+0xc>
 8013272:	bf00      	nop
 8013274:	08036afc 	.word	0x08036afc
 8013278:	080365f0 	.word	0x080365f0

0801327c <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 801327c:	b510      	push	{r4, lr}
 801327e:	b090      	sub	sp, #64	@ 0x40
 8013280:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 8013282:	a809      	add	r0, sp, #36	@ 0x24
 8013284:	f007 fc30 	bl	801aae8 <vPortGetHeapStats>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 8013288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801328a:	9306      	str	r3, [sp, #24]
 801328c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801328e:	9305      	str	r3, [sp, #20]
 8013290:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013292:	9304      	str	r3, [sp, #16]
 8013294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013296:	9303      	str	r3, [sp, #12]
 8013298:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801329a:	9302      	str	r3, [sp, #8]
 801329c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801329e:	9301      	str	r3, [sp, #4]
 80132a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132a2:	9300      	str	r3, [sp, #0]
 80132a4:	4b03      	ldr	r3, [pc, #12]	@ (80132b4 <handle_ram_status_get+0x38>)
 80132a6:	4a04      	ldr	r2, [pc, #16]	@ (80132b8 <handle_ram_status_get+0x3c>)
 80132a8:	21c8      	movs	r1, #200	@ 0xc8
 80132aa:	4620      	mov	r0, r4
 80132ac:	f010 fe96 	bl	8023fdc <mg_http_reply>
}
 80132b0:	b010      	add	sp, #64	@ 0x40
 80132b2:	bd10      	pop	{r4, pc}
 80132b4:	08036b2c 	.word	0x08036b2c
 80132b8:	08036c30 	.word	0x08036c30

080132bc <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 80132bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132be:	b091      	sub	sp, #68	@ 0x44
 80132c0:	4606      	mov	r6, r0
 80132c2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80132c4:	ad0c      	add	r5, sp, #48	@ 0x30
 80132c6:	494b      	ldr	r1, [pc, #300]	@ (80133f4 <handle_io_status_get+0x138>)
 80132c8:	4628      	mov	r0, r5
 80132ca:	f011 f811 	bl	80242f0 <mg_str_s>
 80132ce:	2300      	movs	r3, #0
 80132d0:	9300      	str	r3, [sp, #0]
 80132d2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80132d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80132da:	f011 fa2b 	bl	8024734 <mg_match>
 80132de:	b328      	cbz	r0, 801332c <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 80132e0:	4c45      	ldr	r4, [pc, #276]	@ (80133f8 <handle_io_status_get+0x13c>)
 80132e2:	6823      	ldr	r3, [r4, #0]
 80132e4:	2200      	movs	r2, #0
 80132e6:	2101      	movs	r1, #1
 80132e8:	a80a      	add	r0, sp, #40	@ 0x28
 80132ea:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 80132ec:	6823      	ldr	r3, [r4, #0]
 80132ee:	2200      	movs	r2, #0
 80132f0:	2102      	movs	r1, #2
 80132f2:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 80132f6:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 80132f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80132fc:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8013300:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 8013304:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 8013308:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 801330c:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8013310:	9505      	str	r5, [sp, #20]
 8013312:	9404      	str	r4, [sp, #16]
 8013314:	9003      	str	r0, [sp, #12]
 8013316:	9102      	str	r1, [sp, #8]
 8013318:	9201      	str	r2, [sp, #4]
 801331a:	9300      	str	r3, [sp, #0]
 801331c:	4b37      	ldr	r3, [pc, #220]	@ (80133fc <handle_io_status_get+0x140>)
 801331e:	4a38      	ldr	r2, [pc, #224]	@ (8013400 <handle_io_status_get+0x144>)
 8013320:	21c8      	movs	r1, #200	@ 0xc8
 8013322:	4630      	mov	r0, r6
 8013324:	f010 fe5a 	bl	8023fdc <mg_http_reply>
}
 8013328:	b011      	add	sp, #68	@ 0x44
 801332a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 801332c:	ad0e      	add	r5, sp, #56	@ 0x38
 801332e:	4935      	ldr	r1, [pc, #212]	@ (8013404 <handle_io_status_get+0x148>)
 8013330:	4628      	mov	r0, r5
 8013332:	f010 ffdd 	bl	80242f0 <mg_str_s>
 8013336:	2300      	movs	r3, #0
 8013338:	9300      	str	r3, [sp, #0]
 801333a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801333e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013342:	f011 f9f7 	bl	8024734 <mg_match>
 8013346:	2800      	cmp	r0, #0
 8013348:	d04b      	beq.n	80133e2 <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 801334a:	ab08      	add	r3, sp, #32
 801334c:	4a2e      	ldr	r2, [pc, #184]	@ (8013408 <handle_io_status_get+0x14c>)
 801334e:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013352:	c903      	ldmia	r1, {r0, r1}
 8013354:	f00f ff08 	bl	8023168 <mg_json_get_num>
 8013358:	2800      	cmp	r0, #0
 801335a:	d03a      	beq.n	80133d2 <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 801335c:	ab0a      	add	r3, sp, #40	@ 0x28
 801335e:	4a2b      	ldr	r2, [pc, #172]	@ (801340c <handle_io_status_get+0x150>)
 8013360:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013364:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013368:	f00f fefe 	bl	8023168 <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 801336c:	2800      	cmp	r0, #0
 801336e:	d030      	beq.n	80133d2 <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 8013370:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013374:	f7fd fc30 	bl	8010bd8 <__aeabi_d2uiz>
 8013378:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 801337a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801337e:	f7fd fc2b 	bl	8010bd8 <__aeabi_d2uiz>
 8013382:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8013384:	1e63      	subs	r3, r4, #1
 8013386:	b2db      	uxtb	r3, r3
 8013388:	2b02      	cmp	r3, #2
 801338a:	d801      	bhi.n	8013390 <handle_io_status_get+0xd4>
 801338c:	2d01      	cmp	r5, #1
 801338e:	d907      	bls.n	80133a0 <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 8013390:	4b1f      	ldr	r3, [pc, #124]	@ (8013410 <handle_io_status_get+0x154>)
 8013392:	4a1b      	ldr	r2, [pc, #108]	@ (8013400 <handle_io_status_get+0x144>)
 8013394:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013398:	4630      	mov	r0, r6
 801339a:	f010 fe1f 	bl	8023fdc <mg_http_reply>
 801339e:	e7c3      	b.n	8013328 <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 80133a0:	4f15      	ldr	r7, [pc, #84]	@ (80133f8 <handle_io_status_get+0x13c>)
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	2200      	movs	r2, #0
 80133a6:	2102      	movs	r1, #2
 80133a8:	a807      	add	r0, sp, #28
 80133aa:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 80133ac:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 80133b0:	446b      	add	r3, sp
 80133b2:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	2201      	movs	r2, #1
 80133ba:	2102      	movs	r1, #2
 80133bc:	a807      	add	r0, sp, #28
 80133be:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 80133c0:	9501      	str	r5, [sp, #4]
 80133c2:	9400      	str	r4, [sp, #0]
 80133c4:	4b13      	ldr	r3, [pc, #76]	@ (8013414 <handle_io_status_get+0x158>)
 80133c6:	4a0e      	ldr	r2, [pc, #56]	@ (8013400 <handle_io_status_get+0x144>)
 80133c8:	21c8      	movs	r1, #200	@ 0xc8
 80133ca:	4630      	mov	r0, r6
 80133cc:	f010 fe06 	bl	8023fdc <mg_http_reply>
 80133d0:	e7aa      	b.n	8013328 <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 80133d2:	4b11      	ldr	r3, [pc, #68]	@ (8013418 <handle_io_status_get+0x15c>)
 80133d4:	4a0a      	ldr	r2, [pc, #40]	@ (8013400 <handle_io_status_get+0x144>)
 80133d6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80133da:	4630      	mov	r0, r6
 80133dc:	f010 fdfe 	bl	8023fdc <mg_http_reply>
 80133e0:	e7a2      	b.n	8013328 <handle_io_status_get+0x6c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80133e2:	4b0e      	ldr	r3, [pc, #56]	@ (801341c <handle_io_status_get+0x160>)
 80133e4:	4a06      	ldr	r2, [pc, #24]	@ (8013400 <handle_io_status_get+0x144>)
 80133e6:	f240 1195 	movw	r1, #405	@ 0x195
 80133ea:	4630      	mov	r0, r6
 80133ec:	f010 fdf6 	bl	8023fdc <mg_http_reply>
}
 80133f0:	e79a      	b.n	8013328 <handle_io_status_get+0x6c>
 80133f2:	bf00      	nop
 80133f4:	080365b4 	.word	0x080365b4
 80133f8:	20002854 	.word	0x20002854
 80133fc:	08036c74 	.word	0x08036c74
 8013400:	080365f0 	.word	0x080365f0
 8013404:	0803674c 	.word	0x0803674c
 8013408:	08036ca8 	.word	0x08036ca8
 801340c:	08036cb4 	.word	0x08036cb4
 8013410:	08036cf4 	.word	0x08036cf4
 8013414:	08036cbc 	.word	0x08036cbc
 8013418:	08036d30 	.word	0x08036d30
 801341c:	08036d6c 	.word	0x08036d6c

08013420 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8013420:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8013422:	fb01 f400 	mul.w	r4, r1, r0
 8013426:	4620      	mov	r0, r4
 8013428:	f007 fa9e 	bl	801a968 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801342c:	4605      	mov	r5, r0
 801342e:	b118      	cbz	r0, 8013438 <mg_calloc+0x18>
 8013430:	4622      	mov	r2, r4
 8013432:	2100      	movs	r1, #0
 8013434:	f019 facc 	bl	802c9d0 <memset>
}
 8013438:	4628      	mov	r0, r5
 801343a:	bd38      	pop	{r3, r4, r5, pc}

0801343c <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 801343c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801343e:	b08b      	sub	sp, #44	@ 0x2c
 8013440:	4606      	mov	r6, r0
 8013442:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013444:	ad06      	add	r5, sp, #24
 8013446:	4984      	ldr	r1, [pc, #528]	@ (8013658 <handle_mqtt_conf+0x21c>)
 8013448:	4628      	mov	r0, r5
 801344a:	f010 ff51 	bl	80242f0 <mg_str_s>
 801344e:	2300      	movs	r3, #0
 8013450:	9300      	str	r3, [sp, #0]
 8013452:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013456:	e894 0003 	ldmia.w	r4, {r0, r1}
 801345a:	f011 f96b 	bl	8024734 <mg_match>
 801345e:	2800      	cmp	r0, #0
 8013460:	d03b      	beq.n	80134da <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8013462:	21c6      	movs	r1, #198	@ 0xc6
 8013464:	2001      	movs	r0, #1
 8013466:	f7ff ffdb 	bl	8013420 <mg_calloc>
		if (mqtt_config == NULL) {
 801346a:	4605      	mov	r5, r0
 801346c:	b340      	cbz	r0, 80134c0 <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 801346e:	4b7b      	ldr	r3, [pc, #492]	@ (801365c <handle_mqtt_conf+0x220>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	2200      	movs	r2, #0
 8013474:	4611      	mov	r1, r2
 8013476:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8013478:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 801347c:	4638      	mov	r0, r7
 801347e:	f7fc ff0f 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 8013482:	b2c4      	uxtb	r4, r0
 8013484:	4622      	mov	r2, r4
 8013486:	212a      	movs	r1, #42	@ 0x2a
 8013488:	4638      	mov	r0, r7
 801348a:	f019 faa1 	bl	802c9d0 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 801348e:	442c      	add	r4, r5
 8013490:	2300      	movs	r3, #0
 8013492:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013496:	786b      	ldrb	r3, [r5, #1]
 8013498:	b1eb      	cbz	r3, 80134d6 <handle_mqtt_conf+0x9a>
 801349a:	4b71      	ldr	r3, [pc, #452]	@ (8013660 <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 801349c:	1caa      	adds	r2, r5, #2
 801349e:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80134a2:	9703      	str	r7, [sp, #12]
 80134a4:	9102      	str	r1, [sp, #8]
 80134a6:	9201      	str	r2, [sp, #4]
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	4b6e      	ldr	r3, [pc, #440]	@ (8013664 <handle_mqtt_conf+0x228>)
 80134ac:	4a6e      	ldr	r2, [pc, #440]	@ (8013668 <handle_mqtt_conf+0x22c>)
 80134ae:	21c8      	movs	r1, #200	@ 0xc8
 80134b0:	4630      	mov	r0, r6
 80134b2:	f010 fd93 	bl	8023fdc <mg_http_reply>
		free(mqtt_config);
 80134b6:	4628      	mov	r0, r5
 80134b8:	f007 fad8 	bl	801aa6c <vPortFree>
}
 80134bc:	b00b      	add	sp, #44	@ 0x2c
 80134be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 80134c0:	4b6a      	ldr	r3, [pc, #424]	@ (801366c <handle_mqtt_conf+0x230>)
 80134c2:	4a69      	ldr	r2, [pc, #420]	@ (8013668 <handle_mqtt_conf+0x22c>)
 80134c4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80134c8:	4630      	mov	r0, r6
 80134ca:	f010 fd87 	bl	8023fdc <mg_http_reply>
			free(mqtt_config);
 80134ce:	4628      	mov	r0, r5
 80134d0:	f007 facc 	bl	801aa6c <vPortFree>
			return;
 80134d4:	e7f2      	b.n	80134bc <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80134d6:	4b66      	ldr	r3, [pc, #408]	@ (8013670 <handle_mqtt_conf+0x234>)
 80134d8:	e7e0      	b.n	801349c <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80134da:	ad08      	add	r5, sp, #32
 80134dc:	4965      	ldr	r1, [pc, #404]	@ (8013674 <handle_mqtt_conf+0x238>)
 80134de:	4628      	mov	r0, r5
 80134e0:	f010 ff06 	bl	80242f0 <mg_str_s>
 80134e4:	2300      	movs	r3, #0
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	e895 000c 	ldmia.w	r5, {r2, r3}
 80134ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80134f0:	f011 f920 	bl	8024734 <mg_match>
 80134f4:	2800      	cmp	r0, #0
 80134f6:	f000 80a7 	beq.w	8013648 <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 80134fa:	21c6      	movs	r1, #198	@ 0xc6
 80134fc:	2001      	movs	r0, #1
 80134fe:	f7ff ff8f 	bl	8013420 <mg_calloc>
		if (mqtt_config == NULL) {
 8013502:	4605      	mov	r5, r0
 8013504:	b310      	cbz	r0, 801354c <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8013506:	ab05      	add	r3, sp, #20
 8013508:	4a5b      	ldr	r2, [pc, #364]	@ (8013678 <handle_mqtt_conf+0x23c>)
 801350a:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801350e:	c903      	ldmia	r1, {r0, r1}
 8013510:	f00f fbc0 	bl	8022c94 <mg_json_get>
 8013514:	2800      	cmp	r0, #0
 8013516:	db24      	blt.n	8013562 <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8013518:	1c6b      	adds	r3, r5, #1
 801351a:	4a58      	ldr	r2, [pc, #352]	@ (801367c <handle_mqtt_conf+0x240>)
 801351c:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 8013520:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013524:	f00f fe46 	bl	80231b4 <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8013528:	4a55      	ldr	r2, [pc, #340]	@ (8013680 <handle_mqtt_conf+0x244>)
 801352a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801352e:	f011 ffcf 	bl	80254d0 <mg_json_get_str>
 8013532:	4607      	mov	r7, r0
 8013534:	b328      	cbz	r0, 8013582 <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8013536:	f016 fcb7 	bl	8029ea8 <is_valid_mqtt_url>
 801353a:	4603      	mov	r3, r0
 801353c:	b1e0      	cbz	r0, 8013578 <handle_mqtt_conf+0x13c>
					switch (err) {
 801353e:	3304      	adds	r3, #4
 8013540:	2b03      	cmp	r3, #3
 8013542:	d879      	bhi.n	8013638 <handle_mqtt_conf+0x1fc>
 8013544:	e8df f003 	tbb	[pc, r3]
 8013548:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 801354c:	4b47      	ldr	r3, [pc, #284]	@ (801366c <handle_mqtt_conf+0x230>)
 801354e:	4a46      	ldr	r2, [pc, #280]	@ (8013668 <handle_mqtt_conf+0x22c>)
 8013550:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013554:	4630      	mov	r0, r6
 8013556:	f010 fd41 	bl	8023fdc <mg_http_reply>
			free(mqtt_config);
 801355a:	4628      	mov	r0, r5
 801355c:	f007 fa86 	bl	801aa6c <vPortFree>
			return;
 8013560:	e7ac      	b.n	80134bc <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8013562:	4b48      	ldr	r3, [pc, #288]	@ (8013684 <handle_mqtt_conf+0x248>)
 8013564:	4a40      	ldr	r2, [pc, #256]	@ (8013668 <handle_mqtt_conf+0x22c>)
 8013566:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801356a:	4630      	mov	r0, r6
 801356c:	f010 fd36 	bl	8023fdc <mg_http_reply>
		free(mqtt_config);
 8013570:	4628      	mov	r0, r5
 8013572:	f007 fa7b 	bl	801aa6c <vPortFree>
 8013576:	e7a1      	b.n	80134bc <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8013578:	227f      	movs	r2, #127	@ 0x7f
 801357a:	4639      	mov	r1, r7
 801357c:	1ca8      	adds	r0, r5, #2
 801357e:	f019 fa6e 	bl	802ca5e <strncpy>
			free(broker);
 8013582:	4638      	mov	r0, r7
 8013584:	f007 fa72 	bl	801aa6c <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8013588:	4a3f      	ldr	r2, [pc, #252]	@ (8013688 <handle_mqtt_conf+0x24c>)
 801358a:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 801358e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013592:	f011 ff9d 	bl	80254d0 <mg_json_get_str>
 8013596:	4607      	mov	r7, r0
 8013598:	b128      	cbz	r0, 80135a6 <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 801359a:	2220      	movs	r2, #32
 801359c:	4601      	mov	r1, r0
 801359e:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80135a2:	f019 fa5c 	bl	802ca5e <strncpy>
			free(username);
 80135a6:	4638      	mov	r0, r7
 80135a8:	f007 fa60 	bl	801aa6c <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 80135ac:	4a37      	ldr	r2, [pc, #220]	@ (801368c <handle_mqtt_conf+0x250>)
 80135ae:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80135b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80135b6:	f011 ff8b 	bl	80254d0 <mg_json_get_str>
 80135ba:	4604      	mov	r4, r0
 80135bc:	b128      	cbz	r0, 80135ca <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 80135be:	2220      	movs	r2, #32
 80135c0:	4601      	mov	r1, r0
 80135c2:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 80135c6:	f019 fa4a 	bl	802ca5e <strncpy>
			free(password);
 80135ca:	4620      	mov	r0, r4
 80135cc:	f007 fa4e 	bl	801aa6c <vPortFree>
			mqtt_config->save = 1;
 80135d0:	2201      	movs	r2, #1
 80135d2:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 80135d4:	4b21      	ldr	r3, [pc, #132]	@ (801365c <handle_mqtt_conf+0x220>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	2100      	movs	r1, #0
 80135da:	4628      	mov	r0, r5
 80135dc:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80135de:	4b2c      	ldr	r3, [pc, #176]	@ (8013690 <handle_mqtt_conf+0x254>)
 80135e0:	4a21      	ldr	r2, [pc, #132]	@ (8013668 <handle_mqtt_conf+0x22c>)
 80135e2:	21c8      	movs	r1, #200	@ 0xc8
 80135e4:	4630      	mov	r0, r6
 80135e6:	f010 fcf9 	bl	8023fdc <mg_http_reply>
 80135ea:	e7c1      	b.n	8013570 <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80135ec:	4b29      	ldr	r3, [pc, #164]	@ (8013694 <handle_mqtt_conf+0x258>)
 80135ee:	4a1e      	ldr	r2, [pc, #120]	@ (8013668 <handle_mqtt_conf+0x22c>)
 80135f0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80135f4:	4630      	mov	r0, r6
 80135f6:	f010 fcf1 	bl	8023fdc <mg_http_reply>
					free(broker);
 80135fa:	4638      	mov	r0, r7
 80135fc:	f007 fa36 	bl	801aa6c <vPortFree>
					free(mqtt_config);
 8013600:	4628      	mov	r0, r5
 8013602:	f007 fa33 	bl	801aa6c <vPortFree>
					return;
 8013606:	e759      	b.n	80134bc <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013608:	4b23      	ldr	r3, [pc, #140]	@ (8013698 <handle_mqtt_conf+0x25c>)
 801360a:	4a17      	ldr	r2, [pc, #92]	@ (8013668 <handle_mqtt_conf+0x22c>)
 801360c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013610:	4630      	mov	r0, r6
 8013612:	f010 fce3 	bl	8023fdc <mg_http_reply>
							break;
 8013616:	e7f0      	b.n	80135fa <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013618:	4b20      	ldr	r3, [pc, #128]	@ (801369c <handle_mqtt_conf+0x260>)
 801361a:	4a13      	ldr	r2, [pc, #76]	@ (8013668 <handle_mqtt_conf+0x22c>)
 801361c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013620:	4630      	mov	r0, r6
 8013622:	f010 fcdb 	bl	8023fdc <mg_http_reply>
							break;
 8013626:	e7e8      	b.n	80135fa <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013628:	4b1d      	ldr	r3, [pc, #116]	@ (80136a0 <handle_mqtt_conf+0x264>)
 801362a:	4a0f      	ldr	r2, [pc, #60]	@ (8013668 <handle_mqtt_conf+0x22c>)
 801362c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013630:	4630      	mov	r0, r6
 8013632:	f010 fcd3 	bl	8023fdc <mg_http_reply>
							break;
 8013636:	e7e0      	b.n	80135fa <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013638:	4b1a      	ldr	r3, [pc, #104]	@ (80136a4 <handle_mqtt_conf+0x268>)
 801363a:	4a0b      	ldr	r2, [pc, #44]	@ (8013668 <handle_mqtt_conf+0x22c>)
 801363c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013640:	4630      	mov	r0, r6
 8013642:	f010 fccb 	bl	8023fdc <mg_http_reply>
							break;
 8013646:	e7d8      	b.n	80135fa <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013648:	4b17      	ldr	r3, [pc, #92]	@ (80136a8 <handle_mqtt_conf+0x26c>)
 801364a:	4a07      	ldr	r2, [pc, #28]	@ (8013668 <handle_mqtt_conf+0x22c>)
 801364c:	f240 1195 	movw	r1, #405	@ 0x195
 8013650:	4630      	mov	r0, r6
 8013652:	f010 fcc3 	bl	8023fdc <mg_http_reply>
 8013656:	e731      	b.n	80134bc <handle_mqtt_conf+0x80>
 8013658:	080365b4 	.word	0x080365b4
 801365c:	20002854 	.word	0x20002854
 8013660:	08036dc0 	.word	0x08036dc0
 8013664:	08036e0c 	.word	0x08036e0c
 8013668:	080365f0 	.word	0x080365f0
 801366c:	08036dd0 	.word	0x08036dd0
 8013670:	08036dc8 	.word	0x08036dc8
 8013674:	0803674c 	.word	0x0803674c
 8013678:	08036e54 	.word	0x08036e54
 801367c:	08036e88 	.word	0x08036e88
 8013680:	08036e94 	.word	0x08036e94
 8013684:	08036e58 	.word	0x08036e58
 8013688:	08036fdc 	.word	0x08036fdc
 801368c:	08036fe8 	.word	0x08036fe8
 8013690:	08036ff4 	.word	0x08036ff4
 8013694:	08036ea0 	.word	0x08036ea0
 8013698:	08036ee4 	.word	0x08036ee4
 801369c:	08036f30 	.word	0x08036f30
 80136a0:	08036f70 	.word	0x08036f70
 80136a4:	08036fa8 	.word	0x08036fa8
 80136a8:	08036d6c 	.word	0x08036d6c

080136ac <handle_mb_tcp_access_list>:
static void handle_mb_tcp_access_list(struct mg_connection *c, struct mg_http_message *hm){
 80136ac:	b570      	push	{r4, r5, r6, lr}
 80136ae:	b08a      	sub	sp, #40	@ 0x28
 80136b0:	4606      	mov	r6, r0
 80136b2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80136b4:	ad04      	add	r5, sp, #16
 80136b6:	495e      	ldr	r1, [pc, #376]	@ (8013830 <handle_mb_tcp_access_list+0x184>)
 80136b8:	4628      	mov	r0, r5
 80136ba:	f010 fe19 	bl	80242f0 <mg_str_s>
 80136be:	2300      	movs	r3, #0
 80136c0:	9300      	str	r3, [sp, #0]
 80136c2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80136c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80136ca:	f011 f833 	bl	8024734 <mg_match>
 80136ce:	2800      	cmp	r0, #0
 80136d0:	d03d      	beq.n	801374e <handle_mb_tcp_access_list+0xa2>
		size_t acl_size = 0;
 80136d2:	2200      	movs	r2, #0
 80136d4:	9203      	str	r2, [sp, #12]
		mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 80136d6:	a903      	add	r1, sp, #12
 80136d8:	4856      	ldr	r0, [pc, #344]	@ (8013834 <handle_mb_tcp_access_list+0x188>)
 80136da:	f007 faad 	bl	801ac38 <mg_fs_lfs_status>
		if (acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 80136de:	9803      	ldr	r0, [sp, #12]
 80136e0:	1e42      	subs	r2, r0, #1
 80136e2:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d829      	bhi.n	801373e <handle_mb_tcp_access_list+0x92>
			acl = calloc(acl_size + 1, sizeof(char));
 80136ea:	2101      	movs	r1, #1
 80136ec:	4408      	add	r0, r1
 80136ee:	f7ff fe97 	bl	8013420 <mg_calloc>
			if (acl == NULL){
 80136f2:	4604      	mov	r4, r0
 80136f4:	b1b8      	cbz	r0, 8013726 <handle_mb_tcp_access_list+0x7a>
			void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 80136f6:	2101      	movs	r1, #1
 80136f8:	484e      	ldr	r0, [pc, #312]	@ (8013834 <handle_mb_tcp_access_list+0x188>)
 80136fa:	f007 fadb 	bl	801acb4 <mg_fs_lfs_open>
 80136fe:	4605      	mov	r5, r0
			mg_fs_lfs_read(fd, acl, acl_size);
 8013700:	9a03      	ldr	r2, [sp, #12]
 8013702:	4621      	mov	r1, r4
 8013704:	f007 fb06 	bl	801ad14 <mg_fs_lfs_read>
			mg_fs_lfs_close(fd);
 8013708:	4628      	mov	r0, r5
 801370a:	f007 faf7 	bl	801acfc <mg_fs_lfs_close>
	        mg_http_reply(c, 200, headers,
 801370e:	9400      	str	r4, [sp, #0]
 8013710:	4b49      	ldr	r3, [pc, #292]	@ (8013838 <handle_mb_tcp_access_list+0x18c>)
 8013712:	4a4a      	ldr	r2, [pc, #296]	@ (801383c <handle_mb_tcp_access_list+0x190>)
 8013714:	21c8      	movs	r1, #200	@ 0xc8
 8013716:	4630      	mov	r0, r6
 8013718:	f010 fc60 	bl	8023fdc <mg_http_reply>
	        free(acl);
 801371c:	4620      	mov	r0, r4
 801371e:	f007 f9a5 	bl	801aa6c <vPortFree>
}
 8013722:	b00a      	add	sp, #40	@ 0x28
 8013724:	bd70      	pop	{r4, r5, r6, pc}
		    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013726:	4946      	ldr	r1, [pc, #280]	@ (8013840 <handle_mb_tcp_access_list+0x194>)
 8013728:	2003      	movs	r0, #3
 801372a:	f7fe fbe3 	bl	8011ef4 <logging>
		        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 801372e:	4b45      	ldr	r3, [pc, #276]	@ (8013844 <handle_mb_tcp_access_list+0x198>)
 8013730:	4a42      	ldr	r2, [pc, #264]	@ (801383c <handle_mb_tcp_access_list+0x190>)
 8013732:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013736:	4630      	mov	r0, r6
 8013738:	f010 fc50 	bl	8023fdc <mg_http_reply>
		        return;
 801373c:	e7f1      	b.n	8013722 <handle_mb_tcp_access_list+0x76>
	        mg_http_reply(c, 500, headers,
 801373e:	4b42      	ldr	r3, [pc, #264]	@ (8013848 <handle_mb_tcp_access_list+0x19c>)
 8013740:	4a3e      	ldr	r2, [pc, #248]	@ (801383c <handle_mb_tcp_access_list+0x190>)
 8013742:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013746:	4630      	mov	r0, r6
 8013748:	f010 fc48 	bl	8023fdc <mg_http_reply>
	        return;
 801374c:	e7e9      	b.n	8013722 <handle_mb_tcp_access_list+0x76>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 801374e:	ad06      	add	r5, sp, #24
 8013750:	493e      	ldr	r1, [pc, #248]	@ (801384c <handle_mb_tcp_access_list+0x1a0>)
 8013752:	4628      	mov	r0, r5
 8013754:	f010 fdcc 	bl	80242f0 <mg_str_s>
 8013758:	2300      	movs	r3, #0
 801375a:	9300      	str	r3, [sp, #0]
 801375c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013760:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013764:	f010 ffe6 	bl	8024734 <mg_match>
 8013768:	2800      	cmp	r0, #0
 801376a:	d058      	beq.n	801381e <handle_mb_tcp_access_list+0x172>
		if (mg_json_get(hm->body, "$", &length) < 0) {
 801376c:	ab03      	add	r3, sp, #12
 801376e:	4a38      	ldr	r2, [pc, #224]	@ (8013850 <handle_mb_tcp_access_list+0x1a4>)
 8013770:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013774:	c903      	ldmia	r1, {r0, r1}
 8013776:	f00f fa8d 	bl	8022c94 <mg_json_get>
 801377a:	2800      	cmp	r0, #0
 801377c:	db34      	blt.n	80137e8 <handle_mb_tcp_access_list+0x13c>
		acl = mg_json_get_str(hm->body, "$.access_list");
 801377e:	4a35      	ldr	r2, [pc, #212]	@ (8013854 <handle_mb_tcp_access_list+0x1a8>)
 8013780:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013784:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013788:	f011 fea2 	bl	80254d0 <mg_json_get_str>
		if (acl){
 801378c:	4604      	mov	r4, r0
 801378e:	2800      	cmp	r0, #0
 8013790:	d03d      	beq.n	801380e <handle_mb_tcp_access_list+0x162>
			if(mg_check_ip_acl(mg_str(acl),  &c->rem) < 0){
 8013792:	ad08      	add	r5, sp, #32
 8013794:	4601      	mov	r1, r0
 8013796:	4628      	mov	r0, r5
 8013798:	f010 fdaa 	bl	80242f0 <mg_str_s>
 801379c:	f106 021c 	add.w	r2, r6, #28
 80137a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80137a4:	f012 fcb2 	bl	802610c <mg_check_ip_acl>
 80137a8:	2800      	cmp	r0, #0
 80137aa:	db25      	blt.n	80137f8 <handle_mb_tcp_access_list+0x14c>
				mg_fs_lfs_remove(ACL_FILE);
 80137ac:	4d21      	ldr	r5, [pc, #132]	@ (8013834 <handle_mb_tcp_access_list+0x188>)
 80137ae:	4628      	mov	r0, r5
 80137b0:	f007 faee 	bl	801ad90 <mg_fs_lfs_remove>
				void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 80137b4:	2102      	movs	r1, #2
 80137b6:	4628      	mov	r0, r5
 80137b8:	f007 fa7c 	bl	801acb4 <mg_fs_lfs_open>
 80137bc:	4605      	mov	r5, r0
				mg_fs_lfs_write(fd1, acl, (strlen(acl) * sizeof(char)) + 1);
 80137be:	4620      	mov	r0, r4
 80137c0:	f7fc fd6e 	bl	80102a0 <strlen>
 80137c4:	1c42      	adds	r2, r0, #1
 80137c6:	4621      	mov	r1, r4
 80137c8:	4628      	mov	r0, r5
 80137ca:	f007 faaf 	bl	801ad2c <mg_fs_lfs_write>
				mg_fs_lfs_close(fd1);
 80137ce:	4628      	mov	r0, r5
 80137d0:	f007 fa94 	bl	801acfc <mg_fs_lfs_close>
				mg_http_reply(c, 200, headers,
 80137d4:	4b20      	ldr	r3, [pc, #128]	@ (8013858 <handle_mb_tcp_access_list+0x1ac>)
 80137d6:	4a19      	ldr	r2, [pc, #100]	@ (801383c <handle_mb_tcp_access_list+0x190>)
 80137d8:	21c8      	movs	r1, #200	@ 0xc8
 80137da:	4630      	mov	r0, r6
 80137dc:	f010 fbfe 	bl	8023fdc <mg_http_reply>
				free(acl);
 80137e0:	4620      	mov	r0, r4
 80137e2:	f007 f943 	bl	801aa6c <vPortFree>
				return;
 80137e6:	e79c      	b.n	8013722 <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 80137e8:	4b1c      	ldr	r3, [pc, #112]	@ (801385c <handle_mb_tcp_access_list+0x1b0>)
 80137ea:	4a14      	ldr	r2, [pc, #80]	@ (801383c <handle_mb_tcp_access_list+0x190>)
 80137ec:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80137f0:	4630      	mov	r0, r6
 80137f2:	f010 fbf3 	bl	8023fdc <mg_http_reply>
			return;
 80137f6:	e794      	b.n	8013722 <handle_mb_tcp_access_list+0x76>
				mg_http_reply(c, 400, headers,
 80137f8:	4b19      	ldr	r3, [pc, #100]	@ (8013860 <handle_mb_tcp_access_list+0x1b4>)
 80137fa:	4a10      	ldr	r2, [pc, #64]	@ (801383c <handle_mb_tcp_access_list+0x190>)
 80137fc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013800:	4630      	mov	r0, r6
 8013802:	f010 fbeb 	bl	8023fdc <mg_http_reply>
				free(acl);
 8013806:	4620      	mov	r0, r4
 8013808:	f007 f930 	bl	801aa6c <vPortFree>
				return;
 801380c:	e789      	b.n	8013722 <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 801380e:	4b15      	ldr	r3, [pc, #84]	@ (8013864 <handle_mb_tcp_access_list+0x1b8>)
 8013810:	4a0a      	ldr	r2, [pc, #40]	@ (801383c <handle_mb_tcp_access_list+0x190>)
 8013812:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013816:	4630      	mov	r0, r6
 8013818:	f010 fbe0 	bl	8023fdc <mg_http_reply>
			return;
 801381c:	e781      	b.n	8013722 <handle_mb_tcp_access_list+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801381e:	4b12      	ldr	r3, [pc, #72]	@ (8013868 <handle_mb_tcp_access_list+0x1bc>)
 8013820:	4a06      	ldr	r2, [pc, #24]	@ (801383c <handle_mb_tcp_access_list+0x190>)
 8013822:	f240 1195 	movw	r1, #405	@ 0x195
 8013826:	4630      	mov	r0, r6
 8013828:	f010 fbd8 	bl	8023fdc <mg_http_reply>
		return;
 801382c:	e779      	b.n	8013722 <handle_mb_tcp_access_list+0x76>
 801382e:	bf00      	nop
 8013830:	080365b4 	.word	0x080365b4
 8013834:	080364f4 	.word	0x080364f4
 8013838:	0803708c 	.word	0x0803708c
 801383c:	080365f0 	.word	0x080365f0
 8013840:	08037030 	.word	0x08037030
 8013844:	08037064 	.word	0x08037064
 8013848:	080370b8 	.word	0x080370b8
 801384c:	0803674c 	.word	0x0803674c
 8013850:	08036e54 	.word	0x08036e54
 8013854:	080370ec 	.word	0x080370ec
 8013858:	08037134 	.word	0x08037134
 801385c:	08036e58 	.word	0x08036e58
 8013860:	080370fc 	.word	0x080370fc
 8013864:	08037188 	.word	0x08037188
 8013868:	080371d0 	.word	0x080371d0

0801386c <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 801386c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013870:	b0c7      	sub	sp, #284	@ 0x11c
 8013872:	4681      	mov	r9, r0
 8013874:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8013876:	2272      	movs	r2, #114	@ 0x72
 8013878:	498e      	ldr	r1, [pc, #568]	@ (8013ab4 <handle_dev_status+0x248>)
 801387a:	a827      	add	r0, sp, #156	@ 0x9c
 801387c:	f01a fae4 	bl	802de48 <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8013880:	2101      	movs	r1, #1
 8013882:	201e      	movs	r0, #30
 8013884:	f7ff fdcc 	bl	8013420 <mg_calloc>
 8013888:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 801388a:	2101      	movs	r1, #1
 801388c:	202e      	movs	r0, #46	@ 0x2e
 801388e:	f7ff fdc7 	bl	8013420 <mg_calloc>
 8013892:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013894:	2101      	movs	r1, #1
 8013896:	202e      	movs	r0, #46	@ 0x2e
 8013898:	f7ff fdc2 	bl	8013420 <mg_calloc>
 801389c:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 801389e:	2101      	movs	r1, #1
 80138a0:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80138a4:	f7ff fdbc 	bl	8013420 <mg_calloc>
 80138a8:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 80138aa:	2101      	movs	r1, #1
 80138ac:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80138b0:	f7ff fdb6 	bl	8013420 <mg_calloc>
 80138b4:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 80138b6:	2e00      	cmp	r6, #0
 80138b8:	f000 80e3 	beq.w	8013a82 <handle_dev_status+0x216>
 80138bc:	2f00      	cmp	r7, #0
 80138be:	f000 80e0 	beq.w	8013a82 <handle_dev_status+0x216>
 80138c2:	f1b8 0f00 	cmp.w	r8, #0
 80138c6:	f000 80dc 	beq.w	8013a82 <handle_dev_status+0x216>
 80138ca:	2c00      	cmp	r4, #0
 80138cc:	f000 80d9 	beq.w	8013a82 <handle_dev_status+0x216>
 80138d0:	2800      	cmp	r0, #0
 80138d2:	f000 80d6 	beq.w	8013a82 <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 80138d6:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 80138da:	4977      	ldr	r1, [pc, #476]	@ (8013ab8 <handle_dev_status+0x24c>)
 80138dc:	4658      	mov	r0, fp
 80138de:	f010 fd07 	bl	80242f0 <mg_str_s>
 80138e2:	2300      	movs	r3, #0
 80138e4:	9300      	str	r3, [sp, #0]
 80138e6:	e89b 000c 	ldmia.w	fp, {r2, r3}
 80138ea:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80138ee:	f010 ff21 	bl	8024734 <mg_match>
 80138f2:	2800      	cmp	r0, #0
 80138f4:	f000 80bd 	beq.w	8013a72 <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 80138f8:	f001 fbb8 	bl	801506c <get_mqtt_connection>
			if(!mqtt_connection){
 80138fc:	4682      	mov	sl, r0
 80138fe:	b358      	cbz	r0, 8013958 <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 8013900:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8013904:	f013 0f20 	tst.w	r3, #32
 8013908:	d12c      	bne.n	8013964 <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 801390a:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 801390e:	f013 0f20 	tst.w	r3, #32
 8013912:	d02d      	beq.n	8013970 <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8013914:	221e      	movs	r2, #30
 8013916:	4969      	ldr	r1, [pc, #420]	@ (8013abc <handle_dev_status+0x250>)
 8013918:	4630      	mov	r0, r6
 801391a:	f019 f8a0 	bl	802ca5e <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 801391e:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 8013ae4 <handle_dev_status+0x278>
 8013922:	f10a 0308 	add.w	r3, sl, #8
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	465b      	mov	r3, fp
 801392a:	4a65      	ldr	r2, [pc, #404]	@ (8013ac0 <handle_dev_status+0x254>)
 801392c:	212e      	movs	r1, #46	@ 0x2e
 801392e:	4640      	mov	r0, r8
 8013930:	f00f fe56 	bl	80235e0 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8013934:	f10a 031c 	add.w	r3, sl, #28
 8013938:	9300      	str	r3, [sp, #0]
 801393a:	465b      	mov	r3, fp
 801393c:	4a60      	ldr	r2, [pc, #384]	@ (8013ac0 <handle_dev_status+0x254>)
 801393e:	212e      	movs	r1, #46	@ 0x2e
 8013940:	4638      	mov	r0, r7
 8013942:	f00f fe4d 	bl	80235e0 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 8013946:	4620      	mov	r0, r4
 8013948:	f7fc fcaa 	bl	80102a0 <strlen>
 801394c:	4b5d      	ldr	r3, [pc, #372]	@ (8013ac4 <handle_dev_status+0x258>)
 801394e:	881b      	ldrh	r3, [r3, #0]
 8013950:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013952:	f04f 0a01 	mov.w	sl, #1
 8013956:	e028      	b.n	80139aa <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 8013958:	221e      	movs	r2, #30
 801395a:	495b      	ldr	r1, [pc, #364]	@ (8013ac8 <handle_dev_status+0x25c>)
 801395c:	4630      	mov	r0, r6
 801395e:	f019 f87e 	bl	802ca5e <strncpy>
 8013962:	e7f0      	b.n	8013946 <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8013964:	221e      	movs	r2, #30
 8013966:	4959      	ldr	r1, [pc, #356]	@ (8013acc <handle_dev_status+0x260>)
 8013968:	4630      	mov	r0, r6
 801396a:	f019 f878 	bl	802ca5e <strncpy>
 801396e:	e7d6      	b.n	801391e <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 8013970:	221e      	movs	r2, #30
 8013972:	4957      	ldr	r1, [pc, #348]	@ (8013ad0 <handle_dev_status+0x264>)
 8013974:	4630      	mov	r0, r6
 8013976:	f019 f872 	bl	802ca5e <strncpy>
 801397a:	e7d0      	b.n	801391e <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 801397c:	fa5f f38a 	uxtb.w	r3, sl
 8013980:	2201      	movs	r2, #1
 8013982:	2180      	movs	r1, #128	@ 0x80
 8013984:	a807      	add	r0, sp, #28
 8013986:	f001 ff61 	bl	801584c <generate_status_topik>
				strcat(pub_topics_str, topic);
 801398a:	a907      	add	r1, sp, #28
 801398c:	4620      	mov	r0, r4
 801398e:	f019 f827 	bl	802c9e0 <strcat>
				strcat(pub_topics_str, "\", \"");
 8013992:	4620      	mov	r0, r4
 8013994:	f7fc fc84 	bl	80102a0 <strlen>
 8013998:	4603      	mov	r3, r0
 801399a:	1821      	adds	r1, r4, r0
 801399c:	4a4d      	ldr	r2, [pc, #308]	@ (8013ad4 <handle_dev_status+0x268>)
 801399e:	6810      	ldr	r0, [r2, #0]
 80139a0:	50e0      	str	r0, [r4, r3]
 80139a2:	7913      	ldrb	r3, [r2, #4]
 80139a4:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 80139a6:	f10a 0a01 	add.w	sl, sl, #1
 80139aa:	f1ba 0f03 	cmp.w	sl, #3
 80139ae:	dde5      	ble.n	801397c <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80139b0:	f04f 0a01 	mov.w	sl, #1
 80139b4:	e007      	b.n	80139c6 <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 80139b6:	4620      	mov	r0, r4
 80139b8:	f7fc fc72 	bl	80102a0 <strlen>
 80139bc:	4b41      	ldr	r3, [pc, #260]	@ (8013ac4 <handle_dev_status+0x258>)
 80139be:	881b      	ldrh	r3, [r3, #0]
 80139c0:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80139c2:	f10a 0a01 	add.w	sl, sl, #1
 80139c6:	f1ba 0f03 	cmp.w	sl, #3
 80139ca:	dc18      	bgt.n	80139fe <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 80139cc:	fa5f f38a 	uxtb.w	r3, sl
 80139d0:	2202      	movs	r2, #2
 80139d2:	2180      	movs	r1, #128	@ 0x80
 80139d4:	a807      	add	r0, sp, #28
 80139d6:	f001 ff39 	bl	801584c <generate_status_topik>
				strcat(pub_topics_str, topic);
 80139da:	a907      	add	r1, sp, #28
 80139dc:	4620      	mov	r0, r4
 80139de:	f018 ffff 	bl	802c9e0 <strcat>
				if (i < OUTPUTS_COUNT) {
 80139e2:	f1ba 0f02 	cmp.w	sl, #2
 80139e6:	dce6      	bgt.n	80139b6 <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 80139e8:	4620      	mov	r0, r4
 80139ea:	f7fc fc59 	bl	80102a0 <strlen>
 80139ee:	4603      	mov	r3, r0
 80139f0:	1821      	adds	r1, r4, r0
 80139f2:	4a38      	ldr	r2, [pc, #224]	@ (8013ad4 <handle_dev_status+0x268>)
 80139f4:	6810      	ldr	r0, [r2, #0]
 80139f6:	50e0      	str	r0, [r4, r3]
 80139f8:	7913      	ldrb	r3, [r2, #4]
 80139fa:	710b      	strb	r3, [r1, #4]
 80139fc:	e7e1      	b.n	80139c2 <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 80139fe:	4628      	mov	r0, r5
 8013a00:	f7fc fc4e 	bl	80102a0 <strlen>
 8013a04:	4b2f      	ldr	r3, [pc, #188]	@ (8013ac4 <handle_dev_status+0x258>)
 8013a06:	881b      	ldrh	r3, [r3, #0]
 8013a08:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013a0a:	f04f 0a01 	mov.w	sl, #1
 8013a0e:	e007      	b.n	8013a20 <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 8013a10:	4628      	mov	r0, r5
 8013a12:	f7fc fc45 	bl	80102a0 <strlen>
 8013a16:	4b2b      	ldr	r3, [pc, #172]	@ (8013ac4 <handle_dev_status+0x258>)
 8013a18:	881b      	ldrh	r3, [r3, #0]
 8013a1a:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013a1c:	f10a 0a01 	add.w	sl, sl, #1
 8013a20:	f1ba 0f03 	cmp.w	sl, #3
 8013a24:	dc18      	bgt.n	8013a58 <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013a26:	fa5f f38a 	uxtb.w	r3, sl
 8013a2a:	2202      	movs	r2, #2
 8013a2c:	2180      	movs	r1, #128	@ 0x80
 8013a2e:	a807      	add	r0, sp, #28
 8013a30:	f001 fef4 	bl	801581c <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8013a34:	a907      	add	r1, sp, #28
 8013a36:	4628      	mov	r0, r5
 8013a38:	f018 ffd2 	bl	802c9e0 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013a3c:	f1ba 0f02 	cmp.w	sl, #2
 8013a40:	dce6      	bgt.n	8013a10 <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 8013a42:	4628      	mov	r0, r5
 8013a44:	f7fc fc2c 	bl	80102a0 <strlen>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	1829      	adds	r1, r5, r0
 8013a4c:	4a21      	ldr	r2, [pc, #132]	@ (8013ad4 <handle_dev_status+0x268>)
 8013a4e:	6810      	ldr	r0, [r2, #0]
 8013a50:	50e8      	str	r0, [r5, r3]
 8013a52:	7913      	ldrb	r3, [r2, #4]
 8013a54:	710b      	strb	r3, [r1, #4]
 8013a56:	e7e1      	b.n	8013a1c <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013a58:	9504      	str	r5, [sp, #16]
 8013a5a:	9403      	str	r4, [sp, #12]
 8013a5c:	9702      	str	r7, [sp, #8]
 8013a5e:	f8cd 8004 	str.w	r8, [sp, #4]
 8013a62:	9600      	str	r6, [sp, #0]
 8013a64:	ab27      	add	r3, sp, #156	@ 0x9c
 8013a66:	4a1c      	ldr	r2, [pc, #112]	@ (8013ad8 <handle_dev_status+0x26c>)
 8013a68:	21c8      	movs	r1, #200	@ 0xc8
 8013a6a:	4648      	mov	r0, r9
 8013a6c:	f010 fab6 	bl	8023fdc <mg_http_reply>
 8013a70:	e00e      	b.n	8013a90 <handle_dev_status+0x224>
			mg_http_reply(c, 405, headers, //TODO delete for release,
 8013a72:	4b1a      	ldr	r3, [pc, #104]	@ (8013adc <handle_dev_status+0x270>)
 8013a74:	4a18      	ldr	r2, [pc, #96]	@ (8013ad8 <handle_dev_status+0x26c>)
 8013a76:	f240 1195 	movw	r1, #405	@ 0x195
 8013a7a:	4648      	mov	r0, r9
 8013a7c:	f010 faae 	bl	8023fdc <mg_http_reply>
 8013a80:	e006      	b.n	8013a90 <handle_dev_status+0x224>
		mg_http_reply(c, 500, headers, //TODO delete for release,
 8013a82:	4b17      	ldr	r3, [pc, #92]	@ (8013ae0 <handle_dev_status+0x274>)
 8013a84:	4a14      	ldr	r2, [pc, #80]	@ (8013ad8 <handle_dev_status+0x26c>)
 8013a86:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013a8a:	4648      	mov	r0, r9
 8013a8c:	f010 faa6 	bl	8023fdc <mg_http_reply>
	free(mqtt_status_str);
 8013a90:	4630      	mov	r0, r6
 8013a92:	f006 ffeb 	bl	801aa6c <vPortFree>
	free(mqtt_server_addr);
 8013a96:	4638      	mov	r0, r7
 8013a98:	f006 ffe8 	bl	801aa6c <vPortFree>
	free(mqtt_local_addr);
 8013a9c:	4640      	mov	r0, r8
 8013a9e:	f006 ffe5 	bl	801aa6c <vPortFree>
	free(pub_topics_str);
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	f006 ffe2 	bl	801aa6c <vPortFree>
	free(subscr_topics_str);
 8013aa8:	4628      	mov	r0, r5
 8013aaa:	f006 ffdf 	bl	801aa6c <vPortFree>
}
 8013aae:	b047      	add	sp, #284	@ 0x11c
 8013ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab4:	08037290 	.word	0x08037290
 8013ab8:	080365b4 	.word	0x080365b4
 8013abc:	08037230 	.word	0x08037230
 8013ac0:	08037244 	.word	0x08037244
 8013ac4:	08037248 	.word	0x08037248
 8013ac8:	0803b010 	.word	0x0803b010
 8013acc:	08037224 	.word	0x08037224
 8013ad0:	08037238 	.word	0x08037238
 8013ad4:	0803724c 	.word	0x0803724c
 8013ad8:	080365f0 	.word	0x080365f0
 8013adc:	08036d6c 	.word	0x08036d6c
 8013ae0:	08037254 	.word	0x08037254
 8013ae4:	0802608d 	.word	0x0802608d

08013ae8 <handle_fs_get_log>:
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8013ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013aea:	b08d      	sub	sp, #52	@ 0x34
 8013aec:	4607      	mov	r7, r0
 8013aee:	460c      	mov	r4, r1
 8013af0:	4615      	mov	r5, r2
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013af2:	ae08      	add	r6, sp, #32
 8013af4:	4923      	ldr	r1, [pc, #140]	@ (8013b84 <handle_fs_get_log+0x9c>)
 8013af6:	4630      	mov	r0, r6
 8013af8:	f010 fbfa 	bl	80242f0 <mg_str_s>
 8013afc:	2300      	movs	r3, #0
 8013afe:	9300      	str	r3, [sp, #0]
 8013b00:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013b04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013b08:	f010 fe14 	bl	8024734 <mg_match>
 8013b0c:	b318      	cbz	r0, 8013b56 <handle_fs_get_log+0x6e>
		struct mg_http_serve_opts opts = {
 8013b0e:	2300      	movs	r3, #0
 8013b10:	9302      	str	r3, [sp, #8]
 8013b12:	9303      	str	r3, [sp, #12]
 8013b14:	9304      	str	r3, [sp, #16]
 8013b16:	9305      	str	r3, [sp, #20]
 8013b18:	9306      	str	r3, [sp, #24]
 8013b1a:	9307      	str	r3, [sp, #28]
 8013b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8013b88 <handle_fs_get_log+0xa0>)
 8013b1e:	9302      	str	r3, [sp, #8]
 8013b20:	4b1a      	ldr	r3, [pc, #104]	@ (8013b8c <handle_fs_get_log+0xa4>)
 8013b22:	9307      	str	r3, [sp, #28]
		switch (number) {
 8013b24:	b145      	cbz	r5, 8013b38 <handle_fs_get_log+0x50>
 8013b26:	2d01      	cmp	r5, #1
 8013b28:	d00e      	beq.n	8013b48 <handle_fs_get_log+0x60>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013b2a:	ab02      	add	r3, sp, #8
 8013b2c:	4a18      	ldr	r2, [pc, #96]	@ (8013b90 <handle_fs_get_log+0xa8>)
 8013b2e:	4621      	mov	r1, r4
 8013b30:	4638      	mov	r0, r7
 8013b32:	f010 ffbb 	bl	8024aac <mg_http_serve_file>
				break;
 8013b36:	e005      	b.n	8013b44 <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013b38:	ab02      	add	r3, sp, #8
 8013b3a:	4a15      	ldr	r2, [pc, #84]	@ (8013b90 <handle_fs_get_log+0xa8>)
 8013b3c:	4621      	mov	r1, r4
 8013b3e:	4638      	mov	r0, r7
 8013b40:	f010 ffb4 	bl	8024aac <mg_http_serve_file>
}
 8013b44:	b00d      	add	sp, #52	@ 0x34
 8013b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8013b48:	ab02      	add	r3, sp, #8
 8013b4a:	4a12      	ldr	r2, [pc, #72]	@ (8013b94 <handle_fs_get_log+0xac>)
 8013b4c:	4621      	mov	r1, r4
 8013b4e:	4638      	mov	r0, r7
 8013b50:	f010 ffac 	bl	8024aac <mg_http_serve_file>
				break;
 8013b54:	e7f6      	b.n	8013b44 <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013b56:	ad0a      	add	r5, sp, #40	@ 0x28
 8013b58:	490f      	ldr	r1, [pc, #60]	@ (8013b98 <handle_fs_get_log+0xb0>)
 8013b5a:	4628      	mov	r0, r5
 8013b5c:	f010 fbc8 	bl	80242f0 <mg_str_s>
 8013b60:	2300      	movs	r3, #0
 8013b62:	9300      	str	r3, [sp, #0]
 8013b64:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013b68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013b6c:	f010 fde2 	bl	8024734 <mg_match>
 8013b70:	2800      	cmp	r0, #0
 8013b72:	d1e7      	bne.n	8013b44 <handle_fs_get_log+0x5c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013b74:	4b09      	ldr	r3, [pc, #36]	@ (8013b9c <handle_fs_get_log+0xb4>)
 8013b76:	4a0a      	ldr	r2, [pc, #40]	@ (8013ba0 <handle_fs_get_log+0xb8>)
 8013b78:	f240 1195 	movw	r1, #405	@ 0x195
 8013b7c:	4638      	mov	r0, r7
 8013b7e:	f010 fa2d 	bl	8023fdc <mg_http_reply>
}
 8013b82:	e7df      	b.n	8013b44 <handle_fs_get_log+0x5c>
 8013b84:	080365b4 	.word	0x080365b4
 8013b88:	08037a48 	.word	0x08037a48
 8013b8c:	200000a0 	.word	0x200000a0
 8013b90:	080360c4 	.word	0x080360c4
 8013b94:	080360d4 	.word	0x080360d4
 8013b98:	0803674c 	.word	0x0803674c
 8013b9c:	08037304 	.word	0x08037304
 8013ba0:	080365f0 	.word	0x080365f0

08013ba4 <write_users>:
static void write_users(const char *file_path, users_list_t * users, size_t count){
 8013ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	460d      	mov	r5, r1
 8013baa:	4616      	mov	r6, r2
	mg_fs_lfs.rm(file_path);
 8013bac:	4f0b      	ldr	r7, [pc, #44]	@ (8013bdc <write_users+0x38>)
 8013bae:	6a3b      	ldr	r3, [r7, #32]
 8013bb0:	4798      	blx	r3
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_WRITE);
 8013bb2:	2202      	movs	r2, #2
 8013bb4:	4621      	mov	r1, r4
 8013bb6:	4638      	mov	r0, r7
 8013bb8:	f00e ff82 	bl	8022ac0 <mg_fs_open>
 8013bbc:	4604      	mov	r4, r0
	mg_fs_lfs.wr(fd->fd, users, sizeof(users_list_t) * count);
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	22a9      	movs	r2, #169	@ 0xa9
 8013bc2:	fb06 f202 	mul.w	r2, r6, r2
 8013bc6:	4629      	mov	r1, r5
 8013bc8:	6800      	ldr	r0, [r0, #0]
 8013bca:	4798      	blx	r3
	mg_fs_close(fd);
 8013bcc:	4620      	mov	r0, r4
 8013bce:	f00e ff90 	bl	8022af2 <mg_fs_close>
	logging(L_INFO, "Saved web users to file");
 8013bd2:	4903      	ldr	r1, [pc, #12]	@ (8013be0 <write_users+0x3c>)
 8013bd4:	2001      	movs	r0, #1
 8013bd6:	f7fe f98d 	bl	8011ef4 <logging>
}
 8013bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bdc:	200000a0 	.word	0x200000a0
 8013be0:	0803735c 	.word	0x0803735c

08013be4 <handle_manage_user>:
static void handle_manage_user(struct mg_connection *c, struct mg_http_message *hm){
 8013be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013be8:	b0ae      	sub	sp, #184	@ 0xb8
 8013bea:	4606      	mov	r6, r0
 8013bec:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013bee:	ad26      	add	r5, sp, #152	@ 0x98
 8013bf0:	49a8      	ldr	r1, [pc, #672]	@ (8013e94 <handle_manage_user+0x2b0>)
 8013bf2:	4628      	mov	r0, r5
 8013bf4:	f010 fb7c 	bl	80242f0 <mg_str_s>
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	9300      	str	r3, [sp, #0]
 8013bfc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013c00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c04:	f010 fd96 	bl	8024734 <mg_match>
 8013c08:	2800      	cmp	r0, #0
 8013c0a:	d143      	bne.n	8013c94 <handle_manage_user+0xb0>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013c0c:	ad28      	add	r5, sp, #160	@ 0xa0
 8013c0e:	49a2      	ldr	r1, [pc, #648]	@ (8013e98 <handle_manage_user+0x2b4>)
 8013c10:	4628      	mov	r0, r5
 8013c12:	f010 fb6d 	bl	80242f0 <mg_str_s>
 8013c16:	2300      	movs	r3, #0
 8013c18:	9300      	str	r3, [sp, #0]
 8013c1a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013c1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c22:	f010 fd87 	bl	8024734 <mg_match>
 8013c26:	2800      	cmp	r0, #0
 8013c28:	f000 80fd 	beq.w	8013e26 <handle_manage_user+0x242>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013c2c:	ab03      	add	r3, sp, #12
 8013c2e:	4a9b      	ldr	r2, [pc, #620]	@ (8013e9c <handle_manage_user+0x2b8>)
 8013c30:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013c34:	c903      	ldmia	r1, {r0, r1}
 8013c36:	f00f f82d 	bl	8022c94 <mg_json_get>
 8013c3a:	2800      	cmp	r0, #0
 8013c3c:	f2c0 8089 	blt.w	8013d52 <handle_manage_user+0x16e>
	    username_add = mg_json_get_str(hm->body, "$.user");
 8013c40:	4a97      	ldr	r2, [pc, #604]	@ (8013ea0 <handle_manage_user+0x2bc>)
 8013c42:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013c46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c4a:	f011 fc41 	bl	80254d0 <mg_json_get_str>
 8013c4e:	4605      	mov	r5, r0
	    password_add = mg_json_get_str(hm->body, "$.pass");
 8013c50:	4a94      	ldr	r2, [pc, #592]	@ (8013ea4 <handle_manage_user+0x2c0>)
 8013c52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c56:	f011 fc3b 	bl	80254d0 <mg_json_get_str>
 8013c5a:	4607      	mov	r7, r0
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8013c5c:	2d00      	cmp	r5, #0
 8013c5e:	f000 80d4 	beq.w	8013e0a <handle_manage_user+0x226>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	f000 80d1 	beq.w	8013e0a <handle_manage_user+0x226>
 8013c68:	782b      	ldrb	r3, [r5, #0]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	f000 80cd 	beq.w	8013e0a <handle_manage_user+0x226>
 8013c70:	7803      	ldrb	r3, [r0, #0]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	f000 80c9 	beq.w	8013e0a <handle_manage_user+0x226>
	        for (int i = 0; i < user_list_size; i++) {
 8013c78:	2400      	movs	r4, #0
 8013c7a:	2c09      	cmp	r4, #9
 8013c7c:	dc7f      	bgt.n	8013d7e <handle_manage_user+0x19a>
	            if (strcmp(web_users[i].user, username_add) == 0) {
 8013c7e:	4629      	mov	r1, r5
 8013c80:	20a9      	movs	r0, #169	@ 0xa9
 8013c82:	4b89      	ldr	r3, [pc, #548]	@ (8013ea8 <handle_manage_user+0x2c4>)
 8013c84:	fb00 3004 	mla	r0, r0, r4, r3
 8013c88:	f7fc faaa 	bl	80101e0 <strcmp>
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	d068      	beq.n	8013d62 <handle_manage_user+0x17e>
	        for (int i = 0; i < user_list_size; i++) {
 8013c90:	3401      	adds	r4, #1
 8013c92:	e7f2      	b.n	8013c7a <handle_manage_user+0x96>
	    char *response = calloc(response_len, sizeof(char));
 8013c94:	2101      	movs	r1, #1
 8013c96:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8013c9a:	f7ff fbc1 	bl	8013420 <mg_calloc>
 8013c9e:	4607      	mov	r7, r0
	    char *user_entry = calloc(user_entry_len, sizeof(char));
 8013ca0:	2101      	movs	r1, #1
 8013ca2:	20a0      	movs	r0, #160	@ 0xa0
 8013ca4:	f7ff fbbc 	bl	8013420 <mg_calloc>
 8013ca8:	4680      	mov	r8, r0
	    if (response && user_entry) {
 8013caa:	2f00      	cmp	r7, #0
 8013cac:	d03d      	beq.n	8013d2a <handle_manage_user+0x146>
 8013cae:	2800      	cmp	r0, #0
 8013cb0:	d03b      	beq.n	8013d2a <handle_manage_user+0x146>
	        offset += snprintf(response + offset, response_len - offset, "{ \"users\": [");
 8013cb2:	4b7e      	ldr	r3, [pc, #504]	@ (8013eac <handle_manage_user+0x2c8>)
 8013cb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013cb6:	6038      	str	r0, [r7, #0]
 8013cb8:	6079      	str	r1, [r7, #4]
 8013cba:	60ba      	str	r2, [r7, #8]
 8013cbc:	781b      	ldrb	r3, [r3, #0]
 8013cbe:	733b      	strb	r3, [r7, #12]
 8013cc0:	250c      	movs	r5, #12
	        for (int i = 0; i < user_list_size; i++) {
 8013cc2:	2400      	movs	r4, #0
 8013cc4:	e008      	b.n	8013cd8 <handle_manage_user+0xf4>
	                offset += snprintf(response + offset, response_len - offset, "%s", user_entry);
 8013cc6:	4643      	mov	r3, r8
 8013cc8:	4a79      	ldr	r2, [pc, #484]	@ (8013eb0 <handle_manage_user+0x2cc>)
 8013cca:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013cce:	1978      	adds	r0, r7, r5
 8013cd0:	f018 f954 	bl	802bf7c <snprintf>
 8013cd4:	4405      	add	r5, r0
	        for (int i = 0; i < user_list_size; i++) {
 8013cd6:	3401      	adds	r4, #1
 8013cd8:	2c09      	cmp	r4, #9
 8013cda:	dc18      	bgt.n	8013d0e <handle_manage_user+0x12a>
	            if (web_users[i].user[0] != '\0') {  // Проверяем, что имя пользователя не пустое
 8013cdc:	22a9      	movs	r2, #169	@ 0xa9
 8013cde:	fb04 f202 	mul.w	r2, r4, r2
 8013ce2:	4b71      	ldr	r3, [pc, #452]	@ (8013ea8 <handle_manage_user+0x2c4>)
 8013ce4:	5c9a      	ldrb	r2, [r3, r2]
 8013ce6:	2a00      	cmp	r2, #0
 8013ce8:	d0f5      	beq.n	8013cd6 <handle_manage_user+0xf2>
	                snprintf(user_entry, user_entry_len, "{\"user\": \"%s\"}", web_users[i].user);
 8013cea:	22a9      	movs	r2, #169	@ 0xa9
 8013cec:	fb02 3304 	mla	r3, r2, r4, r3
 8013cf0:	4a70      	ldr	r2, [pc, #448]	@ (8013eb4 <handle_manage_user+0x2d0>)
 8013cf2:	21a0      	movs	r1, #160	@ 0xa0
 8013cf4:	4640      	mov	r0, r8
 8013cf6:	f018 f941 	bl	802bf7c <snprintf>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
 8013cfa:	2d0c      	cmp	r5, #12
 8013cfc:	d9e3      	bls.n	8013cc6 <handle_manage_user+0xe2>
	                    offset += snprintf(response + offset, response_len - offset, ",");
 8013cfe:	4a6e      	ldr	r2, [pc, #440]	@ (8013eb8 <handle_manage_user+0x2d4>)
 8013d00:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013d04:	1978      	adds	r0, r7, r5
 8013d06:	f018 f939 	bl	802bf7c <snprintf>
 8013d0a:	4405      	add	r5, r0
 8013d0c:	e7db      	b.n	8013cc6 <handle_manage_user+0xe2>
	        offset += snprintf(response + offset, response_len - offset, "]}");
 8013d0e:	4a6b      	ldr	r2, [pc, #428]	@ (8013ebc <handle_manage_user+0x2d8>)
 8013d10:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013d14:	1978      	adds	r0, r7, r5
 8013d16:	f018 f931 	bl	802bf7c <snprintf>
	        mg_http_reply(c, 200, headers, "%s", response);
 8013d1a:	9700      	str	r7, [sp, #0]
 8013d1c:	4b64      	ldr	r3, [pc, #400]	@ (8013eb0 <handle_manage_user+0x2cc>)
 8013d1e:	4a68      	ldr	r2, [pc, #416]	@ (8013ec0 <handle_manage_user+0x2dc>)
 8013d20:	21c8      	movs	r1, #200	@ 0xc8
 8013d22:	4630      	mov	r0, r6
 8013d24:	f010 f95a 	bl	8023fdc <mg_http_reply>
 8013d28:	e00a      	b.n	8013d40 <handle_manage_user+0x15c>
	    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013d2a:	4966      	ldr	r1, [pc, #408]	@ (8013ec4 <handle_manage_user+0x2e0>)
 8013d2c:	2003      	movs	r0, #3
 8013d2e:	f7fe f8e1 	bl	8011ef4 <logging>
	        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 8013d32:	4b65      	ldr	r3, [pc, #404]	@ (8013ec8 <handle_manage_user+0x2e4>)
 8013d34:	4a62      	ldr	r2, [pc, #392]	@ (8013ec0 <handle_manage_user+0x2dc>)
 8013d36:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013d3a:	4630      	mov	r0, r6
 8013d3c:	f010 f94e 	bl	8023fdc <mg_http_reply>
	    free(response);
 8013d40:	4638      	mov	r0, r7
 8013d42:	f006 fe93 	bl	801aa6c <vPortFree>
	    free(user_entry);
 8013d46:	4640      	mov	r0, r8
 8013d48:	f006 fe90 	bl	801aa6c <vPortFree>
}
 8013d4c:	b02e      	add	sp, #184	@ 0xb8
 8013d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	        mg_http_reply(c, 400, headers,
 8013d52:	4b5e      	ldr	r3, [pc, #376]	@ (8013ecc <handle_manage_user+0x2e8>)
 8013d54:	4a5a      	ldr	r2, [pc, #360]	@ (8013ec0 <handle_manage_user+0x2dc>)
 8013d56:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013d5a:	4630      	mov	r0, r6
 8013d5c:	f010 f93e 	bl	8023fdc <mg_http_reply>
	        return;
 8013d60:	e7f4      	b.n	8013d4c <handle_manage_user+0x168>
	                mg_http_reply(c, 400, headers,
 8013d62:	4b5b      	ldr	r3, [pc, #364]	@ (8013ed0 <handle_manage_user+0x2ec>)
 8013d64:	4a56      	ldr	r2, [pc, #344]	@ (8013ec0 <handle_manage_user+0x2dc>)
 8013d66:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013d6a:	4630      	mov	r0, r6
 8013d6c:	f010 f936 	bl	8023fdc <mg_http_reply>
	                free(username_add);
 8013d70:	4628      	mov	r0, r5
 8013d72:	f006 fe7b 	bl	801aa6c <vPortFree>
	                free(password_add);
 8013d76:	4638      	mov	r0, r7
 8013d78:	f006 fe78 	bl	801aa6c <vPortFree>
	                return;
 8013d7c:	e7e6      	b.n	8013d4c <handle_manage_user+0x168>
			char add_pass_digest[sha1_str_len] = {0};
 8013d7e:	2400      	movs	r4, #0
 8013d80:	9404      	str	r4, [sp, #16]
 8013d82:	2225      	movs	r2, #37	@ 0x25
 8013d84:	4621      	mov	r1, r4
 8013d86:	a805      	add	r0, sp, #20
 8013d88:	f018 fe22 	bl	802c9d0 <memset>
			mg_sha1_init(&sha1_ctx);
 8013d8c:	a80f      	add	r0, sp, #60	@ 0x3c
 8013d8e:	f010 f9fd 	bl	802418c <mg_sha1_init>
			mg_sha1_update(&sha1_ctx, (const unsigned char *)password_add, strlen(password_add) * sizeof(char));
 8013d92:	4638      	mov	r0, r7
 8013d94:	f7fc fa84 	bl	80102a0 <strlen>
 8013d98:	4602      	mov	r2, r0
 8013d9a:	4639      	mov	r1, r7
 8013d9c:	a80f      	add	r0, sp, #60	@ 0x3c
 8013d9e:	f010 fa0f 	bl	80241c0 <mg_sha1_update>
			mg_sha1_final((unsigned char *)add_pass_digest, &sha1_ctx);
 8013da2:	a90f      	add	r1, sp, #60	@ 0x3c
 8013da4:	a804      	add	r0, sp, #16
 8013da6:	f010 fa45 	bl	8024234 <mg_sha1_final>
	        for (int i = 0; i < user_list_size; i++) {
 8013daa:	4621      	mov	r1, r4
 8013dac:	2909      	cmp	r1, #9
 8013dae:	dc24      	bgt.n	8013dfa <handle_manage_user+0x216>
	            if (web_users[i].user[0] == '\0') { // Пустая запись
 8013db0:	23a9      	movs	r3, #169	@ 0xa9
 8013db2:	fb01 f303 	mul.w	r3, r1, r3
 8013db6:	4a3c      	ldr	r2, [pc, #240]	@ (8013ea8 <handle_manage_user+0x2c4>)
 8013db8:	5cd3      	ldrb	r3, [r2, r3]
 8013dba:	b10b      	cbz	r3, 8013dc0 <handle_manage_user+0x1dc>
	        for (int i = 0; i < user_list_size; i++) {
 8013dbc:	3101      	adds	r1, #1
 8013dbe:	e7f5      	b.n	8013dac <handle_manage_user+0x1c8>
	                strncpy(web_users[i].user, username_add, sizeof(web_users[i].user) - 1);
 8013dc0:	23a9      	movs	r3, #169	@ 0xa9
 8013dc2:	fb03 f401 	mul.w	r4, r3, r1
 8013dc6:	4690      	mov	r8, r2
 8013dc8:	227f      	movs	r2, #127	@ 0x7f
 8013dca:	4629      	mov	r1, r5
 8013dcc:	eb08 0004 	add.w	r0, r8, r4
 8013dd0:	f018 fe45 	bl	802ca5e <strncpy>
	                strncpy(web_users[i].pass_digest, add_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 8013dd4:	3480      	adds	r4, #128	@ 0x80
 8013dd6:	2228      	movs	r2, #40	@ 0x28
 8013dd8:	a904      	add	r1, sp, #16
 8013dda:	eb08 0004 	add.w	r0, r8, r4
 8013dde:	f018 fe3e 	bl	802ca5e <strncpy>
	                write_users(user_cred_file, web_users, user_list_size);
 8013de2:	220a      	movs	r2, #10
 8013de4:	4641      	mov	r1, r8
 8013de6:	483b      	ldr	r0, [pc, #236]	@ (8013ed4 <handle_manage_user+0x2f0>)
 8013de8:	f7ff fedc 	bl	8013ba4 <write_users>
	            mg_http_reply(c, 200, headers,
 8013dec:	4b3a      	ldr	r3, [pc, #232]	@ (8013ed8 <handle_manage_user+0x2f4>)
 8013dee:	4a34      	ldr	r2, [pc, #208]	@ (8013ec0 <handle_manage_user+0x2dc>)
 8013df0:	21c8      	movs	r1, #200	@ 0xc8
 8013df2:	4630      	mov	r0, r6
 8013df4:	f010 f8f2 	bl	8023fdc <mg_http_reply>
 8013df8:	e00e      	b.n	8013e18 <handle_manage_user+0x234>
	            mg_http_reply(c, 400, headers,
 8013dfa:	4b38      	ldr	r3, [pc, #224]	@ (8013edc <handle_manage_user+0x2f8>)
 8013dfc:	4a30      	ldr	r2, [pc, #192]	@ (8013ec0 <handle_manage_user+0x2dc>)
 8013dfe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013e02:	4630      	mov	r0, r6
 8013e04:	f010 f8ea 	bl	8023fdc <mg_http_reply>
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8013e08:	e006      	b.n	8013e18 <handle_manage_user+0x234>
	        mg_http_reply(c, 400, headers,
 8013e0a:	4b35      	ldr	r3, [pc, #212]	@ (8013ee0 <handle_manage_user+0x2fc>)
 8013e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8013ec0 <handle_manage_user+0x2dc>)
 8013e0e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013e12:	4630      	mov	r0, r6
 8013e14:	f010 f8e2 	bl	8023fdc <mg_http_reply>
		free(username_add);
 8013e18:	4628      	mov	r0, r5
 8013e1a:	f006 fe27 	bl	801aa6c <vPortFree>
		free(password_add);
 8013e1e:	4638      	mov	r0, r7
 8013e20:	f006 fe24 	bl	801aa6c <vPortFree>
		return;
 8013e24:	e792      	b.n	8013d4c <handle_manage_user+0x168>
	}else if (mg_match(hm->method, mg_str("PUT"), NULL)){
 8013e26:	ad2a      	add	r5, sp, #168	@ 0xa8
 8013e28:	492e      	ldr	r1, [pc, #184]	@ (8013ee4 <handle_manage_user+0x300>)
 8013e2a:	4628      	mov	r0, r5
 8013e2c:	f010 fa60 	bl	80242f0 <mg_str_s>
 8013e30:	2300      	movs	r3, #0
 8013e32:	9300      	str	r3, [sp, #0]
 8013e34:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013e38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e3c:	f010 fc7a 	bl	8024734 <mg_match>
 8013e40:	2800      	cmp	r0, #0
 8013e42:	d155      	bne.n	8013ef0 <handle_manage_user+0x30c>
	}else if (mg_match(hm->method, mg_str("DELETE"), NULL)){
 8013e44:	ad2c      	add	r5, sp, #176	@ 0xb0
 8013e46:	4928      	ldr	r1, [pc, #160]	@ (8013ee8 <handle_manage_user+0x304>)
 8013e48:	4628      	mov	r0, r5
 8013e4a:	f010 fa51 	bl	80242f0 <mg_str_s>
 8013e4e:	2300      	movs	r3, #0
 8013e50:	9300      	str	r3, [sp, #0]
 8013e52:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013e56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e5a:	f010 fc6b 	bl	8024734 <mg_match>
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	f000 80f3 	beq.w	801404a <handle_manage_user+0x466>
	    username_del = mg_json_get_str(hm->body, "$.user");
 8013e64:	4a0e      	ldr	r2, [pc, #56]	@ (8013ea0 <handle_manage_user+0x2bc>)
 8013e66:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013e6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e6e:	f011 fb2f 	bl	80254d0 <mg_json_get_str>
	    if (username_del && strlen(username_del) > 0) {
 8013e72:	4607      	mov	r7, r0
 8013e74:	b118      	cbz	r0, 8013e7e <handle_manage_user+0x29a>
 8013e76:	7803      	ldrb	r3, [r0, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	f040 80cf 	bne.w	801401c <handle_manage_user+0x438>
	        mg_http_reply(c, 400, headers,
 8013e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8013eec <handle_manage_user+0x308>)
 8013e80:	4a0f      	ldr	r2, [pc, #60]	@ (8013ec0 <handle_manage_user+0x2dc>)
 8013e82:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013e86:	4630      	mov	r0, r6
 8013e88:	f010 f8a8 	bl	8023fdc <mg_http_reply>
	    free(username_del);
 8013e8c:	4638      	mov	r0, r7
 8013e8e:	f006 fded 	bl	801aa6c <vPortFree>
 8013e92:	e75b      	b.n	8013d4c <handle_manage_user+0x168>
 8013e94:	080365b4 	.word	0x080365b4
 8013e98:	0803674c 	.word	0x0803674c
 8013e9c:	08036e54 	.word	0x08036e54
 8013ea0:	0803739c 	.word	0x0803739c
 8013ea4:	080373a4 	.word	0x080373a4
 8013ea8:	200021b8 	.word	0x200021b8
 8013eac:	08037374 	.word	0x08037374
 8013eb0:	0803b01c 	.word	0x0803b01c
 8013eb4:	08037384 	.word	0x08037384
 8013eb8:	08037394 	.word	0x08037394
 8013ebc:	08037398 	.word	0x08037398
 8013ec0:	080365f0 	.word	0x080365f0
 8013ec4:	08037030 	.word	0x08037030
 8013ec8:	08037064 	.word	0x08037064
 8013ecc:	08036e58 	.word	0x08036e58
 8013ed0:	080373ac 	.word	0x080373ac
 8013ed4:	0803601c 	.word	0x0803601c
 8013ed8:	080373e8 	.word	0x080373e8
 8013edc:	08037424 	.word	0x08037424
 8013ee0:	08037458 	.word	0x08037458
 8013ee4:	08037498 	.word	0x08037498
 8013ee8:	08037554 	.word	0x08037554
 8013eec:	080375f0 	.word	0x080375f0
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013ef0:	ab03      	add	r3, sp, #12
 8013ef2:	4a5a      	ldr	r2, [pc, #360]	@ (801405c <handle_manage_user+0x478>)
 8013ef4:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013ef8:	c903      	ldmia	r1, {r0, r1}
 8013efa:	f00e fecb 	bl	8022c94 <mg_json_get>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	db21      	blt.n	8013f46 <handle_manage_user+0x362>
	        username_edit = mg_json_get_str(hm->body, "$.user");
 8013f02:	4a57      	ldr	r2, [pc, #348]	@ (8014060 <handle_manage_user+0x47c>)
 8013f04:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013f08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f0c:	f011 fae0 	bl	80254d0 <mg_json_get_str>
 8013f10:	4605      	mov	r5, r0
	        new_password = mg_json_get_str(hm->body, "$.pass");
 8013f12:	4a54      	ldr	r2, [pc, #336]	@ (8014064 <handle_manage_user+0x480>)
 8013f14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f18:	f011 fada 	bl	80254d0 <mg_json_get_str>
 8013f1c:	4604      	mov	r4, r0
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8013f1e:	b125      	cbz	r5, 8013f2a <handle_manage_user+0x346>
 8013f20:	b118      	cbz	r0, 8013f2a <handle_manage_user+0x346>
 8013f22:	782b      	ldrb	r3, [r5, #0]
 8013f24:	b10b      	cbz	r3, 8013f2a <handle_manage_user+0x346>
 8013f26:	7803      	ldrb	r3, [r0, #0]
 8013f28:	b9bb      	cbnz	r3, 8013f5a <handle_manage_user+0x376>
	            mg_http_reply(c, 400, headers,
 8013f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8014068 <handle_manage_user+0x484>)
 8013f2c:	4a4f      	ldr	r2, [pc, #316]	@ (801406c <handle_manage_user+0x488>)
 8013f2e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013f32:	4630      	mov	r0, r6
 8013f34:	f010 f852 	bl	8023fdc <mg_http_reply>
	    free(username_edit);
 8013f38:	4628      	mov	r0, r5
 8013f3a:	f006 fd97 	bl	801aa6c <vPortFree>
	    free(new_password);
 8013f3e:	4620      	mov	r0, r4
 8013f40:	f006 fd94 	bl	801aa6c <vPortFree>
	    return;
 8013f44:	e702      	b.n	8013d4c <handle_manage_user+0x168>
	        mg_http_reply(c, 400, headers,
 8013f46:	4b4a      	ldr	r3, [pc, #296]	@ (8014070 <handle_manage_user+0x48c>)
 8013f48:	4a48      	ldr	r2, [pc, #288]	@ (801406c <handle_manage_user+0x488>)
 8013f4a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013f4e:	4630      	mov	r0, r6
 8013f50:	f010 f844 	bl	8023fdc <mg_http_reply>
	    char *new_password = NULL;
 8013f54:	2400      	movs	r4, #0
	    char *username_edit = NULL;
 8013f56:	4625      	mov	r5, r4
 8013f58:	e7ee      	b.n	8013f38 <handle_manage_user+0x354>
	            char new_pass_digest[sha1_str_len] = {0};
 8013f5a:	2700      	movs	r7, #0
 8013f5c:	9704      	str	r7, [sp, #16]
 8013f5e:	2225      	movs	r2, #37	@ 0x25
 8013f60:	4639      	mov	r1, r7
 8013f62:	a805      	add	r0, sp, #20
 8013f64:	f018 fd34 	bl	802c9d0 <memset>
	            mg_sha1_init(&sha1_ctx);
 8013f68:	a80f      	add	r0, sp, #60	@ 0x3c
 8013f6a:	f010 f90f 	bl	802418c <mg_sha1_init>
	            mg_sha1_update(&sha1_ctx, (const unsigned char *)new_password, strlen(new_password));
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f7fc f996 	bl	80102a0 <strlen>
 8013f74:	4602      	mov	r2, r0
 8013f76:	4621      	mov	r1, r4
 8013f78:	a80f      	add	r0, sp, #60	@ 0x3c
 8013f7a:	f010 f921 	bl	80241c0 <mg_sha1_update>
	            mg_sha1_final((unsigned char *)new_pass_digest, &sha1_ctx);
 8013f7e:	a90f      	add	r1, sp, #60	@ 0x3c
 8013f80:	a804      	add	r0, sp, #16
 8013f82:	f010 f957 	bl	8024234 <mg_sha1_final>
	            for (int i = 0; i < user_list_size; i++) {
 8013f86:	2f09      	cmp	r7, #9
 8013f88:	dc25      	bgt.n	8013fd6 <handle_manage_user+0x3f2>
	                if (strcmp(web_users[i].user, username_edit) == 0) {
 8013f8a:	4629      	mov	r1, r5
 8013f8c:	20a9      	movs	r0, #169	@ 0xa9
 8013f8e:	4b39      	ldr	r3, [pc, #228]	@ (8014074 <handle_manage_user+0x490>)
 8013f90:	fb00 3007 	mla	r0, r0, r7, r3
 8013f94:	f7fc f924 	bl	80101e0 <strcmp>
 8013f98:	b108      	cbz	r0, 8013f9e <handle_manage_user+0x3ba>
	            for (int i = 0; i < user_list_size; i++) {
 8013f9a:	3701      	adds	r7, #1
 8013f9c:	e7f3      	b.n	8013f86 <handle_manage_user+0x3a2>
	                    strncpy(web_users[i].pass_digest, new_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 8013f9e:	23a9      	movs	r3, #169	@ 0xa9
 8013fa0:	fb03 f707 	mul.w	r7, r3, r7
 8013fa4:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8013fa8:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8014074 <handle_manage_user+0x490>
 8013fac:	2228      	movs	r2, #40	@ 0x28
 8013fae:	a904      	add	r1, sp, #16
 8013fb0:	4440      	add	r0, r8
 8013fb2:	f018 fd54 	bl	802ca5e <strncpy>
	                    web_users[i].pass_digest[sizeof(web_users[i].pass_digest) - 1] = '\0';
 8013fb6:	4447      	add	r7, r8
 8013fb8:	2300      	movs	r3, #0
 8013fba:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	                    write_users(user_cred_file, web_users, user_list_size);
 8013fbe:	220a      	movs	r2, #10
 8013fc0:	4641      	mov	r1, r8
 8013fc2:	482d      	ldr	r0, [pc, #180]	@ (8014078 <handle_manage_user+0x494>)
 8013fc4:	f7ff fdee 	bl	8013ba4 <write_users>
	                mg_http_reply(c, 200, headers,
 8013fc8:	4b2c      	ldr	r3, [pc, #176]	@ (801407c <handle_manage_user+0x498>)
 8013fca:	4a28      	ldr	r2, [pc, #160]	@ (801406c <handle_manage_user+0x488>)
 8013fcc:	21c8      	movs	r1, #200	@ 0xc8
 8013fce:	4630      	mov	r0, r6
 8013fd0:	f010 f804 	bl	8023fdc <mg_http_reply>
 8013fd4:	e7b0      	b.n	8013f38 <handle_manage_user+0x354>
	                mg_http_reply(c, 404, headers,
 8013fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8014080 <handle_manage_user+0x49c>)
 8013fd8:	4a24      	ldr	r2, [pc, #144]	@ (801406c <handle_manage_user+0x488>)
 8013fda:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013fde:	4630      	mov	r0, r6
 8013fe0:	f00f fffc 	bl	8023fdc <mg_http_reply>
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8013fe4:	e7a8      	b.n	8013f38 <handle_manage_user+0x354>
	                memset(web_users[i].user, 0, sizeof(web_users[i].user));
 8013fe6:	2280      	movs	r2, #128	@ 0x80
 8013fe8:	2100      	movs	r1, #0
 8013fea:	4628      	mov	r0, r5
 8013fec:	f018 fcf0 	bl	802c9d0 <memset>
	                memset(web_users[i].pass_digest, 0, sizeof(web_users[i].pass_digest));
 8013ff0:	23a9      	movs	r3, #169	@ 0xa9
 8013ff2:	fb03 f004 	mul.w	r0, r3, r4
 8013ff6:	3080      	adds	r0, #128	@ 0x80
 8013ff8:	4c1e      	ldr	r4, [pc, #120]	@ (8014074 <handle_manage_user+0x490>)
 8013ffa:	2229      	movs	r2, #41	@ 0x29
 8013ffc:	2100      	movs	r1, #0
 8013ffe:	4420      	add	r0, r4
 8014000:	f018 fce6 	bl	802c9d0 <memset>
	                write_users(user_cred_file, web_users, user_list_size);
 8014004:	220a      	movs	r2, #10
 8014006:	4621      	mov	r1, r4
 8014008:	481b      	ldr	r0, [pc, #108]	@ (8014078 <handle_manage_user+0x494>)
 801400a:	f7ff fdcb 	bl	8013ba4 <write_users>
	            mg_http_reply(c, 200, headers,
 801400e:	4b1d      	ldr	r3, [pc, #116]	@ (8014084 <handle_manage_user+0x4a0>)
 8014010:	4a16      	ldr	r2, [pc, #88]	@ (801406c <handle_manage_user+0x488>)
 8014012:	21c8      	movs	r1, #200	@ 0xc8
 8014014:	4630      	mov	r0, r6
 8014016:	f00f ffe1 	bl	8023fdc <mg_http_reply>
 801401a:	e737      	b.n	8013e8c <handle_manage_user+0x2a8>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 801401c:	2401      	movs	r4, #1
 801401e:	2c09      	cmp	r4, #9
 8014020:	dc0b      	bgt.n	801403a <handle_manage_user+0x456>
	            if (strcmp(web_users[i].user, username_del) == 0) {
 8014022:	23a9      	movs	r3, #169	@ 0xa9
 8014024:	4d13      	ldr	r5, [pc, #76]	@ (8014074 <handle_manage_user+0x490>)
 8014026:	fb03 5504 	mla	r5, r3, r4, r5
 801402a:	4639      	mov	r1, r7
 801402c:	4628      	mov	r0, r5
 801402e:	f7fc f8d7 	bl	80101e0 <strcmp>
 8014032:	2800      	cmp	r0, #0
 8014034:	d0d7      	beq.n	8013fe6 <handle_manage_user+0x402>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8014036:	3401      	adds	r4, #1
 8014038:	e7f1      	b.n	801401e <handle_manage_user+0x43a>
	            mg_http_reply(c, 400, headers,
 801403a:	4b13      	ldr	r3, [pc, #76]	@ (8014088 <handle_manage_user+0x4a4>)
 801403c:	4a0b      	ldr	r2, [pc, #44]	@ (801406c <handle_manage_user+0x488>)
 801403e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014042:	4630      	mov	r0, r6
 8014044:	f00f ffca 	bl	8023fdc <mg_http_reply>
 8014048:	e720      	b.n	8013e8c <handle_manage_user+0x2a8>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801404a:	4b10      	ldr	r3, [pc, #64]	@ (801408c <handle_manage_user+0x4a8>)
 801404c:	4a07      	ldr	r2, [pc, #28]	@ (801406c <handle_manage_user+0x488>)
 801404e:	f240 1195 	movw	r1, #405	@ 0x195
 8014052:	4630      	mov	r0, r6
 8014054:	f00f ffc2 	bl	8023fdc <mg_http_reply>
 8014058:	e678      	b.n	8013d4c <handle_manage_user+0x168>
 801405a:	bf00      	nop
 801405c:	08036e54 	.word	0x08036e54
 8014060:	0803739c 	.word	0x0803739c
 8014064:	080373a4 	.word	0x080373a4
 8014068:	08037510 	.word	0x08037510
 801406c:	080365f0 	.word	0x080365f0
 8014070:	08036e58 	.word	0x08036e58
 8014074:	200021b8 	.word	0x200021b8
 8014078:	0803601c 	.word	0x0803601c
 801407c:	0803749c 	.word	0x0803749c
 8014080:	080374e0 	.word	0x080374e0
 8014084:	0803755c 	.word	0x0803755c
 8014088:	0803759c 	.word	0x0803759c
 801408c:	08037630 	.word	0x08037630

08014090 <load_users>:
static bool load_users(const char *file_path, users_list_t * users, size_t count){
 8014090:	b570      	push	{r4, r5, r6, lr}
 8014092:	460e      	mov	r6, r1
 8014094:	4614      	mov	r4, r2
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_READ);
 8014096:	2201      	movs	r2, #1
 8014098:	4601      	mov	r1, r0
 801409a:	480e      	ldr	r0, [pc, #56]	@ (80140d4 <load_users+0x44>)
 801409c:	f00e fd10 	bl	8022ac0 <mg_fs_open>
	if (!fd) {
 80140a0:	b188      	cbz	r0, 80140c6 <load_users+0x36>
 80140a2:	4605      	mov	r5, r0
	mg_fs_lfs.rd(fd->fd, users, sizeof(users_list_t) * count);
 80140a4:	4b0b      	ldr	r3, [pc, #44]	@ (80140d4 <load_users+0x44>)
 80140a6:	691b      	ldr	r3, [r3, #16]
 80140a8:	22a9      	movs	r2, #169	@ 0xa9
 80140aa:	fb04 f202 	mul.w	r2, r4, r2
 80140ae:	4631      	mov	r1, r6
 80140b0:	6800      	ldr	r0, [r0, #0]
 80140b2:	4798      	blx	r3
	mg_fs_close(fd);
 80140b4:	4628      	mov	r0, r5
 80140b6:	f00e fd1c 	bl	8022af2 <mg_fs_close>
	logging(L_INFO, "Loaded web users from file");
 80140ba:	4907      	ldr	r1, [pc, #28]	@ (80140d8 <load_users+0x48>)
 80140bc:	2001      	movs	r0, #1
 80140be:	f7fd ff19 	bl	8011ef4 <logging>
	return true;
 80140c2:	2001      	movs	r0, #1
}
 80140c4:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Can't open file with users");
 80140c6:	4905      	ldr	r1, [pc, #20]	@ (80140dc <load_users+0x4c>)
 80140c8:	2003      	movs	r0, #3
 80140ca:	f7fd ff13 	bl	8011ef4 <logging>
		return false;
 80140ce:	2000      	movs	r0, #0
 80140d0:	e7f8      	b.n	80140c4 <load_users+0x34>
 80140d2:	bf00      	nop
 80140d4:	200000a0 	.word	0x200000a0
 80140d8:	080376ac 	.word	0x080376ac
 80140dc:	08037690 	.word	0x08037690

080140e0 <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 80140e0:	b570      	push	{r4, r5, r6, lr}
 80140e2:	b086      	sub	sp, #24
 80140e4:	4605      	mov	r5, r0
 80140e6:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 80140e8:	ae04      	add	r6, sp, #16
 80140ea:	4915      	ldr	r1, [pc, #84]	@ (8014140 <handle_restart_mcu+0x60>)
 80140ec:	4630      	mov	r0, r6
 80140ee:	f010 f8ff 	bl	80242f0 <mg_str_s>
 80140f2:	2300      	movs	r3, #0
 80140f4:	9300      	str	r3, [sp, #0]
 80140f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80140fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80140fe:	f010 fb19 	bl	8024734 <mg_match>
 8014102:	b1a0      	cbz	r0, 801412e <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 8014104:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 2 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 8014106:	6818      	ldr	r0, [r3, #0]
 8014108:	2300      	movs	r3, #0
 801410a:	9302      	str	r3, [sp, #8]
 801410c:	4b0d      	ldr	r3, [pc, #52]	@ (8014144 <handle_restart_mcu+0x64>)
 801410e:	9301      	str	r3, [sp, #4]
 8014110:	2301      	movs	r3, #1
 8014112:	9300      	str	r3, [sp, #0]
 8014114:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8014118:	2300      	movs	r3, #0
 801411a:	f011 facb 	bl	80256b4 <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 801411e:	4b0a      	ldr	r3, [pc, #40]	@ (8014148 <handle_restart_mcu+0x68>)
 8014120:	4a0a      	ldr	r2, [pc, #40]	@ (801414c <handle_restart_mcu+0x6c>)
 8014122:	21c8      	movs	r1, #200	@ 0xc8
 8014124:	4628      	mov	r0, r5
 8014126:	f00f ff59 	bl	8023fdc <mg_http_reply>
}
 801412a:	b006      	add	sp, #24
 801412c:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801412e:	4b08      	ldr	r3, [pc, #32]	@ (8014150 <handle_restart_mcu+0x70>)
 8014130:	4a06      	ldr	r2, [pc, #24]	@ (801414c <handle_restart_mcu+0x6c>)
 8014132:	f240 1195 	movw	r1, #405	@ 0x195
 8014136:	4628      	mov	r0, r5
 8014138:	f00f ff50 	bl	8023fdc <mg_http_reply>
}
 801413c:	e7f5      	b.n	801412a <handle_restart_mcu+0x4a>
 801413e:	bf00      	nop
 8014140:	0803674c 	.word	0x0803674c
 8014144:	080163d1 	.word	0x080163d1
 8014148:	080376c8 	.word	0x080376c8
 801414c:	080365f0 	.word	0x080365f0
 8014150:	080367d4 	.word	0x080367d4

08014154 <handle_activete_and_reboot>:
static void handle_activete_and_reboot(struct mg_connection *c, struct mg_http_message *hm){
 8014154:	b570      	push	{r4, r5, r6, lr}
 8014156:	b084      	sub	sp, #16
 8014158:	4605      	mov	r5, r0
 801415a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 801415c:	ae02      	add	r6, sp, #8
 801415e:	4914      	ldr	r1, [pc, #80]	@ (80141b0 <handle_activete_and_reboot+0x5c>)
 8014160:	4630      	mov	r0, r6
 8014162:	f010 f8c5 	bl	80242f0 <mg_str_s>
 8014166:	2300      	movs	r3, #0
 8014168:	9300      	str	r3, [sp, #0]
 801416a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801416e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014172:	f010 fadf 	bl	8024734 <mg_match>
 8014176:	b198      	cbz	r0, 80141a0 <handle_activete_and_reboot+0x4c>
		if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 8014178:	4b0e      	ldr	r3, [pc, #56]	@ (80141b4 <handle_activete_and_reboot+0x60>)
 801417a:	69db      	ldr	r3, [r3, #28]
 801417c:	490e      	ldr	r1, [pc, #56]	@ (80141b8 <handle_activete_and_reboot+0x64>)
 801417e:	480f      	ldr	r0, [pc, #60]	@ (80141bc <handle_activete_and_reboot+0x68>)
 8014180:	4798      	blx	r3
 8014182:	b128      	cbz	r0, 8014190 <handle_activete_and_reboot+0x3c>
			handle_restart_mcu(c, hm);
 8014184:	4621      	mov	r1, r4
 8014186:	4628      	mov	r0, r5
 8014188:	f7ff ffaa 	bl	80140e0 <handle_restart_mcu>
}
 801418c:	b004      	add	sp, #16
 801418e:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 500, headers, //TODO delete for release,
 8014190:	4b0b      	ldr	r3, [pc, #44]	@ (80141c0 <handle_activete_and_reboot+0x6c>)
 8014192:	4a0c      	ldr	r2, [pc, #48]	@ (80141c4 <handle_activete_and_reboot+0x70>)
 8014194:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8014198:	4628      	mov	r0, r5
 801419a:	f00f ff1f 	bl	8023fdc <mg_http_reply>
 801419e:	e7f5      	b.n	801418c <handle_activete_and_reboot+0x38>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80141a0:	4b09      	ldr	r3, [pc, #36]	@ (80141c8 <handle_activete_and_reboot+0x74>)
 80141a2:	4a08      	ldr	r2, [pc, #32]	@ (80141c4 <handle_activete_and_reboot+0x70>)
 80141a4:	f240 1195 	movw	r1, #405	@ 0x195
 80141a8:	4628      	mov	r0, r5
 80141aa:	f00f ff17 	bl	8023fdc <mg_http_reply>
}
 80141ae:	e7ed      	b.n	801418c <handle_activete_and_reboot+0x38>
 80141b0:	0803674c 	.word	0x0803674c
 80141b4:	200000a0 	.word	0x200000a0
 80141b8:	08035fdc 	.word	0x08035fdc
 80141bc:	08037700 	.word	0x08037700
 80141c0:	08037718 	.word	0x08037718
 80141c4:	080365f0 	.word	0x080365f0
 80141c8:	080367d4 	.word	0x080367d4

080141cc <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 80141cc:	b570      	push	{r4, r5, r6, lr}
 80141ce:	b0c4      	sub	sp, #272	@ 0x110
 80141d0:	4606      	mov	r6, r0
 80141d2:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 80141d4:	ad42      	add	r5, sp, #264	@ 0x108
 80141d6:	4920      	ldr	r1, [pc, #128]	@ (8014258 <handle_fs_mkdir+0x8c>)
 80141d8:	4628      	mov	r0, r5
 80141da:	f010 f889 	bl	80242f0 <mg_str_s>
 80141de:	2300      	movs	r3, #0
 80141e0:	9300      	str	r3, [sp, #0]
 80141e2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80141e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80141ea:	f010 faa3 	bl	8024734 <mg_match>
 80141ee:	b350      	cbz	r0, 8014246 <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 80141f0:	237b      	movs	r3, #123	@ 0x7b
 80141f2:	aa23      	add	r2, sp, #140	@ 0x8c
 80141f4:	4919      	ldr	r1, [pc, #100]	@ (801425c <handle_fs_mkdir+0x90>)
 80141f6:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 80141fa:	f010 ff66 	bl	80250ca <mg_http_get_var>
 80141fe:	2800      	cmp	r0, #0
 8014200:	dd19      	ble.n	8014236 <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 8014202:	ab23      	add	r3, sp, #140	@ 0x8c
 8014204:	4a16      	ldr	r2, [pc, #88]	@ (8014260 <handle_fs_mkdir+0x94>)
 8014206:	2180      	movs	r1, #128	@ 0x80
 8014208:	a803      	add	r0, sp, #12
 801420a:	f017 feb7 	bl	802bf7c <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 801420e:	4b15      	ldr	r3, [pc, #84]	@ (8014264 <handle_fs_mkdir+0x98>)
 8014210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014212:	a803      	add	r0, sp, #12
 8014214:	4798      	blx	r3
 8014216:	b130      	cbz	r0, 8014226 <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 8014218:	4b13      	ldr	r3, [pc, #76]	@ (8014268 <handle_fs_mkdir+0x9c>)
 801421a:	4a14      	ldr	r2, [pc, #80]	@ (801426c <handle_fs_mkdir+0xa0>)
 801421c:	21c8      	movs	r1, #200	@ 0xc8
 801421e:	4630      	mov	r0, r6
 8014220:	f00f fedc 	bl	8023fdc <mg_http_reply>
 8014224:	e016      	b.n	8014254 <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 8014226:	4b12      	ldr	r3, [pc, #72]	@ (8014270 <handle_fs_mkdir+0xa4>)
 8014228:	4a10      	ldr	r2, [pc, #64]	@ (801426c <handle_fs_mkdir+0xa0>)
 801422a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801422e:	4630      	mov	r0, r6
 8014230:	f00f fed4 	bl	8023fdc <mg_http_reply>
 8014234:	e00e      	b.n	8014254 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8014236:	4b0f      	ldr	r3, [pc, #60]	@ (8014274 <handle_fs_mkdir+0xa8>)
 8014238:	4a0c      	ldr	r2, [pc, #48]	@ (801426c <handle_fs_mkdir+0xa0>)
 801423a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801423e:	4630      	mov	r0, r6
 8014240:	f00f fecc 	bl	8023fdc <mg_http_reply>
 8014244:	e006      	b.n	8014254 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014246:	4b0c      	ldr	r3, [pc, #48]	@ (8014278 <handle_fs_mkdir+0xac>)
 8014248:	4a08      	ldr	r2, [pc, #32]	@ (801426c <handle_fs_mkdir+0xa0>)
 801424a:	f240 1195 	movw	r1, #405	@ 0x195
 801424e:	4630      	mov	r0, r6
 8014250:	f00f fec4 	bl	8023fdc <mg_http_reply>
}
 8014254:	b044      	add	sp, #272	@ 0x110
 8014256:	bd70      	pop	{r4, r5, r6, pc}
 8014258:	0803674c 	.word	0x0803674c
 801425c:	0803775c 	.word	0x0803775c
 8014260:	08037764 	.word	0x08037764
 8014264:	200000a0 	.word	0x200000a0
 8014268:	0803776c 	.word	0x0803776c
 801426c:	080365f0 	.word	0x080365f0
 8014270:	080377a0 	.word	0x080377a0
 8014274:	080377dc 	.word	0x080377dc
 8014278:	080367d4 	.word	0x080367d4

0801427c <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 801427c:	b570      	push	{r4, r5, r6, lr}
 801427e:	b0a4      	sub	sp, #144	@ 0x90
 8014280:	4605      	mov	r5, r0
 8014282:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014284:	ae22      	add	r6, sp, #136	@ 0x88
 8014286:	491c      	ldr	r1, [pc, #112]	@ (80142f8 <handle_firmware_upload+0x7c>)
 8014288:	4630      	mov	r0, r6
 801428a:	f010 f831 	bl	80242f0 <mg_str_s>
 801428e:	2300      	movs	r3, #0
 8014290:	9300      	str	r3, [sp, #0]
 8014292:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014296:	e894 0003 	ldmia.w	r4, {r0, r1}
 801429a:	f010 fa4b 	bl	8024734 <mg_match>
 801429e:	b308      	cbz	r0, 80142e4 <handle_firmware_upload+0x68>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80142a0:	2380      	movs	r3, #128	@ 0x80
 80142a2:	aa02      	add	r2, sp, #8
 80142a4:	4915      	ldr	r1, [pc, #84]	@ (80142fc <handle_firmware_upload+0x80>)
 80142a6:	f104 0010 	add.w	r0, r4, #16
 80142aa:	f010 ff0e 	bl	80250ca <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 80142ae:	4914      	ldr	r1, [pc, #80]	@ (8014300 <handle_firmware_upload+0x84>)
 80142b0:	a802      	add	r0, sp, #8
 80142b2:	f7fb ff95 	bl	80101e0 <strcmp>
 80142b6:	b958      	cbnz	r0, 80142d0 <handle_firmware_upload+0x54>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 80142b8:	4b12      	ldr	r3, [pc, #72]	@ (8014304 <handle_firmware_upload+0x88>)
 80142ba:	9300      	str	r3, [sp, #0]
 80142bc:	4b12      	ldr	r3, [pc, #72]	@ (8014308 <handle_firmware_upload+0x8c>)
 80142be:	4a13      	ldr	r2, [pc, #76]	@ (801430c <handle_firmware_upload+0x90>)
 80142c0:	4621      	mov	r1, r4
 80142c2:	4628      	mov	r0, r5
 80142c4:	f012 fcc8 	bl	8026c58 <mg_http_upload>
			vTaskDelay(1);
 80142c8:	2001      	movs	r0, #1
 80142ca:	f005 fcb3 	bl	8019c34 <vTaskDelay>
 80142ce:	e010      	b.n	80142f2 <handle_firmware_upload+0x76>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80142d0:	4b0b      	ldr	r3, [pc, #44]	@ (8014300 <handle_firmware_upload+0x84>)
 80142d2:	9300      	str	r3, [sp, #0]
 80142d4:	4b0e      	ldr	r3, [pc, #56]	@ (8014310 <handle_firmware_upload+0x94>)
 80142d6:	4a0f      	ldr	r2, [pc, #60]	@ (8014314 <handle_firmware_upload+0x98>)
 80142d8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80142dc:	4628      	mov	r0, r5
 80142de:	f00f fe7d 	bl	8023fdc <mg_http_reply>
 80142e2:	e006      	b.n	80142f2 <handle_firmware_upload+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80142e4:	4b0c      	ldr	r3, [pc, #48]	@ (8014318 <handle_firmware_upload+0x9c>)
 80142e6:	4a0b      	ldr	r2, [pc, #44]	@ (8014314 <handle_firmware_upload+0x98>)
 80142e8:	f240 1195 	movw	r1, #405	@ 0x195
 80142ec:	4628      	mov	r0, r5
 80142ee:	f00f fe75 	bl	8023fdc <mg_http_reply>
}
 80142f2:	b024      	add	sp, #144	@ 0x90
 80142f4:	bd70      	pop	{r4, r5, r6, pc}
 80142f6:	bf00      	nop
 80142f8:	0803674c 	.word	0x0803674c
 80142fc:	0803af6c 	.word	0x0803af6c
 8014300:	08037818 	.word	0x08037818
 8014304:	0003d090 	.word	0x0003d090
 8014308:	08035fd0 	.word	0x08035fd0
 801430c:	200000a0 	.word	0x200000a0
 8014310:	08037828 	.word	0x08037828
 8014314:	080365f0 	.word	0x080365f0
 8014318:	080367d4 	.word	0x080367d4

0801431c <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 801431c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801431e:	b097      	sub	sp, #92	@ 0x5c
 8014320:	4604      	mov	r4, r0
 8014322:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 8014324:	2101      	movs	r1, #1
 8014326:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801432a:	f7ff f879 	bl	8013420 <mg_calloc>
	if (buff == NULL){
 801432e:	4605      	mov	r5, r0
 8014330:	b150      	cbz	r0, 8014348 <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8014332:	2201      	movs	r2, #1
 8014334:	4621      	mov	r1, r4
 8014336:	4828      	ldr	r0, [pc, #160]	@ (80143d8 <calc_file_md5sum+0xbc>)
 8014338:	f00e fbc2 	bl	8022ac0 <mg_fs_open>
	if (fd==NULL){
 801433c:	4604      	mov	r4, r0
 801433e:	b140      	cbz	r0, 8014352 <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8014340:	4668      	mov	r0, sp
 8014342:	f00e ffcd 	bl	80232e0 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8014346:	e010      	b.n	801436a <calc_file_md5sum+0x4e>
		free(buff);
 8014348:	f006 fb90 	bl	801aa6c <vPortFree>
		return -1;
 801434c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014350:	e040      	b.n	80143d4 <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 8014352:	f00e fbce 	bl	8022af2 <mg_fs_close>
		free(buff);
 8014356:	4628      	mov	r0, r5
 8014358:	f006 fb88 	bl	801aa6c <vPortFree>
		return -2;
 801435c:	f06f 0001 	mvn.w	r0, #1
 8014360:	e038      	b.n	80143d4 <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8014362:	4629      	mov	r1, r5
 8014364:	4668      	mov	r0, sp
 8014366:	f00e ffd1 	bl	802330c <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 801436a:	4b1b      	ldr	r3, [pc, #108]	@ (80143d8 <calc_file_md5sum+0xbc>)
 801436c:	691b      	ldr	r3, [r3, #16]
 801436e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014372:	4629      	mov	r1, r5
 8014374:	6820      	ldr	r0, [r4, #0]
 8014376:	4798      	blx	r3
 8014378:	4602      	mov	r2, r0
 801437a:	2800      	cmp	r0, #0
 801437c:	d1f1      	bne.n	8014362 <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 801437e:	4620      	mov	r0, r4
 8014380:	f00e fbb7 	bl	8022af2 <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 8014384:	2101      	movs	r1, #1
 8014386:	2010      	movs	r0, #16
 8014388:	f7ff f84a 	bl	8013420 <mg_calloc>
	if (digest == NULL){
 801438c:	4607      	mov	r7, r0
 801438e:	b128      	cbz	r0, 801439c <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 8014390:	4601      	mov	r1, r0
 8014392:	4668      	mov	r0, sp
 8014394:	f00f f811 	bl	80233ba <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 8014398:	2400      	movs	r4, #0
 801439a:	e012      	b.n	80143c2 <calc_file_md5sum+0xa6>
		free(buff);
 801439c:	4628      	mov	r0, r5
 801439e:	f006 fb65 	bl	801aa6c <vPortFree>
		free(digest);
 80143a2:	4638      	mov	r0, r7
 80143a4:	f006 fb62 	bl	801aa6c <vPortFree>
		return -1;
 80143a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80143ac:	e012      	b.n	80143d4 <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 80143ae:	0061      	lsls	r1, r4, #1
 80143b0:	5d3b      	ldrb	r3, [r7, r4]
 80143b2:	4a0a      	ldr	r2, [pc, #40]	@ (80143dc <calc_file_md5sum+0xc0>)
 80143b4:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 80143b8:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 80143bc:	f017 fdde 	bl	802bf7c <snprintf>
	for (int i = 0; i < 16; ++i) {
 80143c0:	3401      	adds	r4, #1
 80143c2:	2c0f      	cmp	r4, #15
 80143c4:	ddf3      	ble.n	80143ae <calc_file_md5sum+0x92>
	free(buff);
 80143c6:	4628      	mov	r0, r5
 80143c8:	f006 fb50 	bl	801aa6c <vPortFree>
	free(digest);
 80143cc:	4638      	mov	r0, r7
 80143ce:	f006 fb4d 	bl	801aa6c <vPortFree>
	return 0;
 80143d2:	2000      	movs	r0, #0
}
 80143d4:	b017      	add	sp, #92	@ 0x5c
 80143d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143d8:	200000a0 	.word	0x200000a0
 80143dc:	08037874 	.word	0x08037874

080143e0 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 80143e0:	b570      	push	{r4, r5, r6, lr}
 80143e2:	b084      	sub	sp, #16
 80143e4:	4605      	mov	r5, r0
 80143e6:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80143e8:	ae02      	add	r6, sp, #8
 80143ea:	4919      	ldr	r1, [pc, #100]	@ (8014450 <handle_firmware_md5+0x70>)
 80143ec:	4630      	mov	r0, r6
 80143ee:	f00f ff7f 	bl	80242f0 <mg_str_s>
 80143f2:	2300      	movs	r3, #0
 80143f4:	9300      	str	r3, [sp, #0]
 80143f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80143fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80143fe:	f010 f999 	bl	8024734 <mg_match>
 8014402:	b1e8      	cbz	r0, 8014440 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8014404:	2101      	movs	r1, #1
 8014406:	2021      	movs	r0, #33	@ 0x21
 8014408:	f7ff f80a 	bl	8013420 <mg_calloc>
 801440c:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 801440e:	4601      	mov	r1, r0
 8014410:	4810      	ldr	r0, [pc, #64]	@ (8014454 <handle_firmware_md5+0x74>)
 8014412:	f7ff ff83 	bl	801431c <calc_file_md5sum>
 8014416:	b958      	cbnz	r0, 8014430 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8014418:	9400      	str	r4, [sp, #0]
 801441a:	4b0f      	ldr	r3, [pc, #60]	@ (8014458 <handle_firmware_md5+0x78>)
 801441c:	4a0f      	ldr	r2, [pc, #60]	@ (801445c <handle_firmware_md5+0x7c>)
 801441e:	21c8      	movs	r1, #200	@ 0xc8
 8014420:	4628      	mov	r0, r5
 8014422:	f00f fddb 	bl	8023fdc <mg_http_reply>
		free(md5_str);
 8014426:	4620      	mov	r0, r4
 8014428:	f006 fb20 	bl	801aa6c <vPortFree>
}
 801442c:	b004      	add	sp, #16
 801442e:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8014430:	4b0b      	ldr	r3, [pc, #44]	@ (8014460 <handle_firmware_md5+0x80>)
 8014432:	4a0a      	ldr	r2, [pc, #40]	@ (801445c <handle_firmware_md5+0x7c>)
 8014434:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8014438:	4628      	mov	r0, r5
 801443a:	f00f fdcf 	bl	8023fdc <mg_http_reply>
 801443e:	e7f2      	b.n	8014426 <handle_firmware_md5+0x46>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014440:	4b08      	ldr	r3, [pc, #32]	@ (8014464 <handle_firmware_md5+0x84>)
 8014442:	4a06      	ldr	r2, [pc, #24]	@ (801445c <handle_firmware_md5+0x7c>)
 8014444:	f240 1195 	movw	r1, #405	@ 0x195
 8014448:	4628      	mov	r0, r5
 801444a:	f00f fdc7 	bl	8023fdc <mg_http_reply>
}
 801444e:	e7ed      	b.n	801442c <handle_firmware_md5+0x4c>
 8014450:	080365b4 	.word	0x080365b4
 8014454:	08037700 	.word	0x08037700
 8014458:	0803787c 	.word	0x0803787c
 801445c:	080365f0 	.word	0x080365f0
 8014460:	080378a0 	.word	0x080378a0
 8014464:	08036668 	.word	0x08036668

08014468 <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 8014468:	290b      	cmp	r1, #11
 801446a:	d000      	beq.n	801446e <dashboard+0x6>
 801446c:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 801446e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014470:	b0b5      	sub	sp, #212	@ 0xd4
 8014472:	4605      	mov	r5, r0
 8014474:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

    bool authenticate = auth(c, hm, 0); //Check authentication status
 8014476:	2200      	movs	r2, #0
 8014478:	4621      	mov	r1, r4
 801447a:	f7fe fdff 	bl	801307c <auth>
 801447e:	4607      	mov	r7, r0

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8014480:	ae08      	add	r6, sp, #32
 8014482:	49af      	ldr	r1, [pc, #700]	@ (8014740 <dashboard+0x2d8>)
 8014484:	4630      	mov	r0, r6
 8014486:	f00f ff33 	bl	80242f0 <mg_str_s>
 801448a:	2300      	movs	r3, #0
 801448c:	9300      	str	r3, [sp, #0]
 801448e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014492:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014496:	f010 f94d 	bl	8024734 <mg_match>
 801449a:	b120      	cbz	r0, 80144a6 <dashboard+0x3e>
            	handle_OPTIONS_method(c);
 801449c:	4628      	mov	r0, r5
 801449e:	f7fe fc45 	bl	8012d2c <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 80144a2:	b035      	add	sp, #212	@ 0xd4
 80144a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }else if (mg_match(hm->uri, mg_str("/api/#"), NULL) && !authenticate ) { // All requests to /api should be authenticated
 80144a6:	ae0a      	add	r6, sp, #40	@ 0x28
 80144a8:	49a6      	ldr	r1, [pc, #664]	@ (8014744 <dashboard+0x2dc>)
 80144aa:	4630      	mov	r0, r6
 80144ac:	f00f ff20 	bl	80242f0 <mg_str_s>
 80144b0:	2300      	movs	r3, #0
 80144b2:	9300      	str	r3, [sp, #0]
 80144b4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80144b8:	f104 0108 	add.w	r1, r4, #8
 80144bc:	c903      	ldmia	r1, {r0, r1}
 80144be:	f010 f939 	bl	8024734 <mg_match>
 80144c2:	b100      	cbz	r0, 80144c6 <dashboard+0x5e>
 80144c4:	b1bf      	cbz	r7, 80144f6 <dashboard+0x8e>
		}else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 80144c6:	ae0c      	add	r6, sp, #48	@ 0x30
 80144c8:	499f      	ldr	r1, [pc, #636]	@ (8014748 <dashboard+0x2e0>)
 80144ca:	4630      	mov	r0, r6
 80144cc:	f00f ff10 	bl	80242f0 <mg_str_s>
 80144d0:	2300      	movs	r3, #0
 80144d2:	9300      	str	r3, [sp, #0]
 80144d4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80144d8:	f104 0108 	add.w	r1, r4, #8
 80144dc:	c903      	ldmia	r1, {r0, r1}
 80144de:	f010 f929 	bl	8024734 <mg_match>
 80144e2:	b180      	cbz	r0, 8014506 <dashboard+0x9e>
			logging(L_INFO, "Call API /api/login");
 80144e4:	4999      	ldr	r1, [pc, #612]	@ (801474c <dashboard+0x2e4>)
 80144e6:	2001      	movs	r0, #1
 80144e8:	f7fd fd04 	bl	8011ef4 <logging>
        	 handler_authanticate(c,hm);
 80144ec:	4621      	mov	r1, r4
 80144ee:	4628      	mov	r0, r5
 80144f0:	f7fe feb0 	bl	8013254 <handler_authanticate>
 80144f4:	e7d5      	b.n	80144a2 <dashboard+0x3a>
        	mg_http_reply(c, 403, "", "Not Authorised\n");
 80144f6:	4b96      	ldr	r3, [pc, #600]	@ (8014750 <dashboard+0x2e8>)
 80144f8:	4a96      	ldr	r2, [pc, #600]	@ (8014754 <dashboard+0x2ec>)
 80144fa:	f240 1193 	movw	r1, #403	@ 0x193
 80144fe:	4628      	mov	r0, r5
 8014500:	f00f fd6c 	bl	8023fdc <mg_http_reply>
 8014504:	e7cd      	b.n	80144a2 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8014506:	ae0e      	add	r6, sp, #56	@ 0x38
 8014508:	4993      	ldr	r1, [pc, #588]	@ (8014758 <dashboard+0x2f0>)
 801450a:	4630      	mov	r0, r6
 801450c:	f00f fef0 	bl	80242f0 <mg_str_s>
 8014510:	2300      	movs	r3, #0
 8014512:	9300      	str	r3, [sp, #0]
 8014514:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014518:	f104 0108 	add.w	r1, r4, #8
 801451c:	c903      	ldmia	r1, {r0, r1}
 801451e:	f010 f909 	bl	8024734 <mg_match>
 8014522:	b140      	cbz	r0, 8014536 <dashboard+0xce>
			logging(L_INFO, "Call API /api/logout");
 8014524:	498d      	ldr	r1, [pc, #564]	@ (801475c <dashboard+0x2f4>)
 8014526:	2001      	movs	r0, #1
 8014528:	f7fd fce4 	bl	8011ef4 <logging>
			handler_logout(c,hm);
 801452c:	4621      	mov	r1, r4
 801452e:	4628      	mov	r0, r5
 8014530:	f7fe fcea 	bl	8012f08 <handler_logout>
 8014534:	e7b5      	b.n	80144a2 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8014536:	ae10      	add	r6, sp, #64	@ 0x40
 8014538:	4989      	ldr	r1, [pc, #548]	@ (8014760 <dashboard+0x2f8>)
 801453a:	4630      	mov	r0, r6
 801453c:	f00f fed8 	bl	80242f0 <mg_str_s>
 8014540:	2300      	movs	r3, #0
 8014542:	9300      	str	r3, [sp, #0]
 8014544:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014548:	f104 0108 	add.w	r1, r4, #8
 801454c:	c903      	ldmia	r1, {r0, r1}
 801454e:	f010 f8f1 	bl	8024734 <mg_match>
 8014552:	b138      	cbz	r0, 8014564 <dashboard+0xfc>
			logging(L_INFO, "Call API /api/ram/status");
 8014554:	4983      	ldr	r1, [pc, #524]	@ (8014764 <dashboard+0x2fc>)
 8014556:	2001      	movs	r0, #1
 8014558:	f7fd fccc 	bl	8011ef4 <logging>
			handle_ram_status_get(c);
 801455c:	4628      	mov	r0, r5
 801455e:	f7fe fe8d 	bl	801327c <handle_ram_status_get>
 8014562:	e79e      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8014564:	ae12      	add	r6, sp, #72	@ 0x48
 8014566:	4980      	ldr	r1, [pc, #512]	@ (8014768 <dashboard+0x300>)
 8014568:	4630      	mov	r0, r6
 801456a:	f00f fec1 	bl	80242f0 <mg_str_s>
 801456e:	2300      	movs	r3, #0
 8014570:	9300      	str	r3, [sp, #0]
 8014572:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014576:	f104 0108 	add.w	r1, r4, #8
 801457a:	c903      	ldmia	r1, {r0, r1}
 801457c:	f010 f8da 	bl	8024734 <mg_match>
 8014580:	b140      	cbz	r0, 8014594 <dashboard+0x12c>
			logging(L_INFO, "Call API /api/io/status");
 8014582:	497a      	ldr	r1, [pc, #488]	@ (801476c <dashboard+0x304>)
 8014584:	2001      	movs	r0, #1
 8014586:	f7fd fcb5 	bl	8011ef4 <logging>
			handle_io_status_get(c, hm);
 801458a:	4621      	mov	r1, r4
 801458c:	4628      	mov	r0, r5
 801458e:	f7fe fe95 	bl	80132bc <handle_io_status_get>
 8014592:	e786      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8014594:	ae14      	add	r6, sp, #80	@ 0x50
 8014596:	4976      	ldr	r1, [pc, #472]	@ (8014770 <dashboard+0x308>)
 8014598:	4630      	mov	r0, r6
 801459a:	f00f fea9 	bl	80242f0 <mg_str_s>
 801459e:	2300      	movs	r3, #0
 80145a0:	9300      	str	r3, [sp, #0]
 80145a2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80145a6:	f104 0108 	add.w	r1, r4, #8
 80145aa:	c903      	ldmia	r1, {r0, r1}
 80145ac:	f010 f8c2 	bl	8024734 <mg_match>
 80145b0:	b140      	cbz	r0, 80145c4 <dashboard+0x15c>
			logging(L_INFO, "Call API /api/mqtt/settings");
 80145b2:	4970      	ldr	r1, [pc, #448]	@ (8014774 <dashboard+0x30c>)
 80145b4:	2001      	movs	r0, #1
 80145b6:	f7fd fc9d 	bl	8011ef4 <logging>
			handle_mqtt_conf(c, hm);
 80145ba:	4621      	mov	r1, r4
 80145bc:	4628      	mov	r0, r5
 80145be:	f7fe ff3d 	bl	801343c <handle_mqtt_conf>
 80145c2:	e76e      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/modbus/acl"), NULL)){
 80145c4:	ae16      	add	r6, sp, #88	@ 0x58
 80145c6:	496c      	ldr	r1, [pc, #432]	@ (8014778 <dashboard+0x310>)
 80145c8:	4630      	mov	r0, r6
 80145ca:	f00f fe91 	bl	80242f0 <mg_str_s>
 80145ce:	2300      	movs	r3, #0
 80145d0:	9300      	str	r3, [sp, #0]
 80145d2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80145d6:	f104 0108 	add.w	r1, r4, #8
 80145da:	c903      	ldmia	r1, {r0, r1}
 80145dc:	f010 f8aa 	bl	8024734 <mg_match>
 80145e0:	b140      	cbz	r0, 80145f4 <dashboard+0x18c>
			logging(L_INFO, "Call API /api/modbus/acl");
 80145e2:	4966      	ldr	r1, [pc, #408]	@ (801477c <dashboard+0x314>)
 80145e4:	2001      	movs	r0, #1
 80145e6:	f7fd fc85 	bl	8011ef4 <logging>
			handle_mb_tcp_access_list(c, hm);
 80145ea:	4621      	mov	r1, r4
 80145ec:	4628      	mov	r0, r5
 80145ee:	f7ff f85d 	bl	80136ac <handle_mb_tcp_access_list>
 80145f2:	e756      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 80145f4:	ae18      	add	r6, sp, #96	@ 0x60
 80145f6:	4962      	ldr	r1, [pc, #392]	@ (8014780 <dashboard+0x318>)
 80145f8:	4630      	mov	r0, r6
 80145fa:	f00f fe79 	bl	80242f0 <mg_str_s>
 80145fe:	2300      	movs	r3, #0
 8014600:	9300      	str	r3, [sp, #0]
 8014602:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014606:	f104 0108 	add.w	r1, r4, #8
 801460a:	c903      	ldmia	r1, {r0, r1}
 801460c:	f010 f892 	bl	8024734 <mg_match>
 8014610:	b140      	cbz	r0, 8014624 <dashboard+0x1bc>
			logging(L_INFO, "Call API /api/device/status");
 8014612:	495c      	ldr	r1, [pc, #368]	@ (8014784 <dashboard+0x31c>)
 8014614:	2001      	movs	r0, #1
 8014616:	f7fd fc6d 	bl	8011ef4 <logging>
			handle_dev_status(c, hm);
 801461a:	4621      	mov	r1, r4
 801461c:	4628      	mov	r0, r5
 801461e:	f7ff f925 	bl	801386c <handle_dev_status>
 8014622:	e73e      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8014624:	ae1a      	add	r6, sp, #104	@ 0x68
 8014626:	4958      	ldr	r1, [pc, #352]	@ (8014788 <dashboard+0x320>)
 8014628:	4630      	mov	r0, r6
 801462a:	f00f fe61 	bl	80242f0 <mg_str_s>
 801462e:	2300      	movs	r3, #0
 8014630:	9300      	str	r3, [sp, #0]
 8014632:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014636:	68e1      	ldr	r1, [r4, #12]
 8014638:	68a0      	ldr	r0, [r4, #8]
 801463a:	f010 f87b 	bl	8024734 <mg_match>
 801463e:	b148      	cbz	r0, 8014654 <dashboard+0x1ec>
			logging(L_INFO, "Call API /api/device/log");
 8014640:	4952      	ldr	r1, [pc, #328]	@ (801478c <dashboard+0x324>)
 8014642:	2001      	movs	r0, #1
 8014644:	f7fd fc56 	bl	8011ef4 <logging>
			handle_fs_get_log(c, hm, 0);
 8014648:	2200      	movs	r2, #0
 801464a:	4621      	mov	r1, r4
 801464c:	4628      	mov	r0, r5
 801464e:	f7ff fa4b 	bl	8013ae8 <handle_fs_get_log>
 8014652:	e726      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8014654:	ae1c      	add	r6, sp, #112	@ 0x70
 8014656:	494e      	ldr	r1, [pc, #312]	@ (8014790 <dashboard+0x328>)
 8014658:	4630      	mov	r0, r6
 801465a:	f00f fe49 	bl	80242f0 <mg_str_s>
 801465e:	2300      	movs	r3, #0
 8014660:	9300      	str	r3, [sp, #0]
 8014662:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014666:	68e1      	ldr	r1, [r4, #12]
 8014668:	68a0      	ldr	r0, [r4, #8]
 801466a:	f010 f863 	bl	8024734 <mg_match>
 801466e:	b148      	cbz	r0, 8014684 <dashboard+0x21c>
			logging(L_INFO, "Call API /api/device/log_old");
 8014670:	4948      	ldr	r1, [pc, #288]	@ (8014794 <dashboard+0x32c>)
 8014672:	2001      	movs	r0, #1
 8014674:	f7fd fc3e 	bl	8011ef4 <logging>
			handle_fs_get_log(c, hm, 1);
 8014678:	2201      	movs	r2, #1
 801467a:	4621      	mov	r1, r4
 801467c:	4628      	mov	r0, r5
 801467e:	f7ff fa33 	bl	8013ae8 <handle_fs_get_log>
 8014682:	e70e      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/user"), NULL)){
 8014684:	ae1e      	add	r6, sp, #120	@ 0x78
 8014686:	4944      	ldr	r1, [pc, #272]	@ (8014798 <dashboard+0x330>)
 8014688:	4630      	mov	r0, r6
 801468a:	f00f fe31 	bl	80242f0 <mg_str_s>
 801468e:	2300      	movs	r3, #0
 8014690:	9300      	str	r3, [sp, #0]
 8014692:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014696:	68e1      	ldr	r1, [r4, #12]
 8014698:	68a0      	ldr	r0, [r4, #8]
 801469a:	f010 f84b 	bl	8024734 <mg_match>
 801469e:	b140      	cbz	r0, 80146b2 <dashboard+0x24a>
			logging(L_INFO, "Call API /api/device/user");
 80146a0:	493e      	ldr	r1, [pc, #248]	@ (801479c <dashboard+0x334>)
 80146a2:	2001      	movs	r0, #1
 80146a4:	f7fd fc26 	bl	8011ef4 <logging>
			handle_manage_user(c, hm);
 80146a8:	4621      	mov	r1, r4
 80146aa:	4628      	mov	r0, r5
 80146ac:	f7ff fa9a 	bl	8013be4 <handle_manage_user>
 80146b0:	e6f7      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 80146b2:	ae20      	add	r6, sp, #128	@ 0x80
 80146b4:	493a      	ldr	r1, [pc, #232]	@ (80147a0 <dashboard+0x338>)
 80146b6:	4630      	mov	r0, r6
 80146b8:	f00f fe1a 	bl	80242f0 <mg_str_s>
 80146bc:	2300      	movs	r3, #0
 80146be:	9300      	str	r3, [sp, #0]
 80146c0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80146c4:	68e1      	ldr	r1, [r4, #12]
 80146c6:	68a0      	ldr	r0, [r4, #8]
 80146c8:	f010 f834 	bl	8024734 <mg_match>
 80146cc:	b140      	cbz	r0, 80146e0 <dashboard+0x278>
			logging(L_INFO, "Call API /api/device/restart");
 80146ce:	4935      	ldr	r1, [pc, #212]	@ (80147a4 <dashboard+0x33c>)
 80146d0:	2001      	movs	r0, #1
 80146d2:	f7fd fc0f 	bl	8011ef4 <logging>
			handle_restart_mcu(c, hm);
 80146d6:	4621      	mov	r1, r4
 80146d8:	4628      	mov	r0, r5
 80146da:	f7ff fd01 	bl	80140e0 <handle_restart_mcu>
 80146de:	e6e0      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/version"), NULL)){
 80146e0:	ae22      	add	r6, sp, #136	@ 0x88
 80146e2:	4931      	ldr	r1, [pc, #196]	@ (80147a8 <dashboard+0x340>)
 80146e4:	4630      	mov	r0, r6
 80146e6:	f00f fe03 	bl	80242f0 <mg_str_s>
 80146ea:	2300      	movs	r3, #0
 80146ec:	9300      	str	r3, [sp, #0]
 80146ee:	e896 000c 	ldmia.w	r6, {r2, r3}
 80146f2:	68e1      	ldr	r1, [r4, #12]
 80146f4:	68a0      	ldr	r0, [r4, #8]
 80146f6:	f010 f81d 	bl	8024734 <mg_match>
 80146fa:	b140      	cbz	r0, 801470e <dashboard+0x2a6>
			logging(L_INFO, "Call API /api/device/version");
 80146fc:	492b      	ldr	r1, [pc, #172]	@ (80147ac <dashboard+0x344>)
 80146fe:	2001      	movs	r0, #1
 8014700:	f7fd fbf8 	bl	8011ef4 <logging>
			handler_dev_version(c, hm);
 8014704:	4621      	mov	r1, r4
 8014706:	4628      	mov	r0, r5
 8014708:	f7fe fb1c 	bl	8012d44 <handler_dev_version>
 801470c:	e6c9      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/info"), NULL)){
 801470e:	ae24      	add	r6, sp, #144	@ 0x90
 8014710:	4927      	ldr	r1, [pc, #156]	@ (80147b0 <dashboard+0x348>)
 8014712:	4630      	mov	r0, r6
 8014714:	f00f fdec 	bl	80242f0 <mg_str_s>
 8014718:	2300      	movs	r3, #0
 801471a:	9300      	str	r3, [sp, #0]
 801471c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014720:	68e1      	ldr	r1, [r4, #12]
 8014722:	68a0      	ldr	r0, [r4, #8]
 8014724:	f010 f806 	bl	8024734 <mg_match>
 8014728:	2800      	cmp	r0, #0
 801472a:	d045      	beq.n	80147b8 <dashboard+0x350>
			logging(L_INFO, "Call API /api/device/info");
 801472c:	4921      	ldr	r1, [pc, #132]	@ (80147b4 <dashboard+0x34c>)
 801472e:	2001      	movs	r0, #1
 8014730:	f7fd fbe0 	bl	8011ef4 <logging>
			handler_dev_info(c, hm);
 8014734:	4621      	mov	r1, r4
 8014736:	4628      	mov	r0, r5
 8014738:	f7fe fb36 	bl	8012da8 <handler_dev_info>
 801473c:	e6b1      	b.n	80144a2 <dashboard+0x3a>
 801473e:	bf00      	nop
 8014740:	080378e0 	.word	0x080378e0
 8014744:	080378e8 	.word	0x080378e8
 8014748:	08037900 	.word	0x08037900
 801474c:	0803790c 	.word	0x0803790c
 8014750:	080378f0 	.word	0x080378f0
 8014754:	08036c70 	.word	0x08036c70
 8014758:	08037920 	.word	0x08037920
 801475c:	0803792c 	.word	0x0803792c
 8014760:	08037944 	.word	0x08037944
 8014764:	08037954 	.word	0x08037954
 8014768:	08037970 	.word	0x08037970
 801476c:	08037980 	.word	0x08037980
 8014770:	08037998 	.word	0x08037998
 8014774:	080379ac 	.word	0x080379ac
 8014778:	080379c8 	.word	0x080379c8
 801477c:	080379d8 	.word	0x080379d8
 8014780:	080379f4 	.word	0x080379f4
 8014784:	08037a08 	.word	0x08037a08
 8014788:	08037a24 	.word	0x08037a24
 801478c:	08037a34 	.word	0x08037a34
 8014790:	08037a50 	.word	0x08037a50
 8014794:	08037a64 	.word	0x08037a64
 8014798:	08037a84 	.word	0x08037a84
 801479c:	08037a98 	.word	0x08037a98
 80147a0:	08037ab4 	.word	0x08037ab4
 80147a4:	08037ac8 	.word	0x08037ac8
 80147a8:	08037ae8 	.word	0x08037ae8
 80147ac:	08037afc 	.word	0x08037afc
 80147b0:	08037b1c 	.word	0x08037b1c
 80147b4:	08037b30 	.word	0x08037b30
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 80147b8:	ae26      	add	r6, sp, #152	@ 0x98
 80147ba:	4950      	ldr	r1, [pc, #320]	@ (80148fc <dashboard+0x494>)
 80147bc:	4630      	mov	r0, r6
 80147be:	f00f fd97 	bl	80242f0 <mg_str_s>
 80147c2:	2300      	movs	r3, #0
 80147c4:	9300      	str	r3, [sp, #0]
 80147c6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147ca:	68e1      	ldr	r1, [r4, #12]
 80147cc:	68a0      	ldr	r0, [r4, #8]
 80147ce:	f00f ffb1 	bl	8024734 <mg_match>
 80147d2:	b120      	cbz	r0, 80147de <dashboard+0x376>
			handle_firmware_upload(c, hm);
 80147d4:	4621      	mov	r1, r4
 80147d6:	4628      	mov	r0, r5
 80147d8:	f7ff fd50 	bl	801427c <handle_firmware_upload>
 80147dc:	e661      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 80147de:	ae28      	add	r6, sp, #160	@ 0xa0
 80147e0:	4947      	ldr	r1, [pc, #284]	@ (8014900 <dashboard+0x498>)
 80147e2:	4630      	mov	r0, r6
 80147e4:	f00f fd84 	bl	80242f0 <mg_str_s>
 80147e8:	2300      	movs	r3, #0
 80147ea:	9300      	str	r3, [sp, #0]
 80147ec:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147f0:	68e1      	ldr	r1, [r4, #12]
 80147f2:	68a0      	ldr	r0, [r4, #8]
 80147f4:	f00f ff9e 	bl	8024734 <mg_match>
 80147f8:	b140      	cbz	r0, 801480c <dashboard+0x3a4>
			logging(L_INFO, "Call API /api/firmware/md5");
 80147fa:	4942      	ldr	r1, [pc, #264]	@ (8014904 <dashboard+0x49c>)
 80147fc:	2001      	movs	r0, #1
 80147fe:	f7fd fb79 	bl	8011ef4 <logging>
			handle_firmware_md5(c, hm);
 8014802:	4621      	mov	r1, r4
 8014804:	4628      	mov	r0, r5
 8014806:	f7ff fdeb 	bl	80143e0 <handle_firmware_md5>
 801480a:	e64a      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/apply"), NULL)){
 801480c:	ae2a      	add	r6, sp, #168	@ 0xa8
 801480e:	493e      	ldr	r1, [pc, #248]	@ (8014908 <dashboard+0x4a0>)
 8014810:	4630      	mov	r0, r6
 8014812:	f00f fd6d 	bl	80242f0 <mg_str_s>
 8014816:	2300      	movs	r3, #0
 8014818:	9300      	str	r3, [sp, #0]
 801481a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801481e:	68e1      	ldr	r1, [r4, #12]
 8014820:	68a0      	ldr	r0, [r4, #8]
 8014822:	f00f ff87 	bl	8024734 <mg_match>
 8014826:	b140      	cbz	r0, 801483a <dashboard+0x3d2>
			logging(L_INFO, "Call API /api/firmware/apply");
 8014828:	4938      	ldr	r1, [pc, #224]	@ (801490c <dashboard+0x4a4>)
 801482a:	2001      	movs	r0, #1
 801482c:	f7fd fb62 	bl	8011ef4 <logging>
			handle_activete_and_reboot(c, hm);
 8014830:	4621      	mov	r1, r4
 8014832:	4628      	mov	r0, r5
 8014834:	f7ff fc8e 	bl	8014154 <handle_activete_and_reboot>
 8014838:	e633      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 801483a:	ae2c      	add	r6, sp, #176	@ 0xb0
 801483c:	4934      	ldr	r1, [pc, #208]	@ (8014910 <dashboard+0x4a8>)
 801483e:	4630      	mov	r0, r6
 8014840:	f00f fd56 	bl	80242f0 <mg_str_s>
 8014844:	2300      	movs	r3, #0
 8014846:	9300      	str	r3, [sp, #0]
 8014848:	e896 000c 	ldmia.w	r6, {r2, r3}
 801484c:	68e1      	ldr	r1, [r4, #12]
 801484e:	68a0      	ldr	r0, [r4, #8]
 8014850:	f00f ff70 	bl	8024734 <mg_match>
 8014854:	b120      	cbz	r0, 8014860 <dashboard+0x3f8>
			handle_firmware_deactivate(c, hm);
 8014856:	4621      	mov	r1, r4
 8014858:	4628      	mov	r0, r5
 801485a:	f7fe fae3 	bl	8012e24 <handle_firmware_deactivate>
 801485e:	e620      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8014860:	ae2e      	add	r6, sp, #184	@ 0xb8
 8014862:	492c      	ldr	r1, [pc, #176]	@ (8014914 <dashboard+0x4ac>)
 8014864:	4630      	mov	r0, r6
 8014866:	f00f fd43 	bl	80242f0 <mg_str_s>
 801486a:	2300      	movs	r3, #0
 801486c:	9300      	str	r3, [sp, #0]
 801486e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014872:	68e1      	ldr	r1, [r4, #12]
 8014874:	68a0      	ldr	r0, [r4, #8]
 8014876:	f00f ff5d 	bl	8024734 <mg_match>
 801487a:	b120      	cbz	r0, 8014886 <dashboard+0x41e>
			 handle_web_files_remove(c, hm);
 801487c:	4621      	mov	r1, r4
 801487e:	4628      	mov	r0, r5
 8014880:	f7fe fb0c 	bl	8012e9c <handle_web_files_remove>
 8014884:	e60d      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8014886:	ae30      	add	r6, sp, #192	@ 0xc0
 8014888:	4923      	ldr	r1, [pc, #140]	@ (8014918 <dashboard+0x4b0>)
 801488a:	4630      	mov	r0, r6
 801488c:	f00f fd30 	bl	80242f0 <mg_str_s>
 8014890:	2300      	movs	r3, #0
 8014892:	9300      	str	r3, [sp, #0]
 8014894:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014898:	68e1      	ldr	r1, [r4, #12]
 801489a:	68a0      	ldr	r0, [r4, #8]
 801489c:	f00f ff4a 	bl	8024734 <mg_match>
 80148a0:	b140      	cbz	r0, 80148b4 <dashboard+0x44c>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 80148a2:	4b1e      	ldr	r3, [pc, #120]	@ (801491c <dashboard+0x4b4>)
 80148a4:	9300      	str	r3, [sp, #0]
 80148a6:	4b1e      	ldr	r3, [pc, #120]	@ (8014920 <dashboard+0x4b8>)
 80148a8:	4a1e      	ldr	r2, [pc, #120]	@ (8014924 <dashboard+0x4bc>)
 80148aa:	4621      	mov	r1, r4
 80148ac:	4628      	mov	r0, r5
 80148ae:	f012 f9d3 	bl	8026c58 <mg_http_upload>
 80148b2:	e5f6      	b.n	80144a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 80148b4:	ae32      	add	r6, sp, #200	@ 0xc8
 80148b6:	491c      	ldr	r1, [pc, #112]	@ (8014928 <dashboard+0x4c0>)
 80148b8:	4630      	mov	r0, r6
 80148ba:	f00f fd19 	bl	80242f0 <mg_str_s>
 80148be:	2300      	movs	r3, #0
 80148c0:	9300      	str	r3, [sp, #0]
 80148c2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80148c6:	68e1      	ldr	r1, [r4, #12]
 80148c8:	68a0      	ldr	r0, [r4, #8]
 80148ca:	f00f ff33 	bl	8024734 <mg_match>
 80148ce:	b120      	cbz	r0, 80148da <dashboard+0x472>
			 handle_fs_mkdir(c, hm);
 80148d0:	4621      	mov	r1, r4
 80148d2:	4628      	mov	r0, r5
 80148d4:	f7ff fc7a 	bl	80141cc <handle_fs_mkdir>
 80148d8:	e5e3      	b.n	80144a2 <dashboard+0x3a>
			struct mg_http_serve_opts opts = {
 80148da:	2300      	movs	r3, #0
 80148dc:	9302      	str	r3, [sp, #8]
 80148de:	9303      	str	r3, [sp, #12]
 80148e0:	9304      	str	r3, [sp, #16]
 80148e2:	9305      	str	r3, [sp, #20]
 80148e4:	9306      	str	r3, [sp, #24]
 80148e6:	9307      	str	r3, [sp, #28]
 80148e8:	4b0d      	ldr	r3, [pc, #52]	@ (8014920 <dashboard+0x4b8>)
 80148ea:	9302      	str	r3, [sp, #8]
 80148ec:	4b0d      	ldr	r3, [pc, #52]	@ (8014924 <dashboard+0x4bc>)
 80148ee:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 80148f0:	aa02      	add	r2, sp, #8
 80148f2:	4621      	mov	r1, r4
 80148f4:	4628      	mov	r0, r5
 80148f6:	f012 f8c9 	bl	8026a8c <mg_http_serve_dir>
}
 80148fa:	e5d2      	b.n	80144a2 <dashboard+0x3a>
 80148fc:	08037b4c 	.word	0x08037b4c
 8014900:	08037b64 	.word	0x08037b64
 8014904:	08037b78 	.word	0x08037b78
 8014908:	08037b94 	.word	0x08037b94
 801490c:	08037ba8 	.word	0x08037ba8
 8014910:	08037bc8 	.word	0x08037bc8
 8014914:	08037be4 	.word	0x08037be4
 8014918:	08037c00 	.word	0x08037c00
 801491c:	0016e360 	.word	0x0016e360
 8014920:	08035fc8 	.word	0x08035fc8
 8014924:	200000a0 	.word	0x200000a0
 8014928:	08037c1c 	.word	0x08037c1c

0801492c <dash_hdl>:

void * dash_hdl (void){
 801492c:	b508      	push	{r3, lr}

	load_users(user_cred_file, web_users, user_list_size);
 801492e:	220a      	movs	r2, #10
 8014930:	4902      	ldr	r1, [pc, #8]	@ (801493c <dash_hdl+0x10>)
 8014932:	4803      	ldr	r0, [pc, #12]	@ (8014940 <dash_hdl+0x14>)
 8014934:	f7ff fbac 	bl	8014090 <load_users>

	return &dashboard;
}
 8014938:	4802      	ldr	r0, [pc, #8]	@ (8014944 <dash_hdl+0x18>)
 801493a:	bd08      	pop	{r3, pc}
 801493c:	200021b8 	.word	0x200021b8
 8014940:	0803601c 	.word	0x0803601c
 8014944:	08014469 	.word	0x08014469

08014948 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 8014948:	4b01      	ldr	r3, [pc, #4]	@ (8014950 <reg_parameter_handler+0x8>)
 801494a:	6018      	str	r0, [r3, #0]
}
 801494c:	4770      	bx	lr
 801494e:	bf00      	nop
 8014950:	20002854 	.word	0x20002854

08014954 <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 8014954:	4b1a      	ldr	r3, [pc, #104]	@ (80149c0 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	b103      	cbz	r3, 801495c <_ZL18mqtt_timer_handlerPv+0x8>
 801495a:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 801495c:	b530      	push	{r4, r5, lr}
 801495e:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 8014960:	4918      	ldr	r1, [pc, #96]	@ (80149c4 <_ZL18mqtt_timer_handlerPv+0x70>)
 8014962:	2001      	movs	r0, #1
 8014964:	f7fd fac6 	bl	8011ef4 <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 8014968:	4c17      	ldr	r4, [pc, #92]	@ (80149c8 <_ZL18mqtt_timer_handlerPv+0x74>)
 801496a:	2240      	movs	r2, #64	@ 0x40
 801496c:	2100      	movs	r1, #0
 801496e:	4620      	mov	r0, r4
 8014970:	f018 f82e 	bl	802c9d0 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8014974:	ad02      	add	r5, sp, #8
 8014976:	4b15      	ldr	r3, [pc, #84]	@ (80149cc <_ZL18mqtt_timer_handlerPv+0x78>)
 8014978:	6819      	ldr	r1, [r3, #0]
 801497a:	4628      	mov	r0, r5
 801497c:	f00f fcb8 	bl	80242f0 <mg_str_s>
 8014980:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014984:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 8014988:	4b11      	ldr	r3, [pc, #68]	@ (80149d0 <_ZL18mqtt_timer_handlerPv+0x7c>)
 801498a:	6819      	ldr	r1, [r3, #0]
 801498c:	4628      	mov	r0, r5
 801498e:	f00f fcaf 	bl	80242f0 <mg_str_s>
 8014992:	f104 0308 	add.w	r3, r4, #8
 8014996:	e895 0003 	ldmia.w	r5, {r0, r1}
 801499a:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 801499e:	233c      	movs	r3, #60	@ 0x3c
 80149a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 80149a2:	2300      	movs	r3, #0
 80149a4:	9300      	str	r3, [sp, #0]
 80149a6:	4b0b      	ldr	r3, [pc, #44]	@ (80149d4 <_ZL18mqtt_timer_handlerPv+0x80>)
 80149a8:	4622      	mov	r2, r4
 80149aa:	490b      	ldr	r1, [pc, #44]	@ (80149d8 <_ZL18mqtt_timer_handlerPv+0x84>)
 80149ac:	6809      	ldr	r1, [r1, #0]
 80149ae:	480b      	ldr	r0, [pc, #44]	@ (80149dc <_ZL18mqtt_timer_handlerPv+0x88>)
 80149b0:	6800      	ldr	r0, [r0, #0]
 80149b2:	f014 fa11 	bl	8028dd8 <mg_mqtt_connect>
 80149b6:	4b02      	ldr	r3, [pc, #8]	@ (80149c0 <_ZL18mqtt_timer_handlerPv+0x6c>)
 80149b8:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 80149ba:	b005      	add	sp, #20
 80149bc:	bd30      	pop	{r4, r5, pc}
 80149be:	bf00      	nop
 80149c0:	20002878 	.word	0x20002878
 80149c4:	08037c38 	.word	0x08037c38
 80149c8:	2000287c 	.word	0x2000287c
 80149cc:	200028d0 	.word	0x200028d0
 80149d0:	200028cc 	.word	0x200028cc
 80149d4:	08014fa9 	.word	0x08014fa9
 80149d8:	200028d4 	.word	0x200028d4
 80149dc:	200028c0 	.word	0x200028c0

080149e0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 80149e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e4:	b085      	sub	sp, #20
 80149e6:	4681      	mov	r9, r0
 80149e8:	4688      	mov	r8, r1
 80149ea:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 80149ec:	4c2a      	ldr	r4, [pc, #168]	@ (8014a98 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 80149ee:	f100 0308 	add.w	r3, r0, #8
 80149f2:	9300      	str	r3, [sp, #0]
 80149f4:	4b29      	ldr	r3, [pc, #164]	@ (8014a9c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 80149f6:	4a2a      	ldr	r2, [pc, #168]	@ (8014aa0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 80149f8:	2128      	movs	r1, #40	@ 0x28
 80149fa:	6820      	ldr	r0, [r4, #0]
 80149fc:	f00e fdf0 	bl	80235e0 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8014a00:	6824      	ldr	r4, [r4, #0]
 8014a02:	4620      	mov	r0, r4
 8014a04:	f7fb fc4c 	bl	80102a0 <strlen>
 8014a08:	4601      	mov	r1, r0
 8014a0a:	4620      	mov	r0, r4
 8014a0c:	f000 fc1c 	bl	8015248 <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 8014a10:	2600      	movs	r6, #0
 8014a12:	e03b      	b.n	8014a8c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 8014a14:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8014a18:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 8014a1c:	791d      	ldrb	r5, [r3, #4]
 8014a1e:	4f21      	ldr	r7, [pc, #132]	@ (8014aa4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 8014a20:	462b      	mov	r3, r5
 8014a22:	4622      	mov	r2, r4
 8014a24:	2180      	movs	r1, #128	@ 0x80
 8014a26:	6838      	ldr	r0, [r7, #0]
 8014a28:	f000 fc2c 	bl	8015284 <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8014a2c:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8014ab0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 8014a30:	462b      	mov	r3, r5
 8014a32:	4622      	mov	r2, r4
 8014a34:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014a38:	f8db 0000 	ldr.w	r0, [fp]
 8014a3c:	f000 fcd2 	bl	80153e4 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8014a40:	4d19      	ldr	r5, [pc, #100]	@ (8014aa8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 8014a42:	ac02      	add	r4, sp, #8
 8014a44:	6839      	ldr	r1, [r7, #0]
 8014a46:	4620      	mov	r0, r4
 8014a48:	f00f fc52 	bl	80242f0 <mg_str_s>
 8014a4c:	f105 0318 	add.w	r3, r5, #24
 8014a50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014a54:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8014a58:	f8db 1000 	ldr.w	r1, [fp]
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	f00f fc47 	bl	80242f0 <mg_str_s>
 8014a62:	f105 0320 	add.w	r3, r5, #32
 8014a66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014a6a:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8014a6e:	2401      	movs	r4, #1
 8014a70:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8014a74:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014a78:	4629      	mov	r1, r5
 8014a7a:	4648      	mov	r0, r9
 8014a7c:	f012 ff12 	bl	80278a4 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8014a80:	683a      	ldr	r2, [r7, #0]
 8014a82:	490a      	ldr	r1, [pc, #40]	@ (8014aac <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 8014a84:	4620      	mov	r0, r4
 8014a86:	f7fd fa35 	bl	8011ef4 <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8014a8a:	4426      	add	r6, r4
 8014a8c:	4556      	cmp	r6, sl
 8014a8e:	d3c1      	bcc.n	8014a14 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 8014a90:	b005      	add	sp, #20
 8014a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a96:	bf00      	nop
 8014a98:	20002874 	.word	0x20002874
 8014a9c:	08026071 	.word	0x08026071
 8014aa0:	08037244 	.word	0x08037244
 8014aa4:	200028c8 	.word	0x200028c8
 8014aa8:	2000287c 	.word	0x2000287c
 8014aac:	08037c58 	.word	0x08037c58
 8014ab0:	200028c4 	.word	0x200028c4

08014ab4 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014ab4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8014ab6:	fb01 f400 	mul.w	r4, r1, r0
 8014aba:	4620      	mov	r0, r4
 8014abc:	f005 ff54 	bl	801a968 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8014ac0:	4605      	mov	r5, r0
 8014ac2:	b118      	cbz	r0, 8014acc <_ZL9my_callocjj+0x18>
 8014ac4:	4622      	mov	r2, r4
 8014ac6:	2100      	movs	r1, #0
 8014ac8:	f017 ff82 	bl	802c9d0 <memset>
}
 8014acc:	4628      	mov	r0, r5
 8014ace:	bd38      	pop	{r3, r4, r5, pc}

08014ad0 <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8014ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ad4:	b087      	sub	sp, #28
 8014ad6:	4607      	mov	r7, r0
 8014ad8:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8014ada:	4d58      	ldr	r5, [pc, #352]	@ (8014c3c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 8014adc:	682b      	ldr	r3, [r5, #0]
 8014ade:	2200      	movs	r2, #0
 8014ae0:	2101      	movs	r1, #1
 8014ae2:	a804      	add	r0, sp, #16
 8014ae4:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014ae6:	682b      	ldr	r3, [r5, #0]
 8014ae8:	2200      	movs	r2, #0
 8014aea:	2102      	movs	r1, #2
 8014aec:	f10d 0013 	add.w	r0, sp, #19
 8014af0:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014af2:	2203      	movs	r2, #3
 8014af4:	4952      	ldr	r1, [pc, #328]	@ (8014c40 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014af6:	a804      	add	r0, sp, #16
 8014af8:	f017 fed6 	bl	802c8a8 <memcmp>
 8014afc:	b948      	cbnz	r0, 8014b12 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014afe:	2203      	movs	r2, #3
 8014b00:	4950      	ldr	r1, [pc, #320]	@ (8014c44 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 8014b02:	f10d 0013 	add.w	r0, sp, #19
 8014b06:	f017 fecf 	bl	802c8a8 <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014b0a:	b910      	cbnz	r0, 8014b12 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014b0c:	2c00      	cmp	r4, #0
 8014b0e:	f000 8091 	beq.w	8014c34 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 8014b12:	4b4b      	ldr	r3, [pc, #300]	@ (8014c40 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014b14:	aa06      	add	r2, sp, #24
 8014b16:	e912 0003 	ldmdb	r2, {r0, r1}
 8014b1a:	6018      	str	r0, [r3, #0]
 8014b1c:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8014b1e:	2101      	movs	r1, #1
 8014b20:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014b24:	f7ff ffc6 	bl	8014ab4 <_ZL9my_callocjj>
 8014b28:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014b2a:	2101      	movs	r1, #1
 8014b2c:	2080      	movs	r0, #128	@ 0x80
 8014b2e:	f7ff ffc1 	bl	8014ab4 <_ZL9my_callocjj>
 8014b32:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 8014b34:	2200      	movs	r2, #0
 8014b36:	e038      	b.n	8014baa <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8014b38:	f102 0801 	add.w	r8, r2, #1
 8014b3c:	fa5f f888 	uxtb.w	r8, r8
 8014b40:	f102 0318 	add.w	r3, r2, #24
 8014b44:	eb0d 0203 	add.w	r2, sp, r3
 8014b48:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8014b4c:	9300      	str	r3, [sp, #0]
 8014b4e:	4643      	mov	r3, r8
 8014b50:	2201      	movs	r2, #1
 8014b52:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014b56:	4630      	mov	r0, r6
 8014b58:	f000 fe38 	bl	80157cc <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8014b5c:	4643      	mov	r3, r8
 8014b5e:	2201      	movs	r2, #1
 8014b60:	2180      	movs	r1, #128	@ 0x80
 8014b62:	4628      	mov	r0, r5
 8014b64:	f000 fe72 	bl	801584c <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014b68:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8014c48 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014b6c:	ac02      	add	r4, sp, #8
 8014b6e:	4629      	mov	r1, r5
 8014b70:	4620      	mov	r0, r4
 8014b72:	f00f fbbd 	bl	80242f0 <mg_str_s>
 8014b76:	f109 0318 	add.w	r3, r9, #24
 8014b7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014b7e:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014b82:	4631      	mov	r1, r6
 8014b84:	4620      	mov	r0, r4
 8014b86:	f00f fbb3 	bl	80242f0 <mg_str_s>
 8014b8a:	f109 0320 	add.w	r3, r9, #32
 8014b8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014b92:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014b96:	2300      	movs	r3, #0
 8014b98:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014b9c:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014ba0:	4649      	mov	r1, r9
 8014ba2:	4638      	mov	r0, r7
 8014ba4:	f012 fe7e 	bl	80278a4 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8014ba8:	4642      	mov	r2, r8
 8014baa:	2a02      	cmp	r2, #2
 8014bac:	d9c4      	bls.n	8014b38 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014bae:	2200      	movs	r2, #0
 8014bb0:	e038      	b.n	8014c24 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8014bb2:	f102 0801 	add.w	r8, r2, #1
 8014bb6:	fa5f f888 	uxtb.w	r8, r8
 8014bba:	f102 0318 	add.w	r3, r2, #24
 8014bbe:	eb0d 0203 	add.w	r2, sp, r3
 8014bc2:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 8014bc6:	9300      	str	r3, [sp, #0]
 8014bc8:	4643      	mov	r3, r8
 8014bca:	2202      	movs	r2, #2
 8014bcc:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014bd0:	4630      	mov	r0, r6
 8014bd2:	f000 fdfb 	bl	80157cc <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8014bd6:	4643      	mov	r3, r8
 8014bd8:	2202      	movs	r2, #2
 8014bda:	2180      	movs	r1, #128	@ 0x80
 8014bdc:	4628      	mov	r0, r5
 8014bde:	f000 fe35 	bl	801584c <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014be2:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8014c48 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014be6:	ac02      	add	r4, sp, #8
 8014be8:	4629      	mov	r1, r5
 8014bea:	4620      	mov	r0, r4
 8014bec:	f00f fb80 	bl	80242f0 <mg_str_s>
 8014bf0:	f109 0318 	add.w	r3, r9, #24
 8014bf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014bf8:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014bfc:	4631      	mov	r1, r6
 8014bfe:	4620      	mov	r0, r4
 8014c00:	f00f fb76 	bl	80242f0 <mg_str_s>
 8014c04:	f109 0320 	add.w	r3, r9, #32
 8014c08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014c0c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014c10:	2300      	movs	r3, #0
 8014c12:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014c16:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014c1a:	4649      	mov	r1, r9
 8014c1c:	4638      	mov	r0, r7
 8014c1e:	f012 fe41 	bl	80278a4 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014c22:	4642      	mov	r2, r8
 8014c24:	2a02      	cmp	r2, #2
 8014c26:	d9c4      	bls.n	8014bb2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 8014c28:	4630      	mov	r0, r6
 8014c2a:	f005 ff1f 	bl	801aa6c <vPortFree>
		free(topik);
 8014c2e:	4628      	mov	r0, r5
 8014c30:	f005 ff1c 	bl	801aa6c <vPortFree>
}
 8014c34:	b007      	add	sp, #28
 8014c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c3a:	bf00      	nop
 8014c3c:	20002860 	.word	0x20002860
 8014c40:	20002858 	.word	0x20002858
 8014c44:	2000285b 	.word	0x2000285b
 8014c48:	2000287c 	.word	0x2000287c

08014c4c <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8014c4c:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 8014c4e:	4b05      	ldr	r3, [pc, #20]	@ (8014c64 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 8014c50:	6818      	ldr	r0, [r3, #0]
 8014c52:	b110      	cbz	r0, 8014c5a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014c54:	4b04      	ldr	r3, [pc, #16]	@ (8014c68 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 8014c56:	781b      	ldrb	r3, [r3, #0]
 8014c58:	b903      	cbnz	r3, 8014c5c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
		mqtt_send_io_status(mqtt_conn, 0);
	}
}
 8014c5a:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 8014c5c:	2100      	movs	r1, #0
 8014c5e:	f7ff ff37 	bl	8014ad0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014c62:	e7fa      	b.n	8014c5a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014c64:	20002878 	.word	0x20002878
 8014c68:	20002864 	.word	0x20002864

08014c6c <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8014c6c:	b508      	push	{r3, lr}
	if(is_registered){
 8014c6e:	4b05      	ldr	r3, [pc, #20]	@ (8014c84 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 8014c70:	781b      	ldrb	r3, [r3, #0]
 8014c72:	b903      	cbnz	r3, 8014c76 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 8014c74:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 8014c76:	2101      	movs	r1, #1
 8014c78:	4b03      	ldr	r3, [pc, #12]	@ (8014c88 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 8014c7a:	6818      	ldr	r0, [r3, #0]
 8014c7c:	f7ff ff28 	bl	8014ad0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014c80:	e7f8      	b.n	8014c74 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 8014c82:	bf00      	nop
 8014c84:	20002864 	.word	0x20002864
 8014c88:	20002878 	.word	0x20002878

08014c8c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 8014c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c90:	b083      	sub	sp, #12
 8014c92:	4681      	mov	r9, r0
 8014c94:	460d      	mov	r5, r1
 8014c96:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 8014c98:	2400      	movs	r4, #0
 8014c9a:	e000      	b.n	8014c9e <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 8014c9c:	3401      	adds	r4, #1
 8014c9e:	42b4      	cmp	r4, r6
 8014ca0:	d22e      	bcs.n	8014d00 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 8014ca2:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 8014ca6:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8014caa:	2b02      	cmp	r3, #2
 8014cac:	d1f6      	bne.n	8014c9c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014cae:	2101      	movs	r1, #1
 8014cb0:	2080      	movs	r0, #128	@ 0x80
 8014cb2:	f7ff feff 	bl	8014ab4 <_ZL9my_callocjj>
 8014cb6:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 8014cb8:	f898 3004 	ldrb.w	r3, [r8, #4]
 8014cbc:	2202      	movs	r2, #2
 8014cbe:	2180      	movs	r1, #128	@ 0x80
 8014cc0:	f000 fdac 	bl	801581c <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 8014cc4:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8014d0c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 8014cc8:	f04f 0b01 	mov.w	fp, #1
 8014ccc:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8014cd0:	46ea      	mov	sl, sp
 8014cd2:	4639      	mov	r1, r7
 8014cd4:	4650      	mov	r0, sl
 8014cd6:	f00f fb0b 	bl	80242f0 <mg_str_s>
 8014cda:	f108 0318 	add.w	r3, r8, #24
 8014cde:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8014ce2:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 8014ce6:	4641      	mov	r1, r8
 8014ce8:	4648      	mov	r0, r9
 8014cea:	f012 fd8d 	bl	8027808 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 8014cee:	463a      	mov	r2, r7
 8014cf0:	4905      	ldr	r1, [pc, #20]	@ (8014d08 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 8014cf2:	4658      	mov	r0, fp
 8014cf4:	f7fd f8fe 	bl	8011ef4 <logging>
			free(topik);
 8014cf8:	4638      	mov	r0, r7
 8014cfa:	f005 feb7 	bl	801aa6c <vPortFree>
 8014cfe:	e7cd      	b.n	8014c9c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 8014d00:	b003      	add	sp, #12
 8014d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d06:	bf00      	nop
 8014d08:	08037c7c 	.word	0x08037c7c
 8014d0c:	2000287c 	.word	0x2000287c

08014d10 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8014d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d14:	b085      	sub	sp, #20
	int relay_number = 0;  // Переменная для хранения номера реле
 8014d16:	2300      	movs	r3, #0
 8014d18:	9301      	str	r3, [sp, #4]
    const char *topic = mess->topic.buf;
 8014d1a:	6807      	ldr	r7, [r0, #0]
    const size_t topic_len = mess->topic.len;
 8014d1c:	6845      	ldr	r5, [r0, #4]
    const char *message = mess->data.buf;
 8014d1e:	6884      	ldr	r4, [r0, #8]
    const size_t message_len = mess->data.len;
 8014d20:	68c6      	ldr	r6, [r0, #12]
    if(message == NULL || topic == NULL){
 8014d22:	b1ac      	cbz	r4, 8014d50 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x40>
 8014d24:	b1a7      	cbz	r7, 8014d50 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x40>
    if (topic_len < 1 || message_len < 1){
 8014d26:	b105      	cbz	r5, 8014d2a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a>
 8014d28:	bb0e      	cbnz	r6, 8014d6e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x5e>
    	logging(L_ERR, "Subscrabed topik len or message len < 1");
 8014d2a:	498b      	ldr	r1, [pc, #556]	@ (8014f58 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x248>)
 8014d2c:	2003      	movs	r0, #3
 8014d2e:	f7fd f8e1 	bl	8011ef4 <logging>
    	MG_ERROR(("Subscrabed topik len or message len < 1 \n"));
 8014d32:	4b8a      	ldr	r3, [pc, #552]	@ (8014f5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	f340 80ff 	ble.w	8014f3a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22a>
 8014d3c:	4b88      	ldr	r3, [pc, #544]	@ (8014f60 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014d3e:	229a      	movs	r2, #154	@ 0x9a
 8014d40:	4988      	ldr	r1, [pc, #544]	@ (8014f64 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8014d42:	2001      	movs	r0, #1
 8014d44:	f011 fa48 	bl	80261d8 <mg_log_prefix>
 8014d48:	4887      	ldr	r0, [pc, #540]	@ (8014f68 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8014d4a:	f00f f8f3 	bl	8023f34 <mg_log>
    	return;
 8014d4e:	e0f4      	b.n	8014f3a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22a>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8014d50:	4b82      	ldr	r3, [pc, #520]	@ (8014f5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	f340 80f0 	ble.w	8014f3a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22a>
 8014d5a:	4b81      	ldr	r3, [pc, #516]	@ (8014f60 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014d5c:	2294      	movs	r2, #148	@ 0x94
 8014d5e:	4981      	ldr	r1, [pc, #516]	@ (8014f64 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8014d60:	2001      	movs	r0, #1
 8014d62:	f011 fa39 	bl	80261d8 <mg_log_prefix>
 8014d66:	4881      	ldr	r0, [pc, #516]	@ (8014f6c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x25c>)
 8014d68:	f00f f8e4 	bl	8023f34 <mg_log>
    	return;
 8014d6c:	e0e5      	b.n	8014f3a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22a>
    char * local_message = (char *)calloc (message_len + 1, sizeof (char));
 8014d6e:	2101      	movs	r1, #1
 8014d70:	1870      	adds	r0, r6, r1
 8014d72:	f7ff fe9f 	bl	8014ab4 <_ZL9my_callocjj>
 8014d76:	4681      	mov	r9, r0
    char * local_topic = (char *)calloc (topic_len + 1, sizeof(char));
 8014d78:	2101      	movs	r1, #1
 8014d7a:	1868      	adds	r0, r5, r1
 8014d7c:	f7ff fe9a 	bl	8014ab4 <_ZL9my_callocjj>
 8014d80:	4680      	mov	r8, r0
    strncpy(local_message, message, message_len);
 8014d82:	4632      	mov	r2, r6
 8014d84:	4621      	mov	r1, r4
 8014d86:	4648      	mov	r0, r9
 8014d88:	f017 fe69 	bl	802ca5e <strncpy>
    strncpy(local_topic, topic, topic_len);
 8014d8c:	462a      	mov	r2, r5
 8014d8e:	4639      	mov	r1, r7
 8014d90:	4640      	mov	r0, r8
 8014d92:	f017 fe64 	bl	802ca5e <strncpy>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014d96:	4b76      	ldr	r3, [pc, #472]	@ (8014f70 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	2102      	movs	r1, #2
 8014d9e:	a803      	add	r0, sp, #12
 8014da0:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 8014da2:	9b03      	ldr	r3, [sp, #12]
 8014da4:	f8ad 3008 	strh.w	r3, [sp, #8]
 8014da8:	0c1b      	lsrs	r3, r3, #16
 8014daa:	f88d 300a 	strb.w	r3, [sp, #10]
    const char *switch_position = strstr(local_topic, "switch");
 8014dae:	4971      	ldr	r1, [pc, #452]	@ (8014f74 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8014db0:	4640      	mov	r0, r8
 8014db2:	f017 fe8d 	bl	802cad0 <strstr>
    if (switch_position != NULL) {
 8014db6:	2800      	cmp	r0, #0
 8014db8:	f000 80b0 	beq.w	8014f1c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 8014dbc:	aa01      	add	r2, sp, #4
 8014dbe:	496e      	ldr	r1, [pc, #440]	@ (8014f78 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x268>)
 8014dc0:	f017 fa64 	bl	802c28c <sscanf>
 8014dc4:	2801      	cmp	r0, #1
 8014dc6:	d009      	beq.n	8014ddc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xcc>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8014dc8:	4b64      	ldr	r3, [pc, #400]	@ (8014f5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	f300 809b 	bgt.w	8014f08 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 8014dd2:	496a      	ldr	r1, [pc, #424]	@ (8014f7c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x26c>)
 8014dd4:	2003      	movs	r0, #3
 8014dd6:	f7fd f88d 	bl	8011ef4 <logging>
 8014dda:	e0a8      	b.n	8014f2e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21e>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, local_topic));
 8014ddc:	4b5f      	ldr	r3, [pc, #380]	@ (8014f5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	2b01      	cmp	r3, #1
 8014de2:	dc17      	bgt.n	8014e14 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x104>
    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, local_topic);
 8014de4:	4643      	mov	r3, r8
 8014de6:	9a01      	ldr	r2, [sp, #4]
 8014de8:	4965      	ldr	r1, [pc, #404]	@ (8014f80 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x270>)
 8014dea:	2001      	movs	r0, #1
 8014dec:	f7fd f882 	bl	8011ef4 <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 8014df0:	9c01      	ldr	r4, [sp, #4]
 8014df2:	1e63      	subs	r3, r4, #1
 8014df4:	2b02      	cmp	r3, #2
 8014df6:	d819      	bhi.n	8014e2c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x11c>
			if (message_len == 2 && strncmp(local_message, "ON", 2) == 0) {
 8014df8:	2e02      	cmp	r6, #2
 8014dfa:	d034      	beq.n	8014e66 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x156>
			} else if (message_len == 3 && strncmp(local_message, "OFF", 3) == 0) {
 8014dfc:	2e03      	cmp	r6, #3
 8014dfe:	d055      	beq.n	8014eac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x19c>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message));
 8014e00:	4b56      	ldr	r3, [pc, #344]	@ (8014f5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	dc74      	bgt.n	8014ef2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e2>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message);
 8014e08:	464a      	mov	r2, r9
 8014e0a:	495e      	ldr	r1, [pc, #376]	@ (8014f84 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x274>)
 8014e0c:	2003      	movs	r0, #3
 8014e0e:	f7fd f871 	bl	8011ef4 <logging>
 8014e12:	e08c      	b.n	8014f2e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21e>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, local_topic));
 8014e14:	4b52      	ldr	r3, [pc, #328]	@ (8014f60 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014e16:	22ad      	movs	r2, #173	@ 0xad
 8014e18:	4952      	ldr	r1, [pc, #328]	@ (8014f64 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8014e1a:	2002      	movs	r0, #2
 8014e1c:	f011 f9dc 	bl	80261d8 <mg_log_prefix>
 8014e20:	4642      	mov	r2, r8
 8014e22:	9901      	ldr	r1, [sp, #4]
 8014e24:	4858      	ldr	r0, [pc, #352]	@ (8014f88 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x278>)
 8014e26:	f00f f885 	bl	8023f34 <mg_log>
 8014e2a:	e7db      	b.n	8014de4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd4>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8014e2c:	4b4b      	ldr	r3, [pc, #300]	@ (8014f5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	dc0c      	bgt.n	8014e4e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x13e>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 8014e34:	9b01      	ldr	r3, [sp, #4]
 8014e36:	2203      	movs	r2, #3
 8014e38:	4954      	ldr	r1, [pc, #336]	@ (8014f8c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x27c>)
 8014e3a:	4610      	mov	r0, r2
 8014e3c:	f7fd f85a 	bl	8011ef4 <logging>
    		    free(local_message);
 8014e40:	4648      	mov	r0, r9
 8014e42:	f005 fe13 	bl	801aa6c <vPortFree>
    		    free(local_topic);
 8014e46:	4640      	mov	r0, r8
 8014e48:	f005 fe10 	bl	801aa6c <vPortFree>
    			return;
 8014e4c:	e075      	b.n	8014f3a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22a>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8014e4e:	4b44      	ldr	r3, [pc, #272]	@ (8014f60 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014e50:	22b2      	movs	r2, #178	@ 0xb2
 8014e52:	4944      	ldr	r1, [pc, #272]	@ (8014f64 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8014e54:	2001      	movs	r0, #1
 8014e56:	f011 f9bf 	bl	80261d8 <mg_log_prefix>
 8014e5a:	9a01      	ldr	r2, [sp, #4]
 8014e5c:	2103      	movs	r1, #3
 8014e5e:	484b      	ldr	r0, [pc, #300]	@ (8014f8c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x27c>)
 8014e60:	f00f f868 	bl	8023f34 <mg_log>
 8014e64:	e7e6      	b.n	8014e34 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x124>
			if (message_len == 2 && strncmp(local_message, "ON", 2) == 0) {
 8014e66:	2202      	movs	r2, #2
 8014e68:	4949      	ldr	r1, [pc, #292]	@ (8014f90 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x280>)
 8014e6a:	4648      	mov	r0, r9
 8014e6c:	f017 fde5 	bl	802ca3a <strncmp>
 8014e70:	2800      	cmp	r0, #0
 8014e72:	d1c3      	bne.n	8014dfc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xec>
				sw_w[relay_number-1] = 1;
 8014e74:	f104 030f 	add.w	r3, r4, #15
 8014e78:	446b      	add	r3, sp
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8014e80:	4b36      	ldr	r3, [pc, #216]	@ (8014f5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	4293      	cmp	r3, r2
 8014e86:	dc06      	bgt.n	8014e96 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x186>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8014e88:	4b39      	ldr	r3, [pc, #228]	@ (8014f70 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2201      	movs	r2, #1
 8014e8e:	2102      	movs	r1, #2
 8014e90:	a802      	add	r0, sp, #8
 8014e92:	4798      	blx	r3
 8014e94:	e04b      	b.n	8014f2e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21e>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8014e96:	4b32      	ldr	r3, [pc, #200]	@ (8014f60 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014e98:	22bf      	movs	r2, #191	@ 0xbf
 8014e9a:	4932      	ldr	r1, [pc, #200]	@ (8014f64 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8014e9c:	2002      	movs	r0, #2
 8014e9e:	f011 f99b 	bl	80261d8 <mg_log_prefix>
 8014ea2:	9901      	ldr	r1, [sp, #4]
 8014ea4:	483b      	ldr	r0, [pc, #236]	@ (8014f94 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x284>)
 8014ea6:	f00f f845 	bl	8023f34 <mg_log>
 8014eaa:	e7ed      	b.n	8014e88 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x178>
			} else if (message_len == 3 && strncmp(local_message, "OFF", 3) == 0) {
 8014eac:	2203      	movs	r2, #3
 8014eae:	493a      	ldr	r1, [pc, #232]	@ (8014f98 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x288>)
 8014eb0:	4648      	mov	r0, r9
 8014eb2:	f017 fdc2 	bl	802ca3a <strncmp>
 8014eb6:	2800      	cmp	r0, #0
 8014eb8:	d1a2      	bne.n	8014e00 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf0>
				sw_w[relay_number-1] = 0;
 8014eba:	f104 030f 	add.w	r3, r4, #15
 8014ebe:	446b      	add	r3, sp
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8014ec6:	4b25      	ldr	r3, [pc, #148]	@ (8014f5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	2b01      	cmp	r3, #1
 8014ecc:	dc06      	bgt.n	8014edc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1cc>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8014ece:	4b28      	ldr	r3, [pc, #160]	@ (8014f70 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	2201      	movs	r2, #1
 8014ed4:	2102      	movs	r1, #2
 8014ed6:	a802      	add	r0, sp, #8
 8014ed8:	4798      	blx	r3
 8014eda:	e028      	b.n	8014f2e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21e>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8014edc:	4b20      	ldr	r3, [pc, #128]	@ (8014f60 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014ede:	22c3      	movs	r2, #195	@ 0xc3
 8014ee0:	4920      	ldr	r1, [pc, #128]	@ (8014f64 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8014ee2:	2002      	movs	r0, #2
 8014ee4:	f011 f978 	bl	80261d8 <mg_log_prefix>
 8014ee8:	9901      	ldr	r1, [sp, #4]
 8014eea:	482c      	ldr	r0, [pc, #176]	@ (8014f9c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x28c>)
 8014eec:	f00f f822 	bl	8023f34 <mg_log>
 8014ef0:	e7ed      	b.n	8014ece <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message));
 8014ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8014f60 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014ef4:	22c7      	movs	r2, #199	@ 0xc7
 8014ef6:	491b      	ldr	r1, [pc, #108]	@ (8014f64 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8014ef8:	2001      	movs	r0, #1
 8014efa:	f011 f96d 	bl	80261d8 <mg_log_prefix>
 8014efe:	4649      	mov	r1, r9
 8014f00:	4820      	ldr	r0, [pc, #128]	@ (8014f84 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x274>)
 8014f02:	f00f f817 	bl	8023f34 <mg_log>
 8014f06:	e77f      	b.n	8014e08 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf8>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8014f08:	4b15      	ldr	r3, [pc, #84]	@ (8014f60 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014f0a:	22cc      	movs	r2, #204	@ 0xcc
 8014f0c:	4915      	ldr	r1, [pc, #84]	@ (8014f64 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8014f0e:	2001      	movs	r0, #1
 8014f10:	f011 f962 	bl	80261d8 <mg_log_prefix>
 8014f14:	4822      	ldr	r0, [pc, #136]	@ (8014fa0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x290>)
 8014f16:	f00f f80d 	bl	8023f34 <mg_log>
 8014f1a:	e75a      	b.n	8014dd2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc2>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", local_topic));
 8014f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8014f5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	dc0d      	bgt.n	8014f40 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", local_topic);
 8014f24:	4642      	mov	r2, r8
 8014f26:	491f      	ldr	r1, [pc, #124]	@ (8014fa4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x294>)
 8014f28:	2003      	movs	r0, #3
 8014f2a:	f7fc ffe3 	bl	8011ef4 <logging>
    free(local_message);
 8014f2e:	4648      	mov	r0, r9
 8014f30:	f005 fd9c 	bl	801aa6c <vPortFree>
    free(local_topic);
 8014f34:	4640      	mov	r0, r8
 8014f36:	f005 fd99 	bl	801aa6c <vPortFree>
}
 8014f3a:	b005      	add	sp, #20
 8014f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", local_topic));
 8014f40:	4b07      	ldr	r3, [pc, #28]	@ (8014f60 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014f42:	22d0      	movs	r2, #208	@ 0xd0
 8014f44:	4907      	ldr	r1, [pc, #28]	@ (8014f64 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8014f46:	2001      	movs	r0, #1
 8014f48:	f011 f946 	bl	80261d8 <mg_log_prefix>
 8014f4c:	4641      	mov	r1, r8
 8014f4e:	4815      	ldr	r0, [pc, #84]	@ (8014fa4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x294>)
 8014f50:	f00e fff0 	bl	8023f34 <mg_log>
 8014f54:	e7e6      	b.n	8014f24 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x214>
 8014f56:	bf00      	nop
 8014f58:	08037d08 	.word	0x08037d08
 8014f5c:	2000012c 	.word	0x2000012c
 8014f60:	08037c98 	.word	0x08037c98
 8014f64:	08037cb8 	.word	0x08037cb8
 8014f68:	08037d30 	.word	0x08037d30
 8014f6c:	08037ce4 	.word	0x08037ce4
 8014f70:	20002860 	.word	0x20002860
 8014f74:	08037d5c 	.word	0x08037d5c
 8014f78:	08037d64 	.word	0x08037d64
 8014f7c:	08037eb8 	.word	0x08037eb8
 8014f80:	08037d9c 	.word	0x08037d9c
 8014f84:	08037e44 	.word	0x08037e44
 8014f88:	08037d70 	.word	0x08037d70
 8014f8c:	08037dc4 	.word	0x08037dc4
 8014f90:	08037e14 	.word	0x08037e14
 8014f94:	08037e18 	.word	0x08037e18
 8014f98:	08037e2c 	.word	0x08037e2c
 8014f9c:	08037e30 	.word	0x08037e30
 8014fa0:	08037e80 	.word	0x08037e80
 8014fa4:	08037ef0 	.word	0x08037ef0

08014fa8 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 8014fa8:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 8014faa:	2910      	cmp	r1, #16
 8014fac:	d031      	beq.n	8015012 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x6a>
 8014fae:	4605      	mov	r5, r0
 8014fb0:	2911      	cmp	r1, #17
 8014fb2:	d002      	beq.n	8014fba <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x12>
 8014fb4:	2909      	cmp	r1, #9
 8014fb6:	d03a      	beq.n	801502e <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x86>
}
 8014fb8:	bd70      	pop	{r4, r5, r6, pc}
		MG_DEBUG(("MQTT_open_connection"));
 8014fba:	4b22      	ldr	r3, [pc, #136]	@ (8015044 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2b02      	cmp	r3, #2
 8014fc0:	dc1d      	bgt.n	8014ffe <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x56>
		logging(L_INFO, "MQTT Open connection");
 8014fc2:	4921      	ldr	r1, [pc, #132]	@ (8015048 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 8014fc4:	2001      	movs	r0, #1
 8014fc6:	f7fc ff95 	bl	8011ef4 <logging>
		mqtt_conn = conn;
 8014fca:	4b20      	ldr	r3, [pc, #128]	@ (801504c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014fcc:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 8014fce:	4b20      	ldr	r3, [pc, #128]	@ (8015050 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014fd0:	781b      	ldrb	r3, [r3, #0]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d1f0      	bne.n	8014fb8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8014fd6:	4e1f      	ldr	r6, [pc, #124]	@ (8015054 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 8014fd8:	2206      	movs	r2, #6
 8014fda:	4631      	mov	r1, r6
 8014fdc:	4628      	mov	r0, r5
 8014fde:	f7ff fcff 	bl	80149e0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 8014fe2:	4c1a      	ldr	r4, [pc, #104]	@ (801504c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014fe4:	2101      	movs	r1, #1
 8014fe6:	6820      	ldr	r0, [r4, #0]
 8014fe8:	f7ff fd72 	bl	8014ad0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8014fec:	2206      	movs	r2, #6
 8014fee:	4631      	mov	r1, r6
 8014ff0:	6820      	ldr	r0, [r4, #0]
 8014ff2:	f7ff fe4b 	bl	8014c8c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8014ff6:	4b16      	ldr	r3, [pc, #88]	@ (8015050 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014ff8:	2201      	movs	r2, #1
 8014ffa:	701a      	strb	r2, [r3, #0]
 8014ffc:	e7dc      	b.n	8014fb8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		MG_DEBUG(("MQTT_open_connection"));
 8014ffe:	4b16      	ldr	r3, [pc, #88]	@ (8015058 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 8015000:	22e1      	movs	r2, #225	@ 0xe1
 8015002:	4916      	ldr	r1, [pc, #88]	@ (801505c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 8015004:	2003      	movs	r0, #3
 8015006:	f011 f8e7 	bl	80261d8 <mg_log_prefix>
 801500a:	4815      	ldr	r0, [pc, #84]	@ (8015060 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 801500c:	f00e ff92 	bl	8023f34 <mg_log>
 8015010:	e7d7      	b.n	8014fc2 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x1a>
 8015012:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 8015014:	4913      	ldr	r1, [pc, #76]	@ (8015064 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 8015016:	2001      	movs	r0, #1
 8015018:	f7fc ff6c 	bl	8011ef4 <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 801501c:	4620      	mov	r0, r4
 801501e:	f7ff fe77 	bl	8014d10 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8015022:	2100      	movs	r1, #0
 8015024:	4b09      	ldr	r3, [pc, #36]	@ (801504c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8015026:	6818      	ldr	r0, [r3, #0]
 8015028:	f7ff fd52 	bl	8014ad0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
 801502c:	e7c4      	b.n	8014fb8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		logging(L_INFO, "MQTT Close connection");
 801502e:	490e      	ldr	r1, [pc, #56]	@ (8015068 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 8015030:	2001      	movs	r0, #1
 8015032:	f7fc ff5f 	bl	8011ef4 <logging>
		mqtt_conn     = NULL;
 8015036:	2300      	movs	r3, #0
 8015038:	4a04      	ldr	r2, [pc, #16]	@ (801504c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 801503a:	6013      	str	r3, [r2, #0]
		is_registered = false;
 801503c:	4a04      	ldr	r2, [pc, #16]	@ (8015050 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 801503e:	7013      	strb	r3, [r2, #0]
}
 8015040:	e7ba      	b.n	8014fb8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
 8015042:	bf00      	nop
 8015044:	2000012c 	.word	0x2000012c
 8015048:	08037f4c 	.word	0x08037f4c
 801504c:	20002878 	.word	0x20002878
 8015050:	20002864 	.word	0x20002864
 8015054:	200000c8 	.word	0x200000c8
 8015058:	08037f20 	.word	0x08037f20
 801505c:	08037cb8 	.word	0x08037cb8
 8015060:	08037f34 	.word	0x08037f34
 8015064:	08037f64 	.word	0x08037f64
 8015068:	08037f88 	.word	0x08037f88

0801506c <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 801506c:	4b01      	ldr	r3, [pc, #4]	@ (8015074 <get_mqtt_connection+0x8>)
 801506e:	6818      	ldr	r0, [r3, #0]
 8015070:	4770      	bx	lr
 8015072:	bf00      	nop
 8015074:	20002878 	.word	0x20002878

08015078 <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 8015078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801507c:	b086      	sub	sp, #24
 801507e:	4606      	mov	r6, r0
 8015080:	460c      	mov	r4, r1
 8015082:	4691      	mov	r9, r2
 8015084:	461d      	mov	r5, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 8015086:	2101      	movs	r1, #1
 8015088:	2080      	movs	r0, #128	@ 0x80
 801508a:	f7ff fd13 	bl	8014ab4 <_ZL9my_callocjj>
 801508e:	f8df a148 	ldr.w	sl, [pc, #328]	@ 80151d8 <mqtt_init+0x160>
 8015092:	f8ca 0000 	str.w	r0, [sl]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 8015096:	2101      	movs	r1, #1
 8015098:	2021      	movs	r0, #33	@ 0x21
 801509a:	f7ff fd0b 	bl	8014ab4 <_ZL9my_callocjj>
 801509e:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 80151dc <mqtt_init+0x164>
 80150a2:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 80150a6:	2101      	movs	r1, #1
 80150a8:	2021      	movs	r0, #33	@ 0x21
 80150aa:	f7ff fd03 	bl	8014ab4 <_ZL9my_callocjj>
 80150ae:	4f3b      	ldr	r7, [pc, #236]	@ (801519c <mqtt_init+0x124>)
 80150b0:	6038      	str	r0, [r7, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80150b2:	2101      	movs	r1, #1
 80150b4:	2080      	movs	r0, #128	@ 0x80
 80150b6:	f7ff fcfd 	bl	8014ab4 <_ZL9my_callocjj>
 80150ba:	4b39      	ldr	r3, [pc, #228]	@ (80151a0 <mqtt_init+0x128>)
 80150bc:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 80150be:	2101      	movs	r1, #1
 80150c0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80150c4:	f7ff fcf6 	bl	8014ab4 <_ZL9my_callocjj>
 80150c8:	4b36      	ldr	r3, [pc, #216]	@ (80151a4 <mqtt_init+0x12c>)
 80150ca:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 80150cc:	2101      	movs	r1, #1
 80150ce:	2028      	movs	r0, #40	@ 0x28
 80150d0:	f7ff fcf0 	bl	8014ab4 <_ZL9my_callocjj>
 80150d4:	4b34      	ldr	r3, [pc, #208]	@ (80151a8 <mqtt_init+0x130>)
 80150d6:	6018      	str	r0, [r3, #0]
	r_w_parameter   = fn;
 80150d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80150da:	4b34      	ldr	r3, [pc, #208]	@ (80151ac <mqtt_init+0x134>)
 80150dc:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 80150de:	f8da a000 	ldr.w	sl, [sl]
 80150e2:	4649      	mov	r1, r9
 80150e4:	4650      	mov	r0, sl
 80150e6:	f018 fe7d 	bl	802dde4 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 80150ea:	f8d8 9000 	ldr.w	r9, [r8]
 80150ee:	4629      	mov	r1, r5
 80150f0:	4648      	mov	r0, r9
 80150f2:	f018 fe77 	bl	802dde4 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 80150f6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80150f8:	6838      	ldr	r0, [r7, #0]
 80150fa:	f018 fe73 	bl	802dde4 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 80150fe:	464b      	mov	r3, r9
 8015100:	4652      	mov	r2, sl
 8015102:	492b      	ldr	r1, [pc, #172]	@ (80151b0 <mqtt_init+0x138>)
 8015104:	2001      	movs	r0, #1
 8015106:	f7fc fef5 	bl	8011ef4 <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 801510a:	4d2a      	ldr	r5, [pc, #168]	@ (80151b4 <mqtt_init+0x13c>)
 801510c:	602e      	str	r6, [r5, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 801510e:	4b2a      	ldr	r3, [pc, #168]	@ (80151b8 <mqtt_init+0x140>)
 8015110:	601c      	str	r4, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 8015112:	2106      	movs	r1, #6
 8015114:	4620      	mov	r0, r4
 8015116:	f000 f871 	bl	80151fc <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 801511a:	4e28      	ldr	r6, [pc, #160]	@ (80151bc <mqtt_init+0x144>)
 801511c:	ac04      	add	r4, sp, #16
 801511e:	f8d8 1000 	ldr.w	r1, [r8]
 8015122:	4620      	mov	r0, r4
 8015124:	f00f f8e4 	bl	80242f0 <mg_str_s>
 8015128:	e894 0003 	ldmia.w	r4, {r0, r1}
 801512c:	e886 0003 	stmia.w	r6, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 8015130:	6839      	ldr	r1, [r7, #0]
 8015132:	4620      	mov	r0, r4
 8015134:	f00f f8dc 	bl	80242f0 <mg_str_s>
 8015138:	f106 0308 	add.w	r3, r6, #8
 801513c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015140:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 8015144:	233c      	movs	r3, #60	@ 0x3c
 8015146:	8573      	strh	r3, [r6, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 8015148:	2400      	movs	r4, #0
 801514a:	9402      	str	r4, [sp, #8]
 801514c:	4b1c      	ldr	r3, [pc, #112]	@ (80151c0 <mqtt_init+0x148>)
 801514e:	9301      	str	r3, [sp, #4]
 8015150:	2303      	movs	r3, #3
 8015152:	9300      	str	r3, [sp, #0]
 8015154:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015158:	2300      	movs	r3, #0
 801515a:	6828      	ldr	r0, [r5, #0]
 801515c:	f010 faaa 	bl	80256b4 <mg_timer_add>
 8015160:	4b18      	ldr	r3, [pc, #96]	@ (80151c4 <mqtt_init+0x14c>)
 8015162:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 8015164:	9402      	str	r4, [sp, #8]
 8015166:	4b18      	ldr	r3, [pc, #96]	@ (80151c8 <mqtt_init+0x150>)
 8015168:	9301      	str	r3, [sp, #4]
 801516a:	2601      	movs	r6, #1
 801516c:	9600      	str	r6, [sp, #0]
 801516e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8015172:	2300      	movs	r3, #0
 8015174:	6828      	ldr	r0, [r5, #0]
 8015176:	f010 fa9d 	bl	80256b4 <mg_timer_add>
 801517a:	4b14      	ldr	r3, [pc, #80]	@ (80151cc <mqtt_init+0x154>)
 801517c:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 801517e:	9402      	str	r4, [sp, #8]
 8015180:	4b13      	ldr	r3, [pc, #76]	@ (80151d0 <mqtt_init+0x158>)
 8015182:	9301      	str	r3, [sp, #4]
 8015184:	9600      	str	r6, [sp, #0]
 8015186:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801518a:	2300      	movs	r3, #0
 801518c:	6828      	ldr	r0, [r5, #0]
 801518e:	f010 fa91 	bl	80256b4 <mg_timer_add>
 8015192:	4b10      	ldr	r3, [pc, #64]	@ (80151d4 <mqtt_init+0x15c>)
 8015194:	6018      	str	r0, [r3, #0]

}
 8015196:	b006      	add	sp, #24
 8015198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801519c:	200028cc 	.word	0x200028cc
 80151a0:	200028c8 	.word	0x200028c8
 80151a4:	200028c4 	.word	0x200028c4
 80151a8:	20002874 	.word	0x20002874
 80151ac:	20002860 	.word	0x20002860
 80151b0:	08037fa0 	.word	0x08037fa0
 80151b4:	200028c0 	.word	0x200028c0
 80151b8:	200028bc 	.word	0x200028bc
 80151bc:	2000287c 	.word	0x2000287c
 80151c0:	08014955 	.word	0x08014955
 80151c4:	20002870 	.word	0x20002870
 80151c8:	08014c6d 	.word	0x08014c6d
 80151cc:	2000286c 	.word	0x2000286c
 80151d0:	08014c4d 	.word	0x08014c4d
 80151d4:	20002868 	.word	0x20002868
 80151d8:	200028d4 	.word	0x200028d4
 80151dc:	200028d0 	.word	0x200028d0

080151e0 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 80151e0:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80151e2:	fb01 f400 	mul.w	r4, r1, r0
 80151e6:	4620      	mov	r0, r4
 80151e8:	f005 fbbe 	bl	801a968 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80151ec:	4605      	mov	r5, r0
 80151ee:	b118      	cbz	r0, 80151f8 <_ZL9my_callocjj+0x18>
 80151f0:	4622      	mov	r2, r4
 80151f2:	2100      	movs	r1, #0
 80151f4:	f017 fbec 	bl	802c9d0 <memset>
}
 80151f8:	4628      	mov	r0, r5
 80151fa:	bd38      	pop	{r3, r4, r5, pc}

080151fc <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 80151fc:	b570      	push	{r4, r5, r6, lr}
 80151fe:	4606      	mov	r6, r0
 8015200:	460d      	mov	r5, r1

	if ( unical_id){
 8015202:	4b0f      	ldr	r3, [pc, #60]	@ (8015240 <set_device_id+0x44>)
 8015204:	6818      	ldr	r0, [r3, #0]
 8015206:	b108      	cbz	r0, 801520c <set_device_id+0x10>
		free(unical_id);
 8015208:	f005 fc30 	bl	801aa6c <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 801520c:	0068      	lsls	r0, r5, #1
 801520e:	2101      	movs	r1, #1
 8015210:	4408      	add	r0, r1
 8015212:	f7ff ffe5 	bl	80151e0 <_ZL9my_callocjj>
 8015216:	4b0a      	ldr	r3, [pc, #40]	@ (8015240 <set_device_id+0x44>)
 8015218:	6018      	str	r0, [r3, #0]


	if (unical_id){
 801521a:	b108      	cbz	r0, 8015220 <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 801521c:	2400      	movs	r4, #0
 801521e:	e00b      	b.n	8015238 <set_device_id+0x3c>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8015220:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015224:	e00b      	b.n	801523e <set_device_id+0x42>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 8015226:	4b06      	ldr	r3, [pc, #24]	@ (8015240 <set_device_id+0x44>)
 8015228:	6818      	ldr	r0, [r3, #0]
 801522a:	5d32      	ldrb	r2, [r6, r4]
 801522c:	4905      	ldr	r1, [pc, #20]	@ (8015244 <set_device_id+0x48>)
 801522e:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8015232:	f017 f80b 	bl	802c24c <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 8015236:	3401      	adds	r4, #1
 8015238:	42ac      	cmp	r4, r5
 801523a:	d3f4      	bcc.n	8015226 <set_device_id+0x2a>
	}

	return NO_ERR; // Успешно
 801523c:	2000      	movs	r0, #0
}
 801523e:	bd70      	pop	{r4, r5, r6, pc}
 8015240:	200028dc 	.word	0x200028dc
 8015244:	08037fcc 	.word	0x08037fcc

08015248 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 8015248:	b538      	push	{r3, r4, r5, lr}
 801524a:	4605      	mov	r5, r0
 801524c:	460c      	mov	r4, r1

	if(dev_conf_ip){
 801524e:	4b0c      	ldr	r3, [pc, #48]	@ (8015280 <set_device_conf_ip+0x38>)
 8015250:	6818      	ldr	r0, [r3, #0]
 8015252:	b108      	cbz	r0, 8015258 <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 8015254:	f005 fc0a 	bl	801aa6c <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 8015258:	2101      	movs	r1, #1
 801525a:	1860      	adds	r0, r4, r1
 801525c:	f7ff ffc0 	bl	80151e0 <_ZL9my_callocjj>
 8015260:	4b07      	ldr	r3, [pc, #28]	@ (8015280 <set_device_conf_ip+0x38>)
 8015262:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 8015264:	b140      	cbz	r0, 8015278 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 8015266:	4622      	mov	r2, r4
 8015268:	4629      	mov	r1, r5
 801526a:	f017 fbf8 	bl	802ca5e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 801526e:	4b04      	ldr	r3, [pc, #16]	@ (8015280 <set_device_conf_ip+0x38>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	2000      	movs	r0, #0
 8015274:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 8015276:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8015278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801527c:	e7fb      	b.n	8015276 <set_device_conf_ip+0x2e>
 801527e:	bf00      	nop
 8015280:	200028d8 	.word	0x200028d8

08015284 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 8015284:	b500      	push	{lr}
 8015286:	b087      	sub	sp, #28

	strcpy(buff, "");
 8015288:	f04f 0c00 	mov.w	ip, #0
 801528c:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8015290:	3a01      	subs	r2, #1
 8015292:	2a07      	cmp	r2, #7
 8015294:	f200 8087 	bhi.w	80153a6 <get_config_topik_string+0x122>
 8015298:	e8df f002 	tbb	[pc, r2]
 801529c:	45251604 	.word	0x45251604
 80152a0:	55756535 	.word	0x55756535
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 80152a4:	9304      	str	r3, [sp, #16]
 80152a6:	4b41      	ldr	r3, [pc, #260]	@ (80153ac <get_config_topik_string+0x128>)
 80152a8:	9303      	str	r3, [sp, #12]
 80152aa:	4b41      	ldr	r3, [pc, #260]	@ (80153b0 <get_config_topik_string+0x12c>)
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	9302      	str	r3, [sp, #8]
 80152b0:	4b40      	ldr	r3, [pc, #256]	@ (80153b4 <get_config_topik_string+0x130>)
 80152b2:	9301      	str	r3, [sp, #4]
 80152b4:	4b40      	ldr	r3, [pc, #256]	@ (80153b8 <get_config_topik_string+0x134>)
 80152b6:	9300      	str	r3, [sp, #0]
 80152b8:	4b40      	ldr	r3, [pc, #256]	@ (80153bc <get_config_topik_string+0x138>)
 80152ba:	4a41      	ldr	r2, [pc, #260]	@ (80153c0 <get_config_topik_string+0x13c>)
 80152bc:	f016 fe5e 	bl	802bf7c <snprintf>
			return -1;
			break;
	}


	return 0;
 80152c0:	2000      	movs	r0, #0
}
 80152c2:	b007      	add	sp, #28
 80152c4:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 80152c8:	9304      	str	r3, [sp, #16]
 80152ca:	4b3e      	ldr	r3, [pc, #248]	@ (80153c4 <get_config_topik_string+0x140>)
 80152cc:	9303      	str	r3, [sp, #12]
 80152ce:	4a38      	ldr	r2, [pc, #224]	@ (80153b0 <get_config_topik_string+0x12c>)
 80152d0:	6812      	ldr	r2, [r2, #0]
 80152d2:	9202      	str	r2, [sp, #8]
 80152d4:	4a37      	ldr	r2, [pc, #220]	@ (80153b4 <get_config_topik_string+0x130>)
 80152d6:	9201      	str	r2, [sp, #4]
 80152d8:	9300      	str	r3, [sp, #0]
 80152da:	4b38      	ldr	r3, [pc, #224]	@ (80153bc <get_config_topik_string+0x138>)
 80152dc:	4a38      	ldr	r2, [pc, #224]	@ (80153c0 <get_config_topik_string+0x13c>)
 80152de:	f016 fe4d 	bl	802bf7c <snprintf>
	return 0;
 80152e2:	2000      	movs	r0, #0
			break;
 80152e4:	e7ed      	b.n	80152c2 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 80152e6:	9304      	str	r3, [sp, #16]
 80152e8:	4b37      	ldr	r3, [pc, #220]	@ (80153c8 <get_config_topik_string+0x144>)
 80152ea:	9303      	str	r3, [sp, #12]
 80152ec:	4b30      	ldr	r3, [pc, #192]	@ (80153b0 <get_config_topik_string+0x12c>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	9302      	str	r3, [sp, #8]
 80152f2:	4b30      	ldr	r3, [pc, #192]	@ (80153b4 <get_config_topik_string+0x130>)
 80152f4:	9301      	str	r3, [sp, #4]
 80152f6:	4b35      	ldr	r3, [pc, #212]	@ (80153cc <get_config_topik_string+0x148>)
 80152f8:	9300      	str	r3, [sp, #0]
 80152fa:	4b30      	ldr	r3, [pc, #192]	@ (80153bc <get_config_topik_string+0x138>)
 80152fc:	4a30      	ldr	r2, [pc, #192]	@ (80153c0 <get_config_topik_string+0x13c>)
 80152fe:	f016 fe3d 	bl	802bf7c <snprintf>
	return 0;
 8015302:	2000      	movs	r0, #0
			break;
 8015304:	e7dd      	b.n	80152c2 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8015306:	9304      	str	r3, [sp, #16]
 8015308:	4b31      	ldr	r3, [pc, #196]	@ (80153d0 <get_config_topik_string+0x14c>)
 801530a:	9303      	str	r3, [sp, #12]
 801530c:	4b28      	ldr	r3, [pc, #160]	@ (80153b0 <get_config_topik_string+0x12c>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	9302      	str	r3, [sp, #8]
 8015312:	4b28      	ldr	r3, [pc, #160]	@ (80153b4 <get_config_topik_string+0x130>)
 8015314:	9301      	str	r3, [sp, #4]
 8015316:	4b2d      	ldr	r3, [pc, #180]	@ (80153cc <get_config_topik_string+0x148>)
 8015318:	9300      	str	r3, [sp, #0]
 801531a:	4b28      	ldr	r3, [pc, #160]	@ (80153bc <get_config_topik_string+0x138>)
 801531c:	4a28      	ldr	r2, [pc, #160]	@ (80153c0 <get_config_topik_string+0x13c>)
 801531e:	f016 fe2d 	bl	802bf7c <snprintf>
	return 0;
 8015322:	2000      	movs	r0, #0
			break;
 8015324:	e7cd      	b.n	80152c2 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8015326:	9304      	str	r3, [sp, #16]
 8015328:	4b2a      	ldr	r3, [pc, #168]	@ (80153d4 <get_config_topik_string+0x150>)
 801532a:	9303      	str	r3, [sp, #12]
 801532c:	4b20      	ldr	r3, [pc, #128]	@ (80153b0 <get_config_topik_string+0x12c>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	9302      	str	r3, [sp, #8]
 8015332:	4b20      	ldr	r3, [pc, #128]	@ (80153b4 <get_config_topik_string+0x130>)
 8015334:	9301      	str	r3, [sp, #4]
 8015336:	4b25      	ldr	r3, [pc, #148]	@ (80153cc <get_config_topik_string+0x148>)
 8015338:	9300      	str	r3, [sp, #0]
 801533a:	4b20      	ldr	r3, [pc, #128]	@ (80153bc <get_config_topik_string+0x138>)
 801533c:	4a20      	ldr	r2, [pc, #128]	@ (80153c0 <get_config_topik_string+0x13c>)
 801533e:	f016 fe1d 	bl	802bf7c <snprintf>
	return 0;
 8015342:	2000      	movs	r0, #0
			break;
 8015344:	e7bd      	b.n	80152c2 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 8015346:	9304      	str	r3, [sp, #16]
 8015348:	4b23      	ldr	r3, [pc, #140]	@ (80153d8 <get_config_topik_string+0x154>)
 801534a:	9303      	str	r3, [sp, #12]
 801534c:	4b18      	ldr	r3, [pc, #96]	@ (80153b0 <get_config_topik_string+0x12c>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	9302      	str	r3, [sp, #8]
 8015352:	4b18      	ldr	r3, [pc, #96]	@ (80153b4 <get_config_topik_string+0x130>)
 8015354:	9301      	str	r3, [sp, #4]
 8015356:	4b1d      	ldr	r3, [pc, #116]	@ (80153cc <get_config_topik_string+0x148>)
 8015358:	9300      	str	r3, [sp, #0]
 801535a:	4b18      	ldr	r3, [pc, #96]	@ (80153bc <get_config_topik_string+0x138>)
 801535c:	4a18      	ldr	r2, [pc, #96]	@ (80153c0 <get_config_topik_string+0x13c>)
 801535e:	f016 fe0d 	bl	802bf7c <snprintf>
	return 0;
 8015362:	2000      	movs	r0, #0
			break;
 8015364:	e7ad      	b.n	80152c2 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 8015366:	9304      	str	r3, [sp, #16]
 8015368:	4b1c      	ldr	r3, [pc, #112]	@ (80153dc <get_config_topik_string+0x158>)
 801536a:	9303      	str	r3, [sp, #12]
 801536c:	4b10      	ldr	r3, [pc, #64]	@ (80153b0 <get_config_topik_string+0x12c>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	9302      	str	r3, [sp, #8]
 8015372:	4b10      	ldr	r3, [pc, #64]	@ (80153b4 <get_config_topik_string+0x130>)
 8015374:	9301      	str	r3, [sp, #4]
 8015376:	4b15      	ldr	r3, [pc, #84]	@ (80153cc <get_config_topik_string+0x148>)
 8015378:	9300      	str	r3, [sp, #0]
 801537a:	4b10      	ldr	r3, [pc, #64]	@ (80153bc <get_config_topik_string+0x138>)
 801537c:	4a10      	ldr	r2, [pc, #64]	@ (80153c0 <get_config_topik_string+0x13c>)
 801537e:	f016 fdfd 	bl	802bf7c <snprintf>
	return 0;
 8015382:	2000      	movs	r0, #0
			break;
 8015384:	e79d      	b.n	80152c2 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 8015386:	9304      	str	r3, [sp, #16]
 8015388:	4b15      	ldr	r3, [pc, #84]	@ (80153e0 <get_config_topik_string+0x15c>)
 801538a:	9303      	str	r3, [sp, #12]
 801538c:	4b08      	ldr	r3, [pc, #32]	@ (80153b0 <get_config_topik_string+0x12c>)
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	9302      	str	r3, [sp, #8]
 8015392:	4b08      	ldr	r3, [pc, #32]	@ (80153b4 <get_config_topik_string+0x130>)
 8015394:	9301      	str	r3, [sp, #4]
 8015396:	4b0d      	ldr	r3, [pc, #52]	@ (80153cc <get_config_topik_string+0x148>)
 8015398:	9300      	str	r3, [sp, #0]
 801539a:	4b08      	ldr	r3, [pc, #32]	@ (80153bc <get_config_topik_string+0x138>)
 801539c:	4a08      	ldr	r2, [pc, #32]	@ (80153c0 <get_config_topik_string+0x13c>)
 801539e:	f016 fded 	bl	802bf7c <snprintf>
	return 0;
 80153a2:	2000      	movs	r0, #0
			break;
 80153a4:	e78d      	b.n	80152c2 <get_config_topik_string+0x3e>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 80153a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80153aa:	e78a      	b.n	80152c2 <get_config_topik_string+0x3e>
 80153ac:	08037fec 	.word	0x08037fec
 80153b0:	200028dc 	.word	0x200028dc
 80153b4:	08036744 	.word	0x08036744
 80153b8:	08037ff4 	.word	0x08037ff4
 80153bc:	200000f8 	.word	0x200000f8
 80153c0:	08037fd4 	.word	0x08037fd4
 80153c4:	08037d5c 	.word	0x08037d5c
 80153c8:	08038004 	.word	0x08038004
 80153cc:	0803800c 	.word	0x0803800c
 80153d0:	08038014 	.word	0x08038014
 80153d4:	0803801c 	.word	0x0803801c
 80153d8:	08038024 	.word	0x08038024
 80153dc:	08038034 	.word	0x08038034
 80153e0:	08038044 	.word	0x08038044

080153e4 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 80153e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153e8:	b099      	sub	sp, #100	@ 0x64
 80153ea:	9017      	str	r0, [sp, #92]	@ 0x5c
 80153ec:	460d      	mov	r5, r1
 80153ee:	4617      	mov	r7, r2
 80153f0:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 80153f2:	460a      	mov	r2, r1
 80153f4:	2100      	movs	r1, #0
 80153f6:	f017 faeb 	bl	802c9d0 <memset>

	switch (payload_type) {
 80153fa:	1e7a      	subs	r2, r7, #1
 80153fc:	2a07      	cmp	r2, #7
 80153fe:	f200 81ba 	bhi.w	8015776 <get_config_payload_string+0x392>
 8015402:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015406:	0008      	.short	0x0008
 8015408:	00a10043 	.word	0x00a10043
 801540c:	00c500ea 	.word	0x00c500ea
 8015410:	0193016e 	.word	0x0193016e
 8015414:	0149      	.short	0x0149

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8015416:	2101      	movs	r1, #1
 8015418:	2080      	movs	r0, #128	@ 0x80
 801541a:	f7ff fee1 	bl	80151e0 <_ZL9my_callocjj>
 801541e:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8015420:	9400      	str	r4, [sp, #0]
 8015422:	4b80      	ldr	r3, [pc, #512]	@ (8015624 <get_config_payload_string+0x240>)
 8015424:	4a80      	ldr	r2, [pc, #512]	@ (8015628 <get_config_payload_string+0x244>)
 8015426:	2180      	movs	r1, #128	@ 0x80
 8015428:	f016 fda8 	bl	802bf7c <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 801542c:	4b7f      	ldr	r3, [pc, #508]	@ (801562c <get_config_payload_string+0x248>)
 801542e:	681a      	ldr	r2, [r3, #0]
 8015430:	4b7f      	ldr	r3, [pc, #508]	@ (8015630 <get_config_payload_string+0x24c>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	9314      	str	r3, [sp, #80]	@ 0x50
 8015436:	4b7f      	ldr	r3, [pc, #508]	@ (8015634 <get_config_payload_string+0x250>)
 8015438:	9313      	str	r3, [sp, #76]	@ 0x4c
 801543a:	4b7f      	ldr	r3, [pc, #508]	@ (8015638 <get_config_payload_string+0x254>)
 801543c:	9312      	str	r3, [sp, #72]	@ 0x48
 801543e:	4b7f      	ldr	r3, [pc, #508]	@ (801563c <get_config_payload_string+0x258>)
 8015440:	9311      	str	r3, [sp, #68]	@ 0x44
 8015442:	4b7f      	ldr	r3, [pc, #508]	@ (8015640 <get_config_payload_string+0x25c>)
 8015444:	9310      	str	r3, [sp, #64]	@ 0x40
 8015446:	4b7f      	ldr	r3, [pc, #508]	@ (8015644 <get_config_payload_string+0x260>)
 8015448:	930f      	str	r3, [sp, #60]	@ 0x3c
 801544a:	920e      	str	r2, [sp, #56]	@ 0x38
 801544c:	4b7e      	ldr	r3, [pc, #504]	@ (8015648 <get_config_payload_string+0x264>)
 801544e:	930d      	str	r3, [sp, #52]	@ 0x34
 8015450:	497e      	ldr	r1, [pc, #504]	@ (801564c <get_config_payload_string+0x268>)
 8015452:	910c      	str	r1, [sp, #48]	@ 0x30
 8015454:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015456:	497e      	ldr	r1, [pc, #504]	@ (8015650 <get_config_payload_string+0x26c>)
 8015458:	910a      	str	r1, [sp, #40]	@ 0x28
 801545a:	9209      	str	r2, [sp, #36]	@ 0x24
 801545c:	9308      	str	r3, [sp, #32]
 801545e:	9707      	str	r7, [sp, #28]
 8015460:	487c      	ldr	r0, [pc, #496]	@ (8015654 <get_config_payload_string+0x270>)
 8015462:	9006      	str	r0, [sp, #24]
 8015464:	9405      	str	r4, [sp, #20]
 8015466:	9104      	str	r1, [sp, #16]
 8015468:	9403      	str	r4, [sp, #12]
 801546a:	9102      	str	r1, [sp, #8]
 801546c:	9201      	str	r2, [sp, #4]
 801546e:	9300      	str	r3, [sp, #0]
 8015470:	4b79      	ldr	r3, [pc, #484]	@ (8015658 <get_config_payload_string+0x274>)
 8015472:	4a7a      	ldr	r2, [pc, #488]	@ (801565c <get_config_payload_string+0x278>)
 8015474:	4629      	mov	r1, r5
 8015476:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015478:	f016 fd80 	bl	802bf7c <snprintf>
 801547c:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 801547e:	4638      	mov	r0, r7
 8015480:	f005 faf4 	bl	801aa6c <vPortFree>

			return len;
 8015484:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 8015486:	b019      	add	sp, #100	@ 0x64
 8015488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 801548c:	2101      	movs	r1, #1
 801548e:	2080      	movs	r0, #128	@ 0x80
 8015490:	f7ff fea6 	bl	80151e0 <_ZL9my_callocjj>
 8015494:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8015496:	2101      	movs	r1, #1
 8015498:	2080      	movs	r0, #128	@ 0x80
 801549a:	f7ff fea1 	bl	80151e0 <_ZL9my_callocjj>
 801549e:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 80154a0:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 8015694 <get_config_payload_string+0x2b0>
 80154a4:	9400      	str	r4, [sp, #0]
 80154a6:	464b      	mov	r3, r9
 80154a8:	4a6d      	ldr	r2, [pc, #436]	@ (8015660 <get_config_payload_string+0x27c>)
 80154aa:	2180      	movs	r1, #128	@ 0x80
 80154ac:	4638      	mov	r0, r7
 80154ae:	f016 fd65 	bl	802bf7c <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 80154b2:	f8df a194 	ldr.w	sl, [pc, #404]	@ 8015648 <get_config_payload_string+0x264>
 80154b6:	4e65      	ldr	r6, [pc, #404]	@ (801564c <get_config_payload_string+0x268>)
 80154b8:	9602      	str	r6, [sp, #8]
 80154ba:	9701      	str	r7, [sp, #4]
 80154bc:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801562c <get_config_payload_string+0x248>
 80154c0:	f8db 3000 	ldr.w	r3, [fp]
 80154c4:	9300      	str	r3, [sp, #0]
 80154c6:	4653      	mov	r3, sl
 80154c8:	4a66      	ldr	r2, [pc, #408]	@ (8015664 <get_config_payload_string+0x280>)
 80154ca:	2180      	movs	r1, #128	@ 0x80
 80154cc:	4640      	mov	r0, r8
 80154ce:	f016 fd55 	bl	802bf7c <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 80154d2:	9400      	str	r4, [sp, #0]
 80154d4:	4b64      	ldr	r3, [pc, #400]	@ (8015668 <get_config_payload_string+0x284>)
 80154d6:	4a54      	ldr	r2, [pc, #336]	@ (8015628 <get_config_payload_string+0x244>)
 80154d8:	2180      	movs	r1, #128	@ 0x80
 80154da:	4638      	mov	r0, r7
 80154dc:	f016 fd4e 	bl	802bf7c <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 80154e0:	f8db 3000 	ldr.w	r3, [fp]
 80154e4:	4a52      	ldr	r2, [pc, #328]	@ (8015630 <get_config_payload_string+0x24c>)
 80154e6:	6812      	ldr	r2, [r2, #0]
 80154e8:	9214      	str	r2, [sp, #80]	@ 0x50
 80154ea:	4a52      	ldr	r2, [pc, #328]	@ (8015634 <get_config_payload_string+0x250>)
 80154ec:	9213      	str	r2, [sp, #76]	@ 0x4c
 80154ee:	4a52      	ldr	r2, [pc, #328]	@ (8015638 <get_config_payload_string+0x254>)
 80154f0:	9212      	str	r2, [sp, #72]	@ 0x48
 80154f2:	4a52      	ldr	r2, [pc, #328]	@ (801563c <get_config_payload_string+0x258>)
 80154f4:	9211      	str	r2, [sp, #68]	@ 0x44
 80154f6:	4a52      	ldr	r2, [pc, #328]	@ (8015640 <get_config_payload_string+0x25c>)
 80154f8:	9210      	str	r2, [sp, #64]	@ 0x40
 80154fa:	4a52      	ldr	r2, [pc, #328]	@ (8015644 <get_config_payload_string+0x260>)
 80154fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80154fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8015500:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8015504:	960c      	str	r6, [sp, #48]	@ 0x30
 8015506:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015508:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801550c:	9309      	str	r3, [sp, #36]	@ 0x24
 801550e:	f8cd a020 	str.w	sl, [sp, #32]
 8015512:	9707      	str	r7, [sp, #28]
 8015514:	f8cd 8018 	str.w	r8, [sp, #24]
 8015518:	9405      	str	r4, [sp, #20]
 801551a:	f8cd 9010 	str.w	r9, [sp, #16]
 801551e:	9403      	str	r4, [sp, #12]
 8015520:	f8cd 9008 	str.w	r9, [sp, #8]
 8015524:	9301      	str	r3, [sp, #4]
 8015526:	f8cd a000 	str.w	sl, [sp]
 801552a:	464b      	mov	r3, r9
 801552c:	4a4b      	ldr	r2, [pc, #300]	@ (801565c <get_config_payload_string+0x278>)
 801552e:	4629      	mov	r1, r5
 8015530:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015532:	f016 fd23 	bl	802bf7c <snprintf>
 8015536:	4604      	mov	r4, r0
			free(name);
 8015538:	4638      	mov	r0, r7
 801553a:	f005 fa97 	bl	801aa6c <vPortFree>
			free(com_topik);
 801553e:	4640      	mov	r0, r8
 8015540:	f005 fa94 	bl	801aa6c <vPortFree>
			return len;
 8015544:	b2e0      	uxtb	r0, r4
 8015546:	e79e      	b.n	8015486 <get_config_payload_string+0xa2>
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8015548:	4b38      	ldr	r3, [pc, #224]	@ (801562c <get_config_payload_string+0x248>)
 801554a:	6819      	ldr	r1, [r3, #0]
 801554c:	4b3e      	ldr	r3, [pc, #248]	@ (8015648 <get_config_payload_string+0x264>)
 801554e:	4a47      	ldr	r2, [pc, #284]	@ (801566c <get_config_payload_string+0x288>)
 8015550:	4837      	ldr	r0, [pc, #220]	@ (8015630 <get_config_payload_string+0x24c>)
 8015552:	6800      	ldr	r0, [r0, #0]
 8015554:	9010      	str	r0, [sp, #64]	@ 0x40
 8015556:	4837      	ldr	r0, [pc, #220]	@ (8015634 <get_config_payload_string+0x250>)
 8015558:	900f      	str	r0, [sp, #60]	@ 0x3c
 801555a:	4837      	ldr	r0, [pc, #220]	@ (8015638 <get_config_payload_string+0x254>)
 801555c:	900e      	str	r0, [sp, #56]	@ 0x38
 801555e:	4837      	ldr	r0, [pc, #220]	@ (801563c <get_config_payload_string+0x258>)
 8015560:	900d      	str	r0, [sp, #52]	@ 0x34
 8015562:	4837      	ldr	r0, [pc, #220]	@ (8015640 <get_config_payload_string+0x25c>)
 8015564:	900c      	str	r0, [sp, #48]	@ 0x30
 8015566:	4837      	ldr	r0, [pc, #220]	@ (8015644 <get_config_payload_string+0x260>)
 8015568:	900b      	str	r0, [sp, #44]	@ 0x2c
 801556a:	910a      	str	r1, [sp, #40]	@ 0x28
 801556c:	9309      	str	r3, [sp, #36]	@ 0x24
 801556e:	4840      	ldr	r0, [pc, #256]	@ (8015670 <get_config_payload_string+0x28c>)
 8015570:	9008      	str	r0, [sp, #32]
 8015572:	9207      	str	r2, [sp, #28]
 8015574:	9106      	str	r1, [sp, #24]
 8015576:	9305      	str	r3, [sp, #20]
 8015578:	483e      	ldr	r0, [pc, #248]	@ (8015674 <get_config_payload_string+0x290>)
 801557a:	9004      	str	r0, [sp, #16]
 801557c:	483e      	ldr	r0, [pc, #248]	@ (8015678 <get_config_payload_string+0x294>)
 801557e:	9003      	str	r0, [sp, #12]
 8015580:	9202      	str	r2, [sp, #8]
 8015582:	483e      	ldr	r0, [pc, #248]	@ (801567c <get_config_payload_string+0x298>)
 8015584:	9001      	str	r0, [sp, #4]
 8015586:	9100      	str	r1, [sp, #0]
 8015588:	4934      	ldr	r1, [pc, #208]	@ (801565c <get_config_payload_string+0x278>)
 801558a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801558c:	f016 fe5e 	bl	802c24c <sprintf>
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8015590:	4b26      	ldr	r3, [pc, #152]	@ (801562c <get_config_payload_string+0x248>)
 8015592:	6819      	ldr	r1, [r3, #0]
 8015594:	4b2c      	ldr	r3, [pc, #176]	@ (8015648 <get_config_payload_string+0x264>)
 8015596:	4a3a      	ldr	r2, [pc, #232]	@ (8015680 <get_config_payload_string+0x29c>)
 8015598:	4825      	ldr	r0, [pc, #148]	@ (8015630 <get_config_payload_string+0x24c>)
 801559a:	6800      	ldr	r0, [r0, #0]
 801559c:	9010      	str	r0, [sp, #64]	@ 0x40
 801559e:	4825      	ldr	r0, [pc, #148]	@ (8015634 <get_config_payload_string+0x250>)
 80155a0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80155a2:	4825      	ldr	r0, [pc, #148]	@ (8015638 <get_config_payload_string+0x254>)
 80155a4:	900e      	str	r0, [sp, #56]	@ 0x38
 80155a6:	4825      	ldr	r0, [pc, #148]	@ (801563c <get_config_payload_string+0x258>)
 80155a8:	900d      	str	r0, [sp, #52]	@ 0x34
 80155aa:	4825      	ldr	r0, [pc, #148]	@ (8015640 <get_config_payload_string+0x25c>)
 80155ac:	900c      	str	r0, [sp, #48]	@ 0x30
 80155ae:	4825      	ldr	r0, [pc, #148]	@ (8015644 <get_config_payload_string+0x260>)
 80155b0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80155b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80155b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80155b6:	4833      	ldr	r0, [pc, #204]	@ (8015684 <get_config_payload_string+0x2a0>)
 80155b8:	9008      	str	r0, [sp, #32]
 80155ba:	9207      	str	r2, [sp, #28]
 80155bc:	9106      	str	r1, [sp, #24]
 80155be:	9305      	str	r3, [sp, #20]
 80155c0:	4831      	ldr	r0, [pc, #196]	@ (8015688 <get_config_payload_string+0x2a4>)
 80155c2:	9004      	str	r0, [sp, #16]
 80155c4:	4823      	ldr	r0, [pc, #140]	@ (8015654 <get_config_payload_string+0x270>)
 80155c6:	9003      	str	r0, [sp, #12]
 80155c8:	9202      	str	r2, [sp, #8]
 80155ca:	482c      	ldr	r0, [pc, #176]	@ (801567c <get_config_payload_string+0x298>)
 80155cc:	9001      	str	r0, [sp, #4]
 80155ce:	9100      	str	r1, [sp, #0]
 80155d0:	4922      	ldr	r1, [pc, #136]	@ (801565c <get_config_payload_string+0x278>)
 80155d2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80155d4:	f016 fe3a 	bl	802c24c <sprintf>
			break;
 80155d8:	e7da      	b.n	8015590 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 80155da:	4b14      	ldr	r3, [pc, #80]	@ (801562c <get_config_payload_string+0x248>)
 80155dc:	6819      	ldr	r1, [r3, #0]
 80155de:	4b1a      	ldr	r3, [pc, #104]	@ (8015648 <get_config_payload_string+0x264>)
 80155e0:	4a1d      	ldr	r2, [pc, #116]	@ (8015658 <get_config_payload_string+0x274>)
 80155e2:	4813      	ldr	r0, [pc, #76]	@ (8015630 <get_config_payload_string+0x24c>)
 80155e4:	6800      	ldr	r0, [r0, #0]
 80155e6:	9010      	str	r0, [sp, #64]	@ 0x40
 80155e8:	4812      	ldr	r0, [pc, #72]	@ (8015634 <get_config_payload_string+0x250>)
 80155ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80155ec:	4812      	ldr	r0, [pc, #72]	@ (8015638 <get_config_payload_string+0x254>)
 80155ee:	900e      	str	r0, [sp, #56]	@ 0x38
 80155f0:	4812      	ldr	r0, [pc, #72]	@ (801563c <get_config_payload_string+0x258>)
 80155f2:	900d      	str	r0, [sp, #52]	@ 0x34
 80155f4:	4812      	ldr	r0, [pc, #72]	@ (8015640 <get_config_payload_string+0x25c>)
 80155f6:	900c      	str	r0, [sp, #48]	@ 0x30
 80155f8:	4812      	ldr	r0, [pc, #72]	@ (8015644 <get_config_payload_string+0x260>)
 80155fa:	900b      	str	r0, [sp, #44]	@ 0x2c
 80155fc:	910a      	str	r1, [sp, #40]	@ 0x28
 80155fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8015600:	4822      	ldr	r0, [pc, #136]	@ (801568c <get_config_payload_string+0x2a8>)
 8015602:	9008      	str	r0, [sp, #32]
 8015604:	9207      	str	r2, [sp, #28]
 8015606:	9106      	str	r1, [sp, #24]
 8015608:	9305      	str	r3, [sp, #20]
 801560a:	4821      	ldr	r0, [pc, #132]	@ (8015690 <get_config_payload_string+0x2ac>)
 801560c:	9004      	str	r0, [sp, #16]
 801560e:	4811      	ldr	r0, [pc, #68]	@ (8015654 <get_config_payload_string+0x270>)
 8015610:	9003      	str	r0, [sp, #12]
 8015612:	9202      	str	r2, [sp, #8]
 8015614:	4819      	ldr	r0, [pc, #100]	@ (801567c <get_config_payload_string+0x298>)
 8015616:	9001      	str	r0, [sp, #4]
 8015618:	9100      	str	r1, [sp, #0]
 801561a:	4910      	ldr	r1, [pc, #64]	@ (801565c <get_config_payload_string+0x278>)
 801561c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801561e:	f016 fe15 	bl	802c24c <sprintf>
			break;
 8015622:	e7b5      	b.n	8015590 <get_config_payload_string+0x1ac>
 8015624:	0803804c 	.word	0x0803804c
 8015628:	08038058 	.word	0x08038058
 801562c:	200028dc 	.word	0x200028dc
 8015630:	200028d8 	.word	0x200028d8
 8015634:	08036664 	.word	0x08036664
 8015638:	08036660 	.word	0x08036660
 801563c:	08038060 	.word	0x08038060
 8015640:	08036724 	.word	0x08036724
 8015644:	08036738 	.word	0x08036738
 8015648:	08036744 	.word	0x08036744
 801564c:	08036c70 	.word	0x08036c70
 8015650:	08037fec 	.word	0x08037fec
 8015654:	0803a4bc 	.word	0x0803a4bc
 8015658:	0803801c 	.word	0x0803801c
 801565c:	080381c8 	.word	0x080381c8
 8015660:	08038070 	.word	0x08038070
 8015664:	080381a0 	.word	0x080381a0
 8015668:	08038078 	.word	0x08038078
 801566c:	08038004 	.word	0x08038004
 8015670:	0803808c 	.word	0x0803808c
 8015674:	08038090 	.word	0x08038090
 8015678:	080380a0 	.word	0x080380a0
 801567c:	080380c4 	.word	0x080380c4
 8015680:	08038014 	.word	0x08038014
 8015684:	080380cc 	.word	0x080380cc
 8015688:	080380d0 	.word	0x080380d0
 801568c:	080380e0 	.word	0x080380e0
 8015690:	080380e4 	.word	0x080380e4
 8015694:	08037d5c 	.word	0x08037d5c
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8015698:	4b38      	ldr	r3, [pc, #224]	@ (801577c <get_config_payload_string+0x398>)
 801569a:	6819      	ldr	r1, [r3, #0]
 801569c:	4b38      	ldr	r3, [pc, #224]	@ (8015780 <get_config_payload_string+0x39c>)
 801569e:	4a39      	ldr	r2, [pc, #228]	@ (8015784 <get_config_payload_string+0x3a0>)
 80156a0:	4839      	ldr	r0, [pc, #228]	@ (8015788 <get_config_payload_string+0x3a4>)
 80156a2:	6800      	ldr	r0, [r0, #0]
 80156a4:	9010      	str	r0, [sp, #64]	@ 0x40
 80156a6:	4839      	ldr	r0, [pc, #228]	@ (801578c <get_config_payload_string+0x3a8>)
 80156a8:	900f      	str	r0, [sp, #60]	@ 0x3c
 80156aa:	4839      	ldr	r0, [pc, #228]	@ (8015790 <get_config_payload_string+0x3ac>)
 80156ac:	900e      	str	r0, [sp, #56]	@ 0x38
 80156ae:	4839      	ldr	r0, [pc, #228]	@ (8015794 <get_config_payload_string+0x3b0>)
 80156b0:	900d      	str	r0, [sp, #52]	@ 0x34
 80156b2:	4839      	ldr	r0, [pc, #228]	@ (8015798 <get_config_payload_string+0x3b4>)
 80156b4:	900c      	str	r0, [sp, #48]	@ 0x30
 80156b6:	4839      	ldr	r0, [pc, #228]	@ (801579c <get_config_payload_string+0x3b8>)
 80156b8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80156ba:	910a      	str	r1, [sp, #40]	@ 0x28
 80156bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80156be:	4838      	ldr	r0, [pc, #224]	@ (80157a0 <get_config_payload_string+0x3bc>)
 80156c0:	9008      	str	r0, [sp, #32]
 80156c2:	9207      	str	r2, [sp, #28]
 80156c4:	9106      	str	r1, [sp, #24]
 80156c6:	9305      	str	r3, [sp, #20]
 80156c8:	4836      	ldr	r0, [pc, #216]	@ (80157a4 <get_config_payload_string+0x3c0>)
 80156ca:	9004      	str	r0, [sp, #16]
 80156cc:	4836      	ldr	r0, [pc, #216]	@ (80157a8 <get_config_payload_string+0x3c4>)
 80156ce:	9003      	str	r0, [sp, #12]
 80156d0:	9202      	str	r2, [sp, #8]
 80156d2:	4836      	ldr	r0, [pc, #216]	@ (80157ac <get_config_payload_string+0x3c8>)
 80156d4:	9001      	str	r0, [sp, #4]
 80156d6:	9100      	str	r1, [sp, #0]
 80156d8:	4935      	ldr	r1, [pc, #212]	@ (80157b0 <get_config_payload_string+0x3cc>)
 80156da:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80156dc:	f016 fdb6 	bl	802c24c <sprintf>
			break;
 80156e0:	e756      	b.n	8015590 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 80156e2:	4b26      	ldr	r3, [pc, #152]	@ (801577c <get_config_payload_string+0x398>)
 80156e4:	6819      	ldr	r1, [r3, #0]
 80156e6:	4b26      	ldr	r3, [pc, #152]	@ (8015780 <get_config_payload_string+0x39c>)
 80156e8:	4a32      	ldr	r2, [pc, #200]	@ (80157b4 <get_config_payload_string+0x3d0>)
 80156ea:	4827      	ldr	r0, [pc, #156]	@ (8015788 <get_config_payload_string+0x3a4>)
 80156ec:	6800      	ldr	r0, [r0, #0]
 80156ee:	9010      	str	r0, [sp, #64]	@ 0x40
 80156f0:	4826      	ldr	r0, [pc, #152]	@ (801578c <get_config_payload_string+0x3a8>)
 80156f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80156f4:	4826      	ldr	r0, [pc, #152]	@ (8015790 <get_config_payload_string+0x3ac>)
 80156f6:	900e      	str	r0, [sp, #56]	@ 0x38
 80156f8:	4826      	ldr	r0, [pc, #152]	@ (8015794 <get_config_payload_string+0x3b0>)
 80156fa:	900d      	str	r0, [sp, #52]	@ 0x34
 80156fc:	4826      	ldr	r0, [pc, #152]	@ (8015798 <get_config_payload_string+0x3b4>)
 80156fe:	900c      	str	r0, [sp, #48]	@ 0x30
 8015700:	4826      	ldr	r0, [pc, #152]	@ (801579c <get_config_payload_string+0x3b8>)
 8015702:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015704:	910a      	str	r1, [sp, #40]	@ 0x28
 8015706:	9309      	str	r3, [sp, #36]	@ 0x24
 8015708:	482b      	ldr	r0, [pc, #172]	@ (80157b8 <get_config_payload_string+0x3d4>)
 801570a:	9008      	str	r0, [sp, #32]
 801570c:	9207      	str	r2, [sp, #28]
 801570e:	9106      	str	r1, [sp, #24]
 8015710:	9305      	str	r3, [sp, #20]
 8015712:	482a      	ldr	r0, [pc, #168]	@ (80157bc <get_config_payload_string+0x3d8>)
 8015714:	9004      	str	r0, [sp, #16]
 8015716:	4824      	ldr	r0, [pc, #144]	@ (80157a8 <get_config_payload_string+0x3c4>)
 8015718:	9003      	str	r0, [sp, #12]
 801571a:	9202      	str	r2, [sp, #8]
 801571c:	4823      	ldr	r0, [pc, #140]	@ (80157ac <get_config_payload_string+0x3c8>)
 801571e:	9001      	str	r0, [sp, #4]
 8015720:	9100      	str	r1, [sp, #0]
 8015722:	4923      	ldr	r1, [pc, #140]	@ (80157b0 <get_config_payload_string+0x3cc>)
 8015724:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015726:	f016 fd91 	bl	802c24c <sprintf>
			break;
 801572a:	e731      	b.n	8015590 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 801572c:	4b13      	ldr	r3, [pc, #76]	@ (801577c <get_config_payload_string+0x398>)
 801572e:	6819      	ldr	r1, [r3, #0]
 8015730:	4b13      	ldr	r3, [pc, #76]	@ (8015780 <get_config_payload_string+0x39c>)
 8015732:	4a23      	ldr	r2, [pc, #140]	@ (80157c0 <get_config_payload_string+0x3dc>)
 8015734:	4814      	ldr	r0, [pc, #80]	@ (8015788 <get_config_payload_string+0x3a4>)
 8015736:	6800      	ldr	r0, [r0, #0]
 8015738:	9010      	str	r0, [sp, #64]	@ 0x40
 801573a:	4814      	ldr	r0, [pc, #80]	@ (801578c <get_config_payload_string+0x3a8>)
 801573c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801573e:	4814      	ldr	r0, [pc, #80]	@ (8015790 <get_config_payload_string+0x3ac>)
 8015740:	900e      	str	r0, [sp, #56]	@ 0x38
 8015742:	4814      	ldr	r0, [pc, #80]	@ (8015794 <get_config_payload_string+0x3b0>)
 8015744:	900d      	str	r0, [sp, #52]	@ 0x34
 8015746:	4814      	ldr	r0, [pc, #80]	@ (8015798 <get_config_payload_string+0x3b4>)
 8015748:	900c      	str	r0, [sp, #48]	@ 0x30
 801574a:	4814      	ldr	r0, [pc, #80]	@ (801579c <get_config_payload_string+0x3b8>)
 801574c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801574e:	910a      	str	r1, [sp, #40]	@ 0x28
 8015750:	9309      	str	r3, [sp, #36]	@ 0x24
 8015752:	481c      	ldr	r0, [pc, #112]	@ (80157c4 <get_config_payload_string+0x3e0>)
 8015754:	9008      	str	r0, [sp, #32]
 8015756:	9207      	str	r2, [sp, #28]
 8015758:	9106      	str	r1, [sp, #24]
 801575a:	9305      	str	r3, [sp, #20]
 801575c:	481a      	ldr	r0, [pc, #104]	@ (80157c8 <get_config_payload_string+0x3e4>)
 801575e:	9004      	str	r0, [sp, #16]
 8015760:	4811      	ldr	r0, [pc, #68]	@ (80157a8 <get_config_payload_string+0x3c4>)
 8015762:	9003      	str	r0, [sp, #12]
 8015764:	9202      	str	r2, [sp, #8]
 8015766:	4811      	ldr	r0, [pc, #68]	@ (80157ac <get_config_payload_string+0x3c8>)
 8015768:	9001      	str	r0, [sp, #4]
 801576a:	9100      	str	r1, [sp, #0]
 801576c:	4910      	ldr	r1, [pc, #64]	@ (80157b0 <get_config_payload_string+0x3cc>)
 801576e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015770:	f016 fd6c 	bl	802c24c <sprintf>
			break;
 8015774:	e70c      	b.n	8015590 <get_config_payload_string+0x1ac>
	switch (payload_type) {
 8015776:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801577a:	e684      	b.n	8015486 <get_config_payload_string+0xa2>
 801577c:	200028dc 	.word	0x200028dc
 8015780:	08036744 	.word	0x08036744
 8015784:	08038024 	.word	0x08038024
 8015788:	200028d8 	.word	0x200028d8
 801578c:	08036664 	.word	0x08036664
 8015790:	08036660 	.word	0x08036660
 8015794:	08038060 	.word	0x08038060
 8015798:	08036724 	.word	0x08036724
 801579c:	08036738 	.word	0x08036738
 80157a0:	08038108 	.word	0x08038108
 80157a4:	0803810c 	.word	0x0803810c
 80157a8:	0803a4bc 	.word	0x0803a4bc
 80157ac:	080380c4 	.word	0x080380c4
 80157b0:	080381c8 	.word	0x080381c8
 80157b4:	08038034 	.word	0x08038034
 80157b8:	0803812c 	.word	0x0803812c
 80157bc:	08038130 	.word	0x08038130
 80157c0:	08038044 	.word	0x08038044
 80157c4:	0803815c 	.word	0x0803815c
 80157c8:	08038160 	.word	0x08038160

080157cc <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 80157cc:	b530      	push	{r4, r5, lr}
 80157ce:	b083      	sub	sp, #12
 80157d0:	461c      	mov	r4, r3
 80157d2:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 80157d6:	2a01      	cmp	r2, #1
 80157d8:	d00b      	beq.n	80157f2 <gen_bin_sensor_status_payload_JSON+0x26>
 80157da:	2a02      	cmp	r2, #2
 80157dc:	d10b      	bne.n	80157f6 <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 80157de:	4b0a      	ldr	r3, [pc, #40]	@ (8015808 <gen_bin_sensor_status_payload_JSON+0x3c>)
			break;
		default:
			break;
	}

	if (state){
 80157e0:	b15d      	cbz	r5, 80157fa <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 80157e2:	4a0a      	ldr	r2, [pc, #40]	@ (801580c <gen_bin_sensor_status_payload_JSON+0x40>)
 80157e4:	9201      	str	r2, [sp, #4]
 80157e6:	9400      	str	r4, [sp, #0]
 80157e8:	4a09      	ldr	r2, [pc, #36]	@ (8015810 <gen_bin_sensor_status_payload_JSON+0x44>)
 80157ea:	f016 fbc7 	bl	802bf7c <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 80157ee:	b003      	add	sp, #12
 80157f0:	bd30      	pop	{r4, r5, pc}
			sens_name = (char *)component_input;
 80157f2:	4b08      	ldr	r3, [pc, #32]	@ (8015814 <gen_bin_sensor_status_payload_JSON+0x48>)
 80157f4:	e7f4      	b.n	80157e0 <gen_bin_sensor_status_payload_JSON+0x14>
	switch (sensor_type) {
 80157f6:	2300      	movs	r3, #0
 80157f8:	e7f2      	b.n	80157e0 <gen_bin_sensor_status_payload_JSON+0x14>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 80157fa:	4a07      	ldr	r2, [pc, #28]	@ (8015818 <gen_bin_sensor_status_payload_JSON+0x4c>)
 80157fc:	9201      	str	r2, [sp, #4]
 80157fe:	9400      	str	r4, [sp, #0]
 8015800:	4a03      	ldr	r2, [pc, #12]	@ (8015810 <gen_bin_sensor_status_payload_JSON+0x44>)
 8015802:	f016 fbbb 	bl	802bf7c <snprintf>
 8015806:	e7f2      	b.n	80157ee <gen_bin_sensor_status_payload_JSON+0x22>
 8015808:	08037d5c 	.word	0x08037d5c
 801580c:	08037e14 	.word	0x08037e14
 8015810:	08038190 	.word	0x08038190
 8015814:	08037fec 	.word	0x08037fec
 8015818:	08037e2c 	.word	0x08037e2c

0801581c <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 801581c:	b500      	push	{lr}
 801581e:	b085      	sub	sp, #20

	switch(sensor_type){

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8015820:	9302      	str	r3, [sp, #8]
 8015822:	4b06      	ldr	r3, [pc, #24]	@ (801583c <generate_comand_topik_for_subscrabe+0x20>)
 8015824:	9301      	str	r3, [sp, #4]
 8015826:	4b06      	ldr	r3, [pc, #24]	@ (8015840 <generate_comand_topik_for_subscrabe+0x24>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	9300      	str	r3, [sp, #0]
 801582c:	4b05      	ldr	r3, [pc, #20]	@ (8015844 <generate_comand_topik_for_subscrabe+0x28>)
 801582e:	4a06      	ldr	r2, [pc, #24]	@ (8015848 <generate_comand_topik_for_subscrabe+0x2c>)
 8015830:	f016 fba4 	bl	802bf7c <snprintf>
			break;
	}
}
 8015834:	b005      	add	sp, #20
 8015836:	f85d fb04 	ldr.w	pc, [sp], #4
 801583a:	bf00      	nop
 801583c:	08037d5c 	.word	0x08037d5c
 8015840:	200028dc 	.word	0x200028dc
 8015844:	08036744 	.word	0x08036744
 8015848:	0803816c 	.word	0x0803816c

0801584c <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 801584c:	b500      	push	{lr}
 801584e:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 8015850:	f04f 0c00 	mov.w	ip, #0
 8015854:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 8015858:	2a01      	cmp	r2, #1
 801585a:	d006      	beq.n	801586a <generate_status_topik+0x1e>
 801585c:	2a02      	cmp	r2, #2
 801585e:	d00f      	beq.n	8015880 <generate_status_topik+0x34>
 8015860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 8015864:	b005      	add	sp, #20
 8015866:	f85d fb04 	ldr.w	pc, [sp], #4
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 801586a:	9302      	str	r3, [sp, #8]
 801586c:	4b0a      	ldr	r3, [pc, #40]	@ (8015898 <generate_status_topik+0x4c>)
 801586e:	9301      	str	r3, [sp, #4]
 8015870:	4b0a      	ldr	r3, [pc, #40]	@ (801589c <generate_status_topik+0x50>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	9300      	str	r3, [sp, #0]
 8015876:	4b0a      	ldr	r3, [pc, #40]	@ (80158a0 <generate_status_topik+0x54>)
 8015878:	4a0a      	ldr	r2, [pc, #40]	@ (80158a4 <generate_status_topik+0x58>)
 801587a:	f016 fb7f 	bl	802bf7c <snprintf>
 801587e:	e7f1      	b.n	8015864 <generate_status_topik+0x18>
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8015880:	9302      	str	r3, [sp, #8]
 8015882:	4b09      	ldr	r3, [pc, #36]	@ (80158a8 <generate_status_topik+0x5c>)
 8015884:	9301      	str	r3, [sp, #4]
 8015886:	4b05      	ldr	r3, [pc, #20]	@ (801589c <generate_status_topik+0x50>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	9300      	str	r3, [sp, #0]
 801588c:	4b04      	ldr	r3, [pc, #16]	@ (80158a0 <generate_status_topik+0x54>)
 801588e:	4a05      	ldr	r2, [pc, #20]	@ (80158a4 <generate_status_topik+0x58>)
 8015890:	f016 fb74 	bl	802bf7c <snprintf>
 8015894:	e7e6      	b.n	8015864 <generate_status_topik+0x18>
 8015896:	bf00      	nop
 8015898:	08037fec 	.word	0x08037fec
 801589c:	200028dc 	.word	0x200028dc
 80158a0:	08036744 	.word	0x08036744
 80158a4:	0803817c 	.word	0x0803817c
 80158a8:	08037d5c 	.word	0x08037d5c

080158ac <timer_fn>:
  }
  (void) c;
}


void timer_fn(void *arg) {
 80158ac:	b508      	push	{r3, lr}
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 80158ae:	4b08      	ldr	r3, [pc, #32]	@ (80158d0 <timer_fn+0x24>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	b12b      	cbz	r3, 80158c0 <timer_fn+0x14>
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 80158b4:	4b06      	ldr	r3, [pc, #24]	@ (80158d0 <timer_fn+0x24>)
 80158b6:	6818      	ldr	r0, [r3, #0]
 80158b8:	b108      	cbz	r0, 80158be <timer_fn+0x12>
 80158ba:	f014 f99d 	bl	8029bf8 <mg_sntp_request>
}
 80158be:	bd08      	pop	{r3, pc}
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 80158c0:	4a04      	ldr	r2, [pc, #16]	@ (80158d4 <timer_fn+0x28>)
 80158c2:	4619      	mov	r1, r3
 80158c4:	f014 fa6a 	bl	8029d9c <mg_sntp_connect>
 80158c8:	4b01      	ldr	r3, [pc, #4]	@ (80158d0 <timer_fn+0x24>)
 80158ca:	6018      	str	r0, [r3, #0]
 80158cc:	e7f2      	b.n	80158b4 <timer_fn+0x8>
 80158ce:	bf00      	nop
 80158d0:	200028e0 	.word	0x200028e0
 80158d4:	080158d9 	.word	0x080158d9

080158d8 <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 80158d8:	b570      	push	{r4, r5, r6, lr}
  if (ev == MG_EV_SNTP_TIME) {
 80158da:	2912      	cmp	r1, #18
 80158dc:	d002      	beq.n	80158e4 <sfn+0xc>
  } else if (ev == MG_EV_CLOSE) {
 80158de:	2909      	cmp	r1, #9
 80158e0:	d046      	beq.n	8015970 <sfn+0x98>
}
 80158e2:	bd70      	pop	{r4, r5, r6, pc}
 80158e4:	4614      	mov	r4, r2
	  logging(L_INFO, "Response from NTP server received");
 80158e6:	4926      	ldr	r1, [pc, #152]	@ (8015980 <sfn+0xa8>)
 80158e8:	2001      	movs	r0, #1
 80158ea:	f7fc fb03 	bl	8011ef4 <logging>
    uint64_t curtime = mg_now();
 80158ee:	f014 f8bf 	bl	8029a70 <mg_now>
 80158f2:	4606      	mov	r6, r0
 80158f4:	460d      	mov	r5, r1
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 80158f6:	4b23      	ldr	r3, [pc, #140]	@ (8015984 <sfn+0xac>)
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	2b01      	cmp	r3, #1
 80158fc:	dc20      	bgt.n	8015940 <sfn+0x68>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 80158fe:	4632      	mov	r2, r6
 8015900:	462b      	mov	r3, r5
 8015902:	4921      	ldr	r1, [pc, #132]	@ (8015988 <sfn+0xb0>)
 8015904:	2001      	movs	r0, #1
 8015906:	f7fc faf5 	bl	8011ef4 <logging>
      uint64_t t = *(uint64_t *) ev_data;
 801590a:	6825      	ldr	r5, [r4, #0]
 801590c:	6864      	ldr	r4, [r4, #4]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 801590e:	f010 fc5d 	bl	80261cc <mg_millis>
 8015912:	1a28      	subs	r0, r5, r0
 8015914:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015918:	f04f 0300 	mov.w	r3, #0
 801591c:	eb64 0101 	sbc.w	r1, r4, r1
 8015920:	f7fb fa1a 	bl	8010d58 <__aeabi_uldivmod>
 8015924:	4b19      	ldr	r3, [pc, #100]	@ (801598c <sfn+0xb4>)
 8015926:	e9c3 0100 	strd	r0, r1, [r3]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 801592a:	4b16      	ldr	r3, [pc, #88]	@ (8015984 <sfn+0xac>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	2b01      	cmp	r3, #1
 8015930:	dc12      	bgt.n	8015958 <sfn+0x80>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 8015932:	462a      	mov	r2, r5
 8015934:	4623      	mov	r3, r4
 8015936:	4916      	ldr	r1, [pc, #88]	@ (8015990 <sfn+0xb8>)
 8015938:	2001      	movs	r0, #1
 801593a:	f7fc fadb 	bl	8011ef4 <logging>
 801593e:	e7d0      	b.n	80158e2 <sfn+0xa>
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8015940:	4b14      	ldr	r3, [pc, #80]	@ (8015994 <sfn+0xbc>)
 8015942:	221b      	movs	r2, #27
 8015944:	4914      	ldr	r1, [pc, #80]	@ (8015998 <sfn+0xc0>)
 8015946:	2002      	movs	r0, #2
 8015948:	f010 fc46 	bl	80261d8 <mg_log_prefix>
 801594c:	4632      	mov	r2, r6
 801594e:	462b      	mov	r3, r5
 8015950:	480d      	ldr	r0, [pc, #52]	@ (8015988 <sfn+0xb0>)
 8015952:	f00e faef 	bl	8023f34 <mg_log>
 8015956:	e7d2      	b.n	80158fe <sfn+0x26>
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015958:	4b0e      	ldr	r3, [pc, #56]	@ (8015994 <sfn+0xbc>)
 801595a:	2221      	movs	r2, #33	@ 0x21
 801595c:	490e      	ldr	r1, [pc, #56]	@ (8015998 <sfn+0xc0>)
 801595e:	2002      	movs	r0, #2
 8015960:	f010 fc3a 	bl	80261d8 <mg_log_prefix>
 8015964:	462a      	mov	r2, r5
 8015966:	4623      	mov	r3, r4
 8015968:	480c      	ldr	r0, [pc, #48]	@ (801599c <sfn+0xc4>)
 801596a:	f00e fae3 	bl	8023f34 <mg_log>
 801596e:	e7e0      	b.n	8015932 <sfn+0x5a>
	  logging(L_INFO, "NTP connection is closed");
 8015970:	490b      	ldr	r1, [pc, #44]	@ (80159a0 <sfn+0xc8>)
 8015972:	2001      	movs	r0, #1
 8015974:	f7fc fabe 	bl	8011ef4 <logging>
    s_sntp_conn = NULL;
 8015978:	4b0a      	ldr	r3, [pc, #40]	@ (80159a4 <sfn+0xcc>)
 801597a:	2200      	movs	r2, #0
 801597c:	601a      	str	r2, [r3, #0]
}
 801597e:	e7b0      	b.n	80158e2 <sfn+0xa>
 8015980:	08038348 	.word	0x08038348
 8015984:	2000012c 	.word	0x2000012c
 8015988:	0803838c 	.word	0x0803838c
 801598c:	200028e8 	.word	0x200028e8
 8015990:	080383e4 	.word	0x080383e4
 8015994:	08038440 	.word	0x08038440
 8015998:	0803836c 	.word	0x0803836c
 801599c:	080383c0 	.word	0x080383c0
 80159a0:	08038408 	.word	0x08038408
 80159a4:	200028e0 	.word	0x200028e0

080159a8 <start_sntp>:

void start_sntp(void *arg){
 80159a8:	b530      	push	{r4, r5, lr}
 80159aa:	b085      	sub	sp, #20
 80159ac:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 80159ae:	490d      	ldr	r1, [pc, #52]	@ (80159e4 <start_sntp+0x3c>)
 80159b0:	2001      	movs	r0, #1
 80159b2:	f7fc fa9f 	bl	8011ef4 <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 80159b6:	9402      	str	r4, [sp, #8]
 80159b8:	4d0b      	ldr	r5, [pc, #44]	@ (80159e8 <start_sntp+0x40>)
 80159ba:	9501      	str	r5, [sp, #4]
 80159bc:	2300      	movs	r3, #0
 80159be:	9300      	str	r3, [sp, #0]
 80159c0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80159c4:	2300      	movs	r3, #0
 80159c6:	4620      	mov	r0, r4
 80159c8:	f00f fe74 	bl	80256b4 <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 80159cc:	9402      	str	r4, [sp, #8]
 80159ce:	9501      	str	r5, [sp, #4]
 80159d0:	2301      	movs	r3, #1
 80159d2:	9300      	str	r3, [sp, #0]
 80159d4:	4a05      	ldr	r2, [pc, #20]	@ (80159ec <start_sntp+0x44>)
 80159d6:	2300      	movs	r3, #0
 80159d8:	4620      	mov	r0, r4
 80159da:	f00f fe6b 	bl	80256b4 <mg_timer_add>

}
 80159de:	b005      	add	sp, #20
 80159e0:	bd30      	pop	{r4, r5, pc}
 80159e2:	bf00      	nop
 80159e4:	08038424 	.word	0x08038424
 80159e8:	080158ad 	.word	0x080158ad
 80159ec:	00107ac0 	.word	0x00107ac0

080159f0 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 80159f0:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80159f2:	fb01 f400 	mul.w	r4, r1, r0
 80159f6:	4620      	mov	r0, r4
 80159f8:	f004 ffb6 	bl	801a968 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80159fc:	4605      	mov	r5, r0
 80159fe:	b118      	cbz	r0, 8015a08 <my_calloc+0x18>
 8015a00:	4622      	mov	r2, r4
 8015a02:	2100      	movs	r1, #0
 8015a04:	f016 ffe4 	bl	802c9d0 <memset>
}
 8015a08:	4628      	mov	r0, r5
 8015a0a:	bd38      	pop	{r3, r4, r5, pc}

08015a0c <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015a0c:	b570      	push	{r4, r5, r6, lr}
 8015a0e:	b088      	sub	sp, #32
 8015a10:	4605      	mov	r5, r0
 8015a12:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 8015a14:	4917      	ldr	r1, [pc, #92]	@ (8015a74 <dev_description_handler+0x68>)
 8015a16:	2000      	movs	r0, #0
 8015a18:	f7fc fa6c 	bl	8011ef4 <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8015a1c:	ae06      	add	r6, sp, #24
 8015a1e:	4916      	ldr	r1, [pc, #88]	@ (8015a78 <dev_description_handler+0x6c>)
 8015a20:	4630      	mov	r0, r6
 8015a22:	f00e fc65 	bl	80242f0 <mg_str_s>
 8015a26:	2300      	movs	r3, #0
 8015a28:	9300      	str	r3, [sp, #0]
 8015a2a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015a2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015a32:	f00e fe7f 	bl	8024734 <mg_match>
 8015a36:	b1a8      	cbz	r0, 8015a64 <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 8015a38:	4b10      	ldr	r3, [pc, #64]	@ (8015a7c <dev_description_handler+0x70>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	9305      	str	r3, [sp, #20]
 8015a3e:	4b10      	ldr	r3, [pc, #64]	@ (8015a80 <dev_description_handler+0x74>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	9304      	str	r3, [sp, #16]
 8015a44:	4b0f      	ldr	r3, [pc, #60]	@ (8015a84 <dev_description_handler+0x78>)
 8015a46:	9303      	str	r3, [sp, #12]
 8015a48:	4b0f      	ldr	r3, [pc, #60]	@ (8015a88 <dev_description_handler+0x7c>)
 8015a4a:	9302      	str	r3, [sp, #8]
 8015a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8015a8c <dev_description_handler+0x80>)
 8015a4e:	9301      	str	r3, [sp, #4]
 8015a50:	4b0f      	ldr	r3, [pc, #60]	@ (8015a90 <dev_description_handler+0x84>)
 8015a52:	9300      	str	r3, [sp, #0]
 8015a54:	4b0f      	ldr	r3, [pc, #60]	@ (8015a94 <dev_description_handler+0x88>)
 8015a56:	4a10      	ldr	r2, [pc, #64]	@ (8015a98 <dev_description_handler+0x8c>)
 8015a58:	21c8      	movs	r1, #200	@ 0xc8
 8015a5a:	4628      	mov	r0, r5
 8015a5c:	f00e fabe 	bl	8023fdc <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 8015a60:	b008      	add	sp, #32
 8015a62:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 8015a64:	4b0d      	ldr	r3, [pc, #52]	@ (8015a9c <dev_description_handler+0x90>)
 8015a66:	4a0c      	ldr	r2, [pc, #48]	@ (8015a98 <dev_description_handler+0x8c>)
 8015a68:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	f00e fab5 	bl	8023fdc <mg_http_reply>
}
 8015a72:	e7f5      	b.n	8015a60 <dev_description_handler+0x54>
 8015a74:	08038444 	.word	0x08038444
 8015a78:	080365b4 	.word	0x080365b4
 8015a7c:	200028fc 	.word	0x200028fc
 8015a80:	20002904 	.word	0x20002904
 8015a84:	08036664 	.word	0x08036664
 8015a88:	08036724 	.word	0x08036724
 8015a8c:	08038060 	.word	0x08038060
 8015a90:	08036738 	.word	0x08036738
 8015a94:	0803874c 	.word	0x0803874c
 8015a98:	08036c70 	.word	0x08036c70
 8015a9c:	08037304 	.word	0x08037304

08015aa0 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015aa0:	b510      	push	{r4, lr}
 8015aa2:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 8015aa4:	4905      	ldr	r1, [pc, #20]	@ (8015abc <dev_404_handler+0x1c>)
 8015aa6:	2000      	movs	r0, #0
 8015aa8:	f7fc fa24 	bl	8011ef4 <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 8015aac:	4b04      	ldr	r3, [pc, #16]	@ (8015ac0 <dev_404_handler+0x20>)
 8015aae:	4a05      	ldr	r2, [pc, #20]	@ (8015ac4 <dev_404_handler+0x24>)
 8015ab0:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	f00e fa91 	bl	8023fdc <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 8015aba:	bd10      	pop	{r4, pc}
 8015abc:	08038464 	.word	0x08038464
 8015ac0:	0803847c 	.word	0x0803847c
 8015ac4:	08036c70 	.word	0x08036c70

08015ac8 <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 8015ac8:	290b      	cmp	r1, #11
 8015aca:	d000      	beq.n	8015ace <ssdp_web_handler+0x6>
 8015acc:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 8015ace:	b570      	push	{r4, r5, r6, lr}
 8015ad0:	b086      	sub	sp, #24
 8015ad2:	4605      	mov	r5, r0
 8015ad4:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 8015ad6:	4917      	ldr	r1, [pc, #92]	@ (8015b34 <ssdp_web_handler+0x6c>)
 8015ad8:	2000      	movs	r0, #0
 8015ada:	f7fc fa0b 	bl	8011ef4 <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 8015ade:	ae02      	add	r6, sp, #8
 8015ae0:	4915      	ldr	r1, [pc, #84]	@ (8015b38 <ssdp_web_handler+0x70>)
 8015ae2:	4630      	mov	r0, r6
 8015ae4:	f00e fc04 	bl	80242f0 <mg_str_s>
 8015ae8:	2300      	movs	r3, #0
 8015aea:	9300      	str	r3, [sp, #0]
 8015aec:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015af0:	f104 0108 	add.w	r1, r4, #8
 8015af4:	c903      	ldmia	r1, {r0, r1}
 8015af6:	f00e fe1d 	bl	8024734 <mg_match>
 8015afa:	b128      	cbz	r0, 8015b08 <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 8015afc:	4621      	mov	r1, r4
 8015afe:	4628      	mov	r0, r5
 8015b00:	f7ff ff84 	bl	8015a0c <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 8015b04:	b006      	add	sp, #24
 8015b06:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8015b08:	ae04      	add	r6, sp, #16
 8015b0a:	490c      	ldr	r1, [pc, #48]	@ (8015b3c <ssdp_web_handler+0x74>)
 8015b0c:	4630      	mov	r0, r6
 8015b0e:	f00e fbef 	bl	80242f0 <mg_str_s>
 8015b12:	2300      	movs	r3, #0
 8015b14:	9300      	str	r3, [sp, #0]
 8015b16:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015b1a:	f104 0108 	add.w	r1, r4, #8
 8015b1e:	c903      	ldmia	r1, {r0, r1}
 8015b20:	f00e fe08 	bl	8024734 <mg_match>
 8015b24:	2800      	cmp	r0, #0
 8015b26:	d0ed      	beq.n	8015b04 <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 8015b28:	4621      	mov	r1, r4
 8015b2a:	4628      	mov	r0, r5
 8015b2c:	f7ff ffb8 	bl	8015aa0 <dev_404_handler>
}
 8015b30:	e7e8      	b.n	8015b04 <ssdp_web_handler+0x3c>
 8015b32:	bf00      	nop
 8015b34:	080384a8 	.word	0x080384a8
 8015b38:	080384d0 	.word	0x080384d0
 8015b3c:	080384e8 	.word	0x080384e8

08015b40 <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 8015b40:	b510      	push	{r4, lr}
 8015b42:	b084      	sub	sp, #16
 8015b44:	4602      	mov	r2, r0
 8015b46:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 8015b48:	0e14      	lsrs	r4, r2, #24
 8015b4a:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 8015b4e:	0c11      	lsrs	r1, r2, #16
 8015b50:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 8015b54:	0a13      	lsrs	r3, r2, #8
 8015b56:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 8015b5a:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 8015b5e:	9401      	str	r4, [sp, #4]
 8015b60:	b2c9      	uxtb	r1, r1
 8015b62:	9100      	str	r1, [sp, #0]
 8015b64:	b2db      	uxtb	r3, r3
 8015b66:	b2d2      	uxtb	r2, r2
 8015b68:	4902      	ldr	r1, [pc, #8]	@ (8015b74 <ip_to_string+0x34>)
 8015b6a:	f016 fb6f 	bl	802c24c <sprintf>
}
 8015b6e:	b004      	add	sp, #16
 8015b70:	bd10      	pop	{r4, pc}
 8015b72:	bf00      	nop
 8015b74:	080384ec 	.word	0x080384ec

08015b78 <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 8015b78:	b570      	push	{r4, r5, r6, lr}
 8015b7a:	b084      	sub	sp, #16
 8015b7c:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 8015b7e:	491e      	ldr	r1, [pc, #120]	@ (8015bf8 <send_ssdp_notify+0x80>)
 8015b80:	2000      	movs	r0, #0
 8015b82:	f7fc f9b7 	bl	8011ef4 <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 8015b86:	4b1d      	ldr	r3, [pc, #116]	@ (8015bfc <send_ssdp_notify+0x84>)
 8015b88:	6818      	ldr	r0, [r3, #0]
 8015b8a:	f7fa fb89 	bl	80102a0 <strlen>
 8015b8e:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 8015b90:	2101      	movs	r1, #1
 8015b92:	f200 1039 	addw	r0, r0, #313	@ 0x139
 8015b96:	f7ff ff2b 	bl	80159f0 <my_calloc>
 8015b9a:	4a19      	ldr	r2, [pc, #100]	@ (8015c00 <send_ssdp_notify+0x88>)
 8015b9c:	6010      	str	r0, [r2, #0]
	if (!buff) {
 8015b9e:	b330      	cbz	r0, 8015bee <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 8015ba0:	4b18      	ldr	r3, [pc, #96]	@ (8015c04 <send_ssdp_notify+0x8c>)
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	4d18      	ldr	r5, [pc, #96]	@ (8015c08 <send_ssdp_notify+0x90>)
 8015ba6:	6829      	ldr	r1, [r5, #0]
 8015ba8:	6898      	ldr	r0, [r3, #8]
 8015baa:	f7ff ffc9 	bl	8015b40 <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 8015bae:	4b13      	ldr	r3, [pc, #76]	@ (8015bfc <send_ssdp_notify+0x84>)
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	9302      	str	r3, [sp, #8]
 8015bb4:	4b15      	ldr	r3, [pc, #84]	@ (8015c0c <send_ssdp_notify+0x94>)
 8015bb6:	9301      	str	r3, [sp, #4]
 8015bb8:	682b      	ldr	r3, [r5, #0]
 8015bba:	9300      	str	r3, [sp, #0]
 8015bbc:	4b14      	ldr	r3, [pc, #80]	@ (8015c10 <send_ssdp_notify+0x98>)
 8015bbe:	4a15      	ldr	r2, [pc, #84]	@ (8015c14 <send_ssdp_notify+0x9c>)
 8015bc0:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 8015bc4:	480e      	ldr	r0, [pc, #56]	@ (8015c00 <send_ssdp_notify+0x88>)
 8015bc6:	6800      	ldr	r0, [r0, #0]
 8015bc8:	f016 f9d8 	bl	802bf7c <snprintf>
    if (udp_conn != NULL) {
 8015bcc:	b14e      	cbz	r6, 8015be2 <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 8015bce:	4b0c      	ldr	r3, [pc, #48]	@ (8015c00 <send_ssdp_notify+0x88>)
 8015bd0:	681c      	ldr	r4, [r3, #0]
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f7fa fb64 	bl	80102a0 <strlen>
 8015bd8:	4602      	mov	r2, r0
 8015bda:	4621      	mov	r1, r4
 8015bdc:	4630      	mov	r0, r6
 8015bde:	f011 fbaf 	bl	8027340 <mg_send>
    free(buff);
 8015be2:	4b07      	ldr	r3, [pc, #28]	@ (8015c00 <send_ssdp_notify+0x88>)
 8015be4:	6818      	ldr	r0, [r3, #0]
 8015be6:	f004 ff41 	bl	801aa6c <vPortFree>
}
 8015bea:	b004      	add	sp, #16
 8015bec:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 8015bee:	490a      	ldr	r1, [pc, #40]	@ (8015c18 <send_ssdp_notify+0xa0>)
 8015bf0:	2003      	movs	r0, #3
 8015bf2:	f7fc f97f 	bl	8011ef4 <logging>
		return; //TODO add log
 8015bf6:	e7f8      	b.n	8015bea <send_ssdp_notify+0x72>
 8015bf8:	080384f8 	.word	0x080384f8
 8015bfc:	20002904 	.word	0x20002904
 8015c00:	20002900 	.word	0x20002900
 8015c04:	200028f4 	.word	0x200028f4
 8015c08:	200028fc 	.word	0x200028fc
 8015c0c:	08038548 	.word	0x08038548
 8015c10:	08038540 	.word	0x08038540
 8015c14:	08038654 	.word	0x08038654
 8015c18:	08038510 	.word	0x08038510

08015c1c <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 8015c1c:	2907      	cmp	r1, #7
 8015c1e:	d000      	beq.n	8015c22 <ssdp_listener_handler+0x6>
 8015c20:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 8015c22:	b570      	push	{r4, r5, r6, lr}
 8015c24:	b088      	sub	sp, #32
 8015c26:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 8015c28:	491a      	ldr	r1, [pc, #104]	@ (8015c94 <ssdp_listener_handler+0x78>)
 8015c2a:	2000      	movs	r0, #0
 8015c2c:	f7fc f962 	bl	8011ef4 <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 8015c30:	4b19      	ldr	r3, [pc, #100]	@ (8015c98 <ssdp_listener_handler+0x7c>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	ad02      	add	r5, sp, #8
 8015c36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015c38:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015c3a:	4628      	mov	r0, r5
 8015c3c:	f00e fb64 	bl	8024308 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015c40:	ae04      	add	r6, sp, #16
 8015c42:	4916      	ldr	r1, [pc, #88]	@ (8015c9c <ssdp_listener_handler+0x80>)
 8015c44:	4630      	mov	r0, r6
 8015c46:	f00e fb53 	bl	80242f0 <mg_str_s>
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	9300      	str	r3, [sp, #0]
 8015c4e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015c52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015c56:	f00e fd6d 	bl	8024734 <mg_match>
 8015c5a:	b918      	cbnz	r0, 8015c64 <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 8015c60:	b008      	add	sp, #32
 8015c62:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015c64:	ad06      	add	r5, sp, #24
 8015c66:	490e      	ldr	r1, [pc, #56]	@ (8015ca0 <ssdp_listener_handler+0x84>)
 8015c68:	4628      	mov	r0, r5
 8015c6a:	f00e fb41 	bl	80242f0 <mg_str_s>
 8015c6e:	2300      	movs	r3, #0
 8015c70:	9300      	str	r3, [sp, #0]
 8015c72:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015c76:	a902      	add	r1, sp, #8
 8015c78:	c903      	ldmia	r1, {r0, r1}
 8015c7a:	f00e fd5b 	bl	8024734 <mg_match>
 8015c7e:	2800      	cmp	r0, #0
 8015c80:	d0ec      	beq.n	8015c5c <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 8015c82:	4908      	ldr	r1, [pc, #32]	@ (8015ca4 <ssdp_listener_handler+0x88>)
 8015c84:	2000      	movs	r0, #0
 8015c86:	f7fc f935 	bl	8011ef4 <logging>
			send_ssdp_notify(udp_listen_conn);
 8015c8a:	4b03      	ldr	r3, [pc, #12]	@ (8015c98 <ssdp_listener_handler+0x7c>)
 8015c8c:	6818      	ldr	r0, [r3, #0]
 8015c8e:	f7ff ff73 	bl	8015b78 <send_ssdp_notify>
 8015c92:	e7e3      	b.n	8015c5c <ssdp_listener_handler+0x40>
 8015c94:	08038550 	.word	0x08038550
 8015c98:	200028f0 	.word	0x200028f0
 8015c9c:	08038584 	.word	0x08038584
 8015ca0:	08038590 	.word	0x08038590
 8015ca4:	080385a0 	.word	0x080385a0

08015ca8 <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 8015ca8:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 8015caa:	490c      	ldr	r1, [pc, #48]	@ (8015cdc <ssdp_timer_handler+0x34>)
 8015cac:	2000      	movs	r0, #0
 8015cae:	f7fc f921 	bl	8011ef4 <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	461a      	mov	r2, r3
 8015cb6:	490a      	ldr	r1, [pc, #40]	@ (8015ce0 <ssdp_timer_handler+0x38>)
 8015cb8:	480a      	ldr	r0, [pc, #40]	@ (8015ce4 <ssdp_timer_handler+0x3c>)
 8015cba:	6800      	ldr	r0, [r0, #0]
 8015cbc:	f013 f814 	bl	8028ce8 <mg_connect>
	if (conn == NULL){
 8015cc0:	b130      	cbz	r0, 8015cd0 <ssdp_timer_handler+0x28>
 8015cc2:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 8015cc4:	f7ff ff58 	bl	8015b78 <send_ssdp_notify>
	mg_close_conn(conn);
 8015cc8:	4620      	mov	r0, r4
 8015cca:	f011 f9f7 	bl	80270bc <mg_close_conn>
}
 8015cce:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 8015cd0:	4905      	ldr	r1, [pc, #20]	@ (8015ce8 <ssdp_timer_handler+0x40>)
 8015cd2:	2003      	movs	r0, #3
 8015cd4:	f7fc f90e 	bl	8011ef4 <logging>
		return ;
 8015cd8:	e7f9      	b.n	8015cce <ssdp_timer_handler+0x26>
 8015cda:	bf00      	nop
 8015cdc:	080385d0 	.word	0x080385d0
 8015ce0:	080388f0 	.word	0x080388f0
 8015ce4:	200028f8 	.word	0x200028f8
 8015ce8:	080385e8 	.word	0x080385e8

08015cec <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 8015cec:	b570      	push	{r4, r5, r6, lr}
 8015cee:	4606      	mov	r6, r0
 8015cf0:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 8015cf2:	4910      	ldr	r1, [pc, #64]	@ (8015d34 <ssdp_set_id+0x48>)
 8015cf4:	2000      	movs	r0, #0
 8015cf6:	f7fc f8fd 	bl	8011ef4 <logging>
	if (id && (id_len > 0)){
 8015cfa:	b1d6      	cbz	r6, 8015d32 <ssdp_set_id+0x46>
 8015cfc:	b1cd      	cbz	r5, 8015d32 <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 8015cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8015d38 <ssdp_set_id+0x4c>)
 8015d00:	6818      	ldr	r0, [r3, #0]
 8015d02:	b108      	cbz	r0, 8015d08 <ssdp_set_id+0x1c>
 8015d04:	f004 feb2 	bl	801aa6c <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8015d08:	0068      	lsls	r0, r5, #1
 8015d0a:	2101      	movs	r1, #1
 8015d0c:	4408      	add	r0, r1
 8015d0e:	f7ff fe6f 	bl	80159f0 <my_calloc>
 8015d12:	4b09      	ldr	r3, [pc, #36]	@ (8015d38 <ssdp_set_id+0x4c>)
 8015d14:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 8015d16:	b160      	cbz	r0, 8015d32 <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 8015d18:	2400      	movs	r4, #0
 8015d1a:	e008      	b.n	8015d2e <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 8015d1c:	4b06      	ldr	r3, [pc, #24]	@ (8015d38 <ssdp_set_id+0x4c>)
 8015d1e:	6818      	ldr	r0, [r3, #0]
 8015d20:	5d32      	ldrb	r2, [r6, r4]
 8015d22:	4906      	ldr	r1, [pc, #24]	@ (8015d3c <ssdp_set_id+0x50>)
 8015d24:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8015d28:	f016 fa90 	bl	802c24c <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 8015d2c:	3401      	adds	r4, #1
 8015d2e:	42a5      	cmp	r5, r4
 8015d30:	d8f4      	bhi.n	8015d1c <ssdp_set_id+0x30>
}
 8015d32:	bd70      	pop	{r4, r5, r6, pc}
 8015d34:	08038610 	.word	0x08038610
 8015d38:	20002904 	.word	0x20002904
 8015d3c:	08037fcc 	.word	0x08037fcc

08015d40 <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 8015d40:	b530      	push	{r4, r5, lr}
 8015d42:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 8015d44:	4b18      	ldr	r3, [pc, #96]	@ (8015da8 <ssdp_start_server+0x68>)
 8015d46:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 8015d48:	4b18      	ldr	r3, [pc, #96]	@ (8015dac <ssdp_start_server+0x6c>)
 8015d4a:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 8015d4c:	2101      	movs	r1, #1
 8015d4e:	2028      	movs	r0, #40	@ 0x28
 8015d50:	f7ff fe4e 	bl	80159f0 <my_calloc>
 8015d54:	4b16      	ldr	r3, [pc, #88]	@ (8015db0 <ssdp_start_server+0x70>)
 8015d56:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 8015d58:	b318      	cbz	r0, 8015da2 <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 8015d5a:	4d14      	ldr	r5, [pc, #80]	@ (8015dac <ssdp_start_server+0x6c>)
 8015d5c:	2106      	movs	r1, #6
 8015d5e:	6828      	ldr	r0, [r5, #0]
 8015d60:	f7ff ffc4 	bl	8015cec <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 8015d64:	4913      	ldr	r1, [pc, #76]	@ (8015db4 <ssdp_start_server+0x74>)
 8015d66:	2001      	movs	r0, #1
 8015d68:	f7fc f8c4 	bl	8011ef4 <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 8015d6c:	4c0e      	ldr	r4, [pc, #56]	@ (8015da8 <ssdp_start_server+0x68>)
 8015d6e:	2300      	movs	r3, #0
 8015d70:	9302      	str	r3, [sp, #8]
 8015d72:	4b11      	ldr	r3, [pc, #68]	@ (8015db8 <ssdp_start_server+0x78>)
 8015d74:	9301      	str	r3, [sp, #4]
 8015d76:	2303      	movs	r3, #3
 8015d78:	9300      	str	r3, [sp, #0]
 8015d7a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8015d7e:	2300      	movs	r3, #0
 8015d80:	6820      	ldr	r0, [r4, #0]
 8015d82:	f00f fc97 	bl	80256b4 <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 8015d86:	682b      	ldr	r3, [r5, #0]
 8015d88:	4a0c      	ldr	r2, [pc, #48]	@ (8015dbc <ssdp_start_server+0x7c>)
 8015d8a:	490d      	ldr	r1, [pc, #52]	@ (8015dc0 <ssdp_start_server+0x80>)
 8015d8c:	6820      	ldr	r0, [r4, #0]
 8015d8e:	f011 fa6f 	bl	8027270 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 8015d92:	682b      	ldr	r3, [r5, #0]
 8015d94:	4a0b      	ldr	r2, [pc, #44]	@ (8015dc4 <ssdp_start_server+0x84>)
 8015d96:	490c      	ldr	r1, [pc, #48]	@ (8015dc8 <ssdp_start_server+0x88>)
 8015d98:	6820      	ldr	r0, [r4, #0]
 8015d9a:	f011 f9e5 	bl	8027168 <mg_listen>
 8015d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8015dcc <ssdp_start_server+0x8c>)
 8015da0:	6018      	str	r0, [r3, #0]
}
 8015da2:	b005      	add	sp, #20
 8015da4:	bd30      	pop	{r4, r5, pc}
 8015da6:	bf00      	nop
 8015da8:	200028f8 	.word	0x200028f8
 8015dac:	200028f4 	.word	0x200028f4
 8015db0:	200028fc 	.word	0x200028fc
 8015db4:	08038624 	.word	0x08038624
 8015db8:	08015ca9 	.word	0x08015ca9
 8015dbc:	08015ac9 	.word	0x08015ac9
 8015dc0:	0803863c 	.word	0x0803863c
 8015dc4:	08015c1d 	.word	0x08015c1d
 8015dc8:	080388f0 	.word	0x080388f0
 8015dcc:	200028f0 	.word	0x200028f0

08015dd0 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8015dd0:	4770      	bx	lr
	...

08015dd4 <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8015dd4:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 8015dd6:	4b02      	ldr	r3, [pc, #8]	@ (8015de0 <sFLASH_SPI_ReadBuffer+0xc>)
 8015dd8:	685b      	ldr	r3, [r3, #4]
 8015dda:	4798      	blx	r3
}
 8015ddc:	bd08      	pop	{r3, pc}
 8015dde:	bf00      	nop
 8015de0:	20002948 	.word	0x20002948

08015de4 <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 8015de4:	b410      	push	{r4}
	if (chip_select){
 8015de6:	b158      	cbz	r0, 8015e00 <SPI_flash_reg_cb+0x1c>
 8015de8:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 8015dea:	4809      	ldr	r0, [pc, #36]	@ (8015e10 <SPI_flash_reg_cb+0x2c>)
 8015dec:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 8015dee:	b159      	cbz	r1, 8015e08 <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 8015df0:	4807      	ldr	r0, [pc, #28]	@ (8015e10 <SPI_flash_reg_cb+0x2c>)
 8015df2:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 8015df4:	4906      	ldr	r1, [pc, #24]	@ (8015e10 <SPI_flash_reg_cb+0x2c>)
 8015df6:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 8015df8:	608b      	str	r3, [r1, #8]
}
 8015dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015dfe:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 8015e00:	4803      	ldr	r0, [pc, #12]	@ (8015e10 <SPI_flash_reg_cb+0x2c>)
 8015e02:	4c04      	ldr	r4, [pc, #16]	@ (8015e14 <SPI_flash_reg_cb+0x30>)
 8015e04:	60c4      	str	r4, [r0, #12]
 8015e06:	e7f2      	b.n	8015dee <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 8015e08:	4901      	ldr	r1, [pc, #4]	@ (8015e10 <SPI_flash_reg_cb+0x2c>)
 8015e0a:	4802      	ldr	r0, [pc, #8]	@ (8015e14 <SPI_flash_reg_cb+0x30>)
 8015e0c:	6108      	str	r0, [r1, #16]
 8015e0e:	e7f1      	b.n	8015df4 <SPI_flash_reg_cb+0x10>
 8015e10:	20002948 	.word	0x20002948
 8015e14:	08015dd1 	.word	0x08015dd1

08015e18 <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 8015e18:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 8015e1a:	4b02      	ldr	r3, [pc, #8]	@ (8015e24 <sFLASH_CS_LOW+0xc>)
 8015e1c:	68db      	ldr	r3, [r3, #12]
 8015e1e:	4798      	blx	r3
}
 8015e20:	bd08      	pop	{r3, pc}
 8015e22:	bf00      	nop
 8015e24:	20002948 	.word	0x20002948

08015e28 <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 8015e28:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 8015e2a:	4b02      	ldr	r3, [pc, #8]	@ (8015e34 <sFLASH_CS_HIGH+0xc>)
 8015e2c:	691b      	ldr	r3, [r3, #16]
 8015e2e:	4798      	blx	r3
}
 8015e30:	bd08      	pop	{r3, pc}
 8015e32:	bf00      	nop
 8015e34:	20002948 	.word	0x20002948

08015e38 <sFLASH_ReadByte>:
{
 8015e38:	b500      	push	{lr}
 8015e3a:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 8015e3c:	4b05      	ldr	r3, [pc, #20]	@ (8015e54 <sFLASH_ReadByte+0x1c>)
 8015e3e:	685b      	ldr	r3, [r3, #4]
 8015e40:	2101      	movs	r1, #1
 8015e42:	f10d 0007 	add.w	r0, sp, #7
 8015e46:	4798      	blx	r3
}
 8015e48:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015e4c:	b003      	add	sp, #12
 8015e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e52:	bf00      	nop
 8015e54:	20002948 	.word	0x20002948

08015e58 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8015e58:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 8015e5a:	4b02      	ldr	r3, [pc, #8]	@ (8015e64 <sFLASH_SendByte+0xc>)
 8015e5c:	689b      	ldr	r3, [r3, #8]
 8015e5e:	4798      	blx	r3
}
 8015e60:	bd08      	pop	{r3, pc}
 8015e62:	bf00      	nop
 8015e64:	20002948 	.word	0x20002948

08015e68 <sFLASH_Reset>:
void sFLASH_Reset(void){
 8015e68:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 8015e6a:	f7ff ffd5 	bl	8015e18 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8015e6e:	2066      	movs	r0, #102	@ 0x66
 8015e70:	f7ff fff2 	bl	8015e58 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8015e74:	2099      	movs	r0, #153	@ 0x99
 8015e76:	f7ff ffef 	bl	8015e58 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8015e7a:	f7ff ffd5 	bl	8015e28 <sFLASH_CS_HIGH>
}
 8015e7e:	bd08      	pop	{r3, pc}

08015e80 <sFLASH_Init>:
void sFLASH_Init(void){
 8015e80:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8015e82:	2064      	movs	r0, #100	@ 0x64
 8015e84:	f000 fa16 	bl	80162b4 <HAL_Delay>
    sFLASH_Reset();
 8015e88:	f7ff ffee 	bl	8015e68 <sFLASH_Reset>
    HAL_Delay(100);
 8015e8c:	2064      	movs	r0, #100	@ 0x64
 8015e8e:	f000 fa11 	bl	80162b4 <HAL_Delay>
    HAL_Delay(100);
 8015e92:	2064      	movs	r0, #100	@ 0x64
 8015e94:	f000 fa0e 	bl	80162b4 <HAL_Delay>
}
 8015e98:	bd08      	pop	{r3, pc}

08015e9a <sFLASH_ReadBuffer>:
{
 8015e9a:	b570      	push	{r4, r5, r6, lr}
 8015e9c:	4606      	mov	r6, r0
 8015e9e:	460c      	mov	r4, r1
 8015ea0:	4615      	mov	r5, r2
  sFLASH_CS_LOW();
 8015ea2:	f7ff ffb9 	bl	8015e18 <sFLASH_CS_LOW>
  if (NumByteToRead > 16){
 8015ea6:	2d10      	cmp	r5, #16
 8015ea8:	d917      	bls.n	8015eda <sFLASH_ReadBuffer+0x40>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 8015eaa:	200b      	movs	r0, #11
 8015eac:	f7ff ffd4 	bl	8015e58 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015eb0:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8015eb4:	f7ff ffd0 	bl	8015e58 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 8015eb8:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015ebc:	f7ff ffcc 	bl	8015e58 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015ec0:	b2e0      	uxtb	r0, r4
 8015ec2:	f7ff ffc9 	bl	8015e58 <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 8015ec6:	2000      	movs	r0, #0
 8015ec8:	f7ff ffc6 	bl	8015e58 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8015ecc:	4629      	mov	r1, r5
 8015ece:	4630      	mov	r0, r6
 8015ed0:	f7ff ff80 	bl	8015dd4 <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 8015ed4:	f7ff ffa8 	bl	8015e28 <sFLASH_CS_HIGH>
}
 8015ed8:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 8015eda:	2003      	movs	r0, #3
 8015edc:	f7ff ffbc 	bl	8015e58 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015ee0:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8015ee4:	f7ff ffb8 	bl	8015e58 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8015ee8:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015eec:	f7ff ffb4 	bl	8015e58 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015ef0:	b2e0      	uxtb	r0, r4
 8015ef2:	f7ff ffb1 	bl	8015e58 <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 8015ef6:	e004      	b.n	8015f02 <sFLASH_ReadBuffer+0x68>
		  *pBuffer = sFLASH_ReadByte();
 8015ef8:	f7ff ff9e 	bl	8015e38 <sFLASH_ReadByte>
 8015efc:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 8015f00:	4625      	mov	r5, r4
 8015f02:	1e6b      	subs	r3, r5, #1
 8015f04:	b29c      	uxth	r4, r3
 8015f06:	2d00      	cmp	r5, #0
 8015f08:	d1f6      	bne.n	8015ef8 <sFLASH_ReadBuffer+0x5e>
 8015f0a:	e7e3      	b.n	8015ed4 <sFLASH_ReadBuffer+0x3a>

08015f0c <sFLASH_ReadID>:
{
 8015f0c:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 8015f0e:	f7ff ff83 	bl	8015e18 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015f12:	f7ff ff89 	bl	8015e28 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015f16:	f7ff ff7f 	bl	8015e18 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015f1a:	f7ff ff85 	bl	8015e28 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015f1e:	f7ff ff7b 	bl	8015e18 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8015f22:	209f      	movs	r0, #159	@ 0x9f
 8015f24:	f7ff ff98 	bl	8015e58 <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 8015f28:	f7ff ff86 	bl	8015e38 <sFLASH_ReadByte>
 8015f2c:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 8015f2e:	f7ff ff83 	bl	8015e38 <sFLASH_ReadByte>
 8015f32:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 8015f34:	f7ff ff80 	bl	8015e38 <sFLASH_ReadByte>
 8015f38:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 8015f3a:	f7ff ff75 	bl	8015e28 <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8015f3e:	0224      	lsls	r4, r4, #8
 8015f40:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 8015f44:	ea44 0005 	orr.w	r0, r4, r5
 8015f48:	bd70      	pop	{r4, r5, r6, pc}
	...

08015f4c <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 8015f4c:	b538      	push	{r3, r4, r5, lr}
 8015f4e:	4605      	mov	r5, r0
	sFLASH_Init();
 8015f50:	f7ff ff96 	bl	8015e80 <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 8015f54:	f7ff ffda 	bl	8015f0c <sFLASH_ReadID>
	switch (flash_id) {
 8015f58:	4b52      	ldr	r3, [pc, #328]	@ (80160a4 <sFLASH_GetInfo+0x158>)
 8015f5a:	4298      	cmp	r0, r3
 8015f5c:	f000 8085 	beq.w	801606a <sFLASH_GetInfo+0x11e>
 8015f60:	f0c0 809c 	bcc.w	801609c <sFLASH_GetInfo+0x150>
 8015f64:	4b50      	ldr	r3, [pc, #320]	@ (80160a8 <sFLASH_GetInfo+0x15c>)
 8015f66:	4298      	cmp	r0, r3
 8015f68:	f200 8098 	bhi.w	801609c <sFLASH_GetInfo+0x150>
 8015f6c:	3b03      	subs	r3, #3
 8015f6e:	4298      	cmp	r0, r3
 8015f70:	f0c0 8094 	bcc.w	801609c <sFLASH_GetInfo+0x150>
 8015f74:	4b4d      	ldr	r3, [pc, #308]	@ (80160ac <sFLASH_GetInfo+0x160>)
 8015f76:	4403      	add	r3, r0
 8015f78:	2b03      	cmp	r3, #3
 8015f7a:	f200 808f 	bhi.w	801609c <sFLASH_GetInfo+0x150>
 8015f7e:	e8df f003 	tbb	[pc, r3]
 8015f82:	2b02      	.short	0x2b02
 8015f84:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8015f86:	4c4a      	ldr	r4, [pc, #296]	@ (80160b0 <sFLASH_GetInfo+0x164>)
 8015f88:	4b4a      	ldr	r3, [pc, #296]	@ (80160b4 <sFLASH_GetInfo+0x168>)
 8015f8a:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015f90:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015f92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015f96:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015f98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015f9c:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 8015f9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015fa2:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q16", sizeof(flash_info.model_name) - 1);
 8015fa4:	2231      	movs	r2, #49	@ 0x31
 8015fa6:	4944      	ldr	r1, [pc, #272]	@ (80160b8 <sFLASH_GetInfo+0x16c>)
 8015fa8:	f104 000e 	add.w	r0, r4, #14
 8015fac:	f016 fd57 	bl	802ca5e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 8015fb6:	46ac      	mov	ip, r5
 8015fb8:	4c3d      	ldr	r4, [pc, #244]	@ (80160b0 <sFLASH_GetInfo+0x164>)
 8015fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015fbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015fc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015fc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015fcc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015fd0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8015fd4:	4628      	mov	r0, r5
 8015fd6:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8015fd8:	4c35      	ldr	r4, [pc, #212]	@ (80160b0 <sFLASH_GetInfo+0x164>)
 8015fda:	4b38      	ldr	r3, [pc, #224]	@ (80160bc <sFLASH_GetInfo+0x170>)
 8015fdc:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015fde:	2301      	movs	r3, #1
 8015fe0:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015fe2:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015fe8:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015fea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015fee:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8015ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015ff4:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q32", sizeof(flash_info.model_name) - 1);
 8015ff6:	2231      	movs	r2, #49	@ 0x31
 8015ff8:	4931      	ldr	r1, [pc, #196]	@ (80160c0 <sFLASH_GetInfo+0x174>)
 8015ffa:	f104 000e 	add.w	r0, r4, #14
 8015ffe:	f016 fd2e 	bl	802ca5e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016002:	2300      	movs	r3, #0
 8016004:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8016008:	e7d5      	b.n	8015fb6 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 801600a:	4c29      	ldr	r4, [pc, #164]	@ (80160b0 <sFLASH_GetInfo+0x164>)
 801600c:	4b2d      	ldr	r3, [pc, #180]	@ (80160c4 <sFLASH_GetInfo+0x178>)
 801600e:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016010:	2301      	movs	r3, #1
 8016012:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016014:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016016:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801601a:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 801601c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016020:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 8016022:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016026:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q64", sizeof(flash_info.model_name) - 1);
 8016028:	2231      	movs	r2, #49	@ 0x31
 801602a:	4927      	ldr	r1, [pc, #156]	@ (80160c8 <sFLASH_GetInfo+0x17c>)
 801602c:	f104 000e 	add.w	r0, r4, #14
 8016030:	f016 fd15 	bl	802ca5e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016034:	2300      	movs	r3, #0
 8016036:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801603a:	e7bc      	b.n	8015fb6 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 801603c:	4c1c      	ldr	r4, [pc, #112]	@ (80160b0 <sFLASH_GetInfo+0x164>)
 801603e:	4b1a      	ldr	r3, [pc, #104]	@ (80160a8 <sFLASH_GetInfo+0x15c>)
 8016040:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016042:	2301      	movs	r3, #1
 8016044:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016046:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801604c:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 801604e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016052:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 8016054:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q128", sizeof(flash_info.model_name) - 1);
 8016056:	2231      	movs	r2, #49	@ 0x31
 8016058:	491c      	ldr	r1, [pc, #112]	@ (80160cc <sFLASH_GetInfo+0x180>)
 801605a:	f104 000e 	add.w	r0, r4, #14
 801605e:	f016 fcfe 	bl	802ca5e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016062:	2300      	movs	r3, #0
 8016064:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8016068:	e7a5      	b.n	8015fb6 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 801606a:	4c11      	ldr	r4, [pc, #68]	@ (80160b0 <sFLASH_GetInfo+0x164>)
 801606c:	4b0d      	ldr	r3, [pc, #52]	@ (80160a4 <sFLASH_GetInfo+0x158>)
 801606e:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016070:	2301      	movs	r3, #1
 8016072:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016074:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801607a:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 801607c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016080:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8016082:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016086:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 8016088:	2231      	movs	r2, #49	@ 0x31
 801608a:	4911      	ldr	r1, [pc, #68]	@ (80160d0 <sFLASH_GetInfo+0x184>)
 801608c:	f104 000e 	add.w	r0, r4, #14
 8016090:	f016 fce5 	bl	802ca5e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016094:	2300      	movs	r3, #0
 8016096:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801609a:	e78c      	b.n	8015fb6 <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 801609c:	4b04      	ldr	r3, [pc, #16]	@ (80160b0 <sFLASH_GetInfo+0x164>)
 801609e:	2200      	movs	r2, #0
 80160a0:	601a      	str	r2, [r3, #0]
			break;
 80160a2:	e788      	b.n	8015fb6 <sFLASH_GetInfo+0x6a>
 80160a4:	00c22016 	.word	0x00c22016
 80160a8:	00ef4018 	.word	0x00ef4018
 80160ac:	ff10bfeb 	.word	0xff10bfeb
 80160b0:	20002908 	.word	0x20002908
 80160b4:	00ef4015 	.word	0x00ef4015
 80160b8:	0803890c 	.word	0x0803890c
 80160bc:	00ef4016 	.word	0x00ef4016
 80160c0:	08038914 	.word	0x08038914
 80160c4:	00ef4017 	.word	0x00ef4017
 80160c8:	0803891c 	.word	0x0803891c
 80160cc:	08038924 	.word	0x08038924
 80160d0:	0803892c 	.word	0x0803892c

080160d4 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 80160d4:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80160d6:	f7ff fe9f 	bl	8015e18 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 80160da:	2006      	movs	r0, #6
 80160dc:	f7ff febc 	bl	8015e58 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80160e0:	f7ff fea2 	bl	8015e28 <sFLASH_CS_HIGH>
}
 80160e4:	bd08      	pop	{r3, pc}
	...

080160e8 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 80160e8:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 80160ea:	4d09      	ldr	r5, [pc, #36]	@ (8016110 <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 80160ec:	f7ff fe94 	bl	8015e18 <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 80160f0:	2005      	movs	r0, #5
 80160f2:	f7ff feb1 	bl	8015e58 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 80160f6:	f7ff fe9f 	bl	8015e38 <sFLASH_ReadByte>
 80160fa:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 80160fc:	f7ff fe94 	bl	8015e28 <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 8016100:	462b      	mov	r3, r5
 8016102:	3d01      	subs	r5, #1
 8016104:	b113      	cbz	r3, 801610c <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8016106:	f014 0f01 	tst.w	r4, #1
 801610a:	d1ef      	bne.n	80160ec <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 801610c:	bd38      	pop	{r3, r4, r5, pc}
 801610e:	bf00      	nop
 8016110:	000186a0 	.word	0x000186a0

08016114 <sFLASH_EraseSector>:
{
 8016114:	b510      	push	{r4, lr}
 8016116:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 8016118:	f7ff ffdc 	bl	80160d4 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 801611c:	f7ff fe7c 	bl	8015e18 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 8016120:	2020      	movs	r0, #32
 8016122:	f7ff fe99 	bl	8015e58 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8016126:	f3c4 4007 	ubfx	r0, r4, #16, #8
 801612a:	f7ff fe95 	bl	8015e58 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 801612e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8016132:	f7ff fe91 	bl	8015e58 <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 8016136:	b2e0      	uxtb	r0, r4
 8016138:	f7ff fe8e 	bl	8015e58 <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 801613c:	f7ff fe74 	bl	8015e28 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8016140:	f7ff ffd2 	bl	80160e8 <sFLASH_WaitForWriteEnd>
}
 8016144:	bd10      	pop	{r4, pc}

08016146 <sFLASH_WritePage>:
{
 8016146:	b570      	push	{r4, r5, r6, lr}
 8016148:	4606      	mov	r6, r0
 801614a:	460c      	mov	r4, r1
 801614c:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 801614e:	f7ff ffc1 	bl	80160d4 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8016152:	f7ff fe61 	bl	8015e18 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 8016156:	2002      	movs	r0, #2
 8016158:	f7ff fe7e 	bl	8015e58 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 801615c:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8016160:	f7ff fe7a 	bl	8015e58 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8016164:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8016168:	f7ff fe76 	bl	8015e58 <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 801616c:	b2e0      	uxtb	r0, r4
 801616e:	f7ff fe73 	bl	8015e58 <sFLASH_SendByte>
  while (NumByteToWrite--)
 8016172:	e004      	b.n	801617e <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 8016174:	f816 0b01 	ldrb.w	r0, [r6], #1
 8016178:	f7ff fe6e 	bl	8015e58 <sFLASH_SendByte>
  while (NumByteToWrite--)
 801617c:	4625      	mov	r5, r4
 801617e:	1e6b      	subs	r3, r5, #1
 8016180:	b29c      	uxth	r4, r3
 8016182:	2d00      	cmp	r5, #0
 8016184:	d1f6      	bne.n	8016174 <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 8016186:	f7ff fe4f 	bl	8015e28 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 801618a:	f7ff ffad 	bl	80160e8 <sFLASH_WaitForWriteEnd>
}
 801618e:	bd70      	pop	{r4, r5, r6, pc}

08016190 <sFLASH_WriteBuffer>:
{
 8016190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016194:	4605      	mov	r5, r0
 8016196:	460c      	mov	r4, r1
 8016198:	4617      	mov	r7, r2
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 801619a:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 801619c:	0a11      	lsrs	r1, r2, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 801619e:	b9d3      	cbnz	r3, 80161d6 <sFLASH_WriteBuffer+0x46>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80161a0:	b971      	cbnz	r1, 80161c0 <sFLASH_WriteBuffer+0x30>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80161a2:	4621      	mov	r1, r4
 80161a4:	f7ff ffcf 	bl	8016146 <sFLASH_WritePage>
 80161a8:	e013      	b.n	80161d2 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80161aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80161ae:	4621      	mov	r1, r4
 80161b0:	4628      	mov	r0, r5
 80161b2:	f7ff ffc8 	bl	8016146 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80161b6:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 80161ba:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 80161be:	4631      	mov	r1, r6
 80161c0:	1e4b      	subs	r3, r1, #1
 80161c2:	b2de      	uxtb	r6, r3
 80161c4:	2900      	cmp	r1, #0
 80161c6:	d1f0      	bne.n	80161aa <sFLASH_WriteBuffer+0x1a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80161c8:	b2fa      	uxtb	r2, r7
 80161ca:	4621      	mov	r1, r4
 80161cc:	4628      	mov	r0, r5
 80161ce:	f7ff ffba 	bl	8016146 <sFLASH_WritePage>
}
 80161d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161d6:	f1c3 0800 	rsb	r8, r3, #0
 80161da:	fa5f f888 	uxtb.w	r8, r8
 80161de:	b2d2      	uxtb	r2, r2
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80161e0:	b9a1      	cbnz	r1, 801620c <sFLASH_WriteBuffer+0x7c>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 80161e2:	4590      	cmp	r8, r2
 80161e4:	d20d      	bcs.n	8016202 <sFLASH_WriteBuffer+0x72>
        temp = NumOfSingle - count;
 80161e6:	4413      	add	r3, r2
 80161e8:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 80161ea:	4642      	mov	r2, r8
 80161ec:	4621      	mov	r1, r4
 80161ee:	f7ff ffaa 	bl	8016146 <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 80161f2:	4632      	mov	r2, r6
 80161f4:	eb08 0104 	add.w	r1, r8, r4
 80161f8:	eb05 0008 	add.w	r0, r5, r8
 80161fc:	f7ff ffa3 	bl	8016146 <sFLASH_WritePage>
 8016200:	e7e7      	b.n	80161d2 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8016202:	463a      	mov	r2, r7
 8016204:	4621      	mov	r1, r4
 8016206:	f7ff ff9e 	bl	8016146 <sFLASH_WritePage>
 801620a:	e7e2      	b.n	80161d2 <sFLASH_WriteBuffer+0x42>
      NumByteToWrite -= count;
 801620c:	eba7 0708 	sub.w	r7, r7, r8
 8016210:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8016214:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8016218:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 801621a:	4642      	mov	r2, r8
 801621c:	4621      	mov	r1, r4
 801621e:	f7ff ff92 	bl	8016146 <sFLASH_WritePage>
      WriteAddr +=  count;
 8016222:	4444      	add	r4, r8
      pBuffer += count;
 8016224:	4445      	add	r5, r8
      while (NumOfPage--)
 8016226:	e00a      	b.n	801623e <sFLASH_WriteBuffer+0xae>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8016228:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801622c:	4621      	mov	r1, r4
 801622e:	4628      	mov	r0, r5
 8016230:	f7ff ff89 	bl	8016146 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8016234:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 8016238:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 801623c:	4646      	mov	r6, r8
 801623e:	1e73      	subs	r3, r6, #1
 8016240:	fa5f f883 	uxtb.w	r8, r3
 8016244:	2e00      	cmp	r6, #0
 8016246:	d1ef      	bne.n	8016228 <sFLASH_WriteBuffer+0x98>
      if (NumOfSingle != 0)
 8016248:	2f00      	cmp	r7, #0
 801624a:	d0c2      	beq.n	80161d2 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 801624c:	fa5f f289 	uxtb.w	r2, r9
 8016250:	4621      	mov	r1, r4
 8016252:	4628      	mov	r0, r5
 8016254:	f7ff ff77 	bl	8016146 <sFLASH_WritePage>
}
 8016258:	e7bb      	b.n	80161d2 <sFLASH_WriteBuffer+0x42>
	...

0801625c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801625c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801625e:	4b0b      	ldr	r3, [pc, #44]	@ (801628c <HAL_Init+0x30>)
 8016260:	681a      	ldr	r2, [r3, #0]
 8016262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016266:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8016268:	681a      	ldr	r2, [r3, #0]
 801626a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801626e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016270:	681a      	ldr	r2, [r3, #0]
 8016272:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016276:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8016278:	2003      	movs	r0, #3
 801627a:	f000 f883 	bl	8016384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801627e:	200f      	movs	r0, #15
 8016280:	f7fc f826 	bl	80122d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8016284:	f7fc f802 	bl	801228c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8016288:	2000      	movs	r0, #0
 801628a:	bd08      	pop	{r3, pc}
 801628c:	40023c00 	.word	0x40023c00

08016290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8016290:	4a03      	ldr	r2, [pc, #12]	@ (80162a0 <HAL_IncTick+0x10>)
 8016292:	6811      	ldr	r1, [r2, #0]
 8016294:	4b03      	ldr	r3, [pc, #12]	@ (80162a4 <HAL_IncTick+0x14>)
 8016296:	781b      	ldrb	r3, [r3, #0]
 8016298:	440b      	add	r3, r1
 801629a:	6013      	str	r3, [r2, #0]
}
 801629c:	4770      	bx	lr
 801629e:	bf00      	nop
 80162a0:	2000295c 	.word	0x2000295c
 80162a4:	20000106 	.word	0x20000106

080162a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80162a8:	4b01      	ldr	r3, [pc, #4]	@ (80162b0 <HAL_GetTick+0x8>)
 80162aa:	6818      	ldr	r0, [r3, #0]
}
 80162ac:	4770      	bx	lr
 80162ae:	bf00      	nop
 80162b0:	2000295c 	.word	0x2000295c

080162b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80162b4:	b538      	push	{r3, r4, r5, lr}
 80162b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80162b8:	f7ff fff6 	bl	80162a8 <HAL_GetTick>
 80162bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80162be:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80162c2:	d002      	beq.n	80162ca <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80162c4:	4b04      	ldr	r3, [pc, #16]	@ (80162d8 <HAL_Delay+0x24>)
 80162c6:	781b      	ldrb	r3, [r3, #0]
 80162c8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80162ca:	f7ff ffed 	bl	80162a8 <HAL_GetTick>
 80162ce:	1b40      	subs	r0, r0, r5
 80162d0:	42a0      	cmp	r0, r4
 80162d2:	d3fa      	bcc.n	80162ca <HAL_Delay+0x16>
  {
  }
}
 80162d4:	bd38      	pop	{r3, r4, r5, pc}
 80162d6:	bf00      	nop
 80162d8:	20000106 	.word	0x20000106

080162dc <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80162dc:	2800      	cmp	r0, #0
 80162de:	db07      	blt.n	80162f0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80162e0:	f000 021f 	and.w	r2, r0, #31
 80162e4:	0940      	lsrs	r0, r0, #5
 80162e6:	2301      	movs	r3, #1
 80162e8:	4093      	lsls	r3, r2
 80162ea:	4a02      	ldr	r2, [pc, #8]	@ (80162f4 <__NVIC_EnableIRQ+0x18>)
 80162ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80162f0:	4770      	bx	lr
 80162f2:	bf00      	nop
 80162f4:	e000e100 	.word	0xe000e100

080162f8 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80162f8:	2800      	cmp	r0, #0
 80162fa:	db08      	blt.n	801630e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80162fc:	0109      	lsls	r1, r1, #4
 80162fe:	b2c9      	uxtb	r1, r1
 8016300:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8016304:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8016308:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 801630c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801630e:	f000 000f 	and.w	r0, r0, #15
 8016312:	0109      	lsls	r1, r1, #4
 8016314:	b2c9      	uxtb	r1, r1
 8016316:	4b01      	ldr	r3, [pc, #4]	@ (801631c <__NVIC_SetPriority+0x24>)
 8016318:	5419      	strb	r1, [r3, r0]
  }
}
 801631a:	4770      	bx	lr
 801631c:	e000ed14 	.word	0xe000ed14

08016320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016320:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016322:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016326:	f1c0 0c07 	rsb	ip, r0, #7
 801632a:	f1bc 0f04 	cmp.w	ip, #4
 801632e:	bf28      	it	cs
 8016330:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016334:	1d03      	adds	r3, r0, #4
 8016336:	2b06      	cmp	r3, #6
 8016338:	d90f      	bls.n	801635a <NVIC_EncodePriority+0x3a>
 801633a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801633c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8016340:	fa0e f00c 	lsl.w	r0, lr, ip
 8016344:	ea21 0100 	bic.w	r1, r1, r0
 8016348:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801634a:	fa0e fe03 	lsl.w	lr, lr, r3
 801634e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8016352:	ea41 0002 	orr.w	r0, r1, r2
 8016356:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801635a:	2300      	movs	r3, #0
 801635c:	e7ee      	b.n	801633c <NVIC_EncodePriority+0x1c>
	...

08016360 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8016360:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8016364:	4905      	ldr	r1, [pc, #20]	@ (801637c <__NVIC_SystemReset+0x1c>)
 8016366:	68ca      	ldr	r2, [r1, #12]
 8016368:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801636c:	4b04      	ldr	r3, [pc, #16]	@ (8016380 <__NVIC_SystemReset+0x20>)
 801636e:	4313      	orrs	r3, r2
 8016370:	60cb      	str	r3, [r1, #12]
 8016372:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8016376:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8016378:	e7fd      	b.n	8016376 <__NVIC_SystemReset+0x16>
 801637a:	bf00      	nop
 801637c:	e000ed00 	.word	0xe000ed00
 8016380:	05fa0004 	.word	0x05fa0004

08016384 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016384:	4a07      	ldr	r2, [pc, #28]	@ (80163a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8016386:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8016388:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 801638c:	041b      	lsls	r3, r3, #16
 801638e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016390:	0200      	lsls	r0, r0, #8
 8016392:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016396:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8016398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 801639c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80163a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80163a2:	4770      	bx	lr
 80163a4:	e000ed00 	.word	0xe000ed00

080163a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80163a8:	b510      	push	{r4, lr}
 80163aa:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80163ac:	4b05      	ldr	r3, [pc, #20]	@ (80163c4 <HAL_NVIC_SetPriority+0x1c>)
 80163ae:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80163b0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80163b4:	f7ff ffb4 	bl	8016320 <NVIC_EncodePriority>
 80163b8:	4601      	mov	r1, r0
 80163ba:	4620      	mov	r0, r4
 80163bc:	f7ff ff9c 	bl	80162f8 <__NVIC_SetPriority>
}
 80163c0:	bd10      	pop	{r4, pc}
 80163c2:	bf00      	nop
 80163c4:	e000ed00 	.word	0xe000ed00

080163c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80163c8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80163ca:	f7ff ff87 	bl	80162dc <__NVIC_EnableIRQ>
}
 80163ce:	bd08      	pop	{r3, pc}

080163d0 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80163d0:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 80163d2:	f7ff ffc5 	bl	8016360 <__NVIC_SystemReset>
	...

080163d8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80163d8:	2300      	movs	r3, #0
 80163da:	2b0f      	cmp	r3, #15
 80163dc:	f200 80d7 	bhi.w	801658e <HAL_GPIO_Init+0x1b6>
{
 80163e0:	b570      	push	{r4, r5, r6, lr}
 80163e2:	b082      	sub	sp, #8
 80163e4:	e065      	b.n	80164b2 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80163e6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80163e8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80163ec:	2403      	movs	r4, #3
 80163ee:	fa04 f40e 	lsl.w	r4, r4, lr
 80163f2:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80163f6:	68cc      	ldr	r4, [r1, #12]
 80163f8:	fa04 f40e 	lsl.w	r4, r4, lr
 80163fc:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80163fe:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016400:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016402:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8016406:	684a      	ldr	r2, [r1, #4]
 8016408:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801640c:	409a      	lsls	r2, r3
 801640e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8016410:	6042      	str	r2, [r0, #4]
 8016412:	e05c      	b.n	80164ce <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016414:	08dc      	lsrs	r4, r3, #3
 8016416:	3408      	adds	r4, #8
 8016418:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801641c:	f003 0507 	and.w	r5, r3, #7
 8016420:	00ad      	lsls	r5, r5, #2
 8016422:	f04f 0e0f 	mov.w	lr, #15
 8016426:	fa0e fe05 	lsl.w	lr, lr, r5
 801642a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801642e:	690a      	ldr	r2, [r1, #16]
 8016430:	40aa      	lsls	r2, r5
 8016432:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8016436:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 801643a:	e05c      	b.n	80164f6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801643c:	2204      	movs	r2, #4
 801643e:	e000      	b.n	8016442 <HAL_GPIO_Init+0x6a>
 8016440:	2200      	movs	r2, #0
 8016442:	fa02 f20e 	lsl.w	r2, r2, lr
 8016446:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016448:	3402      	adds	r4, #2
 801644a:	4d51      	ldr	r5, [pc, #324]	@ (8016590 <HAL_GPIO_Init+0x1b8>)
 801644c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016450:	4a50      	ldr	r2, [pc, #320]	@ (8016594 <HAL_GPIO_Init+0x1bc>)
 8016452:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8016454:	ea6f 020c 	mvn.w	r2, ip
 8016458:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801645c:	684e      	ldr	r6, [r1, #4]
 801645e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8016462:	d001      	beq.n	8016468 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8016464:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8016468:	4c4a      	ldr	r4, [pc, #296]	@ (8016594 <HAL_GPIO_Init+0x1bc>)
 801646a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 801646c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 801646e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016472:	684e      	ldr	r6, [r1, #4]
 8016474:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8016478:	d001      	beq.n	801647e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 801647a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 801647e:	4c45      	ldr	r4, [pc, #276]	@ (8016594 <HAL_GPIO_Init+0x1bc>)
 8016480:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8016482:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8016484:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8016488:	684e      	ldr	r6, [r1, #4]
 801648a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 801648e:	d001      	beq.n	8016494 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8016490:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8016494:	4c3f      	ldr	r4, [pc, #252]	@ (8016594 <HAL_GPIO_Init+0x1bc>)
 8016496:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016498:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 801649a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801649c:	684d      	ldr	r5, [r1, #4]
 801649e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80164a2:	d001      	beq.n	80164a8 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80164a4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80164a8:	4c3a      	ldr	r4, [pc, #232]	@ (8016594 <HAL_GPIO_Init+0x1bc>)
 80164aa:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80164ac:	3301      	adds	r3, #1
 80164ae:	2b0f      	cmp	r3, #15
 80164b0:	d86b      	bhi.n	801658a <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80164b2:	2201      	movs	r2, #1
 80164b4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80164b6:	680c      	ldr	r4, [r1, #0]
 80164b8:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80164bc:	ea32 0404 	bics.w	r4, r2, r4
 80164c0:	d1f4      	bne.n	80164ac <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80164c2:	684c      	ldr	r4, [r1, #4]
 80164c4:	f004 0403 	and.w	r4, r4, #3
 80164c8:	3c01      	subs	r4, #1
 80164ca:	2c01      	cmp	r4, #1
 80164cc:	d98b      	bls.n	80163e6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80164ce:	684a      	ldr	r2, [r1, #4]
 80164d0:	f002 0203 	and.w	r2, r2, #3
 80164d4:	2a03      	cmp	r2, #3
 80164d6:	d009      	beq.n	80164ec <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80164d8:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80164da:	005d      	lsls	r5, r3, #1
 80164dc:	2203      	movs	r2, #3
 80164de:	40aa      	lsls	r2, r5
 80164e0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80164e4:	688a      	ldr	r2, [r1, #8]
 80164e6:	40aa      	lsls	r2, r5
 80164e8:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80164ea:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80164ec:	684a      	ldr	r2, [r1, #4]
 80164ee:	f002 0203 	and.w	r2, r2, #3
 80164f2:	2a02      	cmp	r2, #2
 80164f4:	d08e      	beq.n	8016414 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80164f6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80164f8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80164fc:	2203      	movs	r2, #3
 80164fe:	fa02 f20e 	lsl.w	r2, r2, lr
 8016502:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016506:	684a      	ldr	r2, [r1, #4]
 8016508:	f002 0203 	and.w	r2, r2, #3
 801650c:	fa02 f20e 	lsl.w	r2, r2, lr
 8016510:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8016512:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8016514:	684a      	ldr	r2, [r1, #4]
 8016516:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 801651a:	d0c7      	beq.n	80164ac <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801651c:	2200      	movs	r2, #0
 801651e:	9201      	str	r2, [sp, #4]
 8016520:	4a1d      	ldr	r2, [pc, #116]	@ (8016598 <HAL_GPIO_Init+0x1c0>)
 8016522:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8016524:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8016528:	6454      	str	r4, [r2, #68]	@ 0x44
 801652a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 801652c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8016530:	9201      	str	r2, [sp, #4]
 8016532:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8016534:	089c      	lsrs	r4, r3, #2
 8016536:	1ca5      	adds	r5, r4, #2
 8016538:	4a15      	ldr	r2, [pc, #84]	@ (8016590 <HAL_GPIO_Init+0x1b8>)
 801653a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801653e:	f003 0e03 	and.w	lr, r3, #3
 8016542:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8016546:	220f      	movs	r2, #15
 8016548:	fa02 f20e 	lsl.w	r2, r2, lr
 801654c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016550:	4a12      	ldr	r2, [pc, #72]	@ (801659c <HAL_GPIO_Init+0x1c4>)
 8016552:	4290      	cmp	r0, r2
 8016554:	f43f af74 	beq.w	8016440 <HAL_GPIO_Init+0x68>
 8016558:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801655c:	4290      	cmp	r0, r2
 801655e:	d00e      	beq.n	801657e <HAL_GPIO_Init+0x1a6>
 8016560:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016564:	4290      	cmp	r0, r2
 8016566:	d00c      	beq.n	8016582 <HAL_GPIO_Init+0x1aa>
 8016568:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801656c:	4290      	cmp	r0, r2
 801656e:	d00a      	beq.n	8016586 <HAL_GPIO_Init+0x1ae>
 8016570:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016574:	4290      	cmp	r0, r2
 8016576:	f43f af61 	beq.w	801643c <HAL_GPIO_Init+0x64>
 801657a:	2207      	movs	r2, #7
 801657c:	e761      	b.n	8016442 <HAL_GPIO_Init+0x6a>
 801657e:	2201      	movs	r2, #1
 8016580:	e75f      	b.n	8016442 <HAL_GPIO_Init+0x6a>
 8016582:	2202      	movs	r2, #2
 8016584:	e75d      	b.n	8016442 <HAL_GPIO_Init+0x6a>
 8016586:	2203      	movs	r2, #3
 8016588:	e75b      	b.n	8016442 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 801658a:	b002      	add	sp, #8
 801658c:	bd70      	pop	{r4, r5, r6, pc}
 801658e:	4770      	bx	lr
 8016590:	40013800 	.word	0x40013800
 8016594:	40013c00 	.word	0x40013c00
 8016598:	40023800 	.word	0x40023800
 801659c:	40020000 	.word	0x40020000

080165a0 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80165a0:	2300      	movs	r3, #0
 80165a2:	2b0f      	cmp	r3, #15
 80165a4:	d87c      	bhi.n	80166a0 <HAL_GPIO_DeInit+0x100>
{
 80165a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165a8:	e02d      	b.n	8016606 <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80165aa:	2504      	movs	r5, #4
 80165ac:	e000      	b.n	80165b0 <HAL_GPIO_DeInit+0x10>
 80165ae:	2500      	movs	r5, #0
 80165b0:	fa05 f50c 	lsl.w	r5, r5, ip
 80165b4:	42a5      	cmp	r5, r4
 80165b6:	d057      	beq.n	8016668 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80165b8:	6804      	ldr	r4, [r0, #0]
 80165ba:	005d      	lsls	r5, r3, #1
 80165bc:	f04f 0c03 	mov.w	ip, #3
 80165c0:	fa0c fc05 	lsl.w	ip, ip, r5
 80165c4:	ea24 040c 	bic.w	r4, r4, ip
 80165c8:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80165ca:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80165ce:	f10e 0e08 	add.w	lr, lr, #8
 80165d2:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80165d6:	f003 0607 	and.w	r6, r3, #7
 80165da:	00b6      	lsls	r6, r6, #2
 80165dc:	250f      	movs	r5, #15
 80165de:	40b5      	lsls	r5, r6
 80165e0:	ea24 0405 	bic.w	r4, r4, r5
 80165e4:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80165e8:	68c4      	ldr	r4, [r0, #12]
 80165ea:	ea24 040c 	bic.w	r4, r4, ip
 80165ee:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80165f0:	6844      	ldr	r4, [r0, #4]
 80165f2:	ea24 0202 	bic.w	r2, r4, r2
 80165f6:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80165f8:	6882      	ldr	r2, [r0, #8]
 80165fa:	ea22 020c 	bic.w	r2, r2, ip
 80165fe:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016600:	3301      	adds	r3, #1
 8016602:	2b0f      	cmp	r3, #15
 8016604:	d84b      	bhi.n	801669e <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8016606:	2201      	movs	r2, #1
 8016608:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 801660a:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 801660e:	ea32 0401 	bics.w	r4, r2, r1
 8016612:	d1f5      	bne.n	8016600 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8016614:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8016618:	f10e 0502 	add.w	r5, lr, #2
 801661c:	4c21      	ldr	r4, [pc, #132]	@ (80166a4 <HAL_GPIO_DeInit+0x104>)
 801661e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8016622:	f003 0c03 	and.w	ip, r3, #3
 8016626:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801662a:	250f      	movs	r5, #15
 801662c:	fa05 f70c 	lsl.w	r7, r5, ip
 8016630:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8016632:	4d1d      	ldr	r5, [pc, #116]	@ (80166a8 <HAL_GPIO_DeInit+0x108>)
 8016634:	42a8      	cmp	r0, r5
 8016636:	d0ba      	beq.n	80165ae <HAL_GPIO_DeInit+0xe>
 8016638:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801663c:	42a8      	cmp	r0, r5
 801663e:	d00d      	beq.n	801665c <HAL_GPIO_DeInit+0xbc>
 8016640:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016644:	42a8      	cmp	r0, r5
 8016646:	d00b      	beq.n	8016660 <HAL_GPIO_DeInit+0xc0>
 8016648:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801664c:	42a8      	cmp	r0, r5
 801664e:	d009      	beq.n	8016664 <HAL_GPIO_DeInit+0xc4>
 8016650:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016654:	42a8      	cmp	r0, r5
 8016656:	d0a8      	beq.n	80165aa <HAL_GPIO_DeInit+0xa>
 8016658:	2507      	movs	r5, #7
 801665a:	e7a9      	b.n	80165b0 <HAL_GPIO_DeInit+0x10>
 801665c:	2501      	movs	r5, #1
 801665e:	e7a7      	b.n	80165b0 <HAL_GPIO_DeInit+0x10>
 8016660:	2502      	movs	r5, #2
 8016662:	e7a5      	b.n	80165b0 <HAL_GPIO_DeInit+0x10>
 8016664:	2503      	movs	r5, #3
 8016666:	e7a3      	b.n	80165b0 <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8016668:	4c10      	ldr	r4, [pc, #64]	@ (80166ac <HAL_GPIO_DeInit+0x10c>)
 801666a:	6825      	ldr	r5, [r4, #0]
 801666c:	ea25 0506 	bic.w	r5, r5, r6
 8016670:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8016672:	6865      	ldr	r5, [r4, #4]
 8016674:	ea25 0506 	bic.w	r5, r5, r6
 8016678:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801667a:	68e5      	ldr	r5, [r4, #12]
 801667c:	ea25 0506 	bic.w	r5, r5, r6
 8016680:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8016682:	68a5      	ldr	r5, [r4, #8]
 8016684:	ea25 0506 	bic.w	r5, r5, r6
 8016688:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801668a:	4e06      	ldr	r6, [pc, #24]	@ (80166a4 <HAL_GPIO_DeInit+0x104>)
 801668c:	f10e 0402 	add.w	r4, lr, #2
 8016690:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8016694:	ea25 0507 	bic.w	r5, r5, r7
 8016698:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 801669c:	e78c      	b.n	80165b8 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 801669e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166a0:	4770      	bx	lr
 80166a2:	bf00      	nop
 80166a4:	40013800 	.word	0x40013800
 80166a8:	40020000 	.word	0x40020000
 80166ac:	40013c00 	.word	0x40013c00

080166b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80166b0:	6903      	ldr	r3, [r0, #16]
 80166b2:	4219      	tst	r1, r3
 80166b4:	d001      	beq.n	80166ba <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80166b6:	2001      	movs	r0, #1
 80166b8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80166ba:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80166bc:	4770      	bx	lr

080166be <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80166be:	b10a      	cbz	r2, 80166c4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80166c0:	6181      	str	r1, [r0, #24]
 80166c2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80166c4:	0409      	lsls	r1, r1, #16
 80166c6:	6181      	str	r1, [r0, #24]
  }
}
 80166c8:	4770      	bx	lr

080166ca <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80166ca:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80166cc:	ea01 0203 	and.w	r2, r1, r3
 80166d0:	ea21 0103 	bic.w	r1, r1, r3
 80166d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80166d8:	6181      	str	r1, [r0, #24]
}
 80166da:	4770      	bx	lr

080166dc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80166dc:	6803      	ldr	r3, [r0, #0]
 80166de:	695a      	ldr	r2, [r3, #20]
 80166e0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80166e4:	d101      	bne.n	80166ea <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80166e6:	2000      	movs	r0, #0
}
 80166e8:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80166ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80166ee:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80166f0:	2300      	movs	r3, #0
 80166f2:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80166f4:	2220      	movs	r2, #32
 80166f6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80166fa:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80166fe:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8016700:	f042 0204 	orr.w	r2, r2, #4
 8016704:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8016706:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 801670a:	2001      	movs	r0, #1
 801670c:	4770      	bx	lr

0801670e <I2C_WaitOnFlagUntilTimeout>:
{
 801670e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016712:	4606      	mov	r6, r0
 8016714:	460c      	mov	r4, r1
 8016716:	4617      	mov	r7, r2
 8016718:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801671a:	e03b      	b.n	8016794 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801671c:	f7ff fdc4 	bl	80162a8 <HAL_GetTick>
 8016720:	9b06      	ldr	r3, [sp, #24]
 8016722:	1ac0      	subs	r0, r0, r3
 8016724:	4540      	cmp	r0, r8
 8016726:	d802      	bhi.n	801672e <I2C_WaitOnFlagUntilTimeout+0x20>
 8016728:	f1b8 0f00 	cmp.w	r8, #0
 801672c:	d132      	bne.n	8016794 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801672e:	2d01      	cmp	r5, #1
 8016730:	d018      	beq.n	8016764 <I2C_WaitOnFlagUntilTimeout+0x56>
 8016732:	6833      	ldr	r3, [r6, #0]
 8016734:	699b      	ldr	r3, [r3, #24]
 8016736:	ea24 0303 	bic.w	r3, r4, r3
 801673a:	b29b      	uxth	r3, r3
 801673c:	fab3 f383 	clz	r3, r3
 8016740:	095b      	lsrs	r3, r3, #5
 8016742:	429f      	cmp	r7, r3
 8016744:	d126      	bne.n	8016794 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8016746:	2300      	movs	r3, #0
 8016748:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 801674a:	2220      	movs	r2, #32
 801674c:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8016750:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8016754:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016756:	f042 0220 	orr.w	r2, r2, #32
 801675a:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 801675c:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8016760:	2001      	movs	r0, #1
 8016762:	e027      	b.n	80167b4 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016764:	6833      	ldr	r3, [r6, #0]
 8016766:	695b      	ldr	r3, [r3, #20]
 8016768:	ea24 0303 	bic.w	r3, r4, r3
 801676c:	b29b      	uxth	r3, r3
 801676e:	fab3 f383 	clz	r3, r3
 8016772:	095b      	lsrs	r3, r3, #5
 8016774:	e7e5      	b.n	8016742 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016776:	6833      	ldr	r3, [r6, #0]
 8016778:	695b      	ldr	r3, [r3, #20]
 801677a:	ea24 0c03 	bic.w	ip, r4, r3
 801677e:	fa1f fc8c 	uxth.w	ip, ip
 8016782:	fabc fc8c 	clz	ip, ip
 8016786:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801678a:	4567      	cmp	r7, ip
 801678c:	d111      	bne.n	80167b2 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 801678e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8016792:	d1c3      	bne.n	801671c <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016794:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8016798:	2d01      	cmp	r5, #1
 801679a:	d0ec      	beq.n	8016776 <I2C_WaitOnFlagUntilTimeout+0x68>
 801679c:	6833      	ldr	r3, [r6, #0]
 801679e:	699b      	ldr	r3, [r3, #24]
 80167a0:	ea24 0c03 	bic.w	ip, r4, r3
 80167a4:	fa1f fc8c 	uxth.w	ip, ip
 80167a8:	fabc fc8c 	clz	ip, ip
 80167ac:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80167b0:	e7eb      	b.n	801678a <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 80167b2:	2000      	movs	r0, #0
}
 80167b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080167b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80167b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167bc:	4605      	mov	r5, r0
 80167be:	460e      	mov	r6, r1
 80167c0:	4690      	mov	r8, r2
 80167c2:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80167c4:	e053      	b.n	801686e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80167c6:	681a      	ldr	r2, [r3, #0]
 80167c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80167cc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80167ce:	682b      	ldr	r3, [r5, #0]
 80167d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80167d4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80167d6:	2300      	movs	r3, #0
 80167d8:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80167da:	2220      	movs	r2, #32
 80167dc:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80167e0:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80167e4:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80167e6:	f042 0204 	orr.w	r2, r2, #4
 80167ea:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80167ec:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80167f0:	2001      	movs	r0, #1
 80167f2:	e04a      	b.n	801688a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80167f4:	f7ff fd58 	bl	80162a8 <HAL_GetTick>
 80167f8:	eba0 0009 	sub.w	r0, r0, r9
 80167fc:	4540      	cmp	r0, r8
 80167fe:	d802      	bhi.n	8016806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8016800:	f1b8 0f00 	cmp.w	r8, #0
 8016804:	d133      	bne.n	801686e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8016806:	2f01      	cmp	r7, #1
 8016808:	d017      	beq.n	801683a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 801680a:	682b      	ldr	r3, [r5, #0]
 801680c:	699b      	ldr	r3, [r3, #24]
 801680e:	ea26 0303 	bic.w	r3, r6, r3
 8016812:	b29b      	uxth	r3, r3
 8016814:	3b00      	subs	r3, #0
 8016816:	bf18      	it	ne
 8016818:	2301      	movne	r3, #1
 801681a:	b343      	cbz	r3, 801686e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 801681c:	2300      	movs	r3, #0
 801681e:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016820:	2220      	movs	r2, #32
 8016822:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016826:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801682a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 801682c:	f042 0220 	orr.w	r2, r2, #32
 8016830:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016832:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8016836:	2001      	movs	r0, #1
 8016838:	e027      	b.n	801688a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 801683a:	682b      	ldr	r3, [r5, #0]
 801683c:	695b      	ldr	r3, [r3, #20]
 801683e:	ea26 0303 	bic.w	r3, r6, r3
 8016842:	b29b      	uxth	r3, r3
 8016844:	3b00      	subs	r3, #0
 8016846:	bf18      	it	ne
 8016848:	2301      	movne	r3, #1
 801684a:	e7e6      	b.n	801681a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801684c:	682b      	ldr	r3, [r5, #0]
 801684e:	699c      	ldr	r4, [r3, #24]
 8016850:	ea26 0404 	bic.w	r4, r6, r4
 8016854:	b2a4      	uxth	r4, r4
 8016856:	3c00      	subs	r4, #0
 8016858:	bf18      	it	ne
 801685a:	2401      	movne	r4, #1
 801685c:	b1a4      	cbz	r4, 8016888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801685e:	682b      	ldr	r3, [r5, #0]
 8016860:	695a      	ldr	r2, [r3, #20]
 8016862:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8016866:	d1ae      	bne.n	80167c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8016868:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 801686c:	d1c2      	bne.n	80167f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801686e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8016872:	2f01      	cmp	r7, #1
 8016874:	d1ea      	bne.n	801684c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8016876:	682b      	ldr	r3, [r5, #0]
 8016878:	695c      	ldr	r4, [r3, #20]
 801687a:	ea26 0404 	bic.w	r4, r6, r4
 801687e:	b2a4      	uxth	r4, r4
 8016880:	3c00      	subs	r4, #0
 8016882:	bf18      	it	ne
 8016884:	2401      	movne	r4, #1
 8016886:	e7e9      	b.n	801685c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8016888:	2000      	movs	r0, #0
}
 801688a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08016890 <I2C_MasterRequestWrite>:
{
 8016890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016892:	b083      	sub	sp, #12
 8016894:	4604      	mov	r4, r0
 8016896:	460d      	mov	r5, r1
 8016898:	4616      	mov	r6, r2
 801689a:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801689c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801689e:	2b08      	cmp	r3, #8
 80168a0:	d00d      	beq.n	80168be <I2C_MasterRequestWrite+0x2e>
 80168a2:	2b01      	cmp	r3, #1
 80168a4:	d00b      	beq.n	80168be <I2C_MasterRequestWrite+0x2e>
 80168a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80168aa:	d008      	beq.n	80168be <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80168ac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80168ae:	2b12      	cmp	r3, #18
 80168b0:	d10a      	bne.n	80168c8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80168b2:	6802      	ldr	r2, [r0, #0]
 80168b4:	6813      	ldr	r3, [r2, #0]
 80168b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80168ba:	6013      	str	r3, [r2, #0]
 80168bc:	e004      	b.n	80168c8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80168be:	6822      	ldr	r2, [r4, #0]
 80168c0:	6813      	ldr	r3, [r2, #0]
 80168c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80168c6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80168c8:	9700      	str	r7, [sp, #0]
 80168ca:	4633      	mov	r3, r6
 80168cc:	2200      	movs	r2, #0
 80168ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80168d2:	4620      	mov	r0, r4
 80168d4:	f7ff ff1b 	bl	801670e <I2C_WaitOnFlagUntilTimeout>
 80168d8:	b980      	cbnz	r0, 80168fc <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80168da:	6923      	ldr	r3, [r4, #16]
 80168dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80168e0:	d116      	bne.n	8016910 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80168e2:	6823      	ldr	r3, [r4, #0]
 80168e4:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80168e8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80168ea:	463b      	mov	r3, r7
 80168ec:	4632      	mov	r2, r6
 80168ee:	4913      	ldr	r1, [pc, #76]	@ (801693c <I2C_MasterRequestWrite+0xac>)
 80168f0:	4620      	mov	r0, r4
 80168f2:	f7ff ff61 	bl	80167b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80168f6:	b9f8      	cbnz	r0, 8016938 <I2C_MasterRequestWrite+0xa8>
}
 80168f8:	b003      	add	sp, #12
 80168fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80168fc:	6823      	ldr	r3, [r4, #0]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016904:	d002      	beq.n	801690c <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016906:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801690a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 801690c:	2003      	movs	r0, #3
 801690e:	e7f3      	b.n	80168f8 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8016910:	11eb      	asrs	r3, r5, #7
 8016912:	6822      	ldr	r2, [r4, #0]
 8016914:	f003 0306 	and.w	r3, r3, #6
 8016918:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 801691c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801691e:	463b      	mov	r3, r7
 8016920:	4632      	mov	r2, r6
 8016922:	4907      	ldr	r1, [pc, #28]	@ (8016940 <I2C_MasterRequestWrite+0xb0>)
 8016924:	4620      	mov	r0, r4
 8016926:	f7ff ff47 	bl	80167b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801692a:	b918      	cbnz	r0, 8016934 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801692c:	6823      	ldr	r3, [r4, #0]
 801692e:	b2ed      	uxtb	r5, r5
 8016930:	611d      	str	r5, [r3, #16]
 8016932:	e7da      	b.n	80168ea <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8016934:	2001      	movs	r0, #1
 8016936:	e7df      	b.n	80168f8 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8016938:	2001      	movs	r0, #1
 801693a:	e7dd      	b.n	80168f8 <I2C_MasterRequestWrite+0x68>
 801693c:	00010002 	.word	0x00010002
 8016940:	00010008 	.word	0x00010008

08016944 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8016944:	b570      	push	{r4, r5, r6, lr}
 8016946:	4604      	mov	r4, r0
 8016948:	460d      	mov	r5, r1
 801694a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801694c:	6823      	ldr	r3, [r4, #0]
 801694e:	695b      	ldr	r3, [r3, #20]
 8016950:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016954:	d121      	bne.n	801699a <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8016956:	4620      	mov	r0, r4
 8016958:	f7ff fec0 	bl	80166dc <I2C_IsAcknowledgeFailed>
 801695c:	b9f8      	cbnz	r0, 801699e <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 801695e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016962:	d0f3      	beq.n	801694c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016964:	f7ff fca0 	bl	80162a8 <HAL_GetTick>
 8016968:	1b80      	subs	r0, r0, r6
 801696a:	42a8      	cmp	r0, r5
 801696c:	d801      	bhi.n	8016972 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 801696e:	2d00      	cmp	r5, #0
 8016970:	d1ec      	bne.n	801694c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8016972:	6823      	ldr	r3, [r4, #0]
 8016974:	695b      	ldr	r3, [r3, #20]
 8016976:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801697a:	d1e7      	bne.n	801694c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 801697c:	2300      	movs	r3, #0
 801697e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016980:	2220      	movs	r2, #32
 8016982:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016986:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801698a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801698c:	f042 0220 	orr.w	r2, r2, #32
 8016990:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016992:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8016996:	2001      	movs	r0, #1
 8016998:	e000      	b.n	801699c <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 801699a:	2000      	movs	r0, #0
}
 801699c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 801699e:	2001      	movs	r0, #1
 80169a0:	e7fc      	b.n	801699c <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080169a2 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80169a2:	b570      	push	{r4, r5, r6, lr}
 80169a4:	4604      	mov	r4, r0
 80169a6:	460d      	mov	r5, r1
 80169a8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80169aa:	6823      	ldr	r3, [r4, #0]
 80169ac:	695b      	ldr	r3, [r3, #20]
 80169ae:	f013 0f04 	tst.w	r3, #4
 80169b2:	d121      	bne.n	80169f8 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80169b4:	4620      	mov	r0, r4
 80169b6:	f7ff fe91 	bl	80166dc <I2C_IsAcknowledgeFailed>
 80169ba:	b9f8      	cbnz	r0, 80169fc <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80169bc:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80169c0:	d0f3      	beq.n	80169aa <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80169c2:	f7ff fc71 	bl	80162a8 <HAL_GetTick>
 80169c6:	1b80      	subs	r0, r0, r6
 80169c8:	42a8      	cmp	r0, r5
 80169ca:	d801      	bhi.n	80169d0 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80169cc:	2d00      	cmp	r5, #0
 80169ce:	d1ec      	bne.n	80169aa <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80169d0:	6823      	ldr	r3, [r4, #0]
 80169d2:	695b      	ldr	r3, [r3, #20]
 80169d4:	f013 0f04 	tst.w	r3, #4
 80169d8:	d1e7      	bne.n	80169aa <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80169da:	2300      	movs	r3, #0
 80169dc:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80169de:	2220      	movs	r2, #32
 80169e0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80169e4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80169e8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80169ea:	f042 0220 	orr.w	r2, r2, #32
 80169ee:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80169f0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80169f4:	2001      	movs	r0, #1
 80169f6:	e000      	b.n	80169fa <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80169f8:	2000      	movs	r0, #0
}
 80169fa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80169fc:	2001      	movs	r0, #1
 80169fe:	e7fc      	b.n	80169fa <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08016a00 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8016a00:	2800      	cmp	r0, #0
 8016a02:	f000 80cc 	beq.w	8016b9e <HAL_I2C_Init+0x19e>
{
 8016a06:	b570      	push	{r4, r5, r6, lr}
 8016a08:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8016a0a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d077      	beq.n	8016b02 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8016a12:	2324      	movs	r3, #36	@ 0x24
 8016a14:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8016a18:	6822      	ldr	r2, [r4, #0]
 8016a1a:	6813      	ldr	r3, [r2, #0]
 8016a1c:	f023 0301 	bic.w	r3, r3, #1
 8016a20:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8016a22:	6822      	ldr	r2, [r4, #0]
 8016a24:	6813      	ldr	r3, [r2, #0]
 8016a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016a2a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8016a2c:	6822      	ldr	r2, [r4, #0]
 8016a2e:	6813      	ldr	r3, [r2, #0]
 8016a30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8016a34:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8016a36:	f000 fd87 	bl	8017548 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016a3a:	6862      	ldr	r2, [r4, #4]
 8016a3c:	4b5a      	ldr	r3, [pc, #360]	@ (8016ba8 <HAL_I2C_Init+0x1a8>)
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	d864      	bhi.n	8016b0c <HAL_I2C_Init+0x10c>
 8016a42:	4b5a      	ldr	r3, [pc, #360]	@ (8016bac <HAL_I2C_Init+0x1ac>)
 8016a44:	4298      	cmp	r0, r3
 8016a46:	bf8c      	ite	hi
 8016a48:	2300      	movhi	r3, #0
 8016a4a:	2301      	movls	r3, #1
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	f040 80a8 	bne.w	8016ba2 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8016a52:	4957      	ldr	r1, [pc, #348]	@ (8016bb0 <HAL_I2C_Init+0x1b0>)
 8016a54:	fba1 3100 	umull	r3, r1, r1, r0
 8016a58:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8016a5a:	6825      	ldr	r5, [r4, #0]
 8016a5c:	686a      	ldr	r2, [r5, #4]
 8016a5e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8016a62:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8016a66:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016a68:	6821      	ldr	r1, [r4, #0]
 8016a6a:	6a0a      	ldr	r2, [r1, #32]
 8016a6c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8016a70:	6866      	ldr	r6, [r4, #4]
 8016a72:	4d4d      	ldr	r5, [pc, #308]	@ (8016ba8 <HAL_I2C_Init+0x1a8>)
 8016a74:	42ae      	cmp	r6, r5
 8016a76:	d84f      	bhi.n	8016b18 <HAL_I2C_Init+0x118>
 8016a78:	3301      	adds	r3, #1
 8016a7a:	4313      	orrs	r3, r2
 8016a7c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016a7e:	6821      	ldr	r1, [r4, #0]
 8016a80:	69ca      	ldr	r2, [r1, #28]
 8016a82:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8016a86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8016a8a:	6865      	ldr	r5, [r4, #4]
 8016a8c:	4b46      	ldr	r3, [pc, #280]	@ (8016ba8 <HAL_I2C_Init+0x1a8>)
 8016a8e:	429d      	cmp	r5, r3
 8016a90:	d84c      	bhi.n	8016b2c <HAL_I2C_Init+0x12c>
 8016a92:	1e43      	subs	r3, r0, #1
 8016a94:	006d      	lsls	r5, r5, #1
 8016a96:	fbb3 f3f5 	udiv	r3, r3, r5
 8016a9a:	3301      	adds	r3, #1
 8016a9c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8016aa0:	4203      	tst	r3, r0
 8016aa2:	d078      	beq.n	8016b96 <HAL_I2C_Init+0x196>
 8016aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016aa8:	431a      	orrs	r2, r3
 8016aaa:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8016aac:	6821      	ldr	r1, [r4, #0]
 8016aae:	680b      	ldr	r3, [r1, #0]
 8016ab0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8016ab4:	69e2      	ldr	r2, [r4, #28]
 8016ab6:	6a20      	ldr	r0, [r4, #32]
 8016ab8:	4302      	orrs	r2, r0
 8016aba:	4313      	orrs	r3, r2
 8016abc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8016abe:	6821      	ldr	r1, [r4, #0]
 8016ac0:	688b      	ldr	r3, [r1, #8]
 8016ac2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8016ac6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016aca:	6922      	ldr	r2, [r4, #16]
 8016acc:	68e0      	ldr	r0, [r4, #12]
 8016ace:	4302      	orrs	r2, r0
 8016ad0:	4313      	orrs	r3, r2
 8016ad2:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8016ad4:	6821      	ldr	r1, [r4, #0]
 8016ad6:	68cb      	ldr	r3, [r1, #12]
 8016ad8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016adc:	6962      	ldr	r2, [r4, #20]
 8016ade:	69a0      	ldr	r0, [r4, #24]
 8016ae0:	4302      	orrs	r2, r0
 8016ae2:	4313      	orrs	r3, r2
 8016ae4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8016ae6:	6822      	ldr	r2, [r4, #0]
 8016ae8:	6813      	ldr	r3, [r2, #0]
 8016aea:	f043 0301 	orr.w	r3, r3, #1
 8016aee:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016af0:	2000      	movs	r0, #0
 8016af2:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8016af4:	2320      	movs	r3, #32
 8016af6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016afa:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016afc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8016b00:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8016b02:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8016b06:	f7fb f97f 	bl	8011e08 <HAL_I2C_MspInit>
 8016b0a:	e782      	b.n	8016a12 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016b0c:	4b29      	ldr	r3, [pc, #164]	@ (8016bb4 <HAL_I2C_Init+0x1b4>)
 8016b0e:	4298      	cmp	r0, r3
 8016b10:	bf8c      	ite	hi
 8016b12:	2300      	movhi	r3, #0
 8016b14:	2301      	movls	r3, #1
 8016b16:	e799      	b.n	8016a4c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016b18:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8016b1c:	fb05 f303 	mul.w	r3, r5, r3
 8016b20:	4d25      	ldr	r5, [pc, #148]	@ (8016bb8 <HAL_I2C_Init+0x1b8>)
 8016b22:	fba5 5303 	umull	r5, r3, r5, r3
 8016b26:	099b      	lsrs	r3, r3, #6
 8016b28:	3301      	adds	r3, #1
 8016b2a:	e7a6      	b.n	8016a7a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016b2c:	68a6      	ldr	r6, [r4, #8]
 8016b2e:	b9be      	cbnz	r6, 8016b60 <HAL_I2C_Init+0x160>
 8016b30:	1e43      	subs	r3, r0, #1
 8016b32:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8016b36:	fbb3 f3fc 	udiv	r3, r3, ip
 8016b3a:	3301      	adds	r3, #1
 8016b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b40:	fab3 f383 	clz	r3, r3
 8016b44:	095b      	lsrs	r3, r3, #5
 8016b46:	bb43      	cbnz	r3, 8016b9a <HAL_I2C_Init+0x19a>
 8016b48:	b9c6      	cbnz	r6, 8016b7c <HAL_I2C_Init+0x17c>
 8016b4a:	1e43      	subs	r3, r0, #1
 8016b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b50:	fbb3 f3f5 	udiv	r3, r3, r5
 8016b54:	3301      	adds	r3, #1
 8016b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016b5e:	e7a3      	b.n	8016aa8 <HAL_I2C_Init+0xa8>
 8016b60:	1e43      	subs	r3, r0, #1
 8016b62:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8016b66:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8016b6a:	fbb3 f3fc 	udiv	r3, r3, ip
 8016b6e:	3301      	adds	r3, #1
 8016b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b74:	fab3 f383 	clz	r3, r3
 8016b78:	095b      	lsrs	r3, r3, #5
 8016b7a:	e7e4      	b.n	8016b46 <HAL_I2C_Init+0x146>
 8016b7c:	1e43      	subs	r3, r0, #1
 8016b7e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016b82:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016b86:	fbb3 f3f5 	udiv	r3, r3, r5
 8016b8a:	3301      	adds	r3, #1
 8016b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8016b94:	e788      	b.n	8016aa8 <HAL_I2C_Init+0xa8>
 8016b96:	2304      	movs	r3, #4
 8016b98:	e786      	b.n	8016aa8 <HAL_I2C_Init+0xa8>
 8016b9a:	2301      	movs	r3, #1
 8016b9c:	e784      	b.n	8016aa8 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8016b9e:	2001      	movs	r0, #1
}
 8016ba0:	4770      	bx	lr
    return HAL_ERROR;
 8016ba2:	2001      	movs	r0, #1
 8016ba4:	e7ac      	b.n	8016b00 <HAL_I2C_Init+0x100>
 8016ba6:	bf00      	nop
 8016ba8:	000186a0 	.word	0x000186a0
 8016bac:	001e847f 	.word	0x001e847f
 8016bb0:	431bde83 	.word	0x431bde83
 8016bb4:	003d08ff 	.word	0x003d08ff
 8016bb8:	10624dd3 	.word	0x10624dd3

08016bbc <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8016bbc:	b1a8      	cbz	r0, 8016bea <HAL_I2C_DeInit+0x2e>
{
 8016bbe:	b510      	push	{r4, lr}
 8016bc0:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8016bc2:	2324      	movs	r3, #36	@ 0x24
 8016bc4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8016bc8:	6802      	ldr	r2, [r0, #0]
 8016bca:	6813      	ldr	r3, [r2, #0]
 8016bcc:	f023 0301 	bic.w	r3, r3, #1
 8016bd0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8016bd2:	f7fb f953 	bl	8011e7c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8016bd6:	2000      	movs	r0, #0
 8016bd8:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8016bda:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016bde:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016be0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8016be4:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8016be8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8016bea:	2001      	movs	r0, #1
}
 8016bec:	4770      	bx	lr
	...

08016bf0 <HAL_I2C_Master_Transmit>:
{
 8016bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bf4:	b085      	sub	sp, #20
 8016bf6:	4604      	mov	r4, r0
 8016bf8:	460f      	mov	r7, r1
 8016bfa:	4691      	mov	r9, r2
 8016bfc:	4698      	mov	r8, r3
 8016bfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8016c00:	f7ff fb52 	bl	80162a8 <HAL_GetTick>
 8016c04:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8016c06:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8016c0a:	b2c0      	uxtb	r0, r0
 8016c0c:	2820      	cmp	r0, #32
 8016c0e:	d004      	beq.n	8016c1a <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8016c10:	2702      	movs	r7, #2
}
 8016c12:	4638      	mov	r0, r7
 8016c14:	b005      	add	sp, #20
 8016c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016c1a:	9500      	str	r5, [sp, #0]
 8016c1c:	2319      	movs	r3, #25
 8016c1e:	2201      	movs	r2, #1
 8016c20:	494f      	ldr	r1, [pc, #316]	@ (8016d60 <HAL_I2C_Master_Transmit+0x170>)
 8016c22:	4620      	mov	r0, r4
 8016c24:	f7ff fd73 	bl	801670e <I2C_WaitOnFlagUntilTimeout>
 8016c28:	2800      	cmp	r0, #0
 8016c2a:	f040 8092 	bne.w	8016d52 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8016c2e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8016c32:	2b01      	cmp	r3, #1
 8016c34:	f000 808f 	beq.w	8016d56 <HAL_I2C_Master_Transmit+0x166>
 8016c38:	2301      	movs	r3, #1
 8016c3a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016c3e:	6823      	ldr	r3, [r4, #0]
 8016c40:	681a      	ldr	r2, [r3, #0]
 8016c42:	f012 0f01 	tst.w	r2, #1
 8016c46:	d103      	bne.n	8016c50 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8016c48:	681a      	ldr	r2, [r3, #0]
 8016c4a:	f042 0201 	orr.w	r2, r2, #1
 8016c4e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016c50:	6822      	ldr	r2, [r4, #0]
 8016c52:	6813      	ldr	r3, [r2, #0]
 8016c54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016c58:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8016c5a:	2321      	movs	r3, #33	@ 0x21
 8016c5c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016c60:	2310      	movs	r3, #16
 8016c62:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016c66:	2300      	movs	r3, #0
 8016c68:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8016c6a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016c6e:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016c72:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8016c74:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016c76:	4b3b      	ldr	r3, [pc, #236]	@ (8016d64 <HAL_I2C_Master_Transmit+0x174>)
 8016c78:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8016c7a:	462b      	mov	r3, r5
 8016c7c:	4632      	mov	r2, r6
 8016c7e:	4639      	mov	r1, r7
 8016c80:	4620      	mov	r0, r4
 8016c82:	f7ff fe05 	bl	8016890 <I2C_MasterRequestWrite>
 8016c86:	4607      	mov	r7, r0
 8016c88:	2800      	cmp	r0, #0
 8016c8a:	d166      	bne.n	8016d5a <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	9303      	str	r3, [sp, #12]
 8016c90:	6823      	ldr	r3, [r4, #0]
 8016c92:	695a      	ldr	r2, [r3, #20]
 8016c94:	9203      	str	r2, [sp, #12]
 8016c96:	699b      	ldr	r3, [r3, #24]
 8016c98:	9303      	str	r3, [sp, #12]
 8016c9a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8016c9c:	e011      	b.n	8016cc2 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016c9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016ca0:	2b04      	cmp	r3, #4
 8016ca2:	d001      	beq.n	8016ca8 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8016ca4:	2701      	movs	r7, #1
 8016ca6:	e7b4      	b.n	8016c12 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016ca8:	6822      	ldr	r2, [r4, #0]
 8016caa:	6813      	ldr	r3, [r2, #0]
 8016cac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016cb0:	6013      	str	r3, [r2, #0]
 8016cb2:	e7f7      	b.n	8016ca4 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016cb4:	462a      	mov	r2, r5
 8016cb6:	4631      	mov	r1, r6
 8016cb8:	4620      	mov	r0, r4
 8016cba:	f7ff fe72 	bl	80169a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8016cbe:	2800      	cmp	r0, #0
 8016cc0:	d12e      	bne.n	8016d20 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8016cc2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d036      	beq.n	8016d36 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016cc8:	462a      	mov	r2, r5
 8016cca:	4631      	mov	r1, r6
 8016ccc:	4620      	mov	r0, r4
 8016cce:	f7ff fe39 	bl	8016944 <I2C_WaitOnTXEFlagUntilTimeout>
 8016cd2:	2800      	cmp	r0, #0
 8016cd4:	d1e3      	bne.n	8016c9e <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016cd6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016cd8:	6823      	ldr	r3, [r4, #0]
 8016cda:	7812      	ldrb	r2, [r2, #0]
 8016cdc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8016cde:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8016ce0:	1c43      	adds	r3, r0, #1
 8016ce2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8016ce4:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8016ce6:	b289      	uxth	r1, r1
 8016ce8:	3901      	subs	r1, #1
 8016cea:	b289      	uxth	r1, r1
 8016cec:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8016cee:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016cf0:	3b01      	subs	r3, #1
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8016cf6:	6822      	ldr	r2, [r4, #0]
 8016cf8:	6951      	ldr	r1, [r2, #20]
 8016cfa:	f011 0f04 	tst.w	r1, #4
 8016cfe:	d0d9      	beq.n	8016cb4 <HAL_I2C_Master_Transmit+0xc4>
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d0d7      	beq.n	8016cb4 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016d04:	7843      	ldrb	r3, [r0, #1]
 8016d06:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8016d08:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016d0a:	3301      	adds	r3, #1
 8016d0c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8016d0e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8016d10:	b29b      	uxth	r3, r3
 8016d12:	3b01      	subs	r3, #1
 8016d14:	b29b      	uxth	r3, r3
 8016d16:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8016d18:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016d1a:	3b01      	subs	r3, #1
 8016d1c:	8523      	strh	r3, [r4, #40]	@ 0x28
 8016d1e:	e7c9      	b.n	8016cb4 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016d20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016d22:	2b04      	cmp	r3, #4
 8016d24:	d001      	beq.n	8016d2a <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8016d26:	2701      	movs	r7, #1
 8016d28:	e773      	b.n	8016c12 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016d2a:	6822      	ldr	r2, [r4, #0]
 8016d2c:	6813      	ldr	r3, [r2, #0]
 8016d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016d32:	6013      	str	r3, [r2, #0]
 8016d34:	e7f7      	b.n	8016d26 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016d36:	6822      	ldr	r2, [r4, #0]
 8016d38:	6813      	ldr	r3, [r2, #0]
 8016d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016d3e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8016d40:	2320      	movs	r3, #32
 8016d42:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016d46:	2300      	movs	r3, #0
 8016d48:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8016d4c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8016d50:	e75f      	b.n	8016c12 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8016d52:	2702      	movs	r7, #2
 8016d54:	e75d      	b.n	8016c12 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8016d56:	2702      	movs	r7, #2
 8016d58:	e75b      	b.n	8016c12 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8016d5a:	2701      	movs	r7, #1
 8016d5c:	e759      	b.n	8016c12 <HAL_I2C_Master_Transmit+0x22>
 8016d5e:	bf00      	nop
 8016d60:	00100002 	.word	0x00100002
 8016d64:	ffff0000 	.word	0xffff0000

08016d68 <HAL_I2C_IsDeviceReady>:
{
 8016d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d6c:	b085      	sub	sp, #20
 8016d6e:	4604      	mov	r4, r0
 8016d70:	4688      	mov	r8, r1
 8016d72:	4691      	mov	r9, r2
 8016d74:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8016d76:	f7ff fa97 	bl	80162a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8016d7a:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8016d7e:	b2db      	uxtb	r3, r3
 8016d80:	2b20      	cmp	r3, #32
 8016d82:	d003      	beq.n	8016d8c <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8016d84:	2002      	movs	r0, #2
}
 8016d86:	b005      	add	sp, #20
 8016d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d8c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016d8e:	9000      	str	r0, [sp, #0]
 8016d90:	2319      	movs	r3, #25
 8016d92:	2201      	movs	r2, #1
 8016d94:	4957      	ldr	r1, [pc, #348]	@ (8016ef4 <HAL_I2C_IsDeviceReady+0x18c>)
 8016d96:	4620      	mov	r0, r4
 8016d98:	f7ff fcb9 	bl	801670e <I2C_WaitOnFlagUntilTimeout>
 8016d9c:	2800      	cmp	r0, #0
 8016d9e:	f040 80a0 	bne.w	8016ee2 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8016da2:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8016da6:	2b01      	cmp	r3, #1
 8016da8:	f000 809d 	beq.w	8016ee6 <HAL_I2C_IsDeviceReady+0x17e>
 8016dac:	2301      	movs	r3, #1
 8016dae:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016db2:	6823      	ldr	r3, [r4, #0]
 8016db4:	681a      	ldr	r2, [r3, #0]
 8016db6:	f012 0f01 	tst.w	r2, #1
 8016dba:	d103      	bne.n	8016dc4 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8016dbc:	681a      	ldr	r2, [r3, #0]
 8016dbe:	f042 0201 	orr.w	r2, r2, #1
 8016dc2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016dc4:	6822      	ldr	r2, [r4, #0]
 8016dc6:	6813      	ldr	r3, [r2, #0]
 8016dc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016dcc:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8016dce:	2324      	movs	r3, #36	@ 0x24
 8016dd0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016dd4:	2700      	movs	r7, #0
 8016dd6:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016dd8:	4b47      	ldr	r3, [pc, #284]	@ (8016ef8 <HAL_I2C_IsDeviceReady+0x190>)
 8016dda:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016ddc:	e040      	b.n	8016e60 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016dde:	6823      	ldr	r3, [r4, #0]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016de6:	d002      	beq.n	8016dee <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016dec:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8016dee:	2003      	movs	r0, #3
 8016df0:	e7c9      	b.n	8016d86 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8016df2:	23a0      	movs	r3, #160	@ 0xa0
 8016df4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8016df8:	6822      	ldr	r2, [r4, #0]
 8016dfa:	6953      	ldr	r3, [r2, #20]
 8016dfc:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016e00:	6952      	ldr	r2, [r2, #20]
 8016e02:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8016e06:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 8016e0a:	fa5f fc8c 	uxtb.w	ip, ip
 8016e0e:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8016e12:	d009      	beq.n	8016e28 <HAL_I2C_IsDeviceReady+0xc0>
 8016e14:	b943      	cbnz	r3, 8016e28 <HAL_I2C_IsDeviceReady+0xc0>
 8016e16:	b93a      	cbnz	r2, 8016e28 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016e18:	f7ff fa46 	bl	80162a8 <HAL_GetTick>
 8016e1c:	1b80      	subs	r0, r0, r6
 8016e1e:	42a8      	cmp	r0, r5
 8016e20:	d8e7      	bhi.n	8016df2 <HAL_I2C_IsDeviceReady+0x8a>
 8016e22:	2d00      	cmp	r5, #0
 8016e24:	d1e8      	bne.n	8016df8 <HAL_I2C_IsDeviceReady+0x90>
 8016e26:	e7e4      	b.n	8016df2 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8016e28:	2320      	movs	r3, #32
 8016e2a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8016e2e:	6823      	ldr	r3, [r4, #0]
 8016e30:	695a      	ldr	r2, [r3, #20]
 8016e32:	f012 0f02 	tst.w	r2, #2
 8016e36:	d131      	bne.n	8016e9c <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016e38:	681a      	ldr	r2, [r3, #0]
 8016e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016e3e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016e40:	6823      	ldr	r3, [r4, #0]
 8016e42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016e46:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016e48:	9600      	str	r6, [sp, #0]
 8016e4a:	2319      	movs	r3, #25
 8016e4c:	2201      	movs	r2, #1
 8016e4e:	4929      	ldr	r1, [pc, #164]	@ (8016ef4 <HAL_I2C_IsDeviceReady+0x18c>)
 8016e50:	4620      	mov	r0, r4
 8016e52:	f7ff fc5c 	bl	801670e <I2C_WaitOnFlagUntilTimeout>
 8016e56:	2800      	cmp	r0, #0
 8016e58:	d149      	bne.n	8016eee <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8016e5a:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8016e5c:	454f      	cmp	r7, r9
 8016e5e:	d238      	bcs.n	8016ed2 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016e60:	6822      	ldr	r2, [r4, #0]
 8016e62:	6813      	ldr	r3, [r2, #0]
 8016e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016e68:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8016e6a:	9600      	str	r6, [sp, #0]
 8016e6c:	462b      	mov	r3, r5
 8016e6e:	2200      	movs	r2, #0
 8016e70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8016e74:	4620      	mov	r0, r4
 8016e76:	f7ff fc4a 	bl	801670e <I2C_WaitOnFlagUntilTimeout>
 8016e7a:	2800      	cmp	r0, #0
 8016e7c:	d1af      	bne.n	8016dde <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016e7e:	6823      	ldr	r3, [r4, #0]
 8016e80:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8016e84:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8016e86:	f7ff fa0f 	bl	80162a8 <HAL_GetTick>
 8016e8a:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8016e8c:	6822      	ldr	r2, [r4, #0]
 8016e8e:	6953      	ldr	r3, [r2, #20]
 8016e90:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016e94:	6952      	ldr	r2, [r2, #20]
 8016e96:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8016e9a:	e7b4      	b.n	8016e06 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016e9c:	681a      	ldr	r2, [r3, #0]
 8016e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016ea2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	9303      	str	r3, [sp, #12]
 8016ea8:	6823      	ldr	r3, [r4, #0]
 8016eaa:	695a      	ldr	r2, [r3, #20]
 8016eac:	9203      	str	r2, [sp, #12]
 8016eae:	699b      	ldr	r3, [r3, #24]
 8016eb0:	9303      	str	r3, [sp, #12]
 8016eb2:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016eb4:	9600      	str	r6, [sp, #0]
 8016eb6:	2319      	movs	r3, #25
 8016eb8:	2201      	movs	r2, #1
 8016eba:	490e      	ldr	r1, [pc, #56]	@ (8016ef4 <HAL_I2C_IsDeviceReady+0x18c>)
 8016ebc:	4620      	mov	r0, r4
 8016ebe:	f7ff fc26 	bl	801670e <I2C_WaitOnFlagUntilTimeout>
 8016ec2:	b990      	cbnz	r0, 8016eea <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8016ec4:	2320      	movs	r3, #32
 8016ec6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 8016eca:	2300      	movs	r3, #0
 8016ecc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 8016ed0:	e759      	b.n	8016d86 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8016ed2:	2320      	movs	r3, #32
 8016ed4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8016ed8:	2300      	movs	r3, #0
 8016eda:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8016ede:	2001      	movs	r0, #1
 8016ee0:	e751      	b.n	8016d86 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8016ee2:	2002      	movs	r0, #2
 8016ee4:	e74f      	b.n	8016d86 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8016ee6:	2002      	movs	r0, #2
 8016ee8:	e74d      	b.n	8016d86 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8016eea:	2001      	movs	r0, #1
 8016eec:	e74b      	b.n	8016d86 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8016eee:	2001      	movs	r0, #1
 8016ef0:	e749      	b.n	8016d86 <HAL_I2C_IsDeviceReady+0x1e>
 8016ef2:	bf00      	nop
 8016ef4:	00100002 	.word	0x00100002
 8016ef8:	ffff0000 	.word	0xffff0000

08016efc <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8016efc:	6803      	ldr	r3, [r0, #0]
 8016efe:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8016f02:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8016f04:	2000      	movs	r0, #0
 8016f06:	4770      	bx	lr

08016f08 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	f000 81e0 	beq.w	80172ce <HAL_RCC_OscConfig+0x3c6>
{
 8016f0e:	b570      	push	{r4, r5, r6, lr}
 8016f10:	b082      	sub	sp, #8
 8016f12:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016f14:	6803      	ldr	r3, [r0, #0]
 8016f16:	f013 0f01 	tst.w	r3, #1
 8016f1a:	d03b      	beq.n	8016f94 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8016f1c:	4b9f      	ldr	r3, [pc, #636]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8016f1e:	689b      	ldr	r3, [r3, #8]
 8016f20:	f003 030c 	and.w	r3, r3, #12
 8016f24:	2b04      	cmp	r3, #4
 8016f26:	d02c      	beq.n	8016f82 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016f28:	4b9c      	ldr	r3, [pc, #624]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8016f2a:	689b      	ldr	r3, [r3, #8]
 8016f2c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8016f30:	2b08      	cmp	r3, #8
 8016f32:	d021      	beq.n	8016f78 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016f34:	6863      	ldr	r3, [r4, #4]
 8016f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016f3a:	d04f      	beq.n	8016fdc <HAL_RCC_OscConfig+0xd4>
 8016f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8016f40:	d052      	beq.n	8016fe8 <HAL_RCC_OscConfig+0xe0>
 8016f42:	4b96      	ldr	r3, [pc, #600]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8016f44:	681a      	ldr	r2, [r3, #0]
 8016f46:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8016f4a:	601a      	str	r2, [r3, #0]
 8016f4c:	681a      	ldr	r2, [r3, #0]
 8016f4e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8016f52:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8016f54:	6863      	ldr	r3, [r4, #4]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d050      	beq.n	8016ffc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016f5a:	f7ff f9a5 	bl	80162a8 <HAL_GetTick>
 8016f5e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016f60:	4b8e      	ldr	r3, [pc, #568]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8016f68:	d114      	bne.n	8016f94 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016f6a:	f7ff f99d 	bl	80162a8 <HAL_GetTick>
 8016f6e:	1b40      	subs	r0, r0, r5
 8016f70:	2864      	cmp	r0, #100	@ 0x64
 8016f72:	d9f5      	bls.n	8016f60 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8016f74:	2003      	movs	r0, #3
 8016f76:	e1b1      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016f78:	4b88      	ldr	r3, [pc, #544]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8016f7a:	685b      	ldr	r3, [r3, #4]
 8016f7c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8016f80:	d0d8      	beq.n	8016f34 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016f82:	4b86      	ldr	r3, [pc, #536]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8016f8a:	d003      	beq.n	8016f94 <HAL_RCC_OscConfig+0x8c>
 8016f8c:	6863      	ldr	r3, [r4, #4]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	f000 819f 	beq.w	80172d2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016f94:	6823      	ldr	r3, [r4, #0]
 8016f96:	f013 0f02 	tst.w	r3, #2
 8016f9a:	d054      	beq.n	8017046 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8016f9c:	4b7f      	ldr	r3, [pc, #508]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8016f9e:	689b      	ldr	r3, [r3, #8]
 8016fa0:	f013 0f0c 	tst.w	r3, #12
 8016fa4:	d03e      	beq.n	8017024 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016fa6:	4b7d      	ldr	r3, [pc, #500]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8016fa8:	689b      	ldr	r3, [r3, #8]
 8016faa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8016fae:	2b08      	cmp	r3, #8
 8016fb0:	d033      	beq.n	801701a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8016fb2:	68e3      	ldr	r3, [r4, #12]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d068      	beq.n	801708a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016fb8:	4b79      	ldr	r3, [pc, #484]	@ (80171a0 <HAL_RCC_OscConfig+0x298>)
 8016fba:	2201      	movs	r2, #1
 8016fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016fbe:	f7ff f973 	bl	80162a8 <HAL_GetTick>
 8016fc2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016fc4:	4b75      	ldr	r3, [pc, #468]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	f013 0f02 	tst.w	r3, #2
 8016fcc:	d154      	bne.n	8017078 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016fce:	f7ff f96b 	bl	80162a8 <HAL_GetTick>
 8016fd2:	1b40      	subs	r0, r0, r5
 8016fd4:	2802      	cmp	r0, #2
 8016fd6:	d9f5      	bls.n	8016fc4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8016fd8:	2003      	movs	r0, #3
 8016fda:	e17f      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016fdc:	4a6f      	ldr	r2, [pc, #444]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8016fde:	6813      	ldr	r3, [r2, #0]
 8016fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016fe4:	6013      	str	r3, [r2, #0]
 8016fe6:	e7b5      	b.n	8016f54 <HAL_RCC_OscConfig+0x4c>
 8016fe8:	4b6c      	ldr	r3, [pc, #432]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8016fea:	681a      	ldr	r2, [r3, #0]
 8016fec:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8016ff0:	601a      	str	r2, [r3, #0]
 8016ff2:	681a      	ldr	r2, [r3, #0]
 8016ff4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8016ff8:	601a      	str	r2, [r3, #0]
 8016ffa:	e7ab      	b.n	8016f54 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8016ffc:	f7ff f954 	bl	80162a8 <HAL_GetTick>
 8017000:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8017002:	4b66      	ldr	r3, [pc, #408]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801700a:	d0c3      	beq.n	8016f94 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801700c:	f7ff f94c 	bl	80162a8 <HAL_GetTick>
 8017010:	1b40      	subs	r0, r0, r5
 8017012:	2864      	cmp	r0, #100	@ 0x64
 8017014:	d9f5      	bls.n	8017002 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8017016:	2003      	movs	r0, #3
 8017018:	e160      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801701a:	4b60      	ldr	r3, [pc, #384]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 801701c:	685b      	ldr	r3, [r3, #4]
 801701e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8017022:	d1c6      	bne.n	8016fb2 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017024:	4b5d      	ldr	r3, [pc, #372]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	f013 0f02 	tst.w	r3, #2
 801702c:	d003      	beq.n	8017036 <HAL_RCC_OscConfig+0x12e>
 801702e:	68e3      	ldr	r3, [r4, #12]
 8017030:	2b01      	cmp	r3, #1
 8017032:	f040 8150 	bne.w	80172d6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017036:	4a59      	ldr	r2, [pc, #356]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8017038:	6813      	ldr	r3, [r2, #0]
 801703a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 801703e:	6921      	ldr	r1, [r4, #16]
 8017040:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8017044:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017046:	6823      	ldr	r3, [r4, #0]
 8017048:	f013 0f08 	tst.w	r3, #8
 801704c:	d042      	beq.n	80170d4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801704e:	6963      	ldr	r3, [r4, #20]
 8017050:	b36b      	cbz	r3, 80170ae <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017052:	4b53      	ldr	r3, [pc, #332]	@ (80171a0 <HAL_RCC_OscConfig+0x298>)
 8017054:	2201      	movs	r2, #1
 8017056:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801705a:	f7ff f925 	bl	80162a8 <HAL_GetTick>
 801705e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8017060:	4b4e      	ldr	r3, [pc, #312]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8017062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017064:	f013 0f02 	tst.w	r3, #2
 8017068:	d134      	bne.n	80170d4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801706a:	f7ff f91d 	bl	80162a8 <HAL_GetTick>
 801706e:	1b40      	subs	r0, r0, r5
 8017070:	2802      	cmp	r0, #2
 8017072:	d9f5      	bls.n	8017060 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8017074:	2003      	movs	r0, #3
 8017076:	e131      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017078:	4a48      	ldr	r2, [pc, #288]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 801707a:	6813      	ldr	r3, [r2, #0]
 801707c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8017080:	6921      	ldr	r1, [r4, #16]
 8017082:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8017086:	6013      	str	r3, [r2, #0]
 8017088:	e7dd      	b.n	8017046 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 801708a:	4b45      	ldr	r3, [pc, #276]	@ (80171a0 <HAL_RCC_OscConfig+0x298>)
 801708c:	2200      	movs	r2, #0
 801708e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8017090:	f7ff f90a 	bl	80162a8 <HAL_GetTick>
 8017094:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8017096:	4b41      	ldr	r3, [pc, #260]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	f013 0f02 	tst.w	r3, #2
 801709e:	d0d2      	beq.n	8017046 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80170a0:	f7ff f902 	bl	80162a8 <HAL_GetTick>
 80170a4:	1b40      	subs	r0, r0, r5
 80170a6:	2802      	cmp	r0, #2
 80170a8:	d9f5      	bls.n	8017096 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80170aa:	2003      	movs	r0, #3
 80170ac:	e116      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80170ae:	4b3c      	ldr	r3, [pc, #240]	@ (80171a0 <HAL_RCC_OscConfig+0x298>)
 80170b0:	2200      	movs	r2, #0
 80170b2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80170b6:	f7ff f8f7 	bl	80162a8 <HAL_GetTick>
 80170ba:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80170bc:	4b37      	ldr	r3, [pc, #220]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 80170be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80170c0:	f013 0f02 	tst.w	r3, #2
 80170c4:	d006      	beq.n	80170d4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80170c6:	f7ff f8ef 	bl	80162a8 <HAL_GetTick>
 80170ca:	1b40      	subs	r0, r0, r5
 80170cc:	2802      	cmp	r0, #2
 80170ce:	d9f5      	bls.n	80170bc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80170d0:	2003      	movs	r0, #3
 80170d2:	e103      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80170d4:	6823      	ldr	r3, [r4, #0]
 80170d6:	f013 0f04 	tst.w	r3, #4
 80170da:	d077      	beq.n	80171cc <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80170dc:	4b2f      	ldr	r3, [pc, #188]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 80170de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80170e0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80170e4:	d133      	bne.n	801714e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80170e6:	2300      	movs	r3, #0
 80170e8:	9301      	str	r3, [sp, #4]
 80170ea:	4b2c      	ldr	r3, [pc, #176]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 80170ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80170ee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80170f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80170f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80170f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80170fa:	9301      	str	r3, [sp, #4]
 80170fc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80170fe:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017100:	4b28      	ldr	r3, [pc, #160]	@ (80171a4 <HAL_RCC_OscConfig+0x29c>)
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8017108:	d023      	beq.n	8017152 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801710a:	68a3      	ldr	r3, [r4, #8]
 801710c:	2b01      	cmp	r3, #1
 801710e:	d034      	beq.n	801717a <HAL_RCC_OscConfig+0x272>
 8017110:	2b05      	cmp	r3, #5
 8017112:	d038      	beq.n	8017186 <HAL_RCC_OscConfig+0x27e>
 8017114:	4b21      	ldr	r3, [pc, #132]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8017116:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017118:	f022 0201 	bic.w	r2, r2, #1
 801711c:	671a      	str	r2, [r3, #112]	@ 0x70
 801711e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017120:	f022 0204 	bic.w	r2, r2, #4
 8017124:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8017126:	68a3      	ldr	r3, [r4, #8]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d03d      	beq.n	80171a8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801712c:	f7ff f8bc 	bl	80162a8 <HAL_GetTick>
 8017130:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017132:	4b1a      	ldr	r3, [pc, #104]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8017134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017136:	f013 0f02 	tst.w	r3, #2
 801713a:	d146      	bne.n	80171ca <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801713c:	f7ff f8b4 	bl	80162a8 <HAL_GetTick>
 8017140:	1b80      	subs	r0, r0, r6
 8017142:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017146:	4298      	cmp	r0, r3
 8017148:	d9f3      	bls.n	8017132 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 801714a:	2003      	movs	r0, #3
 801714c:	e0c6      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 801714e:	2500      	movs	r5, #0
 8017150:	e7d6      	b.n	8017100 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017152:	4a14      	ldr	r2, [pc, #80]	@ (80171a4 <HAL_RCC_OscConfig+0x29c>)
 8017154:	6813      	ldr	r3, [r2, #0]
 8017156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801715a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 801715c:	f7ff f8a4 	bl	80162a8 <HAL_GetTick>
 8017160:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017162:	4b10      	ldr	r3, [pc, #64]	@ (80171a4 <HAL_RCC_OscConfig+0x29c>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801716a:	d1ce      	bne.n	801710a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801716c:	f7ff f89c 	bl	80162a8 <HAL_GetTick>
 8017170:	1b80      	subs	r0, r0, r6
 8017172:	2802      	cmp	r0, #2
 8017174:	d9f5      	bls.n	8017162 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8017176:	2003      	movs	r0, #3
 8017178:	e0b0      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801717a:	4a08      	ldr	r2, [pc, #32]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 801717c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 801717e:	f043 0301 	orr.w	r3, r3, #1
 8017182:	6713      	str	r3, [r2, #112]	@ 0x70
 8017184:	e7cf      	b.n	8017126 <HAL_RCC_OscConfig+0x21e>
 8017186:	4b05      	ldr	r3, [pc, #20]	@ (801719c <HAL_RCC_OscConfig+0x294>)
 8017188:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801718a:	f042 0204 	orr.w	r2, r2, #4
 801718e:	671a      	str	r2, [r3, #112]	@ 0x70
 8017190:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017192:	f042 0201 	orr.w	r2, r2, #1
 8017196:	671a      	str	r2, [r3, #112]	@ 0x70
 8017198:	e7c5      	b.n	8017126 <HAL_RCC_OscConfig+0x21e>
 801719a:	bf00      	nop
 801719c:	40023800 	.word	0x40023800
 80171a0:	42470000 	.word	0x42470000
 80171a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80171a8:	f7ff f87e 	bl	80162a8 <HAL_GetTick>
 80171ac:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80171ae:	4b52      	ldr	r3, [pc, #328]	@ (80172f8 <HAL_RCC_OscConfig+0x3f0>)
 80171b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80171b2:	f013 0f02 	tst.w	r3, #2
 80171b6:	d008      	beq.n	80171ca <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80171b8:	f7ff f876 	bl	80162a8 <HAL_GetTick>
 80171bc:	1b80      	subs	r0, r0, r6
 80171be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80171c2:	4298      	cmp	r0, r3
 80171c4:	d9f3      	bls.n	80171ae <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80171c6:	2003      	movs	r0, #3
 80171c8:	e088      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80171ca:	b9ed      	cbnz	r5, 8017208 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80171cc:	69a3      	ldr	r3, [r4, #24]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	f000 8083 	beq.w	80172da <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80171d4:	4a48      	ldr	r2, [pc, #288]	@ (80172f8 <HAL_RCC_OscConfig+0x3f0>)
 80171d6:	6892      	ldr	r2, [r2, #8]
 80171d8:	f002 020c 	and.w	r2, r2, #12
 80171dc:	2a08      	cmp	r2, #8
 80171de:	d051      	beq.n	8017284 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80171e0:	2b02      	cmp	r3, #2
 80171e2:	d017      	beq.n	8017214 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80171e4:	4b45      	ldr	r3, [pc, #276]	@ (80172fc <HAL_RCC_OscConfig+0x3f4>)
 80171e6:	2200      	movs	r2, #0
 80171e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80171ea:	f7ff f85d 	bl	80162a8 <HAL_GetTick>
 80171ee:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80171f0:	4b41      	ldr	r3, [pc, #260]	@ (80172f8 <HAL_RCC_OscConfig+0x3f0>)
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80171f8:	d042      	beq.n	8017280 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80171fa:	f7ff f855 	bl	80162a8 <HAL_GetTick>
 80171fe:	1b00      	subs	r0, r0, r4
 8017200:	2802      	cmp	r0, #2
 8017202:	d9f5      	bls.n	80171f0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8017204:	2003      	movs	r0, #3
 8017206:	e069      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8017208:	4a3b      	ldr	r2, [pc, #236]	@ (80172f8 <HAL_RCC_OscConfig+0x3f0>)
 801720a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801720c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017210:	6413      	str	r3, [r2, #64]	@ 0x40
 8017212:	e7db      	b.n	80171cc <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8017214:	4b39      	ldr	r3, [pc, #228]	@ (80172fc <HAL_RCC_OscConfig+0x3f4>)
 8017216:	2200      	movs	r2, #0
 8017218:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 801721a:	f7ff f845 	bl	80162a8 <HAL_GetTick>
 801721e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017220:	4b35      	ldr	r3, [pc, #212]	@ (80172f8 <HAL_RCC_OscConfig+0x3f0>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8017228:	d006      	beq.n	8017238 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801722a:	f7ff f83d 	bl	80162a8 <HAL_GetTick>
 801722e:	1b40      	subs	r0, r0, r5
 8017230:	2802      	cmp	r0, #2
 8017232:	d9f5      	bls.n	8017220 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8017234:	2003      	movs	r0, #3
 8017236:	e051      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8017238:	69e3      	ldr	r3, [r4, #28]
 801723a:	6a22      	ldr	r2, [r4, #32]
 801723c:	4313      	orrs	r3, r2
 801723e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017240:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8017244:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017246:	0852      	lsrs	r2, r2, #1
 8017248:	3a01      	subs	r2, #1
 801724a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801724e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017250:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017254:	4a28      	ldr	r2, [pc, #160]	@ (80172f8 <HAL_RCC_OscConfig+0x3f0>)
 8017256:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8017258:	4b28      	ldr	r3, [pc, #160]	@ (80172fc <HAL_RCC_OscConfig+0x3f4>)
 801725a:	2201      	movs	r2, #1
 801725c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 801725e:	f7ff f823 	bl	80162a8 <HAL_GetTick>
 8017262:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017264:	4b24      	ldr	r3, [pc, #144]	@ (80172f8 <HAL_RCC_OscConfig+0x3f0>)
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801726c:	d106      	bne.n	801727c <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801726e:	f7ff f81b 	bl	80162a8 <HAL_GetTick>
 8017272:	1b00      	subs	r0, r0, r4
 8017274:	2802      	cmp	r0, #2
 8017276:	d9f5      	bls.n	8017264 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8017278:	2003      	movs	r0, #3
 801727a:	e02f      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 801727c:	2000      	movs	r0, #0
 801727e:	e02d      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
 8017280:	2000      	movs	r0, #0
 8017282:	e02b      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8017284:	2b01      	cmp	r3, #1
 8017286:	d02b      	beq.n	80172e0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8017288:	4b1b      	ldr	r3, [pc, #108]	@ (80172f8 <HAL_RCC_OscConfig+0x3f0>)
 801728a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801728c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8017290:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8017292:	4291      	cmp	r1, r2
 8017294:	d126      	bne.n	80172e4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017296:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801729a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801729c:	428a      	cmp	r2, r1
 801729e:	d123      	bne.n	80172e8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80172a0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80172a2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80172a6:	401a      	ands	r2, r3
 80172a8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80172ac:	d11e      	bne.n	80172ec <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80172ae:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80172b2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80172b4:	0852      	lsrs	r2, r2, #1
 80172b6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80172b8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80172bc:	d118      	bne.n	80172f0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80172be:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80172c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80172c4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80172c8:	d114      	bne.n	80172f4 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80172ca:	2000      	movs	r0, #0
 80172cc:	e006      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80172ce:	2001      	movs	r0, #1
}
 80172d0:	4770      	bx	lr
        return HAL_ERROR;
 80172d2:	2001      	movs	r0, #1
 80172d4:	e002      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80172d6:	2001      	movs	r0, #1
 80172d8:	e000      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80172da:	2000      	movs	r0, #0
}
 80172dc:	b002      	add	sp, #8
 80172de:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80172e0:	2001      	movs	r0, #1
 80172e2:	e7fb      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80172e4:	2001      	movs	r0, #1
 80172e6:	e7f9      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
 80172e8:	2001      	movs	r0, #1
 80172ea:	e7f7      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
 80172ec:	2001      	movs	r0, #1
 80172ee:	e7f5      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
 80172f0:	2001      	movs	r0, #1
 80172f2:	e7f3      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
 80172f4:	2001      	movs	r0, #1
 80172f6:	e7f1      	b.n	80172dc <HAL_RCC_OscConfig+0x3d4>
 80172f8:	40023800 	.word	0x40023800
 80172fc:	42470000 	.word	0x42470000

08017300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017300:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017302:	4b33      	ldr	r3, [pc, #204]	@ (80173d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017304:	689b      	ldr	r3, [r3, #8]
 8017306:	f003 030c 	and.w	r3, r3, #12
 801730a:	2b04      	cmp	r3, #4
 801730c:	d05b      	beq.n	80173c6 <HAL_RCC_GetSysClockFreq+0xc6>
 801730e:	2b08      	cmp	r3, #8
 8017310:	d15b      	bne.n	80173ca <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017312:	4b2f      	ldr	r3, [pc, #188]	@ (80173d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017314:	685a      	ldr	r2, [r3, #4]
 8017316:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801731a:	685b      	ldr	r3, [r3, #4]
 801731c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8017320:	d02c      	beq.n	801737c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017322:	4b2b      	ldr	r3, [pc, #172]	@ (80173d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017324:	6858      	ldr	r0, [r3, #4]
 8017326:	f3c0 1088 	ubfx	r0, r0, #6, #9
 801732a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 801732e:	ebbc 0c00 	subs.w	ip, ip, r0
 8017332:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8017336:	ea4f 138e 	mov.w	r3, lr, lsl #6
 801733a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 801733e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8017342:	ebb1 010c 	subs.w	r1, r1, ip
 8017346:	eb63 030e 	sbc.w	r3, r3, lr
 801734a:	00db      	lsls	r3, r3, #3
 801734c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017350:	00c9      	lsls	r1, r1, #3
 8017352:	eb11 0c00 	adds.w	ip, r1, r0
 8017356:	f143 0300 	adc.w	r3, r3, #0
 801735a:	0259      	lsls	r1, r3, #9
 801735c:	2300      	movs	r3, #0
 801735e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8017362:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8017366:	f7f9 fcf7 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 801736a:	4b19      	ldr	r3, [pc, #100]	@ (80173d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 801736c:	685b      	ldr	r3, [r3, #4]
 801736e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8017372:	3301      	adds	r3, #1
 8017374:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8017376:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 801737a:	e027      	b.n	80173cc <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801737c:	4b14      	ldr	r3, [pc, #80]	@ (80173d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 801737e:	6858      	ldr	r0, [r3, #4]
 8017380:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8017384:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8017388:	ebbc 0c00 	subs.w	ip, ip, r0
 801738c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8017390:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8017394:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8017398:	ea4f 118c 	mov.w	r1, ip, lsl #6
 801739c:	ebb1 010c 	subs.w	r1, r1, ip
 80173a0:	eb63 030e 	sbc.w	r3, r3, lr
 80173a4:	00db      	lsls	r3, r3, #3
 80173a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80173aa:	00c9      	lsls	r1, r1, #3
 80173ac:	eb11 0c00 	adds.w	ip, r1, r0
 80173b0:	f143 0300 	adc.w	r3, r3, #0
 80173b4:	0299      	lsls	r1, r3, #10
 80173b6:	2300      	movs	r3, #0
 80173b8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80173bc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80173c0:	f7f9 fcca 	bl	8010d58 <__aeabi_uldivmod>
 80173c4:	e7d1      	b.n	801736a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 80173c6:	4803      	ldr	r0, [pc, #12]	@ (80173d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80173c8:	e000      	b.n	80173cc <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80173ca:	4803      	ldr	r0, [pc, #12]	@ (80173d8 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80173cc:	bd08      	pop	{r3, pc}
 80173ce:	bf00      	nop
 80173d0:	40023800 	.word	0x40023800
 80173d4:	007a1200 	.word	0x007a1200
 80173d8:	00f42400 	.word	0x00f42400

080173dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80173dc:	2800      	cmp	r0, #0
 80173de:	f000 809b 	beq.w	8017518 <HAL_RCC_ClockConfig+0x13c>
{
 80173e2:	b570      	push	{r4, r5, r6, lr}
 80173e4:	460d      	mov	r5, r1
 80173e6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80173e8:	4b4f      	ldr	r3, [pc, #316]	@ (8017528 <HAL_RCC_ClockConfig+0x14c>)
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	f003 0307 	and.w	r3, r3, #7
 80173f0:	428b      	cmp	r3, r1
 80173f2:	d208      	bcs.n	8017406 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80173f4:	b2cb      	uxtb	r3, r1
 80173f6:	4a4c      	ldr	r2, [pc, #304]	@ (8017528 <HAL_RCC_ClockConfig+0x14c>)
 80173f8:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80173fa:	6813      	ldr	r3, [r2, #0]
 80173fc:	f003 0307 	and.w	r3, r3, #7
 8017400:	428b      	cmp	r3, r1
 8017402:	f040 808b 	bne.w	801751c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017406:	6823      	ldr	r3, [r4, #0]
 8017408:	f013 0f02 	tst.w	r3, #2
 801740c:	d017      	beq.n	801743e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801740e:	f013 0f04 	tst.w	r3, #4
 8017412:	d004      	beq.n	801741e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8017414:	4a45      	ldr	r2, [pc, #276]	@ (801752c <HAL_RCC_ClockConfig+0x150>)
 8017416:	6893      	ldr	r3, [r2, #8]
 8017418:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 801741c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801741e:	6823      	ldr	r3, [r4, #0]
 8017420:	f013 0f08 	tst.w	r3, #8
 8017424:	d004      	beq.n	8017430 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8017426:	4a41      	ldr	r2, [pc, #260]	@ (801752c <HAL_RCC_ClockConfig+0x150>)
 8017428:	6893      	ldr	r3, [r2, #8]
 801742a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 801742e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017430:	4a3e      	ldr	r2, [pc, #248]	@ (801752c <HAL_RCC_ClockConfig+0x150>)
 8017432:	6893      	ldr	r3, [r2, #8]
 8017434:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017438:	68a1      	ldr	r1, [r4, #8]
 801743a:	430b      	orrs	r3, r1
 801743c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801743e:	6823      	ldr	r3, [r4, #0]
 8017440:	f013 0f01 	tst.w	r3, #1
 8017444:	d032      	beq.n	80174ac <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017446:	6863      	ldr	r3, [r4, #4]
 8017448:	2b01      	cmp	r3, #1
 801744a:	d021      	beq.n	8017490 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801744c:	1e9a      	subs	r2, r3, #2
 801744e:	2a01      	cmp	r2, #1
 8017450:	d925      	bls.n	801749e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017452:	4a36      	ldr	r2, [pc, #216]	@ (801752c <HAL_RCC_ClockConfig+0x150>)
 8017454:	6812      	ldr	r2, [r2, #0]
 8017456:	f012 0f02 	tst.w	r2, #2
 801745a:	d061      	beq.n	8017520 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801745c:	4933      	ldr	r1, [pc, #204]	@ (801752c <HAL_RCC_ClockConfig+0x150>)
 801745e:	688a      	ldr	r2, [r1, #8]
 8017460:	f022 0203 	bic.w	r2, r2, #3
 8017464:	4313      	orrs	r3, r2
 8017466:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8017468:	f7fe ff1e 	bl	80162a8 <HAL_GetTick>
 801746c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801746e:	4b2f      	ldr	r3, [pc, #188]	@ (801752c <HAL_RCC_ClockConfig+0x150>)
 8017470:	689b      	ldr	r3, [r3, #8]
 8017472:	f003 030c 	and.w	r3, r3, #12
 8017476:	6862      	ldr	r2, [r4, #4]
 8017478:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801747c:	d016      	beq.n	80174ac <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801747e:	f7fe ff13 	bl	80162a8 <HAL_GetTick>
 8017482:	1b80      	subs	r0, r0, r6
 8017484:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017488:	4298      	cmp	r0, r3
 801748a:	d9f0      	bls.n	801746e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 801748c:	2003      	movs	r0, #3
 801748e:	e042      	b.n	8017516 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017490:	4a26      	ldr	r2, [pc, #152]	@ (801752c <HAL_RCC_ClockConfig+0x150>)
 8017492:	6812      	ldr	r2, [r2, #0]
 8017494:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8017498:	d1e0      	bne.n	801745c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 801749a:	2001      	movs	r0, #1
 801749c:	e03b      	b.n	8017516 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801749e:	4a23      	ldr	r2, [pc, #140]	@ (801752c <HAL_RCC_ClockConfig+0x150>)
 80174a0:	6812      	ldr	r2, [r2, #0]
 80174a2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80174a6:	d1d9      	bne.n	801745c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80174a8:	2001      	movs	r0, #1
 80174aa:	e034      	b.n	8017516 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80174ac:	4b1e      	ldr	r3, [pc, #120]	@ (8017528 <HAL_RCC_ClockConfig+0x14c>)
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	f003 0307 	and.w	r3, r3, #7
 80174b4:	42ab      	cmp	r3, r5
 80174b6:	d907      	bls.n	80174c8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80174b8:	b2ea      	uxtb	r2, r5
 80174ba:	4b1b      	ldr	r3, [pc, #108]	@ (8017528 <HAL_RCC_ClockConfig+0x14c>)
 80174bc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	f003 0307 	and.w	r3, r3, #7
 80174c4:	42ab      	cmp	r3, r5
 80174c6:	d12d      	bne.n	8017524 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80174c8:	6823      	ldr	r3, [r4, #0]
 80174ca:	f013 0f04 	tst.w	r3, #4
 80174ce:	d006      	beq.n	80174de <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80174d0:	4a16      	ldr	r2, [pc, #88]	@ (801752c <HAL_RCC_ClockConfig+0x150>)
 80174d2:	6893      	ldr	r3, [r2, #8]
 80174d4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80174d8:	68e1      	ldr	r1, [r4, #12]
 80174da:	430b      	orrs	r3, r1
 80174dc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80174de:	6823      	ldr	r3, [r4, #0]
 80174e0:	f013 0f08 	tst.w	r3, #8
 80174e4:	d007      	beq.n	80174f6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80174e6:	4a11      	ldr	r2, [pc, #68]	@ (801752c <HAL_RCC_ClockConfig+0x150>)
 80174e8:	6893      	ldr	r3, [r2, #8]
 80174ea:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80174ee:	6921      	ldr	r1, [r4, #16]
 80174f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80174f4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80174f6:	f7ff ff03 	bl	8017300 <HAL_RCC_GetSysClockFreq>
 80174fa:	4b0c      	ldr	r3, [pc, #48]	@ (801752c <HAL_RCC_ClockConfig+0x150>)
 80174fc:	689b      	ldr	r3, [r3, #8]
 80174fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8017502:	4a0b      	ldr	r2, [pc, #44]	@ (8017530 <HAL_RCC_ClockConfig+0x154>)
 8017504:	5cd3      	ldrb	r3, [r2, r3]
 8017506:	40d8      	lsrs	r0, r3
 8017508:	4b0a      	ldr	r3, [pc, #40]	@ (8017534 <HAL_RCC_ClockConfig+0x158>)
 801750a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 801750c:	4b0a      	ldr	r3, [pc, #40]	@ (8017538 <HAL_RCC_ClockConfig+0x15c>)
 801750e:	6818      	ldr	r0, [r3, #0]
 8017510:	f7fa fede 	bl	80122d0 <HAL_InitTick>
  return HAL_OK;
 8017514:	2000      	movs	r0, #0
}
 8017516:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8017518:	2001      	movs	r0, #1
}
 801751a:	4770      	bx	lr
      return HAL_ERROR;
 801751c:	2001      	movs	r0, #1
 801751e:	e7fa      	b.n	8017516 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8017520:	2001      	movs	r0, #1
 8017522:	e7f8      	b.n	8017516 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8017524:	2001      	movs	r0, #1
 8017526:	e7f6      	b.n	8017516 <HAL_RCC_ClockConfig+0x13a>
 8017528:	40023c00 	.word	0x40023c00
 801752c:	40023800 	.word	0x40023800
 8017530:	08036468 	.word	0x08036468
 8017534:	20000018 	.word	0x20000018
 8017538:	20000108 	.word	0x20000108

0801753c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 801753c:	4b01      	ldr	r3, [pc, #4]	@ (8017544 <HAL_RCC_GetHCLKFreq+0x8>)
 801753e:	6818      	ldr	r0, [r3, #0]
 8017540:	4770      	bx	lr
 8017542:	bf00      	nop
 8017544:	20000018 	.word	0x20000018

08017548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017548:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801754a:	f7ff fff7 	bl	801753c <HAL_RCC_GetHCLKFreq>
 801754e:	4b04      	ldr	r3, [pc, #16]	@ (8017560 <HAL_RCC_GetPCLK1Freq+0x18>)
 8017550:	689b      	ldr	r3, [r3, #8]
 8017552:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8017556:	4a03      	ldr	r2, [pc, #12]	@ (8017564 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8017558:	5cd3      	ldrb	r3, [r2, r3]
}
 801755a:	40d8      	lsrs	r0, r3
 801755c:	bd08      	pop	{r3, pc}
 801755e:	bf00      	nop
 8017560:	40023800 	.word	0x40023800
 8017564:	08036460 	.word	0x08036460

08017568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017568:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801756a:	f7ff ffe7 	bl	801753c <HAL_RCC_GetHCLKFreq>
 801756e:	4b04      	ldr	r3, [pc, #16]	@ (8017580 <HAL_RCC_GetPCLK2Freq+0x18>)
 8017570:	689b      	ldr	r3, [r3, #8]
 8017572:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8017576:	4a03      	ldr	r2, [pc, #12]	@ (8017584 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8017578:	5cd3      	ldrb	r3, [r2, r3]
}
 801757a:	40d8      	lsrs	r0, r3
 801757c:	bd08      	pop	{r3, pc}
 801757e:	bf00      	nop
 8017580:	40023800 	.word	0x40023800
 8017584:	08036460 	.word	0x08036460

08017588 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8017588:	230f      	movs	r3, #15
 801758a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801758c:	4b0b      	ldr	r3, [pc, #44]	@ (80175bc <HAL_RCC_GetClockConfig+0x34>)
 801758e:	689a      	ldr	r2, [r3, #8]
 8017590:	f002 0203 	and.w	r2, r2, #3
 8017594:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8017596:	689a      	ldr	r2, [r3, #8]
 8017598:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 801759c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801759e:	689a      	ldr	r2, [r3, #8]
 80175a0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80175a4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80175a6:	689b      	ldr	r3, [r3, #8]
 80175a8:	08db      	lsrs	r3, r3, #3
 80175aa:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80175ae:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80175b0:	4b03      	ldr	r3, [pc, #12]	@ (80175c0 <HAL_RCC_GetClockConfig+0x38>)
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	f003 0307 	and.w	r3, r3, #7
 80175b8:	600b      	str	r3, [r1, #0]
}
 80175ba:	4770      	bx	lr
 80175bc:	40023800 	.word	0x40023800
 80175c0:	40023c00 	.word	0x40023c00

080175c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80175c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175c8:	b082      	sub	sp, #8
 80175ca:	4605      	mov	r5, r0
 80175cc:	4688      	mov	r8, r1
 80175ce:	4617      	mov	r7, r2
 80175d0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80175d2:	f7fe fe69 	bl	80162a8 <HAL_GetTick>
 80175d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80175d8:	1a1b      	subs	r3, r3, r0
 80175da:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80175de:	f7fe fe63 	bl	80162a8 <HAL_GetTick>
 80175e2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80175e4:	4b28      	ldr	r3, [pc, #160]	@ (8017688 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80175ec:	fb09 f303 	mul.w	r3, r9, r3
 80175f0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80175f2:	682b      	ldr	r3, [r5, #0]
 80175f4:	689c      	ldr	r4, [r3, #8]
 80175f6:	ea38 0404 	bics.w	r4, r8, r4
 80175fa:	bf0c      	ite	eq
 80175fc:	2301      	moveq	r3, #1
 80175fe:	2300      	movne	r3, #0
 8017600:	42bb      	cmp	r3, r7
 8017602:	d03d      	beq.n	8017680 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8017604:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017608:	d0f3      	beq.n	80175f2 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801760a:	f7fe fe4d 	bl	80162a8 <HAL_GetTick>
 801760e:	eba0 000a 	sub.w	r0, r0, sl
 8017612:	4548      	cmp	r0, r9
 8017614:	d207      	bcs.n	8017626 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8017616:	9a01      	ldr	r2, [sp, #4]
 8017618:	b102      	cbz	r2, 801761c <SPI_WaitFlagStateUntilTimeout+0x58>
 801761a:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 801761c:	9b01      	ldr	r3, [sp, #4]
 801761e:	3b01      	subs	r3, #1
 8017620:	9301      	str	r3, [sp, #4]
 8017622:	4691      	mov	r9, r2
 8017624:	e7e5      	b.n	80175f2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8017626:	682a      	ldr	r2, [r5, #0]
 8017628:	6853      	ldr	r3, [r2, #4]
 801762a:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 801762e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017630:	686b      	ldr	r3, [r5, #4]
 8017632:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017636:	d00b      	beq.n	8017650 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8017638:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801763a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801763e:	d014      	beq.n	801766a <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8017640:	2301      	movs	r3, #1
 8017642:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017646:	2300      	movs	r3, #0
 8017648:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 801764c:	2003      	movs	r0, #3
 801764e:	e018      	b.n	8017682 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017650:	68ab      	ldr	r3, [r5, #8]
 8017652:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017656:	d002      	beq.n	801765e <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801765c:	d1ec      	bne.n	8017638 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 801765e:	682a      	ldr	r2, [r5, #0]
 8017660:	6813      	ldr	r3, [r2, #0]
 8017662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017666:	6013      	str	r3, [r2, #0]
 8017668:	e7e6      	b.n	8017638 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 801766a:	682a      	ldr	r2, [r5, #0]
 801766c:	6813      	ldr	r3, [r2, #0]
 801766e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017672:	6013      	str	r3, [r2, #0]
 8017674:	682a      	ldr	r2, [r5, #0]
 8017676:	6813      	ldr	r3, [r2, #0]
 8017678:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801767c:	6013      	str	r3, [r2, #0]
 801767e:	e7df      	b.n	8017640 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8017680:	2000      	movs	r0, #0
}
 8017682:	b002      	add	sp, #8
 8017684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017688:	20000018 	.word	0x20000018

0801768c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801768c:	b570      	push	{r4, r5, r6, lr}
 801768e:	b084      	sub	sp, #16
 8017690:	4604      	mov	r4, r0
 8017692:	460d      	mov	r5, r1
 8017694:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8017696:	9200      	str	r2, [sp, #0]
 8017698:	460b      	mov	r3, r1
 801769a:	2201      	movs	r2, #1
 801769c:	2102      	movs	r1, #2
 801769e:	f7ff ff91 	bl	80175c4 <SPI_WaitFlagStateUntilTimeout>
 80176a2:	b9d0      	cbnz	r0, 80176da <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80176a4:	4b17      	ldr	r3, [pc, #92]	@ (8017704 <SPI_EndRxTxTransaction+0x78>)
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	4a17      	ldr	r2, [pc, #92]	@ (8017708 <SPI_EndRxTxTransaction+0x7c>)
 80176aa:	fba2 2303 	umull	r2, r3, r2, r3
 80176ae:	0d5b      	lsrs	r3, r3, #21
 80176b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80176b4:	fb02 f303 	mul.w	r3, r2, r3
 80176b8:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80176ba:	6863      	ldr	r3, [r4, #4]
 80176bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80176c0:	d011      	beq.n	80176e6 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80176c2:	9b03      	ldr	r3, [sp, #12]
 80176c4:	b13b      	cbz	r3, 80176d6 <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 80176c6:	9b03      	ldr	r3, [sp, #12]
 80176c8:	3b01      	subs	r3, #1
 80176ca:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80176cc:	6823      	ldr	r3, [r4, #0]
 80176ce:	689b      	ldr	r3, [r3, #8]
 80176d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80176d4:	d1f5      	bne.n	80176c2 <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 80176d6:	b004      	add	sp, #16
 80176d8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80176da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80176dc:	f043 0320 	orr.w	r3, r3, #32
 80176e0:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80176e2:	2003      	movs	r0, #3
 80176e4:	e7f7      	b.n	80176d6 <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80176e6:	9600      	str	r6, [sp, #0]
 80176e8:	462b      	mov	r3, r5
 80176ea:	2200      	movs	r2, #0
 80176ec:	2180      	movs	r1, #128	@ 0x80
 80176ee:	4620      	mov	r0, r4
 80176f0:	f7ff ff68 	bl	80175c4 <SPI_WaitFlagStateUntilTimeout>
 80176f4:	2800      	cmp	r0, #0
 80176f6:	d0ee      	beq.n	80176d6 <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80176f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80176fa:	f043 0320 	orr.w	r3, r3, #32
 80176fe:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8017700:	2003      	movs	r0, #3
 8017702:	e7e8      	b.n	80176d6 <SPI_EndRxTxTransaction+0x4a>
 8017704:	20000018 	.word	0x20000018
 8017708:	165e9f81 	.word	0x165e9f81

0801770c <SPI_EndRxTransaction>:
{
 801770c:	b510      	push	{r4, lr}
 801770e:	b082      	sub	sp, #8
 8017710:	4604      	mov	r4, r0
 8017712:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017714:	6841      	ldr	r1, [r0, #4]
 8017716:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 801771a:	d014      	beq.n	8017746 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801771c:	6861      	ldr	r1, [r4, #4]
 801771e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8017722:	d12a      	bne.n	801777a <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8017724:	68a1      	ldr	r1, [r4, #8]
 8017726:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801772a:	d019      	beq.n	8017760 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801772c:	9200      	str	r2, [sp, #0]
 801772e:	2200      	movs	r2, #0
 8017730:	2180      	movs	r1, #128	@ 0x80
 8017732:	4620      	mov	r0, r4
 8017734:	f7ff ff46 	bl	80175c4 <SPI_WaitFlagStateUntilTimeout>
 8017738:	b330      	cbz	r0, 8017788 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801773a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801773c:	f043 0320 	orr.w	r3, r3, #32
 8017740:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8017742:	2003      	movs	r0, #3
 8017744:	e020      	b.n	8017788 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017746:	6881      	ldr	r1, [r0, #8]
 8017748:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801774c:	d002      	beq.n	8017754 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801774e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017752:	d1e3      	bne.n	801771c <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8017754:	6820      	ldr	r0, [r4, #0]
 8017756:	6801      	ldr	r1, [r0, #0]
 8017758:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 801775c:	6001      	str	r1, [r0, #0]
 801775e:	e7dd      	b.n	801771c <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017760:	9200      	str	r2, [sp, #0]
 8017762:	2200      	movs	r2, #0
 8017764:	2101      	movs	r1, #1
 8017766:	4620      	mov	r0, r4
 8017768:	f7ff ff2c 	bl	80175c4 <SPI_WaitFlagStateUntilTimeout>
 801776c:	b160      	cbz	r0, 8017788 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801776e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017770:	f043 0320 	orr.w	r3, r3, #32
 8017774:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8017776:	2003      	movs	r0, #3
 8017778:	e006      	b.n	8017788 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801777a:	9200      	str	r2, [sp, #0]
 801777c:	2200      	movs	r2, #0
 801777e:	2101      	movs	r1, #1
 8017780:	4620      	mov	r0, r4
 8017782:	f7ff ff1f 	bl	80175c4 <SPI_WaitFlagStateUntilTimeout>
 8017786:	b908      	cbnz	r0, 801778c <SPI_EndRxTransaction+0x80>
}
 8017788:	b002      	add	sp, #8
 801778a:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801778c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801778e:	f043 0320 	orr.w	r3, r3, #32
 8017792:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8017794:	2003      	movs	r0, #3
 8017796:	e7f7      	b.n	8017788 <SPI_EndRxTransaction+0x7c>

08017798 <HAL_SPI_Init>:
  if (hspi == NULL)
 8017798:	2800      	cmp	r0, #0
 801779a:	d05a      	beq.n	8017852 <HAL_SPI_Init+0xba>
{
 801779c:	b510      	push	{r4, lr}
 801779e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80177a0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80177a2:	b933      	cbnz	r3, 80177b2 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80177a4:	6843      	ldr	r3, [r0, #4]
 80177a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80177aa:	d005      	beq.n	80177b8 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80177ac:	2300      	movs	r3, #0
 80177ae:	61c3      	str	r3, [r0, #28]
 80177b0:	e002      	b.n	80177b8 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80177b2:	2300      	movs	r3, #0
 80177b4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80177b6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80177b8:	2300      	movs	r3, #0
 80177ba:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80177bc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d040      	beq.n	8017846 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 80177c4:	2302      	movs	r3, #2
 80177c6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80177ca:	6822      	ldr	r2, [r4, #0]
 80177cc:	6813      	ldr	r3, [r2, #0]
 80177ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80177d2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80177d4:	6863      	ldr	r3, [r4, #4]
 80177d6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80177da:	68a2      	ldr	r2, [r4, #8]
 80177dc:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 80177e0:	4313      	orrs	r3, r2
 80177e2:	68e2      	ldr	r2, [r4, #12]
 80177e4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80177e8:	4313      	orrs	r3, r2
 80177ea:	6922      	ldr	r2, [r4, #16]
 80177ec:	f002 0202 	and.w	r2, r2, #2
 80177f0:	4313      	orrs	r3, r2
 80177f2:	6962      	ldr	r2, [r4, #20]
 80177f4:	f002 0201 	and.w	r2, r2, #1
 80177f8:	4313      	orrs	r3, r2
 80177fa:	69a2      	ldr	r2, [r4, #24]
 80177fc:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8017800:	4313      	orrs	r3, r2
 8017802:	69e2      	ldr	r2, [r4, #28]
 8017804:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8017808:	4313      	orrs	r3, r2
 801780a:	6a22      	ldr	r2, [r4, #32]
 801780c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8017810:	4313      	orrs	r3, r2
 8017812:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017814:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8017818:	6821      	ldr	r1, [r4, #0]
 801781a:	4313      	orrs	r3, r2
 801781c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801781e:	8b63      	ldrh	r3, [r4, #26]
 8017820:	f003 0304 	and.w	r3, r3, #4
 8017824:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017826:	f002 0210 	and.w	r2, r2, #16
 801782a:	6821      	ldr	r1, [r4, #0]
 801782c:	4313      	orrs	r3, r2
 801782e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8017830:	6822      	ldr	r2, [r4, #0]
 8017832:	69d3      	ldr	r3, [r2, #28]
 8017834:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017838:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801783a:	2000      	movs	r0, #0
 801783c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801783e:	2301      	movs	r3, #1
 8017840:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8017844:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8017846:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 801784a:	4620      	mov	r0, r4
 801784c:	f7fa fcbc 	bl	80121c8 <HAL_SPI_MspInit>
 8017850:	e7b8      	b.n	80177c4 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8017852:	2001      	movs	r0, #1
}
 8017854:	4770      	bx	lr

08017856 <HAL_SPI_Transmit>:
{
 8017856:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801785a:	b083      	sub	sp, #12
 801785c:	4604      	mov	r4, r0
 801785e:	4689      	mov	r9, r1
 8017860:	4690      	mov	r8, r2
 8017862:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8017864:	f7fe fd20 	bl	80162a8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8017868:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 801786c:	b2f6      	uxtb	r6, r6
 801786e:	2e01      	cmp	r6, #1
 8017870:	f040 80cc 	bne.w	8017a0c <HAL_SPI_Transmit+0x1b6>
 8017874:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8017876:	f1b9 0f00 	cmp.w	r9, #0
 801787a:	f000 80c8 	beq.w	8017a0e <HAL_SPI_Transmit+0x1b8>
 801787e:	f1b8 0f00 	cmp.w	r8, #0
 8017882:	f000 80c4 	beq.w	8017a0e <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8017886:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 801788a:	2b01      	cmp	r3, #1
 801788c:	f000 80c3 	beq.w	8017a16 <HAL_SPI_Transmit+0x1c0>
 8017890:	2301      	movs	r3, #1
 8017892:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8017896:	2303      	movs	r3, #3
 8017898:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801789c:	2300      	movs	r3, #0
 801789e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80178a0:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80178a4:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80178a8:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80178ac:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80178ae:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80178b0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80178b2:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80178b4:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80178b6:	68a3      	ldr	r3, [r4, #8]
 80178b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80178bc:	d01e      	beq.n	80178fc <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80178be:	6823      	ldr	r3, [r4, #0]
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80178c6:	d103      	bne.n	80178d0 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80178c8:	681a      	ldr	r2, [r3, #0]
 80178ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80178ce:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80178d0:	68e3      	ldr	r3, [r4, #12]
 80178d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80178d6:	d01c      	beq.n	8017912 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80178d8:	6863      	ldr	r3, [r4, #4]
 80178da:	b113      	cbz	r3, 80178e2 <HAL_SPI_Transmit+0x8c>
 80178dc:	f1b8 0f01 	cmp.w	r8, #1
 80178e0:	d15f      	bne.n	80179a2 <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80178e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80178e4:	6823      	ldr	r3, [r4, #0]
 80178e6:	7812      	ldrb	r2, [r2, #0]
 80178e8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80178ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80178ec:	3301      	adds	r3, #1
 80178ee:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80178f0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80178f2:	b29b      	uxth	r3, r3
 80178f4:	3b01      	subs	r3, #1
 80178f6:	b29b      	uxth	r3, r3
 80178f8:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80178fa:	e052      	b.n	80179a2 <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 80178fc:	6822      	ldr	r2, [r4, #0]
 80178fe:	6813      	ldr	r3, [r2, #0]
 8017900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017904:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8017906:	6822      	ldr	r2, [r4, #0]
 8017908:	6813      	ldr	r3, [r2, #0]
 801790a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801790e:	6013      	str	r3, [r2, #0]
 8017910:	e7d5      	b.n	80178be <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017912:	6863      	ldr	r3, [r4, #4]
 8017914:	b113      	cbz	r3, 801791c <HAL_SPI_Transmit+0xc6>
 8017916:	f1b8 0f01 	cmp.w	r8, #1
 801791a:	d115      	bne.n	8017948 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801791c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801791e:	6823      	ldr	r3, [r4, #0]
 8017920:	8812      	ldrh	r2, [r2, #0]
 8017922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017924:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017926:	3302      	adds	r3, #2
 8017928:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 801792a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801792c:	b29b      	uxth	r3, r3
 801792e:	3b01      	subs	r3, #1
 8017930:	b29b      	uxth	r3, r3
 8017932:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017934:	e008      	b.n	8017948 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017936:	f7fe fcb7 	bl	80162a8 <HAL_GetTick>
 801793a:	1bc0      	subs	r0, r0, r7
 801793c:	42a8      	cmp	r0, r5
 801793e:	d302      	bcc.n	8017946 <HAL_SPI_Transmit+0xf0>
 8017940:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017944:	d115      	bne.n	8017972 <HAL_SPI_Transmit+0x11c>
 8017946:	b1a5      	cbz	r5, 8017972 <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8017948:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801794a:	b29b      	uxth	r3, r3
 801794c:	2b00      	cmp	r3, #0
 801794e:	d042      	beq.n	80179d6 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017950:	6823      	ldr	r3, [r4, #0]
 8017952:	689a      	ldr	r2, [r3, #8]
 8017954:	f012 0f02 	tst.w	r2, #2
 8017958:	d0ed      	beq.n	8017936 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801795a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801795c:	8812      	ldrh	r2, [r2, #0]
 801795e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017960:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017962:	3302      	adds	r3, #2
 8017964:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017966:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017968:	b29b      	uxth	r3, r3
 801796a:	3b01      	subs	r3, #1
 801796c:	b29b      	uxth	r3, r3
 801796e:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017970:	e7ea      	b.n	8017948 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8017972:	2301      	movs	r3, #1
 8017974:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017978:	2300      	movs	r3, #0
 801797a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 801797e:	2603      	movs	r6, #3
 8017980:	e045      	b.n	8017a0e <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017982:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017984:	7812      	ldrb	r2, [r2, #0]
 8017986:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8017988:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801798a:	3301      	adds	r3, #1
 801798c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 801798e:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8017992:	fa1f fc8c 	uxth.w	ip, ip
 8017996:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801799a:	fa1f fc8c 	uxth.w	ip, ip
 801799e:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80179a2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80179a4:	b29b      	uxth	r3, r3
 80179a6:	b1b3      	cbz	r3, 80179d6 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80179a8:	6823      	ldr	r3, [r4, #0]
 80179aa:	689a      	ldr	r2, [r3, #8]
 80179ac:	f012 0f02 	tst.w	r2, #2
 80179b0:	d1e7      	bne.n	8017982 <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80179b2:	f7fe fc79 	bl	80162a8 <HAL_GetTick>
 80179b6:	1bc0      	subs	r0, r0, r7
 80179b8:	42a8      	cmp	r0, r5
 80179ba:	d302      	bcc.n	80179c2 <HAL_SPI_Transmit+0x16c>
 80179bc:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80179c0:	d101      	bne.n	80179c6 <HAL_SPI_Transmit+0x170>
 80179c2:	2d00      	cmp	r5, #0
 80179c4:	d1ed      	bne.n	80179a2 <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 80179c6:	2301      	movs	r3, #1
 80179c8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80179cc:	2300      	movs	r3, #0
 80179ce:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80179d2:	2603      	movs	r6, #3
 80179d4:	e01b      	b.n	8017a0e <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80179d6:	463a      	mov	r2, r7
 80179d8:	4629      	mov	r1, r5
 80179da:	4620      	mov	r0, r4
 80179dc:	f7ff fe56 	bl	801768c <SPI_EndRxTxTransaction>
 80179e0:	b108      	cbz	r0, 80179e6 <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80179e2:	2320      	movs	r3, #32
 80179e4:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80179e6:	68a3      	ldr	r3, [r4, #8]
 80179e8:	b933      	cbnz	r3, 80179f8 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80179ea:	9301      	str	r3, [sp, #4]
 80179ec:	6823      	ldr	r3, [r4, #0]
 80179ee:	68da      	ldr	r2, [r3, #12]
 80179f0:	9201      	str	r2, [sp, #4]
 80179f2:	689b      	ldr	r3, [r3, #8]
 80179f4:	9301      	str	r3, [sp, #4]
 80179f6:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80179f8:	2301      	movs	r3, #1
 80179fa:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80179fe:	2300      	movs	r3, #0
 8017a00:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017a04:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017a06:	b913      	cbnz	r3, 8017a0e <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 8017a08:	2600      	movs	r6, #0
 8017a0a:	e000      	b.n	8017a0e <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8017a0c:	2602      	movs	r6, #2
}
 8017a0e:	4630      	mov	r0, r6
 8017a10:	b003      	add	sp, #12
 8017a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8017a16:	2602      	movs	r6, #2
 8017a18:	e7f9      	b.n	8017a0e <HAL_SPI_Transmit+0x1b8>

08017a1a <HAL_SPI_TransmitReceive>:
{
 8017a1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a1e:	b083      	sub	sp, #12
 8017a20:	4604      	mov	r4, r0
 8017a22:	4688      	mov	r8, r1
 8017a24:	4691      	mov	r9, r2
 8017a26:	461f      	mov	r7, r3
 8017a28:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8017a2a:	f7fe fc3d 	bl	80162a8 <HAL_GetTick>
 8017a2e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8017a30:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8017a34:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8017a36:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8017a38:	2b01      	cmp	r3, #1
 8017a3a:	d00a      	beq.n	8017a52 <HAL_SPI_TransmitReceive+0x38>
 8017a3c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8017a40:	f040 8105 	bne.w	8017c4e <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8017a44:	68a2      	ldr	r2, [r4, #8]
 8017a46:	2a00      	cmp	r2, #0
 8017a48:	f040 8105 	bne.w	8017c56 <HAL_SPI_TransmitReceive+0x23c>
 8017a4c:	2b04      	cmp	r3, #4
 8017a4e:	f040 8104 	bne.w	8017c5a <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8017a52:	f1b8 0f00 	cmp.w	r8, #0
 8017a56:	f000 8102 	beq.w	8017c5e <HAL_SPI_TransmitReceive+0x244>
 8017a5a:	f1b9 0f00 	cmp.w	r9, #0
 8017a5e:	f000 8100 	beq.w	8017c62 <HAL_SPI_TransmitReceive+0x248>
 8017a62:	2f00      	cmp	r7, #0
 8017a64:	f000 80ff 	beq.w	8017c66 <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8017a68:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017a6c:	2b01      	cmp	r3, #1
 8017a6e:	f000 80fc 	beq.w	8017c6a <HAL_SPI_TransmitReceive+0x250>
 8017a72:	2301      	movs	r3, #1
 8017a74:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8017a78:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8017a7c:	b2db      	uxtb	r3, r3
 8017a7e:	2b04      	cmp	r3, #4
 8017a80:	d002      	beq.n	8017a88 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8017a82:	2305      	movs	r3, #5
 8017a84:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017a88:	2300      	movs	r3, #0
 8017a8a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8017a8c:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8017a90:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8017a92:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8017a94:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8017a98:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8017a9a:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8017a9c:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8017a9e:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017aa0:	6823      	ldr	r3, [r4, #0]
 8017aa2:	681a      	ldr	r2, [r3, #0]
 8017aa4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8017aa8:	d103      	bne.n	8017ab2 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8017aaa:	681a      	ldr	r2, [r3, #0]
 8017aac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017ab0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8017ab2:	68e3      	ldr	r3, [r4, #12]
 8017ab4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017ab8:	d011      	beq.n	8017ade <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017aba:	6863      	ldr	r3, [r4, #4]
 8017abc:	b10b      	cbz	r3, 8017ac2 <HAL_SPI_TransmitReceive+0xa8>
 8017abe:	2f01      	cmp	r7, #1
 8017ac0:	d10b      	bne.n	8017ada <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017ac2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017ac4:	6823      	ldr	r3, [r4, #0]
 8017ac6:	7812      	ldrb	r2, [r2, #0]
 8017ac8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8017aca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017acc:	3301      	adds	r3, #1
 8017ace:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017ad0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017ad2:	b29b      	uxth	r3, r3
 8017ad4:	3b01      	subs	r3, #1
 8017ad6:	b29b      	uxth	r3, r3
 8017ad8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8017ada:	2701      	movs	r7, #1
 8017adc:	e071      	b.n	8017bc2 <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017ade:	6863      	ldr	r3, [r4, #4]
 8017ae0:	b10b      	cbz	r3, 8017ae6 <HAL_SPI_TransmitReceive+0xcc>
 8017ae2:	2f01      	cmp	r7, #1
 8017ae4:	d10b      	bne.n	8017afe <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017ae6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017ae8:	6823      	ldr	r3, [r4, #0]
 8017aea:	8812      	ldrh	r2, [r2, #0]
 8017aec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017aee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017af0:	3302      	adds	r3, #2
 8017af2:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017af4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017af6:	b29b      	uxth	r3, r3
 8017af8:	3b01      	subs	r3, #1
 8017afa:	b29b      	uxth	r3, r3
 8017afc:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8017afe:	2701      	movs	r7, #1
 8017b00:	e01b      	b.n	8017b3a <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017b02:	6823      	ldr	r3, [r4, #0]
 8017b04:	689a      	ldr	r2, [r3, #8]
 8017b06:	f012 0f01 	tst.w	r2, #1
 8017b0a:	d00e      	beq.n	8017b2a <HAL_SPI_TransmitReceive+0x110>
 8017b0c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017b0e:	b292      	uxth	r2, r2
 8017b10:	b15a      	cbz	r2, 8017b2a <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017b12:	68da      	ldr	r2, [r3, #12]
 8017b14:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017b16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8017b18:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017b1a:	3302      	adds	r3, #2
 8017b1c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017b1e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017b20:	b29b      	uxth	r3, r3
 8017b22:	3b01      	subs	r3, #1
 8017b24:	b29b      	uxth	r3, r3
 8017b26:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8017b28:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8017b2a:	f7fe fbbd 	bl	80162a8 <HAL_GetTick>
 8017b2e:	1b80      	subs	r0, r0, r6
 8017b30:	42a8      	cmp	r0, r5
 8017b32:	d302      	bcc.n	8017b3a <HAL_SPI_TransmitReceive+0x120>
 8017b34:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017b38:	d11e      	bne.n	8017b78 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017b3a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	b91b      	cbnz	r3, 8017b48 <HAL_SPI_TransmitReceive+0x12e>
 8017b40:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017b42:	b29b      	uxth	r3, r3
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d062      	beq.n	8017c0e <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017b48:	6823      	ldr	r3, [r4, #0]
 8017b4a:	689a      	ldr	r2, [r3, #8]
 8017b4c:	f012 0f02 	tst.w	r2, #2
 8017b50:	d0d7      	beq.n	8017b02 <HAL_SPI_TransmitReceive+0xe8>
 8017b52:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017b54:	b292      	uxth	r2, r2
 8017b56:	2a00      	cmp	r2, #0
 8017b58:	d0d3      	beq.n	8017b02 <HAL_SPI_TransmitReceive+0xe8>
 8017b5a:	2f00      	cmp	r7, #0
 8017b5c:	d0d1      	beq.n	8017b02 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017b5e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017b60:	8812      	ldrh	r2, [r2, #0]
 8017b62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017b64:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b66:	3302      	adds	r3, #2
 8017b68:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017b6a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017b6c:	b29b      	uxth	r3, r3
 8017b6e:	3b01      	subs	r3, #1
 8017b70:	b29b      	uxth	r3, r3
 8017b72:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8017b74:	2700      	movs	r7, #0
 8017b76:	e7c4      	b.n	8017b02 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8017b78:	2301      	movs	r3, #1
 8017b7a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017b7e:	2300      	movs	r3, #0
 8017b80:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8017b84:	2003      	movs	r0, #3
 8017b86:	e063      	b.n	8017c50 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017b88:	6823      	ldr	r3, [r4, #0]
 8017b8a:	689a      	ldr	r2, [r3, #8]
 8017b8c:	f012 0f01 	tst.w	r2, #1
 8017b90:	d00e      	beq.n	8017bb0 <HAL_SPI_TransmitReceive+0x196>
 8017b92:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017b94:	b292      	uxth	r2, r2
 8017b96:	b15a      	cbz	r2, 8017bb0 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8017b98:	68da      	ldr	r2, [r3, #12]
 8017b9a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017b9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8017b9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017ba0:	3301      	adds	r3, #1
 8017ba2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017ba4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017ba6:	b29b      	uxth	r3, r3
 8017ba8:	3b01      	subs	r3, #1
 8017baa:	b29b      	uxth	r3, r3
 8017bac:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8017bae:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8017bb0:	f7fe fb7a 	bl	80162a8 <HAL_GetTick>
 8017bb4:	1b83      	subs	r3, r0, r6
 8017bb6:	42ab      	cmp	r3, r5
 8017bb8:	d302      	bcc.n	8017bc0 <HAL_SPI_TransmitReceive+0x1a6>
 8017bba:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017bbe:	d11e      	bne.n	8017bfe <HAL_SPI_TransmitReceive+0x1e4>
 8017bc0:	b1ed      	cbz	r5, 8017bfe <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017bc2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017bc4:	b29b      	uxth	r3, r3
 8017bc6:	b913      	cbnz	r3, 8017bce <HAL_SPI_TransmitReceive+0x1b4>
 8017bc8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017bca:	b29b      	uxth	r3, r3
 8017bcc:	b1fb      	cbz	r3, 8017c0e <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017bce:	6823      	ldr	r3, [r4, #0]
 8017bd0:	689a      	ldr	r2, [r3, #8]
 8017bd2:	f012 0f02 	tst.w	r2, #2
 8017bd6:	d0d7      	beq.n	8017b88 <HAL_SPI_TransmitReceive+0x16e>
 8017bd8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017bda:	b292      	uxth	r2, r2
 8017bdc:	2a00      	cmp	r2, #0
 8017bde:	d0d3      	beq.n	8017b88 <HAL_SPI_TransmitReceive+0x16e>
 8017be0:	2f00      	cmp	r7, #0
 8017be2:	d0d1      	beq.n	8017b88 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8017be4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017be6:	7812      	ldrb	r2, [r2, #0]
 8017be8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8017bea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bec:	3301      	adds	r3, #1
 8017bee:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017bf0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017bf2:	b29b      	uxth	r3, r3
 8017bf4:	3b01      	subs	r3, #1
 8017bf6:	b29b      	uxth	r3, r3
 8017bf8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8017bfa:	2700      	movs	r7, #0
 8017bfc:	e7c4      	b.n	8017b88 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8017bfe:	2301      	movs	r3, #1
 8017c00:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017c04:	2300      	movs	r3, #0
 8017c06:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8017c0a:	2003      	movs	r0, #3
 8017c0c:	e020      	b.n	8017c50 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017c0e:	4632      	mov	r2, r6
 8017c10:	4629      	mov	r1, r5
 8017c12:	4620      	mov	r0, r4
 8017c14:	f7ff fd3a 	bl	801768c <SPI_EndRxTxTransaction>
 8017c18:	b990      	cbnz	r0, 8017c40 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017c1a:	68a3      	ldr	r3, [r4, #8]
 8017c1c:	b933      	cbnz	r3, 8017c2c <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8017c1e:	9301      	str	r3, [sp, #4]
 8017c20:	6823      	ldr	r3, [r4, #0]
 8017c22:	68da      	ldr	r2, [r3, #12]
 8017c24:	9201      	str	r2, [sp, #4]
 8017c26:	689b      	ldr	r3, [r3, #8]
 8017c28:	9301      	str	r3, [sp, #4]
 8017c2a:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8017c2c:	2301      	movs	r3, #1
 8017c2e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8017c32:	2300      	movs	r3, #0
 8017c34:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017c38:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017c3a:	b14b      	cbz	r3, 8017c50 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8017c3c:	2001      	movs	r0, #1
 8017c3e:	e007      	b.n	8017c50 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017c40:	2320      	movs	r3, #32
 8017c42:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8017c44:	2300      	movs	r3, #0
 8017c46:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8017c4a:	2001      	movs	r0, #1
 8017c4c:	e000      	b.n	8017c50 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8017c4e:	2002      	movs	r0, #2
}
 8017c50:	b003      	add	sp, #12
 8017c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8017c56:	2002      	movs	r0, #2
 8017c58:	e7fa      	b.n	8017c50 <HAL_SPI_TransmitReceive+0x236>
 8017c5a:	2002      	movs	r0, #2
 8017c5c:	e7f8      	b.n	8017c50 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8017c5e:	2001      	movs	r0, #1
 8017c60:	e7f6      	b.n	8017c50 <HAL_SPI_TransmitReceive+0x236>
 8017c62:	2001      	movs	r0, #1
 8017c64:	e7f4      	b.n	8017c50 <HAL_SPI_TransmitReceive+0x236>
 8017c66:	2001      	movs	r0, #1
 8017c68:	e7f2      	b.n	8017c50 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8017c6a:	2002      	movs	r0, #2
 8017c6c:	e7f0      	b.n	8017c50 <HAL_SPI_TransmitReceive+0x236>

08017c6e <HAL_SPI_Receive>:
{
 8017c6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c72:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8017c74:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8017c78:	b2f6      	uxtb	r6, r6
 8017c7a:	2e01      	cmp	r6, #1
 8017c7c:	f040 80b4 	bne.w	8017de8 <HAL_SPI_Receive+0x17a>
 8017c80:	4604      	mov	r4, r0
 8017c82:	4689      	mov	r9, r1
 8017c84:	4690      	mov	r8, r2
 8017c86:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8017c88:	6843      	ldr	r3, [r0, #4]
 8017c8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017c8e:	d101      	bne.n	8017c94 <HAL_SPI_Receive+0x26>
 8017c90:	6883      	ldr	r3, [r0, #8]
 8017c92:	b393      	cbz	r3, 8017cfa <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 8017c94:	f7fe fb08 	bl	80162a8 <HAL_GetTick>
 8017c98:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8017c9a:	f1b9 0f00 	cmp.w	r9, #0
 8017c9e:	f000 80a4 	beq.w	8017dea <HAL_SPI_Receive+0x17c>
 8017ca2:	f1b8 0f00 	cmp.w	r8, #0
 8017ca6:	f000 80a0 	beq.w	8017dea <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 8017caa:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017cae:	2b01      	cmp	r3, #1
 8017cb0:	f000 809f 	beq.w	8017df2 <HAL_SPI_Receive+0x184>
 8017cb4:	2301      	movs	r3, #1
 8017cb6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8017cba:	2304      	movs	r3, #4
 8017cbc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8017cc4:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8017cc8:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8017ccc:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8017cd0:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8017cd2:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8017cd4:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8017cd6:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8017cd8:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017cda:	68a3      	ldr	r3, [r4, #8]
 8017cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017ce0:	d015      	beq.n	8017d0e <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017ce2:	6823      	ldr	r3, [r4, #0]
 8017ce4:	681a      	ldr	r2, [r3, #0]
 8017ce6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8017cea:	d103      	bne.n	8017cf4 <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 8017cec:	681a      	ldr	r2, [r3, #0]
 8017cee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017cf2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8017cf4:	68e3      	ldr	r3, [r4, #12]
 8017cf6:	b1f3      	cbz	r3, 8017d36 <HAL_SPI_Receive+0xc8>
 8017cf8:	e043      	b.n	8017d82 <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8017cfa:	2304      	movs	r3, #4
 8017cfc:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8017d00:	9500      	str	r5, [sp, #0]
 8017d02:	4613      	mov	r3, r2
 8017d04:	460a      	mov	r2, r1
 8017d06:	f7ff fe88 	bl	8017a1a <HAL_SPI_TransmitReceive>
 8017d0a:	4606      	mov	r6, r0
 8017d0c:	e06d      	b.n	8017dea <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8017d0e:	6822      	ldr	r2, [r4, #0]
 8017d10:	6813      	ldr	r3, [r2, #0]
 8017d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017d16:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8017d18:	6822      	ldr	r2, [r4, #0]
 8017d1a:	6813      	ldr	r3, [r2, #0]
 8017d1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017d20:	6013      	str	r3, [r2, #0]
 8017d22:	e7de      	b.n	8017ce2 <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017d24:	f7fe fac0 	bl	80162a8 <HAL_GetTick>
 8017d28:	1bc0      	subs	r0, r0, r7
 8017d2a:	42a8      	cmp	r0, r5
 8017d2c:	d302      	bcc.n	8017d34 <HAL_SPI_Receive+0xc6>
 8017d2e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017d32:	d115      	bne.n	8017d60 <HAL_SPI_Receive+0xf2>
 8017d34:	b1a5      	cbz	r5, 8017d60 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 8017d36:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017d38:	b29b      	uxth	r3, r3
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d042      	beq.n	8017dc4 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017d3e:	6823      	ldr	r3, [r4, #0]
 8017d40:	689a      	ldr	r2, [r3, #8]
 8017d42:	f012 0f01 	tst.w	r2, #1
 8017d46:	d0ed      	beq.n	8017d24 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8017d48:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8017d4a:	7b1b      	ldrb	r3, [r3, #12]
 8017d4c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8017d4e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017d50:	3301      	adds	r3, #1
 8017d52:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017d54:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017d56:	b29b      	uxth	r3, r3
 8017d58:	3b01      	subs	r3, #1
 8017d5a:	b29b      	uxth	r3, r3
 8017d5c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8017d5e:	e7ea      	b.n	8017d36 <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8017d60:	2301      	movs	r3, #1
 8017d62:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017d66:	2300      	movs	r3, #0
 8017d68:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017d6c:	2603      	movs	r6, #3
 8017d6e:	e03c      	b.n	8017dea <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017d70:	f7fe fa9a 	bl	80162a8 <HAL_GetTick>
 8017d74:	1bc0      	subs	r0, r0, r7
 8017d76:	42a8      	cmp	r0, r5
 8017d78:	d302      	bcc.n	8017d80 <HAL_SPI_Receive+0x112>
 8017d7a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017d7e:	d119      	bne.n	8017db4 <HAL_SPI_Receive+0x146>
 8017d80:	b1c5      	cbz	r5, 8017db4 <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 8017d82:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017d84:	b29b      	uxth	r3, r3
 8017d86:	b1eb      	cbz	r3, 8017dc4 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017d88:	6823      	ldr	r3, [r4, #0]
 8017d8a:	689a      	ldr	r2, [r3, #8]
 8017d8c:	f012 0f01 	tst.w	r2, #1
 8017d90:	d0ee      	beq.n	8017d70 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017d92:	68da      	ldr	r2, [r3, #12]
 8017d94:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8017d98:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017d9a:	3302      	adds	r3, #2
 8017d9c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017d9e:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8017da2:	fa1f fc8c 	uxth.w	ip, ip
 8017da6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8017daa:	fa1f fc8c 	uxth.w	ip, ip
 8017dae:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8017db2:	e7e6      	b.n	8017d82 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8017db4:	2301      	movs	r3, #1
 8017db6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017dba:	2300      	movs	r3, #0
 8017dbc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017dc0:	2603      	movs	r6, #3
 8017dc2:	e012      	b.n	8017dea <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017dc4:	463a      	mov	r2, r7
 8017dc6:	4629      	mov	r1, r5
 8017dc8:	4620      	mov	r0, r4
 8017dca:	f7ff fc9f 	bl	801770c <SPI_EndRxTransaction>
 8017dce:	b108      	cbz	r0, 8017dd4 <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017dd0:	2320      	movs	r3, #32
 8017dd2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8017dd4:	2301      	movs	r3, #1
 8017dd6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8017dda:	2300      	movs	r3, #0
 8017ddc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017de0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017de2:	b913      	cbnz	r3, 8017dea <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 8017de4:	2600      	movs	r6, #0
 8017de6:	e000      	b.n	8017dea <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 8017de8:	2602      	movs	r6, #2
}
 8017dea:	4630      	mov	r0, r6
 8017dec:	b003      	add	sp, #12
 8017dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8017df2:	2602      	movs	r6, #2
 8017df4:	e7f9      	b.n	8017dea <HAL_SPI_Receive+0x17c>

08017df6 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8017df6:	4770      	bx	lr

08017df8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8017df8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8017dfc:	b2db      	uxtb	r3, r3
 8017dfe:	2b01      	cmp	r3, #1
 8017e00:	d12f      	bne.n	8017e62 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017e02:	2302      	movs	r3, #2
 8017e04:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017e08:	6802      	ldr	r2, [r0, #0]
 8017e0a:	68d3      	ldr	r3, [r2, #12]
 8017e0c:	f043 0301 	orr.w	r3, r3, #1
 8017e10:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017e12:	6803      	ldr	r3, [r0, #0]
 8017e14:	4a15      	ldr	r2, [pc, #84]	@ (8017e6c <HAL_TIM_Base_Start_IT+0x74>)
 8017e16:	4293      	cmp	r3, r2
 8017e18:	d018      	beq.n	8017e4c <HAL_TIM_Base_Start_IT+0x54>
 8017e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017e1e:	d015      	beq.n	8017e4c <HAL_TIM_Base_Start_IT+0x54>
 8017e20:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8017e24:	4293      	cmp	r3, r2
 8017e26:	d011      	beq.n	8017e4c <HAL_TIM_Base_Start_IT+0x54>
 8017e28:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017e2c:	4293      	cmp	r3, r2
 8017e2e:	d00d      	beq.n	8017e4c <HAL_TIM_Base_Start_IT+0x54>
 8017e30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017e34:	4293      	cmp	r3, r2
 8017e36:	d009      	beq.n	8017e4c <HAL_TIM_Base_Start_IT+0x54>
 8017e38:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8017e3c:	4293      	cmp	r3, r2
 8017e3e:	d005      	beq.n	8017e4c <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8017e40:	681a      	ldr	r2, [r3, #0]
 8017e42:	f042 0201 	orr.w	r2, r2, #1
 8017e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017e48:	2000      	movs	r0, #0
 8017e4a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017e4c:	689a      	ldr	r2, [r3, #8]
 8017e4e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017e52:	2a06      	cmp	r2, #6
 8017e54:	d007      	beq.n	8017e66 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8017e56:	681a      	ldr	r2, [r3, #0]
 8017e58:	f042 0201 	orr.w	r2, r2, #1
 8017e5c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8017e5e:	2000      	movs	r0, #0
 8017e60:	4770      	bx	lr
    return HAL_ERROR;
 8017e62:	2001      	movs	r0, #1
 8017e64:	4770      	bx	lr
  return HAL_OK;
 8017e66:	2000      	movs	r0, #0
}
 8017e68:	4770      	bx	lr
 8017e6a:	bf00      	nop
 8017e6c:	40010000 	.word	0x40010000

08017e70 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017e70:	4770      	bx	lr

08017e72 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017e72:	4770      	bx	lr

08017e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017e74:	4770      	bx	lr

08017e76 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017e76:	4770      	bx	lr

08017e78 <HAL_TIM_IRQHandler>:
{
 8017e78:	b570      	push	{r4, r5, r6, lr}
 8017e7a:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8017e7c:	6803      	ldr	r3, [r0, #0]
 8017e7e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8017e80:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8017e82:	f015 0f02 	tst.w	r5, #2
 8017e86:	d010      	beq.n	8017eaa <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8017e88:	f016 0f02 	tst.w	r6, #2
 8017e8c:	d00d      	beq.n	8017eaa <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8017e8e:	f06f 0202 	mvn.w	r2, #2
 8017e92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017e94:	2301      	movs	r3, #1
 8017e96:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017e98:	6803      	ldr	r3, [r0, #0]
 8017e9a:	699b      	ldr	r3, [r3, #24]
 8017e9c:	f013 0f03 	tst.w	r3, #3
 8017ea0:	d05e      	beq.n	8017f60 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8017ea2:	f7ff ffe6 	bl	8017e72 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8017eaa:	f015 0f04 	tst.w	r5, #4
 8017eae:	d012      	beq.n	8017ed6 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8017eb0:	f016 0f04 	tst.w	r6, #4
 8017eb4:	d00f      	beq.n	8017ed6 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8017eb6:	6823      	ldr	r3, [r4, #0]
 8017eb8:	f06f 0204 	mvn.w	r2, #4
 8017ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8017ebe:	2302      	movs	r3, #2
 8017ec0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017ec2:	6823      	ldr	r3, [r4, #0]
 8017ec4:	699b      	ldr	r3, [r3, #24]
 8017ec6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8017eca:	d04f      	beq.n	8017f6c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8017ecc:	4620      	mov	r0, r4
 8017ece:	f7ff ffd0 	bl	8017e72 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8017ed6:	f015 0f08 	tst.w	r5, #8
 8017eda:	d012      	beq.n	8017f02 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8017edc:	f016 0f08 	tst.w	r6, #8
 8017ee0:	d00f      	beq.n	8017f02 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8017ee2:	6823      	ldr	r3, [r4, #0]
 8017ee4:	f06f 0208 	mvn.w	r2, #8
 8017ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017eea:	2304      	movs	r3, #4
 8017eec:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017eee:	6823      	ldr	r3, [r4, #0]
 8017ef0:	69db      	ldr	r3, [r3, #28]
 8017ef2:	f013 0f03 	tst.w	r3, #3
 8017ef6:	d040      	beq.n	8017f7a <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8017ef8:	4620      	mov	r0, r4
 8017efa:	f7ff ffba 	bl	8017e72 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017efe:	2300      	movs	r3, #0
 8017f00:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8017f02:	f015 0f10 	tst.w	r5, #16
 8017f06:	d012      	beq.n	8017f2e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8017f08:	f016 0f10 	tst.w	r6, #16
 8017f0c:	d00f      	beq.n	8017f2e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8017f0e:	6823      	ldr	r3, [r4, #0]
 8017f10:	f06f 0210 	mvn.w	r2, #16
 8017f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8017f16:	2308      	movs	r3, #8
 8017f18:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017f1a:	6823      	ldr	r3, [r4, #0]
 8017f1c:	69db      	ldr	r3, [r3, #28]
 8017f1e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8017f22:	d031      	beq.n	8017f88 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8017f24:	4620      	mov	r0, r4
 8017f26:	f7ff ffa4 	bl	8017e72 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8017f2e:	f015 0f01 	tst.w	r5, #1
 8017f32:	d002      	beq.n	8017f3a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8017f34:	f016 0f01 	tst.w	r6, #1
 8017f38:	d12d      	bne.n	8017f96 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8017f3a:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8017f3e:	d002      	beq.n	8017f46 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8017f40:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8017f44:	d12f      	bne.n	8017fa6 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8017f46:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8017f4a:	d002      	beq.n	8017f52 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8017f4c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8017f50:	d131      	bne.n	8017fb6 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8017f52:	f015 0f20 	tst.w	r5, #32
 8017f56:	d002      	beq.n	8017f5e <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8017f58:	f016 0f20 	tst.w	r6, #32
 8017f5c:	d133      	bne.n	8017fc6 <HAL_TIM_IRQHandler+0x14e>
}
 8017f5e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8017f60:	f7ff ff86 	bl	8017e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017f64:	4620      	mov	r0, r4
 8017f66:	f7ff ff85 	bl	8017e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8017f6a:	e79c      	b.n	8017ea6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017f6c:	4620      	mov	r0, r4
 8017f6e:	f7ff ff7f 	bl	8017e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017f72:	4620      	mov	r0, r4
 8017f74:	f7ff ff7e 	bl	8017e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8017f78:	e7ab      	b.n	8017ed2 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017f7a:	4620      	mov	r0, r4
 8017f7c:	f7ff ff78 	bl	8017e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017f80:	4620      	mov	r0, r4
 8017f82:	f7ff ff77 	bl	8017e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8017f86:	e7ba      	b.n	8017efe <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017f88:	4620      	mov	r0, r4
 8017f8a:	f7ff ff71 	bl	8017e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017f8e:	4620      	mov	r0, r4
 8017f90:	f7ff ff70 	bl	8017e74 <HAL_TIM_PWM_PulseFinishedCallback>
 8017f94:	e7c9      	b.n	8017f2a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8017f96:	6823      	ldr	r3, [r4, #0]
 8017f98:	f06f 0201 	mvn.w	r2, #1
 8017f9c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	f7fa f846 	bl	8012030 <HAL_TIM_PeriodElapsedCallback>
 8017fa4:	e7c9      	b.n	8017f3a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8017fa6:	6823      	ldr	r3, [r4, #0]
 8017fa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8017fac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8017fae:	4620      	mov	r0, r4
 8017fb0:	f000 f895 	bl	80180de <HAL_TIMEx_BreakCallback>
 8017fb4:	e7c7      	b.n	8017f46 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8017fb6:	6823      	ldr	r3, [r4, #0]
 8017fb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8017fbc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8017fbe:	4620      	mov	r0, r4
 8017fc0:	f7ff ff59 	bl	8017e76 <HAL_TIM_TriggerCallback>
 8017fc4:	e7c5      	b.n	8017f52 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8017fc6:	6823      	ldr	r3, [r4, #0]
 8017fc8:	f06f 0220 	mvn.w	r2, #32
 8017fcc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8017fce:	4620      	mov	r0, r4
 8017fd0:	f000 f884 	bl	80180dc <HAL_TIMEx_CommutCallback>
}
 8017fd4:	e7c3      	b.n	8017f5e <HAL_TIM_IRQHandler+0xe6>
	...

08017fd8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017fd8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017fda:	4a29      	ldr	r2, [pc, #164]	@ (8018080 <TIM_Base_SetConfig+0xa8>)
 8017fdc:	4290      	cmp	r0, r2
 8017fde:	d00e      	beq.n	8017ffe <TIM_Base_SetConfig+0x26>
 8017fe0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8017fe4:	d00b      	beq.n	8017ffe <TIM_Base_SetConfig+0x26>
 8017fe6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8017fea:	4290      	cmp	r0, r2
 8017fec:	d007      	beq.n	8017ffe <TIM_Base_SetConfig+0x26>
 8017fee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017ff2:	4290      	cmp	r0, r2
 8017ff4:	d003      	beq.n	8017ffe <TIM_Base_SetConfig+0x26>
 8017ff6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017ffa:	4290      	cmp	r0, r2
 8017ffc:	d103      	bne.n	8018006 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8018002:	684a      	ldr	r2, [r1, #4]
 8018004:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018006:	4a1e      	ldr	r2, [pc, #120]	@ (8018080 <TIM_Base_SetConfig+0xa8>)
 8018008:	4290      	cmp	r0, r2
 801800a:	d01a      	beq.n	8018042 <TIM_Base_SetConfig+0x6a>
 801800c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8018010:	d017      	beq.n	8018042 <TIM_Base_SetConfig+0x6a>
 8018012:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8018016:	4290      	cmp	r0, r2
 8018018:	d013      	beq.n	8018042 <TIM_Base_SetConfig+0x6a>
 801801a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801801e:	4290      	cmp	r0, r2
 8018020:	d00f      	beq.n	8018042 <TIM_Base_SetConfig+0x6a>
 8018022:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018026:	4290      	cmp	r0, r2
 8018028:	d00b      	beq.n	8018042 <TIM_Base_SetConfig+0x6a>
 801802a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 801802e:	4290      	cmp	r0, r2
 8018030:	d007      	beq.n	8018042 <TIM_Base_SetConfig+0x6a>
 8018032:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018036:	4290      	cmp	r0, r2
 8018038:	d003      	beq.n	8018042 <TIM_Base_SetConfig+0x6a>
 801803a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801803e:	4290      	cmp	r0, r2
 8018040:	d103      	bne.n	801804a <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018046:	68ca      	ldr	r2, [r1, #12]
 8018048:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801804a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801804e:	694a      	ldr	r2, [r1, #20]
 8018050:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8018052:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018054:	688b      	ldr	r3, [r1, #8]
 8018056:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018058:	680b      	ldr	r3, [r1, #0]
 801805a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801805c:	4b08      	ldr	r3, [pc, #32]	@ (8018080 <TIM_Base_SetConfig+0xa8>)
 801805e:	4298      	cmp	r0, r3
 8018060:	d00a      	beq.n	8018078 <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018062:	2301      	movs	r3, #1
 8018064:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8018066:	6903      	ldr	r3, [r0, #16]
 8018068:	f013 0f01 	tst.w	r3, #1
 801806c:	d003      	beq.n	8018076 <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801806e:	6903      	ldr	r3, [r0, #16]
 8018070:	f023 0301 	bic.w	r3, r3, #1
 8018074:	6103      	str	r3, [r0, #16]
  }
}
 8018076:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8018078:	690b      	ldr	r3, [r1, #16]
 801807a:	6303      	str	r3, [r0, #48]	@ 0x30
 801807c:	e7f1      	b.n	8018062 <TIM_Base_SetConfig+0x8a>
 801807e:	bf00      	nop
 8018080:	40010000 	.word	0x40010000

08018084 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8018084:	b340      	cbz	r0, 80180d8 <HAL_TIM_Base_Init+0x54>
{
 8018086:	b510      	push	{r4, lr}
 8018088:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 801808a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801808e:	b1f3      	cbz	r3, 80180ce <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8018090:	2302      	movs	r3, #2
 8018092:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018096:	4621      	mov	r1, r4
 8018098:	f851 0b04 	ldr.w	r0, [r1], #4
 801809c:	f7ff ff9c 	bl	8017fd8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80180a0:	2301      	movs	r3, #1
 80180a2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80180a6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80180aa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80180ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80180b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80180b6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80180ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80180be:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80180c2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80180c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80180ca:	2000      	movs	r0, #0
}
 80180cc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80180ce:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80180d2:	f7ff fe90 	bl	8017df6 <HAL_TIM_Base_MspInit>
 80180d6:	e7db      	b.n	8018090 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80180d8:	2001      	movs	r0, #1
}
 80180da:	4770      	bx	lr

080180dc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80180dc:	4770      	bx	lr

080180de <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80180de:	4770      	bx	lr

080180e0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80180e0:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80180e2:	b930      	cbnz	r0, 80180f2 <SSD1306_Fill+0x12>
 80180e4:	2100      	movs	r1, #0
 80180e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80180ea:	4803      	ldr	r0, [pc, #12]	@ (80180f8 <SSD1306_Fill+0x18>)
 80180ec:	f014 fc70 	bl	802c9d0 <memset>
}
 80180f0:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80180f2:	21ff      	movs	r1, #255	@ 0xff
 80180f4:	e7f7      	b.n	80180e6 <SSD1306_Fill+0x6>
 80180f6:	bf00      	nop
 80180f8:	20002968 	.word	0x20002968

080180fc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 80180fc:	287f      	cmp	r0, #127	@ 0x7f
 80180fe:	d825      	bhi.n	801814c <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 8018100:	293f      	cmp	r1, #63	@ 0x3f
 8018102:	d823      	bhi.n	801814c <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8018104:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8018106:	4b12      	ldr	r3, [pc, #72]	@ (8018150 <SSD1306_DrawPixel+0x54>)
 8018108:	791b      	ldrb	r3, [r3, #4]
 801810a:	b113      	cbz	r3, 8018112 <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 801810c:	fab2 f282 	clz	r2, r2
 8018110:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8018112:	2a01      	cmp	r2, #1
 8018114:	d00f      	beq.n	8018136 <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8018116:	08cb      	lsrs	r3, r1, #3
 8018118:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 801811c:	4c0d      	ldr	r4, [pc, #52]	@ (8018154 <SSD1306_DrawPixel+0x58>)
 801811e:	5c22      	ldrb	r2, [r4, r0]
 8018120:	f001 0107 	and.w	r1, r1, #7
 8018124:	2301      	movs	r3, #1
 8018126:	408b      	lsls	r3, r1
 8018128:	43db      	mvns	r3, r3
 801812a:	b25b      	sxtb	r3, r3
 801812c:	4013      	ands	r3, r2
 801812e:	5423      	strb	r3, [r4, r0]
	}
}
 8018130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018134:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8018136:	08cb      	lsrs	r3, r1, #3
 8018138:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 801813c:	4c05      	ldr	r4, [pc, #20]	@ (8018154 <SSD1306_DrawPixel+0x58>)
 801813e:	5c23      	ldrb	r3, [r4, r0]
 8018140:	f001 0107 	and.w	r1, r1, #7
 8018144:	408a      	lsls	r2, r1
 8018146:	4313      	orrs	r3, r2
 8018148:	5423      	strb	r3, [r4, r0]
 801814a:	e7f1      	b.n	8018130 <SSD1306_DrawPixel+0x34>
 801814c:	4770      	bx	lr
 801814e:	bf00      	nop
 8018150:	20002960 	.word	0x20002960
 8018154:	20002968 	.word	0x20002968

08018158 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8018158:	4b01      	ldr	r3, [pc, #4]	@ (8018160 <SSD1306_GotoXY+0x8>)
 801815a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 801815c:	8059      	strh	r1, [r3, #2]
}
 801815e:	4770      	bx	lr
 8018160:	20002960 	.word	0x20002960

08018164 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8018164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018168:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 801816a:	4b24      	ldr	r3, [pc, #144]	@ (80181fc <SSD1306_Putc+0x98>)
 801816c:	881b      	ldrh	r3, [r3, #0]
 801816e:	780a      	ldrb	r2, [r1, #0]
 8018170:	4413      	add	r3, r2
	if (
 8018172:	2b7f      	cmp	r3, #127	@ 0x7f
 8018174:	dc3e      	bgt.n	80181f4 <SSD1306_Putc+0x90>
 8018176:	4681      	mov	r9, r0
 8018178:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 801817a:	4b20      	ldr	r3, [pc, #128]	@ (80181fc <SSD1306_Putc+0x98>)
 801817c:	885b      	ldrh	r3, [r3, #2]
 801817e:	784a      	ldrb	r2, [r1, #1]
 8018180:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8018182:	2b3f      	cmp	r3, #63	@ 0x3f
 8018184:	dc38      	bgt.n	80181f8 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8018186:	2600      	movs	r6, #0
 8018188:	e020      	b.n	80181cc <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 801818a:	4b1c      	ldr	r3, [pc, #112]	@ (80181fc <SSD1306_Putc+0x98>)
 801818c:	8818      	ldrh	r0, [r3, #0]
 801818e:	8859      	ldrh	r1, [r3, #2]
 8018190:	4431      	add	r1, r6
 8018192:	4420      	add	r0, r4
 8018194:	fab8 f288 	clz	r2, r8
 8018198:	0952      	lsrs	r2, r2, #5
 801819a:	b289      	uxth	r1, r1
 801819c:	b280      	uxth	r0, r0
 801819e:	f7ff ffad 	bl	80180fc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80181a2:	3401      	adds	r4, #1
 80181a4:	782b      	ldrb	r3, [r5, #0]
 80181a6:	42a3      	cmp	r3, r4
 80181a8:	d90f      	bls.n	80181ca <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 80181aa:	fa07 f304 	lsl.w	r3, r7, r4
 80181ae:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80181b2:	d0ea      	beq.n	801818a <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80181b4:	4b11      	ldr	r3, [pc, #68]	@ (80181fc <SSD1306_Putc+0x98>)
 80181b6:	8818      	ldrh	r0, [r3, #0]
 80181b8:	8859      	ldrh	r1, [r3, #2]
 80181ba:	4431      	add	r1, r6
 80181bc:	4420      	add	r0, r4
 80181be:	4642      	mov	r2, r8
 80181c0:	b289      	uxth	r1, r1
 80181c2:	b280      	uxth	r0, r0
 80181c4:	f7ff ff9a 	bl	80180fc <SSD1306_DrawPixel>
 80181c8:	e7eb      	b.n	80181a2 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 80181ca:	3601      	adds	r6, #1
 80181cc:	786a      	ldrb	r2, [r5, #1]
 80181ce:	42b2      	cmp	r2, r6
 80181d0:	d908      	bls.n	80181e4 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80181d2:	6869      	ldr	r1, [r5, #4]
 80181d4:	f1a9 0320 	sub.w	r3, r9, #32
 80181d8:	fb02 6303 	mla	r3, r2, r3, r6
 80181dc:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80181e0:	2400      	movs	r4, #0
 80181e2:	e7df      	b.n	80181a4 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80181e4:	4a05      	ldr	r2, [pc, #20]	@ (80181fc <SSD1306_Putc+0x98>)
 80181e6:	8813      	ldrh	r3, [r2, #0]
 80181e8:	7829      	ldrb	r1, [r5, #0]
 80181ea:	440b      	add	r3, r1
 80181ec:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 80181ee:	4648      	mov	r0, r9
}
 80181f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 80181f4:	2000      	movs	r0, #0
 80181f6:	e7fb      	b.n	80181f0 <SSD1306_Putc+0x8c>
 80181f8:	2000      	movs	r0, #0
 80181fa:	e7f9      	b.n	80181f0 <SSD1306_Putc+0x8c>
 80181fc:	20002960 	.word	0x20002960

08018200 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8018200:	b570      	push	{r4, r5, r6, lr}
 8018202:	4604      	mov	r4, r0
 8018204:	460e      	mov	r6, r1
 8018206:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8018208:	e000      	b.n	801820c <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 801820a:	3401      	adds	r4, #1
	while (*str) {
 801820c:	7820      	ldrb	r0, [r4, #0]
 801820e:	b138      	cbz	r0, 8018220 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8018210:	462a      	mov	r2, r5
 8018212:	4631      	mov	r1, r6
 8018214:	f7ff ffa6 	bl	8018164 <SSD1306_Putc>
 8018218:	4603      	mov	r3, r0
 801821a:	7820      	ldrb	r0, [r4, #0]
 801821c:	4283      	cmp	r3, r0
 801821e:	d0f4      	beq.n	801820a <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8018220:	bd70      	pop	{r4, r5, r6, pc}
	...

08018224 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8018224:	b500      	push	{lr}
 8018226:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 8018228:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 801822c:	f04f 0c00 	mov.w	ip, #0
 8018230:	e009      	b.n	8018246 <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 8018232:	f10c 0e01 	add.w	lr, ip, #1
 8018236:	f812 100c 	ldrb.w	r1, [r2, ip]
 801823a:	f10d 0c08 	add.w	ip, sp, #8
 801823e:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 8018242:	fa5f fc8e 	uxtb.w	ip, lr
 8018246:	459c      	cmp	ip, r3
 8018248:	d3f3      	bcc.n	8018232 <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 801824a:	3301      	adds	r3, #1
 801824c:	220a      	movs	r2, #10
 801824e:	9200      	str	r2, [sp, #0]
 8018250:	b29b      	uxth	r3, r3
 8018252:	aa02      	add	r2, sp, #8
 8018254:	4601      	mov	r1, r0
 8018256:	4803      	ldr	r0, [pc, #12]	@ (8018264 <ssd1306_I2C_WriteMulti+0x40>)
 8018258:	f7fe fcca 	bl	8016bf0 <HAL_I2C_Master_Transmit>
}
 801825c:	b043      	add	sp, #268	@ 0x10c
 801825e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018262:	bf00      	nop
 8018264:	200008c8 	.word	0x200008c8

08018268 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8018268:	b500      	push	{lr}
 801826a:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 801826c:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8018270:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8018274:	230a      	movs	r3, #10
 8018276:	9300      	str	r3, [sp, #0]
 8018278:	2302      	movs	r3, #2
 801827a:	aa03      	add	r2, sp, #12
 801827c:	4601      	mov	r1, r0
 801827e:	4803      	ldr	r0, [pc, #12]	@ (801828c <ssd1306_I2C_Write+0x24>)
 8018280:	f7fe fcb6 	bl	8016bf0 <HAL_I2C_Master_Transmit>
}
 8018284:	b005      	add	sp, #20
 8018286:	f85d fb04 	ldr.w	pc, [sp], #4
 801828a:	bf00      	nop
 801828c:	200008c8 	.word	0x200008c8

08018290 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8018290:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8018292:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8018296:	2201      	movs	r2, #1
 8018298:	2178      	movs	r1, #120	@ 0x78
 801829a:	4850      	ldr	r0, [pc, #320]	@ (80183dc <SSD1306_Init+0x14c>)
 801829c:	f7fe fd64 	bl	8016d68 <HAL_I2C_IsDeviceReady>
 80182a0:	2800      	cmp	r0, #0
 80182a2:	f040 8099 	bne.w	80183d8 <SSD1306_Init+0x148>
	uint32_t p = 2500;
 80182a6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80182aa:	e000      	b.n	80182ae <SSD1306_Init+0x1e>
		p--;
 80182ac:	3b01      	subs	r3, #1
	while(p>0)
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d1fc      	bne.n	80182ac <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80182b2:	22ae      	movs	r2, #174	@ 0xae
 80182b4:	2100      	movs	r1, #0
 80182b6:	2078      	movs	r0, #120	@ 0x78
 80182b8:	f7ff ffd6 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80182bc:	2220      	movs	r2, #32
 80182be:	2100      	movs	r1, #0
 80182c0:	2078      	movs	r0, #120	@ 0x78
 80182c2:	f7ff ffd1 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80182c6:	2210      	movs	r2, #16
 80182c8:	2100      	movs	r1, #0
 80182ca:	2078      	movs	r0, #120	@ 0x78
 80182cc:	f7ff ffcc 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80182d0:	22b0      	movs	r2, #176	@ 0xb0
 80182d2:	2100      	movs	r1, #0
 80182d4:	2078      	movs	r0, #120	@ 0x78
 80182d6:	f7ff ffc7 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80182da:	22c8      	movs	r2, #200	@ 0xc8
 80182dc:	2100      	movs	r1, #0
 80182de:	2078      	movs	r0, #120	@ 0x78
 80182e0:	f7ff ffc2 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80182e4:	2200      	movs	r2, #0
 80182e6:	4611      	mov	r1, r2
 80182e8:	2078      	movs	r0, #120	@ 0x78
 80182ea:	f7ff ffbd 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80182ee:	2210      	movs	r2, #16
 80182f0:	2100      	movs	r1, #0
 80182f2:	2078      	movs	r0, #120	@ 0x78
 80182f4:	f7ff ffb8 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80182f8:	2240      	movs	r2, #64	@ 0x40
 80182fa:	2100      	movs	r1, #0
 80182fc:	2078      	movs	r0, #120	@ 0x78
 80182fe:	f7ff ffb3 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8018302:	2281      	movs	r2, #129	@ 0x81
 8018304:	2100      	movs	r1, #0
 8018306:	2078      	movs	r0, #120	@ 0x78
 8018308:	f7ff ffae 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 801830c:	22ff      	movs	r2, #255	@ 0xff
 801830e:	2100      	movs	r1, #0
 8018310:	2078      	movs	r0, #120	@ 0x78
 8018312:	f7ff ffa9 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8018316:	22a1      	movs	r2, #161	@ 0xa1
 8018318:	2100      	movs	r1, #0
 801831a:	2078      	movs	r0, #120	@ 0x78
 801831c:	f7ff ffa4 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8018320:	22a6      	movs	r2, #166	@ 0xa6
 8018322:	2100      	movs	r1, #0
 8018324:	2078      	movs	r0, #120	@ 0x78
 8018326:	f7ff ff9f 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 801832a:	22a8      	movs	r2, #168	@ 0xa8
 801832c:	2100      	movs	r1, #0
 801832e:	2078      	movs	r0, #120	@ 0x78
 8018330:	f7ff ff9a 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8018334:	223f      	movs	r2, #63	@ 0x3f
 8018336:	2100      	movs	r1, #0
 8018338:	2078      	movs	r0, #120	@ 0x78
 801833a:	f7ff ff95 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 801833e:	22a4      	movs	r2, #164	@ 0xa4
 8018340:	2100      	movs	r1, #0
 8018342:	2078      	movs	r0, #120	@ 0x78
 8018344:	f7ff ff90 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8018348:	22d3      	movs	r2, #211	@ 0xd3
 801834a:	2100      	movs	r1, #0
 801834c:	2078      	movs	r0, #120	@ 0x78
 801834e:	f7ff ff8b 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8018352:	2200      	movs	r2, #0
 8018354:	4611      	mov	r1, r2
 8018356:	2078      	movs	r0, #120	@ 0x78
 8018358:	f7ff ff86 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 801835c:	22d5      	movs	r2, #213	@ 0xd5
 801835e:	2100      	movs	r1, #0
 8018360:	2078      	movs	r0, #120	@ 0x78
 8018362:	f7ff ff81 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8018366:	22f0      	movs	r2, #240	@ 0xf0
 8018368:	2100      	movs	r1, #0
 801836a:	2078      	movs	r0, #120	@ 0x78
 801836c:	f7ff ff7c 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8018370:	22d9      	movs	r2, #217	@ 0xd9
 8018372:	2100      	movs	r1, #0
 8018374:	2078      	movs	r0, #120	@ 0x78
 8018376:	f7ff ff77 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 801837a:	2222      	movs	r2, #34	@ 0x22
 801837c:	2100      	movs	r1, #0
 801837e:	2078      	movs	r0, #120	@ 0x78
 8018380:	f7ff ff72 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8018384:	22da      	movs	r2, #218	@ 0xda
 8018386:	2100      	movs	r1, #0
 8018388:	2078      	movs	r0, #120	@ 0x78
 801838a:	f7ff ff6d 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 801838e:	2212      	movs	r2, #18
 8018390:	2100      	movs	r1, #0
 8018392:	2078      	movs	r0, #120	@ 0x78
 8018394:	f7ff ff68 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8018398:	22db      	movs	r2, #219	@ 0xdb
 801839a:	2100      	movs	r1, #0
 801839c:	2078      	movs	r0, #120	@ 0x78
 801839e:	f7ff ff63 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80183a2:	2220      	movs	r2, #32
 80183a4:	2100      	movs	r1, #0
 80183a6:	2078      	movs	r0, #120	@ 0x78
 80183a8:	f7ff ff5e 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80183ac:	228d      	movs	r2, #141	@ 0x8d
 80183ae:	2100      	movs	r1, #0
 80183b0:	2078      	movs	r0, #120	@ 0x78
 80183b2:	f7ff ff59 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80183b6:	2214      	movs	r2, #20
 80183b8:	2100      	movs	r1, #0
 80183ba:	2078      	movs	r0, #120	@ 0x78
 80183bc:	f7ff ff54 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80183c0:	22af      	movs	r2, #175	@ 0xaf
 80183c2:	2100      	movs	r1, #0
 80183c4:	2078      	movs	r0, #120	@ 0x78
 80183c6:	f7ff ff4f 	bl	8018268 <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 80183ca:	4b05      	ldr	r3, [pc, #20]	@ (80183e0 <SSD1306_Init+0x150>)
 80183cc:	2200      	movs	r2, #0
 80183ce:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80183d0:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 80183d2:	2001      	movs	r0, #1
 80183d4:	7158      	strb	r0, [r3, #5]
}
 80183d6:	bd08      	pop	{r3, pc}
		return 0;
 80183d8:	2000      	movs	r0, #0
 80183da:	e7fc      	b.n	80183d6 <SSD1306_Init+0x146>
 80183dc:	200008c8 	.word	0x200008c8
 80183e0:	20002960 	.word	0x20002960

080183e4 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 80183e4:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 80183e6:	2400      	movs	r4, #0
 80183e8:	e01a      	b.n	8018420 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80183ea:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 80183ee:	b2d2      	uxtb	r2, r2
 80183f0:	2100      	movs	r1, #0
 80183f2:	2078      	movs	r0, #120	@ 0x78
 80183f4:	f7ff ff38 	bl	8018268 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80183f8:	2200      	movs	r2, #0
 80183fa:	4611      	mov	r1, r2
 80183fc:	2078      	movs	r0, #120	@ 0x78
 80183fe:	f7ff ff33 	bl	8018268 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8018402:	2210      	movs	r2, #16
 8018404:	2100      	movs	r1, #0
 8018406:	2078      	movs	r0, #120	@ 0x78
 8018408:	f7ff ff2e 	bl	8018268 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 801840c:	2380      	movs	r3, #128	@ 0x80
 801840e:	4a06      	ldr	r2, [pc, #24]	@ (8018428 <SSD1306_UpdateScreen+0x44>)
 8018410:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8018414:	2140      	movs	r1, #64	@ 0x40
 8018416:	2078      	movs	r0, #120	@ 0x78
 8018418:	f7ff ff04 	bl	8018224 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 801841c:	3401      	adds	r4, #1
 801841e:	b2e4      	uxtb	r4, r4
 8018420:	2c07      	cmp	r4, #7
 8018422:	d9e2      	bls.n	80183ea <SSD1306_UpdateScreen+0x6>
}
 8018424:	bd10      	pop	{r4, pc}
 8018426:	bf00      	nop
 8018428:	20002968 	.word	0x20002968

0801842c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801842c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 801842e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018432:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8018434:	f001 fd4a 	bl	8019ecc <xTaskGetSchedulerState>
 8018438:	2801      	cmp	r0, #1
 801843a:	d100      	bne.n	801843e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 801843c:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 801843e:	f002 f949 	bl	801a6d4 <xPortSysTickHandler>
}
 8018442:	e7fb      	b.n	801843c <SysTick_Handler+0x10>

08018444 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018444:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8018448:	b92b      	cbnz	r3, 8018456 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 801844a:	4b06      	ldr	r3, [pc, #24]	@ (8018464 <osKernelInitialize+0x20>)
 801844c:	6818      	ldr	r0, [r3, #0]
 801844e:	b928      	cbnz	r0, 801845c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8018450:	2201      	movs	r2, #1
 8018452:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8018454:	4770      	bx	lr
    stat = osErrorISR;
 8018456:	f06f 0005 	mvn.w	r0, #5
 801845a:	4770      	bx	lr
    } else {
      stat = osError;
 801845c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8018460:	4770      	bx	lr
 8018462:	bf00      	nop
 8018464:	20003668 	.word	0x20003668

08018468 <osKernelStart>:
 8018468:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 801846c:	b973      	cbnz	r3, 801848c <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 801846e:	4b0a      	ldr	r3, [pc, #40]	@ (8018498 <osKernelStart+0x30>)
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	2b01      	cmp	r3, #1
 8018474:	d10d      	bne.n	8018492 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8018476:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018478:	2400      	movs	r4, #0
 801847a:	4b08      	ldr	r3, [pc, #32]	@ (801849c <osKernelStart+0x34>)
 801847c:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801847e:	4b06      	ldr	r3, [pc, #24]	@ (8018498 <osKernelStart+0x30>)
 8018480:	2202      	movs	r2, #2
 8018482:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018484:	f001 fa6a 	bl	801995c <vTaskStartScheduler>
      stat = osOK;
 8018488:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 801848a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 801848c:	f06f 0005 	mvn.w	r0, #5
 8018490:	4770      	bx	lr
      stat = osError;
 8018492:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8018496:	4770      	bx	lr
 8018498:	20003668 	.word	0x20003668
 801849c:	e000ed00 	.word	0xe000ed00

080184a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80184a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184a2:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80184a4:	2400      	movs	r4, #0
 80184a6:	9405      	str	r4, [sp, #20]
 80184a8:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80184ac:	bb7c      	cbnz	r4, 801850e <osThreadNew+0x6e>
 80184ae:	b370      	cbz	r0, 801850e <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80184b0:	b32a      	cbz	r2, 80184fe <osThreadNew+0x5e>
      if (attr->name != NULL) {
 80184b2:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80184b4:	6993      	ldr	r3, [r2, #24]
 80184b6:	b903      	cbnz	r3, 80184ba <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 80184b8:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80184ba:	1e5c      	subs	r4, r3, #1
 80184bc:	2c37      	cmp	r4, #55	@ 0x37
 80184be:	d84a      	bhi.n	8018556 <osThreadNew+0xb6>
 80184c0:	6854      	ldr	r4, [r2, #4]
 80184c2:	f014 0f01 	tst.w	r4, #1
 80184c6:	d148      	bne.n	801855a <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80184c8:	6956      	ldr	r6, [r2, #20]
 80184ca:	b176      	cbz	r6, 80184ea <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80184cc:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80184d0:	6894      	ldr	r4, [r2, #8]
 80184d2:	b134      	cbz	r4, 80184e2 <osThreadNew+0x42>
 80184d4:	68d7      	ldr	r7, [r2, #12]
 80184d6:	f5b7 7fc0 	cmp.w	r7, #384	@ 0x180
 80184da:	d302      	bcc.n	80184e2 <osThreadNew+0x42>
 80184dc:	6917      	ldr	r7, [r2, #16]
 80184de:	b107      	cbz	r7, 80184e2 <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80184e0:	b9c6      	cbnz	r6, 8018514 <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80184e2:	b12c      	cbz	r4, 80184f0 <osThreadNew+0x50>
    mem  = -1;
 80184e4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80184e8:	e00e      	b.n	8018508 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 80184ea:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 80184ee:	e7ef      	b.n	80184d0 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80184f0:	68d4      	ldr	r4, [r2, #12]
 80184f2:	b98c      	cbnz	r4, 8018518 <osThreadNew+0x78>
 80184f4:	6914      	ldr	r4, [r2, #16]
 80184f6:	b194      	cbz	r4, 801851e <osThreadNew+0x7e>
    mem  = -1;
 80184f8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80184fc:	e004      	b.n	8018508 <osThreadNew+0x68>
    name = NULL;
 80184fe:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8018500:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8018502:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8018504:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 8018508:	2c01      	cmp	r4, #1
 801850a:	d00a      	beq.n	8018522 <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 801850c:	b1ac      	cbz	r4, 801853a <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801850e:	9805      	ldr	r0, [sp, #20]
}
 8018510:	b007      	add	sp, #28
 8018512:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8018514:	2401      	movs	r4, #1
 8018516:	e7f7      	b.n	8018508 <osThreadNew+0x68>
    mem  = -1;
 8018518:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801851c:	e7f4      	b.n	8018508 <osThreadNew+0x68>
          mem = 0;
 801851e:	2400      	movs	r4, #0
 8018520:	e7f2      	b.n	8018508 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018522:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8018524:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018526:	9202      	str	r2, [sp, #8]
 8018528:	9401      	str	r4, [sp, #4]
 801852a:	9300      	str	r3, [sp, #0]
 801852c:	460b      	mov	r3, r1
 801852e:	4662      	mov	r2, ip
 8018530:	4629      	mov	r1, r5
 8018532:	f001 f9a3 	bl	801987c <xTaskCreateStatic>
 8018536:	9005      	str	r0, [sp, #20]
 8018538:	e7e9      	b.n	801850e <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801853a:	aa05      	add	r2, sp, #20
 801853c:	9201      	str	r2, [sp, #4]
 801853e:	9300      	str	r3, [sp, #0]
 8018540:	460b      	mov	r3, r1
 8018542:	fa1f f28c 	uxth.w	r2, ip
 8018546:	4629      	mov	r1, r5
 8018548:	f001 f9d5 	bl	80198f6 <xTaskCreate>
 801854c:	2801      	cmp	r0, #1
 801854e:	d0de      	beq.n	801850e <osThreadNew+0x6e>
            hTask = NULL;
 8018550:	2300      	movs	r3, #0
 8018552:	9305      	str	r3, [sp, #20]
 8018554:	e7db      	b.n	801850e <osThreadNew+0x6e>
        return (NULL);
 8018556:	2000      	movs	r0, #0
 8018558:	e7da      	b.n	8018510 <osThreadNew+0x70>
 801855a:	2000      	movs	r0, #0
 801855c:	e7d8      	b.n	8018510 <osThreadNew+0x70>

0801855e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801855e:	b508      	push	{r3, lr}
 8018560:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8018564:	b933      	cbnz	r3, 8018574 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8018566:	b908      	cbnz	r0, 801856c <osDelay+0xe>
    stat = osOK;
 8018568:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 801856a:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 801856c:	f001 fb62 	bl	8019c34 <vTaskDelay>
    stat = osOK;
 8018570:	2000      	movs	r0, #0
 8018572:	e7fa      	b.n	801856a <osDelay+0xc>
    stat = osErrorISR;
 8018574:	f06f 0005 	mvn.w	r0, #5
 8018578:	e7f7      	b.n	801856a <osDelay+0xc>

0801857a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801857a:	b570      	push	{r4, r5, r6, lr}
 801857c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8018580:	2b00      	cmp	r3, #0
 8018582:	d13c      	bne.n	80185fe <osMutexNew+0x84>
 8018584:	4604      	mov	r4, r0
    if (attr != NULL) {
 8018586:	b100      	cbz	r0, 801858a <osMutexNew+0x10>
      type = attr->attr_bits;
 8018588:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801858a:	f013 0601 	ands.w	r6, r3, #1
 801858e:	d000      	beq.n	8018592 <osMutexNew+0x18>
      rmtx = 1U;
 8018590:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8018592:	f013 0f08 	tst.w	r3, #8
 8018596:	d135      	bne.n	8018604 <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 8018598:	b344      	cbz	r4, 80185ec <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801859a:	68a1      	ldr	r1, [r4, #8]
 801859c:	b111      	cbz	r1, 80185a4 <osMutexNew+0x2a>
 801859e:	68e3      	ldr	r3, [r4, #12]
 80185a0:	2b4f      	cmp	r3, #79	@ 0x4f
 80185a2:	d818      	bhi.n	80185d6 <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80185a4:	b191      	cbz	r1, 80185cc <osMutexNew+0x52>
      mem = -1;
 80185a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 80185aa:	bb6b      	cbnz	r3, 8018608 <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80185ac:	b316      	cbz	r6, 80185f4 <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80185ae:	2004      	movs	r0, #4
 80185b0:	f000 fc04 	bl	8018dbc <xQueueCreateMutex>
 80185b4:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80185b6:	b31d      	cbz	r5, 8018600 <osMutexNew+0x86>
        if (attr != NULL) {
 80185b8:	b104      	cbz	r4, 80185bc <osMutexNew+0x42>
          name = attr->name;
 80185ba:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80185bc:	4621      	mov	r1, r4
 80185be:	4628      	mov	r0, r5
 80185c0:	f000 ff64 	bl	801948c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80185c4:	b1e6      	cbz	r6, 8018600 <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80185c6:	f045 0501 	orr.w	r5, r5, #1
 80185ca:	e019      	b.n	8018600 <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80185cc:	68e3      	ldr	r3, [r4, #12]
 80185ce:	b17b      	cbz	r3, 80185f0 <osMutexNew+0x76>
      mem = -1;
 80185d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80185d4:	e7e9      	b.n	80185aa <osMutexNew+0x30>
          if (rmtx != 0U) {
 80185d6:	b126      	cbz	r6, 80185e2 <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80185d8:	2004      	movs	r0, #4
 80185da:	f000 fbfa 	bl	8018dd2 <xQueueCreateMutexStatic>
 80185de:	4605      	mov	r5, r0
 80185e0:	e7e9      	b.n	80185b6 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80185e2:	2001      	movs	r0, #1
 80185e4:	f000 fbf5 	bl	8018dd2 <xQueueCreateMutexStatic>
 80185e8:	4605      	mov	r5, r0
 80185ea:	e7e4      	b.n	80185b6 <osMutexNew+0x3c>
        mem = 0;
 80185ec:	2300      	movs	r3, #0
 80185ee:	e7dc      	b.n	80185aa <osMutexNew+0x30>
            mem = 0;
 80185f0:	2300      	movs	r3, #0
 80185f2:	e7da      	b.n	80185aa <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 80185f4:	2001      	movs	r0, #1
 80185f6:	f000 fbe1 	bl	8018dbc <xQueueCreateMutex>
 80185fa:	4605      	mov	r5, r0
 80185fc:	e7db      	b.n	80185b6 <osMutexNew+0x3c>
  hMutex = NULL;
 80185fe:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8018600:	4628      	mov	r0, r5
 8018602:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8018604:	2500      	movs	r5, #0
 8018606:	e7fb      	b.n	8018600 <osMutexNew+0x86>
 8018608:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 801860a:	e7f9      	b.n	8018600 <osMutexNew+0x86>

0801860c <osMutexAcquire>:
 801860c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8018610:	b9da      	cbnz	r2, 801864a <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8018612:	b510      	push	{r4, lr}
 8018614:	4603      	mov	r3, r0
 8018616:	460c      	mov	r4, r1
 8018618:	f020 0001 	bic.w	r0, r0, #1
 801861c:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8018620:	2b01      	cmp	r3, #1
 8018622:	d915      	bls.n	8018650 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8018624:	b141      	cbz	r1, 8018638 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8018626:	4621      	mov	r1, r4
 8018628:	f000 fdeb 	bl	8019202 <xQueueTakeMutexRecursive>
 801862c:	2801      	cmp	r0, #1
 801862e:	d012      	beq.n	8018656 <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8018630:	b19c      	cbz	r4, 801865a <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8018632:	f06f 0001 	mvn.w	r0, #1
 8018636:	e00f      	b.n	8018658 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8018638:	4621      	mov	r1, r4
 801863a:	f000 fd0f 	bl	801905c <xQueueSemaphoreTake>
 801863e:	2801      	cmp	r0, #1
 8018640:	d00e      	beq.n	8018660 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8018642:	b17c      	cbz	r4, 8018664 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8018644:	f06f 0001 	mvn.w	r0, #1
 8018648:	e006      	b.n	8018658 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 801864a:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 801864e:	4770      	bx	lr
    stat = osErrorParameter;
 8018650:	f06f 0003 	mvn.w	r0, #3
 8018654:	e000      	b.n	8018658 <osMutexAcquire+0x4c>
  stat = osOK;
 8018656:	2000      	movs	r0, #0
}
 8018658:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 801865a:	f06f 0002 	mvn.w	r0, #2
 801865e:	e7fb      	b.n	8018658 <osMutexAcquire+0x4c>
  stat = osOK;
 8018660:	2000      	movs	r0, #0
 8018662:	e7f9      	b.n	8018658 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8018664:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018668:	e7f6      	b.n	8018658 <osMutexAcquire+0x4c>

0801866a <osMutexRelease>:
 801866a:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 801866e:	b9ba      	cbnz	r2, 80186a0 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8018670:	b508      	push	{r3, lr}
 8018672:	4603      	mov	r3, r0
 8018674:	f020 0001 	bic.w	r0, r0, #1
 8018678:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 801867c:	2b01      	cmp	r3, #1
 801867e:	d912      	bls.n	80186a6 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8018680:	b129      	cbz	r1, 801868e <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8018682:	f000 fbb5 	bl	8018df0 <xQueueGiveMutexRecursive>
 8018686:	2801      	cmp	r0, #1
 8018688:	d110      	bne.n	80186ac <osMutexRelease+0x42>
  stat = osOK;
 801868a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 801868c:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801868e:	2300      	movs	r3, #0
 8018690:	461a      	mov	r2, r3
 8018692:	4619      	mov	r1, r3
 8018694:	f000 fac2 	bl	8018c1c <xQueueGenericSend>
 8018698:	2801      	cmp	r0, #1
 801869a:	d10a      	bne.n	80186b2 <osMutexRelease+0x48>
  stat = osOK;
 801869c:	2000      	movs	r0, #0
 801869e:	e7f5      	b.n	801868c <osMutexRelease+0x22>
    stat = osErrorISR;
 80186a0:	f06f 0005 	mvn.w	r0, #5
}
 80186a4:	4770      	bx	lr
    stat = osErrorParameter;
 80186a6:	f06f 0003 	mvn.w	r0, #3
 80186aa:	e7ef      	b.n	801868c <osMutexRelease+0x22>
        stat = osErrorResource;
 80186ac:	f06f 0002 	mvn.w	r0, #2
 80186b0:	e7ec      	b.n	801868c <osMutexRelease+0x22>
        stat = osErrorResource;
 80186b2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80186b6:	e7e9      	b.n	801868c <osMutexRelease+0x22>

080186b8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80186b8:	b570      	push	{r4, r5, r6, lr}
 80186ba:	b082      	sub	sp, #8
 80186bc:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d13a      	bne.n	801873a <osMessageQueueNew+0x82>
 80186c4:	4614      	mov	r4, r2
 80186c6:	2800      	cmp	r0, #0
 80186c8:	d03b      	beq.n	8018742 <osMessageQueueNew+0x8a>
 80186ca:	2900      	cmp	r1, #0
 80186cc:	d03b      	beq.n	8018746 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 80186ce:	b36a      	cbz	r2, 801872c <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80186d0:	6893      	ldr	r3, [r2, #8]
 80186d2:	b14b      	cbz	r3, 80186e8 <osMessageQueueNew+0x30>
 80186d4:	68d2      	ldr	r2, [r2, #12]
 80186d6:	2a4f      	cmp	r2, #79	@ 0x4f
 80186d8:	d906      	bls.n	80186e8 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80186da:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80186dc:	b122      	cbz	r2, 80186e8 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80186de:	fb01 f500 	mul.w	r5, r1, r0
 80186e2:	6966      	ldr	r6, [r4, #20]
 80186e4:	42ae      	cmp	r6, r5
 80186e6:	d21b      	bcs.n	8018720 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80186e8:	b173      	cbz	r3, 8018708 <osMessageQueueNew+0x50>
    mem = -1;
 80186ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80186ee:	bb63      	cbnz	r3, 801874a <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80186f0:	2200      	movs	r2, #0
 80186f2:	f000 fa6f 	bl	8018bd4 <xQueueGenericCreate>
 80186f6:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80186f8:	b305      	cbz	r5, 801873c <osMessageQueueNew+0x84>
      if (attr != NULL) {
 80186fa:	b104      	cbz	r4, 80186fe <osMessageQueueNew+0x46>
        name = attr->name;
 80186fc:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 80186fe:	4621      	mov	r1, r4
 8018700:	4628      	mov	r0, r5
 8018702:	f000 fec3 	bl	801948c <vQueueAddToRegistry>
 8018706:	e019      	b.n	801873c <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018708:	68e3      	ldr	r3, [r4, #12]
 801870a:	b98b      	cbnz	r3, 8018730 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801870c:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801870e:	b113      	cbz	r3, 8018716 <osMessageQueueNew+0x5e>
    mem = -1;
 8018710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018714:	e7eb      	b.n	80186ee <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018716:	6963      	ldr	r3, [r4, #20]
 8018718:	b16b      	cbz	r3, 8018736 <osMessageQueueNew+0x7e>
    mem = -1;
 801871a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801871e:	e7e6      	b.n	80186ee <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8018720:	2500      	movs	r5, #0
 8018722:	9500      	str	r5, [sp, #0]
 8018724:	f000 fa0c 	bl	8018b40 <xQueueGenericCreateStatic>
 8018728:	4605      	mov	r5, r0
 801872a:	e7e5      	b.n	80186f8 <osMessageQueueNew+0x40>
      mem = 0;
 801872c:	2300      	movs	r3, #0
 801872e:	e7de      	b.n	80186ee <osMessageQueueNew+0x36>
    mem = -1;
 8018730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018734:	e7db      	b.n	80186ee <osMessageQueueNew+0x36>
          mem = 0;
 8018736:	2300      	movs	r3, #0
 8018738:	e7d9      	b.n	80186ee <osMessageQueueNew+0x36>
  hQueue = NULL;
 801873a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 801873c:	4628      	mov	r0, r5
 801873e:	b002      	add	sp, #8
 8018740:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8018742:	2500      	movs	r5, #0
 8018744:	e7fa      	b.n	801873c <osMessageQueueNew+0x84>
 8018746:	2500      	movs	r5, #0
 8018748:	e7f8      	b.n	801873c <osMessageQueueNew+0x84>
 801874a:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 801874c:	e7f6      	b.n	801873c <osMessageQueueNew+0x84>

0801874e <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801874e:	b510      	push	{r4, lr}
 8018750:	b082      	sub	sp, #8
 8018752:	461c      	mov	r4, r3
 8018754:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8018758:	b1c3      	cbz	r3, 801878c <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801875a:	b318      	cbz	r0, 80187a4 <osMessageQueuePut+0x56>
 801875c:	b329      	cbz	r1, 80187aa <osMessageQueuePut+0x5c>
 801875e:	bb3c      	cbnz	r4, 80187b0 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8018760:	2300      	movs	r3, #0
 8018762:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8018764:	aa01      	add	r2, sp, #4
 8018766:	f000 fb63 	bl	8018e30 <xQueueGenericSendFromISR>
 801876a:	2801      	cmp	r0, #1
 801876c:	d123      	bne.n	80187b6 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 801876e:	9801      	ldr	r0, [sp, #4]
 8018770:	b150      	cbz	r0, 8018788 <osMessageQueuePut+0x3a>
 8018772:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801877a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801877e:	f3bf 8f4f 	dsb	sy
 8018782:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8018786:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018788:	b002      	add	sp, #8
 801878a:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801878c:	b1b0      	cbz	r0, 80187bc <osMessageQueuePut+0x6e>
 801878e:	b1c1      	cbz	r1, 80187c2 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018790:	2300      	movs	r3, #0
 8018792:	4622      	mov	r2, r4
 8018794:	f000 fa42 	bl	8018c1c <xQueueGenericSend>
 8018798:	2801      	cmp	r0, #1
 801879a:	d015      	beq.n	80187c8 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 801879c:	b1b4      	cbz	r4, 80187cc <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 801879e:	f06f 0001 	mvn.w	r0, #1
 80187a2:	e7f1      	b.n	8018788 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80187a4:	f06f 0003 	mvn.w	r0, #3
 80187a8:	e7ee      	b.n	8018788 <osMessageQueuePut+0x3a>
 80187aa:	f06f 0003 	mvn.w	r0, #3
 80187ae:	e7eb      	b.n	8018788 <osMessageQueuePut+0x3a>
 80187b0:	f06f 0003 	mvn.w	r0, #3
 80187b4:	e7e8      	b.n	8018788 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 80187b6:	f06f 0002 	mvn.w	r0, #2
 80187ba:	e7e5      	b.n	8018788 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80187bc:	f06f 0003 	mvn.w	r0, #3
 80187c0:	e7e2      	b.n	8018788 <osMessageQueuePut+0x3a>
 80187c2:	f06f 0003 	mvn.w	r0, #3
 80187c6:	e7df      	b.n	8018788 <osMessageQueuePut+0x3a>
  stat = osOK;
 80187c8:	2000      	movs	r0, #0
 80187ca:	e7dd      	b.n	8018788 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 80187cc:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80187d0:	e7da      	b.n	8018788 <osMessageQueuePut+0x3a>

080187d2 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80187d2:	b510      	push	{r4, lr}
 80187d4:	b082      	sub	sp, #8
 80187d6:	461c      	mov	r4, r3
 80187d8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80187dc:	b1c3      	cbz	r3, 8018810 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80187de:	b310      	cbz	r0, 8018826 <osMessageQueueGet+0x54>
 80187e0:	b321      	cbz	r1, 801882c <osMessageQueueGet+0x5a>
 80187e2:	bb34      	cbnz	r4, 8018832 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80187e4:	2300      	movs	r3, #0
 80187e6:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80187e8:	aa01      	add	r2, sp, #4
 80187ea:	f000 fdd9 	bl	80193a0 <xQueueReceiveFromISR>
 80187ee:	2801      	cmp	r0, #1
 80187f0:	d122      	bne.n	8018838 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80187f2:	9801      	ldr	r0, [sp, #4]
 80187f4:	b150      	cbz	r0, 801880c <osMessageQueueGet+0x3a>
 80187f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80187fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80187fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018802:	f3bf 8f4f 	dsb	sy
 8018806:	f3bf 8f6f 	isb	sy
  stat = osOK;
 801880a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 801880c:	b002      	add	sp, #8
 801880e:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018810:	b1a8      	cbz	r0, 801883e <osMessageQueueGet+0x6c>
 8018812:	b1b9      	cbz	r1, 8018844 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018814:	4622      	mov	r2, r4
 8018816:	f000 fb72 	bl	8018efe <xQueueReceive>
 801881a:	2801      	cmp	r0, #1
 801881c:	d015      	beq.n	801884a <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 801881e:	b1b4      	cbz	r4, 801884e <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8018820:	f06f 0001 	mvn.w	r0, #1
 8018824:	e7f2      	b.n	801880c <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8018826:	f06f 0003 	mvn.w	r0, #3
 801882a:	e7ef      	b.n	801880c <osMessageQueueGet+0x3a>
 801882c:	f06f 0003 	mvn.w	r0, #3
 8018830:	e7ec      	b.n	801880c <osMessageQueueGet+0x3a>
 8018832:	f06f 0003 	mvn.w	r0, #3
 8018836:	e7e9      	b.n	801880c <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8018838:	f06f 0002 	mvn.w	r0, #2
 801883c:	e7e6      	b.n	801880c <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 801883e:	f06f 0003 	mvn.w	r0, #3
 8018842:	e7e3      	b.n	801880c <osMessageQueueGet+0x3a>
 8018844:	f06f 0003 	mvn.w	r0, #3
 8018848:	e7e0      	b.n	801880c <osMessageQueueGet+0x3a>
  stat = osOK;
 801884a:	2000      	movs	r0, #0
 801884c:	e7de      	b.n	801880c <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 801884e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018852:	e7db      	b.n	801880c <osMessageQueueGet+0x3a>

08018854 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8018854:	b148      	cbz	r0, 801886a <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8018856:	b508      	push	{r3, lr}
 8018858:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 801885c:	b112      	cbz	r2, 8018864 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 801885e:	f000 fe09 	bl	8019474 <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8018862:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8018864:	f000 fdf3 	bl	801944e <uxQueueMessagesWaiting>
 8018868:	e7fb      	b.n	8018862 <osMessageQueueGetCount+0xe>
    count = 0U;
 801886a:	2000      	movs	r0, #0
}
 801886c:	4770      	bx	lr

0801886e <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 801886e:	b508      	push	{r3, lr}
 8018870:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8018874:	b92b      	cbnz	r3, 8018882 <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8018876:	b138      	cbz	r0, 8018888 <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8018878:	2100      	movs	r1, #0
 801887a:	f000 f90e 	bl	8018a9a <xQueueGenericReset>
    stat = osOK;
 801887e:	2000      	movs	r0, #0
  }

  return (stat);
}
 8018880:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8018882:	f06f 0005 	mvn.w	r0, #5
 8018886:	e7fb      	b.n	8018880 <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 8018888:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 801888c:	e7f8      	b.n	8018880 <osMessageQueueReset+0x12>
	...

08018890 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018890:	4b03      	ldr	r3, [pc, #12]	@ (80188a0 <vApplicationGetIdleTaskMemory+0x10>)
 8018892:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8018894:	4b03      	ldr	r3, [pc, #12]	@ (80188a4 <vApplicationGetIdleTaskMemory+0x14>)
 8018896:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018898:	2380      	movs	r3, #128	@ 0x80
 801889a:	6013      	str	r3, [r2, #0]
}
 801889c:	4770      	bx	lr
 801889e:	bf00      	nop
 80188a0:	200034e8 	.word	0x200034e8
 80188a4:	200032e8 	.word	0x200032e8

080188a8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80188a8:	4b03      	ldr	r3, [pc, #12]	@ (80188b8 <vApplicationGetTimerTaskMemory+0x10>)
 80188aa:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80188ac:	4b03      	ldr	r3, [pc, #12]	@ (80188bc <vApplicationGetTimerTaskMemory+0x14>)
 80188ae:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80188b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80188b4:	6013      	str	r3, [r2, #0]
}
 80188b6:	4770      	bx	lr
 80188b8:	20003168 	.word	0x20003168
 80188bc:	20002d68 	.word	0x20002d68

080188c0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188c0:	f100 0308 	add.w	r3, r0, #8
 80188c4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80188c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80188ca:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188cc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188ce:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80188d0:	2300      	movs	r3, #0
 80188d2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80188d4:	4770      	bx	lr

080188d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80188d6:	2300      	movs	r3, #0
 80188d8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80188da:	4770      	bx	lr

080188dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80188dc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80188de:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80188e0:	689a      	ldr	r2, [r3, #8]
 80188e2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80188e4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80188e6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80188e8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80188ea:	6803      	ldr	r3, [r0, #0]
 80188ec:	3301      	adds	r3, #1
 80188ee:	6003      	str	r3, [r0, #0]
}
 80188f0:	4770      	bx	lr

080188f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80188f2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80188f4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80188f6:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80188fa:	d011      	beq.n	8018920 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80188fc:	f100 0308 	add.w	r3, r0, #8
 8018900:	461c      	mov	r4, r3
 8018902:	685b      	ldr	r3, [r3, #4]
 8018904:	681a      	ldr	r2, [r3, #0]
 8018906:	42aa      	cmp	r2, r5
 8018908:	d9fa      	bls.n	8018900 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801890a:	6863      	ldr	r3, [r4, #4]
 801890c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801890e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018910:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8018912:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018914:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8018916:	6803      	ldr	r3, [r0, #0]
 8018918:	3301      	adds	r3, #1
 801891a:	6003      	str	r3, [r0, #0]
}
 801891c:	bc30      	pop	{r4, r5}
 801891e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8018920:	6904      	ldr	r4, [r0, #16]
 8018922:	e7f2      	b.n	801890a <vListInsert+0x18>

08018924 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018924:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018926:	6841      	ldr	r1, [r0, #4]
 8018928:	6882      	ldr	r2, [r0, #8]
 801892a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801892c:	6841      	ldr	r1, [r0, #4]
 801892e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018930:	685a      	ldr	r2, [r3, #4]
 8018932:	4282      	cmp	r2, r0
 8018934:	d006      	beq.n	8018944 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018936:	2200      	movs	r2, #0
 8018938:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801893a:	681a      	ldr	r2, [r3, #0]
 801893c:	3a01      	subs	r2, #1
 801893e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018940:	6818      	ldr	r0, [r3, #0]
}
 8018942:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018944:	6882      	ldr	r2, [r0, #8]
 8018946:	605a      	str	r2, [r3, #4]
 8018948:	e7f5      	b.n	8018936 <uxListRemove+0x12>

0801894a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801894a:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801894c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801894e:	b118      	cbz	r0, 8018958 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018952:	6818      	ldr	r0, [r3, #0]
 8018954:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8018958:	4770      	bx	lr

0801895a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801895a:	b510      	push	{r4, lr}
 801895c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801895e:	f001 fe49 	bl	801a5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018962:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8018964:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018966:	429a      	cmp	r2, r3
 8018968:	d004      	beq.n	8018974 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 801896a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 801896c:	f001 fe64 	bl	801a638 <vPortExitCritical>

	return xReturn;
}
 8018970:	4620      	mov	r0, r4
 8018972:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8018974:	2401      	movs	r4, #1
 8018976:	e7f9      	b.n	801896c <prvIsQueueFull+0x12>

08018978 <prvIsQueueEmpty>:
{
 8018978:	b510      	push	{r4, lr}
 801897a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801897c:	f001 fe3a 	bl	801a5f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018980:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018982:	b923      	cbnz	r3, 801898e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8018984:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8018986:	f001 fe57 	bl	801a638 <vPortExitCritical>
}
 801898a:	4620      	mov	r0, r4
 801898c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 801898e:	2400      	movs	r4, #0
 8018990:	e7f9      	b.n	8018986 <prvIsQueueEmpty+0xe>

08018992 <prvCopyDataToQueue>:
{
 8018992:	b570      	push	{r4, r5, r6, lr}
 8018994:	4604      	mov	r4, r0
 8018996:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018998:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801899a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 801899c:	b95a      	cbnz	r2, 80189b6 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801899e:	6803      	ldr	r3, [r0, #0]
 80189a0:	b11b      	cbz	r3, 80189aa <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80189a2:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80189a4:	3601      	adds	r6, #1
 80189a6:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 80189a8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80189aa:	6880      	ldr	r0, [r0, #8]
 80189ac:	f001 faea 	bl	8019f84 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80189b0:	2300      	movs	r3, #0
 80189b2:	60a3      	str	r3, [r4, #8]
 80189b4:	e7f6      	b.n	80189a4 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80189b6:	b96d      	cbnz	r5, 80189d4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80189b8:	6840      	ldr	r0, [r0, #4]
 80189ba:	f015 fa45 	bl	802de48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80189be:	6863      	ldr	r3, [r4, #4]
 80189c0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80189c2:	4413      	add	r3, r2
 80189c4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80189c6:	68a2      	ldr	r2, [r4, #8]
 80189c8:	4293      	cmp	r3, r2
 80189ca:	d319      	bcc.n	8018a00 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80189cc:	6823      	ldr	r3, [r4, #0]
 80189ce:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80189d0:	4628      	mov	r0, r5
 80189d2:	e7e7      	b.n	80189a4 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80189d4:	68c0      	ldr	r0, [r0, #12]
 80189d6:	f015 fa37 	bl	802de48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80189da:	68e3      	ldr	r3, [r4, #12]
 80189dc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80189de:	4251      	negs	r1, r2
 80189e0:	1a9b      	subs	r3, r3, r2
 80189e2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80189e4:	6822      	ldr	r2, [r4, #0]
 80189e6:	4293      	cmp	r3, r2
 80189e8:	d202      	bcs.n	80189f0 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80189ea:	68a3      	ldr	r3, [r4, #8]
 80189ec:	440b      	add	r3, r1
 80189ee:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80189f0:	2d02      	cmp	r5, #2
 80189f2:	d001      	beq.n	80189f8 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80189f4:	2000      	movs	r0, #0
 80189f6:	e7d5      	b.n	80189a4 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80189f8:	b126      	cbz	r6, 8018a04 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80189fa:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80189fc:	2000      	movs	r0, #0
 80189fe:	e7d1      	b.n	80189a4 <prvCopyDataToQueue+0x12>
 8018a00:	4628      	mov	r0, r5
 8018a02:	e7cf      	b.n	80189a4 <prvCopyDataToQueue+0x12>
 8018a04:	2000      	movs	r0, #0
 8018a06:	e7cd      	b.n	80189a4 <prvCopyDataToQueue+0x12>

08018a08 <prvCopyDataFromQueue>:
{
 8018a08:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018a0a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8018a0c:	b16a      	cbz	r2, 8018a2a <prvCopyDataFromQueue+0x22>
{
 8018a0e:	b510      	push	{r4, lr}
 8018a10:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018a12:	68d9      	ldr	r1, [r3, #12]
 8018a14:	4411      	add	r1, r2
 8018a16:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018a18:	689c      	ldr	r4, [r3, #8]
 8018a1a:	42a1      	cmp	r1, r4
 8018a1c:	d301      	bcc.n	8018a22 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018a1e:	6819      	ldr	r1, [r3, #0]
 8018a20:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018a22:	68d9      	ldr	r1, [r3, #12]
 8018a24:	f015 fa10 	bl	802de48 <memcpy>
}
 8018a28:	bd10      	pop	{r4, pc}
 8018a2a:	4770      	bx	lr

08018a2c <prvUnlockQueue>:
{
 8018a2c:	b538      	push	{r3, r4, r5, lr}
 8018a2e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8018a30:	f001 fde0 	bl	801a5f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8018a34:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8018a38:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018a3a:	e001      	b.n	8018a40 <prvUnlockQueue+0x14>
			--cTxLock;
 8018a3c:	3c01      	subs	r4, #1
 8018a3e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018a40:	2c00      	cmp	r4, #0
 8018a42:	dd0a      	ble.n	8018a5a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018a44:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018a46:	b143      	cbz	r3, 8018a5a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018a48:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8018a4c:	f001 f99e 	bl	8019d8c <xTaskRemoveFromEventList>
 8018a50:	2800      	cmp	r0, #0
 8018a52:	d0f3      	beq.n	8018a3c <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8018a54:	f001 fa2e 	bl	8019eb4 <vTaskMissedYield>
 8018a58:	e7f0      	b.n	8018a3c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8018a5a:	23ff      	movs	r3, #255	@ 0xff
 8018a5c:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8018a60:	f001 fdea 	bl	801a638 <vPortExitCritical>
	taskENTER_CRITICAL();
 8018a64:	f001 fdc6 	bl	801a5f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8018a68:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8018a6c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018a6e:	e001      	b.n	8018a74 <prvUnlockQueue+0x48>
				--cRxLock;
 8018a70:	3c01      	subs	r4, #1
 8018a72:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018a74:	2c00      	cmp	r4, #0
 8018a76:	dd0a      	ble.n	8018a8e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018a78:	692b      	ldr	r3, [r5, #16]
 8018a7a:	b143      	cbz	r3, 8018a8e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018a7c:	f105 0010 	add.w	r0, r5, #16
 8018a80:	f001 f984 	bl	8019d8c <xTaskRemoveFromEventList>
 8018a84:	2800      	cmp	r0, #0
 8018a86:	d0f3      	beq.n	8018a70 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8018a88:	f001 fa14 	bl	8019eb4 <vTaskMissedYield>
 8018a8c:	e7f0      	b.n	8018a70 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8018a8e:	23ff      	movs	r3, #255	@ 0xff
 8018a90:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8018a94:	f001 fdd0 	bl	801a638 <vPortExitCritical>
}
 8018a98:	bd38      	pop	{r3, r4, r5, pc}

08018a9a <xQueueGenericReset>:
{
 8018a9a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8018a9c:	b1e0      	cbz	r0, 8018ad8 <xQueueGenericReset+0x3e>
 8018a9e:	460d      	mov	r5, r1
 8018aa0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018aa2:	f001 fda7 	bl	801a5f4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018aa6:	6823      	ldr	r3, [r4, #0]
 8018aa8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8018aaa:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8018aac:	fb01 3002 	mla	r0, r1, r2, r3
 8018ab0:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018ab2:	2000      	movs	r0, #0
 8018ab4:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018ab6:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018ab8:	3a01      	subs	r2, #1
 8018aba:	fb02 3301 	mla	r3, r2, r1, r3
 8018abe:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018ac0:	23ff      	movs	r3, #255	@ 0xff
 8018ac2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018ac6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8018aca:	b9fd      	cbnz	r5, 8018b0c <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018acc:	6923      	ldr	r3, [r4, #16]
 8018ace:	b963      	cbnz	r3, 8018aea <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8018ad0:	f001 fdb2 	bl	801a638 <vPortExitCritical>
}
 8018ad4:	2001      	movs	r0, #1
 8018ad6:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018adc:	f383 8811 	msr	BASEPRI, r3
 8018ae0:	f3bf 8f6f 	isb	sy
 8018ae4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018ae8:	e7fe      	b.n	8018ae8 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018aea:	f104 0010 	add.w	r0, r4, #16
 8018aee:	f001 f94d 	bl	8019d8c <xTaskRemoveFromEventList>
 8018af2:	2800      	cmp	r0, #0
 8018af4:	d0ec      	beq.n	8018ad0 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8018af6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018afe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018b02:	f3bf 8f4f 	dsb	sy
 8018b06:	f3bf 8f6f 	isb	sy
 8018b0a:	e7e1      	b.n	8018ad0 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018b0c:	f104 0010 	add.w	r0, r4, #16
 8018b10:	f7ff fed6 	bl	80188c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018b14:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018b18:	f7ff fed2 	bl	80188c0 <vListInitialise>
 8018b1c:	e7d8      	b.n	8018ad0 <xQueueGenericReset+0x36>

08018b1e <prvInitialiseNewQueue>:
{
 8018b1e:	b538      	push	{r3, r4, r5, lr}
 8018b20:	461d      	mov	r5, r3
 8018b22:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8018b24:	460b      	mov	r3, r1
 8018b26:	b949      	cbnz	r1, 8018b3c <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018b28:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8018b2a:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018b2c:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018b2e:	2101      	movs	r1, #1
 8018b30:	4620      	mov	r0, r4
 8018b32:	f7ff ffb2 	bl	8018a9a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8018b36:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8018b3a:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018b3c:	6022      	str	r2, [r4, #0]
 8018b3e:	e7f4      	b.n	8018b2a <prvInitialiseNewQueue+0xc>

08018b40 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018b40:	b940      	cbnz	r0, 8018b54 <xQueueGenericCreateStatic+0x14>
 8018b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b46:	f383 8811 	msr	BASEPRI, r3
 8018b4a:	f3bf 8f6f 	isb	sy
 8018b4e:	f3bf 8f4f 	dsb	sy
 8018b52:	e7fe      	b.n	8018b52 <xQueueGenericCreateStatic+0x12>
	{
 8018b54:	b510      	push	{r4, lr}
 8018b56:	b084      	sub	sp, #16
 8018b58:	461c      	mov	r4, r3
 8018b5a:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8018b5c:	b153      	cbz	r3, 8018b74 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018b5e:	b192      	cbz	r2, 8018b86 <xQueueGenericCreateStatic+0x46>
 8018b60:	b989      	cbnz	r1, 8018b86 <xQueueGenericCreateStatic+0x46>
 8018b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b66:	f383 8811 	msr	BASEPRI, r3
 8018b6a:	f3bf 8f6f 	isb	sy
 8018b6e:	f3bf 8f4f 	dsb	sy
 8018b72:	e7fe      	b.n	8018b72 <xQueueGenericCreateStatic+0x32>
 8018b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b78:	f383 8811 	msr	BASEPRI, r3
 8018b7c:	f3bf 8f6f 	isb	sy
 8018b80:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8018b84:	e7fe      	b.n	8018b84 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018b86:	b16a      	cbz	r2, 8018ba4 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018b88:	2350      	movs	r3, #80	@ 0x50
 8018b8a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018b8c:	9b03      	ldr	r3, [sp, #12]
 8018b8e:	2b50      	cmp	r3, #80	@ 0x50
 8018b90:	d013      	beq.n	8018bba <xQueueGenericCreateStatic+0x7a>
 8018b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b96:	f383 8811 	msr	BASEPRI, r3
 8018b9a:	f3bf 8f6f 	isb	sy
 8018b9e:	f3bf 8f4f 	dsb	sy
 8018ba2:	e7fe      	b.n	8018ba2 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018ba4:	2900      	cmp	r1, #0
 8018ba6:	d0ef      	beq.n	8018b88 <xQueueGenericCreateStatic+0x48>
 8018ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bac:	f383 8811 	msr	BASEPRI, r3
 8018bb0:	f3bf 8f6f 	isb	sy
 8018bb4:	f3bf 8f4f 	dsb	sy
 8018bb8:	e7fe      	b.n	8018bb8 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018bba:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018bc2:	9400      	str	r4, [sp, #0]
 8018bc4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018bc8:	4660      	mov	r0, ip
 8018bca:	f7ff ffa8 	bl	8018b1e <prvInitialiseNewQueue>
	}
 8018bce:	4620      	mov	r0, r4
 8018bd0:	b004      	add	sp, #16
 8018bd2:	bd10      	pop	{r4, pc}

08018bd4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018bd4:	b940      	cbnz	r0, 8018be8 <xQueueGenericCreate+0x14>
 8018bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bda:	f383 8811 	msr	BASEPRI, r3
 8018bde:	f3bf 8f6f 	isb	sy
 8018be2:	f3bf 8f4f 	dsb	sy
 8018be6:	e7fe      	b.n	8018be6 <xQueueGenericCreate+0x12>
	{
 8018be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bea:	b083      	sub	sp, #12
 8018bec:	460d      	mov	r5, r1
 8018bee:	4614      	mov	r4, r2
 8018bf0:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018bf2:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018bf6:	3050      	adds	r0, #80	@ 0x50
 8018bf8:	f001 feb6 	bl	801a968 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8018bfc:	4607      	mov	r7, r0
 8018bfe:	b150      	cbz	r0, 8018c16 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018c00:	2300      	movs	r3, #0
 8018c02:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018c06:	9000      	str	r0, [sp, #0]
 8018c08:	4623      	mov	r3, r4
 8018c0a:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8018c0e:	4629      	mov	r1, r5
 8018c10:	4630      	mov	r0, r6
 8018c12:	f7ff ff84 	bl	8018b1e <prvInitialiseNewQueue>
	}
 8018c16:	4638      	mov	r0, r7
 8018c18:	b003      	add	sp, #12
 8018c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018c1c <xQueueGenericSend>:
{
 8018c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c1e:	b085      	sub	sp, #20
 8018c20:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8018c22:	b188      	cbz	r0, 8018c48 <xQueueGenericSend+0x2c>
 8018c24:	460f      	mov	r7, r1
 8018c26:	461d      	mov	r5, r3
 8018c28:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018c2a:	b1b1      	cbz	r1, 8018c5a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018c2c:	2d02      	cmp	r5, #2
 8018c2e:	d120      	bne.n	8018c72 <xQueueGenericSend+0x56>
 8018c30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018c32:	2b01      	cmp	r3, #1
 8018c34:	d01d      	beq.n	8018c72 <xQueueGenericSend+0x56>
 8018c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c3a:	f383 8811 	msr	BASEPRI, r3
 8018c3e:	f3bf 8f6f 	isb	sy
 8018c42:	f3bf 8f4f 	dsb	sy
 8018c46:	e7fe      	b.n	8018c46 <xQueueGenericSend+0x2a>
 8018c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c4c:	f383 8811 	msr	BASEPRI, r3
 8018c50:	f3bf 8f6f 	isb	sy
 8018c54:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018c58:	e7fe      	b.n	8018c58 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018c5a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d0e5      	beq.n	8018c2c <xQueueGenericSend+0x10>
 8018c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c64:	f383 8811 	msr	BASEPRI, r3
 8018c68:	f3bf 8f6f 	isb	sy
 8018c6c:	f3bf 8f4f 	dsb	sy
 8018c70:	e7fe      	b.n	8018c70 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018c72:	f001 f92b 	bl	8019ecc <xTaskGetSchedulerState>
 8018c76:	4606      	mov	r6, r0
 8018c78:	b958      	cbnz	r0, 8018c92 <xQueueGenericSend+0x76>
 8018c7a:	9b01      	ldr	r3, [sp, #4]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d048      	beq.n	8018d12 <xQueueGenericSend+0xf6>
 8018c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c84:	f383 8811 	msr	BASEPRI, r3
 8018c88:	f3bf 8f6f 	isb	sy
 8018c8c:	f3bf 8f4f 	dsb	sy
 8018c90:	e7fe      	b.n	8018c90 <xQueueGenericSend+0x74>
 8018c92:	2600      	movs	r6, #0
 8018c94:	e03d      	b.n	8018d12 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018c96:	462a      	mov	r2, r5
 8018c98:	4639      	mov	r1, r7
 8018c9a:	4620      	mov	r0, r4
 8018c9c:	f7ff fe79 	bl	8018992 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018ca0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018ca2:	b97b      	cbnz	r3, 8018cc4 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8018ca4:	b148      	cbz	r0, 8018cba <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8018ca6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018cae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018cb2:	f3bf 8f4f 	dsb	sy
 8018cb6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8018cba:	f001 fcbd 	bl	801a638 <vPortExitCritical>
				return pdPASS;
 8018cbe:	2001      	movs	r0, #1
}
 8018cc0:	b005      	add	sp, #20
 8018cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018cc4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018cc8:	f001 f860 	bl	8019d8c <xTaskRemoveFromEventList>
 8018ccc:	2800      	cmp	r0, #0
 8018cce:	d0f4      	beq.n	8018cba <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8018cd0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018cd8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018cdc:	f3bf 8f4f 	dsb	sy
 8018ce0:	f3bf 8f6f 	isb	sy
 8018ce4:	e7e9      	b.n	8018cba <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8018ce6:	f001 fca7 	bl	801a638 <vPortExitCritical>
					return errQUEUE_FULL;
 8018cea:	2000      	movs	r0, #0
 8018cec:	e7e8      	b.n	8018cc0 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018cee:	a802      	add	r0, sp, #8
 8018cf0:	f001 f892 	bl	8019e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018cf4:	2601      	movs	r6, #1
 8018cf6:	e019      	b.n	8018d2c <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018cfe:	e021      	b.n	8018d44 <xQueueGenericSend+0x128>
 8018d00:	2300      	movs	r3, #0
 8018d02:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018d06:	e023      	b.n	8018d50 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8018d08:	4620      	mov	r0, r4
 8018d0a:	f7ff fe8f 	bl	8018a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018d0e:	f000 ff15 	bl	8019b3c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8018d12:	f001 fc6f 	bl	801a5f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018d16:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8018d18:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018d1a:	429a      	cmp	r2, r3
 8018d1c:	d3bb      	bcc.n	8018c96 <xQueueGenericSend+0x7a>
 8018d1e:	2d02      	cmp	r5, #2
 8018d20:	d0b9      	beq.n	8018c96 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018d22:	9b01      	ldr	r3, [sp, #4]
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d0de      	beq.n	8018ce6 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8018d28:	2e00      	cmp	r6, #0
 8018d2a:	d0e0      	beq.n	8018cee <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8018d2c:	f001 fc84 	bl	801a638 <vPortExitCritical>
		vTaskSuspendAll();
 8018d30:	f000 fe6a 	bl	8019a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018d34:	f001 fc5e 	bl	801a5f4 <vPortEnterCritical>
 8018d38:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8018d3c:	b252      	sxtb	r2, r2
 8018d3e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8018d42:	d0d9      	beq.n	8018cf8 <xQueueGenericSend+0xdc>
 8018d44:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8018d48:	b252      	sxtb	r2, r2
 8018d4a:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8018d4e:	d0d7      	beq.n	8018d00 <xQueueGenericSend+0xe4>
 8018d50:	f001 fc72 	bl	801a638 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018d54:	a901      	add	r1, sp, #4
 8018d56:	a802      	add	r0, sp, #8
 8018d58:	f001 f86a 	bl	8019e30 <xTaskCheckForTimeOut>
 8018d5c:	b9d8      	cbnz	r0, 8018d96 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018d5e:	4620      	mov	r0, r4
 8018d60:	f7ff fdfb 	bl	801895a <prvIsQueueFull>
 8018d64:	2800      	cmp	r0, #0
 8018d66:	d0cf      	beq.n	8018d08 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018d68:	9901      	ldr	r1, [sp, #4]
 8018d6a:	f104 0010 	add.w	r0, r4, #16
 8018d6e:	f000 ffd9 	bl	8019d24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018d72:	4620      	mov	r0, r4
 8018d74:	f7ff fe5a 	bl	8018a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018d78:	f000 fee0 	bl	8019b3c <xTaskResumeAll>
 8018d7c:	2800      	cmp	r0, #0
 8018d7e:	d1c8      	bne.n	8018d12 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8018d80:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018d88:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018d8c:	f3bf 8f4f 	dsb	sy
 8018d90:	f3bf 8f6f 	isb	sy
 8018d94:	e7bd      	b.n	8018d12 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8018d96:	4620      	mov	r0, r4
 8018d98:	f7ff fe48 	bl	8018a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018d9c:	f000 fece 	bl	8019b3c <xTaskResumeAll>
			return errQUEUE_FULL;
 8018da0:	2000      	movs	r0, #0
 8018da2:	e78d      	b.n	8018cc0 <xQueueGenericSend+0xa4>

08018da4 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8018da4:	b148      	cbz	r0, 8018dba <prvInitialiseMutex+0x16>
	{
 8018da6:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8018da8:	2100      	movs	r1, #0
 8018daa:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8018dac:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8018dae:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8018db0:	460b      	mov	r3, r1
 8018db2:	460a      	mov	r2, r1
 8018db4:	f7ff ff32 	bl	8018c1c <xQueueGenericSend>
	}
 8018db8:	bd08      	pop	{r3, pc}
 8018dba:	4770      	bx	lr

08018dbc <xQueueCreateMutex>:
	{
 8018dbc:	b510      	push	{r4, lr}
 8018dbe:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8018dc0:	2100      	movs	r1, #0
 8018dc2:	2001      	movs	r0, #1
 8018dc4:	f7ff ff06 	bl	8018bd4 <xQueueGenericCreate>
 8018dc8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018dca:	f7ff ffeb 	bl	8018da4 <prvInitialiseMutex>
	}
 8018dce:	4620      	mov	r0, r4
 8018dd0:	bd10      	pop	{r4, pc}

08018dd2 <xQueueCreateMutexStatic>:
	{
 8018dd2:	b510      	push	{r4, lr}
 8018dd4:	b082      	sub	sp, #8
 8018dd6:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8018dd8:	9000      	str	r0, [sp, #0]
 8018dda:	2200      	movs	r2, #0
 8018ddc:	4611      	mov	r1, r2
 8018dde:	2001      	movs	r0, #1
 8018de0:	f7ff feae 	bl	8018b40 <xQueueGenericCreateStatic>
 8018de4:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018de6:	f7ff ffdd 	bl	8018da4 <prvInitialiseMutex>
	}
 8018dea:	4620      	mov	r0, r4
 8018dec:	b002      	add	sp, #8
 8018dee:	bd10      	pop	{r4, pc}

08018df0 <xQueueGiveMutexRecursive>:
	{
 8018df0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8018df2:	b138      	cbz	r0, 8018e04 <xQueueGiveMutexRecursive+0x14>
 8018df4:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8018df6:	6885      	ldr	r5, [r0, #8]
 8018df8:	f001 f862 	bl	8019ec0 <xTaskGetCurrentTaskHandle>
 8018dfc:	4285      	cmp	r5, r0
 8018dfe:	d00a      	beq.n	8018e16 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8018e00:	2000      	movs	r0, #0
	}
 8018e02:	bd38      	pop	{r3, r4, r5, pc}
 8018e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e08:	f383 8811 	msr	BASEPRI, r3
 8018e0c:	f3bf 8f6f 	isb	sy
 8018e10:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8018e14:	e7fe      	b.n	8018e14 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8018e16:	68e3      	ldr	r3, [r4, #12]
 8018e18:	3b01      	subs	r3, #1
 8018e1a:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8018e1c:	b10b      	cbz	r3, 8018e22 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8018e1e:	2001      	movs	r0, #1
		return xReturn;
 8018e20:	e7ef      	b.n	8018e02 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8018e22:	461a      	mov	r2, r3
 8018e24:	4619      	mov	r1, r3
 8018e26:	4620      	mov	r0, r4
 8018e28:	f7ff fef8 	bl	8018c1c <xQueueGenericSend>
			xReturn = pdPASS;
 8018e2c:	2001      	movs	r0, #1
 8018e2e:	e7e8      	b.n	8018e02 <xQueueGiveMutexRecursive+0x12>

08018e30 <xQueueGenericSendFromISR>:
{
 8018e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8018e34:	b190      	cbz	r0, 8018e5c <xQueueGenericSendFromISR+0x2c>
 8018e36:	460f      	mov	r7, r1
 8018e38:	4616      	mov	r6, r2
 8018e3a:	461c      	mov	r4, r3
 8018e3c:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018e3e:	b1b1      	cbz	r1, 8018e6e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018e40:	2c02      	cmp	r4, #2
 8018e42:	d120      	bne.n	8018e86 <xQueueGenericSendFromISR+0x56>
 8018e44:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8018e46:	2b01      	cmp	r3, #1
 8018e48:	d01d      	beq.n	8018e86 <xQueueGenericSendFromISR+0x56>
 8018e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e4e:	f383 8811 	msr	BASEPRI, r3
 8018e52:	f3bf 8f6f 	isb	sy
 8018e56:	f3bf 8f4f 	dsb	sy
 8018e5a:	e7fe      	b.n	8018e5a <xQueueGenericSendFromISR+0x2a>
 8018e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e60:	f383 8811 	msr	BASEPRI, r3
 8018e64:	f3bf 8f6f 	isb	sy
 8018e68:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018e6c:	e7fe      	b.n	8018e6c <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018e6e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d0e5      	beq.n	8018e40 <xQueueGenericSendFromISR+0x10>
 8018e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e78:	f383 8811 	msr	BASEPRI, r3
 8018e7c:	f3bf 8f6f 	isb	sy
 8018e80:	f3bf 8f4f 	dsb	sy
 8018e84:	e7fe      	b.n	8018e84 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018e86:	f001 fcdb 	bl	801a840 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018e8a:	f3ef 8811 	mrs	r8, BASEPRI
 8018e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e92:	f383 8811 	msr	BASEPRI, r3
 8018e96:	f3bf 8f6f 	isb	sy
 8018e9a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018e9e:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8018ea0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8018ea2:	429a      	cmp	r2, r3
 8018ea4:	d306      	bcc.n	8018eb4 <xQueueGenericSendFromISR+0x84>
 8018ea6:	2c02      	cmp	r4, #2
 8018ea8:	d004      	beq.n	8018eb4 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8018eaa:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018eac:	f388 8811 	msr	BASEPRI, r8
}
 8018eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8018eb4:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8018eb8:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018ebc:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018ebe:	4622      	mov	r2, r4
 8018ec0:	4639      	mov	r1, r7
 8018ec2:	4628      	mov	r0, r5
 8018ec4:	f7ff fd65 	bl	8018992 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8018ec8:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8018ecc:	d006      	beq.n	8018edc <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018ece:	f109 0301 	add.w	r3, r9, #1
 8018ed2:	b25b      	sxtb	r3, r3
 8018ed4:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8018ed8:	2001      	movs	r0, #1
 8018eda:	e7e7      	b.n	8018eac <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018edc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018ede:	b90b      	cbnz	r3, 8018ee4 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8018ee0:	2001      	movs	r0, #1
 8018ee2:	e7e3      	b.n	8018eac <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018ee4:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8018ee8:	f000 ff50 	bl	8019d8c <xTaskRemoveFromEventList>
 8018eec:	b118      	cbz	r0, 8018ef6 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8018eee:	b126      	cbz	r6, 8018efa <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018ef0:	2001      	movs	r0, #1
 8018ef2:	6030      	str	r0, [r6, #0]
 8018ef4:	e7da      	b.n	8018eac <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8018ef6:	2001      	movs	r0, #1
 8018ef8:	e7d8      	b.n	8018eac <xQueueGenericSendFromISR+0x7c>
 8018efa:	2001      	movs	r0, #1
 8018efc:	e7d6      	b.n	8018eac <xQueueGenericSendFromISR+0x7c>

08018efe <xQueueReceive>:
{
 8018efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f00:	b085      	sub	sp, #20
 8018f02:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8018f04:	b190      	cbz	r0, 8018f2c <xQueueReceive+0x2e>
 8018f06:	460f      	mov	r7, r1
 8018f08:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018f0a:	b1c1      	cbz	r1, 8018f3e <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018f0c:	f000 ffde 	bl	8019ecc <xTaskGetSchedulerState>
 8018f10:	4606      	mov	r6, r0
 8018f12:	bb00      	cbnz	r0, 8018f56 <xQueueReceive+0x58>
 8018f14:	9b01      	ldr	r3, [sp, #4]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d05e      	beq.n	8018fd8 <xQueueReceive+0xda>
	__asm volatile
 8018f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f1e:	f383 8811 	msr	BASEPRI, r3
 8018f22:	f3bf 8f6f 	isb	sy
 8018f26:	f3bf 8f4f 	dsb	sy
 8018f2a:	e7fe      	b.n	8018f2a <xQueueReceive+0x2c>
 8018f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f30:	f383 8811 	msr	BASEPRI, r3
 8018f34:	f3bf 8f6f 	isb	sy
 8018f38:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8018f3c:	e7fe      	b.n	8018f3c <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018f3e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d0e3      	beq.n	8018f0c <xQueueReceive+0xe>
 8018f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f48:	f383 8811 	msr	BASEPRI, r3
 8018f4c:	f3bf 8f6f 	isb	sy
 8018f50:	f3bf 8f4f 	dsb	sy
 8018f54:	e7fe      	b.n	8018f54 <xQueueReceive+0x56>
 8018f56:	2600      	movs	r6, #0
 8018f58:	e03e      	b.n	8018fd8 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018f5a:	4639      	mov	r1, r7
 8018f5c:	4620      	mov	r0, r4
 8018f5e:	f7ff fd53 	bl	8018a08 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018f62:	3d01      	subs	r5, #1
 8018f64:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018f66:	6923      	ldr	r3, [r4, #16]
 8018f68:	b923      	cbnz	r3, 8018f74 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8018f6a:	f001 fb65 	bl	801a638 <vPortExitCritical>
				return pdPASS;
 8018f6e:	2001      	movs	r0, #1
}
 8018f70:	b005      	add	sp, #20
 8018f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018f74:	f104 0010 	add.w	r0, r4, #16
 8018f78:	f000 ff08 	bl	8019d8c <xTaskRemoveFromEventList>
 8018f7c:	2800      	cmp	r0, #0
 8018f7e:	d0f4      	beq.n	8018f6a <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8018f80:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018f84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018f88:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018f8c:	f3bf 8f4f 	dsb	sy
 8018f90:	f3bf 8f6f 	isb	sy
 8018f94:	e7e9      	b.n	8018f6a <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8018f96:	f001 fb4f 	bl	801a638 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018f9a:	2000      	movs	r0, #0
 8018f9c:	e7e8      	b.n	8018f70 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018f9e:	a802      	add	r0, sp, #8
 8018fa0:	f000 ff3a 	bl	8019e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018fa4:	2601      	movs	r6, #1
 8018fa6:	e021      	b.n	8018fec <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8018fa8:	2300      	movs	r3, #0
 8018faa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018fae:	e029      	b.n	8019004 <xQueueReceive+0x106>
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018fb6:	e02b      	b.n	8019010 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8018fb8:	4620      	mov	r0, r4
 8018fba:	f7ff fd37 	bl	8018a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018fbe:	f000 fdbd 	bl	8019b3c <xTaskResumeAll>
 8018fc2:	e009      	b.n	8018fd8 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8018fc4:	4620      	mov	r0, r4
 8018fc6:	f7ff fd31 	bl	8018a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018fca:	f000 fdb7 	bl	8019b3c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018fce:	4620      	mov	r0, r4
 8018fd0:	f7ff fcd2 	bl	8018978 <prvIsQueueEmpty>
 8018fd4:	2800      	cmp	r0, #0
 8018fd6:	d13f      	bne.n	8019058 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8018fd8:	f001 fb0c 	bl	801a5f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018fdc:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018fde:	2d00      	cmp	r5, #0
 8018fe0:	d1bb      	bne.n	8018f5a <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018fe2:	9b01      	ldr	r3, [sp, #4]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d0d6      	beq.n	8018f96 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8018fe8:	2e00      	cmp	r6, #0
 8018fea:	d0d8      	beq.n	8018f9e <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8018fec:	f001 fb24 	bl	801a638 <vPortExitCritical>
		vTaskSuspendAll();
 8018ff0:	f000 fd0a 	bl	8019a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018ff4:	f001 fafe 	bl	801a5f4 <vPortEnterCritical>
 8018ff8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018ffc:	b25b      	sxtb	r3, r3
 8018ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019002:	d0d1      	beq.n	8018fa8 <xQueueReceive+0xaa>
 8019004:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8019008:	b25b      	sxtb	r3, r3
 801900a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801900e:	d0cf      	beq.n	8018fb0 <xQueueReceive+0xb2>
 8019010:	f001 fb12 	bl	801a638 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019014:	a901      	add	r1, sp, #4
 8019016:	a802      	add	r0, sp, #8
 8019018:	f000 ff0a 	bl	8019e30 <xTaskCheckForTimeOut>
 801901c:	2800      	cmp	r0, #0
 801901e:	d1d1      	bne.n	8018fc4 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019020:	4620      	mov	r0, r4
 8019022:	f7ff fca9 	bl	8018978 <prvIsQueueEmpty>
 8019026:	2800      	cmp	r0, #0
 8019028:	d0c6      	beq.n	8018fb8 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801902a:	9901      	ldr	r1, [sp, #4]
 801902c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019030:	f000 fe78 	bl	8019d24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019034:	4620      	mov	r0, r4
 8019036:	f7ff fcf9 	bl	8018a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801903a:	f000 fd7f 	bl	8019b3c <xTaskResumeAll>
 801903e:	2800      	cmp	r0, #0
 8019040:	d1ca      	bne.n	8018fd8 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8019042:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801904a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801904e:	f3bf 8f4f 	dsb	sy
 8019052:	f3bf 8f6f 	isb	sy
 8019056:	e7bf      	b.n	8018fd8 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8019058:	2000      	movs	r0, #0
 801905a:	e789      	b.n	8018f70 <xQueueReceive+0x72>

0801905c <xQueueSemaphoreTake>:
{
 801905c:	b570      	push	{r4, r5, r6, lr}
 801905e:	b084      	sub	sp, #16
 8019060:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8019062:	b158      	cbz	r0, 801907c <xQueueSemaphoreTake+0x20>
 8019064:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8019066:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019068:	b18b      	cbz	r3, 801908e <xQueueSemaphoreTake+0x32>
 801906a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801906e:	f383 8811 	msr	BASEPRI, r3
 8019072:	f3bf 8f6f 	isb	sy
 8019076:	f3bf 8f4f 	dsb	sy
 801907a:	e7fe      	b.n	801907a <xQueueSemaphoreTake+0x1e>
 801907c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019080:	f383 8811 	msr	BASEPRI, r3
 8019084:	f3bf 8f6f 	isb	sy
 8019088:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 801908c:	e7fe      	b.n	801908c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801908e:	f000 ff1d 	bl	8019ecc <xTaskGetSchedulerState>
 8019092:	4605      	mov	r5, r0
 8019094:	b950      	cbnz	r0, 80190ac <xQueueSemaphoreTake+0x50>
 8019096:	9b01      	ldr	r3, [sp, #4]
 8019098:	b15b      	cbz	r3, 80190b2 <xQueueSemaphoreTake+0x56>
 801909a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801909e:	f383 8811 	msr	BASEPRI, r3
 80190a2:	f3bf 8f6f 	isb	sy
 80190a6:	f3bf 8f4f 	dsb	sy
 80190aa:	e7fe      	b.n	80190aa <xQueueSemaphoreTake+0x4e>
 80190ac:	2600      	movs	r6, #0
 80190ae:	4635      	mov	r5, r6
 80190b0:	e055      	b.n	801915e <xQueueSemaphoreTake+0x102>
 80190b2:	4606      	mov	r6, r0
 80190b4:	e053      	b.n	801915e <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80190b6:	3b01      	subs	r3, #1
 80190b8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80190ba:	6823      	ldr	r3, [r4, #0]
 80190bc:	b13b      	cbz	r3, 80190ce <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80190be:	6923      	ldr	r3, [r4, #16]
 80190c0:	b94b      	cbnz	r3, 80190d6 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 80190c2:	f001 fab9 	bl	801a638 <vPortExitCritical>
				return pdPASS;
 80190c6:	2601      	movs	r6, #1
}
 80190c8:	4630      	mov	r0, r6
 80190ca:	b004      	add	sp, #16
 80190cc:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80190ce:	f000 fff1 	bl	801a0b4 <pvTaskIncrementMutexHeldCount>
 80190d2:	60a0      	str	r0, [r4, #8]
 80190d4:	e7f3      	b.n	80190be <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80190d6:	f104 0010 	add.w	r0, r4, #16
 80190da:	f000 fe57 	bl	8019d8c <xTaskRemoveFromEventList>
 80190de:	2800      	cmp	r0, #0
 80190e0:	d0ef      	beq.n	80190c2 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 80190e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80190e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80190ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80190ee:	f3bf 8f4f 	dsb	sy
 80190f2:	f3bf 8f6f 	isb	sy
 80190f6:	e7e4      	b.n	80190c2 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80190f8:	b146      	cbz	r6, 801910c <xQueueSemaphoreTake+0xb0>
 80190fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190fe:	f383 8811 	msr	BASEPRI, r3
 8019102:	f3bf 8f6f 	isb	sy
 8019106:	f3bf 8f4f 	dsb	sy
 801910a:	e7fe      	b.n	801910a <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 801910c:	f001 fa94 	bl	801a638 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8019110:	e7da      	b.n	80190c8 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019112:	a802      	add	r0, sp, #8
 8019114:	f000 fe80 	bl	8019e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019118:	2501      	movs	r5, #1
 801911a:	e02a      	b.n	8019172 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 801911c:	2300      	movs	r3, #0
 801911e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019122:	e032      	b.n	801918a <xQueueSemaphoreTake+0x12e>
 8019124:	2300      	movs	r3, #0
 8019126:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801912a:	e034      	b.n	8019196 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 801912c:	f001 fa62 	bl	801a5f4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019130:	68a0      	ldr	r0, [r4, #8]
 8019132:	f000 fedb 	bl	8019eec <xTaskPriorityInherit>
 8019136:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8019138:	f001 fa7e 	bl	801a638 <vPortExitCritical>
 801913c:	e03b      	b.n	80191b6 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 801913e:	4620      	mov	r0, r4
 8019140:	f7ff fc74 	bl	8018a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019144:	f000 fcfa 	bl	8019b3c <xTaskResumeAll>
 8019148:	e009      	b.n	801915e <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 801914a:	4620      	mov	r0, r4
 801914c:	f7ff fc6e 	bl	8018a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019150:	f000 fcf4 	bl	8019b3c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019154:	4620      	mov	r0, r4
 8019156:	f7ff fc0f 	bl	8018978 <prvIsQueueEmpty>
 801915a:	2800      	cmp	r0, #0
 801915c:	d142      	bne.n	80191e4 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 801915e:	f001 fa49 	bl	801a5f4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019162:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019164:	2b00      	cmp	r3, #0
 8019166:	d1a6      	bne.n	80190b6 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019168:	9b01      	ldr	r3, [sp, #4]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d0c4      	beq.n	80190f8 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 801916e:	2d00      	cmp	r5, #0
 8019170:	d0cf      	beq.n	8019112 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8019172:	f001 fa61 	bl	801a638 <vPortExitCritical>
		vTaskSuspendAll();
 8019176:	f000 fc47 	bl	8019a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801917a:	f001 fa3b 	bl	801a5f4 <vPortEnterCritical>
 801917e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019182:	b25b      	sxtb	r3, r3
 8019184:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019188:	d0c8      	beq.n	801911c <xQueueSemaphoreTake+0xc0>
 801918a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801918e:	b25b      	sxtb	r3, r3
 8019190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019194:	d0c6      	beq.n	8019124 <xQueueSemaphoreTake+0xc8>
 8019196:	f001 fa4f 	bl	801a638 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801919a:	a901      	add	r1, sp, #4
 801919c:	a802      	add	r0, sp, #8
 801919e:	f000 fe47 	bl	8019e30 <xTaskCheckForTimeOut>
 80191a2:	2800      	cmp	r0, #0
 80191a4:	d1d1      	bne.n	801914a <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80191a6:	4620      	mov	r0, r4
 80191a8:	f7ff fbe6 	bl	8018978 <prvIsQueueEmpty>
 80191ac:	2800      	cmp	r0, #0
 80191ae:	d0c6      	beq.n	801913e <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80191b0:	6823      	ldr	r3, [r4, #0]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d0ba      	beq.n	801912c <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80191b6:	9901      	ldr	r1, [sp, #4]
 80191b8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80191bc:	f000 fdb2 	bl	8019d24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80191c0:	4620      	mov	r0, r4
 80191c2:	f7ff fc33 	bl	8018a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80191c6:	f000 fcb9 	bl	8019b3c <xTaskResumeAll>
 80191ca:	2800      	cmp	r0, #0
 80191cc:	d1c7      	bne.n	801915e <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 80191ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80191d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80191d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80191da:	f3bf 8f4f 	dsb	sy
 80191de:	f3bf 8f6f 	isb	sy
 80191e2:	e7bc      	b.n	801915e <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 80191e4:	b90e      	cbnz	r6, 80191ea <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 80191e6:	2600      	movs	r6, #0
 80191e8:	e76e      	b.n	80190c8 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 80191ea:	f001 fa03 	bl	801a5f4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80191ee:	4620      	mov	r0, r4
 80191f0:	f7ff fbab 	bl	801894a <prvGetDisinheritPriorityAfterTimeout>
 80191f4:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80191f6:	68a0      	ldr	r0, [r4, #8]
 80191f8:	f000 ff0c 	bl	801a014 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80191fc:	f001 fa1c 	bl	801a638 <vPortExitCritical>
 8019200:	e7f1      	b.n	80191e6 <xQueueSemaphoreTake+0x18a>

08019202 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8019202:	b180      	cbz	r0, 8019226 <xQueueTakeMutexRecursive+0x24>
	{
 8019204:	b570      	push	{r4, r5, r6, lr}
 8019206:	460c      	mov	r4, r1
 8019208:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801920a:	6886      	ldr	r6, [r0, #8]
 801920c:	f000 fe58 	bl	8019ec0 <xTaskGetCurrentTaskHandle>
 8019210:	4286      	cmp	r6, r0
 8019212:	d011      	beq.n	8019238 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8019214:	4621      	mov	r1, r4
 8019216:	4628      	mov	r0, r5
 8019218:	f7ff ff20 	bl	801905c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 801921c:	b180      	cbz	r0, 8019240 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801921e:	68eb      	ldr	r3, [r5, #12]
 8019220:	3301      	adds	r3, #1
 8019222:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8019224:	e00c      	b.n	8019240 <xQueueTakeMutexRecursive+0x3e>
 8019226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801922a:	f383 8811 	msr	BASEPRI, r3
 801922e:	f3bf 8f6f 	isb	sy
 8019232:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8019236:	e7fe      	b.n	8019236 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8019238:	68eb      	ldr	r3, [r5, #12]
 801923a:	3301      	adds	r3, #1
 801923c:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 801923e:	2001      	movs	r0, #1
	}
 8019240:	bd70      	pop	{r4, r5, r6, pc}

08019242 <xQueuePeek>:
{
 8019242:	b570      	push	{r4, r5, r6, lr}
 8019244:	b084      	sub	sp, #16
 8019246:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8019248:	b190      	cbz	r0, 8019270 <xQueuePeek+0x2e>
 801924a:	460e      	mov	r6, r1
 801924c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801924e:	b1c1      	cbz	r1, 8019282 <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019250:	f000 fe3c 	bl	8019ecc <xTaskGetSchedulerState>
 8019254:	4605      	mov	r5, r0
 8019256:	bb00      	cbnz	r0, 801929a <xQueuePeek+0x58>
 8019258:	9b01      	ldr	r3, [sp, #4]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d05e      	beq.n	801931c <xQueuePeek+0xda>
 801925e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019262:	f383 8811 	msr	BASEPRI, r3
 8019266:	f3bf 8f6f 	isb	sy
 801926a:	f3bf 8f4f 	dsb	sy
 801926e:	e7fe      	b.n	801926e <xQueuePeek+0x2c>
 8019270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019274:	f383 8811 	msr	BASEPRI, r3
 8019278:	f3bf 8f6f 	isb	sy
 801927c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8019280:	e7fe      	b.n	8019280 <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019282:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019284:	2b00      	cmp	r3, #0
 8019286:	d0e3      	beq.n	8019250 <xQueuePeek+0xe>
 8019288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801928c:	f383 8811 	msr	BASEPRI, r3
 8019290:	f3bf 8f6f 	isb	sy
 8019294:	f3bf 8f4f 	dsb	sy
 8019298:	e7fe      	b.n	8019298 <xQueuePeek+0x56>
 801929a:	2500      	movs	r5, #0
 801929c:	e03e      	b.n	801931c <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 801929e:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80192a0:	4631      	mov	r1, r6
 80192a2:	4620      	mov	r0, r4
 80192a4:	f7ff fbb0 	bl	8018a08 <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80192a8:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80192aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80192ac:	b923      	cbnz	r3, 80192b8 <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 80192ae:	f001 f9c3 	bl	801a638 <vPortExitCritical>
				return pdPASS;
 80192b2:	2001      	movs	r0, #1
}
 80192b4:	b004      	add	sp, #16
 80192b6:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80192b8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80192bc:	f000 fd66 	bl	8019d8c <xTaskRemoveFromEventList>
 80192c0:	2800      	cmp	r0, #0
 80192c2:	d0f4      	beq.n	80192ae <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80192c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80192c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80192cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80192d0:	f3bf 8f4f 	dsb	sy
 80192d4:	f3bf 8f6f 	isb	sy
 80192d8:	e7e9      	b.n	80192ae <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 80192da:	f001 f9ad 	bl	801a638 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80192de:	2000      	movs	r0, #0
 80192e0:	e7e8      	b.n	80192b4 <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80192e2:	a802      	add	r0, sp, #8
 80192e4:	f000 fd98 	bl	8019e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80192e8:	2501      	movs	r5, #1
 80192ea:	e021      	b.n	8019330 <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 80192ec:	2300      	movs	r3, #0
 80192ee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80192f2:	e029      	b.n	8019348 <xQueuePeek+0x106>
 80192f4:	2300      	movs	r3, #0
 80192f6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80192fa:	e02b      	b.n	8019354 <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 80192fc:	4620      	mov	r0, r4
 80192fe:	f7ff fb95 	bl	8018a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019302:	f000 fc1b 	bl	8019b3c <xTaskResumeAll>
 8019306:	e009      	b.n	801931c <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 8019308:	4620      	mov	r0, r4
 801930a:	f7ff fb8f 	bl	8018a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801930e:	f000 fc15 	bl	8019b3c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019312:	4620      	mov	r0, r4
 8019314:	f7ff fb30 	bl	8018978 <prvIsQueueEmpty>
 8019318:	2800      	cmp	r0, #0
 801931a:	d13f      	bne.n	801939c <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 801931c:	f001 f96a 	bl	801a5f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019320:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019322:	2b00      	cmp	r3, #0
 8019324:	d1bb      	bne.n	801929e <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019326:	9b01      	ldr	r3, [sp, #4]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d0d6      	beq.n	80192da <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 801932c:	2d00      	cmp	r5, #0
 801932e:	d0d8      	beq.n	80192e2 <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 8019330:	f001 f982 	bl	801a638 <vPortExitCritical>
		vTaskSuspendAll();
 8019334:	f000 fb68 	bl	8019a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019338:	f001 f95c 	bl	801a5f4 <vPortEnterCritical>
 801933c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019340:	b25b      	sxtb	r3, r3
 8019342:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019346:	d0d1      	beq.n	80192ec <xQueuePeek+0xaa>
 8019348:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801934c:	b25b      	sxtb	r3, r3
 801934e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019352:	d0cf      	beq.n	80192f4 <xQueuePeek+0xb2>
 8019354:	f001 f970 	bl	801a638 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019358:	a901      	add	r1, sp, #4
 801935a:	a802      	add	r0, sp, #8
 801935c:	f000 fd68 	bl	8019e30 <xTaskCheckForTimeOut>
 8019360:	2800      	cmp	r0, #0
 8019362:	d1d1      	bne.n	8019308 <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019364:	4620      	mov	r0, r4
 8019366:	f7ff fb07 	bl	8018978 <prvIsQueueEmpty>
 801936a:	2800      	cmp	r0, #0
 801936c:	d0c6      	beq.n	80192fc <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801936e:	9901      	ldr	r1, [sp, #4]
 8019370:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019374:	f000 fcd6 	bl	8019d24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019378:	4620      	mov	r0, r4
 801937a:	f7ff fb57 	bl	8018a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801937e:	f000 fbdd 	bl	8019b3c <xTaskResumeAll>
 8019382:	2800      	cmp	r0, #0
 8019384:	d1ca      	bne.n	801931c <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 8019386:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801938a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801938e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019392:	f3bf 8f4f 	dsb	sy
 8019396:	f3bf 8f6f 	isb	sy
 801939a:	e7bf      	b.n	801931c <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 801939c:	2000      	movs	r0, #0
 801939e:	e789      	b.n	80192b4 <xQueuePeek+0x72>

080193a0 <xQueueReceiveFromISR>:
{
 80193a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80193a4:	b1b0      	cbz	r0, 80193d4 <xQueueReceiveFromISR+0x34>
 80193a6:	460d      	mov	r5, r1
 80193a8:	4690      	mov	r8, r2
 80193aa:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80193ac:	b1d9      	cbz	r1, 80193e6 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80193ae:	f001 fa47 	bl	801a840 <vPortValidateInterruptPriority>
	__asm volatile
 80193b2:	f3ef 8711 	mrs	r7, BASEPRI
 80193b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193ba:	f383 8811 	msr	BASEPRI, r3
 80193be:	f3bf 8f6f 	isb	sy
 80193c2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80193c6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80193c8:	b9ce      	cbnz	r6, 80193fe <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80193ca:	2000      	movs	r0, #0
	__asm volatile
 80193cc:	f387 8811 	msr	BASEPRI, r7
}
 80193d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80193d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193d8:	f383 8811 	msr	BASEPRI, r3
 80193dc:	f3bf 8f6f 	isb	sy
 80193e0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80193e4:	e7fe      	b.n	80193e4 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80193e6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d0e0      	beq.n	80193ae <xQueueReceiveFromISR+0xe>
 80193ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193f0:	f383 8811 	msr	BASEPRI, r3
 80193f4:	f3bf 8f6f 	isb	sy
 80193f8:	f3bf 8f4f 	dsb	sy
 80193fc:	e7fe      	b.n	80193fc <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80193fe:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8019402:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019406:	4629      	mov	r1, r5
 8019408:	4620      	mov	r0, r4
 801940a:	f7ff fafd 	bl	8018a08 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801940e:	1e73      	subs	r3, r6, #1
 8019410:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8019412:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8019416:	d006      	beq.n	8019426 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019418:	f109 0301 	add.w	r3, r9, #1
 801941c:	b25b      	sxtb	r3, r3
 801941e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8019422:	2001      	movs	r0, #1
 8019424:	e7d2      	b.n	80193cc <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019426:	6923      	ldr	r3, [r4, #16]
 8019428:	b90b      	cbnz	r3, 801942e <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 801942a:	2001      	movs	r0, #1
 801942c:	e7ce      	b.n	80193cc <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801942e:	f104 0010 	add.w	r0, r4, #16
 8019432:	f000 fcab 	bl	8019d8c <xTaskRemoveFromEventList>
 8019436:	b130      	cbz	r0, 8019446 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8019438:	f1b8 0f00 	cmp.w	r8, #0
 801943c:	d005      	beq.n	801944a <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 801943e:	2001      	movs	r0, #1
 8019440:	f8c8 0000 	str.w	r0, [r8]
 8019444:	e7c2      	b.n	80193cc <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8019446:	2001      	movs	r0, #1
 8019448:	e7c0      	b.n	80193cc <xQueueReceiveFromISR+0x2c>
 801944a:	2001      	movs	r0, #1
 801944c:	e7be      	b.n	80193cc <xQueueReceiveFromISR+0x2c>

0801944e <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 801944e:	b140      	cbz	r0, 8019462 <uxQueueMessagesWaiting+0x14>
{
 8019450:	b510      	push	{r4, lr}
 8019452:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019454:	f001 f8ce 	bl	801a5f4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8019458:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 801945a:	f001 f8ed 	bl	801a638 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801945e:	4620      	mov	r0, r4
 8019460:	bd10      	pop	{r4, pc}
 8019462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019466:	f383 8811 	msr	BASEPRI, r3
 801946a:	f3bf 8f6f 	isb	sy
 801946e:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8019472:	e7fe      	b.n	8019472 <uxQueueMessagesWaiting+0x24>

08019474 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8019474:	b108      	cbz	r0, 801947a <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8019476:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8019478:	4770      	bx	lr
 801947a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801947e:	f383 8811 	msr	BASEPRI, r3
 8019482:	f3bf 8f6f 	isb	sy
 8019486:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801948a:	e7fe      	b.n	801948a <uxQueueMessagesWaitingFromISR+0x16>

0801948c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801948c:	2300      	movs	r3, #0
 801948e:	2b07      	cmp	r3, #7
 8019490:	d80c      	bhi.n	80194ac <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8019492:	4a07      	ldr	r2, [pc, #28]	@ (80194b0 <vQueueAddToRegistry+0x24>)
 8019494:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019498:	b10a      	cbz	r2, 801949e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801949a:	3301      	adds	r3, #1
 801949c:	e7f7      	b.n	801948e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801949e:	4a04      	ldr	r2, [pc, #16]	@ (80194b0 <vQueueAddToRegistry+0x24>)
 80194a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80194a4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80194a8:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80194aa:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80194ac:	4770      	bx	lr
 80194ae:	bf00      	nop
 80194b0:	2000366c 	.word	0x2000366c

080194b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80194b4:	b570      	push	{r4, r5, r6, lr}
 80194b6:	4604      	mov	r4, r0
 80194b8:	460d      	mov	r5, r1
 80194ba:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80194bc:	f001 f89a 	bl	801a5f4 <vPortEnterCritical>
 80194c0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80194c4:	b25b      	sxtb	r3, r3
 80194c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80194ca:	d00d      	beq.n	80194e8 <vQueueWaitForMessageRestricted+0x34>
 80194cc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80194d0:	b25b      	sxtb	r3, r3
 80194d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80194d6:	d00b      	beq.n	80194f0 <vQueueWaitForMessageRestricted+0x3c>
 80194d8:	f001 f8ae 	bl	801a638 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80194dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80194de:	b15b      	cbz	r3, 80194f8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80194e0:	4620      	mov	r0, r4
 80194e2:	f7ff faa3 	bl	8018a2c <prvUnlockQueue>
	}
 80194e6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80194e8:	2300      	movs	r3, #0
 80194ea:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80194ee:	e7ed      	b.n	80194cc <vQueueWaitForMessageRestricted+0x18>
 80194f0:	2300      	movs	r3, #0
 80194f2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80194f6:	e7ef      	b.n	80194d8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80194f8:	4632      	mov	r2, r6
 80194fa:	4629      	mov	r1, r5
 80194fc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019500:	f000 fc28 	bl	8019d54 <vTaskPlaceOnEventListRestricted>
 8019504:	e7ec      	b.n	80194e0 <vQueueWaitForMessageRestricted+0x2c>
	...

08019508 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019508:	4b08      	ldr	r3, [pc, #32]	@ (801952c <prvResetNextTaskUnblockTime+0x24>)
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	b923      	cbnz	r3, 801951a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019510:	4b07      	ldr	r3, [pc, #28]	@ (8019530 <prvResetNextTaskUnblockTime+0x28>)
 8019512:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019516:	601a      	str	r2, [r3, #0]
 8019518:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801951a:	4b04      	ldr	r3, [pc, #16]	@ (801952c <prvResetNextTaskUnblockTime+0x24>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	68db      	ldr	r3, [r3, #12]
 8019520:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019522:	685a      	ldr	r2, [r3, #4]
 8019524:	4b02      	ldr	r3, [pc, #8]	@ (8019530 <prvResetNextTaskUnblockTime+0x28>)
 8019526:	601a      	str	r2, [r3, #0]
	}
}
 8019528:	4770      	bx	lr
 801952a:	bf00      	nop
 801952c:	2000371c 	.word	0x2000371c
 8019530:	200036b4 	.word	0x200036b4

08019534 <prvInitialiseNewTask>:
{
 8019534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019538:	4680      	mov	r8, r0
 801953a:	460d      	mov	r5, r1
 801953c:	4617      	mov	r7, r2
 801953e:	4699      	mov	r9, r3
 8019540:	9e08      	ldr	r6, [sp, #32]
 8019542:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8019546:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019548:	0092      	lsls	r2, r2, #2
 801954a:	21a5      	movs	r1, #165	@ 0xa5
 801954c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801954e:	f013 fa3f 	bl	802c9d0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019552:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019554:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8019558:	3a01      	subs	r2, #1
 801955a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801955e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8019562:	2d00      	cmp	r5, #0
 8019564:	d061      	beq.n	801962a <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019566:	f04f 0c00 	mov.w	ip, #0
 801956a:	f1bc 0f0f 	cmp.w	ip, #15
 801956e:	d809      	bhi.n	8019584 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019570:	f815 300c 	ldrb.w	r3, [r5, ip]
 8019574:	eb04 020c 	add.w	r2, r4, ip
 8019578:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 801957c:	b113      	cbz	r3, 8019584 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801957e:	f10c 0c01 	add.w	ip, ip, #1
 8019582:	e7f2      	b.n	801956a <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019584:	2300      	movs	r3, #0
 8019586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801958a:	2e37      	cmp	r6, #55	@ 0x37
 801958c:	d900      	bls.n	8019590 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801958e:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8019590:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8019592:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019594:	2500      	movs	r5, #0
 8019596:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019598:	1d20      	adds	r0, r4, #4
 801959a:	f7ff f99c 	bl	80188d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801959e:	f104 0018 	add.w	r0, r4, #24
 80195a2:	f7ff f998 	bl	80188d6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80195a6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80195a8:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 80195ac:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80195ae:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80195b0:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80195b4:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80195b8:	f44f 7290 	mov.w	r2, #288	@ 0x120
 80195bc:	4629      	mov	r1, r5
 80195be:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80195c2:	f013 fa05 	bl	802c9d0 <memset>
 80195c6:	4b1b      	ldr	r3, [pc, #108]	@ (8019634 <prvInitialiseNewTask+0x100>)
 80195c8:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80195ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80195ce:	6622      	str	r2, [r4, #96]	@ 0x60
 80195d0:	33d0      	adds	r3, #208	@ 0xd0
 80195d2:	6663      	str	r3, [r4, #100]	@ 0x64
 80195d4:	2201      	movs	r2, #1
 80195d6:	2300      	movs	r3, #0
 80195d8:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 80195dc:	f243 330e 	movw	r3, #13070	@ 0x330e
 80195e0:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 80195e4:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 80195e8:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 80195ec:	f241 2334 	movw	r3, #4660	@ 0x1234
 80195f0:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 80195f4:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 80195f8:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 80195fc:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 8019600:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8019604:	2305      	movs	r3, #5
 8019606:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 801960a:	230b      	movs	r3, #11
 801960c:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019610:	464a      	mov	r2, r9
 8019612:	4641      	mov	r1, r8
 8019614:	4638      	mov	r0, r7
 8019616:	f000 ffc3 	bl	801a5a0 <pxPortInitialiseStack>
 801961a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801961c:	f1ba 0f00 	cmp.w	sl, #0
 8019620:	d001      	beq.n	8019626 <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019622:	f8ca 4000 	str.w	r4, [sl]
}
 8019626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801962a:	2300      	movs	r3, #0
 801962c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8019630:	e7ab      	b.n	801958a <prvInitialiseNewTask+0x56>
 8019632:	bf00      	nop
 8019634:	20019ee4 	.word	0x20019ee4

08019638 <prvInitialiseTaskLists>:
{
 8019638:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801963a:	2400      	movs	r4, #0
 801963c:	e007      	b.n	801964e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801963e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8019642:	0093      	lsls	r3, r2, #2
 8019644:	480e      	ldr	r0, [pc, #56]	@ (8019680 <prvInitialiseTaskLists+0x48>)
 8019646:	4418      	add	r0, r3
 8019648:	f7ff f93a 	bl	80188c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801964c:	3401      	adds	r4, #1
 801964e:	2c37      	cmp	r4, #55	@ 0x37
 8019650:	d9f5      	bls.n	801963e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8019652:	4d0c      	ldr	r5, [pc, #48]	@ (8019684 <prvInitialiseTaskLists+0x4c>)
 8019654:	4628      	mov	r0, r5
 8019656:	f7ff f933 	bl	80188c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801965a:	4c0b      	ldr	r4, [pc, #44]	@ (8019688 <prvInitialiseTaskLists+0x50>)
 801965c:	4620      	mov	r0, r4
 801965e:	f7ff f92f 	bl	80188c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019662:	480a      	ldr	r0, [pc, #40]	@ (801968c <prvInitialiseTaskLists+0x54>)
 8019664:	f7ff f92c 	bl	80188c0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8019668:	4809      	ldr	r0, [pc, #36]	@ (8019690 <prvInitialiseTaskLists+0x58>)
 801966a:	f7ff f929 	bl	80188c0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 801966e:	4809      	ldr	r0, [pc, #36]	@ (8019694 <prvInitialiseTaskLists+0x5c>)
 8019670:	f7ff f926 	bl	80188c0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8019674:	4b08      	ldr	r3, [pc, #32]	@ (8019698 <prvInitialiseTaskLists+0x60>)
 8019676:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019678:	4b08      	ldr	r3, [pc, #32]	@ (801969c <prvInitialiseTaskLists+0x64>)
 801967a:	601c      	str	r4, [r3, #0]
}
 801967c:	bd38      	pop	{r3, r4, r5, pc}
 801967e:	bf00      	nop
 8019680:	20003748 	.word	0x20003748
 8019684:	20003734 	.word	0x20003734
 8019688:	20003720 	.word	0x20003720
 801968c:	20003704 	.word	0x20003704
 8019690:	200036f0 	.word	0x200036f0
 8019694:	200036d8 	.word	0x200036d8
 8019698:	2000371c 	.word	0x2000371c
 801969c:	20003718 	.word	0x20003718

080196a0 <prvAddNewTaskToReadyList>:
{
 80196a0:	b510      	push	{r4, lr}
 80196a2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80196a4:	f000 ffa6 	bl	801a5f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80196a8:	4a22      	ldr	r2, [pc, #136]	@ (8019734 <prvAddNewTaskToReadyList+0x94>)
 80196aa:	6813      	ldr	r3, [r2, #0]
 80196ac:	3301      	adds	r3, #1
 80196ae:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80196b0:	4b21      	ldr	r3, [pc, #132]	@ (8019738 <prvAddNewTaskToReadyList+0x98>)
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	b15b      	cbz	r3, 80196ce <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80196b6:	4b21      	ldr	r3, [pc, #132]	@ (801973c <prvAddNewTaskToReadyList+0x9c>)
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	b96b      	cbnz	r3, 80196d8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80196bc:	4b1e      	ldr	r3, [pc, #120]	@ (8019738 <prvAddNewTaskToReadyList+0x98>)
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80196c2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80196c4:	429a      	cmp	r2, r3
 80196c6:	d807      	bhi.n	80196d8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80196c8:	4b1b      	ldr	r3, [pc, #108]	@ (8019738 <prvAddNewTaskToReadyList+0x98>)
 80196ca:	601c      	str	r4, [r3, #0]
 80196cc:	e004      	b.n	80196d8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80196ce:	4b1a      	ldr	r3, [pc, #104]	@ (8019738 <prvAddNewTaskToReadyList+0x98>)
 80196d0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80196d2:	6813      	ldr	r3, [r2, #0]
 80196d4:	2b01      	cmp	r3, #1
 80196d6:	d029      	beq.n	801972c <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 80196d8:	4a19      	ldr	r2, [pc, #100]	@ (8019740 <prvAddNewTaskToReadyList+0xa0>)
 80196da:	6813      	ldr	r3, [r2, #0]
 80196dc:	3301      	adds	r3, #1
 80196de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80196e0:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80196e2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80196e4:	4b17      	ldr	r3, [pc, #92]	@ (8019744 <prvAddNewTaskToReadyList+0xa4>)
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	4298      	cmp	r0, r3
 80196ea:	d901      	bls.n	80196f0 <prvAddNewTaskToReadyList+0x50>
 80196ec:	4b15      	ldr	r3, [pc, #84]	@ (8019744 <prvAddNewTaskToReadyList+0xa4>)
 80196ee:	6018      	str	r0, [r3, #0]
 80196f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80196f4:	1d21      	adds	r1, r4, #4
 80196f6:	4b14      	ldr	r3, [pc, #80]	@ (8019748 <prvAddNewTaskToReadyList+0xa8>)
 80196f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80196fc:	f7ff f8ee 	bl	80188dc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8019700:	f000 ff9a 	bl	801a638 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8019704:	4b0d      	ldr	r3, [pc, #52]	@ (801973c <prvAddNewTaskToReadyList+0x9c>)
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	b17b      	cbz	r3, 801972a <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801970a:	4b0b      	ldr	r3, [pc, #44]	@ (8019738 <prvAddNewTaskToReadyList+0x98>)
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019710:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019712:	429a      	cmp	r2, r3
 8019714:	d209      	bcs.n	801972a <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8019716:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801971a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801971e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019722:	f3bf 8f4f 	dsb	sy
 8019726:	f3bf 8f6f 	isb	sy
}
 801972a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 801972c:	f7ff ff84 	bl	8019638 <prvInitialiseTaskLists>
 8019730:	e7d2      	b.n	80196d8 <prvAddNewTaskToReadyList+0x38>
 8019732:	bf00      	nop
 8019734:	200036d4 	.word	0x200036d4
 8019738:	20003ba8 	.word	0x20003ba8
 801973c:	200036c8 	.word	0x200036c8
 8019740:	200036b8 	.word	0x200036b8
 8019744:	200036cc 	.word	0x200036cc
 8019748:	20003748 	.word	0x20003748

0801974c <prvDeleteTCB>:
	{
 801974c:	b510      	push	{r4, lr}
 801974e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8019750:	3058      	adds	r0, #88	@ 0x58
 8019752:	f014 fadf 	bl	802dd14 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019756:	f894 317d 	ldrb.w	r3, [r4, #381]	@ 0x17d
 801975a:	b163      	cbz	r3, 8019776 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801975c:	2b01      	cmp	r3, #1
 801975e:	d011      	beq.n	8019784 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019760:	2b02      	cmp	r3, #2
 8019762:	d00e      	beq.n	8019782 <prvDeleteTCB+0x36>
 8019764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019768:	f383 8811 	msr	BASEPRI, r3
 801976c:	f3bf 8f6f 	isb	sy
 8019770:	f3bf 8f4f 	dsb	sy
 8019774:	e7fe      	b.n	8019774 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8019776:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019778:	f001 f978 	bl	801aa6c <vPortFree>
				vPortFree( pxTCB );
 801977c:	4620      	mov	r0, r4
 801977e:	f001 f975 	bl	801aa6c <vPortFree>
	}
 8019782:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8019784:	4620      	mov	r0, r4
 8019786:	f001 f971 	bl	801aa6c <vPortFree>
 801978a:	e7fa      	b.n	8019782 <prvDeleteTCB+0x36>

0801978c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801978c:	4b0f      	ldr	r3, [pc, #60]	@ (80197cc <prvCheckTasksWaitingTermination+0x40>)
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	b1d3      	cbz	r3, 80197c8 <prvCheckTasksWaitingTermination+0x3c>
{
 8019792:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8019794:	f000 ff2e 	bl	801a5f4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019798:	4b0d      	ldr	r3, [pc, #52]	@ (80197d0 <prvCheckTasksWaitingTermination+0x44>)
 801979a:	68db      	ldr	r3, [r3, #12]
 801979c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801979e:	1d20      	adds	r0, r4, #4
 80197a0:	f7ff f8c0 	bl	8018924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80197a4:	4a0b      	ldr	r2, [pc, #44]	@ (80197d4 <prvCheckTasksWaitingTermination+0x48>)
 80197a6:	6813      	ldr	r3, [r2, #0]
 80197a8:	3b01      	subs	r3, #1
 80197aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80197ac:	4a07      	ldr	r2, [pc, #28]	@ (80197cc <prvCheckTasksWaitingTermination+0x40>)
 80197ae:	6813      	ldr	r3, [r2, #0]
 80197b0:	3b01      	subs	r3, #1
 80197b2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80197b4:	f000 ff40 	bl	801a638 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80197b8:	4620      	mov	r0, r4
 80197ba:	f7ff ffc7 	bl	801974c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80197be:	4b03      	ldr	r3, [pc, #12]	@ (80197cc <prvCheckTasksWaitingTermination+0x40>)
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d1e6      	bne.n	8019794 <prvCheckTasksWaitingTermination+0x8>
}
 80197c6:	bd10      	pop	{r4, pc}
 80197c8:	4770      	bx	lr
 80197ca:	bf00      	nop
 80197cc:	200036ec 	.word	0x200036ec
 80197d0:	200036f0 	.word	0x200036f0
 80197d4:	200036d4 	.word	0x200036d4

080197d8 <prvIdleTask>:
{
 80197d8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80197da:	f7ff ffd7 	bl	801978c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80197de:	4b07      	ldr	r3, [pc, #28]	@ (80197fc <prvIdleTask+0x24>)
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	2b01      	cmp	r3, #1
 80197e4:	d9f9      	bls.n	80197da <prvIdleTask+0x2>
				taskYIELD();
 80197e6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80197ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80197ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80197f2:	f3bf 8f4f 	dsb	sy
 80197f6:	f3bf 8f6f 	isb	sy
 80197fa:	e7ee      	b.n	80197da <prvIdleTask+0x2>
 80197fc:	20003748 	.word	0x20003748

08019800 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019800:	b570      	push	{r4, r5, r6, lr}
 8019802:	4604      	mov	r4, r0
 8019804:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019806:	4b17      	ldr	r3, [pc, #92]	@ (8019864 <prvAddCurrentTaskToDelayedList+0x64>)
 8019808:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801980a:	4b17      	ldr	r3, [pc, #92]	@ (8019868 <prvAddCurrentTaskToDelayedList+0x68>)
 801980c:	6818      	ldr	r0, [r3, #0]
 801980e:	3004      	adds	r0, #4
 8019810:	f7ff f888 	bl	8018924 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019814:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8019818:	d00d      	beq.n	8019836 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 801981a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801981c:	4b12      	ldr	r3, [pc, #72]	@ (8019868 <prvAddCurrentTaskToDelayedList+0x68>)
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8019822:	42a6      	cmp	r6, r4
 8019824:	d910      	bls.n	8019848 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019826:	4b11      	ldr	r3, [pc, #68]	@ (801986c <prvAddCurrentTaskToDelayedList+0x6c>)
 8019828:	6818      	ldr	r0, [r3, #0]
 801982a:	4b0f      	ldr	r3, [pc, #60]	@ (8019868 <prvAddCurrentTaskToDelayedList+0x68>)
 801982c:	6819      	ldr	r1, [r3, #0]
 801982e:	3104      	adds	r1, #4
 8019830:	f7ff f85f 	bl	80188f2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019834:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019836:	2d00      	cmp	r5, #0
 8019838:	d0ef      	beq.n	801981a <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801983a:	4b0b      	ldr	r3, [pc, #44]	@ (8019868 <prvAddCurrentTaskToDelayedList+0x68>)
 801983c:	6819      	ldr	r1, [r3, #0]
 801983e:	3104      	adds	r1, #4
 8019840:	480b      	ldr	r0, [pc, #44]	@ (8019870 <prvAddCurrentTaskToDelayedList+0x70>)
 8019842:	f7ff f84b 	bl	80188dc <vListInsertEnd>
 8019846:	e7f5      	b.n	8019834 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019848:	4b0a      	ldr	r3, [pc, #40]	@ (8019874 <prvAddCurrentTaskToDelayedList+0x74>)
 801984a:	6818      	ldr	r0, [r3, #0]
 801984c:	4b06      	ldr	r3, [pc, #24]	@ (8019868 <prvAddCurrentTaskToDelayedList+0x68>)
 801984e:	6819      	ldr	r1, [r3, #0]
 8019850:	3104      	adds	r1, #4
 8019852:	f7ff f84e 	bl	80188f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019856:	4b08      	ldr	r3, [pc, #32]	@ (8019878 <prvAddCurrentTaskToDelayedList+0x78>)
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	42a3      	cmp	r3, r4
 801985c:	d9ea      	bls.n	8019834 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 801985e:	4b06      	ldr	r3, [pc, #24]	@ (8019878 <prvAddCurrentTaskToDelayedList+0x78>)
 8019860:	601c      	str	r4, [r3, #0]
}
 8019862:	e7e7      	b.n	8019834 <prvAddCurrentTaskToDelayedList+0x34>
 8019864:	200036d0 	.word	0x200036d0
 8019868:	20003ba8 	.word	0x20003ba8
 801986c:	20003718 	.word	0x20003718
 8019870:	200036d8 	.word	0x200036d8
 8019874:	2000371c 	.word	0x2000371c
 8019878:	200036b4 	.word	0x200036b4

0801987c <xTaskCreateStatic>:
	{
 801987c:	b530      	push	{r4, r5, lr}
 801987e:	b087      	sub	sp, #28
 8019880:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8019882:	b18c      	cbz	r4, 80198a8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8019884:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019886:	b1c5      	cbz	r5, 80198ba <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8019888:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 801988c:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801988e:	9d04      	ldr	r5, [sp, #16]
 8019890:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 8019894:	d01a      	beq.n	80198cc <xTaskCreateStatic+0x50>
 8019896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801989a:	f383 8811 	msr	BASEPRI, r3
 801989e:	f3bf 8f6f 	isb	sy
 80198a2:	f3bf 8f4f 	dsb	sy
 80198a6:	e7fe      	b.n	80198a6 <xTaskCreateStatic+0x2a>
 80198a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198ac:	f383 8811 	msr	BASEPRI, r3
 80198b0:	f3bf 8f6f 	isb	sy
 80198b4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80198b8:	e7fe      	b.n	80198b8 <xTaskCreateStatic+0x3c>
 80198ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198be:	f383 8811 	msr	BASEPRI, r3
 80198c2:	f3bf 8f6f 	isb	sy
 80198c6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80198ca:	e7fe      	b.n	80198ca <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80198cc:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80198ce:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80198d0:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80198d2:	2402      	movs	r4, #2
 80198d4:	f885 417d 	strb.w	r4, [r5, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80198d8:	2400      	movs	r4, #0
 80198da:	9403      	str	r4, [sp, #12]
 80198dc:	9502      	str	r5, [sp, #8]
 80198de:	ac05      	add	r4, sp, #20
 80198e0:	9401      	str	r4, [sp, #4]
 80198e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80198e4:	9400      	str	r4, [sp, #0]
 80198e6:	f7ff fe25 	bl	8019534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80198ea:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80198ec:	f7ff fed8 	bl	80196a0 <prvAddNewTaskToReadyList>
	}
 80198f0:	9805      	ldr	r0, [sp, #20]
 80198f2:	b007      	add	sp, #28
 80198f4:	bd30      	pop	{r4, r5, pc}

080198f6 <xTaskCreate>:
	{
 80198f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80198fa:	b085      	sub	sp, #20
 80198fc:	4607      	mov	r7, r0
 80198fe:	4688      	mov	r8, r1
 8019900:	4614      	mov	r4, r2
 8019902:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019904:	0090      	lsls	r0, r2, #2
 8019906:	f001 f82f 	bl	801a968 <pvPortMalloc>
			if( pxStack != NULL )
 801990a:	b310      	cbz	r0, 8019952 <xTaskCreate+0x5c>
 801990c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801990e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8019912:	f001 f829 	bl	801a968 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8019916:	4605      	mov	r5, r0
 8019918:	b1a8      	cbz	r0, 8019946 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 801991a:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801991e:	2300      	movs	r3, #0
 8019920:	f880 317d 	strb.w	r3, [r0, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019924:	9303      	str	r3, [sp, #12]
 8019926:	9002      	str	r0, [sp, #8]
 8019928:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801992a:	9301      	str	r3, [sp, #4]
 801992c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801992e:	9300      	str	r3, [sp, #0]
 8019930:	4633      	mov	r3, r6
 8019932:	4622      	mov	r2, r4
 8019934:	4641      	mov	r1, r8
 8019936:	4638      	mov	r0, r7
 8019938:	f7ff fdfc 	bl	8019534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801993c:	4628      	mov	r0, r5
 801993e:	f7ff feaf 	bl	80196a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019942:	2001      	movs	r0, #1
 8019944:	e007      	b.n	8019956 <xTaskCreate+0x60>
					vPortFree( pxStack );
 8019946:	4648      	mov	r0, r9
 8019948:	f001 f890 	bl	801aa6c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801994c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019950:	e001      	b.n	8019956 <xTaskCreate+0x60>
 8019952:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 8019956:	b005      	add	sp, #20
 8019958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801995c <vTaskStartScheduler>:
{
 801995c:	b510      	push	{r4, lr}
 801995e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019960:	2400      	movs	r4, #0
 8019962:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019964:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019966:	aa07      	add	r2, sp, #28
 8019968:	a906      	add	r1, sp, #24
 801996a:	a805      	add	r0, sp, #20
 801996c:	f7fe ff90 	bl	8018890 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019970:	9b05      	ldr	r3, [sp, #20]
 8019972:	9302      	str	r3, [sp, #8]
 8019974:	9b06      	ldr	r3, [sp, #24]
 8019976:	9301      	str	r3, [sp, #4]
 8019978:	9400      	str	r4, [sp, #0]
 801997a:	4623      	mov	r3, r4
 801997c:	9a07      	ldr	r2, [sp, #28]
 801997e:	491a      	ldr	r1, [pc, #104]	@ (80199e8 <vTaskStartScheduler+0x8c>)
 8019980:	481a      	ldr	r0, [pc, #104]	@ (80199ec <vTaskStartScheduler+0x90>)
 8019982:	f7ff ff7b 	bl	801987c <xTaskCreateStatic>
 8019986:	4b1a      	ldr	r3, [pc, #104]	@ (80199f0 <vTaskStartScheduler+0x94>)
 8019988:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 801998a:	b1e8      	cbz	r0, 80199c8 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 801998c:	f000 fc0c 	bl	801a1a8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8019990:	2801      	cmp	r0, #1
 8019992:	d11a      	bne.n	80199ca <vTaskStartScheduler+0x6e>
 8019994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019998:	f383 8811 	msr	BASEPRI, r3
 801999c:	f3bf 8f6f 	isb	sy
 80199a0:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80199a4:	4b13      	ldr	r3, [pc, #76]	@ (80199f4 <vTaskStartScheduler+0x98>)
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	3358      	adds	r3, #88	@ 0x58
 80199aa:	4a13      	ldr	r2, [pc, #76]	@ (80199f8 <vTaskStartScheduler+0x9c>)
 80199ac:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80199ae:	4b13      	ldr	r3, [pc, #76]	@ (80199fc <vTaskStartScheduler+0xa0>)
 80199b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80199b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80199b6:	4b12      	ldr	r3, [pc, #72]	@ (8019a00 <vTaskStartScheduler+0xa4>)
 80199b8:	2201      	movs	r2, #1
 80199ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80199bc:	4b11      	ldr	r3, [pc, #68]	@ (8019a04 <vTaskStartScheduler+0xa8>)
 80199be:	2200      	movs	r2, #0
 80199c0:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80199c2:	f000 feb1 	bl	801a728 <xPortStartScheduler>
 80199c6:	e003      	b.n	80199d0 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 80199c8:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80199ca:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80199ce:	d001      	beq.n	80199d4 <vTaskStartScheduler+0x78>
}
 80199d0:	b008      	add	sp, #32
 80199d2:	bd10      	pop	{r4, pc}
 80199d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199d8:	f383 8811 	msr	BASEPRI, r3
 80199dc:	f3bf 8f6f 	isb	sy
 80199e0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80199e4:	e7fe      	b.n	80199e4 <vTaskStartScheduler+0x88>
 80199e6:	bf00      	nop
 80199e8:	080390a0 	.word	0x080390a0
 80199ec:	080197d9 	.word	0x080197d9
 80199f0:	200036b0 	.word	0x200036b0
 80199f4:	20003ba8 	.word	0x20003ba8
 80199f8:	200002d8 	.word	0x200002d8
 80199fc:	200036b4 	.word	0x200036b4
 8019a00:	200036c8 	.word	0x200036c8
 8019a04:	200036d0 	.word	0x200036d0

08019a08 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8019a08:	4a02      	ldr	r2, [pc, #8]	@ (8019a14 <vTaskSuspendAll+0xc>)
 8019a0a:	6813      	ldr	r3, [r2, #0]
 8019a0c:	3301      	adds	r3, #1
 8019a0e:	6013      	str	r3, [r2, #0]
}
 8019a10:	4770      	bx	lr
 8019a12:	bf00      	nop
 8019a14:	200036ac 	.word	0x200036ac

08019a18 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8019a18:	4b01      	ldr	r3, [pc, #4]	@ (8019a20 <xTaskGetTickCount+0x8>)
 8019a1a:	6818      	ldr	r0, [r3, #0]
}
 8019a1c:	4770      	bx	lr
 8019a1e:	bf00      	nop
 8019a20:	200036d0 	.word	0x200036d0

08019a24 <xTaskIncrementTick>:
{
 8019a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019a26:	4b3a      	ldr	r3, [pc, #232]	@ (8019b10 <xTaskIncrementTick+0xec>)
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d169      	bne.n	8019b02 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019a2e:	4b39      	ldr	r3, [pc, #228]	@ (8019b14 <xTaskIncrementTick+0xf0>)
 8019a30:	681d      	ldr	r5, [r3, #0]
 8019a32:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8019a34:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019a36:	b9c5      	cbnz	r5, 8019a6a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8019a38:	4b37      	ldr	r3, [pc, #220]	@ (8019b18 <xTaskIncrementTick+0xf4>)
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	b143      	cbz	r3, 8019a52 <xTaskIncrementTick+0x2e>
 8019a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a44:	f383 8811 	msr	BASEPRI, r3
 8019a48:	f3bf 8f6f 	isb	sy
 8019a4c:	f3bf 8f4f 	dsb	sy
 8019a50:	e7fe      	b.n	8019a50 <xTaskIncrementTick+0x2c>
 8019a52:	4a31      	ldr	r2, [pc, #196]	@ (8019b18 <xTaskIncrementTick+0xf4>)
 8019a54:	6811      	ldr	r1, [r2, #0]
 8019a56:	4b31      	ldr	r3, [pc, #196]	@ (8019b1c <xTaskIncrementTick+0xf8>)
 8019a58:	6818      	ldr	r0, [r3, #0]
 8019a5a:	6010      	str	r0, [r2, #0]
 8019a5c:	6019      	str	r1, [r3, #0]
 8019a5e:	4a30      	ldr	r2, [pc, #192]	@ (8019b20 <xTaskIncrementTick+0xfc>)
 8019a60:	6813      	ldr	r3, [r2, #0]
 8019a62:	3301      	adds	r3, #1
 8019a64:	6013      	str	r3, [r2, #0]
 8019a66:	f7ff fd4f 	bl	8019508 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8019b24 <xTaskIncrementTick+0x100>)
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	42ab      	cmp	r3, r5
 8019a70:	d93d      	bls.n	8019aee <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8019a72:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019a74:	4b2c      	ldr	r3, [pc, #176]	@ (8019b28 <xTaskIncrementTick+0x104>)
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019a7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019a7e:	009a      	lsls	r2, r3, #2
 8019a80:	4b2a      	ldr	r3, [pc, #168]	@ (8019b2c <xTaskIncrementTick+0x108>)
 8019a82:	589b      	ldr	r3, [r3, r2]
 8019a84:	2b01      	cmp	r3, #1
 8019a86:	d900      	bls.n	8019a8a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8019a88:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8019a8a:	4b29      	ldr	r3, [pc, #164]	@ (8019b30 <xTaskIncrementTick+0x10c>)
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d03c      	beq.n	8019b0c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8019a92:	2701      	movs	r7, #1
	return xSwitchRequired;
 8019a94:	e03a      	b.n	8019b0c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8019a96:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019a98:	4b1f      	ldr	r3, [pc, #124]	@ (8019b18 <xTaskIncrementTick+0xf4>)
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	b343      	cbz	r3, 8019af2 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8019b18 <xTaskIncrementTick+0xf4>)
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	68db      	ldr	r3, [r3, #12]
 8019aa6:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019aa8:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8019aaa:	429d      	cmp	r5, r3
 8019aac:	d326      	bcc.n	8019afc <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019aae:	1d26      	adds	r6, r4, #4
 8019ab0:	4630      	mov	r0, r6
 8019ab2:	f7fe ff37 	bl	8018924 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019ab6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019ab8:	b11b      	cbz	r3, 8019ac2 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019aba:	f104 0018 	add.w	r0, r4, #24
 8019abe:	f7fe ff31 	bl	8018924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019ac2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8019b34 <xTaskIncrementTick+0x110>)
 8019ac6:	6812      	ldr	r2, [r2, #0]
 8019ac8:	4293      	cmp	r3, r2
 8019aca:	d901      	bls.n	8019ad0 <xTaskIncrementTick+0xac>
 8019acc:	4a19      	ldr	r2, [pc, #100]	@ (8019b34 <xTaskIncrementTick+0x110>)
 8019ace:	6013      	str	r3, [r2, #0]
 8019ad0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019ad4:	009a      	lsls	r2, r3, #2
 8019ad6:	4631      	mov	r1, r6
 8019ad8:	4814      	ldr	r0, [pc, #80]	@ (8019b2c <xTaskIncrementTick+0x108>)
 8019ada:	4410      	add	r0, r2
 8019adc:	f7fe fefe 	bl	80188dc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019ae0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019ae2:	4b11      	ldr	r3, [pc, #68]	@ (8019b28 <xTaskIncrementTick+0x104>)
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019ae8:	429a      	cmp	r2, r3
 8019aea:	d2d4      	bcs.n	8019a96 <xTaskIncrementTick+0x72>
 8019aec:	e7d4      	b.n	8019a98 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8019aee:	2700      	movs	r7, #0
 8019af0:	e7d2      	b.n	8019a98 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019af2:	4b0c      	ldr	r3, [pc, #48]	@ (8019b24 <xTaskIncrementTick+0x100>)
 8019af4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019af8:	601a      	str	r2, [r3, #0]
					break;
 8019afa:	e7bb      	b.n	8019a74 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8019afc:	4a09      	ldr	r2, [pc, #36]	@ (8019b24 <xTaskIncrementTick+0x100>)
 8019afe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019b00:	e7b8      	b.n	8019a74 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8019b02:	4a0d      	ldr	r2, [pc, #52]	@ (8019b38 <xTaskIncrementTick+0x114>)
 8019b04:	6813      	ldr	r3, [r2, #0]
 8019b06:	3301      	adds	r3, #1
 8019b08:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8019b0a:	2700      	movs	r7, #0
}
 8019b0c:	4638      	mov	r0, r7
 8019b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b10:	200036ac 	.word	0x200036ac
 8019b14:	200036d0 	.word	0x200036d0
 8019b18:	2000371c 	.word	0x2000371c
 8019b1c:	20003718 	.word	0x20003718
 8019b20:	200036bc 	.word	0x200036bc
 8019b24:	200036b4 	.word	0x200036b4
 8019b28:	20003ba8 	.word	0x20003ba8
 8019b2c:	20003748 	.word	0x20003748
 8019b30:	200036c0 	.word	0x200036c0
 8019b34:	200036cc 	.word	0x200036cc
 8019b38:	200036c4 	.word	0x200036c4

08019b3c <xTaskResumeAll>:
{
 8019b3c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8019b3e:	4b35      	ldr	r3, [pc, #212]	@ (8019c14 <xTaskResumeAll+0xd8>)
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	b943      	cbnz	r3, 8019b56 <xTaskResumeAll+0x1a>
 8019b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b48:	f383 8811 	msr	BASEPRI, r3
 8019b4c:	f3bf 8f6f 	isb	sy
 8019b50:	f3bf 8f4f 	dsb	sy
 8019b54:	e7fe      	b.n	8019b54 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8019b56:	f000 fd4d 	bl	801a5f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8019b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8019c14 <xTaskResumeAll+0xd8>)
 8019b5c:	681a      	ldr	r2, [r3, #0]
 8019b5e:	3a01      	subs	r2, #1
 8019b60:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d14f      	bne.n	8019c08 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019b68:	4b2b      	ldr	r3, [pc, #172]	@ (8019c18 <xTaskResumeAll+0xdc>)
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	b90b      	cbnz	r3, 8019b72 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8019b6e:	2400      	movs	r4, #0
 8019b70:	e04b      	b.n	8019c0a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8019b72:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019b74:	4b29      	ldr	r3, [pc, #164]	@ (8019c1c <xTaskResumeAll+0xe0>)
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	b31b      	cbz	r3, 8019bc2 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019b7a:	4b28      	ldr	r3, [pc, #160]	@ (8019c1c <xTaskResumeAll+0xe0>)
 8019b7c:	68db      	ldr	r3, [r3, #12]
 8019b7e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019b80:	f104 0018 	add.w	r0, r4, #24
 8019b84:	f7fe fece 	bl	8018924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019b88:	1d25      	adds	r5, r4, #4
 8019b8a:	4628      	mov	r0, r5
 8019b8c:	f7fe feca 	bl	8018924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019b90:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019b92:	4b23      	ldr	r3, [pc, #140]	@ (8019c20 <xTaskResumeAll+0xe4>)
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	4298      	cmp	r0, r3
 8019b98:	d901      	bls.n	8019b9e <xTaskResumeAll+0x62>
 8019b9a:	4b21      	ldr	r3, [pc, #132]	@ (8019c20 <xTaskResumeAll+0xe4>)
 8019b9c:	6018      	str	r0, [r3, #0]
 8019b9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019ba2:	4629      	mov	r1, r5
 8019ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8019c24 <xTaskResumeAll+0xe8>)
 8019ba6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019baa:	f7fe fe97 	bl	80188dc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019bae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8019c28 <xTaskResumeAll+0xec>)
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019bb6:	429a      	cmp	r2, r3
 8019bb8:	d3dc      	bcc.n	8019b74 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8019bba:	4b1c      	ldr	r3, [pc, #112]	@ (8019c2c <xTaskResumeAll+0xf0>)
 8019bbc:	2201      	movs	r2, #1
 8019bbe:	601a      	str	r2, [r3, #0]
 8019bc0:	e7d8      	b.n	8019b74 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8019bc2:	b10c      	cbz	r4, 8019bc8 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8019bc4:	f7ff fca0 	bl	8019508 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8019bc8:	4b19      	ldr	r3, [pc, #100]	@ (8019c30 <xTaskResumeAll+0xf4>)
 8019bca:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8019bcc:	b984      	cbnz	r4, 8019bf0 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8019bce:	4b17      	ldr	r3, [pc, #92]	@ (8019c2c <xTaskResumeAll+0xf0>)
 8019bd0:	681c      	ldr	r4, [r3, #0]
 8019bd2:	b1d4      	cbz	r4, 8019c0a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8019bd4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019bd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019bdc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019be0:	f3bf 8f4f 	dsb	sy
 8019be4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8019be8:	2401      	movs	r4, #1
 8019bea:	e00e      	b.n	8019c0a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019bec:	3c01      	subs	r4, #1
 8019bee:	d007      	beq.n	8019c00 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8019bf0:	f7ff ff18 	bl	8019a24 <xTaskIncrementTick>
 8019bf4:	2800      	cmp	r0, #0
 8019bf6:	d0f9      	beq.n	8019bec <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8019bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8019c2c <xTaskResumeAll+0xf0>)
 8019bfa:	2201      	movs	r2, #1
 8019bfc:	601a      	str	r2, [r3, #0]
 8019bfe:	e7f5      	b.n	8019bec <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8019c00:	4b0b      	ldr	r3, [pc, #44]	@ (8019c30 <xTaskResumeAll+0xf4>)
 8019c02:	2200      	movs	r2, #0
 8019c04:	601a      	str	r2, [r3, #0]
 8019c06:	e7e2      	b.n	8019bce <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8019c08:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019c0a:	f000 fd15 	bl	801a638 <vPortExitCritical>
}
 8019c0e:	4620      	mov	r0, r4
 8019c10:	bd38      	pop	{r3, r4, r5, pc}
 8019c12:	bf00      	nop
 8019c14:	200036ac 	.word	0x200036ac
 8019c18:	200036d4 	.word	0x200036d4
 8019c1c:	20003704 	.word	0x20003704
 8019c20:	200036cc 	.word	0x200036cc
 8019c24:	20003748 	.word	0x20003748
 8019c28:	20003ba8 	.word	0x20003ba8
 8019c2c:	200036c0 	.word	0x200036c0
 8019c30:	200036c4 	.word	0x200036c4

08019c34 <vTaskDelay>:
	{
 8019c34:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019c36:	b1a8      	cbz	r0, 8019c64 <vTaskDelay+0x30>
 8019c38:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8019c3a:	4b10      	ldr	r3, [pc, #64]	@ (8019c7c <vTaskDelay+0x48>)
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	b143      	cbz	r3, 8019c52 <vTaskDelay+0x1e>
 8019c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c44:	f383 8811 	msr	BASEPRI, r3
 8019c48:	f3bf 8f6f 	isb	sy
 8019c4c:	f3bf 8f4f 	dsb	sy
 8019c50:	e7fe      	b.n	8019c50 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8019c52:	f7ff fed9 	bl	8019a08 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019c56:	2100      	movs	r1, #0
 8019c58:	4620      	mov	r0, r4
 8019c5a:	f7ff fdd1 	bl	8019800 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8019c5e:	f7ff ff6d 	bl	8019b3c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8019c62:	b948      	cbnz	r0, 8019c78 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8019c64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019c68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019c6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019c70:	f3bf 8f4f 	dsb	sy
 8019c74:	f3bf 8f6f 	isb	sy
	}
 8019c78:	bd10      	pop	{r4, pc}
 8019c7a:	bf00      	nop
 8019c7c:	200036ac 	.word	0x200036ac

08019c80 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019c80:	4b22      	ldr	r3, [pc, #136]	@ (8019d0c <vTaskSwitchContext+0x8c>)
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	b11b      	cbz	r3, 8019c8e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8019c86:	4b22      	ldr	r3, [pc, #136]	@ (8019d10 <vTaskSwitchContext+0x90>)
 8019c88:	2201      	movs	r2, #1
 8019c8a:	601a      	str	r2, [r3, #0]
 8019c8c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8019c8e:	4b20      	ldr	r3, [pc, #128]	@ (8019d10 <vTaskSwitchContext+0x90>)
 8019c90:	2200      	movs	r2, #0
 8019c92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019c94:	4b1f      	ldr	r3, [pc, #124]	@ (8019d14 <vTaskSwitchContext+0x94>)
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019c9c:	008a      	lsls	r2, r1, #2
 8019c9e:	491e      	ldr	r1, [pc, #120]	@ (8019d18 <vTaskSwitchContext+0x98>)
 8019ca0:	588a      	ldr	r2, [r1, r2]
 8019ca2:	b95a      	cbnz	r2, 8019cbc <vTaskSwitchContext+0x3c>
 8019ca4:	b10b      	cbz	r3, 8019caa <vTaskSwitchContext+0x2a>
 8019ca6:	3b01      	subs	r3, #1
 8019ca8:	e7f6      	b.n	8019c98 <vTaskSwitchContext+0x18>
 8019caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cae:	f383 8811 	msr	BASEPRI, r3
 8019cb2:	f3bf 8f6f 	isb	sy
 8019cb6:	f3bf 8f4f 	dsb	sy
 8019cba:	e7fe      	b.n	8019cba <vTaskSwitchContext+0x3a>
 8019cbc:	4608      	mov	r0, r1
 8019cbe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019cc2:	008a      	lsls	r2, r1, #2
 8019cc4:	4402      	add	r2, r0
 8019cc6:	6851      	ldr	r1, [r2, #4]
 8019cc8:	6849      	ldr	r1, [r1, #4]
 8019cca:	6051      	str	r1, [r2, #4]
 8019ccc:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8019cd0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8019cd4:	3208      	adds	r2, #8
 8019cd6:	4402      	add	r2, r0
 8019cd8:	4291      	cmp	r1, r2
 8019cda:	d00f      	beq.n	8019cfc <vTaskSwitchContext+0x7c>
 8019cdc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8019ce0:	0091      	lsls	r1, r2, #2
 8019ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8019d18 <vTaskSwitchContext+0x98>)
 8019ce4:	440a      	add	r2, r1
 8019ce6:	6852      	ldr	r2, [r2, #4]
 8019ce8:	68d1      	ldr	r1, [r2, #12]
 8019cea:	4a0c      	ldr	r2, [pc, #48]	@ (8019d1c <vTaskSwitchContext+0x9c>)
 8019cec:	6011      	str	r1, [r2, #0]
 8019cee:	4909      	ldr	r1, [pc, #36]	@ (8019d14 <vTaskSwitchContext+0x94>)
 8019cf0:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019cf2:	6813      	ldr	r3, [r2, #0]
 8019cf4:	3358      	adds	r3, #88	@ 0x58
 8019cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8019d20 <vTaskSwitchContext+0xa0>)
 8019cf8:	6013      	str	r3, [r2, #0]
}
 8019cfa:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019cfc:	6848      	ldr	r0, [r1, #4]
 8019cfe:	4662      	mov	r2, ip
 8019d00:	0091      	lsls	r1, r2, #2
 8019d02:	4a05      	ldr	r2, [pc, #20]	@ (8019d18 <vTaskSwitchContext+0x98>)
 8019d04:	440a      	add	r2, r1
 8019d06:	6050      	str	r0, [r2, #4]
 8019d08:	e7e8      	b.n	8019cdc <vTaskSwitchContext+0x5c>
 8019d0a:	bf00      	nop
 8019d0c:	200036ac 	.word	0x200036ac
 8019d10:	200036c0 	.word	0x200036c0
 8019d14:	200036cc 	.word	0x200036cc
 8019d18:	20003748 	.word	0x20003748
 8019d1c:	20003ba8 	.word	0x20003ba8
 8019d20:	200002d8 	.word	0x200002d8

08019d24 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8019d24:	b158      	cbz	r0, 8019d3e <vTaskPlaceOnEventList+0x1a>
{
 8019d26:	b510      	push	{r4, lr}
 8019d28:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019d2a:	4a09      	ldr	r2, [pc, #36]	@ (8019d50 <vTaskPlaceOnEventList+0x2c>)
 8019d2c:	6811      	ldr	r1, [r2, #0]
 8019d2e:	3118      	adds	r1, #24
 8019d30:	f7fe fddf 	bl	80188f2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019d34:	2101      	movs	r1, #1
 8019d36:	4620      	mov	r0, r4
 8019d38:	f7ff fd62 	bl	8019800 <prvAddCurrentTaskToDelayedList>
}
 8019d3c:	bd10      	pop	{r4, pc}
 8019d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d42:	f383 8811 	msr	BASEPRI, r3
 8019d46:	f3bf 8f6f 	isb	sy
 8019d4a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8019d4e:	e7fe      	b.n	8019d4e <vTaskPlaceOnEventList+0x2a>
 8019d50:	20003ba8 	.word	0x20003ba8

08019d54 <vTaskPlaceOnEventListRestricted>:
	{
 8019d54:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8019d56:	b170      	cbz	r0, 8019d76 <vTaskPlaceOnEventListRestricted+0x22>
 8019d58:	460d      	mov	r5, r1
 8019d5a:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8019d88 <vTaskPlaceOnEventListRestricted+0x34>)
 8019d5e:	6811      	ldr	r1, [r2, #0]
 8019d60:	3118      	adds	r1, #24
 8019d62:	f7fe fdbb 	bl	80188dc <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8019d66:	b10c      	cbz	r4, 8019d6c <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8019d68:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019d6c:	4621      	mov	r1, r4
 8019d6e:	4628      	mov	r0, r5
 8019d70:	f7ff fd46 	bl	8019800 <prvAddCurrentTaskToDelayedList>
	}
 8019d74:	bd38      	pop	{r3, r4, r5, pc}
 8019d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d7a:	f383 8811 	msr	BASEPRI, r3
 8019d7e:	f3bf 8f6f 	isb	sy
 8019d82:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8019d86:	e7fe      	b.n	8019d86 <vTaskPlaceOnEventListRestricted+0x32>
 8019d88:	20003ba8 	.word	0x20003ba8

08019d8c <xTaskRemoveFromEventList>:
{
 8019d8c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019d8e:	68c3      	ldr	r3, [r0, #12]
 8019d90:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8019d92:	b324      	cbz	r4, 8019dde <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019d94:	f104 0518 	add.w	r5, r4, #24
 8019d98:	4628      	mov	r0, r5
 8019d9a:	f7fe fdc3 	bl	8018924 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019d9e:	4b18      	ldr	r3, [pc, #96]	@ (8019e00 <xTaskRemoveFromEventList+0x74>)
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	bb2b      	cbnz	r3, 8019df0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019da4:	1d25      	adds	r5, r4, #4
 8019da6:	4628      	mov	r0, r5
 8019da8:	f7fe fdbc 	bl	8018924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019dac:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019dae:	4b15      	ldr	r3, [pc, #84]	@ (8019e04 <xTaskRemoveFromEventList+0x78>)
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	4298      	cmp	r0, r3
 8019db4:	d901      	bls.n	8019dba <xTaskRemoveFromEventList+0x2e>
 8019db6:	4b13      	ldr	r3, [pc, #76]	@ (8019e04 <xTaskRemoveFromEventList+0x78>)
 8019db8:	6018      	str	r0, [r3, #0]
 8019dba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019dbe:	4629      	mov	r1, r5
 8019dc0:	4b11      	ldr	r3, [pc, #68]	@ (8019e08 <xTaskRemoveFromEventList+0x7c>)
 8019dc2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019dc6:	f7fe fd89 	bl	80188dc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019dca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8019e0c <xTaskRemoveFromEventList+0x80>)
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019dd2:	429a      	cmp	r2, r3
 8019dd4:	d911      	bls.n	8019dfa <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8019dd6:	2001      	movs	r0, #1
 8019dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8019e10 <xTaskRemoveFromEventList+0x84>)
 8019dda:	6018      	str	r0, [r3, #0]
}
 8019ddc:	bd38      	pop	{r3, r4, r5, pc}
 8019dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019de2:	f383 8811 	msr	BASEPRI, r3
 8019de6:	f3bf 8f6f 	isb	sy
 8019dea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8019dee:	e7fe      	b.n	8019dee <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019df0:	4629      	mov	r1, r5
 8019df2:	4808      	ldr	r0, [pc, #32]	@ (8019e14 <xTaskRemoveFromEventList+0x88>)
 8019df4:	f7fe fd72 	bl	80188dc <vListInsertEnd>
 8019df8:	e7e7      	b.n	8019dca <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8019dfa:	2000      	movs	r0, #0
	return xReturn;
 8019dfc:	e7ee      	b.n	8019ddc <xTaskRemoveFromEventList+0x50>
 8019dfe:	bf00      	nop
 8019e00:	200036ac 	.word	0x200036ac
 8019e04:	200036cc 	.word	0x200036cc
 8019e08:	20003748 	.word	0x20003748
 8019e0c:	20003ba8 	.word	0x20003ba8
 8019e10:	200036c0 	.word	0x200036c0
 8019e14:	20003704 	.word	0x20003704

08019e18 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019e18:	4b03      	ldr	r3, [pc, #12]	@ (8019e28 <vTaskInternalSetTimeOutState+0x10>)
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019e1e:	4b03      	ldr	r3, [pc, #12]	@ (8019e2c <vTaskInternalSetTimeOutState+0x14>)
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	6043      	str	r3, [r0, #4]
}
 8019e24:	4770      	bx	lr
 8019e26:	bf00      	nop
 8019e28:	200036bc 	.word	0x200036bc
 8019e2c:	200036d0 	.word	0x200036d0

08019e30 <xTaskCheckForTimeOut>:
{
 8019e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8019e32:	b1c8      	cbz	r0, 8019e68 <xTaskCheckForTimeOut+0x38>
 8019e34:	460c      	mov	r4, r1
 8019e36:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8019e38:	b1f9      	cbz	r1, 8019e7a <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8019e3a:	f000 fbdb 	bl	801a5f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8019e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8019eac <xTaskCheckForTimeOut+0x7c>)
 8019e40:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019e42:	686b      	ldr	r3, [r5, #4]
 8019e44:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8019e46:	6822      	ldr	r2, [r4, #0]
 8019e48:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8019e4c:	d026      	beq.n	8019e9c <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019e4e:	4e18      	ldr	r6, [pc, #96]	@ (8019eb0 <xTaskCheckForTimeOut+0x80>)
 8019e50:	6836      	ldr	r6, [r6, #0]
 8019e52:	682f      	ldr	r7, [r5, #0]
 8019e54:	42b7      	cmp	r7, r6
 8019e56:	d001      	beq.n	8019e5c <xTaskCheckForTimeOut+0x2c>
 8019e58:	428b      	cmp	r3, r1
 8019e5a:	d924      	bls.n	8019ea6 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019e5c:	4282      	cmp	r2, r0
 8019e5e:	d815      	bhi.n	8019e8c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8019e60:	2300      	movs	r3, #0
 8019e62:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8019e64:	2401      	movs	r4, #1
 8019e66:	e01a      	b.n	8019e9e <xTaskCheckForTimeOut+0x6e>
 8019e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e6c:	f383 8811 	msr	BASEPRI, r3
 8019e70:	f3bf 8f6f 	isb	sy
 8019e74:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8019e78:	e7fe      	b.n	8019e78 <xTaskCheckForTimeOut+0x48>
 8019e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e7e:	f383 8811 	msr	BASEPRI, r3
 8019e82:	f3bf 8f6f 	isb	sy
 8019e86:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8019e8a:	e7fe      	b.n	8019e8a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8019e8c:	1a5b      	subs	r3, r3, r1
 8019e8e:	4413      	add	r3, r2
 8019e90:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019e92:	4628      	mov	r0, r5
 8019e94:	f7ff ffc0 	bl	8019e18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019e98:	2400      	movs	r4, #0
 8019e9a:	e000      	b.n	8019e9e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8019e9c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019e9e:	f000 fbcb 	bl	801a638 <vPortExitCritical>
}
 8019ea2:	4620      	mov	r0, r4
 8019ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8019ea6:	2401      	movs	r4, #1
 8019ea8:	e7f9      	b.n	8019e9e <xTaskCheckForTimeOut+0x6e>
 8019eaa:	bf00      	nop
 8019eac:	200036d0 	.word	0x200036d0
 8019eb0:	200036bc 	.word	0x200036bc

08019eb4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8019eb4:	4b01      	ldr	r3, [pc, #4]	@ (8019ebc <vTaskMissedYield+0x8>)
 8019eb6:	2201      	movs	r2, #1
 8019eb8:	601a      	str	r2, [r3, #0]
}
 8019eba:	4770      	bx	lr
 8019ebc:	200036c0 	.word	0x200036c0

08019ec0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8019ec0:	4b01      	ldr	r3, [pc, #4]	@ (8019ec8 <xTaskGetCurrentTaskHandle+0x8>)
 8019ec2:	6818      	ldr	r0, [r3, #0]
	}
 8019ec4:	4770      	bx	lr
 8019ec6:	bf00      	nop
 8019ec8:	20003ba8 	.word	0x20003ba8

08019ecc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8019ecc:	4b05      	ldr	r3, [pc, #20]	@ (8019ee4 <xTaskGetSchedulerState+0x18>)
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	b133      	cbz	r3, 8019ee0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019ed2:	4b05      	ldr	r3, [pc, #20]	@ (8019ee8 <xTaskGetSchedulerState+0x1c>)
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	b10b      	cbz	r3, 8019edc <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8019ed8:	2000      	movs	r0, #0
	}
 8019eda:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8019edc:	2002      	movs	r0, #2
 8019ede:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019ee0:	2001      	movs	r0, #1
 8019ee2:	4770      	bx	lr
 8019ee4:	200036c8 	.word	0x200036c8
 8019ee8:	200036ac 	.word	0x200036ac

08019eec <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8019eec:	2800      	cmp	r0, #0
 8019eee:	d03e      	beq.n	8019f6e <xTaskPriorityInherit+0x82>
	{
 8019ef0:	b538      	push	{r3, r4, r5, lr}
 8019ef2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8019ef4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8019ef6:	4a20      	ldr	r2, [pc, #128]	@ (8019f78 <xTaskPriorityInherit+0x8c>)
 8019ef8:	6812      	ldr	r2, [r2, #0]
 8019efa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8019efc:	4293      	cmp	r3, r2
 8019efe:	d22e      	bcs.n	8019f5e <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019f00:	6982      	ldr	r2, [r0, #24]
 8019f02:	2a00      	cmp	r2, #0
 8019f04:	db05      	blt.n	8019f12 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019f06:	4a1c      	ldr	r2, [pc, #112]	@ (8019f78 <xTaskPriorityInherit+0x8c>)
 8019f08:	6812      	ldr	r2, [r2, #0]
 8019f0a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8019f0c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8019f10:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8019f12:	6961      	ldr	r1, [r4, #20]
 8019f14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019f18:	4a18      	ldr	r2, [pc, #96]	@ (8019f7c <xTaskPriorityInherit+0x90>)
 8019f1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019f1e:	4299      	cmp	r1, r3
 8019f20:	d005      	beq.n	8019f2e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019f22:	4b15      	ldr	r3, [pc, #84]	@ (8019f78 <xTaskPriorityInherit+0x8c>)
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f28:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8019f2a:	2001      	movs	r0, #1
	}
 8019f2c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019f2e:	1d25      	adds	r5, r4, #4
 8019f30:	4628      	mov	r0, r5
 8019f32:	f7fe fcf7 	bl	8018924 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019f36:	4b10      	ldr	r3, [pc, #64]	@ (8019f78 <xTaskPriorityInherit+0x8c>)
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8019f3c:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019f3e:	4b10      	ldr	r3, [pc, #64]	@ (8019f80 <xTaskPriorityInherit+0x94>)
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	4298      	cmp	r0, r3
 8019f44:	d901      	bls.n	8019f4a <xTaskPriorityInherit+0x5e>
 8019f46:	4b0e      	ldr	r3, [pc, #56]	@ (8019f80 <xTaskPriorityInherit+0x94>)
 8019f48:	6018      	str	r0, [r3, #0]
 8019f4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019f4e:	4629      	mov	r1, r5
 8019f50:	4b0a      	ldr	r3, [pc, #40]	@ (8019f7c <xTaskPriorityInherit+0x90>)
 8019f52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019f56:	f7fe fcc1 	bl	80188dc <vListInsertEnd>
				xReturn = pdTRUE;
 8019f5a:	2001      	movs	r0, #1
 8019f5c:	e7e6      	b.n	8019f2c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8019f5e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8019f60:	4b05      	ldr	r3, [pc, #20]	@ (8019f78 <xTaskPriorityInherit+0x8c>)
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f66:	429a      	cmp	r2, r3
 8019f68:	d303      	bcc.n	8019f72 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 8019f6a:	2000      	movs	r0, #0
 8019f6c:	e7de      	b.n	8019f2c <xTaskPriorityInherit+0x40>
 8019f6e:	2000      	movs	r0, #0
	}
 8019f70:	4770      	bx	lr
					xReturn = pdTRUE;
 8019f72:	2001      	movs	r0, #1
		return xReturn;
 8019f74:	e7da      	b.n	8019f2c <xTaskPriorityInherit+0x40>
 8019f76:	bf00      	nop
 8019f78:	20003ba8 	.word	0x20003ba8
 8019f7c:	20003748 	.word	0x20003748
 8019f80:	200036cc 	.word	0x200036cc

08019f84 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8019f84:	2800      	cmp	r0, #0
 8019f86:	d03b      	beq.n	801a000 <xTaskPriorityDisinherit+0x7c>
	{
 8019f88:	b538      	push	{r3, r4, r5, lr}
 8019f8a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8019f8c:	4b1e      	ldr	r3, [pc, #120]	@ (801a008 <xTaskPriorityDisinherit+0x84>)
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	4283      	cmp	r3, r0
 8019f92:	d008      	beq.n	8019fa6 <xTaskPriorityDisinherit+0x22>
 8019f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f98:	f383 8811 	msr	BASEPRI, r3
 8019f9c:	f3bf 8f6f 	isb	sy
 8019fa0:	f3bf 8f4f 	dsb	sy
 8019fa4:	e7fe      	b.n	8019fa4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8019fa6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8019fa8:	b943      	cbnz	r3, 8019fbc <xTaskPriorityDisinherit+0x38>
 8019faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fae:	f383 8811 	msr	BASEPRI, r3
 8019fb2:	f3bf 8f6f 	isb	sy
 8019fb6:	f3bf 8f4f 	dsb	sy
 8019fba:	e7fe      	b.n	8019fba <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8019fbc:	3b01      	subs	r3, #1
 8019fbe:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019fc0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8019fc2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8019fc4:	4291      	cmp	r1, r2
 8019fc6:	d01d      	beq.n	801a004 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019fc8:	b10b      	cbz	r3, 8019fce <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8019fca:	2000      	movs	r0, #0
	}
 8019fcc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019fce:	1d05      	adds	r5, r0, #4
 8019fd0:	4628      	mov	r0, r5
 8019fd2:	f7fe fca7 	bl	8018924 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019fd6:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8019fd8:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019fda:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8019fde:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8019fe0:	4b0a      	ldr	r3, [pc, #40]	@ (801a00c <xTaskPriorityDisinherit+0x88>)
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	4298      	cmp	r0, r3
 8019fe6:	d901      	bls.n	8019fec <xTaskPriorityDisinherit+0x68>
 8019fe8:	4b08      	ldr	r3, [pc, #32]	@ (801a00c <xTaskPriorityDisinherit+0x88>)
 8019fea:	6018      	str	r0, [r3, #0]
 8019fec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019ff0:	4629      	mov	r1, r5
 8019ff2:	4b07      	ldr	r3, [pc, #28]	@ (801a010 <xTaskPriorityDisinherit+0x8c>)
 8019ff4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019ff8:	f7fe fc70 	bl	80188dc <vListInsertEnd>
					xReturn = pdTRUE;
 8019ffc:	2001      	movs	r0, #1
 8019ffe:	e7e5      	b.n	8019fcc <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 801a000:	2000      	movs	r0, #0
	}
 801a002:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 801a004:	2000      	movs	r0, #0
 801a006:	e7e1      	b.n	8019fcc <xTaskPriorityDisinherit+0x48>
 801a008:	20003ba8 	.word	0x20003ba8
 801a00c:	200036cc 	.word	0x200036cc
 801a010:	20003748 	.word	0x20003748

0801a014 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 801a014:	2800      	cmp	r0, #0
 801a016:	d046      	beq.n	801a0a6 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 801a018:	b538      	push	{r3, r4, r5, lr}
 801a01a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 801a01c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801a01e:	b943      	cbnz	r3, 801a032 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a024:	f383 8811 	msr	BASEPRI, r3
 801a028:	f3bf 8f6f 	isb	sy
 801a02c:	f3bf 8f4f 	dsb	sy
 801a030:	e7fe      	b.n	801a030 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a032:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801a034:	428a      	cmp	r2, r1
 801a036:	d200      	bcs.n	801a03a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a038:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a03a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a03c:	4291      	cmp	r1, r2
 801a03e:	d001      	beq.n	801a044 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a040:	2b01      	cmp	r3, #1
 801a042:	d000      	beq.n	801a046 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 801a044:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 801a046:	4b18      	ldr	r3, [pc, #96]	@ (801a0a8 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	42a3      	cmp	r3, r4
 801a04c:	d022      	beq.n	801a094 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 801a04e:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a050:	69a3      	ldr	r3, [r4, #24]
 801a052:	2b00      	cmp	r3, #0
 801a054:	db02      	blt.n	801a05c <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a056:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801a05a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a05c:	6962      	ldr	r2, [r4, #20]
 801a05e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801a062:	4b12      	ldr	r3, [pc, #72]	@ (801a0ac <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801a064:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a068:	429a      	cmp	r2, r3
 801a06a:	d1eb      	bne.n	801a044 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a06c:	1d25      	adds	r5, r4, #4
 801a06e:	4628      	mov	r0, r5
 801a070:	f7fe fc58 	bl	8018924 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801a074:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a076:	4b0e      	ldr	r3, [pc, #56]	@ (801a0b0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	4298      	cmp	r0, r3
 801a07c:	d901      	bls.n	801a082 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 801a07e:	4b0c      	ldr	r3, [pc, #48]	@ (801a0b0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801a080:	6018      	str	r0, [r3, #0]
 801a082:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a086:	4629      	mov	r1, r5
 801a088:	4b08      	ldr	r3, [pc, #32]	@ (801a0ac <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801a08a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a08e:	f7fe fc25 	bl	80188dc <vListInsertEnd>
	}
 801a092:	e7d7      	b.n	801a044 <vTaskPriorityDisinheritAfterTimeout+0x30>
 801a094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a098:	f383 8811 	msr	BASEPRI, r3
 801a09c:	f3bf 8f6f 	isb	sy
 801a0a0:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 801a0a4:	e7fe      	b.n	801a0a4 <vTaskPriorityDisinheritAfterTimeout+0x90>
 801a0a6:	4770      	bx	lr
 801a0a8:	20003ba8 	.word	0x20003ba8
 801a0ac:	20003748 	.word	0x20003748
 801a0b0:	200036cc 	.word	0x200036cc

0801a0b4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801a0b4:	4b05      	ldr	r3, [pc, #20]	@ (801a0cc <pvTaskIncrementMutexHeldCount+0x18>)
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	b123      	cbz	r3, 801a0c4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 801a0ba:	4b04      	ldr	r3, [pc, #16]	@ (801a0cc <pvTaskIncrementMutexHeldCount+0x18>)
 801a0bc:	681a      	ldr	r2, [r3, #0]
 801a0be:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801a0c0:	3301      	adds	r3, #1
 801a0c2:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 801a0c4:	4b01      	ldr	r3, [pc, #4]	@ (801a0cc <pvTaskIncrementMutexHeldCount+0x18>)
 801a0c6:	6818      	ldr	r0, [r3, #0]
	}
 801a0c8:	4770      	bx	lr
 801a0ca:	bf00      	nop
 801a0cc:	20003ba8 	.word	0x20003ba8

0801a0d0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a0d0:	4b06      	ldr	r3, [pc, #24]	@ (801a0ec <prvGetNextExpireTime+0x1c>)
 801a0d2:	681a      	ldr	r2, [r3, #0]
 801a0d4:	6813      	ldr	r3, [r2, #0]
 801a0d6:	b92b      	cbnz	r3, 801a0e4 <prvGetNextExpireTime+0x14>
 801a0d8:	2301      	movs	r3, #1
 801a0da:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 801a0dc:	b923      	cbnz	r3, 801a0e8 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a0de:	68d3      	ldr	r3, [r2, #12]
 801a0e0:	6818      	ldr	r0, [r3, #0]
 801a0e2:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	e7f8      	b.n	801a0da <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801a0e8:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 801a0ea:	4770      	bx	lr
 801a0ec:	20003cac 	.word	0x20003cac

0801a0f0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801a0f0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801a0f2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a0f4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801a0f6:	4291      	cmp	r1, r2
 801a0f8:	d80c      	bhi.n	801a114 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a0fa:	1ad2      	subs	r2, r2, r3
 801a0fc:	6983      	ldr	r3, [r0, #24]
 801a0fe:	429a      	cmp	r2, r3
 801a100:	d301      	bcc.n	801a106 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801a102:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 801a104:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801a106:	1d01      	adds	r1, r0, #4
 801a108:	4b09      	ldr	r3, [pc, #36]	@ (801a130 <prvInsertTimerInActiveList+0x40>)
 801a10a:	6818      	ldr	r0, [r3, #0]
 801a10c:	f7fe fbf1 	bl	80188f2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801a110:	2000      	movs	r0, #0
 801a112:	e7f7      	b.n	801a104 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801a114:	429a      	cmp	r2, r3
 801a116:	d201      	bcs.n	801a11c <prvInsertTimerInActiveList+0x2c>
 801a118:	4299      	cmp	r1, r3
 801a11a:	d206      	bcs.n	801a12a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a11c:	1d01      	adds	r1, r0, #4
 801a11e:	4b05      	ldr	r3, [pc, #20]	@ (801a134 <prvInsertTimerInActiveList+0x44>)
 801a120:	6818      	ldr	r0, [r3, #0]
 801a122:	f7fe fbe6 	bl	80188f2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801a126:	2000      	movs	r0, #0
 801a128:	e7ec      	b.n	801a104 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 801a12a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801a12c:	e7ea      	b.n	801a104 <prvInsertTimerInActiveList+0x14>
 801a12e:	bf00      	nop
 801a130:	20003ca8 	.word	0x20003ca8
 801a134:	20003cac 	.word	0x20003cac

0801a138 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a138:	b530      	push	{r4, r5, lr}
 801a13a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a13c:	f000 fa5a 	bl	801a5f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a140:	4b11      	ldr	r3, [pc, #68]	@ (801a188 <prvCheckForValidListAndQueue+0x50>)
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	b11b      	cbz	r3, 801a14e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a146:	f000 fa77 	bl	801a638 <vPortExitCritical>
}
 801a14a:	b003      	add	sp, #12
 801a14c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 801a14e:	4d0f      	ldr	r5, [pc, #60]	@ (801a18c <prvCheckForValidListAndQueue+0x54>)
 801a150:	4628      	mov	r0, r5
 801a152:	f7fe fbb5 	bl	80188c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a156:	4c0e      	ldr	r4, [pc, #56]	@ (801a190 <prvCheckForValidListAndQueue+0x58>)
 801a158:	4620      	mov	r0, r4
 801a15a:	f7fe fbb1 	bl	80188c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a15e:	4b0d      	ldr	r3, [pc, #52]	@ (801a194 <prvCheckForValidListAndQueue+0x5c>)
 801a160:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a162:	4b0d      	ldr	r3, [pc, #52]	@ (801a198 <prvCheckForValidListAndQueue+0x60>)
 801a164:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a166:	2300      	movs	r3, #0
 801a168:	9300      	str	r3, [sp, #0]
 801a16a:	4b0c      	ldr	r3, [pc, #48]	@ (801a19c <prvCheckForValidListAndQueue+0x64>)
 801a16c:	4a0c      	ldr	r2, [pc, #48]	@ (801a1a0 <prvCheckForValidListAndQueue+0x68>)
 801a16e:	2110      	movs	r1, #16
 801a170:	200a      	movs	r0, #10
 801a172:	f7fe fce5 	bl	8018b40 <xQueueGenericCreateStatic>
 801a176:	4b04      	ldr	r3, [pc, #16]	@ (801a188 <prvCheckForValidListAndQueue+0x50>)
 801a178:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 801a17a:	2800      	cmp	r0, #0
 801a17c:	d0e3      	beq.n	801a146 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a17e:	4909      	ldr	r1, [pc, #36]	@ (801a1a4 <prvCheckForValidListAndQueue+0x6c>)
 801a180:	f7ff f984 	bl	801948c <vQueueAddToRegistry>
 801a184:	e7df      	b.n	801a146 <prvCheckForValidListAndQueue+0xe>
 801a186:	bf00      	nop
 801a188:	20003ca4 	.word	0x20003ca4
 801a18c:	20003cc4 	.word	0x20003cc4
 801a190:	20003cb0 	.word	0x20003cb0
 801a194:	20003cac 	.word	0x20003cac
 801a198:	20003ca8 	.word	0x20003ca8
 801a19c:	20003bac 	.word	0x20003bac
 801a1a0:	20003bfc 	.word	0x20003bfc
 801a1a4:	080390a8 	.word	0x080390a8

0801a1a8 <xTimerCreateTimerTask>:
{
 801a1a8:	b510      	push	{r4, lr}
 801a1aa:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801a1ac:	f7ff ffc4 	bl	801a138 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801a1b0:	4b12      	ldr	r3, [pc, #72]	@ (801a1fc <xTimerCreateTimerTask+0x54>)
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	b1cb      	cbz	r3, 801a1ea <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a1b6:	2400      	movs	r4, #0
 801a1b8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a1ba:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a1bc:	aa07      	add	r2, sp, #28
 801a1be:	a906      	add	r1, sp, #24
 801a1c0:	a805      	add	r0, sp, #20
 801a1c2:	f7fe fb71 	bl	80188a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a1c6:	9b05      	ldr	r3, [sp, #20]
 801a1c8:	9302      	str	r3, [sp, #8]
 801a1ca:	9b06      	ldr	r3, [sp, #24]
 801a1cc:	9301      	str	r3, [sp, #4]
 801a1ce:	2302      	movs	r3, #2
 801a1d0:	9300      	str	r3, [sp, #0]
 801a1d2:	4623      	mov	r3, r4
 801a1d4:	9a07      	ldr	r2, [sp, #28]
 801a1d6:	490a      	ldr	r1, [pc, #40]	@ (801a200 <xTimerCreateTimerTask+0x58>)
 801a1d8:	480a      	ldr	r0, [pc, #40]	@ (801a204 <xTimerCreateTimerTask+0x5c>)
 801a1da:	f7ff fb4f 	bl	801987c <xTaskCreateStatic>
 801a1de:	4b0a      	ldr	r3, [pc, #40]	@ (801a208 <xTimerCreateTimerTask+0x60>)
 801a1e0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801a1e2:	b110      	cbz	r0, 801a1ea <xTimerCreateTimerTask+0x42>
}
 801a1e4:	2001      	movs	r0, #1
 801a1e6:	b008      	add	sp, #32
 801a1e8:	bd10      	pop	{r4, pc}
 801a1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1ee:	f383 8811 	msr	BASEPRI, r3
 801a1f2:	f3bf 8f6f 	isb	sy
 801a1f6:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801a1fa:	e7fe      	b.n	801a1fa <xTimerCreateTimerTask+0x52>
 801a1fc:	20003ca4 	.word	0x20003ca4
 801a200:	080390b0 	.word	0x080390b0
 801a204:	0801a50d 	.word	0x0801a50d
 801a208:	20003ca0 	.word	0x20003ca0

0801a20c <xTimerGenericCommand>:
	configASSERT( xTimer );
 801a20c:	b1b8      	cbz	r0, 801a23e <xTimerGenericCommand+0x32>
 801a20e:	469c      	mov	ip, r3
 801a210:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 801a212:	4818      	ldr	r0, [pc, #96]	@ (801a274 <xTimerGenericCommand+0x68>)
 801a214:	6800      	ldr	r0, [r0, #0]
 801a216:	b358      	cbz	r0, 801a270 <xTimerGenericCommand+0x64>
{
 801a218:	b500      	push	{lr}
 801a21a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 801a21c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a21e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a220:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a222:	2905      	cmp	r1, #5
 801a224:	dc1c      	bgt.n	801a260 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a226:	f7ff fe51 	bl	8019ecc <xTaskGetSchedulerState>
 801a22a:	2802      	cmp	r0, #2
 801a22c:	d010      	beq.n	801a250 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801a22e:	2300      	movs	r3, #0
 801a230:	461a      	mov	r2, r3
 801a232:	4669      	mov	r1, sp
 801a234:	480f      	ldr	r0, [pc, #60]	@ (801a274 <xTimerGenericCommand+0x68>)
 801a236:	6800      	ldr	r0, [r0, #0]
 801a238:	f7fe fcf0 	bl	8018c1c <xQueueGenericSend>
 801a23c:	e015      	b.n	801a26a <xTimerGenericCommand+0x5e>
 801a23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a242:	f383 8811 	msr	BASEPRI, r3
 801a246:	f3bf 8f6f 	isb	sy
 801a24a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 801a24e:	e7fe      	b.n	801a24e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a250:	2300      	movs	r3, #0
 801a252:	9a06      	ldr	r2, [sp, #24]
 801a254:	4669      	mov	r1, sp
 801a256:	4807      	ldr	r0, [pc, #28]	@ (801a274 <xTimerGenericCommand+0x68>)
 801a258:	6800      	ldr	r0, [r0, #0]
 801a25a:	f7fe fcdf 	bl	8018c1c <xQueueGenericSend>
 801a25e:	e004      	b.n	801a26a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a260:	2300      	movs	r3, #0
 801a262:	4662      	mov	r2, ip
 801a264:	4669      	mov	r1, sp
 801a266:	f7fe fde3 	bl	8018e30 <xQueueGenericSendFromISR>
}
 801a26a:	b005      	add	sp, #20
 801a26c:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 801a270:	2000      	movs	r0, #0
}
 801a272:	4770      	bx	lr
 801a274:	20003ca4 	.word	0x20003ca4

0801a278 <prvSwitchTimerLists>:
{
 801a278:	b570      	push	{r4, r5, r6, lr}
 801a27a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a27c:	4b1b      	ldr	r3, [pc, #108]	@ (801a2ec <prvSwitchTimerLists+0x74>)
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	681a      	ldr	r2, [r3, #0]
 801a282:	b362      	cbz	r2, 801a2de <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a284:	68db      	ldr	r3, [r3, #12]
 801a286:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a288:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a28a:	1d25      	adds	r5, r4, #4
 801a28c:	4628      	mov	r0, r5
 801a28e:	f7fe fb49 	bl	8018924 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a292:	6a23      	ldr	r3, [r4, #32]
 801a294:	4620      	mov	r0, r4
 801a296:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a298:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a29c:	f013 0f04 	tst.w	r3, #4
 801a2a0:	d0ec      	beq.n	801a27c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a2a2:	69a3      	ldr	r3, [r4, #24]
 801a2a4:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 801a2a6:	429e      	cmp	r6, r3
 801a2a8:	d207      	bcs.n	801a2ba <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a2aa:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a2ac:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a2ae:	4629      	mov	r1, r5
 801a2b0:	4b0e      	ldr	r3, [pc, #56]	@ (801a2ec <prvSwitchTimerLists+0x74>)
 801a2b2:	6818      	ldr	r0, [r3, #0]
 801a2b4:	f7fe fb1d 	bl	80188f2 <vListInsert>
 801a2b8:	e7e0      	b.n	801a27c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a2ba:	2100      	movs	r1, #0
 801a2bc:	9100      	str	r1, [sp, #0]
 801a2be:	460b      	mov	r3, r1
 801a2c0:	4632      	mov	r2, r6
 801a2c2:	4620      	mov	r0, r4
 801a2c4:	f7ff ffa2 	bl	801a20c <xTimerGenericCommand>
				configASSERT( xResult );
 801a2c8:	2800      	cmp	r0, #0
 801a2ca:	d1d7      	bne.n	801a27c <prvSwitchTimerLists+0x4>
 801a2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2d0:	f383 8811 	msr	BASEPRI, r3
 801a2d4:	f3bf 8f6f 	isb	sy
 801a2d8:	f3bf 8f4f 	dsb	sy
 801a2dc:	e7fe      	b.n	801a2dc <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 801a2de:	4a04      	ldr	r2, [pc, #16]	@ (801a2f0 <prvSwitchTimerLists+0x78>)
 801a2e0:	6810      	ldr	r0, [r2, #0]
 801a2e2:	4902      	ldr	r1, [pc, #8]	@ (801a2ec <prvSwitchTimerLists+0x74>)
 801a2e4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801a2e6:	6013      	str	r3, [r2, #0]
}
 801a2e8:	b002      	add	sp, #8
 801a2ea:	bd70      	pop	{r4, r5, r6, pc}
 801a2ec:	20003cac 	.word	0x20003cac
 801a2f0:	20003ca8 	.word	0x20003ca8

0801a2f4 <prvSampleTimeNow>:
{
 801a2f4:	b538      	push	{r3, r4, r5, lr}
 801a2f6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 801a2f8:	f7ff fb8e 	bl	8019a18 <xTaskGetTickCount>
 801a2fc:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 801a2fe:	4b07      	ldr	r3, [pc, #28]	@ (801a31c <prvSampleTimeNow+0x28>)
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	4283      	cmp	r3, r0
 801a304:	d805      	bhi.n	801a312 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801a306:	2300      	movs	r3, #0
 801a308:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801a30a:	4b04      	ldr	r3, [pc, #16]	@ (801a31c <prvSampleTimeNow+0x28>)
 801a30c:	601c      	str	r4, [r3, #0]
}
 801a30e:	4620      	mov	r0, r4
 801a310:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 801a312:	f7ff ffb1 	bl	801a278 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801a316:	2301      	movs	r3, #1
 801a318:	602b      	str	r3, [r5, #0]
 801a31a:	e7f6      	b.n	801a30a <prvSampleTimeNow+0x16>
 801a31c:	20003c9c 	.word	0x20003c9c

0801a320 <prvProcessExpiredTimer>:
{
 801a320:	b570      	push	{r4, r5, r6, lr}
 801a322:	b082      	sub	sp, #8
 801a324:	4606      	mov	r6, r0
 801a326:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a328:	4917      	ldr	r1, [pc, #92]	@ (801a388 <prvProcessExpiredTimer+0x68>)
 801a32a:	6809      	ldr	r1, [r1, #0]
 801a32c:	68c9      	ldr	r1, [r1, #12]
 801a32e:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a330:	1d20      	adds	r0, r4, #4
 801a332:	f7fe faf7 	bl	8018924 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a336:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 801a33a:	f01c 0f04 	tst.w	ip, #4
 801a33e:	d108      	bne.n	801a352 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a340:	f02c 0c01 	bic.w	ip, ip, #1
 801a344:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a348:	6a23      	ldr	r3, [r4, #32]
 801a34a:	4620      	mov	r0, r4
 801a34c:	4798      	blx	r3
}
 801a34e:	b002      	add	sp, #8
 801a350:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801a352:	69a1      	ldr	r1, [r4, #24]
 801a354:	4633      	mov	r3, r6
 801a356:	462a      	mov	r2, r5
 801a358:	4431      	add	r1, r6
 801a35a:	4620      	mov	r0, r4
 801a35c:	f7ff fec8 	bl	801a0f0 <prvInsertTimerInActiveList>
 801a360:	2800      	cmp	r0, #0
 801a362:	d0f1      	beq.n	801a348 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a364:	2100      	movs	r1, #0
 801a366:	9100      	str	r1, [sp, #0]
 801a368:	460b      	mov	r3, r1
 801a36a:	4632      	mov	r2, r6
 801a36c:	4620      	mov	r0, r4
 801a36e:	f7ff ff4d 	bl	801a20c <xTimerGenericCommand>
			configASSERT( xResult );
 801a372:	2800      	cmp	r0, #0
 801a374:	d1e8      	bne.n	801a348 <prvProcessExpiredTimer+0x28>
 801a376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a37a:	f383 8811 	msr	BASEPRI, r3
 801a37e:	f3bf 8f6f 	isb	sy
 801a382:	f3bf 8f4f 	dsb	sy
 801a386:	e7fe      	b.n	801a386 <prvProcessExpiredTimer+0x66>
 801a388:	20003cac 	.word	0x20003cac

0801a38c <prvProcessTimerOrBlockTask>:
{
 801a38c:	b570      	push	{r4, r5, r6, lr}
 801a38e:	b082      	sub	sp, #8
 801a390:	4606      	mov	r6, r0
 801a392:	460c      	mov	r4, r1
	vTaskSuspendAll();
 801a394:	f7ff fb38 	bl	8019a08 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a398:	a801      	add	r0, sp, #4
 801a39a:	f7ff ffab 	bl	801a2f4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801a39e:	9b01      	ldr	r3, [sp, #4]
 801a3a0:	bb33      	cbnz	r3, 801a3f0 <prvProcessTimerOrBlockTask+0x64>
 801a3a2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801a3a4:	b9e4      	cbnz	r4, 801a3e0 <prvProcessTimerOrBlockTask+0x54>
 801a3a6:	42b0      	cmp	r0, r6
 801a3a8:	d213      	bcs.n	801a3d2 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801a3aa:	4622      	mov	r2, r4
 801a3ac:	1b71      	subs	r1, r6, r5
 801a3ae:	4b12      	ldr	r3, [pc, #72]	@ (801a3f8 <prvProcessTimerOrBlockTask+0x6c>)
 801a3b0:	6818      	ldr	r0, [r3, #0]
 801a3b2:	f7ff f87f 	bl	80194b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801a3b6:	f7ff fbc1 	bl	8019b3c <xTaskResumeAll>
 801a3ba:	b9d8      	cbnz	r0, 801a3f4 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 801a3bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a3c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a3c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a3c8:	f3bf 8f4f 	dsb	sy
 801a3cc:	f3bf 8f6f 	isb	sy
 801a3d0:	e010      	b.n	801a3f4 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 801a3d2:	f7ff fbb3 	bl	8019b3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801a3d6:	4629      	mov	r1, r5
 801a3d8:	4630      	mov	r0, r6
 801a3da:	f7ff ffa1 	bl	801a320 <prvProcessExpiredTimer>
 801a3de:	e009      	b.n	801a3f4 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801a3e0:	4a06      	ldr	r2, [pc, #24]	@ (801a3fc <prvProcessTimerOrBlockTask+0x70>)
 801a3e2:	6812      	ldr	r2, [r2, #0]
 801a3e4:	6812      	ldr	r2, [r2, #0]
 801a3e6:	b90a      	cbnz	r2, 801a3ec <prvProcessTimerOrBlockTask+0x60>
 801a3e8:	2401      	movs	r4, #1
 801a3ea:	e7de      	b.n	801a3aa <prvProcessTimerOrBlockTask+0x1e>
 801a3ec:	461c      	mov	r4, r3
 801a3ee:	e7dc      	b.n	801a3aa <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 801a3f0:	f7ff fba4 	bl	8019b3c <xTaskResumeAll>
}
 801a3f4:	b002      	add	sp, #8
 801a3f6:	bd70      	pop	{r4, r5, r6, pc}
 801a3f8:	20003ca4 	.word	0x20003ca4
 801a3fc:	20003ca8 	.word	0x20003ca8

0801a400 <prvProcessReceivedCommands>:
{
 801a400:	b510      	push	{r4, lr}
 801a402:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a404:	e002      	b.n	801a40c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801a406:	9b04      	ldr	r3, [sp, #16]
 801a408:	2b00      	cmp	r3, #0
 801a40a:	da0f      	bge.n	801a42c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a40c:	2200      	movs	r2, #0
 801a40e:	a904      	add	r1, sp, #16
 801a410:	4b3d      	ldr	r3, [pc, #244]	@ (801a508 <prvProcessReceivedCommands+0x108>)
 801a412:	6818      	ldr	r0, [r3, #0]
 801a414:	f7fe fd73 	bl	8018efe <xQueueReceive>
 801a418:	2800      	cmp	r0, #0
 801a41a:	d073      	beq.n	801a504 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801a41c:	9b04      	ldr	r3, [sp, #16]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	daf1      	bge.n	801a406 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801a422:	9907      	ldr	r1, [sp, #28]
 801a424:	9806      	ldr	r0, [sp, #24]
 801a426:	9b05      	ldr	r3, [sp, #20]
 801a428:	4798      	blx	r3
 801a42a:	e7ec      	b.n	801a406 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801a42c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801a42e:	6963      	ldr	r3, [r4, #20]
 801a430:	b113      	cbz	r3, 801a438 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a432:	1d20      	adds	r0, r4, #4
 801a434:	f7fe fa76 	bl	8018924 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a438:	a803      	add	r0, sp, #12
 801a43a:	f7ff ff5b 	bl	801a2f4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801a43e:	9b04      	ldr	r3, [sp, #16]
 801a440:	2b09      	cmp	r3, #9
 801a442:	d8e3      	bhi.n	801a40c <prvProcessReceivedCommands+0xc>
 801a444:	e8df f003 	tbb	[pc, r3]
 801a448:	30050505 	.word	0x30050505
 801a44c:	05055037 	.word	0x05055037
 801a450:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a452:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a456:	f043 0301 	orr.w	r3, r3, #1
 801a45a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801a45e:	9b05      	ldr	r3, [sp, #20]
 801a460:	69a1      	ldr	r1, [r4, #24]
 801a462:	4602      	mov	r2, r0
 801a464:	4419      	add	r1, r3
 801a466:	4620      	mov	r0, r4
 801a468:	f7ff fe42 	bl	801a0f0 <prvInsertTimerInActiveList>
 801a46c:	2800      	cmp	r0, #0
 801a46e:	d0cd      	beq.n	801a40c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a470:	6a23      	ldr	r3, [r4, #32]
 801a472:	4620      	mov	r0, r4
 801a474:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a476:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a47a:	f013 0f04 	tst.w	r3, #4
 801a47e:	d0c5      	beq.n	801a40c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801a480:	69a2      	ldr	r2, [r4, #24]
 801a482:	2100      	movs	r1, #0
 801a484:	9100      	str	r1, [sp, #0]
 801a486:	460b      	mov	r3, r1
 801a488:	9805      	ldr	r0, [sp, #20]
 801a48a:	4402      	add	r2, r0
 801a48c:	4620      	mov	r0, r4
 801a48e:	f7ff febd 	bl	801a20c <xTimerGenericCommand>
							configASSERT( xResult );
 801a492:	2800      	cmp	r0, #0
 801a494:	d1ba      	bne.n	801a40c <prvProcessReceivedCommands+0xc>
 801a496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a49a:	f383 8811 	msr	BASEPRI, r3
 801a49e:	f3bf 8f6f 	isb	sy
 801a4a2:	f3bf 8f4f 	dsb	sy
 801a4a6:	e7fe      	b.n	801a4a6 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a4a8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a4ac:	f023 0301 	bic.w	r3, r3, #1
 801a4b0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 801a4b4:	e7aa      	b.n	801a40c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a4b6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a4ba:	f043 0301 	orr.w	r3, r3, #1
 801a4be:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801a4c2:	9905      	ldr	r1, [sp, #20]
 801a4c4:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a4c6:	b131      	cbz	r1, 801a4d6 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801a4c8:	4603      	mov	r3, r0
 801a4ca:	4602      	mov	r2, r0
 801a4cc:	4401      	add	r1, r0
 801a4ce:	4620      	mov	r0, r4
 801a4d0:	f7ff fe0e 	bl	801a0f0 <prvInsertTimerInActiveList>
					break;
 801a4d4:	e79a      	b.n	801a40c <prvProcessReceivedCommands+0xc>
 801a4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4da:	f383 8811 	msr	BASEPRI, r3
 801a4de:	f3bf 8f6f 	isb	sy
 801a4e2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a4e6:	e7fe      	b.n	801a4e6 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801a4e8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a4ec:	f013 0f02 	tst.w	r3, #2
 801a4f0:	d004      	beq.n	801a4fc <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a4f2:	f023 0301 	bic.w	r3, r3, #1
 801a4f6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 801a4fa:	e787      	b.n	801a40c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 801a4fc:	4620      	mov	r0, r4
 801a4fe:	f000 fab5 	bl	801aa6c <vPortFree>
 801a502:	e783      	b.n	801a40c <prvProcessReceivedCommands+0xc>
}
 801a504:	b008      	add	sp, #32
 801a506:	bd10      	pop	{r4, pc}
 801a508:	20003ca4 	.word	0x20003ca4

0801a50c <prvTimerTask>:
{
 801a50c:	b500      	push	{lr}
 801a50e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a510:	a801      	add	r0, sp, #4
 801a512:	f7ff fddd 	bl	801a0d0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801a516:	9901      	ldr	r1, [sp, #4]
 801a518:	f7ff ff38 	bl	801a38c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 801a51c:	f7ff ff70 	bl	801a400 <prvProcessReceivedCommands>
	for( ;; )
 801a520:	e7f6      	b.n	801a510 <prvTimerTask+0x4>
	...

0801a524 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a524:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801a526:	2300      	movs	r3, #0
 801a528:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a52a:	4b0d      	ldr	r3, [pc, #52]	@ (801a560 <prvTaskExitError+0x3c>)
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a532:	d008      	beq.n	801a546 <prvTaskExitError+0x22>
 801a534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a538:	f383 8811 	msr	BASEPRI, r3
 801a53c:	f3bf 8f6f 	isb	sy
 801a540:	f3bf 8f4f 	dsb	sy
 801a544:	e7fe      	b.n	801a544 <prvTaskExitError+0x20>
 801a546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a54a:	f383 8811 	msr	BASEPRI, r3
 801a54e:	f3bf 8f6f 	isb	sy
 801a552:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a556:	9b01      	ldr	r3, [sp, #4]
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d0fc      	beq.n	801a556 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a55c:	b002      	add	sp, #8
 801a55e:	4770      	bx	lr
 801a560:	20000114 	.word	0x20000114

0801a564 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a564:	4808      	ldr	r0, [pc, #32]	@ (801a588 <prvPortStartFirstTask+0x24>)
 801a566:	6800      	ldr	r0, [r0, #0]
 801a568:	6800      	ldr	r0, [r0, #0]
 801a56a:	f380 8808 	msr	MSP, r0
 801a56e:	f04f 0000 	mov.w	r0, #0
 801a572:	f380 8814 	msr	CONTROL, r0
 801a576:	b662      	cpsie	i
 801a578:	b661      	cpsie	f
 801a57a:	f3bf 8f4f 	dsb	sy
 801a57e:	f3bf 8f6f 	isb	sy
 801a582:	df00      	svc	0
 801a584:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a586:	0000      	.short	0x0000
 801a588:	e000ed08 	.word	0xe000ed08

0801a58c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a58c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801a59c <vPortEnableVFP+0x10>
 801a590:	6801      	ldr	r1, [r0, #0]
 801a592:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801a596:	6001      	str	r1, [r0, #0]
 801a598:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a59a:	0000      	.short	0x0000
 801a59c:	e000ed88 	.word	0xe000ed88

0801a5a0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a5a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801a5a4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a5a8:	f021 0101 	bic.w	r1, r1, #1
 801a5ac:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a5b0:	4b05      	ldr	r3, [pc, #20]	@ (801a5c8 <pxPortInitialiseStack+0x28>)
 801a5b2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a5b6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a5ba:	f06f 0302 	mvn.w	r3, #2
 801a5be:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801a5c2:	3844      	subs	r0, #68	@ 0x44
 801a5c4:	4770      	bx	lr
 801a5c6:	bf00      	nop
 801a5c8:	0801a525 	.word	0x0801a525
 801a5cc:	00000000 	.word	0x00000000

0801a5d0 <SVC_Handler>:
	__asm volatile (
 801a5d0:	4b07      	ldr	r3, [pc, #28]	@ (801a5f0 <pxCurrentTCBConst2>)
 801a5d2:	6819      	ldr	r1, [r3, #0]
 801a5d4:	6808      	ldr	r0, [r1, #0]
 801a5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5da:	f380 8809 	msr	PSP, r0
 801a5de:	f3bf 8f6f 	isb	sy
 801a5e2:	f04f 0000 	mov.w	r0, #0
 801a5e6:	f380 8811 	msr	BASEPRI, r0
 801a5ea:	4770      	bx	lr
 801a5ec:	f3af 8000 	nop.w

0801a5f0 <pxCurrentTCBConst2>:
 801a5f0:	20003ba8 	.word	0x20003ba8

0801a5f4 <vPortEnterCritical>:
 801a5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a5f8:	f383 8811 	msr	BASEPRI, r3
 801a5fc:	f3bf 8f6f 	isb	sy
 801a600:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 801a604:	4a0b      	ldr	r2, [pc, #44]	@ (801a634 <vPortEnterCritical+0x40>)
 801a606:	6813      	ldr	r3, [r2, #0]
 801a608:	3301      	adds	r3, #1
 801a60a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801a60c:	2b01      	cmp	r3, #1
 801a60e:	d000      	beq.n	801a612 <vPortEnterCritical+0x1e>
}
 801a610:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a612:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a616:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801a61a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 801a61e:	d0f7      	beq.n	801a610 <vPortEnterCritical+0x1c>
 801a620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a624:	f383 8811 	msr	BASEPRI, r3
 801a628:	f3bf 8f6f 	isb	sy
 801a62c:	f3bf 8f4f 	dsb	sy
 801a630:	e7fe      	b.n	801a630 <vPortEnterCritical+0x3c>
 801a632:	bf00      	nop
 801a634:	20000114 	.word	0x20000114

0801a638 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 801a638:	4b09      	ldr	r3, [pc, #36]	@ (801a660 <vPortExitCritical+0x28>)
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	b943      	cbnz	r3, 801a650 <vPortExitCritical+0x18>
 801a63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a642:	f383 8811 	msr	BASEPRI, r3
 801a646:	f3bf 8f6f 	isb	sy
 801a64a:	f3bf 8f4f 	dsb	sy
 801a64e:	e7fe      	b.n	801a64e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 801a650:	3b01      	subs	r3, #1
 801a652:	4a03      	ldr	r2, [pc, #12]	@ (801a660 <vPortExitCritical+0x28>)
 801a654:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a656:	b90b      	cbnz	r3, 801a65c <vPortExitCritical+0x24>
	__asm volatile
 801a658:	f383 8811 	msr	BASEPRI, r3
}
 801a65c:	4770      	bx	lr
 801a65e:	bf00      	nop
 801a660:	20000114 	.word	0x20000114
	...

0801a670 <PendSV_Handler>:
	__asm volatile
 801a670:	f3ef 8009 	mrs	r0, PSP
 801a674:	f3bf 8f6f 	isb	sy
 801a678:	4b15      	ldr	r3, [pc, #84]	@ (801a6d0 <pxCurrentTCBConst>)
 801a67a:	681a      	ldr	r2, [r3, #0]
 801a67c:	f01e 0f10 	tst.w	lr, #16
 801a680:	bf08      	it	eq
 801a682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a68a:	6010      	str	r0, [r2, #0]
 801a68c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a690:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801a694:	f380 8811 	msr	BASEPRI, r0
 801a698:	f3bf 8f4f 	dsb	sy
 801a69c:	f3bf 8f6f 	isb	sy
 801a6a0:	f7ff faee 	bl	8019c80 <vTaskSwitchContext>
 801a6a4:	f04f 0000 	mov.w	r0, #0
 801a6a8:	f380 8811 	msr	BASEPRI, r0
 801a6ac:	bc09      	pop	{r0, r3}
 801a6ae:	6819      	ldr	r1, [r3, #0]
 801a6b0:	6808      	ldr	r0, [r1, #0]
 801a6b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6b6:	f01e 0f10 	tst.w	lr, #16
 801a6ba:	bf08      	it	eq
 801a6bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a6c0:	f380 8809 	msr	PSP, r0
 801a6c4:	f3bf 8f6f 	isb	sy
 801a6c8:	4770      	bx	lr
 801a6ca:	bf00      	nop
 801a6cc:	f3af 8000 	nop.w

0801a6d0 <pxCurrentTCBConst>:
 801a6d0:	20003ba8 	.word	0x20003ba8

0801a6d4 <xPortSysTickHandler>:
{
 801a6d4:	b508      	push	{r3, lr}
	__asm volatile
 801a6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a6da:	f383 8811 	msr	BASEPRI, r3
 801a6de:	f3bf 8f6f 	isb	sy
 801a6e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 801a6e6:	f7ff f99d 	bl	8019a24 <xTaskIncrementTick>
 801a6ea:	b128      	cbz	r0, 801a6f8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a6ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a6f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a6f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 801a6f8:	2300      	movs	r3, #0
 801a6fa:	f383 8811 	msr	BASEPRI, r3
}
 801a6fe:	bd08      	pop	{r3, pc}

0801a700 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a700:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 801a704:	2300      	movs	r3, #0
 801a706:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a708:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a70a:	4b05      	ldr	r3, [pc, #20]	@ (801a720 <vPortSetupTimerInterrupt+0x20>)
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	4905      	ldr	r1, [pc, #20]	@ (801a724 <vPortSetupTimerInterrupt+0x24>)
 801a710:	fba1 1303 	umull	r1, r3, r1, r3
 801a714:	099b      	lsrs	r3, r3, #6
 801a716:	3b01      	subs	r3, #1
 801a718:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a71a:	2307      	movs	r3, #7
 801a71c:	6113      	str	r3, [r2, #16]
}
 801a71e:	4770      	bx	lr
 801a720:	20000018 	.word	0x20000018
 801a724:	10624dd3 	.word	0x10624dd3

0801a728 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a728:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a72c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801a730:	4b3d      	ldr	r3, [pc, #244]	@ (801a828 <xPortStartScheduler+0x100>)
 801a732:	429a      	cmp	r2, r3
 801a734:	d01c      	beq.n	801a770 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a736:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a73a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801a73e:	4b3b      	ldr	r3, [pc, #236]	@ (801a82c <xPortStartScheduler+0x104>)
 801a740:	429a      	cmp	r2, r3
 801a742:	d01e      	beq.n	801a782 <xPortStartScheduler+0x5a>
{
 801a744:	b530      	push	{r4, r5, lr}
 801a746:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a748:	4b39      	ldr	r3, [pc, #228]	@ (801a830 <xPortStartScheduler+0x108>)
 801a74a:	781a      	ldrb	r2, [r3, #0]
 801a74c:	b2d2      	uxtb	r2, r2
 801a74e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a750:	22ff      	movs	r2, #255	@ 0xff
 801a752:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a754:	781b      	ldrb	r3, [r3, #0]
 801a756:	b2db      	uxtb	r3, r3
 801a758:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a75c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a760:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801a764:	4a33      	ldr	r2, [pc, #204]	@ (801a834 <xPortStartScheduler+0x10c>)
 801a766:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a768:	4b33      	ldr	r3, [pc, #204]	@ (801a838 <xPortStartScheduler+0x110>)
 801a76a:	2207      	movs	r2, #7
 801a76c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a76e:	e01b      	b.n	801a7a8 <xPortStartScheduler+0x80>
	__asm volatile
 801a770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a774:	f383 8811 	msr	BASEPRI, r3
 801a778:	f3bf 8f6f 	isb	sy
 801a77c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a780:	e7fe      	b.n	801a780 <xPortStartScheduler+0x58>
 801a782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a786:	f383 8811 	msr	BASEPRI, r3
 801a78a:	f3bf 8f6f 	isb	sy
 801a78e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a792:	e7fe      	b.n	801a792 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 801a794:	4a28      	ldr	r2, [pc, #160]	@ (801a838 <xPortStartScheduler+0x110>)
 801a796:	6813      	ldr	r3, [r2, #0]
 801a798:	3b01      	subs	r3, #1
 801a79a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a79c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a7a0:	005b      	lsls	r3, r3, #1
 801a7a2:	b2db      	uxtb	r3, r3
 801a7a4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a7a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a7ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a7b0:	d1f0      	bne.n	801a794 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a7b2:	4b21      	ldr	r3, [pc, #132]	@ (801a838 <xPortStartScheduler+0x110>)
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	2b03      	cmp	r3, #3
 801a7b8:	d008      	beq.n	801a7cc <xPortStartScheduler+0xa4>
 801a7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a7be:	f383 8811 	msr	BASEPRI, r3
 801a7c2:	f3bf 8f6f 	isb	sy
 801a7c6:	f3bf 8f4f 	dsb	sy
 801a7ca:	e7fe      	b.n	801a7ca <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a7cc:	021b      	lsls	r3, r3, #8
 801a7ce:	4a1a      	ldr	r2, [pc, #104]	@ (801a838 <xPortStartScheduler+0x110>)
 801a7d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a7d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801a7d6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a7d8:	9b01      	ldr	r3, [sp, #4]
 801a7da:	b2db      	uxtb	r3, r3
 801a7dc:	4a14      	ldr	r2, [pc, #80]	@ (801a830 <xPortStartScheduler+0x108>)
 801a7de:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a7e0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 801a7e4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801a7e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801a7ec:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a7f0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801a7f4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801a7f8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 801a7fc:	f7ff ff80 	bl	801a700 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801a800:	2500      	movs	r5, #0
 801a802:	4b0e      	ldr	r3, [pc, #56]	@ (801a83c <xPortStartScheduler+0x114>)
 801a804:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801a806:	f7ff fec1 	bl	801a58c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a80a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 801a80e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801a812:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 801a816:	f7ff fea5 	bl	801a564 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801a81a:	f7ff fa31 	bl	8019c80 <vTaskSwitchContext>
	prvTaskExitError();
 801a81e:	f7ff fe81 	bl	801a524 <prvTaskExitError>
}
 801a822:	4628      	mov	r0, r5
 801a824:	b003      	add	sp, #12
 801a826:	bd30      	pop	{r4, r5, pc}
 801a828:	410fc271 	.word	0x410fc271
 801a82c:	410fc270 	.word	0x410fc270
 801a830:	e000e400 	.word	0xe000e400
 801a834:	20003cdc 	.word	0x20003cdc
 801a838:	20003cd8 	.word	0x20003cd8
 801a83c:	20000114 	.word	0x20000114

0801a840 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a840:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a844:	2b0f      	cmp	r3, #15
 801a846:	d90f      	bls.n	801a868 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a848:	4a11      	ldr	r2, [pc, #68]	@ (801a890 <vPortValidateInterruptPriority+0x50>)
 801a84a:	5c9b      	ldrb	r3, [r3, r2]
 801a84c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a84e:	4a11      	ldr	r2, [pc, #68]	@ (801a894 <vPortValidateInterruptPriority+0x54>)
 801a850:	7812      	ldrb	r2, [r2, #0]
 801a852:	429a      	cmp	r2, r3
 801a854:	d908      	bls.n	801a868 <vPortValidateInterruptPriority+0x28>
 801a856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a85a:	f383 8811 	msr	BASEPRI, r3
 801a85e:	f3bf 8f6f 	isb	sy
 801a862:	f3bf 8f4f 	dsb	sy
 801a866:	e7fe      	b.n	801a866 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a868:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a86c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 801a870:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801a874:	4a08      	ldr	r2, [pc, #32]	@ (801a898 <vPortValidateInterruptPriority+0x58>)
 801a876:	6812      	ldr	r2, [r2, #0]
 801a878:	4293      	cmp	r3, r2
 801a87a:	d908      	bls.n	801a88e <vPortValidateInterruptPriority+0x4e>
 801a87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a880:	f383 8811 	msr	BASEPRI, r3
 801a884:	f3bf 8f6f 	isb	sy
 801a888:	f3bf 8f4f 	dsb	sy
 801a88c:	e7fe      	b.n	801a88c <vPortValidateInterruptPriority+0x4c>
	}
 801a88e:	4770      	bx	lr
 801a890:	e000e3f0 	.word	0xe000e3f0
 801a894:	20003cdc 	.word	0x20003cdc
 801a898:	20003cd8 	.word	0x20003cd8

0801a89c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a89c:	4a12      	ldr	r2, [pc, #72]	@ (801a8e8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a89e:	f012 0f07 	tst.w	r2, #7
 801a8a2:	d01f      	beq.n	801a8e4 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a8a4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a8a6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a8aa:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 801a8ae:	33f8      	adds	r3, #248	@ 0xf8
 801a8b0:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a8b2:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a8b4:	480d      	ldr	r0, [pc, #52]	@ (801a8ec <prvHeapInit+0x50>)
 801a8b6:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a8b8:	2100      	movs	r1, #0
 801a8ba:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a8bc:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801a8be:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a8c0:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801a8c4:	480a      	ldr	r0, [pc, #40]	@ (801a8f0 <prvHeapInit+0x54>)
 801a8c6:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801a8c8:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a8ca:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a8cc:	1a99      	subs	r1, r3, r2
 801a8ce:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a8d0:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a8d2:	4b08      	ldr	r3, [pc, #32]	@ (801a8f4 <prvHeapInit+0x58>)
 801a8d4:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a8d6:	4b08      	ldr	r3, [pc, #32]	@ (801a8f8 <prvHeapInit+0x5c>)
 801a8d8:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a8da:	4b08      	ldr	r3, [pc, #32]	@ (801a8fc <prvHeapInit+0x60>)
 801a8dc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801a8e0:	601a      	str	r2, [r3, #0]
}
 801a8e2:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a8e4:	4b06      	ldr	r3, [pc, #24]	@ (801a900 <prvHeapInit+0x64>)
 801a8e6:	e7e5      	b.n	801a8b4 <prvHeapInit+0x18>
 801a8e8:	20003d00 	.word	0x20003d00
 801a8ec:	20003cf8 	.word	0x20003cf8
 801a8f0:	20003cf4 	.word	0x20003cf4
 801a8f4:	20003cec 	.word	0x20003cec
 801a8f8:	20003cf0 	.word	0x20003cf0
 801a8fc:	20003ce0 	.word	0x20003ce0
 801a900:	000160f8 	.word	0x000160f8

0801a904 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a904:	4b16      	ldr	r3, [pc, #88]	@ (801a960 <prvInsertBlockIntoFreeList+0x5c>)
 801a906:	461a      	mov	r2, r3
 801a908:	681b      	ldr	r3, [r3, #0]
 801a90a:	4283      	cmp	r3, r0
 801a90c:	d3fb      	bcc.n	801a906 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a90e:	6851      	ldr	r1, [r2, #4]
 801a910:	eb02 0c01 	add.w	ip, r2, r1
 801a914:	4584      	cmp	ip, r0
 801a916:	d009      	beq.n	801a92c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a918:	6841      	ldr	r1, [r0, #4]
 801a91a:	eb00 0c01 	add.w	ip, r0, r1
 801a91e:	4563      	cmp	r3, ip
 801a920:	d009      	beq.n	801a936 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a922:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a924:	4290      	cmp	r0, r2
 801a926:	d019      	beq.n	801a95c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a928:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 801a92a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a92c:	6840      	ldr	r0, [r0, #4]
 801a92e:	4401      	add	r1, r0
 801a930:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 801a932:	4610      	mov	r0, r2
 801a934:	e7f0      	b.n	801a918 <prvInsertBlockIntoFreeList+0x14>
{
 801a936:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a938:	4c0a      	ldr	r4, [pc, #40]	@ (801a964 <prvInsertBlockIntoFreeList+0x60>)
 801a93a:	6824      	ldr	r4, [r4, #0]
 801a93c:	42a3      	cmp	r3, r4
 801a93e:	d00b      	beq.n	801a958 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a940:	685b      	ldr	r3, [r3, #4]
 801a942:	4419      	add	r1, r3
 801a944:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a946:	6813      	ldr	r3, [r2, #0]
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 801a94c:	4290      	cmp	r0, r2
 801a94e:	d000      	beq.n	801a952 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a950:	6010      	str	r0, [r2, #0]
	}
}
 801a952:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a956:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a958:	6004      	str	r4, [r0, #0]
 801a95a:	e7f7      	b.n	801a94c <prvInsertBlockIntoFreeList+0x48>
 801a95c:	4770      	bx	lr
 801a95e:	bf00      	nop
 801a960:	20003cf8 	.word	0x20003cf8
 801a964:	20003cf4 	.word	0x20003cf4

0801a968 <pvPortMalloc>:
{
 801a968:	b538      	push	{r3, r4, r5, lr}
 801a96a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801a96c:	f7ff f84c 	bl	8019a08 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801a970:	4b38      	ldr	r3, [pc, #224]	@ (801aa54 <pvPortMalloc+0xec>)
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	b1b3      	cbz	r3, 801a9a4 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a976:	4b38      	ldr	r3, [pc, #224]	@ (801aa58 <pvPortMalloc+0xf0>)
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	421c      	tst	r4, r3
 801a97c:	d150      	bne.n	801aa20 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 801a97e:	2c00      	cmp	r4, #0
 801a980:	d050      	beq.n	801aa24 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 801a982:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a986:	f014 0f07 	tst.w	r4, #7
 801a98a:	d002      	beq.n	801a992 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a98c:	f022 0207 	bic.w	r2, r2, #7
 801a990:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a992:	2a00      	cmp	r2, #0
 801a994:	d055      	beq.n	801aa42 <pvPortMalloc+0xda>
 801a996:	4b31      	ldr	r3, [pc, #196]	@ (801aa5c <pvPortMalloc+0xf4>)
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	4293      	cmp	r3, r2
 801a99c:	d353      	bcc.n	801aa46 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 801a99e:	4930      	ldr	r1, [pc, #192]	@ (801aa60 <pvPortMalloc+0xf8>)
 801a9a0:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a9a2:	e004      	b.n	801a9ae <pvPortMalloc+0x46>
			prvHeapInit();
 801a9a4:	f7ff ff7a 	bl	801a89c <prvHeapInit>
 801a9a8:	e7e5      	b.n	801a976 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 801a9aa:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801a9ac:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a9ae:	6863      	ldr	r3, [r4, #4]
 801a9b0:	4293      	cmp	r3, r2
 801a9b2:	d202      	bcs.n	801a9ba <pvPortMalloc+0x52>
 801a9b4:	6823      	ldr	r3, [r4, #0]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d1f7      	bne.n	801a9aa <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 801a9ba:	4b26      	ldr	r3, [pc, #152]	@ (801aa54 <pvPortMalloc+0xec>)
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	42a3      	cmp	r3, r4
 801a9c0:	d043      	beq.n	801aa4a <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a9c2:	680d      	ldr	r5, [r1, #0]
 801a9c4:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a9c6:	6823      	ldr	r3, [r4, #0]
 801a9c8:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a9ca:	6863      	ldr	r3, [r4, #4]
 801a9cc:	1a9b      	subs	r3, r3, r2
 801a9ce:	2b10      	cmp	r3, #16
 801a9d0:	d910      	bls.n	801a9f4 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a9d2:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a9d4:	f010 0f07 	tst.w	r0, #7
 801a9d8:	d008      	beq.n	801a9ec <pvPortMalloc+0x84>
 801a9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9de:	f383 8811 	msr	BASEPRI, r3
 801a9e2:	f3bf 8f6f 	isb	sy
 801a9e6:	f3bf 8f4f 	dsb	sy
 801a9ea:	e7fe      	b.n	801a9ea <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a9ec:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a9ee:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a9f0:	f7ff ff88 	bl	801a904 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a9f4:	6862      	ldr	r2, [r4, #4]
 801a9f6:	4919      	ldr	r1, [pc, #100]	@ (801aa5c <pvPortMalloc+0xf4>)
 801a9f8:	680b      	ldr	r3, [r1, #0]
 801a9fa:	1a9b      	subs	r3, r3, r2
 801a9fc:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a9fe:	4919      	ldr	r1, [pc, #100]	@ (801aa64 <pvPortMalloc+0xfc>)
 801aa00:	6809      	ldr	r1, [r1, #0]
 801aa02:	428b      	cmp	r3, r1
 801aa04:	d201      	bcs.n	801aa0a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801aa06:	4917      	ldr	r1, [pc, #92]	@ (801aa64 <pvPortMalloc+0xfc>)
 801aa08:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801aa0a:	4b13      	ldr	r3, [pc, #76]	@ (801aa58 <pvPortMalloc+0xf0>)
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	4313      	orrs	r3, r2
 801aa10:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801aa12:	2300      	movs	r3, #0
 801aa14:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 801aa16:	4a14      	ldr	r2, [pc, #80]	@ (801aa68 <pvPortMalloc+0x100>)
 801aa18:	6813      	ldr	r3, [r2, #0]
 801aa1a:	3301      	adds	r3, #1
 801aa1c:	6013      	str	r3, [r2, #0]
 801aa1e:	e002      	b.n	801aa26 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 801aa20:	2500      	movs	r5, #0
 801aa22:	e000      	b.n	801aa26 <pvPortMalloc+0xbe>
 801aa24:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 801aa26:	f7ff f889 	bl	8019b3c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801aa2a:	f015 0f07 	tst.w	r5, #7
 801aa2e:	d00e      	beq.n	801aa4e <pvPortMalloc+0xe6>
 801aa30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa34:	f383 8811 	msr	BASEPRI, r3
 801aa38:	f3bf 8f6f 	isb	sy
 801aa3c:	f3bf 8f4f 	dsb	sy
 801aa40:	e7fe      	b.n	801aa40 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 801aa42:	2500      	movs	r5, #0
 801aa44:	e7ef      	b.n	801aa26 <pvPortMalloc+0xbe>
 801aa46:	2500      	movs	r5, #0
 801aa48:	e7ed      	b.n	801aa26 <pvPortMalloc+0xbe>
 801aa4a:	2500      	movs	r5, #0
 801aa4c:	e7eb      	b.n	801aa26 <pvPortMalloc+0xbe>
}
 801aa4e:	4628      	mov	r0, r5
 801aa50:	bd38      	pop	{r3, r4, r5, pc}
 801aa52:	bf00      	nop
 801aa54:	20003cf4 	.word	0x20003cf4
 801aa58:	20003ce0 	.word	0x20003ce0
 801aa5c:	20003cf0 	.word	0x20003cf0
 801aa60:	20003cf8 	.word	0x20003cf8
 801aa64:	20003cec 	.word	0x20003cec
 801aa68:	20003ce8 	.word	0x20003ce8

0801aa6c <vPortFree>:
	if( pv != NULL )
 801aa6c:	2800      	cmp	r0, #0
 801aa6e:	d034      	beq.n	801aada <vPortFree+0x6e>
{
 801aa70:	b538      	push	{r3, r4, r5, lr}
 801aa72:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 801aa74:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801aa78:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801aa7c:	4a17      	ldr	r2, [pc, #92]	@ (801aadc <vPortFree+0x70>)
 801aa7e:	6812      	ldr	r2, [r2, #0]
 801aa80:	4213      	tst	r3, r2
 801aa82:	d108      	bne.n	801aa96 <vPortFree+0x2a>
 801aa84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa88:	f383 8811 	msr	BASEPRI, r3
 801aa8c:	f3bf 8f6f 	isb	sy
 801aa90:	f3bf 8f4f 	dsb	sy
 801aa94:	e7fe      	b.n	801aa94 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801aa96:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801aa9a:	b141      	cbz	r1, 801aaae <vPortFree+0x42>
 801aa9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aaa0:	f383 8811 	msr	BASEPRI, r3
 801aaa4:	f3bf 8f6f 	isb	sy
 801aaa8:	f3bf 8f4f 	dsb	sy
 801aaac:	e7fe      	b.n	801aaac <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801aaae:	ea23 0302 	bic.w	r3, r3, r2
 801aab2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801aab6:	f7fe ffa7 	bl	8019a08 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801aaba:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801aabe:	4a08      	ldr	r2, [pc, #32]	@ (801aae0 <vPortFree+0x74>)
 801aac0:	6813      	ldr	r3, [r2, #0]
 801aac2:	440b      	add	r3, r1
 801aac4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801aac6:	4628      	mov	r0, r5
 801aac8:	f7ff ff1c 	bl	801a904 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801aacc:	4a05      	ldr	r2, [pc, #20]	@ (801aae4 <vPortFree+0x78>)
 801aace:	6813      	ldr	r3, [r2, #0]
 801aad0:	3301      	adds	r3, #1
 801aad2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801aad4:	f7ff f832 	bl	8019b3c <xTaskResumeAll>
}
 801aad8:	bd38      	pop	{r3, r4, r5, pc}
 801aada:	4770      	bx	lr
 801aadc:	20003ce0 	.word	0x20003ce0
 801aae0:	20003cf0 	.word	0x20003cf0
 801aae4:	20003ce4 	.word	0x20003ce4

0801aae8 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 801aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaea:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 801aaec:	f7fe ff8c 	bl	8019a08 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 801aaf0:	4b17      	ldr	r3, [pc, #92]	@ (801ab50 <vPortGetHeapStats+0x68>)
 801aaf2:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 801aaf4:	b193      	cbz	r3, 801ab1c <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801aaf6:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801aafa:	2500      	movs	r5, #0
 801aafc:	462c      	mov	r4, r5
 801aafe:	e004      	b.n	801ab0a <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 801ab00:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 801ab02:	4a14      	ldr	r2, [pc, #80]	@ (801ab54 <vPortGetHeapStats+0x6c>)
 801ab04:	6812      	ldr	r2, [r2, #0]
 801ab06:	429a      	cmp	r2, r3
 801ab08:	d00c      	beq.n	801ab24 <vPortGetHeapStats+0x3c>
				xBlocks++;
 801ab0a:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 801ab0c:	685a      	ldr	r2, [r3, #4]
 801ab0e:	42aa      	cmp	r2, r5
 801ab10:	d900      	bls.n	801ab14 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 801ab12:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 801ab14:	42b2      	cmp	r2, r6
 801ab16:	d2f3      	bcs.n	801ab00 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 801ab18:	4616      	mov	r6, r2
 801ab1a:	e7f1      	b.n	801ab00 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801ab1c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801ab20:	2500      	movs	r5, #0
 801ab22:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 801ab24:	f7ff f80a 	bl	8019b3c <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 801ab28:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801ab2a:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801ab2c:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 801ab2e:	f7ff fd61 	bl	801a5f4 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801ab32:	4b09      	ldr	r3, [pc, #36]	@ (801ab58 <vPortGetHeapStats+0x70>)
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 801ab38:	4b08      	ldr	r3, [pc, #32]	@ (801ab5c <vPortGetHeapStats+0x74>)
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801ab3e:	4b08      	ldr	r3, [pc, #32]	@ (801ab60 <vPortGetHeapStats+0x78>)
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 801ab44:	4b07      	ldr	r3, [pc, #28]	@ (801ab64 <vPortGetHeapStats+0x7c>)
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801ab4a:	f7ff fd75 	bl	801a638 <vPortExitCritical>
}
 801ab4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab50:	20003cf8 	.word	0x20003cf8
 801ab54:	20003cf4 	.word	0x20003cf4
 801ab58:	20003cf0 	.word	0x20003cf0
 801ab5c:	20003ce8 	.word	0x20003ce8
 801ab60:	20003ce4 	.word	0x20003ce4
 801ab64:	20003cec 	.word	0x20003cec

0801ab68 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 801ab68:	2000      	movs	r0, #0
 801ab6a:	4770      	bx	lr

0801ab6c <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801ab6c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801ab6e:	fb01 f400 	mul.w	r4, r1, r0
 801ab72:	4620      	mov	r0, r4
 801ab74:	f7ff fef8 	bl	801a968 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801ab78:	4605      	mov	r5, r0
 801ab7a:	b118      	cbz	r0, 801ab84 <mg_calloc+0x18>
 801ab7c:	4622      	mov	r2, r4
 801ab7e:	2100      	movs	r1, #0
 801ab80:	f011 ff26 	bl	802c9d0 <memset>
}
 801ab84:	4628      	mov	r0, r5
 801ab86:	bd38      	pop	{r3, r4, r5, pc}

0801ab88 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 801ab88:	b508      	push	{r3, lr}
 801ab8a:	4684      	mov	ip, r0
 801ab8c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801ab8e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801ab92:	428b      	cmp	r3, r1
 801ab94:	d90a      	bls.n	801abac <block_device_read+0x24>
 801ab96:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801ab98:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801ab9c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801aba0:	fb01 e103 	mla	r1, r1, r3, lr
 801aba4:	f7fb f979 	bl	8015e9a <sFLASH_ReadBuffer>
}
 801aba8:	2000      	movs	r0, #0
 801abaa:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801abac:	4b03      	ldr	r3, [pc, #12]	@ (801abbc <block_device_read+0x34>)
 801abae:	4a04      	ldr	r2, [pc, #16]	@ (801abc0 <block_device_read+0x38>)
 801abb0:	f240 1119 	movw	r1, #281	@ 0x119
 801abb4:	4803      	ldr	r0, [pc, #12]	@ (801abc4 <block_device_read+0x3c>)
 801abb6:	f00f f9b9 	bl	8029f2c <__assert_func>
 801abba:	bf00      	nop
 801abbc:	080390b8 	.word	0x080390b8
 801abc0:	08039134 	.word	0x08039134
 801abc4:	080390d0 	.word	0x080390d0

0801abc8 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 801abc8:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 801abca:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801abcc:	428b      	cmp	r3, r1
 801abce:	d906      	bls.n	801abde <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 801abd0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801abd2:	fb01 f000 	mul.w	r0, r1, r0
 801abd6:	f7fb fa9d 	bl	8016114 <sFLASH_EraseSector>
}
 801abda:	2000      	movs	r0, #0
 801abdc:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801abde:	4b03      	ldr	r3, [pc, #12]	@ (801abec <block_device_erase+0x24>)
 801abe0:	4a03      	ldr	r2, [pc, #12]	@ (801abf0 <block_device_erase+0x28>)
 801abe2:	f240 1121 	movw	r1, #289	@ 0x121
 801abe6:	4803      	ldr	r0, [pc, #12]	@ (801abf4 <block_device_erase+0x2c>)
 801abe8:	f00f f9a0 	bl	8029f2c <__assert_func>
 801abec:	080390b8 	.word	0x080390b8
 801abf0:	08039120 	.word	0x08039120
 801abf4:	080390d0 	.word	0x080390d0

0801abf8 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801abf8:	b508      	push	{r3, lr}
 801abfa:	4684      	mov	ip, r0
 801abfc:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801abfe:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801ac02:	428b      	cmp	r3, r1
 801ac04:	d90a      	bls.n	801ac1c <block_device_prog+0x24>
 801ac06:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801ac08:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801ac0c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ac10:	fb01 e103 	mla	r1, r1, r3, lr
 801ac14:	f7fb fabc 	bl	8016190 <sFLASH_WriteBuffer>
}
 801ac18:	2000      	movs	r0, #0
 801ac1a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801ac1c:	4b03      	ldr	r3, [pc, #12]	@ (801ac2c <block_device_prog+0x34>)
 801ac1e:	4a04      	ldr	r2, [pc, #16]	@ (801ac30 <block_device_prog+0x38>)
 801ac20:	f240 1129 	movw	r1, #297	@ 0x129
 801ac24:	4803      	ldr	r0, [pc, #12]	@ (801ac34 <block_device_prog+0x3c>)
 801ac26:	f00f f981 	bl	8029f2c <__assert_func>
 801ac2a:	bf00      	nop
 801ac2c:	080390b8 	.word	0x080390b8
 801ac30:	0803910c 	.word	0x0803910c
 801ac34:	080390d0 	.word	0x080390d0

0801ac38 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 801ac38:	b530      	push	{r4, r5, lr}
 801ac3a:	b0c3      	sub	sp, #268	@ 0x10c
 801ac3c:	460d      	mov	r5, r1
 801ac3e:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 801ac40:	466a      	mov	r2, sp
 801ac42:	4601      	mov	r1, r0
 801ac44:	480b      	ldr	r0, [pc, #44]	@ (801ac74 <mg_fs_lfs_status+0x3c>)
 801ac46:	f004 fd97 	bl	801f778 <lfs_stat>
 801ac4a:	b110      	cbz	r0, 801ac52 <mg_fs_lfs_status+0x1a>
    return 0;
 801ac4c:	2000      	movs	r0, #0
}
 801ac4e:	b043      	add	sp, #268	@ 0x10c
 801ac50:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 801ac52:	b10d      	cbz	r5, 801ac58 <mg_fs_lfs_status+0x20>
 801ac54:	9b01      	ldr	r3, [sp, #4]
 801ac56:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 801ac58:	b11c      	cbz	r4, 801ac62 <mg_fs_lfs_status+0x2a>
 801ac5a:	2200      	movs	r2, #0
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 801ac62:	f89d 3000 	ldrb.w	r3, [sp]
 801ac66:	2b02      	cmp	r3, #2
 801ac68:	d001      	beq.n	801ac6e <mg_fs_lfs_status+0x36>
 801ac6a:	2001      	movs	r0, #1
 801ac6c:	e7ef      	b.n	801ac4e <mg_fs_lfs_status+0x16>
 801ac6e:	2004      	movs	r0, #4
 801ac70:	e7ed      	b.n	801ac4e <mg_fs_lfs_status+0x16>
 801ac72:	bf00      	nop
 801ac74:	20019e58 	.word	0x20019e58

0801ac78 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 801ac78:	b530      	push	{r4, r5, lr}
 801ac7a:	b0d1      	sub	sp, #324	@ 0x144
 801ac7c:	460d      	mov	r5, r1
 801ac7e:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 801ac80:	4602      	mov	r2, r0
 801ac82:	a901      	add	r1, sp, #4
 801ac84:	480a      	ldr	r0, [pc, #40]	@ (801acb0 <mg_fs_lfs_list+0x38>)
 801ac86:	f004 fe9d 	bl	801f9c4 <lfs_dir_open>
 801ac8a:	b120      	cbz	r0, 801ac96 <mg_fs_lfs_list+0x1e>
}
 801ac8c:	b051      	add	sp, #324	@ 0x144
 801ac8e:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 801ac90:	4621      	mov	r1, r4
 801ac92:	a810      	add	r0, sp, #64	@ 0x40
 801ac94:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801ac96:	aa0e      	add	r2, sp, #56	@ 0x38
 801ac98:	a901      	add	r1, sp, #4
 801ac9a:	4805      	ldr	r0, [pc, #20]	@ (801acb0 <mg_fs_lfs_list+0x38>)
 801ac9c:	f004 fecd 	bl	801fa3a <lfs_dir_read>
 801aca0:	2800      	cmp	r0, #0
 801aca2:	dcf5      	bgt.n	801ac90 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 801aca4:	a901      	add	r1, sp, #4
 801aca6:	4802      	ldr	r0, [pc, #8]	@ (801acb0 <mg_fs_lfs_list+0x38>)
 801aca8:	f004 feb4 	bl	801fa14 <lfs_dir_close>
}
 801acac:	e7ee      	b.n	801ac8c <mg_fs_lfs_list+0x14>
 801acae:	bf00      	nop
 801acb0:	20019e58 	.word	0x20019e58

0801acb4 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 801acb4:	b570      	push	{r4, r5, r6, lr}
 801acb6:	4605      	mov	r5, r0
 801acb8:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801acba:	2054      	movs	r0, #84	@ 0x54
 801acbc:	f7ff fe54 	bl	801a968 <pvPortMalloc>
    if (fd == NULL) return NULL;
 801acc0:	4606      	mov	r6, r0
 801acc2:	b188      	cbz	r0, 801ace8 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 801acc4:	f014 0301 	ands.w	r3, r4, #1
 801acc8:	d000      	beq.n	801accc <mg_fs_lfs_open+0x18>
 801acca:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801accc:	f014 0f02 	tst.w	r4, #2
 801acd0:	d003      	beq.n	801acda <mg_fs_lfs_open+0x26>
 801acd2:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 801acd6:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801acda:	462a      	mov	r2, r5
 801acdc:	4631      	mov	r1, r6
 801acde:	4806      	ldr	r0, [pc, #24]	@ (801acf8 <mg_fs_lfs_open+0x44>)
 801ace0:	f004 fd60 	bl	801f7a4 <lfs_file_open>
 801ace4:	2800      	cmp	r0, #0
 801ace6:	db01      	blt.n	801acec <mg_fs_lfs_open+0x38>
}
 801ace8:	4630      	mov	r0, r6
 801acea:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 801acec:	4630      	mov	r0, r6
 801acee:	f7ff febd 	bl	801aa6c <vPortFree>
        return NULL;
 801acf2:	2600      	movs	r6, #0
 801acf4:	e7f8      	b.n	801ace8 <mg_fs_lfs_open+0x34>
 801acf6:	bf00      	nop
 801acf8:	20019e58 	.word	0x20019e58

0801acfc <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 801acfc:	b510      	push	{r4, lr}
 801acfe:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 801ad00:	4601      	mov	r1, r0
 801ad02:	4803      	ldr	r0, [pc, #12]	@ (801ad10 <mg_fs_lfs_close+0x14>)
 801ad04:	f004 fd7a 	bl	801f7fc <lfs_file_close>
    free(file);
 801ad08:	4620      	mov	r0, r4
 801ad0a:	f7ff feaf 	bl	801aa6c <vPortFree>
}
 801ad0e:	bd10      	pop	{r4, pc}
 801ad10:	20019e58 	.word	0x20019e58

0801ad14 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 801ad14:	b508      	push	{r3, lr}
 801ad16:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 801ad18:	460a      	mov	r2, r1
 801ad1a:	4601      	mov	r1, r0
 801ad1c:	4802      	ldr	r0, [pc, #8]	@ (801ad28 <mg_fs_lfs_read+0x14>)
 801ad1e:	f004 fd93 	bl	801f848 <lfs_file_read>
}
 801ad22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801ad26:	bd08      	pop	{r3, pc}
 801ad28:	20019e58 	.word	0x20019e58

0801ad2c <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801ad2c:	b508      	push	{r3, lr}
 801ad2e:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 801ad30:	460a      	mov	r2, r1
 801ad32:	4601      	mov	r1, r0
 801ad34:	4802      	ldr	r0, [pc, #8]	@ (801ad40 <mg_fs_lfs_write+0x14>)
 801ad36:	f004 fdb3 	bl	801f8a0 <lfs_file_write>
}
 801ad3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801ad3e:	bd08      	pop	{r3, pc}
 801ad40:	20019e58 	.word	0x20019e58

0801ad44 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 801ad44:	b510      	push	{r4, lr}
 801ad46:	4604      	mov	r4, r0
 801ad48:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801ad4a:	2300      	movs	r3, #0
 801ad4c:	4601      	mov	r1, r0
 801ad4e:	4809      	ldr	r0, [pc, #36]	@ (801ad74 <mg_fs_lfs_seek+0x30>)
 801ad50:	f004 fdd2 	bl	801f8f8 <lfs_file_seek>
 801ad54:	2800      	cmp	r0, #0
 801ad56:	db06      	blt.n	801ad66 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 801ad58:	4621      	mov	r1, r4
 801ad5a:	4806      	ldr	r0, [pc, #24]	@ (801ad74 <mg_fs_lfs_seek+0x30>)
 801ad5c:	f004 fdf8 	bl	801f950 <lfs_file_tell>
     if (pos < 0) {
 801ad60:	2800      	cmp	r0, #0
 801ad62:	db03      	blt.n	801ad6c <mg_fs_lfs_seek+0x28>
}
 801ad64:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 801ad66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ad6a:	e7fb      	b.n	801ad64 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 801ad6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ad70:	e7f8      	b.n	801ad64 <mg_fs_lfs_seek+0x20>
 801ad72:	bf00      	nop
 801ad74:	20019e58 	.word	0x20019e58

0801ad78 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 801ad78:	b508      	push	{r3, lr}
 801ad7a:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 801ad7c:	4601      	mov	r1, r0
 801ad7e:	4803      	ldr	r0, [pc, #12]	@ (801ad8c <mg_fs_lfs_rename+0x14>)
 801ad80:	f004 fce5 	bl	801f74e <lfs_rename>
}
 801ad84:	fab0 f080 	clz	r0, r0
 801ad88:	0940      	lsrs	r0, r0, #5
 801ad8a:	bd08      	pop	{r3, pc}
 801ad8c:	20019e58 	.word	0x20019e58

0801ad90 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 801ad90:	b508      	push	{r3, lr}
 801ad92:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 801ad94:	4803      	ldr	r0, [pc, #12]	@ (801ada4 <mg_fs_lfs_remove+0x14>)
 801ad96:	f004 fcc7 	bl	801f728 <lfs_remove>
}
 801ad9a:	fab0 f080 	clz	r0, r0
 801ad9e:	0940      	lsrs	r0, r0, #5
 801ada0:	bd08      	pop	{r3, pc}
 801ada2:	bf00      	nop
 801ada4:	20019e58 	.word	0x20019e58

0801ada8 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 801ada8:	b508      	push	{r3, lr}
 801adaa:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 801adac:	4803      	ldr	r0, [pc, #12]	@ (801adbc <mg_fs_lfs_mkdir+0x14>)
 801adae:	f004 fdf5 	bl	801f99c <lfs_mkdir>
}
 801adb2:	fab0 f080 	clz	r0, r0
 801adb6:	0940      	lsrs	r0, r0, #5
 801adb8:	bd08      	pop	{r3, pc}
 801adba:	bf00      	nop
 801adbc:	20019e58 	.word	0x20019e58

0801adc0 <mg_fs_mounted>:
}
 801adc0:	4b01      	ldr	r3, [pc, #4]	@ (801adc8 <mg_fs_mounted+0x8>)
 801adc2:	7818      	ldrb	r0, [r3, #0]
 801adc4:	4770      	bx	lr
 801adc6:	bf00      	nop
 801adc8:	20019df8 	.word	0x20019df8

0801adcc <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 801adcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801add0:	b090      	sub	sp, #64	@ 0x40
 801add2:	4680      	mov	r8, r0
 801add4:	460f      	mov	r7, r1
	flash_info = sFLASH_GetInfo();
 801add6:	4668      	mov	r0, sp
 801add8:	f7fb f8b8 	bl	8015f4c <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 801addc:	9b00      	ldr	r3, [sp, #0]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d054      	beq.n	801ae8c <lfs_fs_ll_init+0xc0>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 801ade2:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 801ade6:	4621      	mov	r1, r4
 801ade8:	2001      	movs	r0, #1
 801adea:	f7ff febf 	bl	801ab6c <mg_calloc>
 801adee:	4605      	mov	r5, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 801adf0:	4621      	mov	r1, r4
 801adf2:	2001      	movs	r0, #1
 801adf4:	f7ff feba 	bl	801ab6c <mg_calloc>
 801adf8:	4606      	mov	r6, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801adfa:	4621      	mov	r1, r4
 801adfc:	2001      	movs	r0, #1
 801adfe:	f7ff feb5 	bl	801ab6c <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 801ae02:	2d00      	cmp	r5, #0
 801ae04:	d02b      	beq.n	801ae5e <lfs_fs_ll_init+0x92>
	cfg.read_size         = flash_info.read_size;
 801ae06:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ae0a:	4922      	ldr	r1, [pc, #136]	@ (801ae94 <lfs_fs_ll_init+0xc8>)
 801ae0c:	61cb      	str	r3, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 801ae0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ae12:	620b      	str	r3, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 801ae14:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ae18:	624b      	str	r3, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801ae1a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ae1e:	628b      	str	r3, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 801ae20:	634c      	str	r4, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 801ae22:	630c      	str	r4, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 801ae24:	63cd      	str	r5, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 801ae26:	640e      	str	r6, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801ae28:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 801ae2a:	4b1b      	ldr	r3, [pc, #108]	@ (801ae98 <lfs_fs_ll_init+0xcc>)
 801ae2c:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 801ae2e:	4b1b      	ldr	r3, [pc, #108]	@ (801ae9c <lfs_fs_ll_init+0xd0>)
 801ae30:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 801ae32:	4b1b      	ldr	r3, [pc, #108]	@ (801aea0 <lfs_fs_ll_init+0xd4>)
 801ae34:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 801ae36:	4b1b      	ldr	r3, [pc, #108]	@ (801aea4 <lfs_fs_ll_init+0xd8>)
 801ae38:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 801ae3a:	f8c1 8014 	str.w	r8, [r1, #20]
	cfg.unlock	= unlock;
 801ae3e:	618f      	str	r7, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 801ae40:	f242 7310 	movw	r3, #10000	@ 0x2710
 801ae44:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 801ae46:	4818      	ldr	r0, [pc, #96]	@ (801aea8 <lfs_fs_ll_init+0xdc>)
 801ae48:	f004 fc5b 	bl	801f702 <lfs_mount>
 801ae4c:	2800      	cmp	r0, #0
 801ae4e:	db0d      	blt.n	801ae6c <lfs_fs_ll_init+0xa0>
    	fs_mounted = 1;
 801ae50:	4b16      	ldr	r3, [pc, #88]	@ (801aeac <lfs_fs_ll_init+0xe0>)
 801ae52:	2201      	movs	r2, #1
 801ae54:	701a      	strb	r2, [r3, #0]
    	return 0;
 801ae56:	2000      	movs	r0, #0
}
 801ae58:	b010      	add	sp, #64	@ 0x40
 801ae5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 801ae5e:	2e00      	cmp	r6, #0
 801ae60:	d1d1      	bne.n	801ae06 <lfs_fs_ll_init+0x3a>
 801ae62:	2800      	cmp	r0, #0
 801ae64:	d1cf      	bne.n	801ae06 <lfs_fs_ll_init+0x3a>
		return -2;
 801ae66:	f06f 0001 	mvn.w	r0, #1
 801ae6a:	e7f5      	b.n	801ae58 <lfs_fs_ll_init+0x8c>
    	lfs_format(&lfs, &cfg);
 801ae6c:	4d09      	ldr	r5, [pc, #36]	@ (801ae94 <lfs_fs_ll_init+0xc8>)
 801ae6e:	4c0e      	ldr	r4, [pc, #56]	@ (801aea8 <lfs_fs_ll_init+0xdc>)
 801ae70:	4629      	mov	r1, r5
 801ae72:	4620      	mov	r0, r4
 801ae74:	f004 fc32 	bl	801f6dc <lfs_format>
    	if((err = lfs_mount(&lfs, &cfg)) == 0) fs_mounted = 1;
 801ae78:	4629      	mov	r1, r5
 801ae7a:	4620      	mov	r0, r4
 801ae7c:	f004 fc41 	bl	801f702 <lfs_mount>
 801ae80:	2800      	cmp	r0, #0
 801ae82:	d1e9      	bne.n	801ae58 <lfs_fs_ll_init+0x8c>
 801ae84:	4b09      	ldr	r3, [pc, #36]	@ (801aeac <lfs_fs_ll_init+0xe0>)
 801ae86:	2201      	movs	r2, #1
 801ae88:	701a      	strb	r2, [r3, #0]
    	return err;
 801ae8a:	e7e5      	b.n	801ae58 <lfs_fs_ll_init+0x8c>
	if (flash_info.flash_id == 0x0) return -1;
 801ae8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ae90:	e7e2      	b.n	801ae58 <lfs_fs_ll_init+0x8c>
 801ae92:	bf00      	nop
 801ae94:	20019dfc 	.word	0x20019dfc
 801ae98:	0801ab89 	.word	0x0801ab89
 801ae9c:	0801abf9 	.word	0x0801abf9
 801aea0:	0801abc9 	.word	0x0801abc9
 801aea4:	0801ab69 	.word	0x0801ab69
 801aea8:	20019e58 	.word	0x20019e58
 801aeac:	20019df8 	.word	0x20019df8

0801aeb0 <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801aeb0:	6803      	ldr	r3, [r0, #0]
 801aeb2:	680a      	ldr	r2, [r1, #0]
 801aeb4:	4293      	cmp	r3, r2
 801aeb6:	d004      	beq.n	801aec2 <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801aeb8:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801aeba:	428b      	cmp	r3, r1
 801aebc:	d015      	beq.n	801aeea <lfs_pair_issync+0x3a>
 801aebe:	2000      	movs	r0, #0
 801aec0:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 801aec2:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801aec4:	6844      	ldr	r4, [r0, #4]
 801aec6:	684d      	ldr	r5, [r1, #4]
 801aec8:	42ac      	cmp	r4, r5
 801aeca:	d00a      	beq.n	801aee2 <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801aecc:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801aece:	428b      	cmp	r3, r1
 801aed0:	d002      	beq.n	801aed8 <lfs_pair_issync+0x28>
 801aed2:	2000      	movs	r0, #0
}
 801aed4:	bc30      	pop	{r4, r5}
 801aed6:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801aed8:	6843      	ldr	r3, [r0, #4]
 801aeda:	429a      	cmp	r2, r3
 801aedc:	d003      	beq.n	801aee6 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801aede:	2000      	movs	r0, #0
 801aee0:	e7f8      	b.n	801aed4 <lfs_pair_issync+0x24>
 801aee2:	2001      	movs	r0, #1
 801aee4:	e7f6      	b.n	801aed4 <lfs_pair_issync+0x24>
 801aee6:	2001      	movs	r0, #1
 801aee8:	e7f4      	b.n	801aed4 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801aeea:	6843      	ldr	r3, [r0, #4]
 801aeec:	429a      	cmp	r2, r3
 801aeee:	d001      	beq.n	801aef4 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801aef0:	2000      	movs	r0, #0
 801aef2:	4770      	bx	lr
 801aef4:	2001      	movs	r0, #1
}
 801aef6:	4770      	bx	lr

0801aef8 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 801aef8:	2300      	movs	r3, #0
 801aefa:	2b02      	cmp	r3, #2
 801aefc:	dc0d      	bgt.n	801af1a <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801aefe:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801af00:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801af04:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 801af08:	4062      	eors	r2, r4
 801af0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 801af0e:	3301      	adds	r3, #1
 801af10:	2b02      	cmp	r3, #2
 801af12:	ddf5      	ble.n	801af00 <lfs_gstate_xor+0x8>
    }
}
 801af14:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af18:	4770      	bx	lr
 801af1a:	4770      	bx	lr

0801af1c <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801af1c:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801af1e:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801af20:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801af24:	d00f      	beq.n	801af46 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801af26:	6843      	ldr	r3, [r0, #4]
 801af28:	680a      	ldr	r2, [r1, #0]
 801af2a:	4293      	cmp	r3, r2
 801af2c:	d00d      	beq.n	801af4a <lfs_gstate_hasmovehere+0x2e>
 801af2e:	6880      	ldr	r0, [r0, #8]
 801af30:	6849      	ldr	r1, [r1, #4]
 801af32:	4288      	cmp	r0, r1
 801af34:	d00b      	beq.n	801af4e <lfs_gstate_hasmovehere+0x32>
 801af36:	428b      	cmp	r3, r1
 801af38:	d00b      	beq.n	801af52 <lfs_gstate_hasmovehere+0x36>
 801af3a:	4282      	cmp	r2, r0
 801af3c:	d001      	beq.n	801af42 <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801af3e:	2000      	movs	r0, #0
}
 801af40:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801af42:	2001      	movs	r0, #1
 801af44:	4770      	bx	lr
 801af46:	2000      	movs	r0, #0
 801af48:	4770      	bx	lr
 801af4a:	2001      	movs	r0, #1
 801af4c:	4770      	bx	lr
 801af4e:	2001      	movs	r0, #1
 801af50:	4770      	bx	lr
 801af52:	2001      	movs	r0, #1
 801af54:	4770      	bx	lr

0801af56 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801af56:	b082      	sub	sp, #8
 801af58:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801af5a:	ab01      	add	r3, sp, #4
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	b11b      	cbz	r3, 801af68 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 801af60:	428b      	cmp	r3, r1
 801af62:	d1fb      	bne.n	801af5c <lfs_mlist_isopen+0x6>
            return true;
 801af64:	2001      	movs	r0, #1
 801af66:	e000      	b.n	801af6a <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 801af68:	2000      	movs	r0, #0
}
 801af6a:	b002      	add	sp, #8
 801af6c:	4770      	bx	lr

0801af6e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801af6e:	3028      	adds	r0, #40	@ 0x28
 801af70:	e000      	b.n	801af74 <lfs_mlist_remove+0x6>
 801af72:	4618      	mov	r0, r3
 801af74:	6803      	ldr	r3, [r0, #0]
 801af76:	b123      	cbz	r3, 801af82 <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 801af78:	428b      	cmp	r3, r1
 801af7a:	d1fa      	bne.n	801af72 <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	6003      	str	r3, [r0, #0]
            break;
 801af80:	4770      	bx	lr
        }
    }
}
 801af82:	4770      	bx	lr

0801af84 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 801af84:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801af86:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 801af88:	6281      	str	r1, [r0, #40]	@ 0x28
}
 801af8a:	4770      	bx	lr

0801af8c <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 801af8c:	4800      	ldr	r0, [pc, #0]	@ (801af90 <lfs_fs_disk_version+0x4>)
 801af8e:	4770      	bx	lr
 801af90:	00020001 	.word	0x00020001

0801af94 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801af94:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801af96:	f7ff fff9 	bl	801af8c <lfs_fs_disk_version>

}
 801af9a:	0c00      	lsrs	r0, r0, #16
 801af9c:	bd08      	pop	{r3, pc}

0801af9e <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801af9e:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801afa0:	f7ff fff4 	bl	801af8c <lfs_fs_disk_version>
}
 801afa4:	b280      	uxth	r0, r0
 801afa6:	bd08      	pop	{r3, pc}

0801afa8 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 801afa8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801afaa:	6603      	str	r3, [r0, #96]	@ 0x60
}
 801afac:	4770      	bx	lr

0801afae <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801afae:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 801afb0:	2200      	movs	r2, #0
 801afb2:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801afb4:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801afb6:	f7ff fff7 	bl	801afa8 <lfs_alloc_ckpoint>
}
 801afba:	bd08      	pop	{r3, pc}

0801afbc <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 801afbc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801afbe:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 801afc0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801afc2:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 801afc4:	fbb1 f2f3 	udiv	r2, r1, r3
 801afc8:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 801afcc:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801afce:	428b      	cmp	r3, r1
 801afd0:	d90d      	bls.n	801afee <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801afd2:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801afd4:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 801afd6:	08c8      	lsrs	r0, r1, #3
 801afd8:	5c23      	ldrb	r3, [r4, r0]
 801afda:	f001 0107 	and.w	r1, r1, #7
 801afde:	2201      	movs	r2, #1
 801afe0:	408a      	lsls	r2, r1
 801afe2:	4313      	orrs	r3, r2
 801afe4:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 801afe6:	2000      	movs	r0, #0
 801afe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801afec:	4770      	bx	lr
 801afee:	2000      	movs	r0, #0
 801aff0:	4770      	bx	lr
	...

0801aff4 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801aff4:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801aff6:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 801affa:	d01c      	beq.n	801b036 <lfs_dir_traverse_filter+0x42>
 801affc:	4a19      	ldr	r2, [pc, #100]	@ (801b064 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801affe:	6803      	ldr	r3, [r0, #0]
 801b000:	ea83 0401 	eor.w	r4, r3, r1
 801b004:	4214      	tst	r4, r2
 801b006:	d018      	beq.n	801b03a <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b008:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 801b00c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801b010:	d013      	beq.n	801b03a <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801b012:	4c14      	ldr	r4, [pc, #80]	@ (801b064 <lfs_dir_traverse_filter+0x70>)
 801b014:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801b016:	4a14      	ldr	r2, [pc, #80]	@ (801b068 <lfs_dir_traverse_filter+0x74>)
 801b018:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801b01a:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801b01e:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801b022:	4294      	cmp	r4, r2
 801b024:	d009      	beq.n	801b03a <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 801b026:	0d0a      	lsrs	r2, r1, #20
 801b028:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b02c:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801b030:	d009      	beq.n	801b046 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801b032:	2000      	movs	r0, #0
 801b034:	e004      	b.n	801b040 <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801b036:	4a0d      	ldr	r2, [pc, #52]	@ (801b06c <lfs_dir_traverse_filter+0x78>)
 801b038:	e7e1      	b.n	801affe <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801b03a:	2300      	movs	r3, #0
 801b03c:	6003      	str	r3, [r0, #0]
        return true;
 801b03e:	2001      	movs	r0, #1
}
 801b040:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b044:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 801b046:	f3c1 2189 	ubfx	r1, r1, #10, #10
 801b04a:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b04e:	428c      	cmp	r4, r1
 801b050:	d305      	bcc.n	801b05e <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801b052:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801b054:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 801b058:	6003      	str	r3, [r0, #0]
    return false;
 801b05a:	2000      	movs	r0, #0
 801b05c:	e7f0      	b.n	801b040 <lfs_dir_traverse_filter+0x4c>
 801b05e:	2000      	movs	r0, #0
 801b060:	e7ee      	b.n	801b040 <lfs_dir_traverse_filter+0x4c>
 801b062:	bf00      	nop
 801b064:	7ffffc00 	.word	0x7ffffc00
 801b068:	000ffc00 	.word	0x000ffc00
 801b06c:	700ffc00 	.word	0x700ffc00

0801b070 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b070:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b074:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b078:	bf08      	it	eq
 801b07a:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 801b07c:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b080:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801b082:	6803      	ldr	r3, [r0, #0]
 801b084:	440b      	add	r3, r1
 801b086:	6003      	str	r3, [r0, #0]
    return 0;
}
 801b088:	2000      	movs	r0, #0
 801b08a:	4770      	bx	lr

0801b08c <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 801b08c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801b090:	2b00      	cmp	r3, #0
 801b092:	dd0b      	ble.n	801b0ac <lfs_dir_needsrelocation+0x20>
 801b094:	688a      	ldr	r2, [r1, #8]
 801b096:	3201      	adds	r2, #1
 801b098:	3301      	adds	r3, #1
 801b09a:	f043 0301 	orr.w	r3, r3, #1
 801b09e:	fbb2 f1f3 	udiv	r1, r2, r3
 801b0a2:	fb03 2211 	mls	r2, r3, r1, r2
 801b0a6:	b11a      	cbz	r2, 801b0b0 <lfs_dir_needsrelocation+0x24>
 801b0a8:	2000      	movs	r0, #0
 801b0aa:	4770      	bx	lr
 801b0ac:	2000      	movs	r0, #0
 801b0ae:	4770      	bx	lr
 801b0b0:	2001      	movs	r0, #1
}
 801b0b2:	4770      	bx	lr

0801b0b4 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 801b0b4:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801b0b6:	f7ff ff5a 	bl	801af6e <lfs_mlist_remove>

    return 0;
}
 801b0ba:	2000      	movs	r0, #0
 801b0bc:	bd08      	pop	{r3, pc}

0801b0be <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 801b0be:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801b0c0:	4770      	bx	lr

0801b0c2 <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801b0c2:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b0c4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b0c8:	d101      	bne.n	801b0ce <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 801b0ca:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 801b0cc:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 801b0ce:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801b0d0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801b0d2:	4298      	cmp	r0, r3
 801b0d4:	bf38      	it	cc
 801b0d6:	4618      	movcc	r0, r3
 801b0d8:	4770      	bx	lr

0801b0da <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801b0da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b0dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 801b0e0:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801b0e4:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801b0e6:	4770      	bx	lr

0801b0e8 <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 801b0e8:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801b0ea:	4b13      	ldr	r3, [pc, #76]	@ (801b138 <lfs_fs_prepmove+0x50>)
 801b0ec:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801b0ee:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801b0f0:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 801b0f4:	4561      	cmp	r1, ip
 801b0f6:	d017      	beq.n	801b128 <lfs_fs_prepmove+0x40>
 801b0f8:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 801b0fc:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 801b100:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801b104:	ea43 030c 	orr.w	r3, r3, ip
 801b108:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801b10a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801b10e:	4299      	cmp	r1, r3
 801b110:	d00d      	beq.n	801b12e <lfs_fs_prepmove+0x46>
 801b112:	6813      	ldr	r3, [r2, #0]
 801b114:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801b116:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801b11a:	4299      	cmp	r1, r3
 801b11c:	d009      	beq.n	801b132 <lfs_fs_prepmove+0x4a>
 801b11e:	6853      	ldr	r3, [r2, #4]
 801b120:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801b122:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b126:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801b128:	f04f 0c00 	mov.w	ip, #0
 801b12c:	e7ea      	b.n	801b104 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801b12e:	2300      	movs	r3, #0
 801b130:	e7f0      	b.n	801b114 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801b132:	2300      	movs	r3, #0
 801b134:	e7f4      	b.n	801b120 <lfs_fs_prepmove+0x38>
 801b136:	bf00      	nop
 801b138:	800003ff 	.word	0x800003ff

0801b13c <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 801b13c:	6803      	ldr	r3, [r0, #0]
 801b13e:	3301      	adds	r3, #1
 801b140:	6003      	str	r3, [r0, #0]
    return 0;
}
 801b142:	2000      	movs	r0, #0
 801b144:	4770      	bx	lr
	...

0801b148 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801b148:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 801b14a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b14c:	428b      	cmp	r3, r1
 801b14e:	d905      	bls.n	801b15c <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801b150:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b152:	68c3      	ldr	r3, [r0, #12]
 801b154:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801b156:	2800      	cmp	r0, #0
 801b158:	dc07      	bgt.n	801b16a <lfs_bd_erase+0x22>
}
 801b15a:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 801b15c:	4b06      	ldr	r3, [pc, #24]	@ (801b178 <lfs_bd_erase+0x30>)
 801b15e:	4a07      	ldr	r2, [pc, #28]	@ (801b17c <lfs_bd_erase+0x34>)
 801b160:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801b164:	4806      	ldr	r0, [pc, #24]	@ (801b180 <lfs_bd_erase+0x38>)
 801b166:	f00e fee1 	bl	8029f2c <__assert_func>
    LFS_ASSERT(err <= 0);
 801b16a:	4b06      	ldr	r3, [pc, #24]	@ (801b184 <lfs_bd_erase+0x3c>)
 801b16c:	4a03      	ldr	r2, [pc, #12]	@ (801b17c <lfs_bd_erase+0x34>)
 801b16e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801b172:	4803      	ldr	r0, [pc, #12]	@ (801b180 <lfs_bd_erase+0x38>)
 801b174:	f00e feda 	bl	8029f2c <__assert_func>
 801b178:	08039234 	.word	0x08039234
 801b17c:	08039e94 	.word	0x08039e94
 801b180:	08039148 	.word	0x08039148
 801b184:	08039178 	.word	0x08039178

0801b188 <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 801b188:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b18a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801b18c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b190:	b90a      	cbnz	r2, 801b196 <lfs_fs_preporphans+0xe>
 801b192:	2900      	cmp	r1, #0
 801b194:	db12      	blt.n	801b1bc <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801b196:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 801b19a:	d901      	bls.n	801b1a0 <lfs_fs_preporphans+0x18>
 801b19c:	2900      	cmp	r1, #0
 801b19e:	dc14      	bgt.n	801b1ca <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 801b1a0:	4419      	add	r1, r3
 801b1a2:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801b1a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 801b1a8:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 801b1ac:	3900      	subs	r1, #0
 801b1ae:	bf18      	it	ne
 801b1b0:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801b1b2:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801b1b6:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801b1b8:	2000      	movs	r0, #0
 801b1ba:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b1bc:	4b06      	ldr	r3, [pc, #24]	@ (801b1d8 <lfs_fs_preporphans+0x50>)
 801b1be:	4a07      	ldr	r2, [pc, #28]	@ (801b1dc <lfs_fs_preporphans+0x54>)
 801b1c0:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 801b1c4:	4806      	ldr	r0, [pc, #24]	@ (801b1e0 <lfs_fs_preporphans+0x58>)
 801b1c6:	f00e feb1 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801b1ca:	4b06      	ldr	r3, [pc, #24]	@ (801b1e4 <lfs_fs_preporphans+0x5c>)
 801b1cc:	4a03      	ldr	r2, [pc, #12]	@ (801b1dc <lfs_fs_preporphans+0x54>)
 801b1ce:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801b1d2:	4803      	ldr	r0, [pc, #12]	@ (801b1e0 <lfs_fs_preporphans+0x58>)
 801b1d4:	f00e feaa 	bl	8029f2c <__assert_func>
 801b1d8:	08039184 	.word	0x08039184
 801b1dc:	08039e64 	.word	0x08039e64
 801b1e0:	08039148 	.word	0x08039148
 801b1e4:	080391bc 	.word	0x080391bc

0801b1e8 <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801b1e8:	b510      	push	{r4, lr}
 801b1ea:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801b1ec:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b1ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b1f0:	21ff      	movs	r1, #255	@ 0xff
 801b1f2:	68e0      	ldr	r0, [r4, #12]
 801b1f4:	f011 fbec 	bl	802c9d0 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801b1f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b1fc:	6023      	str	r3, [r4, #0]
}
 801b1fe:	bd10      	pop	{r4, pc}

0801b200 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 801b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 801b202:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 801b204:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b206:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 801b208:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 801b20a:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 801b20e:	42bd      	cmp	r5, r7
 801b210:	d312      	bcc.n	801b238 <lfs_ctz_index+0x38>
 801b212:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801b214:	3801      	subs	r0, #1
 801b216:	f7f5 fdb7 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 801b21a:	1c84      	adds	r4, r0, #2
 801b21c:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801b220:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 801b224:	fb04 5517 	mls	r5, r4, r7, r5
 801b228:	4620      	mov	r0, r4
 801b22a:	f7f5 fdad 	bl	8010d88 <__popcountsi2>
 801b22e:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801b232:	6035      	str	r5, [r6, #0]
    return i;
 801b234:	4620      	mov	r0, r4
}
 801b236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801b238:	2000      	movs	r0, #0
 801b23a:	e7fc      	b.n	801b236 <lfs_ctz_index+0x36>

0801b23c <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 801b23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b240:	b087      	sub	sp, #28
 801b242:	4615      	mov	r5, r2
 801b244:	469b      	mov	fp, r3
 801b246:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b248:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b24a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801b24e:	eb04 020a 	add.w	r2, r4, sl
 801b252:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b256:	429a      	cmp	r2, r3
 801b258:	f200 80d0 	bhi.w	801b3fc <lfs_bd_read+0x1c0>
 801b25c:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 801b25e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b260:	2b00      	cmp	r3, #0
 801b262:	f000 80c7 	beq.w	801b3f4 <lfs_bd_read+0x1b8>
 801b266:	42bb      	cmp	r3, r7
 801b268:	f240 80cb 	bls.w	801b402 <lfs_bd_read+0x1c6>
 801b26c:	9003      	str	r0, [sp, #12]
 801b26e:	e084      	b.n	801b37a <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 801b270:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b274:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b278:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 801b27a:	42a1      	cmp	r1, r4
 801b27c:	d91e      	bls.n	801b2bc <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 801b27e:	42a3      	cmp	r3, r4
 801b280:	d905      	bls.n	801b28e <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 801b282:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 801b284:	4553      	cmp	r3, sl
 801b286:	bf28      	it	cs
 801b288:	4653      	movcs	r3, sl
 801b28a:	4698      	mov	r8, r3
 801b28c:	e081      	b.n	801b392 <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801b28e:	1b19      	subs	r1, r3, r4
 801b290:	eb02 0801 	add.w	r8, r2, r1
 801b294:	45d0      	cmp	r8, sl
 801b296:	bf28      	it	cs
 801b298:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801b29a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801b29e:	1ae3      	subs	r3, r4, r3
 801b2a0:	4642      	mov	r2, r8
 801b2a2:	4419      	add	r1, r3
 801b2a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b2a6:	f012 fdcf 	bl	802de48 <memcpy>
                data += diff;
 801b2aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b2ac:	4443      	add	r3, r8
 801b2ae:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801b2b0:	4444      	add	r4, r8
                size -= diff;
 801b2b2:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801b2b6:	e060      	b.n	801b37a <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 801b2b8:	46d0      	mov	r8, sl
 801b2ba:	e06a      	b.n	801b392 <lfs_bd_read+0x156>
 801b2bc:	46d0      	mov	r8, sl
 801b2be:	e068      	b.n	801b392 <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 801b2c0:	686b      	ldr	r3, [r5, #4]
 801b2c2:	68aa      	ldr	r2, [r5, #8]
 801b2c4:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 801b2c6:	42a1      	cmp	r1, r4
 801b2c8:	d966      	bls.n	801b398 <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 801b2ca:	42a3      	cmp	r3, r4
 801b2cc:	d904      	bls.n	801b2d8 <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 801b2ce:	1b1b      	subs	r3, r3, r4
 801b2d0:	4598      	cmp	r8, r3
 801b2d2:	bf28      	it	cs
 801b2d4:	4698      	movcs	r8, r3
 801b2d6:	e05f      	b.n	801b398 <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801b2d8:	1b19      	subs	r1, r3, r4
 801b2da:	440a      	add	r2, r1
 801b2dc:	4590      	cmp	r8, r2
 801b2de:	bf28      	it	cs
 801b2e0:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801b2e2:	68e9      	ldr	r1, [r5, #12]
 801b2e4:	1ae3      	subs	r3, r4, r3
 801b2e6:	4642      	mov	r2, r8
 801b2e8:	4419      	add	r1, r3
 801b2ea:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b2ec:	f012 fdac 	bl	802de48 <memcpy>
                data += diff;
 801b2f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b2f2:	4443      	add	r3, r8
 801b2f4:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801b2f6:	4444      	add	r4, r8
                size -= diff;
 801b2f8:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801b2fc:	e03d      	b.n	801b37a <lfs_bd_read+0x13e>
            data += diff;
 801b2fe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b300:	9b04      	ldr	r3, [sp, #16]
 801b302:	441a      	add	r2, r3
 801b304:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 801b306:	441c      	add	r4, r3
            size -= diff;
 801b308:	9b05      	ldr	r3, [sp, #20]
 801b30a:	eba3 0308 	sub.w	r3, r3, r8
 801b30e:	449a      	add	sl, r3
            continue;
 801b310:	e033      	b.n	801b37a <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801b312:	9b03      	ldr	r3, [sp, #12]
 801b314:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b316:	b10b      	cbz	r3, 801b31c <lfs_bd_read+0xe0>
 801b318:	42bb      	cmp	r3, r7
 801b31a:	d95f      	bls.n	801b3dc <lfs_bd_read+0x1a0>
        rcache->block = block;
 801b31c:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801b31e:	9e03      	ldr	r6, [sp, #12]
 801b320:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801b322:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 801b324:	fbb4 f3f2 	udiv	r3, r4, r2
 801b328:	fb02 4313 	mls	r3, r2, r3, r4
 801b32c:	1ae2      	subs	r2, r4, r3
 801b32e:	606a      	str	r2, [r5, #4]
                lfs_min(
 801b330:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801b334:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 801b338:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801b33c:	4401      	add	r1, r0
 801b33e:	3901      	subs	r1, #1
    return a - (a % alignment);
 801b340:	fbb1 fef0 	udiv	lr, r1, r0
 801b344:	fb00 101e 	mls	r0, r0, lr, r1
 801b348:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 801b34a:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 801b34e:	1b1b      	subs	r3, r3, r4
 801b350:	4288      	cmp	r0, r1
 801b352:	bf94      	ite	ls
 801b354:	181b      	addls	r3, r3, r0
 801b356:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 801b358:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 801b35c:	428b      	cmp	r3, r1
 801b35e:	bf28      	it	cs
 801b360:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 801b362:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801b364:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 801b366:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b36a:	9300      	str	r3, [sp, #0]
 801b36c:	68eb      	ldr	r3, [r5, #12]
 801b36e:	4639      	mov	r1, r7
 801b370:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 801b372:	1e03      	subs	r3, r0, #0
 801b374:	dc38      	bgt.n	801b3e8 <lfs_bd_read+0x1ac>
        if (err) {
 801b376:	2b00      	cmp	r3, #0
 801b378:	d146      	bne.n	801b408 <lfs_bd_read+0x1cc>
    while (size > 0) {
 801b37a:	f1ba 0f00 	cmp.w	sl, #0
 801b37e:	d03b      	beq.n	801b3f8 <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 801b380:	f1b9 0f00 	cmp.w	r9, #0
 801b384:	d098      	beq.n	801b2b8 <lfs_bd_read+0x7c>
 801b386:	f8d9 3000 	ldr.w	r3, [r9]
 801b38a:	42bb      	cmp	r3, r7
 801b38c:	f43f af70 	beq.w	801b270 <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 801b390:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 801b392:	682b      	ldr	r3, [r5, #0]
 801b394:	42bb      	cmp	r3, r7
 801b396:	d093      	beq.n	801b2c0 <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801b398:	45da      	cmp	sl, fp
 801b39a:	d3ba      	bcc.n	801b312 <lfs_bd_read+0xd6>
 801b39c:	9b03      	ldr	r3, [sp, #12]
 801b39e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b3a0:	69c2      	ldr	r2, [r0, #28]
 801b3a2:	fbb4 f3f2 	udiv	r3, r4, r2
 801b3a6:	fb02 4313 	mls	r3, r2, r3, r4
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d1b1      	bne.n	801b312 <lfs_bd_read+0xd6>
 801b3ae:	4552      	cmp	r2, sl
 801b3b0:	d8af      	bhi.n	801b312 <lfs_bd_read+0xd6>
    return a - (a % alignment);
 801b3b2:	fbb8 f3f2 	udiv	r3, r8, r2
 801b3b6:	fb02 8313 	mls	r3, r2, r3, r8
 801b3ba:	9305      	str	r3, [sp, #20]
 801b3bc:	eba8 0203 	sub.w	r2, r8, r3
 801b3c0:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801b3c2:	6842      	ldr	r2, [r0, #4]
 801b3c4:	4616      	mov	r6, r2
 801b3c6:	9304      	str	r3, [sp, #16]
 801b3c8:	9300      	str	r3, [sp, #0]
 801b3ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b3cc:	4622      	mov	r2, r4
 801b3ce:	4639      	mov	r1, r7
 801b3d0:	47b0      	blx	r6
            if (err) {
 801b3d2:	2800      	cmp	r0, #0
 801b3d4:	d093      	beq.n	801b2fe <lfs_bd_read+0xc2>
}
 801b3d6:	b007      	add	sp, #28
 801b3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801b3dc:	4b0b      	ldr	r3, [pc, #44]	@ (801b40c <lfs_bd_read+0x1d0>)
 801b3de:	4a0c      	ldr	r2, [pc, #48]	@ (801b410 <lfs_bd_read+0x1d4>)
 801b3e0:	216b      	movs	r1, #107	@ 0x6b
 801b3e2:	480c      	ldr	r0, [pc, #48]	@ (801b414 <lfs_bd_read+0x1d8>)
 801b3e4:	f00e fda2 	bl	8029f2c <__assert_func>
        LFS_ASSERT(err <= 0);
 801b3e8:	4b0b      	ldr	r3, [pc, #44]	@ (801b418 <lfs_bd_read+0x1dc>)
 801b3ea:	4a09      	ldr	r2, [pc, #36]	@ (801b410 <lfs_bd_read+0x1d4>)
 801b3ec:	2176      	movs	r1, #118	@ 0x76
 801b3ee:	4809      	ldr	r0, [pc, #36]	@ (801b414 <lfs_bd_read+0x1d8>)
 801b3f0:	f00e fd9c 	bl	8029f2c <__assert_func>
 801b3f4:	9003      	str	r0, [sp, #12]
 801b3f6:	e7c0      	b.n	801b37a <lfs_bd_read+0x13e>
    return 0;
 801b3f8:	2000      	movs	r0, #0
 801b3fa:	e7ec      	b.n	801b3d6 <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 801b3fc:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b400:	e7e9      	b.n	801b3d6 <lfs_bd_read+0x19a>
 801b402:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b406:	e7e6      	b.n	801b3d6 <lfs_bd_read+0x19a>
 801b408:	4618      	mov	r0, r3
 801b40a:	e7e4      	b.n	801b3d6 <lfs_bd_read+0x19a>
 801b40c:	080391f4 	.word	0x080391f4
 801b410:	08039ebc 	.word	0x08039ebc
 801b414:	08039148 	.word	0x08039148
 801b418:	08039178 	.word	0x08039178

0801b41c <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b420:	b089      	sub	sp, #36	@ 0x24
 801b422:	4607      	mov	r7, r0
 801b424:	468a      	mov	sl, r1
 801b426:	4690      	mov	r8, r2
 801b428:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 801b42a:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 801b42c:	690b      	ldr	r3, [r1, #16]
 801b42e:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801b430:	303c      	adds	r0, #60	@ 0x3c
 801b432:	f7ff fd73 	bl	801af1c <lfs_gstate_hasmovehere>
 801b436:	2800      	cmp	r0, #0
 801b438:	f000 808d 	beq.w	801b556 <lfs_dir_getslice+0x13a>
    return (tag & 0x000ffc00) >> 10;
 801b43c:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801b440:	2b00      	cmp	r3, #0
 801b442:	f000 808a 	beq.w	801b55a <lfs_dir_getslice+0x13e>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801b446:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801b448:	f3c2 238f 	ubfx	r3, r2, #10, #16
 801b44c:	f3c2 2289 	ubfx	r2, r2, #10, #10
 801b450:	f3cb 218f 	ubfx	r1, fp, #10, #16
 801b454:	f3cb 2089 	ubfx	r0, fp, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801b458:	404b      	eors	r3, r1
 801b45a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b45e:	2b00      	cmp	r3, #0
 801b460:	f000 8085 	beq.w	801b56e <lfs_dir_getslice+0x152>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801b464:	4282      	cmp	r2, r0
 801b466:	d37a      	bcc.n	801b55e <lfs_dir_getslice+0x142>
    lfs_stag_t gdiff = 0;
 801b468:	2600      	movs	r6, #0
 801b46a:	e006      	b.n	801b47a <lfs_dir_getslice+0x5e>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801b46c:	9605      	str	r6, [sp, #20]
 801b46e:	ebab 0306 	sub.w	r3, fp, r6
 801b472:	4063      	eors	r3, r4
 801b474:	ea13 0f08 	tst.w	r3, r8
 801b478:	d048      	beq.n	801b50c <lfs_dir_getslice+0xf0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801b47a:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b47c:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b480:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801b484:	bf14      	ite	ne
 801b486:	4623      	movne	r3, r4
 801b488:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 801b48a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b48e:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801b490:	3308      	adds	r3, #8
 801b492:	42ab      	cmp	r3, r5
 801b494:	d865      	bhi.n	801b562 <lfs_dir_getslice+0x146>
        off -= lfs_tag_dsize(ntag);
 801b496:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 801b498:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 801b49c:	2304      	movs	r3, #4
 801b49e:	9303      	str	r3, [sp, #12]
 801b4a0:	a907      	add	r1, sp, #28
 801b4a2:	9102      	str	r1, [sp, #8]
 801b4a4:	9501      	str	r5, [sp, #4]
 801b4a6:	9200      	str	r2, [sp, #0]
 801b4a8:	463a      	mov	r2, r7
 801b4aa:	2100      	movs	r1, #0
 801b4ac:	4638      	mov	r0, r7
 801b4ae:	f7ff fec5 	bl	801b23c <lfs_bd_read>
        if (err) {
 801b4b2:	4603      	mov	r3, r0
 801b4b4:	2800      	cmp	r0, #0
 801b4b6:	d156      	bne.n	801b566 <lfs_dir_getslice+0x14a>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801b4b8:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801b4ba:	ba1b      	rev	r3, r3
 801b4bc:	4063      	eors	r3, r4
 801b4be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b4c2:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 801b4c4:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d0cf      	beq.n	801b46c <lfs_dir_getslice+0x50>
    return (tag & 0x70000000) >> 20;
 801b4cc:	0d23      	lsrs	r3, r4, #20
 801b4ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 801b4d2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b4d6:	d1c9      	bne.n	801b46c <lfs_dir_getslice+0x50>
    return (tag & 0x000ffc00) >> 10;
 801b4d8:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801b4dc:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 801b4e0:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b4e4:	4584      	cmp	ip, r0
 801b4e6:	d3c1      	bcc.n	801b46c <lfs_dir_getslice+0x50>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801b4e8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801b4ec:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801b4f0:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801b4f4:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801b4f8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801b4fc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801b500:	42a2      	cmp	r2, r4
 801b502:	d037      	beq.n	801b574 <lfs_dir_getslice+0x158>
    return (int8_t)lfs_tag_chunk(tag);
 801b504:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801b506:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 801b50a:	e7af      	b.n	801b46c <lfs_dir_getslice+0x50>
            if (lfs_tag_isdelete(tag)) {
 801b50c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801b510:	d033      	beq.n	801b57a <lfs_dir_getslice+0x15e>
    return tag & 0x000003ff;
 801b512:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 801b516:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b518:	429e      	cmp	r6, r3
 801b51a:	bf28      	it	cs
 801b51c:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801b51e:	f8da 2000 	ldr.w	r2, [sl]
 801b522:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b524:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 801b526:	9603      	str	r6, [sp, #12]
 801b528:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b52a:	9102      	str	r1, [sp, #8]
 801b52c:	3304      	adds	r3, #4
 801b52e:	9301      	str	r3, [sp, #4]
 801b530:	9200      	str	r2, [sp, #0]
 801b532:	4633      	mov	r3, r6
 801b534:	463a      	mov	r2, r7
 801b536:	2100      	movs	r1, #0
 801b538:	4638      	mov	r0, r7
 801b53a:	f7ff fe7f 	bl	801b23c <lfs_bd_read>
            if (err) {
 801b53e:	4603      	mov	r3, r0
 801b540:	b988      	cbnz	r0, 801b566 <lfs_dir_getslice+0x14a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801b542:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b544:	1b9a      	subs	r2, r3, r6
 801b546:	2100      	movs	r1, #0
 801b548:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b54a:	1998      	adds	r0, r3, r6
 801b54c:	f011 fa40 	bl	802c9d0 <memset>
            return tag + gdiff;
 801b550:	9b05      	ldr	r3, [sp, #20]
 801b552:	4423      	add	r3, r4
 801b554:	e007      	b.n	801b566 <lfs_dir_getslice+0x14a>
    lfs_stag_t gdiff = 0;
 801b556:	2600      	movs	r6, #0
 801b558:	e78f      	b.n	801b47a <lfs_dir_getslice+0x5e>
 801b55a:	2600      	movs	r6, #0
 801b55c:	e78d      	b.n	801b47a <lfs_dir_getslice+0x5e>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801b55e:	4e08      	ldr	r6, [pc, #32]	@ (801b580 <lfs_dir_getslice+0x164>)
 801b560:	e78b      	b.n	801b47a <lfs_dir_getslice+0x5e>
    return LFS_ERR_NOENT;
 801b562:	f06f 0301 	mvn.w	r3, #1
}
 801b566:	4618      	mov	r0, r3
 801b568:	b009      	add	sp, #36	@ 0x24
 801b56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 801b56e:	f06f 0301 	mvn.w	r3, #1
 801b572:	e7f8      	b.n	801b566 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801b574:	f06f 0301 	mvn.w	r3, #1
 801b578:	e7f5      	b.n	801b566 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801b57a:	f06f 0301 	mvn.w	r3, #1
 801b57e:	e7f2      	b.n	801b566 <lfs_dir_getslice+0x14a>
 801b580:	fffffc00 	.word	0xfffffc00

0801b584 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801b584:	b510      	push	{r4, lr}
 801b586:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 801b588:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 801b58c:	9402      	str	r4, [sp, #8]
 801b58e:	9c06      	ldr	r4, [sp, #24]
 801b590:	9401      	str	r4, [sp, #4]
 801b592:	2400      	movs	r4, #0
 801b594:	9400      	str	r4, [sp, #0]
 801b596:	f7ff ff41 	bl	801b41c <lfs_dir_getslice>
}
 801b59a:	b004      	add	sp, #16
 801b59c:	bd10      	pop	{r4, pc}
	...

0801b5a0 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 801b5a0:	b510      	push	{r4, lr}
 801b5a2:	b086      	sub	sp, #24
 801b5a4:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801b5a6:	ab03      	add	r3, sp, #12
 801b5a8:	9300      	str	r3, [sp, #0]
 801b5aa:	4b09      	ldr	r3, [pc, #36]	@ (801b5d0 <lfs_dir_getgstate+0x30>)
 801b5ac:	4a09      	ldr	r2, [pc, #36]	@ (801b5d4 <lfs_dir_getgstate+0x34>)
 801b5ae:	f7ff ffe9 	bl	801b584 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 801b5b2:	2800      	cmp	r0, #0
 801b5b4:	da04      	bge.n	801b5c0 <lfs_dir_getgstate+0x20>
 801b5b6:	f110 0f02 	cmn.w	r0, #2
 801b5ba:	d106      	bne.n	801b5ca <lfs_dir_getgstate+0x2a>
    return 0;
 801b5bc:	2000      	movs	r0, #0
 801b5be:	e004      	b.n	801b5ca <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 801b5c0:	a903      	add	r1, sp, #12
 801b5c2:	4620      	mov	r0, r4
 801b5c4:	f7ff fc98 	bl	801aef8 <lfs_gstate_xor>
    return 0;
 801b5c8:	2000      	movs	r0, #0
}
 801b5ca:	b006      	add	sp, #24
 801b5cc:	bd10      	pop	{r4, pc}
 801b5ce:	bf00      	nop
 801b5d0:	7ff0000c 	.word	0x7ff0000c
 801b5d4:	7ff00000 	.word	0x7ff00000

0801b5d8 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 801b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5dc:	b089      	sub	sp, #36	@ 0x24
 801b5de:	461c      	mov	r4, r3
 801b5e0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b5e2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b5e4:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 801b5e6:	b923      	cbnz	r3, 801b5f2 <lfs_ctz_traverse+0x1a>
        return 0;
 801b5e8:	2300      	movs	r3, #0
}
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	b009      	add	sp, #36	@ 0x24
 801b5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5f2:	4680      	mov	r8, r0
 801b5f4:	4689      	mov	r9, r1
 801b5f6:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801b5f8:	3b01      	subs	r3, #1
 801b5fa:	9307      	str	r3, [sp, #28]
 801b5fc:	a907      	add	r1, sp, #28
 801b5fe:	f7ff fdff 	bl	801b200 <lfs_ctz_index>
 801b602:	4605      	mov	r5, r0
        int err = cb(data, head);
 801b604:	4621      	mov	r1, r4
 801b606:	4638      	mov	r0, r7
 801b608:	47b0      	blx	r6
        if (err) {
 801b60a:	4603      	mov	r3, r0
 801b60c:	2800      	cmp	r0, #0
 801b60e:	d1ec      	bne.n	801b5ea <lfs_ctz_traverse+0x12>
        if (index == 0) {
 801b610:	2d00      	cmp	r5, #0
 801b612:	d0ea      	beq.n	801b5ea <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 801b614:	f005 0b01 	and.w	fp, r5, #1
 801b618:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 801b61c:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 801b61e:	9303      	str	r3, [sp, #12]
 801b620:	aa05      	add	r2, sp, #20
 801b622:	9202      	str	r2, [sp, #8]
 801b624:	2200      	movs	r2, #0
 801b626:	9201      	str	r2, [sp, #4]
 801b628:	9400      	str	r4, [sp, #0]
 801b62a:	4652      	mov	r2, sl
 801b62c:	4649      	mov	r1, r9
 801b62e:	4640      	mov	r0, r8
 801b630:	f7ff fe04 	bl	801b23c <lfs_bd_read>
        if (err) {
 801b634:	4604      	mov	r4, r0
 801b636:	b9c8      	cbnz	r0, 801b66c <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 801b638:	43eb      	mvns	r3, r5
 801b63a:	f003 0301 	and.w	r3, r3, #1
 801b63e:	42a3      	cmp	r3, r4
 801b640:	dd0b      	ble.n	801b65a <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 801b642:	ab08      	add	r3, sp, #32
 801b644:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b648:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801b64c:	4638      	mov	r0, r7
 801b64e:	47b0      	blx	r6
            if (err) {
 801b650:	4603      	mov	r3, r0
 801b652:	2800      	cmp	r0, #0
 801b654:	d1c9      	bne.n	801b5ea <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 801b656:	3401      	adds	r4, #1
 801b658:	e7ee      	b.n	801b638 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 801b65a:	aa08      	add	r2, sp, #32
 801b65c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b660:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 801b664:	f1ab 0b02 	sub.w	fp, fp, #2
 801b668:	445d      	add	r5, fp
    while (true) {
 801b66a:	e7cb      	b.n	801b604 <lfs_ctz_traverse+0x2c>
            return err;
 801b66c:	4603      	mov	r3, r0
 801b66e:	e7bc      	b.n	801b5ea <lfs_ctz_traverse+0x12>

0801b670 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 801b670:	b530      	push	{r4, r5, lr}
 801b672:	b087      	sub	sp, #28
 801b674:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 801b676:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 801b678:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 801b67c:	6811      	ldr	r1, [r2, #0]
 801b67e:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 801b680:	2508      	movs	r5, #8
 801b682:	9503      	str	r5, [sp, #12]
 801b684:	ad04      	add	r5, sp, #16
 801b686:	9502      	str	r5, [sp, #8]
 801b688:	9201      	str	r2, [sp, #4]
 801b68a:	9100      	str	r1, [sp, #0]
 801b68c:	4602      	mov	r2, r0
 801b68e:	f100 0110 	add.w	r1, r0, #16
 801b692:	f7ff fdd3 	bl	801b23c <lfs_bd_read>
    if (err) {
 801b696:	4603      	mov	r3, r0
 801b698:	b978      	cbnz	r0, 801b6ba <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801b69a:	9a04      	ldr	r2, [sp, #16]
 801b69c:	6861      	ldr	r1, [r4, #4]
 801b69e:	4291      	cmp	r1, r2
 801b6a0:	d008      	beq.n	801b6b4 <lfs_fs_parent_match+0x44>
 801b6a2:	9d05      	ldr	r5, [sp, #20]
 801b6a4:	68a0      	ldr	r0, [r4, #8]
 801b6a6:	4285      	cmp	r5, r0
 801b6a8:	d004      	beq.n	801b6b4 <lfs_fs_parent_match+0x44>
 801b6aa:	4282      	cmp	r2, r0
 801b6ac:	d002      	beq.n	801b6b4 <lfs_fs_parent_match+0x44>
 801b6ae:	42a9      	cmp	r1, r5
 801b6b0:	d000      	beq.n	801b6b4 <lfs_fs_parent_match+0x44>
 801b6b2:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 801b6b4:	3b00      	subs	r3, #0
 801b6b6:	bf18      	it	ne
 801b6b8:	2301      	movne	r3, #1
}
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	b007      	add	sp, #28
 801b6be:	bd30      	pop	{r4, r5, pc}

0801b6c0 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801b6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6c4:	b0af      	sub	sp, #188	@ 0xbc
 801b6c6:	9007      	str	r0, [sp, #28]
 801b6c8:	460e      	mov	r6, r1
 801b6ca:	4617      	mov	r7, r2
 801b6cc:	461c      	mov	r4, r3
 801b6ce:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 801b6d2:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 801b6d6:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 801b6da:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 801b6de:	9304      	str	r3, [sp, #16]
 801b6e0:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 801b6e4:	9305      	str	r3, [sp, #20]
 801b6e6:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 801b6ea:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 801b6ec:	2500      	movs	r5, #0
 801b6ee:	950d      	str	r5, [sp, #52]	@ 0x34
 801b6f0:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b6f2:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b6f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b6fa:	bf14      	ite	ne
 801b6fc:	46a1      	movne	r9, r4
 801b6fe:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 801b702:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b706:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801b70a:	44b9      	add	r9, r7
 801b70c:	68f3      	ldr	r3, [r6, #12]
 801b70e:	4599      	cmp	r9, r3
 801b710:	d35e      	bcc.n	801b7d0 <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 801b712:	f1bb 0f00 	cmp.w	fp, #0
 801b716:	f340 80fa 	ble.w	801b90e <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 801b71a:	f8d8 3000 	ldr.w	r3, [r8]
 801b71e:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 801b720:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 801b724:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 801b728:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801b72c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b72e:	4ba9      	ldr	r3, [pc, #676]	@ (801b9d4 <lfs_dir_traverse+0x314>)
 801b730:	ea0a 0303 	and.w	r3, sl, r3
 801b734:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801b736:	404a      	eors	r2, r1
 801b738:	401a      	ands	r2, r3
 801b73a:	d1da      	bne.n	801b6f2 <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 801b73c:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 801b740:	2b00      	cmp	r3, #0
 801b742:	f000 8116 	beq.w	801b972 <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801b746:	2d02      	cmp	r5, #2
 801b748:	d862      	bhi.n	801b810 <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 801b74a:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b74e:	a82e      	add	r0, sp, #184	@ 0xb8
 801b750:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801b754:	f843 6c78 	str.w	r6, [r3, #-120]
 801b758:	f843 7c74 	str.w	r7, [r3, #-116]
 801b75c:	f843 4c70 	str.w	r4, [r3, #-112]
 801b760:	f843 8c6c 	str.w	r8, [r3, #-108]
 801b764:	f843 bc68 	str.w	fp, [r3, #-104]
 801b768:	f843 ac64 	str.w	sl, [r3, #-100]
 801b76c:	983b      	ldr	r0, [sp, #236]	@ 0xec
 801b76e:	f843 0c60 	str.w	r0, [r3, #-96]
 801b772:	9804      	ldr	r0, [sp, #16]
 801b774:	f823 0c5c 	strh.w	r0, [r3, #-92]
 801b778:	9805      	ldr	r0, [sp, #20]
 801b77a:	f823 0c5a 	strh.w	r0, [r3, #-90]
 801b77e:	9806      	ldr	r0, [sp, #24]
 801b780:	f823 0c58 	strh.w	r0, [r3, #-88]
 801b784:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 801b786:	f843 0c54 	str.w	r0, [r3, #-84]
 801b78a:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801b78c:	f843 0c50 	str.w	r0, [r3, #-80]
 801b790:	f843 1c4c 	str.w	r1, [r3, #-76]
 801b794:	f843 9c48 	str.w	r9, [r3, #-72]
 801b798:	3b44      	subs	r3, #68	@ 0x44
 801b79a:	a90d      	add	r1, sp, #52	@ 0x34
 801b79c:	c903      	ldmia	r1, {r0, r1}
 801b79e:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 801b7a2:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b7a6:	009b      	lsls	r3, r3, #2
 801b7a8:	3328      	adds	r3, #40	@ 0x28
 801b7aa:	a910      	add	r1, sp, #64	@ 0x40
 801b7ac:	440b      	add	r3, r1
 801b7ae:	3304      	adds	r3, #4
 801b7b0:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 801b7b2:	3501      	adds	r5, #1
                ttag = 0;
 801b7b4:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 801b7b6:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 801b7b8:	4b87      	ldr	r3, [pc, #540]	@ (801b9d8 <lfs_dir_traverse+0x318>)
 801b7ba:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 801b7bc:	2300      	movs	r3, #0
 801b7be:	9306      	str	r3, [sp, #24]
                end = 0;
 801b7c0:	9305      	str	r3, [sp, #20]
                begin = 0;
 801b7c2:	9304      	str	r3, [sp, #16]
 801b7c4:	e795      	b.n	801b6f2 <lfs_dir_traverse+0x32>
 801b7c6:	9d08      	ldr	r5, [sp, #32]
 801b7c8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801b7ca:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801b7cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b7ce:	e790      	b.n	801b6f2 <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 801b7d0:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 801b7d2:	2304      	movs	r3, #4
 801b7d4:	9303      	str	r3, [sp, #12]
 801b7d6:	a90f      	add	r1, sp, #60	@ 0x3c
 801b7d8:	9102      	str	r1, [sp, #8]
 801b7da:	f8cd 9004 	str.w	r9, [sp, #4]
 801b7de:	9200      	str	r2, [sp, #0]
 801b7e0:	9a07      	ldr	r2, [sp, #28]
 801b7e2:	2100      	movs	r1, #0
 801b7e4:	4610      	mov	r0, r2
 801b7e6:	f7ff fd29 	bl	801b23c <lfs_bd_read>
                if (err) {
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	2800      	cmp	r0, #0
 801b7ee:	f040 80ec 	bne.w	801b9ca <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801b7f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 801b7f4:	ba1b      	rev	r3, r3
 801b7f6:	4063      	eors	r3, r4
 801b7f8:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 801b7fc:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 801b7fe:	6833      	ldr	r3, [r6, #0]
 801b800:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 801b802:	f109 0304 	add.w	r3, r9, #4
 801b806:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 801b808:	464f      	mov	r7, r9
                buffer = &disk;
 801b80a:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 801b80e:	e78d      	b.n	801b72c <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801b810:	4b72      	ldr	r3, [pc, #456]	@ (801b9dc <lfs_dir_traverse+0x31c>)
 801b812:	4a73      	ldr	r2, [pc, #460]	@ (801b9e0 <lfs_dir_traverse+0x320>)
 801b814:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801b818:	4872      	ldr	r0, [pc, #456]	@ (801b9e4 <lfs_dir_traverse+0x324>)
 801b81a:	f00e fb87 	bl	8029f2c <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 801b81e:	4b6e      	ldr	r3, [pc, #440]	@ (801b9d8 <lfs_dir_traverse+0x318>)
 801b820:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801b822:	429a      	cmp	r2, r3
 801b824:	f43f af65 	beq.w	801b6f2 <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 801b828:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b82c:	aa2e      	add	r2, sp, #184	@ 0xb8
 801b82e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b832:	223c      	movs	r2, #60	@ 0x3c
 801b834:	2100      	movs	r1, #0
 801b836:	9309      	str	r3, [sp, #36]	@ 0x24
 801b838:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 801b83c:	f011 f8c8 	bl	802c9d0 <memset>
 801b840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b842:	f843 6c78 	str.w	r6, [r3, #-120]
 801b846:	f843 7c74 	str.w	r7, [r3, #-116]
 801b84a:	f843 4c70 	str.w	r4, [r3, #-112]
 801b84e:	f843 8c6c 	str.w	r8, [r3, #-108]
 801b852:	f843 bc68 	str.w	fp, [r3, #-104]
 801b856:	f843 ac64 	str.w	sl, [r3, #-100]
 801b85a:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801b85c:	f843 2c60 	str.w	r2, [r3, #-96]
 801b860:	9a04      	ldr	r2, [sp, #16]
 801b862:	f823 2c5c 	strh.w	r2, [r3, #-92]
 801b866:	9a05      	ldr	r2, [sp, #20]
 801b868:	f823 2c5a 	strh.w	r2, [r3, #-90]
 801b86c:	9906      	ldr	r1, [sp, #24]
 801b86e:	f823 1c58 	strh.w	r1, [r3, #-88]
 801b872:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801b874:	f843 2c54 	str.w	r2, [r3, #-84]
 801b878:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801b87a:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 801b87e:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 801b880:	9b08      	ldr	r3, [sp, #32]
 801b882:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801b886:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 801b888:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 801b88c:	1c50      	adds	r0, r2, #1
 801b88e:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 801b890:	1a9b      	subs	r3, r3, r2
 801b892:	fa11 f383 	uxtah	r3, r1, r3
 801b896:	b21b      	sxth	r3, r3
 801b898:	9306      	str	r3, [sp, #24]
            dir = buffer;
 801b89a:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801b89c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801b8a0:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801b8a2:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801b9e8 <lfs_dir_traverse+0x328>
            attrcount = 0;
 801b8a6:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 801b8aa:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 801b8ac:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 801b8b0:	465f      	mov	r7, fp
 801b8b2:	e71e      	b.n	801b6f2 <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b8b4:	2300      	movs	r3, #0
 801b8b6:	9508      	str	r5, [sp, #32]
 801b8b8:	9609      	str	r6, [sp, #36]	@ 0x24
 801b8ba:	970a      	str	r7, [sp, #40]	@ 0x28
 801b8bc:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b8be:	461c      	mov	r4, r3
 801b8c0:	9d06      	ldr	r5, [sp, #24]
 801b8c2:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 801b8c4:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801b8c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 801b8c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b8cc:	4294      	cmp	r4, r2
 801b8ce:	d219      	bcs.n	801b904 <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801b8d0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801b8d4:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 801b8d8:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 801b8dc:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 801b8e0:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801b8e4:	442b      	add	r3, r5
 801b8e6:	029b      	lsls	r3, r3, #10
 801b8e8:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 801b8ec:	6891      	ldr	r1, [r2, #8]
 801b8ee:	6852      	ldr	r2, [r2, #4]
 801b8f0:	4319      	orrs	r1, r3
 801b8f2:	4638      	mov	r0, r7
 801b8f4:	47b0      	blx	r6
                if (res < 0) {
 801b8f6:	2800      	cmp	r0, #0
 801b8f8:	db66      	blt.n	801b9c8 <lfs_dir_traverse+0x308>
                if (res) {
 801b8fa:	2800      	cmp	r0, #0
 801b8fc:	f47f af63 	bne.w	801b7c6 <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b900:	3401      	adds	r4, #1
 801b902:	e7e0      	b.n	801b8c6 <lfs_dir_traverse+0x206>
 801b904:	9d08      	ldr	r5, [sp, #32]
 801b906:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801b908:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801b90a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b90c:	e6f1      	b.n	801b6f2 <lfs_dir_traverse+0x32>
                res = 0;
 801b90e:	2300      	movs	r3, #0
    if (sp > 0) {
 801b910:	2d00      	cmp	r5, #0
 801b912:	d05a      	beq.n	801b9ca <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801b914:	3d01      	subs	r5, #1
 801b916:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b91a:	aa2e      	add	r2, sp, #184	@ 0xb8
 801b91c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b920:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801b924:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801b928:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801b92c:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801b930:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801b934:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801b938:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801b93c:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801b93e:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801b942:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801b944:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801b948:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801b94a:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801b94e:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801b950:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801b954:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801b956:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801b95a:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801b95c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801b960:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801b962:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801b966:	aa0d      	add	r2, sp, #52	@ 0x34
 801b968:	3b44      	subs	r3, #68	@ 0x44
 801b96a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b96e:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801b972:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801b976:	b153      	cbz	r3, 801b98e <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801b978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b97a:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801b97e:	9a04      	ldr	r2, [sp, #16]
 801b980:	429a      	cmp	r2, r3
 801b982:	f63f aeb6 	bhi.w	801b6f2 <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801b986:	9a05      	ldr	r2, [sp, #20]
 801b988:	429a      	cmp	r2, r3
 801b98a:	f67f aeb2 	bls.w	801b6f2 <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801b98e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b990:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801b992:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801b996:	2b00      	cmp	r3, #0
 801b998:	f43f aeab 	beq.w	801b6f2 <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801b99c:	f240 1201 	movw	r2, #257	@ 0x101
 801b9a0:	4293      	cmp	r3, r2
 801b9a2:	f43f af3c 	beq.w	801b81e <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801b9a6:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801b9aa:	d083      	beq.n	801b8b4 <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801b9ac:	464a      	mov	r2, r9
 801b9ae:	9b08      	ldr	r3, [sp, #32]
 801b9b0:	9906      	ldr	r1, [sp, #24]
 801b9b2:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801b9b6:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801b9b8:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801b9ba:	4798      	blx	r3
            if (res < 0) {
 801b9bc:	1e03      	subs	r3, r0, #0
 801b9be:	db04      	blt.n	801b9ca <lfs_dir_traverse+0x30a>
            if (res) {
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	f43f ae96 	beq.w	801b6f2 <lfs_dir_traverse+0x32>
 801b9c6:	e7a3      	b.n	801b910 <lfs_dir_traverse+0x250>
 801b9c8:	4603      	mov	r3, r0
}
 801b9ca:	4618      	mov	r0, r3
 801b9cc:	b02f      	add	sp, #188	@ 0xbc
 801b9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9d2:	bf00      	nop
 801b9d4:	7ff00000 	.word	0x7ff00000
 801b9d8:	0801aff5 	.word	0x0801aff5
 801b9dc:	08039224 	.word	0x08039224
 801b9e0:	08039e34 	.word	0x08039e34
 801b9e4:	08039148 	.word	0x08039148
 801b9e8:	600ffc00 	.word	0x600ffc00

0801b9ec <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801b9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9f0:	b087      	sub	sp, #28
 801b9f2:	4606      	mov	r6, r0
 801b9f4:	468a      	mov	sl, r1
 801b9f6:	4617      	mov	r7, r2
 801b9f8:	461c      	mov	r4, r3
 801b9fa:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801b9fe:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801ba02:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ba04:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801ba08:	eb05 0208 	add.w	r2, r5, r8
 801ba0c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801ba0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba10:	429a      	cmp	r2, r3
 801ba12:	d94d      	bls.n	801bab0 <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801ba14:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801ba18:	e076      	b.n	801bb08 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	68ba      	ldr	r2, [r7, #8]
 801ba1e:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801ba20:	42a9      	cmp	r1, r5
 801ba22:	d91c      	bls.n	801ba5e <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801ba24:	42ab      	cmp	r3, r5
 801ba26:	d904      	bls.n	801ba32 <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801ba28:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801ba2a:	4543      	cmp	r3, r8
 801ba2c:	bf28      	it	cs
 801ba2e:	4643      	movcs	r3, r8
 801ba30:	e048      	b.n	801bac4 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801ba32:	1b59      	subs	r1, r3, r5
 801ba34:	440a      	add	r2, r1
 801ba36:	4542      	cmp	r2, r8
 801ba38:	bf28      	it	cs
 801ba3a:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801ba3c:	68f9      	ldr	r1, [r7, #12]
 801ba3e:	1aeb      	subs	r3, r5, r3
 801ba40:	9205      	str	r2, [sp, #20]
 801ba42:	4419      	add	r1, r3
 801ba44:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801ba46:	f012 f9ff 	bl	802de48 <memcpy>
                data += diff;
 801ba4a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801ba4c:	9b05      	ldr	r3, [sp, #20]
 801ba4e:	4419      	add	r1, r3
 801ba50:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801ba52:	441d      	add	r5, r3
                size -= diff;
 801ba54:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801ba58:	e02a      	b.n	801bab0 <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801ba5a:	4643      	mov	r3, r8
 801ba5c:	e032      	b.n	801bac4 <lfs_dir_getread+0xd8>
 801ba5e:	4643      	mov	r3, r8
 801ba60:	e030      	b.n	801bac4 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801ba62:	f06f 0301 	mvn.w	r3, #1
 801ba66:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801ba68:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801ba6a:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801ba6c:	fbb5 f2f3 	udiv	r2, r5, r3
 801ba70:	fb03 5212 	mls	r2, r3, r2, r5
 801ba74:	1aaa      	subs	r2, r5, r2
 801ba76:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801ba78:	eb05 030b 	add.w	r3, r5, fp
 801ba7c:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801ba7e:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801ba80:	4403      	add	r3, r0
 801ba82:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801ba84:	fbb3 fcf0 	udiv	ip, r3, r0
 801ba88:	fb00 301c 	mls	r0, r0, ip, r3
 801ba8c:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801ba8e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801ba90:	428b      	cmp	r3, r1
 801ba92:	bf28      	it	cs
 801ba94:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801ba96:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801ba98:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801ba9a:	9302      	str	r3, [sp, #8]
 801ba9c:	9101      	str	r1, [sp, #4]
 801ba9e:	9200      	str	r2, [sp, #0]
 801baa0:	464b      	mov	r3, r9
 801baa2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801baa4:	4651      	mov	r1, sl
 801baa6:	4630      	mov	r0, r6
 801baa8:	f7ff fcb8 	bl	801b41c <lfs_dir_getslice>
        if (err < 0) {
 801baac:	2800      	cmp	r0, #0
 801baae:	db2b      	blt.n	801bb08 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801bab0:	f1b8 0f00 	cmp.w	r8, #0
 801bab4:	d027      	beq.n	801bb06 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801bab6:	2f00      	cmp	r7, #0
 801bab8:	d0cf      	beq.n	801ba5a <lfs_dir_getread+0x6e>
 801baba:	683b      	ldr	r3, [r7, #0]
 801babc:	f113 0f02 	cmn.w	r3, #2
 801bac0:	d0ab      	beq.n	801ba1a <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801bac2:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801bac4:	6822      	ldr	r2, [r4, #0]
 801bac6:	f112 0f02 	cmn.w	r2, #2
 801baca:	d1ca      	bne.n	801ba62 <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801bacc:	6862      	ldr	r2, [r4, #4]
 801bace:	68a1      	ldr	r1, [r4, #8]
 801bad0:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801bad2:	42a8      	cmp	r0, r5
 801bad4:	d9c5      	bls.n	801ba62 <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801bad6:	42aa      	cmp	r2, r5
 801bad8:	d8c3      	bhi.n	801ba62 <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801bada:	1b50      	subs	r0, r2, r5
 801badc:	4401      	add	r1, r0
 801bade:	4608      	mov	r0, r1
 801bae0:	4299      	cmp	r1, r3
 801bae2:	bf28      	it	cs
 801bae4:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801bae6:	68e3      	ldr	r3, [r4, #12]
 801bae8:	1aa9      	subs	r1, r5, r2
 801baea:	9005      	str	r0, [sp, #20]
 801baec:	4602      	mov	r2, r0
 801baee:	4419      	add	r1, r3
 801baf0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801baf2:	f012 f9a9 	bl	802de48 <memcpy>
                data += diff;
 801baf6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801baf8:	9b05      	ldr	r3, [sp, #20]
 801bafa:	4419      	add	r1, r3
 801bafc:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801bafe:	441d      	add	r5, r3
                size -= diff;
 801bb00:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801bb04:	e7d4      	b.n	801bab0 <lfs_dir_getread+0xc4>
    return 0;
 801bb06:	2000      	movs	r0, #0
}
 801bb08:	b007      	add	sp, #28
 801bb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb0e <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801bb0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb12:	b089      	sub	sp, #36	@ 0x24
 801bb14:	4682      	mov	sl, r0
 801bb16:	4689      	mov	r9, r1
 801bb18:	9205      	str	r2, [sp, #20]
 801bb1a:	461f      	mov	r7, r3
 801bb1c:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801bb20:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801bb24:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801bb26:	2400      	movs	r4, #0
 801bb28:	e002      	b.n	801bb30 <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801bb2a:	2301      	movs	r3, #1
 801bb2c:	e023      	b.n	801bb76 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801bb2e:	442c      	add	r4, r5
 801bb30:	42b4      	cmp	r4, r6
 801bb32:	d21f      	bcs.n	801bb74 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801bb34:	1b35      	subs	r5, r6, r4
 801bb36:	2d08      	cmp	r5, #8
 801bb38:	bf28      	it	cs
 801bb3a:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801bb3c:	9503      	str	r5, [sp, #12]
 801bb3e:	ab06      	add	r3, sp, #24
 801bb40:	9302      	str	r3, [sp, #8]
 801bb42:	eb04 0308 	add.w	r3, r4, r8
 801bb46:	9301      	str	r3, [sp, #4]
 801bb48:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bb4a:	9300      	str	r3, [sp, #0]
 801bb4c:	1b3b      	subs	r3, r7, r4
 801bb4e:	9a05      	ldr	r2, [sp, #20]
 801bb50:	4649      	mov	r1, r9
 801bb52:	4650      	mov	r0, sl
 801bb54:	f7ff fb72 	bl	801b23c <lfs_bd_read>
        if (err) {
 801bb58:	4603      	mov	r3, r0
 801bb5a:	b960      	cbnz	r0, 801bb76 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801bb5c:	462a      	mov	r2, r5
 801bb5e:	eb0b 0104 	add.w	r1, fp, r4
 801bb62:	a806      	add	r0, sp, #24
 801bb64:	f010 fea0 	bl	802c8a8 <memcmp>
        if (res) {
 801bb68:	2800      	cmp	r0, #0
 801bb6a:	d0e0      	beq.n	801bb2e <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801bb6c:	2800      	cmp	r0, #0
 801bb6e:	dbdc      	blt.n	801bb2a <lfs_bd_cmp+0x1c>
 801bb70:	2302      	movs	r3, #2
 801bb72:	e000      	b.n	801bb76 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801bb74:	2300      	movs	r3, #0
}
 801bb76:	4618      	mov	r0, r3
 801bb78:	b009      	add	sp, #36	@ 0x24
 801bb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801bb80 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801bb80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb84:	b085      	sub	sp, #20
 801bb86:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801bb88:	6809      	ldr	r1, [r1, #0]
 801bb8a:	f111 0f03 	cmn.w	r1, #3
 801bb8e:	d83f      	bhi.n	801bc10 <lfs_bd_flush+0x90>
 801bb90:	4607      	mov	r7, r0
 801bb92:	4691      	mov	r9, r2
 801bb94:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801bb96:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801bb98:	4299      	cmp	r1, r3
 801bb9a:	d22d      	bcs.n	801bbf8 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801bb9c:	68a5      	ldr	r5, [r4, #8]
 801bb9e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801bba0:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801bba2:	4415      	add	r5, r2
 801bba4:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801bba6:	fbb5 f3f2 	udiv	r3, r5, r2
 801bbaa:	fb02 5313 	mls	r3, r2, r3, r5
 801bbae:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801bbb0:	6885      	ldr	r5, [r0, #8]
 801bbb2:	9600      	str	r6, [sp, #0]
 801bbb4:	68e3      	ldr	r3, [r4, #12]
 801bbb6:	6862      	ldr	r2, [r4, #4]
 801bbb8:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801bbba:	1e05      	subs	r5, r0, #0
 801bbbc:	dc22      	bgt.n	801bc04 <lfs_bd_flush+0x84>
        if (err) {
 801bbbe:	bb45      	cbnz	r5, 801bc12 <lfs_bd_flush+0x92>
        if (validate) {
 801bbc0:	f1b8 0f00 	cmp.w	r8, #0
 801bbc4:	d013      	beq.n	801bbee <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801bbc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bbca:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801bbce:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801bbd0:	9603      	str	r6, [sp, #12]
 801bbd2:	9302      	str	r3, [sp, #8]
 801bbd4:	6863      	ldr	r3, [r4, #4]
 801bbd6:	9301      	str	r3, [sp, #4]
 801bbd8:	6823      	ldr	r3, [r4, #0]
 801bbda:	9300      	str	r3, [sp, #0]
 801bbdc:	4633      	mov	r3, r6
 801bbde:	464a      	mov	r2, r9
 801bbe0:	2100      	movs	r1, #0
 801bbe2:	4638      	mov	r0, r7
 801bbe4:	f7ff ff93 	bl	801bb0e <lfs_bd_cmp>
            if (res < 0) {
 801bbe8:	2800      	cmp	r0, #0
 801bbea:	db16      	blt.n	801bc1a <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801bbec:	b9b8      	cbnz	r0, 801bc1e <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801bbee:	4621      	mov	r1, r4
 801bbf0:	4638      	mov	r0, r7
 801bbf2:	f7ff faf9 	bl	801b1e8 <lfs_cache_zero>
 801bbf6:	e00c      	b.n	801bc12 <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801bbf8:	4b0a      	ldr	r3, [pc, #40]	@ (801bc24 <lfs_bd_flush+0xa4>)
 801bbfa:	4a0b      	ldr	r2, [pc, #44]	@ (801bc28 <lfs_bd_flush+0xa8>)
 801bbfc:	21b3      	movs	r1, #179	@ 0xb3
 801bbfe:	480b      	ldr	r0, [pc, #44]	@ (801bc2c <lfs_bd_flush+0xac>)
 801bc00:	f00e f994 	bl	8029f2c <__assert_func>
        LFS_ASSERT(err <= 0);
 801bc04:	4b0a      	ldr	r3, [pc, #40]	@ (801bc30 <lfs_bd_flush+0xb0>)
 801bc06:	4a08      	ldr	r2, [pc, #32]	@ (801bc28 <lfs_bd_flush+0xa8>)
 801bc08:	21b7      	movs	r1, #183	@ 0xb7
 801bc0a:	4808      	ldr	r0, [pc, #32]	@ (801bc2c <lfs_bd_flush+0xac>)
 801bc0c:	f00e f98e 	bl	8029f2c <__assert_func>
    return 0;
 801bc10:	2500      	movs	r5, #0
}
 801bc12:	4628      	mov	r0, r5
 801bc14:	b005      	add	sp, #20
 801bc16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801bc1a:	4605      	mov	r5, r0
 801bc1c:	e7f9      	b.n	801bc12 <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801bc1e:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801bc22:	e7f6      	b.n	801bc12 <lfs_bd_flush+0x92>
 801bc24:	0803922c 	.word	0x0803922c
 801bc28:	08039e78 	.word	0x08039e78
 801bc2c:	08039148 	.word	0x08039148
 801bc30:	08039178 	.word	0x08039178

0801bc34 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801bc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc38:	b083      	sub	sp, #12
 801bc3a:	4607      	mov	r7, r0
 801bc3c:	460c      	mov	r4, r1
 801bc3e:	9201      	str	r2, [sp, #4]
 801bc40:	469b      	mov	fp, r3
 801bc42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bc44:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801bc46:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801bc4a:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801bc4e:	f116 0f02 	cmn.w	r6, #2
 801bc52:	d002      	beq.n	801bc5a <lfs_bd_prog+0x26>
 801bc54:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801bc56:	42b3      	cmp	r3, r6
 801bc58:	d90b      	bls.n	801bc72 <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801bc5a:	eb05 0308 	add.w	r3, r5, r8
 801bc5e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801bc60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801bc62:	4293      	cmp	r3, r2
 801bc64:	d919      	bls.n	801bc9a <lfs_bd_prog+0x66>
 801bc66:	4b2b      	ldr	r3, [pc, #172]	@ (801bd14 <lfs_bd_prog+0xe0>)
 801bc68:	4a2b      	ldr	r2, [pc, #172]	@ (801bd18 <lfs_bd_prog+0xe4>)
 801bc6a:	21e9      	movs	r1, #233	@ 0xe9
 801bc6c:	482b      	ldr	r0, [pc, #172]	@ (801bd1c <lfs_bd_prog+0xe8>)
 801bc6e:	f00e f95d 	bl	8029f2c <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801bc72:	4b2b      	ldr	r3, [pc, #172]	@ (801bd20 <lfs_bd_prog+0xec>)
 801bc74:	4a28      	ldr	r2, [pc, #160]	@ (801bd18 <lfs_bd_prog+0xe4>)
 801bc76:	21e8      	movs	r1, #232	@ 0xe8
 801bc78:	4828      	ldr	r0, [pc, #160]	@ (801bd1c <lfs_bd_prog+0xe8>)
 801bc7a:	f00e f957 	bl	8029f2c <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801bc7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bc82:	d13c      	bne.n	801bcfe <lfs_bd_prog+0xca>
        pcache->block = block;
 801bc84:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801bc86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bc88:	6a1a      	ldr	r2, [r3, #32]
 801bc8a:	fbb5 f3f2 	udiv	r3, r5, r2
 801bc8e:	fb02 5313 	mls	r3, r2, r3, r5
 801bc92:	1aeb      	subs	r3, r5, r3
 801bc94:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801bc96:	2300      	movs	r3, #0
 801bc98:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801bc9a:	f1b8 0f00 	cmp.w	r8, #0
 801bc9e:	d035      	beq.n	801bd0c <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801bca0:	6823      	ldr	r3, [r4, #0]
 801bca2:	42b3      	cmp	r3, r6
 801bca4:	d1eb      	bne.n	801bc7e <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801bca6:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801bca8:	42aa      	cmp	r2, r5
 801bcaa:	d8e8      	bhi.n	801bc7e <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801bcac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801bcae:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801bcb0:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801bcb2:	42a8      	cmp	r0, r5
 801bcb4:	d9e3      	bls.n	801bc7e <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801bcb6:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801bcb8:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801bcbc:	45c1      	cmp	r9, r8
 801bcbe:	bf28      	it	cs
 801bcc0:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801bcc2:	68e3      	ldr	r3, [r4, #12]
 801bcc4:	1aa8      	subs	r0, r5, r2
 801bcc6:	464a      	mov	r2, r9
 801bcc8:	4651      	mov	r1, sl
 801bcca:	4418      	add	r0, r3
 801bccc:	f012 f8bc 	bl	802de48 <memcpy>
            data += diff;
 801bcd0:	44ca      	add	sl, r9
            off += diff;
 801bcd2:	444d      	add	r5, r9
            size -= diff;
 801bcd4:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801bcd8:	68a2      	ldr	r2, [r4, #8]
 801bcda:	6863      	ldr	r3, [r4, #4]
 801bcdc:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801bcde:	4293      	cmp	r3, r2
 801bce0:	bf38      	it	cc
 801bce2:	4613      	movcc	r3, r2
 801bce4:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801bce6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801bce8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801bcea:	429a      	cmp	r2, r3
 801bcec:	d1d5      	bne.n	801bc9a <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801bcee:	465b      	mov	r3, fp
 801bcf0:	9a01      	ldr	r2, [sp, #4]
 801bcf2:	4621      	mov	r1, r4
 801bcf4:	4638      	mov	r0, r7
 801bcf6:	f7ff ff43 	bl	801bb80 <lfs_bd_flush>
                if (err) {
 801bcfa:	b940      	cbnz	r0, 801bd0e <lfs_bd_prog+0xda>
 801bcfc:	e7cd      	b.n	801bc9a <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801bcfe:	4b09      	ldr	r3, [pc, #36]	@ (801bd24 <lfs_bd_prog+0xf0>)
 801bd00:	4a05      	ldr	r2, [pc, #20]	@ (801bd18 <lfs_bd_prog+0xe4>)
 801bd02:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801bd06:	4805      	ldr	r0, [pc, #20]	@ (801bd1c <lfs_bd_prog+0xe8>)
 801bd08:	f00e f910 	bl	8029f2c <__assert_func>
    return 0;
 801bd0c:	2000      	movs	r0, #0
}
 801bd0e:	b003      	add	sp, #12
 801bd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd14:	08039288 	.word	0x08039288
 801bd18:	08039e88 	.word	0x08039e88
 801bd1c:	08039148 	.word	0x08039148
 801bd20:	08039250 	.word	0x08039250
 801bd24:	080392ac 	.word	0x080392ac

0801bd28 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801bd28:	b538      	push	{r3, r4, r5, lr}
 801bd2a:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801bd2c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801bd30:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801bd32:	f7ff ff25 	bl	801bb80 <lfs_bd_flush>
    if (err) {
 801bd36:	4603      	mov	r3, r0
 801bd38:	b920      	cbnz	r0, 801bd44 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801bd3a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801bd3c:	6903      	ldr	r3, [r0, #16]
 801bd3e:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801bd40:	1e03      	subs	r3, r0, #0
 801bd42:	dc01      	bgt.n	801bd48 <lfs_bd_sync+0x20>
}
 801bd44:	4618      	mov	r0, r3
 801bd46:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801bd48:	4b02      	ldr	r3, [pc, #8]	@ (801bd54 <lfs_bd_sync+0x2c>)
 801bd4a:	4a03      	ldr	r2, [pc, #12]	@ (801bd58 <lfs_bd_sync+0x30>)
 801bd4c:	21dd      	movs	r1, #221	@ 0xdd
 801bd4e:	4803      	ldr	r0, [pc, #12]	@ (801bd5c <lfs_bd_sync+0x34>)
 801bd50:	f00e f8ec 	bl	8029f2c <__assert_func>
 801bd54:	08039178 	.word	0x08039178
 801bd58:	08039e28 	.word	0x08039e28
 801bd5c:	08039148 	.word	0x08039148

0801bd60 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801bd60:	b570      	push	{r4, r5, r6, lr}
 801bd62:	b084      	sub	sp, #16
 801bd64:	4604      	mov	r4, r0
 801bd66:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801bd68:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801bd6a:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801bd6c:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801bd70:	42ab      	cmp	r3, r5
 801bd72:	bf28      	it	cs
 801bd74:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801bd76:	6812      	ldr	r2, [r2, #0]
 801bd78:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801bd7c:	9303      	str	r3, [sp, #12]
 801bd7e:	6866      	ldr	r6, [r4, #4]
 801bd80:	9602      	str	r6, [sp, #8]
 801bd82:	9101      	str	r1, [sp, #4]
 801bd84:	9200      	str	r2, [sp, #0]
 801bd86:	4602      	mov	r2, r0
 801bd88:	2100      	movs	r1, #0
 801bd8a:	f7ff fec0 	bl	801bb0e <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801bd8e:	b920      	cbnz	r0, 801bd9a <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801bd90:	68a3      	ldr	r3, [r4, #8]
 801bd92:	42ab      	cmp	r3, r5
 801bd94:	d001      	beq.n	801bd9a <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801bd96:	d202      	bcs.n	801bd9e <lfs_dir_find_match+0x3e>
 801bd98:	2001      	movs	r0, #1
}
 801bd9a:	b004      	add	sp, #16
 801bd9c:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801bd9e:	2002      	movs	r0, #2
 801bda0:	e7fb      	b.n	801bd9a <lfs_dir_find_match+0x3a>

0801bda2 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801bda2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bda6:	b089      	sub	sp, #36	@ 0x24
 801bda8:	9305      	str	r3, [sp, #20]
 801bdaa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801bdac:	b953      	cbnz	r3, 801bdc4 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801bdae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bdb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bdb4:	6013      	str	r3, [r2, #0]
        *off = 0;
 801bdb6:	2300      	movs	r3, #0
 801bdb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bdba:	6013      	str	r3, [r2, #0]
}
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	b009      	add	sp, #36	@ 0x24
 801bdc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bdc4:	4607      	mov	r7, r0
 801bdc6:	4688      	mov	r8, r1
 801bdc8:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801bdca:	3b01      	subs	r3, #1
 801bdcc:	9307      	str	r3, [sp, #28]
 801bdce:	a907      	add	r1, sp, #28
 801bdd0:	f7ff fa16 	bl	801b200 <lfs_ctz_index>
 801bdd4:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801bdd6:	a911      	add	r1, sp, #68	@ 0x44
 801bdd8:	4638      	mov	r0, r7
 801bdda:	f7ff fa11 	bl	801b200 <lfs_ctz_index>
 801bdde:	4606      	mov	r6, r0
    while (current > target) {
 801bde0:	42b5      	cmp	r5, r6
 801bde2:	d91f      	bls.n	801be24 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801bde4:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801bde6:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801bdea:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801bdee:	fa95 f3a5 	rbit	r3, r5
 801bdf2:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801bdf6:	429c      	cmp	r4, r3
 801bdf8:	bf28      	it	cs
 801bdfa:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801bdfc:	2304      	movs	r3, #4
 801bdfe:	9303      	str	r3, [sp, #12]
 801be00:	aa05      	add	r2, sp, #20
 801be02:	9202      	str	r2, [sp, #8]
 801be04:	00a2      	lsls	r2, r4, #2
 801be06:	9201      	str	r2, [sp, #4]
 801be08:	9a05      	ldr	r2, [sp, #20]
 801be0a:	9200      	str	r2, [sp, #0]
 801be0c:	464a      	mov	r2, r9
 801be0e:	4641      	mov	r1, r8
 801be10:	4638      	mov	r0, r7
 801be12:	f7ff fa13 	bl	801b23c <lfs_bd_read>
        if (err) {
 801be16:	4603      	mov	r3, r0
 801be18:	2800      	cmp	r0, #0
 801be1a:	d1cf      	bne.n	801bdbc <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801be1c:	2301      	movs	r3, #1
 801be1e:	40a3      	lsls	r3, r4
 801be20:	1aed      	subs	r5, r5, r3
 801be22:	e7dd      	b.n	801bde0 <lfs_ctz_find+0x3e>
    *block = head;
 801be24:	9b05      	ldr	r3, [sp, #20]
 801be26:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801be28:	6013      	str	r3, [r2, #0]
    *off = pos;
 801be2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801be2c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801be2e:	6013      	str	r3, [r2, #0]
    return 0;
 801be30:	2300      	movs	r3, #0
 801be32:	e7c3      	b.n	801bdbc <lfs_ctz_find+0x1a>

0801be34 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801be34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be38:	b087      	sub	sp, #28
 801be3a:	460c      	mov	r4, r1
 801be3c:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801be3e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801be40:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801be42:	4291      	cmp	r1, r2
 801be44:	d272      	bcs.n	801bf2c <lfs_file_flushedread+0xf8>
 801be46:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801be48:	eba2 0901 	sub.w	r9, r2, r1
 801be4c:	4599      	cmp	r9, r3
 801be4e:	bf28      	it	cs
 801be50:	4699      	movcs	r9, r3
    nsize = size;
 801be52:	464e      	mov	r6, r9
    while (nsize > 0) {
 801be54:	e037      	b.n	801bec6 <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801be56:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801be5a:	d041      	beq.n	801bee0 <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801be5c:	f06f 0301 	mvn.w	r3, #1
 801be60:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801be62:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801be64:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801be66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801be68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801be6c:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801be6e:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801be72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801be74:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801be76:	1a9d      	subs	r5, r3, r2
 801be78:	42b5      	cmp	r5, r6
 801be7a:	bf28      	it	cs
 801be7c:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801be7e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801be80:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801be84:	d041      	beq.n	801bf0a <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801be86:	88a1      	ldrh	r1, [r4, #4]
 801be88:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801be8a:	9505      	str	r5, [sp, #20]
 801be8c:	9704      	str	r7, [sp, #16]
 801be8e:	9203      	str	r2, [sp, #12]
 801be90:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801be94:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801be98:	9102      	str	r1, [sp, #8]
 801be9a:	4a27      	ldr	r2, [pc, #156]	@ (801bf38 <lfs_file_flushedread+0x104>)
 801be9c:	9201      	str	r2, [sp, #4]
 801be9e:	9300      	str	r3, [sp, #0]
 801bea0:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801bea4:	2200      	movs	r2, #0
 801bea6:	f104 0108 	add.w	r1, r4, #8
 801beaa:	4640      	mov	r0, r8
 801beac:	f7ff fd9e 	bl	801b9ec <lfs_dir_getread>
            if (err) {
 801beb0:	4603      	mov	r3, r0
 801beb2:	2800      	cmp	r0, #0
 801beb4:	d13b      	bne.n	801bf2e <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801beb6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801beb8:	442b      	add	r3, r5
 801beba:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801bebc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801bebe:	442b      	add	r3, r5
 801bec0:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801bec2:	442f      	add	r7, r5
        nsize -= diff;
 801bec4:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801bec6:	2e00      	cmp	r6, #0
 801bec8:	d02e      	beq.n	801bf28 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801beca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801becc:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801bed0:	d0c1      	beq.n	801be56 <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801bed2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801bed4:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801bed8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801beda:	4291      	cmp	r1, r2
 801bedc:	d1c7      	bne.n	801be6e <lfs_file_flushedread+0x3a>
 801bede:	e7ba      	b.n	801be56 <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801bee0:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801bee4:	9303      	str	r3, [sp, #12]
 801bee6:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801beea:	9302      	str	r3, [sp, #8]
 801beec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801beee:	9301      	str	r3, [sp, #4]
 801bef0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801bef2:	9300      	str	r3, [sp, #0]
 801bef4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801bef6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801befa:	2100      	movs	r1, #0
 801befc:	4640      	mov	r0, r8
 801befe:	f7ff ff50 	bl	801bda2 <lfs_ctz_find>
                if (err) {
 801bf02:	4603      	mov	r3, r0
 801bf04:	2800      	cmp	r0, #0
 801bf06:	d0ae      	beq.n	801be66 <lfs_file_flushedread+0x32>
 801bf08:	e011      	b.n	801bf2e <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801bf0a:	9503      	str	r5, [sp, #12]
 801bf0c:	9702      	str	r7, [sp, #8]
 801bf0e:	9201      	str	r2, [sp, #4]
 801bf10:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801bf12:	9200      	str	r2, [sp, #0]
 801bf14:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801bf18:	2100      	movs	r1, #0
 801bf1a:	4640      	mov	r0, r8
 801bf1c:	f7ff f98e 	bl	801b23c <lfs_bd_read>
            if (err) {
 801bf20:	4603      	mov	r3, r0
 801bf22:	2800      	cmp	r0, #0
 801bf24:	d0c7      	beq.n	801beb6 <lfs_file_flushedread+0x82>
 801bf26:	e002      	b.n	801bf2e <lfs_file_flushedread+0xfa>
    return size;
 801bf28:	464b      	mov	r3, r9
 801bf2a:	e000      	b.n	801bf2e <lfs_file_flushedread+0xfa>
        return 0;
 801bf2c:	2300      	movs	r3, #0
}
 801bf2e:	4618      	mov	r0, r3
 801bf30:	b007      	add	sp, #28
 801bf32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf36:	bf00      	nop
 801bf38:	fff7fc00 	.word	0xfff7fc00

0801bf3c <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf40:	b089      	sub	sp, #36	@ 0x24
 801bf42:	4683      	mov	fp, r0
 801bf44:	468a      	mov	sl, r1
 801bf46:	9205      	str	r2, [sp, #20]
 801bf48:	4698      	mov	r8, r3
 801bf4a:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801bf4e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801bf50:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801bf52:	2400      	movs	r4, #0
 801bf54:	e006      	b.n	801bf64 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801bf56:	462a      	mov	r2, r5
 801bf58:	a906      	add	r1, sp, #24
 801bf5a:	6838      	ldr	r0, [r7, #0]
 801bf5c:	f003 fd82 	bl	801fa64 <lfs_crc>
 801bf60:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801bf62:	442c      	add	r4, r5
 801bf64:	42b4      	cmp	r4, r6
 801bf66:	d216      	bcs.n	801bf96 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801bf68:	1b35      	subs	r5, r6, r4
 801bf6a:	2d08      	cmp	r5, #8
 801bf6c:	bf28      	it	cs
 801bf6e:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801bf70:	9503      	str	r5, [sp, #12]
 801bf72:	ab06      	add	r3, sp, #24
 801bf74:	9302      	str	r3, [sp, #8]
 801bf76:	eb04 0309 	add.w	r3, r4, r9
 801bf7a:	9301      	str	r3, [sp, #4]
 801bf7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bf7e:	9300      	str	r3, [sp, #0]
 801bf80:	eba8 0304 	sub.w	r3, r8, r4
 801bf84:	9a05      	ldr	r2, [sp, #20]
 801bf86:	4651      	mov	r1, sl
 801bf88:	4658      	mov	r0, fp
 801bf8a:	f7ff f957 	bl	801b23c <lfs_bd_read>
        if (err) {
 801bf8e:	4603      	mov	r3, r0
 801bf90:	2800      	cmp	r0, #0
 801bf92:	d0e0      	beq.n	801bf56 <lfs_bd_crc+0x1a>
 801bf94:	e000      	b.n	801bf98 <lfs_bd_crc+0x5c>
    return 0;
 801bf96:	2300      	movs	r3, #0
}
 801bf98:	4618      	mov	r0, r3
 801bf9a:	b009      	add	sp, #36	@ 0x24
 801bf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bfa0 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfa4:	b097      	sub	sp, #92	@ 0x5c
 801bfa6:	4605      	mov	r5, r0
 801bfa8:	460e      	mov	r6, r1
 801bfaa:	4617      	mov	r7, r2
 801bfac:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801bfae:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801bfb0:	b13b      	cbz	r3, 801bfc2 <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801bfb2:	6812      	ldr	r2, [r2, #0]
 801bfb4:	4293      	cmp	r3, r2
 801bfb6:	f240 825a 	bls.w	801c46e <lfs_dir_fetchmatch+0x4ce>
 801bfba:	687a      	ldr	r2, [r7, #4]
 801bfbc:	4293      	cmp	r3, r2
 801bfbe:	f240 8259 	bls.w	801c474 <lfs_dir_fetchmatch+0x4d4>
    uint32_t revs[2] = {0, 0};
 801bfc2:	2400      	movs	r4, #0
 801bfc4:	9412      	str	r4, [sp, #72]	@ 0x48
 801bfc6:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801bfc8:	46a0      	mov	r8, r4
 801bfca:	e010      	b.n	801bfee <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801bfcc:	f118 0301 	adds.w	r3, r8, #1
 801bfd0:	f003 0301 	and.w	r3, r3, #1
 801bfd4:	bf48      	it	mi
 801bfd6:	425b      	negmi	r3, r3
 801bfd8:	a916      	add	r1, sp, #88	@ 0x58
 801bfda:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bfde:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801bfe2:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801bfe4:	2a00      	cmp	r2, #0
 801bfe6:	dd00      	ble.n	801bfea <lfs_dir_fetchmatch+0x4a>
            r = i;
 801bfe8:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801bfea:	f108 0801 	add.w	r8, r8, #1
 801bfee:	f1b8 0f01 	cmp.w	r8, #1
 801bff2:	dc1d      	bgt.n	801c030 <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801bff4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801bff8:	ab12      	add	r3, sp, #72	@ 0x48
 801bffa:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801bffe:	2304      	movs	r3, #4
 801c000:	9303      	str	r3, [sp, #12]
 801c002:	9202      	str	r2, [sp, #8]
 801c004:	2100      	movs	r1, #0
 801c006:	9101      	str	r1, [sp, #4]
 801c008:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801c00c:	9200      	str	r2, [sp, #0]
 801c00e:	462a      	mov	r2, r5
 801c010:	4628      	mov	r0, r5
 801c012:	f7ff f913 	bl	801b23c <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801c016:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801c01a:	eb0d 0903 	add.w	r9, sp, r3
 801c01e:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801c022:	4683      	mov	fp, r0
 801c024:	2800      	cmp	r0, #0
 801c026:	d0d1      	beq.n	801bfcc <lfs_dir_fetchmatch+0x2c>
 801c028:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c02c:	d0dd      	beq.n	801bfea <lfs_dir_fetchmatch+0x4a>
 801c02e:	e21a      	b.n	801c466 <lfs_dir_fetchmatch+0x4c6>
    dir->pair[0] = pair[(r+0)%2];
 801c030:	2c00      	cmp	r4, #0
 801c032:	f004 0301 	and.w	r3, r4, #1
 801c036:	bfb8      	it	lt
 801c038:	425b      	neglt	r3, r3
 801c03a:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801c03e:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801c040:	f114 0c01 	adds.w	ip, r4, #1
 801c044:	f00c 0c01 	and.w	ip, ip, #1
 801c048:	bf48      	it	mi
 801c04a:	f1cc 0c00 	rsbmi	ip, ip, #0
 801c04e:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801c052:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801c054:	aa16      	add	r2, sp, #88	@ 0x58
 801c056:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c05a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801c05e:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801c060:	2400      	movs	r4, #0
 801c062:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801c064:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801c068:	f8cd c01c 	str.w	ip, [sp, #28]
 801c06c:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801c06e:	f1b9 0f01 	cmp.w	r9, #1
 801c072:	f300 81eb 	bgt.w	801c44c <lfs_dir_fetchmatch+0x4ac>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c076:	4a90      	ldr	r2, [pc, #576]	@ (801c2b8 <lfs_dir_fetchmatch+0x318>)
 801c078:	ab0e      	add	r3, sp, #56	@ 0x38
 801c07a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c07e:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801c082:	2204      	movs	r2, #4
 801c084:	f106 0108 	add.w	r1, r6, #8
 801c088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c08c:	f003 fcea 	bl	801fa64 <lfs_crc>
 801c090:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801c092:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801c096:	2300      	movs	r3, #0
 801c098:	461c      	mov	r4, r3
 801c09a:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801c09c:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801c09e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801c0a2:	461f      	mov	r7, r3
 801c0a4:	e110      	b.n	801c2c8 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801c0a6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c0aa:	d101      	bne.n	801c0b0 <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801c0ac:	2300      	movs	r3, #0
 801c0ae:	e01e      	b.n	801c0ee <lfs_dir_fetchmatch+0x14e>
                return err;
 801c0b0:	4683      	mov	fp, r0
 801c0b2:	e1d8      	b.n	801c466 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x78000000) >> 20;
 801c0b4:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801c0b8:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801c0bc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801c0c0:	bf14      	ite	ne
 801c0c2:	2300      	movne	r3, #0
 801c0c4:	2301      	moveq	r3, #1
                break;
 801c0c6:	e012      	b.n	801c0ee <lfs_dir_fetchmatch+0x14e>
                err = lfs_bd_read(lfs,
 801c0c8:	2204      	movs	r2, #4
 801c0ca:	9203      	str	r2, [sp, #12]
 801c0cc:	aa0d      	add	r2, sp, #52	@ 0x34
 801c0ce:	9202      	str	r2, [sp, #8]
 801c0d0:	1d22      	adds	r2, r4, #4
 801c0d2:	9201      	str	r2, [sp, #4]
 801c0d4:	6832      	ldr	r2, [r6, #0]
 801c0d6:	9200      	str	r2, [sp, #0]
 801c0d8:	462a      	mov	r2, r5
 801c0da:	2100      	movs	r1, #0
 801c0dc:	4628      	mov	r0, r5
 801c0de:	f7ff f8ad 	bl	801b23c <lfs_bd_read>
                if (err) {
 801c0e2:	bb80      	cbnz	r0, 801c146 <lfs_dir_fetchmatch+0x1a6>
                if (crc != dcrc) {
 801c0e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c0e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c0e8:	429a      	cmp	r2, r3
 801c0ea:	d031      	beq.n	801c150 <lfs_dir_fetchmatch+0x1b0>
        bool maybeerased = false;
 801c0ec:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801c0ee:	68f2      	ldr	r2, [r6, #12]
 801c0f0:	2a00      	cmp	r2, #0
 801c0f2:	f000 8165 	beq.w	801c3c0 <lfs_dir_fetchmatch+0x420>
        dir->erased = false;
 801c0f6:	2100      	movs	r1, #0
 801c0f8:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801c0fa:	b153      	cbz	r3, 801c112 <lfs_dir_fetchmatch+0x172>
 801c0fc:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801c0fe:	6a01      	ldr	r1, [r0, #32]
 801c100:	fbb2 f3f1 	udiv	r3, r2, r1
 801c104:	fb01 2313 	mls	r3, r1, r3, r2
 801c108:	b91b      	cbnz	r3, 801c112 <lfs_dir_fetchmatch+0x172>
            if (hasfcrc) {
 801c10a:	9b08      	ldr	r3, [sp, #32]
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	f040 8165 	bne.w	801c3dc <lfs_dir_fetchmatch+0x43c>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801c112:	4631      	mov	r1, r6
 801c114:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801c118:	f7fe ff00 	bl	801af1c <lfs_gstate_hasmovehere>
 801c11c:	2800      	cmp	r0, #0
 801c11e:	f000 817d 	beq.w	801c41c <lfs_dir_fetchmatch+0x47c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801c122:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801c124:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801c128:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801c12c:	429a      	cmp	r2, r3
 801c12e:	f000 8173 	beq.w	801c418 <lfs_dir_fetchmatch+0x478>
            } else if (besttag != -1 &&
 801c132:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801c136:	f000 8171 	beq.w	801c41c <lfs_dir_fetchmatch+0x47c>
 801c13a:	429a      	cmp	r2, r3
 801c13c:	f240 816e 	bls.w	801c41c <lfs_dir_fetchmatch+0x47c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801c140:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801c144:	e16a      	b.n	801c41c <lfs_dir_fetchmatch+0x47c>
                    if (err == LFS_ERR_CORRUPT) {
 801c146:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c14a:	d0cf      	beq.n	801c0ec <lfs_dir_fetchmatch+0x14c>
                    return err;
 801c14c:	4683      	mov	fp, r0
 801c14e:	e18a      	b.n	801c466 <lfs_dir_fetchmatch+0x4c6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801c150:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c152:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801c156:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801c15a:	2204      	movs	r2, #4
 801c15c:	a90b      	add	r1, sp, #44	@ 0x2c
 801c15e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801c160:	f003 fc80 	bl	801fa64 <lfs_crc>
 801c164:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801c166:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c168:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c16c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c170:	bf08      	it	eq
 801c172:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801c174:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c178:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801c17a:	4423      	add	r3, r4
 801c17c:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801c17e:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801c182:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801c184:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c186:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801c188:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c18a:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801c18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c18e:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801c190:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c194:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801c196:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c19a:	e095      	b.n	801c2c8 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801c19c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c1a0:	d101      	bne.n	801c1a6 <lfs_dir_fetchmatch+0x206>
        bool maybeerased = false;
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	e7a3      	b.n	801c0ee <lfs_dir_fetchmatch+0x14e>
                return err;
 801c1a6:	4683      	mov	fp, r0
 801c1a8:	e15d      	b.n	801c466 <lfs_dir_fetchmatch+0x4c6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801c1aa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801c1ae:	d021      	beq.n	801c1f4 <lfs_dir_fetchmatch+0x254>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801c1b0:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801c1b4:	d046      	beq.n	801c244 <lfs_dir_fetchmatch+0x2a4>
    return (tag & 0x7ff00000) >> 20;
 801c1b6:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801c1ba:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801c1be:	429a      	cmp	r2, r3
 801c1c0:	f040 80e3 	bne.w	801c38a <lfs_dir_fetchmatch+0x3ea>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c1c4:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801c1c8:	2208      	movs	r2, #8
 801c1ca:	9203      	str	r2, [sp, #12]
 801c1cc:	aa10      	add	r2, sp, #64	@ 0x40
 801c1ce:	9202      	str	r2, [sp, #8]
 801c1d0:	f8cd 8004 	str.w	r8, [sp, #4]
 801c1d4:	6832      	ldr	r2, [r6, #0]
 801c1d6:	9200      	str	r2, [sp, #0]
 801c1d8:	462a      	mov	r2, r5
 801c1da:	2100      	movs	r1, #0
 801c1dc:	4628      	mov	r0, r5
 801c1de:	f7ff f82d 	bl	801b23c <lfs_bd_read>
                if (err) {
 801c1e2:	2800      	cmp	r0, #0
 801c1e4:	d04a      	beq.n	801c27c <lfs_dir_fetchmatch+0x2dc>
                    if (err == LFS_ERR_CORRUPT) {
 801c1e6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c1ea:	f000 80e7 	beq.w	801c3bc <lfs_dir_fetchmatch+0x41c>
                hasfcrc = true;
 801c1ee:	2301      	movs	r3, #1
 801c1f0:	9308      	str	r3, [sp, #32]
 801c1f2:	e0ca      	b.n	801c38a <lfs_dir_fetchmatch+0x3ea>
    return (int8_t)lfs_tag_chunk(tag);
 801c1f4:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801c1f6:	fa17 f280 	uxtah	r2, r7, r0
 801c1fa:	b297      	uxth	r7, r2
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801c1fc:	9a06      	ldr	r2, [sp, #24]
 801c1fe:	4611      	mov	r1, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801c200:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801c204:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801c208:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801c20c:	f022 0203 	bic.w	r2, r2, #3
 801c210:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801c214:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801c218:	4293      	cmp	r3, r2
 801c21a:	d00f      	beq.n	801c23c <lfs_dir_fetchmatch+0x29c>
                } else if (tempbesttag != -1 &&
 801c21c:	9a06      	ldr	r2, [sp, #24]
 801c21e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c222:	f000 80b2 	beq.w	801c38a <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
 801c226:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801c22a:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801c22e:	429a      	cmp	r2, r3
 801c230:	f0c0 80ab 	bcc.w	801c38a <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801c234:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801c238:	9306      	str	r3, [sp, #24]
 801c23a:	e0a6      	b.n	801c38a <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag |= 0x80000000;
 801c23c:	f041 4300 	orr.w	r3, r1, #2147483648	@ 0x80000000
 801c240:	9306      	str	r3, [sp, #24]
 801c242:	e0a2      	b.n	801c38a <lfs_dir_fetchmatch+0x3ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801c244:	f000 0301 	and.w	r3, r0, #1
 801c248:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c24a:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801c24e:	2208      	movs	r2, #8
 801c250:	9203      	str	r2, [sp, #12]
 801c252:	aa0e      	add	r2, sp, #56	@ 0x38
 801c254:	9202      	str	r2, [sp, #8]
 801c256:	f8cd 8004 	str.w	r8, [sp, #4]
 801c25a:	6832      	ldr	r2, [r6, #0]
 801c25c:	9200      	str	r2, [sp, #0]
 801c25e:	462a      	mov	r2, r5
 801c260:	2100      	movs	r1, #0
 801c262:	4628      	mov	r0, r5
 801c264:	f7fe ffea 	bl	801b23c <lfs_bd_read>
                if (err) {
 801c268:	2800      	cmp	r0, #0
 801c26a:	f000 808e 	beq.w	801c38a <lfs_dir_fetchmatch+0x3ea>
                    if (err == LFS_ERR_CORRUPT) {
 801c26e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c272:	d101      	bne.n	801c278 <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 801c274:	2300      	movs	r3, #0
 801c276:	e73a      	b.n	801c0ee <lfs_dir_fetchmatch+0x14e>
                    return err;
 801c278:	4683      	mov	fp, r0
 801c27a:	e0f4      	b.n	801c466 <lfs_dir_fetchmatch+0x4c6>
                hasfcrc = true;
 801c27c:	2301      	movs	r3, #1
 801c27e:	9308      	str	r3, [sp, #32]
 801c280:	e083      	b.n	801c38a <lfs_dir_fetchmatch+0x3ea>
                    if (res == LFS_ERR_CORRUPT) {
 801c282:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c286:	d101      	bne.n	801c28c <lfs_dir_fetchmatch+0x2ec>
        bool maybeerased = false;
 801c288:	2300      	movs	r3, #0
 801c28a:	e730      	b.n	801c0ee <lfs_dir_fetchmatch+0x14e>
                    return res;
 801c28c:	4683      	mov	fp, r0
 801c28e:	e0ea      	b.n	801c466 <lfs_dir_fetchmatch+0x4c6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801c290:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c292:	9b06      	ldr	r3, [sp, #24]
 801c294:	469c      	mov	ip, r3
 801c296:	ea82 0103 	eor.w	r1, r2, r3
 801c29a:	4b08      	ldr	r3, [pc, #32]	@ (801c2bc <lfs_dir_fetchmatch+0x31c>)
 801c29c:	400b      	ands	r3, r1
 801c29e:	b17b      	cbz	r3, 801c2c0 <lfs_dir_fetchmatch+0x320>
                } else if (res == LFS_CMP_GT &&
 801c2a0:	2802      	cmp	r0, #2
 801c2a2:	d110      	bne.n	801c2c6 <lfs_dir_fetchmatch+0x326>
    return (tag & 0x000ffc00) >> 10;
 801c2a4:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801c2a8:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801c2ac:	459c      	cmp	ip, r3
 801c2ae:	d30a      	bcc.n	801c2c6 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag | 0x80000000;
 801c2b0:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801c2b4:	9306      	str	r3, [sp, #24]
 801c2b6:	e006      	b.n	801c2c6 <lfs_dir_fetchmatch+0x326>
 801c2b8:	08035d14 	.word	0x08035d14
 801c2bc:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801c2c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c2c4:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801c2c6:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c2c8:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c2cc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c2d0:	bf14      	ite	ne
 801c2d2:	4643      	movne	r3, r8
 801c2d4:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801c2d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c2dc:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801c2de:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801c2e0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801c2e4:	2204      	movs	r2, #4
 801c2e6:	9203      	str	r2, [sp, #12]
 801c2e8:	aa0c      	add	r2, sp, #48	@ 0x30
 801c2ea:	9202      	str	r2, [sp, #8]
 801c2ec:	9401      	str	r4, [sp, #4]
 801c2ee:	6832      	ldr	r2, [r6, #0]
 801c2f0:	9200      	str	r2, [sp, #0]
 801c2f2:	462a      	mov	r2, r5
 801c2f4:	2100      	movs	r1, #0
 801c2f6:	4628      	mov	r0, r5
 801c2f8:	f7fe ffa0 	bl	801b23c <lfs_bd_read>
            if (err) {
 801c2fc:	2800      	cmp	r0, #0
 801c2fe:	f47f aed2 	bne.w	801c0a6 <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801c302:	2204      	movs	r2, #4
 801c304:	a90c      	add	r1, sp, #48	@ 0x30
 801c306:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c308:	f003 fbac 	bl	801fa64 <lfs_crc>
 801c30c:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801c30e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801c310:	ba1b      	rev	r3, r3
 801c312:	ea88 0a03 	eor.w	sl, r8, r3
 801c316:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801c31a:	f1ba 0f00 	cmp.w	sl, #0
 801c31e:	f6ff aec9 	blt.w	801c0b4 <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c322:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c326:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c32a:	bf14      	ite	ne
 801c32c:	4652      	movne	r2, sl
 801c32e:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801c332:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c336:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801c338:	4421      	add	r1, r4
 801c33a:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c33e:	4299      	cmp	r1, r3
 801c340:	d83a      	bhi.n	801c3b8 <lfs_dir_fetchmatch+0x418>
    return (tag & 0x78000000) >> 20;
 801c342:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801c346:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801c34a:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801c34e:	f43f aebb 	beq.w	801c0c8 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801c352:	f104 0804 	add.w	r8, r4, #4
 801c356:	a90b      	add	r1, sp, #44	@ 0x2c
 801c358:	9103      	str	r1, [sp, #12]
 801c35a:	9202      	str	r2, [sp, #8]
 801c35c:	f8cd 8004 	str.w	r8, [sp, #4]
 801c360:	6832      	ldr	r2, [r6, #0]
 801c362:	9200      	str	r2, [sp, #0]
 801c364:	462a      	mov	r2, r5
 801c366:	2100      	movs	r1, #0
 801c368:	4628      	mov	r0, r5
 801c36a:	f7ff fde7 	bl	801bf3c <lfs_bd_crc>
            if (err) {
 801c36e:	2800      	cmp	r0, #0
 801c370:	f47f af14 	bne.w	801c19c <lfs_dir_fetchmatch+0x1fc>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801c374:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801c376:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801c378:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801c37c:	f47f af15 	bne.w	801c1aa <lfs_dir_fetchmatch+0x20a>
    return (tag & 0x000ffc00) >> 10;
 801c380:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801c384:	429f      	cmp	r7, r3
 801c386:	d800      	bhi.n	801c38a <lfs_dir_fetchmatch+0x3ea>
                    tempcount = lfs_tag_id(tag) + 1;
 801c388:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801c38a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c38c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c38e:	404b      	eors	r3, r1
 801c390:	9a05      	ldr	r2, [sp, #20]
 801c392:	4213      	tst	r3, r2
 801c394:	d197      	bne.n	801c2c6 <lfs_dir_fetchmatch+0x326>
                        dir->pair[0], off+sizeof(tag)});
 801c396:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801c398:	9314      	str	r3, [sp, #80]	@ 0x50
 801c39a:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801c39e:	aa14      	add	r2, sp, #80	@ 0x50
 801c3a0:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801c3a2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c3a4:	4798      	blx	r3
                if (res < 0) {
 801c3a6:	2800      	cmp	r0, #0
 801c3a8:	f6ff af6b 	blt.w	801c282 <lfs_dir_fetchmatch+0x2e2>
                if (res == LFS_CMP_EQ) {
 801c3ac:	2800      	cmp	r0, #0
 801c3ae:	f47f af6f 	bne.w	801c290 <lfs_dir_fetchmatch+0x2f0>
                    tempbesttag = tag;
 801c3b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c3b4:	9306      	str	r3, [sp, #24]
 801c3b6:	e786      	b.n	801c2c6 <lfs_dir_fetchmatch+0x326>
        bool maybeerased = false;
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	e698      	b.n	801c0ee <lfs_dir_fetchmatch+0x14e>
 801c3bc:	2300      	movs	r3, #0
 801c3be:	e696      	b.n	801c0ee <lfs_dir_fetchmatch+0x14e>
    lfs_block_t t = pair[0];
 801c3c0:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801c3c2:	6872      	ldr	r2, [r6, #4]
 801c3c4:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801c3c6:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801c3c8:	aa16      	add	r2, sp, #88	@ 0x58
 801c3ca:	9b07      	ldr	r3, [sp, #28]
 801c3cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c3d0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801c3d4:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801c3d6:	f109 0901 	add.w	r9, r9, #1
 801c3da:	e648      	b.n	801c06e <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801c3dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c3e0:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c3e2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801c3e4:	a90d      	add	r1, sp, #52	@ 0x34
 801c3e6:	9103      	str	r1, [sp, #12]
 801c3e8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801c3ea:	9102      	str	r1, [sp, #8]
 801c3ec:	9201      	str	r2, [sp, #4]
 801c3ee:	6832      	ldr	r2, [r6, #0]
 801c3f0:	9200      	str	r2, [sp, #0]
 801c3f2:	462a      	mov	r2, r5
 801c3f4:	2100      	movs	r1, #0
 801c3f6:	4628      	mov	r0, r5
 801c3f8:	f7ff fda0 	bl	801bf3c <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801c3fc:	b120      	cbz	r0, 801c408 <lfs_dir_fetchmatch+0x468>
 801c3fe:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c402:	d001      	beq.n	801c408 <lfs_dir_fetchmatch+0x468>
                    return err;
 801c404:	4683      	mov	fp, r0
 801c406:	e02e      	b.n	801c466 <lfs_dir_fetchmatch+0x4c6>
                dir->erased = (fcrc_ == fcrc.crc);
 801c408:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c40a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c40c:	4293      	cmp	r3, r2
 801c40e:	bf14      	ite	ne
 801c410:	2300      	movne	r3, #0
 801c412:	2301      	moveq	r3, #1
 801c414:	75b3      	strb	r3, [r6, #22]
 801c416:	e67c      	b.n	801c112 <lfs_dir_fetchmatch+0x172>
                besttag |= 0x80000000;
 801c418:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801c41c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c41e:	b13b      	cbz	r3, 801c430 <lfs_dir_fetchmatch+0x490>
    return (tag & 0x000ffc00) >> 10;
 801c420:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801c424:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801c426:	4293      	cmp	r3, r2
 801c428:	bf28      	it	cs
 801c42a:	4613      	movcs	r3, r2
 801c42c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c42e:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801c430:	f1bb 0f00 	cmp.w	fp, #0
 801c434:	da17      	bge.n	801c466 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x000ffc00) >> 10;
 801c436:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801c43a:	8ab2      	ldrh	r2, [r6, #20]
 801c43c:	429a      	cmp	r2, r3
 801c43e:	d902      	bls.n	801c446 <lfs_dir_fetchmatch+0x4a6>
            return LFS_ERR_NOENT;
 801c440:	f06f 0b01 	mvn.w	fp, #1
 801c444:	e00f      	b.n	801c466 <lfs_dir_fetchmatch+0x4c6>
            return 0;
 801c446:	f04f 0b00 	mov.w	fp, #0
 801c44a:	e00c      	b.n	801c466 <lfs_dir_fetchmatch+0x4c6>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801c44c:	4b0b      	ldr	r3, [pc, #44]	@ (801c47c <lfs_dir_fetchmatch+0x4dc>)
 801c44e:	9301      	str	r3, [sp, #4]
 801c450:	6873      	ldr	r3, [r6, #4]
 801c452:	9300      	str	r3, [sp, #0]
 801c454:	6833      	ldr	r3, [r6, #0]
 801c456:	f240 5259 	movw	r2, #1369	@ 0x559
 801c45a:	4909      	ldr	r1, [pc, #36]	@ (801c480 <lfs_dir_fetchmatch+0x4e0>)
 801c45c:	4809      	ldr	r0, [pc, #36]	@ (801c484 <lfs_dir_fetchmatch+0x4e4>)
 801c45e:	f00d fd99 	bl	8029f94 <printf>
    return LFS_ERR_CORRUPT;
 801c462:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801c466:	4658      	mov	r0, fp
 801c468:	b017      	add	sp, #92	@ 0x5c
 801c46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801c46e:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801c472:	e7f8      	b.n	801c466 <lfs_dir_fetchmatch+0x4c6>
 801c474:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801c478:	e7f5      	b.n	801c466 <lfs_dir_fetchmatch+0x4c6>
 801c47a:	bf00      	nop
 801c47c:	08036c70 	.word	0x08036c70
 801c480:	08039148 	.word	0x08039148
 801c484:	080392d0 	.word	0x080392d0

0801c488 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801c488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c48c:	b08a      	sub	sp, #40	@ 0x28
 801c48e:	4681      	mov	r9, r0
 801c490:	4688      	mov	r8, r1
 801c492:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801c494:	2300      	movs	r3, #0
 801c496:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801c498:	2501      	movs	r5, #1
 801c49a:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c49c:	4a29      	ldr	r2, [pc, #164]	@ (801c544 <lfs_fs_parent+0xbc>)
 801c49e:	ab05      	add	r3, sp, #20
 801c4a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c4a4:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801c4a8:	46aa      	mov	sl, r5
    while (!lfs_pair_isnull(parent->tail)) {
 801c4aa:	e03a      	b.n	801c522 <lfs_fs_parent+0x9a>
            LFS_WARN("Cycle detected in tail list");
 801c4ac:	4b26      	ldr	r3, [pc, #152]	@ (801c548 <lfs_fs_parent+0xc0>)
 801c4ae:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801c4b2:	4926      	ldr	r1, [pc, #152]	@ (801c54c <lfs_fs_parent+0xc4>)
 801c4b4:	4826      	ldr	r0, [pc, #152]	@ (801c550 <lfs_fs_parent+0xc8>)
 801c4b6:	f00d fd6d 	bl	8029f94 <printf>
            return LFS_ERR_CORRUPT;
 801c4ba:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801c4be:	e03c      	b.n	801c53a <lfs_fs_parent+0xb2>
            tortoise[0] = parent->tail[0];
 801c4c0:	9705      	str	r7, [sp, #20]
            tortoise[1] = parent->tail[1];
 801c4c2:	69e3      	ldr	r3, [r4, #28]
 801c4c4:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 801c4c6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801c4ca:	2500      	movs	r5, #0
 801c4cc:	e00d      	b.n	801c4ea <lfs_fs_parent+0x62>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c4ce:	2301      	movs	r3, #1
 801c4d0:	e000      	b.n	801c4d4 <lfs_fs_parent+0x4c>
 801c4d2:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 801c4d4:	bb7b      	cbnz	r3, 801c536 <lfs_fs_parent+0xae>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801c4d6:	f104 0618 	add.w	r6, r4, #24
 801c4da:	a905      	add	r1, sp, #20
 801c4dc:	4630      	mov	r0, r6
 801c4de:	f7fe fce7 	bl	801aeb0 <lfs_pair_issync>
 801c4e2:	2800      	cmp	r0, #0
 801c4e4:	d1e2      	bne.n	801c4ac <lfs_fs_parent+0x24>
        if (tortoise_i == tortoise_period) {
 801c4e6:	4555      	cmp	r5, sl
 801c4e8:	d0ea      	beq.n	801c4c0 <lfs_fs_parent+0x38>
        tortoise_i += 1;
 801c4ea:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801c4ec:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801c4f0:	f8d8 3000 	ldr.w	r3, [r8]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801c4f4:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801c4f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801c4fa:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801c4fc:	ab07      	add	r3, sp, #28
 801c4fe:	9303      	str	r3, [sp, #12]
 801c500:	4b14      	ldr	r3, [pc, #80]	@ (801c554 <lfs_fs_parent+0xcc>)
 801c502:	9302      	str	r3, [sp, #8]
 801c504:	2300      	movs	r3, #0
 801c506:	9301      	str	r3, [sp, #4]
 801c508:	4b13      	ldr	r3, [pc, #76]	@ (801c558 <lfs_fs_parent+0xd0>)
 801c50a:	9300      	str	r3, [sp, #0]
 801c50c:	4b13      	ldr	r3, [pc, #76]	@ (801c55c <lfs_fs_parent+0xd4>)
 801c50e:	4632      	mov	r2, r6
 801c510:	4621      	mov	r1, r4
 801c512:	4648      	mov	r0, r9
 801c514:	f7ff fd44 	bl	801bfa0 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801c518:	4603      	mov	r3, r0
 801c51a:	b110      	cbz	r0, 801c522 <lfs_fs_parent+0x9a>
 801c51c:	f110 0f02 	cmn.w	r0, #2
 801c520:	d10b      	bne.n	801c53a <lfs_fs_parent+0xb2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c522:	69a7      	ldr	r7, [r4, #24]
 801c524:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801c528:	d0d3      	beq.n	801c4d2 <lfs_fs_parent+0x4a>
 801c52a:	69e3      	ldr	r3, [r4, #28]
 801c52c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c530:	d0cd      	beq.n	801c4ce <lfs_fs_parent+0x46>
 801c532:	2300      	movs	r3, #0
 801c534:	e7ce      	b.n	801c4d4 <lfs_fs_parent+0x4c>
    return LFS_ERR_NOENT;
 801c536:	f06f 0301 	mvn.w	r3, #1
}
 801c53a:	4618      	mov	r0, r3
 801c53c:	b00a      	add	sp, #40	@ 0x28
 801c53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c542:	bf00      	nop
 801c544:	08035d14 	.word	0x08035d14
 801c548:	08036c70 	.word	0x08036c70
 801c54c:	08039148 	.word	0x08039148
 801c550:	08039308 	.word	0x08039308
 801c554:	0801b671 	.word	0x0801b671
 801c558:	20000008 	.word	0x20000008
 801c55c:	7ff003ff 	.word	0x7ff003ff

0801c560 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801c560:	b500      	push	{lr}
 801c562:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801c564:	2300      	movs	r3, #0
 801c566:	9303      	str	r3, [sp, #12]
 801c568:	9302      	str	r3, [sp, #8]
 801c56a:	9301      	str	r3, [sp, #4]
 801c56c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c570:	9300      	str	r3, [sp, #0]
 801c572:	f7ff fd15 	bl	801bfa0 <lfs_dir_fetchmatch>
}
 801c576:	b005      	add	sp, #20
 801c578:	f85d fb04 	ldr.w	pc, [sp], #4

0801c57c <lfs_fs_traverse_>:
        bool includeorphans) {
 801c57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c580:	b093      	sub	sp, #76	@ 0x4c
 801c582:	4606      	mov	r6, r0
 801c584:	460f      	mov	r7, r1
 801c586:	4690      	mov	r8, r2
 801c588:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801c58a:	2220      	movs	r2, #32
 801c58c:	2100      	movs	r1, #0
 801c58e:	a80a      	add	r0, sp, #40	@ 0x28
 801c590:	f010 fa1e 	bl	802c9d0 <memset>
 801c594:	2501      	movs	r5, #1
 801c596:	9511      	str	r5, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c598:	4a62      	ldr	r2, [pc, #392]	@ (801c724 <lfs_fs_traverse_+0x1a8>)
 801c59a:	ab08      	add	r3, sp, #32
 801c59c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c5a0:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801c5a4:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c5a6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c5a8:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801c5ac:	f000 8081 	beq.w	801c6b2 <lfs_fs_traverse_+0x136>
 801c5b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c5b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c5b6:	d07a      	beq.n	801c6ae <lfs_fs_traverse_+0x132>
 801c5b8:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d17b      	bne.n	801c6b6 <lfs_fs_traverse_+0x13a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801c5be:	a908      	add	r1, sp, #32
 801c5c0:	a810      	add	r0, sp, #64	@ 0x40
 801c5c2:	f7fe fc75 	bl	801aeb0 <lfs_pair_issync>
 801c5c6:	b988      	cbnz	r0, 801c5ec <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801c5c8:	4555      	cmp	r5, sl
 801c5ca:	d019      	beq.n	801c600 <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801c5cc:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 801c5ce:	2400      	movs	r4, #0
 801c5d0:	2c01      	cmp	r4, #1
 801c5d2:	dc1c      	bgt.n	801c60e <lfs_fs_traverse_+0x92>
            int err = cb(data, dir.tail[i]);
 801c5d4:	1da3      	adds	r3, r4, #6
 801c5d6:	aa12      	add	r2, sp, #72	@ 0x48
 801c5d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c5dc:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801c5e0:	4640      	mov	r0, r8
 801c5e2:	47b8      	blx	r7
            if (err) {
 801c5e4:	4603      	mov	r3, r0
 801c5e6:	b9f8      	cbnz	r0, 801c628 <lfs_fs_traverse_+0xac>
        for (int i = 0; i < 2; i++) {
 801c5e8:	3401      	adds	r4, #1
 801c5ea:	e7f1      	b.n	801c5d0 <lfs_fs_traverse_+0x54>
            LFS_WARN("Cycle detected in tail list");
 801c5ec:	4b4e      	ldr	r3, [pc, #312]	@ (801c728 <lfs_fs_traverse_+0x1ac>)
 801c5ee:	f241 2222 	movw	r2, #4642	@ 0x1222
 801c5f2:	494e      	ldr	r1, [pc, #312]	@ (801c72c <lfs_fs_traverse_+0x1b0>)
 801c5f4:	484e      	ldr	r0, [pc, #312]	@ (801c730 <lfs_fs_traverse_+0x1b4>)
 801c5f6:	f00d fccd 	bl	8029f94 <printf>
            return LFS_ERR_CORRUPT;
 801c5fa:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801c5fe:	e013      	b.n	801c628 <lfs_fs_traverse_+0xac>
            tortoise[0] = dir.tail[0];
 801c600:	9408      	str	r4, [sp, #32]
            tortoise[1] = dir.tail[1];
 801c602:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c604:	9309      	str	r3, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801c606:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801c60a:	2500      	movs	r5, #0
 801c60c:	e7de      	b.n	801c5cc <lfs_fs_traverse_+0x50>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801c60e:	aa10      	add	r2, sp, #64	@ 0x40
 801c610:	a90a      	add	r1, sp, #40	@ 0x28
 801c612:	4630      	mov	r0, r6
 801c614:	f7ff ffa4 	bl	801c560 <lfs_dir_fetch>
        if (err) {
 801c618:	9005      	str	r0, [sp, #20]
 801c61a:	2800      	cmp	r0, #0
 801c61c:	d17f      	bne.n	801c71e <lfs_fs_traverse_+0x1a2>
        for (uint16_t id = 0; id < dir.count; id++) {
 801c61e:	2400      	movs	r4, #0
 801c620:	e016      	b.n	801c650 <lfs_fs_traverse_+0xd4>
                if (tag == LFS_ERR_NOENT) {
 801c622:	f113 0f02 	cmn.w	r3, #2
 801c626:	d011      	beq.n	801c64c <lfs_fs_traverse_+0xd0>
}
 801c628:	4618      	mov	r0, r3
 801c62a:	b013      	add	sp, #76	@ 0x4c
 801c62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801c630:	f8cd 8008 	str.w	r8, [sp, #8]
 801c634:	9701      	str	r7, [sp, #4]
 801c636:	9b07      	ldr	r3, [sp, #28]
 801c638:	9300      	str	r3, [sp, #0]
 801c63a:	9b06      	ldr	r3, [sp, #24]
 801c63c:	4632      	mov	r2, r6
 801c63e:	2100      	movs	r1, #0
 801c640:	4630      	mov	r0, r6
 801c642:	f7fe ffc9 	bl	801b5d8 <lfs_ctz_traverse>
                if (err) {
 801c646:	4603      	mov	r3, r0
 801c648:	2800      	cmp	r0, #0
 801c64a:	d1ed      	bne.n	801c628 <lfs_fs_traverse_+0xac>
        for (uint16_t id = 0; id < dir.count; id++) {
 801c64c:	3401      	adds	r4, #1
 801c64e:	b2a4      	uxth	r4, r4
 801c650:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801c654:	42a3      	cmp	r3, r4
 801c656:	d9a6      	bls.n	801c5a6 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801c658:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801c65a:	aa06      	add	r2, sp, #24
 801c65c:	9200      	str	r2, [sp, #0]
 801c65e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801c662:	f043 0308 	orr.w	r3, r3, #8
 801c666:	4a33      	ldr	r2, [pc, #204]	@ (801c734 <lfs_fs_traverse_+0x1b8>)
 801c668:	a90a      	add	r1, sp, #40	@ 0x28
 801c66a:	4630      	mov	r0, r6
 801c66c:	f7fe ff8a 	bl	801b584 <lfs_dir_get>
            if (tag < 0) {
 801c670:	1e03      	subs	r3, r0, #0
 801c672:	dbd6      	blt.n	801c622 <lfs_fs_traverse_+0xa6>
    return (tag & 0x7ff00000) >> 20;
 801c674:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801c678:	f240 2202 	movw	r2, #514	@ 0x202
 801c67c:	4293      	cmp	r3, r2
 801c67e:	d0d7      	beq.n	801c630 <lfs_fs_traverse_+0xb4>
            } else if (includeorphans &&
 801c680:	f1b9 0f00 	cmp.w	r9, #0
 801c684:	d0e2      	beq.n	801c64c <lfs_fs_traverse_+0xd0>
 801c686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c68a:	d1df      	bne.n	801c64c <lfs_fs_traverse_+0xd0>
                for (int i = 0; i < 2; i++) {
 801c68c:	f8dd b014 	ldr.w	fp, [sp, #20]
 801c690:	e001      	b.n	801c696 <lfs_fs_traverse_+0x11a>
 801c692:	f10b 0b01 	add.w	fp, fp, #1
 801c696:	f1bb 0f01 	cmp.w	fp, #1
 801c69a:	dcd7      	bgt.n	801c64c <lfs_fs_traverse_+0xd0>
                    err = cb(data, (&ctz.head)[i]);
 801c69c:	ab06      	add	r3, sp, #24
 801c69e:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801c6a2:	4640      	mov	r0, r8
 801c6a4:	47b8      	blx	r7
                    if (err) {
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	2800      	cmp	r0, #0
 801c6aa:	d0f2      	beq.n	801c692 <lfs_fs_traverse_+0x116>
 801c6ac:	e7bc      	b.n	801c628 <lfs_fs_traverse_+0xac>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c6ae:	2301      	movs	r3, #1
 801c6b0:	e783      	b.n	801c5ba <lfs_fs_traverse_+0x3e>
 801c6b2:	2301      	movs	r3, #1
 801c6b4:	e781      	b.n	801c5ba <lfs_fs_traverse_+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c6b6:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801c6b8:	e00f      	b.n	801c6da <lfs_fs_traverse_+0x15e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801c6ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c6bc:	f8cd 8008 	str.w	r8, [sp, #8]
 801c6c0:	9701      	str	r7, [sp, #4]
 801c6c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c6c4:	9200      	str	r2, [sp, #0]
 801c6c6:	4632      	mov	r2, r6
 801c6c8:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c6cc:	4630      	mov	r0, r6
 801c6ce:	f7fe ff83 	bl	801b5d8 <lfs_ctz_traverse>
            if (err) {
 801c6d2:	4603      	mov	r3, r0
 801c6d4:	b158      	cbz	r0, 801c6ee <lfs_fs_traverse_+0x172>
 801c6d6:	e7a7      	b.n	801c628 <lfs_fs_traverse_+0xac>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c6d8:	6824      	ldr	r4, [r4, #0]
 801c6da:	b1f4      	cbz	r4, 801c71a <lfs_fs_traverse_+0x19e>
        if (f->type != LFS_TYPE_REG) {
 801c6dc:	79a3      	ldrb	r3, [r4, #6]
 801c6de:	2b01      	cmp	r3, #1
 801c6e0:	d1fa      	bne.n	801c6d8 <lfs_fs_traverse_+0x15c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801c6e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6e4:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801c6e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c6ec:	d0e5      	beq.n	801c6ba <lfs_fs_traverse_+0x13e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801c6ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6f0:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801c6f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c6f8:	d1ee      	bne.n	801c6d8 <lfs_fs_traverse_+0x15c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801c6fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c6fc:	f8cd 8008 	str.w	r8, [sp, #8]
 801c700:	9701      	str	r7, [sp, #4]
 801c702:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801c704:	9200      	str	r2, [sp, #0]
 801c706:	4632      	mov	r2, r6
 801c708:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c70c:	4630      	mov	r0, r6
 801c70e:	f7fe ff63 	bl	801b5d8 <lfs_ctz_traverse>
            if (err) {
 801c712:	4603      	mov	r3, r0
 801c714:	2800      	cmp	r0, #0
 801c716:	d0df      	beq.n	801c6d8 <lfs_fs_traverse_+0x15c>
 801c718:	e786      	b.n	801c628 <lfs_fs_traverse_+0xac>
    return 0;
 801c71a:	2300      	movs	r3, #0
 801c71c:	e784      	b.n	801c628 <lfs_fs_traverse_+0xac>
            return err;
 801c71e:	9b05      	ldr	r3, [sp, #20]
 801c720:	e782      	b.n	801c628 <lfs_fs_traverse_+0xac>
 801c722:	bf00      	nop
 801c724:	08035d14 	.word	0x08035d14
 801c728:	08036c70 	.word	0x08036c70
 801c72c:	08039148 	.word	0x08039148
 801c730:	08039308 	.word	0x08039308
 801c734:	700ffc00 	.word	0x700ffc00

0801c738 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801c738:	b538      	push	{r3, r4, r5, lr}
 801c73a:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801c73c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801c73e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801c740:	4413      	add	r3, r2
            % lfs->block_count;
 801c742:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801c744:	fbb3 f1f2 	udiv	r1, r3, r2
 801c748:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801c74c:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801c74e:	2100      	movs	r1, #0
 801c750:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801c752:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801c754:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801c756:	00db      	lsls	r3, r3, #3
 801c758:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801c75a:	4283      	cmp	r3, r0
 801c75c:	bf28      	it	cs
 801c75e:	4603      	movcs	r3, r0
 801c760:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801c762:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801c764:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801c766:	f010 f933 	bl	802c9d0 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801c76a:	2301      	movs	r3, #1
 801c76c:	4622      	mov	r2, r4
 801c76e:	4906      	ldr	r1, [pc, #24]	@ (801c788 <lfs_alloc_scan+0x50>)
 801c770:	4620      	mov	r0, r4
 801c772:	f7ff ff03 	bl	801c57c <lfs_fs_traverse_>
    if (err) {
 801c776:	4605      	mov	r5, r0
 801c778:	b908      	cbnz	r0, 801c77e <lfs_alloc_scan+0x46>
}
 801c77a:	4628      	mov	r0, r5
 801c77c:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801c77e:	4620      	mov	r0, r4
 801c780:	f7fe fc15 	bl	801afae <lfs_alloc_drop>
        return err;
 801c784:	e7f9      	b.n	801c77a <lfs_alloc_scan+0x42>
 801c786:	bf00      	nop
 801c788:	0801afbd 	.word	0x0801afbd

0801c78c <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801c78c:	b530      	push	{r4, r5, lr}
 801c78e:	b083      	sub	sp, #12
 801c790:	4604      	mov	r4, r0
 801c792:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801c794:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801c796:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801c798:	4293      	cmp	r3, r2
 801c79a:	d22b      	bcs.n	801c7f4 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c79c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801c79e:	08da      	lsrs	r2, r3, #3
 801c7a0:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801c7a2:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c7a6:	40ca      	lsrs	r2, r1
 801c7a8:	f012 0f01 	tst.w	r2, #1
 801c7ac:	d005      	beq.n	801c7ba <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801c7ae:	3301      	adds	r3, #1
 801c7b0:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801c7b2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801c7b4:	3b01      	subs	r3, #1
 801c7b6:	6623      	str	r3, [r4, #96]	@ 0x60
 801c7b8:	e7ec      	b.n	801c794 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801c7ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c7bc:	4413      	add	r3, r2
                        % lfs->block_count;
 801c7be:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801c7c0:	fbb3 f1f2 	udiv	r1, r3, r2
 801c7c4:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801c7c8:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801c7ca:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801c7cc:	3301      	adds	r3, #1
 801c7ce:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801c7d0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801c7d2:	3a01      	subs	r2, #1
 801c7d4:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801c7d6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801c7d8:	4293      	cmp	r3, r2
 801c7da:	d225      	bcs.n	801c828 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c7dc:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801c7de:	08da      	lsrs	r2, r3, #3
 801c7e0:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801c7e2:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c7e6:	fa22 f303 	lsr.w	r3, r2, r3
 801c7ea:	f013 0f01 	tst.w	r3, #1
 801c7ee:	d1ec      	bne.n	801c7ca <lfs_alloc+0x3e>
                        return 0;
 801c7f0:	2000      	movs	r0, #0
 801c7f2:	e01a      	b.n	801c82a <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801c7f4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801c7f6:	b12a      	cbz	r2, 801c804 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801c7f8:	4620      	mov	r0, r4
 801c7fa:	f7ff ff9d 	bl	801c738 <lfs_alloc_scan>
        if(err) {
 801c7fe:	2800      	cmp	r0, #0
 801c800:	d0c8      	beq.n	801c794 <lfs_alloc+0x8>
 801c802:	e012      	b.n	801c82a <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801c804:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c806:	4413      	add	r3, r2
 801c808:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801c80a:	fbb3 f1f2 	udiv	r1, r3, r2
 801c80e:	4808      	ldr	r0, [pc, #32]	@ (801c830 <lfs_alloc+0xa4>)
 801c810:	9000      	str	r0, [sp, #0]
 801c812:	fb02 3311 	mls	r3, r2, r1, r3
 801c816:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801c81a:	4906      	ldr	r1, [pc, #24]	@ (801c834 <lfs_alloc+0xa8>)
 801c81c:	4806      	ldr	r0, [pc, #24]	@ (801c838 <lfs_alloc+0xac>)
 801c81e:	f00d fbb9 	bl	8029f94 <printf>
            return LFS_ERR_NOSPC;
 801c822:	f06f 001b 	mvn.w	r0, #27
 801c826:	e000      	b.n	801c82a <lfs_alloc+0x9e>
                        return 0;
 801c828:	2000      	movs	r0, #0
}
 801c82a:	b003      	add	sp, #12
 801c82c:	bd30      	pop	{r4, r5, pc}
 801c82e:	bf00      	nop
 801c830:	08036c70 	.word	0x08036c70
 801c834:	08039148 	.word	0x08039148
 801c838:	08039334 	.word	0x08039334

0801c83c <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801c83c:	b570      	push	{r4, r5, r6, lr}
 801c83e:	b084      	sub	sp, #16
 801c840:	4606      	mov	r6, r0
 801c842:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801c844:	2500      	movs	r5, #0
 801c846:	2d01      	cmp	r5, #1
 801c848:	dc0d      	bgt.n	801c866 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801c84a:	3501      	adds	r5, #1
 801c84c:	f005 0101 	and.w	r1, r5, #1
 801c850:	bf48      	it	mi
 801c852:	4249      	negmi	r1, r1
 801c854:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801c858:	4630      	mov	r0, r6
 801c85a:	f7ff ff97 	bl	801c78c <lfs_alloc>
        if (err) {
 801c85e:	4603      	mov	r3, r0
 801c860:	2800      	cmp	r0, #0
 801c862:	d0f0      	beq.n	801c846 <lfs_dir_alloc+0xa>
 801c864:	e02d      	b.n	801c8c2 <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801c866:	2100      	movs	r1, #0
 801c868:	4622      	mov	r2, r4
 801c86a:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801c86e:	2304      	movs	r3, #4
 801c870:	9303      	str	r3, [sp, #12]
 801c872:	9202      	str	r2, [sp, #8]
 801c874:	9101      	str	r1, [sp, #4]
 801c876:	6822      	ldr	r2, [r4, #0]
 801c878:	9200      	str	r2, [sp, #0]
 801c87a:	4632      	mov	r2, r6
 801c87c:	4630      	mov	r0, r6
 801c87e:	f7fe fcdd 	bl	801b23c <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801c882:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801c884:	4603      	mov	r3, r0
 801c886:	b110      	cbz	r0, 801c88e <lfs_dir_alloc+0x52>
 801c888:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c88c:	d119      	bne.n	801c8c2 <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801c88e:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801c890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c892:	2b00      	cmp	r3, #0
 801c894:	dd0a      	ble.n	801c8ac <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801c896:	3301      	adds	r3, #1
 801c898:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801c89c:	1853      	adds	r3, r2, r1
 801c89e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801c8a0:	fbb3 f2f1 	udiv	r2, r3, r1
 801c8a4:	fb01 3212 	mls	r2, r1, r2, r3
 801c8a8:	1a9b      	subs	r3, r3, r2
 801c8aa:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801c8ac:	2304      	movs	r3, #4
 801c8ae:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801c8b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c8b4:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801c8b6:	2300      	movs	r3, #0
 801c8b8:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801c8ba:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801c8bc:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801c8be:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801c8c0:	75e3      	strb	r3, [r4, #23]
}
 801c8c2:	4618      	mov	r0, r3
 801c8c4:	b004      	add	sp, #16
 801c8c6:	bd70      	pop	{r4, r5, r6, pc}

0801c8c8 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8ca:	b089      	sub	sp, #36	@ 0x24
 801c8cc:	4605      	mov	r5, r0
 801c8ce:	460e      	mov	r6, r1
 801c8d0:	e053      	b.n	801c97a <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801c8d2:	2201      	movs	r2, #1
 801c8d4:	9203      	str	r2, [sp, #12]
 801c8d6:	f10d 021b 	add.w	r2, sp, #27
 801c8da:	9202      	str	r2, [sp, #8]
 801c8dc:	9401      	str	r4, [sp, #4]
 801c8de:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801c8e0:	9200      	str	r2, [sp, #0]
 801c8e2:	1b1b      	subs	r3, r3, r4
 801c8e4:	462a      	mov	r2, r5
 801c8e6:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801c8ea:	4628      	mov	r0, r5
 801c8ec:	f7fe fca6 	bl	801b23c <lfs_bd_read>
                if (err) {
 801c8f0:	2800      	cmp	r0, #0
 801c8f2:	d152      	bne.n	801c99a <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801c8f4:	2301      	movs	r3, #1
 801c8f6:	9303      	str	r3, [sp, #12]
 801c8f8:	f10d 021b 	add.w	r2, sp, #27
 801c8fc:	9202      	str	r2, [sp, #8]
 801c8fe:	9401      	str	r4, [sp, #4]
 801c900:	9a07      	ldr	r2, [sp, #28]
 801c902:	9200      	str	r2, [sp, #0]
 801c904:	462a      	mov	r2, r5
 801c906:	f105 0110 	add.w	r1, r5, #16
 801c90a:	4628      	mov	r0, r5
 801c90c:	f7ff f992 	bl	801bc34 <lfs_bd_prog>
            if (err) {
 801c910:	bb20      	cbnz	r0, 801c95c <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801c912:	3401      	adds	r4, #1
 801c914:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801c916:	42a3      	cmp	r3, r4
 801c918:	d945      	bls.n	801c9a6 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801c91a:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801c91c:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801c920:	d0d7      	beq.n	801c8d2 <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801c922:	88b2      	ldrh	r2, [r6, #4]
 801c924:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801c926:	2101      	movs	r1, #1
 801c928:	9105      	str	r1, [sp, #20]
 801c92a:	f10d 011b 	add.w	r1, sp, #27
 801c92e:	9104      	str	r1, [sp, #16]
 801c930:	9403      	str	r4, [sp, #12]
 801c932:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801c936:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801c93a:	9202      	str	r2, [sp, #8]
 801c93c:	4a27      	ldr	r2, [pc, #156]	@ (801c9dc <lfs_file_relocate+0x114>)
 801c93e:	9201      	str	r2, [sp, #4]
 801c940:	1b1b      	subs	r3, r3, r4
 801c942:	9300      	str	r3, [sp, #0]
 801c944:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801c948:	2200      	movs	r2, #0
 801c94a:	f106 0108 	add.w	r1, r6, #8
 801c94e:	4628      	mov	r0, r5
 801c950:	f7ff f84c 	bl	801b9ec <lfs_dir_getread>
                if (err) {
 801c954:	2800      	cmp	r0, #0
 801c956:	d0cd      	beq.n	801c8f4 <lfs_file_relocate+0x2c>
                    return err;
 801c958:	4607      	mov	r7, r0
 801c95a:	e03b      	b.n	801c9d4 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801c95c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c960:	d11d      	bne.n	801c99e <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801c962:	4b1f      	ldr	r3, [pc, #124]	@ (801c9e0 <lfs_file_relocate+0x118>)
 801c964:	9300      	str	r3, [sp, #0]
 801c966:	9b07      	ldr	r3, [sp, #28]
 801c968:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801c96c:	491d      	ldr	r1, [pc, #116]	@ (801c9e4 <lfs_file_relocate+0x11c>)
 801c96e:	481e      	ldr	r0, [pc, #120]	@ (801c9e8 <lfs_file_relocate+0x120>)
 801c970:	f00d fb10 	bl	8029f94 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801c974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c978:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801c97a:	a907      	add	r1, sp, #28
 801c97c:	4628      	mov	r0, r5
 801c97e:	f7ff ff05 	bl	801c78c <lfs_alloc>
        if (err) {
 801c982:	4607      	mov	r7, r0
 801c984:	bb30      	cbnz	r0, 801c9d4 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801c986:	9907      	ldr	r1, [sp, #28]
 801c988:	4628      	mov	r0, r5
 801c98a:	f7fe fbdd 	bl	801b148 <lfs_bd_erase>
        if (err) {
 801c98e:	4607      	mov	r7, r0
 801c990:	b138      	cbz	r0, 801c9a2 <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801c992:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c996:	d0e4      	beq.n	801c962 <lfs_file_relocate+0x9a>
 801c998:	e01c      	b.n	801c9d4 <lfs_file_relocate+0x10c>
                    return err;
 801c99a:	4607      	mov	r7, r0
 801c99c:	e01a      	b.n	801c9d4 <lfs_file_relocate+0x10c>
                return err;
 801c99e:	4607      	mov	r7, r0
 801c9a0:	e018      	b.n	801c9d4 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801c9a2:	2400      	movs	r4, #0
 801c9a4:	e7b6      	b.n	801c914 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801c9a6:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c9a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c9aa:	69e9      	ldr	r1, [r5, #28]
 801c9ac:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801c9ae:	f011 fa4b 	bl	802de48 <memcpy>
        file->cache.block = lfs->pcache.block;
 801c9b2:	692b      	ldr	r3, [r5, #16]
 801c9b4:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801c9b6:	696b      	ldr	r3, [r5, #20]
 801c9b8:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801c9ba:	69ab      	ldr	r3, [r5, #24]
 801c9bc:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801c9be:	f105 0110 	add.w	r1, r5, #16
 801c9c2:	4628      	mov	r0, r5
 801c9c4:	f7fe fc10 	bl	801b1e8 <lfs_cache_zero>
        file->block = nblock;
 801c9c8:	9b07      	ldr	r3, [sp, #28]
 801c9ca:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801c9cc:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801c9ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c9d2:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801c9d4:	4638      	mov	r0, r7
 801c9d6:	b009      	add	sp, #36	@ 0x24
 801c9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9da:	bf00      	nop
 801c9dc:	fff7fc00 	.word	0xfff7fc00
 801c9e0:	08036c70 	.word	0x08036c70
 801c9e4:	08039148 	.word	0x08039148
 801c9e8:	08039360 	.word	0x08039360

0801c9ec <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801c9ec:	b538      	push	{r3, r4, r5, lr}
 801c9ee:	4605      	mov	r5, r0
 801c9f0:	460c      	mov	r4, r1
    file->off = file->pos;
 801c9f2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801c9f4:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801c9f6:	f7fe fad7 	bl	801afa8 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801c9fa:	4621      	mov	r1, r4
 801c9fc:	4628      	mov	r0, r5
 801c9fe:	f7ff ff63 	bl	801c8c8 <lfs_file_relocate>
    if (err) {
 801ca02:	b918      	cbnz	r0, 801ca0c <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801ca04:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ca06:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801ca0a:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801ca0c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ca10 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801ca10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca14:	b08b      	sub	sp, #44	@ 0x2c
 801ca16:	4605      	mov	r5, r0
 801ca18:	460f      	mov	r7, r1
 801ca1a:	4616      	mov	r6, r2
 801ca1c:	9305      	str	r3, [sp, #20]
 801ca1e:	e04d      	b.n	801cabc <lfs_ctz_extend+0xac>
            if (size == 0) {
 801ca20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d032      	beq.n	801ca8c <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801ca26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ca28:	3b01      	subs	r3, #1
 801ca2a:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801ca2c:	a908      	add	r1, sp, #32
 801ca2e:	4628      	mov	r0, r5
 801ca30:	f7fe fbe6 	bl	801b200 <lfs_ctz_index>
            noff = noff + 1;
 801ca34:	9b08      	ldr	r3, [sp, #32]
 801ca36:	3301      	adds	r3, #1
 801ca38:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801ca3a:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801ca3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801ca3e:	4293      	cmp	r3, r2
 801ca40:	d05b      	beq.n	801cafa <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801ca42:	2400      	movs	r4, #0
 801ca44:	46b9      	mov	r9, r7
 801ca46:	9f05      	ldr	r7, [sp, #20]
 801ca48:	9b08      	ldr	r3, [sp, #32]
 801ca4a:	42a3      	cmp	r3, r4
 801ca4c:	d94a      	bls.n	801cae4 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801ca4e:	2201      	movs	r2, #1
 801ca50:	9203      	str	r2, [sp, #12]
 801ca52:	aa09      	add	r2, sp, #36	@ 0x24
 801ca54:	9202      	str	r2, [sp, #8]
 801ca56:	9401      	str	r4, [sp, #4]
 801ca58:	9700      	str	r7, [sp, #0]
 801ca5a:	1b1b      	subs	r3, r3, r4
 801ca5c:	4632      	mov	r2, r6
 801ca5e:	2100      	movs	r1, #0
 801ca60:	4628      	mov	r0, r5
 801ca62:	f7fe fbeb 	bl	801b23c <lfs_bd_read>
                    if (err) {
 801ca66:	4603      	mov	r3, r0
 801ca68:	2800      	cmp	r0, #0
 801ca6a:	d139      	bne.n	801cae0 <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801ca6c:	2301      	movs	r3, #1
 801ca6e:	9303      	str	r3, [sp, #12]
 801ca70:	aa09      	add	r2, sp, #36	@ 0x24
 801ca72:	9202      	str	r2, [sp, #8]
 801ca74:	9401      	str	r4, [sp, #4]
 801ca76:	9a07      	ldr	r2, [sp, #28]
 801ca78:	9200      	str	r2, [sp, #0]
 801ca7a:	4632      	mov	r2, r6
 801ca7c:	4649      	mov	r1, r9
 801ca7e:	4628      	mov	r0, r5
 801ca80:	f7ff f8d8 	bl	801bc34 <lfs_bd_prog>
                    if (err) {
 801ca84:	4603      	mov	r3, r0
 801ca86:	b948      	cbnz	r0, 801ca9c <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801ca88:	3401      	adds	r4, #1
 801ca8a:	e7dd      	b.n	801ca48 <lfs_ctz_extend+0x38>
                *block = nblock;
 801ca8c:	4682      	mov	sl, r0
 801ca8e:	9b07      	ldr	r3, [sp, #28]
 801ca90:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ca92:	6013      	str	r3, [r2, #0]
                *off = 0;
 801ca94:	2300      	movs	r3, #0
 801ca96:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ca98:	6013      	str	r3, [r2, #0]
                return 0;
 801ca9a:	e02a      	b.n	801caf2 <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801ca9c:	464f      	mov	r7, r9
 801ca9e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801caa2:	d11d      	bne.n	801cae0 <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801caa4:	4b36      	ldr	r3, [pc, #216]	@ (801cb80 <lfs_ctz_extend+0x170>)
 801caa6:	9300      	str	r3, [sp, #0]
 801caa8:	9b07      	ldr	r3, [sp, #28]
 801caaa:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801caae:	4935      	ldr	r1, [pc, #212]	@ (801cb84 <lfs_ctz_extend+0x174>)
 801cab0:	4835      	ldr	r0, [pc, #212]	@ (801cb88 <lfs_ctz_extend+0x178>)
 801cab2:	f00d fa6f 	bl	8029f94 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801cab6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801caba:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801cabc:	a907      	add	r1, sp, #28
 801cabe:	4628      	mov	r0, r5
 801cac0:	f7ff fe64 	bl	801c78c <lfs_alloc>
        if (err) {
 801cac4:	2800      	cmp	r0, #0
 801cac6:	d159      	bne.n	801cb7c <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801cac8:	9907      	ldr	r1, [sp, #28]
 801caca:	4628      	mov	r0, r5
 801cacc:	f7fe fb3c 	bl	801b148 <lfs_bd_erase>
            if (err) {
 801cad0:	4680      	mov	r8, r0
 801cad2:	2800      	cmp	r0, #0
 801cad4:	d0a4      	beq.n	801ca20 <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801cad6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cada:	d0e3      	beq.n	801caa4 <lfs_ctz_extend+0x94>
 801cadc:	4682      	mov	sl, r0
 801cade:	e008      	b.n	801caf2 <lfs_ctz_extend+0xe2>
                        return err;
 801cae0:	469a      	mov	sl, r3
 801cae2:	e006      	b.n	801caf2 <lfs_ctz_extend+0xe2>
                *block = nblock;
 801cae4:	46c2      	mov	sl, r8
 801cae6:	9b07      	ldr	r3, [sp, #28]
 801cae8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801caea:	6013      	str	r3, [r2, #0]
                *off = noff;
 801caec:	9b08      	ldr	r3, [sp, #32]
 801caee:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801caf0:	6013      	str	r3, [r2, #0]
}
 801caf2:	4650      	mov	r0, sl
 801caf4:	b00b      	add	sp, #44	@ 0x2c
 801caf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801cafa:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801cafc:	fa90 f9a0 	rbit	r9, r0
 801cb00:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801cb04:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801cb08:	9b05      	ldr	r3, [sp, #20]
 801cb0a:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801cb0c:	2400      	movs	r4, #0
 801cb0e:	46ab      	mov	fp, r5
 801cb10:	e006      	b.n	801cb20 <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801cb12:	465d      	mov	r5, fp
 801cb14:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cb18:	d0c4      	beq.n	801caa4 <lfs_ctz_extend+0x94>
                    return err;
 801cb1a:	4682      	mov	sl, r0
 801cb1c:	e7e9      	b.n	801caf2 <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801cb1e:	3401      	adds	r4, #1
 801cb20:	4554      	cmp	r4, sl
 801cb22:	d221      	bcs.n	801cb68 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801cb24:	00a5      	lsls	r5, r4, #2
 801cb26:	2304      	movs	r3, #4
 801cb28:	9303      	str	r3, [sp, #12]
 801cb2a:	ab09      	add	r3, sp, #36	@ 0x24
 801cb2c:	9302      	str	r3, [sp, #8]
 801cb2e:	9501      	str	r5, [sp, #4]
 801cb30:	9b07      	ldr	r3, [sp, #28]
 801cb32:	9300      	str	r3, [sp, #0]
 801cb34:	2301      	movs	r3, #1
 801cb36:	4632      	mov	r2, r6
 801cb38:	4639      	mov	r1, r7
 801cb3a:	4658      	mov	r0, fp
 801cb3c:	f7ff f87a 	bl	801bc34 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801cb40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801cb42:	2800      	cmp	r0, #0
 801cb44:	d1e5      	bne.n	801cb12 <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801cb46:	454c      	cmp	r4, r9
 801cb48:	d0e9      	beq.n	801cb1e <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801cb4a:	2304      	movs	r3, #4
 801cb4c:	9303      	str	r3, [sp, #12]
 801cb4e:	a909      	add	r1, sp, #36	@ 0x24
 801cb50:	9102      	str	r1, [sp, #8]
 801cb52:	9501      	str	r5, [sp, #4]
 801cb54:	9200      	str	r2, [sp, #0]
 801cb56:	4632      	mov	r2, r6
 801cb58:	2100      	movs	r1, #0
 801cb5a:	4658      	mov	r0, fp
 801cb5c:	f7fe fb6e 	bl	801b23c <lfs_bd_read>
                    if (err) {
 801cb60:	2800      	cmp	r0, #0
 801cb62:	d0dc      	beq.n	801cb1e <lfs_ctz_extend+0x10e>
                        return err;
 801cb64:	4682      	mov	sl, r0
 801cb66:	e7c4      	b.n	801caf2 <lfs_ctz_extend+0xe2>
            *block = nblock;
 801cb68:	46d1      	mov	r9, sl
 801cb6a:	46c2      	mov	sl, r8
 801cb6c:	9b07      	ldr	r3, [sp, #28]
 801cb6e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801cb70:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801cb72:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801cb76:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cb78:	6019      	str	r1, [r3, #0]
            return 0;
 801cb7a:	e7ba      	b.n	801caf2 <lfs_ctz_extend+0xe2>
 801cb7c:	4682      	mov	sl, r0
 801cb7e:	e7b8      	b.n	801caf2 <lfs_ctz_extend+0xe2>
 801cb80:	08036c70 	.word	0x08036c70
 801cb84:	08039148 	.word	0x08039148
 801cb88:	08039360 	.word	0x08039360

0801cb8c <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801cb8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cb90:	b087      	sub	sp, #28
 801cb92:	4605      	mov	r5, r0
 801cb94:	460c      	mov	r4, r1
 801cb96:	4617      	mov	r7, r2
 801cb98:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801cb9a:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801cb9c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cba0:	d008      	beq.n	801cbb4 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801cba2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801cba4:	444b      	add	r3, r9
 801cba6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801cba8:	4293      	cmp	r3, r2
 801cbaa:	bf38      	it	cc
 801cbac:	4613      	movcc	r3, r2
 801cbae:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801cbb0:	429a      	cmp	r2, r3
 801cbb2:	d32d      	bcc.n	801cc10 <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801cbb4:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801cbb6:	f1b8 0f00 	cmp.w	r8, #0
 801cbba:	f000 8094 	beq.w	801cce6 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801cbbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cbc0:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801cbc4:	d004      	beq.n	801cbd0 <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801cbc6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801cbc8:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801cbca:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801cbcc:	4288      	cmp	r0, r1
 801cbce:	d150      	bne.n	801cc72 <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801cbd0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cbd4:	d144      	bne.n	801cc60 <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801cbd6:	b90a      	cbnz	r2, 801cbdc <lfs_file_flushedwrite+0x50>
 801cbd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cbda:	bb1b      	cbnz	r3, 801cc24 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801cbdc:	4628      	mov	r0, r5
 801cbde:	f7fe f9e3 	bl	801afa8 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801cbe2:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801cbe6:	9302      	str	r3, [sp, #8]
 801cbe8:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801cbec:	9301      	str	r3, [sp, #4]
 801cbee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cbf0:	9300      	str	r3, [sp, #0]
 801cbf2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cbf4:	462a      	mov	r2, r5
 801cbf6:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801cbfa:	4628      	mov	r0, r5
 801cbfc:	f7ff ff08 	bl	801ca10 <lfs_ctz_extend>
                if (err) {
 801cc00:	4601      	mov	r1, r0
 801cc02:	2800      	cmp	r0, #0
 801cc04:	d031      	beq.n	801cc6a <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801cc06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cc0c:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801cc0e:	e059      	b.n	801ccc4 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801cc10:	f7ff feec 	bl	801c9ec <lfs_file_outline>
        if (err) {
 801cc14:	4601      	mov	r1, r0
 801cc16:	2800      	cmp	r0, #0
 801cc18:	d0cc      	beq.n	801cbb4 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801cc1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cc20:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801cc22:	e04f      	b.n	801ccc4 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801cc24:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801cc28:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801cc2a:	2100      	movs	r1, #0
 801cc2c:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801cc2e:	a805      	add	r0, sp, #20
 801cc30:	9003      	str	r0, [sp, #12]
 801cc32:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801cc36:	9002      	str	r0, [sp, #8]
 801cc38:	3b01      	subs	r3, #1
 801cc3a:	9301      	str	r3, [sp, #4]
 801cc3c:	9200      	str	r2, [sp, #0]
 801cc3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801cc40:	4632      	mov	r2, r6
 801cc42:	4628      	mov	r0, r5
 801cc44:	f7ff f8ad 	bl	801bda2 <lfs_ctz_find>
                    if (err) {
 801cc48:	4601      	mov	r1, r0
 801cc4a:	b920      	cbnz	r0, 801cc56 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801cc4c:	4631      	mov	r1, r6
 801cc4e:	4628      	mov	r0, r5
 801cc50:	f7fe faca 	bl	801b1e8 <lfs_cache_zero>
 801cc54:	e7c2      	b.n	801cbdc <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801cc56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cc5c:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801cc5e:	e031      	b.n	801ccc4 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801cc60:	f06f 0301 	mvn.w	r3, #1
 801cc64:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801cc66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cc68:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801cc6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cc70:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801cc72:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801cc74:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801cc76:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cc78:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801cc7a:	4546      	cmp	r6, r8
 801cc7c:	bf28      	it	cs
 801cc7e:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801cc80:	9603      	str	r6, [sp, #12]
 801cc82:	9702      	str	r7, [sp, #8]
 801cc84:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cc86:	9301      	str	r3, [sp, #4]
 801cc88:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cc8a:	9300      	str	r3, [sp, #0]
 801cc8c:	2301      	movs	r3, #1
 801cc8e:	462a      	mov	r2, r5
 801cc90:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801cc94:	4628      	mov	r0, r5
 801cc96:	f7fe ffcd 	bl	801bc34 <lfs_bd_prog>
            if (err) {
 801cc9a:	4601      	mov	r1, r0
 801cc9c:	b1b0      	cbz	r0, 801cccc <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801cc9e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cca2:	d10b      	bne.n	801ccbc <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801cca4:	4621      	mov	r1, r4
 801cca6:	4628      	mov	r0, r5
 801cca8:	f7ff fe0e 	bl	801c8c8 <lfs_file_relocate>
            if (err) {
 801ccac:	4601      	mov	r1, r0
 801ccae:	2800      	cmp	r0, #0
 801ccb0:	d0e6      	beq.n	801cc80 <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801ccb2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ccb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801ccb8:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801ccba:	e003      	b.n	801ccc4 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801ccbc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ccbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801ccc2:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801ccc4:	4608      	mov	r0, r1
 801ccc6:	b007      	add	sp, #28
 801ccc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801cccc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ccce:	4433      	add	r3, r6
 801ccd0:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801ccd2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801ccd4:	4433      	add	r3, r6
 801ccd6:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801ccd8:	4437      	add	r7, r6
        nsize -= diff;
 801ccda:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801ccde:	4628      	mov	r0, r5
 801cce0:	f7fe f962 	bl	801afa8 <lfs_alloc_ckpoint>
 801cce4:	e767      	b.n	801cbb6 <lfs_file_flushedwrite+0x2a>
    return size;
 801cce6:	4649      	mov	r1, r9
 801cce8:	e7ec      	b.n	801ccc4 <lfs_file_flushedwrite+0x138>
	...

0801ccec <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801ccec:	b570      	push	{r4, r5, r6, lr}
 801ccee:	b098      	sub	sp, #96	@ 0x60
 801ccf0:	4605      	mov	r5, r0
 801ccf2:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801ccf4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801ccf6:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801ccfa:	d008      	beq.n	801cd0e <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801ccfc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cd00:	d102      	bne.n	801cd08 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801cd02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cd06:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801cd08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801cd0c:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801cd0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cd10:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801cd14:	d068      	beq.n	801cde8 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801cd16:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801cd18:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cd1c:	d151      	bne.n	801cdc2 <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801cd1e:	2254      	movs	r2, #84	@ 0x54
 801cd20:	2100      	movs	r1, #0
 801cd22:	a803      	add	r0, sp, #12
 801cd24:	f00f fe54 	bl	802c9d0 <memset>
                .ctz.head = file->ctz.head,
 801cd28:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801cd2a:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801cd2c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801cd2e:	930e      	str	r3, [sp, #56]	@ 0x38
 801cd30:	2301      	movs	r3, #1
 801cd32:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801cd34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801cd36:	9310      	str	r3, [sp, #64]	@ 0x40
 801cd38:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801cd3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801cd40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801cd44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cd48:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801cd4a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801cd4c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801cd4e:	429a      	cmp	r2, r3
 801cd50:	d21a      	bcs.n	801cd88 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801cd52:	2301      	movs	r3, #1
 801cd54:	f10d 020b 	add.w	r2, sp, #11
 801cd58:	a903      	add	r1, sp, #12
 801cd5a:	4628      	mov	r0, r5
 801cd5c:	f7ff f86a 	bl	801be34 <lfs_file_flushedread>
                if (res < 0) {
 801cd60:	1e03      	subs	r3, r0, #0
 801cd62:	db42      	blt.n	801cdea <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801cd64:	2301      	movs	r3, #1
 801cd66:	f10d 020b 	add.w	r2, sp, #11
 801cd6a:	4621      	mov	r1, r4
 801cd6c:	4628      	mov	r0, r5
 801cd6e:	f7ff ff0d 	bl	801cb8c <lfs_file_flushedwrite>
                if (res < 0) {
 801cd72:	1e03      	subs	r3, r0, #0
 801cd74:	db39      	blt.n	801cdea <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801cd76:	682b      	ldr	r3, [r5, #0]
 801cd78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cd7c:	d0e5      	beq.n	801cd4a <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801cd7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cd82:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cd84:	602b      	str	r3, [r5, #0]
}
 801cd86:	e7e0      	b.n	801cd4a <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801cd88:	2301      	movs	r3, #1
 801cd8a:	462a      	mov	r2, r5
 801cd8c:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801cd90:	4628      	mov	r0, r5
 801cd92:	f7fe fef5 	bl	801bb80 <lfs_bd_flush>
                if (err) {
 801cd96:	4603      	mov	r3, r0
 801cd98:	b1c0      	cbz	r0, 801cdcc <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801cd9a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cd9e:	d124      	bne.n	801cdea <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801cda0:	4b13      	ldr	r3, [pc, #76]	@ (801cdf0 <lfs_file_flush+0x104>)
 801cda2:	9300      	str	r3, [sp, #0]
 801cda4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cda6:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801cdaa:	4912      	ldr	r1, [pc, #72]	@ (801cdf4 <lfs_file_flush+0x108>)
 801cdac:	4812      	ldr	r0, [pc, #72]	@ (801cdf8 <lfs_file_flush+0x10c>)
 801cdae:	f00d f8f1 	bl	8029f94 <printf>
                err = lfs_file_relocate(lfs, file);
 801cdb2:	4621      	mov	r1, r4
 801cdb4:	4628      	mov	r0, r5
 801cdb6:	f7ff fd87 	bl	801c8c8 <lfs_file_relocate>
                if (err) {
 801cdba:	4603      	mov	r3, r0
 801cdbc:	2800      	cmp	r0, #0
 801cdbe:	d0e3      	beq.n	801cd88 <lfs_file_flush+0x9c>
 801cdc0:	e013      	b.n	801cdea <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801cdc2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801cdc4:	42b3      	cmp	r3, r6
 801cdc6:	bf38      	it	cc
 801cdc8:	4633      	movcc	r3, r6
 801cdca:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801cdcc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cdce:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801cdd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cdd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801cdd4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cdd6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801cdda:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801cddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cde0:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801cde2:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801cde4:	2300      	movs	r3, #0
 801cde6:	e000      	b.n	801cdea <lfs_file_flush+0xfe>
 801cde8:	2300      	movs	r3, #0
}
 801cdea:	4618      	mov	r0, r3
 801cdec:	b018      	add	sp, #96	@ 0x60
 801cdee:	bd70      	pop	{r4, r5, r6, pc}
 801cdf0:	08036c70 	.word	0x08036c70
 801cdf4:	08039148 	.word	0x08039148
 801cdf8:	08039360 	.word	0x08039360

0801cdfc <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801cdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdfe:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801ce00:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801ce02:	f013 0f01 	tst.w	r3, #1
 801ce06:	d00f      	beq.n	801ce28 <lfs_file_read_+0x2c>
 801ce08:	4605      	mov	r5, r0
 801ce0a:	460c      	mov	r4, r1
 801ce0c:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801ce0e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801ce12:	d002      	beq.n	801ce1a <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801ce14:	f7ff ff6a 	bl	801ccec <lfs_file_flush>
        if (err) {
 801ce18:	b928      	cbnz	r0, 801ce26 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801ce1a:	463b      	mov	r3, r7
 801ce1c:	4632      	mov	r2, r6
 801ce1e:	4621      	mov	r1, r4
 801ce20:	4628      	mov	r0, r5
 801ce22:	f7ff f807 	bl	801be34 <lfs_file_flushedread>
}
 801ce26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801ce28:	4b03      	ldr	r3, [pc, #12]	@ (801ce38 <lfs_file_read_+0x3c>)
 801ce2a:	4a04      	ldr	r2, [pc, #16]	@ (801ce3c <lfs_file_read_+0x40>)
 801ce2c:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801ce30:	4803      	ldr	r0, [pc, #12]	@ (801ce40 <lfs_file_read_+0x44>)
 801ce32:	f00d f87b 	bl	8029f2c <__assert_func>
 801ce36:	bf00      	nop
 801ce38:	08039384 	.word	0x08039384
 801ce3c:	08039dbc 	.word	0x08039dbc
 801ce40:	08039148 	.word	0x08039148

0801ce44 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801ce44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce46:	b083      	sub	sp, #12
 801ce48:	4606      	mov	r6, r0
 801ce4a:	460d      	mov	r5, r1
 801ce4c:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801ce4e:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801ce50:	b123      	cbz	r3, 801ce5c <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801ce52:	2b01      	cmp	r3, #1
 801ce54:	d021      	beq.n	801ce9a <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801ce56:	2b02      	cmp	r3, #2
 801ce58:	d023      	beq.n	801cea2 <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801ce5a:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801ce5c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801ce5e:	42a3      	cmp	r3, r4
 801ce60:	d339      	bcc.n	801ced6 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801ce62:	42bc      	cmp	r4, r7
 801ce64:	d023      	beq.n	801ceae <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801ce66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801ce68:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801ce6c:	d10c      	bne.n	801ce88 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801ce6e:	9701      	str	r7, [sp, #4]
 801ce70:	a901      	add	r1, sp, #4
 801ce72:	4630      	mov	r0, r6
 801ce74:	f7fe f9c4 	bl	801b200 <lfs_ctz_index>
 801ce78:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801ce7a:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801ce7c:	4669      	mov	r1, sp
 801ce7e:	4630      	mov	r0, r6
 801ce80:	f7fe f9be 	bl	801b200 <lfs_ctz_index>
        if (oindex == nindex
 801ce84:	4287      	cmp	r7, r0
 801ce86:	d014      	beq.n	801ceb2 <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801ce88:	4629      	mov	r1, r5
 801ce8a:	4630      	mov	r0, r6
 801ce8c:	f7ff ff2e 	bl	801ccec <lfs_file_flush>
    if (err) {
 801ce90:	b908      	cbnz	r0, 801ce96 <lfs_file_seek_+0x52>
    file->pos = npos;
 801ce92:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801ce94:	4620      	mov	r0, r4
}
 801ce96:	b003      	add	sp, #12
 801ce98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801ce9a:	42e7      	cmn	r7, r4
 801ce9c:	d415      	bmi.n	801ceca <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801ce9e:	443c      	add	r4, r7
 801cea0:	e7dc      	b.n	801ce5c <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801cea2:	f7fe f90e 	bl	801b0c2 <lfs_file_size_>
        if (res < 0) {
 801cea6:	1900      	adds	r0, r0, r4
 801cea8:	d412      	bmi.n	801ced0 <lfs_file_seek_+0x8c>
            npos = res;
 801ceaa:	4604      	mov	r4, r0
 801ceac:	e7d6      	b.n	801ce5c <lfs_file_seek_+0x18>
        return npos;
 801ceae:	4620      	mov	r0, r4
 801ceb0:	e7f1      	b.n	801ce96 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801ceb2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801ceb4:	9a00      	ldr	r2, [sp, #0]
 801ceb6:	4293      	cmp	r3, r2
 801ceb8:	d8e6      	bhi.n	801ce88 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801ceba:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801cebc:	440b      	add	r3, r1
 801cebe:	429a      	cmp	r2, r3
 801cec0:	d2e2      	bcs.n	801ce88 <lfs_file_seek_+0x44>
            file->pos = npos;
 801cec2:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801cec4:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801cec6:	4620      	mov	r0, r4
 801cec8:	e7e5      	b.n	801ce96 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801ceca:	f06f 0015 	mvn.w	r0, #21
 801cece:	e7e2      	b.n	801ce96 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801ced0:	f06f 0015 	mvn.w	r0, #21
 801ced4:	e7df      	b.n	801ce96 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801ced6:	f06f 0015 	mvn.w	r0, #21
 801ceda:	e7dc      	b.n	801ce96 <lfs_file_seek_+0x52>

0801cedc <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801cedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cee0:	b082      	sub	sp, #8
 801cee2:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801cee4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801cee6:	f013 0f02 	tst.w	r3, #2
 801ceea:	d02a      	beq.n	801cf42 <lfs_file_write_+0x66>
 801ceec:	4605      	mov	r5, r0
 801ceee:	460c      	mov	r4, r1
 801cef0:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801cef2:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801cef6:	d12b      	bne.n	801cf50 <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801cef8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cefa:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801cefe:	d004      	beq.n	801cf0a <lfs_file_write_+0x2e>
 801cf00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cf02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801cf04:	4291      	cmp	r1, r2
 801cf06:	d200      	bcs.n	801cf0a <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801cf08:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801cf0a:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801cf0c:	19f1      	adds	r1, r6, r7
 801cf0e:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801cf10:	4291      	cmp	r1, r2
 801cf12:	d831      	bhi.n	801cf78 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801cf14:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801cf18:	d11f      	bne.n	801cf5a <lfs_file_write_+0x7e>
 801cf1a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801cf1c:	429e      	cmp	r6, r3
 801cf1e:	d91c      	bls.n	801cf5a <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801cf20:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801cf22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cf24:	428e      	cmp	r6, r1
 801cf26:	d918      	bls.n	801cf5a <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801cf28:	2300      	movs	r3, #0
 801cf2a:	f88d 3007 	strb.w	r3, [sp, #7]
 801cf2e:	2301      	movs	r3, #1
 801cf30:	f10d 0207 	add.w	r2, sp, #7
 801cf34:	4621      	mov	r1, r4
 801cf36:	4628      	mov	r0, r5
 801cf38:	f7ff fe28 	bl	801cb8c <lfs_file_flushedwrite>
            if (res < 0) {
 801cf3c:	2800      	cmp	r0, #0
 801cf3e:	daf0      	bge.n	801cf22 <lfs_file_write_+0x46>
 801cf40:	e017      	b.n	801cf72 <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801cf42:	4b0f      	ldr	r3, [pc, #60]	@ (801cf80 <lfs_file_write_+0xa4>)
 801cf44:	4a0f      	ldr	r2, [pc, #60]	@ (801cf84 <lfs_file_write_+0xa8>)
 801cf46:	f640 6126 	movw	r1, #3622	@ 0xe26
 801cf4a:	480f      	ldr	r0, [pc, #60]	@ (801cf88 <lfs_file_write_+0xac>)
 801cf4c:	f00c ffee 	bl	8029f2c <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801cf50:	f7ff fecc 	bl	801ccec <lfs_file_flush>
        if (err) {
 801cf54:	2800      	cmp	r0, #0
 801cf56:	d0cf      	beq.n	801cef8 <lfs_file_write_+0x1c>
 801cf58:	e00b      	b.n	801cf72 <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801cf5a:	463b      	mov	r3, r7
 801cf5c:	4642      	mov	r2, r8
 801cf5e:	4621      	mov	r1, r4
 801cf60:	4628      	mov	r0, r5
 801cf62:	f7ff fe13 	bl	801cb8c <lfs_file_flushedwrite>
    if (nsize < 0) {
 801cf66:	2800      	cmp	r0, #0
 801cf68:	db03      	blt.n	801cf72 <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801cf6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cf6c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801cf70:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801cf72:	b002      	add	sp, #8
 801cf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801cf78:	f06f 001a 	mvn.w	r0, #26
 801cf7c:	e7f9      	b.n	801cf72 <lfs_file_write_+0x96>
 801cf7e:	bf00      	nop
 801cf80:	080393b4 	.word	0x080393b4
 801cf84:	08039d9c 	.word	0x08039d9c
 801cf88:	08039148 	.word	0x08039148

0801cf8c <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801cf8c:	b500      	push	{lr}
 801cf8e:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801cf90:	2300      	movs	r3, #0
 801cf92:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801cf94:	aa01      	add	r2, sp, #4
 801cf96:	4904      	ldr	r1, [pc, #16]	@ (801cfa8 <lfs_fs_size_+0x1c>)
 801cf98:	f7ff faf0 	bl	801c57c <lfs_fs_traverse_>
    if (err) {
 801cf9c:	b900      	cbnz	r0, 801cfa0 <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801cf9e:	9801      	ldr	r0, [sp, #4]
}
 801cfa0:	b003      	add	sp, #12
 801cfa2:	f85d fb04 	ldr.w	pc, [sp], #4
 801cfa6:	bf00      	nop
 801cfa8:	0801b13d 	.word	0x0801b13d

0801cfac <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801cfac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cfb0:	b082      	sub	sp, #8
 801cfb2:	4680      	mov	r8, r0
 801cfb4:	460e      	mov	r6, r1
 801cfb6:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801cfb8:	2300      	movs	r3, #0
 801cfba:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801cfbc:	2501      	movs	r5, #1
 801cfbe:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801cfc0:	4b27      	ldr	r3, [pc, #156]	@ (801d060 <lfs_fs_pred+0xb4>)
 801cfc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cfc6:	ab02      	add	r3, sp, #8
 801cfc8:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801cfcc:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cfce:	69a7      	ldr	r7, [r4, #24]
 801cfd0:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801cfd4:	d035      	beq.n	801d042 <lfs_fs_pred+0x96>
 801cfd6:	69e3      	ldr	r3, [r4, #28]
 801cfd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cfdc:	d02f      	beq.n	801d03e <lfs_fs_pred+0x92>
 801cfde:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 801cfe0:	bb8b      	cbnz	r3, 801d046 <lfs_fs_pred+0x9a>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801cfe2:	f104 0a18 	add.w	sl, r4, #24
 801cfe6:	4669      	mov	r1, sp
 801cfe8:	4650      	mov	r0, sl
 801cfea:	f7fd ff61 	bl	801aeb0 <lfs_pair_issync>
 801cfee:	b9a8      	cbnz	r0, 801d01c <lfs_fs_pred+0x70>
        if (tortoise_i == tortoise_period) {
 801cff0:	454d      	cmp	r5, r9
 801cff2:	d01d      	beq.n	801d030 <lfs_fs_pred+0x84>
        tortoise_i += 1;
 801cff4:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cff6:	6833      	ldr	r3, [r6, #0]
 801cff8:	42bb      	cmp	r3, r7
 801cffa:	d027      	beq.n	801d04c <lfs_fs_pred+0xa0>
 801cffc:	69e1      	ldr	r1, [r4, #28]
 801cffe:	6872      	ldr	r2, [r6, #4]
 801d000:	4291      	cmp	r1, r2
 801d002:	d027      	beq.n	801d054 <lfs_fs_pred+0xa8>
 801d004:	42ba      	cmp	r2, r7
 801d006:	d027      	beq.n	801d058 <lfs_fs_pred+0xac>
 801d008:	4299      	cmp	r1, r3
 801d00a:	d027      	beq.n	801d05c <lfs_fs_pred+0xb0>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801d00c:	4652      	mov	r2, sl
 801d00e:	4621      	mov	r1, r4
 801d010:	4640      	mov	r0, r8
 801d012:	f7ff faa5 	bl	801c560 <lfs_dir_fetch>
        if (err) {
 801d016:	2800      	cmp	r0, #0
 801d018:	d0d9      	beq.n	801cfce <lfs_fs_pred+0x22>
 801d01a:	e018      	b.n	801d04e <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801d01c:	4b11      	ldr	r3, [pc, #68]	@ (801d064 <lfs_fs_pred+0xb8>)
 801d01e:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801d022:	4911      	ldr	r1, [pc, #68]	@ (801d068 <lfs_fs_pred+0xbc>)
 801d024:	4811      	ldr	r0, [pc, #68]	@ (801d06c <lfs_fs_pred+0xc0>)
 801d026:	f00c ffb5 	bl	8029f94 <printf>
            return LFS_ERR_CORRUPT;
 801d02a:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801d02e:	e00e      	b.n	801d04e <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801d030:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801d032:	69e3      	ldr	r3, [r4, #28]
 801d034:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 801d036:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801d03a:	2500      	movs	r5, #0
 801d03c:	e7da      	b.n	801cff4 <lfs_fs_pred+0x48>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d03e:	2301      	movs	r3, #1
 801d040:	e7ce      	b.n	801cfe0 <lfs_fs_pred+0x34>
 801d042:	2301      	movs	r3, #1
 801d044:	e7cc      	b.n	801cfe0 <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 801d046:	f06f 0001 	mvn.w	r0, #1
 801d04a:	e000      	b.n	801d04e <lfs_fs_pred+0xa2>
            return 0;
 801d04c:	2000      	movs	r0, #0
}
 801d04e:	b002      	add	sp, #8
 801d050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 801d054:	2000      	movs	r0, #0
 801d056:	e7fa      	b.n	801d04e <lfs_fs_pred+0xa2>
 801d058:	2000      	movs	r0, #0
 801d05a:	e7f8      	b.n	801d04e <lfs_fs_pred+0xa2>
 801d05c:	2000      	movs	r0, #0
 801d05e:	e7f6      	b.n	801d04e <lfs_fs_pred+0xa2>
 801d060:	08035d14 	.word	0x08035d14
 801d064:	08036c70 	.word	0x08036c70
 801d068:	08039148 	.word	0x08039148
 801d06c:	08039308 	.word	0x08039308

0801d070 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801d070:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d072:	b085      	sub	sp, #20
 801d074:	460c      	mov	r4, r1
 801d076:	4616      	mov	r6, r2
 801d078:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801d07a:	9303      	str	r3, [sp, #12]
 801d07c:	9202      	str	r2, [sp, #8]
 801d07e:	684b      	ldr	r3, [r1, #4]
 801d080:	9301      	str	r3, [sp, #4]
 801d082:	680b      	ldr	r3, [r1, #0]
 801d084:	9300      	str	r3, [sp, #0]
 801d086:	2300      	movs	r3, #0
 801d088:	4602      	mov	r2, r0
 801d08a:	f100 0110 	add.w	r1, r0, #16
 801d08e:	f7fe fdd1 	bl	801bc34 <lfs_bd_prog>
    if (err) {
 801d092:	4607      	mov	r7, r0
 801d094:	b110      	cbz	r0, 801d09c <lfs_dir_commitprog+0x2c>
}
 801d096:	4638      	mov	r0, r7
 801d098:	b005      	add	sp, #20
 801d09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801d09c:	462a      	mov	r2, r5
 801d09e:	4631      	mov	r1, r6
 801d0a0:	68e0      	ldr	r0, [r4, #12]
 801d0a2:	f002 fcdf 	bl	801fa64 <lfs_crc>
 801d0a6:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801d0a8:	6863      	ldr	r3, [r4, #4]
 801d0aa:	442b      	add	r3, r5
 801d0ac:	6063      	str	r3, [r4, #4]
    return 0;
 801d0ae:	e7f2      	b.n	801d096 <lfs_dir_commitprog+0x26>

0801d0b0 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801d0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0b4:	b087      	sub	sp, #28
 801d0b6:	4614      	mov	r4, r2
 801d0b8:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801d0ba:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d0be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d0c2:	bf14      	ite	ne
 801d0c4:	4690      	movne	r8, r2
 801d0c6:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801d0ca:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d0ce:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801d0d2:	684b      	ldr	r3, [r1, #4]
 801d0d4:	444b      	add	r3, r9
 801d0d6:	694a      	ldr	r2, [r1, #20]
 801d0d8:	4293      	cmp	r3, r2
 801d0da:	d841      	bhi.n	801d160 <lfs_dir_commitattr+0xb0>
 801d0dc:	4605      	mov	r5, r0
 801d0de:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801d0e0:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801d0e4:	688b      	ldr	r3, [r1, #8]
 801d0e6:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801d0ea:	ba1b      	rev	r3, r3
 801d0ec:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801d0ee:	2304      	movs	r3, #4
 801d0f0:	aa05      	add	r2, sp, #20
 801d0f2:	f7ff ffbd 	bl	801d070 <lfs_dir_commitprog>
    if (err) {
 801d0f6:	4682      	mov	sl, r0
 801d0f8:	bb60      	cbnz	r0, 801d154 <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801d0fa:	2c00      	cmp	r4, #0
 801d0fc:	da21      	bge.n	801d142 <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801d0fe:	2400      	movs	r4, #0
 801d100:	4544      	cmp	r4, r8
 801d102:	d225      	bcs.n	801d150 <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801d104:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801d108:	6839      	ldr	r1, [r7, #0]
 801d10a:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801d10c:	2001      	movs	r0, #1
 801d10e:	9003      	str	r0, [sp, #12]
 801d110:	f10d 0013 	add.w	r0, sp, #19
 801d114:	9002      	str	r0, [sp, #8]
 801d116:	4422      	add	r2, r4
 801d118:	9201      	str	r2, [sp, #4]
 801d11a:	9100      	str	r1, [sp, #0]
 801d11c:	3b04      	subs	r3, #4
 801d11e:	462a      	mov	r2, r5
 801d120:	2100      	movs	r1, #0
 801d122:	4628      	mov	r0, r5
 801d124:	f7fe f88a 	bl	801b23c <lfs_bd_read>
            if (err) {
 801d128:	4603      	mov	r3, r0
 801d12a:	b9b8      	cbnz	r0, 801d15c <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801d12c:	2301      	movs	r3, #1
 801d12e:	f10d 0213 	add.w	r2, sp, #19
 801d132:	4631      	mov	r1, r6
 801d134:	4628      	mov	r0, r5
 801d136:	f7ff ff9b 	bl	801d070 <lfs_dir_commitprog>
            if (err) {
 801d13a:	4603      	mov	r3, r0
 801d13c:	b970      	cbnz	r0, 801d15c <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801d13e:	3401      	adds	r4, #1
 801d140:	e7de      	b.n	801d100 <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801d142:	4643      	mov	r3, r8
 801d144:	463a      	mov	r2, r7
 801d146:	4631      	mov	r1, r6
 801d148:	4628      	mov	r0, r5
 801d14a:	f7ff ff91 	bl	801d070 <lfs_dir_commitprog>
        if (err) {
 801d14e:	b950      	cbnz	r0, 801d166 <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801d150:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801d154:	4650      	mov	r0, sl
 801d156:	b007      	add	sp, #28
 801d158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801d15c:	469a      	mov	sl, r3
 801d15e:	e7f9      	b.n	801d154 <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801d160:	f06f 0a1b 	mvn.w	sl, #27
 801d164:	e7f6      	b.n	801d154 <lfs_dir_commitattr+0xa4>
            return err;
 801d166:	4682      	mov	sl, r0
 801d168:	e7f4      	b.n	801d154 <lfs_dir_commitattr+0xa4>

0801d16a <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801d16a:	b508      	push	{r3, lr}
 801d16c:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801d16e:	460a      	mov	r2, r1
 801d170:	6841      	ldr	r1, [r0, #4]
 801d172:	6800      	ldr	r0, [r0, #0]
 801d174:	f7ff ff9c 	bl	801d0b0 <lfs_dir_commitattr>
}
 801d178:	bd08      	pop	{r3, pc}
	...

0801d17c <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801d17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d180:	b08b      	sub	sp, #44	@ 0x2c
 801d182:	4607      	mov	r7, r0
 801d184:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801d186:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801d188:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801d18a:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801d18c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801d18e:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801d190:	428b      	cmp	r3, r1
 801d192:	bf94      	ite	ls
 801d194:	eb02 0803 	addls.w	r8, r2, r3
 801d198:	eb02 0801 	addhi.w	r8, r2, r1
 801d19c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801d1a0:	fbb8 f3f2 	udiv	r3, r8, r2
 801d1a4:	fb02 8313 	mls	r3, r2, r3, r8
 801d1a8:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801d1ac:	2300      	movs	r3, #0
 801d1ae:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801d1b0:	469b      	mov	fp, r3
    while (commit->off < end) {
 801d1b2:	e03c      	b.n	801d22e <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801d1b4:	2201      	movs	r2, #1
 801d1b6:	9203      	str	r2, [sp, #12]
 801d1b8:	f10d 021b 	add.w	r2, sp, #27
 801d1bc:	9202      	str	r2, [sp, #8]
 801d1be:	9401      	str	r4, [sp, #4]
 801d1c0:	6832      	ldr	r2, [r6, #0]
 801d1c2:	9200      	str	r2, [sp, #0]
 801d1c4:	463a      	mov	r2, r7
 801d1c6:	2100      	movs	r1, #0
 801d1c8:	4638      	mov	r0, r7
 801d1ca:	f7fe f837 	bl	801b23c <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801d1ce:	4603      	mov	r3, r0
 801d1d0:	b118      	cbz	r0, 801d1da <lfs_dir_commitcrc+0x5e>
 801d1d2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d1d6:	f040 80c0 	bne.w	801d35a <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801d1da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d1dc:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801d1de:	9307      	str	r3, [sp, #28]
 801d1e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d1e4:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801d1e6:	aa08      	add	r2, sp, #32
 801d1e8:	9203      	str	r2, [sp, #12]
 801d1ea:	9302      	str	r3, [sp, #8]
 801d1ec:	9401      	str	r4, [sp, #4]
 801d1ee:	6832      	ldr	r2, [r6, #0]
 801d1f0:	9200      	str	r2, [sp, #0]
 801d1f2:	463a      	mov	r2, r7
 801d1f4:	2100      	movs	r1, #0
 801d1f6:	4638      	mov	r0, r7
 801d1f8:	f7fe fea0 	bl	801bf3c <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801d1fc:	4603      	mov	r3, r0
 801d1fe:	b118      	cbz	r0, 801d208 <lfs_dir_commitcrc+0x8c>
 801d200:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d204:	f040 80a9 	bne.w	801d35a <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801d208:	ab07      	add	r3, sp, #28
 801d20a:	4a59      	ldr	r2, [pc, #356]	@ (801d370 <lfs_dir_commitcrc+0x1f4>)
 801d20c:	4631      	mov	r1, r6
 801d20e:	4638      	mov	r0, r7
 801d210:	f7ff ff4e 	bl	801d0b0 <lfs_dir_commitattr>
                if (err) {
 801d214:	4603      	mov	r3, r0
 801d216:	b348      	cbz	r0, 801d26c <lfs_dir_commitcrc+0xf0>
 801d218:	e09f      	b.n	801d35a <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801d21a:	2300      	movs	r3, #0
 801d21c:	463a      	mov	r2, r7
 801d21e:	4651      	mov	r1, sl
 801d220:	4638      	mov	r0, r7
 801d222:	f7fe fd81 	bl	801bd28 <lfs_bd_sync>
            if (err) {
 801d226:	4603      	mov	r3, r0
 801d228:	2800      	cmp	r0, #0
 801d22a:	f040 8096 	bne.w	801d35a <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801d22e:	6874      	ldr	r4, [r6, #4]
 801d230:	4544      	cmp	r4, r8
 801d232:	d268      	bcs.n	801d306 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801d234:	eba8 0304 	sub.w	r3, r8, r4
 801d238:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801d23a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801d23e:	4293      	cmp	r3, r2
 801d240:	bf94      	ite	ls
 801d242:	18e4      	addls	r4, r4, r3
 801d244:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801d246:	3404      	adds	r4, #4
        if (noff < end) {
 801d248:	4544      	cmp	r4, r8
 801d24a:	d204      	bcs.n	801d256 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801d24c:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801d250:	429c      	cmp	r4, r3
 801d252:	bf28      	it	cs
 801d254:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801d256:	23ff      	movs	r3, #255	@ 0xff
 801d258:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801d25c:	4544      	cmp	r4, r8
 801d25e:	d305      	bcc.n	801d26c <lfs_dir_commitcrc+0xf0>
 801d260:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d264:	6a1b      	ldr	r3, [r3, #32]
 801d266:	1ad2      	subs	r2, r2, r3
 801d268:	42a2      	cmp	r2, r4
 801d26a:	d2a3      	bcs.n	801d1b4 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801d26c:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801d270:	43d2      	mvns	r2, r2
 801d272:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801d276:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801d27a:	6873      	ldr	r3, [r6, #4]
 801d27c:	1ae5      	subs	r5, r4, r3
 801d27e:	3d04      	subs	r5, #4
 801d280:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801d284:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801d288:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801d28c:	68b3      	ldr	r3, [r6, #8]
 801d28e:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801d290:	ba1b      	rev	r3, r3
 801d292:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801d294:	f10d 091c 	add.w	r9, sp, #28
 801d298:	2204      	movs	r2, #4
 801d29a:	4649      	mov	r1, r9
 801d29c:	68f0      	ldr	r0, [r6, #12]
 801d29e:	f002 fbe1 	bl	801fa64 <lfs_crc>
 801d2a2:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801d2a4:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801d2a6:	f107 0a10 	add.w	sl, r7, #16
 801d2aa:	2308      	movs	r3, #8
 801d2ac:	9303      	str	r3, [sp, #12]
 801d2ae:	f8cd 9008 	str.w	r9, [sp, #8]
 801d2b2:	6873      	ldr	r3, [r6, #4]
 801d2b4:	9301      	str	r3, [sp, #4]
 801d2b6:	6833      	ldr	r3, [r6, #0]
 801d2b8:	9300      	str	r3, [sp, #0]
 801d2ba:	2300      	movs	r3, #0
 801d2bc:	463a      	mov	r2, r7
 801d2be:	4651      	mov	r1, sl
 801d2c0:	4638      	mov	r0, r7
 801d2c2:	f7fe fcb7 	bl	801bc34 <lfs_bd_prog>
        if (err) {
 801d2c6:	4603      	mov	r3, r0
 801d2c8:	2800      	cmp	r0, #0
 801d2ca:	d146      	bne.n	801d35a <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801d2cc:	f1bb 0f00 	cmp.w	fp, #0
 801d2d0:	d104      	bne.n	801d2dc <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801d2d2:	6873      	ldr	r3, [r6, #4]
 801d2d4:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801d2d8:	68f3      	ldr	r3, [r6, #12]
 801d2da:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801d2dc:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801d2de:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801d2e2:	43db      	mvns	r3, r3
 801d2e4:	061b      	lsls	r3, r3, #24
 801d2e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801d2ea:	406b      	eors	r3, r5
 801d2ec:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801d2ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d2f2:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801d2f4:	4544      	cmp	r4, r8
 801d2f6:	d290      	bcs.n	801d21a <lfs_dir_commitcrc+0x9e>
 801d2f8:	697b      	ldr	r3, [r7, #20]
 801d2fa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d2fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801d2fe:	4413      	add	r3, r2
 801d300:	42a3      	cmp	r3, r4
 801d302:	d894      	bhi.n	801d22e <lfs_dir_commitcrc+0xb2>
 801d304:	e789      	b.n	801d21a <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801d306:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801d308:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d30c:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801d30e:	aa09      	add	r2, sp, #36	@ 0x24
 801d310:	9203      	str	r2, [sp, #12]
 801d312:	ebab 0203 	sub.w	r2, fp, r3
 801d316:	9202      	str	r2, [sp, #8]
 801d318:	9301      	str	r3, [sp, #4]
 801d31a:	6833      	ldr	r3, [r6, #0]
 801d31c:	9300      	str	r3, [sp, #0]
 801d31e:	f10b 0304 	add.w	r3, fp, #4
 801d322:	463a      	mov	r2, r7
 801d324:	2100      	movs	r1, #0
 801d326:	4638      	mov	r0, r7
 801d328:	f7fe fe08 	bl	801bf3c <lfs_bd_crc>
    if (err) {
 801d32c:	4603      	mov	r3, r0
 801d32e:	b9a0      	cbnz	r0, 801d35a <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801d330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d332:	9a05      	ldr	r2, [sp, #20]
 801d334:	4293      	cmp	r3, r2
 801d336:	d114      	bne.n	801d362 <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801d338:	ab09      	add	r3, sp, #36	@ 0x24
 801d33a:	9303      	str	r3, [sp, #12]
 801d33c:	2304      	movs	r3, #4
 801d33e:	9302      	str	r3, [sp, #8]
 801d340:	f8cd b004 	str.w	fp, [sp, #4]
 801d344:	6832      	ldr	r2, [r6, #0]
 801d346:	9200      	str	r2, [sp, #0]
 801d348:	463a      	mov	r2, r7
 801d34a:	2100      	movs	r1, #0
 801d34c:	4638      	mov	r0, r7
 801d34e:	f7fe fdf5 	bl	801bf3c <lfs_bd_crc>
    if (err) {
 801d352:	4603      	mov	r3, r0
 801d354:	b908      	cbnz	r0, 801d35a <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801d356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d358:	b932      	cbnz	r2, 801d368 <lfs_dir_commitcrc+0x1ec>
}
 801d35a:	4618      	mov	r0, r3
 801d35c:	b00b      	add	sp, #44	@ 0x2c
 801d35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801d362:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d366:	e7f8      	b.n	801d35a <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801d368:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d36c:	e7f5      	b.n	801d35a <lfs_dir_commitcrc+0x1de>
 801d36e:	bf00      	nop
 801d370:	5ffffc08 	.word	0x5ffffc08

0801d374 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801d374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d378:	b09b      	sub	sp, #108	@ 0x6c
 801d37a:	4605      	mov	r5, r0
 801d37c:	460c      	mov	r4, r1
 801d37e:	4616      	mov	r6, r2
 801d380:	461f      	mov	r7, r3
 801d382:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801d386:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801d38a:	f7fd fe7f 	bl	801b08c <lfs_dir_needsrelocation>
    dir->rev += 1;
 801d38e:	68a3      	ldr	r3, [r4, #8]
 801d390:	3301      	adds	r3, #1
 801d392:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801d394:	4681      	mov	r9, r0
 801d396:	2800      	cmp	r0, #0
 801d398:	d034      	beq.n	801d404 <lfs_dir_compact+0x90>
 801d39a:	2300      	movs	r3, #0
 801d39c:	9314      	str	r3, [sp, #80]	@ 0x50
 801d39e:	2301      	movs	r3, #1
 801d3a0:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d3a2:	6823      	ldr	r3, [r4, #0]
 801d3a4:	b373      	cbz	r3, 801d404 <lfs_dir_compact+0x90>
 801d3a6:	6862      	ldr	r2, [r4, #4]
 801d3a8:	2a01      	cmp	r2, #1
 801d3aa:	d02b      	beq.n	801d404 <lfs_dir_compact+0x90>
 801d3ac:	2b01      	cmp	r3, #1
 801d3ae:	d029      	beq.n	801d404 <lfs_dir_compact+0x90>
 801d3b0:	b342      	cbz	r2, 801d404 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801d3b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d3b6:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801d3b8:	f1b9 0f00 	cmp.w	r9, #0
 801d3bc:	f000 810d 	beq.w	801d5da <lfs_dir_compact+0x266>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801d3c0:	2300      	movs	r3, #0
 801d3c2:	9318      	str	r3, [sp, #96]	@ 0x60
 801d3c4:	2301      	movs	r3, #1
 801d3c6:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d3c8:	6823      	ldr	r3, [r4, #0]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	f000 810f 	beq.w	801d5ee <lfs_dir_compact+0x27a>
 801d3d0:	6862      	ldr	r2, [r4, #4]
 801d3d2:	2a01      	cmp	r2, #1
 801d3d4:	f000 810b 	beq.w	801d5ee <lfs_dir_compact+0x27a>
 801d3d8:	2b01      	cmp	r3, #1
 801d3da:	f000 8108 	beq.w	801d5ee <lfs_dir_compact+0x27a>
 801d3de:	2a00      	cmp	r2, #0
 801d3e0:	f000 8105 	beq.w	801d5ee <lfs_dir_compact+0x27a>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801d3e4:	1d21      	adds	r1, r4, #4
 801d3e6:	4628      	mov	r0, r5
 801d3e8:	f7ff f9d0 	bl	801c78c <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801d3ec:	4603      	mov	r3, r0
 801d3ee:	b330      	cbz	r0, 801d43e <lfs_dir_compact+0xca>
 801d3f0:	f110 0f1c 	cmn.w	r0, #28
 801d3f4:	d11f      	bne.n	801d436 <lfs_dir_compact+0xc2>
 801d3f6:	f1b9 0f00 	cmp.w	r9, #0
 801d3fa:	d01c      	beq.n	801d436 <lfs_dir_compact+0xc2>
        relocated = true;
 801d3fc:	46cb      	mov	fp, r9
        tired = false;
 801d3fe:	f04f 0900 	mov.w	r9, #0
 801d402:	e001      	b.n	801d408 <lfs_dir_compact+0x94>
    bool relocated = false;
 801d404:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801d408:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801d40a:	930e      	str	r3, [sp, #56]	@ 0x38
 801d40c:	2300      	movs	r3, #0
 801d40e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d410:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d414:	9210      	str	r2, [sp, #64]	@ 0x40
 801d416:	9211      	str	r2, [sp, #68]	@ 0x44
 801d418:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801d41a:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801d41c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d41e:	b19b      	cbz	r3, 801d448 <lfs_dir_compact+0xd4>
 801d420:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801d422:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801d424:	6861      	ldr	r1, [r4, #4]
 801d426:	4628      	mov	r0, r5
 801d428:	f7fd fe8e 	bl	801b148 <lfs_bd_erase>
            if (err) {
 801d42c:	4603      	mov	r3, r0
 801d42e:	b170      	cbz	r0, 801d44e <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801d430:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d434:	d0bd      	beq.n	801d3b2 <lfs_dir_compact+0x3e>
}
 801d436:	4618      	mov	r0, r3
 801d438:	b01b      	add	sp, #108	@ 0x6c
 801d43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801d43e:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801d442:	f04f 0b01 	mov.w	fp, #1
 801d446:	e7df      	b.n	801d408 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d448:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801d44a:	3b08      	subs	r3, #8
 801d44c:	e7e9      	b.n	801d422 <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801d44e:	2304      	movs	r3, #4
 801d450:	f104 0208 	add.w	r2, r4, #8
 801d454:	a90e      	add	r1, sp, #56	@ 0x38
 801d456:	4628      	mov	r0, r5
 801d458:	f7ff fe0a 	bl	801d070 <lfs_dir_commitprog>
            if (err) {
 801d45c:	4603      	mov	r3, r0
 801d45e:	b118      	cbz	r0, 801d468 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801d460:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d464:	d1e7      	bne.n	801d436 <lfs_dir_compact+0xc2>
 801d466:	e7a4      	b.n	801d3b2 <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801d468:	9516      	str	r5, [sp, #88]	@ 0x58
 801d46a:	ab0e      	add	r3, sp, #56	@ 0x38
 801d46c:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801d46e:	ab16      	add	r3, sp, #88	@ 0x58
 801d470:	9308      	str	r3, [sp, #32]
 801d472:	4b65      	ldr	r3, [pc, #404]	@ (801d608 <lfs_dir_compact+0x294>)
 801d474:	9307      	str	r3, [sp, #28]
 801d476:	f1c8 0300 	rsb	r3, r8, #0
 801d47a:	b21b      	sxth	r3, r3
 801d47c:	9306      	str	r3, [sp, #24]
 801d47e:	f8cd a014 	str.w	sl, [sp, #20]
 801d482:	f8cd 8010 	str.w	r8, [sp, #16]
 801d486:	2200      	movs	r2, #0
 801d488:	9203      	str	r2, [sp, #12]
 801d48a:	4b60      	ldr	r3, [pc, #384]	@ (801d60c <lfs_dir_compact+0x298>)
 801d48c:	9302      	str	r3, [sp, #8]
 801d48e:	9701      	str	r7, [sp, #4]
 801d490:	9600      	str	r6, [sp, #0]
 801d492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d496:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801d498:	4628      	mov	r0, r5
 801d49a:	f7fe f911 	bl	801b6c0 <lfs_dir_traverse>
            if (err) {
 801d49e:	4603      	mov	r3, r0
 801d4a0:	b118      	cbz	r0, 801d4aa <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801d4a2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d4a6:	d1c6      	bne.n	801d436 <lfs_dir_compact+0xc2>
 801d4a8:	e783      	b.n	801d3b2 <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d4aa:	69a2      	ldr	r2, [r4, #24]
 801d4ac:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d4b0:	d02c      	beq.n	801d50c <lfs_dir_compact+0x198>
 801d4b2:	69e2      	ldr	r2, [r4, #28]
 801d4b4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d4b8:	d026      	beq.n	801d508 <lfs_dir_compact+0x194>
            if (!lfs_pair_isnull(dir->tail)) {
 801d4ba:	f013 0f01 	tst.w	r3, #1
 801d4be:	d027      	beq.n	801d510 <lfs_dir_compact+0x19c>
            lfs_gstate_t delta = {0};
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d4c4:	930c      	str	r3, [sp, #48]	@ 0x30
 801d4c6:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801d4c8:	f1bb 0f00 	cmp.w	fp, #0
 801d4cc:	d033      	beq.n	801d536 <lfs_dir_compact+0x1c2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801d4ce:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801d4d2:	a80b      	add	r0, sp, #44	@ 0x2c
 801d4d4:	f7fd fd10 	bl	801aef8 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801d4d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d4da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801d4de:	f023 0303 	bic.w	r3, r3, #3
 801d4e2:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801d4e4:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d4e6:	4621      	mov	r1, r4
 801d4e8:	4628      	mov	r0, r5
 801d4ea:	f7fe f859 	bl	801b5a0 <lfs_dir_getgstate>
            if (err) {
 801d4ee:	4603      	mov	r3, r0
 801d4f0:	2800      	cmp	r0, #0
 801d4f2:	d1a0      	bne.n	801d436 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 801d4f4:	2b02      	cmp	r3, #2
 801d4f6:	dc29      	bgt.n	801d54c <lfs_dir_compact+0x1d8>
        if (((uint32_t*)a)[i] != 0) {
 801d4f8:	aa1a      	add	r2, sp, #104	@ 0x68
 801d4fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d4fe:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801d502:	bb92      	cbnz	r2, 801d56a <lfs_dir_compact+0x1f6>
    for (int i = 0; i < 3; i++) {
 801d504:	3301      	adds	r3, #1
 801d506:	e7f5      	b.n	801d4f4 <lfs_dir_compact+0x180>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d508:	2301      	movs	r3, #1
 801d50a:	e7d6      	b.n	801d4ba <lfs_dir_compact+0x146>
 801d50c:	2301      	movs	r3, #1
 801d50e:	e7d4      	b.n	801d4ba <lfs_dir_compact+0x146>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801d510:	7de2      	ldrb	r2, [r4, #23]
 801d512:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801d516:	f104 0318 	add.w	r3, r4, #24
 801d51a:	493d      	ldr	r1, [pc, #244]	@ (801d610 <lfs_dir_compact+0x29c>)
 801d51c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801d520:	a90e      	add	r1, sp, #56	@ 0x38
 801d522:	4628      	mov	r0, r5
 801d524:	f7ff fdc4 	bl	801d0b0 <lfs_dir_commitattr>
                if (err) {
 801d528:	4603      	mov	r3, r0
 801d52a:	2800      	cmp	r0, #0
 801d52c:	d0c8      	beq.n	801d4c0 <lfs_dir_compact+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 801d52e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d532:	d180      	bne.n	801d436 <lfs_dir_compact+0xc2>
 801d534:	e73d      	b.n	801d3b2 <lfs_dir_compact+0x3e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801d536:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801d53a:	a80b      	add	r0, sp, #44	@ 0x2c
 801d53c:	f7fd fcdc 	bl	801aef8 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801d540:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801d544:	a80b      	add	r0, sp, #44	@ 0x2c
 801d546:	f7fd fcd7 	bl	801aef8 <lfs_gstate_xor>
 801d54a:	e7c0      	b.n	801d4ce <lfs_dir_compact+0x15a>
    return true;
 801d54c:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801d54e:	b973      	cbnz	r3, 801d56e <lfs_dir_compact+0x1fa>
                err = lfs_dir_commitattr(lfs, &commit,
 801d550:	ab0b      	add	r3, sp, #44	@ 0x2c
 801d552:	4a30      	ldr	r2, [pc, #192]	@ (801d614 <lfs_dir_compact+0x2a0>)
 801d554:	a90e      	add	r1, sp, #56	@ 0x38
 801d556:	4628      	mov	r0, r5
 801d558:	f7ff fdaa 	bl	801d0b0 <lfs_dir_commitattr>
                if (err) {
 801d55c:	4603      	mov	r3, r0
 801d55e:	b130      	cbz	r0, 801d56e <lfs_dir_compact+0x1fa>
                    if (err == LFS_ERR_CORRUPT) {
 801d560:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d564:	f47f af67 	bne.w	801d436 <lfs_dir_compact+0xc2>
 801d568:	e723      	b.n	801d3b2 <lfs_dir_compact+0x3e>
            return false;
 801d56a:	2300      	movs	r3, #0
 801d56c:	e7ef      	b.n	801d54e <lfs_dir_compact+0x1da>
            err = lfs_dir_commitcrc(lfs, &commit);
 801d56e:	a90e      	add	r1, sp, #56	@ 0x38
 801d570:	4628      	mov	r0, r5
 801d572:	f7ff fe03 	bl	801d17c <lfs_dir_commitcrc>
            if (err) {
 801d576:	4603      	mov	r3, r0
 801d578:	b120      	cbz	r0, 801d584 <lfs_dir_compact+0x210>
                if (err == LFS_ERR_CORRUPT) {
 801d57a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d57e:	f47f af5a 	bne.w	801d436 <lfs_dir_compact+0xc2>
 801d582:	e716      	b.n	801d3b2 <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d586:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801d588:	6a12      	ldr	r2, [r2, #32]
 801d58a:	fbb3 f1f2 	udiv	r1, r3, r2
 801d58e:	fb02 3311 	mls	r3, r2, r1, r3
 801d592:	b9db      	cbnz	r3, 801d5cc <lfs_dir_compact+0x258>
    lfs_block_t t = pair[0];
 801d594:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801d596:	6862      	ldr	r2, [r4, #4]
 801d598:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801d59a:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801d59c:	ebaa 0808 	sub.w	r8, sl, r8
 801d5a0:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801d5a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d5a6:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801d5a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d5aa:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	64aa      	str	r2, [r5, #72]	@ 0x48
 801d5b0:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801d5b2:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801d5b4:	f1bb 0f00 	cmp.w	fp, #0
 801d5b8:	d106      	bne.n	801d5c8 <lfs_dir_compact+0x254>
                lfs->gdisk = lfs->gstate;
 801d5ba:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801d5be:	3530      	adds	r5, #48	@ 0x30
 801d5c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d5c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801d5c8:	465b      	mov	r3, fp
 801d5ca:	e734      	b.n	801d436 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d5cc:	4b12      	ldr	r3, [pc, #72]	@ (801d618 <lfs_dir_compact+0x2a4>)
 801d5ce:	4a13      	ldr	r2, [pc, #76]	@ (801d61c <lfs_dir_compact+0x2a8>)
 801d5d0:	f640 0106 	movw	r1, #2054	@ 0x806
 801d5d4:	4812      	ldr	r0, [pc, #72]	@ (801d620 <lfs_dir_compact+0x2ac>)
 801d5d6:	f00c fca9 	bl	8029f2c <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801d5da:	4b12      	ldr	r3, [pc, #72]	@ (801d624 <lfs_dir_compact+0x2b0>)
 801d5dc:	9300      	str	r3, [sp, #0]
 801d5de:	6863      	ldr	r3, [r4, #4]
 801d5e0:	f640 0218 	movw	r2, #2072	@ 0x818
 801d5e4:	490e      	ldr	r1, [pc, #56]	@ (801d620 <lfs_dir_compact+0x2ac>)
 801d5e6:	4810      	ldr	r0, [pc, #64]	@ (801d628 <lfs_dir_compact+0x2b4>)
 801d5e8:	f00c fcd4 	bl	8029f94 <printf>
 801d5ec:	e6e8      	b.n	801d3c0 <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801d5ee:	4b0d      	ldr	r3, [pc, #52]	@ (801d624 <lfs_dir_compact+0x2b0>)
 801d5f0:	9300      	str	r3, [sp, #0]
 801d5f2:	6863      	ldr	r3, [r4, #4]
 801d5f4:	f640 021d 	movw	r2, #2077	@ 0x81d
 801d5f8:	4909      	ldr	r1, [pc, #36]	@ (801d620 <lfs_dir_compact+0x2ac>)
 801d5fa:	480c      	ldr	r0, [pc, #48]	@ (801d62c <lfs_dir_compact+0x2b8>)
 801d5fc:	f00c fcca 	bl	8029f94 <printf>
            return LFS_ERR_NOSPC;
 801d600:	f06f 031b 	mvn.w	r3, #27
 801d604:	e717      	b.n	801d436 <lfs_dir_compact+0xc2>
 801d606:	bf00      	nop
 801d608:	0801d16b 	.word	0x0801d16b
 801d60c:	400ffc00 	.word	0x400ffc00
 801d610:	000ffc08 	.word	0x000ffc08
 801d614:	7ffffc0c 	.word	0x7ffffc0c
 801d618:	080393e4 	.word	0x080393e4
 801d61c:	08039e18 	.word	0x08039e18
 801d620:	08039148 	.word	0x08039148
 801d624:	08036c70 	.word	0x08036c70
 801d628:	08039360 	.word	0x08039360
 801d62c:	0803940c 	.word	0x0803940c

0801d630 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801d630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d634:	b08d      	sub	sp, #52	@ 0x34
 801d636:	4605      	mov	r5, r0
 801d638:	460c      	mov	r4, r1
 801d63a:	4691      	mov	r9, r2
 801d63c:	461e      	mov	r6, r3
 801d63e:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801d642:	a904      	add	r1, sp, #16
 801d644:	f7ff f8fa 	bl	801c83c <lfs_dir_alloc>
    if (err) {
 801d648:	4607      	mov	r7, r0
 801d64a:	b118      	cbz	r0, 801d654 <lfs_dir_split+0x24>
}
 801d64c:	4638      	mov	r0, r7
 801d64e:	b00d      	add	sp, #52	@ 0x34
 801d650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801d654:	7de3      	ldrb	r3, [r4, #23]
 801d656:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801d65a:	69a3      	ldr	r3, [r4, #24]
 801d65c:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801d65e:	69e3      	ldr	r3, [r4, #28]
 801d660:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801d662:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801d666:	9302      	str	r3, [sp, #8]
 801d668:	f8cd 8004 	str.w	r8, [sp, #4]
 801d66c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d66e:	9300      	str	r3, [sp, #0]
 801d670:	4633      	mov	r3, r6
 801d672:	464a      	mov	r2, r9
 801d674:	a904      	add	r1, sp, #16
 801d676:	4628      	mov	r0, r5
 801d678:	f7ff fe7c 	bl	801d374 <lfs_dir_compact>
    if (res < 0) {
 801d67c:	2800      	cmp	r0, #0
 801d67e:	db17      	blt.n	801d6b0 <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801d680:	9904      	ldr	r1, [sp, #16]
 801d682:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801d684:	9a05      	ldr	r2, [sp, #20]
 801d686:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801d688:	2301      	movs	r3, #1
 801d68a:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d68c:	6823      	ldr	r3, [r4, #0]
 801d68e:	6a28      	ldr	r0, [r5, #32]
 801d690:	4283      	cmp	r3, r0
 801d692:	d007      	beq.n	801d6a4 <lfs_dir_split+0x74>
 801d694:	6866      	ldr	r6, [r4, #4]
 801d696:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801d698:	42a6      	cmp	r6, r4
 801d69a:	d003      	beq.n	801d6a4 <lfs_dir_split+0x74>
 801d69c:	42a3      	cmp	r3, r4
 801d69e:	d001      	beq.n	801d6a4 <lfs_dir_split+0x74>
 801d6a0:	42b0      	cmp	r0, r6
 801d6a2:	d1d3      	bne.n	801d64c <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801d6a4:	f1b8 0f00 	cmp.w	r8, #0
 801d6a8:	d1d0      	bne.n	801d64c <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801d6aa:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801d6ac:	626a      	str	r2, [r5, #36]	@ 0x24
 801d6ae:	e7cd      	b.n	801d64c <lfs_dir_split+0x1c>
        return res;
 801d6b0:	4607      	mov	r7, r0
 801d6b2:	e7cb      	b.n	801d64c <lfs_dir_split+0x1c>

0801d6b4 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801d6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6b8:	b091      	sub	sp, #68	@ 0x44
 801d6ba:	4607      	mov	r7, r0
 801d6bc:	4615      	mov	r5, r2
 801d6be:	4699      	mov	r9, r3
 801d6c0:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801d6c4:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801d6c8:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801d6cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d6ce:	e04c      	b.n	801d76a <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801d6d0:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801d6d2:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801d6d4:	4403      	add	r3, r0
 801d6d6:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801d6d8:	fbb3 f1f0 	udiv	r1, r3, r0
 801d6dc:	fb00 3111 	mls	r1, r0, r1, r3
 801d6e0:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801d6e2:	4293      	cmp	r3, r2
 801d6e4:	bf28      	it	cs
 801d6e6:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801d6e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d6ea:	429a      	cmp	r2, r3
 801d6ec:	d92d      	bls.n	801d74a <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801d6ee:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801d6f2:	eba6 0804 	sub.w	r8, r6, r4
 801d6f6:	f1b8 0f01 	cmp.w	r8, #1
 801d6fa:	d926      	bls.n	801d74a <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801d6fc:	2200      	movs	r2, #0
 801d6fe:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801d700:	b2a1      	uxth	r1, r4
 801d702:	ab0d      	add	r3, sp, #52	@ 0x34
 801d704:	9308      	str	r3, [sp, #32]
 801d706:	4b4d      	ldr	r3, [pc, #308]	@ (801d83c <lfs_dir_splittingcompact+0x188>)
 801d708:	9307      	str	r3, [sp, #28]
 801d70a:	424b      	negs	r3, r1
 801d70c:	b21b      	sxth	r3, r3
 801d70e:	9306      	str	r3, [sp, #24]
 801d710:	9605      	str	r6, [sp, #20]
 801d712:	9104      	str	r1, [sp, #16]
 801d714:	9203      	str	r2, [sp, #12]
 801d716:	4b4a      	ldr	r3, [pc, #296]	@ (801d840 <lfs_dir_splittingcompact+0x18c>)
 801d718:	9302      	str	r3, [sp, #8]
 801d71a:	f8cd 9004 	str.w	r9, [sp, #4]
 801d71e:	9500      	str	r5, [sp, #0]
 801d720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d724:	4651      	mov	r1, sl
 801d726:	4638      	mov	r0, r7
 801d728:	f7fd ffca 	bl	801b6c0 <lfs_dir_traverse>
            if (err) {
 801d72c:	4603      	mov	r3, r0
 801d72e:	2800      	cmp	r0, #0
 801d730:	d15b      	bne.n	801d7ea <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801d732:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801d736:	d8da      	bhi.n	801d6ee <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801d738:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801d73a:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801d73c:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801d740:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801d742:	2800      	cmp	r0, #0
 801d744:	d0c4      	beq.n	801d6d0 <lfs_dir_splittingcompact+0x1c>
 801d746:	0843      	lsrs	r3, r0, #1
 801d748:	e7c3      	b.n	801d6d2 <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801d74a:	455c      	cmp	r4, fp
 801d74c:	d022      	beq.n	801d794 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801d74e:	b2a4      	uxth	r4, r4
 801d750:	9602      	str	r6, [sp, #8]
 801d752:	9401      	str	r4, [sp, #4]
 801d754:	f8cd a000 	str.w	sl, [sp]
 801d758:	464b      	mov	r3, r9
 801d75a:	462a      	mov	r2, r5
 801d75c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d75e:	4638      	mov	r0, r7
 801d760:	f7ff ff66 	bl	801d630 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801d764:	4603      	mov	r3, r0
 801d766:	b910      	cbnz	r0, 801d76e <lfs_dir_splittingcompact+0xba>
            end = split;
 801d768:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801d76a:	465c      	mov	r4, fp
        while (end - split > 1) {
 801d76c:	e7c1      	b.n	801d6f2 <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801d76e:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801d772:	f110 0f1c 	cmn.w	r0, #28
 801d776:	d138      	bne.n	801d7ea <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801d778:	4b32      	ldr	r3, [pc, #200]	@ (801d844 <lfs_dir_splittingcompact+0x190>)
 801d77a:	9301      	str	r3, [sp, #4]
 801d77c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d780:	9300      	str	r3, [sp, #0]
 801d782:	f8d8 3000 	ldr.w	r3, [r8]
 801d786:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801d78a:	492f      	ldr	r1, [pc, #188]	@ (801d848 <lfs_dir_splittingcompact+0x194>)
 801d78c:	482f      	ldr	r0, [pc, #188]	@ (801d84c <lfs_dir_splittingcompact+0x198>)
 801d78e:	f00c fc01 	bl	8029f94 <printf>
            break;
 801d792:	e001      	b.n	801d798 <lfs_dir_splittingcompact+0xe4>
 801d794:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801d798:	4641      	mov	r1, r8
 801d79a:	4638      	mov	r0, r7
 801d79c:	f7fd fc76 	bl	801b08c <lfs_dir_needsrelocation>
 801d7a0:	b1b8      	cbz	r0, 801d7d2 <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801d7a2:	2300      	movs	r3, #0
 801d7a4:	930e      	str	r3, [sp, #56]	@ 0x38
 801d7a6:	2301      	movs	r3, #1
 801d7a8:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d7aa:	f8d8 2000 	ldr.w	r2, [r8]
 801d7ae:	b132      	cbz	r2, 801d7be <lfs_dir_splittingcompact+0x10a>
 801d7b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d7b4:	2b01      	cmp	r3, #1
 801d7b6:	d002      	beq.n	801d7be <lfs_dir_splittingcompact+0x10a>
 801d7b8:	2a01      	cmp	r2, #1
 801d7ba:	d000      	beq.n	801d7be <lfs_dir_splittingcompact+0x10a>
 801d7bc:	b94b      	cbnz	r3, 801d7d2 <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801d7be:	4638      	mov	r0, r7
 801d7c0:	f7ff fbe4 	bl	801cf8c <lfs_fs_size_>
        if (size < 0) {
 801d7c4:	1e03      	subs	r3, r0, #0
 801d7c6:	db10      	blt.n	801d7ea <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801d7c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801d7ca:	1ad3      	subs	r3, r2, r3
 801d7cc:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801d7d0:	d80f      	bhi.n	801d7f2 <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801d7d2:	9602      	str	r6, [sp, #8]
 801d7d4:	f8cd b004 	str.w	fp, [sp, #4]
 801d7d8:	f8cd a000 	str.w	sl, [sp]
 801d7dc:	464b      	mov	r3, r9
 801d7de:	462a      	mov	r2, r5
 801d7e0:	4641      	mov	r1, r8
 801d7e2:	4638      	mov	r0, r7
 801d7e4:	f7ff fdc6 	bl	801d374 <lfs_dir_compact>
 801d7e8:	4603      	mov	r3, r0
}
 801d7ea:	4618      	mov	r0, r3
 801d7ec:	b011      	add	sp, #68	@ 0x44
 801d7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801d7f2:	4b14      	ldr	r3, [pc, #80]	@ (801d844 <lfs_dir_splittingcompact+0x190>)
 801d7f4:	9300      	str	r3, [sp, #0]
 801d7f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d7fa:	f640 0286 	movw	r2, #2182	@ 0x886
 801d7fe:	4912      	ldr	r1, [pc, #72]	@ (801d848 <lfs_dir_splittingcompact+0x194>)
 801d800:	4813      	ldr	r0, [pc, #76]	@ (801d850 <lfs_dir_splittingcompact+0x19c>)
 801d802:	f00c fbc7 	bl	8029f94 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801d806:	9602      	str	r6, [sp, #8]
 801d808:	f8cd b004 	str.w	fp, [sp, #4]
 801d80c:	f8cd a000 	str.w	sl, [sp]
 801d810:	464b      	mov	r3, r9
 801d812:	462a      	mov	r2, r5
 801d814:	4641      	mov	r1, r8
 801d816:	4638      	mov	r0, r7
 801d818:	f7ff ff0a 	bl	801d630 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801d81c:	4603      	mov	r3, r0
 801d81e:	b150      	cbz	r0, 801d836 <lfs_dir_splittingcompact+0x182>
 801d820:	f110 0f1c 	cmn.w	r0, #28
 801d824:	d1e1      	bne.n	801d7ea <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801d826:	4b07      	ldr	r3, [pc, #28]	@ (801d844 <lfs_dir_splittingcompact+0x190>)
 801d828:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801d82c:	4906      	ldr	r1, [pc, #24]	@ (801d848 <lfs_dir_splittingcompact+0x194>)
 801d82e:	4809      	ldr	r0, [pc, #36]	@ (801d854 <lfs_dir_splittingcompact+0x1a0>)
 801d830:	f00c fbb0 	bl	8029f94 <printf>
 801d834:	e7cd      	b.n	801d7d2 <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801d836:	2601      	movs	r6, #1
 801d838:	e7cb      	b.n	801d7d2 <lfs_dir_splittingcompact+0x11e>
 801d83a:	bf00      	nop
 801d83c:	0801b071 	.word	0x0801b071
 801d840:	400ffc00 	.word	0x400ffc00
 801d844:	08036c70 	.word	0x08036c70
 801d848:	08039148 	.word	0x08039148
 801d84c:	08039444 	.word	0x08039444
 801d850:	08039474 	.word	0x08039474
 801d854:	080394a4 	.word	0x080394a4

0801d858 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801d858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d85c:	b09b      	sub	sp, #108	@ 0x6c
 801d85e:	4607      	mov	r7, r0
 801d860:	460e      	mov	r6, r1
 801d862:	4691      	mov	r9, r2
 801d864:	461d      	mov	r5, r3
 801d866:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801d86a:	2300      	movs	r3, #0
    bool hasdelete = false;
 801d86c:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801d86e:	e003      	b.n	801d878 <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801d870:	8ab2      	ldrh	r2, [r6, #20]
 801d872:	3201      	adds	r2, #1
 801d874:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801d876:	3301      	adds	r3, #1
 801d878:	4543      	cmp	r3, r8
 801d87a:	da2d      	bge.n	801d8d8 <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801d87c:	00d8      	lsls	r0, r3, #3
 801d87e:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801d882:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801d886:	0d11      	lsrs	r1, r2, #20
 801d888:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801d88c:	f240 4e01 	movw	lr, #1025	@ 0x401
 801d890:	4572      	cmp	r2, lr
 801d892:	d0ed      	beq.n	801d870 <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801d894:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801d898:	4572      	cmp	r2, lr
 801d89a:	d00f      	beq.n	801d8bc <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801d89c:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801d8a0:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801d8a4:	d1e7      	bne.n	801d876 <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801d8a6:	6862      	ldr	r2, [r4, #4]
 801d8a8:	6812      	ldr	r2, [r2, #0]
 801d8aa:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801d8ac:	6862      	ldr	r2, [r4, #4]
 801d8ae:	6852      	ldr	r2, [r2, #4]
 801d8b0:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801d8b2:	582a      	ldr	r2, [r5, r0]
 801d8b4:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801d8b8:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801d8ba:	e7dc      	b.n	801d876 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801d8bc:	8ab2      	ldrh	r2, [r6, #20]
 801d8be:	b122      	cbz	r2, 801d8ca <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801d8c0:	3a01      	subs	r2, #1
 801d8c2:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801d8c4:	f04f 0c01 	mov.w	ip, #1
 801d8c8:	e7d5      	b.n	801d876 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801d8ca:	4ba0      	ldr	r3, [pc, #640]	@ (801db4c <lfs_dir_relocatingcommit+0x2f4>)
 801d8cc:	4aa0      	ldr	r2, [pc, #640]	@ (801db50 <lfs_dir_relocatingcommit+0x2f8>)
 801d8ce:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801d8d2:	48a0      	ldr	r0, [pc, #640]	@ (801db54 <lfs_dir_relocatingcommit+0x2fc>)
 801d8d4:	f00c fb2a 	bl	8029f2c <__assert_func>
    if (hasdelete && dir->count == 0) {
 801d8d8:	f1bc 0f00 	cmp.w	ip, #0
 801d8dc:	d01b      	beq.n	801d916 <lfs_dir_relocatingcommit+0xbe>
 801d8de:	8ab3      	ldrh	r3, [r6, #20]
 801d8e0:	b9cb      	cbnz	r3, 801d916 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801d8e2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d8e4:	b15b      	cbz	r3, 801d8fe <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801d8e6:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801d8e8:	4631      	mov	r1, r6
 801d8ea:	4638      	mov	r0, r7
 801d8ec:	f7ff fb5e 	bl	801cfac <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801d8f0:	4682      	mov	sl, r0
 801d8f2:	b158      	cbz	r0, 801d90c <lfs_dir_relocatingcommit+0xb4>
 801d8f4:	f110 0f02 	cmn.w	r0, #2
 801d8f8:	f040 8159 	bne.w	801dbae <lfs_dir_relocatingcommit+0x356>
 801d8fc:	e00b      	b.n	801d916 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801d8fe:	4b96      	ldr	r3, [pc, #600]	@ (801db58 <lfs_dir_relocatingcommit+0x300>)
 801d900:	4a93      	ldr	r2, [pc, #588]	@ (801db50 <lfs_dir_relocatingcommit+0x2f8>)
 801d902:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801d906:	4893      	ldr	r0, [pc, #588]	@ (801db54 <lfs_dir_relocatingcommit+0x2fc>)
 801d908:	f00c fb10 	bl	8029f2c <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801d90c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d90e:	7ddb      	ldrb	r3, [r3, #23]
 801d910:	2b00      	cmp	r3, #0
 801d912:	f040 80bf 	bne.w	801da94 <lfs_dir_relocatingcommit+0x23c>
    if (dir->erased) {
 801d916:	7db4      	ldrb	r4, [r6, #22]
 801d918:	2c00      	cmp	r4, #0
 801d91a:	d02e      	beq.n	801d97a <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801d91c:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801d91e:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801d920:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801d922:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801d924:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801d926:	9212      	str	r2, [sp, #72]	@ 0x48
 801d928:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d92c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d92e:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801d930:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d932:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d934:	2b00      	cmp	r3, #0
 801d936:	d03c      	beq.n	801d9b2 <lfs_dir_relocatingcommit+0x15a>
 801d938:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801d93a:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801d93c:	9718      	str	r7, [sp, #96]	@ 0x60
 801d93e:	ab10      	add	r3, sp, #64	@ 0x40
 801d940:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801d942:	ab18      	add	r3, sp, #96	@ 0x60
 801d944:	9308      	str	r3, [sp, #32]
 801d946:	4b85      	ldr	r3, [pc, #532]	@ (801db5c <lfs_dir_relocatingcommit+0x304>)
 801d948:	9307      	str	r3, [sp, #28]
 801d94a:	2300      	movs	r3, #0
 801d94c:	9306      	str	r3, [sp, #24]
 801d94e:	9305      	str	r3, [sp, #20]
 801d950:	9304      	str	r3, [sp, #16]
 801d952:	9303      	str	r3, [sp, #12]
 801d954:	9302      	str	r3, [sp, #8]
 801d956:	f8cd 8004 	str.w	r8, [sp, #4]
 801d95a:	9500      	str	r5, [sp, #0]
 801d95c:	6933      	ldr	r3, [r6, #16]
 801d95e:	68f2      	ldr	r2, [r6, #12]
 801d960:	4631      	mov	r1, r6
 801d962:	4638      	mov	r0, r7
 801d964:	f7fd feac 	bl	801b6c0 <lfs_dir_traverse>
        if (err) {
 801d968:	4682      	mov	sl, r0
 801d96a:	b328      	cbz	r0, 801d9b8 <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801d96c:	f110 0f1c 	cmn.w	r0, #28
 801d970:	d003      	beq.n	801d97a <lfs_dir_relocatingcommit+0x122>
 801d972:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d976:	f040 811a 	bne.w	801dbae <lfs_dir_relocatingcommit+0x356>
    rcache->block = LFS_BLOCK_NULL;
 801d97a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d97e:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801d980:	8ab3      	ldrh	r3, [r6, #20]
 801d982:	9302      	str	r3, [sp, #8]
 801d984:	2300      	movs	r3, #0
 801d986:	9301      	str	r3, [sp, #4]
 801d988:	9600      	str	r6, [sp, #0]
 801d98a:	4643      	mov	r3, r8
 801d98c:	462a      	mov	r2, r5
 801d98e:	4631      	mov	r1, r6
 801d990:	4638      	mov	r0, r7
 801d992:	f7ff fe8f 	bl	801d6b4 <lfs_dir_splittingcompact>
    if (state < 0) {
 801d996:	1e01      	subs	r1, r0, #0
 801d998:	f2c0 8106 	blt.w	801dba8 <lfs_dir_relocatingcommit+0x350>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801d99c:	f8d9 b000 	ldr.w	fp, [r9]
 801d9a0:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801d9a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801d9a8:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801d9aa:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801d9ac:	4692      	mov	sl, r2
 801d9ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d9b0:	e0db      	b.n	801db6a <lfs_dir_relocatingcommit+0x312>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d9b2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801d9b4:	3b08      	subs	r3, #8
 801d9b6:	e7c0      	b.n	801d93a <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	930d      	str	r3, [sp, #52]	@ 0x34
 801d9bc:	930e      	str	r3, [sp, #56]	@ 0x38
 801d9be:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801d9c0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801d9c4:	a80d      	add	r0, sp, #52	@ 0x34
 801d9c6:	f7fd fa97 	bl	801aef8 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801d9ca:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801d9ce:	a80d      	add	r0, sp, #52	@ 0x34
 801d9d0:	f7fd fa92 	bl	801aef8 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801d9d4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801d9d8:	a80d      	add	r0, sp, #52	@ 0x34
 801d9da:	f7fd fa8d 	bl	801aef8 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801d9de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d9e0:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801d9e4:	f023 0303 	bic.w	r3, r3, #3
 801d9e8:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801d9ea:	e001      	b.n	801d9f0 <lfs_dir_relocatingcommit+0x198>
 801d9ec:	f10a 0a01 	add.w	sl, sl, #1
 801d9f0:	f1ba 0f02 	cmp.w	sl, #2
 801d9f4:	dc07      	bgt.n	801da06 <lfs_dir_relocatingcommit+0x1ae>
        if (((uint32_t*)a)[i] != 0) {
 801d9f6:	ab1a      	add	r3, sp, #104	@ 0x68
 801d9f8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801d9fc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801da00:	2b00      	cmp	r3, #0
 801da02:	d0f3      	beq.n	801d9ec <lfs_dir_relocatingcommit+0x194>
            return false;
 801da04:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801da06:	b9c4      	cbnz	r4, 801da3a <lfs_dir_relocatingcommit+0x1e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801da08:	aa0d      	add	r2, sp, #52	@ 0x34
 801da0a:	4631      	mov	r1, r6
 801da0c:	4638      	mov	r0, r7
 801da0e:	f7fd fdc7 	bl	801b5a0 <lfs_dir_getgstate>
            if (err) {
 801da12:	4682      	mov	sl, r0
 801da14:	2800      	cmp	r0, #0
 801da16:	f040 80ca 	bne.w	801dbae <lfs_dir_relocatingcommit+0x356>
            err = lfs_dir_commitattr(lfs, &commit,
 801da1a:	ab0d      	add	r3, sp, #52	@ 0x34
 801da1c:	4a50      	ldr	r2, [pc, #320]	@ (801db60 <lfs_dir_relocatingcommit+0x308>)
 801da1e:	a910      	add	r1, sp, #64	@ 0x40
 801da20:	4638      	mov	r0, r7
 801da22:	f7ff fb45 	bl	801d0b0 <lfs_dir_commitattr>
            if (err) {
 801da26:	4682      	mov	sl, r0
 801da28:	b138      	cbz	r0, 801da3a <lfs_dir_relocatingcommit+0x1e2>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801da2a:	f110 0f1c 	cmn.w	r0, #28
 801da2e:	d0a4      	beq.n	801d97a <lfs_dir_relocatingcommit+0x122>
 801da30:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801da34:	f040 80bb 	bne.w	801dbae <lfs_dir_relocatingcommit+0x356>
 801da38:	e79f      	b.n	801d97a <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801da3a:	a910      	add	r1, sp, #64	@ 0x40
 801da3c:	4638      	mov	r0, r7
 801da3e:	f7ff fb9d 	bl	801d17c <lfs_dir_commitcrc>
        if (err) {
 801da42:	4682      	mov	sl, r0
 801da44:	b138      	cbz	r0, 801da56 <lfs_dir_relocatingcommit+0x1fe>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801da46:	f110 0f1c 	cmn.w	r0, #28
 801da4a:	d096      	beq.n	801d97a <lfs_dir_relocatingcommit+0x122>
 801da4c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801da50:	f040 80ad 	bne.w	801dbae <lfs_dir_relocatingcommit+0x356>
 801da54:	e791      	b.n	801d97a <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801da56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801da58:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801da5a:	6a11      	ldr	r1, [r2, #32]
 801da5c:	fbb3 f2f1 	udiv	r2, r3, r1
 801da60:	fb01 3212 	mls	r2, r1, r2, r3
 801da64:	b97a      	cbnz	r2, 801da86 <lfs_dir_relocatingcommit+0x22e>
        dir->off = commit.off;
 801da66:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801da68:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801da6a:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801da6c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801da70:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801da74:	ca07      	ldmia	r2, {r0, r1, r2}
 801da76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801da7a:	2200      	movs	r2, #0
 801da7c:	64ba      	str	r2, [r7, #72]	@ 0x48
 801da7e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801da80:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801da82:	4651      	mov	r1, sl
 801da84:	e78a      	b.n	801d99c <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801da86:	4b37      	ldr	r3, [pc, #220]	@ (801db64 <lfs_dir_relocatingcommit+0x30c>)
 801da88:	4a31      	ldr	r2, [pc, #196]	@ (801db50 <lfs_dir_relocatingcommit+0x2f8>)
 801da8a:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801da8e:	4831      	ldr	r0, [pc, #196]	@ (801db54 <lfs_dir_relocatingcommit+0x2fc>)
 801da90:	f00c fa4c 	bl	8029f2c <__assert_func>
            state = LFS_OK_DROPPED;
 801da94:	2102      	movs	r1, #2
 801da96:	e781      	b.n	801d99c <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801da98:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801da9c:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801daa0:	4584      	cmp	ip, r0
 801daa2:	d10e      	bne.n	801dac2 <lfs_dir_relocatingcommit+0x26a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801daa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801daa8:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801daaa:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801daac:	3301      	adds	r3, #1
 801daae:	4543      	cmp	r3, r8
 801dab0:	da34      	bge.n	801db1c <lfs_dir_relocatingcommit+0x2c4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801dab2:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801dab6:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801daba:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801dabe:	4282      	cmp	r2, r0
 801dac0:	d0ea      	beq.n	801da98 <lfs_dir_relocatingcommit+0x240>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801dac2:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801dac6:	4282      	cmp	r2, r0
 801dac8:	d011      	beq.n	801daee <lfs_dir_relocatingcommit+0x296>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801daca:	f240 4001 	movw	r0, #1025	@ 0x401
 801dace:	4282      	cmp	r2, r0
 801dad0:	d1ec      	bne.n	801daac <lfs_dir_relocatingcommit+0x254>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801dad2:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801dad4:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801dad8:	428a      	cmp	r2, r1
 801dada:	d3e7      	bcc.n	801daac <lfs_dir_relocatingcommit+0x254>
                        d->id += 1;
 801dadc:	3201      	adds	r2, #1
 801dade:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801dae0:	79a2      	ldrb	r2, [r4, #6]
 801dae2:	2a02      	cmp	r2, #2
 801dae4:	d1e2      	bne.n	801daac <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos += 1;
 801dae6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801dae8:	3201      	adds	r2, #1
 801daea:	62a2      	str	r2, [r4, #40]	@ 0x28
 801daec:	e7de      	b.n	801daac <lfs_dir_relocatingcommit+0x254>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801daee:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801daf0:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801daf4:	4560      	cmp	r0, ip
 801daf6:	d9e8      	bls.n	801daca <lfs_dir_relocatingcommit+0x272>
                        d->id -= 1;
 801daf8:	3801      	subs	r0, #1
 801dafa:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801dafc:	79a2      	ldrb	r2, [r4, #6]
 801dafe:	2a02      	cmp	r2, #2
 801db00:	d1d4      	bne.n	801daac <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos -= 1;
 801db02:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801db04:	3a01      	subs	r2, #1
 801db06:	62a2      	str	r2, [r4, #40]	@ 0x28
 801db08:	e7d0      	b.n	801daac <lfs_dir_relocatingcommit+0x254>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801db0a:	f104 0220 	add.w	r2, r4, #32
 801db0e:	f104 0108 	add.w	r1, r4, #8
 801db12:	4638      	mov	r0, r7
 801db14:	f7fe fd24 	bl	801c560 <lfs_dir_fetch>
                if (err) {
 801db18:	2800      	cmp	r0, #0
 801db1a:	d147      	bne.n	801dbac <lfs_dir_relocatingcommit+0x354>
            while (d->id >= d->m.count && d->m.split) {
 801db1c:	88a3      	ldrh	r3, [r4, #4]
 801db1e:	8ba1      	ldrh	r1, [r4, #28]
 801db20:	428b      	cmp	r3, r1
 801db22:	d321      	bcc.n	801db68 <lfs_dir_relocatingcommit+0x310>
 801db24:	7fe2      	ldrb	r2, [r4, #31]
 801db26:	b1fa      	cbz	r2, 801db68 <lfs_dir_relocatingcommit+0x310>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801db28:	6a22      	ldr	r2, [r4, #32]
 801db2a:	6a38      	ldr	r0, [r7, #32]
 801db2c:	4282      	cmp	r2, r0
 801db2e:	d0ec      	beq.n	801db0a <lfs_dir_relocatingcommit+0x2b2>
 801db30:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801db34:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801db38:	45e6      	cmp	lr, ip
 801db3a:	d0e6      	beq.n	801db0a <lfs_dir_relocatingcommit+0x2b2>
 801db3c:	4562      	cmp	r2, ip
 801db3e:	d0e4      	beq.n	801db0a <lfs_dir_relocatingcommit+0x2b2>
 801db40:	4570      	cmp	r0, lr
 801db42:	d0e2      	beq.n	801db0a <lfs_dir_relocatingcommit+0x2b2>
                    d->id -= d->m.count;
 801db44:	1a5b      	subs	r3, r3, r1
 801db46:	80a3      	strh	r3, [r4, #4]
 801db48:	e7df      	b.n	801db0a <lfs_dir_relocatingcommit+0x2b2>
 801db4a:	bf00      	nop
 801db4c:	080394d0 	.word	0x080394d0
 801db50:	08039e48 	.word	0x08039e48
 801db54:	08039148 	.word	0x08039148
 801db58:	080394e0 	.word	0x080394e0
 801db5c:	0801d16b 	.word	0x0801d16b
 801db60:	7ffffc0c 	.word	0x7ffffc0c
 801db64:	080393e4 	.word	0x080393e4
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801db68:	6824      	ldr	r4, [r4, #0]
 801db6a:	b1d4      	cbz	r4, 801dba2 <lfs_dir_relocatingcommit+0x34a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801db6c:	68a3      	ldr	r3, [r4, #8]
 801db6e:	459b      	cmp	fp, r3
 801db70:	d006      	beq.n	801db80 <lfs_dir_relocatingcommit+0x328>
 801db72:	68e2      	ldr	r2, [r4, #12]
 801db74:	4592      	cmp	sl, r2
 801db76:	d003      	beq.n	801db80 <lfs_dir_relocatingcommit+0x328>
 801db78:	459a      	cmp	sl, r3
 801db7a:	d001      	beq.n	801db80 <lfs_dir_relocatingcommit+0x328>
 801db7c:	4593      	cmp	fp, r2
 801db7e:	d1f3      	bne.n	801db68 <lfs_dir_relocatingcommit+0x310>
            d->m = *dir;
 801db80:	f104 0c08 	add.w	ip, r4, #8
 801db84:	46b6      	mov	lr, r6
 801db86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801db8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801db8e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801db92:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801db96:	f104 0308 	add.w	r3, r4, #8
 801db9a:	454b      	cmp	r3, r9
 801db9c:	d0be      	beq.n	801db1c <lfs_dir_relocatingcommit+0x2c4>
                for (int i = 0; i < attrcount; i++) {
 801db9e:	2300      	movs	r3, #0
 801dba0:	e785      	b.n	801daae <lfs_dir_relocatingcommit+0x256>
    return state;
 801dba2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dba4:	468a      	mov	sl, r1
 801dba6:	e002      	b.n	801dbae <lfs_dir_relocatingcommit+0x356>
        return state;
 801dba8:	468a      	mov	sl, r1
 801dbaa:	e000      	b.n	801dbae <lfs_dir_relocatingcommit+0x356>
 801dbac:	4682      	mov	sl, r0
}
 801dbae:	4650      	mov	r0, sl
 801dbb0:	b01b      	add	sp, #108	@ 0x6c
 801dbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbb6:	bf00      	nop

0801dbb8 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801dbb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dbbc:	b0a3      	sub	sp, #140	@ 0x8c
 801dbbe:	4605      	mov	r5, r0
 801dbc0:	460e      	mov	r6, r1
 801dbc2:	4690      	mov	r8, r2
 801dbc4:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801dbc6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801dbc8:	e003      	b.n	801dbd2 <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801dbca:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801dbcc:	2b01      	cmp	r3, #1
 801dbce:	d012      	beq.n	801dbf6 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801dbd0:	6824      	ldr	r4, [r4, #0]
 801dbd2:	b34c      	cbz	r4, 801dc28 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801dbd4:	f104 0108 	add.w	r1, r4, #8
 801dbd8:	42b1      	cmp	r1, r6
 801dbda:	d0f9      	beq.n	801dbd0 <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dbdc:	68a1      	ldr	r1, [r4, #8]
 801dbde:	6833      	ldr	r3, [r6, #0]
 801dbe0:	428b      	cmp	r3, r1
 801dbe2:	d0f2      	beq.n	801dbca <lfs_dir_orphaningcommit+0x12>
 801dbe4:	68e0      	ldr	r0, [r4, #12]
 801dbe6:	6872      	ldr	r2, [r6, #4]
 801dbe8:	4282      	cmp	r2, r0
 801dbea:	d0ee      	beq.n	801dbca <lfs_dir_orphaningcommit+0x12>
 801dbec:	428a      	cmp	r2, r1
 801dbee:	d0ec      	beq.n	801dbca <lfs_dir_orphaningcommit+0x12>
 801dbf0:	4298      	cmp	r0, r3
 801dbf2:	d1ed      	bne.n	801dbd0 <lfs_dir_orphaningcommit+0x18>
 801dbf4:	e7e9      	b.n	801dbca <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801dbf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dbf8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801dbfc:	d0e8      	beq.n	801dbd0 <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801dbfe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801dc00:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801dc02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801dc04:	429a      	cmp	r2, r3
 801dc06:	d9e3      	bls.n	801dbd0 <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801dc08:	4621      	mov	r1, r4
 801dc0a:	4628      	mov	r0, r5
 801dc0c:	f7fe feee 	bl	801c9ec <lfs_file_outline>
            if (err) {
 801dc10:	4607      	mov	r7, r0
 801dc12:	2800      	cmp	r0, #0
 801dc14:	f040 81bc 	bne.w	801df90 <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801dc18:	4621      	mov	r1, r4
 801dc1a:	4628      	mov	r0, r5
 801dc1c:	f7ff f866 	bl	801ccec <lfs_file_flush>
            if (err) {
 801dc20:	4607      	mov	r7, r0
 801dc22:	2800      	cmp	r0, #0
 801dc24:	d0d4      	beq.n	801dbd0 <lfs_dir_orphaningcommit+0x18>
 801dc26:	e1b3      	b.n	801df90 <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801dc28:	6833      	ldr	r3, [r6, #0]
 801dc2a:	9316      	str	r3, [sp, #88]	@ 0x58
 801dc2c:	6873      	ldr	r3, [r6, #4]
 801dc2e:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801dc30:	ac0e      	add	r4, sp, #56	@ 0x38
 801dc32:	4637      	mov	r7, r6
 801dc34:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801dc36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dc38:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801dc3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801dc40:	ab06      	add	r3, sp, #24
 801dc42:	9301      	str	r3, [sp, #4]
 801dc44:	f8cd 9000 	str.w	r9, [sp]
 801dc48:	4643      	mov	r3, r8
 801dc4a:	4632      	mov	r2, r6
 801dc4c:	a90e      	add	r1, sp, #56	@ 0x38
 801dc4e:	4628      	mov	r0, r5
 801dc50:	f7ff fe02 	bl	801d858 <lfs_dir_relocatingcommit>
    if (state < 0) {
 801dc54:	1e07      	subs	r7, r0, #0
 801dc56:	f2c0 819b 	blt.w	801df90 <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dc5a:	6833      	ldr	r3, [r6, #0]
 801dc5c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801dc5e:	429a      	cmp	r2, r3
 801dc60:	d007      	beq.n	801dc72 <lfs_dir_orphaningcommit+0xba>
 801dc62:	6870      	ldr	r0, [r6, #4]
 801dc64:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801dc66:	4281      	cmp	r1, r0
 801dc68:	d003      	beq.n	801dc72 <lfs_dir_orphaningcommit+0xba>
 801dc6a:	4299      	cmp	r1, r3
 801dc6c:	d001      	beq.n	801dc72 <lfs_dir_orphaningcommit+0xba>
 801dc6e:	4290      	cmp	r0, r2
 801dc70:	d109      	bne.n	801dc86 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801dc72:	4634      	mov	r4, r6
 801dc74:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801dc78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801dc7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dc7e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801dc82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801dc86:	2f02      	cmp	r7, #2
 801dc88:	d001      	beq.n	801dc8e <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801dc8a:	2600      	movs	r6, #0
 801dc8c:	e0b8      	b.n	801de00 <lfs_dir_orphaningcommit+0x248>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801dc8e:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801dc92:	4631      	mov	r1, r6
 801dc94:	4628      	mov	r0, r5
 801dc96:	f7fd fc83 	bl	801b5a0 <lfs_dir_getgstate>
        if (err) {
 801dc9a:	4607      	mov	r7, r0
 801dc9c:	2800      	cmp	r0, #0
 801dc9e:	f040 8177 	bne.w	801df90 <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801dca2:	9b06      	ldr	r3, [sp, #24]
 801dca4:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801dca6:	9b07      	ldr	r3, [sp, #28]
 801dca8:	9317      	str	r3, [sp, #92]	@ 0x5c
        lfs_pair_tole32(dir->tail);
 801dcaa:	f106 0118 	add.w	r1, r6, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801dcae:	7df2      	ldrb	r2, [r6, #23]
 801dcb0:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801dcb4:	4ba2      	ldr	r3, [pc, #648]	@ (801df40 <lfs_dir_orphaningcommit+0x388>)
 801dcb6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801dcba:	9318      	str	r3, [sp, #96]	@ 0x60
 801dcbc:	9119      	str	r1, [sp, #100]	@ 0x64
 801dcbe:	2300      	movs	r3, #0
 801dcc0:	9301      	str	r3, [sp, #4]
 801dcc2:	2301      	movs	r3, #1
 801dcc4:	9300      	str	r3, [sp, #0]
 801dcc6:	ab18      	add	r3, sp, #96	@ 0x60
 801dcc8:	aa16      	add	r2, sp, #88	@ 0x58
 801dcca:	a906      	add	r1, sp, #24
 801dccc:	4628      	mov	r0, r5
 801dcce:	f7ff fdc3 	bl	801d858 <lfs_dir_relocatingcommit>
        if (state < 0) {
 801dcd2:	1e07      	subs	r7, r0, #0
 801dcd4:	f2c0 815c 	blt.w	801df90 <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801dcd8:	ac0e      	add	r4, sp, #56	@ 0x38
 801dcda:	ae06      	add	r6, sp, #24
 801dcdc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801dcde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dce0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801dce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801dce8:	e7cf      	b.n	801dc8a <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801dcea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dcec:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801dcee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dcf0:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801dcf2:	799a      	ldrb	r2, [r3, #6]
 801dcf4:	2a02      	cmp	r2, #2
 801dcf6:	d00d      	beq.n	801dd14 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	b1db      	cbz	r3, 801dd34 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dcfc:	689a      	ldr	r2, [r3, #8]
 801dcfe:	4291      	cmp	r1, r2
 801dd00:	d0f3      	beq.n	801dcea <lfs_dir_orphaningcommit+0x132>
 801dd02:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801dd04:	68dc      	ldr	r4, [r3, #12]
 801dd06:	4284      	cmp	r4, r0
 801dd08:	d0ef      	beq.n	801dcea <lfs_dir_orphaningcommit+0x132>
 801dd0a:	428c      	cmp	r4, r1
 801dd0c:	d0ed      	beq.n	801dcea <lfs_dir_orphaningcommit+0x132>
 801dd0e:	4290      	cmp	r0, r2
 801dd10:	d1ef      	bne.n	801dcf2 <lfs_dir_orphaningcommit+0x13a>
 801dd12:	e7ea      	b.n	801dcea <lfs_dir_orphaningcommit+0x132>
 801dd14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801dd16:	428a      	cmp	r2, r1
 801dd18:	d007      	beq.n	801dd2a <lfs_dir_orphaningcommit+0x172>
 801dd1a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801dd1c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801dd1e:	42a0      	cmp	r0, r4
 801dd20:	d003      	beq.n	801dd2a <lfs_dir_orphaningcommit+0x172>
 801dd22:	4288      	cmp	r0, r1
 801dd24:	d001      	beq.n	801dd2a <lfs_dir_orphaningcommit+0x172>
 801dd26:	4294      	cmp	r4, r2
 801dd28:	d1e6      	bne.n	801dcf8 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801dd2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dd2c:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801dd2e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dd30:	631a      	str	r2, [r3, #48]	@ 0x30
 801dd32:	e7e1      	b.n	801dcf8 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801dd34:	aa06      	add	r2, sp, #24
 801dd36:	a916      	add	r1, sp, #88	@ 0x58
 801dd38:	4628      	mov	r0, r5
 801dd3a:	f7fe fba5 	bl	801c488 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801dd3e:	1e04      	subs	r4, r0, #0
 801dd40:	f280 8082 	bge.w	801de48 <lfs_dir_orphaningcommit+0x290>
 801dd44:	f114 0f02 	cmn.w	r4, #2
 801dd48:	f040 8128 	bne.w	801df9c <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801dd4c:	f114 0802 	adds.w	r8, r4, #2
 801dd50:	bf18      	it	ne
 801dd52:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801dd56:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801dd58:	aa06      	add	r2, sp, #24
 801dd5a:	a916      	add	r1, sp, #88	@ 0x58
 801dd5c:	4628      	mov	r0, r5
 801dd5e:	f7ff f925 	bl	801cfac <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801dd62:	4603      	mov	r3, r0
 801dd64:	b118      	cbz	r0, 801dd6e <lfs_dir_orphaningcommit+0x1b6>
 801dd66:	f110 0f02 	cmn.w	r0, #2
 801dd6a:	f040 8119 	bne.w	801dfa0 <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801dd6e:	f114 0f02 	cmn.w	r4, #2
 801dd72:	f000 80d6 	beq.w	801df22 <lfs_dir_orphaningcommit+0x36a>
 801dd76:	f113 0f02 	cmn.w	r3, #2
 801dd7a:	f000 80cb 	beq.w	801df14 <lfs_dir_orphaningcommit+0x35c>
    return lfs_tag_size(a->tag);
 801dd7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801dd80:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	f040 80d1 	bne.w	801df2c <lfs_dir_orphaningcommit+0x374>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801dd8a:	a906      	add	r1, sp, #24
 801dd8c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801dd90:	f7fd f8c4 	bl	801af1c <lfs_gstate_hasmovehere>
 801dd94:	2800      	cmp	r0, #0
 801dd96:	f040 80e1 	bne.w	801df5c <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801dd9a:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801dd9e:	9b06      	ldr	r3, [sp, #24]
 801dda0:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801dda2:	9b07      	ldr	r3, [sp, #28]
 801dda4:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801dda6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ddaa:	429c      	cmp	r4, r3
 801ddac:	f000 80ec 	beq.w	801df88 <lfs_dir_orphaningcommit+0x3d0>
 801ddb0:	02a3      	lsls	r3, r4, #10
 801ddb2:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801ddb6:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801ddba:	931e      	str	r3, [sp, #120]	@ 0x78
 801ddbc:	2100      	movs	r1, #0
 801ddbe:	911f      	str	r1, [sp, #124]	@ 0x7c
 801ddc0:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801ddc4:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801ddc8:	4b5d      	ldr	r3, [pc, #372]	@ (801df40 <lfs_dir_orphaningcommit+0x388>)
 801ddca:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801ddce:	9320      	str	r3, [sp, #128]	@ 0x80
 801ddd0:	ab0e      	add	r3, sp, #56	@ 0x38
 801ddd2:	9321      	str	r3, [sp, #132]	@ 0x84
 801ddd4:	9101      	str	r1, [sp, #4]
 801ddd6:	2302      	movs	r3, #2
 801ddd8:	9300      	str	r3, [sp, #0]
 801ddda:	ab1e      	add	r3, sp, #120	@ 0x78
 801dddc:	aa16      	add	r2, sp, #88	@ 0x58
 801ddde:	a906      	add	r1, sp, #24
 801dde0:	4628      	mov	r0, r5
 801dde2:	f7ff fd39 	bl	801d858 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801dde6:	1e07      	subs	r7, r0, #0
 801dde8:	f2c0 80d2 	blt.w	801df90 <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801ddec:	ac0e      	add	r4, sp, #56	@ 0x38
 801ddee:	f10d 0c18 	add.w	ip, sp, #24
 801ddf2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ddf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ddf8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801ddfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801de00:	2f01      	cmp	r7, #1
 801de02:	f040 80c3 	bne.w	801df8c <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801de06:	4b4f      	ldr	r3, [pc, #316]	@ (801df44 <lfs_dir_orphaningcommit+0x38c>)
 801de08:	9303      	str	r3, [sp, #12]
 801de0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de0c:	9302      	str	r3, [sp, #8]
 801de0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de10:	9301      	str	r3, [sp, #4]
 801de12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801de14:	9300      	str	r3, [sp, #0]
 801de16:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801de18:	f640 128c 	movw	r2, #2444	@ 0x98c
 801de1c:	494a      	ldr	r1, [pc, #296]	@ (801df48 <lfs_dir_orphaningcommit+0x390>)
 801de1e:	484b      	ldr	r0, [pc, #300]	@ (801df4c <lfs_dir_orphaningcommit+0x394>)
 801de20:	f00c f8b8 	bl	8029f94 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801de24:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801de26:	6a2b      	ldr	r3, [r5, #32]
 801de28:	428b      	cmp	r3, r1
 801de2a:	d007      	beq.n	801de3c <lfs_dir_orphaningcommit+0x284>
 801de2c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801de2e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801de30:	4282      	cmp	r2, r0
 801de32:	d003      	beq.n	801de3c <lfs_dir_orphaningcommit+0x284>
 801de34:	428a      	cmp	r2, r1
 801de36:	d001      	beq.n	801de3c <lfs_dir_orphaningcommit+0x284>
 801de38:	4298      	cmp	r0, r3
 801de3a:	d103      	bne.n	801de44 <lfs_dir_orphaningcommit+0x28c>
            lfs->root[0] = ldir.pair[0];
 801de3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de3e:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801de40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de42:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801de44:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801de46:	e758      	b.n	801dcfa <lfs_dir_orphaningcommit+0x142>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801de48:	f114 0802 	adds.w	r8, r4, #2
 801de4c:	bf18      	it	ne
 801de4e:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801de52:	2101      	movs	r1, #1
 801de54:	4628      	mov	r0, r5
 801de56:	f7fd f997 	bl	801b188 <lfs_fs_preporphans>
            if (err) {
 801de5a:	4607      	mov	r7, r0
 801de5c:	2800      	cmp	r0, #0
 801de5e:	f040 8097 	bne.w	801df90 <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801de62:	a906      	add	r1, sp, #24
 801de64:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801de68:	f7fd f858 	bl	801af1c <lfs_gstate_hasmovehere>
 801de6c:	2800      	cmp	r0, #0
 801de6e:	d131      	bne.n	801ded4 <lfs_dir_orphaningcommit+0x31c>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801de70:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801de72:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801de76:	9b06      	ldr	r3, [sp, #24]
 801de78:	9304      	str	r3, [sp, #16]
 801de7a:	9b07      	ldr	r3, [sp, #28]
 801de7c:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801de7e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801de82:	429f      	cmp	r7, r3
 801de84:	d044      	beq.n	801df10 <lfs_dir_orphaningcommit+0x358>
 801de86:	02bb      	lsls	r3, r7, #10
 801de88:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801de8c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801de90:	931a      	str	r3, [sp, #104]	@ 0x68
 801de92:	2300      	movs	r3, #0
 801de94:	931b      	str	r3, [sp, #108]	@ 0x6c
 801de96:	921c      	str	r2, [sp, #112]	@ 0x70
 801de98:	aa0e      	add	r2, sp, #56	@ 0x38
 801de9a:	921d      	str	r2, [sp, #116]	@ 0x74
 801de9c:	9301      	str	r3, [sp, #4]
 801de9e:	2302      	movs	r3, #2
 801dea0:	9300      	str	r3, [sp, #0]
 801dea2:	ab1a      	add	r3, sp, #104	@ 0x68
 801dea4:	aa04      	add	r2, sp, #16
 801dea6:	a906      	add	r1, sp, #24
 801dea8:	4628      	mov	r0, r5
 801deaa:	f7ff fcd5 	bl	801d858 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801deae:	1e07      	subs	r7, r0, #0
 801deb0:	db6e      	blt.n	801df90 <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801deb2:	2f01      	cmp	r7, #1
 801deb4:	f47f af50 	bne.w	801dd58 <lfs_dir_orphaningcommit+0x1a0>
                lpair[0] = ppair[0];
 801deb8:	9b04      	ldr	r3, [sp, #16]
 801deba:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801debc:	9b05      	ldr	r3, [sp, #20]
 801debe:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801dec0:	ac0e      	add	r4, sp, #56	@ 0x38
 801dec2:	ae06      	add	r6, sp, #24
 801dec4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801dec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dec8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801decc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801ded0:	2601      	movs	r6, #1
 801ded2:	e795      	b.n	801de00 <lfs_dir_orphaningcommit+0x248>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801ded4:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801ded6:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801deda:	4b1a      	ldr	r3, [pc, #104]	@ (801df44 <lfs_dir_orphaningcommit+0x38c>)
 801dedc:	9302      	str	r3, [sp, #8]
 801dede:	9701      	str	r7, [sp, #4]
 801dee0:	9b07      	ldr	r3, [sp, #28]
 801dee2:	9300      	str	r3, [sp, #0]
 801dee4:	9b06      	ldr	r3, [sp, #24]
 801dee6:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801deea:	4917      	ldr	r1, [pc, #92]	@ (801df48 <lfs_dir_orphaningcommit+0x390>)
 801deec:	4818      	ldr	r0, [pc, #96]	@ (801df50 <lfs_dir_orphaningcommit+0x398>)
 801deee:	f00c f851 	bl	8029f94 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801def2:	2200      	movs	r2, #0
 801def4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801def8:	4628      	mov	r0, r5
 801defa:	f7fd f8f5 	bl	801b0e8 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801defe:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801df02:	42bb      	cmp	r3, r7
 801df04:	d902      	bls.n	801df0c <lfs_dir_orphaningcommit+0x354>
                    tag -= LFS_MKTAG(0, 1, 0);
 801df06:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801df0a:	e7b4      	b.n	801de76 <lfs_dir_orphaningcommit+0x2be>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801df0c:	4622      	mov	r2, r4
 801df0e:	e7b2      	b.n	801de76 <lfs_dir_orphaningcommit+0x2be>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801df10:	2300      	movs	r3, #0
 801df12:	e7bd      	b.n	801de90 <lfs_dir_orphaningcommit+0x2d8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801df14:	4b0f      	ldr	r3, [pc, #60]	@ (801df54 <lfs_dir_orphaningcommit+0x39c>)
 801df16:	4a10      	ldr	r2, [pc, #64]	@ (801df58 <lfs_dir_orphaningcommit+0x3a0>)
 801df18:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801df1c:	480a      	ldr	r0, [pc, #40]	@ (801df48 <lfs_dir_orphaningcommit+0x390>)
 801df1e:	f00c f805 	bl	8029f2c <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801df22:	f113 0f02 	cmn.w	r3, #2
 801df26:	f47f af2a 	bne.w	801dd7e <lfs_dir_orphaningcommit+0x1c6>
 801df2a:	e769      	b.n	801de00 <lfs_dir_orphaningcommit+0x248>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801df2c:	f1c8 0100 	rsb	r1, r8, #0
 801df30:	4628      	mov	r0, r5
 801df32:	f7fd f929 	bl	801b188 <lfs_fs_preporphans>
                if (err) {
 801df36:	4607      	mov	r7, r0
 801df38:	2800      	cmp	r0, #0
 801df3a:	f43f af26 	beq.w	801dd8a <lfs_dir_orphaningcommit+0x1d2>
 801df3e:	e027      	b.n	801df90 <lfs_dir_orphaningcommit+0x3d8>
 801df40:	000ffc08 	.word	0x000ffc08
 801df44:	08036c70 	.word	0x08036c70
 801df48:	08039148 	.word	0x08039148
 801df4c:	080394e8 	.word	0x080394e8
 801df50:	08039524 	.word	0x08039524
 801df54:	08039568 	.word	0x08039568
 801df58:	08039ea4 	.word	0x08039ea4
                moveid = lfs_tag_id(lfs->gstate.tag);
 801df5c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801df5e:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801df62:	4b10      	ldr	r3, [pc, #64]	@ (801dfa4 <lfs_dir_orphaningcommit+0x3ec>)
 801df64:	9302      	str	r3, [sp, #8]
 801df66:	9401      	str	r4, [sp, #4]
 801df68:	9b07      	ldr	r3, [sp, #28]
 801df6a:	9300      	str	r3, [sp, #0]
 801df6c:	9b06      	ldr	r3, [sp, #24]
 801df6e:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801df72:	490d      	ldr	r1, [pc, #52]	@ (801dfa8 <lfs_dir_orphaningcommit+0x3f0>)
 801df74:	480d      	ldr	r0, [pc, #52]	@ (801dfac <lfs_dir_orphaningcommit+0x3f4>)
 801df76:	f00c f80d 	bl	8029f94 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801df7a:	2200      	movs	r2, #0
 801df7c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801df80:	4628      	mov	r0, r5
 801df82:	f7fd f8b1 	bl	801b0e8 <lfs_fs_prepmove>
 801df86:	e70a      	b.n	801dd9e <lfs_dir_orphaningcommit+0x1e6>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801df88:	2300      	movs	r3, #0
 801df8a:	e716      	b.n	801ddba <lfs_dir_orphaningcommit+0x202>
    return orphans ? LFS_OK_ORPHANED : 0;
 801df8c:	b926      	cbnz	r6, 801df98 <lfs_dir_orphaningcommit+0x3e0>
 801df8e:	2700      	movs	r7, #0
}
 801df90:	4638      	mov	r0, r7
 801df92:	b023      	add	sp, #140	@ 0x8c
 801df94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801df98:	2703      	movs	r7, #3
 801df9a:	e7f9      	b.n	801df90 <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801df9c:	4627      	mov	r7, r4
 801df9e:	e7f7      	b.n	801df90 <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801dfa0:	4607      	mov	r7, r0
 801dfa2:	e7f5      	b.n	801df90 <lfs_dir_orphaningcommit+0x3d8>
 801dfa4:	08036c70 	.word	0x08036c70
 801dfa8:	08039148 	.word	0x08039148
 801dfac:	08039524 	.word	0x08039524

0801dfb0 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801dfb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfb4:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801dfb6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801dfb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801dfbc:	2b00      	cmp	r3, #0
 801dfbe:	f000 80ea 	beq.w	801e196 <lfs_fs_deorphan+0x1e6>
 801dfc2:	4605      	mov	r5, r0
 801dfc4:	460f      	mov	r7, r1
    int pass = 0;
 801dfc6:	2600      	movs	r6, #0
    while (pass < 2) {
 801dfc8:	2e01      	cmp	r6, #1
 801dfca:	f300 80db 	bgt.w	801e184 <lfs_fs_deorphan+0x1d4>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801dfce:	2220      	movs	r2, #32
 801dfd0:	2100      	movs	r1, #0
 801dfd2:	a806      	add	r0, sp, #24
 801dfd4:	f00e fcfc 	bl	802c9d0 <memset>
 801dfd8:	2301      	movs	r3, #1
 801dfda:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801dfde:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801dfe0:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 801dfe4:	e0bd      	b.n	801e162 <lfs_fs_deorphan+0x1b2>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801dfe6:	aa16      	add	r2, sp, #88	@ 0x58
 801dfe8:	a90c      	add	r1, sp, #48	@ 0x30
 801dfea:	4628      	mov	r0, r5
 801dfec:	f7fe fa4c 	bl	801c488 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801dff0:	1e04      	subs	r4, r0, #0
 801dff2:	db39      	blt.n	801e068 <lfs_fs_deorphan+0xb8>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801dff4:	b916      	cbnz	r6, 801dffc <lfs_fs_deorphan+0x4c>
 801dff6:	f114 0f02 	cmn.w	r4, #2
 801dffa:	d139      	bne.n	801e070 <lfs_fs_deorphan+0xc0>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801dffc:	2e01      	cmp	r6, #1
 801dffe:	f040 80a4 	bne.w	801e14a <lfs_fs_deorphan+0x19a>
 801e002:	f114 0f02 	cmn.w	r4, #2
 801e006:	f040 80a0 	bne.w	801e14a <lfs_fs_deorphan+0x19a>
 801e00a:	2f00      	cmp	r7, #0
 801e00c:	f000 809d 	beq.w	801e14a <lfs_fs_deorphan+0x19a>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801e010:	4b63      	ldr	r3, [pc, #396]	@ (801e1a0 <lfs_fs_deorphan+0x1f0>)
 801e012:	9301      	str	r3, [sp, #4]
 801e014:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e016:	9300      	str	r3, [sp, #0]
 801e018:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e01a:	f241 329c 	movw	r2, #5020	@ 0x139c
 801e01e:	4961      	ldr	r1, [pc, #388]	@ (801e1a4 <lfs_fs_deorphan+0x1f4>)
 801e020:	4861      	ldr	r0, [pc, #388]	@ (801e1a8 <lfs_fs_deorphan+0x1f8>)
 801e022:	f00b ffb7 	bl	8029f94 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801e026:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801e02a:	a90e      	add	r1, sp, #56	@ 0x38
 801e02c:	4628      	mov	r0, r5
 801e02e:	f7fd fab7 	bl	801b5a0 <lfs_dir_getgstate>
                    if (err) {
 801e032:	4604      	mov	r4, r0
 801e034:	2800      	cmp	r0, #0
 801e036:	f040 80af 	bne.w	801e198 <lfs_fs_deorphan+0x1e8>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e03a:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801e03e:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e042:	4b5a      	ldr	r3, [pc, #360]	@ (801e1ac <lfs_fs_deorphan+0x1fc>)
 801e044:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e048:	9322      	str	r3, [sp, #136]	@ 0x88
 801e04a:	ab14      	add	r3, sp, #80	@ 0x50
 801e04c:	9323      	str	r3, [sp, #140]	@ 0x8c
 801e04e:	2301      	movs	r3, #1
 801e050:	aa22      	add	r2, sp, #136	@ 0x88
 801e052:	a906      	add	r1, sp, #24
 801e054:	4628      	mov	r0, r5
 801e056:	f7ff fdaf 	bl	801dbb8 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801e05a:	1e04      	subs	r4, r0, #0
 801e05c:	f2c0 809c 	blt.w	801e198 <lfs_fs_deorphan+0x1e8>
                    if (state == LFS_OK_ORPHANED) {
 801e060:	2c03      	cmp	r4, #3
 801e062:	d17e      	bne.n	801e162 <lfs_fs_deorphan+0x1b2>
                        moreorphans = true;
 801e064:	46b8      	mov	r8, r7
                    continue;
 801e066:	e07c      	b.n	801e162 <lfs_fs_deorphan+0x1b2>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801e068:	f114 0f02 	cmn.w	r4, #2
 801e06c:	d0c2      	beq.n	801dff4 <lfs_fs_deorphan+0x44>
 801e06e:	e093      	b.n	801e198 <lfs_fs_deorphan+0x1e8>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801e070:	ab04      	add	r3, sp, #16
 801e072:	9300      	str	r3, [sp, #0]
 801e074:	4623      	mov	r3, r4
 801e076:	4a4e      	ldr	r2, [pc, #312]	@ (801e1b0 <lfs_fs_deorphan+0x200>)
 801e078:	a916      	add	r1, sp, #88	@ 0x58
 801e07a:	4628      	mov	r0, r5
 801e07c:	f7fd fa82 	bl	801b584 <lfs_dir_get>
                    if (state < 0) {
 801e080:	2800      	cmp	r0, #0
 801e082:	db50      	blt.n	801e126 <lfs_fs_deorphan+0x176>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801e084:	a90c      	add	r1, sp, #48	@ 0x30
 801e086:	a804      	add	r0, sp, #16
 801e088:	f7fc ff12 	bl	801aeb0 <lfs_pair_issync>
 801e08c:	2800      	cmp	r0, #0
 801e08e:	d1b5      	bne.n	801dffc <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 801e090:	4b43      	ldr	r3, [pc, #268]	@ (801e1a0 <lfs_fs_deorphan+0x1f0>)
 801e092:	9303      	str	r3, [sp, #12]
 801e094:	9b05      	ldr	r3, [sp, #20]
 801e096:	9302      	str	r3, [sp, #8]
 801e098:	9b04      	ldr	r3, [sp, #16]
 801e09a:	9301      	str	r3, [sp, #4]
 801e09c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e09e:	9300      	str	r3, [sp, #0]
 801e0a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e0a2:	f241 3271 	movw	r2, #4977	@ 0x1371
 801e0a6:	493f      	ldr	r1, [pc, #252]	@ (801e1a4 <lfs_fs_deorphan+0x1f4>)
 801e0a8:	4842      	ldr	r0, [pc, #264]	@ (801e1b4 <lfs_fs_deorphan+0x204>)
 801e0aa:	f00b ff73 	bl	8029f94 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801e0ae:	a906      	add	r1, sp, #24
 801e0b0:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801e0b4:	f7fc ff32 	bl	801af1c <lfs_gstate_hasmovehere>
 801e0b8:	b9a0      	cbnz	r0, 801e0e4 <lfs_fs_deorphan+0x134>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e0ba:	2300      	movs	r3, #0
 801e0bc:	931e      	str	r3, [sp, #120]	@ 0x78
 801e0be:	2300      	movs	r3, #0
 801e0c0:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e0c2:	4b3d      	ldr	r3, [pc, #244]	@ (801e1b8 <lfs_fs_deorphan+0x208>)
 801e0c4:	9320      	str	r3, [sp, #128]	@ 0x80
 801e0c6:	ab04      	add	r3, sp, #16
 801e0c8:	9321      	str	r3, [sp, #132]	@ 0x84
 801e0ca:	2302      	movs	r3, #2
 801e0cc:	aa1e      	add	r2, sp, #120	@ 0x78
 801e0ce:	a906      	add	r1, sp, #24
 801e0d0:	4628      	mov	r0, r5
 801e0d2:	f7ff fd71 	bl	801dbb8 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801e0d6:	1e04      	subs	r4, r0, #0
 801e0d8:	db5e      	blt.n	801e198 <lfs_fs_deorphan+0x1e8>
                        if (state == LFS_OK_ORPHANED) {
 801e0da:	2c03      	cmp	r4, #3
 801e0dc:	d141      	bne.n	801e162 <lfs_fs_deorphan+0x1b2>
                            moreorphans = true;
 801e0de:	f04f 0801 	mov.w	r8, #1
                        continue;
 801e0e2:	e03e      	b.n	801e162 <lfs_fs_deorphan+0x1b2>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801e0e4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801e0e6:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801e0ea:	4b2d      	ldr	r3, [pc, #180]	@ (801e1a0 <lfs_fs_deorphan+0x1f0>)
 801e0ec:	9302      	str	r3, [sp, #8]
 801e0ee:	9401      	str	r4, [sp, #4]
 801e0f0:	9b07      	ldr	r3, [sp, #28]
 801e0f2:	9300      	str	r3, [sp, #0]
 801e0f4:	9b06      	ldr	r3, [sp, #24]
 801e0f6:	f241 327c 	movw	r2, #4988	@ 0x137c
 801e0fa:	492a      	ldr	r1, [pc, #168]	@ (801e1a4 <lfs_fs_deorphan+0x1f4>)
 801e0fc:	482f      	ldr	r0, [pc, #188]	@ (801e1bc <lfs_fs_deorphan+0x20c>)
 801e0fe:	f00b ff49 	bl	8029f94 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e102:	2200      	movs	r2, #0
 801e104:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e108:	4628      	mov	r0, r5
 801e10a:	f7fc ffed 	bl	801b0e8 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e10e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e112:	429c      	cmp	r4, r3
 801e114:	d005      	beq.n	801e122 <lfs_fs_deorphan+0x172>
 801e116:	02a3      	lsls	r3, r4, #10
 801e118:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e11c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e120:	e7cc      	b.n	801e0bc <lfs_fs_deorphan+0x10c>
 801e122:	2300      	movs	r3, #0
 801e124:	e7ca      	b.n	801e0bc <lfs_fs_deorphan+0x10c>
                        return state;
 801e126:	4604      	mov	r4, r0
 801e128:	e036      	b.n	801e198 <lfs_fs_deorphan+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e12a:	2301      	movs	r3, #1
 801e12c:	e000      	b.n	801e130 <lfs_fs_deorphan+0x180>
 801e12e:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 801e130:	bb0b      	cbnz	r3, 801e176 <lfs_fs_deorphan+0x1c6>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801e132:	aa0c      	add	r2, sp, #48	@ 0x30
 801e134:	a90e      	add	r1, sp, #56	@ 0x38
 801e136:	4628      	mov	r0, r5
 801e138:	f7fe fa12 	bl	801c560 <lfs_dir_fetch>
            if (err) {
 801e13c:	4604      	mov	r4, r0
 801e13e:	bb58      	cbnz	r0, 801e198 <lfs_fs_deorphan+0x1e8>
            if (!pdir.split) {
 801e140:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801e144:	2b00      	cmp	r3, #0
 801e146:	f43f af4e 	beq.w	801dfe6 <lfs_fs_deorphan+0x36>
            pdir = dir;
 801e14a:	f10d 0c18 	add.w	ip, sp, #24
 801e14e:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801e152:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e156:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e15a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801e15e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e162:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e164:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e168:	d0e1      	beq.n	801e12e <lfs_fs_deorphan+0x17e>
 801e16a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e16c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e170:	d0db      	beq.n	801e12a <lfs_fs_deorphan+0x17a>
 801e172:	2300      	movs	r3, #0
 801e174:	e7dc      	b.n	801e130 <lfs_fs_deorphan+0x180>
        pass = moreorphans ? 0 : pass+1;
 801e176:	f1b8 0f00 	cmp.w	r8, #0
 801e17a:	d101      	bne.n	801e180 <lfs_fs_deorphan+0x1d0>
 801e17c:	3601      	adds	r6, #1
 801e17e:	e723      	b.n	801dfc8 <lfs_fs_deorphan+0x18>
 801e180:	2600      	movs	r6, #0
 801e182:	e721      	b.n	801dfc8 <lfs_fs_deorphan+0x18>
    return lfs_tag_size(a->tag) & 0x1ff;
 801e184:	f895 1030 	ldrb.w	r1, [r5, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801e188:	4249      	negs	r1, r1
 801e18a:	b249      	sxtb	r1, r1
 801e18c:	4628      	mov	r0, r5
 801e18e:	f7fc fffb 	bl	801b188 <lfs_fs_preporphans>
 801e192:	4604      	mov	r4, r0
 801e194:	e000      	b.n	801e198 <lfs_fs_deorphan+0x1e8>
        return 0;
 801e196:	2400      	movs	r4, #0
}
 801e198:	4620      	mov	r0, r4
 801e19a:	b024      	add	sp, #144	@ 0x90
 801e19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1a0:	08036c70 	.word	0x08036c70
 801e1a4:	08039148 	.word	0x08039148
 801e1a8:	0803961c 	.word	0x0803961c
 801e1ac:	000ffc08 	.word	0x000ffc08
 801e1b0:	7ffffc00 	.word	0x7ffffc00
 801e1b4:	08039590 	.word	0x08039590
 801e1b8:	600ffc08 	.word	0x600ffc08
 801e1bc:	080395d4 	.word	0x080395d4

0801e1c0 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801e1c0:	b510      	push	{r4, lr}
 801e1c2:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801e1c4:	f7ff fcf8 	bl	801dbb8 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801e1c8:	2800      	cmp	r0, #0
 801e1ca:	db00      	blt.n	801e1ce <lfs_dir_commit+0xe>
    if (orphans) {
 801e1cc:	b900      	cbnz	r0, 801e1d0 <lfs_dir_commit+0x10>
}
 801e1ce:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801e1d0:	2100      	movs	r1, #0
 801e1d2:	4620      	mov	r0, r4
 801e1d4:	f7ff feec 	bl	801dfb0 <lfs_fs_deorphan>
        if (err) {
 801e1d8:	e7f9      	b.n	801e1ce <lfs_dir_commit+0xe>
	...

0801e1dc <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801e1dc:	b530      	push	{r4, r5, lr}
 801e1de:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801e1e0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801e1e2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801e1e6:	d103      	bne.n	801e1f0 <lfs_fs_desuperblock+0x14>
        return 0;
 801e1e8:	2500      	movs	r5, #0
}
 801e1ea:	4628      	mov	r0, r5
 801e1ec:	b013      	add	sp, #76	@ 0x4c
 801e1ee:	bd30      	pop	{r4, r5, pc}
 801e1f0:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801e1f2:	4b1a      	ldr	r3, [pc, #104]	@ (801e25c <lfs_fs_desuperblock+0x80>)
 801e1f4:	9301      	str	r3, [sp, #4]
 801e1f6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801e1f8:	9300      	str	r3, [sp, #0]
 801e1fa:	6a03      	ldr	r3, [r0, #32]
 801e1fc:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801e200:	4917      	ldr	r1, [pc, #92]	@ (801e260 <lfs_fs_desuperblock+0x84>)
 801e202:	4818      	ldr	r0, [pc, #96]	@ (801e264 <lfs_fs_desuperblock+0x88>)
 801e204:	f00b fec6 	bl	8029f94 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801e208:	f104 0220 	add.w	r2, r4, #32
 801e20c:	a908      	add	r1, sp, #32
 801e20e:	4620      	mov	r0, r4
 801e210:	f7fe f9a6 	bl	801c560 <lfs_dir_fetch>
    if (err) {
 801e214:	4605      	mov	r5, r0
 801e216:	2800      	cmp	r0, #0
 801e218:	d1e7      	bne.n	801e1ea <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801e21a:	4620      	mov	r0, r4
 801e21c:	f7fc feb6 	bl	801af8c <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801e220:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801e222:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801e226:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801e228:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801e22a:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801e22c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801e22e:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801e230:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801e232:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801e234:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801e236:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801e238:	4b0b      	ldr	r3, [pc, #44]	@ (801e268 <lfs_fs_desuperblock+0x8c>)
 801e23a:	9310      	str	r3, [sp, #64]	@ 0x40
 801e23c:	ab02      	add	r3, sp, #8
 801e23e:	9311      	str	r3, [sp, #68]	@ 0x44
 801e240:	2301      	movs	r3, #1
 801e242:	aa10      	add	r2, sp, #64	@ 0x40
 801e244:	a908      	add	r1, sp, #32
 801e246:	4620      	mov	r0, r4
 801e248:	f7ff ffba 	bl	801e1c0 <lfs_dir_commit>
    if (err) {
 801e24c:	4605      	mov	r5, r0
 801e24e:	2800      	cmp	r0, #0
 801e250:	d1cb      	bne.n	801e1ea <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801e252:	2100      	movs	r1, #0
 801e254:	4620      	mov	r0, r4
 801e256:	f7fc ff40 	bl	801b0da <lfs_fs_prepsuperblock>
    return 0;
 801e25a:	e7c6      	b.n	801e1ea <lfs_fs_desuperblock+0xe>
 801e25c:	08036c70 	.word	0x08036c70
 801e260:	08039148 	.word	0x08039148
 801e264:	0803964c 	.word	0x0803964c
 801e268:	20100018 	.word	0x20100018

0801e26c <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801e26c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801e26e:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801e270:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801e274:	d101      	bne.n	801e27a <lfs_fs_demove+0xe>
        return 0;
 801e276:	2000      	movs	r0, #0
}
 801e278:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801e27a:	b530      	push	{r4, r5, lr}
 801e27c:	b08f      	sub	sp, #60	@ 0x3c
 801e27e:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801e280:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801e284:	4a1d      	ldr	r2, [pc, #116]	@ (801e2fc <lfs_fs_demove+0x90>)
 801e286:	9202      	str	r2, [sp, #8]
 801e288:	9301      	str	r3, [sp, #4]
 801e28a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801e28c:	9300      	str	r3, [sp, #0]
 801e28e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801e290:	f241 3224 	movw	r2, #4900	@ 0x1324
 801e294:	491a      	ldr	r1, [pc, #104]	@ (801e300 <lfs_fs_demove+0x94>)
 801e296:	481b      	ldr	r0, [pc, #108]	@ (801e304 <lfs_fs_demove+0x98>)
 801e298:	f00b fe7c 	bl	8029f94 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e29c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801e29e:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e2a2:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801e2a6:	4293      	cmp	r3, r2
 801e2a8:	d108      	bne.n	801e2bc <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801e2aa:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801e2ae:	a904      	add	r1, sp, #16
 801e2b0:	4620      	mov	r0, r4
 801e2b2:	f7fe f955 	bl	801c560 <lfs_dir_fetch>
    if (err) {
 801e2b6:	b140      	cbz	r0, 801e2ca <lfs_fs_demove+0x5e>
}
 801e2b8:	b00f      	add	sp, #60	@ 0x3c
 801e2ba:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e2bc:	4b12      	ldr	r3, [pc, #72]	@ (801e308 <lfs_fs_demove+0x9c>)
 801e2be:	4a13      	ldr	r2, [pc, #76]	@ (801e30c <lfs_fs_demove+0xa0>)
 801e2c0:	f241 312b 	movw	r1, #4907	@ 0x132b
 801e2c4:	480e      	ldr	r0, [pc, #56]	@ (801e300 <lfs_fs_demove+0x94>)
 801e2c6:	f00b fe31 	bl	8029f2c <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801e2ca:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801e2cc:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e2d0:	2200      	movs	r2, #0
 801e2d2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e2d6:	4620      	mov	r0, r4
 801e2d8:	f7fc ff06 	bl	801b0e8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801e2dc:	02ab      	lsls	r3, r5, #10
 801e2de:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e2e2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e2e6:	930c      	str	r3, [sp, #48]	@ 0x30
 801e2e8:	2300      	movs	r3, #0
 801e2ea:	930d      	str	r3, [sp, #52]	@ 0x34
 801e2ec:	2301      	movs	r3, #1
 801e2ee:	aa0c      	add	r2, sp, #48	@ 0x30
 801e2f0:	a904      	add	r1, sp, #16
 801e2f2:	4620      	mov	r0, r4
 801e2f4:	f7ff ff64 	bl	801e1c0 <lfs_dir_commit>
    if (err) {
 801e2f8:	e7de      	b.n	801e2b8 <lfs_fs_demove+0x4c>
 801e2fa:	bf00      	nop
 801e2fc:	08036c70 	.word	0x08036c70
 801e300:	08039148 	.word	0x08039148
 801e304:	08039680 	.word	0x08039680
 801e308:	080396b4 	.word	0x080396b4
 801e30c:	08039e08 	.word	0x08039e08

0801e310 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801e310:	b510      	push	{r4, lr}
 801e312:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801e314:	f7ff ff62 	bl	801e1dc <lfs_fs_desuperblock>
    if (err) {
 801e318:	4603      	mov	r3, r0
 801e31a:	b108      	cbz	r0, 801e320 <lfs_fs_forceconsistency+0x10>
}
 801e31c:	4618      	mov	r0, r3
 801e31e:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801e320:	4620      	mov	r0, r4
 801e322:	f7ff ffa3 	bl	801e26c <lfs_fs_demove>
    if (err) {
 801e326:	4603      	mov	r3, r0
 801e328:	2800      	cmp	r0, #0
 801e32a:	d1f7      	bne.n	801e31c <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801e32c:	2101      	movs	r1, #1
 801e32e:	4620      	mov	r0, r4
 801e330:	f7ff fe3e 	bl	801dfb0 <lfs_fs_deorphan>
 801e334:	4603      	mov	r3, r0
    if (err) {
 801e336:	e7f1      	b.n	801e31c <lfs_fs_forceconsistency+0xc>

0801e338 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801e338:	b570      	push	{r4, r5, r6, lr}
 801e33a:	b082      	sub	sp, #8
 801e33c:	4605      	mov	r5, r0
 801e33e:	460e      	mov	r6, r1
 801e340:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801e342:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801e346:	4621      	mov	r1, r4
 801e348:	f7fd f92a 	bl	801b5a0 <lfs_dir_getgstate>
    if (err) {
 801e34c:	b108      	cbz	r0, 801e352 <lfs_dir_drop+0x1a>
}
 801e34e:	b002      	add	sp, #8
 801e350:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 801e352:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801e356:	7de2      	ldrb	r2, [r4, #23]
 801e358:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e35c:	4b05      	ldr	r3, [pc, #20]	@ (801e374 <lfs_dir_drop+0x3c>)
 801e35e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e362:	9300      	str	r3, [sp, #0]
 801e364:	9101      	str	r1, [sp, #4]
 801e366:	2301      	movs	r3, #1
 801e368:	466a      	mov	r2, sp
 801e36a:	4631      	mov	r1, r6
 801e36c:	4628      	mov	r0, r5
 801e36e:	f7ff ff27 	bl	801e1c0 <lfs_dir_commit>
    if (err) {
 801e372:	e7ec      	b.n	801e34e <lfs_dir_drop+0x16>
 801e374:	000ffc08 	.word	0x000ffc08

0801e378 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801e378:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801e37a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801e37e:	d001      	beq.n	801e384 <lfs_file_sync_+0xc>
        return 0;
 801e380:	2000      	movs	r0, #0
}
 801e382:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801e384:	b530      	push	{r4, r5, lr}
 801e386:	b087      	sub	sp, #28
 801e388:	4605      	mov	r5, r0
 801e38a:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801e38c:	f7fe fcae 	bl	801ccec <lfs_file_flush>
    if (err) {
 801e390:	2800      	cmp	r0, #0
 801e392:	d136      	bne.n	801e402 <lfs_file_sync_+0x8a>
    if ((file->flags & LFS_F_DIRTY) &&
 801e394:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e396:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801e39a:	d036      	beq.n	801e40a <lfs_file_sync_+0x92>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e39c:	68a2      	ldr	r2, [r4, #8]
 801e39e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801e3a2:	d036      	beq.n	801e412 <lfs_file_sync_+0x9a>
 801e3a4:	68e2      	ldr	r2, [r4, #12]
 801e3a6:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801e3aa:	d030      	beq.n	801e40e <lfs_file_sync_+0x96>
 801e3ac:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 801e3ae:	f012 0f01 	tst.w	r2, #1
 801e3b2:	d12a      	bne.n	801e40a <lfs_file_sync_+0x92>
        if (!(file->flags & LFS_F_INLINE)) {
 801e3b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e3b8:	d02d      	beq.n	801e416 <lfs_file_sync_+0x9e>
        if (file->flags & LFS_F_INLINE) {
 801e3ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e3bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e3c0:	d033      	beq.n	801e42a <lfs_file_sync_+0xb2>
            buffer = file->cache.buffer;
 801e3c2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801e3c4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801e3c6:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801e3ca:	88a3      	ldrh	r3, [r4, #4]
 801e3cc:	029b      	lsls	r3, r3, #10
 801e3ce:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801e3d2:	4302      	orrs	r2, r0
 801e3d4:	9202      	str	r2, [sp, #8]
 801e3d6:	9103      	str	r1, [sp, #12]
 801e3d8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801e3da:	6891      	ldr	r1, [r2, #8]
 801e3dc:	430b      	orrs	r3, r1
 801e3de:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801e3e2:	9304      	str	r3, [sp, #16]
 801e3e4:	6853      	ldr	r3, [r2, #4]
 801e3e6:	9305      	str	r3, [sp, #20]
 801e3e8:	2302      	movs	r3, #2
 801e3ea:	aa02      	add	r2, sp, #8
 801e3ec:	f104 0108 	add.w	r1, r4, #8
 801e3f0:	4628      	mov	r0, r5
 801e3f2:	f7ff fee5 	bl	801e1c0 <lfs_dir_commit>
        if (err) {
 801e3f6:	bb20      	cbnz	r0, 801e442 <lfs_file_sync_+0xca>
        file->flags &= ~LFS_F_DIRTY;
 801e3f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e3fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e3fe:	6323      	str	r3, [r4, #48]	@ 0x30
 801e400:	e003      	b.n	801e40a <lfs_file_sync_+0x92>
        file->flags |= LFS_F_ERRED;
 801e402:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e404:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e408:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801e40a:	b007      	add	sp, #28
 801e40c:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e40e:	2201      	movs	r2, #1
 801e410:	e7cd      	b.n	801e3ae <lfs_file_sync_+0x36>
 801e412:	2201      	movs	r2, #1
 801e414:	e7cb      	b.n	801e3ae <lfs_file_sync_+0x36>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801e416:	2300      	movs	r3, #0
 801e418:	462a      	mov	r2, r5
 801e41a:	f105 0110 	add.w	r1, r5, #16
 801e41e:	4628      	mov	r0, r5
 801e420:	f7fd fc82 	bl	801bd28 <lfs_bd_sync>
            if (err) {
 801e424:	2800      	cmp	r0, #0
 801e426:	d0c8      	beq.n	801e3ba <lfs_file_sync_+0x42>
 801e428:	e7ef      	b.n	801e40a <lfs_file_sync_+0x92>
            ctz = file->ctz;
 801e42a:	466b      	mov	r3, sp
 801e42c:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801e430:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e434:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801e438:	2008      	movs	r0, #8
            buffer = &ctz;
 801e43a:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801e43c:	f240 2202 	movw	r2, #514	@ 0x202
 801e440:	e7c3      	b.n	801e3ca <lfs_file_sync_+0x52>
            file->flags |= LFS_F_ERRED;
 801e442:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e444:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e448:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801e44a:	e7de      	b.n	801e40a <lfs_file_sync_+0x92>

0801e44c <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801e44c:	b510      	push	{r4, lr}
 801e44e:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801e450:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801e452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e454:	b13b      	cbz	r3, 801e466 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801e456:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e45a:	b143      	cbz	r3, 801e46e <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801e45c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e45e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e460:	b14b      	cbz	r3, 801e476 <lfs_deinit+0x2a>
}
 801e462:	2000      	movs	r0, #0
 801e464:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801e466:	68c0      	ldr	r0, [r0, #12]
 801e468:	f7fc fb00 	bl	801aa6c <vPortFree>
#else
    (void)p;
#endif
}
 801e46c:	e7f3      	b.n	801e456 <lfs_deinit+0xa>
    free(p);
 801e46e:	69e0      	ldr	r0, [r4, #28]
 801e470:	f7fc fafc 	bl	801aa6c <vPortFree>
}
 801e474:	e7f2      	b.n	801e45c <lfs_deinit+0x10>
    free(p);
 801e476:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801e478:	f7fc faf8 	bl	801aa6c <vPortFree>
}
 801e47c:	e7f1      	b.n	801e462 <lfs_deinit+0x16>
	...

0801e480 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801e480:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801e482:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801e484:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801e486:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801e488:	69cb      	ldr	r3, [r1, #28]
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	f000 80b1 	beq.w	801e5f2 <lfs_init+0x172>
 801e490:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801e492:	6a0a      	ldr	r2, [r1, #32]
 801e494:	2a00      	cmp	r2, #0
 801e496:	f000 80b3 	beq.w	801e600 <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801e49a:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801e49c:	2800      	cmp	r0, #0
 801e49e:	f000 80b6 	beq.w	801e60e <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801e4a2:	fbb0 fcf3 	udiv	ip, r0, r3
 801e4a6:	fb03 031c 	mls	r3, r3, ip, r0
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	f040 80b6 	bne.w	801e61c <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801e4b0:	fbb0 f3f2 	udiv	r3, r0, r2
 801e4b4:	fb02 0313 	mls	r3, r2, r3, r0
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	f040 80b6 	bne.w	801e62a <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801e4be:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801e4c0:	fbb2 f3f0 	udiv	r3, r2, r0
 801e4c4:	fb00 2313 	mls	r3, r0, r3, r2
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	f040 80b5 	bne.w	801e638 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801e4ce:	2a7f      	cmp	r2, #127	@ 0x7f
 801e4d0:	f240 80b9 	bls.w	801e646 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801e4d4:	f1a2 0c08 	sub.w	ip, r2, #8
 801e4d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e4dc:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801e4e0:	3b01      	subs	r3, #1
 801e4e2:	fab3 f383 	clz	r3, r3
 801e4e6:	f1c3 0320 	rsb	r3, r3, #32
 801e4ea:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801e4ee:	f0c0 80b1 	bcc.w	801e654 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801e4f2:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	f000 80b4 	beq.w	801e662 <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801e4fa:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801e4fc:	b11b      	cbz	r3, 801e506 <lfs_init+0x86>
 801e4fe:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801e502:	f0c0 80b5 	bcc.w	801e670 <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801e506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e50a:	d002      	beq.n	801e512 <lfs_init+0x92>
 801e50c:	429a      	cmp	r2, r3
 801e50e:	f0c0 80b6 	bcc.w	801e67e <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801e512:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801e514:	2b00      	cmp	r3, #0
 801e516:	f000 80b9 	beq.w	801e68c <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801e51a:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801e51c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801e51e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801e520:	2b00      	cmp	r3, #0
 801e522:	f000 80bf 	beq.w	801e6a4 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801e526:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801e528:	4621      	mov	r1, r4
 801e52a:	4620      	mov	r0, r4
 801e52c:	f7fc fe5c 	bl	801b1e8 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801e530:	f104 0110 	add.w	r1, r4, #16
 801e534:	4620      	mov	r0, r4
 801e536:	f7fc fe57 	bl	801b1e8 <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801e53a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e53c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801e53e:	2800      	cmp	r0, #0
 801e540:	f000 80b8 	beq.w	801e6b4 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801e544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e546:	2b00      	cmp	r3, #0
 801e548:	f000 80bb 	beq.w	801e6c2 <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801e54c:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801e54e:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801e550:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801e552:	2bff      	cmp	r3, #255	@ 0xff
 801e554:	f200 80bc 	bhi.w	801e6d0 <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801e558:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801e55a:	b90b      	cbnz	r3, 801e560 <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801e55c:	23ff      	movs	r3, #255	@ 0xff
 801e55e:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801e560:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801e562:	2b00      	cmp	r3, #0
 801e564:	f2c0 80bb 	blt.w	801e6de <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801e568:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801e56a:	b913      	cbnz	r3, 801e572 <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801e56c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e570:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801e572:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801e574:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801e578:	428b      	cmp	r3, r1
 801e57a:	f200 80b7 	bhi.w	801e6ec <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801e57e:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801e580:	b913      	cbnz	r3, 801e588 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801e582:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e586:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801e588:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801e58a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801e58c:	4288      	cmp	r0, r1
 801e58e:	f200 80b4 	bhi.w	801e6fa <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e592:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801e594:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e598:	d003      	beq.n	801e5a2 <lfs_init+0x122>
 801e59a:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801e59c:	42ab      	cmp	r3, r5
 801e59e:	f200 80b3 	bhi.w	801e708 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e5a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e5a6:	d003      	beq.n	801e5b0 <lfs_init+0x130>
 801e5a8:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801e5aa:	42ab      	cmp	r3, r5
 801e5ac:	f200 80b3 	bhi.w	801e716 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e5b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e5b4:	d006      	beq.n	801e5c4 <lfs_init+0x144>
 801e5b6:	2800      	cmp	r0, #0
 801e5b8:	f000 80b4 	beq.w	801e724 <lfs_init+0x2a4>
 801e5bc:	08c1      	lsrs	r1, r0, #3
 801e5be:	428b      	cmp	r3, r1
 801e5c0:	f200 80b2 	bhi.w	801e728 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801e5c4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801e5c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e5ca:	f000 80b4 	beq.w	801e736 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	f040 80b3 	bne.w	801e73a <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801e5d4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801e5d6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801e5d8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	f000 80be 	beq.w	801e75c <lfs_init+0x2dc>
 801e5e0:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801e5e2:	4283      	cmp	r3, r0
 801e5e4:	bf28      	it	cs
 801e5e6:	4603      	movcs	r3, r0
 801e5e8:	428b      	cmp	r3, r1
 801e5ea:	bf28      	it	cs
 801e5ec:	460b      	movcs	r3, r1
 801e5ee:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801e5f0:	e0a3      	b.n	801e73a <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801e5f2:	4b5c      	ldr	r3, [pc, #368]	@ (801e764 <lfs_init+0x2e4>)
 801e5f4:	4a5c      	ldr	r2, [pc, #368]	@ (801e768 <lfs_init+0x2e8>)
 801e5f6:	f241 0152 	movw	r1, #4178	@ 0x1052
 801e5fa:	485c      	ldr	r0, [pc, #368]	@ (801e76c <lfs_init+0x2ec>)
 801e5fc:	f00b fc96 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801e600:	4b5b      	ldr	r3, [pc, #364]	@ (801e770 <lfs_init+0x2f0>)
 801e602:	4a59      	ldr	r2, [pc, #356]	@ (801e768 <lfs_init+0x2e8>)
 801e604:	f241 0153 	movw	r1, #4179	@ 0x1053
 801e608:	4858      	ldr	r0, [pc, #352]	@ (801e76c <lfs_init+0x2ec>)
 801e60a:	f00b fc8f 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801e60e:	4b59      	ldr	r3, [pc, #356]	@ (801e774 <lfs_init+0x2f4>)
 801e610:	4a55      	ldr	r2, [pc, #340]	@ (801e768 <lfs_init+0x2e8>)
 801e612:	f241 0154 	movw	r1, #4180	@ 0x1054
 801e616:	4855      	ldr	r0, [pc, #340]	@ (801e76c <lfs_init+0x2ec>)
 801e618:	f00b fc88 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801e61c:	4b56      	ldr	r3, [pc, #344]	@ (801e778 <lfs_init+0x2f8>)
 801e61e:	4a52      	ldr	r2, [pc, #328]	@ (801e768 <lfs_init+0x2e8>)
 801e620:	f241 0158 	movw	r1, #4184	@ 0x1058
 801e624:	4851      	ldr	r0, [pc, #324]	@ (801e76c <lfs_init+0x2ec>)
 801e626:	f00b fc81 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801e62a:	4b54      	ldr	r3, [pc, #336]	@ (801e77c <lfs_init+0x2fc>)
 801e62c:	4a4e      	ldr	r2, [pc, #312]	@ (801e768 <lfs_init+0x2e8>)
 801e62e:	f241 0159 	movw	r1, #4185	@ 0x1059
 801e632:	484e      	ldr	r0, [pc, #312]	@ (801e76c <lfs_init+0x2ec>)
 801e634:	f00b fc7a 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801e638:	4b51      	ldr	r3, [pc, #324]	@ (801e780 <lfs_init+0x300>)
 801e63a:	4a4b      	ldr	r2, [pc, #300]	@ (801e768 <lfs_init+0x2e8>)
 801e63c:	f241 015a 	movw	r1, #4186	@ 0x105a
 801e640:	484a      	ldr	r0, [pc, #296]	@ (801e76c <lfs_init+0x2ec>)
 801e642:	f00b fc73 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801e646:	4b4f      	ldr	r3, [pc, #316]	@ (801e784 <lfs_init+0x304>)
 801e648:	4a47      	ldr	r2, [pc, #284]	@ (801e768 <lfs_init+0x2e8>)
 801e64a:	f241 015d 	movw	r1, #4189	@ 0x105d
 801e64e:	4847      	ldr	r0, [pc, #284]	@ (801e76c <lfs_init+0x2ec>)
 801e650:	f00b fc6c 	bl	8029f2c <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801e654:	4b4c      	ldr	r3, [pc, #304]	@ (801e788 <lfs_init+0x308>)
 801e656:	4a44      	ldr	r2, [pc, #272]	@ (801e768 <lfs_init+0x2e8>)
 801e658:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801e65c:	4843      	ldr	r0, [pc, #268]	@ (801e76c <lfs_init+0x2ec>)
 801e65e:	f00b fc65 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801e662:	4b4a      	ldr	r3, [pc, #296]	@ (801e78c <lfs_init+0x30c>)
 801e664:	4a40      	ldr	r2, [pc, #256]	@ (801e768 <lfs_init+0x2e8>)
 801e666:	f241 0169 	movw	r1, #4201	@ 0x1069
 801e66a:	4840      	ldr	r0, [pc, #256]	@ (801e76c <lfs_init+0x2ec>)
 801e66c:	f00b fc5e 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801e670:	4b47      	ldr	r3, [pc, #284]	@ (801e790 <lfs_init+0x310>)
 801e672:	4a3d      	ldr	r2, [pc, #244]	@ (801e768 <lfs_init+0x2e8>)
 801e674:	f241 016f 	movw	r1, #4207	@ 0x106f
 801e678:	483c      	ldr	r0, [pc, #240]	@ (801e76c <lfs_init+0x2ec>)
 801e67a:	f00b fc57 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801e67e:	4b45      	ldr	r3, [pc, #276]	@ (801e794 <lfs_init+0x314>)
 801e680:	4a39      	ldr	r2, [pc, #228]	@ (801e768 <lfs_init+0x2e8>)
 801e682:	f241 0171 	movw	r1, #4209	@ 0x1071
 801e686:	4839      	ldr	r0, [pc, #228]	@ (801e76c <lfs_init+0x2ec>)
 801e688:	f00b fc50 	bl	8029f2c <__assert_func>
    return malloc(size);
 801e68c:	f7fc f96c 	bl	801a968 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801e690:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801e692:	2800      	cmp	r0, #0
 801e694:	f47f af42 	bne.w	801e51c <lfs_init+0x9c>
    lfs_deinit(lfs);
 801e698:	4620      	mov	r0, r4
 801e69a:	f7ff fed7 	bl	801e44c <lfs_deinit>
    return err;
 801e69e:	f06f 000b 	mvn.w	r0, #11
 801e6a2:	e05a      	b.n	801e75a <lfs_init+0x2da>
 801e6a4:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801e6a6:	f7fc f95f 	bl	801a968 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801e6aa:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801e6ac:	2800      	cmp	r0, #0
 801e6ae:	f47f af3b 	bne.w	801e528 <lfs_init+0xa8>
 801e6b2:	e7f1      	b.n	801e698 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801e6b4:	4b38      	ldr	r3, [pc, #224]	@ (801e798 <lfs_init+0x318>)
 801e6b6:	4a2c      	ldr	r2, [pc, #176]	@ (801e768 <lfs_init+0x2e8>)
 801e6b8:	f241 0190 	movw	r1, #4240	@ 0x1090
 801e6bc:	482b      	ldr	r0, [pc, #172]	@ (801e76c <lfs_init+0x2ec>)
 801e6be:	f00b fc35 	bl	8029f2c <__assert_func>
 801e6c2:	f7fc f951 	bl	801a968 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801e6c6:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801e6c8:	2800      	cmp	r0, #0
 801e6ca:	f47f af40 	bne.w	801e54e <lfs_init+0xce>
 801e6ce:	e7e3      	b.n	801e698 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801e6d0:	4b32      	ldr	r3, [pc, #200]	@ (801e79c <lfs_init+0x31c>)
 801e6d2:	4a25      	ldr	r2, [pc, #148]	@ (801e768 <lfs_init+0x2e8>)
 801e6d4:	f241 019c 	movw	r1, #4252	@ 0x109c
 801e6d8:	4824      	ldr	r0, [pc, #144]	@ (801e76c <lfs_init+0x2ec>)
 801e6da:	f00b fc27 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801e6de:	4b30      	ldr	r3, [pc, #192]	@ (801e7a0 <lfs_init+0x320>)
 801e6e0:	4a21      	ldr	r2, [pc, #132]	@ (801e768 <lfs_init+0x2e8>)
 801e6e2:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801e6e6:	4821      	ldr	r0, [pc, #132]	@ (801e76c <lfs_init+0x2ec>)
 801e6e8:	f00b fc20 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801e6ec:	4b2d      	ldr	r3, [pc, #180]	@ (801e7a4 <lfs_init+0x324>)
 801e6ee:	4a1e      	ldr	r2, [pc, #120]	@ (801e768 <lfs_init+0x2e8>)
 801e6f0:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801e6f4:	481d      	ldr	r0, [pc, #116]	@ (801e76c <lfs_init+0x2ec>)
 801e6f6:	f00b fc19 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801e6fa:	4b2b      	ldr	r3, [pc, #172]	@ (801e7a8 <lfs_init+0x328>)
 801e6fc:	4a1a      	ldr	r2, [pc, #104]	@ (801e768 <lfs_init+0x2e8>)
 801e6fe:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801e702:	481a      	ldr	r0, [pc, #104]	@ (801e76c <lfs_init+0x2ec>)
 801e704:	f00b fc12 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e708:	4b28      	ldr	r3, [pc, #160]	@ (801e7ac <lfs_init+0x32c>)
 801e70a:	4a17      	ldr	r2, [pc, #92]	@ (801e768 <lfs_init+0x2e8>)
 801e70c:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801e710:	4816      	ldr	r0, [pc, #88]	@ (801e76c <lfs_init+0x2ec>)
 801e712:	f00b fc0b 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e716:	4b26      	ldr	r3, [pc, #152]	@ (801e7b0 <lfs_init+0x330>)
 801e718:	4a13      	ldr	r2, [pc, #76]	@ (801e768 <lfs_init+0x2e8>)
 801e71a:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801e71e:	4813      	ldr	r0, [pc, #76]	@ (801e76c <lfs_init+0x2ec>)
 801e720:	f00b fc04 	bl	8029f2c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e724:	08c9      	lsrs	r1, r1, #3
 801e726:	e74a      	b.n	801e5be <lfs_init+0x13e>
 801e728:	4b22      	ldr	r3, [pc, #136]	@ (801e7b4 <lfs_init+0x334>)
 801e72a:	4a0f      	ldr	r2, [pc, #60]	@ (801e768 <lfs_init+0x2e8>)
 801e72c:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801e730:	480e      	ldr	r0, [pc, #56]	@ (801e76c <lfs_init+0x2ec>)
 801e732:	f00b fbfb 	bl	8029f2c <__assert_func>
        lfs->inline_max = 0;
 801e736:	2300      	movs	r3, #0
 801e738:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801e73a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e73e:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801e740:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801e742:	2000      	movs	r0, #0
 801e744:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801e746:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801e748:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801e74a:	6420      	str	r0, [r4, #64]	@ 0x40
 801e74c:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801e74e:	6320      	str	r0, [r4, #48]	@ 0x30
 801e750:	6360      	str	r0, [r4, #52]	@ 0x34
 801e752:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801e754:	64a0      	str	r0, [r4, #72]	@ 0x48
 801e756:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801e758:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801e75a:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801e75c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801e75e:	08db      	lsrs	r3, r3, #3
 801e760:	e73f      	b.n	801e5e2 <lfs_init+0x162>
 801e762:	bf00      	nop
 801e764:	080396e8 	.word	0x080396e8
 801e768:	08039ec8 	.word	0x08039ec8
 801e76c:	08039148 	.word	0x08039148
 801e770:	08039704 	.word	0x08039704
 801e774:	08039720 	.word	0x08039720
 801e778:	0803973c 	.word	0x0803973c
 801e77c:	0803976c 	.word	0x0803976c
 801e780:	0803979c 	.word	0x0803979c
 801e784:	080397d0 	.word	0x080397d0
 801e788:	080397ec 	.word	0x080397ec
 801e78c:	08039838 	.word	0x08039838
 801e790:	08039854 	.word	0x08039854
 801e794:	080398a8 	.word	0x080398a8
 801e798:	08039908 	.word	0x08039908
 801e79c:	08039928 	.word	0x08039928
 801e7a0:	08039944 	.word	0x08039944
 801e7a4:	08039968 	.word	0x08039968
 801e7a8:	08039984 	.word	0x08039984
 801e7ac:	080399b4 	.word	0x080399b4
 801e7b0:	08039a0c 	.word	0x08039a0c
 801e7b4:	08039a5c 	.word	0x08039a5c

0801e7b8 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801e7b8:	b570      	push	{r4, r5, r6, lr}
 801e7ba:	b096      	sub	sp, #88	@ 0x58
 801e7bc:	4604      	mov	r4, r0
 801e7be:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801e7c0:	f7ff fe5e 	bl	801e480 <lfs_init>
        if (err) {
 801e7c4:	4606      	mov	r6, r0
 801e7c6:	b9f0      	cbnz	r0, 801e806 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801e7c8:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801e7ca:	b1fb      	cbz	r3, 801e80c <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801e7cc:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e7ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e7d0:	2100      	movs	r1, #0
 801e7d2:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801e7d4:	f00e f8fc 	bl	802c9d0 <memset>
        lfs->lookahead.start = 0;
 801e7d8:	2200      	movs	r2, #0
 801e7da:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801e7dc:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e7de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e7e0:	00db      	lsls	r3, r3, #3
 801e7e2:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801e7e4:	428b      	cmp	r3, r1
 801e7e6:	bf28      	it	cs
 801e7e8:	460b      	movcs	r3, r1
 801e7ea:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801e7ec:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801e7ee:	4620      	mov	r0, r4
 801e7f0:	f7fc fbda 	bl	801afa8 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801e7f4:	a906      	add	r1, sp, #24
 801e7f6:	4620      	mov	r0, r4
 801e7f8:	f7fe f820 	bl	801c83c <lfs_dir_alloc>
        if (err) {
 801e7fc:	4606      	mov	r6, r0
 801e7fe:	b160      	cbz	r0, 801e81a <lfs_format_+0x62>
    lfs_deinit(lfs);
 801e800:	4620      	mov	r0, r4
 801e802:	f7ff fe23 	bl	801e44c <lfs_deinit>
}
 801e806:	4630      	mov	r0, r6
 801e808:	b016      	add	sp, #88	@ 0x58
 801e80a:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801e80c:	4b20      	ldr	r3, [pc, #128]	@ (801e890 <lfs_format_+0xd8>)
 801e80e:	4a21      	ldr	r2, [pc, #132]	@ (801e894 <lfs_format_+0xdc>)
 801e810:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801e814:	4820      	ldr	r0, [pc, #128]	@ (801e898 <lfs_format_+0xe0>)
 801e816:	f00b fb89 	bl	8029f2c <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801e81a:	4620      	mov	r0, r4
 801e81c:	f7fc fbb6 	bl	801af8c <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801e820:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801e822:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801e826:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801e828:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801e82a:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801e82c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801e82e:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801e830:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801e832:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801e834:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801e836:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801e838:	4b18      	ldr	r3, [pc, #96]	@ (801e89c <lfs_format_+0xe4>)
 801e83a:	930e      	str	r3, [sp, #56]	@ 0x38
 801e83c:	2300      	movs	r3, #0
 801e83e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e840:	4b17      	ldr	r3, [pc, #92]	@ (801e8a0 <lfs_format_+0xe8>)
 801e842:	9310      	str	r3, [sp, #64]	@ 0x40
 801e844:	4b17      	ldr	r3, [pc, #92]	@ (801e8a4 <lfs_format_+0xec>)
 801e846:	9311      	str	r3, [sp, #68]	@ 0x44
 801e848:	4b17      	ldr	r3, [pc, #92]	@ (801e8a8 <lfs_format_+0xf0>)
 801e84a:	9312      	str	r3, [sp, #72]	@ 0x48
 801e84c:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801e850:	2303      	movs	r3, #3
 801e852:	aa0e      	add	r2, sp, #56	@ 0x38
 801e854:	a906      	add	r1, sp, #24
 801e856:	4620      	mov	r0, r4
 801e858:	f7ff fcb2 	bl	801e1c0 <lfs_dir_commit>
        if (err) {
 801e85c:	4606      	mov	r6, r0
 801e85e:	2800      	cmp	r0, #0
 801e860:	d1ce      	bne.n	801e800 <lfs_format_+0x48>
        root.erased = false;
 801e862:	2200      	movs	r2, #0
 801e864:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801e868:	4613      	mov	r3, r2
 801e86a:	a906      	add	r1, sp, #24
 801e86c:	4620      	mov	r0, r4
 801e86e:	f7ff fca7 	bl	801e1c0 <lfs_dir_commit>
        if (err) {
 801e872:	4606      	mov	r6, r0
 801e874:	2800      	cmp	r0, #0
 801e876:	d1c3      	bne.n	801e800 <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801e878:	2300      	movs	r3, #0
 801e87a:	9314      	str	r3, [sp, #80]	@ 0x50
 801e87c:	2301      	movs	r3, #1
 801e87e:	9315      	str	r3, [sp, #84]	@ 0x54
 801e880:	aa14      	add	r2, sp, #80	@ 0x50
 801e882:	a906      	add	r1, sp, #24
 801e884:	4620      	mov	r0, r4
 801e886:	f7fd fe6b 	bl	801c560 <lfs_dir_fetch>
 801e88a:	4606      	mov	r6, r0
        if (err) {
 801e88c:	e7b8      	b.n	801e800 <lfs_format_+0x48>
 801e88e:	bf00      	nop
 801e890:	08039aec 	.word	0x08039aec
 801e894:	08039ed4 	.word	0x08039ed4
 801e898:	08039148 	.word	0x08039148
 801e89c:	40100000 	.word	0x40100000
 801e8a0:	0ff00008 	.word	0x0ff00008
 801e8a4:	08039b04 	.word	0x08039b04
 801e8a8:	20100018 	.word	0x20100018

0801e8ac <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801e8ac:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801e8ae:	f7ff fdcd 	bl	801e44c <lfs_deinit>
}
 801e8b2:	bd08      	pop	{r3, pc}

0801e8b4 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801e8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8b8:	b09b      	sub	sp, #108	@ 0x6c
 801e8ba:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801e8bc:	f7ff fde0 	bl	801e480 <lfs_init>
    if (err) {
 801e8c0:	9005      	str	r0, [sp, #20]
 801e8c2:	b9d8      	cbnz	r0, 801e8fc <lfs_mount_+0x48>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801e8c4:	2220      	movs	r2, #32
 801e8c6:	2100      	movs	r1, #0
 801e8c8:	a80f      	add	r0, sp, #60	@ 0x3c
 801e8ca:	f00e f881 	bl	802c9d0 <memset>
 801e8ce:	2501      	movs	r5, #1
 801e8d0:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801e8d2:	4aa1      	ldr	r2, [pc, #644]	@ (801eb58 <lfs_mount_+0x2a4>)
 801e8d4:	ab0d      	add	r3, sp, #52	@ 0x34
 801e8d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e8da:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801e8de:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 801e8e0:	e073      	b.n	801e9ca <lfs_mount_+0x116>
            LFS_WARN("Cycle detected in tail list");
 801e8e2:	4b9e      	ldr	r3, [pc, #632]	@ (801eb5c <lfs_mount_+0x2a8>)
 801e8e4:	f241 123d 	movw	r2, #4413	@ 0x113d
 801e8e8:	499d      	ldr	r1, [pc, #628]	@ (801eb60 <lfs_mount_+0x2ac>)
 801e8ea:	489e      	ldr	r0, [pc, #632]	@ (801eb64 <lfs_mount_+0x2b0>)
 801e8ec:	f00b fb52 	bl	8029f94 <printf>
            err = LFS_ERR_CORRUPT;
 801e8f0:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801e8f4:	9305      	str	r3, [sp, #20]
    lfs_unmount_(lfs);
 801e8f6:	4620      	mov	r0, r4
 801e8f8:	f7ff ffd8 	bl	801e8ac <lfs_unmount_>
}
 801e8fc:	9805      	ldr	r0, [sp, #20]
 801e8fe:	b01b      	add	sp, #108	@ 0x6c
 801e900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 801e904:	970d      	str	r7, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801e906:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e908:	930e      	str	r3, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801e90a:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 801e90c:	2500      	movs	r5, #0
 801e90e:	e075      	b.n	801e9fc <lfs_mount_+0x148>
                LFS_ERROR("Invalid version "
 801e910:	4620      	mov	r0, r4
 801e912:	f7fc fb44 	bl	801af9e <lfs_fs_disk_version_minor>
 801e916:	4b91      	ldr	r3, [pc, #580]	@ (801eb5c <lfs_mount_+0x2a8>)
 801e918:	9303      	str	r3, [sp, #12]
 801e91a:	9002      	str	r0, [sp, #8]
 801e91c:	f8cd 9004 	str.w	r9, [sp, #4]
 801e920:	b2bf      	uxth	r7, r7
 801e922:	9700      	str	r7, [sp, #0]
 801e924:	4643      	mov	r3, r8
 801e926:	f241 126b 	movw	r2, #4459	@ 0x116b
 801e92a:	498d      	ldr	r1, [pc, #564]	@ (801eb60 <lfs_mount_+0x2ac>)
 801e92c:	488e      	ldr	r0, [pc, #568]	@ (801eb68 <lfs_mount_+0x2b4>)
 801e92e:	f00b fb31 	bl	8029f94 <printf>
                err = LFS_ERR_INVAL;
 801e932:	f06f 0315 	mvn.w	r3, #21
 801e936:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801e938:	e7dd      	b.n	801e8f6 <lfs_mount_+0x42>
                LFS_DEBUG("Found older minor version "
 801e93a:	4b88      	ldr	r3, [pc, #544]	@ (801eb5c <lfs_mount_+0x2a8>)
 801e93c:	9303      	str	r3, [sp, #12]
 801e93e:	9002      	str	r0, [sp, #8]
 801e940:	f8cd 9004 	str.w	r9, [sp, #4]
 801e944:	b2bf      	uxth	r7, r7
 801e946:	9700      	str	r7, [sp, #0]
 801e948:	4643      	mov	r3, r8
 801e94a:	f241 127a 	movw	r2, #4474	@ 0x117a
 801e94e:	4984      	ldr	r1, [pc, #528]	@ (801eb60 <lfs_mount_+0x2ac>)
 801e950:	4886      	ldr	r0, [pc, #536]	@ (801eb6c <lfs_mount_+0x2b8>)
 801e952:	f00b fb1f 	bl	8029f94 <printf>
                needssuperblock = true;
 801e956:	2301      	movs	r3, #1
 801e958:	9304      	str	r3, [sp, #16]
 801e95a:	e08f      	b.n	801ea7c <lfs_mount_+0x1c8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801e95c:	497f      	ldr	r1, [pc, #508]	@ (801eb5c <lfs_mount_+0x2a8>)
 801e95e:	9101      	str	r1, [sp, #4]
 801e960:	9200      	str	r2, [sp, #0]
 801e962:	f241 1289 	movw	r2, #4489	@ 0x1189
 801e966:	497e      	ldr	r1, [pc, #504]	@ (801eb60 <lfs_mount_+0x2ac>)
 801e968:	4881      	ldr	r0, [pc, #516]	@ (801eb70 <lfs_mount_+0x2bc>)
 801e96a:	f00b fb13 	bl	8029f94 <printf>
                    err = LFS_ERR_INVAL;
 801e96e:	f06f 0315 	mvn.w	r3, #21
 801e972:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e974:	e7bf      	b.n	801e8f6 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801e976:	4979      	ldr	r1, [pc, #484]	@ (801eb5c <lfs_mount_+0x2a8>)
 801e978:	9101      	str	r1, [sp, #4]
 801e97a:	9200      	str	r2, [sp, #0]
 801e97c:	f241 1294 	movw	r2, #4500	@ 0x1194
 801e980:	4977      	ldr	r1, [pc, #476]	@ (801eb60 <lfs_mount_+0x2ac>)
 801e982:	487c      	ldr	r0, [pc, #496]	@ (801eb74 <lfs_mount_+0x2c0>)
 801e984:	f00b fb06 	bl	8029f94 <printf>
                    err = LFS_ERR_INVAL;
 801e988:	f06f 0315 	mvn.w	r3, #21
 801e98c:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e98e:	e7b2      	b.n	801e8f6 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801e990:	4972      	ldr	r1, [pc, #456]	@ (801eb5c <lfs_mount_+0x2a8>)
 801e992:	9101      	str	r1, [sp, #4]
 801e994:	9200      	str	r2, [sp, #0]
 801e996:	f241 129f 	movw	r2, #4511	@ 0x119f
 801e99a:	4971      	ldr	r1, [pc, #452]	@ (801eb60 <lfs_mount_+0x2ac>)
 801e99c:	4876      	ldr	r0, [pc, #472]	@ (801eb78 <lfs_mount_+0x2c4>)
 801e99e:	f00b faf9 	bl	8029f94 <printf>
                    err = LFS_ERR_INVAL;
 801e9a2:	f06f 0315 	mvn.w	r3, #21
 801e9a6:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e9a8:	e7a5      	b.n	801e8f6 <lfs_mount_+0x42>
            lfs->block_count = superblock.block_count;
 801e9aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9ac:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 801e9ae:	9b08      	ldr	r3, [sp, #32]
 801e9b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801e9b2:	4293      	cmp	r3, r2
 801e9b4:	f040 8096 	bne.w	801eae4 <lfs_mount_+0x230>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801e9b8:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801e9bc:	a90f      	add	r1, sp, #60	@ 0x3c
 801e9be:	4620      	mov	r0, r4
 801e9c0:	f7fc fdee 	bl	801b5a0 <lfs_dir_getgstate>
        if (err) {
 801e9c4:	2800      	cmp	r0, #0
 801e9c6:	f040 809e 	bne.w	801eb06 <lfs_mount_+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e9ca:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e9cc:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801e9d0:	f000 809d 	beq.w	801eb0e <lfs_mount_+0x25a>
 801e9d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e9d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e9da:	f000 8096 	beq.w	801eb0a <lfs_mount_+0x256>
 801e9de:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 801e9e0:	f013 0301 	ands.w	r3, r3, #1
 801e9e4:	f040 8095 	bne.w	801eb12 <lfs_mount_+0x25e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801e9e8:	a90d      	add	r1, sp, #52	@ 0x34
 801e9ea:	a815      	add	r0, sp, #84	@ 0x54
 801e9ec:	f7fc fa60 	bl	801aeb0 <lfs_pair_issync>
 801e9f0:	9004      	str	r0, [sp, #16]
 801e9f2:	2800      	cmp	r0, #0
 801e9f4:	f47f af75 	bne.w	801e8e2 <lfs_mount_+0x2e>
        if (tortoise_i == tortoise_period) {
 801e9f8:	42b5      	cmp	r5, r6
 801e9fa:	d083      	beq.n	801e904 <lfs_mount_+0x50>
        tortoise_i += 1;
 801e9fc:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801e9fe:	9417      	str	r4, [sp, #92]	@ 0x5c
 801ea00:	4b5e      	ldr	r3, [pc, #376]	@ (801eb7c <lfs_mount_+0x2c8>)
 801ea02:	9318      	str	r3, [sp, #96]	@ 0x60
 801ea04:	2308      	movs	r3, #8
 801ea06:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801ea08:	ab17      	add	r3, sp, #92	@ 0x5c
 801ea0a:	9303      	str	r3, [sp, #12]
 801ea0c:	4b5c      	ldr	r3, [pc, #368]	@ (801eb80 <lfs_mount_+0x2cc>)
 801ea0e:	9302      	str	r3, [sp, #8]
 801ea10:	2300      	movs	r3, #0
 801ea12:	9301      	str	r3, [sp, #4]
 801ea14:	4b5b      	ldr	r3, [pc, #364]	@ (801eb84 <lfs_mount_+0x2d0>)
 801ea16:	9300      	str	r3, [sp, #0]
 801ea18:	4b5b      	ldr	r3, [pc, #364]	@ (801eb88 <lfs_mount_+0x2d4>)
 801ea1a:	aa15      	add	r2, sp, #84	@ 0x54
 801ea1c:	a90f      	add	r1, sp, #60	@ 0x3c
 801ea1e:	4620      	mov	r0, r4
 801ea20:	f7fd fabe 	bl	801bfa0 <lfs_dir_fetchmatch>
        if (tag < 0) {
 801ea24:	2800      	cmp	r0, #0
 801ea26:	db6c      	blt.n	801eb02 <lfs_mount_+0x24e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801ea28:	2800      	cmp	r0, #0
 801ea2a:	d0c5      	beq.n	801e9b8 <lfs_mount_+0x104>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801ea2c:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801ea30:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801ea34:	d0c0      	beq.n	801e9b8 <lfs_mount_+0x104>
            lfs->root[0] = dir.pair[0];
 801ea36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ea38:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 801ea3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea3c:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801ea3e:	ab07      	add	r3, sp, #28
 801ea40:	9300      	str	r3, [sp, #0]
 801ea42:	4b52      	ldr	r3, [pc, #328]	@ (801eb8c <lfs_mount_+0x2d8>)
 801ea44:	4a50      	ldr	r2, [pc, #320]	@ (801eb88 <lfs_mount_+0x2d4>)
 801ea46:	a90f      	add	r1, sp, #60	@ 0x3c
 801ea48:	4620      	mov	r0, r4
 801ea4a:	f7fc fd9b 	bl	801b584 <lfs_dir_get>
            if (tag < 0) {
 801ea4e:	2800      	cmp	r0, #0
 801ea50:	db55      	blt.n	801eafe <lfs_mount_+0x24a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801ea52:	9f07      	ldr	r7, [sp, #28]
 801ea54:	ea4f 4817 	mov.w	r8, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801ea58:	fa1f fa87 	uxth.w	sl, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 801ea5c:	4620      	mov	r0, r4
 801ea5e:	f7fc fa99 	bl	801af94 <lfs_fs_disk_version_major>
 801ea62:	4681      	mov	r9, r0
 801ea64:	4540      	cmp	r0, r8
 801ea66:	f47f af53 	bne.w	801e910 <lfs_mount_+0x5c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801ea6a:	4620      	mov	r0, r4
 801ea6c:	f7fc fa97 	bl	801af9e <lfs_fs_disk_version_minor>
 801ea70:	4550      	cmp	r0, sl
 801ea72:	f4ff af4d 	bcc.w	801e910 <lfs_mount_+0x5c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801ea76:	4550      	cmp	r0, sl
 801ea78:	f63f af5f 	bhi.w	801e93a <lfs_mount_+0x86>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801ea7c:	9904      	ldr	r1, [sp, #16]
 801ea7e:	4620      	mov	r0, r4
 801ea80:	f7fc fb2b 	bl	801b0da <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 801ea84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ea86:	b123      	cbz	r3, 801ea92 <lfs_mount_+0x1de>
                if (superblock.name_max > lfs->name_max) {
 801ea88:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801ea8a:	4293      	cmp	r3, r2
 801ea8c:	f63f af66 	bhi.w	801e95c <lfs_mount_+0xa8>
                lfs->name_max = superblock.name_max;
 801ea90:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 801ea92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ea94:	b123      	cbz	r3, 801eaa0 <lfs_mount_+0x1ec>
                if (superblock.file_max > lfs->file_max) {
 801ea96:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801ea98:	4293      	cmp	r3, r2
 801ea9a:	f63f af6c 	bhi.w	801e976 <lfs_mount_+0xc2>
                lfs->file_max = superblock.file_max;
 801ea9e:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 801eaa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eaa2:	b14b      	cbz	r3, 801eab8 <lfs_mount_+0x204>
                if (superblock.attr_max > lfs->attr_max) {
 801eaa4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801eaa6:	4293      	cmp	r3, r2
 801eaa8:	f63f af72 	bhi.w	801e990 <lfs_mount_+0xdc>
                lfs->attr_max = superblock.attr_max;
 801eaac:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801eaae:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801eab0:	4293      	cmp	r3, r2
 801eab2:	bf28      	it	cs
 801eab4:	4613      	movcs	r3, r2
 801eab6:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 801eab8:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801eaba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801eabc:	2900      	cmp	r1, #0
 801eabe:	f43f af74 	beq.w	801e9aa <lfs_mount_+0xf6>
                    && superblock.block_count != lfs->cfg->block_count) {
 801eac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eac4:	4299      	cmp	r1, r3
 801eac6:	f43f af70 	beq.w	801e9aa <lfs_mount_+0xf6>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801eaca:	4a24      	ldr	r2, [pc, #144]	@ (801eb5c <lfs_mount_+0x2a8>)
 801eacc:	9201      	str	r2, [sp, #4]
 801eace:	9100      	str	r1, [sp, #0]
 801ead0:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801ead4:	4922      	ldr	r1, [pc, #136]	@ (801eb60 <lfs_mount_+0x2ac>)
 801ead6:	482e      	ldr	r0, [pc, #184]	@ (801eb90 <lfs_mount_+0x2dc>)
 801ead8:	f00b fa5c 	bl	8029f94 <printf>
                err = LFS_ERR_INVAL;
 801eadc:	f06f 0315 	mvn.w	r3, #21
 801eae0:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801eae2:	e708      	b.n	801e8f6 <lfs_mount_+0x42>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801eae4:	491d      	ldr	r1, [pc, #116]	@ (801eb5c <lfs_mount_+0x2a8>)
 801eae6:	9101      	str	r1, [sp, #4]
 801eae8:	9200      	str	r2, [sp, #0]
 801eaea:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801eaee:	491c      	ldr	r1, [pc, #112]	@ (801eb60 <lfs_mount_+0x2ac>)
 801eaf0:	4828      	ldr	r0, [pc, #160]	@ (801eb94 <lfs_mount_+0x2e0>)
 801eaf2:	f00b fa4f 	bl	8029f94 <printf>
                err = LFS_ERR_INVAL;
 801eaf6:	f06f 0315 	mvn.w	r3, #21
 801eafa:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801eafc:	e6fb      	b.n	801e8f6 <lfs_mount_+0x42>
                err = tag;
 801eafe:	9005      	str	r0, [sp, #20]
 801eb00:	e6f9      	b.n	801e8f6 <lfs_mount_+0x42>
            err = tag;
 801eb02:	9005      	str	r0, [sp, #20]
 801eb04:	e6f7      	b.n	801e8f6 <lfs_mount_+0x42>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801eb06:	9005      	str	r0, [sp, #20]
 801eb08:	e6f5      	b.n	801e8f6 <lfs_mount_+0x42>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801eb0a:	2301      	movs	r3, #1
 801eb0c:	e768      	b.n	801e9e0 <lfs_mount_+0x12c>
 801eb0e:	2301      	movs	r3, #1
 801eb10:	e766      	b.n	801e9e0 <lfs_mount_+0x12c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801eb12:	f104 0030 	add.w	r0, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 801eb16:	9a05      	ldr	r2, [sp, #20]
 801eb18:	2a02      	cmp	r2, #2
 801eb1a:	dc05      	bgt.n	801eb28 <lfs_mount_+0x274>
        if (((uint32_t*)a)[i] != 0) {
 801eb1c:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801eb20:	b909      	cbnz	r1, 801eb26 <lfs_mount_+0x272>
    for (int i = 0; i < 3; i++) {
 801eb22:	3201      	adds	r2, #1
 801eb24:	e7f8      	b.n	801eb18 <lfs_mount_+0x264>
            return false;
 801eb26:	2300      	movs	r3, #0
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801eb28:	b3b3      	cbz	r3, 801eb98 <lfs_mount_+0x2e4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801eb2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801eb2c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801eb30:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801eb32:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801eb36:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801eb3a:	ca07      	ldmia	r2, {r0, r1, r2}
 801eb3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801eb40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801eb42:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801eb44:	fbb3 f1f2 	udiv	r1, r3, r2
 801eb48:	fb02 3311 	mls	r3, r2, r1, r3
 801eb4c:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801eb4e:	4620      	mov	r0, r4
 801eb50:	f7fc fa2d 	bl	801afae <lfs_alloc_drop>
    return 0;
 801eb54:	e6d2      	b.n	801e8fc <lfs_mount_+0x48>
 801eb56:	bf00      	nop
 801eb58:	08035d14 	.word	0x08035d14
 801eb5c:	08036c70 	.word	0x08036c70
 801eb60:	08039148 	.word	0x08039148
 801eb64:	08039308 	.word	0x08039308
 801eb68:	08039b10 	.word	0x08039b10
 801eb6c:	08039b48 	.word	0x08039b48
 801eb70:	08039b88 	.word	0x08039b88
 801eb74:	08039bbc 	.word	0x08039bbc
 801eb78:	08039bf0 	.word	0x08039bf0
 801eb7c:	08039b04 	.word	0x08039b04
 801eb80:	0801bd61 	.word	0x0801bd61
 801eb84:	0ff00008 	.word	0x0ff00008
 801eb88:	7ffffc00 	.word	0x7ffffc00
 801eb8c:	20100018 	.word	0x20100018
 801eb90:	08039c24 	.word	0x08039c24
 801eb94:	08039c58 	.word	0x08039c58
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 801eb98:	4b06      	ldr	r3, [pc, #24]	@ (801ebb4 <lfs_mount_+0x300>)
 801eb9a:	9302      	str	r3, [sp, #8]
 801eb9c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801eb9e:	9301      	str	r3, [sp, #4]
 801eba0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801eba2:	9300      	str	r3, [sp, #0]
 801eba4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801eba6:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 801ebaa:	4903      	ldr	r1, [pc, #12]	@ (801ebb8 <lfs_mount_+0x304>)
 801ebac:	4803      	ldr	r0, [pc, #12]	@ (801ebbc <lfs_mount_+0x308>)
 801ebae:	f00b f9f1 	bl	8029f94 <printf>
 801ebb2:	e7ba      	b.n	801eb2a <lfs_mount_+0x276>
 801ebb4:	08036c70 	.word	0x08036c70
 801ebb8:	08039148 	.word	0x08039148
 801ebbc:	08039c88 	.word	0x08039c88

0801ebc0 <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801ebc0:	b570      	push	{r4, r5, r6, lr}
 801ebc2:	4606      	mov	r6, r0
 801ebc4:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 801ebc6:	f7ff fbd7 	bl	801e378 <lfs_file_sync_>
 801ebca:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801ebcc:	4621      	mov	r1, r4
 801ebce:	4630      	mov	r0, r6
 801ebd0:	f7fc f9cd 	bl	801af6e <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 801ebd4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801ebd6:	681b      	ldr	r3, [r3, #0]
 801ebd8:	b10b      	cbz	r3, 801ebde <lfs_file_close_+0x1e>
}
 801ebda:	4628      	mov	r0, r5
 801ebdc:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 801ebde:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801ebe0:	f7fb ff44 	bl	801aa6c <vPortFree>
    return err;
 801ebe4:	e7f9      	b.n	801ebda <lfs_file_close_+0x1a>
	...

0801ebe8 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 801ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebec:	b08d      	sub	sp, #52	@ 0x34
 801ebee:	4682      	mov	sl, r0
 801ebf0:	4688      	mov	r8, r1
 801ebf2:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 801ebf4:	6812      	ldr	r2, [r2, #0]
 801ebf6:	9205      	str	r2, [sp, #20]
    if (id) {
 801ebf8:	9306      	str	r3, [sp, #24]
 801ebfa:	b11b      	cbz	r3, 801ec04 <lfs_dir_find+0x1c>
 801ebfc:	461a      	mov	r2, r3
        *id = 0x3ff;
 801ebfe:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ec02:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 801ec04:	f8da 3020 	ldr.w	r3, [sl, #32]
 801ec08:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 801ec0c:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801ec10:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801ec14:	4e4d      	ldr	r6, [pc, #308]	@ (801ed4c <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 801ec16:	4d4e      	ldr	r5, [pc, #312]	@ (801ed50 <lfs_dir_find+0x168>)
 801ec18:	4629      	mov	r1, r5
 801ec1a:	9f05      	ldr	r7, [sp, #20]
 801ec1c:	4638      	mov	r0, r7
 801ec1e:	f00d ff47 	bl	802cab0 <strspn>
 801ec22:	4604      	mov	r4, r0
 801ec24:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 801ec28:	4629      	mov	r1, r5
 801ec2a:	4648      	mov	r0, r9
 801ec2c:	f00d fef4 	bl	802ca18 <strcspn>
 801ec30:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801ec32:	2801      	cmp	r0, #1
 801ec34:	d00a      	beq.n	801ec4c <lfs_dir_find+0x64>
 801ec36:	2d02      	cmp	r5, #2
 801ec38:	d00c      	beq.n	801ec54 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 801ec3a:	eb09 0305 	add.w	r3, r9, r5
 801ec3e:	9305      	str	r3, [sp, #20]
 801ec40:	469b      	mov	fp, r3
        int depth = 1;
 801ec42:	2701      	movs	r7, #1
 801ec44:	e013      	b.n	801ec6e <lfs_dir_find+0x86>
 801ec46:	46b2      	mov	sl, r6
 801ec48:	4606      	mov	r6, r0
 801ec4a:	e7e4      	b.n	801ec16 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801ec4c:	5d3b      	ldrb	r3, [r7, r4]
 801ec4e:	2b2e      	cmp	r3, #46	@ 0x2e
 801ec50:	d1f1      	bne.n	801ec36 <lfs_dir_find+0x4e>
 801ec52:	e006      	b.n	801ec62 <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801ec54:	2202      	movs	r2, #2
 801ec56:	493f      	ldr	r1, [pc, #252]	@ (801ed54 <lfs_dir_find+0x16c>)
 801ec58:	4648      	mov	r0, r9
 801ec5a:	f00d fe25 	bl	802c8a8 <memcmp>
 801ec5e:	2800      	cmp	r0, #0
 801ec60:	d1eb      	bne.n	801ec3a <lfs_dir_find+0x52>
            name += namelen;
 801ec62:	eb09 0305 	add.w	r3, r9, r5
 801ec66:	9305      	str	r3, [sp, #20]
            goto nextname;
 801ec68:	e7d5      	b.n	801ec16 <lfs_dir_find+0x2e>
                depth += 1;
 801ec6a:	3701      	adds	r7, #1
            suffix += sufflen;
 801ec6c:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 801ec6e:	4c38      	ldr	r4, [pc, #224]	@ (801ed50 <lfs_dir_find+0x168>)
 801ec70:	4621      	mov	r1, r4
 801ec72:	4658      	mov	r0, fp
 801ec74:	f00d ff1c 	bl	802cab0 <strspn>
 801ec78:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 801ec7a:	4621      	mov	r1, r4
 801ec7c:	4658      	mov	r0, fp
 801ec7e:	f00d fecb 	bl	802ca18 <strcspn>
            if (sufflen == 0) {
 801ec82:	4604      	mov	r4, r0
 801ec84:	b170      	cbz	r0, 801eca4 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801ec86:	2802      	cmp	r0, #2
 801ec88:	d1ef      	bne.n	801ec6a <lfs_dir_find+0x82>
 801ec8a:	2202      	movs	r2, #2
 801ec8c:	4931      	ldr	r1, [pc, #196]	@ (801ed54 <lfs_dir_find+0x16c>)
 801ec8e:	4658      	mov	r0, fp
 801ec90:	f00d fe0a 	bl	802c8a8 <memcmp>
 801ec94:	2800      	cmp	r0, #0
 801ec96:	d1e8      	bne.n	801ec6a <lfs_dir_find+0x82>
                if (depth == 0) {
 801ec98:	3f01      	subs	r7, #1
 801ec9a:	d1e7      	bne.n	801ec6c <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 801ec9c:	eb0b 0304 	add.w	r3, fp, r4
 801eca0:	9305      	str	r3, [sp, #20]
                    goto nextname;
 801eca2:	e7b8      	b.n	801ec16 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 801eca4:	f899 3000 	ldrb.w	r3, [r9]
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	d04a      	beq.n	801ed42 <lfs_dir_find+0x15a>
        *path = name;
 801ecac:	9b07      	ldr	r3, [sp, #28]
 801ecae:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 801ecb2:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801ecb6:	2b02      	cmp	r3, #2
 801ecb8:	d13f      	bne.n	801ed3a <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 801ecba:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 801ecbe:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ecc2:	429e      	cmp	r6, r3
 801ecc4:	d102      	bne.n	801eccc <lfs_dir_find+0xe4>
 801ecc6:	464c      	mov	r4, r9
 801ecc8:	4656      	mov	r6, sl
 801ecca:	e029      	b.n	801ed20 <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801eccc:	02b6      	lsls	r6, r6, #10
 801ecce:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801ecd2:	9300      	str	r3, [sp, #0]
 801ecd4:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 801ecd8:	f043 0308 	orr.w	r3, r3, #8
 801ecdc:	4a1e      	ldr	r2, [pc, #120]	@ (801ed58 <lfs_dir_find+0x170>)
 801ecde:	4641      	mov	r1, r8
 801ece0:	4650      	mov	r0, sl
 801ece2:	f7fc fc4f 	bl	801b584 <lfs_dir_get>
            if (res < 0) {
 801ece6:	1e06      	subs	r6, r0, #0
 801ece8:	db2b      	blt.n	801ed42 <lfs_dir_find+0x15a>
 801ecea:	464c      	mov	r4, r9
 801ecec:	4656      	mov	r6, sl
 801ecee:	e017      	b.n	801ed20 <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801ecf0:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801ecf2:	9609      	str	r6, [sp, #36]	@ 0x24
 801ecf4:	940a      	str	r4, [sp, #40]	@ 0x28
 801ecf6:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801ecf8:	aa09      	add	r2, sp, #36	@ 0x24
 801ecfa:	9203      	str	r2, [sp, #12]
 801ecfc:	4a17      	ldr	r2, [pc, #92]	@ (801ed5c <lfs_dir_find+0x174>)
 801ecfe:	9202      	str	r2, [sp, #8]
 801ed00:	9301      	str	r3, [sp, #4]
 801ed02:	9500      	str	r5, [sp, #0]
 801ed04:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801ed08:	463a      	mov	r2, r7
 801ed0a:	4641      	mov	r1, r8
 801ed0c:	4630      	mov	r0, r6
 801ed0e:	f7fd f947 	bl	801bfa0 <lfs_dir_fetchmatch>
            if (tag < 0) {
 801ed12:	2800      	cmp	r0, #0
 801ed14:	db14      	blt.n	801ed40 <lfs_dir_find+0x158>
            if (tag) {
 801ed16:	2800      	cmp	r0, #0
 801ed18:	d195      	bne.n	801ec46 <lfs_dir_find+0x5e>
            if (!dir->split) {
 801ed1a:	f898 3017 	ldrb.w	r3, [r8, #23]
 801ed1e:	b14b      	cbz	r3, 801ed34 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801ed20:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 801ed24:	212f      	movs	r1, #47	@ 0x2f
 801ed26:	4620      	mov	r0, r4
 801ed28:	f00d fe69 	bl	802c9fe <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801ed2c:	2800      	cmp	r0, #0
 801ed2e:	d0df      	beq.n	801ecf0 <lfs_dir_find+0x108>
 801ed30:	2300      	movs	r3, #0
 801ed32:	e7de      	b.n	801ecf2 <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 801ed34:	f06f 0601 	mvn.w	r6, #1
 801ed38:	e003      	b.n	801ed42 <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 801ed3a:	f06f 0613 	mvn.w	r6, #19
 801ed3e:	e000      	b.n	801ed42 <lfs_dir_find+0x15a>
 801ed40:	4606      	mov	r6, r0
}
 801ed42:	4630      	mov	r0, r6
 801ed44:	b00d      	add	sp, #52	@ 0x34
 801ed46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed4a:	bf00      	nop
 801ed4c:	002ffc00 	.word	0x002ffc00
 801ed50:	0803a500 	.word	0x0803a500
 801ed54:	08039cc0 	.word	0x08039cc0
 801ed58:	700ffc00 	.word	0x700ffc00
 801ed5c:	0801bd61 	.word	0x0801bd61

0801ed60 <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 801ed60:	b570      	push	{r4, r5, r6, lr}
 801ed62:	b09a      	sub	sp, #104	@ 0x68
 801ed64:	4604      	mov	r4, r0
 801ed66:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 801ed68:	f7ff fad2 	bl	801e310 <lfs_fs_forceconsistency>
    if (err) {
 801ed6c:	4603      	mov	r3, r0
 801ed6e:	b110      	cbz	r0, 801ed76 <lfs_remove_+0x16>
}
 801ed70:	4618      	mov	r0, r3
 801ed72:	b01a      	add	sp, #104	@ 0x68
 801ed74:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801ed76:	2300      	movs	r3, #0
 801ed78:	aa03      	add	r2, sp, #12
 801ed7a:	a910      	add	r1, sp, #64	@ 0x40
 801ed7c:	4620      	mov	r0, r4
 801ed7e:	f7ff ff33 	bl	801ebe8 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801ed82:	1e03      	subs	r3, r0, #0
 801ed84:	dbf4      	blt.n	801ed70 <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 801ed86:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801ed8a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801ed8e:	4295      	cmp	r5, r2
 801ed90:	d031      	beq.n	801edf6 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 801ed92:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801ed94:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 801ed96:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801ed9a:	2e02      	cmp	r6, #2
 801ed9c:	d02e      	beq.n	801edfc <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 801ed9e:	02ad      	lsls	r5, r5, #10
 801eda0:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 801eda4:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 801eda8:	9518      	str	r5, [sp, #96]	@ 0x60
 801edaa:	2300      	movs	r3, #0
 801edac:	9319      	str	r3, [sp, #100]	@ 0x64
 801edae:	2301      	movs	r3, #1
 801edb0:	aa18      	add	r2, sp, #96	@ 0x60
 801edb2:	a910      	add	r1, sp, #64	@ 0x40
 801edb4:	4620      	mov	r0, r4
 801edb6:	f7ff fa03 	bl	801e1c0 <lfs_dir_commit>
    if (err) {
 801edba:	4603      	mov	r3, r0
 801edbc:	2800      	cmp	r0, #0
 801edbe:	d142      	bne.n	801ee46 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 801edc0:	9a06      	ldr	r2, [sp, #24]
 801edc2:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801edc4:	2e02      	cmp	r6, #2
 801edc6:	d1d3      	bne.n	801ed70 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 801edc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801edcc:	4620      	mov	r0, r4
 801edce:	f7fc f9db 	bl	801b188 <lfs_fs_preporphans>
        if (err) {
 801edd2:	4603      	mov	r3, r0
 801edd4:	2800      	cmp	r0, #0
 801edd6:	d1cb      	bne.n	801ed70 <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801edd8:	aa10      	add	r2, sp, #64	@ 0x40
 801edda:	a908      	add	r1, sp, #32
 801eddc:	4620      	mov	r0, r4
 801edde:	f7fe f8e5 	bl	801cfac <lfs_fs_pred>
        if (err) {
 801ede2:	4603      	mov	r3, r0
 801ede4:	2800      	cmp	r0, #0
 801ede6:	d1c3      	bne.n	801ed70 <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801ede8:	aa08      	add	r2, sp, #32
 801edea:	a910      	add	r1, sp, #64	@ 0x40
 801edec:	4620      	mov	r0, r4
 801edee:	f7ff faa3 	bl	801e338 <lfs_dir_drop>
 801edf2:	4603      	mov	r3, r0
        if (err) {
 801edf4:	e7bc      	b.n	801ed70 <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801edf6:	f06f 0315 	mvn.w	r3, #21
 801edfa:	e7b9      	b.n	801ed70 <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801edfc:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801edfe:	aa04      	add	r2, sp, #16
 801ee00:	9200      	str	r2, [sp, #0]
 801ee02:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801ee06:	f043 0308 	orr.w	r3, r3, #8
 801ee0a:	4a10      	ldr	r2, [pc, #64]	@ (801ee4c <lfs_remove_+0xec>)
 801ee0c:	a910      	add	r1, sp, #64	@ 0x40
 801ee0e:	4620      	mov	r0, r4
 801ee10:	f7fc fbb8 	bl	801b584 <lfs_dir_get>
        if (res < 0) {
 801ee14:	1e03      	subs	r3, r0, #0
 801ee16:	dbab      	blt.n	801ed70 <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801ee18:	aa04      	add	r2, sp, #16
 801ee1a:	a908      	add	r1, sp, #32
 801ee1c:	4620      	mov	r0, r4
 801ee1e:	f7fd fb9f 	bl	801c560 <lfs_dir_fetch>
        if (err) {
 801ee22:	4603      	mov	r3, r0
 801ee24:	2800      	cmp	r0, #0
 801ee26:	d1a3      	bne.n	801ed70 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801ee28:	2101      	movs	r1, #1
 801ee2a:	4620      	mov	r0, r4
 801ee2c:	f7fc f9ac 	bl	801b188 <lfs_fs_preporphans>
        if (err) {
 801ee30:	4603      	mov	r3, r0
 801ee32:	2800      	cmp	r0, #0
 801ee34:	d19c      	bne.n	801ed70 <lfs_remove_+0x10>
        dir.type = 0;
 801ee36:	2300      	movs	r3, #0
 801ee38:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 801ee3c:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 801ee40:	ab06      	add	r3, sp, #24
 801ee42:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ee44:	e7ab      	b.n	801ed9e <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 801ee46:	9a06      	ldr	r2, [sp, #24]
 801ee48:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 801ee4a:	e791      	b.n	801ed70 <lfs_remove_+0x10>
 801ee4c:	700ffc00 	.word	0x700ffc00

0801ee50 <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801ee50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee52:	b087      	sub	sp, #28
 801ee54:	4607      	mov	r7, r0
 801ee56:	460d      	mov	r5, r1
 801ee58:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801ee5a:	f101 0608 	add.w	r6, r1, #8
 801ee5e:	2300      	movs	r3, #0
 801ee60:	aa03      	add	r2, sp, #12
 801ee62:	4631      	mov	r1, r6
 801ee64:	f7ff fec0 	bl	801ebe8 <lfs_dir_find>
    if (tag < 0) {
 801ee68:	1e04      	subs	r4, r0, #0
 801ee6a:	db14      	blt.n	801ee96 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 801ee6c:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801ee70:	2b02      	cmp	r3, #2
 801ee72:	d130      	bne.n	801eed6 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 801ee74:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 801ee78:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ee7c:	429c      	cmp	r4, r3
 801ee7e:	d10d      	bne.n	801ee9c <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 801ee80:	6a3b      	ldr	r3, [r7, #32]
 801ee82:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 801ee84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee86:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801ee88:	aa04      	add	r2, sp, #16
 801ee8a:	4631      	mov	r1, r6
 801ee8c:	4638      	mov	r0, r7
 801ee8e:	f7fd fb67 	bl	801c560 <lfs_dir_fetch>
    if (err) {
 801ee92:	4604      	mov	r4, r0
 801ee94:	b188      	cbz	r0, 801eeba <lfs_dir_open_+0x6a>
}
 801ee96:	4620      	mov	r0, r4
 801ee98:	b007      	add	sp, #28
 801ee9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801ee9c:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801ee9e:	ab04      	add	r3, sp, #16
 801eea0:	9300      	str	r3, [sp, #0]
 801eea2:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 801eea6:	f043 0308 	orr.w	r3, r3, #8
 801eeaa:	4a0c      	ldr	r2, [pc, #48]	@ (801eedc <lfs_dir_open_+0x8c>)
 801eeac:	4631      	mov	r1, r6
 801eeae:	4638      	mov	r0, r7
 801eeb0:	f7fc fb68 	bl	801b584 <lfs_dir_get>
        if (res < 0) {
 801eeb4:	1e04      	subs	r4, r0, #0
 801eeb6:	dae7      	bge.n	801ee88 <lfs_dir_open_+0x38>
 801eeb8:	e7ed      	b.n	801ee96 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 801eeba:	68ab      	ldr	r3, [r5, #8]
 801eebc:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 801eebe:	68eb      	ldr	r3, [r5, #12]
 801eec0:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 801eec2:	2300      	movs	r3, #0
 801eec4:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 801eec6:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 801eec8:	2302      	movs	r3, #2
 801eeca:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801eecc:	4629      	mov	r1, r5
 801eece:	4638      	mov	r0, r7
 801eed0:	f7fc f858 	bl	801af84 <lfs_mlist_append>
    return 0;
 801eed4:	e7df      	b.n	801ee96 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 801eed6:	f06f 0413 	mvn.w	r4, #19
 801eeda:	e7dc      	b.n	801ee96 <lfs_dir_open_+0x46>
 801eedc:	700ffc00 	.word	0x700ffc00

0801eee0 <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801eee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eee4:	b0ad      	sub	sp, #180	@ 0xb4
 801eee6:	4604      	mov	r4, r0
 801eee8:	9103      	str	r1, [sp, #12]
 801eeea:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 801eeec:	f7ff fa10 	bl	801e310 <lfs_fs_forceconsistency>
    if (err) {
 801eef0:	4606      	mov	r6, r0
 801eef2:	b118      	cbz	r0, 801eefc <lfs_rename_+0x1c>
}
 801eef4:	4630      	mov	r0, r6
 801eef6:	b02d      	add	sp, #180	@ 0xb4
 801eef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 801eefc:	2300      	movs	r3, #0
 801eefe:	aa03      	add	r2, sp, #12
 801ef00:	a922      	add	r1, sp, #136	@ 0x88
 801ef02:	4620      	mov	r0, r4
 801ef04:	f7ff fe70 	bl	801ebe8 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801ef08:	2800      	cmp	r0, #0
 801ef0a:	f2c0 809e 	blt.w	801f04a <lfs_rename_+0x16a>
 801ef0e:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 801ef10:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801ef14:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ef18:	429d      	cmp	r5, r3
 801ef1a:	f000 8094 	beq.w	801f046 <lfs_rename_+0x166>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 801ef1e:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 801ef22:	aa02      	add	r2, sp, #8
 801ef24:	a91a      	add	r1, sp, #104	@ 0x68
 801ef26:	4620      	mov	r0, r4
 801ef28:	f7ff fe5e 	bl	801ebe8 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801ef2c:	f1b0 0900 	subs.w	r9, r0, #0
 801ef30:	f2c0 808d 	blt.w	801f04e <lfs_rename_+0x16e>
    return (tag & 0x000ffc00) >> 10;
 801ef34:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801ef38:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ef3c:	429a      	cmp	r2, r3
 801ef3e:	f000 8086 	beq.w	801f04e <lfs_rename_+0x16e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ef42:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ef44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ef46:	429a      	cmp	r2, r3
 801ef48:	d008      	beq.n	801ef5c <lfs_rename_+0x7c>
 801ef4a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801ef4c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801ef4e:	4281      	cmp	r1, r0
 801ef50:	d004      	beq.n	801ef5c <lfs_rename_+0x7c>
 801ef52:	4299      	cmp	r1, r3
 801ef54:	d002      	beq.n	801ef5c <lfs_rename_+0x7c>
 801ef56:	4290      	cmp	r0, r2
 801ef58:	d000      	beq.n	801ef5c <lfs_rename_+0x7c>
 801ef5a:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 801ef5c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ef5e:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 801ef60:	f119 0f02 	cmn.w	r9, #2
 801ef64:	f000 8085 	beq.w	801f072 <lfs_rename_+0x192>
    return (tag & 0x7ff00000) >> 20;
 801ef68:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801ef6c:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801ef70:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 801ef74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ef78:	2b00      	cmp	r3, #0
 801ef7a:	f040 808a 	bne.w	801f092 <lfs_rename_+0x1b2>
    } else if (samepair && newid == newoldid) {
 801ef7e:	b91e      	cbnz	r6, 801ef88 <lfs_rename_+0xa8>
 801ef80:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801ef84:	42ab      	cmp	r3, r5
 801ef86:	d0b5      	beq.n	801eef4 <lfs_rename_+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801ef88:	2a02      	cmp	r2, #2
 801ef8a:	f000 808a 	beq.w	801f0a2 <lfs_rename_+0x1c2>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801ef8e:	46aa      	mov	sl, r5
    if (!samepair) {
 801ef90:	b126      	cbz	r6, 801ef9c <lfs_rename_+0xbc>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 801ef92:	aa22      	add	r2, sp, #136	@ 0x88
 801ef94:	4651      	mov	r1, sl
 801ef96:	4620      	mov	r0, r4
 801ef98:	f7fc f8a6 	bl	801b0e8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801ef9c:	f119 0f02 	cmn.w	r9, #2
 801efa0:	f000 80b4 	beq.w	801f10c <lfs_rename_+0x22c>
 801efa4:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801efa8:	029b      	lsls	r3, r3, #10
 801efaa:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801efae:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801efb2:	9305      	str	r3, [sp, #20]
 801efb4:	2200      	movs	r2, #0
 801efb6:	9206      	str	r2, [sp, #24]
 801efb8:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 801efbc:	02bf      	lsls	r7, r7, #10
 801efbe:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 801efc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801efc6:	9307      	str	r3, [sp, #28]
 801efc8:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801efca:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801efce:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 801efd2:	f8dd b008 	ldr.w	fp, [sp, #8]
 801efd6:	4658      	mov	r0, fp
 801efd8:	f7f1 f962 	bl	80102a0 <strlen>
 801efdc:	ea48 0000 	orr.w	r0, r8, r0
 801efe0:	9009      	str	r0, [sp, #36]	@ 0x24
 801efe2:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801efe6:	432f      	orrs	r7, r5
 801efe8:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 801efec:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 801eff0:	970b      	str	r7, [sp, #44]	@ 0x2c
 801eff2:	ab22      	add	r3, sp, #136	@ 0x88
 801eff4:	930c      	str	r3, [sp, #48]	@ 0x30
 801eff6:	2e00      	cmp	r6, #0
 801eff8:	f040 808a 	bne.w	801f110 <lfs_rename_+0x230>
 801effc:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 801f000:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 801f004:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f008:	930d      	str	r3, [sp, #52]	@ 0x34
 801f00a:	2300      	movs	r3, #0
 801f00c:	930e      	str	r3, [sp, #56]	@ 0x38
 801f00e:	2305      	movs	r3, #5
 801f010:	aa05      	add	r2, sp, #20
 801f012:	a91a      	add	r1, sp, #104	@ 0x68
 801f014:	4620      	mov	r0, r4
 801f016:	f7ff f8d3 	bl	801e1c0 <lfs_dir_commit>
    if (err) {
 801f01a:	4607      	mov	r7, r0
 801f01c:	2800      	cmp	r0, #0
 801f01e:	d179      	bne.n	801f114 <lfs_rename_+0x234>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801f020:	b126      	cbz	r6, 801f02c <lfs_rename_+0x14c>
    return lfs_tag_type1(a->tag);
 801f022:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801f024:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801f026:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801f02a:	d177      	bne.n	801f11c <lfs_rename_+0x23c>
    lfs->mlist = prevdir.next;
 801f02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f02e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 801f030:	f119 0f02 	cmn.w	r9, #2
 801f034:	f000 80a9 	beq.w	801f18a <lfs_rename_+0x2aa>
    return (tag & 0x7ff00000) >> 20;
 801f038:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801f03c:	2802      	cmp	r0, #2
 801f03e:	f000 8088 	beq.w	801f152 <lfs_rename_+0x272>
    return 0;
 801f042:	463e      	mov	r6, r7
 801f044:	e756      	b.n	801eef4 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801f046:	f06f 0015 	mvn.w	r0, #21
 801f04a:	4606      	mov	r6, r0
 801f04c:	e752      	b.n	801eef4 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801f04e:	f119 0f02 	cmn.w	r9, #2
 801f052:	d106      	bne.n	801f062 <lfs_rename_+0x182>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801f054:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 801f058:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f05c:	429a      	cmp	r2, r3
 801f05e:	f47f af70 	bne.w	801ef42 <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801f062:	f1b9 0f00 	cmp.w	r9, #0
 801f066:	db02      	blt.n	801f06e <lfs_rename_+0x18e>
 801f068:	f06f 0615 	mvn.w	r6, #21
 801f06c:	e742      	b.n	801eef4 <lfs_rename_+0x14>
 801f06e:	464e      	mov	r6, r9
 801f070:	e740      	b.n	801eef4 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 801f072:	9802      	ldr	r0, [sp, #8]
 801f074:	f7f1 f914 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801f078:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801f07a:	4283      	cmp	r3, r0
 801f07c:	f0c0 8082 	bcc.w	801f184 <lfs_rename_+0x2a4>
        if (samepair && newid <= newoldid) {
 801f080:	2e00      	cmp	r6, #0
 801f082:	d141      	bne.n	801f108 <lfs_rename_+0x228>
 801f084:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f088:	42ab      	cmp	r3, r5
 801f08a:	d83b      	bhi.n	801f104 <lfs_rename_+0x224>
            newoldid += 1;
 801f08c:	f105 0a01 	add.w	sl, r5, #1
 801f090:	e77e      	b.n	801ef90 <lfs_rename_+0xb0>
                : LFS_ERR_NOTDIR;
 801f092:	2a02      	cmp	r2, #2
 801f094:	d002      	beq.n	801f09c <lfs_rename_+0x1bc>
 801f096:	f06f 0613 	mvn.w	r6, #19
 801f09a:	e72b      	b.n	801eef4 <lfs_rename_+0x14>
 801f09c:	f06f 0614 	mvn.w	r6, #20
 801f0a0:	e728      	b.n	801eef4 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 801f0a2:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f0a6:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801f0a8:	aa05      	add	r2, sp, #20
 801f0aa:	9200      	str	r2, [sp, #0]
 801f0ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f0b0:	f043 0308 	orr.w	r3, r3, #8
 801f0b4:	4a36      	ldr	r2, [pc, #216]	@ (801f190 <lfs_rename_+0x2b0>)
 801f0b6:	a91a      	add	r1, sp, #104	@ 0x68
 801f0b8:	4620      	mov	r0, r4
 801f0ba:	f7fc fa63 	bl	801b584 <lfs_dir_get>
        if (res < 0) {
 801f0be:	2800      	cmp	r0, #0
 801f0c0:	db1a      	blt.n	801f0f8 <lfs_rename_+0x218>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801f0c2:	aa05      	add	r2, sp, #20
 801f0c4:	a911      	add	r1, sp, #68	@ 0x44
 801f0c6:	4620      	mov	r0, r4
 801f0c8:	f7fd fa4a 	bl	801c560 <lfs_dir_fetch>
        if (err) {
 801f0cc:	b9b0      	cbnz	r0, 801f0fc <lfs_rename_+0x21c>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 801f0ce:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f0d0:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 801f0d4:	d002      	beq.n	801f0dc <lfs_rename_+0x1fc>
            return LFS_ERR_NOTEMPTY;
 801f0d6:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 801f0da:	e70b      	b.n	801eef4 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 801f0dc:	2101      	movs	r1, #1
 801f0de:	4620      	mov	r0, r4
 801f0e0:	f7fc f852 	bl	801b188 <lfs_fs_preporphans>
        if (err) {
 801f0e4:	b960      	cbnz	r0, 801f100 <lfs_rename_+0x220>
        prevdir.type = 0;
 801f0e6:	2300      	movs	r3, #0
 801f0e8:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 801f0ec:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 801f0f0:	ab0f      	add	r3, sp, #60	@ 0x3c
 801f0f2:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f0f4:	46aa      	mov	sl, r5
 801f0f6:	e74b      	b.n	801ef90 <lfs_rename_+0xb0>
            return (int)res;
 801f0f8:	4606      	mov	r6, r0
 801f0fa:	e6fb      	b.n	801eef4 <lfs_rename_+0x14>
            return err;
 801f0fc:	4606      	mov	r6, r0
 801f0fe:	e6f9      	b.n	801eef4 <lfs_rename_+0x14>
            return err;
 801f100:	4606      	mov	r6, r0
 801f102:	e6f7      	b.n	801eef4 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f104:	46aa      	mov	sl, r5
 801f106:	e743      	b.n	801ef90 <lfs_rename_+0xb0>
 801f108:	46aa      	mov	sl, r5
 801f10a:	e742      	b.n	801ef92 <lfs_rename_+0xb2>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801f10c:	2300      	movs	r3, #0
 801f10e:	e750      	b.n	801efb2 <lfs_rename_+0xd2>
 801f110:	2300      	movs	r3, #0
 801f112:	e779      	b.n	801f008 <lfs_rename_+0x128>
        lfs->mlist = prevdir.next;
 801f114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f116:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 801f118:	4606      	mov	r6, r0
 801f11a:	e6eb      	b.n	801eef4 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801f11c:	2200      	movs	r2, #0
 801f11e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801f122:	4620      	mov	r0, r4
 801f124:	f7fb ffe0 	bl	801b0e8 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 801f128:	02ab      	lsls	r3, r5, #10
 801f12a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f12e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f132:	932a      	str	r3, [sp, #168]	@ 0xa8
 801f134:	2300      	movs	r3, #0
 801f136:	932b      	str	r3, [sp, #172]	@ 0xac
 801f138:	2301      	movs	r3, #1
 801f13a:	aa2a      	add	r2, sp, #168	@ 0xa8
 801f13c:	a922      	add	r1, sp, #136	@ 0x88
 801f13e:	4620      	mov	r0, r4
 801f140:	f7ff f83e 	bl	801e1c0 <lfs_dir_commit>
        if (err) {
 801f144:	4606      	mov	r6, r0
 801f146:	2800      	cmp	r0, #0
 801f148:	f43f af70 	beq.w	801f02c <lfs_rename_+0x14c>
            lfs->mlist = prevdir.next;
 801f14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f14e:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 801f150:	e6d0      	b.n	801eef4 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 801f152:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f156:	4620      	mov	r0, r4
 801f158:	f7fc f816 	bl	801b188 <lfs_fs_preporphans>
        if (err) {
 801f15c:	4606      	mov	r6, r0
 801f15e:	2800      	cmp	r0, #0
 801f160:	f47f aec8 	bne.w	801eef4 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 801f164:	aa1a      	add	r2, sp, #104	@ 0x68
 801f166:	a911      	add	r1, sp, #68	@ 0x44
 801f168:	4620      	mov	r0, r4
 801f16a:	f7fd ff1f 	bl	801cfac <lfs_fs_pred>
        if (err) {
 801f16e:	4606      	mov	r6, r0
 801f170:	2800      	cmp	r0, #0
 801f172:	f47f aebf 	bne.w	801eef4 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 801f176:	aa11      	add	r2, sp, #68	@ 0x44
 801f178:	a91a      	add	r1, sp, #104	@ 0x68
 801f17a:	4620      	mov	r0, r4
 801f17c:	f7ff f8dc 	bl	801e338 <lfs_dir_drop>
 801f180:	4606      	mov	r6, r0
        if (err) {
 801f182:	e6b7      	b.n	801eef4 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 801f184:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801f188:	e6b4      	b.n	801eef4 <lfs_rename_+0x14>
    return 0;
 801f18a:	463e      	mov	r6, r7
 801f18c:	e6b2      	b.n	801eef4 <lfs_rename_+0x14>
 801f18e:	bf00      	nop
 801f190:	700ffc00 	.word	0x700ffc00

0801f194 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 801f194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f198:	b08b      	sub	sp, #44	@ 0x2c
 801f19a:	4607      	mov	r7, r0
 801f19c:	460c      	mov	r4, r1
 801f19e:	9203      	str	r2, [sp, #12]
 801f1a0:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801f1a2:	f013 0f02 	tst.w	r3, #2
 801f1a6:	d005      	beq.n	801f1b4 <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 801f1a8:	f7ff f8b2 	bl	801e310 <lfs_fs_forceconsistency>
        if (err) {
 801f1ac:	4606      	mov	r6, r0
 801f1ae:	2800      	cmp	r0, #0
 801f1b0:	f040 8109 	bne.w	801f3c6 <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 801f1b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f1b6:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 801f1b8:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 801f1ba:	2300      	movs	r3, #0
 801f1bc:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 801f1be:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801f1c0:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 801f1c2:	f104 0808 	add.w	r8, r4, #8
 801f1c6:	1d23      	adds	r3, r4, #4
 801f1c8:	aa03      	add	r2, sp, #12
 801f1ca:	4641      	mov	r1, r8
 801f1cc:	4638      	mov	r0, r7
 801f1ce:	f7ff fd0b 	bl	801ebe8 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 801f1d2:	1e06      	subs	r6, r0, #0
 801f1d4:	da09      	bge.n	801f1ea <lfs_file_opencfg_+0x56>
 801f1d6:	f116 0f02 	cmn.w	r6, #2
 801f1da:	f040 80ec 	bne.w	801f3b6 <lfs_file_opencfg_+0x222>
 801f1de:	88a2      	ldrh	r2, [r4, #4]
 801f1e0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f1e4:	429a      	cmp	r2, r3
 801f1e6:	f000 80e6 	beq.w	801f3b6 <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 801f1ea:	2301      	movs	r3, #1
 801f1ec:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801f1ee:	4621      	mov	r1, r4
 801f1f0:	4638      	mov	r0, r7
 801f1f2:	f7fb fec7 	bl	801af84 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 801f1f6:	f116 0f02 	cmn.w	r6, #2
 801f1fa:	d019      	beq.n	801f230 <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 801f1fc:	f415 7f00 	tst.w	r5, #512	@ 0x200
 801f200:	f040 80d7 	bne.w	801f3b2 <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 801f204:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801f208:	2e01      	cmp	r6, #1
 801f20a:	f040 80e0 	bne.w	801f3ce <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 801f20e:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801f212:	d042      	beq.n	801f29a <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801f214:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 801f218:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801f21c:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 801f220:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 801f224:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f22a:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801f22c:	2500      	movs	r5, #0
 801f22e:	e064      	b.n	801f2fa <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 801f230:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801f234:	f000 80bf 	beq.w	801f3b6 <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 801f238:	9d03      	ldr	r5, [sp, #12]
 801f23a:	4628      	mov	r0, r5
 801f23c:	f7f1 f830 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801f240:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f242:	4283      	cmp	r3, r0
 801f244:	d202      	bcs.n	801f24c <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 801f246:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801f24a:	e0b4      	b.n	801f3b6 <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801f24c:	88a3      	ldrh	r3, [r4, #4]
 801f24e:	029b      	lsls	r3, r3, #10
 801f250:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801f254:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801f258:	9204      	str	r2, [sp, #16]
 801f25a:	2200      	movs	r2, #0
 801f25c:	9205      	str	r2, [sp, #20]
 801f25e:	4318      	orrs	r0, r3
 801f260:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801f264:	9006      	str	r0, [sp, #24]
 801f266:	9507      	str	r5, [sp, #28]
 801f268:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f26c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f270:	9308      	str	r3, [sp, #32]
 801f272:	9209      	str	r2, [sp, #36]	@ 0x24
 801f274:	2303      	movs	r3, #3
 801f276:	aa04      	add	r2, sp, #16
 801f278:	4641      	mov	r1, r8
 801f27a:	4638      	mov	r0, r7
 801f27c:	f7fe ffa0 	bl	801e1c0 <lfs_dir_commit>
 801f280:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801f282:	f110 0f1c 	cmn.w	r0, #28
 801f286:	d005      	beq.n	801f294 <lfs_file_opencfg_+0x100>
        if (err) {
 801f288:	2800      	cmp	r0, #0
 801f28a:	f040 8094 	bne.w	801f3b6 <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 801f28e:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 801f3e4 <lfs_file_opencfg_+0x250>
 801f292:	e7cb      	b.n	801f22c <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801f294:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 801f298:	e08d      	b.n	801f3b6 <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801f29a:	88a3      	ldrh	r3, [r4, #4]
 801f29c:	029b      	lsls	r3, r3, #10
 801f29e:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801f2a2:	9200      	str	r2, [sp, #0]
 801f2a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f2a8:	f043 0308 	orr.w	r3, r3, #8
 801f2ac:	4a4b      	ldr	r2, [pc, #300]	@ (801f3dc <lfs_file_opencfg_+0x248>)
 801f2ae:	4641      	mov	r1, r8
 801f2b0:	4638      	mov	r0, r7
 801f2b2:	f7fc f967 	bl	801b584 <lfs_dir_get>
        if (tag < 0) {
 801f2b6:	f1b0 0900 	subs.w	r9, r0, #0
 801f2ba:	dab7      	bge.n	801f22c <lfs_file_opencfg_+0x98>
            err = tag;
 801f2bc:	464e      	mov	r6, r9
 801f2be:	e07a      	b.n	801f3b6 <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 801f2c0:	685b      	ldr	r3, [r3, #4]
 801f2c2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801f2c6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801f2ca:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 801f2ce:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 801f2d2:	88a3      	ldrh	r3, [r4, #4]
 801f2d4:	029b      	lsls	r3, r3, #10
 801f2d6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801f2da:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801f2dc:	6849      	ldr	r1, [r1, #4]
 801f2de:	9100      	str	r1, [sp, #0]
 801f2e0:	4313      	orrs	r3, r2
 801f2e2:	4a3f      	ldr	r2, [pc, #252]	@ (801f3e0 <lfs_file_opencfg_+0x24c>)
 801f2e4:	4641      	mov	r1, r8
 801f2e6:	4638      	mov	r0, r7
 801f2e8:	f7fc f94c 	bl	801b584 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 801f2ec:	1e06      	subs	r6, r0, #0
 801f2ee:	da0c      	bge.n	801f30a <lfs_file_opencfg_+0x176>
 801f2f0:	f116 0f02 	cmn.w	r6, #2
 801f2f4:	d009      	beq.n	801f30a <lfs_file_opencfg_+0x176>
 801f2f6:	e05e      	b.n	801f3b6 <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801f2f8:	3501      	adds	r5, #1
 801f2fa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801f2fc:	689a      	ldr	r2, [r3, #8]
 801f2fe:	42aa      	cmp	r2, r5
 801f300:	d915      	bls.n	801f32e <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 801f302:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801f304:	f012 0f01 	tst.w	r2, #1
 801f308:	d1da      	bne.n	801f2c0 <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801f30a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f30c:	f013 0f02 	tst.w	r3, #2
 801f310:	d0f2      	beq.n	801f2f8 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801f312:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801f314:	6852      	ldr	r2, [r2, #4]
 801f316:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801f31a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801f31e:	6891      	ldr	r1, [r2, #8]
 801f320:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801f322:	4291      	cmp	r1, r2
 801f324:	d856      	bhi.n	801f3d4 <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 801f326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f32a:	6323      	str	r3, [r4, #48]	@ 0x30
 801f32c:	e7e4      	b.n	801f2f8 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 801f32e:	681b      	ldr	r3, [r3, #0]
 801f330:	b16b      	cbz	r3, 801f34e <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 801f332:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 801f334:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801f338:	4638      	mov	r0, r7
 801f33a:	f7fb ff55 	bl	801b1e8 <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 801f33e:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801f342:	f240 2301 	movw	r3, #513	@ 0x201
 801f346:	429a      	cmp	r2, r3
 801f348:	d00b      	beq.n	801f362 <lfs_file_opencfg_+0x1ce>
    return 0;
 801f34a:	2600      	movs	r6, #0
 801f34c:	e03b      	b.n	801f3c6 <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801f34e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 801f350:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801f352:	f7fb fb09 	bl	801a968 <pvPortMalloc>
 801f356:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 801f358:	2800      	cmp	r0, #0
 801f35a:	d1eb      	bne.n	801f334 <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 801f35c:	f06f 060b 	mvn.w	r6, #11
 801f360:	e029      	b.n	801f3b6 <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 801f362:	f06f 0101 	mvn.w	r1, #1
 801f366:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 801f368:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 801f36c:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 801f36e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f370:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f374:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 801f376:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 801f378:	2300      	movs	r3, #0
 801f37a:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 801f37c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f380:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 801f382:	b90a      	cbnz	r2, 801f388 <lfs_file_opencfg_+0x1f4>
    return 0;
 801f384:	2600      	movs	r6, #0
 801f386:	e01e      	b.n	801f3c6 <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 801f388:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 801f38a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801f38e:	4293      	cmp	r3, r2
 801f390:	bf28      	it	cs
 801f392:	4613      	movcs	r3, r2
 801f394:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 801f398:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801f39a:	9200      	str	r2, [sp, #0]
 801f39c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f3a0:	4a0e      	ldr	r2, [pc, #56]	@ (801f3dc <lfs_file_opencfg_+0x248>)
 801f3a2:	4641      	mov	r1, r8
 801f3a4:	4638      	mov	r0, r7
 801f3a6:	f7fc f8ed 	bl	801b584 <lfs_dir_get>
            if (res < 0) {
 801f3aa:	1e06      	subs	r6, r0, #0
 801f3ac:	db03      	blt.n	801f3b6 <lfs_file_opencfg_+0x222>
    return 0;
 801f3ae:	2600      	movs	r6, #0
 801f3b0:	e009      	b.n	801f3c6 <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 801f3b2:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 801f3b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f3b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f3bc:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 801f3be:	4621      	mov	r1, r4
 801f3c0:	4638      	mov	r0, r7
 801f3c2:	f7ff fbfd 	bl	801ebc0 <lfs_file_close_>
}
 801f3c6:	4630      	mov	r0, r6
 801f3c8:	b00b      	add	sp, #44	@ 0x2c
 801f3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 801f3ce:	f06f 0614 	mvn.w	r6, #20
 801f3d2:	e7f0      	b.n	801f3b6 <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 801f3d4:	f06f 061b 	mvn.w	r6, #27
 801f3d8:	e7ed      	b.n	801f3b6 <lfs_file_opencfg_+0x222>
 801f3da:	bf00      	nop
 801f3dc:	700ffc00 	.word	0x700ffc00
 801f3e0:	7ffffc00 	.word	0x7ffffc00
 801f3e4:	20100000 	.word	0x20100000

0801f3e8 <lfs_file_open_>:
        const char *path, int flags) {
 801f3e8:	b510      	push	{r4, lr}
 801f3ea:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 801f3ec:	4c02      	ldr	r4, [pc, #8]	@ (801f3f8 <lfs_file_open_+0x10>)
 801f3ee:	9400      	str	r4, [sp, #0]
 801f3f0:	f7ff fed0 	bl	801f194 <lfs_file_opencfg_>
}
 801f3f4:	b002      	add	sp, #8
 801f3f6:	bd10      	pop	{r4, pc}
 801f3f8:	08039dec 	.word	0x08039dec

0801f3fc <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 801f3fc:	b530      	push	{r4, r5, lr}
 801f3fe:	b0ab      	sub	sp, #172	@ 0xac
 801f400:	4604      	mov	r4, r0
 801f402:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 801f404:	f7fe ff84 	bl	801e310 <lfs_fs_forceconsistency>
    if (err) {
 801f408:	4603      	mov	r3, r0
 801f40a:	b110      	cbz	r0, 801f412 <lfs_mkdir_+0x16>
}
 801f40c:	4618      	mov	r0, r3
 801f40e:	b02b      	add	sp, #172	@ 0xac
 801f410:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 801f412:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f414:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801f416:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 801f41a:	aa01      	add	r2, sp, #4
 801f41c:	a91e      	add	r1, sp, #120	@ 0x78
 801f41e:	4620      	mov	r0, r4
 801f420:	f7ff fbe2 	bl	801ebe8 <lfs_dir_find>
 801f424:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 801f426:	f110 0f02 	cmn.w	r0, #2
 801f42a:	d12f      	bne.n	801f48c <lfs_mkdir_+0x90>
 801f42c:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 801f430:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801f434:	4291      	cmp	r1, r2
 801f436:	d029      	beq.n	801f48c <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 801f438:	9801      	ldr	r0, [sp, #4]
 801f43a:	f7f0 ff31 	bl	80102a0 <strlen>
 801f43e:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 801f440:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801f442:	4283      	cmp	r3, r0
 801f444:	f0c0 8089 	bcc.w	801f55a <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 801f448:	4620      	mov	r0, r4
 801f44a:	f7fb fdad 	bl	801afa8 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 801f44e:	a913      	add	r1, sp, #76	@ 0x4c
 801f450:	4620      	mov	r0, r4
 801f452:	f7fd f9f3 	bl	801c83c <lfs_dir_alloc>
    if (err) {
 801f456:	4603      	mov	r3, r0
 801f458:	2800      	cmp	r0, #0
 801f45a:	d1d7      	bne.n	801f40c <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 801f45c:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801f460:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 801f464:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801f468:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f46c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801f470:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 801f474:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 801f478:	b16b      	cbz	r3, 801f496 <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 801f47a:	aa11      	add	r2, sp, #68	@ 0x44
 801f47c:	a90b      	add	r1, sp, #44	@ 0x2c
 801f47e:	4620      	mov	r0, r4
 801f480:	f7fd f86e 	bl	801c560 <lfs_dir_fetch>
        if (err) {
 801f484:	4603      	mov	r3, r0
 801f486:	2800      	cmp	r0, #0
 801f488:	d0f4      	beq.n	801f474 <lfs_mkdir_+0x78>
 801f48a:	e7bf      	b.n	801f40c <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	dbbd      	blt.n	801f40c <lfs_mkdir_+0x10>
 801f490:	f06f 0310 	mvn.w	r3, #16
 801f494:	e7ba      	b.n	801f40c <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 801f496:	4b32      	ldr	r3, [pc, #200]	@ (801f560 <lfs_mkdir_+0x164>)
 801f498:	9326      	str	r3, [sp, #152]	@ 0x98
 801f49a:	ab11      	add	r3, sp, #68	@ 0x44
 801f49c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f49e:	2301      	movs	r3, #1
 801f4a0:	aa26      	add	r2, sp, #152	@ 0x98
 801f4a2:	a913      	add	r1, sp, #76	@ 0x4c
 801f4a4:	4620      	mov	r0, r4
 801f4a6:	f7fe fe8b 	bl	801e1c0 <lfs_dir_commit>
    if (err) {
 801f4aa:	4603      	mov	r3, r0
 801f4ac:	2800      	cmp	r0, #0
 801f4ae:	d1ad      	bne.n	801f40c <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 801f4b0:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801f4b4:	bb33      	cbnz	r3, 801f504 <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801f4b6:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 801f4ba:	029b      	lsls	r3, r3, #10
 801f4bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801f4c0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801f4c4:	9203      	str	r2, [sp, #12]
 801f4c6:	2200      	movs	r2, #0
 801f4c8:	9204      	str	r2, [sp, #16]
 801f4ca:	431d      	orrs	r5, r3
 801f4cc:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801f4d0:	9505      	str	r5, [sp, #20]
 801f4d2:	9a01      	ldr	r2, [sp, #4]
 801f4d4:	9206      	str	r2, [sp, #24]
 801f4d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f4da:	f043 0308 	orr.w	r3, r3, #8
 801f4de:	9307      	str	r3, [sp, #28]
 801f4e0:	ab13      	add	r3, sp, #76	@ 0x4c
 801f4e2:	9308      	str	r3, [sp, #32]
 801f4e4:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	d134      	bne.n	801f556 <lfs_mkdir_+0x15a>
 801f4ec:	4b1c      	ldr	r3, [pc, #112]	@ (801f560 <lfs_mkdir_+0x164>)
 801f4ee:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4f0:	ab13      	add	r3, sp, #76	@ 0x4c
 801f4f2:	930a      	str	r3, [sp, #40]	@ 0x28
 801f4f4:	2304      	movs	r3, #4
 801f4f6:	aa03      	add	r2, sp, #12
 801f4f8:	a91e      	add	r1, sp, #120	@ 0x78
 801f4fa:	4620      	mov	r0, r4
 801f4fc:	f7fe fe60 	bl	801e1c0 <lfs_dir_commit>
 801f500:	4603      	mov	r3, r0
    if (err) {
 801f502:	e783      	b.n	801f40c <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801f504:	2101      	movs	r1, #1
 801f506:	4620      	mov	r0, r4
 801f508:	f7fb fe3e 	bl	801b188 <lfs_fs_preporphans>
        if (err) {
 801f50c:	4603      	mov	r3, r0
 801f50e:	2800      	cmp	r0, #0
 801f510:	f47f af7c 	bne.w	801f40c <lfs_mkdir_+0x10>
        cwd.type = 0;
 801f514:	2300      	movs	r3, #0
 801f516:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 801f51a:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 801f51e:	ab1c      	add	r3, sp, #112	@ 0x70
 801f520:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801f522:	4b0f      	ldr	r3, [pc, #60]	@ (801f560 <lfs_mkdir_+0x164>)
 801f524:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f526:	ab13      	add	r3, sp, #76	@ 0x4c
 801f528:	9329      	str	r3, [sp, #164]	@ 0xa4
 801f52a:	2301      	movs	r3, #1
 801f52c:	aa28      	add	r2, sp, #160	@ 0xa0
 801f52e:	a90b      	add	r1, sp, #44	@ 0x2c
 801f530:	4620      	mov	r0, r4
 801f532:	f7fe fe45 	bl	801e1c0 <lfs_dir_commit>
        if (err) {
 801f536:	4603      	mov	r3, r0
 801f538:	b110      	cbz	r0, 801f540 <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 801f53a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801f53c:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 801f53e:	e765      	b.n	801f40c <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 801f540:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f542:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 801f544:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f548:	4620      	mov	r0, r4
 801f54a:	f7fb fe1d 	bl	801b188 <lfs_fs_preporphans>
        if (err) {
 801f54e:	4603      	mov	r3, r0
 801f550:	2800      	cmp	r0, #0
 801f552:	d0b0      	beq.n	801f4b6 <lfs_mkdir_+0xba>
 801f554:	e75a      	b.n	801f40c <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801f556:	2300      	movs	r3, #0
 801f558:	e7c9      	b.n	801f4ee <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 801f55a:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 801f55e:	e755      	b.n	801f40c <lfs_mkdir_+0x10>
 801f560:	600ffc08 	.word	0x600ffc08

0801f564 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 801f564:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f566:	b085      	sub	sp, #20
 801f568:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 801f56a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f56e:	429a      	cmp	r2, r3
 801f570:	d02b      	beq.n	801f5ca <lfs_dir_getinfo+0x66>
 801f572:	4604      	mov	r4, r0
 801f574:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801f576:	0297      	lsls	r7, r2, #10
 801f578:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801f57a:	3301      	adds	r3, #1
 801f57c:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801f580:	9100      	str	r1, [sp, #0]
 801f582:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801f586:	4a19      	ldr	r2, [pc, #100]	@ (801f5ec <lfs_dir_getinfo+0x88>)
 801f588:	4631      	mov	r1, r6
 801f58a:	f7fb fffb 	bl	801b584 <lfs_dir_get>
    if (tag < 0) {
 801f58e:	2800      	cmp	r0, #0
 801f590:	db21      	blt.n	801f5d6 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801f592:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 801f596:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801f598:	ab02      	add	r3, sp, #8
 801f59a:	9300      	str	r3, [sp, #0]
 801f59c:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 801f5a0:	f043 0308 	orr.w	r3, r3, #8
 801f5a4:	4a12      	ldr	r2, [pc, #72]	@ (801f5f0 <lfs_dir_getinfo+0x8c>)
 801f5a6:	4631      	mov	r1, r6
 801f5a8:	4620      	mov	r0, r4
 801f5aa:	f7fb ffeb 	bl	801b584 <lfs_dir_get>
    if (tag < 0) {
 801f5ae:	2800      	cmp	r0, #0
 801f5b0:	db11      	blt.n	801f5d6 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801f5b2:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801f5b6:	f240 2202 	movw	r2, #514	@ 0x202
 801f5ba:	4293      	cmp	r3, r2
 801f5bc:	d00d      	beq.n	801f5da <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801f5be:	f240 2201 	movw	r2, #513	@ 0x201
 801f5c2:	4293      	cmp	r3, r2
 801f5c4:	d00d      	beq.n	801f5e2 <lfs_dir_getinfo+0x7e>
    return 0;
 801f5c6:	2000      	movs	r0, #0
 801f5c8:	e005      	b.n	801f5d6 <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 801f5ca:	4b0a      	ldr	r3, [pc, #40]	@ (801f5f4 <lfs_dir_getinfo+0x90>)
 801f5cc:	881b      	ldrh	r3, [r3, #0]
 801f5ce:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 801f5d0:	2302      	movs	r3, #2
 801f5d2:	702b      	strb	r3, [r5, #0]
        return 0;
 801f5d4:	2000      	movs	r0, #0
}
 801f5d6:	b005      	add	sp, #20
 801f5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 801f5da:	9b03      	ldr	r3, [sp, #12]
 801f5dc:	606b      	str	r3, [r5, #4]
    return 0;
 801f5de:	2000      	movs	r0, #0
 801f5e0:	e7f9      	b.n	801f5d6 <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 801f5e2:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 801f5e6:	6068      	str	r0, [r5, #4]
    return 0;
 801f5e8:	2000      	movs	r0, #0
 801f5ea:	e7f4      	b.n	801f5d6 <lfs_dir_getinfo+0x72>
 801f5ec:	780ffc00 	.word	0x780ffc00
 801f5f0:	700ffc00 	.word	0x700ffc00
 801f5f4:	0803a500 	.word	0x0803a500

0801f5f8 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801f5f8:	b530      	push	{r4, r5, lr}
 801f5fa:	b08b      	sub	sp, #44	@ 0x2c
 801f5fc:	4604      	mov	r4, r0
 801f5fe:	9101      	str	r1, [sp, #4]
 801f600:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801f602:	2300      	movs	r3, #0
 801f604:	aa01      	add	r2, sp, #4
 801f606:	a902      	add	r1, sp, #8
 801f608:	f7ff faee 	bl	801ebe8 <lfs_dir_find>
    if (tag < 0) {
 801f60c:	2800      	cmp	r0, #0
 801f60e:	db06      	blt.n	801f61e <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 801f610:	462b      	mov	r3, r5
 801f612:	f3c0 2289 	ubfx	r2, r0, #10, #10
 801f616:	a902      	add	r1, sp, #8
 801f618:	4620      	mov	r0, r4
 801f61a:	f7ff ffa3 	bl	801f564 <lfs_dir_getinfo>
}
 801f61e:	b00b      	add	sp, #44	@ 0x2c
 801f620:	bd30      	pop	{r4, r5, pc}
	...

0801f624 <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801f624:	b570      	push	{r4, r5, r6, lr}
 801f626:	4605      	mov	r5, r0
 801f628:	460c      	mov	r4, r1
 801f62a:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 801f62c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801f630:	2100      	movs	r1, #0
 801f632:	4630      	mov	r0, r6
 801f634:	f00d f9cc 	bl	802c9d0 <memset>
    if (dir->pos == 0) {
 801f638:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f63a:	b183      	cbz	r3, 801f65e <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 801f63c:	2b01      	cmp	r3, #1
 801f63e:	d11f      	bne.n	801f680 <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 801f640:	4633      	mov	r3, r6
 801f642:	2202      	movs	r2, #2
 801f644:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 801f648:	4a22      	ldr	r2, [pc, #136]	@ (801f6d4 <lfs_dir_read_+0xb0>)
 801f64a:	8811      	ldrh	r1, [r2, #0]
 801f64c:	7892      	ldrb	r2, [r2, #2]
 801f64e:	8131      	strh	r1, [r6, #8]
 801f650:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801f652:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f654:	3301      	adds	r3, #1
 801f656:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801f658:	f04f 0c01 	mov.w	ip, #1
 801f65c:	e034      	b.n	801f6c8 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 801f65e:	2302      	movs	r3, #2
 801f660:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 801f662:	4b1d      	ldr	r3, [pc, #116]	@ (801f6d8 <lfs_dir_read_+0xb4>)
 801f664:	881b      	ldrh	r3, [r3, #0]
 801f666:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 801f668:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f66a:	3301      	adds	r3, #1
 801f66c:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801f66e:	f04f 0c01 	mov.w	ip, #1
 801f672:	e029      	b.n	801f6c8 <lfs_dir_read_+0xa4>
        dir->id += 1;
 801f674:	88a1      	ldrh	r1, [r4, #4]
 801f676:	3101      	adds	r1, #1
 801f678:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 801f67a:	f11c 0f02 	cmn.w	ip, #2
 801f67e:	d11e      	bne.n	801f6be <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 801f680:	88a3      	ldrh	r3, [r4, #4]
 801f682:	8ba1      	ldrh	r1, [r4, #28]
 801f684:	428b      	cmp	r3, r1
 801f686:	d10c      	bne.n	801f6a2 <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 801f688:	7fe3      	ldrb	r3, [r4, #31]
 801f68a:	b1fb      	cbz	r3, 801f6cc <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801f68c:	f104 0220 	add.w	r2, r4, #32
 801f690:	f104 0108 	add.w	r1, r4, #8
 801f694:	4628      	mov	r0, r5
 801f696:	f7fc ff63 	bl	801c560 <lfs_dir_fetch>
            if (err) {
 801f69a:	4684      	mov	ip, r0
 801f69c:	b9a0      	cbnz	r0, 801f6c8 <lfs_dir_read_+0xa4>
            dir->id = 0;
 801f69e:	2300      	movs	r3, #0
 801f6a0:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801f6a2:	4633      	mov	r3, r6
 801f6a4:	88a2      	ldrh	r2, [r4, #4]
 801f6a6:	f104 0108 	add.w	r1, r4, #8
 801f6aa:	4628      	mov	r0, r5
 801f6ac:	f7ff ff5a 	bl	801f564 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 801f6b0:	4684      	mov	ip, r0
 801f6b2:	2800      	cmp	r0, #0
 801f6b4:	d0de      	beq.n	801f674 <lfs_dir_read_+0x50>
 801f6b6:	f110 0f02 	cmn.w	r0, #2
 801f6ba:	d0db      	beq.n	801f674 <lfs_dir_read_+0x50>
 801f6bc:	e004      	b.n	801f6c8 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 801f6be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f6c0:	3301      	adds	r3, #1
 801f6c2:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 801f6c4:	f04f 0c01 	mov.w	ip, #1
}
 801f6c8:	4660      	mov	r0, ip
 801f6ca:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 801f6cc:	f04f 0c00 	mov.w	ip, #0
 801f6d0:	e7fa      	b.n	801f6c8 <lfs_dir_read_+0xa4>
 801f6d2:	bf00      	nop
 801f6d4:	08039cc0 	.word	0x08039cc0
 801f6d8:	080360c0 	.word	0x080360c0

0801f6dc <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 801f6dc:	b570      	push	{r4, r5, r6, lr}
 801f6de:	4605      	mov	r5, r0
 801f6e0:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801f6e2:	694b      	ldr	r3, [r1, #20]
 801f6e4:	4608      	mov	r0, r1
 801f6e6:	4798      	blx	r3
    if (err) {
 801f6e8:	4606      	mov	r6, r0
 801f6ea:	b108      	cbz	r0, 801f6f0 <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801f6ec:	4630      	mov	r0, r6
 801f6ee:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 801f6f0:	4621      	mov	r1, r4
 801f6f2:	4628      	mov	r0, r5
 801f6f4:	f7ff f860 	bl	801e7b8 <lfs_format_>
 801f6f8:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801f6fa:	69a3      	ldr	r3, [r4, #24]
 801f6fc:	4620      	mov	r0, r4
 801f6fe:	4798      	blx	r3
    return err;
 801f700:	e7f4      	b.n	801f6ec <lfs_format+0x10>

0801f702 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 801f702:	b570      	push	{r4, r5, r6, lr}
 801f704:	4605      	mov	r5, r0
 801f706:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801f708:	694b      	ldr	r3, [r1, #20]
 801f70a:	4608      	mov	r0, r1
 801f70c:	4798      	blx	r3
    if (err) {
 801f70e:	4606      	mov	r6, r0
 801f710:	b108      	cbz	r0, 801f716 <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801f712:	4630      	mov	r0, r6
 801f714:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 801f716:	4621      	mov	r1, r4
 801f718:	4628      	mov	r0, r5
 801f71a:	f7ff f8cb 	bl	801e8b4 <lfs_mount_>
 801f71e:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801f720:	69a3      	ldr	r3, [r4, #24]
 801f722:	4620      	mov	r0, r4
 801f724:	4798      	blx	r3
    return err;
 801f726:	e7f4      	b.n	801f712 <lfs_mount+0x10>

0801f728 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 801f728:	b570      	push	{r4, r5, r6, lr}
 801f72a:	4604      	mov	r4, r0
 801f72c:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f72e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f730:	6943      	ldr	r3, [r0, #20]
 801f732:	4798      	blx	r3
    if (err) {
 801f734:	4606      	mov	r6, r0
 801f736:	b108      	cbz	r0, 801f73c <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f738:	4630      	mov	r0, r6
 801f73a:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 801f73c:	4629      	mov	r1, r5
 801f73e:	4620      	mov	r0, r4
 801f740:	f7ff fb0e 	bl	801ed60 <lfs_remove_>
 801f744:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f746:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f748:	6983      	ldr	r3, [r0, #24]
 801f74a:	4798      	blx	r3
    return err;
 801f74c:	e7f4      	b.n	801f738 <lfs_remove+0x10>

0801f74e <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801f74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f750:	4604      	mov	r4, r0
 801f752:	460d      	mov	r5, r1
 801f754:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801f756:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f758:	6943      	ldr	r3, [r0, #20]
 801f75a:	4798      	blx	r3
    if (err) {
 801f75c:	4607      	mov	r7, r0
 801f75e:	b108      	cbz	r0, 801f764 <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f760:	4638      	mov	r0, r7
 801f762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 801f764:	4632      	mov	r2, r6
 801f766:	4629      	mov	r1, r5
 801f768:	4620      	mov	r0, r4
 801f76a:	f7ff fbb9 	bl	801eee0 <lfs_rename_>
 801f76e:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f770:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f772:	6983      	ldr	r3, [r0, #24]
 801f774:	4798      	blx	r3
    return err;
 801f776:	e7f3      	b.n	801f760 <lfs_rename+0x12>

0801f778 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801f778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f77a:	4604      	mov	r4, r0
 801f77c:	460d      	mov	r5, r1
 801f77e:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801f780:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f782:	6943      	ldr	r3, [r0, #20]
 801f784:	4798      	blx	r3
    if (err) {
 801f786:	4607      	mov	r7, r0
 801f788:	b108      	cbz	r0, 801f78e <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f78a:	4638      	mov	r0, r7
 801f78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 801f78e:	4632      	mov	r2, r6
 801f790:	4629      	mov	r1, r5
 801f792:	4620      	mov	r0, r4
 801f794:	f7ff ff30 	bl	801f5f8 <lfs_stat_>
 801f798:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f79a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f79c:	6983      	ldr	r3, [r0, #24]
 801f79e:	4798      	blx	r3
    return err;
 801f7a0:	e7f3      	b.n	801f78a <lfs_stat+0x12>
	...

0801f7a4 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801f7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7a8:	4604      	mov	r4, r0
 801f7aa:	460d      	mov	r5, r1
 801f7ac:	4616      	mov	r6, r2
 801f7ae:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f7b0:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f7b2:	6942      	ldr	r2, [r0, #20]
 801f7b4:	4790      	blx	r2
    if (err) {
 801f7b6:	4607      	mov	r7, r0
 801f7b8:	b110      	cbz	r0, 801f7c0 <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f7ba:	4638      	mov	r0, r7
 801f7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f7c0:	4629      	mov	r1, r5
 801f7c2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f7c4:	f7fb fbc7 	bl	801af56 <lfs_mlist_isopen>
 801f7c8:	b950      	cbnz	r0, 801f7e0 <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 801f7ca:	4643      	mov	r3, r8
 801f7cc:	4632      	mov	r2, r6
 801f7ce:	4629      	mov	r1, r5
 801f7d0:	4620      	mov	r0, r4
 801f7d2:	f7ff fe09 	bl	801f3e8 <lfs_file_open_>
 801f7d6:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f7d8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f7da:	6983      	ldr	r3, [r0, #24]
 801f7dc:	4798      	blx	r3
    return err;
 801f7de:	e7ec      	b.n	801f7ba <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f7e0:	4b03      	ldr	r3, [pc, #12]	@ (801f7f0 <lfs_file_open+0x4c>)
 801f7e2:	4a04      	ldr	r2, [pc, #16]	@ (801f7f4 <lfs_file_open+0x50>)
 801f7e4:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801f7e8:	4803      	ldr	r0, [pc, #12]	@ (801f7f8 <lfs_file_open+0x54>)
 801f7ea:	f00a fb9f 	bl	8029f2c <__assert_func>
 801f7ee:	bf00      	nop
 801f7f0:	08039cc4 	.word	0x08039cc4
 801f7f4:	08039df8 	.word	0x08039df8
 801f7f8:	08039148 	.word	0x08039148

0801f7fc <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801f7fc:	b570      	push	{r4, r5, r6, lr}
 801f7fe:	4604      	mov	r4, r0
 801f800:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f802:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f804:	6943      	ldr	r3, [r0, #20]
 801f806:	4798      	blx	r3
    if (err) {
 801f808:	4606      	mov	r6, r0
 801f80a:	b108      	cbz	r0, 801f810 <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f80c:	4630      	mov	r0, r6
 801f80e:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f810:	4629      	mov	r1, r5
 801f812:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f814:	f7fb fb9f 	bl	801af56 <lfs_mlist_isopen>
 801f818:	b140      	cbz	r0, 801f82c <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 801f81a:	4629      	mov	r1, r5
 801f81c:	4620      	mov	r0, r4
 801f81e:	f7ff f9cf 	bl	801ebc0 <lfs_file_close_>
 801f822:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f824:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f826:	6983      	ldr	r3, [r0, #24]
 801f828:	4798      	blx	r3
    return err;
 801f82a:	e7ef      	b.n	801f80c <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f82c:	4b03      	ldr	r3, [pc, #12]	@ (801f83c <lfs_file_close+0x40>)
 801f82e:	4a04      	ldr	r2, [pc, #16]	@ (801f840 <lfs_file_close+0x44>)
 801f830:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 801f834:	4803      	ldr	r0, [pc, #12]	@ (801f844 <lfs_file_close+0x48>)
 801f836:	f00a fb79 	bl	8029f2c <__assert_func>
 801f83a:	bf00      	nop
 801f83c:	08039cfc 	.word	0x08039cfc
 801f840:	08039ddc 	.word	0x08039ddc
 801f844:	08039148 	.word	0x08039148

0801f848 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801f848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f84c:	4604      	mov	r4, r0
 801f84e:	460d      	mov	r5, r1
 801f850:	4616      	mov	r6, r2
 801f852:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f854:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f856:	6942      	ldr	r2, [r0, #20]
 801f858:	4790      	blx	r2
    if (err) {
 801f85a:	4607      	mov	r7, r0
 801f85c:	b110      	cbz	r0, 801f864 <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f85e:	4638      	mov	r0, r7
 801f860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f864:	4629      	mov	r1, r5
 801f866:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f868:	f7fb fb75 	bl	801af56 <lfs_mlist_isopen>
 801f86c:	b150      	cbz	r0, 801f884 <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801f86e:	4643      	mov	r3, r8
 801f870:	4632      	mov	r2, r6
 801f872:	4629      	mov	r1, r5
 801f874:	4620      	mov	r0, r4
 801f876:	f7fd fac1 	bl	801cdfc <lfs_file_read_>
 801f87a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f87c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f87e:	6983      	ldr	r3, [r0, #24]
 801f880:	4798      	blx	r3
    return res;
 801f882:	e7ec      	b.n	801f85e <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f884:	4b03      	ldr	r3, [pc, #12]	@ (801f894 <lfs_file_read+0x4c>)
 801f886:	4a04      	ldr	r2, [pc, #16]	@ (801f898 <lfs_file_read+0x50>)
 801f888:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801f88c:	4803      	ldr	r0, [pc, #12]	@ (801f89c <lfs_file_read+0x54>)
 801f88e:	f00a fb4d 	bl	8029f2c <__assert_func>
 801f892:	bf00      	nop
 801f894:	08039cfc 	.word	0x08039cfc
 801f898:	08039dcc 	.word	0x08039dcc
 801f89c:	08039148 	.word	0x08039148

0801f8a0 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801f8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8a4:	4604      	mov	r4, r0
 801f8a6:	460d      	mov	r5, r1
 801f8a8:	4616      	mov	r6, r2
 801f8aa:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f8ac:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f8ae:	6942      	ldr	r2, [r0, #20]
 801f8b0:	4790      	blx	r2
    if (err) {
 801f8b2:	4607      	mov	r7, r0
 801f8b4:	b110      	cbz	r0, 801f8bc <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f8b6:	4638      	mov	r0, r7
 801f8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f8bc:	4629      	mov	r1, r5
 801f8be:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f8c0:	f7fb fb49 	bl	801af56 <lfs_mlist_isopen>
 801f8c4:	b150      	cbz	r0, 801f8dc <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 801f8c6:	4643      	mov	r3, r8
 801f8c8:	4632      	mov	r2, r6
 801f8ca:	4629      	mov	r1, r5
 801f8cc:	4620      	mov	r0, r4
 801f8ce:	f7fd fb05 	bl	801cedc <lfs_file_write_>
 801f8d2:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f8d4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f8d6:	6983      	ldr	r3, [r0, #24]
 801f8d8:	4798      	blx	r3
    return res;
 801f8da:	e7ec      	b.n	801f8b6 <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f8dc:	4b03      	ldr	r3, [pc, #12]	@ (801f8ec <lfs_file_write+0x4c>)
 801f8de:	4a04      	ldr	r2, [pc, #16]	@ (801f8f0 <lfs_file_write+0x50>)
 801f8e0:	f641 0105 	movw	r1, #6149	@ 0x1805
 801f8e4:	4803      	ldr	r0, [pc, #12]	@ (801f8f4 <lfs_file_write+0x54>)
 801f8e6:	f00a fb21 	bl	8029f2c <__assert_func>
 801f8ea:	bf00      	nop
 801f8ec:	08039cfc 	.word	0x08039cfc
 801f8f0:	08039dac 	.word	0x08039dac
 801f8f4:	08039148 	.word	0x08039148

0801f8f8 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801f8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8fc:	4604      	mov	r4, r0
 801f8fe:	460d      	mov	r5, r1
 801f900:	4616      	mov	r6, r2
 801f902:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f904:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f906:	6942      	ldr	r2, [r0, #20]
 801f908:	4790      	blx	r2
    if (err) {
 801f90a:	4607      	mov	r7, r0
 801f90c:	b110      	cbz	r0, 801f914 <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f90e:	4638      	mov	r0, r7
 801f910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f914:	4629      	mov	r1, r5
 801f916:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f918:	f7fb fb1d 	bl	801af56 <lfs_mlist_isopen>
 801f91c:	b150      	cbz	r0, 801f934 <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 801f91e:	4643      	mov	r3, r8
 801f920:	4632      	mov	r2, r6
 801f922:	4629      	mov	r1, r5
 801f924:	4620      	mov	r0, r4
 801f926:	f7fd fa8d 	bl	801ce44 <lfs_file_seek_>
 801f92a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f92c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f92e:	6983      	ldr	r3, [r0, #24]
 801f930:	4798      	blx	r3
    return res;
 801f932:	e7ec      	b.n	801f90e <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f934:	4b03      	ldr	r3, [pc, #12]	@ (801f944 <lfs_file_seek+0x4c>)
 801f936:	4a04      	ldr	r2, [pc, #16]	@ (801f948 <lfs_file_seek+0x50>)
 801f938:	f641 0117 	movw	r1, #6167	@ 0x1817
 801f93c:	4803      	ldr	r0, [pc, #12]	@ (801f94c <lfs_file_seek+0x54>)
 801f93e:	f00a faf5 	bl	8029f2c <__assert_func>
 801f942:	bf00      	nop
 801f944:	08039cfc 	.word	0x08039cfc
 801f948:	08039d8c 	.word	0x08039d8c
 801f94c:	08039148 	.word	0x08039148

0801f950 <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 801f950:	b570      	push	{r4, r5, r6, lr}
 801f952:	4604      	mov	r4, r0
 801f954:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f956:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f958:	6943      	ldr	r3, [r0, #20]
 801f95a:	4798      	blx	r3
    if (err) {
 801f95c:	4606      	mov	r6, r0
 801f95e:	b108      	cbz	r0, 801f964 <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f960:	4630      	mov	r0, r6
 801f962:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f964:	4629      	mov	r1, r5
 801f966:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f968:	f7fb faf5 	bl	801af56 <lfs_mlist_isopen>
 801f96c:	b140      	cbz	r0, 801f980 <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 801f96e:	4629      	mov	r1, r5
 801f970:	4620      	mov	r0, r4
 801f972:	f7fb fba4 	bl	801b0be <lfs_file_tell_>
 801f976:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f978:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f97a:	6983      	ldr	r3, [r0, #24]
 801f97c:	4798      	blx	r3
    return res;
 801f97e:	e7ef      	b.n	801f960 <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f980:	4b03      	ldr	r3, [pc, #12]	@ (801f990 <lfs_file_tell+0x40>)
 801f982:	4a04      	ldr	r2, [pc, #16]	@ (801f994 <lfs_file_tell+0x44>)
 801f984:	f641 0138 	movw	r1, #6200	@ 0x1838
 801f988:	4803      	ldr	r0, [pc, #12]	@ (801f998 <lfs_file_tell+0x48>)
 801f98a:	f00a facf 	bl	8029f2c <__assert_func>
 801f98e:	bf00      	nop
 801f990:	08039cfc 	.word	0x08039cfc
 801f994:	08039d7c 	.word	0x08039d7c
 801f998:	08039148 	.word	0x08039148

0801f99c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801f99c:	b570      	push	{r4, r5, r6, lr}
 801f99e:	4604      	mov	r4, r0
 801f9a0:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f9a2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f9a4:	6943      	ldr	r3, [r0, #20]
 801f9a6:	4798      	blx	r3
    if (err) {
 801f9a8:	4606      	mov	r6, r0
 801f9aa:	b108      	cbz	r0, 801f9b0 <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f9ac:	4630      	mov	r0, r6
 801f9ae:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 801f9b0:	4629      	mov	r1, r5
 801f9b2:	4620      	mov	r0, r4
 801f9b4:	f7ff fd22 	bl	801f3fc <lfs_mkdir_>
 801f9b8:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f9ba:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f9bc:	6983      	ldr	r3, [r0, #24]
 801f9be:	4798      	blx	r3
    return err;
 801f9c0:	e7f4      	b.n	801f9ac <lfs_mkdir+0x10>
	...

0801f9c4 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801f9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9c6:	4604      	mov	r4, r0
 801f9c8:	460f      	mov	r7, r1
 801f9ca:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 801f9cc:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f9ce:	6943      	ldr	r3, [r0, #20]
 801f9d0:	4798      	blx	r3
    if (err) {
 801f9d2:	4606      	mov	r6, r0
 801f9d4:	b108      	cbz	r0, 801f9da <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f9d6:	4630      	mov	r0, r6
 801f9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801f9da:	4639      	mov	r1, r7
 801f9dc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f9de:	f7fb faba 	bl	801af56 <lfs_mlist_isopen>
 801f9e2:	b948      	cbnz	r0, 801f9f8 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 801f9e4:	462a      	mov	r2, r5
 801f9e6:	4639      	mov	r1, r7
 801f9e8:	4620      	mov	r0, r4
 801f9ea:	f7ff fa31 	bl	801ee50 <lfs_dir_open_>
 801f9ee:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f9f0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f9f2:	6983      	ldr	r3, [r0, #24]
 801f9f4:	4798      	blx	r3
    return err;
 801f9f6:	e7ee      	b.n	801f9d6 <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801f9f8:	4b03      	ldr	r3, [pc, #12]	@ (801fa08 <lfs_dir_open+0x44>)
 801f9fa:	4a04      	ldr	r2, [pc, #16]	@ (801fa0c <lfs_dir_open+0x48>)
 801f9fc:	f641 0174 	movw	r1, #6260	@ 0x1874
 801fa00:	4803      	ldr	r0, [pc, #12]	@ (801fa10 <lfs_dir_open+0x4c>)
 801fa02:	f00a fa93 	bl	8029f2c <__assert_func>
 801fa06:	bf00      	nop
 801fa08:	08039d34 	.word	0x08039d34
 801fa0c:	08039d6c 	.word	0x08039d6c
 801fa10:	08039148 	.word	0x08039148

0801fa14 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 801fa14:	b570      	push	{r4, r5, r6, lr}
 801fa16:	4604      	mov	r4, r0
 801fa18:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801fa1a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fa1c:	6943      	ldr	r3, [r0, #20]
 801fa1e:	4798      	blx	r3
    if (err) {
 801fa20:	4606      	mov	r6, r0
 801fa22:	b108      	cbz	r0, 801fa28 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fa24:	4630      	mov	r0, r6
 801fa26:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 801fa28:	4629      	mov	r1, r5
 801fa2a:	4620      	mov	r0, r4
 801fa2c:	f7fb fb42 	bl	801b0b4 <lfs_dir_close_>
 801fa30:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801fa32:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fa34:	6983      	ldr	r3, [r0, #24]
 801fa36:	4798      	blx	r3
    return err;
 801fa38:	e7f4      	b.n	801fa24 <lfs_dir_close+0x10>

0801fa3a <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801fa3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa3c:	4604      	mov	r4, r0
 801fa3e:	460d      	mov	r5, r1
 801fa40:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801fa42:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fa44:	6943      	ldr	r3, [r0, #20]
 801fa46:	4798      	blx	r3
    if (err) {
 801fa48:	4607      	mov	r7, r0
 801fa4a:	b108      	cbz	r0, 801fa50 <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fa4c:	4638      	mov	r0, r7
 801fa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 801fa50:	4632      	mov	r2, r6
 801fa52:	4629      	mov	r1, r5
 801fa54:	4620      	mov	r0, r4
 801fa56:	f7ff fde5 	bl	801f624 <lfs_dir_read_>
 801fa5a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fa5c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fa5e:	6983      	ldr	r3, [r0, #24]
 801fa60:	4798      	blx	r3
    return err;
 801fa62:	e7f3      	b.n	801fa4c <lfs_dir_read+0x12>

0801fa64 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 801fa64:	f04f 0c00 	mov.w	ip, #0
 801fa68:	4594      	cmp	ip, r2
 801fa6a:	d218      	bcs.n	801fa9e <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 801fa6c:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 801fa6e:	f811 300c 	ldrb.w	r3, [r1, ip]
 801fa72:	ea83 0e00 	eor.w	lr, r3, r0
 801fa76:	f00e 0e0f 	and.w	lr, lr, #15
 801fa7a:	4c09      	ldr	r4, [pc, #36]	@ (801faa0 <lfs_crc+0x3c>)
 801fa7c:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 801fa80:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 801fa84:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 801fa88:	f003 030f 	and.w	r3, r3, #15
 801fa8c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fa90:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 801fa94:	f10c 0c01 	add.w	ip, ip, #1
 801fa98:	4594      	cmp	ip, r2
 801fa9a:	d3e8      	bcc.n	801fa6e <lfs_crc+0xa>
    }

    return crc;
}
 801fa9c:	bd30      	pop	{r4, r5, pc}
 801fa9e:	4770      	bx	lr
 801faa0:	08039ee0 	.word	0x08039ee0

0801faa4 <mg_base64_decode_single>:
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
  if (c >= 'A' && c <= 'Z') {
 801faa4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801faa8:	2b19      	cmp	r3, #25
 801faaa:	d913      	bls.n	801fad4 <mg_base64_decode_single+0x30>
    return c - 'A';
  } else if (c >= 'a' && c <= 'z') {
 801faac:	283d      	cmp	r0, #61	@ 0x3d
 801faae:	dc18      	bgt.n	801fae2 <mg_base64_decode_single+0x3e>
 801fab0:	282b      	cmp	r0, #43	@ 0x2b
 801fab2:	db20      	blt.n	801faf6 <mg_base64_decode_single+0x52>
 801fab4:	f1a0 032b 	sub.w	r3, r0, #43	@ 0x2b
 801fab8:	2b12      	cmp	r3, #18
 801faba:	d80f      	bhi.n	801fadc <mg_base64_decode_single+0x38>
 801fabc:	e8df f003 	tbb	[pc, r3]
 801fac0:	0e0e0e0c 	.word	0x0e0e0e0c
 801fac4:	1717171e 	.word	0x1717171e
 801fac8:	17171717 	.word	0x17171717
 801facc:	0e171717 	.word	0x0e171717
 801fad0:	0e0e      	.short	0x0e0e
 801fad2:	19          	.byte	0x19
 801fad3:	00          	.byte	0x00
    return c - 'A';
 801fad4:	4618      	mov	r0, r3
 801fad6:	4770      	bx	lr
  if (c >= 'A' && c <= 'Z') {
 801fad8:	203e      	movs	r0, #62	@ 0x3e
 801fada:	4770      	bx	lr
  } else if (c == '/') {
    return 63;
  } else if (c == '=') {
    return 64;
  } else {
    return -1;
 801fadc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fae0:	4770      	bx	lr
 801fae2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801fae6:	2b19      	cmp	r3, #25
 801fae8:	d80a      	bhi.n	801fb00 <mg_base64_decode_single+0x5c>
    return c + 26 - 'a';
 801faea:	3847      	subs	r0, #71	@ 0x47
 801faec:	4770      	bx	lr
    return c + 52 - '0';
 801faee:	3004      	adds	r0, #4
 801faf0:	4770      	bx	lr
    return 64;
 801faf2:	2040      	movs	r0, #64	@ 0x40
 801faf4:	4770      	bx	lr
    return -1;
 801faf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fafa:	4770      	bx	lr
    return 63;
 801fafc:	203f      	movs	r0, #63	@ 0x3f
 801fafe:	4770      	bx	lr
    return -1;
 801fb00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  }
}
 801fb04:	4770      	bx	lr

0801fb06 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 801fb06:	3830      	subs	r0, #48	@ 0x30
}
 801fb08:	2809      	cmp	r0, #9
 801fb0a:	bf8c      	ite	hi
 801fb0c:	2000      	movhi	r0, #0
 801fb0e:	2001      	movls	r0, #1
 801fb10:	4770      	bx	lr
	...

0801fb14 <addexp>:

static int addexp(char *buf, int e, int sign) {
 801fb14:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 801fb16:	2365      	movs	r3, #101	@ 0x65
 801fb18:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 801fb1a:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 801fb1c:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 801fb20:	dc2c      	bgt.n	801fb7c <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 801fb22:	2909      	cmp	r1, #9
 801fb24:	dc03      	bgt.n	801fb2e <addexp+0x1a>
 801fb26:	2330      	movs	r3, #48	@ 0x30
 801fb28:	7083      	strb	r3, [r0, #2]
 801fb2a:	2303      	movs	r3, #3
 801fb2c:	e000      	b.n	801fb30 <addexp+0x1c>
  buf[n++] = (char) sign;
 801fb2e:	2302      	movs	r3, #2
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 801fb30:	2963      	cmp	r1, #99	@ 0x63
 801fb32:	dd0d      	ble.n	801fb50 <addexp+0x3c>
 801fb34:	4812      	ldr	r0, [pc, #72]	@ (801fb80 <addexp+0x6c>)
 801fb36:	fb80 2001 	smull	r2, r0, r0, r1
 801fb3a:	17ca      	asrs	r2, r1, #31
 801fb3c:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 801fb40:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801fb44:	f80c 0003 	strb.w	r0, [ip, r3]
 801fb48:	2064      	movs	r0, #100	@ 0x64
 801fb4a:	fb00 1112 	mls	r1, r0, r2, r1
 801fb4e:	3301      	adds	r3, #1
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 801fb50:	2909      	cmp	r1, #9
 801fb52:	dd0e      	ble.n	801fb72 <addexp+0x5e>
 801fb54:	480b      	ldr	r0, [pc, #44]	@ (801fb84 <addexp+0x70>)
 801fb56:	fb80 2001 	smull	r2, r0, r0, r1
 801fb5a:	17ca      	asrs	r2, r1, #31
 801fb5c:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 801fb60:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801fb64:	f80c 0003 	strb.w	r0, [ip, r3]
 801fb68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fb6c:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 801fb70:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 801fb72:	1c58      	adds	r0, r3, #1
 801fb74:	3130      	adds	r1, #48	@ 0x30
 801fb76:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 801fb7a:	4770      	bx	lr
  if (e > 400) return 0;
 801fb7c:	2000      	movs	r0, #0
}
 801fb7e:	4770      	bx	lr
 801fb80:	51eb851f 	.word	0x51eb851f
 801fb84:	66666667 	.word	0x66666667

0801fb88 <xisinf>:

static int xisinf(double x) {
 801fb88:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 801fb8c:	4611      	mov	r1, r2
 801fb8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801fb92:	4a05      	ldr	r2, [pc, #20]	@ (801fba8 <xisinf+0x20>)
 801fb94:	4293      	cmp	r3, r2
 801fb96:	d001      	beq.n	801fb9c <xisinf+0x14>
 801fb98:	2000      	movs	r0, #0
 801fb9a:	4770      	bx	lr
 801fb9c:	b109      	cbz	r1, 801fba2 <xisinf+0x1a>
 801fb9e:	2000      	movs	r0, #0
 801fba0:	4770      	bx	lr
 801fba2:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 801fba4:	4770      	bx	lr
 801fba6:	bf00      	nop
 801fba8:	7ff00000 	.word	0x7ff00000

0801fbac <xisnan>:

static int xisnan(double x) {
 801fbac:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 801fbb0:	4602      	mov	r2, r0
 801fbb2:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 801fbb6:	2a00      	cmp	r2, #0
 801fbb8:	bf18      	it	ne
 801fbba:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 801fbbc:	4b02      	ldr	r3, [pc, #8]	@ (801fbc8 <xisnan+0x1c>)
 801fbbe:	4298      	cmp	r0, r3
 801fbc0:	bf94      	ite	ls
 801fbc2:	2000      	movls	r0, #0
 801fbc4:	2001      	movhi	r0, #1
 801fbc6:	4770      	bx	lr
 801fbc8:	7ff00000 	.word	0x7ff00000

0801fbcc <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 801fbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fbd0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801fbd4:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 801fbd8:	4694      	mov	ip, r2
 801fbda:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801fbdc:	b15c      	cbz	r4, 801fbf6 <mg_lld+0x2a>
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	db01      	blt.n	801fbe6 <mg_lld+0x1a>
  size_t s = 0, n, i;
 801fbe2:	2500      	movs	r5, #0
 801fbe4:	e008      	b.n	801fbf8 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801fbe6:	242d      	movs	r4, #45	@ 0x2d
 801fbe8:	7004      	strb	r4, [r0, #0]
 801fbea:	f1d2 0c00 	rsbs	ip, r2, #0
 801fbee:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 801fbf2:	2501      	movs	r5, #1
 801fbf4:	e000      	b.n	801fbf8 <mg_lld+0x2c>
  size_t s = 0, n, i;
 801fbf6:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 801fbf8:	b909      	cbnz	r1, 801fbfe <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801fbfa:	2400      	movs	r4, #0
 801fbfc:	e02f      	b.n	801fc5e <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 801fbfe:	2400      	movs	r4, #0
 801fc00:	ea5c 010e 	orrs.w	r1, ip, lr
 801fc04:	d05a      	beq.n	801fcbc <mg_lld+0xf0>
 801fc06:	f00c 060f 	and.w	r6, ip, #15
 801fc0a:	1929      	adds	r1, r5, r4
 801fc0c:	4f38      	ldr	r7, [pc, #224]	@ (801fcf0 <mg_lld+0x124>)
 801fc0e:	5dbe      	ldrb	r6, [r7, r6]
 801fc10:	5446      	strb	r6, [r0, r1]
 801fc12:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 801fc16:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 801fc1a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801fc1e:	3401      	adds	r4, #1
 801fc20:	e7ee      	b.n	801fc00 <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801fc22:	2601      	movs	r6, #1
 801fc24:	e022      	b.n	801fc6c <mg_lld+0xa0>
 801fc26:	4421      	add	r1, r4
 801fc28:	4f32      	ldr	r7, [pc, #200]	@ (801fcf4 <mg_lld+0x128>)
 801fc2a:	fba7 4801 	umull	r4, r8, r7, r1
 801fc2e:	f028 0403 	bic.w	r4, r8, #3
 801fc32:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 801fc36:	1b09      	subs	r1, r1, r4
 801fc38:	ebbc 0101 	subs.w	r1, ip, r1
 801fc3c:	f16e 0e00 	sbc.w	lr, lr, #0
 801fc40:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 801fc44:	fb01 f404 	mul.w	r4, r1, r4
 801fc48:	fb07 440e 	mla	r4, r7, lr, r4
 801fc4c:	fba1 1707 	umull	r1, r7, r1, r7
 801fc50:	443c      	add	r4, r7
 801fc52:	0849      	lsrs	r1, r1, #1
 801fc54:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 801fc58:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 801fc5c:	4634      	mov	r4, r6
 801fc5e:	ea5c 010e 	orrs.w	r1, ip, lr
 801fc62:	d02b      	beq.n	801fcbc <mg_lld+0xf0>
 801fc64:	2600      	movs	r6, #0
 801fc66:	eb1c 010e 	adds.w	r1, ip, lr
 801fc6a:	d2da      	bcs.n	801fc22 <mg_lld+0x56>
 801fc6c:	4431      	add	r1, r6
 801fc6e:	4f21      	ldr	r7, [pc, #132]	@ (801fcf4 <mg_lld+0x128>)
 801fc70:	fba7 6801 	umull	r6, r8, r7, r1
 801fc74:	f028 0603 	bic.w	r6, r8, #3
 801fc78:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 801fc7c:	1b89      	subs	r1, r1, r6
 801fc7e:	ebbc 0101 	subs.w	r1, ip, r1
 801fc82:	f16e 0800 	sbc.w	r8, lr, #0
 801fc86:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 801fc8a:	fb01 f606 	mul.w	r6, r1, r6
 801fc8e:	fb07 6608 	mla	r6, r7, r8, r6
 801fc92:	fba1 1707 	umull	r1, r7, r1, r7
 801fc96:	443e      	add	r6, r7
 801fc98:	0849      	lsrs	r1, r1, #1
 801fc9a:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 801fc9e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801fca2:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 801fca6:	1c66      	adds	r6, r4, #1
 801fca8:	442c      	add	r4, r5
 801fcaa:	4f11      	ldr	r7, [pc, #68]	@ (801fcf0 <mg_lld+0x124>)
 801fcac:	5c79      	ldrb	r1, [r7, r1]
 801fcae:	5501      	strb	r1, [r0, r4]
 801fcb0:	2400      	movs	r4, #0
 801fcb2:	eb1c 010e 	adds.w	r1, ip, lr
 801fcb6:	d3b6      	bcc.n	801fc26 <mg_lld+0x5a>
 801fcb8:	2401      	movs	r4, #1
 801fcba:	e7b4      	b.n	801fc26 <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 801fcbc:	2600      	movs	r6, #0
 801fcbe:	e00c      	b.n	801fcda <mg_lld+0x10e>
    char t = buf[s + i];
 801fcc0:	19af      	adds	r7, r5, r6
 801fcc2:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 801fcc6:	1929      	adds	r1, r5, r4
 801fcc8:	1b89      	subs	r1, r1, r6
 801fcca:	3901      	subs	r1, #1
 801fccc:	f810 e001 	ldrb.w	lr, [r0, r1]
 801fcd0:	f800 e007 	strb.w	lr, [r0, r7]
 801fcd4:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 801fcd8:	3601      	adds	r6, #1
 801fcda:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 801fcde:	d3ef      	bcc.n	801fcc0 <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 801fce0:	4313      	orrs	r3, r2
 801fce2:	d102      	bne.n	801fcea <mg_lld+0x11e>
 801fce4:	2330      	movs	r3, #48	@ 0x30
 801fce6:	5503      	strb	r3, [r0, r4]
 801fce8:	3401      	adds	r4, #1
  return n + s;
}
 801fcea:	1928      	adds	r0, r5, r4
 801fcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fcf0:	08039f20 	.word	0x08039f20
 801fcf4:	cccccccd 	.word	0xcccccccd

0801fcf8 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 801fcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fcfc:	4680      	mov	r8, r0
 801fcfe:	460f      	mov	r7, r1
 801fd00:	4616      	mov	r6, r2
 801fd02:	461d      	mov	r5, r3
  size_t i = 0;
 801fd04:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 801fd06:	e002      	b.n	801fd0e <scpy+0x16>
 801fd08:	3401      	adds	r4, #1
 801fd0a:	4639      	mov	r1, r7
 801fd0c:	47c0      	blx	r8
 801fd0e:	42ac      	cmp	r4, r5
 801fd10:	d202      	bcs.n	801fd18 <scpy+0x20>
 801fd12:	5d30      	ldrb	r0, [r6, r4]
 801fd14:	2800      	cmp	r0, #0
 801fd16:	d1f7      	bne.n	801fd08 <scpy+0x10>
  return i;
}
 801fd18:	4620      	mov	r0, r4
 801fd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801fd1e <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 801fd1e:	2000      	movs	r0, #0
 801fd20:	4770      	bx	lr

0801fd22 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 801fd22:	4770      	bx	lr

0801fd24 <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 801fd24:	2000      	movs	r0, #0
 801fd26:	4770      	bx	lr

0801fd28 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 801fd28:	4770      	bx	lr

0801fd2a <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801fd2a:	2000      	movs	r0, #0
 801fd2c:	4770      	bx	lr

0801fd2e <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801fd2e:	2000      	movs	r0, #0
 801fd30:	4770      	bx	lr

0801fd32 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 801fd32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fd36:	4770      	bx	lr

0801fd38 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 801fd38:	2000      	movs	r0, #0
 801fd3a:	4770      	bx	lr

0801fd3c <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 801fd3c:	2000      	movs	r0, #0
 801fd3e:	4770      	bx	lr

0801fd40 <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 801fd40:	2000      	movs	r0, #0
 801fd42:	4770      	bx	lr

0801fd44 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 801fd44:	b530      	push	{r4, r5, lr}
 801fd46:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 801fd48:	4614      	mov	r4, r2
 801fd4a:	b94a      	cbnz	r2, 801fd60 <mg_ncasecmp+0x1c>
  int diff = 0;
 801fd4c:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 801fd4e:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801fd50:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 801fd54:	1a18      	subs	r0, r3, r0
 801fd56:	d1fa      	bne.n	801fd4e <mg_ncasecmp+0xa>
 801fd58:	2a00      	cmp	r2, #0
 801fd5a:	d0f8      	beq.n	801fd4e <mg_ncasecmp+0xa>
 801fd5c:	3c01      	subs	r4, #1
 801fd5e:	d0f6      	beq.n	801fd4e <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 801fd60:	f89e 2000 	ldrb.w	r2, [lr]
 801fd64:	f10e 0e01 	add.w	lr, lr, #1
 801fd68:	4613      	mov	r3, r2
 801fd6a:	f891 c000 	ldrb.w	ip, [r1]
 801fd6e:	3101      	adds	r1, #1
 801fd70:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 801fd72:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801fd76:	2d19      	cmp	r5, #25
 801fd78:	d801      	bhi.n	801fd7e <mg_ncasecmp+0x3a>
 801fd7a:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801fd7e:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 801fd82:	2d19      	cmp	r5, #25
 801fd84:	d8e6      	bhi.n	801fd54 <mg_ncasecmp+0x10>
 801fd86:	e7e3      	b.n	801fd50 <mg_ncasecmp+0xc>

0801fd88 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801fd88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801fd8c:	2b09      	cmp	r3, #9
 801fd8e:	d908      	bls.n	801fda2 <isx+0x1a>
 801fd90:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801fd94:	2b05      	cmp	r3, #5
 801fd96:	d906      	bls.n	801fda6 <isx+0x1e>
         (c >= 'A' && c <= 'F');
 801fd98:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801fd9a:	2805      	cmp	r0, #5
 801fd9c:	d805      	bhi.n	801fdaa <isx+0x22>
 801fd9e:	2001      	movs	r0, #1
 801fda0:	4770      	bx	lr
 801fda2:	2001      	movs	r0, #1
 801fda4:	4770      	bx	lr
 801fda6:	2001      	movs	r0, #1
 801fda8:	4770      	bx	lr
 801fdaa:	2000      	movs	r0, #0
}
 801fdac:	4770      	bx	lr

0801fdae <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 801fdae:	280a      	cmp	r0, #10
 801fdb0:	d007      	beq.n	801fdc2 <isok+0x14>
 801fdb2:	280d      	cmp	r0, #13
 801fdb4:	d007      	beq.n	801fdc6 <isok+0x18>
 801fdb6:	2809      	cmp	r0, #9
 801fdb8:	d007      	beq.n	801fdca <isok+0x1c>
 801fdba:	281f      	cmp	r0, #31
 801fdbc:	d907      	bls.n	801fdce <isok+0x20>
 801fdbe:	2001      	movs	r0, #1
 801fdc0:	4770      	bx	lr
 801fdc2:	2001      	movs	r0, #1
 801fdc4:	4770      	bx	lr
 801fdc6:	2001      	movs	r0, #1
 801fdc8:	4770      	bx	lr
 801fdca:	2001      	movs	r0, #1
 801fdcc:	4770      	bx	lr
 801fdce:	2000      	movs	r0, #0
}
 801fdd0:	4770      	bx	lr

0801fdd2 <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 801fdd2:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 801fdd6:	2880      	cmp	r0, #128	@ 0x80
 801fdd8:	bf14      	ite	ne
 801fdda:	2000      	movne	r0, #0
 801fddc:	2001      	moveq	r0, #1
 801fdde:	4770      	bx	lr

0801fde0 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 801fde0:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 801fde2:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 801fde4:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801fde6:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 801fdea:	b2db      	uxtb	r3, r3
 801fdec:	2b5c      	cmp	r3, #92	@ 0x5c
 801fdee:	d936      	bls.n	801fe5e <clen+0x7e>
 801fdf0:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801fdf2:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 801fdf6:	2bc0      	cmp	r3, #192	@ 0xc0
 801fdf8:	d009      	beq.n	801fe0e <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801fdfa:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 801fdfe:	2be0      	cmp	r3, #224	@ 0xe0
 801fe00:	d00e      	beq.n	801fe20 <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801fe02:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801fe06:	2df0      	cmp	r5, #240	@ 0xf0
 801fe08:	d018      	beq.n	801fe3c <clen+0x5c>
    return 4;
  return 0;
 801fe0a:	2000      	movs	r0, #0
}
 801fe0c:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801fe0e:	2e01      	cmp	r6, #1
 801fe10:	ddf3      	ble.n	801fdfa <clen+0x1a>
 801fe12:	7840      	ldrb	r0, [r0, #1]
 801fe14:	f7ff ffdd 	bl	801fdd2 <vcb>
 801fe18:	2800      	cmp	r0, #0
 801fe1a:	d0ee      	beq.n	801fdfa <clen+0x1a>
 801fe1c:	2002      	movs	r0, #2
 801fe1e:	e7f5      	b.n	801fe0c <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801fe20:	2e02      	cmp	r6, #2
 801fe22:	ddee      	ble.n	801fe02 <clen+0x22>
 801fe24:	7860      	ldrb	r0, [r4, #1]
 801fe26:	f7ff ffd4 	bl	801fdd2 <vcb>
 801fe2a:	2800      	cmp	r0, #0
 801fe2c:	d0e9      	beq.n	801fe02 <clen+0x22>
 801fe2e:	78a0      	ldrb	r0, [r4, #2]
 801fe30:	f7ff ffcf 	bl	801fdd2 <vcb>
 801fe34:	2800      	cmp	r0, #0
 801fe36:	d0e4      	beq.n	801fe02 <clen+0x22>
 801fe38:	2003      	movs	r0, #3
 801fe3a:	e7e7      	b.n	801fe0c <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801fe3c:	2e03      	cmp	r6, #3
 801fe3e:	dd10      	ble.n	801fe62 <clen+0x82>
 801fe40:	7860      	ldrb	r0, [r4, #1]
 801fe42:	f7ff ffc6 	bl	801fdd2 <vcb>
 801fe46:	b170      	cbz	r0, 801fe66 <clen+0x86>
 801fe48:	78a0      	ldrb	r0, [r4, #2]
 801fe4a:	f7ff ffc2 	bl	801fdd2 <vcb>
 801fe4e:	b160      	cbz	r0, 801fe6a <clen+0x8a>
 801fe50:	78e0      	ldrb	r0, [r4, #3]
 801fe52:	f7ff ffbe 	bl	801fdd2 <vcb>
 801fe56:	2800      	cmp	r0, #0
 801fe58:	d0d8      	beq.n	801fe0c <clen+0x2c>
    return 4;
 801fe5a:	2004      	movs	r0, #4
 801fe5c:	e7d6      	b.n	801fe0c <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801fe5e:	2001      	movs	r0, #1
 801fe60:	e7d4      	b.n	801fe0c <clen+0x2c>
  return 0;
 801fe62:	2000      	movs	r0, #0
 801fe64:	e7d2      	b.n	801fe0c <clen+0x2c>
 801fe66:	2000      	movs	r0, #0
 801fe68:	e7d0      	b.n	801fe0c <clen+0x2c>
 801fe6a:	2000      	movs	r0, #0
 801fe6c:	e7ce      	b.n	801fe0c <clen+0x2c>

0801fe6e <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 801fe6e:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 801fe70:	e003      	b.n	801fe7a <skiptorn+0xc>
 801fe72:	3001      	adds	r0, #1
 801fe74:	6853      	ldr	r3, [r2, #4]
 801fe76:	3301      	adds	r3, #1
 801fe78:	6053      	str	r3, [r2, #4]
 801fe7a:	4288      	cmp	r0, r1
 801fe7c:	d204      	bcs.n	801fe88 <skiptorn+0x1a>
 801fe7e:	7803      	ldrb	r3, [r0, #0]
 801fe80:	2b0a      	cmp	r3, #10
 801fe82:	d001      	beq.n	801fe88 <skiptorn+0x1a>
 801fe84:	2b0d      	cmp	r3, #13
 801fe86:	d1f4      	bne.n	801fe72 <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801fe88:	4288      	cmp	r0, r1
 801fe8a:	d212      	bcs.n	801feb2 <skiptorn+0x44>
 801fe8c:	7803      	ldrb	r3, [r0, #0]
 801fe8e:	2b0d      	cmp	r3, #13
 801fe90:	d008      	beq.n	801fea4 <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801fe92:	2b0d      	cmp	r3, #13
 801fe94:	d00b      	beq.n	801feae <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801fe96:	4288      	cmp	r0, r1
 801fe98:	d20d      	bcs.n	801feb6 <skiptorn+0x48>
 801fe9a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801fe9e:	2b0a      	cmp	r3, #10
 801fea0:	d10b      	bne.n	801feba <skiptorn+0x4c>
  return s;
}
 801fea2:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801fea4:	7842      	ldrb	r2, [r0, #1]
 801fea6:	2a0a      	cmp	r2, #10
 801fea8:	d0f3      	beq.n	801fe92 <skiptorn+0x24>
 801feaa:	2000      	movs	r0, #0
 801feac:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801feae:	3001      	adds	r0, #1
 801feb0:	e7f1      	b.n	801fe96 <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801feb2:	2000      	movs	r0, #0
 801feb4:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801feb6:	2000      	movs	r0, #0
 801feb8:	4770      	bx	lr
 801feba:	2000      	movs	r0, #0
 801febc:	e7f1      	b.n	801fea2 <skiptorn+0x34>

0801febe <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 801febe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fec2:	b084      	sub	sp, #16
 801fec4:	4604      	mov	r4, r0
 801fec6:	460d      	mov	r5, r1
 801fec8:	4690      	mov	r8, r2
 801feca:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 801fecc:	2600      	movs	r6, #0
 801fece:	e04d      	b.n	801ff6c <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801fed0:	7863      	ldrb	r3, [r4, #1]
 801fed2:	2b0a      	cmp	r3, #10
 801fed4:	d158      	bne.n	801ff88 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 801fed6:	2001      	movs	r0, #1
 801fed8:	e01e      	b.n	801ff18 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801feda:	4414      	add	r4, r2
 801fedc:	9b01      	ldr	r3, [sp, #4]
 801fede:	4413      	add	r3, r2
 801fee0:	9301      	str	r3, [sp, #4]
 801fee2:	42ac      	cmp	r4, r5
 801fee4:	d209      	bcs.n	801fefa <mg_http_parse_headers+0x3c>
 801fee6:	7823      	ldrb	r3, [r4, #0]
 801fee8:	2b3a      	cmp	r3, #58	@ 0x3a
 801feea:	d006      	beq.n	801fefa <mg_http_parse_headers+0x3c>
 801feec:	4629      	mov	r1, r5
 801feee:	4620      	mov	r0, r4
 801fef0:	f7ff ff76 	bl	801fde0 <clen>
 801fef4:	4602      	mov	r2, r0
 801fef6:	2800      	cmp	r0, #0
 801fef8:	d1ef      	bne.n	801feda <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 801fefa:	9b01      	ldr	r3, [sp, #4]
 801fefc:	b15b      	cbz	r3, 801ff16 <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 801fefe:	42ac      	cmp	r4, r5
 801ff00:	d209      	bcs.n	801ff16 <mg_http_parse_headers+0x58>
 801ff02:	4629      	mov	r1, r5
 801ff04:	4620      	mov	r0, r4
 801ff06:	f7ff ff6b 	bl	801fde0 <clen>
 801ff0a:	b120      	cbz	r0, 801ff16 <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 801ff0c:	4620      	mov	r0, r4
 801ff0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ff12:	2b3a      	cmp	r3, #58	@ 0x3a
 801ff14:	d004      	beq.n	801ff20 <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 801ff16:	2000      	movs	r0, #0
}
 801ff18:	b004      	add	sp, #16
 801ff1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 801ff1e:	3001      	adds	r0, #1
 801ff20:	42a8      	cmp	r0, r5
 801ff22:	d204      	bcs.n	801ff2e <mg_http_parse_headers+0x70>
 801ff24:	7803      	ldrb	r3, [r0, #0]
 801ff26:	2b20      	cmp	r3, #32
 801ff28:	d0f9      	beq.n	801ff1e <mg_http_parse_headers+0x60>
 801ff2a:	2b09      	cmp	r3, #9
 801ff2c:	d0f7      	beq.n	801ff1e <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 801ff2e:	aa02      	add	r2, sp, #8
 801ff30:	4629      	mov	r1, r5
 801ff32:	f7ff ff9c 	bl	801fe6e <skiptorn>
 801ff36:	4604      	mov	r4, r0
 801ff38:	b908      	cbnz	r0, 801ff3e <mg_http_parse_headers+0x80>
 801ff3a:	e7ec      	b.n	801ff16 <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 801ff3c:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 801ff3e:	9803      	ldr	r0, [sp, #12]
 801ff40:	b130      	cbz	r0, 801ff50 <mg_http_parse_headers+0x92>
 801ff42:	3801      	subs	r0, #1
 801ff44:	9b02      	ldr	r3, [sp, #8]
 801ff46:	5c1b      	ldrb	r3, [r3, r0]
 801ff48:	2b20      	cmp	r3, #32
 801ff4a:	d0f7      	beq.n	801ff3c <mg_http_parse_headers+0x7e>
 801ff4c:	2b09      	cmp	r3, #9
 801ff4e:	d0f5      	beq.n	801ff3c <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 801ff50:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 801ff54:	466a      	mov	r2, sp
 801ff56:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ff5a:	e883 0003 	stmia.w	r3, {r0, r1}
 801ff5e:	3308      	adds	r3, #8
 801ff60:	aa04      	add	r2, sp, #16
 801ff62:	e912 0003 	ldmdb	r2, {r0, r1}
 801ff66:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 801ff6a:	3601      	adds	r6, #1
 801ff6c:	42be      	cmp	r6, r7
 801ff6e:	d20d      	bcs.n	801ff8c <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 801ff70:	2300      	movs	r3, #0
 801ff72:	9300      	str	r3, [sp, #0]
 801ff74:	9301      	str	r3, [sp, #4]
 801ff76:	9302      	str	r3, [sp, #8]
 801ff78:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 801ff7a:	42ac      	cmp	r4, r5
 801ff7c:	d2cb      	bcs.n	801ff16 <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801ff7e:	7823      	ldrb	r3, [r4, #0]
 801ff80:	2b0a      	cmp	r3, #10
 801ff82:	d0a8      	beq.n	801fed6 <mg_http_parse_headers+0x18>
 801ff84:	2b0d      	cmp	r3, #13
 801ff86:	d0a3      	beq.n	801fed0 <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 801ff88:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801ff8a:	e7aa      	b.n	801fee2 <mg_http_parse_headers+0x24>
  return true;
 801ff8c:	2001      	movs	r0, #1
 801ff8e:	e7c3      	b.n	801ff18 <mg_http_parse_headers+0x5a>

0801ff90 <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 801ff90:	3864      	subs	r0, #100	@ 0x64
 801ff92:	f240 13f3 	movw	r3, #499	@ 0x1f3
 801ff96:	4298      	cmp	r0, r3
 801ff98:	f200 8272 	bhi.w	8020480 <mg_http_status_code_str+0x4f0>
 801ff9c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801ffa0:	027201f4 	.word	0x027201f4
 801ffa4:	027001f6 	.word	0x027001f6
 801ffa8:	02700270 	.word	0x02700270
 801ffac:	02700270 	.word	0x02700270
 801ffb0:	02700270 	.word	0x02700270
 801ffb4:	02700270 	.word	0x02700270
 801ffb8:	02700270 	.word	0x02700270
 801ffbc:	02700270 	.word	0x02700270
 801ffc0:	02700270 	.word	0x02700270
 801ffc4:	02700270 	.word	0x02700270
 801ffc8:	02700270 	.word	0x02700270
 801ffcc:	02700270 	.word	0x02700270
 801ffd0:	02700270 	.word	0x02700270
 801ffd4:	02700270 	.word	0x02700270
 801ffd8:	02700270 	.word	0x02700270
 801ffdc:	02700270 	.word	0x02700270
 801ffe0:	02700270 	.word	0x02700270
 801ffe4:	02700270 	.word	0x02700270
 801ffe8:	02700270 	.word	0x02700270
 801ffec:	02700270 	.word	0x02700270
 801fff0:	02700270 	.word	0x02700270
 801fff4:	02700270 	.word	0x02700270
 801fff8:	02700270 	.word	0x02700270
 801fffc:	02700270 	.word	0x02700270
 8020000:	02700270 	.word	0x02700270
 8020004:	02700270 	.word	0x02700270
 8020008:	02700270 	.word	0x02700270
 802000c:	02700270 	.word	0x02700270
 8020010:	02700270 	.word	0x02700270
 8020014:	02700270 	.word	0x02700270
 8020018:	02700270 	.word	0x02700270
 802001c:	02700270 	.word	0x02700270
 8020020:	02700270 	.word	0x02700270
 8020024:	02700270 	.word	0x02700270
 8020028:	02700270 	.word	0x02700270
 802002c:	02700270 	.word	0x02700270
 8020030:	02700270 	.word	0x02700270
 8020034:	02700270 	.word	0x02700270
 8020038:	02700270 	.word	0x02700270
 802003c:	02700270 	.word	0x02700270
 8020040:	02700270 	.word	0x02700270
 8020044:	02700270 	.word	0x02700270
 8020048:	02700270 	.word	0x02700270
 802004c:	02700270 	.word	0x02700270
 8020050:	02700270 	.word	0x02700270
 8020054:	02700270 	.word	0x02700270
 8020058:	02700270 	.word	0x02700270
 802005c:	02700270 	.word	0x02700270
 8020060:	02700270 	.word	0x02700270
 8020064:	02700270 	.word	0x02700270
 8020068:	01fa01f8 	.word	0x01fa01f8
 802006c:	01fe01fc 	.word	0x01fe01fc
 8020070:	02020200 	.word	0x02020200
 8020074:	02060204 	.word	0x02060204
 8020078:	02700208 	.word	0x02700208
 802007c:	02700270 	.word	0x02700270
 8020080:	02700270 	.word	0x02700270
 8020084:	02700270 	.word	0x02700270
 8020088:	02700270 	.word	0x02700270
 802008c:	02700270 	.word	0x02700270
 8020090:	02700270 	.word	0x02700270
 8020094:	02700270 	.word	0x02700270
 8020098:	02700270 	.word	0x02700270
 802009c:	0270020a 	.word	0x0270020a
 80200a0:	02700270 	.word	0x02700270
 80200a4:	02700270 	.word	0x02700270
 80200a8:	02700270 	.word	0x02700270
 80200ac:	02700270 	.word	0x02700270
 80200b0:	02700270 	.word	0x02700270
 80200b4:	02700270 	.word	0x02700270
 80200b8:	02700270 	.word	0x02700270
 80200bc:	02700270 	.word	0x02700270
 80200c0:	02700270 	.word	0x02700270
 80200c4:	02700270 	.word	0x02700270
 80200c8:	02700270 	.word	0x02700270
 80200cc:	02700270 	.word	0x02700270
 80200d0:	02700270 	.word	0x02700270
 80200d4:	02700270 	.word	0x02700270
 80200d8:	02700270 	.word	0x02700270
 80200dc:	02700270 	.word	0x02700270
 80200e0:	02700270 	.word	0x02700270
 80200e4:	02700270 	.word	0x02700270
 80200e8:	02700270 	.word	0x02700270
 80200ec:	02700270 	.word	0x02700270
 80200f0:	02700270 	.word	0x02700270
 80200f4:	02700270 	.word	0x02700270
 80200f8:	02700270 	.word	0x02700270
 80200fc:	02700270 	.word	0x02700270
 8020100:	02700270 	.word	0x02700270
 8020104:	02700270 	.word	0x02700270
 8020108:	02700270 	.word	0x02700270
 802010c:	02700270 	.word	0x02700270
 8020110:	02700270 	.word	0x02700270
 8020114:	02700270 	.word	0x02700270
 8020118:	02700270 	.word	0x02700270
 802011c:	02700270 	.word	0x02700270
 8020120:	02700270 	.word	0x02700270
 8020124:	02700270 	.word	0x02700270
 8020128:	02700270 	.word	0x02700270
 802012c:	02700270 	.word	0x02700270
 8020130:	020e020c 	.word	0x020e020c
 8020134:	02120210 	.word	0x02120210
 8020138:	02160214 	.word	0x02160214
 802013c:	02180270 	.word	0x02180270
 8020140:	0270021a 	.word	0x0270021a
 8020144:	02700270 	.word	0x02700270
 8020148:	02700270 	.word	0x02700270
 802014c:	02700270 	.word	0x02700270
 8020150:	02700270 	.word	0x02700270
 8020154:	02700270 	.word	0x02700270
 8020158:	02700270 	.word	0x02700270
 802015c:	02700270 	.word	0x02700270
 8020160:	02700270 	.word	0x02700270
 8020164:	02700270 	.word	0x02700270
 8020168:	02700270 	.word	0x02700270
 802016c:	02700270 	.word	0x02700270
 8020170:	02700270 	.word	0x02700270
 8020174:	02700270 	.word	0x02700270
 8020178:	02700270 	.word	0x02700270
 802017c:	02700270 	.word	0x02700270
 8020180:	02700270 	.word	0x02700270
 8020184:	02700270 	.word	0x02700270
 8020188:	02700270 	.word	0x02700270
 802018c:	02700270 	.word	0x02700270
 8020190:	02700270 	.word	0x02700270
 8020194:	02700270 	.word	0x02700270
 8020198:	02700270 	.word	0x02700270
 802019c:	02700270 	.word	0x02700270
 80201a0:	02700270 	.word	0x02700270
 80201a4:	02700270 	.word	0x02700270
 80201a8:	02700270 	.word	0x02700270
 80201ac:	02700270 	.word	0x02700270
 80201b0:	02700270 	.word	0x02700270
 80201b4:	02700270 	.word	0x02700270
 80201b8:	02700270 	.word	0x02700270
 80201bc:	02700270 	.word	0x02700270
 80201c0:	02700270 	.word	0x02700270
 80201c4:	02700270 	.word	0x02700270
 80201c8:	02700270 	.word	0x02700270
 80201cc:	02700270 	.word	0x02700270
 80201d0:	02700270 	.word	0x02700270
 80201d4:	02700270 	.word	0x02700270
 80201d8:	02700270 	.word	0x02700270
 80201dc:	02700270 	.word	0x02700270
 80201e0:	02700270 	.word	0x02700270
 80201e4:	02700270 	.word	0x02700270
 80201e8:	02700270 	.word	0x02700270
 80201ec:	02700270 	.word	0x02700270
 80201f0:	02700270 	.word	0x02700270
 80201f4:	02700270 	.word	0x02700270
 80201f8:	021e021c 	.word	0x021e021c
 80201fc:	02220220 	.word	0x02220220
 8020200:	02260224 	.word	0x02260224
 8020204:	022a0228 	.word	0x022a0228
 8020208:	022e022c 	.word	0x022e022c
 802020c:	02320230 	.word	0x02320230
 8020210:	02360234 	.word	0x02360234
 8020214:	023a0238 	.word	0x023a0238
 8020218:	023e023c 	.word	0x023e023c
 802021c:	02700240 	.word	0x02700240
 8020220:	02420270 	.word	0x02420270
 8020224:	02460244 	.word	0x02460244
 8020228:	02700248 	.word	0x02700248
 802022c:	0270024a 	.word	0x0270024a
 8020230:	024e024c 	.word	0x024e024c
 8020234:	02500270 	.word	0x02500270
 8020238:	02700270 	.word	0x02700270
 802023c:	02700270 	.word	0x02700270
 8020240:	02700270 	.word	0x02700270
 8020244:	02700270 	.word	0x02700270
 8020248:	02700270 	.word	0x02700270
 802024c:	02700270 	.word	0x02700270
 8020250:	02700252 	.word	0x02700252
 8020254:	02700270 	.word	0x02700270
 8020258:	02700270 	.word	0x02700270
 802025c:	02540270 	.word	0x02540270
 8020260:	02700270 	.word	0x02700270
 8020264:	02700270 	.word	0x02700270
 8020268:	02700270 	.word	0x02700270
 802026c:	02700270 	.word	0x02700270
 8020270:	02700270 	.word	0x02700270
 8020274:	02700270 	.word	0x02700270
 8020278:	02700270 	.word	0x02700270
 802027c:	02700270 	.word	0x02700270
 8020280:	02700270 	.word	0x02700270
 8020284:	02700270 	.word	0x02700270
 8020288:	02700270 	.word	0x02700270
 802028c:	02700270 	.word	0x02700270
 8020290:	02700270 	.word	0x02700270
 8020294:	02700270 	.word	0x02700270
 8020298:	02700270 	.word	0x02700270
 802029c:	02700270 	.word	0x02700270
 80202a0:	02700270 	.word	0x02700270
 80202a4:	02700270 	.word	0x02700270
 80202a8:	02700270 	.word	0x02700270
 80202ac:	02700270 	.word	0x02700270
 80202b0:	02700270 	.word	0x02700270
 80202b4:	02700270 	.word	0x02700270
 80202b8:	02700270 	.word	0x02700270
 80202bc:	02560270 	.word	0x02560270
 80202c0:	025a0258 	.word	0x025a0258
 80202c4:	025e025c 	.word	0x025e025c
 80202c8:	02620260 	.word	0x02620260
 80202cc:	02660264 	.word	0x02660264
 80202d0:	02700268 	.word	0x02700268
 80202d4:	026c026a 	.word	0x026c026a
 80202d8:	02700270 	.word	0x02700270
 80202dc:	02700270 	.word	0x02700270
 80202e0:	02700270 	.word	0x02700270
 80202e4:	02700270 	.word	0x02700270
 80202e8:	02700270 	.word	0x02700270
 80202ec:	02700270 	.word	0x02700270
 80202f0:	02700270 	.word	0x02700270
 80202f4:	02700270 	.word	0x02700270
 80202f8:	02700270 	.word	0x02700270
 80202fc:	02700270 	.word	0x02700270
 8020300:	02700270 	.word	0x02700270
 8020304:	02700270 	.word	0x02700270
 8020308:	02700270 	.word	0x02700270
 802030c:	02700270 	.word	0x02700270
 8020310:	02700270 	.word	0x02700270
 8020314:	02700270 	.word	0x02700270
 8020318:	02700270 	.word	0x02700270
 802031c:	02700270 	.word	0x02700270
 8020320:	02700270 	.word	0x02700270
 8020324:	02700270 	.word	0x02700270
 8020328:	02700270 	.word	0x02700270
 802032c:	02700270 	.word	0x02700270
 8020330:	02700270 	.word	0x02700270
 8020334:	02700270 	.word	0x02700270
 8020338:	02700270 	.word	0x02700270
 802033c:	02700270 	.word	0x02700270
 8020340:	02700270 	.word	0x02700270
 8020344:	02700270 	.word	0x02700270
 8020348:	02700270 	.word	0x02700270
 802034c:	02700270 	.word	0x02700270
 8020350:	02700270 	.word	0x02700270
 8020354:	02700270 	.word	0x02700270
 8020358:	02700270 	.word	0x02700270
 802035c:	02700270 	.word	0x02700270
 8020360:	02700270 	.word	0x02700270
 8020364:	02700270 	.word	0x02700270
 8020368:	02700270 	.word	0x02700270
 802036c:	02700270 	.word	0x02700270
 8020370:	02700270 	.word	0x02700270
 8020374:	02700270 	.word	0x02700270
 8020378:	02700270 	.word	0x02700270
 802037c:	02700270 	.word	0x02700270
 8020380:	02700270 	.word	0x02700270
 8020384:	026e0270 	.word	0x026e0270
 8020388:	483f      	ldr	r0, [pc, #252]	@ (8020488 <mg_http_status_code_str+0x4f8>)
 802038a:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 802038c:	483f      	ldr	r0, [pc, #252]	@ (802048c <mg_http_status_code_str+0x4fc>)
 802038e:	4770      	bx	lr
    case 200: return "OK";
 8020390:	483f      	ldr	r0, [pc, #252]	@ (8020490 <mg_http_status_code_str+0x500>)
 8020392:	4770      	bx	lr
    case 201: return "Created";
 8020394:	483f      	ldr	r0, [pc, #252]	@ (8020494 <mg_http_status_code_str+0x504>)
 8020396:	4770      	bx	lr
    case 202: return "Accepted";
 8020398:	483f      	ldr	r0, [pc, #252]	@ (8020498 <mg_http_status_code_str+0x508>)
 802039a:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 802039c:	483f      	ldr	r0, [pc, #252]	@ (802049c <mg_http_status_code_str+0x50c>)
 802039e:	4770      	bx	lr
    case 204: return "No Content";
 80203a0:	483f      	ldr	r0, [pc, #252]	@ (80204a0 <mg_http_status_code_str+0x510>)
 80203a2:	4770      	bx	lr
    case 205: return "Reset Content";
 80203a4:	483f      	ldr	r0, [pc, #252]	@ (80204a4 <mg_http_status_code_str+0x514>)
 80203a6:	4770      	bx	lr
    case 206: return "Partial Content";
 80203a8:	483f      	ldr	r0, [pc, #252]	@ (80204a8 <mg_http_status_code_str+0x518>)
 80203aa:	4770      	bx	lr
    case 207: return "Multi-Status";
 80203ac:	483f      	ldr	r0, [pc, #252]	@ (80204ac <mg_http_status_code_str+0x51c>)
 80203ae:	4770      	bx	lr
    case 208: return "Already Reported";
 80203b0:	483f      	ldr	r0, [pc, #252]	@ (80204b0 <mg_http_status_code_str+0x520>)
 80203b2:	4770      	bx	lr
    case 226: return "IM Used";
 80203b4:	483f      	ldr	r0, [pc, #252]	@ (80204b4 <mg_http_status_code_str+0x524>)
 80203b6:	4770      	bx	lr
    case 300: return "Multiple Choices";
 80203b8:	483f      	ldr	r0, [pc, #252]	@ (80204b8 <mg_http_status_code_str+0x528>)
 80203ba:	4770      	bx	lr
    case 301: return "Moved Permanently";
 80203bc:	483f      	ldr	r0, [pc, #252]	@ (80204bc <mg_http_status_code_str+0x52c>)
 80203be:	4770      	bx	lr
    case 302: return "Found";
 80203c0:	483f      	ldr	r0, [pc, #252]	@ (80204c0 <mg_http_status_code_str+0x530>)
 80203c2:	4770      	bx	lr
    case 303: return "See Other";
 80203c4:	483f      	ldr	r0, [pc, #252]	@ (80204c4 <mg_http_status_code_str+0x534>)
 80203c6:	4770      	bx	lr
    case 304: return "Not Modified";
 80203c8:	483f      	ldr	r0, [pc, #252]	@ (80204c8 <mg_http_status_code_str+0x538>)
 80203ca:	4770      	bx	lr
    case 305: return "Use Proxy";
 80203cc:	483f      	ldr	r0, [pc, #252]	@ (80204cc <mg_http_status_code_str+0x53c>)
 80203ce:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 80203d0:	483f      	ldr	r0, [pc, #252]	@ (80204d0 <mg_http_status_code_str+0x540>)
 80203d2:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 80203d4:	483f      	ldr	r0, [pc, #252]	@ (80204d4 <mg_http_status_code_str+0x544>)
 80203d6:	4770      	bx	lr
    case 400: return "Bad Request";
 80203d8:	483f      	ldr	r0, [pc, #252]	@ (80204d8 <mg_http_status_code_str+0x548>)
 80203da:	4770      	bx	lr
    case 401: return "Unauthorized";
 80203dc:	483f      	ldr	r0, [pc, #252]	@ (80204dc <mg_http_status_code_str+0x54c>)
 80203de:	4770      	bx	lr
    case 402: return "Payment Required";
 80203e0:	483f      	ldr	r0, [pc, #252]	@ (80204e0 <mg_http_status_code_str+0x550>)
 80203e2:	4770      	bx	lr
    case 403: return "Forbidden";
 80203e4:	483f      	ldr	r0, [pc, #252]	@ (80204e4 <mg_http_status_code_str+0x554>)
 80203e6:	4770      	bx	lr
    case 404: return "Not Found";
 80203e8:	483f      	ldr	r0, [pc, #252]	@ (80204e8 <mg_http_status_code_str+0x558>)
 80203ea:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 80203ec:	483f      	ldr	r0, [pc, #252]	@ (80204ec <mg_http_status_code_str+0x55c>)
 80203ee:	4770      	bx	lr
    case 406: return "Not Acceptable";
 80203f0:	483f      	ldr	r0, [pc, #252]	@ (80204f0 <mg_http_status_code_str+0x560>)
 80203f2:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 80203f4:	483f      	ldr	r0, [pc, #252]	@ (80204f4 <mg_http_status_code_str+0x564>)
 80203f6:	4770      	bx	lr
    case 408: return "Request Timeout";
 80203f8:	483f      	ldr	r0, [pc, #252]	@ (80204f8 <mg_http_status_code_str+0x568>)
 80203fa:	4770      	bx	lr
    case 409: return "Conflict";
 80203fc:	483f      	ldr	r0, [pc, #252]	@ (80204fc <mg_http_status_code_str+0x56c>)
 80203fe:	4770      	bx	lr
    case 410: return "Gone";
 8020400:	483f      	ldr	r0, [pc, #252]	@ (8020500 <mg_http_status_code_str+0x570>)
 8020402:	4770      	bx	lr
    case 411: return "Length Required";
 8020404:	483f      	ldr	r0, [pc, #252]	@ (8020504 <mg_http_status_code_str+0x574>)
 8020406:	4770      	bx	lr
    case 412: return "Precondition Failed";
 8020408:	483f      	ldr	r0, [pc, #252]	@ (8020508 <mg_http_status_code_str+0x578>)
 802040a:	4770      	bx	lr
    case 413: return "Payload Too Large";
 802040c:	483f      	ldr	r0, [pc, #252]	@ (802050c <mg_http_status_code_str+0x57c>)
 802040e:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 8020410:	483f      	ldr	r0, [pc, #252]	@ (8020510 <mg_http_status_code_str+0x580>)
 8020412:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 8020414:	483f      	ldr	r0, [pc, #252]	@ (8020514 <mg_http_status_code_str+0x584>)
 8020416:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 8020418:	483f      	ldr	r0, [pc, #252]	@ (8020518 <mg_http_status_code_str+0x588>)
 802041a:	4770      	bx	lr
    case 417: return "Expectation Failed";
 802041c:	483f      	ldr	r0, [pc, #252]	@ (802051c <mg_http_status_code_str+0x58c>)
 802041e:	4770      	bx	lr
    case 418: return "I'm a teapot";
 8020420:	483f      	ldr	r0, [pc, #252]	@ (8020520 <mg_http_status_code_str+0x590>)
 8020422:	4770      	bx	lr
    case 421: return "Misdirected Request";
 8020424:	483f      	ldr	r0, [pc, #252]	@ (8020524 <mg_http_status_code_str+0x594>)
 8020426:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 8020428:	483f      	ldr	r0, [pc, #252]	@ (8020528 <mg_http_status_code_str+0x598>)
 802042a:	4770      	bx	lr
    case 423: return "Locked";
 802042c:	483f      	ldr	r0, [pc, #252]	@ (802052c <mg_http_status_code_str+0x59c>)
 802042e:	4770      	bx	lr
    case 424: return "Failed Dependency";
 8020430:	483f      	ldr	r0, [pc, #252]	@ (8020530 <mg_http_status_code_str+0x5a0>)
 8020432:	4770      	bx	lr
    case 426: return "Upgrade Required";
 8020434:	483f      	ldr	r0, [pc, #252]	@ (8020534 <mg_http_status_code_str+0x5a4>)
 8020436:	4770      	bx	lr
    case 428: return "Precondition Required";
 8020438:	483f      	ldr	r0, [pc, #252]	@ (8020538 <mg_http_status_code_str+0x5a8>)
 802043a:	4770      	bx	lr
    case 429: return "Too Many Requests";
 802043c:	483f      	ldr	r0, [pc, #252]	@ (802053c <mg_http_status_code_str+0x5ac>)
 802043e:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 8020440:	483f      	ldr	r0, [pc, #252]	@ (8020540 <mg_http_status_code_str+0x5b0>)
 8020442:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 8020444:	483f      	ldr	r0, [pc, #252]	@ (8020544 <mg_http_status_code_str+0x5b4>)
 8020446:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 8020448:	483f      	ldr	r0, [pc, #252]	@ (8020548 <mg_http_status_code_str+0x5b8>)
 802044a:	4770      	bx	lr
    case 499: return "Client Closed Request";
 802044c:	483f      	ldr	r0, [pc, #252]	@ (802054c <mg_http_status_code_str+0x5bc>)
 802044e:	4770      	bx	lr
    case 500: return "Internal Server Error";
 8020450:	483f      	ldr	r0, [pc, #252]	@ (8020550 <mg_http_status_code_str+0x5c0>)
 8020452:	4770      	bx	lr
    case 501: return "Not Implemented";
 8020454:	483f      	ldr	r0, [pc, #252]	@ (8020554 <mg_http_status_code_str+0x5c4>)
 8020456:	4770      	bx	lr
    case 502: return "Bad Gateway";
 8020458:	483f      	ldr	r0, [pc, #252]	@ (8020558 <mg_http_status_code_str+0x5c8>)
 802045a:	4770      	bx	lr
    case 503: return "Service Unavailable";
 802045c:	483f      	ldr	r0, [pc, #252]	@ (802055c <mg_http_status_code_str+0x5cc>)
 802045e:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 8020460:	483f      	ldr	r0, [pc, #252]	@ (8020560 <mg_http_status_code_str+0x5d0>)
 8020462:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 8020464:	483f      	ldr	r0, [pc, #252]	@ (8020564 <mg_http_status_code_str+0x5d4>)
 8020466:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 8020468:	483f      	ldr	r0, [pc, #252]	@ (8020568 <mg_http_status_code_str+0x5d8>)
 802046a:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 802046c:	483f      	ldr	r0, [pc, #252]	@ (802056c <mg_http_status_code_str+0x5dc>)
 802046e:	4770      	bx	lr
    case 508: return "Loop Detected";
 8020470:	483f      	ldr	r0, [pc, #252]	@ (8020570 <mg_http_status_code_str+0x5e0>)
 8020472:	4770      	bx	lr
    case 510: return "Not Extended";
 8020474:	483f      	ldr	r0, [pc, #252]	@ (8020574 <mg_http_status_code_str+0x5e4>)
 8020476:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 8020478:	483f      	ldr	r0, [pc, #252]	@ (8020578 <mg_http_status_code_str+0x5e8>)
 802047a:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 802047c:	483f      	ldr	r0, [pc, #252]	@ (802057c <mg_http_status_code_str+0x5ec>)
 802047e:	4770      	bx	lr
    default: return "";
 8020480:	483f      	ldr	r0, [pc, #252]	@ (8020580 <mg_http_status_code_str+0x5f0>)
 8020482:	4770      	bx	lr
    case 101: return "Switching Protocols";
 8020484:	483f      	ldr	r0, [pc, #252]	@ (8020584 <mg_http_status_code_str+0x5f4>)
  }
}
 8020486:	4770      	bx	lr
 8020488:	08039f34 	.word	0x08039f34
 802048c:	08039f54 	.word	0x08039f54
 8020490:	08039f60 	.word	0x08039f60
 8020494:	08039f64 	.word	0x08039f64
 8020498:	08039f6c 	.word	0x08039f6c
 802049c:	08039f78 	.word	0x08039f78
 80204a0:	08039f98 	.word	0x08039f98
 80204a4:	08039fa4 	.word	0x08039fa4
 80204a8:	08039fb4 	.word	0x08039fb4
 80204ac:	08039fc4 	.word	0x08039fc4
 80204b0:	08039fd4 	.word	0x08039fd4
 80204b4:	08039fe8 	.word	0x08039fe8
 80204b8:	08039ff0 	.word	0x08039ff0
 80204bc:	0803a004 	.word	0x0803a004
 80204c0:	0803a0a8 	.word	0x0803a0a8
 80204c4:	0803a018 	.word	0x0803a018
 80204c8:	0803a024 	.word	0x0803a024
 80204cc:	0803a034 	.word	0x0803a034
 80204d0:	0803a040 	.word	0x0803a040
 80204d4:	0803a054 	.word	0x0803a054
 80204d8:	0803a068 	.word	0x0803a068
 80204dc:	0803a074 	.word	0x0803a074
 80204e0:	0803a084 	.word	0x0803a084
 80204e4:	0803a098 	.word	0x0803a098
 80204e8:	0803a0a4 	.word	0x0803a0a4
 80204ec:	0803a0b0 	.word	0x0803a0b0
 80204f0:	0803a0c4 	.word	0x0803a0c4
 80204f4:	0803a0d4 	.word	0x0803a0d4
 80204f8:	0803a0f4 	.word	0x0803a0f4
 80204fc:	0803a104 	.word	0x0803a104
 8020500:	0803a110 	.word	0x0803a110
 8020504:	0803a118 	.word	0x0803a118
 8020508:	0803a128 	.word	0x0803a128
 802050c:	0803a13c 	.word	0x0803a13c
 8020510:	0803a150 	.word	0x0803a150
 8020514:	0803a168 	.word	0x0803a168
 8020518:	0803a180 	.word	0x0803a180
 802051c:	0803a1a0 	.word	0x0803a1a0
 8020520:	0803a1b4 	.word	0x0803a1b4
 8020524:	0803a1c4 	.word	0x0803a1c4
 8020528:	0803a1d8 	.word	0x0803a1d8
 802052c:	0803a1f0 	.word	0x0803a1f0
 8020530:	0803a1f8 	.word	0x0803a1f8
 8020534:	0803a20c 	.word	0x0803a20c
 8020538:	0803a220 	.word	0x0803a220
 802053c:	0803a238 	.word	0x0803a238
 8020540:	0803a24c 	.word	0x0803a24c
 8020544:	0803a26c 	.word	0x0803a26c
 8020548:	0803a290 	.word	0x0803a290
 802054c:	0803a2b0 	.word	0x0803a2b0
 8020550:	0803a2c8 	.word	0x0803a2c8
 8020554:	0803a2e0 	.word	0x0803a2e0
 8020558:	0803a2f0 	.word	0x0803a2f0
 802055c:	0803a2fc 	.word	0x0803a2fc
 8020560:	0803a310 	.word	0x0803a310
 8020564:	0803a320 	.word	0x0803a320
 8020568:	0803a33c 	.word	0x0803a33c
 802056c:	0803a354 	.word	0x0803a354
 8020570:	0803a36c 	.word	0x0803a36c
 8020574:	0803a37c 	.word	0x0803a37c
 8020578:	0803a38c 	.word	0x0803a38c
 802057c:	0803a3ac 	.word	0x0803a3ac
 8020580:	08036c70 	.word	0x08036c70
 8020584:	08039f40 	.word	0x08039f40

08020588 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 8020588:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 802058c:	2b09      	cmp	r3, #9
 802058e:	d91c      	bls.n	80205ca <mg_is_url_safe+0x42>
 8020590:	285f      	cmp	r0, #95	@ 0x5f
 8020592:	d01c      	beq.n	80205ce <mg_is_url_safe+0x46>
 8020594:	dc0d      	bgt.n	80205b2 <mg_is_url_safe+0x2a>
 8020596:	282e      	cmp	r0, #46	@ 0x2e
 8020598:	d01b      	beq.n	80205d2 <mg_is_url_safe+0x4a>
 802059a:	dd04      	ble.n	80205a6 <mg_is_url_safe+0x1e>
 802059c:	3841      	subs	r0, #65	@ 0x41
 802059e:	2819      	cmp	r0, #25
 80205a0:	d805      	bhi.n	80205ae <mg_is_url_safe+0x26>
 80205a2:	2001      	movs	r0, #1
 80205a4:	4770      	bx	lr
 80205a6:	282d      	cmp	r0, #45	@ 0x2d
 80205a8:	d115      	bne.n	80205d6 <mg_is_url_safe+0x4e>
 80205aa:	2001      	movs	r0, #1
 80205ac:	4770      	bx	lr
 80205ae:	2000      	movs	r0, #0
 80205b0:	4770      	bx	lr
 80205b2:	287a      	cmp	r0, #122	@ 0x7a
 80205b4:	dd03      	ble.n	80205be <mg_is_url_safe+0x36>
 80205b6:	287e      	cmp	r0, #126	@ 0x7e
 80205b8:	d10f      	bne.n	80205da <mg_is_url_safe+0x52>
 80205ba:	2001      	movs	r0, #1
 80205bc:	4770      	bx	lr
 80205be:	2861      	cmp	r0, #97	@ 0x61
 80205c0:	da01      	bge.n	80205c6 <mg_is_url_safe+0x3e>
 80205c2:	2000      	movs	r0, #0
 80205c4:	4770      	bx	lr
 80205c6:	2001      	movs	r0, #1
 80205c8:	4770      	bx	lr
 80205ca:	2001      	movs	r0, #1
 80205cc:	4770      	bx	lr
 80205ce:	2001      	movs	r0, #1
 80205d0:	4770      	bx	lr
 80205d2:	2001      	movs	r0, #1
 80205d4:	4770      	bx	lr
 80205d6:	2000      	movs	r0, #0
 80205d8:	4770      	bx	lr
 80205da:	2000      	movs	r0, #0
}
 80205dc:	4770      	bx	lr

080205de <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80205de:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80205e2:	2b09      	cmp	r3, #9
 80205e4:	d908      	bls.n	80205f8 <is_hex_digit+0x1a>
 80205e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80205ea:	2b05      	cmp	r3, #5
 80205ec:	d906      	bls.n	80205fc <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 80205ee:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80205f0:	2805      	cmp	r0, #5
 80205f2:	d805      	bhi.n	8020600 <is_hex_digit+0x22>
 80205f4:	2001      	movs	r0, #1
 80205f6:	4770      	bx	lr
 80205f8:	2001      	movs	r0, #1
 80205fa:	4770      	bx	lr
 80205fc:	2001      	movs	r0, #1
 80205fe:	4770      	bx	lr
 8020600:	2000      	movs	r0, #0
}
 8020602:	4770      	bx	lr

08020604 <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 8020604:	b129      	cbz	r1, 8020612 <roundup+0xe>
 8020606:	4408      	add	r0, r1
 8020608:	3801      	subs	r0, #1
 802060a:	fbb0 f0f1 	udiv	r0, r0, r1
 802060e:	fb01 f000 	mul.w	r0, r1, r0
}
 8020612:	4770      	bx	lr

08020614 <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8020614:	b108      	cbz	r0, 802061a <escapeseq+0x6>
 8020616:	4802      	ldr	r0, [pc, #8]	@ (8020620 <escapeseq+0xc>)
 8020618:	4770      	bx	lr
 802061a:	4802      	ldr	r0, [pc, #8]	@ (8020624 <escapeseq+0x10>)
}
 802061c:	4770      	bx	lr
 802061e:	bf00      	nop
 8020620:	0803a3cc 	.word	0x0803a3cc
 8020624:	0803a3d4 	.word	0x0803a3d4

08020628 <json_esc>:

static char json_esc(int c, int esc) {
 8020628:	b570      	push	{r4, r5, r6, lr}
 802062a:	4604      	mov	r4, r0
 802062c:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 802062e:	4608      	mov	r0, r1
 8020630:	f7ff fff0 	bl	8020614 <escapeseq>
 8020634:	4606      	mov	r6, r0
 8020636:	fab5 f085 	clz	r0, r5
 802063a:	0940      	lsrs	r0, r0, #5
 802063c:	f7ff ffea 	bl	8020614 <escapeseq>
 8020640:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 8020642:	4633      	mov	r3, r6
 8020644:	e000      	b.n	8020648 <json_esc+0x20>
 8020646:	3301      	adds	r3, #1
 8020648:	7818      	ldrb	r0, [r3, #0]
 802064a:	b118      	cbz	r0, 8020654 <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 802064c:	42a0      	cmp	r0, r4
 802064e:	d1fa      	bne.n	8020646 <json_esc+0x1e>
 8020650:	1b9b      	subs	r3, r3, r6
 8020652:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8020654:	bd70      	pop	{r4, r5, r6, pc}

08020656 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8020656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802065a:	4607      	mov	r7, r0
 802065c:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 802065e:	2400      	movs	r4, #0
 8020660:	e003      	b.n	802066a <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 8020662:	b1d5      	cbz	r5, 802069a <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 8020664:	2d22      	cmp	r5, #34	@ 0x22
 8020666:	d015      	beq.n	8020694 <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 8020668:	3401      	adds	r4, #1
 802066a:	42b4      	cmp	r4, r6
 802066c:	da10      	bge.n	8020690 <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 802066e:	4623      	mov	r3, r4
 8020670:	5d3d      	ldrb	r5, [r7, r4]
 8020672:	2d5c      	cmp	r5, #92	@ 0x5c
 8020674:	d1f5      	bne.n	8020662 <mg_pass_string+0xc>
 8020676:	f104 0801 	add.w	r8, r4, #1
 802067a:	45b0      	cmp	r8, r6
 802067c:	daf1      	bge.n	8020662 <mg_pass_string+0xc>
 802067e:	443b      	add	r3, r7
 8020680:	2101      	movs	r1, #1
 8020682:	7858      	ldrb	r0, [r3, #1]
 8020684:	f7ff ffd0 	bl	8020628 <json_esc>
 8020688:	2800      	cmp	r0, #0
 802068a:	d0ea      	beq.n	8020662 <mg_pass_string+0xc>
      i++;
 802068c:	4644      	mov	r4, r8
 802068e:	e7eb      	b.n	8020668 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 8020690:	f06f 0401 	mvn.w	r4, #1
}
 8020694:	4620      	mov	r0, r4
 8020696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 802069a:	f06f 0401 	mvn.w	r4, #1
 802069e:	e7f9      	b.n	8020694 <mg_pass_string+0x3e>

080206a0 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 80206a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206a4:	ed2d 8b02 	vpush	{d8}
 80206a8:	b085      	sub	sp, #20
 80206aa:	4681      	mov	r9, r0
 80206ac:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 80206ae:	f1b1 0800 	subs.w	r8, r1, #0
 80206b2:	dd49      	ble.n	8020748 <mg_atod+0xa8>
 80206b4:	7803      	ldrb	r3, [r0, #0]
 80206b6:	2b2d      	cmp	r3, #45	@ 0x2d
 80206b8:	d04c      	beq.n	8020754 <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 80206ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80206bc:	d04e      	beq.n	802075c <mg_atod+0xbc>
  int i = 0, sign = 1;
 80206be:	f04f 0a01 	mov.w	sl, #1
 80206c2:	2400      	movs	r4, #0
 80206c4:	e043      	b.n	802074e <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 80206c6:	2200      	movs	r2, #0
 80206c8:	4b71      	ldr	r3, [pc, #452]	@ (8020890 <mg_atod+0x1f0>)
 80206ca:	4630      	mov	r0, r6
 80206cc:	4639      	mov	r1, r7
 80206ce:	f7ef ffab 	bl	8010628 <__aeabi_dmul>
 80206d2:	4606      	mov	r6, r0
 80206d4:	460f      	mov	r7, r1
    d += p[i] - '0';
 80206d6:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 80206da:	f7ef ff3b 	bl	8010554 <__aeabi_i2d>
 80206de:	4632      	mov	r2, r6
 80206e0:	463b      	mov	r3, r7
 80206e2:	f7ef fdeb 	bl	80102bc <__adddf3>
 80206e6:	4606      	mov	r6, r0
 80206e8:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80206ea:	3401      	adds	r4, #1
 80206ec:	4544      	cmp	r4, r8
 80206ee:	da05      	bge.n	80206fc <mg_atod+0x5c>
 80206f0:	f819 5004 	ldrb.w	r5, [r9, r4]
 80206f4:	2d2f      	cmp	r5, #47	@ 0x2f
 80206f6:	d901      	bls.n	80206fc <mg_atod+0x5c>
 80206f8:	2d39      	cmp	r5, #57	@ 0x39
 80206fa:	d9e4      	bls.n	80206c6 <mg_atod+0x26>
  }
  d *= sign;
 80206fc:	4650      	mov	r0, sl
 80206fe:	f7ef ff29 	bl	8010554 <__aeabi_i2d>
 8020702:	4602      	mov	r2, r0
 8020704:	460b      	mov	r3, r1
 8020706:	ec43 2b18 	vmov	d8, r2, r3
 802070a:	4632      	mov	r2, r6
 802070c:	463b      	mov	r3, r7
 802070e:	f7ef ff8b 	bl	8010628 <__aeabi_dmul>
 8020712:	4606      	mov	r6, r0
 8020714:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 8020716:	4544      	cmp	r4, r8
 8020718:	da03      	bge.n	8020722 <mg_atod+0x82>
 802071a:	f819 3004 	ldrb.w	r3, [r9, r4]
 802071e:	2b2e      	cmp	r3, #46	@ 0x2e
 8020720:	d020      	beq.n	8020764 <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8020722:	4544      	cmp	r4, r8
 8020724:	f280 80a1 	bge.w	802086a <mg_atod+0x1ca>
 8020728:	f819 3004 	ldrb.w	r3, [r9, r4]
 802072c:	2b65      	cmp	r3, #101	@ 0x65
 802072e:	d002      	beq.n	8020736 <mg_atod+0x96>
 8020730:	2b45      	cmp	r3, #69	@ 0x45
 8020732:	f040 809a 	bne.w	802086a <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 8020736:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 8020738:	4598      	cmp	r8, r3
 802073a:	dd58      	ble.n	80207ee <mg_atod+0x14e>
 802073c:	f819 2003 	ldrb.w	r2, [r9, r3]
 8020740:	2a2d      	cmp	r2, #45	@ 0x2d
 8020742:	d051      	beq.n	80207e8 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 8020744:	2200      	movs	r2, #0
 8020746:	e053      	b.n	80207f0 <mg_atod+0x150>
  int i = 0, sign = 1;
 8020748:	f04f 0a01 	mov.w	sl, #1
 802074c:	2400      	movs	r4, #0
    i++;
 802074e:	2600      	movs	r6, #0
 8020750:	2700      	movs	r7, #0
 8020752:	e7cb      	b.n	80206ec <mg_atod+0x4c>
    sign = -1, i++;
 8020754:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8020758:	2401      	movs	r4, #1
 802075a:	e7f8      	b.n	802074e <mg_atod+0xae>
  int i = 0, sign = 1;
 802075c:	f04f 0a01 	mov.w	sl, #1
    i++;
 8020760:	4654      	mov	r4, sl
 8020762:	e7f4      	b.n	802074e <mg_atod+0xae>
    i++;
 8020764:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 8020766:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 802076a:	e9db ab00 	ldrd	sl, fp, [fp]
 802076e:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8020888 <mg_atod+0x1e8>
 8020772:	ec53 2b17 	vmov	r2, r3, d7
 8020776:	e9cd 6702 	strd	r6, r7, [sp, #8]
 802077a:	464f      	mov	r7, r9
 802077c:	4645      	mov	r5, r8
 802077e:	4690      	mov	r8, r2
 8020780:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020782:	e017      	b.n	80207b4 <mg_atod+0x114>
      frac += base * (p[i] - '0');
 8020784:	3830      	subs	r0, #48	@ 0x30
 8020786:	f7ef fee5 	bl	8010554 <__aeabi_i2d>
 802078a:	4652      	mov	r2, sl
 802078c:	465b      	mov	r3, fp
 802078e:	f7ef ff4b 	bl	8010628 <__aeabi_dmul>
 8020792:	4602      	mov	r2, r0
 8020794:	460b      	mov	r3, r1
 8020796:	4640      	mov	r0, r8
 8020798:	4649      	mov	r1, r9
 802079a:	f7ef fd8f 	bl	80102bc <__adddf3>
 802079e:	4680      	mov	r8, r0
 80207a0:	4689      	mov	r9, r1
      base /= 10.0;
 80207a2:	2200      	movs	r2, #0
 80207a4:	4b3a      	ldr	r3, [pc, #232]	@ (8020890 <mg_atod+0x1f0>)
 80207a6:	4650      	mov	r0, sl
 80207a8:	4659      	mov	r1, fp
 80207aa:	f7f0 f867 	bl	801087c <__aeabi_ddiv>
 80207ae:	4682      	mov	sl, r0
 80207b0:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80207b2:	3401      	adds	r4, #1
 80207b4:	42ac      	cmp	r4, r5
 80207b6:	da04      	bge.n	80207c2 <mg_atod+0x122>
 80207b8:	5d38      	ldrb	r0, [r7, r4]
 80207ba:	282f      	cmp	r0, #47	@ 0x2f
 80207bc:	d901      	bls.n	80207c2 <mg_atod+0x122>
 80207be:	2839      	cmp	r0, #57	@ 0x39
 80207c0:	d9e0      	bls.n	8020784 <mg_atod+0xe4>
    d += frac * sign;
 80207c2:	4642      	mov	r2, r8
 80207c4:	464b      	mov	r3, r9
 80207c6:	46b9      	mov	r9, r7
 80207c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80207cc:	46a8      	mov	r8, r5
 80207ce:	ec51 0b18 	vmov	r0, r1, d8
 80207d2:	f7ef ff29 	bl	8010628 <__aeabi_dmul>
 80207d6:	4602      	mov	r2, r0
 80207d8:	460b      	mov	r3, r1
 80207da:	4630      	mov	r0, r6
 80207dc:	4639      	mov	r1, r7
 80207de:	f7ef fd6d 	bl	80102bc <__adddf3>
 80207e2:	4606      	mov	r6, r0
 80207e4:	460f      	mov	r7, r1
 80207e6:	e79c      	b.n	8020722 <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 80207e8:	1ca3      	adds	r3, r4, #2
 80207ea:	2201      	movs	r2, #1
 80207ec:	e000      	b.n	80207f0 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 80207ee:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 80207f0:	4543      	cmp	r3, r8
 80207f2:	da03      	bge.n	80207fc <mg_atod+0x15c>
 80207f4:	f819 1003 	ldrb.w	r1, [r9, r3]
 80207f8:	292b      	cmp	r1, #43	@ 0x2b
 80207fa:	d013      	beq.n	8020824 <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 80207fc:	461c      	mov	r4, r3
 80207fe:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8020800:	4544      	cmp	r4, r8
 8020802:	da11      	bge.n	8020828 <mg_atod+0x188>
 8020804:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020808:	2b2f      	cmp	r3, #47	@ 0x2f
 802080a:	d90d      	bls.n	8020828 <mg_atod+0x188>
 802080c:	2b39      	cmp	r3, #57	@ 0x39
 802080e:	d80b      	bhi.n	8020828 <mg_atod+0x188>
 8020810:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 8020814:	da08      	bge.n	8020828 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 8020816:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 802081a:	3401      	adds	r4, #1
 802081c:	3b30      	subs	r3, #48	@ 0x30
 802081e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020822:	e7ed      	b.n	8020800 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 8020824:	3301      	adds	r3, #1
 8020826:	e7e9      	b.n	80207fc <mg_atod+0x15c>
    if (minus) exp = -exp;
 8020828:	b102      	cbz	r2, 802082c <mg_atod+0x18c>
 802082a:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 802082c:	f04f 0800 	mov.w	r8, #0
 8020830:	e009      	b.n	8020846 <mg_atod+0x1a6>
 8020832:	2200      	movs	r2, #0
 8020834:	4b16      	ldr	r3, [pc, #88]	@ (8020890 <mg_atod+0x1f0>)
 8020836:	4630      	mov	r0, r6
 8020838:	4639      	mov	r1, r7
 802083a:	f7ef fef5 	bl	8010628 <__aeabi_dmul>
 802083e:	4606      	mov	r6, r0
 8020840:	460f      	mov	r7, r1
 8020842:	f108 0801 	add.w	r8, r8, #1
 8020846:	45a8      	cmp	r8, r5
 8020848:	dbf3      	blt.n	8020832 <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 802084a:	f04f 0800 	mov.w	r8, #0
 802084e:	e009      	b.n	8020864 <mg_atod+0x1c4>
 8020850:	2200      	movs	r2, #0
 8020852:	4b0f      	ldr	r3, [pc, #60]	@ (8020890 <mg_atod+0x1f0>)
 8020854:	4630      	mov	r0, r6
 8020856:	4639      	mov	r1, r7
 8020858:	f7f0 f810 	bl	801087c <__aeabi_ddiv>
 802085c:	4606      	mov	r6, r0
 802085e:	460f      	mov	r7, r1
 8020860:	f108 0801 	add.w	r8, r8, #1
 8020864:	426b      	negs	r3, r5
 8020866:	4543      	cmp	r3, r8
 8020868:	dcf2      	bgt.n	8020850 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 802086a:	9b01      	ldr	r3, [sp, #4]
 802086c:	b103      	cbz	r3, 8020870 <mg_atod+0x1d0>
 802086e:	601c      	str	r4, [r3, #0]
  return d;
}
 8020870:	ec47 6b10 	vmov	d0, r6, r7
 8020874:	b005      	add	sp, #20
 8020876:	ecbd 8b02 	vpop	{d8}
 802087a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802087e:	bf00      	nop
 8020880:	9999999a 	.word	0x9999999a
 8020884:	3fb99999 	.word	0x3fb99999
	...
 8020890:	40240000 	.word	0x40240000

08020894 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8020894:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 8020896:	4b03      	ldr	r3, [pc, #12]	@ (80208a4 <logc+0x10>)
 8020898:	681b      	ldr	r3, [r3, #0]
 802089a:	4a03      	ldr	r2, [pc, #12]	@ (80208a8 <logc+0x14>)
 802089c:	6811      	ldr	r1, [r2, #0]
 802089e:	4798      	blx	r3
}
 80208a0:	bd08      	pop	{r3, pc}
 80208a2:	bf00      	nop
 80208a4:	20000128 	.word	0x20000128
 80208a8:	20019ee0 	.word	0x20019ee0

080208ac <logs>:

static void logs(const char *buf, size_t len) {
 80208ac:	b570      	push	{r4, r5, r6, lr}
 80208ae:	4606      	mov	r6, r0
 80208b0:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 80208b2:	2400      	movs	r4, #0
 80208b4:	e003      	b.n	80208be <logs+0x12>
 80208b6:	5d30      	ldrb	r0, [r6, r4]
 80208b8:	f7ff ffec 	bl	8020894 <logc>
 80208bc:	3401      	adds	r4, #1
 80208be:	42ac      	cmp	r4, r5
 80208c0:	d3f9      	bcc.n	80208b6 <logs+0xa>
}
 80208c2:	bd70      	pop	{r4, r5, r6, pc}

080208c4 <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 80208c4:	2809      	cmp	r0, #9
 80208c6:	d803      	bhi.n	80208d0 <nibble+0xc>
 80208c8:	b2c0      	uxtb	r0, r0
 80208ca:	3030      	adds	r0, #48	@ 0x30
 80208cc:	b2c0      	uxtb	r0, r0
 80208ce:	4770      	bx	lr
 80208d0:	b2c0      	uxtb	r0, r0
 80208d2:	3057      	adds	r0, #87	@ 0x57
 80208d4:	b2c0      	uxtb	r0, r0
}
 80208d6:	4770      	bx	lr

080208d8 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 80208d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208dc:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 80208de:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 80208e0:	6883      	ldr	r3, [r0, #8]
 80208e2:	68c2      	ldr	r2, [r0, #12]
 80208e4:	4053      	eors	r3, r2
 80208e6:	4033      	ands	r3, r6
 80208e8:	4053      	eors	r3, r2
 80208ea:	f8d1 a000 	ldr.w	sl, [r1]
 80208ee:	4453      	add	r3, sl
 80208f0:	6802      	ldr	r2, [r0, #0]
 80208f2:	4413      	add	r3, r2
 80208f4:	4ae0      	ldr	r2, [pc, #896]	@ (8020c78 <mg_md5_transform+0x3a0>)
 80208f6:	441a      	add	r2, r3
 80208f8:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 80208fc:	6883      	ldr	r3, [r0, #8]
 80208fe:	ea86 0503 	eor.w	r5, r6, r3
 8020902:	4015      	ands	r5, r2
 8020904:	405d      	eors	r5, r3
 8020906:	684b      	ldr	r3, [r1, #4]
 8020908:	9301      	str	r3, [sp, #4]
 802090a:	441d      	add	r5, r3
 802090c:	68c4      	ldr	r4, [r0, #12]
 802090e:	4425      	add	r5, r4
 8020910:	4bda      	ldr	r3, [pc, #872]	@ (8020c7c <mg_md5_transform+0x3a4>)
 8020912:	442b      	add	r3, r5
 8020914:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 8020918:	ea86 0502 	eor.w	r5, r6, r2
 802091c:	401d      	ands	r5, r3
 802091e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8020920:	4075      	eors	r5, r6
 8020922:	688c      	ldr	r4, [r1, #8]
 8020924:	4425      	add	r5, r4
 8020926:	6886      	ldr	r6, [r0, #8]
 8020928:	4435      	add	r5, r6
 802092a:	4ed5      	ldr	r6, [pc, #852]	@ (8020c80 <mg_md5_transform+0x3a8>)
 802092c:	442e      	add	r6, r5
 802092e:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 8020932:	ea82 0703 	eor.w	r7, r2, r3
 8020936:	ea07 070c 	and.w	r7, r7, ip
 802093a:	4057      	eors	r7, r2
 802093c:	68cd      	ldr	r5, [r1, #12]
 802093e:	950a      	str	r5, [sp, #40]	@ 0x28
 8020940:	442f      	add	r7, r5
 8020942:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8020944:	4437      	add	r7, r6
 8020946:	4dcf      	ldr	r5, [pc, #828]	@ (8020c84 <mg_md5_transform+0x3ac>)
 8020948:	443d      	add	r5, r7
 802094a:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 802094e:	ea83 070c 	eor.w	r7, r3, ip
 8020952:	402f      	ands	r7, r5
 8020954:	405f      	eors	r7, r3
 8020956:	690e      	ldr	r6, [r1, #16]
 8020958:	9602      	str	r6, [sp, #8]
 802095a:	4437      	add	r7, r6
 802095c:	4417      	add	r7, r2
 802095e:	4aca      	ldr	r2, [pc, #808]	@ (8020c88 <mg_md5_transform+0x3b0>)
 8020960:	443a      	add	r2, r7
 8020962:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 8020966:	ea8c 0705 	eor.w	r7, ip, r5
 802096a:	4017      	ands	r7, r2
 802096c:	ea87 070c 	eor.w	r7, r7, ip
 8020970:	694e      	ldr	r6, [r1, #20]
 8020972:	9603      	str	r6, [sp, #12]
 8020974:	4437      	add	r7, r6
 8020976:	441f      	add	r7, r3
 8020978:	4bc4      	ldr	r3, [pc, #784]	@ (8020c8c <mg_md5_transform+0x3b4>)
 802097a:	443b      	add	r3, r7
 802097c:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 8020980:	ea85 0702 	eor.w	r7, r5, r2
 8020984:	401f      	ands	r7, r3
 8020986:	406f      	eors	r7, r5
 8020988:	698e      	ldr	r6, [r1, #24]
 802098a:	9604      	str	r6, [sp, #16]
 802098c:	4437      	add	r7, r6
 802098e:	eb0c 0607 	add.w	r6, ip, r7
 8020992:	4fbf      	ldr	r7, [pc, #764]	@ (8020c90 <mg_md5_transform+0x3b8>)
 8020994:	4437      	add	r7, r6
 8020996:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 802099a:	ea82 0603 	eor.w	r6, r2, r3
 802099e:	ea06 060c 	and.w	r6, r6, ip
 80209a2:	4056      	eors	r6, r2
 80209a4:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80209a8:	444e      	add	r6, r9
 80209aa:	4435      	add	r5, r6
 80209ac:	4fb9      	ldr	r7, [pc, #740]	@ (8020c94 <mg_md5_transform+0x3bc>)
 80209ae:	442f      	add	r7, r5
 80209b0:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 80209b4:	ea83 050c 	eor.w	r5, r3, ip
 80209b8:	403d      	ands	r5, r7
 80209ba:	405d      	eors	r5, r3
 80209bc:	6a0e      	ldr	r6, [r1, #32]
 80209be:	9605      	str	r6, [sp, #20]
 80209c0:	4435      	add	r5, r6
 80209c2:	442a      	add	r2, r5
 80209c4:	4eb4      	ldr	r6, [pc, #720]	@ (8020c98 <mg_md5_transform+0x3c0>)
 80209c6:	4416      	add	r6, r2
 80209c8:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 80209cc:	ea8c 0207 	eor.w	r2, ip, r7
 80209d0:	4032      	ands	r2, r6
 80209d2:	ea82 020c 	eor.w	r2, r2, ip
 80209d6:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80209d8:	9506      	str	r5, [sp, #24]
 80209da:	442a      	add	r2, r5
 80209dc:	4413      	add	r3, r2
 80209de:	4daf      	ldr	r5, [pc, #700]	@ (8020c9c <mg_md5_transform+0x3c4>)
 80209e0:	441d      	add	r5, r3
 80209e2:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 80209e6:	ea87 0306 	eor.w	r3, r7, r6
 80209ea:	402b      	ands	r3, r5
 80209ec:	407b      	eors	r3, r7
 80209ee:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80209f0:	9207      	str	r2, [sp, #28]
 80209f2:	4413      	add	r3, r2
 80209f4:	4463      	add	r3, ip
 80209f6:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 80209fa:	3b4f      	subs	r3, #79	@ 0x4f
 80209fc:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 8020a00:	ea86 0c05 	eor.w	ip, r6, r5
 8020a04:	ea0c 0c03 	and.w	ip, ip, r3
 8020a08:	ea8c 0c06 	eor.w	ip, ip, r6
 8020a0c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8020a0e:	9208      	str	r2, [sp, #32]
 8020a10:	4494      	add	ip, r2
 8020a12:	4467      	add	r7, ip
 8020a14:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 8020cc0 <mg_md5_transform+0x3e8>
 8020a18:	44be      	add	lr, r7
 8020a1a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 8020a1e:	ea85 0c03 	eor.w	ip, r5, r3
 8020a22:	ea0c 0c0e 	and.w	ip, ip, lr
 8020a26:	ea8c 0c05 	eor.w	ip, ip, r5
 8020a2a:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 8020a2c:	44bc      	add	ip, r7
 8020a2e:	4466      	add	r6, ip
 8020a30:	f8df c290 	ldr.w	ip, [pc, #656]	@ 8020cc4 <mg_md5_transform+0x3ec>
 8020a34:	44b4      	add	ip, r6
 8020a36:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 8020a3a:	ea83 080e 	eor.w	r8, r3, lr
 8020a3e:	ea08 080c 	and.w	r8, r8, ip
 8020a42:	ea88 0803 	eor.w	r8, r8, r3
 8020a46:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 8020a48:	44b0      	add	r8, r6
 8020a4a:	44a8      	add	r8, r5
 8020a4c:	4d94      	ldr	r5, [pc, #592]	@ (8020ca0 <mg_md5_transform+0x3c8>)
 8020a4e:	4445      	add	r5, r8
 8020a50:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 8020a54:	ea8e 0b0c 	eor.w	fp, lr, ip
 8020a58:	ea0b 0b05 	and.w	fp, fp, r5
 8020a5c:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020a60:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 8020a64:	44c3      	add	fp, r8
 8020a66:	449b      	add	fp, r3
 8020a68:	4b8e      	ldr	r3, [pc, #568]	@ (8020ca4 <mg_md5_transform+0x3cc>)
 8020a6a:	445b      	add	r3, fp
 8020a6c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 8020a70:	ea8c 0b05 	eor.w	fp, ip, r5
 8020a74:	ea0b 0b03 	and.w	fp, fp, r3
 8020a78:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020a7c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8020a7e:	9109      	str	r1, [sp, #36]	@ 0x24
 8020a80:	448b      	add	fp, r1
 8020a82:	44f3      	add	fp, lr
 8020a84:	f8df e240 	ldr.w	lr, [pc, #576]	@ 8020cc8 <mg_md5_transform+0x3f0>
 8020a88:	44de      	add	lr, fp
 8020a8a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 8020a8e:	ea83 0b0e 	eor.w	fp, r3, lr
 8020a92:	ea0b 0b05 	and.w	fp, fp, r5
 8020a96:	ea8b 0b03 	eor.w	fp, fp, r3
 8020a9a:	9a01      	ldr	r2, [sp, #4]
 8020a9c:	4493      	add	fp, r2
 8020a9e:	44e3      	add	fp, ip
 8020aa0:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8020ccc <mg_md5_transform+0x3f4>
 8020aa4:	44dc      	add	ip, fp
 8020aa6:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 8020aaa:	ea8e 0b0c 	eor.w	fp, lr, ip
 8020aae:	ea0b 0b03 	and.w	fp, fp, r3
 8020ab2:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020ab6:	9a04      	ldr	r2, [sp, #16]
 8020ab8:	4493      	add	fp, r2
 8020aba:	44ab      	add	fp, r5
 8020abc:	4d7a      	ldr	r5, [pc, #488]	@ (8020ca8 <mg_md5_transform+0x3d0>)
 8020abe:	445d      	add	r5, fp
 8020ac0:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 8020ac4:	ea8c 0b05 	eor.w	fp, ip, r5
 8020ac8:	ea0b 0b0e 	and.w	fp, fp, lr
 8020acc:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020ad0:	9908      	ldr	r1, [sp, #32]
 8020ad2:	448b      	add	fp, r1
 8020ad4:	445b      	add	r3, fp
 8020ad6:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 8020cd0 <mg_md5_transform+0x3f8>
 8020ada:	449b      	add	fp, r3
 8020adc:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 8020ae0:	ea85 030b 	eor.w	r3, r5, fp
 8020ae4:	ea03 030c 	and.w	r3, r3, ip
 8020ae8:	406b      	eors	r3, r5
 8020aea:	4453      	add	r3, sl
 8020aec:	4473      	add	r3, lr
 8020aee:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 8020cd4 <mg_md5_transform+0x3fc>
 8020af2:	449e      	add	lr, r3
 8020af4:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 8020af8:	ea8b 030e 	eor.w	r3, fp, lr
 8020afc:	402b      	ands	r3, r5
 8020afe:	ea83 030b 	eor.w	r3, r3, fp
 8020b02:	9a03      	ldr	r2, [sp, #12]
 8020b04:	4413      	add	r3, r2
 8020b06:	449c      	add	ip, r3
 8020b08:	4b68      	ldr	r3, [pc, #416]	@ (8020cac <mg_md5_transform+0x3d4>)
 8020b0a:	4463      	add	r3, ip
 8020b0c:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 8020b10:	ea8e 0c03 	eor.w	ip, lr, r3
 8020b14:	ea0c 0c0b 	and.w	ip, ip, fp
 8020b18:	ea8c 0c0e 	eor.w	ip, ip, lr
 8020b1c:	9a07      	ldr	r2, [sp, #28]
 8020b1e:	4494      	add	ip, r2
 8020b20:	4465      	add	r5, ip
 8020b22:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8020cd8 <mg_md5_transform+0x400>
 8020b26:	44ac      	add	ip, r5
 8020b28:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 8020b2c:	ea83 050c 	eor.w	r5, r3, ip
 8020b30:	ea05 050e 	and.w	r5, r5, lr
 8020b34:	405d      	eors	r5, r3
 8020b36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020b38:	440d      	add	r5, r1
 8020b3a:	445d      	add	r5, fp
 8020b3c:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 8020cdc <mg_md5_transform+0x404>
 8020b40:	44ab      	add	fp, r5
 8020b42:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 8020b46:	ea8c 050b 	eor.w	r5, ip, fp
 8020b4a:	401d      	ands	r5, r3
 8020b4c:	ea85 050c 	eor.w	r5, r5, ip
 8020b50:	9a02      	ldr	r2, [sp, #8]
 8020b52:	4415      	add	r5, r2
 8020b54:	44ae      	add	lr, r5
 8020b56:	4d56      	ldr	r5, [pc, #344]	@ (8020cb0 <mg_md5_transform+0x3d8>)
 8020b58:	4475      	add	r5, lr
 8020b5a:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 8020b5e:	ea8b 0e05 	eor.w	lr, fp, r5
 8020b62:	ea0e 0e0c 	and.w	lr, lr, ip
 8020b66:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020b6a:	9906      	ldr	r1, [sp, #24]
 8020b6c:	448e      	add	lr, r1
 8020b6e:	4473      	add	r3, lr
 8020b70:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8020ce0 <mg_md5_transform+0x408>
 8020b74:	449e      	add	lr, r3
 8020b76:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 8020b7a:	ea85 030e 	eor.w	r3, r5, lr
 8020b7e:	ea03 030b 	and.w	r3, r3, fp
 8020b82:	406b      	eors	r3, r5
 8020b84:	4443      	add	r3, r8
 8020b86:	4463      	add	r3, ip
 8020b88:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8020ce4 <mg_md5_transform+0x40c>
 8020b8c:	449c      	add	ip, r3
 8020b8e:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 8020b92:	ea8e 030c 	eor.w	r3, lr, ip
 8020b96:	402b      	ands	r3, r5
 8020b98:	ea83 030e 	eor.w	r3, r3, lr
 8020b9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020b9e:	4413      	add	r3, r2
 8020ba0:	449b      	add	fp, r3
 8020ba2:	4b44      	ldr	r3, [pc, #272]	@ (8020cb4 <mg_md5_transform+0x3dc>)
 8020ba4:	445b      	add	r3, fp
 8020ba6:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 8020baa:	ea8c 0b03 	eor.w	fp, ip, r3
 8020bae:	ea0b 0b0e 	and.w	fp, fp, lr
 8020bb2:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020bb6:	9905      	ldr	r1, [sp, #20]
 8020bb8:	448b      	add	fp, r1
 8020bba:	445d      	add	r5, fp
 8020bbc:	f8df b128 	ldr.w	fp, [pc, #296]	@ 8020ce8 <mg_md5_transform+0x410>
 8020bc0:	44ab      	add	fp, r5
 8020bc2:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 8020bc6:	ea83 050b 	eor.w	r5, r3, fp
 8020bca:	ea05 050c 	and.w	r5, r5, ip
 8020bce:	405d      	eors	r5, r3
 8020bd0:	4435      	add	r5, r6
 8020bd2:	4475      	add	r5, lr
 8020bd4:	f8df e114 	ldr.w	lr, [pc, #276]	@ 8020cec <mg_md5_transform+0x414>
 8020bd8:	44ae      	add	lr, r5
 8020bda:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 8020bde:	ea8b 050e 	eor.w	r5, fp, lr
 8020be2:	401d      	ands	r5, r3
 8020be4:	ea85 050b 	eor.w	r5, r5, fp
 8020be8:	4425      	add	r5, r4
 8020bea:	44ac      	add	ip, r5
 8020bec:	4d32      	ldr	r5, [pc, #200]	@ (8020cb8 <mg_md5_transform+0x3e0>)
 8020bee:	4465      	add	r5, ip
 8020bf0:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 8020bf4:	ea8e 0c05 	eor.w	ip, lr, r5
 8020bf8:	ea0c 0c0b 	and.w	ip, ip, fp
 8020bfc:	ea8c 0c0e 	eor.w	ip, ip, lr
 8020c00:	44cc      	add	ip, r9
 8020c02:	4463      	add	r3, ip
 8020c04:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 8020cf0 <mg_md5_transform+0x418>
 8020c08:	449c      	add	ip, r3
 8020c0a:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 8020c0e:	ea85 030c 	eor.w	r3, r5, ip
 8020c12:	ea03 030e 	and.w	r3, r3, lr
 8020c16:	406b      	eors	r3, r5
 8020c18:	443b      	add	r3, r7
 8020c1a:	445b      	add	r3, fp
 8020c1c:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8020cf4 <mg_md5_transform+0x41c>
 8020c20:	449b      	add	fp, r3
 8020c22:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 8020c26:	ea8c 030b 	eor.w	r3, ip, fp
 8020c2a:	406b      	eors	r3, r5
 8020c2c:	9a03      	ldr	r2, [sp, #12]
 8020c2e:	4413      	add	r3, r2
 8020c30:	4473      	add	r3, lr
 8020c32:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 8020c36:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 8020c3a:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 8020c3e:	ea8b 0e03 	eor.w	lr, fp, r3
 8020c42:	ea8e 0e0c 	eor.w	lr, lr, ip
 8020c46:	448e      	add	lr, r1
 8020c48:	44ae      	add	lr, r5
 8020c4a:	4d1c      	ldr	r5, [pc, #112]	@ (8020cbc <mg_md5_transform+0x3e4>)
 8020c4c:	4475      	add	r5, lr
 8020c4e:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 8020c52:	ea83 0e05 	eor.w	lr, r3, r5
 8020c56:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020c5a:	9908      	ldr	r1, [sp, #32]
 8020c5c:	448e      	add	lr, r1
 8020c5e:	44f4      	add	ip, lr
 8020c60:	f8df e094 	ldr.w	lr, [pc, #148]	@ 8020cf8 <mg_md5_transform+0x420>
 8020c64:	44e6      	add	lr, ip
 8020c66:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 8020c6a:	ea85 0c0e 	eor.w	ip, r5, lr
 8020c6e:	ea8c 0c03 	eor.w	ip, ip, r3
 8020c72:	44c4      	add	ip, r8
 8020c74:	44e3      	add	fp, ip
 8020c76:	e041      	b.n	8020cfc <mg_md5_transform+0x424>
 8020c78:	d76aa478 	.word	0xd76aa478
 8020c7c:	e8c7b756 	.word	0xe8c7b756
 8020c80:	242070db 	.word	0x242070db
 8020c84:	c1bdceee 	.word	0xc1bdceee
 8020c88:	f57c0faf 	.word	0xf57c0faf
 8020c8c:	4787c62a 	.word	0x4787c62a
 8020c90:	a8304613 	.word	0xa8304613
 8020c94:	fd469501 	.word	0xfd469501
 8020c98:	698098d8 	.word	0x698098d8
 8020c9c:	8b44f7af 	.word	0x8b44f7af
 8020ca0:	fd987193 	.word	0xfd987193
 8020ca4:	a679438e 	.word	0xa679438e
 8020ca8:	c040b340 	.word	0xc040b340
 8020cac:	d62f105d 	.word	0xd62f105d
 8020cb0:	e7d3fbc8 	.word	0xe7d3fbc8
 8020cb4:	f4d50d87 	.word	0xf4d50d87
 8020cb8:	fcefa3f8 	.word	0xfcefa3f8
 8020cbc:	8771f681 	.word	0x8771f681
 8020cc0:	895cd7be 	.word	0x895cd7be
 8020cc4:	6b901122 	.word	0x6b901122
 8020cc8:	49b40821 	.word	0x49b40821
 8020ccc:	f61e2562 	.word	0xf61e2562
 8020cd0:	265e5a51 	.word	0x265e5a51
 8020cd4:	e9b6c7aa 	.word	0xe9b6c7aa
 8020cd8:	02441453 	.word	0x02441453
 8020cdc:	d8a1e681 	.word	0xd8a1e681
 8020ce0:	21e1cde6 	.word	0x21e1cde6
 8020ce4:	c33707d6 	.word	0xc33707d6
 8020ce8:	455a14ed 	.word	0x455a14ed
 8020cec:	a9e3e905 	.word	0xa9e3e905
 8020cf0:	676f02d9 	.word	0x676f02d9
 8020cf4:	8d2a4c8a 	.word	0x8d2a4c8a
 8020cf8:	6d9d6122 	.word	0x6d9d6122
 8020cfc:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8020fc4 <mg_md5_transform+0x6ec>
 8020d00:	44dc      	add	ip, fp
 8020d02:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 8020d06:	ea8e 0b0c 	eor.w	fp, lr, ip
 8020d0a:	ea8b 0b05 	eor.w	fp, fp, r5
 8020d0e:	9a01      	ldr	r2, [sp, #4]
 8020d10:	4493      	add	fp, r2
 8020d12:	449b      	add	fp, r3
 8020d14:	4b99      	ldr	r3, [pc, #612]	@ (8020f7c <mg_md5_transform+0x6a4>)
 8020d16:	445b      	add	r3, fp
 8020d18:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 8020d1c:	ea8c 0b03 	eor.w	fp, ip, r3
 8020d20:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020d24:	9a02      	ldr	r2, [sp, #8]
 8020d26:	4493      	add	fp, r2
 8020d28:	445d      	add	r5, fp
 8020d2a:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 8020fc8 <mg_md5_transform+0x6f0>
 8020d2e:	44ab      	add	fp, r5
 8020d30:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 8020d34:	ea83 050b 	eor.w	r5, r3, fp
 8020d38:	ea85 050c 	eor.w	r5, r5, ip
 8020d3c:	444d      	add	r5, r9
 8020d3e:	44ae      	add	lr, r5
 8020d40:	4d8f      	ldr	r5, [pc, #572]	@ (8020f80 <mg_md5_transform+0x6a8>)
 8020d42:	4475      	add	r5, lr
 8020d44:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 8020d48:	ea8b 0e05 	eor.w	lr, fp, r5
 8020d4c:	ea8e 0e03 	eor.w	lr, lr, r3
 8020d50:	9a07      	ldr	r2, [sp, #28]
 8020d52:	4496      	add	lr, r2
 8020d54:	44e6      	add	lr, ip
 8020d56:	f8df c274 	ldr.w	ip, [pc, #628]	@ 8020fcc <mg_md5_transform+0x6f4>
 8020d5a:	44f4      	add	ip, lr
 8020d5c:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 8020d60:	ea85 0e0c 	eor.w	lr, r5, ip
 8020d64:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020d68:	44b6      	add	lr, r6
 8020d6a:	4473      	add	r3, lr
 8020d6c:	f8df e260 	ldr.w	lr, [pc, #608]	@ 8020fd0 <mg_md5_transform+0x6f8>
 8020d70:	449e      	add	lr, r3
 8020d72:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 8020d76:	ea8c 030e 	eor.w	r3, ip, lr
 8020d7a:	406b      	eors	r3, r5
 8020d7c:	4453      	add	r3, sl
 8020d7e:	449b      	add	fp, r3
 8020d80:	4b80      	ldr	r3, [pc, #512]	@ (8020f84 <mg_md5_transform+0x6ac>)
 8020d82:	445b      	add	r3, fp
 8020d84:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 8020d88:	ea8e 0b03 	eor.w	fp, lr, r3
 8020d8c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020d90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020d92:	4493      	add	fp, r2
 8020d94:	445d      	add	r5, fp
 8020d96:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 8020fd4 <mg_md5_transform+0x6fc>
 8020d9a:	44ab      	add	fp, r5
 8020d9c:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 8020da0:	ea83 050b 	eor.w	r5, r3, fp
 8020da4:	ea85 050e 	eor.w	r5, r5, lr
 8020da8:	9904      	ldr	r1, [sp, #16]
 8020daa:	440d      	add	r5, r1
 8020dac:	4465      	add	r5, ip
 8020dae:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8020fd8 <mg_md5_transform+0x700>
 8020db2:	44ac      	add	ip, r5
 8020db4:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 8020db8:	ea8b 050c 	eor.w	r5, fp, ip
 8020dbc:	405d      	eors	r5, r3
 8020dbe:	9906      	ldr	r1, [sp, #24]
 8020dc0:	440d      	add	r5, r1
 8020dc2:	44ae      	add	lr, r5
 8020dc4:	4d70      	ldr	r5, [pc, #448]	@ (8020f88 <mg_md5_transform+0x6b0>)
 8020dc6:	4475      	add	r5, lr
 8020dc8:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 8020dcc:	ea8c 0e05 	eor.w	lr, ip, r5
 8020dd0:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020dd4:	44be      	add	lr, r7
 8020dd6:	4473      	add	r3, lr
 8020dd8:	f8df e200 	ldr.w	lr, [pc, #512]	@ 8020fdc <mg_md5_transform+0x704>
 8020ddc:	449e      	add	lr, r3
 8020dde:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 8020de2:	ea85 030e 	eor.w	r3, r5, lr
 8020de6:	ea83 030c 	eor.w	r3, r3, ip
 8020dea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020dec:	440b      	add	r3, r1
 8020dee:	445b      	add	r3, fp
 8020df0:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 8020fe0 <mg_md5_transform+0x708>
 8020df4:	449b      	add	fp, r3
 8020df6:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 8020dfa:	ea8e 030b 	eor.w	r3, lr, fp
 8020dfe:	406b      	eors	r3, r5
 8020e00:	940a      	str	r4, [sp, #40]	@ 0x28
 8020e02:	4423      	add	r3, r4
 8020e04:	449c      	add	ip, r3
 8020e06:	4b61      	ldr	r3, [pc, #388]	@ (8020f8c <mg_md5_transform+0x6b4>)
 8020e08:	4463      	add	r3, ip
 8020e0a:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 8020e0e:	ea63 0c0e 	orn	ip, r3, lr
 8020e12:	ea8c 0c0b 	eor.w	ip, ip, fp
 8020e16:	44e2      	add	sl, ip
 8020e18:	44aa      	add	sl, r5
 8020e1a:	4d5d      	ldr	r5, [pc, #372]	@ (8020f90 <mg_md5_transform+0x6b8>)
 8020e1c:	4455      	add	r5, sl
 8020e1e:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 8020e22:	ea65 0c0b 	orn	ip, r5, fp
 8020e26:	ea8c 0c03 	eor.w	ip, ip, r3
 8020e2a:	44e1      	add	r9, ip
 8020e2c:	44f1      	add	r9, lr
 8020e2e:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8020fe4 <mg_md5_transform+0x70c>
 8020e32:	44cc      	add	ip, r9
 8020e34:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 8020e38:	ea6c 0e03 	orn	lr, ip, r3
 8020e3c:	ea8e 0e05 	eor.w	lr, lr, r5
 8020e40:	44f0      	add	r8, lr
 8020e42:	44d8      	add	r8, fp
 8020e44:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 8020fe8 <mg_md5_transform+0x710>
 8020e48:	44c6      	add	lr, r8
 8020e4a:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 8020e4e:	ea6e 0805 	orn	r8, lr, r5
 8020e52:	ea88 080c 	eor.w	r8, r8, ip
 8020e56:	9c03      	ldr	r4, [sp, #12]
 8020e58:	44a0      	add	r8, r4
 8020e5a:	4498      	add	r8, r3
 8020e5c:	4b4d      	ldr	r3, [pc, #308]	@ (8020f94 <mg_md5_transform+0x6bc>)
 8020e5e:	4443      	add	r3, r8
 8020e60:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 8020e64:	ea63 080c 	orn	r8, r3, ip
 8020e68:	ea88 080e 	eor.w	r8, r8, lr
 8020e6c:	4447      	add	r7, r8
 8020e6e:	442f      	add	r7, r5
 8020e70:	4d49      	ldr	r5, [pc, #292]	@ (8020f98 <mg_md5_transform+0x6c0>)
 8020e72:	443d      	add	r5, r7
 8020e74:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 8020e78:	ea65 070e 	orn	r7, r5, lr
 8020e7c:	405f      	eors	r7, r3
 8020e7e:	4417      	add	r7, r2
 8020e80:	44bc      	add	ip, r7
 8020e82:	4f46      	ldr	r7, [pc, #280]	@ (8020f9c <mg_md5_transform+0x6c4>)
 8020e84:	4467      	add	r7, ip
 8020e86:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 8020e8a:	ea67 0c03 	orn	ip, r7, r3
 8020e8e:	ea8c 0c05 	eor.w	ip, ip, r5
 8020e92:	9a07      	ldr	r2, [sp, #28]
 8020e94:	4462      	add	r2, ip
 8020e96:	4472      	add	r2, lr
 8020e98:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8020e9c:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 8020ea0:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 8020ea4:	ea62 0c05 	orn	ip, r2, r5
 8020ea8:	ea8c 0c07 	eor.w	ip, ip, r7
 8020eac:	9c01      	ldr	r4, [sp, #4]
 8020eae:	44a4      	add	ip, r4
 8020eb0:	449c      	add	ip, r3
 8020eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8020fa0 <mg_md5_transform+0x6c8>)
 8020eb4:	4463      	add	r3, ip
 8020eb6:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 8020eba:	ea63 0c07 	orn	ip, r3, r7
 8020ebe:	ea8c 0c02 	eor.w	ip, ip, r2
 8020ec2:	9905      	ldr	r1, [sp, #20]
 8020ec4:	448c      	add	ip, r1
 8020ec6:	44ac      	add	ip, r5
 8020ec8:	4d36      	ldr	r5, [pc, #216]	@ (8020fa4 <mg_md5_transform+0x6cc>)
 8020eca:	4465      	add	r5, ip
 8020ecc:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 8020ed0:	ea65 0c02 	orn	ip, r5, r2
 8020ed4:	ea8c 0c03 	eor.w	ip, ip, r3
 8020ed8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020eda:	4461      	add	r1, ip
 8020edc:	440f      	add	r7, r1
 8020ede:	4932      	ldr	r1, [pc, #200]	@ (8020fa8 <mg_md5_transform+0x6d0>)
 8020ee0:	4439      	add	r1, r7
 8020ee2:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 8020ee6:	ea61 0703 	orn	r7, r1, r3
 8020eea:	406f      	eors	r7, r5
 8020eec:	9c04      	ldr	r4, [sp, #16]
 8020eee:	4427      	add	r7, r4
 8020ef0:	4417      	add	r7, r2
 8020ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8020fac <mg_md5_transform+0x6d4>)
 8020ef4:	443a      	add	r2, r7
 8020ef6:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 8020efa:	ea62 0705 	orn	r7, r2, r5
 8020efe:	404f      	eors	r7, r1
 8020f00:	443e      	add	r6, r7
 8020f02:	4433      	add	r3, r6
 8020f04:	4e2a      	ldr	r6, [pc, #168]	@ (8020fb0 <mg_md5_transform+0x6d8>)
 8020f06:	441e      	add	r6, r3
 8020f08:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 8020f0c:	ea66 0301 	orn	r3, r6, r1
 8020f10:	4053      	eors	r3, r2
 8020f12:	9f02      	ldr	r7, [sp, #8]
 8020f14:	443b      	add	r3, r7
 8020f16:	441d      	add	r5, r3
 8020f18:	4b26      	ldr	r3, [pc, #152]	@ (8020fb4 <mg_md5_transform+0x6dc>)
 8020f1a:	442b      	add	r3, r5
 8020f1c:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 8020f20:	ea63 0502 	orn	r5, r3, r2
 8020f24:	4075      	eors	r5, r6
 8020f26:	9f08      	ldr	r7, [sp, #32]
 8020f28:	443d      	add	r5, r7
 8020f2a:	440d      	add	r5, r1
 8020f2c:	4922      	ldr	r1, [pc, #136]	@ (8020fb8 <mg_md5_transform+0x6e0>)
 8020f2e:	4429      	add	r1, r5
 8020f30:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 8020f34:	ea61 0506 	orn	r5, r1, r6
 8020f38:	405d      	eors	r5, r3
 8020f3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020f3c:	4425      	add	r5, r4
 8020f3e:	442a      	add	r2, r5
 8020f40:	4d1e      	ldr	r5, [pc, #120]	@ (8020fbc <mg_md5_transform+0x6e4>)
 8020f42:	4415      	add	r5, r2
 8020f44:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 8020f48:	ea65 0203 	orn	r2, r5, r3
 8020f4c:	404a      	eors	r2, r1
 8020f4e:	9c06      	ldr	r4, [sp, #24]
 8020f50:	4422      	add	r2, r4
 8020f52:	4432      	add	r2, r6
 8020f54:	4e1a      	ldr	r6, [pc, #104]	@ (8020fc0 <mg_md5_transform+0x6e8>)
 8020f56:	4416      	add	r6, r2
 8020f58:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 8020f5c:	6802      	ldr	r2, [r0, #0]
 8020f5e:	4413      	add	r3, r2
 8020f60:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 8020f62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020f64:	4434      	add	r4, r6
 8020f66:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 8020f68:	6883      	ldr	r3, [r0, #8]
 8020f6a:	441d      	add	r5, r3
 8020f6c:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 8020f6e:	68c3      	ldr	r3, [r0, #12]
 8020f70:	4419      	add	r1, r3
 8020f72:	60c1      	str	r1, [r0, #12]
}
 8020f74:	b00d      	add	sp, #52	@ 0x34
 8020f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f7a:	bf00      	nop
 8020f7c:	a4beea44 	.word	0xa4beea44
 8020f80:	f6bb4b60 	.word	0xf6bb4b60
 8020f84:	eaa127fa 	.word	0xeaa127fa
 8020f88:	d9d4d039 	.word	0xd9d4d039
 8020f8c:	c4ac5665 	.word	0xc4ac5665
 8020f90:	f4292244 	.word	0xf4292244
 8020f94:	fc93a039 	.word	0xfc93a039
 8020f98:	655b59c3 	.word	0x655b59c3
 8020f9c:	8f0ccc92 	.word	0x8f0ccc92
 8020fa0:	85845dd1 	.word	0x85845dd1
 8020fa4:	6fa87e4f 	.word	0x6fa87e4f
 8020fa8:	fe2ce6e0 	.word	0xfe2ce6e0
 8020fac:	a3014314 	.word	0xa3014314
 8020fb0:	4e0811a1 	.word	0x4e0811a1
 8020fb4:	f7537e82 	.word	0xf7537e82
 8020fb8:	bd3af235 	.word	0xbd3af235
 8020fbc:	2ad7d2bb 	.word	0x2ad7d2bb
 8020fc0:	eb86d391 	.word	0xeb86d391
 8020fc4:	fde5380c 	.word	0xfde5380c
 8020fc8:	4bdecfa9 	.word	0x4bdecfa9
 8020fcc:	bebfbc70 	.word	0xbebfbc70
 8020fd0:	289b7ec6 	.word	0x289b7ec6
 8020fd4:	d4ef3085 	.word	0xd4ef3085
 8020fd8:	04881d05 	.word	0x04881d05
 8020fdc:	e6db99e5 	.word	0xe6db99e5
 8020fe0:	1fa27cf8 	.word	0x1fa27cf8
 8020fe4:	432aff97 	.word	0x432aff97
 8020fe8:	ab9423a7 	.word	0xab9423a7

08020fec <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 8020fec:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 8020fee:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 8020ff0:	3001      	adds	r0, #1
 8020ff2:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 8020ff4:	2a7f      	cmp	r2, #127	@ 0x7f
 8020ff6:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 8020ffa:	d8f9      	bhi.n	8020ff0 <varint_size+0x4>
  return bytes_needed;
}
 8020ffc:	4770      	bx	lr

08020ffe <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 8020ffe:	b500      	push	{lr}
 8021000:	4686      	mov	lr, r0
  size_t len = 0;
 8021002:	2300      	movs	r3, #0
 8021004:	e007      	b.n	8021016 <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 8021006:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 802100a:	1c58      	adds	r0, r3, #1
 802100c:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 8021010:	2a7f      	cmp	r2, #127	@ 0x7f
 8021012:	d907      	bls.n	8021024 <encode_varint+0x26>
    buf[len++] = b;
 8021014:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 8021016:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 802101a:	460a      	mov	r2, r1
 802101c:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 802101e:	2a7f      	cmp	r2, #127	@ 0x7f
 8021020:	d9f3      	bls.n	802100a <encode_varint+0xc>
 8021022:	e7f0      	b.n	8021006 <encode_varint+0x8>

  return len;
}
 8021024:	f85d fb04 	ldr.w	pc, [sp], #4

08021028 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 8021028:	2300      	movs	r3, #0
 802102a:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 802102c:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 8021030:	2b03      	cmp	r3, #3
 8021032:	d81d      	bhi.n	8021070 <decode_varint+0x48>
 8021034:	428b      	cmp	r3, r1
 8021036:	d219      	bcs.n	802106c <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 8021038:	b530      	push	{r4, r5, lr}
 802103a:	e003      	b.n	8021044 <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 802103c:	1c58      	adds	r0, r3, #1
 802103e:	e012      	b.n	8021066 <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8021040:	428b      	cmp	r3, r1
 8021042:	d211      	bcs.n	8021068 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 8021044:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 8021048:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 802104c:	6815      	ldr	r5, [r2, #0]
 802104e:	fb0c 5404 	mla	r4, ip, r4, r5
 8021052:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 8021054:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8021058:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 802105c:	d0ee      	beq.n	802103c <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 802105e:	3301      	adds	r3, #1
 8021060:	2b03      	cmp	r3, #3
 8021062:	d9ed      	bls.n	8021040 <decode_varint+0x18>
  }

  return 0;
 8021064:	2000      	movs	r0, #0
}
 8021066:	bd30      	pop	{r4, r5, pc}
  return 0;
 8021068:	2000      	movs	r0, #0
 802106a:	e7fc      	b.n	8021066 <decode_varint+0x3e>
 802106c:	2000      	movs	r0, #0
 802106e:	4770      	bx	lr
 8021070:	2000      	movs	r0, #0
}
 8021072:	4770      	bx	lr

08021074 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 8021074:	2300      	movs	r3, #0
 8021076:	2b1a      	cmp	r3, #26
 8021078:	d80b      	bhi.n	8021092 <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 802107a:	4a07      	ldr	r2, [pc, #28]	@ (8021098 <mqtt_prop_type_by_id+0x24>)
 802107c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8021080:	4282      	cmp	r2, r0
 8021082:	d001      	beq.n	8021088 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 8021084:	3301      	adds	r3, #1
 8021086:	e7f6      	b.n	8021076 <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8021088:	4a03      	ldr	r2, [pc, #12]	@ (8021098 <mqtt_prop_type_by_id+0x24>)
 802108a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802108e:	7858      	ldrb	r0, [r3, #1]
 8021090:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 8021092:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8021096:	4770      	bx	lr
 8021098:	0803b794 	.word	0x0803b794

0802109c <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 802109c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80210a0:	4606      	mov	r6, r0
 80210a2:	4688      	mov	r8, r1
  size_t i, size = 0;
 80210a4:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 80210a6:	462c      	mov	r4, r5
 80210a8:	e005      	b.n	80210b6 <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 80210aa:	697d      	ldr	r5, [r7, #20]
 80210ac:	68fb      	ldr	r3, [r7, #12]
 80210ae:	441d      	add	r5, r3
 80210b0:	444d      	add	r5, r9
 80210b2:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 80210b4:	3401      	adds	r4, #1
 80210b6:	4544      	cmp	r4, r8
 80210b8:	d231      	bcs.n	802111e <get_properties_length+0x82>
    size++;  // identifier
 80210ba:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80210be:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80210c2:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 80210c6:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 80210ca:	f7ff ffd3 	bl	8021074 <mqtt_prop_type_by_id>
 80210ce:	2806      	cmp	r0, #6
 80210d0:	d824      	bhi.n	802111c <get_properties_length+0x80>
 80210d2:	a301      	add	r3, pc, #4	@ (adr r3, 80210d8 <get_properties_length+0x3c>)
 80210d4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80210d8:	08021119 	.word	0x08021119
 80210dc:	080210f5 	.word	0x080210f5
 80210e0:	080210ab 	.word	0x080210ab
 80210e4:	080210fd 	.word	0x080210fd
 80210e8:	08021105 	.word	0x08021105
 80210ec:	08021111 	.word	0x08021111
 80210f0:	08021115 	.word	0x08021115
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 80210f4:	697d      	ldr	r5, [r7, #20]
 80210f6:	444d      	add	r5, r9
 80210f8:	3502      	adds	r5, #2
        break;
 80210fa:	e7db      	b.n	80210b4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 80210fc:	697d      	ldr	r5, [r7, #20]
 80210fe:	444d      	add	r5, r9
 8021100:	3502      	adds	r5, #2
        break;
 8021102:	e7d7      	b.n	80210b4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 8021104:	6878      	ldr	r0, [r7, #4]
 8021106:	f7ff ff71 	bl	8020fec <varint_size>
 802110a:	eb00 0509 	add.w	r5, r0, r9
        break;
 802110e:	e7d1      	b.n	80210b4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8021110:	3505      	adds	r5, #5
        break;
 8021112:	e7cf      	b.n	80210b4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 8021114:	3503      	adds	r5, #3
        break;
 8021116:	e7cd      	b.n	80210b4 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 8021118:	3502      	adds	r5, #2
        break;
 802111a:	e7cb      	b.n	80210b4 <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802111c:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 802111e:	4628      	mov	r0, r5
 8021120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08021124 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 8021124:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 8021126:	f7ff ffb9 	bl	802109c <get_properties_length>
 802112a:	4604      	mov	r4, r0
  size += varint_size(size);
 802112c:	f7ff ff5e 	bl	8020fec <varint_size>
  return size;
}
 8021130:	4420      	add	r0, r4
 8021132:	bd10      	pop	{r4, pc}

08021134 <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 8021134:	b410      	push	{r4}
 8021136:	b085      	sub	sp, #20
 8021138:	466b      	mov	r3, sp
 802113a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 802113e:	2300      	movs	r3, #0
 8021140:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 8021142:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 8021144:	9901      	ldr	r1, [sp, #4]
 8021146:	4299      	cmp	r1, r3
 8021148:	d92c      	bls.n	80211a4 <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 802114a:	9c00      	ldr	r4, [sp, #0]
 802114c:	5ce1      	ldrb	r1, [r4, r3]
 802114e:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 8021152:	b2c0      	uxtb	r0, r0
 8021154:	2809      	cmp	r0, #9
 8021156:	d812      	bhi.n	802117e <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 8021158:	f10c 0010 	add.w	r0, ip, #16
 802115c:	4468      	add	r0, sp
 802115e:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 8021162:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021166:	3930      	subs	r1, #48	@ 0x30
 8021168:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 802116c:	29ff      	cmp	r1, #255	@ 0xff
 802116e:	dc28      	bgt.n	80211c2 <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 8021170:	f10c 0010 	add.w	r0, ip, #16
 8021174:	4468      	add	r0, sp
 8021176:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 802117a:	3301      	adds	r3, #1
 802117c:	e7e2      	b.n	8021144 <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 802117e:	292e      	cmp	r1, #46	@ 0x2e
 8021180:	d121      	bne.n	80211c6 <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8021182:	f1bc 0f02 	cmp.w	ip, #2
 8021186:	d820      	bhi.n	80211ca <mg_aton4+0x96>
 8021188:	b923      	cbnz	r3, 8021194 <mg_aton4+0x60>
 802118a:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 802118c:	b005      	add	sp, #20
 802118e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021192:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8021194:	441c      	add	r4, r3
 8021196:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802119a:	292e      	cmp	r1, #46	@ 0x2e
 802119c:	d017      	beq.n	80211ce <mg_aton4+0x9a>
      num_dots++;
 802119e:	f10c 0c01 	add.w	ip, ip, #1
 80211a2:	e7ea      	b.n	802117a <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 80211a4:	f1bc 0f03 	cmp.w	ip, #3
 80211a8:	d113      	bne.n	80211d2 <mg_aton4+0x9e>
 80211aa:	9900      	ldr	r1, [sp, #0]
 80211ac:	4419      	add	r1, r3
 80211ae:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80211b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80211b4:	d00f      	beq.n	80211d6 <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 80211b6:	9b03      	ldr	r3, [sp, #12]
 80211b8:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 80211ba:	2300      	movs	r3, #0
 80211bc:	74d3      	strb	r3, [r2, #19]
  return true;
 80211be:	2001      	movs	r0, #1
 80211c0:	e7e4      	b.n	802118c <mg_aton4+0x58>
      if (octet > 255) return false;
 80211c2:	2000      	movs	r0, #0
 80211c4:	e7e2      	b.n	802118c <mg_aton4+0x58>
      return false;
 80211c6:	2000      	movs	r0, #0
 80211c8:	e7e0      	b.n	802118c <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 80211ca:	2000      	movs	r0, #0
 80211cc:	e7de      	b.n	802118c <mg_aton4+0x58>
 80211ce:	2000      	movs	r0, #0
 80211d0:	e7dc      	b.n	802118c <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 80211d2:	2000      	movs	r0, #0
 80211d4:	e7da      	b.n	802118c <mg_aton4+0x58>
 80211d6:	2000      	movs	r0, #0
 80211d8:	e7d8      	b.n	802118c <mg_aton4+0x58>

080211da <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 80211da:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 80211dc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80211de:	b103      	cbz	r3, 80211e2 <mg_tcpip_call+0x8>
 80211e0:	4798      	blx	r3
}
 80211e2:	bd08      	pop	{r3, pc}

080211e4 <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 80211e4:	2300      	movs	r3, #0
 80211e6:	e005      	b.n	80211f4 <csumup+0x10>
 80211e8:	f811 c003 	ldrb.w	ip, [r1, r3]
 80211ec:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80211f0:	4460      	add	r0, ip
 80211f2:	3301      	adds	r3, #1
 80211f4:	4293      	cmp	r3, r2
 80211f6:	d205      	bcs.n	8021204 <csumup+0x20>
 80211f8:	f013 0f01 	tst.w	r3, #1
 80211fc:	d0f4      	beq.n	80211e8 <csumup+0x4>
 80211fe:	f811 c003 	ldrb.w	ip, [r1, r3]
 8021202:	e7f5      	b.n	80211f0 <csumup+0xc>
  return sum;
}
 8021204:	4770      	bx	lr

08021206 <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8021206:	b538      	push	{r3, r4, r5, lr}
 8021208:	4604      	mov	r4, r0
 802120a:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 802120c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 802120e:	685b      	ldr	r3, [r3, #4]
 8021210:	4602      	mov	r2, r0
 8021212:	6940      	ldr	r0, [r0, #20]
 8021214:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 8021216:	4285      	cmp	r5, r0
 8021218:	d000      	beq.n	802121c <ether_output+0x16>
  return n;
}
 802121a:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 802121c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 802121e:	3301      	adds	r3, #1
 8021220:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 8021222:	e7fa      	b.n	802121a <ether_output+0x14>

08021224 <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8021224:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8021228:	f013 0f28 	tst.w	r3, #40	@ 0x28
 802122c:	d106      	bne.n	802123c <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 802122e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8021230:	b132      	cbz	r2, 8021240 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8021232:	f013 0f90 	tst.w	r3, #144	@ 0x90
 8021236:	d005      	beq.n	8021244 <can_write+0x20>
 8021238:	2000      	movs	r0, #0
 802123a:	4770      	bx	lr
 802123c:	2000      	movs	r0, #0
 802123e:	4770      	bx	lr
 8021240:	2000      	movs	r0, #0
 8021242:	4770      	bx	lr
 8021244:	2001      	movs	r0, #1
}
 8021246:	4770      	bx	lr

08021248 <mg_esc>:
  uint8_t *p = va_arg(*ap, uint8_t *);
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
                    p[3], p[4], p[5]);
}

static char mg_esc(int c, bool esc) {
 8021248:	b410      	push	{r4}
 802124a:	4602      	mov	r2, r0
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 802124c:	460c      	mov	r4, r1
 802124e:	b109      	cbz	r1, 8021254 <mg_esc+0xc>
 8021250:	4b0b      	ldr	r3, [pc, #44]	@ (8021280 <mg_esc+0x38>)
 8021252:	e007      	b.n	8021264 <mg_esc+0x1c>
 8021254:	4b0b      	ldr	r3, [pc, #44]	@ (8021284 <mg_esc+0x3c>)
 8021256:	e005      	b.n	8021264 <mg_esc+0x1c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8021258:	4a0a      	ldr	r2, [pc, #40]	@ (8021284 <mg_esc+0x3c>)
 802125a:	1a9b      	subs	r3, r3, r2
 802125c:	4a08      	ldr	r2, [pc, #32]	@ (8021280 <mg_esc+0x38>)
 802125e:	5cd0      	ldrb	r0, [r2, r3]
 8021260:	e00a      	b.n	8021278 <mg_esc+0x30>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8021262:	3301      	adds	r3, #1
 8021264:	7818      	ldrb	r0, [r3, #0]
 8021266:	b138      	cbz	r0, 8021278 <mg_esc+0x30>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8021268:	4290      	cmp	r0, r2
 802126a:	d1fa      	bne.n	8021262 <mg_esc+0x1a>
 802126c:	2c00      	cmp	r4, #0
 802126e:	d0f3      	beq.n	8021258 <mg_esc+0x10>
 8021270:	4a03      	ldr	r2, [pc, #12]	@ (8021280 <mg_esc+0x38>)
 8021272:	1a9b      	subs	r3, r3, r2
 8021274:	4a03      	ldr	r2, [pc, #12]	@ (8021284 <mg_esc+0x3c>)
 8021276:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8021278:	f85d 4b04 	ldr.w	r4, [sp], #4
 802127c:	4770      	bx	lr
 802127e:	bf00      	nop
 8021280:	0803a3cc 	.word	0x0803a3cc
 8021284:	0803a3d4 	.word	0x0803a3d4

08021288 <mg_escape>:

static char mg_escape(int c) {
 8021288:	b508      	push	{r3, lr}
  return mg_esc(c, true);
 802128a:	2101      	movs	r1, #1
 802128c:	f7ff ffdc 	bl	8021248 <mg_esc>
}
 8021290:	bd08      	pop	{r3, pc}

08021292 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8021292:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021296:	4607      	mov	r7, r0
 8021298:	460e      	mov	r6, r1
 802129a:	4692      	mov	sl, r2
 802129c:	4699      	mov	r9, r3
  size_t i = 0, extra = 0;
 802129e:	f04f 0b00 	mov.w	fp, #0
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80212a2:	465c      	mov	r4, fp
 80212a4:	e003      	b.n	80212ae <qcpy+0x1c>
    char c = mg_escape(buf[i]);
    if (c) {
      out('\\', ptr), out(c, ptr), extra++;
    } else {
      out(buf[i], ptr);
 80212a6:	4631      	mov	r1, r6
 80212a8:	4628      	mov	r0, r5
 80212aa:	47b8      	blx	r7
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80212ac:	3401      	adds	r4, #1
 80212ae:	454c      	cmp	r4, r9
 80212b0:	d211      	bcs.n	80212d6 <qcpy+0x44>
 80212b2:	f81a 5004 	ldrb.w	r5, [sl, r4]
 80212b6:	b175      	cbz	r5, 80212d6 <qcpy+0x44>
    char c = mg_escape(buf[i]);
 80212b8:	4628      	mov	r0, r5
 80212ba:	f7ff ffe5 	bl	8021288 <mg_escape>
    if (c) {
 80212be:	4680      	mov	r8, r0
 80212c0:	2800      	cmp	r0, #0
 80212c2:	d0f0      	beq.n	80212a6 <qcpy+0x14>
      out('\\', ptr), out(c, ptr), extra++;
 80212c4:	4631      	mov	r1, r6
 80212c6:	205c      	movs	r0, #92	@ 0x5c
 80212c8:	47b8      	blx	r7
 80212ca:	4631      	mov	r1, r6
 80212cc:	4640      	mov	r0, r8
 80212ce:	47b8      	blx	r7
 80212d0:	f10b 0b01 	add.w	fp, fp, #1
 80212d4:	e7ea      	b.n	80212ac <qcpy+0x1a>
    }
  }
  return i + extra;
}
 80212d6:	eb04 000b 	add.w	r0, r4, fp
 80212da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080212e0 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 80212e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212e4:	4607      	mov	r7, r0
 80212e6:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 80212e8:	6811      	ldr	r1, [r2, #0]
 80212ea:	1d0b      	adds	r3, r1, #4
 80212ec:	6013      	str	r3, [r2, #0]
 80212ee:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80212f2:	f101 0308 	add.w	r3, r1, #8
 80212f6:	6013      	str	r3, [r2, #0]
 80212f8:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 80212fc:	2400      	movs	r4, #0
 80212fe:	e00e      	b.n	802131e <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8021300:	f818 3004 	ldrb.w	r3, [r8, r4]
 8021304:	091b      	lsrs	r3, r3, #4
 8021306:	4d09      	ldr	r5, [pc, #36]	@ (802132c <mg_print_hex+0x4c>)
 8021308:	4631      	mov	r1, r6
 802130a:	5ce8      	ldrb	r0, [r5, r3]
 802130c:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 802130e:	f818 3004 	ldrb.w	r3, [r8, r4]
 8021312:	f003 030f 	and.w	r3, r3, #15
 8021316:	4631      	mov	r1, r6
 8021318:	5ce8      	ldrb	r0, [r5, r3]
 802131a:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 802131c:	3401      	adds	r4, #1
 802131e:	454c      	cmp	r4, r9
 8021320:	d3ee      	bcc.n	8021300 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 8021322:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8021326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802132a:	bf00      	nop
 802132c:	08039f20 	.word	0x08039f20

08021330 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 8021330:	4684      	mov	ip, r0
  if (MG_BIG_ENDIAN) {
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8021332:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8021336:	ea4f 2332 	mov.w	r3, r2, ror #8
 802133a:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 802133e:	ea4f 6232 	mov.w	r2, r2, ror #24
 8021342:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8021346:	ea43 0002 	orr.w	r0, r3, r2
 802134a:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
  }
  return block->l[i];
}
 802134e:	4770      	bx	lr

08021350 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8021350:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021354:	b2db      	uxtb	r3, r3
 8021356:	2b19      	cmp	r3, #25
 8021358:	d800      	bhi.n	802135c <mg_tolc+0xc>
 802135a:	3020      	adds	r0, #32
}
 802135c:	4770      	bx	lr

0802135e <isbyte>:
  return ~crc;
}

static int isbyte(int n) {
  return n >= 0 && n <= 255;
}
 802135e:	28ff      	cmp	r0, #255	@ 0xff
 8021360:	bf8c      	ite	hi
 8021362:	2000      	movhi	r0, #0
 8021364:	2001      	movls	r0, #1
 8021366:	4770      	bx	lr

08021368 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 8021368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802136c:	b082      	sub	sp, #8
 802136e:	4605      	mov	r5, r0
 8021370:	9e08      	ldr	r6, [sp, #32]
 8021372:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8021374:	0a10      	lsrs	r0, r2, #8
 8021376:	f88d 0004 	strb.w	r0, [sp, #4]
 802137a:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 802137e:	00c9      	lsls	r1, r1, #3
 8021380:	b249      	sxtb	r1, r1
 8021382:	4698      	mov	r8, r3
 8021384:	b143      	cbz	r3, 8021398 <w5500_txn+0x30>
 8021386:	2304      	movs	r3, #4
 8021388:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 802138a:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 802138e:	686b      	ldr	r3, [r5, #4]
 8021390:	6828      	ldr	r0, [r5, #0]
 8021392:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8021394:	2400      	movs	r4, #0
 8021396:	e00a      	b.n	80213ae <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8021398:	2300      	movs	r3, #0
 802139a:	e7f5      	b.n	8021388 <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 802139c:	68eb      	ldr	r3, [r5, #12]
 802139e:	f104 0208 	add.w	r2, r4, #8
 80213a2:	446a      	add	r2, sp
 80213a4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80213a8:	6828      	ldr	r0, [r5, #0]
 80213aa:	4798      	blx	r3
 80213ac:	3401      	adds	r4, #1
 80213ae:	2c02      	cmp	r4, #2
 80213b0:	d9f4      	bls.n	802139c <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 80213b2:	2400      	movs	r4, #0
 80213b4:	e000      	b.n	80213b8 <w5500_txn+0x50>
 80213b6:	3401      	adds	r4, #1
 80213b8:	42bc      	cmp	r4, r7
 80213ba:	d208      	bcs.n	80213ce <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 80213bc:	68eb      	ldr	r3, [r5, #12]
 80213be:	5d31      	ldrb	r1, [r6, r4]
 80213c0:	6828      	ldr	r0, [r5, #0]
 80213c2:	4798      	blx	r3
    if (!wr) p[i] = r;
 80213c4:	f1b8 0f00 	cmp.w	r8, #0
 80213c8:	d1f5      	bne.n	80213b6 <w5500_txn+0x4e>
 80213ca:	5530      	strb	r0, [r6, r4]
 80213cc:	e7f3      	b.n	80213b6 <w5500_txn+0x4e>
  }
  s->end(s->spi);
 80213ce:	68ab      	ldr	r3, [r5, #8]
 80213d0:	6828      	ldr	r0, [r5, #0]
 80213d2:	4798      	blx	r3
}
 80213d4:	b002      	add	sp, #8
 80213d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080213da <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 80213da:	b510      	push	{r4, lr}
 80213dc:	b082      	sub	sp, #8
 80213de:	9c04      	ldr	r4, [sp, #16]
 80213e0:	9401      	str	r4, [sp, #4]
 80213e2:	9300      	str	r3, [sp, #0]
 80213e4:	2301      	movs	r3, #1
 80213e6:	f7ff ffbf 	bl	8021368 <w5500_txn>
 80213ea:	b002      	add	sp, #8
 80213ec:	bd10      	pop	{r4, pc}

080213ee <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 80213ee:	b500      	push	{lr}
 80213f0:	b085      	sub	sp, #20
 80213f2:	f88d 300f 	strb.w	r3, [sp, #15]
 80213f6:	2301      	movs	r3, #1
 80213f8:	9300      	str	r3, [sp, #0]
 80213fa:	f10d 030f 	add.w	r3, sp, #15
 80213fe:	f7ff ffec 	bl	80213da <w5500_wn>
 8021402:	b005      	add	sp, #20
 8021404:	f85d fb04 	ldr.w	pc, [sp], #4

08021408 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8021408:	b500      	push	{lr}
 802140a:	b085      	sub	sp, #20
 802140c:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8021410:	f88d c00c 	strb.w	ip, [sp, #12]
 8021414:	f88d 300d 	strb.w	r3, [sp, #13]
 8021418:	2302      	movs	r3, #2
 802141a:	9300      	str	r3, [sp, #0]
 802141c:	ab03      	add	r3, sp, #12
 802141e:	f7ff ffdc 	bl	80213da <w5500_wn>
 8021422:	b005      	add	sp, #20
 8021424:	f85d fb04 	ldr.w	pc, [sp], #4

08021428 <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8021428:	b510      	push	{r4, lr}
 802142a:	b082      	sub	sp, #8
 802142c:	9c04      	ldr	r4, [sp, #16]
 802142e:	9401      	str	r4, [sp, #4]
 8021430:	9300      	str	r3, [sp, #0]
 8021432:	2300      	movs	r3, #0
 8021434:	f7ff ff98 	bl	8021368 <w5500_txn>
 8021438:	b002      	add	sp, #8
 802143a:	bd10      	pop	{r4, pc}

0802143c <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 802143c:	b500      	push	{lr}
 802143e:	b085      	sub	sp, #20
 8021440:	2300      	movs	r3, #0
 8021442:	f88d 300f 	strb.w	r3, [sp, #15]
 8021446:	2301      	movs	r3, #1
 8021448:	9300      	str	r3, [sp, #0]
 802144a:	f10d 030f 	add.w	r3, sp, #15
 802144e:	f7ff ffeb 	bl	8021428 <w5500_rn>
 8021452:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8021456:	b005      	add	sp, #20
 8021458:	f85d fb04 	ldr.w	pc, [sp], #4

0802145c <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 802145c:	b500      	push	{lr}
 802145e:	b085      	sub	sp, #20
 8021460:	2300      	movs	r3, #0
 8021462:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021466:	2302      	movs	r3, #2
 8021468:	9300      	str	r3, [sp, #0]
 802146a:	ab03      	add	r3, sp, #12
 802146c:	f7ff ffdc 	bl	8021428 <w5500_rn>
 8021470:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8021474:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8021478:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 802147c:	b005      	add	sp, #20
 802147e:	f85d fb04 	ldr.w	pc, [sp], #4

08021482 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8021482:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021486:	b083      	sub	sp, #12
 8021488:	4606      	mov	r6, r0
 802148a:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 802148c:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 802148e:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8021490:	4604      	mov	r4, r0
 8021492:	2226      	movs	r2, #38	@ 0x26
 8021494:	2101      	movs	r1, #1
 8021496:	4628      	mov	r0, r5
 8021498:	f7ff ffe0 	bl	802145c <w5500_r2>
 802149c:	4284      	cmp	r4, r0
 802149e:	d3f7      	bcc.n	8021490 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 80214a0:	b91c      	cbnz	r4, 80214aa <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 80214a2:	4620      	mov	r0, r4
 80214a4:	b003      	add	sp, #12
 80214a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 80214aa:	2228      	movs	r2, #40	@ 0x28
 80214ac:	2101      	movs	r1, #1
 80214ae:	4628      	mov	r0, r5
 80214b0:	f7ff ffd4 	bl	802145c <w5500_r2>
 80214b4:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 80214b6:	4602      	mov	r2, r0
 80214b8:	2103      	movs	r1, #3
 80214ba:	4628      	mov	r0, r5
 80214bc:	f7ff ffce 	bl	802145c <w5500_r2>
 80214c0:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 80214c2:	fa1f f188 	uxth.w	r1, r8
 80214c6:	3102      	adds	r1, #2
 80214c8:	4288      	cmp	r0, r1
 80214ca:	dc0e      	bgt.n	80214ea <w5500_rx+0x68>
 80214cc:	2801      	cmp	r0, #1
 80214ce:	d801      	bhi.n	80214d4 <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 80214d0:	2400      	movs	r4, #0
 80214d2:	e00b      	b.n	80214ec <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 80214d4:	1e84      	subs	r4, r0, #2
 80214d6:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 80214d8:	1cba      	adds	r2, r7, #2
 80214da:	9400      	str	r4, [sp, #0]
 80214dc:	4633      	mov	r3, r6
 80214de:	b292      	uxth	r2, r2
 80214e0:	2103      	movs	r1, #3
 80214e2:	4628      	mov	r0, r5
 80214e4:	f7ff ffa0 	bl	8021428 <w5500_rn>
 80214e8:	e000      	b.n	80214ec <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 80214ea:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 80214ec:	eb07 0309 	add.w	r3, r7, r9
 80214f0:	b29b      	uxth	r3, r3
 80214f2:	2228      	movs	r2, #40	@ 0x28
 80214f4:	2101      	movs	r1, #1
 80214f6:	4628      	mov	r0, r5
 80214f8:	f7ff ff86 	bl	8021408 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 80214fc:	2340      	movs	r3, #64	@ 0x40
 80214fe:	2201      	movs	r2, #1
 8021500:	4611      	mov	r1, r2
 8021502:	4628      	mov	r0, r5
 8021504:	f7ff ff73 	bl	80213ee <w5500_w1>
 8021508:	e7cb      	b.n	80214a2 <w5500_rx+0x20>

0802150a <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 802150a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802150e:	b082      	sub	sp, #8
 8021510:	4680      	mov	r8, r0
 8021512:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8021514:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 8021516:	b28f      	uxth	r7, r1
 8021518:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 802151a:	e004      	b.n	8021526 <w5500_tx+0x1c>
 802151c:	2220      	movs	r2, #32
 802151e:	2101      	movs	r1, #1
 8021520:	4630      	mov	r0, r6
 8021522:	f7ff ff9b 	bl	802145c <w5500_r2>
 8021526:	42b8      	cmp	r0, r7
 8021528:	d3f8      	bcc.n	802151c <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 802152a:	2224      	movs	r2, #36	@ 0x24
 802152c:	2101      	movs	r1, #1
 802152e:	4630      	mov	r0, r6
 8021530:	f7ff ff94 	bl	802145c <w5500_r2>
 8021534:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8021536:	b2ad      	uxth	r5, r5
 8021538:	9500      	str	r5, [sp, #0]
 802153a:	4643      	mov	r3, r8
 802153c:	4602      	mov	r2, r0
 802153e:	2102      	movs	r1, #2
 8021540:	4630      	mov	r0, r6
 8021542:	f7ff ff4a 	bl	80213da <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8021546:	193b      	adds	r3, r7, r4
 8021548:	b29b      	uxth	r3, r3
 802154a:	2224      	movs	r2, #36	@ 0x24
 802154c:	2101      	movs	r1, #1
 802154e:	4630      	mov	r0, r6
 8021550:	f7ff ff5a 	bl	8021408 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8021554:	2320      	movs	r3, #32
 8021556:	2201      	movs	r2, #1
 8021558:	4611      	mov	r1, r2
 802155a:	4630      	mov	r0, r6
 802155c:	f7ff ff47 	bl	80213ee <w5500_w1>
  for (i = 0; i < 40; i++) {
 8021560:	2400      	movs	r4, #0
 8021562:	e004      	b.n	802156e <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8021564:	f015 0f18 	tst.w	r5, #24
 8021568:	d116      	bne.n	8021598 <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 802156a:	3401      	adds	r4, #1
 802156c:	b2a4      	uxth	r4, r4
 802156e:	2c27      	cmp	r4, #39	@ 0x27
 8021570:	d812      	bhi.n	8021598 <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8021572:	2202      	movs	r2, #2
 8021574:	2101      	movs	r1, #1
 8021576:	4630      	mov	r0, r6
 8021578:	f7ff ff60 	bl	802143c <w5500_r1>
    if (ir == 0) continue;
 802157c:	4605      	mov	r5, r0
 802157e:	2800      	cmp	r0, #0
 8021580:	d0f3      	beq.n	802156a <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8021582:	4603      	mov	r3, r0
 8021584:	2202      	movs	r2, #2
 8021586:	2101      	movs	r1, #1
 8021588:	4630      	mov	r0, r6
 802158a:	f7ff ff30 	bl	80213ee <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 802158e:	f015 0f08 	tst.w	r5, #8
 8021592:	d0e7      	beq.n	8021564 <w5500_tx+0x5a>
 8021594:	2700      	movs	r7, #0
 8021596:	e7e5      	b.n	8021564 <w5500_tx+0x5a>
  }
  return len;
}
 8021598:	4638      	mov	r0, r7
 802159a:	b002      	add	sp, #8
 802159c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080215a0 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 80215a0:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 80215a2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 80215a4:	68a3      	ldr	r3, [r4, #8]
 80215a6:	6820      	ldr	r0, [r4, #0]
 80215a8:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 80215aa:	2380      	movs	r3, #128	@ 0x80
 80215ac:	2200      	movs	r2, #0
 80215ae:	4611      	mov	r1, r2
 80215b0:	4620      	mov	r0, r4
 80215b2:	f7ff ff1c 	bl	80213ee <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 80215b6:	2300      	movs	r3, #0
 80215b8:	222e      	movs	r2, #46	@ 0x2e
 80215ba:	4619      	mov	r1, r3
 80215bc:	4620      	mov	r0, r4
 80215be:	f7ff ff16 	bl	80213ee <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 80215c2:	23f8      	movs	r3, #248	@ 0xf8
 80215c4:	222e      	movs	r2, #46	@ 0x2e
 80215c6:	2100      	movs	r1, #0
 80215c8:	4620      	mov	r0, r4
 80215ca:	f7ff ff10 	bl	80213ee <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 80215ce:	2310      	movs	r3, #16
 80215d0:	221e      	movs	r2, #30
 80215d2:	2101      	movs	r1, #1
 80215d4:	4620      	mov	r0, r4
 80215d6:	f7ff ff0a 	bl	80213ee <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 80215da:	2310      	movs	r3, #16
 80215dc:	221f      	movs	r2, #31
 80215de:	2101      	movs	r1, #1
 80215e0:	4620      	mov	r0, r4
 80215e2:	f7ff ff04 	bl	80213ee <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 80215e6:	2304      	movs	r3, #4
 80215e8:	2200      	movs	r2, #0
 80215ea:	2101      	movs	r1, #1
 80215ec:	4620      	mov	r0, r4
 80215ee:	f7ff fefe 	bl	80213ee <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 80215f2:	2301      	movs	r3, #1
 80215f4:	461a      	mov	r2, r3
 80215f6:	4619      	mov	r1, r3
 80215f8:	4620      	mov	r0, r4
 80215fa:	f7ff fef8 	bl	80213ee <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 80215fe:	2203      	movs	r2, #3
 8021600:	2101      	movs	r1, #1
 8021602:	4620      	mov	r0, r4
 8021604:	f7ff ff1a 	bl	802143c <w5500_r1>
}
 8021608:	2842      	cmp	r0, #66	@ 0x42
 802160a:	bf14      	ite	ne
 802160c:	2000      	movne	r0, #0
 802160e:	2001      	moveq	r0, #1
 8021610:	bd10      	pop	{r4, pc}

08021612 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 8021612:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 8021614:	222e      	movs	r2, #46	@ 0x2e
 8021616:	2100      	movs	r1, #0
 8021618:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 802161a:	f7ff ff0f 	bl	802143c <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 802161e:	f000 0001 	and.w	r0, r0, #1
 8021622:	bd08      	pop	{r3, pc}

08021624 <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8021624:	b508      	push	{r3, lr}
 8021626:	4602      	mov	r2, r0
 8021628:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 802162a:	e000      	b.n	802162e <mg_dns_free+0xa>
 802162c:	461a      	mov	r2, r3
 802162e:	6813      	ldr	r3, [r2, #0]
 8021630:	4283      	cmp	r3, r0
 8021632:	d1fb      	bne.n	802162c <mg_dns_free+0x8>
 8021634:	6803      	ldr	r3, [r0, #0]
 8021636:	6013      	str	r3, [r2, #0]
  free(d);
 8021638:	f7f9 fa18 	bl	801aa6c <vPortFree>
}
 802163c:	bd08      	pop	{r3, pc}

0802163e <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 802163e:	b082      	sub	sp, #8
 8021640:	ab02      	add	r3, sp, #8
 8021642:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 8021646:	b111      	cbz	r1, 802164e <mg_atone+0x10>
 8021648:	2000      	movs	r0, #0
}
 802164a:	b002      	add	sp, #8
 802164c:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 802164e:	6011      	str	r1, [r2, #0]
 8021650:	6051      	str	r1, [r2, #4]
 8021652:	6091      	str	r1, [r2, #8]
 8021654:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 8021656:	74d1      	strb	r1, [r2, #19]
  return true;
 8021658:	2001      	movs	r0, #1
 802165a:	e7f6      	b.n	802164a <mg_atone+0xc>

0802165c <urlparse>:
static struct url urlparse(const char *url) {
 802165c:	b510      	push	{r4, lr}
 802165e:	b088      	sub	sp, #32
 8021660:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 8021662:	2200      	movs	r2, #0
 8021664:	9201      	str	r2, [sp, #4]
 8021666:	9202      	str	r2, [sp, #8]
 8021668:	9203      	str	r2, [sp, #12]
 802166a:	9204      	str	r2, [sp, #16]
 802166c:	9205      	str	r2, [sp, #20]
 802166e:	9206      	str	r2, [sp, #24]
 8021670:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8021672:	e00f      	b.n	8021694 <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8021674:	b19a      	cbz	r2, 802169e <urlparse+0x42>
 8021676:	9804      	ldr	r0, [sp, #16]
 8021678:	b988      	cbnz	r0, 802169e <urlparse+0x42>
 802167a:	1888      	adds	r0, r1, r2
 802167c:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8021680:	282f      	cmp	r0, #47	@ 0x2f
 8021682:	d10c      	bne.n	802169e <urlparse+0x42>
      u.host = i + 1;
 8021684:	1c53      	adds	r3, r2, #1
 8021686:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8021688:	2300      	movs	r3, #0
 802168a:	9305      	str	r3, [sp, #20]
 802168c:	e001      	b.n	8021692 <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 802168e:	2300      	movs	r3, #0
 8021690:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 8021692:	3201      	adds	r2, #1
 8021694:	5c8b      	ldrb	r3, [r1, r2]
 8021696:	2b00      	cmp	r3, #0
 8021698:	d02c      	beq.n	80216f4 <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 802169a:	2b2f      	cmp	r3, #47	@ 0x2f
 802169c:	d0ea      	beq.n	8021674 <urlparse+0x18>
    } else if (url[i] == ']') {
 802169e:	2b5d      	cmp	r3, #93	@ 0x5d
 80216a0:	d0f5      	beq.n	802168e <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 80216a2:	2b3a      	cmp	r3, #58	@ 0x3a
 80216a4:	d00b      	beq.n	80216be <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 80216a6:	2b40      	cmp	r3, #64	@ 0x40
 80216a8:	d012      	beq.n	80216d0 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 80216aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80216ac:	d1f1      	bne.n	8021692 <urlparse+0x36>
 80216ae:	9b04      	ldr	r3, [sp, #16]
 80216b0:	2b00      	cmp	r3, #0
 80216b2:	d0ee      	beq.n	8021692 <urlparse+0x36>
 80216b4:	9b06      	ldr	r3, [sp, #24]
 80216b6:	2b00      	cmp	r3, #0
 80216b8:	d1eb      	bne.n	8021692 <urlparse+0x36>
      u.uri = i;
 80216ba:	9206      	str	r2, [sp, #24]
 80216bc:	e7e9      	b.n	8021692 <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 80216be:	9805      	ldr	r0, [sp, #20]
 80216c0:	2800      	cmp	r0, #0
 80216c2:	d1f0      	bne.n	80216a6 <urlparse+0x4a>
 80216c4:	9806      	ldr	r0, [sp, #24]
 80216c6:	2800      	cmp	r0, #0
 80216c8:	d1ed      	bne.n	80216a6 <urlparse+0x4a>
      u.port = i + 1;
 80216ca:	1c53      	adds	r3, r2, #1
 80216cc:	9305      	str	r3, [sp, #20]
 80216ce:	e7e0      	b.n	8021692 <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 80216d0:	9802      	ldr	r0, [sp, #8]
 80216d2:	2800      	cmp	r0, #0
 80216d4:	d1e9      	bne.n	80216aa <urlparse+0x4e>
 80216d6:	9803      	ldr	r0, [sp, #12]
 80216d8:	2800      	cmp	r0, #0
 80216da:	d1e6      	bne.n	80216aa <urlparse+0x4e>
 80216dc:	9806      	ldr	r0, [sp, #24]
 80216de:	2800      	cmp	r0, #0
 80216e0:	d1e3      	bne.n	80216aa <urlparse+0x4e>
      u.user = u.host;
 80216e2:	9b04      	ldr	r3, [sp, #16]
 80216e4:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 80216e6:	9b05      	ldr	r3, [sp, #20]
 80216e8:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 80216ea:	1c53      	adds	r3, r2, #1
 80216ec:	9304      	str	r3, [sp, #16]
      u.port = 0;
 80216ee:	2300      	movs	r3, #0
 80216f0:	9305      	str	r3, [sp, #20]
 80216f2:	e7ce      	b.n	8021692 <urlparse+0x36>
  u.end = i;
 80216f4:	9207      	str	r2, [sp, #28]
  return u;
 80216f6:	46a4      	mov	ip, r4
 80216f8:	f10d 0e04 	add.w	lr, sp, #4
 80216fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021700:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021704:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8021708:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 802170c:	4620      	mov	r0, r4
 802170e:	b008      	add	sp, #32
 8021710:	bd10      	pop	{r4, pc}

08021712 <mg_dns_parse_name_depth>:
                                      int depth) {
 8021712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021716:	b085      	sub	sp, #20
 8021718:	4681      	mov	r9, r0
 802171a:	4688      	mov	r8, r1
 802171c:	4693      	mov	fp, r2
 802171e:	469a      	mov	sl, r3
 8021720:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8021722:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8021724:	b11f      	cbz	r7, 802172e <mg_dns_parse_name_depth+0x1c>
 8021726:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021728:	b90b      	cbnz	r3, 802172e <mg_dns_parse_name_depth+0x1c>
 802172a:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 802172e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021730:	2b05      	cmp	r3, #5
 8021732:	dc4f      	bgt.n	80217d4 <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 8021734:	2600      	movs	r6, #0
 8021736:	e02f      	b.n	8021798 <mg_dns_parse_name_depth+0x86>
      i++;
 8021738:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 802173a:	2f00      	cmp	r7, #0
 802173c:	d04b      	beq.n	80217d6 <mg_dns_parse_name_depth+0xc4>
 802173e:	3f01      	subs	r7, #1
 8021740:	2300      	movs	r3, #0
 8021742:	f80a 3007 	strb.w	r3, [sl, r7]
 8021746:	e046      	b.n	80217d6 <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8021748:	0222      	lsls	r2, r4, #8
 802174a:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 802174e:	f819 3001 	ldrb.w	r3, [r9, r1]
 8021752:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8021754:	1c53      	adds	r3, r2, #1
 8021756:	4543      	cmp	r3, r8
 8021758:	d203      	bcs.n	8021762 <mg_dns_parse_name_depth+0x50>
 802175a:	f819 3002 	ldrb.w	r3, [r9, r2]
 802175e:	2b3f      	cmp	r3, #63	@ 0x3f
 8021760:	d901      	bls.n	8021766 <mg_dns_parse_name_depth+0x54>
      i += 2;
 8021762:	3602      	adds	r6, #2
      break;
 8021764:	e7e9      	b.n	802173a <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8021766:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021768:	3301      	adds	r3, #1
 802176a:	9302      	str	r3, [sp, #8]
 802176c:	9501      	str	r5, [sp, #4]
 802176e:	9700      	str	r7, [sp, #0]
 8021770:	4653      	mov	r3, sl
 8021772:	4641      	mov	r1, r8
 8021774:	4648      	mov	r0, r9
 8021776:	f7ff ffcc 	bl	8021712 <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 802177a:	2800      	cmp	r0, #0
 802177c:	d1f1      	bne.n	8021762 <mg_dns_parse_name_depth+0x50>
        return 0;
 802177e:	4606      	mov	r6, r0
 8021780:	e029      	b.n	80217d6 <mg_dns_parse_name_depth+0xc4>
 8021782:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8021784:	1905      	adds	r5, r0, r4
 8021786:	42bd      	cmp	r5, r7
 8021788:	d31e      	bcc.n	80217c8 <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 802178a:	4426      	add	r6, r4
 802178c:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 802178e:	42bd      	cmp	r5, r7
 8021790:	d202      	bcs.n	8021798 <mg_dns_parse_name_depth+0x86>
 8021792:	2300      	movs	r3, #0
 8021794:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 8021798:	eb06 030b 	add.w	r3, r6, fp
 802179c:	1c59      	adds	r1, r3, #1
 802179e:	4541      	cmp	r1, r8
 80217a0:	d2cb      	bcs.n	802173a <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 80217a2:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 80217a6:	2c00      	cmp	r4, #0
 80217a8:	d0c6      	beq.n	8021738 <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 80217aa:	2c3f      	cmp	r4, #63	@ 0x3f
 80217ac:	d8cc      	bhi.n	8021748 <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 80217ae:	4423      	add	r3, r4
 80217b0:	3301      	adds	r3, #1
 80217b2:	4543      	cmp	r3, r8
 80217b4:	d213      	bcs.n	80217de <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 80217b6:	2d00      	cmp	r5, #0
 80217b8:	d0e3      	beq.n	8021782 <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 80217ba:	42bd      	cmp	r5, r7
 80217bc:	d202      	bcs.n	80217c4 <mg_dns_parse_name_depth+0xb2>
 80217be:	232e      	movs	r3, #46	@ 0x2e
 80217c0:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 80217c4:	1c68      	adds	r0, r5, #1
 80217c6:	e7dd      	b.n	8021784 <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 80217c8:	4622      	mov	r2, r4
 80217ca:	4449      	add	r1, r9
 80217cc:	4450      	add	r0, sl
 80217ce:	f00c fb3b 	bl	802de48 <memcpy>
 80217d2:	e7da      	b.n	802178a <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 80217d4:	2600      	movs	r6, #0
}
 80217d6:	4630      	mov	r0, r6
 80217d8:	b005      	add	sp, #20
 80217da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 80217de:	2600      	movs	r6, #0
 80217e0:	e7f9      	b.n	80217d6 <mg_dns_parse_name_depth+0xc4>

080217e2 <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 80217e2:	b510      	push	{r4, lr}
 80217e4:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 80217e6:	2400      	movs	r4, #0
 80217e8:	9402      	str	r4, [sp, #8]
 80217ea:	9401      	str	r4, [sp, #4]
 80217ec:	9c06      	ldr	r4, [sp, #24]
 80217ee:	9400      	str	r4, [sp, #0]
 80217f0:	f7ff ff8f 	bl	8021712 <mg_dns_parse_name_depth>
}
 80217f4:	b004      	add	sp, #16
 80217f6:	bd10      	pop	{r4, pc}

080217f8 <mg_sha1_transform>:
                              const unsigned char *buffer) {
 80217f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217fc:	b09f      	sub	sp, #124	@ 0x7c
 80217fe:	900d      	str	r0, [sp, #52]	@ 0x34
  memcpy(block, buffer, 64);
 8021800:	460c      	mov	r4, r1
 8021802:	af0e      	add	r7, sp, #56	@ 0x38
 8021804:	f101 0540 	add.w	r5, r1, #64	@ 0x40
 8021808:	463e      	mov	r6, r7
 802180a:	6820      	ldr	r0, [r4, #0]
 802180c:	6861      	ldr	r1, [r4, #4]
 802180e:	68a2      	ldr	r2, [r4, #8]
 8021810:	68e3      	ldr	r3, [r4, #12]
 8021812:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8021814:	3410      	adds	r4, #16
 8021816:	4637      	mov	r7, r6
 8021818:	42ac      	cmp	r4, r5
 802181a:	d1f5      	bne.n	8021808 <mg_sha1_transform+0x10>
  a = state[0];
 802181c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802181e:	6805      	ldr	r5, [r0, #0]
  b = state[1];
 8021820:	6847      	ldr	r7, [r0, #4]
  c = state[2];
 8021822:	6884      	ldr	r4, [r0, #8]
  d = state[3];
 8021824:	f8d0 800c 	ldr.w	r8, [r0, #12]
  e = state[4];
 8021828:	f8d0 9010 	ldr.w	r9, [r0, #16]
  R0(a, b, c, d, e, 0);
 802182c:	ea84 0608 	eor.w	r6, r4, r8
 8021830:	403e      	ands	r6, r7
 8021832:	ea86 0608 	eor.w	r6, r6, r8
 8021836:	2100      	movs	r1, #0
 8021838:	a80e      	add	r0, sp, #56	@ 0x38
 802183a:	f7ff fd79 	bl	8021330 <blk0>
 802183e:	1833      	adds	r3, r6, r0
 8021840:	eb03 63f5 	add.w	r3, r3, r5, ror #27
 8021844:	4ee4      	ldr	r6, [pc, #912]	@ (8021bd8 <mg_sha1_transform+0x3e0>)
 8021846:	4433      	add	r3, r6
 8021848:	4499      	add	r9, r3
 802184a:	ea4f 0ab7 	mov.w	sl, r7, ror #2
  R0(e, a, b, c, d, 1);
 802184e:	ea84 07b7 	eor.w	r7, r4, r7, ror #2
 8021852:	402f      	ands	r7, r5
 8021854:	4067      	eors	r7, r4
 8021856:	2101      	movs	r1, #1
 8021858:	a80e      	add	r0, sp, #56	@ 0x38
 802185a:	f7ff fd69 	bl	8021330 <blk0>
 802185e:	4407      	add	r7, r0
 8021860:	eb07 67f9 	add.w	r7, r7, r9, ror #27
 8021864:	4437      	add	r7, r6
 8021866:	4447      	add	r7, r8
 8021868:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(d, e, a, b, c, 2);
 802186c:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021870:	ea05 0509 	and.w	r5, r5, r9
 8021874:	ea85 050a 	eor.w	r5, r5, sl
 8021878:	2102      	movs	r1, #2
 802187a:	a80e      	add	r0, sp, #56	@ 0x38
 802187c:	f7ff fd58 	bl	8021330 <blk0>
 8021880:	4405      	add	r5, r0
 8021882:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8021886:	4435      	add	r5, r6
 8021888:	442c      	add	r4, r5
 802188a:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(c, d, e, a, b, 3);
 802188e:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8021892:	ea09 0907 	and.w	r9, r9, r7
 8021896:	ea89 0908 	eor.w	r9, r9, r8
 802189a:	2103      	movs	r1, #3
 802189c:	a80e      	add	r0, sp, #56	@ 0x38
 802189e:	f7ff fd47 	bl	8021330 <blk0>
 80218a2:	4481      	add	r9, r0
 80218a4:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 80218a8:	44b1      	add	r9, r6
 80218aa:	44ca      	add	sl, r9
 80218ac:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(b, c, d, e, a, 4);
 80218b0:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 80218b4:	4027      	ands	r7, r4
 80218b6:	406f      	eors	r7, r5
 80218b8:	2104      	movs	r1, #4
 80218ba:	a80e      	add	r0, sp, #56	@ 0x38
 80218bc:	f7ff fd38 	bl	8021330 <blk0>
 80218c0:	4407      	add	r7, r0
 80218c2:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 80218c6:	4437      	add	r7, r6
 80218c8:	44b8      	add	r8, r7
 80218ca:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(a, b, c, d, e, 5);
 80218ce:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 80218d2:	ea04 040a 	and.w	r4, r4, sl
 80218d6:	ea84 0409 	eor.w	r4, r4, r9
 80218da:	2105      	movs	r1, #5
 80218dc:	a80e      	add	r0, sp, #56	@ 0x38
 80218de:	f7ff fd27 	bl	8021330 <blk0>
 80218e2:	4404      	add	r4, r0
 80218e4:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 80218e8:	4434      	add	r4, r6
 80218ea:	4425      	add	r5, r4
 80218ec:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(e, a, b, c, d, 6);
 80218f0:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 80218f4:	ea0a 0a08 	and.w	sl, sl, r8
 80218f8:	ea8a 0a07 	eor.w	sl, sl, r7
 80218fc:	2106      	movs	r1, #6
 80218fe:	a80e      	add	r0, sp, #56	@ 0x38
 8021900:	f7ff fd16 	bl	8021330 <blk0>
 8021904:	4482      	add	sl, r0
 8021906:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 802190a:	44b2      	add	sl, r6
 802190c:	44d1      	add	r9, sl
 802190e:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(d, e, a, b, c, 7);
 8021912:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 8021916:	ea08 0805 	and.w	r8, r8, r5
 802191a:	ea88 0804 	eor.w	r8, r8, r4
 802191e:	2107      	movs	r1, #7
 8021920:	a80e      	add	r0, sp, #56	@ 0x38
 8021922:	f7ff fd05 	bl	8021330 <blk0>
 8021926:	4480      	add	r8, r0
 8021928:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 802192c:	44b0      	add	r8, r6
 802192e:	4447      	add	r7, r8
 8021930:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(c, d, e, a, b, 8);
 8021934:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021938:	ea05 0509 	and.w	r5, r5, r9
 802193c:	ea85 050a 	eor.w	r5, r5, sl
 8021940:	2108      	movs	r1, #8
 8021942:	a80e      	add	r0, sp, #56	@ 0x38
 8021944:	f7ff fcf4 	bl	8021330 <blk0>
 8021948:	4405      	add	r5, r0
 802194a:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 802194e:	4435      	add	r5, r6
 8021950:	442c      	add	r4, r5
 8021952:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(b, c, d, e, a, 9);
 8021956:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 802195a:	ea09 0907 	and.w	r9, r9, r7
 802195e:	ea89 0908 	eor.w	r9, r9, r8
 8021962:	2109      	movs	r1, #9
 8021964:	a80e      	add	r0, sp, #56	@ 0x38
 8021966:	f7ff fce3 	bl	8021330 <blk0>
 802196a:	4481      	add	r9, r0
 802196c:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021970:	44b1      	add	r9, r6
 8021972:	44ca      	add	sl, r9
 8021974:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(a, b, c, d, e, 10);
 8021978:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 802197c:	4027      	ands	r7, r4
 802197e:	406f      	eors	r7, r5
 8021980:	210a      	movs	r1, #10
 8021982:	a80e      	add	r0, sp, #56	@ 0x38
 8021984:	f7ff fcd4 	bl	8021330 <blk0>
 8021988:	4407      	add	r7, r0
 802198a:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 802198e:	4437      	add	r7, r6
 8021990:	44b8      	add	r8, r7
 8021992:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(e, a, b, c, d, 11);
 8021996:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 802199a:	ea04 040a 	and.w	r4, r4, sl
 802199e:	ea84 0409 	eor.w	r4, r4, r9
 80219a2:	210b      	movs	r1, #11
 80219a4:	a80e      	add	r0, sp, #56	@ 0x38
 80219a6:	f7ff fcc3 	bl	8021330 <blk0>
 80219aa:	4404      	add	r4, r0
 80219ac:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 80219b0:	4434      	add	r4, r6
 80219b2:	4425      	add	r5, r4
 80219b4:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(d, e, a, b, c, 12);
 80219b8:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 80219bc:	ea0a 0a08 	and.w	sl, sl, r8
 80219c0:	ea8a 0a07 	eor.w	sl, sl, r7
 80219c4:	210c      	movs	r1, #12
 80219c6:	a80e      	add	r0, sp, #56	@ 0x38
 80219c8:	f7ff fcb2 	bl	8021330 <blk0>
 80219cc:	4482      	add	sl, r0
 80219ce:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 80219d2:	44b2      	add	sl, r6
 80219d4:	44d1      	add	r9, sl
 80219d6:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(c, d, e, a, b, 13);
 80219da:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 80219de:	ea08 0805 	and.w	r8, r8, r5
 80219e2:	ea88 0804 	eor.w	r8, r8, r4
 80219e6:	210d      	movs	r1, #13
 80219e8:	a80e      	add	r0, sp, #56	@ 0x38
 80219ea:	f7ff fca1 	bl	8021330 <blk0>
 80219ee:	4480      	add	r8, r0
 80219f0:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 80219f4:	44b0      	add	r8, r6
 80219f6:	4447      	add	r7, r8
 80219f8:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(b, c, d, e, a, 14);
 80219fc:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021a00:	ea05 0509 	and.w	r5, r5, r9
 8021a04:	ea85 050a 	eor.w	r5, r5, sl
 8021a08:	210e      	movs	r1, #14
 8021a0a:	a80e      	add	r0, sp, #56	@ 0x38
 8021a0c:	f7ff fc90 	bl	8021330 <blk0>
 8021a10:	4405      	add	r5, r0
 8021a12:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8021a16:	4435      	add	r5, r6
 8021a18:	442c      	add	r4, r5
 8021a1a:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(a, b, c, d, e, 15);
 8021a1e:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8021a22:	ea09 0907 	and.w	r9, r9, r7
 8021a26:	ea89 0908 	eor.w	r9, r9, r8
 8021a2a:	210f      	movs	r1, #15
 8021a2c:	a80e      	add	r0, sp, #56	@ 0x38
 8021a2e:	f7ff fc7f 	bl	8021330 <blk0>
 8021a32:	4481      	add	r9, r0
 8021a34:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021a38:	44b1      	add	r9, r6
 8021a3a:	eb0a 0109 	add.w	r1, sl, r9
  R1(e, a, b, c, d, 16);
 8021a3e:	ea85 03b7 	eor.w	r3, r5, r7, ror #2
 8021a42:	4023      	ands	r3, r4
 8021a44:	ea83 0205 	eor.w	r2, r3, r5
 8021a48:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021a4a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021a4c:	4043      	eors	r3, r0
 8021a4e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021a50:	ea83 0c00 	eor.w	ip, r3, r0
 8021a54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021a56:	ea8c 0303 	eor.w	r3, ip, r3
 8021a5a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8021a5e:	930e      	str	r3, [sp, #56]	@ 0x38
 8021a60:	9300      	str	r3, [sp, #0]
 8021a62:	18d3      	adds	r3, r2, r3
 8021a64:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8021a68:	4433      	add	r3, r6
 8021a6a:	eb08 0203 	add.w	r2, r8, r3
 8021a6e:	ea4f 08b4 	mov.w	r8, r4, ror #2
  R1(d, e, a, b, c, 17);
 8021a72:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 8021a76:	ea0c 0c01 	and.w	ip, ip, r1
 8021a7a:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8021a7e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021a80:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021a82:	ea83 0e04 	eor.w	lr, r3, r4
 8021a86:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8021a8a:	ea8e 0e09 	eor.w	lr, lr, r9
 8021a8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021a90:	ea8e 0e03 	eor.w	lr, lr, r3
 8021a94:	ea4f 74fe 	mov.w	r4, lr, ror #31
 8021a98:	940f      	str	r4, [sp, #60]	@ 0x3c
 8021a9a:	9401      	str	r4, [sp, #4]
 8021a9c:	44a4      	add	ip, r4
 8021a9e:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 8021aa2:	44b4      	add	ip, r6
 8021aa4:	44ac      	add	ip, r5
  R1(c, d, e, a, b, 18);
 8021aa6:	ea88 05b1 	eor.w	r5, r8, r1, ror #2
 8021aaa:	4015      	ands	r5, r2
 8021aac:	ea85 0508 	eor.w	r5, r5, r8
 8021ab0:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8021ab2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021ab4:	ea84 0e03 	eor.w	lr, r4, r3
 8021ab8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021aba:	ea8e 0e03 	eor.w	lr, lr, r3
 8021abe:	ea80 000e 	eor.w	r0, r0, lr
 8021ac2:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8021ac6:	9010      	str	r0, [sp, #64]	@ 0x40
 8021ac8:	9002      	str	r0, [sp, #8]
 8021aca:	4405      	add	r5, r0
 8021acc:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 8021ad0:	4435      	add	r5, r6
 8021ad2:	eb05 05b7 	add.w	r5, r5, r7, ror #2
 8021ad6:	ea4f 02b2 	mov.w	r2, r2, ror #2
  R1(b, c, d, e, a, 19);
 8021ada:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8021ade:	ea00 000c 	and.w	r0, r0, ip
 8021ae2:	ea80 00b1 	eor.w	r0, r0, r1, ror #2
 8021ae6:	9f00      	ldr	r7, [sp, #0]
 8021ae8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8021aea:	4067      	eors	r7, r4
 8021aec:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8021af0:	ea87 070e 	eor.w	r7, r7, lr
 8021af4:	ea89 0907 	eor.w	r9, r9, r7
 8021af8:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8021afc:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8021b00:	4448      	add	r0, r9
 8021b02:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8021b06:	4430      	add	r0, r6
 8021b08:	eb08 0400 	add.w	r4, r8, r0
  R2(a, b, c, d, e, 20);
 8021b0c:	ea85 00bc 	eor.w	r0, r5, ip, ror #2
 8021b10:	4050      	eors	r0, r2
 8021b12:	9e01      	ldr	r6, [sp, #4]
 8021b14:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021b16:	ea86 0807 	eor.w	r8, r6, r7
 8021b1a:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8021b1e:	ea88 080a 	eor.w	r8, r8, sl
 8021b22:	ea83 0808 	eor.w	r8, r3, r8
 8021b26:	ea4f 78f8 	mov.w	r8, r8, ror #31
 8021b2a:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8021b2e:	4440      	add	r0, r8
 8021b30:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021b34:	4b29      	ldr	r3, [pc, #164]	@ (8021bdc <mg_sha1_transform+0x3e4>)
 8021b36:	4418      	add	r0, r3
 8021b38:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(e, a, b, c, d, 21);
 8021b3c:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021b40:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8021b44:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8021b46:	9f02      	ldr	r7, [sp, #8]
 8021b48:	4077      	eors	r7, r6
 8021b4a:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8021b4c:	4077      	eors	r7, r6
 8021b4e:	ea8e 0707 	eor.w	r7, lr, r7
 8021b52:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021b56:	9713      	str	r7, [sp, #76]	@ 0x4c
 8021b58:	9703      	str	r7, [sp, #12]
 8021b5a:	4439      	add	r1, r7
 8021b5c:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021b60:	4419      	add	r1, r3
 8021b62:	440a      	add	r2, r1
  R2(d, e, a, b, c, 22);
 8021b64:	ea80 01b4 	eor.w	r1, r0, r4, ror #2
 8021b68:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8021b6c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021b6e:	ea87 0e09 	eor.w	lr, r7, r9
 8021b72:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 8021b74:	ea87 0e0e 	eor.w	lr, r7, lr
 8021b78:	ea8a 0e0e 	eor.w	lr, sl, lr
 8021b7c:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8021b80:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8021b84:	4471      	add	r1, lr
 8021b86:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 8021b8a:	4419      	add	r1, r3
 8021b8c:	eb01 01bc 	add.w	r1, r1, ip, ror #2
  R2(c, d, e, a, b, 23);
 8021b90:	ea82 0bb0 	eor.w	fp, r2, r0, ror #2
 8021b94:	ea8b 0bb4 	eor.w	fp, fp, r4, ror #2
 8021b98:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021b9a:	ea87 0c08 	eor.w	ip, r7, r8
 8021b9e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021ba0:	ea87 0c0c 	eor.w	ip, r7, ip
 8021ba4:	ea86 0c0c 	eor.w	ip, r6, ip
 8021ba8:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8021bac:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8021bb0:	44e3      	add	fp, ip
 8021bb2:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
 8021bb6:	449b      	add	fp, r3
 8021bb8:	eb0b 0bb5 	add.w	fp, fp, r5, ror #2
  R2(b, c, d, e, a, 24);
 8021bbc:	ea81 0ab2 	eor.w	sl, r1, r2, ror #2
 8021bc0:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
 8021bc4:	9d00      	ldr	r5, [sp, #0]
 8021bc6:	9e03      	ldr	r6, [sp, #12]
 8021bc8:	406e      	eors	r6, r5
 8021bca:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8021bcc:	406e      	eors	r6, r5
 8021bce:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8021bd0:	406e      	eors	r6, r5
 8021bd2:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8021bd6:	e003      	b.n	8021be0 <mg_sha1_transform+0x3e8>
 8021bd8:	5a827999 	.word	0x5a827999
 8021bdc:	6ed9eba1 	.word	0x6ed9eba1
 8021be0:	9716      	str	r7, [sp, #88]	@ 0x58
 8021be2:	9704      	str	r7, [sp, #16]
 8021be4:	44ba      	add	sl, r7
 8021be6:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
 8021bea:	449a      	add	sl, r3
 8021bec:	eb0a 0ab4 	add.w	sl, sl, r4, ror #2
  R2(a, b, c, d, e, 25);
 8021bf0:	ea8b 05b1 	eor.w	r5, fp, r1, ror #2
 8021bf4:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
 8021bf8:	9e01      	ldr	r6, [sp, #4]
 8021bfa:	ea86 040e 	eor.w	r4, r6, lr
 8021bfe:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8021c00:	407c      	eors	r4, r7
 8021c02:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021c04:	407c      	eors	r4, r7
 8021c06:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021c0a:	9417      	str	r4, [sp, #92]	@ 0x5c
 8021c0c:	9405      	str	r4, [sp, #20]
 8021c0e:	4425      	add	r5, r4
 8021c10:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8021c14:	441d      	add	r5, r3
 8021c16:	eb05 05b0 	add.w	r5, r5, r0, ror #2
  R2(e, a, b, c, d, 26);
 8021c1a:	ea8a 04bb 	eor.w	r4, sl, fp, ror #2
 8021c1e:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021c22:	9e02      	ldr	r6, [sp, #8]
 8021c24:	ea86 000c 	eor.w	r0, r6, ip
 8021c28:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021c2a:	4078      	eors	r0, r7
 8021c2c:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8021c2e:	4078      	eors	r0, r7
 8021c30:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8021c34:	4606      	mov	r6, r0
 8021c36:	9018      	str	r0, [sp, #96]	@ 0x60
 8021c38:	4404      	add	r4, r0
 8021c3a:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021c3e:	441c      	add	r4, r3
 8021c40:	eb04 04b2 	add.w	r4, r4, r2, ror #2
  R2(d, e, a, b, c, 27);
 8021c44:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8021c48:	ea80 00bb 	eor.w	r0, r0, fp, ror #2
 8021c4c:	9f04      	ldr	r7, [sp, #16]
 8021c4e:	ea89 0207 	eor.w	r2, r9, r7
 8021c52:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8021c54:	407a      	eors	r2, r7
 8021c56:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8021c58:	407a      	eors	r2, r7
 8021c5a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021c5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8021c60:	9206      	str	r2, [sp, #24]
 8021c62:	4410      	add	r0, r2
 8021c64:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021c68:	4418      	add	r0, r3
 8021c6a:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(c, d, e, a, b, 28);
 8021c6e:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021c72:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8021c76:	9a05      	ldr	r2, [sp, #20]
 8021c78:	ea88 0202 	eor.w	r2, r8, r2
 8021c7c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021c7e:	407a      	eors	r2, r7
 8021c80:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021c82:	407a      	eors	r2, r7
 8021c84:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021c88:	921a      	str	r2, [sp, #104]	@ 0x68
 8021c8a:	9207      	str	r2, [sp, #28]
 8021c8c:	4411      	add	r1, r2
 8021c8e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021c92:	4419      	add	r1, r3
 8021c94:	eb01 01bb 	add.w	r1, r1, fp, ror #2
  R2(b, c, d, e, a, 29);
 8021c98:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8021c9c:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8021ca0:	960b      	str	r6, [sp, #44]	@ 0x2c
 8021ca2:	9f03      	ldr	r7, [sp, #12]
 8021ca4:	ea87 0b06 	eor.w	fp, r7, r6
 8021ca8:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021caa:	ea87 0b0b 	eor.w	fp, r7, fp
 8021cae:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8021cb0:	ea87 0b0b 	eor.w	fp, r7, fp
 8021cb4:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021cb8:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 8021cbc:	f8cd b020 	str.w	fp, [sp, #32]
 8021cc0:	445a      	add	r2, fp
 8021cc2:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021cc6:	441a      	add	r2, r3
 8021cc8:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(a, b, c, d, e, 30);
 8021ccc:	ea81 0ab0 	eor.w	sl, r1, r0, ror #2
 8021cd0:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
 8021cd4:	9e06      	ldr	r6, [sp, #24]
 8021cd6:	ea8e 0b06 	eor.w	fp, lr, r6
 8021cda:	9e00      	ldr	r6, [sp, #0]
 8021cdc:	ea86 0b0b 	eor.w	fp, r6, fp
 8021ce0:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021ce2:	ea87 0b0b 	eor.w	fp, r7, fp
 8021ce6:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021cea:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 8021cee:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8021cf2:	44da      	add	sl, fp
 8021cf4:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8021cf8:	449a      	add	sl, r3
 8021cfa:	eb0a 0ab5 	add.w	sl, sl, r5, ror #2
  R2(e, a, b, c, d, 31);
 8021cfe:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8021d02:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8021d06:	9e07      	ldr	r6, [sp, #28]
 8021d08:	ea8c 0b06 	eor.w	fp, ip, r6
 8021d0c:	9e01      	ldr	r6, [sp, #4]
 8021d0e:	ea86 0b0b 	eor.w	fp, r6, fp
 8021d12:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021d14:	ea87 0b0b 	eor.w	fp, r7, fp
 8021d18:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021d1c:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 8021d20:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8021d24:	445d      	add	r5, fp
 8021d26:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8021d2a:	441d      	add	r5, r3
 8021d2c:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(d, e, a, b, c, 32);
 8021d30:	ea8a 04b2 	eor.w	r4, sl, r2, ror #2
 8021d34:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021d38:	9e08      	ldr	r6, [sp, #32]
 8021d3a:	9f04      	ldr	r7, [sp, #16]
 8021d3c:	ea87 0b06 	eor.w	fp, r7, r6
 8021d40:	9e02      	ldr	r6, [sp, #8]
 8021d42:	ea86 0b0b 	eor.w	fp, r6, fp
 8021d46:	9e00      	ldr	r6, [sp, #0]
 8021d48:	ea86 0b0b 	eor.w	fp, r6, fp
 8021d4c:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021d50:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8021d54:	f8cd b000 	str.w	fp, [sp]
 8021d58:	445c      	add	r4, fp
 8021d5a:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021d5e:	441c      	add	r4, r3
 8021d60:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(c, d, e, a, b, 33);
 8021d64:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8021d68:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8021d6c:	9e05      	ldr	r6, [sp, #20]
 8021d6e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021d70:	ea86 0b07 	eor.w	fp, r6, r7
 8021d74:	ea89 0b0b 	eor.w	fp, r9, fp
 8021d78:	9e01      	ldr	r6, [sp, #4]
 8021d7a:	ea86 0b0b 	eor.w	fp, r6, fp
 8021d7e:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021d82:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8021d86:	f8cd b004 	str.w	fp, [sp, #4]
 8021d8a:	4458      	add	r0, fp
 8021d8c:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021d90:	4418      	add	r0, r3
 8021d92:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(b, c, d, e, a, 34);
 8021d96:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021d9a:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8021d9e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021da0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021da2:	ea86 0b07 	eor.w	fp, r6, r7
 8021da6:	ea88 0b0b 	eor.w	fp, r8, fp
 8021daa:	9e02      	ldr	r6, [sp, #8]
 8021dac:	ea86 0b0b 	eor.w	fp, r6, fp
 8021db0:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021db4:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8021db8:	f8cd b008 	str.w	fp, [sp, #8]
 8021dbc:	4459      	add	r1, fp
 8021dbe:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021dc2:	4419      	add	r1, r3
 8021dc4:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R2(a, b, c, d, e, 35);
 8021dc8:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8021dcc:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8021dd0:	9e06      	ldr	r6, [sp, #24]
 8021dd2:	9f00      	ldr	r7, [sp, #0]
 8021dd4:	ea86 0b07 	eor.w	fp, r6, r7
 8021dd8:	9e03      	ldr	r6, [sp, #12]
 8021dda:	ea86 0b0b 	eor.w	fp, r6, fp
 8021dde:	ea89 090b 	eor.w	r9, r9, fp
 8021de2:	ea4f 7bf9 	mov.w	fp, r9, ror #31
 8021de6:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 8021dea:	445a      	add	r2, fp
 8021dec:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021df0:	441a      	add	r2, r3
 8021df2:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(e, a, b, c, d, 36);
 8021df6:	ea81 09b0 	eor.w	r9, r1, r0, ror #2
 8021dfa:	ea89 09b4 	eor.w	r9, r9, r4, ror #2
 8021dfe:	9e07      	ldr	r6, [sp, #28]
 8021e00:	9f01      	ldr	r7, [sp, #4]
 8021e02:	ea86 0a07 	eor.w	sl, r6, r7
 8021e06:	ea8e 0a0a 	eor.w	sl, lr, sl
 8021e0a:	ea88 080a 	eor.w	r8, r8, sl
 8021e0e:	ea4f 7af8 	mov.w	sl, r8, ror #31
 8021e12:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 8021e16:	44d1      	add	r9, sl
 8021e18:	eb09 69f2 	add.w	r9, r9, r2, ror #27
 8021e1c:	4499      	add	r9, r3
 8021e1e:	eb09 08b5 	add.w	r8, r9, r5, ror #2
  R2(d, e, a, b, c, 37);
 8021e22:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8021e26:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8021e2a:	9e08      	ldr	r6, [sp, #32]
 8021e2c:	9f02      	ldr	r7, [sp, #8]
 8021e2e:	ea86 0907 	eor.w	r9, r6, r7
 8021e32:	ea8c 0909 	eor.w	r9, ip, r9
 8021e36:	9e03      	ldr	r6, [sp, #12]
 8021e38:	ea86 0709 	eor.w	r7, r6, r9
 8021e3c:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8021e40:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8021e44:	444d      	add	r5, r9
 8021e46:	eb05 65f8 	add.w	r5, r5, r8, ror #27
 8021e4a:	441d      	add	r5, r3
 8021e4c:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(c, d, e, a, b, 38);
 8021e50:	ea88 04b2 	eor.w	r4, r8, r2, ror #2
 8021e54:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021e58:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021e5a:	ea87 070b 	eor.w	r7, r7, fp
 8021e5e:	9e04      	ldr	r6, [sp, #16]
 8021e60:	4077      	eors	r7, r6
 8021e62:	ea8e 0e07 	eor.w	lr, lr, r7
 8021e66:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8021e6a:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8021e6e:	4474      	add	r4, lr
 8021e70:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021e74:	441c      	add	r4, r3
 8021e76:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(b, c, d, e, a, 39);
 8021e7a:	ea85 00b8 	eor.w	r0, r5, r8, ror #2
 8021e7e:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8021e82:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021e84:	ea87 070a 	eor.w	r7, r7, sl
 8021e88:	9e05      	ldr	r6, [sp, #20]
 8021e8a:	4077      	eors	r7, r6
 8021e8c:	ea8c 0c07 	eor.w	ip, ip, r7
 8021e90:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8021e94:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8021e98:	f8cd c00c 	str.w	ip, [sp, #12]
 8021e9c:	4460      	add	r0, ip
 8021e9e:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021ea2:	4418      	add	r0, r3
 8021ea4:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(a, b, c, d, e, 40);
 8021ea8:	ea44 01b5 	orr.w	r1, r4, r5, ror #2
 8021eac:	ea01 01b8 	and.w	r1, r1, r8, ror #2
 8021eb0:	ea04 03b5 	and.w	r3, r4, r5, ror #2
 8021eb4:	4319      	orrs	r1, r3
 8021eb6:	9b00      	ldr	r3, [sp, #0]
 8021eb8:	ea83 0309 	eor.w	r3, r3, r9
 8021ebc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021ebe:	4073      	eors	r3, r6
 8021ec0:	9e04      	ldr	r6, [sp, #16]
 8021ec2:	405e      	eors	r6, r3
 8021ec4:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8021ec8:	9316      	str	r3, [sp, #88]	@ 0x58
 8021eca:	9304      	str	r3, [sp, #16]
 8021ecc:	4419      	add	r1, r3
 8021ece:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021ed2:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8021ed6:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8021eda:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8021ede:	311c      	adds	r1, #28
 8021ee0:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(e, a, b, c, d, 41);
 8021ee4:	ea40 02b4 	orr.w	r2, r0, r4, ror #2
 8021ee8:	ea02 02b5 	and.w	r2, r2, r5, ror #2
 8021eec:	ea00 06b4 	and.w	r6, r0, r4, ror #2
 8021ef0:	4332      	orrs	r2, r6
 8021ef2:	9b01      	ldr	r3, [sp, #4]
 8021ef4:	ea83 060e 	eor.w	r6, r3, lr
 8021ef8:	9b06      	ldr	r3, [sp, #24]
 8021efa:	405e      	eors	r6, r3
 8021efc:	9f05      	ldr	r7, [sp, #20]
 8021efe:	407e      	eors	r6, r7
 8021f00:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8021f04:	9717      	str	r7, [sp, #92]	@ 0x5c
 8021f06:	9705      	str	r7, [sp, #20]
 8021f08:	443a      	add	r2, r7
 8021f0a:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021f0e:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8021f12:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8021f16:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8021f1a:	321c      	adds	r2, #28
 8021f1c:	eb02 02b8 	add.w	r2, r2, r8, ror #2
  R3(d, e, a, b, c, 42);
 8021f20:	ea41 06b0 	orr.w	r6, r1, r0, ror #2
 8021f24:	ea06 06b4 	and.w	r6, r6, r4, ror #2
 8021f28:	ea01 07b0 	and.w	r7, r1, r0, ror #2
 8021f2c:	433e      	orrs	r6, r7
 8021f2e:	9f02      	ldr	r7, [sp, #8]
 8021f30:	4663      	mov	r3, ip
 8021f32:	405f      	eors	r7, r3
 8021f34:	9b07      	ldr	r3, [sp, #28]
 8021f36:	405f      	eors	r7, r3
 8021f38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021f3a:	405f      	eors	r7, r3
 8021f3c:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021f40:	9718      	str	r7, [sp, #96]	@ 0x60
 8021f42:	970b      	str	r7, [sp, #44]	@ 0x2c
 8021f44:	443e      	add	r6, r7
 8021f46:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 8021f4a:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8021f4e:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8021f52:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 8021f56:	361c      	adds	r6, #28
 8021f58:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R3(c, d, e, a, b, 43);
 8021f5c:	ea42 07b1 	orr.w	r7, r2, r1, ror #2
 8021f60:	ea07 07b0 	and.w	r7, r7, r0, ror #2
 8021f64:	ea02 05b1 	and.w	r5, r2, r1, ror #2
 8021f68:	432f      	orrs	r7, r5
 8021f6a:	9d04      	ldr	r5, [sp, #16]
 8021f6c:	ea8b 0505 	eor.w	r5, fp, r5
 8021f70:	9b08      	ldr	r3, [sp, #32]
 8021f72:	405d      	eors	r5, r3
 8021f74:	9b06      	ldr	r3, [sp, #24]
 8021f76:	405d      	eors	r5, r3
 8021f78:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8021f7c:	9519      	str	r5, [sp, #100]	@ 0x64
 8021f7e:	9506      	str	r5, [sp, #24]
 8021f80:	442f      	add	r7, r5
 8021f82:	eb07 67f6 	add.w	r7, r7, r6, ror #27
 8021f86:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 8021f8a:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 8021f8e:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 8021f92:	371c      	adds	r7, #28
 8021f94:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R3(b, c, d, e, a, 44);
 8021f98:	ea46 0cb2 	orr.w	ip, r6, r2, ror #2
 8021f9c:	ea0c 0cb1 	and.w	ip, ip, r1, ror #2
 8021fa0:	ea06 04b2 	and.w	r4, r6, r2, ror #2
 8021fa4:	ea4c 0c04 	orr.w	ip, ip, r4
 8021fa8:	9c05      	ldr	r4, [sp, #20]
 8021faa:	ea8a 0404 	eor.w	r4, sl, r4
 8021fae:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021fb0:	406c      	eors	r4, r5
 8021fb2:	9b07      	ldr	r3, [sp, #28]
 8021fb4:	405c      	eors	r4, r3
 8021fb6:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021fba:	941a      	str	r4, [sp, #104]	@ 0x68
 8021fbc:	9407      	str	r4, [sp, #28]
 8021fbe:	44a4      	add	ip, r4
 8021fc0:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
 8021fc4:	f10c 4c0f 	add.w	ip, ip, #2399141888	@ 0x8f000000
 8021fc8:	f50c 1cdd 	add.w	ip, ip, #1810432	@ 0x1ba000
 8021fcc:	f50c 5ce6 	add.w	ip, ip, #7360	@ 0x1cc0
 8021fd0:	f10c 0c1c 	add.w	ip, ip, #28
 8021fd4:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R3(a, b, c, d, e, 45);
 8021fd8:	ea47 00b6 	orr.w	r0, r7, r6, ror #2
 8021fdc:	ea00 00b2 	and.w	r0, r0, r2, ror #2
 8021fe0:	ea07 04b6 	and.w	r4, r7, r6, ror #2
 8021fe4:	4320      	orrs	r0, r4
 8021fe6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021fe8:	ea89 0404 	eor.w	r4, r9, r4
 8021fec:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021fee:	406c      	eors	r4, r5
 8021ff0:	9b08      	ldr	r3, [sp, #32]
 8021ff2:	405c      	eors	r4, r3
 8021ff4:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021ff8:	941b      	str	r4, [sp, #108]	@ 0x6c
 8021ffa:	9408      	str	r4, [sp, #32]
 8021ffc:	4420      	add	r0, r4
 8021ffe:	eb00 60fc 	add.w	r0, r0, ip, ror #27
 8022002:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8022006:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 802200a:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 802200e:	301c      	adds	r0, #28
 8022010:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(e, a, b, c, d, 46);
 8022014:	ea4c 05b7 	orr.w	r5, ip, r7, ror #2
 8022018:	ea05 05b6 	and.w	r5, r5, r6, ror #2
 802201c:	ea0c 01b7 	and.w	r1, ip, r7, ror #2
 8022020:	430d      	orrs	r5, r1
 8022022:	9906      	ldr	r1, [sp, #24]
 8022024:	ea8e 0101 	eor.w	r1, lr, r1
 8022028:	9c00      	ldr	r4, [sp, #0]
 802202a:	4061      	eors	r1, r4
 802202c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802202e:	4059      	eors	r1, r3
 8022030:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022034:	911c      	str	r1, [sp, #112]	@ 0x70
 8022036:	9109      	str	r1, [sp, #36]	@ 0x24
 8022038:	440d      	add	r5, r1
 802203a:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 802203e:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 8022042:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 8022046:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 802204a:	351c      	adds	r5, #28
 802204c:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R3(d, e, a, b, c, 47);
 8022050:	ea40 04bc 	orr.w	r4, r0, ip, ror #2
 8022054:	ea04 04b7 	and.w	r4, r4, r7, ror #2
 8022058:	ea00 02bc 	and.w	r2, r0, ip, ror #2
 802205c:	4314      	orrs	r4, r2
 802205e:	9903      	ldr	r1, [sp, #12]
 8022060:	9a07      	ldr	r2, [sp, #28]
 8022062:	404a      	eors	r2, r1
 8022064:	9901      	ldr	r1, [sp, #4]
 8022066:	404a      	eors	r2, r1
 8022068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802206a:	405a      	eors	r2, r3
 802206c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022070:	921d      	str	r2, [sp, #116]	@ 0x74
 8022072:	920a      	str	r2, [sp, #40]	@ 0x28
 8022074:	4414      	add	r4, r2
 8022076:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 802207a:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 802207e:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8022082:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8022086:	341c      	adds	r4, #28
 8022088:	eb04 04b6 	add.w	r4, r4, r6, ror #2
  R3(c, d, e, a, b, 48);
 802208c:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8022090:	ea01 01bc 	and.w	r1, r1, ip, ror #2
 8022094:	ea05 02b0 	and.w	r2, r5, r0, ror #2
 8022098:	4311      	orrs	r1, r2
 802209a:	9a04      	ldr	r2, [sp, #16]
 802209c:	9e08      	ldr	r6, [sp, #32]
 802209e:	4072      	eors	r2, r6
 80220a0:	9e02      	ldr	r6, [sp, #8]
 80220a2:	4072      	eors	r2, r6
 80220a4:	9b00      	ldr	r3, [sp, #0]
 80220a6:	405a      	eors	r2, r3
 80220a8:	ea4f 76f2 	mov.w	r6, r2, ror #31
 80220ac:	960e      	str	r6, [sp, #56]	@ 0x38
 80220ae:	9600      	str	r6, [sp, #0]
 80220b0:	4431      	add	r1, r6
 80220b2:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 80220b6:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 80220ba:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 80220be:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 80220c2:	311c      	adds	r1, #28
 80220c4:	eb01 01b7 	add.w	r1, r1, r7, ror #2
  R3(b, c, d, e, a, 49);
 80220c8:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 80220cc:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 80220d0:	ea04 06b5 	and.w	r6, r4, r5, ror #2
 80220d4:	4332      	orrs	r2, r6
 80220d6:	9f05      	ldr	r7, [sp, #20]
 80220d8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80220da:	407e      	eors	r6, r7
 80220dc:	ea8b 0606 	eor.w	r6, fp, r6
 80220e0:	9b01      	ldr	r3, [sp, #4]
 80220e2:	405e      	eors	r6, r3
 80220e4:	ea4f 73f6 	mov.w	r3, r6, ror #31
 80220e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80220ea:	9301      	str	r3, [sp, #4]
 80220ec:	441a      	add	r2, r3
 80220ee:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80220f2:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 80220f6:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 80220fa:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 80220fe:	321c      	adds	r2, #28
 8022100:	eb02 02bc 	add.w	r2, r2, ip, ror #2
  R3(a, b, c, d, e, 50);
 8022104:	ea41 06b4 	orr.w	r6, r1, r4, ror #2
 8022108:	ea06 06b5 	and.w	r6, r6, r5, ror #2
 802210c:	ea01 07b4 	and.w	r7, r1, r4, ror #2
 8022110:	433e      	orrs	r6, r7
 8022112:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022116:	405f      	eors	r7, r3
 8022118:	ea8a 0707 	eor.w	r7, sl, r7
 802211c:	9b02      	ldr	r3, [sp, #8]
 802211e:	405f      	eors	r7, r3
 8022120:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022124:	9710      	str	r7, [sp, #64]	@ 0x40
 8022126:	9702      	str	r7, [sp, #8]
 8022128:	443e      	add	r6, r7
 802212a:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 802212e:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8022132:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8022136:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 802213a:	361c      	adds	r6, #28
 802213c:	eb06 06b0 	add.w	r6, r6, r0, ror #2
  R3(e, a, b, c, d, 51);
 8022140:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 8022144:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8022148:	ea02 07b1 	and.w	r7, r2, r1, ror #2
 802214c:	4338      	orrs	r0, r7
 802214e:	9b06      	ldr	r3, [sp, #24]
 8022150:	9f00      	ldr	r7, [sp, #0]
 8022152:	405f      	eors	r7, r3
 8022154:	ea89 0707 	eor.w	r7, r9, r7
 8022158:	ea8b 0b07 	eor.w	fp, fp, r7
 802215c:	ea4f 7cfb 	mov.w	ip, fp, ror #31
 8022160:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 8022164:	4460      	add	r0, ip
 8022166:	eb00 60f6 	add.w	r0, r0, r6, ror #27
 802216a:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 802216e:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8022172:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8022176:	301c      	adds	r0, #28
 8022178:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(d, e, a, b, c, 52);
 802217c:	ea46 05b2 	orr.w	r5, r6, r2, ror #2
 8022180:	ea05 05b1 	and.w	r5, r5, r1, ror #2
 8022184:	ea06 07b2 	and.w	r7, r6, r2, ror #2
 8022188:	433d      	orrs	r5, r7
 802218a:	9f07      	ldr	r7, [sp, #28]
 802218c:	9b01      	ldr	r3, [sp, #4]
 802218e:	405f      	eors	r7, r3
 8022190:	ea8e 0707 	eor.w	r7, lr, r7
 8022194:	ea8a 0a07 	eor.w	sl, sl, r7
 8022198:	ea4f 78fa 	mov.w	r8, sl, ror #31
 802219c:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80221a0:	4445      	add	r5, r8
 80221a2:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 80221a6:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 80221aa:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 80221ae:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 80221b2:	351c      	adds	r5, #28
 80221b4:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R3(c, d, e, a, b, 53);
 80221b8:	ea40 04b6 	orr.w	r4, r0, r6, ror #2
 80221bc:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 80221c0:	ea00 07b6 	and.w	r7, r0, r6, ror #2
 80221c4:	433c      	orrs	r4, r7
 80221c6:	9b08      	ldr	r3, [sp, #32]
 80221c8:	9f02      	ldr	r7, [sp, #8]
 80221ca:	405f      	eors	r7, r3
 80221cc:	9b03      	ldr	r3, [sp, #12]
 80221ce:	405f      	eors	r7, r3
 80221d0:	ea89 0707 	eor.w	r7, r9, r7
 80221d4:	ea4f 79f7 	mov.w	r9, r7, ror #31
 80221d8:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 80221dc:	444c      	add	r4, r9
 80221de:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 80221e2:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 80221e6:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 80221ea:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 80221ee:	341c      	adds	r4, #28
 80221f0:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R3(b, c, d, e, a, 54);
 80221f4:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 80221f8:	ea01 01b6 	and.w	r1, r1, r6, ror #2
 80221fc:	ea05 07b0 	and.w	r7, r5, r0, ror #2
 8022200:	4339      	orrs	r1, r7
 8022202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022204:	ea83 070c 	eor.w	r7, r3, ip
 8022208:	9b04      	ldr	r3, [sp, #16]
 802220a:	405f      	eors	r7, r3
 802220c:	ea8e 0707 	eor.w	r7, lr, r7
 8022210:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022214:	9714      	str	r7, [sp, #80]	@ 0x50
 8022216:	970c      	str	r7, [sp, #48]	@ 0x30
 8022218:	4439      	add	r1, r7
 802221a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 802221e:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8022222:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8022226:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 802222a:	311c      	adds	r1, #28
 802222c:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(a, b, c, d, e, 55);
 8022230:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 8022234:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8022238:	ea04 07b5 	and.w	r7, r4, r5, ror #2
 802223c:	433a      	orrs	r2, r7
 802223e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022240:	ea87 0708 	eor.w	r7, r7, r8
 8022244:	9b05      	ldr	r3, [sp, #20]
 8022246:	405f      	eors	r7, r3
 8022248:	9b03      	ldr	r3, [sp, #12]
 802224a:	405f      	eors	r7, r3
 802224c:	ea4f 7bf7 	mov.w	fp, r7, ror #31
 8022250:	f8cd b054 	str.w	fp, [sp, #84]	@ 0x54
 8022254:	445a      	add	r2, fp
 8022256:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802225a:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 802225e:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8022262:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8022266:	321c      	adds	r2, #28
 8022268:	eb02 02b6 	add.w	r2, r2, r6, ror #2
  R3(e, a, b, c, d, 56);
 802226c:	ea41 07b4 	orr.w	r7, r1, r4, ror #2
 8022270:	ea07 07b5 	and.w	r7, r7, r5, ror #2
 8022274:	ea01 06b4 	and.w	r6, r1, r4, ror #2
 8022278:	4337      	orrs	r7, r6
 802227a:	9e00      	ldr	r6, [sp, #0]
 802227c:	ea86 0609 	eor.w	r6, r6, r9
 8022280:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022282:	405e      	eors	r6, r3
 8022284:	9b04      	ldr	r3, [sp, #16]
 8022286:	405e      	eors	r6, r3
 8022288:	ea4f 7af6 	mov.w	sl, r6, ror #31
 802228c:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 8022290:	4457      	add	r7, sl
 8022292:	eb07 67f2 	add.w	r7, r7, r2, ror #27
 8022296:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 802229a:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 802229e:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 80222a2:	371c      	adds	r7, #28
 80222a4:	eb07 07b0 	add.w	r7, r7, r0, ror #2
  R3(d, e, a, b, c, 57);
 80222a8:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 80222ac:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 80222b0:	ea02 06b1 	and.w	r6, r2, r1, ror #2
 80222b4:	4330      	orrs	r0, r6
 80222b6:	9e01      	ldr	r6, [sp, #4]
 80222b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80222ba:	405e      	eors	r6, r3
 80222bc:	9b06      	ldr	r3, [sp, #24]
 80222be:	405e      	eors	r6, r3
 80222c0:	9b05      	ldr	r3, [sp, #20]
 80222c2:	405e      	eors	r6, r3
 80222c4:	ea4f 76f6 	mov.w	r6, r6, ror #31
 80222c8:	9617      	str	r6, [sp, #92]	@ 0x5c
 80222ca:	9603      	str	r6, [sp, #12]
 80222cc:	4430      	add	r0, r6
 80222ce:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 80222d2:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 80222d6:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 80222da:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 80222de:	301c      	adds	r0, #28
 80222e0:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(c, d, e, a, b, 58);
 80222e4:	ea47 06b2 	orr.w	r6, r7, r2, ror #2
 80222e8:	ea06 06b1 	and.w	r6, r6, r1, ror #2
 80222ec:	ea07 05b2 	and.w	r5, r7, r2, ror #2
 80222f0:	432e      	orrs	r6, r5
 80222f2:	9d02      	ldr	r5, [sp, #8]
 80222f4:	ea85 050b 	eor.w	r5, r5, fp
 80222f8:	9b07      	ldr	r3, [sp, #28]
 80222fa:	405d      	eors	r5, r3
 80222fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80222fe:	405d      	eors	r5, r3
 8022300:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8022304:	9518      	str	r5, [sp, #96]	@ 0x60
 8022306:	9504      	str	r5, [sp, #16]
 8022308:	442e      	add	r6, r5
 802230a:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 802230e:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8022312:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8022316:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 802231a:	361c      	adds	r6, #28
 802231c:	eb06 06b4 	add.w	r6, r6, r4, ror #2
  R3(b, c, d, e, a, 59);
 8022320:	ea40 04b7 	orr.w	r4, r0, r7, ror #2
 8022324:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8022328:	ea00 05b7 	and.w	r5, r0, r7, ror #2
 802232c:	432c      	orrs	r4, r5
 802232e:	ea8c 050a 	eor.w	r5, ip, sl
 8022332:	9b08      	ldr	r3, [sp, #32]
 8022334:	405d      	eors	r5, r3
 8022336:	9b06      	ldr	r3, [sp, #24]
 8022338:	405d      	eors	r5, r3
 802233a:	ea4f 75f5 	mov.w	r5, r5, ror #31
 802233e:	9519      	str	r5, [sp, #100]	@ 0x64
 8022340:	9505      	str	r5, [sp, #20]
 8022342:	442c      	add	r4, r5
 8022344:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 8022348:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 802234c:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8022350:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8022354:	341c      	adds	r4, #28
 8022356:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R4(a, b, c, d, e, 60);
 802235a:	ea86 01b0 	eor.w	r1, r6, r0, ror #2
 802235e:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 8022362:	9d03      	ldr	r5, [sp, #12]
 8022364:	ea88 0305 	eor.w	r3, r8, r5
 8022368:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802236a:	406b      	eors	r3, r5
 802236c:	9d07      	ldr	r5, [sp, #28]
 802236e:	406b      	eors	r3, r5
 8022370:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022374:	931a      	str	r3, [sp, #104]	@ 0x68
 8022376:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022378:	4419      	add	r1, r3
 802237a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 802237e:	f8df e3fc 	ldr.w	lr, [pc, #1020]	@ 802277c <mg_sha1_transform+0xf84>
 8022382:	4471      	add	r1, lr
 8022384:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R4(e, a, b, c, d, 61);
 8022388:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 802238c:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8022390:	9b04      	ldr	r3, [sp, #16]
 8022392:	ea89 0303 	eor.w	r3, r9, r3
 8022396:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022398:	406b      	eors	r3, r5
 802239a:	9d08      	ldr	r5, [sp, #32]
 802239c:	406b      	eors	r3, r5
 802239e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80223a2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80223a4:	9306      	str	r3, [sp, #24]
 80223a6:	441a      	add	r2, r3
 80223a8:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80223ac:	4472      	add	r2, lr
 80223ae:	eb02 02b7 	add.w	r2, r2, r7, ror #2
  R4(d, e, a, b, c, 62);
 80223b2:	ea81 03b4 	eor.w	r3, r1, r4, ror #2
 80223b6:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 80223ba:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80223bc:	9d05      	ldr	r5, [sp, #20]
 80223be:	406f      	eors	r7, r5
 80223c0:	9d00      	ldr	r5, [sp, #0]
 80223c2:	406f      	eors	r7, r5
 80223c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80223c6:	406f      	eors	r7, r5
 80223c8:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80223cc:	971c      	str	r7, [sp, #112]	@ 0x70
 80223ce:	9707      	str	r7, [sp, #28]
 80223d0:	443b      	add	r3, r7
 80223d2:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 80223d6:	4473      	add	r3, lr
 80223d8:	eb03 03b0 	add.w	r3, r3, r0, ror #2
  R4(c, d, e, a, b, 63);
 80223dc:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 80223e0:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 80223e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80223e6:	ea8b 0707 	eor.w	r7, fp, r7
 80223ea:	9d01      	ldr	r5, [sp, #4]
 80223ec:	406f      	eors	r7, r5
 80223ee:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80223f0:	406f      	eors	r7, r5
 80223f2:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80223f6:	971d      	str	r7, [sp, #116]	@ 0x74
 80223f8:	9708      	str	r7, [sp, #32]
 80223fa:	4438      	add	r0, r7
 80223fc:	eb00 60f3 	add.w	r0, r0, r3, ror #27
 8022400:	4470      	add	r0, lr
 8022402:	eb00 00b6 	add.w	r0, r0, r6, ror #2
  R4(b, c, d, e, a, 64);
 8022406:	ea83 07b2 	eor.w	r7, r3, r2, ror #2
 802240a:	ea87 07b1 	eor.w	r7, r7, r1, ror #2
 802240e:	9e06      	ldr	r6, [sp, #24]
 8022410:	ea8a 0606 	eor.w	r6, sl, r6
 8022414:	9d02      	ldr	r5, [sp, #8]
 8022416:	406e      	eors	r6, r5
 8022418:	9d00      	ldr	r5, [sp, #0]
 802241a:	406e      	eors	r6, r5
 802241c:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8022420:	960e      	str	r6, [sp, #56]	@ 0x38
 8022422:	9600      	str	r6, [sp, #0]
 8022424:	4437      	add	r7, r6
 8022426:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 802242a:	4477      	add	r7, lr
 802242c:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R4(a, b, c, d, e, 65);
 8022430:	ea80 06b3 	eor.w	r6, r0, r3, ror #2
 8022434:	ea86 06b2 	eor.w	r6, r6, r2, ror #2
 8022438:	9c03      	ldr	r4, [sp, #12]
 802243a:	9d07      	ldr	r5, [sp, #28]
 802243c:	406c      	eors	r4, r5
 802243e:	ea8c 0404 	eor.w	r4, ip, r4
 8022442:	9d01      	ldr	r5, [sp, #4]
 8022444:	406c      	eors	r4, r5
 8022446:	ea4f 74f4 	mov.w	r4, r4, ror #31
 802244a:	940f      	str	r4, [sp, #60]	@ 0x3c
 802244c:	9401      	str	r4, [sp, #4]
 802244e:	4426      	add	r6, r4
 8022450:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022454:	4476      	add	r6, lr
 8022456:	eb06 06b1 	add.w	r6, r6, r1, ror #2
  R4(e, a, b, c, d, 66);
 802245a:	ea87 05b0 	eor.w	r5, r7, r0, ror #2
 802245e:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 8022462:	9904      	ldr	r1, [sp, #16]
 8022464:	9c08      	ldr	r4, [sp, #32]
 8022466:	4061      	eors	r1, r4
 8022468:	ea88 0101 	eor.w	r1, r8, r1
 802246c:	9c02      	ldr	r4, [sp, #8]
 802246e:	4061      	eors	r1, r4
 8022470:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022474:	9110      	str	r1, [sp, #64]	@ 0x40
 8022476:	440d      	add	r5, r1
 8022478:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 802247c:	4475      	add	r5, lr
 802247e:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R4(d, e, a, b, c, 67);
 8022482:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8022486:	ea8e 0eb0 	eor.w	lr, lr, r0, ror #2
 802248a:	9a05      	ldr	r2, [sp, #20]
 802248c:	9c00      	ldr	r4, [sp, #0]
 802248e:	4062      	eors	r2, r4
 8022490:	ea89 0202 	eor.w	r2, r9, r2
 8022494:	ea8c 0202 	eor.w	r2, ip, r2
 8022498:	ea4f 72f2 	mov.w	r2, r2, ror #31
 802249c:	9211      	str	r2, [sp, #68]	@ 0x44
 802249e:	4496      	add	lr, r2
 80224a0:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 80224a4:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 80224a8:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 80224ac:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 80224b0:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 80224b4:	eb0e 0eb3 	add.w	lr, lr, r3, ror #2
  R4(c, d, e, a, b, 68);
 80224b8:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 80224bc:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 80224c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80224c2:	9c01      	ldr	r4, [sp, #4]
 80224c4:	4063      	eors	r3, r4
 80224c6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80224c8:	4063      	eors	r3, r4
 80224ca:	ea88 0303 	eor.w	r3, r8, r3
 80224ce:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80224d2:	9312      	str	r3, [sp, #72]	@ 0x48
 80224d4:	449c      	add	ip, r3
 80224d6:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 80224da:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 80224de:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 80224e2:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 80224e6:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 80224ea:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R4(b, c, d, e, a, 69);
 80224ee:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 80224f2:	ea88 08b6 	eor.w	r8, r8, r6, ror #2
 80224f6:	9806      	ldr	r0, [sp, #24]
 80224f8:	4048      	eors	r0, r1
 80224fa:	ea8b 0000 	eor.w	r0, fp, r0
 80224fe:	ea89 0000 	eor.w	r0, r9, r0
 8022502:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8022506:	9013      	str	r0, [sp, #76]	@ 0x4c
 8022508:	4480      	add	r8, r0
 802250a:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 802250e:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8022512:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8022516:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 802251a:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 802251e:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(a, b, c, d, e, 70);
 8022522:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8022526:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 802252a:	9702      	str	r7, [sp, #8]
 802252c:	9f07      	ldr	r7, [sp, #28]
 802252e:	ea87 0902 	eor.w	r9, r7, r2
 8022532:	ea8a 0909 	eor.w	r9, sl, r9
 8022536:	ea84 0909 	eor.w	r9, r4, r9
 802253a:	ea4f 79f9 	mov.w	r9, r9, ror #31
 802253e:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8022542:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8022546:	9c02      	ldr	r4, [sp, #8]
 8022548:	444c      	add	r4, r9
 802254a:	eb04 67f8 	add.w	r7, r4, r8, ror #27
 802254e:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8022552:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8022556:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 802255a:	3756      	adds	r7, #86	@ 0x56
 802255c:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(e, a, b, c, d, 71);
 8022560:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8022564:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8022568:	9c08      	ldr	r4, [sp, #32]
 802256a:	ea84 0903 	eor.w	r9, r4, r3
 802256e:	9c03      	ldr	r4, [sp, #12]
 8022570:	ea84 0909 	eor.w	r9, r4, r9
 8022574:	ea8b 0909 	eor.w	r9, fp, r9
 8022578:	ea4f 79f9 	mov.w	r9, r9, ror #31
 802257c:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
 8022580:	444e      	add	r6, r9
 8022582:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022586:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 802258a:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 802258e:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8022592:	3656      	adds	r6, #86	@ 0x56
 8022594:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(d, e, a, b, c, 72);
 8022598:	ea87 05b8 	eor.w	r5, r7, r8, ror #2
 802259c:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 80225a0:	9c00      	ldr	r4, [sp, #0]
 80225a2:	ea84 0b00 	eor.w	fp, r4, r0
 80225a6:	9c04      	ldr	r4, [sp, #16]
 80225a8:	ea84 0b0b 	eor.w	fp, r4, fp
 80225ac:	ea8a 0b0b 	eor.w	fp, sl, fp
 80225b0:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80225b4:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 80225b8:	445d      	add	r5, fp
 80225ba:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 80225be:	f105 454a 	add.w	r5, r5, #3388997632	@ 0xca000000
 80225c2:	f505 05c5 	add.w	r5, r5, #6455296	@ 0x628000
 80225c6:	f505 4583 	add.w	r5, r5, #16768	@ 0x4180
 80225ca:	3556      	adds	r5, #86	@ 0x56
 80225cc:	eb05 05be 	add.w	r5, r5, lr, ror #2
  R4(c, d, e, a, b, 73);
 80225d0:	9602      	str	r6, [sp, #8]
 80225d2:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 80225d6:	ea8e 0eb8 	eor.w	lr, lr, r8, ror #2
 80225da:	9c01      	ldr	r4, [sp, #4]
 80225dc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80225de:	ea84 0a06 	eor.w	sl, r4, r6
 80225e2:	9c05      	ldr	r4, [sp, #20]
 80225e4:	ea84 0a0a 	eor.w	sl, r4, sl
 80225e8:	9c03      	ldr	r4, [sp, #12]
 80225ea:	ea84 0a0a 	eor.w	sl, r4, sl
 80225ee:	ea4f 7afa 	mov.w	sl, sl, ror #31
 80225f2:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
 80225f6:	44d6      	add	lr, sl
 80225f8:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 80225fc:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8022600:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8022604:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8022608:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 802260c:	eb0e 0ebc 	add.w	lr, lr, ip, ror #2
  R4(b, c, d, e, a, 74);
 8022610:	9e02      	ldr	r6, [sp, #8]
 8022612:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8022616:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 802261a:	ea81 0109 	eor.w	r1, r1, r9
 802261e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022620:	4071      	eors	r1, r6
 8022622:	9c04      	ldr	r4, [sp, #16]
 8022624:	4061      	eors	r1, r4
 8022626:	ea4f 71f1 	mov.w	r1, r1, ror #31
 802262a:	9118      	str	r1, [sp, #96]	@ 0x60
 802262c:	448c      	add	ip, r1
 802262e:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8022632:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8022636:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 802263a:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 802263e:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8022642:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
  R4(a, b, c, d, e, 75);
 8022646:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 802264a:	9c02      	ldr	r4, [sp, #8]
 802264c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8022650:	ea82 020b 	eor.w	r2, r2, fp
 8022654:	9c06      	ldr	r4, [sp, #24]
 8022656:	4062      	eors	r2, r4
 8022658:	9c05      	ldr	r4, [sp, #20]
 802265a:	4062      	eors	r2, r4
 802265c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022660:	9219      	str	r2, [sp, #100]	@ 0x64
 8022662:	4490      	add	r8, r2
 8022664:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8022668:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 802266c:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8022670:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8022674:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8022678:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(e, a, b, c, d, 76);
 802267c:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8022680:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8022684:	ea83 030a 	eor.w	r3, r3, sl
 8022688:	9c07      	ldr	r4, [sp, #28]
 802268a:	4063      	eors	r3, r4
 802268c:	4073      	eors	r3, r6
 802268e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022692:	931a      	str	r3, [sp, #104]	@ 0x68
 8022694:	441f      	add	r7, r3
 8022696:	eb07 67f8 	add.w	r7, r7, r8, ror #27
 802269a:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 802269e:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 80226a2:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 80226a6:	3756      	adds	r7, #86	@ 0x56
 80226a8:	9e02      	ldr	r6, [sp, #8]
 80226aa:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(d, e, a, b, c, 77);
 80226ae:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 80226b2:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 80226b6:	4048      	eors	r0, r1
 80226b8:	9908      	ldr	r1, [sp, #32]
 80226ba:	4048      	eors	r0, r1
 80226bc:	9c06      	ldr	r4, [sp, #24]
 80226be:	4060      	eors	r0, r4
 80226c0:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80226c4:	901b      	str	r0, [sp, #108]	@ 0x6c
 80226c6:	4406      	add	r6, r0
 80226c8:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 80226cc:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 80226d0:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 80226d4:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 80226d8:	3656      	adds	r6, #86	@ 0x56
 80226da:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(c, d, e, a, b, 78);
 80226de:	ea87 01b8 	eor.w	r1, r7, r8, ror #2
 80226e2:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 80226e6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80226e8:	406a      	eors	r2, r5
 80226ea:	9d00      	ldr	r5, [sp, #0]
 80226ec:	406a      	eors	r2, r5
 80226ee:	9c07      	ldr	r4, [sp, #28]
 80226f0:	4062      	eors	r2, r4
 80226f2:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80226f6:	921c      	str	r2, [sp, #112]	@ 0x70
 80226f8:	4411      	add	r1, r2
 80226fa:	eb01 61f6 	add.w	r1, r1, r6, ror #27
 80226fe:	f101 414a 	add.w	r1, r1, #3388997632	@ 0xca000000
 8022702:	f501 01c5 	add.w	r1, r1, #6455296	@ 0x628000
 8022706:	f501 4183 	add.w	r1, r1, #16768	@ 0x4180
 802270a:	3156      	adds	r1, #86	@ 0x56
 802270c:	eb01 01be 	add.w	r1, r1, lr, ror #2
  R4(b, c, d, e, a, 79);
 8022710:	ea86 02b7 	eor.w	r2, r6, r7, ror #2
 8022714:	ea82 02b8 	eor.w	r2, r2, r8, ror #2
 8022718:	ea89 0903 	eor.w	r9, r9, r3
 802271c:	9b01      	ldr	r3, [sp, #4]
 802271e:	ea83 0909 	eor.w	r9, r3, r9
 8022722:	9c08      	ldr	r4, [sp, #32]
 8022724:	ea84 0309 	eor.w	r3, r4, r9
 8022728:	ea4f 73f3 	mov.w	r3, r3, ror #31
 802272c:	931d      	str	r3, [sp, #116]	@ 0x74
 802272e:	4413      	add	r3, r2
 8022730:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8022734:	f103 434a 	add.w	r3, r3, #3388997632	@ 0xca000000
 8022738:	f503 03c5 	add.w	r3, r3, #6455296	@ 0x628000
 802273c:	f503 4383 	add.w	r3, r3, #16768	@ 0x4180
 8022740:	3356      	adds	r3, #86	@ 0x56
 8022742:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  state[0] += a;
 8022746:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022748:	6802      	ldr	r2, [r0, #0]
 802274a:	441a      	add	r2, r3
 802274c:	6002      	str	r2, [r0, #0]
  state[1] += b;
 802274e:	6843      	ldr	r3, [r0, #4]
 8022750:	440b      	add	r3, r1
 8022752:	6043      	str	r3, [r0, #4]
  state[2] += c;
 8022754:	6883      	ldr	r3, [r0, #8]
 8022756:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 802275a:	6083      	str	r3, [r0, #8]
  state[3] += d;
 802275c:	68c3      	ldr	r3, [r0, #12]
 802275e:	eb03 03b7 	add.w	r3, r3, r7, ror #2
 8022762:	60c3      	str	r3, [r0, #12]
  state[4] += e;
 8022764:	6903      	ldr	r3, [r0, #16]
 8022766:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 802276a:	6103      	str	r3, [r0, #16]
  memset(block, 0, sizeof(block));
 802276c:	2240      	movs	r2, #64	@ 0x40
 802276e:	2100      	movs	r1, #0
 8022770:	a80e      	add	r0, sp, #56	@ 0x38
 8022772:	f00a f92d 	bl	802c9d0 <memset>
}
 8022776:	b01f      	add	sp, #124	@ 0x7c
 8022778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802277c:	ca62c1d6 	.word	0xca62c1d6

08022780 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8022780:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8022782:	fb01 f400 	mul.w	r4, r1, r0
 8022786:	4620      	mov	r0, r4
 8022788:	f7f8 f8ee 	bl	801a968 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 802278c:	4605      	mov	r5, r0
 802278e:	b118      	cbz	r0, 8022798 <mg_calloc+0x18>
 8022790:	4622      	mov	r2, r4
 8022792:	2100      	movs	r1, #0
 8022794:	f00a f91c 	bl	802c9d0 <memset>
}
 8022798:	4628      	mov	r0, r5
 802279a:	bd38      	pop	{r3, r4, r5, pc}

0802279c <mg_print_esc>:
size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 802279c:	b570      	push	{r4, r5, r6, lr}
 802279e:	4605      	mov	r5, r0
 80227a0:	460e      	mov	r6, r1
  size_t len = (size_t) va_arg(*ap, int);
 80227a2:	6811      	ldr	r1, [r2, #0]
 80227a4:	1d0c      	adds	r4, r1, #4
 80227a6:	6014      	str	r4, [r2, #0]
 80227a8:	680b      	ldr	r3, [r1, #0]
  char *p = va_arg(*ap, char *);
 80227aa:	f101 0408 	add.w	r4, r1, #8
 80227ae:	6014      	str	r4, [r2, #0]
 80227b0:	684c      	ldr	r4, [r1, #4]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 80227b2:	b923      	cbnz	r3, 80227be <mg_print_esc+0x22>
 80227b4:	b11c      	cbz	r4, 80227be <mg_print_esc+0x22>
 80227b6:	4620      	mov	r0, r4
 80227b8:	f7ed fd72 	bl	80102a0 <strlen>
 80227bc:	4603      	mov	r3, r0
  return qcpy(out, arg, p, len);
 80227be:	4622      	mov	r2, r4
 80227c0:	4631      	mov	r1, r6
 80227c2:	4628      	mov	r0, r5
 80227c4:	f7fe fd65 	bl	8021292 <qcpy>
}
 80227c8:	bd70      	pop	{r4, r5, r6, pc}

080227ca <getpeer>:
                                     bool lsn) {
 80227ca:	b570      	push	{r4, r5, r6, lr}
 80227cc:	460d      	mov	r5, r1
 80227ce:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 80227d0:	6804      	ldr	r4, [r0, #0]
 80227d2:	e000      	b.n	80227d6 <getpeer+0xc>
 80227d4:	6824      	ldr	r4, [r4, #0]
 80227d6:	b364      	cbz	r4, 8022832 <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 80227d8:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80227dc:	f013 0f10 	tst.w	r3, #16
 80227e0:	d008      	beq.n	80227f4 <getpeer+0x2a>
 80227e2:	69a8      	ldr	r0, [r5, #24]
 80227e4:	b130      	cbz	r0, 80227f4 <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 80227e6:	2204      	movs	r2, #4
 80227e8:	f104 011c 	add.w	r1, r4, #28
 80227ec:	300e      	adds	r0, #14
 80227ee:	f00a f85b 	bl	802c8a8 <memcmp>
    if (c->is_arplooking && pkt->arp &&
 80227f2:	b1f0      	cbz	r0, 8022832 <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 80227f4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80227f8:	f013 0301 	ands.w	r3, r3, #1
 80227fc:	d005      	beq.n	802280a <getpeer+0x40>
 80227fe:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8022800:	b11a      	cbz	r2, 802280a <getpeer+0x40>
 8022802:	8b21      	ldrh	r1, [r4, #24]
 8022804:	8852      	ldrh	r2, [r2, #2]
 8022806:	4291      	cmp	r1, r2
 8022808:	d013      	beq.n	8022832 <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 802280a:	2b00      	cmp	r3, #0
 802280c:	d1e2      	bne.n	80227d4 <getpeer+0xa>
 802280e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8022810:	2b00      	cmp	r3, #0
 8022812:	d0df      	beq.n	80227d4 <getpeer+0xa>
 8022814:	8b21      	ldrh	r1, [r4, #24]
 8022816:	885a      	ldrh	r2, [r3, #2]
 8022818:	4291      	cmp	r1, r2
 802281a:	d1db      	bne.n	80227d4 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 802281c:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 8022820:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8022824:	42b2      	cmp	r2, r6
 8022826:	d1d5      	bne.n	80227d4 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8022828:	b91e      	cbnz	r6, 8022832 <getpeer+0x68>
 802282a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 802282c:	881b      	ldrh	r3, [r3, #0]
 802282e:	429a      	cmp	r2, r3
 8022830:	d1d0      	bne.n	80227d4 <getpeer+0xa>
}
 8022832:	4620      	mov	r0, r4
 8022834:	bd70      	pop	{r4, r5, r6, pc}

08022836 <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 8022836:	b508      	push	{r3, lr}
  putchar(c);
 8022838:	f009 fb24 	bl	802be84 <putchar>
}
 802283c:	bd08      	pop	{r3, pc}

0802283e <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 802283e:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8022842:	6802      	ldr	r2, [r0, #0]
 8022844:	6883      	ldr	r3, [r0, #8]
}
 8022846:	58d0      	ldr	r0, [r2, r3]
 8022848:	4770      	bx	lr
	...

0802284c <parse_net>:
static int parse_net(const char *spec, uint32_t *net, uint32_t *mask) {
 802284c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022850:	b08b      	sub	sp, #44	@ 0x2c
 8022852:	4604      	mov	r4, r0
 8022854:	460e      	mov	r6, r1
 8022856:	4615      	mov	r5, r2
  int n, a, b, c, d, slash = 32, len = 0;
 8022858:	2320      	movs	r3, #32
 802285a:	9304      	str	r3, [sp, #16]
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 802285c:	ab09      	add	r3, sp, #36	@ 0x24
 802285e:	9303      	str	r3, [sp, #12]
 8022860:	ab04      	add	r3, sp, #16
 8022862:	9302      	str	r3, [sp, #8]
 8022864:	ab05      	add	r3, sp, #20
 8022866:	9301      	str	r3, [sp, #4]
 8022868:	ab06      	add	r3, sp, #24
 802286a:	9300      	str	r3, [sp, #0]
 802286c:	ab07      	add	r3, sp, #28
 802286e:	aa08      	add	r2, sp, #32
 8022870:	4928      	ldr	r1, [pc, #160]	@ (8022914 <parse_net+0xc8>)
 8022872:	f009 fd0b 	bl	802c28c <sscanf>
 8022876:	2805      	cmp	r0, #5
 8022878:	d133      	bne.n	80228e2 <parse_net+0x96>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 802287a:	9c08      	ldr	r4, [sp, #32]
 802287c:	4620      	mov	r0, r4
 802287e:	f7fe fd6e 	bl	802135e <isbyte>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8022882:	4603      	mov	r3, r0
 8022884:	2800      	cmp	r0, #0
 8022886:	d03b      	beq.n	8022900 <parse_net+0xb4>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 8022888:	9f07      	ldr	r7, [sp, #28]
 802288a:	4638      	mov	r0, r7
 802288c:	f7fe fd67 	bl	802135e <isbyte>
 8022890:	4603      	mov	r3, r0
 8022892:	2800      	cmp	r0, #0
 8022894:	d034      	beq.n	8022900 <parse_net+0xb4>
 8022896:	f8dd 9018 	ldr.w	r9, [sp, #24]
 802289a:	4648      	mov	r0, r9
 802289c:	f7fe fd5f 	bl	802135e <isbyte>
 80228a0:	4603      	mov	r3, r0
 80228a2:	b368      	cbz	r0, 8022900 <parse_net+0xb4>
 80228a4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80228a8:	4640      	mov	r0, r8
 80228aa:	f7fe fd58 	bl	802135e <isbyte>
 80228ae:	4603      	mov	r3, r0
 80228b0:	b330      	cbz	r0, 8022900 <parse_net+0xb4>
 80228b2:	9b04      	ldr	r3, [sp, #16]
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	db29      	blt.n	802290c <parse_net+0xc0>
 80228b8:	2b20      	cmp	r3, #32
 80228ba:	dc29      	bgt.n	8022910 <parse_net+0xc4>
    len = n;
 80228bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    *net = ((uint32_t) a << 24) | ((uint32_t) b << 16) | ((uint32_t) c << 8) |
 80228be:	043a      	lsls	r2, r7, #16
 80228c0:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80228c4:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 80228c8:	ea42 0208 	orr.w	r2, r2, r8
 80228cc:	6032      	str	r2, [r6, #0]
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 80228ce:	9a04      	ldr	r2, [sp, #16]
 80228d0:	b1d2      	cbz	r2, 8022908 <parse_net+0xbc>
 80228d2:	f1c2 0220 	rsb	r2, r2, #32
 80228d6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80228da:	fa01 f202 	lsl.w	r2, r1, r2
 80228de:	602a      	str	r2, [r5, #0]
 80228e0:	e00e      	b.n	8022900 <parse_net+0xb4>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 80228e2:	ab09      	add	r3, sp, #36	@ 0x24
 80228e4:	9302      	str	r3, [sp, #8]
 80228e6:	ab05      	add	r3, sp, #20
 80228e8:	9301      	str	r3, [sp, #4]
 80228ea:	ab06      	add	r3, sp, #24
 80228ec:	9300      	str	r3, [sp, #0]
 80228ee:	ab07      	add	r3, sp, #28
 80228f0:	aa08      	add	r2, sp, #32
 80228f2:	4909      	ldr	r1, [pc, #36]	@ (8022918 <parse_net+0xcc>)
 80228f4:	4620      	mov	r0, r4
 80228f6:	f009 fcc9 	bl	802c28c <sscanf>
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 80228fa:	2804      	cmp	r0, #4
 80228fc:	d0bd      	beq.n	802287a <parse_net+0x2e>
  int n, a, b, c, d, slash = 32, len = 0;
 80228fe:	2300      	movs	r3, #0
}
 8022900:	4618      	mov	r0, r3
 8022902:	b00b      	add	sp, #44	@ 0x2c
 8022904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 8022908:	2200      	movs	r2, #0
 802290a:	e7e8      	b.n	80228de <parse_net+0x92>
  int n, a, b, c, d, slash = 32, len = 0;
 802290c:	2300      	movs	r3, #0
 802290e:	e7f7      	b.n	8022900 <parse_net+0xb4>
 8022910:	2300      	movs	r3, #0
  return len;
 8022912:	e7f5      	b.n	8022900 <parse_net+0xb4>
 8022914:	0803a3dc 	.word	0x0803a3dc
 8022918:	0803a3f0 	.word	0x0803a3f0

0802291c <mg_base64_decode>:
size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 802291c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022920:	4691      	mov	r9, r2
 8022922:	469b      	mov	fp, r3
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8022924:	4604      	mov	r4, r0
 8022926:	b150      	cbz	r0, 802293e <mg_base64_decode+0x22>
 8022928:	eb00 0a01 	add.w	sl, r0, r1
  if (dl < n / 4 * 3 + 1) goto fail;
 802292c:	0889      	lsrs	r1, r1, #2
 802292e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022932:	3101      	adds	r1, #1
 8022934:	4559      	cmp	r1, fp
 8022936:	d847      	bhi.n	80229c8 <mg_base64_decode+0xac>
  size_t len = 0;
 8022938:	f04f 0800 	mov.w	r8, #0
 802293c:	e003      	b.n	8022946 <mg_base64_decode+0x2a>
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 802293e:	4682      	mov	sl, r0
 8022940:	e7f4      	b.n	802292c <mg_base64_decode+0x10>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8022942:	4690      	mov	r8, r2
    src += 4;
 8022944:	3404      	adds	r4, #4
  while (src != NULL && src + 3 < end) {
 8022946:	2c00      	cmp	r4, #0
 8022948:	d03a      	beq.n	80229c0 <mg_base64_decode+0xa4>
 802294a:	1ce3      	adds	r3, r4, #3
 802294c:	4553      	cmp	r3, sl
 802294e:	d237      	bcs.n	80229c0 <mg_base64_decode+0xa4>
    int a = mg_base64_decode_single(src[0]),
 8022950:	7820      	ldrb	r0, [r4, #0]
 8022952:	f7fd f8a7 	bl	801faa4 <mg_base64_decode_single>
 8022956:	4606      	mov	r6, r0
        b = mg_base64_decode_single(src[1]),
 8022958:	7860      	ldrb	r0, [r4, #1]
 802295a:	f7fd f8a3 	bl	801faa4 <mg_base64_decode_single>
 802295e:	4605      	mov	r5, r0
        c = mg_base64_decode_single(src[2]),
 8022960:	78a0      	ldrb	r0, [r4, #2]
 8022962:	f7fd f89f 	bl	801faa4 <mg_base64_decode_single>
 8022966:	4607      	mov	r7, r0
        d = mg_base64_decode_single(src[3]);
 8022968:	78e0      	ldrb	r0, [r4, #3]
 802296a:	f7fd f89b 	bl	801faa4 <mg_base64_decode_single>
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 802296e:	2e40      	cmp	r6, #64	@ 0x40
 8022970:	d02a      	beq.n	80229c8 <mg_base64_decode+0xac>
 8022972:	2e00      	cmp	r6, #0
 8022974:	db28      	blt.n	80229c8 <mg_base64_decode+0xac>
 8022976:	2d40      	cmp	r5, #64	@ 0x40
 8022978:	d026      	beq.n	80229c8 <mg_base64_decode+0xac>
 802297a:	2d00      	cmp	r5, #0
 802297c:	db24      	blt.n	80229c8 <mg_base64_decode+0xac>
 802297e:	2f00      	cmp	r7, #0
 8022980:	db22      	blt.n	80229c8 <mg_base64_decode+0xac>
 8022982:	2800      	cmp	r0, #0
 8022984:	db20      	blt.n	80229c8 <mg_base64_decode+0xac>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8022986:	112b      	asrs	r3, r5, #4
 8022988:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
 802298c:	f108 0201 	add.w	r2, r8, #1
 8022990:	f809 3008 	strb.w	r3, [r9, r8]
    if (src[2] != '=') {
 8022994:	78a3      	ldrb	r3, [r4, #2]
 8022996:	2b3d      	cmp	r3, #61	@ 0x3d
 8022998:	d0d3      	beq.n	8022942 <mg_base64_decode+0x26>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 802299a:	10bb      	asrs	r3, r7, #2
 802299c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80229a0:	f108 0102 	add.w	r1, r8, #2
 80229a4:	f809 3002 	strb.w	r3, [r9, r2]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80229a8:	78e3      	ldrb	r3, [r4, #3]
 80229aa:	2b3d      	cmp	r3, #61	@ 0x3d
 80229ac:	d006      	beq.n	80229bc <mg_base64_decode+0xa0>
 80229ae:	ea40 1087 	orr.w	r0, r0, r7, lsl #6
 80229b2:	f108 0803 	add.w	r8, r8, #3
 80229b6:	f809 0001 	strb.w	r0, [r9, r1]
 80229ba:	e7c3      	b.n	8022944 <mg_base64_decode+0x28>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80229bc:	4688      	mov	r8, r1
 80229be:	e7c1      	b.n	8022944 <mg_base64_decode+0x28>
  dst[len] = '\0';
 80229c0:	2300      	movs	r3, #0
 80229c2:	f809 3008 	strb.w	r3, [r9, r8]
  return len;
 80229c6:	e006      	b.n	80229d6 <mg_base64_decode+0xba>
  if (dl > 0) dst[0] = '\0';
 80229c8:	f1bb 0f00 	cmp.w	fp, #0
 80229cc:	d006      	beq.n	80229dc <mg_base64_decode+0xc0>
 80229ce:	f04f 0800 	mov.w	r8, #0
 80229d2:	f889 8000 	strb.w	r8, [r9]
}
 80229d6:	4640      	mov	r0, r8
 80229d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 0;
 80229dc:	46d8      	mov	r8, fp
 80229de:	e7fa      	b.n	80229d6 <mg_base64_decode+0xba>

080229e0 <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 80229e0:	b570      	push	{r4, r5, r6, lr}
 80229e2:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80229e4:	6843      	ldr	r3, [r0, #4]
 80229e6:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 80229ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80229ec:	e000      	b.n	80229f0 <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 80229ee:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 80229f0:	b139      	cbz	r1, 8022a02 <mg_resolve_cancel+0x22>
    tmp = d->next;
 80229f2:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 80229f4:	684b      	ldr	r3, [r1, #4]
 80229f6:	42ab      	cmp	r3, r5
 80229f8:	d1f9      	bne.n	80229ee <mg_resolve_cancel+0xe>
 80229fa:	4630      	mov	r0, r6
 80229fc:	f7fe fe12 	bl	8021624 <mg_dns_free>
 8022a00:	e7f5      	b.n	80229ee <mg_resolve_cancel+0xe>
}
 8022a02:	bd70      	pop	{r4, r5, r6, pc}

08022a04 <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 8022a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a06:	b083      	sub	sp, #12
 8022a08:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8022a0a:	1886      	adds	r6, r0, r2
 8022a0c:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 8022a0e:	f04f 0c00 	mov.w	ip, #0
 8022a12:	f8c4 c000 	str.w	ip, [r4]
 8022a16:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8022a1a:	290b      	cmp	r1, #11
 8022a1c:	d934      	bls.n	8022a88 <mg_dns_parse_rr+0x84>
 8022a1e:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 8022a20:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8022a24:	d833      	bhi.n	8022a8e <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 8022a26:	42be      	cmp	r6, r7
 8022a28:	d301      	bcc.n	8022a2e <mg_dns_parse_rr+0x2a>
 8022a2a:	2000      	movs	r0, #0
 8022a2c:	e02d      	b.n	8022a8a <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8022a2e:	4663      	mov	r3, ip
 8022a30:	f8cd c000 	str.w	ip, [sp]
 8022a34:	f7fe fed5 	bl	80217e2 <mg_dns_parse_name>
 8022a38:	b283      	uxth	r3, r0
 8022a3a:	8023      	strh	r3, [r4, #0]
 8022a3c:	b34b      	cbz	r3, 8022a92 <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 8022a3e:	3304      	adds	r3, #4
 8022a40:	441e      	add	r6, r3
  if (s > e) return 0;
 8022a42:	42b7      	cmp	r7, r6
 8022a44:	d327      	bcc.n	8022a96 <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8022a46:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 8022a4a:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 8022a4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022a52:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8022a54:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 8022a58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022a5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022a60:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8022a62:	b975      	cbnz	r5, 8022a82 <mg_dns_parse_rr+0x7e>
  s += 6;
 8022a64:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 8022a66:	429f      	cmp	r7, r3
 8022a68:	d317      	bcc.n	8022a9a <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8022a6a:	7931      	ldrb	r1, [r6, #4]
 8022a6c:	7972      	ldrb	r2, [r6, #5]
 8022a6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8022a72:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 8022a74:	4413      	add	r3, r2
 8022a76:	42bb      	cmp	r3, r7
 8022a78:	d811      	bhi.n	8022a9e <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 8022a7a:	fa12 f080 	uxtah	r0, r2, r0
 8022a7e:	300a      	adds	r0, #10
 8022a80:	e003      	b.n	8022a8a <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 8022a82:	b280      	uxth	r0, r0
 8022a84:	3004      	adds	r0, #4
 8022a86:	e000      	b.n	8022a8a <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8022a88:	2000      	movs	r0, #0
}
 8022a8a:	b003      	add	sp, #12
 8022a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 8022a8e:	2000      	movs	r0, #0
 8022a90:	e7fb      	b.n	8022a8a <mg_dns_parse_rr+0x86>
    return 0;
 8022a92:	2000      	movs	r0, #0
 8022a94:	e7f9      	b.n	8022a8a <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 8022a96:	2000      	movs	r0, #0
 8022a98:	e7f7      	b.n	8022a8a <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 8022a9a:	2000      	movs	r0, #0
 8022a9c:	e7f5      	b.n	8022a8a <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 8022a9e:	2000      	movs	r0, #0
 8022aa0:	e7f3      	b.n	8022a8a <mg_dns_parse_rr+0x86>

08022aa2 <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8022aa2:	b570      	push	{r4, r5, r6, lr}
 8022aa4:	4604      	mov	r4, r0
 8022aa6:	460d      	mov	r5, r1
 8022aa8:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8022aaa:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8022aae:	b103      	cbz	r3, 8022ab2 <mg_call+0x10>
 8022ab0:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8022ab2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8022ab4:	b11b      	cbz	r3, 8022abe <mg_call+0x1c>
 8022ab6:	4632      	mov	r2, r6
 8022ab8:	4629      	mov	r1, r5
 8022aba:	4620      	mov	r0, r4
 8022abc:	4798      	blx	r3
}
 8022abe:	bd70      	pop	{r4, r5, r6, pc}

08022ac0 <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8022ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ac2:	4604      	mov	r4, r0
 8022ac4:	460d      	mov	r5, r1
 8022ac6:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8022ac8:	2108      	movs	r1, #8
 8022aca:	2001      	movs	r0, #1
 8022acc:	f7ff fe58 	bl	8022780 <mg_calloc>
  if (fd != NULL) {
 8022ad0:	4607      	mov	r7, r0
 8022ad2:	b138      	cbz	r0, 8022ae4 <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 8022ad4:	68a3      	ldr	r3, [r4, #8]
 8022ad6:	4631      	mov	r1, r6
 8022ad8:	4628      	mov	r0, r5
 8022ada:	4798      	blx	r3
 8022adc:	4605      	mov	r5, r0
 8022ade:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 8022ae0:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 8022ae2:	b108      	cbz	r0, 8022ae8 <mg_fs_open+0x28>
}
 8022ae4:	4638      	mov	r0, r7
 8022ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 8022ae8:	4638      	mov	r0, r7
 8022aea:	f7f7 ffbf 	bl	801aa6c <vPortFree>
      fd = NULL;
 8022aee:	462f      	mov	r7, r5
  return fd;
 8022af0:	e7f8      	b.n	8022ae4 <mg_fs_open+0x24>

08022af2 <mg_fs_close>:
  if (fd != NULL) {
 8022af2:	b148      	cbz	r0, 8022b08 <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 8022af4:	b510      	push	{r4, lr}
 8022af6:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 8022af8:	6843      	ldr	r3, [r0, #4]
 8022afa:	68db      	ldr	r3, [r3, #12]
 8022afc:	6800      	ldr	r0, [r0, #0]
 8022afe:	4798      	blx	r3
    free(fd);
 8022b00:	4620      	mov	r0, r4
 8022b02:	f7f7 ffb3 	bl	801aa6c <vPortFree>
}
 8022b06:	bd10      	pop	{r4, pc}
 8022b08:	4770      	bx	lr
	...

08022b0c <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 8022b0c:	b510      	push	{r4, lr}
 8022b0e:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8022b10:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8022b14:	f7ff ffed 	bl	8022af2 <mg_fs_close>
  c->pfn_data = NULL;
 8022b18:	2200      	movs	r2, #0
 8022b1a:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 8022b1e:	4b05      	ldr	r3, [pc, #20]	@ (8022b34 <restore_http_cb+0x28>)
 8022b20:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 8022b24:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8022b28:	f362 13c7 	bfi	r3, r2, #7, #1
 8022b2c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8022b30:	bd10      	pop	{r4, pc}
 8022b32:	bf00      	nop
 8022b34:	0802645d 	.word	0x0802645d

08022b38 <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8022b38:	b470      	push	{r4, r5, r6}
 8022b3a:	b083      	sub	sp, #12
 8022b3c:	ab02      	add	r3, sp, #8
 8022b3e:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8022b42:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8022b44:	e000      	b.n	8022b48 <mg_to_size_t+0x10>
 8022b46:	3301      	adds	r3, #1
 8022b48:	9c01      	ldr	r4, [sp, #4]
 8022b4a:	429c      	cmp	r4, r3
 8022b4c:	d905      	bls.n	8022b5a <mg_to_size_t+0x22>
 8022b4e:	9900      	ldr	r1, [sp, #0]
 8022b50:	5cc9      	ldrb	r1, [r1, r3]
 8022b52:	2920      	cmp	r1, #32
 8022b54:	d0f7      	beq.n	8022b46 <mg_to_size_t+0xe>
 8022b56:	2909      	cmp	r1, #9
 8022b58:	d0f5      	beq.n	8022b46 <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 8022b5a:	429c      	cmp	r4, r3
 8022b5c:	d906      	bls.n	8022b6c <mg_to_size_t+0x34>
 8022b5e:	9900      	ldr	r1, [sp, #0]
 8022b60:	5cc9      	ldrb	r1, [r1, r3]
 8022b62:	292d      	cmp	r1, #45	@ 0x2d
 8022b64:	d02c      	beq.n	8022bc0 <mg_to_size_t+0x88>
 8022b66:	2500      	movs	r5, #0
 8022b68:	4628      	mov	r0, r5
 8022b6a:	e001      	b.n	8022b70 <mg_to_size_t+0x38>
 8022b6c:	2500      	movs	r5, #0
 8022b6e:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8022b70:	429c      	cmp	r4, r3
 8022b72:	d917      	bls.n	8022ba4 <mg_to_size_t+0x6c>
 8022b74:	9900      	ldr	r1, [sp, #0]
 8022b76:	5cc9      	ldrb	r1, [r1, r3]
 8022b78:	292f      	cmp	r1, #47	@ 0x2f
 8022b7a:	d913      	bls.n	8022ba4 <mg_to_size_t+0x6c>
 8022b7c:	2939      	cmp	r1, #57	@ 0x39
 8022b7e:	d811      	bhi.n	8022ba4 <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 8022b80:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 8022b82:	4e15      	ldr	r6, [pc, #84]	@ (8022bd8 <mg_to_size_t+0xa0>)
 8022b84:	42b0      	cmp	r0, r6
 8022b86:	d81d      	bhi.n	8022bc4 <mg_to_size_t+0x8c>
    result *= 10;
 8022b88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8022b8c:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 8022b90:	43ce      	mvns	r6, r1
 8022b92:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 8022b96:	d317      	bcc.n	8022bc8 <mg_to_size_t+0x90>
    result += digit;
 8022b98:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 8022b9c:	3301      	adds	r3, #1
 8022b9e:	3501      	adds	r5, #1
 8022ba0:	e7e6      	b.n	8022b70 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8022ba2:	3301      	adds	r3, #1
 8022ba4:	429c      	cmp	r4, r3
 8022ba6:	d905      	bls.n	8022bb4 <mg_to_size_t+0x7c>
 8022ba8:	9900      	ldr	r1, [sp, #0]
 8022baa:	5cc9      	ldrb	r1, [r1, r3]
 8022bac:	2920      	cmp	r1, #32
 8022bae:	d0f8      	beq.n	8022ba2 <mg_to_size_t+0x6a>
 8022bb0:	2909      	cmp	r1, #9
 8022bb2:	d0f6      	beq.n	8022ba2 <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8022bb4:	b155      	cbz	r5, 8022bcc <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 8022bb6:	429c      	cmp	r4, r3
 8022bb8:	d10c      	bne.n	8022bd4 <mg_to_size_t+0x9c>
  *val = (size_t) result;
 8022bba:	6010      	str	r0, [r2, #0]
  return true;
 8022bbc:	2001      	movs	r0, #1
 8022bbe:	e006      	b.n	8022bce <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 8022bc0:	2000      	movs	r0, #0
 8022bc2:	e004      	b.n	8022bce <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 8022bc4:	2000      	movs	r0, #0
 8022bc6:	e002      	b.n	8022bce <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 8022bc8:	2000      	movs	r0, #0
 8022bca:	e000      	b.n	8022bce <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8022bcc:	2000      	movs	r0, #0
}
 8022bce:	b003      	add	sp, #12
 8022bd0:	bc70      	pop	{r4, r5, r6}
 8022bd2:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 8022bd4:	2000      	movs	r0, #0
 8022bd6:	e7fa      	b.n	8022bce <mg_to_size_t+0x96>
 8022bd8:	19999999 	.word	0x19999999

08022bdc <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8022bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022bde:	4606      	mov	r6, r0
 8022be0:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 8022be2:	2400      	movs	r4, #0
 8022be4:	e007      	b.n	8022bf6 <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8022be6:	1933      	adds	r3, r6, r4
 8022be8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022bec:	2b0a      	cmp	r3, #10
 8022bee:	d10d      	bne.n	8022c0c <mg_http_get_request_len+0x30>
      return (int) i + 1;
 8022bf0:	1c60      	adds	r0, r4, #1
 8022bf2:	e01b      	b.n	8022c2c <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 8022bf4:	3401      	adds	r4, #1
 8022bf6:	42bc      	cmp	r4, r7
 8022bf8:	d217      	bcs.n	8022c2a <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 8022bfa:	5d35      	ldrb	r5, [r6, r4]
 8022bfc:	4628      	mov	r0, r5
 8022bfe:	f7fd f8d6 	bl	801fdae <isok>
 8022c02:	b1a0      	cbz	r0, 8022c2e <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8022c04:	2c00      	cmp	r4, #0
 8022c06:	d0f5      	beq.n	8022bf4 <mg_http_get_request_len+0x18>
 8022c08:	2d0a      	cmp	r5, #10
 8022c0a:	d0ec      	beq.n	8022be6 <mg_http_get_request_len+0xa>
 8022c0c:	2c03      	cmp	r4, #3
 8022c0e:	d9f1      	bls.n	8022bf4 <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8022c10:	2d0a      	cmp	r5, #10
 8022c12:	d1ef      	bne.n	8022bf4 <mg_http_get_request_len+0x18>
 8022c14:	1933      	adds	r3, r6, r4
 8022c16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022c1a:	2b0d      	cmp	r3, #13
 8022c1c:	d1ea      	bne.n	8022bf4 <mg_http_get_request_len+0x18>
 8022c1e:	1933      	adds	r3, r6, r4
 8022c20:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8022c24:	2b0a      	cmp	r3, #10
 8022c26:	d1e5      	bne.n	8022bf4 <mg_http_get_request_len+0x18>
 8022c28:	e7e2      	b.n	8022bf0 <mg_http_get_request_len+0x14>
  return 0;
 8022c2a:	2000      	movs	r0, #0
}
 8022c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 8022c2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022c32:	e7fb      	b.n	8022c2c <mg_http_get_request_len+0x50>

08022c34 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8022c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c38:	4605      	mov	r5, r0
 8022c3a:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8022c3c:	4608      	mov	r0, r1
 8022c3e:	f7ed fb2f 	bl	80102a0 <strlen>
 8022c42:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8022c44:	2400      	movs	r4, #0
 8022c46:	e000      	b.n	8022c4a <mg_http_get_header+0x16>
 8022c48:	3401      	adds	r4, #1
 8022c4a:	2c1d      	cmp	r4, #29
 8022c4c:	d819      	bhi.n	8022c82 <mg_http_get_header+0x4e>
 8022c4e:	1ca3      	adds	r3, r4, #2
 8022c50:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8022c54:	685a      	ldr	r2, [r3, #4]
 8022c56:	b17a      	cbz	r2, 8022c78 <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8022c58:	0123      	lsls	r3, r4, #4
 8022c5a:	3328      	adds	r3, #40	@ 0x28
 8022c5c:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8022c60:	42b2      	cmp	r2, r6
 8022c62:	d1f1      	bne.n	8022c48 <mg_http_get_header+0x14>
 8022c64:	1ca3      	adds	r3, r4, #2
 8022c66:	011b      	lsls	r3, r3, #4
 8022c68:	4632      	mov	r2, r6
 8022c6a:	4639      	mov	r1, r7
 8022c6c:	58e8      	ldr	r0, [r5, r3]
 8022c6e:	f7fd f869 	bl	801fd44 <mg_ncasecmp>
 8022c72:	2800      	cmp	r0, #0
 8022c74:	d1e8      	bne.n	8022c48 <mg_http_get_header+0x14>
 8022c76:	e001      	b.n	8022c7c <mg_http_get_header+0x48>
  return NULL;
 8022c78:	f04f 0800 	mov.w	r8, #0
}
 8022c7c:	4640      	mov	r0, r8
 8022c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8022c82:	f04f 0800 	mov.w	r8, #0
 8022c86:	e7f9      	b.n	8022c7c <mg_http_get_header+0x48>

08022c88 <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 8022c88:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 8022c8a:	6880      	ldr	r0, [r0, #8]
 8022c8c:	f007 f96c 	bl	8029f68 <atoi>
}
 8022c90:	bd08      	pop	{r3, pc}
	...

08022c94 <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8022c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c98:	b095      	sub	sp, #84	@ 0x54
 8022c9a:	ac08      	add	r4, sp, #32
 8022c9c:	e884 0003 	stmia.w	r4, {r0, r1}
 8022ca0:	9202      	str	r2, [sp, #8]
  const char *s = json.buf;
 8022ca2:	4606      	mov	r6, r0
  int len = (int) json.len;
 8022ca4:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 8022ca6:	469a      	mov	sl, r3
 8022ca8:	b113      	cbz	r3, 8022cb0 <mg_json_get+0x1c>
 8022caa:	2300      	movs	r3, #0
 8022cac:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 8022cb0:	9b02      	ldr	r3, [sp, #8]
 8022cb2:	781b      	ldrb	r3, [r3, #0]
 8022cb4:	2b24      	cmp	r3, #36	@ 0x24
 8022cb6:	f040 8232 	bne.w	802311e <mg_json_get+0x48a>
  int ci = -1, ei = -1;  // Current and expected index in array
 8022cba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022cbe:	9303      	str	r3, [sp, #12]
 8022cc0:	9301      	str	r3, [sp, #4]
  int pos = 1;           // Current position in `path`
 8022cc2:	2301      	movs	r3, #1
 8022cc4:	9304      	str	r3, [sp, #16]
  int ed = 0;            // Expected depth
 8022cc6:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 8022cca:	465f      	mov	r7, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 8022ccc:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 8022cd0:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8022cd2:	465b      	mov	r3, fp
 8022cd4:	f8cd a018 	str.w	sl, [sp, #24]
 8022cd8:	e190      	b.n	8022ffc <mg_json_get+0x368>
        if (depth == ed) j = i;
 8022cda:	455f      	cmp	r7, fp
 8022cdc:	d029      	beq.n	8022d32 <mg_json_get+0x9e>
        if (c == '{') {
 8022cde:	2d7b      	cmp	r5, #123	@ 0x7b
 8022ce0:	d029      	beq.n	8022d36 <mg_json_get+0xa2>
        } else if (c == '[') {
 8022ce2:	2d5b      	cmp	r5, #91	@ 0x5b
 8022ce4:	d047      	beq.n	8022d76 <mg_json_get+0xe2>
        } else if (c == ']' && depth > 0) {  // Empty array
 8022ce6:	2d5d      	cmp	r5, #93	@ 0x5d
 8022ce8:	d07a      	beq.n	8022de0 <mg_json_get+0x14c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8022cea:	2d74      	cmp	r5, #116	@ 0x74
 8022cec:	f000 80a4 	beq.w	8022e38 <mg_json_get+0x1a4>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8022cf0:	2d6e      	cmp	r5, #110	@ 0x6e
 8022cf2:	f000 80b0 	beq.w	8022e56 <mg_json_get+0x1c2>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8022cf6:	2d66      	cmp	r5, #102	@ 0x66
 8022cf8:	f000 80bc 	beq.w	8022e74 <mg_json_get+0x1e0>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8022cfc:	2d2d      	cmp	r5, #45	@ 0x2d
 8022cfe:	d005      	beq.n	8022d0c <mg_json_get+0x78>
 8022d00:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8022d04:	b2db      	uxtb	r3, r3
 8022d06:	2b09      	cmp	r3, #9
 8022d08:	f200 80c3 	bhi.w	8022e92 <mg_json_get+0x1fe>
          int numlen = 0;
 8022d0c:	2300      	movs	r3, #0
 8022d0e:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 8022d10:	aa0b      	add	r2, sp, #44	@ 0x2c
 8022d12:	eba8 0104 	sub.w	r1, r8, r4
 8022d16:	4648      	mov	r0, r9
 8022d18:	f7fd fcc2 	bl	80206a0 <mg_atod>
          i += numlen - 1;
 8022d1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022d1e:	3b01      	subs	r3, #1
 8022d20:	441c      	add	r4, r3
        MG_CHECKRET('V');
 8022d22:	455f      	cmp	r7, fp
 8022d24:	f000 80c6 	beq.w	8022eb4 <mg_json_get+0x220>
        if (depth == ed && ei >= 0) ci++;
 8022d28:	455f      	cmp	r7, fp
 8022d2a:	f000 80da 	beq.w	8022ee2 <mg_json_get+0x24e>
        expecting = S_COMMA_OR_EOO;
 8022d2e:	2303      	movs	r3, #3
 8022d30:	e163      	b.n	8022ffa <mg_json_get+0x366>
        if (depth == ed) j = i;
 8022d32:	9405      	str	r4, [sp, #20]
 8022d34:	e7d3      	b.n	8022cde <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8022d36:	2f1d      	cmp	r7, #29
 8022d38:	f300 81f4 	bgt.w	8023124 <mg_json_get+0x490>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8022d3c:	455f      	cmp	r7, fp
 8022d3e:	d007      	beq.n	8022d50 <mg_json_get+0xbc>
          nesting[depth++] = c;
 8022d40:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022d44:	446b      	add	r3, sp
 8022d46:	f803 5c20 	strb.w	r5, [r3, #-32]
 8022d4a:	3701      	adds	r7, #1
          expecting = S_KEY;
 8022d4c:	2301      	movs	r3, #1
          break;
 8022d4e:	e154      	b.n	8022ffa <mg_json_get+0x366>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8022d50:	9b02      	ldr	r3, [sp, #8]
 8022d52:	9a04      	ldr	r2, [sp, #16]
 8022d54:	5c9b      	ldrb	r3, [r3, r2]
 8022d56:	2b2e      	cmp	r3, #46	@ 0x2e
 8022d58:	d1f2      	bne.n	8022d40 <mg_json_get+0xac>
 8022d5a:	9b01      	ldr	r3, [sp, #4]
 8022d5c:	9a03      	ldr	r2, [sp, #12]
 8022d5e:	4293      	cmp	r3, r2
 8022d60:	d1ee      	bne.n	8022d40 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 8022d62:	f10b 0b01 	add.w	fp, fp, #1
 8022d66:	9b04      	ldr	r3, [sp, #16]
 8022d68:	3301      	adds	r3, #1
 8022d6a:	9304      	str	r3, [sp, #16]
 8022d6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022d70:	9303      	str	r3, [sp, #12]
 8022d72:	9301      	str	r3, [sp, #4]
 8022d74:	e7e4      	b.n	8022d40 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8022d76:	2f1d      	cmp	r7, #29
 8022d78:	f300 81d7 	bgt.w	802312a <mg_json_get+0x496>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8022d7c:	455f      	cmp	r7, fp
 8022d7e:	d006      	beq.n	8022d8e <mg_json_get+0xfa>
          nesting[depth++] = c;
 8022d80:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8022d84:	446a      	add	r2, sp
 8022d86:	f802 5c20 	strb.w	r5, [r2, #-32]
 8022d8a:	3701      	adds	r7, #1
          break;
 8022d8c:	e135      	b.n	8022ffa <mg_json_get+0x366>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8022d8e:	9a02      	ldr	r2, [sp, #8]
 8022d90:	9904      	ldr	r1, [sp, #16]
 8022d92:	5c52      	ldrb	r2, [r2, r1]
 8022d94:	2a5b      	cmp	r2, #91	@ 0x5b
 8022d96:	d1f3      	bne.n	8022d80 <mg_json_get+0xec>
 8022d98:	9a01      	ldr	r2, [sp, #4]
 8022d9a:	9903      	ldr	r1, [sp, #12]
 8022d9c:	428a      	cmp	r2, r1
 8022d9e:	d1ef      	bne.n	8022d80 <mg_json_get+0xec>
            ed++, pos++, ci = 0;
 8022da0:	f10b 0b01 	add.w	fp, fp, #1
 8022da4:	9804      	ldr	r0, [sp, #16]
 8022da6:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8022da8:	2100      	movs	r1, #0
 8022daa:	f8dd c008 	ldr.w	ip, [sp, #8]
 8022dae:	e005      	b.n	8022dbc <mg_json_get+0x128>
              ei *= 10;
 8022db0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
              ei += path[pos] - '0';
 8022db4:	3a30      	subs	r2, #48	@ 0x30
 8022db6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8022dba:	3001      	adds	r0, #1
 8022dbc:	f81c 2000 	ldrb.w	r2, [ip, r0]
 8022dc0:	2a5d      	cmp	r2, #93	@ 0x5d
 8022dc2:	d001      	beq.n	8022dc8 <mg_json_get+0x134>
 8022dc4:	2a00      	cmp	r2, #0
 8022dc6:	d1f3      	bne.n	8022db0 <mg_json_get+0x11c>
            if (path[pos] != 0) pos++;
 8022dc8:	9004      	str	r0, [sp, #16]
 8022dca:	9103      	str	r1, [sp, #12]
 8022dcc:	b12a      	cbz	r2, 8022dda <mg_json_get+0x146>
 8022dce:	4602      	mov	r2, r0
 8022dd0:	3201      	adds	r2, #1
 8022dd2:	9204      	str	r2, [sp, #16]
            ed++, pos++, ci = 0;
 8022dd4:	2200      	movs	r2, #0
 8022dd6:	9201      	str	r2, [sp, #4]
 8022dd8:	e7d2      	b.n	8022d80 <mg_json_get+0xec>
 8022dda:	2200      	movs	r2, #0
 8022ddc:	9201      	str	r2, [sp, #4]
 8022dde:	e7cf      	b.n	8022d80 <mg_json_get+0xec>
        } else if (c == ']' && depth > 0) {  // Empty array
 8022de0:	2f00      	cmp	r7, #0
 8022de2:	dd82      	ble.n	8022cea <mg_json_get+0x56>
          MG_EOO(']');
 8022de4:	455f      	cmp	r7, fp
 8022de6:	d020      	beq.n	8022e2a <mg_json_get+0x196>
 8022de8:	3f01      	subs	r7, #1
 8022dea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022dee:	446b      	add	r3, sp
 8022df0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8022df4:	3302      	adds	r3, #2
 8022df6:	429d      	cmp	r5, r3
 8022df8:	f040 819a 	bne.w	8023130 <mg_json_get+0x49c>
 8022dfc:	455f      	cmp	r7, fp
 8022dfe:	d190      	bne.n	8022d22 <mg_json_get+0x8e>
 8022e00:	9b02      	ldr	r3, [sp, #8]
 8022e02:	9a04      	ldr	r2, [sp, #16]
 8022e04:	5c9b      	ldrb	r3, [r3, r2]
 8022e06:	2b00      	cmp	r3, #0
 8022e08:	d18b      	bne.n	8022d22 <mg_json_get+0x8e>
 8022e0a:	9b01      	ldr	r3, [sp, #4]
 8022e0c:	9a03      	ldr	r2, [sp, #12]
 8022e0e:	4293      	cmp	r3, r2
 8022e10:	d187      	bne.n	8022d22 <mg_json_get+0x8e>
 8022e12:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022e16:	f1ba 0f00 	cmp.w	sl, #0
 8022e1a:	d004      	beq.n	8022e26 <mg_json_get+0x192>
 8022e1c:	9b05      	ldr	r3, [sp, #20]
 8022e1e:	1ae3      	subs	r3, r4, r3
 8022e20:	3301      	adds	r3, #1
 8022e22:	f8ca 3000 	str.w	r3, [sl]
 8022e26:	9d05      	ldr	r5, [sp, #20]
 8022e28:	e175      	b.n	8023116 <mg_json_get+0x482>
 8022e2a:	9b01      	ldr	r3, [sp, #4]
 8022e2c:	9a03      	ldr	r2, [sp, #12]
 8022e2e:	4293      	cmp	r3, r2
 8022e30:	d0da      	beq.n	8022de8 <mg_json_get+0x154>
 8022e32:	f06f 0502 	mvn.w	r5, #2
 8022e36:	e16e      	b.n	8023116 <mg_json_get+0x482>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8022e38:	1ce3      	adds	r3, r4, #3
 8022e3a:	9307      	str	r3, [sp, #28]
 8022e3c:	4543      	cmp	r3, r8
 8022e3e:	f6bf af57 	bge.w	8022cf0 <mg_json_get+0x5c>
 8022e42:	2204      	movs	r2, #4
 8022e44:	49a3      	ldr	r1, [pc, #652]	@ (80230d4 <mg_json_get+0x440>)
 8022e46:	4648      	mov	r0, r9
 8022e48:	f009 fd2e 	bl	802c8a8 <memcmp>
 8022e4c:	2800      	cmp	r0, #0
 8022e4e:	f47f af4f 	bne.w	8022cf0 <mg_json_get+0x5c>
          i += 3;
 8022e52:	9c07      	ldr	r4, [sp, #28]
 8022e54:	e765      	b.n	8022d22 <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8022e56:	1ce3      	adds	r3, r4, #3
 8022e58:	9307      	str	r3, [sp, #28]
 8022e5a:	4543      	cmp	r3, r8
 8022e5c:	f6bf af4b 	bge.w	8022cf6 <mg_json_get+0x62>
 8022e60:	2204      	movs	r2, #4
 8022e62:	499d      	ldr	r1, [pc, #628]	@ (80230d8 <mg_json_get+0x444>)
 8022e64:	4648      	mov	r0, r9
 8022e66:	f009 fd1f 	bl	802c8a8 <memcmp>
 8022e6a:	2800      	cmp	r0, #0
 8022e6c:	f47f af43 	bne.w	8022cf6 <mg_json_get+0x62>
          i += 3;
 8022e70:	9c07      	ldr	r4, [sp, #28]
 8022e72:	e756      	b.n	8022d22 <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8022e74:	1d23      	adds	r3, r4, #4
 8022e76:	9307      	str	r3, [sp, #28]
 8022e78:	4543      	cmp	r3, r8
 8022e7a:	f6bf af3f 	bge.w	8022cfc <mg_json_get+0x68>
 8022e7e:	2205      	movs	r2, #5
 8022e80:	4996      	ldr	r1, [pc, #600]	@ (80230dc <mg_json_get+0x448>)
 8022e82:	4648      	mov	r0, r9
 8022e84:	f009 fd10 	bl	802c8a8 <memcmp>
 8022e88:	2800      	cmp	r0, #0
 8022e8a:	f47f af37 	bne.w	8022cfc <mg_json_get+0x68>
          i += 4;
 8022e8e:	9c07      	ldr	r4, [sp, #28]
 8022e90:	e747      	b.n	8022d22 <mg_json_get+0x8e>
        } else if (c == '"') {
 8022e92:	2d22      	cmp	r5, #34	@ 0x22
 8022e94:	f040 814f 	bne.w	8023136 <mg_json_get+0x4a2>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8022e98:	f10a 0001 	add.w	r0, sl, #1
 8022e9c:	eba8 0104 	sub.w	r1, r8, r4
 8022ea0:	3901      	subs	r1, #1
 8022ea2:	4430      	add	r0, r6
 8022ea4:	f7fd fbd7 	bl	8020656 <mg_pass_string>
          if (n < 0) return n;
 8022ea8:	1e05      	subs	r5, r0, #0
 8022eaa:	f2c0 8134 	blt.w	8023116 <mg_json_get+0x482>
          i += n + 1;
 8022eae:	3501      	adds	r5, #1
 8022eb0:	442c      	add	r4, r5
 8022eb2:	e736      	b.n	8022d22 <mg_json_get+0x8e>
        MG_CHECKRET('V');
 8022eb4:	9b02      	ldr	r3, [sp, #8]
 8022eb6:	9a04      	ldr	r2, [sp, #16]
 8022eb8:	5c9b      	ldrb	r3, [r3, r2]
 8022eba:	2b00      	cmp	r3, #0
 8022ebc:	f47f af34 	bne.w	8022d28 <mg_json_get+0x94>
 8022ec0:	9b01      	ldr	r3, [sp, #4]
 8022ec2:	9a03      	ldr	r2, [sp, #12]
 8022ec4:	4293      	cmp	r3, r2
 8022ec6:	f47f af2f 	bne.w	8022d28 <mg_json_get+0x94>
 8022eca:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022ece:	f1ba 0f00 	cmp.w	sl, #0
 8022ed2:	d004      	beq.n	8022ede <mg_json_get+0x24a>
 8022ed4:	9b05      	ldr	r3, [sp, #20]
 8022ed6:	1ae3      	subs	r3, r4, r3
 8022ed8:	3301      	adds	r3, #1
 8022eda:	f8ca 3000 	str.w	r3, [sl]
 8022ede:	9d05      	ldr	r5, [sp, #20]
 8022ee0:	e119      	b.n	8023116 <mg_json_get+0x482>
        if (depth == ed && ei >= 0) ci++;
 8022ee2:	9b03      	ldr	r3, [sp, #12]
 8022ee4:	2b00      	cmp	r3, #0
 8022ee6:	f2c0 8110 	blt.w	802310a <mg_json_get+0x476>
 8022eea:	9b01      	ldr	r3, [sp, #4]
 8022eec:	3301      	adds	r3, #1
 8022eee:	9301      	str	r3, [sp, #4]
        expecting = S_COMMA_OR_EOO;
 8022ef0:	2303      	movs	r3, #3
 8022ef2:	e082      	b.n	8022ffa <mg_json_get+0x366>
        if (c == '"') {
 8022ef4:	2d22      	cmp	r5, #34	@ 0x22
 8022ef6:	d014      	beq.n	8022f22 <mg_json_get+0x28e>
        } else if (c == '}') {  // Empty object
 8022ef8:	2d7d      	cmp	r5, #125	@ 0x7d
 8022efa:	f040 8125 	bne.w	8023148 <mg_json_get+0x4b4>
          MG_EOO('}');
 8022efe:	455f      	cmp	r7, fp
 8022f00:	d053      	beq.n	8022faa <mg_json_get+0x316>
 8022f02:	3f01      	subs	r7, #1
 8022f04:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022f08:	446b      	add	r3, sp
 8022f0a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8022f0e:	3302      	adds	r3, #2
 8022f10:	429d      	cmp	r5, r3
 8022f12:	f040 811c 	bne.w	802314e <mg_json_get+0x4ba>
 8022f16:	455f      	cmp	r7, fp
 8022f18:	d04e      	beq.n	8022fb8 <mg_json_get+0x324>
          if (depth == ed && ei >= 0) ci++;
 8022f1a:	455f      	cmp	r7, fp
 8022f1c:	d061      	beq.n	8022fe2 <mg_json_get+0x34e>
          expecting = S_COMMA_OR_EOO;
 8022f1e:	2303      	movs	r3, #3
 8022f20:	e06b      	b.n	8022ffa <mg_json_get+0x366>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8022f22:	f104 0901 	add.w	r9, r4, #1
 8022f26:	44b1      	add	r9, r6
 8022f28:	eba8 0104 	sub.w	r1, r8, r4
 8022f2c:	3901      	subs	r1, #1
 8022f2e:	4648      	mov	r0, r9
 8022f30:	f7fd fb91 	bl	8020656 <mg_pass_string>
          if (n < 0) return n;
 8022f34:	1e05      	subs	r5, r0, #0
 8022f36:	f2c0 80ee 	blt.w	8023116 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8022f3a:	1c63      	adds	r3, r4, #1
 8022f3c:	442b      	add	r3, r5
 8022f3e:	4543      	cmp	r3, r8
 8022f40:	f280 80fc 	bge.w	802313c <mg_json_get+0x4a8>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8022f44:	455f      	cmp	r7, fp
 8022f46:	f2c0 80fc 	blt.w	8023142 <mg_json_get+0x4ae>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8022f4a:	d005      	beq.n	8022f58 <mg_json_get+0x2c4>
          if (depth == ed && path[pos - 1] == '.' &&
 8022f4c:	455f      	cmp	r7, fp
 8022f4e:	d00d      	beq.n	8022f6c <mg_json_get+0x2d8>
          i += n + 1;
 8022f50:	3501      	adds	r5, #1
 8022f52:	442c      	add	r4, r5
          expecting = S_COLON;
 8022f54:	2302      	movs	r3, #2
 8022f56:	e050      	b.n	8022ffa <mg_json_get+0x366>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8022f58:	9b02      	ldr	r3, [sp, #8]
 8022f5a:	9a04      	ldr	r2, [sp, #16]
 8022f5c:	4413      	add	r3, r2
 8022f5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022f62:	2b2e      	cmp	r3, #46	@ 0x2e
 8022f64:	d0f2      	beq.n	8022f4c <mg_json_get+0x2b8>
 8022f66:	f06f 0502 	mvn.w	r5, #2
 8022f6a:	e0d4      	b.n	8023116 <mg_json_get+0x482>
          if (depth == ed && path[pos - 1] == '.' &&
 8022f6c:	9b02      	ldr	r3, [sp, #8]
 8022f6e:	9a04      	ldr	r2, [sp, #16]
 8022f70:	4413      	add	r3, r2
 8022f72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022f76:	2b2e      	cmp	r3, #46	@ 0x2e
 8022f78:	d1ea      	bne.n	8022f50 <mg_json_get+0x2bc>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8022f7a:	462a      	mov	r2, r5
 8022f7c:	9b02      	ldr	r3, [sp, #8]
 8022f7e:	9904      	ldr	r1, [sp, #16]
 8022f80:	1859      	adds	r1, r3, r1
 8022f82:	4648      	mov	r0, r9
 8022f84:	f009 fd59 	bl	802ca3a <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 8022f88:	2800      	cmp	r0, #0
 8022f8a:	d1e1      	bne.n	8022f50 <mg_json_get+0x2bc>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8022f8c:	9904      	ldr	r1, [sp, #16]
 8022f8e:	194b      	adds	r3, r1, r5
 8022f90:	9a02      	ldr	r2, [sp, #8]
 8022f92:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8022f94:	b12a      	cbz	r2, 8022fa2 <mg_json_get+0x30e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8022f96:	2a2e      	cmp	r2, #46	@ 0x2e
 8022f98:	d005      	beq.n	8022fa6 <mg_json_get+0x312>
 8022f9a:	2a5b      	cmp	r2, #91	@ 0x5b
 8022f9c:	d1d8      	bne.n	8022f50 <mg_json_get+0x2bc>
            pos += n;
 8022f9e:	9304      	str	r3, [sp, #16]
 8022fa0:	e7d6      	b.n	8022f50 <mg_json_get+0x2bc>
 8022fa2:	9304      	str	r3, [sp, #16]
 8022fa4:	e7d4      	b.n	8022f50 <mg_json_get+0x2bc>
 8022fa6:	9304      	str	r3, [sp, #16]
 8022fa8:	e7d2      	b.n	8022f50 <mg_json_get+0x2bc>
          MG_EOO('}');
 8022faa:	9b01      	ldr	r3, [sp, #4]
 8022fac:	9a03      	ldr	r2, [sp, #12]
 8022fae:	4293      	cmp	r3, r2
 8022fb0:	d0a7      	beq.n	8022f02 <mg_json_get+0x26e>
 8022fb2:	f06f 0502 	mvn.w	r5, #2
 8022fb6:	e0ae      	b.n	8023116 <mg_json_get+0x482>
 8022fb8:	9b02      	ldr	r3, [sp, #8]
 8022fba:	9a04      	ldr	r2, [sp, #16]
 8022fbc:	5c9b      	ldrb	r3, [r3, r2]
 8022fbe:	2b00      	cmp	r3, #0
 8022fc0:	d1ab      	bne.n	8022f1a <mg_json_get+0x286>
 8022fc2:	9b01      	ldr	r3, [sp, #4]
 8022fc4:	9a03      	ldr	r2, [sp, #12]
 8022fc6:	4293      	cmp	r3, r2
 8022fc8:	d1a7      	bne.n	8022f1a <mg_json_get+0x286>
 8022fca:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022fce:	f1ba 0f00 	cmp.w	sl, #0
 8022fd2:	d004      	beq.n	8022fde <mg_json_get+0x34a>
 8022fd4:	9b05      	ldr	r3, [sp, #20]
 8022fd6:	1ae3      	subs	r3, r4, r3
 8022fd8:	3301      	adds	r3, #1
 8022fda:	f8ca 3000 	str.w	r3, [sl]
 8022fde:	9d05      	ldr	r5, [sp, #20]
 8022fe0:	e099      	b.n	8023116 <mg_json_get+0x482>
          if (depth == ed && ei >= 0) ci++;
 8022fe2:	9b03      	ldr	r3, [sp, #12]
 8022fe4:	2b00      	cmp	r3, #0
 8022fe6:	f2c0 8092 	blt.w	802310e <mg_json_get+0x47a>
 8022fea:	9b01      	ldr	r3, [sp, #4]
 8022fec:	3301      	adds	r3, #1
 8022fee:	9301      	str	r3, [sp, #4]
          expecting = S_COMMA_OR_EOO;
 8022ff0:	2303      	movs	r3, #3
 8022ff2:	e002      	b.n	8022ffa <mg_json_get+0x366>
        if (c == ':') {
 8022ff4:	2d3a      	cmp	r5, #58	@ 0x3a
 8022ff6:	d11d      	bne.n	8023034 <mg_json_get+0x3a0>
          expecting = S_VALUE;
 8022ff8:	2300      	movs	r3, #0
  for (i = 0; i < len; i++) {
 8022ffa:	3401      	adds	r4, #1
 8022ffc:	4544      	cmp	r4, r8
 8022ffe:	f280 8088 	bge.w	8023112 <mg_json_get+0x47e>
    unsigned char c = ((unsigned char *) s)[i];
 8023002:	46a2      	mov	sl, r4
 8023004:	eb06 0904 	add.w	r9, r6, r4
 8023008:	5d35      	ldrb	r5, [r6, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 802300a:	2d20      	cmp	r5, #32
 802300c:	d0f5      	beq.n	8022ffa <mg_json_get+0x366>
 802300e:	2d09      	cmp	r5, #9
 8023010:	d0f3      	beq.n	8022ffa <mg_json_get+0x366>
 8023012:	2d0a      	cmp	r5, #10
 8023014:	d0f1      	beq.n	8022ffa <mg_json_get+0x366>
 8023016:	2d0d      	cmp	r5, #13
 8023018:	d0ef      	beq.n	8022ffa <mg_json_get+0x366>
    switch (expecting) {
 802301a:	2b03      	cmp	r3, #3
 802301c:	d8ed      	bhi.n	8022ffa <mg_json_get+0x366>
 802301e:	a201      	add	r2, pc, #4	@ (adr r2, 8023024 <mg_json_get+0x390>)
 8023020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023024:	08022cdb 	.word	0x08022cdb
 8023028:	08022ef5 	.word	0x08022ef5
 802302c:	08022ff5 	.word	0x08022ff5
 8023030:	0802303b 	.word	0x0802303b
          return MG_JSON_INVALID;
 8023034:	f06f 0501 	mvn.w	r5, #1
 8023038:	e06d      	b.n	8023116 <mg_json_get+0x482>
        if (depth <= 0) {
 802303a:	2f00      	cmp	r7, #0
 802303c:	f340 808a 	ble.w	8023154 <mg_json_get+0x4c0>
        } else if (c == ',') {
 8023040:	2d2c      	cmp	r5, #44	@ 0x2c
 8023042:	d01e      	beq.n	8023082 <mg_json_get+0x3ee>
        } else if (c == ']' || c == '}') {
 8023044:	2d5d      	cmp	r5, #93	@ 0x5d
 8023046:	d002      	beq.n	802304e <mg_json_get+0x3ba>
 8023048:	2d7d      	cmp	r5, #125	@ 0x7d
 802304a:	f040 8086 	bne.w	802315a <mg_json_get+0x4c6>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 802304e:	455f      	cmp	r7, fp
 8023050:	d021      	beq.n	8023096 <mg_json_get+0x402>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8023052:	455f      	cmp	r7, fp
 8023054:	d02b      	beq.n	80230ae <mg_json_get+0x41a>
          MG_EOO('O');
 8023056:	455f      	cmp	r7, fp
 8023058:	d035      	beq.n	80230c6 <mg_json_get+0x432>
 802305a:	3f01      	subs	r7, #1
 802305c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8023060:	446a      	add	r2, sp
 8023062:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8023066:	3202      	adds	r2, #2
 8023068:	4295      	cmp	r5, r2
 802306a:	d179      	bne.n	8023160 <mg_json_get+0x4cc>
 802306c:	455f      	cmp	r7, fp
 802306e:	d037      	beq.n	80230e0 <mg_json_get+0x44c>
          if (depth == ed && ei >= 0) ci++;
 8023070:	455f      	cmp	r7, fp
 8023072:	d1c2      	bne.n	8022ffa <mg_json_get+0x366>
 8023074:	9a03      	ldr	r2, [sp, #12]
 8023076:	2a00      	cmp	r2, #0
 8023078:	dbbf      	blt.n	8022ffa <mg_json_get+0x366>
 802307a:	9a01      	ldr	r2, [sp, #4]
 802307c:	3201      	adds	r2, #1
 802307e:	9201      	str	r2, [sp, #4]
 8023080:	e7bb      	b.n	8022ffa <mg_json_get+0x366>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8023082:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8023086:	446b      	add	r3, sp
 8023088:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 802308c:	2b7b      	cmp	r3, #123	@ 0x7b
 802308e:	bf14      	ite	ne
 8023090:	2300      	movne	r3, #0
 8023092:	2301      	moveq	r3, #1
 8023094:	e7b1      	b.n	8022ffa <mg_json_get+0x366>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8023096:	2d7d      	cmp	r5, #125	@ 0x7d
 8023098:	d1db      	bne.n	8023052 <mg_json_get+0x3be>
 802309a:	9a02      	ldr	r2, [sp, #8]
 802309c:	9904      	ldr	r1, [sp, #16]
 802309e:	440a      	add	r2, r1
 80230a0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80230a4:	2a2e      	cmp	r2, #46	@ 0x2e
 80230a6:	d1d4      	bne.n	8023052 <mg_json_get+0x3be>
            return MG_JSON_NOT_FOUND;
 80230a8:	f06f 0502 	mvn.w	r5, #2
 80230ac:	e033      	b.n	8023116 <mg_json_get+0x482>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 80230ae:	2d5d      	cmp	r5, #93	@ 0x5d
 80230b0:	d1d1      	bne.n	8023056 <mg_json_get+0x3c2>
 80230b2:	9a02      	ldr	r2, [sp, #8]
 80230b4:	9904      	ldr	r1, [sp, #16]
 80230b6:	440a      	add	r2, r1
 80230b8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80230bc:	2a2c      	cmp	r2, #44	@ 0x2c
 80230be:	d1ca      	bne.n	8023056 <mg_json_get+0x3c2>
            return MG_JSON_NOT_FOUND;
 80230c0:	f06f 0502 	mvn.w	r5, #2
 80230c4:	e027      	b.n	8023116 <mg_json_get+0x482>
          MG_EOO('O');
 80230c6:	9a01      	ldr	r2, [sp, #4]
 80230c8:	9903      	ldr	r1, [sp, #12]
 80230ca:	428a      	cmp	r2, r1
 80230cc:	d0c5      	beq.n	802305a <mg_json_get+0x3c6>
 80230ce:	f06f 0502 	mvn.w	r5, #2
 80230d2:	e020      	b.n	8023116 <mg_json_get+0x482>
 80230d4:	08036dc0 	.word	0x08036dc0
 80230d8:	0803a400 	.word	0x0803a400
 80230dc:	08036dc8 	.word	0x08036dc8
 80230e0:	9a02      	ldr	r2, [sp, #8]
 80230e2:	9904      	ldr	r1, [sp, #16]
 80230e4:	5c52      	ldrb	r2, [r2, r1]
 80230e6:	2a00      	cmp	r2, #0
 80230e8:	d1c2      	bne.n	8023070 <mg_json_get+0x3dc>
 80230ea:	9a01      	ldr	r2, [sp, #4]
 80230ec:	9903      	ldr	r1, [sp, #12]
 80230ee:	428a      	cmp	r2, r1
 80230f0:	d1be      	bne.n	8023070 <mg_json_get+0x3dc>
 80230f2:	f8dd a018 	ldr.w	sl, [sp, #24]
 80230f6:	f1ba 0f00 	cmp.w	sl, #0
 80230fa:	d004      	beq.n	8023106 <mg_json_get+0x472>
 80230fc:	9b05      	ldr	r3, [sp, #20]
 80230fe:	1ae3      	subs	r3, r4, r3
 8023100:	3301      	adds	r3, #1
 8023102:	f8ca 3000 	str.w	r3, [sl]
 8023106:	9d05      	ldr	r5, [sp, #20]
 8023108:	e005      	b.n	8023116 <mg_json_get+0x482>
        expecting = S_COMMA_OR_EOO;
 802310a:	2303      	movs	r3, #3
 802310c:	e775      	b.n	8022ffa <mg_json_get+0x366>
          expecting = S_COMMA_OR_EOO;
 802310e:	2303      	movs	r3, #3
 8023110:	e773      	b.n	8022ffa <mg_json_get+0x366>
  return MG_JSON_NOT_FOUND;
 8023112:	f06f 0502 	mvn.w	r5, #2
}
 8023116:	4628      	mov	r0, r5
 8023118:	b015      	add	sp, #84	@ 0x54
 802311a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 802311e:	f06f 0501 	mvn.w	r5, #1
 8023122:	e7f8      	b.n	8023116 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8023124:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8023128:	e7f5      	b.n	8023116 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802312a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802312e:	e7f2      	b.n	8023116 <mg_json_get+0x482>
          MG_EOO(']');
 8023130:	f06f 0501 	mvn.w	r5, #1
 8023134:	e7ef      	b.n	8023116 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8023136:	f06f 0501 	mvn.w	r5, #1
 802313a:	e7ec      	b.n	8023116 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 802313c:	f06f 0502 	mvn.w	r5, #2
 8023140:	e7e9      	b.n	8023116 <mg_json_get+0x482>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8023142:	f06f 0502 	mvn.w	r5, #2
 8023146:	e7e6      	b.n	8023116 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8023148:	f06f 0501 	mvn.w	r5, #1
 802314c:	e7e3      	b.n	8023116 <mg_json_get+0x482>
          MG_EOO('}');
 802314e:	f06f 0501 	mvn.w	r5, #1
 8023152:	e7e0      	b.n	8023116 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8023154:	f06f 0501 	mvn.w	r5, #1
 8023158:	e7dd      	b.n	8023116 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 802315a:	f06f 0501 	mvn.w	r5, #1
 802315e:	e7da      	b.n	8023116 <mg_json_get+0x482>
          MG_EOO('O');
 8023160:	f06f 0501 	mvn.w	r5, #1
 8023164:	e7d7      	b.n	8023116 <mg_json_get+0x482>
 8023166:	bf00      	nop

08023168 <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8023168:	b510      	push	{r4, lr}
 802316a:	b084      	sub	sp, #16
 802316c:	46ec      	mov	ip, sp
 802316e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8023172:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8023174:	ab03      	add	r3, sp, #12
 8023176:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802317a:	f7ff fd8b 	bl	8022c94 <mg_json_get>
 802317e:	1e02      	subs	r2, r0, #0
 8023180:	db11      	blt.n	80231a6 <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8023182:	9b00      	ldr	r3, [sp, #0]
 8023184:	1898      	adds	r0, r3, r2
 8023186:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8023188:	2a2d      	cmp	r2, #45	@ 0x2d
 802318a:	d003      	beq.n	8023194 <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 802318c:	3a30      	subs	r2, #48	@ 0x30
 802318e:	b2d2      	uxtb	r2, r2
 8023190:	2a09      	cmp	r2, #9
 8023192:	d80b      	bhi.n	80231ac <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 8023194:	b164      	cbz	r4, 80231b0 <mg_json_get_num+0x48>
 8023196:	2200      	movs	r2, #0
 8023198:	9903      	ldr	r1, [sp, #12]
 802319a:	f7fd fa81 	bl	80206a0 <mg_atod>
 802319e:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 80231a2:	2001      	movs	r0, #1
 80231a4:	e000      	b.n	80231a8 <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 80231a6:	2000      	movs	r0, #0
}
 80231a8:	b004      	add	sp, #16
 80231aa:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 80231ac:	2000      	movs	r0, #0
 80231ae:	e7fb      	b.n	80231a8 <mg_json_get_num+0x40>
    found = 1;
 80231b0:	2001      	movs	r0, #1
 80231b2:	e7f9      	b.n	80231a8 <mg_json_get_num+0x40>

080231b4 <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 80231b4:	b510      	push	{r4, lr}
 80231b6:	b082      	sub	sp, #8
 80231b8:	46ec      	mov	ip, sp
 80231ba:	e88c 0003 	stmia.w	ip, {r0, r1}
 80231be:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 80231c0:	2300      	movs	r3, #0
 80231c2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80231c6:	f7ff fd65 	bl	8022c94 <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 80231ca:	2800      	cmp	r0, #0
 80231cc:	db0f      	blt.n	80231ee <mg_json_get_bool+0x3a>
 80231ce:	9b00      	ldr	r3, [sp, #0]
 80231d0:	5c1b      	ldrb	r3, [r3, r0]
 80231d2:	2b74      	cmp	r3, #116	@ 0x74
 80231d4:	d003      	beq.n	80231de <mg_json_get_bool+0x2a>
 80231d6:	2b66      	cmp	r3, #102	@ 0x66
 80231d8:	d001      	beq.n	80231de <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 80231da:	2000      	movs	r0, #0
 80231dc:	e008      	b.n	80231f0 <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 80231de:	b14c      	cbz	r4, 80231f4 <mg_json_get_bool+0x40>
 80231e0:	2b74      	cmp	r3, #116	@ 0x74
 80231e2:	bf14      	ite	ne
 80231e4:	2300      	movne	r3, #0
 80231e6:	2301      	moveq	r3, #1
 80231e8:	7023      	strb	r3, [r4, #0]
    found = 1;
 80231ea:	2001      	movs	r0, #1
 80231ec:	e000      	b.n	80231f0 <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 80231ee:	2000      	movs	r0, #0
}
 80231f0:	b002      	add	sp, #8
 80231f2:	bd10      	pop	{r4, pc}
    found = 1;
 80231f4:	2001      	movs	r0, #1
 80231f6:	e7fb      	b.n	80231f0 <mg_json_get_bool+0x3c>

080231f8 <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 80231f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80231fa:	b085      	sub	sp, #20
 80231fc:	4606      	mov	r6, r0
 80231fe:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 8023200:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 8023202:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 8023204:	e038      	b.n	8023278 <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8023206:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802320a:	f7fd fb5b 	bl	80208c4 <nibble>
 802320e:	f7fd fb41 	bl	8020894 <logc>
 8023212:	f3c5 2003 	ubfx	r0, r5, #8, #4
 8023216:	f7fd fb55 	bl	80208c4 <nibble>
 802321a:	f7fd fb3b 	bl	8020894 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 802321e:	f3c5 1003 	ubfx	r0, r5, #4, #4
 8023222:	f7fd fb4f 	bl	80208c4 <nibble>
 8023226:	f7fd fb35 	bl	8020894 <logc>
 802322a:	2030      	movs	r0, #48	@ 0x30
 802322c:	f7fd fb32 	bl	8020894 <logc>
 8023230:	2103      	movs	r1, #3
 8023232:	4829      	ldr	r0, [pc, #164]	@ (80232d8 <mg_hexdump+0xe0>)
 8023234:	f7fd fb3a 	bl	80208ac <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8023238:	5d70      	ldrb	r0, [r6, r5]
 802323a:	0900      	lsrs	r0, r0, #4
 802323c:	f7fd fb42 	bl	80208c4 <nibble>
 8023240:	f7fd fb28 	bl	8020894 <logc>
 8023244:	5d70      	ldrb	r0, [r6, r5]
 8023246:	f000 000f 	and.w	r0, r0, #15
 802324a:	f7fd fb3b 	bl	80208c4 <nibble>
 802324e:	f7fd fb21 	bl	8020894 <logc>
    logc(' ');                                         // Space after hex number
 8023252:	2020      	movs	r0, #32
 8023254:	f7fd fb1e 	bl	8020894 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8023258:	5d72      	ldrb	r2, [r6, r5]
 802325a:	f1a2 0320 	sub.w	r3, r2, #32
 802325e:	b2db      	uxtb	r3, r3
 8023260:	2b5e      	cmp	r3, #94	@ 0x5e
 8023262:	d900      	bls.n	8023266 <mg_hexdump+0x6e>
 8023264:	222e      	movs	r2, #46	@ 0x2e
 8023266:	1c63      	adds	r3, r4, #1
 8023268:	f104 0110 	add.w	r1, r4, #16
 802326c:	eb0d 0401 	add.w	r4, sp, r1
 8023270:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 8023274:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8023276:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 8023278:	42bd      	cmp	r5, r7
 802327a:	d21e      	bcs.n	80232ba <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 802327c:	f015 0f0f 	tst.w	r5, #15
 8023280:	d1da      	bne.n	8023238 <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8023282:	2d00      	cmp	r5, #0
 8023284:	d0bf      	beq.n	8023206 <mg_hexdump+0xe>
 8023286:	2102      	movs	r1, #2
 8023288:	4814      	ldr	r0, [pc, #80]	@ (80232dc <mg_hexdump+0xe4>)
 802328a:	f7fd fb0f 	bl	80208ac <logs>
 802328e:	2110      	movs	r1, #16
 8023290:	4668      	mov	r0, sp
 8023292:	f7fd fb0b 	bl	80208ac <logs>
 8023296:	200a      	movs	r0, #10
 8023298:	f7fd fafc 	bl	8020894 <logc>
 802329c:	2400      	movs	r4, #0
 802329e:	e7b2      	b.n	8023206 <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 80232a0:	2103      	movs	r1, #3
 80232a2:	480d      	ldr	r0, [pc, #52]	@ (80232d8 <mg_hexdump+0xe0>)
 80232a4:	f7fd fb02 	bl	80208ac <logs>
 80232a8:	1c63      	adds	r3, r4, #1
 80232aa:	f104 0210 	add.w	r2, r4, #16
 80232ae:	eb0d 0402 	add.w	r4, sp, r2
 80232b2:	2220      	movs	r2, #32
 80232b4:	f804 2c10 	strb.w	r2, [r4, #-16]
 80232b8:	b2dc      	uxtb	r4, r3
 80232ba:	2c0f      	cmp	r4, #15
 80232bc:	d9f0      	bls.n	80232a0 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 80232be:	2102      	movs	r1, #2
 80232c0:	4806      	ldr	r0, [pc, #24]	@ (80232dc <mg_hexdump+0xe4>)
 80232c2:	f7fd faf3 	bl	80208ac <logs>
 80232c6:	2110      	movs	r1, #16
 80232c8:	4668      	mov	r0, sp
 80232ca:	f7fd faef 	bl	80208ac <logs>
 80232ce:	200a      	movs	r0, #10
 80232d0:	f7fd fae0 	bl	8020894 <logc>
}
 80232d4:	b005      	add	sp, #20
 80232d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80232d8:	0803a40c 	.word	0x0803a40c
 80232dc:	0803a408 	.word	0x0803a408

080232e0 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 80232e0:	4b09      	ldr	r3, [pc, #36]	@ (8023308 <mg_md5_init+0x28>)
 80232e2:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 80232e4:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 80232e8:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 80232ea:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 80232ee:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 80232f2:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 80232f6:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 80232f8:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 80232fc:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 80232fe:	2300      	movs	r3, #0
 8023300:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 8023302:	6143      	str	r3, [r0, #20]
}
 8023304:	4770      	bx	lr
 8023306:	bf00      	nop
 8023308:	67452301 	.word	0x67452301

0802330c <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 802330c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023310:	4606      	mov	r6, r0
 8023312:	460c      	mov	r4, r1
 8023314:	4615      	mov	r5, r2
  t = ctx->bits[0];
 8023316:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 8023318:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802331c:	6102      	str	r2, [r0, #16]
 802331e:	429a      	cmp	r2, r3
 8023320:	d202      	bcs.n	8023328 <mg_md5_update+0x1c>
 8023322:	6942      	ldr	r2, [r0, #20]
 8023324:	3201      	adds	r2, #1
 8023326:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 8023328:	6972      	ldr	r2, [r6, #20]
 802332a:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 802332e:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 8023330:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 8023334:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 8023338:	d035      	beq.n	80233a6 <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 802333a:	f106 0918 	add.w	r9, r6, #24
 802333e:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 8023342:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 8023346:	4545      	cmp	r5, r8
 8023348:	d30b      	bcc.n	8023362 <mg_md5_update+0x56>
    memcpy(p, buf, t);
 802334a:	4642      	mov	r2, r8
 802334c:	4621      	mov	r1, r4
 802334e:	f00a fd7b 	bl	802de48 <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8023352:	4649      	mov	r1, r9
 8023354:	4630      	mov	r0, r6
 8023356:	f7fd fabf 	bl	80208d8 <mg_md5_transform>
    buf += t;
 802335a:	4444      	add	r4, r8
    len -= t;
 802335c:	3f40      	subs	r7, #64	@ 0x40
 802335e:	443d      	add	r5, r7
 8023360:	e021      	b.n	80233a6 <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 8023362:	462a      	mov	r2, r5
 8023364:	4621      	mov	r1, r4
 8023366:	f00a fd6f 	bl	802de48 <memcpy>
      return;
 802336a:	e024      	b.n	80233b6 <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 802336c:	f106 0118 	add.w	r1, r6, #24
 8023370:	4623      	mov	r3, r4
 8023372:	468c      	mov	ip, r1
 8023374:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 8023378:	681f      	ldr	r7, [r3, #0]
 802337a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 802337e:	6898      	ldr	r0, [r3, #8]
 8023380:	68da      	ldr	r2, [r3, #12]
 8023382:	f8cc 7000 	str.w	r7, [ip]
 8023386:	f8cc e004 	str.w	lr, [ip, #4]
 802338a:	f8cc 0008 	str.w	r0, [ip, #8]
 802338e:	f8cc 200c 	str.w	r2, [ip, #12]
 8023392:	3310      	adds	r3, #16
 8023394:	f10c 0c10 	add.w	ip, ip, #16
 8023398:	4543      	cmp	r3, r8
 802339a:	d1ed      	bne.n	8023378 <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802339c:	4630      	mov	r0, r6
 802339e:	f7fd fa9b 	bl	80208d8 <mg_md5_transform>
    buf += 64;
 80233a2:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 80233a4:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 80233a6:	2d3f      	cmp	r5, #63	@ 0x3f
 80233a8:	d8e0      	bhi.n	802336c <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 80233aa:	462a      	mov	r2, r5
 80233ac:	4621      	mov	r1, r4
 80233ae:	f106 0018 	add.w	r0, r6, #24
 80233b2:	f00a fd49 	bl	802de48 <memcpy>
}
 80233b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080233ba <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 80233ba:	b570      	push	{r4, r5, r6, lr}
 80233bc:	4604      	mov	r4, r0
 80233be:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 80233c0:	6903      	ldr	r3, [r0, #16]
 80233c2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 80233c6:	f100 0618 	add.w	r6, r0, #24
 80233ca:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 80233cc:	3001      	adds	r0, #1
 80233ce:	2280      	movs	r2, #128	@ 0x80
 80233d0:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 80233d2:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 80233d6:	2a07      	cmp	r2, #7
 80233d8:	d821      	bhi.n	802341e <mg_md5_final+0x64>
    memset(p, 0, count);
 80233da:	2100      	movs	r1, #0
 80233dc:	f009 faf8 	bl	802c9d0 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80233e0:	4631      	mov	r1, r6
 80233e2:	4620      	mov	r0, r4
 80233e4:	f7fd fa78 	bl	80208d8 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 80233e8:	2238      	movs	r2, #56	@ 0x38
 80233ea:	2100      	movs	r1, #0
 80233ec:	4630      	mov	r0, r6
 80233ee:	f009 faef 	bl	802c9d0 <memset>
  a[14] = ctx->bits[0];
 80233f2:	6923      	ldr	r3, [r4, #16]
 80233f4:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 80233f6:	6963      	ldr	r3, [r4, #20]
 80233f8:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80233fa:	4631      	mov	r1, r6
 80233fc:	4620      	mov	r0, r4
 80233fe:	f7fd fa6b 	bl	80208d8 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 8023402:	6820      	ldr	r0, [r4, #0]
 8023404:	6861      	ldr	r1, [r4, #4]
 8023406:	68a2      	ldr	r2, [r4, #8]
 8023408:	68e3      	ldr	r3, [r4, #12]
 802340a:	6028      	str	r0, [r5, #0]
 802340c:	6069      	str	r1, [r5, #4]
 802340e:	60aa      	str	r2, [r5, #8]
 8023410:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 8023412:	2258      	movs	r2, #88	@ 0x58
 8023414:	2100      	movs	r1, #0
 8023416:	4620      	mov	r0, r4
 8023418:	f009 fada 	bl	802c9d0 <memset>
}
 802341c:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 802341e:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8023422:	2100      	movs	r1, #0
 8023424:	f009 fad4 	bl	802c9d0 <memset>
 8023428:	e7e3      	b.n	80233f2 <mg_md5_final+0x38>

0802342a <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 802342a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802342e:	4604      	mov	r4, r0
 8023430:	460d      	mov	r5, r1
 8023432:	4617      	mov	r7, r2
 8023434:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 8023436:	2228      	movs	r2, #40	@ 0x28
 8023438:	2100      	movs	r1, #0
 802343a:	4618      	mov	r0, r3
 802343c:	f009 fac8 	bl	802c9d0 <memset>
  m->dgram.buf = (char *) buf;
 8023440:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8023442:	2d01      	cmp	r5, #1
 8023444:	f240 8088 	bls.w	8023558 <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8023448:	7820      	ldrb	r0, [r4, #0]
 802344a:	0900      	lsrs	r0, r0, #4
 802344c:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 802344e:	46a4      	mov	ip, r4
 8023450:	f81c 9b01 	ldrb.w	r9, [ip], #1
 8023454:	f3c9 0941 	ubfx	r9, r9, #1, #2
 8023458:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 802345c:	2300      	movs	r3, #0
 802345e:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 8023460:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 8023462:	ebac 0e04 	sub.w	lr, ip, r4
 8023466:	45ae      	cmp	lr, r5
 8023468:	d211      	bcs.n	802348e <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 802346a:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 802346e:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 8023472:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 8023476:	fa0e fe08 	lsl.w	lr, lr, r8
 802347a:	4471      	add	r1, lr
    len_len++;
 802347c:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 802347e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8023482:	d004      	beq.n	802348e <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 8023484:	2b03      	cmp	r3, #3
 8023486:	d9ec      	bls.n	8023462 <mg_mqtt_parse+0x38>
 8023488:	2002      	movs	r0, #2
}
 802348a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 802348e:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8023492:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8023496:	d161      	bne.n	802355c <mg_mqtt_parse+0x132>
 8023498:	4425      	add	r5, r4
 802349a:	4545      	cmp	r5, r8
 802349c:	d360      	bcc.n	8023560 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 802349e:	eba8 0304 	sub.w	r3, r8, r4
 80234a2:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 80234a4:	2803      	cmp	r0, #3
 80234a6:	d01c      	beq.n	80234e2 <mg_mqtt_parse+0xb8>
 80234a8:	d80a      	bhi.n	80234c0 <mg_mqtt_parse+0x96>
 80234aa:	2802      	cmp	r0, #2
 80234ac:	d106      	bne.n	80234bc <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 80234ae:	2901      	cmp	r1, #1
 80234b0:	dd5a      	ble.n	8023568 <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 80234b2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80234b6:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 80234b8:	2000      	movs	r0, #0
      break;
 80234ba:	e7e6      	b.n	802348a <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 80234bc:	2000      	movs	r0, #0
 80234be:	e7e4      	b.n	802348a <mg_mqtt_parse+0x60>
 80234c0:	3804      	subs	r0, #4
 80234c2:	b2c0      	uxtb	r0, r0
 80234c4:	2807      	cmp	r0, #7
 80234c6:	d84d      	bhi.n	8023564 <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 80234c8:	f10c 0302 	add.w	r3, ip, #2
 80234cc:	4543      	cmp	r3, r8
 80234ce:	d84d      	bhi.n	802356c <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80234d0:	f89c 2000 	ldrb.w	r2, [ip]
 80234d4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80234d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80234dc:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 80234de:	2000      	movs	r0, #0
      break;
 80234e0:	e7d3      	b.n	802348a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 80234e2:	f10c 0202 	add.w	r2, ip, #2
 80234e6:	4542      	cmp	r2, r8
 80234e8:	d842      	bhi.n	8023570 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80234ea:	f89c 1000 	ldrb.w	r1, [ip]
 80234ee:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80234f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80234f6:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 80234f8:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 80234fa:	3302      	adds	r3, #2
 80234fc:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 8023500:	45a8      	cmp	r8, r5
 8023502:	d337      	bcc.n	8023574 <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 8023504:	f1b9 0f00 	cmp.w	r9, #0
 8023508:	d008      	beq.n	802351c <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 802350a:	1caa      	adds	r2, r5, #2
 802350c:	4542      	cmp	r2, r8
 802350e:	d833      	bhi.n	8023578 <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8023510:	7829      	ldrb	r1, [r5, #0]
 8023512:	786b      	ldrb	r3, [r5, #1]
 8023514:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8023518:	8333      	strh	r3, [r6, #24]
        p += 2;
 802351a:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 802351c:	4545      	cmp	r5, r8
 802351e:	d82d      	bhi.n	802357c <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 8023520:	2f05      	cmp	r7, #5
 8023522:	d007      	beq.n	8023534 <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 8023524:	4545      	cmp	r5, r8
 8023526:	d82d      	bhi.n	8023584 <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 8023528:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 802352a:	eba8 0505 	sub.w	r5, r8, r5
 802352e:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 8023530:	2000      	movs	r0, #0
      break;
 8023532:	e7aa      	b.n	802348a <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 8023534:	1cab      	adds	r3, r5, #2
 8023536:	4543      	cmp	r3, r8
 8023538:	d2f4      	bcs.n	8023524 <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 802353a:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 802353e:	eba8 0105 	sub.w	r1, r8, r5
 8023542:	4628      	mov	r0, r5
 8023544:	f7fd fd70 	bl	8021028 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 8023548:	b1d0      	cbz	r0, 8023580 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 802354a:	182b      	adds	r3, r5, r0
 802354c:	1b1b      	subs	r3, r3, r4
 802354e:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 8023550:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8023552:	4403      	add	r3, r0
 8023554:	441d      	add	r5, r3
 8023556:	e7e5      	b.n	8023524 <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 8023558:	2001      	movs	r0, #1
 802355a:	e796      	b.n	802348a <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 802355c:	2001      	movs	r0, #1
 802355e:	e794      	b.n	802348a <mg_mqtt_parse+0x60>
 8023560:	2001      	movs	r0, #1
 8023562:	e792      	b.n	802348a <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8023564:	2000      	movs	r0, #0
 8023566:	e790      	b.n	802348a <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 8023568:	2002      	movs	r0, #2
 802356a:	e78e      	b.n	802348a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 802356c:	2002      	movs	r0, #2
 802356e:	e78c      	b.n	802348a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023570:	2002      	movs	r0, #2
 8023572:	e78a      	b.n	802348a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023574:	2002      	movs	r0, #2
 8023576:	e788      	b.n	802348a <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 8023578:	2002      	movs	r0, #2
 802357a:	e786      	b.n	802348a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 802357c:	2002      	movs	r0, #2
 802357e:	e784      	b.n	802348a <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 8023580:	2002      	movs	r0, #2
 8023582:	e782      	b.n	802348a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023584:	2002      	movs	r0, #2
 8023586:	e780      	b.n	802348a <mg_mqtt_parse+0x60>

08023588 <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8023588:	b510      	push	{r4, lr}
 802358a:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 802358c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802358e:	31b0      	adds	r1, #176	@ 0xb0
 8023590:	2001      	movs	r0, #1
 8023592:	f7ff f8f5 	bl	8022780 <mg_calloc>
  if (c != NULL) {
 8023596:	4603      	mov	r3, r0
 8023598:	b148      	cbz	r0, 80235ae <mg_alloc_conn+0x26>
    c->mgr = mgr;
 802359a:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 802359c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80235a0:	6742      	str	r2, [r0, #116]	@ 0x74
 80235a2:	6442      	str	r2, [r0, #68]	@ 0x44
 80235a4:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 80235a6:	69e2      	ldr	r2, [r4, #28]
 80235a8:	3201      	adds	r2, #1
 80235aa:	61e2      	str	r2, [r4, #28]
 80235ac:	6342      	str	r2, [r0, #52]	@ 0x34
}
 80235ae:	4618      	mov	r0, r3
 80235b0:	bd10      	pop	{r4, pc}
	...

080235b4 <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 80235b4:	b510      	push	{r4, lr}
 80235b6:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 80235b8:	2248      	movs	r2, #72	@ 0x48
 80235ba:	2100      	movs	r1, #0
 80235bc:	f009 fa08 	bl	802c9d0 <memset>
  mgr->epoll_fd = -1;
 80235c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80235c4:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 80235c6:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 80235c8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80235cc:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 80235ce:	4b02      	ldr	r3, [pc, #8]	@ (80235d8 <mg_mgr_init+0x24>)
 80235d0:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 80235d2:	4b02      	ldr	r3, [pc, #8]	@ (80235dc <mg_mgr_init+0x28>)
 80235d4:	60e3      	str	r3, [r4, #12]
}
 80235d6:	bd10      	pop	{r4, pc}
 80235d8:	0803a410 	.word	0x0803a410
 80235dc:	0803a424 	.word	0x0803a424

080235e0 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 80235e0:	b40c      	push	{r2, r3}
 80235e2:	b500      	push	{lr}
 80235e4:	b083      	sub	sp, #12
 80235e6:	ab04      	add	r3, sp, #16
 80235e8:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80235ec:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 80235ee:	ab01      	add	r3, sp, #4
 80235f0:	f000 fcde 	bl	8023fb0 <mg_vsnprintf>
}
 80235f4:	b003      	add	sp, #12
 80235f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80235fa:	b002      	add	sp, #8
 80235fc:	4770      	bx	lr
	...

08023600 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8023600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023604:	b093      	sub	sp, #76	@ 0x4c
 8023606:	9005      	str	r0, [sp, #20]
 8023608:	9106      	str	r1, [sp, #24]
 802360a:	ec51 0b10 	vmov	r0, r1, d0
 802360e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8023612:	4690      	mov	r8, r2
 8023614:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8023616:	2200      	movs	r2, #0
 8023618:	2300      	movs	r3, #0
 802361a:	f7ed fa6d 	bl	8010af8 <__aeabi_dcmpeq>
 802361e:	b9c8      	cbnz	r0, 8023654 <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8023620:	ed9d 0b02 	vldr	d0, [sp, #8]
 8023624:	f7fc fab0 	bl	801fb88 <xisinf>
 8023628:	b9d8      	cbnz	r0, 8023662 <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 802362a:	ed9d 0b02 	vldr	d0, [sp, #8]
 802362e:	f7fc fabd 	bl	801fbac <xisnan>
 8023632:	4606      	mov	r6, r0
 8023634:	bb28      	cbnz	r0, 8023682 <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8023636:	2200      	movs	r2, #0
 8023638:	2300      	movs	r3, #0
 802363a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802363e:	4620      	mov	r0, r4
 8023640:	4629      	mov	r1, r5
 8023642:	f7ed fa63 	bl	8010b0c <__aeabi_dcmplt>
 8023646:	bb18      	cbnz	r0, 8023690 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 8023648:	4637      	mov	r7, r6
  mul = 1.0;
 802364a:	2400      	movs	r4, #0
 802364c:	4dba      	ldr	r5, [pc, #744]	@ (8023938 <mg_dtoa+0x338>)
 802364e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8023652:	e02f      	b.n	80236b4 <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8023654:	4bb9      	ldr	r3, [pc, #740]	@ (802393c <mg_dtoa+0x33c>)
 8023656:	4aba      	ldr	r2, [pc, #744]	@ (8023940 <mg_dtoa+0x340>)
 8023658:	9906      	ldr	r1, [sp, #24]
 802365a:	9805      	ldr	r0, [sp, #20]
 802365c:	f7ff ffc0 	bl	80235e0 <mg_snprintf>
 8023660:	e1d3      	b.n	8023a0a <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8023662:	2200      	movs	r2, #0
 8023664:	2300      	movs	r3, #0
 8023666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802366a:	f7ed fa6d 	bl	8010b48 <__aeabi_dcmpgt>
 802366e:	b130      	cbz	r0, 802367e <mg_dtoa+0x7e>
 8023670:	4bb4      	ldr	r3, [pc, #720]	@ (8023944 <mg_dtoa+0x344>)
 8023672:	4ab3      	ldr	r2, [pc, #716]	@ (8023940 <mg_dtoa+0x340>)
 8023674:	9906      	ldr	r1, [sp, #24]
 8023676:	9805      	ldr	r0, [sp, #20]
 8023678:	f7ff ffb2 	bl	80235e0 <mg_snprintf>
 802367c:	e1c5      	b.n	8023a0a <mg_dtoa+0x40a>
 802367e:	4bb2      	ldr	r3, [pc, #712]	@ (8023948 <mg_dtoa+0x348>)
 8023680:	e7f7      	b.n	8023672 <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8023682:	4bb2      	ldr	r3, [pc, #712]	@ (802394c <mg_dtoa+0x34c>)
 8023684:	4aae      	ldr	r2, [pc, #696]	@ (8023940 <mg_dtoa+0x340>)
 8023686:	9906      	ldr	r1, [sp, #24]
 8023688:	9805      	ldr	r0, [sp, #20]
 802368a:	f7ff ffa9 	bl	80235e0 <mg_snprintf>
 802368e:	e1bc      	b.n	8023a0a <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8023690:	4622      	mov	r2, r4
 8023692:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8023696:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802369a:	232d      	movs	r3, #45	@ 0x2d
 802369c:	f88d 3020 	strb.w	r3, [sp, #32]
 80236a0:	2701      	movs	r7, #1
 80236a2:	e7d2      	b.n	802364a <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 80236a4:	2200      	movs	r2, #0
 80236a6:	4baa      	ldr	r3, [pc, #680]	@ (8023950 <mg_dtoa+0x350>)
 80236a8:	4620      	mov	r0, r4
 80236aa:	4629      	mov	r1, r5
 80236ac:	f7ec ffbc 	bl	8010628 <__aeabi_dmul>
 80236b0:	4604      	mov	r4, r0
 80236b2:	460d      	mov	r5, r1
 80236b4:	2200      	movs	r2, #0
 80236b6:	4ba6      	ldr	r3, [pc, #664]	@ (8023950 <mg_dtoa+0x350>)
 80236b8:	4650      	mov	r0, sl
 80236ba:	4659      	mov	r1, fp
 80236bc:	f7ed fa3a 	bl	8010b34 <__aeabi_dcmpge>
 80236c0:	b1b0      	cbz	r0, 80236f0 <mg_dtoa+0xf0>
 80236c2:	4622      	mov	r2, r4
 80236c4:	462b      	mov	r3, r5
 80236c6:	4650      	mov	r0, sl
 80236c8:	4659      	mov	r1, fp
 80236ca:	f7ed f8d7 	bl	801087c <__aeabi_ddiv>
 80236ce:	2200      	movs	r2, #0
 80236d0:	4b9f      	ldr	r3, [pc, #636]	@ (8023950 <mg_dtoa+0x350>)
 80236d2:	f7ed fa2f 	bl	8010b34 <__aeabi_dcmpge>
 80236d6:	2800      	cmp	r0, #0
 80236d8:	d1e4      	bne.n	80236a4 <mg_dtoa+0xa4>
 80236da:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80236de:	e007      	b.n	80236f0 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 80236e0:	2200      	movs	r2, #0
 80236e2:	4b9b      	ldr	r3, [pc, #620]	@ (8023950 <mg_dtoa+0x350>)
 80236e4:	4620      	mov	r0, r4
 80236e6:	4629      	mov	r1, r5
 80236e8:	f7ed f8c8 	bl	801087c <__aeabi_ddiv>
 80236ec:	4604      	mov	r4, r0
 80236ee:	460d      	mov	r5, r1
 80236f0:	2200      	movs	r2, #0
 80236f2:	4b91      	ldr	r3, [pc, #580]	@ (8023938 <mg_dtoa+0x338>)
 80236f4:	4650      	mov	r0, sl
 80236f6:	4659      	mov	r1, fp
 80236f8:	f7ed fa12 	bl	8010b20 <__aeabi_dcmple>
 80236fc:	b158      	cbz	r0, 8023716 <mg_dtoa+0x116>
 80236fe:	4622      	mov	r2, r4
 8023700:	462b      	mov	r3, r5
 8023702:	4650      	mov	r0, sl
 8023704:	4659      	mov	r1, fp
 8023706:	f7ed f8b9 	bl	801087c <__aeabi_ddiv>
 802370a:	2200      	movs	r2, #0
 802370c:	4b8a      	ldr	r3, [pc, #552]	@ (8023938 <mg_dtoa+0x338>)
 802370e:	f7ed fa07 	bl	8010b20 <__aeabi_dcmple>
 8023712:	2800      	cmp	r0, #0
 8023714:	d1e4      	bne.n	80236e0 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8023716:	e9cd ab02 	strd	sl, fp, [sp, #8]
 802371a:	2200      	movs	r2, #0
 802371c:	4b8d      	ldr	r3, [pc, #564]	@ (8023954 <mg_dtoa+0x354>)
 802371e:	4620      	mov	r0, r4
 8023720:	4629      	mov	r1, r5
 8023722:	f7ec ff81 	bl	8010628 <__aeabi_dmul>
 8023726:	4634      	mov	r4, r6
 8023728:	e004      	b.n	8023734 <mg_dtoa+0x134>
 802372a:	2200      	movs	r2, #0
 802372c:	4b88      	ldr	r3, [pc, #544]	@ (8023950 <mg_dtoa+0x350>)
 802372e:	f7ed f8a5 	bl	801087c <__aeabi_ddiv>
 8023732:	3401      	adds	r4, #1
 8023734:	4544      	cmp	r4, r8
 8023736:	dbf8      	blt.n	802372a <mg_dtoa+0x12a>
  d += t;
 8023738:	4602      	mov	r2, r0
 802373a:	460b      	mov	r3, r1
 802373c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023740:	f7ec fdbc 	bl	80102bc <__adddf3>
 8023744:	4682      	mov	sl, r0
 8023746:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 8023748:	46b1      	mov	r9, r6
  mul = 1.0;
 802374a:	2400      	movs	r4, #0
 802374c:	4d7a      	ldr	r5, [pc, #488]	@ (8023938 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 802374e:	e009      	b.n	8023764 <mg_dtoa+0x164>
 8023750:	2200      	movs	r2, #0
 8023752:	4b7f      	ldr	r3, [pc, #508]	@ (8023950 <mg_dtoa+0x350>)
 8023754:	4620      	mov	r0, r4
 8023756:	4629      	mov	r1, r5
 8023758:	f7ec ff66 	bl	8010628 <__aeabi_dmul>
 802375c:	4604      	mov	r4, r0
 802375e:	460d      	mov	r5, r1
 8023760:	f109 0901 	add.w	r9, r9, #1
 8023764:	2200      	movs	r2, #0
 8023766:	4b7a      	ldr	r3, [pc, #488]	@ (8023950 <mg_dtoa+0x350>)
 8023768:	4650      	mov	r0, sl
 802376a:	4659      	mov	r1, fp
 802376c:	f7ed f9e2 	bl	8010b34 <__aeabi_dcmpge>
 8023770:	b1b0      	cbz	r0, 80237a0 <mg_dtoa+0x1a0>
 8023772:	4622      	mov	r2, r4
 8023774:	462b      	mov	r3, r5
 8023776:	4650      	mov	r0, sl
 8023778:	4659      	mov	r1, fp
 802377a:	f7ed f87f 	bl	801087c <__aeabi_ddiv>
 802377e:	2200      	movs	r2, #0
 8023780:	4b73      	ldr	r3, [pc, #460]	@ (8023950 <mg_dtoa+0x350>)
 8023782:	f7ed f9d7 	bl	8010b34 <__aeabi_dcmpge>
 8023786:	2800      	cmp	r0, #0
 8023788:	d1e2      	bne.n	8023750 <mg_dtoa+0x150>
 802378a:	e009      	b.n	80237a0 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 802378c:	2200      	movs	r2, #0
 802378e:	4b70      	ldr	r3, [pc, #448]	@ (8023950 <mg_dtoa+0x350>)
 8023790:	4620      	mov	r0, r4
 8023792:	4629      	mov	r1, r5
 8023794:	f7ed f872 	bl	801087c <__aeabi_ddiv>
 8023798:	4604      	mov	r4, r0
 802379a:	460d      	mov	r5, r1
 802379c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80237a0:	2200      	movs	r2, #0
 80237a2:	4b65      	ldr	r3, [pc, #404]	@ (8023938 <mg_dtoa+0x338>)
 80237a4:	4650      	mov	r0, sl
 80237a6:	4659      	mov	r1, fp
 80237a8:	f7ed f9b0 	bl	8010b0c <__aeabi_dcmplt>
 80237ac:	b158      	cbz	r0, 80237c6 <mg_dtoa+0x1c6>
 80237ae:	4622      	mov	r2, r4
 80237b0:	462b      	mov	r3, r5
 80237b2:	4650      	mov	r0, sl
 80237b4:	4659      	mov	r1, fp
 80237b6:	f7ed f861 	bl	801087c <__aeabi_ddiv>
 80237ba:	2200      	movs	r2, #0
 80237bc:	4b5e      	ldr	r3, [pc, #376]	@ (8023938 <mg_dtoa+0x338>)
 80237be:	f7ed f9a5 	bl	8010b0c <__aeabi_dcmplt>
 80237c2:	2800      	cmp	r0, #0
 80237c4:	d1e2      	bne.n	802378c <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 80237c6:	45c1      	cmp	r9, r8
 80237c8:	db02      	blt.n	80237d0 <mg_dtoa+0x1d0>
 80237ca:	f1b8 0f01 	cmp.w	r8, #1
 80237ce:	dc25      	bgt.n	802381c <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 80237d0:	f1c8 0300 	rsb	r3, r8, #0
 80237d4:	454b      	cmp	r3, r9
 80237d6:	db5e      	blt.n	8023896 <mg_dtoa+0x296>
 80237d8:	f1b8 0f01 	cmp.w	r8, #1
 80237dc:	dd5b      	ble.n	8023896 <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80237de:	4622      	mov	r2, r4
 80237e0:	462b      	mov	r3, r5
 80237e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80237e6:	f7ed f849 	bl	801087c <__aeabi_ddiv>
 80237ea:	ad08      	add	r5, sp, #32
 80237ec:	9b07      	ldr	r3, [sp, #28]
 80237ee:	4642      	mov	r2, r8
 80237f0:	ec41 0b10 	vmov	d0, r0, r1
 80237f4:	2128      	movs	r1, #40	@ 0x28
 80237f6:	4628      	mov	r0, r5
 80237f8:	f7ff ff02 	bl	8023600 <mg_dtoa>
 80237fc:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 80237fe:	1838      	adds	r0, r7, r0
 8023800:	222d      	movs	r2, #45	@ 0x2d
 8023802:	f1c9 0100 	rsb	r1, r9, #0
 8023806:	4428      	add	r0, r5
 8023808:	f7fc f984 	bl	801fb14 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 802380c:	9500      	str	r5, [sp, #0]
 802380e:	1823      	adds	r3, r4, r0
 8023810:	4a51      	ldr	r2, [pc, #324]	@ (8023958 <mg_dtoa+0x358>)
 8023812:	9906      	ldr	r1, [sp, #24]
 8023814:	9805      	ldr	r0, [sp, #20]
 8023816:	f7ff fee3 	bl	80235e0 <mg_snprintf>
 802381a:	e0f6      	b.n	8023a0a <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 802381c:	4622      	mov	r2, r4
 802381e:	462b      	mov	r3, r5
 8023820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023824:	f7ed f82a 	bl	801087c <__aeabi_ddiv>
 8023828:	ad08      	add	r5, sp, #32
 802382a:	9b07      	ldr	r3, [sp, #28]
 802382c:	4642      	mov	r2, r8
 802382e:	ec41 0b10 	vmov	d0, r0, r1
 8023832:	2128      	movs	r1, #40	@ 0x28
 8023834:	4628      	mov	r0, r5
 8023836:	f7ff fee3 	bl	8023600 <mg_dtoa>
 802383a:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 802383c:	1838      	adds	r0, r7, r0
 802383e:	222b      	movs	r2, #43	@ 0x2b
 8023840:	4649      	mov	r1, r9
 8023842:	4428      	add	r0, r5
 8023844:	f7fc f966 	bl	801fb14 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8023848:	9500      	str	r5, [sp, #0]
 802384a:	1823      	adds	r3, r4, r0
 802384c:	4a42      	ldr	r2, [pc, #264]	@ (8023958 <mg_dtoa+0x358>)
 802384e:	9906      	ldr	r1, [sp, #24]
 8023850:	9805      	ldr	r0, [sp, #20]
 8023852:	f7ff fec5 	bl	80235e0 <mg_snprintf>
 8023856:	e0d8      	b.n	8023a0a <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8023858:	3601      	adds	r6, #1
 802385a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 802385e:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8023862:	eb0d 0902 	add.w	r9, sp, r2
 8023866:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 802386a:	f7ec fe73 	bl	8010554 <__aeabi_i2d>
 802386e:	4622      	mov	r2, r4
 8023870:	462b      	mov	r3, r5
 8023872:	f7ec fed9 	bl	8010628 <__aeabi_dmul>
 8023876:	4602      	mov	r2, r0
 8023878:	460b      	mov	r3, r1
 802387a:	4650      	mov	r0, sl
 802387c:	4659      	mov	r1, fp
 802387e:	f7ec fd1b 	bl	80102b8 <__aeabi_dsub>
 8023882:	4682      	mov	sl, r0
 8023884:	468b      	mov	fp, r1
      t /= 10.0;
 8023886:	2200      	movs	r2, #0
 8023888:	4b31      	ldr	r3, [pc, #196]	@ (8023950 <mg_dtoa+0x350>)
 802388a:	4620      	mov	r0, r4
 802388c:	4629      	mov	r1, r5
 802388e:	f7ec fff5 	bl	801087c <__aeabi_ddiv>
 8023892:	4604      	mov	r4, r0
 8023894:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8023896:	2200      	movs	r2, #0
 8023898:	4b27      	ldr	r3, [pc, #156]	@ (8023938 <mg_dtoa+0x338>)
 802389a:	4620      	mov	r0, r4
 802389c:	4629      	mov	r1, r5
 802389e:	f7ed f949 	bl	8010b34 <__aeabi_dcmpge>
 80238a2:	b188      	cbz	r0, 80238c8 <mg_dtoa+0x2c8>
 80238a4:	eb07 0906 	add.w	r9, r7, r6
 80238a8:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 80238ac:	dc0c      	bgt.n	80238c8 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 80238ae:	4622      	mov	r2, r4
 80238b0:	462b      	mov	r3, r5
 80238b2:	4650      	mov	r0, sl
 80238b4:	4659      	mov	r1, fp
 80238b6:	f7ec ffe1 	bl	801087c <__aeabi_ddiv>
 80238ba:	f7ed f965 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 80238be:	2e00      	cmp	r6, #0
 80238c0:	dcca      	bgt.n	8023858 <mg_dtoa+0x258>
 80238c2:	2800      	cmp	r0, #0
 80238c4:	dcc8      	bgt.n	8023858 <mg_dtoa+0x258>
 80238c6:	e7d0      	b.n	802386a <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 80238c8:	b9ce      	cbnz	r6, 80238fe <mg_dtoa+0x2fe>
 80238ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80238ce:	446b      	add	r3, sp
 80238d0:	2230      	movs	r2, #48	@ 0x30
 80238d2:	f803 2c28 	strb.w	r2, [r3, #-40]
 80238d6:	3701      	adds	r7, #1
 80238d8:	e011      	b.n	80238fe <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 80238da:	f106 0901 	add.w	r9, r6, #1
 80238de:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 80238e2:	eb0d 0603 	add.w	r6, sp, r3
 80238e6:	2330      	movs	r3, #48	@ 0x30
 80238e8:	f806 3c28 	strb.w	r3, [r6, #-40]
 80238ec:	2200      	movs	r2, #0
 80238ee:	4b18      	ldr	r3, [pc, #96]	@ (8023950 <mg_dtoa+0x350>)
 80238f0:	4620      	mov	r0, r4
 80238f2:	4629      	mov	r1, r5
 80238f4:	f7ec ffc2 	bl	801087c <__aeabi_ddiv>
 80238f8:	4604      	mov	r4, r0
 80238fa:	460d      	mov	r5, r1
 80238fc:	464e      	mov	r6, r9
 80238fe:	2200      	movs	r2, #0
 8023900:	4b0d      	ldr	r3, [pc, #52]	@ (8023938 <mg_dtoa+0x338>)
 8023902:	4620      	mov	r0, r4
 8023904:	4629      	mov	r1, r5
 8023906:	f7ed f915 	bl	8010b34 <__aeabi_dcmpge>
 802390a:	b110      	cbz	r0, 8023912 <mg_dtoa+0x312>
 802390c:	19f3      	adds	r3, r6, r7
 802390e:	2b27      	cmp	r3, #39	@ 0x27
 8023910:	dde3      	ble.n	80238da <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8023912:	19f3      	adds	r3, r6, r7
 8023914:	2b27      	cmp	r3, #39	@ 0x27
 8023916:	dc05      	bgt.n	8023924 <mg_dtoa+0x324>
 8023918:	3701      	adds	r7, #1
 802391a:	3348      	adds	r3, #72	@ 0x48
 802391c:	446b      	add	r3, sp
 802391e:	222e      	movs	r2, #46	@ 0x2e
 8023920:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8023924:	a502      	add	r5, pc, #8	@ (adr r5, 8023930 <mg_dtoa+0x330>)
 8023926:	e9d5 4500 	ldrd	r4, r5, [r5]
 802392a:	e03e      	b.n	80239aa <mg_dtoa+0x3aa>
 802392c:	f3af 8000 	nop.w
 8023930:	9999999a 	.word	0x9999999a
 8023934:	3fb99999 	.word	0x3fb99999
 8023938:	3ff00000 	.word	0x3ff00000
 802393c:	08039738 	.word	0x08039738
 8023940:	0803b01c 	.word	0x0803b01c
 8023944:	0803a444 	.word	0x0803a444
 8023948:	0803a448 	.word	0x0803a448
 802394c:	0803a450 	.word	0x0803a450
 8023950:	40240000 	.word	0x40240000
 8023954:	40140000 	.word	0x40140000
 8023958:	0803a454 	.word	0x0803a454
      int ch = (int) (d / t);
 802395c:	4622      	mov	r2, r4
 802395e:	462b      	mov	r3, r5
 8023960:	4650      	mov	r0, sl
 8023962:	4659      	mov	r1, fp
 8023964:	f7ec ff8a 	bl	801087c <__aeabi_ddiv>
 8023968:	f7ed f90e 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 802396c:	3601      	adds	r6, #1
 802396e:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8023972:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8023976:	eb0d 0902 	add.w	r9, sp, r2
 802397a:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 802397e:	f7ec fde9 	bl	8010554 <__aeabi_i2d>
 8023982:	4622      	mov	r2, r4
 8023984:	462b      	mov	r3, r5
 8023986:	f7ec fe4f 	bl	8010628 <__aeabi_dmul>
 802398a:	4602      	mov	r2, r0
 802398c:	460b      	mov	r3, r1
 802398e:	4650      	mov	r0, sl
 8023990:	4659      	mov	r1, fp
 8023992:	f7ec fc91 	bl	80102b8 <__aeabi_dsub>
 8023996:	4682      	mov	sl, r0
 8023998:	468b      	mov	fp, r1
      t /= 10.0;
 802399a:	2200      	movs	r2, #0
 802399c:	4b1d      	ldr	r3, [pc, #116]	@ (8023a14 <mg_dtoa+0x414>)
 802399e:	4620      	mov	r0, r4
 80239a0:	4629      	mov	r1, r5
 80239a2:	f7ec ff6b 	bl	801087c <__aeabi_ddiv>
 80239a6:	4604      	mov	r4, r0
 80239a8:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80239aa:	eb07 0906 	add.w	r9, r7, r6
 80239ae:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 80239b2:	dc03      	bgt.n	80239bc <mg_dtoa+0x3bc>
 80239b4:	4546      	cmp	r6, r8
 80239b6:	dbd1      	blt.n	802395c <mg_dtoa+0x35c>
 80239b8:	9a07      	ldr	r2, [sp, #28]
 80239ba:	e000      	b.n	80239be <mg_dtoa+0x3be>
 80239bc:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 80239be:	b152      	cbz	r2, 80239d6 <mg_dtoa+0x3d6>
 80239c0:	2e00      	cmp	r6, #0
 80239c2:	dd08      	ble.n	80239d6 <mg_dtoa+0x3d6>
 80239c4:	19bb      	adds	r3, r7, r6
 80239c6:	3347      	adds	r3, #71	@ 0x47
 80239c8:	446b      	add	r3, sp
 80239ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80239ce:	2b30      	cmp	r3, #48	@ 0x30
 80239d0:	d101      	bne.n	80239d6 <mg_dtoa+0x3d6>
 80239d2:	3e01      	subs	r6, #1
 80239d4:	e7f3      	b.n	80239be <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80239d6:	2e00      	cmp	r6, #0
 80239d8:	dd06      	ble.n	80239e8 <mg_dtoa+0x3e8>
 80239da:	19bb      	adds	r3, r7, r6
 80239dc:	3347      	adds	r3, #71	@ 0x47
 80239de:	446b      	add	r3, sp
 80239e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80239e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80239e6:	d013      	beq.n	8023a10 <mg_dtoa+0x410>
  n += s;
 80239e8:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 80239ea:	2f27      	cmp	r7, #39	@ 0x27
 80239ec:	dd00      	ble.n	80239f0 <mg_dtoa+0x3f0>
 80239ee:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 80239f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80239f4:	eb0d 0703 	add.w	r7, sp, r3
 80239f8:	2300      	movs	r3, #0
 80239fa:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 80239fe:	ab08      	add	r3, sp, #32
 8023a00:	4a05      	ldr	r2, [pc, #20]	@ (8023a18 <mg_dtoa+0x418>)
 8023a02:	9906      	ldr	r1, [sp, #24]
 8023a04:	9805      	ldr	r0, [sp, #20]
 8023a06:	f7ff fdeb 	bl	80235e0 <mg_snprintf>
}
 8023a0a:	b013      	add	sp, #76	@ 0x4c
 8023a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8023a10:	3e01      	subs	r6, #1
 8023a12:	e7e9      	b.n	80239e8 <mg_dtoa+0x3e8>
 8023a14:	40240000 	.word	0x40240000
 8023a18:	0803b01c 	.word	0x0803b01c

08023a1c <mg_vxprintf>:
                   va_list *ap) {
 8023a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a20:	b093      	sub	sp, #76	@ 0x4c
 8023a22:	4681      	mov	r9, r0
 8023a24:	468a      	mov	sl, r1
 8023a26:	4693      	mov	fp, r2
 8023a28:	9303      	str	r3, [sp, #12]
  size_t i = 0, n = 0;
 8023a2a:	2700      	movs	r7, #0
 8023a2c:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 8023a2e:	e1bc      	b.n	8023daa <mg_vxprintf+0x38e>
      char pad = ' ', minus = 0, c = fmt[++i];
 8023a30:	2320      	movs	r3, #32
 8023a32:	f88d 301f 	strb.w	r3, [sp, #31]
 8023a36:	1c66      	adds	r6, r4, #1
 8023a38:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 8023a3c:	2d23      	cmp	r5, #35	@ 0x23
 8023a3e:	d00c      	beq.n	8023a5a <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8023a40:	2300      	movs	r3, #0
 8023a42:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 8023a44:	2d2d      	cmp	r5, #45	@ 0x2d
 8023a46:	d10e      	bne.n	8023a66 <mg_vxprintf+0x4a>
 8023a48:	3601      	adds	r6, #1
 8023a4a:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023a4e:	2301      	movs	r3, #1
 8023a50:	9304      	str	r3, [sp, #16]
      if (c == '0') pad = '0', c = fmt[++i];
 8023a52:	2d30      	cmp	r5, #48	@ 0x30
 8023a54:	d00a      	beq.n	8023a6c <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 8023a56:	2400      	movs	r4, #0
 8023a58:	e017      	b.n	8023a8a <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 8023a5a:	1ca6      	adds	r6, r4, #2
 8023a5c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023a60:	2301      	movs	r3, #1
 8023a62:	9302      	str	r3, [sp, #8]
 8023a64:	e7ee      	b.n	8023a44 <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 8023a66:	2300      	movs	r3, #0
 8023a68:	9304      	str	r3, [sp, #16]
 8023a6a:	e7f2      	b.n	8023a52 <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 8023a6c:	2330      	movs	r3, #48	@ 0x30
 8023a6e:	f88d 301f 	strb.w	r3, [sp, #31]
 8023a72:	3601      	adds	r6, #1
 8023a74:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023a78:	e7ed      	b.n	8023a56 <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8023a7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8023a7e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8023a82:	3c30      	subs	r4, #48	@ 0x30
 8023a84:	3601      	adds	r6, #1
 8023a86:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023a8a:	4628      	mov	r0, r5
 8023a8c:	f7fc f83b 	bl	801fb06 <is_digit>
 8023a90:	4601      	mov	r1, r0
 8023a92:	2800      	cmp	r0, #0
 8023a94:	d1f1      	bne.n	8023a7a <mg_vxprintf+0x5e>
      if (c == '.') {
 8023a96:	2d2e      	cmp	r5, #46	@ 0x2e
 8023a98:	d002      	beq.n	8023aa0 <mg_vxprintf+0x84>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8023a9a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8023a9e:	e026      	b.n	8023aee <mg_vxprintf+0xd2>
        c = fmt[++i];
 8023aa0:	1c73      	adds	r3, r6, #1
 8023aa2:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 8023aa6:	2d2a      	cmp	r5, #42	@ 0x2a
 8023aa8:	d119      	bne.n	8023ade <mg_vxprintf+0xc2>
          pr = (size_t) va_arg(*ap, int);
 8023aaa:	9803      	ldr	r0, [sp, #12]
 8023aac:	6803      	ldr	r3, [r0, #0]
 8023aae:	1d1a      	adds	r2, r3, #4
 8023ab0:	6002      	str	r2, [r0, #0]
 8023ab2:	f8d3 8000 	ldr.w	r8, [r3]
          c = fmt[++i];
 8023ab6:	3602      	adds	r6, #2
 8023ab8:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023abc:	e017      	b.n	8023aee <mg_vxprintf+0xd2>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8023abe:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8023ac2:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 8023ac6:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 8023aca:	3601      	adds	r6, #1
 8023acc:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023ad0:	4628      	mov	r0, r5
 8023ad2:	f7fc f818 	bl	801fb06 <is_digit>
 8023ad6:	2800      	cmp	r0, #0
 8023ad8:	d1f1      	bne.n	8023abe <mg_vxprintf+0xa2>
 8023ada:	9905      	ldr	r1, [sp, #20]
 8023adc:	e007      	b.n	8023aee <mg_vxprintf+0xd2>
          pr = 0;
 8023ade:	f04f 0800 	mov.w	r8, #0
 8023ae2:	461e      	mov	r6, r3
 8023ae4:	9005      	str	r0, [sp, #20]
 8023ae6:	e7f3      	b.n	8023ad0 <mg_vxprintf+0xb4>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8023ae8:	3601      	adds	r6, #1
 8023aea:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023aee:	2d68      	cmp	r5, #104	@ 0x68
 8023af0:	d0fa      	beq.n	8023ae8 <mg_vxprintf+0xcc>
      if (c == 'l') {
 8023af2:	2d6c      	cmp	r5, #108	@ 0x6c
 8023af4:	d05f      	beq.n	8023bb6 <mg_vxprintf+0x19a>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8023af6:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 8023af8:	2d70      	cmp	r5, #112	@ 0x70
 8023afa:	d069      	beq.n	8023bd0 <mg_vxprintf+0x1b4>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8023afc:	2d64      	cmp	r5, #100	@ 0x64
 8023afe:	d06a      	beq.n	8023bd6 <mg_vxprintf+0x1ba>
 8023b00:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 8023b04:	2b53      	cmp	r3, #83	@ 0x53
 8023b06:	f200 81bc 	bhi.w	8023e82 <mg_vxprintf+0x466>
 8023b0a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023b0e:	01b5      	.short	0x01b5
 8023b10:	01ba01ba 	.word	0x01ba01ba
 8023b14:	01ba01ba 	.word	0x01ba01ba
 8023b18:	01ba01ba 	.word	0x01ba01ba
 8023b1c:	01ba01ba 	.word	0x01ba01ba
 8023b20:	01ba01ba 	.word	0x01ba01ba
 8023b24:	01ba01ba 	.word	0x01ba01ba
 8023b28:	01ba01ba 	.word	0x01ba01ba
 8023b2c:	01ba01ba 	.word	0x01ba01ba
 8023b30:	01ba01ba 	.word	0x01ba01ba
 8023b34:	01ba01ba 	.word	0x01ba01ba
 8023b38:	01ba01ba 	.word	0x01ba01ba
 8023b3c:	01ba01ba 	.word	0x01ba01ba
 8023b40:	01ba01ba 	.word	0x01ba01ba
 8023b44:	01ba01ba 	.word	0x01ba01ba
 8023b48:	01ba01ba 	.word	0x01ba01ba
 8023b4c:	01ba01ba 	.word	0x01ba01ba
 8023b50:	01ba01ba 	.word	0x01ba01ba
 8023b54:	01ba01ba 	.word	0x01ba01ba
 8023b58:	01ba01ba 	.word	0x01ba01ba
 8023b5c:	014101ba 	.word	0x014101ba
 8023b60:	01ba01ba 	.word	0x01ba01ba
 8023b64:	01ba01ba 	.word	0x01ba01ba
 8023b68:	01ba01ba 	.word	0x01ba01ba
 8023b6c:	01ba01ba 	.word	0x01ba01ba
 8023b70:	01ba01ba 	.word	0x01ba01ba
 8023b74:	01ba0065 	.word	0x01ba0065
 8023b78:	01ba01ba 	.word	0x01ba01ba
 8023b7c:	01ba01ba 	.word	0x01ba01ba
 8023b80:	01ba01ba 	.word	0x01ba01ba
 8023b84:	01ba01ba 	.word	0x01ba01ba
 8023b88:	016801ba 	.word	0x016801ba
 8023b8c:	01ba01ba 	.word	0x01ba01ba
 8023b90:	00650065 	.word	0x00650065
 8023b94:	01ba01ba 	.word	0x01ba01ba
 8023b98:	01ba01ba 	.word	0x01ba01ba
 8023b9c:	015a01ba 	.word	0x015a01ba
 8023ba0:	01ba01ba 	.word	0x01ba01ba
 8023ba4:	01ba0065 	.word	0x01ba0065
 8023ba8:	017101ba 	.word	0x017101ba
 8023bac:	006501ba 	.word	0x006501ba
 8023bb0:	01ba01ba 	.word	0x01ba01ba
 8023bb4:	008d      	.short	0x008d
        is_long++, c = fmt[++i];
 8023bb6:	1c73      	adds	r3, r6, #1
 8023bb8:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 8023bbc:	2d6c      	cmp	r5, #108	@ 0x6c
 8023bbe:	d002      	beq.n	8023bc6 <mg_vxprintf+0x1aa>
        is_long++, c = fmt[++i];
 8023bc0:	461e      	mov	r6, r3
 8023bc2:	2201      	movs	r2, #1
 8023bc4:	e798      	b.n	8023af8 <mg_vxprintf+0xdc>
        if (c == 'l') is_long++, c = fmt[++i];
 8023bc6:	3602      	adds	r6, #2
 8023bc8:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023bcc:	2202      	movs	r2, #2
 8023bce:	e793      	b.n	8023af8 <mg_vxprintf+0xdc>
      if (c == 'p') x = 1, is_long = 1;
 8023bd0:	2201      	movs	r2, #1
 8023bd2:	9202      	str	r2, [sp, #8]
 8023bd4:	e792      	b.n	8023afc <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023bd6:	2101      	movs	r1, #1
 8023bd8:	2d58      	cmp	r5, #88	@ 0x58
 8023bda:	d027      	beq.n	8023c2c <mg_vxprintf+0x210>
 8023bdc:	2d70      	cmp	r5, #112	@ 0x70
 8023bde:	d021      	beq.n	8023c24 <mg_vxprintf+0x208>
 8023be0:	2300      	movs	r3, #0
 8023be2:	4618      	mov	r0, r3
        size_t xl = x ? 2 : 0;
 8023be4:	9b02      	ldr	r3, [sp, #8]
 8023be6:	b10b      	cbz	r3, 8023bec <mg_vxprintf+0x1d0>
 8023be8:	2302      	movs	r3, #2
 8023bea:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 8023bec:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 8023bf0:	b2db      	uxtb	r3, r3
 8023bf2:	2b01      	cmp	r3, #1
 8023bf4:	d91c      	bls.n	8023c30 <mg_vxprintf+0x214>
        } else if (is_long == 2) {
 8023bf6:	2a02      	cmp	r2, #2
 8023bf8:	d037      	beq.n	8023c6a <mg_vxprintf+0x24e>
        } else if (is_long == 1) {
 8023bfa:	2a01      	cmp	r2, #1
 8023bfc:	d046      	beq.n	8023c8c <mg_vxprintf+0x270>
          int v = va_arg(*ap, int);
 8023bfe:	9b03      	ldr	r3, [sp, #12]
 8023c00:	f8d3 c000 	ldr.w	ip, [r3]
 8023c04:	f10c 0204 	add.w	r2, ip, #4
 8023c08:	601a      	str	r2, [r3, #0]
 8023c0a:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8023c0e:	2d64      	cmp	r5, #100	@ 0x64
 8023c10:	d052      	beq.n	8023cb8 <mg_vxprintf+0x29c>
 8023c12:	461a      	mov	r2, r3
 8023c14:	2300      	movs	r3, #0
 8023c16:	9001      	str	r0, [sp, #4]
 8023c18:	9100      	str	r1, [sp, #0]
 8023c1a:	a808      	add	r0, sp, #32
 8023c1c:	f7fb ffd6 	bl	801fbcc <mg_lld>
 8023c20:	4605      	mov	r5, r0
 8023c22:	e01c      	b.n	8023c5e <mg_vxprintf+0x242>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023c24:	2301      	movs	r3, #1
 8023c26:	e7dc      	b.n	8023be2 <mg_vxprintf+0x1c6>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8023c28:	2301      	movs	r3, #1
 8023c2a:	e7da      	b.n	8023be2 <mg_vxprintf+0x1c6>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023c2c:	2301      	movs	r3, #1
 8023c2e:	e7d8      	b.n	8023be2 <mg_vxprintf+0x1c6>
          double v = va_arg(*ap, double);
 8023c30:	9903      	ldr	r1, [sp, #12]
 8023c32:	680b      	ldr	r3, [r1, #0]
 8023c34:	3307      	adds	r3, #7
 8023c36:	f023 0307 	bic.w	r3, r3, #7
 8023c3a:	f103 0208 	add.w	r2, r3, #8
 8023c3e:	600a      	str	r2, [r1, #0]
 8023c40:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 8023c44:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8023c48:	d00c      	beq.n	8023c64 <mg_vxprintf+0x248>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8023c4a:	2d67      	cmp	r5, #103	@ 0x67
 8023c4c:	bf14      	ite	ne
 8023c4e:	2300      	movne	r3, #0
 8023c50:	2301      	moveq	r3, #1
 8023c52:	4642      	mov	r2, r8
 8023c54:	2128      	movs	r1, #40	@ 0x28
 8023c56:	a808      	add	r0, sp, #32
 8023c58:	f7ff fcd2 	bl	8023600 <mg_dtoa>
 8023c5c:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 8023c5e:	2300      	movs	r3, #0
 8023c60:	9a02      	ldr	r2, [sp, #8]
 8023c62:	e02e      	b.n	8023cc2 <mg_vxprintf+0x2a6>
          if (pr == ~0U) pr = 6;
 8023c64:	f04f 0806 	mov.w	r8, #6
 8023c68:	e7ef      	b.n	8023c4a <mg_vxprintf+0x22e>
          int64_t v = va_arg(*ap, int64_t);
 8023c6a:	9d03      	ldr	r5, [sp, #12]
 8023c6c:	682b      	ldr	r3, [r5, #0]
 8023c6e:	3307      	adds	r3, #7
 8023c70:	f023 0307 	bic.w	r3, r3, #7
 8023c74:	f103 0208 	add.w	r2, r3, #8
 8023c78:	602a      	str	r2, [r5, #0]
 8023c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 8023c7e:	9001      	str	r0, [sp, #4]
 8023c80:	9100      	str	r1, [sp, #0]
 8023c82:	a808      	add	r0, sp, #32
 8023c84:	f7fb ffa2 	bl	801fbcc <mg_lld>
 8023c88:	4605      	mov	r5, r0
 8023c8a:	e7e8      	b.n	8023c5e <mg_vxprintf+0x242>
          long v = va_arg(*ap, long);
 8023c8c:	9b03      	ldr	r3, [sp, #12]
 8023c8e:	f8d3 c000 	ldr.w	ip, [r3]
 8023c92:	f10c 0204 	add.w	r2, ip, #4
 8023c96:	601a      	str	r2, [r3, #0]
 8023c98:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8023c9c:	2d64      	cmp	r5, #100	@ 0x64
 8023c9e:	d008      	beq.n	8023cb2 <mg_vxprintf+0x296>
 8023ca0:	461a      	mov	r2, r3
 8023ca2:	2300      	movs	r3, #0
 8023ca4:	9001      	str	r0, [sp, #4]
 8023ca6:	9100      	str	r1, [sp, #0]
 8023ca8:	a808      	add	r0, sp, #32
 8023caa:	f7fb ff8f 	bl	801fbcc <mg_lld>
 8023cae:	4605      	mov	r5, r0
 8023cb0:	e7d5      	b.n	8023c5e <mg_vxprintf+0x242>
 8023cb2:	461a      	mov	r2, r3
 8023cb4:	17db      	asrs	r3, r3, #31
 8023cb6:	e7f5      	b.n	8023ca4 <mg_vxprintf+0x288>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8023cb8:	461a      	mov	r2, r3
 8023cba:	17db      	asrs	r3, r3, #31
 8023cbc:	e7ab      	b.n	8023c16 <mg_vxprintf+0x1fa>
        for (j = 0; j < xl && w > 0; j++) w--;
 8023cbe:	3c01      	subs	r4, #1
 8023cc0:	3301      	adds	r3, #1
 8023cc2:	4293      	cmp	r3, r2
 8023cc4:	d225      	bcs.n	8023d12 <mg_vxprintf+0x2f6>
 8023cc6:	2c00      	cmp	r4, #0
 8023cc8:	d1f9      	bne.n	8023cbe <mg_vxprintf+0x2a2>
 8023cca:	46a0      	mov	r8, r4
 8023ccc:	9605      	str	r6, [sp, #20]
 8023cce:	9e04      	ldr	r6, [sp, #16]
 8023cd0:	e009      	b.n	8023ce6 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8023cd2:	2301      	movs	r3, #1
 8023cd4:	f10d 021f 	add.w	r2, sp, #31
 8023cd8:	4651      	mov	r1, sl
 8023cda:	4648      	mov	r0, r9
 8023cdc:	f7fc f80c 	bl	801fcf8 <scpy>
 8023ce0:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8023ce2:	f108 0801 	add.w	r8, r8, #1
 8023ce6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023cea:	2b20      	cmp	r3, #32
 8023cec:	d106      	bne.n	8023cfc <mg_vxprintf+0x2e0>
 8023cee:	b92e      	cbnz	r6, 8023cfc <mg_vxprintf+0x2e0>
 8023cf0:	42a5      	cmp	r5, r4
 8023cf2:	d203      	bcs.n	8023cfc <mg_vxprintf+0x2e0>
 8023cf4:	eb08 0305 	add.w	r3, r8, r5
 8023cf8:	42a3      	cmp	r3, r4
 8023cfa:	d3ea      	bcc.n	8023cd2 <mg_vxprintf+0x2b6>
        n += scpy(out, param, (char *) "0x", xl);
 8023cfc:	9e05      	ldr	r6, [sp, #20]
 8023cfe:	9b02      	ldr	r3, [sp, #8]
 8023d00:	4a6b      	ldr	r2, [pc, #428]	@ (8023eb0 <mg_vxprintf+0x494>)
 8023d02:	4651      	mov	r1, sl
 8023d04:	4648      	mov	r0, r9
 8023d06:	f7fb fff7 	bl	801fcf8 <scpy>
 8023d0a:	eb07 0800 	add.w	r8, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8023d0e:	2700      	movs	r7, #0
 8023d10:	e00d      	b.n	8023d2e <mg_vxprintf+0x312>
 8023d12:	f04f 0800 	mov.w	r8, #0
 8023d16:	9605      	str	r6, [sp, #20]
 8023d18:	9e04      	ldr	r6, [sp, #16]
 8023d1a:	e7e4      	b.n	8023ce6 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8023d1c:	2301      	movs	r3, #1
 8023d1e:	f10d 021f 	add.w	r2, sp, #31
 8023d22:	4651      	mov	r1, sl
 8023d24:	4648      	mov	r0, r9
 8023d26:	f7fb ffe7 	bl	801fcf8 <scpy>
 8023d2a:	4480      	add	r8, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8023d2c:	3701      	adds	r7, #1
 8023d2e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023d32:	2b30      	cmp	r3, #48	@ 0x30
 8023d34:	d104      	bne.n	8023d40 <mg_vxprintf+0x324>
 8023d36:	42a5      	cmp	r5, r4
 8023d38:	d202      	bcs.n	8023d40 <mg_vxprintf+0x324>
 8023d3a:	197b      	adds	r3, r7, r5
 8023d3c:	42a3      	cmp	r3, r4
 8023d3e:	d3ed      	bcc.n	8023d1c <mg_vxprintf+0x300>
        n += scpy(out, param, tmp, k);
 8023d40:	462b      	mov	r3, r5
 8023d42:	aa08      	add	r2, sp, #32
 8023d44:	4651      	mov	r1, sl
 8023d46:	4648      	mov	r0, r9
 8023d48:	f7fb ffd6 	bl	801fcf8 <scpy>
 8023d4c:	eb08 0700 	add.w	r7, r8, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8023d50:	f04f 0800 	mov.w	r8, #0
 8023d54:	9602      	str	r6, [sp, #8]
 8023d56:	9e04      	ldr	r6, [sp, #16]
 8023d58:	e009      	b.n	8023d6e <mg_vxprintf+0x352>
          n += scpy(out, param, &pad, 1);
 8023d5a:	2301      	movs	r3, #1
 8023d5c:	f10d 021f 	add.w	r2, sp, #31
 8023d60:	4651      	mov	r1, sl
 8023d62:	4648      	mov	r0, r9
 8023d64:	f7fb ffc8 	bl	801fcf8 <scpy>
 8023d68:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8023d6a:	f108 0801 	add.w	r8, r8, #1
 8023d6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023d72:	2b20      	cmp	r3, #32
 8023d74:	f040 808d 	bne.w	8023e92 <mg_vxprintf+0x476>
 8023d78:	2e00      	cmp	r6, #0
 8023d7a:	f000 808c 	beq.w	8023e96 <mg_vxprintf+0x47a>
 8023d7e:	42a5      	cmp	r5, r4
 8023d80:	f080 808b 	bcs.w	8023e9a <mg_vxprintf+0x47e>
 8023d84:	eb08 0305 	add.w	r3, r8, r5
 8023d88:	42a3      	cmp	r3, r4
 8023d8a:	d3e6      	bcc.n	8023d5a <mg_vxprintf+0x33e>
 8023d8c:	9e02      	ldr	r6, [sp, #8]
 8023d8e:	e00b      	b.n	8023da8 <mg_vxprintf+0x38c>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8023d90:	9903      	ldr	r1, [sp, #12]
 8023d92:	680b      	ldr	r3, [r1, #0]
 8023d94:	1d1a      	adds	r2, r3, #4
 8023d96:	600a      	str	r2, [r1, #0]
 8023d98:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 8023d9a:	9a03      	ldr	r2, [sp, #12]
 8023d9c:	4651      	mov	r1, sl
 8023d9e:	4648      	mov	r0, r9
 8023da0:	47a0      	blx	r4
 8023da2:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 8023da4:	2d6d      	cmp	r5, #109	@ 0x6d
 8023da6:	d015      	beq.n	8023dd4 <mg_vxprintf+0x3b8>
      i++;
 8023da8:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 8023daa:	f81b 0004 	ldrb.w	r0, [fp, r4]
 8023dae:	2800      	cmp	r0, #0
 8023db0:	d079      	beq.n	8023ea6 <mg_vxprintf+0x48a>
    if (fmt[i] == '%') {
 8023db2:	2825      	cmp	r0, #37	@ 0x25
 8023db4:	f43f ae3c 	beq.w	8023a30 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 8023db8:	4651      	mov	r1, sl
 8023dba:	47c8      	blx	r9
 8023dbc:	3701      	adds	r7, #1
 8023dbe:	3401      	adds	r4, #1
 8023dc0:	e7f3      	b.n	8023daa <mg_vxprintf+0x38e>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8023dc2:	9903      	ldr	r1, [sp, #12]
 8023dc4:	680b      	ldr	r3, [r1, #0]
 8023dc6:	1d1a      	adds	r2, r3, #4
 8023dc8:	600a      	str	r2, [r1, #0]
 8023dca:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 8023dcc:	4651      	mov	r1, sl
 8023dce:	2022      	movs	r0, #34	@ 0x22
 8023dd0:	47c8      	blx	r9
 8023dd2:	e7e2      	b.n	8023d9a <mg_vxprintf+0x37e>
        if (c == 'm') n += 2, out('"', param);
 8023dd4:	3702      	adds	r7, #2
 8023dd6:	4651      	mov	r1, sl
 8023dd8:	2022      	movs	r0, #34	@ 0x22
 8023dda:	47c8      	blx	r9
 8023ddc:	e7e4      	b.n	8023da8 <mg_vxprintf+0x38c>
        int ch = va_arg(*ap, int);
 8023dde:	9903      	ldr	r1, [sp, #12]
 8023de0:	680b      	ldr	r3, [r1, #0]
 8023de2:	1d1a      	adds	r2, r3, #4
 8023de4:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 8023de6:	4651      	mov	r1, sl
 8023de8:	7818      	ldrb	r0, [r3, #0]
 8023dea:	47c8      	blx	r9
        n++;
 8023dec:	3701      	adds	r7, #1
 8023dee:	e7db      	b.n	8023da8 <mg_vxprintf+0x38c>
        char *p = va_arg(*ap, char *);
 8023df0:	9903      	ldr	r1, [sp, #12]
 8023df2:	680b      	ldr	r3, [r1, #0]
 8023df4:	1d1a      	adds	r2, r3, #4
 8023df6:	600a      	str	r2, [r1, #0]
 8023df8:	681b      	ldr	r3, [r3, #0]
 8023dfa:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8023dfc:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8023e00:	d003      	beq.n	8023e0a <mg_vxprintf+0x3ee>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8023e02:	2500      	movs	r5, #0
 8023e04:	9605      	str	r6, [sp, #20]
 8023e06:	9e04      	ldr	r6, [sp, #16]
 8023e08:	e011      	b.n	8023e2e <mg_vxprintf+0x412>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8023e0a:	4618      	mov	r0, r3
 8023e0c:	b11b      	cbz	r3, 8023e16 <mg_vxprintf+0x3fa>
 8023e0e:	f7ec fa47 	bl	80102a0 <strlen>
 8023e12:	4680      	mov	r8, r0
 8023e14:	e7f5      	b.n	8023e02 <mg_vxprintf+0x3e6>
 8023e16:	f04f 0800 	mov.w	r8, #0
 8023e1a:	e7f2      	b.n	8023e02 <mg_vxprintf+0x3e6>
          n += scpy(out, param, &pad, 1);
 8023e1c:	2301      	movs	r3, #1
 8023e1e:	f10d 021f 	add.w	r2, sp, #31
 8023e22:	4651      	mov	r1, sl
 8023e24:	4648      	mov	r0, r9
 8023e26:	f7fb ff67 	bl	801fcf8 <scpy>
 8023e2a:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8023e2c:	3501      	adds	r5, #1
 8023e2e:	b92e      	cbnz	r6, 8023e3c <mg_vxprintf+0x420>
 8023e30:	4544      	cmp	r4, r8
 8023e32:	d903      	bls.n	8023e3c <mg_vxprintf+0x420>
 8023e34:	eb05 0308 	add.w	r3, r5, r8
 8023e38:	42a3      	cmp	r3, r4
 8023e3a:	d3ef      	bcc.n	8023e1c <mg_vxprintf+0x400>
        n += scpy(out, param, p, pr);
 8023e3c:	9e05      	ldr	r6, [sp, #20]
 8023e3e:	4643      	mov	r3, r8
 8023e40:	9a02      	ldr	r2, [sp, #8]
 8023e42:	4651      	mov	r1, sl
 8023e44:	4648      	mov	r0, r9
 8023e46:	f7fb ff57 	bl	801fcf8 <scpy>
 8023e4a:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8023e4c:	2500      	movs	r5, #0
 8023e4e:	9602      	str	r6, [sp, #8]
 8023e50:	9e04      	ldr	r6, [sp, #16]
 8023e52:	e008      	b.n	8023e66 <mg_vxprintf+0x44a>
          n += scpy(out, param, &pad, 1);
 8023e54:	2301      	movs	r3, #1
 8023e56:	f10d 021f 	add.w	r2, sp, #31
 8023e5a:	4651      	mov	r1, sl
 8023e5c:	4648      	mov	r0, r9
 8023e5e:	f7fb ff4b 	bl	801fcf8 <scpy>
 8023e62:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8023e64:	3501      	adds	r5, #1
 8023e66:	b1d6      	cbz	r6, 8023e9e <mg_vxprintf+0x482>
 8023e68:	4544      	cmp	r4, r8
 8023e6a:	d91a      	bls.n	8023ea2 <mg_vxprintf+0x486>
 8023e6c:	eb05 0308 	add.w	r3, r5, r8
 8023e70:	42a3      	cmp	r3, r4
 8023e72:	d3ef      	bcc.n	8023e54 <mg_vxprintf+0x438>
 8023e74:	9e02      	ldr	r6, [sp, #8]
 8023e76:	e797      	b.n	8023da8 <mg_vxprintf+0x38c>
        out('%', param);
 8023e78:	4651      	mov	r1, sl
 8023e7a:	2025      	movs	r0, #37	@ 0x25
 8023e7c:	47c8      	blx	r9
        n++;
 8023e7e:	3701      	adds	r7, #1
 8023e80:	e792      	b.n	8023da8 <mg_vxprintf+0x38c>
        out('%', param);
 8023e82:	4651      	mov	r1, sl
 8023e84:	2025      	movs	r0, #37	@ 0x25
 8023e86:	47c8      	blx	r9
        out(c, param);
 8023e88:	4651      	mov	r1, sl
 8023e8a:	4628      	mov	r0, r5
 8023e8c:	47c8      	blx	r9
        n += 2;
 8023e8e:	3702      	adds	r7, #2
 8023e90:	e78a      	b.n	8023da8 <mg_vxprintf+0x38c>
 8023e92:	9e02      	ldr	r6, [sp, #8]
 8023e94:	e788      	b.n	8023da8 <mg_vxprintf+0x38c>
 8023e96:	9e02      	ldr	r6, [sp, #8]
 8023e98:	e786      	b.n	8023da8 <mg_vxprintf+0x38c>
 8023e9a:	9e02      	ldr	r6, [sp, #8]
 8023e9c:	e784      	b.n	8023da8 <mg_vxprintf+0x38c>
 8023e9e:	9e02      	ldr	r6, [sp, #8]
 8023ea0:	e782      	b.n	8023da8 <mg_vxprintf+0x38c>
 8023ea2:	9e02      	ldr	r6, [sp, #8]
 8023ea4:	e780      	b.n	8023da8 <mg_vxprintf+0x38c>
}
 8023ea6:	4638      	mov	r0, r7
 8023ea8:	b013      	add	sp, #76	@ 0x4c
 8023eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023eae:	bf00      	nop
 8023eb0:	0803a45c 	.word	0x0803a45c

08023eb4 <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8023eb4:	b40c      	push	{r2, r3}
 8023eb6:	b500      	push	{lr}
 8023eb8:	b083      	sub	sp, #12
 8023eba:	ab04      	add	r3, sp, #16
 8023ebc:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8023ec0:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8023ec2:	ab01      	add	r3, sp, #4
 8023ec4:	f7ff fdaa 	bl	8023a1c <mg_vxprintf>
}
 8023ec8:	b003      	add	sp, #12
 8023eca:	f85d eb04 	ldr.w	lr, [sp], #4
 8023ece:	b002      	add	sp, #8
 8023ed0:	4770      	bx	lr
	...

08023ed4 <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8023ed4:	b530      	push	{r4, r5, lr}
 8023ed6:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8023ed8:	7853      	ldrb	r3, [r2, #1]
 8023eda:	7894      	ldrb	r4, [r2, #2]
 8023edc:	78d5      	ldrb	r5, [r2, #3]
 8023ede:	9502      	str	r5, [sp, #8]
 8023ee0:	9401      	str	r4, [sp, #4]
 8023ee2:	9300      	str	r3, [sp, #0]
 8023ee4:	7813      	ldrb	r3, [r2, #0]
 8023ee6:	4a02      	ldr	r2, [pc, #8]	@ (8023ef0 <print_ip4+0x1c>)
 8023ee8:	f7ff ffe4 	bl	8023eb4 <mg_xprintf>
}
 8023eec:	b005      	add	sp, #20
 8023eee:	bd30      	pop	{r4, r5, pc}
 8023ef0:	0803a460 	.word	0x0803a460

08023ef4 <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8023ef4:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 8023ef6:	6813      	ldr	r3, [r2, #0]
 8023ef8:	1d1c      	adds	r4, r3, #4
 8023efa:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 8023efc:	681a      	ldr	r2, [r3, #0]
 8023efe:	f7ff ffe9 	bl	8023ed4 <print_ip4>
}
 8023f02:	bd10      	pop	{r4, pc}

08023f04 <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8023f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023f06:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 8023f08:	6813      	ldr	r3, [r2, #0]
 8023f0a:	1d1c      	adds	r4, r3, #4
 8023f0c:	6014      	str	r4, [r2, #0]
 8023f0e:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8023f10:	7813      	ldrb	r3, [r2, #0]
 8023f12:	7854      	ldrb	r4, [r2, #1]
 8023f14:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 8023f16:	78d6      	ldrb	r6, [r2, #3]
 8023f18:	7917      	ldrb	r7, [r2, #4]
 8023f1a:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8023f1c:	9204      	str	r2, [sp, #16]
 8023f1e:	9703      	str	r7, [sp, #12]
 8023f20:	9602      	str	r6, [sp, #8]
 8023f22:	9501      	str	r5, [sp, #4]
 8023f24:	9400      	str	r4, [sp, #0]
 8023f26:	4a02      	ldr	r2, [pc, #8]	@ (8023f30 <mg_print_mac+0x2c>)
 8023f28:	f7ff ffc4 	bl	8023eb4 <mg_xprintf>
}
 8023f2c:	b007      	add	sp, #28
 8023f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023f30:	0803a46c 	.word	0x0803a46c

08023f34 <mg_log>:
void mg_log(const char *fmt, ...) {
 8023f34:	b40f      	push	{r0, r1, r2, r3}
 8023f36:	b500      	push	{lr}
 8023f38:	b083      	sub	sp, #12
 8023f3a:	ab04      	add	r3, sp, #16
 8023f3c:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8023f40:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8023f42:	ab01      	add	r3, sp, #4
 8023f44:	4907      	ldr	r1, [pc, #28]	@ (8023f64 <mg_log+0x30>)
 8023f46:	6809      	ldr	r1, [r1, #0]
 8023f48:	4807      	ldr	r0, [pc, #28]	@ (8023f68 <mg_log+0x34>)
 8023f4a:	6800      	ldr	r0, [r0, #0]
 8023f4c:	f7ff fd66 	bl	8023a1c <mg_vxprintf>
  logs("\r\n", 2);
 8023f50:	2102      	movs	r1, #2
 8023f52:	4806      	ldr	r0, [pc, #24]	@ (8023f6c <mg_log+0x38>)
 8023f54:	f7fc fcaa 	bl	80208ac <logs>
}
 8023f58:	b003      	add	sp, #12
 8023f5a:	f85d eb04 	ldr.w	lr, [sp], #4
 8023f5e:	b004      	add	sp, #16
 8023f60:	4770      	bx	lr
 8023f62:	bf00      	nop
 8023f64:	20019ee0 	.word	0x20019ee0
 8023f68:	20000128 	.word	0x20000128
 8023f6c:	0803ae80 	.word	0x0803ae80

08023f70 <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8023f70:	b538      	push	{r3, r4, r5, lr}
 8023f72:	4604      	mov	r4, r0
 8023f74:	4613      	mov	r3, r2
  size_t old = c->send.len;
 8023f76:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8023f78:	460a      	mov	r2, r1
 8023f7a:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 8023f7e:	4803      	ldr	r0, [pc, #12]	@ (8023f8c <mg_vprintf+0x1c>)
 8023f80:	f7ff fd4c 	bl	8023a1c <mg_vxprintf>
  return c->send.len - old;
 8023f84:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 8023f86:	1b40      	subs	r0, r0, r5
 8023f88:	bd38      	pop	{r3, r4, r5, pc}
 8023f8a:	bf00      	nop
 8023f8c:	080270a7 	.word	0x080270a7

08023f90 <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8023f90:	b40e      	push	{r1, r2, r3}
 8023f92:	b500      	push	{lr}
 8023f94:	b082      	sub	sp, #8
 8023f96:	ab03      	add	r3, sp, #12
 8023f98:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 8023f9c:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 8023f9e:	aa01      	add	r2, sp, #4
 8023fa0:	f7ff ffe6 	bl	8023f70 <mg_vprintf>
}
 8023fa4:	b002      	add	sp, #8
 8023fa6:	f85d eb04 	ldr.w	lr, [sp], #4
 8023faa:	b003      	add	sp, #12
 8023fac:	4770      	bx	lr
	...

08023fb0 <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8023fb0:	b530      	push	{r4, r5, lr}
 8023fb2:	b085      	sub	sp, #20
 8023fb4:	4605      	mov	r5, r0
 8023fb6:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8023fb8:	9000      	str	r0, [sp, #0]
 8023fba:	9101      	str	r1, [sp, #4]
 8023fbc:	2100      	movs	r1, #0
 8023fbe:	9102      	str	r1, [sp, #8]
 8023fc0:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8023fc2:	4669      	mov	r1, sp
 8023fc4:	4804      	ldr	r0, [pc, #16]	@ (8023fd8 <mg_vsnprintf+0x28>)
 8023fc6:	f7ff fd29 	bl	8023a1c <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 8023fca:	4284      	cmp	r4, r0
 8023fcc:	d901      	bls.n	8023fd2 <mg_vsnprintf+0x22>
 8023fce:	2300      	movs	r3, #0
 8023fd0:	542b      	strb	r3, [r5, r0]
}
 8023fd2:	b005      	add	sp, #20
 8023fd4:	bd30      	pop	{r4, r5, pc}
 8023fd6:	bf00      	nop
 8023fd8:	080270b1 	.word	0x080270b1

08023fdc <mg_http_reply>:
                   const char *fmt, ...) {
 8023fdc:	b408      	push	{r3}
 8023fde:	b570      	push	{r4, r5, r6, lr}
 8023fe0:	b085      	sub	sp, #20
 8023fe2:	4604      	mov	r4, r0
 8023fe4:	460e      	mov	r6, r1
 8023fe6:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8023fe8:	4608      	mov	r0, r1
 8023fea:	f7fb ffd1 	bl	801ff90 <mg_http_status_code_str>
 8023fee:	4603      	mov	r3, r0
 8023ff0:	b1ed      	cbz	r5, 802402e <mg_http_reply+0x52>
 8023ff2:	9500      	str	r5, [sp, #0]
 8023ff4:	4632      	mov	r2, r6
 8023ff6:	4916      	ldr	r1, [pc, #88]	@ (8024050 <mg_http_reply+0x74>)
 8023ff8:	4620      	mov	r0, r4
 8023ffa:	f7ff ffc9 	bl	8023f90 <mg_printf>
  len = c->send.len;
 8023ffe:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 8024000:	ab0a      	add	r3, sp, #40	@ 0x28
 8024002:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8024004:	ab03      	add	r3, sp, #12
 8024006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024008:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 802400c:	4811      	ldr	r0, [pc, #68]	@ (8024054 <mg_http_reply+0x78>)
 802400e:	f7ff fd05 	bl	8023a1c <mg_vxprintf>
  if (c->send.len > 16) {
 8024012:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8024014:	2b10      	cmp	r3, #16
 8024016:	d80c      	bhi.n	8024032 <mg_http_reply+0x56>
  c->is_resp = 0;
 8024018:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802401c:	f36f 13c7 	bfc	r3, #7, #1
 8024020:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8024024:	b005      	add	sp, #20
 8024026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802402a:	b001      	add	sp, #4
 802402c:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 802402e:	4d0a      	ldr	r5, [pc, #40]	@ (8024058 <mg_http_reply+0x7c>)
 8024030:	e7df      	b.n	8023ff2 <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8024032:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 8024034:	f1a5 000f 	sub.w	r0, r5, #15
 8024038:	1b5b      	subs	r3, r3, r5
 802403a:	4a08      	ldr	r2, [pc, #32]	@ (802405c <mg_http_reply+0x80>)
 802403c:	210b      	movs	r1, #11
 802403e:	4430      	add	r0, r6
 8024040:	f7ff face 	bl	80235e0 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8024044:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8024046:	4405      	add	r5, r0
 8024048:	3d0f      	subs	r5, #15
 802404a:	2220      	movs	r2, #32
 802404c:	555a      	strb	r2, [r3, r5]
 802404e:	e7e3      	b.n	8024018 <mg_http_reply+0x3c>
 8024050:	0803a48c 	.word	0x0803a48c
 8024054:	080270a7 	.word	0x080270a7
 8024058:	08036c70 	.word	0x08036c70
 802405c:	0803a4c0 	.word	0x0803a4c0

08024060 <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8024060:	b510      	push	{r4, lr}
 8024062:	b084      	sub	sp, #16
 8024064:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8024066:	9202      	str	r2, [sp, #8]
 8024068:	2300      	movs	r3, #0
 802406a:	9303      	str	r3, [sp, #12]
 802406c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024070:	e9cd 2300 	strd	r2, r3, [sp]
 8024074:	4a02      	ldr	r2, [pc, #8]	@ (8024080 <mg_http_etag+0x20>)
 8024076:	f7ff fab3 	bl	80235e0 <mg_snprintf>
}
 802407a:	4620      	mov	r0, r4
 802407c:	b004      	add	sp, #16
 802407e:	bd10      	pop	{r4, pc}
 8024080:	0803a4c8 	.word	0x0803a4c8

08024084 <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 8024084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024088:	b083      	sub	sp, #12
 802408a:	4607      	mov	r7, r0
 802408c:	4689      	mov	r9, r1
 802408e:	4692      	mov	sl, r2
 8024090:	4698      	mov	r8, r3
  size_t i, n = 0;
 8024092:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 8024094:	462c      	mov	r4, r5
 8024096:	e00c      	b.n	80240b2 <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8024098:	f8cd b004 	str.w	fp, [sp, #4]
 802409c:	2301      	movs	r3, #1
 802409e:	9300      	str	r3, [sp, #0]
 80240a0:	4b16      	ldr	r3, [pc, #88]	@ (80240fc <mg_url_encode+0x78>)
 80240a2:	4a17      	ldr	r2, [pc, #92]	@ (8024100 <mg_url_encode+0x7c>)
 80240a4:	2104      	movs	r1, #4
 80240a6:	eb0a 0005 	add.w	r0, sl, r5
 80240aa:	f7ff fa99 	bl	80235e0 <mg_snprintf>
      n += 3;
 80240ae:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 80240b0:	3401      	adds	r4, #1
 80240b2:	454c      	cmp	r4, r9
 80240b4:	d20e      	bcs.n	80240d4 <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 80240b6:	eb07 0b04 	add.w	fp, r7, r4
 80240ba:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 80240bc:	1d2b      	adds	r3, r5, #4
 80240be:	4543      	cmp	r3, r8
 80240c0:	d216      	bcs.n	80240f0 <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 80240c2:	4630      	mov	r0, r6
 80240c4:	f7fc fa60 	bl	8020588 <mg_is_url_safe>
 80240c8:	2800      	cmp	r0, #0
 80240ca:	d0e5      	beq.n	8024098 <mg_url_encode+0x14>
      buf[n++] = s[i];
 80240cc:	f80a 6005 	strb.w	r6, [sl, r5]
 80240d0:	3501      	adds	r5, #1
 80240d2:	e7ed      	b.n	80240b0 <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 80240d4:	f1b8 0f00 	cmp.w	r8, #0
 80240d8:	d00b      	beq.n	80240f2 <mg_url_encode+0x6e>
 80240da:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80240de:	45a8      	cmp	r8, r5
 80240e0:	d902      	bls.n	80240e8 <mg_url_encode+0x64>
 80240e2:	2300      	movs	r3, #0
 80240e4:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 80240e8:	2300      	movs	r3, #0
 80240ea:	f80a 3008 	strb.w	r3, [sl, r8]
 80240ee:	e000      	b.n	80240f2 <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 80240f0:	2500      	movs	r5, #0
}
 80240f2:	4628      	mov	r0, r5
 80240f4:	b003      	add	sp, #12
 80240f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240fa:	bf00      	nop
 80240fc:	080212e1 	.word	0x080212e1
 8024100:	0803a4d4 	.word	0x0803a4d4

08024104 <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 8024104:	b510      	push	{r4, lr}
 8024106:	b084      	sub	sp, #16
 8024108:	4602      	mov	r2, r0
 802410a:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 802410c:	2400      	movs	r4, #0
 802410e:	9400      	str	r4, [sp, #0]
 8024110:	9401      	str	r4, [sp, #4]
 8024112:	9402      	str	r4, [sp, #8]
 8024114:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8024118:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 802411a:	4669      	mov	r1, sp
 802411c:	4802      	ldr	r0, [pc, #8]	@ (8024128 <mg_vmprintf+0x24>)
 802411e:	f7ff fc7d 	bl	8023a1c <mg_vxprintf>
}
 8024122:	9800      	ldr	r0, [sp, #0]
 8024124:	b004      	add	sp, #16
 8024126:	bd10      	pop	{r4, pc}
 8024128:	080270a7 	.word	0x080270a7

0802412c <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 802412c:	b40f      	push	{r0, r1, r2, r3}
 802412e:	b500      	push	{lr}
 8024130:	b083      	sub	sp, #12
 8024132:	ab04      	add	r3, sp, #16
 8024134:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 8024138:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 802413a:	a901      	add	r1, sp, #4
 802413c:	f7ff ffe2 	bl	8024104 <mg_vmprintf>
}
 8024140:	b003      	add	sp, #12
 8024142:	f85d eb04 	ldr.w	lr, [sp], #4
 8024146:	b004      	add	sp, #16
 8024148:	4770      	bx	lr

0802414a <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 802414a:	b538      	push	{r3, r4, r5, lr}
 802414c:	4604      	mov	r4, r0
 802414e:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 8024150:	6882      	ldr	r2, [r0, #8]
 8024152:	68c3      	ldr	r3, [r0, #12]
 8024154:	429a      	cmp	r2, r3
 8024156:	d107      	bne.n	8024168 <mg_queue_next+0x1e>
  size_t len = 0;
 8024158:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 802415a:	b125      	cbz	r5, 8024166 <mg_queue_next+0x1c>
 802415c:	6823      	ldr	r3, [r4, #0]
 802415e:	68a2      	ldr	r2, [r4, #8]
 8024160:	3204      	adds	r2, #4
 8024162:	4413      	add	r3, r2
 8024164:	602b      	str	r3, [r5, #0]
}
 8024166:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 8024168:	f7fe fb69 	bl	802283e <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 802416c:	2800      	cmp	r0, #0
 802416e:	d1f4      	bne.n	802415a <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 8024170:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8024172:	68e2      	ldr	r2, [r4, #12]
 8024174:	68a3      	ldr	r3, [r4, #8]
 8024176:	429a      	cmp	r2, r3
 8024178:	d9ef      	bls.n	802415a <mg_queue_next+0x10>
 802417a:	4620      	mov	r0, r4
 802417c:	f7fe fb5f 	bl	802283e <mg_queue_read_len>
 8024180:	e7eb      	b.n	802415a <mg_queue_next+0x10>

08024182 <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 8024182:	6883      	ldr	r3, [r0, #8]
 8024184:	440b      	add	r3, r1
 8024186:	3304      	adds	r3, #4
 8024188:	6083      	str	r3, [r0, #8]
}
 802418a:	4770      	bx	lr

0802418c <mg_sha1_init>:
  context->state[0] = 0x67452301;
 802418c:	4b0a      	ldr	r3, [pc, #40]	@ (80241b8 <mg_sha1_init+0x2c>)
 802418e:	6003      	str	r3, [r0, #0]
  context->state[1] = 0xEFCDAB89;
 8024190:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8024194:	6043      	str	r3, [r0, #4]
  context->state[2] = 0x98BADCFE;
 8024196:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 802419a:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 802419e:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 80241a2:	6083      	str	r3, [r0, #8]
  context->state[3] = 0x10325476;
 80241a4:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 80241a8:	60c3      	str	r3, [r0, #12]
  context->state[4] = 0xC3D2E1F0;
 80241aa:	4b04      	ldr	r3, [pc, #16]	@ (80241bc <mg_sha1_init+0x30>)
 80241ac:	6103      	str	r3, [r0, #16]
  context->count[0] = context->count[1] = 0;
 80241ae:	2300      	movs	r3, #0
 80241b0:	6183      	str	r3, [r0, #24]
 80241b2:	6143      	str	r3, [r0, #20]
}
 80241b4:	4770      	bx	lr
 80241b6:	bf00      	nop
 80241b8:	67452301 	.word	0x67452301
 80241bc:	c3d2e1f0 	.word	0xc3d2e1f0

080241c0 <mg_sha1_update>:
                    size_t len) {
 80241c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241c2:	4604      	mov	r4, r0
 80241c4:	460f      	mov	r7, r1
 80241c6:	4616      	mov	r6, r2
  j = context->count[0];
 80241c8:	6943      	ldr	r3, [r0, #20]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 80241ca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80241ce:	6142      	str	r2, [r0, #20]
 80241d0:	429a      	cmp	r2, r3
 80241d2:	d202      	bcs.n	80241da <mg_sha1_update+0x1a>
 80241d4:	6982      	ldr	r2, [r0, #24]
 80241d6:	3201      	adds	r2, #1
 80241d8:	6182      	str	r2, [r0, #24]
  context->count[1] += (uint32_t) (len >> 29);
 80241da:	69a2      	ldr	r2, [r4, #24]
 80241dc:	eb02 7256 	add.w	r2, r2, r6, lsr #29
 80241e0:	61a2      	str	r2, [r4, #24]
  j = (j >> 3) & 63;
 80241e2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  if ((j + len) > 63) {
 80241e6:	18f2      	adds	r2, r6, r3
 80241e8:	2a3f      	cmp	r2, #63	@ 0x3f
 80241ea:	d808      	bhi.n	80241fe <mg_sha1_update+0x3e>
    i = 0;
 80241ec:	2500      	movs	r5, #0
  memcpy(&context->buffer[j], &data[i], len - i);
 80241ee:	3318      	adds	r3, #24
 80241f0:	18e0      	adds	r0, r4, r3
 80241f2:	1b72      	subs	r2, r6, r5
 80241f4:	1979      	adds	r1, r7, r5
 80241f6:	3004      	adds	r0, #4
 80241f8:	f009 fe26 	bl	802de48 <memcpy>
}
 80241fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(&context->buffer[j], data, (i = 64 - j));
 80241fe:	f103 0018 	add.w	r0, r3, #24
 8024202:	4420      	add	r0, r4
 8024204:	f1c3 0540 	rsb	r5, r3, #64	@ 0x40
 8024208:	462a      	mov	r2, r5
 802420a:	4639      	mov	r1, r7
 802420c:	3004      	adds	r0, #4
 802420e:	f009 fe1b 	bl	802de48 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 8024212:	f104 011c 	add.w	r1, r4, #28
 8024216:	4620      	mov	r0, r4
 8024218:	f7fd faee 	bl	80217f8 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 802421c:	e004      	b.n	8024228 <mg_sha1_update+0x68>
      mg_sha1_transform(context->state, &data[i]);
 802421e:	1979      	adds	r1, r7, r5
 8024220:	4620      	mov	r0, r4
 8024222:	f7fd fae9 	bl	80217f8 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8024226:	3540      	adds	r5, #64	@ 0x40
 8024228:	f105 033f 	add.w	r3, r5, #63	@ 0x3f
 802422c:	42b3      	cmp	r3, r6
 802422e:	d3f6      	bcc.n	802421e <mg_sha1_update+0x5e>
    j = 0;
 8024230:	2300      	movs	r3, #0
 8024232:	e7dc      	b.n	80241ee <mg_sha1_update+0x2e>

08024234 <mg_sha1_final>:
void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 8024234:	b570      	push	{r4, r5, r6, lr}
 8024236:	b084      	sub	sp, #16
 8024238:	4606      	mov	r6, r0
 802423a:	460d      	mov	r5, r1
  for (i = 0; i < 8; i++) {
 802423c:	2300      	movs	r3, #0
 802423e:	e013      	b.n	8024268 <mg_sha1_final+0x34>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8024240:	2b03      	cmp	r3, #3
 8024242:	bf8c      	ite	hi
 8024244:	2200      	movhi	r2, #0
 8024246:	2201      	movls	r2, #1
 8024248:	3204      	adds	r2, #4
 802424a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 802424e:	6851      	ldr	r1, [r2, #4]
                                      ((3 - (i & 3)) * 8)) &
 8024250:	43da      	mvns	r2, r3
 8024252:	f002 0203 	and.w	r2, r2, #3
 8024256:	00d2      	lsls	r2, r2, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8024258:	fa21 f202 	lsr.w	r2, r1, r2
 802425c:	f103 0110 	add.w	r1, r3, #16
 8024260:	4469      	add	r1, sp
 8024262:	f801 2c08 	strb.w	r2, [r1, #-8]
  for (i = 0; i < 8; i++) {
 8024266:	3301      	adds	r3, #1
 8024268:	2b07      	cmp	r3, #7
 802426a:	d9e9      	bls.n	8024240 <mg_sha1_final+0xc>
  c = 0200;
 802426c:	2380      	movs	r3, #128	@ 0x80
 802426e:	f88d 3007 	strb.w	r3, [sp, #7]
  mg_sha1_update(context, &c, 1);
 8024272:	2201      	movs	r2, #1
 8024274:	f10d 0107 	add.w	r1, sp, #7
 8024278:	4628      	mov	r0, r5
 802427a:	f7ff ffa1 	bl	80241c0 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 802427e:	e008      	b.n	8024292 <mg_sha1_final+0x5e>
    c = 0000;
 8024280:	2300      	movs	r3, #0
 8024282:	f88d 3007 	strb.w	r3, [sp, #7]
    mg_sha1_update(context, &c, 1);
 8024286:	2201      	movs	r2, #1
 8024288:	f10d 0107 	add.w	r1, sp, #7
 802428c:	4628      	mov	r0, r5
 802428e:	f7ff ff97 	bl	80241c0 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8024292:	696b      	ldr	r3, [r5, #20]
 8024294:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8024298:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 802429c:	d1f0      	bne.n	8024280 <mg_sha1_final+0x4c>
  mg_sha1_update(context, finalcount, 8);
 802429e:	2208      	movs	r2, #8
 80242a0:	eb0d 0102 	add.w	r1, sp, r2
 80242a4:	4628      	mov	r0, r5
 80242a6:	f7ff ff8b 	bl	80241c0 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 80242aa:	2300      	movs	r3, #0
 80242ac:	e00a      	b.n	80242c4 <mg_sha1_final+0x90>
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 80242ae:	089a      	lsrs	r2, r3, #2
 80242b0:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 80242b4:	43da      	mvns	r2, r3
 80242b6:	f002 0203 	and.w	r2, r2, #3
 80242ba:	00d2      	lsls	r2, r2, #3
 80242bc:	fa24 f202 	lsr.w	r2, r4, r2
    digest[i] =
 80242c0:	54f2      	strb	r2, [r6, r3]
  for (i = 0; i < 20; i++) {
 80242c2:	3301      	adds	r3, #1
 80242c4:	2b13      	cmp	r3, #19
 80242c6:	d9f2      	bls.n	80242ae <mg_sha1_final+0x7a>
  memset(context, '\0', sizeof(*context));
 80242c8:	225c      	movs	r2, #92	@ 0x5c
 80242ca:	2100      	movs	r1, #0
 80242cc:	4628      	mov	r0, r5
 80242ce:	f008 fb7f 	bl	802c9d0 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 80242d2:	2300      	movs	r3, #0
 80242d4:	9302      	str	r3, [sp, #8]
 80242d6:	9303      	str	r3, [sp, #12]
}
 80242d8:	b004      	add	sp, #16
 80242da:	bd70      	pop	{r4, r5, r6, pc}

080242dc <mg_http_serve_ssi>:
                       const char *fullpath) {
 80242dc:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 80242de:	4b03      	ldr	r3, [pc, #12]	@ (80242ec <mg_http_serve_ssi+0x10>)
 80242e0:	2200      	movs	r2, #0
 80242e2:	f240 11f5 	movw	r1, #501	@ 0x1f5
 80242e6:	f7ff fe79 	bl	8023fdc <mg_http_reply>
}
 80242ea:	bd08      	pop	{r3, pc}
 80242ec:	0803a4dc 	.word	0x0803a4dc

080242f0 <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 80242f0:	b510      	push	{r4, lr}
 80242f2:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 80242f4:	6001      	str	r1, [r0, #0]
 80242f6:	b129      	cbz	r1, 8024304 <mg_str_s+0x14>
 80242f8:	4608      	mov	r0, r1
 80242fa:	f7eb ffd1 	bl	80102a0 <strlen>
 80242fe:	6060      	str	r0, [r4, #4]
}
 8024300:	4620      	mov	r0, r4
 8024302:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8024304:	2000      	movs	r0, #0
 8024306:	e7fa      	b.n	80242fe <mg_str_s+0xe>

08024308 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 8024308:	6001      	str	r1, [r0, #0]
 802430a:	6042      	str	r2, [r0, #4]
}
 802430c:	4770      	bx	lr

0802430e <stripquotes>:
static struct mg_str stripquotes(struct mg_str s) {
 802430e:	b510      	push	{r4, lr}
 8024310:	b082      	sub	sp, #8
 8024312:	4604      	mov	r4, r0
 8024314:	ab02      	add	r3, sp, #8
 8024316:	e903 0006 	stmdb	r3, {r1, r2}
             : s;
 802431a:	2a01      	cmp	r2, #1
 802431c:	d902      	bls.n	8024324 <stripquotes+0x16>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 802431e:	780b      	ldrb	r3, [r1, #0]
 8024320:	2b22      	cmp	r3, #34	@ 0x22
 8024322:	d007      	beq.n	8024334 <stripquotes+0x26>
             : s;
 8024324:	ab02      	add	r3, sp, #8
 8024326:	e913 0003 	ldmdb	r3, {r0, r1}
 802432a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 802432e:	4620      	mov	r0, r4
 8024330:	b002      	add	sp, #8
 8024332:	bd10      	pop	{r4, pc}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 8024334:	188b      	adds	r3, r1, r2
 8024336:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802433a:	2b22      	cmp	r3, #34	@ 0x22
 802433c:	d1f2      	bne.n	8024324 <stripquotes+0x16>
             ? mg_str_n(s.buf + 1, s.len - 2)
 802433e:	3a02      	subs	r2, #2
 8024340:	3101      	adds	r1, #1
 8024342:	f7ff ffe1 	bl	8024308 <mg_str_n>
             : s;
 8024346:	e7f2      	b.n	802432e <stripquotes+0x20>

08024348 <mg_http_get_header_var>:
struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 8024348:	b082      	sub	sp, #8
 802434a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802434e:	b084      	sub	sp, #16
 8024350:	4680      	mov	r8, r0
 8024352:	4668      	mov	r0, sp
 8024354:	e880 0006 	stmia.w	r0, {r1, r2}
 8024358:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 802435a:	2400      	movs	r4, #0
 802435c:	e01f      	b.n	802439e <mg_http_get_header_var+0x56>
      int q = p < x && *p == '"' ? 1 : 0;
 802435e:	2201      	movs	r2, #1
 8024360:	e037      	b.n	80243d2 <mg_http_get_header_var+0x8a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8024362:	7818      	ldrb	r0, [r3, #0]
 8024364:	283b      	cmp	r0, #59	@ 0x3b
 8024366:	d00d      	beq.n	8024384 <mg_http_get_header_var+0x3c>
 8024368:	2820      	cmp	r0, #32
 802436a:	d00b      	beq.n	8024384 <mg_http_get_header_var+0x3c>
 802436c:	282c      	cmp	r0, #44	@ 0x2c
 802436e:	d009      	beq.n	8024384 <mg_http_get_header_var+0x3c>
        p++;
 8024370:	3301      	adds	r3, #1
      while (p < x &&
 8024372:	42bb      	cmp	r3, r7
 8024374:	d206      	bcs.n	8024384 <mg_http_get_header_var+0x3c>
 8024376:	2a00      	cmp	r2, #0
 8024378:	d0f3      	beq.n	8024362 <mg_http_get_header_var+0x1a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 802437a:	428b      	cmp	r3, r1
 802437c:	d0f8      	beq.n	8024370 <mg_http_get_header_var+0x28>
 802437e:	7818      	ldrb	r0, [r3, #0]
 8024380:	2822      	cmp	r0, #34	@ 0x22
 8024382:	d1f5      	bne.n	8024370 <mg_http_get_header_var+0x28>
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8024384:	1a5b      	subs	r3, r3, r1
 8024386:	ac02      	add	r4, sp, #8
 8024388:	441a      	add	r2, r3
 802438a:	4620      	mov	r0, r4
 802438c:	f7ff ffbc 	bl	8024308 <mg_str_n>
 8024390:	e894 0006 	ldmia.w	r4, {r1, r2}
 8024394:	4640      	mov	r0, r8
 8024396:	f7ff ffba 	bl	802430e <stripquotes>
 802439a:	e021      	b.n	80243e0 <mg_http_get_header_var+0x98>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 802439c:	3401      	adds	r4, #1
 802439e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80243a0:	b1ca      	cbz	r2, 80243d6 <mg_http_get_header_var+0x8e>
 80243a2:	1915      	adds	r5, r2, r4
 80243a4:	1cab      	adds	r3, r5, #2
 80243a6:	9f01      	ldr	r7, [sp, #4]
 80243a8:	42bb      	cmp	r3, r7
 80243aa:	d214      	bcs.n	80243d6 <mg_http_get_header_var+0x8e>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 80243ac:	9e00      	ldr	r6, [sp, #0]
 80243ae:	5d73      	ldrb	r3, [r6, r5]
 80243b0:	2b3d      	cmp	r3, #61	@ 0x3d
 80243b2:	d1f3      	bne.n	802439c <mg_http_get_header_var+0x54>
 80243b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80243b6:	1930      	adds	r0, r6, r4
 80243b8:	f008 fa76 	bl	802c8a8 <memcmp>
 80243bc:	4602      	mov	r2, r0
 80243be:	2800      	cmp	r0, #0
 80243c0:	d1ec      	bne.n	802439c <mg_http_get_header_var+0x54>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 80243c2:	3501      	adds	r5, #1
 80243c4:	1971      	adds	r1, r6, r5
 80243c6:	4437      	add	r7, r6
      int q = p < x && *p == '"' ? 1 : 0;
 80243c8:	42b9      	cmp	r1, r7
 80243ca:	d202      	bcs.n	80243d2 <mg_http_get_header_var+0x8a>
 80243cc:	5d73      	ldrb	r3, [r6, r5]
 80243ce:	2b22      	cmp	r3, #34	@ 0x22
 80243d0:	d0c5      	beq.n	802435e <mg_http_get_header_var+0x16>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 80243d2:	460b      	mov	r3, r1
      while (p < x &&
 80243d4:	e7cd      	b.n	8024372 <mg_http_get_header_var+0x2a>
  return mg_str_n(NULL, 0);
 80243d6:	2200      	movs	r2, #0
 80243d8:	4611      	mov	r1, r2
 80243da:	4640      	mov	r0, r8
 80243dc:	f7ff ff94 	bl	8024308 <mg_str_n>
}
 80243e0:	4640      	mov	r0, r8
 80243e2:	b004      	add	sp, #16
 80243e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80243e8:	b002      	add	sp, #8
 80243ea:	4770      	bx	lr

080243ec <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 80243ec:	b530      	push	{r4, r5, lr}
 80243ee:	b085      	sub	sp, #20
 80243f0:	466b      	mov	r3, sp
 80243f2:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 80243f6:	290d      	cmp	r1, #13
 80243f8:	d930      	bls.n	802445c <mg_v4mapped+0x70>
 80243fa:	4614      	mov	r4, r2
 80243fc:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 80243fe:	4601      	mov	r1, r0
 8024400:	7802      	ldrb	r2, [r0, #0]
 8024402:	2a3a      	cmp	r2, #58	@ 0x3a
 8024404:	d12d      	bne.n	8024462 <mg_v4mapped+0x76>
 8024406:	7842      	ldrb	r2, [r0, #1]
 8024408:	2a3a      	cmp	r2, #58	@ 0x3a
 802440a:	d12c      	bne.n	8024466 <mg_v4mapped+0x7a>
 802440c:	7982      	ldrb	r2, [r0, #6]
 802440e:	2a3a      	cmp	r2, #58	@ 0x3a
 8024410:	d12b      	bne.n	802446a <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 8024412:	2202      	movs	r2, #2
 8024414:	e000      	b.n	8024418 <mg_v4mapped+0x2c>
 8024416:	3201      	adds	r2, #1
 8024418:	2a05      	cmp	r2, #5
 802441a:	dc06      	bgt.n	802442a <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 802441c:	5c88      	ldrb	r0, [r1, r2]
 802441e:	2866      	cmp	r0, #102	@ 0x66
 8024420:	d0f9      	beq.n	8024416 <mg_v4mapped+0x2a>
 8024422:	2846      	cmp	r0, #70	@ 0x46
 8024424:	d0f7      	beq.n	8024416 <mg_v4mapped+0x2a>
 8024426:	2000      	movs	r0, #0
 8024428:	e019      	b.n	802445e <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 802442a:	ad02      	add	r5, sp, #8
 802442c:	1fda      	subs	r2, r3, #7
 802442e:	3107      	adds	r1, #7
 8024430:	4628      	mov	r0, r5
 8024432:	f7ff ff69 	bl	8024308 <mg_str_n>
 8024436:	4622      	mov	r2, r4
 8024438:	e895 0003 	ldmia.w	r5, {r0, r1}
 802443c:	f7fc fe7a 	bl	8021134 <mg_aton4>
 8024440:	b168      	cbz	r0, 802445e <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 8024442:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 8024444:	2300      	movs	r3, #0
 8024446:	6023      	str	r3, [r4, #0]
 8024448:	6063      	str	r3, [r4, #4]
 802444a:	60a3      	str	r3, [r4, #8]
 802444c:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 802444e:	23ff      	movs	r3, #255	@ 0xff
 8024450:	72e3      	strb	r3, [r4, #11]
 8024452:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 8024454:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 8024456:	2301      	movs	r3, #1
 8024458:	74e3      	strb	r3, [r4, #19]
  return true;
 802445a:	e000      	b.n	802445e <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 802445c:	2000      	movs	r0, #0
}
 802445e:	b005      	add	sp, #20
 8024460:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8024462:	2000      	movs	r0, #0
 8024464:	e7fb      	b.n	802445e <mg_v4mapped+0x72>
 8024466:	2000      	movs	r0, #0
 8024468:	e7f9      	b.n	802445e <mg_v4mapped+0x72>
 802446a:	2000      	movs	r0, #0
 802446c:	e7f7      	b.n	802445e <mg_v4mapped+0x72>

0802446e <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 802446e:	b530      	push	{r4, r5, lr}
 8024470:	b083      	sub	sp, #12
 8024472:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8024474:	6803      	ldr	r3, [r0, #0]
 8024476:	6842      	ldr	r2, [r0, #4]
 8024478:	441a      	add	r2, r3
 802447a:	466d      	mov	r5, sp
 802447c:	1a52      	subs	r2, r2, r1
 802447e:	4628      	mov	r0, r5
 8024480:	f7ff ff42 	bl	8024308 <mg_str_n>
 8024484:	3408      	adds	r4, #8
 8024486:	e895 0003 	ldmia.w	r5, {r0, r1}
 802448a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 802448e:	b003      	add	sp, #12
 8024490:	bd30      	pop	{r4, r5, pc}

08024492 <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8024492:	b084      	sub	sp, #16
 8024494:	f10d 0c10 	add.w	ip, sp, #16
 8024498:	e90c 0003 	stmdb	ip, {r0, r1}
 802449c:	4669      	mov	r1, sp
 802449e:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80244a2:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 80244a4:	9a03      	ldr	r2, [sp, #12]
 80244a6:	429a      	cmp	r2, r3
 80244a8:	d90b      	bls.n	80244c2 <mg_strcmp+0x30>
 80244aa:	9901      	ldr	r1, [sp, #4]
 80244ac:	4299      	cmp	r1, r3
 80244ae:	d908      	bls.n	80244c2 <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 80244b0:	9a02      	ldr	r2, [sp, #8]
 80244b2:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 80244b4:	9a00      	ldr	r2, [sp, #0]
 80244b6:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 80244b8:	4291      	cmp	r1, r2
 80244ba:	db09      	blt.n	80244d0 <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 80244bc:	dc0c      	bgt.n	80244d8 <mg_strcmp+0x46>
    i++;
 80244be:	3301      	adds	r3, #1
 80244c0:	e7f0      	b.n	80244a4 <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 80244c2:	429a      	cmp	r2, r3
 80244c4:	d80a      	bhi.n	80244dc <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 80244c6:	9a01      	ldr	r2, [sp, #4]
 80244c8:	429a      	cmp	r2, r3
 80244ca:	d809      	bhi.n	80244e0 <mg_strcmp+0x4e>
  return 0;
 80244cc:	2000      	movs	r0, #0
 80244ce:	e001      	b.n	80244d4 <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 80244d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80244d4:	b004      	add	sp, #16
 80244d6:	4770      	bx	lr
    if (c1 > c2) return 1;
 80244d8:	2001      	movs	r0, #1
 80244da:	e7fb      	b.n	80244d4 <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 80244dc:	2001      	movs	r0, #1
 80244de:	e7f9      	b.n	80244d4 <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 80244e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80244e4:	e7f6      	b.n	80244d4 <mg_strcmp+0x42>

080244e6 <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 80244e6:	b530      	push	{r4, r5, lr}
 80244e8:	b085      	sub	sp, #20
 80244ea:	ac04      	add	r4, sp, #16
 80244ec:	e904 0003 	stmdb	r4, {r0, r1}
 80244f0:	4669      	mov	r1, sp
 80244f2:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80244f6:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 80244f8:	9b03      	ldr	r3, [sp, #12]
 80244fa:	42a3      	cmp	r3, r4
 80244fc:	d910      	bls.n	8024520 <mg_strcasecmp+0x3a>
 80244fe:	9a01      	ldr	r2, [sp, #4]
 8024500:	42a2      	cmp	r2, r4
 8024502:	d90d      	bls.n	8024520 <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 8024504:	9b02      	ldr	r3, [sp, #8]
 8024506:	5d18      	ldrb	r0, [r3, r4]
 8024508:	f7fc ff22 	bl	8021350 <mg_tolc>
 802450c:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 802450e:	9b00      	ldr	r3, [sp, #0]
 8024510:	5d18      	ldrb	r0, [r3, r4]
 8024512:	f7fc ff1d 	bl	8021350 <mg_tolc>
    if (c1 < c2) return -1;
 8024516:	4285      	cmp	r5, r0
 8024518:	db09      	blt.n	802452e <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 802451a:	dc0c      	bgt.n	8024536 <mg_strcasecmp+0x50>
    i++;
 802451c:	3401      	adds	r4, #1
 802451e:	e7eb      	b.n	80244f8 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 8024520:	42a3      	cmp	r3, r4
 8024522:	d80a      	bhi.n	802453a <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 8024524:	9b01      	ldr	r3, [sp, #4]
 8024526:	42a3      	cmp	r3, r4
 8024528:	d809      	bhi.n	802453e <mg_strcasecmp+0x58>
  return 0;
 802452a:	2000      	movs	r0, #0
 802452c:	e001      	b.n	8024532 <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 802452e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8024532:	b005      	add	sp, #20
 8024534:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 8024536:	2001      	movs	r0, #1
 8024538:	e7fb      	b.n	8024532 <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 802453a:	2001      	movs	r0, #1
 802453c:	e7f9      	b.n	8024532 <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 802453e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024542:	e7f6      	b.n	8024532 <mg_strcasecmp+0x4c>

08024544 <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8024544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024548:	b086      	sub	sp, #24
 802454a:	4604      	mov	r4, r0
 802454c:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 802454e:	f7fe fb45 	bl	8022bdc <mg_http_get_request_len>
 8024552:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8024554:	b1d4      	cbz	r4, 802458c <mg_http_parse+0x48>
 8024556:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 8024558:	f44f 7206 	mov.w	r2, #536	@ 0x218
 802455c:	2100      	movs	r1, #0
 802455e:	4630      	mov	r0, r6
 8024560:	f008 fa36 	bl	802c9d0 <memset>
  if (req_len <= 0) return req_len;
 8024564:	2f00      	cmp	r7, #0
 8024566:	f340 808d 	ble.w	8024684 <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 802456a:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 802456e:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8024572:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8024576:	46b8      	mov	r8, r7
 8024578:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 802457c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024580:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 8024584:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 8024588:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 802458a:	e005      	b.n	8024598 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 802458c:	4625      	mov	r5, r4
 802458e:	e7e3      	b.n	8024558 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8024590:	4414      	add	r4, r2
 8024592:	6873      	ldr	r3, [r6, #4]
 8024594:	4413      	add	r3, r2
 8024596:	6073      	str	r3, [r6, #4]
 8024598:	42ac      	cmp	r4, r5
 802459a:	d208      	bcs.n	80245ae <mg_http_parse+0x6a>
 802459c:	4629      	mov	r1, r5
 802459e:	4620      	mov	r0, r4
 80245a0:	f7fb fc1e 	bl	801fde0 <clen>
 80245a4:	4602      	mov	r2, r0
 80245a6:	2800      	cmp	r0, #0
 80245a8:	d1f2      	bne.n	8024590 <mg_http_parse+0x4c>
 80245aa:	e000      	b.n	80245ae <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80245ac:	3401      	adds	r4, #1
 80245ae:	42ac      	cmp	r4, r5
 80245b0:	d202      	bcs.n	80245b8 <mg_http_parse+0x74>
 80245b2:	7823      	ldrb	r3, [r4, #0]
 80245b4:	2b20      	cmp	r3, #32
 80245b6:	d0f9      	beq.n	80245ac <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 80245b8:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 80245ba:	e003      	b.n	80245c4 <mg_http_parse+0x80>
 80245bc:	4414      	add	r4, r2
 80245be:	68f3      	ldr	r3, [r6, #12]
 80245c0:	4413      	add	r3, r2
 80245c2:	60f3      	str	r3, [r6, #12]
 80245c4:	42ac      	cmp	r4, r5
 80245c6:	d208      	bcs.n	80245da <mg_http_parse+0x96>
 80245c8:	4629      	mov	r1, r5
 80245ca:	4620      	mov	r0, r4
 80245cc:	f7fb fc08 	bl	801fde0 <clen>
 80245d0:	4602      	mov	r2, r0
 80245d2:	2800      	cmp	r0, #0
 80245d4:	d1f2      	bne.n	80245bc <mg_http_parse+0x78>
 80245d6:	e000      	b.n	80245da <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80245d8:	3401      	adds	r4, #1
 80245da:	42ac      	cmp	r4, r5
 80245dc:	d202      	bcs.n	80245e4 <mg_http_parse+0xa0>
 80245de:	7823      	ldrb	r3, [r4, #0]
 80245e0:	2b20      	cmp	r3, #32
 80245e2:	d0f9      	beq.n	80245d8 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 80245e4:	f106 0218 	add.w	r2, r6, #24
 80245e8:	4629      	mov	r1, r5
 80245ea:	4620      	mov	r0, r4
 80245ec:	f7fb fc3f 	bl	801fe6e <skiptorn>
 80245f0:	4682      	mov	sl, r0
 80245f2:	2800      	cmp	r0, #0
 80245f4:	f000 8082 	beq.w	80246fc <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 80245f8:	f8d6 9008 	ldr.w	r9, [r6, #8]
 80245fc:	68f4      	ldr	r4, [r6, #12]
 80245fe:	4622      	mov	r2, r4
 8024600:	213f      	movs	r1, #63	@ 0x3f
 8024602:	4648      	mov	r0, r9
 8024604:	f7eb fdfc 	bl	8010200 <memchr>
 8024608:	b138      	cbz	r0, 802461a <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 802460a:	1c42      	adds	r2, r0, #1
 802460c:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 802460e:	444c      	add	r4, r9
 8024610:	1aa4      	subs	r4, r4, r2
 8024612:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8024614:	eba0 0309 	sub.w	r3, r0, r9
 8024618:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 802461a:	6873      	ldr	r3, [r6, #4]
 802461c:	2b00      	cmp	r3, #0
 802461e:	d06f      	beq.n	8024700 <mg_http_parse+0x1bc>
 8024620:	68f3      	ldr	r3, [r6, #12]
 8024622:	2b00      	cmp	r3, #0
 8024624:	d06f      	beq.n	8024706 <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 8024626:	231e      	movs	r3, #30
 8024628:	f106 0220 	add.w	r2, r6, #32
 802462c:	4629      	mov	r1, r5
 802462e:	4650      	mov	r0, sl
 8024630:	f7fb fc45 	bl	801febe <mg_http_parse_headers>
 8024634:	2800      	cmp	r0, #0
 8024636:	d069      	beq.n	802470c <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8024638:	4939      	ldr	r1, [pc, #228]	@ (8024720 <mg_http_parse+0x1dc>)
 802463a:	4630      	mov	r0, r6
 802463c:	f7fe fafa 	bl	8022c34 <mg_http_get_header>
 8024640:	b160      	cbz	r0, 802465c <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8024642:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 8024646:	e9d0 0100 	ldrd	r0, r1, [r0]
 802464a:	f7fe fa75 	bl	8022b38 <mg_to_size_t>
 802464e:	2800      	cmp	r0, #0
 8024650:	d05f      	beq.n	8024712 <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 8024652:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024656:	4443      	add	r3, r8
 8024658:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 802465c:	2205      	movs	r2, #5
 802465e:	4931      	ldr	r1, [pc, #196]	@ (8024724 <mg_http_parse+0x1e0>)
 8024660:	6830      	ldr	r0, [r6, #0]
 8024662:	f7fb fb6f 	bl	801fd44 <mg_ncasecmp>
 8024666:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8024668:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 802466c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8024670:	d00c      	beq.n	802468c <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024672:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024676:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802467a:	d029      	beq.n	80246d0 <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 802467c:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 8024680:	4598      	cmp	r8, r3
 8024682:	d849      	bhi.n	8024718 <mg_http_parse+0x1d4>
}
 8024684:	4638      	mov	r0, r7
 8024686:	b006      	add	sp, #24
 8024688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 802468c:	2800      	cmp	r0, #0
 802468e:	d0f0      	beq.n	8024672 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8024690:	466d      	mov	r5, sp
 8024692:	4925      	ldr	r1, [pc, #148]	@ (8024728 <mg_http_parse+0x1e4>)
 8024694:	4628      	mov	r0, r5
 8024696:	f7ff fe2b 	bl	80242f0 <mg_str_s>
 802469a:	e895 000c 	ldmia.w	r5, {r2, r3}
 802469e:	e896 0003 	ldmia.w	r6, {r0, r1}
 80246a2:	f7ff ff20 	bl	80244e6 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80246a6:	2800      	cmp	r0, #0
 80246a8:	d0e3      	beq.n	8024672 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 80246aa:	ad02      	add	r5, sp, #8
 80246ac:	491f      	ldr	r1, [pc, #124]	@ (802472c <mg_http_parse+0x1e8>)
 80246ae:	4628      	mov	r0, r5
 80246b0:	f7ff fe1e 	bl	80242f0 <mg_str_s>
 80246b4:	e895 000c 	ldmia.w	r5, {r2, r3}
 80246b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80246bc:	f7ff ff13 	bl	80244e6 <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 80246c0:	2800      	cmp	r0, #0
 80246c2:	d0d6      	beq.n	8024672 <mg_http_parse+0x12e>
    hm->body.len = 0;
 80246c4:	2300      	movs	r3, #0
 80246c6:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80246ca:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 80246ce:	e7d0      	b.n	8024672 <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 80246d0:	2c00      	cmp	r4, #0
 80246d2:	d1d3      	bne.n	802467c <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 80246d4:	ac04      	add	r4, sp, #16
 80246d6:	4916      	ldr	r1, [pc, #88]	@ (8024730 <mg_http_parse+0x1ec>)
 80246d8:	4620      	mov	r0, r4
 80246da:	f7ff fe09 	bl	80242f0 <mg_str_s>
 80246de:	e894 000c 	ldmia.w	r4, {r2, r3}
 80246e2:	f106 0108 	add.w	r1, r6, #8
 80246e6:	c903      	ldmia	r1, {r0, r1}
 80246e8:	f7ff fefd 	bl	80244e6 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 80246ec:	2800      	cmp	r0, #0
 80246ee:	d1c5      	bne.n	802467c <mg_http_parse+0x138>
    hm->body.len = 0;
 80246f0:	2300      	movs	r3, #0
 80246f2:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80246f6:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 80246fa:	e7bf      	b.n	802467c <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 80246fc:	2700      	movs	r7, #0
 80246fe:	e7c1      	b.n	8024684 <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8024700:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024704:	e7be      	b.n	8024684 <mg_http_parse+0x140>
 8024706:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802470a:	e7bb      	b.n	8024684 <mg_http_parse+0x140>
    return -1;  // error when parsing
 802470c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024710:	e7b8      	b.n	8024684 <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8024712:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024716:	e7b5      	b.n	8024684 <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8024718:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802471c:	e7b2      	b.n	8024684 <mg_http_parse+0x140>
 802471e:	bf00      	nop
 8024720:	0803a4ec 	.word	0x0803a4ec
 8024724:	0803a4fc 	.word	0x0803a4fc
 8024728:	08037498 	.word	0x08037498
 802472c:	0803674c 	.word	0x0803674c
 8024730:	0803a504 	.word	0x0803a504

08024734 <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8024734:	b530      	push	{r4, r5, lr}
 8024736:	b085      	sub	sp, #20
 8024738:	ac04      	add	r4, sp, #16
 802473a:	e904 0003 	stmdb	r4, {r0, r1}
 802473e:	4669      	mov	r1, sp
 8024740:	e881 000c 	stmia.w	r1, {r2, r3}
 8024744:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 8024746:	b110      	cbz	r0, 802474e <mg_match+0x1a>
 8024748:	2300      	movs	r3, #0
 802474a:	6003      	str	r3, [r0, #0]
 802474c:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 802474e:	2400      	movs	r4, #0
 8024750:	46a4      	mov	ip, r4
 8024752:	4621      	mov	r1, r4
 8024754:	4623      	mov	r3, r4
 8024756:	e028      	b.n	80247aa <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8024758:	9a02      	ldr	r2, [sp, #8]
 802475a:	440a      	add	r2, r1
 802475c:	6002      	str	r2, [r0, #0]
 802475e:	2201      	movs	r2, #1
 8024760:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8024762:	2200      	movs	r2, #0
 8024764:	6082      	str	r2, [r0, #8]
 8024766:	60c2      	str	r2, [r0, #12]
 8024768:	3008      	adds	r0, #8
      i++, j++;
 802476a:	3301      	adds	r3, #1
 802476c:	3101      	adds	r1, #1
 802476e:	e01c      	b.n	80247aa <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8024770:	429a      	cmp	r2, r3
 8024772:	d905      	bls.n	8024780 <mg_match+0x4c>
 8024774:	9a00      	ldr	r2, [sp, #0]
 8024776:	5cd2      	ldrb	r2, [r2, r3]
 8024778:	2a2a      	cmp	r2, #42	@ 0x2a
 802477a:	d045      	beq.n	8024808 <mg_match+0xd4>
 802477c:	2a23      	cmp	r2, #35	@ 0x23
 802477e:	d043      	beq.n	8024808 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8024780:	2c00      	cmp	r4, #0
 8024782:	d065      	beq.n	8024850 <mg_match+0x11c>
 8024784:	9b03      	ldr	r3, [sp, #12]
 8024786:	42a3      	cmp	r3, r4
 8024788:	d365      	bcc.n	8024856 <mg_match+0x122>
 802478a:	9b00      	ldr	r3, [sp, #0]
 802478c:	f813 300c 	ldrb.w	r3, [r3, ip]
 8024790:	2b23      	cmp	r3, #35	@ 0x23
 8024792:	d003      	beq.n	802479c <mg_match+0x68>
 8024794:	9b02      	ldr	r3, [sp, #8]
 8024796:	5c5b      	ldrb	r3, [r3, r1]
 8024798:	2b2f      	cmp	r3, #47	@ 0x2f
 802479a:	d05e      	beq.n	802485a <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 802479c:	2800      	cmp	r0, #0
 802479e:	d046      	beq.n	802482e <mg_match+0xfa>
 80247a0:	6803      	ldr	r3, [r0, #0]
 80247a2:	2b00      	cmp	r3, #0
 80247a4:	d03c      	beq.n	8024820 <mg_match+0xec>
      i = ni, j = nj;
 80247a6:	4621      	mov	r1, r4
 80247a8:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 80247aa:	9a01      	ldr	r2, [sp, #4]
 80247ac:	429a      	cmp	r2, r3
 80247ae:	d802      	bhi.n	80247b6 <mg_match+0x82>
 80247b0:	9d03      	ldr	r5, [sp, #12]
 80247b2:	428d      	cmp	r5, r1
 80247b4:	d941      	bls.n	802483a <mg_match+0x106>
    if (i < p.len && j < s.len &&
 80247b6:	429a      	cmp	r2, r3
 80247b8:	d9da      	bls.n	8024770 <mg_match+0x3c>
 80247ba:	9d03      	ldr	r5, [sp, #12]
 80247bc:	428d      	cmp	r5, r1
 80247be:	d9d7      	bls.n	8024770 <mg_match+0x3c>
        (p.buf[i] == '?' ||
 80247c0:	9d00      	ldr	r5, [sp, #0]
 80247c2:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 80247c6:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 80247ca:	d009      	beq.n	80247e0 <mg_match+0xac>
        (p.buf[i] == '?' ||
 80247cc:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 80247d0:	d0ce      	beq.n	8024770 <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 80247d2:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 80247d6:	d0cb      	beq.n	8024770 <mg_match+0x3c>
 80247d8:	9d02      	ldr	r5, [sp, #8]
 80247da:	5c6d      	ldrb	r5, [r5, r1]
 80247dc:	45ae      	cmp	lr, r5
 80247de:	d1c7      	bne.n	8024770 <mg_match+0x3c>
      if (caps == NULL) {
 80247e0:	2800      	cmp	r0, #0
 80247e2:	d0c2      	beq.n	802476a <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 80247e4:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 80247e8:	d0b6      	beq.n	8024758 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 80247ea:	6802      	ldr	r2, [r0, #0]
 80247ec:	2a00      	cmp	r2, #0
 80247ee:	d0bc      	beq.n	802476a <mg_match+0x36>
 80247f0:	6845      	ldr	r5, [r0, #4]
 80247f2:	2d00      	cmp	r5, #0
 80247f4:	d1b9      	bne.n	802476a <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 80247f6:	9d02      	ldr	r5, [sp, #8]
 80247f8:	440d      	add	r5, r1
 80247fa:	1aad      	subs	r5, r5, r2
 80247fc:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 80247fe:	2200      	movs	r2, #0
 8024800:	60c2      	str	r2, [r0, #12]
 8024802:	6082      	str	r2, [r0, #8]
 8024804:	3008      	adds	r0, #8
 8024806:	e7b0      	b.n	802476a <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8024808:	b108      	cbz	r0, 802480e <mg_match+0xda>
 802480a:	6802      	ldr	r2, [r0, #0]
 802480c:	b11a      	cbz	r2, 8024816 <mg_match+0xe2>
      ni = i++, nj = j + 1;
 802480e:	1c4c      	adds	r4, r1, #1
 8024810:	469c      	mov	ip, r3
 8024812:	3301      	adds	r3, #1
 8024814:	e7c9      	b.n	80247aa <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8024816:	6042      	str	r2, [r0, #4]
 8024818:	9a02      	ldr	r2, [sp, #8]
 802481a:	440a      	add	r2, r1
 802481c:	6002      	str	r2, [r0, #0]
 802481e:	e7f6      	b.n	802480e <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8024820:	6843      	ldr	r3, [r0, #4]
 8024822:	b93b      	cbnz	r3, 8024834 <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 8024824:	3808      	subs	r0, #8
 8024826:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 8024828:	4621      	mov	r1, r4
 802482a:	4663      	mov	r3, ip
 802482c:	e7bd      	b.n	80247aa <mg_match+0x76>
 802482e:	4621      	mov	r1, r4
 8024830:	4663      	mov	r3, ip
 8024832:	e7ba      	b.n	80247aa <mg_match+0x76>
 8024834:	4621      	mov	r1, r4
 8024836:	4663      	mov	r3, ip
 8024838:	e7b7      	b.n	80247aa <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 802483a:	b180      	cbz	r0, 802485e <mg_match+0x12a>
 802483c:	6803      	ldr	r3, [r0, #0]
 802483e:	b183      	cbz	r3, 8024862 <mg_match+0x12e>
 8024840:	6842      	ldr	r2, [r0, #4]
 8024842:	b982      	cbnz	r2, 8024866 <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8024844:	9a02      	ldr	r2, [sp, #8]
 8024846:	440a      	add	r2, r1
 8024848:	1ad3      	subs	r3, r2, r3
 802484a:	6043      	str	r3, [r0, #4]
  return true;
 802484c:	2001      	movs	r0, #1
 802484e:	e000      	b.n	8024852 <mg_match+0x11e>
      return false;
 8024850:	2000      	movs	r0, #0
}
 8024852:	b005      	add	sp, #20
 8024854:	bd30      	pop	{r4, r5, pc}
      return false;
 8024856:	2000      	movs	r0, #0
 8024858:	e7fb      	b.n	8024852 <mg_match+0x11e>
 802485a:	2000      	movs	r0, #0
 802485c:	e7f9      	b.n	8024852 <mg_match+0x11e>
  return true;
 802485e:	2001      	movs	r0, #1
 8024860:	e7f7      	b.n	8024852 <mg_match+0x11e>
 8024862:	2001      	movs	r0, #1
 8024864:	e7f5      	b.n	8024852 <mg_match+0x11e>
 8024866:	2001      	movs	r0, #1
 8024868:	e7f3      	b.n	8024852 <mg_match+0x11e>

0802486a <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 802486a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802486e:	b085      	sub	sp, #20
 8024870:	ac04      	add	r4, sp, #16
 8024872:	e904 0003 	stmdb	r4, {r0, r1}
 8024876:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 802487a:	b379      	cbz	r1, 80248dc <mg_span+0x72>
 802487c:	4690      	mov	r8, r2
 802487e:	461f      	mov	r7, r3
 8024880:	460d      	mov	r5, r1
 8024882:	9e02      	ldr	r6, [sp, #8]
 8024884:	b366      	cbz	r6, 80248e0 <mg_span+0x76>
    size_t len = 0;
 8024886:	2400      	movs	r4, #0
 8024888:	e000      	b.n	802488c <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 802488a:	3401      	adds	r4, #1
 802488c:	42a5      	cmp	r5, r4
 802488e:	d902      	bls.n	8024896 <mg_span+0x2c>
 8024890:	5d31      	ldrb	r1, [r6, r4]
 8024892:	4281      	cmp	r1, r0
 8024894:	d1f9      	bne.n	802488a <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8024896:	f1b8 0f00 	cmp.w	r8, #0
 802489a:	d009      	beq.n	80248b0 <mg_span+0x46>
 802489c:	46e9      	mov	r9, sp
 802489e:	4622      	mov	r2, r4
 80248a0:	4631      	mov	r1, r6
 80248a2:	4648      	mov	r0, r9
 80248a4:	f7ff fd30 	bl	8024308 <mg_str_n>
 80248a8:	e899 0003 	ldmia.w	r9, {r0, r1}
 80248ac:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 80248b0:	b187      	cbz	r7, 80248d4 <mg_span+0x6a>
 80248b2:	46e8      	mov	r8, sp
 80248b4:	1b2a      	subs	r2, r5, r4
 80248b6:	1931      	adds	r1, r6, r4
 80248b8:	4640      	mov	r0, r8
 80248ba:	f7ff fd25 	bl	8024308 <mg_str_n>
 80248be:	e898 0003 	ldmia.w	r8, {r0, r1}
 80248c2:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 80248c6:	42a5      	cmp	r5, r4
 80248c8:	d904      	bls.n	80248d4 <mg_span+0x6a>
 80248ca:	4603      	mov	r3, r0
 80248cc:	3301      	adds	r3, #1
 80248ce:	603b      	str	r3, [r7, #0]
 80248d0:	1e4b      	subs	r3, r1, #1
 80248d2:	607b      	str	r3, [r7, #4]
    return true;
 80248d4:	2001      	movs	r0, #1
}
 80248d6:	b005      	add	sp, #20
 80248d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 80248dc:	2000      	movs	r0, #0
 80248de:	e7fa      	b.n	80248d6 <mg_span+0x6c>
 80248e0:	2000      	movs	r0, #0
 80248e2:	e7f8      	b.n	80248d6 <mg_span+0x6c>

080248e4 <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 80248e4:	b082      	sub	sp, #8
 80248e6:	b510      	push	{r4, lr}
 80248e8:	b08a      	sub	sp, #40	@ 0x28
 80248ea:	4604      	mov	r4, r0
 80248ec:	f10d 0c08 	add.w	ip, sp, #8
 80248f0:	e88c 0006 	stmia.w	ip, {r1, r2}
 80248f4:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 80248f6:	2200      	movs	r2, #0
 80248f8:	4611      	mov	r1, r2
 80248fa:	f7ff fd05 	bl	8024308 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 80248fe:	ab02      	add	r3, sp, #8
 8024900:	2226      	movs	r2, #38	@ 0x26
 8024902:	9200      	str	r2, [sp, #0]
 8024904:	aa08      	add	r2, sp, #32
 8024906:	e893 0003 	ldmia.w	r3, {r0, r1}
 802490a:	f7ff ffae 	bl	802486a <mg_span>
 802490e:	b1c8      	cbz	r0, 8024944 <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8024910:	233d      	movs	r3, #61	@ 0x3d
 8024912:	9300      	str	r3, [sp, #0]
 8024914:	ab04      	add	r3, sp, #16
 8024916:	aa06      	add	r2, sp, #24
 8024918:	a90a      	add	r1, sp, #40	@ 0x28
 802491a:	e911 0003 	ldmdb	r1, {r0, r1}
 802491e:	f7ff ffa4 	bl	802486a <mg_span>
 8024922:	2800      	cmp	r0, #0
 8024924:	d0eb      	beq.n	80248fe <mg_http_var+0x1a>
 8024926:	9a07      	ldr	r2, [sp, #28]
 8024928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802492a:	4293      	cmp	r3, r2
 802492c:	d1e7      	bne.n	80248fe <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 802492e:	9906      	ldr	r1, [sp, #24]
 8024930:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024932:	f7fb fa07 	bl	801fd44 <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8024936:	2800      	cmp	r0, #0
 8024938:	d1e1      	bne.n	80248fe <mg_http_var+0x1a>
      result = v;
 802493a:	ab04      	add	r3, sp, #16
 802493c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024940:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8024944:	4620      	mov	r0, r4
 8024946:	b00a      	add	sp, #40	@ 0x28
 8024948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802494c:	b002      	add	sp, #8
 802494e:	4770      	bx	lr

08024950 <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8024950:	b530      	push	{r4, r5, lr}
 8024952:	b08d      	sub	sp, #52	@ 0x34
 8024954:	4604      	mov	r4, r0
 8024956:	a802      	add	r0, sp, #8
 8024958:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 802495c:	4619      	mov	r1, r3
 802495e:	a804      	add	r0, sp, #16
 8024960:	f7ff fcc6 	bl	80242f0 <mg_str_s>
  size_t i = 0;
 8024964:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8024966:	e000      	b.n	802496a <guess_content_type+0x1a>
 8024968:	3301      	adds	r3, #1
 802496a:	9803      	ldr	r0, [sp, #12]
 802496c:	4298      	cmp	r0, r3
 802496e:	d906      	bls.n	802497e <guess_content_type+0x2e>
 8024970:	1ac1      	subs	r1, r0, r3
 8024972:	9a02      	ldr	r2, [sp, #8]
 8024974:	440a      	add	r2, r1
 8024976:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 802497a:	2a2e      	cmp	r2, #46	@ 0x2e
 802497c:	d1f4      	bne.n	8024968 <guess_content_type+0x18>
  path.buf += path.len - i;
 802497e:	1ac0      	subs	r0, r0, r3
 8024980:	9a02      	ldr	r2, [sp, #8]
 8024982:	4402      	add	r2, r0
 8024984:	9202      	str	r2, [sp, #8]
  path.len = i;
 8024986:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 8024988:	ab04      	add	r3, sp, #16
 802498a:	222c      	movs	r2, #44	@ 0x2c
 802498c:	9200      	str	r2, [sp, #0]
 802498e:	aa0a      	add	r2, sp, #40	@ 0x28
 8024990:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024994:	f7ff ff69 	bl	802486a <mg_span>
 8024998:	b1c0      	cbz	r0, 80249cc <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 802499a:	233d      	movs	r3, #61	@ 0x3d
 802499c:	9300      	str	r3, [sp, #0]
 802499e:	ab06      	add	r3, sp, #24
 80249a0:	aa08      	add	r2, sp, #32
 80249a2:	a90c      	add	r1, sp, #48	@ 0x30
 80249a4:	e911 0003 	ldmdb	r1, {r0, r1}
 80249a8:	f7ff ff5f 	bl	802486a <mg_span>
 80249ac:	2800      	cmp	r0, #0
 80249ae:	d0eb      	beq.n	8024988 <guess_content_type+0x38>
 80249b0:	ab08      	add	r3, sp, #32
 80249b2:	cb0c      	ldmia	r3, {r2, r3}
 80249b4:	a902      	add	r1, sp, #8
 80249b6:	c903      	ldmia	r1, {r0, r1}
 80249b8:	f7ff fd6b 	bl	8024492 <mg_strcmp>
 80249bc:	2800      	cmp	r0, #0
 80249be:	d1e3      	bne.n	8024988 <guess_content_type+0x38>
 80249c0:	ab06      	add	r3, sp, #24
 80249c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80249c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80249ca:	e01c      	b.n	8024a06 <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80249cc:	2500      	movs	r5, #0
 80249ce:	4b0f      	ldr	r3, [pc, #60]	@ (8024a0c <guess_content_type+0xbc>)
 80249d0:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 80249d4:	b19b      	cbz	r3, 80249fe <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80249d6:	4b0d      	ldr	r3, [pc, #52]	@ (8024a0c <guess_content_type+0xbc>)
 80249d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80249dc:	cb0c      	ldmia	r3, {r2, r3}
 80249de:	a902      	add	r1, sp, #8
 80249e0:	c903      	ldmia	r1, {r0, r1}
 80249e2:	f7ff fd56 	bl	8024492 <mg_strcmp>
 80249e6:	b108      	cbz	r0, 80249ec <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80249e8:	3502      	adds	r5, #2
 80249ea:	e7f0      	b.n	80249ce <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80249ec:	3501      	adds	r5, #1
 80249ee:	4b07      	ldr	r3, [pc, #28]	@ (8024a0c <guess_content_type+0xbc>)
 80249f0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80249f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80249f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80249fc:	e003      	b.n	8024a06 <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 80249fe:	4904      	ldr	r1, [pc, #16]	@ (8024a10 <guess_content_type+0xc0>)
 8024a00:	4620      	mov	r0, r4
 8024a02:	f7ff fc75 	bl	80242f0 <mg_str_s>
}
 8024a06:	4620      	mov	r0, r4
 8024a08:	b00d      	add	sp, #52	@ 0x34
 8024a0a:	bd30      	pop	{r4, r5, pc}
 8024a0c:	0803b9f4 	.word	0x0803b9f4
 8024a10:	0803a508 	.word	0x0803a508

08024a14 <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8024a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a16:	b087      	sub	sp, #28
 8024a18:	4604      	mov	r4, r0
 8024a1a:	460e      	mov	r6, r1
 8024a1c:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 8024a1e:	2500      	movs	r5, #0
 8024a20:	1da8      	adds	r0, r5, #6
 8024a22:	6863      	ldr	r3, [r4, #4]
 8024a24:	4298      	cmp	r0, r3
 8024a26:	d23c      	bcs.n	8024aa2 <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8024a28:	6821      	ldr	r1, [r4, #0]
 8024a2a:	1b5b      	subs	r3, r3, r5
 8024a2c:	1f9a      	subs	r2, r3, #6
 8024a2e:	4401      	add	r1, r0
 8024a30:	a804      	add	r0, sp, #16
 8024a32:	f7ff fc69 	bl	8024308 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8024a36:	6820      	ldr	r0, [r4, #0]
 8024a38:	2206      	movs	r2, #6
 8024a3a:	491b      	ldr	r1, [pc, #108]	@ (8024aa8 <getrange+0x94>)
 8024a3c:	4428      	add	r0, r5
 8024a3e:	f007 ff33 	bl	802c8a8 <memcmp>
 8024a42:	b108      	cbz	r0, 8024a48 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 8024a44:	3501      	adds	r5, #1
 8024a46:	e7eb      	b.n	8024a20 <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 8024a48:	ab04      	add	r3, sp, #16
 8024a4a:	222d      	movs	r2, #45	@ 0x2d
 8024a4c:	9200      	str	r2, [sp, #0]
 8024a4e:	aa02      	add	r2, sp, #8
 8024a50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024a54:	f7ff ff09 	bl	802486a <mg_span>
 8024a58:	b1c0      	cbz	r0, 8024a8c <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 8024a5a:	4632      	mov	r2, r6
 8024a5c:	ab02      	add	r3, sp, #8
 8024a5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024a62:	f7fe f869 	bl	8022b38 <mg_to_size_t>
 8024a66:	b928      	cbnz	r0, 8024a74 <getrange+0x60>
  size_t i, numparsed = 0;
 8024a68:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8024a6a:	9b05      	ldr	r3, [sp, #20]
 8024a6c:	b923      	cbnz	r3, 8024a78 <getrange+0x64>
}
 8024a6e:	4620      	mov	r0, r4
 8024a70:	b007      	add	sp, #28
 8024a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 8024a74:	2401      	movs	r4, #1
 8024a76:	e7f8      	b.n	8024a6a <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8024a78:	463a      	mov	r2, r7
 8024a7a:	ab06      	add	r3, sp, #24
 8024a7c:	e913 0003 	ldmdb	r3, {r0, r1}
 8024a80:	f7fe f85a 	bl	8022b38 <mg_to_size_t>
 8024a84:	2800      	cmp	r0, #0
 8024a86:	d0f2      	beq.n	8024a6e <getrange+0x5a>
 8024a88:	3401      	adds	r4, #1
 8024a8a:	e7f0      	b.n	8024a6e <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8024a8c:	4632      	mov	r2, r6
 8024a8e:	ab06      	add	r3, sp, #24
 8024a90:	e913 0003 	ldmdb	r3, {r0, r1}
 8024a94:	f7fe f850 	bl	8022b38 <mg_to_size_t>
 8024a98:	b908      	cbnz	r0, 8024a9e <getrange+0x8a>
  size_t i, numparsed = 0;
 8024a9a:	2400      	movs	r4, #0
 8024a9c:	e7e7      	b.n	8024a6e <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8024a9e:	2401      	movs	r4, #1
    break;
 8024aa0:	e7e5      	b.n	8024a6e <getrange+0x5a>
  size_t i, numparsed = 0;
 8024aa2:	2400      	movs	r4, #0
 8024aa4:	e7e3      	b.n	8024a6e <getrange+0x5a>
 8024aa6:	bf00      	nop
 8024aa8:	0803a524 	.word	0x0803a524

08024aac <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 8024aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ab0:	b0e7      	sub	sp, #412	@ 0x19c
 8024ab2:	4607      	mov	r7, r0
 8024ab4:	4688      	mov	r8, r1
 8024ab6:	4614      	mov	r4, r2
 8024ab8:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8024aba:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8024abe:	f1b9 0f00 	cmp.w	r9, #0
 8024ac2:	d036      	beq.n	8024b32 <mg_http_serve_file+0x86>
  size_t size = 0;
 8024ac4:	2300      	movs	r3, #0
 8024ac6:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 8024ac8:	2200      	movs	r2, #0
 8024aca:	2300      	movs	r3, #0
 8024acc:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8024ad0:	ae5e      	add	r6, sp, #376	@ 0x178
 8024ad2:	4621      	mov	r1, r4
 8024ad4:	4630      	mov	r0, r6
 8024ad6:	f7ff fc0b 	bl	80242f0 <mg_str_s>
 8024ada:	68eb      	ldr	r3, [r5, #12]
 8024adc:	e896 0006 	ldmia.w	r6, {r1, r2}
 8024ae0:	a828      	add	r0, sp, #160	@ 0xa0
 8024ae2:	f7ff ff35 	bl	8024950 <guess_content_type>
  if (path != NULL) {
 8024ae6:	2c00      	cmp	r4, #0
 8024ae8:	d053      	beq.n	8024b92 <mg_http_serve_file+0xe6>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8024aea:	4995      	ldr	r1, [pc, #596]	@ (8024d40 <mg_http_serve_file+0x294>)
 8024aec:	4640      	mov	r0, r8
 8024aee:	f7fe f8a1 	bl	8022c34 <mg_http_get_header>
    if (ae != NULL) {
 8024af2:	4606      	mov	r6, r0
 8024af4:	2800      	cmp	r0, #0
 8024af6:	d042      	beq.n	8024b7e <mg_http_serve_file+0xd2>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8024af8:	6802      	ldr	r2, [r0, #0]
 8024afa:	6841      	ldr	r1, [r0, #4]
 8024afc:	4891      	ldr	r0, [pc, #580]	@ (8024d44 <mg_http_serve_file+0x298>)
 8024afe:	f7ff fb15 	bl	802412c <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8024b02:	4683      	mov	fp, r0
 8024b04:	b1d8      	cbz	r0, 8024b3e <mg_http_serve_file+0x92>
 8024b06:	4990      	ldr	r1, [pc, #576]	@ (8024d48 <mg_http_serve_file+0x29c>)
 8024b08:	f007 ffe2 	bl	802cad0 <strstr>
 8024b0c:	4606      	mov	r6, r0
 8024b0e:	b1d0      	cbz	r0, 8024b46 <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8024b10:	4623      	mov	r3, r4
 8024b12:	4a8e      	ldr	r2, [pc, #568]	@ (8024d4c <mg_http_serve_file+0x2a0>)
 8024b14:	2180      	movs	r1, #128	@ 0x80
 8024b16:	a82e      	add	r0, sp, #184	@ 0xb8
 8024b18:	f7fe fd62 	bl	80235e0 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8024b1c:	2201      	movs	r2, #1
 8024b1e:	a92e      	add	r1, sp, #184	@ 0xb8
 8024b20:	4648      	mov	r0, r9
 8024b22:	f7fd ffcd 	bl	8022ac0 <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 8024b26:	4606      	mov	r6, r0
 8024b28:	b130      	cbz	r0, 8024b38 <mg_http_serve_file+0x8c>
 8024b2a:	f04f 0a01 	mov.w	sl, #1
 8024b2e:	ac2e      	add	r4, sp, #184	@ 0xb8
 8024b30:	e00b      	b.n	8024b4a <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8024b32:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 8024d74 <mg_http_serve_file+0x2c8>
 8024b36:	e7c5      	b.n	8024ac4 <mg_http_serve_file+0x18>
  bool gzip = false;
 8024b38:	f04f 0a00 	mov.w	sl, #0
 8024b3c:	e005      	b.n	8024b4a <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 8024b3e:	4606      	mov	r6, r0
  bool gzip = false;
 8024b40:	f04f 0a00 	mov.w	sl, #0
 8024b44:	e001      	b.n	8024b4a <mg_http_serve_file+0x9e>
 8024b46:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 8024b4a:	4658      	mov	r0, fp
 8024b4c:	f7f5 ff8e 	bl	801aa6c <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8024b50:	b1c6      	cbz	r6, 8024b84 <mg_http_serve_file+0xd8>
  if (fd == NULL && opts->page404 != NULL) {
 8024b52:	b316      	cbz	r6, 8024b9a <mg_http_serve_file+0xee>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8024b54:	f8d9 3000 	ldr.w	r3, [r9]
 8024b58:	aa2a      	add	r2, sp, #168	@ 0xa8
 8024b5a:	a92d      	add	r1, sp, #180	@ 0xb4
 8024b5c:	4620      	mov	r0, r4
 8024b5e:	4798      	blx	r3
 8024b60:	2800      	cmp	r0, #0
 8024b62:	d137      	bne.n	8024bd4 <mg_http_serve_file+0x128>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8024b64:	4b7a      	ldr	r3, [pc, #488]	@ (8024d50 <mg_http_serve_file+0x2a4>)
 8024b66:	68aa      	ldr	r2, [r5, #8]
 8024b68:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8024b6c:	4638      	mov	r0, r7
 8024b6e:	f7ff fa35 	bl	8023fdc <mg_http_reply>
    mg_fs_close(fd);
 8024b72:	4630      	mov	r0, r6
 8024b74:	f7fd ffbd 	bl	8022af2 <mg_fs_close>
}
 8024b78:	b067      	add	sp, #412	@ 0x19c
 8024b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 8024b7e:	f04f 0a00 	mov.w	sl, #0
 8024b82:	e7e5      	b.n	8024b50 <mg_http_serve_file+0xa4>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8024b84:	2201      	movs	r2, #1
 8024b86:	4621      	mov	r1, r4
 8024b88:	4648      	mov	r0, r9
 8024b8a:	f7fd ff99 	bl	8022ac0 <mg_fs_open>
 8024b8e:	4606      	mov	r6, r0
 8024b90:	e7df      	b.n	8024b52 <mg_http_serve_file+0xa6>
  struct mg_fd *fd = NULL;
 8024b92:	4626      	mov	r6, r4
  bool gzip = false;
 8024b94:	f04f 0a00 	mov.w	sl, #0
 8024b98:	e7db      	b.n	8024b52 <mg_http_serve_file+0xa6>
  if (fd == NULL && opts->page404 != NULL) {
 8024b9a:	6929      	ldr	r1, [r5, #16]
 8024b9c:	b1b9      	cbz	r1, 8024bce <mg_http_serve_file+0x122>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8024b9e:	2201      	movs	r2, #1
 8024ba0:	4648      	mov	r0, r9
 8024ba2:	f7fd ff8d 	bl	8022ac0 <mg_fs_open>
 8024ba6:	4606      	mov	r6, r0
    path = opts->page404;
 8024ba8:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8024baa:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 8024bae:	4621      	mov	r1, r4
 8024bb0:	4658      	mov	r0, fp
 8024bb2:	f7ff fb9d 	bl	80242f0 <mg_str_s>
 8024bb6:	68eb      	ldr	r3, [r5, #12]
 8024bb8:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8024bbc:	a80a      	add	r0, sp, #40	@ 0x28
 8024bbe:	f7ff fec7 	bl	8024950 <guess_content_type>
 8024bc2:	ab28      	add	r3, sp, #160	@ 0xa0
 8024bc4:	aa0a      	add	r2, sp, #40	@ 0x28
 8024bc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024bca:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8024bce:	2e00      	cmp	r6, #0
 8024bd0:	d1c0      	bne.n	8024b54 <mg_http_serve_file+0xa8>
 8024bd2:	e7c7      	b.n	8024b64 <mg_http_serve_file+0xb8>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8024bd4:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8024bd8:	e9cd 2300 	strd	r2, r3, [sp]
 8024bdc:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8024bde:	2140      	movs	r1, #64	@ 0x40
 8024be0:	a84e      	add	r0, sp, #312	@ 0x138
 8024be2:	f7ff fa3d 	bl	8024060 <mg_http_etag>
 8024be6:	b190      	cbz	r0, 8024c0e <mg_http_serve_file+0x162>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8024be8:	495a      	ldr	r1, [pc, #360]	@ (8024d54 <mg_http_serve_file+0x2a8>)
 8024bea:	4640      	mov	r0, r8
 8024bec:	f7fe f822 	bl	8022c34 <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8024bf0:	4604      	mov	r4, r0
 8024bf2:	b160      	cbz	r0, 8024c0e <mg_http_serve_file+0x162>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8024bf4:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 8024bf8:	a94e      	add	r1, sp, #312	@ 0x138
 8024bfa:	4658      	mov	r0, fp
 8024bfc:	f7ff fb78 	bl	80242f0 <mg_str_s>
 8024c00:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8024c04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024c08:	f7ff fc6d 	bl	80244e6 <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8024c0c:	b340      	cbz	r0, 8024c60 <mg_http_serve_file+0x1b4>
    size_t r1 = 0, r2 = 0, cl = size;
 8024c0e:	f04f 0b00 	mov.w	fp, #0
 8024c12:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8024c16:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8024c1a:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8024c1c:	494e      	ldr	r1, [pc, #312]	@ (8024d58 <mg_http_serve_file+0x2ac>)
 8024c1e:	4640      	mov	r0, r8
 8024c20:	f7fe f808 	bl	8022c34 <mg_http_get_header>
    range[0] = '\0';
 8024c24:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8024c28:	2800      	cmp	r0, #0
 8024c2a:	d040      	beq.n	8024cae <mg_http_serve_file+0x202>
 8024c2c:	aa0e      	add	r2, sp, #56	@ 0x38
 8024c2e:	a90d      	add	r1, sp, #52	@ 0x34
 8024c30:	f7ff fef0 	bl	8024a14 <getrange>
 8024c34:	2800      	cmp	r0, #0
 8024c36:	dd70      	ble.n	8024d1a <mg_http_serve_file+0x26e>
      if (n == 1) r2 = cl - 1;
 8024c38:	2801      	cmp	r0, #1
 8024c3a:	d01c      	beq.n	8024c76 <mg_http_serve_file+0x1ca>
      if (r1 > r2 || r2 >= cl) {
 8024c3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024c3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024c40:	429a      	cmp	r2, r3
 8024c42:	d801      	bhi.n	8024c48 <mg_http_serve_file+0x19c>
 8024c44:	42a3      	cmp	r3, r4
 8024c46:	d319      	bcc.n	8024c7c <mg_http_serve_file+0x1d0>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8024c48:	2400      	movs	r4, #0
 8024c4a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8024c4c:	9300      	str	r3, [sp, #0]
 8024c4e:	9401      	str	r4, [sp, #4]
 8024c50:	4a42      	ldr	r2, [pc, #264]	@ (8024d5c <mg_http_serve_file+0x2b0>)
 8024c52:	2164      	movs	r1, #100	@ 0x64
 8024c54:	a80f      	add	r0, sp, #60	@ 0x3c
 8024c56:	f7fe fcc3 	bl	80235e0 <mg_snprintf>
        status = 416;
 8024c5a:	f44f 79d0 	mov.w	r9, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8024c5e:	e028      	b.n	8024cb2 <mg_http_serve_file+0x206>
    mg_fs_close(fd);
 8024c60:	4630      	mov	r0, r6
 8024c62:	f7fd ff46 	bl	8022af2 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8024c66:	4b3e      	ldr	r3, [pc, #248]	@ (8024d60 <mg_http_serve_file+0x2b4>)
 8024c68:	68aa      	ldr	r2, [r5, #8]
 8024c6a:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8024c6e:	4638      	mov	r0, r7
 8024c70:	f7ff f9b4 	bl	8023fdc <mg_http_reply>
 8024c74:	e780      	b.n	8024b78 <mg_http_serve_file+0xcc>
      if (n == 1) r2 = cl - 1;
 8024c76:	1e63      	subs	r3, r4, #1
 8024c78:	930e      	str	r3, [sp, #56]	@ 0x38
 8024c7a:	e7df      	b.n	8024c3c <mg_http_serve_file+0x190>
        cl = r2 - r1 + 1;
 8024c7c:	1a9b      	subs	r3, r3, r2
 8024c7e:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8024c80:	1911      	adds	r1, r2, r4
 8024c82:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 8024c84:	2300      	movs	r3, #0
 8024c86:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8024c88:	9004      	str	r0, [sp, #16]
 8024c8a:	9305      	str	r3, [sp, #20]
 8024c8c:	9102      	str	r1, [sp, #8]
 8024c8e:	9303      	str	r3, [sp, #12]
 8024c90:	9200      	str	r2, [sp, #0]
 8024c92:	9301      	str	r3, [sp, #4]
 8024c94:	4a33      	ldr	r2, [pc, #204]	@ (8024d64 <mg_http_serve_file+0x2b8>)
 8024c96:	2164      	movs	r1, #100	@ 0x64
 8024c98:	a80f      	add	r0, sp, #60	@ 0x3c
 8024c9a:	f7fe fca1 	bl	80235e0 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8024c9e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8024ca2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024ca4:	6830      	ldr	r0, [r6, #0]
 8024ca6:	4798      	blx	r3
        status = 206;
 8024ca8:	f04f 09ce 	mov.w	r9, #206	@ 0xce
 8024cac:	e001      	b.n	8024cb2 <mg_http_serve_file+0x206>
    int n, status = 200;
 8024cae:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
    mg_printf(c,
 8024cb2:	4648      	mov	r0, r9
 8024cb4:	f7fb f96c 	bl	801ff90 <mg_http_status_code_str>
 8024cb8:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8024cba:	9929      	ldr	r1, [sp, #164]	@ 0xa4
    mg_printf(c,
 8024cbc:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024cbe:	46a4      	mov	ip, r4
 8024cc0:	f1ba 0f00 	cmp.w	sl, #0
 8024cc4:	d02c      	beq.n	8024d20 <mg_http_serve_file+0x274>
 8024cc6:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 8024d78 <mg_http_serve_file+0x2cc>
              range, opts->extra_headers ? opts->extra_headers : "");
 8024cca:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 8024ccc:	b35a      	cbz	r2, 8024d26 <mg_http_serve_file+0x27a>
 8024cce:	9208      	str	r2, [sp, #32]
 8024cd0:	aa0f      	add	r2, sp, #60	@ 0x3c
 8024cd2:	9207      	str	r2, [sp, #28]
 8024cd4:	f8cd e018 	str.w	lr, [sp, #24]
 8024cd8:	f8cd c010 	str.w	ip, [sp, #16]
 8024cdc:	2200      	movs	r2, #0
 8024cde:	9205      	str	r2, [sp, #20]
 8024ce0:	aa4e      	add	r2, sp, #312	@ 0x138
 8024ce2:	9202      	str	r2, [sp, #8]
 8024ce4:	9001      	str	r0, [sp, #4]
 8024ce6:	9100      	str	r1, [sp, #0]
 8024ce8:	464a      	mov	r2, r9
 8024cea:	491f      	ldr	r1, [pc, #124]	@ (8024d68 <mg_http_serve_file+0x2bc>)
 8024cec:	4638      	mov	r0, r7
 8024cee:	f7ff f94f 	bl	8023f90 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8024cf2:	ad64      	add	r5, sp, #400	@ 0x190
 8024cf4:	491d      	ldr	r1, [pc, #116]	@ (8024d6c <mg_http_serve_file+0x2c0>)
 8024cf6:	4628      	mov	r0, r5
 8024cf8:	f7ff fafa 	bl	80242f0 <mg_str_s>
 8024cfc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8024d00:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024d04:	f7ff fbef 	bl	80244e6 <mg_strcasecmp>
 8024d08:	b178      	cbz	r0, 8024d2a <mg_http_serve_file+0x27e>
      c->pfn = static_cb;
 8024d0a:	4b19      	ldr	r3, [pc, #100]	@ (8024d70 <mg_http_serve_file+0x2c4>)
 8024d0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      c->pfn_data = fd;
 8024d10:	f8c7 6084 	str.w	r6, [r7, #132]	@ 0x84
      *clp = cl;
 8024d14:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
}
 8024d18:	e72e      	b.n	8024b78 <mg_http_serve_file+0xcc>
    int n, status = 200;
 8024d1a:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 8024d1e:	e7c8      	b.n	8024cb2 <mg_http_serve_file+0x206>
    mg_printf(c,
 8024d20:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8024d60 <mg_http_serve_file+0x2b4>
 8024d24:	e7d1      	b.n	8024cca <mg_http_serve_file+0x21e>
 8024d26:	4a0e      	ldr	r2, [pc, #56]	@ (8024d60 <mg_http_serve_file+0x2b4>)
 8024d28:	e7d1      	b.n	8024cce <mg_http_serve_file+0x222>
      c->is_resp = 0;
 8024d2a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8024d2e:	f36f 13c7 	bfc	r3, #7, #1
 8024d32:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_fs_close(fd);
 8024d36:	4630      	mov	r0, r6
 8024d38:	f7fd fedb 	bl	8022af2 <mg_fs_close>
 8024d3c:	e71c      	b.n	8024b78 <mg_http_serve_file+0xcc>
 8024d3e:	bf00      	nop
 8024d40:	0803a548 	.word	0x0803a548
 8024d44:	0803a454 	.word	0x0803a454
 8024d48:	0803b908 	.word	0x0803b908
 8024d4c:	0803a558 	.word	0x0803a558
 8024d50:	0803a560 	.word	0x0803a560
 8024d54:	0803a56c 	.word	0x0803a56c
 8024d58:	0803a57c 	.word	0x0803a57c
 8024d5c:	0803a584 	.word	0x0803a584
 8024d60:	08036c70 	.word	0x08036c70
 8024d64:	0803a5a4 	.word	0x0803a5a4
 8024d68:	0803a5cc 	.word	0x0803a5cc
 8024d6c:	0803a61c 	.word	0x0803a61c
 8024d70:	08026efd 	.word	0x08026efd
 8024d74:	20000130 	.word	0x20000130
 8024d78:	0803a52c 	.word	0x0803a52c

08024d7c <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8024d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d80:	b083      	sub	sp, #12
 8024d82:	ac02      	add	r4, sp, #8
 8024d84:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8024d88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024d8a:	3901      	subs	r1, #1
 8024d8c:	2907      	cmp	r1, #7
 8024d8e:	f200 8128 	bhi.w	8024fe2 <mg_str_to_num+0x266>
 8024d92:	e8df f011 	tbh	[pc, r1, lsl #1]
 8024d96:	0008      	.short	0x0008
 8024d98:	01260020 	.word	0x01260020
 8024d9c:	0126000c 	.word	0x0126000c
 8024da0:	01260126 	.word	0x01260126
 8024da4:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8024da6:	20ff      	movs	r0, #255	@ 0xff
 8024da8:	f04f 0e00 	mov.w	lr, #0
 8024dac:	e003      	b.n	8024db6 <mg_str_to_num+0x3a>
 8024dae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024db2:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 8024db6:	b9e2      	cbnz	r2, 8024df2 <mg_str_to_num+0x76>
 8024db8:	9901      	ldr	r1, [sp, #4]
 8024dba:	2901      	cmp	r1, #1
 8024dbc:	d926      	bls.n	8024e0c <mg_str_to_num+0x90>
    if (str.buf[i] == '0') {
 8024dbe:	9a00      	ldr	r2, [sp, #0]
 8024dc0:	7811      	ldrb	r1, [r2, #0]
 8024dc2:	2930      	cmp	r1, #48	@ 0x30
 8024dc4:	d00c      	beq.n	8024de0 <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 8024dc6:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 8024dca:	220a      	movs	r2, #10
 8024dcc:	e013      	b.n	8024df6 <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8024dce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024dd2:	4686      	mov	lr, r0
 8024dd4:	e7ef      	b.n	8024db6 <mg_str_to_num+0x3a>
 8024dd6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8024dda:	f04f 0e00 	mov.w	lr, #0
 8024dde:	e7ea      	b.n	8024db6 <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024de0:	7852      	ldrb	r2, [r2, #1]
 8024de2:	2a62      	cmp	r2, #98	@ 0x62
 8024de4:	d015      	beq.n	8024e12 <mg_str_to_num+0x96>
 8024de6:	2a78      	cmp	r2, #120	@ 0x78
 8024de8:	d017      	beq.n	8024e1a <mg_str_to_num+0x9e>
      i++;
 8024dea:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024dee:	220a      	movs	r2, #10
 8024df0:	e001      	b.n	8024df6 <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 8024df2:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 8024df6:	2a0a      	cmp	r2, #10
 8024df8:	d044      	beq.n	8024e84 <mg_str_to_num+0x108>
 8024dfa:	2a10      	cmp	r2, #16
 8024dfc:	f000 80d4 	beq.w	8024fa8 <mg_str_to_num+0x22c>
 8024e00:	2a02      	cmp	r2, #2
 8024e02:	d00e      	beq.n	8024e22 <mg_str_to_num+0xa6>
 8024e04:	2000      	movs	r0, #0
}
 8024e06:	b003      	add	sp, #12
 8024e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i = 0, ndigits = 0;
 8024e0c:	f04f 0c00 	mov.w	ip, #0
 8024e10:	e7f1      	b.n	8024df6 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8024e12:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024e16:	4662      	mov	r2, ip
 8024e18:	e7ed      	b.n	8024df6 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8024e1a:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024e1e:	2210      	movs	r2, #16
 8024e20:	e7e9      	b.n	8024df6 <mg_str_to_num+0x7a>
  switch (base) {
 8024e22:	2200      	movs	r2, #0
 8024e24:	4611      	mov	r1, r2
 8024e26:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8024e28:	9d01      	ldr	r5, [sp, #4]
 8024e2a:	4565      	cmp	r5, ip
 8024e2c:	f240 80c0 	bls.w	8024fb0 <mg_str_to_num+0x234>
 8024e30:	9d00      	ldr	r5, [sp, #0]
 8024e32:	f815 600c 	ldrb.w	r6, [r5, ip]
 8024e36:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8024e3a:	b2ff      	uxtb	r7, r7
 8024e3c:	2f01      	cmp	r7, #1
 8024e3e:	f200 80b7 	bhi.w	8024fb0 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8024e42:	3e30      	subs	r6, #48	@ 0x30
 8024e44:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 8024e48:	ea4f 0950 	mov.w	r9, r0, lsr #1
 8024e4c:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 8024e50:	ea4f 075e 	mov.w	r7, lr, lsr #1
 8024e54:	4591      	cmp	r9, r2
 8024e56:	418f      	sbcs	r7, r1
 8024e58:	f0c0 80c5 	bcc.w	8024fe6 <mg_str_to_num+0x26a>
        result *= 2;
 8024e5c:	1892      	adds	r2, r2, r2
 8024e5e:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 8024e60:	ebb0 0a06 	subs.w	sl, r0, r6
 8024e64:	eb6e 0708 	sbc.w	r7, lr, r8
 8024e68:	4592      	cmp	sl, r2
 8024e6a:	418f      	sbcs	r7, r1
 8024e6c:	f0c0 80bd 	bcc.w	8024fea <mg_str_to_num+0x26e>
        result += digit;
 8024e70:	18b2      	adds	r2, r6, r2
 8024e72:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 8024e76:	f10c 0c01 	add.w	ip, ip, #1
 8024e7a:	3401      	adds	r4, #1
 8024e7c:	e7d4      	b.n	8024e28 <mg_str_to_num+0xac>
        if (result > max / 10) return false;  // Overflow
 8024e7e:	f04f 0901 	mov.w	r9, #1
 8024e82:	e017      	b.n	8024eb4 <mg_str_to_num+0x138>
  switch (base) {
 8024e84:	2200      	movs	r2, #0
 8024e86:	4611      	mov	r1, r2
 8024e88:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8024e8a:	9d01      	ldr	r5, [sp, #4]
 8024e8c:	4565      	cmp	r5, ip
 8024e8e:	f240 808f 	bls.w	8024fb0 <mg_str_to_num+0x234>
 8024e92:	9d00      	ldr	r5, [sp, #0]
 8024e94:	f815 700c 	ldrb.w	r7, [r5, ip]
 8024e98:	2f2f      	cmp	r7, #47	@ 0x2f
 8024e9a:	f240 8089 	bls.w	8024fb0 <mg_str_to_num+0x234>
 8024e9e:	2f39      	cmp	r7, #57	@ 0x39
 8024ea0:	f200 8086 	bhi.w	8024fb0 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8024ea4:	3f30      	subs	r7, #48	@ 0x30
 8024ea6:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 8024eaa:	f04f 0900 	mov.w	r9, #0
 8024eae:	eb10 060e 	adds.w	r6, r0, lr
 8024eb2:	d2e4      	bcs.n	8024e7e <mg_str_to_num+0x102>
 8024eb4:	444e      	add	r6, r9
 8024eb6:	4d54      	ldr	r5, [pc, #336]	@ (8025008 <mg_str_to_num+0x28c>)
 8024eb8:	fba5 9b06 	umull	r9, fp, r5, r6
 8024ebc:	f02b 0903 	bic.w	r9, fp, #3
 8024ec0:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 8024ec4:	eba6 0609 	sub.w	r6, r6, r9
 8024ec8:	1b86      	subs	r6, r0, r6
 8024eca:	f16e 0b00 	sbc.w	fp, lr, #0
 8024ece:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 8024ed2:	fb09 f906 	mul.w	r9, r9, r6
 8024ed6:	fb05 990b 	mla	r9, r5, fp, r9
 8024eda:	fba6 6a05 	umull	r6, sl, r6, r5
 8024ede:	44d1      	add	r9, sl
 8024ee0:	0876      	lsrs	r6, r6, #1
 8024ee2:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 8024ee6:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8024eea:	4296      	cmp	r6, r2
 8024eec:	eb79 0901 	sbcs.w	r9, r9, r1
 8024ef0:	d37d      	bcc.n	8024fee <mg_str_to_num+0x272>
        result *= 10;
 8024ef2:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8024ef6:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 8024efa:	0096      	lsls	r6, r2, #2
 8024efc:	18b2      	adds	r2, r6, r2
 8024efe:	eb41 0909 	adc.w	r9, r1, r9
 8024f02:	1892      	adds	r2, r2, r2
 8024f04:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 8024f08:	ebb0 0a07 	subs.w	sl, r0, r7
 8024f0c:	eb6e 0108 	sbc.w	r1, lr, r8
 8024f10:	4592      	cmp	sl, r2
 8024f12:	eb71 0109 	sbcs.w	r1, r1, r9
 8024f16:	d36c      	bcc.n	8024ff2 <mg_str_to_num+0x276>
        result += digit;
 8024f18:	18ba      	adds	r2, r7, r2
 8024f1a:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 8024f1e:	f10c 0c01 	add.w	ip, ip, #1
 8024f22:	3401      	adds	r4, #1
 8024f24:	e7b1      	b.n	8024e8a <mg_str_to_num+0x10e>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024f26:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 8024f2a:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024f2c:	2f05      	cmp	r7, #5
 8024f2e:	d832      	bhi.n	8024f96 <mg_str_to_num+0x21a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024f30:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024f32:	46b0      	mov	r8, r6
 8024f34:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 8024f36:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8024f3a:	bf08      	it	eq
 8024f3c:	f1b8 3fff 	cmpeq.w	r8, #4294967295	@ 0xffffffff
 8024f40:	d036      	beq.n	8024fb0 <mg_str_to_num+0x234>
        if (result > max / 16) return false;  // Overflow
 8024f42:	ea4f 1910 	mov.w	r9, r0, lsr #4
 8024f46:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 8024f4a:	ea4f 171e 	mov.w	r7, lr, lsr #4
 8024f4e:	4591      	cmp	r9, r2
 8024f50:	418f      	sbcs	r7, r1
 8024f52:	d350      	bcc.n	8024ff6 <mg_str_to_num+0x27a>
        result *= 16;
 8024f54:	0109      	lsls	r1, r1, #4
 8024f56:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8024f5a:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 8024f5c:	ebb0 0908 	subs.w	r9, r0, r8
 8024f60:	eb6e 0706 	sbc.w	r7, lr, r6
 8024f64:	4591      	cmp	r9, r2
 8024f66:	418f      	sbcs	r7, r1
 8024f68:	d347      	bcc.n	8024ffa <mg_str_to_num+0x27e>
        result += digit;
 8024f6a:	eb18 0202 	adds.w	r2, r8, r2
 8024f6e:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 8024f72:	f10c 0c01 	add.w	ip, ip, #1
 8024f76:	3401      	adds	r4, #1
      while (i < str.len) {
 8024f78:	9d01      	ldr	r5, [sp, #4]
 8024f7a:	4565      	cmp	r5, ip
 8024f7c:	d918      	bls.n	8024fb0 <mg_str_to_num+0x234>
        char c = str.buf[i];
 8024f7e:	9d00      	ldr	r5, [sp, #0]
 8024f80:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8024f84:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8024f88:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024f8a:	2f09      	cmp	r7, #9
 8024f8c:	d8cb      	bhi.n	8024f26 <mg_str_to_num+0x1aa>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8024f8e:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024f90:	46b0      	mov	r8, r6
 8024f92:	17f6      	asrs	r6, r6, #31
 8024f94:	e7cf      	b.n	8024f36 <mg_str_to_num+0x1ba>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024f96:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 8024f9a:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 8024f9c:	2f05      	cmp	r7, #5
 8024f9e:	d807      	bhi.n	8024fb0 <mg_str_to_num+0x234>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024fa0:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8024fa2:	46b0      	mov	r8, r6
 8024fa4:	17f6      	asrs	r6, r6, #31
 8024fa6:	e7c6      	b.n	8024f36 <mg_str_to_num+0x1ba>
  switch (base) {
 8024fa8:	2200      	movs	r2, #0
 8024faa:	4611      	mov	r1, r2
 8024fac:	4614      	mov	r4, r2
 8024fae:	e7e3      	b.n	8024f78 <mg_str_to_num+0x1fc>
  if (ndigits == 0) return false;
 8024fb0:	b32c      	cbz	r4, 8024ffe <mg_str_to_num+0x282>
  if (i != str.len) return false;
 8024fb2:	9801      	ldr	r0, [sp, #4]
 8024fb4:	4560      	cmp	r0, ip
 8024fb6:	d124      	bne.n	8025002 <mg_str_to_num+0x286>
  if (val_len == 1) {
 8024fb8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024fba:	2801      	cmp	r0, #1
 8024fbc:	d009      	beq.n	8024fd2 <mg_str_to_num+0x256>
  } else if (val_len == 2) {
 8024fbe:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024fc0:	2802      	cmp	r0, #2
 8024fc2:	d008      	beq.n	8024fd6 <mg_str_to_num+0x25a>
  } else if (val_len == 4) {
 8024fc4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024fc6:	2804      	cmp	r0, #4
 8024fc8:	d008      	beq.n	8024fdc <mg_str_to_num+0x260>
    *((uint64_t *) val) = (uint64_t) result;
 8024fca:	601a      	str	r2, [r3, #0]
 8024fcc:	6059      	str	r1, [r3, #4]
  return true;
 8024fce:	2001      	movs	r0, #1
 8024fd0:	e719      	b.n	8024e06 <mg_str_to_num+0x8a>
    *((uint8_t *) val) = (uint8_t) result;
 8024fd2:	701a      	strb	r2, [r3, #0]
 8024fd4:	e717      	b.n	8024e06 <mg_str_to_num+0x8a>
    *((uint16_t *) val) = (uint16_t) result;
 8024fd6:	801a      	strh	r2, [r3, #0]
  return true;
 8024fd8:	2001      	movs	r0, #1
 8024fda:	e714      	b.n	8024e06 <mg_str_to_num+0x8a>
    *((uint32_t *) val) = (uint32_t) result;
 8024fdc:	601a      	str	r2, [r3, #0]
  return true;
 8024fde:	2001      	movs	r0, #1
 8024fe0:	e711      	b.n	8024e06 <mg_str_to_num+0x8a>
  switch (base) {
 8024fe2:	2000      	movs	r0, #0
 8024fe4:	e70f      	b.n	8024e06 <mg_str_to_num+0x8a>
        if (result > max / 2) return false;  // Overflow
 8024fe6:	2000      	movs	r0, #0
 8024fe8:	e70d      	b.n	8024e06 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8024fea:	2000      	movs	r0, #0
 8024fec:	e70b      	b.n	8024e06 <mg_str_to_num+0x8a>
        if (result > max / 10) return false;  // Overflow
 8024fee:	2000      	movs	r0, #0
 8024ff0:	e709      	b.n	8024e06 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8024ff2:	2000      	movs	r0, #0
 8024ff4:	e707      	b.n	8024e06 <mg_str_to_num+0x8a>
        if (result > max / 16) return false;  // Overflow
 8024ff6:	2000      	movs	r0, #0
 8024ff8:	e705      	b.n	8024e06 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8024ffa:	2000      	movs	r0, #0
 8024ffc:	e703      	b.n	8024e06 <mg_str_to_num+0x8a>
  if (ndigits == 0) return false;
 8024ffe:	2000      	movs	r0, #0
 8025000:	e701      	b.n	8024e06 <mg_str_to_num+0x8a>
  if (i != str.len) return false;
 8025002:	2000      	movs	r0, #0
 8025004:	e6ff      	b.n	8024e06 <mg_str_to_num+0x8a>
 8025006:	bf00      	nop
 8025008:	cccccccd 	.word	0xcccccccd

0802500c <mg_url_decode>:
                  int is_form_url_encoded) {
 802500c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025010:	b087      	sub	sp, #28
 8025012:	4606      	mov	r6, r0
 8025014:	460f      	mov	r7, r1
 8025016:	4693      	mov	fp, r2
 8025018:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 802501a:	2400      	movs	r4, #0
 802501c:	4623      	mov	r3, r4
 802501e:	e027      	b.n	8025070 <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8025020:	f103 0802 	add.w	r8, r3, #2
 8025024:	45b8      	cmp	r8, r7
 8025026:	d241      	bcs.n	80250ac <mg_url_decode+0xa0>
 8025028:	3301      	adds	r3, #1
 802502a:	18f2      	adds	r2, r6, r3
 802502c:	9203      	str	r2, [sp, #12]
 802502e:	5cf0      	ldrb	r0, [r6, r3]
 8025030:	f7fa feaa 	bl	801fd88 <isx>
 8025034:	2800      	cmp	r0, #0
 8025036:	d03c      	beq.n	80250b2 <mg_url_decode+0xa6>
 8025038:	f816 0008 	ldrb.w	r0, [r6, r8]
 802503c:	f7fa fea4 	bl	801fd88 <isx>
 8025040:	2800      	cmp	r0, #0
 8025042:	d039      	beq.n	80250b8 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8025044:	f10d 0a10 	add.w	sl, sp, #16
 8025048:	2202      	movs	r2, #2
 802504a:	9903      	ldr	r1, [sp, #12]
 802504c:	4650      	mov	r0, sl
 802504e:	f7ff f95b 	bl	8024308 <mg_str_n>
 8025052:	2301      	movs	r3, #1
 8025054:	9300      	str	r3, [sp, #0]
 8025056:	eb0b 0304 	add.w	r3, fp, r4
 802505a:	2210      	movs	r2, #16
 802505c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8025060:	f7ff fe8c 	bl	8024d7c <mg_str_to_num>
        i += 2;
 8025064:	4643      	mov	r3, r8
 8025066:	e001      	b.n	802506c <mg_url_decode+0x60>
      dst[j] = src[i];
 8025068:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 802506c:	3301      	adds	r3, #1
 802506e:	462c      	mov	r4, r5
 8025070:	42bb      	cmp	r3, r7
 8025072:	d20e      	bcs.n	8025092 <mg_url_decode+0x86>
 8025074:	1c65      	adds	r5, r4, #1
 8025076:	454d      	cmp	r5, r9
 8025078:	d20b      	bcs.n	8025092 <mg_url_decode+0x86>
    if (src[i] == '%') {
 802507a:	5cf2      	ldrb	r2, [r6, r3]
 802507c:	2a25      	cmp	r2, #37	@ 0x25
 802507e:	d0cf      	beq.n	8025020 <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 8025080:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025082:	2900      	cmp	r1, #0
 8025084:	d0f0      	beq.n	8025068 <mg_url_decode+0x5c>
 8025086:	2a2b      	cmp	r2, #43	@ 0x2b
 8025088:	d1ee      	bne.n	8025068 <mg_url_decode+0x5c>
      dst[j] = ' ';
 802508a:	2220      	movs	r2, #32
 802508c:	f80b 2004 	strb.w	r2, [fp, r4]
 8025090:	e7ec      	b.n	802506c <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8025092:	454c      	cmp	r4, r9
 8025094:	d202      	bcs.n	802509c <mg_url_decode+0x90>
 8025096:	2200      	movs	r2, #0
 8025098:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 802509c:	42bb      	cmp	r3, r7
 802509e:	d30e      	bcc.n	80250be <mg_url_decode+0xb2>
 80250a0:	454c      	cmp	r4, r9
 80250a2:	d20f      	bcs.n	80250c4 <mg_url_decode+0xb8>
 80250a4:	4620      	mov	r0, r4
}
 80250a6:	b007      	add	sp, #28
 80250a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 80250ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80250b0:	e7f9      	b.n	80250a6 <mg_url_decode+0x9a>
 80250b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80250b6:	e7f6      	b.n	80250a6 <mg_url_decode+0x9a>
 80250b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80250bc:	e7f3      	b.n	80250a6 <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 80250be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80250c2:	e7f0      	b.n	80250a6 <mg_url_decode+0x9a>
 80250c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80250c8:	e7ed      	b.n	80250a6 <mg_url_decode+0x9a>

080250ca <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 80250ca:	b352      	cbz	r2, 8025122 <mg_http_get_var+0x58>
                    size_t dst_len) {
 80250cc:	b570      	push	{r4, r5, r6, lr}
 80250ce:	b086      	sub	sp, #24
 80250d0:	4604      	mov	r4, r0
 80250d2:	461d      	mov	r5, r3
 80250d4:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 80250d6:	b10b      	cbz	r3, 80250dc <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 80250d8:	2300      	movs	r3, #0
 80250da:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 80250dc:	b325      	cbz	r5, 8025128 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 80250de:	6823      	ldr	r3, [r4, #0]
 80250e0:	b32b      	cbz	r3, 802512e <mg_http_get_var+0x64>
 80250e2:	b339      	cbz	r1, 8025134 <mg_http_get_var+0x6a>
 80250e4:	6863      	ldr	r3, [r4, #4]
 80250e6:	b343      	cbz	r3, 802513a <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 80250e8:	a804      	add	r0, sp, #16
 80250ea:	f7ff f901 	bl	80242f0 <mg_str_s>
 80250ee:	9b05      	ldr	r3, [sp, #20]
 80250f0:	9300      	str	r3, [sp, #0]
 80250f2:	9b04      	ldr	r3, [sp, #16]
 80250f4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80250f8:	a802      	add	r0, sp, #8
 80250fa:	f7ff fbf3 	bl	80248e4 <mg_http_var>
    if (v.buf == NULL) {
 80250fe:	9802      	ldr	r0, [sp, #8]
 8025100:	b158      	cbz	r0, 802511a <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8025102:	2301      	movs	r3, #1
 8025104:	9300      	str	r3, [sp, #0]
 8025106:	462b      	mov	r3, r5
 8025108:	4632      	mov	r2, r6
 802510a:	9903      	ldr	r1, [sp, #12]
 802510c:	f7ff ff7e 	bl	802500c <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 8025110:	2800      	cmp	r0, #0
 8025112:	da04      	bge.n	802511e <mg_http_get_var+0x54>
 8025114:	f06f 0002 	mvn.w	r0, #2
 8025118:	e001      	b.n	802511e <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 802511a:	f06f 0003 	mvn.w	r0, #3
}
 802511e:	b006      	add	sp, #24
 8025120:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 8025122:	f06f 0001 	mvn.w	r0, #1
}
 8025126:	4770      	bx	lr
    len = -2;  // Bad destination
 8025128:	f06f 0001 	mvn.w	r0, #1
 802512c:	e7f7      	b.n	802511e <mg_http_get_var+0x54>
    len = -1;  // Bad source
 802512e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025132:	e7f4      	b.n	802511e <mg_http_get_var+0x54>
 8025134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025138:	e7f1      	b.n	802511e <mg_http_get_var+0x54>
 802513a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 802513e:	e7ee      	b.n	802511e <mg_http_get_var+0x54>

08025140 <mg_http_creds>:
                   char *pass, size_t passlen) {
 8025140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025144:	b0c4      	sub	sp, #272	@ 0x110
 8025146:	4606      	mov	r6, r0
 8025148:	460d      	mov	r5, r1
 802514a:	4617      	mov	r7, r2
 802514c:	461c      	mov	r4, r3
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 802514e:	493f      	ldr	r1, [pc, #252]	@ (802524c <mg_http_creds+0x10c>)
 8025150:	f7fd fd70 	bl	8022c34 <mg_http_get_header>
  user[0] = pass[0] = '\0';
 8025154:	2300      	movs	r3, #0
 8025156:	7023      	strb	r3, [r4, #0]
 8025158:	702b      	strb	r3, [r5, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 802515a:	b1c8      	cbz	r0, 8025190 <mg_http_creds+0x50>
 802515c:	4680      	mov	r8, r0
 802515e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8025162:	f1b9 0f06 	cmp.w	r9, #6
 8025166:	d907      	bls.n	8025178 <mg_http_creds+0x38>
 8025168:	f8d0 a000 	ldr.w	sl, [r0]
 802516c:	2206      	movs	r2, #6
 802516e:	4938      	ldr	r1, [pc, #224]	@ (8025250 <mg_http_creds+0x110>)
 8025170:	4650      	mov	r0, sl
 8025172:	f007 fb99 	bl	802c8a8 <memcmp>
 8025176:	b328      	cbz	r0, 80251c4 <mg_http_creds+0x84>
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 8025178:	f1b9 0f07 	cmp.w	r9, #7
 802517c:	d908      	bls.n	8025190 <mg_http_creds+0x50>
 802517e:	f8d8 5000 	ldr.w	r5, [r8]
 8025182:	2207      	movs	r2, #7
 8025184:	4933      	ldr	r1, [pc, #204]	@ (8025254 <mg_http_creds+0x114>)
 8025186:	4628      	mov	r0, r5
 8025188:	f007 fb8e 	bl	802c8a8 <memcmp>
 802518c:	2800      	cmp	r0, #0
 802518e:	d043      	beq.n	8025218 <mg_http_creds+0xd8>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 8025190:	4931      	ldr	r1, [pc, #196]	@ (8025258 <mg_http_creds+0x118>)
 8025192:	4630      	mov	r0, r6
 8025194:	f7fd fd4e 	bl	8022c34 <mg_http_get_header>
 8025198:	4605      	mov	r5, r0
 802519a:	2800      	cmp	r0, #0
 802519c:	d04e      	beq.n	802523c <mg_http_creds+0xfc>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 802519e:	220c      	movs	r2, #12
 80251a0:	492e      	ldr	r1, [pc, #184]	@ (802525c <mg_http_creds+0x11c>)
 80251a2:	a842      	add	r0, sp, #264	@ 0x108
 80251a4:	f7ff f8b0 	bl	8024308 <mg_str_n>
 80251a8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80251aa:	9300      	str	r3, [sp, #0]
 80251ac:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 80251ae:	e895 0006 	ldmia.w	r5, {r1, r2}
 80251b2:	a802      	add	r0, sp, #8
 80251b4:	f7ff f8c8 	bl	8024348 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 80251b8:	9b03      	ldr	r3, [sp, #12]
 80251ba:	2b00      	cmp	r3, #0
 80251bc:	d136      	bne.n	802522c <mg_http_creds+0xec>
}
 80251be:	b044      	add	sp, #272	@ 0x110
 80251c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 80251c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80251c8:	aa02      	add	r2, sp, #8
 80251ca:	f1a9 0106 	sub.w	r1, r9, #6
 80251ce:	f10a 0006 	add.w	r0, sl, #6
 80251d2:	f7fd fba3 	bl	802291c <mg_base64_decode>
 80251d6:	4606      	mov	r6, r0
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 80251d8:	4602      	mov	r2, r0
 80251da:	213a      	movs	r1, #58	@ 0x3a
 80251dc:	a802      	add	r0, sp, #8
 80251de:	f7eb f80f 	bl	8010200 <memchr>
    if (p != NULL) {
 80251e2:	4680      	mov	r8, r0
 80251e4:	2800      	cmp	r0, #0
 80251e6:	d0ea      	beq.n	80251be <mg_http_creds+0x7e>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 80251e8:	ab02      	add	r3, sp, #8
 80251ea:	eba0 0a03 	sub.w	sl, r0, r3
 80251ee:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8025260 <mg_http_creds+0x120>
 80251f2:	9300      	str	r3, [sp, #0]
 80251f4:	4653      	mov	r3, sl
 80251f6:	464a      	mov	r2, r9
 80251f8:	4639      	mov	r1, r7
 80251fa:	4628      	mov	r0, r5
 80251fc:	f7fe f9f0 	bl	80235e0 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 8025200:	eba6 030a 	sub.w	r3, r6, sl
 8025204:	f108 0201 	add.w	r2, r8, #1
 8025208:	9200      	str	r2, [sp, #0]
 802520a:	3b01      	subs	r3, #1
 802520c:	464a      	mov	r2, r9
 802520e:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8025210:	4620      	mov	r0, r4
 8025212:	f7fe f9e5 	bl	80235e0 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8025216:	e7d2      	b.n	80251be <mg_http_creds+0x7e>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 8025218:	3507      	adds	r5, #7
 802521a:	9500      	str	r5, [sp, #0]
 802521c:	f1a9 0307 	sub.w	r3, r9, #7
 8025220:	4a0f      	ldr	r2, [pc, #60]	@ (8025260 <mg_http_creds+0x120>)
 8025222:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8025224:	4620      	mov	r0, r4
 8025226:	f7fe f9db 	bl	80235e0 <mg_snprintf>
 802522a:	e7c8      	b.n	80251be <mg_http_creds+0x7e>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 802522c:	9a02      	ldr	r2, [sp, #8]
 802522e:	9200      	str	r2, [sp, #0]
 8025230:	4a0b      	ldr	r2, [pc, #44]	@ (8025260 <mg_http_creds+0x120>)
 8025232:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8025234:	4620      	mov	r0, r4
 8025236:	f7fe f9d3 	bl	80235e0 <mg_snprintf>
 802523a:	e7c0      	b.n	80251be <mg_http_creds+0x7e>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 802523c:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 802523e:	4622      	mov	r2, r4
 8025240:	4906      	ldr	r1, [pc, #24]	@ (802525c <mg_http_creds+0x11c>)
 8025242:	f106 0010 	add.w	r0, r6, #16
 8025246:	f7ff ff40 	bl	80250ca <mg_http_get_var>
}
 802524a:	e7b8      	b.n	80251be <mg_http_creds+0x7e>
 802524c:	0803a624 	.word	0x0803a624
 8025250:	0803a634 	.word	0x0803a634
 8025254:	0803a63c 	.word	0x0803a63c
 8025258:	0803a644 	.word	0x0803a644
 802525c:	080369fc 	.word	0x080369fc
 8025260:	0803a454 	.word	0x0803a454

08025264 <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 8025264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025268:	b0ae      	sub	sp, #184	@ 0xb8
 802526a:	4604      	mov	r4, r0
 802526c:	460d      	mov	r5, r1
 802526e:	4616      	mov	r6, r2
 8025270:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8025272:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8025276:	f1b8 0f00 	cmp.w	r8, #0
 802527a:	d04f      	beq.n	802531c <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 802527c:	942a      	str	r4, [sp, #168]	@ 0xa8
 802527e:	952b      	str	r5, [sp, #172]	@ 0xac
 8025280:	962c      	str	r6, [sp, #176]	@ 0xb0
 8025282:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8025284:	2300      	movs	r3, #0
 8025286:	9300      	str	r3, [sp, #0]
 8025288:	2380      	movs	r3, #128	@ 0x80
 802528a:	aa07      	add	r2, sp, #28
 802528c:	68e9      	ldr	r1, [r5, #12]
 802528e:	68a8      	ldr	r0, [r5, #8]
 8025290:	f7ff febc 	bl	802500c <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8025294:	1e02      	subs	r2, r0, #0
 8025296:	dd44      	ble.n	8025322 <listdir+0xbe>
 8025298:	a907      	add	r1, sp, #28
 802529a:	a805      	add	r0, sp, #20
 802529c:	f7ff f834 	bl	8024308 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 80252a0:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 80252a2:	2a00      	cmp	r2, #0
 80252a4:	d044      	beq.n	8025330 <listdir+0xcc>
 80252a6:	4923      	ldr	r1, [pc, #140]	@ (8025334 <listdir+0xd0>)
 80252a8:	4620      	mov	r0, r4
 80252aa:	f7fe fe71 	bl	8023f90 <mg_printf>
  off = c->send.len;  // Start of body
 80252ae:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 80252b0:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 80252b2:	9b05      	ldr	r3, [sp, #20]
 80252b4:	9303      	str	r3, [sp, #12]
 80252b6:	9202      	str	r2, [sp, #8]
 80252b8:	491f      	ldr	r1, [pc, #124]	@ (8025338 <listdir+0xd4>)
 80252ba:	9101      	str	r1, [sp, #4]
 80252bc:	491f      	ldr	r1, [pc, #124]	@ (802533c <listdir+0xd8>)
 80252be:	9100      	str	r1, [sp, #0]
 80252c0:	491f      	ldr	r1, [pc, #124]	@ (8025340 <listdir+0xdc>)
 80252c2:	4620      	mov	r0, r4
 80252c4:	f7fe fe64 	bl	8023f90 <mg_printf>
  mg_printf(c, "%s",
 80252c8:	4a1e      	ldr	r2, [pc, #120]	@ (8025344 <listdir+0xe0>)
 80252ca:	491f      	ldr	r1, [pc, #124]	@ (8025348 <listdir+0xe4>)
 80252cc:	4620      	mov	r0, r4
 80252ce:	f7fe fe5f 	bl	8023f90 <mg_printf>
  fs->ls(dir, printdirentry, &d);
 80252d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80252d6:	aa2a      	add	r2, sp, #168	@ 0xa8
 80252d8:	491c      	ldr	r1, [pc, #112]	@ (802534c <listdir+0xe8>)
 80252da:	4638      	mov	r0, r7
 80252dc:	4798      	blx	r3
  mg_printf(c,
 80252de:	4a1c      	ldr	r2, [pc, #112]	@ (8025350 <listdir+0xec>)
 80252e0:	491c      	ldr	r1, [pc, #112]	@ (8025354 <listdir+0xf0>)
 80252e2:	4620      	mov	r0, r4
 80252e4:	f7fe fe54 	bl	8023f90 <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 80252e8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80252ea:	1b5b      	subs	r3, r3, r5
 80252ec:	4a1a      	ldr	r2, [pc, #104]	@ (8025358 <listdir+0xf4>)
 80252ee:	210a      	movs	r1, #10
 80252f0:	a827      	add	r0, sp, #156	@ 0x9c
 80252f2:	f7fe f975 	bl	80235e0 <mg_snprintf>
 80252f6:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 80252f8:	280a      	cmp	r0, #10
 80252fa:	d900      	bls.n	80252fe <listdir+0x9a>
 80252fc:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 80252fe:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8025300:	3d0c      	subs	r5, #12
 8025302:	a927      	add	r1, sp, #156	@ 0x9c
 8025304:	4428      	add	r0, r5
 8025306:	f008 fd9f 	bl	802de48 <memcpy>
  c->is_resp = 0;                          // Mark response end
 802530a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802530e:	f36f 13c7 	bfc	r3, #7, #1
 8025312:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8025316:	b02e      	add	sp, #184	@ 0xb8
 8025318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 802531c:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8025360 <listdir+0xfc>
 8025320:	e7ac      	b.n	802527c <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8025322:	ab05      	add	r3, sp, #20
 8025324:	3508      	adds	r5, #8
 8025326:	e895 0003 	ldmia.w	r5, {r0, r1}
 802532a:	e883 0003 	stmia.w	r3, {r0, r1}
 802532e:	e7b7      	b.n	80252a0 <listdir+0x3c>
  mg_printf(c,
 8025330:	4a0a      	ldr	r2, [pc, #40]	@ (802535c <listdir+0xf8>)
 8025332:	e7b8      	b.n	80252a6 <listdir+0x42>
 8025334:	0803a64c 	.word	0x0803a64c
 8025338:	0803a82c 	.word	0x0803a82c
 802533c:	0803a9f0 	.word	0x0803a9f0
 8025340:	0803a6a4 	.word	0x0803a6a4
 8025344:	0803abb8 	.word	0x0803abb8
 8025348:	0803b01c 	.word	0x0803b01c
 802534c:	08026b0d 	.word	0x08026b0d
 8025350:	08038540 	.word	0x08038540
 8025354:	0803ac08 	.word	0x0803ac08
 8025358:	0803b2cc 	.word	0x0803b2cc
 802535c:	08036c70 	.word	0x08036c70
 8025360:	20000130 	.word	0x20000130

08025364 <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8025364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025368:	b087      	sub	sp, #28
 802536a:	461f      	mov	r7, r3
  int i = 0, n = 0;
 802536c:	2300      	movs	r3, #0
 802536e:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 8025370:	2902      	cmp	r1, #2
 8025372:	dd42      	ble.n	80253fa <skip_chunk+0x96>
 8025374:	4606      	mov	r6, r0
 8025376:	460d      	mov	r5, r1
 8025378:	4690      	mov	r8, r2
  int i = 0, n = 0;
 802537a:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 802537c:	42ac      	cmp	r4, r5
 802537e:	da05      	bge.n	802538c <skip_chunk+0x28>
 8025380:	5d30      	ldrb	r0, [r6, r4]
 8025382:	f7fb f92c 	bl	80205de <is_hex_digit>
 8025386:	b108      	cbz	r0, 802538c <skip_chunk+0x28>
 8025388:	3401      	adds	r4, #1
 802538a:	e7f7      	b.n	802537c <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 802538c:	2c00      	cmp	r4, #0
 802538e:	d036      	beq.n	80253fe <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8025390:	2c08      	cmp	r4, #8
 8025392:	dc37      	bgt.n	8025404 <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8025394:	42ac      	cmp	r4, r5
 8025396:	da38      	bge.n	802540a <skip_chunk+0xa6>
 8025398:	4622      	mov	r2, r4
 802539a:	5d33      	ldrb	r3, [r6, r4]
 802539c:	2b0d      	cmp	r3, #13
 802539e:	d137      	bne.n	8025410 <skip_chunk+0xac>
 80253a0:	1933      	adds	r3, r6, r4
 80253a2:	785b      	ldrb	r3, [r3, #1]
 80253a4:	2b0a      	cmp	r3, #10
 80253a6:	d136      	bne.n	8025416 <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 80253a8:	f10d 0910 	add.w	r9, sp, #16
 80253ac:	4631      	mov	r1, r6
 80253ae:	4648      	mov	r0, r9
 80253b0:	f7fe ffaa 	bl	8024308 <mg_str_n>
 80253b4:	2304      	movs	r3, #4
 80253b6:	9300      	str	r3, [sp, #0]
 80253b8:	ab03      	add	r3, sp, #12
 80253ba:	2210      	movs	r2, #16
 80253bc:	e899 0003 	ldmia.w	r9, {r0, r1}
 80253c0:	f7ff fcdc 	bl	8024d7c <mg_str_to_num>
 80253c4:	b350      	cbz	r0, 802541c <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80253c6:	9b03      	ldr	r3, [sp, #12]
 80253c8:	2b00      	cmp	r3, #0
 80253ca:	db2a      	blt.n	8025422 <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80253cc:	1b2d      	subs	r5, r5, r4
 80253ce:	3d03      	subs	r5, #3
 80253d0:	42ab      	cmp	r3, r5
 80253d2:	da29      	bge.n	8025428 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 80253d4:	4423      	add	r3, r4
 80253d6:	18f2      	adds	r2, r6, r3
 80253d8:	7892      	ldrb	r2, [r2, #2]
 80253da:	2a0d      	cmp	r2, #13
 80253dc:	d126      	bne.n	802542c <skip_chunk+0xc8>
 80253de:	441e      	add	r6, r3
 80253e0:	78f3      	ldrb	r3, [r6, #3]
 80253e2:	2b0a      	cmp	r3, #10
 80253e4:	d125      	bne.n	8025432 <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 80253e6:	3402      	adds	r4, #2
 80253e8:	f8c8 4000 	str.w	r4, [r8]
 80253ec:	9b03      	ldr	r3, [sp, #12]
 80253ee:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 80253f0:	441c      	add	r4, r3
 80253f2:	1ca0      	adds	r0, r4, #2
}
 80253f4:	b007      	add	sp, #28
 80253f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 80253fa:	2000      	movs	r0, #0
 80253fc:	e7fa      	b.n	80253f4 <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 80253fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025402:	e7f7      	b.n	80253f4 <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8025404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025408:	e7f4      	b.n	80253f4 <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 802540a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802540e:	e7f1      	b.n	80253f4 <skip_chunk+0x90>
 8025410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025414:	e7ee      	b.n	80253f4 <skip_chunk+0x90>
 8025416:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802541a:	e7eb      	b.n	80253f4 <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 802541c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025420:	e7e8      	b.n	80253f4 <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8025422:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025426:	e7e5      	b.n	80253f4 <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8025428:	2000      	movs	r0, #0
 802542a:	e7e3      	b.n	80253f4 <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 802542c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025430:	e7e0      	b.n	80253f4 <skip_chunk+0x90>
 8025432:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025436:	e7dd      	b.n	80253f4 <skip_chunk+0x90>

08025438 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8025438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802543c:	b086      	sub	sp, #24
 802543e:	ac02      	add	r4, sp, #8
 8025440:	e884 0003 	stmia.w	r4, {r0, r1}
 8025444:	4617      	mov	r7, r2
 8025446:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8025448:	2400      	movs	r4, #0
 802544a:	4621      	mov	r1, r4
 802544c:	e01c      	b.n	8025488 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 802544e:	f101 0805 	add.w	r8, r1, #5
 8025452:	45a8      	cmp	r8, r5
 8025454:	d221      	bcs.n	802549a <mg_json_unescape+0x62>
 8025456:	185a      	adds	r2, r3, r1
 8025458:	7852      	ldrb	r2, [r2, #1]
 802545a:	2a75      	cmp	r2, #117	@ 0x75
 802545c:	d11d      	bne.n	802549a <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 802545e:	3102      	adds	r1, #2
 8025460:	ad04      	add	r5, sp, #16
 8025462:	2204      	movs	r2, #4
 8025464:	4419      	add	r1, r3
 8025466:	4628      	mov	r0, r5
 8025468:	f7fe ff4e 	bl	8024308 <mg_str_n>
 802546c:	2301      	movs	r3, #1
 802546e:	9300      	str	r3, [sp, #0]
 8025470:	193b      	adds	r3, r7, r4
 8025472:	2210      	movs	r2, #16
 8025474:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025478:	f7ff fc80 	bl	8024d7c <mg_str_to_num>
 802547c:	b308      	cbz	r0, 80254c2 <mg_json_unescape+0x8a>
      i += 5;
 802547e:	4641      	mov	r1, r8
 8025480:	e000      	b.n	8025484 <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 8025482:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8025484:	3101      	adds	r1, #1
 8025486:	3401      	adds	r4, #1
 8025488:	9d03      	ldr	r5, [sp, #12]
 802548a:	428d      	cmp	r5, r1
 802548c:	d914      	bls.n	80254b8 <mg_json_unescape+0x80>
 802548e:	42b4      	cmp	r4, r6
 8025490:	d212      	bcs.n	80254b8 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8025492:	9b02      	ldr	r3, [sp, #8]
 8025494:	5c58      	ldrb	r0, [r3, r1]
 8025496:	285c      	cmp	r0, #92	@ 0x5c
 8025498:	d0d9      	beq.n	802544e <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 802549a:	285c      	cmp	r0, #92	@ 0x5c
 802549c:	d1f1      	bne.n	8025482 <mg_json_unescape+0x4a>
 802549e:	f101 0801 	add.w	r8, r1, #1
 80254a2:	45a8      	cmp	r8, r5
 80254a4:	d2ed      	bcs.n	8025482 <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 80254a6:	2100      	movs	r1, #0
 80254a8:	f813 0008 	ldrb.w	r0, [r3, r8]
 80254ac:	f7fb f8bc 	bl	8020628 <json_esc>
      if (c == 0) return false;
 80254b0:	b150      	cbz	r0, 80254c8 <mg_json_unescape+0x90>
      to[j] = c;
 80254b2:	5538      	strb	r0, [r7, r4]
      i++;
 80254b4:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 80254b6:	e7e5      	b.n	8025484 <mg_json_unescape+0x4c>
  if (j >= n) return false;
 80254b8:	42b4      	cmp	r4, r6
 80254ba:	d207      	bcs.n	80254cc <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 80254bc:	2300      	movs	r3, #0
 80254be:	553b      	strb	r3, [r7, r4]
  return true;
 80254c0:	2001      	movs	r0, #1
}
 80254c2:	b006      	add	sp, #24
 80254c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 80254c8:	2000      	movs	r0, #0
 80254ca:	e7fa      	b.n	80254c2 <mg_json_unescape+0x8a>
  if (j >= n) return false;
 80254cc:	2000      	movs	r0, #0
 80254ce:	e7f8      	b.n	80254c2 <mg_json_unescape+0x8a>

080254d0 <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 80254d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80254d2:	b087      	sub	sp, #28
 80254d4:	46ec      	mov	ip, sp
 80254d6:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 80254da:	2300      	movs	r3, #0
 80254dc:	9303      	str	r3, [sp, #12]
 80254de:	ab03      	add	r3, sp, #12
 80254e0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80254e4:	f7fd fbd6 	bl	8022c94 <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 80254e8:	1e04      	subs	r4, r0, #0
 80254ea:	db25      	blt.n	8025538 <mg_json_get_str+0x68>
 80254ec:	9903      	ldr	r1, [sp, #12]
 80254ee:	2901      	cmp	r1, #1
 80254f0:	dd24      	ble.n	802553c <mg_json_get_str+0x6c>
 80254f2:	9e00      	ldr	r6, [sp, #0]
 80254f4:	5d33      	ldrb	r3, [r6, r4]
 80254f6:	2b22      	cmp	r3, #34	@ 0x22
 80254f8:	d003      	beq.n	8025502 <mg_json_get_str+0x32>
  char *result = NULL;
 80254fa:	2500      	movs	r5, #0
}
 80254fc:	4628      	mov	r0, r5
 80254fe:	b007      	add	sp, #28
 8025500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8025502:	2001      	movs	r0, #1
 8025504:	f7fd f93c 	bl	8022780 <mg_calloc>
 8025508:	4605      	mov	r5, r0
 802550a:	2800      	cmp	r0, #0
 802550c:	d0f6      	beq.n	80254fc <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 802550e:	1c61      	adds	r1, r4, #1
 8025510:	9f03      	ldr	r7, [sp, #12]
 8025512:	ac04      	add	r4, sp, #16
 8025514:	1eba      	subs	r2, r7, #2
 8025516:	4431      	add	r1, r6
 8025518:	4620      	mov	r0, r4
 802551a:	f7fe fef5 	bl	8024308 <mg_str_n>
 802551e:	463b      	mov	r3, r7
 8025520:	462a      	mov	r2, r5
 8025522:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025526:	f7ff ff87 	bl	8025438 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 802552a:	2800      	cmp	r0, #0
 802552c:	d1e6      	bne.n	80254fc <mg_json_get_str+0x2c>
      free(result);
 802552e:	4628      	mov	r0, r5
 8025530:	f7f5 fa9c 	bl	801aa6c <vPortFree>
      result = NULL;
 8025534:	2500      	movs	r5, #0
 8025536:	e7e1      	b.n	80254fc <mg_json_get_str+0x2c>
  char *result = NULL;
 8025538:	2500      	movs	r5, #0
 802553a:	e7df      	b.n	80254fc <mg_json_get_str+0x2c>
 802553c:	2500      	movs	r5, #0
 802553e:	e7dd      	b.n	80254fc <mg_json_get_str+0x2c>

08025540 <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 8025540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025544:	b08a      	sub	sp, #40	@ 0x28
 8025546:	ab02      	add	r3, sp, #8
 8025548:	e883 0003 	stmia.w	r3, {r0, r1}
 802554c:	4617      	mov	r7, r2
  addr->scope_id = 0;
 802554e:	2300      	movs	r3, #0
 8025550:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8025552:	2902      	cmp	r1, #2
 8025554:	d904      	bls.n	8025560 <mg_aton6+0x20>
 8025556:	460b      	mov	r3, r1
 8025558:	4602      	mov	r2, r0
 802555a:	7801      	ldrb	r1, [r0, #0]
 802555c:	295b      	cmp	r1, #91	@ 0x5b
 802555e:	d00f      	beq.n	8025580 <mg_aton6+0x40>
  if (mg_v4mapped(str, addr)) return true;
 8025560:	463a      	mov	r2, r7
 8025562:	ab02      	add	r3, sp, #8
 8025564:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025568:	f7fe ff40 	bl	80243ec <mg_v4mapped>
 802556c:	4680      	mov	r8, r0
 802556e:	2800      	cmp	r0, #0
 8025570:	f040 8087 	bne.w	8025682 <mg_aton6+0x142>
  size_t i, j = 0, n = 0, dc = 42;
 8025574:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 8025578:	2600      	movs	r6, #0
 802557a:	4635      	mov	r5, r6
  for (i = 0; i < str.len; i++) {
 802557c:	4634      	mov	r4, r6
 802557e:	e020      	b.n	80255c2 <mg_aton6+0x82>
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8025580:	3201      	adds	r2, #1
 8025582:	9202      	str	r2, [sp, #8]
 8025584:	3b02      	subs	r3, #2
 8025586:	9303      	str	r3, [sp, #12]
 8025588:	e7ea      	b.n	8025560 <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 802558a:	2300      	movs	r3, #0
 802558c:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 802558e:	1ceb      	adds	r3, r5, #3
 8025590:	42a3      	cmp	r3, r4
 8025592:	d376      	bcc.n	8025682 <mg_aton6+0x142>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 8025594:	1b62      	subs	r2, r4, r5
 8025596:	f10d 0a18 	add.w	sl, sp, #24
 802559a:	3201      	adds	r2, #1
 802559c:	4429      	add	r1, r5
 802559e:	4650      	mov	r0, sl
 80255a0:	f7fe feb2 	bl	8024308 <mg_str_n>
 80255a4:	2304      	movs	r3, #4
 80255a6:	9300      	str	r3, [sp, #0]
 80255a8:	ab05      	add	r3, sp, #20
 80255aa:	2210      	movs	r2, #16
 80255ac:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80255b0:	f7ff fbe4 	bl	8024d7c <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 80255b4:	9b05      	ldr	r3, [sp, #20]
 80255b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80255ba:	55ba      	strb	r2, [r7, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 80255bc:	1c72      	adds	r2, r6, #1
 80255be:	54bb      	strb	r3, [r7, r2]
  for (i = 0; i < str.len; i++) {
 80255c0:	3401      	adds	r4, #1
 80255c2:	9803      	ldr	r0, [sp, #12]
 80255c4:	42a0      	cmp	r0, r4
 80255c6:	d941      	bls.n	802564c <mg_aton6+0x10c>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 80255c8:	9902      	ldr	r1, [sp, #8]
 80255ca:	5d0a      	ldrb	r2, [r1, r4]
 80255cc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80255d0:	b2db      	uxtb	r3, r3
 80255d2:	2b09      	cmp	r3, #9
 80255d4:	d9d9      	bls.n	802558a <mg_aton6+0x4a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 80255d6:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 80255da:	b2db      	uxtb	r3, r3
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 80255dc:	2b05      	cmp	r3, #5
 80255de:	d9d4      	bls.n	802558a <mg_aton6+0x4a>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 80255e0:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 80255e4:	b2db      	uxtb	r3, r3
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 80255e6:	2b05      	cmp	r3, #5
 80255e8:	d9cf      	bls.n	802558a <mg_aton6+0x4a>
    } else if (str.buf[i] == ':') {
 80255ea:	2a3a      	cmp	r2, #58	@ 0x3a
 80255ec:	d119      	bne.n	8025622 <mg_aton6+0xe2>
      j = i + 1;
 80255ee:	1c65      	adds	r5, r4, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 80255f0:	b12c      	cbz	r4, 80255fe <mg_aton6+0xbe>
 80255f2:	190b      	adds	r3, r1, r4
 80255f4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80255f8:	2b3a      	cmp	r3, #58	@ 0x3a
 80255fa:	d007      	beq.n	802560c <mg_aton6+0xcc>
        n += 2;
 80255fc:	3602      	adds	r6, #2
      if (n > 14) return false;
 80255fe:	2e0e      	cmp	r6, #14
 8025600:	d83f      	bhi.n	8025682 <mg_aton6+0x142>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8025602:	1c73      	adds	r3, r6, #1
 8025604:	2200      	movs	r2, #0
 8025606:	54fa      	strb	r2, [r7, r3]
 8025608:	55ba      	strb	r2, [r7, r6]
 802560a:	e7d9      	b.n	80255c0 <mg_aton6+0x80>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 802560c:	2c01      	cmp	r4, #1
 802560e:	d906      	bls.n	802561e <mg_aton6+0xde>
 8025610:	4421      	add	r1, r4
 8025612:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8025616:	2b3a      	cmp	r3, #58	@ 0x3a
 8025618:	d033      	beq.n	8025682 <mg_aton6+0x142>
        dc = n;  // Double colon
 802561a:	46b1      	mov	r9, r6
 802561c:	e7ef      	b.n	80255fe <mg_aton6+0xbe>
 802561e:	46b1      	mov	r9, r6
 8025620:	e7ed      	b.n	80255fe <mg_aton6+0xbe>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 8025622:	2a25      	cmp	r2, #37	@ 0x25
 8025624:	d12d      	bne.n	8025682 <mg_aton6+0x142>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8025626:	1c63      	adds	r3, r4, #1
 8025628:	1b02      	subs	r2, r0, r4
 802562a:	ac08      	add	r4, sp, #32
 802562c:	3a01      	subs	r2, #1
 802562e:	4419      	add	r1, r3
 8025630:	4620      	mov	r0, r4
 8025632:	f7fe fe69 	bl	8024308 <mg_str_n>
 8025636:	2301      	movs	r3, #1
 8025638:	9300      	str	r3, [sp, #0]
 802563a:	f107 0312 	add.w	r3, r7, #18
 802563e:	220a      	movs	r2, #10
 8025640:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025644:	f7ff fb9a 	bl	8024d7c <mg_str_to_num>
 8025648:	4680      	mov	r8, r0
 802564a:	e01a      	b.n	8025682 <mg_aton6+0x142>
  if (n < 14 && dc == 42) return false;
 802564c:	2e0d      	cmp	r6, #13
 802564e:	d814      	bhi.n	802567a <mg_aton6+0x13a>
 8025650:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 8025654:	d015      	beq.n	8025682 <mg_aton6+0x142>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 8025656:	eba9 0006 	sub.w	r0, r9, r6
 802565a:	300e      	adds	r0, #14
 802565c:	eb07 0409 	add.w	r4, r7, r9
 8025660:	eba6 0209 	sub.w	r2, r6, r9
 8025664:	3202      	adds	r2, #2
 8025666:	4621      	mov	r1, r4
 8025668:	4438      	add	r0, r7
 802566a:	f007 f997 	bl	802c99c <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 802566e:	f1c6 020e 	rsb	r2, r6, #14
 8025672:	2100      	movs	r1, #0
 8025674:	4620      	mov	r0, r4
 8025676:	f007 f9ab 	bl	802c9d0 <memset>
  addr->is_ip6 = true;
 802567a:	f04f 0801 	mov.w	r8, #1
 802567e:	f887 8013 	strb.w	r8, [r7, #19]
}
 8025682:	4640      	mov	r0, r8
 8025684:	b00a      	add	sp, #40	@ 0x28
 8025686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802568a <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 802568a:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 802568c:	2400      	movs	r4, #0
 802568e:	600c      	str	r4, [r1, #0]
 8025690:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8025694:	2200      	movs	r2, #0
 8025696:	2300      	movs	r3, #0
 8025698:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 802569c:	9b01      	ldr	r3, [sp, #4]
 802569e:	618b      	str	r3, [r1, #24]
 80256a0:	9b02      	ldr	r3, [sp, #8]
 80256a2:	61cb      	str	r3, [r1, #28]
 80256a4:	9b03      	ldr	r3, [sp, #12]
 80256a6:	620b      	str	r3, [r1, #32]
 80256a8:	6803      	ldr	r3, [r0, #0]
 80256aa:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 80256ac:	6001      	str	r1, [r0, #0]
}
 80256ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80256b2:	4770      	bx	lr

080256b4 <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 80256b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80256b6:	b085      	sub	sp, #20
 80256b8:	4604      	mov	r4, r0
 80256ba:	4616      	mov	r6, r2
 80256bc:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 80256be:	2128      	movs	r1, #40	@ 0x28
 80256c0:	2001      	movs	r0, #1
 80256c2:	f7fd f85d 	bl	8022780 <mg_calloc>
  if (t != NULL) {
 80256c6:	4607      	mov	r7, r0
 80256c8:	b180      	cbz	r0, 80256ec <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 80256ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80256cc:	9302      	str	r3, [sp, #8]
 80256ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80256d0:	9301      	str	r3, [sp, #4]
 80256d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80256d4:	9300      	str	r3, [sp, #0]
 80256d6:	4632      	mov	r2, r6
 80256d8:	462b      	mov	r3, r5
 80256da:	4601      	mov	r1, r0
 80256dc:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80256e0:	f7ff ffd3 	bl	802568a <mg_timer_init>
    t->id = mgr->timerid++;
 80256e4:	6a23      	ldr	r3, [r4, #32]
 80256e6:	1c5a      	adds	r2, r3, #1
 80256e8:	6222      	str	r2, [r4, #32]
 80256ea:	603b      	str	r3, [r7, #0]
}
 80256ec:	4638      	mov	r0, r7
 80256ee:	b005      	add	sp, #20
 80256f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80256f2:	0000      	movs	r0, r0
 80256f4:	0000      	movs	r0, r0
	...

080256f8 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 80256f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80256fc:	4698      	mov	r8, r3
 80256fe:	9906      	ldr	r1, [sp, #24]
 8025700:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8025702:	188e      	adds	r6, r1, r2
 8025704:	eb43 0504 	adc.w	r5, r3, r4
 8025708:	6847      	ldr	r7, [r0, #4]
 802570a:	6803      	ldr	r3, [r0, #0]
 802570c:	429e      	cmp	r6, r3
 802570e:	eb75 0707 	sbcs.w	r7, r5, r7
 8025712:	d203      	bcs.n	802571c <mg_timer_expired+0x24>
 8025714:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8025758 <mg_timer_expired+0x60>
 8025718:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 802571c:	6847      	ldr	r7, [r0, #4]
 802571e:	6803      	ldr	r3, [r0, #0]
 8025720:	431f      	orrs	r7, r3
 8025722:	d101      	bne.n	8025728 <mg_timer_expired+0x30>
 8025724:	6006      	str	r6, [r0, #0]
 8025726:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 8025728:	6807      	ldr	r7, [r0, #0]
 802572a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 802572e:	42b9      	cmp	r1, r7
 8025730:	eb74 0e0c 	sbcs.w	lr, r4, ip
 8025734:	d30e      	bcc.n	8025754 <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8025736:	1bc9      	subs	r1, r1, r7
 8025738:	eb64 040c 	sbc.w	r4, r4, ip
 802573c:	428a      	cmp	r2, r1
 802573e:	eb78 0404 	sbcs.w	r4, r8, r4
 8025742:	d302      	bcc.n	802574a <mg_timer_expired+0x52>
 8025744:	18be      	adds	r6, r7, r2
 8025746:	eb4c 0508 	adc.w	r5, ip, r8
 802574a:	6006      	str	r6, [r0, #0]
 802574c:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 802574e:	2001      	movs	r0, #1
}
 8025750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 8025754:	2000      	movs	r0, #0
 8025756:	e7fb      	b.n	8025750 <mg_timer_expired+0x58>
	...

08025760 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8025760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025764:	b082      	sub	sp, #8
 8025766:	4617      	mov	r7, r2
 8025768:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 802576a:	6804      	ldr	r4, [r0, #0]
 802576c:	e019      	b.n	80257a2 <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 802576e:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8025770:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8025774:	9700      	str	r7, [sp, #0]
 8025776:	9601      	str	r6, [sp, #4]
 8025778:	f104 0010 	add.w	r0, r4, #16
 802577c:	f7ff ffbc 	bl	80256f8 <mg_timer_expired>
    tmp = t->next;
 8025780:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 8025784:	b905      	cbnz	r5, 8025788 <mg_timer_poll+0x28>
 8025786:	b158      	cbz	r0, 80257a0 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8025788:	69a3      	ldr	r3, [r4, #24]
 802578a:	f003 0305 	and.w	r3, r3, #5
 802578e:	2b04      	cmp	r3, #4
 8025790:	d002      	beq.n	8025798 <mg_timer_poll+0x38>
      t->fn(t->arg);
 8025792:	69e3      	ldr	r3, [r4, #28]
 8025794:	6a20      	ldr	r0, [r4, #32]
 8025796:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 8025798:	69a1      	ldr	r1, [r4, #24]
 802579a:	f041 0104 	orr.w	r1, r1, #4
 802579e:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80257a0:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 80257a2:	b164      	cbz	r4, 80257be <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80257a4:	6923      	ldr	r3, [r4, #16]
 80257a6:	6962      	ldr	r2, [r4, #20]
 80257a8:	4313      	orrs	r3, r2
 80257aa:	d1e0      	bne.n	802576e <mg_timer_poll+0xe>
 80257ac:	69a3      	ldr	r3, [r4, #24]
 80257ae:	f003 0306 	and.w	r3, r3, #6
 80257b2:	2b02      	cmp	r3, #2
 80257b4:	d001      	beq.n	80257ba <mg_timer_poll+0x5a>
 80257b6:	2500      	movs	r5, #0
 80257b8:	e7da      	b.n	8025770 <mg_timer_poll+0x10>
 80257ba:	2501      	movs	r5, #1
 80257bc:	e7d8      	b.n	8025770 <mg_timer_poll+0x10>
}
 80257be:	b002      	add	sp, #8
 80257c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080257c4 <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80257c4:	b118      	cbz	r0, 80257ce <mg_tls_recv+0xa>
 80257c6:	b121      	cbz	r1, 80257d2 <mg_tls_recv+0xe>
 80257c8:	b92a      	cbnz	r2, 80257d6 <mg_tls_recv+0x12>
 80257ca:	2000      	movs	r0, #0
 80257cc:	4770      	bx	lr
 80257ce:	2000      	movs	r0, #0
 80257d0:	4770      	bx	lr
 80257d2:	2000      	movs	r0, #0
 80257d4:	4770      	bx	lr
 80257d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80257da:	4770      	bx	lr

080257dc <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80257dc:	b118      	cbz	r0, 80257e6 <mg_tls_send+0xa>
 80257de:	b121      	cbz	r1, 80257ea <mg_tls_send+0xe>
 80257e0:	b92a      	cbnz	r2, 80257ee <mg_tls_send+0x12>
 80257e2:	2000      	movs	r0, #0
 80257e4:	4770      	bx	lr
 80257e6:	2000      	movs	r0, #0
 80257e8:	4770      	bx	lr
 80257ea:	2000      	movs	r0, #0
 80257ec:	4770      	bx	lr
 80257ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80257f2:	4770      	bx	lr

080257f4 <mg_tls_pending>:
}
 80257f4:	2000      	movs	r0, #0
 80257f6:	4770      	bx	lr

080257f8 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 80257f8:	b510      	push	{r4, lr}
 80257fa:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80257fc:	2204      	movs	r2, #4
 80257fe:	4918      	ldr	r1, [pc, #96]	@ (8025860 <mg_url_is_ssl+0x68>)
 8025800:	f007 f91b 	bl	802ca3a <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025804:	b1f8      	cbz	r0, 8025846 <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025806:	2206      	movs	r2, #6
 8025808:	4916      	ldr	r1, [pc, #88]	@ (8025864 <mg_url_is_ssl+0x6c>)
 802580a:	4620      	mov	r0, r4
 802580c:	f007 f915 	bl	802ca3a <strncmp>
 8025810:	b1d8      	cbz	r0, 802584a <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025812:	2206      	movs	r2, #6
 8025814:	4914      	ldr	r1, [pc, #80]	@ (8025868 <mg_url_is_ssl+0x70>)
 8025816:	4620      	mov	r0, r4
 8025818:	f007 f90f 	bl	802ca3a <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 802581c:	b1b8      	cbz	r0, 802584e <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 802581e:	2204      	movs	r2, #4
 8025820:	4912      	ldr	r1, [pc, #72]	@ (802586c <mg_url_is_ssl+0x74>)
 8025822:	4620      	mov	r0, r4
 8025824:	f007 f909 	bl	802ca3a <strncmp>
 8025828:	b198      	cbz	r0, 8025852 <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802582a:	2204      	movs	r2, #4
 802582c:	4910      	ldr	r1, [pc, #64]	@ (8025870 <mg_url_is_ssl+0x78>)
 802582e:	4620      	mov	r0, r4
 8025830:	f007 f903 	bl	802ca3a <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025834:	b178      	cbz	r0, 8025856 <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025836:	2205      	movs	r2, #5
 8025838:	490e      	ldr	r1, [pc, #56]	@ (8025874 <mg_url_is_ssl+0x7c>)
 802583a:	4620      	mov	r0, r4
 802583c:	f007 f8fd 	bl	802ca3a <strncmp>
 8025840:	b958      	cbnz	r0, 802585a <mg_url_is_ssl+0x62>
 8025842:	2001      	movs	r0, #1
 8025844:	e000      	b.n	8025848 <mg_url_is_ssl+0x50>
 8025846:	2001      	movs	r0, #1
}
 8025848:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802584a:	2001      	movs	r0, #1
 802584c:	e7fc      	b.n	8025848 <mg_url_is_ssl+0x50>
 802584e:	2001      	movs	r0, #1
 8025850:	e7fa      	b.n	8025848 <mg_url_is_ssl+0x50>
 8025852:	2001      	movs	r0, #1
 8025854:	e7f8      	b.n	8025848 <mg_url_is_ssl+0x50>
 8025856:	2001      	movs	r0, #1
 8025858:	e7f6      	b.n	8025848 <mg_url_is_ssl+0x50>
 802585a:	2000      	movs	r0, #0
 802585c:	e7f4      	b.n	8025848 <mg_url_is_ssl+0x50>
 802585e:	bf00      	nop
 8025860:	0803ac7c 	.word	0x0803ac7c
 8025864:	0803ac84 	.word	0x0803ac84
 8025868:	0803ac8c 	.word	0x0803ac8c
 802586c:	0803ac94 	.word	0x0803ac94
 8025870:	0803ac9c 	.word	0x0803ac9c
 8025874:	0803aca4 	.word	0x0803aca4

08025878 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 8025878:	b530      	push	{r4, r5, lr}
 802587a:	b089      	sub	sp, #36	@ 0x24
 802587c:	4604      	mov	r4, r0
 802587e:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 8025880:	a801      	add	r0, sp, #4
 8025882:	f7fb feeb 	bl	802165c <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8025886:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 8025888:	b152      	cbz	r2, 80258a0 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 802588a:	9b04      	ldr	r3, [sp, #16]
 802588c:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 802588e:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 8025890:	9904      	ldr	r1, [sp, #16]
 8025892:	4429      	add	r1, r5
 8025894:	4620      	mov	r0, r4
 8025896:	f7fe fd37 	bl	8024308 <mg_str_n>
}
 802589a:	4620      	mov	r0, r4
 802589c:	b009      	add	sp, #36	@ 0x24
 802589e:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 80258a0:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 80258a2:	b112      	cbz	r2, 80258aa <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 80258a4:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 80258a6:	1ad2      	subs	r2, r2, r3
 80258a8:	e7f2      	b.n	8025890 <mg_url_host+0x18>
 80258aa:	9a07      	ldr	r2, [sp, #28]
 80258ac:	9b04      	ldr	r3, [sp, #16]
 80258ae:	1ad2      	subs	r2, r2, r3
 80258b0:	e7ee      	b.n	8025890 <mg_url_host+0x18>
	...

080258b4 <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 80258b4:	b530      	push	{r4, r5, lr}
 80258b6:	b089      	sub	sp, #36	@ 0x24
 80258b8:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 80258ba:	4601      	mov	r1, r0
 80258bc:	a801      	add	r0, sp, #4
 80258be:	f7fb fecd 	bl	802165c <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 80258c2:	2205      	movs	r2, #5
 80258c4:	491d      	ldr	r1, [pc, #116]	@ (802593c <mg_url_port+0x88>)
 80258c6:	4620      	mov	r0, r4
 80258c8:	f007 f8b7 	bl	802ca3a <strncmp>
 80258cc:	b138      	cbz	r0, 80258de <mg_url_port+0x2a>
 80258ce:	2203      	movs	r2, #3
 80258d0:	491b      	ldr	r1, [pc, #108]	@ (8025940 <mg_url_port+0x8c>)
 80258d2:	4620      	mov	r0, r4
 80258d4:	f007 f8b1 	bl	802ca3a <strncmp>
 80258d8:	b188      	cbz	r0, 80258fe <mg_url_port+0x4a>
  unsigned short port = 0;
 80258da:	2500      	movs	r5, #0
 80258dc:	e000      	b.n	80258e0 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 80258de:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 80258e0:	2204      	movs	r2, #4
 80258e2:	4918      	ldr	r1, [pc, #96]	@ (8025944 <mg_url_port+0x90>)
 80258e4:	4620      	mov	r0, r4
 80258e6:	f007 f8a8 	bl	802ca3a <strncmp>
 80258ea:	b150      	cbz	r0, 8025902 <mg_url_port+0x4e>
 80258ec:	2206      	movs	r2, #6
 80258ee:	4916      	ldr	r1, [pc, #88]	@ (8025948 <mg_url_port+0x94>)
 80258f0:	4620      	mov	r0, r4
 80258f2:	f007 f8a2 	bl	802ca3a <strncmp>
 80258f6:	b930      	cbnz	r0, 8025906 <mg_url_port+0x52>
    port = 443;
 80258f8:	f240 15bb 	movw	r5, #443	@ 0x1bb
 80258fc:	e003      	b.n	8025906 <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 80258fe:	2550      	movs	r5, #80	@ 0x50
 8025900:	e7ee      	b.n	80258e0 <mg_url_port+0x2c>
    port = 443;
 8025902:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8025906:	2205      	movs	r2, #5
 8025908:	4910      	ldr	r1, [pc, #64]	@ (802594c <mg_url_port+0x98>)
 802590a:	4620      	mov	r0, r4
 802590c:	f007 f895 	bl	802ca3a <strncmp>
 8025910:	b908      	cbnz	r0, 8025916 <mg_url_port+0x62>
 8025912:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8025916:	2206      	movs	r2, #6
 8025918:	490d      	ldr	r1, [pc, #52]	@ (8025950 <mg_url_port+0x9c>)
 802591a:	4620      	mov	r0, r4
 802591c:	f007 f88d 	bl	802ca3a <strncmp>
 8025920:	b908      	cbnz	r0, 8025926 <mg_url_port+0x72>
 8025922:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8025926:	9805      	ldr	r0, [sp, #20]
 8025928:	b910      	cbnz	r0, 8025930 <mg_url_port+0x7c>
}
 802592a:	4628      	mov	r0, r5
 802592c:	b009      	add	sp, #36	@ 0x24
 802592e:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8025930:	4420      	add	r0, r4
 8025932:	f004 fb19 	bl	8029f68 <atoi>
 8025936:	b285      	uxth	r5, r0
 8025938:	e7f7      	b.n	802592a <mg_url_port+0x76>
 802593a:	bf00      	nop
 802593c:	0803acac 	.word	0x0803acac
 8025940:	0803acb4 	.word	0x0803acb4
 8025944:	0803ac7c 	.word	0x0803ac7c
 8025948:	0803ac84 	.word	0x0803ac84
 802594c:	0803acb8 	.word	0x0803acb8
 8025950:	0803ac8c 	.word	0x0803ac8c

08025954 <mg_bzero>:
  if (buf != NULL) {
 8025954:	4603      	mov	r3, r0
 8025956:	b920      	cbnz	r0, 8025962 <mg_bzero+0xe>
 8025958:	4770      	bx	lr
    while (len--) *buf++ = 0;
 802595a:	2100      	movs	r1, #0
 802595c:	f803 1b01 	strb.w	r1, [r3], #1
 8025960:	4611      	mov	r1, r2
 8025962:	1e4a      	subs	r2, r1, #1
 8025964:	2900      	cmp	r1, #0
 8025966:	d1f8      	bne.n	802595a <mg_bzero+0x6>
}
 8025968:	4770      	bx	lr

0802596a <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 802596a:	b538      	push	{r3, r4, r5, lr}
 802596c:	4605      	mov	r5, r0
 802596e:	4608      	mov	r0, r1
 8025970:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 8025972:	68aa      	ldr	r2, [r5, #8]
 8025974:	428a      	cmp	r2, r1
 8025976:	d200      	bcs.n	802597a <mg_iobuf_del+0x10>
 8025978:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 802597a:	1903      	adds	r3, r0, r4
 802597c:	429a      	cmp	r2, r3
 802597e:	d200      	bcs.n	8025982 <mg_iobuf_del+0x18>
 8025980:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8025982:	682b      	ldr	r3, [r5, #0]
 8025984:	b133      	cbz	r3, 8025994 <mg_iobuf_del+0x2a>
 8025986:	1901      	adds	r1, r0, r4
 8025988:	1a12      	subs	r2, r2, r0
 802598a:	1b12      	subs	r2, r2, r4
 802598c:	4419      	add	r1, r3
 802598e:	4418      	add	r0, r3
 8025990:	f007 f804 	bl	802c99c <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8025994:	682b      	ldr	r3, [r5, #0]
 8025996:	b12b      	cbz	r3, 80259a4 <mg_iobuf_del+0x3a>
 8025998:	68a8      	ldr	r0, [r5, #8]
 802599a:	1b00      	subs	r0, r0, r4
 802599c:	4621      	mov	r1, r4
 802599e:	4418      	add	r0, r3
 80259a0:	f7ff ffd8 	bl	8025954 <mg_bzero>
  io->len -= len;
 80259a4:	68ab      	ldr	r3, [r5, #8]
 80259a6:	1b1b      	subs	r3, r3, r4
 80259a8:	60ab      	str	r3, [r5, #8]
}
 80259aa:	4620      	mov	r0, r4
 80259ac:	bd38      	pop	{r3, r4, r5, pc}

080259ae <mg_random>:
void mg_random(void *buf, size_t len) {
 80259ae:	b538      	push	{r3, r4, r5, lr}
 80259b0:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 80259b2:	e006      	b.n	80259c2 <mg_random+0x14>
 80259b4:	f006 fac6 	bl	802bf44 <rand>
 80259b8:	4623      	mov	r3, r4
 80259ba:	f803 0b01 	strb.w	r0, [r3], #1
 80259be:	461c      	mov	r4, r3
 80259c0:	4629      	mov	r1, r5
 80259c2:	1e4d      	subs	r5, r1, #1
 80259c4:	2900      	cmp	r1, #0
 80259c6:	d1f5      	bne.n	80259b4 <mg_random+0x6>
}
 80259c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080259cc <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 80259cc:	b570      	push	{r4, r5, r6, lr}
 80259ce:	4604      	mov	r4, r0
 80259d0:	460d      	mov	r5, r1
  mg_random(buf, len);
 80259d2:	f7ff ffec 	bl	80259ae <mg_random>
  for (i = 0; i < len; i++) {
 80259d6:	2100      	movs	r1, #0
 80259d8:	e00a      	b.n	80259f0 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 80259da:	2b33      	cmp	r3, #51	@ 0x33
 80259dc:	d802      	bhi.n	80259e4 <mg_random_str+0x18>
 80259de:	3327      	adds	r3, #39	@ 0x27
 80259e0:	b2db      	uxtb	r3, r3
 80259e2:	e003      	b.n	80259ec <mg_random_str+0x20>
 80259e4:	3b04      	subs	r3, #4
 80259e6:	b2db      	uxtb	r3, r3
 80259e8:	e000      	b.n	80259ec <mg_random_str+0x20>
 80259ea:	2300      	movs	r3, #0
 80259ec:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 80259ee:	3101      	adds	r1, #1
 80259f0:	42a9      	cmp	r1, r5
 80259f2:	d213      	bcs.n	8025a1c <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 80259f4:	1860      	adds	r0, r4, r1
 80259f6:	5c63      	ldrb	r3, [r4, r1]
 80259f8:	085a      	lsrs	r2, r3, #1
 80259fa:	4e09      	ldr	r6, [pc, #36]	@ (8025a20 <mg_random_str+0x54>)
 80259fc:	fba6 6202 	umull	r6, r2, r6, r2
 8025a00:	0912      	lsrs	r2, r2, #4
 8025a02:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8025a06:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8025a0a:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8025a0c:	1e6a      	subs	r2, r5, #1
 8025a0e:	428a      	cmp	r2, r1
 8025a10:	d0eb      	beq.n	80259ea <mg_random_str+0x1e>
 8025a12:	2b19      	cmp	r3, #25
 8025a14:	d8e1      	bhi.n	80259da <mg_random_str+0xe>
 8025a16:	3361      	adds	r3, #97	@ 0x61
 8025a18:	b2db      	uxtb	r3, r3
 8025a1a:	e7e7      	b.n	80259ec <mg_random_str+0x20>
}
 8025a1c:	4620      	mov	r0, r4
 8025a1e:	bd70      	pop	{r4, r5, r6, pc}
 8025a20:	84210843 	.word	0x84210843

08025a24 <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 8025a24:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 8025a26:	2300      	movs	r3, #0
 8025a28:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8025a2a:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8025a2c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8025a30:	021b      	lsls	r3, r3, #8
 8025a32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8025a36:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8025a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 8025a3e:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8025a42:	b002      	add	sp, #8
 8025a44:	4770      	bx	lr
	...

08025a48 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8025a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a4a:	b085      	sub	sp, #20
 8025a4c:	466c      	mov	r4, sp
 8025a4e:	e884 0003 	stmia.w	r4, {r0, r1}
 8025a52:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 8025a54:	480b      	ldr	r0, [pc, #44]	@ (8025a84 <mg_atonl+0x3c>)
 8025a56:	f7ff ffe5 	bl	8025a24 <mg_ntohl>
 8025a5a:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8025a5c:	ae02      	add	r6, sp, #8
 8025a5e:	490a      	ldr	r1, [pc, #40]	@ (8025a88 <mg_atonl+0x40>)
 8025a60:	4630      	mov	r0, r6
 8025a62:	f7fe fc45 	bl	80242f0 <mg_str_s>
 8025a66:	e896 000c 	ldmia.w	r6, {r2, r3}
 8025a6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025a6e:	f7fe fd3a 	bl	80244e6 <mg_strcasecmp>
 8025a72:	b928      	cbnz	r0, 8025a80 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 8025a74:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 8025a76:	2300      	movs	r3, #0
 8025a78:	74eb      	strb	r3, [r5, #19]
  return true;
 8025a7a:	2001      	movs	r0, #1
}
 8025a7c:	b005      	add	sp, #20
 8025a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8025a80:	2000      	movs	r0, #0
 8025a82:	e7fb      	b.n	8025a7c <mg_atonl+0x34>
 8025a84:	7f000001 	.word	0x7f000001
 8025a88:	0803acc0 	.word	0x0803acc0

08025a8c <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 8025a8c:	b510      	push	{r4, lr}
 8025a8e:	b082      	sub	sp, #8
 8025a90:	466b      	mov	r3, sp
 8025a92:	e883 0003 	stmia.w	r3, {r0, r1}
 8025a96:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025a98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025a9c:	f7fb fdcf 	bl	802163e <mg_atone>
 8025aa0:	b110      	cbz	r0, 8025aa8 <mg_aton+0x1c>
 8025aa2:	2001      	movs	r0, #1
}
 8025aa4:	b002      	add	sp, #8
 8025aa6:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025aa8:	4622      	mov	r2, r4
 8025aaa:	ab02      	add	r3, sp, #8
 8025aac:	e913 0003 	ldmdb	r3, {r0, r1}
 8025ab0:	f7ff ffca 	bl	8025a48 <mg_atonl>
 8025ab4:	b108      	cbz	r0, 8025aba <mg_aton+0x2e>
 8025ab6:	2001      	movs	r0, #1
 8025ab8:	e7f4      	b.n	8025aa4 <mg_aton+0x18>
 8025aba:	4622      	mov	r2, r4
 8025abc:	ab02      	add	r3, sp, #8
 8025abe:	e913 0003 	ldmdb	r3, {r0, r1}
 8025ac2:	f7fb fb37 	bl	8021134 <mg_aton4>
 8025ac6:	b108      	cbz	r0, 8025acc <mg_aton+0x40>
 8025ac8:	2001      	movs	r0, #1
 8025aca:	e7eb      	b.n	8025aa4 <mg_aton+0x18>
         mg_aton6(str, addr);
 8025acc:	4622      	mov	r2, r4
 8025ace:	ab02      	add	r3, sp, #8
 8025ad0:	e913 0003 	ldmdb	r3, {r0, r1}
 8025ad4:	f7ff fd34 	bl	8025540 <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025ad8:	2800      	cmp	r0, #0
 8025ada:	d0e3      	beq.n	8025aa4 <mg_aton+0x18>
 8025adc:	2001      	movs	r0, #1
 8025ade:	e7e1      	b.n	8025aa4 <mg_aton+0x18>

08025ae0 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 8025ae0:	b570      	push	{r4, r5, r6, lr}
 8025ae2:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8025ae4:	6800      	ldr	r0, [r0, #0]
 8025ae6:	f7ff ff9d 	bl	8025a24 <mg_ntohl>
 8025aea:	4606      	mov	r6, r0
 8025aec:	6860      	ldr	r0, [r4, #4]
 8025aee:	f7ff ff99 	bl	8025a24 <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 8025af2:	b12e      	cbz	r6, 8025b00 <gettimestamp+0x20>
 8025af4:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 8025af8:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 8025afc:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8025b00:	0ef5      	lsrs	r5, r6, #27
 8025b02:	0174      	lsls	r4, r6, #5
 8025b04:	1ba4      	subs	r4, r4, r6
 8025b06:	f165 0500 	sbc.w	r5, r5, #0
 8025b0a:	00ad      	lsls	r5, r5, #2
 8025b0c:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 8025b10:	00a4      	lsls	r4, r4, #2
 8025b12:	19a4      	adds	r4, r4, r6
 8025b14:	f145 0500 	adc.w	r5, r5, #0
 8025b18:	00ed      	lsls	r5, r5, #3
 8025b1a:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 8025b1e:	00e4      	lsls	r4, r4, #3
 8025b20:	f7ea fd08 	bl	8010534 <__aeabi_ui2d>
 8025b24:	a309      	add	r3, pc, #36	@ (adr r3, 8025b4c <gettimestamp+0x6c>)
 8025b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b2a:	f7ea fea7 	bl	801087c <__aeabi_ddiv>
 8025b2e:	2200      	movs	r2, #0
 8025b30:	4b05      	ldr	r3, [pc, #20]	@ (8025b48 <gettimestamp+0x68>)
 8025b32:	f7ea fd79 	bl	8010628 <__aeabi_dmul>
 8025b36:	f7eb f93b 	bl	8010db0 <__aeabi_d2lz>
 8025b3a:	1820      	adds	r0, r4, r0
}
 8025b3c:	eb45 0101 	adc.w	r1, r5, r1
 8025b40:	bd70      	pop	{r4, r5, r6, pc}
 8025b42:	bf00      	nop
 8025b44:	f3af 8000 	nop.w
 8025b48:	408f4000 	.word	0x408f4000
 8025b4c:	ffe00000 	.word	0xffe00000
 8025b50:	41efffff 	.word	0x41efffff

08025b54 <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 8025b54:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 8025b56:	2300      	movs	r3, #0
 8025b58:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8025b5c:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8025b60:	b2c3      	uxtb	r3, r0
 8025b62:	021b      	lsls	r3, r3, #8
}
 8025b64:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 8025b68:	b002      	add	sp, #8
 8025b6a:	4770      	bx	lr

08025b6c <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 8025b6c:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8025b6e:	e001      	b.n	8025b74 <csumfin+0x8>
 8025b70:	fa13 f080 	uxtah	r0, r3, r0
 8025b74:	0c03      	lsrs	r3, r0, #16
 8025b76:	d1fb      	bne.n	8025b70 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 8025b78:	43c0      	mvns	r0, r0
 8025b7a:	b280      	uxth	r0, r0
 8025b7c:	f7ff ffea 	bl	8025b54 <mg_ntohs>
}
 8025b80:	bd08      	pop	{r3, pc}

08025b82 <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 8025b82:	b508      	push	{r3, lr}
 8025b84:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 8025b86:	4601      	mov	r1, r0
 8025b88:	2000      	movs	r0, #0
 8025b8a:	f7fb fb2b 	bl	80211e4 <csumup>
  return csumfin(sum);
 8025b8e:	f7ff ffed 	bl	8025b6c <csumfin>
}
 8025b92:	bd08      	pop	{r3, pc}

08025b94 <tx_ip>:
                        size_t plen) {
 8025b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b96:	4617      	mov	r7, r2
 8025b98:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8025b9a:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8025b9c:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8025b9e:	680b      	ldr	r3, [r1, #0]
 8025ba0:	f845 3b0e 	str.w	r3, [r5], #14
 8025ba4:	888b      	ldrh	r3, [r1, #4]
 8025ba6:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8025ba8:	6803      	ldr	r3, [r0, #0]
 8025baa:	f8c4 3006 	str.w	r3, [r4, #6]
 8025bae:	8883      	ldrh	r3, [r0, #4]
 8025bb0:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 8025bb2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8025bb6:	f7ff ffcd 	bl	8025b54 <mg_ntohs>
 8025bba:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 8025bbc:	2100      	movs	r1, #0
 8025bbe:	f8c4 100e 	str.w	r1, [r4, #14]
 8025bc2:	6069      	str	r1, [r5, #4]
 8025bc4:	60a9      	str	r1, [r5, #8]
 8025bc6:	60e9      	str	r1, [r5, #12]
 8025bc8:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 8025bca:	2345      	movs	r3, #69	@ 0x45
 8025bcc:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 8025bce:	2340      	movs	r3, #64	@ 0x40
 8025bd0:	7523      	strb	r3, [r4, #20]
 8025bd2:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8025bd4:	9807      	ldr	r0, [sp, #28]
 8025bd6:	3014      	adds	r0, #20
 8025bd8:	b280      	uxth	r0, r0
 8025bda:	f7ff ffbb 	bl	8025b54 <mg_ntohs>
 8025bde:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 8025be0:	2340      	movs	r3, #64	@ 0x40
 8025be2:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 8025be4:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 8025be6:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 8025bea:	9b06      	ldr	r3, [sp, #24]
 8025bec:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8025bf0:	2114      	movs	r1, #20
 8025bf2:	4628      	mov	r0, r5
 8025bf4:	f7ff ffc5 	bl	8025b82 <ipcsum>
 8025bf8:	8320      	strh	r0, [r4, #24]
}
 8025bfa:	4628      	mov	r0, r5
 8025bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025bfe <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8025bfe:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8025c00:	781b      	ldrb	r3, [r3, #0]
 8025c02:	2b08      	cmp	r3, #8
 8025c04:	d000      	beq.n	8025c08 <rx_icmp+0xa>
 8025c06:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025c0c:	b083      	sub	sp, #12
 8025c0e:	4605      	mov	r5, r0
 8025c10:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8025c12:	69ca      	ldr	r2, [r1, #28]
 8025c14:	b11a      	cbz	r2, 8025c1e <rx_icmp+0x20>
 8025c16:	6911      	ldr	r1, [r2, #16]
 8025c18:	6883      	ldr	r3, [r0, #8]
 8025c1a:	4299      	cmp	r1, r3
 8025c1c:	d002      	beq.n	8025c24 <rx_icmp+0x26>
}
 8025c1e:	b003      	add	sp, #12
 8025c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8025c24:	6986      	ldr	r6, [r0, #24]
 8025c26:	3e26      	subs	r6, #38	@ 0x26
 8025c28:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 8025c2a:	428e      	cmp	r6, r1
 8025c2c:	d300      	bcc.n	8025c30 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8025c2e:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8025c30:	6921      	ldr	r1, [r4, #16]
 8025c32:	f106 0804 	add.w	r8, r6, #4
 8025c36:	f8cd 8004 	str.w	r8, [sp, #4]
 8025c3a:	68d2      	ldr	r2, [r2, #12]
 8025c3c:	9200      	str	r2, [sp, #0]
 8025c3e:	2201      	movs	r2, #1
 8025c40:	3106      	adds	r1, #6
 8025c42:	4628      	mov	r0, r5
 8025c44:	f7ff ffa6 	bl	8025b94 <tx_ip>
 8025c48:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8025c4a:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8025c4e:	2300      	movs	r3, #0
 8025c50:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 8025c52:	4632      	mov	r2, r6
 8025c54:	68a1      	ldr	r1, [r4, #8]
 8025c56:	3018      	adds	r0, #24
 8025c58:	f008 f8f6 	bl	802de48 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8025c5c:	4641      	mov	r1, r8
 8025c5e:	4648      	mov	r0, r9
 8025c60:	f7ff ff8f 	bl	8025b82 <ipcsum>
 8025c64:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 8025c66:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 8025c6a:	4628      	mov	r0, r5
 8025c6c:	f7fb facb 	bl	8021206 <ether_output>
}
 8025c70:	e7d5      	b.n	8025c1e <rx_icmp+0x20>

08025c72 <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025c72:	b538      	push	{r3, r4, r5, lr}
 8025c74:	4605      	mov	r5, r0
 8025c76:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8025c78:	6a09      	ldr	r1, [r1, #32]
 8025c7a:	798b      	ldrb	r3, [r1, #6]
 8025c7c:	2b01      	cmp	r3, #1
 8025c7e:	d00e      	beq.n	8025c9e <rx_ip6+0x2c>
 8025c80:	2b3a      	cmp	r3, #58	@ 0x3a
 8025c82:	d00c      	beq.n	8025c9e <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 8025c84:	2b11      	cmp	r3, #17
 8025c86:	d110      	bne.n	8025caa <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8025c88:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8025c8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8025c8e:	68e3      	ldr	r3, [r4, #12]
 8025c90:	2b07      	cmp	r3, #7
 8025c92:	d90a      	bls.n	8025caa <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 8025c94:	3130      	adds	r1, #48	@ 0x30
 8025c96:	4620      	mov	r0, r4
 8025c98:	f7fe fbe9 	bl	802446e <mkpay>
 8025c9c:	e005      	b.n	8025caa <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8025c9e:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8025ca2:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8025ca4:	68e3      	ldr	r3, [r4, #12]
 8025ca6:	2b03      	cmp	r3, #3
 8025ca8:	d800      	bhi.n	8025cac <rx_ip6+0x3a>
}
 8025caa:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 8025cac:	312c      	adds	r1, #44	@ 0x2c
 8025cae:	4620      	mov	r0, r4
 8025cb0:	f7fe fbdd 	bl	802446e <mkpay>
    rx_icmp(ifp, pkt);
 8025cb4:	4621      	mov	r1, r4
 8025cb6:	4628      	mov	r0, r5
 8025cb8:	f7ff ffa1 	bl	8025bfe <rx_icmp>
 8025cbc:	e7f5      	b.n	8025caa <rx_ip6+0x38>

08025cbe <tx_udp>:
                   const void *buf, size_t len) {
 8025cbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025cc2:	b083      	sub	sp, #12
 8025cc4:	4606      	mov	r6, r0
 8025cc6:	4698      	mov	r8, r3
 8025cc8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8025cca:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8025ccc:	f105 0308 	add.w	r3, r5, #8
 8025cd0:	9301      	str	r3, [sp, #4]
 8025cd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025cd4:	9300      	str	r3, [sp, #0]
 8025cd6:	4613      	mov	r3, r2
 8025cd8:	2211      	movs	r2, #17
 8025cda:	f7ff ff5b 	bl	8025b94 <tx_ip>
 8025cde:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 8025ce0:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 8025ce4:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 8025ce8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8025cec:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8025cee:	f105 0008 	add.w	r0, r5, #8
 8025cf2:	b280      	uxth	r0, r0
 8025cf4:	f7ff ff2e 	bl	8025b54 <mg_ntohs>
 8025cf8:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 8025cfa:	2000      	movs	r0, #0
 8025cfc:	76a0      	strb	r0, [r4, #26]
 8025cfe:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8025d00:	2208      	movs	r2, #8
 8025d02:	4649      	mov	r1, r9
 8025d04:	f7fb fa6e 	bl	80211e4 <csumup>
  cs = csumup(cs, buf, len);
 8025d08:	462a      	mov	r2, r5
 8025d0a:	4639      	mov	r1, r7
 8025d0c:	f7fb fa6a 	bl	80211e4 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8025d10:	2204      	movs	r2, #4
 8025d12:	f104 010c 	add.w	r1, r4, #12
 8025d16:	f7fb fa65 	bl	80211e4 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8025d1a:	2204      	movs	r2, #4
 8025d1c:	f104 0110 	add.w	r1, r4, #16
 8025d20:	f7fb fa60 	bl	80211e4 <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8025d24:	7a63      	ldrb	r3, [r4, #9]
 8025d26:	442b      	add	r3, r5
 8025d28:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 8025d2a:	3008      	adds	r0, #8
 8025d2c:	f7ff ff1e 	bl	8025b6c <csumfin>
 8025d30:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 8025d32:	462a      	mov	r2, r5
 8025d34:	4639      	mov	r1, r7
 8025d36:	f104 001c 	add.w	r0, r4, #28
 8025d3a:	f006 fe2f 	bl	802c99c <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8025d3e:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 8025d42:	4630      	mov	r0, r6
 8025d44:	f7fb fa5f 	bl	8021206 <ether_output>
}
 8025d48:	b003      	add	sp, #12
 8025d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08025d4e <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8025d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d50:	4605      	mov	r5, r0
 8025d52:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8025d54:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8025d56:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 8025d58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025d5c:	f846 3b0e 	str.w	r3, [r6], #14
 8025d60:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8025d62:	6803      	ldr	r3, [r0, #0]
 8025d64:	f8c4 3006 	str.w	r3, [r4, #6]
 8025d68:	8883      	ldrh	r3, [r0, #4]
 8025d6a:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 8025d6c:	f640 0006 	movw	r0, #2054	@ 0x806
 8025d70:	f7ff fef0 	bl	8025b54 <mg_ntohs>
 8025d74:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 8025d76:	2300      	movs	r3, #0
 8025d78:	f8c4 300e 	str.w	r3, [r4, #14]
 8025d7c:	6073      	str	r3, [r6, #4]
 8025d7e:	60b3      	str	r3, [r6, #8]
 8025d80:	60f3      	str	r3, [r6, #12]
 8025d82:	6133      	str	r3, [r6, #16]
 8025d84:	6173      	str	r3, [r6, #20]
 8025d86:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8025d88:	2001      	movs	r0, #1
 8025d8a:	f7ff fee3 	bl	8025b54 <mg_ntohs>
 8025d8e:	4606      	mov	r6, r0
 8025d90:	81e0      	strh	r0, [r4, #14]
 8025d92:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8025d96:	f7ff fedd 	bl	8025b54 <mg_ntohs>
 8025d9a:	8220      	strh	r0, [r4, #16]
 8025d9c:	2306      	movs	r3, #6
 8025d9e:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 8025da0:	2304      	movs	r3, #4
 8025da2:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8025da4:	82a6      	strh	r6, [r4, #20]
 8025da6:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 8025daa:	68ab      	ldr	r3, [r5, #8]
 8025dac:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8025dae:	682b      	ldr	r3, [r5, #0]
 8025db0:	f8c4 3016 	str.w	r3, [r4, #22]
 8025db4:	88ab      	ldrh	r3, [r5, #4]
 8025db6:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 8025db8:	212a      	movs	r1, #42	@ 0x2a
 8025dba:	4628      	mov	r0, r5
 8025dbc:	f7fb fa23 	bl	8021206 <ether_output>
}
 8025dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025dc2 <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 8025dc2:	b510      	push	{r4, lr}
 8025dc4:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 8025dc6:	4608      	mov	r0, r1
 8025dc8:	f7ff fd74 	bl	80258b4 <mg_url_port>
 8025dcc:	f7ff fec2 	bl	8025b54 <mg_ntohs>
 8025dd0:	8320      	strh	r0, [r4, #24]
}
 8025dd2:	2001      	movs	r0, #1
 8025dd4:	bd10      	pop	{r4, pc}
	...

08025dd8 <tx_dhcp>:
                    bool ciaddr) {
 8025dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025ddc:	b0c8      	sub	sp, #288	@ 0x120
 8025dde:	4604      	mov	r4, r0
 8025de0:	460e      	mov	r6, r1
 8025de2:	4615      	mov	r5, r2
 8025de4:	4698      	mov	r8, r3
 8025de6:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8025dea:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8025dee:	4917      	ldr	r1, [pc, #92]	@ (8025e4c <tx_dhcp+0x74>)
 8025df0:	a804      	add	r0, sp, #16
 8025df2:	f008 f829 	bl	802de48 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8025df6:	4816      	ldr	r0, [pc, #88]	@ (8025e50 <tx_dhcp+0x78>)
 8025df8:	f7ff fe14 	bl	8025a24 <mg_ntohl>
 8025dfc:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8025dfe:	6820      	ldr	r0, [r4, #0]
 8025e00:	900b      	str	r0, [sp, #44]	@ 0x2c
 8025e02:	88a3      	ldrh	r3, [r4, #4]
 8025e04:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8025e08:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8025e0c:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 8025e0e:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8025e10:	994e      	ldr	r1, [sp, #312]	@ 0x138
 8025e12:	a840      	add	r0, sp, #256	@ 0x100
 8025e14:	f008 f818 	bl	802de48 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8025e18:	b107      	cbz	r7, 8025e1c <tx_dhcp+0x44>
 8025e1a:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8025e1c:	2044      	movs	r0, #68	@ 0x44
 8025e1e:	f7ff fe99 	bl	8025b54 <mg_ntohs>
 8025e22:	4607      	mov	r7, r0
 8025e24:	2043      	movs	r0, #67	@ 0x43
 8025e26:	f7ff fe95 	bl	8025b54 <mg_ntohs>
 8025e2a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8025e2e:	9303      	str	r3, [sp, #12]
 8025e30:	ab04      	add	r3, sp, #16
 8025e32:	9302      	str	r3, [sp, #8]
 8025e34:	9001      	str	r0, [sp, #4]
 8025e36:	f8cd 8000 	str.w	r8, [sp]
 8025e3a:	463b      	mov	r3, r7
 8025e3c:	462a      	mov	r2, r5
 8025e3e:	4631      	mov	r1, r6
 8025e40:	4620      	mov	r0, r4
 8025e42:	f7ff ff3c 	bl	8025cbe <tx_udp>
}
 8025e46:	b048      	add	sp, #288	@ 0x120
 8025e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e4c:	08035d1c 	.word	0x08035d1c
 8025e50:	63825363 	.word	0x63825363

08025e54 <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e58:	b0d0      	sub	sp, #320	@ 0x140
 8025e5a:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 8025e5c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8025e5e:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8025e62:	6809      	ldr	r1, [r1, #0]
 8025e64:	686a      	ldr	r2, [r5, #4]
 8025e66:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8025e6a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8025e6e:	4543      	cmp	r3, r8
 8025e70:	d827      	bhi.n	8025ec2 <rx_dhcp_server+0x6e>
 8025e72:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8025e74:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8025e78:	495e      	ldr	r1, [pc, #376]	@ (8025ff4 <rx_dhcp_server+0x1a0>)
 8025e7a:	a80c      	add	r0, sp, #48	@ 0x30
 8025e7c:	f007 ffe4 	bl	802de48 <memcpy>
  res.yiaddr = ifp->ip;
 8025e80:	68b3      	ldr	r3, [r6, #8]
 8025e82:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 8025e84:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8025e88:	3301      	adds	r3, #1
 8025e8a:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 8025e8e:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8025e90:	e002      	b.n	8025e98 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 8025e92:	7863      	ldrb	r3, [r4, #1]
 8025e94:	3302      	adds	r3, #2
 8025e96:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8025e98:	1c63      	adds	r3, r4, #1
 8025e9a:	4543      	cmp	r3, r8
 8025e9c:	d20c      	bcs.n	8025eb8 <rx_dhcp_server+0x64>
 8025e9e:	7823      	ldrb	r3, [r4, #0]
 8025ea0:	2bff      	cmp	r3, #255	@ 0xff
 8025ea2:	d009      	beq.n	8025eb8 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8025ea4:	2b35      	cmp	r3, #53	@ 0x35
 8025ea6:	d1f4      	bne.n	8025e92 <rx_dhcp_server+0x3e>
 8025ea8:	7863      	ldrb	r3, [r4, #1]
 8025eaa:	2b01      	cmp	r3, #1
 8025eac:	d1f1      	bne.n	8025e92 <rx_dhcp_server+0x3e>
 8025eae:	1ca3      	adds	r3, r4, #2
 8025eb0:	4543      	cmp	r3, r8
 8025eb2:	d2ee      	bcs.n	8025e92 <rx_dhcp_server+0x3e>
      op = p[2];
 8025eb4:	78a7      	ldrb	r7, [r4, #2]
 8025eb6:	e7ec      	b.n	8025e92 <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8025eb8:	2f01      	cmp	r7, #1
 8025eba:	f000 808a 	beq.w	8025fd2 <rx_dhcp_server+0x17e>
 8025ebe:	2f03      	cmp	r7, #3
 8025ec0:	d002      	beq.n	8025ec8 <rx_dhcp_server+0x74>
}
 8025ec2:	b050      	add	sp, #320	@ 0x140
 8025ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8025ec8:	2205      	movs	r2, #5
    uint8_t opts[] = {
 8025eca:	2335      	movs	r3, #53	@ 0x35
 8025ecc:	f88d 3014 	strb.w	r3, [sp, #20]
 8025ed0:	2301      	movs	r3, #1
 8025ed2:	f88d 3015 	strb.w	r3, [sp, #21]
 8025ed6:	f88d 2016 	strb.w	r2, [sp, #22]
 8025eda:	f88d 3017 	strb.w	r3, [sp, #23]
 8025ede:	2204      	movs	r2, #4
 8025ee0:	f88d 2018 	strb.w	r2, [sp, #24]
 8025ee4:	2300      	movs	r3, #0
 8025ee6:	f88d 3019 	strb.w	r3, [sp, #25]
 8025eea:	f88d 301a 	strb.w	r3, [sp, #26]
 8025eee:	f88d 301b 	strb.w	r3, [sp, #27]
 8025ef2:	f88d 301c 	strb.w	r3, [sp, #28]
 8025ef6:	2136      	movs	r1, #54	@ 0x36
 8025ef8:	f88d 101d 	strb.w	r1, [sp, #29]
 8025efc:	f88d 201e 	strb.w	r2, [sp, #30]
 8025f00:	f88d 301f 	strb.w	r3, [sp, #31]
 8025f04:	f88d 3020 	strb.w	r3, [sp, #32]
 8025f08:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8025f0c:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8025f10:	230c      	movs	r3, #12
 8025f12:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8025f16:	2303      	movs	r3, #3
 8025f18:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8025f1c:	236d      	movs	r3, #109	@ 0x6d
 8025f1e:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 8025f22:	2369      	movs	r3, #105	@ 0x69
 8025f24:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 8025f28:	2370      	movs	r3, #112	@ 0x70
 8025f2a:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8025f2e:	2333      	movs	r3, #51	@ 0x33
 8025f30:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8025f34:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 8025f38:	23ff      	movs	r3, #255	@ 0xff
 8025f3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025f3e:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8025f42:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8025f46:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 8025f4a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8025f4e:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 8025f52:	f8de 001c 	ldr.w	r0, [lr, #28]
 8025f56:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025f58:	f8be 3020 	ldrh.w	r3, [lr, #32]
 8025f5c:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8025f60:	68f3      	ldr	r3, [r6, #12]
 8025f62:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8025f66:	68b3      	ldr	r3, [r6, #8]
 8025f68:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 8025f6c:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 8025f70:	ac05      	add	r4, sp, #20
 8025f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025f74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8025f78:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8025f7c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8025f80:	f82c 2b02 	strh.w	r2, [ip], #2
 8025f84:	0c12      	lsrs	r2, r2, #16
 8025f86:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 8025f8a:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 8025f8e:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 8025f90:	f8de 3004 	ldr.w	r3, [lr, #4]
 8025f94:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 8025f96:	7fb3      	ldrb	r3, [r6, #30]
 8025f98:	b9eb      	cbnz	r3, 8025fd6 <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8025f9a:	692c      	ldr	r4, [r5, #16]
 8025f9c:	3406      	adds	r4, #6
 8025f9e:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8025fa2:	2043      	movs	r0, #67	@ 0x43
 8025fa4:	f7ff fdd6 	bl	8025b54 <mg_ntohs>
 8025fa8:	4605      	mov	r5, r0
 8025faa:	2f01      	cmp	r7, #1
 8025fac:	d01e      	beq.n	8025fec <rx_dhcp_server+0x198>
 8025fae:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8025fb0:	2044      	movs	r0, #68	@ 0x44
 8025fb2:	f7ff fdcf 	bl	8025b54 <mg_ntohs>
 8025fb6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8025fba:	9303      	str	r3, [sp, #12]
 8025fbc:	ab0c      	add	r3, sp, #48	@ 0x30
 8025fbe:	9302      	str	r3, [sp, #8]
 8025fc0:	9001      	str	r0, [sp, #4]
 8025fc2:	9700      	str	r7, [sp, #0]
 8025fc4:	462b      	mov	r3, r5
 8025fc6:	4642      	mov	r2, r8
 8025fc8:	4621      	mov	r1, r4
 8025fca:	4630      	mov	r0, r6
 8025fcc:	f7ff fe77 	bl	8025cbe <tx_udp>
 8025fd0:	e777      	b.n	8025ec2 <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8025fd2:	2202      	movs	r2, #2
 8025fd4:	e779      	b.n	8025eca <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 8025fd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025fd8:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8025fda:	692b      	ldr	r3, [r5, #16]
 8025fdc:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8025fe0:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 8025fe4:	895b      	ldrh	r3, [r3, #10]
 8025fe6:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8025fea:	e7d6      	b.n	8025f9a <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8025fec:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025ff0:	e7de      	b.n	8025fb0 <rx_dhcp_server+0x15c>
 8025ff2:	bf00      	nop
 8025ff4:	08035e2c 	.word	0x08035e2c

08025ff8 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8025ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ffc:	b08b      	sub	sp, #44	@ 0x2c
 8025ffe:	4605      	mov	r5, r0
 8026000:	9108      	str	r1, [sp, #32]
 8026002:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8026004:	8810      	ldrh	r0, [r2, #0]
 8026006:	f7ff fda5 	bl	8025b54 <mg_ntohs>
 802600a:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 802600c:	8860      	ldrh	r0, [r4, #2]
 802600e:	f7ff fda1 	bl	8025b54 <mg_ntohs>
 8026012:	4606      	mov	r6, r0
 8026014:	88a0      	ldrh	r0, [r4, #4]
 8026016:	f7ff fd9d 	bl	8025b54 <mg_ntohs>
 802601a:	4607      	mov	r7, r0
 802601c:	88e0      	ldrh	r0, [r4, #6]
 802601e:	f7ff fd99 	bl	8025b54 <mg_ntohs>
 8026022:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8026024:	8920      	ldrh	r0, [r4, #8]
 8026026:	f7ff fd95 	bl	8025b54 <mg_ntohs>
 802602a:	4681      	mov	r9, r0
 802602c:	8960      	ldrh	r0, [r4, #10]
 802602e:	f7ff fd91 	bl	8025b54 <mg_ntohs>
 8026032:	4682      	mov	sl, r0
 8026034:	89a0      	ldrh	r0, [r4, #12]
 8026036:	f7ff fd8d 	bl	8025b54 <mg_ntohs>
 802603a:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 802603c:	89e0      	ldrh	r0, [r4, #14]
 802603e:	f7ff fd89 	bl	8025b54 <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8026042:	9006      	str	r0, [sp, #24]
 8026044:	f8cd b014 	str.w	fp, [sp, #20]
 8026048:	f8cd a010 	str.w	sl, [sp, #16]
 802604c:	f8cd 900c 	str.w	r9, [sp, #12]
 8026050:	f8cd 8008 	str.w	r8, [sp, #8]
 8026054:	9701      	str	r7, [sp, #4]
 8026056:	9600      	str	r6, [sp, #0]
 8026058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802605a:	4a04      	ldr	r2, [pc, #16]	@ (802606c <print_ip6+0x74>)
 802605c:	9908      	ldr	r1, [sp, #32]
 802605e:	4628      	mov	r0, r5
 8026060:	f7fd ff28 	bl	8023eb4 <mg_xprintf>
}
 8026064:	b00b      	add	sp, #44	@ 0x2c
 8026066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802606a:	bf00      	nop
 802606c:	0803accc 	.word	0x0803accc

08026070 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8026070:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8026072:	6813      	ldr	r3, [r2, #0]
 8026074:	1d1c      	adds	r4, r3, #4
 8026076:	6014      	str	r4, [r2, #0]
 8026078:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 802607a:	7cd3      	ldrb	r3, [r2, #19]
 802607c:	b913      	cbnz	r3, 8026084 <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 802607e:	f7fd ff29 	bl	8023ed4 <print_ip4>
}
 8026082:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8026084:	f7ff ffb8 	bl	8025ff8 <print_ip6>
 8026088:	e7fb      	b.n	8026082 <mg_print_ip+0x12>
	...

0802608c <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 802608c:	b570      	push	{r4, r5, r6, lr}
 802608e:	b082      	sub	sp, #8
 8026090:	4604      	mov	r4, r0
 8026092:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8026094:	6813      	ldr	r3, [r2, #0]
 8026096:	1d19      	adds	r1, r3, #4
 8026098:	6011      	str	r1, [r2, #0]
 802609a:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 802609c:	8a30      	ldrh	r0, [r6, #16]
 802609e:	f7ff fd59 	bl	8025b54 <mg_ntohs>
 80260a2:	9001      	str	r0, [sp, #4]
 80260a4:	9600      	str	r6, [sp, #0]
 80260a6:	4b04      	ldr	r3, [pc, #16]	@ (80260b8 <mg_print_ip_port+0x2c>)
 80260a8:	4a04      	ldr	r2, [pc, #16]	@ (80260bc <mg_print_ip_port+0x30>)
 80260aa:	4629      	mov	r1, r5
 80260ac:	4620      	mov	r0, r4
 80260ae:	f7fd ff01 	bl	8023eb4 <mg_xprintf>
}
 80260b2:	b002      	add	sp, #8
 80260b4:	bd70      	pop	{r4, r5, r6, pc}
 80260b6:	bf00      	nop
 80260b8:	08026071 	.word	0x08026071
 80260bc:	0803ace8 	.word	0x0803ace8

080260c0 <mg_crc32>:
  crc = ~crc;
 80260c0:	43c0      	mvns	r0, r0
  while (len--) {
 80260c2:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80260c6:	b1e2      	cbz	r2, 8026102 <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 80260c8:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 80260ca:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 80260ce:	ea83 0200 	eor.w	r2, r3, r0
 80260d2:	f002 020f 	and.w	r2, r2, #15
 80260d6:	4c0c      	ldr	r4, [pc, #48]	@ (8026108 <mg_crc32+0x48>)
 80260d8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80260dc:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 80260e0:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 80260e4:	f003 030f 	and.w	r3, r3, #15
 80260e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80260ec:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 80260f0:	4662      	mov	r2, ip
 80260f2:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80260f6:	2a00      	cmp	r2, #0
 80260f8:	d1e7      	bne.n	80260ca <mg_crc32+0xa>
}
 80260fa:	43c0      	mvns	r0, r0
 80260fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026100:	4770      	bx	lr
 8026102:	43c0      	mvns	r0, r0
 8026104:	4770      	bx	lr
 8026106:	bf00      	nop
 8026108:	0803b57c 	.word	0x0803b57c

0802610c <mg_check_ip_acl>:
int mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip) {
 802610c:	b530      	push	{r4, r5, lr}
 802610e:	b089      	sub	sp, #36	@ 0x24
 8026110:	ab02      	add	r3, sp, #8
 8026112:	e883 0003 	stmia.w	r3, {r0, r1}
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 8026116:	bb19      	cbnz	r1, 8026160 <mg_check_ip_acl+0x54>
 8026118:	252b      	movs	r5, #43	@ 0x2b
  if (remote_ip->is_ip6) {
 802611a:	7cd3      	ldrb	r3, [r2, #19]
 802611c:	bb73      	cbnz	r3, 802617c <mg_check_ip_acl+0x70>
    memcpy((void *) &remote_ip4, remote_ip->ip, sizeof(remote_ip4));
 802611e:	6814      	ldr	r4, [r2, #0]
    while (mg_span(acl, &entry, &acl, ',')) {
 8026120:	ab02      	add	r3, sp, #8
 8026122:	222c      	movs	r2, #44	@ 0x2c
 8026124:	9200      	str	r2, [sp, #0]
 8026126:	aa06      	add	r2, sp, #24
 8026128:	e893 0003 	ldmia.w	r3, {r0, r1}
 802612c:	f7fe fb9d 	bl	802486a <mg_span>
 8026130:	b1f0      	cbz	r0, 8026170 <mg_check_ip_acl+0x64>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 8026132:	9806      	ldr	r0, [sp, #24]
 8026134:	7803      	ldrb	r3, [r0, #0]
 8026136:	2b2b      	cmp	r3, #43	@ 0x2b
 8026138:	d001      	beq.n	802613e <mg_check_ip_acl+0x32>
 802613a:	2b2d      	cmp	r3, #45	@ 0x2d
 802613c:	d112      	bne.n	8026164 <mg_check_ip_acl+0x58>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 802613e:	aa05      	add	r2, sp, #20
 8026140:	a904      	add	r1, sp, #16
 8026142:	3001      	adds	r0, #1
 8026144:	f7fc fb82 	bl	802284c <parse_net>
 8026148:	b178      	cbz	r0, 802616a <mg_check_ip_acl+0x5e>
      if ((mg_ntohl(remote_ip4) & mask) == net) allowed = entry.buf[0];
 802614a:	4620      	mov	r0, r4
 802614c:	f7ff fc6a 	bl	8025a24 <mg_ntohl>
 8026150:	9b05      	ldr	r3, [sp, #20]
 8026152:	4018      	ands	r0, r3
 8026154:	9b04      	ldr	r3, [sp, #16]
 8026156:	4298      	cmp	r0, r3
 8026158:	d1e2      	bne.n	8026120 <mg_check_ip_acl+0x14>
 802615a:	9b06      	ldr	r3, [sp, #24]
 802615c:	781d      	ldrb	r5, [r3, #0]
 802615e:	e7df      	b.n	8026120 <mg_check_ip_acl+0x14>
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 8026160:	252d      	movs	r5, #45	@ 0x2d
 8026162:	e7da      	b.n	802611a <mg_check_ip_acl+0xe>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 8026164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026168:	e006      	b.n	8026178 <mg_check_ip_acl+0x6c>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 802616a:	f06f 0001 	mvn.w	r0, #1
 802616e:	e003      	b.n	8026178 <mg_check_ip_acl+0x6c>
  return allowed == '+';
 8026170:	2d2b      	cmp	r5, #43	@ 0x2b
 8026172:	bf14      	ite	ne
 8026174:	2000      	movne	r0, #0
 8026176:	2001      	moveq	r0, #1
}
 8026178:	b009      	add	sp, #36	@ 0x24
 802617a:	bd30      	pop	{r4, r5, pc}
    return -1;  // TODO(): handle IPv6 ACL and addresses
 802617c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026180:	e7fa      	b.n	8026178 <mg_check_ip_acl+0x6c>

08026182 <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 8026182:	b082      	sub	sp, #8
 8026184:	ab02      	add	r3, sp, #8
 8026186:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 802618a:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 802618c:	7803      	ldrb	r3, [r0, #0]
 802618e:	2b2e      	cmp	r3, #46	@ 0x2e
 8026190:	d106      	bne.n	80261a0 <mg_path_is_sane+0x1e>
 8026192:	7843      	ldrb	r3, [r0, #1]
 8026194:	2b2e      	cmp	r3, #46	@ 0x2e
 8026196:	d103      	bne.n	80261a0 <mg_path_is_sane+0x1e>
 8026198:	2000      	movs	r0, #0
 802619a:	e015      	b.n	80261c8 <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 802619c:	3201      	adds	r2, #1
 802619e:	3901      	subs	r1, #1
 80261a0:	7813      	ldrb	r3, [r2, #0]
 80261a2:	b183      	cbz	r3, 80261c6 <mg_path_is_sane+0x44>
 80261a4:	b169      	cbz	r1, 80261c2 <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 80261a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80261a8:	d001      	beq.n	80261ae <mg_path_is_sane+0x2c>
 80261aa:	2b5c      	cmp	r3, #92	@ 0x5c
 80261ac:	d1f6      	bne.n	802619c <mg_path_is_sane+0x1a>
 80261ae:	2901      	cmp	r1, #1
 80261b0:	d9f4      	bls.n	802619c <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 80261b2:	7853      	ldrb	r3, [r2, #1]
 80261b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80261b6:	d1f1      	bne.n	802619c <mg_path_is_sane+0x1a>
 80261b8:	7893      	ldrb	r3, [r2, #2]
 80261ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80261bc:	d1ee      	bne.n	802619c <mg_path_is_sane+0x1a>
 80261be:	2000      	movs	r0, #0
 80261c0:	e002      	b.n	80261c8 <mg_path_is_sane+0x46>
  return true;
 80261c2:	2001      	movs	r0, #1
 80261c4:	e000      	b.n	80261c8 <mg_path_is_sane+0x46>
 80261c6:	2001      	movs	r0, #1
}
 80261c8:	b002      	add	sp, #8
 80261ca:	4770      	bx	lr

080261cc <mg_millis>:
uint64_t mg_millis(void) {
 80261cc:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 80261ce:	f7f3 fc23 	bl	8019a18 <xTaskGetTickCount>
}
 80261d2:	2100      	movs	r1, #0
 80261d4:	bd08      	pop	{r3, pc}
	...

080261d8 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 80261d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80261dc:	b092      	sub	sp, #72	@ 0x48
 80261de:	4605      	mov	r5, r0
 80261e0:	460c      	mov	r4, r1
 80261e2:	4616      	mov	r6, r2
 80261e4:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 80261e6:	212f      	movs	r1, #47	@ 0x2f
 80261e8:	4620      	mov	r0, r4
 80261ea:	f006 fc4b 	bl	802ca84 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 80261ee:	4680      	mov	r8, r0
 80261f0:	b1a8      	cbz	r0, 802621e <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 80261f2:	f7ff ffeb 	bl	80261cc <mg_millis>
 80261f6:	f1b8 0f00 	cmp.w	r8, #0
 80261fa:	d001      	beq.n	8026200 <mg_log_prefix+0x28>
 80261fc:	f108 0401 	add.w	r4, r8, #1
 8026200:	9705      	str	r7, [sp, #20]
 8026202:	9604      	str	r6, [sp, #16]
 8026204:	9403      	str	r4, [sp, #12]
 8026206:	9502      	str	r5, [sp, #8]
 8026208:	9000      	str	r0, [sp, #0]
 802620a:	9101      	str	r1, [sp, #4]
 802620c:	4a0f      	ldr	r2, [pc, #60]	@ (802624c <mg_log_prefix+0x74>)
 802620e:	2129      	movs	r1, #41	@ 0x29
 8026210:	a807      	add	r0, sp, #28
 8026212:	f7fd f9e5 	bl	80235e0 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8026216:	2827      	cmp	r0, #39	@ 0x27
 8026218:	d90e      	bls.n	8026238 <mg_log_prefix+0x60>
 802621a:	2027      	movs	r0, #39	@ 0x27
 802621c:	e00c      	b.n	8026238 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 802621e:	215c      	movs	r1, #92	@ 0x5c
 8026220:	4620      	mov	r0, r4
 8026222:	f006 fc2f 	bl	802ca84 <strrchr>
 8026226:	4680      	mov	r8, r0
 8026228:	e7e3      	b.n	80261f2 <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 802622a:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 802622e:	446b      	add	r3, sp
 8026230:	2220      	movs	r2, #32
 8026232:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8026236:	3001      	adds	r0, #1
 8026238:	2828      	cmp	r0, #40	@ 0x28
 802623a:	d9f6      	bls.n	802622a <mg_log_prefix+0x52>
  logs(buf, n - 1);
 802623c:	1e41      	subs	r1, r0, #1
 802623e:	a807      	add	r0, sp, #28
 8026240:	f7fa fb34 	bl	80208ac <logs>
}
 8026244:	b012      	add	sp, #72	@ 0x48
 8026246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802624a:	bf00      	nop
 802624c:	0803acf0 	.word	0x0803acf0

08026250 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8026250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026254:	b084      	sub	sp, #16
 8026256:	4605      	mov	r5, r0
 8026258:	460e      	mov	r6, r1
 802625a:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 802625c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8026260:	2100      	movs	r1, #0
 8026262:	4640      	mov	r0, r8
 8026264:	f006 fbb4 	bl	802c9d0 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8026268:	2e0b      	cmp	r6, #11
 802626a:	f240 808b 	bls.w	8026384 <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802626e:	88a8      	ldrh	r0, [r5, #4]
 8026270:	f7ff fc70 	bl	8025b54 <mg_ntohs>
 8026274:	2801      	cmp	r0, #1
 8026276:	f200 8089 	bhi.w	802638c <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 802627a:	88e8      	ldrh	r0, [r5, #6]
 802627c:	f7ff fc6a 	bl	8025b54 <mg_ntohs>
 8026280:	4604      	mov	r4, r0
 8026282:	4681      	mov	r9, r0
  if (num_answers > 10) {
 8026284:	280a      	cmp	r0, #10
 8026286:	d905      	bls.n	8026294 <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8026288:	4b43      	ldr	r3, [pc, #268]	@ (8026398 <mg_dns_parse+0x148>)
 802628a:	681b      	ldr	r3, [r3, #0]
 802628c:	2b02      	cmp	r3, #2
 802628e:	dc1a      	bgt.n	80262c6 <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 8026290:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 8026294:	8828      	ldrh	r0, [r5, #0]
 8026296:	f7ff fc5d 	bl	8025b54 <mg_ntohs>
 802629a:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 802629e:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80262a0:	2700      	movs	r7, #0
 80262a2:	88a8      	ldrh	r0, [r5, #4]
 80262a4:	f7ff fc56 	bl	8025b54 <mg_ntohs>
 80262a8:	42b8      	cmp	r0, r7
 80262aa:	d91a      	bls.n	80262e2 <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80262ac:	ab02      	add	r3, sp, #8
 80262ae:	9300      	str	r3, [sp, #0]
 80262b0:	2301      	movs	r3, #1
 80262b2:	4622      	mov	r2, r4
 80262b4:	4631      	mov	r1, r6
 80262b6:	4628      	mov	r0, r5
 80262b8:	f7fc fba4 	bl	8022a04 <mg_dns_parse_rr>
 80262bc:	2800      	cmp	r0, #0
 80262be:	d067      	beq.n	8026390 <mg_dns_parse+0x140>
    ofs += n;
 80262c0:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80262c2:	3701      	adds	r7, #1
 80262c4:	e7ed      	b.n	80262a2 <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80262c6:	4b35      	ldr	r3, [pc, #212]	@ (802639c <mg_dns_parse+0x14c>)
 80262c8:	f240 4293 	movw	r2, #1171	@ 0x493
 80262cc:	4934      	ldr	r1, [pc, #208]	@ (80263a0 <mg_dns_parse+0x150>)
 80262ce:	2003      	movs	r0, #3
 80262d0:	f7ff ff82 	bl	80261d8 <mg_log_prefix>
 80262d4:	4621      	mov	r1, r4
 80262d6:	4833      	ldr	r0, [pc, #204]	@ (80263a4 <mg_dns_parse+0x154>)
 80262d8:	f7fd fe2c 	bl	8023f34 <mg_log>
    num_answers = 10;  // Sanity cap
 80262dc:	f04f 090a 	mov.w	r9, #10
 80262e0:	e7d8      	b.n	8026294 <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 80262e2:	2700      	movs	r7, #0
 80262e4:	e013      	b.n	802630e <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80262e6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80262ea:	2a01      	cmp	r2, #1
 80262ec:	d12a      	bne.n	8026344 <mg_dns_parse+0xf4>
 80262ee:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80262f2:	2a01      	cmp	r2, #1
 80262f4:	d126      	bne.n	8026344 <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 80262f6:	2300      	movs	r3, #0
 80262f8:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 80262fc:	3c04      	subs	r4, #4
 80262fe:	592b      	ldr	r3, [r5, r4]
 8026300:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 8026304:	2001      	movs	r0, #1
 8026306:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802630a:	e03c      	b.n	8026386 <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 802630c:	3701      	adds	r7, #1
 802630e:	454f      	cmp	r7, r9
 8026310:	d236      	bcs.n	8026380 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8026312:	ab02      	add	r3, sp, #8
 8026314:	9300      	str	r3, [sp, #0]
 8026316:	2300      	movs	r3, #0
 8026318:	4622      	mov	r2, r4
 802631a:	4631      	mov	r1, r6
 802631c:	4628      	mov	r0, r5
 802631e:	f7fc fb71 	bl	8022a04 <mg_dns_parse_rr>
 8026322:	4682      	mov	sl, r0
 8026324:	b3b0      	cbz	r0, 8026394 <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8026326:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802632a:	9300      	str	r3, [sp, #0]
 802632c:	f108 0318 	add.w	r3, r8, #24
 8026330:	4622      	mov	r2, r4
 8026332:	4631      	mov	r1, r6
 8026334:	4628      	mov	r0, r5
 8026336:	f7fb fa54 	bl	80217e2 <mg_dns_parse_name>
    ofs += n;
 802633a:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 802633c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8026340:	2b04      	cmp	r3, #4
 8026342:	d0d0      	beq.n	80262e6 <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8026344:	2b10      	cmp	r3, #16
 8026346:	d1e1      	bne.n	802630c <mg_dns_parse+0xbc>
 8026348:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802634c:	2b1c      	cmp	r3, #28
 802634e:	d1dd      	bne.n	802630c <mg_dns_parse+0xbc>
 8026350:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8026354:	2b01      	cmp	r3, #1
 8026356:	d1d9      	bne.n	802630c <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 8026358:	2001      	movs	r0, #1
 802635a:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 802635e:	3c10      	subs	r4, #16
 8026360:	192b      	adds	r3, r5, r4
 8026362:	592c      	ldr	r4, [r5, r4]
 8026364:	6859      	ldr	r1, [r3, #4]
 8026366:	689a      	ldr	r2, [r3, #8]
 8026368:	68db      	ldr	r3, [r3, #12]
 802636a:	f8c8 4004 	str.w	r4, [r8, #4]
 802636e:	f8c8 1008 	str.w	r1, [r8, #8]
 8026372:	f8c8 200c 	str.w	r2, [r8, #12]
 8026376:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 802637a:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802637e:	e002      	b.n	8026386 <mg_dns_parse+0x136>
  return true;
 8026380:	2001      	movs	r0, #1
 8026382:	e000      	b.n	8026386 <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8026384:	2000      	movs	r0, #0
}
 8026386:	b004      	add	sp, #16
 8026388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802638c:	2000      	movs	r0, #0
 802638e:	e7fa      	b.n	8026386 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8026390:	2000      	movs	r0, #0
 8026392:	e7f8      	b.n	8026386 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8026394:	2000      	movs	r0, #0
 8026396:	e7f6      	b.n	8026386 <mg_dns_parse+0x136>
 8026398:	2000012c 	.word	0x2000012c
 802639c:	0803b77c 	.word	0x0803b77c
 80263a0:	0803ad04 	.word	0x0803ad04
 80263a4:	0803ad34 	.word	0x0803ad34

080263a8 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80263a8:	b40e      	push	{r1, r2, r3}
 80263aa:	b510      	push	{r4, lr}
 80263ac:	b093      	sub	sp, #76	@ 0x4c
 80263ae:	4604      	mov	r4, r0
 80263b0:	ab15      	add	r3, sp, #84	@ 0x54
 80263b2:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80263b6:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80263b8:	ab01      	add	r3, sp, #4
 80263ba:	2140      	movs	r1, #64	@ 0x40
 80263bc:	a802      	add	r0, sp, #8
 80263be:	f7fd fdf7 	bl	8023fb0 <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80263c2:	4b11      	ldr	r3, [pc, #68]	@ (8026408 <mg_error+0x60>)
 80263c4:	681b      	ldr	r3, [r3, #0]
 80263c6:	2b00      	cmp	r3, #0
 80263c8:	dc0f      	bgt.n	80263ea <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80263ca:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80263ce:	f043 0320 	orr.w	r3, r3, #32
 80263d2:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 80263d6:	aa02      	add	r2, sp, #8
 80263d8:	2100      	movs	r1, #0
 80263da:	4620      	mov	r0, r4
 80263dc:	f7fc fb61 	bl	8022aa2 <mg_call>
}
 80263e0:	b013      	add	sp, #76	@ 0x4c
 80263e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80263e6:	b003      	add	sp, #12
 80263e8:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80263ea:	4b08      	ldr	r3, [pc, #32]	@ (802640c <mg_error+0x64>)
 80263ec:	f240 5253 	movw	r2, #1363	@ 0x553
 80263f0:	4907      	ldr	r1, [pc, #28]	@ (8026410 <mg_error+0x68>)
 80263f2:	2001      	movs	r0, #1
 80263f4:	f7ff fef0 	bl	80261d8 <mg_log_prefix>
 80263f8:	ab02      	add	r3, sp, #8
 80263fa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80263fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80263fe:	4805      	ldr	r0, [pc, #20]	@ (8026414 <mg_error+0x6c>)
 8026400:	f7fd fd98 	bl	8023f34 <mg_log>
 8026404:	e7e1      	b.n	80263ca <mg_error+0x22>
 8026406:	bf00      	nop
 8026408:	2000012c 	.word	0x2000012c
 802640c:	0803b758 	.word	0x0803b758
 8026410:	0803ad04 	.word	0x0803ad04
 8026414:	0803ad60 	.word	0x0803ad60

08026418 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 8026418:	b570      	push	{r4, r5, r6, lr}
 802641a:	b082      	sub	sp, #8
 802641c:	4606      	mov	r6, r0
 802641e:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8026420:	6809      	ldr	r1, [r1, #0]
 8026422:	68a5      	ldr	r5, [r4, #8]
 8026424:	6862      	ldr	r2, [r4, #4]
 8026426:	1b52      	subs	r2, r2, r5
 8026428:	4429      	add	r1, r5
 802642a:	f7ff f9cb 	bl	80257c4 <mg_tls_recv>
 802642e:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 8026430:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8026434:	d003      	beq.n	802643e <handle_tls_recv+0x26>
  } else if (n > 0) {
 8026436:	2800      	cmp	r0, #0
 8026438:	dc06      	bgt.n	8026448 <handle_tls_recv+0x30>
}
 802643a:	b002      	add	sp, #8
 802643c:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 802643e:	4906      	ldr	r1, [pc, #24]	@ (8026458 <handle_tls_recv+0x40>)
 8026440:	4630      	mov	r0, r6
 8026442:	f7ff ffb1 	bl	80263a8 <mg_error>
 8026446:	e7f8      	b.n	802643a <handle_tls_recv+0x22>
    io->len += (size_t) n;
 8026448:	4405      	add	r5, r0
 802644a:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 802644c:	aa01      	add	r2, sp, #4
 802644e:	2107      	movs	r1, #7
 8026450:	4630      	mov	r0, r6
 8026452:	f7fc fb26 	bl	8022aa2 <mg_call>
}
 8026456:	e7f0      	b.n	802643a <handle_tls_recv+0x22>
 8026458:	0803ad6c 	.word	0x0803ad6c

0802645c <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 802645c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026460:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8026464:	4607      	mov	r7, r0
 8026466:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8026468:	2907      	cmp	r1, #7
 802646a:	f000 80e3 	beq.w	8026634 <http_cb+0x1d8>
 802646e:	2909      	cmp	r1, #9
 8026470:	f000 814a 	beq.w	8026708 <http_cb+0x2ac>
 8026474:	2902      	cmp	r1, #2
 8026476:	f040 80d9 	bne.w	802662c <http_cb+0x1d0>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 802647a:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 802647e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8026482:	f023 030b 	bic.w	r3, r3, #11
 8026486:	04db      	lsls	r3, r3, #19
 8026488:	0cdb      	lsrs	r3, r3, #19
 802648a:	2b04      	cmp	r3, #4
 802648c:	f040 80ce 	bne.w	802662c <http_cb+0x1d0>
       c->recv.len > 0)) {  // see #2796
 8026490:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8026492:	2b00      	cmp	r3, #0
 8026494:	f000 80ca 	beq.w	802662c <http_cb+0x1d0>
 8026498:	f04f 0900 	mov.w	r9, #0
 802649c:	e0cc      	b.n	8026638 <http_cb+0x1dc>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 802649e:	4b9f      	ldr	r3, [pc, #636]	@ (802671c <http_cb+0x2c0>)
 80264a0:	681b      	ldr	r3, [r3, #0]
 80264a2:	2b00      	cmp	r3, #0
 80264a4:	dc11      	bgt.n	80264ca <http_cb+0x6e>
        c->is_draining = 1;
 80264a6:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80264aa:	f043 0310 	orr.w	r3, r3, #16
 80264ae:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 80264b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80264b4:	eba3 0109 	sub.w	r1, r3, r9
 80264b8:	2910      	cmp	r1, #16
 80264ba:	bf28      	it	cs
 80264bc:	2110      	movcs	r1, #16
 80264be:	4620      	mov	r0, r4
 80264c0:	f7fc fe9a 	bl	80231f8 <mg_hexdump>
        c->recv.len = 0;
 80264c4:	2300      	movs	r3, #0
 80264c6:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 80264c8:	e0b0      	b.n	802662c <http_cb+0x1d0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 80264ca:	4b95      	ldr	r3, [pc, #596]	@ (8026720 <http_cb+0x2c4>)
 80264cc:	f640 42a3 	movw	r2, #3235	@ 0xca3
 80264d0:	4994      	ldr	r1, [pc, #592]	@ (8026724 <http_cb+0x2c8>)
 80264d2:	2001      	movs	r0, #1
 80264d4:	f7ff fe80 	bl	80261d8 <mg_log_prefix>
 80264d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80264da:	4893      	ldr	r0, [pc, #588]	@ (8026728 <http_cb+0x2cc>)
 80264dc:	f7fd fd2a 	bl	8023f34 <mg_log>
 80264e0:	e7e1      	b.n	80264a6 <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 80264e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80264e4:	eba3 0309 	sub.w	r3, r3, r9
 80264e8:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 80264ea:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 80264ec:	9986      	ldr	r1, [sp, #536]	@ 0x218
 80264ee:	1a52      	subs	r2, r2, r1
 80264f0:	1a9b      	subs	r3, r3, r2
 80264f2:	9383      	str	r3, [sp, #524]	@ 0x20c
 80264f4:	e0bf      	b.n	8026676 <http_cb+0x21a>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 80264f6:	ad88      	add	r5, sp, #544	@ 0x220
 80264f8:	498c      	ldr	r1, [pc, #560]	@ (802672c <http_cb+0x2d0>)
 80264fa:	4628      	mov	r0, r5
 80264fc:	f7fd fef8 	bl	80242f0 <mg_str_s>
 8026500:	e895 000c 	ldmia.w	r5, {r2, r3}
 8026504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026508:	f7fd ffed 	bl	80244e6 <mg_strcasecmp>
 802650c:	4604      	mov	r4, r0
 802650e:	b950      	cbnz	r0, 8026526 <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 8026510:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8026512:	eb08 0309 	add.w	r3, r8, r9
 8026516:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8026518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802651a:	eba3 0309 	sub.w	r3, r3, r9
 802651e:	eba3 0b08 	sub.w	fp, r3, r8
 8026522:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8026524:	e04a      	b.n	80265bc <http_cb+0x160>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8026526:	4982      	ldr	r1, [pc, #520]	@ (8026730 <http_cb+0x2d4>)
 8026528:	4638      	mov	r0, r7
 802652a:	f7ff ff3d 	bl	80263a8 <mg_error>
          return;
 802652e:	e07d      	b.n	802662c <http_cb+0x1d0>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8026530:	2205      	movs	r2, #5
 8026532:	4980      	ldr	r1, [pc, #512]	@ (8026734 <http_cb+0x2d8>)
 8026534:	9802      	ldr	r0, [sp, #8]
 8026536:	f7f9 fc05 	bl	801fd44 <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 802653a:	2800      	cmp	r0, #0
 802653c:	d032      	beq.n	80265a4 <http_cb+0x148>
 802653e:	ac8a      	add	r4, sp, #552	@ 0x228
 8026540:	497d      	ldr	r1, [pc, #500]	@ (8026738 <http_cb+0x2dc>)
 8026542:	4620      	mov	r0, r4
 8026544:	f7fd fed4 	bl	80242f0 <mg_str_s>
 8026548:	a902      	add	r1, sp, #8
 802654a:	e894 000c 	ldmia.w	r4, {r2, r3}
 802654e:	c903      	ldmia	r1, {r0, r1}
 8026550:	f7fd ffc9 	bl	80244e6 <mg_strcasecmp>
 8026554:	b9c0      	cbnz	r0, 8026588 <http_cb+0x12c>
          ofs += (size_t) n;  // this request has been processed
 8026556:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 8026558:	4a78      	ldr	r2, [pc, #480]	@ (802673c <http_cb+0x2e0>)
 802655a:	4613      	mov	r3, r2
 802655c:	f240 119b 	movw	r1, #411	@ 0x19b
 8026560:	4638      	mov	r0, r7
 8026562:	f7fd fd3b 	bl	8023fdc <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8026566:	4b6d      	ldr	r3, [pc, #436]	@ (802671c <http_cb+0x2c0>)
 8026568:	681b      	ldr	r3, [r3, #0]
 802656a:	2b00      	cmp	r3, #0
 802656c:	f340 8092 	ble.w	8026694 <http_cb+0x238>
 8026570:	4b6b      	ldr	r3, [pc, #428]	@ (8026720 <http_cb+0x2c4>)
 8026572:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8026576:	496b      	ldr	r1, [pc, #428]	@ (8026724 <http_cb+0x2c8>)
 8026578:	2001      	movs	r0, #1
 802657a:	f7ff fe2d 	bl	80261d8 <mg_log_prefix>
 802657e:	4970      	ldr	r1, [pc, #448]	@ (8026740 <http_cb+0x2e4>)
 8026580:	4870      	ldr	r0, [pc, #448]	@ (8026744 <http_cb+0x2e8>)
 8026582:	f7fd fcd7 	bl	8023f34 <mg_log>
      if (is_chunked) {
 8026586:	e085      	b.n	8026694 <http_cb+0x238>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8026588:	ac8c      	add	r4, sp, #560	@ 0x230
 802658a:	496f      	ldr	r1, [pc, #444]	@ (8026748 <http_cb+0x2ec>)
 802658c:	4620      	mov	r0, r4
 802658e:	f7fd feaf 	bl	80242f0 <mg_str_s>
 8026592:	a902      	add	r1, sp, #8
 8026594:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026598:	c903      	ldmia	r1, {r0, r1}
 802659a:	f7fd ffa4 	bl	80244e6 <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 802659e:	2800      	cmp	r0, #0
 80265a0:	d178      	bne.n	8026694 <http_cb+0x238>
 80265a2:	e7d8      	b.n	8026556 <http_cb+0xfa>
          int status = mg_http_status(&hm);
 80265a4:	a802      	add	r0, sp, #8
 80265a6:	f7fc fb6f 	bl	8022c88 <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 80265aa:	28c7      	cmp	r0, #199	@ 0xc7
 80265ac:	dd72      	ble.n	8026694 <http_cb+0x238>
 80265ae:	28cc      	cmp	r0, #204	@ 0xcc
 80265b0:	d070      	beq.n	8026694 <http_cb+0x238>
 80265b2:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 80265b6:	d1cf      	bne.n	8026558 <http_cb+0xfc>
 80265b8:	e06c      	b.n	8026694 <http_cb+0x238>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 80265ba:	4406      	add	r6, r0
 80265bc:	ab01      	add	r3, sp, #4
 80265be:	466a      	mov	r2, sp
 80265c0:	ebab 0106 	sub.w	r1, fp, r6
 80265c4:	19a8      	adds	r0, r5, r6
 80265c6:	f7fe fecd 	bl	8025364 <skip_chunk>
 80265ca:	2800      	cmp	r0, #0
 80265cc:	dd02      	ble.n	80265d4 <http_cb+0x178>
 80265ce:	9b01      	ldr	r3, [sp, #4]
 80265d0:	2b00      	cmp	r3, #0
 80265d2:	d1f2      	bne.n	80265ba <http_cb+0x15e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 80265d4:	b338      	cbz	r0, 8026626 <http_cb+0x1ca>
        if (cl < 0) {
 80265d6:	2800      	cmp	r0, #0
 80265d8:	db21      	blt.n	802661e <http_cb+0x1c2>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 80265da:	2300      	movs	r3, #0
 80265dc:	9383      	str	r3, [sp, #524]	@ 0x20c
 80265de:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 80265e2:	ab01      	add	r3, sp, #4
 80265e4:	466a      	mov	r2, sp
 80265e6:	ebab 0104 	sub.w	r1, fp, r4
 80265ea:	1928      	adds	r0, r5, r4
 80265ec:	f7fe feba 	bl	8025364 <skip_chunk>
 80265f0:	1e06      	subs	r6, r0, #0
 80265f2:	dd11      	ble.n	8026618 <http_cb+0x1bc>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 80265f4:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 80265f6:	9900      	ldr	r1, [sp, #0]
 80265f8:	4421      	add	r1, r4
 80265fa:	9a01      	ldr	r2, [sp, #4]
 80265fc:	4429      	add	r1, r5
 80265fe:	4428      	add	r0, r5
 8026600:	f006 f9cc 	bl	802c99c <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8026604:	4434      	add	r4, r6
 8026606:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8026608:	9b01      	ldr	r3, [sp, #4]
 802660a:	441a      	add	r2, r3
 802660c:	9283      	str	r2, [sp, #524]	@ 0x20c
 802660e:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 8026610:	441a      	add	r2, r3
 8026612:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 8026614:	2b00      	cmp	r3, #0
 8026616:	d1e4      	bne.n	80265e2 <http_cb+0x186>
        ofs += (size_t) (n + o);
 8026618:	4444      	add	r4, r8
 802661a:	44a1      	add	r9, r4
 802661c:	e044      	b.n	80266a8 <http_cb+0x24c>
          mg_error(c, "Invalid chunk");
 802661e:	494b      	ldr	r1, [pc, #300]	@ (802674c <http_cb+0x2f0>)
 8026620:	4638      	mov	r0, r7
 8026622:	f7ff fec1 	bl	80263a8 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8026626:	f1b9 0f00 	cmp.w	r9, #0
 802662a:	d170      	bne.n	802670e <http_cb+0x2b2>
}
 802662c:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 8026630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026634:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8026638:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 802663c:	2b00      	cmp	r3, #0
 802663e:	dbf2      	blt.n	8026626 <http_cb+0x1ca>
 8026640:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8026642:	4549      	cmp	r1, r9
 8026644:	d9ef      	bls.n	8026626 <http_cb+0x1ca>
      const char *buf = (char *) c->recv.buf + ofs;
 8026646:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8026648:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 802664a:	aa02      	add	r2, sp, #8
 802664c:	eba1 0109 	sub.w	r1, r1, r9
 8026650:	4620      	mov	r0, r4
 8026652:	f7fd ff77 	bl	8024544 <mg_http_parse>
      if (n < 0) {
 8026656:	f1b0 0800 	subs.w	r8, r0, #0
 802665a:	f6ff af20 	blt.w	802649e <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 802665e:	f1b8 0f00 	cmp.w	r8, #0
 8026662:	d0e0      	beq.n	8026626 <http_cb+0x1ca>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8026664:	aa02      	add	r2, sp, #8
 8026666:	210a      	movs	r1, #10
 8026668:	4638      	mov	r0, r7
 802666a:	f7fc fa1a 	bl	8022aa2 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 802666e:	f1ba 0f09 	cmp.w	sl, #9
 8026672:	f43f af36 	beq.w	80264e2 <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8026676:	4936      	ldr	r1, [pc, #216]	@ (8026750 <http_cb+0x2f4>)
 8026678:	a802      	add	r0, sp, #8
 802667a:	f7fc fadb 	bl	8022c34 <mg_http_get_header>
 802667e:	4604      	mov	r4, r0
 8026680:	2800      	cmp	r0, #0
 8026682:	f47f af38 	bne.w	80264f6 <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8026686:	4933      	ldr	r1, [pc, #204]	@ (8026754 <http_cb+0x2f8>)
 8026688:	a802      	add	r0, sp, #8
 802668a:	f7fc fad3 	bl	8022c34 <mg_http_get_header>
 802668e:	2800      	cmp	r0, #0
 8026690:	f43f af4e 	beq.w	8026530 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 8026694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026696:	eba3 0309 	sub.w	r3, r3, r9
 802669a:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 802669e:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 80266a0:	429a      	cmp	r2, r3
 80266a2:	d8c0      	bhi.n	8026626 <http_cb+0x1ca>
        ofs += (size_t) n + hm.body.len;
 80266a4:	4490      	add	r8, r2
 80266a6:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 80266a8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80266ac:	f013 0f04 	tst.w	r3, #4
 80266b0:	d005      	beq.n	80266be <http_cb+0x262>
 80266b2:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80266b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80266ba:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 80266be:	aa02      	add	r2, sp, #8
 80266c0:	210b      	movs	r1, #11
 80266c2:	4638      	mov	r0, r7
 80266c4:	f7fc f9ed 	bl	8022aa2 <mg_call>
      if (c->is_accepted) {
 80266c8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80266cc:	f013 0f04 	tst.w	r3, #4
 80266d0:	d0b2      	beq.n	8026638 <http_cb+0x1dc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 80266d2:	4921      	ldr	r1, [pc, #132]	@ (8026758 <http_cb+0x2fc>)
 80266d4:	a802      	add	r0, sp, #8
 80266d6:	f7fc faad 	bl	8022c34 <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 80266da:	4605      	mov	r5, r0
 80266dc:	2800      	cmp	r0, #0
 80266de:	d0ab      	beq.n	8026638 <http_cb+0x1dc>
 80266e0:	ac8e      	add	r4, sp, #568	@ 0x238
 80266e2:	491e      	ldr	r1, [pc, #120]	@ (802675c <http_cb+0x300>)
 80266e4:	4620      	mov	r0, r4
 80266e6:	f7fd fe03 	bl	80242f0 <mg_str_s>
 80266ea:	e894 000c 	ldmia.w	r4, {r2, r3}
 80266ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80266f2:	f7fd fef8 	bl	80244e6 <mg_strcasecmp>
 80266f6:	2800      	cmp	r0, #0
 80266f8:	d19e      	bne.n	8026638 <http_cb+0x1dc>
          c->is_draining = 1;  // honor "Connection: close"
 80266fa:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80266fe:	f043 0310 	orr.w	r3, r3, #16
 8026702:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 8026706:	e78e      	b.n	8026626 <http_cb+0x1ca>
 8026708:	f04f 0900 	mov.w	r9, #0
 802670c:	e794      	b.n	8026638 <http_cb+0x1dc>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 802670e:	464a      	mov	r2, r9
 8026710:	2100      	movs	r1, #0
 8026712:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8026716:	f7ff f928 	bl	802596a <mg_iobuf_del>
 802671a:	e787      	b.n	802662c <http_cb+0x1d0>
 802671c:	2000012c 	.word	0x2000012c
 8026720:	0803b750 	.word	0x0803b750
 8026724:	0803ad04 	.word	0x0803ad04
 8026728:	0803ad7c 	.word	0x0803ad7c
 802672c:	0803ad94 	.word	0x0803ad94
 8026730:	0803ad9c 	.word	0x0803ad9c
 8026734:	0803a4fc 	.word	0x0803a4fc
 8026738:	0803674c 	.word	0x0803674c
 802673c:	08036c70 	.word	0x08036c70
 8026740:	0803adc8 	.word	0x0803adc8
 8026744:	0803b01c 	.word	0x0803b01c
 8026748:	08037498 	.word	0x08037498
 802674c:	0803adec 	.word	0x0803adec
 8026750:	0803ada4 	.word	0x0803ada4
 8026754:	0803adb8 	.word	0x0803adb8
 8026758:	0803adfc 	.word	0x0803adfc
 802675c:	0803ae08 	.word	0x0803ae08

08026760 <uri_to_path2>:
                        char *path, size_t path_size) {
 8026760:	b082      	sub	sp, #8
 8026762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026766:	b086      	sub	sp, #24
 8026768:	4681      	mov	r9, r0
 802676a:	460e      	mov	r6, r1
 802676c:	4690      	mov	r8, r2
 802676e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026770:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026772:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8026774:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026776:	9300      	str	r3, [sp, #0]
 8026778:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802677a:	4a6f      	ldr	r2, [pc, #444]	@ (8026938 <uri_to_path2+0x1d8>)
 802677c:	4639      	mov	r1, r7
 802677e:	4628      	mov	r0, r5
 8026780:	f7fc ff2e 	bl	80235e0 <mg_snprintf>
  if (n + 2 >= path_size) {
 8026784:	1c83      	adds	r3, r0, #2
 8026786:	42bb      	cmp	r3, r7
 8026788:	d227      	bcs.n	80267da <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 802678a:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 802678e:	2300      	movs	r3, #0
 8026790:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8026794:	b150      	cbz	r0, 80267ac <uri_to_path2+0x4c>
 8026796:	182b      	adds	r3, r5, r0
 8026798:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802679c:	2b2f      	cmp	r3, #47	@ 0x2f
 802679e:	d005      	beq.n	80267ac <uri_to_path2+0x4c>
 80267a0:	1c43      	adds	r3, r0, #1
 80267a2:	222f      	movs	r2, #47	@ 0x2f
 80267a4:	542a      	strb	r2, [r5, r0]
 80267a6:	2200      	movs	r2, #0
 80267a8:	54ea      	strb	r2, [r5, r3]
 80267aa:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 80267ac:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80267ae:	68f1      	ldr	r1, [r6, #12]
 80267b0:	428c      	cmp	r4, r1
 80267b2:	d31c      	bcc.n	80267ee <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 80267b4:	2300      	movs	r3, #0
 80267b6:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 80267ba:	ac02      	add	r4, sp, #8
 80267bc:	463a      	mov	r2, r7
 80267be:	4629      	mov	r1, r5
 80267c0:	4620      	mov	r0, r4
 80267c2:	f7fd fda1 	bl	8024308 <mg_str_n>
 80267c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80267ca:	f7ff fcda 	bl	8026182 <mg_path_is_sane>
 80267ce:	b1c0      	cbz	r0, 8026802 <uri_to_path2+0xa2>
  n = strlen(path);
 80267d0:	4628      	mov	r0, r5
 80267d2:	f7e9 fd65 	bl	80102a0 <strlen>
 80267d6:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 80267d8:	e020      	b.n	802681c <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 80267da:	4b58      	ldr	r3, [pc, #352]	@ (802693c <uri_to_path2+0x1dc>)
 80267dc:	4a58      	ldr	r2, [pc, #352]	@ (8026940 <uri_to_path2+0x1e0>)
 80267de:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80267e2:	4648      	mov	r0, r9
 80267e4:	f7fd fbfa 	bl	8023fdc <mg_http_reply>
    return -1;
 80267e8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80267ec:	e046      	b.n	802687c <uri_to_path2+0x11c>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 80267ee:	2300      	movs	r3, #0
 80267f0:	9300      	str	r3, [sp, #0]
 80267f2:	1a3b      	subs	r3, r7, r0
 80267f4:	182a      	adds	r2, r5, r0
 80267f6:	1b09      	subs	r1, r1, r4
 80267f8:	68b0      	ldr	r0, [r6, #8]
 80267fa:	4420      	add	r0, r4
 80267fc:	f7fe fc06 	bl	802500c <mg_url_decode>
 8026800:	e7d8      	b.n	80267b4 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 8026802:	4b50      	ldr	r3, [pc, #320]	@ (8026944 <uri_to_path2+0x1e4>)
 8026804:	4a4e      	ldr	r2, [pc, #312]	@ (8026940 <uri_to_path2+0x1e0>)
 8026806:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802680a:	4648      	mov	r0, r9
 802680c:	f7fd fbe6 	bl	8023fdc <mg_http_reply>
    return -1;
 8026810:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8026814:	e032      	b.n	802687c <uri_to_path2+0x11c>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8026816:	2200      	movs	r2, #0
 8026818:	54ea      	strb	r2, [r5, r3]
 802681a:	461c      	mov	r4, r3
 802681c:	2c01      	cmp	r4, #1
 802681e:	d905      	bls.n	802682c <uri_to_path2+0xcc>
 8026820:	1e63      	subs	r3, r4, #1
 8026822:	f815 c003 	ldrb.w	ip, [r5, r3]
 8026826:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 802682a:	d0f4      	beq.n	8026816 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 802682c:	f10d 0a10 	add.w	sl, sp, #16
 8026830:	4945      	ldr	r1, [pc, #276]	@ (8026948 <uri_to_path2+0x1e8>)
 8026832:	4650      	mov	r0, sl
 8026834:	f7fd fd5c 	bl	80242f0 <mg_str_s>
 8026838:	e89a 000c 	ldmia.w	sl, {r2, r3}
 802683c:	f106 0108 	add.w	r1, r6, #8
 8026840:	c903      	ldmia	r1, {r0, r1}
 8026842:	f7fd fe26 	bl	8024492 <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 8026846:	b1f8      	cbz	r0, 8026888 <uri_to_path2+0x128>
 8026848:	f8d8 3000 	ldr.w	r3, [r8]
 802684c:	2200      	movs	r2, #0
 802684e:	4611      	mov	r1, r2
 8026850:	4628      	mov	r0, r5
 8026852:	4798      	blx	r3
 8026854:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8026856:	4b3d      	ldr	r3, [pc, #244]	@ (802694c <uri_to_path2+0x1ec>)
 8026858:	681b      	ldr	r3, [r3, #0]
 802685a:	2b03      	cmp	r3, #3
 802685c:	dc17      	bgt.n	802688e <uri_to_path2+0x12e>
  if (flags == 0) {
 802685e:	f1ba 0f00 	cmp.w	sl, #0
 8026862:	d00b      	beq.n	802687c <uri_to_path2+0x11c>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026864:	f01a 0104 	ands.w	r1, sl, #4
 8026868:	d007      	beq.n	802687a <uri_to_path2+0x11a>
 802686a:	68f2      	ldr	r2, [r6, #12]
 802686c:	b12a      	cbz	r2, 802687a <uri_to_path2+0x11a>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 802686e:	68b3      	ldr	r3, [r6, #8]
 8026870:	1898      	adds	r0, r3, r2
 8026872:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026876:	282f      	cmp	r0, #47	@ 0x2f
 8026878:	d11b      	bne.n	80268b2 <uri_to_path2+0x152>
  } else if (flags & MG_FS_DIR) {
 802687a:	bb39      	cbnz	r1, 80268cc <uri_to_path2+0x16c>
}
 802687c:	4650      	mov	r0, sl
 802687e:	b006      	add	sp, #24
 8026880:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026884:	b002      	add	sp, #8
 8026886:	4770      	bx	lr
                                               : fs->st(path, NULL, NULL);
 8026888:	f04f 0a04 	mov.w	sl, #4
 802688c:	e7e3      	b.n	8026856 <uri_to_path2+0xf6>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 802688e:	4b30      	ldr	r3, [pc, #192]	@ (8026950 <uri_to_path2+0x1f0>)
 8026890:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 8026894:	492f      	ldr	r1, [pc, #188]	@ (8026954 <uri_to_path2+0x1f4>)
 8026896:	2004      	movs	r0, #4
 8026898:	f7ff fc9e 	bl	80261d8 <mg_log_prefix>
 802689c:	f8cd a004 	str.w	sl, [sp, #4]
 80268a0:	9500      	str	r5, [sp, #0]
 80268a2:	68b3      	ldr	r3, [r6, #8]
 80268a4:	68f2      	ldr	r2, [r6, #12]
 80268a6:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 80268aa:	482b      	ldr	r0, [pc, #172]	@ (8026958 <uri_to_path2+0x1f8>)
 80268ac:	f7fd fb42 	bl	8023f34 <mg_log>
 80268b0:	e7d5      	b.n	802685e <uri_to_path2+0xfe>
    mg_printf(c,
 80268b2:	492a      	ldr	r1, [pc, #168]	@ (802695c <uri_to_path2+0x1fc>)
 80268b4:	4648      	mov	r0, r9
 80268b6:	f7fd fb6b 	bl	8023f90 <mg_printf>
    c->is_resp = 0;
 80268ba:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 80268be:	f36f 13c7 	bfc	r3, #7, #1
 80268c2:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 80268c6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80268ca:	e7d7      	b.n	802687c <uri_to_path2+0x11c>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80268cc:	192e      	adds	r6, r5, r4
 80268ce:	1b3f      	subs	r7, r7, r4
 80268d0:	4a23      	ldr	r2, [pc, #140]	@ (8026960 <uri_to_path2+0x200>)
 80268d2:	4639      	mov	r1, r7
 80268d4:	4630      	mov	r0, r6
 80268d6:	f7fc fe83 	bl	80235e0 <mg_snprintf>
 80268da:	b130      	cbz	r0, 80268ea <uri_to_path2+0x18a>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80268dc:	f8d8 3000 	ldr.w	r3, [r8]
 80268e0:	2200      	movs	r2, #0
 80268e2:	4611      	mov	r1, r2
 80268e4:	4628      	mov	r0, r5
 80268e6:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80268e8:	bb08      	cbnz	r0, 802692e <uri_to_path2+0x1ce>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80268ea:	4a1e      	ldr	r2, [pc, #120]	@ (8026964 <uri_to_path2+0x204>)
 80268ec:	4639      	mov	r1, r7
 80268ee:	4630      	mov	r0, r6
 80268f0:	f7fc fe76 	bl	80235e0 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80268f4:	b130      	cbz	r0, 8026904 <uri_to_path2+0x1a4>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 80268f6:	f8d8 3000 	ldr.w	r3, [r8]
 80268fa:	2200      	movs	r2, #0
 80268fc:	4611      	mov	r1, r2
 80268fe:	4628      	mov	r0, r5
 8026900:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8026902:	b9b0      	cbnz	r0, 8026932 <uri_to_path2+0x1d2>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8026904:	4a18      	ldr	r2, [pc, #96]	@ (8026968 <uri_to_path2+0x208>)
 8026906:	4639      	mov	r1, r7
 8026908:	4630      	mov	r0, r6
 802690a:	f7fc fe69 	bl	80235e0 <mg_snprintf>
 802690e:	b158      	cbz	r0, 8026928 <uri_to_path2+0x1c8>
                (tmp = fs->st(path, NULL, NULL)) !=
 8026910:	f8d8 3000 	ldr.w	r3, [r8]
 8026914:	2200      	movs	r2, #0
 8026916:	4611      	mov	r1, r2
 8026918:	4628      	mov	r0, r5
 802691a:	4798      	blx	r3
                    0 &&
 802691c:	b120      	cbz	r0, 8026928 <uri_to_path2+0x1c8>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 802691e:	340b      	adds	r4, #11
 8026920:	2200      	movs	r2, #0
 8026922:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 8026924:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8026926:	e7a9      	b.n	802687c <uri_to_path2+0x11c>
      path[n] = '\0';  // Remove appended index file name
 8026928:	2300      	movs	r3, #0
 802692a:	7033      	strb	r3, [r6, #0]
 802692c:	e7a6      	b.n	802687c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 802692e:	4682      	mov	sl, r0
 8026930:	e7a4      	b.n	802687c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8026932:	4682      	mov	sl, r0
 8026934:	e7a2      	b.n	802687c <uri_to_path2+0x11c>
 8026936:	bf00      	nop
 8026938:	0803a454 	.word	0x0803a454
 802693c:	0803ae10 	.word	0x0803ae10
 8026940:	08036c70 	.word	0x08036c70
 8026944:	0803ae24 	.word	0x0803ae24
 8026948:	0803a500 	.word	0x0803a500
 802694c:	2000012c 	.word	0x2000012c
 8026950:	0803b740 	.word	0x0803b740
 8026954:	0803ad04 	.word	0x0803ad04
 8026958:	0803ae34 	.word	0x0803ae34
 802695c:	0803ae48 	.word	0x0803ae48
 8026960:	0803ae84 	.word	0x0803ae84
 8026964:	0803ae90 	.word	0x0803ae90
 8026968:	0803aea0 	.word	0x0803aea0

0802696c <uri_to_path>:
                       size_t path_size) {
 802696c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026970:	b096      	sub	sp, #88	@ 0x58
 8026972:	4606      	mov	r6, r0
 8026974:	460d      	mov	r5, r1
 8026976:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8026978:	f8d2 8014 	ldr.w	r8, [r2, #20]
 802697c:	f1b8 0f00 	cmp.w	r8, #0
 8026980:	d069      	beq.n	8026a56 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8026982:	6811      	ldr	r1, [r2, #0]
 8026984:	a80c      	add	r0, sp, #48	@ 0x30
 8026986:	f7fd fcb3 	bl	80242f0 <mg_str_s>
 802698a:	2300      	movs	r3, #0
 802698c:	930a      	str	r3, [sp, #40]	@ 0x28
 802698e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026990:	ab08      	add	r3, sp, #32
 8026992:	aa0a      	add	r2, sp, #40	@ 0x28
 8026994:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026998:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 802699c:	ab0c      	add	r3, sp, #48	@ 0x30
 802699e:	222c      	movs	r2, #44	@ 0x2c
 80269a0:	9200      	str	r2, [sp, #0]
 80269a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80269a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80269a8:	f7fd ff5f 	bl	802486a <mg_span>
 80269ac:	2800      	cmp	r0, #0
 80269ae:	d055      	beq.n	8026a5c <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 80269b0:	233d      	movs	r3, #61	@ 0x3d
 80269b2:	9300      	str	r3, [sp, #0]
 80269b4:	ab10      	add	r3, sp, #64	@ 0x40
 80269b6:	aa12      	add	r2, sp, #72	@ 0x48
 80269b8:	ac0e      	add	r4, sp, #56	@ 0x38
 80269ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80269be:	f7fd ff54 	bl	802486a <mg_span>
 80269c2:	b978      	cbnz	r0, 80269e4 <uri_to_path+0x78>
 80269c4:	ab12      	add	r3, sp, #72	@ 0x48
 80269c6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80269ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80269ce:	ac06      	add	r4, sp, #24
 80269d0:	2200      	movs	r2, #0
 80269d2:	4611      	mov	r1, r2
 80269d4:	4620      	mov	r0, r4
 80269d6:	f7fd fc97 	bl	8024308 <mg_str_n>
 80269da:	ab10      	add	r3, sp, #64	@ 0x40
 80269dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80269e0:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 80269e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80269e6:	b9c3      	cbnz	r3, 8026a1a <uri_to_path+0xae>
 80269e8:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 80269ec:	ac12      	add	r4, sp, #72	@ 0x48
 80269ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80269f2:	e889 0003 	stmia.w	r9, {r0, r1}
 80269f6:	f10d 0a18 	add.w	sl, sp, #24
 80269fa:	4922      	ldr	r1, [pc, #136]	@ (8026a84 <uri_to_path+0x118>)
 80269fc:	4650      	mov	r0, sl
 80269fe:	f7fd fc77 	bl	80242f0 <mg_str_s>
 8026a02:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8026a06:	e884 0003 	stmia.w	r4, {r0, r1}
 8026a0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8026a0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8026a10:	ab08      	add	r3, sp, #32
 8026a12:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026a16:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8026a1a:	68eb      	ldr	r3, [r5, #12]
 8026a1c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026a1e:	4293      	cmp	r3, r2
 8026a20:	d3bc      	bcc.n	802699c <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8026a22:	ac14      	add	r4, sp, #80	@ 0x50
 8026a24:	68a9      	ldr	r1, [r5, #8]
 8026a26:	4620      	mov	r0, r4
 8026a28:	f7fd fc6e 	bl	8024308 <mg_str_n>
 8026a2c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026a30:	a912      	add	r1, sp, #72	@ 0x48
 8026a32:	c903      	ldmia	r1, {r0, r1}
 8026a34:	f7fd fd2d 	bl	8024492 <mg_strcmp>
 8026a38:	2800      	cmp	r0, #0
 8026a3a:	d1af      	bne.n	802699c <uri_to_path+0x30>
    u = k, p = v;
 8026a3c:	ab0a      	add	r3, sp, #40	@ 0x28
 8026a3e:	aa12      	add	r2, sp, #72	@ 0x48
 8026a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026a44:	e883 0003 	stmia.w	r3, {r0, r1}
 8026a48:	ab08      	add	r3, sp, #32
 8026a4a:	aa10      	add	r2, sp, #64	@ 0x40
 8026a4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026a50:	e883 0003 	stmia.w	r3, {r0, r1}
 8026a54:	e7a2      	b.n	802699c <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8026a56:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 8026a88 <uri_to_path+0x11c>
 8026a5a:	e792      	b.n	8026982 <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8026a5c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026a5e:	9304      	str	r3, [sp, #16]
 8026a60:	9703      	str	r7, [sp, #12]
 8026a62:	ab01      	add	r3, sp, #4
 8026a64:	aa08      	add	r2, sp, #32
 8026a66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026a6a:	e883 0003 	stmia.w	r3, {r0, r1}
 8026a6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026a70:	9300      	str	r3, [sp, #0]
 8026a72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026a74:	4642      	mov	r2, r8
 8026a76:	4629      	mov	r1, r5
 8026a78:	4630      	mov	r0, r6
 8026a7a:	f7ff fe71 	bl	8026760 <uri_to_path2>
}
 8026a7e:	b016      	add	sp, #88	@ 0x58
 8026a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026a84:	0803a500 	.word	0x0803a500
 8026a88:	20000130 	.word	0x20000130

08026a8c <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 8026a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026a90:	b0a7      	sub	sp, #156	@ 0x9c
 8026a92:	4607      	mov	r7, r0
 8026a94:	460e      	mov	r6, r1
 8026a96:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 8026a98:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8026a9c:	2380      	movs	r3, #128	@ 0x80
 8026a9e:	9300      	str	r3, [sp, #0]
 8026aa0:	ab02      	add	r3, sp, #8
 8026aa2:	f7ff ff63 	bl	802696c <uri_to_path>
  if (flags < 0) {
 8026aa6:	2800      	cmp	r0, #0
 8026aa8:	db20      	blt.n	8026aec <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 8026aaa:	f010 0f04 	tst.w	r0, #4
 8026aae:	d120      	bne.n	8026af2 <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8026ab0:	b1b0      	cbz	r0, 8026ae0 <mg_http_serve_dir+0x54>
 8026ab2:	f1b8 0f00 	cmp.w	r8, #0
 8026ab6:	d013      	beq.n	8026ae0 <mg_http_serve_dir+0x54>
 8026ab8:	ac22      	add	r4, sp, #136	@ 0x88
 8026aba:	a902      	add	r1, sp, #8
 8026abc:	4620      	mov	r0, r4
 8026abe:	f7fd fc17 	bl	80242f0 <mg_str_s>
 8026ac2:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 8026ac6:	4641      	mov	r1, r8
 8026ac8:	4648      	mov	r0, r9
 8026aca:	f7fd fc11 	bl	80242f0 <mg_str_s>
 8026ace:	2300      	movs	r3, #0
 8026ad0:	9300      	str	r3, [sp, #0]
 8026ad2:	e899 000c 	ldmia.w	r9, {r2, r3}
 8026ad6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026ada:	f7fd fe2b 	bl	8024734 <mg_match>
 8026ade:	b978      	cbnz	r0, 8026b00 <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 8026ae0:	462b      	mov	r3, r5
 8026ae2:	aa02      	add	r2, sp, #8
 8026ae4:	4631      	mov	r1, r6
 8026ae6:	4638      	mov	r0, r7
 8026ae8:	f7fd ffe0 	bl	8024aac <mg_http_serve_file>
}
 8026aec:	b027      	add	sp, #156	@ 0x9c
 8026aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 8026af2:	ab02      	add	r3, sp, #8
 8026af4:	462a      	mov	r2, r5
 8026af6:	4631      	mov	r1, r6
 8026af8:	4638      	mov	r0, r7
 8026afa:	f7fe fbb3 	bl	8025264 <listdir>
 8026afe:	e7f5      	b.n	8026aec <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8026b00:	aa02      	add	r2, sp, #8
 8026b02:	6829      	ldr	r1, [r5, #0]
 8026b04:	4638      	mov	r0, r7
 8026b06:	f7fd fbe9 	bl	80242dc <mg_http_serve_ssi>
 8026b0a:	e7ef      	b.n	8026aec <mg_http_serve_dir+0x60>

08026b0c <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 8026b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026b0e:	b0c3      	sub	sp, #268	@ 0x10c
 8026b10:	4605      	mov	r5, r0
 8026b12:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8026b14:	688b      	ldr	r3, [r1, #8]
 8026b16:	695e      	ldr	r6, [r3, #20]
 8026b18:	b1b6      	cbz	r6, 8026b48 <printdirentry+0x3c>
  size_t size = 0;
 8026b1a:	2300      	movs	r3, #0
 8026b1c:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 8026b1e:	2200      	movs	r2, #0
 8026b20:	2300      	movs	r3, #0
 8026b22:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8026b26:	9501      	str	r5, [sp, #4]
 8026b28:	232f      	movs	r3, #47	@ 0x2f
 8026b2a:	9300      	str	r3, [sp, #0]
 8026b2c:	68e3      	ldr	r3, [r4, #12]
 8026b2e:	4a3c      	ldr	r2, [pc, #240]	@ (8026c20 <printdirentry+0x114>)
 8026b30:	2180      	movs	r1, #128	@ 0x80
 8026b32:	a81e      	add	r0, sp, #120	@ 0x78
 8026b34:	f7fc fd54 	bl	80235e0 <mg_snprintf>
 8026b38:	2880      	cmp	r0, #128	@ 0x80
 8026b3a:	d913      	bls.n	8026b64 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 8026b3c:	4b39      	ldr	r3, [pc, #228]	@ (8026c24 <printdirentry+0x118>)
 8026b3e:	681b      	ldr	r3, [r3, #0]
 8026b40:	2b00      	cmp	r3, #0
 8026b42:	dc03      	bgt.n	8026b4c <printdirentry+0x40>
}
 8026b44:	b043      	add	sp, #268	@ 0x10c
 8026b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8026b48:	4e37      	ldr	r6, [pc, #220]	@ (8026c28 <printdirentry+0x11c>)
 8026b4a:	e7e6      	b.n	8026b1a <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 8026b4c:	4b37      	ldr	r3, [pc, #220]	@ (8026c2c <printdirentry+0x120>)
 8026b4e:	f640 3248 	movw	r2, #2888	@ 0xb48
 8026b52:	4937      	ldr	r1, [pc, #220]	@ (8026c30 <printdirentry+0x124>)
 8026b54:	2001      	movs	r0, #1
 8026b56:	f7ff fb3f 	bl	80261d8 <mg_log_prefix>
 8026b5a:	4629      	mov	r1, r5
 8026b5c:	4835      	ldr	r0, [pc, #212]	@ (8026c34 <printdirentry+0x128>)
 8026b5e:	f7fd f9e9 	bl	8023f34 <mg_log>
 8026b62:	e7ef      	b.n	8026b44 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8026b64:	6833      	ldr	r3, [r6, #0]
 8026b66:	aa3e      	add	r2, sp, #248	@ 0xf8
 8026b68:	a941      	add	r1, sp, #260	@ 0x104
 8026b6a:	a81e      	add	r0, sp, #120	@ 0x78
 8026b6c:	4798      	blx	r3
 8026b6e:	b9a8      	cbnz	r0, 8026b9c <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8026b70:	4b2c      	ldr	r3, [pc, #176]	@ (8026c24 <printdirentry+0x118>)
 8026b72:	681b      	ldr	r3, [r3, #0]
 8026b74:	2b00      	cmp	r3, #0
 8026b76:	dde5      	ble.n	8026b44 <printdirentry+0x38>
 8026b78:	4b2c      	ldr	r3, [pc, #176]	@ (8026c2c <printdirentry+0x120>)
 8026b7a:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8026b7e:	492c      	ldr	r1, [pc, #176]	@ (8026c30 <printdirentry+0x124>)
 8026b80:	2001      	movs	r0, #1
 8026b82:	f7ff fb29 	bl	80261d8 <mg_log_prefix>
 8026b86:	6823      	ldr	r3, [r4, #0]
 8026b88:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8026b8a:	f007 f925 	bl	802ddd8 <__errno>
 8026b8e:	6803      	ldr	r3, [r0, #0]
 8026b90:	aa1e      	add	r2, sp, #120	@ 0x78
 8026b92:	4621      	mov	r1, r4
 8026b94:	4828      	ldr	r0, [pc, #160]	@ (8026c38 <printdirentry+0x12c>)
 8026b96:	f7fd f9cd 	bl	8023f34 <mg_log>
 8026b9a:	e7d3      	b.n	8026b44 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8026b9c:	f010 0604 	ands.w	r6, r0, #4
 8026ba0:	d02d      	beq.n	8026bfe <printdirentry+0xf2>
 8026ba2:	4f26      	ldr	r7, [pc, #152]	@ (8026c3c <printdirentry+0x130>)
    if (flags & MG_FS_DIR) {
 8026ba4:	2e00      	cmp	r6, #0
 8026ba6:	d02c      	beq.n	8026c02 <printdirentry+0xf6>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 8026ba8:	4b25      	ldr	r3, [pc, #148]	@ (8026c40 <printdirentry+0x134>)
 8026baa:	4a26      	ldr	r2, [pc, #152]	@ (8026c44 <printdirentry+0x138>)
 8026bac:	2128      	movs	r1, #40	@ 0x28
 8026bae:	a814      	add	r0, sp, #80	@ 0x50
 8026bb0:	f7fc fd16 	bl	80235e0 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8026bb4:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8026bb6:	4a24      	ldr	r2, [pc, #144]	@ (8026c48 <printdirentry+0x13c>)
 8026bb8:	2128      	movs	r1, #40	@ 0x28
 8026bba:	eb0d 0001 	add.w	r0, sp, r1
 8026bbe:	f7fc fd0f 	bl	80235e0 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8026bc2:	4628      	mov	r0, r5
 8026bc4:	f7e9 fb6c 	bl	80102a0 <strlen>
 8026bc8:	4601      	mov	r1, r0
 8026bca:	2380      	movs	r3, #128	@ 0x80
 8026bcc:	aa1e      	add	r2, sp, #120	@ 0x78
 8026bce:	4628      	mov	r0, r5
 8026bd0:	f7fd fa58 	bl	8024084 <mg_url_encode>
 8026bd4:	4602      	mov	r2, r0
    mg_printf(d->c,
 8026bd6:	6820      	ldr	r0, [r4, #0]
 8026bd8:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8026bda:	b9e6      	cbnz	r6, 8026c16 <printdirentry+0x10a>
 8026bdc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8026bde:	2400      	movs	r4, #0
 8026be0:	ae14      	add	r6, sp, #80	@ 0x50
 8026be2:	9608      	str	r6, [sp, #32]
 8026be4:	9306      	str	r3, [sp, #24]
 8026be6:	9407      	str	r4, [sp, #28]
 8026be8:	ab0a      	add	r3, sp, #40	@ 0x28
 8026bea:	9304      	str	r3, [sp, #16]
 8026bec:	9103      	str	r1, [sp, #12]
 8026bee:	9702      	str	r7, [sp, #8]
 8026bf0:	9501      	str	r5, [sp, #4]
 8026bf2:	9700      	str	r7, [sp, #0]
 8026bf4:	ab1e      	add	r3, sp, #120	@ 0x78
 8026bf6:	4915      	ldr	r1, [pc, #84]	@ (8026c4c <printdirentry+0x140>)
 8026bf8:	f7fd f9ca 	bl	8023f90 <mg_printf>
}
 8026bfc:	e7a2      	b.n	8026b44 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8026bfe:	4f14      	ldr	r7, [pc, #80]	@ (8026c50 <printdirentry+0x144>)
 8026c00:	e7d0      	b.n	8026ba4 <printdirentry+0x98>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8026c02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8026c04:	9300      	str	r3, [sp, #0]
 8026c06:	2300      	movs	r3, #0
 8026c08:	9301      	str	r3, [sp, #4]
 8026c0a:	4a12      	ldr	r2, [pc, #72]	@ (8026c54 <printdirentry+0x148>)
 8026c0c:	2128      	movs	r1, #40	@ 0x28
 8026c0e:	a814      	add	r0, sp, #80	@ 0x50
 8026c10:	f7fc fce6 	bl	80235e0 <mg_snprintf>
 8026c14:	e7ce      	b.n	8026bb4 <printdirentry+0xa8>
    mg_printf(d->c,
 8026c16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026c1a:	461c      	mov	r4, r3
 8026c1c:	e7e0      	b.n	8026be0 <printdirentry+0xd4>
 8026c1e:	bf00      	nop
 8026c20:	0803aeb0 	.word	0x0803aeb0
 8026c24:	2000012c 	.word	0x2000012c
 8026c28:	20000130 	.word	0x20000130
 8026c2c:	0803b730 	.word	0x0803b730
 8026c30:	0803ad04 	.word	0x0803ad04
 8026c34:	0803aeb8 	.word	0x0803aeb8
 8026c38:	0803aec8 	.word	0x0803aec8
 8026c3c:	0803a500 	.word	0x0803a500
 8026c40:	0803aedc 	.word	0x0803aedc
 8026c44:	0803b01c 	.word	0x0803b01c
 8026c48:	0803b2cc 	.word	0x0803b2cc
 8026c4c:	0803aeec 	.word	0x0803aeec
 8026c50:	08036c70 	.word	0x08036c70
 8026c54:	0803aee4 	.word	0x0803aee4

08026c58 <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8026c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026c5c:	b0ca      	sub	sp, #296	@ 0x128
 8026c5e:	4607      	mov	r7, r0
 8026c60:	460d      	mov	r5, r1
 8026c62:	4616      	mov	r6, r2
 8026c64:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8026c66:	2330      	movs	r3, #48	@ 0x30
 8026c68:	9343      	str	r3, [sp, #268]	@ 0x10c
 8026c6a:	2400      	movs	r4, #0
 8026c6c:	9444      	str	r4, [sp, #272]	@ 0x110
 8026c6e:	9445      	str	r4, [sp, #276]	@ 0x114
 8026c70:	9446      	str	r4, [sp, #280]	@ 0x118
 8026c72:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8026c74:	f101 0a10 	add.w	sl, r1, #16
 8026c78:	2314      	movs	r3, #20
 8026c7a:	aa43      	add	r2, sp, #268	@ 0x10c
 8026c7c:	4964      	ldr	r1, [pc, #400]	@ (8026e10 <mg_http_upload+0x1b8>)
 8026c7e:	4650      	mov	r0, sl
 8026c80:	f7fe fa23 	bl	80250ca <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8026c84:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 8026c88:	2380      	movs	r3, #128	@ 0x80
 8026c8a:	464a      	mov	r2, r9
 8026c8c:	4961      	ldr	r1, [pc, #388]	@ (8026e14 <mg_http_upload+0x1bc>)
 8026c8e:	4650      	mov	r0, sl
 8026c90:	f7fe fa1b 	bl	80250ca <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8026c94:	4622      	mov	r2, r4
 8026c96:	4621      	mov	r1, r4
 8026c98:	a843      	add	r0, sp, #268	@ 0x10c
 8026c9a:	f005 fa1f 	bl	802c0dc <strtol>
 8026c9e:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8026ca0:	f8cd 9004 	str.w	r9, [sp, #4]
 8026ca4:	232f      	movs	r3, #47	@ 0x2f
 8026ca6:	9300      	str	r3, [sp, #0]
 8026ca8:	4643      	mov	r3, r8
 8026caa:	4a5b      	ldr	r2, [pc, #364]	@ (8026e18 <mg_http_upload+0x1c0>)
 8026cac:	2180      	movs	r1, #128	@ 0x80
 8026cae:	a803      	add	r0, sp, #12
 8026cb0:	f7fc fc96 	bl	80235e0 <mg_snprintf>
  if (hm->body.len == 0) {
 8026cb4:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 8026cb8:	f1b8 0f00 	cmp.w	r8, #0
 8026cbc:	d047      	beq.n	8026d4e <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 8026cbe:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8026cc2:	2b00      	cmp	r3, #0
 8026cc4:	d04c      	beq.n	8026d60 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8026cc6:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 8026cca:	a923      	add	r1, sp, #140	@ 0x8c
 8026ccc:	4648      	mov	r0, r9
 8026cce:	f7fd fb0f 	bl	80242f0 <mg_str_s>
 8026cd2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026cd6:	f7ff fa54 	bl	8026182 <mg_path_is_sane>
 8026cda:	2800      	cmp	r0, #0
 8026cdc:	d04a      	beq.n	8026d74 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 8026cde:	2c00      	cmp	r4, #0
 8026ce0:	db54      	blt.n	8026d8c <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8026ce2:	44a0      	add	r8, r4
 8026ce4:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 8026ce6:	4598      	cmp	r8, r3
 8026ce8:	d85a      	bhi.n	8026da0 <mg_http_upload+0x148>
    size_t current_size = 0;
 8026cea:	2300      	movs	r3, #0
 8026cec:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8026cee:	4b4b      	ldr	r3, [pc, #300]	@ (8026e1c <mg_http_upload+0x1c4>)
 8026cf0:	681b      	ldr	r3, [r3, #0]
 8026cf2:	2b02      	cmp	r3, #2
 8026cf4:	dc61      	bgt.n	8026dba <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8026cf6:	b914      	cbnz	r4, 8026cfe <mg_http_upload+0xa6>
 8026cf8:	6a33      	ldr	r3, [r6, #32]
 8026cfa:	a803      	add	r0, sp, #12
 8026cfc:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8026cfe:	6833      	ldr	r3, [r6, #0]
 8026d00:	2200      	movs	r2, #0
 8026d02:	a902      	add	r1, sp, #8
 8026d04:	a803      	add	r0, sp, #12
 8026d06:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8026d08:	2c00      	cmp	r4, #0
 8026d0a:	dd02      	ble.n	8026d12 <mg_http_upload+0xba>
 8026d0c:	9b02      	ldr	r3, [sp, #8]
 8026d0e:	429c      	cmp	r4, r3
 8026d10:	d162      	bne.n	8026dd8 <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8026d12:	2202      	movs	r2, #2
 8026d14:	a903      	add	r1, sp, #12
 8026d16:	4630      	mov	r0, r6
 8026d18:	f7fb fed2 	bl	8022ac0 <mg_fs_open>
 8026d1c:	4680      	mov	r8, r0
 8026d1e:	2800      	cmp	r0, #0
 8026d20:	d066      	beq.n	8026df0 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8026d22:	6973      	ldr	r3, [r6, #20]
 8026d24:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8026d28:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 8026d2c:	6800      	ldr	r0, [r0, #0]
 8026d2e:	4798      	blx	r3
 8026d30:	4404      	add	r4, r0
      mg_fs_close(fd);
 8026d32:	4640      	mov	r0, r8
 8026d34:	f7fb fedd 	bl	8022af2 <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 8026d38:	9400      	str	r4, [sp, #0]
 8026d3a:	4b39      	ldr	r3, [pc, #228]	@ (8026e20 <mg_http_upload+0x1c8>)
 8026d3c:	4a39      	ldr	r2, [pc, #228]	@ (8026e24 <mg_http_upload+0x1cc>)
 8026d3e:	21c8      	movs	r1, #200	@ 0xc8
 8026d40:	4638      	mov	r0, r7
 8026d42:	f7fd f94b 	bl	8023fdc <mg_http_reply>
}
 8026d46:	4620      	mov	r0, r4
 8026d48:	b04a      	add	sp, #296	@ 0x128
 8026d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8026d4e:	2400      	movs	r4, #0
 8026d50:	9400      	str	r4, [sp, #0]
 8026d52:	4b33      	ldr	r3, [pc, #204]	@ (8026e20 <mg_http_upload+0x1c8>)
 8026d54:	4a33      	ldr	r2, [pc, #204]	@ (8026e24 <mg_http_upload+0x1cc>)
 8026d56:	21c8      	movs	r1, #200	@ 0xc8
 8026d58:	4638      	mov	r0, r7
 8026d5a:	f7fd f93f 	bl	8023fdc <mg_http_reply>
 8026d5e:	e7f2      	b.n	8026d46 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 8026d60:	4b31      	ldr	r3, [pc, #196]	@ (8026e28 <mg_http_upload+0x1d0>)
 8026d62:	4a32      	ldr	r2, [pc, #200]	@ (8026e2c <mg_http_upload+0x1d4>)
 8026d64:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026d68:	4638      	mov	r0, r7
 8026d6a:	f7fd f937 	bl	8023fdc <mg_http_reply>
    res = -1;
 8026d6e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8026d72:	e7e8      	b.n	8026d46 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8026d74:	ab23      	add	r3, sp, #140	@ 0x8c
 8026d76:	9300      	str	r3, [sp, #0]
 8026d78:	4b2d      	ldr	r3, [pc, #180]	@ (8026e30 <mg_http_upload+0x1d8>)
 8026d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8026e2c <mg_http_upload+0x1d4>)
 8026d7c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026d80:	4638      	mov	r0, r7
 8026d82:	f7fd f92b 	bl	8023fdc <mg_http_reply>
    res = -2;
 8026d86:	f06f 0401 	mvn.w	r4, #1
 8026d8a:	e7dc      	b.n	8026d46 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 8026d8c:	4b29      	ldr	r3, [pc, #164]	@ (8026e34 <mg_http_upload+0x1dc>)
 8026d8e:	4a27      	ldr	r2, [pc, #156]	@ (8026e2c <mg_http_upload+0x1d4>)
 8026d90:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026d94:	4638      	mov	r0, r7
 8026d96:	f7fd f921 	bl	8023fdc <mg_http_reply>
    res = -3;
 8026d9a:	f06f 0402 	mvn.w	r4, #2
 8026d9e:	e7d2      	b.n	8026d46 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8026da0:	9301      	str	r3, [sp, #4]
 8026da2:	ab03      	add	r3, sp, #12
 8026da4:	9300      	str	r3, [sp, #0]
 8026da6:	4b24      	ldr	r3, [pc, #144]	@ (8026e38 <mg_http_upload+0x1e0>)
 8026da8:	4a20      	ldr	r2, [pc, #128]	@ (8026e2c <mg_http_upload+0x1d4>)
 8026daa:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026dae:	4638      	mov	r0, r7
 8026db0:	f7fd f914 	bl	8023fdc <mg_http_reply>
    res = -4;
 8026db4:	f06f 0403 	mvn.w	r4, #3
 8026db8:	e7c5      	b.n	8026d46 <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8026dba:	4b20      	ldr	r3, [pc, #128]	@ (8026e3c <mg_http_upload+0x1e4>)
 8026dbc:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8026dc0:	491f      	ldr	r1, [pc, #124]	@ (8026e40 <mg_http_upload+0x1e8>)
 8026dc2:	2003      	movs	r0, #3
 8026dc4:	f7ff fa08 	bl	80261d8 <mg_log_prefix>
 8026dc8:	4623      	mov	r3, r4
 8026dca:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8026dce:	a903      	add	r1, sp, #12
 8026dd0:	481c      	ldr	r0, [pc, #112]	@ (8026e44 <mg_http_upload+0x1ec>)
 8026dd2:	f7fd f8af 	bl	8023f34 <mg_log>
 8026dd6:	e78e      	b.n	8026cf6 <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8026dd8:	ab03      	add	r3, sp, #12
 8026dda:	9300      	str	r3, [sp, #0]
 8026ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8026e48 <mg_http_upload+0x1f0>)
 8026dde:	4a13      	ldr	r2, [pc, #76]	@ (8026e2c <mg_http_upload+0x1d4>)
 8026de0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026de4:	4638      	mov	r0, r7
 8026de6:	f7fd f8f9 	bl	8023fdc <mg_http_reply>
      res = -5;
 8026dea:	f06f 0404 	mvn.w	r4, #4
 8026dee:	e7aa      	b.n	8026d46 <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8026df0:	f006 fff2 	bl	802ddd8 <__errno>
 8026df4:	6803      	ldr	r3, [r0, #0]
 8026df6:	9301      	str	r3, [sp, #4]
 8026df8:	ab03      	add	r3, sp, #12
 8026dfa:	9300      	str	r3, [sp, #0]
 8026dfc:	4b13      	ldr	r3, [pc, #76]	@ (8026e4c <mg_http_upload+0x1f4>)
 8026dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8026e2c <mg_http_upload+0x1d4>)
 8026e00:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026e04:	4638      	mov	r0, r7
 8026e06:	f7fd f8e9 	bl	8023fdc <mg_http_reply>
      res = -6;
 8026e0a:	f06f 0405 	mvn.w	r4, #5
 8026e0e:	e79a      	b.n	8026d46 <mg_http_upload+0xee>
 8026e10:	0803af44 	.word	0x0803af44
 8026e14:	0803af6c 	.word	0x0803af6c
 8026e18:	0803aeb0 	.word	0x0803aeb0
 8026e1c:	2000012c 	.word	0x2000012c
 8026e20:	0803af4c 	.word	0x0803af4c
 8026e24:	080365f0 	.word	0x080365f0
 8026e28:	0803af50 	.word	0x0803af50
 8026e2c:	08036c70 	.word	0x08036c70
 8026e30:	0803af60 	.word	0x0803af60
 8026e34:	0803af74 	.word	0x0803af74
 8026e38:	0803af84 	.word	0x0803af84
 8026e3c:	0803b720 	.word	0x0803b720
 8026e40:	0803ad04 	.word	0x0803ad04
 8026e44:	0803afa0 	.word	0x0803afa0
 8026e48:	0803afb8 	.word	0x0803afb8
 8026e4c:	0803afcc 	.word	0x0803afcc

08026e50 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8026e50:	b570      	push	{r4, r5, r6, lr}
 8026e52:	b082      	sub	sp, #8
 8026e54:	4604      	mov	r4, r0
 8026e56:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 8026e58:	68e1      	ldr	r1, [r4, #12]
 8026e5a:	f7f9 fbd3 	bl	8020604 <roundup>
  if (new_size == 0) {
 8026e5e:	b130      	cbz	r0, 8026e6e <mg_iobuf_resize+0x1e>
 8026e60:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 8026e62:	6863      	ldr	r3, [r4, #4]
 8026e64:	4283      	cmp	r3, r0
 8026e66:	d10f      	bne.n	8026e88 <mg_iobuf_resize+0x38>
  int ok = 1;
 8026e68:	2001      	movs	r0, #1
}
 8026e6a:	b002      	add	sp, #8
 8026e6c:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 8026e6e:	6861      	ldr	r1, [r4, #4]
 8026e70:	6820      	ldr	r0, [r4, #0]
 8026e72:	f7fe fd6f 	bl	8025954 <mg_bzero>
    free(io->buf);
 8026e76:	6820      	ldr	r0, [r4, #0]
 8026e78:	f7f3 fdf8 	bl	801aa6c <vPortFree>
    io->buf = NULL;
 8026e7c:	2300      	movs	r3, #0
 8026e7e:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 8026e80:	6063      	str	r3, [r4, #4]
 8026e82:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 8026e84:	2001      	movs	r0, #1
 8026e86:	e7f0      	b.n	8026e6a <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 8026e88:	4601      	mov	r1, r0
 8026e8a:	2001      	movs	r0, #1
 8026e8c:	f7fb fc78 	bl	8022780 <mg_calloc>
    if (p != NULL) {
 8026e90:	4606      	mov	r6, r0
 8026e92:	b198      	cbz	r0, 8026ebc <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 8026e94:	68a2      	ldr	r2, [r4, #8]
 8026e96:	42aa      	cmp	r2, r5
 8026e98:	bf28      	it	cs
 8026e9a:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8026e9c:	b11a      	cbz	r2, 8026ea6 <mg_iobuf_resize+0x56>
 8026e9e:	6821      	ldr	r1, [r4, #0]
 8026ea0:	b109      	cbz	r1, 8026ea6 <mg_iobuf_resize+0x56>
 8026ea2:	f005 fd7b 	bl	802c99c <memmove>
      mg_bzero(io->buf, io->size);
 8026ea6:	6861      	ldr	r1, [r4, #4]
 8026ea8:	6820      	ldr	r0, [r4, #0]
 8026eaa:	f7fe fd53 	bl	8025954 <mg_bzero>
      free(io->buf);
 8026eae:	6820      	ldr	r0, [r4, #0]
 8026eb0:	f7f3 fddc 	bl	801aa6c <vPortFree>
      io->buf = (unsigned char *) p;
 8026eb4:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 8026eb6:	6065      	str	r5, [r4, #4]
  int ok = 1;
 8026eb8:	2001      	movs	r0, #1
 8026eba:	e7d6      	b.n	8026e6a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8026ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8026eec <mg_iobuf_resize+0x9c>)
 8026ebe:	681b      	ldr	r3, [r3, #0]
 8026ec0:	2b00      	cmp	r3, #0
 8026ec2:	dc01      	bgt.n	8026ec8 <mg_iobuf_resize+0x78>
      ok = 0;
 8026ec4:	2000      	movs	r0, #0
  return ok;
 8026ec6:	e7d0      	b.n	8026e6a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8026ec8:	4b09      	ldr	r3, [pc, #36]	@ (8026ef0 <mg_iobuf_resize+0xa0>)
 8026eca:	f640 5244 	movw	r2, #3396	@ 0xd44
 8026ece:	4909      	ldr	r1, [pc, #36]	@ (8026ef4 <mg_iobuf_resize+0xa4>)
 8026ed0:	2001      	movs	r0, #1
 8026ed2:	f7ff f981 	bl	80261d8 <mg_log_prefix>
 8026ed6:	2600      	movs	r6, #0
 8026ed8:	9500      	str	r5, [sp, #0]
 8026eda:	9601      	str	r6, [sp, #4]
 8026edc:	6862      	ldr	r2, [r4, #4]
 8026ede:	4633      	mov	r3, r6
 8026ee0:	4805      	ldr	r0, [pc, #20]	@ (8026ef8 <mg_iobuf_resize+0xa8>)
 8026ee2:	f7fd f827 	bl	8023f34 <mg_log>
      ok = 0;
 8026ee6:	4630      	mov	r0, r6
 8026ee8:	e7bf      	b.n	8026e6a <mg_iobuf_resize+0x1a>
 8026eea:	bf00      	nop
 8026eec:	2000012c 	.word	0x2000012c
 8026ef0:	0803b710 	.word	0x0803b710
 8026ef4:	0803ad04 	.word	0x0803ad04
 8026ef8:	0803afdc 	.word	0x0803afdc

08026efc <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8026efc:	b538      	push	{r3, r4, r5, lr}
 8026efe:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8026f00:	2908      	cmp	r1, #8
 8026f02:	d004      	beq.n	8026f0e <static_cb+0x12>
 8026f04:	2902      	cmp	r1, #2
 8026f06:	d002      	beq.n	8026f0e <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 8026f08:	2909      	cmp	r1, #9
 8026f0a:	d02b      	beq.n	8026f64 <static_cb+0x68>
}
 8026f0c:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8026f0e:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8026f12:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8026f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026f18:	d31d      	bcc.n	8026f56 <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8026f1a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8026f1c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8026f1e:	4299      	cmp	r1, r3
 8026f20:	d2f4      	bcs.n	8026f0c <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8026f22:	1a5b      	subs	r3, r3, r1
 8026f24:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8026f28:	429a      	cmp	r2, r3
 8026f2a:	d300      	bcc.n	8026f2e <static_cb+0x32>
 8026f2c:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8026f2e:	686b      	ldr	r3, [r5, #4]
 8026f30:	691b      	ldr	r3, [r3, #16]
 8026f32:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8026f34:	4401      	add	r1, r0
 8026f36:	6828      	ldr	r0, [r5, #0]
 8026f38:	4798      	blx	r3
    c->send.len += n;
 8026f3a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8026f3c:	4403      	add	r3, r0
 8026f3e:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 8026f40:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8026f44:	1a1b      	subs	r3, r3, r0
 8026f46:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 8026f4a:	2800      	cmp	r0, #0
 8026f4c:	d1de      	bne.n	8026f0c <static_cb+0x10>
 8026f4e:	4620      	mov	r0, r4
 8026f50:	f7fb fddc 	bl	8022b0c <restore_http_cb>
 8026f54:	e7da      	b.n	8026f0c <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8026f56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8026f5a:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8026f5e:	f7ff ff77 	bl	8026e50 <mg_iobuf_resize>
 8026f62:	e7da      	b.n	8026f1a <static_cb+0x1e>
    restore_http_cb(c);
 8026f64:	f7fb fdd2 	bl	8022b0c <restore_http_cb>
  (void) ev_data;
 8026f68:	e7d0      	b.n	8026f0c <static_cb+0x10>

08026f6a <mg_iobuf_add>:
                    size_t len) {
 8026f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026f6e:	4604      	mov	r4, r0
 8026f70:	460f      	mov	r7, r1
 8026f72:	4690      	mov	r8, r2
 8026f74:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 8026f76:	6880      	ldr	r0, [r0, #8]
 8026f78:	68e1      	ldr	r1, [r4, #12]
 8026f7a:	4418      	add	r0, r3
 8026f7c:	f7f9 fb42 	bl	8020604 <roundup>
 8026f80:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8026f82:	4601      	mov	r1, r0
 8026f84:	4620      	mov	r0, r4
 8026f86:	f7ff ff63 	bl	8026e50 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8026f8a:	6863      	ldr	r3, [r4, #4]
 8026f8c:	42b3      	cmp	r3, r6
 8026f8e:	d000      	beq.n	8026f92 <mg_iobuf_add+0x28>
 8026f90:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8026f92:	68a2      	ldr	r2, [r4, #8]
 8026f94:	42ba      	cmp	r2, r7
 8026f96:	d812      	bhi.n	8026fbe <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8026f98:	f1b8 0f00 	cmp.w	r8, #0
 8026f9c:	d005      	beq.n	8026faa <mg_iobuf_add+0x40>
 8026f9e:	6820      	ldr	r0, [r4, #0]
 8026fa0:	462a      	mov	r2, r5
 8026fa2:	4641      	mov	r1, r8
 8026fa4:	4438      	add	r0, r7
 8026fa6:	f005 fcf9 	bl	802c99c <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8026faa:	68a3      	ldr	r3, [r4, #8]
 8026fac:	42bb      	cmp	r3, r7
 8026fae:	d200      	bcs.n	8026fb2 <mg_iobuf_add+0x48>
 8026fb0:	60a7      	str	r7, [r4, #8]
  io->len += len;
 8026fb2:	68a3      	ldr	r3, [r4, #8]
 8026fb4:	442b      	add	r3, r5
 8026fb6:	60a3      	str	r3, [r4, #8]
}
 8026fb8:	4628      	mov	r0, r5
 8026fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8026fbe:	6823      	ldr	r3, [r4, #0]
 8026fc0:	19e8      	adds	r0, r5, r7
 8026fc2:	1bd2      	subs	r2, r2, r7
 8026fc4:	19d9      	adds	r1, r3, r7
 8026fc6:	4418      	add	r0, r3
 8026fc8:	f005 fce8 	bl	802c99c <memmove>
 8026fcc:	e7e4      	b.n	8026f98 <mg_iobuf_add+0x2e>

08026fce <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 8026fce:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 8026fd0:	2100      	movs	r1, #0
 8026fd2:	f7ff ff3d 	bl	8026e50 <mg_iobuf_resize>
}
 8026fd6:	bd08      	pop	{r3, pc}

08026fd8 <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026fd8:	b538      	push	{r3, r4, r5, lr}
 8026fda:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 8026fdc:	2201      	movs	r2, #1
 8026fde:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8026fe0:	f7fb fbf3 	bl	80227ca <getpeer>
  if (c == NULL) {
 8026fe4:	b368      	cbz	r0, 8027042 <rx_udp+0x6a>
 8026fe6:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 8026fe8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8026fea:	881b      	ldrh	r3, [r3, #0]
 8026fec:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8026fee:	69e3      	ldr	r3, [r4, #28]
 8026ff0:	68db      	ldr	r3, [r3, #12]
 8026ff2:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8026ff4:	6923      	ldr	r3, [r4, #16]
 8026ff6:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8026ffa:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 8026ffe:	895b      	ldrh	r3, [r3, #10]
 8027000:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8027004:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8027006:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 802700a:	d21b      	bcs.n	8027044 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802700c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802700e:	1ad2      	subs	r2, r2, r3
 8027010:	68e1      	ldr	r1, [r4, #12]
 8027012:	428a      	cmp	r2, r1
 8027014:	d204      	bcs.n	8027020 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8027016:	4419      	add	r1, r3
 8027018:	3038      	adds	r0, #56	@ 0x38
 802701a:	f7ff ff19 	bl	8026e50 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802701e:	b1a8      	cbz	r0, 802704c <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8027020:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8027022:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8027024:	68e2      	ldr	r2, [r4, #12]
 8027026:	68a1      	ldr	r1, [r4, #8]
 8027028:	4418      	add	r0, r3
 802702a:	f006 ff0d 	bl	802de48 <memcpy>
      c->recv.len += pkt->pay.len;
 802702e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8027030:	4622      	mov	r2, r4
 8027032:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 8027036:	440b      	add	r3, r1
 8027038:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802703a:	2107      	movs	r1, #7
 802703c:	4628      	mov	r0, r5
 802703e:	f7fb fd30 	bl	8022aa2 <mg_call>
}
 8027042:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 8027044:	4904      	ldr	r1, [pc, #16]	@ (8027058 <rx_udp+0x80>)
 8027046:	f7ff f9af 	bl	80263a8 <mg_error>
 802704a:	e7fa      	b.n	8027042 <rx_udp+0x6a>
      mg_error(c, "oom");
 802704c:	4903      	ldr	r1, [pc, #12]	@ (802705c <rx_udp+0x84>)
 802704e:	4628      	mov	r0, r5
 8027050:	f7ff f9aa 	bl	80263a8 <mg_error>
 8027054:	e7f5      	b.n	8027042 <rx_udp+0x6a>
 8027056:	bf00      	nop
 8027058:	0803afe8 	.word	0x0803afe8
 802705c:	0803b004 	.word	0x0803b004

08027060 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8027060:	b538      	push	{r3, r4, r5, lr}
 8027062:	4605      	mov	r5, r0
 8027064:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8027066:	b122      	cbz	r2, 8027072 <mg_pfn_iobuf_private+0x12>
 8027068:	6889      	ldr	r1, [r1, #8]
 802706a:	3102      	adds	r1, #2
 802706c:	6863      	ldr	r3, [r4, #4]
 802706e:	4299      	cmp	r1, r3
 8027070:	d80d      	bhi.n	802708e <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 8027072:	68a3      	ldr	r3, [r4, #8]
 8027074:	1c99      	adds	r1, r3, #2
 8027076:	6862      	ldr	r2, [r4, #4]
 8027078:	4291      	cmp	r1, r2
 802707a:	d80c      	bhi.n	8027096 <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 802707c:	6822      	ldr	r2, [r4, #0]
 802707e:	1c59      	adds	r1, r3, #1
 8027080:	60a1      	str	r1, [r4, #8]
 8027082:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 8027084:	6822      	ldr	r2, [r4, #0]
 8027086:	68a3      	ldr	r3, [r4, #8]
 8027088:	2100      	movs	r1, #0
 802708a:	54d1      	strb	r1, [r2, r3]
}
 802708c:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 802708e:	4620      	mov	r0, r4
 8027090:	f7ff fede 	bl	8026e50 <mg_iobuf_resize>
 8027094:	e7ed      	b.n	8027072 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 8027096:	4293      	cmp	r3, r2
 8027098:	d2f8      	bcs.n	802708c <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 802709a:	6822      	ldr	r2, [r4, #0]
 802709c:	1c59      	adds	r1, r3, #1
 802709e:	60a1      	str	r1, [r4, #8]
 80270a0:	2100      	movs	r1, #0
 80270a2:	54d1      	strb	r1, [r2, r3]
}
 80270a4:	e7f2      	b.n	802708c <mg_pfn_iobuf_private+0x2c>

080270a6 <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 80270a6:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 80270a8:	2201      	movs	r2, #1
 80270aa:	f7ff ffd9 	bl	8027060 <mg_pfn_iobuf_private>
}
 80270ae:	bd08      	pop	{r3, pc}

080270b0 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 80270b0:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 80270b2:	2200      	movs	r2, #0
 80270b4:	f7ff ffd4 	bl	8027060 <mg_pfn_iobuf_private>
}
 80270b8:	bd08      	pop	{r3, pc}
	...

080270bc <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 80270bc:	b510      	push	{r4, lr}
 80270be:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 80270c0:	f7fb fc8e 	bl	80229e0 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80270c4:	6862      	ldr	r2, [r4, #4]
 80270c6:	e000      	b.n	80270ca <mg_close_conn+0xe>
 80270c8:	461a      	mov	r2, r3
 80270ca:	6813      	ldr	r3, [r2, #0]
 80270cc:	42a3      	cmp	r3, r4
 80270ce:	d1fb      	bne.n	80270c8 <mg_close_conn+0xc>
 80270d0:	6823      	ldr	r3, [r4, #0]
 80270d2:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80270d4:	6863      	ldr	r3, [r4, #4]
 80270d6:	689a      	ldr	r2, [r3, #8]
 80270d8:	42a2      	cmp	r2, r4
 80270da:	d020      	beq.n	802711e <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80270dc:	6863      	ldr	r3, [r4, #4]
 80270de:	691a      	ldr	r2, [r3, #16]
 80270e0:	42a2      	cmp	r2, r4
 80270e2:	d01f      	beq.n	8027124 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 80270e4:	2200      	movs	r2, #0
 80270e6:	2109      	movs	r1, #9
 80270e8:	4620      	mov	r0, r4
 80270ea:	f7fb fcda 	bl	8022aa2 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 80270ee:	4b15      	ldr	r3, [pc, #84]	@ (8027144 <mg_close_conn+0x88>)
 80270f0:	681b      	ldr	r3, [r3, #0]
 80270f2:	2b02      	cmp	r3, #2
 80270f4:	dc19      	bgt.n	802712a <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 80270f6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80270fa:	f7ff ff68 	bl	8026fce <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 80270fe:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8027102:	f7ff ff64 	bl	8026fce <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8027106:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802710a:	f7ff ff60 	bl	8026fce <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 802710e:	21b0      	movs	r1, #176	@ 0xb0
 8027110:	4620      	mov	r0, r4
 8027112:	f7fe fc1f 	bl	8025954 <mg_bzero>
  free(c);
 8027116:	4620      	mov	r0, r4
 8027118:	f7f3 fca8 	bl	801aa6c <vPortFree>
}
 802711c:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 802711e:	2200      	movs	r2, #0
 8027120:	609a      	str	r2, [r3, #8]
 8027122:	e7db      	b.n	80270dc <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8027124:	2200      	movs	r2, #0
 8027126:	611a      	str	r2, [r3, #16]
 8027128:	e7dc      	b.n	80270e4 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802712a:	4b07      	ldr	r3, [pc, #28]	@ (8027148 <mg_close_conn+0x8c>)
 802712c:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 8027130:	4906      	ldr	r1, [pc, #24]	@ (802714c <mg_close_conn+0x90>)
 8027132:	2003      	movs	r0, #3
 8027134:	f7ff f850 	bl	80261d8 <mg_log_prefix>
 8027138:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802713a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802713c:	4804      	ldr	r0, [pc, #16]	@ (8027150 <mg_close_conn+0x94>)
 802713e:	f7fc fef9 	bl	8023f34 <mg_log>
 8027142:	e7d8      	b.n	80270f6 <mg_close_conn+0x3a>
 8027144:	2000012c 	.word	0x2000012c
 8027148:	0803b6ec 	.word	0x0803b6ec
 802714c:	0803ad04 	.word	0x0803ad04
 8027150:	0803b008 	.word	0x0803b008

08027154 <close_conn>:
static void close_conn(struct mg_connection *c) {
 8027154:	b510      	push	{r4, lr}
 8027156:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8027158:	30d0      	adds	r0, #208	@ 0xd0
 802715a:	f7ff ff38 	bl	8026fce <mg_iobuf_free>
  mg_close_conn(c);
 802715e:	4620      	mov	r0, r4
 8027160:	f7ff ffac 	bl	80270bc <mg_close_conn>
}
 8027164:	bd10      	pop	{r4, pc}
	...

08027168 <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 8027168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802716c:	4606      	mov	r6, r0
 802716e:	460d      	mov	r5, r1
 8027170:	4690      	mov	r8, r2
 8027172:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8027174:	f7fc fa08 	bl	8023588 <mg_alloc_conn>
 8027178:	4604      	mov	r4, r0
 802717a:	2800      	cmp	r0, #0
 802717c:	d03f      	beq.n	80271fe <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 802717e:	4629      	mov	r1, r5
 8027180:	f7fe fe1f 	bl	8025dc2 <mg_open_listener>
 8027184:	2800      	cmp	r0, #0
 8027186:	d04d      	beq.n	8027224 <mg_listen+0xbc>
    c->is_listening = 1;
 8027188:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802718c:	f043 0301 	orr.w	r3, r3, #1
 8027190:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8027194:	2204      	movs	r2, #4
 8027196:	492f      	ldr	r1, [pc, #188]	@ (8027254 <mg_listen+0xec>)
 8027198:	4628      	mov	r0, r5
 802719a:	f005 fc4e 	bl	802ca3a <strncmp>
 802719e:	fab0 f080 	clz	r0, r0
 80271a2:	0940      	lsrs	r0, r0, #5
 80271a4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80271a8:	f360 0300 	bfi	r3, r0, #0, #1
 80271ac:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80271b0:	6833      	ldr	r3, [r6, #0]
 80271b2:	6023      	str	r3, [r4, #0]
 80271b4:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 80271b6:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 80271ba:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 80271bc:	2200      	movs	r2, #0
 80271be:	2101      	movs	r1, #1
 80271c0:	4620      	mov	r0, r4
 80271c2:	f7fb fc6e 	bl	8022aa2 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 80271c6:	4628      	mov	r0, r5
 80271c8:	f7fe fb16 	bl	80257f8 <mg_url_is_ssl>
 80271cc:	b128      	cbz	r0, 80271da <mg_listen+0x72>
 80271ce:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80271d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80271d6:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 80271da:	4b1f      	ldr	r3, [pc, #124]	@ (8027258 <mg_listen+0xf0>)
 80271dc:	681b      	ldr	r3, [r3, #0]
 80271de:	2b02      	cmp	r3, #2
 80271e0:	dd11      	ble.n	8027206 <mg_listen+0x9e>
 80271e2:	4b1e      	ldr	r3, [pc, #120]	@ (802725c <mg_listen+0xf4>)
 80271e4:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 80271e8:	491d      	ldr	r1, [pc, #116]	@ (8027260 <mg_listen+0xf8>)
 80271ea:	2003      	movs	r0, #3
 80271ec:	f7fe fff4 	bl	80261d8 <mg_log_prefix>
 80271f0:	462b      	mov	r3, r5
 80271f2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80271f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80271f6:	481b      	ldr	r0, [pc, #108]	@ (8027264 <mg_listen+0xfc>)
 80271f8:	f7fc fe9c 	bl	8023f34 <mg_log>
  return c;
 80271fc:	e003      	b.n	8027206 <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 80271fe:	4b16      	ldr	r3, [pc, #88]	@ (8027258 <mg_listen+0xf0>)
 8027200:	681b      	ldr	r3, [r3, #0]
 8027202:	2b00      	cmp	r3, #0
 8027204:	dc02      	bgt.n	802720c <mg_listen+0xa4>
}
 8027206:	4620      	mov	r0, r4
 8027208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 802720c:	4b13      	ldr	r3, [pc, #76]	@ (802725c <mg_listen+0xf4>)
 802720e:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 8027212:	4913      	ldr	r1, [pc, #76]	@ (8027260 <mg_listen+0xf8>)
 8027214:	2001      	movs	r0, #1
 8027216:	f7fe ffdf 	bl	80261d8 <mg_log_prefix>
 802721a:	4629      	mov	r1, r5
 802721c:	4812      	ldr	r0, [pc, #72]	@ (8027268 <mg_listen+0x100>)
 802721e:	f7fc fe89 	bl	8023f34 <mg_log>
 8027222:	e7f0      	b.n	8027206 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8027224:	4b0c      	ldr	r3, [pc, #48]	@ (8027258 <mg_listen+0xf0>)
 8027226:	681b      	ldr	r3, [r3, #0]
 8027228:	2b00      	cmp	r3, #0
 802722a:	dc04      	bgt.n	8027236 <mg_listen+0xce>
    free(c);
 802722c:	4620      	mov	r0, r4
 802722e:	f7f3 fc1d 	bl	801aa6c <vPortFree>
    c = NULL;
 8027232:	2400      	movs	r4, #0
 8027234:	e7e7      	b.n	8027206 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8027236:	4b09      	ldr	r3, [pc, #36]	@ (802725c <mg_listen+0xf4>)
 8027238:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 802723c:	4908      	ldr	r1, [pc, #32]	@ (8027260 <mg_listen+0xf8>)
 802723e:	2001      	movs	r0, #1
 8027240:	f7fe ffca 	bl	80261d8 <mg_log_prefix>
 8027244:	f006 fdc8 	bl	802ddd8 <__errno>
 8027248:	6802      	ldr	r2, [r0, #0]
 802724a:	4629      	mov	r1, r5
 802724c:	4807      	ldr	r0, [pc, #28]	@ (802726c <mg_listen+0x104>)
 802724e:	f7fc fe71 	bl	8023f34 <mg_log>
 8027252:	e7eb      	b.n	802722c <mg_listen+0xc4>
 8027254:	0803b038 	.word	0x0803b038
 8027258:	2000012c 	.word	0x2000012c
 802725c:	0803b6d4 	.word	0x0803b6d4
 8027260:	0803ad04 	.word	0x0803ad04
 8027264:	0803ad60 	.word	0x0803ad60
 8027268:	0803b018 	.word	0x0803b018
 802726c:	0803b020 	.word	0x0803b020

08027270 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 8027270:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8027272:	f7ff ff79 	bl	8027168 <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 8027276:	b110      	cbz	r0, 802727e <mg_http_listen+0xe>
 8027278:	4b01      	ldr	r3, [pc, #4]	@ (8027280 <mg_http_listen+0x10>)
 802727a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 802727e:	bd08      	pop	{r3, pc}
 8027280:	0802645d 	.word	0x0802645d

08027284 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 8027284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027288:	4605      	mov	r5, r0
 802728a:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802728c:	6843      	ldr	r3, [r0, #4]
 802728e:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8027290:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8027294:	f013 0301 	ands.w	r3, r3, #1
 8027298:	d02c      	beq.n	80272f4 <trim_len+0x70>
 802729a:	2608      	movs	r6, #8
  size_t max_headers_len =
 802729c:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 80272a0:	bb53      	cbnz	r3, 80272f8 <trim_len+0x74>
 80272a2:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 80272a4:	eb08 0304 	add.w	r3, r8, r4
 80272a8:	69ba      	ldr	r2, [r7, #24]
 80272aa:	4293      	cmp	r3, r2
 80272ac:	d901      	bls.n	80272b2 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 80272ae:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 80272b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80272b6:	42b3      	cmp	r3, r6
 80272b8:	d205      	bcs.n	80272c6 <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80272ba:	4b1c      	ldr	r3, [pc, #112]	@ (802732c <trim_len+0xa8>)
 80272bc:	681b      	ldr	r3, [r3, #0]
 80272be:	2b00      	cmp	r3, #0
 80272c0:	dc1c      	bgt.n	80272fc <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 80272c2:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 80272c6:	eb04 0308 	add.w	r3, r4, r8
 80272ca:	3b0e      	subs	r3, #14
 80272cc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80272d0:	4293      	cmp	r3, r2
 80272d2:	d90c      	bls.n	80272ee <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 80272d4:	eba2 0208 	sub.w	r2, r2, r8
 80272d8:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 80272dc:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80272e0:	f013 0f01 	tst.w	r3, #1
 80272e4:	d003      	beq.n	80272ee <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 80272e6:	4b11      	ldr	r3, [pc, #68]	@ (802732c <trim_len+0xa8>)
 80272e8:	681b      	ldr	r3, [r3, #0]
 80272ea:	2b00      	cmp	r3, #0
 80272ec:	dc12      	bgt.n	8027314 <trim_len+0x90>
}
 80272ee:	4620      	mov	r0, r4
 80272f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 80272f4:	263c      	movs	r6, #60	@ 0x3c
 80272f6:	e7d1      	b.n	802729c <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 80272f8:	2644      	movs	r6, #68	@ 0x44
 80272fa:	e7d3      	b.n	80272a4 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80272fc:	4b0c      	ldr	r3, [pc, #48]	@ (8027330 <trim_len+0xac>)
 80272fe:	f241 528c 	movw	r2, #5516	@ 0x158c
 8027302:	490c      	ldr	r1, [pc, #48]	@ (8027334 <trim_len+0xb0>)
 8027304:	2001      	movs	r0, #1
 8027306:	f7fe ff67 	bl	80261d8 <mg_log_prefix>
 802730a:	4631      	mov	r1, r6
 802730c:	480a      	ldr	r0, [pc, #40]	@ (8027338 <trim_len+0xb4>)
 802730e:	f7fc fe11 	bl	8023f34 <mg_log>
 8027312:	e7d6      	b.n	80272c2 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8027314:	4b06      	ldr	r3, [pc, #24]	@ (8027330 <trim_len+0xac>)
 8027316:	f241 5293 	movw	r2, #5523	@ 0x1593
 802731a:	4906      	ldr	r1, [pc, #24]	@ (8027334 <trim_len+0xb0>)
 802731c:	2001      	movs	r0, #1
 802731e:	f7fe ff5b 	bl	80261d8 <mg_log_prefix>
 8027322:	4806      	ldr	r0, [pc, #24]	@ (802733c <trim_len+0xb8>)
 8027324:	f7fc fe06 	bl	8023f34 <mg_log>
 8027328:	e7e1      	b.n	80272ee <trim_len+0x6a>
 802732a:	bf00      	nop
 802732c:	2000012c 	.word	0x2000012c
 8027330:	0803b6c8 	.word	0x0803b6c8
 8027334:	0803ad04 	.word	0x0803ad04
 8027338:	0803b040 	.word	0x0803b040
 802733c:	0803b06c 	.word	0x0803b06c

08027340 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8027340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027342:	b085      	sub	sp, #20
 8027344:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027346:	6843      	ldr	r3, [r0, #4]
 8027348:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802734a:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 802734c:	68ab      	ldr	r3, [r5, #8]
 802734e:	b123      	cbz	r3, 802735a <mg_send+0x1a>
 8027350:	460e      	mov	r6, r1
 8027352:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8027356:	2b03      	cmp	r3, #3
 8027358:	d006      	beq.n	8027368 <mg_send+0x28>
    mg_error(c, "net down");
 802735a:	4913      	ldr	r1, [pc, #76]	@ (80273a8 <mg_send+0x68>)
 802735c:	4620      	mov	r0, r4
 802735e:	f7ff f823 	bl	80263a8 <mg_error>
  bool res = false;
 8027362:	2000      	movs	r0, #0
}
 8027364:	b005      	add	sp, #20
 8027366:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 8027368:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 802736c:	f013 0f01 	tst.w	r3, #1
 8027370:	d010      	beq.n	8027394 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 8027372:	4611      	mov	r1, r2
 8027374:	f7ff ff86 	bl	8027284 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8027378:	68aa      	ldr	r2, [r5, #8]
 802737a:	9003      	str	r0, [sp, #12]
 802737c:	9602      	str	r6, [sp, #8]
 802737e:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027380:	9301      	str	r3, [sp, #4]
 8027382:	9700      	str	r7, [sp, #0]
 8027384:	8b23      	ldrh	r3, [r4, #24]
 8027386:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 802738a:	4628      	mov	r0, r5
 802738c:	f7fe fc97 	bl	8025cbe <tx_udp>
    res = true;
 8027390:	2001      	movs	r0, #1
 8027392:	e7e7      	b.n	8027364 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8027394:	4613      	mov	r3, r2
 8027396:	460a      	mov	r2, r1
 8027398:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 802739a:	3048      	adds	r0, #72	@ 0x48
 802739c:	f7ff fde5 	bl	8026f6a <mg_iobuf_add>
 80273a0:	3800      	subs	r0, #0
 80273a2:	bf18      	it	ne
 80273a4:	2001      	movne	r0, #1
 80273a6:	e7dd      	b.n	8027364 <mg_send+0x24>
 80273a8:	0803b098 	.word	0x0803b098

080273ac <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 80273ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80273ae:	b0c5      	sub	sp, #276	@ 0x114
 80273b0:	4606      	mov	r6, r0
 80273b2:	460d      	mov	r5, r1
 80273b4:	4614      	mov	r4, r2
 80273b6:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 80273b8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80273bc:	2100      	movs	r1, #0
 80273be:	a801      	add	r0, sp, #4
 80273c0:	f005 fb06 	bl	802c9d0 <memset>
  pkt.header.txnid = mg_htons(txnid);
 80273c4:	4620      	mov	r0, r4
 80273c6:	f7fe fbc5 	bl	8025b54 <mg_ntohs>
 80273ca:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 80273ce:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80273d2:	f7fe fbbf 	bl	8025b54 <mg_ntohs>
 80273d6:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 80273da:	2001      	movs	r0, #1
 80273dc:	f7fe fbba 	bl	8025b54 <mg_ntohs>
 80273e0:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80273e4:	f04f 0c00 	mov.w	ip, #0
 80273e8:	4664      	mov	r4, ip
 80273ea:	e015      	b.n	8027418 <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 80273ec:	eba4 020c 	sub.w	r2, r4, ip
 80273f0:	ab01      	add	r3, sp, #4
 80273f2:	4463      	add	r3, ip
 80273f4:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 80273f6:	f10c 0309 	add.w	r3, ip, #9
 80273fa:	aa01      	add	r2, sp, #4
 80273fc:	18d0      	adds	r0, r2, r3
 80273fe:	6829      	ldr	r1, [r5, #0]
 8027400:	eba4 020c 	sub.w	r2, r4, ip
 8027404:	4461      	add	r1, ip
 8027406:	3004      	adds	r0, #4
 8027408:	f006 fd1e 	bl	802de48 <memcpy>
      n = i + 1;
 802740c:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 8027410:	686a      	ldr	r2, [r5, #4]
 8027412:	42a2      	cmp	r2, r4
 8027414:	d90a      	bls.n	802742c <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8027416:	3401      	adds	r4, #1
 8027418:	2cfa      	cmp	r4, #250	@ 0xfa
 802741a:	d807      	bhi.n	802742c <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 802741c:	682b      	ldr	r3, [r5, #0]
 802741e:	5d1a      	ldrb	r2, [r3, r4]
 8027420:	2a2e      	cmp	r2, #46	@ 0x2e
 8027422:	d0e3      	beq.n	80273ec <mg_dns_send+0x40>
 8027424:	686b      	ldr	r3, [r5, #4]
 8027426:	42a3      	cmp	r3, r4
 8027428:	d8f2      	bhi.n	8027410 <mg_dns_send+0x64>
 802742a:	e7df      	b.n	80273ec <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 802742c:	f10c 0308 	add.w	r3, ip, #8
 8027430:	aa01      	add	r2, sp, #4
 8027432:	4413      	add	r3, r2
 8027434:	4a0a      	ldr	r2, [pc, #40]	@ (8027460 <mg_dns_send+0xb4>)
 8027436:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 802743a:	6058      	str	r0, [r3, #4]
 802743c:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 8027440:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8027442:	b12f      	cbz	r7, 8027450 <mg_dns_send+0xa4>
 8027444:	f10c 0302 	add.w	r3, ip, #2
 8027448:	aa01      	add	r2, sp, #4
 802744a:	4413      	add	r3, r2
 802744c:	221c      	movs	r2, #28
 802744e:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8027450:	f10c 0211 	add.w	r2, ip, #17
 8027454:	a901      	add	r1, sp, #4
 8027456:	4630      	mov	r0, r6
 8027458:	f7ff ff72 	bl	8027340 <mg_send>
}
 802745c:	b045      	add	sp, #276	@ 0x114
 802745e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027460:	08035d1c 	.word	0x08035d1c

08027464 <mg_mqtt_send_header>:
                         uint32_t len) {
 8027464:	b500      	push	{lr}
 8027466:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8027468:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 802746c:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8027470:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 8027474:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8027478:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 802747a:	2b7f      	cmp	r3, #127	@ 0x7f
 802747c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8027480:	d90e      	bls.n	80274a0 <mg_mqtt_send_header+0x3c>
 8027482:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8027486:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 802748a:	f10d 0105 	add.w	r1, sp, #5
 802748e:	428a      	cmp	r2, r1
 8027490:	d3f0      	bcc.n	8027474 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 8027492:	4669      	mov	r1, sp
 8027494:	1a52      	subs	r2, r2, r1
 8027496:	f7ff ff53 	bl	8027340 <mg_send>
}
 802749a:	b003      	add	sp, #12
 802749c:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 80274a0:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 80274a2:	e7f6      	b.n	8027492 <mg_mqtt_send_header+0x2e>

080274a4 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 80274a4:	b500      	push	{lr}
 80274a6:	b083      	sub	sp, #12
 80274a8:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 80274aa:	2204      	movs	r2, #4
 80274ac:	eb0d 0102 	add.w	r1, sp, r2
 80274b0:	f7ff ff46 	bl	8027340 <mg_send>
}
 80274b4:	b003      	add	sp, #12
 80274b6:	f85d fb04 	ldr.w	pc, [sp], #4

080274ba <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 80274ba:	b500      	push	{lr}
 80274bc:	b083      	sub	sp, #12
 80274be:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 80274c2:	2202      	movs	r2, #2
 80274c4:	f10d 0106 	add.w	r1, sp, #6
 80274c8:	f7ff ff3a 	bl	8027340 <mg_send>
}
 80274cc:	b003      	add	sp, #12
 80274ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080274d4 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 80274d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80274d8:	b083      	sub	sp, #12
 80274da:	4606      	mov	r6, r0
 80274dc:	460f      	mov	r7, r1
 80274de:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 80274e0:	4611      	mov	r1, r2
 80274e2:	4638      	mov	r0, r7
 80274e4:	f7f9 fdda 	bl	802109c <get_properties_length>
 80274e8:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 80274ea:	2500      	movs	r5, #0
 80274ec:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 80274ee:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 80274f0:	4668      	mov	r0, sp
 80274f2:	f7f9 fd84 	bl	8020ffe <encode_varint>
 80274f6:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 80274f8:	4669      	mov	r1, sp
 80274fa:	4630      	mov	r0, r6
 80274fc:	f7ff ff20 	bl	8027340 <mg_send>
  for (i = 0; i < nprops; i++) {
 8027500:	e018      	b.n	8027534 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8027502:	89a0      	ldrh	r0, [r4, #12]
 8027504:	f7fe fb26 	bl	8025b54 <mg_ntohs>
 8027508:	4601      	mov	r1, r0
 802750a:	4630      	mov	r0, r6
 802750c:	f7ff ffd5 	bl	80274ba <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 8027510:	68e2      	ldr	r2, [r4, #12]
 8027512:	68a1      	ldr	r1, [r4, #8]
 8027514:	4630      	mov	r0, r6
 8027516:	f7ff ff13 	bl	8027340 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 802751a:	8aa0      	ldrh	r0, [r4, #20]
 802751c:	f7fe fb1a 	bl	8025b54 <mg_ntohs>
 8027520:	4601      	mov	r1, r0
 8027522:	4630      	mov	r0, r6
 8027524:	f7ff ffc9 	bl	80274ba <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8027528:	6962      	ldr	r2, [r4, #20]
 802752a:	6921      	ldr	r1, [r4, #16]
 802752c:	4630      	mov	r0, r6
 802752e:	f7ff ff07 	bl	8027340 <mg_send>
  for (i = 0; i < nprops; i++) {
 8027532:	3501      	adds	r5, #1
 8027534:	454d      	cmp	r5, r9
 8027536:	d25b      	bcs.n	80275f0 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8027538:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 802753c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8027540:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8027544:	2201      	movs	r2, #1
 8027546:	4621      	mov	r1, r4
 8027548:	4630      	mov	r0, r6
 802754a:	f7ff fef9 	bl	8027340 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802754e:	f817 0008 	ldrb.w	r0, [r7, r8]
 8027552:	f7f9 fd8f 	bl	8021074 <mqtt_prop_type_by_id>
 8027556:	2806      	cmp	r0, #6
 8027558:	d8eb      	bhi.n	8027532 <mg_send_mqtt_properties+0x5e>
 802755a:	a301      	add	r3, pc, #4	@ (adr r3, 8027560 <mg_send_mqtt_properties+0x8c>)
 802755c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8027560:	0802757d 	.word	0x0802757d
 8027564:	080275a9 	.word	0x080275a9
 8027568:	08027503 	.word	0x08027503
 802756c:	080275c3 	.word	0x080275c3
 8027570:	080275dd 	.word	0x080275dd
 8027574:	08027599 	.word	0x08027599
 8027578:	08027589 	.word	0x08027589
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 802757c:	2201      	movs	r2, #1
 802757e:	1d21      	adds	r1, r4, #4
 8027580:	4630      	mov	r0, r6
 8027582:	f7ff fedd 	bl	8027340 <mg_send>
        break;
 8027586:	e7d4      	b.n	8027532 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8027588:	88a0      	ldrh	r0, [r4, #4]
 802758a:	f7fe fae3 	bl	8025b54 <mg_ntohs>
 802758e:	4601      	mov	r1, r0
 8027590:	4630      	mov	r0, r6
 8027592:	f7ff ff92 	bl	80274ba <mg_send_u16>
        break;
 8027596:	e7cc      	b.n	8027532 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 8027598:	6860      	ldr	r0, [r4, #4]
 802759a:	f7fe fa43 	bl	8025a24 <mg_ntohl>
 802759e:	4601      	mov	r1, r0
 80275a0:	4630      	mov	r0, r6
 80275a2:	f7ff ff7f 	bl	80274a4 <mg_send_u32>
        break;
 80275a6:	e7c4      	b.n	8027532 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80275a8:	8aa0      	ldrh	r0, [r4, #20]
 80275aa:	f7fe fad3 	bl	8025b54 <mg_ntohs>
 80275ae:	4601      	mov	r1, r0
 80275b0:	4630      	mov	r0, r6
 80275b2:	f7ff ff82 	bl	80274ba <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80275b6:	6962      	ldr	r2, [r4, #20]
 80275b8:	6921      	ldr	r1, [r4, #16]
 80275ba:	4630      	mov	r0, r6
 80275bc:	f7ff fec0 	bl	8027340 <mg_send>
        break;
 80275c0:	e7b7      	b.n	8027532 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80275c2:	8aa0      	ldrh	r0, [r4, #20]
 80275c4:	f7fe fac6 	bl	8025b54 <mg_ntohs>
 80275c8:	4601      	mov	r1, r0
 80275ca:	4630      	mov	r0, r6
 80275cc:	f7ff ff75 	bl	80274ba <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80275d0:	6962      	ldr	r2, [r4, #20]
 80275d2:	6921      	ldr	r1, [r4, #16]
 80275d4:	4630      	mov	r0, r6
 80275d6:	f7ff feb3 	bl	8027340 <mg_send>
        break;
 80275da:	e7aa      	b.n	8027532 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 80275dc:	6861      	ldr	r1, [r4, #4]
 80275de:	a801      	add	r0, sp, #4
 80275e0:	f7f9 fd0d 	bl	8020ffe <encode_varint>
 80275e4:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 80275e6:	a901      	add	r1, sp, #4
 80275e8:	4630      	mov	r0, r6
 80275ea:	f7ff fea9 	bl	8027340 <mg_send>
        break;
 80275ee:	e7a0      	b.n	8027532 <mg_send_mqtt_properties+0x5e>
}
 80275f0:	b003      	add	sp, #12
 80275f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80275f6:	bf00      	nop

080275f8 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80275f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80275fa:	b08b      	sub	sp, #44	@ 0x2c
 80275fc:	4605      	mov	r5, r0
 80275fe:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 8027600:	ab02      	add	r3, sp, #8
 8027602:	f101 0210 	add.w	r2, r1, #16
 8027606:	e892 0003 	ldmia.w	r2, {r0, r1}
 802760a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 802760e:	2300      	movs	r3, #0
 8027610:	f88d 3000 	strb.w	r3, [sp]
 8027614:	2204      	movs	r2, #4
 8027616:	f88d 2001 	strb.w	r2, [sp, #1]
 802761a:	224d      	movs	r2, #77	@ 0x4d
 802761c:	f88d 2002 	strb.w	r2, [sp, #2]
 8027620:	2251      	movs	r2, #81	@ 0x51
 8027622:	f88d 2003 	strb.w	r2, [sp, #3]
 8027626:	2254      	movs	r2, #84	@ 0x54
 8027628:	f88d 2004 	strb.w	r2, [sp, #4]
 802762c:	f88d 2005 	strb.w	r2, [sp, #5]
 8027630:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8027634:	f88d 2006 	strb.w	r2, [sp, #6]
 8027638:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 802763c:	2900      	cmp	r1, #0
 802763e:	f000 809f 	beq.w	8027780 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8027642:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8027646:	b913      	cbnz	r3, 802764e <mg_mqtt_login+0x56>
 8027648:	2304      	movs	r3, #4
 802764a:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 802764e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8027652:	2b05      	cmp	r3, #5
 8027654:	bf14      	ite	ne
 8027656:	2300      	movne	r3, #0
 8027658:	2301      	moveq	r3, #1
 802765a:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 802765e:	f363 0282 	bfi	r2, r3, #2, #1
 8027662:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8027666:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 802766a:	00d2      	lsls	r2, r2, #3
 802766c:	f002 0218 	and.w	r2, r2, #24
 8027670:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 8027674:	6863      	ldr	r3, [r4, #4]
 8027676:	2b00      	cmp	r3, #0
 8027678:	f000 808e 	beq.w	8027798 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 802767c:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 802767e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8027682:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 8027686:	68e2      	ldr	r2, [r4, #12]
 8027688:	b13a      	cbz	r2, 802769a <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 802768a:	441a      	add	r2, r3
 802768c:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 802768e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027692:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8027696:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 802769a:	69e2      	ldr	r2, [r4, #28]
 802769c:	b14a      	cbz	r2, 80276b2 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 802769e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80276a0:	440a      	add	r2, r1
 80276a2:	441a      	add	r2, r3
 80276a4:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 80276a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80276aa:	f042 0204 	orr.w	r2, r2, #4
 80276ae:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 80276b2:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 80276b6:	b90a      	cbnz	r2, 80276bc <mg_mqtt_login+0xc4>
 80276b8:	9a03      	ldr	r2, [sp, #12]
 80276ba:	b92a      	cbnz	r2, 80276c8 <mg_mqtt_login+0xd0>
 80276bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80276c0:	f042 0202 	orr.w	r2, r2, #2
 80276c4:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 80276c8:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 80276cc:	b12a      	cbz	r2, 80276da <mg_mqtt_login+0xe2>
 80276ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80276d2:	f042 0220 	orr.w	r2, r2, #32
 80276d6:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 80276da:	9f03      	ldr	r7, [sp, #12]
 80276dc:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 80276de:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80276e2:	f013 0f04 	tst.w	r3, #4
 80276e6:	d159      	bne.n	802779c <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 80276e8:	4633      	mov	r3, r6
 80276ea:	2200      	movs	r2, #0
 80276ec:	2101      	movs	r1, #1
 80276ee:	4628      	mov	r0, r5
 80276f0:	f7ff feb8 	bl	8027464 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 80276f4:	2208      	movs	r2, #8
 80276f6:	4669      	mov	r1, sp
 80276f8:	4628      	mov	r0, r5
 80276fa:	f7ff fe21 	bl	8027340 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 80276fe:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8027700:	f7fe fa28 	bl	8025b54 <mg_ntohs>
 8027704:	4601      	mov	r1, r0
 8027706:	4628      	mov	r0, r5
 8027708:	f7ff fed7 	bl	80274ba <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802770c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027710:	f013 0f04 	tst.w	r3, #4
 8027714:	d152      	bne.n	80277bc <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8027716:	b2b8      	uxth	r0, r7
 8027718:	f7fe fa1c 	bl	8025b54 <mg_ntohs>
 802771c:	4601      	mov	r1, r0
 802771e:	4628      	mov	r0, r5
 8027720:	f7ff fecb 	bl	80274ba <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8027724:	463a      	mov	r2, r7
 8027726:	9902      	ldr	r1, [sp, #8]
 8027728:	4628      	mov	r0, r5
 802772a:	f7ff fe09 	bl	8027340 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 802772e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8027732:	f013 0f04 	tst.w	r3, #4
 8027736:	d01c      	beq.n	8027772 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 8027738:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 802773c:	f013 0f04 	tst.w	r3, #4
 8027740:	d142      	bne.n	80277c8 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027742:	8ba0      	ldrh	r0, [r4, #28]
 8027744:	f7fe fa06 	bl	8025b54 <mg_ntohs>
 8027748:	4601      	mov	r1, r0
 802774a:	4628      	mov	r0, r5
 802774c:	f7ff feb5 	bl	80274ba <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8027750:	69e2      	ldr	r2, [r4, #28]
 8027752:	69a1      	ldr	r1, [r4, #24]
 8027754:	4628      	mov	r0, r5
 8027756:	f7ff fdf3 	bl	8027340 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 802775a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 802775c:	f7fe f9fa 	bl	8025b54 <mg_ntohs>
 8027760:	4601      	mov	r1, r0
 8027762:	4628      	mov	r0, r5
 8027764:	f7ff fea9 	bl	80274ba <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8027768:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802776a:	6a21      	ldr	r1, [r4, #32]
 802776c:	4628      	mov	r0, r5
 802776e:	f7ff fde7 	bl	8027340 <mg_send>
  if (opts->user.len > 0) {
 8027772:	6860      	ldr	r0, [r4, #4]
 8027774:	bb70      	cbnz	r0, 80277d4 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 8027776:	68e0      	ldr	r0, [r4, #12]
 8027778:	2800      	cmp	r0, #0
 802777a:	d138      	bne.n	80277ee <mg_mqtt_login+0x1f6>
}
 802777c:	b00b      	add	sp, #44	@ 0x2c
 802777e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 8027780:	2114      	movs	r1, #20
 8027782:	a804      	add	r0, sp, #16
 8027784:	f7fe f922 	bl	80259cc <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 8027788:	2300      	movs	r3, #0
 802778a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 802778e:	a904      	add	r1, sp, #16
 8027790:	a802      	add	r0, sp, #8
 8027792:	f7fc fdad 	bl	80242f0 <mg_str_s>
 8027796:	e754      	b.n	8027642 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 8027798:	230c      	movs	r3, #12
 802779a:	e774      	b.n	8027686 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 802779c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802779e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80277a0:	f7f9 fcc0 	bl	8021124 <get_props_size>
 80277a4:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 80277a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80277aa:	f013 0f04 	tst.w	r3, #4
 80277ae:	d09b      	beq.n	80276e8 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 80277b0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80277b2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80277b4:	f7f9 fcb6 	bl	8021124 <get_props_size>
 80277b8:	4406      	add	r6, r0
 80277ba:	e795      	b.n	80276e8 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80277bc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80277be:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80277c0:	4628      	mov	r0, r5
 80277c2:	f7ff fe87 	bl	80274d4 <mg_send_mqtt_properties>
 80277c6:	e7a6      	b.n	8027716 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 80277c8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80277ca:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80277cc:	4628      	mov	r0, r5
 80277ce:	f7ff fe81 	bl	80274d4 <mg_send_mqtt_properties>
 80277d2:	e7b6      	b.n	8027742 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 80277d4:	b280      	uxth	r0, r0
 80277d6:	f7fe f9bd 	bl	8025b54 <mg_ntohs>
 80277da:	4601      	mov	r1, r0
 80277dc:	4628      	mov	r0, r5
 80277de:	f7ff fe6c 	bl	80274ba <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 80277e2:	6862      	ldr	r2, [r4, #4]
 80277e4:	6821      	ldr	r1, [r4, #0]
 80277e6:	4628      	mov	r0, r5
 80277e8:	f7ff fdaa 	bl	8027340 <mg_send>
 80277ec:	e7c3      	b.n	8027776 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 80277ee:	b280      	uxth	r0, r0
 80277f0:	f7fe f9b0 	bl	8025b54 <mg_ntohs>
 80277f4:	4601      	mov	r1, r0
 80277f6:	4628      	mov	r0, r5
 80277f8:	f7ff fe5f 	bl	80274ba <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 80277fc:	68e2      	ldr	r2, [r4, #12]
 80277fe:	68a1      	ldr	r1, [r4, #8]
 8027800:	4628      	mov	r0, r5
 8027802:	f7ff fd9d 	bl	8027340 <mg_send>
}
 8027806:	e7b9      	b.n	802777c <mg_mqtt_login+0x184>

08027808 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027808:	b530      	push	{r4, r5, lr}
 802780a:	b083      	sub	sp, #12
 802780c:	4604      	mov	r4, r0
 802780e:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 8027810:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8027814:	f003 0303 	and.w	r3, r3, #3
 8027818:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802781c:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8027820:	f013 0f04 	tst.w	r3, #4
 8027824:	d133      	bne.n	802788e <mg_mqtt_sub+0x86>
 8027826:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8027828:	69eb      	ldr	r3, [r5, #28]
 802782a:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 802782c:	3305      	adds	r3, #5
 802782e:	2202      	movs	r2, #2
 8027830:	2108      	movs	r1, #8
 8027832:	4620      	mov	r0, r4
 8027834:	f7ff fe16 	bl	8027464 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8027838:	6862      	ldr	r2, [r4, #4]
 802783a:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 802783c:	3301      	adds	r3, #1
 802783e:	b29b      	uxth	r3, r3
 8027840:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8027842:	b91b      	cbnz	r3, 802784c <mg_mqtt_sub+0x44>
 8027844:	6862      	ldr	r2, [r4, #4]
 8027846:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027848:	3301      	adds	r3, #1
 802784a:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 802784c:	6863      	ldr	r3, [r4, #4]
 802784e:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8027850:	f7fe f980 	bl	8025b54 <mg_ntohs>
 8027854:	4601      	mov	r1, r0
 8027856:	4620      	mov	r0, r4
 8027858:	f7ff fe2f 	bl	80274ba <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802785c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027860:	f013 0f04 	tst.w	r3, #4
 8027864:	d118      	bne.n	8027898 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027866:	8ba8      	ldrh	r0, [r5, #28]
 8027868:	f7fe f974 	bl	8025b54 <mg_ntohs>
 802786c:	4601      	mov	r1, r0
 802786e:	4620      	mov	r0, r4
 8027870:	f7ff fe23 	bl	80274ba <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8027874:	69ea      	ldr	r2, [r5, #28]
 8027876:	69a9      	ldr	r1, [r5, #24]
 8027878:	4620      	mov	r0, r4
 802787a:	f7ff fd61 	bl	8027340 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 802787e:	2201      	movs	r2, #1
 8027880:	f10d 0107 	add.w	r1, sp, #7
 8027884:	4620      	mov	r0, r4
 8027886:	f7ff fd5b 	bl	8027340 <mg_send>
}
 802788a:	b003      	add	sp, #12
 802788c:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802788e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8027890:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8027892:	f7f9 fc47 	bl	8021124 <get_props_size>
 8027896:	e7c7      	b.n	8027828 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027898:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 802789a:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 802789c:	4620      	mov	r0, r4
 802789e:	f7ff fe19 	bl	80274d4 <mg_send_mqtt_properties>
 80278a2:	e7e0      	b.n	8027866 <mg_mqtt_sub+0x5e>

080278a4 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80278a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278a8:	b083      	sub	sp, #12
 80278aa:	4605      	mov	r5, r0
 80278ac:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 80278ae:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 80278b2:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80278b6:	005b      	lsls	r3, r3, #1
 80278b8:	f003 0306 	and.w	r3, r3, #6
 80278bc:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 80278c0:	2a00      	cmp	r2, #0
 80278c2:	d057      	beq.n	8027974 <mg_mqtt_pub+0xd0>
 80278c4:	2201      	movs	r2, #1
 80278c6:	ea43 0a02 	orr.w	sl, r3, r2
 80278ca:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 80278cc:	69e7      	ldr	r7, [r4, #28]
 80278ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80278d0:	441f      	add	r7, r3
 80278d2:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 80278d6:	4b3a      	ldr	r3, [pc, #232]	@ (80279c0 <mg_mqtt_pub+0x11c>)
 80278d8:	681b      	ldr	r3, [r3, #0]
 80278da:	2b02      	cmp	r3, #2
 80278dc:	dc4c      	bgt.n	8027978 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 80278de:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 80278e2:	f1bb 0f00 	cmp.w	fp, #0
 80278e6:	d001      	beq.n	80278ec <mg_mqtt_pub+0x48>
 80278e8:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 80278ec:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80278f0:	f013 0f04 	tst.w	r3, #4
 80278f4:	d152      	bne.n	802799c <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 80278f6:	f1bb 0f00 	cmp.w	fp, #0
 80278fa:	d004      	beq.n	8027906 <mg_mqtt_pub+0x62>
 80278fc:	f1b8 0f00 	cmp.w	r8, #0
 8027900:	d001      	beq.n	8027906 <mg_mqtt_pub+0x62>
 8027902:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8027906:	464b      	mov	r3, r9
 8027908:	4632      	mov	r2, r6
 802790a:	2103      	movs	r1, #3
 802790c:	4628      	mov	r0, r5
 802790e:	f7ff fda9 	bl	8027464 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027912:	8ba0      	ldrh	r0, [r4, #28]
 8027914:	f7fe f91e 	bl	8025b54 <mg_ntohs>
 8027918:	4601      	mov	r1, r0
 802791a:	4628      	mov	r0, r5
 802791c:	f7ff fdcd 	bl	80274ba <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8027920:	69e2      	ldr	r2, [r4, #28]
 8027922:	69a1      	ldr	r1, [r4, #24]
 8027924:	4628      	mov	r0, r5
 8027926:	f7ff fd0b 	bl	8027340 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 802792a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 802792e:	b1b3      	cbz	r3, 802795e <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 8027930:	f1b8 0f00 	cmp.w	r8, #0
 8027934:	d10c      	bne.n	8027950 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8027936:	686a      	ldr	r2, [r5, #4]
 8027938:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 802793a:	3301      	adds	r3, #1
 802793c:	b29b      	uxth	r3, r3
 802793e:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8027940:	b91b      	cbnz	r3, 802794a <mg_mqtt_pub+0xa6>
 8027942:	686a      	ldr	r2, [r5, #4]
 8027944:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027946:	3301      	adds	r3, #1
 8027948:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 802794a:	686b      	ldr	r3, [r5, #4]
 802794c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8027950:	4640      	mov	r0, r8
 8027952:	f7fe f8ff 	bl	8025b54 <mg_ntohs>
 8027956:	4601      	mov	r1, r0
 8027958:	4628      	mov	r0, r5
 802795a:	f7ff fdae 	bl	80274ba <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802795e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027962:	f013 0f04 	tst.w	r3, #4
 8027966:	d11f      	bne.n	80279a8 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8027968:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802796a:	bb1a      	cbnz	r2, 80279b4 <mg_mqtt_pub+0x110>
}
 802796c:	4640      	mov	r0, r8
 802796e:	b003      	add	sp, #12
 8027970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8027974:	2200      	movs	r2, #0
 8027976:	e7a6      	b.n	80278c6 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8027978:	4b12      	ldr	r3, [pc, #72]	@ (80279c4 <mg_mqtt_pub+0x120>)
 802797a:	f241 123c 	movw	r2, #4412	@ 0x113c
 802797e:	4912      	ldr	r1, [pc, #72]	@ (80279c8 <mg_mqtt_pub+0x124>)
 8027980:	2003      	movs	r0, #3
 8027982:	f7fe fc29 	bl	80261d8 <mg_log_prefix>
 8027986:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8027988:	6a22      	ldr	r2, [r4, #32]
 802798a:	9201      	str	r2, [sp, #4]
 802798c:	9300      	str	r3, [sp, #0]
 802798e:	69a3      	ldr	r3, [r4, #24]
 8027990:	69e2      	ldr	r2, [r4, #28]
 8027992:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8027994:	480d      	ldr	r0, [pc, #52]	@ (80279cc <mg_mqtt_pub+0x128>)
 8027996:	f7fc facd 	bl	8023f34 <mg_log>
 802799a:	e7a0      	b.n	80278de <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802799c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802799e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80279a0:	f7f9 fbc0 	bl	8021124 <get_props_size>
 80279a4:	4481      	add	r9, r0
 80279a6:	e7a6      	b.n	80278f6 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80279a8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80279aa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80279ac:	4628      	mov	r0, r5
 80279ae:	f7ff fd91 	bl	80274d4 <mg_send_mqtt_properties>
 80279b2:	e7d9      	b.n	8027968 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 80279b4:	6a21      	ldr	r1, [r4, #32]
 80279b6:	4628      	mov	r0, r5
 80279b8:	f7ff fcc2 	bl	8027340 <mg_send>
 80279bc:	e7d6      	b.n	802796c <mg_mqtt_pub+0xc8>
 80279be:	bf00      	nop
 80279c0:	2000012c 	.word	0x2000012c
 80279c4:	0803b704 	.word	0x0803b704
 80279c8:	0803ad04 	.word	0x0803ad04
 80279cc:	0803b0a4 	.word	0x0803b0a4

080279d0 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 80279d0:	b530      	push	{r4, r5, lr}
 80279d2:	b08f      	sub	sp, #60	@ 0x3c
 80279d4:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 80279d6:	2907      	cmp	r1, #7
 80279d8:	f000 808f 	beq.w	8027afa <mqtt_cb+0x12a>
}
 80279dc:	b00f      	add	sp, #60	@ 0x3c
 80279de:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 80279e0:	2204      	movs	r2, #4
 80279e2:	e091      	b.n	8027b08 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 80279e4:	4b73      	ldr	r3, [pc, #460]	@ (8027bb4 <mqtt_cb+0x1e4>)
 80279e6:	681b      	ldr	r3, [r3, #0]
 80279e8:	2b00      	cmp	r3, #0
 80279ea:	dc06      	bgt.n	80279fa <mqtt_cb+0x2a>
        c->is_closing = 1;
 80279ec:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80279f0:	f043 0320 	orr.w	r3, r3, #32
 80279f4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 80279f8:	e7f0      	b.n	80279dc <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 80279fa:	4b6f      	ldr	r3, [pc, #444]	@ (8027bb8 <mqtt_cb+0x1e8>)
 80279fc:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 8027a00:	496e      	ldr	r1, [pc, #440]	@ (8027bbc <mqtt_cb+0x1ec>)
 8027a02:	2001      	movs	r0, #1
 8027a04:	f7fe fbe8 	bl	80261d8 <mg_log_prefix>
 8027a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027a0a:	486d      	ldr	r0, [pc, #436]	@ (8027bc0 <mqtt_cb+0x1f0>)
 8027a0c:	f7fc fa92 	bl	8023f34 <mg_log>
 8027a10:	e7ec      	b.n	80279ec <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8027a12:	4b69      	ldr	r3, [pc, #420]	@ (8027bb8 <mqtt_cb+0x1e8>)
 8027a14:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 8027a18:	4968      	ldr	r1, [pc, #416]	@ (8027bbc <mqtt_cb+0x1ec>)
 8027a1a:	2004      	movs	r0, #4
 8027a1c:	f7fe fbdc 	bl	80261d8 <mg_log_prefix>
 8027a20:	9b06      	ldr	r3, [sp, #24]
 8027a22:	9301      	str	r3, [sp, #4]
 8027a24:	9b07      	ldr	r3, [sp, #28]
 8027a26:	9300      	str	r3, [sp, #0]
 8027a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027a2a:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 8027a2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027a30:	4864      	ldr	r0, [pc, #400]	@ (8027bc4 <mqtt_cb+0x1f4>)
 8027a32:	f7fc fa7f 	bl	8023f34 <mg_log>
 8027a36:	e077      	b.n	8027b28 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8027a38:	aa0b      	add	r2, sp, #44	@ 0x2c
 8027a3a:	2111      	movs	r1, #17
 8027a3c:	4620      	mov	r0, r4
 8027a3e:	f7fb f830 	bl	8022aa2 <mg_call>
            if (mm.ack == 0) {
 8027a42:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8027a46:	b97b      	cbnz	r3, 8027a68 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 8027a48:	4b5a      	ldr	r3, [pc, #360]	@ (8027bb4 <mqtt_cb+0x1e4>)
 8027a4a:	681b      	ldr	r3, [r3, #0]
 8027a4c:	2b02      	cmp	r3, #2
 8027a4e:	dd49      	ble.n	8027ae4 <mqtt_cb+0x114>
 8027a50:	4b59      	ldr	r3, [pc, #356]	@ (8027bb8 <mqtt_cb+0x1e8>)
 8027a52:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 8027a56:	4959      	ldr	r1, [pc, #356]	@ (8027bbc <mqtt_cb+0x1ec>)
 8027a58:	2003      	movs	r0, #3
 8027a5a:	f7fe fbbd 	bl	80261d8 <mg_log_prefix>
 8027a5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027a60:	4859      	ldr	r0, [pc, #356]	@ (8027bc8 <mqtt_cb+0x1f8>)
 8027a62:	f7fc fa67 	bl	8023f34 <mg_log>
 8027a66:	e03d      	b.n	8027ae4 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8027a68:	4b52      	ldr	r3, [pc, #328]	@ (8027bb4 <mqtt_cb+0x1e4>)
 8027a6a:	681b      	ldr	r3, [r3, #0]
 8027a6c:	2b00      	cmp	r3, #0
 8027a6e:	dc06      	bgt.n	8027a7e <mqtt_cb+0xae>
              c->is_closing = 1;
 8027a70:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027a74:	f043 0320 	orr.w	r3, r3, #32
 8027a78:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8027a7c:	e032      	b.n	8027ae4 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8027a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8027bb8 <mqtt_cb+0x1e8>)
 8027a80:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 8027a84:	494d      	ldr	r1, [pc, #308]	@ (8027bbc <mqtt_cb+0x1ec>)
 8027a86:	2001      	movs	r0, #1
 8027a88:	f7fe fba6 	bl	80261d8 <mg_log_prefix>
 8027a8c:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 8027a90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027a92:	484e      	ldr	r0, [pc, #312]	@ (8027bcc <mqtt_cb+0x1fc>)
 8027a94:	f7fc fa4e 	bl	8023f34 <mg_log>
 8027a98:	e7ea      	b.n	8027a70 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 8027a9a:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 8027a9e:	b1e5      	cbz	r5, 8027ada <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 8027aa0:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027aa4:	f7fe f856 	bl	8025b54 <mg_ntohs>
 8027aa8:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8027aac:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027ab0:	f013 0f04 	tst.w	r3, #4
 8027ab4:	d14a      	bne.n	8027b4c <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 8027ab6:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 8027ab8:	2d02      	cmp	r5, #2
 8027aba:	d049      	beq.n	8027b50 <mqtt_cb+0x180>
 8027abc:	2104      	movs	r1, #4
 8027abe:	2200      	movs	r2, #0
 8027ac0:	4620      	mov	r0, r4
 8027ac2:	f7ff fccf 	bl	8027464 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 8027ac6:	2202      	movs	r2, #2
 8027ac8:	a903      	add	r1, sp, #12
 8027aca:	4620      	mov	r0, r4
 8027acc:	f7ff fc38 	bl	8027340 <mg_send>
              if (c->is_mqtt5) {
 8027ad0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027ad4:	f013 0f04 	tst.w	r3, #4
 8027ad8:	d13c      	bne.n	8027b54 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 8027ada:	aa04      	add	r2, sp, #16
 8027adc:	2110      	movs	r1, #16
 8027ade:	4620      	mov	r0, r4
 8027ae0:	f7fa ffdf 	bl	8022aa2 <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8027ae4:	aa04      	add	r2, sp, #16
 8027ae6:	210f      	movs	r1, #15
 8027ae8:	4620      	mov	r0, r4
 8027aea:	f7fa ffda 	bl	8022aa2 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 8027aee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027af0:	2100      	movs	r1, #0
 8027af2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8027af6:	f7fd ff38 	bl	802596a <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8027afa:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027afe:	f013 0f04 	tst.w	r3, #4
 8027b02:	f43f af6d 	beq.w	80279e0 <mqtt_cb+0x10>
 8027b06:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8027b08:	ab04      	add	r3, sp, #16
 8027b0a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8027b0c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8027b0e:	f7fb fc8c 	bl	802342a <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 8027b12:	2802      	cmp	r0, #2
 8027b14:	f43f af66 	beq.w	80279e4 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 8027b18:	2800      	cmp	r0, #0
 8027b1a:	f47f af5f 	bne.w	80279dc <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8027b1e:	4b25      	ldr	r3, [pc, #148]	@ (8027bb4 <mqtt_cb+0x1e4>)
 8027b20:	681b      	ldr	r3, [r3, #0]
 8027b22:	2b03      	cmp	r3, #3
 8027b24:	f73f af75 	bgt.w	8027a12 <mqtt_cb+0x42>
        switch (mm.cmd) {
 8027b28:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8027b2c:	3b02      	subs	r3, #2
 8027b2e:	2b04      	cmp	r3, #4
 8027b30:	d8d8      	bhi.n	8027ae4 <mqtt_cb+0x114>
 8027b32:	a201      	add	r2, pc, #4	@ (adr r2, 8027b38 <mqtt_cb+0x168>)
 8027b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027b38:	08027a39 	.word	0x08027a39
 8027b3c:	08027a9b 	.word	0x08027a9b
 8027b40:	08027ae5 	.word	0x08027ae5
 8027b44:	08027b69 	.word	0x08027b69
 8027b48:	08027b8f 	.word	0x08027b8f
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8027b4c:	2304      	movs	r3, #4
 8027b4e:	e7b3      	b.n	8027ab8 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 8027b50:	2105      	movs	r1, #5
 8027b52:	e7b4      	b.n	8027abe <mqtt_cb+0xee>
                uint16_t zero = 0;
 8027b54:	2300      	movs	r3, #0
 8027b56:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 8027b5a:	2202      	movs	r2, #2
 8027b5c:	f10d 010e 	add.w	r1, sp, #14
 8027b60:	4620      	mov	r0, r4
 8027b62:	f7ff fbed 	bl	8027340 <mg_send>
 8027b66:	e7b8      	b.n	8027ada <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 8027b68:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027b6c:	f7fd fff2 	bl	8025b54 <mg_ntohs>
 8027b70:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8027b74:	2302      	movs	r3, #2
 8027b76:	461a      	mov	r2, r3
 8027b78:	2106      	movs	r1, #6
 8027b7a:	4620      	mov	r0, r4
 8027b7c:	f7ff fc72 	bl	8027464 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8027b80:	2202      	movs	r2, #2
 8027b82:	f10d 010e 	add.w	r1, sp, #14
 8027b86:	4620      	mov	r0, r4
 8027b88:	f7ff fbda 	bl	8027340 <mg_send>
            break;
 8027b8c:	e7aa      	b.n	8027ae4 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 8027b8e:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027b92:	f7fd ffdf 	bl	8025b54 <mg_ntohs>
 8027b96:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 8027b9a:	2302      	movs	r3, #2
 8027b9c:	2200      	movs	r2, #0
 8027b9e:	2107      	movs	r1, #7
 8027ba0:	4620      	mov	r0, r4
 8027ba2:	f7ff fc5f 	bl	8027464 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8027ba6:	2202      	movs	r2, #2
 8027ba8:	f10d 010e 	add.w	r1, sp, #14
 8027bac:	4620      	mov	r0, r4
 8027bae:	f7ff fbc7 	bl	8027340 <mg_send>
            break;
 8027bb2:	e797      	b.n	8027ae4 <mqtt_cb+0x114>
 8027bb4:	2000012c 	.word	0x2000012c
 8027bb8:	0803b6fc 	.word	0x0803b6fc
 8027bbc:	0803ad04 	.word	0x0803ad04
 8027bc0:	0803b0bc 	.word	0x0803b0bc
 8027bc4:	0803b0d8 	.word	0x0803b0d8
 8027bc8:	0803b0f8 	.word	0x0803b0f8
 8027bcc:	0803b108 	.word	0x0803b108

08027bd0 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8027bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027bd4:	b088      	sub	sp, #32
 8027bd6:	4605      	mov	r5, r0
 8027bd8:	469a      	mov	sl, r3
 8027bda:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8027bdc:	f107 0614 	add.w	r6, r7, #20
 8027be0:	9601      	str	r6, [sp, #4]
 8027be2:	9200      	str	r2, [sp, #0]
 8027be4:	6883      	ldr	r3, [r0, #8]
 8027be6:	2206      	movs	r2, #6
 8027be8:	f7fd ffd4 	bl	8025b94 <tx_ip>
 8027bec:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8027bee:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 8027bf2:	2200      	movs	r2, #0
 8027bf4:	6142      	str	r2, [r0, #20]
 8027bf6:	6182      	str	r2, [r0, #24]
 8027bf8:	61c2      	str	r2, [r0, #28]
 8027bfa:	6202      	str	r2, [r0, #32]
 8027bfc:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8027bfe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027c00:	b10b      	cbz	r3, 8027c06 <tx_tcp+0x36>
 8027c02:	2f00      	cmp	r7, #0
 8027c04:	d147      	bne.n	8027c96 <tx_tcp+0xc6>
  tcp->sport = sport;
 8027c06:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8027c0a:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 8027c0c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8027c10:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 8027c12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027c14:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 8027c16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027c18:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 8027c1a:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 8027c1e:	f241 7070 	movw	r0, #6000	@ 0x1770
 8027c22:	f7fd ff97 	bl	8025b54 <mg_ntohs>
 8027c26:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8027c28:	2350      	movs	r3, #80	@ 0x50
 8027c2a:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8027c2e:	b2bb      	uxth	r3, r7
 8027c30:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8027c32:	2000      	movs	r0, #0
 8027c34:	f88d 001c 	strb.w	r0, [sp, #28]
 8027c38:	7a62      	ldrb	r2, [r4, #9]
 8027c3a:	f88d 201d 	strb.w	r2, [sp, #29]
 8027c3e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8027c42:	f88d 201e 	strb.w	r2, [sp, #30]
 8027c46:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 8027c4a:	b2b2      	uxth	r2, r6
 8027c4c:	4649      	mov	r1, r9
 8027c4e:	f7f9 fac9 	bl	80211e4 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8027c52:	f104 060c 	add.w	r6, r4, #12
 8027c56:	2204      	movs	r2, #4
 8027c58:	4631      	mov	r1, r6
 8027c5a:	f7f9 fac3 	bl	80211e4 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8027c5e:	f104 0810 	add.w	r8, r4, #16
 8027c62:	2204      	movs	r2, #4
 8027c64:	4641      	mov	r1, r8
 8027c66:	f7f9 fabd 	bl	80211e4 <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8027c6a:	2204      	movs	r2, #4
 8027c6c:	a907      	add	r1, sp, #28
 8027c6e:	f7f9 fab9 	bl	80211e4 <csumup>
  tcp->csum = csumfin(cs);
 8027c72:	f7fd ff7b 	bl	8025b6c <csumfin>
 8027c76:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8027c78:	4b18      	ldr	r3, [pc, #96]	@ (8027cdc <tx_tcp+0x10c>)
 8027c7a:	681b      	ldr	r3, [r3, #0]
 8027c7c:	2b03      	cmp	r3, #3
 8027c7e:	dc10      	bgt.n	8027ca2 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8027c80:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8027c84:	696b      	ldr	r3, [r5, #20]
 8027c86:	1ac9      	subs	r1, r1, r3
 8027c88:	4439      	add	r1, r7
 8027c8a:	4628      	mov	r0, r5
 8027c8c:	f7f9 fabb 	bl	8021206 <ether_output>
}
 8027c90:	b008      	add	sp, #32
 8027c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8027c96:	463a      	mov	r2, r7
 8027c98:	4619      	mov	r1, r3
 8027c9a:	3028      	adds	r0, #40	@ 0x28
 8027c9c:	f004 fe7e 	bl	802c99c <memmove>
 8027ca0:	e7b1      	b.n	8027c06 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8027ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8027ce0 <tx_tcp+0x110>)
 8027ca4:	f241 5254 	movw	r2, #5460	@ 0x1554
 8027ca8:	490e      	ldr	r1, [pc, #56]	@ (8027ce4 <tx_tcp+0x114>)
 8027caa:	2004      	movs	r0, #4
 8027cac:	f7fe fa94 	bl	80261d8 <mg_log_prefix>
 8027cb0:	8aa0      	ldrh	r0, [r4, #20]
 8027cb2:	f7fd ff4f 	bl	8025b54 <mg_ntohs>
 8027cb6:	4681      	mov	r9, r0
 8027cb8:	8ae0      	ldrh	r0, [r4, #22]
 8027cba:	f7fd ff4b 	bl	8025b54 <mg_ntohs>
 8027cbe:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8027cc2:	4909      	ldr	r1, [pc, #36]	@ (8027ce8 <tx_tcp+0x118>)
 8027cc4:	9704      	str	r7, [sp, #16]
 8027cc6:	9303      	str	r3, [sp, #12]
 8027cc8:	9002      	str	r0, [sp, #8]
 8027cca:	f8cd 8004 	str.w	r8, [sp, #4]
 8027cce:	9100      	str	r1, [sp, #0]
 8027cd0:	464b      	mov	r3, r9
 8027cd2:	4632      	mov	r2, r6
 8027cd4:	4805      	ldr	r0, [pc, #20]	@ (8027cec <tx_tcp+0x11c>)
 8027cd6:	f7fc f92d 	bl	8023f34 <mg_log>
 8027cda:	e7d1      	b.n	8027c80 <tx_tcp+0xb0>
 8027cdc:	2000012c 	.word	0x2000012c
 8027ce0:	0803b6c0 	.word	0x0803b6c0
 8027ce4:	0803ad04 	.word	0x0803ad04
 8027ce8:	08023ef5 	.word	0x08023ef5
 8027cec:	0803b128 	.word	0x0803b128

08027cf0 <send_syn>:
static void send_syn(struct mg_connection *c) {
 8027cf0:	b530      	push	{r4, r5, lr}
 8027cf2:	b087      	sub	sp, #28
 8027cf4:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8027cf6:	8b05      	ldrh	r5, [r0, #24]
 8027cf8:	4628      	mov	r0, r5
 8027cfa:	f7fd ff2b 	bl	8025b54 <mg_ntohs>
 8027cfe:	f7fd fe91 	bl	8025a24 <mg_ntohl>
 8027d02:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027d04:	6863      	ldr	r3, [r4, #4]
 8027d06:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8027d08:	2300      	movs	r3, #0
 8027d0a:	9305      	str	r3, [sp, #20]
 8027d0c:	9304      	str	r3, [sp, #16]
 8027d0e:	9303      	str	r3, [sp, #12]
 8027d10:	9202      	str	r2, [sp, #8]
 8027d12:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027d14:	9301      	str	r3, [sp, #4]
 8027d16:	9500      	str	r5, [sp, #0]
 8027d18:	2302      	movs	r3, #2
 8027d1a:	69e2      	ldr	r2, [r4, #28]
 8027d1c:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8027d20:	f7ff ff56 	bl	8027bd0 <tx_tcp>
}
 8027d24:	b007      	add	sp, #28
 8027d26:	bd30      	pop	{r4, r5, pc}

08027d28 <tx_tcp_pkt>:
                         size_t len) {
 8027d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d2c:	b087      	sub	sp, #28
 8027d2e:	4605      	mov	r5, r0
 8027d30:	4617      	mov	r7, r2
 8027d32:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8027d34:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8027d36:	7b5c      	ldrb	r4, [r3, #13]
 8027d38:	f014 0403 	ands.w	r4, r4, #3
 8027d3c:	bf18      	it	ne
 8027d3e:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8027d40:	690e      	ldr	r6, [r1, #16]
 8027d42:	3606      	adds	r6, #6
 8027d44:	69ca      	ldr	r2, [r1, #28]
 8027d46:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8027d4a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8027d4e:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8027d52:	6858      	ldr	r0, [r3, #4]
 8027d54:	f7fd fe66 	bl	8025a24 <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8027d58:	4420      	add	r0, r4
 8027d5a:	f7fd fe63 	bl	8025a24 <mg_ntohl>
 8027d5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027d60:	9305      	str	r3, [sp, #20]
 8027d62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027d64:	9304      	str	r3, [sp, #16]
 8027d66:	9003      	str	r0, [sp, #12]
 8027d68:	f8cd 8008 	str.w	r8, [sp, #8]
 8027d6c:	f8cd b004 	str.w	fp, [sp, #4]
 8027d70:	f8cd a000 	str.w	sl, [sp]
 8027d74:	463b      	mov	r3, r7
 8027d76:	464a      	mov	r2, r9
 8027d78:	4631      	mov	r1, r6
 8027d7a:	4628      	mov	r0, r5
 8027d7c:	f7ff ff28 	bl	8027bd0 <tx_tcp>
}
 8027d80:	b007      	add	sp, #28
 8027d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027d88 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 8027d88:	b530      	push	{r4, r5, lr}
 8027d8a:	b083      	sub	sp, #12
 8027d8c:	4604      	mov	r4, r0
 8027d8e:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027d90:	6843      	ldr	r3, [r0, #4]
 8027d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8027d94:	2901      	cmp	r1, #1
 8027d96:	d01a      	beq.n	8027dce <settmout+0x46>
 8027d98:	2903      	cmp	r1, #3
 8027d9a:	d01a      	beq.n	8027dd2 <settmout+0x4a>
 8027d9c:	2904      	cmp	r1, #4
 8027d9e:	d01b      	beq.n	8027dd8 <settmout+0x50>
 8027da0:	2902      	cmp	r1, #2
 8027da2:	d012      	beq.n	8027dca <settmout+0x42>
 8027da4:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
  s->timer = ifp->now + n;
 8027da8:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8027daa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8027dac:	185b      	adds	r3, r3, r1
 8027dae:	f142 0200 	adc.w	r2, r2, #0
 8027db2:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8027db6:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 8027dba:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8027dbe:	4b10      	ldr	r3, [pc, #64]	@ (8027e00 <settmout+0x78>)
 8027dc0:	681b      	ldr	r3, [r3, #0]
 8027dc2:	2b03      	cmp	r3, #3
 8027dc4:	dc0b      	bgt.n	8027dde <settmout+0x56>
}
 8027dc6:	b003      	add	sp, #12
 8027dc8:	bd30      	pop	{r4, r5, pc}
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8027dca:	2364      	movs	r3, #100	@ 0x64
 8027dcc:	e7ec      	b.n	8027da8 <settmout+0x20>
 8027dce:	2396      	movs	r3, #150	@ 0x96
 8027dd0:	e7ea      	b.n	8027da8 <settmout+0x20>
 8027dd2:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8027dd6:	e7e7      	b.n	8027da8 <settmout+0x20>
 8027dd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8027ddc:	e7e4      	b.n	8027da8 <settmout+0x20>
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8027dde:	4b09      	ldr	r3, [pc, #36]	@ (8027e04 <settmout+0x7c>)
 8027de0:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 8027de4:	4908      	ldr	r1, [pc, #32]	@ (8027e08 <settmout+0x80>)
 8027de6:	2004      	movs	r0, #4
 8027de8:	f7fe f9f6 	bl	80261d8 <mg_log_prefix>
 8027dec:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 8027df0:	e9cd 2300 	strd	r2, r3, [sp]
 8027df4:	462a      	mov	r2, r5
 8027df6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027df8:	4804      	ldr	r0, [pc, #16]	@ (8027e0c <settmout+0x84>)
 8027dfa:	f7fc f89b 	bl	8023f34 <mg_log>
}
 8027dfe:	e7e2      	b.n	8027dc6 <settmout+0x3e>
 8027e00:	2000012c 	.word	0x2000012c
 8027e04:	0803b6b4 	.word	0x0803b6b4
 8027e08:	0803ad04 	.word	0x0803ad04
 8027e0c:	0803b14c 	.word	0x0803b14c

08027e10 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8027e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e14:	b089      	sub	sp, #36	@ 0x24
 8027e16:	4604      	mov	r4, r0
 8027e18:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027e1a:	6843      	ldr	r3, [r0, #4]
 8027e1c:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 8027e1e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 8027e22:	4611      	mov	r1, r2
 8027e24:	f7ff fa2e 	bl	8027284 <trim_len>
 8027e28:	4605      	mov	r5, r0
  if (c->is_udp) {
 8027e2a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027e2e:	f013 0f01 	tst.w	r3, #1
 8027e32:	d010      	beq.n	8027e56 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8027e34:	68ba      	ldr	r2, [r7, #8]
 8027e36:	9003      	str	r0, [sp, #12]
 8027e38:	9602      	str	r6, [sp, #8]
 8027e3a:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027e3c:	9301      	str	r3, [sp, #4]
 8027e3e:	f8cd 8000 	str.w	r8, [sp]
 8027e42:	8b23      	ldrh	r3, [r4, #24]
 8027e44:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8027e48:	4638      	mov	r0, r7
 8027e4a:	f7fd ff38 	bl	8025cbe <tx_udp>
  return (long) len;
 8027e4e:	4628      	mov	r0, r5
}
 8027e50:	b009      	add	sp, #36	@ 0x24
 8027e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8027e56:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8027e5a:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8027e5e:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8027e62:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8027e66:	f7fd fddd 	bl	8025a24 <mg_ntohl>
 8027e6a:	9007      	str	r0, [sp, #28]
 8027e6c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027e70:	f7fd fdd8 	bl	8025a24 <mg_ntohl>
 8027e74:	9505      	str	r5, [sp, #20]
 8027e76:	9604      	str	r6, [sp, #16]
 8027e78:	9003      	str	r0, [sp, #12]
 8027e7a:	9b07      	ldr	r3, [sp, #28]
 8027e7c:	9302      	str	r3, [sp, #8]
 8027e7e:	f8cd b004 	str.w	fp, [sp, #4]
 8027e82:	f8cd a000 	str.w	sl, [sp]
 8027e86:	2318      	movs	r3, #24
 8027e88:	4642      	mov	r2, r8
 8027e8a:	4649      	mov	r1, r9
 8027e8c:	4638      	mov	r0, r7
 8027e8e:	f7ff fe9f 	bl	8027bd0 <tx_tcp>
    if (sent == 0) {
 8027e92:	b180      	cbz	r0, 8027eb6 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 8027e94:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8027e98:	d010      	beq.n	8027ebc <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 8027e9a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8027e9e:	442b      	add	r3, r5
 8027ea0:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8027ea4:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8027ea8:	2b01      	cmp	r3, #1
 8027eaa:	d1d0      	bne.n	8027e4e <mg_io_send+0x3e>
 8027eac:	2100      	movs	r1, #0
 8027eae:	4620      	mov	r0, r4
 8027eb0:	f7ff ff6a 	bl	8027d88 <settmout>
 8027eb4:	e7cb      	b.n	8027e4e <mg_io_send+0x3e>
      return MG_IO_WAIT;
 8027eb6:	f06f 0001 	mvn.w	r0, #1
 8027eba:	e7c9      	b.n	8027e50 <mg_io_send+0x40>
      return MG_IO_ERR;
 8027ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8027ec0:	e7c6      	b.n	8027e50 <mg_io_send+0x40>
	...

08027ec4 <write_conn>:
static void write_conn(struct mg_connection *c) {
 8027ec4:	b510      	push	{r4, lr}
 8027ec6:	b082      	sub	sp, #8
 8027ec8:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8027eca:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 8027ece:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8027ed2:	d00b      	beq.n	8027eec <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8027ed4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8027ed6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8027ed8:	f7fd fc80 	bl	80257dc <mg_tls_send>
 8027edc:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 8027ede:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8027ee2:	d008      	beq.n	8027ef6 <write_conn+0x32>
  } else if (len > 0) {
 8027ee4:	2800      	cmp	r0, #0
 8027ee6:	dc0b      	bgt.n	8027f00 <write_conn+0x3c>
}
 8027ee8:	b002      	add	sp, #8
 8027eea:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 8027eec:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8027eee:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8027ef0:	f7ff ff8e 	bl	8027e10 <mg_io_send>
 8027ef4:	e7f2      	b.n	8027edc <write_conn+0x18>
    mg_error(c, "tx err");
 8027ef6:	4908      	ldr	r1, [pc, #32]	@ (8027f18 <write_conn+0x54>)
 8027ef8:	4620      	mov	r0, r4
 8027efa:	f7fe fa55 	bl	80263a8 <mg_error>
 8027efe:	e7f3      	b.n	8027ee8 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8027f00:	4602      	mov	r2, r0
 8027f02:	2100      	movs	r1, #0
 8027f04:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8027f08:	f7fd fd2f 	bl	802596a <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8027f0c:	aa01      	add	r2, sp, #4
 8027f0e:	2108      	movs	r1, #8
 8027f10:	4620      	mov	r0, r4
 8027f12:	f7fa fdc6 	bl	8022aa2 <mg_call>
}
 8027f16:	e7e7      	b.n	8027ee8 <write_conn+0x24>
 8027f18:	0803b15c 	.word	0x0803b15c

08027f1c <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 8027f1c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8027f20:	f240 1221 	movw	r2, #289	@ 0x121
 8027f24:	421a      	tst	r2, r3
 8027f26:	d000      	beq.n	8027f2a <init_closure+0xe>
 8027f28:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 8027f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027f2e:	b086      	sub	sp, #24
 8027f30:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8027f32:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 8027f34:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8027f36:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 8027f3a:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 8027f3e:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 8027f42:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 8027f46:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 8027f4a:	f7fd fd6b 	bl	8025a24 <mg_ntohl>
 8027f4e:	4605      	mov	r5, r0
 8027f50:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027f54:	f7fd fd66 	bl	8025a24 <mg_ntohl>
 8027f58:	2300      	movs	r3, #0
 8027f5a:	9305      	str	r3, [sp, #20]
 8027f5c:	9304      	str	r3, [sp, #16]
 8027f5e:	9003      	str	r0, [sp, #12]
 8027f60:	9502      	str	r5, [sp, #8]
 8027f62:	f8cd a004 	str.w	sl, [sp, #4]
 8027f66:	f8cd 9000 	str.w	r9, [sp]
 8027f6a:	2311      	movs	r3, #17
 8027f6c:	4642      	mov	r2, r8
 8027f6e:	4639      	mov	r1, r7
 8027f70:	4630      	mov	r0, r6
 8027f72:	f7ff fe2d 	bl	8027bd0 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8027f76:	2104      	movs	r1, #4
 8027f78:	4620      	mov	r0, r4
 8027f7a:	f7ff ff05 	bl	8027d88 <settmout>
}
 8027f7e:	b006      	add	sp, #24
 8027f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08027f84 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 8027f84:	b530      	push	{r4, r5, lr}
 8027f86:	b085      	sub	sp, #20
 8027f88:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027f8a:	6843      	ldr	r3, [r0, #4]
 8027f8c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8027f8e:	69c3      	ldr	r3, [r0, #28]
 8027f90:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 8027f92:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8027f96:	f36f 03c3 	bfc	r3, #3, #1
 8027f9a:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8027f9e:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 8027fa2:	2b00      	cmp	r3, #0
 8027fa4:	db03      	blt.n	8027fae <mg_connect_resolved+0x2a>
 8027fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8027faa:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8027fae:	68ab      	ldr	r3, [r5, #8]
 8027fb0:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 8027fb2:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 8027fb6:	1c43      	adds	r3, r0, #1
 8027fb8:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 8027fbc:	f7fd fdca 	bl	8025b54 <mg_ntohs>
 8027fc0:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8027fc2:	4b51      	ldr	r3, [pc, #324]	@ (8028108 <mg_connect_resolved+0x184>)
 8027fc4:	681b      	ldr	r3, [r3, #0]
 8027fc6:	2b02      	cmp	r3, #2
 8027fc8:	dc36      	bgt.n	8028038 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 8027fca:	2200      	movs	r2, #0
 8027fcc:	2103      	movs	r1, #3
 8027fce:	4620      	mov	r0, r4
 8027fd0:	f7fa fd67 	bl	8022aa2 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8027fd4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027fd8:	f013 0301 	ands.w	r3, r3, #1
 8027fdc:	d009      	beq.n	8027ff2 <mg_connect_resolved+0x6e>
 8027fde:	9903      	ldr	r1, [sp, #12]
 8027fe0:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8027fe4:	d03b      	beq.n	802805e <mg_connect_resolved+0xda>
 8027fe6:	68aa      	ldr	r2, [r5, #8]
 8027fe8:	68e8      	ldr	r0, [r5, #12]
 8027fea:	ea62 0200 	orn	r2, r2, r0
 8027fee:	4291      	cmp	r1, r2
 8027ff0:	d035      	beq.n	802805e <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8027ff2:	68aa      	ldr	r2, [r5, #8]
 8027ff4:	2a00      	cmp	r2, #0
 8027ff6:	d046      	beq.n	8028086 <mg_connect_resolved+0x102>
 8027ff8:	9903      	ldr	r1, [sp, #12]
 8027ffa:	68e8      	ldr	r0, [r5, #12]
 8027ffc:	404a      	eors	r2, r1
 8027ffe:	4202      	tst	r2, r0
 8028000:	d141      	bne.n	8028086 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8028002:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8028004:	4291      	cmp	r1, r2
 8028006:	d03e      	beq.n	8028086 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8028008:	4b3f      	ldr	r3, [pc, #252]	@ (8028108 <mg_connect_resolved+0x184>)
 802800a:	681b      	ldr	r3, [r3, #0]
 802800c:	2b02      	cmp	r3, #2
 802800e:	dc2e      	bgt.n	802806e <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 8028010:	9903      	ldr	r1, [sp, #12]
 8028012:	4628      	mov	r0, r5
 8028014:	f7fd fe9b 	bl	8025d4e <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8028018:	2102      	movs	r1, #2
 802801a:	4620      	mov	r0, r4
 802801c:	f7ff feb4 	bl	8027d88 <settmout>
    c->is_arplooking = 1;
 8028020:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028024:	f043 0310 	orr.w	r3, r3, #16
 8028028:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 802802c:	b2db      	uxtb	r3, r3
 802802e:	f043 0320 	orr.w	r3, r3, #32
 8028032:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 8028036:	e018      	b.n	802806a <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8028038:	4b34      	ldr	r3, [pc, #208]	@ (802810c <mg_connect_resolved+0x188>)
 802803a:	f241 724f 	movw	r2, #5967	@ 0x174f
 802803e:	4934      	ldr	r1, [pc, #208]	@ (8028110 <mg_connect_resolved+0x18c>)
 8028040:	2003      	movs	r0, #3
 8028042:	f7fe f8c9 	bl	80261d8 <mg_log_prefix>
 8028046:	4a33      	ldr	r2, [pc, #204]	@ (8028114 <mg_connect_resolved+0x190>)
 8028048:	f104 031c 	add.w	r3, r4, #28
 802804c:	9301      	str	r3, [sp, #4]
 802804e:	9200      	str	r2, [sp, #0]
 8028050:	f104 0308 	add.w	r3, r4, #8
 8028054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028056:	4830      	ldr	r0, [pc, #192]	@ (8028118 <mg_connect_resolved+0x194>)
 8028058:	f7fb ff6c 	bl	8023f34 <mg_log>
 802805c:	e7b5      	b.n	8027fca <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 802805e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028062:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8028066:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 802806a:	b005      	add	sp, #20
 802806c:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 802806e:	4b27      	ldr	r3, [pc, #156]	@ (802810c <mg_connect_resolved+0x188>)
 8028070:	f241 7258 	movw	r2, #5976	@ 0x1758
 8028074:	4926      	ldr	r1, [pc, #152]	@ (8028110 <mg_connect_resolved+0x18c>)
 8028076:	2003      	movs	r0, #3
 8028078:	f7fe f8ae 	bl	80261d8 <mg_log_prefix>
 802807c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802807e:	4827      	ldr	r0, [pc, #156]	@ (802811c <mg_connect_resolved+0x198>)
 8028080:	f7fb ff58 	bl	8023f34 <mg_log>
 8028084:	e7c4      	b.n	8028010 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8028086:	f89d 200c 	ldrb.w	r2, [sp, #12]
 802808a:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 802808e:	2ae0      	cmp	r2, #224	@ 0xe0
 8028090:	d00e      	beq.n	80280b0 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8028092:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 8028096:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 802809a:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 802809e:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 80280a2:	b31b      	cbz	r3, 80280ec <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 80280a4:	2200      	movs	r2, #0
 80280a6:	2104      	movs	r1, #4
 80280a8:	4620      	mov	r0, r4
 80280aa:	f7fa fcfa 	bl	8022aa2 <mg_call>
 80280ae:	e7dc      	b.n	802806a <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 80280b0:	4b1b      	ldr	r3, [pc, #108]	@ (8028120 <mg_connect_resolved+0x19c>)
 80280b2:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80280b6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80280ba:	0c1b      	lsrs	r3, r3, #16
 80280bc:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 80280c0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80280c4:	b2db      	uxtb	r3, r3
 80280c6:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 80280ca:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 80280ce:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 80280d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80280d6:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 80280da:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 80280de:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 80280e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80280e6:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 80280ea:	e7be      	b.n	802806a <mg_connect_resolved+0xe6>
      send_syn(c);
 80280ec:	4620      	mov	r0, r4
 80280ee:	f7ff fdff 	bl	8027cf0 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 80280f2:	2103      	movs	r1, #3
 80280f4:	4620      	mov	r0, r4
 80280f6:	f7ff fe47 	bl	8027d88 <settmout>
      c->is_connecting = 1;
 80280fa:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80280fe:	f043 0320 	orr.w	r3, r3, #32
 8028102:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 8028106:	e7b0      	b.n	802806a <mg_connect_resolved+0xe6>
 8028108:	2000012c 	.word	0x2000012c
 802810c:	0803b690 	.word	0x0803b690
 8028110:	0803ad04 	.word	0x0803ad04
 8028114:	0802608d 	.word	0x0802608d
 8028118:	0803b164 	.word	0x0803b164
 802811c:	0803b174 	.word	0x0803b174
 8028120:	08035d1c 	.word	0x08035d1c

08028124 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8028124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028126:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8028128:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 802812a:	2902      	cmp	r1, #2
 802812c:	d009      	beq.n	8028142 <dns_cb+0x1e>
 802812e:	4604      	mov	r4, r0
 8028130:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 8028134:	2907      	cmp	r1, #7
 8028136:	d016      	beq.n	8028166 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 8028138:	2909      	cmp	r1, #9
 802813a:	f000 809a 	beq.w	8028272 <dns_cb+0x14e>
}
 802813e:	b049      	add	sp, #292	@ 0x124
 8028140:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 8028142:	6816      	ldr	r6, [r2, #0]
 8028144:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 8028146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028148:	e000      	b.n	802814c <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 802814a:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 802814c:	2b00      	cmp	r3, #0
 802814e:	d0f6      	beq.n	802813e <dns_cb+0x1a>
      tmp = d->next;
 8028150:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8028152:	6899      	ldr	r1, [r3, #8]
 8028154:	68da      	ldr	r2, [r3, #12]
 8028156:	42b1      	cmp	r1, r6
 8028158:	41aa      	sbcs	r2, r5
 802815a:	d2f6      	bcs.n	802814a <dns_cb+0x26>
 802815c:	494c      	ldr	r1, [pc, #304]	@ (8028290 <dns_cb+0x16c>)
 802815e:	6858      	ldr	r0, [r3, #4]
 8028160:	f7fe f922 	bl	80263a8 <mg_error>
 8028164:	e7f1      	b.n	802814a <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8028166:	aa02      	add	r2, sp, #8
 8028168:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802816a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802816c:	f7fe f870 	bl	8026250 <mg_dns_parse>
 8028170:	b9c8      	cbnz	r0, 80281a6 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 8028172:	4b48      	ldr	r3, [pc, #288]	@ (8028294 <dns_cb+0x170>)
 8028174:	681b      	ldr	r3, [r3, #0]
 8028176:	2b00      	cmp	r3, #0
 8028178:	dc0a      	bgt.n	8028190 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 802817a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802817c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802817e:	f7fb f83b 	bl	80231f8 <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8028182:	4b44      	ldr	r3, [pc, #272]	@ (8028294 <dns_cb+0x170>)
 8028184:	681b      	ldr	r3, [r3, #0]
 8028186:	2b00      	cmp	r3, #0
 8028188:	dc68      	bgt.n	802825c <dns_cb+0x138>
    c->recv.len = 0;
 802818a:	2300      	movs	r3, #0
 802818c:	6423      	str	r3, [r4, #64]	@ 0x40
 802818e:	e7d6      	b.n	802813e <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 8028190:	4b41      	ldr	r3, [pc, #260]	@ (8028298 <dns_cb+0x174>)
 8028192:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8028196:	4941      	ldr	r1, [pc, #260]	@ (802829c <dns_cb+0x178>)
 8028198:	2001      	movs	r0, #1
 802819a:	f7fe f81d 	bl	80261d8 <mg_log_prefix>
 802819e:	4840      	ldr	r0, [pc, #256]	@ (80282a0 <dns_cb+0x17c>)
 80281a0:	f7fb fec8 	bl	8023f34 <mg_log>
 80281a4:	e7e9      	b.n	802817a <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 80281a6:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 80281a8:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 80281aa:	e008      	b.n	80281be <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 80281ac:	6868      	ldr	r0, [r5, #4]
 80281ae:	f7ff fee9 	bl	8027f84 <mg_connect_resolved>
        mg_dns_free(head, d);
 80281b2:	4629      	mov	r1, r5
 80281b4:	4630      	mov	r0, r6
 80281b6:	f7f9 fa35 	bl	8021624 <mg_dns_free>
        resolved = 1;
 80281ba:	2101      	movs	r1, #1
 80281bc:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 80281be:	2d00      	cmp	r5, #0
 80281c0:	d049      	beq.n	8028256 <dns_cb+0x132>
        tmp = d->next;
 80281c2:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 80281c4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80281c8:	8a2b      	ldrh	r3, [r5, #16]
 80281ca:	429a      	cmp	r2, r3
 80281cc:	d1f6      	bne.n	80281bc <dns_cb+0x98>
        if (d->c->is_resolving) {
 80281ce:	6868      	ldr	r0, [r5, #4]
 80281d0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80281d4:	f013 0f08 	tst.w	r3, #8
 80281d8:	d02c      	beq.n	8028234 <dns_cb+0x110>
          if (dm.resolved) {
 80281da:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80281de:	b323      	cbz	r3, 802822a <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 80281e0:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80281e2:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 80281e6:	686b      	ldr	r3, [r5, #4]
 80281e8:	f103 0c1c 	add.w	ip, r3, #28
 80281ec:	f10d 0e0c 	add.w	lr, sp, #12
 80281f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80281f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80281f8:	f8de 3000 	ldr.w	r3, [lr]
 80281fc:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 8028200:	4b24      	ldr	r3, [pc, #144]	@ (8028294 <dns_cb+0x170>)
 8028202:	681b      	ldr	r3, [r3, #0]
 8028204:	2b02      	cmp	r3, #2
 8028206:	ddd1      	ble.n	80281ac <dns_cb+0x88>
 8028208:	4b23      	ldr	r3, [pc, #140]	@ (8028298 <dns_cb+0x174>)
 802820a:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 802820e:	4923      	ldr	r1, [pc, #140]	@ (802829c <dns_cb+0x178>)
 8028210:	2003      	movs	r0, #3
 8028212:	f7fd ffe1 	bl	80261d8 <mg_log_prefix>
 8028216:	686b      	ldr	r3, [r5, #4]
 8028218:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802821a:	331c      	adds	r3, #28
 802821c:	9300      	str	r3, [sp, #0]
 802821e:	4b21      	ldr	r3, [pc, #132]	@ (80282a4 <dns_cb+0x180>)
 8028220:	aa08      	add	r2, sp, #32
 8028222:	4821      	ldr	r0, [pc, #132]	@ (80282a8 <dns_cb+0x184>)
 8028224:	f7fb fe86 	bl	8023f34 <mg_log>
 8028228:	e7c0      	b.n	80281ac <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 802822a:	aa08      	add	r2, sp, #32
 802822c:	491f      	ldr	r1, [pc, #124]	@ (80282ac <dns_cb+0x188>)
 802822e:	f7fe f8bb 	bl	80263a8 <mg_error>
 8028232:	e7be      	b.n	80281b2 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 8028234:	4b17      	ldr	r3, [pc, #92]	@ (8028294 <dns_cb+0x170>)
 8028236:	681b      	ldr	r3, [r3, #0]
 8028238:	2b00      	cmp	r3, #0
 802823a:	ddba      	ble.n	80281b2 <dns_cb+0x8e>
 802823c:	4b16      	ldr	r3, [pc, #88]	@ (8028298 <dns_cb+0x174>)
 802823e:	f240 42da 	movw	r2, #1242	@ 0x4da
 8028242:	4916      	ldr	r1, [pc, #88]	@ (802829c <dns_cb+0x178>)
 8028244:	2001      	movs	r0, #1
 8028246:	f7fd ffc7 	bl	80261d8 <mg_log_prefix>
 802824a:	686b      	ldr	r3, [r5, #4]
 802824c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802824e:	4818      	ldr	r0, [pc, #96]	@ (80282b0 <dns_cb+0x18c>)
 8028250:	f7fb fe70 	bl	8023f34 <mg_log>
 8028254:	e7ad      	b.n	80281b2 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8028256:	2900      	cmp	r1, #0
 8028258:	d197      	bne.n	802818a <dns_cb+0x66>
 802825a:	e792      	b.n	8028182 <dns_cb+0x5e>
 802825c:	4b0e      	ldr	r3, [pc, #56]	@ (8028298 <dns_cb+0x174>)
 802825e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8028262:	490e      	ldr	r1, [pc, #56]	@ (802829c <dns_cb+0x178>)
 8028264:	2001      	movs	r0, #1
 8028266:	f7fd ffb7 	bl	80261d8 <mg_log_prefix>
 802826a:	4812      	ldr	r0, [pc, #72]	@ (80282b4 <dns_cb+0x190>)
 802826c:	f7fb fe62 	bl	8023f34 <mg_log>
 8028270:	e78b      	b.n	802818a <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 8028272:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8028274:	2c00      	cmp	r4, #0
 8028276:	f43f af62 	beq.w	802813e <dns_cb+0x1a>
      tmp = d->next;
 802827a:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 802827c:	490e      	ldr	r1, [pc, #56]	@ (80282b8 <dns_cb+0x194>)
 802827e:	6860      	ldr	r0, [r4, #4]
 8028280:	f7fe f892 	bl	80263a8 <mg_error>
      mg_dns_free(head, d);
 8028284:	4621      	mov	r1, r4
 8028286:	4630      	mov	r0, r6
 8028288:	f7f9 f9cc 	bl	8021624 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 802828c:	462c      	mov	r4, r5
 802828e:	e7f1      	b.n	8028274 <dns_cb+0x150>
 8028290:	0803b188 	.word	0x0803b188
 8028294:	2000012c 	.word	0x2000012c
 8028298:	0803b764 	.word	0x0803b764
 802829c:	0803ad04 	.word	0x0803ad04
 80282a0:	0803b194 	.word	0x0803b194
 80282a4:	08026071 	.word	0x08026071
 80282a8:	0803b1b0 	.word	0x0803b1b0
 80282ac:	0803b1c0 	.word	0x0803b1c0
 80282b0:	0803b1d8 	.word	0x0803b1d8
 80282b4:	0803b1f0 	.word	0x0803b1f0
 80282b8:	0803b200 	.word	0x0803b200

080282bc <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 80282bc:	b510      	push	{r4, lr}
 80282be:	b086      	sub	sp, #24
 80282c0:	4604      	mov	r4, r0
  uint8_t opts[] = {
 80282c2:	4a12      	ldr	r2, [pc, #72]	@ (802830c <tx_dhcp_discover+0x50>)
 80282c4:	ab04      	add	r3, sp, #16
 80282c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80282ca:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 80282ce:	2200      	movs	r2, #0
 80282d0:	9202      	str	r2, [sp, #8]
 80282d2:	2108      	movs	r1, #8
 80282d4:	9101      	str	r1, [sp, #4]
 80282d6:	9300      	str	r3, [sp, #0]
 80282d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80282dc:	490c      	ldr	r1, [pc, #48]	@ (8028310 <tx_dhcp_discover+0x54>)
 80282de:	4620      	mov	r0, r4
 80282e0:	f7fd fd7a 	bl	8025dd8 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 80282e4:	4b0b      	ldr	r3, [pc, #44]	@ (8028314 <tx_dhcp_discover+0x58>)
 80282e6:	681b      	ldr	r3, [r3, #0]
 80282e8:	2b02      	cmp	r3, #2
 80282ea:	dc01      	bgt.n	80282f0 <tx_dhcp_discover+0x34>
}
 80282ec:	b006      	add	sp, #24
 80282ee:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 80282f0:	4b09      	ldr	r3, [pc, #36]	@ (8028318 <tx_dhcp_discover+0x5c>)
 80282f2:	f241 4270 	movw	r2, #5232	@ 0x1470
 80282f6:	4909      	ldr	r1, [pc, #36]	@ (802831c <tx_dhcp_discover+0x60>)
 80282f8:	2003      	movs	r0, #3
 80282fa:	f7fd ff6d 	bl	80261d8 <mg_log_prefix>
 80282fe:	4622      	mov	r2, r4
 8028300:	4907      	ldr	r1, [pc, #28]	@ (8028320 <tx_dhcp_discover+0x64>)
 8028302:	4808      	ldr	r0, [pc, #32]	@ (8028324 <tx_dhcp_discover+0x68>)
 8028304:	f7fb fe16 	bl	8023f34 <mg_log>
}
 8028308:	e7f0      	b.n	80282ec <tx_dhcp_discover+0x30>
 802830a:	bf00      	nop
 802830c:	0803b22c 	.word	0x0803b22c
 8028310:	0803b78c 	.word	0x0803b78c
 8028314:	2000012c 	.word	0x2000012c
 8028318:	0803b660 	.word	0x0803b660
 802831c:	0803ad04 	.word	0x0803ad04
 8028320:	08023f05 	.word	0x08023f05
 8028324:	0803b20c 	.word	0x0803b20c

08028328 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 8028328:	b510      	push	{r4, lr}
 802832a:	b086      	sub	sp, #24
  uint8_t opts[] = {
 802832c:	4c0d      	ldr	r4, [pc, #52]	@ (8028364 <tx_dhcp_request_re+0x3c>)
 802832e:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8028330:	2401      	movs	r4, #1
 8028332:	9402      	str	r4, [sp, #8]
 8028334:	2404      	movs	r4, #4
 8028336:	9401      	str	r4, [sp, #4]
 8028338:	ac05      	add	r4, sp, #20
 802833a:	9400      	str	r4, [sp, #0]
 802833c:	f7fd fd4c 	bl	8025dd8 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8028340:	4b09      	ldr	r3, [pc, #36]	@ (8028368 <tx_dhcp_request_re+0x40>)
 8028342:	681b      	ldr	r3, [r3, #0]
 8028344:	2b02      	cmp	r3, #2
 8028346:	dc01      	bgt.n	802834c <tx_dhcp_request_re+0x24>
}
 8028348:	b006      	add	sp, #24
 802834a:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 802834c:	4b07      	ldr	r3, [pc, #28]	@ (802836c <tx_dhcp_request_re+0x44>)
 802834e:	f241 4266 	movw	r2, #5222	@ 0x1466
 8028352:	4907      	ldr	r1, [pc, #28]	@ (8028370 <tx_dhcp_request_re+0x48>)
 8028354:	2003      	movs	r0, #3
 8028356:	f7fd ff3f 	bl	80261d8 <mg_log_prefix>
 802835a:	4806      	ldr	r0, [pc, #24]	@ (8028374 <tx_dhcp_request_re+0x4c>)
 802835c:	f7fb fdea 	bl	8023f34 <mg_log>
}
 8028360:	e7f2      	b.n	8028348 <tx_dhcp_request_re+0x20>
 8028362:	bf00      	nop
 8028364:	ff030135 	.word	0xff030135
 8028368:	2000012c 	.word	0x2000012c
 802836c:	0803b63c 	.word	0x0803b63c
 8028370:	0803ad04 	.word	0x0803ad04
 8028374:	0803b238 	.word	0x0803b238

08028378 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028378:	b5f0      	push	{r4, r5, r6, r7, lr}
 802837a:	b083      	sub	sp, #12
 802837c:	4604      	mov	r4, r0
 802837e:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8028380:	698e      	ldr	r6, [r1, #24]
 8028382:	88f7      	ldrh	r7, [r6, #6]
 8028384:	2001      	movs	r0, #1
 8028386:	f7fd fbe5 	bl	8025b54 <mg_ntohs>
 802838a:	4287      	cmp	r7, r0
 802838c:	d006      	beq.n	802839c <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 802838e:	2002      	movs	r0, #2
 8028390:	f7fd fbe0 	bl	8025b54 <mg_ntohs>
 8028394:	4287      	cmp	r7, r0
 8028396:	d05a      	beq.n	802844e <rx_arp+0xd6>
}
 8028398:	b003      	add	sp, #12
 802839a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802839c:	69b2      	ldr	r2, [r6, #24]
 802839e:	68a3      	ldr	r3, [r4, #8]
 80283a0:	429a      	cmp	r2, r3
 80283a2:	d1f4      	bne.n	802838e <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 80283a4:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 80283a6:	692b      	ldr	r3, [r5, #16]
 80283a8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80283ac:	6032      	str	r2, [r6, #0]
 80283ae:	895b      	ldrh	r3, [r3, #10]
 80283b0:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80283b2:	6823      	ldr	r3, [r4, #0]
 80283b4:	f8c6 3006 	str.w	r3, [r6, #6]
 80283b8:	88a3      	ldrh	r3, [r4, #4]
 80283ba:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 80283bc:	f640 0006 	movw	r0, #2054	@ 0x806
 80283c0:	f7fd fbc8 	bl	8025b54 <mg_ntohs>
 80283c4:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 80283c6:	69ab      	ldr	r3, [r5, #24]
 80283c8:	6818      	ldr	r0, [r3, #0]
 80283ca:	6859      	ldr	r1, [r3, #4]
 80283cc:	689a      	ldr	r2, [r3, #8]
 80283ce:	68df      	ldr	r7, [r3, #12]
 80283d0:	f8c6 000e 	str.w	r0, [r6, #14]
 80283d4:	f8c6 1012 	str.w	r1, [r6, #18]
 80283d8:	f8c6 2016 	str.w	r2, [r6, #22]
 80283dc:	f8c6 701a 	str.w	r7, [r6, #26]
 80283e0:	6918      	ldr	r0, [r3, #16]
 80283e2:	6959      	ldr	r1, [r3, #20]
 80283e4:	699a      	ldr	r2, [r3, #24]
 80283e6:	f8c6 001e 	str.w	r0, [r6, #30]
 80283ea:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 80283ee:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 80283f2:	2002      	movs	r0, #2
 80283f4:	f7fd fbae 	bl	8025b54 <mg_ntohs>
 80283f8:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 80283fa:	69ab      	ldr	r3, [r5, #24]
 80283fc:	689a      	ldr	r2, [r3, #8]
 80283fe:	6232      	str	r2, [r6, #32]
 8028400:	899b      	ldrh	r3, [r3, #12]
 8028402:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8028404:	6823      	ldr	r3, [r4, #0]
 8028406:	f8c6 3016 	str.w	r3, [r6, #22]
 802840a:	88a3      	ldrh	r3, [r4, #4]
 802840c:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 802840e:	69ab      	ldr	r3, [r5, #24]
 8028410:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8028414:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 8028418:	68a3      	ldr	r3, [r4, #8]
 802841a:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 802841c:	4b32      	ldr	r3, [pc, #200]	@ (80284e8 <rx_arp+0x170>)
 802841e:	681b      	ldr	r3, [r3, #0]
 8028420:	2b02      	cmp	r3, #2
 8028422:	dc04      	bgt.n	802842e <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 8028424:	212a      	movs	r1, #42	@ 0x2a
 8028426:	4620      	mov	r0, r4
 8028428:	f7f8 feed 	bl	8021206 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802842c:	e7b4      	b.n	8028398 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 802842e:	4b2f      	ldr	r3, [pc, #188]	@ (80284ec <rx_arp+0x174>)
 8028430:	f241 4292 	movw	r2, #5266	@ 0x1492
 8028434:	492e      	ldr	r1, [pc, #184]	@ (80284f0 <rx_arp+0x178>)
 8028436:	2003      	movs	r0, #3
 8028438:	f7fd fece 	bl	80261d8 <mg_log_prefix>
 802843c:	9400      	str	r4, [sp, #0]
 802843e:	4b2d      	ldr	r3, [pc, #180]	@ (80284f4 <rx_arp+0x17c>)
 8028440:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 8028444:	492c      	ldr	r1, [pc, #176]	@ (80284f8 <rx_arp+0x180>)
 8028446:	482d      	ldr	r0, [pc, #180]	@ (80284fc <rx_arp+0x184>)
 8028448:	f7fb fd74 	bl	8023f34 <mg_log>
 802844c:	e7ea      	b.n	8028424 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 802844e:	2206      	movs	r2, #6
 8028450:	4621      	mov	r1, r4
 8028452:	f106 0012 	add.w	r0, r6, #18
 8028456:	f004 fa27 	bl	802c8a8 <memcmp>
 802845a:	2800      	cmp	r0, #0
 802845c:	d19c      	bne.n	8028398 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 802845e:	f8d6 200e 	ldr.w	r2, [r6, #14]
 8028462:	6923      	ldr	r3, [r4, #16]
 8028464:	429a      	cmp	r2, r3
 8028466:	d026      	beq.n	80284b6 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8028468:	2200      	movs	r2, #0
 802846a:	4629      	mov	r1, r5
 802846c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 802846e:	f7fa f9ac 	bl	80227ca <getpeer>
      if (c != NULL && c->is_arplooking) {
 8028472:	4604      	mov	r4, r0
 8028474:	2800      	cmp	r0, #0
 8028476:	d08f      	beq.n	8028398 <rx_arp+0x20>
 8028478:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 802847c:	f013 0f10 	tst.w	r3, #16
 8028480:	d08a      	beq.n	8028398 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8028482:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 8028486:	68b3      	ldr	r3, [r6, #8]
 8028488:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 802848c:	89b3      	ldrh	r3, [r6, #12]
 802848e:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8028492:	4b15      	ldr	r3, [pc, #84]	@ (80284e8 <rx_arp+0x170>)
 8028494:	681b      	ldr	r3, [r3, #0]
 8028496:	2b02      	cmp	r3, #2
 8028498:	dc14      	bgt.n	80284c4 <rx_arp+0x14c>
        c->is_arplooking = 0;
 802849a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802849e:	f36f 1304 	bfc	r3, #4, #1
 80284a2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 80284a6:	4620      	mov	r0, r4
 80284a8:	f7ff fc22 	bl	8027cf0 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 80284ac:	2103      	movs	r1, #3
 80284ae:	4620      	mov	r0, r4
 80284b0:	f7ff fc6a 	bl	8027d88 <settmout>
 80284b4:	e770      	b.n	8028398 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 80284b6:	68b3      	ldr	r3, [r6, #8]
 80284b8:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 80284bc:	89b3      	ldrh	r3, [r6, #12]
 80284be:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80284c2:	e769      	b.n	8028398 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 80284c4:	4b09      	ldr	r3, [pc, #36]	@ (80284ec <rx_arp+0x174>)
 80284c6:	f241 429f 	movw	r2, #5279	@ 0x149f
 80284ca:	4909      	ldr	r1, [pc, #36]	@ (80284f0 <rx_arp+0x178>)
 80284cc:	2003      	movs	r0, #3
 80284ce:	f7fd fe83 	bl	80261d8 <mg_log_prefix>
 80284d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80284d4:	9501      	str	r5, [sp, #4]
 80284d6:	4b07      	ldr	r3, [pc, #28]	@ (80284f4 <rx_arp+0x17c>)
 80284d8:	9300      	str	r3, [sp, #0]
 80284da:	f104 031c 	add.w	r3, r4, #28
 80284de:	4a06      	ldr	r2, [pc, #24]	@ (80284f8 <rx_arp+0x180>)
 80284e0:	4807      	ldr	r0, [pc, #28]	@ (8028500 <rx_arp+0x188>)
 80284e2:	f7fb fd27 	bl	8023f34 <mg_log>
 80284e6:	e7d8      	b.n	802849a <rx_arp+0x122>
 80284e8:	2000012c 	.word	0x2000012c
 80284ec:	0803b628 	.word	0x0803b628
 80284f0:	0803ad04 	.word	0x0803ad04
 80284f4:	08023f05 	.word	0x08023f05
 80284f8:	08023ef5 	.word	0x08023ef5
 80284fc:	0803b248 	.word	0x0803b248
 8028500:	0803b260 	.word	0x0803b260

08028504 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 8028504:	b570      	push	{r4, r5, r6, lr}
 8028506:	b08c      	sub	sp, #48	@ 0x30
 8028508:	4686      	mov	lr, r0
 802850a:	460d      	mov	r5, r1
 802850c:	4616      	mov	r6, r2
  uint8_t opts[] = {
 802850e:	f10d 0c14 	add.w	ip, sp, #20
 8028512:	4c22      	ldr	r4, [pc, #136]	@ (802859c <tx_dhcp_request_sel+0x98>)
 8028514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028516:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802851a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802851e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8028522:	f82c 2b02 	strh.w	r2, [ip], #2
 8028526:	0c12      	lsrs	r2, r2, #16
 8028528:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 802852c:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 8028530:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 8028532:	f89e 301f 	ldrb.w	r3, [lr, #31]
 8028536:	b323      	cbz	r3, 8028582 <tx_dhcp_request_sel+0x7e>
 8028538:	2306      	movs	r3, #6
 802853a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 802853e:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 8028540:	f89e 2020 	ldrb.w	r2, [lr, #32]
 8028544:	b132      	cbz	r2, 8028554 <tx_dhcp_request_sel+0x50>
 8028546:	1c5a      	adds	r2, r3, #1
 8028548:	3348      	adds	r3, #72	@ 0x48
 802854a:	446b      	add	r3, sp
 802854c:	212a      	movs	r1, #42	@ 0x2a
 802854e:	f803 1c1c 	strb.w	r1, [r3, #-28]
 8028552:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 8028554:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8028558:	441a      	add	r2, r3
 802855a:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 802855e:	2200      	movs	r2, #0
 8028560:	9202      	str	r2, [sp, #8]
 8028562:	3319      	adds	r3, #25
 8028564:	9301      	str	r3, [sp, #4]
 8028566:	ab05      	add	r3, sp, #20
 8028568:	9300      	str	r3, [sp, #0]
 802856a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802856e:	490c      	ldr	r1, [pc, #48]	@ (80285a0 <tx_dhcp_request_sel+0x9c>)
 8028570:	4670      	mov	r0, lr
 8028572:	f7fd fc31 	bl	8025dd8 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8028576:	4b0b      	ldr	r3, [pc, #44]	@ (80285a4 <tx_dhcp_request_sel+0xa0>)
 8028578:	681b      	ldr	r3, [r3, #0]
 802857a:	2b02      	cmp	r3, #2
 802857c:	dc03      	bgt.n	8028586 <tx_dhcp_request_sel+0x82>
}
 802857e:	b00c      	add	sp, #48	@ 0x30
 8028580:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 8028582:	2300      	movs	r3, #0
 8028584:	e7dc      	b.n	8028540 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 8028586:	4b08      	ldr	r3, [pc, #32]	@ (80285a8 <tx_dhcp_request_sel+0xa4>)
 8028588:	f241 425b 	movw	r2, #5211	@ 0x145b
 802858c:	4907      	ldr	r1, [pc, #28]	@ (80285ac <tx_dhcp_request_sel+0xa8>)
 802858e:	2003      	movs	r0, #3
 8028590:	f7fd fe22 	bl	80261d8 <mg_log_prefix>
 8028594:	4806      	ldr	r0, [pc, #24]	@ (80285b0 <tx_dhcp_request_sel+0xac>)
 8028596:	f7fb fccd 	bl	8023f34 <mg_log>
}
 802859a:	e7f0      	b.n	802857e <tx_dhcp_request_sel+0x7a>
 802859c:	08035f48 	.word	0x08035f48
 80285a0:	0803b78c 	.word	0x0803b78c
 80285a4:	2000012c 	.word	0x2000012c
 80285a8:	0803b5fc 	.word	0x0803b5fc
 80285ac:	0803ad04 	.word	0x0803ad04
 80285b0:	0803b238 	.word	0x0803b238

080285b4 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 80285b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80285b8:	b089      	sub	sp, #36	@ 0x24
 80285ba:	4604      	mov	r4, r0
 80285bc:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 80285be:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80285c2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80285c6:	d049      	beq.n	802865c <read_conn+0xa8>
 80285c8:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 80285cc:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 80285ce:	6878      	ldr	r0, [r7, #4]
 80285d0:	f7fd fa28 	bl	8025a24 <mg_ntohl>
 80285d4:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80285d6:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 80285d8:	7b7b      	ldrb	r3, [r7, #13]
 80285da:	f013 0f01 	tst.w	r3, #1
 80285de:	d053      	beq.n	8028688 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 80285e0:	68eb      	ldr	r3, [r5, #12]
 80285e2:	4403      	add	r3, r0
 80285e4:	3301      	adds	r3, #1
 80285e6:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 80285ea:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80285ee:	f013 0f10 	tst.w	r3, #16
 80285f2:	d003      	beq.n	80285fc <read_conn+0x48>
 80285f4:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80285f8:	2b04      	cmp	r3, #4
 80285fa:	d032      	beq.n	8028662 <read_conn+0xae>
      c->is_draining = 1;
 80285fc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028600:	f043 0310 	orr.w	r3, r3, #16
 8028604:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 8028608:	2104      	movs	r1, #4
 802860a:	4620      	mov	r0, r4
 802860c:	f7ff fbbc 	bl	8027d88 <settmout>
      flags |= TH_FIN;
 8028610:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 8028614:	6863      	ldr	r3, [r4, #4]
 8028616:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8028618:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 802861c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8028620:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8028624:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028628:	f7fd f9fc 	bl	8025a24 <mg_ntohl>
 802862c:	4605      	mov	r5, r0
 802862e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028632:	f7fd f9f7 	bl	8025a24 <mg_ntohl>
 8028636:	2300      	movs	r3, #0
 8028638:	9305      	str	r3, [sp, #20]
 802863a:	4b9b      	ldr	r3, [pc, #620]	@ (80288a8 <read_conn+0x2f4>)
 802863c:	9304      	str	r3, [sp, #16]
 802863e:	9003      	str	r0, [sp, #12]
 8028640:	9502      	str	r5, [sp, #8]
 8028642:	f8cd a004 	str.w	sl, [sp, #4]
 8028646:	f8cd 9000 	str.w	r9, [sp]
 802864a:	465b      	mov	r3, fp
 802864c:	4632      	mov	r2, r6
 802864e:	4641      	mov	r1, r8
 8028650:	4638      	mov	r0, r7
 8028652:	f7ff fabd 	bl	8027bd0 <tx_tcp>
}
 8028656:	b009      	add	sp, #36	@ 0x24
 8028658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 802865c:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 8028660:	e7b4      	b.n	80285cc <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8028662:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 8028666:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028668:	6898      	ldr	r0, [r3, #8]
 802866a:	f7fd f9db 	bl	8025a24 <mg_ntohl>
 802866e:	4287      	cmp	r7, r0
 8028670:	d004      	beq.n	802867c <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8028672:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8028676:	f04f 0b10 	mov.w	fp, #16
 802867a:	e7cb      	b.n	8028614 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 802867c:	3701      	adds	r7, #1
 802867e:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8028682:	f04f 0b10 	mov.w	fp, #16
 8028686:	e7c5      	b.n	8028614 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 8028688:	68eb      	ldr	r3, [r5, #12]
 802868a:	2b00      	cmp	r3, #0
 802868c:	d0e3      	beq.n	8028656 <read_conn+0xa2>
  } else if (seq != s->ack) {
 802868e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8028692:	4282      	cmp	r2, r0
 8028694:	d046      	beq.n	8028724 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8028696:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 8028698:	42aa      	cmp	r2, r5
 802869a:	d025      	beq.n	80286e8 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 802869c:	4b83      	ldr	r3, [pc, #524]	@ (80288ac <read_conn+0x2f8>)
 802869e:	681b      	ldr	r3, [r3, #0]
 80286a0:	2b03      	cmp	r3, #3
 80286a2:	dc30      	bgt.n	8028706 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 80286a4:	6863      	ldr	r3, [r4, #4]
 80286a6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 80286a8:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80286ac:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 80286b0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 80286b4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80286b8:	f7fd f9b4 	bl	8025a24 <mg_ntohl>
 80286bc:	4605      	mov	r5, r0
 80286be:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80286c2:	f7fd f9af 	bl	8025a24 <mg_ntohl>
 80286c6:	2300      	movs	r3, #0
 80286c8:	9305      	str	r3, [sp, #20]
 80286ca:	4b77      	ldr	r3, [pc, #476]	@ (80288a8 <read_conn+0x2f4>)
 80286cc:	9304      	str	r3, [sp, #16]
 80286ce:	9003      	str	r0, [sp, #12]
 80286d0:	9502      	str	r5, [sp, #8]
 80286d2:	f8cd a004 	str.w	sl, [sp, #4]
 80286d6:	f8cd 9000 	str.w	r9, [sp]
 80286da:	2310      	movs	r3, #16
 80286dc:	4632      	mov	r2, r6
 80286de:	4641      	mov	r1, r8
 80286e0:	4638      	mov	r0, r7
 80286e2:	f7ff fa75 	bl	8027bd0 <tx_tcp>
 80286e6:	e7b6      	b.n	8028656 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 80286e8:	4b70      	ldr	r3, [pc, #448]	@ (80288ac <read_conn+0x2f8>)
 80286ea:	681b      	ldr	r3, [r3, #0]
 80286ec:	2b03      	cmp	r3, #3
 80286ee:	ddb2      	ble.n	8028656 <read_conn+0xa2>
 80286f0:	4b6f      	ldr	r3, [pc, #444]	@ (80288b0 <read_conn+0x2fc>)
 80286f2:	f241 52da 	movw	r2, #5594	@ 0x15da
 80286f6:	496f      	ldr	r1, [pc, #444]	@ (80288b4 <read_conn+0x300>)
 80286f8:	2004      	movs	r0, #4
 80286fa:	f7fd fd6d 	bl	80261d8 <mg_log_prefix>
 80286fe:	486e      	ldr	r0, [pc, #440]	@ (80288b8 <read_conn+0x304>)
 8028700:	f7fb fc18 	bl	8023f34 <mg_log>
 8028704:	e7a7      	b.n	8028656 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8028706:	4b6a      	ldr	r3, [pc, #424]	@ (80288b0 <read_conn+0x2fc>)
 8028708:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 802870c:	4969      	ldr	r1, [pc, #420]	@ (80288b4 <read_conn+0x300>)
 802870e:	2004      	movs	r0, #4
 8028710:	f7fd fd62 	bl	80261d8 <mg_log_prefix>
 8028714:	462b      	mov	r3, r5
 8028716:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 802871a:	4641      	mov	r1, r8
 802871c:	4867      	ldr	r0, [pc, #412]	@ (80288bc <read_conn+0x308>)
 802871e:	f7fb fc09 	bl	8023f34 <mg_log>
 8028722:	e7bf      	b.n	80286a4 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 8028724:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8028728:	f8d9 1008 	ldr.w	r1, [r9, #8]
 802872c:	1a52      	subs	r2, r2, r1
 802872e:	4293      	cmp	r3, r2
 8028730:	d905      	bls.n	802873e <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8028732:	4419      	add	r1, r3
 8028734:	4648      	mov	r0, r9
 8028736:	f7fe fb8b 	bl	8026e50 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 802873a:	2800      	cmp	r0, #0
 802873c:	d05c      	beq.n	80287f8 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 802873e:	f8d9 0000 	ldr.w	r0, [r9]
 8028742:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8028746:	68ea      	ldr	r2, [r5, #12]
 8028748:	68a9      	ldr	r1, [r5, #8]
 802874a:	4418      	add	r0, r3
 802874c:	f005 fb7c 	bl	802de48 <memcpy>
    io->len += pkt->pay.len;
 8028750:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8028754:	68ea      	ldr	r2, [r5, #12]
 8028756:	4413      	add	r3, r2
 8028758:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 802875c:	4b53      	ldr	r3, [pc, #332]	@ (80288ac <read_conn+0x2f8>)
 802875e:	681b      	ldr	r3, [r3, #0]
 8028760:	2b03      	cmp	r3, #3
 8028762:	dc4e      	bgt.n	8028802 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8028764:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028766:	6858      	ldr	r0, [r3, #4]
 8028768:	f7fd f95c 	bl	8025a24 <mg_ntohl>
 802876c:	68eb      	ldr	r3, [r5, #12]
 802876e:	4418      	add	r0, r3
 8028770:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 8028774:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8028778:	68ea      	ldr	r2, [r5, #12]
 802877a:	4413      	add	r3, r2
 802877c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8028780:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8028784:	4293      	cmp	r3, r2
 8028786:	d95e      	bls.n	8028846 <read_conn+0x292>
 8028788:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 802878c:	4298      	cmp	r0, r3
 802878e:	d05a      	beq.n	8028846 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8028790:	4b46      	ldr	r3, [pc, #280]	@ (80288ac <read_conn+0x2f8>)
 8028792:	681b      	ldr	r3, [r3, #0]
 8028794:	2b03      	cmp	r3, #3
 8028796:	dc48      	bgt.n	802882a <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8028798:	6863      	ldr	r3, [r4, #4]
 802879a:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 802879e:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80287a2:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 80287a6:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 80287aa:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80287ae:	f7fd f939 	bl	8025a24 <mg_ntohl>
 80287b2:	9007      	str	r0, [sp, #28]
 80287b4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80287b8:	f7fd f934 	bl	8025a24 <mg_ntohl>
 80287bc:	2700      	movs	r7, #0
 80287be:	9705      	str	r7, [sp, #20]
 80287c0:	9704      	str	r7, [sp, #16]
 80287c2:	9003      	str	r0, [sp, #12]
 80287c4:	9b07      	ldr	r3, [sp, #28]
 80287c6:	9302      	str	r3, [sp, #8]
 80287c8:	f8cd b004 	str.w	fp, [sp, #4]
 80287cc:	f8cd a000 	str.w	sl, [sp]
 80287d0:	2310      	movs	r3, #16
 80287d2:	4632      	mov	r2, r6
 80287d4:	4641      	mov	r1, r8
 80287d6:	4648      	mov	r0, r9
 80287d8:	f7ff f9fa 	bl	8027bd0 <tx_tcp>
      s->unacked = 0;
 80287dc:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 80287e0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80287e4:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 80287e8:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80287ec:	b37b      	cbz	r3, 802884e <read_conn+0x29a>
 80287ee:	4639      	mov	r1, r7
 80287f0:	4620      	mov	r0, r4
 80287f2:	f7ff fac9 	bl	8027d88 <settmout>
 80287f6:	e02a      	b.n	802884e <read_conn+0x29a>
    mg_error(c, "oom");
 80287f8:	4931      	ldr	r1, [pc, #196]	@ (80288c0 <read_conn+0x30c>)
 80287fa:	4620      	mov	r0, r4
 80287fc:	f7fd fdd4 	bl	80263a8 <mg_error>
 8028800:	e729      	b.n	8028656 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8028802:	4b2b      	ldr	r3, [pc, #172]	@ (80288b0 <read_conn+0x2fc>)
 8028804:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 8028808:	492a      	ldr	r1, [pc, #168]	@ (80288b4 <read_conn+0x300>)
 802880a:	2004      	movs	r0, #4
 802880c:	f7fd fce4 	bl	80261d8 <mg_log_prefix>
 8028810:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8028812:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028814:	6858      	ldr	r0, [r3, #4]
 8028816:	f7fd f905 	bl	8025a24 <mg_ntohl>
 802881a:	4602      	mov	r2, r0
 802881c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028820:	4639      	mov	r1, r7
 8028822:	4828      	ldr	r0, [pc, #160]	@ (80288c4 <read_conn+0x310>)
 8028824:	f7fb fb86 	bl	8023f34 <mg_log>
 8028828:	e79c      	b.n	8028764 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 802882a:	4b21      	ldr	r3, [pc, #132]	@ (80288b0 <read_conn+0x2fc>)
 802882c:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 8028830:	4920      	ldr	r1, [pc, #128]	@ (80288b4 <read_conn+0x300>)
 8028832:	2004      	movs	r0, #4
 8028834:	f7fd fcd0 	bl	80261d8 <mg_log_prefix>
 8028838:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 802883c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802883e:	4822      	ldr	r0, [pc, #136]	@ (80288c8 <read_conn+0x314>)
 8028840:	f7fb fb78 	bl	8023f34 <mg_log>
 8028844:	e7a8      	b.n	8028798 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8028846:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802884a:	2b01      	cmp	r3, #1
 802884c:	d11b      	bne.n	8028886 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 802884e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028852:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8028856:	2ac0      	cmp	r2, #192	@ 0xc0
 8028858:	f43f aefd 	beq.w	8028656 <read_conn+0xa2>
    } else if (c->is_tls) {
 802885c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028860:	d01b      	beq.n	802889a <read_conn+0x2e6>
      io = &c->recv;
 8028862:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 8028866:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8028868:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802886a:	1a5b      	subs	r3, r3, r1
 802886c:	68ea      	ldr	r2, [r5, #12]
 802886e:	4293      	cmp	r3, r2
 8028870:	d204      	bcs.n	802887c <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8028872:	4411      	add	r1, r2
 8028874:	4630      	mov	r0, r6
 8028876:	f7fe faeb 	bl	8026e50 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 802887a:	b148      	cbz	r0, 8028890 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 802887c:	4631      	mov	r1, r6
 802887e:	4620      	mov	r0, r4
 8028880:	f7fd fdca 	bl	8026418 <handle_tls_recv>
 8028884:	e6e7      	b.n	8028656 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8028886:	2101      	movs	r1, #1
 8028888:	4620      	mov	r0, r4
 802888a:	f7ff fa7d 	bl	8027d88 <settmout>
 802888e:	e7de      	b.n	802884e <read_conn+0x29a>
        mg_error(c, "oom");
 8028890:	490b      	ldr	r1, [pc, #44]	@ (80288c0 <read_conn+0x30c>)
 8028892:	4620      	mov	r0, r4
 8028894:	f7fd fd88 	bl	80263a8 <mg_error>
 8028898:	e6dd      	b.n	8028656 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802889a:	f105 020c 	add.w	r2, r5, #12
 802889e:	2107      	movs	r1, #7
 80288a0:	4620      	mov	r0, r4
 80288a2:	f7fa f8fe 	bl	8022aa2 <mg_call>
}
 80288a6:	e6d6      	b.n	8028656 <read_conn+0xa2>
 80288a8:	08036c70 	.word	0x08036c70
 80288ac:	2000012c 	.word	0x2000012c
 80288b0:	0803b5f0 	.word	0x0803b5f0
 80288b4:	0803ad04 	.word	0x0803ad04
 80288b8:	0803b27c 	.word	0x0803b27c
 80288bc:	0803b294 	.word	0x0803b294
 80288c0:	0803b004 	.word	0x0803b004
 80288c4:	0803b2ac 	.word	0x0803b2ac
 80288c8:	0803b2c0 	.word	0x0803b2c0

080288cc <accept_conn>:
                                         struct pkt *pkt) {
 80288cc:	b570      	push	{r4, r5, r6, lr}
 80288ce:	4605      	mov	r5, r0
 80288d0:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 80288d2:	6840      	ldr	r0, [r0, #4]
 80288d4:	f7fa fe58 	bl	8023588 <mg_alloc_conn>
  if (c == NULL) {
 80288d8:	4604      	mov	r4, r0
 80288da:	2800      	cmp	r0, #0
 80288dc:	d058      	beq.n	8028990 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 80288de:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80288e0:	6898      	ldr	r0, [r3, #8]
 80288e2:	f7fd f89f 	bl	8025a24 <mg_ntohl>
 80288e6:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 80288ea:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80288ec:	6858      	ldr	r0, [r3, #4]
 80288ee:	f7fd f899 	bl	8025a24 <mg_ntohl>
 80288f2:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 80288f6:	6933      	ldr	r3, [r6, #16]
 80288f8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80288fc:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8028900:	895b      	ldrh	r3, [r3, #10]
 8028902:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8028906:	2100      	movs	r1, #0
 8028908:	4620      	mov	r0, r4
 802890a:	f7ff fa3d 	bl	8027d88 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802890e:	69f3      	ldr	r3, [r6, #28]
 8028910:	68db      	ldr	r3, [r3, #12]
 8028912:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 8028914:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8028916:	881b      	ldrh	r3, [r3, #0]
 8028918:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 802891a:	4b2c      	ldr	r3, [pc, #176]	@ (80289cc <accept_conn+0x100>)
 802891c:	681b      	ldr	r3, [r3, #0]
 802891e:	2b02      	cmp	r3, #2
 8028920:	dc45      	bgt.n	80289ae <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8028922:	686b      	ldr	r3, [r5, #4]
 8028924:	681b      	ldr	r3, [r3, #0]
 8028926:	6023      	str	r3, [r4, #0]
 8028928:	686b      	ldr	r3, [r5, #4]
 802892a:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 802892c:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028930:	f043 0304 	orr.w	r3, r3, #4
 8028934:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8028938:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 802893c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8028940:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 8028944:	f363 02c3 	bfi	r2, r3, #3, #1
 8028948:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 802894c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8028950:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 8028954:	f104 0608 	add.w	r6, r4, #8
 8028958:	f105 0c08 	add.w	ip, r5, #8
 802895c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8028960:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8028962:	f8dc 3000 	ldr.w	r3, [ip]
 8028966:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 8028968:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 802896c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 8028970:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8028972:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8028974:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8028976:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 8028978:	2200      	movs	r2, #0
 802897a:	2101      	movs	r1, #1
 802897c:	4620      	mov	r0, r4
 802897e:	f7fa f890 	bl	8022aa2 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8028982:	2200      	movs	r2, #0
 8028984:	2105      	movs	r1, #5
 8028986:	4620      	mov	r0, r4
 8028988:	f7fa f88b 	bl	8022aa2 <mg_call>
}
 802898c:	4620      	mov	r0, r4
 802898e:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 8028990:	4b0e      	ldr	r3, [pc, #56]	@ (80289cc <accept_conn+0x100>)
 8028992:	681b      	ldr	r3, [r3, #0]
 8028994:	2b00      	cmp	r3, #0
 8028996:	ddf9      	ble.n	802898c <accept_conn+0xc0>
 8028998:	4b0d      	ldr	r3, [pc, #52]	@ (80289d0 <accept_conn+0x104>)
 802899a:	f241 5268 	movw	r2, #5480	@ 0x1568
 802899e:	490d      	ldr	r1, [pc, #52]	@ (80289d4 <accept_conn+0x108>)
 80289a0:	2001      	movs	r0, #1
 80289a2:	f7fd fc19 	bl	80261d8 <mg_log_prefix>
 80289a6:	480c      	ldr	r0, [pc, #48]	@ (80289d8 <accept_conn+0x10c>)
 80289a8:	f7fb fac4 	bl	8023f34 <mg_log>
    return NULL;
 80289ac:	e7ee      	b.n	802898c <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 80289ae:	4b08      	ldr	r3, [pc, #32]	@ (80289d0 <accept_conn+0x104>)
 80289b0:	f241 5271 	movw	r2, #5489	@ 0x1571
 80289b4:	4907      	ldr	r1, [pc, #28]	@ (80289d4 <accept_conn+0x108>)
 80289b6:	2003      	movs	r0, #3
 80289b8:	f7fd fc0e 	bl	80261d8 <mg_log_prefix>
 80289bc:	f104 031c 	add.w	r3, r4, #28
 80289c0:	4a06      	ldr	r2, [pc, #24]	@ (80289dc <accept_conn+0x110>)
 80289c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80289c4:	4806      	ldr	r0, [pc, #24]	@ (80289e0 <accept_conn+0x114>)
 80289c6:	f7fb fab5 	bl	8023f34 <mg_log>
 80289ca:	e7aa      	b.n	8028922 <accept_conn+0x56>
 80289cc:	2000012c 	.word	0x2000012c
 80289d0:	0803b5e4 	.word	0x0803b5e4
 80289d4:	0803ad04 	.word	0x0803ad04
 80289d8:	0803b32c 	.word	0x0803b32c
 80289dc:	0802608d 	.word	0x0802608d
 80289e0:	0803b2d0 	.word	0x0803b2d0

080289e4 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80289e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80289e8:	b083      	sub	sp, #12
 80289ea:	4606      	mov	r6, r0
 80289ec:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 80289ee:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 80289f0:	2200      	movs	r2, #0
 80289f2:	4638      	mov	r0, r7
 80289f4:	f7f9 fee9 	bl	80227ca <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 80289f8:	4605      	mov	r5, r0
 80289fa:	b380      	cbz	r0, 8028a5e <rx_tcp+0x7a>
 80289fc:	f100 08b0 	add.w	r8, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8028a00:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028a04:	f013 0f20 	tst.w	r3, #32
 8028a08:	d02b      	beq.n	8028a62 <rx_tcp+0x7e>
 8028a0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028a0c:	7b5a      	ldrb	r2, [r3, #13]
 8028a0e:	2a12      	cmp	r2, #18
 8028a10:	d126      	bne.n	8028a60 <rx_tcp+0x7c>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8028a12:	6898      	ldr	r0, [r3, #8]
 8028a14:	f7fd f806 	bl	8025a24 <mg_ntohl>
 8028a18:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 8028a1c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028a1e:	6858      	ldr	r0, [r3, #4]
 8028a20:	f7fd f800 	bl	8025a24 <mg_ntohl>
 8028a24:	3001      	adds	r0, #1
 8028a26:	f8c8 0004 	str.w	r0, [r8, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 8028a2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028a2c:	689b      	ldr	r3, [r3, #8]
 8028a2e:	2700      	movs	r7, #0
 8028a30:	9701      	str	r7, [sp, #4]
 8028a32:	9700      	str	r7, [sp, #0]
 8028a34:	2210      	movs	r2, #16
 8028a36:	4621      	mov	r1, r4
 8028a38:	4630      	mov	r0, r6
 8028a3a:	f7ff f975 	bl	8027d28 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 8028a3e:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8028a42:	f367 1345 	bfi	r3, r7, #5, #1
 8028a46:	f885 30ac 	strb.w	r3, [r5, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 8028a4a:	4639      	mov	r1, r7
 8028a4c:	4628      	mov	r0, r5
 8028a4e:	f7ff f99b 	bl	8027d88 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8028a52:	463a      	mov	r2, r7
 8028a54:	2104      	movs	r1, #4
 8028a56:	4628      	mov	r0, r5
 8028a58:	f7fa f823 	bl	8022aa2 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 8028a5c:	e01b      	b.n	8028a96 <rx_tcp+0xb2>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8028a5e:	4680      	mov	r8, r0
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8028a60:	b385      	cbz	r5, 8028ac4 <rx_tcp+0xe0>
 8028a62:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8028a66:	f013 0f20 	tst.w	r3, #32
 8028a6a:	d004      	beq.n	8028a76 <rx_tcp+0x92>
 8028a6c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028a6e:	7b5a      	ldrb	r2, [r3, #13]
 8028a70:	2a10      	cmp	r2, #16
 8028a72:	d113      	bne.n	8028a9c <rx_tcp+0xb8>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8028a74:	b335      	cbz	r5, 8028ac4 <rx_tcp+0xe0>
 8028a76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028a78:	7b5b      	ldrb	r3, [r3, #13]
 8028a7a:	f013 0f04 	tst.w	r3, #4
 8028a7e:	d117      	bne.n	8028ab0 <rx_tcp+0xcc>
  } else if (c != NULL) {
 8028a80:	b305      	cbz	r5, 8028ac4 <rx_tcp+0xe0>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8028a82:	2300      	movs	r3, #0
 8028a84:	f888 301f 	strb.w	r3, [r8, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8028a88:	f898 301e 	ldrb.w	r3, [r8, #30]
 8028a8c:	b1ab      	cbz	r3, 8028aba <rx_tcp+0xd6>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 8028a8e:	4621      	mov	r1, r4
 8028a90:	4628      	mov	r0, r5
 8028a92:	f7ff fd8f 	bl	80285b4 <read_conn>
}
 8028a96:	b003      	add	sp, #12
 8028a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028a9c:	689b      	ldr	r3, [r3, #8]
 8028a9e:	2200      	movs	r2, #0
 8028aa0:	9201      	str	r2, [sp, #4]
 8028aa2:	9200      	str	r2, [sp, #0]
 8028aa4:	2214      	movs	r2, #20
 8028aa6:	4621      	mov	r1, r4
 8028aa8:	4630      	mov	r0, r6
 8028aaa:	f7ff f93d 	bl	8027d28 <tx_tcp_pkt>
 8028aae:	e7f2      	b.n	8028a96 <rx_tcp+0xb2>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8028ab0:	4934      	ldr	r1, [pc, #208]	@ (8028b84 <rx_tcp+0x1a0>)
 8028ab2:	4628      	mov	r0, r5
 8028ab4:	f7fd fc78 	bl	80263a8 <mg_error>
 8028ab8:	e7ed      	b.n	8028a96 <rx_tcp+0xb2>
      settmout(c,
 8028aba:	2100      	movs	r1, #0
 8028abc:	4628      	mov	r0, r5
 8028abe:	f7ff f963 	bl	8027d88 <settmout>
 8028ac2:	e7e4      	b.n	8028a8e <rx_tcp+0xaa>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8028ac4:	2201      	movs	r2, #1
 8028ac6:	4621      	mov	r1, r4
 8028ac8:	4638      	mov	r0, r7
 8028aca:	f7f9 fe7e 	bl	80227ca <getpeer>
 8028ace:	4607      	mov	r7, r0
 8028ad0:	b168      	cbz	r0, 8028aee <rx_tcp+0x10a>
  } else if (pkt->tcp->flags & TH_RST) {
 8028ad2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8028ad4:	7b6b      	ldrb	r3, [r5, #13]
 8028ad6:	f013 0f04 	tst.w	r3, #4
 8028ada:	d013      	beq.n	8028b04 <rx_tcp+0x120>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8028adc:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028ae0:	f013 0f04 	tst.w	r3, #4
 8028ae4:	d0d7      	beq.n	8028a96 <rx_tcp+0xb2>
 8028ae6:	4927      	ldr	r1, [pc, #156]	@ (8028b84 <rx_tcp+0x1a0>)
 8028ae8:	f7fd fc5e 	bl	80263a8 <mg_error>
 8028aec:	e7d3      	b.n	8028a96 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028aee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028af0:	689b      	ldr	r3, [r3, #8]
 8028af2:	2200      	movs	r2, #0
 8028af4:	9201      	str	r2, [sp, #4]
 8028af6:	9200      	str	r2, [sp, #0]
 8028af8:	2214      	movs	r2, #20
 8028afa:	4621      	mov	r1, r4
 8028afc:	4630      	mov	r0, r6
 8028afe:	f7ff f913 	bl	8027d28 <tx_tcp_pkt>
 8028b02:	e7c8      	b.n	8028a96 <rx_tcp+0xb2>
  } else if (pkt->tcp->flags & TH_SYN) {
 8028b04:	f013 0f02 	tst.w	r3, #2
 8028b08:	d11d      	bne.n	8028b46 <rx_tcp+0x162>
  } else if (pkt->tcp->flags & TH_FIN) {
 8028b0a:	f013 0f01 	tst.w	r3, #1
 8028b0e:	d129      	bne.n	8028b64 <rx_tcp+0x180>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8028b10:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8028b14:	4648      	mov	r0, r9
 8028b16:	f7fc ff85 	bl	8025a24 <mg_ntohl>
 8028b1a:	4680      	mov	r8, r0
 8028b1c:	8828      	ldrh	r0, [r5, #0]
 8028b1e:	f7fd f819 	bl	8025b54 <mg_ntohs>
 8028b22:	1c43      	adds	r3, r0, #1
 8028b24:	4598      	cmp	r8, r3
 8028b26:	d027      	beq.n	8028b78 <rx_tcp+0x194>
  } else if (!c->is_accepted) {  // no peer
 8028b28:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8028b2c:	f013 0f04 	tst.w	r3, #4
 8028b30:	d1b1      	bne.n	8028a96 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028b32:	2300      	movs	r3, #0
 8028b34:	9301      	str	r3, [sp, #4]
 8028b36:	9300      	str	r3, [sp, #0]
 8028b38:	464b      	mov	r3, r9
 8028b3a:	2214      	movs	r2, #20
 8028b3c:	4621      	mov	r1, r4
 8028b3e:	4630      	mov	r0, r6
 8028b40:	f7ff f8f2 	bl	8027d28 <tx_tcp_pkt>
}
 8028b44:	e7a7      	b.n	8028a96 <rx_tcp+0xb2>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 8028b46:	8828      	ldrh	r0, [r5, #0]
 8028b48:	f7fd f804 	bl	8025b54 <mg_ntohs>
 8028b4c:	f7fc ff6a 	bl	8025a24 <mg_ntohl>
 8028b50:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8028b52:	2200      	movs	r2, #0
 8028b54:	9201      	str	r2, [sp, #4]
 8028b56:	9200      	str	r2, [sp, #0]
 8028b58:	2212      	movs	r2, #18
 8028b5a:	4621      	mov	r1, r4
 8028b5c:	4630      	mov	r0, r6
 8028b5e:	f7ff f8e3 	bl	8027d28 <tx_tcp_pkt>
 8028b62:	e798      	b.n	8028a96 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028b64:	68ab      	ldr	r3, [r5, #8]
 8028b66:	2200      	movs	r2, #0
 8028b68:	9201      	str	r2, [sp, #4]
 8028b6a:	9200      	str	r2, [sp, #0]
 8028b6c:	2211      	movs	r2, #17
 8028b6e:	4621      	mov	r1, r4
 8028b70:	4630      	mov	r0, r6
 8028b72:	f7ff f8d9 	bl	8027d28 <tx_tcp_pkt>
 8028b76:	e78e      	b.n	8028a96 <rx_tcp+0xb2>
    accept_conn(c, pkt);
 8028b78:	4621      	mov	r1, r4
 8028b7a:	4638      	mov	r0, r7
 8028b7c:	f7ff fea6 	bl	80288cc <accept_conn>
 8028b80:	e789      	b.n	8028a96 <rx_tcp+0xb2>
 8028b82:	bf00      	nop
 8028b84:	0803b2e0 	.word	0x0803b2e0

08028b88 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 8028b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028b8c:	b082      	sub	sp, #8
 8028b8e:	4604      	mov	r4, r0
 8028b90:	4688      	mov	r8, r1
 8028b92:	4617      	mov	r7, r2
 8028b94:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 8028b96:	6819      	ldr	r1, [r3, #0]
 8028b98:	2900      	cmp	r1, #0
 8028b9a:	d037      	beq.n	8028c0c <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 8028b9c:	685b      	ldr	r3, [r3, #4]
 8028b9e:	2b00      	cmp	r3, #0
 8028ba0:	d038      	beq.n	8028c14 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 8028ba2:	686b      	ldr	r3, [r5, #4]
 8028ba4:	2b00      	cmp	r3, #0
 8028ba6:	d040      	beq.n	8028c2a <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8028ba8:	2118      	movs	r1, #24
 8028baa:	2001      	movs	r0, #1
 8028bac:	f7f9 fde8 	bl	8022780 <mg_calloc>
 8028bb0:	4606      	mov	r6, r0
 8028bb2:	2800      	cmp	r0, #0
 8028bb4:	d03e      	beq.n	8028c34 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8028bb6:	6863      	ldr	r3, [r4, #4]
 8028bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8028bba:	2b00      	cmp	r3, #0
 8028bbc:	d03f      	beq.n	8028c3e <mg_sendnsreq+0xb6>
 8028bbe:	8a1b      	ldrh	r3, [r3, #16]
 8028bc0:	3301      	adds	r3, #1
 8028bc2:	b29b      	uxth	r3, r3
 8028bc4:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8028bc6:	6863      	ldr	r3, [r4, #4]
 8028bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028bca:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 8028bcc:	6863      	ldr	r3, [r4, #4]
 8028bce:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8028bd0:	f7fd fafc 	bl	80261cc <mg_millis>
 8028bd4:	19c0      	adds	r0, r0, r7
 8028bd6:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 8028bda:	60b0      	str	r0, [r6, #8]
 8028bdc:	60f1      	str	r1, [r6, #12]
    d->c = c;
 8028bde:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 8028be0:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028be4:	f043 0308 	orr.w	r3, r3, #8
 8028be8:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8028bec:	4b21      	ldr	r3, [pc, #132]	@ (8028c74 <mg_sendnsreq+0xec>)
 8028bee:	681b      	ldr	r3, [r3, #0]
 8028bf0:	2b03      	cmp	r3, #3
 8028bf2:	dc26      	bgt.n	8028c42 <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8028bf4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8028bf8:	8a32      	ldrh	r2, [r6, #16]
 8028bfa:	4641      	mov	r1, r8
 8028bfc:	6868      	ldr	r0, [r5, #4]
 8028bfe:	f7fe fbd5 	bl	80273ac <mg_dns_send>
 8028c02:	2800      	cmp	r0, #0
 8028c04:	d031      	beq.n	8028c6a <mg_sendnsreq+0xe2>
}
 8028c06:	b002      	add	sp, #8
 8028c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8028c0c:	491a      	ldr	r1, [pc, #104]	@ (8028c78 <mg_sendnsreq+0xf0>)
 8028c0e:	f7fd fbcb 	bl	80263a8 <mg_error>
 8028c12:	e7c6      	b.n	8028ba2 <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8028c14:	461a      	mov	r2, r3
 8028c16:	6840      	ldr	r0, [r0, #4]
 8028c18:	f000 f866 	bl	8028ce8 <mg_connect>
 8028c1c:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 8028c1e:	2800      	cmp	r0, #0
 8028c20:	d0bf      	beq.n	8028ba2 <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 8028c22:	4b16      	ldr	r3, [pc, #88]	@ (8028c7c <mg_sendnsreq+0xf4>)
 8028c24:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8028c28:	e7bb      	b.n	8028ba2 <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 8028c2a:	4915      	ldr	r1, [pc, #84]	@ (8028c80 <mg_sendnsreq+0xf8>)
 8028c2c:	4620      	mov	r0, r4
 8028c2e:	f7fd fbbb 	bl	80263a8 <mg_error>
 8028c32:	e7e8      	b.n	8028c06 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 8028c34:	4913      	ldr	r1, [pc, #76]	@ (8028c84 <mg_sendnsreq+0xfc>)
 8028c36:	4620      	mov	r0, r4
 8028c38:	f7fd fbb6 	bl	80263a8 <mg_error>
 8028c3c:	e7e3      	b.n	8028c06 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8028c3e:	2301      	movs	r3, #1
 8028c40:	e7c0      	b.n	8028bc4 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8028c42:	4b11      	ldr	r3, [pc, #68]	@ (8028c88 <mg_sendnsreq+0x100>)
 8028c44:	f240 521e 	movw	r2, #1310	@ 0x51e
 8028c48:	4910      	ldr	r1, [pc, #64]	@ (8028c8c <mg_sendnsreq+0x104>)
 8028c4a:	2004      	movs	r0, #4
 8028c4c:	f7fd fac4 	bl	80261d8 <mg_log_prefix>
 8028c50:	8a33      	ldrh	r3, [r6, #16]
 8028c52:	9301      	str	r3, [sp, #4]
 8028c54:	682b      	ldr	r3, [r5, #0]
 8028c56:	9300      	str	r3, [sp, #0]
 8028c58:	f8d8 3000 	ldr.w	r3, [r8]
 8028c5c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8028c60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028c62:	480b      	ldr	r0, [pc, #44]	@ (8028c90 <mg_sendnsreq+0x108>)
 8028c64:	f7fb f966 	bl	8023f34 <mg_log>
 8028c68:	e7c4      	b.n	8028bf4 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 8028c6a:	490a      	ldr	r1, [pc, #40]	@ (8028c94 <mg_sendnsreq+0x10c>)
 8028c6c:	6868      	ldr	r0, [r5, #4]
 8028c6e:	f7fd fb9b 	bl	80263a8 <mg_error>
}
 8028c72:	e7c8      	b.n	8028c06 <mg_sendnsreq+0x7e>
 8028c74:	2000012c 	.word	0x2000012c
 8028c78:	0803b2ec 	.word	0x0803b2ec
 8028c7c:	08028125 	.word	0x08028125
 8028c80:	0803b318 	.word	0x0803b318
 8028c84:	0803b324 	.word	0x0803b324
 8028c88:	0803b76c 	.word	0x0803b76c
 8028c8c:	0803ad04 	.word	0x0803ad04
 8028c90:	0803b330 	.word	0x0803b330
 8028c94:	0803b354 	.word	0x0803b354

08028c98 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 8028c98:	b570      	push	{r4, r5, r6, lr}
 8028c9a:	b084      	sub	sp, #16
 8028c9c:	4604      	mov	r4, r0
 8028c9e:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 8028ca0:	ad02      	add	r5, sp, #8
 8028ca2:	4628      	mov	r0, r5
 8028ca4:	f7fc fde8 	bl	8025878 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8028ca8:	4630      	mov	r0, r6
 8028caa:	f7fc fe03 	bl	80258b4 <mg_url_port>
 8028cae:	f7fc ff51 	bl	8025b54 <mg_ntohs>
 8028cb2:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8028cb4:	f104 021c 	add.w	r2, r4, #28
 8028cb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028cbc:	f7fc fee6 	bl	8025a8c <mg_aton>
 8028cc0:	b960      	cbnz	r0, 8028cdc <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8028cc2:	6862      	ldr	r2, [r4, #4]
 8028cc4:	7e11      	ldrb	r1, [r2, #24]
 8028cc6:	b169      	cbz	r1, 8028ce4 <mg_resolve+0x4c>
 8028cc8:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8028ccc:	6952      	ldr	r2, [r2, #20]
 8028cce:	9100      	str	r1, [sp, #0]
 8028cd0:	a902      	add	r1, sp, #8
 8028cd2:	4620      	mov	r0, r4
 8028cd4:	f7ff ff58 	bl	8028b88 <mg_sendnsreq>
}
 8028cd8:	b004      	add	sp, #16
 8028cda:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 8028cdc:	4620      	mov	r0, r4
 8028cde:	f7ff f951 	bl	8027f84 <mg_connect_resolved>
 8028ce2:	e7f9      	b.n	8028cd8 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8028ce4:	1d13      	adds	r3, r2, #4
 8028ce6:	e7f1      	b.n	8028ccc <mg_resolve+0x34>

08028ce8 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 8028ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 8028cec:	b129      	cbz	r1, 8028cfa <mg_connect+0x12>
 8028cee:	4680      	mov	r8, r0
 8028cf0:	4617      	mov	r7, r2
 8028cf2:	461e      	mov	r6, r3
 8028cf4:	460d      	mov	r5, r1
 8028cf6:	780b      	ldrb	r3, [r1, #0]
 8028cf8:	b99b      	cbnz	r3, 8028d22 <mg_connect+0x3a>
    MG_ERROR(("null url"));
 8028cfa:	4b30      	ldr	r3, [pc, #192]	@ (8028dbc <mg_connect+0xd4>)
 8028cfc:	681b      	ldr	r3, [r3, #0]
 8028cfe:	2b00      	cmp	r3, #0
 8028d00:	dc03      	bgt.n	8028d0a <mg_connect+0x22>
  struct mg_connection *c = NULL;
 8028d02:	2400      	movs	r4, #0
}
 8028d04:	4620      	mov	r0, r4
 8028d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 8028d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8028dc0 <mg_connect+0xd8>)
 8028d0c:	f241 22be 	movw	r2, #4798	@ 0x12be
 8028d10:	492c      	ldr	r1, [pc, #176]	@ (8028dc4 <mg_connect+0xdc>)
 8028d12:	2001      	movs	r0, #1
 8028d14:	f7fd fa60 	bl	80261d8 <mg_log_prefix>
 8028d18:	482b      	ldr	r0, [pc, #172]	@ (8028dc8 <mg_connect+0xe0>)
 8028d1a:	f7fb f90b 	bl	8023f34 <mg_log>
  struct mg_connection *c = NULL;
 8028d1e:	2400      	movs	r4, #0
 8028d20:	e7f0      	b.n	8028d04 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8028d22:	f7fa fc31 	bl	8023588 <mg_alloc_conn>
 8028d26:	4604      	mov	r4, r0
 8028d28:	b358      	cbz	r0, 8028d82 <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8028d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8028d2e:	6003      	str	r3, [r0, #0]
 8028d30:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8028d34:	2204      	movs	r2, #4
 8028d36:	4925      	ldr	r1, [pc, #148]	@ (8028dcc <mg_connect+0xe4>)
 8028d38:	4628      	mov	r0, r5
 8028d3a:	f003 fe7e 	bl	802ca3a <strncmp>
 8028d3e:	fab0 f080 	clz	r0, r0
 8028d42:	0940      	lsrs	r0, r0, #5
 8028d44:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028d48:	f360 0300 	bfi	r3, r0, #0, #1
 8028d4c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8028d50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028d54:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 8028d56:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 8028d58:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028d5c:	f043 0302 	orr.w	r3, r3, #2
 8028d60:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 8028d64:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8028d66:	4b15      	ldr	r3, [pc, #84]	@ (8028dbc <mg_connect+0xd4>)
 8028d68:	681b      	ldr	r3, [r3, #0]
 8028d6a:	2b02      	cmp	r3, #2
 8028d6c:	dc18      	bgt.n	8028da0 <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 8028d6e:	462a      	mov	r2, r5
 8028d70:	2101      	movs	r1, #1
 8028d72:	4620      	mov	r0, r4
 8028d74:	f7f9 fe95 	bl	8022aa2 <mg_call>
    mg_resolve(c, url);
 8028d78:	4629      	mov	r1, r5
 8028d7a:	4620      	mov	r0, r4
 8028d7c:	f7ff ff8c 	bl	8028c98 <mg_resolve>
 8028d80:	e7c0      	b.n	8028d04 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 8028d82:	4b0e      	ldr	r3, [pc, #56]	@ (8028dbc <mg_connect+0xd4>)
 8028d84:	681b      	ldr	r3, [r3, #0]
 8028d86:	2b00      	cmp	r3, #0
 8028d88:	ddbc      	ble.n	8028d04 <mg_connect+0x1c>
 8028d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8028dc0 <mg_connect+0xd8>)
 8028d8c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8028d90:	490c      	ldr	r1, [pc, #48]	@ (8028dc4 <mg_connect+0xdc>)
 8028d92:	2001      	movs	r0, #1
 8028d94:	f7fd fa20 	bl	80261d8 <mg_log_prefix>
 8028d98:	480d      	ldr	r0, [pc, #52]	@ (8028dd0 <mg_connect+0xe8>)
 8028d9a:	f7fb f8cb 	bl	8023f34 <mg_log>
 8028d9e:	e7b1      	b.n	8028d04 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8028da0:	4b07      	ldr	r3, [pc, #28]	@ (8028dc0 <mg_connect+0xd8>)
 8028da2:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 8028da6:	4907      	ldr	r1, [pc, #28]	@ (8028dc4 <mg_connect+0xdc>)
 8028da8:	2003      	movs	r0, #3
 8028daa:	f7fd fa15 	bl	80261d8 <mg_log_prefix>
 8028dae:	462b      	mov	r3, r5
 8028db0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8028db2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028db4:	4807      	ldr	r0, [pc, #28]	@ (8028dd4 <mg_connect+0xec>)
 8028db6:	f7fb f8bd 	bl	8023f34 <mg_log>
 8028dba:	e7d8      	b.n	8028d6e <mg_connect+0x86>
 8028dbc:	2000012c 	.word	0x2000012c
 8028dc0:	0803b6e0 	.word	0x0803b6e0
 8028dc4:	0803ad04 	.word	0x0803ad04
 8028dc8:	0803b360 	.word	0x0803b360
 8028dcc:	0803b038 	.word	0x0803b038
 8028dd0:	0803b32c 	.word	0x0803b32c
 8028dd4:	0803ad60 	.word	0x0803ad60

08028dd8 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 8028dd8:	b530      	push	{r4, r5, lr}
 8028dda:	b091      	sub	sp, #68	@ 0x44
 8028ddc:	4614      	mov	r4, r2
 8028dde:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8028de0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028de2:	f7ff ff81 	bl	8028ce8 <mg_connect>
  if (c != NULL) {
 8028de6:	4605      	mov	r5, r0
 8028de8:	b160      	cbz	r0, 8028e04 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 8028dea:	2240      	movs	r2, #64	@ 0x40
 8028dec:	2100      	movs	r1, #0
 8028dee:	4668      	mov	r0, sp
 8028df0:	f003 fdee 	bl	802c9d0 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8028df4:	b14c      	cbz	r4, 8028e0a <mg_mqtt_connect+0x32>
 8028df6:	4621      	mov	r1, r4
 8028df8:	4628      	mov	r0, r5
 8028dfa:	f7fe fbfd 	bl	80275f8 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 8028dfe:	4b04      	ldr	r3, [pc, #16]	@ (8028e10 <mg_mqtt_connect+0x38>)
 8028e00:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 8028e04:	4628      	mov	r0, r5
 8028e06:	b011      	add	sp, #68	@ 0x44
 8028e08:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8028e0a:	466c      	mov	r4, sp
 8028e0c:	e7f3      	b.n	8028df6 <mg_mqtt_connect+0x1e>
 8028e0e:	bf00      	nop
 8028e10:	080279d1 	.word	0x080279d1

08028e14 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8028e14:	b538      	push	{r3, r4, r5, lr}
 8028e16:	4605      	mov	r5, r0
 8028e18:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8028e1a:	680b      	ldr	r3, [r1, #0]
 8028e1c:	b90b      	cbnz	r3, 8028e22 <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8028e1e:	888b      	ldrh	r3, [r1, #4]
 8028e20:	b1a3      	cbz	r3, 8028e4c <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8028e22:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8028e24:	681b      	ldr	r3, [r3, #0]
 8028e26:	b34b      	cbz	r3, 8028e7c <mg_tcpip_init+0x68>
 8028e28:	4620      	mov	r0, r4
 8028e2a:	4798      	blx	r3
 8028e2c:	bb30      	cbnz	r0, 8028e7c <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 8028e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8028f1c <mg_tcpip_init+0x108>)
 8028e30:	681b      	ldr	r3, [r3, #0]
 8028e32:	2b00      	cmp	r3, #0
 8028e34:	dd5f      	ble.n	8028ef6 <mg_tcpip_init+0xe2>
 8028e36:	4b3a      	ldr	r3, [pc, #232]	@ (8028f20 <mg_tcpip_init+0x10c>)
 8028e38:	f241 7223 	movw	r2, #5923	@ 0x1723
 8028e3c:	4939      	ldr	r1, [pc, #228]	@ (8028f24 <mg_tcpip_init+0x110>)
 8028e3e:	2001      	movs	r0, #1
 8028e40:	f7fd f9ca 	bl	80261d8 <mg_log_prefix>
 8028e44:	4838      	ldr	r0, [pc, #224]	@ (8028f28 <mg_tcpip_init+0x114>)
 8028e46:	f7fb f875 	bl	8023f34 <mg_log>
 8028e4a:	e054      	b.n	8028ef6 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 8028e4c:	4608      	mov	r0, r1
 8028e4e:	2302      	movs	r3, #2
 8028e50:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8028e54:	2105      	movs	r1, #5
 8028e56:	f7fc fdaa 	bl	80259ae <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 8028e5a:	4b30      	ldr	r3, [pc, #192]	@ (8028f1c <mg_tcpip_init+0x108>)
 8028e5c:	681b      	ldr	r3, [r3, #0]
 8028e5e:	2b01      	cmp	r3, #1
 8028e60:	dddf      	ble.n	8028e22 <mg_tcpip_init+0xe>
 8028e62:	4b2f      	ldr	r3, [pc, #188]	@ (8028f20 <mg_tcpip_init+0x10c>)
 8028e64:	f241 721f 	movw	r2, #5919	@ 0x171f
 8028e68:	492e      	ldr	r1, [pc, #184]	@ (8028f24 <mg_tcpip_init+0x110>)
 8028e6a:	2002      	movs	r0, #2
 8028e6c:	f7fd f9b4 	bl	80261d8 <mg_log_prefix>
 8028e70:	4622      	mov	r2, r4
 8028e72:	492e      	ldr	r1, [pc, #184]	@ (8028f2c <mg_tcpip_init+0x118>)
 8028e74:	482e      	ldr	r0, [pc, #184]	@ (8028f30 <mg_tcpip_init+0x11c>)
 8028e76:	f7fb f85d 	bl	8023f34 <mg_log>
 8028e7a:	e7d2      	b.n	8028e22 <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8028e7c:	f240 6104 	movw	r1, #1540	@ 0x604
 8028e80:	2001      	movs	r0, #1
 8028e82:	f7f9 fc7d 	bl	8022780 <mg_calloc>
 8028e86:	6160      	str	r0, [r4, #20]
 8028e88:	f240 6304 	movw	r3, #1540	@ 0x604
 8028e8c:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 8028e8e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8028e90:	b92b      	cbnz	r3, 8028e9e <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8028e92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8028e94:	689b      	ldr	r3, [r3, #8]
 8028e96:	b37b      	cbz	r3, 8028ef8 <mg_tcpip_init+0xe4>
 8028e98:	f240 6304 	movw	r3, #1540	@ 0x604
 8028e9c:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8028e9e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8028ea0:	2001      	movs	r0, #1
 8028ea2:	f7f9 fc6d 	bl	8022780 <mg_calloc>
 8028ea6:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8028ea8:	f7fd f990 	bl	80261cc <mg_millis>
 8028eac:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 8028eb0:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 8028eb2:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8028eb4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8028eb8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 8028ebc:	2330      	movs	r3, #48	@ 0x30
 8028ebe:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8028ec0:	68a3      	ldr	r3, [r4, #8]
 8028ec2:	b90b      	cbnz	r3, 8028ec8 <mg_tcpip_init+0xb4>
 8028ec4:	2301      	movs	r3, #1
 8028ec6:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 8028ec8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028ecc:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8028ed0:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8028ed4:	2102      	movs	r1, #2
 8028ed6:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8028eda:	f7fc fd68 	bl	80259ae <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8028ede:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8028ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8028ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8028eea:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8028eee:	6963      	ldr	r3, [r4, #20]
 8028ef0:	b12b      	cbz	r3, 8028efe <mg_tcpip_init+0xea>
 8028ef2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028ef4:	b11b      	cbz	r3, 8028efe <mg_tcpip_init+0xea>
}
 8028ef6:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8028ef8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8028efc:	e7ce      	b.n	8028e9c <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8028efe:	4b07      	ldr	r3, [pc, #28]	@ (8028f1c <mg_tcpip_init+0x108>)
 8028f00:	681b      	ldr	r3, [r3, #0]
 8028f02:	2b00      	cmp	r3, #0
 8028f04:	ddf7      	ble.n	8028ef6 <mg_tcpip_init+0xe2>
 8028f06:	4b06      	ldr	r3, [pc, #24]	@ (8028f20 <mg_tcpip_init+0x10c>)
 8028f08:	f241 7234 	movw	r2, #5940	@ 0x1734
 8028f0c:	4905      	ldr	r1, [pc, #20]	@ (8028f24 <mg_tcpip_init+0x110>)
 8028f0e:	2001      	movs	r0, #1
 8028f10:	f7fd f962 	bl	80261d8 <mg_log_prefix>
 8028f14:	4807      	ldr	r0, [pc, #28]	@ (8028f34 <mg_tcpip_init+0x120>)
 8028f16:	f7fb f80d 	bl	8023f34 <mg_log>
}
 8028f1a:	e7ec      	b.n	8028ef6 <mg_tcpip_init+0xe2>
 8028f1c:	2000012c 	.word	0x2000012c
 8028f20:	0803b6a4 	.word	0x0803b6a4
 8028f24:	0803ad04 	.word	0x0803ad04
 8028f28:	0803b390 	.word	0x0803b390
 8028f2c:	08023f05 	.word	0x08023f05
 8028f30:	0803b36c 	.word	0x0803b36c
 8028f34:	0803b32c 	.word	0x0803b32c

08028f38 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 8028f38:	b510      	push	{r4, lr}
 8028f3a:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8028f3c:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 8028f40:	2b03      	cmp	r3, #3
 8028f42:	d011      	beq.n	8028f68 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8028f44:	2b01      	cmp	r3, #1
 8028f46:	d04f      	beq.n	8028fe8 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8028f48:	b9f3      	cbnz	r3, 8028f88 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 8028f4a:	4b31      	ldr	r3, [pc, #196]	@ (8029010 <onstatechange+0xd8>)
 8028f4c:	681b      	ldr	r3, [r3, #0]
 8028f4e:	2b00      	cmp	r3, #0
 8028f50:	dd1a      	ble.n	8028f88 <onstatechange+0x50>
 8028f52:	4b30      	ldr	r3, [pc, #192]	@ (8029014 <onstatechange+0xdc>)
 8028f54:	f241 4209 	movw	r2, #5129	@ 0x1409
 8028f58:	492f      	ldr	r1, [pc, #188]	@ (8029018 <onstatechange+0xe0>)
 8028f5a:	2001      	movs	r0, #1
 8028f5c:	f7fd f93c 	bl	80261d8 <mg_log_prefix>
 8028f60:	482e      	ldr	r0, [pc, #184]	@ (802901c <onstatechange+0xe4>)
 8028f62:	f7fa ffe7 	bl	8023f34 <mg_log>
 8028f66:	e00f      	b.n	8028f88 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8028f68:	4b29      	ldr	r3, [pc, #164]	@ (8029010 <onstatechange+0xd8>)
 8028f6a:	681b      	ldr	r3, [r3, #0]
 8028f6c:	2b01      	cmp	r3, #1
 8028f6e:	dc12      	bgt.n	8028f96 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8028f70:	4b27      	ldr	r3, [pc, #156]	@ (8029010 <onstatechange+0xd8>)
 8028f72:	681b      	ldr	r3, [r3, #0]
 8028f74:	2b01      	cmp	r3, #1
 8028f76:	dc1c      	bgt.n	8028fb2 <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8028f78:	4b25      	ldr	r3, [pc, #148]	@ (8029010 <onstatechange+0xd8>)
 8028f7a:	681b      	ldr	r3, [r3, #0]
 8028f7c:	2b01      	cmp	r3, #1
 8028f7e:	dc26      	bgt.n	8028fce <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 8028f80:	6921      	ldr	r1, [r4, #16]
 8028f82:	4620      	mov	r0, r4
 8028f84:	f7fc fee3 	bl	8025d4e <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8028f88:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 8028f8c:	2100      	movs	r1, #0
 8028f8e:	4620      	mov	r0, r4
 8028f90:	f7f8 f923 	bl	80211da <mg_tcpip_call>
}
 8028f94:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8028f96:	4b1f      	ldr	r3, [pc, #124]	@ (8029014 <onstatechange+0xdc>)
 8028f98:	f241 4201 	movw	r2, #5121	@ 0x1401
 8028f9c:	491e      	ldr	r1, [pc, #120]	@ (8029018 <onstatechange+0xe0>)
 8028f9e:	2002      	movs	r0, #2
 8028fa0:	f7fd f91a 	bl	80261d8 <mg_log_prefix>
 8028fa4:	f104 0208 	add.w	r2, r4, #8
 8028fa8:	491d      	ldr	r1, [pc, #116]	@ (8029020 <onstatechange+0xe8>)
 8028faa:	481e      	ldr	r0, [pc, #120]	@ (8029024 <onstatechange+0xec>)
 8028fac:	f7fa ffc2 	bl	8023f34 <mg_log>
 8028fb0:	e7de      	b.n	8028f70 <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8028fb2:	4b18      	ldr	r3, [pc, #96]	@ (8029014 <onstatechange+0xdc>)
 8028fb4:	f241 4202 	movw	r2, #5122	@ 0x1402
 8028fb8:	4917      	ldr	r1, [pc, #92]	@ (8029018 <onstatechange+0xe0>)
 8028fba:	2002      	movs	r0, #2
 8028fbc:	f7fd f90c 	bl	80261d8 <mg_log_prefix>
 8028fc0:	f104 0210 	add.w	r2, r4, #16
 8028fc4:	4916      	ldr	r1, [pc, #88]	@ (8029020 <onstatechange+0xe8>)
 8028fc6:	4818      	ldr	r0, [pc, #96]	@ (8029028 <onstatechange+0xf0>)
 8028fc8:	f7fa ffb4 	bl	8023f34 <mg_log>
 8028fcc:	e7d4      	b.n	8028f78 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8028fce:	4b11      	ldr	r3, [pc, #68]	@ (8029014 <onstatechange+0xdc>)
 8028fd0:	f241 4203 	movw	r2, #5123	@ 0x1403
 8028fd4:	4910      	ldr	r1, [pc, #64]	@ (8029018 <onstatechange+0xe0>)
 8028fd6:	2002      	movs	r0, #2
 8028fd8:	f7fd f8fe 	bl	80261d8 <mg_log_prefix>
 8028fdc:	4622      	mov	r2, r4
 8028fde:	4913      	ldr	r1, [pc, #76]	@ (802902c <onstatechange+0xf4>)
 8028fe0:	4813      	ldr	r0, [pc, #76]	@ (8029030 <onstatechange+0xf8>)
 8028fe2:	f7fa ffa7 	bl	8023f34 <mg_log>
 8028fe6:	e7cb      	b.n	8028f80 <onstatechange+0x48>
    MG_ERROR(("Link up"));
 8028fe8:	4b09      	ldr	r3, [pc, #36]	@ (8029010 <onstatechange+0xd8>)
 8028fea:	681b      	ldr	r3, [r3, #0]
 8028fec:	2b00      	cmp	r3, #0
 8028fee:	dc04      	bgt.n	8028ffa <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 8028ff0:	f7fd f8ec 	bl	80261cc <mg_millis>
 8028ff4:	f002 ff9c 	bl	802bf30 <srand>
 8028ff8:	e7c6      	b.n	8028f88 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 8028ffa:	4b06      	ldr	r3, [pc, #24]	@ (8029014 <onstatechange+0xdc>)
 8028ffc:	f241 4206 	movw	r2, #5126	@ 0x1406
 8029000:	4905      	ldr	r1, [pc, #20]	@ (8029018 <onstatechange+0xe0>)
 8029002:	2001      	movs	r0, #1
 8029004:	f7fd f8e8 	bl	80261d8 <mg_log_prefix>
 8029008:	480a      	ldr	r0, [pc, #40]	@ (8029034 <onstatechange+0xfc>)
 802900a:	f7fa ff93 	bl	8023f34 <mg_log>
 802900e:	e7ef      	b.n	8028ff0 <onstatechange+0xb8>
 8029010:	2000012c 	.word	0x2000012c
 8029014:	0803b650 	.word	0x0803b650
 8029018:	0803ad04 	.word	0x0803ad04
 802901c:	0803b3dc 	.word	0x0803b3dc
 8029020:	08023ef5 	.word	0x08023ef5
 8029024:	0803b3a4 	.word	0x0803b3a4
 8029028:	0803b3b4 	.word	0x0803b3b4
 802902c:	08023f05 	.word	0x08023f05
 8029030:	0803b3c4 	.word	0x0803b3c4
 8029034:	0803b3d4 	.word	0x0803b3d4

08029038 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8029038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802903c:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 802903e:	2300      	movs	r3, #0
 8029040:	9305      	str	r3, [sp, #20]
 8029042:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 8029044:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 8029048:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802904c:	680e      	ldr	r6, [r1, #0]
 802904e:	684b      	ldr	r3, [r1, #4]
 8029050:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8029052:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 8029056:	42b3      	cmp	r3, r6
 8029058:	d87b      	bhi.n	8029152 <rx_dhcp_client+0x11a>
 802905a:	4605      	mov	r5, r0
 802905c:	460f      	mov	r7, r1
 802905e:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8029062:	2204      	movs	r2, #4
 8029064:	1c81      	adds	r1, r0, #2
 8029066:	eb08 0002 	add.w	r0, r8, r2
 802906a:	f003 fc1d 	bl	802c8a8 <memcmp>
 802906e:	2800      	cmp	r0, #0
 8029070:	d16f      	bne.n	8029152 <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 8029072:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8029076:	4648      	mov	r0, r9
 8029078:	f8cd 9004 	str.w	r9, [sp, #4]
 802907c:	f8cd 9000 	str.w	r9, [sp]
 8029080:	46cb      	mov	fp, r9
 8029082:	e026      	b.n	80290d2 <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8029084:	7862      	ldrb	r2, [r4, #1]
 8029086:	2a04      	cmp	r2, #4
 8029088:	d12b      	bne.n	80290e2 <rx_dhcp_client+0xaa>
 802908a:	1da2      	adds	r2, r4, #6
 802908c:	42b2      	cmp	r2, r6
 802908e:	d228      	bcs.n	80290e2 <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 8029090:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8029094:	9301      	str	r3, [sp, #4]
 8029096:	e019      	b.n	80290cc <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8029098:	7862      	ldrb	r2, [r4, #1]
 802909a:	2a04      	cmp	r2, #4
 802909c:	d123      	bne.n	80290e6 <rx_dhcp_client+0xae>
 802909e:	1da2      	adds	r2, r4, #6
 80290a0:	42b2      	cmp	r2, r6
 80290a2:	d220      	bcs.n	80290e6 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 80290a4:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 80290a8:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80290ac:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 80290ae:	e00d      	b.n	80290cc <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80290b0:	7862      	ldrb	r2, [r4, #1]
 80290b2:	2a04      	cmp	r2, #4
 80290b4:	d11b      	bne.n	80290ee <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 80290b6:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80290b8:	42b2      	cmp	r2, r6
 80290ba:	d218      	bcs.n	80290ee <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 80290bc:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80290c0:	9305      	str	r3, [sp, #20]
 80290c2:	e003      	b.n	80290cc <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80290c4:	2b33      	cmp	r3, #51	@ 0x33
 80290c6:	d022      	beq.n	802910e <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80290c8:	2b35      	cmp	r3, #53	@ 0x35
 80290ca:	d02b      	beq.n	8029124 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 80290cc:	7863      	ldrb	r3, [r4, #1]
 80290ce:	3302      	adds	r3, #2
 80290d0:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 80290d2:	1c63      	adds	r3, r4, #1
 80290d4:	42b3      	cmp	r3, r6
 80290d6:	d22e      	bcs.n	8029136 <rx_dhcp_client+0xfe>
 80290d8:	7823      	ldrb	r3, [r4, #0]
 80290da:	2bff      	cmp	r3, #255	@ 0xff
 80290dc:	d02b      	beq.n	8029136 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 80290de:	2b01      	cmp	r3, #1
 80290e0:	d0d0      	beq.n	8029084 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 80290e2:	2b03      	cmp	r3, #3
 80290e4:	d0d8      	beq.n	8029098 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80290e6:	7fea      	ldrb	r2, [r5, #31]
 80290e8:	b10a      	cbz	r2, 80290ee <rx_dhcp_client+0xb6>
 80290ea:	2b06      	cmp	r3, #6
 80290ec:	d0e0      	beq.n	80290b0 <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 80290ee:	f895 2020 	ldrb.w	r2, [r5, #32]
 80290f2:	2a00      	cmp	r2, #0
 80290f4:	d0e6      	beq.n	80290c4 <rx_dhcp_client+0x8c>
 80290f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80290f8:	d1e4      	bne.n	80290c4 <rx_dhcp_client+0x8c>
 80290fa:	7862      	ldrb	r2, [r4, #1]
 80290fc:	2a04      	cmp	r2, #4
 80290fe:	d1e1      	bne.n	80290c4 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 8029100:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8029102:	42b2      	cmp	r2, r6
 8029104:	d2de      	bcs.n	80290c4 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 8029106:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802910a:	9304      	str	r3, [sp, #16]
 802910c:	e7de      	b.n	80290cc <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802910e:	7862      	ldrb	r2, [r4, #1]
 8029110:	2a04      	cmp	r2, #4
 8029112:	d1d9      	bne.n	80290c8 <rx_dhcp_client+0x90>
 8029114:	1da2      	adds	r2, r4, #6
 8029116:	42b2      	cmp	r2, r6
 8029118:	d2d6      	bcs.n	80290c8 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 802911a:	f8d4 0002 	ldr.w	r0, [r4, #2]
 802911e:	f7fc fc81 	bl	8025a24 <mg_ntohl>
 8029122:	e7d3      	b.n	80290cc <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8029124:	7863      	ldrb	r3, [r4, #1]
 8029126:	2b01      	cmp	r3, #1
 8029128:	d1d0      	bne.n	80290cc <rx_dhcp_client+0x94>
 802912a:	1da3      	adds	r3, r4, #6
 802912c:	42b3      	cmp	r3, r6
 802912e:	d2cd      	bcs.n	80290cc <rx_dhcp_client+0x94>
      msgtype = p[2];
 8029130:	f894 9002 	ldrb.w	r9, [r4, #2]
 8029134:	e7ca      	b.n	80290cc <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8029136:	f1b9 0f06 	cmp.w	r9, #6
 802913a:	d00d      	beq.n	8029158 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802913c:	f1b9 0f02 	cmp.w	r9, #2
 8029140:	d013      	beq.n	802916a <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 8029142:	f1b9 0f05 	cmp.w	r9, #5
 8029146:	d028      	beq.n	802919a <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 8029148:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802914c:	4553      	cmp	r3, sl
 802914e:	f040 80b4 	bne.w	80292ba <rx_dhcp_client+0x282>
}
 8029152:	b007      	add	sp, #28
 8029154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8029158:	68ab      	ldr	r3, [r5, #8]
 802915a:	455b      	cmp	r3, fp
 802915c:	d1ee      	bne.n	802913c <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 802915e:	2301      	movs	r3, #1
 8029160:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029164:	2300      	movs	r3, #0
 8029166:	60ab      	str	r3, [r5, #8]
 8029168:	e7ee      	b.n	8029148 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802916a:	f1ba 0f01 	cmp.w	sl, #1
 802916e:	d1e8      	bne.n	8029142 <rx_dhcp_client+0x10a>
 8029170:	f1bb 0f00 	cmp.w	fp, #0
 8029174:	d0e5      	beq.n	8029142 <rx_dhcp_client+0x10a>
 8029176:	9b00      	ldr	r3, [sp, #0]
 8029178:	2b00      	cmp	r3, #0
 802917a:	d0e2      	beq.n	8029142 <rx_dhcp_client+0x10a>
 802917c:	2800      	cmp	r0, #0
 802917e:	d0e0      	beq.n	8029142 <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8029180:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 8029184:	b90a      	cbnz	r2, 802918a <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8029186:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 8029188:	68da      	ldr	r2, [r3, #12]
 802918a:	4659      	mov	r1, fp
 802918c:	4628      	mov	r0, r5
 802918e:	f7ff f9b9 	bl	8028504 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 8029192:	2302      	movs	r3, #2
 8029194:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029198:	e7d6      	b.n	8029148 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802919a:	f1ba 0f02 	cmp.w	sl, #2
 802919e:	d02a      	beq.n	80291f6 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 80291a0:	f1ba 0f03 	cmp.w	sl, #3
 80291a4:	d1d0      	bne.n	8029148 <rx_dhcp_client+0x110>
 80291a6:	68ab      	ldr	r3, [r5, #8]
 80291a8:	455b      	cmp	r3, fp
 80291aa:	d1cd      	bne.n	8029148 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 80291ac:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80291ae:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80291b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80291b4:	4604      	mov	r4, r0
 80291b6:	fb00 f202 	mul.w	r2, r0, r2
 80291ba:	189b      	adds	r3, r3, r2
 80291bc:	f141 0100 	adc.w	r1, r1, #0
 80291c0:	662b      	str	r3, [r5, #96]	@ 0x60
 80291c2:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80291c4:	4b3f      	ldr	r3, [pc, #252]	@ (80292c4 <rx_dhcp_client+0x28c>)
 80291c6:	681b      	ldr	r3, [r3, #0]
 80291c8:	2b01      	cmp	r3, #1
 80291ca:	ddbd      	ble.n	8029148 <rx_dhcp_client+0x110>
 80291cc:	4b3e      	ldr	r3, [pc, #248]	@ (80292c8 <rx_dhcp_client+0x290>)
 80291ce:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 80291d2:	493e      	ldr	r1, [pc, #248]	@ (80292cc <rx_dhcp_client+0x294>)
 80291d4:	2002      	movs	r0, #2
 80291d6:	f7fc ffff 	bl	80261d8 <mg_log_prefix>
 80291da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80291de:	2300      	movs	r3, #0
 80291e0:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 80291e4:	f7e7 fdb8 	bl	8010d58 <__aeabi_uldivmod>
 80291e8:	4602      	mov	r2, r0
 80291ea:	460b      	mov	r3, r1
 80291ec:	4621      	mov	r1, r4
 80291ee:	4838      	ldr	r0, [pc, #224]	@ (80292d0 <rx_dhcp_client+0x298>)
 80291f0:	f7fa fea0 	bl	8023f34 <mg_log>
 80291f4:	e7a8      	b.n	8029148 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80291f6:	f1bb 0f00 	cmp.w	fp, #0
 80291fa:	d0d1      	beq.n	80291a0 <rx_dhcp_client+0x168>
 80291fc:	9b00      	ldr	r3, [sp, #0]
 80291fe:	2b00      	cmp	r3, #0
 8029200:	d0ce      	beq.n	80291a0 <rx_dhcp_client+0x168>
 8029202:	4604      	mov	r4, r0
 8029204:	2800      	cmp	r0, #0
 8029206:	d0cb      	beq.n	80291a0 <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 8029208:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802920a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802920c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029210:	fb00 f202 	mul.w	r2, r0, r2
 8029214:	189b      	adds	r3, r3, r2
 8029216:	f141 0100 	adc.w	r1, r1, #0
 802921a:	662b      	str	r3, [r5, #96]	@ 0x60
 802921c:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802921e:	4b29      	ldr	r3, [pc, #164]	@ (80292c4 <rx_dhcp_client+0x28c>)
 8029220:	681b      	ldr	r3, [r3, #0]
 8029222:	2b01      	cmp	r3, #1
 8029224:	dc2e      	bgt.n	8029284 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8029226:	693b      	ldr	r3, [r7, #16]
 8029228:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802922c:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 8029230:	895b      	ldrh	r3, [r3, #10]
 8029232:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8029236:	f8c5 b008 	str.w	fp, [r5, #8]
 802923a:	9b00      	ldr	r3, [sp, #0]
 802923c:	612b      	str	r3, [r5, #16]
 802923e:	9b01      	ldr	r3, [sp, #4]
 8029240:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 8029242:	2303      	movs	r3, #3
 8029244:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 8029248:	2108      	movs	r1, #8
 802924a:	eb0d 0001 	add.w	r0, sp, r1
 802924e:	f7fc fbae 	bl	80259ae <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8029252:	9c02      	ldr	r4, [sp, #8]
 8029254:	f7fc ffba 	bl	80261cc <mg_millis>
 8029258:	4420      	add	r0, r4
 802925a:	f002 fe69 	bl	802bf30 <srand>
      if (ifp->enable_req_dns && dns != 0)
 802925e:	7feb      	ldrb	r3, [r5, #31]
 8029260:	b10b      	cbz	r3, 8029266 <rx_dhcp_client+0x22e>
 8029262:	9b05      	ldr	r3, [sp, #20]
 8029264:	bb1b      	cbnz	r3, 80292ae <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 8029266:	f895 3020 	ldrb.w	r3, [r5, #32]
 802926a:	2b00      	cmp	r3, #0
 802926c:	f43f af6c 	beq.w	8029148 <rx_dhcp_client+0x110>
 8029270:	9b04      	ldr	r3, [sp, #16]
 8029272:	2b00      	cmp	r3, #0
 8029274:	f43f af68 	beq.w	8029148 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8029278:	aa04      	add	r2, sp, #16
 802927a:	2102      	movs	r1, #2
 802927c:	4628      	mov	r0, r5
 802927e:	f7f7 ffac 	bl	80211da <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8029282:	e761      	b.n	8029148 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8029284:	4b10      	ldr	r3, [pc, #64]	@ (80292c8 <rx_dhcp_client+0x290>)
 8029286:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 802928a:	4910      	ldr	r1, [pc, #64]	@ (80292cc <rx_dhcp_client+0x294>)
 802928c:	2002      	movs	r0, #2
 802928e:	f7fc ffa3 	bl	80261d8 <mg_log_prefix>
 8029292:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029296:	2300      	movs	r3, #0
 8029298:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 802929c:	f7e7 fd5c 	bl	8010d58 <__aeabi_uldivmod>
 80292a0:	4602      	mov	r2, r0
 80292a2:	460b      	mov	r3, r1
 80292a4:	4621      	mov	r1, r4
 80292a6:	480a      	ldr	r0, [pc, #40]	@ (80292d0 <rx_dhcp_client+0x298>)
 80292a8:	f7fa fe44 	bl	8023f34 <mg_log>
 80292ac:	e7bb      	b.n	8029226 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 80292ae:	aa05      	add	r2, sp, #20
 80292b0:	2101      	movs	r1, #1
 80292b2:	4628      	mov	r0, r5
 80292b4:	f7f7 ff91 	bl	80211da <mg_tcpip_call>
 80292b8:	e7d5      	b.n	8029266 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 80292ba:	4628      	mov	r0, r5
 80292bc:	f7ff fe3c 	bl	8028f38 <onstatechange>
 80292c0:	e747      	b.n	8029152 <rx_dhcp_client+0x11a>
 80292c2:	bf00      	nop
 80292c4:	2000012c 	.word	0x2000012c
 80292c8:	0803b610 	.word	0x0803b610
 80292cc:	0803ad04 	.word	0x0803ad04
 80292d0:	0803b3e8 	.word	0x0803b3e8

080292d4 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80292d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80292d8:	b084      	sub	sp, #16
 80292da:	4605      	mov	r5, r0
 80292dc:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 80292de:	69c9      	ldr	r1, [r1, #28]
 80292e0:	88cb      	ldrh	r3, [r1, #6]
 80292e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80292e6:	b29b      	uxth	r3, r3
 80292e8:	b1c3      	cbz	r3, 802931c <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 80292ea:	7a4b      	ldrb	r3, [r1, #9]
 80292ec:	2b11      	cmp	r3, #17
 80292ee:	d00e      	beq.n	802930e <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80292f0:	7a4b      	ldrb	r3, [r1, #9]
 80292f2:	2b06      	cmp	r3, #6
 80292f4:	d00f      	beq.n	8029316 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 80292f6:	2200      	movs	r2, #0
 80292f8:	4621      	mov	r1, r4
 80292fa:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80292fc:	f7f9 fa65 	bl	80227ca <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 8029300:	b110      	cbz	r0, 8029308 <rx_ip+0x34>
 8029302:	4963      	ldr	r1, [pc, #396]	@ (8029490 <rx_ip+0x1bc>)
 8029304:	f7fd f850 	bl	80263a8 <mg_error>
}
 8029308:	b004      	add	sp, #16
 802930a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802930e:	f101 0314 	add.w	r3, r1, #20
 8029312:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8029314:	e7ec      	b.n	80292f0 <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8029316:	3114      	adds	r1, #20
 8029318:	62a1      	str	r1, [r4, #40]	@ 0x28
 802931a:	e7ec      	b.n	80292f6 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 802931c:	7a4b      	ldrb	r3, [r1, #9]
 802931e:	2b01      	cmp	r3, #1
 8029320:	d024      	beq.n	802936c <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 8029322:	2b11      	cmp	r3, #17
 8029324:	d031      	beq.n	802938a <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 8029326:	2b06      	cmp	r3, #6
 8029328:	d1ee      	bne.n	8029308 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 802932a:	f101 0314 	add.w	r3, r1, #20
 802932e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8029330:	68e3      	ldr	r3, [r4, #12]
 8029332:	2b13      	cmp	r3, #19
 8029334:	d9e8      	bls.n	8029308 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 8029336:	3128      	adds	r1, #40	@ 0x28
 8029338:	4620      	mov	r0, r4
 802933a:	f7fb f898 	bl	802446e <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 802933e:	69e3      	ldr	r3, [r4, #28]
 8029340:	8858      	ldrh	r0, [r3, #2]
 8029342:	f7fc fc07 	bl	8025b54 <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8029346:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8029348:	7b1b      	ldrb	r3, [r3, #12]
 802934a:	091b      	lsrs	r3, r3, #4
 802934c:	3305      	adds	r3, #5
 802934e:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8029350:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8029354:	d301      	bcc.n	802935a <rx_ip+0x86>
 8029356:	1a80      	subs	r0, r0, r2
 8029358:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802935a:	4b4e      	ldr	r3, [pc, #312]	@ (8029494 <rx_ip+0x1c0>)
 802935c:	681b      	ldr	r3, [r3, #0]
 802935e:	2b03      	cmp	r3, #3
 8029360:	dc74      	bgt.n	802944c <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 8029362:	4621      	mov	r1, r4
 8029364:	4628      	mov	r0, r5
 8029366:	f7ff fb3d 	bl	80289e4 <rx_tcp>
 802936a:	e7cd      	b.n	8029308 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 802936c:	f101 0314 	add.w	r3, r1, #20
 8029370:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8029372:	68e3      	ldr	r3, [r4, #12]
 8029374:	2b03      	cmp	r3, #3
 8029376:	d9c7      	bls.n	8029308 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 8029378:	3118      	adds	r1, #24
 802937a:	4620      	mov	r0, r4
 802937c:	f7fb f877 	bl	802446e <mkpay>
    rx_icmp(ifp, pkt);
 8029380:	4621      	mov	r1, r4
 8029382:	4628      	mov	r0, r5
 8029384:	f7fc fc3b 	bl	8025bfe <rx_icmp>
 8029388:	e7be      	b.n	8029308 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 802938a:	f101 0314 	add.w	r3, r1, #20
 802938e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8029390:	68e3      	ldr	r3, [r4, #12]
 8029392:	2b07      	cmp	r3, #7
 8029394:	d9b8      	bls.n	8029308 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 8029396:	311c      	adds	r1, #28
 8029398:	4620      	mov	r0, r4
 802939a:	f7fb f868 	bl	802446e <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802939e:	4b3d      	ldr	r3, [pc, #244]	@ (8029494 <rx_ip+0x1c0>)
 80293a0:	681b      	ldr	r3, [r3, #0]
 80293a2:	2b03      	cmp	r3, #3
 80293a4:	dc16      	bgt.n	80293d4 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 80293a6:	7f2b      	ldrb	r3, [r5, #28]
 80293a8:	b133      	cbz	r3, 80293b8 <rx_ip+0xe4>
 80293aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80293ac:	8877      	ldrh	r7, [r6, #2]
 80293ae:	2044      	movs	r0, #68	@ 0x44
 80293b0:	f7fc fbd0 	bl	8025b54 <mg_ntohs>
 80293b4:	4287      	cmp	r7, r0
 80293b6:	d02f      	beq.n	8029418 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 80293b8:	7f6b      	ldrb	r3, [r5, #29]
 80293ba:	b133      	cbz	r3, 80293ca <rx_ip+0xf6>
 80293bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80293be:	8877      	ldrh	r7, [r6, #2]
 80293c0:	2043      	movs	r0, #67	@ 0x43
 80293c2:	f7fc fbc7 	bl	8025b54 <mg_ntohs>
 80293c6:	4287      	cmp	r7, r0
 80293c8:	d033      	beq.n	8029432 <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 80293ca:	4621      	mov	r1, r4
 80293cc:	4628      	mov	r0, r5
 80293ce:	f7fd fe03 	bl	8026fd8 <rx_udp>
 80293d2:	e799      	b.n	8029308 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80293d4:	4b30      	ldr	r3, [pc, #192]	@ (8029498 <rx_ip+0x1c4>)
 80293d6:	f241 6255 	movw	r2, #5717	@ 0x1655
 80293da:	4930      	ldr	r1, [pc, #192]	@ (802949c <rx_ip+0x1c8>)
 80293dc:	2004      	movs	r0, #4
 80293de:	f7fc fefb 	bl	80261d8 <mg_log_prefix>
 80293e2:	69e7      	ldr	r7, [r4, #28]
 80293e4:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 80293e8:	f8b8 0000 	ldrh.w	r0, [r8]
 80293ec:	f7fc fbb2 	bl	8025b54 <mg_ntohs>
 80293f0:	4606      	mov	r6, r0
 80293f2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80293f6:	f7fc fbad 	bl	8025b54 <mg_ntohs>
 80293fa:	68e3      	ldr	r3, [r4, #12]
 80293fc:	4928      	ldr	r1, [pc, #160]	@ (80294a0 <rx_ip+0x1cc>)
 80293fe:	9303      	str	r3, [sp, #12]
 8029400:	9002      	str	r0, [sp, #8]
 8029402:	f107 0310 	add.w	r3, r7, #16
 8029406:	9301      	str	r3, [sp, #4]
 8029408:	9100      	str	r1, [sp, #0]
 802940a:	4633      	mov	r3, r6
 802940c:	f107 020c 	add.w	r2, r7, #12
 8029410:	4824      	ldr	r0, [pc, #144]	@ (80294a4 <rx_ip+0x1d0>)
 8029412:	f7fa fd8f 	bl	8023f34 <mg_log>
 8029416:	e7c6      	b.n	80293a6 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8029418:	f106 0308 	add.w	r3, r6, #8
 802941c:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 802941e:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 8029422:	4620      	mov	r0, r4
 8029424:	f7fb f823 	bl	802446e <mkpay>
      rx_dhcp_client(ifp, pkt);
 8029428:	4621      	mov	r1, r4
 802942a:	4628      	mov	r0, r5
 802942c:	f7ff fe04 	bl	8029038 <rx_dhcp_client>
 8029430:	e76a      	b.n	8029308 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8029432:	f106 0308 	add.w	r3, r6, #8
 8029436:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8029438:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 802943c:	4620      	mov	r0, r4
 802943e:	f7fb f816 	bl	802446e <mkpay>
      rx_dhcp_server(ifp, pkt);
 8029442:	4621      	mov	r1, r4
 8029444:	4628      	mov	r0, r5
 8029446:	f7fc fd05 	bl	8025e54 <rx_dhcp_server>
 802944a:	e75d      	b.n	8029308 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802944c:	4b12      	ldr	r3, [pc, #72]	@ (8029498 <rx_ip+0x1c4>)
 802944e:	f241 626a 	movw	r2, #5738	@ 0x166a
 8029452:	4912      	ldr	r1, [pc, #72]	@ (802949c <rx_ip+0x1c8>)
 8029454:	2004      	movs	r0, #4
 8029456:	f7fc febf 	bl	80261d8 <mg_log_prefix>
 802945a:	69e7      	ldr	r7, [r4, #28]
 802945c:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8029460:	f8b8 0000 	ldrh.w	r0, [r8]
 8029464:	f7fc fb76 	bl	8025b54 <mg_ntohs>
 8029468:	4606      	mov	r6, r0
 802946a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802946e:	f7fc fb71 	bl	8025b54 <mg_ntohs>
 8029472:	68e3      	ldr	r3, [r4, #12]
 8029474:	490a      	ldr	r1, [pc, #40]	@ (80294a0 <rx_ip+0x1cc>)
 8029476:	9303      	str	r3, [sp, #12]
 8029478:	9002      	str	r0, [sp, #8]
 802947a:	f107 0310 	add.w	r3, r7, #16
 802947e:	9301      	str	r3, [sp, #4]
 8029480:	9100      	str	r1, [sp, #0]
 8029482:	4633      	mov	r3, r6
 8029484:	f107 020c 	add.w	r2, r7, #12
 8029488:	4807      	ldr	r0, [pc, #28]	@ (80294a8 <rx_ip+0x1d4>)
 802948a:	f7fa fd53 	bl	8023f34 <mg_log>
 802948e:	e768      	b.n	8029362 <rx_ip+0x8e>
 8029490:	0803b400 	.word	0x0803b400
 8029494:	2000012c 	.word	0x2000012c
 8029498:	0803b620 	.word	0x0803b620
 802949c:	0803ad04 	.word	0x0803ad04
 80294a0:	08023ef5 	.word	0x08023ef5
 80294a4:	0803b41c 	.word	0x0803b41c
 80294a8:	0803b438 	.word	0x0803b438

080294ac <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 80294ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80294b0:	b08e      	sub	sp, #56	@ 0x38
 80294b2:	4606      	mov	r6, r0
 80294b4:	460c      	mov	r4, r1
 80294b6:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 80294b8:	2234      	movs	r2, #52	@ 0x34
 80294ba:	2100      	movs	r1, #0
 80294bc:	a801      	add	r0, sp, #4
 80294be:	f003 fa87 	bl	802c9d0 <memset>
  pkt.raw.buf = (char *) buf;
 80294c2:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 80294c4:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 80294c6:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 80294c8:	2d0d      	cmp	r5, #13
 80294ca:	d93f      	bls.n	802954c <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 80294cc:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 80294d0:	b15b      	cbz	r3, 80294ea <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 80294d2:	2206      	movs	r2, #6
 80294d4:	4631      	mov	r1, r6
 80294d6:	4620      	mov	r0, r4
 80294d8:	f003 f9e6 	bl	802c8a8 <memcmp>
  if (ifp->enable_mac_check &&
 80294dc:	b128      	cbz	r0, 80294ea <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 80294de:	2206      	movs	r2, #6
 80294e0:	4945      	ldr	r1, [pc, #276]	@ (80295f8 <mg_tcpip_rx+0x14c>)
 80294e2:	4620      	mov	r0, r4
 80294e4:	f003 f9e0 	bl	802c8a8 <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 80294e8:	bb80      	cbnz	r0, 802954c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 80294ea:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 80294ee:	b18b      	cbz	r3, 8029514 <mg_tcpip_rx+0x68>
 80294f0:	2d04      	cmp	r5, #4
 80294f2:	d92e      	bls.n	8029552 <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 80294f4:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 80294f8:	4642      	mov	r2, r8
 80294fa:	4621      	mov	r1, r4
 80294fc:	2000      	movs	r0, #0
 80294fe:	f7fc fddf 	bl	80260c0 <mg_crc32>
 8029502:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8029504:	2204      	movs	r2, #4
 8029506:	4669      	mov	r1, sp
 8029508:	eb04 0008 	add.w	r0, r4, r8
 802950c:	f003 f9cc 	bl	802c8a8 <memcmp>
 8029510:	b108      	cbz	r0, 8029516 <mg_tcpip_rx+0x6a>
 8029512:	e01b      	b.n	802954c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 8029514:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 8029516:	89a7      	ldrh	r7, [r4, #12]
 8029518:	f640 0006 	movw	r0, #2054	@ 0x806
 802951c:	f7fc fb1a 	bl	8025b54 <mg_ntohs>
 8029520:	4287      	cmp	r7, r0
 8029522:	d018      	beq.n	8029556 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8029524:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8029528:	f7fc fb14 	bl	8025b54 <mg_ntohs>
 802952c:	4287      	cmp	r7, r0
 802952e:	d01b      	beq.n	8029568 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8029530:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8029534:	f7fc fb0e 	bl	8025b54 <mg_ntohs>
 8029538:	4287      	cmp	r7, r0
 802953a:	d028      	beq.n	802958e <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 802953c:	4b2f      	ldr	r3, [pc, #188]	@ (80295fc <mg_tcpip_rx+0x150>)
 802953e:	681b      	ldr	r3, [r3, #0]
 8029540:	2b02      	cmp	r3, #2
 8029542:	dc41      	bgt.n	80295c8 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8029544:	4b2d      	ldr	r3, [pc, #180]	@ (80295fc <mg_tcpip_rx+0x150>)
 8029546:	681b      	ldr	r3, [r3, #0]
 8029548:	2b03      	cmp	r3, #3
 802954a:	dc4d      	bgt.n	80295e8 <mg_tcpip_rx+0x13c>
}
 802954c:	b00e      	add	sp, #56	@ 0x38
 802954e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 8029552:	46a8      	mov	r8, r5
 8029554:	e7df      	b.n	8029516 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8029556:	340e      	adds	r4, #14
 8029558:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 802955a:	2d29      	cmp	r5, #41	@ 0x29
 802955c:	d9f6      	bls.n	802954c <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 802955e:	a901      	add	r1, sp, #4
 8029560:	4630      	mov	r0, r6
 8029562:	f7fe ff09 	bl	8028378 <rx_arp>
 8029566:	e7f1      	b.n	802954c <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8029568:	f104 030e 	add.w	r3, r4, #14
 802956c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802956e:	2d35      	cmp	r5, #53	@ 0x35
 8029570:	d9ec      	bls.n	802954c <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8029572:	7ba3      	ldrb	r3, [r4, #14]
 8029574:	091b      	lsrs	r3, r3, #4
 8029576:	2b06      	cmp	r3, #6
 8029578:	d1e8      	bne.n	802954c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 802957a:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 802957e:	a801      	add	r0, sp, #4
 8029580:	f7fa ff75 	bl	802446e <mkpay>
    rx_ip6(ifp, &pkt);
 8029584:	a901      	add	r1, sp, #4
 8029586:	4630      	mov	r0, r6
 8029588:	f7fc fb73 	bl	8025c72 <rx_ip6>
 802958c:	e7de      	b.n	802954c <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 802958e:	f104 030e 	add.w	r3, r4, #14
 8029592:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8029594:	2d21      	cmp	r5, #33	@ 0x21
 8029596:	d9d9      	bls.n	802954c <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8029598:	8a20      	ldrh	r0, [r4, #16]
 802959a:	f7fc fadb 	bl	8025b54 <mg_ntohs>
 802959e:	300e      	adds	r0, #14
 80295a0:	42a8      	cmp	r0, r5
 80295a2:	d200      	bcs.n	80295a6 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 80295a4:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80295a6:	9b02      	ldr	r3, [sp, #8]
 80295a8:	2b21      	cmp	r3, #33	@ 0x21
 80295aa:	d9cf      	bls.n	802954c <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 80295ac:	7ba3      	ldrb	r3, [r4, #14]
 80295ae:	091b      	lsrs	r3, r3, #4
 80295b0:	2b04      	cmp	r3, #4
 80295b2:	d1cb      	bne.n	802954c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 80295b4:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 80295b8:	a801      	add	r0, sp, #4
 80295ba:	f7fa ff58 	bl	802446e <mkpay>
    rx_ip(ifp, &pkt);
 80295be:	a901      	add	r1, sp, #4
 80295c0:	4630      	mov	r0, r6
 80295c2:	f7ff fe87 	bl	80292d4 <rx_ip>
 80295c6:	e7c1      	b.n	802954c <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 80295c8:	4b0d      	ldr	r3, [pc, #52]	@ (8029600 <mg_tcpip_rx+0x154>)
 80295ca:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 80295ce:	490d      	ldr	r1, [pc, #52]	@ (8029604 <mg_tcpip_rx+0x158>)
 80295d0:	2003      	movs	r0, #3
 80295d2:	f7fc fe01 	bl	80261d8 <mg_log_prefix>
 80295d6:	9b05      	ldr	r3, [sp, #20]
 80295d8:	8998      	ldrh	r0, [r3, #12]
 80295da:	f7fc fabb 	bl	8025b54 <mg_ntohs>
 80295de:	4601      	mov	r1, r0
 80295e0:	4809      	ldr	r0, [pc, #36]	@ (8029608 <mg_tcpip_rx+0x15c>)
 80295e2:	f7fa fca7 	bl	8023f34 <mg_log>
 80295e6:	e7ad      	b.n	8029544 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 80295e8:	4641      	mov	r1, r8
 80295ea:	2920      	cmp	r1, #32
 80295ec:	bf28      	it	cs
 80295ee:	2120      	movcs	r1, #32
 80295f0:	4620      	mov	r0, r4
 80295f2:	f7f9 fe01 	bl	80231f8 <mg_hexdump>
 80295f6:	e7a9      	b.n	802954c <mg_tcpip_rx+0xa0>
 80295f8:	0803b78c 	.word	0x0803b78c
 80295fc:	2000012c 	.word	0x2000012c
 8029600:	0803b630 	.word	0x0803b630
 8029604:	0803ad04 	.word	0x0803ad04
 8029608:	0803b454 	.word	0x0803b454

0802960c <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 802960c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029610:	b08b      	sub	sp, #44	@ 0x2c
 8029612:	4605      	mov	r5, r0
 8029614:	4616      	mov	r6, r2
 8029616:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8029618:	9200      	str	r2, [sp, #0]
 802961a:	9301      	str	r3, [sp, #4]
 802961c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029620:	2300      	movs	r3, #0
 8029622:	3058      	adds	r0, #88	@ 0x58
 8029624:	f7fc f868 	bl	80256f8 <mg_timer_expired>
  ifp->now = now;
 8029628:	652e      	str	r6, [r5, #80]	@ 0x50
 802962a:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 802962c:	4604      	mov	r4, r0
 802962e:	b318      	cbz	r0, 8029678 <mg_tcpip_poll+0x6c>
 8029630:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8029632:	68db      	ldr	r3, [r3, #12]
 8029634:	b303      	cbz	r3, 8029678 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 8029636:	4628      	mov	r0, r5
 8029638:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 802963a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802963e:	3b00      	subs	r3, #0
 8029640:	bf18      	it	ne
 8029642:	2301      	movne	r3, #1
    if (up != current) {
 8029644:	4298      	cmp	r0, r3
 8029646:	d010      	beq.n	802966a <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8029648:	b120      	cbz	r0, 8029654 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 802964a:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802964c:	2b00      	cmp	r3, #0
 802964e:	d06e      	beq.n	802972e <mg_tcpip_poll+0x122>
 8029650:	2301      	movs	r3, #1
 8029652:	e000      	b.n	8029656 <mg_tcpip_poll+0x4a>
 8029654:	2300      	movs	r3, #0
 8029656:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 802965a:	b918      	cbnz	r0, 8029664 <mg_tcpip_poll+0x58>
 802965c:	7f2b      	ldrb	r3, [r5, #28]
 802965e:	b10b      	cbz	r3, 8029664 <mg_tcpip_poll+0x58>
 8029660:	2300      	movs	r3, #0
 8029662:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029664:	4628      	mov	r0, r5
 8029666:	f7ff fc67 	bl	8028f38 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802966a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802966e:	b91b      	cbnz	r3, 8029678 <mg_tcpip_poll+0x6c>
 8029670:	4ba8      	ldr	r3, [pc, #672]	@ (8029914 <mg_tcpip_poll+0x308>)
 8029672:	681b      	ldr	r3, [r3, #0]
 8029674:	2b00      	cmp	r3, #0
 8029676:	dc5c      	bgt.n	8029732 <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8029678:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802967c:	2b00      	cmp	r3, #0
 802967e:	f000 8146 	beq.w	802990e <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8029682:	2b01      	cmp	r3, #1
 8029684:	d060      	beq.n	8029748 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8029686:	2c00      	cmp	r4, #0
 8029688:	d05f      	beq.n	802974a <mg_tcpip_poll+0x13e>
 802968a:	2b03      	cmp	r3, #3
 802968c:	d15d      	bne.n	802974a <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 802968e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8029690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8029692:	ea52 0103 	orrs.w	r1, r2, r3
 8029696:	d058      	beq.n	802974a <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 8029698:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 802969a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802969c:	4290      	cmp	r0, r2
 802969e:	eb71 0403 	sbcs.w	r4, r1, r3
 80296a2:	d262      	bcs.n	802976a <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80296a4:	4c9c      	ldr	r4, [pc, #624]	@ (8029918 <mg_tcpip_poll+0x30c>)
 80296a6:	1904      	adds	r4, r0, r4
 80296a8:	f141 0c00 	adc.w	ip, r1, #0
 80296ac:	42a2      	cmp	r2, r4
 80296ae:	eb73 030c 	sbcs.w	r3, r3, ip
 80296b2:	d24a      	bcs.n	802974a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 80296b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80296b8:	2300      	movs	r3, #0
 80296ba:	f7e7 fb4d 	bl	8010d58 <__aeabi_uldivmod>
 80296be:	4602      	mov	r2, r0
 80296c0:	2000      	movs	r0, #0
 80296c2:	1853      	adds	r3, r2, r1
 80296c4:	d25a      	bcs.n	802977c <mg_tcpip_poll+0x170>
 80296c6:	4403      	add	r3, r0
 80296c8:	4894      	ldr	r0, [pc, #592]	@ (802991c <mg_tcpip_poll+0x310>)
 80296ca:	fba0 4003 	umull	r4, r0, r0, r3
 80296ce:	08c0      	lsrs	r0, r0, #3
 80296d0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80296d4:	1a1b      	subs	r3, r3, r0
 80296d6:	1ad3      	subs	r3, r2, r3
 80296d8:	f161 0c00 	sbc.w	ip, r1, #0
 80296dc:	4c90      	ldr	r4, [pc, #576]	@ (8029920 <mg_tcpip_poll+0x314>)
 80296de:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 80296e2:	fb03 f000 	mul.w	r0, r3, r0
 80296e6:	fb04 000c 	mla	r0, r4, ip, r0
 80296ea:	fba3 3404 	umull	r3, r4, r3, r4
 80296ee:	4420      	add	r0, r4
 80296f0:	089b      	lsrs	r3, r3, #2
 80296f2:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 80296f6:	0880      	lsrs	r0, r0, #2
 80296f8:	0104      	lsls	r4, r0, #4
 80296fa:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 80296fe:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8029702:	ebbc 0c03 	subs.w	ip, ip, r3
 8029706:	eb64 0300 	sbc.w	r3, r4, r0
 802970a:	009b      	lsls	r3, r3, #2
 802970c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8029710:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8029714:	1a12      	subs	r2, r2, r0
 8029716:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 802971a:	430a      	orrs	r2, r1
 802971c:	d115      	bne.n	802974a <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 802971e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029722:	68aa      	ldr	r2, [r5, #8]
 8029724:	497f      	ldr	r1, [pc, #508]	@ (8029924 <mg_tcpip_poll+0x318>)
 8029726:	4628      	mov	r0, r5
 8029728:	f7fe fdfe 	bl	8028328 <tx_dhcp_request_re>
 802972c:	e00d      	b.n	802974a <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802972e:	2303      	movs	r3, #3
 8029730:	e791      	b.n	8029656 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8029732:	4b7d      	ldr	r3, [pc, #500]	@ (8029928 <mg_tcpip_poll+0x31c>)
 8029734:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8029738:	497c      	ldr	r1, [pc, #496]	@ (802992c <mg_tcpip_poll+0x320>)
 802973a:	2001      	movs	r0, #1
 802973c:	f7fc fd4c 	bl	80261d8 <mg_log_prefix>
 8029740:	487b      	ldr	r0, [pc, #492]	@ (8029930 <mg_tcpip_poll+0x324>)
 8029742:	f7fa fbf7 	bl	8023f34 <mg_log>
 8029746:	e797      	b.n	8029678 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8029748:	b95c      	cbnz	r4, 8029762 <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 802974a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802974c:	689b      	ldr	r3, [r3, #8]
 802974e:	b1fb      	cbz	r3, 8029790 <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8029750:	462a      	mov	r2, r5
 8029752:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8029754:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8029756:	4798      	blx	r3
    if (len > 0) {
 8029758:	4602      	mov	r2, r0
 802975a:	b988      	cbnz	r0, 8029780 <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 802975c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802975e:	681c      	ldr	r4, [r3, #0]
 8029760:	e0a3      	b.n	80298aa <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8029762:	4628      	mov	r0, r5
 8029764:	f7fe fdaa 	bl	80282bc <tx_dhcp_discover>
 8029768:	e7ef      	b.n	802974a <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 802976a:	2301      	movs	r3, #1
 802976c:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029770:	2300      	movs	r3, #0
 8029772:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029774:	4628      	mov	r0, r5
 8029776:	f7ff fbdf 	bl	8028f38 <onstatechange>
 802977a:	e7e6      	b.n	802974a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 802977c:	2001      	movs	r0, #1
 802977e:	e7a2      	b.n	80296c6 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 8029780:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8029782:	3301      	adds	r3, #1
 8029784:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8029786:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8029788:	4628      	mov	r0, r5
 802978a:	f7ff fe8f 	bl	80294ac <mg_tcpip_rx>
 802978e:	e7e5      	b.n	802975c <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8029790:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 8029794:	a909      	add	r1, sp, #36	@ 0x24
 8029796:	4620      	mov	r0, r4
 8029798:	f7fa fcd7 	bl	802414a <mg_queue_next>
    if (len > 0) {
 802979c:	4680      	mov	r8, r0
 802979e:	2800      	cmp	r0, #0
 80297a0:	d0dc      	beq.n	802975c <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 80297a2:	4602      	mov	r2, r0
 80297a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80297a6:	4628      	mov	r0, r5
 80297a8:	f7ff fe80 	bl	80294ac <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 80297ac:	4641      	mov	r1, r8
 80297ae:	4620      	mov	r0, r4
 80297b0:	f7fa fce7 	bl	8024182 <mg_queue_del>
 80297b4:	e7d2      	b.n	802975c <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 80297b6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 80297ba:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80297be:	4291      	cmp	r1, r2
 80297c0:	f000 8088 	beq.w	80298d4 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 80297c4:	4b53      	ldr	r3, [pc, #332]	@ (8029914 <mg_tcpip_poll+0x308>)
 80297c6:	681b      	ldr	r3, [r3, #0]
 80297c8:	2b03      	cmp	r3, #3
 80297ca:	dc23      	bgt.n	8029814 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80297cc:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 80297d0:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 80297d4:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 80297d8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80297dc:	f7fc f922 	bl	8025a24 <mg_ntohl>
 80297e0:	9007      	str	r0, [sp, #28]
 80297e2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80297e6:	f7fc f91d 	bl	8025a24 <mg_ntohl>
 80297ea:	2300      	movs	r3, #0
 80297ec:	9305      	str	r3, [sp, #20]
 80297ee:	9304      	str	r3, [sp, #16]
 80297f0:	9003      	str	r0, [sp, #12]
 80297f2:	9b07      	ldr	r3, [sp, #28]
 80297f4:	9302      	str	r3, [sp, #8]
 80297f6:	f8cd b004 	str.w	fp, [sp, #4]
 80297fa:	f8cd a000 	str.w	sl, [sp]
 80297fe:	2310      	movs	r3, #16
 8029800:	4642      	mov	r2, r8
 8029802:	4649      	mov	r1, r9
 8029804:	4628      	mov	r0, r5
 8029806:	f7fe f9e3 	bl	8027bd0 <tx_tcp>
        s->acked = s->ack;
 802980a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 802980e:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8029812:	e045      	b.n	80298a0 <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8029814:	4b44      	ldr	r3, [pc, #272]	@ (8029928 <mg_tcpip_poll+0x31c>)
 8029816:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 802981a:	4944      	ldr	r1, [pc, #272]	@ (802992c <mg_tcpip_poll+0x320>)
 802981c:	2004      	movs	r0, #4
 802981e:	f7fc fcdb 	bl	80261d8 <mg_log_prefix>
 8029822:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8029826:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 802982a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802982c:	4841      	ldr	r0, [pc, #260]	@ (8029934 <mg_tcpip_poll+0x328>)
 802982e:	f7fa fb81 	bl	8023f34 <mg_log>
 8029832:	e7cb      	b.n	80297cc <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 8029834:	4940      	ldr	r1, [pc, #256]	@ (8029938 <mg_tcpip_poll+0x32c>)
 8029836:	4620      	mov	r0, r4
 8029838:	f7fc fdb6 	bl	80263a8 <mg_error>
 802983c:	e030      	b.n	80298a0 <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 802983e:	493f      	ldr	r1, [pc, #252]	@ (802993c <mg_tcpip_poll+0x330>)
 8029840:	4620      	mov	r0, r4
 8029842:	f7fc fdb1 	bl	80263a8 <mg_error>
 8029846:	e02b      	b.n	80298a0 <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 8029848:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802984c:	f043 0320 	orr.w	r3, r3, #32
 8029850:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 8029854:	e028      	b.n	80298a8 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 8029856:	493a      	ldr	r1, [pc, #232]	@ (8029940 <mg_tcpip_poll+0x334>)
 8029858:	4620      	mov	r0, r4
 802985a:	f7fc fda5 	bl	80263a8 <mg_error>
 802985e:	e01f      	b.n	80298a0 <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029860:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8029864:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029868:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 802986c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029870:	3801      	subs	r0, #1
 8029872:	f7fc f8d7 	bl	8025a24 <mg_ntohl>
 8029876:	9007      	str	r0, [sp, #28]
 8029878:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 802987c:	f7fc f8d2 	bl	8025a24 <mg_ntohl>
 8029880:	2300      	movs	r3, #0
 8029882:	9305      	str	r3, [sp, #20]
 8029884:	9304      	str	r3, [sp, #16]
 8029886:	9003      	str	r0, [sp, #12]
 8029888:	9b07      	ldr	r3, [sp, #28]
 802988a:	9302      	str	r3, [sp, #8]
 802988c:	f8cd b004 	str.w	fp, [sp, #4]
 8029890:	f8cd a000 	str.w	sl, [sp]
 8029894:	2310      	movs	r3, #16
 8029896:	4642      	mov	r2, r8
 8029898:	4649      	mov	r1, r9
 802989a:	4628      	mov	r0, r5
 802989c:	f7fe f998 	bl	8027bd0 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 80298a0:	2100      	movs	r1, #0
 80298a2:	4620      	mov	r0, r4
 80298a4:	f7fe fa70 	bl	8027d88 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80298a8:	6824      	ldr	r4, [r4, #0]
 80298aa:	b384      	cbz	r4, 802990e <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 80298ac:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 80298b0:	f240 1209 	movw	r2, #265	@ 0x109
 80298b4:	421a      	tst	r2, r3
 80298b6:	d1f7      	bne.n	80298a8 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80298b8:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 80298bc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 80298c0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 80298c4:	42b2      	cmp	r2, r6
 80298c6:	41bb      	sbcs	r3, r7
 80298c8:	d2ee      	bcs.n	80298a8 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 80298ca:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80298ce:	2b01      	cmp	r3, #1
 80298d0:	f43f af71 	beq.w	80297b6 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 80298d4:	2b02      	cmp	r3, #2
 80298d6:	d0ad      	beq.n	8029834 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 80298d8:	2b03      	cmp	r3, #3
 80298da:	d0b0      	beq.n	802983e <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 80298dc:	2b04      	cmp	r3, #4
 80298de:	d0b3      	beq.n	8029848 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 80298e0:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 80298e4:	1c5a      	adds	r2, r3, #1
 80298e6:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 80298ea:	2b02      	cmp	r3, #2
 80298ec:	d8b3      	bhi.n	8029856 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 80298ee:	4b09      	ldr	r3, [pc, #36]	@ (8029914 <mg_tcpip_poll+0x308>)
 80298f0:	681b      	ldr	r3, [r3, #0]
 80298f2:	2b03      	cmp	r3, #3
 80298f4:	ddb4      	ble.n	8029860 <mg_tcpip_poll+0x254>
 80298f6:	4b0c      	ldr	r3, [pc, #48]	@ (8029928 <mg_tcpip_poll+0x31c>)
 80298f8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80298fc:	490b      	ldr	r1, [pc, #44]	@ (802992c <mg_tcpip_poll+0x320>)
 80298fe:	2004      	movs	r0, #4
 8029900:	f7fc fc6a 	bl	80261d8 <mg_log_prefix>
 8029904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029906:	480f      	ldr	r0, [pc, #60]	@ (8029944 <mg_tcpip_poll+0x338>)
 8029908:	f7fa fb14 	bl	8023f34 <mg_log>
 802990c:	e7a8      	b.n	8029860 <mg_tcpip_poll+0x254>
}
 802990e:	b00b      	add	sp, #44	@ 0x2c
 8029910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029914:	2000012c 	.word	0x2000012c
 8029918:	001b7740 	.word	0x001b7740
 802991c:	88888889 	.word	0x88888889
 8029920:	eeeeeeef 	.word	0xeeeeeeef
 8029924:	0803b78c 	.word	0x0803b78c
 8029928:	0803b674 	.word	0x0803b674
 802992c:	0803ad04 	.word	0x0803ad04
 8029930:	0803b468 	.word	0x0803b468
 8029934:	0803b478 	.word	0x0803b478
 8029938:	0803b488 	.word	0x0803b488
 802993c:	0803b494 	.word	0x0803b494
 8029940:	0803b4ac 	.word	0x0803b4ac
 8029944:	0803b4a8 	.word	0x0803b4a8

08029948 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8029948:	b5f0      	push	{r4, r5, r6, r7, lr}
 802994a:	b087      	sub	sp, #28
 802994c:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 802994e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 8029950:	f7fc fc3c 	bl	80261cc <mg_millis>
 8029954:	4602      	mov	r2, r0
 8029956:	460b      	mov	r3, r1
 8029958:	9004      	str	r0, [sp, #16]
 802995a:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 802995c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8029960:	f7fb fefe 	bl	8025760 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8029964:	2d00      	cmp	r5, #0
 8029966:	d078      	beq.n	8029a5a <mg_mgr_poll+0x112>
 8029968:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802996a:	2b00      	cmp	r3, #0
 802996c:	d075      	beq.n	8029a5a <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 802996e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8029972:	4628      	mov	r0, r5
 8029974:	f7ff fe4a 	bl	802960c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8029978:	6824      	ldr	r4, [r4, #0]
 802997a:	e040      	b.n	80299fe <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802997c:	4b38      	ldr	r3, [pc, #224]	@ (8029a60 <mg_mgr_poll+0x118>)
 802997e:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8029982:	4938      	ldr	r1, [pc, #224]	@ (8029a64 <mg_mgr_poll+0x11c>)
 8029984:	2004      	movs	r0, #4
 8029986:	f7fc fc27 	bl	80261d8 <mg_log_prefix>
 802998a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802998c:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 8029990:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8029994:	d019      	beq.n	80299ca <mg_mgr_poll+0x82>
 8029996:	2254      	movs	r2, #84	@ 0x54
 8029998:	f010 0f20 	tst.w	r0, #32
 802999c:	d017      	beq.n	80299ce <mg_mgr_poll+0x86>
 802999e:	2343      	movs	r3, #67	@ 0x43
 80299a0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80299a4:	d115      	bne.n	80299d2 <mg_mgr_poll+0x8a>
 80299a6:	2668      	movs	r6, #104	@ 0x68
 80299a8:	f010 0f08 	tst.w	r0, #8
 80299ac:	d013      	beq.n	80299d6 <mg_mgr_poll+0x8e>
 80299ae:	2752      	movs	r7, #82	@ 0x52
 80299b0:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 80299b4:	f010 0f20 	tst.w	r0, #32
 80299b8:	d00f      	beq.n	80299da <mg_mgr_poll+0x92>
 80299ba:	2043      	movs	r0, #67	@ 0x43
 80299bc:	9002      	str	r0, [sp, #8]
 80299be:	9701      	str	r7, [sp, #4]
 80299c0:	9600      	str	r6, [sp, #0]
 80299c2:	4829      	ldr	r0, [pc, #164]	@ (8029a68 <mg_mgr_poll+0x120>)
 80299c4:	f7fa fab6 	bl	8023f34 <mg_log>
 80299c8:	e024      	b.n	8029a14 <mg_mgr_poll+0xcc>
 80299ca:	2274      	movs	r2, #116	@ 0x74
 80299cc:	e7e4      	b.n	8029998 <mg_mgr_poll+0x50>
 80299ce:	2363      	movs	r3, #99	@ 0x63
 80299d0:	e7e6      	b.n	80299a0 <mg_mgr_poll+0x58>
 80299d2:	2648      	movs	r6, #72	@ 0x48
 80299d4:	e7e8      	b.n	80299a8 <mg_mgr_poll+0x60>
 80299d6:	2772      	movs	r7, #114	@ 0x72
 80299d8:	e7ea      	b.n	80299b0 <mg_mgr_poll+0x68>
 80299da:	2063      	movs	r0, #99	@ 0x63
 80299dc:	e7ee      	b.n	80299bc <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 80299de:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 80299e2:	4620      	mov	r0, r4
 80299e4:	f7fc fd18 	bl	8026418 <handle_tls_recv>
 80299e8:	e01e      	b.n	8029a28 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 80299ea:	4620      	mov	r0, r4
 80299ec:	f7fe fa6a 	bl	8027ec4 <write_conn>
 80299f0:	e01f      	b.n	8029a32 <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 80299f2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80299f6:	f013 0f20 	tst.w	r3, #32
 80299fa:	d12a      	bne.n	8029a52 <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 80299fc:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 80299fe:	b364      	cbz	r4, 8029a5a <mg_mgr_poll+0x112>
    tmp = c->next;
 8029a00:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 8029a02:	aa04      	add	r2, sp, #16
 8029a04:	2102      	movs	r1, #2
 8029a06:	4620      	mov	r0, r4
 8029a08:	f7f9 f84b 	bl	8022aa2 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8029a0c:	4b17      	ldr	r3, [pc, #92]	@ (8029a6c <mg_mgr_poll+0x124>)
 8029a0e:	681b      	ldr	r3, [r3, #0]
 8029a10:	2b03      	cmp	r3, #3
 8029a12:	dcb3      	bgt.n	802997c <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 8029a14:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029a18:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8029a1c:	d004      	beq.n	8029a28 <mg_mgr_poll+0xe0>
 8029a1e:	4620      	mov	r0, r4
 8029a20:	f7fb fee8 	bl	80257f4 <mg_tls_pending>
 8029a24:	2800      	cmp	r0, #0
 8029a26:	d1da      	bne.n	80299de <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 8029a28:	4620      	mov	r0, r4
 8029a2a:	f7f7 fbfb 	bl	8021224 <can_write>
 8029a2e:	2800      	cmp	r0, #0
 8029a30:	d1db      	bne.n	80299ea <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8029a32:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029a36:	f013 0f10 	tst.w	r3, #16
 8029a3a:	d0da      	beq.n	80299f2 <mg_mgr_poll+0xaa>
 8029a3c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8029a3e:	2b00      	cmp	r3, #0
 8029a40:	d1d7      	bne.n	80299f2 <mg_mgr_poll+0xaa>
 8029a42:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8029a46:	2b04      	cmp	r3, #4
 8029a48:	d0d3      	beq.n	80299f2 <mg_mgr_poll+0xaa>
      init_closure(c);
 8029a4a:	4620      	mov	r0, r4
 8029a4c:	f7fe fa66 	bl	8027f1c <init_closure>
 8029a50:	e7cf      	b.n	80299f2 <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 8029a52:	4620      	mov	r0, r4
 8029a54:	f7fd fb7e 	bl	8027154 <close_conn>
 8029a58:	e7d0      	b.n	80299fc <mg_mgr_poll+0xb4>
}
 8029a5a:	b007      	add	sp, #28
 8029a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029a5e:	bf00      	nop
 8029a60:	0803b684 	.word	0x0803b684
 8029a64:	0803ad04 	.word	0x0803ad04
 8029a68:	0803b4b8 	.word	0x0803b4b8
 8029a6c:	2000012c 	.word	0x2000012c

08029a70 <mg_now>:
uint64_t mg_now(void) {
 8029a70:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 8029a72:	f7fc fbab 	bl	80261cc <mg_millis>
 8029a76:	4a03      	ldr	r2, [pc, #12]	@ (8029a84 <mg_now+0x14>)
 8029a78:	6813      	ldr	r3, [r2, #0]
 8029a7a:	6852      	ldr	r2, [r2, #4]
 8029a7c:	18c0      	adds	r0, r0, r3
}
 8029a7e:	eb42 0101 	adc.w	r1, r2, r1
 8029a82:	bd08      	pop	{r3, pc}
 8029a84:	20019ed8 	.word	0x20019ed8

08029a88 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8029a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029a8c:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 8029a8e:	460a      	mov	r2, r1
 8029a90:	b129      	cbz	r1, 8029a9e <mg_sntp_parse+0x16>
 8029a92:	7801      	ldrb	r1, [r0, #0]
 8029a94:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8029a98:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 8029a9c:	e001      	b.n	8029aa2 <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 8029a9e:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8029aa0:	461d      	mov	r5, r3
  if (len < 48) {
 8029aa2:	2a2f      	cmp	r2, #47	@ 0x2f
 8029aa4:	d817      	bhi.n	8029ad6 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 8029aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8029bd4 <mg_sntp_parse+0x14c>)
 8029aa8:	681b      	ldr	r3, [r3, #0]
 8029aaa:	2b00      	cmp	r3, #0
 8029aac:	dc04      	bgt.n	8029ab8 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 8029aae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029ab2:	4601      	mov	r1, r0
}
 8029ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 8029ab8:	4b47      	ldr	r3, [pc, #284]	@ (8029bd8 <mg_sntp_parse+0x150>)
 8029aba:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 8029abe:	4947      	ldr	r1, [pc, #284]	@ (8029bdc <mg_sntp_parse+0x154>)
 8029ac0:	2001      	movs	r0, #1
 8029ac2:	f7fc fb89 	bl	80261d8 <mg_log_prefix>
 8029ac6:	4946      	ldr	r1, [pc, #280]	@ (8029be0 <mg_sntp_parse+0x158>)
 8029ac8:	4846      	ldr	r0, [pc, #280]	@ (8029be4 <mg_sntp_parse+0x15c>)
 8029aca:	f7fa fa33 	bl	8023f34 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029ace:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029ad2:	4601      	mov	r1, r0
 8029ad4:	e7ee      	b.n	8029ab4 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 8029ad6:	3b04      	subs	r3, #4
 8029ad8:	2b01      	cmp	r3, #1
 8029ada:	d916      	bls.n	8029b0a <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 8029adc:	4b3d      	ldr	r3, [pc, #244]	@ (8029bd4 <mg_sntp_parse+0x14c>)
 8029ade:	681b      	ldr	r3, [r3, #0]
 8029ae0:	2b00      	cmp	r3, #0
 8029ae2:	dc03      	bgt.n	8029aec <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 8029ae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029ae8:	4601      	mov	r1, r0
 8029aea:	e7e3      	b.n	8029ab4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 8029aec:	4b3a      	ldr	r3, [pc, #232]	@ (8029bd8 <mg_sntp_parse+0x150>)
 8029aee:	f641 4210 	movw	r2, #7184	@ 0x1c10
 8029af2:	493a      	ldr	r1, [pc, #232]	@ (8029bdc <mg_sntp_parse+0x154>)
 8029af4:	2001      	movs	r0, #1
 8029af6:	f7fc fb6f 	bl	80261d8 <mg_log_prefix>
 8029afa:	493b      	ldr	r1, [pc, #236]	@ (8029be8 <mg_sntp_parse+0x160>)
 8029afc:	4839      	ldr	r0, [pc, #228]	@ (8029be4 <mg_sntp_parse+0x15c>)
 8029afe:	f7fa fa19 	bl	8023f34 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029b02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029b06:	4601      	mov	r1, r0
 8029b08:	e7d4      	b.n	8029ab4 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 8029b0a:	7863      	ldrb	r3, [r4, #1]
 8029b0c:	b9b3      	cbnz	r3, 8029b3c <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8029b0e:	4b31      	ldr	r3, [pc, #196]	@ (8029bd4 <mg_sntp_parse+0x14c>)
 8029b10:	681b      	ldr	r3, [r3, #0]
 8029b12:	2b00      	cmp	r3, #0
 8029b14:	dc03      	bgt.n	8029b1e <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 8029b16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029b1a:	4601      	mov	r1, r0
 8029b1c:	e7ca      	b.n	8029ab4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8029b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8029bd8 <mg_sntp_parse+0x150>)
 8029b20:	f641 4212 	movw	r2, #7186	@ 0x1c12
 8029b24:	492d      	ldr	r1, [pc, #180]	@ (8029bdc <mg_sntp_parse+0x154>)
 8029b26:	2001      	movs	r0, #1
 8029b28:	f7fc fb56 	bl	80261d8 <mg_log_prefix>
 8029b2c:	492f      	ldr	r1, [pc, #188]	@ (8029bec <mg_sntp_parse+0x164>)
 8029b2e:	482d      	ldr	r0, [pc, #180]	@ (8029be4 <mg_sntp_parse+0x15c>)
 8029b30:	f7fa fa00 	bl	8023f34 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029b38:	4601      	mov	r1, r0
 8029b3a:	e7bb      	b.n	8029ab4 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 8029b3c:	1eeb      	subs	r3, r5, #3
 8029b3e:	2b01      	cmp	r3, #1
 8029b40:	d907      	bls.n	8029b52 <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 8029b42:	4b24      	ldr	r3, [pc, #144]	@ (8029bd4 <mg_sntp_parse+0x14c>)
 8029b44:	681b      	ldr	r3, [r3, #0]
 8029b46:	2b00      	cmp	r3, #0
 8029b48:	dc35      	bgt.n	8029bb6 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 8029b4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029b4e:	4601      	mov	r1, r0
  return epoch_milliseconds;
 8029b50:	e7b0      	b.n	8029ab4 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8029b52:	f104 0018 	add.w	r0, r4, #24
 8029b56:	f7fb ffc3 	bl	8025ae0 <gettimestamp>
 8029b5a:	4606      	mov	r6, r0
 8029b5c:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 8029b5e:	f104 0020 	add.w	r0, r4, #32
 8029b62:	f7fb ffbd 	bl	8025ae0 <gettimestamp>
 8029b66:	4680      	mov	r8, r0
 8029b68:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 8029b6a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8029b6e:	f7fb ffb7 	bl	8025ae0 <gettimestamp>
 8029b72:	4607      	mov	r7, r0
 8029b74:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 8029b76:	f7fc fb29 	bl	80261cc <mg_millis>
 8029b7a:	4605      	mov	r5, r0
 8029b7c:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 8029b7e:	1b86      	subs	r6, r0, r6
 8029b80:	eb61 020a 	sbc.w	r2, r1, sl
 8029b84:	ebb7 0808 	subs.w	r8, r7, r8
 8029b88:	eb64 0909 	sbc.w	r9, r4, r9
 8029b8c:	ebb6 0608 	subs.w	r6, r6, r8
 8029b90:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 8029b94:	0fd3      	lsrs	r3, r2, #31
 8029b96:	199b      	adds	r3, r3, r6
 8029b98:	f142 0200 	adc.w	r2, r2, #0
 8029b9c:	085b      	lsrs	r3, r3, #1
 8029b9e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8029ba2:	19d8      	adds	r0, r3, r7
 8029ba4:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 8029ba8:	1b45      	subs	r5, r0, r5
 8029baa:	eb61 030c 	sbc.w	r3, r1, ip
 8029bae:	4a10      	ldr	r2, [pc, #64]	@ (8029bf0 <mg_sntp_parse+0x168>)
 8029bb0:	6015      	str	r5, [r2, #0]
 8029bb2:	6053      	str	r3, [r2, #4]
 8029bb4:	e77e      	b.n	8029ab4 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 8029bb6:	4b08      	ldr	r3, [pc, #32]	@ (8029bd8 <mg_sntp_parse+0x150>)
 8029bb8:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 8029bbc:	4907      	ldr	r1, [pc, #28]	@ (8029bdc <mg_sntp_parse+0x154>)
 8029bbe:	2001      	movs	r0, #1
 8029bc0:	f7fc fb0a 	bl	80261d8 <mg_log_prefix>
 8029bc4:	4629      	mov	r1, r5
 8029bc6:	480b      	ldr	r0, [pc, #44]	@ (8029bf4 <mg_sntp_parse+0x16c>)
 8029bc8:	f7fa f9b4 	bl	8023f34 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029bd0:	4601      	mov	r1, r0
 8029bd2:	e76f      	b.n	8029ab4 <mg_sntp_parse+0x2c>
 8029bd4:	2000012c 	.word	0x2000012c
 8029bd8:	0803b5d4 	.word	0x0803b5d4
 8029bdc:	0803ad04 	.word	0x0803ad04
 8029be0:	0803b4cc 	.word	0x0803b4cc
 8029be4:	0803b01c 	.word	0x0803b01c
 8029be8:	0803b4dc 	.word	0x0803b4dc
 8029bec:	0803b4f0 	.word	0x0803b4f0
 8029bf0:	20019ed8 	.word	0x20019ed8
 8029bf4:	0803b50c 	.word	0x0803b50c

08029bf8 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 8029bf8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8029bfc:	b08c      	sub	sp, #48	@ 0x30
 8029bfe:	4604      	mov	r4, r0
  if (c->is_resolving) {
 8029c00:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029c04:	f013 0f08 	tst.w	r3, #8
 8029c08:	d012      	beq.n	8029c30 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 8029c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8029cb8 <mg_sntp_request+0xc0>)
 8029c0c:	681b      	ldr	r3, [r3, #0]
 8029c0e:	2b00      	cmp	r3, #0
 8029c10:	dc02      	bgt.n	8029c18 <mg_sntp_request+0x20>
}
 8029c12:	b00c      	add	sp, #48	@ 0x30
 8029c14:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 8029c18:	4b28      	ldr	r3, [pc, #160]	@ (8029cbc <mg_sntp_request+0xc4>)
 8029c1a:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 8029c1e:	4928      	ldr	r1, [pc, #160]	@ (8029cc0 <mg_sntp_request+0xc8>)
 8029c20:	2001      	movs	r0, #1
 8029c22:	f7fc fad9 	bl	80261d8 <mg_log_prefix>
 8029c26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029c28:	4826      	ldr	r0, [pc, #152]	@ (8029cc4 <mg_sntp_request+0xcc>)
 8029c2a:	f7fa f983 	bl	8023f34 <mg_log>
 8029c2e:	e7f0      	b.n	8029c12 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8029c30:	f7fc facc 	bl	80261cc <mg_millis>
 8029c34:	4606      	mov	r6, r0
 8029c36:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 8029c38:	2100      	movs	r1, #0
 8029c3a:	9100      	str	r1, [sp, #0]
 8029c3c:	222c      	movs	r2, #44	@ 0x2c
 8029c3e:	a801      	add	r0, sp, #4
 8029c40:	f002 fec6 	bl	802c9d0 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8029c44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029c48:	2300      	movs	r3, #0
 8029c4a:	4630      	mov	r0, r6
 8029c4c:	4629      	mov	r1, r5
 8029c4e:	f7e7 f833 	bl	8010cb8 <__aeabi_ldivmod>
 8029c52:	4610      	mov	r0, r2
 8029c54:	4619      	mov	r1, r3
 8029c56:	f7e6 fcb9 	bl	80105cc <__aeabi_l2d>
 8029c5a:	2200      	movs	r2, #0
 8029c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8029cc8 <mg_sntp_request+0xd0>)
 8029c5e:	f7e6 fe0d 	bl	801087c <__aeabi_ddiv>
 8029c62:	a313      	add	r3, pc, #76	@ (adr r3, 8029cb0 <mg_sntp_request+0xb8>)
 8029c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029c68:	f7e6 fcde 	bl	8010628 <__aeabi_dmul>
 8029c6c:	4680      	mov	r8, r0
 8029c6e:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8029c70:	2323      	movs	r3, #35	@ 0x23
 8029c72:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8029c76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029c7a:	2300      	movs	r3, #0
 8029c7c:	4630      	mov	r0, r6
 8029c7e:	4629      	mov	r1, r5
 8029c80:	f7e7 f81a 	bl	8010cb8 <__aeabi_ldivmod>
 8029c84:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 8029c88:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 8029c8c:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 8029c90:	f7fb fec8 	bl	8025a24 <mg_ntohl>
 8029c94:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 8029c96:	4640      	mov	r0, r8
 8029c98:	4649      	mov	r1, r9
 8029c9a:	f7e6 ff9d 	bl	8010bd8 <__aeabi_d2uiz>
 8029c9e:	f7fb fec1 	bl	8025a24 <mg_ntohl>
 8029ca2:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 8029ca4:	2230      	movs	r2, #48	@ 0x30
 8029ca6:	4669      	mov	r1, sp
 8029ca8:	4620      	mov	r0, r4
 8029caa:	f7fd fb49 	bl	8027340 <mg_send>
}
 8029cae:	e7b0      	b.n	8029c12 <mg_sntp_request+0x1a>
 8029cb0:	ffe00000 	.word	0xffe00000
 8029cb4:	41efffff 	.word	0x41efffff
 8029cb8:	2000012c 	.word	0x2000012c
 8029cbc:	0803b5c4 	.word	0x0803b5c4
 8029cc0:	0803ad04 	.word	0x0803ad04
 8029cc4:	0803b524 	.word	0x0803b524
 8029cc8:	408f4000 	.word	0x408f4000

08029ccc <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 8029ccc:	b570      	push	{r4, r5, r6, lr}
 8029cce:	b082      	sub	sp, #8
 8029cd0:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 8029cd2:	3901      	subs	r1, #1
 8029cd4:	2906      	cmp	r1, #6
 8029cd6:	d810      	bhi.n	8029cfa <sntp_cb+0x2e>
 8029cd8:	e8df f001 	tbb	[pc, r1]
 8029cdc:	110f4604 	.word	0x110f4604
 8029ce0:	0f0f      	.short	0x0f0f
 8029ce2:	14          	.byte	0x14
 8029ce3:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 8029ce4:	f7fc fa72 	bl	80261cc <mg_millis>
 8029ce8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8029cec:	18c0      	adds	r0, r0, r3
 8029cee:	f141 0100 	adc.w	r1, r1, #0
 8029cf2:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8029cf6:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 8029cfa:	b002      	add	sp, #8
 8029cfc:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 8029cfe:	f7ff ff7b 	bl	8029bf8 <mg_sntp_request>
 8029d02:	e7fa      	b.n	8029cfa <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8029d04:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8029d06:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8029d08:	f7ff febe 	bl	8029a88 <mg_sntp_parse>
 8029d0c:	4605      	mov	r5, r0
 8029d0e:	460e      	mov	r6, r1
 8029d10:	9000      	str	r0, [sp, #0]
 8029d12:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 8029d14:	2801      	cmp	r0, #1
 8029d16:	f171 0300 	sbcs.w	r3, r1, #0
 8029d1a:	da06      	bge.n	8029d2a <sntp_cb+0x5e>
    c->is_closing = 1;
 8029d1c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029d20:	f043 0320 	orr.w	r3, r3, #32
 8029d24:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8029d28:	e7e7      	b.n	8029cfa <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 8029d2a:	f7fc fa4f 	bl	80261cc <mg_millis>
 8029d2e:	1a2d      	subs	r5, r5, r0
 8029d30:	eb66 0601 	sbc.w	r6, r6, r1
 8029d34:	4b14      	ldr	r3, [pc, #80]	@ (8029d88 <sntp_cb+0xbc>)
 8029d36:	601d      	str	r5, [r3, #0]
 8029d38:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 8029d3a:	466a      	mov	r2, sp
 8029d3c:	2112      	movs	r1, #18
 8029d3e:	4620      	mov	r0, r4
 8029d40:	f7f8 feaf 	bl	8022aa2 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8029d44:	4b11      	ldr	r3, [pc, #68]	@ (8029d8c <sntp_cb+0xc0>)
 8029d46:	681b      	ldr	r3, [r3, #0]
 8029d48:	2b02      	cmp	r3, #2
 8029d4a:	dde7      	ble.n	8029d1c <sntp_cb+0x50>
 8029d4c:	4b10      	ldr	r3, [pc, #64]	@ (8029d90 <sntp_cb+0xc4>)
 8029d4e:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8029d52:	4910      	ldr	r1, [pc, #64]	@ (8029d94 <sntp_cb+0xc8>)
 8029d54:	2003      	movs	r0, #3
 8029d56:	f7fc fa3f 	bl	80261d8 <mg_log_prefix>
 8029d5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029d5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029d60:	480d      	ldr	r0, [pc, #52]	@ (8029d98 <sntp_cb+0xcc>)
 8029d62:	f7fa f8e7 	bl	8023f34 <mg_log>
 8029d66:	e7d9      	b.n	8029d1c <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8029d68:	f7fc fa30 	bl	80261cc <mg_millis>
 8029d6c:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8029d70:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8029d74:	4282      	cmp	r2, r0
 8029d76:	418b      	sbcs	r3, r1
 8029d78:	d2bf      	bcs.n	8029cfa <sntp_cb+0x2e>
 8029d7a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029d7e:	f043 0320 	orr.w	r3, r3, #32
 8029d82:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8029d86:	e7b8      	b.n	8029cfa <sntp_cb+0x2e>
 8029d88:	20019ed8 	.word	0x20019ed8
 8029d8c:	2000012c 	.word	0x2000012c
 8029d90:	0803b5bc 	.word	0x0803b5bc
 8029d94:	0803ad04 	.word	0x0803ad04
 8029d98:	0803b53c 	.word	0x0803b53c

08029d9c <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 8029d9c:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 8029d9e:	460d      	mov	r5, r1
 8029da0:	b169      	cbz	r1, 8029dbe <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 8029da2:	4629      	mov	r1, r5
 8029da4:	f7fe ffa0 	bl	8028ce8 <mg_connect>
 8029da8:	4604      	mov	r4, r0
 8029daa:	b130      	cbz	r0, 8029dba <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 8029dac:	4b05      	ldr	r3, [pc, #20]	@ (8029dc4 <mg_sntp_connect+0x28>)
 8029dae:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 8029db2:	462a      	mov	r2, r5
 8029db4:	2101      	movs	r1, #1
 8029db6:	f7ff ff89 	bl	8029ccc <sntp_cb>
}
 8029dba:	4620      	mov	r0, r4
 8029dbc:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 8029dbe:	4d02      	ldr	r5, [pc, #8]	@ (8029dc8 <mg_sntp_connect+0x2c>)
 8029dc0:	e7ef      	b.n	8029da2 <mg_sntp_connect+0x6>
 8029dc2:	bf00      	nop
 8029dc4:	08029ccd 	.word	0x08029ccd
 8029dc8:	0803b560 	.word	0x0803b560

08029dcc <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 8029dcc:	b508      	push	{r3, lr}
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 8029dce:	2207      	movs	r2, #7
 8029dd0:	4903      	ldr	r1, [pc, #12]	@ (8029de0 <has_mqtt_prefix+0x14>)
 8029dd2:	f002 fe32 	bl	802ca3a <strncmp>
}
 8029dd6:	fab0 f080 	clz	r0, r0
 8029dda:	0940      	lsrs	r0, r0, #5
 8029ddc:	bd08      	pop	{r3, pc}
 8029dde:	bf00      	nop
 8029de0:	0803bbdc 	.word	0x0803bbdc

08029de4 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8029de4:	b570      	push	{r4, r5, r6, lr}
 8029de6:	4604      	mov	r4, r0
    int dot_count = 0;
    int is_ip_format = 1;

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8029de8:	2200      	movs	r2, #0
    int dot_count = 0;
 8029dea:	4610      	mov	r0, r2
    for (int i = 0; host[i] != '\0'; i++) {
 8029dec:	e001      	b.n	8029df2 <is_valid_ip_or_domain+0xe>
        if (host[i] == '.') {
            dot_count++;
 8029dee:	3001      	adds	r0, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8029df0:	3201      	adds	r2, #1
 8029df2:	5ca3      	ldrb	r3, [r4, r2]
 8029df4:	b143      	cbz	r3, 8029e08 <is_valid_ip_or_domain+0x24>
        if (host[i] == '.') {
 8029df6:	2b2e      	cmp	r3, #46	@ 0x2e
 8029df8:	d0f9      	beq.n	8029dee <is_valid_ip_or_domain+0xa>
        } else if (!isdigit(host[i])) {
 8029dfa:	491d      	ldr	r1, [pc, #116]	@ (8029e70 <is_valid_ip_or_domain+0x8c>)
 8029dfc:	5ccb      	ldrb	r3, [r1, r3]
 8029dfe:	f013 0f04 	tst.w	r3, #4
 8029e02:	d1f5      	bne.n	8029df0 <is_valid_ip_or_domain+0xc>
            is_ip_format = 0;
 8029e04:	2500      	movs	r5, #0
 8029e06:	e000      	b.n	8029e0a <is_valid_ip_or_domain+0x26>
    int is_ip_format = 1;
 8029e08:	2501      	movs	r5, #1
            break;
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 8029e0a:	b335      	cbz	r5, 8029e5a <is_valid_ip_or_domain+0x76>
 8029e0c:	2803      	cmp	r0, #3
 8029e0e:	d013      	beq.n	8029e38 <is_valid_ip_or_domain+0x54>
 8029e10:	2200      	movs	r2, #0
 8029e12:	4615      	mov	r5, r2
 8029e14:	e014      	b.n	8029e40 <is_valid_ip_or_domain+0x5c>
        int octet;
        const char *ptr = host;

        for (int i = 0; i < 4; i++) {
 8029e16:	3601      	adds	r6, #1
 8029e18:	2e03      	cmp	r6, #3
 8029e1a:	dc24      	bgt.n	8029e66 <is_valid_ip_or_domain+0x82>
            octet = atoi(ptr);
 8029e1c:	4620      	mov	r0, r4
 8029e1e:	f000 f8a3 	bl	8029f68 <atoi>
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8029e22:	28ff      	cmp	r0, #255	@ 0xff
 8029e24:	d821      	bhi.n	8029e6a <is_valid_ip_or_domain+0x86>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 8029e26:	212e      	movs	r1, #46	@ 0x2e
 8029e28:	4620      	mov	r0, r4
 8029e2a:	f002 fde8 	bl	802c9fe <strchr>
            if (ptr != NULL) ptr++;
 8029e2e:	4604      	mov	r4, r0
 8029e30:	2800      	cmp	r0, #0
 8029e32:	d0f0      	beq.n	8029e16 <is_valid_ip_or_domain+0x32>
 8029e34:	3401      	adds	r4, #1
 8029e36:	e7ee      	b.n	8029e16 <is_valid_ip_or_domain+0x32>
        for (int i = 0; i < 4; i++) {
 8029e38:	2600      	movs	r6, #0
 8029e3a:	e7ed      	b.n	8029e18 <is_valid_ip_or_domain+0x34>

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
    for (int i = 0; host[i] != '\0'; i++) {
        if (host[i] == '.') {
            dot_count++;
 8029e3c:	3501      	adds	r5, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8029e3e:	3201      	adds	r2, #1
 8029e40:	5ca3      	ldrb	r3, [r4, r2]
 8029e42:	b163      	cbz	r3, 8029e5e <is_valid_ip_or_domain+0x7a>
        if (host[i] == '.') {
 8029e44:	2b2e      	cmp	r3, #46	@ 0x2e
 8029e46:	d0f9      	beq.n	8029e3c <is_valid_ip_or_domain+0x58>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 8029e48:	4909      	ldr	r1, [pc, #36]	@ (8029e70 <is_valid_ip_or_domain+0x8c>)
 8029e4a:	5cc9      	ldrb	r1, [r1, r3]
 8029e4c:	f011 0f07 	tst.w	r1, #7
 8029e50:	d1f5      	bne.n	8029e3e <is_valid_ip_or_domain+0x5a>
 8029e52:	2b2d      	cmp	r3, #45	@ 0x2d
 8029e54:	d0f3      	beq.n	8029e3e <is_valid_ip_or_domain+0x5a>
            return 0;  // Некорректный символ для доменного имени
 8029e56:	2500      	movs	r5, #0
 8029e58:	e005      	b.n	8029e66 <is_valid_ip_or_domain+0x82>
 8029e5a:	462a      	mov	r2, r5
 8029e5c:	e7f0      	b.n	8029e40 <is_valid_ip_or_domain+0x5c>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 8029e5e:	2d00      	cmp	r5, #0
 8029e60:	bfd4      	ite	le
 8029e62:	2500      	movle	r5, #0
 8029e64:	2501      	movgt	r5, #1
}
 8029e66:	4628      	mov	r0, r5
 8029e68:	bd70      	pop	{r4, r5, r6, pc}
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8029e6a:	2500      	movs	r5, #0
 8029e6c:	e7fb      	b.n	8029e66 <is_valid_ip_or_domain+0x82>
 8029e6e:	bf00      	nop
 8029e70:	0803c07d 	.word	0x0803c07d

08029e74 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8029e74:	b510      	push	{r4, lr}
 8029e76:	4604      	mov	r4, r0
    int port = atoi(port_str);
 8029e78:	f000 f876 	bl	8029f68 <atoi>
    if (port < 1 || port > MAX_PORT) {
 8029e7c:	3801      	subs	r0, #1
 8029e7e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8029e82:	4298      	cmp	r0, r3
 8029e84:	d80a      	bhi.n	8029e9c <is_valid_port+0x28>
        return 0; // Порт вне диапазона
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
 8029e86:	7823      	ldrb	r3, [r4, #0]
 8029e88:	b133      	cbz	r3, 8029e98 <is_valid_port+0x24>
        if (!isdigit(*port_str)) {
 8029e8a:	4a06      	ldr	r2, [pc, #24]	@ (8029ea4 <is_valid_port+0x30>)
 8029e8c:	5cd3      	ldrb	r3, [r2, r3]
 8029e8e:	f013 0f04 	tst.w	r3, #4
 8029e92:	d005      	beq.n	8029ea0 <is_valid_port+0x2c>
            return 0;
        }
        port_str++;
 8029e94:	3401      	adds	r4, #1
 8029e96:	e7f6      	b.n	8029e86 <is_valid_port+0x12>
    }
    return 1;
 8029e98:	2001      	movs	r0, #1
 8029e9a:	e000      	b.n	8029e9e <is_valid_port+0x2a>
        return 0; // Порт вне диапазона
 8029e9c:	2000      	movs	r0, #0
}
 8029e9e:	bd10      	pop	{r4, pc}
            return 0;
 8029ea0:	2000      	movs	r0, #0
 8029ea2:	e7fc      	b.n	8029e9e <is_valid_port+0x2a>
 8029ea4:	0803c07d 	.word	0x0803c07d

08029ea8 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 8029ea8:	b570      	push	{r4, r5, r6, lr}
 8029eaa:	b0c0      	sub	sp, #256	@ 0x100
 8029eac:	4604      	mov	r4, r0
    if (!has_mqtt_prefix(url)) {
 8029eae:	f7ff ff8d 	bl	8029dcc <has_mqtt_prefix>
 8029eb2:	b1d0      	cbz	r0, 8029eea <is_valid_mqtt_url+0x42>
        printf("Error: URL does not start with 'mqtt://'\n");
        return -1;
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8029eb4:	3407      	adds	r4, #7
    const char *colon = strchr(host_start, ':');
 8029eb6:	213a      	movs	r1, #58	@ 0x3a
 8029eb8:	4620      	mov	r0, r4
 8029eba:	f002 fda0 	bl	802c9fe <strchr>
    if (!colon) {
 8029ebe:	4606      	mov	r6, r0
 8029ec0:	b1c8      	cbz	r0, 8029ef6 <is_valid_mqtt_url+0x4e>
        return -2;
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 8029ec2:	1b05      	subs	r5, r0, r4
 8029ec4:	462a      	mov	r2, r5
 8029ec6:	4621      	mov	r1, r4
 8029ec8:	4668      	mov	r0, sp
 8029eca:	f002 fdc8 	bl	802ca5e <strncpy>
    host[colon - host_start] = '\0';
 8029ece:	2300      	movs	r3, #0
 8029ed0:	f80d 3005 	strb.w	r3, [sp, r5]

    if (!is_valid_ip_or_domain(host)) {
 8029ed4:	4668      	mov	r0, sp
 8029ed6:	f7ff ff85 	bl	8029de4 <is_valid_ip_or_domain>
 8029eda:	b190      	cbz	r0, 8029f02 <is_valid_mqtt_url+0x5a>
        return -3;
    }

    // Проверить порт
    const char *port_str = colon + 1;
    if (!is_valid_port(port_str)) {
 8029edc:	1c70      	adds	r0, r6, #1
 8029ede:	f7ff ffc9 	bl	8029e74 <is_valid_port>
 8029ee2:	b1a0      	cbz	r0, 8029f0e <is_valid_mqtt_url+0x66>
        printf("Error: Invalid port number\n");
        return -4;
    }

    return 0; // URL прошел все проверки
 8029ee4:	2000      	movs	r0, #0
}
 8029ee6:	b040      	add	sp, #256	@ 0x100
 8029ee8:	bd70      	pop	{r4, r5, r6, pc}
        printf("Error: URL does not start with 'mqtt://'\n");
 8029eea:	480c      	ldr	r0, [pc, #48]	@ (8029f1c <is_valid_mqtt_url+0x74>)
 8029eec:	f002 f818 	bl	802bf20 <puts>
        return -1;
 8029ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029ef4:	e7f7      	b.n	8029ee6 <is_valid_mqtt_url+0x3e>
        printf("Error: URL does not contain a port separator ':'\n");
 8029ef6:	480a      	ldr	r0, [pc, #40]	@ (8029f20 <is_valid_mqtt_url+0x78>)
 8029ef8:	f002 f812 	bl	802bf20 <puts>
        return -2;
 8029efc:	f06f 0001 	mvn.w	r0, #1
 8029f00:	e7f1      	b.n	8029ee6 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid domain or IP address\n");
 8029f02:	4808      	ldr	r0, [pc, #32]	@ (8029f24 <is_valid_mqtt_url+0x7c>)
 8029f04:	f002 f80c 	bl	802bf20 <puts>
        return -3;
 8029f08:	f06f 0002 	mvn.w	r0, #2
 8029f0c:	e7eb      	b.n	8029ee6 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid port number\n");
 8029f0e:	4806      	ldr	r0, [pc, #24]	@ (8029f28 <is_valid_mqtt_url+0x80>)
 8029f10:	f002 f806 	bl	802bf20 <puts>
        return -4;
 8029f14:	f06f 0003 	mvn.w	r0, #3
 8029f18:	e7e5      	b.n	8029ee6 <is_valid_mqtt_url+0x3e>
 8029f1a:	bf00      	nop
 8029f1c:	0803bbe4 	.word	0x0803bbe4
 8029f20:	0803bc10 	.word	0x0803bc10
 8029f24:	0803bc44 	.word	0x0803bc44
 8029f28:	0803bc68 	.word	0x0803bc68

08029f2c <__assert_func>:
 8029f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029f2e:	4614      	mov	r4, r2
 8029f30:	461a      	mov	r2, r3
 8029f32:	4b09      	ldr	r3, [pc, #36]	@ (8029f58 <__assert_func+0x2c>)
 8029f34:	681b      	ldr	r3, [r3, #0]
 8029f36:	4605      	mov	r5, r0
 8029f38:	68d8      	ldr	r0, [r3, #12]
 8029f3a:	b954      	cbnz	r4, 8029f52 <__assert_func+0x26>
 8029f3c:	4b07      	ldr	r3, [pc, #28]	@ (8029f5c <__assert_func+0x30>)
 8029f3e:	461c      	mov	r4, r3
 8029f40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029f44:	9100      	str	r1, [sp, #0]
 8029f46:	462b      	mov	r3, r5
 8029f48:	4905      	ldr	r1, [pc, #20]	@ (8029f60 <__assert_func+0x34>)
 8029f4a:	f000 f811 	bl	8029f70 <fiprintf>
 8029f4e:	f003 ffdf 	bl	802df10 <abort>
 8029f52:	4b04      	ldr	r3, [pc, #16]	@ (8029f64 <__assert_func+0x38>)
 8029f54:	e7f4      	b.n	8029f40 <__assert_func+0x14>
 8029f56:	bf00      	nop
 8029f58:	200002d8 	.word	0x200002d8
 8029f5c:	0803bcbe 	.word	0x0803bcbe
 8029f60:	0803bc90 	.word	0x0803bc90
 8029f64:	0803bc83 	.word	0x0803bc83

08029f68 <atoi>:
 8029f68:	220a      	movs	r2, #10
 8029f6a:	2100      	movs	r1, #0
 8029f6c:	f002 b8b6 	b.w	802c0dc <strtol>

08029f70 <fiprintf>:
 8029f70:	b40e      	push	{r1, r2, r3}
 8029f72:	b503      	push	{r0, r1, lr}
 8029f74:	4601      	mov	r1, r0
 8029f76:	ab03      	add	r3, sp, #12
 8029f78:	4805      	ldr	r0, [pc, #20]	@ (8029f90 <fiprintf+0x20>)
 8029f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8029f7e:	6800      	ldr	r0, [r0, #0]
 8029f80:	9301      	str	r3, [sp, #4]
 8029f82:	f001 fab7 	bl	802b4f4 <_vfiprintf_r>
 8029f86:	b002      	add	sp, #8
 8029f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8029f8c:	b003      	add	sp, #12
 8029f8e:	4770      	bx	lr
 8029f90:	200002d8 	.word	0x200002d8

08029f94 <printf>:
 8029f94:	b40f      	push	{r0, r1, r2, r3}
 8029f96:	b507      	push	{r0, r1, r2, lr}
 8029f98:	4906      	ldr	r1, [pc, #24]	@ (8029fb4 <printf+0x20>)
 8029f9a:	ab04      	add	r3, sp, #16
 8029f9c:	6808      	ldr	r0, [r1, #0]
 8029f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8029fa2:	6881      	ldr	r1, [r0, #8]
 8029fa4:	9301      	str	r3, [sp, #4]
 8029fa6:	f000 f807 	bl	8029fb8 <_vfprintf_r>
 8029faa:	b003      	add	sp, #12
 8029fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8029fb0:	b004      	add	sp, #16
 8029fb2:	4770      	bx	lr
 8029fb4:	200002d8 	.word	0x200002d8

08029fb8 <_vfprintf_r>:
 8029fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029fbc:	b0d3      	sub	sp, #332	@ 0x14c
 8029fbe:	468b      	mov	fp, r1
 8029fc0:	4690      	mov	r8, r2
 8029fc2:	461c      	mov	r4, r3
 8029fc4:	461e      	mov	r6, r3
 8029fc6:	9003      	str	r0, [sp, #12]
 8029fc8:	f003 fe90 	bl	802dcec <_localeconv_r>
 8029fcc:	6803      	ldr	r3, [r0, #0]
 8029fce:	9316      	str	r3, [sp, #88]	@ 0x58
 8029fd0:	4618      	mov	r0, r3
 8029fd2:	f7e6 f965 	bl	80102a0 <strlen>
 8029fd6:	9b03      	ldr	r3, [sp, #12]
 8029fd8:	900d      	str	r0, [sp, #52]	@ 0x34
 8029fda:	b123      	cbz	r3, 8029fe6 <_vfprintf_r+0x2e>
 8029fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8029fde:	b913      	cbnz	r3, 8029fe6 <_vfprintf_r+0x2e>
 8029fe0:	9803      	ldr	r0, [sp, #12]
 8029fe2:	f002 fa4f 	bl	802c484 <__sinit>
 8029fe6:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8029fea:	07da      	lsls	r2, r3, #31
 8029fec:	d407      	bmi.n	8029ffe <_vfprintf_r+0x46>
 8029fee:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029ff2:	059b      	lsls	r3, r3, #22
 8029ff4:	d403      	bmi.n	8029ffe <_vfprintf_r+0x46>
 8029ff6:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8029ffa:	f003 ff22 	bl	802de42 <__retarget_lock_acquire_recursive>
 8029ffe:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802a002:	049f      	lsls	r7, r3, #18
 802a004:	d409      	bmi.n	802a01a <_vfprintf_r+0x62>
 802a006:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802a00a:	f8ab 300c 	strh.w	r3, [fp, #12]
 802a00e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a012:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802a016:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 802a01a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a01e:	071d      	lsls	r5, r3, #28
 802a020:	d502      	bpl.n	802a028 <_vfprintf_r+0x70>
 802a022:	f8db 3010 	ldr.w	r3, [fp, #16]
 802a026:	b9c3      	cbnz	r3, 802a05a <_vfprintf_r+0xa2>
 802a028:	9803      	ldr	r0, [sp, #12]
 802a02a:	4659      	mov	r1, fp
 802a02c:	f002 fbe6 	bl	802c7fc <__swsetup_r>
 802a030:	b198      	cbz	r0, 802a05a <_vfprintf_r+0xa2>
 802a032:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a036:	07d8      	lsls	r0, r3, #31
 802a038:	d506      	bpl.n	802a048 <_vfprintf_r+0x90>
 802a03a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a03e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a040:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802a042:	b053      	add	sp, #332	@ 0x14c
 802a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a048:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a04c:	0599      	lsls	r1, r3, #22
 802a04e:	d4f4      	bmi.n	802a03a <_vfprintf_r+0x82>
 802a050:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a054:	f003 fef7 	bl	802de46 <__retarget_lock_release_recursive>
 802a058:	e7ef      	b.n	802a03a <_vfprintf_r+0x82>
 802a05a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802a05e:	f003 021a 	and.w	r2, r3, #26
 802a062:	2a0a      	cmp	r2, #10
 802a064:	d116      	bne.n	802a094 <_vfprintf_r+0xdc>
 802a066:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 802a06a:	2a00      	cmp	r2, #0
 802a06c:	db12      	blt.n	802a094 <_vfprintf_r+0xdc>
 802a06e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 802a072:	07d2      	lsls	r2, r2, #31
 802a074:	d405      	bmi.n	802a082 <_vfprintf_r+0xca>
 802a076:	059b      	lsls	r3, r3, #22
 802a078:	d403      	bmi.n	802a082 <_vfprintf_r+0xca>
 802a07a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a07e:	f003 fee2 	bl	802de46 <__retarget_lock_release_recursive>
 802a082:	9803      	ldr	r0, [sp, #12]
 802a084:	4623      	mov	r3, r4
 802a086:	4642      	mov	r2, r8
 802a088:	4659      	mov	r1, fp
 802a08a:	b053      	add	sp, #332	@ 0x14c
 802a08c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a090:	f001 b9be 	b.w	802b410 <__sbprintf>
 802a094:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 802a2e0 <_vfprintf_r+0x328>
 802a098:	2300      	movs	r3, #0
 802a09a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802a09e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a0a2:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 802a0a6:	ac29      	add	r4, sp, #164	@ 0xa4
 802a0a8:	9426      	str	r4, [sp, #152]	@ 0x98
 802a0aa:	9304      	str	r3, [sp, #16]
 802a0ac:	9309      	str	r3, [sp, #36]	@ 0x24
 802a0ae:	9312      	str	r3, [sp, #72]	@ 0x48
 802a0b0:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a0b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a0b4:	4643      	mov	r3, r8
 802a0b6:	461d      	mov	r5, r3
 802a0b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a0bc:	b10a      	cbz	r2, 802a0c2 <_vfprintf_r+0x10a>
 802a0be:	2a25      	cmp	r2, #37	@ 0x25
 802a0c0:	d1f9      	bne.n	802a0b6 <_vfprintf_r+0xfe>
 802a0c2:	ebb5 0708 	subs.w	r7, r5, r8
 802a0c6:	d00d      	beq.n	802a0e4 <_vfprintf_r+0x12c>
 802a0c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a0ca:	443b      	add	r3, r7
 802a0cc:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a0ce:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a0d0:	3301      	adds	r3, #1
 802a0d2:	2b07      	cmp	r3, #7
 802a0d4:	e9c4 8700 	strd	r8, r7, [r4]
 802a0d8:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a0da:	dc75      	bgt.n	802a1c8 <_vfprintf_r+0x210>
 802a0dc:	3408      	adds	r4, #8
 802a0de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802a0e0:	443b      	add	r3, r7
 802a0e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a0e4:	782b      	ldrb	r3, [r5, #0]
 802a0e6:	2b00      	cmp	r3, #0
 802a0e8:	f001 814f 	beq.w	802b38a <_vfprintf_r+0x13d2>
 802a0ec:	2200      	movs	r2, #0
 802a0ee:	1c6b      	adds	r3, r5, #1
 802a0f0:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802a0f4:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802a0f8:	920e      	str	r2, [sp, #56]	@ 0x38
 802a0fa:	4615      	mov	r5, r2
 802a0fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a100:	9206      	str	r2, [sp, #24]
 802a102:	930c      	str	r3, [sp, #48]	@ 0x30
 802a104:	9b06      	ldr	r3, [sp, #24]
 802a106:	3b20      	subs	r3, #32
 802a108:	2b5a      	cmp	r3, #90	@ 0x5a
 802a10a:	f200 85aa 	bhi.w	802ac62 <_vfprintf_r+0xcaa>
 802a10e:	e8df f013 	tbh	[pc, r3, lsl #1]
 802a112:	009d      	.short	0x009d
 802a114:	05a805a8 	.word	0x05a805a8
 802a118:	05a800a5 	.word	0x05a800a5
 802a11c:	05a805a8 	.word	0x05a805a8
 802a120:	05a80085 	.word	0x05a80085
 802a124:	00a805a8 	.word	0x00a805a8
 802a128:	05a800b2 	.word	0x05a800b2
 802a12c:	00b400af 	.word	0x00b400af
 802a130:	00ce05a8 	.word	0x00ce05a8
 802a134:	00d100d1 	.word	0x00d100d1
 802a138:	00d100d1 	.word	0x00d100d1
 802a13c:	00d100d1 	.word	0x00d100d1
 802a140:	00d100d1 	.word	0x00d100d1
 802a144:	05a800d1 	.word	0x05a800d1
 802a148:	05a805a8 	.word	0x05a805a8
 802a14c:	05a805a8 	.word	0x05a805a8
 802a150:	05a805a8 	.word	0x05a805a8
 802a154:	05a80146 	.word	0x05a80146
 802a158:	011a0107 	.word	0x011a0107
 802a15c:	01460146 	.word	0x01460146
 802a160:	05a80146 	.word	0x05a80146
 802a164:	05a805a8 	.word	0x05a805a8
 802a168:	00e205a8 	.word	0x00e205a8
 802a16c:	05a805a8 	.word	0x05a805a8
 802a170:	05a804a3 	.word	0x05a804a3
 802a174:	05a805a8 	.word	0x05a805a8
 802a178:	05a804ed 	.word	0x05a804ed
 802a17c:	05a8050e 	.word	0x05a8050e
 802a180:	053005a8 	.word	0x053005a8
 802a184:	05a805a8 	.word	0x05a805a8
 802a188:	05a805a8 	.word	0x05a805a8
 802a18c:	05a805a8 	.word	0x05a805a8
 802a190:	05a805a8 	.word	0x05a805a8
 802a194:	05a80146 	.word	0x05a80146
 802a198:	011c0107 	.word	0x011c0107
 802a19c:	01460146 	.word	0x01460146
 802a1a0:	00ed0146 	.word	0x00ed0146
 802a1a4:	0101011c 	.word	0x0101011c
 802a1a8:	00fa05a8 	.word	0x00fa05a8
 802a1ac:	048705a8 	.word	0x048705a8
 802a1b0:	04dc04a5 	.word	0x04dc04a5
 802a1b4:	05a80101 	.word	0x05a80101
 802a1b8:	009b04ed 	.word	0x009b04ed
 802a1bc:	05a80510 	.word	0x05a80510
 802a1c0:	006505a8 	.word	0x006505a8
 802a1c4:	009b05a8 	.word	0x009b05a8
 802a1c8:	9803      	ldr	r0, [sp, #12]
 802a1ca:	aa26      	add	r2, sp, #152	@ 0x98
 802a1cc:	4659      	mov	r1, fp
 802a1ce:	f001 f95f 	bl	802b490 <__sprint_r>
 802a1d2:	2800      	cmp	r0, #0
 802a1d4:	f040 814d 	bne.w	802a472 <_vfprintf_r+0x4ba>
 802a1d8:	ac29      	add	r4, sp, #164	@ 0xa4
 802a1da:	e780      	b.n	802a0de <_vfprintf_r+0x126>
 802a1dc:	4b42      	ldr	r3, [pc, #264]	@ (802a2e8 <_vfprintf_r+0x330>)
 802a1de:	9319      	str	r3, [sp, #100]	@ 0x64
 802a1e0:	f015 0320 	ands.w	r3, r5, #32
 802a1e4:	f000 84c8 	beq.w	802ab78 <_vfprintf_r+0xbc0>
 802a1e8:	3607      	adds	r6, #7
 802a1ea:	f026 0307 	bic.w	r3, r6, #7
 802a1ee:	461a      	mov	r2, r3
 802a1f0:	685f      	ldr	r7, [r3, #4]
 802a1f2:	f852 6b08 	ldr.w	r6, [r2], #8
 802a1f6:	9207      	str	r2, [sp, #28]
 802a1f8:	07eb      	lsls	r3, r5, #31
 802a1fa:	d50a      	bpl.n	802a212 <_vfprintf_r+0x25a>
 802a1fc:	ea56 0307 	orrs.w	r3, r6, r7
 802a200:	d007      	beq.n	802a212 <_vfprintf_r+0x25a>
 802a202:	2330      	movs	r3, #48	@ 0x30
 802a204:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 802a208:	9b06      	ldr	r3, [sp, #24]
 802a20a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a20e:	f045 0502 	orr.w	r5, r5, #2
 802a212:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a216:	2302      	movs	r3, #2
 802a218:	f000 bc2e 	b.w	802aa78 <_vfprintf_r+0xac0>
 802a21c:	9803      	ldr	r0, [sp, #12]
 802a21e:	f003 fd65 	bl	802dcec <_localeconv_r>
 802a222:	6843      	ldr	r3, [r0, #4]
 802a224:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a226:	4618      	mov	r0, r3
 802a228:	f7e6 f83a 	bl	80102a0 <strlen>
 802a22c:	9012      	str	r0, [sp, #72]	@ 0x48
 802a22e:	9803      	ldr	r0, [sp, #12]
 802a230:	f003 fd5c 	bl	802dcec <_localeconv_r>
 802a234:	6883      	ldr	r3, [r0, #8]
 802a236:	9309      	str	r3, [sp, #36]	@ 0x24
 802a238:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a23a:	b12b      	cbz	r3, 802a248 <_vfprintf_r+0x290>
 802a23c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a23e:	b11b      	cbz	r3, 802a248 <_vfprintf_r+0x290>
 802a240:	781b      	ldrb	r3, [r3, #0]
 802a242:	b10b      	cbz	r3, 802a248 <_vfprintf_r+0x290>
 802a244:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 802a248:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a24a:	e757      	b.n	802a0fc <_vfprintf_r+0x144>
 802a24c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a250:	2b00      	cmp	r3, #0
 802a252:	d1f9      	bne.n	802a248 <_vfprintf_r+0x290>
 802a254:	2320      	movs	r3, #32
 802a256:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a25a:	e7f5      	b.n	802a248 <_vfprintf_r+0x290>
 802a25c:	f045 0501 	orr.w	r5, r5, #1
 802a260:	e7f2      	b.n	802a248 <_vfprintf_r+0x290>
 802a262:	f856 3b04 	ldr.w	r3, [r6], #4
 802a266:	930e      	str	r3, [sp, #56]	@ 0x38
 802a268:	2b00      	cmp	r3, #0
 802a26a:	daed      	bge.n	802a248 <_vfprintf_r+0x290>
 802a26c:	425b      	negs	r3, r3
 802a26e:	930e      	str	r3, [sp, #56]	@ 0x38
 802a270:	f045 0504 	orr.w	r5, r5, #4
 802a274:	e7e8      	b.n	802a248 <_vfprintf_r+0x290>
 802a276:	232b      	movs	r3, #43	@ 0x2b
 802a278:	e7ed      	b.n	802a256 <_vfprintf_r+0x29e>
 802a27a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a27c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a280:	9206      	str	r2, [sp, #24]
 802a282:	2a2a      	cmp	r2, #42	@ 0x2a
 802a284:	d10f      	bne.n	802a2a6 <_vfprintf_r+0x2ee>
 802a286:	f856 2b04 	ldr.w	r2, [r6], #4
 802a28a:	930c      	str	r3, [sp, #48]	@ 0x30
 802a28c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 802a290:	e7da      	b.n	802a248 <_vfprintf_r+0x290>
 802a292:	fb01 2909 	mla	r9, r1, r9, r2
 802a296:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a29a:	9206      	str	r2, [sp, #24]
 802a29c:	9a06      	ldr	r2, [sp, #24]
 802a29e:	3a30      	subs	r2, #48	@ 0x30
 802a2a0:	2a09      	cmp	r2, #9
 802a2a2:	d9f6      	bls.n	802a292 <_vfprintf_r+0x2da>
 802a2a4:	e72d      	b.n	802a102 <_vfprintf_r+0x14a>
 802a2a6:	f04f 0900 	mov.w	r9, #0
 802a2aa:	210a      	movs	r1, #10
 802a2ac:	e7f6      	b.n	802a29c <_vfprintf_r+0x2e4>
 802a2ae:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 802a2b2:	e7c9      	b.n	802a248 <_vfprintf_r+0x290>
 802a2b4:	2200      	movs	r2, #0
 802a2b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a2b8:	920e      	str	r2, [sp, #56]	@ 0x38
 802a2ba:	210a      	movs	r1, #10
 802a2bc:	9a06      	ldr	r2, [sp, #24]
 802a2be:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802a2c0:	3a30      	subs	r2, #48	@ 0x30
 802a2c2:	fb01 2200 	mla	r2, r1, r0, r2
 802a2c6:	920e      	str	r2, [sp, #56]	@ 0x38
 802a2c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a2cc:	9206      	str	r2, [sp, #24]
 802a2ce:	3a30      	subs	r2, #48	@ 0x30
 802a2d0:	2a09      	cmp	r2, #9
 802a2d2:	d9f3      	bls.n	802a2bc <_vfprintf_r+0x304>
 802a2d4:	e715      	b.n	802a102 <_vfprintf_r+0x14a>
 802a2d6:	f045 0508 	orr.w	r5, r5, #8
 802a2da:	e7b5      	b.n	802a248 <_vfprintf_r+0x290>
 802a2dc:	f3af 8000 	nop.w
	...
 802a2e8:	0803bccf 	.word	0x0803bccf
 802a2ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a2ee:	781b      	ldrb	r3, [r3, #0]
 802a2f0:	2b68      	cmp	r3, #104	@ 0x68
 802a2f2:	bf01      	itttt	eq
 802a2f4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 802a2f6:	3301      	addeq	r3, #1
 802a2f8:	930c      	streq	r3, [sp, #48]	@ 0x30
 802a2fa:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802a2fe:	bf18      	it	ne
 802a300:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802a304:	e7a0      	b.n	802a248 <_vfprintf_r+0x290>
 802a306:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a308:	781b      	ldrb	r3, [r3, #0]
 802a30a:	2b6c      	cmp	r3, #108	@ 0x6c
 802a30c:	d105      	bne.n	802a31a <_vfprintf_r+0x362>
 802a30e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a310:	3301      	adds	r3, #1
 802a312:	930c      	str	r3, [sp, #48]	@ 0x30
 802a314:	f045 0520 	orr.w	r5, r5, #32
 802a318:	e796      	b.n	802a248 <_vfprintf_r+0x290>
 802a31a:	f045 0510 	orr.w	r5, r5, #16
 802a31e:	e793      	b.n	802a248 <_vfprintf_r+0x290>
 802a320:	4632      	mov	r2, r6
 802a322:	f852 3b04 	ldr.w	r3, [r2], #4
 802a326:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802a32a:	2300      	movs	r3, #0
 802a32c:	9207      	str	r2, [sp, #28]
 802a32e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a332:	469a      	mov	sl, r3
 802a334:	f04f 0901 	mov.w	r9, #1
 802a338:	9310      	str	r3, [sp, #64]	@ 0x40
 802a33a:	461f      	mov	r7, r3
 802a33c:	9308      	str	r3, [sp, #32]
 802a33e:	461e      	mov	r6, r3
 802a340:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802a344:	e1da      	b.n	802a6fc <_vfprintf_r+0x744>
 802a346:	f045 0510 	orr.w	r5, r5, #16
 802a34a:	06af      	lsls	r7, r5, #26
 802a34c:	d512      	bpl.n	802a374 <_vfprintf_r+0x3bc>
 802a34e:	3607      	adds	r6, #7
 802a350:	f026 0307 	bic.w	r3, r6, #7
 802a354:	461a      	mov	r2, r3
 802a356:	685f      	ldr	r7, [r3, #4]
 802a358:	f852 6b08 	ldr.w	r6, [r2], #8
 802a35c:	9207      	str	r2, [sp, #28]
 802a35e:	2f00      	cmp	r7, #0
 802a360:	da06      	bge.n	802a370 <_vfprintf_r+0x3b8>
 802a362:	4276      	negs	r6, r6
 802a364:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802a368:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802a36c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a370:	2301      	movs	r3, #1
 802a372:	e384      	b.n	802aa7e <_vfprintf_r+0xac6>
 802a374:	4633      	mov	r3, r6
 802a376:	06ee      	lsls	r6, r5, #27
 802a378:	f853 7b04 	ldr.w	r7, [r3], #4
 802a37c:	9307      	str	r3, [sp, #28]
 802a37e:	d502      	bpl.n	802a386 <_vfprintf_r+0x3ce>
 802a380:	463e      	mov	r6, r7
 802a382:	17ff      	asrs	r7, r7, #31
 802a384:	e7eb      	b.n	802a35e <_vfprintf_r+0x3a6>
 802a386:	0668      	lsls	r0, r5, #25
 802a388:	d503      	bpl.n	802a392 <_vfprintf_r+0x3da>
 802a38a:	b23e      	sxth	r6, r7
 802a38c:	f347 37c0 	sbfx	r7, r7, #15, #1
 802a390:	e7e5      	b.n	802a35e <_vfprintf_r+0x3a6>
 802a392:	05a9      	lsls	r1, r5, #22
 802a394:	d5f4      	bpl.n	802a380 <_vfprintf_r+0x3c8>
 802a396:	b27e      	sxtb	r6, r7
 802a398:	f347 17c0 	sbfx	r7, r7, #7, #1
 802a39c:	e7df      	b.n	802a35e <_vfprintf_r+0x3a6>
 802a39e:	3607      	adds	r6, #7
 802a3a0:	f026 0307 	bic.w	r3, r6, #7
 802a3a4:	ecb3 7b02 	vldmia	r3!, {d7}
 802a3a8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a3ac:	9307      	str	r3, [sp, #28]
 802a3ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a3b0:	931a      	str	r3, [sp, #104]	@ 0x68
 802a3b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a3b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a3b8:	931b      	str	r3, [sp, #108]	@ 0x6c
 802a3ba:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a3be:	4b85      	ldr	r3, [pc, #532]	@ (802a5d4 <_vfprintf_r+0x61c>)
 802a3c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a3c4:	f7e6 fbca 	bl	8010b5c <__aeabi_dcmpun>
 802a3c8:	bb10      	cbnz	r0, 802a410 <_vfprintf_r+0x458>
 802a3ca:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a3ce:	4b81      	ldr	r3, [pc, #516]	@ (802a5d4 <_vfprintf_r+0x61c>)
 802a3d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a3d4:	f7e6 fba4 	bl	8010b20 <__aeabi_dcmple>
 802a3d8:	b9d0      	cbnz	r0, 802a410 <_vfprintf_r+0x458>
 802a3da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802a3de:	2200      	movs	r2, #0
 802a3e0:	2300      	movs	r3, #0
 802a3e2:	f7e6 fb93 	bl	8010b0c <__aeabi_dcmplt>
 802a3e6:	b110      	cbz	r0, 802a3ee <_vfprintf_r+0x436>
 802a3e8:	232d      	movs	r3, #45	@ 0x2d
 802a3ea:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a3ee:	4a7a      	ldr	r2, [pc, #488]	@ (802a5d8 <_vfprintf_r+0x620>)
 802a3f0:	4b7a      	ldr	r3, [pc, #488]	@ (802a5dc <_vfprintf_r+0x624>)
 802a3f2:	9906      	ldr	r1, [sp, #24]
 802a3f4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 802a3f8:	2947      	cmp	r1, #71	@ 0x47
 802a3fa:	bfd4      	ite	le
 802a3fc:	4690      	movle	r8, r2
 802a3fe:	4698      	movgt	r8, r3
 802a400:	f04f 0a00 	mov.w	sl, #0
 802a404:	f04f 0903 	mov.w	r9, #3
 802a408:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802a40c:	f000 bff8 	b.w	802b400 <_vfprintf_r+0x1448>
 802a410:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 802a414:	4610      	mov	r0, r2
 802a416:	4619      	mov	r1, r3
 802a418:	f7e6 fba0 	bl	8010b5c <__aeabi_dcmpun>
 802a41c:	4682      	mov	sl, r0
 802a41e:	b140      	cbz	r0, 802a432 <_vfprintf_r+0x47a>
 802a420:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a422:	4a6f      	ldr	r2, [pc, #444]	@ (802a5e0 <_vfprintf_r+0x628>)
 802a424:	2b00      	cmp	r3, #0
 802a426:	bfbc      	itt	lt
 802a428:	232d      	movlt	r3, #45	@ 0x2d
 802a42a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802a42e:	4b6d      	ldr	r3, [pc, #436]	@ (802a5e4 <_vfprintf_r+0x62c>)
 802a430:	e7df      	b.n	802a3f2 <_vfprintf_r+0x43a>
 802a432:	9b06      	ldr	r3, [sp, #24]
 802a434:	2b61      	cmp	r3, #97	@ 0x61
 802a436:	d02e      	beq.n	802a496 <_vfprintf_r+0x4de>
 802a438:	2b41      	cmp	r3, #65	@ 0x41
 802a43a:	d12e      	bne.n	802a49a <_vfprintf_r+0x4e2>
 802a43c:	2358      	movs	r3, #88	@ 0x58
 802a43e:	2230      	movs	r2, #48	@ 0x30
 802a440:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 802a444:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 802a448:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a44c:	f045 0502 	orr.w	r5, r5, #2
 802a450:	f340 80ae 	ble.w	802a5b0 <_vfprintf_r+0x5f8>
 802a454:	9803      	ldr	r0, [sp, #12]
 802a456:	f109 0101 	add.w	r1, r9, #1
 802a45a:	f004 fd0f 	bl	802ee7c <_malloc_r>
 802a45e:	4680      	mov	r8, r0
 802a460:	2800      	cmp	r0, #0
 802a462:	f040 80aa 	bne.w	802a5ba <_vfprintf_r+0x602>
 802a466:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a46a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a46e:	f8ab 300c 	strh.w	r3, [fp, #12]
 802a472:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a476:	07d9      	lsls	r1, r3, #31
 802a478:	d407      	bmi.n	802a48a <_vfprintf_r+0x4d2>
 802a47a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a47e:	059a      	lsls	r2, r3, #22
 802a480:	d403      	bmi.n	802a48a <_vfprintf_r+0x4d2>
 802a482:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a486:	f003 fcde 	bl	802de46 <__retarget_lock_release_recursive>
 802a48a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a48e:	065b      	lsls	r3, r3, #25
 802a490:	f57f add6 	bpl.w	802a040 <_vfprintf_r+0x88>
 802a494:	e5d1      	b.n	802a03a <_vfprintf_r+0x82>
 802a496:	2378      	movs	r3, #120	@ 0x78
 802a498:	e7d1      	b.n	802a43e <_vfprintf_r+0x486>
 802a49a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802a49e:	f000 808e 	beq.w	802a5be <_vfprintf_r+0x606>
 802a4a2:	9b06      	ldr	r3, [sp, #24]
 802a4a4:	f023 0320 	bic.w	r3, r3, #32
 802a4a8:	2b47      	cmp	r3, #71	@ 0x47
 802a4aa:	d105      	bne.n	802a4b8 <_vfprintf_r+0x500>
 802a4ac:	f1b9 0f00 	cmp.w	r9, #0
 802a4b0:	d102      	bne.n	802a4b8 <_vfprintf_r+0x500>
 802a4b2:	46ca      	mov	sl, r9
 802a4b4:	f04f 0901 	mov.w	r9, #1
 802a4b8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a4bc:	9311      	str	r3, [sp, #68]	@ 0x44
 802a4be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a4c0:	2b00      	cmp	r3, #0
 802a4c2:	da7f      	bge.n	802a5c4 <_vfprintf_r+0x60c>
 802a4c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a4c6:	9314      	str	r3, [sp, #80]	@ 0x50
 802a4c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a4ca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802a4ce:	9315      	str	r3, [sp, #84]	@ 0x54
 802a4d0:	232d      	movs	r3, #45	@ 0x2d
 802a4d2:	931c      	str	r3, [sp, #112]	@ 0x70
 802a4d4:	9b06      	ldr	r3, [sp, #24]
 802a4d6:	f023 0320 	bic.w	r3, r3, #32
 802a4da:	2b41      	cmp	r3, #65	@ 0x41
 802a4dc:	9308      	str	r3, [sp, #32]
 802a4de:	f040 81e7 	bne.w	802a8b0 <_vfprintf_r+0x8f8>
 802a4e2:	a820      	add	r0, sp, #128	@ 0x80
 802a4e4:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a4e8:	f003 fcd2 	bl	802de90 <frexp>
 802a4ec:	2200      	movs	r2, #0
 802a4ee:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802a4f2:	ec51 0b10 	vmov	r0, r1, d0
 802a4f6:	f7e6 f897 	bl	8010628 <__aeabi_dmul>
 802a4fa:	4602      	mov	r2, r0
 802a4fc:	460b      	mov	r3, r1
 802a4fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a502:	2200      	movs	r2, #0
 802a504:	2300      	movs	r3, #0
 802a506:	f7e6 faf7 	bl	8010af8 <__aeabi_dcmpeq>
 802a50a:	b108      	cbz	r0, 802a510 <_vfprintf_r+0x558>
 802a50c:	2301      	movs	r3, #1
 802a50e:	9320      	str	r3, [sp, #128]	@ 0x80
 802a510:	4a35      	ldr	r2, [pc, #212]	@ (802a5e8 <_vfprintf_r+0x630>)
 802a512:	4b36      	ldr	r3, [pc, #216]	@ (802a5ec <_vfprintf_r+0x634>)
 802a514:	9906      	ldr	r1, [sp, #24]
 802a516:	2961      	cmp	r1, #97	@ 0x61
 802a518:	bf18      	it	ne
 802a51a:	461a      	movne	r2, r3
 802a51c:	9210      	str	r2, [sp, #64]	@ 0x40
 802a51e:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 802a522:	4646      	mov	r6, r8
 802a524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a528:	4b31      	ldr	r3, [pc, #196]	@ (802a5f0 <_vfprintf_r+0x638>)
 802a52a:	2200      	movs	r2, #0
 802a52c:	f7e6 f87c 	bl	8010628 <__aeabi_dmul>
 802a530:	4602      	mov	r2, r0
 802a532:	460b      	mov	r3, r1
 802a534:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a538:	f7e6 fb26 	bl	8010b88 <__aeabi_d2iz>
 802a53c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802a53e:	f7e6 f809 	bl	8010554 <__aeabi_i2d>
 802a542:	4602      	mov	r2, r0
 802a544:	460b      	mov	r3, r1
 802a546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a54a:	f7e5 feb5 	bl	80102b8 <__aeabi_dsub>
 802a54e:	4602      	mov	r2, r0
 802a550:	460b      	mov	r3, r1
 802a552:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a556:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a558:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a55a:	5c9b      	ldrb	r3, [r3, r2]
 802a55c:	f806 3b01 	strb.w	r3, [r6], #1
 802a560:	1c7a      	adds	r2, r7, #1
 802a562:	d006      	beq.n	802a572 <_vfprintf_r+0x5ba>
 802a564:	1e7b      	subs	r3, r7, #1
 802a566:	931d      	str	r3, [sp, #116]	@ 0x74
 802a568:	2200      	movs	r2, #0
 802a56a:	2300      	movs	r3, #0
 802a56c:	f7e6 fac4 	bl	8010af8 <__aeabi_dcmpeq>
 802a570:	b370      	cbz	r0, 802a5d0 <_vfprintf_r+0x618>
 802a572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a576:	4b1f      	ldr	r3, [pc, #124]	@ (802a5f4 <_vfprintf_r+0x63c>)
 802a578:	2200      	movs	r2, #0
 802a57a:	f7e6 fae5 	bl	8010b48 <__aeabi_dcmpgt>
 802a57e:	2800      	cmp	r0, #0
 802a580:	d13a      	bne.n	802a5f8 <_vfprintf_r+0x640>
 802a582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a586:	4b1b      	ldr	r3, [pc, #108]	@ (802a5f4 <_vfprintf_r+0x63c>)
 802a588:	2200      	movs	r2, #0
 802a58a:	f7e6 fab5 	bl	8010af8 <__aeabi_dcmpeq>
 802a58e:	b110      	cbz	r0, 802a596 <_vfprintf_r+0x5de>
 802a590:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a592:	07db      	lsls	r3, r3, #31
 802a594:	d430      	bmi.n	802a5f8 <_vfprintf_r+0x640>
 802a596:	4633      	mov	r3, r6
 802a598:	19f1      	adds	r1, r6, r7
 802a59a:	2030      	movs	r0, #48	@ 0x30
 802a59c:	1aca      	subs	r2, r1, r3
 802a59e:	2a00      	cmp	r2, #0
 802a5a0:	f280 8183 	bge.w	802a8aa <_vfprintf_r+0x8f2>
 802a5a4:	1c7b      	adds	r3, r7, #1
 802a5a6:	3701      	adds	r7, #1
 802a5a8:	bfb8      	it	lt
 802a5aa:	2300      	movlt	r3, #0
 802a5ac:	441e      	add	r6, r3
 802a5ae:	e037      	b.n	802a620 <_vfprintf_r+0x668>
 802a5b0:	f04f 0a00 	mov.w	sl, #0
 802a5b4:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802a5b8:	e77e      	b.n	802a4b8 <_vfprintf_r+0x500>
 802a5ba:	4682      	mov	sl, r0
 802a5bc:	e77c      	b.n	802a4b8 <_vfprintf_r+0x500>
 802a5be:	f04f 0906 	mov.w	r9, #6
 802a5c2:	e779      	b.n	802a4b8 <_vfprintf_r+0x500>
 802a5c4:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802a5c8:	2300      	movs	r3, #0
 802a5ca:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802a5ce:	e780      	b.n	802a4d2 <_vfprintf_r+0x51a>
 802a5d0:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802a5d2:	e7a7      	b.n	802a524 <_vfprintf_r+0x56c>
 802a5d4:	7fefffff 	.word	0x7fefffff
 802a5d8:	0803bcbf 	.word	0x0803bcbf
 802a5dc:	0803bcc3 	.word	0x0803bcc3
 802a5e0:	0803bcc7 	.word	0x0803bcc7
 802a5e4:	0803bccb 	.word	0x0803bccb
 802a5e8:	0803bccf 	.word	0x0803bccf
 802a5ec:	0803bce0 	.word	0x0803bce0
 802a5f0:	40300000 	.word	0x40300000
 802a5f4:	3fe00000 	.word	0x3fe00000
 802a5f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a5fa:	9624      	str	r6, [sp, #144]	@ 0x90
 802a5fc:	7bd9      	ldrb	r1, [r3, #15]
 802a5fe:	2030      	movs	r0, #48	@ 0x30
 802a600:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802a602:	1e53      	subs	r3, r2, #1
 802a604:	9324      	str	r3, [sp, #144]	@ 0x90
 802a606:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802a60a:	428b      	cmp	r3, r1
 802a60c:	f000 814a 	beq.w	802a8a4 <_vfprintf_r+0x8ec>
 802a610:	2b39      	cmp	r3, #57	@ 0x39
 802a612:	bf0b      	itete	eq
 802a614:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 802a616:	3301      	addne	r3, #1
 802a618:	7a9b      	ldrbeq	r3, [r3, #10]
 802a61a:	b2db      	uxtbne	r3, r3
 802a61c:	f802 3c01 	strb.w	r3, [r2, #-1]
 802a620:	eba6 0308 	sub.w	r3, r6, r8
 802a624:	9304      	str	r3, [sp, #16]
 802a626:	9b08      	ldr	r3, [sp, #32]
 802a628:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802a62a:	2b47      	cmp	r3, #71	@ 0x47
 802a62c:	f040 8189 	bne.w	802a942 <_vfprintf_r+0x98a>
 802a630:	1cf1      	adds	r1, r6, #3
 802a632:	db02      	blt.n	802a63a <_vfprintf_r+0x682>
 802a634:	45b1      	cmp	r9, r6
 802a636:	f280 81a7 	bge.w	802a988 <_vfprintf_r+0x9d0>
 802a63a:	9b06      	ldr	r3, [sp, #24]
 802a63c:	3b02      	subs	r3, #2
 802a63e:	9306      	str	r3, [sp, #24]
 802a640:	9906      	ldr	r1, [sp, #24]
 802a642:	f89d 2018 	ldrb.w	r2, [sp, #24]
 802a646:	f021 0120 	bic.w	r1, r1, #32
 802a64a:	2941      	cmp	r1, #65	@ 0x41
 802a64c:	bf08      	it	eq
 802a64e:	320f      	addeq	r2, #15
 802a650:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802a654:	bf06      	itte	eq
 802a656:	b2d2      	uxtbeq	r2, r2
 802a658:	2101      	moveq	r1, #1
 802a65a:	2100      	movne	r1, #0
 802a65c:	2b00      	cmp	r3, #0
 802a65e:	9320      	str	r3, [sp, #128]	@ 0x80
 802a660:	bfb8      	it	lt
 802a662:	f1c6 0301 	rsblt	r3, r6, #1
 802a666:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802a66a:	bfb4      	ite	lt
 802a66c:	222d      	movlt	r2, #45	@ 0x2d
 802a66e:	222b      	movge	r2, #43	@ 0x2b
 802a670:	2b09      	cmp	r3, #9
 802a672:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802a676:	f340 817a 	ble.w	802a96e <_vfprintf_r+0x9b6>
 802a67a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a67e:	270a      	movs	r7, #10
 802a680:	4602      	mov	r2, r0
 802a682:	fbb3 f6f7 	udiv	r6, r3, r7
 802a686:	fb07 3116 	mls	r1, r7, r6, r3
 802a68a:	3130      	adds	r1, #48	@ 0x30
 802a68c:	f802 1c01 	strb.w	r1, [r2, #-1]
 802a690:	4619      	mov	r1, r3
 802a692:	2963      	cmp	r1, #99	@ 0x63
 802a694:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 802a698:	4633      	mov	r3, r6
 802a69a:	dcf1      	bgt.n	802a680 <_vfprintf_r+0x6c8>
 802a69c:	3330      	adds	r3, #48	@ 0x30
 802a69e:	1e91      	subs	r1, r2, #2
 802a6a0:	f800 3c01 	strb.w	r3, [r0, #-1]
 802a6a4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 802a6a8:	460b      	mov	r3, r1
 802a6aa:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a6ae:	4283      	cmp	r3, r0
 802a6b0:	f0c0 8158 	bcc.w	802a964 <_vfprintf_r+0x9ac>
 802a6b4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 802a6b8:	1a9b      	subs	r3, r3, r2
 802a6ba:	4281      	cmp	r1, r0
 802a6bc:	bf88      	it	hi
 802a6be:	2300      	movhi	r3, #0
 802a6c0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a6c4:	441a      	add	r2, r3
 802a6c6:	ab22      	add	r3, sp, #136	@ 0x88
 802a6c8:	1ad3      	subs	r3, r2, r3
 802a6ca:	9a04      	ldr	r2, [sp, #16]
 802a6cc:	9318      	str	r3, [sp, #96]	@ 0x60
 802a6ce:	2a01      	cmp	r2, #1
 802a6d0:	eb03 0902 	add.w	r9, r3, r2
 802a6d4:	dc01      	bgt.n	802a6da <_vfprintf_r+0x722>
 802a6d6:	07ea      	lsls	r2, r5, #31
 802a6d8:	d501      	bpl.n	802a6de <_vfprintf_r+0x726>
 802a6da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a6dc:	4499      	add	r9, r3
 802a6de:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a6e2:	2700      	movs	r7, #0
 802a6e4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a6e8:	9311      	str	r3, [sp, #68]	@ 0x44
 802a6ea:	9708      	str	r7, [sp, #32]
 802a6ec:	463e      	mov	r6, r7
 802a6ee:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a6f0:	2b00      	cmp	r3, #0
 802a6f2:	f040 8191 	bne.w	802aa18 <_vfprintf_r+0xa60>
 802a6f6:	2300      	movs	r3, #0
 802a6f8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a6fa:	9310      	str	r3, [sp, #64]	@ 0x40
 802a6fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a6fe:	454b      	cmp	r3, r9
 802a700:	bfb8      	it	lt
 802a702:	464b      	movlt	r3, r9
 802a704:	9311      	str	r3, [sp, #68]	@ 0x44
 802a706:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a70a:	b113      	cbz	r3, 802a712 <_vfprintf_r+0x75a>
 802a70c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802a70e:	3301      	adds	r3, #1
 802a710:	9311      	str	r3, [sp, #68]	@ 0x44
 802a712:	f015 0302 	ands.w	r3, r5, #2
 802a716:	931c      	str	r3, [sp, #112]	@ 0x70
 802a718:	bf1e      	ittt	ne
 802a71a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802a71c:	3302      	addne	r3, #2
 802a71e:	9311      	strne	r3, [sp, #68]	@ 0x44
 802a720:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 802a724:	931d      	str	r3, [sp, #116]	@ 0x74
 802a726:	d122      	bne.n	802a76e <_vfprintf_r+0x7b6>
 802a728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a72a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a72c:	1a9b      	subs	r3, r3, r2
 802a72e:	2b00      	cmp	r3, #0
 802a730:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a732:	dd1c      	ble.n	802a76e <_vfprintf_r+0x7b6>
 802a734:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a736:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a73a:	2810      	cmp	r0, #16
 802a73c:	489f      	ldr	r0, [pc, #636]	@ (802a9bc <_vfprintf_r+0xa04>)
 802a73e:	6020      	str	r0, [r4, #0]
 802a740:	f102 0201 	add.w	r2, r2, #1
 802a744:	f104 0108 	add.w	r1, r4, #8
 802a748:	f300 8297 	bgt.w	802ac7a <_vfprintf_r+0xcc2>
 802a74c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a74e:	6060      	str	r0, [r4, #4]
 802a750:	4403      	add	r3, r0
 802a752:	2a07      	cmp	r2, #7
 802a754:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a758:	f340 82a4 	ble.w	802aca4 <_vfprintf_r+0xcec>
 802a75c:	9803      	ldr	r0, [sp, #12]
 802a75e:	aa26      	add	r2, sp, #152	@ 0x98
 802a760:	4659      	mov	r1, fp
 802a762:	f000 fe95 	bl	802b490 <__sprint_r>
 802a766:	2800      	cmp	r0, #0
 802a768:	f040 85ed 	bne.w	802b346 <_vfprintf_r+0x138e>
 802a76c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a76e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802a772:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a774:	b16a      	cbz	r2, 802a792 <_vfprintf_r+0x7da>
 802a776:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802a77a:	6022      	str	r2, [r4, #0]
 802a77c:	2201      	movs	r2, #1
 802a77e:	4413      	add	r3, r2
 802a780:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a782:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a784:	6062      	str	r2, [r4, #4]
 802a786:	4413      	add	r3, r2
 802a788:	2b07      	cmp	r3, #7
 802a78a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a78c:	f300 828c 	bgt.w	802aca8 <_vfprintf_r+0xcf0>
 802a790:	3408      	adds	r4, #8
 802a792:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802a794:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a796:	b162      	cbz	r2, 802a7b2 <_vfprintf_r+0x7fa>
 802a798:	aa1f      	add	r2, sp, #124	@ 0x7c
 802a79a:	6022      	str	r2, [r4, #0]
 802a79c:	2202      	movs	r2, #2
 802a79e:	4413      	add	r3, r2
 802a7a0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a7a2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a7a4:	6062      	str	r2, [r4, #4]
 802a7a6:	3301      	adds	r3, #1
 802a7a8:	2b07      	cmp	r3, #7
 802a7aa:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a7ac:	f300 8286 	bgt.w	802acbc <_vfprintf_r+0xd04>
 802a7b0:	3408      	adds	r4, #8
 802a7b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802a7b4:	2b80      	cmp	r3, #128	@ 0x80
 802a7b6:	d122      	bne.n	802a7fe <_vfprintf_r+0x846>
 802a7b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a7ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a7bc:	1a9b      	subs	r3, r3, r2
 802a7be:	2b00      	cmp	r3, #0
 802a7c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a7c2:	dd1c      	ble.n	802a7fe <_vfprintf_r+0x846>
 802a7c4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a7c6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a7ca:	2810      	cmp	r0, #16
 802a7cc:	487c      	ldr	r0, [pc, #496]	@ (802a9c0 <_vfprintf_r+0xa08>)
 802a7ce:	6020      	str	r0, [r4, #0]
 802a7d0:	f102 0201 	add.w	r2, r2, #1
 802a7d4:	f104 0108 	add.w	r1, r4, #8
 802a7d8:	f300 827a 	bgt.w	802acd0 <_vfprintf_r+0xd18>
 802a7dc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a7de:	6060      	str	r0, [r4, #4]
 802a7e0:	4403      	add	r3, r0
 802a7e2:	2a07      	cmp	r2, #7
 802a7e4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a7e8:	f340 8287 	ble.w	802acfa <_vfprintf_r+0xd42>
 802a7ec:	9803      	ldr	r0, [sp, #12]
 802a7ee:	aa26      	add	r2, sp, #152	@ 0x98
 802a7f0:	4659      	mov	r1, fp
 802a7f2:	f000 fe4d 	bl	802b490 <__sprint_r>
 802a7f6:	2800      	cmp	r0, #0
 802a7f8:	f040 85a5 	bne.w	802b346 <_vfprintf_r+0x138e>
 802a7fc:	ac29      	add	r4, sp, #164	@ 0xa4
 802a7fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a800:	eba3 0309 	sub.w	r3, r3, r9
 802a804:	2b00      	cmp	r3, #0
 802a806:	9310      	str	r3, [sp, #64]	@ 0x40
 802a808:	dd1c      	ble.n	802a844 <_vfprintf_r+0x88c>
 802a80a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a80c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a810:	2810      	cmp	r0, #16
 802a812:	486b      	ldr	r0, [pc, #428]	@ (802a9c0 <_vfprintf_r+0xa08>)
 802a814:	6020      	str	r0, [r4, #0]
 802a816:	f102 0201 	add.w	r2, r2, #1
 802a81a:	f104 0108 	add.w	r1, r4, #8
 802a81e:	f300 826e 	bgt.w	802acfe <_vfprintf_r+0xd46>
 802a822:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a824:	6060      	str	r0, [r4, #4]
 802a826:	4403      	add	r3, r0
 802a828:	2a07      	cmp	r2, #7
 802a82a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a82e:	f340 827b 	ble.w	802ad28 <_vfprintf_r+0xd70>
 802a832:	9803      	ldr	r0, [sp, #12]
 802a834:	aa26      	add	r2, sp, #152	@ 0x98
 802a836:	4659      	mov	r1, fp
 802a838:	f000 fe2a 	bl	802b490 <__sprint_r>
 802a83c:	2800      	cmp	r0, #0
 802a83e:	f040 8582 	bne.w	802b346 <_vfprintf_r+0x138e>
 802a842:	ac29      	add	r4, sp, #164	@ 0xa4
 802a844:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a846:	9310      	str	r3, [sp, #64]	@ 0x40
 802a848:	05e8      	lsls	r0, r5, #23
 802a84a:	f100 8273 	bmi.w	802ad34 <_vfprintf_r+0xd7c>
 802a84e:	444b      	add	r3, r9
 802a850:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a852:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a854:	3301      	adds	r3, #1
 802a856:	2b07      	cmp	r3, #7
 802a858:	e9c4 8900 	strd	r8, r9, [r4]
 802a85c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a85e:	f300 82af 	bgt.w	802adc0 <_vfprintf_r+0xe08>
 802a862:	3408      	adds	r4, #8
 802a864:	0768      	lsls	r0, r5, #29
 802a866:	f100 8550 	bmi.w	802b30a <_vfprintf_r+0x1352>
 802a86a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802a86e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802a870:	428a      	cmp	r2, r1
 802a872:	bfac      	ite	ge
 802a874:	189b      	addge	r3, r3, r2
 802a876:	185b      	addlt	r3, r3, r1
 802a878:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a87a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a87c:	b13b      	cbz	r3, 802a88e <_vfprintf_r+0x8d6>
 802a87e:	9803      	ldr	r0, [sp, #12]
 802a880:	aa26      	add	r2, sp, #152	@ 0x98
 802a882:	4659      	mov	r1, fp
 802a884:	f000 fe04 	bl	802b490 <__sprint_r>
 802a888:	2800      	cmp	r0, #0
 802a88a:	f040 855c 	bne.w	802b346 <_vfprintf_r+0x138e>
 802a88e:	2300      	movs	r3, #0
 802a890:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a892:	f1ba 0f00 	cmp.w	sl, #0
 802a896:	f040 8572 	bne.w	802b37e <_vfprintf_r+0x13c6>
 802a89a:	9e07      	ldr	r6, [sp, #28]
 802a89c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a89e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 802a8a2:	e407      	b.n	802a0b4 <_vfprintf_r+0xfc>
 802a8a4:	f802 0c01 	strb.w	r0, [r2, #-1]
 802a8a8:	e6aa      	b.n	802a600 <_vfprintf_r+0x648>
 802a8aa:	f803 0b01 	strb.w	r0, [r3], #1
 802a8ae:	e675      	b.n	802a59c <_vfprintf_r+0x5e4>
 802a8b0:	9b08      	ldr	r3, [sp, #32]
 802a8b2:	2b46      	cmp	r3, #70	@ 0x46
 802a8b4:	d005      	beq.n	802a8c2 <_vfprintf_r+0x90a>
 802a8b6:	2b45      	cmp	r3, #69	@ 0x45
 802a8b8:	d11a      	bne.n	802a8f0 <_vfprintf_r+0x938>
 802a8ba:	f109 0601 	add.w	r6, r9, #1
 802a8be:	2102      	movs	r1, #2
 802a8c0:	e001      	b.n	802a8c6 <_vfprintf_r+0x90e>
 802a8c2:	464e      	mov	r6, r9
 802a8c4:	2103      	movs	r1, #3
 802a8c6:	ab24      	add	r3, sp, #144	@ 0x90
 802a8c8:	9301      	str	r3, [sp, #4]
 802a8ca:	ab21      	add	r3, sp, #132	@ 0x84
 802a8cc:	9300      	str	r3, [sp, #0]
 802a8ce:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a8d2:	ab20      	add	r3, sp, #128	@ 0x80
 802a8d4:	9803      	ldr	r0, [sp, #12]
 802a8d6:	4632      	mov	r2, r6
 802a8d8:	f003 fbb6 	bl	802e048 <_dtoa_r>
 802a8dc:	9b08      	ldr	r3, [sp, #32]
 802a8de:	2b47      	cmp	r3, #71	@ 0x47
 802a8e0:	4680      	mov	r8, r0
 802a8e2:	d119      	bne.n	802a918 <_vfprintf_r+0x960>
 802a8e4:	07e8      	lsls	r0, r5, #31
 802a8e6:	d405      	bmi.n	802a8f4 <_vfprintf_r+0x93c>
 802a8e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a8ea:	eba3 0308 	sub.w	r3, r3, r8
 802a8ee:	e699      	b.n	802a624 <_vfprintf_r+0x66c>
 802a8f0:	464e      	mov	r6, r9
 802a8f2:	e7e4      	b.n	802a8be <_vfprintf_r+0x906>
 802a8f4:	eb08 0706 	add.w	r7, r8, r6
 802a8f8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a8fc:	2200      	movs	r2, #0
 802a8fe:	2300      	movs	r3, #0
 802a900:	f7e6 f8fa 	bl	8010af8 <__aeabi_dcmpeq>
 802a904:	b100      	cbz	r0, 802a908 <_vfprintf_r+0x950>
 802a906:	9724      	str	r7, [sp, #144]	@ 0x90
 802a908:	2230      	movs	r2, #48	@ 0x30
 802a90a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a90c:	429f      	cmp	r7, r3
 802a90e:	d9eb      	bls.n	802a8e8 <_vfprintf_r+0x930>
 802a910:	1c59      	adds	r1, r3, #1
 802a912:	9124      	str	r1, [sp, #144]	@ 0x90
 802a914:	701a      	strb	r2, [r3, #0]
 802a916:	e7f8      	b.n	802a90a <_vfprintf_r+0x952>
 802a918:	9b08      	ldr	r3, [sp, #32]
 802a91a:	2b46      	cmp	r3, #70	@ 0x46
 802a91c:	eb00 0706 	add.w	r7, r0, r6
 802a920:	d1ea      	bne.n	802a8f8 <_vfprintf_r+0x940>
 802a922:	7803      	ldrb	r3, [r0, #0]
 802a924:	2b30      	cmp	r3, #48	@ 0x30
 802a926:	d109      	bne.n	802a93c <_vfprintf_r+0x984>
 802a928:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a92c:	2200      	movs	r2, #0
 802a92e:	2300      	movs	r3, #0
 802a930:	f7e6 f8e2 	bl	8010af8 <__aeabi_dcmpeq>
 802a934:	b910      	cbnz	r0, 802a93c <_vfprintf_r+0x984>
 802a936:	f1c6 0601 	rsb	r6, r6, #1
 802a93a:	9620      	str	r6, [sp, #128]	@ 0x80
 802a93c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a93e:	441f      	add	r7, r3
 802a940:	e7da      	b.n	802a8f8 <_vfprintf_r+0x940>
 802a942:	9b08      	ldr	r3, [sp, #32]
 802a944:	2b46      	cmp	r3, #70	@ 0x46
 802a946:	f47f ae7b 	bne.w	802a640 <_vfprintf_r+0x688>
 802a94a:	f005 0301 	and.w	r3, r5, #1
 802a94e:	2e00      	cmp	r6, #0
 802a950:	ea43 0309 	orr.w	r3, r3, r9
 802a954:	dd25      	ble.n	802a9a2 <_vfprintf_r+0x9ea>
 802a956:	b37b      	cbz	r3, 802a9b8 <_vfprintf_r+0xa00>
 802a958:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a95a:	18f3      	adds	r3, r6, r3
 802a95c:	4499      	add	r9, r3
 802a95e:	2366      	movs	r3, #102	@ 0x66
 802a960:	9306      	str	r3, [sp, #24]
 802a962:	e033      	b.n	802a9cc <_vfprintf_r+0xa14>
 802a964:	f813 7b01 	ldrb.w	r7, [r3], #1
 802a968:	f806 7f01 	strb.w	r7, [r6, #1]!
 802a96c:	e69f      	b.n	802a6ae <_vfprintf_r+0x6f6>
 802a96e:	b941      	cbnz	r1, 802a982 <_vfprintf_r+0x9ca>
 802a970:	2230      	movs	r2, #48	@ 0x30
 802a972:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802a976:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802a97a:	3330      	adds	r3, #48	@ 0x30
 802a97c:	f802 3b01 	strb.w	r3, [r2], #1
 802a980:	e6a1      	b.n	802a6c6 <_vfprintf_r+0x70e>
 802a982:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a986:	e7f8      	b.n	802a97a <_vfprintf_r+0x9c2>
 802a988:	9b04      	ldr	r3, [sp, #16]
 802a98a:	42b3      	cmp	r3, r6
 802a98c:	dd0d      	ble.n	802a9aa <_vfprintf_r+0x9f2>
 802a98e:	9b04      	ldr	r3, [sp, #16]
 802a990:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a992:	2e00      	cmp	r6, #0
 802a994:	eb03 0902 	add.w	r9, r3, r2
 802a998:	dc0c      	bgt.n	802a9b4 <_vfprintf_r+0x9fc>
 802a99a:	f1c6 0301 	rsb	r3, r6, #1
 802a99e:	4499      	add	r9, r3
 802a9a0:	e008      	b.n	802a9b4 <_vfprintf_r+0x9fc>
 802a9a2:	b17b      	cbz	r3, 802a9c4 <_vfprintf_r+0xa0c>
 802a9a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a9a6:	3301      	adds	r3, #1
 802a9a8:	e7d8      	b.n	802a95c <_vfprintf_r+0x9a4>
 802a9aa:	07eb      	lsls	r3, r5, #31
 802a9ac:	d521      	bpl.n	802a9f2 <_vfprintf_r+0xa3a>
 802a9ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a9b0:	eb06 0903 	add.w	r9, r6, r3
 802a9b4:	2367      	movs	r3, #103	@ 0x67
 802a9b6:	e7d3      	b.n	802a960 <_vfprintf_r+0x9a8>
 802a9b8:	46b1      	mov	r9, r6
 802a9ba:	e7d0      	b.n	802a95e <_vfprintf_r+0x9a6>
 802a9bc:	0803bd03 	.word	0x0803bd03
 802a9c0:	0803bcf3 	.word	0x0803bcf3
 802a9c4:	2366      	movs	r3, #102	@ 0x66
 802a9c6:	9306      	str	r3, [sp, #24]
 802a9c8:	f04f 0901 	mov.w	r9, #1
 802a9cc:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802a9d0:	9308      	str	r3, [sp, #32]
 802a9d2:	d01f      	beq.n	802aa14 <_vfprintf_r+0xa5c>
 802a9d4:	2700      	movs	r7, #0
 802a9d6:	2e00      	cmp	r6, #0
 802a9d8:	9708      	str	r7, [sp, #32]
 802a9da:	f77f ae88 	ble.w	802a6ee <_vfprintf_r+0x736>
 802a9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a9e0:	781b      	ldrb	r3, [r3, #0]
 802a9e2:	2bff      	cmp	r3, #255	@ 0xff
 802a9e4:	d107      	bne.n	802a9f6 <_vfprintf_r+0xa3e>
 802a9e6:	9b08      	ldr	r3, [sp, #32]
 802a9e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a9ea:	443b      	add	r3, r7
 802a9ec:	fb02 9903 	mla	r9, r2, r3, r9
 802a9f0:	e67d      	b.n	802a6ee <_vfprintf_r+0x736>
 802a9f2:	46b1      	mov	r9, r6
 802a9f4:	e7de      	b.n	802a9b4 <_vfprintf_r+0x9fc>
 802a9f6:	42b3      	cmp	r3, r6
 802a9f8:	daf5      	bge.n	802a9e6 <_vfprintf_r+0xa2e>
 802a9fa:	1af6      	subs	r6, r6, r3
 802a9fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a9fe:	785b      	ldrb	r3, [r3, #1]
 802aa00:	b133      	cbz	r3, 802aa10 <_vfprintf_r+0xa58>
 802aa02:	9b08      	ldr	r3, [sp, #32]
 802aa04:	3301      	adds	r3, #1
 802aa06:	9308      	str	r3, [sp, #32]
 802aa08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aa0a:	3301      	adds	r3, #1
 802aa0c:	9309      	str	r3, [sp, #36]	@ 0x24
 802aa0e:	e7e6      	b.n	802a9de <_vfprintf_r+0xa26>
 802aa10:	3701      	adds	r7, #1
 802aa12:	e7e4      	b.n	802a9de <_vfprintf_r+0xa26>
 802aa14:	9f08      	ldr	r7, [sp, #32]
 802aa16:	e66a      	b.n	802a6ee <_vfprintf_r+0x736>
 802aa18:	232d      	movs	r3, #45	@ 0x2d
 802aa1a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802aa1e:	e66a      	b.n	802a6f6 <_vfprintf_r+0x73e>
 802aa20:	06af      	lsls	r7, r5, #26
 802aa22:	d507      	bpl.n	802aa34 <_vfprintf_r+0xa7c>
 802aa24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aa26:	6833      	ldr	r3, [r6, #0]
 802aa28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802aa2a:	17d2      	asrs	r2, r2, #31
 802aa2c:	e9c3 1200 	strd	r1, r2, [r3]
 802aa30:	3604      	adds	r6, #4
 802aa32:	e734      	b.n	802a89e <_vfprintf_r+0x8e6>
 802aa34:	06e8      	lsls	r0, r5, #27
 802aa36:	d503      	bpl.n	802aa40 <_vfprintf_r+0xa88>
 802aa38:	6833      	ldr	r3, [r6, #0]
 802aa3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aa3c:	601a      	str	r2, [r3, #0]
 802aa3e:	e7f7      	b.n	802aa30 <_vfprintf_r+0xa78>
 802aa40:	0669      	lsls	r1, r5, #25
 802aa42:	d503      	bpl.n	802aa4c <_vfprintf_r+0xa94>
 802aa44:	6833      	ldr	r3, [r6, #0]
 802aa46:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aa48:	801a      	strh	r2, [r3, #0]
 802aa4a:	e7f1      	b.n	802aa30 <_vfprintf_r+0xa78>
 802aa4c:	05aa      	lsls	r2, r5, #22
 802aa4e:	d5f3      	bpl.n	802aa38 <_vfprintf_r+0xa80>
 802aa50:	6833      	ldr	r3, [r6, #0]
 802aa52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aa54:	701a      	strb	r2, [r3, #0]
 802aa56:	e7eb      	b.n	802aa30 <_vfprintf_r+0xa78>
 802aa58:	f045 0510 	orr.w	r5, r5, #16
 802aa5c:	f015 0320 	ands.w	r3, r5, #32
 802aa60:	d020      	beq.n	802aaa4 <_vfprintf_r+0xaec>
 802aa62:	3607      	adds	r6, #7
 802aa64:	f026 0307 	bic.w	r3, r6, #7
 802aa68:	461a      	mov	r2, r3
 802aa6a:	685f      	ldr	r7, [r3, #4]
 802aa6c:	f852 6b08 	ldr.w	r6, [r2], #8
 802aa70:	9207      	str	r2, [sp, #28]
 802aa72:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802aa76:	2300      	movs	r3, #0
 802aa78:	2200      	movs	r2, #0
 802aa7a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802aa7e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802aa82:	f000 8491 	beq.w	802b3a8 <_vfprintf_r+0x13f0>
 802aa86:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802aa8a:	9208      	str	r2, [sp, #32]
 802aa8c:	ea56 0207 	orrs.w	r2, r6, r7
 802aa90:	f040 848f 	bne.w	802b3b2 <_vfprintf_r+0x13fa>
 802aa94:	f1b9 0f00 	cmp.w	r9, #0
 802aa98:	f000 80db 	beq.w	802ac52 <_vfprintf_r+0xc9a>
 802aa9c:	2b01      	cmp	r3, #1
 802aa9e:	f040 848b 	bne.w	802b3b8 <_vfprintf_r+0x1400>
 802aaa2:	e083      	b.n	802abac <_vfprintf_r+0xbf4>
 802aaa4:	4632      	mov	r2, r6
 802aaa6:	f015 0710 	ands.w	r7, r5, #16
 802aaaa:	f852 6b04 	ldr.w	r6, [r2], #4
 802aaae:	9207      	str	r2, [sp, #28]
 802aab0:	d001      	beq.n	802aab6 <_vfprintf_r+0xafe>
 802aab2:	461f      	mov	r7, r3
 802aab4:	e7dd      	b.n	802aa72 <_vfprintf_r+0xaba>
 802aab6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802aaba:	d001      	beq.n	802aac0 <_vfprintf_r+0xb08>
 802aabc:	b2b6      	uxth	r6, r6
 802aabe:	e7d8      	b.n	802aa72 <_vfprintf_r+0xaba>
 802aac0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802aac4:	d0d5      	beq.n	802aa72 <_vfprintf_r+0xaba>
 802aac6:	b2f6      	uxtb	r6, r6
 802aac8:	e7f3      	b.n	802aab2 <_vfprintf_r+0xafa>
 802aaca:	4633      	mov	r3, r6
 802aacc:	2278      	movs	r2, #120	@ 0x78
 802aace:	f853 6b04 	ldr.w	r6, [r3], #4
 802aad2:	9307      	str	r3, [sp, #28]
 802aad4:	f647 0330 	movw	r3, #30768	@ 0x7830
 802aad8:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802aadc:	4b93      	ldr	r3, [pc, #588]	@ (802ad2c <_vfprintf_r+0xd74>)
 802aade:	9319      	str	r3, [sp, #100]	@ 0x64
 802aae0:	2700      	movs	r7, #0
 802aae2:	f045 0502 	orr.w	r5, r5, #2
 802aae6:	2302      	movs	r3, #2
 802aae8:	9206      	str	r2, [sp, #24]
 802aaea:	e7c5      	b.n	802aa78 <_vfprintf_r+0xac0>
 802aaec:	4633      	mov	r3, r6
 802aaee:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802aaf2:	f853 8b04 	ldr.w	r8, [r3], #4
 802aaf6:	9307      	str	r3, [sp, #28]
 802aaf8:	f04f 0600 	mov.w	r6, #0
 802aafc:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802ab00:	d00f      	beq.n	802ab22 <_vfprintf_r+0xb6a>
 802ab02:	464a      	mov	r2, r9
 802ab04:	4631      	mov	r1, r6
 802ab06:	4640      	mov	r0, r8
 802ab08:	f7e5 fb7a 	bl	8010200 <memchr>
 802ab0c:	4682      	mov	sl, r0
 802ab0e:	2800      	cmp	r0, #0
 802ab10:	f43f ac7a 	beq.w	802a408 <_vfprintf_r+0x450>
 802ab14:	eba0 0908 	sub.w	r9, r0, r8
 802ab18:	46b2      	mov	sl, r6
 802ab1a:	9610      	str	r6, [sp, #64]	@ 0x40
 802ab1c:	4637      	mov	r7, r6
 802ab1e:	9608      	str	r6, [sp, #32]
 802ab20:	e5ec      	b.n	802a6fc <_vfprintf_r+0x744>
 802ab22:	4640      	mov	r0, r8
 802ab24:	f7e5 fbbc 	bl	80102a0 <strlen>
 802ab28:	46b2      	mov	sl, r6
 802ab2a:	4681      	mov	r9, r0
 802ab2c:	e46c      	b.n	802a408 <_vfprintf_r+0x450>
 802ab2e:	f045 0510 	orr.w	r5, r5, #16
 802ab32:	f015 0320 	ands.w	r3, r5, #32
 802ab36:	d009      	beq.n	802ab4c <_vfprintf_r+0xb94>
 802ab38:	3607      	adds	r6, #7
 802ab3a:	f026 0307 	bic.w	r3, r6, #7
 802ab3e:	461a      	mov	r2, r3
 802ab40:	685f      	ldr	r7, [r3, #4]
 802ab42:	f852 6b08 	ldr.w	r6, [r2], #8
 802ab46:	9207      	str	r2, [sp, #28]
 802ab48:	2301      	movs	r3, #1
 802ab4a:	e795      	b.n	802aa78 <_vfprintf_r+0xac0>
 802ab4c:	4632      	mov	r2, r6
 802ab4e:	f015 0710 	ands.w	r7, r5, #16
 802ab52:	f852 6b04 	ldr.w	r6, [r2], #4
 802ab56:	9207      	str	r2, [sp, #28]
 802ab58:	d001      	beq.n	802ab5e <_vfprintf_r+0xba6>
 802ab5a:	461f      	mov	r7, r3
 802ab5c:	e7f4      	b.n	802ab48 <_vfprintf_r+0xb90>
 802ab5e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802ab62:	d001      	beq.n	802ab68 <_vfprintf_r+0xbb0>
 802ab64:	b2b6      	uxth	r6, r6
 802ab66:	e7ef      	b.n	802ab48 <_vfprintf_r+0xb90>
 802ab68:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802ab6c:	d0ec      	beq.n	802ab48 <_vfprintf_r+0xb90>
 802ab6e:	b2f6      	uxtb	r6, r6
 802ab70:	e7f3      	b.n	802ab5a <_vfprintf_r+0xba2>
 802ab72:	4b6f      	ldr	r3, [pc, #444]	@ (802ad30 <_vfprintf_r+0xd78>)
 802ab74:	f7ff bb33 	b.w	802a1de <_vfprintf_r+0x226>
 802ab78:	4632      	mov	r2, r6
 802ab7a:	f015 0710 	ands.w	r7, r5, #16
 802ab7e:	f852 6b04 	ldr.w	r6, [r2], #4
 802ab82:	9207      	str	r2, [sp, #28]
 802ab84:	d002      	beq.n	802ab8c <_vfprintf_r+0xbd4>
 802ab86:	461f      	mov	r7, r3
 802ab88:	f7ff bb36 	b.w	802a1f8 <_vfprintf_r+0x240>
 802ab8c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802ab90:	d002      	beq.n	802ab98 <_vfprintf_r+0xbe0>
 802ab92:	b2b6      	uxth	r6, r6
 802ab94:	f7ff bb30 	b.w	802a1f8 <_vfprintf_r+0x240>
 802ab98:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802ab9c:	f43f ab2c 	beq.w	802a1f8 <_vfprintf_r+0x240>
 802aba0:	b2f6      	uxtb	r6, r6
 802aba2:	e7f0      	b.n	802ab86 <_vfprintf_r+0xbce>
 802aba4:	2e0a      	cmp	r6, #10
 802aba6:	f177 0300 	sbcs.w	r3, r7, #0
 802abaa:	d207      	bcs.n	802abbc <_vfprintf_r+0xc04>
 802abac:	3630      	adds	r6, #48	@ 0x30
 802abae:	b2f6      	uxtb	r6, r6
 802abb0:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802abb4:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 802abb8:	f000 bc1a 	b.w	802b3f0 <_vfprintf_r+0x1438>
 802abbc:	2300      	movs	r3, #0
 802abbe:	9304      	str	r3, [sp, #16]
 802abc0:	9b08      	ldr	r3, [sp, #32]
 802abc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802abc6:	ad52      	add	r5, sp, #328	@ 0x148
 802abc8:	9310      	str	r3, [sp, #64]	@ 0x40
 802abca:	220a      	movs	r2, #10
 802abcc:	2300      	movs	r3, #0
 802abce:	4630      	mov	r0, r6
 802abd0:	4639      	mov	r1, r7
 802abd2:	f7e6 f8c1 	bl	8010d58 <__aeabi_uldivmod>
 802abd6:	9b04      	ldr	r3, [sp, #16]
 802abd8:	9011      	str	r0, [sp, #68]	@ 0x44
 802abda:	3301      	adds	r3, #1
 802abdc:	9304      	str	r3, [sp, #16]
 802abde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802abe0:	3230      	adds	r2, #48	@ 0x30
 802abe2:	468a      	mov	sl, r1
 802abe4:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 802abe8:	f805 2c01 	strb.w	r2, [r5, #-1]
 802abec:	b1d3      	cbz	r3, 802ac24 <_vfprintf_r+0xc6c>
 802abee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802abf0:	9a04      	ldr	r2, [sp, #16]
 802abf2:	781b      	ldrb	r3, [r3, #0]
 802abf4:	429a      	cmp	r2, r3
 802abf6:	d115      	bne.n	802ac24 <_vfprintf_r+0xc6c>
 802abf8:	2aff      	cmp	r2, #255	@ 0xff
 802abfa:	d013      	beq.n	802ac24 <_vfprintf_r+0xc6c>
 802abfc:	2e0a      	cmp	r6, #10
 802abfe:	f177 0300 	sbcs.w	r3, r7, #0
 802ac02:	d30f      	bcc.n	802ac24 <_vfprintf_r+0xc6c>
 802ac04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802ac06:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802ac08:	eba8 0803 	sub.w	r8, r8, r3
 802ac0c:	461a      	mov	r2, r3
 802ac0e:	4640      	mov	r0, r8
 802ac10:	f001 ff25 	bl	802ca5e <strncpy>
 802ac14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac16:	785b      	ldrb	r3, [r3, #1]
 802ac18:	b11b      	cbz	r3, 802ac22 <_vfprintf_r+0xc6a>
 802ac1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac1c:	3301      	adds	r3, #1
 802ac1e:	9309      	str	r3, [sp, #36]	@ 0x24
 802ac20:	2300      	movs	r3, #0
 802ac22:	9304      	str	r3, [sp, #16]
 802ac24:	2e0a      	cmp	r6, #10
 802ac26:	f177 0700 	sbcs.w	r7, r7, #0
 802ac2a:	f0c0 83e1 	bcc.w	802b3f0 <_vfprintf_r+0x1438>
 802ac2e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802ac30:	4657      	mov	r7, sl
 802ac32:	4645      	mov	r5, r8
 802ac34:	e7c9      	b.n	802abca <_vfprintf_r+0xc12>
 802ac36:	f006 030f 	and.w	r3, r6, #15
 802ac3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802ac3c:	0936      	lsrs	r6, r6, #4
 802ac3e:	5cd3      	ldrb	r3, [r2, r3]
 802ac40:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802ac44:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802ac48:	093f      	lsrs	r7, r7, #4
 802ac4a:	ea56 0307 	orrs.w	r3, r6, r7
 802ac4e:	d1f2      	bne.n	802ac36 <_vfprintf_r+0xc7e>
 802ac50:	e3ce      	b.n	802b3f0 <_vfprintf_r+0x1438>
 802ac52:	b91b      	cbnz	r3, 802ac5c <_vfprintf_r+0xca4>
 802ac54:	07ed      	lsls	r5, r5, #31
 802ac56:	d501      	bpl.n	802ac5c <_vfprintf_r+0xca4>
 802ac58:	2630      	movs	r6, #48	@ 0x30
 802ac5a:	e7a9      	b.n	802abb0 <_vfprintf_r+0xbf8>
 802ac5c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802ac60:	e3c6      	b.n	802b3f0 <_vfprintf_r+0x1438>
 802ac62:	9b06      	ldr	r3, [sp, #24]
 802ac64:	2b00      	cmp	r3, #0
 802ac66:	f000 8390 	beq.w	802b38a <_vfprintf_r+0x13d2>
 802ac6a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802ac6e:	2300      	movs	r3, #0
 802ac70:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802ac74:	9607      	str	r6, [sp, #28]
 802ac76:	f7ff bb5c 	b.w	802a332 <_vfprintf_r+0x37a>
 802ac7a:	2010      	movs	r0, #16
 802ac7c:	4403      	add	r3, r0
 802ac7e:	2a07      	cmp	r2, #7
 802ac80:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ac84:	6060      	str	r0, [r4, #4]
 802ac86:	dd08      	ble.n	802ac9a <_vfprintf_r+0xce2>
 802ac88:	9803      	ldr	r0, [sp, #12]
 802ac8a:	aa26      	add	r2, sp, #152	@ 0x98
 802ac8c:	4659      	mov	r1, fp
 802ac8e:	f000 fbff 	bl	802b490 <__sprint_r>
 802ac92:	2800      	cmp	r0, #0
 802ac94:	f040 8357 	bne.w	802b346 <_vfprintf_r+0x138e>
 802ac98:	a929      	add	r1, sp, #164	@ 0xa4
 802ac9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ac9c:	3b10      	subs	r3, #16
 802ac9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 802aca0:	460c      	mov	r4, r1
 802aca2:	e547      	b.n	802a734 <_vfprintf_r+0x77c>
 802aca4:	460c      	mov	r4, r1
 802aca6:	e562      	b.n	802a76e <_vfprintf_r+0x7b6>
 802aca8:	9803      	ldr	r0, [sp, #12]
 802acaa:	aa26      	add	r2, sp, #152	@ 0x98
 802acac:	4659      	mov	r1, fp
 802acae:	f000 fbef 	bl	802b490 <__sprint_r>
 802acb2:	2800      	cmp	r0, #0
 802acb4:	f040 8347 	bne.w	802b346 <_vfprintf_r+0x138e>
 802acb8:	ac29      	add	r4, sp, #164	@ 0xa4
 802acba:	e56a      	b.n	802a792 <_vfprintf_r+0x7da>
 802acbc:	9803      	ldr	r0, [sp, #12]
 802acbe:	aa26      	add	r2, sp, #152	@ 0x98
 802acc0:	4659      	mov	r1, fp
 802acc2:	f000 fbe5 	bl	802b490 <__sprint_r>
 802acc6:	2800      	cmp	r0, #0
 802acc8:	f040 833d 	bne.w	802b346 <_vfprintf_r+0x138e>
 802accc:	ac29      	add	r4, sp, #164	@ 0xa4
 802acce:	e570      	b.n	802a7b2 <_vfprintf_r+0x7fa>
 802acd0:	2010      	movs	r0, #16
 802acd2:	4403      	add	r3, r0
 802acd4:	2a07      	cmp	r2, #7
 802acd6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802acda:	6060      	str	r0, [r4, #4]
 802acdc:	dd08      	ble.n	802acf0 <_vfprintf_r+0xd38>
 802acde:	9803      	ldr	r0, [sp, #12]
 802ace0:	aa26      	add	r2, sp, #152	@ 0x98
 802ace2:	4659      	mov	r1, fp
 802ace4:	f000 fbd4 	bl	802b490 <__sprint_r>
 802ace8:	2800      	cmp	r0, #0
 802acea:	f040 832c 	bne.w	802b346 <_vfprintf_r+0x138e>
 802acee:	a929      	add	r1, sp, #164	@ 0xa4
 802acf0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802acf2:	3b10      	subs	r3, #16
 802acf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 802acf6:	460c      	mov	r4, r1
 802acf8:	e564      	b.n	802a7c4 <_vfprintf_r+0x80c>
 802acfa:	460c      	mov	r4, r1
 802acfc:	e57f      	b.n	802a7fe <_vfprintf_r+0x846>
 802acfe:	2010      	movs	r0, #16
 802ad00:	4403      	add	r3, r0
 802ad02:	2a07      	cmp	r2, #7
 802ad04:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ad08:	6060      	str	r0, [r4, #4]
 802ad0a:	dd08      	ble.n	802ad1e <_vfprintf_r+0xd66>
 802ad0c:	9803      	ldr	r0, [sp, #12]
 802ad0e:	aa26      	add	r2, sp, #152	@ 0x98
 802ad10:	4659      	mov	r1, fp
 802ad12:	f000 fbbd 	bl	802b490 <__sprint_r>
 802ad16:	2800      	cmp	r0, #0
 802ad18:	f040 8315 	bne.w	802b346 <_vfprintf_r+0x138e>
 802ad1c:	a929      	add	r1, sp, #164	@ 0xa4
 802ad1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ad20:	3b10      	subs	r3, #16
 802ad22:	9310      	str	r3, [sp, #64]	@ 0x40
 802ad24:	460c      	mov	r4, r1
 802ad26:	e570      	b.n	802a80a <_vfprintf_r+0x852>
 802ad28:	460c      	mov	r4, r1
 802ad2a:	e58b      	b.n	802a844 <_vfprintf_r+0x88c>
 802ad2c:	0803bccf 	.word	0x0803bccf
 802ad30:	0803bce0 	.word	0x0803bce0
 802ad34:	9b06      	ldr	r3, [sp, #24]
 802ad36:	2b65      	cmp	r3, #101	@ 0x65
 802ad38:	f340 8245 	ble.w	802b1c6 <_vfprintf_r+0x120e>
 802ad3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802ad40:	2200      	movs	r2, #0
 802ad42:	2300      	movs	r3, #0
 802ad44:	f7e5 fed8 	bl	8010af8 <__aeabi_dcmpeq>
 802ad48:	2800      	cmp	r0, #0
 802ad4a:	d06a      	beq.n	802ae22 <_vfprintf_r+0xe6a>
 802ad4c:	4b73      	ldr	r3, [pc, #460]	@ (802af1c <_vfprintf_r+0xf64>)
 802ad4e:	6023      	str	r3, [r4, #0]
 802ad50:	2301      	movs	r3, #1
 802ad52:	6063      	str	r3, [r4, #4]
 802ad54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ad56:	3301      	adds	r3, #1
 802ad58:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ad5a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ad5c:	3301      	adds	r3, #1
 802ad5e:	2b07      	cmp	r3, #7
 802ad60:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ad62:	dc37      	bgt.n	802add4 <_vfprintf_r+0xe1c>
 802ad64:	3408      	adds	r4, #8
 802ad66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ad68:	9a04      	ldr	r2, [sp, #16]
 802ad6a:	4293      	cmp	r3, r2
 802ad6c:	db02      	blt.n	802ad74 <_vfprintf_r+0xdbc>
 802ad6e:	07e9      	lsls	r1, r5, #31
 802ad70:	f57f ad78 	bpl.w	802a864 <_vfprintf_r+0x8ac>
 802ad74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ad76:	6023      	str	r3, [r4, #0]
 802ad78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ad7a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802ad7c:	6063      	str	r3, [r4, #4]
 802ad7e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ad80:	4413      	add	r3, r2
 802ad82:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ad84:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ad86:	3301      	adds	r3, #1
 802ad88:	2b07      	cmp	r3, #7
 802ad8a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ad8c:	dc2c      	bgt.n	802ade8 <_vfprintf_r+0xe30>
 802ad8e:	3408      	adds	r4, #8
 802ad90:	9b04      	ldr	r3, [sp, #16]
 802ad92:	1e5e      	subs	r6, r3, #1
 802ad94:	2e00      	cmp	r6, #0
 802ad96:	f77f ad65 	ble.w	802a864 <_vfprintf_r+0x8ac>
 802ad9a:	4f61      	ldr	r7, [pc, #388]	@ (802af20 <_vfprintf_r+0xf68>)
 802ad9c:	f04f 0810 	mov.w	r8, #16
 802ada0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802ada4:	2e10      	cmp	r6, #16
 802ada6:	f103 0301 	add.w	r3, r3, #1
 802adaa:	f104 0108 	add.w	r1, r4, #8
 802adae:	6027      	str	r7, [r4, #0]
 802adb0:	dc24      	bgt.n	802adfc <_vfprintf_r+0xe44>
 802adb2:	6066      	str	r6, [r4, #4]
 802adb4:	2b07      	cmp	r3, #7
 802adb6:	4416      	add	r6, r2
 802adb8:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802adbc:	f340 82a2 	ble.w	802b304 <_vfprintf_r+0x134c>
 802adc0:	9803      	ldr	r0, [sp, #12]
 802adc2:	aa26      	add	r2, sp, #152	@ 0x98
 802adc4:	4659      	mov	r1, fp
 802adc6:	f000 fb63 	bl	802b490 <__sprint_r>
 802adca:	2800      	cmp	r0, #0
 802adcc:	f040 82bb 	bne.w	802b346 <_vfprintf_r+0x138e>
 802add0:	ac29      	add	r4, sp, #164	@ 0xa4
 802add2:	e547      	b.n	802a864 <_vfprintf_r+0x8ac>
 802add4:	9803      	ldr	r0, [sp, #12]
 802add6:	aa26      	add	r2, sp, #152	@ 0x98
 802add8:	4659      	mov	r1, fp
 802adda:	f000 fb59 	bl	802b490 <__sprint_r>
 802adde:	2800      	cmp	r0, #0
 802ade0:	f040 82b1 	bne.w	802b346 <_vfprintf_r+0x138e>
 802ade4:	ac29      	add	r4, sp, #164	@ 0xa4
 802ade6:	e7be      	b.n	802ad66 <_vfprintf_r+0xdae>
 802ade8:	9803      	ldr	r0, [sp, #12]
 802adea:	aa26      	add	r2, sp, #152	@ 0x98
 802adec:	4659      	mov	r1, fp
 802adee:	f000 fb4f 	bl	802b490 <__sprint_r>
 802adf2:	2800      	cmp	r0, #0
 802adf4:	f040 82a7 	bne.w	802b346 <_vfprintf_r+0x138e>
 802adf8:	ac29      	add	r4, sp, #164	@ 0xa4
 802adfa:	e7c9      	b.n	802ad90 <_vfprintf_r+0xdd8>
 802adfc:	3210      	adds	r2, #16
 802adfe:	2b07      	cmp	r3, #7
 802ae00:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802ae04:	f8c4 8004 	str.w	r8, [r4, #4]
 802ae08:	dd08      	ble.n	802ae1c <_vfprintf_r+0xe64>
 802ae0a:	9803      	ldr	r0, [sp, #12]
 802ae0c:	aa26      	add	r2, sp, #152	@ 0x98
 802ae0e:	4659      	mov	r1, fp
 802ae10:	f000 fb3e 	bl	802b490 <__sprint_r>
 802ae14:	2800      	cmp	r0, #0
 802ae16:	f040 8296 	bne.w	802b346 <_vfprintf_r+0x138e>
 802ae1a:	a929      	add	r1, sp, #164	@ 0xa4
 802ae1c:	3e10      	subs	r6, #16
 802ae1e:	460c      	mov	r4, r1
 802ae20:	e7be      	b.n	802ada0 <_vfprintf_r+0xde8>
 802ae22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ae24:	2b00      	cmp	r3, #0
 802ae26:	dc7d      	bgt.n	802af24 <_vfprintf_r+0xf6c>
 802ae28:	4b3c      	ldr	r3, [pc, #240]	@ (802af1c <_vfprintf_r+0xf64>)
 802ae2a:	6023      	str	r3, [r4, #0]
 802ae2c:	2301      	movs	r3, #1
 802ae2e:	6063      	str	r3, [r4, #4]
 802ae30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ae32:	3301      	adds	r3, #1
 802ae34:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ae36:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ae38:	3301      	adds	r3, #1
 802ae3a:	2b07      	cmp	r3, #7
 802ae3c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ae3e:	dc46      	bgt.n	802aece <_vfprintf_r+0xf16>
 802ae40:	3408      	adds	r4, #8
 802ae42:	9904      	ldr	r1, [sp, #16]
 802ae44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ae46:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802ae48:	430b      	orrs	r3, r1
 802ae4a:	f005 0101 	and.w	r1, r5, #1
 802ae4e:	430b      	orrs	r3, r1
 802ae50:	f43f ad08 	beq.w	802a864 <_vfprintf_r+0x8ac>
 802ae54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ae56:	6023      	str	r3, [r4, #0]
 802ae58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ae5a:	6063      	str	r3, [r4, #4]
 802ae5c:	441a      	add	r2, r3
 802ae5e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ae60:	9228      	str	r2, [sp, #160]	@ 0xa0
 802ae62:	3301      	adds	r3, #1
 802ae64:	2b07      	cmp	r3, #7
 802ae66:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ae68:	dc3b      	bgt.n	802aee2 <_vfprintf_r+0xf2a>
 802ae6a:	f104 0308 	add.w	r3, r4, #8
 802ae6e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802ae70:	2e00      	cmp	r6, #0
 802ae72:	da1b      	bge.n	802aeac <_vfprintf_r+0xef4>
 802ae74:	4f2a      	ldr	r7, [pc, #168]	@ (802af20 <_vfprintf_r+0xf68>)
 802ae76:	4276      	negs	r6, r6
 802ae78:	461a      	mov	r2, r3
 802ae7a:	2410      	movs	r4, #16
 802ae7c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802ae80:	2e10      	cmp	r6, #16
 802ae82:	f101 0101 	add.w	r1, r1, #1
 802ae86:	f103 0308 	add.w	r3, r3, #8
 802ae8a:	6017      	str	r7, [r2, #0]
 802ae8c:	dc33      	bgt.n	802aef6 <_vfprintf_r+0xf3e>
 802ae8e:	6056      	str	r6, [r2, #4]
 802ae90:	2907      	cmp	r1, #7
 802ae92:	4406      	add	r6, r0
 802ae94:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802ae98:	dd08      	ble.n	802aeac <_vfprintf_r+0xef4>
 802ae9a:	9803      	ldr	r0, [sp, #12]
 802ae9c:	aa26      	add	r2, sp, #152	@ 0x98
 802ae9e:	4659      	mov	r1, fp
 802aea0:	f000 faf6 	bl	802b490 <__sprint_r>
 802aea4:	2800      	cmp	r0, #0
 802aea6:	f040 824e 	bne.w	802b346 <_vfprintf_r+0x138e>
 802aeaa:	ab29      	add	r3, sp, #164	@ 0xa4
 802aeac:	9a04      	ldr	r2, [sp, #16]
 802aeae:	9904      	ldr	r1, [sp, #16]
 802aeb0:	605a      	str	r2, [r3, #4]
 802aeb2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802aeb4:	f8c3 8000 	str.w	r8, [r3]
 802aeb8:	440a      	add	r2, r1
 802aeba:	9228      	str	r2, [sp, #160]	@ 0xa0
 802aebc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802aebe:	3201      	adds	r2, #1
 802aec0:	2a07      	cmp	r2, #7
 802aec2:	9227      	str	r2, [sp, #156]	@ 0x9c
 802aec4:	f73f af7c 	bgt.w	802adc0 <_vfprintf_r+0xe08>
 802aec8:	f103 0408 	add.w	r4, r3, #8
 802aecc:	e4ca      	b.n	802a864 <_vfprintf_r+0x8ac>
 802aece:	9803      	ldr	r0, [sp, #12]
 802aed0:	aa26      	add	r2, sp, #152	@ 0x98
 802aed2:	4659      	mov	r1, fp
 802aed4:	f000 fadc 	bl	802b490 <__sprint_r>
 802aed8:	2800      	cmp	r0, #0
 802aeda:	f040 8234 	bne.w	802b346 <_vfprintf_r+0x138e>
 802aede:	ac29      	add	r4, sp, #164	@ 0xa4
 802aee0:	e7af      	b.n	802ae42 <_vfprintf_r+0xe8a>
 802aee2:	9803      	ldr	r0, [sp, #12]
 802aee4:	aa26      	add	r2, sp, #152	@ 0x98
 802aee6:	4659      	mov	r1, fp
 802aee8:	f000 fad2 	bl	802b490 <__sprint_r>
 802aeec:	2800      	cmp	r0, #0
 802aeee:	f040 822a 	bne.w	802b346 <_vfprintf_r+0x138e>
 802aef2:	ab29      	add	r3, sp, #164	@ 0xa4
 802aef4:	e7bb      	b.n	802ae6e <_vfprintf_r+0xeb6>
 802aef6:	3010      	adds	r0, #16
 802aef8:	2907      	cmp	r1, #7
 802aefa:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802aefe:	6054      	str	r4, [r2, #4]
 802af00:	dd08      	ble.n	802af14 <_vfprintf_r+0xf5c>
 802af02:	9803      	ldr	r0, [sp, #12]
 802af04:	aa26      	add	r2, sp, #152	@ 0x98
 802af06:	4659      	mov	r1, fp
 802af08:	f000 fac2 	bl	802b490 <__sprint_r>
 802af0c:	2800      	cmp	r0, #0
 802af0e:	f040 821a 	bne.w	802b346 <_vfprintf_r+0x138e>
 802af12:	ab29      	add	r3, sp, #164	@ 0xa4
 802af14:	3e10      	subs	r6, #16
 802af16:	461a      	mov	r2, r3
 802af18:	e7b0      	b.n	802ae7c <_vfprintf_r+0xec4>
 802af1a:	bf00      	nop
 802af1c:	0803bcf1 	.word	0x0803bcf1
 802af20:	0803bcf3 	.word	0x0803bcf3
 802af24:	9b04      	ldr	r3, [sp, #16]
 802af26:	4443      	add	r3, r8
 802af28:	9313      	str	r3, [sp, #76]	@ 0x4c
 802af2a:	9b04      	ldr	r3, [sp, #16]
 802af2c:	42b3      	cmp	r3, r6
 802af2e:	bfa8      	it	ge
 802af30:	4633      	movge	r3, r6
 802af32:	2b00      	cmp	r3, #0
 802af34:	4699      	mov	r9, r3
 802af36:	dd0b      	ble.n	802af50 <_vfprintf_r+0xf98>
 802af38:	e9c4 8300 	strd	r8, r3, [r4]
 802af3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802af3e:	444b      	add	r3, r9
 802af40:	9328      	str	r3, [sp, #160]	@ 0xa0
 802af42:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802af44:	3301      	adds	r3, #1
 802af46:	2b07      	cmp	r3, #7
 802af48:	9327      	str	r3, [sp, #156]	@ 0x9c
 802af4a:	f300 8089 	bgt.w	802b060 <_vfprintf_r+0x10a8>
 802af4e:	3408      	adds	r4, #8
 802af50:	f1b9 0f00 	cmp.w	r9, #0
 802af54:	bfac      	ite	ge
 802af56:	eba6 0309 	subge.w	r3, r6, r9
 802af5a:	4633      	movlt	r3, r6
 802af5c:	2b00      	cmp	r3, #0
 802af5e:	9306      	str	r3, [sp, #24]
 802af60:	dd1c      	ble.n	802af9c <_vfprintf_r+0xfe4>
 802af62:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 802b2c8 <_vfprintf_r+0x1310>
 802af66:	9806      	ldr	r0, [sp, #24]
 802af68:	f8c4 9000 	str.w	r9, [r4]
 802af6c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802af70:	2810      	cmp	r0, #16
 802af72:	f102 0201 	add.w	r2, r2, #1
 802af76:	f104 0108 	add.w	r1, r4, #8
 802af7a:	dc7b      	bgt.n	802b074 <_vfprintf_r+0x10bc>
 802af7c:	4403      	add	r3, r0
 802af7e:	2a07      	cmp	r2, #7
 802af80:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802af84:	6060      	str	r0, [r4, #4]
 802af86:	f340 808a 	ble.w	802b09e <_vfprintf_r+0x10e6>
 802af8a:	9803      	ldr	r0, [sp, #12]
 802af8c:	aa26      	add	r2, sp, #152	@ 0x98
 802af8e:	4659      	mov	r1, fp
 802af90:	f000 fa7e 	bl	802b490 <__sprint_r>
 802af94:	2800      	cmp	r0, #0
 802af96:	f040 81d6 	bne.w	802b346 <_vfprintf_r+0x138e>
 802af9a:	ac29      	add	r4, sp, #164	@ 0xa4
 802af9c:	056a      	lsls	r2, r5, #21
 802af9e:	44b0      	add	r8, r6
 802afa0:	d508      	bpl.n	802afb4 <_vfprintf_r+0xffc>
 802afa2:	9b08      	ldr	r3, [sp, #32]
 802afa4:	2b00      	cmp	r3, #0
 802afa6:	d17c      	bne.n	802b0a2 <_vfprintf_r+0x10ea>
 802afa8:	2f00      	cmp	r7, #0
 802afaa:	d17c      	bne.n	802b0a6 <_vfprintf_r+0x10ee>
 802afac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802afae:	4598      	cmp	r8, r3
 802afb0:	bf28      	it	cs
 802afb2:	4698      	movcs	r8, r3
 802afb4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802afb6:	9a04      	ldr	r2, [sp, #16]
 802afb8:	4293      	cmp	r3, r2
 802afba:	db01      	blt.n	802afc0 <_vfprintf_r+0x1008>
 802afbc:	07eb      	lsls	r3, r5, #31
 802afbe:	d50e      	bpl.n	802afde <_vfprintf_r+0x1026>
 802afc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802afc2:	6023      	str	r3, [r4, #0]
 802afc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802afc6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802afc8:	6063      	str	r3, [r4, #4]
 802afca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802afcc:	4413      	add	r3, r2
 802afce:	9328      	str	r3, [sp, #160]	@ 0xa0
 802afd0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802afd2:	3301      	adds	r3, #1
 802afd4:	2b07      	cmp	r3, #7
 802afd6:	9327      	str	r3, [sp, #156]	@ 0x9c
 802afd8:	f300 80e1 	bgt.w	802b19e <_vfprintf_r+0x11e6>
 802afdc:	3408      	adds	r4, #8
 802afde:	9b04      	ldr	r3, [sp, #16]
 802afe0:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802afe2:	1bdf      	subs	r7, r3, r7
 802afe4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802afe6:	eba3 0308 	sub.w	r3, r3, r8
 802afea:	429f      	cmp	r7, r3
 802afec:	bfa8      	it	ge
 802afee:	461f      	movge	r7, r3
 802aff0:	2f00      	cmp	r7, #0
 802aff2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aff4:	dd0a      	ble.n	802b00c <_vfprintf_r+0x1054>
 802aff6:	443b      	add	r3, r7
 802aff8:	9328      	str	r3, [sp, #160]	@ 0xa0
 802affa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802affc:	3301      	adds	r3, #1
 802affe:	2b07      	cmp	r3, #7
 802b000:	e9c4 8700 	strd	r8, r7, [r4]
 802b004:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b006:	f300 80d4 	bgt.w	802b1b2 <_vfprintf_r+0x11fa>
 802b00a:	3408      	adds	r4, #8
 802b00c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802b00e:	9b04      	ldr	r3, [sp, #16]
 802b010:	2f00      	cmp	r7, #0
 802b012:	eba3 0606 	sub.w	r6, r3, r6
 802b016:	bfa8      	it	ge
 802b018:	1bf6      	subge	r6, r6, r7
 802b01a:	2e00      	cmp	r6, #0
 802b01c:	f77f ac22 	ble.w	802a864 <_vfprintf_r+0x8ac>
 802b020:	4fa9      	ldr	r7, [pc, #676]	@ (802b2c8 <_vfprintf_r+0x1310>)
 802b022:	f04f 0810 	mov.w	r8, #16
 802b026:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b02a:	2e10      	cmp	r6, #16
 802b02c:	f103 0301 	add.w	r3, r3, #1
 802b030:	f104 0108 	add.w	r1, r4, #8
 802b034:	6027      	str	r7, [r4, #0]
 802b036:	f77f aebc 	ble.w	802adb2 <_vfprintf_r+0xdfa>
 802b03a:	3210      	adds	r2, #16
 802b03c:	2b07      	cmp	r3, #7
 802b03e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b042:	f8c4 8004 	str.w	r8, [r4, #4]
 802b046:	dd08      	ble.n	802b05a <_vfprintf_r+0x10a2>
 802b048:	9803      	ldr	r0, [sp, #12]
 802b04a:	aa26      	add	r2, sp, #152	@ 0x98
 802b04c:	4659      	mov	r1, fp
 802b04e:	f000 fa1f 	bl	802b490 <__sprint_r>
 802b052:	2800      	cmp	r0, #0
 802b054:	f040 8177 	bne.w	802b346 <_vfprintf_r+0x138e>
 802b058:	a929      	add	r1, sp, #164	@ 0xa4
 802b05a:	3e10      	subs	r6, #16
 802b05c:	460c      	mov	r4, r1
 802b05e:	e7e2      	b.n	802b026 <_vfprintf_r+0x106e>
 802b060:	9803      	ldr	r0, [sp, #12]
 802b062:	aa26      	add	r2, sp, #152	@ 0x98
 802b064:	4659      	mov	r1, fp
 802b066:	f000 fa13 	bl	802b490 <__sprint_r>
 802b06a:	2800      	cmp	r0, #0
 802b06c:	f040 816b 	bne.w	802b346 <_vfprintf_r+0x138e>
 802b070:	ac29      	add	r4, sp, #164	@ 0xa4
 802b072:	e76d      	b.n	802af50 <_vfprintf_r+0xf98>
 802b074:	2010      	movs	r0, #16
 802b076:	4403      	add	r3, r0
 802b078:	2a07      	cmp	r2, #7
 802b07a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b07e:	6060      	str	r0, [r4, #4]
 802b080:	dd08      	ble.n	802b094 <_vfprintf_r+0x10dc>
 802b082:	9803      	ldr	r0, [sp, #12]
 802b084:	aa26      	add	r2, sp, #152	@ 0x98
 802b086:	4659      	mov	r1, fp
 802b088:	f000 fa02 	bl	802b490 <__sprint_r>
 802b08c:	2800      	cmp	r0, #0
 802b08e:	f040 815a 	bne.w	802b346 <_vfprintf_r+0x138e>
 802b092:	a929      	add	r1, sp, #164	@ 0xa4
 802b094:	9b06      	ldr	r3, [sp, #24]
 802b096:	3b10      	subs	r3, #16
 802b098:	9306      	str	r3, [sp, #24]
 802b09a:	460c      	mov	r4, r1
 802b09c:	e763      	b.n	802af66 <_vfprintf_r+0xfae>
 802b09e:	460c      	mov	r4, r1
 802b0a0:	e77c      	b.n	802af9c <_vfprintf_r+0xfe4>
 802b0a2:	2f00      	cmp	r7, #0
 802b0a4:	d04b      	beq.n	802b13e <_vfprintf_r+0x1186>
 802b0a6:	3f01      	subs	r7, #1
 802b0a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802b0aa:	6023      	str	r3, [r4, #0]
 802b0ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b0ae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802b0b0:	6063      	str	r3, [r4, #4]
 802b0b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b0b4:	4413      	add	r3, r2
 802b0b6:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b0b8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b0ba:	3301      	adds	r3, #1
 802b0bc:	2b07      	cmp	r3, #7
 802b0be:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b0c0:	dc44      	bgt.n	802b14c <_vfprintf_r+0x1194>
 802b0c2:	3408      	adds	r4, #8
 802b0c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b0c6:	f893 9000 	ldrb.w	r9, [r3]
 802b0ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b0cc:	eba3 0308 	sub.w	r3, r3, r8
 802b0d0:	4599      	cmp	r9, r3
 802b0d2:	bfa8      	it	ge
 802b0d4:	4699      	movge	r9, r3
 802b0d6:	f1b9 0f00 	cmp.w	r9, #0
 802b0da:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b0dc:	dd09      	ble.n	802b0f2 <_vfprintf_r+0x113a>
 802b0de:	444b      	add	r3, r9
 802b0e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b0e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b0e4:	3301      	adds	r3, #1
 802b0e6:	2b07      	cmp	r3, #7
 802b0e8:	e9c4 8900 	strd	r8, r9, [r4]
 802b0ec:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b0ee:	dc37      	bgt.n	802b160 <_vfprintf_r+0x11a8>
 802b0f0:	3408      	adds	r4, #8
 802b0f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b0f4:	781e      	ldrb	r6, [r3, #0]
 802b0f6:	f1b9 0f00 	cmp.w	r9, #0
 802b0fa:	bfa8      	it	ge
 802b0fc:	eba6 0609 	subge.w	r6, r6, r9
 802b100:	2e00      	cmp	r6, #0
 802b102:	dd18      	ble.n	802b136 <_vfprintf_r+0x117e>
 802b104:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b108:	486f      	ldr	r0, [pc, #444]	@ (802b2c8 <_vfprintf_r+0x1310>)
 802b10a:	6020      	str	r0, [r4, #0]
 802b10c:	2e10      	cmp	r6, #16
 802b10e:	f103 0301 	add.w	r3, r3, #1
 802b112:	f104 0108 	add.w	r1, r4, #8
 802b116:	dc2d      	bgt.n	802b174 <_vfprintf_r+0x11bc>
 802b118:	6066      	str	r6, [r4, #4]
 802b11a:	2b07      	cmp	r3, #7
 802b11c:	4416      	add	r6, r2
 802b11e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802b122:	dd3a      	ble.n	802b19a <_vfprintf_r+0x11e2>
 802b124:	9803      	ldr	r0, [sp, #12]
 802b126:	aa26      	add	r2, sp, #152	@ 0x98
 802b128:	4659      	mov	r1, fp
 802b12a:	f000 f9b1 	bl	802b490 <__sprint_r>
 802b12e:	2800      	cmp	r0, #0
 802b130:	f040 8109 	bne.w	802b346 <_vfprintf_r+0x138e>
 802b134:	ac29      	add	r4, sp, #164	@ 0xa4
 802b136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b138:	781b      	ldrb	r3, [r3, #0]
 802b13a:	4498      	add	r8, r3
 802b13c:	e731      	b.n	802afa2 <_vfprintf_r+0xfea>
 802b13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b140:	3b01      	subs	r3, #1
 802b142:	9309      	str	r3, [sp, #36]	@ 0x24
 802b144:	9b08      	ldr	r3, [sp, #32]
 802b146:	3b01      	subs	r3, #1
 802b148:	9308      	str	r3, [sp, #32]
 802b14a:	e7ad      	b.n	802b0a8 <_vfprintf_r+0x10f0>
 802b14c:	9803      	ldr	r0, [sp, #12]
 802b14e:	aa26      	add	r2, sp, #152	@ 0x98
 802b150:	4659      	mov	r1, fp
 802b152:	f000 f99d 	bl	802b490 <__sprint_r>
 802b156:	2800      	cmp	r0, #0
 802b158:	f040 80f5 	bne.w	802b346 <_vfprintf_r+0x138e>
 802b15c:	ac29      	add	r4, sp, #164	@ 0xa4
 802b15e:	e7b1      	b.n	802b0c4 <_vfprintf_r+0x110c>
 802b160:	9803      	ldr	r0, [sp, #12]
 802b162:	aa26      	add	r2, sp, #152	@ 0x98
 802b164:	4659      	mov	r1, fp
 802b166:	f000 f993 	bl	802b490 <__sprint_r>
 802b16a:	2800      	cmp	r0, #0
 802b16c:	f040 80eb 	bne.w	802b346 <_vfprintf_r+0x138e>
 802b170:	ac29      	add	r4, sp, #164	@ 0xa4
 802b172:	e7be      	b.n	802b0f2 <_vfprintf_r+0x113a>
 802b174:	2010      	movs	r0, #16
 802b176:	4402      	add	r2, r0
 802b178:	2b07      	cmp	r3, #7
 802b17a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b17e:	6060      	str	r0, [r4, #4]
 802b180:	dd08      	ble.n	802b194 <_vfprintf_r+0x11dc>
 802b182:	9803      	ldr	r0, [sp, #12]
 802b184:	aa26      	add	r2, sp, #152	@ 0x98
 802b186:	4659      	mov	r1, fp
 802b188:	f000 f982 	bl	802b490 <__sprint_r>
 802b18c:	2800      	cmp	r0, #0
 802b18e:	f040 80da 	bne.w	802b346 <_vfprintf_r+0x138e>
 802b192:	a929      	add	r1, sp, #164	@ 0xa4
 802b194:	3e10      	subs	r6, #16
 802b196:	460c      	mov	r4, r1
 802b198:	e7b4      	b.n	802b104 <_vfprintf_r+0x114c>
 802b19a:	460c      	mov	r4, r1
 802b19c:	e7cb      	b.n	802b136 <_vfprintf_r+0x117e>
 802b19e:	9803      	ldr	r0, [sp, #12]
 802b1a0:	aa26      	add	r2, sp, #152	@ 0x98
 802b1a2:	4659      	mov	r1, fp
 802b1a4:	f000 f974 	bl	802b490 <__sprint_r>
 802b1a8:	2800      	cmp	r0, #0
 802b1aa:	f040 80cc 	bne.w	802b346 <_vfprintf_r+0x138e>
 802b1ae:	ac29      	add	r4, sp, #164	@ 0xa4
 802b1b0:	e715      	b.n	802afde <_vfprintf_r+0x1026>
 802b1b2:	9803      	ldr	r0, [sp, #12]
 802b1b4:	aa26      	add	r2, sp, #152	@ 0x98
 802b1b6:	4659      	mov	r1, fp
 802b1b8:	f000 f96a 	bl	802b490 <__sprint_r>
 802b1bc:	2800      	cmp	r0, #0
 802b1be:	f040 80c2 	bne.w	802b346 <_vfprintf_r+0x138e>
 802b1c2:	ac29      	add	r4, sp, #164	@ 0xa4
 802b1c4:	e722      	b.n	802b00c <_vfprintf_r+0x1054>
 802b1c6:	9904      	ldr	r1, [sp, #16]
 802b1c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b1ca:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802b1cc:	2901      	cmp	r1, #1
 802b1ce:	f103 0301 	add.w	r3, r3, #1
 802b1d2:	f102 0201 	add.w	r2, r2, #1
 802b1d6:	f104 0608 	add.w	r6, r4, #8
 802b1da:	dc02      	bgt.n	802b1e2 <_vfprintf_r+0x122a>
 802b1dc:	07ef      	lsls	r7, r5, #31
 802b1de:	f140 8086 	bpl.w	802b2ee <_vfprintf_r+0x1336>
 802b1e2:	2101      	movs	r1, #1
 802b1e4:	2a07      	cmp	r2, #7
 802b1e6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b1ea:	f8c4 8000 	str.w	r8, [r4]
 802b1ee:	6061      	str	r1, [r4, #4]
 802b1f0:	dd08      	ble.n	802b204 <_vfprintf_r+0x124c>
 802b1f2:	9803      	ldr	r0, [sp, #12]
 802b1f4:	aa26      	add	r2, sp, #152	@ 0x98
 802b1f6:	4659      	mov	r1, fp
 802b1f8:	f000 f94a 	bl	802b490 <__sprint_r>
 802b1fc:	2800      	cmp	r0, #0
 802b1fe:	f040 80a2 	bne.w	802b346 <_vfprintf_r+0x138e>
 802b202:	ae29      	add	r6, sp, #164	@ 0xa4
 802b204:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b206:	6033      	str	r3, [r6, #0]
 802b208:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b20a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b20c:	6073      	str	r3, [r6, #4]
 802b20e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b210:	4413      	add	r3, r2
 802b212:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b214:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b216:	3301      	adds	r3, #1
 802b218:	2b07      	cmp	r3, #7
 802b21a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b21c:	dc33      	bgt.n	802b286 <_vfprintf_r+0x12ce>
 802b21e:	3608      	adds	r6, #8
 802b220:	9b04      	ldr	r3, [sp, #16]
 802b222:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802b226:	1e5c      	subs	r4, r3, #1
 802b228:	2200      	movs	r2, #0
 802b22a:	2300      	movs	r3, #0
 802b22c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 802b230:	f7e5 fc62 	bl	8010af8 <__aeabi_dcmpeq>
 802b234:	2800      	cmp	r0, #0
 802b236:	d12f      	bne.n	802b298 <_vfprintf_r+0x12e0>
 802b238:	f108 0201 	add.w	r2, r8, #1
 802b23c:	e9c6 2400 	strd	r2, r4, [r6]
 802b240:	9a04      	ldr	r2, [sp, #16]
 802b242:	f109 0301 	add.w	r3, r9, #1
 802b246:	3f01      	subs	r7, #1
 802b248:	4417      	add	r7, r2
 802b24a:	2b07      	cmp	r3, #7
 802b24c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802b250:	dd56      	ble.n	802b300 <_vfprintf_r+0x1348>
 802b252:	9803      	ldr	r0, [sp, #12]
 802b254:	aa26      	add	r2, sp, #152	@ 0x98
 802b256:	4659      	mov	r1, fp
 802b258:	f000 f91a 	bl	802b490 <__sprint_r>
 802b25c:	2800      	cmp	r0, #0
 802b25e:	d172      	bne.n	802b346 <_vfprintf_r+0x138e>
 802b260:	ae29      	add	r6, sp, #164	@ 0xa4
 802b262:	ab22      	add	r3, sp, #136	@ 0x88
 802b264:	6033      	str	r3, [r6, #0]
 802b266:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802b268:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802b26a:	6073      	str	r3, [r6, #4]
 802b26c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b26e:	4413      	add	r3, r2
 802b270:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b272:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b274:	3301      	adds	r3, #1
 802b276:	2b07      	cmp	r3, #7
 802b278:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b27a:	f73f ada1 	bgt.w	802adc0 <_vfprintf_r+0xe08>
 802b27e:	f106 0408 	add.w	r4, r6, #8
 802b282:	f7ff baef 	b.w	802a864 <_vfprintf_r+0x8ac>
 802b286:	9803      	ldr	r0, [sp, #12]
 802b288:	aa26      	add	r2, sp, #152	@ 0x98
 802b28a:	4659      	mov	r1, fp
 802b28c:	f000 f900 	bl	802b490 <__sprint_r>
 802b290:	2800      	cmp	r0, #0
 802b292:	d158      	bne.n	802b346 <_vfprintf_r+0x138e>
 802b294:	ae29      	add	r6, sp, #164	@ 0xa4
 802b296:	e7c3      	b.n	802b220 <_vfprintf_r+0x1268>
 802b298:	9b04      	ldr	r3, [sp, #16]
 802b29a:	2b01      	cmp	r3, #1
 802b29c:	dde1      	ble.n	802b262 <_vfprintf_r+0x12aa>
 802b29e:	4f0a      	ldr	r7, [pc, #40]	@ (802b2c8 <_vfprintf_r+0x1310>)
 802b2a0:	f04f 0810 	mov.w	r8, #16
 802b2a4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b2a8:	2c10      	cmp	r4, #16
 802b2aa:	f103 0301 	add.w	r3, r3, #1
 802b2ae:	f106 0108 	add.w	r1, r6, #8
 802b2b2:	6037      	str	r7, [r6, #0]
 802b2b4:	dc0a      	bgt.n	802b2cc <_vfprintf_r+0x1314>
 802b2b6:	6074      	str	r4, [r6, #4]
 802b2b8:	2b07      	cmp	r3, #7
 802b2ba:	4414      	add	r4, r2
 802b2bc:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802b2c0:	dcc7      	bgt.n	802b252 <_vfprintf_r+0x129a>
 802b2c2:	460e      	mov	r6, r1
 802b2c4:	e7cd      	b.n	802b262 <_vfprintf_r+0x12aa>
 802b2c6:	bf00      	nop
 802b2c8:	0803bcf3 	.word	0x0803bcf3
 802b2cc:	3210      	adds	r2, #16
 802b2ce:	2b07      	cmp	r3, #7
 802b2d0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b2d4:	f8c6 8004 	str.w	r8, [r6, #4]
 802b2d8:	dd06      	ble.n	802b2e8 <_vfprintf_r+0x1330>
 802b2da:	9803      	ldr	r0, [sp, #12]
 802b2dc:	aa26      	add	r2, sp, #152	@ 0x98
 802b2de:	4659      	mov	r1, fp
 802b2e0:	f000 f8d6 	bl	802b490 <__sprint_r>
 802b2e4:	bb78      	cbnz	r0, 802b346 <_vfprintf_r+0x138e>
 802b2e6:	a929      	add	r1, sp, #164	@ 0xa4
 802b2e8:	3c10      	subs	r4, #16
 802b2ea:	460e      	mov	r6, r1
 802b2ec:	e7da      	b.n	802b2a4 <_vfprintf_r+0x12ec>
 802b2ee:	2101      	movs	r1, #1
 802b2f0:	2a07      	cmp	r2, #7
 802b2f2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b2f6:	f8c4 8000 	str.w	r8, [r4]
 802b2fa:	6061      	str	r1, [r4, #4]
 802b2fc:	ddb1      	ble.n	802b262 <_vfprintf_r+0x12aa>
 802b2fe:	e7a8      	b.n	802b252 <_vfprintf_r+0x129a>
 802b300:	3608      	adds	r6, #8
 802b302:	e7ae      	b.n	802b262 <_vfprintf_r+0x12aa>
 802b304:	460c      	mov	r4, r1
 802b306:	f7ff baad 	b.w	802a864 <_vfprintf_r+0x8ac>
 802b30a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b30c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802b30e:	1a9d      	subs	r5, r3, r2
 802b310:	2d00      	cmp	r5, #0
 802b312:	f77f aaaa 	ble.w	802a86a <_vfprintf_r+0x8b2>
 802b316:	4e3d      	ldr	r6, [pc, #244]	@ (802b40c <_vfprintf_r+0x1454>)
 802b318:	2710      	movs	r7, #16
 802b31a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b31e:	2d10      	cmp	r5, #16
 802b320:	f103 0301 	add.w	r3, r3, #1
 802b324:	6026      	str	r6, [r4, #0]
 802b326:	dc18      	bgt.n	802b35a <_vfprintf_r+0x13a2>
 802b328:	6065      	str	r5, [r4, #4]
 802b32a:	2b07      	cmp	r3, #7
 802b32c:	4415      	add	r5, r2
 802b32e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 802b332:	f77f aa9a 	ble.w	802a86a <_vfprintf_r+0x8b2>
 802b336:	9803      	ldr	r0, [sp, #12]
 802b338:	aa26      	add	r2, sp, #152	@ 0x98
 802b33a:	4659      	mov	r1, fp
 802b33c:	f000 f8a8 	bl	802b490 <__sprint_r>
 802b340:	2800      	cmp	r0, #0
 802b342:	f43f aa92 	beq.w	802a86a <_vfprintf_r+0x8b2>
 802b346:	f1ba 0f00 	cmp.w	sl, #0
 802b34a:	f43f a892 	beq.w	802a472 <_vfprintf_r+0x4ba>
 802b34e:	9803      	ldr	r0, [sp, #12]
 802b350:	4651      	mov	r1, sl
 802b352:	f003 fc7b 	bl	802ec4c <_free_r>
 802b356:	f7ff b88c 	b.w	802a472 <_vfprintf_r+0x4ba>
 802b35a:	3210      	adds	r2, #16
 802b35c:	2b07      	cmp	r3, #7
 802b35e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b362:	6067      	str	r7, [r4, #4]
 802b364:	dc02      	bgt.n	802b36c <_vfprintf_r+0x13b4>
 802b366:	3408      	adds	r4, #8
 802b368:	3d10      	subs	r5, #16
 802b36a:	e7d6      	b.n	802b31a <_vfprintf_r+0x1362>
 802b36c:	9803      	ldr	r0, [sp, #12]
 802b36e:	aa26      	add	r2, sp, #152	@ 0x98
 802b370:	4659      	mov	r1, fp
 802b372:	f000 f88d 	bl	802b490 <__sprint_r>
 802b376:	2800      	cmp	r0, #0
 802b378:	d1e5      	bne.n	802b346 <_vfprintf_r+0x138e>
 802b37a:	ac29      	add	r4, sp, #164	@ 0xa4
 802b37c:	e7f4      	b.n	802b368 <_vfprintf_r+0x13b0>
 802b37e:	9803      	ldr	r0, [sp, #12]
 802b380:	4651      	mov	r1, sl
 802b382:	f003 fc63 	bl	802ec4c <_free_r>
 802b386:	f7ff ba88 	b.w	802a89a <_vfprintf_r+0x8e2>
 802b38a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b38c:	b91b      	cbnz	r3, 802b396 <_vfprintf_r+0x13de>
 802b38e:	2300      	movs	r3, #0
 802b390:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b392:	f7ff b86e 	b.w	802a472 <_vfprintf_r+0x4ba>
 802b396:	9803      	ldr	r0, [sp, #12]
 802b398:	aa26      	add	r2, sp, #152	@ 0x98
 802b39a:	4659      	mov	r1, fp
 802b39c:	f000 f878 	bl	802b490 <__sprint_r>
 802b3a0:	2800      	cmp	r0, #0
 802b3a2:	d0f4      	beq.n	802b38e <_vfprintf_r+0x13d6>
 802b3a4:	f7ff b865 	b.w	802a472 <_vfprintf_r+0x4ba>
 802b3a8:	ea56 0207 	orrs.w	r2, r6, r7
 802b3ac:	9508      	str	r5, [sp, #32]
 802b3ae:	f43f ab75 	beq.w	802aa9c <_vfprintf_r+0xae4>
 802b3b2:	2b01      	cmp	r3, #1
 802b3b4:	f43f abf6 	beq.w	802aba4 <_vfprintf_r+0xbec>
 802b3b8:	2b02      	cmp	r3, #2
 802b3ba:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802b3be:	f43f ac3a 	beq.w	802ac36 <_vfprintf_r+0xc7e>
 802b3c2:	f006 0307 	and.w	r3, r6, #7
 802b3c6:	08f6      	lsrs	r6, r6, #3
 802b3c8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802b3cc:	08ff      	lsrs	r7, r7, #3
 802b3ce:	3330      	adds	r3, #48	@ 0x30
 802b3d0:	ea56 0107 	orrs.w	r1, r6, r7
 802b3d4:	4642      	mov	r2, r8
 802b3d6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802b3da:	d1f2      	bne.n	802b3c2 <_vfprintf_r+0x140a>
 802b3dc:	9908      	ldr	r1, [sp, #32]
 802b3de:	07ce      	lsls	r6, r1, #31
 802b3e0:	d506      	bpl.n	802b3f0 <_vfprintf_r+0x1438>
 802b3e2:	2b30      	cmp	r3, #48	@ 0x30
 802b3e4:	d004      	beq.n	802b3f0 <_vfprintf_r+0x1438>
 802b3e6:	2330      	movs	r3, #48	@ 0x30
 802b3e8:	f808 3c01 	strb.w	r3, [r8, #-1]
 802b3ec:	f1a2 0802 	sub.w	r8, r2, #2
 802b3f0:	ab52      	add	r3, sp, #328	@ 0x148
 802b3f2:	9d08      	ldr	r5, [sp, #32]
 802b3f4:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 802b3f8:	f04f 0a00 	mov.w	sl, #0
 802b3fc:	eba3 0908 	sub.w	r9, r3, r8
 802b400:	4657      	mov	r7, sl
 802b402:	f8cd a020 	str.w	sl, [sp, #32]
 802b406:	4656      	mov	r6, sl
 802b408:	f7ff b978 	b.w	802a6fc <_vfprintf_r+0x744>
 802b40c:	0803bd03 	.word	0x0803bd03

0802b410 <__sbprintf>:
 802b410:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b412:	461f      	mov	r7, r3
 802b414:	898b      	ldrh	r3, [r1, #12]
 802b416:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802b41a:	f023 0302 	bic.w	r3, r3, #2
 802b41e:	f8ad 300c 	strh.w	r3, [sp, #12]
 802b422:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b424:	9319      	str	r3, [sp, #100]	@ 0x64
 802b426:	89cb      	ldrh	r3, [r1, #14]
 802b428:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b42c:	69cb      	ldr	r3, [r1, #28]
 802b42e:	9307      	str	r3, [sp, #28]
 802b430:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802b432:	9309      	str	r3, [sp, #36]	@ 0x24
 802b434:	ab1a      	add	r3, sp, #104	@ 0x68
 802b436:	9300      	str	r3, [sp, #0]
 802b438:	9304      	str	r3, [sp, #16]
 802b43a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b43e:	4615      	mov	r5, r2
 802b440:	4606      	mov	r6, r0
 802b442:	9302      	str	r3, [sp, #8]
 802b444:	9305      	str	r3, [sp, #20]
 802b446:	a816      	add	r0, sp, #88	@ 0x58
 802b448:	2300      	movs	r3, #0
 802b44a:	460c      	mov	r4, r1
 802b44c:	9306      	str	r3, [sp, #24]
 802b44e:	f002 fcf5 	bl	802de3c <__retarget_lock_init_recursive>
 802b452:	462a      	mov	r2, r5
 802b454:	463b      	mov	r3, r7
 802b456:	4669      	mov	r1, sp
 802b458:	4630      	mov	r0, r6
 802b45a:	f7fe fdad 	bl	8029fb8 <_vfprintf_r>
 802b45e:	1e05      	subs	r5, r0, #0
 802b460:	db07      	blt.n	802b472 <__sbprintf+0x62>
 802b462:	4669      	mov	r1, sp
 802b464:	4630      	mov	r0, r6
 802b466:	f000 fecb 	bl	802c200 <_fflush_r>
 802b46a:	2800      	cmp	r0, #0
 802b46c:	bf18      	it	ne
 802b46e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802b472:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802b476:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802b478:	065b      	lsls	r3, r3, #25
 802b47a:	bf42      	ittt	mi
 802b47c:	89a3      	ldrhmi	r3, [r4, #12]
 802b47e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802b482:	81a3      	strhmi	r3, [r4, #12]
 802b484:	f002 fcdb 	bl	802de3e <__retarget_lock_close_recursive>
 802b488:	4628      	mov	r0, r5
 802b48a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802b48e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802b490 <__sprint_r>:
 802b490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b494:	6893      	ldr	r3, [r2, #8]
 802b496:	4680      	mov	r8, r0
 802b498:	460e      	mov	r6, r1
 802b49a:	4614      	mov	r4, r2
 802b49c:	b343      	cbz	r3, 802b4f0 <__sprint_r+0x60>
 802b49e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b4a0:	049d      	lsls	r5, r3, #18
 802b4a2:	d522      	bpl.n	802b4ea <__sprint_r+0x5a>
 802b4a4:	6815      	ldr	r5, [r2, #0]
 802b4a6:	68a0      	ldr	r0, [r4, #8]
 802b4a8:	3508      	adds	r5, #8
 802b4aa:	b928      	cbnz	r0, 802b4b8 <__sprint_r+0x28>
 802b4ac:	2300      	movs	r3, #0
 802b4ae:	60a3      	str	r3, [r4, #8]
 802b4b0:	2300      	movs	r3, #0
 802b4b2:	6063      	str	r3, [r4, #4]
 802b4b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b4b8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802b4bc:	f04f 0900 	mov.w	r9, #0
 802b4c0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 802b4c4:	45ca      	cmp	sl, r9
 802b4c6:	dc05      	bgt.n	802b4d4 <__sprint_r+0x44>
 802b4c8:	68a3      	ldr	r3, [r4, #8]
 802b4ca:	f027 0703 	bic.w	r7, r7, #3
 802b4ce:	1bdb      	subs	r3, r3, r7
 802b4d0:	60a3      	str	r3, [r4, #8]
 802b4d2:	e7e8      	b.n	802b4a6 <__sprint_r+0x16>
 802b4d4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802b4d8:	4632      	mov	r2, r6
 802b4da:	4640      	mov	r0, r8
 802b4dc:	f001 fa35 	bl	802c94a <_fputwc_r>
 802b4e0:	1c43      	adds	r3, r0, #1
 802b4e2:	d0e3      	beq.n	802b4ac <__sprint_r+0x1c>
 802b4e4:	f109 0901 	add.w	r9, r9, #1
 802b4e8:	e7ec      	b.n	802b4c4 <__sprint_r+0x34>
 802b4ea:	f001 f81d 	bl	802c528 <__sfvwrite_r>
 802b4ee:	e7dd      	b.n	802b4ac <__sprint_r+0x1c>
 802b4f0:	4618      	mov	r0, r3
 802b4f2:	e7dd      	b.n	802b4b0 <__sprint_r+0x20>

0802b4f4 <_vfiprintf_r>:
 802b4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b4f8:	b0bb      	sub	sp, #236	@ 0xec
 802b4fa:	460f      	mov	r7, r1
 802b4fc:	4693      	mov	fp, r2
 802b4fe:	461c      	mov	r4, r3
 802b500:	461d      	mov	r5, r3
 802b502:	9000      	str	r0, [sp, #0]
 802b504:	b118      	cbz	r0, 802b50e <_vfiprintf_r+0x1a>
 802b506:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802b508:	b90b      	cbnz	r3, 802b50e <_vfiprintf_r+0x1a>
 802b50a:	f000 ffbb 	bl	802c484 <__sinit>
 802b50e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b510:	07db      	lsls	r3, r3, #31
 802b512:	d405      	bmi.n	802b520 <_vfiprintf_r+0x2c>
 802b514:	89bb      	ldrh	r3, [r7, #12]
 802b516:	059e      	lsls	r6, r3, #22
 802b518:	d402      	bmi.n	802b520 <_vfiprintf_r+0x2c>
 802b51a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b51c:	f002 fc91 	bl	802de42 <__retarget_lock_acquire_recursive>
 802b520:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802b524:	0498      	lsls	r0, r3, #18
 802b526:	d406      	bmi.n	802b536 <_vfiprintf_r+0x42>
 802b528:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802b52c:	81bb      	strh	r3, [r7, #12]
 802b52e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b530:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802b534:	667b      	str	r3, [r7, #100]	@ 0x64
 802b536:	89bb      	ldrh	r3, [r7, #12]
 802b538:	0719      	lsls	r1, r3, #28
 802b53a:	d501      	bpl.n	802b540 <_vfiprintf_r+0x4c>
 802b53c:	693b      	ldr	r3, [r7, #16]
 802b53e:	b9ab      	cbnz	r3, 802b56c <_vfiprintf_r+0x78>
 802b540:	9800      	ldr	r0, [sp, #0]
 802b542:	4639      	mov	r1, r7
 802b544:	f001 f95a 	bl	802c7fc <__swsetup_r>
 802b548:	b180      	cbz	r0, 802b56c <_vfiprintf_r+0x78>
 802b54a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b54c:	07da      	lsls	r2, r3, #31
 802b54e:	d506      	bpl.n	802b55e <_vfiprintf_r+0x6a>
 802b550:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b554:	9303      	str	r3, [sp, #12]
 802b556:	9803      	ldr	r0, [sp, #12]
 802b558:	b03b      	add	sp, #236	@ 0xec
 802b55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b55e:	89bb      	ldrh	r3, [r7, #12]
 802b560:	059b      	lsls	r3, r3, #22
 802b562:	d4f5      	bmi.n	802b550 <_vfiprintf_r+0x5c>
 802b564:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b566:	f002 fc6e 	bl	802de46 <__retarget_lock_release_recursive>
 802b56a:	e7f1      	b.n	802b550 <_vfiprintf_r+0x5c>
 802b56c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802b570:	f003 021a 	and.w	r2, r3, #26
 802b574:	2a0a      	cmp	r2, #10
 802b576:	d114      	bne.n	802b5a2 <_vfiprintf_r+0xae>
 802b578:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802b57c:	2a00      	cmp	r2, #0
 802b57e:	db10      	blt.n	802b5a2 <_vfiprintf_r+0xae>
 802b580:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802b582:	07d6      	lsls	r6, r2, #31
 802b584:	d404      	bmi.n	802b590 <_vfiprintf_r+0x9c>
 802b586:	059d      	lsls	r5, r3, #22
 802b588:	d402      	bmi.n	802b590 <_vfiprintf_r+0x9c>
 802b58a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b58c:	f002 fc5b 	bl	802de46 <__retarget_lock_release_recursive>
 802b590:	9800      	ldr	r0, [sp, #0]
 802b592:	4623      	mov	r3, r4
 802b594:	465a      	mov	r2, fp
 802b596:	4639      	mov	r1, r7
 802b598:	b03b      	add	sp, #236	@ 0xec
 802b59a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b59e:	f000 bc31 	b.w	802be04 <__sbprintf>
 802b5a2:	2300      	movs	r3, #0
 802b5a4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802b5a8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802b5ac:	ae11      	add	r6, sp, #68	@ 0x44
 802b5ae:	960e      	str	r6, [sp, #56]	@ 0x38
 802b5b0:	9307      	str	r3, [sp, #28]
 802b5b2:	9309      	str	r3, [sp, #36]	@ 0x24
 802b5b4:	9303      	str	r3, [sp, #12]
 802b5b6:	465b      	mov	r3, fp
 802b5b8:	461c      	mov	r4, r3
 802b5ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b5be:	b10a      	cbz	r2, 802b5c4 <_vfiprintf_r+0xd0>
 802b5c0:	2a25      	cmp	r2, #37	@ 0x25
 802b5c2:	d1f9      	bne.n	802b5b8 <_vfiprintf_r+0xc4>
 802b5c4:	ebb4 080b 	subs.w	r8, r4, fp
 802b5c8:	d00d      	beq.n	802b5e6 <_vfiprintf_r+0xf2>
 802b5ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b5cc:	4443      	add	r3, r8
 802b5ce:	9310      	str	r3, [sp, #64]	@ 0x40
 802b5d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b5d2:	3301      	adds	r3, #1
 802b5d4:	2b07      	cmp	r3, #7
 802b5d6:	e9c6 b800 	strd	fp, r8, [r6]
 802b5da:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b5dc:	dc75      	bgt.n	802b6ca <_vfiprintf_r+0x1d6>
 802b5de:	3608      	adds	r6, #8
 802b5e0:	9b03      	ldr	r3, [sp, #12]
 802b5e2:	4443      	add	r3, r8
 802b5e4:	9303      	str	r3, [sp, #12]
 802b5e6:	7823      	ldrb	r3, [r4, #0]
 802b5e8:	2b00      	cmp	r3, #0
 802b5ea:	f000 83cd 	beq.w	802bd88 <_vfiprintf_r+0x894>
 802b5ee:	2300      	movs	r3, #0
 802b5f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802b5f4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802b5f8:	3401      	adds	r4, #1
 802b5fa:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b5fe:	469a      	mov	sl, r3
 802b600:	46a3      	mov	fp, r4
 802b602:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802b606:	f1a3 0220 	sub.w	r2, r3, #32
 802b60a:	2a5a      	cmp	r2, #90	@ 0x5a
 802b60c:	f200 8316 	bhi.w	802bc3c <_vfiprintf_r+0x748>
 802b610:	e8df f012 	tbh	[pc, r2, lsl #1]
 802b614:	0314009a 	.word	0x0314009a
 802b618:	00a20314 	.word	0x00a20314
 802b61c:	03140314 	.word	0x03140314
 802b620:	00820314 	.word	0x00820314
 802b624:	03140314 	.word	0x03140314
 802b628:	00af00a5 	.word	0x00af00a5
 802b62c:	00ac0314 	.word	0x00ac0314
 802b630:	031400b1 	.word	0x031400b1
 802b634:	00d000cd 	.word	0x00d000cd
 802b638:	00d000d0 	.word	0x00d000d0
 802b63c:	00d000d0 	.word	0x00d000d0
 802b640:	00d000d0 	.word	0x00d000d0
 802b644:	00d000d0 	.word	0x00d000d0
 802b648:	03140314 	.word	0x03140314
 802b64c:	03140314 	.word	0x03140314
 802b650:	03140314 	.word	0x03140314
 802b654:	03140314 	.word	0x03140314
 802b658:	00f70314 	.word	0x00f70314
 802b65c:	03140104 	.word	0x03140104
 802b660:	03140314 	.word	0x03140314
 802b664:	03140314 	.word	0x03140314
 802b668:	03140314 	.word	0x03140314
 802b66c:	03140314 	.word	0x03140314
 802b670:	01520314 	.word	0x01520314
 802b674:	03140314 	.word	0x03140314
 802b678:	019a0314 	.word	0x019a0314
 802b67c:	027a0314 	.word	0x027a0314
 802b680:	03140314 	.word	0x03140314
 802b684:	0314029a 	.word	0x0314029a
 802b688:	03140314 	.word	0x03140314
 802b68c:	03140314 	.word	0x03140314
 802b690:	03140314 	.word	0x03140314
 802b694:	03140314 	.word	0x03140314
 802b698:	00f70314 	.word	0x00f70314
 802b69c:	03140106 	.word	0x03140106
 802b6a0:	03140314 	.word	0x03140314
 802b6a4:	010600e0 	.word	0x010600e0
 802b6a8:	031400f1 	.word	0x031400f1
 802b6ac:	031400eb 	.word	0x031400eb
 802b6b0:	01540132 	.word	0x01540132
 802b6b4:	00f10189 	.word	0x00f10189
 802b6b8:	019a0314 	.word	0x019a0314
 802b6bc:	027c0098 	.word	0x027c0098
 802b6c0:	03140314 	.word	0x03140314
 802b6c4:	03140065 	.word	0x03140065
 802b6c8:	0098      	.short	0x0098
 802b6ca:	9800      	ldr	r0, [sp, #0]
 802b6cc:	aa0e      	add	r2, sp, #56	@ 0x38
 802b6ce:	4639      	mov	r1, r7
 802b6d0:	f7ff fede 	bl	802b490 <__sprint_r>
 802b6d4:	2800      	cmp	r0, #0
 802b6d6:	f040 8336 	bne.w	802bd46 <_vfiprintf_r+0x852>
 802b6da:	ae11      	add	r6, sp, #68	@ 0x44
 802b6dc:	e780      	b.n	802b5e0 <_vfiprintf_r+0xec>
 802b6de:	4a99      	ldr	r2, [pc, #612]	@ (802b944 <_vfiprintf_r+0x450>)
 802b6e0:	9205      	str	r2, [sp, #20]
 802b6e2:	f01a 0220 	ands.w	r2, sl, #32
 802b6e6:	f000 8231 	beq.w	802bb4c <_vfiprintf_r+0x658>
 802b6ea:	3507      	adds	r5, #7
 802b6ec:	f025 0507 	bic.w	r5, r5, #7
 802b6f0:	46a8      	mov	r8, r5
 802b6f2:	686d      	ldr	r5, [r5, #4]
 802b6f4:	f858 4b08 	ldr.w	r4, [r8], #8
 802b6f8:	f01a 0f01 	tst.w	sl, #1
 802b6fc:	d009      	beq.n	802b712 <_vfiprintf_r+0x21e>
 802b6fe:	ea54 0205 	orrs.w	r2, r4, r5
 802b702:	bf1f      	itttt	ne
 802b704:	2230      	movne	r2, #48	@ 0x30
 802b706:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802b70a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802b70e:	f04a 0a02 	orrne.w	sl, sl, #2
 802b712:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802b716:	e112      	b.n	802b93e <_vfiprintf_r+0x44a>
 802b718:	9800      	ldr	r0, [sp, #0]
 802b71a:	f002 fae7 	bl	802dcec <_localeconv_r>
 802b71e:	6843      	ldr	r3, [r0, #4]
 802b720:	9309      	str	r3, [sp, #36]	@ 0x24
 802b722:	4618      	mov	r0, r3
 802b724:	f7e4 fdbc 	bl	80102a0 <strlen>
 802b728:	9007      	str	r0, [sp, #28]
 802b72a:	9800      	ldr	r0, [sp, #0]
 802b72c:	f002 fade 	bl	802dcec <_localeconv_r>
 802b730:	6883      	ldr	r3, [r0, #8]
 802b732:	9306      	str	r3, [sp, #24]
 802b734:	9b07      	ldr	r3, [sp, #28]
 802b736:	b12b      	cbz	r3, 802b744 <_vfiprintf_r+0x250>
 802b738:	9b06      	ldr	r3, [sp, #24]
 802b73a:	b11b      	cbz	r3, 802b744 <_vfiprintf_r+0x250>
 802b73c:	781b      	ldrb	r3, [r3, #0]
 802b73e:	b10b      	cbz	r3, 802b744 <_vfiprintf_r+0x250>
 802b740:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 802b744:	465c      	mov	r4, fp
 802b746:	e75b      	b.n	802b600 <_vfiprintf_r+0x10c>
 802b748:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802b74c:	2b00      	cmp	r3, #0
 802b74e:	d1f9      	bne.n	802b744 <_vfiprintf_r+0x250>
 802b750:	2320      	movs	r3, #32
 802b752:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b756:	e7f5      	b.n	802b744 <_vfiprintf_r+0x250>
 802b758:	f04a 0a01 	orr.w	sl, sl, #1
 802b75c:	e7f2      	b.n	802b744 <_vfiprintf_r+0x250>
 802b75e:	f855 3b04 	ldr.w	r3, [r5], #4
 802b762:	9302      	str	r3, [sp, #8]
 802b764:	2b00      	cmp	r3, #0
 802b766:	daed      	bge.n	802b744 <_vfiprintf_r+0x250>
 802b768:	425b      	negs	r3, r3
 802b76a:	9302      	str	r3, [sp, #8]
 802b76c:	f04a 0a04 	orr.w	sl, sl, #4
 802b770:	e7e8      	b.n	802b744 <_vfiprintf_r+0x250>
 802b772:	232b      	movs	r3, #43	@ 0x2b
 802b774:	e7ed      	b.n	802b752 <_vfiprintf_r+0x25e>
 802b776:	465a      	mov	r2, fp
 802b778:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b77c:	2b2a      	cmp	r3, #42	@ 0x2a
 802b77e:	d112      	bne.n	802b7a6 <_vfiprintf_r+0x2b2>
 802b780:	f855 3b04 	ldr.w	r3, [r5], #4
 802b784:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b788:	9301      	str	r3, [sp, #4]
 802b78a:	4693      	mov	fp, r2
 802b78c:	e7da      	b.n	802b744 <_vfiprintf_r+0x250>
 802b78e:	9b01      	ldr	r3, [sp, #4]
 802b790:	fb00 1303 	mla	r3, r0, r3, r1
 802b794:	9301      	str	r3, [sp, #4]
 802b796:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b79a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802b79e:	2909      	cmp	r1, #9
 802b7a0:	d9f5      	bls.n	802b78e <_vfiprintf_r+0x29a>
 802b7a2:	4693      	mov	fp, r2
 802b7a4:	e72f      	b.n	802b606 <_vfiprintf_r+0x112>
 802b7a6:	2100      	movs	r1, #0
 802b7a8:	9101      	str	r1, [sp, #4]
 802b7aa:	200a      	movs	r0, #10
 802b7ac:	e7f5      	b.n	802b79a <_vfiprintf_r+0x2a6>
 802b7ae:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802b7b2:	e7c7      	b.n	802b744 <_vfiprintf_r+0x250>
 802b7b4:	2100      	movs	r1, #0
 802b7b6:	465a      	mov	r2, fp
 802b7b8:	9102      	str	r1, [sp, #8]
 802b7ba:	200a      	movs	r0, #10
 802b7bc:	9902      	ldr	r1, [sp, #8]
 802b7be:	3b30      	subs	r3, #48	@ 0x30
 802b7c0:	fb00 3301 	mla	r3, r0, r1, r3
 802b7c4:	9302      	str	r3, [sp, #8]
 802b7c6:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b7ca:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802b7ce:	2909      	cmp	r1, #9
 802b7d0:	d9f4      	bls.n	802b7bc <_vfiprintf_r+0x2c8>
 802b7d2:	e7e6      	b.n	802b7a2 <_vfiprintf_r+0x2ae>
 802b7d4:	f89b 3000 	ldrb.w	r3, [fp]
 802b7d8:	2b68      	cmp	r3, #104	@ 0x68
 802b7da:	bf06      	itte	eq
 802b7dc:	f10b 0b01 	addeq.w	fp, fp, #1
 802b7e0:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802b7e4:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 802b7e8:	e7ac      	b.n	802b744 <_vfiprintf_r+0x250>
 802b7ea:	f89b 3000 	ldrb.w	r3, [fp]
 802b7ee:	2b6c      	cmp	r3, #108	@ 0x6c
 802b7f0:	d104      	bne.n	802b7fc <_vfiprintf_r+0x308>
 802b7f2:	f10b 0b01 	add.w	fp, fp, #1
 802b7f6:	f04a 0a20 	orr.w	sl, sl, #32
 802b7fa:	e7a3      	b.n	802b744 <_vfiprintf_r+0x250>
 802b7fc:	f04a 0a10 	orr.w	sl, sl, #16
 802b800:	e7a0      	b.n	802b744 <_vfiprintf_r+0x250>
 802b802:	46a8      	mov	r8, r5
 802b804:	2400      	movs	r4, #0
 802b806:	f858 3b04 	ldr.w	r3, [r8], #4
 802b80a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802b80e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802b812:	2301      	movs	r3, #1
 802b814:	9301      	str	r3, [sp, #4]
 802b816:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802b81a:	e0ab      	b.n	802b974 <_vfiprintf_r+0x480>
 802b81c:	f04a 0a10 	orr.w	sl, sl, #16
 802b820:	f01a 0f20 	tst.w	sl, #32
 802b824:	d011      	beq.n	802b84a <_vfiprintf_r+0x356>
 802b826:	3507      	adds	r5, #7
 802b828:	f025 0507 	bic.w	r5, r5, #7
 802b82c:	46a8      	mov	r8, r5
 802b82e:	686d      	ldr	r5, [r5, #4]
 802b830:	f858 4b08 	ldr.w	r4, [r8], #8
 802b834:	2d00      	cmp	r5, #0
 802b836:	da06      	bge.n	802b846 <_vfiprintf_r+0x352>
 802b838:	4264      	negs	r4, r4
 802b83a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802b83e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802b842:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b846:	2301      	movs	r3, #1
 802b848:	e048      	b.n	802b8dc <_vfiprintf_r+0x3e8>
 802b84a:	46a8      	mov	r8, r5
 802b84c:	f01a 0f10 	tst.w	sl, #16
 802b850:	f858 5b04 	ldr.w	r5, [r8], #4
 802b854:	d002      	beq.n	802b85c <_vfiprintf_r+0x368>
 802b856:	462c      	mov	r4, r5
 802b858:	17ed      	asrs	r5, r5, #31
 802b85a:	e7eb      	b.n	802b834 <_vfiprintf_r+0x340>
 802b85c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802b860:	d003      	beq.n	802b86a <_vfiprintf_r+0x376>
 802b862:	b22c      	sxth	r4, r5
 802b864:	f345 35c0 	sbfx	r5, r5, #15, #1
 802b868:	e7e4      	b.n	802b834 <_vfiprintf_r+0x340>
 802b86a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802b86e:	d0f2      	beq.n	802b856 <_vfiprintf_r+0x362>
 802b870:	b26c      	sxtb	r4, r5
 802b872:	f345 15c0 	sbfx	r5, r5, #7, #1
 802b876:	e7dd      	b.n	802b834 <_vfiprintf_r+0x340>
 802b878:	f01a 0f20 	tst.w	sl, #32
 802b87c:	d007      	beq.n	802b88e <_vfiprintf_r+0x39a>
 802b87e:	9a03      	ldr	r2, [sp, #12]
 802b880:	682b      	ldr	r3, [r5, #0]
 802b882:	9903      	ldr	r1, [sp, #12]
 802b884:	17d2      	asrs	r2, r2, #31
 802b886:	e9c3 1200 	strd	r1, r2, [r3]
 802b88a:	3504      	adds	r5, #4
 802b88c:	e693      	b.n	802b5b6 <_vfiprintf_r+0xc2>
 802b88e:	f01a 0f10 	tst.w	sl, #16
 802b892:	d003      	beq.n	802b89c <_vfiprintf_r+0x3a8>
 802b894:	682b      	ldr	r3, [r5, #0]
 802b896:	9a03      	ldr	r2, [sp, #12]
 802b898:	601a      	str	r2, [r3, #0]
 802b89a:	e7f6      	b.n	802b88a <_vfiprintf_r+0x396>
 802b89c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802b8a0:	d003      	beq.n	802b8aa <_vfiprintf_r+0x3b6>
 802b8a2:	682b      	ldr	r3, [r5, #0]
 802b8a4:	9a03      	ldr	r2, [sp, #12]
 802b8a6:	801a      	strh	r2, [r3, #0]
 802b8a8:	e7ef      	b.n	802b88a <_vfiprintf_r+0x396>
 802b8aa:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802b8ae:	d0f1      	beq.n	802b894 <_vfiprintf_r+0x3a0>
 802b8b0:	682b      	ldr	r3, [r5, #0]
 802b8b2:	9a03      	ldr	r2, [sp, #12]
 802b8b4:	701a      	strb	r2, [r3, #0]
 802b8b6:	e7e8      	b.n	802b88a <_vfiprintf_r+0x396>
 802b8b8:	f04a 0a10 	orr.w	sl, sl, #16
 802b8bc:	f01a 0320 	ands.w	r3, sl, #32
 802b8c0:	d01f      	beq.n	802b902 <_vfiprintf_r+0x40e>
 802b8c2:	3507      	adds	r5, #7
 802b8c4:	f025 0507 	bic.w	r5, r5, #7
 802b8c8:	46a8      	mov	r8, r5
 802b8ca:	686d      	ldr	r5, [r5, #4]
 802b8cc:	f858 4b08 	ldr.w	r4, [r8], #8
 802b8d0:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802b8d4:	2300      	movs	r3, #0
 802b8d6:	2200      	movs	r2, #0
 802b8d8:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802b8dc:	9a01      	ldr	r2, [sp, #4]
 802b8de:	3201      	adds	r2, #1
 802b8e0:	f000 825f 	beq.w	802bda2 <_vfiprintf_r+0x8ae>
 802b8e4:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 802b8e8:	9204      	str	r2, [sp, #16]
 802b8ea:	ea54 0205 	orrs.w	r2, r4, r5
 802b8ee:	f040 825e 	bne.w	802bdae <_vfiprintf_r+0x8ba>
 802b8f2:	9a01      	ldr	r2, [sp, #4]
 802b8f4:	2a00      	cmp	r2, #0
 802b8f6:	f000 8198 	beq.w	802bc2a <_vfiprintf_r+0x736>
 802b8fa:	2b01      	cmp	r3, #1
 802b8fc:	f040 825a 	bne.w	802bdb4 <_vfiprintf_r+0x8c0>
 802b900:	e13b      	b.n	802bb7a <_vfiprintf_r+0x686>
 802b902:	46a8      	mov	r8, r5
 802b904:	f01a 0510 	ands.w	r5, sl, #16
 802b908:	f858 4b04 	ldr.w	r4, [r8], #4
 802b90c:	d001      	beq.n	802b912 <_vfiprintf_r+0x41e>
 802b90e:	461d      	mov	r5, r3
 802b910:	e7de      	b.n	802b8d0 <_vfiprintf_r+0x3dc>
 802b912:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802b916:	d001      	beq.n	802b91c <_vfiprintf_r+0x428>
 802b918:	b2a4      	uxth	r4, r4
 802b91a:	e7d9      	b.n	802b8d0 <_vfiprintf_r+0x3dc>
 802b91c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802b920:	d0d6      	beq.n	802b8d0 <_vfiprintf_r+0x3dc>
 802b922:	b2e4      	uxtb	r4, r4
 802b924:	e7f3      	b.n	802b90e <_vfiprintf_r+0x41a>
 802b926:	46a8      	mov	r8, r5
 802b928:	f647 0330 	movw	r3, #30768	@ 0x7830
 802b92c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802b930:	f858 4b04 	ldr.w	r4, [r8], #4
 802b934:	4b03      	ldr	r3, [pc, #12]	@ (802b944 <_vfiprintf_r+0x450>)
 802b936:	9305      	str	r3, [sp, #20]
 802b938:	2500      	movs	r5, #0
 802b93a:	f04a 0a02 	orr.w	sl, sl, #2
 802b93e:	2302      	movs	r3, #2
 802b940:	e7c9      	b.n	802b8d6 <_vfiprintf_r+0x3e2>
 802b942:	bf00      	nop
 802b944:	0803bccf 	.word	0x0803bccf
 802b948:	9b01      	ldr	r3, [sp, #4]
 802b94a:	46a8      	mov	r8, r5
 802b94c:	1c5c      	adds	r4, r3, #1
 802b94e:	f04f 0500 	mov.w	r5, #0
 802b952:	f858 9b04 	ldr.w	r9, [r8], #4
 802b956:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802b95a:	f000 80d0 	beq.w	802bafe <_vfiprintf_r+0x60a>
 802b95e:	461a      	mov	r2, r3
 802b960:	4629      	mov	r1, r5
 802b962:	4648      	mov	r0, r9
 802b964:	f7e4 fc4c 	bl	8010200 <memchr>
 802b968:	4604      	mov	r4, r0
 802b96a:	b118      	cbz	r0, 802b974 <_vfiprintf_r+0x480>
 802b96c:	eba0 0309 	sub.w	r3, r0, r9
 802b970:	9301      	str	r3, [sp, #4]
 802b972:	462c      	mov	r4, r5
 802b974:	9b01      	ldr	r3, [sp, #4]
 802b976:	42a3      	cmp	r3, r4
 802b978:	bfb8      	it	lt
 802b97a:	4623      	movlt	r3, r4
 802b97c:	9304      	str	r3, [sp, #16]
 802b97e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802b982:	b113      	cbz	r3, 802b98a <_vfiprintf_r+0x496>
 802b984:	9b04      	ldr	r3, [sp, #16]
 802b986:	3301      	adds	r3, #1
 802b988:	9304      	str	r3, [sp, #16]
 802b98a:	f01a 0302 	ands.w	r3, sl, #2
 802b98e:	9308      	str	r3, [sp, #32]
 802b990:	bf1e      	ittt	ne
 802b992:	9b04      	ldrne	r3, [sp, #16]
 802b994:	3302      	addne	r3, #2
 802b996:	9304      	strne	r3, [sp, #16]
 802b998:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 802b99c:	930a      	str	r3, [sp, #40]	@ 0x28
 802b99e:	d11f      	bne.n	802b9e0 <_vfiprintf_r+0x4ec>
 802b9a0:	9b02      	ldr	r3, [sp, #8]
 802b9a2:	9a04      	ldr	r2, [sp, #16]
 802b9a4:	1a9d      	subs	r5, r3, r2
 802b9a6:	2d00      	cmp	r5, #0
 802b9a8:	dd1a      	ble.n	802b9e0 <_vfiprintf_r+0x4ec>
 802b9aa:	4ba9      	ldr	r3, [pc, #676]	@ (802bc50 <_vfiprintf_r+0x75c>)
 802b9ac:	6033      	str	r3, [r6, #0]
 802b9ae:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802b9b2:	2d10      	cmp	r5, #16
 802b9b4:	f102 0201 	add.w	r2, r2, #1
 802b9b8:	f106 0008 	add.w	r0, r6, #8
 802b9bc:	f300 814e 	bgt.w	802bc5c <_vfiprintf_r+0x768>
 802b9c0:	6075      	str	r5, [r6, #4]
 802b9c2:	2a07      	cmp	r2, #7
 802b9c4:	4465      	add	r5, ip
 802b9c6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802b9ca:	f340 815a 	ble.w	802bc82 <_vfiprintf_r+0x78e>
 802b9ce:	9800      	ldr	r0, [sp, #0]
 802b9d0:	aa0e      	add	r2, sp, #56	@ 0x38
 802b9d2:	4639      	mov	r1, r7
 802b9d4:	f7ff fd5c 	bl	802b490 <__sprint_r>
 802b9d8:	2800      	cmp	r0, #0
 802b9da:	f040 81b4 	bne.w	802bd46 <_vfiprintf_r+0x852>
 802b9de:	ae11      	add	r6, sp, #68	@ 0x44
 802b9e0:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802b9e4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802b9e8:	b161      	cbz	r1, 802ba04 <_vfiprintf_r+0x510>
 802b9ea:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802b9ee:	3301      	adds	r3, #1
 802b9f0:	6031      	str	r1, [r6, #0]
 802b9f2:	2101      	movs	r1, #1
 802b9f4:	440a      	add	r2, r1
 802b9f6:	2b07      	cmp	r3, #7
 802b9f8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802b9fc:	6071      	str	r1, [r6, #4]
 802b9fe:	f300 8142 	bgt.w	802bc86 <_vfiprintf_r+0x792>
 802ba02:	3608      	adds	r6, #8
 802ba04:	9908      	ldr	r1, [sp, #32]
 802ba06:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ba0a:	b159      	cbz	r1, 802ba24 <_vfiprintf_r+0x530>
 802ba0c:	a90d      	add	r1, sp, #52	@ 0x34
 802ba0e:	3301      	adds	r3, #1
 802ba10:	6031      	str	r1, [r6, #0]
 802ba12:	2102      	movs	r1, #2
 802ba14:	440a      	add	r2, r1
 802ba16:	2b07      	cmp	r3, #7
 802ba18:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802ba1c:	6071      	str	r1, [r6, #4]
 802ba1e:	f300 813b 	bgt.w	802bc98 <_vfiprintf_r+0x7a4>
 802ba22:	3608      	adds	r6, #8
 802ba24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ba26:	2b80      	cmp	r3, #128	@ 0x80
 802ba28:	d11f      	bne.n	802ba6a <_vfiprintf_r+0x576>
 802ba2a:	9b02      	ldr	r3, [sp, #8]
 802ba2c:	9a04      	ldr	r2, [sp, #16]
 802ba2e:	1a9d      	subs	r5, r3, r2
 802ba30:	2d00      	cmp	r5, #0
 802ba32:	dd1a      	ble.n	802ba6a <_vfiprintf_r+0x576>
 802ba34:	4b87      	ldr	r3, [pc, #540]	@ (802bc54 <_vfiprintf_r+0x760>)
 802ba36:	6033      	str	r3, [r6, #0]
 802ba38:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802ba3c:	2d10      	cmp	r5, #16
 802ba3e:	f102 0201 	add.w	r2, r2, #1
 802ba42:	f106 0008 	add.w	r0, r6, #8
 802ba46:	f300 8130 	bgt.w	802bcaa <_vfiprintf_r+0x7b6>
 802ba4a:	6075      	str	r5, [r6, #4]
 802ba4c:	2a07      	cmp	r2, #7
 802ba4e:	4465      	add	r5, ip
 802ba50:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802ba54:	f340 813c 	ble.w	802bcd0 <_vfiprintf_r+0x7dc>
 802ba58:	9800      	ldr	r0, [sp, #0]
 802ba5a:	aa0e      	add	r2, sp, #56	@ 0x38
 802ba5c:	4639      	mov	r1, r7
 802ba5e:	f7ff fd17 	bl	802b490 <__sprint_r>
 802ba62:	2800      	cmp	r0, #0
 802ba64:	f040 816f 	bne.w	802bd46 <_vfiprintf_r+0x852>
 802ba68:	ae11      	add	r6, sp, #68	@ 0x44
 802ba6a:	9b01      	ldr	r3, [sp, #4]
 802ba6c:	1ae4      	subs	r4, r4, r3
 802ba6e:	2c00      	cmp	r4, #0
 802ba70:	dd1a      	ble.n	802baa8 <_vfiprintf_r+0x5b4>
 802ba72:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ba76:	4877      	ldr	r0, [pc, #476]	@ (802bc54 <_vfiprintf_r+0x760>)
 802ba78:	6030      	str	r0, [r6, #0]
 802ba7a:	2c10      	cmp	r4, #16
 802ba7c:	f103 0301 	add.w	r3, r3, #1
 802ba80:	f106 0108 	add.w	r1, r6, #8
 802ba84:	f300 8126 	bgt.w	802bcd4 <_vfiprintf_r+0x7e0>
 802ba88:	6074      	str	r4, [r6, #4]
 802ba8a:	2b07      	cmp	r3, #7
 802ba8c:	4414      	add	r4, r2
 802ba8e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802ba92:	f340 8130 	ble.w	802bcf6 <_vfiprintf_r+0x802>
 802ba96:	9800      	ldr	r0, [sp, #0]
 802ba98:	aa0e      	add	r2, sp, #56	@ 0x38
 802ba9a:	4639      	mov	r1, r7
 802ba9c:	f7ff fcf8 	bl	802b490 <__sprint_r>
 802baa0:	2800      	cmp	r0, #0
 802baa2:	f040 8150 	bne.w	802bd46 <_vfiprintf_r+0x852>
 802baa6:	ae11      	add	r6, sp, #68	@ 0x44
 802baa8:	9b01      	ldr	r3, [sp, #4]
 802baaa:	9a01      	ldr	r2, [sp, #4]
 802baac:	6073      	str	r3, [r6, #4]
 802baae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bab0:	f8c6 9000 	str.w	r9, [r6]
 802bab4:	4413      	add	r3, r2
 802bab6:	9310      	str	r3, [sp, #64]	@ 0x40
 802bab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802baba:	3301      	adds	r3, #1
 802babc:	2b07      	cmp	r3, #7
 802babe:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bac0:	f300 811b 	bgt.w	802bcfa <_vfiprintf_r+0x806>
 802bac4:	f106 0308 	add.w	r3, r6, #8
 802bac8:	f01a 0f04 	tst.w	sl, #4
 802bacc:	f040 811d 	bne.w	802bd0a <_vfiprintf_r+0x816>
 802bad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802bad4:	9904      	ldr	r1, [sp, #16]
 802bad6:	428a      	cmp	r2, r1
 802bad8:	bfac      	ite	ge
 802bada:	189b      	addge	r3, r3, r2
 802badc:	185b      	addlt	r3, r3, r1
 802bade:	9303      	str	r3, [sp, #12]
 802bae0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bae2:	b13b      	cbz	r3, 802baf4 <_vfiprintf_r+0x600>
 802bae4:	9800      	ldr	r0, [sp, #0]
 802bae6:	aa0e      	add	r2, sp, #56	@ 0x38
 802bae8:	4639      	mov	r1, r7
 802baea:	f7ff fcd1 	bl	802b490 <__sprint_r>
 802baee:	2800      	cmp	r0, #0
 802baf0:	f040 8129 	bne.w	802bd46 <_vfiprintf_r+0x852>
 802baf4:	2300      	movs	r3, #0
 802baf6:	930f      	str	r3, [sp, #60]	@ 0x3c
 802baf8:	4645      	mov	r5, r8
 802bafa:	ae11      	add	r6, sp, #68	@ 0x44
 802bafc:	e55b      	b.n	802b5b6 <_vfiprintf_r+0xc2>
 802bafe:	4648      	mov	r0, r9
 802bb00:	f7e4 fbce 	bl	80102a0 <strlen>
 802bb04:	9001      	str	r0, [sp, #4]
 802bb06:	e734      	b.n	802b972 <_vfiprintf_r+0x47e>
 802bb08:	f04a 0a10 	orr.w	sl, sl, #16
 802bb0c:	f01a 0320 	ands.w	r3, sl, #32
 802bb10:	d008      	beq.n	802bb24 <_vfiprintf_r+0x630>
 802bb12:	3507      	adds	r5, #7
 802bb14:	f025 0507 	bic.w	r5, r5, #7
 802bb18:	46a8      	mov	r8, r5
 802bb1a:	686d      	ldr	r5, [r5, #4]
 802bb1c:	f858 4b08 	ldr.w	r4, [r8], #8
 802bb20:	2301      	movs	r3, #1
 802bb22:	e6d8      	b.n	802b8d6 <_vfiprintf_r+0x3e2>
 802bb24:	46a8      	mov	r8, r5
 802bb26:	f01a 0510 	ands.w	r5, sl, #16
 802bb2a:	f858 4b04 	ldr.w	r4, [r8], #4
 802bb2e:	d001      	beq.n	802bb34 <_vfiprintf_r+0x640>
 802bb30:	461d      	mov	r5, r3
 802bb32:	e7f5      	b.n	802bb20 <_vfiprintf_r+0x62c>
 802bb34:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802bb38:	d001      	beq.n	802bb3e <_vfiprintf_r+0x64a>
 802bb3a:	b2a4      	uxth	r4, r4
 802bb3c:	e7f0      	b.n	802bb20 <_vfiprintf_r+0x62c>
 802bb3e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802bb42:	d0ed      	beq.n	802bb20 <_vfiprintf_r+0x62c>
 802bb44:	b2e4      	uxtb	r4, r4
 802bb46:	e7f3      	b.n	802bb30 <_vfiprintf_r+0x63c>
 802bb48:	4a43      	ldr	r2, [pc, #268]	@ (802bc58 <_vfiprintf_r+0x764>)
 802bb4a:	e5c9      	b.n	802b6e0 <_vfiprintf_r+0x1ec>
 802bb4c:	46a8      	mov	r8, r5
 802bb4e:	f01a 0510 	ands.w	r5, sl, #16
 802bb52:	f858 4b04 	ldr.w	r4, [r8], #4
 802bb56:	d001      	beq.n	802bb5c <_vfiprintf_r+0x668>
 802bb58:	4615      	mov	r5, r2
 802bb5a:	e5cd      	b.n	802b6f8 <_vfiprintf_r+0x204>
 802bb5c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 802bb60:	d001      	beq.n	802bb66 <_vfiprintf_r+0x672>
 802bb62:	b2a4      	uxth	r4, r4
 802bb64:	e5c8      	b.n	802b6f8 <_vfiprintf_r+0x204>
 802bb66:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802bb6a:	f43f adc5 	beq.w	802b6f8 <_vfiprintf_r+0x204>
 802bb6e:	b2e4      	uxtb	r4, r4
 802bb70:	e7f2      	b.n	802bb58 <_vfiprintf_r+0x664>
 802bb72:	2c0a      	cmp	r4, #10
 802bb74:	f175 0300 	sbcs.w	r3, r5, #0
 802bb78:	d206      	bcs.n	802bb88 <_vfiprintf_r+0x694>
 802bb7a:	3430      	adds	r4, #48	@ 0x30
 802bb7c:	b2e4      	uxtb	r4, r4
 802bb7e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802bb82:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 802bb86:	e131      	b.n	802bdec <_vfiprintf_r+0x8f8>
 802bb88:	ab3a      	add	r3, sp, #232	@ 0xe8
 802bb8a:	9308      	str	r3, [sp, #32]
 802bb8c:	9b04      	ldr	r3, [sp, #16]
 802bb8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802bb92:	f04f 0a00 	mov.w	sl, #0
 802bb96:	930a      	str	r3, [sp, #40]	@ 0x28
 802bb98:	220a      	movs	r2, #10
 802bb9a:	2300      	movs	r3, #0
 802bb9c:	4620      	mov	r0, r4
 802bb9e:	4629      	mov	r1, r5
 802bba0:	f7e5 f8da 	bl	8010d58 <__aeabi_uldivmod>
 802bba4:	460b      	mov	r3, r1
 802bba6:	9908      	ldr	r1, [sp, #32]
 802bba8:	900b      	str	r0, [sp, #44]	@ 0x2c
 802bbaa:	3230      	adds	r2, #48	@ 0x30
 802bbac:	f801 2c01 	strb.w	r2, [r1, #-1]
 802bbb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802bbb2:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 802bbb6:	f10a 0a01 	add.w	sl, sl, #1
 802bbba:	b1e2      	cbz	r2, 802bbf6 <_vfiprintf_r+0x702>
 802bbbc:	9a06      	ldr	r2, [sp, #24]
 802bbbe:	7812      	ldrb	r2, [r2, #0]
 802bbc0:	4552      	cmp	r2, sl
 802bbc2:	d118      	bne.n	802bbf6 <_vfiprintf_r+0x702>
 802bbc4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802bbc8:	d015      	beq.n	802bbf6 <_vfiprintf_r+0x702>
 802bbca:	2c0a      	cmp	r4, #10
 802bbcc:	f175 0200 	sbcs.w	r2, r5, #0
 802bbd0:	d311      	bcc.n	802bbf6 <_vfiprintf_r+0x702>
 802bbd2:	9308      	str	r3, [sp, #32]
 802bbd4:	9b07      	ldr	r3, [sp, #28]
 802bbd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802bbd8:	eba9 0903 	sub.w	r9, r9, r3
 802bbdc:	461a      	mov	r2, r3
 802bbde:	4648      	mov	r0, r9
 802bbe0:	f000 ff3d 	bl	802ca5e <strncpy>
 802bbe4:	9b06      	ldr	r3, [sp, #24]
 802bbe6:	785a      	ldrb	r2, [r3, #1]
 802bbe8:	9b08      	ldr	r3, [sp, #32]
 802bbea:	b172      	cbz	r2, 802bc0a <_vfiprintf_r+0x716>
 802bbec:	9a06      	ldr	r2, [sp, #24]
 802bbee:	3201      	adds	r2, #1
 802bbf0:	9206      	str	r2, [sp, #24]
 802bbf2:	f04f 0a00 	mov.w	sl, #0
 802bbf6:	2c0a      	cmp	r4, #10
 802bbf8:	f175 0500 	sbcs.w	r5, r5, #0
 802bbfc:	f0c0 80f6 	bcc.w	802bdec <_vfiprintf_r+0x8f8>
 802bc00:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802bc02:	f8cd 9020 	str.w	r9, [sp, #32]
 802bc06:	461d      	mov	r5, r3
 802bc08:	e7c6      	b.n	802bb98 <_vfiprintf_r+0x6a4>
 802bc0a:	4692      	mov	sl, r2
 802bc0c:	e7f3      	b.n	802bbf6 <_vfiprintf_r+0x702>
 802bc0e:	f004 030f 	and.w	r3, r4, #15
 802bc12:	9a05      	ldr	r2, [sp, #20]
 802bc14:	0924      	lsrs	r4, r4, #4
 802bc16:	5cd3      	ldrb	r3, [r2, r3]
 802bc18:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802bc1c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802bc20:	092d      	lsrs	r5, r5, #4
 802bc22:	ea54 0305 	orrs.w	r3, r4, r5
 802bc26:	d1f2      	bne.n	802bc0e <_vfiprintf_r+0x71a>
 802bc28:	e0e0      	b.n	802bdec <_vfiprintf_r+0x8f8>
 802bc2a:	b923      	cbnz	r3, 802bc36 <_vfiprintf_r+0x742>
 802bc2c:	f01a 0f01 	tst.w	sl, #1
 802bc30:	d001      	beq.n	802bc36 <_vfiprintf_r+0x742>
 802bc32:	2430      	movs	r4, #48	@ 0x30
 802bc34:	e7a3      	b.n	802bb7e <_vfiprintf_r+0x68a>
 802bc36:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802bc3a:	e0d7      	b.n	802bdec <_vfiprintf_r+0x8f8>
 802bc3c:	2b00      	cmp	r3, #0
 802bc3e:	f000 80a3 	beq.w	802bd88 <_vfiprintf_r+0x894>
 802bc42:	2400      	movs	r4, #0
 802bc44:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802bc48:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802bc4c:	46a8      	mov	r8, r5
 802bc4e:	e5e0      	b.n	802b812 <_vfiprintf_r+0x31e>
 802bc50:	0803bd23 	.word	0x0803bd23
 802bc54:	0803bd13 	.word	0x0803bd13
 802bc58:	0803bce0 	.word	0x0803bce0
 802bc5c:	2110      	movs	r1, #16
 802bc5e:	6071      	str	r1, [r6, #4]
 802bc60:	2a07      	cmp	r2, #7
 802bc62:	4461      	add	r1, ip
 802bc64:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802bc68:	dd08      	ble.n	802bc7c <_vfiprintf_r+0x788>
 802bc6a:	9800      	ldr	r0, [sp, #0]
 802bc6c:	aa0e      	add	r2, sp, #56	@ 0x38
 802bc6e:	4639      	mov	r1, r7
 802bc70:	f7ff fc0e 	bl	802b490 <__sprint_r>
 802bc74:	2800      	cmp	r0, #0
 802bc76:	d166      	bne.n	802bd46 <_vfiprintf_r+0x852>
 802bc78:	4b60      	ldr	r3, [pc, #384]	@ (802bdfc <_vfiprintf_r+0x908>)
 802bc7a:	a811      	add	r0, sp, #68	@ 0x44
 802bc7c:	3d10      	subs	r5, #16
 802bc7e:	4606      	mov	r6, r0
 802bc80:	e694      	b.n	802b9ac <_vfiprintf_r+0x4b8>
 802bc82:	4606      	mov	r6, r0
 802bc84:	e6ac      	b.n	802b9e0 <_vfiprintf_r+0x4ec>
 802bc86:	9800      	ldr	r0, [sp, #0]
 802bc88:	aa0e      	add	r2, sp, #56	@ 0x38
 802bc8a:	4639      	mov	r1, r7
 802bc8c:	f7ff fc00 	bl	802b490 <__sprint_r>
 802bc90:	2800      	cmp	r0, #0
 802bc92:	d158      	bne.n	802bd46 <_vfiprintf_r+0x852>
 802bc94:	ae11      	add	r6, sp, #68	@ 0x44
 802bc96:	e6b5      	b.n	802ba04 <_vfiprintf_r+0x510>
 802bc98:	9800      	ldr	r0, [sp, #0]
 802bc9a:	aa0e      	add	r2, sp, #56	@ 0x38
 802bc9c:	4639      	mov	r1, r7
 802bc9e:	f7ff fbf7 	bl	802b490 <__sprint_r>
 802bca2:	2800      	cmp	r0, #0
 802bca4:	d14f      	bne.n	802bd46 <_vfiprintf_r+0x852>
 802bca6:	ae11      	add	r6, sp, #68	@ 0x44
 802bca8:	e6bc      	b.n	802ba24 <_vfiprintf_r+0x530>
 802bcaa:	2110      	movs	r1, #16
 802bcac:	6071      	str	r1, [r6, #4]
 802bcae:	2a07      	cmp	r2, #7
 802bcb0:	4461      	add	r1, ip
 802bcb2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802bcb6:	dd08      	ble.n	802bcca <_vfiprintf_r+0x7d6>
 802bcb8:	9800      	ldr	r0, [sp, #0]
 802bcba:	aa0e      	add	r2, sp, #56	@ 0x38
 802bcbc:	4639      	mov	r1, r7
 802bcbe:	f7ff fbe7 	bl	802b490 <__sprint_r>
 802bcc2:	2800      	cmp	r0, #0
 802bcc4:	d13f      	bne.n	802bd46 <_vfiprintf_r+0x852>
 802bcc6:	4b4e      	ldr	r3, [pc, #312]	@ (802be00 <_vfiprintf_r+0x90c>)
 802bcc8:	a811      	add	r0, sp, #68	@ 0x44
 802bcca:	3d10      	subs	r5, #16
 802bccc:	4606      	mov	r6, r0
 802bcce:	e6b2      	b.n	802ba36 <_vfiprintf_r+0x542>
 802bcd0:	4606      	mov	r6, r0
 802bcd2:	e6ca      	b.n	802ba6a <_vfiprintf_r+0x576>
 802bcd4:	2010      	movs	r0, #16
 802bcd6:	4402      	add	r2, r0
 802bcd8:	2b07      	cmp	r3, #7
 802bcda:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802bcde:	6070      	str	r0, [r6, #4]
 802bce0:	dd06      	ble.n	802bcf0 <_vfiprintf_r+0x7fc>
 802bce2:	9800      	ldr	r0, [sp, #0]
 802bce4:	aa0e      	add	r2, sp, #56	@ 0x38
 802bce6:	4639      	mov	r1, r7
 802bce8:	f7ff fbd2 	bl	802b490 <__sprint_r>
 802bcec:	bb58      	cbnz	r0, 802bd46 <_vfiprintf_r+0x852>
 802bcee:	a911      	add	r1, sp, #68	@ 0x44
 802bcf0:	3c10      	subs	r4, #16
 802bcf2:	460e      	mov	r6, r1
 802bcf4:	e6bd      	b.n	802ba72 <_vfiprintf_r+0x57e>
 802bcf6:	460e      	mov	r6, r1
 802bcf8:	e6d6      	b.n	802baa8 <_vfiprintf_r+0x5b4>
 802bcfa:	9800      	ldr	r0, [sp, #0]
 802bcfc:	aa0e      	add	r2, sp, #56	@ 0x38
 802bcfe:	4639      	mov	r1, r7
 802bd00:	f7ff fbc6 	bl	802b490 <__sprint_r>
 802bd04:	b9f8      	cbnz	r0, 802bd46 <_vfiprintf_r+0x852>
 802bd06:	ab11      	add	r3, sp, #68	@ 0x44
 802bd08:	e6de      	b.n	802bac8 <_vfiprintf_r+0x5d4>
 802bd0a:	9a02      	ldr	r2, [sp, #8]
 802bd0c:	9904      	ldr	r1, [sp, #16]
 802bd0e:	1a54      	subs	r4, r2, r1
 802bd10:	2c00      	cmp	r4, #0
 802bd12:	f77f aedd 	ble.w	802bad0 <_vfiprintf_r+0x5dc>
 802bd16:	4d39      	ldr	r5, [pc, #228]	@ (802bdfc <_vfiprintf_r+0x908>)
 802bd18:	2610      	movs	r6, #16
 802bd1a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802bd1e:	2c10      	cmp	r4, #16
 802bd20:	f102 0201 	add.w	r2, r2, #1
 802bd24:	601d      	str	r5, [r3, #0]
 802bd26:	dc1d      	bgt.n	802bd64 <_vfiprintf_r+0x870>
 802bd28:	605c      	str	r4, [r3, #4]
 802bd2a:	2a07      	cmp	r2, #7
 802bd2c:	440c      	add	r4, r1
 802bd2e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802bd32:	f77f aecd 	ble.w	802bad0 <_vfiprintf_r+0x5dc>
 802bd36:	9800      	ldr	r0, [sp, #0]
 802bd38:	aa0e      	add	r2, sp, #56	@ 0x38
 802bd3a:	4639      	mov	r1, r7
 802bd3c:	f7ff fba8 	bl	802b490 <__sprint_r>
 802bd40:	2800      	cmp	r0, #0
 802bd42:	f43f aec5 	beq.w	802bad0 <_vfiprintf_r+0x5dc>
 802bd46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802bd48:	07d9      	lsls	r1, r3, #31
 802bd4a:	d405      	bmi.n	802bd58 <_vfiprintf_r+0x864>
 802bd4c:	89bb      	ldrh	r3, [r7, #12]
 802bd4e:	059a      	lsls	r2, r3, #22
 802bd50:	d402      	bmi.n	802bd58 <_vfiprintf_r+0x864>
 802bd52:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802bd54:	f002 f877 	bl	802de46 <__retarget_lock_release_recursive>
 802bd58:	89bb      	ldrh	r3, [r7, #12]
 802bd5a:	065b      	lsls	r3, r3, #25
 802bd5c:	f57f abfb 	bpl.w	802b556 <_vfiprintf_r+0x62>
 802bd60:	f7ff bbf6 	b.w	802b550 <_vfiprintf_r+0x5c>
 802bd64:	3110      	adds	r1, #16
 802bd66:	2a07      	cmp	r2, #7
 802bd68:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802bd6c:	605e      	str	r6, [r3, #4]
 802bd6e:	dc02      	bgt.n	802bd76 <_vfiprintf_r+0x882>
 802bd70:	3308      	adds	r3, #8
 802bd72:	3c10      	subs	r4, #16
 802bd74:	e7d1      	b.n	802bd1a <_vfiprintf_r+0x826>
 802bd76:	9800      	ldr	r0, [sp, #0]
 802bd78:	aa0e      	add	r2, sp, #56	@ 0x38
 802bd7a:	4639      	mov	r1, r7
 802bd7c:	f7ff fb88 	bl	802b490 <__sprint_r>
 802bd80:	2800      	cmp	r0, #0
 802bd82:	d1e0      	bne.n	802bd46 <_vfiprintf_r+0x852>
 802bd84:	ab11      	add	r3, sp, #68	@ 0x44
 802bd86:	e7f4      	b.n	802bd72 <_vfiprintf_r+0x87e>
 802bd88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bd8a:	b913      	cbnz	r3, 802bd92 <_vfiprintf_r+0x89e>
 802bd8c:	2300      	movs	r3, #0
 802bd8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bd90:	e7d9      	b.n	802bd46 <_vfiprintf_r+0x852>
 802bd92:	9800      	ldr	r0, [sp, #0]
 802bd94:	aa0e      	add	r2, sp, #56	@ 0x38
 802bd96:	4639      	mov	r1, r7
 802bd98:	f7ff fb7a 	bl	802b490 <__sprint_r>
 802bd9c:	2800      	cmp	r0, #0
 802bd9e:	d0f5      	beq.n	802bd8c <_vfiprintf_r+0x898>
 802bda0:	e7d1      	b.n	802bd46 <_vfiprintf_r+0x852>
 802bda2:	ea54 0205 	orrs.w	r2, r4, r5
 802bda6:	f8cd a010 	str.w	sl, [sp, #16]
 802bdaa:	f43f ada6 	beq.w	802b8fa <_vfiprintf_r+0x406>
 802bdae:	2b01      	cmp	r3, #1
 802bdb0:	f43f aedf 	beq.w	802bb72 <_vfiprintf_r+0x67e>
 802bdb4:	2b02      	cmp	r3, #2
 802bdb6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802bdba:	f43f af28 	beq.w	802bc0e <_vfiprintf_r+0x71a>
 802bdbe:	f004 0307 	and.w	r3, r4, #7
 802bdc2:	08e4      	lsrs	r4, r4, #3
 802bdc4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802bdc8:	08ed      	lsrs	r5, r5, #3
 802bdca:	3330      	adds	r3, #48	@ 0x30
 802bdcc:	ea54 0105 	orrs.w	r1, r4, r5
 802bdd0:	464a      	mov	r2, r9
 802bdd2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802bdd6:	d1f2      	bne.n	802bdbe <_vfiprintf_r+0x8ca>
 802bdd8:	9904      	ldr	r1, [sp, #16]
 802bdda:	07c8      	lsls	r0, r1, #31
 802bddc:	d506      	bpl.n	802bdec <_vfiprintf_r+0x8f8>
 802bdde:	2b30      	cmp	r3, #48	@ 0x30
 802bde0:	d004      	beq.n	802bdec <_vfiprintf_r+0x8f8>
 802bde2:	2330      	movs	r3, #48	@ 0x30
 802bde4:	f809 3c01 	strb.w	r3, [r9, #-1]
 802bde8:	f1a2 0902 	sub.w	r9, r2, #2
 802bdec:	ab3a      	add	r3, sp, #232	@ 0xe8
 802bdee:	eba3 0309 	sub.w	r3, r3, r9
 802bdf2:	9c01      	ldr	r4, [sp, #4]
 802bdf4:	f8dd a010 	ldr.w	sl, [sp, #16]
 802bdf8:	9301      	str	r3, [sp, #4]
 802bdfa:	e5bb      	b.n	802b974 <_vfiprintf_r+0x480>
 802bdfc:	0803bd23 	.word	0x0803bd23
 802be00:	0803bd13 	.word	0x0803bd13

0802be04 <__sbprintf>:
 802be04:	b5f0      	push	{r4, r5, r6, r7, lr}
 802be06:	461f      	mov	r7, r3
 802be08:	898b      	ldrh	r3, [r1, #12]
 802be0a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802be0e:	f023 0302 	bic.w	r3, r3, #2
 802be12:	f8ad 300c 	strh.w	r3, [sp, #12]
 802be16:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802be18:	9319      	str	r3, [sp, #100]	@ 0x64
 802be1a:	89cb      	ldrh	r3, [r1, #14]
 802be1c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802be20:	69cb      	ldr	r3, [r1, #28]
 802be22:	9307      	str	r3, [sp, #28]
 802be24:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802be26:	9309      	str	r3, [sp, #36]	@ 0x24
 802be28:	ab1a      	add	r3, sp, #104	@ 0x68
 802be2a:	9300      	str	r3, [sp, #0]
 802be2c:	9304      	str	r3, [sp, #16]
 802be2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802be32:	4615      	mov	r5, r2
 802be34:	4606      	mov	r6, r0
 802be36:	9302      	str	r3, [sp, #8]
 802be38:	9305      	str	r3, [sp, #20]
 802be3a:	a816      	add	r0, sp, #88	@ 0x58
 802be3c:	2300      	movs	r3, #0
 802be3e:	460c      	mov	r4, r1
 802be40:	9306      	str	r3, [sp, #24]
 802be42:	f001 fffb 	bl	802de3c <__retarget_lock_init_recursive>
 802be46:	462a      	mov	r2, r5
 802be48:	463b      	mov	r3, r7
 802be4a:	4669      	mov	r1, sp
 802be4c:	4630      	mov	r0, r6
 802be4e:	f7ff fb51 	bl	802b4f4 <_vfiprintf_r>
 802be52:	1e05      	subs	r5, r0, #0
 802be54:	db07      	blt.n	802be66 <__sbprintf+0x62>
 802be56:	4669      	mov	r1, sp
 802be58:	4630      	mov	r0, r6
 802be5a:	f000 f9d1 	bl	802c200 <_fflush_r>
 802be5e:	2800      	cmp	r0, #0
 802be60:	bf18      	it	ne
 802be62:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802be66:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802be6a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802be6c:	065b      	lsls	r3, r3, #25
 802be6e:	bf42      	ittt	mi
 802be70:	89a3      	ldrhmi	r3, [r4, #12]
 802be72:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802be76:	81a3      	strhmi	r3, [r4, #12]
 802be78:	f001 ffe1 	bl	802de3e <__retarget_lock_close_recursive>
 802be7c:	4628      	mov	r0, r5
 802be7e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802be82:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802be84 <putchar>:
 802be84:	4b02      	ldr	r3, [pc, #8]	@ (802be90 <putchar+0xc>)
 802be86:	4601      	mov	r1, r0
 802be88:	6818      	ldr	r0, [r3, #0]
 802be8a:	6882      	ldr	r2, [r0, #8]
 802be8c:	f007 bacc 	b.w	8033428 <_putc_r>
 802be90:	200002d8 	.word	0x200002d8

0802be94 <_puts_r>:
 802be94:	b530      	push	{r4, r5, lr}
 802be96:	4605      	mov	r5, r0
 802be98:	b089      	sub	sp, #36	@ 0x24
 802be9a:	4608      	mov	r0, r1
 802be9c:	460c      	mov	r4, r1
 802be9e:	f7e4 f9ff 	bl	80102a0 <strlen>
 802bea2:	4b1e      	ldr	r3, [pc, #120]	@ (802bf1c <_puts_r+0x88>)
 802bea4:	9306      	str	r3, [sp, #24]
 802bea6:	2301      	movs	r3, #1
 802bea8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802beac:	9307      	str	r3, [sp, #28]
 802beae:	4418      	add	r0, r3
 802beb0:	ab04      	add	r3, sp, #16
 802beb2:	9301      	str	r3, [sp, #4]
 802beb4:	2302      	movs	r3, #2
 802beb6:	9302      	str	r3, [sp, #8]
 802beb8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802beba:	68ac      	ldr	r4, [r5, #8]
 802bebc:	9003      	str	r0, [sp, #12]
 802bebe:	b913      	cbnz	r3, 802bec6 <_puts_r+0x32>
 802bec0:	4628      	mov	r0, r5
 802bec2:	f000 fadf 	bl	802c484 <__sinit>
 802bec6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bec8:	07db      	lsls	r3, r3, #31
 802beca:	d405      	bmi.n	802bed8 <_puts_r+0x44>
 802becc:	89a3      	ldrh	r3, [r4, #12]
 802bece:	0598      	lsls	r0, r3, #22
 802bed0:	d402      	bmi.n	802bed8 <_puts_r+0x44>
 802bed2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bed4:	f001 ffb5 	bl	802de42 <__retarget_lock_acquire_recursive>
 802bed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bedc:	0499      	lsls	r1, r3, #18
 802bede:	d406      	bmi.n	802beee <_puts_r+0x5a>
 802bee0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802bee4:	81a3      	strh	r3, [r4, #12]
 802bee6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bee8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802beec:	6663      	str	r3, [r4, #100]	@ 0x64
 802beee:	4628      	mov	r0, r5
 802bef0:	aa01      	add	r2, sp, #4
 802bef2:	4621      	mov	r1, r4
 802bef4:	f000 fb18 	bl	802c528 <__sfvwrite_r>
 802bef8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802befa:	2800      	cmp	r0, #0
 802befc:	bf0c      	ite	eq
 802befe:	250a      	moveq	r5, #10
 802bf00:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802bf04:	07da      	lsls	r2, r3, #31
 802bf06:	d405      	bmi.n	802bf14 <_puts_r+0x80>
 802bf08:	89a3      	ldrh	r3, [r4, #12]
 802bf0a:	059b      	lsls	r3, r3, #22
 802bf0c:	d402      	bmi.n	802bf14 <_puts_r+0x80>
 802bf0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bf10:	f001 ff99 	bl	802de46 <__retarget_lock_release_recursive>
 802bf14:	4628      	mov	r0, r5
 802bf16:	b009      	add	sp, #36	@ 0x24
 802bf18:	bd30      	pop	{r4, r5, pc}
 802bf1a:	bf00      	nop
 802bf1c:	0803bcbd 	.word	0x0803bcbd

0802bf20 <puts>:
 802bf20:	4b02      	ldr	r3, [pc, #8]	@ (802bf2c <puts+0xc>)
 802bf22:	4601      	mov	r1, r0
 802bf24:	6818      	ldr	r0, [r3, #0]
 802bf26:	f7ff bfb5 	b.w	802be94 <_puts_r>
 802bf2a:	bf00      	nop
 802bf2c:	200002d8 	.word	0x200002d8

0802bf30 <srand>:
 802bf30:	4b03      	ldr	r3, [pc, #12]	@ (802bf40 <srand+0x10>)
 802bf32:	681b      	ldr	r3, [r3, #0]
 802bf34:	2200      	movs	r2, #0
 802bf36:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 802bf3a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 802bf3e:	4770      	bx	lr
 802bf40:	200002d8 	.word	0x200002d8

0802bf44 <rand>:
 802bf44:	4b0a      	ldr	r3, [pc, #40]	@ (802bf70 <rand+0x2c>)
 802bf46:	480b      	ldr	r0, [pc, #44]	@ (802bf74 <rand+0x30>)
 802bf48:	6819      	ldr	r1, [r3, #0]
 802bf4a:	4a0b      	ldr	r2, [pc, #44]	@ (802bf78 <rand+0x34>)
 802bf4c:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 802bf50:	b510      	push	{r4, lr}
 802bf52:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 802bf56:	4358      	muls	r0, r3
 802bf58:	fb02 0004 	mla	r0, r2, r4, r0
 802bf5c:	fba3 3202 	umull	r3, r2, r3, r2
 802bf60:	3301      	adds	r3, #1
 802bf62:	eb40 0002 	adc.w	r0, r0, r2
 802bf66:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802bf6a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802bf6e:	bd10      	pop	{r4, pc}
 802bf70:	200002d8 	.word	0x200002d8
 802bf74:	5851f42d 	.word	0x5851f42d
 802bf78:	4c957f2d 	.word	0x4c957f2d

0802bf7c <snprintf>:
 802bf7c:	b40c      	push	{r2, r3}
 802bf7e:	b530      	push	{r4, r5, lr}
 802bf80:	4b17      	ldr	r3, [pc, #92]	@ (802bfe0 <snprintf+0x64>)
 802bf82:	1e0c      	subs	r4, r1, #0
 802bf84:	681d      	ldr	r5, [r3, #0]
 802bf86:	b09d      	sub	sp, #116	@ 0x74
 802bf88:	da08      	bge.n	802bf9c <snprintf+0x20>
 802bf8a:	238b      	movs	r3, #139	@ 0x8b
 802bf8c:	602b      	str	r3, [r5, #0]
 802bf8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802bf92:	b01d      	add	sp, #116	@ 0x74
 802bf94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802bf98:	b002      	add	sp, #8
 802bf9a:	4770      	bx	lr
 802bf9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802bfa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 802bfa4:	bf14      	ite	ne
 802bfa6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802bfaa:	4623      	moveq	r3, r4
 802bfac:	9304      	str	r3, [sp, #16]
 802bfae:	9307      	str	r3, [sp, #28]
 802bfb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802bfb4:	9002      	str	r0, [sp, #8]
 802bfb6:	9006      	str	r0, [sp, #24]
 802bfb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 802bfbc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802bfbe:	ab21      	add	r3, sp, #132	@ 0x84
 802bfc0:	a902      	add	r1, sp, #8
 802bfc2:	4628      	mov	r0, r5
 802bfc4:	9301      	str	r3, [sp, #4]
 802bfc6:	f004 fe7b 	bl	8030cc0 <_svfprintf_r>
 802bfca:	1c43      	adds	r3, r0, #1
 802bfcc:	bfbc      	itt	lt
 802bfce:	238b      	movlt	r3, #139	@ 0x8b
 802bfd0:	602b      	strlt	r3, [r5, #0]
 802bfd2:	2c00      	cmp	r4, #0
 802bfd4:	d0dd      	beq.n	802bf92 <snprintf+0x16>
 802bfd6:	9b02      	ldr	r3, [sp, #8]
 802bfd8:	2200      	movs	r2, #0
 802bfda:	701a      	strb	r2, [r3, #0]
 802bfdc:	e7d9      	b.n	802bf92 <snprintf+0x16>
 802bfde:	bf00      	nop
 802bfe0:	200002d8 	.word	0x200002d8

0802bfe4 <_strtol_l.constprop.0>:
 802bfe4:	2b24      	cmp	r3, #36	@ 0x24
 802bfe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bfea:	4686      	mov	lr, r0
 802bfec:	4690      	mov	r8, r2
 802bfee:	d801      	bhi.n	802bff4 <_strtol_l.constprop.0+0x10>
 802bff0:	2b01      	cmp	r3, #1
 802bff2:	d106      	bne.n	802c002 <_strtol_l.constprop.0+0x1e>
 802bff4:	f001 fef0 	bl	802ddd8 <__errno>
 802bff8:	2316      	movs	r3, #22
 802bffa:	6003      	str	r3, [r0, #0]
 802bffc:	2000      	movs	r0, #0
 802bffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c002:	4834      	ldr	r0, [pc, #208]	@ (802c0d4 <_strtol_l.constprop.0+0xf0>)
 802c004:	460d      	mov	r5, r1
 802c006:	462a      	mov	r2, r5
 802c008:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c00c:	5d06      	ldrb	r6, [r0, r4]
 802c00e:	f016 0608 	ands.w	r6, r6, #8
 802c012:	d1f8      	bne.n	802c006 <_strtol_l.constprop.0+0x22>
 802c014:	2c2d      	cmp	r4, #45	@ 0x2d
 802c016:	d12d      	bne.n	802c074 <_strtol_l.constprop.0+0x90>
 802c018:	782c      	ldrb	r4, [r5, #0]
 802c01a:	2601      	movs	r6, #1
 802c01c:	1c95      	adds	r5, r2, #2
 802c01e:	f033 0210 	bics.w	r2, r3, #16
 802c022:	d109      	bne.n	802c038 <_strtol_l.constprop.0+0x54>
 802c024:	2c30      	cmp	r4, #48	@ 0x30
 802c026:	d12a      	bne.n	802c07e <_strtol_l.constprop.0+0x9a>
 802c028:	782a      	ldrb	r2, [r5, #0]
 802c02a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802c02e:	2a58      	cmp	r2, #88	@ 0x58
 802c030:	d125      	bne.n	802c07e <_strtol_l.constprop.0+0x9a>
 802c032:	786c      	ldrb	r4, [r5, #1]
 802c034:	2310      	movs	r3, #16
 802c036:	3502      	adds	r5, #2
 802c038:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802c03c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802c040:	2200      	movs	r2, #0
 802c042:	fbbc f9f3 	udiv	r9, ip, r3
 802c046:	4610      	mov	r0, r2
 802c048:	fb03 ca19 	mls	sl, r3, r9, ip
 802c04c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802c050:	2f09      	cmp	r7, #9
 802c052:	d81b      	bhi.n	802c08c <_strtol_l.constprop.0+0xa8>
 802c054:	463c      	mov	r4, r7
 802c056:	42a3      	cmp	r3, r4
 802c058:	dd27      	ble.n	802c0aa <_strtol_l.constprop.0+0xc6>
 802c05a:	1c57      	adds	r7, r2, #1
 802c05c:	d007      	beq.n	802c06e <_strtol_l.constprop.0+0x8a>
 802c05e:	4581      	cmp	r9, r0
 802c060:	d320      	bcc.n	802c0a4 <_strtol_l.constprop.0+0xc0>
 802c062:	d101      	bne.n	802c068 <_strtol_l.constprop.0+0x84>
 802c064:	45a2      	cmp	sl, r4
 802c066:	db1d      	blt.n	802c0a4 <_strtol_l.constprop.0+0xc0>
 802c068:	fb00 4003 	mla	r0, r0, r3, r4
 802c06c:	2201      	movs	r2, #1
 802c06e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c072:	e7eb      	b.n	802c04c <_strtol_l.constprop.0+0x68>
 802c074:	2c2b      	cmp	r4, #43	@ 0x2b
 802c076:	bf04      	itt	eq
 802c078:	782c      	ldrbeq	r4, [r5, #0]
 802c07a:	1c95      	addeq	r5, r2, #2
 802c07c:	e7cf      	b.n	802c01e <_strtol_l.constprop.0+0x3a>
 802c07e:	2b00      	cmp	r3, #0
 802c080:	d1da      	bne.n	802c038 <_strtol_l.constprop.0+0x54>
 802c082:	2c30      	cmp	r4, #48	@ 0x30
 802c084:	bf0c      	ite	eq
 802c086:	2308      	moveq	r3, #8
 802c088:	230a      	movne	r3, #10
 802c08a:	e7d5      	b.n	802c038 <_strtol_l.constprop.0+0x54>
 802c08c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802c090:	2f19      	cmp	r7, #25
 802c092:	d801      	bhi.n	802c098 <_strtol_l.constprop.0+0xb4>
 802c094:	3c37      	subs	r4, #55	@ 0x37
 802c096:	e7de      	b.n	802c056 <_strtol_l.constprop.0+0x72>
 802c098:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802c09c:	2f19      	cmp	r7, #25
 802c09e:	d804      	bhi.n	802c0aa <_strtol_l.constprop.0+0xc6>
 802c0a0:	3c57      	subs	r4, #87	@ 0x57
 802c0a2:	e7d8      	b.n	802c056 <_strtol_l.constprop.0+0x72>
 802c0a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802c0a8:	e7e1      	b.n	802c06e <_strtol_l.constprop.0+0x8a>
 802c0aa:	1c53      	adds	r3, r2, #1
 802c0ac:	d108      	bne.n	802c0c0 <_strtol_l.constprop.0+0xdc>
 802c0ae:	2322      	movs	r3, #34	@ 0x22
 802c0b0:	f8ce 3000 	str.w	r3, [lr]
 802c0b4:	4660      	mov	r0, ip
 802c0b6:	f1b8 0f00 	cmp.w	r8, #0
 802c0ba:	d0a0      	beq.n	802bffe <_strtol_l.constprop.0+0x1a>
 802c0bc:	1e69      	subs	r1, r5, #1
 802c0be:	e006      	b.n	802c0ce <_strtol_l.constprop.0+0xea>
 802c0c0:	b106      	cbz	r6, 802c0c4 <_strtol_l.constprop.0+0xe0>
 802c0c2:	4240      	negs	r0, r0
 802c0c4:	f1b8 0f00 	cmp.w	r8, #0
 802c0c8:	d099      	beq.n	802bffe <_strtol_l.constprop.0+0x1a>
 802c0ca:	2a00      	cmp	r2, #0
 802c0cc:	d1f6      	bne.n	802c0bc <_strtol_l.constprop.0+0xd8>
 802c0ce:	f8c8 1000 	str.w	r1, [r8]
 802c0d2:	e794      	b.n	802bffe <_strtol_l.constprop.0+0x1a>
 802c0d4:	0803c07d 	.word	0x0803c07d

0802c0d8 <_strtol_r>:
 802c0d8:	f7ff bf84 	b.w	802bfe4 <_strtol_l.constprop.0>

0802c0dc <strtol>:
 802c0dc:	4613      	mov	r3, r2
 802c0de:	460a      	mov	r2, r1
 802c0e0:	4601      	mov	r1, r0
 802c0e2:	4802      	ldr	r0, [pc, #8]	@ (802c0ec <strtol+0x10>)
 802c0e4:	6800      	ldr	r0, [r0, #0]
 802c0e6:	f7ff bf7d 	b.w	802bfe4 <_strtol_l.constprop.0>
 802c0ea:	bf00      	nop
 802c0ec:	200002d8 	.word	0x200002d8

0802c0f0 <__sflush_r>:
 802c0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c0f4:	4605      	mov	r5, r0
 802c0f6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802c0fa:	0706      	lsls	r6, r0, #28
 802c0fc:	460c      	mov	r4, r1
 802c0fe:	d457      	bmi.n	802c1b0 <__sflush_r+0xc0>
 802c100:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 802c104:	818b      	strh	r3, [r1, #12]
 802c106:	684b      	ldr	r3, [r1, #4]
 802c108:	2b00      	cmp	r3, #0
 802c10a:	dc02      	bgt.n	802c112 <__sflush_r+0x22>
 802c10c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802c10e:	2b00      	cmp	r3, #0
 802c110:	dd4c      	ble.n	802c1ac <__sflush_r+0xbc>
 802c112:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c114:	2e00      	cmp	r6, #0
 802c116:	d049      	beq.n	802c1ac <__sflush_r+0xbc>
 802c118:	2300      	movs	r3, #0
 802c11a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802c11e:	682f      	ldr	r7, [r5, #0]
 802c120:	69e1      	ldr	r1, [r4, #28]
 802c122:	602b      	str	r3, [r5, #0]
 802c124:	d034      	beq.n	802c190 <__sflush_r+0xa0>
 802c126:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 802c128:	89a3      	ldrh	r3, [r4, #12]
 802c12a:	0759      	lsls	r1, r3, #29
 802c12c:	d505      	bpl.n	802c13a <__sflush_r+0x4a>
 802c12e:	6863      	ldr	r3, [r4, #4]
 802c130:	1ad2      	subs	r2, r2, r3
 802c132:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802c134:	b10b      	cbz	r3, 802c13a <__sflush_r+0x4a>
 802c136:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802c138:	1ad2      	subs	r2, r2, r3
 802c13a:	2300      	movs	r3, #0
 802c13c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c13e:	69e1      	ldr	r1, [r4, #28]
 802c140:	4628      	mov	r0, r5
 802c142:	47b0      	blx	r6
 802c144:	1c43      	adds	r3, r0, #1
 802c146:	d106      	bne.n	802c156 <__sflush_r+0x66>
 802c148:	682a      	ldr	r2, [r5, #0]
 802c14a:	2a1d      	cmp	r2, #29
 802c14c:	d848      	bhi.n	802c1e0 <__sflush_r+0xf0>
 802c14e:	4b2b      	ldr	r3, [pc, #172]	@ (802c1fc <__sflush_r+0x10c>)
 802c150:	4113      	asrs	r3, r2
 802c152:	07de      	lsls	r6, r3, #31
 802c154:	d444      	bmi.n	802c1e0 <__sflush_r+0xf0>
 802c156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c15a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802c15e:	81a2      	strh	r2, [r4, #12]
 802c160:	2200      	movs	r2, #0
 802c162:	6062      	str	r2, [r4, #4]
 802c164:	04d9      	lsls	r1, r3, #19
 802c166:	6922      	ldr	r2, [r4, #16]
 802c168:	6022      	str	r2, [r4, #0]
 802c16a:	d504      	bpl.n	802c176 <__sflush_r+0x86>
 802c16c:	1c42      	adds	r2, r0, #1
 802c16e:	d101      	bne.n	802c174 <__sflush_r+0x84>
 802c170:	682b      	ldr	r3, [r5, #0]
 802c172:	b903      	cbnz	r3, 802c176 <__sflush_r+0x86>
 802c174:	6520      	str	r0, [r4, #80]	@ 0x50
 802c176:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c178:	602f      	str	r7, [r5, #0]
 802c17a:	b1b9      	cbz	r1, 802c1ac <__sflush_r+0xbc>
 802c17c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802c180:	4299      	cmp	r1, r3
 802c182:	d002      	beq.n	802c18a <__sflush_r+0x9a>
 802c184:	4628      	mov	r0, r5
 802c186:	f002 fd61 	bl	802ec4c <_free_r>
 802c18a:	2300      	movs	r3, #0
 802c18c:	6323      	str	r3, [r4, #48]	@ 0x30
 802c18e:	e00d      	b.n	802c1ac <__sflush_r+0xbc>
 802c190:	2301      	movs	r3, #1
 802c192:	4628      	mov	r0, r5
 802c194:	47b0      	blx	r6
 802c196:	4602      	mov	r2, r0
 802c198:	1c50      	adds	r0, r2, #1
 802c19a:	d1c5      	bne.n	802c128 <__sflush_r+0x38>
 802c19c:	682b      	ldr	r3, [r5, #0]
 802c19e:	2b00      	cmp	r3, #0
 802c1a0:	d0c2      	beq.n	802c128 <__sflush_r+0x38>
 802c1a2:	2b1d      	cmp	r3, #29
 802c1a4:	d001      	beq.n	802c1aa <__sflush_r+0xba>
 802c1a6:	2b16      	cmp	r3, #22
 802c1a8:	d11a      	bne.n	802c1e0 <__sflush_r+0xf0>
 802c1aa:	602f      	str	r7, [r5, #0]
 802c1ac:	2000      	movs	r0, #0
 802c1ae:	e01e      	b.n	802c1ee <__sflush_r+0xfe>
 802c1b0:	690f      	ldr	r7, [r1, #16]
 802c1b2:	2f00      	cmp	r7, #0
 802c1b4:	d0fa      	beq.n	802c1ac <__sflush_r+0xbc>
 802c1b6:	0783      	lsls	r3, r0, #30
 802c1b8:	680e      	ldr	r6, [r1, #0]
 802c1ba:	bf08      	it	eq
 802c1bc:	694b      	ldreq	r3, [r1, #20]
 802c1be:	600f      	str	r7, [r1, #0]
 802c1c0:	bf18      	it	ne
 802c1c2:	2300      	movne	r3, #0
 802c1c4:	eba6 0807 	sub.w	r8, r6, r7
 802c1c8:	608b      	str	r3, [r1, #8]
 802c1ca:	f1b8 0f00 	cmp.w	r8, #0
 802c1ce:	dded      	ble.n	802c1ac <__sflush_r+0xbc>
 802c1d0:	69e1      	ldr	r1, [r4, #28]
 802c1d2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802c1d4:	4643      	mov	r3, r8
 802c1d6:	463a      	mov	r2, r7
 802c1d8:	4628      	mov	r0, r5
 802c1da:	47b0      	blx	r6
 802c1dc:	2800      	cmp	r0, #0
 802c1de:	dc08      	bgt.n	802c1f2 <__sflush_r+0x102>
 802c1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c1e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c1e8:	81a3      	strh	r3, [r4, #12]
 802c1ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c1f2:	4407      	add	r7, r0
 802c1f4:	eba8 0800 	sub.w	r8, r8, r0
 802c1f8:	e7e7      	b.n	802c1ca <__sflush_r+0xda>
 802c1fa:	bf00      	nop
 802c1fc:	dfbffffe 	.word	0xdfbffffe

0802c200 <_fflush_r>:
 802c200:	b538      	push	{r3, r4, r5, lr}
 802c202:	460c      	mov	r4, r1
 802c204:	4605      	mov	r5, r0
 802c206:	b118      	cbz	r0, 802c210 <_fflush_r+0x10>
 802c208:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c20a:	b90b      	cbnz	r3, 802c210 <_fflush_r+0x10>
 802c20c:	f000 f93a 	bl	802c484 <__sinit>
 802c210:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802c214:	b1b8      	cbz	r0, 802c246 <_fflush_r+0x46>
 802c216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c218:	07db      	lsls	r3, r3, #31
 802c21a:	d404      	bmi.n	802c226 <_fflush_r+0x26>
 802c21c:	0581      	lsls	r1, r0, #22
 802c21e:	d402      	bmi.n	802c226 <_fflush_r+0x26>
 802c220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c222:	f001 fe0e 	bl	802de42 <__retarget_lock_acquire_recursive>
 802c226:	4628      	mov	r0, r5
 802c228:	4621      	mov	r1, r4
 802c22a:	f7ff ff61 	bl	802c0f0 <__sflush_r>
 802c22e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c230:	07da      	lsls	r2, r3, #31
 802c232:	4605      	mov	r5, r0
 802c234:	d405      	bmi.n	802c242 <_fflush_r+0x42>
 802c236:	89a3      	ldrh	r3, [r4, #12]
 802c238:	059b      	lsls	r3, r3, #22
 802c23a:	d402      	bmi.n	802c242 <_fflush_r+0x42>
 802c23c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c23e:	f001 fe02 	bl	802de46 <__retarget_lock_release_recursive>
 802c242:	4628      	mov	r0, r5
 802c244:	bd38      	pop	{r3, r4, r5, pc}
 802c246:	4605      	mov	r5, r0
 802c248:	e7fb      	b.n	802c242 <_fflush_r+0x42>
	...

0802c24c <sprintf>:
 802c24c:	b40e      	push	{r1, r2, r3}
 802c24e:	b500      	push	{lr}
 802c250:	b09c      	sub	sp, #112	@ 0x70
 802c252:	ab1d      	add	r3, sp, #116	@ 0x74
 802c254:	9002      	str	r0, [sp, #8]
 802c256:	9006      	str	r0, [sp, #24]
 802c258:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802c25c:	4809      	ldr	r0, [pc, #36]	@ (802c284 <sprintf+0x38>)
 802c25e:	9107      	str	r1, [sp, #28]
 802c260:	9104      	str	r1, [sp, #16]
 802c262:	4909      	ldr	r1, [pc, #36]	@ (802c288 <sprintf+0x3c>)
 802c264:	f853 2b04 	ldr.w	r2, [r3], #4
 802c268:	9105      	str	r1, [sp, #20]
 802c26a:	6800      	ldr	r0, [r0, #0]
 802c26c:	9301      	str	r3, [sp, #4]
 802c26e:	a902      	add	r1, sp, #8
 802c270:	f004 fd26 	bl	8030cc0 <_svfprintf_r>
 802c274:	9b02      	ldr	r3, [sp, #8]
 802c276:	2200      	movs	r2, #0
 802c278:	701a      	strb	r2, [r3, #0]
 802c27a:	b01c      	add	sp, #112	@ 0x70
 802c27c:	f85d eb04 	ldr.w	lr, [sp], #4
 802c280:	b003      	add	sp, #12
 802c282:	4770      	bx	lr
 802c284:	200002d8 	.word	0x200002d8
 802c288:	ffff0208 	.word	0xffff0208

0802c28c <sscanf>:
 802c28c:	b40e      	push	{r1, r2, r3}
 802c28e:	b530      	push	{r4, r5, lr}
 802c290:	b09c      	sub	sp, #112	@ 0x70
 802c292:	ac1f      	add	r4, sp, #124	@ 0x7c
 802c294:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802c298:	f854 5b04 	ldr.w	r5, [r4], #4
 802c29c:	f8ad 2014 	strh.w	r2, [sp, #20]
 802c2a0:	9002      	str	r0, [sp, #8]
 802c2a2:	9006      	str	r0, [sp, #24]
 802c2a4:	f7e3 fffc 	bl	80102a0 <strlen>
 802c2a8:	4b0b      	ldr	r3, [pc, #44]	@ (802c2d8 <sscanf+0x4c>)
 802c2aa:	9003      	str	r0, [sp, #12]
 802c2ac:	9007      	str	r0, [sp, #28]
 802c2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 802c2b0:	480a      	ldr	r0, [pc, #40]	@ (802c2dc <sscanf+0x50>)
 802c2b2:	9401      	str	r4, [sp, #4]
 802c2b4:	2300      	movs	r3, #0
 802c2b6:	930e      	str	r3, [sp, #56]	@ 0x38
 802c2b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 802c2ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c2be:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c2c2:	462a      	mov	r2, r5
 802c2c4:	4623      	mov	r3, r4
 802c2c6:	a902      	add	r1, sp, #8
 802c2c8:	6800      	ldr	r0, [r0, #0]
 802c2ca:	f005 ff3b 	bl	8032144 <__ssvfscanf_r>
 802c2ce:	b01c      	add	sp, #112	@ 0x70
 802c2d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c2d4:	b003      	add	sp, #12
 802c2d6:	4770      	bx	lr
 802c2d8:	0802c303 	.word	0x0802c303
 802c2dc:	200002d8 	.word	0x200002d8

0802c2e0 <__sread>:
 802c2e0:	b510      	push	{r4, lr}
 802c2e2:	460c      	mov	r4, r1
 802c2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c2e8:	f001 fd52 	bl	802dd90 <_read_r>
 802c2ec:	2800      	cmp	r0, #0
 802c2ee:	bfab      	itete	ge
 802c2f0:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802c2f2:	89a3      	ldrhlt	r3, [r4, #12]
 802c2f4:	181b      	addge	r3, r3, r0
 802c2f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802c2fa:	bfac      	ite	ge
 802c2fc:	6523      	strge	r3, [r4, #80]	@ 0x50
 802c2fe:	81a3      	strhlt	r3, [r4, #12]
 802c300:	bd10      	pop	{r4, pc}

0802c302 <__seofread>:
 802c302:	2000      	movs	r0, #0
 802c304:	4770      	bx	lr

0802c306 <__swrite>:
 802c306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c30a:	461f      	mov	r7, r3
 802c30c:	898b      	ldrh	r3, [r1, #12]
 802c30e:	05db      	lsls	r3, r3, #23
 802c310:	4605      	mov	r5, r0
 802c312:	460c      	mov	r4, r1
 802c314:	4616      	mov	r6, r2
 802c316:	d505      	bpl.n	802c324 <__swrite+0x1e>
 802c318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c31c:	2302      	movs	r3, #2
 802c31e:	2200      	movs	r2, #0
 802c320:	f001 fd24 	bl	802dd6c <_lseek_r>
 802c324:	89a3      	ldrh	r3, [r4, #12]
 802c326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c32a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802c32e:	81a3      	strh	r3, [r4, #12]
 802c330:	4632      	mov	r2, r6
 802c332:	463b      	mov	r3, r7
 802c334:	4628      	mov	r0, r5
 802c336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c33a:	f001 bd3b 	b.w	802ddb4 <_write_r>

0802c33e <__sseek>:
 802c33e:	b510      	push	{r4, lr}
 802c340:	460c      	mov	r4, r1
 802c342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c346:	f001 fd11 	bl	802dd6c <_lseek_r>
 802c34a:	1c43      	adds	r3, r0, #1
 802c34c:	89a3      	ldrh	r3, [r4, #12]
 802c34e:	bf15      	itete	ne
 802c350:	6520      	strne	r0, [r4, #80]	@ 0x50
 802c352:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802c356:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802c35a:	81a3      	strheq	r3, [r4, #12]
 802c35c:	bf18      	it	ne
 802c35e:	81a3      	strhne	r3, [r4, #12]
 802c360:	bd10      	pop	{r4, pc}

0802c362 <__sclose>:
 802c362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c366:	f001 bcc5 	b.w	802dcf4 <_close_r>
	...

0802c36c <std>:
 802c36c:	2300      	movs	r3, #0
 802c36e:	b510      	push	{r4, lr}
 802c370:	4604      	mov	r4, r0
 802c372:	e9c0 3300 	strd	r3, r3, [r0]
 802c376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c37a:	6083      	str	r3, [r0, #8]
 802c37c:	8181      	strh	r1, [r0, #12]
 802c37e:	6643      	str	r3, [r0, #100]	@ 0x64
 802c380:	81c2      	strh	r2, [r0, #14]
 802c382:	6183      	str	r3, [r0, #24]
 802c384:	4619      	mov	r1, r3
 802c386:	2208      	movs	r2, #8
 802c388:	305c      	adds	r0, #92	@ 0x5c
 802c38a:	f000 fb21 	bl	802c9d0 <memset>
 802c38e:	4b0d      	ldr	r3, [pc, #52]	@ (802c3c4 <std+0x58>)
 802c390:	6223      	str	r3, [r4, #32]
 802c392:	4b0d      	ldr	r3, [pc, #52]	@ (802c3c8 <std+0x5c>)
 802c394:	6263      	str	r3, [r4, #36]	@ 0x24
 802c396:	4b0d      	ldr	r3, [pc, #52]	@ (802c3cc <std+0x60>)
 802c398:	62a3      	str	r3, [r4, #40]	@ 0x28
 802c39a:	4b0d      	ldr	r3, [pc, #52]	@ (802c3d0 <std+0x64>)
 802c39c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802c39e:	4b0d      	ldr	r3, [pc, #52]	@ (802c3d4 <std+0x68>)
 802c3a0:	61e4      	str	r4, [r4, #28]
 802c3a2:	429c      	cmp	r4, r3
 802c3a4:	d006      	beq.n	802c3b4 <std+0x48>
 802c3a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802c3aa:	4294      	cmp	r4, r2
 802c3ac:	d002      	beq.n	802c3b4 <std+0x48>
 802c3ae:	33d0      	adds	r3, #208	@ 0xd0
 802c3b0:	429c      	cmp	r4, r3
 802c3b2:	d105      	bne.n	802c3c0 <std+0x54>
 802c3b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802c3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c3bc:	f001 bd3e 	b.w	802de3c <__retarget_lock_init_recursive>
 802c3c0:	bd10      	pop	{r4, pc}
 802c3c2:	bf00      	nop
 802c3c4:	0802c2e1 	.word	0x0802c2e1
 802c3c8:	0802c307 	.word	0x0802c307
 802c3cc:	0802c33f 	.word	0x0802c33f
 802c3d0:	0802c363 	.word	0x0802c363
 802c3d4:	20019ee4 	.word	0x20019ee4

0802c3d8 <stdio_exit_handler>:
 802c3d8:	4a02      	ldr	r2, [pc, #8]	@ (802c3e4 <stdio_exit_handler+0xc>)
 802c3da:	4903      	ldr	r1, [pc, #12]	@ (802c3e8 <stdio_exit_handler+0x10>)
 802c3dc:	4803      	ldr	r0, [pc, #12]	@ (802c3ec <stdio_exit_handler+0x14>)
 802c3de:	f000 b9ef 	b.w	802c7c0 <_fwalk_sglue>
 802c3e2:	bf00      	nop
 802c3e4:	20000158 	.word	0x20000158
 802c3e8:	08033d81 	.word	0x08033d81
 802c3ec:	200002e0 	.word	0x200002e0

0802c3f0 <cleanup_stdio>:
 802c3f0:	6841      	ldr	r1, [r0, #4]
 802c3f2:	4b0c      	ldr	r3, [pc, #48]	@ (802c424 <cleanup_stdio+0x34>)
 802c3f4:	4299      	cmp	r1, r3
 802c3f6:	b510      	push	{r4, lr}
 802c3f8:	4604      	mov	r4, r0
 802c3fa:	d001      	beq.n	802c400 <cleanup_stdio+0x10>
 802c3fc:	f007 fcc0 	bl	8033d80 <_fclose_r>
 802c400:	68a1      	ldr	r1, [r4, #8]
 802c402:	4b09      	ldr	r3, [pc, #36]	@ (802c428 <cleanup_stdio+0x38>)
 802c404:	4299      	cmp	r1, r3
 802c406:	d002      	beq.n	802c40e <cleanup_stdio+0x1e>
 802c408:	4620      	mov	r0, r4
 802c40a:	f007 fcb9 	bl	8033d80 <_fclose_r>
 802c40e:	68e1      	ldr	r1, [r4, #12]
 802c410:	4b06      	ldr	r3, [pc, #24]	@ (802c42c <cleanup_stdio+0x3c>)
 802c412:	4299      	cmp	r1, r3
 802c414:	d004      	beq.n	802c420 <cleanup_stdio+0x30>
 802c416:	4620      	mov	r0, r4
 802c418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c41c:	f007 bcb0 	b.w	8033d80 <_fclose_r>
 802c420:	bd10      	pop	{r4, pc}
 802c422:	bf00      	nop
 802c424:	20019ee4 	.word	0x20019ee4
 802c428:	20019f4c 	.word	0x20019f4c
 802c42c:	20019fb4 	.word	0x20019fb4

0802c430 <global_stdio_init.part.0>:
 802c430:	b510      	push	{r4, lr}
 802c432:	4b0b      	ldr	r3, [pc, #44]	@ (802c460 <global_stdio_init.part.0+0x30>)
 802c434:	4c0b      	ldr	r4, [pc, #44]	@ (802c464 <global_stdio_init.part.0+0x34>)
 802c436:	4a0c      	ldr	r2, [pc, #48]	@ (802c468 <global_stdio_init.part.0+0x38>)
 802c438:	601a      	str	r2, [r3, #0]
 802c43a:	4620      	mov	r0, r4
 802c43c:	2200      	movs	r2, #0
 802c43e:	2104      	movs	r1, #4
 802c440:	f7ff ff94 	bl	802c36c <std>
 802c444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802c448:	2201      	movs	r2, #1
 802c44a:	2109      	movs	r1, #9
 802c44c:	f7ff ff8e 	bl	802c36c <std>
 802c450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802c454:	2202      	movs	r2, #2
 802c456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c45a:	2112      	movs	r1, #18
 802c45c:	f7ff bf86 	b.w	802c36c <std>
 802c460:	2001a01c 	.word	0x2001a01c
 802c464:	20019ee4 	.word	0x20019ee4
 802c468:	0802c3d9 	.word	0x0802c3d9

0802c46c <__sfp_lock_acquire>:
 802c46c:	4801      	ldr	r0, [pc, #4]	@ (802c474 <__sfp_lock_acquire+0x8>)
 802c46e:	f001 bce8 	b.w	802de42 <__retarget_lock_acquire_recursive>
 802c472:	bf00      	nop
 802c474:	2001a04c 	.word	0x2001a04c

0802c478 <__sfp_lock_release>:
 802c478:	4801      	ldr	r0, [pc, #4]	@ (802c480 <__sfp_lock_release+0x8>)
 802c47a:	f001 bce4 	b.w	802de46 <__retarget_lock_release_recursive>
 802c47e:	bf00      	nop
 802c480:	2001a04c 	.word	0x2001a04c

0802c484 <__sinit>:
 802c484:	b510      	push	{r4, lr}
 802c486:	4604      	mov	r4, r0
 802c488:	f7ff fff0 	bl	802c46c <__sfp_lock_acquire>
 802c48c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802c48e:	b11b      	cbz	r3, 802c498 <__sinit+0x14>
 802c490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c494:	f7ff bff0 	b.w	802c478 <__sfp_lock_release>
 802c498:	4b04      	ldr	r3, [pc, #16]	@ (802c4ac <__sinit+0x28>)
 802c49a:	6363      	str	r3, [r4, #52]	@ 0x34
 802c49c:	4b04      	ldr	r3, [pc, #16]	@ (802c4b0 <__sinit+0x2c>)
 802c49e:	681b      	ldr	r3, [r3, #0]
 802c4a0:	2b00      	cmp	r3, #0
 802c4a2:	d1f5      	bne.n	802c490 <__sinit+0xc>
 802c4a4:	f7ff ffc4 	bl	802c430 <global_stdio_init.part.0>
 802c4a8:	e7f2      	b.n	802c490 <__sinit+0xc>
 802c4aa:	bf00      	nop
 802c4ac:	0802c3f1 	.word	0x0802c3f1
 802c4b0:	2001a01c 	.word	0x2001a01c

0802c4b4 <_vsnprintf_r>:
 802c4b4:	b530      	push	{r4, r5, lr}
 802c4b6:	4614      	mov	r4, r2
 802c4b8:	2c00      	cmp	r4, #0
 802c4ba:	b09b      	sub	sp, #108	@ 0x6c
 802c4bc:	4605      	mov	r5, r0
 802c4be:	461a      	mov	r2, r3
 802c4c0:	da05      	bge.n	802c4ce <_vsnprintf_r+0x1a>
 802c4c2:	238b      	movs	r3, #139	@ 0x8b
 802c4c4:	6003      	str	r3, [r0, #0]
 802c4c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c4ca:	b01b      	add	sp, #108	@ 0x6c
 802c4cc:	bd30      	pop	{r4, r5, pc}
 802c4ce:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802c4d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 802c4d6:	bf14      	ite	ne
 802c4d8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802c4dc:	4623      	moveq	r3, r4
 802c4de:	9302      	str	r3, [sp, #8]
 802c4e0:	9305      	str	r3, [sp, #20]
 802c4e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c4e6:	9100      	str	r1, [sp, #0]
 802c4e8:	9104      	str	r1, [sp, #16]
 802c4ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c4ee:	4669      	mov	r1, sp
 802c4f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802c4f2:	f004 fbe5 	bl	8030cc0 <_svfprintf_r>
 802c4f6:	1c43      	adds	r3, r0, #1
 802c4f8:	bfbc      	itt	lt
 802c4fa:	238b      	movlt	r3, #139	@ 0x8b
 802c4fc:	602b      	strlt	r3, [r5, #0]
 802c4fe:	2c00      	cmp	r4, #0
 802c500:	d0e3      	beq.n	802c4ca <_vsnprintf_r+0x16>
 802c502:	9b00      	ldr	r3, [sp, #0]
 802c504:	2200      	movs	r2, #0
 802c506:	701a      	strb	r2, [r3, #0]
 802c508:	e7df      	b.n	802c4ca <_vsnprintf_r+0x16>
	...

0802c50c <vsnprintf>:
 802c50c:	b507      	push	{r0, r1, r2, lr}
 802c50e:	9300      	str	r3, [sp, #0]
 802c510:	4613      	mov	r3, r2
 802c512:	460a      	mov	r2, r1
 802c514:	4601      	mov	r1, r0
 802c516:	4803      	ldr	r0, [pc, #12]	@ (802c524 <vsnprintf+0x18>)
 802c518:	6800      	ldr	r0, [r0, #0]
 802c51a:	f7ff ffcb 	bl	802c4b4 <_vsnprintf_r>
 802c51e:	b003      	add	sp, #12
 802c520:	f85d fb04 	ldr.w	pc, [sp], #4
 802c524:	200002d8 	.word	0x200002d8

0802c528 <__sfvwrite_r>:
 802c528:	6893      	ldr	r3, [r2, #8]
 802c52a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c52e:	4606      	mov	r6, r0
 802c530:	460c      	mov	r4, r1
 802c532:	4691      	mov	r9, r2
 802c534:	b91b      	cbnz	r3, 802c53e <__sfvwrite_r+0x16>
 802c536:	2000      	movs	r0, #0
 802c538:	b003      	add	sp, #12
 802c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c53e:	898b      	ldrh	r3, [r1, #12]
 802c540:	0718      	lsls	r0, r3, #28
 802c542:	d550      	bpl.n	802c5e6 <__sfvwrite_r+0xbe>
 802c544:	690b      	ldr	r3, [r1, #16]
 802c546:	2b00      	cmp	r3, #0
 802c548:	d04d      	beq.n	802c5e6 <__sfvwrite_r+0xbe>
 802c54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c54e:	f8d9 8000 	ldr.w	r8, [r9]
 802c552:	f013 0702 	ands.w	r7, r3, #2
 802c556:	d16b      	bne.n	802c630 <__sfvwrite_r+0x108>
 802c558:	f013 0301 	ands.w	r3, r3, #1
 802c55c:	f000 809c 	beq.w	802c698 <__sfvwrite_r+0x170>
 802c560:	4638      	mov	r0, r7
 802c562:	46ba      	mov	sl, r7
 802c564:	46bb      	mov	fp, r7
 802c566:	f1bb 0f00 	cmp.w	fp, #0
 802c56a:	f000 8103 	beq.w	802c774 <__sfvwrite_r+0x24c>
 802c56e:	b950      	cbnz	r0, 802c586 <__sfvwrite_r+0x5e>
 802c570:	465a      	mov	r2, fp
 802c572:	210a      	movs	r1, #10
 802c574:	4650      	mov	r0, sl
 802c576:	f7e3 fe43 	bl	8010200 <memchr>
 802c57a:	2800      	cmp	r0, #0
 802c57c:	f000 8100 	beq.w	802c780 <__sfvwrite_r+0x258>
 802c580:	3001      	adds	r0, #1
 802c582:	eba0 070a 	sub.w	r7, r0, sl
 802c586:	6820      	ldr	r0, [r4, #0]
 802c588:	6921      	ldr	r1, [r4, #16]
 802c58a:	68a5      	ldr	r5, [r4, #8]
 802c58c:	6963      	ldr	r3, [r4, #20]
 802c58e:	455f      	cmp	r7, fp
 802c590:	463a      	mov	r2, r7
 802c592:	bf28      	it	cs
 802c594:	465a      	movcs	r2, fp
 802c596:	4288      	cmp	r0, r1
 802c598:	f240 80f5 	bls.w	802c786 <__sfvwrite_r+0x25e>
 802c59c:	441d      	add	r5, r3
 802c59e:	42aa      	cmp	r2, r5
 802c5a0:	f340 80f1 	ble.w	802c786 <__sfvwrite_r+0x25e>
 802c5a4:	4651      	mov	r1, sl
 802c5a6:	462a      	mov	r2, r5
 802c5a8:	f000 f9f8 	bl	802c99c <memmove>
 802c5ac:	6823      	ldr	r3, [r4, #0]
 802c5ae:	442b      	add	r3, r5
 802c5b0:	6023      	str	r3, [r4, #0]
 802c5b2:	4621      	mov	r1, r4
 802c5b4:	4630      	mov	r0, r6
 802c5b6:	f7ff fe23 	bl	802c200 <_fflush_r>
 802c5ba:	2800      	cmp	r0, #0
 802c5bc:	d167      	bne.n	802c68e <__sfvwrite_r+0x166>
 802c5be:	1b7f      	subs	r7, r7, r5
 802c5c0:	f040 80f9 	bne.w	802c7b6 <__sfvwrite_r+0x28e>
 802c5c4:	4621      	mov	r1, r4
 802c5c6:	4630      	mov	r0, r6
 802c5c8:	f7ff fe1a 	bl	802c200 <_fflush_r>
 802c5cc:	2800      	cmp	r0, #0
 802c5ce:	d15e      	bne.n	802c68e <__sfvwrite_r+0x166>
 802c5d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802c5d4:	1b5b      	subs	r3, r3, r5
 802c5d6:	44aa      	add	sl, r5
 802c5d8:	ebab 0b05 	sub.w	fp, fp, r5
 802c5dc:	f8c9 3008 	str.w	r3, [r9, #8]
 802c5e0:	2b00      	cmp	r3, #0
 802c5e2:	d1c0      	bne.n	802c566 <__sfvwrite_r+0x3e>
 802c5e4:	e7a7      	b.n	802c536 <__sfvwrite_r+0xe>
 802c5e6:	4621      	mov	r1, r4
 802c5e8:	4630      	mov	r0, r6
 802c5ea:	f000 f907 	bl	802c7fc <__swsetup_r>
 802c5ee:	2800      	cmp	r0, #0
 802c5f0:	d0ab      	beq.n	802c54a <__sfvwrite_r+0x22>
 802c5f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c5f6:	e79f      	b.n	802c538 <__sfvwrite_r+0x10>
 802c5f8:	e9d8 a500 	ldrd	sl, r5, [r8]
 802c5fc:	f108 0808 	add.w	r8, r8, #8
 802c600:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 802c604:	69e1      	ldr	r1, [r4, #28]
 802c606:	2d00      	cmp	r5, #0
 802c608:	d0f6      	beq.n	802c5f8 <__sfvwrite_r+0xd0>
 802c60a:	42bd      	cmp	r5, r7
 802c60c:	462b      	mov	r3, r5
 802c60e:	4652      	mov	r2, sl
 802c610:	bf28      	it	cs
 802c612:	463b      	movcs	r3, r7
 802c614:	4630      	mov	r0, r6
 802c616:	47d8      	blx	fp
 802c618:	2800      	cmp	r0, #0
 802c61a:	dd38      	ble.n	802c68e <__sfvwrite_r+0x166>
 802c61c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802c620:	1a1b      	subs	r3, r3, r0
 802c622:	4482      	add	sl, r0
 802c624:	1a2d      	subs	r5, r5, r0
 802c626:	f8c9 3008 	str.w	r3, [r9, #8]
 802c62a:	2b00      	cmp	r3, #0
 802c62c:	d1e8      	bne.n	802c600 <__sfvwrite_r+0xd8>
 802c62e:	e782      	b.n	802c536 <__sfvwrite_r+0xe>
 802c630:	f04f 0a00 	mov.w	sl, #0
 802c634:	4f61      	ldr	r7, [pc, #388]	@ (802c7bc <__sfvwrite_r+0x294>)
 802c636:	4655      	mov	r5, sl
 802c638:	e7e2      	b.n	802c600 <__sfvwrite_r+0xd8>
 802c63a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802c63e:	f108 0808 	add.w	r8, r8, #8
 802c642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c646:	6820      	ldr	r0, [r4, #0]
 802c648:	68a2      	ldr	r2, [r4, #8]
 802c64a:	f1ba 0f00 	cmp.w	sl, #0
 802c64e:	d0f4      	beq.n	802c63a <__sfvwrite_r+0x112>
 802c650:	0599      	lsls	r1, r3, #22
 802c652:	d563      	bpl.n	802c71c <__sfvwrite_r+0x1f4>
 802c654:	4552      	cmp	r2, sl
 802c656:	d836      	bhi.n	802c6c6 <__sfvwrite_r+0x19e>
 802c658:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802c65c:	d033      	beq.n	802c6c6 <__sfvwrite_r+0x19e>
 802c65e:	6921      	ldr	r1, [r4, #16]
 802c660:	6965      	ldr	r5, [r4, #20]
 802c662:	eba0 0b01 	sub.w	fp, r0, r1
 802c666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802c66a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802c66e:	f10b 0201 	add.w	r2, fp, #1
 802c672:	106d      	asrs	r5, r5, #1
 802c674:	4452      	add	r2, sl
 802c676:	4295      	cmp	r5, r2
 802c678:	bf38      	it	cc
 802c67a:	4615      	movcc	r5, r2
 802c67c:	055b      	lsls	r3, r3, #21
 802c67e:	d53d      	bpl.n	802c6fc <__sfvwrite_r+0x1d4>
 802c680:	4629      	mov	r1, r5
 802c682:	4630      	mov	r0, r6
 802c684:	f002 fbfa 	bl	802ee7c <_malloc_r>
 802c688:	b948      	cbnz	r0, 802c69e <__sfvwrite_r+0x176>
 802c68a:	230c      	movs	r3, #12
 802c68c:	6033      	str	r3, [r6, #0]
 802c68e:	89a3      	ldrh	r3, [r4, #12]
 802c690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c694:	81a3      	strh	r3, [r4, #12]
 802c696:	e7ac      	b.n	802c5f2 <__sfvwrite_r+0xca>
 802c698:	461f      	mov	r7, r3
 802c69a:	469a      	mov	sl, r3
 802c69c:	e7d1      	b.n	802c642 <__sfvwrite_r+0x11a>
 802c69e:	465a      	mov	r2, fp
 802c6a0:	6921      	ldr	r1, [r4, #16]
 802c6a2:	9001      	str	r0, [sp, #4]
 802c6a4:	f001 fbd0 	bl	802de48 <memcpy>
 802c6a8:	89a2      	ldrh	r2, [r4, #12]
 802c6aa:	9b01      	ldr	r3, [sp, #4]
 802c6ac:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802c6b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802c6b4:	81a2      	strh	r2, [r4, #12]
 802c6b6:	6123      	str	r3, [r4, #16]
 802c6b8:	6165      	str	r5, [r4, #20]
 802c6ba:	445b      	add	r3, fp
 802c6bc:	eba5 050b 	sub.w	r5, r5, fp
 802c6c0:	6023      	str	r3, [r4, #0]
 802c6c2:	4652      	mov	r2, sl
 802c6c4:	60a5      	str	r5, [r4, #8]
 802c6c6:	4552      	cmp	r2, sl
 802c6c8:	bf28      	it	cs
 802c6ca:	4652      	movcs	r2, sl
 802c6cc:	6820      	ldr	r0, [r4, #0]
 802c6ce:	9201      	str	r2, [sp, #4]
 802c6d0:	4639      	mov	r1, r7
 802c6d2:	f000 f963 	bl	802c99c <memmove>
 802c6d6:	68a3      	ldr	r3, [r4, #8]
 802c6d8:	9a01      	ldr	r2, [sp, #4]
 802c6da:	1a9b      	subs	r3, r3, r2
 802c6dc:	60a3      	str	r3, [r4, #8]
 802c6de:	6823      	ldr	r3, [r4, #0]
 802c6e0:	4413      	add	r3, r2
 802c6e2:	4655      	mov	r5, sl
 802c6e4:	6023      	str	r3, [r4, #0]
 802c6e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802c6ea:	1b5b      	subs	r3, r3, r5
 802c6ec:	442f      	add	r7, r5
 802c6ee:	ebaa 0a05 	sub.w	sl, sl, r5
 802c6f2:	f8c9 3008 	str.w	r3, [r9, #8]
 802c6f6:	2b00      	cmp	r3, #0
 802c6f8:	d1a3      	bne.n	802c642 <__sfvwrite_r+0x11a>
 802c6fa:	e71c      	b.n	802c536 <__sfvwrite_r+0xe>
 802c6fc:	462a      	mov	r2, r5
 802c6fe:	4630      	mov	r0, r6
 802c700:	f007 fbcc 	bl	8033e9c <_realloc_r>
 802c704:	4603      	mov	r3, r0
 802c706:	2800      	cmp	r0, #0
 802c708:	d1d5      	bne.n	802c6b6 <__sfvwrite_r+0x18e>
 802c70a:	6921      	ldr	r1, [r4, #16]
 802c70c:	4630      	mov	r0, r6
 802c70e:	f002 fa9d 	bl	802ec4c <_free_r>
 802c712:	89a3      	ldrh	r3, [r4, #12]
 802c714:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802c718:	81a3      	strh	r3, [r4, #12]
 802c71a:	e7b6      	b.n	802c68a <__sfvwrite_r+0x162>
 802c71c:	6923      	ldr	r3, [r4, #16]
 802c71e:	4283      	cmp	r3, r0
 802c720:	d302      	bcc.n	802c728 <__sfvwrite_r+0x200>
 802c722:	6961      	ldr	r1, [r4, #20]
 802c724:	4551      	cmp	r1, sl
 802c726:	d915      	bls.n	802c754 <__sfvwrite_r+0x22c>
 802c728:	4552      	cmp	r2, sl
 802c72a:	bf28      	it	cs
 802c72c:	4652      	movcs	r2, sl
 802c72e:	4639      	mov	r1, r7
 802c730:	4615      	mov	r5, r2
 802c732:	f000 f933 	bl	802c99c <memmove>
 802c736:	68a3      	ldr	r3, [r4, #8]
 802c738:	6822      	ldr	r2, [r4, #0]
 802c73a:	1b5b      	subs	r3, r3, r5
 802c73c:	442a      	add	r2, r5
 802c73e:	60a3      	str	r3, [r4, #8]
 802c740:	6022      	str	r2, [r4, #0]
 802c742:	2b00      	cmp	r3, #0
 802c744:	d1cf      	bne.n	802c6e6 <__sfvwrite_r+0x1be>
 802c746:	4621      	mov	r1, r4
 802c748:	4630      	mov	r0, r6
 802c74a:	f7ff fd59 	bl	802c200 <_fflush_r>
 802c74e:	2800      	cmp	r0, #0
 802c750:	d0c9      	beq.n	802c6e6 <__sfvwrite_r+0x1be>
 802c752:	e79c      	b.n	802c68e <__sfvwrite_r+0x166>
 802c754:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802c758:	4553      	cmp	r3, sl
 802c75a:	bf28      	it	cs
 802c75c:	4653      	movcs	r3, sl
 802c75e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802c760:	fb93 f3f1 	sdiv	r3, r3, r1
 802c764:	463a      	mov	r2, r7
 802c766:	434b      	muls	r3, r1
 802c768:	4630      	mov	r0, r6
 802c76a:	69e1      	ldr	r1, [r4, #28]
 802c76c:	47a8      	blx	r5
 802c76e:	1e05      	subs	r5, r0, #0
 802c770:	dcb9      	bgt.n	802c6e6 <__sfvwrite_r+0x1be>
 802c772:	e78c      	b.n	802c68e <__sfvwrite_r+0x166>
 802c774:	e9d8 ab00 	ldrd	sl, fp, [r8]
 802c778:	2000      	movs	r0, #0
 802c77a:	f108 0808 	add.w	r8, r8, #8
 802c77e:	e6f2      	b.n	802c566 <__sfvwrite_r+0x3e>
 802c780:	f10b 0701 	add.w	r7, fp, #1
 802c784:	e6ff      	b.n	802c586 <__sfvwrite_r+0x5e>
 802c786:	4293      	cmp	r3, r2
 802c788:	dc08      	bgt.n	802c79c <__sfvwrite_r+0x274>
 802c78a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802c78c:	69e1      	ldr	r1, [r4, #28]
 802c78e:	4652      	mov	r2, sl
 802c790:	4630      	mov	r0, r6
 802c792:	47a8      	blx	r5
 802c794:	1e05      	subs	r5, r0, #0
 802c796:	f73f af12 	bgt.w	802c5be <__sfvwrite_r+0x96>
 802c79a:	e778      	b.n	802c68e <__sfvwrite_r+0x166>
 802c79c:	4651      	mov	r1, sl
 802c79e:	9201      	str	r2, [sp, #4]
 802c7a0:	f000 f8fc 	bl	802c99c <memmove>
 802c7a4:	9a01      	ldr	r2, [sp, #4]
 802c7a6:	68a3      	ldr	r3, [r4, #8]
 802c7a8:	1a9b      	subs	r3, r3, r2
 802c7aa:	60a3      	str	r3, [r4, #8]
 802c7ac:	6823      	ldr	r3, [r4, #0]
 802c7ae:	4413      	add	r3, r2
 802c7b0:	6023      	str	r3, [r4, #0]
 802c7b2:	4615      	mov	r5, r2
 802c7b4:	e703      	b.n	802c5be <__sfvwrite_r+0x96>
 802c7b6:	2001      	movs	r0, #1
 802c7b8:	e70a      	b.n	802c5d0 <__sfvwrite_r+0xa8>
 802c7ba:	bf00      	nop
 802c7bc:	7ffffc00 	.word	0x7ffffc00

0802c7c0 <_fwalk_sglue>:
 802c7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c7c4:	4607      	mov	r7, r0
 802c7c6:	4688      	mov	r8, r1
 802c7c8:	4614      	mov	r4, r2
 802c7ca:	2600      	movs	r6, #0
 802c7cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802c7d0:	f1b9 0901 	subs.w	r9, r9, #1
 802c7d4:	d505      	bpl.n	802c7e2 <_fwalk_sglue+0x22>
 802c7d6:	6824      	ldr	r4, [r4, #0]
 802c7d8:	2c00      	cmp	r4, #0
 802c7da:	d1f7      	bne.n	802c7cc <_fwalk_sglue+0xc>
 802c7dc:	4630      	mov	r0, r6
 802c7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c7e2:	89ab      	ldrh	r3, [r5, #12]
 802c7e4:	2b01      	cmp	r3, #1
 802c7e6:	d907      	bls.n	802c7f8 <_fwalk_sglue+0x38>
 802c7e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c7ec:	3301      	adds	r3, #1
 802c7ee:	d003      	beq.n	802c7f8 <_fwalk_sglue+0x38>
 802c7f0:	4629      	mov	r1, r5
 802c7f2:	4638      	mov	r0, r7
 802c7f4:	47c0      	blx	r8
 802c7f6:	4306      	orrs	r6, r0
 802c7f8:	3568      	adds	r5, #104	@ 0x68
 802c7fa:	e7e9      	b.n	802c7d0 <_fwalk_sglue+0x10>

0802c7fc <__swsetup_r>:
 802c7fc:	b538      	push	{r3, r4, r5, lr}
 802c7fe:	4b29      	ldr	r3, [pc, #164]	@ (802c8a4 <__swsetup_r+0xa8>)
 802c800:	4605      	mov	r5, r0
 802c802:	6818      	ldr	r0, [r3, #0]
 802c804:	460c      	mov	r4, r1
 802c806:	b118      	cbz	r0, 802c810 <__swsetup_r+0x14>
 802c808:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c80a:	b90b      	cbnz	r3, 802c810 <__swsetup_r+0x14>
 802c80c:	f7ff fe3a 	bl	802c484 <__sinit>
 802c810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c814:	0719      	lsls	r1, r3, #28
 802c816:	d422      	bmi.n	802c85e <__swsetup_r+0x62>
 802c818:	06da      	lsls	r2, r3, #27
 802c81a:	d407      	bmi.n	802c82c <__swsetup_r+0x30>
 802c81c:	2209      	movs	r2, #9
 802c81e:	602a      	str	r2, [r5, #0]
 802c820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c824:	81a3      	strh	r3, [r4, #12]
 802c826:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c82a:	e033      	b.n	802c894 <__swsetup_r+0x98>
 802c82c:	0758      	lsls	r0, r3, #29
 802c82e:	d512      	bpl.n	802c856 <__swsetup_r+0x5a>
 802c830:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c832:	b141      	cbz	r1, 802c846 <__swsetup_r+0x4a>
 802c834:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802c838:	4299      	cmp	r1, r3
 802c83a:	d002      	beq.n	802c842 <__swsetup_r+0x46>
 802c83c:	4628      	mov	r0, r5
 802c83e:	f002 fa05 	bl	802ec4c <_free_r>
 802c842:	2300      	movs	r3, #0
 802c844:	6323      	str	r3, [r4, #48]	@ 0x30
 802c846:	89a3      	ldrh	r3, [r4, #12]
 802c848:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802c84c:	81a3      	strh	r3, [r4, #12]
 802c84e:	2300      	movs	r3, #0
 802c850:	6063      	str	r3, [r4, #4]
 802c852:	6923      	ldr	r3, [r4, #16]
 802c854:	6023      	str	r3, [r4, #0]
 802c856:	89a3      	ldrh	r3, [r4, #12]
 802c858:	f043 0308 	orr.w	r3, r3, #8
 802c85c:	81a3      	strh	r3, [r4, #12]
 802c85e:	6923      	ldr	r3, [r4, #16]
 802c860:	b94b      	cbnz	r3, 802c876 <__swsetup_r+0x7a>
 802c862:	89a3      	ldrh	r3, [r4, #12]
 802c864:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802c868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802c86c:	d003      	beq.n	802c876 <__swsetup_r+0x7a>
 802c86e:	4621      	mov	r1, r4
 802c870:	4628      	mov	r0, r5
 802c872:	f005 fc2b 	bl	80320cc <__smakebuf_r>
 802c876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c87a:	f013 0201 	ands.w	r2, r3, #1
 802c87e:	d00a      	beq.n	802c896 <__swsetup_r+0x9a>
 802c880:	2200      	movs	r2, #0
 802c882:	60a2      	str	r2, [r4, #8]
 802c884:	6962      	ldr	r2, [r4, #20]
 802c886:	4252      	negs	r2, r2
 802c888:	61a2      	str	r2, [r4, #24]
 802c88a:	6922      	ldr	r2, [r4, #16]
 802c88c:	b942      	cbnz	r2, 802c8a0 <__swsetup_r+0xa4>
 802c88e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802c892:	d1c5      	bne.n	802c820 <__swsetup_r+0x24>
 802c894:	bd38      	pop	{r3, r4, r5, pc}
 802c896:	0799      	lsls	r1, r3, #30
 802c898:	bf58      	it	pl
 802c89a:	6962      	ldrpl	r2, [r4, #20]
 802c89c:	60a2      	str	r2, [r4, #8]
 802c89e:	e7f4      	b.n	802c88a <__swsetup_r+0x8e>
 802c8a0:	2000      	movs	r0, #0
 802c8a2:	e7f7      	b.n	802c894 <__swsetup_r+0x98>
 802c8a4:	200002d8 	.word	0x200002d8

0802c8a8 <memcmp>:
 802c8a8:	b510      	push	{r4, lr}
 802c8aa:	3901      	subs	r1, #1
 802c8ac:	4402      	add	r2, r0
 802c8ae:	4290      	cmp	r0, r2
 802c8b0:	d101      	bne.n	802c8b6 <memcmp+0xe>
 802c8b2:	2000      	movs	r0, #0
 802c8b4:	e005      	b.n	802c8c2 <memcmp+0x1a>
 802c8b6:	7803      	ldrb	r3, [r0, #0]
 802c8b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802c8bc:	42a3      	cmp	r3, r4
 802c8be:	d001      	beq.n	802c8c4 <memcmp+0x1c>
 802c8c0:	1b18      	subs	r0, r3, r4
 802c8c2:	bd10      	pop	{r4, pc}
 802c8c4:	3001      	adds	r0, #1
 802c8c6:	e7f2      	b.n	802c8ae <memcmp+0x6>

0802c8c8 <__fputwc>:
 802c8c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c8cc:	4680      	mov	r8, r0
 802c8ce:	460f      	mov	r7, r1
 802c8d0:	4614      	mov	r4, r2
 802c8d2:	f001 fa05 	bl	802dce0 <__locale_mb_cur_max>
 802c8d6:	2801      	cmp	r0, #1
 802c8d8:	4605      	mov	r5, r0
 802c8da:	d11b      	bne.n	802c914 <__fputwc+0x4c>
 802c8dc:	1e7b      	subs	r3, r7, #1
 802c8de:	2bfe      	cmp	r3, #254	@ 0xfe
 802c8e0:	d818      	bhi.n	802c914 <__fputwc+0x4c>
 802c8e2:	f88d 7004 	strb.w	r7, [sp, #4]
 802c8e6:	2600      	movs	r6, #0
 802c8e8:	f10d 0904 	add.w	r9, sp, #4
 802c8ec:	42ae      	cmp	r6, r5
 802c8ee:	d021      	beq.n	802c934 <__fputwc+0x6c>
 802c8f0:	68a3      	ldr	r3, [r4, #8]
 802c8f2:	f816 1009 	ldrb.w	r1, [r6, r9]
 802c8f6:	3b01      	subs	r3, #1
 802c8f8:	2b00      	cmp	r3, #0
 802c8fa:	60a3      	str	r3, [r4, #8]
 802c8fc:	da04      	bge.n	802c908 <__fputwc+0x40>
 802c8fe:	69a2      	ldr	r2, [r4, #24]
 802c900:	4293      	cmp	r3, r2
 802c902:	db1b      	blt.n	802c93c <__fputwc+0x74>
 802c904:	290a      	cmp	r1, #10
 802c906:	d019      	beq.n	802c93c <__fputwc+0x74>
 802c908:	6823      	ldr	r3, [r4, #0]
 802c90a:	1c5a      	adds	r2, r3, #1
 802c90c:	6022      	str	r2, [r4, #0]
 802c90e:	7019      	strb	r1, [r3, #0]
 802c910:	3601      	adds	r6, #1
 802c912:	e7eb      	b.n	802c8ec <__fputwc+0x24>
 802c914:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 802c918:	463a      	mov	r2, r7
 802c91a:	a901      	add	r1, sp, #4
 802c91c:	4640      	mov	r0, r8
 802c91e:	f001 faa1 	bl	802de64 <_wcrtomb_r>
 802c922:	1c43      	adds	r3, r0, #1
 802c924:	4605      	mov	r5, r0
 802c926:	d1de      	bne.n	802c8e6 <__fputwc+0x1e>
 802c928:	89a3      	ldrh	r3, [r4, #12]
 802c92a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c92e:	81a3      	strh	r3, [r4, #12]
 802c930:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802c934:	4638      	mov	r0, r7
 802c936:	b003      	add	sp, #12
 802c938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c93c:	4622      	mov	r2, r4
 802c93e:	4640      	mov	r0, r8
 802c940:	f008 fb1d 	bl	8034f7e <__swbuf_r>
 802c944:	3001      	adds	r0, #1
 802c946:	d1e3      	bne.n	802c910 <__fputwc+0x48>
 802c948:	e7f2      	b.n	802c930 <__fputwc+0x68>

0802c94a <_fputwc_r>:
 802c94a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 802c94c:	07db      	lsls	r3, r3, #31
 802c94e:	b570      	push	{r4, r5, r6, lr}
 802c950:	4605      	mov	r5, r0
 802c952:	460e      	mov	r6, r1
 802c954:	4614      	mov	r4, r2
 802c956:	d405      	bmi.n	802c964 <_fputwc_r+0x1a>
 802c958:	8993      	ldrh	r3, [r2, #12]
 802c95a:	0598      	lsls	r0, r3, #22
 802c95c:	d402      	bmi.n	802c964 <_fputwc_r+0x1a>
 802c95e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 802c960:	f001 fa6f 	bl	802de42 <__retarget_lock_acquire_recursive>
 802c964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c968:	0499      	lsls	r1, r3, #18
 802c96a:	d406      	bmi.n	802c97a <_fputwc_r+0x30>
 802c96c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c970:	81a3      	strh	r3, [r4, #12]
 802c972:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c974:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c978:	6663      	str	r3, [r4, #100]	@ 0x64
 802c97a:	4622      	mov	r2, r4
 802c97c:	4628      	mov	r0, r5
 802c97e:	4631      	mov	r1, r6
 802c980:	f7ff ffa2 	bl	802c8c8 <__fputwc>
 802c984:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c986:	07da      	lsls	r2, r3, #31
 802c988:	4605      	mov	r5, r0
 802c98a:	d405      	bmi.n	802c998 <_fputwc_r+0x4e>
 802c98c:	89a3      	ldrh	r3, [r4, #12]
 802c98e:	059b      	lsls	r3, r3, #22
 802c990:	d402      	bmi.n	802c998 <_fputwc_r+0x4e>
 802c992:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c994:	f001 fa57 	bl	802de46 <__retarget_lock_release_recursive>
 802c998:	4628      	mov	r0, r5
 802c99a:	bd70      	pop	{r4, r5, r6, pc}

0802c99c <memmove>:
 802c99c:	4288      	cmp	r0, r1
 802c99e:	b510      	push	{r4, lr}
 802c9a0:	eb01 0402 	add.w	r4, r1, r2
 802c9a4:	d902      	bls.n	802c9ac <memmove+0x10>
 802c9a6:	4284      	cmp	r4, r0
 802c9a8:	4623      	mov	r3, r4
 802c9aa:	d807      	bhi.n	802c9bc <memmove+0x20>
 802c9ac:	1e43      	subs	r3, r0, #1
 802c9ae:	42a1      	cmp	r1, r4
 802c9b0:	d008      	beq.n	802c9c4 <memmove+0x28>
 802c9b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c9b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c9ba:	e7f8      	b.n	802c9ae <memmove+0x12>
 802c9bc:	4402      	add	r2, r0
 802c9be:	4601      	mov	r1, r0
 802c9c0:	428a      	cmp	r2, r1
 802c9c2:	d100      	bne.n	802c9c6 <memmove+0x2a>
 802c9c4:	bd10      	pop	{r4, pc}
 802c9c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c9ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802c9ce:	e7f7      	b.n	802c9c0 <memmove+0x24>

0802c9d0 <memset>:
 802c9d0:	4402      	add	r2, r0
 802c9d2:	4603      	mov	r3, r0
 802c9d4:	4293      	cmp	r3, r2
 802c9d6:	d100      	bne.n	802c9da <memset+0xa>
 802c9d8:	4770      	bx	lr
 802c9da:	f803 1b01 	strb.w	r1, [r3], #1
 802c9de:	e7f9      	b.n	802c9d4 <memset+0x4>

0802c9e0 <strcat>:
 802c9e0:	b510      	push	{r4, lr}
 802c9e2:	4602      	mov	r2, r0
 802c9e4:	7814      	ldrb	r4, [r2, #0]
 802c9e6:	4613      	mov	r3, r2
 802c9e8:	3201      	adds	r2, #1
 802c9ea:	2c00      	cmp	r4, #0
 802c9ec:	d1fa      	bne.n	802c9e4 <strcat+0x4>
 802c9ee:	3b01      	subs	r3, #1
 802c9f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c9f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c9f8:	2a00      	cmp	r2, #0
 802c9fa:	d1f9      	bne.n	802c9f0 <strcat+0x10>
 802c9fc:	bd10      	pop	{r4, pc}

0802c9fe <strchr>:
 802c9fe:	b2c9      	uxtb	r1, r1
 802ca00:	4603      	mov	r3, r0
 802ca02:	4618      	mov	r0, r3
 802ca04:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ca08:	b112      	cbz	r2, 802ca10 <strchr+0x12>
 802ca0a:	428a      	cmp	r2, r1
 802ca0c:	d1f9      	bne.n	802ca02 <strchr+0x4>
 802ca0e:	4770      	bx	lr
 802ca10:	2900      	cmp	r1, #0
 802ca12:	bf18      	it	ne
 802ca14:	2000      	movne	r0, #0
 802ca16:	4770      	bx	lr

0802ca18 <strcspn>:
 802ca18:	b570      	push	{r4, r5, r6, lr}
 802ca1a:	4603      	mov	r3, r0
 802ca1c:	461e      	mov	r6, r3
 802ca1e:	f813 4b01 	ldrb.w	r4, [r3], #1
 802ca22:	b144      	cbz	r4, 802ca36 <strcspn+0x1e>
 802ca24:	1e4a      	subs	r2, r1, #1
 802ca26:	e001      	b.n	802ca2c <strcspn+0x14>
 802ca28:	42a5      	cmp	r5, r4
 802ca2a:	d004      	beq.n	802ca36 <strcspn+0x1e>
 802ca2c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802ca30:	2d00      	cmp	r5, #0
 802ca32:	d1f9      	bne.n	802ca28 <strcspn+0x10>
 802ca34:	e7f2      	b.n	802ca1c <strcspn+0x4>
 802ca36:	1a30      	subs	r0, r6, r0
 802ca38:	bd70      	pop	{r4, r5, r6, pc}

0802ca3a <strncmp>:
 802ca3a:	b510      	push	{r4, lr}
 802ca3c:	b16a      	cbz	r2, 802ca5a <strncmp+0x20>
 802ca3e:	3901      	subs	r1, #1
 802ca40:	1884      	adds	r4, r0, r2
 802ca42:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ca46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802ca4a:	429a      	cmp	r2, r3
 802ca4c:	d103      	bne.n	802ca56 <strncmp+0x1c>
 802ca4e:	42a0      	cmp	r0, r4
 802ca50:	d001      	beq.n	802ca56 <strncmp+0x1c>
 802ca52:	2a00      	cmp	r2, #0
 802ca54:	d1f5      	bne.n	802ca42 <strncmp+0x8>
 802ca56:	1ad0      	subs	r0, r2, r3
 802ca58:	bd10      	pop	{r4, pc}
 802ca5a:	4610      	mov	r0, r2
 802ca5c:	e7fc      	b.n	802ca58 <strncmp+0x1e>

0802ca5e <strncpy>:
 802ca5e:	b510      	push	{r4, lr}
 802ca60:	3901      	subs	r1, #1
 802ca62:	4603      	mov	r3, r0
 802ca64:	b132      	cbz	r2, 802ca74 <strncpy+0x16>
 802ca66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802ca6a:	f803 4b01 	strb.w	r4, [r3], #1
 802ca6e:	3a01      	subs	r2, #1
 802ca70:	2c00      	cmp	r4, #0
 802ca72:	d1f7      	bne.n	802ca64 <strncpy+0x6>
 802ca74:	441a      	add	r2, r3
 802ca76:	2100      	movs	r1, #0
 802ca78:	4293      	cmp	r3, r2
 802ca7a:	d100      	bne.n	802ca7e <strncpy+0x20>
 802ca7c:	bd10      	pop	{r4, pc}
 802ca7e:	f803 1b01 	strb.w	r1, [r3], #1
 802ca82:	e7f9      	b.n	802ca78 <strncpy+0x1a>

0802ca84 <strrchr>:
 802ca84:	b538      	push	{r3, r4, r5, lr}
 802ca86:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802ca8a:	4603      	mov	r3, r0
 802ca8c:	d10e      	bne.n	802caac <strrchr+0x28>
 802ca8e:	4621      	mov	r1, r4
 802ca90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ca94:	f7ff bfb3 	b.w	802c9fe <strchr>
 802ca98:	1c43      	adds	r3, r0, #1
 802ca9a:	4605      	mov	r5, r0
 802ca9c:	4621      	mov	r1, r4
 802ca9e:	4618      	mov	r0, r3
 802caa0:	f7ff ffad 	bl	802c9fe <strchr>
 802caa4:	2800      	cmp	r0, #0
 802caa6:	d1f7      	bne.n	802ca98 <strrchr+0x14>
 802caa8:	4628      	mov	r0, r5
 802caaa:	bd38      	pop	{r3, r4, r5, pc}
 802caac:	2500      	movs	r5, #0
 802caae:	e7f5      	b.n	802ca9c <strrchr+0x18>

0802cab0 <strspn>:
 802cab0:	b570      	push	{r4, r5, r6, lr}
 802cab2:	4603      	mov	r3, r0
 802cab4:	461e      	mov	r6, r3
 802cab6:	f813 4b01 	ldrb.w	r4, [r3], #1
 802caba:	b13c      	cbz	r4, 802cacc <strspn+0x1c>
 802cabc:	1e4a      	subs	r2, r1, #1
 802cabe:	e001      	b.n	802cac4 <strspn+0x14>
 802cac0:	42a5      	cmp	r5, r4
 802cac2:	d0f7      	beq.n	802cab4 <strspn+0x4>
 802cac4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802cac8:	2d00      	cmp	r5, #0
 802caca:	d1f9      	bne.n	802cac0 <strspn+0x10>
 802cacc:	1a30      	subs	r0, r6, r0
 802cace:	bd70      	pop	{r4, r5, r6, pc}

0802cad0 <strstr>:
 802cad0:	780a      	ldrb	r2, [r1, #0]
 802cad2:	b570      	push	{r4, r5, r6, lr}
 802cad4:	b96a      	cbnz	r2, 802caf2 <strstr+0x22>
 802cad6:	bd70      	pop	{r4, r5, r6, pc}
 802cad8:	429a      	cmp	r2, r3
 802cada:	d109      	bne.n	802caf0 <strstr+0x20>
 802cadc:	460c      	mov	r4, r1
 802cade:	4605      	mov	r5, r0
 802cae0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802cae4:	2b00      	cmp	r3, #0
 802cae6:	d0f6      	beq.n	802cad6 <strstr+0x6>
 802cae8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802caec:	429e      	cmp	r6, r3
 802caee:	d0f7      	beq.n	802cae0 <strstr+0x10>
 802caf0:	3001      	adds	r0, #1
 802caf2:	7803      	ldrb	r3, [r0, #0]
 802caf4:	2b00      	cmp	r3, #0
 802caf6:	d1ef      	bne.n	802cad8 <strstr+0x8>
 802caf8:	4618      	mov	r0, r3
 802cafa:	e7ec      	b.n	802cad6 <strstr+0x6>

0802cafc <localtime_r>:
 802cafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cb00:	460c      	mov	r4, r1
 802cb02:	4680      	mov	r8, r0
 802cb04:	f008 fab6 	bl	8035074 <__gettzinfo>
 802cb08:	4621      	mov	r1, r4
 802cb0a:	4605      	mov	r5, r0
 802cb0c:	4640      	mov	r0, r8
 802cb0e:	f008 fab5 	bl	803507c <gmtime_r>
 802cb12:	6943      	ldr	r3, [r0, #20]
 802cb14:	0799      	lsls	r1, r3, #30
 802cb16:	4604      	mov	r4, r0
 802cb18:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 802cb1c:	d106      	bne.n	802cb2c <localtime_r+0x30>
 802cb1e:	2264      	movs	r2, #100	@ 0x64
 802cb20:	fb97 f3f2 	sdiv	r3, r7, r2
 802cb24:	fb02 7313 	mls	r3, r2, r3, r7
 802cb28:	2b00      	cmp	r3, #0
 802cb2a:	d170      	bne.n	802cc0e <localtime_r+0x112>
 802cb2c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cb30:	fb97 f3f2 	sdiv	r3, r7, r2
 802cb34:	fb02 7313 	mls	r3, r2, r3, r7
 802cb38:	fab3 f383 	clz	r3, r3
 802cb3c:	095b      	lsrs	r3, r3, #5
 802cb3e:	4e64      	ldr	r6, [pc, #400]	@ (802ccd0 <localtime_r+0x1d4>)
 802cb40:	2230      	movs	r2, #48	@ 0x30
 802cb42:	fb02 6603 	mla	r6, r2, r3, r6
 802cb46:	f000 fe97 	bl	802d878 <__tz_lock>
 802cb4a:	f000 fea1 	bl	802d890 <_tzset_unlocked>
 802cb4e:	4b61      	ldr	r3, [pc, #388]	@ (802ccd4 <localtime_r+0x1d8>)
 802cb50:	681b      	ldr	r3, [r3, #0]
 802cb52:	2b00      	cmp	r3, #0
 802cb54:	d06a      	beq.n	802cc2c <localtime_r+0x130>
 802cb56:	686b      	ldr	r3, [r5, #4]
 802cb58:	42bb      	cmp	r3, r7
 802cb5a:	d15a      	bne.n	802cc12 <localtime_r+0x116>
 802cb5c:	682f      	ldr	r7, [r5, #0]
 802cb5e:	e9d8 2300 	ldrd	r2, r3, [r8]
 802cb62:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802cb66:	2f00      	cmp	r7, #0
 802cb68:	d15b      	bne.n	802cc22 <localtime_r+0x126>
 802cb6a:	4282      	cmp	r2, r0
 802cb6c:	eb73 0101 	sbcs.w	r1, r3, r1
 802cb70:	db5e      	blt.n	802cc30 <localtime_r+0x134>
 802cb72:	2301      	movs	r3, #1
 802cb74:	6223      	str	r3, [r4, #32]
 802cb76:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802cb78:	6861      	ldr	r1, [r4, #4]
 802cb7a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802cb7e:	fb93 f0f2 	sdiv	r0, r3, r2
 802cb82:	fb02 3310 	mls	r3, r2, r0, r3
 802cb86:	223c      	movs	r2, #60	@ 0x3c
 802cb88:	fb93 f5f2 	sdiv	r5, r3, r2
 802cb8c:	fb02 3215 	mls	r2, r2, r5, r3
 802cb90:	6823      	ldr	r3, [r4, #0]
 802cb92:	1a9b      	subs	r3, r3, r2
 802cb94:	68a2      	ldr	r2, [r4, #8]
 802cb96:	6023      	str	r3, [r4, #0]
 802cb98:	1b49      	subs	r1, r1, r5
 802cb9a:	1a12      	subs	r2, r2, r0
 802cb9c:	2b3b      	cmp	r3, #59	@ 0x3b
 802cb9e:	6061      	str	r1, [r4, #4]
 802cba0:	60a2      	str	r2, [r4, #8]
 802cba2:	dd51      	ble.n	802cc48 <localtime_r+0x14c>
 802cba4:	3101      	adds	r1, #1
 802cba6:	6061      	str	r1, [r4, #4]
 802cba8:	3b3c      	subs	r3, #60	@ 0x3c
 802cbaa:	6023      	str	r3, [r4, #0]
 802cbac:	6863      	ldr	r3, [r4, #4]
 802cbae:	2b3b      	cmp	r3, #59	@ 0x3b
 802cbb0:	dd50      	ble.n	802cc54 <localtime_r+0x158>
 802cbb2:	3201      	adds	r2, #1
 802cbb4:	60a2      	str	r2, [r4, #8]
 802cbb6:	3b3c      	subs	r3, #60	@ 0x3c
 802cbb8:	6063      	str	r3, [r4, #4]
 802cbba:	68a3      	ldr	r3, [r4, #8]
 802cbbc:	2b17      	cmp	r3, #23
 802cbbe:	dd4f      	ble.n	802cc60 <localtime_r+0x164>
 802cbc0:	69e2      	ldr	r2, [r4, #28]
 802cbc2:	3201      	adds	r2, #1
 802cbc4:	61e2      	str	r2, [r4, #28]
 802cbc6:	69a2      	ldr	r2, [r4, #24]
 802cbc8:	3201      	adds	r2, #1
 802cbca:	2a07      	cmp	r2, #7
 802cbcc:	bfa8      	it	ge
 802cbce:	2200      	movge	r2, #0
 802cbd0:	61a2      	str	r2, [r4, #24]
 802cbd2:	68e2      	ldr	r2, [r4, #12]
 802cbd4:	3b18      	subs	r3, #24
 802cbd6:	3201      	adds	r2, #1
 802cbd8:	60a3      	str	r3, [r4, #8]
 802cbda:	6923      	ldr	r3, [r4, #16]
 802cbdc:	60e2      	str	r2, [r4, #12]
 802cbde:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802cbe2:	428a      	cmp	r2, r1
 802cbe4:	dd0e      	ble.n	802cc04 <localtime_r+0x108>
 802cbe6:	2b0b      	cmp	r3, #11
 802cbe8:	eba2 0201 	sub.w	r2, r2, r1
 802cbec:	60e2      	str	r2, [r4, #12]
 802cbee:	f103 0201 	add.w	r2, r3, #1
 802cbf2:	bf09      	itett	eq
 802cbf4:	6963      	ldreq	r3, [r4, #20]
 802cbf6:	6122      	strne	r2, [r4, #16]
 802cbf8:	2200      	moveq	r2, #0
 802cbfa:	3301      	addeq	r3, #1
 802cbfc:	bf02      	ittt	eq
 802cbfe:	6122      	streq	r2, [r4, #16]
 802cc00:	6163      	streq	r3, [r4, #20]
 802cc02:	61e2      	streq	r2, [r4, #28]
 802cc04:	f000 fe3e 	bl	802d884 <__tz_unlock>
 802cc08:	4620      	mov	r0, r4
 802cc0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cc0e:	2301      	movs	r3, #1
 802cc10:	e795      	b.n	802cb3e <localtime_r+0x42>
 802cc12:	4638      	mov	r0, r7
 802cc14:	f000 fd86 	bl	802d724 <__tzcalc_limits>
 802cc18:	2800      	cmp	r0, #0
 802cc1a:	d19f      	bne.n	802cb5c <localtime_r+0x60>
 802cc1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802cc20:	e004      	b.n	802cc2c <localtime_r+0x130>
 802cc22:	4282      	cmp	r2, r0
 802cc24:	eb73 0101 	sbcs.w	r1, r3, r1
 802cc28:	da02      	bge.n	802cc30 <localtime_r+0x134>
 802cc2a:	2300      	movs	r3, #0
 802cc2c:	6223      	str	r3, [r4, #32]
 802cc2e:	e009      	b.n	802cc44 <localtime_r+0x148>
 802cc30:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802cc34:	4282      	cmp	r2, r0
 802cc36:	418b      	sbcs	r3, r1
 802cc38:	bfb4      	ite	lt
 802cc3a:	2301      	movlt	r3, #1
 802cc3c:	2300      	movge	r3, #0
 802cc3e:	6223      	str	r3, [r4, #32]
 802cc40:	2b00      	cmp	r3, #0
 802cc42:	d198      	bne.n	802cb76 <localtime_r+0x7a>
 802cc44:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802cc46:	e797      	b.n	802cb78 <localtime_r+0x7c>
 802cc48:	2b00      	cmp	r3, #0
 802cc4a:	daaf      	bge.n	802cbac <localtime_r+0xb0>
 802cc4c:	3901      	subs	r1, #1
 802cc4e:	6061      	str	r1, [r4, #4]
 802cc50:	333c      	adds	r3, #60	@ 0x3c
 802cc52:	e7aa      	b.n	802cbaa <localtime_r+0xae>
 802cc54:	2b00      	cmp	r3, #0
 802cc56:	dab0      	bge.n	802cbba <localtime_r+0xbe>
 802cc58:	3a01      	subs	r2, #1
 802cc5a:	60a2      	str	r2, [r4, #8]
 802cc5c:	333c      	adds	r3, #60	@ 0x3c
 802cc5e:	e7ab      	b.n	802cbb8 <localtime_r+0xbc>
 802cc60:	2b00      	cmp	r3, #0
 802cc62:	dacf      	bge.n	802cc04 <localtime_r+0x108>
 802cc64:	69e2      	ldr	r2, [r4, #28]
 802cc66:	3a01      	subs	r2, #1
 802cc68:	61e2      	str	r2, [r4, #28]
 802cc6a:	69a2      	ldr	r2, [r4, #24]
 802cc6c:	3a01      	subs	r2, #1
 802cc6e:	bf48      	it	mi
 802cc70:	2206      	movmi	r2, #6
 802cc72:	61a2      	str	r2, [r4, #24]
 802cc74:	68e2      	ldr	r2, [r4, #12]
 802cc76:	3318      	adds	r3, #24
 802cc78:	3a01      	subs	r2, #1
 802cc7a:	60e2      	str	r2, [r4, #12]
 802cc7c:	60a3      	str	r3, [r4, #8]
 802cc7e:	2a00      	cmp	r2, #0
 802cc80:	d1c0      	bne.n	802cc04 <localtime_r+0x108>
 802cc82:	6923      	ldr	r3, [r4, #16]
 802cc84:	3b01      	subs	r3, #1
 802cc86:	d405      	bmi.n	802cc94 <localtime_r+0x198>
 802cc88:	6123      	str	r3, [r4, #16]
 802cc8a:	6923      	ldr	r3, [r4, #16]
 802cc8c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802cc90:	60e3      	str	r3, [r4, #12]
 802cc92:	e7b7      	b.n	802cc04 <localtime_r+0x108>
 802cc94:	230b      	movs	r3, #11
 802cc96:	6123      	str	r3, [r4, #16]
 802cc98:	6963      	ldr	r3, [r4, #20]
 802cc9a:	1e5a      	subs	r2, r3, #1
 802cc9c:	6162      	str	r2, [r4, #20]
 802cc9e:	0792      	lsls	r2, r2, #30
 802cca0:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802cca4:	d105      	bne.n	802ccb2 <localtime_r+0x1b6>
 802cca6:	2164      	movs	r1, #100	@ 0x64
 802cca8:	fb93 f2f1 	sdiv	r2, r3, r1
 802ccac:	fb01 3212 	mls	r2, r1, r2, r3
 802ccb0:	b962      	cbnz	r2, 802cccc <localtime_r+0x1d0>
 802ccb2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802ccb6:	fb93 f1f2 	sdiv	r1, r3, r2
 802ccba:	fb02 3311 	mls	r3, r2, r1, r3
 802ccbe:	fab3 f383 	clz	r3, r3
 802ccc2:	095b      	lsrs	r3, r3, #5
 802ccc4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802ccc8:	61e3      	str	r3, [r4, #28]
 802ccca:	e7de      	b.n	802cc8a <localtime_r+0x18e>
 802cccc:	2301      	movs	r3, #1
 802ccce:	e7f9      	b.n	802ccc4 <localtime_r+0x1c8>
 802ccd0:	0803bd34 	.word	0x0803bd34
 802ccd4:	2001a040 	.word	0x2001a040

0802ccd8 <iso_year_adjust>:
 802ccd8:	6942      	ldr	r2, [r0, #20]
 802ccda:	2a00      	cmp	r2, #0
 802ccdc:	f240 736c 	movw	r3, #1900	@ 0x76c
 802cce0:	bfa8      	it	ge
 802cce2:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 802cce6:	4413      	add	r3, r2
 802cce8:	0792      	lsls	r2, r2, #30
 802ccea:	d105      	bne.n	802ccf8 <iso_year_adjust+0x20>
 802ccec:	2164      	movs	r1, #100	@ 0x64
 802ccee:	fb93 f2f1 	sdiv	r2, r3, r1
 802ccf2:	fb01 3212 	mls	r2, r1, r2, r3
 802ccf6:	b9ca      	cbnz	r2, 802cd2c <iso_year_adjust+0x54>
 802ccf8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802ccfc:	fb93 f1f2 	sdiv	r1, r3, r2
 802cd00:	fb02 3311 	mls	r3, r2, r1, r3
 802cd04:	fab3 f383 	clz	r3, r3
 802cd08:	095b      	lsrs	r3, r3, #5
 802cd0a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802cd0e:	0040      	lsls	r0, r0, #1
 802cd10:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802cd14:	4418      	add	r0, r3
 802cd16:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 802cd1a:	4298      	cmp	r0, r3
 802cd1c:	d027      	beq.n	802cd6e <iso_year_adjust+0x96>
 802cd1e:	dc11      	bgt.n	802cd44 <iso_year_adjust+0x6c>
 802cd20:	2801      	cmp	r0, #1
 802cd22:	dc0a      	bgt.n	802cd3a <iso_year_adjust+0x62>
 802cd24:	43c0      	mvns	r0, r0
 802cd26:	0fc0      	lsrs	r0, r0, #31
 802cd28:	4240      	negs	r0, r0
 802cd2a:	4770      	bx	lr
 802cd2c:	2301      	movs	r3, #1
 802cd2e:	e7ec      	b.n	802cd0a <iso_year_adjust+0x32>
 802cd30:	4b10      	ldr	r3, [pc, #64]	@ (802cd74 <iso_year_adjust+0x9c>)
 802cd32:	40c3      	lsrs	r3, r0
 802cd34:	f343 0000 	sbfx	r0, r3, #0, #1
 802cd38:	4770      	bx	lr
 802cd3a:	380a      	subs	r0, #10
 802cd3c:	2817      	cmp	r0, #23
 802cd3e:	d9f7      	bls.n	802cd30 <iso_year_adjust+0x58>
 802cd40:	2000      	movs	r0, #0
 802cd42:	4770      	bx	lr
 802cd44:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 802cd48:	4298      	cmp	r0, r3
 802cd4a:	dc06      	bgt.n	802cd5a <iso_year_adjust+0x82>
 802cd4c:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 802cd50:	4298      	cmp	r0, r3
 802cd52:	bfd4      	ite	le
 802cd54:	2000      	movle	r0, #0
 802cd56:	2001      	movgt	r0, #1
 802cd58:	4770      	bx	lr
 802cd5a:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 802cd5e:	3802      	subs	r0, #2
 802cd60:	2815      	cmp	r0, #21
 802cd62:	d8ed      	bhi.n	802cd40 <iso_year_adjust+0x68>
 802cd64:	4b04      	ldr	r3, [pc, #16]	@ (802cd78 <iso_year_adjust+0xa0>)
 802cd66:	40c3      	lsrs	r3, r0
 802cd68:	f003 0001 	and.w	r0, r3, #1
 802cd6c:	4770      	bx	lr
 802cd6e:	2001      	movs	r0, #1
 802cd70:	4770      	bx	lr
 802cd72:	bf00      	nop
 802cd74:	00cc00cf 	.word	0x00cc00cf
 802cd78:	002a001f 	.word	0x002a001f

0802cd7c <__strftime.isra.0>:
 802cd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cd80:	b08f      	sub	sp, #60	@ 0x3c
 802cd82:	461e      	mov	r6, r3
 802cd84:	2300      	movs	r3, #0
 802cd86:	4607      	mov	r7, r0
 802cd88:	460d      	mov	r5, r1
 802cd8a:	9302      	str	r3, [sp, #8]
 802cd8c:	461c      	mov	r4, r3
 802cd8e:	7813      	ldrb	r3, [r2, #0]
 802cd90:	2b00      	cmp	r3, #0
 802cd92:	f000 84ae 	beq.w	802d6f2 <__strftime.isra.0+0x976>
 802cd96:	2b25      	cmp	r3, #37	@ 0x25
 802cd98:	d11f      	bne.n	802cdda <__strftime.isra.0+0x5e>
 802cd9a:	f892 9001 	ldrb.w	r9, [r2, #1]
 802cd9e:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 802cda2:	d024      	beq.n	802cdee <__strftime.isra.0+0x72>
 802cda4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802cda8:	d021      	beq.n	802cdee <__strftime.isra.0+0x72>
 802cdaa:	f102 0801 	add.w	r8, r2, #1
 802cdae:	f04f 0900 	mov.w	r9, #0
 802cdb2:	f898 2000 	ldrb.w	r2, [r8]
 802cdb6:	3a31      	subs	r2, #49	@ 0x31
 802cdb8:	2a08      	cmp	r2, #8
 802cdba:	d81b      	bhi.n	802cdf4 <__strftime.isra.0+0x78>
 802cdbc:	220a      	movs	r2, #10
 802cdbe:	4640      	mov	r0, r8
 802cdc0:	a906      	add	r1, sp, #24
 802cdc2:	f008 f88b 	bl	8034edc <strtoul>
 802cdc6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802cdca:	4602      	mov	r2, r0
 802cdcc:	f898 1000 	ldrb.w	r1, [r8]
 802cdd0:	2945      	cmp	r1, #69	@ 0x45
 802cdd2:	d111      	bne.n	802cdf8 <__strftime.isra.0+0x7c>
 802cdd4:	f108 0801 	add.w	r8, r8, #1
 802cdd8:	e010      	b.n	802cdfc <__strftime.isra.0+0x80>
 802cdda:	1e69      	subs	r1, r5, #1
 802cddc:	42a1      	cmp	r1, r4
 802cdde:	f240 815d 	bls.w	802d09c <__strftime.isra.0+0x320>
 802cde2:	553b      	strb	r3, [r7, r4]
 802cde4:	3201      	adds	r2, #1
 802cde6:	f104 0a01 	add.w	sl, r4, #1
 802cdea:	4654      	mov	r4, sl
 802cdec:	e7cf      	b.n	802cd8e <__strftime.isra.0+0x12>
 802cdee:	f102 0802 	add.w	r8, r2, #2
 802cdf2:	e7de      	b.n	802cdb2 <__strftime.isra.0+0x36>
 802cdf4:	2200      	movs	r2, #0
 802cdf6:	e7e9      	b.n	802cdcc <__strftime.isra.0+0x50>
 802cdf8:	294f      	cmp	r1, #79	@ 0x4f
 802cdfa:	d0eb      	beq.n	802cdd4 <__strftime.isra.0+0x58>
 802cdfc:	f898 0000 	ldrb.w	r0, [r8]
 802ce00:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 802ce04:	2955      	cmp	r1, #85	@ 0x55
 802ce06:	f200 8149 	bhi.w	802d09c <__strftime.isra.0+0x320>
 802ce0a:	e8df f011 	tbh	[pc, r1, lsl #1]
 802ce0e:	046a      	.short	0x046a
 802ce10:	01470147 	.word	0x01470147
 802ce14:	01470147 	.word	0x01470147
 802ce18:	01470147 	.word	0x01470147
 802ce1c:	01470147 	.word	0x01470147
 802ce20:	01470147 	.word	0x01470147
 802ce24:	01470147 	.word	0x01470147
 802ce28:	01470147 	.word	0x01470147
 802ce2c:	01470147 	.word	0x01470147
 802ce30:	01470147 	.word	0x01470147
 802ce34:	01470147 	.word	0x01470147
 802ce38:	01470147 	.word	0x01470147
 802ce3c:	01470147 	.word	0x01470147
 802ce40:	01470147 	.word	0x01470147
 802ce44:	00750147 	.word	0x00750147
 802ce48:	00dc00a3 	.word	0x00dc00a3
 802ce4c:	01470128 	.word	0x01470128
 802ce50:	01cb0159 	.word	0x01cb0159
 802ce54:	02590252 	.word	0x02590252
 802ce58:	01470147 	.word	0x01470147
 802ce5c:	02710147 	.word	0x02710147
 802ce60:	01470147 	.word	0x01470147
 802ce64:	0147027c 	.word	0x0147027c
 802ce68:	033402ac 	.word	0x033402ac
 802ce6c:	036a033e 	.word	0x036a033e
 802ce70:	03d80372 	.word	0x03d80372
 802ce74:	03ee00d8 	.word	0x03ee00d8
 802ce78:	01470440 	.word	0x01470440
 802ce7c:	01470147 	.word	0x01470147
 802ce80:	01470147 	.word	0x01470147
 802ce84:	00560147 	.word	0x00560147
 802ce88:	00ba008d 	.word	0x00ba008d
 802ce8c:	011d011d 	.word	0x011d011d
 802ce90:	017e0147 	.word	0x017e0147
 802ce94:	0147008d 	.word	0x0147008d
 802ce98:	0252026a 	.word	0x0252026a
 802ce9c:	026e0259 	.word	0x026e0259
 802cea0:	01470273 	.word	0x01470273
 802cea4:	02a5027c 	.word	0x02a5027c
 802cea8:	02b500d0 	.word	0x02b500d0
 802ceac:	035d0336 	.word	0x035d0336
 802ceb0:	03cf03a4 	.word	0x03cf03a4
 802ceb4:	03e000d4 	.word	0x03e000d4
 802ceb8:	0403      	.short	0x0403
 802ceba:	69b3      	ldr	r3, [r6, #24]
 802cebc:	4aad      	ldr	r2, [pc, #692]	@ (802d174 <__strftime.isra.0+0x3f8>)
 802cebe:	3318      	adds	r3, #24
 802cec0:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802cec4:	4658      	mov	r0, fp
 802cec6:	f7e3 f9eb 	bl	80102a0 <strlen>
 802ceca:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802cece:	eb04 0a00 	add.w	sl, r4, r0
 802ced2:	1e6b      	subs	r3, r5, #1
 802ced4:	45a2      	cmp	sl, r4
 802ced6:	d107      	bne.n	802cee8 <__strftime.isra.0+0x16c>
 802ced8:	f898 3000 	ldrb.w	r3, [r8]
 802cedc:	2b00      	cmp	r3, #0
 802cede:	f000 8409 	beq.w	802d6f4 <__strftime.isra.0+0x978>
 802cee2:	f108 0201 	add.w	r2, r8, #1
 802cee6:	e780      	b.n	802cdea <__strftime.isra.0+0x6e>
 802cee8:	42a3      	cmp	r3, r4
 802ceea:	f240 80d7 	bls.w	802d09c <__strftime.isra.0+0x320>
 802ceee:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802cef2:	553a      	strb	r2, [r7, r4]
 802cef4:	3401      	adds	r4, #1
 802cef6:	e7ed      	b.n	802ced4 <__strftime.isra.0+0x158>
 802cef8:	69b2      	ldr	r2, [r6, #24]
 802cefa:	4b9e      	ldr	r3, [pc, #632]	@ (802d174 <__strftime.isra.0+0x3f8>)
 802cefc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802cf00:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802cf04:	4658      	mov	r0, fp
 802cf06:	f7e3 f9cb 	bl	80102a0 <strlen>
 802cf0a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802cf0e:	eb04 0a00 	add.w	sl, r4, r0
 802cf12:	1e6b      	subs	r3, r5, #1
 802cf14:	4554      	cmp	r4, sl
 802cf16:	d0df      	beq.n	802ced8 <__strftime.isra.0+0x15c>
 802cf18:	42a3      	cmp	r3, r4
 802cf1a:	f240 80bf 	bls.w	802d09c <__strftime.isra.0+0x320>
 802cf1e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802cf22:	553a      	strb	r2, [r7, r4]
 802cf24:	3401      	adds	r4, #1
 802cf26:	e7f5      	b.n	802cf14 <__strftime.isra.0+0x198>
 802cf28:	4b92      	ldr	r3, [pc, #584]	@ (802d174 <__strftime.isra.0+0x3f8>)
 802cf2a:	6932      	ldr	r2, [r6, #16]
 802cf2c:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 802cf30:	4658      	mov	r0, fp
 802cf32:	f7e3 f9b5 	bl	80102a0 <strlen>
 802cf36:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802cf3a:	eb04 0a00 	add.w	sl, r4, r0
 802cf3e:	1e6b      	subs	r3, r5, #1
 802cf40:	45a2      	cmp	sl, r4
 802cf42:	d0c9      	beq.n	802ced8 <__strftime.isra.0+0x15c>
 802cf44:	42a3      	cmp	r3, r4
 802cf46:	f240 80a9 	bls.w	802d09c <__strftime.isra.0+0x320>
 802cf4a:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802cf4e:	553a      	strb	r2, [r7, r4]
 802cf50:	3401      	adds	r4, #1
 802cf52:	e7f5      	b.n	802cf40 <__strftime.isra.0+0x1c4>
 802cf54:	6933      	ldr	r3, [r6, #16]
 802cf56:	4a87      	ldr	r2, [pc, #540]	@ (802d174 <__strftime.isra.0+0x3f8>)
 802cf58:	330c      	adds	r3, #12
 802cf5a:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802cf5e:	4658      	mov	r0, fp
 802cf60:	f7e3 f99e 	bl	80102a0 <strlen>
 802cf64:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802cf68:	eb04 0a00 	add.w	sl, r4, r0
 802cf6c:	1e6b      	subs	r3, r5, #1
 802cf6e:	45a2      	cmp	sl, r4
 802cf70:	d0b2      	beq.n	802ced8 <__strftime.isra.0+0x15c>
 802cf72:	42a3      	cmp	r3, r4
 802cf74:	f240 8092 	bls.w	802d09c <__strftime.isra.0+0x320>
 802cf78:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802cf7c:	553a      	strb	r2, [r7, r4]
 802cf7e:	3401      	adds	r4, #1
 802cf80:	e7f5      	b.n	802cf6e <__strftime.isra.0+0x1f2>
 802cf82:	4b7c      	ldr	r3, [pc, #496]	@ (802d174 <__strftime.isra.0+0x3f8>)
 802cf84:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802cf88:	4650      	mov	r0, sl
 802cf8a:	f7e3 f989 	bl	80102a0 <strlen>
 802cf8e:	f89a 3000 	ldrb.w	r3, [sl]
 802cf92:	2b00      	cmp	r3, #0
 802cf94:	f000 8341 	beq.w	802d61a <__strftime.isra.0+0x89e>
 802cf98:	4633      	mov	r3, r6
 802cf9a:	4652      	mov	r2, sl
 802cf9c:	1b29      	subs	r1, r5, r4
 802cf9e:	1938      	adds	r0, r7, r4
 802cfa0:	f7ff feec 	bl	802cd7c <__strftime.isra.0>
 802cfa4:	2800      	cmp	r0, #0
 802cfa6:	dd79      	ble.n	802d09c <__strftime.isra.0+0x320>
 802cfa8:	eb04 0a00 	add.w	sl, r4, r0
 802cfac:	e794      	b.n	802ced8 <__strftime.isra.0+0x15c>
 802cfae:	4b71      	ldr	r3, [pc, #452]	@ (802d174 <__strftime.isra.0+0x3f8>)
 802cfb0:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802cfb4:	e7e8      	b.n	802cf88 <__strftime.isra.0+0x20c>
 802cfb6:	4b6f      	ldr	r3, [pc, #444]	@ (802d174 <__strftime.isra.0+0x3f8>)
 802cfb8:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802cfbc:	e7e4      	b.n	802cf88 <__strftime.isra.0+0x20c>
 802cfbe:	4b6d      	ldr	r3, [pc, #436]	@ (802d174 <__strftime.isra.0+0x3f8>)
 802cfc0:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802cfc4:	e7e0      	b.n	802cf88 <__strftime.isra.0+0x20c>
 802cfc6:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802cfca:	496b      	ldr	r1, [pc, #428]	@ (802d178 <__strftime.isra.0+0x3fc>)
 802cfcc:	458a      	cmp	sl, r1
 802cfce:	bfac      	ite	ge
 802cfd0:	f04f 0b00 	movge.w	fp, #0
 802cfd4:	f04f 0b01 	movlt.w	fp, #1
 802cfd8:	f1ba 0f00 	cmp.w	sl, #0
 802cfdc:	db12      	blt.n	802d004 <__strftime.isra.0+0x288>
 802cfde:	2064      	movs	r0, #100	@ 0x64
 802cfe0:	fb9a f0f0 	sdiv	r0, sl, r0
 802cfe4:	3013      	adds	r0, #19
 802cfe6:	f1b9 0f00 	cmp.w	r9, #0
 802cfea:	d015      	beq.n	802d018 <__strftime.isra.0+0x29c>
 802cfec:	2863      	cmp	r0, #99	@ 0x63
 802cfee:	dd28      	ble.n	802d042 <__strftime.isra.0+0x2c6>
 802cff0:	4b62      	ldr	r3, [pc, #392]	@ (802d17c <__strftime.isra.0+0x400>)
 802cff2:	4963      	ldr	r1, [pc, #396]	@ (802d180 <__strftime.isra.0+0x404>)
 802cff4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802cff8:	bf0c      	ite	eq
 802cffa:	469c      	moveq	ip, r3
 802cffc:	468c      	movne	ip, r1
 802cffe:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802d19c <__strftime.isra.0+0x420>
 802d002:	e00d      	b.n	802d020 <__strftime.isra.0+0x2a4>
 802d004:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802d008:	9203      	str	r2, [sp, #12]
 802d00a:	f000 ff88 	bl	802df1e <abs>
 802d00e:	2164      	movs	r1, #100	@ 0x64
 802d010:	9a03      	ldr	r2, [sp, #12]
 802d012:	fb90 f0f1 	sdiv	r0, r0, r1
 802d016:	e7e6      	b.n	802cfe6 <__strftime.isra.0+0x26a>
 802d018:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802d180 <__strftime.isra.0+0x404>
 802d01c:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802d1a0 <__strftime.isra.0+0x424>
 802d020:	4b58      	ldr	r3, [pc, #352]	@ (802d184 <__strftime.isra.0+0x408>)
 802d022:	9001      	str	r0, [sp, #4]
 802d024:	2a02      	cmp	r2, #2
 802d026:	bf2c      	ite	cs
 802d028:	ebcb 0102 	rsbcs	r1, fp, r2
 802d02c:	f1cb 0102 	rsbcc	r1, fp, #2
 802d030:	4a51      	ldr	r2, [pc, #324]	@ (802d178 <__strftime.isra.0+0x3fc>)
 802d032:	9100      	str	r1, [sp, #0]
 802d034:	4592      	cmp	sl, r2
 802d036:	bfa8      	it	ge
 802d038:	4663      	movge	r3, ip
 802d03a:	4672      	mov	r2, lr
 802d03c:	1b29      	subs	r1, r5, r4
 802d03e:	1938      	adds	r0, r7, r4
 802d040:	e023      	b.n	802d08a <__strftime.isra.0+0x30e>
 802d042:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802d180 <__strftime.isra.0+0x404>
 802d046:	e7da      	b.n	802cffe <__strftime.isra.0+0x282>
 802d048:	494f      	ldr	r1, [pc, #316]	@ (802d188 <__strftime.isra.0+0x40c>)
 802d04a:	4a50      	ldr	r2, [pc, #320]	@ (802d18c <__strftime.isra.0+0x410>)
 802d04c:	68f3      	ldr	r3, [r6, #12]
 802d04e:	2864      	cmp	r0, #100	@ 0x64
 802d050:	bf18      	it	ne
 802d052:	460a      	movne	r2, r1
 802d054:	1b29      	subs	r1, r5, r4
 802d056:	1938      	adds	r0, r7, r4
 802d058:	f002 f986 	bl	802f368 <sniprintf>
 802d05c:	e017      	b.n	802d08e <__strftime.isra.0+0x312>
 802d05e:	6970      	ldr	r0, [r6, #20]
 802d060:	6933      	ldr	r3, [r6, #16]
 802d062:	2800      	cmp	r0, #0
 802d064:	f103 0a01 	add.w	sl, r3, #1
 802d068:	eb07 0b04 	add.w	fp, r7, r4
 802d06c:	68f3      	ldr	r3, [r6, #12]
 802d06e:	eba5 0904 	sub.w	r9, r5, r4
 802d072:	db19      	blt.n	802d0a8 <__strftime.isra.0+0x32c>
 802d074:	2264      	movs	r2, #100	@ 0x64
 802d076:	fb90 fcf2 	sdiv	ip, r0, r2
 802d07a:	fb02 001c 	mls	r0, r2, ip, r0
 802d07e:	4a44      	ldr	r2, [pc, #272]	@ (802d190 <__strftime.isra.0+0x414>)
 802d080:	e9cd 3000 	strd	r3, r0, [sp]
 802d084:	4649      	mov	r1, r9
 802d086:	4653      	mov	r3, sl
 802d088:	4658      	mov	r0, fp
 802d08a:	f002 f96d 	bl	802f368 <sniprintf>
 802d08e:	2800      	cmp	r0, #0
 802d090:	db04      	blt.n	802d09c <__strftime.isra.0+0x320>
 802d092:	eb00 0a04 	add.w	sl, r0, r4
 802d096:	4555      	cmp	r5, sl
 802d098:	f63f af1e 	bhi.w	802ced8 <__strftime.isra.0+0x15c>
 802d09c:	f04f 0a00 	mov.w	sl, #0
 802d0a0:	4650      	mov	r0, sl
 802d0a2:	b00f      	add	sp, #60	@ 0x3c
 802d0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d0a8:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d0ac:	9303      	str	r3, [sp, #12]
 802d0ae:	f000 ff36 	bl	802df1e <abs>
 802d0b2:	2264      	movs	r2, #100	@ 0x64
 802d0b4:	9b03      	ldr	r3, [sp, #12]
 802d0b6:	fb90 fcf2 	sdiv	ip, r0, r2
 802d0ba:	fb0c 0012 	mls	r0, ip, r2, r0
 802d0be:	e7de      	b.n	802d07e <__strftime.isra.0+0x302>
 802d0c0:	2125      	movs	r1, #37	@ 0x25
 802d0c2:	f88d 1018 	strb.w	r1, [sp, #24]
 802d0c6:	f1b9 0f00 	cmp.w	r9, #0
 802d0ca:	d00b      	beq.n	802d0e4 <__strftime.isra.0+0x368>
 802d0cc:	2a05      	cmp	r2, #5
 802d0ce:	f88d 9019 	strb.w	r9, [sp, #25]
 802d0d2:	d817      	bhi.n	802d104 <__strftime.isra.0+0x388>
 802d0d4:	f10d 001a 	add.w	r0, sp, #26
 802d0d8:	492e      	ldr	r1, [pc, #184]	@ (802d194 <__strftime.isra.0+0x418>)
 802d0da:	f000 fe83 	bl	802dde4 <strcpy>
 802d0de:	4633      	mov	r3, r6
 802d0e0:	aa06      	add	r2, sp, #24
 802d0e2:	e75b      	b.n	802cf9c <__strftime.isra.0+0x220>
 802d0e4:	232b      	movs	r3, #43	@ 0x2b
 802d0e6:	f88d 3019 	strb.w	r3, [sp, #25]
 802d0ea:	2304      	movs	r3, #4
 802d0ec:	4a2a      	ldr	r2, [pc, #168]	@ (802d198 <__strftime.isra.0+0x41c>)
 802d0ee:	211e      	movs	r1, #30
 802d0f0:	f10d 001a 	add.w	r0, sp, #26
 802d0f4:	f002 f938 	bl	802f368 <sniprintf>
 802d0f8:	2800      	cmp	r0, #0
 802d0fa:	ddeb      	ble.n	802d0d4 <__strftime.isra.0+0x358>
 802d0fc:	f10d 031a 	add.w	r3, sp, #26
 802d100:	4418      	add	r0, r3
 802d102:	e7e9      	b.n	802d0d8 <__strftime.isra.0+0x35c>
 802d104:	1f93      	subs	r3, r2, #6
 802d106:	d0e5      	beq.n	802d0d4 <__strftime.isra.0+0x358>
 802d108:	e7f0      	b.n	802d0ec <__strftime.isra.0+0x370>
 802d10a:	4630      	mov	r0, r6
 802d10c:	f7ff fde4 	bl	802ccd8 <iso_year_adjust>
 802d110:	4682      	mov	sl, r0
 802d112:	6970      	ldr	r0, [r6, #20]
 802d114:	2800      	cmp	r0, #0
 802d116:	db11      	blt.n	802d13c <__strftime.isra.0+0x3c0>
 802d118:	2364      	movs	r3, #100	@ 0x64
 802d11a:	fb90 f2f3 	sdiv	r2, r0, r3
 802d11e:	fb03 0012 	mls	r0, r3, r2, r0
 802d122:	2364      	movs	r3, #100	@ 0x64
 802d124:	4482      	add	sl, r0
 802d126:	fb9a f2f3 	sdiv	r2, sl, r3
 802d12a:	fb03 aa12 	mls	sl, r3, r2, sl
 802d12e:	449a      	add	sl, r3
 802d130:	fbba f2f3 	udiv	r2, sl, r3
 802d134:	fb03 a312 	mls	r3, r3, r2, sl
 802d138:	4a14      	ldr	r2, [pc, #80]	@ (802d18c <__strftime.isra.0+0x410>)
 802d13a:	e78b      	b.n	802d054 <__strftime.isra.0+0x2d8>
 802d13c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d140:	f000 feed 	bl	802df1e <abs>
 802d144:	2364      	movs	r3, #100	@ 0x64
 802d146:	f1ba 0f00 	cmp.w	sl, #0
 802d14a:	fb90 f2f3 	sdiv	r2, r0, r3
 802d14e:	fb02 0013 	mls	r0, r2, r3, r0
 802d152:	da07      	bge.n	802d164 <__strftime.isra.0+0x3e8>
 802d154:	6972      	ldr	r2, [r6, #20]
 802d156:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802d15a:	429a      	cmp	r2, r3
 802d15c:	bfb8      	it	lt
 802d15e:	f04f 0a01 	movlt.w	sl, #1
 802d162:	e7de      	b.n	802d122 <__strftime.isra.0+0x3a6>
 802d164:	d0dd      	beq.n	802d122 <__strftime.isra.0+0x3a6>
 802d166:	6972      	ldr	r2, [r6, #20]
 802d168:	4b03      	ldr	r3, [pc, #12]	@ (802d178 <__strftime.isra.0+0x3fc>)
 802d16a:	429a      	cmp	r2, r3
 802d16c:	bfb8      	it	lt
 802d16e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d172:	e7d6      	b.n	802d122 <__strftime.isra.0+0x3a6>
 802d174:	0803bf80 	.word	0x0803bf80
 802d178:	fffff894 	.word	0xfffff894
 802d17c:	0803bda3 	.word	0x0803bda3
 802d180:	0803bcbe 	.word	0x0803bcbe
 802d184:	0803bda5 	.word	0x0803bda5
 802d188:	0803bda7 	.word	0x0803bda7
 802d18c:	0803bdb5 	.word	0x0803bdb5
 802d190:	0803bdab 	.word	0x0803bdab
 802d194:	0803bdbe 	.word	0x0803bdbe
 802d198:	0803bdba 	.word	0x0803bdba
 802d19c:	0803bd9b 	.word	0x0803bd9b
 802d1a0:	0803bd94 	.word	0x0803bd94
 802d1a4:	6971      	ldr	r1, [r6, #20]
 802d1a6:	48bc      	ldr	r0, [pc, #752]	@ (802d498 <__strftime.isra.0+0x71c>)
 802d1a8:	9205      	str	r2, [sp, #20]
 802d1aa:	4281      	cmp	r1, r0
 802d1ac:	bfac      	ite	ge
 802d1ae:	2300      	movge	r3, #0
 802d1b0:	2301      	movlt	r3, #1
 802d1b2:	4630      	mov	r0, r6
 802d1b4:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802d1b8:	f7ff fd8e 	bl	802ccd8 <iso_year_adjust>
 802d1bc:	9904      	ldr	r1, [sp, #16]
 802d1be:	9a05      	ldr	r2, [sp, #20]
 802d1c0:	2900      	cmp	r1, #0
 802d1c2:	4682      	mov	sl, r0
 802d1c4:	db3a      	blt.n	802d23c <__strftime.isra.0+0x4c0>
 802d1c6:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802d1ca:	fb91 fbfb 	sdiv	fp, r1, fp
 802d1ce:	f10b 0b13 	add.w	fp, fp, #19
 802d1d2:	6970      	ldr	r0, [r6, #20]
 802d1d4:	2800      	cmp	r0, #0
 802d1d6:	db3e      	blt.n	802d256 <__strftime.isra.0+0x4da>
 802d1d8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d1dc:	f1ba 0f00 	cmp.w	sl, #0
 802d1e0:	fb90 fefc 	sdiv	lr, r0, ip
 802d1e4:	fb0c 001e 	mls	r0, ip, lr, r0
 802d1e8:	da4f      	bge.n	802d28a <__strftime.isra.0+0x50e>
 802d1ea:	4482      	add	sl, r0
 802d1ec:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802d1f0:	d157      	bne.n	802d2a2 <__strftime.isra.0+0x526>
 802d1f2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d1f6:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802d1fa:	9b03      	ldr	r3, [sp, #12]
 802d1fc:	2164      	movs	r1, #100	@ 0x64
 802d1fe:	fb01 aa0b 	mla	sl, r1, fp, sl
 802d202:	2b00      	cmp	r3, #0
 802d204:	f040 81f7 	bne.w	802d5f6 <__strftime.isra.0+0x87a>
 802d208:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d20c:	d104      	bne.n	802d218 <__strftime.isra.0+0x49c>
 802d20e:	f242 710f 	movw	r1, #9999	@ 0x270f
 802d212:	458a      	cmp	sl, r1
 802d214:	f200 8275 	bhi.w	802d702 <__strftime.isra.0+0x986>
 802d218:	a906      	add	r1, sp, #24
 802d21a:	2025      	movs	r0, #37	@ 0x25
 802d21c:	7008      	strb	r0, [r1, #0]
 802d21e:	f1b9 0f00 	cmp.w	r9, #0
 802d222:	f040 81f3 	bne.w	802d60c <__strftime.isra.0+0x890>
 802d226:	1c48      	adds	r0, r1, #1
 802d228:	499c      	ldr	r1, [pc, #624]	@ (802d49c <__strftime.isra.0+0x720>)
 802d22a:	9203      	str	r2, [sp, #12]
 802d22c:	f000 fdda 	bl	802dde4 <strcpy>
 802d230:	9a03      	ldr	r2, [sp, #12]
 802d232:	f8cd a000 	str.w	sl, [sp]
 802d236:	4613      	mov	r3, r2
 802d238:	aa06      	add	r2, sp, #24
 802d23a:	e098      	b.n	802d36e <__strftime.isra.0+0x5f2>
 802d23c:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802d240:	9205      	str	r2, [sp, #20]
 802d242:	9104      	str	r1, [sp, #16]
 802d244:	f000 fe6b 	bl	802df1e <abs>
 802d248:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d24c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802d250:	fb90 fbfc 	sdiv	fp, r0, ip
 802d254:	e7bd      	b.n	802d1d2 <__strftime.isra.0+0x456>
 802d256:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d25a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802d25e:	f000 fe5e 	bl	802df1e <abs>
 802d262:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d266:	f1ba 0f00 	cmp.w	sl, #0
 802d26a:	fb90 fefc 	sdiv	lr, r0, ip
 802d26e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802d272:	fb0e 001c 	mls	r0, lr, ip, r0
 802d276:	da08      	bge.n	802d28a <__strftime.isra.0+0x50e>
 802d278:	6971      	ldr	r1, [r6, #20]
 802d27a:	4b89      	ldr	r3, [pc, #548]	@ (802d4a0 <__strftime.isra.0+0x724>)
 802d27c:	4299      	cmp	r1, r3
 802d27e:	dab4      	bge.n	802d1ea <__strftime.isra.0+0x46e>
 802d280:	f04f 0a01 	mov.w	sl, #1
 802d284:	f8cd a00c 	str.w	sl, [sp, #12]
 802d288:	e7af      	b.n	802d1ea <__strftime.isra.0+0x46e>
 802d28a:	f1ba 0f00 	cmp.w	sl, #0
 802d28e:	d0ac      	beq.n	802d1ea <__strftime.isra.0+0x46e>
 802d290:	4b81      	ldr	r3, [pc, #516]	@ (802d498 <__strftime.isra.0+0x71c>)
 802d292:	4299      	cmp	r1, r3
 802d294:	9b03      	ldr	r3, [sp, #12]
 802d296:	bfbc      	itt	lt
 802d298:	2301      	movlt	r3, #1
 802d29a:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d29e:	9303      	str	r3, [sp, #12]
 802d2a0:	e7a3      	b.n	802d1ea <__strftime.isra.0+0x46e>
 802d2a2:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802d2a6:	bf04      	itt	eq
 802d2a8:	f10b 0b01 	addeq.w	fp, fp, #1
 802d2ac:	f04f 0a00 	moveq.w	sl, #0
 802d2b0:	e7a3      	b.n	802d1fa <__strftime.isra.0+0x47e>
 802d2b2:	497c      	ldr	r1, [pc, #496]	@ (802d4a4 <__strftime.isra.0+0x728>)
 802d2b4:	4a7c      	ldr	r2, [pc, #496]	@ (802d4a8 <__strftime.isra.0+0x72c>)
 802d2b6:	68b3      	ldr	r3, [r6, #8]
 802d2b8:	286b      	cmp	r0, #107	@ 0x6b
 802d2ba:	bf18      	it	ne
 802d2bc:	460a      	movne	r2, r1
 802d2be:	e6c9      	b.n	802d054 <__strftime.isra.0+0x2d8>
 802d2c0:	68b3      	ldr	r3, [r6, #8]
 802d2c2:	b163      	cbz	r3, 802d2de <__strftime.isra.0+0x562>
 802d2c4:	2b0c      	cmp	r3, #12
 802d2c6:	d004      	beq.n	802d2d2 <__strftime.isra.0+0x556>
 802d2c8:	210c      	movs	r1, #12
 802d2ca:	fb93 f2f1 	sdiv	r2, r3, r1
 802d2ce:	fb01 3312 	mls	r3, r1, r2, r3
 802d2d2:	4975      	ldr	r1, [pc, #468]	@ (802d4a8 <__strftime.isra.0+0x72c>)
 802d2d4:	4a73      	ldr	r2, [pc, #460]	@ (802d4a4 <__strftime.isra.0+0x728>)
 802d2d6:	2849      	cmp	r0, #73	@ 0x49
 802d2d8:	bf18      	it	ne
 802d2da:	460a      	movne	r2, r1
 802d2dc:	e6ba      	b.n	802d054 <__strftime.isra.0+0x2d8>
 802d2de:	230c      	movs	r3, #12
 802d2e0:	e7f7      	b.n	802d2d2 <__strftime.isra.0+0x556>
 802d2e2:	69f3      	ldr	r3, [r6, #28]
 802d2e4:	4a71      	ldr	r2, [pc, #452]	@ (802d4ac <__strftime.isra.0+0x730>)
 802d2e6:	3301      	adds	r3, #1
 802d2e8:	e6b4      	b.n	802d054 <__strftime.isra.0+0x2d8>
 802d2ea:	6933      	ldr	r3, [r6, #16]
 802d2ec:	3301      	adds	r3, #1
 802d2ee:	e723      	b.n	802d138 <__strftime.isra.0+0x3bc>
 802d2f0:	6873      	ldr	r3, [r6, #4]
 802d2f2:	e721      	b.n	802d138 <__strftime.isra.0+0x3bc>
 802d2f4:	1e6b      	subs	r3, r5, #1
 802d2f6:	429c      	cmp	r4, r3
 802d2f8:	f4bf aed0 	bcs.w	802d09c <__strftime.isra.0+0x320>
 802d2fc:	f104 0a01 	add.w	sl, r4, #1
 802d300:	230a      	movs	r3, #10
 802d302:	553b      	strb	r3, [r7, r4]
 802d304:	e5e8      	b.n	802ced8 <__strftime.isra.0+0x15c>
 802d306:	68b3      	ldr	r3, [r6, #8]
 802d308:	2b0b      	cmp	r3, #11
 802d30a:	4b69      	ldr	r3, [pc, #420]	@ (802d4b0 <__strftime.isra.0+0x734>)
 802d30c:	bfd4      	ite	le
 802d30e:	2200      	movle	r2, #0
 802d310:	2201      	movgt	r2, #1
 802d312:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802d316:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802d31a:	4658      	mov	r0, fp
 802d31c:	f7e2 ffc0 	bl	80102a0 <strlen>
 802d320:	eb04 0a00 	add.w	sl, r4, r0
 802d324:	4863      	ldr	r0, [pc, #396]	@ (802d4b4 <__strftime.isra.0+0x738>)
 802d326:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d32a:	1e69      	subs	r1, r5, #1
 802d32c:	45a2      	cmp	sl, r4
 802d32e:	f43f add3 	beq.w	802ced8 <__strftime.isra.0+0x15c>
 802d332:	42a1      	cmp	r1, r4
 802d334:	f67f aeb2 	bls.w	802d09c <__strftime.isra.0+0x320>
 802d338:	f898 2000 	ldrb.w	r2, [r8]
 802d33c:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802d340:	2a50      	cmp	r2, #80	@ 0x50
 802d342:	d106      	bne.n	802d352 <__strftime.isra.0+0x5d6>
 802d344:	5cc2      	ldrb	r2, [r0, r3]
 802d346:	f002 0203 	and.w	r2, r2, #3
 802d34a:	2a01      	cmp	r2, #1
 802d34c:	bf08      	it	eq
 802d34e:	3320      	addeq	r3, #32
 802d350:	b2db      	uxtb	r3, r3
 802d352:	553b      	strb	r3, [r7, r4]
 802d354:	3401      	adds	r4, #1
 802d356:	e7e9      	b.n	802d32c <__strftime.isra.0+0x5b0>
 802d358:	2203      	movs	r2, #3
 802d35a:	6933      	ldr	r3, [r6, #16]
 802d35c:	fb93 f3f2 	sdiv	r3, r3, r2
 802d360:	4a55      	ldr	r2, [pc, #340]	@ (802d4b8 <__strftime.isra.0+0x73c>)
 802d362:	3301      	adds	r3, #1
 802d364:	e676      	b.n	802d054 <__strftime.isra.0+0x2d8>
 802d366:	6873      	ldr	r3, [r6, #4]
 802d368:	9300      	str	r3, [sp, #0]
 802d36a:	68b3      	ldr	r3, [r6, #8]
 802d36c:	4a53      	ldr	r2, [pc, #332]	@ (802d4bc <__strftime.isra.0+0x740>)
 802d36e:	1b29      	subs	r1, r5, r4
 802d370:	1938      	adds	r0, r7, r4
 802d372:	f001 fff9 	bl	802f368 <sniprintf>
 802d376:	e68a      	b.n	802d08e <__strftime.isra.0+0x312>
 802d378:	6a33      	ldr	r3, [r6, #32]
 802d37a:	2b00      	cmp	r3, #0
 802d37c:	db78      	blt.n	802d470 <__strftime.isra.0+0x6f4>
 802d37e:	f000 fa7b 	bl	802d878 <__tz_lock>
 802d382:	9b02      	ldr	r3, [sp, #8]
 802d384:	b90b      	cbnz	r3, 802d38a <__strftime.isra.0+0x60e>
 802d386:	f000 fa83 	bl	802d890 <_tzset_unlocked>
 802d38a:	f007 fe73 	bl	8035074 <__gettzinfo>
 802d38e:	6a33      	ldr	r3, [r6, #32]
 802d390:	2b00      	cmp	r3, #0
 802d392:	bfd4      	ite	le
 802d394:	2200      	movle	r2, #0
 802d396:	2201      	movgt	r2, #1
 802d398:	2328      	movs	r3, #40	@ 0x28
 802d39a:	fb02 3303 	mla	r3, r2, r3, r3
 802d39e:	58c3      	ldr	r3, [r0, r3]
 802d3a0:	f1c3 0a00 	rsb	sl, r3, #0
 802d3a4:	f000 fa6e 	bl	802d884 <__tz_unlock>
 802d3a8:	2301      	movs	r3, #1
 802d3aa:	9302      	str	r3, [sp, #8]
 802d3ac:	6972      	ldr	r2, [r6, #20]
 802d3ae:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802d3b2:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802d3b6:	f16c 0c00 	sbc.w	ip, ip, #0
 802d3ba:	f1bc 0f00 	cmp.w	ip, #0
 802d3be:	eba5 0104 	sub.w	r1, r5, r4
 802d3c2:	eb07 0004 	add.w	r0, r7, r4
 802d3c6:	da02      	bge.n	802d3ce <__strftime.isra.0+0x652>
 802d3c8:	3303      	adds	r3, #3
 802d3ca:	f14c 0c00 	adc.w	ip, ip, #0
 802d3ce:	089b      	lsrs	r3, r3, #2
 802d3d0:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802d3d4:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802d3d8:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802d3dc:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802d3e0:	fb9e fefb 	sdiv	lr, lr, fp
 802d3e4:	ebb3 030e 	subs.w	r3, r3, lr
 802d3e8:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802d3ec:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802d3f0:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802d3f4:	fb9e fefb 	sdiv	lr, lr, fp
 802d3f8:	eb13 030e 	adds.w	r3, r3, lr
 802d3fc:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802d400:	3a46      	subs	r2, #70	@ 0x46
 802d402:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802d406:	fb0e f202 	mul.w	r2, lr, r2
 802d40a:	189b      	adds	r3, r3, r2
 802d40c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802d410:	69f2      	ldr	r2, [r6, #28]
 802d412:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802d416:	189b      	adds	r3, r3, r2
 802d418:	f04f 0e18 	mov.w	lr, #24
 802d41c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802d420:	fba3 230e 	umull	r2, r3, r3, lr
 802d424:	fb0e 330c 	mla	r3, lr, ip, r3
 802d428:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802d42c:	eb12 020c 	adds.w	r2, r2, ip
 802d430:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802d434:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802d438:	fba2 2e0c 	umull	r2, lr, r2, ip
 802d43c:	fb0c ee03 	mla	lr, ip, r3, lr
 802d440:	eb12 030b 	adds.w	r3, r2, fp
 802d444:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802d448:	fba3 e30c 	umull	lr, r3, r3, ip
 802d44c:	fb0c 3302 	mla	r3, ip, r2, r3
 802d450:	f8d6 c000 	ldr.w	ip, [r6]
 802d454:	eb1e 020c 	adds.w	r2, lr, ip
 802d458:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802d45c:	ebb2 020a 	subs.w	r2, r2, sl
 802d460:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802d464:	e9cd 2300 	strd	r2, r3, [sp]
 802d468:	4a15      	ldr	r2, [pc, #84]	@ (802d4c0 <__strftime.isra.0+0x744>)
 802d46a:	f001 ff7d 	bl	802f368 <sniprintf>
 802d46e:	e60e      	b.n	802d08e <__strftime.isra.0+0x312>
 802d470:	f04f 0a00 	mov.w	sl, #0
 802d474:	e79a      	b.n	802d3ac <__strftime.isra.0+0x630>
 802d476:	6833      	ldr	r3, [r6, #0]
 802d478:	e65e      	b.n	802d138 <__strftime.isra.0+0x3bc>
 802d47a:	1e6b      	subs	r3, r5, #1
 802d47c:	429c      	cmp	r4, r3
 802d47e:	f4bf ae0d 	bcs.w	802d09c <__strftime.isra.0+0x320>
 802d482:	f104 0a01 	add.w	sl, r4, #1
 802d486:	2309      	movs	r3, #9
 802d488:	e73b      	b.n	802d302 <__strftime.isra.0+0x586>
 802d48a:	6833      	ldr	r3, [r6, #0]
 802d48c:	9301      	str	r3, [sp, #4]
 802d48e:	6873      	ldr	r3, [r6, #4]
 802d490:	9300      	str	r3, [sp, #0]
 802d492:	68b3      	ldr	r3, [r6, #8]
 802d494:	4a0b      	ldr	r2, [pc, #44]	@ (802d4c4 <__strftime.isra.0+0x748>)
 802d496:	e5d1      	b.n	802d03c <__strftime.isra.0+0x2c0>
 802d498:	fffff894 	.word	0xfffff894
 802d49c:	0803bdc6 	.word	0x0803bdc6
 802d4a0:	fffff895 	.word	0xfffff895
 802d4a4:	0803bdb5 	.word	0x0803bdb5
 802d4a8:	0803bda7 	.word	0x0803bda7
 802d4ac:	0803bdca 	.word	0x0803bdca
 802d4b0:	0803bf80 	.word	0x0803bf80
 802d4b4:	0803c07d 	.word	0x0803c07d
 802d4b8:	0803bdcf 	.word	0x0803bdcf
 802d4bc:	0803bdde 	.word	0x0803bdde
 802d4c0:	0803bdd4 	.word	0x0803bdd4
 802d4c4:	0803bdd9 	.word	0x0803bdd9
 802d4c8:	1e6b      	subs	r3, r5, #1
 802d4ca:	429c      	cmp	r4, r3
 802d4cc:	f4bf ade6 	bcs.w	802d09c <__strftime.isra.0+0x320>
 802d4d0:	69b3      	ldr	r3, [r6, #24]
 802d4d2:	b91b      	cbnz	r3, 802d4dc <__strftime.isra.0+0x760>
 802d4d4:	2337      	movs	r3, #55	@ 0x37
 802d4d6:	f104 0a01 	add.w	sl, r4, #1
 802d4da:	e712      	b.n	802d302 <__strftime.isra.0+0x586>
 802d4dc:	3330      	adds	r3, #48	@ 0x30
 802d4de:	b2db      	uxtb	r3, r3
 802d4e0:	e7f9      	b.n	802d4d6 <__strftime.isra.0+0x75a>
 802d4e2:	69f3      	ldr	r3, [r6, #28]
 802d4e4:	69b2      	ldr	r2, [r6, #24]
 802d4e6:	3307      	adds	r3, #7
 802d4e8:	1a9b      	subs	r3, r3, r2
 802d4ea:	2207      	movs	r2, #7
 802d4ec:	fb93 f3f2 	sdiv	r3, r3, r2
 802d4f0:	e622      	b.n	802d138 <__strftime.isra.0+0x3bc>
 802d4f2:	4630      	mov	r0, r6
 802d4f4:	f7ff fbf0 	bl	802ccd8 <iso_year_adjust>
 802d4f8:	69b2      	ldr	r2, [r6, #24]
 802d4fa:	b132      	cbz	r2, 802d50a <__strftime.isra.0+0x78e>
 802d4fc:	3a01      	subs	r2, #1
 802d4fe:	2800      	cmp	r0, #0
 802d500:	69f3      	ldr	r3, [r6, #28]
 802d502:	dc26      	bgt.n	802d552 <__strftime.isra.0+0x7d6>
 802d504:	d103      	bne.n	802d50e <__strftime.isra.0+0x792>
 802d506:	330a      	adds	r3, #10
 802d508:	e7ee      	b.n	802d4e8 <__strftime.isra.0+0x76c>
 802d50a:	2206      	movs	r2, #6
 802d50c:	e7f7      	b.n	802d4fe <__strftime.isra.0+0x782>
 802d50e:	1ad2      	subs	r2, r2, r3
 802d510:	6973      	ldr	r3, [r6, #20]
 802d512:	2b00      	cmp	r3, #0
 802d514:	f240 716b 	movw	r1, #1899	@ 0x76b
 802d518:	bfa8      	it	ge
 802d51a:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802d51e:	440b      	add	r3, r1
 802d520:	0799      	lsls	r1, r3, #30
 802d522:	d105      	bne.n	802d530 <__strftime.isra.0+0x7b4>
 802d524:	2064      	movs	r0, #100	@ 0x64
 802d526:	fb93 f1f0 	sdiv	r1, r3, r0
 802d52a:	fb00 3111 	mls	r1, r0, r1, r3
 802d52e:	b971      	cbnz	r1, 802d54e <__strftime.isra.0+0x7d2>
 802d530:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802d534:	fb93 f0f1 	sdiv	r0, r3, r1
 802d538:	fb01 3310 	mls	r3, r1, r0, r3
 802d53c:	fab3 f383 	clz	r3, r3
 802d540:	095b      	lsrs	r3, r3, #5
 802d542:	1ad2      	subs	r2, r2, r3
 802d544:	2a04      	cmp	r2, #4
 802d546:	bfcc      	ite	gt
 802d548:	2334      	movgt	r3, #52	@ 0x34
 802d54a:	2335      	movle	r3, #53	@ 0x35
 802d54c:	e5f4      	b.n	802d138 <__strftime.isra.0+0x3bc>
 802d54e:	2301      	movs	r3, #1
 802d550:	e7f7      	b.n	802d542 <__strftime.isra.0+0x7c6>
 802d552:	2301      	movs	r3, #1
 802d554:	e5f0      	b.n	802d138 <__strftime.isra.0+0x3bc>
 802d556:	496c      	ldr	r1, [pc, #432]	@ (802d708 <__strftime.isra.0+0x98c>)
 802d558:	9203      	str	r2, [sp, #12]
 802d55a:	a806      	add	r0, sp, #24
 802d55c:	f000 fc42 	bl	802dde4 <strcpy>
 802d560:	a806      	add	r0, sp, #24
 802d562:	f7e2 fe9d 	bl	80102a0 <strlen>
 802d566:	ab06      	add	r3, sp, #24
 802d568:	eb03 0a00 	add.w	sl, r3, r0
 802d56c:	f10a 0a01 	add.w	sl, sl, #1
 802d570:	46d3      	mov	fp, sl
 802d572:	f1b9 0f00 	cmp.w	r9, #0
 802d576:	d009      	beq.n	802d58c <__strftime.isra.0+0x810>
 802d578:	9a03      	ldr	r2, [sp, #12]
 802d57a:	f803 9000 	strb.w	r9, [r3, r0]
 802d57e:	2a05      	cmp	r2, #5
 802d580:	d901      	bls.n	802d586 <__strftime.isra.0+0x80a>
 802d582:	1f93      	subs	r3, r2, #6
 802d584:	d106      	bne.n	802d594 <__strftime.isra.0+0x818>
 802d586:	4961      	ldr	r1, [pc, #388]	@ (802d70c <__strftime.isra.0+0x990>)
 802d588:	4658      	mov	r0, fp
 802d58a:	e5a6      	b.n	802d0da <__strftime.isra.0+0x35e>
 802d58c:	aa06      	add	r2, sp, #24
 802d58e:	232b      	movs	r3, #43	@ 0x2b
 802d590:	5413      	strb	r3, [r2, r0]
 802d592:	2304      	movs	r3, #4
 802d594:	a90e      	add	r1, sp, #56	@ 0x38
 802d596:	4a5e      	ldr	r2, [pc, #376]	@ (802d710 <__strftime.isra.0+0x994>)
 802d598:	eba1 010a 	sub.w	r1, r1, sl
 802d59c:	4650      	mov	r0, sl
 802d59e:	f001 fee3 	bl	802f368 <sniprintf>
 802d5a2:	2800      	cmp	r0, #0
 802d5a4:	bfc8      	it	gt
 802d5a6:	eb0a 0b00 	addgt.w	fp, sl, r0
 802d5aa:	e7ec      	b.n	802d586 <__strftime.isra.0+0x80a>
 802d5ac:	1e6b      	subs	r3, r5, #1
 802d5ae:	429c      	cmp	r4, r3
 802d5b0:	f4bf ad74 	bcs.w	802d09c <__strftime.isra.0+0x320>
 802d5b4:	69b3      	ldr	r3, [r6, #24]
 802d5b6:	f104 0a01 	add.w	sl, r4, #1
 802d5ba:	3330      	adds	r3, #48	@ 0x30
 802d5bc:	e6a1      	b.n	802d302 <__strftime.isra.0+0x586>
 802d5be:	69b2      	ldr	r2, [r6, #24]
 802d5c0:	b11a      	cbz	r2, 802d5ca <__strftime.isra.0+0x84e>
 802d5c2:	3a01      	subs	r2, #1
 802d5c4:	69f3      	ldr	r3, [r6, #28]
 802d5c6:	3307      	adds	r3, #7
 802d5c8:	e78e      	b.n	802d4e8 <__strftime.isra.0+0x76c>
 802d5ca:	2206      	movs	r2, #6
 802d5cc:	e7fa      	b.n	802d5c4 <__strftime.isra.0+0x848>
 802d5ce:	6970      	ldr	r0, [r6, #20]
 802d5d0:	2800      	cmp	r0, #0
 802d5d2:	db05      	blt.n	802d5e0 <__strftime.isra.0+0x864>
 802d5d4:	2364      	movs	r3, #100	@ 0x64
 802d5d6:	fb90 f2f3 	sdiv	r2, r0, r3
 802d5da:	fb02 0313 	mls	r3, r2, r3, r0
 802d5de:	e5ab      	b.n	802d138 <__strftime.isra.0+0x3bc>
 802d5e0:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d5e4:	f000 fc9b 	bl	802df1e <abs>
 802d5e8:	e7f4      	b.n	802d5d4 <__strftime.isra.0+0x858>
 802d5ea:	6971      	ldr	r1, [r6, #20]
 802d5ec:	4849      	ldr	r0, [pc, #292]	@ (802d714 <__strftime.isra.0+0x998>)
 802d5ee:	4281      	cmp	r1, r0
 802d5f0:	da09      	bge.n	802d606 <__strftime.isra.0+0x88a>
 802d5f2:	eba0 0a01 	sub.w	sl, r0, r1
 802d5f6:	212d      	movs	r1, #45	@ 0x2d
 802d5f8:	f88d 1018 	strb.w	r1, [sp, #24]
 802d5fc:	b102      	cbz	r2, 802d600 <__strftime.isra.0+0x884>
 802d5fe:	3a01      	subs	r2, #1
 802d600:	f10d 0119 	add.w	r1, sp, #25
 802d604:	e609      	b.n	802d21a <__strftime.isra.0+0x49e>
 802d606:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802d60a:	e5fd      	b.n	802d208 <__strftime.isra.0+0x48c>
 802d60c:	2330      	movs	r3, #48	@ 0x30
 802d60e:	1c88      	adds	r0, r1, #2
 802d610:	704b      	strb	r3, [r1, #1]
 802d612:	e609      	b.n	802d228 <__strftime.isra.0+0x4ac>
 802d614:	6a33      	ldr	r3, [r6, #32]
 802d616:	2b00      	cmp	r3, #0
 802d618:	da01      	bge.n	802d61e <__strftime.isra.0+0x8a2>
 802d61a:	46a2      	mov	sl, r4
 802d61c:	e45c      	b.n	802ced8 <__strftime.isra.0+0x15c>
 802d61e:	f000 f92b 	bl	802d878 <__tz_lock>
 802d622:	9b02      	ldr	r3, [sp, #8]
 802d624:	b90b      	cbnz	r3, 802d62a <__strftime.isra.0+0x8ae>
 802d626:	f000 f933 	bl	802d890 <_tzset_unlocked>
 802d62a:	f007 fd23 	bl	8035074 <__gettzinfo>
 802d62e:	6a33      	ldr	r3, [r6, #32]
 802d630:	2b00      	cmp	r3, #0
 802d632:	bfd4      	ite	le
 802d634:	2200      	movle	r2, #0
 802d636:	2201      	movgt	r2, #1
 802d638:	2328      	movs	r3, #40	@ 0x28
 802d63a:	fb02 3303 	mla	r3, r2, r3, r3
 802d63e:	eb07 0a04 	add.w	sl, r7, r4
 802d642:	58c3      	ldr	r3, [r0, r3]
 802d644:	f1c3 0900 	rsb	r9, r3, #0
 802d648:	f000 f91c 	bl	802d884 <__tz_unlock>
 802d64c:	233c      	movs	r3, #60	@ 0x3c
 802d64e:	fb99 f0f3 	sdiv	r0, r9, r3
 802d652:	f001 fbfe 	bl	802ee52 <labs>
 802d656:	233c      	movs	r3, #60	@ 0x3c
 802d658:	eba5 0b04 	sub.w	fp, r5, r4
 802d65c:	fb90 f2f3 	sdiv	r2, r0, r3
 802d660:	fb02 0013 	mls	r0, r2, r3, r0
 802d664:	9000      	str	r0, [sp, #0]
 802d666:	4a2c      	ldr	r2, [pc, #176]	@ (802d718 <__strftime.isra.0+0x99c>)
 802d668:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802d66c:	4659      	mov	r1, fp
 802d66e:	4650      	mov	r0, sl
 802d670:	fb99 f3f3 	sdiv	r3, r9, r3
 802d674:	f001 fe78 	bl	802f368 <sniprintf>
 802d678:	2800      	cmp	r0, #0
 802d67a:	f6ff ad0f 	blt.w	802d09c <__strftime.isra.0+0x320>
 802d67e:	eb00 0a04 	add.w	sl, r0, r4
 802d682:	4555      	cmp	r5, sl
 802d684:	f67f ad0a 	bls.w	802d09c <__strftime.isra.0+0x320>
 802d688:	2301      	movs	r3, #1
 802d68a:	9302      	str	r3, [sp, #8]
 802d68c:	e424      	b.n	802ced8 <__strftime.isra.0+0x15c>
 802d68e:	6a33      	ldr	r3, [r6, #32]
 802d690:	2b00      	cmp	r3, #0
 802d692:	dbc2      	blt.n	802d61a <__strftime.isra.0+0x89e>
 802d694:	f000 f8f0 	bl	802d878 <__tz_lock>
 802d698:	9b02      	ldr	r3, [sp, #8]
 802d69a:	b90b      	cbnz	r3, 802d6a0 <__strftime.isra.0+0x924>
 802d69c:	f000 f8f8 	bl	802d890 <_tzset_unlocked>
 802d6a0:	6a33      	ldr	r3, [r6, #32]
 802d6a2:	4a1e      	ldr	r2, [pc, #120]	@ (802d71c <__strftime.isra.0+0x9a0>)
 802d6a4:	2b00      	cmp	r3, #0
 802d6a6:	bfd4      	ite	le
 802d6a8:	2300      	movle	r3, #0
 802d6aa:	2301      	movgt	r3, #1
 802d6ac:	46a2      	mov	sl, r4
 802d6ae:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802d6b2:	4648      	mov	r0, r9
 802d6b4:	f7e2 fdf4 	bl	80102a0 <strlen>
 802d6b8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802d6bc:	4420      	add	r0, r4
 802d6be:	1e6b      	subs	r3, r5, #1
 802d6c0:	4550      	cmp	r0, sl
 802d6c2:	d102      	bne.n	802d6ca <__strftime.isra.0+0x94e>
 802d6c4:	f000 f8de 	bl	802d884 <__tz_unlock>
 802d6c8:	e7de      	b.n	802d688 <__strftime.isra.0+0x90c>
 802d6ca:	4553      	cmp	r3, sl
 802d6cc:	d906      	bls.n	802d6dc <__strftime.isra.0+0x960>
 802d6ce:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802d6d2:	f807 200a 	strb.w	r2, [r7, sl]
 802d6d6:	f10a 0a01 	add.w	sl, sl, #1
 802d6da:	e7f1      	b.n	802d6c0 <__strftime.isra.0+0x944>
 802d6dc:	f000 f8d2 	bl	802d884 <__tz_unlock>
 802d6e0:	e4dc      	b.n	802d09c <__strftime.isra.0+0x320>
 802d6e2:	1e6b      	subs	r3, r5, #1
 802d6e4:	429c      	cmp	r4, r3
 802d6e6:	f4bf acd9 	bcs.w	802d09c <__strftime.isra.0+0x320>
 802d6ea:	f104 0a01 	add.w	sl, r4, #1
 802d6ee:	2325      	movs	r3, #37	@ 0x25
 802d6f0:	e607      	b.n	802d302 <__strftime.isra.0+0x586>
 802d6f2:	46a2      	mov	sl, r4
 802d6f4:	2d00      	cmp	r5, #0
 802d6f6:	f43f acd3 	beq.w	802d0a0 <__strftime.isra.0+0x324>
 802d6fa:	2300      	movs	r3, #0
 802d6fc:	f807 300a 	strb.w	r3, [r7, sl]
 802d700:	e4ce      	b.n	802d0a0 <__strftime.isra.0+0x324>
 802d702:	4649      	mov	r1, r9
 802d704:	e778      	b.n	802d5f8 <__strftime.isra.0+0x87c>
 802d706:	bf00      	nop
 802d708:	0803bde8 	.word	0x0803bde8
 802d70c:	0803bf50 	.word	0x0803bf50
 802d710:	0803bdba 	.word	0x0803bdba
 802d714:	fffff894 	.word	0xfffff894
 802d718:	0803bdf0 	.word	0x0803bdf0
 802d71c:	20000164 	.word	0x20000164

0802d720 <strftime>:
 802d720:	f7ff bb2c 	b.w	802cd7c <__strftime.isra.0>

0802d724 <__tzcalc_limits>:
 802d724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d728:	4604      	mov	r4, r0
 802d72a:	f007 fca3 	bl	8035074 <__gettzinfo>
 802d72e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802d732:	429c      	cmp	r4, r3
 802d734:	f340 8099 	ble.w	802d86a <__tzcalc_limits+0x146>
 802d738:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802d73c:	19e5      	adds	r5, r4, r7
 802d73e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802d742:	f240 126d 	movw	r2, #365	@ 0x16d
 802d746:	10ad      	asrs	r5, r5, #2
 802d748:	fb02 5503 	mla	r5, r2, r3, r5
 802d74c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802d750:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802d754:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802d758:	4f45      	ldr	r7, [pc, #276]	@ (802d870 <__tzcalc_limits+0x14c>)
 802d75a:	fb93 f3f2 	sdiv	r3, r3, r2
 802d75e:	441d      	add	r5, r3
 802d760:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d764:	eb04 030c 	add.w	r3, r4, ip
 802d768:	6044      	str	r4, [r0, #4]
 802d76a:	fbb3 f3f2 	udiv	r3, r3, r2
 802d76e:	4601      	mov	r1, r0
 802d770:	441d      	add	r5, r3
 802d772:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802d776:	7a0b      	ldrb	r3, [r1, #8]
 802d778:	694a      	ldr	r2, [r1, #20]
 802d77a:	2b4a      	cmp	r3, #74	@ 0x4a
 802d77c:	d133      	bne.n	802d7e6 <__tzcalc_limits+0xc2>
 802d77e:	07a6      	lsls	r6, r4, #30
 802d780:	eb05 0302 	add.w	r3, r5, r2
 802d784:	d106      	bne.n	802d794 <__tzcalc_limits+0x70>
 802d786:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802d78a:	fb94 f6fe 	sdiv	r6, r4, lr
 802d78e:	fb0e 4616 	mls	r6, lr, r6, r4
 802d792:	b936      	cbnz	r6, 802d7a2 <__tzcalc_limits+0x7e>
 802d794:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802d798:	fb94 f6fe 	sdiv	r6, r4, lr
 802d79c:	fb0e 4616 	mls	r6, lr, r6, r4
 802d7a0:	b9fe      	cbnz	r6, 802d7e2 <__tzcalc_limits+0xbe>
 802d7a2:	2a3b      	cmp	r2, #59	@ 0x3b
 802d7a4:	bfd4      	ite	le
 802d7a6:	2200      	movle	r2, #0
 802d7a8:	2201      	movgt	r2, #1
 802d7aa:	4413      	add	r3, r2
 802d7ac:	3b01      	subs	r3, #1
 802d7ae:	698a      	ldr	r2, [r1, #24]
 802d7b0:	17d6      	asrs	r6, r2, #31
 802d7b2:	fbc3 2607 	smlal	r2, r6, r3, r7
 802d7b6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802d7b8:	18d2      	adds	r2, r2, r3
 802d7ba:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802d7be:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802d7c2:	3128      	adds	r1, #40	@ 0x28
 802d7c4:	458c      	cmp	ip, r1
 802d7c6:	d1d6      	bne.n	802d776 <__tzcalc_limits+0x52>
 802d7c8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802d7cc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802d7d0:	428c      	cmp	r4, r1
 802d7d2:	4193      	sbcs	r3, r2
 802d7d4:	bfb4      	ite	lt
 802d7d6:	2301      	movlt	r3, #1
 802d7d8:	2300      	movge	r3, #0
 802d7da:	6003      	str	r3, [r0, #0]
 802d7dc:	2001      	movs	r0, #1
 802d7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d7e2:	2200      	movs	r2, #0
 802d7e4:	e7e1      	b.n	802d7aa <__tzcalc_limits+0x86>
 802d7e6:	2b44      	cmp	r3, #68	@ 0x44
 802d7e8:	d101      	bne.n	802d7ee <__tzcalc_limits+0xca>
 802d7ea:	18ab      	adds	r3, r5, r2
 802d7ec:	e7df      	b.n	802d7ae <__tzcalc_limits+0x8a>
 802d7ee:	07a3      	lsls	r3, r4, #30
 802d7f0:	d105      	bne.n	802d7fe <__tzcalc_limits+0xda>
 802d7f2:	2664      	movs	r6, #100	@ 0x64
 802d7f4:	fb94 f3f6 	sdiv	r3, r4, r6
 802d7f8:	fb06 4313 	mls	r3, r6, r3, r4
 802d7fc:	bb7b      	cbnz	r3, 802d85e <__tzcalc_limits+0x13a>
 802d7fe:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802d802:	fb94 f6f3 	sdiv	r6, r4, r3
 802d806:	fb03 4616 	mls	r6, r3, r6, r4
 802d80a:	fab6 f686 	clz	r6, r6
 802d80e:	0976      	lsrs	r6, r6, #5
 802d810:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802d874 <__tzcalc_limits+0x150>
 802d814:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802d818:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802d81c:	462b      	mov	r3, r5
 802d81e:	f04f 0800 	mov.w	r8, #0
 802d822:	fb0a e606 	mla	r6, sl, r6, lr
 802d826:	f108 0801 	add.w	r8, r8, #1
 802d82a:	45c1      	cmp	r9, r8
 802d82c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802d830:	dc17      	bgt.n	802d862 <__tzcalc_limits+0x13e>
 802d832:	f103 0804 	add.w	r8, r3, #4
 802d836:	2607      	movs	r6, #7
 802d838:	fb98 f6f6 	sdiv	r6, r8, r6
 802d83c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802d840:	eba8 0606 	sub.w	r6, r8, r6
 802d844:	1b92      	subs	r2, r2, r6
 802d846:	690e      	ldr	r6, [r1, #16]
 802d848:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802d84c:	bf48      	it	mi
 802d84e:	3207      	addmi	r2, #7
 802d850:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802d854:	4432      	add	r2, r6
 802d856:	4572      	cmp	r2, lr
 802d858:	da05      	bge.n	802d866 <__tzcalc_limits+0x142>
 802d85a:	4413      	add	r3, r2
 802d85c:	e7a7      	b.n	802d7ae <__tzcalc_limits+0x8a>
 802d85e:	2601      	movs	r6, #1
 802d860:	e7d6      	b.n	802d810 <__tzcalc_limits+0xec>
 802d862:	4473      	add	r3, lr
 802d864:	e7df      	b.n	802d826 <__tzcalc_limits+0x102>
 802d866:	3a07      	subs	r2, #7
 802d868:	e7f5      	b.n	802d856 <__tzcalc_limits+0x132>
 802d86a:	2000      	movs	r0, #0
 802d86c:	e7b7      	b.n	802d7de <__tzcalc_limits+0xba>
 802d86e:	bf00      	nop
 802d870:	00015180 	.word	0x00015180
 802d874:	0803bd30 	.word	0x0803bd30

0802d878 <__tz_lock>:
 802d878:	4801      	ldr	r0, [pc, #4]	@ (802d880 <__tz_lock+0x8>)
 802d87a:	f000 bae1 	b.w	802de40 <__retarget_lock_acquire>
 802d87e:	bf00      	nop
 802d880:	2001a048 	.word	0x2001a048

0802d884 <__tz_unlock>:
 802d884:	4801      	ldr	r0, [pc, #4]	@ (802d88c <__tz_unlock+0x8>)
 802d886:	f000 badd 	b.w	802de44 <__retarget_lock_release>
 802d88a:	bf00      	nop
 802d88c:	2001a048 	.word	0x2001a048

0802d890 <_tzset_unlocked>:
 802d890:	4b01      	ldr	r3, [pc, #4]	@ (802d898 <_tzset_unlocked+0x8>)
 802d892:	6818      	ldr	r0, [r3, #0]
 802d894:	f000 b802 	b.w	802d89c <_tzset_unlocked_r>
 802d898:	200002d8 	.word	0x200002d8

0802d89c <_tzset_unlocked_r>:
 802d89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d8a0:	b08d      	sub	sp, #52	@ 0x34
 802d8a2:	4607      	mov	r7, r0
 802d8a4:	f007 fbe6 	bl	8035074 <__gettzinfo>
 802d8a8:	49bc      	ldr	r1, [pc, #752]	@ (802db9c <_tzset_unlocked_r+0x300>)
 802d8aa:	4dbd      	ldr	r5, [pc, #756]	@ (802dba0 <_tzset_unlocked_r+0x304>)
 802d8ac:	4604      	mov	r4, r0
 802d8ae:	4638      	mov	r0, r7
 802d8b0:	f001 fac8 	bl	802ee44 <_getenv_r>
 802d8b4:	4606      	mov	r6, r0
 802d8b6:	bb10      	cbnz	r0, 802d8fe <_tzset_unlocked_r+0x62>
 802d8b8:	4bba      	ldr	r3, [pc, #744]	@ (802dba4 <_tzset_unlocked_r+0x308>)
 802d8ba:	4abb      	ldr	r2, [pc, #748]	@ (802dba8 <_tzset_unlocked_r+0x30c>)
 802d8bc:	6018      	str	r0, [r3, #0]
 802d8be:	4bbb      	ldr	r3, [pc, #748]	@ (802dbac <_tzset_unlocked_r+0x310>)
 802d8c0:	62a0      	str	r0, [r4, #40]	@ 0x28
 802d8c2:	6018      	str	r0, [r3, #0]
 802d8c4:	4bba      	ldr	r3, [pc, #744]	@ (802dbb0 <_tzset_unlocked_r+0x314>)
 802d8c6:	6520      	str	r0, [r4, #80]	@ 0x50
 802d8c8:	e9c3 2200 	strd	r2, r2, [r3]
 802d8cc:	214a      	movs	r1, #74	@ 0x4a
 802d8ce:	2200      	movs	r2, #0
 802d8d0:	2300      	movs	r3, #0
 802d8d2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802d8d6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802d8da:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802d8de:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802d8e2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802d8e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802d8ea:	6828      	ldr	r0, [r5, #0]
 802d8ec:	7221      	strb	r1, [r4, #8]
 802d8ee:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802d8f2:	f001 fabb 	bl	802ee6c <free>
 802d8f6:	602e      	str	r6, [r5, #0]
 802d8f8:	b00d      	add	sp, #52	@ 0x34
 802d8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d8fe:	6829      	ldr	r1, [r5, #0]
 802d900:	2900      	cmp	r1, #0
 802d902:	f040 808e 	bne.w	802da22 <_tzset_unlocked_r+0x186>
 802d906:	6828      	ldr	r0, [r5, #0]
 802d908:	f001 fab0 	bl	802ee6c <free>
 802d90c:	4630      	mov	r0, r6
 802d90e:	f7e2 fcc7 	bl	80102a0 <strlen>
 802d912:	1c41      	adds	r1, r0, #1
 802d914:	4638      	mov	r0, r7
 802d916:	f001 fab1 	bl	802ee7c <_malloc_r>
 802d91a:	6028      	str	r0, [r5, #0]
 802d91c:	2800      	cmp	r0, #0
 802d91e:	f040 8086 	bne.w	802da2e <_tzset_unlocked_r+0x192>
 802d922:	4aa2      	ldr	r2, [pc, #648]	@ (802dbac <_tzset_unlocked_r+0x310>)
 802d924:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802dbb0 <_tzset_unlocked_r+0x314>
 802d928:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802dba4 <_tzset_unlocked_r+0x308>
 802d92c:	2300      	movs	r3, #0
 802d92e:	6013      	str	r3, [r2, #0]
 802d930:	4aa0      	ldr	r2, [pc, #640]	@ (802dbb4 <_tzset_unlocked_r+0x318>)
 802d932:	f8ca 3000 	str.w	r3, [sl]
 802d936:	2000      	movs	r0, #0
 802d938:	2100      	movs	r1, #0
 802d93a:	e9c8 2200 	strd	r2, r2, [r8]
 802d93e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802d942:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802d946:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802d94a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802d94e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802d952:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802d956:	224a      	movs	r2, #74	@ 0x4a
 802d958:	7222      	strb	r2, [r4, #8]
 802d95a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802d95c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802d960:	6523      	str	r3, [r4, #80]	@ 0x50
 802d962:	7833      	ldrb	r3, [r6, #0]
 802d964:	2b3a      	cmp	r3, #58	@ 0x3a
 802d966:	bf08      	it	eq
 802d968:	3601      	addeq	r6, #1
 802d96a:	7833      	ldrb	r3, [r6, #0]
 802d96c:	2b3c      	cmp	r3, #60	@ 0x3c
 802d96e:	d162      	bne.n	802da36 <_tzset_unlocked_r+0x19a>
 802d970:	1c75      	adds	r5, r6, #1
 802d972:	4a91      	ldr	r2, [pc, #580]	@ (802dbb8 <_tzset_unlocked_r+0x31c>)
 802d974:	4991      	ldr	r1, [pc, #580]	@ (802dbbc <_tzset_unlocked_r+0x320>)
 802d976:	ab0a      	add	r3, sp, #40	@ 0x28
 802d978:	4628      	mov	r0, r5
 802d97a:	f001 fccb 	bl	802f314 <siscanf>
 802d97e:	2800      	cmp	r0, #0
 802d980:	ddba      	ble.n	802d8f8 <_tzset_unlocked_r+0x5c>
 802d982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d984:	1eda      	subs	r2, r3, #3
 802d986:	2a07      	cmp	r2, #7
 802d988:	d8b6      	bhi.n	802d8f8 <_tzset_unlocked_r+0x5c>
 802d98a:	5ceb      	ldrb	r3, [r5, r3]
 802d98c:	2b3e      	cmp	r3, #62	@ 0x3e
 802d98e:	d1b3      	bne.n	802d8f8 <_tzset_unlocked_r+0x5c>
 802d990:	3602      	adds	r6, #2
 802d992:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d994:	18f5      	adds	r5, r6, r3
 802d996:	5cf3      	ldrb	r3, [r6, r3]
 802d998:	2b2d      	cmp	r3, #45	@ 0x2d
 802d99a:	d15a      	bne.n	802da52 <_tzset_unlocked_r+0x1b6>
 802d99c:	3501      	adds	r5, #1
 802d99e:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802d9a2:	2300      	movs	r3, #0
 802d9a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d9a8:	f8ad 3020 	strh.w	r3, [sp, #32]
 802d9ac:	af08      	add	r7, sp, #32
 802d9ae:	ab0a      	add	r3, sp, #40	@ 0x28
 802d9b0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802d9b4:	9303      	str	r3, [sp, #12]
 802d9b6:	f10d 031e 	add.w	r3, sp, #30
 802d9ba:	9300      	str	r3, [sp, #0]
 802d9bc:	4980      	ldr	r1, [pc, #512]	@ (802dbc0 <_tzset_unlocked_r+0x324>)
 802d9be:	ab0a      	add	r3, sp, #40	@ 0x28
 802d9c0:	aa07      	add	r2, sp, #28
 802d9c2:	4628      	mov	r0, r5
 802d9c4:	f001 fca6 	bl	802f314 <siscanf>
 802d9c8:	2800      	cmp	r0, #0
 802d9ca:	dd95      	ble.n	802d8f8 <_tzset_unlocked_r+0x5c>
 802d9cc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802d9d0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802d9d4:	223c      	movs	r2, #60	@ 0x3c
 802d9d6:	fb02 6603 	mla	r6, r2, r3, r6
 802d9da:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802d9de:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802d9e2:	fb02 6603 	mla	r6, r2, r3, r6
 802d9e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d9e8:	fb09 f606 	mul.w	r6, r9, r6
 802d9ec:	eb05 0903 	add.w	r9, r5, r3
 802d9f0:	5ceb      	ldrb	r3, [r5, r3]
 802d9f2:	2b3c      	cmp	r3, #60	@ 0x3c
 802d9f4:	f040 80ee 	bne.w	802dbd4 <_tzset_unlocked_r+0x338>
 802d9f8:	f109 0501 	add.w	r5, r9, #1
 802d9fc:	4a71      	ldr	r2, [pc, #452]	@ (802dbc4 <_tzset_unlocked_r+0x328>)
 802d9fe:	496f      	ldr	r1, [pc, #444]	@ (802dbbc <_tzset_unlocked_r+0x320>)
 802da00:	ab0a      	add	r3, sp, #40	@ 0x28
 802da02:	4628      	mov	r0, r5
 802da04:	f001 fc86 	bl	802f314 <siscanf>
 802da08:	2800      	cmp	r0, #0
 802da0a:	dc28      	bgt.n	802da5e <_tzset_unlocked_r+0x1c2>
 802da0c:	f899 3001 	ldrb.w	r3, [r9, #1]
 802da10:	2b3e      	cmp	r3, #62	@ 0x3e
 802da12:	d124      	bne.n	802da5e <_tzset_unlocked_r+0x1c2>
 802da14:	4b68      	ldr	r3, [pc, #416]	@ (802dbb8 <_tzset_unlocked_r+0x31c>)
 802da16:	62a6      	str	r6, [r4, #40]	@ 0x28
 802da18:	e9c8 3300 	strd	r3, r3, [r8]
 802da1c:	f8ca 6000 	str.w	r6, [sl]
 802da20:	e76a      	b.n	802d8f8 <_tzset_unlocked_r+0x5c>
 802da22:	f7e2 fbdd 	bl	80101e0 <strcmp>
 802da26:	2800      	cmp	r0, #0
 802da28:	f47f af6d 	bne.w	802d906 <_tzset_unlocked_r+0x6a>
 802da2c:	e764      	b.n	802d8f8 <_tzset_unlocked_r+0x5c>
 802da2e:	4631      	mov	r1, r6
 802da30:	f000 f9d8 	bl	802dde4 <strcpy>
 802da34:	e775      	b.n	802d922 <_tzset_unlocked_r+0x86>
 802da36:	4a60      	ldr	r2, [pc, #384]	@ (802dbb8 <_tzset_unlocked_r+0x31c>)
 802da38:	4963      	ldr	r1, [pc, #396]	@ (802dbc8 <_tzset_unlocked_r+0x32c>)
 802da3a:	ab0a      	add	r3, sp, #40	@ 0x28
 802da3c:	4630      	mov	r0, r6
 802da3e:	f001 fc69 	bl	802f314 <siscanf>
 802da42:	2800      	cmp	r0, #0
 802da44:	f77f af58 	ble.w	802d8f8 <_tzset_unlocked_r+0x5c>
 802da48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802da4a:	3b03      	subs	r3, #3
 802da4c:	2b07      	cmp	r3, #7
 802da4e:	d9a0      	bls.n	802d992 <_tzset_unlocked_r+0xf6>
 802da50:	e752      	b.n	802d8f8 <_tzset_unlocked_r+0x5c>
 802da52:	2b2b      	cmp	r3, #43	@ 0x2b
 802da54:	bf08      	it	eq
 802da56:	3501      	addeq	r5, #1
 802da58:	f04f 0901 	mov.w	r9, #1
 802da5c:	e7a1      	b.n	802d9a2 <_tzset_unlocked_r+0x106>
 802da5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802da60:	1eda      	subs	r2, r3, #3
 802da62:	2a07      	cmp	r2, #7
 802da64:	f63f af48 	bhi.w	802d8f8 <_tzset_unlocked_r+0x5c>
 802da68:	5ceb      	ldrb	r3, [r5, r3]
 802da6a:	2b3e      	cmp	r3, #62	@ 0x3e
 802da6c:	f47f af44 	bne.w	802d8f8 <_tzset_unlocked_r+0x5c>
 802da70:	f109 0902 	add.w	r9, r9, #2
 802da74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802da76:	eb09 0503 	add.w	r5, r9, r3
 802da7a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802da7e:	2b2d      	cmp	r3, #45	@ 0x2d
 802da80:	f040 80b7 	bne.w	802dbf2 <_tzset_unlocked_r+0x356>
 802da84:	3501      	adds	r5, #1
 802da86:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802da8a:	2300      	movs	r3, #0
 802da8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 802da90:	f8ad 301e 	strh.w	r3, [sp, #30]
 802da94:	f8ad 3020 	strh.w	r3, [sp, #32]
 802da98:	930a      	str	r3, [sp, #40]	@ 0x28
 802da9a:	ab0a      	add	r3, sp, #40	@ 0x28
 802da9c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802daa0:	9301      	str	r3, [sp, #4]
 802daa2:	f10d 031e 	add.w	r3, sp, #30
 802daa6:	9300      	str	r3, [sp, #0]
 802daa8:	4945      	ldr	r1, [pc, #276]	@ (802dbc0 <_tzset_unlocked_r+0x324>)
 802daaa:	ab0a      	add	r3, sp, #40	@ 0x28
 802daac:	aa07      	add	r2, sp, #28
 802daae:	4628      	mov	r0, r5
 802dab0:	f001 fc30 	bl	802f314 <siscanf>
 802dab4:	2800      	cmp	r0, #0
 802dab6:	f300 80a2 	bgt.w	802dbfe <_tzset_unlocked_r+0x362>
 802daba:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802dabe:	9304      	str	r3, [sp, #16]
 802dac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dac2:	4627      	mov	r7, r4
 802dac4:	441d      	add	r5, r3
 802dac6:	f04f 0b00 	mov.w	fp, #0
 802daca:	782b      	ldrb	r3, [r5, #0]
 802dacc:	2b2c      	cmp	r3, #44	@ 0x2c
 802dace:	bf08      	it	eq
 802dad0:	3501      	addeq	r5, #1
 802dad2:	f895 9000 	ldrb.w	r9, [r5]
 802dad6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802dada:	f040 80a3 	bne.w	802dc24 <_tzset_unlocked_r+0x388>
 802dade:	ab0a      	add	r3, sp, #40	@ 0x28
 802dae0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802dae4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802dae8:	aa09      	add	r2, sp, #36	@ 0x24
 802daea:	9200      	str	r2, [sp, #0]
 802daec:	4937      	ldr	r1, [pc, #220]	@ (802dbcc <_tzset_unlocked_r+0x330>)
 802daee:	9303      	str	r3, [sp, #12]
 802daf0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802daf4:	4628      	mov	r0, r5
 802daf6:	f001 fc0d 	bl	802f314 <siscanf>
 802dafa:	2803      	cmp	r0, #3
 802dafc:	f47f aefc 	bne.w	802d8f8 <_tzset_unlocked_r+0x5c>
 802db00:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802db04:	1e4b      	subs	r3, r1, #1
 802db06:	2b0b      	cmp	r3, #11
 802db08:	f63f aef6 	bhi.w	802d8f8 <_tzset_unlocked_r+0x5c>
 802db0c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802db10:	1e53      	subs	r3, r2, #1
 802db12:	2b04      	cmp	r3, #4
 802db14:	f63f aef0 	bhi.w	802d8f8 <_tzset_unlocked_r+0x5c>
 802db18:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802db1c:	2b06      	cmp	r3, #6
 802db1e:	f63f aeeb 	bhi.w	802d8f8 <_tzset_unlocked_r+0x5c>
 802db22:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802db26:	f887 9008 	strb.w	r9, [r7, #8]
 802db2a:	617b      	str	r3, [r7, #20]
 802db2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802db2e:	eb05 0903 	add.w	r9, r5, r3
 802db32:	2500      	movs	r5, #0
 802db34:	f04f 0302 	mov.w	r3, #2
 802db38:	f8ad 301c 	strh.w	r3, [sp, #28]
 802db3c:	f8ad 501e 	strh.w	r5, [sp, #30]
 802db40:	f8ad 5020 	strh.w	r5, [sp, #32]
 802db44:	950a      	str	r5, [sp, #40]	@ 0x28
 802db46:	f899 3000 	ldrb.w	r3, [r9]
 802db4a:	2b2f      	cmp	r3, #47	@ 0x2f
 802db4c:	f040 8096 	bne.w	802dc7c <_tzset_unlocked_r+0x3e0>
 802db50:	ab0a      	add	r3, sp, #40	@ 0x28
 802db52:	aa08      	add	r2, sp, #32
 802db54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802db58:	f10d 021e 	add.w	r2, sp, #30
 802db5c:	9200      	str	r2, [sp, #0]
 802db5e:	491c      	ldr	r1, [pc, #112]	@ (802dbd0 <_tzset_unlocked_r+0x334>)
 802db60:	9303      	str	r3, [sp, #12]
 802db62:	aa07      	add	r2, sp, #28
 802db64:	4648      	mov	r0, r9
 802db66:	f001 fbd5 	bl	802f314 <siscanf>
 802db6a:	42a8      	cmp	r0, r5
 802db6c:	f300 8086 	bgt.w	802dc7c <_tzset_unlocked_r+0x3e0>
 802db70:	214a      	movs	r1, #74	@ 0x4a
 802db72:	2200      	movs	r2, #0
 802db74:	2300      	movs	r3, #0
 802db76:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802db7a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802db7e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802db82:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802db86:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802db8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802db8e:	7221      	strb	r1, [r4, #8]
 802db90:	62a5      	str	r5, [r4, #40]	@ 0x28
 802db92:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802db96:	6525      	str	r5, [r4, #80]	@ 0x50
 802db98:	e6ae      	b.n	802d8f8 <_tzset_unlocked_r+0x5c>
 802db9a:	bf00      	nop
 802db9c:	0803bdfc 	.word	0x0803bdfc
 802dba0:	2001a020 	.word	0x2001a020
 802dba4:	2001a03c 	.word	0x2001a03c
 802dba8:	0803bdff 	.word	0x0803bdff
 802dbac:	2001a040 	.word	0x2001a040
 802dbb0:	20000164 	.word	0x20000164
 802dbb4:	0803bcbe 	.word	0x0803bcbe
 802dbb8:	2001a030 	.word	0x2001a030
 802dbbc:	0803be03 	.word	0x0803be03
 802dbc0:	0803be38 	.word	0x0803be38
 802dbc4:	2001a024 	.word	0x2001a024
 802dbc8:	0803be16 	.word	0x0803be16
 802dbcc:	0803be24 	.word	0x0803be24
 802dbd0:	0803be37 	.word	0x0803be37
 802dbd4:	4a3e      	ldr	r2, [pc, #248]	@ (802dcd0 <_tzset_unlocked_r+0x434>)
 802dbd6:	493f      	ldr	r1, [pc, #252]	@ (802dcd4 <_tzset_unlocked_r+0x438>)
 802dbd8:	ab0a      	add	r3, sp, #40	@ 0x28
 802dbda:	4648      	mov	r0, r9
 802dbdc:	f001 fb9a 	bl	802f314 <siscanf>
 802dbe0:	2800      	cmp	r0, #0
 802dbe2:	f77f af17 	ble.w	802da14 <_tzset_unlocked_r+0x178>
 802dbe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dbe8:	3b03      	subs	r3, #3
 802dbea:	2b07      	cmp	r3, #7
 802dbec:	f67f af42 	bls.w	802da74 <_tzset_unlocked_r+0x1d8>
 802dbf0:	e682      	b.n	802d8f8 <_tzset_unlocked_r+0x5c>
 802dbf2:	2b2b      	cmp	r3, #43	@ 0x2b
 802dbf4:	bf08      	it	eq
 802dbf6:	3501      	addeq	r5, #1
 802dbf8:	f04f 0901 	mov.w	r9, #1
 802dbfc:	e745      	b.n	802da8a <_tzset_unlocked_r+0x1ee>
 802dbfe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802dc02:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802dc06:	213c      	movs	r1, #60	@ 0x3c
 802dc08:	fb01 3302 	mla	r3, r1, r2, r3
 802dc0c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802dc10:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802dc14:	fb01 3302 	mla	r3, r1, r2, r3
 802dc18:	fb09 f303 	mul.w	r3, r9, r3
 802dc1c:	e74f      	b.n	802dabe <_tzset_unlocked_r+0x222>
 802dc1e:	f04f 0b01 	mov.w	fp, #1
 802dc22:	e752      	b.n	802daca <_tzset_unlocked_r+0x22e>
 802dc24:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802dc28:	bf06      	itte	eq
 802dc2a:	3501      	addeq	r5, #1
 802dc2c:	464b      	moveq	r3, r9
 802dc2e:	2344      	movne	r3, #68	@ 0x44
 802dc30:	220a      	movs	r2, #10
 802dc32:	a90b      	add	r1, sp, #44	@ 0x2c
 802dc34:	4628      	mov	r0, r5
 802dc36:	9305      	str	r3, [sp, #20]
 802dc38:	f007 f950 	bl	8034edc <strtoul>
 802dc3c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802dc40:	9b05      	ldr	r3, [sp, #20]
 802dc42:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802dc46:	45a9      	cmp	r9, r5
 802dc48:	d114      	bne.n	802dc74 <_tzset_unlocked_r+0x3d8>
 802dc4a:	234d      	movs	r3, #77	@ 0x4d
 802dc4c:	f1bb 0f00 	cmp.w	fp, #0
 802dc50:	d107      	bne.n	802dc62 <_tzset_unlocked_r+0x3c6>
 802dc52:	7223      	strb	r3, [r4, #8]
 802dc54:	2103      	movs	r1, #3
 802dc56:	2302      	movs	r3, #2
 802dc58:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802dc5c:	f8c4 b014 	str.w	fp, [r4, #20]
 802dc60:	e767      	b.n	802db32 <_tzset_unlocked_r+0x296>
 802dc62:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802dc66:	220b      	movs	r2, #11
 802dc68:	2301      	movs	r3, #1
 802dc6a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802dc6e:	2300      	movs	r3, #0
 802dc70:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802dc72:	e75e      	b.n	802db32 <_tzset_unlocked_r+0x296>
 802dc74:	b280      	uxth	r0, r0
 802dc76:	723b      	strb	r3, [r7, #8]
 802dc78:	6178      	str	r0, [r7, #20]
 802dc7a:	e75a      	b.n	802db32 <_tzset_unlocked_r+0x296>
 802dc7c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802dc80:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802dc84:	213c      	movs	r1, #60	@ 0x3c
 802dc86:	fb01 3302 	mla	r3, r1, r2, r3
 802dc8a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802dc8e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802dc92:	fb01 3302 	mla	r3, r1, r2, r3
 802dc96:	61bb      	str	r3, [r7, #24]
 802dc98:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802dc9a:	3728      	adds	r7, #40	@ 0x28
 802dc9c:	444d      	add	r5, r9
 802dc9e:	f1bb 0f00 	cmp.w	fp, #0
 802dca2:	d0bc      	beq.n	802dc1e <_tzset_unlocked_r+0x382>
 802dca4:	9b04      	ldr	r3, [sp, #16]
 802dca6:	6523      	str	r3, [r4, #80]	@ 0x50
 802dca8:	4b0b      	ldr	r3, [pc, #44]	@ (802dcd8 <_tzset_unlocked_r+0x43c>)
 802dcaa:	f8c8 3000 	str.w	r3, [r8]
 802dcae:	6860      	ldr	r0, [r4, #4]
 802dcb0:	4b07      	ldr	r3, [pc, #28]	@ (802dcd0 <_tzset_unlocked_r+0x434>)
 802dcb2:	62a6      	str	r6, [r4, #40]	@ 0x28
 802dcb4:	f8c8 3004 	str.w	r3, [r8, #4]
 802dcb8:	f7ff fd34 	bl	802d724 <__tzcalc_limits>
 802dcbc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802dcbe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802dcc0:	f8ca 2000 	str.w	r2, [sl]
 802dcc4:	1a9b      	subs	r3, r3, r2
 802dcc6:	4a05      	ldr	r2, [pc, #20]	@ (802dcdc <_tzset_unlocked_r+0x440>)
 802dcc8:	bf18      	it	ne
 802dcca:	2301      	movne	r3, #1
 802dccc:	6013      	str	r3, [r2, #0]
 802dcce:	e613      	b.n	802d8f8 <_tzset_unlocked_r+0x5c>
 802dcd0:	2001a024 	.word	0x2001a024
 802dcd4:	0803be16 	.word	0x0803be16
 802dcd8:	2001a030 	.word	0x2001a030
 802dcdc:	2001a040 	.word	0x2001a040

0802dce0 <__locale_mb_cur_max>:
 802dce0:	4b01      	ldr	r3, [pc, #4]	@ (802dce8 <__locale_mb_cur_max+0x8>)
 802dce2:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802dce6:	4770      	bx	lr
 802dce8:	2000016c 	.word	0x2000016c

0802dcec <_localeconv_r>:
 802dcec:	4800      	ldr	r0, [pc, #0]	@ (802dcf0 <_localeconv_r+0x4>)
 802dcee:	4770      	bx	lr
 802dcf0:	2000025c 	.word	0x2000025c

0802dcf4 <_close_r>:
 802dcf4:	b538      	push	{r3, r4, r5, lr}
 802dcf6:	4d06      	ldr	r5, [pc, #24]	@ (802dd10 <_close_r+0x1c>)
 802dcf8:	2300      	movs	r3, #0
 802dcfa:	4604      	mov	r4, r0
 802dcfc:	4608      	mov	r0, r1
 802dcfe:	602b      	str	r3, [r5, #0]
 802dd00:	f7e4 fb6c 	bl	80123dc <_close>
 802dd04:	1c43      	adds	r3, r0, #1
 802dd06:	d102      	bne.n	802dd0e <_close_r+0x1a>
 802dd08:	682b      	ldr	r3, [r5, #0]
 802dd0a:	b103      	cbz	r3, 802dd0e <_close_r+0x1a>
 802dd0c:	6023      	str	r3, [r4, #0]
 802dd0e:	bd38      	pop	{r3, r4, r5, pc}
 802dd10:	2001a044 	.word	0x2001a044

0802dd14 <_reclaim_reent>:
 802dd14:	4b14      	ldr	r3, [pc, #80]	@ (802dd68 <_reclaim_reent+0x54>)
 802dd16:	681b      	ldr	r3, [r3, #0]
 802dd18:	4283      	cmp	r3, r0
 802dd1a:	b570      	push	{r4, r5, r6, lr}
 802dd1c:	4604      	mov	r4, r0
 802dd1e:	d022      	beq.n	802dd66 <_reclaim_reent+0x52>
 802dd20:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802dd22:	b153      	cbz	r3, 802dd3a <_reclaim_reent+0x26>
 802dd24:	2500      	movs	r5, #0
 802dd26:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802dd28:	5959      	ldr	r1, [r3, r5]
 802dd2a:	b9b1      	cbnz	r1, 802dd5a <_reclaim_reent+0x46>
 802dd2c:	3504      	adds	r5, #4
 802dd2e:	2d80      	cmp	r5, #128	@ 0x80
 802dd30:	d1f9      	bne.n	802dd26 <_reclaim_reent+0x12>
 802dd32:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802dd34:	4620      	mov	r0, r4
 802dd36:	f000 ff89 	bl	802ec4c <_free_r>
 802dd3a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802dd3c:	b111      	cbz	r1, 802dd44 <_reclaim_reent+0x30>
 802dd3e:	4620      	mov	r0, r4
 802dd40:	f000 ff84 	bl	802ec4c <_free_r>
 802dd44:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802dd46:	b111      	cbz	r1, 802dd4e <_reclaim_reent+0x3a>
 802dd48:	4620      	mov	r0, r4
 802dd4a:	f000 ff7f 	bl	802ec4c <_free_r>
 802dd4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802dd50:	b14b      	cbz	r3, 802dd66 <_reclaim_reent+0x52>
 802dd52:	4620      	mov	r0, r4
 802dd54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802dd58:	4718      	bx	r3
 802dd5a:	680e      	ldr	r6, [r1, #0]
 802dd5c:	4620      	mov	r0, r4
 802dd5e:	f000 ff75 	bl	802ec4c <_free_r>
 802dd62:	4631      	mov	r1, r6
 802dd64:	e7e1      	b.n	802dd2a <_reclaim_reent+0x16>
 802dd66:	bd70      	pop	{r4, r5, r6, pc}
 802dd68:	200002d8 	.word	0x200002d8

0802dd6c <_lseek_r>:
 802dd6c:	b538      	push	{r3, r4, r5, lr}
 802dd6e:	4d07      	ldr	r5, [pc, #28]	@ (802dd8c <_lseek_r+0x20>)
 802dd70:	4604      	mov	r4, r0
 802dd72:	4608      	mov	r0, r1
 802dd74:	4611      	mov	r1, r2
 802dd76:	2200      	movs	r2, #0
 802dd78:	602a      	str	r2, [r5, #0]
 802dd7a:	461a      	mov	r2, r3
 802dd7c:	f7e4 fb38 	bl	80123f0 <_lseek>
 802dd80:	1c43      	adds	r3, r0, #1
 802dd82:	d102      	bne.n	802dd8a <_lseek_r+0x1e>
 802dd84:	682b      	ldr	r3, [r5, #0]
 802dd86:	b103      	cbz	r3, 802dd8a <_lseek_r+0x1e>
 802dd88:	6023      	str	r3, [r4, #0]
 802dd8a:	bd38      	pop	{r3, r4, r5, pc}
 802dd8c:	2001a044 	.word	0x2001a044

0802dd90 <_read_r>:
 802dd90:	b538      	push	{r3, r4, r5, lr}
 802dd92:	4d07      	ldr	r5, [pc, #28]	@ (802ddb0 <_read_r+0x20>)
 802dd94:	4604      	mov	r4, r0
 802dd96:	4608      	mov	r0, r1
 802dd98:	4611      	mov	r1, r2
 802dd9a:	2200      	movs	r2, #0
 802dd9c:	602a      	str	r2, [r5, #0]
 802dd9e:	461a      	mov	r2, r3
 802dda0:	f7e4 fafe 	bl	80123a0 <_read>
 802dda4:	1c43      	adds	r3, r0, #1
 802dda6:	d102      	bne.n	802ddae <_read_r+0x1e>
 802dda8:	682b      	ldr	r3, [r5, #0]
 802ddaa:	b103      	cbz	r3, 802ddae <_read_r+0x1e>
 802ddac:	6023      	str	r3, [r4, #0]
 802ddae:	bd38      	pop	{r3, r4, r5, pc}
 802ddb0:	2001a044 	.word	0x2001a044

0802ddb4 <_write_r>:
 802ddb4:	b538      	push	{r3, r4, r5, lr}
 802ddb6:	4d07      	ldr	r5, [pc, #28]	@ (802ddd4 <_write_r+0x20>)
 802ddb8:	4604      	mov	r4, r0
 802ddba:	4608      	mov	r0, r1
 802ddbc:	4611      	mov	r1, r2
 802ddbe:	2200      	movs	r2, #0
 802ddc0:	602a      	str	r2, [r5, #0]
 802ddc2:	461a      	mov	r2, r3
 802ddc4:	f7e4 fafc 	bl	80123c0 <_write>
 802ddc8:	1c43      	adds	r3, r0, #1
 802ddca:	d102      	bne.n	802ddd2 <_write_r+0x1e>
 802ddcc:	682b      	ldr	r3, [r5, #0]
 802ddce:	b103      	cbz	r3, 802ddd2 <_write_r+0x1e>
 802ddd0:	6023      	str	r3, [r4, #0]
 802ddd2:	bd38      	pop	{r3, r4, r5, pc}
 802ddd4:	2001a044 	.word	0x2001a044

0802ddd8 <__errno>:
 802ddd8:	4b01      	ldr	r3, [pc, #4]	@ (802dde0 <__errno+0x8>)
 802ddda:	6818      	ldr	r0, [r3, #0]
 802dddc:	4770      	bx	lr
 802ddde:	bf00      	nop
 802dde0:	200002d8 	.word	0x200002d8

0802dde4 <strcpy>:
 802dde4:	4603      	mov	r3, r0
 802dde6:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ddea:	f803 2b01 	strb.w	r2, [r3], #1
 802ddee:	2a00      	cmp	r2, #0
 802ddf0:	d1f9      	bne.n	802dde6 <strcpy+0x2>
 802ddf2:	4770      	bx	lr

0802ddf4 <__libc_init_array>:
 802ddf4:	b570      	push	{r4, r5, r6, lr}
 802ddf6:	4d0d      	ldr	r5, [pc, #52]	@ (802de2c <__libc_init_array+0x38>)
 802ddf8:	4c0d      	ldr	r4, [pc, #52]	@ (802de30 <__libc_init_array+0x3c>)
 802ddfa:	1b64      	subs	r4, r4, r5
 802ddfc:	10a4      	asrs	r4, r4, #2
 802ddfe:	2600      	movs	r6, #0
 802de00:	42a6      	cmp	r6, r4
 802de02:	d109      	bne.n	802de18 <__libc_init_array+0x24>
 802de04:	4d0b      	ldr	r5, [pc, #44]	@ (802de34 <__libc_init_array+0x40>)
 802de06:	4c0c      	ldr	r4, [pc, #48]	@ (802de38 <__libc_init_array+0x44>)
 802de08:	f007 ff60 	bl	8035ccc <_init>
 802de0c:	1b64      	subs	r4, r4, r5
 802de0e:	10a4      	asrs	r4, r4, #2
 802de10:	2600      	movs	r6, #0
 802de12:	42a6      	cmp	r6, r4
 802de14:	d105      	bne.n	802de22 <__libc_init_array+0x2e>
 802de16:	bd70      	pop	{r4, r5, r6, pc}
 802de18:	f855 3b04 	ldr.w	r3, [r5], #4
 802de1c:	4798      	blx	r3
 802de1e:	3601      	adds	r6, #1
 802de20:	e7ee      	b.n	802de00 <__libc_init_array+0xc>
 802de22:	f855 3b04 	ldr.w	r3, [r5], #4
 802de26:	4798      	blx	r3
 802de28:	3601      	adds	r6, #1
 802de2a:	e7f2      	b.n	802de12 <__libc_init_array+0x1e>
 802de2c:	0803c490 	.word	0x0803c490
 802de30:	0803c490 	.word	0x0803c490
 802de34:	0803c490 	.word	0x0803c490
 802de38:	0803c498 	.word	0x0803c498

0802de3c <__retarget_lock_init_recursive>:
 802de3c:	4770      	bx	lr

0802de3e <__retarget_lock_close_recursive>:
 802de3e:	4770      	bx	lr

0802de40 <__retarget_lock_acquire>:
 802de40:	4770      	bx	lr

0802de42 <__retarget_lock_acquire_recursive>:
 802de42:	4770      	bx	lr

0802de44 <__retarget_lock_release>:
 802de44:	4770      	bx	lr

0802de46 <__retarget_lock_release_recursive>:
 802de46:	4770      	bx	lr

0802de48 <memcpy>:
 802de48:	440a      	add	r2, r1
 802de4a:	4291      	cmp	r1, r2
 802de4c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802de50:	d100      	bne.n	802de54 <memcpy+0xc>
 802de52:	4770      	bx	lr
 802de54:	b510      	push	{r4, lr}
 802de56:	f811 4b01 	ldrb.w	r4, [r1], #1
 802de5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802de5e:	4291      	cmp	r1, r2
 802de60:	d1f9      	bne.n	802de56 <memcpy+0xe>
 802de62:	bd10      	pop	{r4, pc}

0802de64 <_wcrtomb_r>:
 802de64:	b5f0      	push	{r4, r5, r6, r7, lr}
 802de66:	4c09      	ldr	r4, [pc, #36]	@ (802de8c <_wcrtomb_r+0x28>)
 802de68:	b085      	sub	sp, #20
 802de6a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802de6e:	4605      	mov	r5, r0
 802de70:	461e      	mov	r6, r3
 802de72:	b909      	cbnz	r1, 802de78 <_wcrtomb_r+0x14>
 802de74:	460a      	mov	r2, r1
 802de76:	a901      	add	r1, sp, #4
 802de78:	47b8      	blx	r7
 802de7a:	1c43      	adds	r3, r0, #1
 802de7c:	bf01      	itttt	eq
 802de7e:	2300      	moveq	r3, #0
 802de80:	6033      	streq	r3, [r6, #0]
 802de82:	238a      	moveq	r3, #138	@ 0x8a
 802de84:	602b      	streq	r3, [r5, #0]
 802de86:	b005      	add	sp, #20
 802de88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802de8a:	bf00      	nop
 802de8c:	2000016c 	.word	0x2000016c

0802de90 <frexp>:
 802de90:	b570      	push	{r4, r5, r6, lr}
 802de92:	2100      	movs	r1, #0
 802de94:	ec55 4b10 	vmov	r4, r5, d0
 802de98:	6001      	str	r1, [r0, #0]
 802de9a:	4915      	ldr	r1, [pc, #84]	@ (802def0 <frexp+0x60>)
 802de9c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802dea0:	428a      	cmp	r2, r1
 802dea2:	4606      	mov	r6, r0
 802dea4:	462b      	mov	r3, r5
 802dea6:	d820      	bhi.n	802deea <frexp+0x5a>
 802dea8:	4621      	mov	r1, r4
 802deaa:	4311      	orrs	r1, r2
 802deac:	d01d      	beq.n	802deea <frexp+0x5a>
 802deae:	4911      	ldr	r1, [pc, #68]	@ (802def4 <frexp+0x64>)
 802deb0:	4029      	ands	r1, r5
 802deb2:	b961      	cbnz	r1, 802dece <frexp+0x3e>
 802deb4:	4b10      	ldr	r3, [pc, #64]	@ (802def8 <frexp+0x68>)
 802deb6:	2200      	movs	r2, #0
 802deb8:	4620      	mov	r0, r4
 802deba:	4629      	mov	r1, r5
 802debc:	f7e2 fbb4 	bl	8010628 <__aeabi_dmul>
 802dec0:	460b      	mov	r3, r1
 802dec2:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 802dec6:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802deca:	4604      	mov	r4, r0
 802decc:	6031      	str	r1, [r6, #0]
 802dece:	6831      	ldr	r1, [r6, #0]
 802ded0:	1512      	asrs	r2, r2, #20
 802ded2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802ded6:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802deda:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802dede:	4411      	add	r1, r2
 802dee0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 802dee4:	6031      	str	r1, [r6, #0]
 802dee6:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802deea:	ec45 4b10 	vmov	d0, r4, r5
 802deee:	bd70      	pop	{r4, r5, r6, pc}
 802def0:	7fefffff 	.word	0x7fefffff
 802def4:	7ff00000 	.word	0x7ff00000
 802def8:	43500000 	.word	0x43500000

0802defc <register_fini>:
 802defc:	4b02      	ldr	r3, [pc, #8]	@ (802df08 <register_fini+0xc>)
 802defe:	b113      	cbz	r3, 802df06 <register_fini+0xa>
 802df00:	4802      	ldr	r0, [pc, #8]	@ (802df0c <register_fini+0x10>)
 802df02:	f000 b810 	b.w	802df26 <atexit>
 802df06:	4770      	bx	lr
 802df08:	00000000 	.word	0x00000000
 802df0c:	0803538d 	.word	0x0803538d

0802df10 <abort>:
 802df10:	b508      	push	{r3, lr}
 802df12:	2006      	movs	r0, #6
 802df14:	f007 f8a6 	bl	8035064 <raise>
 802df18:	2001      	movs	r0, #1
 802df1a:	f7e4 fa3b 	bl	8012394 <_exit>

0802df1e <abs>:
 802df1e:	2800      	cmp	r0, #0
 802df20:	bfb8      	it	lt
 802df22:	4240      	neglt	r0, r0
 802df24:	4770      	bx	lr

0802df26 <atexit>:
 802df26:	2300      	movs	r3, #0
 802df28:	4601      	mov	r1, r0
 802df2a:	461a      	mov	r2, r3
 802df2c:	4618      	mov	r0, r3
 802df2e:	f007 bb01 	b.w	8035534 <__register_exitproc>

0802df32 <quorem>:
 802df32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802df36:	6903      	ldr	r3, [r0, #16]
 802df38:	690c      	ldr	r4, [r1, #16]
 802df3a:	42a3      	cmp	r3, r4
 802df3c:	4607      	mov	r7, r0
 802df3e:	db7e      	blt.n	802e03e <quorem+0x10c>
 802df40:	3c01      	subs	r4, #1
 802df42:	f101 0814 	add.w	r8, r1, #20
 802df46:	00a3      	lsls	r3, r4, #2
 802df48:	f100 0514 	add.w	r5, r0, #20
 802df4c:	9300      	str	r3, [sp, #0]
 802df4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802df52:	9301      	str	r3, [sp, #4]
 802df54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802df58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802df5c:	3301      	adds	r3, #1
 802df5e:	429a      	cmp	r2, r3
 802df60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802df64:	fbb2 f6f3 	udiv	r6, r2, r3
 802df68:	d32e      	bcc.n	802dfc8 <quorem+0x96>
 802df6a:	f04f 0a00 	mov.w	sl, #0
 802df6e:	46c4      	mov	ip, r8
 802df70:	46ae      	mov	lr, r5
 802df72:	46d3      	mov	fp, sl
 802df74:	f85c 3b04 	ldr.w	r3, [ip], #4
 802df78:	b298      	uxth	r0, r3
 802df7a:	fb06 a000 	mla	r0, r6, r0, sl
 802df7e:	0c02      	lsrs	r2, r0, #16
 802df80:	0c1b      	lsrs	r3, r3, #16
 802df82:	fb06 2303 	mla	r3, r6, r3, r2
 802df86:	f8de 2000 	ldr.w	r2, [lr]
 802df8a:	b280      	uxth	r0, r0
 802df8c:	b292      	uxth	r2, r2
 802df8e:	1a12      	subs	r2, r2, r0
 802df90:	445a      	add	r2, fp
 802df92:	f8de 0000 	ldr.w	r0, [lr]
 802df96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802df9a:	b29b      	uxth	r3, r3
 802df9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802dfa0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802dfa4:	b292      	uxth	r2, r2
 802dfa6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802dfaa:	45e1      	cmp	r9, ip
 802dfac:	f84e 2b04 	str.w	r2, [lr], #4
 802dfb0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802dfb4:	d2de      	bcs.n	802df74 <quorem+0x42>
 802dfb6:	9b00      	ldr	r3, [sp, #0]
 802dfb8:	58eb      	ldr	r3, [r5, r3]
 802dfba:	b92b      	cbnz	r3, 802dfc8 <quorem+0x96>
 802dfbc:	9b01      	ldr	r3, [sp, #4]
 802dfbe:	3b04      	subs	r3, #4
 802dfc0:	429d      	cmp	r5, r3
 802dfc2:	461a      	mov	r2, r3
 802dfc4:	d32f      	bcc.n	802e026 <quorem+0xf4>
 802dfc6:	613c      	str	r4, [r7, #16]
 802dfc8:	4638      	mov	r0, r7
 802dfca:	f005 fce3 	bl	8033994 <__mcmp>
 802dfce:	2800      	cmp	r0, #0
 802dfd0:	db25      	blt.n	802e01e <quorem+0xec>
 802dfd2:	4629      	mov	r1, r5
 802dfd4:	2000      	movs	r0, #0
 802dfd6:	f858 2b04 	ldr.w	r2, [r8], #4
 802dfda:	f8d1 c000 	ldr.w	ip, [r1]
 802dfde:	fa1f fe82 	uxth.w	lr, r2
 802dfe2:	fa1f f38c 	uxth.w	r3, ip
 802dfe6:	eba3 030e 	sub.w	r3, r3, lr
 802dfea:	4403      	add	r3, r0
 802dfec:	0c12      	lsrs	r2, r2, #16
 802dfee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802dff2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802dff6:	b29b      	uxth	r3, r3
 802dff8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802dffc:	45c1      	cmp	r9, r8
 802dffe:	f841 3b04 	str.w	r3, [r1], #4
 802e002:	ea4f 4022 	mov.w	r0, r2, asr #16
 802e006:	d2e6      	bcs.n	802dfd6 <quorem+0xa4>
 802e008:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802e00c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802e010:	b922      	cbnz	r2, 802e01c <quorem+0xea>
 802e012:	3b04      	subs	r3, #4
 802e014:	429d      	cmp	r5, r3
 802e016:	461a      	mov	r2, r3
 802e018:	d30b      	bcc.n	802e032 <quorem+0x100>
 802e01a:	613c      	str	r4, [r7, #16]
 802e01c:	3601      	adds	r6, #1
 802e01e:	4630      	mov	r0, r6
 802e020:	b003      	add	sp, #12
 802e022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e026:	6812      	ldr	r2, [r2, #0]
 802e028:	3b04      	subs	r3, #4
 802e02a:	2a00      	cmp	r2, #0
 802e02c:	d1cb      	bne.n	802dfc6 <quorem+0x94>
 802e02e:	3c01      	subs	r4, #1
 802e030:	e7c6      	b.n	802dfc0 <quorem+0x8e>
 802e032:	6812      	ldr	r2, [r2, #0]
 802e034:	3b04      	subs	r3, #4
 802e036:	2a00      	cmp	r2, #0
 802e038:	d1ef      	bne.n	802e01a <quorem+0xe8>
 802e03a:	3c01      	subs	r4, #1
 802e03c:	e7ea      	b.n	802e014 <quorem+0xe2>
 802e03e:	2000      	movs	r0, #0
 802e040:	e7ee      	b.n	802e020 <quorem+0xee>
 802e042:	0000      	movs	r0, r0
 802e044:	0000      	movs	r0, r0
	...

0802e048 <_dtoa_r>:
 802e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e04c:	b099      	sub	sp, #100	@ 0x64
 802e04e:	ed8d 0b02 	vstr	d0, [sp, #8]
 802e052:	9109      	str	r1, [sp, #36]	@ 0x24
 802e054:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 802e056:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802e058:	920e      	str	r2, [sp, #56]	@ 0x38
 802e05a:	ec55 4b10 	vmov	r4, r5, d0
 802e05e:	4683      	mov	fp, r0
 802e060:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e062:	b149      	cbz	r1, 802e078 <_dtoa_r+0x30>
 802e064:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802e066:	604a      	str	r2, [r1, #4]
 802e068:	2301      	movs	r3, #1
 802e06a:	4093      	lsls	r3, r2
 802e06c:	608b      	str	r3, [r1, #8]
 802e06e:	f005 fa40 	bl	80334f2 <_Bfree>
 802e072:	2300      	movs	r3, #0
 802e074:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 802e078:	1e2b      	subs	r3, r5, #0
 802e07a:	bfb9      	ittee	lt
 802e07c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802e080:	9303      	strlt	r3, [sp, #12]
 802e082:	2300      	movge	r3, #0
 802e084:	6033      	strge	r3, [r6, #0]
 802e086:	9f03      	ldr	r7, [sp, #12]
 802e088:	4b97      	ldr	r3, [pc, #604]	@ (802e2e8 <_dtoa_r+0x2a0>)
 802e08a:	bfbc      	itt	lt
 802e08c:	2201      	movlt	r2, #1
 802e08e:	6032      	strlt	r2, [r6, #0]
 802e090:	43bb      	bics	r3, r7
 802e092:	d114      	bne.n	802e0be <_dtoa_r+0x76>
 802e094:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e096:	f242 730f 	movw	r3, #9999	@ 0x270f
 802e09a:	6013      	str	r3, [r2, #0]
 802e09c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802e0a0:	4323      	orrs	r3, r4
 802e0a2:	f000 854c 	beq.w	802eb3e <_dtoa_r+0xaf6>
 802e0a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e0a8:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802e300 <_dtoa_r+0x2b8>
 802e0ac:	b11b      	cbz	r3, 802e0b6 <_dtoa_r+0x6e>
 802e0ae:	f10a 0303 	add.w	r3, sl, #3
 802e0b2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802e0b4:	6013      	str	r3, [r2, #0]
 802e0b6:	4650      	mov	r0, sl
 802e0b8:	b019      	add	sp, #100	@ 0x64
 802e0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e0be:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e0c2:	2200      	movs	r2, #0
 802e0c4:	ec51 0b17 	vmov	r0, r1, d7
 802e0c8:	2300      	movs	r3, #0
 802e0ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802e0ce:	f7e2 fd13 	bl	8010af8 <__aeabi_dcmpeq>
 802e0d2:	4680      	mov	r8, r0
 802e0d4:	b150      	cbz	r0, 802e0ec <_dtoa_r+0xa4>
 802e0d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e0d8:	2301      	movs	r3, #1
 802e0da:	6013      	str	r3, [r2, #0]
 802e0dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e0de:	b113      	cbz	r3, 802e0e6 <_dtoa_r+0x9e>
 802e0e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802e0e2:	4b82      	ldr	r3, [pc, #520]	@ (802e2ec <_dtoa_r+0x2a4>)
 802e0e4:	6013      	str	r3, [r2, #0]
 802e0e6:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 802e304 <_dtoa_r+0x2bc>
 802e0ea:	e7e4      	b.n	802e0b6 <_dtoa_r+0x6e>
 802e0ec:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802e0f0:	aa16      	add	r2, sp, #88	@ 0x58
 802e0f2:	a917      	add	r1, sp, #92	@ 0x5c
 802e0f4:	4658      	mov	r0, fp
 802e0f6:	f005 fd6d 	bl	8033bd4 <__d2b>
 802e0fa:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802e0fe:	4681      	mov	r9, r0
 802e100:	2e00      	cmp	r6, #0
 802e102:	d077      	beq.n	802e1f4 <_dtoa_r+0x1ac>
 802e104:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e106:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802e10a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e10e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e112:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802e116:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802e11a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802e11e:	4619      	mov	r1, r3
 802e120:	2200      	movs	r2, #0
 802e122:	4b73      	ldr	r3, [pc, #460]	@ (802e2f0 <_dtoa_r+0x2a8>)
 802e124:	f7e2 f8c8 	bl	80102b8 <__aeabi_dsub>
 802e128:	a369      	add	r3, pc, #420	@ (adr r3, 802e2d0 <_dtoa_r+0x288>)
 802e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e12e:	f7e2 fa7b 	bl	8010628 <__aeabi_dmul>
 802e132:	a369      	add	r3, pc, #420	@ (adr r3, 802e2d8 <_dtoa_r+0x290>)
 802e134:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e138:	f7e2 f8c0 	bl	80102bc <__adddf3>
 802e13c:	4604      	mov	r4, r0
 802e13e:	4630      	mov	r0, r6
 802e140:	460d      	mov	r5, r1
 802e142:	f7e2 fa07 	bl	8010554 <__aeabi_i2d>
 802e146:	a366      	add	r3, pc, #408	@ (adr r3, 802e2e0 <_dtoa_r+0x298>)
 802e148:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e14c:	f7e2 fa6c 	bl	8010628 <__aeabi_dmul>
 802e150:	4602      	mov	r2, r0
 802e152:	460b      	mov	r3, r1
 802e154:	4620      	mov	r0, r4
 802e156:	4629      	mov	r1, r5
 802e158:	f7e2 f8b0 	bl	80102bc <__adddf3>
 802e15c:	4604      	mov	r4, r0
 802e15e:	460d      	mov	r5, r1
 802e160:	f7e2 fd12 	bl	8010b88 <__aeabi_d2iz>
 802e164:	2200      	movs	r2, #0
 802e166:	4607      	mov	r7, r0
 802e168:	2300      	movs	r3, #0
 802e16a:	4620      	mov	r0, r4
 802e16c:	4629      	mov	r1, r5
 802e16e:	f7e2 fccd 	bl	8010b0c <__aeabi_dcmplt>
 802e172:	b140      	cbz	r0, 802e186 <_dtoa_r+0x13e>
 802e174:	4638      	mov	r0, r7
 802e176:	f7e2 f9ed 	bl	8010554 <__aeabi_i2d>
 802e17a:	4622      	mov	r2, r4
 802e17c:	462b      	mov	r3, r5
 802e17e:	f7e2 fcbb 	bl	8010af8 <__aeabi_dcmpeq>
 802e182:	b900      	cbnz	r0, 802e186 <_dtoa_r+0x13e>
 802e184:	3f01      	subs	r7, #1
 802e186:	2f16      	cmp	r7, #22
 802e188:	d851      	bhi.n	802e22e <_dtoa_r+0x1e6>
 802e18a:	4b5a      	ldr	r3, [pc, #360]	@ (802e2f4 <_dtoa_r+0x2ac>)
 802e18c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e194:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e198:	f7e2 fcb8 	bl	8010b0c <__aeabi_dcmplt>
 802e19c:	2800      	cmp	r0, #0
 802e19e:	d048      	beq.n	802e232 <_dtoa_r+0x1ea>
 802e1a0:	3f01      	subs	r7, #1
 802e1a2:	2300      	movs	r3, #0
 802e1a4:	9312      	str	r3, [sp, #72]	@ 0x48
 802e1a6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802e1a8:	1b9b      	subs	r3, r3, r6
 802e1aa:	1e5a      	subs	r2, r3, #1
 802e1ac:	bf44      	itt	mi
 802e1ae:	f1c3 0801 	rsbmi	r8, r3, #1
 802e1b2:	2300      	movmi	r3, #0
 802e1b4:	9208      	str	r2, [sp, #32]
 802e1b6:	bf54      	ite	pl
 802e1b8:	f04f 0800 	movpl.w	r8, #0
 802e1bc:	9308      	strmi	r3, [sp, #32]
 802e1be:	2f00      	cmp	r7, #0
 802e1c0:	db39      	blt.n	802e236 <_dtoa_r+0x1ee>
 802e1c2:	9b08      	ldr	r3, [sp, #32]
 802e1c4:	970f      	str	r7, [sp, #60]	@ 0x3c
 802e1c6:	443b      	add	r3, r7
 802e1c8:	9308      	str	r3, [sp, #32]
 802e1ca:	2300      	movs	r3, #0
 802e1cc:	930a      	str	r3, [sp, #40]	@ 0x28
 802e1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e1d0:	2b09      	cmp	r3, #9
 802e1d2:	d865      	bhi.n	802e2a0 <_dtoa_r+0x258>
 802e1d4:	2b05      	cmp	r3, #5
 802e1d6:	bfc4      	itt	gt
 802e1d8:	3b04      	subgt	r3, #4
 802e1da:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802e1dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e1de:	f1a3 0302 	sub.w	r3, r3, #2
 802e1e2:	bfcc      	ite	gt
 802e1e4:	2400      	movgt	r4, #0
 802e1e6:	2401      	movle	r4, #1
 802e1e8:	2b03      	cmp	r3, #3
 802e1ea:	d864      	bhi.n	802e2b6 <_dtoa_r+0x26e>
 802e1ec:	e8df f003 	tbb	[pc, r3]
 802e1f0:	5635372a 	.word	0x5635372a
 802e1f4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802e1f8:	441e      	add	r6, r3
 802e1fa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802e1fe:	2b20      	cmp	r3, #32
 802e200:	bfc1      	itttt	gt
 802e202:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802e206:	409f      	lslgt	r7, r3
 802e208:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802e20c:	fa24 f303 	lsrgt.w	r3, r4, r3
 802e210:	bfd6      	itet	le
 802e212:	f1c3 0320 	rsble	r3, r3, #32
 802e216:	ea47 0003 	orrgt.w	r0, r7, r3
 802e21a:	fa04 f003 	lslle.w	r0, r4, r3
 802e21e:	f7e2 f989 	bl	8010534 <__aeabi_ui2d>
 802e222:	2201      	movs	r2, #1
 802e224:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802e228:	3e01      	subs	r6, #1
 802e22a:	9214      	str	r2, [sp, #80]	@ 0x50
 802e22c:	e777      	b.n	802e11e <_dtoa_r+0xd6>
 802e22e:	2301      	movs	r3, #1
 802e230:	e7b8      	b.n	802e1a4 <_dtoa_r+0x15c>
 802e232:	9012      	str	r0, [sp, #72]	@ 0x48
 802e234:	e7b7      	b.n	802e1a6 <_dtoa_r+0x15e>
 802e236:	427b      	negs	r3, r7
 802e238:	930a      	str	r3, [sp, #40]	@ 0x28
 802e23a:	2300      	movs	r3, #0
 802e23c:	eba8 0807 	sub.w	r8, r8, r7
 802e240:	930f      	str	r3, [sp, #60]	@ 0x3c
 802e242:	e7c4      	b.n	802e1ce <_dtoa_r+0x186>
 802e244:	2300      	movs	r3, #0
 802e246:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e248:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e24a:	2b00      	cmp	r3, #0
 802e24c:	dc36      	bgt.n	802e2bc <_dtoa_r+0x274>
 802e24e:	2301      	movs	r3, #1
 802e250:	9300      	str	r3, [sp, #0]
 802e252:	9307      	str	r3, [sp, #28]
 802e254:	461a      	mov	r2, r3
 802e256:	920e      	str	r2, [sp, #56]	@ 0x38
 802e258:	e00b      	b.n	802e272 <_dtoa_r+0x22a>
 802e25a:	2301      	movs	r3, #1
 802e25c:	e7f3      	b.n	802e246 <_dtoa_r+0x1fe>
 802e25e:	2300      	movs	r3, #0
 802e260:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e264:	18fb      	adds	r3, r7, r3
 802e266:	9300      	str	r3, [sp, #0]
 802e268:	3301      	adds	r3, #1
 802e26a:	2b01      	cmp	r3, #1
 802e26c:	9307      	str	r3, [sp, #28]
 802e26e:	bfb8      	it	lt
 802e270:	2301      	movlt	r3, #1
 802e272:	2100      	movs	r1, #0
 802e274:	2204      	movs	r2, #4
 802e276:	f102 0014 	add.w	r0, r2, #20
 802e27a:	4298      	cmp	r0, r3
 802e27c:	d922      	bls.n	802e2c4 <_dtoa_r+0x27c>
 802e27e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 802e282:	4658      	mov	r0, fp
 802e284:	f005 f910 	bl	80334a8 <_Balloc>
 802e288:	4682      	mov	sl, r0
 802e28a:	2800      	cmp	r0, #0
 802e28c:	d13c      	bne.n	802e308 <_dtoa_r+0x2c0>
 802e28e:	4b1a      	ldr	r3, [pc, #104]	@ (802e2f8 <_dtoa_r+0x2b0>)
 802e290:	4602      	mov	r2, r0
 802e292:	f240 11af 	movw	r1, #431	@ 0x1af
 802e296:	4819      	ldr	r0, [pc, #100]	@ (802e2fc <_dtoa_r+0x2b4>)
 802e298:	f7fb fe48 	bl	8029f2c <__assert_func>
 802e29c:	2301      	movs	r3, #1
 802e29e:	e7df      	b.n	802e260 <_dtoa_r+0x218>
 802e2a0:	2401      	movs	r4, #1
 802e2a2:	2300      	movs	r3, #0
 802e2a4:	9309      	str	r3, [sp, #36]	@ 0x24
 802e2a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 802e2a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e2ac:	9300      	str	r3, [sp, #0]
 802e2ae:	9307      	str	r3, [sp, #28]
 802e2b0:	2200      	movs	r2, #0
 802e2b2:	2312      	movs	r3, #18
 802e2b4:	e7cf      	b.n	802e256 <_dtoa_r+0x20e>
 802e2b6:	2301      	movs	r3, #1
 802e2b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e2ba:	e7f5      	b.n	802e2a8 <_dtoa_r+0x260>
 802e2bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e2be:	9300      	str	r3, [sp, #0]
 802e2c0:	9307      	str	r3, [sp, #28]
 802e2c2:	e7d6      	b.n	802e272 <_dtoa_r+0x22a>
 802e2c4:	3101      	adds	r1, #1
 802e2c6:	0052      	lsls	r2, r2, #1
 802e2c8:	e7d5      	b.n	802e276 <_dtoa_r+0x22e>
 802e2ca:	bf00      	nop
 802e2cc:	f3af 8000 	nop.w
 802e2d0:	636f4361 	.word	0x636f4361
 802e2d4:	3fd287a7 	.word	0x3fd287a7
 802e2d8:	8b60c8b3 	.word	0x8b60c8b3
 802e2dc:	3fc68a28 	.word	0x3fc68a28
 802e2e0:	509f79fb 	.word	0x509f79fb
 802e2e4:	3fd34413 	.word	0x3fd34413
 802e2e8:	7ff00000 	.word	0x7ff00000
 802e2ec:	0803bcf2 	.word	0x0803bcf2
 802e2f0:	3ff80000 	.word	0x3ff80000
 802e2f4:	0803c310 	.word	0x0803c310
 802e2f8:	0803c18a 	.word	0x0803c18a
 802e2fc:	0803c19b 	.word	0x0803c19b
 802e300:	0803c186 	.word	0x0803c186
 802e304:	0803bcf1 	.word	0x0803bcf1
 802e308:	9b07      	ldr	r3, [sp, #28]
 802e30a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802e30e:	2b0e      	cmp	r3, #14
 802e310:	f200 80a4 	bhi.w	802e45c <_dtoa_r+0x414>
 802e314:	2c00      	cmp	r4, #0
 802e316:	f000 80a1 	beq.w	802e45c <_dtoa_r+0x414>
 802e31a:	2f00      	cmp	r7, #0
 802e31c:	dd33      	ble.n	802e386 <_dtoa_r+0x33e>
 802e31e:	4bae      	ldr	r3, [pc, #696]	@ (802e5d8 <_dtoa_r+0x590>)
 802e320:	f007 020f 	and.w	r2, r7, #15
 802e324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e328:	ed93 7b00 	vldr	d7, [r3]
 802e32c:	05f8      	lsls	r0, r7, #23
 802e32e:	ed8d 7b04 	vstr	d7, [sp, #16]
 802e332:	ea4f 1427 	mov.w	r4, r7, asr #4
 802e336:	d516      	bpl.n	802e366 <_dtoa_r+0x31e>
 802e338:	4ba8      	ldr	r3, [pc, #672]	@ (802e5dc <_dtoa_r+0x594>)
 802e33a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e33e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802e342:	f7e2 fa9b 	bl	801087c <__aeabi_ddiv>
 802e346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e34a:	f004 040f 	and.w	r4, r4, #15
 802e34e:	2603      	movs	r6, #3
 802e350:	4da2      	ldr	r5, [pc, #648]	@ (802e5dc <_dtoa_r+0x594>)
 802e352:	b954      	cbnz	r4, 802e36a <_dtoa_r+0x322>
 802e354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802e358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e35c:	f7e2 fa8e 	bl	801087c <__aeabi_ddiv>
 802e360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e364:	e028      	b.n	802e3b8 <_dtoa_r+0x370>
 802e366:	2602      	movs	r6, #2
 802e368:	e7f2      	b.n	802e350 <_dtoa_r+0x308>
 802e36a:	07e1      	lsls	r1, r4, #31
 802e36c:	d508      	bpl.n	802e380 <_dtoa_r+0x338>
 802e36e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e372:	e9d5 2300 	ldrd	r2, r3, [r5]
 802e376:	f7e2 f957 	bl	8010628 <__aeabi_dmul>
 802e37a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802e37e:	3601      	adds	r6, #1
 802e380:	1064      	asrs	r4, r4, #1
 802e382:	3508      	adds	r5, #8
 802e384:	e7e5      	b.n	802e352 <_dtoa_r+0x30a>
 802e386:	f000 80d2 	beq.w	802e52e <_dtoa_r+0x4e6>
 802e38a:	427c      	negs	r4, r7
 802e38c:	4b92      	ldr	r3, [pc, #584]	@ (802e5d8 <_dtoa_r+0x590>)
 802e38e:	4d93      	ldr	r5, [pc, #588]	@ (802e5dc <_dtoa_r+0x594>)
 802e390:	f004 020f 	and.w	r2, r4, #15
 802e394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e398:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e39c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e3a0:	f7e2 f942 	bl	8010628 <__aeabi_dmul>
 802e3a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e3a8:	1124      	asrs	r4, r4, #4
 802e3aa:	2300      	movs	r3, #0
 802e3ac:	2602      	movs	r6, #2
 802e3ae:	2c00      	cmp	r4, #0
 802e3b0:	f040 80b2 	bne.w	802e518 <_dtoa_r+0x4d0>
 802e3b4:	2b00      	cmp	r3, #0
 802e3b6:	d1d3      	bne.n	802e360 <_dtoa_r+0x318>
 802e3b8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802e3ba:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802e3be:	2b00      	cmp	r3, #0
 802e3c0:	f000 80b7 	beq.w	802e532 <_dtoa_r+0x4ea>
 802e3c4:	4b86      	ldr	r3, [pc, #536]	@ (802e5e0 <_dtoa_r+0x598>)
 802e3c6:	2200      	movs	r2, #0
 802e3c8:	4620      	mov	r0, r4
 802e3ca:	4629      	mov	r1, r5
 802e3cc:	f7e2 fb9e 	bl	8010b0c <__aeabi_dcmplt>
 802e3d0:	2800      	cmp	r0, #0
 802e3d2:	f000 80ae 	beq.w	802e532 <_dtoa_r+0x4ea>
 802e3d6:	9b07      	ldr	r3, [sp, #28]
 802e3d8:	2b00      	cmp	r3, #0
 802e3da:	f000 80aa 	beq.w	802e532 <_dtoa_r+0x4ea>
 802e3de:	9b00      	ldr	r3, [sp, #0]
 802e3e0:	2b00      	cmp	r3, #0
 802e3e2:	dd37      	ble.n	802e454 <_dtoa_r+0x40c>
 802e3e4:	1e7b      	subs	r3, r7, #1
 802e3e6:	9304      	str	r3, [sp, #16]
 802e3e8:	4620      	mov	r0, r4
 802e3ea:	4b7e      	ldr	r3, [pc, #504]	@ (802e5e4 <_dtoa_r+0x59c>)
 802e3ec:	2200      	movs	r2, #0
 802e3ee:	4629      	mov	r1, r5
 802e3f0:	f7e2 f91a 	bl	8010628 <__aeabi_dmul>
 802e3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e3f8:	9c00      	ldr	r4, [sp, #0]
 802e3fa:	3601      	adds	r6, #1
 802e3fc:	4630      	mov	r0, r6
 802e3fe:	f7e2 f8a9 	bl	8010554 <__aeabi_i2d>
 802e402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e406:	f7e2 f90f 	bl	8010628 <__aeabi_dmul>
 802e40a:	4b77      	ldr	r3, [pc, #476]	@ (802e5e8 <_dtoa_r+0x5a0>)
 802e40c:	2200      	movs	r2, #0
 802e40e:	f7e1 ff55 	bl	80102bc <__adddf3>
 802e412:	4605      	mov	r5, r0
 802e414:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802e418:	2c00      	cmp	r4, #0
 802e41a:	f040 808d 	bne.w	802e538 <_dtoa_r+0x4f0>
 802e41e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e422:	4b72      	ldr	r3, [pc, #456]	@ (802e5ec <_dtoa_r+0x5a4>)
 802e424:	2200      	movs	r2, #0
 802e426:	f7e1 ff47 	bl	80102b8 <__aeabi_dsub>
 802e42a:	4602      	mov	r2, r0
 802e42c:	460b      	mov	r3, r1
 802e42e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e432:	462a      	mov	r2, r5
 802e434:	4633      	mov	r3, r6
 802e436:	f7e2 fb87 	bl	8010b48 <__aeabi_dcmpgt>
 802e43a:	2800      	cmp	r0, #0
 802e43c:	f040 828c 	bne.w	802e958 <_dtoa_r+0x910>
 802e440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e444:	462a      	mov	r2, r5
 802e446:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802e44a:	f7e2 fb5f 	bl	8010b0c <__aeabi_dcmplt>
 802e44e:	2800      	cmp	r0, #0
 802e450:	f040 8129 	bne.w	802e6a6 <_dtoa_r+0x65e>
 802e454:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802e458:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802e45c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802e45e:	2b00      	cmp	r3, #0
 802e460:	f2c0 815b 	blt.w	802e71a <_dtoa_r+0x6d2>
 802e464:	2f0e      	cmp	r7, #14
 802e466:	f300 8158 	bgt.w	802e71a <_dtoa_r+0x6d2>
 802e46a:	4b5b      	ldr	r3, [pc, #364]	@ (802e5d8 <_dtoa_r+0x590>)
 802e46c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802e470:	ed93 7b00 	vldr	d7, [r3]
 802e474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e476:	2b00      	cmp	r3, #0
 802e478:	ed8d 7b00 	vstr	d7, [sp]
 802e47c:	da03      	bge.n	802e486 <_dtoa_r+0x43e>
 802e47e:	9b07      	ldr	r3, [sp, #28]
 802e480:	2b00      	cmp	r3, #0
 802e482:	f340 8102 	ble.w	802e68a <_dtoa_r+0x642>
 802e486:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802e48a:	4656      	mov	r6, sl
 802e48c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e490:	4620      	mov	r0, r4
 802e492:	4629      	mov	r1, r5
 802e494:	f7e2 f9f2 	bl	801087c <__aeabi_ddiv>
 802e498:	f7e2 fb76 	bl	8010b88 <__aeabi_d2iz>
 802e49c:	4680      	mov	r8, r0
 802e49e:	f7e2 f859 	bl	8010554 <__aeabi_i2d>
 802e4a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e4a6:	f7e2 f8bf 	bl	8010628 <__aeabi_dmul>
 802e4aa:	4602      	mov	r2, r0
 802e4ac:	460b      	mov	r3, r1
 802e4ae:	4620      	mov	r0, r4
 802e4b0:	4629      	mov	r1, r5
 802e4b2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802e4b6:	f7e1 feff 	bl	80102b8 <__aeabi_dsub>
 802e4ba:	f806 4b01 	strb.w	r4, [r6], #1
 802e4be:	9d07      	ldr	r5, [sp, #28]
 802e4c0:	eba6 040a 	sub.w	r4, r6, sl
 802e4c4:	42a5      	cmp	r5, r4
 802e4c6:	4602      	mov	r2, r0
 802e4c8:	460b      	mov	r3, r1
 802e4ca:	f040 8118 	bne.w	802e6fe <_dtoa_r+0x6b6>
 802e4ce:	f7e1 fef5 	bl	80102bc <__adddf3>
 802e4d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e4d6:	4604      	mov	r4, r0
 802e4d8:	460d      	mov	r5, r1
 802e4da:	f7e2 fb35 	bl	8010b48 <__aeabi_dcmpgt>
 802e4de:	2800      	cmp	r0, #0
 802e4e0:	f040 80fa 	bne.w	802e6d8 <_dtoa_r+0x690>
 802e4e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e4e8:	4620      	mov	r0, r4
 802e4ea:	4629      	mov	r1, r5
 802e4ec:	f7e2 fb04 	bl	8010af8 <__aeabi_dcmpeq>
 802e4f0:	b118      	cbz	r0, 802e4fa <_dtoa_r+0x4b2>
 802e4f2:	f018 0f01 	tst.w	r8, #1
 802e4f6:	f040 80ef 	bne.w	802e6d8 <_dtoa_r+0x690>
 802e4fa:	4649      	mov	r1, r9
 802e4fc:	4658      	mov	r0, fp
 802e4fe:	f004 fff8 	bl	80334f2 <_Bfree>
 802e502:	2300      	movs	r3, #0
 802e504:	7033      	strb	r3, [r6, #0]
 802e506:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802e508:	3701      	adds	r7, #1
 802e50a:	601f      	str	r7, [r3, #0]
 802e50c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e50e:	2b00      	cmp	r3, #0
 802e510:	f43f add1 	beq.w	802e0b6 <_dtoa_r+0x6e>
 802e514:	601e      	str	r6, [r3, #0]
 802e516:	e5ce      	b.n	802e0b6 <_dtoa_r+0x6e>
 802e518:	07e2      	lsls	r2, r4, #31
 802e51a:	d505      	bpl.n	802e528 <_dtoa_r+0x4e0>
 802e51c:	e9d5 2300 	ldrd	r2, r3, [r5]
 802e520:	f7e2 f882 	bl	8010628 <__aeabi_dmul>
 802e524:	3601      	adds	r6, #1
 802e526:	2301      	movs	r3, #1
 802e528:	1064      	asrs	r4, r4, #1
 802e52a:	3508      	adds	r5, #8
 802e52c:	e73f      	b.n	802e3ae <_dtoa_r+0x366>
 802e52e:	2602      	movs	r6, #2
 802e530:	e742      	b.n	802e3b8 <_dtoa_r+0x370>
 802e532:	9c07      	ldr	r4, [sp, #28]
 802e534:	9704      	str	r7, [sp, #16]
 802e536:	e761      	b.n	802e3fc <_dtoa_r+0x3b4>
 802e538:	4b27      	ldr	r3, [pc, #156]	@ (802e5d8 <_dtoa_r+0x590>)
 802e53a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802e53c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802e540:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802e544:	4454      	add	r4, sl
 802e546:	2900      	cmp	r1, #0
 802e548:	d054      	beq.n	802e5f4 <_dtoa_r+0x5ac>
 802e54a:	4929      	ldr	r1, [pc, #164]	@ (802e5f0 <_dtoa_r+0x5a8>)
 802e54c:	2000      	movs	r0, #0
 802e54e:	f7e2 f995 	bl	801087c <__aeabi_ddiv>
 802e552:	4633      	mov	r3, r6
 802e554:	462a      	mov	r2, r5
 802e556:	f7e1 feaf 	bl	80102b8 <__aeabi_dsub>
 802e55a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e55e:	4656      	mov	r6, sl
 802e560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e564:	f7e2 fb10 	bl	8010b88 <__aeabi_d2iz>
 802e568:	4605      	mov	r5, r0
 802e56a:	f7e1 fff3 	bl	8010554 <__aeabi_i2d>
 802e56e:	4602      	mov	r2, r0
 802e570:	460b      	mov	r3, r1
 802e572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e576:	f7e1 fe9f 	bl	80102b8 <__aeabi_dsub>
 802e57a:	3530      	adds	r5, #48	@ 0x30
 802e57c:	4602      	mov	r2, r0
 802e57e:	460b      	mov	r3, r1
 802e580:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e584:	f806 5b01 	strb.w	r5, [r6], #1
 802e588:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e58c:	f7e2 fabe 	bl	8010b0c <__aeabi_dcmplt>
 802e590:	2800      	cmp	r0, #0
 802e592:	d172      	bne.n	802e67a <_dtoa_r+0x632>
 802e594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e598:	4911      	ldr	r1, [pc, #68]	@ (802e5e0 <_dtoa_r+0x598>)
 802e59a:	2000      	movs	r0, #0
 802e59c:	f7e1 fe8c 	bl	80102b8 <__aeabi_dsub>
 802e5a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e5a4:	f7e2 fab2 	bl	8010b0c <__aeabi_dcmplt>
 802e5a8:	2800      	cmp	r0, #0
 802e5aa:	f040 8096 	bne.w	802e6da <_dtoa_r+0x692>
 802e5ae:	42a6      	cmp	r6, r4
 802e5b0:	f43f af50 	beq.w	802e454 <_dtoa_r+0x40c>
 802e5b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802e5b8:	4b0a      	ldr	r3, [pc, #40]	@ (802e5e4 <_dtoa_r+0x59c>)
 802e5ba:	2200      	movs	r2, #0
 802e5bc:	f7e2 f834 	bl	8010628 <__aeabi_dmul>
 802e5c0:	4b08      	ldr	r3, [pc, #32]	@ (802e5e4 <_dtoa_r+0x59c>)
 802e5c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e5c6:	2200      	movs	r2, #0
 802e5c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e5cc:	f7e2 f82c 	bl	8010628 <__aeabi_dmul>
 802e5d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e5d4:	e7c4      	b.n	802e560 <_dtoa_r+0x518>
 802e5d6:	bf00      	nop
 802e5d8:	0803c310 	.word	0x0803c310
 802e5dc:	0803c2e8 	.word	0x0803c2e8
 802e5e0:	3ff00000 	.word	0x3ff00000
 802e5e4:	40240000 	.word	0x40240000
 802e5e8:	401c0000 	.word	0x401c0000
 802e5ec:	40140000 	.word	0x40140000
 802e5f0:	3fe00000 	.word	0x3fe00000
 802e5f4:	4631      	mov	r1, r6
 802e5f6:	4628      	mov	r0, r5
 802e5f8:	f7e2 f816 	bl	8010628 <__aeabi_dmul>
 802e5fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e600:	9415      	str	r4, [sp, #84]	@ 0x54
 802e602:	4656      	mov	r6, sl
 802e604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e608:	f7e2 fabe 	bl	8010b88 <__aeabi_d2iz>
 802e60c:	4605      	mov	r5, r0
 802e60e:	f7e1 ffa1 	bl	8010554 <__aeabi_i2d>
 802e612:	4602      	mov	r2, r0
 802e614:	460b      	mov	r3, r1
 802e616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e61a:	f7e1 fe4d 	bl	80102b8 <__aeabi_dsub>
 802e61e:	3530      	adds	r5, #48	@ 0x30
 802e620:	f806 5b01 	strb.w	r5, [r6], #1
 802e624:	4602      	mov	r2, r0
 802e626:	460b      	mov	r3, r1
 802e628:	42a6      	cmp	r6, r4
 802e62a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e62e:	f04f 0200 	mov.w	r2, #0
 802e632:	d124      	bne.n	802e67e <_dtoa_r+0x636>
 802e634:	4bac      	ldr	r3, [pc, #688]	@ (802e8e8 <_dtoa_r+0x8a0>)
 802e636:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802e63a:	f7e1 fe3f 	bl	80102bc <__adddf3>
 802e63e:	4602      	mov	r2, r0
 802e640:	460b      	mov	r3, r1
 802e642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e646:	f7e2 fa7f 	bl	8010b48 <__aeabi_dcmpgt>
 802e64a:	2800      	cmp	r0, #0
 802e64c:	d145      	bne.n	802e6da <_dtoa_r+0x692>
 802e64e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e652:	49a5      	ldr	r1, [pc, #660]	@ (802e8e8 <_dtoa_r+0x8a0>)
 802e654:	2000      	movs	r0, #0
 802e656:	f7e1 fe2f 	bl	80102b8 <__aeabi_dsub>
 802e65a:	4602      	mov	r2, r0
 802e65c:	460b      	mov	r3, r1
 802e65e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e662:	f7e2 fa53 	bl	8010b0c <__aeabi_dcmplt>
 802e666:	2800      	cmp	r0, #0
 802e668:	f43f aef4 	beq.w	802e454 <_dtoa_r+0x40c>
 802e66c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802e66e:	1e73      	subs	r3, r6, #1
 802e670:	9315      	str	r3, [sp, #84]	@ 0x54
 802e672:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802e676:	2b30      	cmp	r3, #48	@ 0x30
 802e678:	d0f8      	beq.n	802e66c <_dtoa_r+0x624>
 802e67a:	9f04      	ldr	r7, [sp, #16]
 802e67c:	e73d      	b.n	802e4fa <_dtoa_r+0x4b2>
 802e67e:	4b9b      	ldr	r3, [pc, #620]	@ (802e8ec <_dtoa_r+0x8a4>)
 802e680:	f7e1 ffd2 	bl	8010628 <__aeabi_dmul>
 802e684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e688:	e7bc      	b.n	802e604 <_dtoa_r+0x5bc>
 802e68a:	d10c      	bne.n	802e6a6 <_dtoa_r+0x65e>
 802e68c:	4b98      	ldr	r3, [pc, #608]	@ (802e8f0 <_dtoa_r+0x8a8>)
 802e68e:	2200      	movs	r2, #0
 802e690:	e9dd 0100 	ldrd	r0, r1, [sp]
 802e694:	f7e1 ffc8 	bl	8010628 <__aeabi_dmul>
 802e698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e69c:	f7e2 fa4a 	bl	8010b34 <__aeabi_dcmpge>
 802e6a0:	2800      	cmp	r0, #0
 802e6a2:	f000 8157 	beq.w	802e954 <_dtoa_r+0x90c>
 802e6a6:	2400      	movs	r4, #0
 802e6a8:	4625      	mov	r5, r4
 802e6aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e6ac:	43db      	mvns	r3, r3
 802e6ae:	9304      	str	r3, [sp, #16]
 802e6b0:	4656      	mov	r6, sl
 802e6b2:	2700      	movs	r7, #0
 802e6b4:	4621      	mov	r1, r4
 802e6b6:	4658      	mov	r0, fp
 802e6b8:	f004 ff1b 	bl	80334f2 <_Bfree>
 802e6bc:	2d00      	cmp	r5, #0
 802e6be:	d0dc      	beq.n	802e67a <_dtoa_r+0x632>
 802e6c0:	b12f      	cbz	r7, 802e6ce <_dtoa_r+0x686>
 802e6c2:	42af      	cmp	r7, r5
 802e6c4:	d003      	beq.n	802e6ce <_dtoa_r+0x686>
 802e6c6:	4639      	mov	r1, r7
 802e6c8:	4658      	mov	r0, fp
 802e6ca:	f004 ff12 	bl	80334f2 <_Bfree>
 802e6ce:	4629      	mov	r1, r5
 802e6d0:	4658      	mov	r0, fp
 802e6d2:	f004 ff0e 	bl	80334f2 <_Bfree>
 802e6d6:	e7d0      	b.n	802e67a <_dtoa_r+0x632>
 802e6d8:	9704      	str	r7, [sp, #16]
 802e6da:	4633      	mov	r3, r6
 802e6dc:	461e      	mov	r6, r3
 802e6de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e6e2:	2a39      	cmp	r2, #57	@ 0x39
 802e6e4:	d107      	bne.n	802e6f6 <_dtoa_r+0x6ae>
 802e6e6:	459a      	cmp	sl, r3
 802e6e8:	d1f8      	bne.n	802e6dc <_dtoa_r+0x694>
 802e6ea:	9a04      	ldr	r2, [sp, #16]
 802e6ec:	3201      	adds	r2, #1
 802e6ee:	9204      	str	r2, [sp, #16]
 802e6f0:	2230      	movs	r2, #48	@ 0x30
 802e6f2:	f88a 2000 	strb.w	r2, [sl]
 802e6f6:	781a      	ldrb	r2, [r3, #0]
 802e6f8:	3201      	adds	r2, #1
 802e6fa:	701a      	strb	r2, [r3, #0]
 802e6fc:	e7bd      	b.n	802e67a <_dtoa_r+0x632>
 802e6fe:	4b7b      	ldr	r3, [pc, #492]	@ (802e8ec <_dtoa_r+0x8a4>)
 802e700:	2200      	movs	r2, #0
 802e702:	f7e1 ff91 	bl	8010628 <__aeabi_dmul>
 802e706:	2200      	movs	r2, #0
 802e708:	2300      	movs	r3, #0
 802e70a:	4604      	mov	r4, r0
 802e70c:	460d      	mov	r5, r1
 802e70e:	f7e2 f9f3 	bl	8010af8 <__aeabi_dcmpeq>
 802e712:	2800      	cmp	r0, #0
 802e714:	f43f aeba 	beq.w	802e48c <_dtoa_r+0x444>
 802e718:	e6ef      	b.n	802e4fa <_dtoa_r+0x4b2>
 802e71a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802e71c:	2a00      	cmp	r2, #0
 802e71e:	f000 80db 	beq.w	802e8d8 <_dtoa_r+0x890>
 802e722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802e724:	2a01      	cmp	r2, #1
 802e726:	f300 80bf 	bgt.w	802e8a8 <_dtoa_r+0x860>
 802e72a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802e72c:	2a00      	cmp	r2, #0
 802e72e:	f000 80b7 	beq.w	802e8a0 <_dtoa_r+0x858>
 802e732:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802e736:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802e738:	4646      	mov	r6, r8
 802e73a:	9a08      	ldr	r2, [sp, #32]
 802e73c:	2101      	movs	r1, #1
 802e73e:	441a      	add	r2, r3
 802e740:	4658      	mov	r0, fp
 802e742:	4498      	add	r8, r3
 802e744:	9208      	str	r2, [sp, #32]
 802e746:	f004 ffb9 	bl	80336bc <__i2b>
 802e74a:	4605      	mov	r5, r0
 802e74c:	b15e      	cbz	r6, 802e766 <_dtoa_r+0x71e>
 802e74e:	9b08      	ldr	r3, [sp, #32]
 802e750:	2b00      	cmp	r3, #0
 802e752:	dd08      	ble.n	802e766 <_dtoa_r+0x71e>
 802e754:	42b3      	cmp	r3, r6
 802e756:	9a08      	ldr	r2, [sp, #32]
 802e758:	bfa8      	it	ge
 802e75a:	4633      	movge	r3, r6
 802e75c:	eba8 0803 	sub.w	r8, r8, r3
 802e760:	1af6      	subs	r6, r6, r3
 802e762:	1ad3      	subs	r3, r2, r3
 802e764:	9308      	str	r3, [sp, #32]
 802e766:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e768:	b1f3      	cbz	r3, 802e7a8 <_dtoa_r+0x760>
 802e76a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e76c:	2b00      	cmp	r3, #0
 802e76e:	f000 80b7 	beq.w	802e8e0 <_dtoa_r+0x898>
 802e772:	b18c      	cbz	r4, 802e798 <_dtoa_r+0x750>
 802e774:	4629      	mov	r1, r5
 802e776:	4622      	mov	r2, r4
 802e778:	4658      	mov	r0, fp
 802e77a:	f005 f85f 	bl	803383c <__pow5mult>
 802e77e:	464a      	mov	r2, r9
 802e780:	4601      	mov	r1, r0
 802e782:	4605      	mov	r5, r0
 802e784:	4658      	mov	r0, fp
 802e786:	f004 ffaf 	bl	80336e8 <__multiply>
 802e78a:	4649      	mov	r1, r9
 802e78c:	9004      	str	r0, [sp, #16]
 802e78e:	4658      	mov	r0, fp
 802e790:	f004 feaf 	bl	80334f2 <_Bfree>
 802e794:	9b04      	ldr	r3, [sp, #16]
 802e796:	4699      	mov	r9, r3
 802e798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e79a:	1b1a      	subs	r2, r3, r4
 802e79c:	d004      	beq.n	802e7a8 <_dtoa_r+0x760>
 802e79e:	4649      	mov	r1, r9
 802e7a0:	4658      	mov	r0, fp
 802e7a2:	f005 f84b 	bl	803383c <__pow5mult>
 802e7a6:	4681      	mov	r9, r0
 802e7a8:	2101      	movs	r1, #1
 802e7aa:	4658      	mov	r0, fp
 802e7ac:	f004 ff86 	bl	80336bc <__i2b>
 802e7b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e7b2:	4604      	mov	r4, r0
 802e7b4:	2b00      	cmp	r3, #0
 802e7b6:	f000 81cc 	beq.w	802eb52 <_dtoa_r+0xb0a>
 802e7ba:	461a      	mov	r2, r3
 802e7bc:	4601      	mov	r1, r0
 802e7be:	4658      	mov	r0, fp
 802e7c0:	f005 f83c 	bl	803383c <__pow5mult>
 802e7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e7c6:	2b01      	cmp	r3, #1
 802e7c8:	4604      	mov	r4, r0
 802e7ca:	f300 8095 	bgt.w	802e8f8 <_dtoa_r+0x8b0>
 802e7ce:	9b02      	ldr	r3, [sp, #8]
 802e7d0:	2b00      	cmp	r3, #0
 802e7d2:	f040 8087 	bne.w	802e8e4 <_dtoa_r+0x89c>
 802e7d6:	9b03      	ldr	r3, [sp, #12]
 802e7d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e7dc:	2b00      	cmp	r3, #0
 802e7de:	f040 8089 	bne.w	802e8f4 <_dtoa_r+0x8ac>
 802e7e2:	9b03      	ldr	r3, [sp, #12]
 802e7e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802e7e8:	0d1b      	lsrs	r3, r3, #20
 802e7ea:	051b      	lsls	r3, r3, #20
 802e7ec:	b12b      	cbz	r3, 802e7fa <_dtoa_r+0x7b2>
 802e7ee:	9b08      	ldr	r3, [sp, #32]
 802e7f0:	3301      	adds	r3, #1
 802e7f2:	9308      	str	r3, [sp, #32]
 802e7f4:	f108 0801 	add.w	r8, r8, #1
 802e7f8:	2301      	movs	r3, #1
 802e7fa:	930a      	str	r3, [sp, #40]	@ 0x28
 802e7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e7fe:	2b00      	cmp	r3, #0
 802e800:	f000 81ad 	beq.w	802eb5e <_dtoa_r+0xb16>
 802e804:	6923      	ldr	r3, [r4, #16]
 802e806:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802e80a:	6918      	ldr	r0, [r3, #16]
 802e80c:	f004 ff0a 	bl	8033624 <__hi0bits>
 802e810:	f1c0 0020 	rsb	r0, r0, #32
 802e814:	9b08      	ldr	r3, [sp, #32]
 802e816:	4418      	add	r0, r3
 802e818:	f010 001f 	ands.w	r0, r0, #31
 802e81c:	d077      	beq.n	802e90e <_dtoa_r+0x8c6>
 802e81e:	f1c0 0320 	rsb	r3, r0, #32
 802e822:	2b04      	cmp	r3, #4
 802e824:	dd6b      	ble.n	802e8fe <_dtoa_r+0x8b6>
 802e826:	9b08      	ldr	r3, [sp, #32]
 802e828:	f1c0 001c 	rsb	r0, r0, #28
 802e82c:	4403      	add	r3, r0
 802e82e:	4480      	add	r8, r0
 802e830:	4406      	add	r6, r0
 802e832:	9308      	str	r3, [sp, #32]
 802e834:	f1b8 0f00 	cmp.w	r8, #0
 802e838:	dd05      	ble.n	802e846 <_dtoa_r+0x7fe>
 802e83a:	4649      	mov	r1, r9
 802e83c:	4642      	mov	r2, r8
 802e83e:	4658      	mov	r0, fp
 802e840:	f005 f83c 	bl	80338bc <__lshift>
 802e844:	4681      	mov	r9, r0
 802e846:	9b08      	ldr	r3, [sp, #32]
 802e848:	2b00      	cmp	r3, #0
 802e84a:	dd05      	ble.n	802e858 <_dtoa_r+0x810>
 802e84c:	4621      	mov	r1, r4
 802e84e:	461a      	mov	r2, r3
 802e850:	4658      	mov	r0, fp
 802e852:	f005 f833 	bl	80338bc <__lshift>
 802e856:	4604      	mov	r4, r0
 802e858:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802e85a:	2b00      	cmp	r3, #0
 802e85c:	d059      	beq.n	802e912 <_dtoa_r+0x8ca>
 802e85e:	4621      	mov	r1, r4
 802e860:	4648      	mov	r0, r9
 802e862:	f005 f897 	bl	8033994 <__mcmp>
 802e866:	2800      	cmp	r0, #0
 802e868:	da53      	bge.n	802e912 <_dtoa_r+0x8ca>
 802e86a:	1e7b      	subs	r3, r7, #1
 802e86c:	9304      	str	r3, [sp, #16]
 802e86e:	4649      	mov	r1, r9
 802e870:	2300      	movs	r3, #0
 802e872:	220a      	movs	r2, #10
 802e874:	4658      	mov	r0, fp
 802e876:	f004 fe45 	bl	8033504 <__multadd>
 802e87a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e87c:	4681      	mov	r9, r0
 802e87e:	2b00      	cmp	r3, #0
 802e880:	f000 816f 	beq.w	802eb62 <_dtoa_r+0xb1a>
 802e884:	2300      	movs	r3, #0
 802e886:	4629      	mov	r1, r5
 802e888:	220a      	movs	r2, #10
 802e88a:	4658      	mov	r0, fp
 802e88c:	f004 fe3a 	bl	8033504 <__multadd>
 802e890:	9b00      	ldr	r3, [sp, #0]
 802e892:	2b00      	cmp	r3, #0
 802e894:	4605      	mov	r5, r0
 802e896:	dc67      	bgt.n	802e968 <_dtoa_r+0x920>
 802e898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e89a:	2b02      	cmp	r3, #2
 802e89c:	dc41      	bgt.n	802e922 <_dtoa_r+0x8da>
 802e89e:	e063      	b.n	802e968 <_dtoa_r+0x920>
 802e8a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802e8a2:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802e8a6:	e746      	b.n	802e736 <_dtoa_r+0x6ee>
 802e8a8:	9b07      	ldr	r3, [sp, #28]
 802e8aa:	1e5c      	subs	r4, r3, #1
 802e8ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e8ae:	42a3      	cmp	r3, r4
 802e8b0:	bfbf      	itttt	lt
 802e8b2:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802e8b4:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802e8b6:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802e8b8:	1ae3      	sublt	r3, r4, r3
 802e8ba:	bfb4      	ite	lt
 802e8bc:	18d2      	addlt	r2, r2, r3
 802e8be:	1b1c      	subge	r4, r3, r4
 802e8c0:	9b07      	ldr	r3, [sp, #28]
 802e8c2:	bfbc      	itt	lt
 802e8c4:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802e8c6:	2400      	movlt	r4, #0
 802e8c8:	2b00      	cmp	r3, #0
 802e8ca:	bfb5      	itete	lt
 802e8cc:	eba8 0603 	sublt.w	r6, r8, r3
 802e8d0:	9b07      	ldrge	r3, [sp, #28]
 802e8d2:	2300      	movlt	r3, #0
 802e8d4:	4646      	movge	r6, r8
 802e8d6:	e730      	b.n	802e73a <_dtoa_r+0x6f2>
 802e8d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802e8da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802e8dc:	4646      	mov	r6, r8
 802e8de:	e735      	b.n	802e74c <_dtoa_r+0x704>
 802e8e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802e8e2:	e75c      	b.n	802e79e <_dtoa_r+0x756>
 802e8e4:	2300      	movs	r3, #0
 802e8e6:	e788      	b.n	802e7fa <_dtoa_r+0x7b2>
 802e8e8:	3fe00000 	.word	0x3fe00000
 802e8ec:	40240000 	.word	0x40240000
 802e8f0:	40140000 	.word	0x40140000
 802e8f4:	9b02      	ldr	r3, [sp, #8]
 802e8f6:	e780      	b.n	802e7fa <_dtoa_r+0x7b2>
 802e8f8:	2300      	movs	r3, #0
 802e8fa:	930a      	str	r3, [sp, #40]	@ 0x28
 802e8fc:	e782      	b.n	802e804 <_dtoa_r+0x7bc>
 802e8fe:	d099      	beq.n	802e834 <_dtoa_r+0x7ec>
 802e900:	9a08      	ldr	r2, [sp, #32]
 802e902:	331c      	adds	r3, #28
 802e904:	441a      	add	r2, r3
 802e906:	4498      	add	r8, r3
 802e908:	441e      	add	r6, r3
 802e90a:	9208      	str	r2, [sp, #32]
 802e90c:	e792      	b.n	802e834 <_dtoa_r+0x7ec>
 802e90e:	4603      	mov	r3, r0
 802e910:	e7f6      	b.n	802e900 <_dtoa_r+0x8b8>
 802e912:	9b07      	ldr	r3, [sp, #28]
 802e914:	9704      	str	r7, [sp, #16]
 802e916:	2b00      	cmp	r3, #0
 802e918:	dc20      	bgt.n	802e95c <_dtoa_r+0x914>
 802e91a:	9300      	str	r3, [sp, #0]
 802e91c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e91e:	2b02      	cmp	r3, #2
 802e920:	dd1e      	ble.n	802e960 <_dtoa_r+0x918>
 802e922:	9b00      	ldr	r3, [sp, #0]
 802e924:	2b00      	cmp	r3, #0
 802e926:	f47f aec0 	bne.w	802e6aa <_dtoa_r+0x662>
 802e92a:	4621      	mov	r1, r4
 802e92c:	2205      	movs	r2, #5
 802e92e:	4658      	mov	r0, fp
 802e930:	f004 fde8 	bl	8033504 <__multadd>
 802e934:	4601      	mov	r1, r0
 802e936:	4604      	mov	r4, r0
 802e938:	4648      	mov	r0, r9
 802e93a:	f005 f82b 	bl	8033994 <__mcmp>
 802e93e:	2800      	cmp	r0, #0
 802e940:	f77f aeb3 	ble.w	802e6aa <_dtoa_r+0x662>
 802e944:	4656      	mov	r6, sl
 802e946:	2331      	movs	r3, #49	@ 0x31
 802e948:	f806 3b01 	strb.w	r3, [r6], #1
 802e94c:	9b04      	ldr	r3, [sp, #16]
 802e94e:	3301      	adds	r3, #1
 802e950:	9304      	str	r3, [sp, #16]
 802e952:	e6ae      	b.n	802e6b2 <_dtoa_r+0x66a>
 802e954:	9c07      	ldr	r4, [sp, #28]
 802e956:	9704      	str	r7, [sp, #16]
 802e958:	4625      	mov	r5, r4
 802e95a:	e7f3      	b.n	802e944 <_dtoa_r+0x8fc>
 802e95c:	9b07      	ldr	r3, [sp, #28]
 802e95e:	9300      	str	r3, [sp, #0]
 802e960:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e962:	2b00      	cmp	r3, #0
 802e964:	f000 8101 	beq.w	802eb6a <_dtoa_r+0xb22>
 802e968:	2e00      	cmp	r6, #0
 802e96a:	dd05      	ble.n	802e978 <_dtoa_r+0x930>
 802e96c:	4629      	mov	r1, r5
 802e96e:	4632      	mov	r2, r6
 802e970:	4658      	mov	r0, fp
 802e972:	f004 ffa3 	bl	80338bc <__lshift>
 802e976:	4605      	mov	r5, r0
 802e978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e97a:	2b00      	cmp	r3, #0
 802e97c:	d059      	beq.n	802ea32 <_dtoa_r+0x9ea>
 802e97e:	6869      	ldr	r1, [r5, #4]
 802e980:	4658      	mov	r0, fp
 802e982:	f004 fd91 	bl	80334a8 <_Balloc>
 802e986:	4606      	mov	r6, r0
 802e988:	b920      	cbnz	r0, 802e994 <_dtoa_r+0x94c>
 802e98a:	4b83      	ldr	r3, [pc, #524]	@ (802eb98 <_dtoa_r+0xb50>)
 802e98c:	4602      	mov	r2, r0
 802e98e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802e992:	e480      	b.n	802e296 <_dtoa_r+0x24e>
 802e994:	692a      	ldr	r2, [r5, #16]
 802e996:	3202      	adds	r2, #2
 802e998:	0092      	lsls	r2, r2, #2
 802e99a:	f105 010c 	add.w	r1, r5, #12
 802e99e:	300c      	adds	r0, #12
 802e9a0:	f7ff fa52 	bl	802de48 <memcpy>
 802e9a4:	2201      	movs	r2, #1
 802e9a6:	4631      	mov	r1, r6
 802e9a8:	4658      	mov	r0, fp
 802e9aa:	f004 ff87 	bl	80338bc <__lshift>
 802e9ae:	f10a 0301 	add.w	r3, sl, #1
 802e9b2:	9307      	str	r3, [sp, #28]
 802e9b4:	9b00      	ldr	r3, [sp, #0]
 802e9b6:	4453      	add	r3, sl
 802e9b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e9ba:	9b02      	ldr	r3, [sp, #8]
 802e9bc:	f003 0301 	and.w	r3, r3, #1
 802e9c0:	462f      	mov	r7, r5
 802e9c2:	930a      	str	r3, [sp, #40]	@ 0x28
 802e9c4:	4605      	mov	r5, r0
 802e9c6:	9b07      	ldr	r3, [sp, #28]
 802e9c8:	4621      	mov	r1, r4
 802e9ca:	3b01      	subs	r3, #1
 802e9cc:	4648      	mov	r0, r9
 802e9ce:	9300      	str	r3, [sp, #0]
 802e9d0:	f7ff faaf 	bl	802df32 <quorem>
 802e9d4:	4639      	mov	r1, r7
 802e9d6:	9002      	str	r0, [sp, #8]
 802e9d8:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802e9dc:	4648      	mov	r0, r9
 802e9de:	f004 ffd9 	bl	8033994 <__mcmp>
 802e9e2:	462a      	mov	r2, r5
 802e9e4:	9008      	str	r0, [sp, #32]
 802e9e6:	4621      	mov	r1, r4
 802e9e8:	4658      	mov	r0, fp
 802e9ea:	f004 ffef 	bl	80339cc <__mdiff>
 802e9ee:	68c2      	ldr	r2, [r0, #12]
 802e9f0:	4606      	mov	r6, r0
 802e9f2:	bb02      	cbnz	r2, 802ea36 <_dtoa_r+0x9ee>
 802e9f4:	4601      	mov	r1, r0
 802e9f6:	4648      	mov	r0, r9
 802e9f8:	f004 ffcc 	bl	8033994 <__mcmp>
 802e9fc:	4602      	mov	r2, r0
 802e9fe:	4631      	mov	r1, r6
 802ea00:	4658      	mov	r0, fp
 802ea02:	920e      	str	r2, [sp, #56]	@ 0x38
 802ea04:	f004 fd75 	bl	80334f2 <_Bfree>
 802ea08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ea0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ea0c:	9e07      	ldr	r6, [sp, #28]
 802ea0e:	ea43 0102 	orr.w	r1, r3, r2
 802ea12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ea14:	4319      	orrs	r1, r3
 802ea16:	d110      	bne.n	802ea3a <_dtoa_r+0x9f2>
 802ea18:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802ea1c:	d029      	beq.n	802ea72 <_dtoa_r+0xa2a>
 802ea1e:	9b08      	ldr	r3, [sp, #32]
 802ea20:	2b00      	cmp	r3, #0
 802ea22:	dd02      	ble.n	802ea2a <_dtoa_r+0x9e2>
 802ea24:	9b02      	ldr	r3, [sp, #8]
 802ea26:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802ea2a:	9b00      	ldr	r3, [sp, #0]
 802ea2c:	f883 8000 	strb.w	r8, [r3]
 802ea30:	e640      	b.n	802e6b4 <_dtoa_r+0x66c>
 802ea32:	4628      	mov	r0, r5
 802ea34:	e7bb      	b.n	802e9ae <_dtoa_r+0x966>
 802ea36:	2201      	movs	r2, #1
 802ea38:	e7e1      	b.n	802e9fe <_dtoa_r+0x9b6>
 802ea3a:	9b08      	ldr	r3, [sp, #32]
 802ea3c:	2b00      	cmp	r3, #0
 802ea3e:	db04      	blt.n	802ea4a <_dtoa_r+0xa02>
 802ea40:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ea42:	430b      	orrs	r3, r1
 802ea44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802ea46:	430b      	orrs	r3, r1
 802ea48:	d120      	bne.n	802ea8c <_dtoa_r+0xa44>
 802ea4a:	2a00      	cmp	r2, #0
 802ea4c:	dded      	ble.n	802ea2a <_dtoa_r+0x9e2>
 802ea4e:	4649      	mov	r1, r9
 802ea50:	2201      	movs	r2, #1
 802ea52:	4658      	mov	r0, fp
 802ea54:	f004 ff32 	bl	80338bc <__lshift>
 802ea58:	4621      	mov	r1, r4
 802ea5a:	4681      	mov	r9, r0
 802ea5c:	f004 ff9a 	bl	8033994 <__mcmp>
 802ea60:	2800      	cmp	r0, #0
 802ea62:	dc03      	bgt.n	802ea6c <_dtoa_r+0xa24>
 802ea64:	d1e1      	bne.n	802ea2a <_dtoa_r+0x9e2>
 802ea66:	f018 0f01 	tst.w	r8, #1
 802ea6a:	d0de      	beq.n	802ea2a <_dtoa_r+0x9e2>
 802ea6c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802ea70:	d1d8      	bne.n	802ea24 <_dtoa_r+0x9dc>
 802ea72:	9a00      	ldr	r2, [sp, #0]
 802ea74:	2339      	movs	r3, #57	@ 0x39
 802ea76:	7013      	strb	r3, [r2, #0]
 802ea78:	4633      	mov	r3, r6
 802ea7a:	461e      	mov	r6, r3
 802ea7c:	3b01      	subs	r3, #1
 802ea7e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802ea82:	2a39      	cmp	r2, #57	@ 0x39
 802ea84:	d052      	beq.n	802eb2c <_dtoa_r+0xae4>
 802ea86:	3201      	adds	r2, #1
 802ea88:	701a      	strb	r2, [r3, #0]
 802ea8a:	e613      	b.n	802e6b4 <_dtoa_r+0x66c>
 802ea8c:	2a00      	cmp	r2, #0
 802ea8e:	dd07      	ble.n	802eaa0 <_dtoa_r+0xa58>
 802ea90:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802ea94:	d0ed      	beq.n	802ea72 <_dtoa_r+0xa2a>
 802ea96:	9a00      	ldr	r2, [sp, #0]
 802ea98:	f108 0301 	add.w	r3, r8, #1
 802ea9c:	7013      	strb	r3, [r2, #0]
 802ea9e:	e609      	b.n	802e6b4 <_dtoa_r+0x66c>
 802eaa0:	9b07      	ldr	r3, [sp, #28]
 802eaa2:	9a07      	ldr	r2, [sp, #28]
 802eaa4:	f803 8c01 	strb.w	r8, [r3, #-1]
 802eaa8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802eaaa:	4293      	cmp	r3, r2
 802eaac:	d028      	beq.n	802eb00 <_dtoa_r+0xab8>
 802eaae:	4649      	mov	r1, r9
 802eab0:	2300      	movs	r3, #0
 802eab2:	220a      	movs	r2, #10
 802eab4:	4658      	mov	r0, fp
 802eab6:	f004 fd25 	bl	8033504 <__multadd>
 802eaba:	42af      	cmp	r7, r5
 802eabc:	4681      	mov	r9, r0
 802eabe:	f04f 0300 	mov.w	r3, #0
 802eac2:	f04f 020a 	mov.w	r2, #10
 802eac6:	4639      	mov	r1, r7
 802eac8:	4658      	mov	r0, fp
 802eaca:	d107      	bne.n	802eadc <_dtoa_r+0xa94>
 802eacc:	f004 fd1a 	bl	8033504 <__multadd>
 802ead0:	4607      	mov	r7, r0
 802ead2:	4605      	mov	r5, r0
 802ead4:	9b07      	ldr	r3, [sp, #28]
 802ead6:	3301      	adds	r3, #1
 802ead8:	9307      	str	r3, [sp, #28]
 802eada:	e774      	b.n	802e9c6 <_dtoa_r+0x97e>
 802eadc:	f004 fd12 	bl	8033504 <__multadd>
 802eae0:	4629      	mov	r1, r5
 802eae2:	4607      	mov	r7, r0
 802eae4:	2300      	movs	r3, #0
 802eae6:	220a      	movs	r2, #10
 802eae8:	4658      	mov	r0, fp
 802eaea:	f004 fd0b 	bl	8033504 <__multadd>
 802eaee:	4605      	mov	r5, r0
 802eaf0:	e7f0      	b.n	802ead4 <_dtoa_r+0xa8c>
 802eaf2:	9b00      	ldr	r3, [sp, #0]
 802eaf4:	2b00      	cmp	r3, #0
 802eaf6:	bfcc      	ite	gt
 802eaf8:	461e      	movgt	r6, r3
 802eafa:	2601      	movle	r6, #1
 802eafc:	4456      	add	r6, sl
 802eafe:	2700      	movs	r7, #0
 802eb00:	4649      	mov	r1, r9
 802eb02:	2201      	movs	r2, #1
 802eb04:	4658      	mov	r0, fp
 802eb06:	f004 fed9 	bl	80338bc <__lshift>
 802eb0a:	4621      	mov	r1, r4
 802eb0c:	4681      	mov	r9, r0
 802eb0e:	f004 ff41 	bl	8033994 <__mcmp>
 802eb12:	2800      	cmp	r0, #0
 802eb14:	dcb0      	bgt.n	802ea78 <_dtoa_r+0xa30>
 802eb16:	d102      	bne.n	802eb1e <_dtoa_r+0xad6>
 802eb18:	f018 0f01 	tst.w	r8, #1
 802eb1c:	d1ac      	bne.n	802ea78 <_dtoa_r+0xa30>
 802eb1e:	4633      	mov	r3, r6
 802eb20:	461e      	mov	r6, r3
 802eb22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802eb26:	2a30      	cmp	r2, #48	@ 0x30
 802eb28:	d0fa      	beq.n	802eb20 <_dtoa_r+0xad8>
 802eb2a:	e5c3      	b.n	802e6b4 <_dtoa_r+0x66c>
 802eb2c:	459a      	cmp	sl, r3
 802eb2e:	d1a4      	bne.n	802ea7a <_dtoa_r+0xa32>
 802eb30:	9b04      	ldr	r3, [sp, #16]
 802eb32:	3301      	adds	r3, #1
 802eb34:	9304      	str	r3, [sp, #16]
 802eb36:	2331      	movs	r3, #49	@ 0x31
 802eb38:	f88a 3000 	strb.w	r3, [sl]
 802eb3c:	e5ba      	b.n	802e6b4 <_dtoa_r+0x66c>
 802eb3e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802eb40:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802eb9c <_dtoa_r+0xb54>
 802eb44:	2b00      	cmp	r3, #0
 802eb46:	f43f aab6 	beq.w	802e0b6 <_dtoa_r+0x6e>
 802eb4a:	f10a 0308 	add.w	r3, sl, #8
 802eb4e:	f7ff bab0 	b.w	802e0b2 <_dtoa_r+0x6a>
 802eb52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802eb54:	2b01      	cmp	r3, #1
 802eb56:	f77f ae3a 	ble.w	802e7ce <_dtoa_r+0x786>
 802eb5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802eb5c:	930a      	str	r3, [sp, #40]	@ 0x28
 802eb5e:	2001      	movs	r0, #1
 802eb60:	e658      	b.n	802e814 <_dtoa_r+0x7cc>
 802eb62:	9b00      	ldr	r3, [sp, #0]
 802eb64:	2b00      	cmp	r3, #0
 802eb66:	f77f aed9 	ble.w	802e91c <_dtoa_r+0x8d4>
 802eb6a:	4656      	mov	r6, sl
 802eb6c:	4621      	mov	r1, r4
 802eb6e:	4648      	mov	r0, r9
 802eb70:	f7ff f9df 	bl	802df32 <quorem>
 802eb74:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802eb78:	f806 8b01 	strb.w	r8, [r6], #1
 802eb7c:	9b00      	ldr	r3, [sp, #0]
 802eb7e:	eba6 020a 	sub.w	r2, r6, sl
 802eb82:	4293      	cmp	r3, r2
 802eb84:	ddb5      	ble.n	802eaf2 <_dtoa_r+0xaaa>
 802eb86:	4649      	mov	r1, r9
 802eb88:	2300      	movs	r3, #0
 802eb8a:	220a      	movs	r2, #10
 802eb8c:	4658      	mov	r0, fp
 802eb8e:	f004 fcb9 	bl	8033504 <__multadd>
 802eb92:	4681      	mov	r9, r0
 802eb94:	e7ea      	b.n	802eb6c <_dtoa_r+0xb24>
 802eb96:	bf00      	nop
 802eb98:	0803c18a 	.word	0x0803c18a
 802eb9c:	0803c17d 	.word	0x0803c17d

0802eba0 <_malloc_trim_r>:
 802eba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802eba4:	4606      	mov	r6, r0
 802eba6:	2008      	movs	r0, #8
 802eba8:	4689      	mov	r9, r1
 802ebaa:	f006 fb53 	bl	8035254 <sysconf>
 802ebae:	4f24      	ldr	r7, [pc, #144]	@ (802ec40 <_malloc_trim_r+0xa0>)
 802ebb0:	4680      	mov	r8, r0
 802ebb2:	4630      	mov	r0, r6
 802ebb4:	f004 fc6c 	bl	8033490 <__malloc_lock>
 802ebb8:	68bb      	ldr	r3, [r7, #8]
 802ebba:	685d      	ldr	r5, [r3, #4]
 802ebbc:	f025 0503 	bic.w	r5, r5, #3
 802ebc0:	f1a5 0411 	sub.w	r4, r5, #17
 802ebc4:	eba4 0409 	sub.w	r4, r4, r9
 802ebc8:	4444      	add	r4, r8
 802ebca:	fbb4 f4f8 	udiv	r4, r4, r8
 802ebce:	3c01      	subs	r4, #1
 802ebd0:	fb08 f404 	mul.w	r4, r8, r4
 802ebd4:	45a0      	cmp	r8, r4
 802ebd6:	dd05      	ble.n	802ebe4 <_malloc_trim_r+0x44>
 802ebd8:	4630      	mov	r0, r6
 802ebda:	f004 fc5f 	bl	803349c <__malloc_unlock>
 802ebde:	2000      	movs	r0, #0
 802ebe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ebe4:	2100      	movs	r1, #0
 802ebe6:	4630      	mov	r0, r6
 802ebe8:	f006 fb24 	bl	8035234 <_sbrk_r>
 802ebec:	68bb      	ldr	r3, [r7, #8]
 802ebee:	442b      	add	r3, r5
 802ebf0:	4298      	cmp	r0, r3
 802ebf2:	d1f1      	bne.n	802ebd8 <_malloc_trim_r+0x38>
 802ebf4:	4261      	negs	r1, r4
 802ebf6:	4630      	mov	r0, r6
 802ebf8:	f006 fb1c 	bl	8035234 <_sbrk_r>
 802ebfc:	3001      	adds	r0, #1
 802ebfe:	d110      	bne.n	802ec22 <_malloc_trim_r+0x82>
 802ec00:	2100      	movs	r1, #0
 802ec02:	4630      	mov	r0, r6
 802ec04:	f006 fb16 	bl	8035234 <_sbrk_r>
 802ec08:	68ba      	ldr	r2, [r7, #8]
 802ec0a:	1a83      	subs	r3, r0, r2
 802ec0c:	2b0f      	cmp	r3, #15
 802ec0e:	dde3      	ble.n	802ebd8 <_malloc_trim_r+0x38>
 802ec10:	490c      	ldr	r1, [pc, #48]	@ (802ec44 <_malloc_trim_r+0xa4>)
 802ec12:	6809      	ldr	r1, [r1, #0]
 802ec14:	1a40      	subs	r0, r0, r1
 802ec16:	490c      	ldr	r1, [pc, #48]	@ (802ec48 <_malloc_trim_r+0xa8>)
 802ec18:	f043 0301 	orr.w	r3, r3, #1
 802ec1c:	6008      	str	r0, [r1, #0]
 802ec1e:	6053      	str	r3, [r2, #4]
 802ec20:	e7da      	b.n	802ebd8 <_malloc_trim_r+0x38>
 802ec22:	68bb      	ldr	r3, [r7, #8]
 802ec24:	4a08      	ldr	r2, [pc, #32]	@ (802ec48 <_malloc_trim_r+0xa8>)
 802ec26:	1b2d      	subs	r5, r5, r4
 802ec28:	f045 0501 	orr.w	r5, r5, #1
 802ec2c:	605d      	str	r5, [r3, #4]
 802ec2e:	6813      	ldr	r3, [r2, #0]
 802ec30:	4630      	mov	r0, r6
 802ec32:	1b1b      	subs	r3, r3, r4
 802ec34:	6013      	str	r3, [r2, #0]
 802ec36:	f004 fc31 	bl	803349c <__malloc_unlock>
 802ec3a:	2001      	movs	r0, #1
 802ec3c:	e7d0      	b.n	802ebe0 <_malloc_trim_r+0x40>
 802ec3e:	bf00      	nop
 802ec40:	2000040c 	.word	0x2000040c
 802ec44:	20000404 	.word	0x20000404
 802ec48:	2001a054 	.word	0x2001a054

0802ec4c <_free_r>:
 802ec4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ec4e:	4604      	mov	r4, r0
 802ec50:	460f      	mov	r7, r1
 802ec52:	2900      	cmp	r1, #0
 802ec54:	f000 80b1 	beq.w	802edba <_free_r+0x16e>
 802ec58:	f004 fc1a 	bl	8033490 <__malloc_lock>
 802ec5c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802ec60:	4d56      	ldr	r5, [pc, #344]	@ (802edbc <_free_r+0x170>)
 802ec62:	f022 0001 	bic.w	r0, r2, #1
 802ec66:	f1a7 0308 	sub.w	r3, r7, #8
 802ec6a:	eb03 0c00 	add.w	ip, r3, r0
 802ec6e:	68a9      	ldr	r1, [r5, #8]
 802ec70:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802ec74:	4561      	cmp	r1, ip
 802ec76:	f026 0603 	bic.w	r6, r6, #3
 802ec7a:	f002 0201 	and.w	r2, r2, #1
 802ec7e:	d11b      	bne.n	802ecb8 <_free_r+0x6c>
 802ec80:	4406      	add	r6, r0
 802ec82:	b93a      	cbnz	r2, 802ec94 <_free_r+0x48>
 802ec84:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802ec88:	1a9b      	subs	r3, r3, r2
 802ec8a:	4416      	add	r6, r2
 802ec8c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802ec90:	60ca      	str	r2, [r1, #12]
 802ec92:	6091      	str	r1, [r2, #8]
 802ec94:	f046 0201 	orr.w	r2, r6, #1
 802ec98:	605a      	str	r2, [r3, #4]
 802ec9a:	60ab      	str	r3, [r5, #8]
 802ec9c:	4b48      	ldr	r3, [pc, #288]	@ (802edc0 <_free_r+0x174>)
 802ec9e:	681b      	ldr	r3, [r3, #0]
 802eca0:	42b3      	cmp	r3, r6
 802eca2:	d804      	bhi.n	802ecae <_free_r+0x62>
 802eca4:	4b47      	ldr	r3, [pc, #284]	@ (802edc4 <_free_r+0x178>)
 802eca6:	4620      	mov	r0, r4
 802eca8:	6819      	ldr	r1, [r3, #0]
 802ecaa:	f7ff ff79 	bl	802eba0 <_malloc_trim_r>
 802ecae:	4620      	mov	r0, r4
 802ecb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802ecb4:	f004 bbf2 	b.w	803349c <__malloc_unlock>
 802ecb8:	f8cc 6004 	str.w	r6, [ip, #4]
 802ecbc:	2a00      	cmp	r2, #0
 802ecbe:	d138      	bne.n	802ed32 <_free_r+0xe6>
 802ecc0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802ecc4:	1a5b      	subs	r3, r3, r1
 802ecc6:	4408      	add	r0, r1
 802ecc8:	6899      	ldr	r1, [r3, #8]
 802ecca:	f105 0708 	add.w	r7, r5, #8
 802ecce:	42b9      	cmp	r1, r7
 802ecd0:	d031      	beq.n	802ed36 <_free_r+0xea>
 802ecd2:	68df      	ldr	r7, [r3, #12]
 802ecd4:	60cf      	str	r7, [r1, #12]
 802ecd6:	60b9      	str	r1, [r7, #8]
 802ecd8:	eb0c 0106 	add.w	r1, ip, r6
 802ecdc:	6849      	ldr	r1, [r1, #4]
 802ecde:	07c9      	lsls	r1, r1, #31
 802ece0:	d40b      	bmi.n	802ecfa <_free_r+0xae>
 802ece2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802ece6:	4430      	add	r0, r6
 802ece8:	bb3a      	cbnz	r2, 802ed3a <_free_r+0xee>
 802ecea:	4e37      	ldr	r6, [pc, #220]	@ (802edc8 <_free_r+0x17c>)
 802ecec:	42b1      	cmp	r1, r6
 802ecee:	d124      	bne.n	802ed3a <_free_r+0xee>
 802ecf0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802ecf4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802ecf8:	2201      	movs	r2, #1
 802ecfa:	f040 0101 	orr.w	r1, r0, #1
 802ecfe:	6059      	str	r1, [r3, #4]
 802ed00:	5018      	str	r0, [r3, r0]
 802ed02:	2a00      	cmp	r2, #0
 802ed04:	d1d3      	bne.n	802ecae <_free_r+0x62>
 802ed06:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802ed0a:	d21b      	bcs.n	802ed44 <_free_r+0xf8>
 802ed0c:	08c2      	lsrs	r2, r0, #3
 802ed0e:	2101      	movs	r1, #1
 802ed10:	0940      	lsrs	r0, r0, #5
 802ed12:	4081      	lsls	r1, r0
 802ed14:	6868      	ldr	r0, [r5, #4]
 802ed16:	3201      	adds	r2, #1
 802ed18:	4301      	orrs	r1, r0
 802ed1a:	6069      	str	r1, [r5, #4]
 802ed1c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 802ed20:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802ed24:	3908      	subs	r1, #8
 802ed26:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802ed2a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 802ed2e:	60c3      	str	r3, [r0, #12]
 802ed30:	e7bd      	b.n	802ecae <_free_r+0x62>
 802ed32:	2200      	movs	r2, #0
 802ed34:	e7d0      	b.n	802ecd8 <_free_r+0x8c>
 802ed36:	2201      	movs	r2, #1
 802ed38:	e7ce      	b.n	802ecd8 <_free_r+0x8c>
 802ed3a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802ed3e:	60ce      	str	r6, [r1, #12]
 802ed40:	60b1      	str	r1, [r6, #8]
 802ed42:	e7da      	b.n	802ecfa <_free_r+0xae>
 802ed44:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 802ed48:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802ed4c:	d214      	bcs.n	802ed78 <_free_r+0x12c>
 802ed4e:	0982      	lsrs	r2, r0, #6
 802ed50:	3238      	adds	r2, #56	@ 0x38
 802ed52:	1c51      	adds	r1, r2, #1
 802ed54:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802ed58:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802ed5c:	428e      	cmp	r6, r1
 802ed5e:	d125      	bne.n	802edac <_free_r+0x160>
 802ed60:	2001      	movs	r0, #1
 802ed62:	1092      	asrs	r2, r2, #2
 802ed64:	fa00 f202 	lsl.w	r2, r0, r2
 802ed68:	6868      	ldr	r0, [r5, #4]
 802ed6a:	4302      	orrs	r2, r0
 802ed6c:	606a      	str	r2, [r5, #4]
 802ed6e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802ed72:	60b3      	str	r3, [r6, #8]
 802ed74:	60cb      	str	r3, [r1, #12]
 802ed76:	e79a      	b.n	802ecae <_free_r+0x62>
 802ed78:	2a14      	cmp	r2, #20
 802ed7a:	d801      	bhi.n	802ed80 <_free_r+0x134>
 802ed7c:	325b      	adds	r2, #91	@ 0x5b
 802ed7e:	e7e8      	b.n	802ed52 <_free_r+0x106>
 802ed80:	2a54      	cmp	r2, #84	@ 0x54
 802ed82:	d802      	bhi.n	802ed8a <_free_r+0x13e>
 802ed84:	0b02      	lsrs	r2, r0, #12
 802ed86:	326e      	adds	r2, #110	@ 0x6e
 802ed88:	e7e3      	b.n	802ed52 <_free_r+0x106>
 802ed8a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802ed8e:	d802      	bhi.n	802ed96 <_free_r+0x14a>
 802ed90:	0bc2      	lsrs	r2, r0, #15
 802ed92:	3277      	adds	r2, #119	@ 0x77
 802ed94:	e7dd      	b.n	802ed52 <_free_r+0x106>
 802ed96:	f240 5154 	movw	r1, #1364	@ 0x554
 802ed9a:	428a      	cmp	r2, r1
 802ed9c:	bf9a      	itte	ls
 802ed9e:	0c82      	lsrls	r2, r0, #18
 802eda0:	327c      	addls	r2, #124	@ 0x7c
 802eda2:	227e      	movhi	r2, #126	@ 0x7e
 802eda4:	e7d5      	b.n	802ed52 <_free_r+0x106>
 802eda6:	6889      	ldr	r1, [r1, #8]
 802eda8:	428e      	cmp	r6, r1
 802edaa:	d004      	beq.n	802edb6 <_free_r+0x16a>
 802edac:	684a      	ldr	r2, [r1, #4]
 802edae:	f022 0203 	bic.w	r2, r2, #3
 802edb2:	4282      	cmp	r2, r0
 802edb4:	d8f7      	bhi.n	802eda6 <_free_r+0x15a>
 802edb6:	68ce      	ldr	r6, [r1, #12]
 802edb8:	e7d9      	b.n	802ed6e <_free_r+0x122>
 802edba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802edbc:	2000040c 	.word	0x2000040c
 802edc0:	20000408 	.word	0x20000408
 802edc4:	2001a084 	.word	0x2001a084
 802edc8:	20000414 	.word	0x20000414

0802edcc <_findenv_r>:
 802edcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802edd0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802ee40 <_findenv_r+0x74>
 802edd4:	4606      	mov	r6, r0
 802edd6:	4689      	mov	r9, r1
 802edd8:	4617      	mov	r7, r2
 802edda:	f006 fc31 	bl	8035640 <__env_lock>
 802edde:	f8da 4000 	ldr.w	r4, [sl]
 802ede2:	b134      	cbz	r4, 802edf2 <_findenv_r+0x26>
 802ede4:	464b      	mov	r3, r9
 802ede6:	4698      	mov	r8, r3
 802ede8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802edec:	b13a      	cbz	r2, 802edfe <_findenv_r+0x32>
 802edee:	2a3d      	cmp	r2, #61	@ 0x3d
 802edf0:	d1f9      	bne.n	802ede6 <_findenv_r+0x1a>
 802edf2:	4630      	mov	r0, r6
 802edf4:	f006 fc2a 	bl	803564c <__env_unlock>
 802edf8:	2000      	movs	r0, #0
 802edfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802edfe:	eba8 0809 	sub.w	r8, r8, r9
 802ee02:	46a3      	mov	fp, r4
 802ee04:	f854 0b04 	ldr.w	r0, [r4], #4
 802ee08:	2800      	cmp	r0, #0
 802ee0a:	d0f2      	beq.n	802edf2 <_findenv_r+0x26>
 802ee0c:	4642      	mov	r2, r8
 802ee0e:	4649      	mov	r1, r9
 802ee10:	f7fd fe13 	bl	802ca3a <strncmp>
 802ee14:	2800      	cmp	r0, #0
 802ee16:	d1f4      	bne.n	802ee02 <_findenv_r+0x36>
 802ee18:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802ee1c:	eb03 0508 	add.w	r5, r3, r8
 802ee20:	f813 3008 	ldrb.w	r3, [r3, r8]
 802ee24:	2b3d      	cmp	r3, #61	@ 0x3d
 802ee26:	d1ec      	bne.n	802ee02 <_findenv_r+0x36>
 802ee28:	f8da 3000 	ldr.w	r3, [sl]
 802ee2c:	ebab 0303 	sub.w	r3, fp, r3
 802ee30:	109b      	asrs	r3, r3, #2
 802ee32:	4630      	mov	r0, r6
 802ee34:	603b      	str	r3, [r7, #0]
 802ee36:	f006 fc09 	bl	803564c <__env_unlock>
 802ee3a:	1c68      	adds	r0, r5, #1
 802ee3c:	e7dd      	b.n	802edfa <_findenv_r+0x2e>
 802ee3e:	bf00      	nop
 802ee40:	20000014 	.word	0x20000014

0802ee44 <_getenv_r>:
 802ee44:	b507      	push	{r0, r1, r2, lr}
 802ee46:	aa01      	add	r2, sp, #4
 802ee48:	f7ff ffc0 	bl	802edcc <_findenv_r>
 802ee4c:	b003      	add	sp, #12
 802ee4e:	f85d fb04 	ldr.w	pc, [sp], #4

0802ee52 <labs>:
 802ee52:	2800      	cmp	r0, #0
 802ee54:	bfb8      	it	lt
 802ee56:	4240      	neglt	r0, r0
 802ee58:	4770      	bx	lr
	...

0802ee5c <malloc>:
 802ee5c:	4b02      	ldr	r3, [pc, #8]	@ (802ee68 <malloc+0xc>)
 802ee5e:	4601      	mov	r1, r0
 802ee60:	6818      	ldr	r0, [r3, #0]
 802ee62:	f000 b80b 	b.w	802ee7c <_malloc_r>
 802ee66:	bf00      	nop
 802ee68:	200002d8 	.word	0x200002d8

0802ee6c <free>:
 802ee6c:	4b02      	ldr	r3, [pc, #8]	@ (802ee78 <free+0xc>)
 802ee6e:	4601      	mov	r1, r0
 802ee70:	6818      	ldr	r0, [r3, #0]
 802ee72:	f7ff beeb 	b.w	802ec4c <_free_r>
 802ee76:	bf00      	nop
 802ee78:	200002d8 	.word	0x200002d8

0802ee7c <_malloc_r>:
 802ee7c:	f101 030b 	add.w	r3, r1, #11
 802ee80:	2b16      	cmp	r3, #22
 802ee82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ee86:	4605      	mov	r5, r0
 802ee88:	d906      	bls.n	802ee98 <_malloc_r+0x1c>
 802ee8a:	f033 0707 	bics.w	r7, r3, #7
 802ee8e:	d504      	bpl.n	802ee9a <_malloc_r+0x1e>
 802ee90:	230c      	movs	r3, #12
 802ee92:	602b      	str	r3, [r5, #0]
 802ee94:	2400      	movs	r4, #0
 802ee96:	e1a3      	b.n	802f1e0 <_malloc_r+0x364>
 802ee98:	2710      	movs	r7, #16
 802ee9a:	42b9      	cmp	r1, r7
 802ee9c:	d8f8      	bhi.n	802ee90 <_malloc_r+0x14>
 802ee9e:	4628      	mov	r0, r5
 802eea0:	f004 faf6 	bl	8033490 <__malloc_lock>
 802eea4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 802eea8:	4eaf      	ldr	r6, [pc, #700]	@ (802f168 <_malloc_r+0x2ec>)
 802eeaa:	d237      	bcs.n	802ef1c <_malloc_r+0xa0>
 802eeac:	f107 0208 	add.w	r2, r7, #8
 802eeb0:	4432      	add	r2, r6
 802eeb2:	f1a2 0108 	sub.w	r1, r2, #8
 802eeb6:	6854      	ldr	r4, [r2, #4]
 802eeb8:	428c      	cmp	r4, r1
 802eeba:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802eebe:	d102      	bne.n	802eec6 <_malloc_r+0x4a>
 802eec0:	68d4      	ldr	r4, [r2, #12]
 802eec2:	42a2      	cmp	r2, r4
 802eec4:	d010      	beq.n	802eee8 <_malloc_r+0x6c>
 802eec6:	6863      	ldr	r3, [r4, #4]
 802eec8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802eecc:	f023 0303 	bic.w	r3, r3, #3
 802eed0:	60ca      	str	r2, [r1, #12]
 802eed2:	4423      	add	r3, r4
 802eed4:	6091      	str	r1, [r2, #8]
 802eed6:	685a      	ldr	r2, [r3, #4]
 802eed8:	f042 0201 	orr.w	r2, r2, #1
 802eedc:	605a      	str	r2, [r3, #4]
 802eede:	4628      	mov	r0, r5
 802eee0:	f004 fadc 	bl	803349c <__malloc_unlock>
 802eee4:	3408      	adds	r4, #8
 802eee6:	e17b      	b.n	802f1e0 <_malloc_r+0x364>
 802eee8:	3302      	adds	r3, #2
 802eeea:	6934      	ldr	r4, [r6, #16]
 802eeec:	499f      	ldr	r1, [pc, #636]	@ (802f16c <_malloc_r+0x2f0>)
 802eeee:	428c      	cmp	r4, r1
 802eef0:	d077      	beq.n	802efe2 <_malloc_r+0x166>
 802eef2:	6862      	ldr	r2, [r4, #4]
 802eef4:	f022 0c03 	bic.w	ip, r2, #3
 802eef8:	ebac 0007 	sub.w	r0, ip, r7
 802eefc:	280f      	cmp	r0, #15
 802eefe:	dd48      	ble.n	802ef92 <_malloc_r+0x116>
 802ef00:	19e2      	adds	r2, r4, r7
 802ef02:	f040 0301 	orr.w	r3, r0, #1
 802ef06:	f047 0701 	orr.w	r7, r7, #1
 802ef0a:	6067      	str	r7, [r4, #4]
 802ef0c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802ef10:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802ef14:	6053      	str	r3, [r2, #4]
 802ef16:	f844 000c 	str.w	r0, [r4, ip]
 802ef1a:	e7e0      	b.n	802eede <_malloc_r+0x62>
 802ef1c:	0a7b      	lsrs	r3, r7, #9
 802ef1e:	d02a      	beq.n	802ef76 <_malloc_r+0xfa>
 802ef20:	2b04      	cmp	r3, #4
 802ef22:	d812      	bhi.n	802ef4a <_malloc_r+0xce>
 802ef24:	09bb      	lsrs	r3, r7, #6
 802ef26:	3338      	adds	r3, #56	@ 0x38
 802ef28:	1c5a      	adds	r2, r3, #1
 802ef2a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802ef2e:	f1a2 0c08 	sub.w	ip, r2, #8
 802ef32:	6854      	ldr	r4, [r2, #4]
 802ef34:	4564      	cmp	r4, ip
 802ef36:	d006      	beq.n	802ef46 <_malloc_r+0xca>
 802ef38:	6862      	ldr	r2, [r4, #4]
 802ef3a:	f022 0203 	bic.w	r2, r2, #3
 802ef3e:	1bd0      	subs	r0, r2, r7
 802ef40:	280f      	cmp	r0, #15
 802ef42:	dd1c      	ble.n	802ef7e <_malloc_r+0x102>
 802ef44:	3b01      	subs	r3, #1
 802ef46:	3301      	adds	r3, #1
 802ef48:	e7cf      	b.n	802eeea <_malloc_r+0x6e>
 802ef4a:	2b14      	cmp	r3, #20
 802ef4c:	d801      	bhi.n	802ef52 <_malloc_r+0xd6>
 802ef4e:	335b      	adds	r3, #91	@ 0x5b
 802ef50:	e7ea      	b.n	802ef28 <_malloc_r+0xac>
 802ef52:	2b54      	cmp	r3, #84	@ 0x54
 802ef54:	d802      	bhi.n	802ef5c <_malloc_r+0xe0>
 802ef56:	0b3b      	lsrs	r3, r7, #12
 802ef58:	336e      	adds	r3, #110	@ 0x6e
 802ef5a:	e7e5      	b.n	802ef28 <_malloc_r+0xac>
 802ef5c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 802ef60:	d802      	bhi.n	802ef68 <_malloc_r+0xec>
 802ef62:	0bfb      	lsrs	r3, r7, #15
 802ef64:	3377      	adds	r3, #119	@ 0x77
 802ef66:	e7df      	b.n	802ef28 <_malloc_r+0xac>
 802ef68:	f240 5254 	movw	r2, #1364	@ 0x554
 802ef6c:	4293      	cmp	r3, r2
 802ef6e:	d804      	bhi.n	802ef7a <_malloc_r+0xfe>
 802ef70:	0cbb      	lsrs	r3, r7, #18
 802ef72:	337c      	adds	r3, #124	@ 0x7c
 802ef74:	e7d8      	b.n	802ef28 <_malloc_r+0xac>
 802ef76:	233f      	movs	r3, #63	@ 0x3f
 802ef78:	e7d6      	b.n	802ef28 <_malloc_r+0xac>
 802ef7a:	237e      	movs	r3, #126	@ 0x7e
 802ef7c:	e7d4      	b.n	802ef28 <_malloc_r+0xac>
 802ef7e:	2800      	cmp	r0, #0
 802ef80:	68e1      	ldr	r1, [r4, #12]
 802ef82:	db04      	blt.n	802ef8e <_malloc_r+0x112>
 802ef84:	68a3      	ldr	r3, [r4, #8]
 802ef86:	60d9      	str	r1, [r3, #12]
 802ef88:	608b      	str	r3, [r1, #8]
 802ef8a:	18a3      	adds	r3, r4, r2
 802ef8c:	e7a3      	b.n	802eed6 <_malloc_r+0x5a>
 802ef8e:	460c      	mov	r4, r1
 802ef90:	e7d0      	b.n	802ef34 <_malloc_r+0xb8>
 802ef92:	2800      	cmp	r0, #0
 802ef94:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802ef98:	db07      	blt.n	802efaa <_malloc_r+0x12e>
 802ef9a:	44a4      	add	ip, r4
 802ef9c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802efa0:	f043 0301 	orr.w	r3, r3, #1
 802efa4:	f8cc 3004 	str.w	r3, [ip, #4]
 802efa8:	e799      	b.n	802eede <_malloc_r+0x62>
 802efaa:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802efae:	6870      	ldr	r0, [r6, #4]
 802efb0:	f080 8095 	bcs.w	802f0de <_malloc_r+0x262>
 802efb4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802efb8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802efbc:	f04f 0c01 	mov.w	ip, #1
 802efc0:	3201      	adds	r2, #1
 802efc2:	fa0c fc0e 	lsl.w	ip, ip, lr
 802efc6:	ea4c 0000 	orr.w	r0, ip, r0
 802efca:	6070      	str	r0, [r6, #4]
 802efcc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802efd0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802efd4:	3808      	subs	r0, #8
 802efd6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802efda:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802efde:	f8cc 400c 	str.w	r4, [ip, #12]
 802efe2:	1098      	asrs	r0, r3, #2
 802efe4:	2201      	movs	r2, #1
 802efe6:	4082      	lsls	r2, r0
 802efe8:	6870      	ldr	r0, [r6, #4]
 802efea:	4290      	cmp	r0, r2
 802efec:	d326      	bcc.n	802f03c <_malloc_r+0x1c0>
 802efee:	4210      	tst	r0, r2
 802eff0:	d106      	bne.n	802f000 <_malloc_r+0x184>
 802eff2:	f023 0303 	bic.w	r3, r3, #3
 802eff6:	0052      	lsls	r2, r2, #1
 802eff8:	4210      	tst	r0, r2
 802effa:	f103 0304 	add.w	r3, r3, #4
 802effe:	d0fa      	beq.n	802eff6 <_malloc_r+0x17a>
 802f000:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802f004:	46c1      	mov	r9, r8
 802f006:	469e      	mov	lr, r3
 802f008:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802f00c:	454c      	cmp	r4, r9
 802f00e:	f040 80b9 	bne.w	802f184 <_malloc_r+0x308>
 802f012:	f10e 0e01 	add.w	lr, lr, #1
 802f016:	f01e 0f03 	tst.w	lr, #3
 802f01a:	f109 0908 	add.w	r9, r9, #8
 802f01e:	d1f3      	bne.n	802f008 <_malloc_r+0x18c>
 802f020:	0798      	lsls	r0, r3, #30
 802f022:	f040 80e3 	bne.w	802f1ec <_malloc_r+0x370>
 802f026:	6873      	ldr	r3, [r6, #4]
 802f028:	ea23 0302 	bic.w	r3, r3, r2
 802f02c:	6073      	str	r3, [r6, #4]
 802f02e:	6870      	ldr	r0, [r6, #4]
 802f030:	0052      	lsls	r2, r2, #1
 802f032:	4290      	cmp	r0, r2
 802f034:	d302      	bcc.n	802f03c <_malloc_r+0x1c0>
 802f036:	2a00      	cmp	r2, #0
 802f038:	f040 80e5 	bne.w	802f206 <_malloc_r+0x38a>
 802f03c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802f040:	f8da 3004 	ldr.w	r3, [sl, #4]
 802f044:	f023 0903 	bic.w	r9, r3, #3
 802f048:	45b9      	cmp	r9, r7
 802f04a:	d304      	bcc.n	802f056 <_malloc_r+0x1da>
 802f04c:	eba9 0207 	sub.w	r2, r9, r7
 802f050:	2a0f      	cmp	r2, #15
 802f052:	f300 8141 	bgt.w	802f2d8 <_malloc_r+0x45c>
 802f056:	4b46      	ldr	r3, [pc, #280]	@ (802f170 <_malloc_r+0x2f4>)
 802f058:	6819      	ldr	r1, [r3, #0]
 802f05a:	3110      	adds	r1, #16
 802f05c:	4439      	add	r1, r7
 802f05e:	2008      	movs	r0, #8
 802f060:	9101      	str	r1, [sp, #4]
 802f062:	f006 f8f7 	bl	8035254 <sysconf>
 802f066:	4a43      	ldr	r2, [pc, #268]	@ (802f174 <_malloc_r+0x2f8>)
 802f068:	9901      	ldr	r1, [sp, #4]
 802f06a:	6813      	ldr	r3, [r2, #0]
 802f06c:	3301      	adds	r3, #1
 802f06e:	bf1f      	itttt	ne
 802f070:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 802f074:	1809      	addne	r1, r1, r0
 802f076:	4243      	negne	r3, r0
 802f078:	4019      	andne	r1, r3
 802f07a:	4680      	mov	r8, r0
 802f07c:	4628      	mov	r0, r5
 802f07e:	9101      	str	r1, [sp, #4]
 802f080:	f006 f8d8 	bl	8035234 <_sbrk_r>
 802f084:	1c42      	adds	r2, r0, #1
 802f086:	eb0a 0b09 	add.w	fp, sl, r9
 802f08a:	4604      	mov	r4, r0
 802f08c:	f000 80f7 	beq.w	802f27e <_malloc_r+0x402>
 802f090:	4583      	cmp	fp, r0
 802f092:	9901      	ldr	r1, [sp, #4]
 802f094:	4a37      	ldr	r2, [pc, #220]	@ (802f174 <_malloc_r+0x2f8>)
 802f096:	d902      	bls.n	802f09e <_malloc_r+0x222>
 802f098:	45b2      	cmp	sl, r6
 802f09a:	f040 80f0 	bne.w	802f27e <_malloc_r+0x402>
 802f09e:	4b36      	ldr	r3, [pc, #216]	@ (802f178 <_malloc_r+0x2fc>)
 802f0a0:	6818      	ldr	r0, [r3, #0]
 802f0a2:	45a3      	cmp	fp, r4
 802f0a4:	eb00 0e01 	add.w	lr, r0, r1
 802f0a8:	f8c3 e000 	str.w	lr, [r3]
 802f0ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 802f0b0:	f040 80ab 	bne.w	802f20a <_malloc_r+0x38e>
 802f0b4:	ea1b 0f0c 	tst.w	fp, ip
 802f0b8:	f040 80a7 	bne.w	802f20a <_malloc_r+0x38e>
 802f0bc:	68b2      	ldr	r2, [r6, #8]
 802f0be:	4449      	add	r1, r9
 802f0c0:	f041 0101 	orr.w	r1, r1, #1
 802f0c4:	6051      	str	r1, [r2, #4]
 802f0c6:	4a2d      	ldr	r2, [pc, #180]	@ (802f17c <_malloc_r+0x300>)
 802f0c8:	681b      	ldr	r3, [r3, #0]
 802f0ca:	6811      	ldr	r1, [r2, #0]
 802f0cc:	428b      	cmp	r3, r1
 802f0ce:	bf88      	it	hi
 802f0d0:	6013      	strhi	r3, [r2, #0]
 802f0d2:	4a2b      	ldr	r2, [pc, #172]	@ (802f180 <_malloc_r+0x304>)
 802f0d4:	6811      	ldr	r1, [r2, #0]
 802f0d6:	428b      	cmp	r3, r1
 802f0d8:	bf88      	it	hi
 802f0da:	6013      	strhi	r3, [r2, #0]
 802f0dc:	e0cf      	b.n	802f27e <_malloc_r+0x402>
 802f0de:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 802f0e2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802f0e6:	d218      	bcs.n	802f11a <_malloc_r+0x29e>
 802f0e8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802f0ec:	3238      	adds	r2, #56	@ 0x38
 802f0ee:	f102 0e01 	add.w	lr, r2, #1
 802f0f2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802f0f6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802f0fa:	45f0      	cmp	r8, lr
 802f0fc:	d12b      	bne.n	802f156 <_malloc_r+0x2da>
 802f0fe:	1092      	asrs	r2, r2, #2
 802f100:	f04f 0c01 	mov.w	ip, #1
 802f104:	fa0c f202 	lsl.w	r2, ip, r2
 802f108:	4302      	orrs	r2, r0
 802f10a:	6072      	str	r2, [r6, #4]
 802f10c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802f110:	f8c8 4008 	str.w	r4, [r8, #8]
 802f114:	f8ce 400c 	str.w	r4, [lr, #12]
 802f118:	e763      	b.n	802efe2 <_malloc_r+0x166>
 802f11a:	2a14      	cmp	r2, #20
 802f11c:	d801      	bhi.n	802f122 <_malloc_r+0x2a6>
 802f11e:	325b      	adds	r2, #91	@ 0x5b
 802f120:	e7e5      	b.n	802f0ee <_malloc_r+0x272>
 802f122:	2a54      	cmp	r2, #84	@ 0x54
 802f124:	d803      	bhi.n	802f12e <_malloc_r+0x2b2>
 802f126:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802f12a:	326e      	adds	r2, #110	@ 0x6e
 802f12c:	e7df      	b.n	802f0ee <_malloc_r+0x272>
 802f12e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802f132:	d803      	bhi.n	802f13c <_malloc_r+0x2c0>
 802f134:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802f138:	3277      	adds	r2, #119	@ 0x77
 802f13a:	e7d8      	b.n	802f0ee <_malloc_r+0x272>
 802f13c:	f240 5e54 	movw	lr, #1364	@ 0x554
 802f140:	4572      	cmp	r2, lr
 802f142:	bf9a      	itte	ls
 802f144:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802f148:	327c      	addls	r2, #124	@ 0x7c
 802f14a:	227e      	movhi	r2, #126	@ 0x7e
 802f14c:	e7cf      	b.n	802f0ee <_malloc_r+0x272>
 802f14e:	f8de e008 	ldr.w	lr, [lr, #8]
 802f152:	45f0      	cmp	r8, lr
 802f154:	d005      	beq.n	802f162 <_malloc_r+0x2e6>
 802f156:	f8de 2004 	ldr.w	r2, [lr, #4]
 802f15a:	f022 0203 	bic.w	r2, r2, #3
 802f15e:	4562      	cmp	r2, ip
 802f160:	d8f5      	bhi.n	802f14e <_malloc_r+0x2d2>
 802f162:	f8de 800c 	ldr.w	r8, [lr, #12]
 802f166:	e7d1      	b.n	802f10c <_malloc_r+0x290>
 802f168:	2000040c 	.word	0x2000040c
 802f16c:	20000414 	.word	0x20000414
 802f170:	2001a084 	.word	0x2001a084
 802f174:	20000404 	.word	0x20000404
 802f178:	2001a054 	.word	0x2001a054
 802f17c:	2001a080 	.word	0x2001a080
 802f180:	2001a07c 	.word	0x2001a07c
 802f184:	6860      	ldr	r0, [r4, #4]
 802f186:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802f18a:	f020 0003 	bic.w	r0, r0, #3
 802f18e:	eba0 0a07 	sub.w	sl, r0, r7
 802f192:	f1ba 0f0f 	cmp.w	sl, #15
 802f196:	dd12      	ble.n	802f1be <_malloc_r+0x342>
 802f198:	68a3      	ldr	r3, [r4, #8]
 802f19a:	19e2      	adds	r2, r4, r7
 802f19c:	f047 0701 	orr.w	r7, r7, #1
 802f1a0:	6067      	str	r7, [r4, #4]
 802f1a2:	f8c3 c00c 	str.w	ip, [r3, #12]
 802f1a6:	f8cc 3008 	str.w	r3, [ip, #8]
 802f1aa:	f04a 0301 	orr.w	r3, sl, #1
 802f1ae:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802f1b2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802f1b6:	6053      	str	r3, [r2, #4]
 802f1b8:	f844 a000 	str.w	sl, [r4, r0]
 802f1bc:	e68f      	b.n	802eede <_malloc_r+0x62>
 802f1be:	f1ba 0f00 	cmp.w	sl, #0
 802f1c2:	db11      	blt.n	802f1e8 <_malloc_r+0x36c>
 802f1c4:	4420      	add	r0, r4
 802f1c6:	6843      	ldr	r3, [r0, #4]
 802f1c8:	f043 0301 	orr.w	r3, r3, #1
 802f1cc:	6043      	str	r3, [r0, #4]
 802f1ce:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802f1d2:	4628      	mov	r0, r5
 802f1d4:	f8c3 c00c 	str.w	ip, [r3, #12]
 802f1d8:	f8cc 3008 	str.w	r3, [ip, #8]
 802f1dc:	f004 f95e 	bl	803349c <__malloc_unlock>
 802f1e0:	4620      	mov	r0, r4
 802f1e2:	b003      	add	sp, #12
 802f1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f1e8:	4664      	mov	r4, ip
 802f1ea:	e70f      	b.n	802f00c <_malloc_r+0x190>
 802f1ec:	f858 0908 	ldr.w	r0, [r8], #-8
 802f1f0:	4540      	cmp	r0, r8
 802f1f2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802f1f6:	f43f af13 	beq.w	802f020 <_malloc_r+0x1a4>
 802f1fa:	e718      	b.n	802f02e <_malloc_r+0x1b2>
 802f1fc:	3304      	adds	r3, #4
 802f1fe:	0052      	lsls	r2, r2, #1
 802f200:	4210      	tst	r0, r2
 802f202:	d0fb      	beq.n	802f1fc <_malloc_r+0x380>
 802f204:	e6fc      	b.n	802f000 <_malloc_r+0x184>
 802f206:	4673      	mov	r3, lr
 802f208:	e7fa      	b.n	802f200 <_malloc_r+0x384>
 802f20a:	6810      	ldr	r0, [r2, #0]
 802f20c:	3001      	adds	r0, #1
 802f20e:	bf1b      	ittet	ne
 802f210:	eba4 0b0b 	subne.w	fp, r4, fp
 802f214:	eb0b 020e 	addne.w	r2, fp, lr
 802f218:	6014      	streq	r4, [r2, #0]
 802f21a:	601a      	strne	r2, [r3, #0]
 802f21c:	f014 0b07 	ands.w	fp, r4, #7
 802f220:	bf1a      	itte	ne
 802f222:	f1cb 0008 	rsbne	r0, fp, #8
 802f226:	1824      	addne	r4, r4, r0
 802f228:	4658      	moveq	r0, fp
 802f22a:	1862      	adds	r2, r4, r1
 802f22c:	ea02 010c 	and.w	r1, r2, ip
 802f230:	4480      	add	r8, r0
 802f232:	eba8 0801 	sub.w	r8, r8, r1
 802f236:	ea08 080c 	and.w	r8, r8, ip
 802f23a:	4641      	mov	r1, r8
 802f23c:	4628      	mov	r0, r5
 802f23e:	9201      	str	r2, [sp, #4]
 802f240:	f005 fff8 	bl	8035234 <_sbrk_r>
 802f244:	1c43      	adds	r3, r0, #1
 802f246:	9a01      	ldr	r2, [sp, #4]
 802f248:	4b28      	ldr	r3, [pc, #160]	@ (802f2ec <_malloc_r+0x470>)
 802f24a:	d107      	bne.n	802f25c <_malloc_r+0x3e0>
 802f24c:	f1bb 0f00 	cmp.w	fp, #0
 802f250:	d023      	beq.n	802f29a <_malloc_r+0x41e>
 802f252:	f1ab 0008 	sub.w	r0, fp, #8
 802f256:	4410      	add	r0, r2
 802f258:	f04f 0800 	mov.w	r8, #0
 802f25c:	681a      	ldr	r2, [r3, #0]
 802f25e:	60b4      	str	r4, [r6, #8]
 802f260:	1b00      	subs	r0, r0, r4
 802f262:	4440      	add	r0, r8
 802f264:	4442      	add	r2, r8
 802f266:	f040 0001 	orr.w	r0, r0, #1
 802f26a:	45b2      	cmp	sl, r6
 802f26c:	601a      	str	r2, [r3, #0]
 802f26e:	6060      	str	r0, [r4, #4]
 802f270:	f43f af29 	beq.w	802f0c6 <_malloc_r+0x24a>
 802f274:	f1b9 0f0f 	cmp.w	r9, #15
 802f278:	d812      	bhi.n	802f2a0 <_malloc_r+0x424>
 802f27a:	2301      	movs	r3, #1
 802f27c:	6063      	str	r3, [r4, #4]
 802f27e:	68b3      	ldr	r3, [r6, #8]
 802f280:	685b      	ldr	r3, [r3, #4]
 802f282:	f023 0303 	bic.w	r3, r3, #3
 802f286:	42bb      	cmp	r3, r7
 802f288:	eba3 0207 	sub.w	r2, r3, r7
 802f28c:	d301      	bcc.n	802f292 <_malloc_r+0x416>
 802f28e:	2a0f      	cmp	r2, #15
 802f290:	dc22      	bgt.n	802f2d8 <_malloc_r+0x45c>
 802f292:	4628      	mov	r0, r5
 802f294:	f004 f902 	bl	803349c <__malloc_unlock>
 802f298:	e5fc      	b.n	802ee94 <_malloc_r+0x18>
 802f29a:	4610      	mov	r0, r2
 802f29c:	46d8      	mov	r8, fp
 802f29e:	e7dd      	b.n	802f25c <_malloc_r+0x3e0>
 802f2a0:	f8da 2004 	ldr.w	r2, [sl, #4]
 802f2a4:	f1a9 090c 	sub.w	r9, r9, #12
 802f2a8:	f029 0907 	bic.w	r9, r9, #7
 802f2ac:	f002 0201 	and.w	r2, r2, #1
 802f2b0:	ea42 0209 	orr.w	r2, r2, r9
 802f2b4:	f8ca 2004 	str.w	r2, [sl, #4]
 802f2b8:	2105      	movs	r1, #5
 802f2ba:	eb0a 0209 	add.w	r2, sl, r9
 802f2be:	f1b9 0f0f 	cmp.w	r9, #15
 802f2c2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802f2c6:	f67f aefe 	bls.w	802f0c6 <_malloc_r+0x24a>
 802f2ca:	f10a 0108 	add.w	r1, sl, #8
 802f2ce:	4628      	mov	r0, r5
 802f2d0:	f7ff fcbc 	bl	802ec4c <_free_r>
 802f2d4:	4b05      	ldr	r3, [pc, #20]	@ (802f2ec <_malloc_r+0x470>)
 802f2d6:	e6f6      	b.n	802f0c6 <_malloc_r+0x24a>
 802f2d8:	68b4      	ldr	r4, [r6, #8]
 802f2da:	f047 0301 	orr.w	r3, r7, #1
 802f2de:	4427      	add	r7, r4
 802f2e0:	f042 0201 	orr.w	r2, r2, #1
 802f2e4:	6063      	str	r3, [r4, #4]
 802f2e6:	60b7      	str	r7, [r6, #8]
 802f2e8:	607a      	str	r2, [r7, #4]
 802f2ea:	e5f8      	b.n	802eede <_malloc_r+0x62>
 802f2ec:	2001a054 	.word	0x2001a054

0802f2f0 <__ascii_mbtowc>:
 802f2f0:	b082      	sub	sp, #8
 802f2f2:	b901      	cbnz	r1, 802f2f6 <__ascii_mbtowc+0x6>
 802f2f4:	a901      	add	r1, sp, #4
 802f2f6:	b142      	cbz	r2, 802f30a <__ascii_mbtowc+0x1a>
 802f2f8:	b14b      	cbz	r3, 802f30e <__ascii_mbtowc+0x1e>
 802f2fa:	7813      	ldrb	r3, [r2, #0]
 802f2fc:	600b      	str	r3, [r1, #0]
 802f2fe:	7812      	ldrb	r2, [r2, #0]
 802f300:	1e10      	subs	r0, r2, #0
 802f302:	bf18      	it	ne
 802f304:	2001      	movne	r0, #1
 802f306:	b002      	add	sp, #8
 802f308:	4770      	bx	lr
 802f30a:	4610      	mov	r0, r2
 802f30c:	e7fb      	b.n	802f306 <__ascii_mbtowc+0x16>
 802f30e:	f06f 0001 	mvn.w	r0, #1
 802f312:	e7f8      	b.n	802f306 <__ascii_mbtowc+0x16>

0802f314 <siscanf>:
 802f314:	b40e      	push	{r1, r2, r3}
 802f316:	b530      	push	{r4, r5, lr}
 802f318:	b09c      	sub	sp, #112	@ 0x70
 802f31a:	ac1f      	add	r4, sp, #124	@ 0x7c
 802f31c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802f320:	f854 5b04 	ldr.w	r5, [r4], #4
 802f324:	f8ad 2014 	strh.w	r2, [sp, #20]
 802f328:	9002      	str	r0, [sp, #8]
 802f32a:	9006      	str	r0, [sp, #24]
 802f32c:	f7e0 ffb8 	bl	80102a0 <strlen>
 802f330:	4b0b      	ldr	r3, [pc, #44]	@ (802f360 <siscanf+0x4c>)
 802f332:	9003      	str	r0, [sp, #12]
 802f334:	9007      	str	r0, [sp, #28]
 802f336:	930a      	str	r3, [sp, #40]	@ 0x28
 802f338:	480a      	ldr	r0, [pc, #40]	@ (802f364 <siscanf+0x50>)
 802f33a:	9401      	str	r4, [sp, #4]
 802f33c:	2300      	movs	r3, #0
 802f33e:	930e      	str	r3, [sp, #56]	@ 0x38
 802f340:	9313      	str	r3, [sp, #76]	@ 0x4c
 802f342:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802f346:	f8ad 3016 	strh.w	r3, [sp, #22]
 802f34a:	462a      	mov	r2, r5
 802f34c:	4623      	mov	r3, r4
 802f34e:	a902      	add	r1, sp, #8
 802f350:	6800      	ldr	r0, [r0, #0]
 802f352:	f000 fd99 	bl	802fe88 <__ssvfiscanf_r>
 802f356:	b01c      	add	sp, #112	@ 0x70
 802f358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802f35c:	b003      	add	sp, #12
 802f35e:	4770      	bx	lr
 802f360:	0802c303 	.word	0x0802c303
 802f364:	200002d8 	.word	0x200002d8

0802f368 <sniprintf>:
 802f368:	b40c      	push	{r2, r3}
 802f36a:	b530      	push	{r4, r5, lr}
 802f36c:	4b17      	ldr	r3, [pc, #92]	@ (802f3cc <sniprintf+0x64>)
 802f36e:	1e0c      	subs	r4, r1, #0
 802f370:	681d      	ldr	r5, [r3, #0]
 802f372:	b09d      	sub	sp, #116	@ 0x74
 802f374:	da08      	bge.n	802f388 <sniprintf+0x20>
 802f376:	238b      	movs	r3, #139	@ 0x8b
 802f378:	602b      	str	r3, [r5, #0]
 802f37a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f37e:	b01d      	add	sp, #116	@ 0x74
 802f380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802f384:	b002      	add	sp, #8
 802f386:	4770      	bx	lr
 802f388:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802f38c:	f8ad 3014 	strh.w	r3, [sp, #20]
 802f390:	bf14      	ite	ne
 802f392:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802f396:	4623      	moveq	r3, r4
 802f398:	9304      	str	r3, [sp, #16]
 802f39a:	9307      	str	r3, [sp, #28]
 802f39c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802f3a0:	9002      	str	r0, [sp, #8]
 802f3a2:	9006      	str	r0, [sp, #24]
 802f3a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 802f3a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802f3aa:	ab21      	add	r3, sp, #132	@ 0x84
 802f3ac:	a902      	add	r1, sp, #8
 802f3ae:	4628      	mov	r0, r5
 802f3b0:	9301      	str	r3, [sp, #4]
 802f3b2:	f000 f88b 	bl	802f4cc <_svfiprintf_r>
 802f3b6:	1c43      	adds	r3, r0, #1
 802f3b8:	bfbc      	itt	lt
 802f3ba:	238b      	movlt	r3, #139	@ 0x8b
 802f3bc:	602b      	strlt	r3, [r5, #0]
 802f3be:	2c00      	cmp	r4, #0
 802f3c0:	d0dd      	beq.n	802f37e <sniprintf+0x16>
 802f3c2:	9b02      	ldr	r3, [sp, #8]
 802f3c4:	2200      	movs	r2, #0
 802f3c6:	701a      	strb	r2, [r3, #0]
 802f3c8:	e7d9      	b.n	802f37e <sniprintf+0x16>
 802f3ca:	bf00      	nop
 802f3cc:	200002d8 	.word	0x200002d8

0802f3d0 <__ssprint_r>:
 802f3d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f3d4:	6893      	ldr	r3, [r2, #8]
 802f3d6:	f8d2 b000 	ldr.w	fp, [r2]
 802f3da:	9001      	str	r0, [sp, #4]
 802f3dc:	460c      	mov	r4, r1
 802f3de:	4617      	mov	r7, r2
 802f3e0:	2b00      	cmp	r3, #0
 802f3e2:	d157      	bne.n	802f494 <__ssprint_r+0xc4>
 802f3e4:	2000      	movs	r0, #0
 802f3e6:	2300      	movs	r3, #0
 802f3e8:	607b      	str	r3, [r7, #4]
 802f3ea:	b003      	add	sp, #12
 802f3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f3f0:	e9db a800 	ldrd	sl, r8, [fp]
 802f3f4:	f10b 0b08 	add.w	fp, fp, #8
 802f3f8:	68a6      	ldr	r6, [r4, #8]
 802f3fa:	6820      	ldr	r0, [r4, #0]
 802f3fc:	f1b8 0f00 	cmp.w	r8, #0
 802f400:	d0f6      	beq.n	802f3f0 <__ssprint_r+0x20>
 802f402:	45b0      	cmp	r8, r6
 802f404:	d32e      	bcc.n	802f464 <__ssprint_r+0x94>
 802f406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802f40a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802f40e:	d029      	beq.n	802f464 <__ssprint_r+0x94>
 802f410:	6921      	ldr	r1, [r4, #16]
 802f412:	6965      	ldr	r5, [r4, #20]
 802f414:	eba0 0901 	sub.w	r9, r0, r1
 802f418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802f41c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802f420:	f109 0001 	add.w	r0, r9, #1
 802f424:	106d      	asrs	r5, r5, #1
 802f426:	4440      	add	r0, r8
 802f428:	4285      	cmp	r5, r0
 802f42a:	bf38      	it	cc
 802f42c:	4605      	movcc	r5, r0
 802f42e:	0553      	lsls	r3, r2, #21
 802f430:	d534      	bpl.n	802f49c <__ssprint_r+0xcc>
 802f432:	9801      	ldr	r0, [sp, #4]
 802f434:	4629      	mov	r1, r5
 802f436:	f7ff fd21 	bl	802ee7c <_malloc_r>
 802f43a:	4606      	mov	r6, r0
 802f43c:	2800      	cmp	r0, #0
 802f43e:	d038      	beq.n	802f4b2 <__ssprint_r+0xe2>
 802f440:	464a      	mov	r2, r9
 802f442:	6921      	ldr	r1, [r4, #16]
 802f444:	f7fe fd00 	bl	802de48 <memcpy>
 802f448:	89a2      	ldrh	r2, [r4, #12]
 802f44a:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802f44e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802f452:	81a2      	strh	r2, [r4, #12]
 802f454:	6126      	str	r6, [r4, #16]
 802f456:	6165      	str	r5, [r4, #20]
 802f458:	444e      	add	r6, r9
 802f45a:	eba5 0509 	sub.w	r5, r5, r9
 802f45e:	6026      	str	r6, [r4, #0]
 802f460:	60a5      	str	r5, [r4, #8]
 802f462:	4646      	mov	r6, r8
 802f464:	4546      	cmp	r6, r8
 802f466:	bf28      	it	cs
 802f468:	4646      	movcs	r6, r8
 802f46a:	4632      	mov	r2, r6
 802f46c:	4651      	mov	r1, sl
 802f46e:	6820      	ldr	r0, [r4, #0]
 802f470:	f7fd fa94 	bl	802c99c <memmove>
 802f474:	68a2      	ldr	r2, [r4, #8]
 802f476:	1b92      	subs	r2, r2, r6
 802f478:	60a2      	str	r2, [r4, #8]
 802f47a:	6822      	ldr	r2, [r4, #0]
 802f47c:	4432      	add	r2, r6
 802f47e:	6022      	str	r2, [r4, #0]
 802f480:	68ba      	ldr	r2, [r7, #8]
 802f482:	eba2 0308 	sub.w	r3, r2, r8
 802f486:	44c2      	add	sl, r8
 802f488:	60bb      	str	r3, [r7, #8]
 802f48a:	2b00      	cmp	r3, #0
 802f48c:	d0aa      	beq.n	802f3e4 <__ssprint_r+0x14>
 802f48e:	f04f 0800 	mov.w	r8, #0
 802f492:	e7b1      	b.n	802f3f8 <__ssprint_r+0x28>
 802f494:	f04f 0a00 	mov.w	sl, #0
 802f498:	46d0      	mov	r8, sl
 802f49a:	e7ad      	b.n	802f3f8 <__ssprint_r+0x28>
 802f49c:	9801      	ldr	r0, [sp, #4]
 802f49e:	462a      	mov	r2, r5
 802f4a0:	f004 fcfc 	bl	8033e9c <_realloc_r>
 802f4a4:	4606      	mov	r6, r0
 802f4a6:	2800      	cmp	r0, #0
 802f4a8:	d1d4      	bne.n	802f454 <__ssprint_r+0x84>
 802f4aa:	6921      	ldr	r1, [r4, #16]
 802f4ac:	9801      	ldr	r0, [sp, #4]
 802f4ae:	f7ff fbcd 	bl	802ec4c <_free_r>
 802f4b2:	9a01      	ldr	r2, [sp, #4]
 802f4b4:	230c      	movs	r3, #12
 802f4b6:	6013      	str	r3, [r2, #0]
 802f4b8:	89a3      	ldrh	r3, [r4, #12]
 802f4ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802f4be:	81a3      	strh	r3, [r4, #12]
 802f4c0:	2300      	movs	r3, #0
 802f4c2:	60bb      	str	r3, [r7, #8]
 802f4c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f4c8:	e78d      	b.n	802f3e6 <__ssprint_r+0x16>
	...

0802f4cc <_svfiprintf_r>:
 802f4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f4d0:	461d      	mov	r5, r3
 802f4d2:	898b      	ldrh	r3, [r1, #12]
 802f4d4:	b0bb      	sub	sp, #236	@ 0xec
 802f4d6:	468b      	mov	fp, r1
 802f4d8:	0619      	lsls	r1, r3, #24
 802f4da:	9001      	str	r0, [sp, #4]
 802f4dc:	9202      	str	r2, [sp, #8]
 802f4de:	d514      	bpl.n	802f50a <_svfiprintf_r+0x3e>
 802f4e0:	f8db 3010 	ldr.w	r3, [fp, #16]
 802f4e4:	b98b      	cbnz	r3, 802f50a <_svfiprintf_r+0x3e>
 802f4e6:	2140      	movs	r1, #64	@ 0x40
 802f4e8:	f7ff fcc8 	bl	802ee7c <_malloc_r>
 802f4ec:	f8cb 0000 	str.w	r0, [fp]
 802f4f0:	f8cb 0010 	str.w	r0, [fp, #16]
 802f4f4:	b930      	cbnz	r0, 802f504 <_svfiprintf_r+0x38>
 802f4f6:	9a01      	ldr	r2, [sp, #4]
 802f4f8:	230c      	movs	r3, #12
 802f4fa:	6013      	str	r3, [r2, #0]
 802f4fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f500:	9304      	str	r3, [sp, #16]
 802f502:	e3df      	b.n	802fcc4 <_svfiprintf_r+0x7f8>
 802f504:	2340      	movs	r3, #64	@ 0x40
 802f506:	f8cb 3014 	str.w	r3, [fp, #20]
 802f50a:	2300      	movs	r3, #0
 802f50c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802f510:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802f514:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802f518:	ae11      	add	r6, sp, #68	@ 0x44
 802f51a:	960e      	str	r6, [sp, #56]	@ 0x38
 802f51c:	9304      	str	r3, [sp, #16]
 802f51e:	9b02      	ldr	r3, [sp, #8]
 802f520:	461c      	mov	r4, r3
 802f522:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f526:	b10a      	cbz	r2, 802f52c <_svfiprintf_r+0x60>
 802f528:	2a25      	cmp	r2, #37	@ 0x25
 802f52a:	d1f9      	bne.n	802f520 <_svfiprintf_r+0x54>
 802f52c:	9a02      	ldr	r2, [sp, #8]
 802f52e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f530:	1aa7      	subs	r7, r4, r2
 802f532:	d00c      	beq.n	802f54e <_svfiprintf_r+0x82>
 802f534:	443b      	add	r3, r7
 802f536:	9310      	str	r3, [sp, #64]	@ 0x40
 802f538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802f53a:	3301      	adds	r3, #1
 802f53c:	2b07      	cmp	r3, #7
 802f53e:	e9c6 2700 	strd	r2, r7, [r6]
 802f542:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f544:	dc76      	bgt.n	802f634 <_svfiprintf_r+0x168>
 802f546:	3608      	adds	r6, #8
 802f548:	9b04      	ldr	r3, [sp, #16]
 802f54a:	443b      	add	r3, r7
 802f54c:	9304      	str	r3, [sp, #16]
 802f54e:	7823      	ldrb	r3, [r4, #0]
 802f550:	2b00      	cmp	r3, #0
 802f552:	f000 83ce 	beq.w	802fcf2 <_svfiprintf_r+0x826>
 802f556:	2300      	movs	r3, #0
 802f558:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802f55c:	3401      	adds	r4, #1
 802f55e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802f562:	9200      	str	r2, [sp, #0]
 802f564:	9303      	str	r3, [sp, #12]
 802f566:	4699      	mov	r9, r3
 802f568:	4622      	mov	r2, r4
 802f56a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f56e:	9202      	str	r2, [sp, #8]
 802f570:	f1a3 0220 	sub.w	r2, r3, #32
 802f574:	2a5a      	cmp	r2, #90	@ 0x5a
 802f576:	f200 8318 	bhi.w	802fbaa <_svfiprintf_r+0x6de>
 802f57a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802f57e:	009a      	.short	0x009a
 802f580:	03160316 	.word	0x03160316
 802f584:	031600a2 	.word	0x031600a2
 802f588:	03160316 	.word	0x03160316
 802f58c:	03160082 	.word	0x03160082
 802f590:	00a50316 	.word	0x00a50316
 802f594:	031600af 	.word	0x031600af
 802f598:	00b100ac 	.word	0x00b100ac
 802f59c:	00cc0316 	.word	0x00cc0316
 802f5a0:	00cf00cf 	.word	0x00cf00cf
 802f5a4:	00cf00cf 	.word	0x00cf00cf
 802f5a8:	00cf00cf 	.word	0x00cf00cf
 802f5ac:	00cf00cf 	.word	0x00cf00cf
 802f5b0:	031600cf 	.word	0x031600cf
 802f5b4:	03160316 	.word	0x03160316
 802f5b8:	03160316 	.word	0x03160316
 802f5bc:	03160316 	.word	0x03160316
 802f5c0:	03160316 	.word	0x03160316
 802f5c4:	010600f9 	.word	0x010600f9
 802f5c8:	03160316 	.word	0x03160316
 802f5cc:	03160316 	.word	0x03160316
 802f5d0:	03160316 	.word	0x03160316
 802f5d4:	03160316 	.word	0x03160316
 802f5d8:	03160316 	.word	0x03160316
 802f5dc:	03160154 	.word	0x03160154
 802f5e0:	03160316 	.word	0x03160316
 802f5e4:	0316019b 	.word	0x0316019b
 802f5e8:	0316027d 	.word	0x0316027d
 802f5ec:	029d0316 	.word	0x029d0316
 802f5f0:	03160316 	.word	0x03160316
 802f5f4:	03160316 	.word	0x03160316
 802f5f8:	03160316 	.word	0x03160316
 802f5fc:	03160316 	.word	0x03160316
 802f600:	03160316 	.word	0x03160316
 802f604:	010800f9 	.word	0x010800f9
 802f608:	03160316 	.word	0x03160316
 802f60c:	00df0316 	.word	0x00df0316
 802f610:	00f30108 	.word	0x00f30108
 802f614:	00ec0316 	.word	0x00ec0316
 802f618:	01340316 	.word	0x01340316
 802f61c:	018a0156 	.word	0x018a0156
 802f620:	031600f3 	.word	0x031600f3
 802f624:	0098019b 	.word	0x0098019b
 802f628:	0316027f 	.word	0x0316027f
 802f62c:	00650316 	.word	0x00650316
 802f630:	00980316 	.word	0x00980316
 802f634:	9801      	ldr	r0, [sp, #4]
 802f636:	aa0e      	add	r2, sp, #56	@ 0x38
 802f638:	4659      	mov	r1, fp
 802f63a:	f7ff fec9 	bl	802f3d0 <__ssprint_r>
 802f63e:	2800      	cmp	r0, #0
 802f640:	f040 833b 	bne.w	802fcba <_svfiprintf_r+0x7ee>
 802f644:	ae11      	add	r6, sp, #68	@ 0x44
 802f646:	e77f      	b.n	802f548 <_svfiprintf_r+0x7c>
 802f648:	4a99      	ldr	r2, [pc, #612]	@ (802f8b0 <_svfiprintf_r+0x3e4>)
 802f64a:	9205      	str	r2, [sp, #20]
 802f64c:	f019 0220 	ands.w	r2, r9, #32
 802f650:	f000 8234 	beq.w	802fabc <_svfiprintf_r+0x5f0>
 802f654:	3507      	adds	r5, #7
 802f656:	f025 0507 	bic.w	r5, r5, #7
 802f65a:	462f      	mov	r7, r5
 802f65c:	686d      	ldr	r5, [r5, #4]
 802f65e:	f857 4b08 	ldr.w	r4, [r7], #8
 802f662:	f019 0f01 	tst.w	r9, #1
 802f666:	d009      	beq.n	802f67c <_svfiprintf_r+0x1b0>
 802f668:	ea54 0205 	orrs.w	r2, r4, r5
 802f66c:	bf1f      	itttt	ne
 802f66e:	2230      	movne	r2, #48	@ 0x30
 802f670:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802f674:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802f678:	f049 0902 	orrne.w	r9, r9, #2
 802f67c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802f680:	e113      	b.n	802f8aa <_svfiprintf_r+0x3de>
 802f682:	9801      	ldr	r0, [sp, #4]
 802f684:	f7fe fb32 	bl	802dcec <_localeconv_r>
 802f688:	6843      	ldr	r3, [r0, #4]
 802f68a:	9308      	str	r3, [sp, #32]
 802f68c:	4618      	mov	r0, r3
 802f68e:	f7e0 fe07 	bl	80102a0 <strlen>
 802f692:	9007      	str	r0, [sp, #28]
 802f694:	9801      	ldr	r0, [sp, #4]
 802f696:	f7fe fb29 	bl	802dcec <_localeconv_r>
 802f69a:	6883      	ldr	r3, [r0, #8]
 802f69c:	9306      	str	r3, [sp, #24]
 802f69e:	9b07      	ldr	r3, [sp, #28]
 802f6a0:	b12b      	cbz	r3, 802f6ae <_svfiprintf_r+0x1e2>
 802f6a2:	9b06      	ldr	r3, [sp, #24]
 802f6a4:	b11b      	cbz	r3, 802f6ae <_svfiprintf_r+0x1e2>
 802f6a6:	781b      	ldrb	r3, [r3, #0]
 802f6a8:	b10b      	cbz	r3, 802f6ae <_svfiprintf_r+0x1e2>
 802f6aa:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802f6ae:	9c02      	ldr	r4, [sp, #8]
 802f6b0:	e75a      	b.n	802f568 <_svfiprintf_r+0x9c>
 802f6b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802f6b6:	2b00      	cmp	r3, #0
 802f6b8:	d1f9      	bne.n	802f6ae <_svfiprintf_r+0x1e2>
 802f6ba:	2320      	movs	r3, #32
 802f6bc:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802f6c0:	e7f5      	b.n	802f6ae <_svfiprintf_r+0x1e2>
 802f6c2:	f049 0901 	orr.w	r9, r9, #1
 802f6c6:	e7f2      	b.n	802f6ae <_svfiprintf_r+0x1e2>
 802f6c8:	f855 3b04 	ldr.w	r3, [r5], #4
 802f6cc:	9303      	str	r3, [sp, #12]
 802f6ce:	2b00      	cmp	r3, #0
 802f6d0:	daed      	bge.n	802f6ae <_svfiprintf_r+0x1e2>
 802f6d2:	425b      	negs	r3, r3
 802f6d4:	9303      	str	r3, [sp, #12]
 802f6d6:	f049 0904 	orr.w	r9, r9, #4
 802f6da:	e7e8      	b.n	802f6ae <_svfiprintf_r+0x1e2>
 802f6dc:	232b      	movs	r3, #43	@ 0x2b
 802f6de:	e7ed      	b.n	802f6bc <_svfiprintf_r+0x1f0>
 802f6e0:	9a02      	ldr	r2, [sp, #8]
 802f6e2:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f6e6:	2b2a      	cmp	r3, #42	@ 0x2a
 802f6e8:	d111      	bne.n	802f70e <_svfiprintf_r+0x242>
 802f6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 802f6ee:	9202      	str	r2, [sp, #8]
 802f6f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802f6f4:	9300      	str	r3, [sp, #0]
 802f6f6:	e7da      	b.n	802f6ae <_svfiprintf_r+0x1e2>
 802f6f8:	9b00      	ldr	r3, [sp, #0]
 802f6fa:	fb00 1303 	mla	r3, r0, r3, r1
 802f6fe:	9300      	str	r3, [sp, #0]
 802f700:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f704:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802f708:	2909      	cmp	r1, #9
 802f70a:	d9f5      	bls.n	802f6f8 <_svfiprintf_r+0x22c>
 802f70c:	e72f      	b.n	802f56e <_svfiprintf_r+0xa2>
 802f70e:	2100      	movs	r1, #0
 802f710:	9100      	str	r1, [sp, #0]
 802f712:	200a      	movs	r0, #10
 802f714:	e7f6      	b.n	802f704 <_svfiprintf_r+0x238>
 802f716:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802f71a:	e7c8      	b.n	802f6ae <_svfiprintf_r+0x1e2>
 802f71c:	2100      	movs	r1, #0
 802f71e:	9a02      	ldr	r2, [sp, #8]
 802f720:	9103      	str	r1, [sp, #12]
 802f722:	200a      	movs	r0, #10
 802f724:	9903      	ldr	r1, [sp, #12]
 802f726:	3b30      	subs	r3, #48	@ 0x30
 802f728:	fb00 3301 	mla	r3, r0, r1, r3
 802f72c:	9303      	str	r3, [sp, #12]
 802f72e:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f732:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802f736:	2909      	cmp	r1, #9
 802f738:	d9f4      	bls.n	802f724 <_svfiprintf_r+0x258>
 802f73a:	e718      	b.n	802f56e <_svfiprintf_r+0xa2>
 802f73c:	9b02      	ldr	r3, [sp, #8]
 802f73e:	781b      	ldrb	r3, [r3, #0]
 802f740:	2b68      	cmp	r3, #104	@ 0x68
 802f742:	bf01      	itttt	eq
 802f744:	9b02      	ldreq	r3, [sp, #8]
 802f746:	3301      	addeq	r3, #1
 802f748:	9302      	streq	r3, [sp, #8]
 802f74a:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802f74e:	bf18      	it	ne
 802f750:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 802f754:	e7ab      	b.n	802f6ae <_svfiprintf_r+0x1e2>
 802f756:	9b02      	ldr	r3, [sp, #8]
 802f758:	781b      	ldrb	r3, [r3, #0]
 802f75a:	2b6c      	cmp	r3, #108	@ 0x6c
 802f75c:	d105      	bne.n	802f76a <_svfiprintf_r+0x29e>
 802f75e:	9b02      	ldr	r3, [sp, #8]
 802f760:	3301      	adds	r3, #1
 802f762:	9302      	str	r3, [sp, #8]
 802f764:	f049 0920 	orr.w	r9, r9, #32
 802f768:	e7a1      	b.n	802f6ae <_svfiprintf_r+0x1e2>
 802f76a:	f049 0910 	orr.w	r9, r9, #16
 802f76e:	e79e      	b.n	802f6ae <_svfiprintf_r+0x1e2>
 802f770:	462f      	mov	r7, r5
 802f772:	2400      	movs	r4, #0
 802f774:	f857 3b04 	ldr.w	r3, [r7], #4
 802f778:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802f77c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802f780:	2301      	movs	r3, #1
 802f782:	9300      	str	r3, [sp, #0]
 802f784:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 802f788:	e0aa      	b.n	802f8e0 <_svfiprintf_r+0x414>
 802f78a:	f049 0910 	orr.w	r9, r9, #16
 802f78e:	f019 0f20 	tst.w	r9, #32
 802f792:	d011      	beq.n	802f7b8 <_svfiprintf_r+0x2ec>
 802f794:	3507      	adds	r5, #7
 802f796:	f025 0507 	bic.w	r5, r5, #7
 802f79a:	462f      	mov	r7, r5
 802f79c:	686d      	ldr	r5, [r5, #4]
 802f79e:	f857 4b08 	ldr.w	r4, [r7], #8
 802f7a2:	2d00      	cmp	r5, #0
 802f7a4:	da06      	bge.n	802f7b4 <_svfiprintf_r+0x2e8>
 802f7a6:	4264      	negs	r4, r4
 802f7a8:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802f7ac:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802f7b0:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802f7b4:	2301      	movs	r3, #1
 802f7b6:	e048      	b.n	802f84a <_svfiprintf_r+0x37e>
 802f7b8:	462f      	mov	r7, r5
 802f7ba:	f019 0f10 	tst.w	r9, #16
 802f7be:	f857 5b04 	ldr.w	r5, [r7], #4
 802f7c2:	d002      	beq.n	802f7ca <_svfiprintf_r+0x2fe>
 802f7c4:	462c      	mov	r4, r5
 802f7c6:	17ed      	asrs	r5, r5, #31
 802f7c8:	e7eb      	b.n	802f7a2 <_svfiprintf_r+0x2d6>
 802f7ca:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802f7ce:	d003      	beq.n	802f7d8 <_svfiprintf_r+0x30c>
 802f7d0:	b22c      	sxth	r4, r5
 802f7d2:	f345 35c0 	sbfx	r5, r5, #15, #1
 802f7d6:	e7e4      	b.n	802f7a2 <_svfiprintf_r+0x2d6>
 802f7d8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802f7dc:	d0f2      	beq.n	802f7c4 <_svfiprintf_r+0x2f8>
 802f7de:	b26c      	sxtb	r4, r5
 802f7e0:	f345 15c0 	sbfx	r5, r5, #7, #1
 802f7e4:	e7dd      	b.n	802f7a2 <_svfiprintf_r+0x2d6>
 802f7e6:	f019 0f20 	tst.w	r9, #32
 802f7ea:	d007      	beq.n	802f7fc <_svfiprintf_r+0x330>
 802f7ec:	9a04      	ldr	r2, [sp, #16]
 802f7ee:	682b      	ldr	r3, [r5, #0]
 802f7f0:	9904      	ldr	r1, [sp, #16]
 802f7f2:	17d2      	asrs	r2, r2, #31
 802f7f4:	e9c3 1200 	strd	r1, r2, [r3]
 802f7f8:	3504      	adds	r5, #4
 802f7fa:	e690      	b.n	802f51e <_svfiprintf_r+0x52>
 802f7fc:	f019 0f10 	tst.w	r9, #16
 802f800:	d003      	beq.n	802f80a <_svfiprintf_r+0x33e>
 802f802:	682b      	ldr	r3, [r5, #0]
 802f804:	9a04      	ldr	r2, [sp, #16]
 802f806:	601a      	str	r2, [r3, #0]
 802f808:	e7f6      	b.n	802f7f8 <_svfiprintf_r+0x32c>
 802f80a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802f80e:	d003      	beq.n	802f818 <_svfiprintf_r+0x34c>
 802f810:	682b      	ldr	r3, [r5, #0]
 802f812:	9a04      	ldr	r2, [sp, #16]
 802f814:	801a      	strh	r2, [r3, #0]
 802f816:	e7ef      	b.n	802f7f8 <_svfiprintf_r+0x32c>
 802f818:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802f81c:	d0f1      	beq.n	802f802 <_svfiprintf_r+0x336>
 802f81e:	682b      	ldr	r3, [r5, #0]
 802f820:	9a04      	ldr	r2, [sp, #16]
 802f822:	701a      	strb	r2, [r3, #0]
 802f824:	e7e8      	b.n	802f7f8 <_svfiprintf_r+0x32c>
 802f826:	f049 0910 	orr.w	r9, r9, #16
 802f82a:	f019 0320 	ands.w	r3, r9, #32
 802f82e:	d01e      	beq.n	802f86e <_svfiprintf_r+0x3a2>
 802f830:	3507      	adds	r5, #7
 802f832:	f025 0507 	bic.w	r5, r5, #7
 802f836:	462f      	mov	r7, r5
 802f838:	686d      	ldr	r5, [r5, #4]
 802f83a:	f857 4b08 	ldr.w	r4, [r7], #8
 802f83e:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802f842:	2300      	movs	r3, #0
 802f844:	2200      	movs	r2, #0
 802f846:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802f84a:	9a00      	ldr	r2, [sp, #0]
 802f84c:	3201      	adds	r2, #1
 802f84e:	f000 8259 	beq.w	802fd04 <_svfiprintf_r+0x838>
 802f852:	ea54 0205 	orrs.w	r2, r4, r5
 802f856:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 802f85a:	f040 8258 	bne.w	802fd0e <_svfiprintf_r+0x842>
 802f85e:	9a00      	ldr	r2, [sp, #0]
 802f860:	2a00      	cmp	r2, #0
 802f862:	f000 8199 	beq.w	802fb98 <_svfiprintf_r+0x6cc>
 802f866:	2b01      	cmp	r3, #1
 802f868:	f040 8254 	bne.w	802fd14 <_svfiprintf_r+0x848>
 802f86c:	e13d      	b.n	802faea <_svfiprintf_r+0x61e>
 802f86e:	462f      	mov	r7, r5
 802f870:	f019 0510 	ands.w	r5, r9, #16
 802f874:	f857 4b04 	ldr.w	r4, [r7], #4
 802f878:	d001      	beq.n	802f87e <_svfiprintf_r+0x3b2>
 802f87a:	461d      	mov	r5, r3
 802f87c:	e7df      	b.n	802f83e <_svfiprintf_r+0x372>
 802f87e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802f882:	d001      	beq.n	802f888 <_svfiprintf_r+0x3bc>
 802f884:	b2a4      	uxth	r4, r4
 802f886:	e7da      	b.n	802f83e <_svfiprintf_r+0x372>
 802f888:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802f88c:	d0d7      	beq.n	802f83e <_svfiprintf_r+0x372>
 802f88e:	b2e4      	uxtb	r4, r4
 802f890:	e7f3      	b.n	802f87a <_svfiprintf_r+0x3ae>
 802f892:	462f      	mov	r7, r5
 802f894:	f647 0330 	movw	r3, #30768	@ 0x7830
 802f898:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802f89c:	f857 4b04 	ldr.w	r4, [r7], #4
 802f8a0:	4b03      	ldr	r3, [pc, #12]	@ (802f8b0 <_svfiprintf_r+0x3e4>)
 802f8a2:	9305      	str	r3, [sp, #20]
 802f8a4:	2500      	movs	r5, #0
 802f8a6:	f049 0902 	orr.w	r9, r9, #2
 802f8aa:	2302      	movs	r3, #2
 802f8ac:	e7ca      	b.n	802f844 <_svfiprintf_r+0x378>
 802f8ae:	bf00      	nop
 802f8b0:	0803bccf 	.word	0x0803bccf
 802f8b4:	9b00      	ldr	r3, [sp, #0]
 802f8b6:	462f      	mov	r7, r5
 802f8b8:	1c5a      	adds	r2, r3, #1
 802f8ba:	f04f 0500 	mov.w	r5, #0
 802f8be:	f857 8b04 	ldr.w	r8, [r7], #4
 802f8c2:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802f8c6:	f000 80d2 	beq.w	802fa6e <_svfiprintf_r+0x5a2>
 802f8ca:	461a      	mov	r2, r3
 802f8cc:	4629      	mov	r1, r5
 802f8ce:	4640      	mov	r0, r8
 802f8d0:	f7e0 fc96 	bl	8010200 <memchr>
 802f8d4:	4604      	mov	r4, r0
 802f8d6:	b118      	cbz	r0, 802f8e0 <_svfiprintf_r+0x414>
 802f8d8:	eba0 0308 	sub.w	r3, r0, r8
 802f8dc:	9300      	str	r3, [sp, #0]
 802f8de:	462c      	mov	r4, r5
 802f8e0:	9d00      	ldr	r5, [sp, #0]
 802f8e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802f8e6:	42a5      	cmp	r5, r4
 802f8e8:	bfb8      	it	lt
 802f8ea:	4625      	movlt	r5, r4
 802f8ec:	b103      	cbz	r3, 802f8f0 <_svfiprintf_r+0x424>
 802f8ee:	3501      	adds	r5, #1
 802f8f0:	f019 0302 	ands.w	r3, r9, #2
 802f8f4:	9309      	str	r3, [sp, #36]	@ 0x24
 802f8f6:	bf18      	it	ne
 802f8f8:	3502      	addne	r5, #2
 802f8fa:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 802f8fe:	930a      	str	r3, [sp, #40]	@ 0x28
 802f900:	d123      	bne.n	802f94a <_svfiprintf_r+0x47e>
 802f902:	9b03      	ldr	r3, [sp, #12]
 802f904:	eba3 0a05 	sub.w	sl, r3, r5
 802f908:	f1ba 0f00 	cmp.w	sl, #0
 802f90c:	dd1d      	ble.n	802f94a <_svfiprintf_r+0x47e>
 802f90e:	4bac      	ldr	r3, [pc, #688]	@ (802fbc0 <_svfiprintf_r+0x6f4>)
 802f910:	6033      	str	r3, [r6, #0]
 802f912:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802f916:	f1ba 0f10 	cmp.w	sl, #16
 802f91a:	f102 0201 	add.w	r2, r2, #1
 802f91e:	f106 0008 	add.w	r0, r6, #8
 802f922:	f300 8153 	bgt.w	802fbcc <_svfiprintf_r+0x700>
 802f926:	eb0c 010a 	add.w	r1, ip, sl
 802f92a:	2a07      	cmp	r2, #7
 802f92c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f930:	f8c6 a004 	str.w	sl, [r6, #4]
 802f934:	f340 815e 	ble.w	802fbf4 <_svfiprintf_r+0x728>
 802f938:	9801      	ldr	r0, [sp, #4]
 802f93a:	aa0e      	add	r2, sp, #56	@ 0x38
 802f93c:	4659      	mov	r1, fp
 802f93e:	f7ff fd47 	bl	802f3d0 <__ssprint_r>
 802f942:	2800      	cmp	r0, #0
 802f944:	f040 81b9 	bne.w	802fcba <_svfiprintf_r+0x7ee>
 802f948:	ae11      	add	r6, sp, #68	@ 0x44
 802f94a:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802f94e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f952:	b161      	cbz	r1, 802f96e <_svfiprintf_r+0x4a2>
 802f954:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802f958:	3301      	adds	r3, #1
 802f95a:	6031      	str	r1, [r6, #0]
 802f95c:	2101      	movs	r1, #1
 802f95e:	440a      	add	r2, r1
 802f960:	2b07      	cmp	r3, #7
 802f962:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f966:	6071      	str	r1, [r6, #4]
 802f968:	f300 8146 	bgt.w	802fbf8 <_svfiprintf_r+0x72c>
 802f96c:	3608      	adds	r6, #8
 802f96e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802f970:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f974:	b159      	cbz	r1, 802f98e <_svfiprintf_r+0x4c2>
 802f976:	a90d      	add	r1, sp, #52	@ 0x34
 802f978:	3301      	adds	r3, #1
 802f97a:	6031      	str	r1, [r6, #0]
 802f97c:	2102      	movs	r1, #2
 802f97e:	440a      	add	r2, r1
 802f980:	2b07      	cmp	r3, #7
 802f982:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f986:	6071      	str	r1, [r6, #4]
 802f988:	f300 813f 	bgt.w	802fc0a <_svfiprintf_r+0x73e>
 802f98c:	3608      	adds	r6, #8
 802f98e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f990:	2b80      	cmp	r3, #128	@ 0x80
 802f992:	d123      	bne.n	802f9dc <_svfiprintf_r+0x510>
 802f994:	9b03      	ldr	r3, [sp, #12]
 802f996:	eba3 0a05 	sub.w	sl, r3, r5
 802f99a:	f1ba 0f00 	cmp.w	sl, #0
 802f99e:	dd1d      	ble.n	802f9dc <_svfiprintf_r+0x510>
 802f9a0:	4b88      	ldr	r3, [pc, #544]	@ (802fbc4 <_svfiprintf_r+0x6f8>)
 802f9a2:	6033      	str	r3, [r6, #0]
 802f9a4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802f9a8:	f1ba 0f10 	cmp.w	sl, #16
 802f9ac:	f102 0201 	add.w	r2, r2, #1
 802f9b0:	f106 0008 	add.w	r0, r6, #8
 802f9b4:	f300 8132 	bgt.w	802fc1c <_svfiprintf_r+0x750>
 802f9b8:	eb0c 010a 	add.w	r1, ip, sl
 802f9bc:	2a07      	cmp	r2, #7
 802f9be:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f9c2:	f8c6 a004 	str.w	sl, [r6, #4]
 802f9c6:	f340 813d 	ble.w	802fc44 <_svfiprintf_r+0x778>
 802f9ca:	9801      	ldr	r0, [sp, #4]
 802f9cc:	aa0e      	add	r2, sp, #56	@ 0x38
 802f9ce:	4659      	mov	r1, fp
 802f9d0:	f7ff fcfe 	bl	802f3d0 <__ssprint_r>
 802f9d4:	2800      	cmp	r0, #0
 802f9d6:	f040 8170 	bne.w	802fcba <_svfiprintf_r+0x7ee>
 802f9da:	ae11      	add	r6, sp, #68	@ 0x44
 802f9dc:	9b00      	ldr	r3, [sp, #0]
 802f9de:	1ae4      	subs	r4, r4, r3
 802f9e0:	2c00      	cmp	r4, #0
 802f9e2:	dd1a      	ble.n	802fa1a <_svfiprintf_r+0x54e>
 802f9e4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f9e8:	4876      	ldr	r0, [pc, #472]	@ (802fbc4 <_svfiprintf_r+0x6f8>)
 802f9ea:	6030      	str	r0, [r6, #0]
 802f9ec:	2c10      	cmp	r4, #16
 802f9ee:	f103 0301 	add.w	r3, r3, #1
 802f9f2:	f106 0108 	add.w	r1, r6, #8
 802f9f6:	f300 8127 	bgt.w	802fc48 <_svfiprintf_r+0x77c>
 802f9fa:	6074      	str	r4, [r6, #4]
 802f9fc:	2b07      	cmp	r3, #7
 802f9fe:	4414      	add	r4, r2
 802fa00:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802fa04:	f340 8131 	ble.w	802fc6a <_svfiprintf_r+0x79e>
 802fa08:	9801      	ldr	r0, [sp, #4]
 802fa0a:	aa0e      	add	r2, sp, #56	@ 0x38
 802fa0c:	4659      	mov	r1, fp
 802fa0e:	f7ff fcdf 	bl	802f3d0 <__ssprint_r>
 802fa12:	2800      	cmp	r0, #0
 802fa14:	f040 8151 	bne.w	802fcba <_svfiprintf_r+0x7ee>
 802fa18:	ae11      	add	r6, sp, #68	@ 0x44
 802fa1a:	9b00      	ldr	r3, [sp, #0]
 802fa1c:	9a00      	ldr	r2, [sp, #0]
 802fa1e:	6073      	str	r3, [r6, #4]
 802fa20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802fa22:	f8c6 8000 	str.w	r8, [r6]
 802fa26:	4413      	add	r3, r2
 802fa28:	9310      	str	r3, [sp, #64]	@ 0x40
 802fa2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802fa2c:	3301      	adds	r3, #1
 802fa2e:	2b07      	cmp	r3, #7
 802fa30:	930f      	str	r3, [sp, #60]	@ 0x3c
 802fa32:	f300 811c 	bgt.w	802fc6e <_svfiprintf_r+0x7a2>
 802fa36:	f106 0308 	add.w	r3, r6, #8
 802fa3a:	f019 0f04 	tst.w	r9, #4
 802fa3e:	f040 811e 	bne.w	802fc7e <_svfiprintf_r+0x7b2>
 802fa42:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 802fa46:	42aa      	cmp	r2, r5
 802fa48:	bfac      	ite	ge
 802fa4a:	189b      	addge	r3, r3, r2
 802fa4c:	195b      	addlt	r3, r3, r5
 802fa4e:	9304      	str	r3, [sp, #16]
 802fa50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802fa52:	b13b      	cbz	r3, 802fa64 <_svfiprintf_r+0x598>
 802fa54:	9801      	ldr	r0, [sp, #4]
 802fa56:	aa0e      	add	r2, sp, #56	@ 0x38
 802fa58:	4659      	mov	r1, fp
 802fa5a:	f7ff fcb9 	bl	802f3d0 <__ssprint_r>
 802fa5e:	2800      	cmp	r0, #0
 802fa60:	f040 812b 	bne.w	802fcba <_svfiprintf_r+0x7ee>
 802fa64:	2300      	movs	r3, #0
 802fa66:	930f      	str	r3, [sp, #60]	@ 0x3c
 802fa68:	463d      	mov	r5, r7
 802fa6a:	ae11      	add	r6, sp, #68	@ 0x44
 802fa6c:	e557      	b.n	802f51e <_svfiprintf_r+0x52>
 802fa6e:	4640      	mov	r0, r8
 802fa70:	f7e0 fc16 	bl	80102a0 <strlen>
 802fa74:	9000      	str	r0, [sp, #0]
 802fa76:	e732      	b.n	802f8de <_svfiprintf_r+0x412>
 802fa78:	f049 0910 	orr.w	r9, r9, #16
 802fa7c:	f019 0320 	ands.w	r3, r9, #32
 802fa80:	d008      	beq.n	802fa94 <_svfiprintf_r+0x5c8>
 802fa82:	3507      	adds	r5, #7
 802fa84:	f025 0507 	bic.w	r5, r5, #7
 802fa88:	462f      	mov	r7, r5
 802fa8a:	686d      	ldr	r5, [r5, #4]
 802fa8c:	f857 4b08 	ldr.w	r4, [r7], #8
 802fa90:	2301      	movs	r3, #1
 802fa92:	e6d7      	b.n	802f844 <_svfiprintf_r+0x378>
 802fa94:	462f      	mov	r7, r5
 802fa96:	f019 0510 	ands.w	r5, r9, #16
 802fa9a:	f857 4b04 	ldr.w	r4, [r7], #4
 802fa9e:	d001      	beq.n	802faa4 <_svfiprintf_r+0x5d8>
 802faa0:	461d      	mov	r5, r3
 802faa2:	e7f5      	b.n	802fa90 <_svfiprintf_r+0x5c4>
 802faa4:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802faa8:	d001      	beq.n	802faae <_svfiprintf_r+0x5e2>
 802faaa:	b2a4      	uxth	r4, r4
 802faac:	e7f0      	b.n	802fa90 <_svfiprintf_r+0x5c4>
 802faae:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802fab2:	d0ed      	beq.n	802fa90 <_svfiprintf_r+0x5c4>
 802fab4:	b2e4      	uxtb	r4, r4
 802fab6:	e7f3      	b.n	802faa0 <_svfiprintf_r+0x5d4>
 802fab8:	4a43      	ldr	r2, [pc, #268]	@ (802fbc8 <_svfiprintf_r+0x6fc>)
 802faba:	e5c6      	b.n	802f64a <_svfiprintf_r+0x17e>
 802fabc:	462f      	mov	r7, r5
 802fabe:	f019 0510 	ands.w	r5, r9, #16
 802fac2:	f857 4b04 	ldr.w	r4, [r7], #4
 802fac6:	d001      	beq.n	802facc <_svfiprintf_r+0x600>
 802fac8:	4615      	mov	r5, r2
 802faca:	e5ca      	b.n	802f662 <_svfiprintf_r+0x196>
 802facc:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 802fad0:	d001      	beq.n	802fad6 <_svfiprintf_r+0x60a>
 802fad2:	b2a4      	uxth	r4, r4
 802fad4:	e5c5      	b.n	802f662 <_svfiprintf_r+0x196>
 802fad6:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802fada:	f43f adc2 	beq.w	802f662 <_svfiprintf_r+0x196>
 802fade:	b2e4      	uxtb	r4, r4
 802fae0:	e7f2      	b.n	802fac8 <_svfiprintf_r+0x5fc>
 802fae2:	2c0a      	cmp	r4, #10
 802fae4:	f175 0300 	sbcs.w	r3, r5, #0
 802fae8:	d206      	bcs.n	802faf8 <_svfiprintf_r+0x62c>
 802faea:	3430      	adds	r4, #48	@ 0x30
 802faec:	b2e4      	uxtb	r4, r4
 802faee:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802faf2:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 802faf6:	e129      	b.n	802fd4c <_svfiprintf_r+0x880>
 802faf8:	ab3a      	add	r3, sp, #232	@ 0xe8
 802fafa:	9309      	str	r3, [sp, #36]	@ 0x24
 802fafc:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 802fb00:	f04f 0900 	mov.w	r9, #0
 802fb04:	930a      	str	r3, [sp, #40]	@ 0x28
 802fb06:	220a      	movs	r2, #10
 802fb08:	2300      	movs	r3, #0
 802fb0a:	4620      	mov	r0, r4
 802fb0c:	4629      	mov	r1, r5
 802fb0e:	f7e1 f923 	bl	8010d58 <__aeabi_uldivmod>
 802fb12:	460b      	mov	r3, r1
 802fb14:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802fb16:	900b      	str	r0, [sp, #44]	@ 0x2c
 802fb18:	3230      	adds	r2, #48	@ 0x30
 802fb1a:	f801 2c01 	strb.w	r2, [r1, #-1]
 802fb1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802fb20:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 802fb24:	f109 0901 	add.w	r9, r9, #1
 802fb28:	b1e2      	cbz	r2, 802fb64 <_svfiprintf_r+0x698>
 802fb2a:	9a06      	ldr	r2, [sp, #24]
 802fb2c:	7812      	ldrb	r2, [r2, #0]
 802fb2e:	454a      	cmp	r2, r9
 802fb30:	d118      	bne.n	802fb64 <_svfiprintf_r+0x698>
 802fb32:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802fb36:	d015      	beq.n	802fb64 <_svfiprintf_r+0x698>
 802fb38:	2c0a      	cmp	r4, #10
 802fb3a:	f175 0200 	sbcs.w	r2, r5, #0
 802fb3e:	d311      	bcc.n	802fb64 <_svfiprintf_r+0x698>
 802fb40:	9309      	str	r3, [sp, #36]	@ 0x24
 802fb42:	9b07      	ldr	r3, [sp, #28]
 802fb44:	9908      	ldr	r1, [sp, #32]
 802fb46:	eba8 0803 	sub.w	r8, r8, r3
 802fb4a:	461a      	mov	r2, r3
 802fb4c:	4640      	mov	r0, r8
 802fb4e:	f7fc ff86 	bl	802ca5e <strncpy>
 802fb52:	9b06      	ldr	r3, [sp, #24]
 802fb54:	785a      	ldrb	r2, [r3, #1]
 802fb56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802fb58:	b172      	cbz	r2, 802fb78 <_svfiprintf_r+0x6ac>
 802fb5a:	9a06      	ldr	r2, [sp, #24]
 802fb5c:	3201      	adds	r2, #1
 802fb5e:	9206      	str	r2, [sp, #24]
 802fb60:	f04f 0900 	mov.w	r9, #0
 802fb64:	2c0a      	cmp	r4, #10
 802fb66:	f175 0500 	sbcs.w	r5, r5, #0
 802fb6a:	f0c0 80ef 	bcc.w	802fd4c <_svfiprintf_r+0x880>
 802fb6e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802fb70:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802fb74:	461d      	mov	r5, r3
 802fb76:	e7c6      	b.n	802fb06 <_svfiprintf_r+0x63a>
 802fb78:	4691      	mov	r9, r2
 802fb7a:	e7f3      	b.n	802fb64 <_svfiprintf_r+0x698>
 802fb7c:	f004 030f 	and.w	r3, r4, #15
 802fb80:	9a05      	ldr	r2, [sp, #20]
 802fb82:	0924      	lsrs	r4, r4, #4
 802fb84:	5cd3      	ldrb	r3, [r2, r3]
 802fb86:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802fb8a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802fb8e:	092d      	lsrs	r5, r5, #4
 802fb90:	ea54 0305 	orrs.w	r3, r4, r5
 802fb94:	d1f2      	bne.n	802fb7c <_svfiprintf_r+0x6b0>
 802fb96:	e0d9      	b.n	802fd4c <_svfiprintf_r+0x880>
 802fb98:	b923      	cbnz	r3, 802fba4 <_svfiprintf_r+0x6d8>
 802fb9a:	f019 0f01 	tst.w	r9, #1
 802fb9e:	d001      	beq.n	802fba4 <_svfiprintf_r+0x6d8>
 802fba0:	2430      	movs	r4, #48	@ 0x30
 802fba2:	e7a4      	b.n	802faee <_svfiprintf_r+0x622>
 802fba4:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802fba8:	e0d0      	b.n	802fd4c <_svfiprintf_r+0x880>
 802fbaa:	2b00      	cmp	r3, #0
 802fbac:	f000 80a1 	beq.w	802fcf2 <_svfiprintf_r+0x826>
 802fbb0:	2400      	movs	r4, #0
 802fbb2:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802fbb6:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802fbba:	462f      	mov	r7, r5
 802fbbc:	e5e0      	b.n	802f780 <_svfiprintf_r+0x2b4>
 802fbbe:	bf00      	nop
 802fbc0:	0803c203 	.word	0x0803c203
 802fbc4:	0803c1f3 	.word	0x0803c1f3
 802fbc8:	0803bce0 	.word	0x0803bce0
 802fbcc:	2110      	movs	r1, #16
 802fbce:	6071      	str	r1, [r6, #4]
 802fbd0:	2a07      	cmp	r2, #7
 802fbd2:	4461      	add	r1, ip
 802fbd4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fbd8:	dd08      	ble.n	802fbec <_svfiprintf_r+0x720>
 802fbda:	9801      	ldr	r0, [sp, #4]
 802fbdc:	aa0e      	add	r2, sp, #56	@ 0x38
 802fbde:	4659      	mov	r1, fp
 802fbe0:	f7ff fbf6 	bl	802f3d0 <__ssprint_r>
 802fbe4:	2800      	cmp	r0, #0
 802fbe6:	d168      	bne.n	802fcba <_svfiprintf_r+0x7ee>
 802fbe8:	4b5c      	ldr	r3, [pc, #368]	@ (802fd5c <_svfiprintf_r+0x890>)
 802fbea:	a811      	add	r0, sp, #68	@ 0x44
 802fbec:	f1aa 0a10 	sub.w	sl, sl, #16
 802fbf0:	4606      	mov	r6, r0
 802fbf2:	e68d      	b.n	802f910 <_svfiprintf_r+0x444>
 802fbf4:	4606      	mov	r6, r0
 802fbf6:	e6a8      	b.n	802f94a <_svfiprintf_r+0x47e>
 802fbf8:	9801      	ldr	r0, [sp, #4]
 802fbfa:	aa0e      	add	r2, sp, #56	@ 0x38
 802fbfc:	4659      	mov	r1, fp
 802fbfe:	f7ff fbe7 	bl	802f3d0 <__ssprint_r>
 802fc02:	2800      	cmp	r0, #0
 802fc04:	d159      	bne.n	802fcba <_svfiprintf_r+0x7ee>
 802fc06:	ae11      	add	r6, sp, #68	@ 0x44
 802fc08:	e6b1      	b.n	802f96e <_svfiprintf_r+0x4a2>
 802fc0a:	9801      	ldr	r0, [sp, #4]
 802fc0c:	aa0e      	add	r2, sp, #56	@ 0x38
 802fc0e:	4659      	mov	r1, fp
 802fc10:	f7ff fbde 	bl	802f3d0 <__ssprint_r>
 802fc14:	2800      	cmp	r0, #0
 802fc16:	d150      	bne.n	802fcba <_svfiprintf_r+0x7ee>
 802fc18:	ae11      	add	r6, sp, #68	@ 0x44
 802fc1a:	e6b8      	b.n	802f98e <_svfiprintf_r+0x4c2>
 802fc1c:	2110      	movs	r1, #16
 802fc1e:	6071      	str	r1, [r6, #4]
 802fc20:	2a07      	cmp	r2, #7
 802fc22:	4461      	add	r1, ip
 802fc24:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fc28:	dd08      	ble.n	802fc3c <_svfiprintf_r+0x770>
 802fc2a:	9801      	ldr	r0, [sp, #4]
 802fc2c:	aa0e      	add	r2, sp, #56	@ 0x38
 802fc2e:	4659      	mov	r1, fp
 802fc30:	f7ff fbce 	bl	802f3d0 <__ssprint_r>
 802fc34:	2800      	cmp	r0, #0
 802fc36:	d140      	bne.n	802fcba <_svfiprintf_r+0x7ee>
 802fc38:	4b49      	ldr	r3, [pc, #292]	@ (802fd60 <_svfiprintf_r+0x894>)
 802fc3a:	a811      	add	r0, sp, #68	@ 0x44
 802fc3c:	f1aa 0a10 	sub.w	sl, sl, #16
 802fc40:	4606      	mov	r6, r0
 802fc42:	e6ae      	b.n	802f9a2 <_svfiprintf_r+0x4d6>
 802fc44:	4606      	mov	r6, r0
 802fc46:	e6c9      	b.n	802f9dc <_svfiprintf_r+0x510>
 802fc48:	2010      	movs	r0, #16
 802fc4a:	4402      	add	r2, r0
 802fc4c:	2b07      	cmp	r3, #7
 802fc4e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802fc52:	6070      	str	r0, [r6, #4]
 802fc54:	dd06      	ble.n	802fc64 <_svfiprintf_r+0x798>
 802fc56:	9801      	ldr	r0, [sp, #4]
 802fc58:	aa0e      	add	r2, sp, #56	@ 0x38
 802fc5a:	4659      	mov	r1, fp
 802fc5c:	f7ff fbb8 	bl	802f3d0 <__ssprint_r>
 802fc60:	bb58      	cbnz	r0, 802fcba <_svfiprintf_r+0x7ee>
 802fc62:	a911      	add	r1, sp, #68	@ 0x44
 802fc64:	3c10      	subs	r4, #16
 802fc66:	460e      	mov	r6, r1
 802fc68:	e6bc      	b.n	802f9e4 <_svfiprintf_r+0x518>
 802fc6a:	460e      	mov	r6, r1
 802fc6c:	e6d5      	b.n	802fa1a <_svfiprintf_r+0x54e>
 802fc6e:	9801      	ldr	r0, [sp, #4]
 802fc70:	aa0e      	add	r2, sp, #56	@ 0x38
 802fc72:	4659      	mov	r1, fp
 802fc74:	f7ff fbac 	bl	802f3d0 <__ssprint_r>
 802fc78:	b9f8      	cbnz	r0, 802fcba <_svfiprintf_r+0x7ee>
 802fc7a:	ab11      	add	r3, sp, #68	@ 0x44
 802fc7c:	e6dd      	b.n	802fa3a <_svfiprintf_r+0x56e>
 802fc7e:	9a03      	ldr	r2, [sp, #12]
 802fc80:	1b54      	subs	r4, r2, r5
 802fc82:	2c00      	cmp	r4, #0
 802fc84:	f77f aedd 	ble.w	802fa42 <_svfiprintf_r+0x576>
 802fc88:	4e34      	ldr	r6, [pc, #208]	@ (802fd5c <_svfiprintf_r+0x890>)
 802fc8a:	f04f 0810 	mov.w	r8, #16
 802fc8e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802fc92:	2c10      	cmp	r4, #16
 802fc94:	f102 0201 	add.w	r2, r2, #1
 802fc98:	601e      	str	r6, [r3, #0]
 802fc9a:	dc17      	bgt.n	802fccc <_svfiprintf_r+0x800>
 802fc9c:	605c      	str	r4, [r3, #4]
 802fc9e:	2a07      	cmp	r2, #7
 802fca0:	440c      	add	r4, r1
 802fca2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802fca6:	f77f aecc 	ble.w	802fa42 <_svfiprintf_r+0x576>
 802fcaa:	9801      	ldr	r0, [sp, #4]
 802fcac:	aa0e      	add	r2, sp, #56	@ 0x38
 802fcae:	4659      	mov	r1, fp
 802fcb0:	f7ff fb8e 	bl	802f3d0 <__ssprint_r>
 802fcb4:	2800      	cmp	r0, #0
 802fcb6:	f43f aec4 	beq.w	802fa42 <_svfiprintf_r+0x576>
 802fcba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802fcbe:	065b      	lsls	r3, r3, #25
 802fcc0:	f53f ac1c 	bmi.w	802f4fc <_svfiprintf_r+0x30>
 802fcc4:	9804      	ldr	r0, [sp, #16]
 802fcc6:	b03b      	add	sp, #236	@ 0xec
 802fcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fccc:	3110      	adds	r1, #16
 802fcce:	2a07      	cmp	r2, #7
 802fcd0:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fcd4:	f8c3 8004 	str.w	r8, [r3, #4]
 802fcd8:	dc02      	bgt.n	802fce0 <_svfiprintf_r+0x814>
 802fcda:	3308      	adds	r3, #8
 802fcdc:	3c10      	subs	r4, #16
 802fcde:	e7d6      	b.n	802fc8e <_svfiprintf_r+0x7c2>
 802fce0:	9801      	ldr	r0, [sp, #4]
 802fce2:	aa0e      	add	r2, sp, #56	@ 0x38
 802fce4:	4659      	mov	r1, fp
 802fce6:	f7ff fb73 	bl	802f3d0 <__ssprint_r>
 802fcea:	2800      	cmp	r0, #0
 802fcec:	d1e5      	bne.n	802fcba <_svfiprintf_r+0x7ee>
 802fcee:	ab11      	add	r3, sp, #68	@ 0x44
 802fcf0:	e7f4      	b.n	802fcdc <_svfiprintf_r+0x810>
 802fcf2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802fcf4:	2b00      	cmp	r3, #0
 802fcf6:	d0e0      	beq.n	802fcba <_svfiprintf_r+0x7ee>
 802fcf8:	9801      	ldr	r0, [sp, #4]
 802fcfa:	aa0e      	add	r2, sp, #56	@ 0x38
 802fcfc:	4659      	mov	r1, fp
 802fcfe:	f7ff fb67 	bl	802f3d0 <__ssprint_r>
 802fd02:	e7da      	b.n	802fcba <_svfiprintf_r+0x7ee>
 802fd04:	ea54 0205 	orrs.w	r2, r4, r5
 802fd08:	46ca      	mov	sl, r9
 802fd0a:	f43f adac 	beq.w	802f866 <_svfiprintf_r+0x39a>
 802fd0e:	2b01      	cmp	r3, #1
 802fd10:	f43f aee7 	beq.w	802fae2 <_svfiprintf_r+0x616>
 802fd14:	2b02      	cmp	r3, #2
 802fd16:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802fd1a:	f43f af2f 	beq.w	802fb7c <_svfiprintf_r+0x6b0>
 802fd1e:	f004 0307 	and.w	r3, r4, #7
 802fd22:	08e4      	lsrs	r4, r4, #3
 802fd24:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802fd28:	08ed      	lsrs	r5, r5, #3
 802fd2a:	3330      	adds	r3, #48	@ 0x30
 802fd2c:	ea54 0105 	orrs.w	r1, r4, r5
 802fd30:	4642      	mov	r2, r8
 802fd32:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802fd36:	d1f2      	bne.n	802fd1e <_svfiprintf_r+0x852>
 802fd38:	f01a 0f01 	tst.w	sl, #1
 802fd3c:	d006      	beq.n	802fd4c <_svfiprintf_r+0x880>
 802fd3e:	2b30      	cmp	r3, #48	@ 0x30
 802fd40:	d004      	beq.n	802fd4c <_svfiprintf_r+0x880>
 802fd42:	2330      	movs	r3, #48	@ 0x30
 802fd44:	f808 3c01 	strb.w	r3, [r8, #-1]
 802fd48:	f1a2 0802 	sub.w	r8, r2, #2
 802fd4c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802fd4e:	eba3 0308 	sub.w	r3, r3, r8
 802fd52:	9c00      	ldr	r4, [sp, #0]
 802fd54:	9300      	str	r3, [sp, #0]
 802fd56:	46d1      	mov	r9, sl
 802fd58:	e5c2      	b.n	802f8e0 <_svfiprintf_r+0x414>
 802fd5a:	bf00      	nop
 802fd5c:	0803c203 	.word	0x0803c203
 802fd60:	0803c1f3 	.word	0x0803c1f3

0802fd64 <_sungetc_r>:
 802fd64:	b538      	push	{r3, r4, r5, lr}
 802fd66:	1c4b      	adds	r3, r1, #1
 802fd68:	4614      	mov	r4, r2
 802fd6a:	d103      	bne.n	802fd74 <_sungetc_r+0x10>
 802fd6c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802fd70:	4628      	mov	r0, r5
 802fd72:	bd38      	pop	{r3, r4, r5, pc}
 802fd74:	8993      	ldrh	r3, [r2, #12]
 802fd76:	f023 0320 	bic.w	r3, r3, #32
 802fd7a:	8193      	strh	r3, [r2, #12]
 802fd7c:	6853      	ldr	r3, [r2, #4]
 802fd7e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 802fd80:	b2cd      	uxtb	r5, r1
 802fd82:	b18a      	cbz	r2, 802fda8 <_sungetc_r+0x44>
 802fd84:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802fd86:	429a      	cmp	r2, r3
 802fd88:	dd08      	ble.n	802fd9c <_sungetc_r+0x38>
 802fd8a:	6823      	ldr	r3, [r4, #0]
 802fd8c:	1e5a      	subs	r2, r3, #1
 802fd8e:	6022      	str	r2, [r4, #0]
 802fd90:	f803 5c01 	strb.w	r5, [r3, #-1]
 802fd94:	6863      	ldr	r3, [r4, #4]
 802fd96:	3301      	adds	r3, #1
 802fd98:	6063      	str	r3, [r4, #4]
 802fd9a:	e7e9      	b.n	802fd70 <_sungetc_r+0xc>
 802fd9c:	4621      	mov	r1, r4
 802fd9e:	f005 f8a7 	bl	8034ef0 <__submore>
 802fda2:	2800      	cmp	r0, #0
 802fda4:	d0f1      	beq.n	802fd8a <_sungetc_r+0x26>
 802fda6:	e7e1      	b.n	802fd6c <_sungetc_r+0x8>
 802fda8:	6921      	ldr	r1, [r4, #16]
 802fdaa:	6822      	ldr	r2, [r4, #0]
 802fdac:	b141      	cbz	r1, 802fdc0 <_sungetc_r+0x5c>
 802fdae:	4291      	cmp	r1, r2
 802fdb0:	d206      	bcs.n	802fdc0 <_sungetc_r+0x5c>
 802fdb2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 802fdb6:	42a9      	cmp	r1, r5
 802fdb8:	d102      	bne.n	802fdc0 <_sungetc_r+0x5c>
 802fdba:	3a01      	subs	r2, #1
 802fdbc:	6022      	str	r2, [r4, #0]
 802fdbe:	e7ea      	b.n	802fd96 <_sungetc_r+0x32>
 802fdc0:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 802fdc4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802fdc8:	6323      	str	r3, [r4, #48]	@ 0x30
 802fdca:	2303      	movs	r3, #3
 802fdcc:	6363      	str	r3, [r4, #52]	@ 0x34
 802fdce:	4623      	mov	r3, r4
 802fdd0:	f803 5f42 	strb.w	r5, [r3, #66]!
 802fdd4:	6023      	str	r3, [r4, #0]
 802fdd6:	2301      	movs	r3, #1
 802fdd8:	e7de      	b.n	802fd98 <_sungetc_r+0x34>

0802fdda <__ssrefill_r>:
 802fdda:	b510      	push	{r4, lr}
 802fddc:	460c      	mov	r4, r1
 802fdde:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 802fde0:	b169      	cbz	r1, 802fdfe <__ssrefill_r+0x24>
 802fde2:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802fde6:	4299      	cmp	r1, r3
 802fde8:	d001      	beq.n	802fdee <__ssrefill_r+0x14>
 802fdea:	f7fe ff2f 	bl	802ec4c <_free_r>
 802fdee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802fdf0:	6063      	str	r3, [r4, #4]
 802fdf2:	2000      	movs	r0, #0
 802fdf4:	6320      	str	r0, [r4, #48]	@ 0x30
 802fdf6:	b113      	cbz	r3, 802fdfe <__ssrefill_r+0x24>
 802fdf8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802fdfa:	6023      	str	r3, [r4, #0]
 802fdfc:	bd10      	pop	{r4, pc}
 802fdfe:	6923      	ldr	r3, [r4, #16]
 802fe00:	6023      	str	r3, [r4, #0]
 802fe02:	2300      	movs	r3, #0
 802fe04:	6063      	str	r3, [r4, #4]
 802fe06:	89a3      	ldrh	r3, [r4, #12]
 802fe08:	f043 0320 	orr.w	r3, r3, #32
 802fe0c:	81a3      	strh	r3, [r4, #12]
 802fe0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802fe12:	e7f3      	b.n	802fdfc <__ssrefill_r+0x22>

0802fe14 <_sfread_r>:
 802fe14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fe18:	461f      	mov	r7, r3
 802fe1a:	4613      	mov	r3, r2
 802fe1c:	437b      	muls	r3, r7
 802fe1e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802fe20:	9000      	str	r0, [sp, #0]
 802fe22:	4688      	mov	r8, r1
 802fe24:	4691      	mov	r9, r2
 802fe26:	d028      	beq.n	802fe7a <_sfread_r+0x66>
 802fe28:	461e      	mov	r6, r3
 802fe2a:	f04f 0b00 	mov.w	fp, #0
 802fe2e:	e9d4 1500 	ldrd	r1, r5, [r4]
 802fe32:	42b5      	cmp	r5, r6
 802fe34:	d30b      	bcc.n	802fe4e <_sfread_r+0x3a>
 802fe36:	4632      	mov	r2, r6
 802fe38:	4640      	mov	r0, r8
 802fe3a:	f7fe f805 	bl	802de48 <memcpy>
 802fe3e:	6862      	ldr	r2, [r4, #4]
 802fe40:	6821      	ldr	r1, [r4, #0]
 802fe42:	1b92      	subs	r2, r2, r6
 802fe44:	4431      	add	r1, r6
 802fe46:	6062      	str	r2, [r4, #4]
 802fe48:	6021      	str	r1, [r4, #0]
 802fe4a:	463b      	mov	r3, r7
 802fe4c:	e015      	b.n	802fe7a <_sfread_r+0x66>
 802fe4e:	462a      	mov	r2, r5
 802fe50:	4640      	mov	r0, r8
 802fe52:	9301      	str	r3, [sp, #4]
 802fe54:	f7fd fff8 	bl	802de48 <memcpy>
 802fe58:	6822      	ldr	r2, [r4, #0]
 802fe5a:	9800      	ldr	r0, [sp, #0]
 802fe5c:	442a      	add	r2, r5
 802fe5e:	e9c4 2b00 	strd	r2, fp, [r4]
 802fe62:	4621      	mov	r1, r4
 802fe64:	f7ff ffb9 	bl	802fdda <__ssrefill_r>
 802fe68:	44a8      	add	r8, r5
 802fe6a:	9b01      	ldr	r3, [sp, #4]
 802fe6c:	eba6 0a05 	sub.w	sl, r6, r5
 802fe70:	b138      	cbz	r0, 802fe82 <_sfread_r+0x6e>
 802fe72:	441d      	add	r5, r3
 802fe74:	1bad      	subs	r5, r5, r6
 802fe76:	fbb5 f3f9 	udiv	r3, r5, r9
 802fe7a:	4618      	mov	r0, r3
 802fe7c:	b003      	add	sp, #12
 802fe7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fe82:	4656      	mov	r6, sl
 802fe84:	e7d3      	b.n	802fe2e <_sfread_r+0x1a>
	...

0802fe88 <__ssvfiscanf_r>:
 802fe88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fe8c:	b0df      	sub	sp, #380	@ 0x17c
 802fe8e:	af02      	add	r7, sp, #8
 802fe90:	460c      	mov	r4, r1
 802fe92:	623b      	str	r3, [r7, #32]
 802fe94:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802fe98:	6278      	str	r0, [r7, #36]	@ 0x24
 802fe9a:	049d      	lsls	r5, r3, #18
 802fe9c:	60ba      	str	r2, [r7, #8]
 802fe9e:	d406      	bmi.n	802feae <__ssvfiscanf_r+0x26>
 802fea0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802fea4:	818b      	strh	r3, [r1, #12]
 802fea6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802fea8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802feac:	664b      	str	r3, [r1, #100]	@ 0x64
 802feae:	2300      	movs	r3, #0
 802feb0:	e9c7 3305 	strd	r3, r3, [r7, #20]
 802feb4:	60fb      	str	r3, [r7, #12]
 802feb6:	469b      	mov	fp, r3
 802feb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802feba:	61fb      	str	r3, [r7, #28]
 802febc:	e005      	b.n	802feca <__ssvfiscanf_r+0x42>
 802febe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fec0:	4621      	mov	r1, r4
 802fec2:	f7ff ff8a 	bl	802fdda <__ssrefill_r>
 802fec6:	b168      	cbz	r0, 802fee4 <__ssvfiscanf_r+0x5c>
 802fec8:	60bd      	str	r5, [r7, #8]
 802feca:	68bd      	ldr	r5, [r7, #8]
 802fecc:	f815 3b01 	ldrb.w	r3, [r5], #1
 802fed0:	637b      	str	r3, [r7, #52]	@ 0x34
 802fed2:	b333      	cbz	r3, 802ff22 <__ssvfiscanf_r+0x9a>
 802fed4:	4a75      	ldr	r2, [pc, #468]	@ (80300ac <__ssvfiscanf_r+0x224>)
 802fed6:	5cd6      	ldrb	r6, [r2, r3]
 802fed8:	f016 0608 	ands.w	r6, r6, #8
 802fedc:	d011      	beq.n	802ff02 <__ssvfiscanf_r+0x7a>
 802fede:	6863      	ldr	r3, [r4, #4]
 802fee0:	2b00      	cmp	r3, #0
 802fee2:	ddec      	ble.n	802febe <__ssvfiscanf_r+0x36>
 802fee4:	6823      	ldr	r3, [r4, #0]
 802fee6:	4971      	ldr	r1, [pc, #452]	@ (80300ac <__ssvfiscanf_r+0x224>)
 802fee8:	781a      	ldrb	r2, [r3, #0]
 802feea:	5c8a      	ldrb	r2, [r1, r2]
 802feec:	0710      	lsls	r0, r2, #28
 802feee:	d5eb      	bpl.n	802fec8 <__ssvfiscanf_r+0x40>
 802fef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fef2:	3201      	adds	r2, #1
 802fef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802fef6:	6862      	ldr	r2, [r4, #4]
 802fef8:	3301      	adds	r3, #1
 802fefa:	3a01      	subs	r2, #1
 802fefc:	6062      	str	r2, [r4, #4]
 802fefe:	6023      	str	r3, [r4, #0]
 802ff00:	e7ed      	b.n	802fede <__ssvfiscanf_r+0x56>
 802ff02:	2b25      	cmp	r3, #37	@ 0x25
 802ff04:	d15f      	bne.n	802ffc6 <__ssvfiscanf_r+0x13e>
 802ff06:	62be      	str	r6, [r7, #40]	@ 0x28
 802ff08:	462a      	mov	r2, r5
 802ff0a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ff0e:	60ba      	str	r2, [r7, #8]
 802ff10:	2b7a      	cmp	r3, #122	@ 0x7a
 802ff12:	d806      	bhi.n	802ff22 <__ssvfiscanf_r+0x9a>
 802ff14:	2b42      	cmp	r3, #66	@ 0x42
 802ff16:	d809      	bhi.n	802ff2c <__ssvfiscanf_r+0xa4>
 802ff18:	2b2a      	cmp	r3, #42	@ 0x2a
 802ff1a:	d079      	beq.n	8030010 <__ssvfiscanf_r+0x188>
 802ff1c:	d844      	bhi.n	802ffa8 <__ssvfiscanf_r+0x120>
 802ff1e:	2b25      	cmp	r3, #37	@ 0x25
 802ff20:	d050      	beq.n	802ffc4 <__ssvfiscanf_r+0x13c>
 802ff22:	f1bb 0f00 	cmp.w	fp, #0
 802ff26:	f000 810e 	beq.w	8030146 <__ssvfiscanf_r+0x2be>
 802ff2a:	e107      	b.n	803013c <__ssvfiscanf_r+0x2b4>
 802ff2c:	3b43      	subs	r3, #67	@ 0x43
 802ff2e:	2b37      	cmp	r3, #55	@ 0x37
 802ff30:	f200 80fd 	bhi.w	803012e <__ssvfiscanf_r+0x2a6>
 802ff34:	e8df f013 	tbh	[pc, r3, lsl #1]
 802ff38:	00a40117 	.word	0x00a40117
 802ff3c:	00fb00fb 	.word	0x00fb00fb
 802ff40:	00fb00fb 	.word	0x00fb00fb
 802ff44:	00fb00fb 	.word	0x00fb00fb
 802ff48:	008e00fb 	.word	0x008e00fb
 802ff4c:	00fb00fb 	.word	0x00fb00fb
 802ff50:	00fb00a8 	.word	0x00fb00a8
 802ff54:	00fb00fb 	.word	0x00fb00fb
 802ff58:	00fb00c0 	.word	0x00fb00c0
 802ff5c:	00fb00fb 	.word	0x00fb00fb
 802ff60:	00b400fb 	.word	0x00b400fb
 802ff64:	00fb00fb 	.word	0x00fb00fb
 802ff68:	00fb010d 	.word	0x00fb010d
 802ff6c:	00fb00fb 	.word	0x00fb00fb
 802ff70:	00fb00fb 	.word	0x00fb00fb
 802ff74:	00fb00fb 	.word	0x00fb00fb
 802ff78:	00a60119 	.word	0x00a60119
 802ff7c:	00fb00fb 	.word	0x00fb00fb
 802ff80:	008100fb 	.word	0x008100fb
 802ff84:	008e013e 	.word	0x008e013e
 802ff88:	007300fb 	.word	0x007300fb
 802ff8c:	01200095 	.word	0x01200095
 802ff90:	011d00aa 	.word	0x011d00aa
 802ff94:	00fb00fb 	.word	0x00fb00fb
 802ff98:	009200c2 	.word	0x009200c2
 802ff9c:	00fb00b0 	.word	0x00fb00b0
 802ffa0:	00b400fb 	.word	0x00b400fb
 802ffa4:	009200fb 	.word	0x009200fb
 802ffa8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802ffac:	2a09      	cmp	r2, #9
 802ffae:	d8b8      	bhi.n	802ff22 <__ssvfiscanf_r+0x9a>
 802ffb0:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802ffb4:	d1b5      	bne.n	802ff22 <__ssvfiscanf_r+0x9a>
 802ffb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802ffb8:	220a      	movs	r2, #10
 802ffba:	fb02 3301 	mla	r3, r2, r1, r3
 802ffbe:	3b30      	subs	r3, #48	@ 0x30
 802ffc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 802ffc2:	e02a      	b.n	803001a <__ssvfiscanf_r+0x192>
 802ffc4:	68bd      	ldr	r5, [r7, #8]
 802ffc6:	6863      	ldr	r3, [r4, #4]
 802ffc8:	2b00      	cmp	r3, #0
 802ffca:	dd0e      	ble.n	802ffea <__ssvfiscanf_r+0x162>
 802ffcc:	6823      	ldr	r3, [r4, #0]
 802ffce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802ffd2:	7819      	ldrb	r1, [r3, #0]
 802ffd4:	4291      	cmp	r1, r2
 802ffd6:	d1a4      	bne.n	802ff22 <__ssvfiscanf_r+0x9a>
 802ffd8:	3301      	adds	r3, #1
 802ffda:	6862      	ldr	r2, [r4, #4]
 802ffdc:	6023      	str	r3, [r4, #0]
 802ffde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802ffe0:	3a01      	subs	r2, #1
 802ffe2:	3301      	adds	r3, #1
 802ffe4:	6062      	str	r2, [r4, #4]
 802ffe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802ffe8:	e76e      	b.n	802fec8 <__ssvfiscanf_r+0x40>
 802ffea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802ffec:	4621      	mov	r1, r4
 802ffee:	f7ff fef4 	bl	802fdda <__ssrefill_r>
 802fff2:	2800      	cmp	r0, #0
 802fff4:	d0ea      	beq.n	802ffcc <__ssvfiscanf_r+0x144>
 802fff6:	69fb      	ldr	r3, [r7, #28]
 802fff8:	b113      	cbz	r3, 8030000 <__ssvfiscanf_r+0x178>
 802fffa:	89a3      	ldrh	r3, [r4, #12]
 802fffc:	065b      	lsls	r3, r3, #25
 802fffe:	d590      	bpl.n	802ff22 <__ssvfiscanf_r+0x9a>
 8030000:	f1bb 0f00 	cmp.w	fp, #0
 8030004:	f040 8654 	bne.w	8030cb0 <__ssvfiscanf_r+0xe28>
 8030008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803000c:	61fb      	str	r3, [r7, #28]
 803000e:	e09a      	b.n	8030146 <__ssvfiscanf_r+0x2be>
 8030010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030012:	4333      	orrs	r3, r6
 8030014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030016:	d184      	bne.n	802ff22 <__ssvfiscanf_r+0x9a>
 8030018:	2610      	movs	r6, #16
 803001a:	68bd      	ldr	r5, [r7, #8]
 803001c:	e774      	b.n	802ff08 <__ssvfiscanf_r+0x80>
 803001e:	0731      	lsls	r1, r6, #28
 8030020:	f47f af7f 	bne.w	802ff22 <__ssvfiscanf_r+0x9a>
 8030024:	786b      	ldrb	r3, [r5, #1]
 8030026:	2b6c      	cmp	r3, #108	@ 0x6c
 8030028:	d104      	bne.n	8030034 <__ssvfiscanf_r+0x1ac>
 803002a:	1cab      	adds	r3, r5, #2
 803002c:	60bb      	str	r3, [r7, #8]
 803002e:	f046 0602 	orr.w	r6, r6, #2
 8030032:	e7f2      	b.n	803001a <__ssvfiscanf_r+0x192>
 8030034:	f046 0601 	orr.w	r6, r6, #1
 8030038:	e7ef      	b.n	803001a <__ssvfiscanf_r+0x192>
 803003a:	0732      	lsls	r2, r6, #28
 803003c:	f47f af71 	bne.w	802ff22 <__ssvfiscanf_r+0x9a>
 8030040:	786b      	ldrb	r3, [r5, #1]
 8030042:	2b68      	cmp	r3, #104	@ 0x68
 8030044:	bf03      	ittte	eq
 8030046:	1cab      	addeq	r3, r5, #2
 8030048:	60bb      	streq	r3, [r7, #8]
 803004a:	f046 0608 	orreq.w	r6, r6, #8
 803004e:	f046 0604 	orrne.w	r6, r6, #4
 8030052:	e7e2      	b.n	803001a <__ssvfiscanf_r+0x192>
 8030054:	0733      	lsls	r3, r6, #28
 8030056:	f47f af64 	bne.w	802ff22 <__ssvfiscanf_r+0x9a>
 803005a:	e7e8      	b.n	803002e <__ssvfiscanf_r+0x1a6>
 803005c:	0735      	lsls	r5, r6, #28
 803005e:	d0dc      	beq.n	803001a <__ssvfiscanf_r+0x192>
 8030060:	e75f      	b.n	802ff22 <__ssvfiscanf_r+0x9a>
 8030062:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8030066:	f47f af5c 	bne.w	802ff22 <__ssvfiscanf_r+0x9a>
 803006a:	f1bb 0f00 	cmp.w	fp, #0
 803006e:	d104      	bne.n	803007a <__ssvfiscanf_r+0x1f2>
 8030070:	b082      	sub	sp, #8
 8030072:	f10d 0b08 	add.w	fp, sp, #8
 8030076:	e9cb 3300 	strd	r3, r3, [fp]
 803007a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 803007e:	e7cc      	b.n	803001a <__ssvfiscanf_r+0x192>
 8030080:	f046 0601 	orr.w	r6, r6, #1
 8030084:	4b0a      	ldr	r3, [pc, #40]	@ (80300b0 <__ssvfiscanf_r+0x228>)
 8030086:	e008      	b.n	803009a <__ssvfiscanf_r+0x212>
 8030088:	f046 0601 	orr.w	r6, r6, #1
 803008c:	4b09      	ldr	r3, [pc, #36]	@ (80300b4 <__ssvfiscanf_r+0x22c>)
 803008e:	60fb      	str	r3, [r7, #12]
 8030090:	2308      	movs	r3, #8
 8030092:	617b      	str	r3, [r7, #20]
 8030094:	2503      	movs	r5, #3
 8030096:	e012      	b.n	80300be <__ssvfiscanf_r+0x236>
 8030098:	4b06      	ldr	r3, [pc, #24]	@ (80300b4 <__ssvfiscanf_r+0x22c>)
 803009a:	60fb      	str	r3, [r7, #12]
 803009c:	230a      	movs	r3, #10
 803009e:	e7f8      	b.n	8030092 <__ssvfiscanf_r+0x20a>
 80300a0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 80300a4:	4b03      	ldr	r3, [pc, #12]	@ (80300b4 <__ssvfiscanf_r+0x22c>)
 80300a6:	60fb      	str	r3, [r7, #12]
 80300a8:	2310      	movs	r3, #16
 80300aa:	e7f2      	b.n	8030092 <__ssvfiscanf_r+0x20a>
 80300ac:	0803c07d 	.word	0x0803c07d
 80300b0:	0802c0d9 	.word	0x0802c0d9
 80300b4:	08034ed9 	.word	0x08034ed9
 80300b8:	f046 0601 	orr.w	r6, r6, #1
 80300bc:	2502      	movs	r5, #2
 80300be:	6863      	ldr	r3, [r4, #4]
 80300c0:	2b00      	cmp	r3, #0
 80300c2:	dd7b      	ble.n	80301bc <__ssvfiscanf_r+0x334>
 80300c4:	0671      	lsls	r1, r6, #25
 80300c6:	d407      	bmi.n	80300d8 <__ssvfiscanf_r+0x250>
 80300c8:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 8030454 <__ssvfiscanf_r+0x5cc>
 80300cc:	6823      	ldr	r3, [r4, #0]
 80300ce:	781a      	ldrb	r2, [r3, #0]
 80300d0:	f818 2002 	ldrb.w	r2, [r8, r2]
 80300d4:	0712      	lsls	r2, r2, #28
 80300d6:	d479      	bmi.n	80301cc <__ssvfiscanf_r+0x344>
 80300d8:	2d02      	cmp	r5, #2
 80300da:	f000 836f 	beq.w	80307bc <__ssvfiscanf_r+0x934>
 80300de:	2d03      	cmp	r5, #3
 80300e0:	f000 84f6 	beq.w	8030ad0 <__ssvfiscanf_r+0xc48>
 80300e4:	f006 0310 	and.w	r3, r6, #16
 80300e8:	2d01      	cmp	r5, #1
 80300ea:	613b      	str	r3, [r7, #16]
 80300ec:	f006 0501 	and.w	r5, r6, #1
 80300f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80300f2:	f000 81b1 	beq.w	8030458 <__ssvfiscanf_r+0x5d0>
 80300f6:	2b01      	cmp	r3, #1
 80300f8:	bf38      	it	cc
 80300fa:	2301      	movcc	r3, #1
 80300fc:	4698      	mov	r8, r3
 80300fe:	693b      	ldr	r3, [r7, #16]
 8030100:	2d00      	cmp	r5, #0
 8030102:	f000 813b 	beq.w	803037c <__ssvfiscanf_r+0x4f4>
 8030106:	2b00      	cmp	r3, #0
 8030108:	f040 80d8 	bne.w	80302bc <__ssvfiscanf_r+0x434>
 803010c:	6a3b      	ldr	r3, [r7, #32]
 803010e:	0636      	lsls	r6, r6, #24
 8030110:	f853 5b04 	ldr.w	r5, [r3], #4
 8030114:	623b      	str	r3, [r7, #32]
 8030116:	f140 80d7 	bpl.w	80302c8 <__ssvfiscanf_r+0x440>
 803011a:	b145      	cbz	r5, 803012e <__ssvfiscanf_r+0x2a6>
 803011c:	2080      	movs	r0, #128	@ 0x80
 803011e:	f7fe fe9d 	bl	802ee5c <malloc>
 8030122:	4606      	mov	r6, r0
 8030124:	2800      	cmp	r0, #0
 8030126:	d164      	bne.n	80301f2 <__ssvfiscanf_r+0x36a>
 8030128:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803012c:	61fb      	str	r3, [r7, #28]
 803012e:	f1bb 0f00 	cmp.w	fp, #0
 8030132:	d008      	beq.n	8030146 <__ssvfiscanf_r+0x2be>
 8030134:	69fb      	ldr	r3, [r7, #28]
 8030136:	3301      	adds	r3, #1
 8030138:	f000 85ba 	beq.w	8030cb0 <__ssvfiscanf_r+0xe28>
 803013c:	f8db 0000 	ldr.w	r0, [fp]
 8030140:	b108      	cbz	r0, 8030146 <__ssvfiscanf_r+0x2be>
 8030142:	f7fe fe93 	bl	802ee6c <free>
 8030146:	69f8      	ldr	r0, [r7, #28]
 8030148:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 803014c:	46bd      	mov	sp, r7
 803014e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030152:	68b9      	ldr	r1, [r7, #8]
 8030154:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8030158:	f003 fe67 	bl	8033e2a <__sccl>
 803015c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8030160:	60b8      	str	r0, [r7, #8]
 8030162:	2501      	movs	r5, #1
 8030164:	e7ab      	b.n	80300be <__ssvfiscanf_r+0x236>
 8030166:	f046 0601 	orr.w	r6, r6, #1
 803016a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 803016e:	2500      	movs	r5, #0
 8030170:	e7a5      	b.n	80300be <__ssvfiscanf_r+0x236>
 8030172:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8030176:	e795      	b.n	80300a4 <__ssvfiscanf_r+0x21c>
 8030178:	06f0      	lsls	r0, r6, #27
 803017a:	f53f aea6 	bmi.w	802feca <__ssvfiscanf_r+0x42>
 803017e:	6a3a      	ldr	r2, [r7, #32]
 8030180:	0731      	lsls	r1, r6, #28
 8030182:	f852 3b04 	ldr.w	r3, [r2], #4
 8030186:	623a      	str	r2, [r7, #32]
 8030188:	d502      	bpl.n	8030190 <__ssvfiscanf_r+0x308>
 803018a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803018c:	701a      	strb	r2, [r3, #0]
 803018e:	e69c      	b.n	802feca <__ssvfiscanf_r+0x42>
 8030190:	0772      	lsls	r2, r6, #29
 8030192:	d502      	bpl.n	803019a <__ssvfiscanf_r+0x312>
 8030194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030196:	801a      	strh	r2, [r3, #0]
 8030198:	e697      	b.n	802feca <__ssvfiscanf_r+0x42>
 803019a:	07f5      	lsls	r5, r6, #31
 803019c:	d502      	bpl.n	80301a4 <__ssvfiscanf_r+0x31c>
 803019e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80301a0:	601a      	str	r2, [r3, #0]
 80301a2:	e692      	b.n	802feca <__ssvfiscanf_r+0x42>
 80301a4:	07b0      	lsls	r0, r6, #30
 80301a6:	d5fa      	bpl.n	803019e <__ssvfiscanf_r+0x316>
 80301a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80301aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80301ac:	17d2      	asrs	r2, r2, #31
 80301ae:	e9c3 1200 	strd	r1, r2, [r3]
 80301b2:	e68a      	b.n	802feca <__ssvfiscanf_r+0x42>
 80301b4:	4ba6      	ldr	r3, [pc, #664]	@ (8030450 <__ssvfiscanf_r+0x5c8>)
 80301b6:	60fb      	str	r3, [r7, #12]
 80301b8:	2300      	movs	r3, #0
 80301ba:	e76a      	b.n	8030092 <__ssvfiscanf_r+0x20a>
 80301bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80301be:	4621      	mov	r1, r4
 80301c0:	f7ff fe0b 	bl	802fdda <__ssrefill_r>
 80301c4:	2800      	cmp	r0, #0
 80301c6:	f43f af7d 	beq.w	80300c4 <__ssvfiscanf_r+0x23c>
 80301ca:	e714      	b.n	802fff6 <__ssvfiscanf_r+0x16e>
 80301cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80301ce:	3201      	adds	r2, #1
 80301d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80301d2:	6862      	ldr	r2, [r4, #4]
 80301d4:	3a01      	subs	r2, #1
 80301d6:	2a00      	cmp	r2, #0
 80301d8:	6062      	str	r2, [r4, #4]
 80301da:	dd02      	ble.n	80301e2 <__ssvfiscanf_r+0x35a>
 80301dc:	3301      	adds	r3, #1
 80301de:	6023      	str	r3, [r4, #0]
 80301e0:	e774      	b.n	80300cc <__ssvfiscanf_r+0x244>
 80301e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80301e4:	4621      	mov	r1, r4
 80301e6:	f7ff fdf8 	bl	802fdda <__ssrefill_r>
 80301ea:	2800      	cmp	r0, #0
 80301ec:	f43f af6e 	beq.w	80300cc <__ssvfiscanf_r+0x244>
 80301f0:	e701      	b.n	802fff6 <__ssvfiscanf_r+0x16e>
 80301f2:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80301f6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80301fa:	6028      	str	r0, [r5, #0]
 80301fc:	4599      	cmp	r9, r3
 80301fe:	d314      	bcc.n	803022a <__ssvfiscanf_r+0x3a2>
 8030200:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030204:	4293      	cmp	r3, r2
 8030206:	f200 8553 	bhi.w	8030cb0 <__ssvfiscanf_r+0xe28>
 803020a:	3308      	adds	r3, #8
 803020c:	fa1f fa83 	uxth.w	sl, r3
 8030210:	f8db 0000 	ldr.w	r0, [fp]
 8030214:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8030218:	f003 fdaa 	bl	8033d70 <realloc>
 803021c:	2800      	cmp	r0, #0
 803021e:	f000 8547 	beq.w	8030cb0 <__ssvfiscanf_r+0xe28>
 8030222:	f8cb 0000 	str.w	r0, [fp]
 8030226:	f8ab a004 	strh.w	sl, [fp, #4]
 803022a:	f8db 3000 	ldr.w	r3, [fp]
 803022e:	f109 0201 	add.w	r2, r9, #1
 8030232:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030236:	46aa      	mov	sl, r5
 8030238:	f8ab 2006 	strh.w	r2, [fp, #6]
 803023c:	4635      	mov	r5, r6
 803023e:	f04f 0920 	mov.w	r9, #32
 8030242:	2200      	movs	r2, #0
 8030244:	62ba      	str	r2, [r7, #40]	@ 0x28
 8030246:	f7fd fd4b 	bl	802dce0 <__locale_mb_cur_max>
 803024a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803024c:	4290      	cmp	r0, r2
 803024e:	f43f aed2 	beq.w	802fff6 <__ssvfiscanf_r+0x16e>
 8030252:	6821      	ldr	r1, [r4, #0]
 8030254:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 8030258:	f811 0b01 	ldrb.w	r0, [r1], #1
 803025c:	f80c 0002 	strb.w	r0, [ip, r2]
 8030260:	1c53      	adds	r3, r2, #1
 8030262:	6862      	ldr	r2, [r4, #4]
 8030264:	3a01      	subs	r2, #1
 8030266:	e9c4 1200 	strd	r1, r2, [r4]
 803026a:	69ba      	ldr	r2, [r7, #24]
 803026c:	2a03      	cmp	r2, #3
 803026e:	d102      	bne.n	8030276 <__ssvfiscanf_r+0x3ee>
 8030270:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8030272:	2a04      	cmp	r2, #4
 8030274:	d007      	beq.n	8030286 <__ssvfiscanf_r+0x3fe>
 8030276:	2208      	movs	r2, #8
 8030278:	2100      	movs	r1, #0
 803027a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803027e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030280:	f7fc fba6 	bl	802c9d0 <memset>
 8030284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030286:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 803028a:	9200      	str	r2, [sp, #0]
 803028c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803028e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030290:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8030294:	4629      	mov	r1, r5
 8030296:	f005 f925 	bl	80354e4 <_mbrtowc_r>
 803029a:	4603      	mov	r3, r0
 803029c:	61b8      	str	r0, [r7, #24]
 803029e:	1c58      	adds	r0, r3, #1
 80302a0:	f43f aea9 	beq.w	802fff6 <__ssvfiscanf_r+0x16e>
 80302a4:	461a      	mov	r2, r3
 80302a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80302a8:	b9b2      	cbnz	r2, 80302d8 <__ssvfiscanf_r+0x450>
 80302aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80302ac:	441a      	add	r2, r3
 80302ae:	4613      	mov	r3, r2
 80302b0:	693a      	ldr	r2, [r7, #16]
 80302b2:	b172      	cbz	r2, 80302d2 <__ssvfiscanf_r+0x44a>
 80302b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80302b6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80302ba:	e019      	b.n	80302f0 <__ssvfiscanf_r+0x468>
 80302bc:	f04f 0900 	mov.w	r9, #0
 80302c0:	464e      	mov	r6, r9
 80302c2:	46ca      	mov	sl, r9
 80302c4:	464d      	mov	r5, r9
 80302c6:	e7bc      	b.n	8030242 <__ssvfiscanf_r+0x3ba>
 80302c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80302cc:	464e      	mov	r6, r9
 80302ce:	46ca      	mov	sl, r9
 80302d0:	e7b7      	b.n	8030242 <__ssvfiscanf_r+0x3ba>
 80302d2:	693a      	ldr	r2, [r7, #16]
 80302d4:	602a      	str	r2, [r5, #0]
 80302d6:	e7ed      	b.n	80302b4 <__ssvfiscanf_r+0x42c>
 80302d8:	69ba      	ldr	r2, [r7, #24]
 80302da:	3202      	adds	r2, #2
 80302dc:	d024      	beq.n	8030328 <__ssvfiscanf_r+0x4a0>
 80302de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80302e0:	441a      	add	r2, r3
 80302e2:	69bb      	ldr	r3, [r7, #24]
 80302e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80302e6:	2b03      	cmp	r3, #3
 80302e8:	d1e5      	bne.n	80302b6 <__ssvfiscanf_r+0x42e>
 80302ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80302ec:	2b04      	cmp	r3, #4
 80302ee:	d1e2      	bne.n	80302b6 <__ssvfiscanf_r+0x42e>
 80302f0:	693b      	ldr	r3, [r7, #16]
 80302f2:	b9bb      	cbnz	r3, 8030324 <__ssvfiscanf_r+0x49c>
 80302f4:	f1ba 0f00 	cmp.w	sl, #0
 80302f8:	d013      	beq.n	8030322 <__ssvfiscanf_r+0x49a>
 80302fa:	1bab      	subs	r3, r5, r6
 80302fc:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8030300:	d80f      	bhi.n	8030322 <__ssvfiscanf_r+0x49a>
 8030302:	4630      	mov	r0, r6
 8030304:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030308:	62bb      	str	r3, [r7, #40]	@ 0x28
 803030a:	f003 fd31 	bl	8033d70 <realloc>
 803030e:	4606      	mov	r6, r0
 8030310:	2800      	cmp	r0, #0
 8030312:	f43f af09 	beq.w	8030128 <__ssvfiscanf_r+0x2a0>
 8030316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030318:	f8ca 0000 	str.w	r0, [sl]
 803031c:	18c5      	adds	r5, r0, r3
 803031e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030322:	3504      	adds	r5, #4
 8030324:	2200      	movs	r2, #0
 8030326:	e000      	b.n	803032a <__ssvfiscanf_r+0x4a2>
 8030328:	461a      	mov	r2, r3
 803032a:	6863      	ldr	r3, [r4, #4]
 803032c:	2b00      	cmp	r3, #0
 803032e:	dc13      	bgt.n	8030358 <__ssvfiscanf_r+0x4d0>
 8030330:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030332:	62ba      	str	r2, [r7, #40]	@ 0x28
 8030334:	4621      	mov	r1, r4
 8030336:	f7ff fd50 	bl	802fdda <__ssrefill_r>
 803033a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803033c:	b160      	cbz	r0, 8030358 <__ssvfiscanf_r+0x4d0>
 803033e:	2a00      	cmp	r2, #0
 8030340:	f47f ae59 	bne.w	802fff6 <__ssvfiscanf_r+0x16e>
 8030344:	f1ba 0f00 	cmp.w	sl, #0
 8030348:	d10b      	bne.n	8030362 <__ssvfiscanf_r+0x4da>
 803034a:	693b      	ldr	r3, [r7, #16]
 803034c:	2b00      	cmp	r3, #0
 803034e:	f47f adbc 	bne.w	802feca <__ssvfiscanf_r+0x42>
 8030352:	69fb      	ldr	r3, [r7, #28]
 8030354:	3301      	adds	r3, #1
 8030356:	e5b0      	b.n	802feba <__ssvfiscanf_r+0x32>
 8030358:	f1b8 0f00 	cmp.w	r8, #0
 803035c:	f47f af72 	bne.w	8030244 <__ssvfiscanf_r+0x3bc>
 8030360:	e7f0      	b.n	8030344 <__ssvfiscanf_r+0x4bc>
 8030362:	1ba9      	subs	r1, r5, r6
 8030364:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8030368:	d9ef      	bls.n	803034a <__ssvfiscanf_r+0x4c2>
 803036a:	f8da 0000 	ldr.w	r0, [sl]
 803036e:	f003 fcff 	bl	8033d70 <realloc>
 8030372:	2800      	cmp	r0, #0
 8030374:	d0e9      	beq.n	803034a <__ssvfiscanf_r+0x4c2>
 8030376:	f8ca 0000 	str.w	r0, [sl]
 803037a:	e7e6      	b.n	803034a <__ssvfiscanf_r+0x4c2>
 803037c:	b1db      	cbz	r3, 80303b6 <__ssvfiscanf_r+0x52e>
 803037e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8030382:	4598      	cmp	r8, r3
 8030384:	dd10      	ble.n	80303a8 <__ssvfiscanf_r+0x520>
 8030386:	441a      	add	r2, r3
 8030388:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803038a:	6022      	str	r2, [r4, #0]
 803038c:	4621      	mov	r1, r4
 803038e:	441d      	add	r5, r3
 8030390:	eba8 0803 	sub.w	r8, r8, r3
 8030394:	f7ff fd21 	bl	802fdda <__ssrefill_r>
 8030398:	2800      	cmp	r0, #0
 803039a:	d0f0      	beq.n	803037e <__ssvfiscanf_r+0x4f6>
 803039c:	2d00      	cmp	r5, #0
 803039e:	f43f ae2a 	beq.w	802fff6 <__ssvfiscanf_r+0x16e>
 80303a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80303a4:	442b      	add	r3, r5
 80303a6:	e201      	b.n	80307ac <__ssvfiscanf_r+0x924>
 80303a8:	eba3 0308 	sub.w	r3, r3, r8
 80303ac:	4442      	add	r2, r8
 80303ae:	4445      	add	r5, r8
 80303b0:	6063      	str	r3, [r4, #4]
 80303b2:	6022      	str	r2, [r4, #0]
 80303b4:	e7f5      	b.n	80303a2 <__ssvfiscanf_r+0x51a>
 80303b6:	6a3b      	ldr	r3, [r7, #32]
 80303b8:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80303bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80303c0:	623b      	str	r3, [r7, #32]
 80303c2:	d02d      	beq.n	8030420 <__ssvfiscanf_r+0x598>
 80303c4:	2d00      	cmp	r5, #0
 80303c6:	f43f adac 	beq.w	802ff22 <__ssvfiscanf_r+0x9a>
 80303ca:	4640      	mov	r0, r8
 80303cc:	f7fe fd46 	bl	802ee5c <malloc>
 80303d0:	4681      	mov	r9, r0
 80303d2:	2800      	cmp	r0, #0
 80303d4:	f43f ae14 	beq.w	8030000 <__ssvfiscanf_r+0x178>
 80303d8:	f8bb a006 	ldrh.w	sl, [fp, #6]
 80303dc:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 80303e0:	6028      	str	r0, [r5, #0]
 80303e2:	45b2      	cmp	sl, r6
 80303e4:	d312      	bcc.n	803040c <__ssvfiscanf_r+0x584>
 80303e6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80303ea:	429e      	cmp	r6, r3
 80303ec:	f200 8460 	bhi.w	8030cb0 <__ssvfiscanf_r+0xe28>
 80303f0:	3608      	adds	r6, #8
 80303f2:	b2b6      	uxth	r6, r6
 80303f4:	f8db 0000 	ldr.w	r0, [fp]
 80303f8:	00b1      	lsls	r1, r6, #2
 80303fa:	f003 fcb9 	bl	8033d70 <realloc>
 80303fe:	2800      	cmp	r0, #0
 8030400:	f000 8456 	beq.w	8030cb0 <__ssvfiscanf_r+0xe28>
 8030404:	f8cb 0000 	str.w	r0, [fp]
 8030408:	f8ab 6004 	strh.w	r6, [fp, #4]
 803040c:	f8db 3000 	ldr.w	r3, [fp]
 8030410:	f10a 0201 	add.w	r2, sl, #1
 8030414:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8030418:	462e      	mov	r6, r5
 803041a:	f8ab 2006 	strh.w	r2, [fp, #6]
 803041e:	464d      	mov	r5, r9
 8030420:	9400      	str	r4, [sp, #0]
 8030422:	4629      	mov	r1, r5
 8030424:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030426:	4643      	mov	r3, r8
 8030428:	2201      	movs	r2, #1
 803042a:	f7ff fcf3 	bl	802fe14 <_sfread_r>
 803042e:	4605      	mov	r5, r0
 8030430:	2800      	cmp	r0, #0
 8030432:	f43f ade0 	beq.w	802fff6 <__ssvfiscanf_r+0x16e>
 8030436:	b13e      	cbz	r6, 8030448 <__ssvfiscanf_r+0x5c0>
 8030438:	4580      	cmp	r8, r0
 803043a:	d905      	bls.n	8030448 <__ssvfiscanf_r+0x5c0>
 803043c:	4601      	mov	r1, r0
 803043e:	6830      	ldr	r0, [r6, #0]
 8030440:	f003 fc96 	bl	8033d70 <realloc>
 8030444:	b100      	cbz	r0, 8030448 <__ssvfiscanf_r+0x5c0>
 8030446:	6030      	str	r0, [r6, #0]
 8030448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803044a:	442b      	add	r3, r5
 803044c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803044e:	e780      	b.n	8030352 <__ssvfiscanf_r+0x4ca>
 8030450:	0802c0d9 	.word	0x0802c0d9
 8030454:	0803c07d 	.word	0x0803c07d
 8030458:	2b00      	cmp	r3, #0
 803045a:	bf08      	it	eq
 803045c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8030460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030462:	693b      	ldr	r3, [r7, #16]
 8030464:	2d00      	cmp	r5, #0
 8030466:	f000 8100 	beq.w	803066a <__ssvfiscanf_r+0x7e2>
 803046a:	2b00      	cmp	r3, #0
 803046c:	f040 80a5 	bne.w	80305ba <__ssvfiscanf_r+0x732>
 8030470:	6a3b      	ldr	r3, [r7, #32]
 8030472:	0631      	lsls	r1, r6, #24
 8030474:	f853 5b04 	ldr.w	r5, [r3], #4
 8030478:	623b      	str	r3, [r7, #32]
 803047a:	f140 80a5 	bpl.w	80305c8 <__ssvfiscanf_r+0x740>
 803047e:	2d00      	cmp	r5, #0
 8030480:	f43f ae55 	beq.w	803012e <__ssvfiscanf_r+0x2a6>
 8030484:	2080      	movs	r0, #128	@ 0x80
 8030486:	f7fe fce9 	bl	802ee5c <malloc>
 803048a:	4680      	mov	r8, r0
 803048c:	2800      	cmp	r0, #0
 803048e:	f43f ae4b 	beq.w	8030128 <__ssvfiscanf_r+0x2a0>
 8030492:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 8030496:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 803049a:	6028      	str	r0, [r5, #0]
 803049c:	429e      	cmp	r6, r3
 803049e:	d314      	bcc.n	80304ca <__ssvfiscanf_r+0x642>
 80304a0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80304a4:	4293      	cmp	r3, r2
 80304a6:	f200 8403 	bhi.w	8030cb0 <__ssvfiscanf_r+0xe28>
 80304aa:	3308      	adds	r3, #8
 80304ac:	fa1f f983 	uxth.w	r9, r3
 80304b0:	f8db 0000 	ldr.w	r0, [fp]
 80304b4:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80304b8:	f003 fc5a 	bl	8033d70 <realloc>
 80304bc:	2800      	cmp	r0, #0
 80304be:	f000 83f7 	beq.w	8030cb0 <__ssvfiscanf_r+0xe28>
 80304c2:	f8cb 0000 	str.w	r0, [fp]
 80304c6:	f8ab 9004 	strh.w	r9, [fp, #4]
 80304ca:	f8db 3000 	ldr.w	r3, [fp]
 80304ce:	1c72      	adds	r2, r6, #1
 80304d0:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 80304d4:	46aa      	mov	sl, r5
 80304d6:	f8ab 2006 	strh.w	r2, [fp, #6]
 80304da:	4645      	mov	r5, r8
 80304dc:	f04f 0920 	mov.w	r9, #32
 80304e0:	2600      	movs	r6, #0
 80304e2:	f7fd fbfd 	bl	802dce0 <__locale_mb_cur_max>
 80304e6:	4286      	cmp	r6, r0
 80304e8:	f43f ad85 	beq.w	802fff6 <__ssvfiscanf_r+0x16e>
 80304ec:	1c73      	adds	r3, r6, #1
 80304ee:	607b      	str	r3, [r7, #4]
 80304f0:	6823      	ldr	r3, [r4, #0]
 80304f2:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80304f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80304fa:	558a      	strb	r2, [r1, r6]
 80304fc:	6862      	ldr	r2, [r4, #4]
 80304fe:	3a01      	subs	r2, #1
 8030500:	e9c4 3200 	strd	r3, r2, [r4]
 8030504:	69bb      	ldr	r3, [r7, #24]
 8030506:	2b03      	cmp	r3, #3
 8030508:	d102      	bne.n	8030510 <__ssvfiscanf_r+0x688>
 803050a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 803050c:	2b04      	cmp	r3, #4
 803050e:	d005      	beq.n	803051c <__ssvfiscanf_r+0x694>
 8030510:	2208      	movs	r2, #8
 8030512:	2100      	movs	r1, #0
 8030514:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8030518:	f7fc fa5a 	bl	802c9d0 <memset>
 803051c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8030520:	9300      	str	r3, [sp, #0]
 8030522:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8030526:	687b      	ldr	r3, [r7, #4]
 8030528:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803052a:	4629      	mov	r1, r5
 803052c:	f004 ffda 	bl	80354e4 <_mbrtowc_r>
 8030530:	1c42      	adds	r2, r0, #1
 8030532:	61b8      	str	r0, [r7, #24]
 8030534:	f43f ad5f 	beq.w	802fff6 <__ssvfiscanf_r+0x16e>
 8030538:	2800      	cmp	r0, #0
 803053a:	d14a      	bne.n	80305d2 <__ssvfiscanf_r+0x74a>
 803053c:	6028      	str	r0, [r5, #0]
 803053e:	682e      	ldr	r6, [r5, #0]
 8030540:	1c73      	adds	r3, r6, #1
 8030542:	d056      	beq.n	80305f2 <__ssvfiscanf_r+0x76a>
 8030544:	2208      	movs	r2, #8
 8030546:	2100      	movs	r1, #0
 8030548:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803054c:	f7fc fa40 	bl	802c9d0 <memset>
 8030550:	4b99      	ldr	r3, [pc, #612]	@ (80307b8 <__ssvfiscanf_r+0x930>)
 8030552:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8030558:	603b      	str	r3, [r7, #0]
 803055a:	4632      	mov	r2, r6
 803055c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8030560:	683e      	ldr	r6, [r7, #0]
 8030562:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8030566:	47b0      	blx	r6
 8030568:	2801      	cmp	r0, #1
 803056a:	d144      	bne.n	80305f6 <__ssvfiscanf_r+0x76e>
 803056c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8030570:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8030574:	5c9b      	ldrb	r3, [r3, r2]
 8030576:	2b00      	cmp	r3, #0
 8030578:	d148      	bne.n	803060c <__ssvfiscanf_r+0x784>
 803057a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 803057e:	687b      	ldr	r3, [r7, #4]
 8030580:	2b00      	cmp	r3, #0
 8030582:	d13a      	bne.n	80305fa <__ssvfiscanf_r+0x772>
 8030584:	693b      	ldr	r3, [r7, #16]
 8030586:	2b00      	cmp	r3, #0
 8030588:	f47f ac9f 	bne.w	802feca <__ssvfiscanf_r+0x42>
 803058c:	602b      	str	r3, [r5, #0]
 803058e:	f1ba 0f00 	cmp.w	sl, #0
 8030592:	f43f aede 	beq.w	8030352 <__ssvfiscanf_r+0x4ca>
 8030596:	eba5 0108 	sub.w	r1, r5, r8
 803059a:	108b      	asrs	r3, r1, #2
 803059c:	3301      	adds	r3, #1
 803059e:	4599      	cmp	r9, r3
 80305a0:	f67f aed7 	bls.w	8030352 <__ssvfiscanf_r+0x4ca>
 80305a4:	f8da 0000 	ldr.w	r0, [sl]
 80305a8:	3104      	adds	r1, #4
 80305aa:	f003 fbe1 	bl	8033d70 <realloc>
 80305ae:	2800      	cmp	r0, #0
 80305b0:	f43f aecf 	beq.w	8030352 <__ssvfiscanf_r+0x4ca>
 80305b4:	f8ca 0000 	str.w	r0, [sl]
 80305b8:	e6cb      	b.n	8030352 <__ssvfiscanf_r+0x4ca>
 80305ba:	f04f 0900 	mov.w	r9, #0
 80305be:	46c8      	mov	r8, r9
 80305c0:	46ca      	mov	sl, r9
 80305c2:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 80305c6:	e78b      	b.n	80304e0 <__ssvfiscanf_r+0x658>
 80305c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80305cc:	46c8      	mov	r8, r9
 80305ce:	46ca      	mov	sl, r9
 80305d0:	e786      	b.n	80304e0 <__ssvfiscanf_r+0x658>
 80305d2:	69bb      	ldr	r3, [r7, #24]
 80305d4:	3302      	adds	r3, #2
 80305d6:	d1b2      	bne.n	803053e <__ssvfiscanf_r+0x6b6>
 80305d8:	687e      	ldr	r6, [r7, #4]
 80305da:	6863      	ldr	r3, [r4, #4]
 80305dc:	2b00      	cmp	r3, #0
 80305de:	dc3f      	bgt.n	8030660 <__ssvfiscanf_r+0x7d8>
 80305e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80305e2:	4621      	mov	r1, r4
 80305e4:	f7ff fbf9 	bl	802fdda <__ssrefill_r>
 80305e8:	2800      	cmp	r0, #0
 80305ea:	d039      	beq.n	8030660 <__ssvfiscanf_r+0x7d8>
 80305ec:	2e00      	cmp	r6, #0
 80305ee:	d0c9      	beq.n	8030584 <__ssvfiscanf_r+0x6fc>
 80305f0:	e501      	b.n	802fff6 <__ssvfiscanf_r+0x16e>
 80305f2:	4632      	mov	r2, r6
 80305f4:	e7bc      	b.n	8030570 <__ssvfiscanf_r+0x6e8>
 80305f6:	2200      	movs	r2, #0
 80305f8:	e7ba      	b.n	8030570 <__ssvfiscanf_r+0x6e8>
 80305fa:	687b      	ldr	r3, [r7, #4]
 80305fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80305fe:	3b01      	subs	r3, #1
 8030600:	4622      	mov	r2, r4
 8030602:	5cf1      	ldrb	r1, [r6, r3]
 8030604:	607b      	str	r3, [r7, #4]
 8030606:	f7ff fbad 	bl	802fd64 <_sungetc_r>
 803060a:	e7b8      	b.n	803057e <__ssvfiscanf_r+0x6f6>
 803060c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803060e:	687a      	ldr	r2, [r7, #4]
 8030610:	4413      	add	r3, r2
 8030612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030614:	69bb      	ldr	r3, [r7, #24]
 8030616:	2b03      	cmp	r3, #3
 8030618:	d102      	bne.n	8030620 <__ssvfiscanf_r+0x798>
 803061a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 803061c:	2b04      	cmp	r3, #4
 803061e:	d002      	beq.n	8030626 <__ssvfiscanf_r+0x79e>
 8030620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030622:	3b01      	subs	r3, #1
 8030624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030626:	693b      	ldr	r3, [r7, #16]
 8030628:	b9c3      	cbnz	r3, 803065c <__ssvfiscanf_r+0x7d4>
 803062a:	3504      	adds	r5, #4
 803062c:	f1ba 0f00 	cmp.w	sl, #0
 8030630:	d014      	beq.n	803065c <__ssvfiscanf_r+0x7d4>
 8030632:	eba5 0608 	sub.w	r6, r5, r8
 8030636:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 803063a:	d80d      	bhi.n	8030658 <__ssvfiscanf_r+0x7d0>
 803063c:	4640      	mov	r0, r8
 803063e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030642:	f003 fb95 	bl	8033d70 <realloc>
 8030646:	4680      	mov	r8, r0
 8030648:	2800      	cmp	r0, #0
 803064a:	f43f ad6d 	beq.w	8030128 <__ssvfiscanf_r+0x2a0>
 803064e:	1985      	adds	r5, r0, r6
 8030650:	f8ca 0000 	str.w	r0, [sl]
 8030654:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030658:	693e      	ldr	r6, [r7, #16]
 803065a:	e7be      	b.n	80305da <__ssvfiscanf_r+0x752>
 803065c:	2600      	movs	r6, #0
 803065e:	e7bc      	b.n	80305da <__ssvfiscanf_r+0x752>
 8030660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030662:	2b00      	cmp	r3, #0
 8030664:	f47f af3d 	bne.w	80304e2 <__ssvfiscanf_r+0x65a>
 8030668:	e78c      	b.n	8030584 <__ssvfiscanf_r+0x6fc>
 803066a:	b1e3      	cbz	r3, 80306a6 <__ssvfiscanf_r+0x81e>
 803066c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 8030670:	6823      	ldr	r3, [r4, #0]
 8030672:	781a      	ldrb	r2, [r3, #0]
 8030674:	5cb2      	ldrb	r2, [r6, r2]
 8030676:	b91a      	cbnz	r2, 8030680 <__ssvfiscanf_r+0x7f8>
 8030678:	2d00      	cmp	r5, #0
 803067a:	f47f ae92 	bne.w	80303a2 <__ssvfiscanf_r+0x51a>
 803067e:	e450      	b.n	802ff22 <__ssvfiscanf_r+0x9a>
 8030680:	3301      	adds	r3, #1
 8030682:	6862      	ldr	r2, [r4, #4]
 8030684:	6023      	str	r3, [r4, #0]
 8030686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030688:	3501      	adds	r5, #1
 803068a:	3a01      	subs	r2, #1
 803068c:	42ab      	cmp	r3, r5
 803068e:	6062      	str	r2, [r4, #4]
 8030690:	f43f ae87 	beq.w	80303a2 <__ssvfiscanf_r+0x51a>
 8030694:	2a00      	cmp	r2, #0
 8030696:	dceb      	bgt.n	8030670 <__ssvfiscanf_r+0x7e8>
 8030698:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803069a:	4621      	mov	r1, r4
 803069c:	f7ff fb9d 	bl	802fdda <__ssrefill_r>
 80306a0:	2800      	cmp	r0, #0
 80306a2:	d0e5      	beq.n	8030670 <__ssvfiscanf_r+0x7e8>
 80306a4:	e67d      	b.n	80303a2 <__ssvfiscanf_r+0x51a>
 80306a6:	6a3b      	ldr	r3, [r7, #32]
 80306a8:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 80306ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80306b0:	623b      	str	r3, [r7, #32]
 80306b2:	d07e      	beq.n	80307b2 <__ssvfiscanf_r+0x92a>
 80306b4:	2d00      	cmp	r5, #0
 80306b6:	f43f ac34 	beq.w	802ff22 <__ssvfiscanf_r+0x9a>
 80306ba:	2020      	movs	r0, #32
 80306bc:	f7fe fbce 	bl	802ee5c <malloc>
 80306c0:	4680      	mov	r8, r0
 80306c2:	2800      	cmp	r0, #0
 80306c4:	f43f ac9c 	beq.w	8030000 <__ssvfiscanf_r+0x178>
 80306c8:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80306cc:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 80306d0:	6028      	str	r0, [r5, #0]
 80306d2:	45b1      	cmp	r9, r6
 80306d4:	d312      	bcc.n	80306fc <__ssvfiscanf_r+0x874>
 80306d6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80306da:	429e      	cmp	r6, r3
 80306dc:	f200 82e8 	bhi.w	8030cb0 <__ssvfiscanf_r+0xe28>
 80306e0:	3608      	adds	r6, #8
 80306e2:	b2b6      	uxth	r6, r6
 80306e4:	f8db 0000 	ldr.w	r0, [fp]
 80306e8:	00b1      	lsls	r1, r6, #2
 80306ea:	f003 fb41 	bl	8033d70 <realloc>
 80306ee:	2800      	cmp	r0, #0
 80306f0:	f000 82de 	beq.w	8030cb0 <__ssvfiscanf_r+0xe28>
 80306f4:	f8cb 0000 	str.w	r0, [fp]
 80306f8:	f8ab 6004 	strh.w	r6, [fp, #4]
 80306fc:	f8db 3000 	ldr.w	r3, [fp]
 8030700:	f109 0201 	add.w	r2, r9, #1
 8030704:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030708:	46aa      	mov	sl, r5
 803070a:	f8ab 2006 	strh.w	r2, [fp, #6]
 803070e:	4645      	mov	r5, r8
 8030710:	f04f 0920 	mov.w	r9, #32
 8030714:	462e      	mov	r6, r5
 8030716:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 803071a:	6823      	ldr	r3, [r4, #0]
 803071c:	781a      	ldrb	r2, [r3, #0]
 803071e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8030722:	b362      	cbz	r2, 803077e <__ssvfiscanf_r+0x8f6>
 8030724:	6862      	ldr	r2, [r4, #4]
 8030726:	3a01      	subs	r2, #1
 8030728:	6062      	str	r2, [r4, #4]
 803072a:	1c5a      	adds	r2, r3, #1
 803072c:	6022      	str	r2, [r4, #0]
 803072e:	781b      	ldrb	r3, [r3, #0]
 8030730:	f805 3b01 	strb.w	r3, [r5], #1
 8030734:	f1ba 0f00 	cmp.w	sl, #0
 8030738:	d011      	beq.n	803075e <__ssvfiscanf_r+0x8d6>
 803073a:	1bab      	subs	r3, r5, r6
 803073c:	454b      	cmp	r3, r9
 803073e:	d30e      	bcc.n	803075e <__ssvfiscanf_r+0x8d6>
 8030740:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030744:	4630      	mov	r0, r6
 8030746:	4649      	mov	r1, r9
 8030748:	613b      	str	r3, [r7, #16]
 803074a:	f003 fb11 	bl	8033d70 <realloc>
 803074e:	4606      	mov	r6, r0
 8030750:	2800      	cmp	r0, #0
 8030752:	f43f ac55 	beq.w	8030000 <__ssvfiscanf_r+0x178>
 8030756:	693b      	ldr	r3, [r7, #16]
 8030758:	f8ca 0000 	str.w	r0, [sl]
 803075c:	18c5      	adds	r5, r0, r3
 803075e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030760:	3b01      	subs	r3, #1
 8030762:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030764:	d00b      	beq.n	803077e <__ssvfiscanf_r+0x8f6>
 8030766:	6863      	ldr	r3, [r4, #4]
 8030768:	2b00      	cmp	r3, #0
 803076a:	dcd6      	bgt.n	803071a <__ssvfiscanf_r+0x892>
 803076c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803076e:	4621      	mov	r1, r4
 8030770:	f7ff fb33 	bl	802fdda <__ssrefill_r>
 8030774:	2800      	cmp	r0, #0
 8030776:	d0d0      	beq.n	803071a <__ssvfiscanf_r+0x892>
 8030778:	42b5      	cmp	r5, r6
 803077a:	f43f ac3c 	beq.w	802fff6 <__ssvfiscanf_r+0x16e>
 803077e:	1bae      	subs	r6, r5, r6
 8030780:	f43f abcf 	beq.w	802ff22 <__ssvfiscanf_r+0x9a>
 8030784:	2300      	movs	r3, #0
 8030786:	702b      	strb	r3, [r5, #0]
 8030788:	f1ba 0f00 	cmp.w	sl, #0
 803078c:	d009      	beq.n	80307a2 <__ssvfiscanf_r+0x91a>
 803078e:	1c71      	adds	r1, r6, #1
 8030790:	4589      	cmp	r9, r1
 8030792:	d906      	bls.n	80307a2 <__ssvfiscanf_r+0x91a>
 8030794:	f8da 0000 	ldr.w	r0, [sl]
 8030798:	f003 faea 	bl	8033d70 <realloc>
 803079c:	b108      	cbz	r0, 80307a2 <__ssvfiscanf_r+0x91a>
 803079e:	f8ca 0000 	str.w	r0, [sl]
 80307a2:	69fb      	ldr	r3, [r7, #28]
 80307a4:	3301      	adds	r3, #1
 80307a6:	61fb      	str	r3, [r7, #28]
 80307a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80307aa:	4433      	add	r3, r6
 80307ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80307ae:	f7ff bb8c 	b.w	802feca <__ssvfiscanf_r+0x42>
 80307b2:	46ca      	mov	sl, r9
 80307b4:	e7ae      	b.n	8030714 <__ssvfiscanf_r+0x88c>
 80307b6:	bf00      	nop
 80307b8:	2000016c 	.word	0x2000016c
 80307bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80307be:	2b00      	cmp	r3, #0
 80307c0:	bf08      	it	eq
 80307c2:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 80307c6:	f016 0501 	ands.w	r5, r6, #1
 80307ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80307cc:	f006 0810 	and.w	r8, r6, #16
 80307d0:	f000 80e1 	beq.w	8030996 <__ssvfiscanf_r+0xb0e>
 80307d4:	f1b8 0f00 	cmp.w	r8, #0
 80307d8:	f040 8089 	bne.w	80308ee <__ssvfiscanf_r+0xa66>
 80307dc:	6a3b      	ldr	r3, [r7, #32]
 80307de:	0636      	lsls	r6, r6, #24
 80307e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80307e4:	623b      	str	r3, [r7, #32]
 80307e6:	f140 8089 	bpl.w	80308fc <__ssvfiscanf_r+0xa74>
 80307ea:	2d00      	cmp	r5, #0
 80307ec:	f43f ac9f 	beq.w	803012e <__ssvfiscanf_r+0x2a6>
 80307f0:	2080      	movs	r0, #128	@ 0x80
 80307f2:	f7fe fb33 	bl	802ee5c <malloc>
 80307f6:	4606      	mov	r6, r0
 80307f8:	2800      	cmp	r0, #0
 80307fa:	f43f ac95 	beq.w	8030128 <__ssvfiscanf_r+0x2a0>
 80307fe:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030802:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8030806:	6028      	str	r0, [r5, #0]
 8030808:	4599      	cmp	r9, r3
 803080a:	d314      	bcc.n	8030836 <__ssvfiscanf_r+0x9ae>
 803080c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030810:	4293      	cmp	r3, r2
 8030812:	f200 824d 	bhi.w	8030cb0 <__ssvfiscanf_r+0xe28>
 8030816:	3308      	adds	r3, #8
 8030818:	fa1f fa83 	uxth.w	sl, r3
 803081c:	f8db 0000 	ldr.w	r0, [fp]
 8030820:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8030824:	f003 faa4 	bl	8033d70 <realloc>
 8030828:	2800      	cmp	r0, #0
 803082a:	f000 8241 	beq.w	8030cb0 <__ssvfiscanf_r+0xe28>
 803082e:	f8cb 0000 	str.w	r0, [fp]
 8030832:	f8ab a004 	strh.w	sl, [fp, #4]
 8030836:	f8db 3000 	ldr.w	r3, [fp]
 803083a:	f109 0201 	add.w	r2, r9, #1
 803083e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030842:	46aa      	mov	sl, r5
 8030844:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030848:	4635      	mov	r5, r6
 803084a:	f04f 0920 	mov.w	r9, #32
 803084e:	2300      	movs	r3, #0
 8030850:	6822      	ldr	r2, [r4, #0]
 8030852:	499e      	ldr	r1, [pc, #632]	@ (8030acc <__ssvfiscanf_r+0xc44>)
 8030854:	7812      	ldrb	r2, [r2, #0]
 8030856:	5c8a      	ldrb	r2, [r1, r2]
 8030858:	0711      	lsls	r1, r2, #28
 803085a:	d43c      	bmi.n	80308d6 <__ssvfiscanf_r+0xa4e>
 803085c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803085e:	2a00      	cmp	r2, #0
 8030860:	d039      	beq.n	80308d6 <__ssvfiscanf_r+0xa4e>
 8030862:	613b      	str	r3, [r7, #16]
 8030864:	f7fd fa3c 	bl	802dce0 <__locale_mb_cur_max>
 8030868:	693b      	ldr	r3, [r7, #16]
 803086a:	4298      	cmp	r0, r3
 803086c:	f43f abc3 	beq.w	802fff6 <__ssvfiscanf_r+0x16e>
 8030870:	1c5a      	adds	r2, r3, #1
 8030872:	613a      	str	r2, [r7, #16]
 8030874:	6822      	ldr	r2, [r4, #0]
 8030876:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 803087a:	f812 0b01 	ldrb.w	r0, [r2], #1
 803087e:	54c8      	strb	r0, [r1, r3]
 8030880:	6863      	ldr	r3, [r4, #4]
 8030882:	3b01      	subs	r3, #1
 8030884:	e9c4 2300 	strd	r2, r3, [r4]
 8030888:	69bb      	ldr	r3, [r7, #24]
 803088a:	2b03      	cmp	r3, #3
 803088c:	d102      	bne.n	8030894 <__ssvfiscanf_r+0xa0c>
 803088e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8030890:	2b04      	cmp	r3, #4
 8030892:	d005      	beq.n	80308a0 <__ssvfiscanf_r+0xa18>
 8030894:	2208      	movs	r2, #8
 8030896:	2100      	movs	r1, #0
 8030898:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803089c:	f7fc f898 	bl	802c9d0 <memset>
 80308a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80308a4:	9300      	str	r3, [sp, #0]
 80308a6:	693b      	ldr	r3, [r7, #16]
 80308a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80308aa:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80308ae:	4629      	mov	r1, r5
 80308b0:	f004 fe18 	bl	80354e4 <_mbrtowc_r>
 80308b4:	4603      	mov	r3, r0
 80308b6:	61b8      	str	r0, [r7, #24]
 80308b8:	1c58      	adds	r0, r3, #1
 80308ba:	f43f ab9c 	beq.w	802fff6 <__ssvfiscanf_r+0x16e>
 80308be:	bb0b      	cbnz	r3, 8030904 <__ssvfiscanf_r+0xa7c>
 80308c0:	602b      	str	r3, [r5, #0]
 80308c2:	6828      	ldr	r0, [r5, #0]
 80308c4:	f004 fe28 	bl	8035518 <iswspace>
 80308c8:	4603      	mov	r3, r0
 80308ca:	2800      	cmp	r0, #0
 80308cc:	d037      	beq.n	803093e <__ssvfiscanf_r+0xab6>
 80308ce:	693a      	ldr	r2, [r7, #16]
 80308d0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80308d4:	bb4a      	cbnz	r2, 803092a <__ssvfiscanf_r+0xaa2>
 80308d6:	f1b8 0f00 	cmp.w	r8, #0
 80308da:	f47f aaf6 	bne.w	802feca <__ssvfiscanf_r+0x42>
 80308de:	f8c5 8000 	str.w	r8, [r5]
 80308e2:	f1ba 0f00 	cmp.w	sl, #0
 80308e6:	f43f ad34 	beq.w	8030352 <__ssvfiscanf_r+0x4ca>
 80308ea:	1ba9      	subs	r1, r5, r6
 80308ec:	e655      	b.n	803059a <__ssvfiscanf_r+0x712>
 80308ee:	f04f 0900 	mov.w	r9, #0
 80308f2:	464e      	mov	r6, r9
 80308f4:	46ca      	mov	sl, r9
 80308f6:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 80308fa:	e7a8      	b.n	803084e <__ssvfiscanf_r+0x9c6>
 80308fc:	46c1      	mov	r9, r8
 80308fe:	4646      	mov	r6, r8
 8030900:	46c2      	mov	sl, r8
 8030902:	e7a4      	b.n	803084e <__ssvfiscanf_r+0x9c6>
 8030904:	69bb      	ldr	r3, [r7, #24]
 8030906:	3302      	adds	r3, #2
 8030908:	d1db      	bne.n	80308c2 <__ssvfiscanf_r+0xa3a>
 803090a:	693b      	ldr	r3, [r7, #16]
 803090c:	6862      	ldr	r2, [r4, #4]
 803090e:	2a00      	cmp	r2, #0
 8030910:	dc9e      	bgt.n	8030850 <__ssvfiscanf_r+0x9c8>
 8030912:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030914:	613b      	str	r3, [r7, #16]
 8030916:	4621      	mov	r1, r4
 8030918:	f7ff fa5f 	bl	802fdda <__ssrefill_r>
 803091c:	693b      	ldr	r3, [r7, #16]
 803091e:	2800      	cmp	r0, #0
 8030920:	d096      	beq.n	8030850 <__ssvfiscanf_r+0x9c8>
 8030922:	2b00      	cmp	r3, #0
 8030924:	f47f ab67 	bne.w	802fff6 <__ssvfiscanf_r+0x16e>
 8030928:	e7d5      	b.n	80308d6 <__ssvfiscanf_r+0xa4e>
 803092a:	693a      	ldr	r2, [r7, #16]
 803092c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803092e:	3a01      	subs	r2, #1
 8030930:	613a      	str	r2, [r7, #16]
 8030932:	6939      	ldr	r1, [r7, #16]
 8030934:	4622      	mov	r2, r4
 8030936:	5c59      	ldrb	r1, [r3, r1]
 8030938:	f7ff fa14 	bl	802fd64 <_sungetc_r>
 803093c:	e7c7      	b.n	80308ce <__ssvfiscanf_r+0xa46>
 803093e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030940:	6939      	ldr	r1, [r7, #16]
 8030942:	440a      	add	r2, r1
 8030944:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030946:	69ba      	ldr	r2, [r7, #24]
 8030948:	2a03      	cmp	r2, #3
 803094a:	d102      	bne.n	8030952 <__ssvfiscanf_r+0xaca>
 803094c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 803094e:	2a04      	cmp	r2, #4
 8030950:	d002      	beq.n	8030958 <__ssvfiscanf_r+0xad0>
 8030952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030954:	3a01      	subs	r2, #1
 8030956:	62ba      	str	r2, [r7, #40]	@ 0x28
 8030958:	f1b8 0f00 	cmp.w	r8, #0
 803095c:	d1d6      	bne.n	803090c <__ssvfiscanf_r+0xa84>
 803095e:	3504      	adds	r5, #4
 8030960:	f1ba 0f00 	cmp.w	sl, #0
 8030964:	d015      	beq.n	8030992 <__ssvfiscanf_r+0xb0a>
 8030966:	1bab      	subs	r3, r5, r6
 8030968:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 803096c:	d80f      	bhi.n	803098e <__ssvfiscanf_r+0xb06>
 803096e:	4630      	mov	r0, r6
 8030970:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030974:	613b      	str	r3, [r7, #16]
 8030976:	f003 f9fb 	bl	8033d70 <realloc>
 803097a:	4606      	mov	r6, r0
 803097c:	2800      	cmp	r0, #0
 803097e:	f43f abd3 	beq.w	8030128 <__ssvfiscanf_r+0x2a0>
 8030982:	693b      	ldr	r3, [r7, #16]
 8030984:	f8ca 0000 	str.w	r0, [sl]
 8030988:	18c5      	adds	r5, r0, r3
 803098a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803098e:	4643      	mov	r3, r8
 8030990:	e7bc      	b.n	803090c <__ssvfiscanf_r+0xa84>
 8030992:	4653      	mov	r3, sl
 8030994:	e7ba      	b.n	803090c <__ssvfiscanf_r+0xa84>
 8030996:	f1b8 0f00 	cmp.w	r8, #0
 803099a:	d019      	beq.n	80309d0 <__ssvfiscanf_r+0xb48>
 803099c:	4e4b      	ldr	r6, [pc, #300]	@ (8030acc <__ssvfiscanf_r+0xc44>)
 803099e:	6823      	ldr	r3, [r4, #0]
 80309a0:	781a      	ldrb	r2, [r3, #0]
 80309a2:	5cb2      	ldrb	r2, [r6, r2]
 80309a4:	0712      	lsls	r2, r2, #28
 80309a6:	f53f acfc 	bmi.w	80303a2 <__ssvfiscanf_r+0x51a>
 80309aa:	3301      	adds	r3, #1
 80309ac:	6862      	ldr	r2, [r4, #4]
 80309ae:	6023      	str	r3, [r4, #0]
 80309b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80309b2:	3501      	adds	r5, #1
 80309b4:	3a01      	subs	r2, #1
 80309b6:	429d      	cmp	r5, r3
 80309b8:	6062      	str	r2, [r4, #4]
 80309ba:	f43f acf2 	beq.w	80303a2 <__ssvfiscanf_r+0x51a>
 80309be:	2a00      	cmp	r2, #0
 80309c0:	dced      	bgt.n	803099e <__ssvfiscanf_r+0xb16>
 80309c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80309c4:	4621      	mov	r1, r4
 80309c6:	f7ff fa08 	bl	802fdda <__ssrefill_r>
 80309ca:	2800      	cmp	r0, #0
 80309cc:	d0e7      	beq.n	803099e <__ssvfiscanf_r+0xb16>
 80309ce:	e4e8      	b.n	80303a2 <__ssvfiscanf_r+0x51a>
 80309d0:	6a3b      	ldr	r3, [r7, #32]
 80309d2:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80309d6:	f853 5b04 	ldr.w	r5, [r3], #4
 80309da:	623b      	str	r3, [r7, #32]
 80309dc:	d074      	beq.n	8030ac8 <__ssvfiscanf_r+0xc40>
 80309de:	2d00      	cmp	r5, #0
 80309e0:	f43f aa9f 	beq.w	802ff22 <__ssvfiscanf_r+0x9a>
 80309e4:	2020      	movs	r0, #32
 80309e6:	f7fe fa39 	bl	802ee5c <malloc>
 80309ea:	4680      	mov	r8, r0
 80309ec:	2800      	cmp	r0, #0
 80309ee:	f43f ab07 	beq.w	8030000 <__ssvfiscanf_r+0x178>
 80309f2:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80309f6:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 80309fa:	6028      	str	r0, [r5, #0]
 80309fc:	45b1      	cmp	r9, r6
 80309fe:	d312      	bcc.n	8030a26 <__ssvfiscanf_r+0xb9e>
 8030a00:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8030a04:	429e      	cmp	r6, r3
 8030a06:	f200 8153 	bhi.w	8030cb0 <__ssvfiscanf_r+0xe28>
 8030a0a:	3608      	adds	r6, #8
 8030a0c:	b2b6      	uxth	r6, r6
 8030a0e:	f8db 0000 	ldr.w	r0, [fp]
 8030a12:	00b1      	lsls	r1, r6, #2
 8030a14:	f003 f9ac 	bl	8033d70 <realloc>
 8030a18:	2800      	cmp	r0, #0
 8030a1a:	f000 8149 	beq.w	8030cb0 <__ssvfiscanf_r+0xe28>
 8030a1e:	f8cb 0000 	str.w	r0, [fp]
 8030a22:	f8ab 6004 	strh.w	r6, [fp, #4]
 8030a26:	f8db 3000 	ldr.w	r3, [fp]
 8030a2a:	f109 0201 	add.w	r2, r9, #1
 8030a2e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030a32:	46aa      	mov	sl, r5
 8030a34:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030a38:	4645      	mov	r5, r8
 8030a3a:	2620      	movs	r6, #32
 8030a3c:	46a9      	mov	r9, r5
 8030a3e:	6823      	ldr	r3, [r4, #0]
 8030a40:	4922      	ldr	r1, [pc, #136]	@ (8030acc <__ssvfiscanf_r+0xc44>)
 8030a42:	781a      	ldrb	r2, [r3, #0]
 8030a44:	5c8a      	ldrb	r2, [r1, r2]
 8030a46:	0710      	lsls	r0, r2, #28
 8030a48:	d428      	bmi.n	8030a9c <__ssvfiscanf_r+0xc14>
 8030a4a:	6862      	ldr	r2, [r4, #4]
 8030a4c:	3a01      	subs	r2, #1
 8030a4e:	6062      	str	r2, [r4, #4]
 8030a50:	1c5a      	adds	r2, r3, #1
 8030a52:	6022      	str	r2, [r4, #0]
 8030a54:	781b      	ldrb	r3, [r3, #0]
 8030a56:	f805 3b01 	strb.w	r3, [r5], #1
 8030a5a:	f1ba 0f00 	cmp.w	sl, #0
 8030a5e:	d010      	beq.n	8030a82 <__ssvfiscanf_r+0xbfa>
 8030a60:	eba5 0809 	sub.w	r8, r5, r9
 8030a64:	45b0      	cmp	r8, r6
 8030a66:	d30c      	bcc.n	8030a82 <__ssvfiscanf_r+0xbfa>
 8030a68:	0076      	lsls	r6, r6, #1
 8030a6a:	4648      	mov	r0, r9
 8030a6c:	4631      	mov	r1, r6
 8030a6e:	f003 f97f 	bl	8033d70 <realloc>
 8030a72:	4681      	mov	r9, r0
 8030a74:	2800      	cmp	r0, #0
 8030a76:	f43f aac3 	beq.w	8030000 <__ssvfiscanf_r+0x178>
 8030a7a:	eb00 0508 	add.w	r5, r0, r8
 8030a7e:	f8ca 0000 	str.w	r0, [sl]
 8030a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030a84:	3b01      	subs	r3, #1
 8030a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030a88:	d008      	beq.n	8030a9c <__ssvfiscanf_r+0xc14>
 8030a8a:	6863      	ldr	r3, [r4, #4]
 8030a8c:	2b00      	cmp	r3, #0
 8030a8e:	dcd6      	bgt.n	8030a3e <__ssvfiscanf_r+0xbb6>
 8030a90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030a92:	4621      	mov	r1, r4
 8030a94:	f7ff f9a1 	bl	802fdda <__ssrefill_r>
 8030a98:	2800      	cmp	r0, #0
 8030a9a:	d0d0      	beq.n	8030a3e <__ssvfiscanf_r+0xbb6>
 8030a9c:	2300      	movs	r3, #0
 8030a9e:	702b      	strb	r3, [r5, #0]
 8030aa0:	eba5 0509 	sub.w	r5, r5, r9
 8030aa4:	f1ba 0f00 	cmp.w	sl, #0
 8030aa8:	f43f acce 	beq.w	8030448 <__ssvfiscanf_r+0x5c0>
 8030aac:	1c69      	adds	r1, r5, #1
 8030aae:	428e      	cmp	r6, r1
 8030ab0:	f67f acca 	bls.w	8030448 <__ssvfiscanf_r+0x5c0>
 8030ab4:	f8da 0000 	ldr.w	r0, [sl]
 8030ab8:	f003 f95a 	bl	8033d70 <realloc>
 8030abc:	2800      	cmp	r0, #0
 8030abe:	f43f acc3 	beq.w	8030448 <__ssvfiscanf_r+0x5c0>
 8030ac2:	f8ca 0000 	str.w	r0, [sl]
 8030ac6:	e4bf      	b.n	8030448 <__ssvfiscanf_r+0x5c0>
 8030ac8:	46b2      	mov	sl, r6
 8030aca:	e7b7      	b.n	8030a3c <__ssvfiscanf_r+0xbb4>
 8030acc:	0803c07d 	.word	0x0803c07d
 8030ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030ad2:	3b01      	subs	r3, #1
 8030ad4:	2b26      	cmp	r3, #38	@ 0x26
 8030ad6:	bf81      	itttt	hi
 8030ad8:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 8030ada:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 8030ade:	2327      	movhi	r3, #39	@ 0x27
 8030ae0:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8030ae2:	bf98      	it	ls
 8030ae4:	f04f 0800 	movls.w	r8, #0
 8030ae8:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 8030aec:	f04f 0900 	mov.w	r9, #0
 8030af0:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 8030af4:	6822      	ldr	r2, [r4, #0]
 8030af6:	7813      	ldrb	r3, [r2, #0]
 8030af8:	2b39      	cmp	r3, #57	@ 0x39
 8030afa:	d80f      	bhi.n	8030b1c <__ssvfiscanf_r+0xc94>
 8030afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8030afe:	d91a      	bls.n	8030b36 <__ssvfiscanf_r+0xcae>
 8030b00:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8030b04:	290e      	cmp	r1, #14
 8030b06:	d816      	bhi.n	8030b36 <__ssvfiscanf_r+0xcae>
 8030b08:	e8df f001 	tbb	[pc, r1]
 8030b0c:	15771577 	.word	0x15771577
 8030b10:	67673e15 	.word	0x67673e15
 8030b14:	67676767 	.word	0x67676767
 8030b18:	6f67      	.short	0x6f67
 8030b1a:	6f          	.byte	0x6f
 8030b1b:	00          	.byte	0x00
 8030b1c:	2b66      	cmp	r3, #102	@ 0x66
 8030b1e:	d831      	bhi.n	8030b84 <__ssvfiscanf_r+0xcfc>
 8030b20:	2b60      	cmp	r3, #96	@ 0x60
 8030b22:	d803      	bhi.n	8030b2c <__ssvfiscanf_r+0xca4>
 8030b24:	2b46      	cmp	r3, #70	@ 0x46
 8030b26:	d804      	bhi.n	8030b32 <__ssvfiscanf_r+0xcaa>
 8030b28:	2b40      	cmp	r3, #64	@ 0x40
 8030b2a:	d904      	bls.n	8030b36 <__ssvfiscanf_r+0xcae>
 8030b2c:	6979      	ldr	r1, [r7, #20]
 8030b2e:	290a      	cmp	r1, #10
 8030b30:	e061      	b.n	8030bf6 <__ssvfiscanf_r+0xd6e>
 8030b32:	2b58      	cmp	r3, #88	@ 0x58
 8030b34:	d066      	beq.n	8030c04 <__ssvfiscanf_r+0xd7c>
 8030b36:	05f1      	lsls	r1, r6, #23
 8030b38:	d511      	bpl.n	8030b5e <__ssvfiscanf_r+0xcd6>
 8030b3a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030b3e:	459a      	cmp	sl, r3
 8030b40:	d908      	bls.n	8030b54 <__ssvfiscanf_r+0xccc>
 8030b42:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8030b46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030b48:	4622      	mov	r2, r4
 8030b4a:	f7ff f90b 	bl	802fd64 <_sungetc_r>
 8030b4e:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 8030b52:	46c2      	mov	sl, r8
 8030b54:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030b58:	459a      	cmp	sl, r3
 8030b5a:	f43f a9e2 	beq.w	802ff22 <__ssvfiscanf_r+0x9a>
 8030b5e:	f016 0210 	ands.w	r2, r6, #16
 8030b62:	d16b      	bne.n	8030c3c <__ssvfiscanf_r+0xdb4>
 8030b64:	697b      	ldr	r3, [r7, #20]
 8030b66:	f88a 2000 	strb.w	r2, [sl]
 8030b6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030b6c:	68fd      	ldr	r5, [r7, #12]
 8030b6e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030b72:	47a8      	blx	r5
 8030b74:	6a3b      	ldr	r3, [r7, #32]
 8030b76:	06b2      	lsls	r2, r6, #26
 8030b78:	f103 0804 	add.w	r8, r3, #4
 8030b7c:	d555      	bpl.n	8030c2a <__ssvfiscanf_r+0xda2>
 8030b7e:	681b      	ldr	r3, [r3, #0]
 8030b80:	6018      	str	r0, [r3, #0]
 8030b82:	e057      	b.n	8030c34 <__ssvfiscanf_r+0xdac>
 8030b84:	2b78      	cmp	r3, #120	@ 0x78
 8030b86:	e7d5      	b.n	8030b34 <__ssvfiscanf_r+0xcac>
 8030b88:	0531      	lsls	r1, r6, #20
 8030b8a:	d509      	bpl.n	8030ba0 <__ssvfiscanf_r+0xd18>
 8030b8c:	6979      	ldr	r1, [r7, #20]
 8030b8e:	b919      	cbnz	r1, 8030b98 <__ssvfiscanf_r+0xd10>
 8030b90:	2108      	movs	r1, #8
 8030b92:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8030b96:	6179      	str	r1, [r7, #20]
 8030b98:	0575      	lsls	r5, r6, #21
 8030b9a:	d506      	bpl.n	8030baa <__ssvfiscanf_r+0xd22>
 8030b9c:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 8030ba0:	4655      	mov	r5, sl
 8030ba2:	f805 3b01 	strb.w	r3, [r5], #1
 8030ba6:	46aa      	mov	sl, r5
 8030ba8:	e00b      	b.n	8030bc2 <__ssvfiscanf_r+0xd3a>
 8030baa:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 8030bae:	f1b8 0f00 	cmp.w	r8, #0
 8030bb2:	d004      	beq.n	8030bbe <__ssvfiscanf_r+0xd36>
 8030bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030bb6:	3301      	adds	r3, #1
 8030bb8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8030bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030bbe:	f109 0901 	add.w	r9, r9, #1
 8030bc2:	6863      	ldr	r3, [r4, #4]
 8030bc4:	3b01      	subs	r3, #1
 8030bc6:	2b00      	cmp	r3, #0
 8030bc8:	6063      	str	r3, [r4, #4]
 8030bca:	dd27      	ble.n	8030c1c <__ssvfiscanf_r+0xd94>
 8030bcc:	3201      	adds	r2, #1
 8030bce:	6022      	str	r2, [r4, #0]
 8030bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030bd2:	3b01      	subs	r3, #1
 8030bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030bd6:	d18d      	bne.n	8030af4 <__ssvfiscanf_r+0xc6c>
 8030bd8:	e7ad      	b.n	8030b36 <__ssvfiscanf_r+0xcae>
 8030bda:	6978      	ldr	r0, [r7, #20]
 8030bdc:	4936      	ldr	r1, [pc, #216]	@ (8030cb8 <__ssvfiscanf_r+0xe30>)
 8030bde:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030be2:	6179      	str	r1, [r7, #20]
 8030be4:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 8030be8:	e7da      	b.n	8030ba0 <__ssvfiscanf_r+0xd18>
 8030bea:	6978      	ldr	r0, [r7, #20]
 8030bec:	4932      	ldr	r1, [pc, #200]	@ (8030cb8 <__ssvfiscanf_r+0xe30>)
 8030bee:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030bf2:	6179      	str	r1, [r7, #20]
 8030bf4:	2908      	cmp	r1, #8
 8030bf6:	dcf5      	bgt.n	8030be4 <__ssvfiscanf_r+0xd5c>
 8030bf8:	e79d      	b.n	8030b36 <__ssvfiscanf_r+0xcae>
 8030bfa:	0630      	lsls	r0, r6, #24
 8030bfc:	d59b      	bpl.n	8030b36 <__ssvfiscanf_r+0xcae>
 8030bfe:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8030c02:	e7cd      	b.n	8030ba0 <__ssvfiscanf_r+0xd18>
 8030c04:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 8030c08:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8030c0c:	d193      	bne.n	8030b36 <__ssvfiscanf_r+0xcae>
 8030c0e:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 8030c12:	2110      	movs	r1, #16
 8030c14:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 8030c18:	6179      	str	r1, [r7, #20]
 8030c1a:	e7c1      	b.n	8030ba0 <__ssvfiscanf_r+0xd18>
 8030c1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030c1e:	4621      	mov	r1, r4
 8030c20:	f7ff f8db 	bl	802fdda <__ssrefill_r>
 8030c24:	2800      	cmp	r0, #0
 8030c26:	d0d3      	beq.n	8030bd0 <__ssvfiscanf_r+0xd48>
 8030c28:	e785      	b.n	8030b36 <__ssvfiscanf_r+0xcae>
 8030c2a:	0733      	lsls	r3, r6, #28
 8030c2c:	d50d      	bpl.n	8030c4a <__ssvfiscanf_r+0xdc2>
 8030c2e:	6a3b      	ldr	r3, [r7, #32]
 8030c30:	681b      	ldr	r3, [r3, #0]
 8030c32:	7018      	strb	r0, [r3, #0]
 8030c34:	69fb      	ldr	r3, [r7, #28]
 8030c36:	3301      	adds	r3, #1
 8030c38:	e9c7 3807 	strd	r3, r8, [r7, #28]
 8030c3c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030c40:	ebaa 0503 	sub.w	r5, sl, r3
 8030c44:	444d      	add	r5, r9
 8030c46:	f7ff bbac 	b.w	80303a2 <__ssvfiscanf_r+0x51a>
 8030c4a:	0775      	lsls	r5, r6, #29
 8030c4c:	d503      	bpl.n	8030c56 <__ssvfiscanf_r+0xdce>
 8030c4e:	6a3b      	ldr	r3, [r7, #32]
 8030c50:	681b      	ldr	r3, [r3, #0]
 8030c52:	8018      	strh	r0, [r3, #0]
 8030c54:	e7ee      	b.n	8030c34 <__ssvfiscanf_r+0xdac>
 8030c56:	f016 0201 	ands.w	r2, r6, #1
 8030c5a:	d001      	beq.n	8030c60 <__ssvfiscanf_r+0xdd8>
 8030c5c:	6a3b      	ldr	r3, [r7, #32]
 8030c5e:	e78e      	b.n	8030b7e <__ssvfiscanf_r+0xcf6>
 8030c60:	07b1      	lsls	r1, r6, #30
 8030c62:	d5fb      	bpl.n	8030c5c <__ssvfiscanf_r+0xdd4>
 8030c64:	4b15      	ldr	r3, [pc, #84]	@ (8030cbc <__ssvfiscanf_r+0xe34>)
 8030c66:	68f9      	ldr	r1, [r7, #12]
 8030c68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030c6a:	4299      	cmp	r1, r3
 8030c6c:	697b      	ldr	r3, [r7, #20]
 8030c6e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030c72:	d106      	bne.n	8030c82 <__ssvfiscanf_r+0xdfa>
 8030c74:	f004 fc34 	bl	80354e0 <_strtoull_r>
 8030c78:	6a3b      	ldr	r3, [r7, #32]
 8030c7a:	681b      	ldr	r3, [r3, #0]
 8030c7c:	e9c3 0100 	strd	r0, r1, [r3]
 8030c80:	e7d8      	b.n	8030c34 <__ssvfiscanf_r+0xdac>
 8030c82:	f004 fb81 	bl	8035388 <_strtoll_r>
 8030c86:	e7f7      	b.n	8030c78 <__ssvfiscanf_r+0xdf0>
 8030c88:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8030c8c:	6818      	ldr	r0, [r3, #0]
 8030c8e:	f7fe f8ed 	bl	802ee6c <free>
 8030c92:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8030c96:	3401      	adds	r4, #1
 8030c98:	601e      	str	r6, [r3, #0]
 8030c9a:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8030c9e:	f8db 5000 	ldr.w	r5, [fp]
 8030ca2:	42a3      	cmp	r3, r4
 8030ca4:	dcf0      	bgt.n	8030c88 <__ssvfiscanf_r+0xe00>
 8030ca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8030caa:	61fb      	str	r3, [r7, #28]
 8030cac:	f7ff ba46 	b.w	803013c <__ssvfiscanf_r+0x2b4>
 8030cb0:	2400      	movs	r4, #0
 8030cb2:	4626      	mov	r6, r4
 8030cb4:	e7f1      	b.n	8030c9a <__ssvfiscanf_r+0xe12>
 8030cb6:	bf00      	nop
 8030cb8:	0803c214 	.word	0x0803c214
 8030cbc:	08034ed9 	.word	0x08034ed9

08030cc0 <_svfprintf_r>:
 8030cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030cc4:	b0d3      	sub	sp, #332	@ 0x14c
 8030cc6:	468b      	mov	fp, r1
 8030cc8:	4691      	mov	r9, r2
 8030cca:	461e      	mov	r6, r3
 8030ccc:	9003      	str	r0, [sp, #12]
 8030cce:	f7fd f80d 	bl	802dcec <_localeconv_r>
 8030cd2:	6803      	ldr	r3, [r0, #0]
 8030cd4:	9316      	str	r3, [sp, #88]	@ 0x58
 8030cd6:	4618      	mov	r0, r3
 8030cd8:	f7df fae2 	bl	80102a0 <strlen>
 8030cdc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8030ce0:	900d      	str	r0, [sp, #52]	@ 0x34
 8030ce2:	061b      	lsls	r3, r3, #24
 8030ce4:	d515      	bpl.n	8030d12 <_svfprintf_r+0x52>
 8030ce6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8030cea:	b993      	cbnz	r3, 8030d12 <_svfprintf_r+0x52>
 8030cec:	9803      	ldr	r0, [sp, #12]
 8030cee:	2140      	movs	r1, #64	@ 0x40
 8030cf0:	f7fe f8c4 	bl	802ee7c <_malloc_r>
 8030cf4:	f8cb 0000 	str.w	r0, [fp]
 8030cf8:	f8cb 0010 	str.w	r0, [fp, #16]
 8030cfc:	b930      	cbnz	r0, 8030d0c <_svfprintf_r+0x4c>
 8030cfe:	9a03      	ldr	r2, [sp, #12]
 8030d00:	230c      	movs	r3, #12
 8030d02:	6013      	str	r3, [r2, #0]
 8030d04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8030d08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030d0a:	e1f7      	b.n	80310fc <_svfprintf_r+0x43c>
 8030d0c:	2340      	movs	r3, #64	@ 0x40
 8030d0e:	f8cb 3014 	str.w	r3, [fp, #20]
 8030d12:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8030f60 <_svfprintf_r+0x2a0>
 8030d16:	2300      	movs	r3, #0
 8030d18:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8030d1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8030d20:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8030d24:	ac29      	add	r4, sp, #164	@ 0xa4
 8030d26:	9426      	str	r4, [sp, #152]	@ 0x98
 8030d28:	9304      	str	r3, [sp, #16]
 8030d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8030d2c:	9312      	str	r3, [sp, #72]	@ 0x48
 8030d2e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8030d30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030d32:	464b      	mov	r3, r9
 8030d34:	461d      	mov	r5, r3
 8030d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030d3a:	b10a      	cbz	r2, 8030d40 <_svfprintf_r+0x80>
 8030d3c:	2a25      	cmp	r2, #37	@ 0x25
 8030d3e:	d1f9      	bne.n	8030d34 <_svfprintf_r+0x74>
 8030d40:	ebb5 0709 	subs.w	r7, r5, r9
 8030d44:	d00d      	beq.n	8030d62 <_svfprintf_r+0xa2>
 8030d46:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030d48:	443b      	add	r3, r7
 8030d4a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030d4c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030d4e:	3301      	adds	r3, #1
 8030d50:	2b07      	cmp	r3, #7
 8030d52:	e9c4 9700 	strd	r9, r7, [r4]
 8030d56:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030d58:	dc75      	bgt.n	8030e46 <_svfprintf_r+0x186>
 8030d5a:	3408      	adds	r4, #8
 8030d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8030d5e:	443b      	add	r3, r7
 8030d60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030d62:	782b      	ldrb	r3, [r5, #0]
 8030d64:	2b00      	cmp	r3, #0
 8030d66:	f001 8148 	beq.w	8031ffa <_svfprintf_r+0x133a>
 8030d6a:	2200      	movs	r2, #0
 8030d6c:	1c6b      	adds	r3, r5, #1
 8030d6e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8030d72:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8030d76:	920e      	str	r2, [sp, #56]	@ 0x38
 8030d78:	4615      	mov	r5, r2
 8030d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030d7e:	9206      	str	r2, [sp, #24]
 8030d80:	930c      	str	r3, [sp, #48]	@ 0x30
 8030d82:	9b06      	ldr	r3, [sp, #24]
 8030d84:	3b20      	subs	r3, #32
 8030d86:	2b5a      	cmp	r3, #90	@ 0x5a
 8030d88:	f200 85a4 	bhi.w	80318d4 <_svfprintf_r+0xc14>
 8030d8c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8030d90:	05a2009d 	.word	0x05a2009d
 8030d94:	00a505a2 	.word	0x00a505a2
 8030d98:	05a205a2 	.word	0x05a205a2
 8030d9c:	008505a2 	.word	0x008505a2
 8030da0:	05a205a2 	.word	0x05a205a2
 8030da4:	00b200a8 	.word	0x00b200a8
 8030da8:	00af05a2 	.word	0x00af05a2
 8030dac:	05a200b4 	.word	0x05a200b4
 8030db0:	00d100ce 	.word	0x00d100ce
 8030db4:	00d100d1 	.word	0x00d100d1
 8030db8:	00d100d1 	.word	0x00d100d1
 8030dbc:	00d100d1 	.word	0x00d100d1
 8030dc0:	00d100d1 	.word	0x00d100d1
 8030dc4:	05a205a2 	.word	0x05a205a2
 8030dc8:	05a205a2 	.word	0x05a205a2
 8030dcc:	05a205a2 	.word	0x05a205a2
 8030dd0:	014705a2 	.word	0x014705a2
 8030dd4:	010805a2 	.word	0x010805a2
 8030dd8:	0147011b 	.word	0x0147011b
 8030ddc:	01470147 	.word	0x01470147
 8030de0:	05a205a2 	.word	0x05a205a2
 8030de4:	05a205a2 	.word	0x05a205a2
 8030de8:	05a200e2 	.word	0x05a200e2
 8030dec:	049d05a2 	.word	0x049d05a2
 8030df0:	05a205a2 	.word	0x05a205a2
 8030df4:	04e705a2 	.word	0x04e705a2
 8030df8:	050805a2 	.word	0x050805a2
 8030dfc:	05a205a2 	.word	0x05a205a2
 8030e00:	05a2052a 	.word	0x05a2052a
 8030e04:	05a205a2 	.word	0x05a205a2
 8030e08:	05a205a2 	.word	0x05a205a2
 8030e0c:	05a205a2 	.word	0x05a205a2
 8030e10:	014705a2 	.word	0x014705a2
 8030e14:	010805a2 	.word	0x010805a2
 8030e18:	0147011d 	.word	0x0147011d
 8030e1c:	01470147 	.word	0x01470147
 8030e20:	011d00ee 	.word	0x011d00ee
 8030e24:	05a20102 	.word	0x05a20102
 8030e28:	05a200fb 	.word	0x05a200fb
 8030e2c:	049f047e 	.word	0x049f047e
 8030e30:	010204d6 	.word	0x010204d6
 8030e34:	04e705a2 	.word	0x04e705a2
 8030e38:	050a009b 	.word	0x050a009b
 8030e3c:	05a205a2 	.word	0x05a205a2
 8030e40:	05a20065 	.word	0x05a20065
 8030e44:	009b      	.short	0x009b
 8030e46:	9803      	ldr	r0, [sp, #12]
 8030e48:	aa26      	add	r2, sp, #152	@ 0x98
 8030e4a:	4659      	mov	r1, fp
 8030e4c:	f7fe fac0 	bl	802f3d0 <__ssprint_r>
 8030e50:	2800      	cmp	r0, #0
 8030e52:	f040 814e 	bne.w	80310f2 <_svfprintf_r+0x432>
 8030e56:	ac29      	add	r4, sp, #164	@ 0xa4
 8030e58:	e780      	b.n	8030d5c <_svfprintf_r+0x9c>
 8030e5a:	4b43      	ldr	r3, [pc, #268]	@ (8030f68 <_svfprintf_r+0x2a8>)
 8030e5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8030e5e:	f015 0320 	ands.w	r3, r5, #32
 8030e62:	f000 84c2 	beq.w	80317ea <_svfprintf_r+0xb2a>
 8030e66:	3607      	adds	r6, #7
 8030e68:	f026 0307 	bic.w	r3, r6, #7
 8030e6c:	461a      	mov	r2, r3
 8030e6e:	685f      	ldr	r7, [r3, #4]
 8030e70:	f852 6b08 	ldr.w	r6, [r2], #8
 8030e74:	9207      	str	r2, [sp, #28]
 8030e76:	07eb      	lsls	r3, r5, #31
 8030e78:	d50a      	bpl.n	8030e90 <_svfprintf_r+0x1d0>
 8030e7a:	ea56 0307 	orrs.w	r3, r6, r7
 8030e7e:	d007      	beq.n	8030e90 <_svfprintf_r+0x1d0>
 8030e80:	2330      	movs	r3, #48	@ 0x30
 8030e82:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8030e86:	9b06      	ldr	r3, [sp, #24]
 8030e88:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8030e8c:	f045 0502 	orr.w	r5, r5, #2
 8030e90:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8030e94:	2302      	movs	r3, #2
 8030e96:	f000 bc28 	b.w	80316ea <_svfprintf_r+0xa2a>
 8030e9a:	9803      	ldr	r0, [sp, #12]
 8030e9c:	f7fc ff26 	bl	802dcec <_localeconv_r>
 8030ea0:	6843      	ldr	r3, [r0, #4]
 8030ea2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8030ea4:	4618      	mov	r0, r3
 8030ea6:	f7df f9fb 	bl	80102a0 <strlen>
 8030eaa:	9012      	str	r0, [sp, #72]	@ 0x48
 8030eac:	9803      	ldr	r0, [sp, #12]
 8030eae:	f7fc ff1d 	bl	802dcec <_localeconv_r>
 8030eb2:	6883      	ldr	r3, [r0, #8]
 8030eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8030eb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8030eb8:	b12b      	cbz	r3, 8030ec6 <_svfprintf_r+0x206>
 8030eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030ebc:	b11b      	cbz	r3, 8030ec6 <_svfprintf_r+0x206>
 8030ebe:	781b      	ldrb	r3, [r3, #0]
 8030ec0:	b10b      	cbz	r3, 8030ec6 <_svfprintf_r+0x206>
 8030ec2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8030ec6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030ec8:	e757      	b.n	8030d7a <_svfprintf_r+0xba>
 8030eca:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8030ece:	2b00      	cmp	r3, #0
 8030ed0:	d1f9      	bne.n	8030ec6 <_svfprintf_r+0x206>
 8030ed2:	2320      	movs	r3, #32
 8030ed4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030ed8:	e7f5      	b.n	8030ec6 <_svfprintf_r+0x206>
 8030eda:	f045 0501 	orr.w	r5, r5, #1
 8030ede:	e7f2      	b.n	8030ec6 <_svfprintf_r+0x206>
 8030ee0:	f856 3b04 	ldr.w	r3, [r6], #4
 8030ee4:	930e      	str	r3, [sp, #56]	@ 0x38
 8030ee6:	2b00      	cmp	r3, #0
 8030ee8:	daed      	bge.n	8030ec6 <_svfprintf_r+0x206>
 8030eea:	425b      	negs	r3, r3
 8030eec:	930e      	str	r3, [sp, #56]	@ 0x38
 8030eee:	f045 0504 	orr.w	r5, r5, #4
 8030ef2:	e7e8      	b.n	8030ec6 <_svfprintf_r+0x206>
 8030ef4:	232b      	movs	r3, #43	@ 0x2b
 8030ef6:	e7ed      	b.n	8030ed4 <_svfprintf_r+0x214>
 8030ef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030efa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030efe:	9206      	str	r2, [sp, #24]
 8030f00:	2a2a      	cmp	r2, #42	@ 0x2a
 8030f02:	d10f      	bne.n	8030f24 <_svfprintf_r+0x264>
 8030f04:	f856 2b04 	ldr.w	r2, [r6], #4
 8030f08:	930c      	str	r3, [sp, #48]	@ 0x30
 8030f0a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8030f0e:	e7da      	b.n	8030ec6 <_svfprintf_r+0x206>
 8030f10:	fb01 2808 	mla	r8, r1, r8, r2
 8030f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030f18:	9206      	str	r2, [sp, #24]
 8030f1a:	9a06      	ldr	r2, [sp, #24]
 8030f1c:	3a30      	subs	r2, #48	@ 0x30
 8030f1e:	2a09      	cmp	r2, #9
 8030f20:	d9f6      	bls.n	8030f10 <_svfprintf_r+0x250>
 8030f22:	e72d      	b.n	8030d80 <_svfprintf_r+0xc0>
 8030f24:	f04f 0800 	mov.w	r8, #0
 8030f28:	210a      	movs	r1, #10
 8030f2a:	e7f6      	b.n	8030f1a <_svfprintf_r+0x25a>
 8030f2c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8030f30:	e7c9      	b.n	8030ec6 <_svfprintf_r+0x206>
 8030f32:	2200      	movs	r2, #0
 8030f34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030f36:	920e      	str	r2, [sp, #56]	@ 0x38
 8030f38:	210a      	movs	r1, #10
 8030f3a:	9a06      	ldr	r2, [sp, #24]
 8030f3c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8030f3e:	3a30      	subs	r2, #48	@ 0x30
 8030f40:	fb01 2200 	mla	r2, r1, r0, r2
 8030f44:	920e      	str	r2, [sp, #56]	@ 0x38
 8030f46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030f4a:	9206      	str	r2, [sp, #24]
 8030f4c:	3a30      	subs	r2, #48	@ 0x30
 8030f4e:	2a09      	cmp	r2, #9
 8030f50:	d9f3      	bls.n	8030f3a <_svfprintf_r+0x27a>
 8030f52:	e715      	b.n	8030d80 <_svfprintf_r+0xc0>
 8030f54:	f045 0508 	orr.w	r5, r5, #8
 8030f58:	e7b5      	b.n	8030ec6 <_svfprintf_r+0x206>
 8030f5a:	bf00      	nop
 8030f5c:	f3af 8000 	nop.w
	...
 8030f68:	0803bccf 	.word	0x0803bccf
 8030f6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030f6e:	781b      	ldrb	r3, [r3, #0]
 8030f70:	2b68      	cmp	r3, #104	@ 0x68
 8030f72:	bf01      	itttt	eq
 8030f74:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8030f76:	3301      	addeq	r3, #1
 8030f78:	930c      	streq	r3, [sp, #48]	@ 0x30
 8030f7a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8030f7e:	bf18      	it	ne
 8030f80:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8030f84:	e79f      	b.n	8030ec6 <_svfprintf_r+0x206>
 8030f86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030f88:	781b      	ldrb	r3, [r3, #0]
 8030f8a:	2b6c      	cmp	r3, #108	@ 0x6c
 8030f8c:	d105      	bne.n	8030f9a <_svfprintf_r+0x2da>
 8030f8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030f90:	3301      	adds	r3, #1
 8030f92:	930c      	str	r3, [sp, #48]	@ 0x30
 8030f94:	f045 0520 	orr.w	r5, r5, #32
 8030f98:	e795      	b.n	8030ec6 <_svfprintf_r+0x206>
 8030f9a:	f045 0510 	orr.w	r5, r5, #16
 8030f9e:	e792      	b.n	8030ec6 <_svfprintf_r+0x206>
 8030fa0:	4632      	mov	r2, r6
 8030fa2:	f852 3b04 	ldr.w	r3, [r2], #4
 8030fa6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8030faa:	2300      	movs	r3, #0
 8030fac:	9207      	str	r2, [sp, #28]
 8030fae:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030fb2:	469a      	mov	sl, r3
 8030fb4:	f04f 0801 	mov.w	r8, #1
 8030fb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8030fba:	461f      	mov	r7, r3
 8030fbc:	9308      	str	r3, [sp, #32]
 8030fbe:	461e      	mov	r6, r3
 8030fc0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8030fc4:	e1d2      	b.n	803136c <_svfprintf_r+0x6ac>
 8030fc6:	f045 0510 	orr.w	r5, r5, #16
 8030fca:	06af      	lsls	r7, r5, #26
 8030fcc:	d512      	bpl.n	8030ff4 <_svfprintf_r+0x334>
 8030fce:	3607      	adds	r6, #7
 8030fd0:	f026 0307 	bic.w	r3, r6, #7
 8030fd4:	461a      	mov	r2, r3
 8030fd6:	685f      	ldr	r7, [r3, #4]
 8030fd8:	f852 6b08 	ldr.w	r6, [r2], #8
 8030fdc:	9207      	str	r2, [sp, #28]
 8030fde:	2f00      	cmp	r7, #0
 8030fe0:	da06      	bge.n	8030ff0 <_svfprintf_r+0x330>
 8030fe2:	4276      	negs	r6, r6
 8030fe4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8030fe8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8030fec:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030ff0:	2301      	movs	r3, #1
 8030ff2:	e37d      	b.n	80316f0 <_svfprintf_r+0xa30>
 8030ff4:	4633      	mov	r3, r6
 8030ff6:	06ee      	lsls	r6, r5, #27
 8030ff8:	f853 7b04 	ldr.w	r7, [r3], #4
 8030ffc:	9307      	str	r3, [sp, #28]
 8030ffe:	d502      	bpl.n	8031006 <_svfprintf_r+0x346>
 8031000:	463e      	mov	r6, r7
 8031002:	17ff      	asrs	r7, r7, #31
 8031004:	e7eb      	b.n	8030fde <_svfprintf_r+0x31e>
 8031006:	0668      	lsls	r0, r5, #25
 8031008:	d503      	bpl.n	8031012 <_svfprintf_r+0x352>
 803100a:	b23e      	sxth	r6, r7
 803100c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8031010:	e7e5      	b.n	8030fde <_svfprintf_r+0x31e>
 8031012:	05a9      	lsls	r1, r5, #22
 8031014:	d5f4      	bpl.n	8031000 <_svfprintf_r+0x340>
 8031016:	b27e      	sxtb	r6, r7
 8031018:	f347 17c0 	sbfx	r7, r7, #7, #1
 803101c:	e7df      	b.n	8030fde <_svfprintf_r+0x31e>
 803101e:	3607      	adds	r6, #7
 8031020:	f026 0307 	bic.w	r3, r6, #7
 8031024:	ecb3 7b02 	vldmia	r3!, {d7}
 8031028:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 803102c:	9307      	str	r3, [sp, #28]
 803102e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031030:	931a      	str	r3, [sp, #104]	@ 0x68
 8031032:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8031034:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8031038:	931b      	str	r3, [sp, #108]	@ 0x6c
 803103a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803103e:	4b81      	ldr	r3, [pc, #516]	@ (8031244 <_svfprintf_r+0x584>)
 8031040:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8031044:	f7df fd8a 	bl	8010b5c <__aeabi_dcmpun>
 8031048:	bb10      	cbnz	r0, 8031090 <_svfprintf_r+0x3d0>
 803104a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803104e:	4b7d      	ldr	r3, [pc, #500]	@ (8031244 <_svfprintf_r+0x584>)
 8031050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8031054:	f7df fd64 	bl	8010b20 <__aeabi_dcmple>
 8031058:	b9d0      	cbnz	r0, 8031090 <_svfprintf_r+0x3d0>
 803105a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803105e:	2200      	movs	r2, #0
 8031060:	2300      	movs	r3, #0
 8031062:	f7df fd53 	bl	8010b0c <__aeabi_dcmplt>
 8031066:	b110      	cbz	r0, 803106e <_svfprintf_r+0x3ae>
 8031068:	232d      	movs	r3, #45	@ 0x2d
 803106a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803106e:	4a76      	ldr	r2, [pc, #472]	@ (8031248 <_svfprintf_r+0x588>)
 8031070:	4b76      	ldr	r3, [pc, #472]	@ (803124c <_svfprintf_r+0x58c>)
 8031072:	9906      	ldr	r1, [sp, #24]
 8031074:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8031078:	2947      	cmp	r1, #71	@ 0x47
 803107a:	bfd4      	ite	le
 803107c:	4691      	movle	r9, r2
 803107e:	4699      	movgt	r9, r3
 8031080:	f04f 0a00 	mov.w	sl, #0
 8031084:	f04f 0803 	mov.w	r8, #3
 8031088:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 803108c:	f000 bfec 	b.w	8032068 <_svfprintf_r+0x13a8>
 8031090:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8031094:	4610      	mov	r0, r2
 8031096:	4619      	mov	r1, r3
 8031098:	f7df fd60 	bl	8010b5c <__aeabi_dcmpun>
 803109c:	4682      	mov	sl, r0
 803109e:	b140      	cbz	r0, 80310b2 <_svfprintf_r+0x3f2>
 80310a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80310a2:	4a6b      	ldr	r2, [pc, #428]	@ (8031250 <_svfprintf_r+0x590>)
 80310a4:	2b00      	cmp	r3, #0
 80310a6:	bfbc      	itt	lt
 80310a8:	232d      	movlt	r3, #45	@ 0x2d
 80310aa:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80310ae:	4b69      	ldr	r3, [pc, #420]	@ (8031254 <_svfprintf_r+0x594>)
 80310b0:	e7df      	b.n	8031072 <_svfprintf_r+0x3b2>
 80310b2:	9b06      	ldr	r3, [sp, #24]
 80310b4:	2b61      	cmp	r3, #97	@ 0x61
 80310b6:	d025      	beq.n	8031104 <_svfprintf_r+0x444>
 80310b8:	2b41      	cmp	r3, #65	@ 0x41
 80310ba:	d125      	bne.n	8031108 <_svfprintf_r+0x448>
 80310bc:	2358      	movs	r3, #88	@ 0x58
 80310be:	2230      	movs	r2, #48	@ 0x30
 80310c0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 80310c4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 80310c8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80310cc:	f045 0502 	orr.w	r5, r5, #2
 80310d0:	f340 80a5 	ble.w	803121e <_svfprintf_r+0x55e>
 80310d4:	9803      	ldr	r0, [sp, #12]
 80310d6:	f108 0101 	add.w	r1, r8, #1
 80310da:	f7fd fecf 	bl	802ee7c <_malloc_r>
 80310de:	4681      	mov	r9, r0
 80310e0:	2800      	cmp	r0, #0
 80310e2:	f040 80a1 	bne.w	8031228 <_svfprintf_r+0x568>
 80310e6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80310ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80310ee:	f8ab 300c 	strh.w	r3, [fp, #12]
 80310f2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80310f6:	065b      	lsls	r3, r3, #25
 80310f8:	f53f ae04 	bmi.w	8030d04 <_svfprintf_r+0x44>
 80310fc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80310fe:	b053      	add	sp, #332	@ 0x14c
 8031100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031104:	2378      	movs	r3, #120	@ 0x78
 8031106:	e7da      	b.n	80310be <_svfprintf_r+0x3fe>
 8031108:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 803110c:	f000 808e 	beq.w	803122c <_svfprintf_r+0x56c>
 8031110:	9b06      	ldr	r3, [sp, #24]
 8031112:	f023 0320 	bic.w	r3, r3, #32
 8031116:	2b47      	cmp	r3, #71	@ 0x47
 8031118:	d105      	bne.n	8031126 <_svfprintf_r+0x466>
 803111a:	f1b8 0f00 	cmp.w	r8, #0
 803111e:	d102      	bne.n	8031126 <_svfprintf_r+0x466>
 8031120:	46c2      	mov	sl, r8
 8031122:	f04f 0801 	mov.w	r8, #1
 8031126:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 803112a:	9311      	str	r3, [sp, #68]	@ 0x44
 803112c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803112e:	2b00      	cmp	r3, #0
 8031130:	da7f      	bge.n	8031232 <_svfprintf_r+0x572>
 8031132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031134:	9314      	str	r3, [sp, #80]	@ 0x50
 8031136:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8031138:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 803113c:	9315      	str	r3, [sp, #84]	@ 0x54
 803113e:	232d      	movs	r3, #45	@ 0x2d
 8031140:	931c      	str	r3, [sp, #112]	@ 0x70
 8031142:	9b06      	ldr	r3, [sp, #24]
 8031144:	f023 0320 	bic.w	r3, r3, #32
 8031148:	2b41      	cmp	r3, #65	@ 0x41
 803114a:	9308      	str	r3, [sp, #32]
 803114c:	f040 81e6 	bne.w	803151c <_svfprintf_r+0x85c>
 8031150:	a820      	add	r0, sp, #128	@ 0x80
 8031152:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8031156:	f7fc fe9b 	bl	802de90 <frexp>
 803115a:	2200      	movs	r2, #0
 803115c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8031160:	ec51 0b10 	vmov	r0, r1, d0
 8031164:	f7df fa60 	bl	8010628 <__aeabi_dmul>
 8031168:	4602      	mov	r2, r0
 803116a:	460b      	mov	r3, r1
 803116c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8031170:	2200      	movs	r2, #0
 8031172:	2300      	movs	r3, #0
 8031174:	f7df fcc0 	bl	8010af8 <__aeabi_dcmpeq>
 8031178:	b108      	cbz	r0, 803117e <_svfprintf_r+0x4be>
 803117a:	2301      	movs	r3, #1
 803117c:	9320      	str	r3, [sp, #128]	@ 0x80
 803117e:	4a36      	ldr	r2, [pc, #216]	@ (8031258 <_svfprintf_r+0x598>)
 8031180:	4b36      	ldr	r3, [pc, #216]	@ (803125c <_svfprintf_r+0x59c>)
 8031182:	9906      	ldr	r1, [sp, #24]
 8031184:	2961      	cmp	r1, #97	@ 0x61
 8031186:	bf18      	it	ne
 8031188:	461a      	movne	r2, r3
 803118a:	9210      	str	r2, [sp, #64]	@ 0x40
 803118c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 8031190:	464e      	mov	r6, r9
 8031192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031196:	4b32      	ldr	r3, [pc, #200]	@ (8031260 <_svfprintf_r+0x5a0>)
 8031198:	2200      	movs	r2, #0
 803119a:	f7df fa45 	bl	8010628 <__aeabi_dmul>
 803119e:	4602      	mov	r2, r0
 80311a0:	460b      	mov	r3, r1
 80311a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80311a6:	f7df fcef 	bl	8010b88 <__aeabi_d2iz>
 80311aa:	9013      	str	r0, [sp, #76]	@ 0x4c
 80311ac:	f7df f9d2 	bl	8010554 <__aeabi_i2d>
 80311b0:	4602      	mov	r2, r0
 80311b2:	460b      	mov	r3, r1
 80311b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80311b8:	f7df f87e 	bl	80102b8 <__aeabi_dsub>
 80311bc:	4602      	mov	r2, r0
 80311be:	460b      	mov	r3, r1
 80311c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80311c4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80311c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80311c8:	5c9b      	ldrb	r3, [r3, r2]
 80311ca:	f806 3b01 	strb.w	r3, [r6], #1
 80311ce:	1c7a      	adds	r2, r7, #1
 80311d0:	d006      	beq.n	80311e0 <_svfprintf_r+0x520>
 80311d2:	1e7b      	subs	r3, r7, #1
 80311d4:	931d      	str	r3, [sp, #116]	@ 0x74
 80311d6:	2200      	movs	r2, #0
 80311d8:	2300      	movs	r3, #0
 80311da:	f7df fc8d 	bl	8010af8 <__aeabi_dcmpeq>
 80311de:	b370      	cbz	r0, 803123e <_svfprintf_r+0x57e>
 80311e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80311e4:	4b1f      	ldr	r3, [pc, #124]	@ (8031264 <_svfprintf_r+0x5a4>)
 80311e6:	2200      	movs	r2, #0
 80311e8:	f7df fcae 	bl	8010b48 <__aeabi_dcmpgt>
 80311ec:	2800      	cmp	r0, #0
 80311ee:	d13b      	bne.n	8031268 <_svfprintf_r+0x5a8>
 80311f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80311f4:	4b1b      	ldr	r3, [pc, #108]	@ (8031264 <_svfprintf_r+0x5a4>)
 80311f6:	2200      	movs	r2, #0
 80311f8:	f7df fc7e 	bl	8010af8 <__aeabi_dcmpeq>
 80311fc:	b110      	cbz	r0, 8031204 <_svfprintf_r+0x544>
 80311fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031200:	07db      	lsls	r3, r3, #31
 8031202:	d431      	bmi.n	8031268 <_svfprintf_r+0x5a8>
 8031204:	4633      	mov	r3, r6
 8031206:	19f1      	adds	r1, r6, r7
 8031208:	2030      	movs	r0, #48	@ 0x30
 803120a:	1aca      	subs	r2, r1, r3
 803120c:	2a00      	cmp	r2, #0
 803120e:	f280 8182 	bge.w	8031516 <_svfprintf_r+0x856>
 8031212:	1c7b      	adds	r3, r7, #1
 8031214:	3701      	adds	r7, #1
 8031216:	bfb8      	it	lt
 8031218:	2300      	movlt	r3, #0
 803121a:	441e      	add	r6, r3
 803121c:	e038      	b.n	8031290 <_svfprintf_r+0x5d0>
 803121e:	f04f 0a00 	mov.w	sl, #0
 8031222:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8031226:	e77e      	b.n	8031126 <_svfprintf_r+0x466>
 8031228:	4682      	mov	sl, r0
 803122a:	e77c      	b.n	8031126 <_svfprintf_r+0x466>
 803122c:	f04f 0806 	mov.w	r8, #6
 8031230:	e779      	b.n	8031126 <_svfprintf_r+0x466>
 8031232:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8031236:	2300      	movs	r3, #0
 8031238:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 803123c:	e780      	b.n	8031140 <_svfprintf_r+0x480>
 803123e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8031240:	e7a7      	b.n	8031192 <_svfprintf_r+0x4d2>
 8031242:	bf00      	nop
 8031244:	7fefffff 	.word	0x7fefffff
 8031248:	0803bcbf 	.word	0x0803bcbf
 803124c:	0803bcc3 	.word	0x0803bcc3
 8031250:	0803bcc7 	.word	0x0803bcc7
 8031254:	0803bccb 	.word	0x0803bccb
 8031258:	0803bccf 	.word	0x0803bccf
 803125c:	0803bce0 	.word	0x0803bce0
 8031260:	40300000 	.word	0x40300000
 8031264:	3fe00000 	.word	0x3fe00000
 8031268:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803126a:	9624      	str	r6, [sp, #144]	@ 0x90
 803126c:	7bd9      	ldrb	r1, [r3, #15]
 803126e:	2030      	movs	r0, #48	@ 0x30
 8031270:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8031272:	1e53      	subs	r3, r2, #1
 8031274:	9324      	str	r3, [sp, #144]	@ 0x90
 8031276:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 803127a:	428b      	cmp	r3, r1
 803127c:	f000 8148 	beq.w	8031510 <_svfprintf_r+0x850>
 8031280:	2b39      	cmp	r3, #57	@ 0x39
 8031282:	bf0b      	itete	eq
 8031284:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8031286:	3301      	addne	r3, #1
 8031288:	7a9b      	ldrbeq	r3, [r3, #10]
 803128a:	b2db      	uxtbne	r3, r3
 803128c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8031290:	eba6 0309 	sub.w	r3, r6, r9
 8031294:	9304      	str	r3, [sp, #16]
 8031296:	9b08      	ldr	r3, [sp, #32]
 8031298:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803129a:	2b47      	cmp	r3, #71	@ 0x47
 803129c:	f040 8187 	bne.w	80315ae <_svfprintf_r+0x8ee>
 80312a0:	1cf1      	adds	r1, r6, #3
 80312a2:	db02      	blt.n	80312aa <_svfprintf_r+0x5ea>
 80312a4:	4546      	cmp	r6, r8
 80312a6:	f340 81a5 	ble.w	80315f4 <_svfprintf_r+0x934>
 80312aa:	9b06      	ldr	r3, [sp, #24]
 80312ac:	3b02      	subs	r3, #2
 80312ae:	9306      	str	r3, [sp, #24]
 80312b0:	9906      	ldr	r1, [sp, #24]
 80312b2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80312b6:	f021 0120 	bic.w	r1, r1, #32
 80312ba:	2941      	cmp	r1, #65	@ 0x41
 80312bc:	bf08      	it	eq
 80312be:	320f      	addeq	r2, #15
 80312c0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 80312c4:	bf06      	itte	eq
 80312c6:	b2d2      	uxtbeq	r2, r2
 80312c8:	2101      	moveq	r1, #1
 80312ca:	2100      	movne	r1, #0
 80312cc:	2b00      	cmp	r3, #0
 80312ce:	9320      	str	r3, [sp, #128]	@ 0x80
 80312d0:	bfb8      	it	lt
 80312d2:	f1c6 0301 	rsblt	r3, r6, #1
 80312d6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 80312da:	bfb4      	ite	lt
 80312dc:	222d      	movlt	r2, #45	@ 0x2d
 80312de:	222b      	movge	r2, #43	@ 0x2b
 80312e0:	2b09      	cmp	r3, #9
 80312e2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 80312e6:	f340 8178 	ble.w	80315da <_svfprintf_r+0x91a>
 80312ea:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80312ee:	270a      	movs	r7, #10
 80312f0:	4602      	mov	r2, r0
 80312f2:	fbb3 f6f7 	udiv	r6, r3, r7
 80312f6:	fb07 3116 	mls	r1, r7, r6, r3
 80312fa:	3130      	adds	r1, #48	@ 0x30
 80312fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8031300:	4619      	mov	r1, r3
 8031302:	2963      	cmp	r1, #99	@ 0x63
 8031304:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8031308:	4633      	mov	r3, r6
 803130a:	dcf1      	bgt.n	80312f0 <_svfprintf_r+0x630>
 803130c:	3330      	adds	r3, #48	@ 0x30
 803130e:	1e91      	subs	r1, r2, #2
 8031310:	f800 3c01 	strb.w	r3, [r0, #-1]
 8031314:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8031318:	460b      	mov	r3, r1
 803131a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803131e:	4283      	cmp	r3, r0
 8031320:	f0c0 8156 	bcc.w	80315d0 <_svfprintf_r+0x910>
 8031324:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8031328:	1a9b      	subs	r3, r3, r2
 803132a:	4281      	cmp	r1, r0
 803132c:	bf88      	it	hi
 803132e:	2300      	movhi	r3, #0
 8031330:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8031334:	441a      	add	r2, r3
 8031336:	ab22      	add	r3, sp, #136	@ 0x88
 8031338:	1ad3      	subs	r3, r2, r3
 803133a:	9a04      	ldr	r2, [sp, #16]
 803133c:	9318      	str	r3, [sp, #96]	@ 0x60
 803133e:	2a01      	cmp	r2, #1
 8031340:	eb03 0802 	add.w	r8, r3, r2
 8031344:	dc01      	bgt.n	803134a <_svfprintf_r+0x68a>
 8031346:	07ea      	lsls	r2, r5, #31
 8031348:	d501      	bpl.n	803134e <_svfprintf_r+0x68e>
 803134a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803134c:	4498      	add	r8, r3
 803134e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8031352:	2700      	movs	r7, #0
 8031354:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8031358:	9311      	str	r3, [sp, #68]	@ 0x44
 803135a:	9708      	str	r7, [sp, #32]
 803135c:	463e      	mov	r6, r7
 803135e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8031360:	2b00      	cmp	r3, #0
 8031362:	f040 818f 	bne.w	8031684 <_svfprintf_r+0x9c4>
 8031366:	2300      	movs	r3, #0
 8031368:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 803136a:	9310      	str	r3, [sp, #64]	@ 0x40
 803136c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803136e:	4543      	cmp	r3, r8
 8031370:	bfb8      	it	lt
 8031372:	4643      	movlt	r3, r8
 8031374:	9311      	str	r3, [sp, #68]	@ 0x44
 8031376:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803137a:	b113      	cbz	r3, 8031382 <_svfprintf_r+0x6c2>
 803137c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803137e:	3301      	adds	r3, #1
 8031380:	9311      	str	r3, [sp, #68]	@ 0x44
 8031382:	f015 0302 	ands.w	r3, r5, #2
 8031386:	931c      	str	r3, [sp, #112]	@ 0x70
 8031388:	bf1e      	ittt	ne
 803138a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 803138c:	3302      	addne	r3, #2
 803138e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8031390:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8031394:	931d      	str	r3, [sp, #116]	@ 0x74
 8031396:	d122      	bne.n	80313de <_svfprintf_r+0x71e>
 8031398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803139a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803139c:	1a9b      	subs	r3, r3, r2
 803139e:	2b00      	cmp	r3, #0
 80313a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80313a2:	dd1c      	ble.n	80313de <_svfprintf_r+0x71e>
 80313a4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80313a6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80313aa:	2810      	cmp	r0, #16
 80313ac:	489e      	ldr	r0, [pc, #632]	@ (8031628 <_svfprintf_r+0x968>)
 80313ae:	6020      	str	r0, [r4, #0]
 80313b0:	f102 0201 	add.w	r2, r2, #1
 80313b4:	f104 0108 	add.w	r1, r4, #8
 80313b8:	f300 8298 	bgt.w	80318ec <_svfprintf_r+0xc2c>
 80313bc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80313be:	6060      	str	r0, [r4, #4]
 80313c0:	4403      	add	r3, r0
 80313c2:	2a07      	cmp	r2, #7
 80313c4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80313c8:	f340 82a5 	ble.w	8031916 <_svfprintf_r+0xc56>
 80313cc:	9803      	ldr	r0, [sp, #12]
 80313ce:	aa26      	add	r2, sp, #152	@ 0x98
 80313d0:	4659      	mov	r1, fp
 80313d2:	f7fd fffd 	bl	802f3d0 <__ssprint_r>
 80313d6:	2800      	cmp	r0, #0
 80313d8:	f040 85ed 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 80313dc:	ac29      	add	r4, sp, #164	@ 0xa4
 80313de:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 80313e2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80313e4:	b16a      	cbz	r2, 8031402 <_svfprintf_r+0x742>
 80313e6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 80313ea:	6022      	str	r2, [r4, #0]
 80313ec:	2201      	movs	r2, #1
 80313ee:	4413      	add	r3, r2
 80313f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80313f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80313f4:	6062      	str	r2, [r4, #4]
 80313f6:	4413      	add	r3, r2
 80313f8:	2b07      	cmp	r3, #7
 80313fa:	9327      	str	r3, [sp, #156]	@ 0x9c
 80313fc:	f300 828d 	bgt.w	803191a <_svfprintf_r+0xc5a>
 8031400:	3408      	adds	r4, #8
 8031402:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8031404:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031406:	b162      	cbz	r2, 8031422 <_svfprintf_r+0x762>
 8031408:	aa1f      	add	r2, sp, #124	@ 0x7c
 803140a:	6022      	str	r2, [r4, #0]
 803140c:	2202      	movs	r2, #2
 803140e:	4413      	add	r3, r2
 8031410:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031412:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031414:	6062      	str	r2, [r4, #4]
 8031416:	3301      	adds	r3, #1
 8031418:	2b07      	cmp	r3, #7
 803141a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803141c:	f300 8287 	bgt.w	803192e <_svfprintf_r+0xc6e>
 8031420:	3408      	adds	r4, #8
 8031422:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8031424:	2b80      	cmp	r3, #128	@ 0x80
 8031426:	d122      	bne.n	803146e <_svfprintf_r+0x7ae>
 8031428:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803142a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803142c:	1a9b      	subs	r3, r3, r2
 803142e:	2b00      	cmp	r3, #0
 8031430:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031432:	dd1c      	ble.n	803146e <_svfprintf_r+0x7ae>
 8031434:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8031436:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803143a:	2810      	cmp	r0, #16
 803143c:	487b      	ldr	r0, [pc, #492]	@ (803162c <_svfprintf_r+0x96c>)
 803143e:	6020      	str	r0, [r4, #0]
 8031440:	f102 0201 	add.w	r2, r2, #1
 8031444:	f104 0108 	add.w	r1, r4, #8
 8031448:	f300 827b 	bgt.w	8031942 <_svfprintf_r+0xc82>
 803144c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803144e:	6060      	str	r0, [r4, #4]
 8031450:	4403      	add	r3, r0
 8031452:	2a07      	cmp	r2, #7
 8031454:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031458:	f340 8288 	ble.w	803196c <_svfprintf_r+0xcac>
 803145c:	9803      	ldr	r0, [sp, #12]
 803145e:	aa26      	add	r2, sp, #152	@ 0x98
 8031460:	4659      	mov	r1, fp
 8031462:	f7fd ffb5 	bl	802f3d0 <__ssprint_r>
 8031466:	2800      	cmp	r0, #0
 8031468:	f040 85a5 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 803146c:	ac29      	add	r4, sp, #164	@ 0xa4
 803146e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031470:	eba3 0308 	sub.w	r3, r3, r8
 8031474:	2b00      	cmp	r3, #0
 8031476:	9310      	str	r3, [sp, #64]	@ 0x40
 8031478:	dd1c      	ble.n	80314b4 <_svfprintf_r+0x7f4>
 803147a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803147c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031480:	2810      	cmp	r0, #16
 8031482:	486a      	ldr	r0, [pc, #424]	@ (803162c <_svfprintf_r+0x96c>)
 8031484:	6020      	str	r0, [r4, #0]
 8031486:	f102 0201 	add.w	r2, r2, #1
 803148a:	f104 0108 	add.w	r1, r4, #8
 803148e:	f300 826f 	bgt.w	8031970 <_svfprintf_r+0xcb0>
 8031492:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8031494:	6060      	str	r0, [r4, #4]
 8031496:	4403      	add	r3, r0
 8031498:	2a07      	cmp	r2, #7
 803149a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803149e:	f340 827c 	ble.w	803199a <_svfprintf_r+0xcda>
 80314a2:	9803      	ldr	r0, [sp, #12]
 80314a4:	aa26      	add	r2, sp, #152	@ 0x98
 80314a6:	4659      	mov	r1, fp
 80314a8:	f7fd ff92 	bl	802f3d0 <__ssprint_r>
 80314ac:	2800      	cmp	r0, #0
 80314ae:	f040 8582 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 80314b2:	ac29      	add	r4, sp, #164	@ 0xa4
 80314b4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80314b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80314b8:	05ea      	lsls	r2, r5, #23
 80314ba:	f100 8275 	bmi.w	80319a8 <_svfprintf_r+0xce8>
 80314be:	4443      	add	r3, r8
 80314c0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80314c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80314c4:	3301      	adds	r3, #1
 80314c6:	2b07      	cmp	r3, #7
 80314c8:	e9c4 9800 	strd	r9, r8, [r4]
 80314cc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80314ce:	f300 82b1 	bgt.w	8031a34 <_svfprintf_r+0xd74>
 80314d2:	3408      	adds	r4, #8
 80314d4:	076a      	lsls	r2, r5, #29
 80314d6:	f100 8550 	bmi.w	8031f7a <_svfprintf_r+0x12ba>
 80314da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80314de:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80314e0:	428a      	cmp	r2, r1
 80314e2:	bfac      	ite	ge
 80314e4:	189b      	addge	r3, r3, r2
 80314e6:	185b      	addlt	r3, r3, r1
 80314e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80314ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80314ec:	b13b      	cbz	r3, 80314fe <_svfprintf_r+0x83e>
 80314ee:	9803      	ldr	r0, [sp, #12]
 80314f0:	aa26      	add	r2, sp, #152	@ 0x98
 80314f2:	4659      	mov	r1, fp
 80314f4:	f7fd ff6c 	bl	802f3d0 <__ssprint_r>
 80314f8:	2800      	cmp	r0, #0
 80314fa:	f040 855c 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 80314fe:	2300      	movs	r3, #0
 8031500:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031502:	f1ba 0f00 	cmp.w	sl, #0
 8031506:	f040 8572 	bne.w	8031fee <_svfprintf_r+0x132e>
 803150a:	9e07      	ldr	r6, [sp, #28]
 803150c:	ac29      	add	r4, sp, #164	@ 0xa4
 803150e:	e0c6      	b.n	803169e <_svfprintf_r+0x9de>
 8031510:	f802 0c01 	strb.w	r0, [r2, #-1]
 8031514:	e6ac      	b.n	8031270 <_svfprintf_r+0x5b0>
 8031516:	f803 0b01 	strb.w	r0, [r3], #1
 803151a:	e676      	b.n	803120a <_svfprintf_r+0x54a>
 803151c:	9b08      	ldr	r3, [sp, #32]
 803151e:	2b46      	cmp	r3, #70	@ 0x46
 8031520:	d005      	beq.n	803152e <_svfprintf_r+0x86e>
 8031522:	2b45      	cmp	r3, #69	@ 0x45
 8031524:	d11a      	bne.n	803155c <_svfprintf_r+0x89c>
 8031526:	f108 0601 	add.w	r6, r8, #1
 803152a:	2102      	movs	r1, #2
 803152c:	e001      	b.n	8031532 <_svfprintf_r+0x872>
 803152e:	4646      	mov	r6, r8
 8031530:	2103      	movs	r1, #3
 8031532:	ab24      	add	r3, sp, #144	@ 0x90
 8031534:	9301      	str	r3, [sp, #4]
 8031536:	ab21      	add	r3, sp, #132	@ 0x84
 8031538:	9300      	str	r3, [sp, #0]
 803153a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 803153e:	ab20      	add	r3, sp, #128	@ 0x80
 8031540:	9803      	ldr	r0, [sp, #12]
 8031542:	4632      	mov	r2, r6
 8031544:	f7fc fd80 	bl	802e048 <_dtoa_r>
 8031548:	9b08      	ldr	r3, [sp, #32]
 803154a:	2b47      	cmp	r3, #71	@ 0x47
 803154c:	4681      	mov	r9, r0
 803154e:	d119      	bne.n	8031584 <_svfprintf_r+0x8c4>
 8031550:	07e8      	lsls	r0, r5, #31
 8031552:	d405      	bmi.n	8031560 <_svfprintf_r+0x8a0>
 8031554:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031556:	eba3 0309 	sub.w	r3, r3, r9
 803155a:	e69b      	b.n	8031294 <_svfprintf_r+0x5d4>
 803155c:	4646      	mov	r6, r8
 803155e:	e7e4      	b.n	803152a <_svfprintf_r+0x86a>
 8031560:	eb09 0706 	add.w	r7, r9, r6
 8031564:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8031568:	2200      	movs	r2, #0
 803156a:	2300      	movs	r3, #0
 803156c:	f7df fac4 	bl	8010af8 <__aeabi_dcmpeq>
 8031570:	b100      	cbz	r0, 8031574 <_svfprintf_r+0x8b4>
 8031572:	9724      	str	r7, [sp, #144]	@ 0x90
 8031574:	2230      	movs	r2, #48	@ 0x30
 8031576:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031578:	429f      	cmp	r7, r3
 803157a:	d9eb      	bls.n	8031554 <_svfprintf_r+0x894>
 803157c:	1c59      	adds	r1, r3, #1
 803157e:	9124      	str	r1, [sp, #144]	@ 0x90
 8031580:	701a      	strb	r2, [r3, #0]
 8031582:	e7f8      	b.n	8031576 <_svfprintf_r+0x8b6>
 8031584:	9b08      	ldr	r3, [sp, #32]
 8031586:	2b46      	cmp	r3, #70	@ 0x46
 8031588:	eb00 0706 	add.w	r7, r0, r6
 803158c:	d1ea      	bne.n	8031564 <_svfprintf_r+0x8a4>
 803158e:	7803      	ldrb	r3, [r0, #0]
 8031590:	2b30      	cmp	r3, #48	@ 0x30
 8031592:	d109      	bne.n	80315a8 <_svfprintf_r+0x8e8>
 8031594:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8031598:	2200      	movs	r2, #0
 803159a:	2300      	movs	r3, #0
 803159c:	f7df faac 	bl	8010af8 <__aeabi_dcmpeq>
 80315a0:	b910      	cbnz	r0, 80315a8 <_svfprintf_r+0x8e8>
 80315a2:	f1c6 0601 	rsb	r6, r6, #1
 80315a6:	9620      	str	r6, [sp, #128]	@ 0x80
 80315a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80315aa:	441f      	add	r7, r3
 80315ac:	e7da      	b.n	8031564 <_svfprintf_r+0x8a4>
 80315ae:	9b08      	ldr	r3, [sp, #32]
 80315b0:	2b46      	cmp	r3, #70	@ 0x46
 80315b2:	f47f ae7d 	bne.w	80312b0 <_svfprintf_r+0x5f0>
 80315b6:	f005 0301 	and.w	r3, r5, #1
 80315ba:	2e00      	cmp	r6, #0
 80315bc:	ea43 0308 	orr.w	r3, r3, r8
 80315c0:	dd25      	ble.n	803160e <_svfprintf_r+0x94e>
 80315c2:	b37b      	cbz	r3, 8031624 <_svfprintf_r+0x964>
 80315c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80315c6:	18f3      	adds	r3, r6, r3
 80315c8:	4498      	add	r8, r3
 80315ca:	2366      	movs	r3, #102	@ 0x66
 80315cc:	9306      	str	r3, [sp, #24]
 80315ce:	e033      	b.n	8031638 <_svfprintf_r+0x978>
 80315d0:	f813 7b01 	ldrb.w	r7, [r3], #1
 80315d4:	f806 7f01 	strb.w	r7, [r6, #1]!
 80315d8:	e6a1      	b.n	803131e <_svfprintf_r+0x65e>
 80315da:	b941      	cbnz	r1, 80315ee <_svfprintf_r+0x92e>
 80315dc:	2230      	movs	r2, #48	@ 0x30
 80315de:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 80315e2:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 80315e6:	3330      	adds	r3, #48	@ 0x30
 80315e8:	f802 3b01 	strb.w	r3, [r2], #1
 80315ec:	e6a3      	b.n	8031336 <_svfprintf_r+0x676>
 80315ee:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 80315f2:	e7f8      	b.n	80315e6 <_svfprintf_r+0x926>
 80315f4:	9b04      	ldr	r3, [sp, #16]
 80315f6:	429e      	cmp	r6, r3
 80315f8:	da0d      	bge.n	8031616 <_svfprintf_r+0x956>
 80315fa:	9b04      	ldr	r3, [sp, #16]
 80315fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80315fe:	2e00      	cmp	r6, #0
 8031600:	eb03 0802 	add.w	r8, r3, r2
 8031604:	dc0c      	bgt.n	8031620 <_svfprintf_r+0x960>
 8031606:	f1c6 0301 	rsb	r3, r6, #1
 803160a:	4498      	add	r8, r3
 803160c:	e008      	b.n	8031620 <_svfprintf_r+0x960>
 803160e:	b17b      	cbz	r3, 8031630 <_svfprintf_r+0x970>
 8031610:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031612:	3301      	adds	r3, #1
 8031614:	e7d8      	b.n	80315c8 <_svfprintf_r+0x908>
 8031616:	07eb      	lsls	r3, r5, #31
 8031618:	d521      	bpl.n	803165e <_svfprintf_r+0x99e>
 803161a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803161c:	eb06 0803 	add.w	r8, r6, r3
 8031620:	2367      	movs	r3, #103	@ 0x67
 8031622:	e7d3      	b.n	80315cc <_svfprintf_r+0x90c>
 8031624:	46b0      	mov	r8, r6
 8031626:	e7d0      	b.n	80315ca <_svfprintf_r+0x90a>
 8031628:	0803c246 	.word	0x0803c246
 803162c:	0803c236 	.word	0x0803c236
 8031630:	2366      	movs	r3, #102	@ 0x66
 8031632:	9306      	str	r3, [sp, #24]
 8031634:	f04f 0801 	mov.w	r8, #1
 8031638:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 803163c:	9308      	str	r3, [sp, #32]
 803163e:	d01f      	beq.n	8031680 <_svfprintf_r+0x9c0>
 8031640:	2700      	movs	r7, #0
 8031642:	2e00      	cmp	r6, #0
 8031644:	9708      	str	r7, [sp, #32]
 8031646:	f77f ae8a 	ble.w	803135e <_svfprintf_r+0x69e>
 803164a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803164c:	781b      	ldrb	r3, [r3, #0]
 803164e:	2bff      	cmp	r3, #255	@ 0xff
 8031650:	d107      	bne.n	8031662 <_svfprintf_r+0x9a2>
 8031652:	9b08      	ldr	r3, [sp, #32]
 8031654:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8031656:	443b      	add	r3, r7
 8031658:	fb02 8803 	mla	r8, r2, r3, r8
 803165c:	e67f      	b.n	803135e <_svfprintf_r+0x69e>
 803165e:	46b0      	mov	r8, r6
 8031660:	e7de      	b.n	8031620 <_svfprintf_r+0x960>
 8031662:	42b3      	cmp	r3, r6
 8031664:	daf5      	bge.n	8031652 <_svfprintf_r+0x992>
 8031666:	1af6      	subs	r6, r6, r3
 8031668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803166a:	785b      	ldrb	r3, [r3, #1]
 803166c:	b133      	cbz	r3, 803167c <_svfprintf_r+0x9bc>
 803166e:	9b08      	ldr	r3, [sp, #32]
 8031670:	3301      	adds	r3, #1
 8031672:	9308      	str	r3, [sp, #32]
 8031674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031676:	3301      	adds	r3, #1
 8031678:	9309      	str	r3, [sp, #36]	@ 0x24
 803167a:	e7e6      	b.n	803164a <_svfprintf_r+0x98a>
 803167c:	3701      	adds	r7, #1
 803167e:	e7e4      	b.n	803164a <_svfprintf_r+0x98a>
 8031680:	9f08      	ldr	r7, [sp, #32]
 8031682:	e66c      	b.n	803135e <_svfprintf_r+0x69e>
 8031684:	232d      	movs	r3, #45	@ 0x2d
 8031686:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803168a:	e66c      	b.n	8031366 <_svfprintf_r+0x6a6>
 803168c:	06af      	lsls	r7, r5, #26
 803168e:	d50a      	bpl.n	80316a6 <_svfprintf_r+0x9e6>
 8031690:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031692:	6833      	ldr	r3, [r6, #0]
 8031694:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8031696:	17d2      	asrs	r2, r2, #31
 8031698:	e9c3 1200 	strd	r1, r2, [r3]
 803169c:	3604      	adds	r6, #4
 803169e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80316a2:	f7ff bb46 	b.w	8030d32 <_svfprintf_r+0x72>
 80316a6:	06e8      	lsls	r0, r5, #27
 80316a8:	d503      	bpl.n	80316b2 <_svfprintf_r+0x9f2>
 80316aa:	6833      	ldr	r3, [r6, #0]
 80316ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80316ae:	601a      	str	r2, [r3, #0]
 80316b0:	e7f4      	b.n	803169c <_svfprintf_r+0x9dc>
 80316b2:	0669      	lsls	r1, r5, #25
 80316b4:	d503      	bpl.n	80316be <_svfprintf_r+0x9fe>
 80316b6:	6833      	ldr	r3, [r6, #0]
 80316b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80316ba:	801a      	strh	r2, [r3, #0]
 80316bc:	e7ee      	b.n	803169c <_svfprintf_r+0x9dc>
 80316be:	05aa      	lsls	r2, r5, #22
 80316c0:	d5f3      	bpl.n	80316aa <_svfprintf_r+0x9ea>
 80316c2:	6833      	ldr	r3, [r6, #0]
 80316c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80316c6:	701a      	strb	r2, [r3, #0]
 80316c8:	e7e8      	b.n	803169c <_svfprintf_r+0x9dc>
 80316ca:	f045 0510 	orr.w	r5, r5, #16
 80316ce:	f015 0320 	ands.w	r3, r5, #32
 80316d2:	d020      	beq.n	8031716 <_svfprintf_r+0xa56>
 80316d4:	3607      	adds	r6, #7
 80316d6:	f026 0307 	bic.w	r3, r6, #7
 80316da:	461a      	mov	r2, r3
 80316dc:	685f      	ldr	r7, [r3, #4]
 80316de:	f852 6b08 	ldr.w	r6, [r2], #8
 80316e2:	9207      	str	r2, [sp, #28]
 80316e4:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80316e8:	2300      	movs	r3, #0
 80316ea:	2200      	movs	r2, #0
 80316ec:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80316f0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80316f4:	f000 848c 	beq.w	8032010 <_svfprintf_r+0x1350>
 80316f8:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 80316fc:	9208      	str	r2, [sp, #32]
 80316fe:	ea56 0207 	orrs.w	r2, r6, r7
 8031702:	f040 848a 	bne.w	803201a <_svfprintf_r+0x135a>
 8031706:	f1b8 0f00 	cmp.w	r8, #0
 803170a:	f000 80db 	beq.w	80318c4 <_svfprintf_r+0xc04>
 803170e:	2b01      	cmp	r3, #1
 8031710:	f040 8486 	bne.w	8032020 <_svfprintf_r+0x1360>
 8031714:	e083      	b.n	803181e <_svfprintf_r+0xb5e>
 8031716:	4632      	mov	r2, r6
 8031718:	f015 0710 	ands.w	r7, r5, #16
 803171c:	f852 6b04 	ldr.w	r6, [r2], #4
 8031720:	9207      	str	r2, [sp, #28]
 8031722:	d001      	beq.n	8031728 <_svfprintf_r+0xa68>
 8031724:	461f      	mov	r7, r3
 8031726:	e7dd      	b.n	80316e4 <_svfprintf_r+0xa24>
 8031728:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 803172c:	d001      	beq.n	8031732 <_svfprintf_r+0xa72>
 803172e:	b2b6      	uxth	r6, r6
 8031730:	e7d8      	b.n	80316e4 <_svfprintf_r+0xa24>
 8031732:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8031736:	d0d5      	beq.n	80316e4 <_svfprintf_r+0xa24>
 8031738:	b2f6      	uxtb	r6, r6
 803173a:	e7f3      	b.n	8031724 <_svfprintf_r+0xa64>
 803173c:	4633      	mov	r3, r6
 803173e:	2278      	movs	r2, #120	@ 0x78
 8031740:	f853 6b04 	ldr.w	r6, [r3], #4
 8031744:	9307      	str	r3, [sp, #28]
 8031746:	f647 0330 	movw	r3, #30768	@ 0x7830
 803174a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 803174e:	4b94      	ldr	r3, [pc, #592]	@ (80319a0 <_svfprintf_r+0xce0>)
 8031750:	9319      	str	r3, [sp, #100]	@ 0x64
 8031752:	2700      	movs	r7, #0
 8031754:	f045 0502 	orr.w	r5, r5, #2
 8031758:	2302      	movs	r3, #2
 803175a:	9206      	str	r2, [sp, #24]
 803175c:	e7c5      	b.n	80316ea <_svfprintf_r+0xa2a>
 803175e:	4633      	mov	r3, r6
 8031760:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8031764:	f853 9b04 	ldr.w	r9, [r3], #4
 8031768:	9307      	str	r3, [sp, #28]
 803176a:	f04f 0600 	mov.w	r6, #0
 803176e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8031772:	d00f      	beq.n	8031794 <_svfprintf_r+0xad4>
 8031774:	4642      	mov	r2, r8
 8031776:	4631      	mov	r1, r6
 8031778:	4648      	mov	r0, r9
 803177a:	f7de fd41 	bl	8010200 <memchr>
 803177e:	4682      	mov	sl, r0
 8031780:	2800      	cmp	r0, #0
 8031782:	f43f ac81 	beq.w	8031088 <_svfprintf_r+0x3c8>
 8031786:	eba0 0809 	sub.w	r8, r0, r9
 803178a:	46b2      	mov	sl, r6
 803178c:	9610      	str	r6, [sp, #64]	@ 0x40
 803178e:	4637      	mov	r7, r6
 8031790:	9608      	str	r6, [sp, #32]
 8031792:	e5eb      	b.n	803136c <_svfprintf_r+0x6ac>
 8031794:	4648      	mov	r0, r9
 8031796:	f7de fd83 	bl	80102a0 <strlen>
 803179a:	46b2      	mov	sl, r6
 803179c:	4680      	mov	r8, r0
 803179e:	e473      	b.n	8031088 <_svfprintf_r+0x3c8>
 80317a0:	f045 0510 	orr.w	r5, r5, #16
 80317a4:	f015 0320 	ands.w	r3, r5, #32
 80317a8:	d009      	beq.n	80317be <_svfprintf_r+0xafe>
 80317aa:	3607      	adds	r6, #7
 80317ac:	f026 0307 	bic.w	r3, r6, #7
 80317b0:	461a      	mov	r2, r3
 80317b2:	685f      	ldr	r7, [r3, #4]
 80317b4:	f852 6b08 	ldr.w	r6, [r2], #8
 80317b8:	9207      	str	r2, [sp, #28]
 80317ba:	2301      	movs	r3, #1
 80317bc:	e795      	b.n	80316ea <_svfprintf_r+0xa2a>
 80317be:	4632      	mov	r2, r6
 80317c0:	f015 0710 	ands.w	r7, r5, #16
 80317c4:	f852 6b04 	ldr.w	r6, [r2], #4
 80317c8:	9207      	str	r2, [sp, #28]
 80317ca:	d001      	beq.n	80317d0 <_svfprintf_r+0xb10>
 80317cc:	461f      	mov	r7, r3
 80317ce:	e7f4      	b.n	80317ba <_svfprintf_r+0xafa>
 80317d0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80317d4:	d001      	beq.n	80317da <_svfprintf_r+0xb1a>
 80317d6:	b2b6      	uxth	r6, r6
 80317d8:	e7ef      	b.n	80317ba <_svfprintf_r+0xafa>
 80317da:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80317de:	d0ec      	beq.n	80317ba <_svfprintf_r+0xafa>
 80317e0:	b2f6      	uxtb	r6, r6
 80317e2:	e7f3      	b.n	80317cc <_svfprintf_r+0xb0c>
 80317e4:	4b6f      	ldr	r3, [pc, #444]	@ (80319a4 <_svfprintf_r+0xce4>)
 80317e6:	f7ff bb39 	b.w	8030e5c <_svfprintf_r+0x19c>
 80317ea:	4632      	mov	r2, r6
 80317ec:	f015 0710 	ands.w	r7, r5, #16
 80317f0:	f852 6b04 	ldr.w	r6, [r2], #4
 80317f4:	9207      	str	r2, [sp, #28]
 80317f6:	d002      	beq.n	80317fe <_svfprintf_r+0xb3e>
 80317f8:	461f      	mov	r7, r3
 80317fa:	f7ff bb3c 	b.w	8030e76 <_svfprintf_r+0x1b6>
 80317fe:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8031802:	d002      	beq.n	803180a <_svfprintf_r+0xb4a>
 8031804:	b2b6      	uxth	r6, r6
 8031806:	f7ff bb36 	b.w	8030e76 <_svfprintf_r+0x1b6>
 803180a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803180e:	f43f ab32 	beq.w	8030e76 <_svfprintf_r+0x1b6>
 8031812:	b2f6      	uxtb	r6, r6
 8031814:	e7f0      	b.n	80317f8 <_svfprintf_r+0xb38>
 8031816:	2e0a      	cmp	r6, #10
 8031818:	f177 0300 	sbcs.w	r3, r7, #0
 803181c:	d207      	bcs.n	803182e <_svfprintf_r+0xb6e>
 803181e:	3630      	adds	r6, #48	@ 0x30
 8031820:	b2f6      	uxtb	r6, r6
 8031822:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8031826:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 803182a:	f000 bc15 	b.w	8032058 <_svfprintf_r+0x1398>
 803182e:	2300      	movs	r3, #0
 8031830:	9304      	str	r3, [sp, #16]
 8031832:	9b08      	ldr	r3, [sp, #32]
 8031834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8031838:	ad52      	add	r5, sp, #328	@ 0x148
 803183a:	9310      	str	r3, [sp, #64]	@ 0x40
 803183c:	220a      	movs	r2, #10
 803183e:	2300      	movs	r3, #0
 8031840:	4630      	mov	r0, r6
 8031842:	4639      	mov	r1, r7
 8031844:	f7df fa88 	bl	8010d58 <__aeabi_uldivmod>
 8031848:	9b04      	ldr	r3, [sp, #16]
 803184a:	9011      	str	r0, [sp, #68]	@ 0x44
 803184c:	3301      	adds	r3, #1
 803184e:	9304      	str	r3, [sp, #16]
 8031850:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031852:	3230      	adds	r2, #48	@ 0x30
 8031854:	468a      	mov	sl, r1
 8031856:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803185a:	f805 2c01 	strb.w	r2, [r5, #-1]
 803185e:	b1d3      	cbz	r3, 8031896 <_svfprintf_r+0xbd6>
 8031860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031862:	9a04      	ldr	r2, [sp, #16]
 8031864:	781b      	ldrb	r3, [r3, #0]
 8031866:	429a      	cmp	r2, r3
 8031868:	d115      	bne.n	8031896 <_svfprintf_r+0xbd6>
 803186a:	2aff      	cmp	r2, #255	@ 0xff
 803186c:	d013      	beq.n	8031896 <_svfprintf_r+0xbd6>
 803186e:	2e0a      	cmp	r6, #10
 8031870:	f177 0300 	sbcs.w	r3, r7, #0
 8031874:	d30f      	bcc.n	8031896 <_svfprintf_r+0xbd6>
 8031876:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031878:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 803187a:	eba9 0903 	sub.w	r9, r9, r3
 803187e:	461a      	mov	r2, r3
 8031880:	4648      	mov	r0, r9
 8031882:	f7fb f8ec 	bl	802ca5e <strncpy>
 8031886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031888:	785b      	ldrb	r3, [r3, #1]
 803188a:	b11b      	cbz	r3, 8031894 <_svfprintf_r+0xbd4>
 803188c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803188e:	3301      	adds	r3, #1
 8031890:	9309      	str	r3, [sp, #36]	@ 0x24
 8031892:	2300      	movs	r3, #0
 8031894:	9304      	str	r3, [sp, #16]
 8031896:	2e0a      	cmp	r6, #10
 8031898:	f177 0700 	sbcs.w	r7, r7, #0
 803189c:	f0c0 83dc 	bcc.w	8032058 <_svfprintf_r+0x1398>
 80318a0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80318a2:	4657      	mov	r7, sl
 80318a4:	464d      	mov	r5, r9
 80318a6:	e7c9      	b.n	803183c <_svfprintf_r+0xb7c>
 80318a8:	f006 030f 	and.w	r3, r6, #15
 80318ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80318ae:	0936      	lsrs	r6, r6, #4
 80318b0:	5cd3      	ldrb	r3, [r2, r3]
 80318b2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80318b6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 80318ba:	093f      	lsrs	r7, r7, #4
 80318bc:	ea56 0307 	orrs.w	r3, r6, r7
 80318c0:	d1f2      	bne.n	80318a8 <_svfprintf_r+0xbe8>
 80318c2:	e3c9      	b.n	8032058 <_svfprintf_r+0x1398>
 80318c4:	b91b      	cbnz	r3, 80318ce <_svfprintf_r+0xc0e>
 80318c6:	07e9      	lsls	r1, r5, #31
 80318c8:	d501      	bpl.n	80318ce <_svfprintf_r+0xc0e>
 80318ca:	2630      	movs	r6, #48	@ 0x30
 80318cc:	e7a9      	b.n	8031822 <_svfprintf_r+0xb62>
 80318ce:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 80318d2:	e3c1      	b.n	8032058 <_svfprintf_r+0x1398>
 80318d4:	9b06      	ldr	r3, [sp, #24]
 80318d6:	2b00      	cmp	r3, #0
 80318d8:	f000 838f 	beq.w	8031ffa <_svfprintf_r+0x133a>
 80318dc:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80318e0:	2300      	movs	r3, #0
 80318e2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80318e6:	9607      	str	r6, [sp, #28]
 80318e8:	f7ff bb63 	b.w	8030fb2 <_svfprintf_r+0x2f2>
 80318ec:	2010      	movs	r0, #16
 80318ee:	4403      	add	r3, r0
 80318f0:	2a07      	cmp	r2, #7
 80318f2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80318f6:	6060      	str	r0, [r4, #4]
 80318f8:	dd08      	ble.n	803190c <_svfprintf_r+0xc4c>
 80318fa:	9803      	ldr	r0, [sp, #12]
 80318fc:	aa26      	add	r2, sp, #152	@ 0x98
 80318fe:	4659      	mov	r1, fp
 8031900:	f7fd fd66 	bl	802f3d0 <__ssprint_r>
 8031904:	2800      	cmp	r0, #0
 8031906:	f040 8356 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 803190a:	a929      	add	r1, sp, #164	@ 0xa4
 803190c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803190e:	3b10      	subs	r3, #16
 8031910:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031912:	460c      	mov	r4, r1
 8031914:	e546      	b.n	80313a4 <_svfprintf_r+0x6e4>
 8031916:	460c      	mov	r4, r1
 8031918:	e561      	b.n	80313de <_svfprintf_r+0x71e>
 803191a:	9803      	ldr	r0, [sp, #12]
 803191c:	aa26      	add	r2, sp, #152	@ 0x98
 803191e:	4659      	mov	r1, fp
 8031920:	f7fd fd56 	bl	802f3d0 <__ssprint_r>
 8031924:	2800      	cmp	r0, #0
 8031926:	f040 8346 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 803192a:	ac29      	add	r4, sp, #164	@ 0xa4
 803192c:	e569      	b.n	8031402 <_svfprintf_r+0x742>
 803192e:	9803      	ldr	r0, [sp, #12]
 8031930:	aa26      	add	r2, sp, #152	@ 0x98
 8031932:	4659      	mov	r1, fp
 8031934:	f7fd fd4c 	bl	802f3d0 <__ssprint_r>
 8031938:	2800      	cmp	r0, #0
 803193a:	f040 833c 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 803193e:	ac29      	add	r4, sp, #164	@ 0xa4
 8031940:	e56f      	b.n	8031422 <_svfprintf_r+0x762>
 8031942:	2010      	movs	r0, #16
 8031944:	4403      	add	r3, r0
 8031946:	2a07      	cmp	r2, #7
 8031948:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803194c:	6060      	str	r0, [r4, #4]
 803194e:	dd08      	ble.n	8031962 <_svfprintf_r+0xca2>
 8031950:	9803      	ldr	r0, [sp, #12]
 8031952:	aa26      	add	r2, sp, #152	@ 0x98
 8031954:	4659      	mov	r1, fp
 8031956:	f7fd fd3b 	bl	802f3d0 <__ssprint_r>
 803195a:	2800      	cmp	r0, #0
 803195c:	f040 832b 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031960:	a929      	add	r1, sp, #164	@ 0xa4
 8031962:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031964:	3b10      	subs	r3, #16
 8031966:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031968:	460c      	mov	r4, r1
 803196a:	e563      	b.n	8031434 <_svfprintf_r+0x774>
 803196c:	460c      	mov	r4, r1
 803196e:	e57e      	b.n	803146e <_svfprintf_r+0x7ae>
 8031970:	2010      	movs	r0, #16
 8031972:	4403      	add	r3, r0
 8031974:	2a07      	cmp	r2, #7
 8031976:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803197a:	6060      	str	r0, [r4, #4]
 803197c:	dd08      	ble.n	8031990 <_svfprintf_r+0xcd0>
 803197e:	9803      	ldr	r0, [sp, #12]
 8031980:	aa26      	add	r2, sp, #152	@ 0x98
 8031982:	4659      	mov	r1, fp
 8031984:	f7fd fd24 	bl	802f3d0 <__ssprint_r>
 8031988:	2800      	cmp	r0, #0
 803198a:	f040 8314 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 803198e:	a929      	add	r1, sp, #164	@ 0xa4
 8031990:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031992:	3b10      	subs	r3, #16
 8031994:	9310      	str	r3, [sp, #64]	@ 0x40
 8031996:	460c      	mov	r4, r1
 8031998:	e56f      	b.n	803147a <_svfprintf_r+0x7ba>
 803199a:	460c      	mov	r4, r1
 803199c:	e58a      	b.n	80314b4 <_svfprintf_r+0x7f4>
 803199e:	bf00      	nop
 80319a0:	0803bccf 	.word	0x0803bccf
 80319a4:	0803bce0 	.word	0x0803bce0
 80319a8:	9b06      	ldr	r3, [sp, #24]
 80319aa:	2b65      	cmp	r3, #101	@ 0x65
 80319ac:	f340 8246 	ble.w	8031e3c <_svfprintf_r+0x117c>
 80319b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80319b4:	2200      	movs	r2, #0
 80319b6:	2300      	movs	r3, #0
 80319b8:	f7df f89e 	bl	8010af8 <__aeabi_dcmpeq>
 80319bc:	2800      	cmp	r0, #0
 80319be:	d06a      	beq.n	8031a96 <_svfprintf_r+0xdd6>
 80319c0:	4b73      	ldr	r3, [pc, #460]	@ (8031b90 <_svfprintf_r+0xed0>)
 80319c2:	6023      	str	r3, [r4, #0]
 80319c4:	2301      	movs	r3, #1
 80319c6:	6063      	str	r3, [r4, #4]
 80319c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80319ca:	3301      	adds	r3, #1
 80319cc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80319ce:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80319d0:	3301      	adds	r3, #1
 80319d2:	2b07      	cmp	r3, #7
 80319d4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80319d6:	dc37      	bgt.n	8031a48 <_svfprintf_r+0xd88>
 80319d8:	3408      	adds	r4, #8
 80319da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80319dc:	9a04      	ldr	r2, [sp, #16]
 80319de:	4293      	cmp	r3, r2
 80319e0:	db02      	blt.n	80319e8 <_svfprintf_r+0xd28>
 80319e2:	07ef      	lsls	r7, r5, #31
 80319e4:	f57f ad76 	bpl.w	80314d4 <_svfprintf_r+0x814>
 80319e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80319ea:	6023      	str	r3, [r4, #0]
 80319ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80319ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80319f0:	6063      	str	r3, [r4, #4]
 80319f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80319f4:	4413      	add	r3, r2
 80319f6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80319f8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80319fa:	3301      	adds	r3, #1
 80319fc:	2b07      	cmp	r3, #7
 80319fe:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031a00:	dc2c      	bgt.n	8031a5c <_svfprintf_r+0xd9c>
 8031a02:	3408      	adds	r4, #8
 8031a04:	9b04      	ldr	r3, [sp, #16]
 8031a06:	1e5e      	subs	r6, r3, #1
 8031a08:	2e00      	cmp	r6, #0
 8031a0a:	f77f ad63 	ble.w	80314d4 <_svfprintf_r+0x814>
 8031a0e:	4f61      	ldr	r7, [pc, #388]	@ (8031b94 <_svfprintf_r+0xed4>)
 8031a10:	f04f 0810 	mov.w	r8, #16
 8031a14:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031a18:	2e10      	cmp	r6, #16
 8031a1a:	f103 0301 	add.w	r3, r3, #1
 8031a1e:	f104 0108 	add.w	r1, r4, #8
 8031a22:	6027      	str	r7, [r4, #0]
 8031a24:	dc24      	bgt.n	8031a70 <_svfprintf_r+0xdb0>
 8031a26:	6066      	str	r6, [r4, #4]
 8031a28:	2b07      	cmp	r3, #7
 8031a2a:	4416      	add	r6, r2
 8031a2c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8031a30:	f340 82a0 	ble.w	8031f74 <_svfprintf_r+0x12b4>
 8031a34:	9803      	ldr	r0, [sp, #12]
 8031a36:	aa26      	add	r2, sp, #152	@ 0x98
 8031a38:	4659      	mov	r1, fp
 8031a3a:	f7fd fcc9 	bl	802f3d0 <__ssprint_r>
 8031a3e:	2800      	cmp	r0, #0
 8031a40:	f040 82b9 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031a44:	ac29      	add	r4, sp, #164	@ 0xa4
 8031a46:	e545      	b.n	80314d4 <_svfprintf_r+0x814>
 8031a48:	9803      	ldr	r0, [sp, #12]
 8031a4a:	aa26      	add	r2, sp, #152	@ 0x98
 8031a4c:	4659      	mov	r1, fp
 8031a4e:	f7fd fcbf 	bl	802f3d0 <__ssprint_r>
 8031a52:	2800      	cmp	r0, #0
 8031a54:	f040 82af 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031a58:	ac29      	add	r4, sp, #164	@ 0xa4
 8031a5a:	e7be      	b.n	80319da <_svfprintf_r+0xd1a>
 8031a5c:	9803      	ldr	r0, [sp, #12]
 8031a5e:	aa26      	add	r2, sp, #152	@ 0x98
 8031a60:	4659      	mov	r1, fp
 8031a62:	f7fd fcb5 	bl	802f3d0 <__ssprint_r>
 8031a66:	2800      	cmp	r0, #0
 8031a68:	f040 82a5 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031a6c:	ac29      	add	r4, sp, #164	@ 0xa4
 8031a6e:	e7c9      	b.n	8031a04 <_svfprintf_r+0xd44>
 8031a70:	3210      	adds	r2, #16
 8031a72:	2b07      	cmp	r3, #7
 8031a74:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031a78:	f8c4 8004 	str.w	r8, [r4, #4]
 8031a7c:	dd08      	ble.n	8031a90 <_svfprintf_r+0xdd0>
 8031a7e:	9803      	ldr	r0, [sp, #12]
 8031a80:	aa26      	add	r2, sp, #152	@ 0x98
 8031a82:	4659      	mov	r1, fp
 8031a84:	f7fd fca4 	bl	802f3d0 <__ssprint_r>
 8031a88:	2800      	cmp	r0, #0
 8031a8a:	f040 8294 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031a8e:	a929      	add	r1, sp, #164	@ 0xa4
 8031a90:	3e10      	subs	r6, #16
 8031a92:	460c      	mov	r4, r1
 8031a94:	e7be      	b.n	8031a14 <_svfprintf_r+0xd54>
 8031a96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031a98:	2b00      	cmp	r3, #0
 8031a9a:	dc7d      	bgt.n	8031b98 <_svfprintf_r+0xed8>
 8031a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8031b90 <_svfprintf_r+0xed0>)
 8031a9e:	6023      	str	r3, [r4, #0]
 8031aa0:	2301      	movs	r3, #1
 8031aa2:	6063      	str	r3, [r4, #4]
 8031aa4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031aa6:	3301      	adds	r3, #1
 8031aa8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031aaa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031aac:	3301      	adds	r3, #1
 8031aae:	2b07      	cmp	r3, #7
 8031ab0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031ab2:	dc46      	bgt.n	8031b42 <_svfprintf_r+0xe82>
 8031ab4:	3408      	adds	r4, #8
 8031ab6:	9904      	ldr	r1, [sp, #16]
 8031ab8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031aba:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8031abc:	430b      	orrs	r3, r1
 8031abe:	f005 0101 	and.w	r1, r5, #1
 8031ac2:	430b      	orrs	r3, r1
 8031ac4:	f43f ad06 	beq.w	80314d4 <_svfprintf_r+0x814>
 8031ac8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031aca:	6023      	str	r3, [r4, #0]
 8031acc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031ace:	6063      	str	r3, [r4, #4]
 8031ad0:	441a      	add	r2, r3
 8031ad2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031ad4:	9228      	str	r2, [sp, #160]	@ 0xa0
 8031ad6:	3301      	adds	r3, #1
 8031ad8:	2b07      	cmp	r3, #7
 8031ada:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031adc:	dc3b      	bgt.n	8031b56 <_svfprintf_r+0xe96>
 8031ade:	f104 0308 	add.w	r3, r4, #8
 8031ae2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8031ae4:	2e00      	cmp	r6, #0
 8031ae6:	da1b      	bge.n	8031b20 <_svfprintf_r+0xe60>
 8031ae8:	4f2a      	ldr	r7, [pc, #168]	@ (8031b94 <_svfprintf_r+0xed4>)
 8031aea:	4276      	negs	r6, r6
 8031aec:	461a      	mov	r2, r3
 8031aee:	2410      	movs	r4, #16
 8031af0:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8031af4:	2e10      	cmp	r6, #16
 8031af6:	f101 0101 	add.w	r1, r1, #1
 8031afa:	f103 0308 	add.w	r3, r3, #8
 8031afe:	6017      	str	r7, [r2, #0]
 8031b00:	dc33      	bgt.n	8031b6a <_svfprintf_r+0xeaa>
 8031b02:	6056      	str	r6, [r2, #4]
 8031b04:	2907      	cmp	r1, #7
 8031b06:	4406      	add	r6, r0
 8031b08:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8031b0c:	dd08      	ble.n	8031b20 <_svfprintf_r+0xe60>
 8031b0e:	9803      	ldr	r0, [sp, #12]
 8031b10:	aa26      	add	r2, sp, #152	@ 0x98
 8031b12:	4659      	mov	r1, fp
 8031b14:	f7fd fc5c 	bl	802f3d0 <__ssprint_r>
 8031b18:	2800      	cmp	r0, #0
 8031b1a:	f040 824c 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031b1e:	ab29      	add	r3, sp, #164	@ 0xa4
 8031b20:	9a04      	ldr	r2, [sp, #16]
 8031b22:	9904      	ldr	r1, [sp, #16]
 8031b24:	605a      	str	r2, [r3, #4]
 8031b26:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8031b28:	f8c3 9000 	str.w	r9, [r3]
 8031b2c:	440a      	add	r2, r1
 8031b2e:	9228      	str	r2, [sp, #160]	@ 0xa0
 8031b30:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031b32:	3201      	adds	r2, #1
 8031b34:	2a07      	cmp	r2, #7
 8031b36:	9227      	str	r2, [sp, #156]	@ 0x9c
 8031b38:	f73f af7c 	bgt.w	8031a34 <_svfprintf_r+0xd74>
 8031b3c:	f103 0408 	add.w	r4, r3, #8
 8031b40:	e4c8      	b.n	80314d4 <_svfprintf_r+0x814>
 8031b42:	9803      	ldr	r0, [sp, #12]
 8031b44:	aa26      	add	r2, sp, #152	@ 0x98
 8031b46:	4659      	mov	r1, fp
 8031b48:	f7fd fc42 	bl	802f3d0 <__ssprint_r>
 8031b4c:	2800      	cmp	r0, #0
 8031b4e:	f040 8232 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031b52:	ac29      	add	r4, sp, #164	@ 0xa4
 8031b54:	e7af      	b.n	8031ab6 <_svfprintf_r+0xdf6>
 8031b56:	9803      	ldr	r0, [sp, #12]
 8031b58:	aa26      	add	r2, sp, #152	@ 0x98
 8031b5a:	4659      	mov	r1, fp
 8031b5c:	f7fd fc38 	bl	802f3d0 <__ssprint_r>
 8031b60:	2800      	cmp	r0, #0
 8031b62:	f040 8228 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031b66:	ab29      	add	r3, sp, #164	@ 0xa4
 8031b68:	e7bb      	b.n	8031ae2 <_svfprintf_r+0xe22>
 8031b6a:	3010      	adds	r0, #16
 8031b6c:	2907      	cmp	r1, #7
 8031b6e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8031b72:	6054      	str	r4, [r2, #4]
 8031b74:	dd08      	ble.n	8031b88 <_svfprintf_r+0xec8>
 8031b76:	9803      	ldr	r0, [sp, #12]
 8031b78:	aa26      	add	r2, sp, #152	@ 0x98
 8031b7a:	4659      	mov	r1, fp
 8031b7c:	f7fd fc28 	bl	802f3d0 <__ssprint_r>
 8031b80:	2800      	cmp	r0, #0
 8031b82:	f040 8218 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031b86:	ab29      	add	r3, sp, #164	@ 0xa4
 8031b88:	3e10      	subs	r6, #16
 8031b8a:	461a      	mov	r2, r3
 8031b8c:	e7b0      	b.n	8031af0 <_svfprintf_r+0xe30>
 8031b8e:	bf00      	nop
 8031b90:	0803bcf1 	.word	0x0803bcf1
 8031b94:	0803c236 	.word	0x0803c236
 8031b98:	9b04      	ldr	r3, [sp, #16]
 8031b9a:	444b      	add	r3, r9
 8031b9c:	9306      	str	r3, [sp, #24]
 8031b9e:	9b04      	ldr	r3, [sp, #16]
 8031ba0:	42b3      	cmp	r3, r6
 8031ba2:	bfa8      	it	ge
 8031ba4:	4633      	movge	r3, r6
 8031ba6:	2b00      	cmp	r3, #0
 8031ba8:	4698      	mov	r8, r3
 8031baa:	dd0b      	ble.n	8031bc4 <_svfprintf_r+0xf04>
 8031bac:	e9c4 9300 	strd	r9, r3, [r4]
 8031bb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031bb2:	4443      	add	r3, r8
 8031bb4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031bb6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031bb8:	3301      	adds	r3, #1
 8031bba:	2b07      	cmp	r3, #7
 8031bbc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031bbe:	f300 8089 	bgt.w	8031cd4 <_svfprintf_r+0x1014>
 8031bc2:	3408      	adds	r4, #8
 8031bc4:	4643      	mov	r3, r8
 8031bc6:	2b00      	cmp	r3, #0
 8031bc8:	bfac      	ite	ge
 8031bca:	eba6 0808 	subge.w	r8, r6, r8
 8031bce:	46b0      	movlt	r8, r6
 8031bd0:	f1b8 0f00 	cmp.w	r8, #0
 8031bd4:	dd1b      	ble.n	8031c0e <_svfprintf_r+0xf4e>
 8031bd6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031bda:	4897      	ldr	r0, [pc, #604]	@ (8031e38 <_svfprintf_r+0x1178>)
 8031bdc:	6020      	str	r0, [r4, #0]
 8031bde:	f1b8 0f10 	cmp.w	r8, #16
 8031be2:	f102 0201 	add.w	r2, r2, #1
 8031be6:	f104 0108 	add.w	r1, r4, #8
 8031bea:	dc7d      	bgt.n	8031ce8 <_svfprintf_r+0x1028>
 8031bec:	4443      	add	r3, r8
 8031bee:	2a07      	cmp	r2, #7
 8031bf0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031bf4:	f8c4 8004 	str.w	r8, [r4, #4]
 8031bf8:	f340 808a 	ble.w	8031d10 <_svfprintf_r+0x1050>
 8031bfc:	9803      	ldr	r0, [sp, #12]
 8031bfe:	aa26      	add	r2, sp, #152	@ 0x98
 8031c00:	4659      	mov	r1, fp
 8031c02:	f7fd fbe5 	bl	802f3d0 <__ssprint_r>
 8031c06:	2800      	cmp	r0, #0
 8031c08:	f040 81d5 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031c0c:	ac29      	add	r4, sp, #164	@ 0xa4
 8031c0e:	eb09 0806 	add.w	r8, r9, r6
 8031c12:	056e      	lsls	r6, r5, #21
 8031c14:	d508      	bpl.n	8031c28 <_svfprintf_r+0xf68>
 8031c16:	9b08      	ldr	r3, [sp, #32]
 8031c18:	2b00      	cmp	r3, #0
 8031c1a:	d17b      	bne.n	8031d14 <_svfprintf_r+0x1054>
 8031c1c:	2f00      	cmp	r7, #0
 8031c1e:	d17b      	bne.n	8031d18 <_svfprintf_r+0x1058>
 8031c20:	9b06      	ldr	r3, [sp, #24]
 8031c22:	4598      	cmp	r8, r3
 8031c24:	bf28      	it	cs
 8031c26:	4698      	movcs	r8, r3
 8031c28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031c2a:	9a04      	ldr	r2, [sp, #16]
 8031c2c:	4293      	cmp	r3, r2
 8031c2e:	db01      	blt.n	8031c34 <_svfprintf_r+0xf74>
 8031c30:	07e8      	lsls	r0, r5, #31
 8031c32:	d50e      	bpl.n	8031c52 <_svfprintf_r+0xf92>
 8031c34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031c36:	6023      	str	r3, [r4, #0]
 8031c38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031c3a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031c3c:	6063      	str	r3, [r4, #4]
 8031c3e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031c40:	4413      	add	r3, r2
 8031c42:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031c44:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031c46:	3301      	adds	r3, #1
 8031c48:	2b07      	cmp	r3, #7
 8031c4a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031c4c:	f300 80df 	bgt.w	8031e0e <_svfprintf_r+0x114e>
 8031c50:	3408      	adds	r4, #8
 8031c52:	9b04      	ldr	r3, [sp, #16]
 8031c54:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8031c56:	1bdf      	subs	r7, r3, r7
 8031c58:	9b06      	ldr	r3, [sp, #24]
 8031c5a:	eba3 0308 	sub.w	r3, r3, r8
 8031c5e:	429f      	cmp	r7, r3
 8031c60:	bfa8      	it	ge
 8031c62:	461f      	movge	r7, r3
 8031c64:	2f00      	cmp	r7, #0
 8031c66:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031c68:	dd0a      	ble.n	8031c80 <_svfprintf_r+0xfc0>
 8031c6a:	443b      	add	r3, r7
 8031c6c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031c6e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031c70:	3301      	adds	r3, #1
 8031c72:	2b07      	cmp	r3, #7
 8031c74:	e9c4 8700 	strd	r8, r7, [r4]
 8031c78:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031c7a:	f300 80d2 	bgt.w	8031e22 <_svfprintf_r+0x1162>
 8031c7e:	3408      	adds	r4, #8
 8031c80:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8031c82:	9b04      	ldr	r3, [sp, #16]
 8031c84:	2f00      	cmp	r7, #0
 8031c86:	eba3 0606 	sub.w	r6, r3, r6
 8031c8a:	bfa8      	it	ge
 8031c8c:	1bf6      	subge	r6, r6, r7
 8031c8e:	2e00      	cmp	r6, #0
 8031c90:	f77f ac20 	ble.w	80314d4 <_svfprintf_r+0x814>
 8031c94:	4f68      	ldr	r7, [pc, #416]	@ (8031e38 <_svfprintf_r+0x1178>)
 8031c96:	f04f 0810 	mov.w	r8, #16
 8031c9a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031c9e:	2e10      	cmp	r6, #16
 8031ca0:	f103 0301 	add.w	r3, r3, #1
 8031ca4:	f104 0108 	add.w	r1, r4, #8
 8031ca8:	6027      	str	r7, [r4, #0]
 8031caa:	f77f aebc 	ble.w	8031a26 <_svfprintf_r+0xd66>
 8031cae:	3210      	adds	r2, #16
 8031cb0:	2b07      	cmp	r3, #7
 8031cb2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031cb6:	f8c4 8004 	str.w	r8, [r4, #4]
 8031cba:	dd08      	ble.n	8031cce <_svfprintf_r+0x100e>
 8031cbc:	9803      	ldr	r0, [sp, #12]
 8031cbe:	aa26      	add	r2, sp, #152	@ 0x98
 8031cc0:	4659      	mov	r1, fp
 8031cc2:	f7fd fb85 	bl	802f3d0 <__ssprint_r>
 8031cc6:	2800      	cmp	r0, #0
 8031cc8:	f040 8175 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031ccc:	a929      	add	r1, sp, #164	@ 0xa4
 8031cce:	3e10      	subs	r6, #16
 8031cd0:	460c      	mov	r4, r1
 8031cd2:	e7e2      	b.n	8031c9a <_svfprintf_r+0xfda>
 8031cd4:	9803      	ldr	r0, [sp, #12]
 8031cd6:	aa26      	add	r2, sp, #152	@ 0x98
 8031cd8:	4659      	mov	r1, fp
 8031cda:	f7fd fb79 	bl	802f3d0 <__ssprint_r>
 8031cde:	2800      	cmp	r0, #0
 8031ce0:	f040 8169 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031ce4:	ac29      	add	r4, sp, #164	@ 0xa4
 8031ce6:	e76d      	b.n	8031bc4 <_svfprintf_r+0xf04>
 8031ce8:	2010      	movs	r0, #16
 8031cea:	4403      	add	r3, r0
 8031cec:	2a07      	cmp	r2, #7
 8031cee:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031cf2:	6060      	str	r0, [r4, #4]
 8031cf4:	dd08      	ble.n	8031d08 <_svfprintf_r+0x1048>
 8031cf6:	9803      	ldr	r0, [sp, #12]
 8031cf8:	aa26      	add	r2, sp, #152	@ 0x98
 8031cfa:	4659      	mov	r1, fp
 8031cfc:	f7fd fb68 	bl	802f3d0 <__ssprint_r>
 8031d00:	2800      	cmp	r0, #0
 8031d02:	f040 8158 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031d06:	a929      	add	r1, sp, #164	@ 0xa4
 8031d08:	f1a8 0810 	sub.w	r8, r8, #16
 8031d0c:	460c      	mov	r4, r1
 8031d0e:	e762      	b.n	8031bd6 <_svfprintf_r+0xf16>
 8031d10:	460c      	mov	r4, r1
 8031d12:	e77c      	b.n	8031c0e <_svfprintf_r+0xf4e>
 8031d14:	2f00      	cmp	r7, #0
 8031d16:	d04a      	beq.n	8031dae <_svfprintf_r+0x10ee>
 8031d18:	3f01      	subs	r7, #1
 8031d1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8031d1c:	6023      	str	r3, [r4, #0]
 8031d1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031d20:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8031d22:	6063      	str	r3, [r4, #4]
 8031d24:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031d26:	4413      	add	r3, r2
 8031d28:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031d2a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031d2c:	3301      	adds	r3, #1
 8031d2e:	2b07      	cmp	r3, #7
 8031d30:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031d32:	dc43      	bgt.n	8031dbc <_svfprintf_r+0x10fc>
 8031d34:	3408      	adds	r4, #8
 8031d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031d38:	781a      	ldrb	r2, [r3, #0]
 8031d3a:	9b06      	ldr	r3, [sp, #24]
 8031d3c:	eba3 0308 	sub.w	r3, r3, r8
 8031d40:	429a      	cmp	r2, r3
 8031d42:	bfa8      	it	ge
 8031d44:	461a      	movge	r2, r3
 8031d46:	2a00      	cmp	r2, #0
 8031d48:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031d4a:	4691      	mov	r9, r2
 8031d4c:	dd09      	ble.n	8031d62 <_svfprintf_r+0x10a2>
 8031d4e:	4413      	add	r3, r2
 8031d50:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031d52:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031d54:	3301      	adds	r3, #1
 8031d56:	2b07      	cmp	r3, #7
 8031d58:	e9c4 8200 	strd	r8, r2, [r4]
 8031d5c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031d5e:	dc37      	bgt.n	8031dd0 <_svfprintf_r+0x1110>
 8031d60:	3408      	adds	r4, #8
 8031d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031d64:	781e      	ldrb	r6, [r3, #0]
 8031d66:	f1b9 0f00 	cmp.w	r9, #0
 8031d6a:	bfa8      	it	ge
 8031d6c:	eba6 0609 	subge.w	r6, r6, r9
 8031d70:	2e00      	cmp	r6, #0
 8031d72:	dd18      	ble.n	8031da6 <_svfprintf_r+0x10e6>
 8031d74:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031d78:	482f      	ldr	r0, [pc, #188]	@ (8031e38 <_svfprintf_r+0x1178>)
 8031d7a:	6020      	str	r0, [r4, #0]
 8031d7c:	2e10      	cmp	r6, #16
 8031d7e:	f103 0301 	add.w	r3, r3, #1
 8031d82:	f104 0108 	add.w	r1, r4, #8
 8031d86:	dc2d      	bgt.n	8031de4 <_svfprintf_r+0x1124>
 8031d88:	6066      	str	r6, [r4, #4]
 8031d8a:	2b07      	cmp	r3, #7
 8031d8c:	4416      	add	r6, r2
 8031d8e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8031d92:	dd3a      	ble.n	8031e0a <_svfprintf_r+0x114a>
 8031d94:	9803      	ldr	r0, [sp, #12]
 8031d96:	aa26      	add	r2, sp, #152	@ 0x98
 8031d98:	4659      	mov	r1, fp
 8031d9a:	f7fd fb19 	bl	802f3d0 <__ssprint_r>
 8031d9e:	2800      	cmp	r0, #0
 8031da0:	f040 8109 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031da4:	ac29      	add	r4, sp, #164	@ 0xa4
 8031da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031da8:	781b      	ldrb	r3, [r3, #0]
 8031daa:	4498      	add	r8, r3
 8031dac:	e733      	b.n	8031c16 <_svfprintf_r+0xf56>
 8031dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031db0:	3b01      	subs	r3, #1
 8031db2:	9309      	str	r3, [sp, #36]	@ 0x24
 8031db4:	9b08      	ldr	r3, [sp, #32]
 8031db6:	3b01      	subs	r3, #1
 8031db8:	9308      	str	r3, [sp, #32]
 8031dba:	e7ae      	b.n	8031d1a <_svfprintf_r+0x105a>
 8031dbc:	9803      	ldr	r0, [sp, #12]
 8031dbe:	aa26      	add	r2, sp, #152	@ 0x98
 8031dc0:	4659      	mov	r1, fp
 8031dc2:	f7fd fb05 	bl	802f3d0 <__ssprint_r>
 8031dc6:	2800      	cmp	r0, #0
 8031dc8:	f040 80f5 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031dcc:	ac29      	add	r4, sp, #164	@ 0xa4
 8031dce:	e7b2      	b.n	8031d36 <_svfprintf_r+0x1076>
 8031dd0:	9803      	ldr	r0, [sp, #12]
 8031dd2:	aa26      	add	r2, sp, #152	@ 0x98
 8031dd4:	4659      	mov	r1, fp
 8031dd6:	f7fd fafb 	bl	802f3d0 <__ssprint_r>
 8031dda:	2800      	cmp	r0, #0
 8031ddc:	f040 80eb 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031de0:	ac29      	add	r4, sp, #164	@ 0xa4
 8031de2:	e7be      	b.n	8031d62 <_svfprintf_r+0x10a2>
 8031de4:	2010      	movs	r0, #16
 8031de6:	4402      	add	r2, r0
 8031de8:	2b07      	cmp	r3, #7
 8031dea:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031dee:	6060      	str	r0, [r4, #4]
 8031df0:	dd08      	ble.n	8031e04 <_svfprintf_r+0x1144>
 8031df2:	9803      	ldr	r0, [sp, #12]
 8031df4:	aa26      	add	r2, sp, #152	@ 0x98
 8031df6:	4659      	mov	r1, fp
 8031df8:	f7fd faea 	bl	802f3d0 <__ssprint_r>
 8031dfc:	2800      	cmp	r0, #0
 8031dfe:	f040 80da 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031e02:	a929      	add	r1, sp, #164	@ 0xa4
 8031e04:	3e10      	subs	r6, #16
 8031e06:	460c      	mov	r4, r1
 8031e08:	e7b4      	b.n	8031d74 <_svfprintf_r+0x10b4>
 8031e0a:	460c      	mov	r4, r1
 8031e0c:	e7cb      	b.n	8031da6 <_svfprintf_r+0x10e6>
 8031e0e:	9803      	ldr	r0, [sp, #12]
 8031e10:	aa26      	add	r2, sp, #152	@ 0x98
 8031e12:	4659      	mov	r1, fp
 8031e14:	f7fd fadc 	bl	802f3d0 <__ssprint_r>
 8031e18:	2800      	cmp	r0, #0
 8031e1a:	f040 80cc 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031e1e:	ac29      	add	r4, sp, #164	@ 0xa4
 8031e20:	e717      	b.n	8031c52 <_svfprintf_r+0xf92>
 8031e22:	9803      	ldr	r0, [sp, #12]
 8031e24:	aa26      	add	r2, sp, #152	@ 0x98
 8031e26:	4659      	mov	r1, fp
 8031e28:	f7fd fad2 	bl	802f3d0 <__ssprint_r>
 8031e2c:	2800      	cmp	r0, #0
 8031e2e:	f040 80c2 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031e32:	ac29      	add	r4, sp, #164	@ 0xa4
 8031e34:	e724      	b.n	8031c80 <_svfprintf_r+0xfc0>
 8031e36:	bf00      	nop
 8031e38:	0803c236 	.word	0x0803c236
 8031e3c:	9904      	ldr	r1, [sp, #16]
 8031e3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031e40:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031e42:	2901      	cmp	r1, #1
 8031e44:	f103 0301 	add.w	r3, r3, #1
 8031e48:	f102 0201 	add.w	r2, r2, #1
 8031e4c:	f104 0608 	add.w	r6, r4, #8
 8031e50:	dc02      	bgt.n	8031e58 <_svfprintf_r+0x1198>
 8031e52:	07e9      	lsls	r1, r5, #31
 8031e54:	f140 8083 	bpl.w	8031f5e <_svfprintf_r+0x129e>
 8031e58:	2101      	movs	r1, #1
 8031e5a:	2a07      	cmp	r2, #7
 8031e5c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031e60:	f8c4 9000 	str.w	r9, [r4]
 8031e64:	6061      	str	r1, [r4, #4]
 8031e66:	dd08      	ble.n	8031e7a <_svfprintf_r+0x11ba>
 8031e68:	9803      	ldr	r0, [sp, #12]
 8031e6a:	aa26      	add	r2, sp, #152	@ 0x98
 8031e6c:	4659      	mov	r1, fp
 8031e6e:	f7fd faaf 	bl	802f3d0 <__ssprint_r>
 8031e72:	2800      	cmp	r0, #0
 8031e74:	f040 809f 	bne.w	8031fb6 <_svfprintf_r+0x12f6>
 8031e78:	ae29      	add	r6, sp, #164	@ 0xa4
 8031e7a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031e7c:	6033      	str	r3, [r6, #0]
 8031e7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031e80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031e82:	6073      	str	r3, [r6, #4]
 8031e84:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031e86:	4413      	add	r3, r2
 8031e88:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031e8a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031e8c:	3301      	adds	r3, #1
 8031e8e:	2b07      	cmp	r3, #7
 8031e90:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031e92:	dc33      	bgt.n	8031efc <_svfprintf_r+0x123c>
 8031e94:	3608      	adds	r6, #8
 8031e96:	9b04      	ldr	r3, [sp, #16]
 8031e98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8031e9c:	1e5c      	subs	r4, r3, #1
 8031e9e:	2200      	movs	r2, #0
 8031ea0:	2300      	movs	r3, #0
 8031ea2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 8031ea6:	f7de fe27 	bl	8010af8 <__aeabi_dcmpeq>
 8031eaa:	2800      	cmp	r0, #0
 8031eac:	d12f      	bne.n	8031f0e <_svfprintf_r+0x124e>
 8031eae:	f109 0201 	add.w	r2, r9, #1
 8031eb2:	e9c6 2400 	strd	r2, r4, [r6]
 8031eb6:	9a04      	ldr	r2, [sp, #16]
 8031eb8:	f108 0301 	add.w	r3, r8, #1
 8031ebc:	3f01      	subs	r7, #1
 8031ebe:	4417      	add	r7, r2
 8031ec0:	2b07      	cmp	r3, #7
 8031ec2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8031ec6:	dd53      	ble.n	8031f70 <_svfprintf_r+0x12b0>
 8031ec8:	9803      	ldr	r0, [sp, #12]
 8031eca:	aa26      	add	r2, sp, #152	@ 0x98
 8031ecc:	4659      	mov	r1, fp
 8031ece:	f7fd fa7f 	bl	802f3d0 <__ssprint_r>
 8031ed2:	2800      	cmp	r0, #0
 8031ed4:	d16f      	bne.n	8031fb6 <_svfprintf_r+0x12f6>
 8031ed6:	ae29      	add	r6, sp, #164	@ 0xa4
 8031ed8:	ab22      	add	r3, sp, #136	@ 0x88
 8031eda:	6033      	str	r3, [r6, #0]
 8031edc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8031ede:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8031ee0:	6073      	str	r3, [r6, #4]
 8031ee2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031ee4:	4413      	add	r3, r2
 8031ee6:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031ee8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031eea:	3301      	adds	r3, #1
 8031eec:	2b07      	cmp	r3, #7
 8031eee:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031ef0:	f73f ada0 	bgt.w	8031a34 <_svfprintf_r+0xd74>
 8031ef4:	f106 0408 	add.w	r4, r6, #8
 8031ef8:	f7ff baec 	b.w	80314d4 <_svfprintf_r+0x814>
 8031efc:	9803      	ldr	r0, [sp, #12]
 8031efe:	aa26      	add	r2, sp, #152	@ 0x98
 8031f00:	4659      	mov	r1, fp
 8031f02:	f7fd fa65 	bl	802f3d0 <__ssprint_r>
 8031f06:	2800      	cmp	r0, #0
 8031f08:	d155      	bne.n	8031fb6 <_svfprintf_r+0x12f6>
 8031f0a:	ae29      	add	r6, sp, #164	@ 0xa4
 8031f0c:	e7c3      	b.n	8031e96 <_svfprintf_r+0x11d6>
 8031f0e:	9b04      	ldr	r3, [sp, #16]
 8031f10:	2b01      	cmp	r3, #1
 8031f12:	dde1      	ble.n	8031ed8 <_svfprintf_r+0x1218>
 8031f14:	4f57      	ldr	r7, [pc, #348]	@ (8032074 <_svfprintf_r+0x13b4>)
 8031f16:	f04f 0810 	mov.w	r8, #16
 8031f1a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031f1e:	2c10      	cmp	r4, #16
 8031f20:	f103 0301 	add.w	r3, r3, #1
 8031f24:	f106 0108 	add.w	r1, r6, #8
 8031f28:	6037      	str	r7, [r6, #0]
 8031f2a:	dc07      	bgt.n	8031f3c <_svfprintf_r+0x127c>
 8031f2c:	6074      	str	r4, [r6, #4]
 8031f2e:	2b07      	cmp	r3, #7
 8031f30:	4414      	add	r4, r2
 8031f32:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8031f36:	dcc7      	bgt.n	8031ec8 <_svfprintf_r+0x1208>
 8031f38:	460e      	mov	r6, r1
 8031f3a:	e7cd      	b.n	8031ed8 <_svfprintf_r+0x1218>
 8031f3c:	3210      	adds	r2, #16
 8031f3e:	2b07      	cmp	r3, #7
 8031f40:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031f44:	f8c6 8004 	str.w	r8, [r6, #4]
 8031f48:	dd06      	ble.n	8031f58 <_svfprintf_r+0x1298>
 8031f4a:	9803      	ldr	r0, [sp, #12]
 8031f4c:	aa26      	add	r2, sp, #152	@ 0x98
 8031f4e:	4659      	mov	r1, fp
 8031f50:	f7fd fa3e 	bl	802f3d0 <__ssprint_r>
 8031f54:	bb78      	cbnz	r0, 8031fb6 <_svfprintf_r+0x12f6>
 8031f56:	a929      	add	r1, sp, #164	@ 0xa4
 8031f58:	3c10      	subs	r4, #16
 8031f5a:	460e      	mov	r6, r1
 8031f5c:	e7dd      	b.n	8031f1a <_svfprintf_r+0x125a>
 8031f5e:	2101      	movs	r1, #1
 8031f60:	2a07      	cmp	r2, #7
 8031f62:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031f66:	f8c4 9000 	str.w	r9, [r4]
 8031f6a:	6061      	str	r1, [r4, #4]
 8031f6c:	ddb4      	ble.n	8031ed8 <_svfprintf_r+0x1218>
 8031f6e:	e7ab      	b.n	8031ec8 <_svfprintf_r+0x1208>
 8031f70:	3608      	adds	r6, #8
 8031f72:	e7b1      	b.n	8031ed8 <_svfprintf_r+0x1218>
 8031f74:	460c      	mov	r4, r1
 8031f76:	f7ff baad 	b.w	80314d4 <_svfprintf_r+0x814>
 8031f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031f7c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8031f7e:	1a9d      	subs	r5, r3, r2
 8031f80:	2d00      	cmp	r5, #0
 8031f82:	f77f aaaa 	ble.w	80314da <_svfprintf_r+0x81a>
 8031f86:	4e3c      	ldr	r6, [pc, #240]	@ (8032078 <_svfprintf_r+0x13b8>)
 8031f88:	2710      	movs	r7, #16
 8031f8a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031f8e:	2d10      	cmp	r5, #16
 8031f90:	f103 0301 	add.w	r3, r3, #1
 8031f94:	6026      	str	r6, [r4, #0]
 8031f96:	dc18      	bgt.n	8031fca <_svfprintf_r+0x130a>
 8031f98:	442a      	add	r2, r5
 8031f9a:	2b07      	cmp	r3, #7
 8031f9c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031fa0:	6065      	str	r5, [r4, #4]
 8031fa2:	f77f aa9a 	ble.w	80314da <_svfprintf_r+0x81a>
 8031fa6:	9803      	ldr	r0, [sp, #12]
 8031fa8:	aa26      	add	r2, sp, #152	@ 0x98
 8031faa:	4659      	mov	r1, fp
 8031fac:	f7fd fa10 	bl	802f3d0 <__ssprint_r>
 8031fb0:	2800      	cmp	r0, #0
 8031fb2:	f43f aa92 	beq.w	80314da <_svfprintf_r+0x81a>
 8031fb6:	f1ba 0f00 	cmp.w	sl, #0
 8031fba:	f43f a89a 	beq.w	80310f2 <_svfprintf_r+0x432>
 8031fbe:	9803      	ldr	r0, [sp, #12]
 8031fc0:	4651      	mov	r1, sl
 8031fc2:	f7fc fe43 	bl	802ec4c <_free_r>
 8031fc6:	f7ff b894 	b.w	80310f2 <_svfprintf_r+0x432>
 8031fca:	3210      	adds	r2, #16
 8031fcc:	2b07      	cmp	r3, #7
 8031fce:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031fd2:	6067      	str	r7, [r4, #4]
 8031fd4:	dc02      	bgt.n	8031fdc <_svfprintf_r+0x131c>
 8031fd6:	3408      	adds	r4, #8
 8031fd8:	3d10      	subs	r5, #16
 8031fda:	e7d6      	b.n	8031f8a <_svfprintf_r+0x12ca>
 8031fdc:	9803      	ldr	r0, [sp, #12]
 8031fde:	aa26      	add	r2, sp, #152	@ 0x98
 8031fe0:	4659      	mov	r1, fp
 8031fe2:	f7fd f9f5 	bl	802f3d0 <__ssprint_r>
 8031fe6:	2800      	cmp	r0, #0
 8031fe8:	d1e5      	bne.n	8031fb6 <_svfprintf_r+0x12f6>
 8031fea:	ac29      	add	r4, sp, #164	@ 0xa4
 8031fec:	e7f4      	b.n	8031fd8 <_svfprintf_r+0x1318>
 8031fee:	9803      	ldr	r0, [sp, #12]
 8031ff0:	4651      	mov	r1, sl
 8031ff2:	f7fc fe2b 	bl	802ec4c <_free_r>
 8031ff6:	f7ff ba88 	b.w	803150a <_svfprintf_r+0x84a>
 8031ffa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031ffc:	2b00      	cmp	r3, #0
 8031ffe:	f43f a878 	beq.w	80310f2 <_svfprintf_r+0x432>
 8032002:	9803      	ldr	r0, [sp, #12]
 8032004:	aa26      	add	r2, sp, #152	@ 0x98
 8032006:	4659      	mov	r1, fp
 8032008:	f7fd f9e2 	bl	802f3d0 <__ssprint_r>
 803200c:	f7ff b871 	b.w	80310f2 <_svfprintf_r+0x432>
 8032010:	ea56 0207 	orrs.w	r2, r6, r7
 8032014:	9508      	str	r5, [sp, #32]
 8032016:	f43f ab7a 	beq.w	803170e <_svfprintf_r+0xa4e>
 803201a:	2b01      	cmp	r3, #1
 803201c:	f43f abfb 	beq.w	8031816 <_svfprintf_r+0xb56>
 8032020:	2b02      	cmp	r3, #2
 8032022:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8032026:	f43f ac3f 	beq.w	80318a8 <_svfprintf_r+0xbe8>
 803202a:	f006 0307 	and.w	r3, r6, #7
 803202e:	08f6      	lsrs	r6, r6, #3
 8032030:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8032034:	08ff      	lsrs	r7, r7, #3
 8032036:	3330      	adds	r3, #48	@ 0x30
 8032038:	ea56 0107 	orrs.w	r1, r6, r7
 803203c:	464a      	mov	r2, r9
 803203e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8032042:	d1f2      	bne.n	803202a <_svfprintf_r+0x136a>
 8032044:	9908      	ldr	r1, [sp, #32]
 8032046:	07c8      	lsls	r0, r1, #31
 8032048:	d506      	bpl.n	8032058 <_svfprintf_r+0x1398>
 803204a:	2b30      	cmp	r3, #48	@ 0x30
 803204c:	d004      	beq.n	8032058 <_svfprintf_r+0x1398>
 803204e:	2330      	movs	r3, #48	@ 0x30
 8032050:	f809 3c01 	strb.w	r3, [r9, #-1]
 8032054:	f1a2 0902 	sub.w	r9, r2, #2
 8032058:	ab52      	add	r3, sp, #328	@ 0x148
 803205a:	9d08      	ldr	r5, [sp, #32]
 803205c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8032060:	f04f 0a00 	mov.w	sl, #0
 8032064:	eba3 0809 	sub.w	r8, r3, r9
 8032068:	4657      	mov	r7, sl
 803206a:	f8cd a020 	str.w	sl, [sp, #32]
 803206e:	4656      	mov	r6, sl
 8032070:	f7ff b97c 	b.w	803136c <_svfprintf_r+0x6ac>
 8032074:	0803c236 	.word	0x0803c236
 8032078:	0803c246 	.word	0x0803c246

0803207c <__swhatbuf_r>:
 803207c:	b570      	push	{r4, r5, r6, lr}
 803207e:	460c      	mov	r4, r1
 8032080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8032084:	2900      	cmp	r1, #0
 8032086:	b096      	sub	sp, #88	@ 0x58
 8032088:	4615      	mov	r5, r2
 803208a:	461e      	mov	r6, r3
 803208c:	da07      	bge.n	803209e <__swhatbuf_r+0x22>
 803208e:	89a1      	ldrh	r1, [r4, #12]
 8032090:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8032094:	d117      	bne.n	80320c6 <__swhatbuf_r+0x4a>
 8032096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803209a:	4608      	mov	r0, r1
 803209c:	e00f      	b.n	80320be <__swhatbuf_r+0x42>
 803209e:	466a      	mov	r2, sp
 80320a0:	f003 f892 	bl	80351c8 <_fstat_r>
 80320a4:	2800      	cmp	r0, #0
 80320a6:	dbf2      	blt.n	803208e <__swhatbuf_r+0x12>
 80320a8:	9901      	ldr	r1, [sp, #4]
 80320aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80320ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80320b2:	4259      	negs	r1, r3
 80320b4:	4159      	adcs	r1, r3
 80320b6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80320ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80320be:	6031      	str	r1, [r6, #0]
 80320c0:	602b      	str	r3, [r5, #0]
 80320c2:	b016      	add	sp, #88	@ 0x58
 80320c4:	bd70      	pop	{r4, r5, r6, pc}
 80320c6:	2100      	movs	r1, #0
 80320c8:	2340      	movs	r3, #64	@ 0x40
 80320ca:	e7e6      	b.n	803209a <__swhatbuf_r+0x1e>

080320cc <__smakebuf_r>:
 80320cc:	898b      	ldrh	r3, [r1, #12]
 80320ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80320d0:	079d      	lsls	r5, r3, #30
 80320d2:	4606      	mov	r6, r0
 80320d4:	460c      	mov	r4, r1
 80320d6:	d507      	bpl.n	80320e8 <__smakebuf_r+0x1c>
 80320d8:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80320dc:	6023      	str	r3, [r4, #0]
 80320de:	6123      	str	r3, [r4, #16]
 80320e0:	2301      	movs	r3, #1
 80320e2:	6163      	str	r3, [r4, #20]
 80320e4:	b003      	add	sp, #12
 80320e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80320e8:	ab01      	add	r3, sp, #4
 80320ea:	466a      	mov	r2, sp
 80320ec:	f7ff ffc6 	bl	803207c <__swhatbuf_r>
 80320f0:	9f00      	ldr	r7, [sp, #0]
 80320f2:	4605      	mov	r5, r0
 80320f4:	4639      	mov	r1, r7
 80320f6:	4630      	mov	r0, r6
 80320f8:	f7fc fec0 	bl	802ee7c <_malloc_r>
 80320fc:	b948      	cbnz	r0, 8032112 <__smakebuf_r+0x46>
 80320fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8032102:	059a      	lsls	r2, r3, #22
 8032104:	d4ee      	bmi.n	80320e4 <__smakebuf_r+0x18>
 8032106:	f023 0303 	bic.w	r3, r3, #3
 803210a:	f043 0302 	orr.w	r3, r3, #2
 803210e:	81a3      	strh	r3, [r4, #12]
 8032110:	e7e2      	b.n	80320d8 <__smakebuf_r+0xc>
 8032112:	89a3      	ldrh	r3, [r4, #12]
 8032114:	6020      	str	r0, [r4, #0]
 8032116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803211a:	81a3      	strh	r3, [r4, #12]
 803211c:	9b01      	ldr	r3, [sp, #4]
 803211e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8032122:	b15b      	cbz	r3, 803213c <__smakebuf_r+0x70>
 8032124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8032128:	4630      	mov	r0, r6
 803212a:	f003 f85f 	bl	80351ec <_isatty_r>
 803212e:	b128      	cbz	r0, 803213c <__smakebuf_r+0x70>
 8032130:	89a3      	ldrh	r3, [r4, #12]
 8032132:	f023 0303 	bic.w	r3, r3, #3
 8032136:	f043 0301 	orr.w	r3, r3, #1
 803213a:	81a3      	strh	r3, [r4, #12]
 803213c:	89a3      	ldrh	r3, [r4, #12]
 803213e:	431d      	orrs	r5, r3
 8032140:	81a5      	strh	r5, [r4, #12]
 8032142:	e7cf      	b.n	80320e4 <__smakebuf_r+0x18>

08032144 <__ssvfscanf_r>:
 8032144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032148:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 803214c:	461d      	mov	r5, r3
 803214e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8032152:	af02      	add	r7, sp, #8
 8032154:	049e      	lsls	r6, r3, #18
 8032156:	62b8      	str	r0, [r7, #40]	@ 0x28
 8032158:	460c      	mov	r4, r1
 803215a:	617a      	str	r2, [r7, #20]
 803215c:	d406      	bmi.n	803216c <__ssvfscanf_r+0x28>
 803215e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8032162:	818b      	strh	r3, [r1, #12]
 8032164:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8032166:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803216a:	664b      	str	r3, [r1, #100]	@ 0x64
 803216c:	2300      	movs	r3, #0
 803216e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8032172:	61bb      	str	r3, [r7, #24]
 8032174:	637b      	str	r3, [r7, #52]	@ 0x34
 8032176:	633b      	str	r3, [r7, #48]	@ 0x30
 8032178:	627b      	str	r3, [r7, #36]	@ 0x24
 803217a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803217e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8032182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8032184:	2b00      	cmp	r3, #0
 8032186:	f000 80d3 	beq.w	8032330 <__ssvfscanf_r+0x1ec>
 803218a:	4a84      	ldr	r2, [pc, #528]	@ (803239c <__ssvfscanf_r+0x258>)
 803218c:	5cd6      	ldrb	r6, [r2, r3]
 803218e:	f016 0608 	ands.w	r6, r6, #8
 8032192:	d01b      	beq.n	80321cc <__ssvfscanf_r+0x88>
 8032194:	6863      	ldr	r3, [r4, #4]
 8032196:	2b00      	cmp	r3, #0
 8032198:	dd08      	ble.n	80321ac <__ssvfscanf_r+0x68>
 803219a:	6823      	ldr	r3, [r4, #0]
 803219c:	497f      	ldr	r1, [pc, #508]	@ (803239c <__ssvfscanf_r+0x258>)
 803219e:	781a      	ldrb	r2, [r3, #0]
 80321a0:	5c8a      	ldrb	r2, [r1, r2]
 80321a2:	0710      	lsls	r0, r2, #28
 80321a4:	d409      	bmi.n	80321ba <__ssvfscanf_r+0x76>
 80321a6:	f8c7 8014 	str.w	r8, [r7, #20]
 80321aa:	e7e6      	b.n	803217a <__ssvfscanf_r+0x36>
 80321ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80321ae:	4621      	mov	r1, r4
 80321b0:	f7fd fe13 	bl	802fdda <__ssrefill_r>
 80321b4:	2800      	cmp	r0, #0
 80321b6:	d0f0      	beq.n	803219a <__ssvfscanf_r+0x56>
 80321b8:	e7f5      	b.n	80321a6 <__ssvfscanf_r+0x62>
 80321ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80321bc:	3201      	adds	r2, #1
 80321be:	633a      	str	r2, [r7, #48]	@ 0x30
 80321c0:	6862      	ldr	r2, [r4, #4]
 80321c2:	3301      	adds	r3, #1
 80321c4:	3a01      	subs	r2, #1
 80321c6:	6062      	str	r2, [r4, #4]
 80321c8:	6023      	str	r3, [r4, #0]
 80321ca:	e7e3      	b.n	8032194 <__ssvfscanf_r+0x50>
 80321cc:	2b25      	cmp	r3, #37	@ 0x25
 80321ce:	d163      	bne.n	8032298 <__ssvfscanf_r+0x154>
 80321d0:	62fe      	str	r6, [r7, #44]	@ 0x2c
 80321d2:	4642      	mov	r2, r8
 80321d4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80321d8:	617a      	str	r2, [r7, #20]
 80321da:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 80321de:	2a55      	cmp	r2, #85	@ 0x55
 80321e0:	f200 816e 	bhi.w	80324c0 <__ssvfscanf_r+0x37c>
 80321e4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80321e8:	016c0056 	.word	0x016c0056
 80321ec:	016c016c 	.word	0x016c016c
 80321f0:	007d016c 	.word	0x007d016c
 80321f4:	016c016c 	.word	0x016c016c
 80321f8:	016c016c 	.word	0x016c016c
 80321fc:	00b9016c 	.word	0x00b9016c
 8032200:	00b900b9 	.word	0x00b900b9
 8032204:	00b900b9 	.word	0x00b900b9
 8032208:	00b900b9 	.word	0x00b900b9
 803220c:	00b900b9 	.word	0x00b900b9
 8032210:	016c00b9 	.word	0x016c00b9
 8032214:	016c016c 	.word	0x016c016c
 8032218:	016c016c 	.word	0x016c016c
 803221c:	016c016c 	.word	0x016c016c
 8032220:	016c00e0 	.word	0x016c00e0
 8032224:	00c3010a 	.word	0x00c3010a
 8032228:	00e000e0 	.word	0x00e000e0
 803222c:	016c00e0 	.word	0x016c00e0
 8032230:	016c016c 	.word	0x016c016c
 8032234:	00a2016c 	.word	0x00a2016c
 8032238:	016c016c 	.word	0x016c016c
 803223c:	016c00c7 	.word	0x016c00c7
 8032240:	016c016c 	.word	0x016c016c
 8032244:	016c00fa 	.word	0x016c00fa
 8032248:	016c016c 	.word	0x016c016c
 803224c:	00d4016c 	.word	0x00d4016c
 8032250:	016c016c 	.word	0x016c016c
 8032254:	016c00ff 	.word	0x016c00ff
 8032258:	016c016c 	.word	0x016c016c
 803225c:	016c016c 	.word	0x016c016c
 8032260:	016c00e0 	.word	0x016c00e0
 8032264:	00c5010c 	.word	0x00c5010c
 8032268:	00e000e0 	.word	0x00e000e0
 803226c:	009400e0 	.word	0x009400e0
 8032270:	00a20130 	.word	0x00a20130
 8032274:	0085016c 	.word	0x0085016c
 8032278:	011400ac 	.word	0x011400ac
 803227c:	011100c9 	.word	0x011100c9
 8032280:	016c016c 	.word	0x016c016c
 8032284:	00a900fc 	.word	0x00a900fc
 8032288:	016c00d0 	.word	0x016c00d0
 803228c:	00d4016c 	.word	0x00d4016c
 8032290:	00a9016c 	.word	0x00a9016c
 8032294:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8032298:	6863      	ldr	r3, [r4, #4]
 803229a:	2b00      	cmp	r3, #0
 803229c:	dd0e      	ble.n	80322bc <__ssvfscanf_r+0x178>
 803229e:	6823      	ldr	r3, [r4, #0]
 80322a0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80322a4:	7819      	ldrb	r1, [r3, #0]
 80322a6:	4291      	cmp	r1, r2
 80322a8:	d142      	bne.n	8032330 <__ssvfscanf_r+0x1ec>
 80322aa:	3301      	adds	r3, #1
 80322ac:	6862      	ldr	r2, [r4, #4]
 80322ae:	6023      	str	r3, [r4, #0]
 80322b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80322b2:	3a01      	subs	r2, #1
 80322b4:	3301      	adds	r3, #1
 80322b6:	6062      	str	r2, [r4, #4]
 80322b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80322ba:	e774      	b.n	80321a6 <__ssvfscanf_r+0x62>
 80322bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80322be:	4621      	mov	r1, r4
 80322c0:	f7fd fd8b 	bl	802fdda <__ssrefill_r>
 80322c4:	2800      	cmp	r0, #0
 80322c6:	d0ea      	beq.n	803229e <__ssvfscanf_r+0x15a>
 80322c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80322ca:	b113      	cbz	r3, 80322d2 <__ssvfscanf_r+0x18e>
 80322cc:	89a3      	ldrh	r3, [r4, #12]
 80322ce:	065b      	lsls	r3, r3, #25
 80322d0:	d52e      	bpl.n	8032330 <__ssvfscanf_r+0x1ec>
 80322d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80322d4:	2b00      	cmp	r3, #0
 80322d6:	f041 809d 	bne.w	8033414 <__ssvfscanf_r+0x12d0>
 80322da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80322de:	627b      	str	r3, [r7, #36]	@ 0x24
 80322e0:	e0f9      	b.n	80324d6 <__ssvfscanf_r+0x392>
 80322e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80322e4:	4333      	orrs	r3, r6
 80322e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80322e8:	d122      	bne.n	8032330 <__ssvfscanf_r+0x1ec>
 80322ea:	2610      	movs	r6, #16
 80322ec:	f8d7 8014 	ldr.w	r8, [r7, #20]
 80322f0:	e76f      	b.n	80321d2 <__ssvfscanf_r+0x8e>
 80322f2:	0731      	lsls	r1, r6, #28
 80322f4:	d11c      	bne.n	8032330 <__ssvfscanf_r+0x1ec>
 80322f6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80322fa:	2b6c      	cmp	r3, #108	@ 0x6c
 80322fc:	d105      	bne.n	803230a <__ssvfscanf_r+0x1c6>
 80322fe:	f108 0302 	add.w	r3, r8, #2
 8032302:	617b      	str	r3, [r7, #20]
 8032304:	f046 0602 	orr.w	r6, r6, #2
 8032308:	e7f0      	b.n	80322ec <__ssvfscanf_r+0x1a8>
 803230a:	f046 0601 	orr.w	r6, r6, #1
 803230e:	e7ed      	b.n	80322ec <__ssvfscanf_r+0x1a8>
 8032310:	0732      	lsls	r2, r6, #28
 8032312:	d10d      	bne.n	8032330 <__ssvfscanf_r+0x1ec>
 8032314:	f898 3001 	ldrb.w	r3, [r8, #1]
 8032318:	2b68      	cmp	r3, #104	@ 0x68
 803231a:	bf03      	ittte	eq
 803231c:	f108 0302 	addeq.w	r3, r8, #2
 8032320:	617b      	streq	r3, [r7, #20]
 8032322:	f046 0608 	orreq.w	r6, r6, #8
 8032326:	f046 0604 	orrne.w	r6, r6, #4
 803232a:	e7df      	b.n	80322ec <__ssvfscanf_r+0x1a8>
 803232c:	0733      	lsls	r3, r6, #28
 803232e:	d0e9      	beq.n	8032304 <__ssvfscanf_r+0x1c0>
 8032330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032332:	2b00      	cmp	r3, #0
 8032334:	f000 80cf 	beq.w	80324d6 <__ssvfscanf_r+0x392>
 8032338:	e0c8      	b.n	80324cc <__ssvfscanf_r+0x388>
 803233a:	0730      	lsls	r0, r6, #28
 803233c:	d0d6      	beq.n	80322ec <__ssvfscanf_r+0x1a8>
 803233e:	e7f7      	b.n	8032330 <__ssvfscanf_r+0x1ec>
 8032340:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8032344:	d1f4      	bne.n	8032330 <__ssvfscanf_r+0x1ec>
 8032346:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8032348:	b922      	cbnz	r2, 8032354 <__ssvfscanf_r+0x210>
 803234a:	b082      	sub	sp, #8
 803234c:	aa02      	add	r2, sp, #8
 803234e:	e9c2 3300 	strd	r3, r3, [r2]
 8032352:	637a      	str	r2, [r7, #52]	@ 0x34
 8032354:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 8032358:	e7c8      	b.n	80322ec <__ssvfscanf_r+0x1a8>
 803235a:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 803235e:	d1e7      	bne.n	8032330 <__ssvfscanf_r+0x1ec>
 8032360:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032362:	220a      	movs	r2, #10
 8032364:	fb02 3301 	mla	r3, r2, r1, r3
 8032368:	3b30      	subs	r3, #48	@ 0x30
 803236a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803236c:	e7be      	b.n	80322ec <__ssvfscanf_r+0x1a8>
 803236e:	f046 0601 	orr.w	r6, r6, #1
 8032372:	4b0b      	ldr	r3, [pc, #44]	@ (80323a0 <__ssvfscanf_r+0x25c>)
 8032374:	e009      	b.n	803238a <__ssvfscanf_r+0x246>
 8032376:	f046 0601 	orr.w	r6, r6, #1
 803237a:	4b0a      	ldr	r3, [pc, #40]	@ (80323a4 <__ssvfscanf_r+0x260>)
 803237c:	61bb      	str	r3, [r7, #24]
 803237e:	2308      	movs	r3, #8
 8032380:	61fb      	str	r3, [r7, #28]
 8032382:	f04f 0803 	mov.w	r8, #3
 8032386:	e011      	b.n	80323ac <__ssvfscanf_r+0x268>
 8032388:	4b06      	ldr	r3, [pc, #24]	@ (80323a4 <__ssvfscanf_r+0x260>)
 803238a:	61bb      	str	r3, [r7, #24]
 803238c:	230a      	movs	r3, #10
 803238e:	e7f7      	b.n	8032380 <__ssvfscanf_r+0x23c>
 8032390:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8032394:	4b03      	ldr	r3, [pc, #12]	@ (80323a4 <__ssvfscanf_r+0x260>)
 8032396:	61bb      	str	r3, [r7, #24]
 8032398:	2310      	movs	r3, #16
 803239a:	e7f1      	b.n	8032380 <__ssvfscanf_r+0x23c>
 803239c:	0803c07d 	.word	0x0803c07d
 80323a0:	0802c0d9 	.word	0x0802c0d9
 80323a4:	08034ed9 	.word	0x08034ed9
 80323a8:	f04f 0804 	mov.w	r8, #4
 80323ac:	6863      	ldr	r3, [r4, #4]
 80323ae:	2b00      	cmp	r3, #0
 80323b0:	dd4e      	ble.n	8032450 <__ssvfscanf_r+0x30c>
 80323b2:	0673      	lsls	r3, r6, #25
 80323b4:	d407      	bmi.n	80323c6 <__ssvfscanf_r+0x282>
 80323b6:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 80326b4 <__ssvfscanf_r+0x570>
 80323ba:	6823      	ldr	r3, [r4, #0]
 80323bc:	781a      	ldrb	r2, [r3, #0]
 80323be:	f819 2002 	ldrb.w	r2, [r9, r2]
 80323c2:	0710      	lsls	r0, r2, #28
 80323c4:	d44b      	bmi.n	803245e <__ssvfscanf_r+0x31a>
 80323c6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80323ca:	f1b8 0f03 	cmp.w	r8, #3
 80323ce:	d858      	bhi.n	8032482 <__ssvfscanf_r+0x33e>
 80323d0:	e8df f018 	tbh	[pc, r8, lsl #1]
 80323d4:	037801c1 	.word	0x037801c1
 80323d8:	05f30514 	.word	0x05f30514
 80323dc:	f046 0601 	orr.w	r6, r6, #1
 80323e0:	f04f 0802 	mov.w	r8, #2
 80323e4:	e7e2      	b.n	80323ac <__ssvfscanf_r+0x268>
 80323e6:	6979      	ldr	r1, [r7, #20]
 80323e8:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80323ec:	f001 fd1d 	bl	8033e2a <__sccl>
 80323f0:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 80323f4:	6178      	str	r0, [r7, #20]
 80323f6:	f04f 0801 	mov.w	r8, #1
 80323fa:	e7d7      	b.n	80323ac <__ssvfscanf_r+0x268>
 80323fc:	f046 0601 	orr.w	r6, r6, #1
 8032400:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8032404:	f04f 0800 	mov.w	r8, #0
 8032408:	e7d0      	b.n	80323ac <__ssvfscanf_r+0x268>
 803240a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 803240e:	e7c1      	b.n	8032394 <__ssvfscanf_r+0x250>
 8032410:	06f1      	lsls	r1, r6, #27
 8032412:	f53f aeb2 	bmi.w	803217a <__ssvfscanf_r+0x36>
 8032416:	0732      	lsls	r2, r6, #28
 8032418:	f855 3b04 	ldr.w	r3, [r5], #4
 803241c:	d502      	bpl.n	8032424 <__ssvfscanf_r+0x2e0>
 803241e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032420:	701a      	strb	r2, [r3, #0]
 8032422:	e6aa      	b.n	803217a <__ssvfscanf_r+0x36>
 8032424:	0770      	lsls	r0, r6, #29
 8032426:	d502      	bpl.n	803242e <__ssvfscanf_r+0x2ea>
 8032428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803242a:	801a      	strh	r2, [r3, #0]
 803242c:	e6a5      	b.n	803217a <__ssvfscanf_r+0x36>
 803242e:	07f1      	lsls	r1, r6, #31
 8032430:	d502      	bpl.n	8032438 <__ssvfscanf_r+0x2f4>
 8032432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032434:	601a      	str	r2, [r3, #0]
 8032436:	e6a0      	b.n	803217a <__ssvfscanf_r+0x36>
 8032438:	07b2      	lsls	r2, r6, #30
 803243a:	d5fa      	bpl.n	8032432 <__ssvfscanf_r+0x2ee>
 803243c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803243e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8032440:	17d2      	asrs	r2, r2, #31
 8032442:	e9c3 1200 	strd	r1, r2, [r3]
 8032446:	e698      	b.n	803217a <__ssvfscanf_r+0x36>
 8032448:	4b99      	ldr	r3, [pc, #612]	@ (80326b0 <__ssvfscanf_r+0x56c>)
 803244a:	61bb      	str	r3, [r7, #24]
 803244c:	2300      	movs	r3, #0
 803244e:	e797      	b.n	8032380 <__ssvfscanf_r+0x23c>
 8032450:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032452:	4621      	mov	r1, r4
 8032454:	f7fd fcc1 	bl	802fdda <__ssrefill_r>
 8032458:	2800      	cmp	r0, #0
 803245a:	d0aa      	beq.n	80323b2 <__ssvfscanf_r+0x26e>
 803245c:	e734      	b.n	80322c8 <__ssvfscanf_r+0x184>
 803245e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032460:	3201      	adds	r2, #1
 8032462:	633a      	str	r2, [r7, #48]	@ 0x30
 8032464:	6862      	ldr	r2, [r4, #4]
 8032466:	3a01      	subs	r2, #1
 8032468:	2a00      	cmp	r2, #0
 803246a:	6062      	str	r2, [r4, #4]
 803246c:	dd02      	ble.n	8032474 <__ssvfscanf_r+0x330>
 803246e:	3301      	adds	r3, #1
 8032470:	6023      	str	r3, [r4, #0]
 8032472:	e7a2      	b.n	80323ba <__ssvfscanf_r+0x276>
 8032474:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032476:	4621      	mov	r1, r4
 8032478:	f7fd fcaf 	bl	802fdda <__ssrefill_r>
 803247c:	2800      	cmp	r0, #0
 803247e:	d09c      	beq.n	80323ba <__ssvfscanf_r+0x276>
 8032480:	e722      	b.n	80322c8 <__ssvfscanf_r+0x184>
 8032482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032484:	2b01      	cmp	r3, #1
 8032486:	bf38      	it	cc
 8032488:	2301      	movcc	r3, #1
 803248a:	4698      	mov	r8, r3
 803248c:	f016 0301 	ands.w	r3, r6, #1
 8032490:	f006 0b10 	and.w	fp, r6, #16
 8032494:	f000 80eb 	beq.w	803266e <__ssvfscanf_r+0x52a>
 8032498:	f1bb 0f00 	cmp.w	fp, #0
 803249c:	f040 8085 	bne.w	80325aa <__ssvfscanf_r+0x466>
 80324a0:	462b      	mov	r3, r5
 80324a2:	0631      	lsls	r1, r6, #24
 80324a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80324a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80324aa:	f140 8085 	bpl.w	80325b8 <__ssvfscanf_r+0x474>
 80324ae:	b13d      	cbz	r5, 80324c0 <__ssvfscanf_r+0x37c>
 80324b0:	2080      	movs	r0, #128	@ 0x80
 80324b2:	f7fc fcd3 	bl	802ee5c <malloc>
 80324b6:	4606      	mov	r6, r0
 80324b8:	b998      	cbnz	r0, 80324e2 <__ssvfscanf_r+0x39e>
 80324ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80324be:	627b      	str	r3, [r7, #36]	@ 0x24
 80324c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80324c2:	b143      	cbz	r3, 80324d6 <__ssvfscanf_r+0x392>
 80324c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80324c6:	3301      	adds	r3, #1
 80324c8:	f000 87a4 	beq.w	8033414 <__ssvfscanf_r+0x12d0>
 80324cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80324ce:	6818      	ldr	r0, [r3, #0]
 80324d0:	b108      	cbz	r0, 80324d6 <__ssvfscanf_r+0x392>
 80324d2:	f7fc fccb 	bl	802ee6c <free>
 80324d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80324d8:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 80324dc:	46bd      	mov	sp, r7
 80324de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80324e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80324e4:	6028      	str	r0, [r5, #0]
 80324e6:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80324ea:	889b      	ldrh	r3, [r3, #4]
 80324ec:	4599      	cmp	r9, r3
 80324ee:	d314      	bcc.n	803251a <__ssvfscanf_r+0x3d6>
 80324f0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80324f4:	4293      	cmp	r3, r2
 80324f6:	f200 878d 	bhi.w	8033414 <__ssvfscanf_r+0x12d0>
 80324fa:	3308      	adds	r3, #8
 80324fc:	fa1f fa83 	uxth.w	sl, r3
 8032500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032502:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8032506:	6818      	ldr	r0, [r3, #0]
 8032508:	f001 fc32 	bl	8033d70 <realloc>
 803250c:	2800      	cmp	r0, #0
 803250e:	f000 8781 	beq.w	8033414 <__ssvfscanf_r+0x12d0>
 8032512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032514:	6018      	str	r0, [r3, #0]
 8032516:	f8a3 a004 	strh.w	sl, [r3, #4]
 803251a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803251c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803251e:	681b      	ldr	r3, [r3, #0]
 8032520:	f109 0201 	add.w	r2, r9, #1
 8032524:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8032528:	46aa      	mov	sl, r5
 803252a:	80ca      	strh	r2, [r1, #6]
 803252c:	4635      	mov	r5, r6
 803252e:	f04f 0920 	mov.w	r9, #32
 8032532:	2200      	movs	r2, #0
 8032534:	613a      	str	r2, [r7, #16]
 8032536:	f7fb fbd3 	bl	802dce0 <__locale_mb_cur_max>
 803253a:	693a      	ldr	r2, [r7, #16]
 803253c:	4290      	cmp	r0, r2
 803253e:	f43f aec3 	beq.w	80322c8 <__ssvfscanf_r+0x184>
 8032542:	6821      	ldr	r1, [r4, #0]
 8032544:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 8032548:	f811 0b01 	ldrb.w	r0, [r1], #1
 803254c:	f80c 0002 	strb.w	r0, [ip, r2]
 8032550:	1c53      	adds	r3, r2, #1
 8032552:	6862      	ldr	r2, [r4, #4]
 8032554:	3a01      	subs	r2, #1
 8032556:	e9c4 1200 	strd	r1, r2, [r4]
 803255a:	6a3a      	ldr	r2, [r7, #32]
 803255c:	2a03      	cmp	r2, #3
 803255e:	d102      	bne.n	8032566 <__ssvfscanf_r+0x422>
 8032560:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8032562:	2a04      	cmp	r2, #4
 8032564:	d007      	beq.n	8032576 <__ssvfscanf_r+0x432>
 8032566:	2208      	movs	r2, #8
 8032568:	2100      	movs	r1, #0
 803256a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 803256e:	623b      	str	r3, [r7, #32]
 8032570:	f7fa fa2e 	bl	802c9d0 <memset>
 8032574:	6a3b      	ldr	r3, [r7, #32]
 8032576:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 803257a:	9200      	str	r2, [sp, #0]
 803257c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803257e:	613b      	str	r3, [r7, #16]
 8032580:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032584:	4629      	mov	r1, r5
 8032586:	f002 ffad 	bl	80354e4 <_mbrtowc_r>
 803258a:	1c42      	adds	r2, r0, #1
 803258c:	6238      	str	r0, [r7, #32]
 803258e:	f43f ae9b 	beq.w	80322c8 <__ssvfscanf_r+0x184>
 8032592:	693b      	ldr	r3, [r7, #16]
 8032594:	b9b8      	cbnz	r0, 80325c6 <__ssvfscanf_r+0x482>
 8032596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032598:	441a      	add	r2, r3
 803259a:	4613      	mov	r3, r2
 803259c:	f1bb 0f00 	cmp.w	fp, #0
 80325a0:	d00e      	beq.n	80325c0 <__ssvfscanf_r+0x47c>
 80325a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80325a4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80325a8:	e019      	b.n	80325de <__ssvfscanf_r+0x49a>
 80325aa:	f04f 0900 	mov.w	r9, #0
 80325ae:	62fd      	str	r5, [r7, #44]	@ 0x2c
 80325b0:	464e      	mov	r6, r9
 80325b2:	46ca      	mov	sl, r9
 80325b4:	464d      	mov	r5, r9
 80325b6:	e7bc      	b.n	8032532 <__ssvfscanf_r+0x3ee>
 80325b8:	46d9      	mov	r9, fp
 80325ba:	465e      	mov	r6, fp
 80325bc:	46da      	mov	sl, fp
 80325be:	e7b8      	b.n	8032532 <__ssvfscanf_r+0x3ee>
 80325c0:	f8c5 b000 	str.w	fp, [r5]
 80325c4:	e7ed      	b.n	80325a2 <__ssvfscanf_r+0x45e>
 80325c6:	6a3a      	ldr	r2, [r7, #32]
 80325c8:	3202      	adds	r2, #2
 80325ca:	d025      	beq.n	8032618 <__ssvfscanf_r+0x4d4>
 80325cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80325ce:	441a      	add	r2, r3
 80325d0:	6a3b      	ldr	r3, [r7, #32]
 80325d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80325d4:	2b03      	cmp	r3, #3
 80325d6:	d1e5      	bne.n	80325a4 <__ssvfscanf_r+0x460>
 80325d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80325da:	2b04      	cmp	r3, #4
 80325dc:	d1e2      	bne.n	80325a4 <__ssvfscanf_r+0x460>
 80325de:	f1bb 0f00 	cmp.w	fp, #0
 80325e2:	d117      	bne.n	8032614 <__ssvfscanf_r+0x4d0>
 80325e4:	f1ba 0f00 	cmp.w	sl, #0
 80325e8:	d013      	beq.n	8032612 <__ssvfscanf_r+0x4ce>
 80325ea:	1bab      	subs	r3, r5, r6
 80325ec:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 80325f0:	d80f      	bhi.n	8032612 <__ssvfscanf_r+0x4ce>
 80325f2:	4630      	mov	r0, r6
 80325f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80325f8:	613b      	str	r3, [r7, #16]
 80325fa:	f001 fbb9 	bl	8033d70 <realloc>
 80325fe:	4606      	mov	r6, r0
 8032600:	2800      	cmp	r0, #0
 8032602:	f43f af5a 	beq.w	80324ba <__ssvfscanf_r+0x376>
 8032606:	693b      	ldr	r3, [r7, #16]
 8032608:	f8ca 0000 	str.w	r0, [sl]
 803260c:	18c5      	adds	r5, r0, r3
 803260e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8032612:	3504      	adds	r5, #4
 8032614:	2200      	movs	r2, #0
 8032616:	e000      	b.n	803261a <__ssvfscanf_r+0x4d6>
 8032618:	461a      	mov	r2, r3
 803261a:	6863      	ldr	r3, [r4, #4]
 803261c:	2b00      	cmp	r3, #0
 803261e:	dc14      	bgt.n	803264a <__ssvfscanf_r+0x506>
 8032620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032622:	613a      	str	r2, [r7, #16]
 8032624:	4621      	mov	r1, r4
 8032626:	f7fd fbd8 	bl	802fdda <__ssrefill_r>
 803262a:	693a      	ldr	r2, [r7, #16]
 803262c:	b168      	cbz	r0, 803264a <__ssvfscanf_r+0x506>
 803262e:	2a00      	cmp	r2, #0
 8032630:	f47f ae4a 	bne.w	80322c8 <__ssvfscanf_r+0x184>
 8032634:	f1ba 0f00 	cmp.w	sl, #0
 8032638:	d10c      	bne.n	8032654 <__ssvfscanf_r+0x510>
 803263a:	f1bb 0f00 	cmp.w	fp, #0
 803263e:	d102      	bne.n	8032646 <__ssvfscanf_r+0x502>
 8032640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032642:	3301      	adds	r3, #1
 8032644:	627b      	str	r3, [r7, #36]	@ 0x24
 8032646:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8032648:	e597      	b.n	803217a <__ssvfscanf_r+0x36>
 803264a:	f1b8 0f00 	cmp.w	r8, #0
 803264e:	f47f af71 	bne.w	8032534 <__ssvfscanf_r+0x3f0>
 8032652:	e7ef      	b.n	8032634 <__ssvfscanf_r+0x4f0>
 8032654:	1ba9      	subs	r1, r5, r6
 8032656:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 803265a:	d9ee      	bls.n	803263a <__ssvfscanf_r+0x4f6>
 803265c:	f8da 0000 	ldr.w	r0, [sl]
 8032660:	f001 fb86 	bl	8033d70 <realloc>
 8032664:	2800      	cmp	r0, #0
 8032666:	d0e8      	beq.n	803263a <__ssvfscanf_r+0x4f6>
 8032668:	f8ca 0000 	str.w	r0, [sl]
 803266c:	e7e5      	b.n	803263a <__ssvfscanf_r+0x4f6>
 803266e:	f1bb 0f00 	cmp.w	fp, #0
 8032672:	d021      	beq.n	80326b8 <__ssvfscanf_r+0x574>
 8032674:	461e      	mov	r6, r3
 8032676:	e9d4 2300 	ldrd	r2, r3, [r4]
 803267a:	4598      	cmp	r8, r3
 803267c:	dd11      	ble.n	80326a2 <__ssvfscanf_r+0x55e>
 803267e:	441a      	add	r2, r3
 8032680:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032682:	6022      	str	r2, [r4, #0]
 8032684:	4621      	mov	r1, r4
 8032686:	441e      	add	r6, r3
 8032688:	eba8 0803 	sub.w	r8, r8, r3
 803268c:	f7fd fba5 	bl	802fdda <__ssrefill_r>
 8032690:	2800      	cmp	r0, #0
 8032692:	d0f0      	beq.n	8032676 <__ssvfscanf_r+0x532>
 8032694:	2e00      	cmp	r6, #0
 8032696:	f43f ae17 	beq.w	80322c8 <__ssvfscanf_r+0x184>
 803269a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803269c:	4433      	add	r3, r6
 803269e:	633b      	str	r3, [r7, #48]	@ 0x30
 80326a0:	e56b      	b.n	803217a <__ssvfscanf_r+0x36>
 80326a2:	eba3 0308 	sub.w	r3, r3, r8
 80326a6:	4442      	add	r2, r8
 80326a8:	4446      	add	r6, r8
 80326aa:	6063      	str	r3, [r4, #4]
 80326ac:	6022      	str	r2, [r4, #0]
 80326ae:	e7f4      	b.n	803269a <__ssvfscanf_r+0x556>
 80326b0:	0802c0d9 	.word	0x0802c0d9
 80326b4:	0803c07d 	.word	0x0803c07d
 80326b8:	46a9      	mov	r9, r5
 80326ba:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80326be:	f859 5b04 	ldr.w	r5, [r9], #4
 80326c2:	d02c      	beq.n	803271e <__ssvfscanf_r+0x5da>
 80326c4:	2d00      	cmp	r5, #0
 80326c6:	f43f ae33 	beq.w	8032330 <__ssvfscanf_r+0x1ec>
 80326ca:	4640      	mov	r0, r8
 80326cc:	f7fc fbc6 	bl	802ee5c <malloc>
 80326d0:	4682      	mov	sl, r0
 80326d2:	2800      	cmp	r0, #0
 80326d4:	f43f adfd 	beq.w	80322d2 <__ssvfscanf_r+0x18e>
 80326d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80326da:	6028      	str	r0, [r5, #0]
 80326dc:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 80326e0:	889e      	ldrh	r6, [r3, #4]
 80326e2:	45b3      	cmp	fp, r6
 80326e4:	d311      	bcc.n	803270a <__ssvfscanf_r+0x5c6>
 80326e6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80326ea:	429e      	cmp	r6, r3
 80326ec:	f200 8692 	bhi.w	8033414 <__ssvfscanf_r+0x12d0>
 80326f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80326f2:	3608      	adds	r6, #8
 80326f4:	b2b6      	uxth	r6, r6
 80326f6:	6818      	ldr	r0, [r3, #0]
 80326f8:	00b1      	lsls	r1, r6, #2
 80326fa:	f001 fb39 	bl	8033d70 <realloc>
 80326fe:	2800      	cmp	r0, #0
 8032700:	f000 8688 	beq.w	8033414 <__ssvfscanf_r+0x12d0>
 8032704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032706:	6018      	str	r0, [r3, #0]
 8032708:	809e      	strh	r6, [r3, #4]
 803270a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803270c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803270e:	681b      	ldr	r3, [r3, #0]
 8032710:	f10b 0201 	add.w	r2, fp, #1
 8032714:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8032718:	462e      	mov	r6, r5
 803271a:	80ca      	strh	r2, [r1, #6]
 803271c:	4655      	mov	r5, sl
 803271e:	9400      	str	r4, [sp, #0]
 8032720:	4629      	mov	r1, r5
 8032722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032724:	4643      	mov	r3, r8
 8032726:	2201      	movs	r2, #1
 8032728:	f7fd fb74 	bl	802fe14 <_sfread_r>
 803272c:	4605      	mov	r5, r0
 803272e:	2800      	cmp	r0, #0
 8032730:	f43f adca 	beq.w	80322c8 <__ssvfscanf_r+0x184>
 8032734:	b13e      	cbz	r6, 8032746 <__ssvfscanf_r+0x602>
 8032736:	4580      	cmp	r8, r0
 8032738:	d905      	bls.n	8032746 <__ssvfscanf_r+0x602>
 803273a:	4601      	mov	r1, r0
 803273c:	6830      	ldr	r0, [r6, #0]
 803273e:	f001 fb17 	bl	8033d70 <realloc>
 8032742:	b100      	cbz	r0, 8032746 <__ssvfscanf_r+0x602>
 8032744:	6030      	str	r0, [r6, #0]
 8032746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032748:	442b      	add	r3, r5
 803274a:	633b      	str	r3, [r7, #48]	@ 0x30
 803274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803274e:	3301      	adds	r3, #1
 8032750:	627b      	str	r3, [r7, #36]	@ 0x24
 8032752:	464d      	mov	r5, r9
 8032754:	e511      	b.n	803217a <__ssvfscanf_r+0x36>
 8032756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032758:	2b00      	cmp	r3, #0
 803275a:	bf08      	it	eq
 803275c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8032760:	f016 0801 	ands.w	r8, r6, #1
 8032764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032766:	f006 0a10 	and.w	sl, r6, #16
 803276a:	f000 8101 	beq.w	8032970 <__ssvfscanf_r+0x82c>
 803276e:	f1ba 0f00 	cmp.w	sl, #0
 8032772:	f040 80a4 	bne.w	80328be <__ssvfscanf_r+0x77a>
 8032776:	462b      	mov	r3, r5
 8032778:	f853 5b04 	ldr.w	r5, [r3], #4
 803277c:	60fb      	str	r3, [r7, #12]
 803277e:	0633      	lsls	r3, r6, #24
 8032780:	f140 80a5 	bpl.w	80328ce <__ssvfscanf_r+0x78a>
 8032784:	2d00      	cmp	r5, #0
 8032786:	f43f ae9b 	beq.w	80324c0 <__ssvfscanf_r+0x37c>
 803278a:	2080      	movs	r0, #128	@ 0x80
 803278c:	f7fc fb66 	bl	802ee5c <malloc>
 8032790:	4680      	mov	r8, r0
 8032792:	2800      	cmp	r0, #0
 8032794:	f43f ae91 	beq.w	80324ba <__ssvfscanf_r+0x376>
 8032798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803279a:	6028      	str	r0, [r5, #0]
 803279c:	88de      	ldrh	r6, [r3, #6]
 803279e:	889b      	ldrh	r3, [r3, #4]
 80327a0:	429e      	cmp	r6, r3
 80327a2:	d314      	bcc.n	80327ce <__ssvfscanf_r+0x68a>
 80327a4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80327a8:	4293      	cmp	r3, r2
 80327aa:	f200 8633 	bhi.w	8033414 <__ssvfscanf_r+0x12d0>
 80327ae:	3308      	adds	r3, #8
 80327b0:	fa1f f983 	uxth.w	r9, r3
 80327b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80327b6:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80327ba:	6818      	ldr	r0, [r3, #0]
 80327bc:	f001 fad8 	bl	8033d70 <realloc>
 80327c0:	2800      	cmp	r0, #0
 80327c2:	f000 8627 	beq.w	8033414 <__ssvfscanf_r+0x12d0>
 80327c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80327c8:	6018      	str	r0, [r3, #0]
 80327ca:	f8a3 9004 	strh.w	r9, [r3, #4]
 80327ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80327d0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80327d2:	681b      	ldr	r3, [r3, #0]
 80327d4:	1c72      	adds	r2, r6, #1
 80327d6:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 80327da:	46ab      	mov	fp, r5
 80327dc:	80ca      	strh	r2, [r1, #6]
 80327de:	4645      	mov	r5, r8
 80327e0:	f04f 0920 	mov.w	r9, #32
 80327e4:	2600      	movs	r6, #0
 80327e6:	f7fb fa7b 	bl	802dce0 <__locale_mb_cur_max>
 80327ea:	42b0      	cmp	r0, r6
 80327ec:	f43f ad6c 	beq.w	80322c8 <__ssvfscanf_r+0x184>
 80327f0:	1c73      	adds	r3, r6, #1
 80327f2:	613b      	str	r3, [r7, #16]
 80327f4:	6823      	ldr	r3, [r4, #0]
 80327f6:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80327fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80327fe:	558a      	strb	r2, [r1, r6]
 8032800:	6862      	ldr	r2, [r4, #4]
 8032802:	3a01      	subs	r2, #1
 8032804:	e9c4 3200 	strd	r3, r2, [r4]
 8032808:	6a3b      	ldr	r3, [r7, #32]
 803280a:	2b03      	cmp	r3, #3
 803280c:	d102      	bne.n	8032814 <__ssvfscanf_r+0x6d0>
 803280e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8032810:	2b04      	cmp	r3, #4
 8032812:	d005      	beq.n	8032820 <__ssvfscanf_r+0x6dc>
 8032814:	2208      	movs	r2, #8
 8032816:	2100      	movs	r1, #0
 8032818:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803281c:	f7fa f8d8 	bl	802c9d0 <memset>
 8032820:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8032824:	9300      	str	r3, [sp, #0]
 8032826:	693b      	ldr	r3, [r7, #16]
 8032828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803282a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 803282e:	4629      	mov	r1, r5
 8032830:	f002 fe58 	bl	80354e4 <_mbrtowc_r>
 8032834:	1c46      	adds	r6, r0, #1
 8032836:	6238      	str	r0, [r7, #32]
 8032838:	f43f ad46 	beq.w	80322c8 <__ssvfscanf_r+0x184>
 803283c:	2800      	cmp	r0, #0
 803283e:	d14a      	bne.n	80328d6 <__ssvfscanf_r+0x792>
 8032840:	6028      	str	r0, [r5, #0]
 8032842:	682e      	ldr	r6, [r5, #0]
 8032844:	1c70      	adds	r0, r6, #1
 8032846:	d056      	beq.n	80328f6 <__ssvfscanf_r+0x7b2>
 8032848:	2208      	movs	r2, #8
 803284a:	2100      	movs	r1, #0
 803284c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032850:	f7fa f8be 	bl	802c9d0 <memset>
 8032854:	4b9a      	ldr	r3, [pc, #616]	@ (8032ac0 <__ssvfscanf_r+0x97c>)
 8032856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 803285c:	60bb      	str	r3, [r7, #8]
 803285e:	4632      	mov	r2, r6
 8032860:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8032864:	68be      	ldr	r6, [r7, #8]
 8032866:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 803286a:	47b0      	blx	r6
 803286c:	2801      	cmp	r0, #1
 803286e:	d144      	bne.n	80328fa <__ssvfscanf_r+0x7b6>
 8032870:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8032874:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8032878:	5c9b      	ldrb	r3, [r3, r2]
 803287a:	2b00      	cmp	r3, #0
 803287c:	d148      	bne.n	8032910 <__ssvfscanf_r+0x7cc>
 803287e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 8032882:	693b      	ldr	r3, [r7, #16]
 8032884:	2b00      	cmp	r3, #0
 8032886:	d13a      	bne.n	80328fe <__ssvfscanf_r+0x7ba>
 8032888:	f1ba 0f00 	cmp.w	sl, #0
 803288c:	d115      	bne.n	80328ba <__ssvfscanf_r+0x776>
 803288e:	f8c5 a000 	str.w	sl, [r5]
 8032892:	f1bb 0f00 	cmp.w	fp, #0
 8032896:	d00d      	beq.n	80328b4 <__ssvfscanf_r+0x770>
 8032898:	eba5 0108 	sub.w	r1, r5, r8
 803289c:	108b      	asrs	r3, r1, #2
 803289e:	3301      	adds	r3, #1
 80328a0:	4599      	cmp	r9, r3
 80328a2:	d907      	bls.n	80328b4 <__ssvfscanf_r+0x770>
 80328a4:	f8db 0000 	ldr.w	r0, [fp]
 80328a8:	3104      	adds	r1, #4
 80328aa:	f001 fa61 	bl	8033d70 <realloc>
 80328ae:	b108      	cbz	r0, 80328b4 <__ssvfscanf_r+0x770>
 80328b0:	f8cb 0000 	str.w	r0, [fp]
 80328b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80328b6:	3301      	adds	r3, #1
 80328b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80328ba:	68fd      	ldr	r5, [r7, #12]
 80328bc:	e45d      	b.n	803217a <__ssvfscanf_r+0x36>
 80328be:	f04f 0900 	mov.w	r9, #0
 80328c2:	60fd      	str	r5, [r7, #12]
 80328c4:	46c8      	mov	r8, r9
 80328c6:	46cb      	mov	fp, r9
 80328c8:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 80328cc:	e78a      	b.n	80327e4 <__ssvfscanf_r+0x6a0>
 80328ce:	46d1      	mov	r9, sl
 80328d0:	46d0      	mov	r8, sl
 80328d2:	46d3      	mov	fp, sl
 80328d4:	e786      	b.n	80327e4 <__ssvfscanf_r+0x6a0>
 80328d6:	6a3b      	ldr	r3, [r7, #32]
 80328d8:	3302      	adds	r3, #2
 80328da:	d1b2      	bne.n	8032842 <__ssvfscanf_r+0x6fe>
 80328dc:	693e      	ldr	r6, [r7, #16]
 80328de:	6863      	ldr	r3, [r4, #4]
 80328e0:	2b00      	cmp	r3, #0
 80328e2:	dc40      	bgt.n	8032966 <__ssvfscanf_r+0x822>
 80328e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80328e6:	4621      	mov	r1, r4
 80328e8:	f7fd fa77 	bl	802fdda <__ssrefill_r>
 80328ec:	2800      	cmp	r0, #0
 80328ee:	d03a      	beq.n	8032966 <__ssvfscanf_r+0x822>
 80328f0:	2e00      	cmp	r6, #0
 80328f2:	d0c9      	beq.n	8032888 <__ssvfscanf_r+0x744>
 80328f4:	e4e8      	b.n	80322c8 <__ssvfscanf_r+0x184>
 80328f6:	4632      	mov	r2, r6
 80328f8:	e7bc      	b.n	8032874 <__ssvfscanf_r+0x730>
 80328fa:	2200      	movs	r2, #0
 80328fc:	e7ba      	b.n	8032874 <__ssvfscanf_r+0x730>
 80328fe:	693b      	ldr	r3, [r7, #16]
 8032900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032902:	3b01      	subs	r3, #1
 8032904:	4622      	mov	r2, r4
 8032906:	5cf1      	ldrb	r1, [r6, r3]
 8032908:	613b      	str	r3, [r7, #16]
 803290a:	f7fd fa2b 	bl	802fd64 <_sungetc_r>
 803290e:	e7b8      	b.n	8032882 <__ssvfscanf_r+0x73e>
 8032910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032912:	693a      	ldr	r2, [r7, #16]
 8032914:	4413      	add	r3, r2
 8032916:	633b      	str	r3, [r7, #48]	@ 0x30
 8032918:	6a3b      	ldr	r3, [r7, #32]
 803291a:	2b03      	cmp	r3, #3
 803291c:	d102      	bne.n	8032924 <__ssvfscanf_r+0x7e0>
 803291e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8032920:	2b04      	cmp	r3, #4
 8032922:	d002      	beq.n	803292a <__ssvfscanf_r+0x7e6>
 8032924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032926:	3b01      	subs	r3, #1
 8032928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803292a:	f1ba 0f00 	cmp.w	sl, #0
 803292e:	d118      	bne.n	8032962 <__ssvfscanf_r+0x81e>
 8032930:	3504      	adds	r5, #4
 8032932:	f1bb 0f00 	cmp.w	fp, #0
 8032936:	d014      	beq.n	8032962 <__ssvfscanf_r+0x81e>
 8032938:	eba5 0608 	sub.w	r6, r5, r8
 803293c:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8032940:	d80d      	bhi.n	803295e <__ssvfscanf_r+0x81a>
 8032942:	4640      	mov	r0, r8
 8032944:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8032948:	f001 fa12 	bl	8033d70 <realloc>
 803294c:	4680      	mov	r8, r0
 803294e:	2800      	cmp	r0, #0
 8032950:	f43f adb3 	beq.w	80324ba <__ssvfscanf_r+0x376>
 8032954:	1985      	adds	r5, r0, r6
 8032956:	f8cb 0000 	str.w	r0, [fp]
 803295a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803295e:	4656      	mov	r6, sl
 8032960:	e7bd      	b.n	80328de <__ssvfscanf_r+0x79a>
 8032962:	2600      	movs	r6, #0
 8032964:	e7bb      	b.n	80328de <__ssvfscanf_r+0x79a>
 8032966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032968:	2b00      	cmp	r3, #0
 803296a:	f47f af3c 	bne.w	80327e6 <__ssvfscanf_r+0x6a2>
 803296e:	e78b      	b.n	8032888 <__ssvfscanf_r+0x744>
 8032970:	f1ba 0f00 	cmp.w	sl, #0
 8032974:	d01e      	beq.n	80329b4 <__ssvfscanf_r+0x870>
 8032976:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 803297a:	6823      	ldr	r3, [r4, #0]
 803297c:	781a      	ldrb	r2, [r3, #0]
 803297e:	5cb2      	ldrb	r2, [r6, r2]
 8032980:	b91a      	cbnz	r2, 803298a <__ssvfscanf_r+0x846>
 8032982:	f1b8 0f00 	cmp.w	r8, #0
 8032986:	d112      	bne.n	80329ae <__ssvfscanf_r+0x86a>
 8032988:	e4d2      	b.n	8032330 <__ssvfscanf_r+0x1ec>
 803298a:	3301      	adds	r3, #1
 803298c:	6862      	ldr	r2, [r4, #4]
 803298e:	6023      	str	r3, [r4, #0]
 8032990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032992:	f108 0801 	add.w	r8, r8, #1
 8032996:	3a01      	subs	r2, #1
 8032998:	4543      	cmp	r3, r8
 803299a:	6062      	str	r2, [r4, #4]
 803299c:	d007      	beq.n	80329ae <__ssvfscanf_r+0x86a>
 803299e:	2a00      	cmp	r2, #0
 80329a0:	dceb      	bgt.n	803297a <__ssvfscanf_r+0x836>
 80329a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80329a4:	4621      	mov	r1, r4
 80329a6:	f7fd fa18 	bl	802fdda <__ssrefill_r>
 80329aa:	2800      	cmp	r0, #0
 80329ac:	d0e5      	beq.n	803297a <__ssvfscanf_r+0x836>
 80329ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80329b0:	4443      	add	r3, r8
 80329b2:	e674      	b.n	803269e <__ssvfscanf_r+0x55a>
 80329b4:	46a9      	mov	r9, r5
 80329b6:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80329ba:	f859 8b04 	ldr.w	r8, [r9], #4
 80329be:	d07d      	beq.n	8032abc <__ssvfscanf_r+0x978>
 80329c0:	f1b8 0f00 	cmp.w	r8, #0
 80329c4:	f43f acb4 	beq.w	8032330 <__ssvfscanf_r+0x1ec>
 80329c8:	2020      	movs	r0, #32
 80329ca:	f7fc fa47 	bl	802ee5c <malloc>
 80329ce:	4606      	mov	r6, r0
 80329d0:	2800      	cmp	r0, #0
 80329d2:	f43f ac7e 	beq.w	80322d2 <__ssvfscanf_r+0x18e>
 80329d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80329d8:	f8c8 0000 	str.w	r0, [r8]
 80329dc:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 80329e0:	889d      	ldrh	r5, [r3, #4]
 80329e2:	45aa      	cmp	sl, r5
 80329e4:	d311      	bcc.n	8032a0a <__ssvfscanf_r+0x8c6>
 80329e6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80329ea:	429d      	cmp	r5, r3
 80329ec:	f200 8512 	bhi.w	8033414 <__ssvfscanf_r+0x12d0>
 80329f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80329f2:	3508      	adds	r5, #8
 80329f4:	b2ad      	uxth	r5, r5
 80329f6:	6818      	ldr	r0, [r3, #0]
 80329f8:	00a9      	lsls	r1, r5, #2
 80329fa:	f001 f9b9 	bl	8033d70 <realloc>
 80329fe:	2800      	cmp	r0, #0
 8032a00:	f000 8508 	beq.w	8033414 <__ssvfscanf_r+0x12d0>
 8032a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032a06:	6018      	str	r0, [r3, #0]
 8032a08:	809d      	strh	r5, [r3, #4]
 8032a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032a0c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032a0e:	681b      	ldr	r3, [r3, #0]
 8032a10:	f10a 0201 	add.w	r2, sl, #1
 8032a14:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 8032a18:	80ca      	strh	r2, [r1, #6]
 8032a1a:	46c2      	mov	sl, r8
 8032a1c:	46b0      	mov	r8, r6
 8032a1e:	2620      	movs	r6, #32
 8032a20:	4645      	mov	r5, r8
 8032a22:	6823      	ldr	r3, [r4, #0]
 8032a24:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8032a28:	781a      	ldrb	r2, [r3, #0]
 8032a2a:	5c8a      	ldrb	r2, [r1, r2]
 8032a2c:	b35a      	cbz	r2, 8032a86 <__ssvfscanf_r+0x942>
 8032a2e:	6862      	ldr	r2, [r4, #4]
 8032a30:	3a01      	subs	r2, #1
 8032a32:	6062      	str	r2, [r4, #4]
 8032a34:	1c5a      	adds	r2, r3, #1
 8032a36:	6022      	str	r2, [r4, #0]
 8032a38:	781b      	ldrb	r3, [r3, #0]
 8032a3a:	f808 3b01 	strb.w	r3, [r8], #1
 8032a3e:	f1ba 0f00 	cmp.w	sl, #0
 8032a42:	d010      	beq.n	8032a66 <__ssvfscanf_r+0x922>
 8032a44:	eba8 0b05 	sub.w	fp, r8, r5
 8032a48:	45b3      	cmp	fp, r6
 8032a4a:	d30c      	bcc.n	8032a66 <__ssvfscanf_r+0x922>
 8032a4c:	0076      	lsls	r6, r6, #1
 8032a4e:	4628      	mov	r0, r5
 8032a50:	4631      	mov	r1, r6
 8032a52:	f001 f98d 	bl	8033d70 <realloc>
 8032a56:	4605      	mov	r5, r0
 8032a58:	2800      	cmp	r0, #0
 8032a5a:	f43f ac3a 	beq.w	80322d2 <__ssvfscanf_r+0x18e>
 8032a5e:	eb00 080b 	add.w	r8, r0, fp
 8032a62:	f8ca 0000 	str.w	r0, [sl]
 8032a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032a68:	3b01      	subs	r3, #1
 8032a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032a6c:	d00b      	beq.n	8032a86 <__ssvfscanf_r+0x942>
 8032a6e:	6863      	ldr	r3, [r4, #4]
 8032a70:	2b00      	cmp	r3, #0
 8032a72:	dcd6      	bgt.n	8032a22 <__ssvfscanf_r+0x8de>
 8032a74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032a76:	4621      	mov	r1, r4
 8032a78:	f7fd f9af 	bl	802fdda <__ssrefill_r>
 8032a7c:	2800      	cmp	r0, #0
 8032a7e:	d0d0      	beq.n	8032a22 <__ssvfscanf_r+0x8de>
 8032a80:	45a8      	cmp	r8, r5
 8032a82:	f43f ac21 	beq.w	80322c8 <__ssvfscanf_r+0x184>
 8032a86:	ebb8 0505 	subs.w	r5, r8, r5
 8032a8a:	f43f ac51 	beq.w	8032330 <__ssvfscanf_r+0x1ec>
 8032a8e:	2300      	movs	r3, #0
 8032a90:	f888 3000 	strb.w	r3, [r8]
 8032a94:	f1ba 0f00 	cmp.w	sl, #0
 8032a98:	d009      	beq.n	8032aae <__ssvfscanf_r+0x96a>
 8032a9a:	1c69      	adds	r1, r5, #1
 8032a9c:	428e      	cmp	r6, r1
 8032a9e:	d906      	bls.n	8032aae <__ssvfscanf_r+0x96a>
 8032aa0:	f8da 0000 	ldr.w	r0, [sl]
 8032aa4:	f001 f964 	bl	8033d70 <realloc>
 8032aa8:	b108      	cbz	r0, 8032aae <__ssvfscanf_r+0x96a>
 8032aaa:	f8ca 0000 	str.w	r0, [sl]
 8032aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032ab0:	3301      	adds	r3, #1
 8032ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8032ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032ab6:	442b      	add	r3, r5
 8032ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8032aba:	e64a      	b.n	8032752 <__ssvfscanf_r+0x60e>
 8032abc:	46b2      	mov	sl, r6
 8032abe:	e7af      	b.n	8032a20 <__ssvfscanf_r+0x8dc>
 8032ac0:	2000016c 	.word	0x2000016c
 8032ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032ac6:	2b00      	cmp	r3, #0
 8032ac8:	bf08      	it	eq
 8032aca:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8032ace:	f016 0901 	ands.w	r9, r6, #1
 8032ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032ad4:	f006 0810 	and.w	r8, r6, #16
 8032ad8:	f000 80ef 	beq.w	8032cba <__ssvfscanf_r+0xb76>
 8032adc:	f1b8 0f00 	cmp.w	r8, #0
 8032ae0:	f040 8098 	bne.w	8032c14 <__ssvfscanf_r+0xad0>
 8032ae4:	462b      	mov	r3, r5
 8032ae6:	0631      	lsls	r1, r6, #24
 8032ae8:	f853 5b04 	ldr.w	r5, [r3], #4
 8032aec:	613b      	str	r3, [r7, #16]
 8032aee:	f140 8099 	bpl.w	8032c24 <__ssvfscanf_r+0xae0>
 8032af2:	2d00      	cmp	r5, #0
 8032af4:	f43f ace4 	beq.w	80324c0 <__ssvfscanf_r+0x37c>
 8032af8:	2080      	movs	r0, #128	@ 0x80
 8032afa:	f7fc f9af 	bl	802ee5c <malloc>
 8032afe:	4606      	mov	r6, r0
 8032b00:	2800      	cmp	r0, #0
 8032b02:	f43f acda 	beq.w	80324ba <__ssvfscanf_r+0x376>
 8032b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032b08:	6028      	str	r0, [r5, #0]
 8032b0a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8032b0e:	889b      	ldrh	r3, [r3, #4]
 8032b10:	4599      	cmp	r9, r3
 8032b12:	d314      	bcc.n	8032b3e <__ssvfscanf_r+0x9fa>
 8032b14:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032b18:	4293      	cmp	r3, r2
 8032b1a:	f200 847b 	bhi.w	8033414 <__ssvfscanf_r+0x12d0>
 8032b1e:	3308      	adds	r3, #8
 8032b20:	fa1f fa83 	uxth.w	sl, r3
 8032b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032b26:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8032b2a:	6818      	ldr	r0, [r3, #0]
 8032b2c:	f001 f920 	bl	8033d70 <realloc>
 8032b30:	2800      	cmp	r0, #0
 8032b32:	f000 846f 	beq.w	8033414 <__ssvfscanf_r+0x12d0>
 8032b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032b38:	6018      	str	r0, [r3, #0]
 8032b3a:	f8a3 a004 	strh.w	sl, [r3, #4]
 8032b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032b40:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032b42:	681b      	ldr	r3, [r3, #0]
 8032b44:	f109 0201 	add.w	r2, r9, #1
 8032b48:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8032b4c:	46aa      	mov	sl, r5
 8032b4e:	80ca      	strh	r2, [r1, #6]
 8032b50:	4635      	mov	r5, r6
 8032b52:	f04f 0920 	mov.w	r9, #32
 8032b56:	2300      	movs	r3, #0
 8032b58:	6822      	ldr	r2, [r4, #0]
 8032b5a:	49a7      	ldr	r1, [pc, #668]	@ (8032df8 <__ssvfscanf_r+0xcb4>)
 8032b5c:	7812      	ldrb	r2, [r2, #0]
 8032b5e:	5c8a      	ldrb	r2, [r1, r2]
 8032b60:	0710      	lsls	r0, r2, #28
 8032b62:	d43c      	bmi.n	8032bde <__ssvfscanf_r+0xa9a>
 8032b64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032b66:	2a00      	cmp	r2, #0
 8032b68:	d039      	beq.n	8032bde <__ssvfscanf_r+0xa9a>
 8032b6a:	60fb      	str	r3, [r7, #12]
 8032b6c:	f7fb f8b8 	bl	802dce0 <__locale_mb_cur_max>
 8032b70:	68fb      	ldr	r3, [r7, #12]
 8032b72:	4298      	cmp	r0, r3
 8032b74:	f43f aba8 	beq.w	80322c8 <__ssvfscanf_r+0x184>
 8032b78:	6822      	ldr	r2, [r4, #0]
 8032b7a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032b7e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8032b82:	54c8      	strb	r0, [r1, r3]
 8032b84:	f103 0b01 	add.w	fp, r3, #1
 8032b88:	6863      	ldr	r3, [r4, #4]
 8032b8a:	3b01      	subs	r3, #1
 8032b8c:	e9c4 2300 	strd	r2, r3, [r4]
 8032b90:	6a3b      	ldr	r3, [r7, #32]
 8032b92:	2b03      	cmp	r3, #3
 8032b94:	d102      	bne.n	8032b9c <__ssvfscanf_r+0xa58>
 8032b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032b98:	2b04      	cmp	r3, #4
 8032b9a:	d005      	beq.n	8032ba8 <__ssvfscanf_r+0xa64>
 8032b9c:	2208      	movs	r2, #8
 8032b9e:	2100      	movs	r1, #0
 8032ba0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032ba4:	f7f9 ff14 	bl	802c9d0 <memset>
 8032ba8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8032bac:	9300      	str	r3, [sp, #0]
 8032bae:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032bb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032bb4:	465b      	mov	r3, fp
 8032bb6:	4629      	mov	r1, r5
 8032bb8:	f002 fc94 	bl	80354e4 <_mbrtowc_r>
 8032bbc:	1c42      	adds	r2, r0, #1
 8032bbe:	6238      	str	r0, [r7, #32]
 8032bc0:	f43f ab82 	beq.w	80322c8 <__ssvfscanf_r+0x184>
 8032bc4:	bb90      	cbnz	r0, 8032c2c <__ssvfscanf_r+0xae8>
 8032bc6:	6028      	str	r0, [r5, #0]
 8032bc8:	6828      	ldr	r0, [r5, #0]
 8032bca:	f002 fca5 	bl	8035518 <iswspace>
 8032bce:	4603      	mov	r3, r0
 8032bd0:	2800      	cmp	r0, #0
 8032bd2:	d047      	beq.n	8032c64 <__ssvfscanf_r+0xb20>
 8032bd4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032bd8:	f1bb 0f00 	cmp.w	fp, #0
 8032bdc:	d139      	bne.n	8032c52 <__ssvfscanf_r+0xb0e>
 8032bde:	f1b8 0f00 	cmp.w	r8, #0
 8032be2:	d114      	bne.n	8032c0e <__ssvfscanf_r+0xaca>
 8032be4:	f8c5 8000 	str.w	r8, [r5]
 8032be8:	f1ba 0f00 	cmp.w	sl, #0
 8032bec:	d00c      	beq.n	8032c08 <__ssvfscanf_r+0xac4>
 8032bee:	1ba9      	subs	r1, r5, r6
 8032bf0:	108b      	asrs	r3, r1, #2
 8032bf2:	3301      	adds	r3, #1
 8032bf4:	4599      	cmp	r9, r3
 8032bf6:	d907      	bls.n	8032c08 <__ssvfscanf_r+0xac4>
 8032bf8:	f8da 0000 	ldr.w	r0, [sl]
 8032bfc:	3104      	adds	r1, #4
 8032bfe:	f001 f8b7 	bl	8033d70 <realloc>
 8032c02:	b108      	cbz	r0, 8032c08 <__ssvfscanf_r+0xac4>
 8032c04:	f8ca 0000 	str.w	r0, [sl]
 8032c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032c0a:	3301      	adds	r3, #1
 8032c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8032c0e:	693d      	ldr	r5, [r7, #16]
 8032c10:	f7ff bab3 	b.w	803217a <__ssvfscanf_r+0x36>
 8032c14:	f04f 0900 	mov.w	r9, #0
 8032c18:	613d      	str	r5, [r7, #16]
 8032c1a:	464e      	mov	r6, r9
 8032c1c:	46ca      	mov	sl, r9
 8032c1e:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8032c22:	e798      	b.n	8032b56 <__ssvfscanf_r+0xa12>
 8032c24:	46c1      	mov	r9, r8
 8032c26:	4646      	mov	r6, r8
 8032c28:	46c2      	mov	sl, r8
 8032c2a:	e794      	b.n	8032b56 <__ssvfscanf_r+0xa12>
 8032c2c:	6a3b      	ldr	r3, [r7, #32]
 8032c2e:	3302      	adds	r3, #2
 8032c30:	d1ca      	bne.n	8032bc8 <__ssvfscanf_r+0xa84>
 8032c32:	465b      	mov	r3, fp
 8032c34:	6862      	ldr	r2, [r4, #4]
 8032c36:	2a00      	cmp	r2, #0
 8032c38:	dc8e      	bgt.n	8032b58 <__ssvfscanf_r+0xa14>
 8032c3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032c3c:	60fb      	str	r3, [r7, #12]
 8032c3e:	4621      	mov	r1, r4
 8032c40:	f7fd f8cb 	bl	802fdda <__ssrefill_r>
 8032c44:	68fb      	ldr	r3, [r7, #12]
 8032c46:	2800      	cmp	r0, #0
 8032c48:	d086      	beq.n	8032b58 <__ssvfscanf_r+0xa14>
 8032c4a:	2b00      	cmp	r3, #0
 8032c4c:	f47f ab3c 	bne.w	80322c8 <__ssvfscanf_r+0x184>
 8032c50:	e7c5      	b.n	8032bde <__ssvfscanf_r+0xa9a>
 8032c52:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8032c56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032c58:	f813 100b 	ldrb.w	r1, [r3, fp]
 8032c5c:	4622      	mov	r2, r4
 8032c5e:	f7fd f881 	bl	802fd64 <_sungetc_r>
 8032c62:	e7b7      	b.n	8032bd4 <__ssvfscanf_r+0xa90>
 8032c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032c66:	445a      	add	r2, fp
 8032c68:	633a      	str	r2, [r7, #48]	@ 0x30
 8032c6a:	6a3a      	ldr	r2, [r7, #32]
 8032c6c:	2a03      	cmp	r2, #3
 8032c6e:	d102      	bne.n	8032c76 <__ssvfscanf_r+0xb32>
 8032c70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8032c72:	2a04      	cmp	r2, #4
 8032c74:	d002      	beq.n	8032c7c <__ssvfscanf_r+0xb38>
 8032c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032c78:	3a01      	subs	r2, #1
 8032c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8032c7c:	f1b8 0f00 	cmp.w	r8, #0
 8032c80:	d1d8      	bne.n	8032c34 <__ssvfscanf_r+0xaf0>
 8032c82:	3504      	adds	r5, #4
 8032c84:	f1ba 0f00 	cmp.w	sl, #0
 8032c88:	d015      	beq.n	8032cb6 <__ssvfscanf_r+0xb72>
 8032c8a:	eba5 0b06 	sub.w	fp, r5, r6
 8032c8e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 8032c92:	d80e      	bhi.n	8032cb2 <__ssvfscanf_r+0xb6e>
 8032c94:	4630      	mov	r0, r6
 8032c96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8032c9a:	f001 f869 	bl	8033d70 <realloc>
 8032c9e:	4606      	mov	r6, r0
 8032ca0:	2800      	cmp	r0, #0
 8032ca2:	f43f ac0a 	beq.w	80324ba <__ssvfscanf_r+0x376>
 8032ca6:	eb00 050b 	add.w	r5, r0, fp
 8032caa:	f8ca 0000 	str.w	r0, [sl]
 8032cae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8032cb2:	4643      	mov	r3, r8
 8032cb4:	e7be      	b.n	8032c34 <__ssvfscanf_r+0xaf0>
 8032cb6:	4653      	mov	r3, sl
 8032cb8:	e7bc      	b.n	8032c34 <__ssvfscanf_r+0xaf0>
 8032cba:	f1b8 0f00 	cmp.w	r8, #0
 8032cbe:	d01a      	beq.n	8032cf6 <__ssvfscanf_r+0xbb2>
 8032cc0:	4e4d      	ldr	r6, [pc, #308]	@ (8032df8 <__ssvfscanf_r+0xcb4>)
 8032cc2:	6823      	ldr	r3, [r4, #0]
 8032cc4:	781a      	ldrb	r2, [r3, #0]
 8032cc6:	5cb2      	ldrb	r2, [r6, r2]
 8032cc8:	0711      	lsls	r1, r2, #28
 8032cca:	d411      	bmi.n	8032cf0 <__ssvfscanf_r+0xbac>
 8032ccc:	3301      	adds	r3, #1
 8032cce:	6862      	ldr	r2, [r4, #4]
 8032cd0:	6023      	str	r3, [r4, #0]
 8032cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032cd4:	f109 0901 	add.w	r9, r9, #1
 8032cd8:	3a01      	subs	r2, #1
 8032cda:	454b      	cmp	r3, r9
 8032cdc:	6062      	str	r2, [r4, #4]
 8032cde:	d007      	beq.n	8032cf0 <__ssvfscanf_r+0xbac>
 8032ce0:	2a00      	cmp	r2, #0
 8032ce2:	dcee      	bgt.n	8032cc2 <__ssvfscanf_r+0xb7e>
 8032ce4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032ce6:	4621      	mov	r1, r4
 8032ce8:	f7fd f877 	bl	802fdda <__ssrefill_r>
 8032cec:	2800      	cmp	r0, #0
 8032cee:	d0e8      	beq.n	8032cc2 <__ssvfscanf_r+0xb7e>
 8032cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032cf2:	444b      	add	r3, r9
 8032cf4:	e4d3      	b.n	803269e <__ssvfscanf_r+0x55a>
 8032cf6:	46a8      	mov	r8, r5
 8032cf8:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8032cfc:	f858 5b04 	ldr.w	r5, [r8], #4
 8032d00:	d077      	beq.n	8032df2 <__ssvfscanf_r+0xcae>
 8032d02:	2d00      	cmp	r5, #0
 8032d04:	f43f ab14 	beq.w	8032330 <__ssvfscanf_r+0x1ec>
 8032d08:	2020      	movs	r0, #32
 8032d0a:	f7fc f8a7 	bl	802ee5c <malloc>
 8032d0e:	4681      	mov	r9, r0
 8032d10:	2800      	cmp	r0, #0
 8032d12:	f43f aade 	beq.w	80322d2 <__ssvfscanf_r+0x18e>
 8032d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032d18:	6028      	str	r0, [r5, #0]
 8032d1a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8032d1e:	889e      	ldrh	r6, [r3, #4]
 8032d20:	45b2      	cmp	sl, r6
 8032d22:	d311      	bcc.n	8032d48 <__ssvfscanf_r+0xc04>
 8032d24:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8032d28:	429e      	cmp	r6, r3
 8032d2a:	f200 8373 	bhi.w	8033414 <__ssvfscanf_r+0x12d0>
 8032d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032d30:	3608      	adds	r6, #8
 8032d32:	b2b6      	uxth	r6, r6
 8032d34:	6818      	ldr	r0, [r3, #0]
 8032d36:	00b1      	lsls	r1, r6, #2
 8032d38:	f001 f81a 	bl	8033d70 <realloc>
 8032d3c:	2800      	cmp	r0, #0
 8032d3e:	f000 8369 	beq.w	8033414 <__ssvfscanf_r+0x12d0>
 8032d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032d44:	6018      	str	r0, [r3, #0]
 8032d46:	809e      	strh	r6, [r3, #4]
 8032d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032d4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032d4c:	681b      	ldr	r3, [r3, #0]
 8032d4e:	f10a 0201 	add.w	r2, sl, #1
 8032d52:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8032d56:	80ca      	strh	r2, [r1, #6]
 8032d58:	46aa      	mov	sl, r5
 8032d5a:	2620      	movs	r6, #32
 8032d5c:	464d      	mov	r5, r9
 8032d5e:	46a9      	mov	r9, r5
 8032d60:	6823      	ldr	r3, [r4, #0]
 8032d62:	4925      	ldr	r1, [pc, #148]	@ (8032df8 <__ssvfscanf_r+0xcb4>)
 8032d64:	781a      	ldrb	r2, [r3, #0]
 8032d66:	5c8a      	ldrb	r2, [r1, r2]
 8032d68:	0712      	lsls	r2, r2, #28
 8032d6a:	d428      	bmi.n	8032dbe <__ssvfscanf_r+0xc7a>
 8032d6c:	6862      	ldr	r2, [r4, #4]
 8032d6e:	3a01      	subs	r2, #1
 8032d70:	6062      	str	r2, [r4, #4]
 8032d72:	1c5a      	adds	r2, r3, #1
 8032d74:	6022      	str	r2, [r4, #0]
 8032d76:	781b      	ldrb	r3, [r3, #0]
 8032d78:	f805 3b01 	strb.w	r3, [r5], #1
 8032d7c:	f1ba 0f00 	cmp.w	sl, #0
 8032d80:	d010      	beq.n	8032da4 <__ssvfscanf_r+0xc60>
 8032d82:	eba5 0b09 	sub.w	fp, r5, r9
 8032d86:	45b3      	cmp	fp, r6
 8032d88:	d30c      	bcc.n	8032da4 <__ssvfscanf_r+0xc60>
 8032d8a:	0076      	lsls	r6, r6, #1
 8032d8c:	4648      	mov	r0, r9
 8032d8e:	4631      	mov	r1, r6
 8032d90:	f000 ffee 	bl	8033d70 <realloc>
 8032d94:	4681      	mov	r9, r0
 8032d96:	2800      	cmp	r0, #0
 8032d98:	f43f aa9b 	beq.w	80322d2 <__ssvfscanf_r+0x18e>
 8032d9c:	eb00 050b 	add.w	r5, r0, fp
 8032da0:	f8ca 0000 	str.w	r0, [sl]
 8032da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032da6:	3b01      	subs	r3, #1
 8032da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032daa:	d008      	beq.n	8032dbe <__ssvfscanf_r+0xc7a>
 8032dac:	6863      	ldr	r3, [r4, #4]
 8032dae:	2b00      	cmp	r3, #0
 8032db0:	dcd6      	bgt.n	8032d60 <__ssvfscanf_r+0xc1c>
 8032db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032db4:	4621      	mov	r1, r4
 8032db6:	f7fd f810 	bl	802fdda <__ssrefill_r>
 8032dba:	2800      	cmp	r0, #0
 8032dbc:	d0d0      	beq.n	8032d60 <__ssvfscanf_r+0xc1c>
 8032dbe:	2300      	movs	r3, #0
 8032dc0:	702b      	strb	r3, [r5, #0]
 8032dc2:	eba5 0509 	sub.w	r5, r5, r9
 8032dc6:	f1ba 0f00 	cmp.w	sl, #0
 8032dca:	d009      	beq.n	8032de0 <__ssvfscanf_r+0xc9c>
 8032dcc:	1c69      	adds	r1, r5, #1
 8032dce:	428e      	cmp	r6, r1
 8032dd0:	d906      	bls.n	8032de0 <__ssvfscanf_r+0xc9c>
 8032dd2:	f8da 0000 	ldr.w	r0, [sl]
 8032dd6:	f000 ffcb 	bl	8033d70 <realloc>
 8032dda:	b108      	cbz	r0, 8032de0 <__ssvfscanf_r+0xc9c>
 8032ddc:	f8ca 0000 	str.w	r0, [sl]
 8032de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032de2:	442b      	add	r3, r5
 8032de4:	633b      	str	r3, [r7, #48]	@ 0x30
 8032de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032de8:	3301      	adds	r3, #1
 8032dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8032dec:	4645      	mov	r5, r8
 8032dee:	f7ff b9c4 	b.w	803217a <__ssvfscanf_r+0x36>
 8032df2:	46b2      	mov	sl, r6
 8032df4:	e7b3      	b.n	8032d5e <__ssvfscanf_r+0xc1a>
 8032df6:	bf00      	nop
 8032df8:	0803c07d 	.word	0x0803c07d
 8032dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032dfe:	3b01      	subs	r3, #1
 8032e00:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8032e04:	bf81      	itttt	hi
 8032e06:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8032e08:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 8032e0c:	eb03 090c 	addhi.w	r9, r3, ip
 8032e10:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8032e14:	bf8c      	ite	hi
 8032e16:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 8032e18:	f04f 0900 	movls.w	r9, #0
 8032e1c:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 8032e20:	f04f 0a00 	mov.w	sl, #0
 8032e24:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 8032e28:	6822      	ldr	r2, [r4, #0]
 8032e2a:	7813      	ldrb	r3, [r2, #0]
 8032e2c:	2b39      	cmp	r3, #57	@ 0x39
 8032e2e:	d80f      	bhi.n	8032e50 <__ssvfscanf_r+0xd0c>
 8032e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8032e32:	d91a      	bls.n	8032e6a <__ssvfscanf_r+0xd26>
 8032e34:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8032e38:	290e      	cmp	r1, #14
 8032e3a:	d816      	bhi.n	8032e6a <__ssvfscanf_r+0xd26>
 8032e3c:	e8df f001 	tbb	[pc, r1]
 8032e40:	15781578 	.word	0x15781578
 8032e44:	68683f15 	.word	0x68683f15
 8032e48:	68686868 	.word	0x68686868
 8032e4c:	7068      	.short	0x7068
 8032e4e:	70          	.byte	0x70
 8032e4f:	00          	.byte	0x00
 8032e50:	2b66      	cmp	r3, #102	@ 0x66
 8032e52:	d832      	bhi.n	8032eba <__ssvfscanf_r+0xd76>
 8032e54:	2b60      	cmp	r3, #96	@ 0x60
 8032e56:	d803      	bhi.n	8032e60 <__ssvfscanf_r+0xd1c>
 8032e58:	2b46      	cmp	r3, #70	@ 0x46
 8032e5a:	d804      	bhi.n	8032e66 <__ssvfscanf_r+0xd22>
 8032e5c:	2b40      	cmp	r3, #64	@ 0x40
 8032e5e:	d904      	bls.n	8032e6a <__ssvfscanf_r+0xd26>
 8032e60:	69f9      	ldr	r1, [r7, #28]
 8032e62:	290a      	cmp	r1, #10
 8032e64:	e062      	b.n	8032f2c <__ssvfscanf_r+0xde8>
 8032e66:	2b58      	cmp	r3, #88	@ 0x58
 8032e68:	d068      	beq.n	8032f3c <__ssvfscanf_r+0xdf8>
 8032e6a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8032e6e:	d011      	beq.n	8032e94 <__ssvfscanf_r+0xd50>
 8032e70:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032e74:	4598      	cmp	r8, r3
 8032e76:	d908      	bls.n	8032e8a <__ssvfscanf_r+0xd46>
 8032e78:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8032e7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032e7e:	4622      	mov	r2, r4
 8032e80:	f7fc ff70 	bl	802fd64 <_sungetc_r>
 8032e84:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 8032e88:	46c8      	mov	r8, r9
 8032e8a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032e8e:	4598      	cmp	r8, r3
 8032e90:	f43f aa4e 	beq.w	8032330 <__ssvfscanf_r+0x1ec>
 8032e94:	f01b 0210 	ands.w	r2, fp, #16
 8032e98:	d16c      	bne.n	8032f74 <__ssvfscanf_r+0xe30>
 8032e9a:	69fb      	ldr	r3, [r7, #28]
 8032e9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032e9e:	69be      	ldr	r6, [r7, #24]
 8032ea0:	f888 2000 	strb.w	r2, [r8]
 8032ea4:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032ea8:	47b0      	blx	r6
 8032eaa:	f01b 0f20 	tst.w	fp, #32
 8032eae:	f105 0904 	add.w	r9, r5, #4
 8032eb2:	d056      	beq.n	8032f62 <__ssvfscanf_r+0xe1e>
 8032eb4:	682b      	ldr	r3, [r5, #0]
 8032eb6:	6018      	str	r0, [r3, #0]
 8032eb8:	e058      	b.n	8032f6c <__ssvfscanf_r+0xe28>
 8032eba:	2b78      	cmp	r3, #120	@ 0x78
 8032ebc:	e7d4      	b.n	8032e68 <__ssvfscanf_r+0xd24>
 8032ebe:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8032ec2:	d00a      	beq.n	8032eda <__ssvfscanf_r+0xd96>
 8032ec4:	69f9      	ldr	r1, [r7, #28]
 8032ec6:	b919      	cbnz	r1, 8032ed0 <__ssvfscanf_r+0xd8c>
 8032ec8:	2108      	movs	r1, #8
 8032eca:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 8032ece:	61f9      	str	r1, [r7, #28]
 8032ed0:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8032ed4:	d004      	beq.n	8032ee0 <__ssvfscanf_r+0xd9c>
 8032ed6:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 8032eda:	f808 3b01 	strb.w	r3, [r8], #1
 8032ede:	e00b      	b.n	8032ef8 <__ssvfscanf_r+0xdb4>
 8032ee0:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8032ee4:	f1b9 0f00 	cmp.w	r9, #0
 8032ee8:	d004      	beq.n	8032ef4 <__ssvfscanf_r+0xdb0>
 8032eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032eec:	3301      	adds	r3, #1
 8032eee:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8032ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032ef4:	f10a 0a01 	add.w	sl, sl, #1
 8032ef8:	6863      	ldr	r3, [r4, #4]
 8032efa:	3b01      	subs	r3, #1
 8032efc:	2b00      	cmp	r3, #0
 8032efe:	6063      	str	r3, [r4, #4]
 8032f00:	dd28      	ble.n	8032f54 <__ssvfscanf_r+0xe10>
 8032f02:	3201      	adds	r2, #1
 8032f04:	6022      	str	r2, [r4, #0]
 8032f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032f08:	3b01      	subs	r3, #1
 8032f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032f0c:	d18c      	bne.n	8032e28 <__ssvfscanf_r+0xce4>
 8032f0e:	e7ac      	b.n	8032e6a <__ssvfscanf_r+0xd26>
 8032f10:	69f8      	ldr	r0, [r7, #28]
 8032f12:	499b      	ldr	r1, [pc, #620]	@ (8033180 <__ssvfscanf_r+0x103c>)
 8032f14:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8032f18:	61f9      	str	r1, [r7, #28]
 8032f1a:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 8032f1e:	e7dc      	b.n	8032eda <__ssvfscanf_r+0xd96>
 8032f20:	69f8      	ldr	r0, [r7, #28]
 8032f22:	4997      	ldr	r1, [pc, #604]	@ (8033180 <__ssvfscanf_r+0x103c>)
 8032f24:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8032f28:	61f9      	str	r1, [r7, #28]
 8032f2a:	2908      	cmp	r1, #8
 8032f2c:	dcf5      	bgt.n	8032f1a <__ssvfscanf_r+0xdd6>
 8032f2e:	e79c      	b.n	8032e6a <__ssvfscanf_r+0xd26>
 8032f30:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8032f34:	d099      	beq.n	8032e6a <__ssvfscanf_r+0xd26>
 8032f36:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 8032f3a:	e7ce      	b.n	8032eda <__ssvfscanf_r+0xd96>
 8032f3c:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 8032f40:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8032f44:	d191      	bne.n	8032e6a <__ssvfscanf_r+0xd26>
 8032f46:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 8032f4a:	2110      	movs	r1, #16
 8032f4c:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 8032f50:	61f9      	str	r1, [r7, #28]
 8032f52:	e7c2      	b.n	8032eda <__ssvfscanf_r+0xd96>
 8032f54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032f56:	4621      	mov	r1, r4
 8032f58:	f7fc ff3f 	bl	802fdda <__ssrefill_r>
 8032f5c:	2800      	cmp	r0, #0
 8032f5e:	d0d2      	beq.n	8032f06 <__ssvfscanf_r+0xdc2>
 8032f60:	e783      	b.n	8032e6a <__ssvfscanf_r+0xd26>
 8032f62:	f01b 0f08 	tst.w	fp, #8
 8032f66:	d00b      	beq.n	8032f80 <__ssvfscanf_r+0xe3c>
 8032f68:	682b      	ldr	r3, [r5, #0]
 8032f6a:	7018      	strb	r0, [r3, #0]
 8032f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032f6e:	3301      	adds	r3, #1
 8032f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8032f72:	464d      	mov	r5, r9
 8032f74:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032f78:	eba8 0803 	sub.w	r8, r8, r3
 8032f7c:	44d0      	add	r8, sl
 8032f7e:	e516      	b.n	80329ae <__ssvfscanf_r+0x86a>
 8032f80:	f01b 0f04 	tst.w	fp, #4
 8032f84:	d002      	beq.n	8032f8c <__ssvfscanf_r+0xe48>
 8032f86:	682b      	ldr	r3, [r5, #0]
 8032f88:	8018      	strh	r0, [r3, #0]
 8032f8a:	e7ef      	b.n	8032f6c <__ssvfscanf_r+0xe28>
 8032f8c:	f01b 0201 	ands.w	r2, fp, #1
 8032f90:	d190      	bne.n	8032eb4 <__ssvfscanf_r+0xd70>
 8032f92:	f01b 0f02 	tst.w	fp, #2
 8032f96:	d08d      	beq.n	8032eb4 <__ssvfscanf_r+0xd70>
 8032f98:	4b7a      	ldr	r3, [pc, #488]	@ (8033184 <__ssvfscanf_r+0x1040>)
 8032f9a:	69b9      	ldr	r1, [r7, #24]
 8032f9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032f9e:	4299      	cmp	r1, r3
 8032fa0:	69fb      	ldr	r3, [r7, #28]
 8032fa2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032fa6:	d105      	bne.n	8032fb4 <__ssvfscanf_r+0xe70>
 8032fa8:	f002 fa9a 	bl	80354e0 <_strtoull_r>
 8032fac:	682b      	ldr	r3, [r5, #0]
 8032fae:	e9c3 0100 	strd	r0, r1, [r3]
 8032fb2:	e7db      	b.n	8032f6c <__ssvfscanf_r+0xe28>
 8032fb4:	f002 f9e8 	bl	8035388 <_strtoll_r>
 8032fb8:	e7f8      	b.n	8032fac <__ssvfscanf_r+0xe68>
 8032fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032fbc:	f7fa fe96 	bl	802dcec <_localeconv_r>
 8032fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032fc2:	6802      	ldr	r2, [r0, #0]
 8032fc4:	3b01      	subs	r3, #1
 8032fc6:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8032fca:	f04f 0800 	mov.w	r8, #0
 8032fce:	bf88      	it	hi
 8032fd0:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8032fd2:	f8c7 8010 	str.w	r8, [r7, #16]
 8032fd6:	e9c7 8802 	strd	r8, r8, [r7, #8]
 8032fda:	bf81      	itttt	hi
 8032fdc:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8032fe0:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8032fe4:	181b      	addhi	r3, r3, r0
 8032fe6:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8032fe8:	bf98      	it	ls
 8032fea:	2300      	movls	r3, #0
 8032fec:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8032ff0:	46c3      	mov	fp, r8
 8032ff2:	46c2      	mov	sl, r8
 8032ff4:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8032ff8:	6821      	ldr	r1, [r4, #0]
 8032ffa:	6079      	str	r1, [r7, #4]
 8032ffc:	7808      	ldrb	r0, [r1, #0]
 8032ffe:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 8033002:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 8033006:	f200 8123 	bhi.w	8033250 <__ssvfscanf_r+0x110c>
 803300a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 803300e:	0089      	.short	0x0089
 8033010:	00890121 	.word	0x00890121
 8033014:	01210121 	.word	0x01210121
 8033018:	006f004f 	.word	0x006f004f
 803301c:	006f006f 	.word	0x006f006f
 8033020:	006f006f 	.word	0x006f006f
 8033024:	006f006f 	.word	0x006f006f
 8033028:	006f006f 	.word	0x006f006f
 803302c:	01210121 	.word	0x01210121
 8033030:	01210121 	.word	0x01210121
 8033034:	01210121 	.word	0x01210121
 8033038:	00af0121 	.word	0x00af0121
 803303c:	006d006d 	.word	0x006d006d
 8033040:	011e006d 	.word	0x011e006d
 8033044:	012100ed 	.word	0x012100ed
 8033048:	00d60121 	.word	0x00d60121
 803304c:	01210121 	.word	0x01210121
 8033050:	01210121 	.word	0x01210121
 8033054:	01210090 	.word	0x01210090
 8033058:	01210104 	.word	0x01210104
 803305c:	01210121 	.word	0x01210121
 8033060:	012100f8 	.word	0x012100f8
 8033064:	01210121 	.word	0x01210121
 8033068:	00fe0073 	.word	0x00fe0073
 803306c:	01210121 	.word	0x01210121
 8033070:	01210121 	.word	0x01210121
 8033074:	01210121 	.word	0x01210121
 8033078:	00af0121 	.word	0x00af0121
 803307c:	006d006d 	.word	0x006d006d
 8033080:	011e006d 	.word	0x011e006d
 8033084:	012100ed 	.word	0x012100ed
 8033088:	00d60121 	.word	0x00d60121
 803308c:	01210121 	.word	0x01210121
 8033090:	01210121 	.word	0x01210121
 8033094:	01210090 	.word	0x01210090
 8033098:	01210104 	.word	0x01210104
 803309c:	01210121 	.word	0x01210121
 80330a0:	012100f8 	.word	0x012100f8
 80330a4:	01210121 	.word	0x01210121
 80330a8:	00fe0073 	.word	0x00fe0073
 80330ac:	05f1      	lsls	r1, r6, #23
 80330ae:	d51d      	bpl.n	80330ec <__ssvfscanf_r+0xfa8>
 80330b0:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80330b4:	f10a 0a01 	add.w	sl, sl, #1
 80330b8:	b11b      	cbz	r3, 80330c2 <__ssvfscanf_r+0xf7e>
 80330ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80330bc:	3001      	adds	r0, #1
 80330be:	3b01      	subs	r3, #1
 80330c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80330c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80330c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80330c6:	3001      	adds	r0, #1
 80330c8:	6338      	str	r0, [r7, #48]	@ 0x30
 80330ca:	6860      	ldr	r0, [r4, #4]
 80330cc:	3801      	subs	r0, #1
 80330ce:	3901      	subs	r1, #1
 80330d0:	2800      	cmp	r0, #0
 80330d2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80330d4:	6060      	str	r0, [r4, #4]
 80330d6:	f340 80cc 	ble.w	8033272 <__ssvfscanf_r+0x112e>
 80330da:	6879      	ldr	r1, [r7, #4]
 80330dc:	3101      	adds	r1, #1
 80330de:	6021      	str	r1, [r4, #0]
 80330e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80330e2:	2900      	cmp	r1, #0
 80330e4:	d188      	bne.n	8032ff8 <__ssvfscanf_r+0xeb4>
 80330e6:	e052      	b.n	803318e <__ssvfscanf_r+0x104a>
 80330e8:	0531      	lsls	r1, r6, #20
 80330ea:	d550      	bpl.n	803318e <__ssvfscanf_r+0x104a>
 80330ec:	eb1b 0c08 	adds.w	ip, fp, r8
 80330f0:	d041      	beq.n	8033176 <__ssvfscanf_r+0x1032>
 80330f2:	e04c      	b.n	803318e <__ssvfscanf_r+0x104a>
 80330f4:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 80330f8:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 80330fc:	d147      	bne.n	803318e <__ssvfscanf_r+0x104a>
 80330fe:	f1ba 0f01 	cmp.w	sl, #1
 8033102:	d144      	bne.n	803318e <__ssvfscanf_r+0x104a>
 8033104:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8033106:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 803310a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 803310e:	3901      	subs	r1, #1
 8033110:	f809 cb01 	strb.w	ip, [r9], #1
 8033114:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 8033118:	62f9      	str	r1, [r7, #44]	@ 0x2c
 803311a:	f04f 0a00 	mov.w	sl, #0
 803311e:	e003      	b.n	8033128 <__ssvfscanf_r+0xfe4>
 8033120:	0631      	lsls	r1, r6, #24
 8033122:	d534      	bpl.n	803318e <__ssvfscanf_r+0x104a>
 8033124:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8033128:	f809 0b01 	strb.w	r0, [r9], #1
 803312c:	e7c9      	b.n	80330c2 <__ssvfscanf_r+0xf7e>
 803312e:	f1bb 0f00 	cmp.w	fp, #0
 8033132:	d10c      	bne.n	803314e <__ssvfscanf_r+0x100a>
 8033134:	f1ba 0f00 	cmp.w	sl, #0
 8033138:	d10d      	bne.n	8033156 <__ssvfscanf_r+0x1012>
 803313a:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803313e:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 8033142:	d108      	bne.n	8033156 <__ssvfscanf_r+0x1012>
 8033144:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8033148:	f04f 0b01 	mov.w	fp, #1
 803314c:	e7ec      	b.n	8033128 <__ssvfscanf_r+0xfe4>
 803314e:	f1bb 0f02 	cmp.w	fp, #2
 8033152:	f000 8088 	beq.w	8033266 <__ssvfscanf_r+0x1122>
 8033156:	f1b8 0f01 	cmp.w	r8, #1
 803315a:	d002      	beq.n	8033162 <__ssvfscanf_r+0x101e>
 803315c:	f1b8 0f04 	cmp.w	r8, #4
 8033160:	d115      	bne.n	803318e <__ssvfscanf_r+0x104a>
 8033162:	f108 0801 	add.w	r8, r8, #1
 8033166:	fa5f f888 	uxtb.w	r8, r8
 803316a:	e7dd      	b.n	8033128 <__ssvfscanf_r+0xfe4>
 803316c:	0531      	lsls	r1, r6, #20
 803316e:	d50b      	bpl.n	8033188 <__ssvfscanf_r+0x1044>
 8033170:	eb1b 0c08 	adds.w	ip, fp, r8
 8033174:	d108      	bne.n	8033188 <__ssvfscanf_r+0x1044>
 8033176:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 803317a:	46e0      	mov	r8, ip
 803317c:	46e3      	mov	fp, ip
 803317e:	e7d3      	b.n	8033128 <__ssvfscanf_r+0xfe4>
 8033180:	0803c25c 	.word	0x0803c25c
 8033184:	08034ed9 	.word	0x08034ed9
 8033188:	f1bb 0f01 	cmp.w	fp, #1
 803318c:	d06e      	beq.n	803326c <__ssvfscanf_r+0x1128>
 803318e:	f1ba 0f00 	cmp.w	sl, #0
 8033192:	d001      	beq.n	8033198 <__ssvfscanf_r+0x1054>
 8033194:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8033198:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803319c:	f1bb 0f01 	cmp.w	fp, #1
 80331a0:	d873      	bhi.n	803328a <__ssvfscanf_r+0x1146>
 80331a2:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80331a6:	45a9      	cmp	r9, r5
 80331a8:	f67f a8c2 	bls.w	8032330 <__ssvfscanf_r+0x1ec>
 80331ac:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80331b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80331b2:	4622      	mov	r2, r4
 80331b4:	f7fc fdd6 	bl	802fd64 <_sungetc_r>
 80331b8:	e7f5      	b.n	80331a6 <__ssvfscanf_r+0x1062>
 80331ba:	f1b8 0f00 	cmp.w	r8, #0
 80331be:	d10d      	bne.n	80331dc <__ssvfscanf_r+0x1098>
 80331c0:	f1ba 0f00 	cmp.w	sl, #0
 80331c4:	d1e6      	bne.n	8033194 <__ssvfscanf_r+0x1050>
 80331c6:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 80331ca:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 80331ce:	f040 8124 	bne.w	803341a <__ssvfscanf_r+0x12d6>
 80331d2:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 80331d6:	f04f 0801 	mov.w	r8, #1
 80331da:	e7a5      	b.n	8033128 <__ssvfscanf_r+0xfe4>
 80331dc:	f1b8 0f03 	cmp.w	r8, #3
 80331e0:	d0bf      	beq.n	8033162 <__ssvfscanf_r+0x101e>
 80331e2:	f1b8 0f05 	cmp.w	r8, #5
 80331e6:	e7bb      	b.n	8033160 <__ssvfscanf_r+0x101c>
 80331e8:	0531      	lsls	r1, r6, #20
 80331ea:	d502      	bpl.n	80331f2 <__ssvfscanf_r+0x10ae>
 80331ec:	eb1b 0c08 	adds.w	ip, fp, r8
 80331f0:	d0c1      	beq.n	8033176 <__ssvfscanf_r+0x1032>
 80331f2:	f1b8 0f02 	cmp.w	r8, #2
 80331f6:	d1ca      	bne.n	803318e <__ssvfscanf_r+0x104a>
 80331f8:	f04f 0803 	mov.w	r8, #3
 80331fc:	e794      	b.n	8033128 <__ssvfscanf_r+0xfe4>
 80331fe:	f1b8 0f06 	cmp.w	r8, #6
 8033202:	d1c4      	bne.n	803318e <__ssvfscanf_r+0x104a>
 8033204:	f04f 0807 	mov.w	r8, #7
 8033208:	e78e      	b.n	8033128 <__ssvfscanf_r+0xfe4>
 803320a:	f1b8 0f07 	cmp.w	r8, #7
 803320e:	d1be      	bne.n	803318e <__ssvfscanf_r+0x104a>
 8033210:	f04f 0808 	mov.w	r8, #8
 8033214:	e788      	b.n	8033128 <__ssvfscanf_r+0xfe4>
 8033216:	0531      	lsls	r1, r6, #20
 8033218:	d5b9      	bpl.n	803318e <__ssvfscanf_r+0x104a>
 803321a:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 803321e:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 8033222:	d005      	beq.n	8033230 <__ssvfscanf_r+0x10ec>
 8033224:	0571      	lsls	r1, r6, #21
 8033226:	d5b2      	bpl.n	803318e <__ssvfscanf_r+0x104a>
 8033228:	f1ba 0f00 	cmp.w	sl, #0
 803322c:	f000 80f5 	beq.w	803341a <__ssvfscanf_r+0x12d6>
 8033230:	05b1      	lsls	r1, r6, #22
 8033232:	bf58      	it	pl
 8033234:	6939      	ldrpl	r1, [r7, #16]
 8033236:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 803323a:	bf5c      	itt	pl
 803323c:	ebaa 0101 	subpl.w	r1, sl, r1
 8033240:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 8033244:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 8033248:	e767      	b.n	803311a <__ssvfscanf_r+0xfd6>
 803324a:	0531      	lsls	r1, r6, #20
 803324c:	d5e5      	bpl.n	803321a <__ssvfscanf_r+0x10d6>
 803324e:	e74d      	b.n	80330ec <__ssvfscanf_r+0xfa8>
 8033250:	f892 c000 	ldrb.w	ip, [r2]
 8033254:	4584      	cmp	ip, r0
 8033256:	d19a      	bne.n	803318e <__ssvfscanf_r+0x104a>
 8033258:	05b1      	lsls	r1, r6, #22
 803325a:	d598      	bpl.n	803318e <__ssvfscanf_r+0x104a>
 803325c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8033260:	f8c7 a010 	str.w	sl, [r7, #16]
 8033264:	e760      	b.n	8033128 <__ssvfscanf_r+0xfe4>
 8033266:	f04f 0b03 	mov.w	fp, #3
 803326a:	e75d      	b.n	8033128 <__ssvfscanf_r+0xfe4>
 803326c:	f04f 0b02 	mov.w	fp, #2
 8033270:	e75a      	b.n	8033128 <__ssvfscanf_r+0xfe4>
 8033272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033274:	4621      	mov	r1, r4
 8033276:	e9c7 2300 	strd	r2, r3, [r7]
 803327a:	f7fc fdae 	bl	802fdda <__ssrefill_r>
 803327e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8033282:	2800      	cmp	r0, #0
 8033284:	f43f af2c 	beq.w	80330e0 <__ssvfscanf_r+0xf9c>
 8033288:	e781      	b.n	803318e <__ssvfscanf_r+0x104a>
 803328a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 803328e:	2b06      	cmp	r3, #6
 8033290:	d827      	bhi.n	80332e2 <__ssvfscanf_r+0x119e>
 8033292:	f1b8 0f02 	cmp.w	r8, #2
 8033296:	d834      	bhi.n	8033302 <__ssvfscanf_r+0x11be>
 8033298:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803329c:	45a9      	cmp	r9, r5
 803329e:	f67f a847 	bls.w	8032330 <__ssvfscanf_r+0x1ec>
 80332a2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80332a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80332a8:	4622      	mov	r2, r4
 80332aa:	f7fc fd5b 	bl	802fd64 <_sungetc_r>
 80332ae:	e7f5      	b.n	803329c <__ssvfscanf_r+0x1158>
 80332b0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80332b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80332b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80332b8:	4622      	mov	r2, r4
 80332ba:	f7fc fd53 	bl	802fd64 <_sungetc_r>
 80332be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80332c0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80332c4:	fa5f fb8b 	uxtb.w	fp, fp
 80332c8:	f1bb 0f02 	cmp.w	fp, #2
 80332cc:	d1f0      	bne.n	80332b0 <__ssvfscanf_r+0x116c>
 80332ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80332d0:	f1a8 0803 	sub.w	r8, r8, #3
 80332d4:	fa5f f888 	uxtb.w	r8, r8
 80332d8:	eba3 0308 	sub.w	r3, r3, r8
 80332dc:	eba9 0908 	sub.w	r9, r9, r8
 80332e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80332e2:	05f3      	lsls	r3, r6, #23
 80332e4:	d52d      	bpl.n	8033342 <__ssvfscanf_r+0x11fe>
 80332e6:	0570      	lsls	r0, r6, #21
 80332e8:	d50e      	bpl.n	8033308 <__ssvfscanf_r+0x11c4>
 80332ea:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80332ee:	45a9      	cmp	r9, r5
 80332f0:	f67f a81e 	bls.w	8032330 <__ssvfscanf_r+0x1ec>
 80332f4:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80332f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80332fa:	4622      	mov	r2, r4
 80332fc:	f7fc fd32 	bl	802fd64 <_sungetc_r>
 8033300:	e7f5      	b.n	80332ee <__ssvfscanf_r+0x11aa>
 8033302:	46c3      	mov	fp, r8
 8033304:	464b      	mov	r3, r9
 8033306:	e7db      	b.n	80332c0 <__ssvfscanf_r+0x117c>
 8033308:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 803330c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803330e:	2965      	cmp	r1, #101	@ 0x65
 8033310:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 8033314:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8033318:	d00c      	beq.n	8033334 <__ssvfscanf_r+0x11f0>
 803331a:	2945      	cmp	r1, #69	@ 0x45
 803331c:	d00a      	beq.n	8033334 <__ssvfscanf_r+0x11f0>
 803331e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033320:	4622      	mov	r2, r4
 8033322:	f7fc fd1f 	bl	802fd64 <_sungetc_r>
 8033326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033328:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 803332c:	f1a9 0802 	sub.w	r8, r9, #2
 8033330:	f1a3 0b02 	sub.w	fp, r3, #2
 8033334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033336:	4622      	mov	r2, r4
 8033338:	f7fc fd14 	bl	802fd64 <_sungetc_r>
 803333c:	46c1      	mov	r9, r8
 803333e:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 8033342:	f016 0210 	ands.w	r2, r6, #16
 8033346:	f47e af18 	bne.w	803217a <__ssvfscanf_r+0x36>
 803334a:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 803334e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8033352:	f889 2000 	strb.w	r2, [r9]
 8033356:	d119      	bne.n	803338c <__ssvfscanf_r+0x1248>
 8033358:	693b      	ldr	r3, [r7, #16]
 803335a:	4553      	cmp	r3, sl
 803335c:	eba3 020a 	sub.w	r2, r3, sl
 8033360:	d121      	bne.n	80333a6 <__ssvfscanf_r+0x1262>
 8033362:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8033366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033368:	2200      	movs	r2, #0
 803336a:	f001 fd41 	bl	8034df0 <_strtod_r>
 803336e:	07f1      	lsls	r1, r6, #31
 8033370:	ec59 8b10 	vmov	r8, r9, d0
 8033374:	f105 0a04 	add.w	sl, r5, #4
 8033378:	d520      	bpl.n	80333bc <__ssvfscanf_r+0x1278>
 803337a:	682b      	ldr	r3, [r5, #0]
 803337c:	ed83 0b00 	vstr	d0, [r3]
 8033380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033382:	3301      	adds	r3, #1
 8033384:	627b      	str	r3, [r7, #36]	@ 0x24
 8033386:	4655      	mov	r5, sl
 8033388:	f7fe bef7 	b.w	803217a <__ssvfscanf_r+0x36>
 803338c:	68fb      	ldr	r3, [r7, #12]
 803338e:	2b00      	cmp	r3, #0
 8033390:	d0e7      	beq.n	8033362 <__ssvfscanf_r+0x121e>
 8033392:	68b9      	ldr	r1, [r7, #8]
 8033394:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033396:	230a      	movs	r3, #10
 8033398:	3101      	adds	r1, #1
 803339a:	f7f8 fe9d 	bl	802c0d8 <_strtol_r>
 803339e:	68fb      	ldr	r3, [r7, #12]
 80333a0:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80333a4:	1ac2      	subs	r2, r0, r3
 80333a6:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 80333aa:	4599      	cmp	r9, r3
 80333ac:	bf28      	it	cs
 80333ae:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 80333b2:	491b      	ldr	r1, [pc, #108]	@ (8033420 <__ssvfscanf_r+0x12dc>)
 80333b4:	4648      	mov	r0, r9
 80333b6:	f7f8 ff49 	bl	802c24c <sprintf>
 80333ba:	e7d2      	b.n	8033362 <__ssvfscanf_r+0x121e>
 80333bc:	07b2      	lsls	r2, r6, #30
 80333be:	682d      	ldr	r5, [r5, #0]
 80333c0:	d502      	bpl.n	80333c8 <__ssvfscanf_r+0x1284>
 80333c2:	ed85 0b00 	vstr	d0, [r5]
 80333c6:	e7db      	b.n	8033380 <__ssvfscanf_r+0x123c>
 80333c8:	4642      	mov	r2, r8
 80333ca:	464b      	mov	r3, r9
 80333cc:	4640      	mov	r0, r8
 80333ce:	4649      	mov	r1, r9
 80333d0:	f7dd fbc4 	bl	8010b5c <__aeabi_dcmpun>
 80333d4:	b128      	cbz	r0, 80333e2 <__ssvfscanf_r+0x129e>
 80333d6:	4813      	ldr	r0, [pc, #76]	@ (8033424 <__ssvfscanf_r+0x12e0>)
 80333d8:	f002 f8f6 	bl	80355c8 <nanf>
 80333dc:	ed85 0a00 	vstr	s0, [r5]
 80333e0:	e7ce      	b.n	8033380 <__ssvfscanf_r+0x123c>
 80333e2:	4640      	mov	r0, r8
 80333e4:	4649      	mov	r1, r9
 80333e6:	f7dd fc17 	bl	8010c18 <__aeabi_d2f>
 80333ea:	6028      	str	r0, [r5, #0]
 80333ec:	e7c8      	b.n	8033380 <__ssvfscanf_r+0x123c>
 80333ee:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80333f2:	6818      	ldr	r0, [r3, #0]
 80333f4:	f7fb fd3a 	bl	802ee6c <free>
 80333f8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80333fc:	3401      	adds	r4, #1
 80333fe:	601e      	str	r6, [r3, #0]
 8033400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033402:	681d      	ldr	r5, [r3, #0]
 8033404:	88db      	ldrh	r3, [r3, #6]
 8033406:	42a3      	cmp	r3, r4
 8033408:	dcf1      	bgt.n	80333ee <__ssvfscanf_r+0x12aa>
 803340a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803340e:	627b      	str	r3, [r7, #36]	@ 0x24
 8033410:	f7ff b85c 	b.w	80324cc <__ssvfscanf_r+0x388>
 8033414:	2400      	movs	r4, #0
 8033416:	4626      	mov	r6, r4
 8033418:	e7f2      	b.n	8033400 <__ssvfscanf_r+0x12bc>
 803341a:	f04f 0a00 	mov.w	sl, #0
 803341e:	e6bb      	b.n	8033198 <__ssvfscanf_r+0x1054>
 8033420:	0803c256 	.word	0x0803c256
 8033424:	0803bcbe 	.word	0x0803bcbe

08033428 <_putc_r>:
 8033428:	b570      	push	{r4, r5, r6, lr}
 803342a:	460d      	mov	r5, r1
 803342c:	4614      	mov	r4, r2
 803342e:	4606      	mov	r6, r0
 8033430:	b118      	cbz	r0, 803343a <_putc_r+0x12>
 8033432:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8033434:	b90b      	cbnz	r3, 803343a <_putc_r+0x12>
 8033436:	f7f9 f825 	bl	802c484 <__sinit>
 803343a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803343c:	07d8      	lsls	r0, r3, #31
 803343e:	d405      	bmi.n	803344c <_putc_r+0x24>
 8033440:	89a3      	ldrh	r3, [r4, #12]
 8033442:	0599      	lsls	r1, r3, #22
 8033444:	d402      	bmi.n	803344c <_putc_r+0x24>
 8033446:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033448:	f7fa fcfb 	bl	802de42 <__retarget_lock_acquire_recursive>
 803344c:	68a3      	ldr	r3, [r4, #8]
 803344e:	3b01      	subs	r3, #1
 8033450:	2b00      	cmp	r3, #0
 8033452:	60a3      	str	r3, [r4, #8]
 8033454:	da05      	bge.n	8033462 <_putc_r+0x3a>
 8033456:	69a2      	ldr	r2, [r4, #24]
 8033458:	4293      	cmp	r3, r2
 803345a:	db12      	blt.n	8033482 <_putc_r+0x5a>
 803345c:	b2eb      	uxtb	r3, r5
 803345e:	2b0a      	cmp	r3, #10
 8033460:	d00f      	beq.n	8033482 <_putc_r+0x5a>
 8033462:	6823      	ldr	r3, [r4, #0]
 8033464:	1c5a      	adds	r2, r3, #1
 8033466:	6022      	str	r2, [r4, #0]
 8033468:	701d      	strb	r5, [r3, #0]
 803346a:	b2ed      	uxtb	r5, r5
 803346c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803346e:	07da      	lsls	r2, r3, #31
 8033470:	d405      	bmi.n	803347e <_putc_r+0x56>
 8033472:	89a3      	ldrh	r3, [r4, #12]
 8033474:	059b      	lsls	r3, r3, #22
 8033476:	d402      	bmi.n	803347e <_putc_r+0x56>
 8033478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803347a:	f7fa fce4 	bl	802de46 <__retarget_lock_release_recursive>
 803347e:	4628      	mov	r0, r5
 8033480:	bd70      	pop	{r4, r5, r6, pc}
 8033482:	4629      	mov	r1, r5
 8033484:	4622      	mov	r2, r4
 8033486:	4630      	mov	r0, r6
 8033488:	f001 fd79 	bl	8034f7e <__swbuf_r>
 803348c:	4605      	mov	r5, r0
 803348e:	e7ed      	b.n	803346c <_putc_r+0x44>

08033490 <__malloc_lock>:
 8033490:	4801      	ldr	r0, [pc, #4]	@ (8033498 <__malloc_lock+0x8>)
 8033492:	f7fa bcd6 	b.w	802de42 <__retarget_lock_acquire_recursive>
 8033496:	bf00      	nop
 8033498:	2001a04a 	.word	0x2001a04a

0803349c <__malloc_unlock>:
 803349c:	4801      	ldr	r0, [pc, #4]	@ (80334a4 <__malloc_unlock+0x8>)
 803349e:	f7fa bcd2 	b.w	802de46 <__retarget_lock_release_recursive>
 80334a2:	bf00      	nop
 80334a4:	2001a04a 	.word	0x2001a04a

080334a8 <_Balloc>:
 80334a8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80334aa:	b570      	push	{r4, r5, r6, lr}
 80334ac:	4605      	mov	r5, r0
 80334ae:	460c      	mov	r4, r1
 80334b0:	b17b      	cbz	r3, 80334d2 <_Balloc+0x2a>
 80334b2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80334b4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80334b8:	b9a0      	cbnz	r0, 80334e4 <_Balloc+0x3c>
 80334ba:	2101      	movs	r1, #1
 80334bc:	fa01 f604 	lsl.w	r6, r1, r4
 80334c0:	1d72      	adds	r2, r6, #5
 80334c2:	0092      	lsls	r2, r2, #2
 80334c4:	4628      	mov	r0, r5
 80334c6:	f002 f885 	bl	80355d4 <_calloc_r>
 80334ca:	b148      	cbz	r0, 80334e0 <_Balloc+0x38>
 80334cc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80334d0:	e00b      	b.n	80334ea <_Balloc+0x42>
 80334d2:	2221      	movs	r2, #33	@ 0x21
 80334d4:	2104      	movs	r1, #4
 80334d6:	f002 f87d 	bl	80355d4 <_calloc_r>
 80334da:	6468      	str	r0, [r5, #68]	@ 0x44
 80334dc:	2800      	cmp	r0, #0
 80334de:	d1e8      	bne.n	80334b2 <_Balloc+0xa>
 80334e0:	2000      	movs	r0, #0
 80334e2:	bd70      	pop	{r4, r5, r6, pc}
 80334e4:	6802      	ldr	r2, [r0, #0]
 80334e6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80334ea:	2300      	movs	r3, #0
 80334ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80334f0:	e7f7      	b.n	80334e2 <_Balloc+0x3a>

080334f2 <_Bfree>:
 80334f2:	b131      	cbz	r1, 8033502 <_Bfree+0x10>
 80334f4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80334f6:	684a      	ldr	r2, [r1, #4]
 80334f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80334fc:	6008      	str	r0, [r1, #0]
 80334fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8033502:	4770      	bx	lr

08033504 <__multadd>:
 8033504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033508:	690d      	ldr	r5, [r1, #16]
 803350a:	4607      	mov	r7, r0
 803350c:	460c      	mov	r4, r1
 803350e:	461e      	mov	r6, r3
 8033510:	f101 0c14 	add.w	ip, r1, #20
 8033514:	2000      	movs	r0, #0
 8033516:	f8dc 3000 	ldr.w	r3, [ip]
 803351a:	b299      	uxth	r1, r3
 803351c:	fb02 6101 	mla	r1, r2, r1, r6
 8033520:	0c1e      	lsrs	r6, r3, #16
 8033522:	0c0b      	lsrs	r3, r1, #16
 8033524:	fb02 3306 	mla	r3, r2, r6, r3
 8033528:	b289      	uxth	r1, r1
 803352a:	3001      	adds	r0, #1
 803352c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8033530:	4285      	cmp	r5, r0
 8033532:	f84c 1b04 	str.w	r1, [ip], #4
 8033536:	ea4f 4613 	mov.w	r6, r3, lsr #16
 803353a:	dcec      	bgt.n	8033516 <__multadd+0x12>
 803353c:	b30e      	cbz	r6, 8033582 <__multadd+0x7e>
 803353e:	68a3      	ldr	r3, [r4, #8]
 8033540:	42ab      	cmp	r3, r5
 8033542:	dc19      	bgt.n	8033578 <__multadd+0x74>
 8033544:	6861      	ldr	r1, [r4, #4]
 8033546:	4638      	mov	r0, r7
 8033548:	3101      	adds	r1, #1
 803354a:	f7ff ffad 	bl	80334a8 <_Balloc>
 803354e:	4680      	mov	r8, r0
 8033550:	b928      	cbnz	r0, 803355e <__multadd+0x5a>
 8033552:	4602      	mov	r2, r0
 8033554:	4b0c      	ldr	r3, [pc, #48]	@ (8033588 <__multadd+0x84>)
 8033556:	480d      	ldr	r0, [pc, #52]	@ (803358c <__multadd+0x88>)
 8033558:	21ba      	movs	r1, #186	@ 0xba
 803355a:	f7f6 fce7 	bl	8029f2c <__assert_func>
 803355e:	6922      	ldr	r2, [r4, #16]
 8033560:	3202      	adds	r2, #2
 8033562:	f104 010c 	add.w	r1, r4, #12
 8033566:	0092      	lsls	r2, r2, #2
 8033568:	300c      	adds	r0, #12
 803356a:	f7fa fc6d 	bl	802de48 <memcpy>
 803356e:	4621      	mov	r1, r4
 8033570:	4638      	mov	r0, r7
 8033572:	f7ff ffbe 	bl	80334f2 <_Bfree>
 8033576:	4644      	mov	r4, r8
 8033578:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 803357c:	3501      	adds	r5, #1
 803357e:	615e      	str	r6, [r3, #20]
 8033580:	6125      	str	r5, [r4, #16]
 8033582:	4620      	mov	r0, r4
 8033584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033588:	0803c18a 	.word	0x0803c18a
 803358c:	0803c27e 	.word	0x0803c27e

08033590 <__s2b>:
 8033590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8033594:	460c      	mov	r4, r1
 8033596:	4615      	mov	r5, r2
 8033598:	461f      	mov	r7, r3
 803359a:	2209      	movs	r2, #9
 803359c:	3308      	adds	r3, #8
 803359e:	4606      	mov	r6, r0
 80335a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80335a4:	2100      	movs	r1, #0
 80335a6:	2201      	movs	r2, #1
 80335a8:	429a      	cmp	r2, r3
 80335aa:	db09      	blt.n	80335c0 <__s2b+0x30>
 80335ac:	4630      	mov	r0, r6
 80335ae:	f7ff ff7b 	bl	80334a8 <_Balloc>
 80335b2:	b940      	cbnz	r0, 80335c6 <__s2b+0x36>
 80335b4:	4602      	mov	r2, r0
 80335b6:	4b19      	ldr	r3, [pc, #100]	@ (803361c <__s2b+0x8c>)
 80335b8:	4819      	ldr	r0, [pc, #100]	@ (8033620 <__s2b+0x90>)
 80335ba:	21d3      	movs	r1, #211	@ 0xd3
 80335bc:	f7f6 fcb6 	bl	8029f2c <__assert_func>
 80335c0:	0052      	lsls	r2, r2, #1
 80335c2:	3101      	adds	r1, #1
 80335c4:	e7f0      	b.n	80335a8 <__s2b+0x18>
 80335c6:	9b08      	ldr	r3, [sp, #32]
 80335c8:	6143      	str	r3, [r0, #20]
 80335ca:	2d09      	cmp	r5, #9
 80335cc:	f04f 0301 	mov.w	r3, #1
 80335d0:	6103      	str	r3, [r0, #16]
 80335d2:	dd16      	ble.n	8033602 <__s2b+0x72>
 80335d4:	f104 0909 	add.w	r9, r4, #9
 80335d8:	46c8      	mov	r8, r9
 80335da:	442c      	add	r4, r5
 80335dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80335e0:	4601      	mov	r1, r0
 80335e2:	3b30      	subs	r3, #48	@ 0x30
 80335e4:	220a      	movs	r2, #10
 80335e6:	4630      	mov	r0, r6
 80335e8:	f7ff ff8c 	bl	8033504 <__multadd>
 80335ec:	45a0      	cmp	r8, r4
 80335ee:	d1f5      	bne.n	80335dc <__s2b+0x4c>
 80335f0:	f1a5 0408 	sub.w	r4, r5, #8
 80335f4:	444c      	add	r4, r9
 80335f6:	1b2d      	subs	r5, r5, r4
 80335f8:	1963      	adds	r3, r4, r5
 80335fa:	42bb      	cmp	r3, r7
 80335fc:	db04      	blt.n	8033608 <__s2b+0x78>
 80335fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8033602:	340a      	adds	r4, #10
 8033604:	2509      	movs	r5, #9
 8033606:	e7f6      	b.n	80335f6 <__s2b+0x66>
 8033608:	f814 3b01 	ldrb.w	r3, [r4], #1
 803360c:	4601      	mov	r1, r0
 803360e:	3b30      	subs	r3, #48	@ 0x30
 8033610:	220a      	movs	r2, #10
 8033612:	4630      	mov	r0, r6
 8033614:	f7ff ff76 	bl	8033504 <__multadd>
 8033618:	e7ee      	b.n	80335f8 <__s2b+0x68>
 803361a:	bf00      	nop
 803361c:	0803c18a 	.word	0x0803c18a
 8033620:	0803c27e 	.word	0x0803c27e

08033624 <__hi0bits>:
 8033624:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8033628:	4603      	mov	r3, r0
 803362a:	bf36      	itet	cc
 803362c:	0403      	lslcc	r3, r0, #16
 803362e:	2000      	movcs	r0, #0
 8033630:	2010      	movcc	r0, #16
 8033632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8033636:	bf3c      	itt	cc
 8033638:	021b      	lslcc	r3, r3, #8
 803363a:	3008      	addcc	r0, #8
 803363c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8033640:	bf3c      	itt	cc
 8033642:	011b      	lslcc	r3, r3, #4
 8033644:	3004      	addcc	r0, #4
 8033646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803364a:	bf3c      	itt	cc
 803364c:	009b      	lslcc	r3, r3, #2
 803364e:	3002      	addcc	r0, #2
 8033650:	2b00      	cmp	r3, #0
 8033652:	db05      	blt.n	8033660 <__hi0bits+0x3c>
 8033654:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8033658:	f100 0001 	add.w	r0, r0, #1
 803365c:	bf08      	it	eq
 803365e:	2020      	moveq	r0, #32
 8033660:	4770      	bx	lr

08033662 <__lo0bits>:
 8033662:	6803      	ldr	r3, [r0, #0]
 8033664:	4602      	mov	r2, r0
 8033666:	f013 0007 	ands.w	r0, r3, #7
 803366a:	d00b      	beq.n	8033684 <__lo0bits+0x22>
 803366c:	07d9      	lsls	r1, r3, #31
 803366e:	d421      	bmi.n	80336b4 <__lo0bits+0x52>
 8033670:	0798      	lsls	r0, r3, #30
 8033672:	bf49      	itett	mi
 8033674:	085b      	lsrmi	r3, r3, #1
 8033676:	089b      	lsrpl	r3, r3, #2
 8033678:	2001      	movmi	r0, #1
 803367a:	6013      	strmi	r3, [r2, #0]
 803367c:	bf5c      	itt	pl
 803367e:	6013      	strpl	r3, [r2, #0]
 8033680:	2002      	movpl	r0, #2
 8033682:	4770      	bx	lr
 8033684:	b299      	uxth	r1, r3
 8033686:	b909      	cbnz	r1, 803368c <__lo0bits+0x2a>
 8033688:	0c1b      	lsrs	r3, r3, #16
 803368a:	2010      	movs	r0, #16
 803368c:	b2d9      	uxtb	r1, r3
 803368e:	b909      	cbnz	r1, 8033694 <__lo0bits+0x32>
 8033690:	3008      	adds	r0, #8
 8033692:	0a1b      	lsrs	r3, r3, #8
 8033694:	0719      	lsls	r1, r3, #28
 8033696:	bf04      	itt	eq
 8033698:	091b      	lsreq	r3, r3, #4
 803369a:	3004      	addeq	r0, #4
 803369c:	0799      	lsls	r1, r3, #30
 803369e:	bf04      	itt	eq
 80336a0:	089b      	lsreq	r3, r3, #2
 80336a2:	3002      	addeq	r0, #2
 80336a4:	07d9      	lsls	r1, r3, #31
 80336a6:	d403      	bmi.n	80336b0 <__lo0bits+0x4e>
 80336a8:	085b      	lsrs	r3, r3, #1
 80336aa:	f100 0001 	add.w	r0, r0, #1
 80336ae:	d003      	beq.n	80336b8 <__lo0bits+0x56>
 80336b0:	6013      	str	r3, [r2, #0]
 80336b2:	4770      	bx	lr
 80336b4:	2000      	movs	r0, #0
 80336b6:	4770      	bx	lr
 80336b8:	2020      	movs	r0, #32
 80336ba:	4770      	bx	lr

080336bc <__i2b>:
 80336bc:	b510      	push	{r4, lr}
 80336be:	460c      	mov	r4, r1
 80336c0:	2101      	movs	r1, #1
 80336c2:	f7ff fef1 	bl	80334a8 <_Balloc>
 80336c6:	4602      	mov	r2, r0
 80336c8:	b928      	cbnz	r0, 80336d6 <__i2b+0x1a>
 80336ca:	4b05      	ldr	r3, [pc, #20]	@ (80336e0 <__i2b+0x24>)
 80336cc:	4805      	ldr	r0, [pc, #20]	@ (80336e4 <__i2b+0x28>)
 80336ce:	f240 1145 	movw	r1, #325	@ 0x145
 80336d2:	f7f6 fc2b 	bl	8029f2c <__assert_func>
 80336d6:	2301      	movs	r3, #1
 80336d8:	6144      	str	r4, [r0, #20]
 80336da:	6103      	str	r3, [r0, #16]
 80336dc:	bd10      	pop	{r4, pc}
 80336de:	bf00      	nop
 80336e0:	0803c18a 	.word	0x0803c18a
 80336e4:	0803c27e 	.word	0x0803c27e

080336e8 <__multiply>:
 80336e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80336ec:	4614      	mov	r4, r2
 80336ee:	690a      	ldr	r2, [r1, #16]
 80336f0:	6923      	ldr	r3, [r4, #16]
 80336f2:	429a      	cmp	r2, r3
 80336f4:	bfa8      	it	ge
 80336f6:	4623      	movge	r3, r4
 80336f8:	460f      	mov	r7, r1
 80336fa:	bfa4      	itt	ge
 80336fc:	460c      	movge	r4, r1
 80336fe:	461f      	movge	r7, r3
 8033700:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8033704:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8033708:	68a3      	ldr	r3, [r4, #8]
 803370a:	6861      	ldr	r1, [r4, #4]
 803370c:	eb0a 0609 	add.w	r6, sl, r9
 8033710:	42b3      	cmp	r3, r6
 8033712:	b085      	sub	sp, #20
 8033714:	bfb8      	it	lt
 8033716:	3101      	addlt	r1, #1
 8033718:	f7ff fec6 	bl	80334a8 <_Balloc>
 803371c:	b930      	cbnz	r0, 803372c <__multiply+0x44>
 803371e:	4602      	mov	r2, r0
 8033720:	4b44      	ldr	r3, [pc, #272]	@ (8033834 <__multiply+0x14c>)
 8033722:	4845      	ldr	r0, [pc, #276]	@ (8033838 <__multiply+0x150>)
 8033724:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8033728:	f7f6 fc00 	bl	8029f2c <__assert_func>
 803372c:	f100 0514 	add.w	r5, r0, #20
 8033730:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8033734:	462b      	mov	r3, r5
 8033736:	2200      	movs	r2, #0
 8033738:	4543      	cmp	r3, r8
 803373a:	d321      	bcc.n	8033780 <__multiply+0x98>
 803373c:	f107 0114 	add.w	r1, r7, #20
 8033740:	f104 0214 	add.w	r2, r4, #20
 8033744:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8033748:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 803374c:	9302      	str	r3, [sp, #8]
 803374e:	1b13      	subs	r3, r2, r4
 8033750:	3b15      	subs	r3, #21
 8033752:	f023 0303 	bic.w	r3, r3, #3
 8033756:	3304      	adds	r3, #4
 8033758:	f104 0715 	add.w	r7, r4, #21
 803375c:	42ba      	cmp	r2, r7
 803375e:	bf38      	it	cc
 8033760:	2304      	movcc	r3, #4
 8033762:	9301      	str	r3, [sp, #4]
 8033764:	9b02      	ldr	r3, [sp, #8]
 8033766:	9103      	str	r1, [sp, #12]
 8033768:	428b      	cmp	r3, r1
 803376a:	d80c      	bhi.n	8033786 <__multiply+0x9e>
 803376c:	2e00      	cmp	r6, #0
 803376e:	dd03      	ble.n	8033778 <__multiply+0x90>
 8033770:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8033774:	2b00      	cmp	r3, #0
 8033776:	d05b      	beq.n	8033830 <__multiply+0x148>
 8033778:	6106      	str	r6, [r0, #16]
 803377a:	b005      	add	sp, #20
 803377c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033780:	f843 2b04 	str.w	r2, [r3], #4
 8033784:	e7d8      	b.n	8033738 <__multiply+0x50>
 8033786:	f8b1 a000 	ldrh.w	sl, [r1]
 803378a:	f1ba 0f00 	cmp.w	sl, #0
 803378e:	d024      	beq.n	80337da <__multiply+0xf2>
 8033790:	f104 0e14 	add.w	lr, r4, #20
 8033794:	46a9      	mov	r9, r5
 8033796:	f04f 0c00 	mov.w	ip, #0
 803379a:	f85e 7b04 	ldr.w	r7, [lr], #4
 803379e:	f8d9 3000 	ldr.w	r3, [r9]
 80337a2:	fa1f fb87 	uxth.w	fp, r7
 80337a6:	b29b      	uxth	r3, r3
 80337a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80337ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80337b0:	f8d9 7000 	ldr.w	r7, [r9]
 80337b4:	4463      	add	r3, ip
 80337b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80337ba:	fb0a c70b 	mla	r7, sl, fp, ip
 80337be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80337c2:	b29b      	uxth	r3, r3
 80337c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80337c8:	4572      	cmp	r2, lr
 80337ca:	f849 3b04 	str.w	r3, [r9], #4
 80337ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80337d2:	d8e2      	bhi.n	803379a <__multiply+0xb2>
 80337d4:	9b01      	ldr	r3, [sp, #4]
 80337d6:	f845 c003 	str.w	ip, [r5, r3]
 80337da:	9b03      	ldr	r3, [sp, #12]
 80337dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80337e0:	3104      	adds	r1, #4
 80337e2:	f1b9 0f00 	cmp.w	r9, #0
 80337e6:	d021      	beq.n	803382c <__multiply+0x144>
 80337e8:	682b      	ldr	r3, [r5, #0]
 80337ea:	f104 0c14 	add.w	ip, r4, #20
 80337ee:	46ae      	mov	lr, r5
 80337f0:	f04f 0a00 	mov.w	sl, #0
 80337f4:	f8bc b000 	ldrh.w	fp, [ip]
 80337f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80337fc:	fb09 770b 	mla	r7, r9, fp, r7
 8033800:	4457      	add	r7, sl
 8033802:	b29b      	uxth	r3, r3
 8033804:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8033808:	f84e 3b04 	str.w	r3, [lr], #4
 803380c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8033810:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8033814:	f8be 3000 	ldrh.w	r3, [lr]
 8033818:	fb09 330a 	mla	r3, r9, sl, r3
 803381c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8033820:	4562      	cmp	r2, ip
 8033822:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8033826:	d8e5      	bhi.n	80337f4 <__multiply+0x10c>
 8033828:	9f01      	ldr	r7, [sp, #4]
 803382a:	51eb      	str	r3, [r5, r7]
 803382c:	3504      	adds	r5, #4
 803382e:	e799      	b.n	8033764 <__multiply+0x7c>
 8033830:	3e01      	subs	r6, #1
 8033832:	e79b      	b.n	803376c <__multiply+0x84>
 8033834:	0803c18a 	.word	0x0803c18a
 8033838:	0803c27e 	.word	0x0803c27e

0803383c <__pow5mult>:
 803383c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8033840:	4615      	mov	r5, r2
 8033842:	f012 0203 	ands.w	r2, r2, #3
 8033846:	4607      	mov	r7, r0
 8033848:	460e      	mov	r6, r1
 803384a:	d007      	beq.n	803385c <__pow5mult+0x20>
 803384c:	4c1a      	ldr	r4, [pc, #104]	@ (80338b8 <__pow5mult+0x7c>)
 803384e:	3a01      	subs	r2, #1
 8033850:	2300      	movs	r3, #0
 8033852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8033856:	f7ff fe55 	bl	8033504 <__multadd>
 803385a:	4606      	mov	r6, r0
 803385c:	10ad      	asrs	r5, r5, #2
 803385e:	d027      	beq.n	80338b0 <__pow5mult+0x74>
 8033860:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8033862:	b944      	cbnz	r4, 8033876 <__pow5mult+0x3a>
 8033864:	f240 2171 	movw	r1, #625	@ 0x271
 8033868:	4638      	mov	r0, r7
 803386a:	f7ff ff27 	bl	80336bc <__i2b>
 803386e:	2300      	movs	r3, #0
 8033870:	6438      	str	r0, [r7, #64]	@ 0x40
 8033872:	4604      	mov	r4, r0
 8033874:	6003      	str	r3, [r0, #0]
 8033876:	f04f 0900 	mov.w	r9, #0
 803387a:	07eb      	lsls	r3, r5, #31
 803387c:	d50a      	bpl.n	8033894 <__pow5mult+0x58>
 803387e:	4631      	mov	r1, r6
 8033880:	4622      	mov	r2, r4
 8033882:	4638      	mov	r0, r7
 8033884:	f7ff ff30 	bl	80336e8 <__multiply>
 8033888:	4631      	mov	r1, r6
 803388a:	4680      	mov	r8, r0
 803388c:	4638      	mov	r0, r7
 803388e:	f7ff fe30 	bl	80334f2 <_Bfree>
 8033892:	4646      	mov	r6, r8
 8033894:	106d      	asrs	r5, r5, #1
 8033896:	d00b      	beq.n	80338b0 <__pow5mult+0x74>
 8033898:	6820      	ldr	r0, [r4, #0]
 803389a:	b938      	cbnz	r0, 80338ac <__pow5mult+0x70>
 803389c:	4622      	mov	r2, r4
 803389e:	4621      	mov	r1, r4
 80338a0:	4638      	mov	r0, r7
 80338a2:	f7ff ff21 	bl	80336e8 <__multiply>
 80338a6:	6020      	str	r0, [r4, #0]
 80338a8:	f8c0 9000 	str.w	r9, [r0]
 80338ac:	4604      	mov	r4, r0
 80338ae:	e7e4      	b.n	803387a <__pow5mult+0x3e>
 80338b0:	4630      	mov	r0, r6
 80338b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80338b6:	bf00      	nop
 80338b8:	0803c2d8 	.word	0x0803c2d8

080338bc <__lshift>:
 80338bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80338c0:	460c      	mov	r4, r1
 80338c2:	6849      	ldr	r1, [r1, #4]
 80338c4:	6923      	ldr	r3, [r4, #16]
 80338c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80338ca:	68a3      	ldr	r3, [r4, #8]
 80338cc:	4607      	mov	r7, r0
 80338ce:	4691      	mov	r9, r2
 80338d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80338d4:	f108 0601 	add.w	r6, r8, #1
 80338d8:	42b3      	cmp	r3, r6
 80338da:	db0b      	blt.n	80338f4 <__lshift+0x38>
 80338dc:	4638      	mov	r0, r7
 80338de:	f7ff fde3 	bl	80334a8 <_Balloc>
 80338e2:	4605      	mov	r5, r0
 80338e4:	b948      	cbnz	r0, 80338fa <__lshift+0x3e>
 80338e6:	4602      	mov	r2, r0
 80338e8:	4b28      	ldr	r3, [pc, #160]	@ (803398c <__lshift+0xd0>)
 80338ea:	4829      	ldr	r0, [pc, #164]	@ (8033990 <__lshift+0xd4>)
 80338ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80338f0:	f7f6 fb1c 	bl	8029f2c <__assert_func>
 80338f4:	3101      	adds	r1, #1
 80338f6:	005b      	lsls	r3, r3, #1
 80338f8:	e7ee      	b.n	80338d8 <__lshift+0x1c>
 80338fa:	2300      	movs	r3, #0
 80338fc:	f100 0114 	add.w	r1, r0, #20
 8033900:	f100 0210 	add.w	r2, r0, #16
 8033904:	4618      	mov	r0, r3
 8033906:	4553      	cmp	r3, sl
 8033908:	db33      	blt.n	8033972 <__lshift+0xb6>
 803390a:	6920      	ldr	r0, [r4, #16]
 803390c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8033910:	f104 0314 	add.w	r3, r4, #20
 8033914:	f019 091f 	ands.w	r9, r9, #31
 8033918:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 803391c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8033920:	d02b      	beq.n	803397a <__lshift+0xbe>
 8033922:	f1c9 0e20 	rsb	lr, r9, #32
 8033926:	468a      	mov	sl, r1
 8033928:	2200      	movs	r2, #0
 803392a:	6818      	ldr	r0, [r3, #0]
 803392c:	fa00 f009 	lsl.w	r0, r0, r9
 8033930:	4310      	orrs	r0, r2
 8033932:	f84a 0b04 	str.w	r0, [sl], #4
 8033936:	f853 2b04 	ldr.w	r2, [r3], #4
 803393a:	459c      	cmp	ip, r3
 803393c:	fa22 f20e 	lsr.w	r2, r2, lr
 8033940:	d8f3      	bhi.n	803392a <__lshift+0x6e>
 8033942:	ebac 0304 	sub.w	r3, ip, r4
 8033946:	3b15      	subs	r3, #21
 8033948:	f023 0303 	bic.w	r3, r3, #3
 803394c:	3304      	adds	r3, #4
 803394e:	f104 0015 	add.w	r0, r4, #21
 8033952:	4584      	cmp	ip, r0
 8033954:	bf38      	it	cc
 8033956:	2304      	movcc	r3, #4
 8033958:	50ca      	str	r2, [r1, r3]
 803395a:	b10a      	cbz	r2, 8033960 <__lshift+0xa4>
 803395c:	f108 0602 	add.w	r6, r8, #2
 8033960:	3e01      	subs	r6, #1
 8033962:	4638      	mov	r0, r7
 8033964:	612e      	str	r6, [r5, #16]
 8033966:	4621      	mov	r1, r4
 8033968:	f7ff fdc3 	bl	80334f2 <_Bfree>
 803396c:	4628      	mov	r0, r5
 803396e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8033972:	f842 0f04 	str.w	r0, [r2, #4]!
 8033976:	3301      	adds	r3, #1
 8033978:	e7c5      	b.n	8033906 <__lshift+0x4a>
 803397a:	3904      	subs	r1, #4
 803397c:	f853 2b04 	ldr.w	r2, [r3], #4
 8033980:	f841 2f04 	str.w	r2, [r1, #4]!
 8033984:	459c      	cmp	ip, r3
 8033986:	d8f9      	bhi.n	803397c <__lshift+0xc0>
 8033988:	e7ea      	b.n	8033960 <__lshift+0xa4>
 803398a:	bf00      	nop
 803398c:	0803c18a 	.word	0x0803c18a
 8033990:	0803c27e 	.word	0x0803c27e

08033994 <__mcmp>:
 8033994:	690a      	ldr	r2, [r1, #16]
 8033996:	4603      	mov	r3, r0
 8033998:	6900      	ldr	r0, [r0, #16]
 803399a:	1a80      	subs	r0, r0, r2
 803399c:	b530      	push	{r4, r5, lr}
 803399e:	d10e      	bne.n	80339be <__mcmp+0x2a>
 80339a0:	3314      	adds	r3, #20
 80339a2:	3114      	adds	r1, #20
 80339a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80339a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80339ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80339b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80339b4:	4295      	cmp	r5, r2
 80339b6:	d003      	beq.n	80339c0 <__mcmp+0x2c>
 80339b8:	d205      	bcs.n	80339c6 <__mcmp+0x32>
 80339ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80339be:	bd30      	pop	{r4, r5, pc}
 80339c0:	42a3      	cmp	r3, r4
 80339c2:	d3f3      	bcc.n	80339ac <__mcmp+0x18>
 80339c4:	e7fb      	b.n	80339be <__mcmp+0x2a>
 80339c6:	2001      	movs	r0, #1
 80339c8:	e7f9      	b.n	80339be <__mcmp+0x2a>
	...

080339cc <__mdiff>:
 80339cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80339d0:	4689      	mov	r9, r1
 80339d2:	4606      	mov	r6, r0
 80339d4:	4611      	mov	r1, r2
 80339d6:	4648      	mov	r0, r9
 80339d8:	4614      	mov	r4, r2
 80339da:	f7ff ffdb 	bl	8033994 <__mcmp>
 80339de:	1e05      	subs	r5, r0, #0
 80339e0:	d112      	bne.n	8033a08 <__mdiff+0x3c>
 80339e2:	4629      	mov	r1, r5
 80339e4:	4630      	mov	r0, r6
 80339e6:	f7ff fd5f 	bl	80334a8 <_Balloc>
 80339ea:	4602      	mov	r2, r0
 80339ec:	b928      	cbnz	r0, 80339fa <__mdiff+0x2e>
 80339ee:	4b3f      	ldr	r3, [pc, #252]	@ (8033aec <__mdiff+0x120>)
 80339f0:	f240 2137 	movw	r1, #567	@ 0x237
 80339f4:	483e      	ldr	r0, [pc, #248]	@ (8033af0 <__mdiff+0x124>)
 80339f6:	f7f6 fa99 	bl	8029f2c <__assert_func>
 80339fa:	2301      	movs	r3, #1
 80339fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8033a00:	4610      	mov	r0, r2
 8033a02:	b003      	add	sp, #12
 8033a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033a08:	bfbc      	itt	lt
 8033a0a:	464b      	movlt	r3, r9
 8033a0c:	46a1      	movlt	r9, r4
 8033a0e:	4630      	mov	r0, r6
 8033a10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8033a14:	bfba      	itte	lt
 8033a16:	461c      	movlt	r4, r3
 8033a18:	2501      	movlt	r5, #1
 8033a1a:	2500      	movge	r5, #0
 8033a1c:	f7ff fd44 	bl	80334a8 <_Balloc>
 8033a20:	4602      	mov	r2, r0
 8033a22:	b918      	cbnz	r0, 8033a2c <__mdiff+0x60>
 8033a24:	4b31      	ldr	r3, [pc, #196]	@ (8033aec <__mdiff+0x120>)
 8033a26:	f240 2145 	movw	r1, #581	@ 0x245
 8033a2a:	e7e3      	b.n	80339f4 <__mdiff+0x28>
 8033a2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8033a30:	6926      	ldr	r6, [r4, #16]
 8033a32:	60c5      	str	r5, [r0, #12]
 8033a34:	f109 0310 	add.w	r3, r9, #16
 8033a38:	f109 0514 	add.w	r5, r9, #20
 8033a3c:	f104 0e14 	add.w	lr, r4, #20
 8033a40:	f100 0b14 	add.w	fp, r0, #20
 8033a44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8033a48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8033a4c:	9301      	str	r3, [sp, #4]
 8033a4e:	46d9      	mov	r9, fp
 8033a50:	f04f 0c00 	mov.w	ip, #0
 8033a54:	9b01      	ldr	r3, [sp, #4]
 8033a56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8033a5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8033a5e:	9301      	str	r3, [sp, #4]
 8033a60:	fa1f f38a 	uxth.w	r3, sl
 8033a64:	4619      	mov	r1, r3
 8033a66:	b283      	uxth	r3, r0
 8033a68:	1acb      	subs	r3, r1, r3
 8033a6a:	0c00      	lsrs	r0, r0, #16
 8033a6c:	4463      	add	r3, ip
 8033a6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8033a72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8033a76:	b29b      	uxth	r3, r3
 8033a78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8033a7c:	4576      	cmp	r6, lr
 8033a7e:	f849 3b04 	str.w	r3, [r9], #4
 8033a82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8033a86:	d8e5      	bhi.n	8033a54 <__mdiff+0x88>
 8033a88:	1b33      	subs	r3, r6, r4
 8033a8a:	3b15      	subs	r3, #21
 8033a8c:	f023 0303 	bic.w	r3, r3, #3
 8033a90:	3415      	adds	r4, #21
 8033a92:	3304      	adds	r3, #4
 8033a94:	42a6      	cmp	r6, r4
 8033a96:	bf38      	it	cc
 8033a98:	2304      	movcc	r3, #4
 8033a9a:	441d      	add	r5, r3
 8033a9c:	445b      	add	r3, fp
 8033a9e:	461e      	mov	r6, r3
 8033aa0:	462c      	mov	r4, r5
 8033aa2:	4544      	cmp	r4, r8
 8033aa4:	d30e      	bcc.n	8033ac4 <__mdiff+0xf8>
 8033aa6:	f108 0103 	add.w	r1, r8, #3
 8033aaa:	1b49      	subs	r1, r1, r5
 8033aac:	f021 0103 	bic.w	r1, r1, #3
 8033ab0:	3d03      	subs	r5, #3
 8033ab2:	45a8      	cmp	r8, r5
 8033ab4:	bf38      	it	cc
 8033ab6:	2100      	movcc	r1, #0
 8033ab8:	440b      	add	r3, r1
 8033aba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8033abe:	b191      	cbz	r1, 8033ae6 <__mdiff+0x11a>
 8033ac0:	6117      	str	r7, [r2, #16]
 8033ac2:	e79d      	b.n	8033a00 <__mdiff+0x34>
 8033ac4:	f854 1b04 	ldr.w	r1, [r4], #4
 8033ac8:	46e6      	mov	lr, ip
 8033aca:	0c08      	lsrs	r0, r1, #16
 8033acc:	fa1c fc81 	uxtah	ip, ip, r1
 8033ad0:	4471      	add	r1, lr
 8033ad2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8033ad6:	b289      	uxth	r1, r1
 8033ad8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8033adc:	f846 1b04 	str.w	r1, [r6], #4
 8033ae0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8033ae4:	e7dd      	b.n	8033aa2 <__mdiff+0xd6>
 8033ae6:	3f01      	subs	r7, #1
 8033ae8:	e7e7      	b.n	8033aba <__mdiff+0xee>
 8033aea:	bf00      	nop
 8033aec:	0803c18a 	.word	0x0803c18a
 8033af0:	0803c27e 	.word	0x0803c27e

08033af4 <__ulp>:
 8033af4:	b082      	sub	sp, #8
 8033af6:	ed8d 0b00 	vstr	d0, [sp]
 8033afa:	9a01      	ldr	r2, [sp, #4]
 8033afc:	4b0f      	ldr	r3, [pc, #60]	@ (8033b3c <__ulp+0x48>)
 8033afe:	4013      	ands	r3, r2
 8033b00:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8033b04:	2b00      	cmp	r3, #0
 8033b06:	dc08      	bgt.n	8033b1a <__ulp+0x26>
 8033b08:	425b      	negs	r3, r3
 8033b0a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8033b0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8033b12:	da04      	bge.n	8033b1e <__ulp+0x2a>
 8033b14:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8033b18:	4113      	asrs	r3, r2
 8033b1a:	2200      	movs	r2, #0
 8033b1c:	e008      	b.n	8033b30 <__ulp+0x3c>
 8033b1e:	f1a2 0314 	sub.w	r3, r2, #20
 8033b22:	2b1e      	cmp	r3, #30
 8033b24:	bfda      	itte	le
 8033b26:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8033b2a:	40da      	lsrle	r2, r3
 8033b2c:	2201      	movgt	r2, #1
 8033b2e:	2300      	movs	r3, #0
 8033b30:	4619      	mov	r1, r3
 8033b32:	4610      	mov	r0, r2
 8033b34:	ec41 0b10 	vmov	d0, r0, r1
 8033b38:	b002      	add	sp, #8
 8033b3a:	4770      	bx	lr
 8033b3c:	7ff00000 	.word	0x7ff00000

08033b40 <__b2d>:
 8033b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033b44:	6906      	ldr	r6, [r0, #16]
 8033b46:	f100 0814 	add.w	r8, r0, #20
 8033b4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8033b4e:	1f37      	subs	r7, r6, #4
 8033b50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8033b54:	4610      	mov	r0, r2
 8033b56:	f7ff fd65 	bl	8033624 <__hi0bits>
 8033b5a:	f1c0 0320 	rsb	r3, r0, #32
 8033b5e:	280a      	cmp	r0, #10
 8033b60:	600b      	str	r3, [r1, #0]
 8033b62:	491b      	ldr	r1, [pc, #108]	@ (8033bd0 <__b2d+0x90>)
 8033b64:	dc15      	bgt.n	8033b92 <__b2d+0x52>
 8033b66:	f1c0 0c0b 	rsb	ip, r0, #11
 8033b6a:	fa22 f30c 	lsr.w	r3, r2, ip
 8033b6e:	45b8      	cmp	r8, r7
 8033b70:	ea43 0501 	orr.w	r5, r3, r1
 8033b74:	bf34      	ite	cc
 8033b76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8033b7a:	2300      	movcs	r3, #0
 8033b7c:	3015      	adds	r0, #21
 8033b7e:	fa02 f000 	lsl.w	r0, r2, r0
 8033b82:	fa23 f30c 	lsr.w	r3, r3, ip
 8033b86:	4303      	orrs	r3, r0
 8033b88:	461c      	mov	r4, r3
 8033b8a:	ec45 4b10 	vmov	d0, r4, r5
 8033b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033b92:	45b8      	cmp	r8, r7
 8033b94:	bf3a      	itte	cc
 8033b96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8033b9a:	f1a6 0708 	subcc.w	r7, r6, #8
 8033b9e:	2300      	movcs	r3, #0
 8033ba0:	380b      	subs	r0, #11
 8033ba2:	d012      	beq.n	8033bca <__b2d+0x8a>
 8033ba4:	f1c0 0120 	rsb	r1, r0, #32
 8033ba8:	fa23 f401 	lsr.w	r4, r3, r1
 8033bac:	4082      	lsls	r2, r0
 8033bae:	4322      	orrs	r2, r4
 8033bb0:	4547      	cmp	r7, r8
 8033bb2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8033bb6:	bf8c      	ite	hi
 8033bb8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8033bbc:	2200      	movls	r2, #0
 8033bbe:	4083      	lsls	r3, r0
 8033bc0:	40ca      	lsrs	r2, r1
 8033bc2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8033bc6:	4313      	orrs	r3, r2
 8033bc8:	e7de      	b.n	8033b88 <__b2d+0x48>
 8033bca:	ea42 0501 	orr.w	r5, r2, r1
 8033bce:	e7db      	b.n	8033b88 <__b2d+0x48>
 8033bd0:	3ff00000 	.word	0x3ff00000

08033bd4 <__d2b>:
 8033bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8033bd8:	460f      	mov	r7, r1
 8033bda:	2101      	movs	r1, #1
 8033bdc:	ec59 8b10 	vmov	r8, r9, d0
 8033be0:	4616      	mov	r6, r2
 8033be2:	f7ff fc61 	bl	80334a8 <_Balloc>
 8033be6:	4604      	mov	r4, r0
 8033be8:	b930      	cbnz	r0, 8033bf8 <__d2b+0x24>
 8033bea:	4602      	mov	r2, r0
 8033bec:	4b23      	ldr	r3, [pc, #140]	@ (8033c7c <__d2b+0xa8>)
 8033bee:	4824      	ldr	r0, [pc, #144]	@ (8033c80 <__d2b+0xac>)
 8033bf0:	f240 310f 	movw	r1, #783	@ 0x30f
 8033bf4:	f7f6 f99a 	bl	8029f2c <__assert_func>
 8033bf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8033bfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8033c00:	b10d      	cbz	r5, 8033c06 <__d2b+0x32>
 8033c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8033c06:	9301      	str	r3, [sp, #4]
 8033c08:	f1b8 0300 	subs.w	r3, r8, #0
 8033c0c:	d023      	beq.n	8033c56 <__d2b+0x82>
 8033c0e:	4668      	mov	r0, sp
 8033c10:	9300      	str	r3, [sp, #0]
 8033c12:	f7ff fd26 	bl	8033662 <__lo0bits>
 8033c16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8033c1a:	b1d0      	cbz	r0, 8033c52 <__d2b+0x7e>
 8033c1c:	f1c0 0320 	rsb	r3, r0, #32
 8033c20:	fa02 f303 	lsl.w	r3, r2, r3
 8033c24:	430b      	orrs	r3, r1
 8033c26:	40c2      	lsrs	r2, r0
 8033c28:	6163      	str	r3, [r4, #20]
 8033c2a:	9201      	str	r2, [sp, #4]
 8033c2c:	9b01      	ldr	r3, [sp, #4]
 8033c2e:	61a3      	str	r3, [r4, #24]
 8033c30:	2b00      	cmp	r3, #0
 8033c32:	bf0c      	ite	eq
 8033c34:	2201      	moveq	r2, #1
 8033c36:	2202      	movne	r2, #2
 8033c38:	6122      	str	r2, [r4, #16]
 8033c3a:	b1a5      	cbz	r5, 8033c66 <__d2b+0x92>
 8033c3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8033c40:	4405      	add	r5, r0
 8033c42:	603d      	str	r5, [r7, #0]
 8033c44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8033c48:	6030      	str	r0, [r6, #0]
 8033c4a:	4620      	mov	r0, r4
 8033c4c:	b003      	add	sp, #12
 8033c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8033c52:	6161      	str	r1, [r4, #20]
 8033c54:	e7ea      	b.n	8033c2c <__d2b+0x58>
 8033c56:	a801      	add	r0, sp, #4
 8033c58:	f7ff fd03 	bl	8033662 <__lo0bits>
 8033c5c:	9b01      	ldr	r3, [sp, #4]
 8033c5e:	6163      	str	r3, [r4, #20]
 8033c60:	3020      	adds	r0, #32
 8033c62:	2201      	movs	r2, #1
 8033c64:	e7e8      	b.n	8033c38 <__d2b+0x64>
 8033c66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8033c6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8033c6e:	6038      	str	r0, [r7, #0]
 8033c70:	6918      	ldr	r0, [r3, #16]
 8033c72:	f7ff fcd7 	bl	8033624 <__hi0bits>
 8033c76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8033c7a:	e7e5      	b.n	8033c48 <__d2b+0x74>
 8033c7c:	0803c18a 	.word	0x0803c18a
 8033c80:	0803c27e 	.word	0x0803c27e

08033c84 <__ratio>:
 8033c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033c88:	b085      	sub	sp, #20
 8033c8a:	e9cd 1000 	strd	r1, r0, [sp]
 8033c8e:	a902      	add	r1, sp, #8
 8033c90:	f7ff ff56 	bl	8033b40 <__b2d>
 8033c94:	9800      	ldr	r0, [sp, #0]
 8033c96:	a903      	add	r1, sp, #12
 8033c98:	ec55 4b10 	vmov	r4, r5, d0
 8033c9c:	f7ff ff50 	bl	8033b40 <__b2d>
 8033ca0:	9b01      	ldr	r3, [sp, #4]
 8033ca2:	6919      	ldr	r1, [r3, #16]
 8033ca4:	9b00      	ldr	r3, [sp, #0]
 8033ca6:	691b      	ldr	r3, [r3, #16]
 8033ca8:	1ac9      	subs	r1, r1, r3
 8033caa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8033cae:	1a9b      	subs	r3, r3, r2
 8033cb0:	ec5b ab10 	vmov	sl, fp, d0
 8033cb4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8033cb8:	2b00      	cmp	r3, #0
 8033cba:	bfce      	itee	gt
 8033cbc:	462a      	movgt	r2, r5
 8033cbe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8033cc2:	465a      	movle	r2, fp
 8033cc4:	462f      	mov	r7, r5
 8033cc6:	46d9      	mov	r9, fp
 8033cc8:	bfcc      	ite	gt
 8033cca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8033cce:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8033cd2:	464b      	mov	r3, r9
 8033cd4:	4652      	mov	r2, sl
 8033cd6:	4620      	mov	r0, r4
 8033cd8:	4639      	mov	r1, r7
 8033cda:	f7dc fdcf 	bl	801087c <__aeabi_ddiv>
 8033cde:	ec41 0b10 	vmov	d0, r0, r1
 8033ce2:	b005      	add	sp, #20
 8033ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08033ce8 <__copybits>:
 8033ce8:	3901      	subs	r1, #1
 8033cea:	b570      	push	{r4, r5, r6, lr}
 8033cec:	1149      	asrs	r1, r1, #5
 8033cee:	6914      	ldr	r4, [r2, #16]
 8033cf0:	3101      	adds	r1, #1
 8033cf2:	f102 0314 	add.w	r3, r2, #20
 8033cf6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8033cfa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8033cfe:	1f05      	subs	r5, r0, #4
 8033d00:	42a3      	cmp	r3, r4
 8033d02:	d30c      	bcc.n	8033d1e <__copybits+0x36>
 8033d04:	1aa3      	subs	r3, r4, r2
 8033d06:	3b11      	subs	r3, #17
 8033d08:	f023 0303 	bic.w	r3, r3, #3
 8033d0c:	3211      	adds	r2, #17
 8033d0e:	42a2      	cmp	r2, r4
 8033d10:	bf88      	it	hi
 8033d12:	2300      	movhi	r3, #0
 8033d14:	4418      	add	r0, r3
 8033d16:	2300      	movs	r3, #0
 8033d18:	4288      	cmp	r0, r1
 8033d1a:	d305      	bcc.n	8033d28 <__copybits+0x40>
 8033d1c:	bd70      	pop	{r4, r5, r6, pc}
 8033d1e:	f853 6b04 	ldr.w	r6, [r3], #4
 8033d22:	f845 6f04 	str.w	r6, [r5, #4]!
 8033d26:	e7eb      	b.n	8033d00 <__copybits+0x18>
 8033d28:	f840 3b04 	str.w	r3, [r0], #4
 8033d2c:	e7f4      	b.n	8033d18 <__copybits+0x30>

08033d2e <__any_on>:
 8033d2e:	f100 0214 	add.w	r2, r0, #20
 8033d32:	6900      	ldr	r0, [r0, #16]
 8033d34:	114b      	asrs	r3, r1, #5
 8033d36:	4298      	cmp	r0, r3
 8033d38:	b510      	push	{r4, lr}
 8033d3a:	db11      	blt.n	8033d60 <__any_on+0x32>
 8033d3c:	dd0a      	ble.n	8033d54 <__any_on+0x26>
 8033d3e:	f011 011f 	ands.w	r1, r1, #31
 8033d42:	d007      	beq.n	8033d54 <__any_on+0x26>
 8033d44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8033d48:	fa24 f001 	lsr.w	r0, r4, r1
 8033d4c:	fa00 f101 	lsl.w	r1, r0, r1
 8033d50:	428c      	cmp	r4, r1
 8033d52:	d10b      	bne.n	8033d6c <__any_on+0x3e>
 8033d54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8033d58:	4293      	cmp	r3, r2
 8033d5a:	d803      	bhi.n	8033d64 <__any_on+0x36>
 8033d5c:	2000      	movs	r0, #0
 8033d5e:	bd10      	pop	{r4, pc}
 8033d60:	4603      	mov	r3, r0
 8033d62:	e7f7      	b.n	8033d54 <__any_on+0x26>
 8033d64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8033d68:	2900      	cmp	r1, #0
 8033d6a:	d0f5      	beq.n	8033d58 <__any_on+0x2a>
 8033d6c:	2001      	movs	r0, #1
 8033d6e:	e7f6      	b.n	8033d5e <__any_on+0x30>

08033d70 <realloc>:
 8033d70:	4b02      	ldr	r3, [pc, #8]	@ (8033d7c <realloc+0xc>)
 8033d72:	460a      	mov	r2, r1
 8033d74:	4601      	mov	r1, r0
 8033d76:	6818      	ldr	r0, [r3, #0]
 8033d78:	f000 b890 	b.w	8033e9c <_realloc_r>
 8033d7c:	200002d8 	.word	0x200002d8

08033d80 <_fclose_r>:
 8033d80:	b570      	push	{r4, r5, r6, lr}
 8033d82:	4605      	mov	r5, r0
 8033d84:	460c      	mov	r4, r1
 8033d86:	b1b1      	cbz	r1, 8033db6 <_fclose_r+0x36>
 8033d88:	b118      	cbz	r0, 8033d92 <_fclose_r+0x12>
 8033d8a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8033d8c:	b90b      	cbnz	r3, 8033d92 <_fclose_r+0x12>
 8033d8e:	f7f8 fb79 	bl	802c484 <__sinit>
 8033d92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033d94:	07de      	lsls	r6, r3, #31
 8033d96:	d405      	bmi.n	8033da4 <_fclose_r+0x24>
 8033d98:	89a3      	ldrh	r3, [r4, #12]
 8033d9a:	0598      	lsls	r0, r3, #22
 8033d9c:	d402      	bmi.n	8033da4 <_fclose_r+0x24>
 8033d9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033da0:	f7fa f84f 	bl	802de42 <__retarget_lock_acquire_recursive>
 8033da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8033da8:	b943      	cbnz	r3, 8033dbc <_fclose_r+0x3c>
 8033daa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033dac:	07d9      	lsls	r1, r3, #31
 8033dae:	d402      	bmi.n	8033db6 <_fclose_r+0x36>
 8033db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033db2:	f7fa f848 	bl	802de46 <__retarget_lock_release_recursive>
 8033db6:	2600      	movs	r6, #0
 8033db8:	4630      	mov	r0, r6
 8033dba:	bd70      	pop	{r4, r5, r6, pc}
 8033dbc:	4621      	mov	r1, r4
 8033dbe:	4628      	mov	r0, r5
 8033dc0:	f7f8 f996 	bl	802c0f0 <__sflush_r>
 8033dc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8033dc6:	4606      	mov	r6, r0
 8033dc8:	b133      	cbz	r3, 8033dd8 <_fclose_r+0x58>
 8033dca:	69e1      	ldr	r1, [r4, #28]
 8033dcc:	4628      	mov	r0, r5
 8033dce:	4798      	blx	r3
 8033dd0:	2800      	cmp	r0, #0
 8033dd2:	bfb8      	it	lt
 8033dd4:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8033dd8:	89a3      	ldrh	r3, [r4, #12]
 8033dda:	061a      	lsls	r2, r3, #24
 8033ddc:	d503      	bpl.n	8033de6 <_fclose_r+0x66>
 8033dde:	6921      	ldr	r1, [r4, #16]
 8033de0:	4628      	mov	r0, r5
 8033de2:	f7fa ff33 	bl	802ec4c <_free_r>
 8033de6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8033de8:	b141      	cbz	r1, 8033dfc <_fclose_r+0x7c>
 8033dea:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8033dee:	4299      	cmp	r1, r3
 8033df0:	d002      	beq.n	8033df8 <_fclose_r+0x78>
 8033df2:	4628      	mov	r0, r5
 8033df4:	f7fa ff2a 	bl	802ec4c <_free_r>
 8033df8:	2300      	movs	r3, #0
 8033dfa:	6323      	str	r3, [r4, #48]	@ 0x30
 8033dfc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8033dfe:	b121      	cbz	r1, 8033e0a <_fclose_r+0x8a>
 8033e00:	4628      	mov	r0, r5
 8033e02:	f7fa ff23 	bl	802ec4c <_free_r>
 8033e06:	2300      	movs	r3, #0
 8033e08:	6463      	str	r3, [r4, #68]	@ 0x44
 8033e0a:	f7f8 fb2f 	bl	802c46c <__sfp_lock_acquire>
 8033e0e:	2300      	movs	r3, #0
 8033e10:	81a3      	strh	r3, [r4, #12]
 8033e12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033e14:	07db      	lsls	r3, r3, #31
 8033e16:	d402      	bmi.n	8033e1e <_fclose_r+0x9e>
 8033e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033e1a:	f7fa f814 	bl	802de46 <__retarget_lock_release_recursive>
 8033e1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033e20:	f7fa f80d 	bl	802de3e <__retarget_lock_close_recursive>
 8033e24:	f7f8 fb28 	bl	802c478 <__sfp_lock_release>
 8033e28:	e7c6      	b.n	8033db8 <_fclose_r+0x38>

08033e2a <__sccl>:
 8033e2a:	b570      	push	{r4, r5, r6, lr}
 8033e2c:	780b      	ldrb	r3, [r1, #0]
 8033e2e:	4604      	mov	r4, r0
 8033e30:	2b5e      	cmp	r3, #94	@ 0x5e
 8033e32:	bf0b      	itete	eq
 8033e34:	784b      	ldrbeq	r3, [r1, #1]
 8033e36:	1c4a      	addne	r2, r1, #1
 8033e38:	1c8a      	addeq	r2, r1, #2
 8033e3a:	2100      	movne	r1, #0
 8033e3c:	bf08      	it	eq
 8033e3e:	2101      	moveq	r1, #1
 8033e40:	3801      	subs	r0, #1
 8033e42:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8033e46:	f800 1f01 	strb.w	r1, [r0, #1]!
 8033e4a:	42a8      	cmp	r0, r5
 8033e4c:	d1fb      	bne.n	8033e46 <__sccl+0x1c>
 8033e4e:	b90b      	cbnz	r3, 8033e54 <__sccl+0x2a>
 8033e50:	1e50      	subs	r0, r2, #1
 8033e52:	bd70      	pop	{r4, r5, r6, pc}
 8033e54:	f081 0101 	eor.w	r1, r1, #1
 8033e58:	54e1      	strb	r1, [r4, r3]
 8033e5a:	4610      	mov	r0, r2
 8033e5c:	4602      	mov	r2, r0
 8033e5e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8033e62:	2d2d      	cmp	r5, #45	@ 0x2d
 8033e64:	d005      	beq.n	8033e72 <__sccl+0x48>
 8033e66:	2d5d      	cmp	r5, #93	@ 0x5d
 8033e68:	d016      	beq.n	8033e98 <__sccl+0x6e>
 8033e6a:	2d00      	cmp	r5, #0
 8033e6c:	d0f1      	beq.n	8033e52 <__sccl+0x28>
 8033e6e:	462b      	mov	r3, r5
 8033e70:	e7f2      	b.n	8033e58 <__sccl+0x2e>
 8033e72:	7846      	ldrb	r6, [r0, #1]
 8033e74:	2e5d      	cmp	r6, #93	@ 0x5d
 8033e76:	d0fa      	beq.n	8033e6e <__sccl+0x44>
 8033e78:	42b3      	cmp	r3, r6
 8033e7a:	dcf8      	bgt.n	8033e6e <__sccl+0x44>
 8033e7c:	3002      	adds	r0, #2
 8033e7e:	461a      	mov	r2, r3
 8033e80:	3201      	adds	r2, #1
 8033e82:	4296      	cmp	r6, r2
 8033e84:	54a1      	strb	r1, [r4, r2]
 8033e86:	dcfb      	bgt.n	8033e80 <__sccl+0x56>
 8033e88:	1af2      	subs	r2, r6, r3
 8033e8a:	3a01      	subs	r2, #1
 8033e8c:	1c5d      	adds	r5, r3, #1
 8033e8e:	42b3      	cmp	r3, r6
 8033e90:	bfa8      	it	ge
 8033e92:	2200      	movge	r2, #0
 8033e94:	18ab      	adds	r3, r5, r2
 8033e96:	e7e1      	b.n	8033e5c <__sccl+0x32>
 8033e98:	4610      	mov	r0, r2
 8033e9a:	e7da      	b.n	8033e52 <__sccl+0x28>

08033e9c <_realloc_r>:
 8033e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033ea0:	4682      	mov	sl, r0
 8033ea2:	4693      	mov	fp, r2
 8033ea4:	460c      	mov	r4, r1
 8033ea6:	b929      	cbnz	r1, 8033eb4 <_realloc_r+0x18>
 8033ea8:	4611      	mov	r1, r2
 8033eaa:	b003      	add	sp, #12
 8033eac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033eb0:	f7fa bfe4 	b.w	802ee7c <_malloc_r>
 8033eb4:	f7ff faec 	bl	8033490 <__malloc_lock>
 8033eb8:	f10b 080b 	add.w	r8, fp, #11
 8033ebc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8033ec0:	f1b8 0f16 	cmp.w	r8, #22
 8033ec4:	f1a4 0908 	sub.w	r9, r4, #8
 8033ec8:	f025 0603 	bic.w	r6, r5, #3
 8033ecc:	d908      	bls.n	8033ee0 <_realloc_r+0x44>
 8033ece:	f038 0807 	bics.w	r8, r8, #7
 8033ed2:	d507      	bpl.n	8033ee4 <_realloc_r+0x48>
 8033ed4:	230c      	movs	r3, #12
 8033ed6:	f8ca 3000 	str.w	r3, [sl]
 8033eda:	f04f 0b00 	mov.w	fp, #0
 8033ede:	e032      	b.n	8033f46 <_realloc_r+0xaa>
 8033ee0:	f04f 0810 	mov.w	r8, #16
 8033ee4:	45c3      	cmp	fp, r8
 8033ee6:	d8f5      	bhi.n	8033ed4 <_realloc_r+0x38>
 8033ee8:	4546      	cmp	r6, r8
 8033eea:	f280 8174 	bge.w	80341d6 <_realloc_r+0x33a>
 8033eee:	4b9e      	ldr	r3, [pc, #632]	@ (8034168 <_realloc_r+0x2cc>)
 8033ef0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8033ef4:	eb09 0106 	add.w	r1, r9, r6
 8033ef8:	458c      	cmp	ip, r1
 8033efa:	6848      	ldr	r0, [r1, #4]
 8033efc:	d005      	beq.n	8033f0a <_realloc_r+0x6e>
 8033efe:	f020 0201 	bic.w	r2, r0, #1
 8033f02:	440a      	add	r2, r1
 8033f04:	6852      	ldr	r2, [r2, #4]
 8033f06:	07d7      	lsls	r7, r2, #31
 8033f08:	d449      	bmi.n	8033f9e <_realloc_r+0x102>
 8033f0a:	f020 0003 	bic.w	r0, r0, #3
 8033f0e:	458c      	cmp	ip, r1
 8033f10:	eb06 0700 	add.w	r7, r6, r0
 8033f14:	d11b      	bne.n	8033f4e <_realloc_r+0xb2>
 8033f16:	f108 0210 	add.w	r2, r8, #16
 8033f1a:	42ba      	cmp	r2, r7
 8033f1c:	dc41      	bgt.n	8033fa2 <_realloc_r+0x106>
 8033f1e:	eb09 0208 	add.w	r2, r9, r8
 8033f22:	eba7 0708 	sub.w	r7, r7, r8
 8033f26:	f047 0701 	orr.w	r7, r7, #1
 8033f2a:	609a      	str	r2, [r3, #8]
 8033f2c:	6057      	str	r7, [r2, #4]
 8033f2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8033f32:	f003 0301 	and.w	r3, r3, #1
 8033f36:	ea43 0308 	orr.w	r3, r3, r8
 8033f3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8033f3e:	4650      	mov	r0, sl
 8033f40:	f7ff faac 	bl	803349c <__malloc_unlock>
 8033f44:	46a3      	mov	fp, r4
 8033f46:	4658      	mov	r0, fp
 8033f48:	b003      	add	sp, #12
 8033f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033f4e:	45b8      	cmp	r8, r7
 8033f50:	dc27      	bgt.n	8033fa2 <_realloc_r+0x106>
 8033f52:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8033f56:	60d3      	str	r3, [r2, #12]
 8033f58:	609a      	str	r2, [r3, #8]
 8033f5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8033f5e:	eba7 0008 	sub.w	r0, r7, r8
 8033f62:	280f      	cmp	r0, #15
 8033f64:	f003 0301 	and.w	r3, r3, #1
 8033f68:	eb09 0207 	add.w	r2, r9, r7
 8033f6c:	f240 8135 	bls.w	80341da <_realloc_r+0x33e>
 8033f70:	eb09 0108 	add.w	r1, r9, r8
 8033f74:	ea48 0303 	orr.w	r3, r8, r3
 8033f78:	f040 0001 	orr.w	r0, r0, #1
 8033f7c:	f8c9 3004 	str.w	r3, [r9, #4]
 8033f80:	6048      	str	r0, [r1, #4]
 8033f82:	6853      	ldr	r3, [r2, #4]
 8033f84:	f043 0301 	orr.w	r3, r3, #1
 8033f88:	6053      	str	r3, [r2, #4]
 8033f8a:	3108      	adds	r1, #8
 8033f8c:	4650      	mov	r0, sl
 8033f8e:	f7fa fe5d 	bl	802ec4c <_free_r>
 8033f92:	4650      	mov	r0, sl
 8033f94:	f7ff fa82 	bl	803349c <__malloc_unlock>
 8033f98:	f109 0b08 	add.w	fp, r9, #8
 8033f9c:	e7d3      	b.n	8033f46 <_realloc_r+0xaa>
 8033f9e:	2000      	movs	r0, #0
 8033fa0:	4601      	mov	r1, r0
 8033fa2:	07ea      	lsls	r2, r5, #31
 8033fa4:	f100 80c7 	bmi.w	8034136 <_realloc_r+0x29a>
 8033fa8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8033fac:	eba9 0505 	sub.w	r5, r9, r5
 8033fb0:	686a      	ldr	r2, [r5, #4]
 8033fb2:	f022 0203 	bic.w	r2, r2, #3
 8033fb6:	4432      	add	r2, r6
 8033fb8:	9201      	str	r2, [sp, #4]
 8033fba:	2900      	cmp	r1, #0
 8033fbc:	f000 8086 	beq.w	80340cc <_realloc_r+0x230>
 8033fc0:	458c      	cmp	ip, r1
 8033fc2:	eb00 0702 	add.w	r7, r0, r2
 8033fc6:	d149      	bne.n	803405c <_realloc_r+0x1c0>
 8033fc8:	f108 0210 	add.w	r2, r8, #16
 8033fcc:	42ba      	cmp	r2, r7
 8033fce:	dc7d      	bgt.n	80340cc <_realloc_r+0x230>
 8033fd0:	46ab      	mov	fp, r5
 8033fd2:	68ea      	ldr	r2, [r5, #12]
 8033fd4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8033fd8:	60ca      	str	r2, [r1, #12]
 8033fda:	6091      	str	r1, [r2, #8]
 8033fdc:	1f32      	subs	r2, r6, #4
 8033fde:	2a24      	cmp	r2, #36	@ 0x24
 8033fe0:	d836      	bhi.n	8034050 <_realloc_r+0x1b4>
 8033fe2:	2a13      	cmp	r2, #19
 8033fe4:	d932      	bls.n	803404c <_realloc_r+0x1b0>
 8033fe6:	6821      	ldr	r1, [r4, #0]
 8033fe8:	60a9      	str	r1, [r5, #8]
 8033fea:	6861      	ldr	r1, [r4, #4]
 8033fec:	60e9      	str	r1, [r5, #12]
 8033fee:	2a1b      	cmp	r2, #27
 8033ff0:	d81a      	bhi.n	8034028 <_realloc_r+0x18c>
 8033ff2:	3408      	adds	r4, #8
 8033ff4:	f105 0210 	add.w	r2, r5, #16
 8033ff8:	6821      	ldr	r1, [r4, #0]
 8033ffa:	6011      	str	r1, [r2, #0]
 8033ffc:	6861      	ldr	r1, [r4, #4]
 8033ffe:	6051      	str	r1, [r2, #4]
 8034000:	68a1      	ldr	r1, [r4, #8]
 8034002:	6091      	str	r1, [r2, #8]
 8034004:	eb05 0208 	add.w	r2, r5, r8
 8034008:	eba7 0708 	sub.w	r7, r7, r8
 803400c:	f047 0701 	orr.w	r7, r7, #1
 8034010:	609a      	str	r2, [r3, #8]
 8034012:	6057      	str	r7, [r2, #4]
 8034014:	686b      	ldr	r3, [r5, #4]
 8034016:	f003 0301 	and.w	r3, r3, #1
 803401a:	ea43 0308 	orr.w	r3, r3, r8
 803401e:	606b      	str	r3, [r5, #4]
 8034020:	4650      	mov	r0, sl
 8034022:	f7ff fa3b 	bl	803349c <__malloc_unlock>
 8034026:	e78e      	b.n	8033f46 <_realloc_r+0xaa>
 8034028:	68a1      	ldr	r1, [r4, #8]
 803402a:	6129      	str	r1, [r5, #16]
 803402c:	68e1      	ldr	r1, [r4, #12]
 803402e:	6169      	str	r1, [r5, #20]
 8034030:	2a24      	cmp	r2, #36	@ 0x24
 8034032:	bf01      	itttt	eq
 8034034:	6922      	ldreq	r2, [r4, #16]
 8034036:	61aa      	streq	r2, [r5, #24]
 8034038:	6961      	ldreq	r1, [r4, #20]
 803403a:	61e9      	streq	r1, [r5, #28]
 803403c:	bf19      	ittee	ne
 803403e:	3410      	addne	r4, #16
 8034040:	f105 0218 	addne.w	r2, r5, #24
 8034044:	f105 0220 	addeq.w	r2, r5, #32
 8034048:	3418      	addeq	r4, #24
 803404a:	e7d5      	b.n	8033ff8 <_realloc_r+0x15c>
 803404c:	465a      	mov	r2, fp
 803404e:	e7d3      	b.n	8033ff8 <_realloc_r+0x15c>
 8034050:	4621      	mov	r1, r4
 8034052:	4658      	mov	r0, fp
 8034054:	f7f8 fca2 	bl	802c99c <memmove>
 8034058:	4b43      	ldr	r3, [pc, #268]	@ (8034168 <_realloc_r+0x2cc>)
 803405a:	e7d3      	b.n	8034004 <_realloc_r+0x168>
 803405c:	45b8      	cmp	r8, r7
 803405e:	dc35      	bgt.n	80340cc <_realloc_r+0x230>
 8034060:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8034064:	4628      	mov	r0, r5
 8034066:	60d3      	str	r3, [r2, #12]
 8034068:	609a      	str	r2, [r3, #8]
 803406a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803406e:	68eb      	ldr	r3, [r5, #12]
 8034070:	60d3      	str	r3, [r2, #12]
 8034072:	609a      	str	r2, [r3, #8]
 8034074:	1f32      	subs	r2, r6, #4
 8034076:	2a24      	cmp	r2, #36	@ 0x24
 8034078:	d824      	bhi.n	80340c4 <_realloc_r+0x228>
 803407a:	2a13      	cmp	r2, #19
 803407c:	d908      	bls.n	8034090 <_realloc_r+0x1f4>
 803407e:	6823      	ldr	r3, [r4, #0]
 8034080:	60ab      	str	r3, [r5, #8]
 8034082:	6863      	ldr	r3, [r4, #4]
 8034084:	60eb      	str	r3, [r5, #12]
 8034086:	2a1b      	cmp	r2, #27
 8034088:	d80a      	bhi.n	80340a0 <_realloc_r+0x204>
 803408a:	3408      	adds	r4, #8
 803408c:	f105 0010 	add.w	r0, r5, #16
 8034090:	6823      	ldr	r3, [r4, #0]
 8034092:	6003      	str	r3, [r0, #0]
 8034094:	6863      	ldr	r3, [r4, #4]
 8034096:	6043      	str	r3, [r0, #4]
 8034098:	68a3      	ldr	r3, [r4, #8]
 803409a:	6083      	str	r3, [r0, #8]
 803409c:	46a9      	mov	r9, r5
 803409e:	e75c      	b.n	8033f5a <_realloc_r+0xbe>
 80340a0:	68a3      	ldr	r3, [r4, #8]
 80340a2:	612b      	str	r3, [r5, #16]
 80340a4:	68e3      	ldr	r3, [r4, #12]
 80340a6:	616b      	str	r3, [r5, #20]
 80340a8:	2a24      	cmp	r2, #36	@ 0x24
 80340aa:	bf01      	itttt	eq
 80340ac:	6923      	ldreq	r3, [r4, #16]
 80340ae:	61ab      	streq	r3, [r5, #24]
 80340b0:	6963      	ldreq	r3, [r4, #20]
 80340b2:	61eb      	streq	r3, [r5, #28]
 80340b4:	bf19      	ittee	ne
 80340b6:	3410      	addne	r4, #16
 80340b8:	f105 0018 	addne.w	r0, r5, #24
 80340bc:	f105 0020 	addeq.w	r0, r5, #32
 80340c0:	3418      	addeq	r4, #24
 80340c2:	e7e5      	b.n	8034090 <_realloc_r+0x1f4>
 80340c4:	4621      	mov	r1, r4
 80340c6:	f7f8 fc69 	bl	802c99c <memmove>
 80340ca:	e7e7      	b.n	803409c <_realloc_r+0x200>
 80340cc:	9b01      	ldr	r3, [sp, #4]
 80340ce:	4598      	cmp	r8, r3
 80340d0:	dc31      	bgt.n	8034136 <_realloc_r+0x29a>
 80340d2:	4628      	mov	r0, r5
 80340d4:	68eb      	ldr	r3, [r5, #12]
 80340d6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80340da:	60d3      	str	r3, [r2, #12]
 80340dc:	609a      	str	r2, [r3, #8]
 80340de:	1f32      	subs	r2, r6, #4
 80340e0:	2a24      	cmp	r2, #36	@ 0x24
 80340e2:	d824      	bhi.n	803412e <_realloc_r+0x292>
 80340e4:	2a13      	cmp	r2, #19
 80340e6:	d908      	bls.n	80340fa <_realloc_r+0x25e>
 80340e8:	6823      	ldr	r3, [r4, #0]
 80340ea:	60ab      	str	r3, [r5, #8]
 80340ec:	6863      	ldr	r3, [r4, #4]
 80340ee:	60eb      	str	r3, [r5, #12]
 80340f0:	2a1b      	cmp	r2, #27
 80340f2:	d80a      	bhi.n	803410a <_realloc_r+0x26e>
 80340f4:	3408      	adds	r4, #8
 80340f6:	f105 0010 	add.w	r0, r5, #16
 80340fa:	6823      	ldr	r3, [r4, #0]
 80340fc:	6003      	str	r3, [r0, #0]
 80340fe:	6863      	ldr	r3, [r4, #4]
 8034100:	6043      	str	r3, [r0, #4]
 8034102:	68a3      	ldr	r3, [r4, #8]
 8034104:	6083      	str	r3, [r0, #8]
 8034106:	9f01      	ldr	r7, [sp, #4]
 8034108:	e7c8      	b.n	803409c <_realloc_r+0x200>
 803410a:	68a3      	ldr	r3, [r4, #8]
 803410c:	612b      	str	r3, [r5, #16]
 803410e:	68e3      	ldr	r3, [r4, #12]
 8034110:	616b      	str	r3, [r5, #20]
 8034112:	2a24      	cmp	r2, #36	@ 0x24
 8034114:	bf01      	itttt	eq
 8034116:	6923      	ldreq	r3, [r4, #16]
 8034118:	61ab      	streq	r3, [r5, #24]
 803411a:	6963      	ldreq	r3, [r4, #20]
 803411c:	61eb      	streq	r3, [r5, #28]
 803411e:	bf19      	ittee	ne
 8034120:	3410      	addne	r4, #16
 8034122:	f105 0018 	addne.w	r0, r5, #24
 8034126:	f105 0020 	addeq.w	r0, r5, #32
 803412a:	3418      	addeq	r4, #24
 803412c:	e7e5      	b.n	80340fa <_realloc_r+0x25e>
 803412e:	4621      	mov	r1, r4
 8034130:	f7f8 fc34 	bl	802c99c <memmove>
 8034134:	e7e7      	b.n	8034106 <_realloc_r+0x26a>
 8034136:	4659      	mov	r1, fp
 8034138:	4650      	mov	r0, sl
 803413a:	f7fa fe9f 	bl	802ee7c <_malloc_r>
 803413e:	4683      	mov	fp, r0
 8034140:	b918      	cbnz	r0, 803414a <_realloc_r+0x2ae>
 8034142:	4650      	mov	r0, sl
 8034144:	f7ff f9aa 	bl	803349c <__malloc_unlock>
 8034148:	e6c7      	b.n	8033eda <_realloc_r+0x3e>
 803414a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803414e:	f023 0301 	bic.w	r3, r3, #1
 8034152:	444b      	add	r3, r9
 8034154:	f1a0 0208 	sub.w	r2, r0, #8
 8034158:	4293      	cmp	r3, r2
 803415a:	d107      	bne.n	803416c <_realloc_r+0x2d0>
 803415c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8034160:	f027 0703 	bic.w	r7, r7, #3
 8034164:	4437      	add	r7, r6
 8034166:	e6f8      	b.n	8033f5a <_realloc_r+0xbe>
 8034168:	2000040c 	.word	0x2000040c
 803416c:	1f32      	subs	r2, r6, #4
 803416e:	2a24      	cmp	r2, #36	@ 0x24
 8034170:	d82d      	bhi.n	80341ce <_realloc_r+0x332>
 8034172:	2a13      	cmp	r2, #19
 8034174:	d928      	bls.n	80341c8 <_realloc_r+0x32c>
 8034176:	6823      	ldr	r3, [r4, #0]
 8034178:	6003      	str	r3, [r0, #0]
 803417a:	6863      	ldr	r3, [r4, #4]
 803417c:	6043      	str	r3, [r0, #4]
 803417e:	2a1b      	cmp	r2, #27
 8034180:	d80e      	bhi.n	80341a0 <_realloc_r+0x304>
 8034182:	f104 0208 	add.w	r2, r4, #8
 8034186:	f100 0308 	add.w	r3, r0, #8
 803418a:	6811      	ldr	r1, [r2, #0]
 803418c:	6019      	str	r1, [r3, #0]
 803418e:	6851      	ldr	r1, [r2, #4]
 8034190:	6059      	str	r1, [r3, #4]
 8034192:	6892      	ldr	r2, [r2, #8]
 8034194:	609a      	str	r2, [r3, #8]
 8034196:	4621      	mov	r1, r4
 8034198:	4650      	mov	r0, sl
 803419a:	f7fa fd57 	bl	802ec4c <_free_r>
 803419e:	e73f      	b.n	8034020 <_realloc_r+0x184>
 80341a0:	68a3      	ldr	r3, [r4, #8]
 80341a2:	6083      	str	r3, [r0, #8]
 80341a4:	68e3      	ldr	r3, [r4, #12]
 80341a6:	60c3      	str	r3, [r0, #12]
 80341a8:	2a24      	cmp	r2, #36	@ 0x24
 80341aa:	bf01      	itttt	eq
 80341ac:	6923      	ldreq	r3, [r4, #16]
 80341ae:	6103      	streq	r3, [r0, #16]
 80341b0:	6961      	ldreq	r1, [r4, #20]
 80341b2:	6141      	streq	r1, [r0, #20]
 80341b4:	bf19      	ittee	ne
 80341b6:	f104 0210 	addne.w	r2, r4, #16
 80341ba:	f100 0310 	addne.w	r3, r0, #16
 80341be:	f104 0218 	addeq.w	r2, r4, #24
 80341c2:	f100 0318 	addeq.w	r3, r0, #24
 80341c6:	e7e0      	b.n	803418a <_realloc_r+0x2ee>
 80341c8:	4603      	mov	r3, r0
 80341ca:	4622      	mov	r2, r4
 80341cc:	e7dd      	b.n	803418a <_realloc_r+0x2ee>
 80341ce:	4621      	mov	r1, r4
 80341d0:	f7f8 fbe4 	bl	802c99c <memmove>
 80341d4:	e7df      	b.n	8034196 <_realloc_r+0x2fa>
 80341d6:	4637      	mov	r7, r6
 80341d8:	e6bf      	b.n	8033f5a <_realloc_r+0xbe>
 80341da:	431f      	orrs	r7, r3
 80341dc:	f8c9 7004 	str.w	r7, [r9, #4]
 80341e0:	6853      	ldr	r3, [r2, #4]
 80341e2:	f043 0301 	orr.w	r3, r3, #1
 80341e6:	6053      	str	r3, [r2, #4]
 80341e8:	e6d3      	b.n	8033f92 <_realloc_r+0xf6>
 80341ea:	bf00      	nop

080341ec <sulp>:
 80341ec:	b570      	push	{r4, r5, r6, lr}
 80341ee:	4604      	mov	r4, r0
 80341f0:	460d      	mov	r5, r1
 80341f2:	ec45 4b10 	vmov	d0, r4, r5
 80341f6:	4616      	mov	r6, r2
 80341f8:	f7ff fc7c 	bl	8033af4 <__ulp>
 80341fc:	ec51 0b10 	vmov	r0, r1, d0
 8034200:	b17e      	cbz	r6, 8034222 <sulp+0x36>
 8034202:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8034206:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803420a:	2b00      	cmp	r3, #0
 803420c:	dd09      	ble.n	8034222 <sulp+0x36>
 803420e:	051b      	lsls	r3, r3, #20
 8034210:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8034214:	2400      	movs	r4, #0
 8034216:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 803421a:	4622      	mov	r2, r4
 803421c:	462b      	mov	r3, r5
 803421e:	f7dc fa03 	bl	8010628 <__aeabi_dmul>
 8034222:	ec41 0b10 	vmov	d0, r0, r1
 8034226:	bd70      	pop	{r4, r5, r6, pc}

08034228 <_strtod_l>:
 8034228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803422c:	b09f      	sub	sp, #124	@ 0x7c
 803422e:	460c      	mov	r4, r1
 8034230:	9217      	str	r2, [sp, #92]	@ 0x5c
 8034232:	2200      	movs	r2, #0
 8034234:	921a      	str	r2, [sp, #104]	@ 0x68
 8034236:	9005      	str	r0, [sp, #20]
 8034238:	f04f 0a00 	mov.w	sl, #0
 803423c:	f04f 0b00 	mov.w	fp, #0
 8034240:	460a      	mov	r2, r1
 8034242:	9219      	str	r2, [sp, #100]	@ 0x64
 8034244:	7811      	ldrb	r1, [r2, #0]
 8034246:	292b      	cmp	r1, #43	@ 0x2b
 8034248:	d04a      	beq.n	80342e0 <_strtod_l+0xb8>
 803424a:	d838      	bhi.n	80342be <_strtod_l+0x96>
 803424c:	290d      	cmp	r1, #13
 803424e:	d832      	bhi.n	80342b6 <_strtod_l+0x8e>
 8034250:	2908      	cmp	r1, #8
 8034252:	d832      	bhi.n	80342ba <_strtod_l+0x92>
 8034254:	2900      	cmp	r1, #0
 8034256:	d03b      	beq.n	80342d0 <_strtod_l+0xa8>
 8034258:	2200      	movs	r2, #0
 803425a:	920b      	str	r2, [sp, #44]	@ 0x2c
 803425c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 803425e:	782a      	ldrb	r2, [r5, #0]
 8034260:	2a30      	cmp	r2, #48	@ 0x30
 8034262:	f040 80b3 	bne.w	80343cc <_strtod_l+0x1a4>
 8034266:	786a      	ldrb	r2, [r5, #1]
 8034268:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803426c:	2a58      	cmp	r2, #88	@ 0x58
 803426e:	d16e      	bne.n	803434e <_strtod_l+0x126>
 8034270:	9302      	str	r3, [sp, #8]
 8034272:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034274:	9301      	str	r3, [sp, #4]
 8034276:	ab1a      	add	r3, sp, #104	@ 0x68
 8034278:	9300      	str	r3, [sp, #0]
 803427a:	4a8e      	ldr	r2, [pc, #568]	@ (80344b4 <_strtod_l+0x28c>)
 803427c:	9805      	ldr	r0, [sp, #20]
 803427e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8034280:	a919      	add	r1, sp, #100	@ 0x64
 8034282:	f001 fa51 	bl	8035728 <__gethex>
 8034286:	f010 060f 	ands.w	r6, r0, #15
 803428a:	4604      	mov	r4, r0
 803428c:	d005      	beq.n	803429a <_strtod_l+0x72>
 803428e:	2e06      	cmp	r6, #6
 8034290:	d128      	bne.n	80342e4 <_strtod_l+0xbc>
 8034292:	3501      	adds	r5, #1
 8034294:	2300      	movs	r3, #0
 8034296:	9519      	str	r5, [sp, #100]	@ 0x64
 8034298:	930b      	str	r3, [sp, #44]	@ 0x2c
 803429a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803429c:	2b00      	cmp	r3, #0
 803429e:	f040 858e 	bne.w	8034dbe <_strtod_l+0xb96>
 80342a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80342a4:	b1cb      	cbz	r3, 80342da <_strtod_l+0xb2>
 80342a6:	4652      	mov	r2, sl
 80342a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80342ac:	ec43 2b10 	vmov	d0, r2, r3
 80342b0:	b01f      	add	sp, #124	@ 0x7c
 80342b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80342b6:	2920      	cmp	r1, #32
 80342b8:	d1ce      	bne.n	8034258 <_strtod_l+0x30>
 80342ba:	3201      	adds	r2, #1
 80342bc:	e7c1      	b.n	8034242 <_strtod_l+0x1a>
 80342be:	292d      	cmp	r1, #45	@ 0x2d
 80342c0:	d1ca      	bne.n	8034258 <_strtod_l+0x30>
 80342c2:	2101      	movs	r1, #1
 80342c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80342c6:	1c51      	adds	r1, r2, #1
 80342c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80342ca:	7852      	ldrb	r2, [r2, #1]
 80342cc:	2a00      	cmp	r2, #0
 80342ce:	d1c5      	bne.n	803425c <_strtod_l+0x34>
 80342d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80342d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80342d4:	2b00      	cmp	r3, #0
 80342d6:	f040 8570 	bne.w	8034dba <_strtod_l+0xb92>
 80342da:	4652      	mov	r2, sl
 80342dc:	465b      	mov	r3, fp
 80342de:	e7e5      	b.n	80342ac <_strtod_l+0x84>
 80342e0:	2100      	movs	r1, #0
 80342e2:	e7ef      	b.n	80342c4 <_strtod_l+0x9c>
 80342e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80342e6:	b13a      	cbz	r2, 80342f8 <_strtod_l+0xd0>
 80342e8:	2135      	movs	r1, #53	@ 0x35
 80342ea:	a81c      	add	r0, sp, #112	@ 0x70
 80342ec:	f7ff fcfc 	bl	8033ce8 <__copybits>
 80342f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80342f2:	9805      	ldr	r0, [sp, #20]
 80342f4:	f7ff f8fd 	bl	80334f2 <_Bfree>
 80342f8:	3e01      	subs	r6, #1
 80342fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80342fc:	2e04      	cmp	r6, #4
 80342fe:	d806      	bhi.n	803430e <_strtod_l+0xe6>
 8034300:	e8df f006 	tbb	[pc, r6]
 8034304:	201d0314 	.word	0x201d0314
 8034308:	14          	.byte	0x14
 8034309:	00          	.byte	0x00
 803430a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 803430e:	05e1      	lsls	r1, r4, #23
 8034310:	bf48      	it	mi
 8034312:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8034316:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803431a:	0d1b      	lsrs	r3, r3, #20
 803431c:	051b      	lsls	r3, r3, #20
 803431e:	2b00      	cmp	r3, #0
 8034320:	d1bb      	bne.n	803429a <_strtod_l+0x72>
 8034322:	f7f9 fd59 	bl	802ddd8 <__errno>
 8034326:	2322      	movs	r3, #34	@ 0x22
 8034328:	6003      	str	r3, [r0, #0]
 803432a:	e7b6      	b.n	803429a <_strtod_l+0x72>
 803432c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8034330:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8034334:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8034338:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 803433c:	e7e7      	b.n	803430e <_strtod_l+0xe6>
 803433e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80344bc <_strtod_l+0x294>
 8034342:	e7e4      	b.n	803430e <_strtod_l+0xe6>
 8034344:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8034348:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 803434c:	e7df      	b.n	803430e <_strtod_l+0xe6>
 803434e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034350:	1c5a      	adds	r2, r3, #1
 8034352:	9219      	str	r2, [sp, #100]	@ 0x64
 8034354:	785b      	ldrb	r3, [r3, #1]
 8034356:	2b30      	cmp	r3, #48	@ 0x30
 8034358:	d0f9      	beq.n	803434e <_strtod_l+0x126>
 803435a:	2b00      	cmp	r3, #0
 803435c:	d09d      	beq.n	803429a <_strtod_l+0x72>
 803435e:	2301      	movs	r3, #1
 8034360:	9309      	str	r3, [sp, #36]	@ 0x24
 8034362:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034364:	930c      	str	r3, [sp, #48]	@ 0x30
 8034366:	2300      	movs	r3, #0
 8034368:	9308      	str	r3, [sp, #32]
 803436a:	930a      	str	r3, [sp, #40]	@ 0x28
 803436c:	461f      	mov	r7, r3
 803436e:	220a      	movs	r2, #10
 8034370:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8034372:	7805      	ldrb	r5, [r0, #0]
 8034374:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8034378:	b2d9      	uxtb	r1, r3
 803437a:	2909      	cmp	r1, #9
 803437c:	d928      	bls.n	80343d0 <_strtod_l+0x1a8>
 803437e:	494e      	ldr	r1, [pc, #312]	@ (80344b8 <_strtod_l+0x290>)
 8034380:	2201      	movs	r2, #1
 8034382:	f7f8 fb5a 	bl	802ca3a <strncmp>
 8034386:	2800      	cmp	r0, #0
 8034388:	d032      	beq.n	80343f0 <_strtod_l+0x1c8>
 803438a:	2000      	movs	r0, #0
 803438c:	462a      	mov	r2, r5
 803438e:	4681      	mov	r9, r0
 8034390:	463d      	mov	r5, r7
 8034392:	4603      	mov	r3, r0
 8034394:	2a65      	cmp	r2, #101	@ 0x65
 8034396:	d001      	beq.n	803439c <_strtod_l+0x174>
 8034398:	2a45      	cmp	r2, #69	@ 0x45
 803439a:	d114      	bne.n	80343c6 <_strtod_l+0x19e>
 803439c:	b91d      	cbnz	r5, 80343a6 <_strtod_l+0x17e>
 803439e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80343a0:	4302      	orrs	r2, r0
 80343a2:	d095      	beq.n	80342d0 <_strtod_l+0xa8>
 80343a4:	2500      	movs	r5, #0
 80343a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80343a8:	1c62      	adds	r2, r4, #1
 80343aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80343ac:	7862      	ldrb	r2, [r4, #1]
 80343ae:	2a2b      	cmp	r2, #43	@ 0x2b
 80343b0:	d077      	beq.n	80344a2 <_strtod_l+0x27a>
 80343b2:	2a2d      	cmp	r2, #45	@ 0x2d
 80343b4:	d07b      	beq.n	80344ae <_strtod_l+0x286>
 80343b6:	f04f 0c00 	mov.w	ip, #0
 80343ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80343be:	2909      	cmp	r1, #9
 80343c0:	f240 8082 	bls.w	80344c8 <_strtod_l+0x2a0>
 80343c4:	9419      	str	r4, [sp, #100]	@ 0x64
 80343c6:	f04f 0800 	mov.w	r8, #0
 80343ca:	e0a2      	b.n	8034512 <_strtod_l+0x2ea>
 80343cc:	2300      	movs	r3, #0
 80343ce:	e7c7      	b.n	8034360 <_strtod_l+0x138>
 80343d0:	2f08      	cmp	r7, #8
 80343d2:	bfd5      	itete	le
 80343d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80343d6:	9908      	ldrgt	r1, [sp, #32]
 80343d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80343dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80343e0:	f100 0001 	add.w	r0, r0, #1
 80343e4:	bfd4      	ite	le
 80343e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80343e8:	9308      	strgt	r3, [sp, #32]
 80343ea:	3701      	adds	r7, #1
 80343ec:	9019      	str	r0, [sp, #100]	@ 0x64
 80343ee:	e7bf      	b.n	8034370 <_strtod_l+0x148>
 80343f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80343f2:	1c5a      	adds	r2, r3, #1
 80343f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80343f6:	785a      	ldrb	r2, [r3, #1]
 80343f8:	b37f      	cbz	r7, 803445a <_strtod_l+0x232>
 80343fa:	4681      	mov	r9, r0
 80343fc:	463d      	mov	r5, r7
 80343fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8034402:	2b09      	cmp	r3, #9
 8034404:	d912      	bls.n	803442c <_strtod_l+0x204>
 8034406:	2301      	movs	r3, #1
 8034408:	e7c4      	b.n	8034394 <_strtod_l+0x16c>
 803440a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803440c:	1c5a      	adds	r2, r3, #1
 803440e:	9219      	str	r2, [sp, #100]	@ 0x64
 8034410:	785a      	ldrb	r2, [r3, #1]
 8034412:	3001      	adds	r0, #1
 8034414:	2a30      	cmp	r2, #48	@ 0x30
 8034416:	d0f8      	beq.n	803440a <_strtod_l+0x1e2>
 8034418:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 803441c:	2b08      	cmp	r3, #8
 803441e:	f200 84d3 	bhi.w	8034dc8 <_strtod_l+0xba0>
 8034422:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034424:	930c      	str	r3, [sp, #48]	@ 0x30
 8034426:	4681      	mov	r9, r0
 8034428:	2000      	movs	r0, #0
 803442a:	4605      	mov	r5, r0
 803442c:	3a30      	subs	r2, #48	@ 0x30
 803442e:	f100 0301 	add.w	r3, r0, #1
 8034432:	d02a      	beq.n	803448a <_strtod_l+0x262>
 8034434:	4499      	add	r9, r3
 8034436:	eb00 0c05 	add.w	ip, r0, r5
 803443a:	462b      	mov	r3, r5
 803443c:	210a      	movs	r1, #10
 803443e:	4563      	cmp	r3, ip
 8034440:	d10d      	bne.n	803445e <_strtod_l+0x236>
 8034442:	1c69      	adds	r1, r5, #1
 8034444:	4401      	add	r1, r0
 8034446:	4428      	add	r0, r5
 8034448:	2808      	cmp	r0, #8
 803444a:	dc16      	bgt.n	803447a <_strtod_l+0x252>
 803444c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803444e:	230a      	movs	r3, #10
 8034450:	fb03 2300 	mla	r3, r3, r0, r2
 8034454:	930a      	str	r3, [sp, #40]	@ 0x28
 8034456:	2300      	movs	r3, #0
 8034458:	e018      	b.n	803448c <_strtod_l+0x264>
 803445a:	4638      	mov	r0, r7
 803445c:	e7da      	b.n	8034414 <_strtod_l+0x1ec>
 803445e:	2b08      	cmp	r3, #8
 8034460:	f103 0301 	add.w	r3, r3, #1
 8034464:	dc03      	bgt.n	803446e <_strtod_l+0x246>
 8034466:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8034468:	434e      	muls	r6, r1
 803446a:	960a      	str	r6, [sp, #40]	@ 0x28
 803446c:	e7e7      	b.n	803443e <_strtod_l+0x216>
 803446e:	2b10      	cmp	r3, #16
 8034470:	bfde      	ittt	le
 8034472:	9e08      	ldrle	r6, [sp, #32]
 8034474:	434e      	mulle	r6, r1
 8034476:	9608      	strle	r6, [sp, #32]
 8034478:	e7e1      	b.n	803443e <_strtod_l+0x216>
 803447a:	280f      	cmp	r0, #15
 803447c:	dceb      	bgt.n	8034456 <_strtod_l+0x22e>
 803447e:	9808      	ldr	r0, [sp, #32]
 8034480:	230a      	movs	r3, #10
 8034482:	fb03 2300 	mla	r3, r3, r0, r2
 8034486:	9308      	str	r3, [sp, #32]
 8034488:	e7e5      	b.n	8034456 <_strtod_l+0x22e>
 803448a:	4629      	mov	r1, r5
 803448c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803448e:	1c50      	adds	r0, r2, #1
 8034490:	9019      	str	r0, [sp, #100]	@ 0x64
 8034492:	7852      	ldrb	r2, [r2, #1]
 8034494:	4618      	mov	r0, r3
 8034496:	460d      	mov	r5, r1
 8034498:	e7b1      	b.n	80343fe <_strtod_l+0x1d6>
 803449a:	f04f 0900 	mov.w	r9, #0
 803449e:	2301      	movs	r3, #1
 80344a0:	e77d      	b.n	803439e <_strtod_l+0x176>
 80344a2:	f04f 0c00 	mov.w	ip, #0
 80344a6:	1ca2      	adds	r2, r4, #2
 80344a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80344aa:	78a2      	ldrb	r2, [r4, #2]
 80344ac:	e785      	b.n	80343ba <_strtod_l+0x192>
 80344ae:	f04f 0c01 	mov.w	ip, #1
 80344b2:	e7f8      	b.n	80344a6 <_strtod_l+0x27e>
 80344b4:	0803c3ec 	.word	0x0803c3ec
 80344b8:	0803be52 	.word	0x0803be52
 80344bc:	7ff00000 	.word	0x7ff00000
 80344c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80344c2:	1c51      	adds	r1, r2, #1
 80344c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80344c6:	7852      	ldrb	r2, [r2, #1]
 80344c8:	2a30      	cmp	r2, #48	@ 0x30
 80344ca:	d0f9      	beq.n	80344c0 <_strtod_l+0x298>
 80344cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80344d0:	2908      	cmp	r1, #8
 80344d2:	f63f af78 	bhi.w	80343c6 <_strtod_l+0x19e>
 80344d6:	3a30      	subs	r2, #48	@ 0x30
 80344d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80344da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80344dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80344de:	f04f 080a 	mov.w	r8, #10
 80344e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80344e4:	1c56      	adds	r6, r2, #1
 80344e6:	9619      	str	r6, [sp, #100]	@ 0x64
 80344e8:	7852      	ldrb	r2, [r2, #1]
 80344ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80344ee:	f1be 0f09 	cmp.w	lr, #9
 80344f2:	d939      	bls.n	8034568 <_strtod_l+0x340>
 80344f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80344f6:	1a76      	subs	r6, r6, r1
 80344f8:	2e08      	cmp	r6, #8
 80344fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80344fe:	dc03      	bgt.n	8034508 <_strtod_l+0x2e0>
 8034500:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8034502:	4588      	cmp	r8, r1
 8034504:	bfa8      	it	ge
 8034506:	4688      	movge	r8, r1
 8034508:	f1bc 0f00 	cmp.w	ip, #0
 803450c:	d001      	beq.n	8034512 <_strtod_l+0x2ea>
 803450e:	f1c8 0800 	rsb	r8, r8, #0
 8034512:	2d00      	cmp	r5, #0
 8034514:	d14e      	bne.n	80345b4 <_strtod_l+0x38c>
 8034516:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8034518:	4308      	orrs	r0, r1
 803451a:	f47f aebe 	bne.w	803429a <_strtod_l+0x72>
 803451e:	2b00      	cmp	r3, #0
 8034520:	f47f aed6 	bne.w	80342d0 <_strtod_l+0xa8>
 8034524:	2a69      	cmp	r2, #105	@ 0x69
 8034526:	d028      	beq.n	803457a <_strtod_l+0x352>
 8034528:	dc25      	bgt.n	8034576 <_strtod_l+0x34e>
 803452a:	2a49      	cmp	r2, #73	@ 0x49
 803452c:	d025      	beq.n	803457a <_strtod_l+0x352>
 803452e:	2a4e      	cmp	r2, #78	@ 0x4e
 8034530:	f47f aece 	bne.w	80342d0 <_strtod_l+0xa8>
 8034534:	499b      	ldr	r1, [pc, #620]	@ (80347a4 <_strtod_l+0x57c>)
 8034536:	a819      	add	r0, sp, #100	@ 0x64
 8034538:	f001 fb18 	bl	8035b6c <__match>
 803453c:	2800      	cmp	r0, #0
 803453e:	f43f aec7 	beq.w	80342d0 <_strtod_l+0xa8>
 8034542:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034544:	781b      	ldrb	r3, [r3, #0]
 8034546:	2b28      	cmp	r3, #40	@ 0x28
 8034548:	d12e      	bne.n	80345a8 <_strtod_l+0x380>
 803454a:	4997      	ldr	r1, [pc, #604]	@ (80347a8 <_strtod_l+0x580>)
 803454c:	aa1c      	add	r2, sp, #112	@ 0x70
 803454e:	a819      	add	r0, sp, #100	@ 0x64
 8034550:	f001 fb20 	bl	8035b94 <__hexnan>
 8034554:	2805      	cmp	r0, #5
 8034556:	d127      	bne.n	80345a8 <_strtod_l+0x380>
 8034558:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 803455a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 803455e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8034562:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8034566:	e698      	b.n	803429a <_strtod_l+0x72>
 8034568:	990e      	ldr	r1, [sp, #56]	@ 0x38
 803456a:	fb08 2101 	mla	r1, r8, r1, r2
 803456e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8034572:	920e      	str	r2, [sp, #56]	@ 0x38
 8034574:	e7b5      	b.n	80344e2 <_strtod_l+0x2ba>
 8034576:	2a6e      	cmp	r2, #110	@ 0x6e
 8034578:	e7da      	b.n	8034530 <_strtod_l+0x308>
 803457a:	498c      	ldr	r1, [pc, #560]	@ (80347ac <_strtod_l+0x584>)
 803457c:	a819      	add	r0, sp, #100	@ 0x64
 803457e:	f001 faf5 	bl	8035b6c <__match>
 8034582:	2800      	cmp	r0, #0
 8034584:	f43f aea4 	beq.w	80342d0 <_strtod_l+0xa8>
 8034588:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803458a:	4989      	ldr	r1, [pc, #548]	@ (80347b0 <_strtod_l+0x588>)
 803458c:	3b01      	subs	r3, #1
 803458e:	a819      	add	r0, sp, #100	@ 0x64
 8034590:	9319      	str	r3, [sp, #100]	@ 0x64
 8034592:	f001 faeb 	bl	8035b6c <__match>
 8034596:	b910      	cbnz	r0, 803459e <_strtod_l+0x376>
 8034598:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803459a:	3301      	adds	r3, #1
 803459c:	9319      	str	r3, [sp, #100]	@ 0x64
 803459e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80347c0 <_strtod_l+0x598>
 80345a2:	f04f 0a00 	mov.w	sl, #0
 80345a6:	e678      	b.n	803429a <_strtod_l+0x72>
 80345a8:	4882      	ldr	r0, [pc, #520]	@ (80347b4 <_strtod_l+0x58c>)
 80345aa:	f001 f805 	bl	80355b8 <nan>
 80345ae:	ec5b ab10 	vmov	sl, fp, d0
 80345b2:	e672      	b.n	803429a <_strtod_l+0x72>
 80345b4:	eba8 0309 	sub.w	r3, r8, r9
 80345b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80345ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80345bc:	2f00      	cmp	r7, #0
 80345be:	bf08      	it	eq
 80345c0:	462f      	moveq	r7, r5
 80345c2:	2d10      	cmp	r5, #16
 80345c4:	462c      	mov	r4, r5
 80345c6:	bfa8      	it	ge
 80345c8:	2410      	movge	r4, #16
 80345ca:	f7db ffb3 	bl	8010534 <__aeabi_ui2d>
 80345ce:	2d09      	cmp	r5, #9
 80345d0:	4682      	mov	sl, r0
 80345d2:	468b      	mov	fp, r1
 80345d4:	dc13      	bgt.n	80345fe <_strtod_l+0x3d6>
 80345d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80345d8:	2b00      	cmp	r3, #0
 80345da:	f43f ae5e 	beq.w	803429a <_strtod_l+0x72>
 80345de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80345e0:	dd78      	ble.n	80346d4 <_strtod_l+0x4ac>
 80345e2:	2b16      	cmp	r3, #22
 80345e4:	dc5f      	bgt.n	80346a6 <_strtod_l+0x47e>
 80345e6:	4974      	ldr	r1, [pc, #464]	@ (80347b8 <_strtod_l+0x590>)
 80345e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80345ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80345f0:	4652      	mov	r2, sl
 80345f2:	465b      	mov	r3, fp
 80345f4:	f7dc f818 	bl	8010628 <__aeabi_dmul>
 80345f8:	4682      	mov	sl, r0
 80345fa:	468b      	mov	fp, r1
 80345fc:	e64d      	b.n	803429a <_strtod_l+0x72>
 80345fe:	4b6e      	ldr	r3, [pc, #440]	@ (80347b8 <_strtod_l+0x590>)
 8034600:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8034604:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8034608:	f7dc f80e 	bl	8010628 <__aeabi_dmul>
 803460c:	4682      	mov	sl, r0
 803460e:	9808      	ldr	r0, [sp, #32]
 8034610:	468b      	mov	fp, r1
 8034612:	f7db ff8f 	bl	8010534 <__aeabi_ui2d>
 8034616:	4602      	mov	r2, r0
 8034618:	460b      	mov	r3, r1
 803461a:	4650      	mov	r0, sl
 803461c:	4659      	mov	r1, fp
 803461e:	f7db fe4d 	bl	80102bc <__adddf3>
 8034622:	2d0f      	cmp	r5, #15
 8034624:	4682      	mov	sl, r0
 8034626:	468b      	mov	fp, r1
 8034628:	ddd5      	ble.n	80345d6 <_strtod_l+0x3ae>
 803462a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803462c:	1b2c      	subs	r4, r5, r4
 803462e:	441c      	add	r4, r3
 8034630:	2c00      	cmp	r4, #0
 8034632:	f340 8096 	ble.w	8034762 <_strtod_l+0x53a>
 8034636:	f014 030f 	ands.w	r3, r4, #15
 803463a:	d00a      	beq.n	8034652 <_strtod_l+0x42a>
 803463c:	495e      	ldr	r1, [pc, #376]	@ (80347b8 <_strtod_l+0x590>)
 803463e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8034642:	4652      	mov	r2, sl
 8034644:	465b      	mov	r3, fp
 8034646:	e9d1 0100 	ldrd	r0, r1, [r1]
 803464a:	f7db ffed 	bl	8010628 <__aeabi_dmul>
 803464e:	4682      	mov	sl, r0
 8034650:	468b      	mov	fp, r1
 8034652:	f034 040f 	bics.w	r4, r4, #15
 8034656:	d073      	beq.n	8034740 <_strtod_l+0x518>
 8034658:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 803465c:	dd48      	ble.n	80346f0 <_strtod_l+0x4c8>
 803465e:	2400      	movs	r4, #0
 8034660:	46a0      	mov	r8, r4
 8034662:	940a      	str	r4, [sp, #40]	@ 0x28
 8034664:	46a1      	mov	r9, r4
 8034666:	9a05      	ldr	r2, [sp, #20]
 8034668:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80347c0 <_strtod_l+0x598>
 803466c:	2322      	movs	r3, #34	@ 0x22
 803466e:	6013      	str	r3, [r2, #0]
 8034670:	f04f 0a00 	mov.w	sl, #0
 8034674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034676:	2b00      	cmp	r3, #0
 8034678:	f43f ae0f 	beq.w	803429a <_strtod_l+0x72>
 803467c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803467e:	9805      	ldr	r0, [sp, #20]
 8034680:	f7fe ff37 	bl	80334f2 <_Bfree>
 8034684:	9805      	ldr	r0, [sp, #20]
 8034686:	4649      	mov	r1, r9
 8034688:	f7fe ff33 	bl	80334f2 <_Bfree>
 803468c:	9805      	ldr	r0, [sp, #20]
 803468e:	4641      	mov	r1, r8
 8034690:	f7fe ff2f 	bl	80334f2 <_Bfree>
 8034694:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8034696:	9805      	ldr	r0, [sp, #20]
 8034698:	f7fe ff2b 	bl	80334f2 <_Bfree>
 803469c:	9805      	ldr	r0, [sp, #20]
 803469e:	4621      	mov	r1, r4
 80346a0:	f7fe ff27 	bl	80334f2 <_Bfree>
 80346a4:	e5f9      	b.n	803429a <_strtod_l+0x72>
 80346a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80346a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80346ac:	4293      	cmp	r3, r2
 80346ae:	dbbc      	blt.n	803462a <_strtod_l+0x402>
 80346b0:	4c41      	ldr	r4, [pc, #260]	@ (80347b8 <_strtod_l+0x590>)
 80346b2:	f1c5 050f 	rsb	r5, r5, #15
 80346b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80346ba:	4652      	mov	r2, sl
 80346bc:	465b      	mov	r3, fp
 80346be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80346c2:	f7db ffb1 	bl	8010628 <__aeabi_dmul>
 80346c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80346c8:	1b5d      	subs	r5, r3, r5
 80346ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80346ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80346d2:	e78f      	b.n	80345f4 <_strtod_l+0x3cc>
 80346d4:	3316      	adds	r3, #22
 80346d6:	dba8      	blt.n	803462a <_strtod_l+0x402>
 80346d8:	4b37      	ldr	r3, [pc, #220]	@ (80347b8 <_strtod_l+0x590>)
 80346da:	eba9 0808 	sub.w	r8, r9, r8
 80346de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80346e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80346e6:	4650      	mov	r0, sl
 80346e8:	4659      	mov	r1, fp
 80346ea:	f7dc f8c7 	bl	801087c <__aeabi_ddiv>
 80346ee:	e783      	b.n	80345f8 <_strtod_l+0x3d0>
 80346f0:	4b32      	ldr	r3, [pc, #200]	@ (80347bc <_strtod_l+0x594>)
 80346f2:	9308      	str	r3, [sp, #32]
 80346f4:	2300      	movs	r3, #0
 80346f6:	1124      	asrs	r4, r4, #4
 80346f8:	4650      	mov	r0, sl
 80346fa:	4659      	mov	r1, fp
 80346fc:	461e      	mov	r6, r3
 80346fe:	2c01      	cmp	r4, #1
 8034700:	dc21      	bgt.n	8034746 <_strtod_l+0x51e>
 8034702:	b10b      	cbz	r3, 8034708 <_strtod_l+0x4e0>
 8034704:	4682      	mov	sl, r0
 8034706:	468b      	mov	fp, r1
 8034708:	492c      	ldr	r1, [pc, #176]	@ (80347bc <_strtod_l+0x594>)
 803470a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 803470e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8034712:	4652      	mov	r2, sl
 8034714:	465b      	mov	r3, fp
 8034716:	e9d1 0100 	ldrd	r0, r1, [r1]
 803471a:	f7db ff85 	bl	8010628 <__aeabi_dmul>
 803471e:	4b28      	ldr	r3, [pc, #160]	@ (80347c0 <_strtod_l+0x598>)
 8034720:	460a      	mov	r2, r1
 8034722:	400b      	ands	r3, r1
 8034724:	4927      	ldr	r1, [pc, #156]	@ (80347c4 <_strtod_l+0x59c>)
 8034726:	428b      	cmp	r3, r1
 8034728:	4682      	mov	sl, r0
 803472a:	d898      	bhi.n	803465e <_strtod_l+0x436>
 803472c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8034730:	428b      	cmp	r3, r1
 8034732:	bf86      	itte	hi
 8034734:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80347c8 <_strtod_l+0x5a0>
 8034738:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 803473c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8034740:	2300      	movs	r3, #0
 8034742:	9308      	str	r3, [sp, #32]
 8034744:	e07a      	b.n	803483c <_strtod_l+0x614>
 8034746:	07e2      	lsls	r2, r4, #31
 8034748:	d505      	bpl.n	8034756 <_strtod_l+0x52e>
 803474a:	9b08      	ldr	r3, [sp, #32]
 803474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034750:	f7db ff6a 	bl	8010628 <__aeabi_dmul>
 8034754:	2301      	movs	r3, #1
 8034756:	9a08      	ldr	r2, [sp, #32]
 8034758:	3208      	adds	r2, #8
 803475a:	3601      	adds	r6, #1
 803475c:	1064      	asrs	r4, r4, #1
 803475e:	9208      	str	r2, [sp, #32]
 8034760:	e7cd      	b.n	80346fe <_strtod_l+0x4d6>
 8034762:	d0ed      	beq.n	8034740 <_strtod_l+0x518>
 8034764:	4264      	negs	r4, r4
 8034766:	f014 020f 	ands.w	r2, r4, #15
 803476a:	d00a      	beq.n	8034782 <_strtod_l+0x55a>
 803476c:	4b12      	ldr	r3, [pc, #72]	@ (80347b8 <_strtod_l+0x590>)
 803476e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8034772:	4650      	mov	r0, sl
 8034774:	4659      	mov	r1, fp
 8034776:	e9d3 2300 	ldrd	r2, r3, [r3]
 803477a:	f7dc f87f 	bl	801087c <__aeabi_ddiv>
 803477e:	4682      	mov	sl, r0
 8034780:	468b      	mov	fp, r1
 8034782:	1124      	asrs	r4, r4, #4
 8034784:	d0dc      	beq.n	8034740 <_strtod_l+0x518>
 8034786:	2c1f      	cmp	r4, #31
 8034788:	dd20      	ble.n	80347cc <_strtod_l+0x5a4>
 803478a:	2400      	movs	r4, #0
 803478c:	46a0      	mov	r8, r4
 803478e:	940a      	str	r4, [sp, #40]	@ 0x28
 8034790:	46a1      	mov	r9, r4
 8034792:	9a05      	ldr	r2, [sp, #20]
 8034794:	2322      	movs	r3, #34	@ 0x22
 8034796:	f04f 0a00 	mov.w	sl, #0
 803479a:	f04f 0b00 	mov.w	fp, #0
 803479e:	6013      	str	r3, [r2, #0]
 80347a0:	e768      	b.n	8034674 <_strtod_l+0x44c>
 80347a2:	bf00      	nop
 80347a4:	0803be55 	.word	0x0803be55
 80347a8:	0803c3d8 	.word	0x0803c3d8
 80347ac:	0803bcc4 	.word	0x0803bcc4
 80347b0:	0803c180 	.word	0x0803c180
 80347b4:	0803bcbe 	.word	0x0803bcbe
 80347b8:	0803c310 	.word	0x0803c310
 80347bc:	0803c2e8 	.word	0x0803c2e8
 80347c0:	7ff00000 	.word	0x7ff00000
 80347c4:	7ca00000 	.word	0x7ca00000
 80347c8:	7fefffff 	.word	0x7fefffff
 80347cc:	f014 0310 	ands.w	r3, r4, #16
 80347d0:	bf18      	it	ne
 80347d2:	236a      	movne	r3, #106	@ 0x6a
 80347d4:	4ea9      	ldr	r6, [pc, #676]	@ (8034a7c <_strtod_l+0x854>)
 80347d6:	9308      	str	r3, [sp, #32]
 80347d8:	4650      	mov	r0, sl
 80347da:	4659      	mov	r1, fp
 80347dc:	2300      	movs	r3, #0
 80347de:	07e2      	lsls	r2, r4, #31
 80347e0:	d504      	bpl.n	80347ec <_strtod_l+0x5c4>
 80347e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80347e6:	f7db ff1f 	bl	8010628 <__aeabi_dmul>
 80347ea:	2301      	movs	r3, #1
 80347ec:	1064      	asrs	r4, r4, #1
 80347ee:	f106 0608 	add.w	r6, r6, #8
 80347f2:	d1f4      	bne.n	80347de <_strtod_l+0x5b6>
 80347f4:	b10b      	cbz	r3, 80347fa <_strtod_l+0x5d2>
 80347f6:	4682      	mov	sl, r0
 80347f8:	468b      	mov	fp, r1
 80347fa:	9b08      	ldr	r3, [sp, #32]
 80347fc:	b1b3      	cbz	r3, 803482c <_strtod_l+0x604>
 80347fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8034802:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8034806:	2b00      	cmp	r3, #0
 8034808:	4659      	mov	r1, fp
 803480a:	dd0f      	ble.n	803482c <_strtod_l+0x604>
 803480c:	2b1f      	cmp	r3, #31
 803480e:	dd55      	ble.n	80348bc <_strtod_l+0x694>
 8034810:	2b34      	cmp	r3, #52	@ 0x34
 8034812:	bfde      	ittt	le
 8034814:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8034818:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 803481c:	4093      	lslle	r3, r2
 803481e:	f04f 0a00 	mov.w	sl, #0
 8034822:	bfcc      	ite	gt
 8034824:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8034828:	ea03 0b01 	andle.w	fp, r3, r1
 803482c:	2200      	movs	r2, #0
 803482e:	2300      	movs	r3, #0
 8034830:	4650      	mov	r0, sl
 8034832:	4659      	mov	r1, fp
 8034834:	f7dc f960 	bl	8010af8 <__aeabi_dcmpeq>
 8034838:	2800      	cmp	r0, #0
 803483a:	d1a6      	bne.n	803478a <_strtod_l+0x562>
 803483c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803483e:	9300      	str	r3, [sp, #0]
 8034840:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8034842:	9805      	ldr	r0, [sp, #20]
 8034844:	462b      	mov	r3, r5
 8034846:	463a      	mov	r2, r7
 8034848:	f7fe fea2 	bl	8033590 <__s2b>
 803484c:	900a      	str	r0, [sp, #40]	@ 0x28
 803484e:	2800      	cmp	r0, #0
 8034850:	f43f af05 	beq.w	803465e <_strtod_l+0x436>
 8034854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034856:	2a00      	cmp	r2, #0
 8034858:	eba9 0308 	sub.w	r3, r9, r8
 803485c:	bfa8      	it	ge
 803485e:	2300      	movge	r3, #0
 8034860:	9312      	str	r3, [sp, #72]	@ 0x48
 8034862:	2400      	movs	r4, #0
 8034864:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8034868:	9316      	str	r3, [sp, #88]	@ 0x58
 803486a:	46a0      	mov	r8, r4
 803486c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803486e:	9805      	ldr	r0, [sp, #20]
 8034870:	6859      	ldr	r1, [r3, #4]
 8034872:	f7fe fe19 	bl	80334a8 <_Balloc>
 8034876:	4681      	mov	r9, r0
 8034878:	2800      	cmp	r0, #0
 803487a:	f43f aef4 	beq.w	8034666 <_strtod_l+0x43e>
 803487e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034880:	691a      	ldr	r2, [r3, #16]
 8034882:	3202      	adds	r2, #2
 8034884:	f103 010c 	add.w	r1, r3, #12
 8034888:	0092      	lsls	r2, r2, #2
 803488a:	300c      	adds	r0, #12
 803488c:	f7f9 fadc 	bl	802de48 <memcpy>
 8034890:	ec4b ab10 	vmov	d0, sl, fp
 8034894:	9805      	ldr	r0, [sp, #20]
 8034896:	aa1c      	add	r2, sp, #112	@ 0x70
 8034898:	a91b      	add	r1, sp, #108	@ 0x6c
 803489a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 803489e:	f7ff f999 	bl	8033bd4 <__d2b>
 80348a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80348a4:	2800      	cmp	r0, #0
 80348a6:	f43f aede 	beq.w	8034666 <_strtod_l+0x43e>
 80348aa:	9805      	ldr	r0, [sp, #20]
 80348ac:	2101      	movs	r1, #1
 80348ae:	f7fe ff05 	bl	80336bc <__i2b>
 80348b2:	4680      	mov	r8, r0
 80348b4:	b948      	cbnz	r0, 80348ca <_strtod_l+0x6a2>
 80348b6:	f04f 0800 	mov.w	r8, #0
 80348ba:	e6d4      	b.n	8034666 <_strtod_l+0x43e>
 80348bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80348c0:	fa02 f303 	lsl.w	r3, r2, r3
 80348c4:	ea03 0a0a 	and.w	sl, r3, sl
 80348c8:	e7b0      	b.n	803482c <_strtod_l+0x604>
 80348ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80348cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80348ce:	2d00      	cmp	r5, #0
 80348d0:	bfab      	itete	ge
 80348d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80348d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80348d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80348d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80348da:	bfac      	ite	ge
 80348dc:	18ef      	addge	r7, r5, r3
 80348de:	1b5e      	sublt	r6, r3, r5
 80348e0:	9b08      	ldr	r3, [sp, #32]
 80348e2:	1aed      	subs	r5, r5, r3
 80348e4:	4415      	add	r5, r2
 80348e6:	4b66      	ldr	r3, [pc, #408]	@ (8034a80 <_strtod_l+0x858>)
 80348e8:	3d01      	subs	r5, #1
 80348ea:	429d      	cmp	r5, r3
 80348ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80348f0:	da50      	bge.n	8034994 <_strtod_l+0x76c>
 80348f2:	1b5b      	subs	r3, r3, r5
 80348f4:	2b1f      	cmp	r3, #31
 80348f6:	eba2 0203 	sub.w	r2, r2, r3
 80348fa:	f04f 0101 	mov.w	r1, #1
 80348fe:	dc3d      	bgt.n	803497c <_strtod_l+0x754>
 8034900:	fa01 f303 	lsl.w	r3, r1, r3
 8034904:	9313      	str	r3, [sp, #76]	@ 0x4c
 8034906:	2300      	movs	r3, #0
 8034908:	9310      	str	r3, [sp, #64]	@ 0x40
 803490a:	18bd      	adds	r5, r7, r2
 803490c:	9b08      	ldr	r3, [sp, #32]
 803490e:	42af      	cmp	r7, r5
 8034910:	4416      	add	r6, r2
 8034912:	441e      	add	r6, r3
 8034914:	463b      	mov	r3, r7
 8034916:	bfa8      	it	ge
 8034918:	462b      	movge	r3, r5
 803491a:	42b3      	cmp	r3, r6
 803491c:	bfa8      	it	ge
 803491e:	4633      	movge	r3, r6
 8034920:	2b00      	cmp	r3, #0
 8034922:	bfc2      	ittt	gt
 8034924:	1aed      	subgt	r5, r5, r3
 8034926:	1af6      	subgt	r6, r6, r3
 8034928:	1aff      	subgt	r7, r7, r3
 803492a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803492c:	2b00      	cmp	r3, #0
 803492e:	dd16      	ble.n	803495e <_strtod_l+0x736>
 8034930:	4641      	mov	r1, r8
 8034932:	9805      	ldr	r0, [sp, #20]
 8034934:	461a      	mov	r2, r3
 8034936:	f7fe ff81 	bl	803383c <__pow5mult>
 803493a:	4680      	mov	r8, r0
 803493c:	2800      	cmp	r0, #0
 803493e:	d0ba      	beq.n	80348b6 <_strtod_l+0x68e>
 8034940:	4601      	mov	r1, r0
 8034942:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8034944:	9805      	ldr	r0, [sp, #20]
 8034946:	f7fe fecf 	bl	80336e8 <__multiply>
 803494a:	900e      	str	r0, [sp, #56]	@ 0x38
 803494c:	2800      	cmp	r0, #0
 803494e:	f43f ae8a 	beq.w	8034666 <_strtod_l+0x43e>
 8034952:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034954:	9805      	ldr	r0, [sp, #20]
 8034956:	f7fe fdcc 	bl	80334f2 <_Bfree>
 803495a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803495c:	931a      	str	r3, [sp, #104]	@ 0x68
 803495e:	2d00      	cmp	r5, #0
 8034960:	dc1d      	bgt.n	803499e <_strtod_l+0x776>
 8034962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034964:	2b00      	cmp	r3, #0
 8034966:	dd23      	ble.n	80349b0 <_strtod_l+0x788>
 8034968:	4649      	mov	r1, r9
 803496a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 803496c:	9805      	ldr	r0, [sp, #20]
 803496e:	f7fe ff65 	bl	803383c <__pow5mult>
 8034972:	4681      	mov	r9, r0
 8034974:	b9e0      	cbnz	r0, 80349b0 <_strtod_l+0x788>
 8034976:	f04f 0900 	mov.w	r9, #0
 803497a:	e674      	b.n	8034666 <_strtod_l+0x43e>
 803497c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8034980:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8034984:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8034988:	35e2      	adds	r5, #226	@ 0xe2
 803498a:	fa01 f305 	lsl.w	r3, r1, r5
 803498e:	9310      	str	r3, [sp, #64]	@ 0x40
 8034990:	9113      	str	r1, [sp, #76]	@ 0x4c
 8034992:	e7ba      	b.n	803490a <_strtod_l+0x6e2>
 8034994:	2300      	movs	r3, #0
 8034996:	9310      	str	r3, [sp, #64]	@ 0x40
 8034998:	2301      	movs	r3, #1
 803499a:	9313      	str	r3, [sp, #76]	@ 0x4c
 803499c:	e7b5      	b.n	803490a <_strtod_l+0x6e2>
 803499e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80349a0:	9805      	ldr	r0, [sp, #20]
 80349a2:	462a      	mov	r2, r5
 80349a4:	f7fe ff8a 	bl	80338bc <__lshift>
 80349a8:	901a      	str	r0, [sp, #104]	@ 0x68
 80349aa:	2800      	cmp	r0, #0
 80349ac:	d1d9      	bne.n	8034962 <_strtod_l+0x73a>
 80349ae:	e65a      	b.n	8034666 <_strtod_l+0x43e>
 80349b0:	2e00      	cmp	r6, #0
 80349b2:	dd07      	ble.n	80349c4 <_strtod_l+0x79c>
 80349b4:	4649      	mov	r1, r9
 80349b6:	9805      	ldr	r0, [sp, #20]
 80349b8:	4632      	mov	r2, r6
 80349ba:	f7fe ff7f 	bl	80338bc <__lshift>
 80349be:	4681      	mov	r9, r0
 80349c0:	2800      	cmp	r0, #0
 80349c2:	d0d8      	beq.n	8034976 <_strtod_l+0x74e>
 80349c4:	2f00      	cmp	r7, #0
 80349c6:	dd08      	ble.n	80349da <_strtod_l+0x7b2>
 80349c8:	4641      	mov	r1, r8
 80349ca:	9805      	ldr	r0, [sp, #20]
 80349cc:	463a      	mov	r2, r7
 80349ce:	f7fe ff75 	bl	80338bc <__lshift>
 80349d2:	4680      	mov	r8, r0
 80349d4:	2800      	cmp	r0, #0
 80349d6:	f43f ae46 	beq.w	8034666 <_strtod_l+0x43e>
 80349da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80349dc:	9805      	ldr	r0, [sp, #20]
 80349de:	464a      	mov	r2, r9
 80349e0:	f7fe fff4 	bl	80339cc <__mdiff>
 80349e4:	4604      	mov	r4, r0
 80349e6:	2800      	cmp	r0, #0
 80349e8:	f43f ae3d 	beq.w	8034666 <_strtod_l+0x43e>
 80349ec:	68c3      	ldr	r3, [r0, #12]
 80349ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80349f0:	2300      	movs	r3, #0
 80349f2:	60c3      	str	r3, [r0, #12]
 80349f4:	4641      	mov	r1, r8
 80349f6:	f7fe ffcd 	bl	8033994 <__mcmp>
 80349fa:	2800      	cmp	r0, #0
 80349fc:	da46      	bge.n	8034a8c <_strtod_l+0x864>
 80349fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034a00:	ea53 030a 	orrs.w	r3, r3, sl
 8034a04:	d16c      	bne.n	8034ae0 <_strtod_l+0x8b8>
 8034a06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8034a0a:	2b00      	cmp	r3, #0
 8034a0c:	d168      	bne.n	8034ae0 <_strtod_l+0x8b8>
 8034a0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034a12:	0d1b      	lsrs	r3, r3, #20
 8034a14:	051b      	lsls	r3, r3, #20
 8034a16:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8034a1a:	d961      	bls.n	8034ae0 <_strtod_l+0x8b8>
 8034a1c:	6963      	ldr	r3, [r4, #20]
 8034a1e:	b913      	cbnz	r3, 8034a26 <_strtod_l+0x7fe>
 8034a20:	6923      	ldr	r3, [r4, #16]
 8034a22:	2b01      	cmp	r3, #1
 8034a24:	dd5c      	ble.n	8034ae0 <_strtod_l+0x8b8>
 8034a26:	4621      	mov	r1, r4
 8034a28:	2201      	movs	r2, #1
 8034a2a:	9805      	ldr	r0, [sp, #20]
 8034a2c:	f7fe ff46 	bl	80338bc <__lshift>
 8034a30:	4641      	mov	r1, r8
 8034a32:	4604      	mov	r4, r0
 8034a34:	f7fe ffae 	bl	8033994 <__mcmp>
 8034a38:	2800      	cmp	r0, #0
 8034a3a:	dd51      	ble.n	8034ae0 <_strtod_l+0x8b8>
 8034a3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034a40:	9a08      	ldr	r2, [sp, #32]
 8034a42:	0d1b      	lsrs	r3, r3, #20
 8034a44:	051b      	lsls	r3, r3, #20
 8034a46:	2a00      	cmp	r2, #0
 8034a48:	d06b      	beq.n	8034b22 <_strtod_l+0x8fa>
 8034a4a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8034a4e:	d868      	bhi.n	8034b22 <_strtod_l+0x8fa>
 8034a50:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8034a54:	f67f ae9d 	bls.w	8034792 <_strtod_l+0x56a>
 8034a58:	4b0a      	ldr	r3, [pc, #40]	@ (8034a84 <_strtod_l+0x85c>)
 8034a5a:	4650      	mov	r0, sl
 8034a5c:	4659      	mov	r1, fp
 8034a5e:	2200      	movs	r2, #0
 8034a60:	f7db fde2 	bl	8010628 <__aeabi_dmul>
 8034a64:	4b08      	ldr	r3, [pc, #32]	@ (8034a88 <_strtod_l+0x860>)
 8034a66:	400b      	ands	r3, r1
 8034a68:	4682      	mov	sl, r0
 8034a6a:	468b      	mov	fp, r1
 8034a6c:	2b00      	cmp	r3, #0
 8034a6e:	f47f ae05 	bne.w	803467c <_strtod_l+0x454>
 8034a72:	9a05      	ldr	r2, [sp, #20]
 8034a74:	2322      	movs	r3, #34	@ 0x22
 8034a76:	6013      	str	r3, [r2, #0]
 8034a78:	e600      	b.n	803467c <_strtod_l+0x454>
 8034a7a:	bf00      	nop
 8034a7c:	0803c400 	.word	0x0803c400
 8034a80:	fffffc02 	.word	0xfffffc02
 8034a84:	39500000 	.word	0x39500000
 8034a88:	7ff00000 	.word	0x7ff00000
 8034a8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8034a90:	d165      	bne.n	8034b5e <_strtod_l+0x936>
 8034a92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8034a94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8034a98:	b35a      	cbz	r2, 8034af2 <_strtod_l+0x8ca>
 8034a9a:	4a9f      	ldr	r2, [pc, #636]	@ (8034d18 <_strtod_l+0xaf0>)
 8034a9c:	4293      	cmp	r3, r2
 8034a9e:	d12b      	bne.n	8034af8 <_strtod_l+0x8d0>
 8034aa0:	9b08      	ldr	r3, [sp, #32]
 8034aa2:	4651      	mov	r1, sl
 8034aa4:	b303      	cbz	r3, 8034ae8 <_strtod_l+0x8c0>
 8034aa6:	4b9d      	ldr	r3, [pc, #628]	@ (8034d1c <_strtod_l+0xaf4>)
 8034aa8:	465a      	mov	r2, fp
 8034aaa:	4013      	ands	r3, r2
 8034aac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8034ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034ab4:	d81b      	bhi.n	8034aee <_strtod_l+0x8c6>
 8034ab6:	0d1b      	lsrs	r3, r3, #20
 8034ab8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8034abc:	fa02 f303 	lsl.w	r3, r2, r3
 8034ac0:	4299      	cmp	r1, r3
 8034ac2:	d119      	bne.n	8034af8 <_strtod_l+0x8d0>
 8034ac4:	4b96      	ldr	r3, [pc, #600]	@ (8034d20 <_strtod_l+0xaf8>)
 8034ac6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034ac8:	429a      	cmp	r2, r3
 8034aca:	d102      	bne.n	8034ad2 <_strtod_l+0x8aa>
 8034acc:	3101      	adds	r1, #1
 8034ace:	f43f adca 	beq.w	8034666 <_strtod_l+0x43e>
 8034ad2:	4b92      	ldr	r3, [pc, #584]	@ (8034d1c <_strtod_l+0xaf4>)
 8034ad4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034ad6:	401a      	ands	r2, r3
 8034ad8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8034adc:	f04f 0a00 	mov.w	sl, #0
 8034ae0:	9b08      	ldr	r3, [sp, #32]
 8034ae2:	2b00      	cmp	r3, #0
 8034ae4:	d1b8      	bne.n	8034a58 <_strtod_l+0x830>
 8034ae6:	e5c9      	b.n	803467c <_strtod_l+0x454>
 8034ae8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8034aec:	e7e8      	b.n	8034ac0 <_strtod_l+0x898>
 8034aee:	4613      	mov	r3, r2
 8034af0:	e7e6      	b.n	8034ac0 <_strtod_l+0x898>
 8034af2:	ea53 030a 	orrs.w	r3, r3, sl
 8034af6:	d0a1      	beq.n	8034a3c <_strtod_l+0x814>
 8034af8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034afa:	b1db      	cbz	r3, 8034b34 <_strtod_l+0x90c>
 8034afc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034afe:	4213      	tst	r3, r2
 8034b00:	d0ee      	beq.n	8034ae0 <_strtod_l+0x8b8>
 8034b02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034b04:	9a08      	ldr	r2, [sp, #32]
 8034b06:	4650      	mov	r0, sl
 8034b08:	4659      	mov	r1, fp
 8034b0a:	b1bb      	cbz	r3, 8034b3c <_strtod_l+0x914>
 8034b0c:	f7ff fb6e 	bl	80341ec <sulp>
 8034b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034b14:	ec53 2b10 	vmov	r2, r3, d0
 8034b18:	f7db fbd0 	bl	80102bc <__adddf3>
 8034b1c:	4682      	mov	sl, r0
 8034b1e:	468b      	mov	fp, r1
 8034b20:	e7de      	b.n	8034ae0 <_strtod_l+0x8b8>
 8034b22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8034b26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8034b2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8034b2e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8034b32:	e7d5      	b.n	8034ae0 <_strtod_l+0x8b8>
 8034b34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8034b36:	ea13 0f0a 	tst.w	r3, sl
 8034b3a:	e7e1      	b.n	8034b00 <_strtod_l+0x8d8>
 8034b3c:	f7ff fb56 	bl	80341ec <sulp>
 8034b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034b44:	ec53 2b10 	vmov	r2, r3, d0
 8034b48:	f7db fbb6 	bl	80102b8 <__aeabi_dsub>
 8034b4c:	2200      	movs	r2, #0
 8034b4e:	2300      	movs	r3, #0
 8034b50:	4682      	mov	sl, r0
 8034b52:	468b      	mov	fp, r1
 8034b54:	f7db ffd0 	bl	8010af8 <__aeabi_dcmpeq>
 8034b58:	2800      	cmp	r0, #0
 8034b5a:	d0c1      	beq.n	8034ae0 <_strtod_l+0x8b8>
 8034b5c:	e619      	b.n	8034792 <_strtod_l+0x56a>
 8034b5e:	4641      	mov	r1, r8
 8034b60:	4620      	mov	r0, r4
 8034b62:	f7ff f88f 	bl	8033c84 <__ratio>
 8034b66:	ec57 6b10 	vmov	r6, r7, d0
 8034b6a:	2200      	movs	r2, #0
 8034b6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8034b70:	4630      	mov	r0, r6
 8034b72:	4639      	mov	r1, r7
 8034b74:	f7db ffd4 	bl	8010b20 <__aeabi_dcmple>
 8034b78:	2800      	cmp	r0, #0
 8034b7a:	d06f      	beq.n	8034c5c <_strtod_l+0xa34>
 8034b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034b7e:	2b00      	cmp	r3, #0
 8034b80:	d17a      	bne.n	8034c78 <_strtod_l+0xa50>
 8034b82:	f1ba 0f00 	cmp.w	sl, #0
 8034b86:	d158      	bne.n	8034c3a <_strtod_l+0xa12>
 8034b88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034b8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8034b8e:	2b00      	cmp	r3, #0
 8034b90:	d15a      	bne.n	8034c48 <_strtod_l+0xa20>
 8034b92:	4b64      	ldr	r3, [pc, #400]	@ (8034d24 <_strtod_l+0xafc>)
 8034b94:	2200      	movs	r2, #0
 8034b96:	4630      	mov	r0, r6
 8034b98:	4639      	mov	r1, r7
 8034b9a:	f7db ffb7 	bl	8010b0c <__aeabi_dcmplt>
 8034b9e:	2800      	cmp	r0, #0
 8034ba0:	d159      	bne.n	8034c56 <_strtod_l+0xa2e>
 8034ba2:	4630      	mov	r0, r6
 8034ba4:	4639      	mov	r1, r7
 8034ba6:	4b60      	ldr	r3, [pc, #384]	@ (8034d28 <_strtod_l+0xb00>)
 8034ba8:	2200      	movs	r2, #0
 8034baa:	f7db fd3d 	bl	8010628 <__aeabi_dmul>
 8034bae:	4606      	mov	r6, r0
 8034bb0:	460f      	mov	r7, r1
 8034bb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8034bb6:	9606      	str	r6, [sp, #24]
 8034bb8:	9307      	str	r3, [sp, #28]
 8034bba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8034bbe:	4d57      	ldr	r5, [pc, #348]	@ (8034d1c <_strtod_l+0xaf4>)
 8034bc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8034bc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034bc6:	401d      	ands	r5, r3
 8034bc8:	4b58      	ldr	r3, [pc, #352]	@ (8034d2c <_strtod_l+0xb04>)
 8034bca:	429d      	cmp	r5, r3
 8034bcc:	f040 80b2 	bne.w	8034d34 <_strtod_l+0xb0c>
 8034bd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034bd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8034bd6:	ec4b ab10 	vmov	d0, sl, fp
 8034bda:	f7fe ff8b 	bl	8033af4 <__ulp>
 8034bde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8034be2:	ec51 0b10 	vmov	r0, r1, d0
 8034be6:	f7db fd1f 	bl	8010628 <__aeabi_dmul>
 8034bea:	4652      	mov	r2, sl
 8034bec:	465b      	mov	r3, fp
 8034bee:	f7db fb65 	bl	80102bc <__adddf3>
 8034bf2:	460b      	mov	r3, r1
 8034bf4:	4949      	ldr	r1, [pc, #292]	@ (8034d1c <_strtod_l+0xaf4>)
 8034bf6:	4a4e      	ldr	r2, [pc, #312]	@ (8034d30 <_strtod_l+0xb08>)
 8034bf8:	4019      	ands	r1, r3
 8034bfa:	4291      	cmp	r1, r2
 8034bfc:	4682      	mov	sl, r0
 8034bfe:	d942      	bls.n	8034c86 <_strtod_l+0xa5e>
 8034c00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8034c02:	4b47      	ldr	r3, [pc, #284]	@ (8034d20 <_strtod_l+0xaf8>)
 8034c04:	429a      	cmp	r2, r3
 8034c06:	d103      	bne.n	8034c10 <_strtod_l+0x9e8>
 8034c08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8034c0a:	3301      	adds	r3, #1
 8034c0c:	f43f ad2b 	beq.w	8034666 <_strtod_l+0x43e>
 8034c10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8034d20 <_strtod_l+0xaf8>
 8034c14:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8034c18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034c1a:	9805      	ldr	r0, [sp, #20]
 8034c1c:	f7fe fc69 	bl	80334f2 <_Bfree>
 8034c20:	9805      	ldr	r0, [sp, #20]
 8034c22:	4649      	mov	r1, r9
 8034c24:	f7fe fc65 	bl	80334f2 <_Bfree>
 8034c28:	9805      	ldr	r0, [sp, #20]
 8034c2a:	4641      	mov	r1, r8
 8034c2c:	f7fe fc61 	bl	80334f2 <_Bfree>
 8034c30:	9805      	ldr	r0, [sp, #20]
 8034c32:	4621      	mov	r1, r4
 8034c34:	f7fe fc5d 	bl	80334f2 <_Bfree>
 8034c38:	e618      	b.n	803486c <_strtod_l+0x644>
 8034c3a:	f1ba 0f01 	cmp.w	sl, #1
 8034c3e:	d103      	bne.n	8034c48 <_strtod_l+0xa20>
 8034c40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034c42:	2b00      	cmp	r3, #0
 8034c44:	f43f ada5 	beq.w	8034792 <_strtod_l+0x56a>
 8034c48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8034cf8 <_strtod_l+0xad0>
 8034c4c:	4f35      	ldr	r7, [pc, #212]	@ (8034d24 <_strtod_l+0xafc>)
 8034c4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8034c52:	2600      	movs	r6, #0
 8034c54:	e7b1      	b.n	8034bba <_strtod_l+0x992>
 8034c56:	4f34      	ldr	r7, [pc, #208]	@ (8034d28 <_strtod_l+0xb00>)
 8034c58:	2600      	movs	r6, #0
 8034c5a:	e7aa      	b.n	8034bb2 <_strtod_l+0x98a>
 8034c5c:	4b32      	ldr	r3, [pc, #200]	@ (8034d28 <_strtod_l+0xb00>)
 8034c5e:	4630      	mov	r0, r6
 8034c60:	4639      	mov	r1, r7
 8034c62:	2200      	movs	r2, #0
 8034c64:	f7db fce0 	bl	8010628 <__aeabi_dmul>
 8034c68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034c6a:	4606      	mov	r6, r0
 8034c6c:	460f      	mov	r7, r1
 8034c6e:	2b00      	cmp	r3, #0
 8034c70:	d09f      	beq.n	8034bb2 <_strtod_l+0x98a>
 8034c72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8034c76:	e7a0      	b.n	8034bba <_strtod_l+0x992>
 8034c78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8034d00 <_strtod_l+0xad8>
 8034c7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8034c80:	ec57 6b17 	vmov	r6, r7, d7
 8034c84:	e799      	b.n	8034bba <_strtod_l+0x992>
 8034c86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8034c8a:	9b08      	ldr	r3, [sp, #32]
 8034c8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8034c90:	2b00      	cmp	r3, #0
 8034c92:	d1c1      	bne.n	8034c18 <_strtod_l+0x9f0>
 8034c94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034c98:	0d1b      	lsrs	r3, r3, #20
 8034c9a:	051b      	lsls	r3, r3, #20
 8034c9c:	429d      	cmp	r5, r3
 8034c9e:	d1bb      	bne.n	8034c18 <_strtod_l+0x9f0>
 8034ca0:	4630      	mov	r0, r6
 8034ca2:	4639      	mov	r1, r7
 8034ca4:	f7dc f884 	bl	8010db0 <__aeabi_d2lz>
 8034ca8:	f7db fc90 	bl	80105cc <__aeabi_l2d>
 8034cac:	4602      	mov	r2, r0
 8034cae:	460b      	mov	r3, r1
 8034cb0:	4630      	mov	r0, r6
 8034cb2:	4639      	mov	r1, r7
 8034cb4:	f7db fb00 	bl	80102b8 <__aeabi_dsub>
 8034cb8:	460b      	mov	r3, r1
 8034cba:	4602      	mov	r2, r0
 8034cbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8034cc0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8034cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034cc6:	ea46 060a 	orr.w	r6, r6, sl
 8034cca:	431e      	orrs	r6, r3
 8034ccc:	d06f      	beq.n	8034dae <_strtod_l+0xb86>
 8034cce:	a30e      	add	r3, pc, #56	@ (adr r3, 8034d08 <_strtod_l+0xae0>)
 8034cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034cd4:	f7db ff1a 	bl	8010b0c <__aeabi_dcmplt>
 8034cd8:	2800      	cmp	r0, #0
 8034cda:	f47f accf 	bne.w	803467c <_strtod_l+0x454>
 8034cde:	a30c      	add	r3, pc, #48	@ (adr r3, 8034d10 <_strtod_l+0xae8>)
 8034ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034ce4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034ce8:	f7db ff2e 	bl	8010b48 <__aeabi_dcmpgt>
 8034cec:	2800      	cmp	r0, #0
 8034cee:	d093      	beq.n	8034c18 <_strtod_l+0x9f0>
 8034cf0:	e4c4      	b.n	803467c <_strtod_l+0x454>
 8034cf2:	bf00      	nop
 8034cf4:	f3af 8000 	nop.w
 8034cf8:	00000000 	.word	0x00000000
 8034cfc:	bff00000 	.word	0xbff00000
 8034d00:	00000000 	.word	0x00000000
 8034d04:	3ff00000 	.word	0x3ff00000
 8034d08:	94a03595 	.word	0x94a03595
 8034d0c:	3fdfffff 	.word	0x3fdfffff
 8034d10:	35afe535 	.word	0x35afe535
 8034d14:	3fe00000 	.word	0x3fe00000
 8034d18:	000fffff 	.word	0x000fffff
 8034d1c:	7ff00000 	.word	0x7ff00000
 8034d20:	7fefffff 	.word	0x7fefffff
 8034d24:	3ff00000 	.word	0x3ff00000
 8034d28:	3fe00000 	.word	0x3fe00000
 8034d2c:	7fe00000 	.word	0x7fe00000
 8034d30:	7c9fffff 	.word	0x7c9fffff
 8034d34:	9b08      	ldr	r3, [sp, #32]
 8034d36:	b323      	cbz	r3, 8034d82 <_strtod_l+0xb5a>
 8034d38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8034d3c:	d821      	bhi.n	8034d82 <_strtod_l+0xb5a>
 8034d3e:	a328      	add	r3, pc, #160	@ (adr r3, 8034de0 <_strtod_l+0xbb8>)
 8034d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034d44:	4630      	mov	r0, r6
 8034d46:	4639      	mov	r1, r7
 8034d48:	f7db feea 	bl	8010b20 <__aeabi_dcmple>
 8034d4c:	b1a0      	cbz	r0, 8034d78 <_strtod_l+0xb50>
 8034d4e:	4639      	mov	r1, r7
 8034d50:	4630      	mov	r0, r6
 8034d52:	f7db ff41 	bl	8010bd8 <__aeabi_d2uiz>
 8034d56:	2801      	cmp	r0, #1
 8034d58:	bf38      	it	cc
 8034d5a:	2001      	movcc	r0, #1
 8034d5c:	f7db fbea 	bl	8010534 <__aeabi_ui2d>
 8034d60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034d62:	4606      	mov	r6, r0
 8034d64:	460f      	mov	r7, r1
 8034d66:	b9fb      	cbnz	r3, 8034da8 <_strtod_l+0xb80>
 8034d68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8034d6c:	9014      	str	r0, [sp, #80]	@ 0x50
 8034d6e:	9315      	str	r3, [sp, #84]	@ 0x54
 8034d70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8034d74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8034d78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8034d7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8034d7e:	1b5b      	subs	r3, r3, r5
 8034d80:	9311      	str	r3, [sp, #68]	@ 0x44
 8034d82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8034d86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8034d8a:	f7fe feb3 	bl	8033af4 <__ulp>
 8034d8e:	4650      	mov	r0, sl
 8034d90:	ec53 2b10 	vmov	r2, r3, d0
 8034d94:	4659      	mov	r1, fp
 8034d96:	f7db fc47 	bl	8010628 <__aeabi_dmul>
 8034d9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8034d9e:	f7db fa8d 	bl	80102bc <__adddf3>
 8034da2:	4682      	mov	sl, r0
 8034da4:	468b      	mov	fp, r1
 8034da6:	e770      	b.n	8034c8a <_strtod_l+0xa62>
 8034da8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8034dac:	e7e0      	b.n	8034d70 <_strtod_l+0xb48>
 8034dae:	a30e      	add	r3, pc, #56	@ (adr r3, 8034de8 <_strtod_l+0xbc0>)
 8034db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034db4:	f7db feaa 	bl	8010b0c <__aeabi_dcmplt>
 8034db8:	e798      	b.n	8034cec <_strtod_l+0xac4>
 8034dba:	2300      	movs	r3, #0
 8034dbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8034dbe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8034dc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034dc2:	6013      	str	r3, [r2, #0]
 8034dc4:	f7ff ba6d 	b.w	80342a2 <_strtod_l+0x7a>
 8034dc8:	2a65      	cmp	r2, #101	@ 0x65
 8034dca:	f43f ab66 	beq.w	803449a <_strtod_l+0x272>
 8034dce:	2a45      	cmp	r2, #69	@ 0x45
 8034dd0:	f43f ab63 	beq.w	803449a <_strtod_l+0x272>
 8034dd4:	2301      	movs	r3, #1
 8034dd6:	f7ff bb9e 	b.w	8034516 <_strtod_l+0x2ee>
 8034dda:	bf00      	nop
 8034ddc:	f3af 8000 	nop.w
 8034de0:	ffc00000 	.word	0xffc00000
 8034de4:	41dfffff 	.word	0x41dfffff
 8034de8:	94a03595 	.word	0x94a03595
 8034dec:	3fcfffff 	.word	0x3fcfffff

08034df0 <_strtod_r>:
 8034df0:	4b01      	ldr	r3, [pc, #4]	@ (8034df8 <_strtod_r+0x8>)
 8034df2:	f7ff ba19 	b.w	8034228 <_strtod_l>
 8034df6:	bf00      	nop
 8034df8:	2000016c 	.word	0x2000016c

08034dfc <_strtoul_l.constprop.0>:
 8034dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8034e00:	4e34      	ldr	r6, [pc, #208]	@ (8034ed4 <_strtoul_l.constprop.0+0xd8>)
 8034e02:	4686      	mov	lr, r0
 8034e04:	460d      	mov	r5, r1
 8034e06:	4628      	mov	r0, r5
 8034e08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034e0c:	5d37      	ldrb	r7, [r6, r4]
 8034e0e:	f017 0708 	ands.w	r7, r7, #8
 8034e12:	d1f8      	bne.n	8034e06 <_strtoul_l.constprop.0+0xa>
 8034e14:	2c2d      	cmp	r4, #45	@ 0x2d
 8034e16:	d12f      	bne.n	8034e78 <_strtoul_l.constprop.0+0x7c>
 8034e18:	782c      	ldrb	r4, [r5, #0]
 8034e1a:	2701      	movs	r7, #1
 8034e1c:	1c85      	adds	r5, r0, #2
 8034e1e:	f033 0010 	bics.w	r0, r3, #16
 8034e22:	d109      	bne.n	8034e38 <_strtoul_l.constprop.0+0x3c>
 8034e24:	2c30      	cmp	r4, #48	@ 0x30
 8034e26:	d12c      	bne.n	8034e82 <_strtoul_l.constprop.0+0x86>
 8034e28:	7828      	ldrb	r0, [r5, #0]
 8034e2a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8034e2e:	2858      	cmp	r0, #88	@ 0x58
 8034e30:	d127      	bne.n	8034e82 <_strtoul_l.constprop.0+0x86>
 8034e32:	786c      	ldrb	r4, [r5, #1]
 8034e34:	2310      	movs	r3, #16
 8034e36:	3502      	adds	r5, #2
 8034e38:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8034e3c:	2600      	movs	r6, #0
 8034e3e:	fbb8 f8f3 	udiv	r8, r8, r3
 8034e42:	fb03 f908 	mul.w	r9, r3, r8
 8034e46:	ea6f 0909 	mvn.w	r9, r9
 8034e4a:	4630      	mov	r0, r6
 8034e4c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8034e50:	f1bc 0f09 	cmp.w	ip, #9
 8034e54:	d81c      	bhi.n	8034e90 <_strtoul_l.constprop.0+0x94>
 8034e56:	4664      	mov	r4, ip
 8034e58:	42a3      	cmp	r3, r4
 8034e5a:	dd2a      	ble.n	8034eb2 <_strtoul_l.constprop.0+0xb6>
 8034e5c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8034e60:	d007      	beq.n	8034e72 <_strtoul_l.constprop.0+0x76>
 8034e62:	4580      	cmp	r8, r0
 8034e64:	d322      	bcc.n	8034eac <_strtoul_l.constprop.0+0xb0>
 8034e66:	d101      	bne.n	8034e6c <_strtoul_l.constprop.0+0x70>
 8034e68:	45a1      	cmp	r9, r4
 8034e6a:	db1f      	blt.n	8034eac <_strtoul_l.constprop.0+0xb0>
 8034e6c:	fb00 4003 	mla	r0, r0, r3, r4
 8034e70:	2601      	movs	r6, #1
 8034e72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034e76:	e7e9      	b.n	8034e4c <_strtoul_l.constprop.0+0x50>
 8034e78:	2c2b      	cmp	r4, #43	@ 0x2b
 8034e7a:	bf04      	itt	eq
 8034e7c:	782c      	ldrbeq	r4, [r5, #0]
 8034e7e:	1c85      	addeq	r5, r0, #2
 8034e80:	e7cd      	b.n	8034e1e <_strtoul_l.constprop.0+0x22>
 8034e82:	2b00      	cmp	r3, #0
 8034e84:	d1d8      	bne.n	8034e38 <_strtoul_l.constprop.0+0x3c>
 8034e86:	2c30      	cmp	r4, #48	@ 0x30
 8034e88:	bf0c      	ite	eq
 8034e8a:	2308      	moveq	r3, #8
 8034e8c:	230a      	movne	r3, #10
 8034e8e:	e7d3      	b.n	8034e38 <_strtoul_l.constprop.0+0x3c>
 8034e90:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8034e94:	f1bc 0f19 	cmp.w	ip, #25
 8034e98:	d801      	bhi.n	8034e9e <_strtoul_l.constprop.0+0xa2>
 8034e9a:	3c37      	subs	r4, #55	@ 0x37
 8034e9c:	e7dc      	b.n	8034e58 <_strtoul_l.constprop.0+0x5c>
 8034e9e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8034ea2:	f1bc 0f19 	cmp.w	ip, #25
 8034ea6:	d804      	bhi.n	8034eb2 <_strtoul_l.constprop.0+0xb6>
 8034ea8:	3c57      	subs	r4, #87	@ 0x57
 8034eaa:	e7d5      	b.n	8034e58 <_strtoul_l.constprop.0+0x5c>
 8034eac:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8034eb0:	e7df      	b.n	8034e72 <_strtoul_l.constprop.0+0x76>
 8034eb2:	1c73      	adds	r3, r6, #1
 8034eb4:	d106      	bne.n	8034ec4 <_strtoul_l.constprop.0+0xc8>
 8034eb6:	2322      	movs	r3, #34	@ 0x22
 8034eb8:	f8ce 3000 	str.w	r3, [lr]
 8034ebc:	4630      	mov	r0, r6
 8034ebe:	b932      	cbnz	r2, 8034ece <_strtoul_l.constprop.0+0xd2>
 8034ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8034ec4:	b107      	cbz	r7, 8034ec8 <_strtoul_l.constprop.0+0xcc>
 8034ec6:	4240      	negs	r0, r0
 8034ec8:	2a00      	cmp	r2, #0
 8034eca:	d0f9      	beq.n	8034ec0 <_strtoul_l.constprop.0+0xc4>
 8034ecc:	b106      	cbz	r6, 8034ed0 <_strtoul_l.constprop.0+0xd4>
 8034ece:	1e69      	subs	r1, r5, #1
 8034ed0:	6011      	str	r1, [r2, #0]
 8034ed2:	e7f5      	b.n	8034ec0 <_strtoul_l.constprop.0+0xc4>
 8034ed4:	0803c07d 	.word	0x0803c07d

08034ed8 <_strtoul_r>:
 8034ed8:	f7ff bf90 	b.w	8034dfc <_strtoul_l.constprop.0>

08034edc <strtoul>:
 8034edc:	4613      	mov	r3, r2
 8034ede:	460a      	mov	r2, r1
 8034ee0:	4601      	mov	r1, r0
 8034ee2:	4802      	ldr	r0, [pc, #8]	@ (8034eec <strtoul+0x10>)
 8034ee4:	6800      	ldr	r0, [r0, #0]
 8034ee6:	f7ff bf89 	b.w	8034dfc <_strtoul_l.constprop.0>
 8034eea:	bf00      	nop
 8034eec:	200002d8 	.word	0x200002d8

08034ef0 <__submore>:
 8034ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8034ef4:	460c      	mov	r4, r1
 8034ef6:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8034ef8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8034efc:	4299      	cmp	r1, r3
 8034efe:	d11d      	bne.n	8034f3c <__submore+0x4c>
 8034f00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8034f04:	f7f9 ffba 	bl	802ee7c <_malloc_r>
 8034f08:	b918      	cbnz	r0, 8034f12 <__submore+0x22>
 8034f0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8034f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8034f16:	6363      	str	r3, [r4, #52]	@ 0x34
 8034f18:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8034f1c:	6320      	str	r0, [r4, #48]	@ 0x30
 8034f1e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8034f22:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8034f26:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8034f2a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8034f2e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8034f32:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8034f36:	6020      	str	r0, [r4, #0]
 8034f38:	2000      	movs	r0, #0
 8034f3a:	e7e8      	b.n	8034f0e <__submore+0x1e>
 8034f3c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8034f3e:	0077      	lsls	r7, r6, #1
 8034f40:	463a      	mov	r2, r7
 8034f42:	f7fe ffab 	bl	8033e9c <_realloc_r>
 8034f46:	4605      	mov	r5, r0
 8034f48:	2800      	cmp	r0, #0
 8034f4a:	d0de      	beq.n	8034f0a <__submore+0x1a>
 8034f4c:	eb00 0806 	add.w	r8, r0, r6
 8034f50:	4601      	mov	r1, r0
 8034f52:	4632      	mov	r2, r6
 8034f54:	4640      	mov	r0, r8
 8034f56:	f7f8 ff77 	bl	802de48 <memcpy>
 8034f5a:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 8034f5e:	f8c4 8000 	str.w	r8, [r4]
 8034f62:	e7e9      	b.n	8034f38 <__submore+0x48>

08034f64 <__ascii_wctomb>:
 8034f64:	4603      	mov	r3, r0
 8034f66:	4608      	mov	r0, r1
 8034f68:	b141      	cbz	r1, 8034f7c <__ascii_wctomb+0x18>
 8034f6a:	2aff      	cmp	r2, #255	@ 0xff
 8034f6c:	d904      	bls.n	8034f78 <__ascii_wctomb+0x14>
 8034f6e:	228a      	movs	r2, #138	@ 0x8a
 8034f70:	601a      	str	r2, [r3, #0]
 8034f72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034f76:	4770      	bx	lr
 8034f78:	700a      	strb	r2, [r1, #0]
 8034f7a:	2001      	movs	r0, #1
 8034f7c:	4770      	bx	lr

08034f7e <__swbuf_r>:
 8034f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034f80:	460e      	mov	r6, r1
 8034f82:	4614      	mov	r4, r2
 8034f84:	4605      	mov	r5, r0
 8034f86:	b118      	cbz	r0, 8034f90 <__swbuf_r+0x12>
 8034f88:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8034f8a:	b90b      	cbnz	r3, 8034f90 <__swbuf_r+0x12>
 8034f8c:	f7f7 fa7a 	bl	802c484 <__sinit>
 8034f90:	69a3      	ldr	r3, [r4, #24]
 8034f92:	60a3      	str	r3, [r4, #8]
 8034f94:	89a3      	ldrh	r3, [r4, #12]
 8034f96:	0719      	lsls	r1, r3, #28
 8034f98:	d501      	bpl.n	8034f9e <__swbuf_r+0x20>
 8034f9a:	6923      	ldr	r3, [r4, #16]
 8034f9c:	b943      	cbnz	r3, 8034fb0 <__swbuf_r+0x32>
 8034f9e:	4621      	mov	r1, r4
 8034fa0:	4628      	mov	r0, r5
 8034fa2:	f7f7 fc2b 	bl	802c7fc <__swsetup_r>
 8034fa6:	b118      	cbz	r0, 8034fb0 <__swbuf_r+0x32>
 8034fa8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8034fac:	4638      	mov	r0, r7
 8034fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8034fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8034fb4:	b2f6      	uxtb	r6, r6
 8034fb6:	049a      	lsls	r2, r3, #18
 8034fb8:	4637      	mov	r7, r6
 8034fba:	d406      	bmi.n	8034fca <__swbuf_r+0x4c>
 8034fbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8034fc0:	81a3      	strh	r3, [r4, #12]
 8034fc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8034fc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8034fc8:	6663      	str	r3, [r4, #100]	@ 0x64
 8034fca:	6823      	ldr	r3, [r4, #0]
 8034fcc:	6922      	ldr	r2, [r4, #16]
 8034fce:	1a98      	subs	r0, r3, r2
 8034fd0:	6963      	ldr	r3, [r4, #20]
 8034fd2:	4283      	cmp	r3, r0
 8034fd4:	dc05      	bgt.n	8034fe2 <__swbuf_r+0x64>
 8034fd6:	4621      	mov	r1, r4
 8034fd8:	4628      	mov	r0, r5
 8034fda:	f7f7 f911 	bl	802c200 <_fflush_r>
 8034fde:	2800      	cmp	r0, #0
 8034fe0:	d1e2      	bne.n	8034fa8 <__swbuf_r+0x2a>
 8034fe2:	68a3      	ldr	r3, [r4, #8]
 8034fe4:	3b01      	subs	r3, #1
 8034fe6:	60a3      	str	r3, [r4, #8]
 8034fe8:	6823      	ldr	r3, [r4, #0]
 8034fea:	1c5a      	adds	r2, r3, #1
 8034fec:	6022      	str	r2, [r4, #0]
 8034fee:	701e      	strb	r6, [r3, #0]
 8034ff0:	6962      	ldr	r2, [r4, #20]
 8034ff2:	1c43      	adds	r3, r0, #1
 8034ff4:	429a      	cmp	r2, r3
 8034ff6:	d004      	beq.n	8035002 <__swbuf_r+0x84>
 8034ff8:	89a3      	ldrh	r3, [r4, #12]
 8034ffa:	07db      	lsls	r3, r3, #31
 8034ffc:	d5d6      	bpl.n	8034fac <__swbuf_r+0x2e>
 8034ffe:	2e0a      	cmp	r6, #10
 8035000:	d1d4      	bne.n	8034fac <__swbuf_r+0x2e>
 8035002:	4621      	mov	r1, r4
 8035004:	4628      	mov	r0, r5
 8035006:	f7f7 f8fb 	bl	802c200 <_fflush_r>
 803500a:	2800      	cmp	r0, #0
 803500c:	d0ce      	beq.n	8034fac <__swbuf_r+0x2e>
 803500e:	e7cb      	b.n	8034fa8 <__swbuf_r+0x2a>

08035010 <_raise_r>:
 8035010:	291f      	cmp	r1, #31
 8035012:	b538      	push	{r3, r4, r5, lr}
 8035014:	4605      	mov	r5, r0
 8035016:	460c      	mov	r4, r1
 8035018:	d904      	bls.n	8035024 <_raise_r+0x14>
 803501a:	2316      	movs	r3, #22
 803501c:	6003      	str	r3, [r0, #0]
 803501e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035022:	bd38      	pop	{r3, r4, r5, pc}
 8035024:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8035028:	b112      	cbz	r2, 8035030 <_raise_r+0x20>
 803502a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803502e:	b94b      	cbnz	r3, 8035044 <_raise_r+0x34>
 8035030:	4628      	mov	r0, r5
 8035032:	f000 f8fd 	bl	8035230 <_getpid_r>
 8035036:	4622      	mov	r2, r4
 8035038:	4601      	mov	r1, r0
 803503a:	4628      	mov	r0, r5
 803503c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8035040:	f000 b8e4 	b.w	803520c <_kill_r>
 8035044:	2b01      	cmp	r3, #1
 8035046:	d00a      	beq.n	803505e <_raise_r+0x4e>
 8035048:	1c59      	adds	r1, r3, #1
 803504a:	d103      	bne.n	8035054 <_raise_r+0x44>
 803504c:	2316      	movs	r3, #22
 803504e:	6003      	str	r3, [r0, #0]
 8035050:	2001      	movs	r0, #1
 8035052:	e7e6      	b.n	8035022 <_raise_r+0x12>
 8035054:	2100      	movs	r1, #0
 8035056:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 803505a:	4620      	mov	r0, r4
 803505c:	4798      	blx	r3
 803505e:	2000      	movs	r0, #0
 8035060:	e7df      	b.n	8035022 <_raise_r+0x12>
	...

08035064 <raise>:
 8035064:	4b02      	ldr	r3, [pc, #8]	@ (8035070 <raise+0xc>)
 8035066:	4601      	mov	r1, r0
 8035068:	6818      	ldr	r0, [r3, #0]
 803506a:	f7ff bfd1 	b.w	8035010 <_raise_r>
 803506e:	bf00      	nop
 8035070:	200002d8 	.word	0x200002d8

08035074 <__gettzinfo>:
 8035074:	4800      	ldr	r0, [pc, #0]	@ (8035078 <__gettzinfo+0x4>)
 8035076:	4770      	bx	lr
 8035078:	20000818 	.word	0x20000818

0803507c <gmtime_r>:
 803507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035080:	4a4d      	ldr	r2, [pc, #308]	@ (80351b8 <gmtime_r+0x13c>)
 8035082:	460c      	mov	r4, r1
 8035084:	2300      	movs	r3, #0
 8035086:	e9d0 0100 	ldrd	r0, r1, [r0]
 803508a:	f7db fe15 	bl	8010cb8 <__aeabi_ldivmod>
 803508e:	2a00      	cmp	r2, #0
 8035090:	bfbc      	itt	lt
 8035092:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8035096:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 803509a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 803509e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 80350a2:	fbb2 f3f1 	udiv	r3, r2, r1
 80350a6:	fb01 2213 	mls	r2, r1, r3, r2
 80350aa:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 80350ae:	bfac      	ite	ge
 80350b0:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 80350b4:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 80350b8:	60a3      	str	r3, [r4, #8]
 80350ba:	fbb2 f3f1 	udiv	r3, r2, r1
 80350be:	fb01 2213 	mls	r2, r1, r3, r2
 80350c2:	6063      	str	r3, [r4, #4]
 80350c4:	6022      	str	r2, [r4, #0]
 80350c6:	1cc3      	adds	r3, r0, #3
 80350c8:	2207      	movs	r2, #7
 80350ca:	fb93 f2f2 	sdiv	r2, r3, r2
 80350ce:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80350d2:	1a9b      	subs	r3, r3, r2
 80350d4:	bf48      	it	mi
 80350d6:	3307      	addmi	r3, #7
 80350d8:	2800      	cmp	r0, #0
 80350da:	61a3      	str	r3, [r4, #24]
 80350dc:	bfb8      	it	lt
 80350de:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 80350e2:	4936      	ldr	r1, [pc, #216]	@ (80351bc <gmtime_r+0x140>)
 80350e4:	bfae      	itee	ge
 80350e6:	fb90 f1f1 	sdivge	r1, r0, r1
 80350ea:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 80350ee:	fb93 f1f1 	sdivlt	r1, r3, r1
 80350f2:	4b33      	ldr	r3, [pc, #204]	@ (80351c0 <gmtime_r+0x144>)
 80350f4:	fb03 0001 	mla	r0, r3, r1, r0
 80350f8:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 80350fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8035100:	4403      	add	r3, r0
 8035102:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8035106:	fbb0 f2fc 	udiv	r2, r0, ip
 803510a:	1a9b      	subs	r3, r3, r2
 803510c:	f240 176d 	movw	r7, #365	@ 0x16d
 8035110:	4a2c      	ldr	r2, [pc, #176]	@ (80351c4 <gmtime_r+0x148>)
 8035112:	fbb0 f2f2 	udiv	r2, r0, r2
 8035116:	2664      	movs	r6, #100	@ 0x64
 8035118:	1a9b      	subs	r3, r3, r2
 803511a:	fbb3 f2f7 	udiv	r2, r3, r7
 803511e:	fbb3 f3fc 	udiv	r3, r3, ip
 8035122:	fbb2 f5f6 	udiv	r5, r2, r6
 8035126:	1aeb      	subs	r3, r5, r3
 8035128:	4403      	add	r3, r0
 803512a:	fb07 3312 	mls	r3, r7, r2, r3
 803512e:	2099      	movs	r0, #153	@ 0x99
 8035130:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8035134:	3702      	adds	r7, #2
 8035136:	f103 0e01 	add.w	lr, r3, #1
 803513a:	fbb7 fcf0 	udiv	ip, r7, r0
 803513e:	fb00 f00c 	mul.w	r0, r0, ip
 8035142:	3002      	adds	r0, #2
 8035144:	f04f 0805 	mov.w	r8, #5
 8035148:	fbb0 f0f8 	udiv	r0, r0, r8
 803514c:	ebae 0000 	sub.w	r0, lr, r0
 8035150:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8035154:	4577      	cmp	r7, lr
 8035156:	bf8c      	ite	hi
 8035158:	f06f 0709 	mvnhi.w	r7, #9
 803515c:	2702      	movls	r7, #2
 803515e:	4467      	add	r7, ip
 8035160:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8035164:	fb0c 2101 	mla	r1, ip, r1, r2
 8035168:	2f01      	cmp	r7, #1
 803516a:	bf98      	it	ls
 803516c:	3101      	addls	r1, #1
 803516e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8035172:	d30c      	bcc.n	803518e <gmtime_r+0x112>
 8035174:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8035178:	61e3      	str	r3, [r4, #28]
 803517a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 803517e:	2300      	movs	r3, #0
 8035180:	60e0      	str	r0, [r4, #12]
 8035182:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8035186:	6223      	str	r3, [r4, #32]
 8035188:	4620      	mov	r0, r4
 803518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803518e:	f012 0f03 	tst.w	r2, #3
 8035192:	d102      	bne.n	803519a <gmtime_r+0x11e>
 8035194:	fb06 2515 	mls	r5, r6, r5, r2
 8035198:	b95d      	cbnz	r5, 80351b2 <gmtime_r+0x136>
 803519a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 803519e:	fbb2 f6f5 	udiv	r6, r2, r5
 80351a2:	fb05 2216 	mls	r2, r5, r6, r2
 80351a6:	fab2 f282 	clz	r2, r2
 80351aa:	0952      	lsrs	r2, r2, #5
 80351ac:	333b      	adds	r3, #59	@ 0x3b
 80351ae:	4413      	add	r3, r2
 80351b0:	e7e2      	b.n	8035178 <gmtime_r+0xfc>
 80351b2:	2201      	movs	r2, #1
 80351b4:	e7fa      	b.n	80351ac <gmtime_r+0x130>
 80351b6:	bf00      	nop
 80351b8:	00015180 	.word	0x00015180
 80351bc:	00023ab1 	.word	0x00023ab1
 80351c0:	fffdc54f 	.word	0xfffdc54f
 80351c4:	00023ab0 	.word	0x00023ab0

080351c8 <_fstat_r>:
 80351c8:	b538      	push	{r3, r4, r5, lr}
 80351ca:	4d07      	ldr	r5, [pc, #28]	@ (80351e8 <_fstat_r+0x20>)
 80351cc:	2300      	movs	r3, #0
 80351ce:	4604      	mov	r4, r0
 80351d0:	4608      	mov	r0, r1
 80351d2:	4611      	mov	r1, r2
 80351d4:	602b      	str	r3, [r5, #0]
 80351d6:	f7dd f904 	bl	80123e2 <_fstat>
 80351da:	1c43      	adds	r3, r0, #1
 80351dc:	d102      	bne.n	80351e4 <_fstat_r+0x1c>
 80351de:	682b      	ldr	r3, [r5, #0]
 80351e0:	b103      	cbz	r3, 80351e4 <_fstat_r+0x1c>
 80351e2:	6023      	str	r3, [r4, #0]
 80351e4:	bd38      	pop	{r3, r4, r5, pc}
 80351e6:	bf00      	nop
 80351e8:	2001a044 	.word	0x2001a044

080351ec <_isatty_r>:
 80351ec:	b538      	push	{r3, r4, r5, lr}
 80351ee:	4d06      	ldr	r5, [pc, #24]	@ (8035208 <_isatty_r+0x1c>)
 80351f0:	2300      	movs	r3, #0
 80351f2:	4604      	mov	r4, r0
 80351f4:	4608      	mov	r0, r1
 80351f6:	602b      	str	r3, [r5, #0]
 80351f8:	f7dd f8f8 	bl	80123ec <_isatty>
 80351fc:	1c43      	adds	r3, r0, #1
 80351fe:	d102      	bne.n	8035206 <_isatty_r+0x1a>
 8035200:	682b      	ldr	r3, [r5, #0]
 8035202:	b103      	cbz	r3, 8035206 <_isatty_r+0x1a>
 8035204:	6023      	str	r3, [r4, #0]
 8035206:	bd38      	pop	{r3, r4, r5, pc}
 8035208:	2001a044 	.word	0x2001a044

0803520c <_kill_r>:
 803520c:	b538      	push	{r3, r4, r5, lr}
 803520e:	4d07      	ldr	r5, [pc, #28]	@ (803522c <_kill_r+0x20>)
 8035210:	2300      	movs	r3, #0
 8035212:	4604      	mov	r4, r0
 8035214:	4608      	mov	r0, r1
 8035216:	4611      	mov	r1, r2
 8035218:	602b      	str	r3, [r5, #0]
 803521a:	f7dd f8b3 	bl	8012384 <_kill>
 803521e:	1c43      	adds	r3, r0, #1
 8035220:	d102      	bne.n	8035228 <_kill_r+0x1c>
 8035222:	682b      	ldr	r3, [r5, #0]
 8035224:	b103      	cbz	r3, 8035228 <_kill_r+0x1c>
 8035226:	6023      	str	r3, [r4, #0]
 8035228:	bd38      	pop	{r3, r4, r5, pc}
 803522a:	bf00      	nop
 803522c:	2001a044 	.word	0x2001a044

08035230 <_getpid_r>:
 8035230:	f7dd b8a6 	b.w	8012380 <_getpid>

08035234 <_sbrk_r>:
 8035234:	b538      	push	{r3, r4, r5, lr}
 8035236:	4d06      	ldr	r5, [pc, #24]	@ (8035250 <_sbrk_r+0x1c>)
 8035238:	2300      	movs	r3, #0
 803523a:	4604      	mov	r4, r0
 803523c:	4608      	mov	r0, r1
 803523e:	602b      	str	r3, [r5, #0]
 8035240:	f7dd f8d8 	bl	80123f4 <_sbrk>
 8035244:	1c43      	adds	r3, r0, #1
 8035246:	d102      	bne.n	803524e <_sbrk_r+0x1a>
 8035248:	682b      	ldr	r3, [r5, #0]
 803524a:	b103      	cbz	r3, 803524e <_sbrk_r+0x1a>
 803524c:	6023      	str	r3, [r4, #0]
 803524e:	bd38      	pop	{r3, r4, r5, pc}
 8035250:	2001a044 	.word	0x2001a044

08035254 <sysconf>:
 8035254:	2808      	cmp	r0, #8
 8035256:	b508      	push	{r3, lr}
 8035258:	d006      	beq.n	8035268 <sysconf+0x14>
 803525a:	f7f8 fdbd 	bl	802ddd8 <__errno>
 803525e:	2316      	movs	r3, #22
 8035260:	6003      	str	r3, [r0, #0]
 8035262:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035266:	bd08      	pop	{r3, pc}
 8035268:	2080      	movs	r0, #128	@ 0x80
 803526a:	e7fc      	b.n	8035266 <sysconf+0x12>

0803526c <_strtoll_l.constprop.0>:
 803526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035270:	b085      	sub	sp, #20
 8035272:	4690      	mov	r8, r2
 8035274:	4a43      	ldr	r2, [pc, #268]	@ (8035384 <_strtoll_l.constprop.0+0x118>)
 8035276:	9002      	str	r0, [sp, #8]
 8035278:	4689      	mov	r9, r1
 803527a:	461e      	mov	r6, r3
 803527c:	460d      	mov	r5, r1
 803527e:	462b      	mov	r3, r5
 8035280:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035284:	5d17      	ldrb	r7, [r2, r4]
 8035286:	f017 0708 	ands.w	r7, r7, #8
 803528a:	d1f8      	bne.n	803527e <_strtoll_l.constprop.0+0x12>
 803528c:	2c2d      	cmp	r4, #45	@ 0x2d
 803528e:	d149      	bne.n	8035324 <_strtoll_l.constprop.0+0xb8>
 8035290:	782c      	ldrb	r4, [r5, #0]
 8035292:	2701      	movs	r7, #1
 8035294:	1c9d      	adds	r5, r3, #2
 8035296:	f036 0310 	bics.w	r3, r6, #16
 803529a:	d109      	bne.n	80352b0 <_strtoll_l.constprop.0+0x44>
 803529c:	2c30      	cmp	r4, #48	@ 0x30
 803529e:	d146      	bne.n	803532e <_strtoll_l.constprop.0+0xc2>
 80352a0:	782b      	ldrb	r3, [r5, #0]
 80352a2:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80352a6:	2b58      	cmp	r3, #88	@ 0x58
 80352a8:	d141      	bne.n	803532e <_strtoll_l.constprop.0+0xc2>
 80352aa:	786c      	ldrb	r4, [r5, #1]
 80352ac:	2610      	movs	r6, #16
 80352ae:	3502      	adds	r5, #2
 80352b0:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 80352b4:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 80352b8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80352bc:	17f3      	asrs	r3, r6, #31
 80352be:	4632      	mov	r2, r6
 80352c0:	4658      	mov	r0, fp
 80352c2:	4651      	mov	r1, sl
 80352c4:	9303      	str	r3, [sp, #12]
 80352c6:	f7db fd47 	bl	8010d58 <__aeabi_uldivmod>
 80352ca:	9201      	str	r2, [sp, #4]
 80352cc:	2200      	movs	r2, #0
 80352ce:	468e      	mov	lr, r1
 80352d0:	4684      	mov	ip, r0
 80352d2:	4611      	mov	r1, r2
 80352d4:	4610      	mov	r0, r2
 80352d6:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80352da:	2b09      	cmp	r3, #9
 80352dc:	d905      	bls.n	80352ea <_strtoll_l.constprop.0+0x7e>
 80352de:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 80352e2:	2b19      	cmp	r3, #25
 80352e4:	d82a      	bhi.n	803533c <_strtoll_l.constprop.0+0xd0>
 80352e6:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 80352ea:	429e      	cmp	r6, r3
 80352ec:	dd30      	ble.n	8035350 <_strtoll_l.constprop.0+0xe4>
 80352ee:	1c54      	adds	r4, r2, #1
 80352f0:	d015      	beq.n	803531e <_strtoll_l.constprop.0+0xb2>
 80352f2:	4584      	cmp	ip, r0
 80352f4:	eb7e 0201 	sbcs.w	r2, lr, r1
 80352f8:	d327      	bcc.n	803534a <_strtoll_l.constprop.0+0xde>
 80352fa:	458e      	cmp	lr, r1
 80352fc:	bf08      	it	eq
 80352fe:	4584      	cmpeq	ip, r0
 8035300:	d102      	bne.n	8035308 <_strtoll_l.constprop.0+0x9c>
 8035302:	9a01      	ldr	r2, [sp, #4]
 8035304:	429a      	cmp	r2, r3
 8035306:	db20      	blt.n	803534a <_strtoll_l.constprop.0+0xde>
 8035308:	9a03      	ldr	r2, [sp, #12]
 803530a:	4371      	muls	r1, r6
 803530c:	fb00 1102 	mla	r1, r0, r2, r1
 8035310:	fba6 0200 	umull	r0, r2, r6, r0
 8035314:	440a      	add	r2, r1
 8035316:	1818      	adds	r0, r3, r0
 8035318:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 803531c:	2201      	movs	r2, #1
 803531e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035322:	e7d8      	b.n	80352d6 <_strtoll_l.constprop.0+0x6a>
 8035324:	2c2b      	cmp	r4, #43	@ 0x2b
 8035326:	bf04      	itt	eq
 8035328:	782c      	ldrbeq	r4, [r5, #0]
 803532a:	1c9d      	addeq	r5, r3, #2
 803532c:	e7b3      	b.n	8035296 <_strtoll_l.constprop.0+0x2a>
 803532e:	2e00      	cmp	r6, #0
 8035330:	d1be      	bne.n	80352b0 <_strtoll_l.constprop.0+0x44>
 8035332:	2c30      	cmp	r4, #48	@ 0x30
 8035334:	bf0c      	ite	eq
 8035336:	2608      	moveq	r6, #8
 8035338:	260a      	movne	r6, #10
 803533a:	e7b9      	b.n	80352b0 <_strtoll_l.constprop.0+0x44>
 803533c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8035340:	2b19      	cmp	r3, #25
 8035342:	d805      	bhi.n	8035350 <_strtoll_l.constprop.0+0xe4>
 8035344:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 8035348:	e7cf      	b.n	80352ea <_strtoll_l.constprop.0+0x7e>
 803534a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803534e:	e7e6      	b.n	803531e <_strtoll_l.constprop.0+0xb2>
 8035350:	1c53      	adds	r3, r2, #1
 8035352:	d10a      	bne.n	803536a <_strtoll_l.constprop.0+0xfe>
 8035354:	9a02      	ldr	r2, [sp, #8]
 8035356:	2322      	movs	r3, #34	@ 0x22
 8035358:	6013      	str	r3, [r2, #0]
 803535a:	4658      	mov	r0, fp
 803535c:	4651      	mov	r1, sl
 803535e:	f1b8 0f00 	cmp.w	r8, #0
 8035362:	d10a      	bne.n	803537a <_strtoll_l.constprop.0+0x10e>
 8035364:	b005      	add	sp, #20
 8035366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803536a:	b117      	cbz	r7, 8035372 <_strtoll_l.constprop.0+0x106>
 803536c:	4240      	negs	r0, r0
 803536e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8035372:	f1b8 0f00 	cmp.w	r8, #0
 8035376:	d0f5      	beq.n	8035364 <_strtoll_l.constprop.0+0xf8>
 8035378:	b10a      	cbz	r2, 803537e <_strtoll_l.constprop.0+0x112>
 803537a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803537e:	f8c8 9000 	str.w	r9, [r8]
 8035382:	e7ef      	b.n	8035364 <_strtoll_l.constprop.0+0xf8>
 8035384:	0803c07d 	.word	0x0803c07d

08035388 <_strtoll_r>:
 8035388:	f7ff bf70 	b.w	803526c <_strtoll_l.constprop.0>

0803538c <__libc_fini_array>:
 803538c:	b538      	push	{r3, r4, r5, lr}
 803538e:	4d07      	ldr	r5, [pc, #28]	@ (80353ac <__libc_fini_array+0x20>)
 8035390:	4c07      	ldr	r4, [pc, #28]	@ (80353b0 <__libc_fini_array+0x24>)
 8035392:	1b64      	subs	r4, r4, r5
 8035394:	10a4      	asrs	r4, r4, #2
 8035396:	b91c      	cbnz	r4, 80353a0 <__libc_fini_array+0x14>
 8035398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803539c:	f000 bc9c 	b.w	8035cd8 <_fini>
 80353a0:	3c01      	subs	r4, #1
 80353a2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80353a6:	4798      	blx	r3
 80353a8:	e7f5      	b.n	8035396 <__libc_fini_array+0xa>
 80353aa:	bf00      	nop
 80353ac:	0803c498 	.word	0x0803c498
 80353b0:	0803c49c 	.word	0x0803c49c

080353b4 <_strtoull_l.constprop.0>:
 80353b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80353b8:	4691      	mov	r9, r2
 80353ba:	4a48      	ldr	r2, [pc, #288]	@ (80354dc <_strtoull_l.constprop.0+0x128>)
 80353bc:	9001      	str	r0, [sp, #4]
 80353be:	468a      	mov	sl, r1
 80353c0:	461e      	mov	r6, r3
 80353c2:	460d      	mov	r5, r1
 80353c4:	462b      	mov	r3, r5
 80353c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80353ca:	5d17      	ldrb	r7, [r2, r4]
 80353cc:	f017 0708 	ands.w	r7, r7, #8
 80353d0:	d1f8      	bne.n	80353c4 <_strtoull_l.constprop.0+0x10>
 80353d2:	2c2d      	cmp	r4, #45	@ 0x2d
 80353d4:	d14a      	bne.n	803546c <_strtoull_l.constprop.0+0xb8>
 80353d6:	782c      	ldrb	r4, [r5, #0]
 80353d8:	2701      	movs	r7, #1
 80353da:	1c9d      	adds	r5, r3, #2
 80353dc:	f036 0310 	bics.w	r3, r6, #16
 80353e0:	d109      	bne.n	80353f6 <_strtoull_l.constprop.0+0x42>
 80353e2:	2c30      	cmp	r4, #48	@ 0x30
 80353e4:	d147      	bne.n	8035476 <_strtoull_l.constprop.0+0xc2>
 80353e6:	782b      	ldrb	r3, [r5, #0]
 80353e8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80353ec:	2b58      	cmp	r3, #88	@ 0x58
 80353ee:	d142      	bne.n	8035476 <_strtoull_l.constprop.0+0xc2>
 80353f0:	786c      	ldrb	r4, [r5, #1]
 80353f2:	2610      	movs	r6, #16
 80353f4:	3502      	adds	r5, #2
 80353f6:	ea4f 7be6 	mov.w	fp, r6, asr #31
 80353fa:	4632      	mov	r2, r6
 80353fc:	465b      	mov	r3, fp
 80353fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035402:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8035406:	f7db fca7 	bl	8010d58 <__aeabi_uldivmod>
 803540a:	4632      	mov	r2, r6
 803540c:	9000      	str	r0, [sp, #0]
 803540e:	4688      	mov	r8, r1
 8035410:	465b      	mov	r3, fp
 8035412:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035416:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 803541a:	f7db fc9d 	bl	8010d58 <__aeabi_uldivmod>
 803541e:	2300      	movs	r3, #0
 8035420:	4618      	mov	r0, r3
 8035422:	4619      	mov	r1, r3
 8035424:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8035428:	f1bc 0f09 	cmp.w	ip, #9
 803542c:	d82a      	bhi.n	8035484 <_strtoull_l.constprop.0+0xd0>
 803542e:	4664      	mov	r4, ip
 8035430:	42a6      	cmp	r6, r4
 8035432:	dd38      	ble.n	80354a6 <_strtoull_l.constprop.0+0xf2>
 8035434:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8035438:	d015      	beq.n	8035466 <_strtoull_l.constprop.0+0xb2>
 803543a:	9b00      	ldr	r3, [sp, #0]
 803543c:	4283      	cmp	r3, r0
 803543e:	eb78 0301 	sbcs.w	r3, r8, r1
 8035442:	d32d      	bcc.n	80354a0 <_strtoull_l.constprop.0+0xec>
 8035444:	9b00      	ldr	r3, [sp, #0]
 8035446:	4588      	cmp	r8, r1
 8035448:	bf08      	it	eq
 803544a:	4283      	cmpeq	r3, r0
 803544c:	d101      	bne.n	8035452 <_strtoull_l.constprop.0+0x9e>
 803544e:	42a2      	cmp	r2, r4
 8035450:	db26      	blt.n	80354a0 <_strtoull_l.constprop.0+0xec>
 8035452:	4371      	muls	r1, r6
 8035454:	fb00 110b 	mla	r1, r0, fp, r1
 8035458:	fba6 0300 	umull	r0, r3, r6, r0
 803545c:	4419      	add	r1, r3
 803545e:	1820      	adds	r0, r4, r0
 8035460:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8035464:	2301      	movs	r3, #1
 8035466:	f815 4b01 	ldrb.w	r4, [r5], #1
 803546a:	e7db      	b.n	8035424 <_strtoull_l.constprop.0+0x70>
 803546c:	2c2b      	cmp	r4, #43	@ 0x2b
 803546e:	bf04      	itt	eq
 8035470:	782c      	ldrbeq	r4, [r5, #0]
 8035472:	1c9d      	addeq	r5, r3, #2
 8035474:	e7b2      	b.n	80353dc <_strtoull_l.constprop.0+0x28>
 8035476:	2e00      	cmp	r6, #0
 8035478:	d1bd      	bne.n	80353f6 <_strtoull_l.constprop.0+0x42>
 803547a:	2c30      	cmp	r4, #48	@ 0x30
 803547c:	bf0c      	ite	eq
 803547e:	2608      	moveq	r6, #8
 8035480:	260a      	movne	r6, #10
 8035482:	e7b8      	b.n	80353f6 <_strtoull_l.constprop.0+0x42>
 8035484:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8035488:	f1bc 0f19 	cmp.w	ip, #25
 803548c:	d801      	bhi.n	8035492 <_strtoull_l.constprop.0+0xde>
 803548e:	3c37      	subs	r4, #55	@ 0x37
 8035490:	e7ce      	b.n	8035430 <_strtoull_l.constprop.0+0x7c>
 8035492:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8035496:	f1bc 0f19 	cmp.w	ip, #25
 803549a:	d804      	bhi.n	80354a6 <_strtoull_l.constprop.0+0xf2>
 803549c:	3c57      	subs	r4, #87	@ 0x57
 803549e:	e7c7      	b.n	8035430 <_strtoull_l.constprop.0+0x7c>
 80354a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80354a4:	e7df      	b.n	8035466 <_strtoull_l.constprop.0+0xb2>
 80354a6:	1c5a      	adds	r2, r3, #1
 80354a8:	d10a      	bne.n	80354c0 <_strtoull_l.constprop.0+0x10c>
 80354aa:	9901      	ldr	r1, [sp, #4]
 80354ac:	2222      	movs	r2, #34	@ 0x22
 80354ae:	600a      	str	r2, [r1, #0]
 80354b0:	4618      	mov	r0, r3
 80354b2:	4619      	mov	r1, r3
 80354b4:	f1b9 0f00 	cmp.w	r9, #0
 80354b8:	d10a      	bne.n	80354d0 <_strtoull_l.constprop.0+0x11c>
 80354ba:	b003      	add	sp, #12
 80354bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80354c0:	b117      	cbz	r7, 80354c8 <_strtoull_l.constprop.0+0x114>
 80354c2:	4240      	negs	r0, r0
 80354c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80354c8:	f1b9 0f00 	cmp.w	r9, #0
 80354cc:	d0f5      	beq.n	80354ba <_strtoull_l.constprop.0+0x106>
 80354ce:	b10b      	cbz	r3, 80354d4 <_strtoull_l.constprop.0+0x120>
 80354d0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80354d4:	f8c9 a000 	str.w	sl, [r9]
 80354d8:	e7ef      	b.n	80354ba <_strtoull_l.constprop.0+0x106>
 80354da:	bf00      	nop
 80354dc:	0803c07d 	.word	0x0803c07d

080354e0 <_strtoull_r>:
 80354e0:	f7ff bf68 	b.w	80353b4 <_strtoull_l.constprop.0>

080354e4 <_mbrtowc_r>:
 80354e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80354e6:	4c0a      	ldr	r4, [pc, #40]	@ (8035510 <_mbrtowc_r+0x2c>)
 80354e8:	9e08      	ldr	r6, [sp, #32]
 80354ea:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 80354ee:	9600      	str	r6, [sp, #0]
 80354f0:	4605      	mov	r5, r0
 80354f2:	4614      	mov	r4, r2
 80354f4:	b912      	cbnz	r2, 80354fc <_mbrtowc_r+0x18>
 80354f6:	4a07      	ldr	r2, [pc, #28]	@ (8035514 <_mbrtowc_r+0x30>)
 80354f8:	2301      	movs	r3, #1
 80354fa:	4621      	mov	r1, r4
 80354fc:	47b8      	blx	r7
 80354fe:	1c43      	adds	r3, r0, #1
 8035500:	bf01      	itttt	eq
 8035502:	2300      	moveq	r3, #0
 8035504:	6033      	streq	r3, [r6, #0]
 8035506:	238a      	moveq	r3, #138	@ 0x8a
 8035508:	602b      	streq	r3, [r5, #0]
 803550a:	b003      	add	sp, #12
 803550c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803550e:	bf00      	nop
 8035510:	2000016c 	.word	0x2000016c
 8035514:	0803bcbe 	.word	0x0803bcbe

08035518 <iswspace>:
 8035518:	2100      	movs	r1, #0
 803551a:	f000 b801 	b.w	8035520 <iswspace_l>
	...

08035520 <iswspace_l>:
 8035520:	28ff      	cmp	r0, #255	@ 0xff
 8035522:	bf9d      	ittte	ls
 8035524:	4b02      	ldrls	r3, [pc, #8]	@ (8035530 <iswspace_l+0x10>)
 8035526:	5c18      	ldrbls	r0, [r3, r0]
 8035528:	f000 0008 	andls.w	r0, r0, #8
 803552c:	2000      	movhi	r0, #0
 803552e:	4770      	bx	lr
 8035530:	0803c07d 	.word	0x0803c07d

08035534 <__register_exitproc>:
 8035534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8035538:	f8df a074 	ldr.w	sl, [pc, #116]	@ 80355b0 <__register_exitproc+0x7c>
 803553c:	4606      	mov	r6, r0
 803553e:	f8da 0000 	ldr.w	r0, [sl]
 8035542:	4698      	mov	r8, r3
 8035544:	460f      	mov	r7, r1
 8035546:	4691      	mov	r9, r2
 8035548:	f7f8 fc7b 	bl	802de42 <__retarget_lock_acquire_recursive>
 803554c:	4b16      	ldr	r3, [pc, #88]	@ (80355a8 <__register_exitproc+0x74>)
 803554e:	681c      	ldr	r4, [r3, #0]
 8035550:	b90c      	cbnz	r4, 8035556 <__register_exitproc+0x22>
 8035552:	4c16      	ldr	r4, [pc, #88]	@ (80355ac <__register_exitproc+0x78>)
 8035554:	601c      	str	r4, [r3, #0]
 8035556:	6865      	ldr	r5, [r4, #4]
 8035558:	f8da 0000 	ldr.w	r0, [sl]
 803555c:	2d1f      	cmp	r5, #31
 803555e:	dd05      	ble.n	803556c <__register_exitproc+0x38>
 8035560:	f7f8 fc71 	bl	802de46 <__retarget_lock_release_recursive>
 8035564:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803556c:	b19e      	cbz	r6, 8035596 <__register_exitproc+0x62>
 803556e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8035572:	2201      	movs	r2, #1
 8035574:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8035578:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 803557c:	40aa      	lsls	r2, r5
 803557e:	4313      	orrs	r3, r2
 8035580:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8035584:	2e02      	cmp	r6, #2
 8035586:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 803558a:	bf02      	ittt	eq
 803558c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8035590:	4313      	orreq	r3, r2
 8035592:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8035596:	1c6b      	adds	r3, r5, #1
 8035598:	3502      	adds	r5, #2
 803559a:	6063      	str	r3, [r4, #4]
 803559c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80355a0:	f7f8 fc51 	bl	802de46 <__retarget_lock_release_recursive>
 80355a4:	2000      	movs	r0, #0
 80355a6:	e7df      	b.n	8035568 <__register_exitproc+0x34>
 80355a8:	2001a050 	.word	0x2001a050
 80355ac:	2001a088 	.word	0x2001a088
 80355b0:	20000400 	.word	0x20000400
 80355b4:	00000000 	.word	0x00000000

080355b8 <nan>:
 80355b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80355c0 <nan+0x8>
 80355bc:	4770      	bx	lr
 80355be:	bf00      	nop
 80355c0:	00000000 	.word	0x00000000
 80355c4:	7ff80000 	.word	0x7ff80000

080355c8 <nanf>:
 80355c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80355d0 <nanf+0x8>
 80355cc:	4770      	bx	lr
 80355ce:	bf00      	nop
 80355d0:	7fc00000 	.word	0x7fc00000

080355d4 <_calloc_r>:
 80355d4:	b538      	push	{r3, r4, r5, lr}
 80355d6:	fba1 1502 	umull	r1, r5, r1, r2
 80355da:	b935      	cbnz	r5, 80355ea <_calloc_r+0x16>
 80355dc:	f7f9 fc4e 	bl	802ee7c <_malloc_r>
 80355e0:	4604      	mov	r4, r0
 80355e2:	b938      	cbnz	r0, 80355f4 <_calloc_r+0x20>
 80355e4:	2400      	movs	r4, #0
 80355e6:	4620      	mov	r0, r4
 80355e8:	bd38      	pop	{r3, r4, r5, pc}
 80355ea:	f7f8 fbf5 	bl	802ddd8 <__errno>
 80355ee:	230c      	movs	r3, #12
 80355f0:	6003      	str	r3, [r0, #0]
 80355f2:	e7f7      	b.n	80355e4 <_calloc_r+0x10>
 80355f4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80355f8:	f022 0203 	bic.w	r2, r2, #3
 80355fc:	3a04      	subs	r2, #4
 80355fe:	2a24      	cmp	r2, #36	@ 0x24
 8035600:	d819      	bhi.n	8035636 <_calloc_r+0x62>
 8035602:	2a13      	cmp	r2, #19
 8035604:	d915      	bls.n	8035632 <_calloc_r+0x5e>
 8035606:	2a1b      	cmp	r2, #27
 8035608:	e9c0 5500 	strd	r5, r5, [r0]
 803560c:	d806      	bhi.n	803561c <_calloc_r+0x48>
 803560e:	f100 0308 	add.w	r3, r0, #8
 8035612:	2200      	movs	r2, #0
 8035614:	e9c3 2200 	strd	r2, r2, [r3]
 8035618:	609a      	str	r2, [r3, #8]
 803561a:	e7e4      	b.n	80355e6 <_calloc_r+0x12>
 803561c:	2a24      	cmp	r2, #36	@ 0x24
 803561e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8035622:	bf11      	iteee	ne
 8035624:	f100 0310 	addne.w	r3, r0, #16
 8035628:	6105      	streq	r5, [r0, #16]
 803562a:	f100 0318 	addeq.w	r3, r0, #24
 803562e:	6145      	streq	r5, [r0, #20]
 8035630:	e7ef      	b.n	8035612 <_calloc_r+0x3e>
 8035632:	4603      	mov	r3, r0
 8035634:	e7ed      	b.n	8035612 <_calloc_r+0x3e>
 8035636:	4629      	mov	r1, r5
 8035638:	f7f7 f9ca 	bl	802c9d0 <memset>
 803563c:	e7d3      	b.n	80355e6 <_calloc_r+0x12>
	...

08035640 <__env_lock>:
 8035640:	4801      	ldr	r0, [pc, #4]	@ (8035648 <__env_lock+0x8>)
 8035642:	f7f8 bbfe 	b.w	802de42 <__retarget_lock_acquire_recursive>
 8035646:	bf00      	nop
 8035648:	2001a049 	.word	0x2001a049

0803564c <__env_unlock>:
 803564c:	4801      	ldr	r0, [pc, #4]	@ (8035654 <__env_unlock+0x8>)
 803564e:	f7f8 bbfa 	b.w	802de46 <__retarget_lock_release_recursive>
 8035652:	bf00      	nop
 8035654:	2001a049 	.word	0x2001a049

08035658 <rshift>:
 8035658:	6903      	ldr	r3, [r0, #16]
 803565a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 803565e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8035662:	ea4f 1261 	mov.w	r2, r1, asr #5
 8035666:	f100 0414 	add.w	r4, r0, #20
 803566a:	dd45      	ble.n	80356f8 <rshift+0xa0>
 803566c:	f011 011f 	ands.w	r1, r1, #31
 8035670:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8035674:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8035678:	d10c      	bne.n	8035694 <rshift+0x3c>
 803567a:	f100 0710 	add.w	r7, r0, #16
 803567e:	4629      	mov	r1, r5
 8035680:	42b1      	cmp	r1, r6
 8035682:	d334      	bcc.n	80356ee <rshift+0x96>
 8035684:	1a9b      	subs	r3, r3, r2
 8035686:	009b      	lsls	r3, r3, #2
 8035688:	1eea      	subs	r2, r5, #3
 803568a:	4296      	cmp	r6, r2
 803568c:	bf38      	it	cc
 803568e:	2300      	movcc	r3, #0
 8035690:	4423      	add	r3, r4
 8035692:	e015      	b.n	80356c0 <rshift+0x68>
 8035694:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8035698:	f1c1 0820 	rsb	r8, r1, #32
 803569c:	40cf      	lsrs	r7, r1
 803569e:	f105 0e04 	add.w	lr, r5, #4
 80356a2:	46a1      	mov	r9, r4
 80356a4:	4576      	cmp	r6, lr
 80356a6:	46f4      	mov	ip, lr
 80356a8:	d815      	bhi.n	80356d6 <rshift+0x7e>
 80356aa:	1a9a      	subs	r2, r3, r2
 80356ac:	0092      	lsls	r2, r2, #2
 80356ae:	3a04      	subs	r2, #4
 80356b0:	3501      	adds	r5, #1
 80356b2:	42ae      	cmp	r6, r5
 80356b4:	bf38      	it	cc
 80356b6:	2200      	movcc	r2, #0
 80356b8:	18a3      	adds	r3, r4, r2
 80356ba:	50a7      	str	r7, [r4, r2]
 80356bc:	b107      	cbz	r7, 80356c0 <rshift+0x68>
 80356be:	3304      	adds	r3, #4
 80356c0:	1b1a      	subs	r2, r3, r4
 80356c2:	42a3      	cmp	r3, r4
 80356c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80356c8:	bf08      	it	eq
 80356ca:	2300      	moveq	r3, #0
 80356cc:	6102      	str	r2, [r0, #16]
 80356ce:	bf08      	it	eq
 80356d0:	6143      	streq	r3, [r0, #20]
 80356d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80356d6:	f8dc c000 	ldr.w	ip, [ip]
 80356da:	fa0c fc08 	lsl.w	ip, ip, r8
 80356de:	ea4c 0707 	orr.w	r7, ip, r7
 80356e2:	f849 7b04 	str.w	r7, [r9], #4
 80356e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80356ea:	40cf      	lsrs	r7, r1
 80356ec:	e7da      	b.n	80356a4 <rshift+0x4c>
 80356ee:	f851 cb04 	ldr.w	ip, [r1], #4
 80356f2:	f847 cf04 	str.w	ip, [r7, #4]!
 80356f6:	e7c3      	b.n	8035680 <rshift+0x28>
 80356f8:	4623      	mov	r3, r4
 80356fa:	e7e1      	b.n	80356c0 <rshift+0x68>

080356fc <__hexdig_fun>:
 80356fc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8035700:	2b09      	cmp	r3, #9
 8035702:	d802      	bhi.n	803570a <__hexdig_fun+0xe>
 8035704:	3820      	subs	r0, #32
 8035706:	b2c0      	uxtb	r0, r0
 8035708:	4770      	bx	lr
 803570a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 803570e:	2b05      	cmp	r3, #5
 8035710:	d801      	bhi.n	8035716 <__hexdig_fun+0x1a>
 8035712:	3847      	subs	r0, #71	@ 0x47
 8035714:	e7f7      	b.n	8035706 <__hexdig_fun+0xa>
 8035716:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 803571a:	2b05      	cmp	r3, #5
 803571c:	d801      	bhi.n	8035722 <__hexdig_fun+0x26>
 803571e:	3827      	subs	r0, #39	@ 0x27
 8035720:	e7f1      	b.n	8035706 <__hexdig_fun+0xa>
 8035722:	2000      	movs	r0, #0
 8035724:	4770      	bx	lr
	...

08035728 <__gethex>:
 8035728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803572c:	b085      	sub	sp, #20
 803572e:	468a      	mov	sl, r1
 8035730:	9302      	str	r3, [sp, #8]
 8035732:	680b      	ldr	r3, [r1, #0]
 8035734:	9001      	str	r0, [sp, #4]
 8035736:	4690      	mov	r8, r2
 8035738:	1c9c      	adds	r4, r3, #2
 803573a:	46a1      	mov	r9, r4
 803573c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8035740:	2830      	cmp	r0, #48	@ 0x30
 8035742:	d0fa      	beq.n	803573a <__gethex+0x12>
 8035744:	eba9 0303 	sub.w	r3, r9, r3
 8035748:	f1a3 0b02 	sub.w	fp, r3, #2
 803574c:	f7ff ffd6 	bl	80356fc <__hexdig_fun>
 8035750:	4605      	mov	r5, r0
 8035752:	2800      	cmp	r0, #0
 8035754:	d168      	bne.n	8035828 <__gethex+0x100>
 8035756:	49a0      	ldr	r1, [pc, #640]	@ (80359d8 <__gethex+0x2b0>)
 8035758:	2201      	movs	r2, #1
 803575a:	4648      	mov	r0, r9
 803575c:	f7f7 f96d 	bl	802ca3a <strncmp>
 8035760:	4607      	mov	r7, r0
 8035762:	2800      	cmp	r0, #0
 8035764:	d167      	bne.n	8035836 <__gethex+0x10e>
 8035766:	f899 0001 	ldrb.w	r0, [r9, #1]
 803576a:	4626      	mov	r6, r4
 803576c:	f7ff ffc6 	bl	80356fc <__hexdig_fun>
 8035770:	2800      	cmp	r0, #0
 8035772:	d062      	beq.n	803583a <__gethex+0x112>
 8035774:	4623      	mov	r3, r4
 8035776:	7818      	ldrb	r0, [r3, #0]
 8035778:	2830      	cmp	r0, #48	@ 0x30
 803577a:	4699      	mov	r9, r3
 803577c:	f103 0301 	add.w	r3, r3, #1
 8035780:	d0f9      	beq.n	8035776 <__gethex+0x4e>
 8035782:	f7ff ffbb 	bl	80356fc <__hexdig_fun>
 8035786:	fab0 f580 	clz	r5, r0
 803578a:	096d      	lsrs	r5, r5, #5
 803578c:	f04f 0b01 	mov.w	fp, #1
 8035790:	464a      	mov	r2, r9
 8035792:	4616      	mov	r6, r2
 8035794:	3201      	adds	r2, #1
 8035796:	7830      	ldrb	r0, [r6, #0]
 8035798:	f7ff ffb0 	bl	80356fc <__hexdig_fun>
 803579c:	2800      	cmp	r0, #0
 803579e:	d1f8      	bne.n	8035792 <__gethex+0x6a>
 80357a0:	498d      	ldr	r1, [pc, #564]	@ (80359d8 <__gethex+0x2b0>)
 80357a2:	2201      	movs	r2, #1
 80357a4:	4630      	mov	r0, r6
 80357a6:	f7f7 f948 	bl	802ca3a <strncmp>
 80357aa:	2800      	cmp	r0, #0
 80357ac:	d13f      	bne.n	803582e <__gethex+0x106>
 80357ae:	b944      	cbnz	r4, 80357c2 <__gethex+0x9a>
 80357b0:	1c74      	adds	r4, r6, #1
 80357b2:	4622      	mov	r2, r4
 80357b4:	4616      	mov	r6, r2
 80357b6:	3201      	adds	r2, #1
 80357b8:	7830      	ldrb	r0, [r6, #0]
 80357ba:	f7ff ff9f 	bl	80356fc <__hexdig_fun>
 80357be:	2800      	cmp	r0, #0
 80357c0:	d1f8      	bne.n	80357b4 <__gethex+0x8c>
 80357c2:	1ba4      	subs	r4, r4, r6
 80357c4:	00a7      	lsls	r7, r4, #2
 80357c6:	7833      	ldrb	r3, [r6, #0]
 80357c8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80357cc:	2b50      	cmp	r3, #80	@ 0x50
 80357ce:	d13e      	bne.n	803584e <__gethex+0x126>
 80357d0:	7873      	ldrb	r3, [r6, #1]
 80357d2:	2b2b      	cmp	r3, #43	@ 0x2b
 80357d4:	d033      	beq.n	803583e <__gethex+0x116>
 80357d6:	2b2d      	cmp	r3, #45	@ 0x2d
 80357d8:	d034      	beq.n	8035844 <__gethex+0x11c>
 80357da:	1c71      	adds	r1, r6, #1
 80357dc:	2400      	movs	r4, #0
 80357de:	7808      	ldrb	r0, [r1, #0]
 80357e0:	f7ff ff8c 	bl	80356fc <__hexdig_fun>
 80357e4:	1e43      	subs	r3, r0, #1
 80357e6:	b2db      	uxtb	r3, r3
 80357e8:	2b18      	cmp	r3, #24
 80357ea:	d830      	bhi.n	803584e <__gethex+0x126>
 80357ec:	f1a0 0210 	sub.w	r2, r0, #16
 80357f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80357f4:	f7ff ff82 	bl	80356fc <__hexdig_fun>
 80357f8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80357fc:	fa5f fc8c 	uxtb.w	ip, ip
 8035800:	f1bc 0f18 	cmp.w	ip, #24
 8035804:	f04f 030a 	mov.w	r3, #10
 8035808:	d91e      	bls.n	8035848 <__gethex+0x120>
 803580a:	b104      	cbz	r4, 803580e <__gethex+0xe6>
 803580c:	4252      	negs	r2, r2
 803580e:	4417      	add	r7, r2
 8035810:	f8ca 1000 	str.w	r1, [sl]
 8035814:	b1ed      	cbz	r5, 8035852 <__gethex+0x12a>
 8035816:	f1bb 0f00 	cmp.w	fp, #0
 803581a:	bf0c      	ite	eq
 803581c:	2506      	moveq	r5, #6
 803581e:	2500      	movne	r5, #0
 8035820:	4628      	mov	r0, r5
 8035822:	b005      	add	sp, #20
 8035824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035828:	2500      	movs	r5, #0
 803582a:	462c      	mov	r4, r5
 803582c:	e7b0      	b.n	8035790 <__gethex+0x68>
 803582e:	2c00      	cmp	r4, #0
 8035830:	d1c7      	bne.n	80357c2 <__gethex+0x9a>
 8035832:	4627      	mov	r7, r4
 8035834:	e7c7      	b.n	80357c6 <__gethex+0x9e>
 8035836:	464e      	mov	r6, r9
 8035838:	462f      	mov	r7, r5
 803583a:	2501      	movs	r5, #1
 803583c:	e7c3      	b.n	80357c6 <__gethex+0x9e>
 803583e:	2400      	movs	r4, #0
 8035840:	1cb1      	adds	r1, r6, #2
 8035842:	e7cc      	b.n	80357de <__gethex+0xb6>
 8035844:	2401      	movs	r4, #1
 8035846:	e7fb      	b.n	8035840 <__gethex+0x118>
 8035848:	fb03 0002 	mla	r0, r3, r2, r0
 803584c:	e7ce      	b.n	80357ec <__gethex+0xc4>
 803584e:	4631      	mov	r1, r6
 8035850:	e7de      	b.n	8035810 <__gethex+0xe8>
 8035852:	eba6 0309 	sub.w	r3, r6, r9
 8035856:	3b01      	subs	r3, #1
 8035858:	4629      	mov	r1, r5
 803585a:	2b07      	cmp	r3, #7
 803585c:	dc0a      	bgt.n	8035874 <__gethex+0x14c>
 803585e:	9801      	ldr	r0, [sp, #4]
 8035860:	f7fd fe22 	bl	80334a8 <_Balloc>
 8035864:	4604      	mov	r4, r0
 8035866:	b940      	cbnz	r0, 803587a <__gethex+0x152>
 8035868:	4b5c      	ldr	r3, [pc, #368]	@ (80359dc <__gethex+0x2b4>)
 803586a:	4602      	mov	r2, r0
 803586c:	21e4      	movs	r1, #228	@ 0xe4
 803586e:	485c      	ldr	r0, [pc, #368]	@ (80359e0 <__gethex+0x2b8>)
 8035870:	f7f4 fb5c 	bl	8029f2c <__assert_func>
 8035874:	3101      	adds	r1, #1
 8035876:	105b      	asrs	r3, r3, #1
 8035878:	e7ef      	b.n	803585a <__gethex+0x132>
 803587a:	f100 0a14 	add.w	sl, r0, #20
 803587e:	2300      	movs	r3, #0
 8035880:	4655      	mov	r5, sl
 8035882:	469b      	mov	fp, r3
 8035884:	45b1      	cmp	r9, r6
 8035886:	d337      	bcc.n	80358f8 <__gethex+0x1d0>
 8035888:	f845 bb04 	str.w	fp, [r5], #4
 803588c:	eba5 050a 	sub.w	r5, r5, sl
 8035890:	10ad      	asrs	r5, r5, #2
 8035892:	6125      	str	r5, [r4, #16]
 8035894:	4658      	mov	r0, fp
 8035896:	f7fd fec5 	bl	8033624 <__hi0bits>
 803589a:	016d      	lsls	r5, r5, #5
 803589c:	f8d8 6000 	ldr.w	r6, [r8]
 80358a0:	1a2d      	subs	r5, r5, r0
 80358a2:	42b5      	cmp	r5, r6
 80358a4:	dd54      	ble.n	8035950 <__gethex+0x228>
 80358a6:	1bad      	subs	r5, r5, r6
 80358a8:	4629      	mov	r1, r5
 80358aa:	4620      	mov	r0, r4
 80358ac:	f7fe fa3f 	bl	8033d2e <__any_on>
 80358b0:	4681      	mov	r9, r0
 80358b2:	b178      	cbz	r0, 80358d4 <__gethex+0x1ac>
 80358b4:	1e6b      	subs	r3, r5, #1
 80358b6:	1159      	asrs	r1, r3, #5
 80358b8:	f003 021f 	and.w	r2, r3, #31
 80358bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80358c0:	f04f 0901 	mov.w	r9, #1
 80358c4:	fa09 f202 	lsl.w	r2, r9, r2
 80358c8:	420a      	tst	r2, r1
 80358ca:	d003      	beq.n	80358d4 <__gethex+0x1ac>
 80358cc:	454b      	cmp	r3, r9
 80358ce:	dc36      	bgt.n	803593e <__gethex+0x216>
 80358d0:	f04f 0902 	mov.w	r9, #2
 80358d4:	4629      	mov	r1, r5
 80358d6:	4620      	mov	r0, r4
 80358d8:	f7ff febe 	bl	8035658 <rshift>
 80358dc:	442f      	add	r7, r5
 80358de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80358e2:	42bb      	cmp	r3, r7
 80358e4:	da42      	bge.n	803596c <__gethex+0x244>
 80358e6:	9801      	ldr	r0, [sp, #4]
 80358e8:	4621      	mov	r1, r4
 80358ea:	f7fd fe02 	bl	80334f2 <_Bfree>
 80358ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80358f0:	2300      	movs	r3, #0
 80358f2:	6013      	str	r3, [r2, #0]
 80358f4:	25a3      	movs	r5, #163	@ 0xa3
 80358f6:	e793      	b.n	8035820 <__gethex+0xf8>
 80358f8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80358fc:	2a2e      	cmp	r2, #46	@ 0x2e
 80358fe:	d012      	beq.n	8035926 <__gethex+0x1fe>
 8035900:	2b20      	cmp	r3, #32
 8035902:	d104      	bne.n	803590e <__gethex+0x1e6>
 8035904:	f845 bb04 	str.w	fp, [r5], #4
 8035908:	f04f 0b00 	mov.w	fp, #0
 803590c:	465b      	mov	r3, fp
 803590e:	7830      	ldrb	r0, [r6, #0]
 8035910:	9303      	str	r3, [sp, #12]
 8035912:	f7ff fef3 	bl	80356fc <__hexdig_fun>
 8035916:	9b03      	ldr	r3, [sp, #12]
 8035918:	f000 000f 	and.w	r0, r0, #15
 803591c:	4098      	lsls	r0, r3
 803591e:	ea4b 0b00 	orr.w	fp, fp, r0
 8035922:	3304      	adds	r3, #4
 8035924:	e7ae      	b.n	8035884 <__gethex+0x15c>
 8035926:	45b1      	cmp	r9, r6
 8035928:	d8ea      	bhi.n	8035900 <__gethex+0x1d8>
 803592a:	492b      	ldr	r1, [pc, #172]	@ (80359d8 <__gethex+0x2b0>)
 803592c:	9303      	str	r3, [sp, #12]
 803592e:	2201      	movs	r2, #1
 8035930:	4630      	mov	r0, r6
 8035932:	f7f7 f882 	bl	802ca3a <strncmp>
 8035936:	9b03      	ldr	r3, [sp, #12]
 8035938:	2800      	cmp	r0, #0
 803593a:	d1e1      	bne.n	8035900 <__gethex+0x1d8>
 803593c:	e7a2      	b.n	8035884 <__gethex+0x15c>
 803593e:	1ea9      	subs	r1, r5, #2
 8035940:	4620      	mov	r0, r4
 8035942:	f7fe f9f4 	bl	8033d2e <__any_on>
 8035946:	2800      	cmp	r0, #0
 8035948:	d0c2      	beq.n	80358d0 <__gethex+0x1a8>
 803594a:	f04f 0903 	mov.w	r9, #3
 803594e:	e7c1      	b.n	80358d4 <__gethex+0x1ac>
 8035950:	da09      	bge.n	8035966 <__gethex+0x23e>
 8035952:	1b75      	subs	r5, r6, r5
 8035954:	4621      	mov	r1, r4
 8035956:	9801      	ldr	r0, [sp, #4]
 8035958:	462a      	mov	r2, r5
 803595a:	f7fd ffaf 	bl	80338bc <__lshift>
 803595e:	1b7f      	subs	r7, r7, r5
 8035960:	4604      	mov	r4, r0
 8035962:	f100 0a14 	add.w	sl, r0, #20
 8035966:	f04f 0900 	mov.w	r9, #0
 803596a:	e7b8      	b.n	80358de <__gethex+0x1b6>
 803596c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8035970:	42bd      	cmp	r5, r7
 8035972:	dd6f      	ble.n	8035a54 <__gethex+0x32c>
 8035974:	1bed      	subs	r5, r5, r7
 8035976:	42ae      	cmp	r6, r5
 8035978:	dc34      	bgt.n	80359e4 <__gethex+0x2bc>
 803597a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803597e:	2b02      	cmp	r3, #2
 8035980:	d022      	beq.n	80359c8 <__gethex+0x2a0>
 8035982:	2b03      	cmp	r3, #3
 8035984:	d024      	beq.n	80359d0 <__gethex+0x2a8>
 8035986:	2b01      	cmp	r3, #1
 8035988:	d115      	bne.n	80359b6 <__gethex+0x28e>
 803598a:	42ae      	cmp	r6, r5
 803598c:	d113      	bne.n	80359b6 <__gethex+0x28e>
 803598e:	2e01      	cmp	r6, #1
 8035990:	d10b      	bne.n	80359aa <__gethex+0x282>
 8035992:	9a02      	ldr	r2, [sp, #8]
 8035994:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8035998:	6013      	str	r3, [r2, #0]
 803599a:	2301      	movs	r3, #1
 803599c:	6123      	str	r3, [r4, #16]
 803599e:	f8ca 3000 	str.w	r3, [sl]
 80359a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80359a4:	2562      	movs	r5, #98	@ 0x62
 80359a6:	601c      	str	r4, [r3, #0]
 80359a8:	e73a      	b.n	8035820 <__gethex+0xf8>
 80359aa:	1e71      	subs	r1, r6, #1
 80359ac:	4620      	mov	r0, r4
 80359ae:	f7fe f9be 	bl	8033d2e <__any_on>
 80359b2:	2800      	cmp	r0, #0
 80359b4:	d1ed      	bne.n	8035992 <__gethex+0x26a>
 80359b6:	9801      	ldr	r0, [sp, #4]
 80359b8:	4621      	mov	r1, r4
 80359ba:	f7fd fd9a 	bl	80334f2 <_Bfree>
 80359be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80359c0:	2300      	movs	r3, #0
 80359c2:	6013      	str	r3, [r2, #0]
 80359c4:	2550      	movs	r5, #80	@ 0x50
 80359c6:	e72b      	b.n	8035820 <__gethex+0xf8>
 80359c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80359ca:	2b00      	cmp	r3, #0
 80359cc:	d1f3      	bne.n	80359b6 <__gethex+0x28e>
 80359ce:	e7e0      	b.n	8035992 <__gethex+0x26a>
 80359d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80359d2:	2b00      	cmp	r3, #0
 80359d4:	d1dd      	bne.n	8035992 <__gethex+0x26a>
 80359d6:	e7ee      	b.n	80359b6 <__gethex+0x28e>
 80359d8:	0803be52 	.word	0x0803be52
 80359dc:	0803c18a 	.word	0x0803c18a
 80359e0:	0803c428 	.word	0x0803c428
 80359e4:	1e6f      	subs	r7, r5, #1
 80359e6:	f1b9 0f00 	cmp.w	r9, #0
 80359ea:	d130      	bne.n	8035a4e <__gethex+0x326>
 80359ec:	b127      	cbz	r7, 80359f8 <__gethex+0x2d0>
 80359ee:	4639      	mov	r1, r7
 80359f0:	4620      	mov	r0, r4
 80359f2:	f7fe f99c 	bl	8033d2e <__any_on>
 80359f6:	4681      	mov	r9, r0
 80359f8:	117a      	asrs	r2, r7, #5
 80359fa:	2301      	movs	r3, #1
 80359fc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8035a00:	f007 071f 	and.w	r7, r7, #31
 8035a04:	40bb      	lsls	r3, r7
 8035a06:	4213      	tst	r3, r2
 8035a08:	4629      	mov	r1, r5
 8035a0a:	4620      	mov	r0, r4
 8035a0c:	bf18      	it	ne
 8035a0e:	f049 0902 	orrne.w	r9, r9, #2
 8035a12:	f7ff fe21 	bl	8035658 <rshift>
 8035a16:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8035a1a:	1b76      	subs	r6, r6, r5
 8035a1c:	2502      	movs	r5, #2
 8035a1e:	f1b9 0f00 	cmp.w	r9, #0
 8035a22:	d047      	beq.n	8035ab4 <__gethex+0x38c>
 8035a24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8035a28:	2b02      	cmp	r3, #2
 8035a2a:	d015      	beq.n	8035a58 <__gethex+0x330>
 8035a2c:	2b03      	cmp	r3, #3
 8035a2e:	d017      	beq.n	8035a60 <__gethex+0x338>
 8035a30:	2b01      	cmp	r3, #1
 8035a32:	d109      	bne.n	8035a48 <__gethex+0x320>
 8035a34:	f019 0f02 	tst.w	r9, #2
 8035a38:	d006      	beq.n	8035a48 <__gethex+0x320>
 8035a3a:	f8da 3000 	ldr.w	r3, [sl]
 8035a3e:	ea49 0903 	orr.w	r9, r9, r3
 8035a42:	f019 0f01 	tst.w	r9, #1
 8035a46:	d10e      	bne.n	8035a66 <__gethex+0x33e>
 8035a48:	f045 0510 	orr.w	r5, r5, #16
 8035a4c:	e032      	b.n	8035ab4 <__gethex+0x38c>
 8035a4e:	f04f 0901 	mov.w	r9, #1
 8035a52:	e7d1      	b.n	80359f8 <__gethex+0x2d0>
 8035a54:	2501      	movs	r5, #1
 8035a56:	e7e2      	b.n	8035a1e <__gethex+0x2f6>
 8035a58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035a5a:	f1c3 0301 	rsb	r3, r3, #1
 8035a5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8035a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035a62:	2b00      	cmp	r3, #0
 8035a64:	d0f0      	beq.n	8035a48 <__gethex+0x320>
 8035a66:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8035a6a:	f104 0314 	add.w	r3, r4, #20
 8035a6e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8035a72:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8035a76:	f04f 0c00 	mov.w	ip, #0
 8035a7a:	4618      	mov	r0, r3
 8035a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8035a80:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8035a84:	d01b      	beq.n	8035abe <__gethex+0x396>
 8035a86:	3201      	adds	r2, #1
 8035a88:	6002      	str	r2, [r0, #0]
 8035a8a:	2d02      	cmp	r5, #2
 8035a8c:	f104 0314 	add.w	r3, r4, #20
 8035a90:	d13c      	bne.n	8035b0c <__gethex+0x3e4>
 8035a92:	f8d8 2000 	ldr.w	r2, [r8]
 8035a96:	3a01      	subs	r2, #1
 8035a98:	42b2      	cmp	r2, r6
 8035a9a:	d109      	bne.n	8035ab0 <__gethex+0x388>
 8035a9c:	1171      	asrs	r1, r6, #5
 8035a9e:	2201      	movs	r2, #1
 8035aa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8035aa4:	f006 061f 	and.w	r6, r6, #31
 8035aa8:	fa02 f606 	lsl.w	r6, r2, r6
 8035aac:	421e      	tst	r6, r3
 8035aae:	d13a      	bne.n	8035b26 <__gethex+0x3fe>
 8035ab0:	f045 0520 	orr.w	r5, r5, #32
 8035ab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035ab6:	601c      	str	r4, [r3, #0]
 8035ab8:	9b02      	ldr	r3, [sp, #8]
 8035aba:	601f      	str	r7, [r3, #0]
 8035abc:	e6b0      	b.n	8035820 <__gethex+0xf8>
 8035abe:	4299      	cmp	r1, r3
 8035ac0:	f843 cc04 	str.w	ip, [r3, #-4]
 8035ac4:	d8d9      	bhi.n	8035a7a <__gethex+0x352>
 8035ac6:	68a3      	ldr	r3, [r4, #8]
 8035ac8:	459b      	cmp	fp, r3
 8035aca:	db17      	blt.n	8035afc <__gethex+0x3d4>
 8035acc:	6861      	ldr	r1, [r4, #4]
 8035ace:	9801      	ldr	r0, [sp, #4]
 8035ad0:	3101      	adds	r1, #1
 8035ad2:	f7fd fce9 	bl	80334a8 <_Balloc>
 8035ad6:	4681      	mov	r9, r0
 8035ad8:	b918      	cbnz	r0, 8035ae2 <__gethex+0x3ba>
 8035ada:	4b1a      	ldr	r3, [pc, #104]	@ (8035b44 <__gethex+0x41c>)
 8035adc:	4602      	mov	r2, r0
 8035ade:	2184      	movs	r1, #132	@ 0x84
 8035ae0:	e6c5      	b.n	803586e <__gethex+0x146>
 8035ae2:	6922      	ldr	r2, [r4, #16]
 8035ae4:	3202      	adds	r2, #2
 8035ae6:	f104 010c 	add.w	r1, r4, #12
 8035aea:	0092      	lsls	r2, r2, #2
 8035aec:	300c      	adds	r0, #12
 8035aee:	f7f8 f9ab 	bl	802de48 <memcpy>
 8035af2:	4621      	mov	r1, r4
 8035af4:	9801      	ldr	r0, [sp, #4]
 8035af6:	f7fd fcfc 	bl	80334f2 <_Bfree>
 8035afa:	464c      	mov	r4, r9
 8035afc:	6923      	ldr	r3, [r4, #16]
 8035afe:	1c5a      	adds	r2, r3, #1
 8035b00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8035b04:	6122      	str	r2, [r4, #16]
 8035b06:	2201      	movs	r2, #1
 8035b08:	615a      	str	r2, [r3, #20]
 8035b0a:	e7be      	b.n	8035a8a <__gethex+0x362>
 8035b0c:	6922      	ldr	r2, [r4, #16]
 8035b0e:	455a      	cmp	r2, fp
 8035b10:	dd0b      	ble.n	8035b2a <__gethex+0x402>
 8035b12:	2101      	movs	r1, #1
 8035b14:	4620      	mov	r0, r4
 8035b16:	f7ff fd9f 	bl	8035658 <rshift>
 8035b1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8035b1e:	3701      	adds	r7, #1
 8035b20:	42bb      	cmp	r3, r7
 8035b22:	f6ff aee0 	blt.w	80358e6 <__gethex+0x1be>
 8035b26:	2501      	movs	r5, #1
 8035b28:	e7c2      	b.n	8035ab0 <__gethex+0x388>
 8035b2a:	f016 061f 	ands.w	r6, r6, #31
 8035b2e:	d0fa      	beq.n	8035b26 <__gethex+0x3fe>
 8035b30:	4453      	add	r3, sl
 8035b32:	f1c6 0620 	rsb	r6, r6, #32
 8035b36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8035b3a:	f7fd fd73 	bl	8033624 <__hi0bits>
 8035b3e:	42b0      	cmp	r0, r6
 8035b40:	dbe7      	blt.n	8035b12 <__gethex+0x3ea>
 8035b42:	e7f0      	b.n	8035b26 <__gethex+0x3fe>
 8035b44:	0803c18a 	.word	0x0803c18a

08035b48 <L_shift>:
 8035b48:	f1c2 0208 	rsb	r2, r2, #8
 8035b4c:	0092      	lsls	r2, r2, #2
 8035b4e:	b570      	push	{r4, r5, r6, lr}
 8035b50:	f1c2 0620 	rsb	r6, r2, #32
 8035b54:	6843      	ldr	r3, [r0, #4]
 8035b56:	6804      	ldr	r4, [r0, #0]
 8035b58:	fa03 f506 	lsl.w	r5, r3, r6
 8035b5c:	432c      	orrs	r4, r5
 8035b5e:	40d3      	lsrs	r3, r2
 8035b60:	6004      	str	r4, [r0, #0]
 8035b62:	f840 3f04 	str.w	r3, [r0, #4]!
 8035b66:	4288      	cmp	r0, r1
 8035b68:	d3f4      	bcc.n	8035b54 <L_shift+0xc>
 8035b6a:	bd70      	pop	{r4, r5, r6, pc}

08035b6c <__match>:
 8035b6c:	b530      	push	{r4, r5, lr}
 8035b6e:	6803      	ldr	r3, [r0, #0]
 8035b70:	3301      	adds	r3, #1
 8035b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8035b76:	b914      	cbnz	r4, 8035b7e <__match+0x12>
 8035b78:	6003      	str	r3, [r0, #0]
 8035b7a:	2001      	movs	r0, #1
 8035b7c:	bd30      	pop	{r4, r5, pc}
 8035b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8035b82:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8035b86:	2d19      	cmp	r5, #25
 8035b88:	bf98      	it	ls
 8035b8a:	3220      	addls	r2, #32
 8035b8c:	42a2      	cmp	r2, r4
 8035b8e:	d0f0      	beq.n	8035b72 <__match+0x6>
 8035b90:	2000      	movs	r0, #0
 8035b92:	e7f3      	b.n	8035b7c <__match+0x10>

08035b94 <__hexnan>:
 8035b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035b98:	680b      	ldr	r3, [r1, #0]
 8035b9a:	6801      	ldr	r1, [r0, #0]
 8035b9c:	115e      	asrs	r6, r3, #5
 8035b9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8035ba2:	f013 031f 	ands.w	r3, r3, #31
 8035ba6:	b087      	sub	sp, #28
 8035ba8:	bf18      	it	ne
 8035baa:	3604      	addne	r6, #4
 8035bac:	2500      	movs	r5, #0
 8035bae:	1f37      	subs	r7, r6, #4
 8035bb0:	4682      	mov	sl, r0
 8035bb2:	4690      	mov	r8, r2
 8035bb4:	9301      	str	r3, [sp, #4]
 8035bb6:	f846 5c04 	str.w	r5, [r6, #-4]
 8035bba:	46b9      	mov	r9, r7
 8035bbc:	463c      	mov	r4, r7
 8035bbe:	9502      	str	r5, [sp, #8]
 8035bc0:	46ab      	mov	fp, r5
 8035bc2:	784a      	ldrb	r2, [r1, #1]
 8035bc4:	1c4b      	adds	r3, r1, #1
 8035bc6:	9303      	str	r3, [sp, #12]
 8035bc8:	b342      	cbz	r2, 8035c1c <__hexnan+0x88>
 8035bca:	4610      	mov	r0, r2
 8035bcc:	9105      	str	r1, [sp, #20]
 8035bce:	9204      	str	r2, [sp, #16]
 8035bd0:	f7ff fd94 	bl	80356fc <__hexdig_fun>
 8035bd4:	2800      	cmp	r0, #0
 8035bd6:	d151      	bne.n	8035c7c <__hexnan+0xe8>
 8035bd8:	9a04      	ldr	r2, [sp, #16]
 8035bda:	9905      	ldr	r1, [sp, #20]
 8035bdc:	2a20      	cmp	r2, #32
 8035bde:	d818      	bhi.n	8035c12 <__hexnan+0x7e>
 8035be0:	9b02      	ldr	r3, [sp, #8]
 8035be2:	459b      	cmp	fp, r3
 8035be4:	dd13      	ble.n	8035c0e <__hexnan+0x7a>
 8035be6:	454c      	cmp	r4, r9
 8035be8:	d206      	bcs.n	8035bf8 <__hexnan+0x64>
 8035bea:	2d07      	cmp	r5, #7
 8035bec:	dc04      	bgt.n	8035bf8 <__hexnan+0x64>
 8035bee:	462a      	mov	r2, r5
 8035bf0:	4649      	mov	r1, r9
 8035bf2:	4620      	mov	r0, r4
 8035bf4:	f7ff ffa8 	bl	8035b48 <L_shift>
 8035bf8:	4544      	cmp	r4, r8
 8035bfa:	d952      	bls.n	8035ca2 <__hexnan+0x10e>
 8035bfc:	2300      	movs	r3, #0
 8035bfe:	f1a4 0904 	sub.w	r9, r4, #4
 8035c02:	f844 3c04 	str.w	r3, [r4, #-4]
 8035c06:	f8cd b008 	str.w	fp, [sp, #8]
 8035c0a:	464c      	mov	r4, r9
 8035c0c:	461d      	mov	r5, r3
 8035c0e:	9903      	ldr	r1, [sp, #12]
 8035c10:	e7d7      	b.n	8035bc2 <__hexnan+0x2e>
 8035c12:	2a29      	cmp	r2, #41	@ 0x29
 8035c14:	d157      	bne.n	8035cc6 <__hexnan+0x132>
 8035c16:	3102      	adds	r1, #2
 8035c18:	f8ca 1000 	str.w	r1, [sl]
 8035c1c:	f1bb 0f00 	cmp.w	fp, #0
 8035c20:	d051      	beq.n	8035cc6 <__hexnan+0x132>
 8035c22:	454c      	cmp	r4, r9
 8035c24:	d206      	bcs.n	8035c34 <__hexnan+0xa0>
 8035c26:	2d07      	cmp	r5, #7
 8035c28:	dc04      	bgt.n	8035c34 <__hexnan+0xa0>
 8035c2a:	462a      	mov	r2, r5
 8035c2c:	4649      	mov	r1, r9
 8035c2e:	4620      	mov	r0, r4
 8035c30:	f7ff ff8a 	bl	8035b48 <L_shift>
 8035c34:	4544      	cmp	r4, r8
 8035c36:	d936      	bls.n	8035ca6 <__hexnan+0x112>
 8035c38:	f1a8 0204 	sub.w	r2, r8, #4
 8035c3c:	4623      	mov	r3, r4
 8035c3e:	f853 1b04 	ldr.w	r1, [r3], #4
 8035c42:	f842 1f04 	str.w	r1, [r2, #4]!
 8035c46:	429f      	cmp	r7, r3
 8035c48:	d2f9      	bcs.n	8035c3e <__hexnan+0xaa>
 8035c4a:	1b3b      	subs	r3, r7, r4
 8035c4c:	f023 0303 	bic.w	r3, r3, #3
 8035c50:	3304      	adds	r3, #4
 8035c52:	3401      	adds	r4, #1
 8035c54:	3e03      	subs	r6, #3
 8035c56:	42b4      	cmp	r4, r6
 8035c58:	bf88      	it	hi
 8035c5a:	2304      	movhi	r3, #4
 8035c5c:	4443      	add	r3, r8
 8035c5e:	2200      	movs	r2, #0
 8035c60:	f843 2b04 	str.w	r2, [r3], #4
 8035c64:	429f      	cmp	r7, r3
 8035c66:	d2fb      	bcs.n	8035c60 <__hexnan+0xcc>
 8035c68:	683b      	ldr	r3, [r7, #0]
 8035c6a:	b91b      	cbnz	r3, 8035c74 <__hexnan+0xe0>
 8035c6c:	4547      	cmp	r7, r8
 8035c6e:	d128      	bne.n	8035cc2 <__hexnan+0x12e>
 8035c70:	2301      	movs	r3, #1
 8035c72:	603b      	str	r3, [r7, #0]
 8035c74:	2005      	movs	r0, #5
 8035c76:	b007      	add	sp, #28
 8035c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035c7c:	3501      	adds	r5, #1
 8035c7e:	2d08      	cmp	r5, #8
 8035c80:	f10b 0b01 	add.w	fp, fp, #1
 8035c84:	dd06      	ble.n	8035c94 <__hexnan+0x100>
 8035c86:	4544      	cmp	r4, r8
 8035c88:	d9c1      	bls.n	8035c0e <__hexnan+0x7a>
 8035c8a:	2300      	movs	r3, #0
 8035c8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8035c90:	2501      	movs	r5, #1
 8035c92:	3c04      	subs	r4, #4
 8035c94:	6822      	ldr	r2, [r4, #0]
 8035c96:	f000 000f 	and.w	r0, r0, #15
 8035c9a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8035c9e:	6020      	str	r0, [r4, #0]
 8035ca0:	e7b5      	b.n	8035c0e <__hexnan+0x7a>
 8035ca2:	2508      	movs	r5, #8
 8035ca4:	e7b3      	b.n	8035c0e <__hexnan+0x7a>
 8035ca6:	9b01      	ldr	r3, [sp, #4]
 8035ca8:	2b00      	cmp	r3, #0
 8035caa:	d0dd      	beq.n	8035c68 <__hexnan+0xd4>
 8035cac:	f1c3 0320 	rsb	r3, r3, #32
 8035cb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8035cb4:	40da      	lsrs	r2, r3
 8035cb6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8035cba:	4013      	ands	r3, r2
 8035cbc:	f846 3c04 	str.w	r3, [r6, #-4]
 8035cc0:	e7d2      	b.n	8035c68 <__hexnan+0xd4>
 8035cc2:	3f04      	subs	r7, #4
 8035cc4:	e7d0      	b.n	8035c68 <__hexnan+0xd4>
 8035cc6:	2004      	movs	r0, #4
 8035cc8:	e7d5      	b.n	8035c76 <__hexnan+0xe2>
	...

08035ccc <_init>:
 8035ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035cce:	bf00      	nop
 8035cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8035cd2:	bc08      	pop	{r3}
 8035cd4:	469e      	mov	lr, r3
 8035cd6:	4770      	bx	lr

08035cd8 <_fini>:
 8035cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035cda:	bf00      	nop
 8035cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8035cde:	bc08      	pop	{r3}
 8035ce0:	469e      	mov	lr, r3
 8035ce2:	4770      	bx	lr
